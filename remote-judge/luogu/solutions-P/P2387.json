[
    {
        "content": "\u76f4\u63a5\u6c42\u89e3\u6bd4\u8f83\u9ebb\u70e6\u3002\u8003\u8651\u5148\u6309\u7167$A_i$\u4e3a\u5173\u952e\u5b57\u5c06\u6bcf\u6761\u8fb9\u6392\u5e8f\uff0c\u7136\u540e\u6309\u987a\u5e8f\u52a8\u6001\u52a0\u5165\u6bcf\u4e00\u6761\u8fb9\u3002\u4ee5\u4e0b\u5b9a\u4e00\u6761\u8def\u5f84\u7684\u4ee3\u4ef7\u4e3a\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u7684\u6240\u6709\u8fb9\u7684$B$\u7684\u6700\u5927\u503c\u3002\u53ef\u4ee5\u77e5\u9053\uff0c\u52a0\u5165\u7b2c$i$\u6761\u8fb9\u4e4b\u540e\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u5c31\u662f$A_i$\u52a0\u4e0a\u4ece$1$\u5230$n$\u7684\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u4ee3\u4ef7\u6700\u5c0f\u7684\u8def\u5f84\u7684\u4ee3\u4ef7\u3002\n\n\u770b\u5230\u52a8\u6001\u52a0\u8fb9\uff0c\u53ef\u4ee5\u60f3\u5230\u4f7f\u7528LCT\u6765\u5b8c\u6210\u3002\u7531\u4e8e\u8981\u7ef4\u62a4\u8fb9\u6743\uff0c\u6240\u4ee5\u8981\u628a\u8fb9\u5728LCT\u4e2d\u7406\u89e3\u6210\u70b9\u3002\n\n\u4f46\u662f\u73b0\u5728\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u51fa\u73b0\u73af\u65f6\u5e94\u8be5\u600e\u6837\u5904\u7406\u3002\u5047\u8bbe\u73b0\u5728\u8981\u8fde\u8fb9$(u,v)$\uff0c\u4f46$u$\u548c$v$\u4e4b\u95f4\u5df2\u7ecf\u5b58\u5728\u4e00\u6761\u8def\u5f84\u3002\u8fd9\u6837\u5c31\u5fc5\u987b\u5728$u$\u5230$v$\u7684\u8def\u5f84\u4e2d\u9009\u4e00\u6761\u8fb9\u65ad\u5f00\u3002\u7531\u4e8e\u64cd\u4f5c\u540e\u8981\u6c42\u5f97\u6700\u5c0f\u4ee3\u4ef7\uff0c\u56e0\u6b64\uff0c\u5e94\u8be5\u5728$u$\u5230$v$\u7684\u8def\u5f84\u4e2d\uff0c\u9009\u62e9\u4e00\u6761\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u65ad\u5f00\u540e\u518d\u8fde\u8fb9$(u,v)$\u3002\u5f53\u7136\uff0c\u5982\u679c$u$\u548c$v$\u5728\u8fde\u8fb9\u4e4b\u524d\u4e0d\u8fde\u901a\uff0c\u5c31\u4e0d\u5fc5\u8981\u505a\u8fd9\u4e2a\u6b65\u9aa4\u4e86\u3002\n\n\u8fde\u8fb9\u4e4b\u540e\uff0c\u5373\u53ef\u8be2\u95ee$1$\u5230$n$\u7684\u8def\u5f84\u4ee3\u4ef7\uff0c\u52a0\u4e0a$A_i$\u5e76\u66f4\u65b0\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\nconst int N = 2e5 + 5;\nint n, m, fa[N], lc[N], rc[N], rev[N], que[N], len, val[N], sm[N],\nf[N];\nstruct cyx {int a, b, x, y;} ask[N];\nint cx(int x) {\n    if (f[x] != x) f[x] = cx(f[x]);\n    return f[x];\n}\nvoid zm(int x, int y) {\n    int ix = cx(x), iy = cx(y);\n    if (ix != iy) f[iy] = ix;\n}\nbool comp(cyx a, cyx b) {return a.y < b.y;}\nint which(int x) {return rc[fa[x]] == x;}\nbool is_root(int x) {\n    return !fa[x] || (lc[fa[x]] != x && rc[fa[x]] != x);\n}\nvoid upt(int x) {\n    sm[x] = x;\n    if (lc[x] && val[sm[lc[x]]] > val[sm[x]]) sm[x] = sm[lc[x]];\n    if (rc[x] && val[sm[rc[x]]] > val[sm[x]]) sm[x] = sm[rc[x]];\n}\nvoid down(int x) {\n    if (rev[x]) {\n        swap(lc[x], rc[x]);\n        if (lc[x]) rev[lc[x]] ^= 1;\n        if (rc[x]) rev[rc[x]] ^= 1;\n        rev[x] = 0;\n    }\n} \nvoid rotate(int x) {\n    int y = fa[x], z = fa[y], b = lc[y] == x ? rc[x] : lc[x];\n    if (z && !is_root(y)) (lc[z] == y ? lc[z] : rc[z]) = x;\n    fa[x] = z; fa[y] = x; b ? fa[b] = y : 0;\n    if (lc[y] == x) rc[x] = y, lc[y] = b;\n    else lc[x] = y, rc[y] = b; upt(y); upt(x);\n}\nvoid splay(int x) {\n    int i, y; que[len = 1] = x;\n    for (y = x; !is_root(y); y = fa[y]) que[++len] = fa[y];\n    for (i = len; i >= 1; i--) down(que[i]);\n    while (!is_root(x)) {\n        if (!is_root(fa[x])) {\n            if (which(x) == which(fa[x])) rotate(fa[x]);\n            else rotate(x);\n        }\n        rotate(x);\n    }\n    upt(x);\n}\nvoid Access(int x) {\n    int y;\n    for (y = 0; x; y = x, x = fa[x]) {\n        splay(x); rc[x] = y;\n        if (y) fa[y] = x; upt(x);\n    }\n}\nint Find_Root(int x) {\n    Access(x); splay(x);\n    while (down(x), lc[x]) x = lc[x];\n    splay(x); return x;\n}\nvoid Make_Root(int x) {\n    Access(x); splay(x);\n    rev[x] ^= 1;\n}\nvoid Link(int x, int y) {\n    Make_Root(x); fa[x] = y;\n}\nvoid Cut(int x, int y) {\n    Make_Root(x); Access(y); splay(y);\n    lc[y] = 0; fa[x] = 0; upt(y);\n}\nint Select(int x, int y) {\n    Make_Root(x); Access(y); splay(y);\n    return sm[y];\n}\nint main() {\n    int i, ans = 2e9; n = read(); m = read();\n    for (i = 1; i <= m; i++)\n        ask[i].a = read(), ask[i].b = read(),\n        ask[i].x = read(), ask[i].y = read();\n    sort(ask + 1, ask + m + 1, comp);\n    for (i = 1; i <= n + m; i++) f[i] = sm[i] = i;\n    for (i = n + 1; i <= n + m; i++) val[i] = ask[i - n].x;\n    for (i = 1; i <= m; i++) {\n        int u = ask[i].a, v = ask[i].b; bool flag = 1;\n        if (cx(u) == cx(v)) {\n            int w = Select(u, v);\n            if (val[w] > ask[i].x)\n                Cut(ask[w - n].a, w), Cut(w, ask[w - n].b);\n            else flag = 0;\n        }\n        else zm(u, v); if (flag) Link(u, i + n), Link(i + n, v);\n        if (cx(1) == cx(n))\n            ans = min(ans, ask[i].y + val[Select(1, n)]);\n    }\n    if (ans < 2e9) printf(\"%d\\n\", ans);\n    else printf(\"-1\\n\");\n    return 0;\n}\n```",
        "postTime": 1512882095,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2387\u3010\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\u611f\u89c9\u6700\u8fd1\u505a\u7684\u4e00\u4e9b$LCT$\u7684\u9898\u76ee\u5176\u5b9e\u90fd\u662f\u4e0d\u65ad\u52a0\u8fb9\uff0c\u5224\u73af\uff0c\u53d6\u8f83\u4f18\u8005\u3002\n\n\u6bd4\u5982\u8fd9\u9053\u9898\uff0c\u4e00\u53e5\u8bdd\u9898\u89e3\u5c31\u662f\u6309\u7167\u8fb9\u6743$A$\u6392\u5e8f\u540e\u7528$LCT$\u7ef4\u62a4\u8fb9\u6743$B$\u7684\u6700\u5c0f\u751f\u6210\u6811\n\n\u6bd4\u5982[\u6700\u5c0f\u751f\u6210\u6811](https://www.luogu.org/blog/Soulist/solution-p3366)\uff0c\u5b83\u7528$LCT$\u5b9e\u73b0\u7684\u8bdd\u4e3b\u8981\u5c31\u662f\u9047\u5230\u4e00\u6761\u8fb9\u540e\uff0c\u82e5\u5176\u8054\u901a\u4e86\u4e24\u4e2a\u5df2\u7ecf\u8054\u901a\u7684\u70b9\uff0c\u90a3\u4e48\u5176\u4e3a\u8fd4\u7956\u8fb9\uff0c\u4f1a\u5f62\u6210\u73af\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u73af\u4e0a\u6700\u5927\u7684\u8fb9\u65ad\u6389\u5373\u53ef\u3002\n\n\u7b80\u5355\u5199\u5c31\u662f$split(u,v)$\uff0c\u7136\u540e\u628a$cut(max, u), cut(max,v)$\n\n\u8fd9\u9053\u9898\u4e5f\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u79bb\u7ebf\uff0c\u5c06\u8fb9\u6309\u7167\u8fb9\u6743$A$\u6392\u5e8f\n\n\u7136\u540e\u4e0d\u65ad\u7684\u52a0\u8fb9\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u8fde\u63a5\u4e86\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u662f\u5fc5\u9700\u7684\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4fdd\u8bc1\u4e86\u8fb9\u6743$A$\u5355\u8c03\u9012\u589e\uff0c\u6211\u4eec\u7528$LCT$\u7ef4\u62a4\u56fe\u4e2d\u7684\u8fb9\u6743$B$\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u5176\u6c9f\u901a\u4e86\u4e24\u4e2a\u5df2\u7ecf\u8054\u901a\u7684\u8054\u901a\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff1a\n\n\u5f53\u524d\u8def\u5f84\u7684$A$\u6bd4\u4e4b\u524d\u5b58\u5728\u7684\u4efb\u610f\u8def\u5f84\u7684$A$\u90fd\u5927\uff0c\u5982\u679c\u5176$B$\u6bd4\u8fd9\u73af\u4e0a\u8fb9$B$\u7684\u6700\u5927\u503c\u8fd8\u8981\u5927\uff0c\u90a3\u4e48\u52a0\u5165\u8fd9\u6761\u8fb9\u53ea\u4f1a\u8ba9\u7b54\u6848\u53d8\u5f97\u66f4\u4e0d\u4f18\u3002\n\n\u5982\u679c\u5f53\u524d\u8def\u5f84\u7684$B$\u6bd4\u73af\u4e0a\u6700\u5927\u7684$B$\u8981\u5c0f\uff0c\u90a3\u4e48\u52a0\u5165\u8fd9\u6761\u8def\u5f84\u540e\uff0c\u663e\u7136\u6709\uff1a\n\n$(1):$\u5047\u5982\u5f53\u524d$1-n$\u672a\u8054\u901a\uff0c\u90a3\u4e48\u5bf9\u4e8e\u540e\u7eed\u7684\u8fb9\uff0c\u82e5\u5176\u52a0\u5165\u540e\u53ef\u4ee5\u4f7f$1-n$\u8054\u901a\uff0c\u4e0d\u96be\u60f3\u5230\uff1a\u5176$A$\u663e\u7136\u4ecd\u7136\u5927\u4e8e\u5f53\u524d\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6700\u5c0f\u5316\u94fe\u4e0a\u7684$B$\uff0c\u4e5f\u5c31\u662f\u65ad\u6389\u73af\u4e0a\u6700\u5927$B$\u7684\u8fb9\uff0c\u7136\u540e\u52a0\u5165\u8fd9\u6761\u8fb9\n\n$(2):$\u5047\u5982\u5f53\u524d$1-n$\u5df2\u7ecf\u8054\u901a\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u5df2\u7ecf\u6c42\u5f97\u4e86\u6700\u5927 A \u6bd4\u6b64\u8fb9\u5c0f\u7684\u65f6\u5019\u7684\u7b54\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u52a0\u5165\u6b64\u8fb9\uff0c\u6c42\u51fa\u6700\u5927 A \u7a0d\u5fae\u5927\u4e00\u70b9\u7684\u7b54\u6848\uff0c\u53d6$min$\uff0c\u7136\u540e\u7c7b\u4f3c$(1)$\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6761\u8fb9\u52a0\u5165\u540e\u4f1a\u4f7f\u5f97\u540e\u7eed\u8fb9\u7b97\u5f97\u7684\u7b54\u6848\u66f4\u4f18\u3002\n\n\u5f53\u7136\u524d\u63d0\u662f\u8fd9\u6761\u8fb9\u7684$B$\u5927\u4e8e\u73af\u4e0a\u6700\u5927$B$\n\n\u6ce8\u610f\u7ec6\u8282\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read() {\n\tchar cc = getchar(); int cn = 0, flus = 1;\n\twhile(cc < '0' || cc > '9') {  if( cc == '-' ) flus = -flus;  cc = getchar();  }\n\twhile(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n\treturn cn * flus;\n}\n#define rep( i, s, t ) for( register int i = s; i <= t; ++ i )\n#define ls(x) t[x].son[0]\n#define rs(x) t[x].son[1]\nconst int N =  150000 + 5; \nconst int inf = 1234567890;\nstruct E {\n\tint from, to, a, b;\n} e[N];\nstruct LCT {\n\tint son[2], fa, mx, id;\n\tbool mark;\n} t[N];\nint n, m, Idnum, ans, w[N], st[N];\nbool cmp( E x, E y ) {\n\treturn ( x.a == y.a ) ? x.b < y.b : x.a < y.a ;\n}\nbool isroot( int x ) {\n\treturn ( ls(t[x].fa) != x ) && ( rs(t[x].fa) != x );\n}\nvoid pushup( int x ) {\n\tt[x].mx = w[x], t[x].id = x;\n\tif( ls(x) && t[ls(x)].mx > t[x].mx ) t[x].mx = t[ls(x)].mx, t[x].id = t[ls(x)].id;\n\tif( rs(x) && t[rs(x)].mx > t[x].mx ) t[x].mx = t[rs(x)].mx, t[x].id = t[rs(x)].id;\n}\nvoid rotate( int x ) {\n\tint f = t[x].fa, ff = t[f].fa, qwq = ( rs(f) == x );\n\tt[x].fa = ff;\n\tif( !isroot(f) ) t[ff].son[rs(ff) == f] = x;\n\tt[f].son[qwq] = t[x].son[qwq ^ 1], t[t[x].son[qwq ^ 1]].fa = f;\n\tt[x].son[qwq ^ 1] = f, t[f].fa = x;\n\tpushup(f), pushup(x);\n}\nvoid pushmark( int x ) {\n\tif( t[x].mark ) {\n\t\tt[x].mark = 0, t[ls(x)].mark ^= 1, t[rs(x)].mark ^= 1,\n\t\tswap( ls(x), rs(x) );\n\t}\n} \nvoid Splay( int x ) {\n\tint top = 0, now = x; st[++top] = now;\n\twhile( !isroot(now) ) st[++top] = ( now = t[now].fa );\n\twhile( top ) pushmark( st[top--] );\n\twhile( !isroot(x) ) {\n\t\tint f = t[x].fa, ff = t[f].fa;\n\t\tif( !isroot(f) ) ( ( rs(ff) == f ) ^ ( rs(f) == x ) ) ? rotate(x) : rotate(f) ;\n\t\trotate(x);\n\t}\n}\nvoid access( int x ) {\n\tfor( int y = 0; x; y = x, x = t[y].fa )\n\t\tSplay(x), t[x].son[1] = y, pushup(x);\n}\nvoid makeroot( int x ) {\n\taccess(x), Splay(x), t[x].mark ^= 1, pushmark(x);\n}\nint findroot( int x ) {\n\taccess(x), Splay(x), pushmark(x);\n\twhile( ls(x) ) pushmark( x = ls(x) );\n\treturn x;\n}\nvoid split( int x, int y ) {\n\tmakeroot(x), access(y), Splay(y);\n}\nvoid link( int x, int y ) {\n\tmakeroot(x);\n\tif( findroot(y) != x ) t[x].fa = y;\n}\nbool check( int x, int y ) {\n\tmakeroot(x);\n\treturn findroot(y) != x;\n}\nsigned main()\n{\n\tn = read(), m = read(), ans = inf;\n\trep( i, 1, m ) e[i].from = read(), e[i].to = read(), e[i].a = read(), e[i].b = read();\n\tsort( e + 1, e + m + 1, cmp );\n\trep( i, 1, m ) {\n\t\tw[i + n] = e[i].b;\n\t\tif( e[i].from == e[i].to ) continue;\n\t\tif( check( e[i].from, e[i].to ) ) link( e[i].from, i + n ), link( i + n, e[i].to );\n\t\telse {\n\t\t\tsplit( e[i].from, e[i].to );\n\t\t\tint now = t[e[i].to].id, maxb = t[e[i].to].mx;\n\t\t\tif( maxb <= e[i].b ) continue;\n\t\t\tSplay( now ), t[ls(now)].fa = t[rs(now)].fa = 0;\n\t\t\tlink( e[i].from, i + n ), link( i + n, e[i].to );\n\t\t} \n\t\tif( !check( 1, n ) ) {\n\t\t\tsplit( 1, n ); ans = min( ans, t[n].mx + e[i].a );\n\t\t}\n\t}\n\tif( ans == inf ) puts(\"-1\");\n\telse printf(\"%d\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1553239307,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\u611f\u89c9\u5176\u4ed6\u9898\u89e3\u5e76\u4e0d\u662f\u5f88\u8be6\u7ec6\u3002\u3002\u3002\u6240\u4ee5\u5199\u4e00\u7bc7\u6bd4\u8f83\u8be6\u7ec6\u5730\u8bb2\u89e3\u4e86\u601d\u8def\u7684\u9898\u89e3\u3002\u987a\u4fbf\u8d34\u4e0b\u81ea\u5df1\u7684Blog:[Panda\\_2134's Blog](https://blog.panda2134.site/2018/01/18/MagicForest)\n\n\n## \u9898\u610f\n\n\n\u7ed9\u51fa\u4e00\u4e2a$n$\u4e2a\u70b9\uff0c$m$\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u6743\u503c$a_i,b_i$\uff0c\u6c42\u4e00\u6761\u4ece\u70b9$1$\u5230\u70b9$n$\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u4e0a\u8fb9\u7684$a_i,b_i$\u6700\u5927\u503c\u4e4b\u548c\u6700\u5c0f\u3002$2 \\leq n \\leq 5 \\times 10^4, 0 \\leq m \\leq 1 \\times 10^5$\u3002\n\n\n\n## \u601d\u8def\n\n\n### \u4e8c\u5206\uff1f\n\n\n\u770b\u5230\\*\u6700\u5927\u503c\u6700\u5c0f\\*\uff0c\u60f3\u5230\u4e8c\u5206\u3002\u600e\u4e48\u4e8c\u5206\u5462\uff1f\u5982\u679c\u662f\u53ea\u6709\u4e00\u79cd\u6743\u503c\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u4e8c\u5206+BFS\uff0c\u4e0d\u8fc7\u6211\u4eec\u6709\u66f4\u597d\u7684\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u74f6\u9888\u751f\u6210\u6811\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u91cc\u8981\u6c42\u51fa2\u4e2a\u53c2\u6570\u7684\u74f6\u9888\u751f\u6210\u6811\u3002\u5bf9\u4e8e\u67092\u79cd\u6743\u503c\u7684\u60c5\u51b5\uff0c\u662f\u5426\u4e5f\u53ef\u4ee5\u7c7b\u4f3c\u5730\u76f4\u63a5\u8d2a\u5fc3\u5462\uff1f\u6bd4\u5982\u8bf4\uff0c\u6309\u7167$a_i+b_i$\u6392\u5e8f\uff1f\u542c\u4e0a\u53bb\u5c31\u4e0d\u9760\u8c31\u3002\u6216\u8005\u8bf4\u5148\u4e8c\u5206$a_i$\uff0c\u5bf9\u6bcf\u4e2a$a_i$\u7684\u503c\u53bb\u4e8c\u5206$b_i$\uff1f \u8fd9\u4e5f\u4e0d\u7b26\u5408\u201c\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\u201d\u8fd9\u4e2a\u8981\u6c42\u3002\n\n\n### \u751f\u6210\u6811\uff01\n\n\n\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u505a\u6cd5\u5012\u662f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u601d\u8def\u3002\u6211\u4eec\u4e5f\u8bb8\u53ef\u4ee5\u679a\u4e3e$\\max\\{a_i\\}$\uff0c\u5bf9\u6bcf\u4e2a\u679a\u4e3e\u51fa\u6765\u7684$\\max\\{a_i\\}$\u53bb\u5224\u65ad\u5982\u4f55\u52a0\u8fb9\u3002 \u66b4\u529b\u679a\u4e3e\u590d\u6742\u5ea6\u592a\u9ad8\u3002\u8003\u8651\u6548\u4effKruskal\u7b97\u6cd5\uff0c\u628a\u8fb9\u6309\u7167$a_i$\u6392\u5e8f\uff0c\u7136\u540e\u518d\u679a\u4e3e\u5f53\u524d\u8003\u8651\u7b2c\u51e0\u6761\u8fb9\u3002\u8fd9\u6837\u7684\u8bdd\u6bcf\u6b21\u5224\u65ad\u662f\u5426\u52a0\u5165\u5f53\u524d\u8fb9\u5373\u53ef\u3002\u5224\u65ad\u7684\u4f9d\u636e\u662f\u4ec0\u4e48\uff1f\u662f\u5426\u6210\u73af\uff0c\u73af\u4e2d\u6700\u5927\u8fb9\u662f\u54ea\u6761\u3002\u6839\u636e\u751f\u6210\u6811\u7684\u56de\u8def\u6027\u8d28\uff0c\u67d0\u4e2a\u56de\u8def\u4e2d\u7684\u6743\u503c\u6700\u5927\u8fb9\u6070\u597d\u6709\u4e00\u6761\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\u4e8e\u662f\u6bcf\u6b21\u52a0\u8fb9\uff08\u76f8\u5f53\u4e8e\u679a\u4e3e\u4e86$a_i$\uff09\uff0c\u540c\u65f6\u5bf9$b_i$\u505a\u52a8\u6001\u52a0\u8fb9\u6700\u5c0f\u751f\u6210\u6811\uff0c\u518d\u7528$a_i$\u4e0e\u5f53\u524d\u7684$1 \\rightarrow n$\u8def\u5f84\u4e0a\u7684$\\max\\{b_i\\}$\u4e4b\u548c\u66f4\u65b0\u7b54\u6848\u3002\u663e\u7136\u5bf9\u4e8e\u6bcf\u4e2a\u7ed9\u5b9a\u7684$a_i$\uff0c$b_i$\u6ee1\u8db3\u6700\u5c0f\u751f\u6210\u6811\u6027\u8d28\u65f6\u4e00\u5b9a\u6700\u4f18\u3002\u800c\u6211\u4eec\u679a\u4e3e\u4e86$a_i$\u7684\u53d6\u503c\uff0c\u8fd9\u6837\u4e00\u5b9a\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684\u53ef\u80fd\u60c5\u51b5\u3002\n\n\n### \u7ec6\u8282\u7684\u5904\u7406\n\n\n\u4e0a\u9762\u7684\u65b9\u6cd5\u4f3c\u4e4e\u5f88\u6b63\u786e\uff0c\u4e0d\u8fc7\u597d\u50cf\u6709\u70b9\u95ee\u9898\uff1a\u52a0\u5165\u7684\u8fb9\u4e00\u5b9a\u5728$1 \\rightarrow n$\u7684\u8def\u5f84\u4e0a\u5417\uff1f\n\n\n\u7a0d\u5fae\u60f3\u60f3\u5c31\u4f1a\u53d1\u73b0\uff0c\u5c31\u7b97\u52a0\u7684\u8fb9\u548c\u8fd9\u6761\u8def\u5f84\u65e0\u5173\uff0c\u4e5f\u6ca1\u6709\u5173\u7cfb\uff1a\u7531\u4e8e\u8fd9\u65f6$a_i$\u5927\u4e8e$1 \\rightarrow n$\u7684\u8def\u5f84\u4e0a$a_i$\u6700\u5927\u503c\uff0c\u800c$1 \\rightarrow n$\u7684\u8def\u5f84\u4e0a$b_i$\u6700\u5927\u503c\u53c8\u4e0d\u53d8\uff0c\u4e8e\u662f\u5728\u8003\u8651$1 \\rightarrow n$\u7684\u8def\u5f84\u4e0a$a_i$\u6700\u5927\u503c\u65f6\uff0c\u7b54\u6848\u5df2\u7ecf\u677e\u5f1b\u8fc7\u4e86\uff0c\u6b64\u65f6\u4e0d\u80fd\u518d\u677e\u5f1b\u7b54\u6848\uff01\u5982\u679c\u5f53\u524d\u8fb9\u4e0e$1 \\rightarrow n$\u7684\u8def\u5f84\u4e0a\u67d0\u4e2a\u8fb9\u6784\u6210\u73af\uff0c\u90a3\u4e48\u8fd9\u6b21\u677e\u5f1b\u4e5f\u662f\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e0d\u540c\u7684$\\max\\{a_i\\}$\uff0c$b_i$\u53d6\u503c\u4e5f\u76f8\u5e94\u4e0d\u540c\u3002\n\n\n## \u5b9e\u73b0\n\n\n\u8003\u8651\u4e0b\u6c42\u51fa\u201c\u751f\u6210\u6811\u8def\u5f84\u8fb9\u6743\u6700\u5927\u503c\u201d\u600e\u4e48\u505a\u5230\uff1a\u7528Link-Cut Tree\u5373\u53ef\u3002\u901a\u8fc7\u4e00\u6b21$\\text{MakeRoot}$\u548c\u4e00\u6b21$\\text{Access}$\uff0c\u5c31\u53ef\u4ee5\u628a\u8def\u5f84\u5f04\u5230\u4e00\u6761$\\text{Preferred Path}$\u4e0a\u3002\u7136\u540e\u5728Splay\u91cc\u9762\u6253\u6807\u8bb0\u5c31\u597d\u4e86\u3002\u6ce8\u610f\u8fb9\u6743\u7684\u5904\u7406\uff1a\u7ed9\u6bcf\u6761\u8fb9\u5355\u72ec\u5efa\u4e00\u4e2a\u70b9\u5c31\u597d\u4e86\u3002\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 5e4, MAXM = 1e5;\n\n//----------------LCT--------------------\nstruct Node *null, *nd[MAXN+10];\nstruct Node {\n    int v, s, maxv; bool flip;\n    Node *fa, *ch[2];\n    Node() { v = maxv = 0; s = 1; flip = false; fa = ch[0] = ch[1] = null; }\n    Node(int v_) { v = maxv = v_; s = 1; flip = false; fa = ch[0] = ch[1] = null; }\n    bool splayrt() { return fa->ch[0]!=this && fa->ch[1]!=this; }\n    int rel() { return splayrt() ? -1 : (fa->ch[0]==this ? 0 : 1); }\n    void rev() { flip^=1; }\n    int cmp(int k) { return k == ch[0]->s + 1 ? -1 : (k > ch[0]->s + 1 ? 1 : 0); }\n    void pushdown() {\n        if(flip) {\n            flip^=1; ch[0]->flip^=1; ch[1]->flip^=1;\n            swap(ch[0], ch[1]);\n        }\n    }\n    void maintain() {\n        maxv = max(max(ch[0]->maxv, ch[1]->maxv), v);\n        s = ch[0]->s + ch[1]->s + 1;\n    }\n};\n\nvoid init_null() {\n    null = new Node(0); null->s = 0;\n}\n\nvoid rotate(Node* o) {\n    Node *x, *y, *k; int d, d2;\n    if(o->splayrt()) return;\n    x = o->fa; y = x->fa;\n    d = o->rel(); d2 = x->rel();\n    k = o->ch[d^1];\n    if(!x->splayrt()) y->ch[d2] = o;\n    o->fa = y;\n    o->ch[d^1] = x; x->fa = o;\n    x->ch[d] = k; k->fa = x;\n    x->maintain(); o->maintain();\n}\n\nvoid Splay(Node* o) {\n    static Node *x, *S[(MAXN<<1)+10]; int p, d, d2;\n    for(p=1, S[p] = o; !S[p]->splayrt(); p++)\n        S[p+1] = S[p]->fa;\n    for(; p; p--) S[p]->pushdown();\n    while(!o->splayrt()) {\n        x = o->fa; \n        d = o->rel(); d2 = x->rel();\n        if(!x->splayrt()) {\n            if(d == d2) rotate(x);\n            else rotate(o);\n        }\n        rotate(o);\n    }\n}\n\nNode* FindMax(Node* o) {\n    if(o->v == o->maxv) //!!\n        return o;\n    else return o->ch[0]->maxv == o->maxv ? \n        FindMax(o->ch[0]) : FindMax(o->ch[1]);\n}\n\nNode* Kth(Node* o, int k) {\n    if(o == null) return o;\n    int d = o->cmp(k);\n    if(d==-1) return o;\n    return Kth(o->ch[d], k - d*(o->ch[0]->s + 1));\n}\n\nvoid Access(Node* o) {\n    for(Node *t=null; o!=null; t=o, o=o->fa) {\n        Splay(o); o->ch[1] = t; o->maintain();\n    }\n}\n\nvoid MakeRoot(Node* o) {\n    Access(o); Splay(o); o->rev();\n}\n\nNode* GetRoot(Node* o) {\n    Access(o); Splay(o);\n    while(o->ch[0] != null) o = o->ch[0];\n    return o;\n}\n\nvoid Link(Node* u, Node* v) {\n    if(GetRoot(u) == GetRoot(v)) return;\n    MakeRoot(u); Splay(u); u->fa = v;\n}\n\nvoid Cut(Node* u, Node* v) {\n    if(GetRoot(u) != GetRoot(v)) return;\n    MakeRoot(u); Access(v); Splay(u);\n    if(u->ch[1] == v) {\n        u->ch[1] = null; v->fa = null;\n        u->maintain();\n    }\n}\n\n//-----------------------------------------\n\nstruct Edge {\n    int u, v, a, b;\n    Edge() {}\n    Edge(int u_, int v_, int a_, int b_):\n        u(u_), v(v_), a(a_), b(b_) {}\n    inline bool operator<(const Edge& rhs) const\n    { return a < rhs.a; }\n} E[MAXM+10];\nint N, M, Ans, fa[MAXN+10];\n\nint GetFather(int x) { return fa[x] == x ? x : fa[x] = GetFather(fa[x]); }\ninline void Union(int x, int y) { fa[GetFather(x)] = GetFather(y); }\n\ntemplate<typename T>\ninline void readint(T& x) {\n    T f=1, r=0; char c=getchar();\n    while(!isdigit(c)){ if(c=='-')f=-1; c=getchar(); }\n    while(isdigit(c)){ r=r*10+c-'0'; c=getchar(); }\n    x = f*r;\n}\n\nvoid Init() {\n    int u, v, a, b;\n    init_null(); \n    readint(N); readint(M);\n    for(int i=1; i<=N; i++) {\n        nd[i] = new Node(0);\n        fa[i] = i;\n    }\n    for(int i=1; i<=M; i++) {\n        readint(u); readint(v);\n        readint(a); readint(b);\n        E[i] = Edge(u, v, a, b);\n    }\n    sort(E+1, E+M+1);\n}\n\ninline void AddTreeEdge(int u, int v, int b) {\n    Node* w = new Node(b);\n    Link(nd[u], w); Link(nd[v], w);\n    if(GetFather(u) != GetFather(v)) \n        Union(u, v);\n}\n\ninline Node* GetMaxEdge(int u, int v) {\n    Node* w;\n    MakeRoot(nd[u]); Access(nd[v]); Splay(nd[u]);\n    w = FindMax(nd[u]); \n    Splay(w);\n    return w;\n}\n\ninline void CutMaxEdge(int u, int v) {\n    Node *w, *x, *y; int k;\n    w = GetMaxEdge(u, v); k = w->ch[0]->s + 1;\n    x = Kth(w, k-1); y = Kth(w, k+1);\n    if(x == null || y == null) return;\n    Cut(w, x); Cut(w, y);\n}\n\nvoid Work() {\n    int u, v, a, b; bool add = false;\n    Ans = INT_MAX;\n    for(int t=1; t<=M; t++) {\n        u = E[t].u, v = E[t].v, a = E[t].a, b = E[t].b;\n        add = false;\n        if(GetFather(u) != GetFather(v)) \n            add = true, AddTreeEdge(u, v, b);\n        else if(b < GetMaxEdge(u, v)->v) {\n            add = true;\n            CutMaxEdge(u, v);\n            AddTreeEdge(u, v, b);\n        }\n        //\u66f4\u65b0\u7b54\u6848\n        if(add && GetFather(1) == GetFather(N)) \n            Ans = min(Ans, a + GetMaxEdge(1, N)->v);\n    }\n    if(Ans < INT_MAX)\n        printf(\"%d\", Ans);\n    else puts(\"-1\");\n}\n\nint main() {\n    Init(); Work();\n    return 0;\n}\n```",
        "postTime": 1516261477,
        "uid": 23865,
        "name": "panda_2134",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\u5728XZY&XZZ\u5de8\u4f6c\u7684\u5f15\u9886\u4e0b\uff0c\u4e00\u679a\u849f\u84bb\u7ec8\u4e8e\u5543\u52a8\u4e86\u8fd9\u9053\u9898\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u8fd9\u6b21\u8fd8\u662f\u7b2c\u4e00\u6b21\u5199LCT\u7ef4\u62a4\u8fb9\u6743\uff0c\u8fd8\u8981\u5316\u8fb9\u4e3a\u70b9\uff0c\u601d\u8def\u4e71\u4e03\u516b\u7cdf\u7684\uff0c\u5199\u8d77\u6765\u4e5f\u4e0d\u987a\u624b\uff0c\u8fd8\u597d\u8c03\u4e86\u8bb8\u4e45\u7ec8\u4e8eAC\u5566\u3002\n\n\u8d2a\u5fc3\u6392\u5e8f\u6309\u4e00\u4e2a\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u8fb9\uff0c\u7ef4\u62a4\u53e6\u4e00\u4e2a\u5173\u952e\u5b57\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u6837\u7684\u601d\u8def\u771f\u662f\u592a\u5de7\u5999\u5566\u3002\uff08\u7136\u800c\u6ca1\u6709\u9898\u89e3\u7684\u6ecb\u517b\u6211\u4ec0\u4e48\u4e5f\u5e72\u4e0d\u4e86\uff09\n\n\u53ea\u662f\u5173\u4e8e\u5199\u6cd5\u4e0a\u9762\uff0c\u6211\u53c8\u6709\u4e9b\u548cDalao\u4eec\u4e0d\u4e00\u6837\u7684\u5730\u65b9\uff08\u56e0\u4e3a\u662f\u81ea\u5df1\u4e71\u5199\u7684\uff09\u3002\n\nlink\u548ccut\u597d\u50cf\u8131\u79bb\u4e86\u4f20\u7edf\u610f\u4e49\uff0c\u672c\u849f\u84bb\u7528\u4e86link(x)\u8868\u793a\u5c06\u7f16\u53f7\u4e3ax\u7684\u8fb9\u52a0\u5165\u7528LCT\u7ef4\u62a4\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0ccut(x)\u53cd\u4e4b\u3002\n\nlink\u5176\u5b9e\u662f\u8981\u8fde\u4e24\u6b21\uff0c\u56e0\u4e3a\u8981\u4e25\u683c\u6df1\u5ea6\u9012\u589e\uff08[LCT\u603b\u7ed3](http://www.cnblogs.com/flashhu/p/8324551.html)\u4e2d\u7684\u6027\u8d281\uff09\uff0c\u5c31\u8ba9\u8fb9\u7684\u4e00\u4e2a\u7aef\u70b9\u7684\u7236\u4eb2\u6307\u5411\u8fd9\u4e2a\u4ee3\u8868\u8fb9\u7684\u70b9\uff08\u8f7b\u8fb9\uff09\uff0c\u518d\u8ba9\u4ee3\u8868\u8fb9\u7684\u70b9\u7684\u7236\u4eb2\u6307\u5411\u8fb9\u7684\u53e6\u4e00\u4e2a\u7aef\u70b9\uff08\u8fd8\u662f\u8f7b\u8fb9\uff09\u3002\u5f53\u7136\u5566\uff0c\u6df1\u5ea6\u5927\u7684\u90a3\u4e2a\u70b9\u8981\u5148makeroot\uff0c\u4e0d\u7136\u4f1a\u5f71\u54cd\u6b63\u786e\u6027\u3002\n\ncut\u5c31\u662f\u65ad\u4e24\u6b21\u4e86\uff0c\u628a\u4ee3\u8868\u8fb9\u7684\u70b9\u4e0b\u9762\u90a3\u4e2a\u70b9\uff08\u6df1\u5ea6\u5927\u7684\uff09access\uff0csplay\uff08\u4ee3\u8868\u8fb9\u7684\u70b9\uff09\uff0c\u6b64\u65f6\u4e24\u4e2a\u7aef\u70b9\u4e00\u4e2a\u6df1\u5ea6\u5c0f\uff0c\u5728\u5de6\u8fb9\uff0c\u4e00\u4e2a\u6df1\u5ea6\u5927\uff0c\u5728\u53f3\u8fb9\uff0c\u5de6\u53f3\u513f\u5b50\u5168\u65ad\u6389\u5c31OK\u3002\n\u5176\u5b9e\u5e38\u89c4link\uff0ccut\u6ca1\u95ee\u9898\u554a\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u8111\u888b\u77ed\u8def\u641e\u51fa\u8fd9\u79cd\u4e0d\u6210\u719f\u7684\u5199\u6cd5\uff0c\u4e0d\u8fc7\u7a0d\u5fae\u7b97\u7b97\uff0c\u5b9e\u9645\u64cd\u4f5c\u91cf\u5c11\u4e86\u4e9b\uff0c\u6bd4\u8d77\u4e24\u904dlink\u6216cut\u5e38\u6570\u4f1a\u5c0f\u4e00\u70b9\u3002\n\n\u4e0d\u8fc7\u8bf4\u5230\u5e38\u6570\u53c8\u7559\u4e0b\u4e00\u4e2a\u8d25\u7b14\u2014\u2014\u8fd9\u4e00\u9898\u8f83\u7279\u6b8a\uff0c\u7ef4\u62a4\u8fde\u901a\u6027\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\uff0c\u907f\u514d\u4e86\u5927\u91cffindroot\uff08\u867d\u7136\u4e0d\u4f1aT\u800c\u5df2\uff09\u3002~~\u53ea\u662f\u6211\u6ca1\u6709\u5199\u3002~~findroot\u771f\u6162\u5440\uff01\u4ee5\u540e\u8fd8\u662f\u8981\u8bb0\u4f4f\u8fd9\u4e2a\u5c0f\u7ec6\u8282\u3002\n\n\u4ee3\u7801\u8fd8\u662f\u653e\u4e00\u4e0b\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\n#define R register int\n#define I inline void\n#define lc c[x][0]\n#define rc c[x][1]\n#define G ch=getchar()\n#define min2(x,y) if(x>y)x=y;\nconst int N=200000,P=131072;\n//P\u662f\u7528\u6765\u533a\u5206\u70b9\u548c\u8fb9\u7684\uff0c\u8fb9\u7684\u7f16\u53f7\u5728LCT\u4e2d\u4e0d\u53d8\uff0c\u70b9\u7684\u7f16\u53f7\u5168\u90e8\u52a0\u4e0aP(\u4e3a\u538b\u5e38\u7528\u4e86\u8fd9\u6837\u4e00\u4e2a\u6570\uff0c\u52a0\u4e0a\u4f4d\u6216\u8fd0\u7b97)\nint f[N],c[N][2],mx[N];\nbool r[N];\nI in(R&z){\n\tregister char G;\n\twhile(ch<'-')G;\n\tz=ch&15;G;\n\twhile(ch>'-')z*=10,z+=ch&15,G;\n}\nstruct EDGE{\n\tint u,v,a,b;\n\tinline bool operator<(EDGE x)const{\n\t\treturn a<x.a;\n\t}\n\tI read(){\n\t\tin(u);in(v);in(a);in(b);\n\t\tu|=P;v|=P;//\u7f16\u53f7\u53d8\u5316\n\t}\n}e[N];//\u8fb9\u653e\u8fdb\u7ed3\u6784\u4f53\ninline bool nroot(R x){\n\treturn c[f[x]][0]==x||c[f[x]][1]==x;\n}\nI pushup(R x){\n\tmx[x]=x;\n\tif(e[mx[x]].b<e[mx[lc]].b)mx[x]=mx[lc];\n\tif(e[mx[x]].b<e[mx[rc]].b)mx[x]=mx[rc];//\u4e09\u79cd\u60c5\u51b5\u90fd\u8981\u770b\n}\nI pushdown(R x){\n\tif(r[x]){\n\t\tR t=lc;lc=rc;rc=t;\n\t\tr[lc]^=1;r[rc]^=1;r[x]=0;\n\t}\n}\nI pushall(R x){//\u61d2\u5f97\u624b\u5199\u6808\uff0c\u76f4\u63a5\u7528\u51fd\u6570\u5806\u6808\uff08\u9003\n\tif(nroot(x))pushall(f[x]);\n\tpushdown(x);\n}\nI rotate(R x){\n\tR y=f[x],z=f[y],k=c[y][1]==x,w=c[x][!k];\n\tif(nroot(y))c[z][c[z][1]==y]=x;c[x][!k]=y;c[y][k]=w;\n\tf[w]=y;f[y]=x;f[x]=z;\n\tpushup(y);\n}\nI splay(R x){\n\tR y=x;\n\tpushall(x);\n\twhile(nroot(x)){\n\t\tif(nroot(y=f[x]))\n\t\t\trotate((c[y][0]==x)^(c[f[y]][0]==y)?x:y);\n\t\trotate(x);\n\t}\n\tpushup(x);\n}\nI access(R x){\n\tfor(R y=0;x;x=f[y=x])\n\t\tsplay(x),rc=y,pushup(x);\n}\nI mroot(R x){\n\taccess(x);splay(x);\n\tr[x]^=1;\n}\ninline int froot(R x){\n\taccess(x);splay(x);\n\twhile(lc)x=lc;\n\treturn x;\n}\nI link(R x){\n\tR y=e[x].u,z=e[x].v;\n\tmroot(z);\n\tf[f[z]=x]=y;\n}//\u975e\u6b63\u5e38link\u4e0ecut\nI cut(R x){\n\taccess(e[x].v);splay(x);\n\tlc=rc=f[lc]=f[rc]=0;\n\tpushup(x);\n}\nint main(){\n\tR n,m,i,y,z,ans=999999;//ans\u7ed9\u6781\u5927\u503c\n\tin(n);in(m);\n\tfor(i=1;i<=m;++i)e[i].read();\n\tsort(e+1,e+m+1);\n\tfor(i=1;i<=m;++i)\n\t{\n\t\tif((y=e[i].u)==(z=e[i].v))continue;\n\t\tmroot(y);\n\t\tif(y!=froot(z))link(i);//\u4e0d\u8054\u901a\uff0c\u76f4\u63a5\u8fde\n\t\telse if(e[i].b<e[mx[z]].b)cut(mx[z]),link(i);//\u8054\u901a\uff0c\u4f46\u6709\u66f4\u5c0f\u7684\u8fb9\u66ff\u6362\n\t\tmroot(1|P);\n\t\tif((1|P)==froot(n|P))min2(ans,e[i].a+e[mx[n|P]].b);//1\u4e0en\u8054\u901a\u5c31\u66f4\u65b0\u7b54\u6848\n\t}\n\tprintf(\"%d\\n\",ans==999999?-1:ans);\n\treturn 0;\n}\n```",
        "postTime": 1519302760,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\u5982\u679c\u6211\u544a\u8bc9\u4f60\u4eec\uff0c\u8fd9\u4e2a\u9898\u4e0d\u9700\u8981\u7528LCT\u4e5f\u80fd\u8fc7\u4f60\u4eec\u4fe1\u5417\uff1f\n\n\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u6570\u636e\u6c34\uff0c\u8fd8\u662f\u6211\u4eba\u54c1\u597d\n\n\u53cd\u6b63\u5462\uff0c\u6211\u7528\u4e00\u79cd\u9519\u8bef\u7684\u7b97\u6cd5\uff0c\u8fc7\u6389\u4e86\u8fd9\u4e2a\u9898\n\n\u7531\u4e8e\u89c9\u5f97\u6bd4\u8f83\u6709\u7eaa\u5ff5\u610f\u4e49\uff0c\u6240\u4ee5\u8fd8\u662f\u51b3\u5b9a\u5199\u51fa\u6765\n\n\u7b97\u662f\u4e00\u79cd\u9a97\u5206\u7684\u5c0f\u6280\u5de7\n~~\uff08\u987a\u5e26\u63d0\u9192\u7ba1\u7406\u5458\u6539\u6f0f\u6d1e\uff09~~\n\n\u4e0b\u9762\u8fdb\u5165\u6b63\u9898\uff1a\n\n\u672c\u9898\u8981\u6c42\u662f\u8fd9\u6837\u7684\uff1a\u6c42\u51fa\u6240\u9700\u7684A\u79cd\u7cbe\u7075\u548cB\u79cd\u7cbe\u7075\u6570\u91cf\u548c\u7684\u6700\u5c0f\u503c\n\n\u5982\u679c\u5c06\u8fd9\u4e2a\u9898\u76ee\u6539\u4e00\u4e0b\uff0c\u5c06\u602a\u7269\u548c\u7cbe\u7075\u90fd\u6539\u5f97\u53ea\u5269A\u79cd\uff0c\u90a3\u4e48\u5f88\u663e\u7136\uff0c\u8fd9\u9898\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\u6765\u505a\n~~\uff08\u4f46\u663e\u7136\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\uff09~~\n\n\u65e2\u7136\uff0c\u4e00\u9879\u6570\u636e\u53ef\u4ee5\u8fd9\u4e48\u505a\uff0c\u90a3\u4e48\u4e24\u9879\u5462\uff1f\u591a\u5957\u4e00\u4e2a\u4e8c\u5206\u90e8\u5c31\u662f\u7684\u4e86\uff0c\u53cd\u6b63O\uff08n log\u00b2n\uff09\u4e5f\u80fd\u8fc7\u4e0d\u662f\u5417\uff1f\n\uff08\u770b\u5230\u8fd9\u91cc\uff0c\u8bf7\u5927\u4f6c\u522b\u55b7\uff0c\u672c\u849f\u84bb\u5f53\u65f6\u8fd8\u771f\u5c31\u662f\u8fd9\u4e48\u60f3\u7684\uff09\n\n\u7136\u540e\uff0c\u6211\u5c31\u8fd9\u8fd9\u4e48\u5e72\u4e86\uff1f\n\n\u6211\u5199\u7684\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100005\n#define int long long\nstruct node{\n    int l,r,a,b;\n}t[maxn];\nint n,m,maxa,maxb,ans = 99999999;\nint f[maxn];\nint find(int k){\n    if(f[k] != k) f[k] = find(f[k]);\n    return f[k];\n}\nbool check(int x,int y){\n    for(int i = 1; i <= n; i++) f[i] = i;\n    for(int i = 1; i <= m; i++){\n        if(x >= t[i].a && y >= t[i].b){\n            f[find(t[i].l)] = f[find(t[i].r)];\n        }\n    }\n    if(f[find(1)] == f[find(n)]){\n        ans = min(ans,x + y);\n        return 1;\n    }\n    else return 0;\n}\nbool find_a(int k){\n    int l = 0,r = maxa + 1,mid;\n    while(l + 5 <= r){\n        mid = (l + r) >> 1;\n        bool p = check(mid,k);\n        if(p) r = mid;\n        else l = mid;\n    }\n    for(int i = l; i <= r; i++){\n        if(check(i,k)) return 1;\n    }\n    return 0;\n}\nvoid find_b(){\n    int l = 0,r = maxb + 1,mid;\n    while(l + 5 <= r){\n        mid = (l + r) >> 1;\n        bool p = find_a(mid);\n        if(p) r = mid;\n        else l = mid;\n    }\n    for(int i = l; i <= r; i++) find_a(i);\n}\nsigned main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i = 1; i <= m; i++){\n        scanf(\"%lld%lld%lld%lld\",&t[i].l,&t[i].r,&t[i].a,&t[i].b);\n        maxa = max(t[i].a,maxa);\n        maxb = max(t[i].b,maxb);\n    }\n    find_b();\n    if(ans == 99999999) printf(\"-1\");\n    else printf(\"%lld\",ans);\n}\n}\n```\n\u5148\u679a\u4e3e b \u7684\u503c\uff0c\u518d\u5728\u5df2\u77e5 b \u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u5c3d\u53ef\u80fd\u7684\u8ba9 a \u503c\u5c0f\n\n\u4e0d\u8fc7\u5f88\u663e\u7136\u8fd9\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u5728\u8fd9\u6837\u679a\u4e3e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5176\u5b9e b \u503c\u4e0d\u4e00\u5b9a\u662f\u5408\u6cd5\u60c5\u51b5\u4e0b\u7684\u6700\u5c0f\u503c\uff0c\u7a0d\u7a0d\u5927\u4e00\u70b9\u7684\u8bdd\uff0c\u53ef\u80fd\u8ba9\u539f\u6765\u8fc7\u4e0d\u4e86\u7684\u8fb9\u8fc7\u6389\uff0c\u800c\u8fd9\u6761\u8fb9\u6240\u9700\u7684 a \u503c\u8f83\u5c0f\n\uff08\u8fd9\u91cc\u53ef\u80fd\u4e0d\u592a\u597d\u7406\u89e3\uff0c\u4f46\u603b\u4e4b\u8fd9\u79cd\u7b97\u6cd5\u662f\u9519\u7684\uff09\n\n\u867d\u8bf4\u662f\u9519\u7684\uff0c\u4f46\u4f7f\u7528\u8fd9\u6837\u4e00\u4efd\u4ee3\u7801\u4e5f\u53ef\u4ee5\u62ff\u523080\u5206\n\n\u7136\u540e\u518d\u8f6c\u5ff5\u4e00\u60f3\uff0c\u8fd9\u6837\u7684\u8bef\u5dee\u662f\u5f88\u5c0f\u7684\n\n\u5982\u679c\u6211\u4eec\u5728\u6c42\u51fa\u7ed3\u679c\u540e\uff0c\u5c06\u201c\u6700\u4f73\u201d\u7684 b \u503c\uff0c\u5728\u4fdd\u8bc1\u4e0d\u8d85\u65f6\u7684\u60c5\u51b5\u4e0b\uff0c\u518d\u5f80\u5927\u4e86\u679a\u4e3e\u4e00\u70b9\u70b9\u7684\u8bdd\uff0c\u5c31\u6709\u53ef\u80fd\u627e\u51fa\u771f\u6b63\u7684\u6700\u4f73\u7b54\u6848\n\n\u7136\u540e\u6211\u5c31\u8fd9\u4e48\u5e72\u4e86\uff0c\u7b97\u4e86\u4e00\u4e0b\uff0c\u518d\u7b97\u51fa\u7ed3\u679c\u540e\uff0c\u5927\u6982\u8fd8\u80fd\u628a b \u518d\u5f80\u540e\u679a\u4e3e 20 \uff08\u4e5f\u53ef\u80fd\u66f4\u591a\u5427\uff0c\u6781\u9650\u662f\u591a\u5c11\u6ca1\u8bd5\u8fc7\uff0c\u53cd\u6b63 20 \u5c31\u80fd\u8fc7\uff09\n\n\u7136\u540e\uff0c\u5c45\u7136\u5c31AC\u4e86\n\n\u66f4\u6539\u540e\u7684\u4ee3\u7801\u662f\u8fd9\u6837\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100005\nstruct node{\n    int l,r,a,b;\n}t[maxn];\nint n,m,maxa,maxb,ans = 99999999;\nint f[maxn];\nint read(){\n    int x = 0,f = 1;\n    char s;\n    s = getchar();\n    while(s < '0' || s > '9'){\n        if(s == '-') f = -1;\n        s = getchar();\n    }\n    while('0' <= s && s <= '9'){\n        x = (x << 1) + (x << 3) + s - '0';\n        s = getchar();\n    }\n    return x * f;\n}\nint find(int k){\n    if(f[k] != k) f[k] = find(f[k]);\n    return f[k];\n}\nbool check(int x,int y){\n    for(int i = 1; i <= n; i++) f[i] = i;\n    for(int i = 1; i <= m; i++){\n        if(x >= t[i].a && y >= t[i].b){\n            f[find(t[i].l)] = f[find(t[i].r)];\n        }\n    }\n    if(f[find(1)] == f[find(n)]){\n        ans = min(ans,x + y);\n        return 1;\n    }\n    else return 0;\n}\nbool find_a(int k){\n    int l = 0,r = maxa << 1,mid;\n    while(l + 5 <= r){\n        mid = (l + r) >> 1;\n        bool p = check(mid,k);\n        if(p) r = mid;\n        else l = mid;\n    }\n    for(int i = l; i <= r; i++){\n        if(check(i,k)) return 1;\n    }\n    return 0;\n}\nvoid find_b(){\n    int l = 0,r = maxb << 1,mid;\n    while(l + 5 <= r){\n        mid = (l + r) >> 1;\n        bool p = find_a(mid);\n        if(p) r = mid;\n        else l = mid;\n    }\n    for(int i = l; i <= r + 20; i++) find_a(i);\n}\nsigned main(){\n    //freopen(\"a.in\",\"r\",stdin);\n    //freopen(\"a.out\",\"w\",stdout);\n    n = read();\n    m = read();\n    // printf(\"%d %d\",n,m);\n    for(int i = 1; i <= m; i++){\n        t[i].l = read();\n        t[i].r = read();\n        t[i].a = read();\n        t[i].b = read();\n        maxa = max(t[i].a,maxa);\n        maxb = max(t[i].b,maxb);\n    }\n    find_b();\n    if(ans == 99999999) printf(\"-1\");\n    else printf(\"%d\",ans);\n}\n```\n\n\u867d\u7136\u6211\u4e5f\u6ca1\u6307\u671b\u80fd\u8fc7\u5ba1\u6838\uff0c\u4f46\u8fd8\u662f\u8bf4\u4e00\u53e5\u5427\uff1a\n\n\u8fd9\u79cd\u65b9\u6cd5\u5e76\u975e\u6b63\u89e3\uff0c\u751a\u81f3\u53ef\u4ee5\u8bf4\u662f\u6b6a\u95e8\u90aa\u9053\uff1b\u8054\u8d5b\u65f6\uff0c\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6765\u8ffd\u6c42\u9ad8\u5206\uff1b\u4f46\u5e73\u65f6\u7ec3\u4e60\u65f6\uff0c\u8fd8\u662f\u4e0d\u5efa\u8bae\u4f7f\u7528\u8fd9\u7c7b\u65b9\u6cd5\uff1b\u4ee5\u672c\u9898\u4e3a\u4f8b\uff0c\u60f3\u8981\u771f\u6b63\u7684\u63d0\u5347\u8fd8\u662f\u5f97\u53bb\u5b66\u4e60LCT\u7b97\u6cd5",
        "postTime": 1599196950,
        "uid": 78390,
        "name": "\u6ca7\u6d77\u6620\u7e41\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "LCT\u7ec3\u624b\u597d\u9898\u554a\u3002\n\nSPFA\u7684\u505a\u2642FA\u662f\u628a\u8fb9\u6309\u7167a\u6392\u5e8f\uff0c\u7136\u540e\u52a0\u4e00\u6761\u6743\u503c\u4e3ab\u7684\u8fb9\u8dd1SPFA\uff0c\u4e0d\u65ad\u66f4\u65b0\u7b54\u6848\u3002\u5f88\u597d\u7684\u505a\u2642FA\uff0c\u4f46\u590d\u6742\u5ea6\u65e0\u2642FA\u4fdd\u8bc1\u3002\n\nLCT\u7684\u505a\u2642FA\u7c7b\u4f3c\uff0c\u4e5f\u662f\u628a\u8fb9\u6309\u7167a\u6392\u5e8f\uff0c\u7136\u540e\u4e5f\u662f\u52a0\u4e00\u6761\u6743\u503c\u4e3ab\u7684\u8fb9\uff0c\u52a8\u6001\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u7136\u540e\u8d4b\u8fb9\u6743\u7684\u65b9\u2642FA\u662f\u65b0\u5efa\u4e00\u4e2a\u70b9\u8868\u793a\u8fb9\uff0c\u539f\u6765\u70b9\u7684\u6743\u503c\u4e3a0\uff0c\u8fb9\u7684\u6743\u503c\u8fd8\u662f\u8fb9\u7684\u6743\u503c\uff0c\u5269\u4e0b\u7684\u90fd\u4e00\u6837\u8fa3\u3002\n\n```cpp\n// It is made by XZZ\n#include<cstdio>\n#include<algorithm>\n#define il inline\n#define rg register\n#define vd void\n#define sta static\ntypedef int mainint;\n#define int long long\nil int gi(){\n    rg int x=0,f=1;rg char ch=getchar();\n    while(ch<'0'||ch>'9')f=ch=='-'?-1:f,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nconst int maxn=100001,maxm=100001;\nnamespace LCT{\n    int ch[maxn][2],fa[maxn],w[maxn],mx[maxn],A[maxn],B[maxn];bool rev[maxn];\n    int index;\n    il vd down(const int&x){if(rev[x])std::swap(ch[x][0],ch[x][1]),rev[ch[x][0]]^=1,rev[ch[x][1]]^=1,rev[x]=0;}\n    il vd upd(const int&x){\n        mx[x]=x;\n        if(w[mx[x]]<w[mx[ch[x][0]]])mx[x]=mx[ch[x][0]];\n        if(w[mx[x]]<w[mx[ch[x][1]]])mx[x]=mx[ch[x][1]];\n    }\n    il bool isrt(const int&x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\n    il vd rotate(const int&x){\n        sta int y,z,o;y=fa[x],z=fa[y],o=x==ch[y][1];\n        if(!isrt(y))ch[z][y==ch[z][1]]=x;fa[x]=z;\n        ch[y][o]=ch[x][!o];fa[ch[x][!o]]=y;\n        fa[y]=x;ch[x][!o]=y;\n        upd(y);\n    }\n    il vd splay(const int&x){\n        sta int stk[maxn],top;stk[top=1]=x;\n        for(rg int i=x;!isrt(i);i=fa[i])stk[++top]=fa[i];\n        while(top)down(stk[top--]);\n        for(rg int y=fa[x],z=fa[y];!isrt(x);rotate(x),y=fa[x],z=fa[y])\n            if(!isrt(y))rotate(((x==ch[y][1])==(y==ch[z][1]))?y:x);\n        upd(x);\n    }\n    il vd access(int x){for(rg int y=0;x;x=fa[y=x])splay(x),ch[x][1]=y,upd(x);}\n    il vd makert(const int&x){access(x),splay(x);rev[x]^=1;}\n    il int find(int x){access(x),splay(x);while(ch[x][0])x=ch[x][0];return x;}\n    il vd split(const int&x,const int&y){makert(x);access(y),splay(y);}\n    il vd _link(const int&x,const int&y){makert(x),fa[x]=y;}\n    il vd cut(const int&x,const int&y){split(x,y);fa[x]=ch[y][0]=0;}\n    il vd link(const int&x,const int&y,const int&k){\n        if(find(x)^find(y)){w[++index]=k,_link(A[index]=x,index),_link(B[index]=y,index);return;}\n        split(x,y);\n        sta int s;s=mx[y];\n        if(w[s]<=k)return;\n        cut(s,A[s]),cut(s,B[s]);\n        w[s]=k,_link(A[s]=x,s),_link(B[s]=y,s);\n    }\n    il int query(int x,int y){\n        if(find(x)^find(y))return 1e18;\n        split(x,y);return w[mx[y]];\n    }\n}\nstruct edge{int x,y,a,b;}E[maxm];\nbool operator <(const edge&a,const edge&b){return a.a<b.a;}\nmainint main(){\n    freopen(\"magicalforest.in\",\"r\",stdin);\n    freopen(\"magicalforest.out\",\"w\",stdout);\n    int n=gi(),m=gi();\n    for(rg int i=1;i<=m;++i)E[i].x=gi(),E[i].y=gi(),E[i].a=gi(),E[i].b=gi();\n    std::sort(E+1,E+m+1);\n    int ans=1e18;\n    LCT::index=n;\n    for(rg int i=1;i<=m;++i)LCT::link(E[i].x,E[i].y,E[i].b),ans=std::min(ans,E[i].a+LCT::query(1,n));\n    if(ans==1e18)ans=-1;printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1514207980,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\u505a\u7684\u65f6\u5019\u88ab\u90a3\u4e2a 5e4 \u6574\u6655\u4e86\u3002\n\n\u6240\u4ee5\u76f4\u63a5\u5c31\u7528\u5206\u5757\u505a\u8fd9\u4e2a\u9898\u4e86\u3002\n\n\u9898\u76ee\u8981\u6c42\u4ece $s$ \u5230 $t$ \u627e\u5230\u4e00\u6761\u8def\u5f84 $S$\uff0c\u4f7f\u5f97 $\\max_{i\\in S}a_i+\\max_{i\\in S}b_i$ \u6700\u5c0f\u3002\n\n\u8003\u8651\u679a\u4e3e\u6700\u5c0f\u7684 $a_i$\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e2a\u65f6\u5019\u6700\u5c0f\u7684 $b_i$ \u968f $a_i$ \u7684\u589e\u5927\u5355\u8c03\u4e0d\u589e\uff0c\u6240\u4ee5\u662f\u53ef\u4ee5\u53cc\u6307\u9488\u7684\u3002\n\n\u8003\u8651\u4f7f\u7528\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u5f53\u524d\u7b54\u6848\u7684\u5408\u6cd5\u6027\uff0c\u65e2\u8003\u8651\u5c06\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u8fde\u5b8c\u540e $s$ \u548c $t$ \u662f\u5426\u8fde\u901a\uff0c\u4e0d\u96be\u60f3\u5230\u7528\u5206\u5757\u4f18\u5316\u590d\u6742\u5ea6\u3002\n\n\u5373\u6bcf\u6b21\u5c06\u96f6\u6563\u5757\u90e8\u5206\u66b4\u529b\u63d2\u5165\u5e76\u67e5\u96c6\u518d\u64a4\u9500\u3002\n\n\u590d\u6742\u5ea6\u4e3a $O(m\\sqrt{n\\log_2n})$\u3002\n\n\u5b9e\u9645\u4e0a\u7531\u4e8e\u6570\u636e\u8f83\u6c34\u6240\u4ee5\u8dd1\u5f97\u5f88\u5feb\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define rg register\n//#define int long long\nil int read()\n{\n   int re=0,k=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')k=-1;ch=getchar();}\n    while(ch<='9'&&ch>='0'){re=re*10+ch-48;ch=getchar();}\n    return re*k;\n}\nil void write(int x)\n{\n    if(x<0)return putchar('-'),write(-x),void();\n    if(x<10)return putchar(x+'0'),void();\n    return write(x/10),putchar(x%10+'0'),void();\n}\nconst int B=800;\nint n,m,ans;\nstruct ss{\n\tint u,v,a,b;\n\tbool operator <(const ss ot)const{\n\t\treturn a<ot.a;\n\t}\n}e[10000005];\nstruct st{\n\tint u,v,b;\n\tbool operator <(const st ot)const{\n\t\treturn b<ot.b;\n\t}\n}now[10000005];\nint fa[10000005],sz[10000005],s[10000005],ls,lnow,las;\nbool vis[10000005];\nvoid merge(int u,int v)\n{\n\tif(u==v)return;\n\tif(sz[u]>sz[v])swap(u,v);\n\tfa[u]=v;\n\tsz[v]+=sz[u];\n\ts[++ls]=u;\n}\nint find(int x)\n{\n\tif(x==fa[x])return x;\n\treturn find(fa[x]);\n}\nvoid redo()\n{\n\tsz[fa[s[ls]]]-=sz[s[ls]];\n\tfa[s[ls]]=s[ls];\n\tls--;\n}\nbool pd(int x)\n{\n\tredo();\n\tlnow--;\n\tint t=ls;\n\tfor(rg int i=las;i<=x;i++)\n\t{\n\t\tif(e[i].b>now[lnow].b)continue;\n\t\tmerge(find(e[i].u),find(e[i].v));\n\t}\n\tif(find(n)==find(1)){while(ls>t)redo();return 1;}\n\twhile(ls>t)redo();\n\tlnow++;\n\tmerge(find(now[lnow].u),find(now[lnow].v));\n\treturn 0;\n}\nvoid init()\n{\n\tfor(rg int i=1;i<=n;i++)\n\t\tfa[i]=i,sz[i]=1;\n}\nvoid build()\n{\n\tinit();\n\tfor(rg int i=1;i<=lnow;i++)\n\t{\n\t\tif(find(now[i].u)!=find(now[i].v))vis[i]=1;\n\t\telse vis[i]=0;\n\t\tmerge(find(now[i].u),find(now[i].v));\n\t}\n}\nsigned main()\n{\n\tn=read();m=read();\n\tfor(rg int i=1;i<=m;i++)\n\t{\n\t\te[i].u=read();e[i].v=read();\n\t\te[i].a=read();e[i].b=read();\n\t}\n\tsort(e+1,e+m+1);\n\tinit();\n\tans=0x3f3f3f3f;\n\tint st=1;\n\tinit();\n\twhile(find(1)!=find(n)&&st<=m)\n\t{\n\t\tnow[++lnow].u=e[st].u;\n\t\tnow[lnow].v=e[st].v;\n\t\tnow[lnow].b=e[st].b;\n\t\tmerge(find(e[st].u),find(e[st].v));\n\t\tst++;\n\t}\n\tsort(now+1,now+lnow+1);\n\tbuild();\n\tlas=st;\n\tdo\n\t{\n\t\twhile(!vis[lnow]&&lnow)\n\t\t\tlnow--;\n\t}\n\twhile(pd(st-1));\n\tif(find(1)==find(n))\n\t{\n\t\tans=e[st-1].a+now[lnow].b;\n\t}\n\tfor(rg int i=st;i<=m&&lnow>0;i++)\n\t{\n\t\tdo\n\t\t{\n\t\t\twhile(!vis[lnow]&&lnow)\n\t\t\t\tlnow--;\n\t\t}\n\t\twhile(pd(i));\n\t\tif(lnow>0)\n\t\t\tans=min(ans,e[i].a+now[lnow].b);\n\t\tif(i-las+1==B)\n\t\t{\n\t\t\tint t=lnow;\n\t\t\tfor(rg int j=las;j<=i;j++)\n\t\t\t{\n\t\t\t\tif(e[j].b>now[t].b)continue;\n\t\t\t\tnow[++lnow].u=e[j].u;\n\t\t\t\tnow[lnow].v=e[j].v;\n\t\t\t\tnow[lnow].b=e[j].b;\n\t\t\t}\n\t\t\tlas=i+1;\n\t\t\tsort(now+1,now+lnow+1);\n\t\t\tbuild();\n\t\t}\n\t}\n\tif(ans==0x3f3f3f3f)\n\t\tans=-1;\n\twrite(ans);\n}\n```",
        "postTime": 1609073673,
        "uid": 55201,
        "name": "clamee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014] \u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u4e2alct\u505a\u6cd5\u7b2c\u4e8c\u4e2aspfa\u505a\u6cd5 \n\n\n------------\n\n\u8fd9\u4e2a\u57fa\u672c\u7b97\u662flct\u88f8\u9898\n\n\u4f46\u4e5f\u5b66\u5230\u4e86\u4e00\u70b9\u5957\u8def\n\n\u5982\u679c\u8981\u7ef4\u62a4\u8fb9\u6743\u7684\u8bdd\u5c31\u5c06\u8fb9\u770b\u505a\u4e00\u4e2a\u70b9\u7136\u540e\u8fde\u63a5\u76f8\u5e94\u7684\u4e24\u4e2a\u70b9\n\n\u81f3\u4e8e\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7\uff1f\u548c\u8f93\u5165\u7684\u7f16\u53f7\u5bf9\u5e94\u8d77\u6765\u5c31\u597d\u4e86\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u627e\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u8fb9\u7684\u4fe1\u606f\n\n\u8fd9\u4e2a\u9898\u53ea\u9700\u8981\u6bcf\u6b21\u5c06a\u76f8\u540c\u7684\u8fb9\u7684b\u6743\u503c\u52a0\u5165\u6811\u4e2d\uff0c\u5f53\u524d\u7684\u7b54\u6848\u5c31\u662fa[i]+min(1~n\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c)\n\n\u82e5\u8fde\u8fb9\u8fde\u51fa\u73af\u4e86\u600e\u4e48\u529e\uff1f\u5148\u5c06\u70b9x\u548cy\u4e2d\u6700\u957f\u7684\u8fb9cut\u6389\u518d\u52a0\u5165\u5c31\u597d\u4e86 \n\n\n------------\n\nsmg\u554a\u2026\u2026\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u4e8c\u5206a\u548cb\u2026\u2026\n\n\u540e\u6765\u53c8\u53e3\u80e1\u4e86\u4e00\u79cd\u7b97\u6cd5\u53ea\u670915\u5206\u2026\u2026 \n\n\u6700\u540e\u53d1\u73b0\u6211\u8fd8\u662ftoo young too simple\n\n\u7b2c\u4e00\u6b21\u542c\u8bf4\u5230SPFA\u52a8\u6001\u52a0\u8fb9\uff08\u70b9\uff09\u8fd9\u79cd\u64cd\u4f5corz\n\n\u56e0\u4e3a\u8fb9\u6743\u6709\u4e24\u4e2a\uff0c\u6c42\u8d77\u6765\u662f\u5341\u5206\u9ebb\u70e6\u7684\n\n\u800c\u6b63\u89e3\u597d\u50cf\u662fLCT\uff0c\u7136\u800c\u53ef\u80fd\u5f88\u591a\u4eba\u5e76\u4e0d\u4f1a\n\n\u6240\u4ee5\u90a3\u6211\u4eec\u5c31\u628a\u8fb9a\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u8fb9\u6309a\u4ece\u5c0f\u5230\u5927\u52a0\u5165\uff0c\u518d\u6309b\u4e3a\u6743\u503c\u8dd1SPFA\n\n\u6bcf\u6b21\u52a0\u4e00\u6761\u8fb9\u7684\u65f6\u5019\uff0c\u5c06\u8fb9\u4e24\u8fb9\u7684\u7aef\u70b9\u5165\u961f\u518dSPFA\u3002\n\n\u800c\u4e14\u56e0\u4e3a\u8fb9\u662f\u6309a\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u7684\uff0c\u6240\u4ee5\u540e\u9762dis\u60c5\u51b5\u4f1a\u5305\u542b\u524d\u9762\u7684\u60c5\u51b5\uff0cdis\u6570\u7ec4\u5c31\u4e0d\u7528\u6bcf\u6b21memset\u6bcf\u6b21\u91cd\u65b0\u6c42\u4e86 \n\n[\u4ee3\u7801](http://www.cnblogs.com/refun/p/8682241.html)",
        "postTime": 1522710233,
        "uid": 41890,
        "name": "Refun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u5176\u5b9e\u4e0d\u597d\u60f3\u5230\u7528LCT\u6765\u5199\uff0c\u4e00\u5f00\u59cb\u4e00\u76f4\u5728\u60f3\u662f\u4e0d\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u4f46\u662f\u600e\u4e48\u90fd\u68c0\u9a8c\u4e0d\u4e86\u3002\n\n\u6536\u5230\u9ad8\u4eba\u6307\u70b9\uff0c\u7531\u4e8e 1 \u5230 n \u7684\u6240\u6709\u8def\u5f84\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u6700\u4f18\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528 LCT \u52a8\u6001\u7ef4\u62a4\u8fd9\u4e00\u6761\u6700\u4f18\u8def\u5f84\uff0c\u5c06\u8fb9\u6309\u7167 a \u4f5c\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\uff0c\u8fd9\u6837 $max(a_i)$ \u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u7136\u540e\u7528 LCT \u7ef4\u62a4\u8def\u5f84\u4e0a\u7684 $max(b_i)$ \u3002\u5bf9\u4e8e\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9\u5982\u679c\u4e0d\u8fde\u901a\u5c31\u76f4\u63a5\u8fde\u4e0a\uff0c\u4e0d\u7136\u5c31\u662f\u770b\u770b\u66ff\u6362\u6389\u5f53\u524d\u8fd9\u4e24\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\u6700\u5927\u7684\u90a3\u4e00\u6761\u4f1a\u4e0d\u4f1a\u6709\u66f4\u4f18\u7684\u7b54\u6848\u3002\n\n\u7531\u4e8e\u8fb9\u4e0d\u597d\u5904\u7406\uff0c\u6240\u4ee5\u628a\u8fb9\u8f6c\u6210\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e00\u8d77\u653e\u8fdb LCT \u7ef4\u62a4\u4e86\u3002\u6709\u4e00\u4e2a\u7ec6\u8282\uff1aLCT \u5728\u4f20\u9012\u4fe1\u606f\u7684\u65f6\u5019\u4f20\u9012\u6700\u5927\u7684 $b_i$ \u6240\u5728\u8fb9\u7684\u7f16\u53f7\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u662f\u54ea\u4e00\u6761\uff0c\u4e0d\u7528\u518d\u626b\u8fc7\u53bb\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long lint;\n\nconst int MAXN = 200005;\n\ninline int read() {\n\tint x = 0, f = 0; char c = getchar();\n\tfor (; c < '0' || c > '9'; c = getchar()) if (c == '-') f = 1;\n\tfor (; c >= '0' && c <= '9'; c = getchar()) x = (x << 3) + (x << 1) + (c ^ 48);\n\treturn f ? -x : x;\n}\n\nint n, m, ans;\nstruct Edge {\n\tint u, v, a, b;\n\tbool operator < (const Edge& x) {\n\t\treturn a < x.a;\n\t}\n} e[MAXN];\n\nint fath[MAXN];\n\nint findf(int x) {\n\treturn fath[x] == x ? x : fath[x] = findf(fath[x]);\n}\n\nint top;\nint val[MAXN]; // \u8fb9\u6743\uff0c\u4ee5 sort \u4e4b\u540e\u7684 i + n \u4e3a\u51c6\nint fa[MAXN];\nint ch[MAXN][2];\nint maxi[MAXN];\nint tag[MAXN];\n\nint sta[MAXN];\n\nint id(int u) {\n\treturn ch[fa[u]][1] == u;\n}\n\nint isroot(int u) {\n\treturn ch[fa[u]][0] != u && ch[fa[u]][1] != u;\n}\n\nvoid update(int u) {\n\tmaxi[u] = u;\n\tif (val[maxi[u]] < val[maxi[ch[u][0]]])\n\t\tmaxi[u] = maxi[ch[u][0]];\n\tif (val[maxi[u]] < val[maxi[ch[u][1]]])\n\t\tmaxi[u] = maxi[ch[u][1]];\n}\n\nvoid fall(int u) {\n\tif (!tag[u]) return ;\n\tswap(ch[u][0], ch[u][1]);\n\ttag[u] ^= 1;\n\ttag[ch[u][0]] ^= 1;\n\ttag[ch[u][1]] ^= 1;\n}\n\nvoid rotate(int u) {\n\tint v = fa[u], w = fa[v], s = id(u);\n\tif (!isroot(v))\n\t\tch[w][id(v)] = u;\n\tfa[u] = w;\n\tch[v][s] = ch[u][s ^ 1];\n\tfa[ch[u][s ^ 1]] = v;\n\tch[u][s ^ 1] = v;\n\tfa[v] = u;\n\tupdate(v);\n\tupdate(u);\n}\n\nvoid splay(int u) {\n\tsta[top = 1] = u;\n\tfor (int i = u; !isroot(i); i = fa[i])\n\t\tsta[++top] = fa[i];\n\twhile (top) \n\t\tfall(sta[top--]);\n\tfor (int v; !isroot(u); rotate(u))\n\t\tif (!isroot(v = fa[u])) \n\t\t\trotate(id(u) ^ id(v) ? u : v);\n}\n\nvoid access(int u) {\n\tfor (int t = 0; u; t = u, u = fa[u]) {\n\t\tsplay(u);\n\t\tch[u][1] = t;\n\t\tupdate(u);\n\t}\n}\n\nvoid evert(int u) {\n\taccess(u);\n\tsplay(u);\n\ttag[u] ^= 1;\n}\n\nint find(int u) {\n\taccess(u);\n\tsplay(u);\n\twhile (ch[u][0])\n\t\tu = ch[u][0];\n\tsplay(u);\n\treturn u;\n}\n\nvoid link(int u, int v) {\n\tevert(u);\n\tfa[u] = v;\n}\n\nvoid cut(int u, int v) {\n\tevert(u);\n\tif (find(v) != u || fa[v] != u || ch[v][0])\n\t\treturn ;\n\tch[u][1] = fa[v] = 0;\n\tupdate(u);\n}\n\nint query(int u, int v) {\n\tevert(u);\n\taccess(v);\n\tsplay(v);\n\treturn maxi[v];\n}\n\nvoid split(int u, int v) {\n\tevert(u); access(v); \n}\n\n\nint main() {\n\tans = 0x7fffffff;\n\tn = read(); m = read();\n\tfor (int i = 1; i <= n + m; ++i) fath[i] = i;\n\tfor (int i = 1; i <= m; ++i) {\n\t\te[i].u = read(); e[i].v = read();\n\t\te[i].a = read(); e[i].b = read();\n\t}\n\tsort(e + 1, e + 1 + m);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tint fu = findf(e[i].u);\n\t\tint fv = findf(e[i].v);\n\t\tif (fu == fv) {\n\t\t\tint t = query(e[i].u, e[i].v);\n\t\t\tif (val[t] > e[i].b) {\n\t\t\t\tcut(e[t - n].u, t);\n\t\t\t\tcut(t, e[t - n].v);\n\t\t\t}\n\t\t\telse \n\t\t\t\tcontinue;\n\t\t}\n\t\tfath[fv] = fu;\n\t\tval[i + n] = e[i].b;\n\t\tmaxi[i + n] = i + n;\n\t\tlink(e[i].u, i + n);\n\t\tlink(i + n, e[i].v);\n\t\tif (findf(1) == findf(n)) {\n\t\t\tans = min(ans, val[query(1, n)] + e[i].a);\n\t\t}\n\t}\n\tif (findf(1) != findf(n)) puts(\"-1\");\n\telse printf(\"%d\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1573816967,
        "uid": 11956,
        "name": "\u4e94\u66f4\u7409\u7483",
        "ccfLevel": 0,
        "title": "[\u9898\u89e3] P2387 [NOI2014]\u9b54\u6cd5\u68ee\u6797"
    },
    {
        "content": "\n\u7ef4\u62a4\u52a8\u6001\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7ef4\u62a4\u8fb9\u7684\u6700\u5927\u6743\u7684\u7f16\u53f7\u3002\u7528\u73af\u5207\u6027\u8d28\uff0c\u65ad\u6389\u73af\u4e0a\u6700\u5927\u6743\u7684\u8fb9\uff0c\u52a0\u5165\u5f53\u524d\u8fb9\u3002\n\n\npascal\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n```cpp\ntype pp=record\n     u,v,v1,v2:longint;\nend;\ntype pp1=record\n     son:array[0..1]of longint;\n     fa,rev:longint;\nend;\nvar ans,t,p1,p2,u,v,v1,v2,i,n,m:longint;\n    stack,mx,p,val:array[0..200005]of longint;\n    e:array[0..200005]of pp;\n    a:array[0..200005]of pp1;\nprocedure swap1(var x,y:pp);\nvar z:pp;\nbegin\n  z:=x; x:=y; y:=z;\nend;\nprocedure swap(var x,y:longint);\nvar z:longint;\nbegin\n  z:=x; x:=y; y:=z;\nend;\nfunction min(x,y:longint):longint;\nbegin\n  if x>y then exit(y) else exit(x);\nend;\nfunction find(x:longint):longint;\nbegin\n  if p[x]=x then exit(x) else p[x]:=find(p[x]);\n  exit(p[x]);\nend;\nprocedure sort(l,r:longint);\nvar i,j,x:longint;\nbegin\n  i:=l;\n  j:=r;\n  x:=e[(l+r) div 2].v1;\n  while i<=j do\n     begin\n     while e[i].v1<x do inc(i);\n     while x<e[j].v1 do dec(j);\n     if i<=j then\n          begin\n       swap1(e[i],e[j]);\n        inc(i); dec(j);\n        end;\n     end;\n  if l<j then sort(l,j);\n  if i<r then sort(i,r);\nend;\nfunction isroot(x:longint):boolean;\nbegin\n  if (a[a[x].fa].son[0]<>x)and(a[a[x].fa].son[1]<>x) then exit(true) else exit(false);\nend;\nprocedure pushup(x:longint);\nbegin\n  mx[x]:=x;\n  if val[mx[a[x].son[0]]]>val[mx[x]] then mx[x]:=mx[a[x].son[0]];\n  if val[mx[a[x].son[1]]]>val[mx[x]] then mx[x]:=mx[a[x].son[1]];\nend;\nprocedure pushdown(x:longint);\nbegin\n  if a[x].rev=0 then exit;\n  a[x].rev:=0;\n  swap(a[x].son[1],a[x].son[0]);\n  a[a[x].son[0]].rev:=a[a[x].son[0]].rev xor 1; a[a[x].son[1]].rev:=a[a[x].son[1]].rev xor 1;\nend;\nprocedure sett(x,y,f:longint);\nbegin\n  a[y].fa:=x; a[x].son[f]:=y;\nend;\nprocedure rotate(x,w:longint);\nvar y:longint;\nbegin\n  y:=a[x].fa; a[x].fa:=a[y].fa;\n  if not isroot(y) then\n     if y=a[a[y].fa].son[0] then a[a[y].fa].son[0]:=x else a[a[y].fa].son[1]:=x;\n  a[y].son[w xor 1]:=a[x].son[w];\n  if a[x].son[w]<>0 then a[a[x].son[w]].fa:=y;\n  sett(x,y,w); pushup(y);\nend;\nprocedure splay(x:longint);\nvar i,now,top,y:longint;\nbegin\n  top:=1; now:=x; stack[top]:=x;\n  while not isroot(now) do begin now:=a[now].fa; inc(top); stack[top]:=now; end;\n  for i:=top downto 1 do pushdown(stack[i]);\n  while not isroot(x) do\n     begin\n     y:=a[x].fa;\n     if isroot(y)\n        then if x=a[y].son[0] then rotate(x,1) else rotate(x,0)\n        else\n    if y=a[a[y].fa].son[0]\n       then if x=a[y].son[0] then begin rotate(y,1); rotate(x,1); end else begin rotate(x,0); rotate(x,1); end\n       else if x=a[y].son[0] then begin rotate(x,1); rotate(x,0); end else begin rotate(y,0); rotate(x,0); end;\n     end;\n  pushup(x);\nend;\nprocedure access(x:longint);\nvar pre:longint;\nbegin\n  pre:=0;\n  while x<>0 do\n    begin\n    splay(x);\n    a[x].son[1]:=pre; pre:=x; x:=a[x].fa;\n    end;\nend;\nprocedure makeroot(x:longint);\nbegin\n  access(x); splay(x); a[x].rev:=a[x].rev xor 1;\nend;\nprocedure link(x,y:longint);\nbegin\n  makeroot(x); a[x].fa:=y;\nend;\nprocedure cut(x,y:longint);\nbegin\n  makeroot(x); access(y); splay(y);\n  a[y].son[0]:=0; a[x].fa:=0; pushup(y);\nend;\nfunction query(x,y:longint):longint;\nbegin\n  makeroot(x); access(y); splay(y);\n  exit(mx[y]);\nend;\nbegin\n  readln(n,m);\n  for i:=1 to n do p[i]:=i;\n  for i:=1 to m do readln(e[i].u,e[i].v,e[i].v1,e[i].v2);\n  sort(1,m);\n  ans:=maxlongint;\n  for i:=1 to m do\n    begin\n    u:=e[i].u; v:=e[i].v; p1:=find(u); p2:=find(v);\n    if p1=p2 then\n      begin\n      t:=query(u,v);\n      if val[t]>e[i].v2 then begin cut(t,e[t-n].u); cut(t,e[t-n].v); end\n          else begin if find(1)=find(n) then ans:=min(ans,e[i].v1+val[query(1,n)]); continue; end;\n      end\n      else p[p1]:=p2;\n    val[n+i]:=e[i].v2; mx[n+i]:=n+i;\n    link(u,n+i); link(v,n+i);\n    if find(1)=find(n) then ans:=min(ans,e[i].v1+val[query(1,n)]);\n    end;\n  if ans=maxlongint then writeln(-1) else writeln(ans);\nend.\n```\nc++\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxm=1e5+5,maxn=5e4+5;\nint n,m,stack[maxn+maxm];\nstruct pp{\n    int x,y,a,b;\n}e[maxm];\nstruct pp1{\n    int rev,val,fa,son[2],mx;\n}a[maxn+maxm];\nvoid sett(int f,int x,int flag){a[f].son[flag]=x; a[x].fa=f;}\nbool isroot(int x){return (a[a[x].fa].son[0]!=x&&a[a[x].fa].son[1]!=x);}\nvoid pushup(int x)\n{\n    a[x].mx=x;\n    if (a[a[x].mx].val<a[a[a[x].son[0]].mx].val) a[x].mx=a[a[x].son[0]].mx;\n    if (a[a[x].mx].val<a[a[a[x].son[1]].mx].val) a[x].mx=a[a[x].son[1]].mx;    \n}\nvoid rotate(int x,int w)\n{\n    int y=a[x].fa; a[x].fa=a[y].fa; a[y].son[w^1]=a[x].son[w];\n    if (!isroot(y))\n        if (y==a[a[y].fa].son[0]) a[a[y].fa].son[0]=x; else a[a[y].fa].son[1]=x;\n    if (a[x].son[w]) a[a[x].son[w]].fa=y;\n    sett(x,y,w); pushup(y); \n}\nvoid pushdown(int x){if (a[x].rev) a[x].rev=0,swap(a[x].son[0],a[x].son[1]),a[a[x].son[0]].rev^=1,a[a[x].son[1]].rev^=1;}\nvoid splay(int x)\n{\n    int top=1; stack[top]=x; int now=x;\n    while (!isroot(now)) now=a[now].fa,stack[++top]=now;\n    for (int i=top;i;i--) pushdown(stack[i]);\n    while (!isroot(x)){\n        int y=a[x].fa;\n        if (isroot(y))\n            if (x==a[y].son[0]) rotate(x,1); else rotate(x,0);\n            else if (y==a[a[y].fa].son[0]) \n                if (x==a[y].son[0]) rotate(y,1),rotate(x,1); else rotate(x,0),rotate(x,1);\n                else if (x==a[y].son[0]) rotate(x,1),rotate(x,0); else rotate(y,0),rotate(x,0);\n    }\n    pushup(x);\n}\nvoid access(int x){int pre=0; for (;x;a[x].son[1]=pre,pre=x,x=a[x].fa) splay(x);}\nvoid makeroot(int x){access(x); splay(x); a[x].rev^=1;}\nvoid link(int x,int y){makeroot(x); a[x].fa=y;}\nvoid split(int x,int y){makeroot(x); access(y); splay(y);}\nvoid cut(int x,int y){split(x,y); a[x].fa=a[y].son[0]=0;}\nint find(int x)\n{\n    access(x); splay(x);\n    while (a[x].son[0]) x=a[x].son[0];\n    return x;\n}\nbool judge(int x,int y){return find(x)==find(y);}\nint query(int x,int y){split(x,y); return a[y].mx;}\nbool cmp(pp x,pp y){return x.a<y.a||(x.a==y.a&&x.b<y.b);}\nint main()\n{\n    scanf(\"%d%d\",&n,&m); int ans=0x3f3f3f3f;\n    for (int i=1;i<=m;i++) scanf(\"%d%d%d%d\",&e[i].x,&e[i].y,&e[i].a,&e[i].b);\n    sort(e+1,e+m+1,cmp);\n    for (int i=1;i<=m;i++) a[i+n].val=e[i].b;\n    for (int i=1;i<=m;i++){\n        if (!judge(e[i].x,e[i].y))link(e[i].x,i+n),link(e[i].y,i+n);\n            else {\n                int t=query(e[i].x,e[i].y);\n                if (a[t].val>e[i].b){cut(e[t-n].x,t); cut(e[t-n].y,t); link(e[i].x,n+i); link(e[i].y,n+i);}\n            }\n        if (judge(1,n)) ans=min(ans,e[i].a+a[query(1,n)].val);\n    }\n    ans!=0x3f3f3f3f?printf(\"%d\\n\",ans):puts(\"-1\");\n}\n```",
        "postTime": 1505648852,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2387 \u3010\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P2387)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u770b\u89c1$a$\u5f88\u5c0f\uff0c\u6211\u4eec\u8003\u8651\u679a\u4e3e\u4e0d\u540c\u7684$a$\uff0c\u8ba1\u7b97\u6bcf\u79cd\u60c5\u51b5\u7684\u6700\u5c0f\u503c\u518d\u6c42\u51fa\u7b54\u6848\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u5c06\u8fb9\u6309\u7167$a$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4e4b\u540e\u6bcf\u6b21\u5c06$a$\u76f8\u540c\u7684\u8fb9\u52a0\u5165\u5230\u56fe\u4e0a\u6765\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u524d\u52a0\u5165\u7684$a$\u603b\u662f\u6700\u5927\u7684\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u786e\u5b9a\u4e86$A$\u79cd\u5c0f\u7cbe\u7075\u5e94\u8be5\u5e26\u591a\u5c11\u53ea\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651$B$\u79cd\u5c0f\u7cbe\u7075\u6700\u5c11\u9700\u8981\u5e26\u591a\u5c11\u53ea\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u6b64\u65f6$B$\u79cd\u5c0f\u7cbe\u7075\u7684\u9700\u6c42\u5c31\u662f\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c$1-n$\u7684\u8def\u5f84\u4e0a\u7684$b$\u7684\u6700\u5927\u503c\u3002\u53ef\u4ee5\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u4f7f\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u6070\u5de7\u5c31\u662f$LCT$\u53ef\u4ee5\u5b8c\u6210\u7684\u3002\u6240\u4ee5\u6211\u4eec\u7528$LCT$\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\uff0c\u65f6\u95f4\u662f$O(m\\log_2^2n)$\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 2e5 + 5, MAXM = 2e5 + 5, MAXSIZ = MAXN + MAXM, MAXLOG = 20;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\nvoid swapp( _T &x, _T &y )\n{\n\t_T t = x; x = y, y = t;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct segmentTreeNode\n{\n\tint cnt, lch, rch;\n\t#define cnt( x ) ( segTree[x].cnt )\n\t#define lch( x ) ( segTree[x].lch )\n\t#define rch( x ) ( segTree[x].rch )\n}segTree[MAXM * MAXLOG];\n\nstruct edge\n{\n\tint u, v;\n}E[MAXM];\n\nint f[MAXN], del[MAXM], rt[MAXM];\nint ch[MAXSIZ][2], fa[MAXSIZ], val[MAXSIZ], mn[MAXSIZ];\nint N, M, siz;\nbool rev[MAXSIZ];\n\nbool chk( const int x ) { return ch[fa[x]][1] == x; }\nbool isRt( const int x ) { return ch[fa[x]][0] ^ x && ch[fa[x]][1] ^ x; }\nbool nrt( const int x ) { return ! isRt( x ); }\nvoid reverse( const int x ) { if( x ) swapp( ch[x][0], ch[x][1] ), rev[x] ^= 1; }\nvoid normalize( const int x ) { if( x && rev[x] ) reverse( ch[x][0] ), reverse( ch[x][1] ), rev[x] = false; }\nvoid tagClean( const int x ) { if( nrt( x ) ) tagClean( fa[x] ); normalize( x ); }\nvoid upt( const int x ) { mn[x] = MIN( val[x], MIN( mn[ch[x][0]], mn[ch[x][1]] ) ); }\n\nvoid rotate( const int x )\n{\n\tif( ! x || isRt( x ) ) return ;\n\tint y = fa[x], z = fa[y], side = chk( x ), son = ch[x][! side];\n\tif( z && nrt( y ) ) ch[z][chk( y )] = x; ch[x][! side] = y, ch[y][side] = son;\n\tif( son ) fa[son] = y; fa[y] = x, fa[x] = z;\n\tupt( y ), upt( x ), upt( z );\n}\n\nvoid splay( const int x )\n{\n\ttagClean( x );\n\tfor( int y ; nrt( x ) ; rotate( x ) )\n\t\tif( nrt( y = fa[x] ) ) rotate( chk( y ) == chk( x ) ? y : x );\n}\n\nvoid access( int x ) { for( int y = 0 ; x ; x = fa[y = x] ) splay( x ), ch[x][1] = y, upt( x ); }\nvoid makeRt( const int x ) { access( x ), splay( x ), reverse( x ); }\nint findRt( int x ) { access( x ), splay( x ); while( ch[x][0] ) normalize( x ), x = ch[x][0]; splay( x ); return x; }\nbool link( const int x, const int y ) { makeRt( x ); if( findRt( y ) == x ) return false; fa[x] = y; return true; }\nvoid cut( const int x, const int y ) { makeRt( x ), access( y ), splay( x ); fa[y] = ch[x][1] = 0, upt( x ); }\nint split( const int x, const int y ) { makeRt( x ), access( y ), splay( y ); return y; }\n\nint findSet( const int u ) { return f[u] = ( f[u] == u ? f[u] : findSet( f[u] ) ); }\n\nbool unionSet( const int u, const int v )\n{\n\tint r1 = findSet( u ), r2 = findSet( v );\n\tf[r1] = r2; return r1 ^ r2;\n}\n\nint change( const int id )\n{\n\tint u = E[id].u, v = E[id].v, ID;\n\tif( u == v ) return M;\n\tif( unionSet( u, v ) ) { link( u, id + N ), link( v, id + N ); return 0; }\n\tID = mn[split( u, v )];\n\tcut( E[ID].u, ID + N ), cut( E[ID].v, ID + N );\n\tlink( u, id + N ), link( v, id + N );\n\treturn ID;\n}\n\nvoid _upt( const int x ) { cnt( x ) = cnt( lch( x ) ) + cnt( rch( x ) ); }\n\nint update( const int u, const int l, const int r, const int pos )\n{\n\tint cur = ++ siz, mid = l + r >> 1; segTree[cur] = segTree[u];\n\t#ifdef _DEBUG\n\tsegmentTreeNode &node1 = segTree[u], &node2 = segTree[cur];\n\t#endif\n\tif( pos <= l && r <= pos ) { cnt( cur ) ++; return cur; }\n\tif( pos <= mid ) lch( cur ) = update( lch( u ), l, mid, pos );\n\telse rch( cur ) = update( rch( u ), mid + 1, r, pos );\n\t_upt( cur ); \n\treturn cur; \n}\n \nint query( const int lr, const int rr, const int l, const int r, const int segL, const int segR )\n{\n\t#ifdef _DEBUG\n\tsegmentTreeNode &nodel = segTree[lr], &noder = segTree[rr];\n\t#endif\n\tif( segL <= l && r <= segR ) return cnt( rr ) - cnt( lr );\n\tint mid = l + r >> 1, ret = 0;\n\tif( segL <= mid ) ret += query( lch( lr ), lch( rr ), l, mid, segL, segR );\n\tif( segR > mid ) ret += query( rch( lr ), rch( rr ), mid + 1, r, segL, segR );\n\treturn ret;\n}\n\nint main()\n{\n\tint K, type, L, R, las = 0, tmp;\n\tread( N ), read( M ), read( K ), read( type );\n\tfor( int i = 0 ; i <= N ; i ++ ) val[i] = mn[i] = M + 1, f[i] = i;\n\tfor( int i = 1 ; i <= M ; i ++ ) read( E[i].u ), read( E[i].v ), val[i + N] = mn[i + N] = i; \n\tfor( int i = 1 ; i <= M ; i ++ ) del[i] = change( i );\n\tfor( int i = 1 ; i <= M ; i ++ ) \n\t\trt[i] = update( rt[i - 1], 0, M, del[i] );\n\twhile( K -- )\n\t{\n\t\tread( L ), read( R );\n\t\tL ^= las, R ^= las;\n\t\ttmp = query( rt[L - 1], rt[R], 0, M, 0, L - 1 );\n\t\twrite( las = ( N - query( rt[L - 1], rt[R], 0, M, 0, L - 1 ) ) ), putchar( '\\n' );\n\t\tlas *= type;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1579089498,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[NOI2014]\u9b54\u6cd5\u68ee\u6797"
    },
    {
        "content": "\u672c\u601d\u8def\u4ec5\u4f9b\u53c2\u8003,\u6570\u636e\u5f3a\u4e00\u70b9\u5e94\u8be5\u8be5\u4f1a\u88ab\u5361\u3002\n\n\u672c\u849f\u84bb\u6ca1\u6709\u6253 $link$ - $cut$ - $tree$ .\n\u800c\u662f\u7528\u66b4\u529b\u6c34\u4e86\u8fc7\u53bb\u3002\n\n\u5177\u4f53\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5148\u4e8c\u5206\u6700\u5c11\u7684 $a_i$ , \u518d\u5728 $judge$ \u7684\u65f6\u5019\u518d\u4e8c\u5206 $b_i$.\n\u7136\u540e\u4f7f\u7528\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u662f\u5426\u8054\u901a\uff0c\u590d\u6742\u5ea6 $n(logn)^3$\n\n\u4f46\u662f\u7b2c\u4e00\u904d\u53ea\u6709 $75$ \u5206 , \u4e8e\u662f\u6211\u5199\u4e86\u4e24\u904d\u4e8c\u5206\u5957\u4e8c\u5206,\u5373\u5148\u662f\u4ee5 $a_i$ \u4e3a\u7b2c\u4e00\u4e2a\u4e8c\u5206\u7684\uff0c\u7136\u540e\u518d\u4ee5 $b_i$ \u4e3a\u7b2c\u4e00\u4e2a\u4e8c\u5206\u7684\uff0c\u6700\u540e\u4e24\u8005\u53d6\u8f83\u5c0f\u7684\u7b54\u6848\u3002\n\n\u7136\u540e... \u5c31 $AC$ \u4e86\u3002 \n\n~~\u66b4\u529b\u771f\u7684\u662f\u4e2a\u7f8e\u5999\u7684\u4e1c\u897f\u3002~~\n\n**Code :**\n\n```cpp\n#include<bits/stdc++.h>\n#define in(x) x=read()\n#define N 50008\n#define M 100008\n\nusing namespace std;\nstruct sj{int y,x,a,b;}a[M*2];\nint n,m,ans_A=M*2,ans_B=M*2,fa[N];\nint Ans_A=M*2,Ans_B=M*2,Fa[N];\n\nint read()\n{\n\tchar ch=getchar(); int f=1,w=0;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){w=w*10+ch-'0';ch=getchar();}\n\treturn f*w;\n}\n\nint find(int x){\n\tif(x==fa[x])return x;\n\treturn fa[x]=find(fa[x]);\n}\n\nvoid join(int x,int y){\n\tx=find(x); y=find(y);\n\tif(x!=y)fa[x]=y;\n}\n\nbool jud(int A,int B)\n{\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\tif(a[i].a<=A&&a[i].b<=B)\n\tjoin(a[i].x,a[i].y);\n\tif(find(1)==find(n))return 1;\n\treturn 0;\n}\n\nbool solve(int A)\n{\n\tint L=0,R=N*2,ans=-1;\n\twhile(L<=R)\n\t{\n\t\tint B=L+R>>1;\n\t\tif(jud(A,B))\n\t\t\tans=B,R=B-1;\n\t\telse L=B+1;\n\t}\n\tif(ans==-1)return 0;\n\tif(ans_A+ans_B>A+ans)\n\tans_A=A,ans_B=ans;\n\treturn 1;\n}\n\nbool Jud(int A,int B)\n{\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\tif(a[i].b<=A&&a[i].a<=B)\n\tjoin(a[i].x,a[i].y);\n\tif(find(1)==find(n))return 1;\n\treturn 0;\n}\n\nbool Solve(int A)\n{\n\tint L=0,R=N*2,ans=-1;\n\twhile(L<=R)\n\t{\n\t\tint B=L+R>>1;\n\t\tif(Jud(A,B))\n\t\t\tans=B,R=B-1;\n\t\telse L=B+1;\n\t}\n\tif(ans==-1)return 0;\n\tif(Ans_A+Ans_B>A+ans)\n\tAns_A=A,Ans_B=ans;\n\treturn 1;\n}\n\n\nint main()\n{\n\t//freopen(\"disanti.in\",\"r\",stdin);\n\t//freopen(\"disanti.out\",\"w\",stdout);\n\tin(n); in(m);\n\tfor(int i=1;i<=m;i++)\n\t\tin(a[i].x),in(a[i].y),\n\t\tin(a[i].a),in(a[i].b);\n\tint l=0,r=N*2;\n\twhile(l<=r)\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(solve(mid))r=mid-1;\n\t\telse l=mid+1;\t\n\t}\n\t\n\tl=0,r=N*2;\n\twhile(l<=r)\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(Solve(mid))r=mid-1;\n\t\telse l=mid+1;\t\n\t}\n\t\n\tif(ans_A==M*2&&ans_B==M*2)puts(\"-1\");\n\telse cout<<min(Ans_A+Ans_B,ans_A+ans_B)<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1573050472,
        "uid": 44008,
        "name": "Beau_Kang",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\uff1a\n\u4e00\u4e2a\u6709$n$\u4e2a\u70b9\uff0c$m$\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u90fd\u53e6\u6709\u4e24\u4e2a\u6743\u503c$a_i$\u548c$b_i$\uff0c\u4e00\u5f00\u59cb\u6709\u4e24\u4e2a\u6307\u6570\uff0c$A$\uff0c$B$\uff0c\u5982\u679c\u4f60\u7684$A>=a_i,B>=b_i$\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6761\u8fb9\uff0c\u6c42$A+B$\u7684\u6700\u5c0f\u503c\u3002\n# \u5927\u4f53\u601d\u8def\uff1a\n$LCT$\u88f8\u9898\u3002\n\n\u6ce8\u610f\u5230\u6709\u4e24\u4e2a\u6307\u6570\uff0c\u90a3\u6211\u4eec\u80af\u5b9a\u8981\u5148\u901a\u8fc7\u5404\u79cd\u65b9\u6cd5\u641e\u6389\u4e00\u4e2a\u6307\u6570\uff0c\u518d\u53bb\u7ef4\u62a4\u53e6\u4e00\u4e2a\u6307\u6570\uff0c\u6bd4\u5982\u7528$CDQ$\u5206\u6cbb\uff0c\u5f53\u7136\u8fd9\u9898\u53ea\u8981\u7528\u4e2a$sort$\uff0c\u518d\u7ef4\u62a4\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5373\u53ef\u3002\n\n\u628a\u8fb9\u6309$a_i$\u6392\u5e8f\uff0c\u7136\u540e\u4e00\u6761\u4e00\u6761\u5730\u52a0\u5165$LCT$\uff0c\u5982\u679c\u76ee\u524d\u8fd9\u6761\u8fb9\u7684\u4e24\u7aef\u4ee5\u5728\u540c\u4e00\u8fde\u901a\u5757\u4e2d\uff0c\u90a3\u4e48\u52a0\u5165\u8fd9\u6761\u8fb9\u4e4b\u540e\u80af\u5b9a\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u5982\u679c\u539f\u8fde\u901a\u5757\u4e2d$b_i$\u6700\u5927\u7684\u4e00\u6761\u8fb9\u6bd4\u8be5\u8fb9\u7684$b_i$\u5c0f\uff0c\u90a3\u4e48\u5c31\u628a\u6700\u5927\u7684\u90a3\u6761\u8fb9\u5220\u4e86\uff0c\u8ba9\u8be5\u8fb9\u52a0\u5165\u5373\u53ef\u3002\n\n\u4e00\u4e2a\u8fb9\u6743\u8f6c\u70b9\u6743\u7684\u65e0\u8111\u65b9\u6cd5\uff1a\n\n- \u4e24\u70b9\u4e4b\u95f4\u5728\u52a0\u5165\u53e6\u4e00\u4e2a\u70b9\uff0c\u53ea\u6709\u4e2d\u95f4\u65b0\u52a0\u5165\u7684\u8fd9\u4e2a\u70b9\u6709\u70b9\u6743\uff0c\u70b9\u6743\u5c31\u662f\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200005,inf=1e6+7;\nint w[N],val[N],fa[N],rev[N],ch[N][2],Max[N],p[N];\nint n,m,opt,x,y,ans,t;\nstruct edge{\n\tint u,v,a,b;\n} e[N];\nbool cmp(edge a,edge b){return a.a<b.a;}\nint find(int x){return p[x]==x?x:p[x]=find(p[x]);}\nint wh(int x){return ch[fa[x]][1]==x;}\nbool isrt(int x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\nvoid rever(int x){rev[x]^=1,swap(ch[x][0],ch[x][1]);}\nvoid update(int x){\n\tMax[x]=x;\n\tif (ch[x][0]&&val[Max[ch[x][0]]]>val[Max[x]]) Max[x]=Max[ch[x][0]];\n\tif (ch[x][1]&&val[Max[ch[x][1]]]>val[Max[x]]) Max[x]=Max[ch[x][1]];\n}\nvoid pushdown(int x){\n\tif (rev[x]){\n\t\tif (ch[x][0]) rever(ch[x][0]);\n\t\tif (ch[x][1]) rever(ch[x][1]);\n\t\trev[x]=0;\n\t}\n}\nvoid Allpushdown(int x){\n\tif (!isrt(x)) Allpushdown(fa[x]);\n\tpushdown(x);\n}\nvoid rotate(int x){\n\tint y=fa[x],z=fa[y],c=wh(x);\n\tif (!isrt(y)) ch[z][wh(y)]=x;\n\tfa[x]=z;\n\tch[y][c]=ch[x][c^1];\n\tfa[ch[y][c]]=y;\n\tch[x][c^1]=y;\n\tfa[y]=x;\n\tupdate(y),update(x);\n}\nvoid splay(int x){\n\tAllpushdown(x);\n\tfor (;!isrt(x);rotate(x))\n\t\tif (!isrt(fa[x])) rotate(wh(fa[x])==wh(x)?fa[x]:x);\n}\nvoid access(int x){\n\tfor (int y=0;x;y=x,x=fa[x]) splay(x),ch[x][1]=y,update(x);\n}\nvoid makert(int x){\n\taccess(x),splay(x),rever(x);\n}\nvoid link(int x,int y){\n\tmakert(x),fa[x]=y;\n}\nvoid cut(int x,int y){\n\tmakert(x),access(y),splay(y);\n\tfa[x]=ch[y][0]=0,update(y);\n}\nint query(int x,int y){\n\tmakert(x),access(y),splay(y);\n\treturn Max[y];\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=m;i++) scanf(\"%d%d%d%d\",&e[i].u,&e[i].v,&e[i].a,&e[i].b);\n\tsort(e+1,e+1+m,cmp);\n\tfor (int i=1;i<=n;i++) p[i]=i; \n\tans=inf;\n\tfor (int i=1;i<=m;i++){\n\t\tint u=e[i].u,v=e[i].v;\n\t\tif (find(u)==find(v)){\n\t\t\tt=query(u,v);\n\t\t\tif (e[i].b<val[t]){\n\t\t\t\tcut(t,e[t-n].u);\n\t\t\t\tcut(t,e[t-n].v);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif (find(1)==find(n)) ans=min(ans,e[i].a+val[query(1,n)]);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t} else p[find(u)]=find(v);\n\t\tval[i+n]=e[i].b,Max[i+n]=i+n;\n\t\tlink(u,i+n),link(i+n,v);\n\t\tif (find(1)==find(n)) ans=min(ans,e[i].a+val[query(1,n)]);\n\t}\n\tif (ans==inf) puts(\"-1\"); else printf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1557991045,
        "uid": 111449,
        "name": "AFO_WR_Eternity",
        "ccfLevel": 0,
        "title": "[NOI 2014]\u9b54\u6cd5\u68ee\u6797"
    },
    {
        "content": "\u6765\u4e00\u79cd\u6bd4\u8f83\u626f\u7684\u7b97\u6cd5 \u4e09\u5206+SPFA\n\n\u6709\u4e00\u79cd\u66b4\u529b\u7684\u7b97\u6cd5 \u5c31\u662f\u679a\u4e3ea\u7136\u540e\u6c42\u51fab\u7684\u6700\u5c0f\u503c \u7136\u540ea+b\u7684\u6700\u5c0f\u503c\u5c31\u662f\u7b54\u6848\n\u590d\u6742\u5ea6\u4e3aO(A)* O(SPFA) \u53ef\u4ee5\u5f97\u5230\u5927\u7ea650\u5206\n\n\u6211\u4eec\u53d1\u73b0\u5728a\u589e\u5927\u65f6b\u5728\u51cf\u5c0f \u4e8e\u662f\u6211\u4eec\u8003\u8651\u7528\u4e09\u5206\u6cd5\u505a\u8fd9\u9053\u9898 \u81f3\u4e8e\u6b63\u786e\u6027  ~~\u53cd\u6b63\u731c\u9519\u4e86\u4e0d\u6263\u5206 \u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u80fd\u8fc7~~ \u4e8e\u662f\u590d\u6742\u5ea6\u5c31\u53d8\u6210O(logA)* O(SPFA) \u7136\u540e\u5c31\u53ef\u4ee5\u8fc7\u4e86 \u4ee3\u7801\u5f88\u77ed\u8fd8\u5f88\u597d\u5199\n\n``` cpp\n#include<iostream>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\nstruct bian\n{\n    int ed,a,b;\n}; \nvector<bian> tu[50010];\nint n,m,f[50010],p[50010];\ndeque<int> q;\nvoid check(int x) //SPFA\n{\n     int t1,t2,t3,t4,t5=0,i;\n     memset(f,1,sizeof(f));\n     memset(p,0,sizeof(p));\n     f[1]=0;\n     p[1]=1;\n     q.push_front(1);\n     do\n     {\n     t1=q.front();\n     p[t1]=0;\n     q.pop_front();\n     for(i=0;i<tu[t1].size();i++)\n     {\n         t2=tu[t1][i].ed;\n         t3=tu[t1][i].a;\n         t4=tu[t1][i].b;\n         if(t3<=x&&max(f[t1],t4)<f[t2]) \n         {\n             f[t2]=max(f[t1],t4);\n             if(p[t2]==0)\n             {\n                 if(t5==0) q.push_back(t2); else q.push_front(t2);\n                 t5=1-t5;//\u76f4\u63a5\u63d2\u961f\u5934\u4f1a\u8d85\u65f6 \u4e00\u4e2a\u63d2\u961f\u5934\u4e00\u4e2a\u63d2\u961f\u5c3e\u5c31\u8fc7\u4e86\n                 p[t2]=1;\n             }\n         }\n     }\n     }\n     while(!q.empty());\n}             \nint main()\n{\n    int i,t1,t2;\n    bian t0;\n    cin>>n>>m;\n    for(i=1;i<=m;i++)\n    {\n        cin>>t1>>t2>>t0.a>>t0.b;\n        t0.ed=t2;\n        tu[t1].push_back(t0);\n        t0.ed=t1;\n        tu[t2].push_back(t0);\n    }\n    int l=0,r=50000,m0,ans=9999999,a1,a2;\n    while(l<r-4)//\u4e09\u5206\n    {\n        t1=l*2/3+r/3;\n        t2=l/3+r*2/3;\n        check(t1);\n        a1=f[n]+t1;\n        if(f[n]+t1<ans) ans=f[n]+t1;\n        check(t2);\n        a2=f[n]+t2;\n        if(f[n]+t2<ans) ans=f[n]+t2;//\u611f\u89c9\u4e0d\u7a33 \u80fd\u8bb0\u4e00\u6b21\u7b54\u6848\u5c31\u8bb0\u4e00\u6b21\n        if(a1<=100000&&a2<=100000)//\u5982\u679c\u8d70\u4e0d\u5230 \u8bf4\u660ea\u731c\u5c0f\u4e86\n         if(a1>a2) l=t1;\n         else r=t2;\n        else \n         l=t1;\n    }\n    if(ans<=100000) cout<<ans; else cout<<-1;\n    return 0;\n}\n```\n",
        "postTime": 1521894591,
        "uid": 31476,
        "name": "\u6211\u6ca1\u6709\u540d\u79f0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\u6211\u597d\u83dc\u554a\uff01\uff01\uff01\u53c8\u88ab\u673a\u623f\u6240\u6709\u4eba\u5305\u83dc\uff0c\u611f\u89c9\u81ea\u5df1\u9893\u5e9f\u4e86\u3002\u3002\u3002\u3002\n\n\u9996\u5148\u9898\u76ee\u5927\u610f\u5927\u6982\u4e3a\u4e00\u5e45\u56fe\u4e0a\u6709\u591a\u6761\u8fb9\uff0c\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u8fb9\u6743\uff0c\u6bcf\u6b21\u8d70\n\n\u7684\u8def\u5f84\u4e3a\u4f60\u8d70\u7684\u8def\u5f84\u5206\u522b\u7684\u4e24\u4e2a\u6743\u503c\u7684max\u6c42\u548c\uff0c\u4f7f\u8fd9\u4e2amax\u6700\u5c0f\uff0c\n\n\u9996\u5148\uff0c\u8bf4\u8bf4\u6211\u6700\u5f00\u59cb\u7684\u601d\u8def\u5427\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u6743\u503c\uff0c\u6211\u4eec\u4e0d\u53ef\u4ee5\u76f4\u63a5\u7528\n\nLCT\u5728pushup\u4e2d\u53d6max,\u4e8e\u662f\u6211\u4eec\u8003\u8651\u56fa\u5b9a\u4e00\u4e2a\u6570\uff0c\u6765\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u90a3\u4e48\u662f\u5426\u53ef\u4ee5\u7528\u4e8c\u5206\u5462\uff1f\u4e8c\u5206\u8fb9\u6743a\uff0c\u6bcf\u6b21\u8d70\u5c0f\u4e8e\u8fb9\u6743a\u7684\u8fb9\uff0c\u7136\n\u540eLCT\u8dd1\u6700\u5c0f\u751f\u6210\u6811\uff08\u6216\u8005\u514b\u9c81\u65af\u5361\u5c14\uff1f\uff09 \u4f3c\u4e4e\u590d\u6742\u5ea6 n*log^2nn\u2217log \n2\n n\n\n\u7684\uff0c\u518d\u52a0\u4e0a LCTLCT \u7684\u5927\u5e38\u6570\uff0c\u81e3\u59be\u505a\u4e0d\u5230\u554a\u3002\u3002\n\n\u90a3\u4e48\u6211\u53ef\u4ee5\u5c1d\u8bd5\u5148\u6309\u6743\u503ca\u8fdb\u884c\u6392\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u6bcf\u4e00\n\u6b21\u5c31\u53ea\u9700\u8981\u7ef4\u62a4\u94fe\u4e0ab\u7684\u6700\u5927\u503c\uff0c\u5f53\u51fa\u73b0\u73af\u65f6\uff0c\u5272\u53bbb\u7684\u8fb9\u6743\u6700\u5927\u7684\n\n\u8fb9\u3002\uff08\u4e3a\u4ec0\u4e48\u5e94\u8be5\u5272\u5b83\uff0c\u56e0\u4e3a\u5176\u4e2d\u7684a\u6743\u662f\u9012\u589e\u7684\uff0ca\u5230\u540e\u9762\u53ea\u4f1a\u66f4\n\n\u5927\uff0c\u5272bmax\u4f1a\u4f7fb\u51cf\u5c0f\uff0c\u53ef\u4ee5\u4f7f\u5b83\u4eec\u7684\u6700\u5927\u503c\u5c3d\u91cf\u5c0f\uff09\u5f531\u548cn\u8fde\u63a5\u65f6\uff0c\n\n\u770b\u80fd\u5426\u66f4\u65b0\u7b54\u6848\u3002\n\n\u849f\u84bb\u4ee3\u7801\u5728\u4e0b\uff0c\u53c8\u88ab\u5de8\u4f6c\u5305\u83dc\u4e86\n```cpp\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define ls ch[x][0]\n#define rs ch[x][1]\n#define inf 0x7fffffff\n#define N 700007\nint fa[N] , ch[N][3] , turn[N] , val[3*N] , M[2*N] ;\nint n , m ;\nstruct node{\n    int u , v , x , y ;\n}e[2*N] ;\ninline int read()\n{\n    int x = 0, f = 1; char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\nint Get(int x)\n{\n    return ch[fa[x]][1] == x ;\n}\nint nroot(int x)\n{\n    return ch[fa[x]][1] == x || ch[fa[x]][0] == x ;\n}\nvoid pushr(int x)\n{\n    swap(ls , rs) ;\n    turn[x] ^= 1 ;\n}\nvoid pushdown(int x)\n{\n    if( turn[x] )\n    {\n        if(ls) pushr(ls) ;\n        if(rs) pushr(rs) ;\n        turn[x] = 0 ;\n    }\n    return ;\n}\nvoid pushall(int x)\n{\n    if( fa[x] ) pushall(fa[x]) ;\n    pushdown(x) ;\n}\nvoid pushup(int x)\n{\n    M[x] = x ;\n    if( ls && val[M[x]] < val[M[ls]] ) M[x] = M[ls] ;\n    if( rs && val[M[x]] < val[M[rs]] ) M[x] = M[rs] ;\n    return ;\n}\nvoid rotate(int x)\n{\n    int y = fa[x] , z = fa[y] , w = Get(x) ;\n    if( nroot(y) ) ch[z][ch[z][1] == y] = x ;\n    ch[y][w] = ch[x][w^1] ; ch[x][w^1] = y ;\n    if( ch[y][w] ) fa[ch[y][w]] = y ;\n    fa[x] = z ; fa[y] = x ; pushup(y) ;\n    return ;\n}\nvoid splay(int x)\n{\n    pushall(x) ;\n    while( nroot(x) ){\n        int y = fa[x] ;\n        if( nroot(y) ){\n            if( Get(y) == Get(x) ) rotate(y) ;\n            else rotate(x) ;\n        }\n        rotate(x) ;\n    } pushup(x) ;\n}\nvoid access(int x){\n    for(int y = 0 ; x ; x = fa[y=x] ){\n        splay(x) ; ch[x][1] = y ; pushup(x) ;\n    }\n}\nbool cmp(node a , node b){\n    return a.x < b.x ;\n}\nvoid makeroot(int x)\n{\n    access(x) ; splay(x) ; \n    pushr(x) ; return ;\n}\nint findroot(int x)\n{\n    access(x) ; splay(x) ;\n    while( ls ) pushdown(x) , x = ls ;\n    splay(x) ; return x ;\n}\nvoid split(int x , int y){\n    makeroot(x) ; access(y) ;\n    splay(y) ; return ;\n}\nvoid link(int x , int y){\n    makeroot(x) ;\n    if( findroot(y) != x ) fa[x] = y ;\n    return ;\n}\nvoid cut(int x , int y)\n{\n    makeroot(x) ;\n    if( findroot(y) == x && fa[y] == x && !ch[y][0] ) fa[y] = ch[x][1] = 0 , pushup(x) ;\n    return ;\n}\nint insame(int x , int y){\n    makeroot(x) ;\n    if( findroot(y) == x ) return 1 ;\n    else return 0 ;\n}\nint main()\n{\n    n = read() ; m = read() ;\n    for(int i = 1 ; i <= n ; i++ ) val[i] = 0 ;\n    for(int i = 1 ; i <= m ; i++ ){\n        e[i].u = read() ; e[i].v = read() ;\n        e[i].x = read() ; e[i].y = read() ;\n    }\n    int ans = inf ;\n    sort( e + 1 , e + m + 1 , cmp ) ;\n    for(int i = 1 ; i <= m ; i++ ){\n       // cout<<\"in it \"<<i<<endl;\n        if( e[i].u == e[i].v ) continue ;\n        val[ i + n ] = e[i].y ;\n        if( !insame( e[i].u , e[i].v ) ){\n            link( e[i].u , i + n ) ;\n            link( e[i].v , i + n ) ;\n        }\n        else{\n            split( e[i].u , e[i].v ) ;\n            int t = M[e[i].v] ;\n            if( val[t] <= e[i].y ) continue ;\n            cut( t , e[t - n].u ) ;\n            cut( t , e[t - n].v ) ;\n            link( i + n , e[i].u ) ;\n            link( i + n , e[i].v ) ;\n        }\n        if( insame( 1 , n ) ){\n             split( 1 , n ) ;\n             ans = min( ans , e[i].x + val[M[n]] ) ;\n        }\n    }\n    if( ans == inf ) printf(\"-1\\n\") ;\n    else printf(\"%d\" ,ans ) ;\n    return 0 ;\n}\n```\n",
        "postTime": 1554431829,
        "uid": 119610,
        "name": "Regimes",
        "ccfLevel": 7,
        "title": "P2387 [NOI2014]\u9b54\u6cd5\u68ee\u6797"
    },
    {
        "content": "LCT\u88f8\u9898\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u6765[\u8fd9\u91cc](http://www.cnblogs.com/dengyixuan/p/8001563.html)\u770b\u770b\u3002\n\n\u6b65\u5165\u6b63\u9898\uff0c\u73b0\u5c06\u8fb9\u6309a\u6392\u5e8f\uff0c\u4f9d\u6b21\u52a0\u5165\u6bcf\u4e00\u6761\u8fb9\uff0c\u540c\u65f6\u7ef4\u62a4\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u6700\u5927\u8fb9\u6743\uff0c\u5982\u679c\u4e24\u70b9\u4e0d\u8fde\u901a\uff0c\u5c31\u76f4\u63a5\u8fde\u901a\u3002\n\n\u5982\u679c\u4e24\u70b9\u5df2\u7ecf\u8fde\u901a\uff0c\u5c31\u5c06\u8be5\u8fb9\u4e0e\u8def\u5f84\u4e0a\u8f83\u5c0f\u7684\u4e00\u6761\u6bd4\u8f83\uff0c\u9009\u62e9\u5c0f\u7684\u90a3\u4e00\u6761\u5373\u53ef\n\n\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u5982\u679c1\u4e0en\u8fde\u901a\u5c31\u6c42\u51fa\u8def\u5f84\u4e0a\u6700\u5927\u503c\u4e0e\u5f53\u524d\u7684a\u503c\u76f8\u52a0\uff0c\u53d6\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\n\n\u4f46\u8fb9\u6743\u4e0d\u597d\u5904\u7406\uff0c\u4e8e\u662f\u6211\u4eec\u628aX\u2014>Y\u8def\u5f84\u62c6\u6210X->Z->Y,\u5c06\u8fb9\u6743\u653e\u5728Z\u7684\u70b9\u6743\u4e0a\u5373\u53ef\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef int sign;\ntypedef long long ll;\n#define For(i,a,b) for(register sign i=(sign)a;i<=(sign)b;++i)\n#define Fordown(i,a,b) for(register sign i=(sign)a;i>=(sign)b;--i)\nconst int N=5e4+5,M=1e5+5;\nbool cmax(sign &a,sign b){return (a<b)?a=b,1:0;}\nbool cmin(sign &a,sign b){return (a>b)?a=b,1:0;}\ntemplate<typename T>T read()\n{\n    T ans=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(isdigit(ch))ans=(ans<<3)+(ans<<1)+(ch-'0'),ch=getchar();\n    return ans*f;\n}\nvoid file()\n{\n    #ifndef ONLINE_JUDGE\n        freopen(\"LCT.in\",\"r\",stdin);\n        freopen(\"LCT.out\",\"w\",stdout);\n    #endif\n}\nint n,m;\nint ch[N+M][2],fa[N+M],rev[N+M],edge[N+M],bl[N+M];\nstruct node\n{\n    int u,v,a,b;\n    inline void init(){u=v=a=b=0;}\n    bool operator < (const node &x)const\n    {return a<x.a;}\n}e[M];\ninline void push_up(int x)\n{\n    if(e[bl[x]].b>=e[edge[ch[x][0]]].b&&e[bl[x]].b>=e[edge[ch[x][1]]].b)edge[x]=bl[x];\n    else if(e[edge[ch[x][0]]].b>=e[edge[ch[x][1]]].b)edge[x]=edge[ch[x][0]];\n    else edge[x]=edge[ch[x][1]];\n}\ninline void push_down(int x)\n{\n    if(rev[x])\n    {\n        rev[ch[x][0]]^=1;\n        rev[ch[x][1]]^=1;\n        swap(ch[x][0],ch[x][1]);\n        rev[x]=0;\n    }\n}\ninline bool isroot(int x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\ninline bool get(int x){return x==ch[fa[x]][1];}\ninline void rotate(int x)\n{\n    int old=fa[x],oldfa=fa[old],o=get(x);\n    if(!isroot(old))ch[oldfa][get(old)]=x;\n    fa[x]=oldfa;fa[ch[x][o^1]]=old;fa[old]=x;\n    ch[old][o]=ch[x][o^1];ch[x][o^1]=old;\n    push_up(old);push_up(x);\n}\nconst int inf=0x3f3f3f3f;\nint l[N+M],ans=inf;\ninline void splay(int x)\n{\n    l[0]=0;\n    int y=x;\n    while(1)\n    {\n        l[++l[0]]=y;\n        if(isroot(y))break;\n        y=fa[y];\n    }\n    Fordown(i,l[0],1)push_down(l[i]);\n    while(!isroot(x))\n    {\n        if(!isroot(fa[x]))rotate(get(x)^get(fa[x])?x:fa[x]);\n        rotate(x);\n    }\n}\ninline void access(int x)\n{\n    for(register int y=0;x;y=x,x=fa[x])\n    {\n        splay(x);ch[x][1]=y;push_up(x);\n    }\n}\ninline void makeroot(int x)\n{\n    access(x);splay(x);rev[x]^=1;\n}\ninline int find(int x)\n{\n    access(x);splay(x);\n    while(ch[x][0])x=ch[x][0];\n    return x;\n}\ninline void cut(int x,int y)\n{\n    makeroot(x);\n    access(y);splay(y);\n    if(ch[y][0]==x)ch[y][0]=fa[x]=0;\n}\ninline void link(int x,int y)\n{\n    makeroot(x);fa[x]=y;\n}\ninline void deal(int i)\n{\n    int x=e[i].u,y=e[i].v;\n    if(find(x)^find(y))link(x,i+n),link(i+n,y);\n    else\n    {\n        makeroot(x);\n        access(y);splay(y);\n        if(e[edge[y]].b>e[i].b)\n        {\n            int t=edge[y];\n            cut(t+n,e[t].u);\n            cut(t+n,e[t].v);\n            link(i+n,e[i].u);\n            link(i+n,e[i].v);\n        }\n    }\n}\ninline void input()\n{\n    n=read<int>();m=read<int>();\n    For(i,1,m)\n    {\n        e[i].u=read<int>();\n        e[i].v=read<int>();\n        e[i].a=read<int>();\n        e[i].b=read<int>();\n    }\n}\ninline int cal()\n{\n    if(find(1)^find(n))return inf;\n    makeroot(1);\n    access(n);splay(n);\n    return e[edge[n]].b;\n}\ninline void work()\n{\n    sort(e+1,e+m+1);\n    e[0].init();\n    For(i,1,m)edge[i+n]=bl[i+n]=i;\n    For(i,1,m)\n    {\n        deal(i);\n        while(e[i].a==e[i+1].a)++i,deal(i);\n        cmin(ans,cal()+e[i].a);\n    }\n    printf(\"%d\\n\",ans==inf?-1:ans);\n}\nint main()\n{\n    file();\n    input();\n    work();\n    return 0;\n}\n```",
        "postTime": 1512661138,
        "uid": 7029,
        "name": "dengyixuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2387 \u3010\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\u697c\u4e0bSPFA\u597d\uff0c\u4e0d\u8fc7\u6b63\u89e3\u662fLCT\uff1a\n\n\n\u52a8\u6001\u6811\u9898\u76ee\uff1a\u679a\u4e3eAi\uff0c\u8fd9\u6837\u5f53Ai\u56fa\u5b9a\u540e\uff0cBi\u7684\u6700\u5c0f\u751f\u6210\u6811\u5c31\u662f\u7b54\u6848\u3002\n\n\u4f46\u662f\u6bcf\u6b21\u6700\u5c0f\u751f\u6210\u6811\u663e\u7136TLE\uff0c\u6211\u4eec\u8003\u8651\u5f15\u5165\u52a8\u6001\u6811\u3002\n\n\n\u52a8\u6001\u6811\u652f\u6301\u52a0\u8fb9\u548c\u5220\u8fb9\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\uff0c\n\n\u7c7b\u4f3c\u4e8e\u6b21\u5c0f\u751f\u6210\u6811\u7684\u65b9\u5f0f\uff08\u4f46\u5e76\u4e0d\u4e00\u6837\uff09\uff1a\n\n\u7528\u5e76\u67e5\u96c6\uff08\u751a\u81f3\u76f4\u63a5LCT\u4e5f\u53ef\u4ee5\uff09\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\n\n\u5982\u679c\u4e24\u4e2a\u70b9\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u5f88\u597d\uff0c\u52a0\u8fb9\uff0c\u7136\u540e\u8fde\u901a\u4e86\uff1b\n\n\u5982\u679c\u4e24\u4e2a\u70b9\u8fde\u901a\uff0c\u90a3\u4e48\u6bd4\u8f83\u73af\uff08\u5047\u8bbe\u52a0\u5165\u8fd9\u6761\u8fb9\u6240\u4ea7\u751f\u7684\uff09\u4e0a\u6700\u5927\u8fb9\u548c\u5f53\u524d\u8fb9\uff1a\n\n\u5982\u679c\u5f53\u524d\u8fb9\u6bd4\u6700\u5927\u8fb9\u5c0f\uff0c\u90a3\u4e48\u663e\u7136\u53ef\u4ee5\u5f97\u5230\u66f4\u4f18\u7684\u7b54\u6848\uff0c\u52a0\u5165\u6b21\u8fb9\uff0c\u5220\u53bb\u6700\u5927\u8fb9\uff1b\n\n\u5426\u5219\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\n\n\n\u7edf\u8ba1\u7b54\u6848\u5982\u679c\u628a1\u8ba4\u4e3a\u662f\u6839\uff0c\u5c31\u662f\u7edf\u8ba1n\u5230\u6839\u8def\u5f84\u7684\u6743\u503c\u6700\u5927\u503c\uff0cLCT\u4e5f\u80fd\u505a\u3002\n\n\u4f46\u662f\u600e\u4e48\u7ef4\u62a4\u8fb9\u6743\u5462\uff1f\u628a\u8fb9\u62c6\u6210\u70b9\uff1aA---X----B\uff0c\u4ee4\u6240\u6709\u6811\u4e0a\u70b9\u6743\u503c\u4e3a0\uff0c\u62c6\u51fa\u6765\u7684M\u4e2aX\u70b9\u6743\u503c\u4e3a\u5bf9\u5e94\u8fb9\u6743\u3002\n\n\u6bcf\u6b21Cut\u4e0d\u8981\u5fd8\u4e86\u5207\u6389X\u7684\u4e24\u6761\u8fb9\u3002\n\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 300000\n#define mx(x) t[x].mx\n#define w(x) t[x].w\n#define lz(x) t[x].lz\n#define lc(x) t[x].c[0]\n#define rc(x) t[x].c[1]\n#define c(x,y) t[x].c[y]\n#define fa(x) t[x].fa\n#define rtf(x) t[x].rtf \n#define gc() getchar()\ninline int read(int ans = 0, int sgn = ' ', int ch = gc())\n{\n    for(;ch < '0' || ch > '9'; sgn=ch,ch=gc());\n    for(;ch >='0' && ch <='9'; (ans*=10)+=ch-'0',ch=gc());\n    return sgn-'-' ? ans : -ans;\n}\nstruct Node{int mx,w,lz,c[2],fa,rtf;}t[MAXN+5];\nstruct Edge{int u,v,a,b,k;Edge(int _u = 0, int _v = 0, int _a = 0, int _b = 0){u=_u,v=_v,a=_a,b=_b;}}e[MAXN+5];\ninline bool cmpa(Edge a, Edge b)\n{\n    return a.a < b.a;\n}\nint n, m, tot = 1, ans = 0x3f3f3f3f;\ninline int New(int v, int p)\n{\n    mx(tot) = tot, w(tot) = v, fa(tot) = p, rtf(tot) = lc(tot) = rc(tot) = lz(tot) = 0;\n    return tot++;\n}\nstruct Splay_Tree\n{\n    inline void Push(int p)\n    {\n        if(p)\n        {\n            int v = (w(mx(rc(p))) > w(mx(lc(p))) ? mx(rc(p)) : mx(lc(p)));\n            mx(p) = (w(v) > w(p) ? v : p);\n        }\n        return;\n    }\n    inline void Lazy(int p)\n    {\n        if(lz(p))\n            lz(lc(p)) ^= 1, lz(rc(p)) ^= 1, swap(lc(p),rc(p)), lz(p) = 0;\n        return;\n    }\n    inline void Rotate(int x, bool w)\n    {\n        int y = fa(x), z = fa(y), b = c(x,!w);\n        if(b)\n            fa(b) = y;\n        c(y,w) = b, c(x,!w) = y, fa(y) = x, fa(x) = z, rtf(x) = rtf(y), rtf(y) = 0, Push(y), Push(x);\n        if(z)\n            c(z,(y==rc(z))) = x;\n        return;\n    }\n    inline void Splay(int x, int goal, int y = 0, int z = 0, int xy = 0, int yz = 0)\n    {\n        for(y = fa(x), z = fa(y), Lazy(z), Lazy(y), Lazy(x); y != goal; Rotate(x,xy), y = fa(x), z = fa(y), Lazy(z), Lazy(y), Lazy(x))\n            if((xy=(x==rc(y))) == (yz=(y==rc(z))) && z != goal)\n                Rotate(y,yz);\n        return;\n    }\n};\nstruct LCT\n{\n    Splay_Tree T;\n    inline void Access(int p)\n    {\n        for(int w; T.Splay(p,0), w=rtf(p); rc(w) = p, fa(p) = w, rtf(p) = 0, T.Push(w))\n        { \n            if(rc(p))\n                fa(rc(p)) = 0, rtf(rc(p)) = p, rc(p) = 0, T.Push(p);\n            T.Splay(w,0);\n            if(rc(w))\n                fa(rc(w)) = 0, rtf(rc(w)) = w;\n        }\n        if(rc(p))\n            fa(rc(p)) = 0, rtf(rc(p)) = p, rc(p) = 0, T.Push(p);\n        return; \n    }\n    inline void Root(int p)\n    {\n        Access(p), lz(p) = 1;\n        return; \n    }\n    inline void Link(int v, int w)\n    {\n        Root(v), Access(w), lc(v) = w, fa(w) = v, rtf(w) = 0, T.Push(v);\n        return;\n    }\n    inline void Cut(int v)\n    {\n        Access(v), fa(lc(v)) = 0, lc(v) = 0, T.Push(v);\n        return;\n    }\n    inline int Query(int p)\n    {\n        Access(p);\n        return mx(p);\n    }\n}lct;\nstruct Find_Union\n{\n    int fa[MAXN+5];    \n    inline void Init(int len)\n    {\n        for(register int i = 0; i <= len; fa[i] = i, i++);\n        return;\n    }\n    inline int getf(int x)\n    {\n        if(x != fa[x])\n            fa[x] = getf(fa[x]);\n        return fa[x];\n    }\n    inline bool Union(int x, int y)\n    {\n        if((x=getf(x)) == (y=getf(y)))\n            return false;\n        fa[x] = y;\n        return true;\n    }\n    inline bool Connective(int x, int y)\n    {\n        return ((x=getf(x)) == (y=getf(y)));\n    }\n}s;\nint main()\n{\n    n = read(), m = read();\n    for(register int i = 1; i <= n; New(0,0), i++);\n    for(register int i = 1, u, v, a, b; i <= m; i++)\n        u = read(), v = read(), a = read(), b = read(), e[i] = Edge(u,v,a,b), e[i].k = New(b,0);\n    s.Init(n), sort(e+1,e+m+1,cmpa);\n    for(register int i = 1, w; i <= m; i++)\n    {\n        if(!s.Union(e[i].u,e[i].v))\n        {\n            lct.Root(e[i].v), w = lct.Query(e[i].u);\n            if(w(w) > w(e[i].k))\n                lct.Cut(w), lct.Root(e[i].u), lct.Cut(w), lct.Link(e[i].k,e[i].u), lct.Link(e[i].k,e[i].v);\n        }\n        else\n            lct.Link(e[i].k,e[i].u), lct.Link(e[i].k,e[i].v);\n        if(s.Connective(1,n))\n            lct.Root(1), ans = min(ans,e[i].a+w(lct.Query(n)));\n    }\n    printf(\"%d\",(ans-0x3f3f3f3f ? ans : -1));\n     return 0;\n}\n```",
        "postTime": 1486728664,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2387 \u3010\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\n\u849f\u84bb\u535a\u5ba2\uff1a[QAQ](https://www.cnblogs.com/GoldenPotato/p/10249306.html)\n\n## Solution\n\n\n------------\n\n\u8fd9\u9898\u7684\u601d\u60f3\u633a\u597d\u7684\u3002\n\n \n.\n\n\u5bf9\u4e8e\u8fd9\u79cd\u6700\u5927\u503c\u6700\u5c0f\u7c7b\u7684\u95ee\u9898\uff0c\u5f88\u81ea\u7136\u7684\u53ef\u4ee5\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\u5f88\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u9898\u662f\u53cc\u5173\u952e\u5b57\u6392\u5e8f\u7684\uff0c\u6211\u4eec\u600e\u4e48\u4e8c\u5206\u5462\uff1f\n\n\u5148\u4e8c\u5206a\u518d\u4e8c\u5206b\uff1f\u600e\u4e48\u770b\u90fd\u5e03\u661f\u554a\u3002\n\n\u90a3a+b\u4f5c\u4e3a\u5173\u952e\u5b57\u4e8c\u5206\uff1f\u4e5f\u5e03\u661f\u554a\u3002\n\n.\n \n\n\u90a3\u548b\u641e\u554a\uff1f\n\n\u4e0d\u5982\uff0c\u6211\u4eec\u6362\u4e2a\u60f3\u6cd5\uff0c**\u6211\u4eec\u628a\u5176\u4e2d\u4e00\u4e2a\u5173\u952e\u5b57\u679a\u4e3e\uff0c\u518d\u770b\u5728\u8fd9\u4e2a\u5173\u952e\u5b57\u7684\u9650\u5236\u4e0b\uff0c\u53e6\u5916\u4e00\u4e2a\u5c3d\u53ef\u80fd\u5c0f**\u3002\n\n\u4ed4\u7ec6\u60f3\u60f3\uff0c\u5e94\u8be5\u662f\u80fd\u8986\u76d6\u5230\u6240\u6709\u7684\u60c5\u51b5\u7684\u3002\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u8003\u8651\u8fd9\u6837\u505a\uff1a**\u6211\u4eec\u5148\u679a\u4e3ea\u7684\u5927\u5c0f\uff08\u5373\u6240\u9009\u7684\u8fb9\u7684a\u5fc5\u987b\u5c0f\u4e8e\u8fd9\u4e2a\u503c\uff09\uff0c\u5728\u6ee1\u8db3\u524d\u8005\u7684\u6761\u4ef6\u4e0b\uff0c\u4f7f\u5f97\u4ece\u51fa\u53d1\u5148\u5230\u7ec8\u70b9\u7684\u8def\u4e0a\u7684\u6700\u5927\u7684b\u5c3d\u53ef\u80fd\u5c0f\u3002**\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u662f\u4e0d\u662f\u5f88\u773c\u719f\uff1f\u6ca1\u9519\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\u8457\u540d\u7684\u539f\u9898\u8d27\u8f66\u8fd0\u8f93\uff1a**\u6211\u4eec\u8981\u4f7f\u5f97\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684b\u503c\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u8fd9\u6761\u8def\u5f84\u4e00\u5b9a\u662f\u5728\u4ee5b\u4e3a\u5173\u952e\u5b57\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684**\uff08\u5177\u4f53\u8bc1\u660e\u8bf7\u79fb\u6b65\u8d27\u8f66\u8fd0\u8f93\u90a3\u9053\u9898\u7684\u9898\u89e3\uff09\u3002\n\n .\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u73b0\u5728\u7814\u7a76\u7684\u95ee\u9898\u5c31\u53d8\u4e3a\u4e86\u5982\u4f55\u5feb\u901f\u7684\u7ef4\u62a4\u4e00\u4e2a\u53d8\u5316\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n**\u5feb\u901f\u7ef4\u62a4\u53d8\u5316\u7684\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4f7f\u7528LCT\u6765\u7ef4\u62a4\u3002**\n\n\u518d\u7ed3\u5408\u6211\u4eec\u4e4b\u524d\u7ef4\u62a4\u52a8\u6001\u6700\u5c0f\u751f\u5b58\u6811\u7684\u77e5\u8bc6\uff1a**\u6bcf\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u5b83\u5fc5\u5b9a\u4f1a\u8fde\u63a5\u4e24\u4e2a\u70b9\u800c\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u8981\u5224\u65ad\u8fd9\u6761\u8fb9\u662f\u5426\u4f1a\u5728\u65b0\u7684\u751f\u6210\u6811\u4e0a\uff0c\u53ea\u9700\u8981\u770b\u4e00\u4e0b\u73af\u4e0a\u7684\u6700\u5927\u7684\u8fb9\u6743\u548c\u8fd9\u6761\u8fb9\u7684\u5173\u7cfb\u5c31\u597d\u4e86\uff0c**\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u6bd4\u73af\u4e0a\u7684\u6700\u5927\u503c\u8fd8\u8981\u5c0f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u73af\u4e0a\u7684\u90a3\u6761\u6700\u5927\u7684\u8fb9\u65ad\u5f00\uff0c\u63a5\u4e0a\u6211\u4eec\u8fd9\u6761\u65b0\u7684\u8fb9\u3002\u5426\u5219\u7684\u8bdd\uff0c\u8fd9\u6761\u8fb9\u4e00\u5b9a\u4e0d\u4f1a\u6210\u4e3a\u65b0\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e00\u90e8\u5206\u3002\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u7684LCT\u53ea\u9700\u8981\u5728\u6bcf\u65b0\u52a0\u5165\u4e00\u6761\u8fb9\u65f6\uff0c\u68c0\u67e5\u5176\u8fde\u63a5\u7684\u4e24\u7aef\u662f\u5426\u662f\u8054\u901a\u7684\u3002\u5982\u679c\u4e0d\u8054\u901a\u7684\u8bdd\uff0c\u52a0\u5165\u8fd9\u6761\u8fb9\u4e00\u5b9a\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\u5982\u679c\u8054\u901a\u7684\u8bdd\uff0c\u5c31\u628a\u6240\u8fde\u4e24\u7aef\u7684\u94fesplit\u51fa\u6765\uff0c\u627e\u5230\u6700\u5927\u503c\uff0c\u6bd4\u8f83\u4e00\u4e0b\u5927\u5c0f\u5173\u7cfb\u5c31\u597d\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u7528LCT\u7ef4\u62a4\u8fb9\uff0c\u6211\u7684\u65b9\u6cd5\u662f**\u7528\u70b9\u6765\u4ee3\u66ff\u8fb9\uff0c\u5373\u4e00\u6761\u8fb9\u4ee5\u4e00\u4e2a\u6709\u8fde\u5411\u5b83\u7684\u4e24\u4e2a\u7aef\u70b9\u7684\u8fb9\u7684\u70b9\u6765\u66ff\u4ee3**\u3002\u5177\u4f53\u5199\u6cd5\u53ef\u4ee5\u53c2\u7167\u4e00\u4e0b\u4ee3\u7801\u3002\n\n \n.\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n*logn*logn)$\n\n\n------------\n## Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int M=100000+100;\nconst int N=50000+100;\nconst int T=N+M;\nstruct road\n{\n    int s,t,a,b;\n}e[M];\nint n,m;\nbool cmp(road x,road y)\n{\n    return x.a<y.a;\n}\nstruct LCT\n{\n    int son[T][2],fa[T],lazy[T],MAX[T],num[T],mstack[T],top;\n    inline void Update(int x)\n    {\n        MAX[x]=0;\n        if(num[MAX[son[x][0]]]>=num[x] and num[MAX[son[x][0]]]>=num[MAX[son[x][1]]])\n            MAX[x]=MAX[son[x][0]];\n        if(num[MAX[son[x][1]]]>=num[x] and num[MAX[son[x][1]]]>=num[MAX[son[x][0]]])\n            MAX[x]=MAX[son[x][1]];\n        if(num[x]>=num[MAX[son[x][0]]] and num[x]>=num[MAX[son[x][1]]])\n            MAX[x]=x;\n    }\n    inline void Mirror(int x)\n    {\n        lazy[x]=!lazy[x],swap(son[x][0],son[x][1]);\n    }\n    inline void PushDown(int x)\n    {\n        if(lazy[x]==0) return;\n        lazy[x]=0;\n        Mirror(son[x][0]),Mirror(son[x][1]);\n    }\n    inline bool IsRoot(int x)\n    {\n        return x!=son[fa[x]][0] and x!=son[fa[x]][1];\n    }\n    inline void Rotate(int x,int type)\n    {\n        int y=fa[x],z=fa[y];\n        if(IsRoot(y)==false)    son[z][y==son[z][1]]=x;\n        fa[x]=z;\n        son[y][!type]=son[x][type],fa[son[x][type]]=y;\n        son[x][type]=y,fa[y]=x;\n        Update(y),Update(x);\n    }\n    inline void Splay(int x)\n    {\n        mstack[top=1]=x;\n        for(int i=x;i!=0;i=fa[i])\n            mstack[++top]=fa[i];\n        for(int i=top;i>=1;i--)\n            PushDown(mstack[i]);\n        while(IsRoot(x)==false)\n        {\n            if(x==son[fa[x]][fa[x]==son[fa[fa[x]]][1]] and IsRoot(fa[x])==false)\n                Rotate(fa[x],x==son[fa[x]][0]),\n                Rotate(x,x==son[fa[x]][0]);\n            else\n                Rotate(x,x==son[fa[x]][0]);\n        }\n    }\n    void Access(int x)\n    {\n        for(int t=0;x!=0;t=x,x=fa[x])\n            Splay(x),son[x][1]=t,fa[t]=x,Update(x);\n    }\n    inline void MakeRoot(int x)\n    {\n        Access(x),Splay(x);\n        Mirror(x);\n    }\n    inline int FindRoot(int x)\n    {\n        Access(x),Splay(x);\n        while(son[x][0]!=0)\n            PushDown(x),x=son[x][0];\n        Splay(x);\n        return x;\n    }\n    inline void Link(int x,int y)//x->y\n    {\n        if(FindRoot(x)==FindRoot(y)) return;\n        MakeRoot(x);\n        fa[x]=y;\n    }\n    inline void Split(int x,int y)//root:y\n    {\n        MakeRoot(x);\n        Access(y),Splay(y);\n    }\n    inline void Cut(int x,int y)\n    {\n        Split(x,y);\n        if(x==son[y][0] and fa[x]==y)\n        {\n            son[y][0]=fa[x]=0;\n            Update(y);\n        }    \n    }\n    inline int Query(int x,int y)\n    {\n        MakeRoot(x);\n        Access(y),Splay(y);\n        return MAX[y];\n    }\n    inline void AddLine(int x)\n    {\n        if(e[x].s==e[x].t) return;//\u81ea\u73af\n        num[n+x]=e[x].b,MAX[n+x]=n+x;\n        if(FindRoot(e[x].s)!=FindRoot(e[x].t))\n        {\n            Link(n+x,e[x].s),Link(n+x,e[x].t);\n            return ;\n        }\n        int t=Query(e[x].s,e[x].t);\n        if(num[n+x]<num[t])\n        {\n            Cut(e[t-n].s,t);\n            Cut(e[t-n].t,t);\n            Link(e[x].s,n+x);\n            Link(e[x].t,n+x);\n        }\n    }\n    inline int Query2()\n    {\n        if(FindRoot(n)!=FindRoot(1)) return 0x3f3f3f3f;\n        return num[Query(1,n)];\n    }\n}lct;\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n        e[i].s=read(),e[i].t=read(),e[i].a=read(),e[i].b=read();\n    \n    sort(e+1,e+1+m,cmp);\n    int ans=0x3f3f3f3f;\n    for(int i=1;i<=m;i++)\n    {\n        lct.AddLine(i);\n        ans=min(ans,e[i].a+lct.Query2());\n    }\n    \n    if(ans==0x3f3f3f3f)\n        printf(\"-1\"); \n    else\n        printf(\"%d\",ans);\n    return 0;\n}\n ```",
        "postTime": 1547095494,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "\n2019.01.05\n\n---\n\n\u524d\u5929\u5199\u4e86\u4e00\u4e0b\u5348+\u665a\u4e0a\u8fd0\u8f93\u8ba1\u5212\u7ed3\u679c\u5230\u6700\u540e\u8fd8\u662f95\uff0c\u6700\u540e\u6362\u79cd\u5199\u6cd5\u624dA\u6389\n\u7136\u540e\u6628\u5929\u4e0b\u5348\u5230\u4eca\u5929\u4e0a\u5348\u4e00\u76f4\u5728\u809d**\u9b54\u6cd5\u68ee\u6797**\uff0c\u771f\u7684~~\u73b0\u5728\u770b\u5230LCT\u5c31\u5934\u5927~~\n\u8fd9\u9053\u4e00\u5e74\u524d\u6211\u89c9\u5f97\u8fd9\u8f88\u5b50\u90fd\u4e0d\u53ef\u80fd\u5199\u7684\u9898\u7ec8\u4e8e\u88ab\u5e72\u6389\u4e86|>_<|\n\n- \u6211\u7684\u505a\u6cd5\u662f\u6309\u7167a\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u4e4b\u540e\u6309\u987a\u5e8f\u52a0\u8fb9\u3002\n\u6bcf\u6b21\u6211\u4eec\u5224\u65ad\u8fb9w\u7684\u7aef\u70b9(x,y)\u662f\u5426\u8fde\u901a\n1.\u5982\u679c\u4e0d\u8fde\u901a\uff0c\u76f4\u63a5\u8fde\u63a5\uff0c\n2.\u5426\u5219\u5728x->y\u7684\u8def\u5f84\u4e0a\u627e\u5230**b\u503c\u6700\u5927**\u7684\u8fb9f\uff0c\n\u6b64\u65f6\u5224\u65ad\uff0c\n**A.** f.b\u5c0f\u4e8ew.b\uff0c\u8df3\u8fc7\n**B.** f.b\u5927\u4e8ew.b\uff0c\u628af\u5220\u53bb\uff0c\u5728\u751f\u6210\u6811\u4e2d\u52a0\u5165w\u3002\n\n- \u4e0a\u8ff0\u64cd\u4f5c\u8fdb\u884c\u5b8c\u540e**\u90fd\u8981\u5224\u65ad** 1\uff0cn\u662f\u5426\u8fde\u901a\u3002\u5982\u679c\u8fde\u901a\u6211\u4eec\u5c31\u66f4\u65b0ans\n\u5176\u4e2dans=min(ans,a+val[sa(1,n)])\u3002\n(a\u4e3aw.a\uff0cval[sa(1,n)]\u4e3a1\u5230n\u8def\u5f84\u4e0a\u6700\u5927\u7684b\u503c)\n\n- \u8fd8\u6709\u4e00\u70b9\u5c31\u662f\u8fb9\u6743\u600e\u4e48\u529e\uff1fLCT\u4e0d\u597d\u5904\u7406\u8fb9\u4fe1\u606f\u554a\uff01\n\u6240\u4ee5\u6211\u4eec\u628a\u8fb9\u53d8\u6210\u70b9\uff0c\u4f8b\u5982\u8fb9w\u7684\u7aef\u70b9\u4e3ax,y\uff0c\u52a0\u8fb9\u65f6\u6211\u4eec\u5c31\u628aw\u7684\u7f16\u53f7\u53d8\u4e3aw+n\uff0cval[w+n]=w.b\u3002\u7136\u540e**Link(x,w+n),Link(y,w+n);Cut\u540c\u7406**\n\u7136\u540e\u6211\u4eec**\u5f00\u4e00\u4e2a\u6570\u7ec4id\u8bb0\u5f55\u5b50\u6811\u4e2d\u6700\u5927val\u503c**\uff0c\u6bcf\u6b21pushup\u66f4\u65b0\u5373\u53ef\n\n\u7ed3\u5408[Bei-S's \u535a\u5ba2](https://www.zybuluo.com/Bei-S/note/1383114)\u98df\u7528\u66f4\u4f73\u54e6~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=5e5+20;\nconst int INF=0x7ffffff;\n\nint head[N],cnt,fa[N],p[N],son[N][2],id[N],mx[N],rev[N],val[N],siz[N],n,m,ans=INF;\n\nstruct ii{\n    int x,y,a,b;\n}e[N*2];\n\ninline bool isroot(int x){return son[fa[x]][0]!=x&&son[fa[x]][1]!=x;}\n\ninline void pushdown(int x){\n    if(!rev[x]) return ;\n    rev[x]=0;rev[son[x][0]]^=1;rev[son[x][1]]^=1;\n    swap(son[x][0],son[x][1]);\n}\n\ninline void pushup(int x){//\u66f4\u65b0\u6700\u5927\u8fb9\u7f16\u53f7 \n    if(val[x]>val[id[son[x][0]]]&&val[x]>val[id[son[x][1]]]) id[x]=x;//\u5982\u679c\u5f53\u524d\u70b9(\u8fb9\u5316\u7684\u70b9)\u6bd4\u513f\u5b50\u7684\u8fb9\u6743\u90fd\u5927\uff0c\u76f4\u63a5\u8d4b\u4e3ax \n    else id[x]=val[id[son[x][0]]]>val[id[son[x][1]]]?id[son[x][0]]:id[son[x][1]];//\u5426\u5219\u8c01\u5927\u8d4b\u8c01\u7684 \n}\n\ninline void rotate(int x){\n    pushdown(fa[x]);pushdown(x);\n    int y=fa[x],z=fa[y],t=son[y][0]==x;\n    if(!isroot(y)) son[z][y==son[z][1]]=x;\n    fa[x]=z;\n    son[y][!t]=son[x][t];fa[son[x][t]]=y;\n    son[x][t]=y;fa[y]=x;\n    pushup(y);pushup(x);\n}\n\ninline void splay(int x){\n    pushdown(x);\n    while(!isroot(x)){\n        int y=fa[x],z=fa[y];\n        if(!isroot(y)) (son[y][0]==x)^(son[z][0]==y)?rotate(x):rotate(y);\n        rotate(x);\n    }\n}\n\n\ninline void Access(int x){\n    for(int y=0;x;y=x,x=fa[x]){\n        splay(x);\n        son[x][1]=y;\n        pushup(x);\n    }\n}\n\ninline void Makeroot(int x){\n    Access(x);\n    splay(x);\n    rev[x]^=1;\n}\n\ninline void Split(int x,int y){\n    Makeroot(x);\n    Access(y);\n    splay(x);\n}\n\ninline void Link(int x,int y){\n    Makeroot(x);\n    fa[x]=y;\n}\n\ninline void Cut(int x,int y){\n    Split(x,y);\n    splay(x);\n    fa[y]=son[x][1]=0;\n}\n\ninline int Find(int x){\n    Access(x);\n    splay(x);\n    while(son[x][0]) x=son[x][0];\n    return x;\n}\n\ninline int sa(int x,int y){//\u67e5\u8be2x\uff0cy\u8def\u5f84\u4e2db\u503c\u6700\u5927\u7684\u8fb9\u7684\u7f16\u53f7 \n    Makeroot(x);\n    Access(y);\n    splay(y);//\u628ax\uff0cy\u653e\u5165\u4e00\u9897splay\u4e2d\uff0c\u628ay splay\u5230\u6839\uff0c\u66f4\u65b0\u540eid[y]\u5373\u4e3a\u6240\u6c42 \n    return id[y];\n}\n\nbool cmp(ii l,ii r) {return l.a<r.a;}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++) scanf(\"%d%d%d%d\",&e[i].x,&e[i].y,&e[i].a,&e[i].b);\n    sort(e+1,e+1+m,cmp);//\u6309\u7167a\u6392\u5e8f \n    for(int i=1;i<=m;i++){\n        int u=e[i].x,v=e[i].y,a=e[i].a,b=e[i].b;\n        if(Find(u)==Find(v)){//\u5982\u679c\u8fb9\u7684\u7aef\u70b9\u5df2\u7ecf\u8fde\u901a\uff0c\u4ed6\u4eec\u4e4b\u95f4\u6700\u5927b\u503c \n            int f=sa(u,v);//f\u4e3aU,V\u95f4\u6700\u5927(b\u503c)\u8fb9\u7684\u7f16\u53f7 \n            if(val[f]<=b) {//\u5982\u679cval[f]<=b \u76f4\u63a5\u67e5\u8be2\u5373\u53ef \n                if(Find(1)==Find(n))\n                    ans=min(ans,a+val[sa(1,n)]);\n                continue;\n            }\n            Cut(f,e[f-n].x);Cut(f,e[f-n].y);//\u5426\u5219\u6211\u4eec\u9700\u8981\u5220\u53bb\u8fd9\u6761\u8fb9\uff0c\u6ce8\u610f\u5220\u53bb\u540e\u8bb0\u5f97\u8fde\u8fb9\uff0c\u6211\u5199\u5728\u4e0b\u9762\u4e86 \n        }\n        val[i+n]=b;//\u5982\u679c \u7aef\u70b9\u4e0d\u8fde\u901a \u6216\u8005 \u65b0\u52a0\u5165\u8fb9\u7684b\u503c\u6bd4\u8fb9\u7684\u7aef\u70b9\u95f4\u6700\u5927\u7684b\u503c\u5c0f \uff0c\u6211\u4eec\u90fd\u8981\u8fde\u4e0a\u8fd9\u6761\u8fb9 \n        id[i+n]=i+n;//\u628a\u8fb9\u5316\u70b9\uff0cval\u8bb0\u4e3ab\uff0cid\u8bb0\u4f5ci+n \n        Link(u,i+n);Link(v,i+n);\n        if(Find(1)==Find(n))//\u66f4\u65b0\u7b54\u6848 \n            ans=min(ans,a+val[sa(1,n)]);\n    }\n    cerr<<ans;\n    if(ans==INF) printf(\"-1\");\n    else printf(\"%d\",ans);\n}\n```\n\n\n\n\n\n\n",
        "postTime": 1546649807,
        "uid": 60895,
        "name": "\u6e29\u6800\u69ff",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    },
    {
        "content": "#### \u6d41\u7a0b\n\n\u628a\u8fb9\u8bfb\u5165\u6309\u7167A\u4e3a\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5e76\u6bcf\u6b21\u52a0\u8fb9\u7ef4\u62a4\u5173\u4e8eB\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7528\u5f53\u524d\u7684A\u548c1\u5230n\u6700\u5c0f\u7684B\u66f4\u65b0\u6700\u5c0f\u7b54\u6848\n\n#### \u6b63\u786e\u6027\n\n\u5982\u679c\u5f53\u524d\u52a0\u7684\u8fb9\u57281\u5230n\u7684\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48\u663e\u7136\u6b63\u786e\uff1b\u5f53\u524d\u7684\u8fb9\u4e0d\u5728\u8def\u5f84\u4e0a\u5219\u663e\u7136\u5728\u4e4b\u524d\u5df2\u7ecf\u7b97\u8fc7\u4e86\u8fd9\u6761\u8def\u5f84\u7684\u7b54\u6848\n\n#### \u542f\u53d1\n\nLCT\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u7684\u597d\u9898\n\n#### \u6ce8\u610f\n\n\u5316\u8fb9\u4e3a\u70b9\uff0c\u90a3\u4e48\u70b9\u7684splay\u7f16\u53f7\u548c\u8fb9\u7684\u7f16\u53f7\u8981\u8054\u7cfb\u6e05\u695a\n\n#### PS\n\n\u8fd9\u7bc7\u9898\u89e3\u53ea\u662f\u628a\u81ea\u5df1\u770b\u9898\u89e3\u65f6\u4e0d\u7406\u89e3\u7684\u5730\u65b9\u68b3\u7406\u4e00\u4e0b\uff0c\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\n\n\u5982\u679c\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u70b9\u4e2a\u8d5e\u5427\n",
        "postTime": 1517145620,
        "uid": 43628,
        "name": "xzyxzy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2387 \u3010[NOI2014]\u9b54\u6cd5\u68ee\u6797\u3011"
    }
]