[
    {
        "content": "\u9898\u76ee\u610f\u601d\u6bd4\u8f83\u6e05\u695a\uff0c\u4e0d\u89e3\u91ca\u3002\n\n\u601d\u8def\uff1a\n\n\u8fd9\u9898\u53ef\u4ee5\u7528DFS\u5e8f\u7ebf\u6bb5\u6811\u505a\u3002DFS\u5e8f\u7ebf\u6bb5\u6811\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u64cd\u4f5c\u4e4b\u524dDFS\u628a\u8fd9\u4e2a\u6811\u8dd1\u4e00\u904d\uff0c\u76f8\u5f53\u4e8eDFS\u904d\u5386\u4e00\u904d\uff0c\u628a\u6bcf\u4e2a\u70b9\u4ee5\u904d\u5386\u7684\u987a\u5e8f\u6807\u53f7\u3002\u6839\u636e\u9898\u76ee\u6761\u4ef6\uff0c\u5c0fZ \u521d\u59cb\u65f6\u5728 $x$ \u8282\u70b9\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u60f3\u4e00\u68f5\u6811\u7684\u6839\u4e3a $x$\uff0c\u82e5\u6211\u4eecDFS\u904d\u5386\u8fd9\u68f5\u6811\uff0c\u6240\u6709\u4e0e\u5c0fZ\u7684\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $k$ \u7684 Youyou \u90fd\u4f1a\u88ab\u6d88\u706d\uff0c\u6df1\u5ea6\u5927\u4e8e\u7684\u5219\u4e0d\u88ab\u6d88\u706d\u3002\u9700\u8981\u6d88\u706d\u5176\u4ed6\u7684 Youyou\uff0c\u4ed6\u5fc5\u987b\u8003\u8651\u5f80\u54ea\u91cc\u8d70\uff0c\u5c0fZ\u8fd9\u4e2a\u70b9\u6709\u53ef\u80fd\u6709\u82e5\u5e72\u4e2a\u5b69\u5b50\uff0c\u5f80\u54ea\u4e2a\u5b69\u5b50\u8d70\u5462\uff1f\u6211\u4eec\u901a\u8fc7\u8ddd\u79bb\u89c2\u5bdf\u53ef\u4ee5\u5f97\u5230\u8981\u5f80\u5b50\u6811\u6700\u6df1\u7684\u90a3\u4e2a\u70b9\u8d70\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u9009\u62e9\u65b9\u6cd5\u5176\u5b9e\u662f\u7528\u8d2a\u5fc3\u7684\u3002\n\n\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1uqcxu3l.png)\n\n\u6211\u4eec\u7ed9\u6bcf\u4e2a\u6709 Youyou \u70b9\u4e00\u4e2a\u6743\u503c\uff0c\u8868\u793a\u79bb\u6839\u591a\u8fdc\uff0c\u65b9\u4fbf\u67e5\u8be2\u3002\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\uff0c\u5c31\u77e5\u9053\u5f80\u54ea\u91cc\u8d70\u4e86\u3002\n\n\u8003\u8651\u8fbe\u5230\u65b0\u70b9\u4e4b\u540e\u7684\u64cd\u4f5c\uff0c\u4e0d\u80fd\u518d\u4ee5\u65b0\u7684\u8282\u70b9\u4e3a\u6839\u904d\u5386\u4e00\u904d\uff0c\u5426\u5219\u590d\u6742\u5ea6\u4f1a\u5f88\u9ad8\u3002\u8981\u4f7f\u7528\u6362\u6839\u7684\u65b9\u6cd5\u4f18\u5316\u590d\u6742\u5ea6\u3002\n\n\u8bbe\u65b0\u70b9\u4e3a $new$\uff0c\u5f53\u8981\u786e\u5b9a $now$ \u5f80\u54ea\u8fb9\u8d70\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u770b\u4ed6\u7684\u5b50\u6811\uff0c\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u5f80\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\u65b9\u5411\u8d70\u3002\u4ee5\u4f60\u7236\u4eb2\u4e3a\u6839\u7684\u5b50\u6811\u600e\u4e48\u529e\uff1f\u82e5\u6574\u4e2a\u533a\u95f4\u4e3a $[1,n]$\uff0c\u8981\u6c42\u51fa\u4e86 $new$ \u4e3a\u6839\u7684\u5b50\u6811\u5176\u4ed6\u7684\u90e8\u5206\u7684\u7b54\u6848\uff0c\u5c31\u662f\u8981\u628a\u4ee5 $new$ \u4e3a\u6839\u7684\u5b50\u6811\u9664\u53bb\u3002\u6240\u4ee5\u53ea\u9700\u8981\u8ba1\u7b97\u4e24\u4e2a\u90e8\u5206\u7b54\u6848\uff0c\u5206\u522b\u662f $[1,pre[new]-1]$ \u548c $[pre[new]+siz[new],n]$\u3002\u8fd9\u4e2a\u53ef\u4ee5\u7528\u4e24\u6b21\u7ebf\u6bb5\u6811\u67e5\u8be2\u7684\u5408\u5e76\u6765\u6c42\u3002\n\n\u505a\u4e00\u4e2a\u601d\u8def\u7684\u603b\u7ed3\uff1a\n\n\u5148\u4ee5 $x$ \u4e3a\u6839DFS\u904d\u5386\uff0c\u9884\u5904\u7406\u51fa $pre$ \u6570\u7ec4\u3002\u642d\u5efaDFS\u5e8f\u5217\uff0c\u5e76\u4e14\u5efa\u7ebf\u6bb5\u6811\u3002\n\n\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u67e5 $x$ \u70b9\u6bcf\u4e2a\u5b69\u5b50\u5b50\u6811\u7684\u6700\u5927\u503c\uff0c\u786e\u5b9a\u5f80\u54ea\u91cc\u8d70\u3002\u5f80\u90a3\u4e2a\u70b9\u8d70\u4e00\u6b65\uff0c\u628a\u8fd9\u4e2a\u70b9\u4e3a\u6839\u5b50\u6811\u7684\u6240\u6709\u70b9\u7684\u6743$-2$\u3002\u53ea\u8981\u65f6\u95f4\u4e0d\u4e3a\u96f6\uff0c\u91cd\u590d\u3002\u7edf\u8ba1\u56de\u5408\u6570\uff0c\u6700\u540e\u8f93\u51fa\u3002\n\n\u6ce8\u610f\u4e8b\u9879\uff1a\n\n- \u524d\u9879\u661fpool\u6570\u7ec4\u5f002\u500d\n\n- \u7ebf\u6bb5\u6811\u5f004\u500d\n\n\u4ee3\u7801\uff1a\n\n```\n/* by JS */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 4 * 1e5 + 5;\n\n#define lc p << 1\n\n#define rc p << 1 | 1\n\nint n, m, k, x, Count, nn, cnt, head[MAXN], pre[MAXN], dep[MAXN], fa[MAXN], siz[MAXN], id[MAXN], kc[MAXN], Max[\n        4 * MAXN], Tag[4 * MAXN], maxnum, pos;\n\nbool hasyy[MAXN], flag;\n\nstruct Node {\n    int v, nxt;\n} pool[2 * MAXN];\n\ninline int init(int u, int father) {\n    cnt++;\n    pre[u] = cnt, dep[u] = dep[father] + 1, fa[u] = father, siz[u] = 1, id[cnt] = u;\n    if (hasyy[u]) kc[u] = dep[u];\n    for (int i = head[u]; i > 0; i = pool[i].nxt) {\n        if (pool[i].v == father) continue;\n        siz[u] += init(pool[i].v, u);\n    }\n    return siz[u];\n}\n\nvoid add(int u, int v) {\n    nn++;\n    pool[nn].v = v;\n    pool[nn].nxt = head[u];\n    head[u] = nn;\n}\n\nstruct Segment_Tree {\n    static void push_up(int p) {\n        Max[p] = max(Max[lc], Max[rc]);\n    }\n\n    inline void build_tree(int p, int l, int r) {\n        if (l == r) {\n            Max[p] = kc[id[l]];\n            return;\n        }\n        int mid = (l + r) / 2;\n        build_tree(lc, l, mid);\n        build_tree(rc, mid + 1, r);\n        push_up(p);\n    }\n\n    static void move_tag(int p, int tag) {\n        int maxn = Max[p];\n        Max[p] = max(0, maxn + tag);\n        Tag[p] += tag;\n    }\n\n    static void push_down(int p) {\n        if (Tag[p]) {\n            move_tag(lc, Tag[p]);\n            move_tag(rc, Tag[p]);\n            Tag[p] = 0;\n        }\n    }\n\n    inline int query_max(int p, int l, int r, int ql, int qr) {\n        if (ql <= l && r <= qr) return Max[p];\n        push_down(p);\n        int res = 0;\n        int mid = (l + r) / 2;\n        if (ql <= mid) {\n            res = max(res, query_max(lc, l, mid, ql, qr));\n        }\n        if (mid < qr) {\n            res = max(res, query_max(rc, mid + 1, r, ql, qr));\n        }\n        return res;\n    }\n\n    inline int dfs_query(int cur) {\n        if (cur != fa[x]) {\n            int ql = pre[cur];\n            int qr = pre[cur] + siz[cur] - 1;\n            return query_max(1, 1, n, ql, qr);\n        }\n        int res = 0;\n        if (pre[x] - 1 > 0) {\n            int qr = pre[x] - 1;\n            res = query_max(1, 1, n, 1, qr);\n        }\n        if (pre[x] + siz[x] <= n) {\n            int ql = pre[x] + siz[x];\n            res = max(res, query_max(1, 1, n, ql, n));\n        }\n        return res;\n    }\n\n    inline void update(int p, int l, int r, int ql, int qr, int q) {\n        if (ql <= l && r <= qr) {\n            Max[p] = max(Max[p] + q, 0);\n            Tag[p] += q;\n            return;\n        }\n        push_down(p);\n        int mid = (l + r) / 2;\n        if (ql <= mid) {\n            update(lc, l, mid, ql, qr, q);\n        }\n        if (mid < qr) {\n            update(rc, mid + 1, r, ql, qr, q);\n        }\n        push_up(p);\n    }\n\n    inline void dfs_update(int cur, int q) {\n        if (cur != fa[x]) {\n            int ql = pre[cur];\n            int qr = pre[cur] + siz[cur] - 1;\n            update(1, 1, n, ql, qr, q);\n        } else {\n            if (pre[x] - 1 > 0) {\n                int qr = pre[x] - 1;\n                update(1, 1, n, 1, qr, q);\n            }\n            if (pre[x] + siz[x] <= n) {\n                int ql = pre[x] + siz[x];\n                update(1, 1, n, ql, n, q);\n            }\n        }\n    }\n} segtree;\n\ninline void solve() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    cin >> n;\n    for (int i = 0, u, v; i < n - 1; ++i) {\n        cin >> u >> v;\n        add(u, v);\n        add(v, u);\n    }\n    cin >> m;\n    while (m--) {\n        int a;\n        cin >> a;\n        hasyy[a] = true;\n    }\n    cin >> k >> x;\n    dep[0] = -1;\n    init(x, 0);\n    segtree.build_tree(1, 1, n);\n    while (1) {\n        pos = maxnum = flag = 0;\n        ++Count;\n        for (int i = head[x]; i > 0; i = pool[i].nxt) {\n            if (!segtree.dfs_query(pool[i].v)) continue;\n            if (maxnum < segtree.dfs_query(pool[i].v)) {\n                maxnum = max(maxnum, segtree.dfs_query(pool[i].v));\n                pos = pool[i].v;\n                flag = false;\n            } else if (maxnum == segtree.dfs_query(pool[i].v)) flag = true;\n        }\n        if (maxnum <= k) break;\n        if (flag) {\n            segtree.update(1, 1, n, 1, n, -1);\n            continue;\n        }\n        segtree.dfs_update(pos, -2), x = pos;\n    }\n    cout << Count << '\\n';\n}\n\nint main() {\n    solve();\n    return 0;\n}\n\n```\n\n",
        "postTime": 1606047925,
        "uid": 298325,
        "name": "Marshadow",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6584 \u3010\u91cd\u62f3\u51fa\u51fb\u3011"
    },
    {
        "content": "\u505a\u4e3a\u51fa\u9898\u4eba\u6765\u4e00\u53d1\uff08\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u654c\u4eba\u6709\u5f88\u591a\u662f\u91cd\u590d\u7684\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u53ea\u7559\u4e00\u4e2a\u654c\u4eba\u5373\u53ef\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\u7684\u60f3\uff1a\u8d70\u5230\u4e00\u4e2a\u4f4d\u7f6e\u4ee5\u540e\uff0c\u7b49\u7740\u522b\u4eba\u6765\u9001\u6b7b\u3002\n\n\u5982\u4f55\u6c42\u51fa\u8fd9\u4e2a\u4f4d\u7f6e\uff1f\n\n\u5c06\u8fd9\u68f5\u6811\uff0c\u4ee5\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\uff0c\u904d\u5386\u4e00\u904d\u3002\n\n\u7136\u540e\u6211\u4eec\u9700\u8981\u622a\u53d6\u51fa\u201c\u6709\u7528\u201d\u7684\u4e00\u5757\u3002\uff08\u5b9a\u4e49\u201c\u6709\u7528\u201d\u7684\u4e00\u5757\u4e3a\u4f1a\u88ab\u81f3\u5c11\u4e00\u4e2a\u4eba\u8d70\u8fc7\u7684\u8def\u5f84\uff09\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u81ea\u5df1\u7684\u521d\u59cb\u4f4d\u7f6e\u4e3a\u6839\uff0c\u904d\u5386\u4e00\u8fb9\u8fd9\u68f5\u8001\u6811\u3002\n\n\u4ece\u6240\u6709\u6709\u7528\u7684\u70b9\u51fa\u53d1\uff0c\u5f80\u4e0a\u904d\u5386\uff0c\u9014\u4e2d\u6240\u6709\u7684\u70b9\u90fd\u53d8\u6210\u6709\u7528\u7684\u70b9\u3002\n\n\u7136\u540e\u5220\u6389\u6240\u6709\u6ca1\u6709\u7528\u7684\u70b9\u5373\u53ef\u3002\n\n\u7136\u540e\uff0c\u5728\u8fd9\u68f5\u65b0\u7684\u6811\u4e0a\uff0c\u627e\u5230\u6700\u957f\u94fe\u3002\n\n\u8fd9\u4e2a\u201c\u6700\u4f18\u70b9\u201d\u4e00\u5b9a\u5c31\u662f\u8fd9\u6761\u6700\u957f\u94fe\u7684\u4e2d\u70b9\u4e86\u3002\uff08\u5b83\u5230\u6240\u6709\u7684\u53f6\u5b50\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002\uff09\n\n\u7136\u540e\u4e8c\u5206\u7b54\u6848\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e8c\u5206\u5230\u7684\u503c\uff0c\u5faa\u73af\u6240\u6709\u6709\u4eba\u7ad9\u7740\u7684\u70b9\uff0c\u5224\u65ad\u5b83\u7684mid\u88ab\u7956\u5148\u4e0e\u4f60\u7684\u521d\u59cb\u4f4d\u7f6e\u7684mid\u8f88\u7956\u5148\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426$\\le k$\u3002\n\n\u8fd9\u4e2a\u8ddd\u79bb\u4e5f\u53ef\u4ee5\u7528LCA\u6c42\u51fa:```deep[x]+deep[y]-deep[LCA(x,y)]*2```\n\n\u590d\u6742\u5ea6\uff1a$O(n \\times (log n)^2)$\n\n---\n\n\u4f18\u5316\uff1a\u5bf9\u4e8e\u6700\u540e\u4e00\u6b65\uff0c\u6bcf\u4e00\u6b21\u4e8c\u5206\u53ea\u9700\u8981\u679a\u4e3e3\u4e2a\u70b9(\u81ea\u5df1\uff0c\u6700\u957f\u94fe\u7684\u4e24\u7aef)\u5373\u53ef\u3002\n\n\u5e76\u4e14\u5c06\u4e8c\u5206\u53bb\u6389\uff0c\u76f4\u63a5\u66b4\u529b\u5373\u53ef\u3002\uff08\u5220\u4e86\u90a3\u4e2a\u9884\u5904\u7406\u7684$nlogn$\uff09\n\n\u590d\u6742\u5ea6\uff1a$O(n)$\n\n\n---\n\n## \u8d2a\u5fc3 \u8bc1\u660e\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u8d2a\u5fc3\u662f\u6b63\u786e\u7684\uff1f\n\n\u4f60\u8981\u8d70\u7684\u8bdd\uff0c\u5fc5\u5b9a\u5411\u7740\u654c\u4eba\u8d70\u3002\u800c\u4e14\u662f\u6700\u8fdc\u7684\uff0c\u4e0d\u7136\u6ca1\u6709\u610f\u4e49\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u51fa\u4e24\u4e2a\u654c\u4eba($x$\u548c$y$)\uff0c\u4f7f\u5f97\u4ed6\u4eec\u548c\u81ea\u5df1\u7ec4\u6210\u4e00\u4e2a\u4e09\u4eba\u7ec4\uff0c\u5e76\u4e14x\u5230y\u7684\u6700\u77ed\u8def\u5f84\u7ecf\u8fc7\u4f60\uff0c\u4e14\u4f60\u4eec\u4e09\u4e2a\u4eba\u4e4b\u95f4\u4e92\u76f8\u5230\u8fbe\u7684\u6700\u5c0f\u8ddd\u79bb\u6700\u5927\u3002\n\n\u7136\u540e\uff0c\u5047\u8bbe\u4f60\u548c$x$\u7684\u8ddd\u79bb\u4e3a$a$,\u4f60\u548c$y$\u7684\u8ddd\u79bb\u4e3a$b$\u3002\n\n\u5982\u679c\u4f60\u8d70\u5411x\uff0c\u6740\u6b7b\u4ed6\u540e\u518d\u8fd4\u56de\u6740\u6b7b$y$\uff0c\u90a3\u4e48\u4f60\u8d70\u5230\u8def\u7a0b\u4e3a$max((a-k)/2,0)+max((b-k)/2,0)$\n\n\u5f85\u7740\u4e0d\u52a8\u7684\u8bdd\uff0c\u7ed3\u679c\u4e3a$max(max(a-k,0),max(b-k,0)) $\n\n\u5f53a,b\u5747\u5c0f\u4e8ek:\u90fd\u4e3a$0$\u3002\u221a\n\n\u5f53$a$\u6216$b$\u5c0f\u4e8e$k$(\u4e00\u4e2a):\u5316\u7b80\u4e3a\n\n\u8d70\u5411\uff1a$(a-k)/2$\n\n\u4e0d\u52a8\uff1a $a-k$\n\n\u4e8e\u662f\u8fd9\u4e2a\u53ef\u4ee5\u7279\u5224\uff08??\n\n\u4e0d\uff0c\uff08\u8be6\u7ec6\u89c1\u540e\u6587\uff09 \n\n$a,b$\u5747\u5927\u4e8e$k$\uff1a\n\n\u8d70\u5411\uff1a$(a-k)/2+(b-k)/2=(a+b)/2-k$\n\n\u4e0d\u52a8\uff1a $max(a-k,b-k)=max(a,b)-k$    (\u8fd9\u91cc\u51fa\u95ee\u9898\u4e86\uff1f\uff1f\uff1f \n\n\u4e0d\uff0c\u5176\u5b9e\u6ca1\u6709\n\n\u56e0\u4e3a\u6211\u4eec\u8981\u8d70\u5230\u7684\u6807\u51c6\u4f4d\u7f6e\u4e0a\uff0c$a=b$\u6216\u8005$abs(a-b)=1$ \n\n\u8bc1\u6bd5\u3002 \n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define uint unsigned int\nusing namespace std;\ntemplate<class T>\nclass myVector{\n    private:\n        T* data;\n        int len;\n        int size;\n    public:\n        myVector(){\n            data=NULL;\n            len=size=0;\n        }\n        void clear(){\n            data=NULL;\n            len=size=0;\n\t\t}\n        myVector(int _len){\n            data=new T[_len];\n            len=_len;\n            size=0;\n        }\n        T& operator[](int index){return data[index];}\n        const myVector& push_back(const T tmp){\n            if(size>=len){\n                T* newData=new T[len*2+1];\n                memcpy(newData,data,len*sizeof(T));\n                delete []data;\n                data=newData;\n                len=2*len+1;\n            }\n            data[size++]=tmp;\n            return *this;\n        }\n        int getSize(){return size;}\n};\n\nconst uint mxn=4e5+5;\nmyVector<uint>g[mxn];\nuint n,m,k,p[mxn],hv[mxn],son[mxn];\nuint deg[mxn],par[mxn],deep[mxn];\nmyVector<uint>alive;\nbool used[mxn];\nbool ban[mxn];\nvoid goup(register uint x){\n\tif(used[x] or ban[x])return;\n\tused[x]=1;\n\tfor(register uint i=0;i<g[x].getSize();++i)if(deep[g[x][i]]<deep[x])goup(g[x][i]);\n}\nuint dfs(register uint x,uint pa,uint dep){\n\tif(ban[x])return 0;\n\tpar[x]=pa,deep[x]=dep,son[x]=1;\n\tfor(register uint i=0;i<g[x].getSize();++i)if(g[x][i]!=pa)son[x]+=dfs(g[x][i],x,dep+1);\n\treturn son[x];\n}\nmyVector<uint>needs;\nconst uint maxn=5000;\nchar buffer[maxn],*S,*T;\nchar Get_Char(){\n    if(S==T){\n        T=(S=buffer)+fread(buffer,1,maxn,stdin);\n        if(S==T)return EOF;\n    }\n    return *S++;\n}\n\nuint read(){\n    char c;\n    uint re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)return -re;\n    return re;\n}\n\nvoid read(register uint&x){\n    char c;\n    uint re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)x=-re;\n    else x=re;\n}\ninline int lca(int a,int b){\n\tif(deep[a]>deep[b])swap(a,b);\n\tfor(;deep[b]>deep[a];)b=par[b];\n\tfor(;a!=b;)a=par[a],b=par[b];\n\treturn a;\n}\nsigned main(){\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0),cout.tie(0);\n\tread(n);\n\tfor(register uint i=1,u,v;i<n;++i){\n\t\tread(u),read(v);\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t\t++deg[u],++deg[v];\n\t}\n\tread(m);\n\tfor(register uint i=1;i<=m;++i)read(p[i]),hv[p[i]]=1;\n\tread(k),read(p[m+1]);hv[p[m+1]]=1;\n\tdfs(1,1,1);\n\tmyVector<uint>vhv;vhv.clear();\n\tfor(register uint i=1;i<=n;++i)if(hv[i])vhv.push_back(i);\n\tuint Root=vhv[0];\n\tdfs(Root,Root,1);\n\tfor(register uint i=0;i<vhv.getSize();++i)goup(vhv[i]);\n\tfor(register uint i=1;i<=n;++i)if(!used[i])ban[i]=1;\n\talive.clear();\n\tfor(register uint i=1;i<=n;++i)if(!ban[i])alive.push_back(i);\n\tif(!alive.getSize()){\n\t\tcout<<1<<endl;\n\t\treturn 0;\n\t}\n\tmemset(par,0,sizeof(par));\n\tdfs(alive[0],alive[0],1);\n\tuint mx=0,wz=0;\n\tuint po1,po2;\n\tfor(register uint i=1;i<=n;++i)if(!ban[i] and deep[i]>mx){\n\t\tmx=deep[i];\n\t\twz=i;\n\t}\n\tpo1=wz; \t\n\tdfs(wz,wz,1);\n\tmx=0,wz=0;\n\tfor(register uint i=1;i<=n;++i)if(!ban[i] and deep[i]>mx){\n\t\tmx=deep[i];\n\t\twz=i;\n\t}\n\tpo2=wz;\n\tuint mypos=p[m+1];\n\tuint ln=deep[po2]-1;\n\tuint md=po2;\n\tfor(register uint i=1;i<=ln/2;++i)md=par[md];\n\tdfs(md,md,1);Root=md;\n\tneeds.push_back(po1);needs.push_back(po2);needs.push_back(p[m+1]);\n\tuint a=po1,b=po2,c=p[m+1];\n\tbool da=0,db=0;\n\tint lac=lca(a,c),lbc=lca(b,c);\n\tbool ha=0,hb=0;\n\tfor(register uint ans=1;ans<=ln;++ans){\n\t\tif(!da and deep[c]+deep[a]-2*deep[lac]<=k)da=1;\n\t\tif(!db and deep[c]+deep[b]-2*deep[lbc]<=k)db=1;\n\t\tif(da and db){\n\t\t\tcout<<ans<<'\\n';\n\t\t\treturn 0;\n\t\t}\n\t\tif(a==lac or c==lac)ha=1;\n\t\tif(b==lbc or c==lbc)hb=1;\n\t\tif(a!=md)a=par[a];\n\t\tif(b!=md)b=par[b];\n\t\tif(c!=md)c=par[c];\n\t\tif(ha)lac=par[lac];\n\t\tif(hb)lbc=par[lbc];\n\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1591353363,
        "uid": 226760,
        "name": "RedLycoris",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6584 \u3010\u91cd\u62f3\u51fa\u51fb\u3011"
    },
    {
        "content": "\u522b\u7684\u9898\u89e3\u90fd\u6709\u8bc1\u660e\u5c0fZ\u53ef\u4ee5\u4e00\u76f4\u5411\u4e00\u4e2a\u70b9\u8d70\uff0c\u8d70\u5230\u540e\u505c\u4f4f\uff0c\u7b49\u5f85Youyou\u8fc7\u6765\u3002\n\n\u4e8e\u662f\u6211\u5c31\u6709\u4e2a\u5f88\u7b80\u5355\u7684\u65b9\u6cd5\uff1a\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u3002\n\n\u6bcf\u4e2aYouyou\u80af\u5b9a\u662f\u4e00\u76f4\u5411\u5c0fZ\u9760\u8fd1\u7684\uff0c\u4e5f\u53ef\u80fd\u8ddd\u79bb\u4e0d\u53d8\u3002\u6240\u4ee5\u53ea\u8981\u8003\u8651\u8ddd\u79bb\u7ed3\u675f\u4f4d\u7f6e\u6700\u8fdc\u7684Youyou\uff08Youyou\u8981\u4e0d\u7136\u5728\u5c0fZ\u5230\u8fbe\u540e\u4e00\u67aa\u5c04\u6b7b\uff0c\u8981\u4e0d\u7136\u4e00\u76f4\u60f3\u7ed3\u675f\u4f4d\u7f6e\u9760\u8fd1\uff09\u3002\n\n\u7ebf\u6bb5\u6811\u5c31\u8d85\u7ea7\u65e0\u8111\u4e86\uff0c\u505a\u4e00\u4e2adfs\u5e8f\uff08\u5c31\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u64cd\u4f5c\uff09\uff0c\u7136\u540e\u76f4\u63a5\u7ef4\u62a4\u8ddd\u79bb+\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6ce8\uff1a\u867d\u7136\u4e0d\u662f\u6bcf\u4e2a\u70b9\u90fd\u6709Youyou\uff0c\u53ef\u80fd\u51cf\u51fa\u8d1f\u6570\u8ddd\u79bb\uff0c\u4f46\u6ca1\u6709\u5173\u7cfb\uff0c\u53d6\u7684\u662f\u6700\u5927\u503c\u3002\u6211\u7684\u4ee3\u7801\u9700\u8981\u53bb\u91cdYouyou\u7684\u4f4d\u7f6e\uff0c\u4e0d\u7136\u7ebf\u6bb5\u6811\u4f1a\u51fa\u9519\u3002\n\n\u6700\u540e\u732e\u4e0a\u6211\u53c8\u81ed\u53c8\u957f\u7684\u4ee3\u7801qwq\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 400005;\nint n, m, p, rt, tot=0, ans=0x3f3f3f3f;\nint L[N], R[N], C[N], de[N], pos[N];\nmap<int, int> mp;\nvector<int> e[N];\nstruct tree{//\u7ebf\u6bb5\u6811\u57fa\u672c\u64cd\u4f5c\n\tint a[N<<2], sign[N<<2];\n \tvoid update(int now, int l, int r, int k){\n \t\ta[now] += k;\n \t\tsign[now] += k;\n \t}\n\tvoid down(int now, int l, int r){\n\t\tint mid = (l+r)>>1;\n\t\tupdate(now<<1, l, mid, sign[now]);\n\t\tupdate(now<<1|1, mid+1, r, sign[now]);\n\t\tsign[now] = 0;\n\t}\n\tvoid add(int now, int l, int r, int s, int t, int k){\n\t\tif (s <= l && r <= t){\n\t\t\ta[now] += k;\n\t\t\tsign[now] += k;\n\t\t\treturn;\n\t\t}\n\t\tdown(now, l, r);\n\t\tint mid = (l+r)>>1;\n\t\tif (s <= mid) add(now<<1, l, mid, s, t, k);\n\t\tif (t > mid) add(now<<1|1, mid+1, r, s, t, k);\n\t\ta[now] = max(a[now<<1], a[now<<1|1]);\n\t}\n\tint ask(int now, int l, int r, int s){\n\t\tif (l == r) return a[now];\n\t\tdown(l, r, now);\n\t\tint mid = (l+r)>>1, res;\n\t\tif (s <= mid) res = ask(now<<1, l, mid, s);\n\t\telse res = ask(now<<1|1, mid+1, r, s);\n\t\treturn res;\n\t}\n}T;\nvoid dfs1(int u, int fa){//\u6c42dfs\u5e8f\n\tC[u] = ++tot;\n\tL[u] = tot;\n\tfor (int i = 0; i < e[u].size(); i++){\n\t\tint v = e[u][i];\n\t\tif (v == fa) continue;\n\t\tde[v] = de[u]+1;\n\t\tdfs1(v, u);\n\t}\n\tR[u] = tot;\n}\nvoid dfs2(int u, int fa){\n\tans = min(max(de[u]+1, T.a[1]-p+1), ans);\n//\tcout << u << \"  in  \"; for (int i = 1; i <= n; i++) cout << T.ask(1, 1, n, i) << ' ';\n//\tcout << endl;\n\tfor (int i = 0; i < e[u].size(); i++){\n\t\tint v = e[u][i];\n\t\tif (v == fa) continue;\n\t\tT.add(1, 1, n, 1, n, 1);\n\t\tT.add(1, 1, n, L[v], R[v], -2);//\u5176\u5b9e\u5c31\u662f\u5b50\u6811\u8ddd\u79bb-1\uff0c\u5176\u4ed6+1\n\t\tdfs2(v, u);\n\t\tT.add(1, 1, n, 1, n, -1);\n\t\tT.add(1, 1, n, L[v], R[v], 2);//\u8981\u590d\u539f\u56de\u53bb\uff0c\u624d\u80fd\u7ed9\u540e\u6765\u7684\u7528\n\t}\n//\tcout << u << \" out  \"; for (int i = 1; i <= n; i++) cout << T.ask(1, 1, n, i) << ' ';\n//\tcout << endl;\n}\nint main(){\n\tstd::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n//\tfreopen(\"test_file/in.txt\", \"r\", stdin);\n//\tfreopen(\"test_file/out.out\", \"w\", stdout);\n\tcin >> n;\n\tfor (int i = 1; i < n; i++){\n\t\tint u, v;\n\t\tcin >> u >> v;\n\t\te[u].push_back(v);\n\t\te[v].push_back(u);\n\t}\n\tcin >> m;\n\tfor (int i = 1; i <= m; i++){\n\t\tcin >> pos[i];\n\t\tif (mp[pos[i]]) i--, m--;//\u4e00\u5b9a\u8981\u53bb\u91cd\uff01\u4e0d\u7136\u4f1a\u7b97\u591a\u904d\u8ddd\u79bb\n\t\tmp[pos[i]] = 1;\n\t}\n\tcin >> p >> rt;\n\tdfs1(rt, 0);\n\tfor (int i = 1; i <= m; i++)\n\t\tT.add(1, 1, n, L[pos[i]], L[pos[i]], de[pos[i]]);//\u8ddd\u79bb\u8bbe\u7f6e\n\tdfs2(rt, 0);\n\tcout << ans;\n\treturn 0;//\u7ed3\u5c3e\u6563\u82b1\uff01\n}\n```",
        "postTime": 1591764886,
        "uid": 171288,
        "name": "Tony2",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6584 \u3010\u91cd\u62f3\u51fa\u51fb\u3011"
    },
    {
        "content": "\u663e\u7136$k$\u53ef\u4ee5\u6539\u4e3a\u4e00\u5f00\u59cb\u6bcf\u4e2a\u654c\u4eba\u76f4\u63a5\u5411$x$\u8d70$k$\u6b65\uff0c\u8003\u8651$k=0$\u3002\n\n\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u6700\u7ec8\u64cd\u4f5c\u662f\u5c0fZ\u8d70\u5230\u4e00\u4e2a\u70b9\u5e76\u505c\u6b62\u76f4\u5230\u6240\u6709\u654c\u4eba\u6b7b\u4ea1\u3002\uff08\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u53ea\u6709\u6700\u540e\u4e00\u67aa\u6709\u7528\uff0c\u90a3\u4e48\u77e5\u9053\u4e86\u6700\u7ec8\u8282\u70b9$t$\u4e4b\u540e\u8981\u8ba9\u654c\u4eba\u5c3d\u53ef\u80fd\u63a5\u8fd1$t$\u5f53\u7136\u8981\u76f4\u63a5\u8d70\u8fc7\u53bb\u4e86\uff09\n\n\u56fa\u5b9a$t$\uff0c\u4ee5\u5c0fZ\u521d\u59cb\u8282\u70b9\u4e3a\u6839\uff0c\u5230$t$\u7684\u8def\u5f84\u4e3a$a_1=x,a_2,\\dots,a_s=t$\u3002\n\n\u90a3\u4e48\u8003\u8651\u5728$a_i$\u5b50\u6811\u4e2d\u4e14\u4e0d\u5728$a_{i+1}$\u5b50\u6811\u4e2d\u7684\u654c\u4eba\uff08\u8bbe\u8be5\u70b9\u4e0e$x$\u8ddd\u79bb\u662f$d$\uff09\uff1a  \n\u5b83\u4eec\u5728\u5411\u4e0a\u8d70$i-1$\u6b65\uff08\u5982\u679c\u78b0\u5230\u4e86\u5c0fZ\u5219\u4e0d\u7ba1\uff09\u540e\u5c0f$Z$\u7684\u4f4d\u7f6e\u662f$a_i$\uff0c\u6b64\u540e\u5b83\u4eec\u7684\u8ddd\u79bb\u4e00\u76f4\u4fdd\u6301\u4e0d\u53d8\uff08\u4e3a$\\max(0,d-2(i-1))$\uff09\u3002\u5230\u6700\u540e\u5c0fZ\u5c31\u8981\u82b1\u81f3\u5c11$\\max(0,d-2(i-1))$\u56de\u5408\u624d\u80fd\u6253\u5230\u8fd9\u4e2a\u654c\u4eba\u3002  \n\u90a3\u4e48\u56fa\u5b9a\u4e86$t$\u4ee5\u540e\uff0c\u5176\u5b9e\u7b54\u6848\u5c31\u662f\u4e0a\u8ff0$\\max(0,d-2(i-1))$\u6700\u5927\u503c\u52a01\u518d\u52a0$dist(x,t)$.\n\n\u8bbe$f_i$\u4e3a\uff1a\u8003\u8651\u5728$a_i$\u5b50\u6811\u4e2d\u4e14\u4e0d\u5728$a_{i+1}$\u5b50\u6811\u4e2d\u7684\u654c\u4eba\uff0c\u5b83\u4eec**\u4e0e$a_i$\u8ddd\u79bb**\u7684\u6700\u5927\u503c\u3002\u7b54\u6848\u4e5f\u5c31\u662f$\\max_i\\{i-1+\\max\\{0,f_i-i+1\\}\\}+1$\u3002\u5982\u679c\u4e0d\u628a$k$\u8bbe\u4e3a$0$\u5219\u7b54\u6848\u662f$\\max_i\\{i-1+\\max\\{0,f_i-i+1-k\\}\\}+1$\uff0c\u4e5f\u662f\u6a21\u62df\u5148\u8df3$k$\u6b65\u3002\n\n\u679a\u4e3e$t$\u5e76\u76f4\u63a5\u7b97\u7b54\u6848\uff0c\u8fd9\u4e2a\u505a\u6cd5\u662f$n^2$\u7684\u3002\u4f18\u5316\u4e5f\u5f88\u663e\u7136\uff0c\u8003\u8651dfs\u4e00\u904d\u5728\u6808\u4e0a\u7edf\u8ba1\uff0c\u53ea\u9700\u8bbe$f_i$\u4e3ai\u5b50\u6811\u654c\u4eba\u5230$i$\u8ddd\u79bb\u6700\u5927\u503c\uff0c\u4ee5\u53ca$g_i$\u4e3a\u70b9$i$\u7684\u7236\u4eb2\u6316\u6389\u5b50\u6811$i$\u540e\u7684$f$\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5dfs\u7edf\u8ba1\u4e86\u3002\u6c42\u51fa$f$\u540e\uff0c\u53ea\u9700\u591a\u8bb0\u5f55$f$\u7684\u6b21\u5927\u503c\u5373\u53ef\u5f97\u51fa$g$\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\ntypedef long long ll;\n#define fl fflush(stdout)\nll gi(){\n\tll x=0,f=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch))f^=ch=='-',ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n\treturn f?x:-x;\n}\nstd::mt19937 rnd(time(NULL));\n#define rand rnd\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\ntemplate<class T>void cxk(T&a,T b){a=a>b?a:b;}\ntemplate<class T>void cnk(T&a,T b){a=a<b?a:b;}\n#ifdef mod\nint pow(int x,int y){\n\tint ret=1;\n\twhile(y){\n\t\tif(y&1)ret=1ll*ret*x%mod;\n\t\tx=1ll*x*x%mod;y>>=1;\n\t}\n\treturn ret;\n}\ntemplate<class Ta,class Tb>void inc(Ta&a,Tb b){a=a+b>=mod?a+b-mod:a+b;}\ntemplate<class Ta,class Tb>void dec(Ta&a,Tb b){a=a>=b?a-b:a+mod-b;}\n#endif\nint k,fir[400010],dis[800010],nxt[800010],id;\nvoid link(int a,int b){nxt[++id]=fir[a],fir[a]=id,dis[id]=b;}\nint s[400010],ans=1e9;\nint f[400010],cf[400010],g[400010];\nvoid DFS(int x,int fa=-1){\n\tf[x]=cf[x]=-1e9;\n\tif(s[x])f[x]=0;\n\tfor(int i=fir[x];i;i=nxt[i]){\n\t\tif(dis[i]==fa)continue;\n\t\tDFS(dis[i],x);\n\t\tif(f[dis[i]]+1>f[x])cf[x]=f[x],f[x]=f[dis[i]]+1;\n\t\telse cxk(cf[x],f[dis[i]]+1);\n\t}\n}\nvoid DFS2(int x,int fa=-1){\n\tfor(int i=fir[x];i;i=nxt[i]){\n\t\tif(dis[i]==fa)continue;\n\t\tDFS2(dis[i],x);\n\t\tg[dis[i]]=(f[dis[i]]+1==f[x]?cf[x]:f[x]);\n\t}\n}\nvoid DFS3(int x,int mx,int dep,int fa=-1){\n\tcnk(ans,dep+std::max(0,std::max(mx,f[x]-dep)-k));\n\tfor(int i=fir[x];i;i=nxt[i]){\n\t\tif(dis[i]==fa)continue;\n\t\tDFS3(dis[i],std::max(g[dis[i]]-dep,mx),dep+1,x);\n\t}\n}\nint main(){\n#ifdef LOCAL\n\tfreopen(\"in.in\",\"r\",stdin);\n\t//freopen(\"out.out\",\"w\",stdout);\n#endif\n\tint n=gi(),u,v;\n\tfor(int i=1;i<n;++i)u=gi(),v=gi(),link(u,v),link(v,u);\n\tint m=gi();\n\tfor(int i=1;i<=m;++i)s[gi()]=1;\n\tk=gi();int x=gi();\n\tDFS(x);DFS2(x);DFS3(x,-1e9,0);\n\tprintf(\"%d\\n\",std::max(0,ans)+1);\n\treturn 0;\n}\n```",
        "postTime": 1591456994,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6584 \u3010\u91cd\u62f3\u51fa\u51fb\u3011"
    },
    {
        "content": "\u90e8\u5206\u601d\u8def\u53c2\u8003red\u5de8\u5de8%%%\n\n\u7136\u540e\u56e0\u4e3a\u7b14\u8005\u8868\u8fbe\u7684\u5f88\u5dee,\u8f7b\u55b7...(~~\u770b\u4e0d\u61c2\u7559\u8a00\u5440\u53cd\u6b63\u80af\u5b9a\u770b\u4e0d\u61c2~~)\n\n**\u6811\u578bdp+\u8d2a\u5fc3**\n\n## \u8d2a\u5fc3\u8bc1\u660e\n\n$\u9996\u5148\u8fd8\u662f\u8bc1\u660e\u4e00\u4e0b\u5c0fz\u79fb\u52a8\u8def\u7ebf$\n\n$\u4e00\u5b9a\u662f\u8d70\u5230\u67d0\u4e2a\u7ec8\u70b9\u540e\u5c31\u505c\u5728\u90a3\u91cc\u7b49\u522b\u4eba\u6765\u9001\u6b7b(\u5176\u5b9e\u6211\u60f3\u4e86\u5f88\u4e45)$\n\n\u56e0\u4e3a\u6211\u4e00\u5b9a\u5411\u7740\u654c\u4eba\u8d70,\u88ab\u6211\u5411\u7740\u7684\u654c\u4eba\u6bcf\u6b21\u76f8\u5bf9\u8ddd\u79bb$-2$\n\n\u4e0d\u88ab\u6211\u5411\u7740\u7684\u654c\u4eba\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8(\u4ed6\u4eec\u4f1a\u8ddf\u7740\u6211)\n\n$\u6240\u4ee5\u6211\u751a\u81f3\u53ef\u4ee5\u8bf4\u6211\u4e00\u5b9a\u5411\u7740\u6700\u8fdc\u70b9\u8d70,\u5426\u5219\u6ca1\u6709\u610f\u4e49$\n\n## \u679a\u4e3e\u7b54\u6848\n\n\u4ee4$dis[i]$\u4e3a\u70b9$i$\u8ddd\u79bb\u6700\u8fdc$youyou$\u7684\u8ddd\u79bb,$deep[i]$\u662f\u6df1\u5ea6\n\n\u5047\u8bbe\u6240\u6709$dis[i]$\u88ab\u6c42\u51fa\u6765,\u90a3\u6211\u4eec\u679a\u4e3e\u6240\u6709\u70b9\u4e3a\u7ec8\u70b9\n\n\u70b9$i$\u4e3a\u7ec8\u70b9\u7684\u7b54\u6848\u662f$deep[i]+max(dis[i]-deep[i]-k,0)+1$\n\n\u5c0fz\u56e0\u4e3a\u5728\u6839\u8282\u70b9,\u6240\u4ee5\u8d70\u5230$i$\u9700\u8981$deep[i]$\u4e2a\u56de\u5408\n\n\u5176\u4ed6\u70b9\u8981\u4e48\u63d0\u524d\u5230\u4e86\u70b9$i$,\u8981\u4e48\u548c\u5c0fz\u76f8\u5bf9\u8ddd\u79bb\u4e0d\u53d8\n\n\u6240\u4ee5\u9700\u8981\u6bd4$deep[i]$\u591a$max(dis[i]-deep[i]-k,0)$\u5373\u53ef\n\n\u8fd9\u4e2a\u4e0d\u7406\u89e3\u53ef\u4ee5\u753b\u4e0b\u56fe,\u6700\u8fdc\u70b9\u65e0\u975e\u662f\u548c\u70b9$i$\u540c\u5b50\u6811\u548c\u4e0d\u540c\u5b50\u6811\n\n\u4e0d\u540c\u5b50\u6811\u80af\u5b9a\u662f\u5148\u5230\u6839\u518d\u5230\u70b9$i$\n\n\u540c\u5b50\u6811\u5982\u679c\u5728\u70b9$i$\u4e0b\u65b9\u5c31\u4e00\u76f4\u5f80\u4e0a\u8d70\u5230\u70b9$i$\n\n\u4e0d\u7ba1\u54ea\u79cd\u60c5\u51b5\u90fd\u7b26\u5408\u4e0a\u9762\u7684\u5f0f\u5b50\n\n\u6700\u540e\u4e00\u56de\u5408\u5f00\u67aa\u6253\u6b7b\u6240\u6709$youyou$,\u52a0\u4e0a$1$\u7ed3\u675f\u3002\n\n\n## dp\u6c42\u89e3dis[i]\n\n\u72b6\u6001 $dp[u][0]$\uff1a\u4ee3\u8868 u \u8fd9\u4e2a\u70b9 \u5b50\u6811\u65b9\u5411\u6700\u8fdc\u8ddd\u79bb\n\n\u72b6\u6001 $dp[u][1]$\uff1a\u4ee3\u8868 u \u8fd9\u4e2a\u70b9 \u5b50\u6811\u65b9\u5411\u6b21\u8fdc\u8ddd\u79bb\n\n\u72b6\u6001 $dp[u][2]$\uff1a\u4ee3\u8868 u \u8fd9\u4e2a\u70b9 \u7236\u4eb2\u65b9\u5411\u6700\u8fdc\u8ddd\u79bb\n\n\u8bbe v \u662f u \u7684\u5b69\u5b50\n\n\u5982\u679c v \u6700\u8fdc\u8ddd\u79bb\u5728 u \u7684\u7236\u4eb2\u65b9\u5411\n\n$dist[v][2] = dist[u][2] + dis(u, v)$\n\n\u5426\u5219 v \u6700\u8fdc\u8ddd\u79bb\u5728 u \u7684\u5b50\u6811\u65b9\u5411\n\n\u5982\u679c v \u5728 \u5b50\u6811\u65b9\u5411\u6700\u8fdc\u8ddd\u79bb\u8def\u5f84\u4e0a\n\n$dist[v][2] = dist[u][1] + dis(u, v)$\n\n\u5982\u679c v \u4e0d\u5728 \u5b50\u6811\u65b9\u5411\u6700\u8fdc\u8ddd\u79bb\u8def\u5f84\u4e0a\n\n$dist[v][2] = dist[u][0] + dis(u, v)$\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define pb push_back\nconst int maxn=4e5+10;\nint n,m,k,root;\nint dis[maxn],deep[maxn],dp[maxn][3],vis[maxn],pos[maxn];\nvector<int>vec[maxn];\nvoid dfs1(int u,int fa)\n{\n\tif( vis[u] )\tdp[u][0]=dis[u]=0;\n\tdeep[u]=deep[fa]+1;\n\tfor(int i=0;i<vec[u].size();i++)\n\t{\n\t\tint v=vec[u][i];\n\t\tif( v==fa )\tcontinue;\n\t\tdfs1(v,u);\n\t\tif( dp[v][0]+1>=dp[u][0] )//\u66f4\u65b0u\u7684\u6700\u5927\u8ddd\u79bb \n\t\t{\n\t\t\tpos[u]=v;\n\t\t\tdp[u][1]=dp[u][0];\n\t\t\tdp[u][0]=dp[v][0]+1;\n\t\t}\n\t\telse if( dp[v][0]+1>=dp[u][1] )\n\t\t\tdp[u][1]=dp[v][0]+1;\n\t}\n}\nvoid dfs3(int u,int fa)\n{\n\tfor(int i=0;i<vec[u].size();i++)\n\t{\n\t\tint v=vec[u][i];\n\t\tif( v==fa )\tcontinue;\n\t\tif( pos[u]==v )\tdp[v][2]=max(dp[u][1],dp[u][2])+1;\n\t\telse\tdp[v][2]=max( dp[u][0],dp[u][2] )+1;\n\t\tdfs3(v,u);\n\t}\t\n\tdis[u]=max( dp[u][2],dp[u][0] );\n}\nint main()\n{\n\tcin >> n;\n\tmemset(dp,-0x3f,sizeof(dp));\n\tmemset(dis,-0x3f,sizeof(dis));\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint l,r;\n\t\tcin >> l >> r;\n\t\tvec[l].pb(r),vec[r].pb(l);\t\n\t}\n\tcin >> m;\n\tfor(int i=1,s ;i<=m;i++)\t\n\t{\n\t\tcin >> s;\n\t\tvis[s]=1;//\u6807\u8bb0youyou\u5728\u7684\u70b9 \n\t}\n\tcin >> k >> root;\n\tdeep[0]=-1;\t\n\tdfs1(root,0);\n\tdfs3(root,0);\n\tint minn=1e9;\n\tfor(int i=1;i<=n;i++)\n\t\tminn = min(minn,deep[i]+max(dis[i]-deep[i]-k,0)+1);\n\tcout<<max(0,minn);\n} \n```",
        "postTime": 1595039583,
        "uid": 299810,
        "name": "issue_is_fw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6584 \u3010\u91cd\u62f3\u51fa\u51fb\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u6ce2$O(n)$\u7684\u505a\u6cd5   \n\u8d2a\u5fc3\uff1a   \n*   \u627e\u8ddd\u79bb\u6700\u957f\u7684\u70b9    \n*   \u627e\u8d77\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84    \n*   \u6807\u8bb0\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9   \n*   \u627e\u5176\u4f59\u70b9\u4e2d\u8ddd\u79bb\u6807\u8bb0\u70b9\u8ddd\u79bb\u6700\u957f\u7684\u70b9    \n\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u662f$O(n)$\u7684   \n\u4f46\u662f\u8dd1\u5f97\u975e\u5e38\u6162    \n\u5177\u4f53\u89c1\u4ee3\u7801\uff1a   \n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int NR=4e5+10;\nint dist[NR];\nint adding[NR];\nint f[NR];\nint wxb[NR];\nbool flag[NR];\nstruct edge{\n\tint to,next;\n}g[NR<<1];\nint fte[NR];\nint tot;\nint path[NR];\nvoid add(int x,int y){\n\tg[++tot]=(edge){y,fte[x]};\n\tfte[x]=tot;\n}\nvoid dfs1(int id,int fath,int k){\n\tdist[id]=k;\n\t//\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\n\tfor(int i=fte[id];i;i=g[i].next)\n\t\tif(g[i].to!=fath)\n\t\t\tdfs1(g[i].to,id,k+1);\n}\nvoid dfs2(int id,int fath){\n\t//\u627e\u8ddd\u79bb\u6700\u8fdc\u7684\u70b9\n\tfor(int i=fte[id];i;i=g[i].next)\n\t\tif(g[i].to!=fath){\n\t\t\tdfs2(g[i].to,id);\n\t\t\twxb[id]=max(wxb[id],wxb[g[i].to]);\n\t\t}\n\tif(flag[id])wxb[id]=max(wxb[id],dist[id]);\n}\nint cnt;\nvoid find_path(int id,int fath){\n\t//\u628a\u5230\u6700\u8fdc\u7684\u70b9\u7684\u8def\u5f84\u627e\u51fa\u6765\n\tint dcx=0,ylx=-1;\n\tfor(int i=fte[id];i;i=g[i].next)\n\t\tif(g[i].to!=fath&&dcx<wxb[g[i].to]){\n\t\t\tdcx=wxb[g[i].to];\n\t\t\tylx=g[i].to;\n\t\t}\n\tif(ylx!=-1){\n\t\tpath[++cnt]=ylx;\n\t\tfind_path(ylx,id);\n\t}\n}\nvoid dfs3(int id,int fath,int k){\n\t//\u5904\u7406\u6bcf\u4e2a\u70b9\u5230\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n\tadding[id]=k;\n\tfor(int i=fte[id];i;i=g[i].next)\n\t\tif(g[i].to!=fath){\n\t\t\tif(path[dist[id]+1]==g[i].to)dfs3(g[i].to,id,k+2);\n\t\t\telse dfs3(g[i].to,id,k);\n\t\t}\n}\nbool ylx[NR];\nint main(int argc, char const *argv[])\n{\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);\n\tint n,rt,k,m;\n\tcin>>n;\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tcin>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tflag[x]=true;\n\t}\n\tcin>>k>>rt;\n\tdfs1(rt,0,0);\n\tdfs2(rt,0);\n\tfind_path(rt,0);\n\tdfs3(rt,0,0);\n\tfor(int i=1;i<=cnt;i++)\n\t\tylx[path[i]]=true;\n\tint ans=1;\n\tint lcy=wxb[rt];\n\tint maxn=0;\n\tfor(int i=1;i<=n;i++)\n\t\tif(flag[i]&&ylx[i]==false){\n\t\t\tmaxn=max(maxn,dist[i]-adding[i]);\n\t\t\t\n\t\t}\n\t//\u4e0b\u9762\u5b9e\u5728\u662f\u964d\u667a\uff0c\u8003\u573a\u4e0a\u8c03\u4e0d\u51fa\u6765\u5199\u7684\n\t//\u5176\u5b9e\u5c31\u662f\u51e0\u4e2a\u7b80\u5355\u7684\u9664\u6cd5\u8fd0\u7b97\n\tif(k==0){\n\t\t//printf(\"%d\\n\",k);\n\t\twhile(lcy>1){\n\t\t\tans++;\n\t\t\tlcy-=2;\n\t\t}\n\t\tif(lcy==1){\n\t\t\tmaxn--;\n\t\t\tans++;\n\t\t}\n\t\twhile(maxn>0){\n\t\t\tans++;\n\t\t\tmaxn-=2;\n\t\t}\n\t\tcout<<ans;\n\t\treturn 0;\n\t}\n\twhile(lcy>k){\n\t\tans++;\n\t\tlcy-=2;\n\t}\n\tmaxn=maxn+lcy-k;\n\twhile(maxn>k){\n\t\tans++;\n\t\tmaxn-=2;\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1598108796,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6584 \u3010\u91cd\u62f3\u51fa\u51fb\u3011"
    }
]