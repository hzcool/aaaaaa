[
    {
        "content": "\n\u611f\u89c9\u8fd9\u9898\u538b\u6839\u6ca1\u6709\u6b63\u5e38\u7684\u9898\u89e3\u554a\u2026\u2026\n\n\u55b7\u7684\u539f\u56e0\u53ef\u4ee5\u53bb\u770b\u6211\u7684\u4e0a\u4e00\u7bc7\u9898\u89e3:[P3358Sol \u6233\u6211](https://www.luogu.com.cn/blog/pks-LOVING/solution-p3358)\n \n\u7531\u4e8e\u8fd9\u9898\u9700\u8981\u7528\u5230 P3358 \u7684\u524d\u7f6e\u829d\u58eb\uff0c\u6240\u4ee5\u5927\u5bb6\u5982\u6709\u9700\u8981\u53ef\u4ee5\u53bb\u505a\u5b8c P3358 \u8fd9\u9898\u518d\u6765\u3002\n\n_____\n\n> \u7ed9\u5b9a\u5e73\u9762 $\\text{x-o-y}$\u4e0a $n$ \u4e2a\u5f00\u7ebf\u6bb5\u7ec4\u6210\u7684\u96c6\u5408 $\\text{I}$\uff0c\u548c\u4e00\u4e2a\u6b63\u6574\u6570 $\\rm k$ \u4ece\u5f00\u7ebf\u6bb5\u96c6\u5408 $\\text{I}$ \u4e2d\u9009\u53d6\u51fa\u5f00\u7ebf\u6bb5\u96c6\u5408 $\\text{S}\\in \\text{I}$, \u4f7f\u5f97\u5728 x \u8f74\u4e0a\u7684\u4efb\u4f55\u4e00\u70b9 $\\text{p}$ \uff0c $\\text{S}$ \u4e2d\u4e0e\u76f4\u7ebf $\\text{x}=\\text{p}$ \u76f8\u4ea4\u7684\u5f00\u7ebf\u6bb5\u4e2a\u6570\u4e0d\u8d85\u8fc7 $\\text{k}$ \uff0c\u4e14 $\\sum_{\\text{z} \\in \\text{S}}|z|$ \u8fbe\u5230\u6700\u5927\u3002\u8fd9\u6837\u7684\u96c6\u5408 $\\text{S}$ \u79f0\u4e3a\u5f00\u7ebf\u6bb5\u96c6\u5408 $\\text{I}$ \u7684\u6700\u957f $\\text{k}$ \u53ef\u91cd\u7ebf\u6bb5\u96c6\u7684\u957f\u5ea6\u3002\n>\n> \u5bf9\u4e8e\u4efb\u4f55\u5f00\u7ebf\u6bb5 $\\text{z}$\uff0c\u8bbe\u5176\u7aef\u70b9\u5750\u6807\u4e3a $( x_0 , y_0 )$ \u548c $( x_1 , y_1 )$\uff0c\u5219\u5f00\u7ebf\u6bb5 $\\text{z}$ \u7684\u957f\u5ea6 $|\\text{z}|$ \u5b9a\u4e49\u4e3a\uff1a $|z| = \\lfloor \\sqrt{ ( x_1 - x_0 ) ^ 2 + ( y_1 - y_0 )^2 } \\rfloor$\u3002\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5f00\u7ebf\u6bb5\u96c6\u5408 $\\text{I}$ \u548c\u6b63\u6574\u6570 $\\text{k}$ \uff0c\u8ba1\u7b97\u5f00\u7ebf\u6bb5\u96c6\u5408 $\\text{I}$ \u7684\u6700\u957f $\\text{k}$ \u53ef\u91cd\u7ebf\u6bb5\u96c6\u7684\u957f\u5ea6\u3002\n>\n> $1\\leq n\\leq500,$ $1 \\leq k \\leq 13$.\n\n\u53d1\u73b0\u548c\u300c\u533a\u95f4\u96c6\u300d\u90a3\u9898\u6ca1\u5565\u533a\u522b\uff0c\u53ea\u7528\u5173\u5fc3 $x$ \u8f74\uff0c\u6362\u4e00\u4e0b\u957f\u5ea6\u7684\u6c42\u6cd5\u2026\u597d\u50cf\u6709\u70b9\u4e0d\u5bf9\uff1f\u56e0\u4e3a\u5982\u679c\u5b58\u5728\u4e24\u6761\u7ebf\u6bb5\u5747\u5782\u76f4\u4e8e $x$ \u8f74\uff0c\u4e14\u4e24\u6761\u7ebf\u7684\u5de6\u53f3\u7aef\u70b9\u5206\u522b\u90fd\u662f $x_i$ \uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u5efa\u51fa\u56fe\u6765\u8fd9\u4fe9\u7ebf\u6bb5\u662f\u4e32\u5728\u4e00\u8d77\u4e0d\u4ea4\u7684\uff0c\u4f46\u662f\u672c\u8d28\u4e0a\u5e94\u8be5\u4ea4\u3002\n\n\u4e8e\u662f\u81ea\u7136\u60f3\u5230\uff0c\u8981\u6362\u79cd\u8868\u793a\u65b9\u6cd5\u5728 $x$ \u8f74\u4e0a\u8868\u793a\u4e00\u4e2a\u7ebf\u6bb5\u3002\u90a3\u4e48\u5982\u679c\u662f\u5728\u6570\u8f74\u4e0a\uff0c\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u6269\u57df\u3002\u6bcf\u4e2a\u7ebf\u6bb5 $i$ \u7684\u5de6\u53f3\u7aef\u70b9 $(l_i,r_i)$ \u53d8\u6362\u6210 $(2\\times l_i,2\\times r_i)$\u2014\u2014\u542c\u4e0a\u53bb\u5f88\u4e0d\u9519\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u4e0b\u6807\u591a\u4e86\u4e00\u4e2a\u7a7a\u95f4\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u5de6\u53f3\u7aef\u70b9\u76f8\u540c\u7684\u533a\u95f4 $(x,x)$ \uff0c\u5c31\u53ef\u4ee5\u8fde\u8fb9\u6210 $(2\\cdot x,2\\cdot x + 1)$\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u539f\u672c\u5de6\u53f3\u7aef\u70b9\u4e0d\u7528\u7684\u533a\u95f4\u4e5f\u8981\u6539\u2014\u2014\u7531\u4e8e\u90a3\u4e9b\u76f8\u540c\u7684\u533a\u95f4\u53f3\u7aef\u70b9\u52a0\u4e86 $1$\uff0c\u6240\u4ee5\u5982\u679c\u5b58\u5728\u8fd9\u6837\u4e24\u4e2a\u7ebf\u6bb5 $(p,p)$ \u3001 $(p,q)$ \uff0c\u90a3\u4e48\u539f\u672c\u4e0d\u4ea4\u7684\u4e24\u4e2a\u533a\u95f4\uff0c\u5728\u6269\u57df\u4e4b\u540e\u53d8\u6210\u4e86\u76f8\u4ea4\u7684 $(2p,2p+1)$\u3001$(2p,2q)$ \u3002\n\n\u5904\u7406\u65b9\u5f0f\u5f88\u7b80\u5355\uff0c\u5bf9\u4e8e\u4e00\u4e2a $p\\not=q$ \u7684\u533a\u95f4 $(p,q)$\uff0c\u8fde\u8fb9 $(2p+1,2q)$ \u5373\u53ef\u3002\u601d\u8003\u8fd9\u4e48\u505a\u4e3a\u5565\u662f\u5bf9\u7684\u3002\u5bf9\u4e8e\u539f\u672c\u5b58\u5728\u7684\u4e24\u4e2a\u5747\u4e0d\u5782\u76f4 $x$ \u8f74\u7684\u7ebf\u6bb5\uff0c\u4ed6\u4eec\u5982\u679c\u76f8\u4ea4\uff0c\u90a3\u4e48\u4ea4\u7684\u90a3\u4e00\u7aef\uff0c$r_1-l_2\\geq 1$ \uff1b\u5982\u679c\u4e0d\u4ea4\uff0c\u90a3\u4e48\u6709 $l_2-r_1\\geq 1$ \u3002\u6269\u57df\u4e4b\u540e\u5c31\u53d8\u6210\u4e86 $\\geq 2$ \u3002\u6240\u4ee5\u5982\u679c\u53ea\u662f\u5de6\u7aef\u70b9\u589e\u52a0 $1$ \uff0c\u6839\u672c\u4e0d\u5f71\u54cd\u5224\u5b9a\u3002\n\n```cpp\nint len[N] ;\npint base[N] ;\nint _n, _k, tot ;\nmap <int, int> Id, buc ;\nmap <int, int> :: iterator t ;\n\nint calc(int a, int b, int c, int d){\n    return (int)sqrt((ll)(a - c) * (a - c) + (ll)(b - d) * (b - d)) ;\n}\nint main(){\n    int a, b, c, d ;\n    cin >> _n >> _k ; cnt = -1 ;\n    memset(head, -1, sizeof(head)) ;\n    for (int i = 1 ; i <= _n ; ++ i){\n        cin >> a >> b >> c >> d ;\n        len[i] = calc(a, b, c, d) ;\n        base[i].ft = a << 1 ;\n        base[i].sc = c << 1 ;\n        if (a == c)\n            ++ base[i].sc ;\n        else ++ base[i].ft ;\n    }\n    for (int i = 1 ; i <= _n ; ++ i){\n        if (!Id.count(base[i].ft)) buc[base[i].ft] ++ ;\n        if (!Id.count(base[i].sc)) buc[base[i].sc] ++ ;\n    }\n    add(0, 1, _k, 0) ; add(1, 0, 0, 0) ;\n    for (t = buc.begin() ; t != buc.end() ; ++ t)\n        Id[t -> ft] = ++ tot ; _s = 0 ; _t = tot + 1 ;\n    for (int i = 1 ; i <= tot ; ++ i)\n        add(i, i + 1, I, 0), add(i + 1, i, 0, 0) ;\n    for (int i = 1 ; i <= _n ; ++ i){\n        //cout << Id[base[i].ft] << \" \" << Id[base[i].sc] << endl ;\n        add(Id[base[i].ft], Id[base[i].sc], 1, -len[i]) ;\n        add(Id[base[i].sc], Id[base[i].ft], 0, len[i]) ;\n    }\n    n = _t + 1 ; ek() ;\n    cout << -ans << endl ;\n}\n```\n\n",
        "postTime": 1584491669,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3357 \u3010\u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "\u672c\u9898\u89e3\u540c\u6b65\u53d1\u5e03\u4e8e\u6211\u7684\u535a\u5ba2[\u7f51\u7edc\u6d4124\u9898\u9898\u89e3 | KSkun's Blog](https://ksmeow.moe/graph\\_flow\\_24prob\\_sol/)\uff0c\u6b22\u8fce\u6765\u901bw\n\n\n\u8fd9\u4e2a\u9898\u7684\u5206\u6790\u57fa\u4e8e[\u3010P3358\u3011\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898 - \u6d1b\u8c37](https://www.luogu.org/problemnew/show/P3358)\u7684\u5206\u6790\uff0c\u5982\u679c\u6ca1\u6709\u770b\u8fc7\u8fd9\u4e2a\u9898\u5efa\u8bae\u5148\u628a\u8fd9\u4e2a\u9898\u505a\u4e00\u505a\uff0c\u518d\u6765\u8003\u8651\u672c\u9898\u3002\n\n\n## \u9898\u89e3\n\n\u8fd9\u4e2a\u9898\u53ea\u662f\u628a\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u7684\u5f00\u533a\u95f4\u6539\u6210\u4e86\u5f00\u7ebf\u6bb5\u3002\u6211\u4eec\u60f3\u4e00\u4e0b\u533a\u95f4\u53d8\u6210\u7ebf\u6bb5\u5e26\u6765\u4e86\u4ec0\u4e48\u53d8\u5316\uff1a\u9996\u5148\u662f\u957f\u5ea6\u7684\u6c42\u6cd5\u53d8\u4e86\uff0c\u8fd9\u4e2a\u4e0d\u4f1a\u5bf9\u5efa\u6a21\u4ea7\u751f\u5f71\u54cd\u3002\u80fd\u4ea7\u751f\u5f71\u54cd\u7684\u662f\u7ebf\u6bb5\u662f\u53ef\u4ee5\u5782\u76f4\u4e8ex\u8f74\u7684\u3002\u8fd9\u5c31\u610f\u5473\u7740\u5f53\u6211\u4eec\u4ee5\u7ebf\u6bb5\u7684\u5de6\u53f3\u7aef\u70b9x\u5750\u6807\u8fde\u8fb9\u65f6\u4f1a\u9047\u5230x\u5750\u6807\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u5e94\u51fa\u73b0\u7684\u3002\u6211\u4eec\u91c7\u7528\u62c6\u70b9\u7684\u7b56\u7565\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5047\u5982\u62c6\u51fa\u6765\u7684\u70b9\u5206\u522b\u662fX\u70b9\u548cY\u70b9\u5982\u679cx\u5750\u6807\u76f8\u540c\uff0c\u5c31\u4eceX\u5411Y\u8fde\uff0c\u5426\u5219\u4eceY\u5411X\u8fde\u3002\u5176\u4ed6\u7684\u90e8\u5206\u4e0e\u4e0a\u9762\u90a3\u4e2a\u9898\u76f8\u540c\u3002\n\n\n## \u4ee3\u7801\n\n\uff08MCMF\u677f\u5b50\u5199\u7684\u4e0d\u662f\u5f88\u6f02\u4eaeqwq\uff0c\u51d1\u5408\u7740\u770b\u4e00\u4e0b\u5427\uff09\n\n```cpp\n// Code by KSkun, 2018/1\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#include <queue>\n#include <algorithm>\ntypedef long long LL;\n\nstruct io {\n    char buf[1 << 26], *s;\n    \n    io() {\n        fread(s = buf, 1, 1 << 26, stdin);\n    }\n    \n    inline LL read() {\n        register LL res = 0, neg = 1;\n        while(*s < '0' || *s > '9') if(*(s++) == '-') neg = -1;\n        while(*s >= '0' && *s <= '9') res = res * 10 + *s++ - '0';\n        return res * neg;\n    }\n} ip;\n\n#define read ip.read\n\nconst int MAXN = 1000005;\nconst int INF = 2e9;\n\nstruct Edge {\n    LL to, cap, cost, rev;\n    Edge(int to, LL cap, LL cost, int rev): to(to), cap(cap), cost(cost), rev(rev) {}\n};\n\nstd::vector<Edge> vec[MAXN];\nstd::queue<int> que;\nLL f[MAXN];\nint pre[MAXN], pree[MAXN];\nLL dis[MAXN];\nbool inque[MAXN];\n\ninline void addedge(int u, int v, LL cap, LL cost) {\n    vec[u].push_back(Edge(v, cap, cost, vec[v].size()));\n    vec[v].push_back(Edge(u, 0, -cost, vec[u].size() - 1));\n}\n\n// SPFA Min Cost Flow\n\nLL flow = 0, cost = 0;\n\ninline void min_cost_flow(int s, int t) {\n    for(;;) {\n        memset(f, 0, sizeof f);\n        memset(dis, 0x3f, sizeof dis);\n        memset(inque, 0, sizeof inque);\n        while(!que.empty()) que.pop();\n        que.push(s);\n        dis[s] = 0;\n        inque[s] = true;\n        f[s] = INF;\n        while(!que.empty()) {\n            int u = que.front();\n            que.pop();\n            inque[u] = false; \n            for(int i = 0; i < vec[u].size(); i++) {\n                int v = vec[u][i].to;\n                if(vec[u][i].cap > 0 && dis[v] > dis[u] + vec[u][i].cost) {\n                    pre[v] = u;\n                    pree[v] = i;\n                    f[v] = std::min(vec[u][i].cap, f[u]);\n                    dis[v] = dis[u] + vec[u][i].cost;\n                    if(!inque[v]) {\n                        que.push(v);\n                        inque[v] = true;\n                    }\n                }\n            }\n        }\n        if(f[t] == 0) break;\n        for(int u = t; u != s; u = pre[u]) {\n            vec[pre[u]][pree[u]].cap -= f[t];\n            vec[u][vec[pre[u]][pree[u]].rev].cap += f[t];\n        }\n        flow += f[t];\n        cost += 1ll * f[t] * dis[t];\n    }\n}\n\nstruct Seg {\n    LL l, r, len;\n    Seg(LL x1, LL x2, LL len): l(x1), r(x2), len(len) {}\n};\n\ninline LL getlen(LL x1, LL y1, LL x2, LL y2) {\n    return floor(sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)));\n}\n\nLL n, k, xa, xb, ya, yb, S, T, N;\nstd::vector<LL> tmp;\nstd::vector<Seg> segs; \n\nint main() {\n    n = read();\n    k = read();\n    for(int i = 0; i < n; i++) {\n        xa = read();\n        ya = read();\n        xb = read();\n        yb = read();\n        LL len = getlen(xa, ya, xb, yb);\n        if(xa > xb) {\n            std::swap(xa, xb);\n        }\n        xa <<= 1;\n        xb <<= 1;\n        if(xa == xb) xb |= 1; else xa |= 1; // \u8fd9\u91cc\u5c31\u662f\u62c6\u70b9 \n        tmp.push_back(xa);\n        tmp.push_back(xb);\n        segs.push_back(Seg(xa, xb, len));\n    }\n    std::sort(tmp.begin(), tmp.end());\n    N = std::unique(tmp.begin(), tmp.end()) - tmp.begin();\n    for(int i = 0; i < segs.size(); i++) {\n        segs[i].l = std::lower_bound(tmp.begin(), tmp.begin() + N, segs[i].l) - tmp.begin() + 1;\n        segs[i].r = std::lower_bound(tmp.begin(), tmp.begin() + N, segs[i].r) - tmp.begin() + 1;\n    }\n    S = N + 1;\n    T = S + 1;\n    addedge(S, 1, k, 0);\n    for(int i = 0; i < N; i++) {\n        addedge(i, i + 1, INF, 0);\n    }\n    for(int i = 0; i < segs.size(); i++) {\n        addedge(segs[i].l, segs[i].r, 1, -segs[i].len);\n    }\n    addedge(N, T, INF, 0);\n    min_cost_flow(S, T);\n    printf(\"%lld\", -cost);\n    return 0;\n}\n```",
        "postTime": 1516719172,
        "uid": 35795,
        "name": "KSkun",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3357 \u3010\u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "## [\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3357)\n### \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u5e73\u9762 $x-O-y$ \u5185 $n$ \u4e2a\u5f00\u7ebf\u6bb5\uff08\u7c7b\u6bd4\u5f00\u533a\u95f4\uff0c\u5e94\u8be5\u662f\u4e0d\u53d6\u4e24\u7aef\u70b9\u7684\u7ebf\u6bb5\uff09\u548c\u6b63\u6574\u6570 $k$ \uff0c\u8981\u6c42\u4ece\u8fd9\u4e9b\u7ebf\u6bb5\u4e2d\u9009\u62e9\u82e5\u5e72\u4e2a\uff0c\u4f7f\u5f97\u4efb\u610f\u5e73\u884c $y$ \u8f74\u7684\u76f4\u7ebf $x=p$ \u90fd\u4e0d\u548c\u5927\u4e8e $k$ \u4e2a\u7ebf\u6bb5\u76f8\u4ea4\uff0c\u6c42\u9009\u51fa\u7ebf\u6bb5\u7684\u957f\u5ea6\u548c\u7684\u6700\u5927\u503c\uff08\u6b64\u5904\u7aef\u70b9\u4e3a $(x_1,y_1)$ \u548c $(x_2,y_2)$ \u7684\u7ebf\u6bb5\u957f\u5ea6\u5b9a\u4e49\u4e3a $\\left\\lfloor{\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}}\\right\\rfloor$ \uff09\uff08\u5982\u56fe $11$ \uff0c\u7b54\u6848\u4e3a $17$\uff0c$4$ \u4e2a\u7ebf\u6bb5\u90fd\u9009\u5373\u53ef\uff09\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/zguscq9w.png)\n### \u601d\u8def\n\u60f3\u5230\u4e4b\u524d\u7684[P3358](https://www.luogu.com.cn/problem/P3358)\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e00\u9898\u4e0e\u90a3\u9898\u7684\u533a\u522b\u5c31\u662f\u90a3\u9898\u5728\u6570\u8f74\u4e0a\u800c\u8fd9\u9898\u5728\u5e73\u9762\u5185\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\uff1a\u80fd\u4e0d\u80fd\u5c06\u8fd9\u4e9b\u7ebf\u6bb5\u53d8\u6210\u6570\u8f74\u4e0a\u7684\u533a\u95f4\u5462\uff1f\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528 P3358 \u7684\u4ee3\u7801\u4e86\uff09\u53d1\u73b0\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u7ebf\u6bb5\u6295\u5f71\u5230$x$\u8f74\u4e0a\uff0c\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u6211\u4eec\u5c06\u7ebf\u6bb5\u8f6c\u6362\u5230\u533a\u95f4\u7684\u613f\u671b\uff08\u5982\u4e0b\u56fe $11.2$ \uff09\u3002\u6b64\u65f6\u5c06\u4ee3\u7801\u6539\u4e00\u4e0b\u4e0a\u4ea4\uff0c\u5c31\u4f1a\u83b7\u5f97 $9$ \u5206\u7684\u597d\u6210\u7ee9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mifrg8st.png)\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u753b\u56fe\u5206\u6790\uff0c\u6211\u4eec\u53d1\u73b0\u82e5\u7ebf\u6bb5\u50cf\u56fe 11.3 \u4e00\u6837\u4e0d\u5e73\u884c $y$ \u8f74\uff08\u5373 $x_1\\not= x_2$ \uff09\u65f6\u6211\u4eec\u7684\u4ee3\u7801\u6b63\u786e\uff0c\u4f46\u662f\u4e00\u65e6\u51fa\u73b0\u5982\u56fe 11.4 \u4e00\u6837\u7684\u3001\u5e73\u884c\u4e8e $y$ \u8f74\u7684\u7ebf\u6bb5\uff08\u5373 $x_1 = x_2$ \uff09\uff0c\u5219\u5c06\u5176\u6295\u5f71\u5230 $x$ \u8f74\u4e0a\u540e\uff0c\u5148\u4e0d\u8bf4\u4ea4\u4e0d\u4ea4\u7684\u95ee\u9898\uff0c\u751a\u81f3\u8fd9\u6761\u201c\u7ebf\u6bb5\u201d\u90fd\u4e0d\u5b58\u5728\uff08\u56e0\u4e3a\u662f\u5f00\u533a\u95f4\u6240\u4ee5\u4e0d\u53d6\u4e24\u7aef\u70b9\u7684\u503c\uff09\u3002\n\n\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u53ef\u4ee5**\u62c6\u70b9**\uff08\u6269\u57df\uff09\uff0c\u628a\u533a\u95f4 $(x_i,x_j)$ \u53d8\u6210 $(2\\times x_i,2\\times x_j)$ \uff08\u540e\u6587\u7701\u7565\u4e58\u53f7\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7a7a\u51fa\u8bb8\u591a\u5947\u6570\u7684\u70b9\uff0c\u5982 $1,3,5$ \u7b49.\u6b64\u65f6\u82e5\u9047\u5230\u5e73\u884c$y$\u8f74\u7684\u7ebf\u6bb5\u5c31\u53ef\u4ee5\u628a\u533a\u95f4\u53d8\u6210 $(2x_i,2x_i+1)$ \u3002\u4f46\u6b64\u65f6\u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\uff0c\u7531\u4e8e\u662f\u5f00\u7ebf\u6bb5\u53d8\u6210\u7684\u5f00\u533a\u95f4\uff0c\u90a3\u4e48\u539f\u6765\u533a\u95f4 $(x_i,x_i)$ \u548c $(x_i,x_j)$ \uff08\u5047\u5b9a $x_j>x_i$ \uff09\u4e0d\u4ea4\uff0c\u4f46\u662f\u88ab\u6211\u4eec\u6539\u8fc7\u540e\u533a\u95f4\u53d8\u6210\u4e86 $(2x_i,2x_i+1)$ \u548c $(2x_i,2x_j)$ \uff0c\u4e4b\u95f4\u662f\u76f8\u4ea4\u7684\uff0c\u4f1a\u5bfc\u81f4\u7b54\u6848\u9519\u8bef\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u4e0d\u5e73\u884c $y$ \u8f74\u7684\u7ebf\u6bb5\u53d8\u6210\u7684\u533a\u95f4 $(x_i,x_j)$ \u4e5f\u6539\u53d8\uff0c\u53d8\u6210 $(2x_i+1,2x_j)$ \uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u7684\u533a\u95f4\u4e0d\u4ea4\u53d8\u6210\u76f8\u4ea4\u7684\u95ee\u9898\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u6837\u4f1a\u4e0d\u4f1a\u8ba9\u539f\u6765\u76f8\u4ea4\u7684\u533a\u95f4\u53d8\u6210\u4e0d\u4ea4\u5462\uff1f\u53ef\u4ee5\u8bc1\u660e\u4e0d\u4f1a\uff1a\uff08\u5982\u56fe 11.3 \uff09\u8bbe\u4e24\u533a\u95f4\u5206\u522b\u4e3a $(x_1,x_2)$ \u548c $(x_3,x_4)$ \uff0c\u90a3\u4e48\u6539\u53d8\u4e4b\u540e\u53d8\u6210\u4e86 $(2x_1+1,2x_2)$ \u548c $(2x_3+1,2x_4)$ \uff1a\u82e5\u539f\u6765\u4e24\u533a\u95f4\u76f8\u4ea4\uff0c\u5219 $x_3>x_2$ \uff0c\u66f4\u5177\u4f53\u5730\uff0c $x_3-x_2\\ge 1$ \uff08\u5e94\u8be5\u662f $>0$ \u7684\uff0c\u5728\u672c\u9898\u4e2d\u7531\u4e8e\u8f93\u5165\u7684\u90fd\u662f\u6574\u6570\uff0c\u6545 $\\ge1$ \uff09\uff0c\u6240\u4ee5\u6539\u53d8\u4e4b\u540e\u7684 $2x_3+1-2x_2\\ge 3> 1$ \uff0c\u4ecd\u7136\u76f8\u4ea4\uff1b\u82e5\u539f\u6765\u4e24\u533a\u95f4\u4e0d\u4ea4\uff0c\u5219\u540c\u7406 $x_2-x_3\\ge 1$ \uff0c\u6539\u53d8\u540e\u7684 $2x_2-(2x_3+1)\\ge 1$ \uff0c\u4ecd\u7136\u4e0d\u4ea4\u3002\n### \u7ec6\u8282\n- \u8ddd\u79bb\u8981\u5411\u4e0b\u53d6\u6574\uff0c\u53ef\u4ee5\u7528 cmath \u5e93\u7684 floor \u51fd\u6570\u3002\n- ~~\u4e0d\u5f00 long long \u89c1\u7956\u5b97~~\uff08 $WA\\ \\  On\\ \\  Test\\ 4$ \uff09\n\n### \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#define maxn 5005\n#define maxm 50005\n#define ll long long\n#define inf 0x3fffffff\nusing namespace std;\nll n,k,s,t;\nll xx1[maxn],yy1[maxn],xx2[maxn],yy2[maxn],diss[maxn];\nll num[maxn],cnt=0;\nll head[maxn],tt=1;\nstruct node{\n\tll to,dis,cost,nex;\n}a[maxm*2];\nvoid add(ll from,ll to,ll dis,ll cost){\n\ta[++tt].to=to;a[tt].dis=dis;a[tt].cost=cost;a[tt].nex=head[from];head[from]=tt;\n\ta[++tt].to=from;a[tt].dis=0;a[tt].cost=-cost;a[tt].nex=head[to];head[to]=tt;\n}\nbool vis[maxn];\nll costs[maxn];\nbool spfa(){\n\tmemset(vis,0,sizeof(vis));\n\tmemset(costs,0x3f,sizeof(costs));\n\tqueue<int> q;\n\tvis[s]=1;\n\tq.push(s);\n\tcosts[s]=0;\n\twhile(!q.empty()){\n\t\tll top=q.front();\n\t\tq.pop();\n\t\tvis[top]=0;\n\t\tfor(ll i=head[top];i;i=a[i].nex){\n\t\t\tif(costs[top]+a[i].cost<costs[a[i].to]&&a[i].dis){\n\t\t\t\tcosts[a[i].to]=costs[top]+a[i].cost;\n\t\t\t\tif(!vis[a[i].to]){\n\t\t\t\t\tvis[a[i].to]=1;\n\t\t\t\t\tq.push(a[i].to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(costs[t]==costs[0]){\n\t\treturn 0;\n\t}\n\treturn 1;\n}\nll ans=0,anscost=0;\nll dfs(ll x,ll minn){\n\tif(x==t){\n\t\tvis[t]=1;\n\t\tans+=minn;\n\t\treturn minn;\n\t}\n\tint use=0;\n\tvis[x]=1;\n\tfor(ll i=head[x];i;i=a[i].nex){\n\t\tif((!vis[a[i].to]||a[i].to==t)&&costs[a[i].to]==costs[x]+a[i].cost&&a[i].dis){\n\t\t\tll search=dfs(a[i].to,min(minn-use,a[i].dis));\n\t\t\tif(search>0){\n\t\t\t\tuse+=search;\n\t\t\t\tanscost+=(a[i].cost*search);\n\t\t\t\ta[i].dis-=search;\n\t\t\t\ta[i^1].dis+=search;\n\t\t\t\tif(use==minn){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn use;\n}\nvoid dinic(){\n\twhile(spfa()){\n\t\tdo{\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\tdfs(s,inf);\n\t\t}while(vis[t]);\n\t}\n\tprintf(\"%lld\",-anscost);\n}\nll dis(ll xx1,ll yy1,ll xx2,ll yy2){\n\treturn floor((double)sqrt((ll)(xx1-xx2)*(xx1-xx2)+(yy1-yy2)*(yy1-yy2)));\n}\nint main(){\n\tscanf(\"%lld%lld\",&n,&k);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%lld%lld%lld%lld\",&xx1[i],&yy1[i],&xx2[i],&yy2[i]);//\u8bfb\u5165\u7ebf\u6bb5\n\t\tdiss[i]=dis(xx1[i],yy1[i],xx2[i],yy2[i]);//\u8ba1\u7b97\u8ddd\u79bb\n\t\txx1[i]*=2;//\u6269\u57df\n\t\txx2[i]*=2;\n\t\tif(xx1[i]==xx2[i]){\n\t\t\txx2[i]++;\n\t\t}else{\n\t\t\txx1[i]++;\n\t\t}\n\t\tnum[++cnt]=xx1[i];\n\t\tnum[++cnt]=xx2[i];\n\t}\n\tsort(num+1,num+1+cnt);//\u79bb\u6563\u5316\n\tll len=unique(num+1,num+1+cnt)-num-1;\n\tt=len;\n\ts=len+1;\n\tadd(s,1,k,0);//\u5efa\u8fb9(\u5177\u4f53\u539f\u56e0\u53ef\u4ee5\u53c2\u8003P3378)\n\tfor(ll i=1;i<t;i++){\n\t\tadd(i,i+1,k,0);\n\t}\n\tfor(ll i=1;i<=n;i++){\n\t\tadd(lower_bound(num+1,num+1+len,xx1[i])-num,lower_bound(num+1,num+1+len,xx2[i])-num,1,-1*diss[i]);\n\t}\n\tdinic();//\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u6a21\u677f\n\treturn 0;\n}\n/*\n4 2\n-1 0 0 3\n-1 1 0 2\n-1 2 0 1\n1 1 2 2\n*/\n```\n---------------------------\n\u6ce8\uff1a\u6587\u7ae0\u8282\u9009\u81ea\u6211\u7684\u535a\u5ba2\uff0c\u6545\u56fe\u7247\u662f\u201c\u56fe11\u201d\u800c\u975e\u201c\u56fe1\u201d",
        "postTime": 1633515676,
        "uid": 294382,
        "name": "qzhwlzy",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3357 \u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898"
    },
    {
        "content": "# \u6700\u957f $k$ \u53ef\u91cd\u7ebf\u6bb5\u96c6\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u5e73\u9762 $x-O-y$ \u4e0a $n$ \u4e2a\u5f00\u7ebf\u6bb5\u7ec4\u6210\u7684\u96c6\u5408 $I$ \uff0c\u548c\u4e00\u4e2a\u6b63\u6574\u6570 $k$ \u3002\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u4ece\u5f00\u7ebf\u6bb5\u96c6\u5408 $I$ \u4e2d\u9009\u53d6\u5f00\u7ebf\u6bb5\u96c6\u5408 $S \\subseteq I$ \uff0c\u4f7f\u5f97\u5728 $x$ \u8f74\u4e0a\u7684\u4efb\u610f\u4e00\u70b9 $P$ \uff0c $S$ \u4e2d\u4e0e\u76f4\u7ebf $x=p$ \u76f8\u4ea4\u7684\u5f00\u7ebf\u6bb5\u4e2a\u6570\u4e0d\u8d85\u8fc7 $k$ \uff0c\u4e14 $\\sum_{z \\in S}|z|$ \u6700\u5927\u3002\u8fd9\u6837\u7684\u96c6\u5408 $S$ \u79f0\u4e3a\u5f00\u7ebf\u6bb5\u96c6\u5408 $I$ \u7684\u6700\u957f $k$ \u53ef\u91cd\u7ebf\u6bb5\u96c6\u3002 $\\sum_{z\\in S}|z|$ \u79f0\u4e3a\u6700\u957f $k$ \u53ef\u91cd\u7ebf\u6bb5\u96c6\u7684\u957f\u5ea6\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u5f00\u7ebf\u6bb5 $z$ \uff0c\u8bbe\u5176\u7aef\u70b9\u5750\u6807\u4e3a $(x_0,y_0)$ \u548c $(x_1,y_1)$ \uff0c\u5219\u5f00\u7ebf\u6bb5 $z$ \u7684\u957f\u5ea6 $|z|$ \u5b9a\u4e49\u4e3a\uff1a\n\n$$ |z|=[\\sqrt{(x_1-x_0)^2+(y_1-y_0)^2}]  $$ \n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5f00\u7ebf\u6bb5\u96c6\u5408 $I$ \u548c\u6b63\u6574\u6570 $k$ \uff0c\u8ba1\u7b97\u5f00\u7ebf\u6bb5\u96c6\u5408 $I$ \u7684\u6700\u957f $k$ \u53ef\u91cd\u7ebf\u6bb5\u96c6\u7684\u957f\u5ea6\u3002\n\n## \u5206\u6790\n\n\u60f3\u8981\u89e3\u51b3\u6b64\u9898\uff0c\u53ef\u4ee5\u5148\u770b\u4e00\u4e0b\u4e0e\u8be5\u9898\u57fa\u672c\u5982\u51fa\u4e00\u8f99\u7684\uff1a[\u6700\u957f $k$ \u53ef\u91cd\u533a\u95f4\u96c6[\u9898\u89e3]](https://www.cnblogs.com/Defoliation-ldlh/p/14457168.html)\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u548c\u4e0a\u8ff0\u6b64\u9898\u975e\u5e38\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5c06\u6c34\u5e73\u7684\u533a\u95f4\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e9b\u57fa\u672c\u65e0\u89c4\u5f8b\u5904\u4e8e\u4e8c\u7ef4\u5e73\u9762\u5185\u7684\u7ebf\u6bb5\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u5230 $x$ \u4e0a\uff0c\u6211\u4eec\u53d1\u73b0\u5176\u5b9e $y$ \u5750\u6807\u548c\u9898\u76ee\u7684\u9650\u5236\u5173\u7cfb\u4e0d\u5927\uff0c\u6211\u4eec\u53ea\u9700\u8981\u89e3\u51b3**\u6a2a\u5750\u6807**\u90e8\u5206\u5373\u53ef\u3002\n\n\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u628a\u7ebf\u6bb5\u4e24\u4e2a\u7aef\u70b9\u7684 $x$ \u5750\u6807\u8f6c\u5316\u4e3a\u4f55\u4e0a\u8ff0\u9898\u76ee\u4e00\u6837\u7684\u533a\u95f4\u5373\u53ef\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u548c\u4e0a\u8ff0\u9898\u76ee\u4e00\u6837\u7684\u8fc7\u7a0b\uff0c\u5177\u4f53\u5206\u6790\u53ef\u4ee5\u70b9\u51fb**\u4e0a\u65b9\u94fe\u63a5**\uff0c\u4e0b\u9762\u76f4\u63a5\u7ed9\u51fa\u5efa\u56fe\u601d\u8def\uff1a\n\n- \u5c06\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u5de6\u53f3\u7aef\u70b9\u7684 $x$ \u5750\u6807\u50a8\u5b58\u8d77\u6765\uff0c\u5e76\u5c06\u7ebf\u6bb5 $i$ \u62c6\u6210 $i$ \u4e0e $i'$ \u5206\u522b\u8868\u793a\u70b9 $i$ \u7684\u5165\u70b9\u4e0e\u51fa\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u5bf9\u62c6\u70b9\uff0c\u5728\u4ed6\u4eec\u4e2d\u95f4\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \uff0c\u8d39\u7528\u4e3a\u7ebf\u6bb5\u957f\u5ea6\u7684\u8fb9\u3002\n\n- \u5efa\u7acb\u4e00\u4e2a**\u8d85\u7ea7\u6e90\u70b9**\u548c**\u8d85\u7ea7\u6c47\u70b9**\uff0c\u8d85\u7ea7\u6e90\u70b9\u5411\u771f\u6b63\u7684\u6e90\u70b9\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3a $k$ \uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\uff0c\u5e76\u518d\u5c06\u6e90\u70b9\u5411\u6bcf\u6761\u7ebf\u6bb5\u7684\u5165\u70b9\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\uff0c\u6bcf\u6761\u7ebf\u6bb5\u7684\u51fa\u70b9\u5411\u8d85\u7ea7\u6c47\u70b9\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\u3002\n\n- \u5bf9\u4e8e\u5de6\u53f3\u7aef\u70b9\u5f62\u6210\u7684\u533a\u95f4\u4e92\u4e0d\u76f8\u4ea4\u7684\u7ebf\u6bb5\uff0c\u5728\u4ed6\u4eec\u4e4b\u95f4\u5efa\u7acb\u4e00\u6761\u6d41\u91cf\u4e3a $+\\infty$ \uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u8dd1\u6700\u5927\u8d39\u7528\u4e86\u3002\n\n\u9700\u8981\u6ce8\u610f\u4e24\u4e2a\u5730\u65b9\uff1a\n\n- \u672c\u6587\u4e00\u5f00\u59cb\u7684\u94fe\u63a5\u4e2d\u8be6\u7ec6\u8bba\u8ff0\u4e86\u7ebf\u6bb5\u8fde\u63a5**\u6709\u5e8f\u6027**\u7684\u5fc5\u8981\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u6392\u5e8f\u6216\u662f\u8981\u4fdd\u8bc1\u7ebf\u6bb5\u8fde\u63a5\u7684\u6709\u5e8f\u3002\n\n- \u5bf9\u4e8e\u4e24\u6761\u7ebf\u6bb5\uff0c\u5982\u679c\u4ed6\u4eec\u5b8c\u5168\u76f8\u540c\u7684\u8bdd\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u5c06\u5176**\u8ba1\u7b97\u5728\u9650\u5236**\u5185\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u5224\u65ad\uff0c\u4e0d\u80fd\u8fdb\u884c\u8fde\u8fb9\u3002\n\n\u6700\u540e\u4ee3\u7801\u5982\u4e0b\uff1a\n\n## CODE\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=5e2+10,INF=0x7fffffff;\nint n,k,s,t,_s,ans;\nstruct node{ int l,r,len; }sec[N];\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n\treturn s*w;\n}\ninline bool cmp(node x,node y) { return x.l<y.l; }\nint tot=-1,v[2*N*N],w[2*N*N],pay[2*N*N],nex[2*N*N],first[2*N];\ninline void Add(int x,int y,int z,int c)\n{\n\tnex[++tot]=first[x];\n\tfirst[x]=tot;\n\tv[tot]=y,w[tot]=z,pay[tot]=c;\n}\nbool vis[2*N];\nint pre[2*N],dis[2*N],Min[2*N]; \ninline bool SPFA()\n{\n\tfor(register int i=s;i<=t;i++) dis[i]=-INF;\n\tfor(register int i=s;i<=t;i++) vis[i]=false;\n\tqueue<int> q;\n\tq.push(s);\n\tvis[s]=true,dis[s]=0,Min[s]=INF;\n\twhile(!q.empty()){\n\t\tint now=q.front(); q.pop();\n\t\tvis[now]=false;\n\t\tfor(register int i=first[now];i!=-1;i=nex[i]){\n\t\t\tint to=v[i];\n\t\t\tif(!w[i]) continue;\n\t\t\tif(dis[to]<dis[now]+pay[i]){\n\t\t\t\tdis[to]=dis[now]+pay[i];\n\t\t\t\tMin[to]=min(Min[now],w[i]);\n\t\t\t\tpre[to]=i;\n\t\t\t\tif(!vis[to]) q.push(to),vis[to]=true;\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t]!=-INF;\n}\ninline void EK()\n{\n\twhile(SPFA()){\n\t\tans+=Min[t]*dis[t];\n\t\tint temp=t,i;\n\t\twhile(temp!=s){\n\t\t\ti=pre[temp];\n\t\t\tw[i]-=Min[t];\n\t\t\tw[i^1]+=Min[t];\n\t\t\ttemp=v[i^1];\n\t\t}\n\t}\n}\nsigned main()\n{\n\tmemset(first,-1,sizeof(first));\n\tn=read(),k=read();\n\tfor(register int i=1;i<=n;i++){\n\t\tint _x1=read(),_y1=read(),_x2=read(),_y2=read();\n\t\tsec[i].l=min(_x1,_x2),sec[i].r=max(_x1,_x2);\n\t\tsec[i].len=(int)sqrt((_x1-_x2)*(_x1-_x2)+(_y1-_y2)*(_y1-_y2));\n\t}\n\ts=0,_s=2*n+1,t=2*n+2;\n\tsort(sec+1,sec+n+1,cmp);\n\tAdd(s,_s,k,0),Add(_s,s,0,0);\n\tfor(register int i=1;i<=n;i++){\n\t\tAdd(_s,i,1,0),Add(i,_s,0,0);\n\t\tAdd(i,i+n,1,sec[i].len),Add(i+n,i,0,-sec[i].len);\n\t\tAdd(i+n,t,1,0),Add(t,i+n,0,0);\n\t}\n\tfor(register int i=1;i<=n;i++){\n\t\tfor(register int j=i+1;j<=n;j++){\n            if(sec[i].l==sec[i].r&&sec[j].l==sec[j].r&&sec[i].l==sec[j].l) continue;\n    \t\tif(sec[j].l>=sec[i].r||sec[i].l>=sec[j].r) Add(i+n,j,INF,0),Add(j,i+n,0,0);\n\t\t}\n\t}\n\tEK();\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1614510202,
        "uid": 258460,
        "name": "Booksnow",
        "ccfLevel": 0,
        "title": "P3357 \u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6[\u9898\u89e3]"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3357)\n\n### \u9898\u610f\n\n\u7ed9\u5b9a\u5e73\u9762\u4e0a\u4e00\u4e2a\u4e2a\u5f00\u7ebf\u6bb5\u7684\u96c6\u5408 $I$\uff0c\u548c\u4e00\u4e2a\u6570 $k$\u3002\u6709\u5f00\u7ebf\u6bb5\u96c6\u5408 $S\\subseteq I$ ,\u4e14\u4f7f\u5f97\u5728 $x$ \u8f74\u4e0a\u7684\u4efb\u4f55\u4e00\u70b9 $p$\uff0c$S$ \u4e2d\u4e0e\u76f4\u7ebf $x=p$ \u76f8\u4ea4\u7684\u5f00\u7ebf\u6bb5\u4e2a\u6570\u4e0d\u8d85\u8fc7 $k$\uff0c\u4e14$\\sum\\limits_{z\\in S}|z|$\u8fbe\u5230\u6700\u5927\uff0c\u5219\u5f00\u7ebf\u6bb5\u96c6\u5408 $S$ \u79f0\u4e3a\u5f00\u7ebf\u6bb5\u96c6\u5408 $I$ \u7684\u6700\u957f $k$ \u53ef\u91cd\u7ebf\u6bb5\u96c6\u3002$\\sum\\limits_{z\\in S}|z|$ \u79f0\u4e3a\u6700\u957f $k$ \u53ef\u91cd\u7ebf\u6bb5\u96c6\u7684\u957f\u5ea6\u3002\n\n### \u505a\u6cd5\n\n\u5148\u6765\u770b\u4e00\u4e0b P3358 \u662f\u600e\u4e48\u505a\u7684\u3002\n\n\u9996\u5148\u9700\u8981\u4e86\u89e3\u4e00\u4e2a\u7f51\u7edc\u6d41\u57fa\u672c\u6a21\u578b\uff1a\u4e00\u6d41\u5bf9\u591a\u6d41\uff08\u53ef\u4ee5\u7c7b\u6bd4\u7535\u6d41\uff09\uff0c\u4e3b\u8981\u7528\u6765\u89e3\u51b3\u4e00\u4e9b\u53ef\u4ee5\u540c\u65f6\u9009\uff08\u53ef\u4ee5\u7c7b\u6bd4\u4e32\u8054\uff09\u4ee5\u53ca\u4e0d\u540c\u65f6\u9009\uff08\u53ef\u4ee5\u7c7b\u6bd4\u5e76\u8054\uff09\u7684\u95ee\u9898\u3002\n\n\u5bf9\u4e8e P3358\uff0c\u660e\u663e\u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u76f8\u4e92\u91cd\u53e0\u7684\u96c6\u5408\u53ef\u4ee5\u90fd\u9009\uff0c\u53ef\u4ee5\u7528\u540c\u4e00\u4e2a\u6d41\uff0c\u800c\u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u91cd\u5408\u7684\u96c6\u5408\uff0c\u5219\u9009\u62e9\u5c31\u6709\u4e86\u9650\u5236\uff0c\u9700\u8981\u7528\u4e24\u4e2a\u6d41\u3002\n\n\u518d\u5c06\u5176\u4e0e\u6a21\u578b\u7ed3\u5408\u4e00\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6570\u8f74\u4e0a\u7684\u70b9\u6bcf\u4e2a\u70b9\u548c\u5176\u540e\u9762\u7684\u70b9\u8fde\u5728\u4e00\u8d77\uff0c\u6d41\u91cf $k$\uff0c\u8d39\u7528 $0$\uff08\u5bf9\u5e94\u5e76\u8054\uff09\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5f00\u533a\u95f4\uff0c\u5176\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u8fde\u5728\u4e00\u8d77\uff0c\u6d41\u91cf $1$\uff0c\u8d39\u7528 $len$\uff08\u5bf9\u5e94\u4e32\u8054\uff09\uff0c\u4f46\u7531\u4e8e\u5176\u4e2d\u65e0\u7528\u7684\u70b9\u592a\u591a\uff0c\u6240\u4ee5\u53ef\u4ee5\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u6700\u540e\u518d\u5c06\u6e90\u70b9 $s$ \u548c $1$ \u8fde\u5728\u4e00\u8d77\uff0c\u5c06 $cnt$ \u548c\u6c47\u70b9 $t$ \u8fde\u5728\u4e00\u8d77\uff0c\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002\n\n\u800c\u8fd9\u9053\u9898\u770b\u4f3c\u8ddf P3358 \u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u5173\u4e8e $x$ \u8f74\u7684\u9650\u5236\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u8fd1\u4f3c\u5730\u770b\u505a\u533a\u95f4\uff0c\u4f46\u662f\u56e0\u4e3a\u53d8\u6210\u4e86\u5e73\u9762\u4e0a\u7684\u7ebf\u6bb5\uff0c\u6240\u4ee5\u5982\u679c\u6709\u4e24\u6761\u4e24\u4e2a\u7aef\u70b9\u7684\u6a2a\u5750\u6807\u90fd\u76f8\u7b49\u7684\u7ebf\u6bb5\uff0c\u5c31\u4e0d\u4f1a\u8fde\u5230\u4e00\u8d77\uff0c\u4f46\u662f\u4e0d\u5e94\u8be5\u8fd9\u6837\u3002\n\n\u8003\u8651\u6269\u57df\u3002\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5982\u679c\u6709\u5de6\u53f3\u7aef\u70b9\u6a2a\u5750\u6807\u76f8\u540c\u7684\u7ebf\u6bb5\u5b58\u5728\uff0c\u5c31\u628a\u53f3\u7aef\u70b9\u7684\u6a2a\u5750\u6807\u6539\u4e3a $2 \\times x+1$\uff0c\u7406\u6240\u5f53\u7136\u5de6\u7aef\u70b9\u4e0d\u53d8\u4e3a $2 \\times x$\u3002\n\n\u4f46\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u6269\u57df\u4e4b\u540e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u672c\u6765\u4e0d\u4ea4\u7684\u4e24\u4e2a\u7ebf\u6bb5\u4ea4\u5728\u4e00\u8d77\uff0c\u5982\u4f55\u89e3\u51b3\uff1f\u7b54\u6848\u662f\uff0c\u63a5\u7740\u6269\u57df\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u4e00\u6761\u5de6\u53f3\u7aef\u70b9\u7684\u6a2a\u5750\u6807\u4e0d\u76f8\u7b49\u7684\u70b9\u7684\u5de6\u7aef\u70b9\u7684\u6a2a\u5750\u6807\u6539\u4e3a $2 \\times x_l+1$\uff0c\u53f3\u7aef\u70b9\u4fdd\u6301\u4e0d\u53d8\u3002\n\n\u8003\u8651\u8fd9\u6837\u505a\u7684\u6b63\u786e\u6027\u3002\u5f88\u660e\u663e\u5bf9\u4e8e\u539f\u5148\u4e0d\u4ea4\u7684\u7ebf\u6bb5 $(a,a)$ \u548c $(a,b)$\uff0c\u6269\u57df\u4e4b\u540e\uff0c$(a,a)$ \u7684\u53f3\u7aef\u70b9\u53d8\u6210\u4e86 $2 \\times a+1$\uff0c$(a,b)$ \u7684\u5de6\u7aef\u70b9\u53d8\u6210\u4e86 $2 \\times a+1$\uff0c\u76f8\u5bf9\u4f4d\u7f6e\u4fdd\u6301\u4e0d\u53d8\u3002\u800c\u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u4ea4\u7684\u7ebf\u6bb5\uff0c\u6269\u57df\u4e4b\u540e\u4e0d\u4ea4\u8fd8\u662f\u4e0d\u4ea4\uff0c\u6ca1\u6709\u53d8\u5316\u3002\n\n\u6ce8\u610f\u8981\u5148\u6269\u57df\u518d\u79bb\u6563\u5316\uff0c\u5426\u5219\u4f1a T \u6389\u3002\n\n### Code\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n\n#define int long long\n#define INF 1145141919\n\nnamespace Dinic_mcmf {\n    struct Node {\n        int to,nxt,dis,val;\n    }e[100001];\n\n    int tot=1,s,t,mcmf,head[10001],cur[10001],vis[10001],dis[10001];\n\n    void add(int x,int y,int k,int v) { e[++tot]=(Node){y,head[x],k,v},head[x]=tot; }\n\n    bool SPFA(int n) {\n        for (int i=1;i<=n;i++) dis[i]=-1e9;\n        memset(vis,0,sizeof vis); vis[s]=1;\n        std::queue<int> q; q.push(s);\n        while (!q.empty()) {\n            int x=q.front(); q.pop(); vis[x]=0;\n            for (int i=head[x];i;i=e[i].nxt) {\n                int y=e[i].to; cur[x]=head[x];\n                if (e[i].dis and dis[y]<dis[x]+e[i].val) {\n                    dis[y]=dis[x]+e[i].val;\n                    if (!vis[y]) q.push(y),vis[y]=1;\n                }\n            }\n        }\n        return dis[t]!=-1e9;\n    }\n\n    int dfs(int x,int flow) {\n        if (x==t) return flow;\n        int res=0; vis[x]=1;\n        for (int i=cur[x];i and flow;i=e[i].nxt) {\n            int y=e[i].to; cur[x]=i;\n            if (e[i].dis and dis[y]==dis[x]+e[i].val and !vis[y]) {\n                int k=dfs(y,std::min(e[i].dis,flow));\n                e[i].dis-=k,e[i^1].dis+=k,res+=k,flow-=k,mcmf+=k*e[i].val;\n            }\n        }\n        vis[x]=0; return res;\n    }\n}\nusing namespace Dinic_mcmf;\nusing namespace std;\nint n,k,cnt,ans;\nint l[100001],r[100001],len[100001],b[100001];\n\nint ddis(int x1,int y1,int x2,int y2) { return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)); }\n\nsigned main() {\n    scanf(\"%lld%lld\",&n,&k);\n    for (int i=1,x1,y1,x2,y2;i<=n;i++) {\n        scanf(\"%lld%lld%lld%lld\",&x1,&y1,&x2,&y2); len[i]=ddis(x1,y1,x2,y2);\n        x1*=2,x2*=2;\n        if (x1==x2) x2++;\n        else x1++;\n        l[i]=x1,r[i]=x2,b[++cnt]=l[i],b[++cnt]=r[i];\n    }\n    sort(b+1,b+cnt+1); \n    cnt=unique(b+1,b+cnt+1)-b-1; t=cnt+1;\n    for (int i=1;i<=n;i++) l[i]=lower_bound(b+1,b+cnt+1,l[i])-b,r[i]=lower_bound(b+1,b+cnt+1,r[i])-b;\n    for (int i=2;i<=cnt;i++) add(i-1,i,k,0),add(i,i-1,0,0);\n    add(s,1,k,0),add(1,s,0,0);\n    add(cnt,t,k,0),add(t,cnt,0,0);\n    for (int i=1;i<=n;i++) add(l[i],r[i],1,len[i]),add(r[i],l[i],0,-len[i]);\n    while (SPFA(t)) ans+=dfs(s,INF);\n    printf(\"%lld\\n\",mcmf);\n    return 0;\n}\n```",
        "postTime": 1666601204,
        "uid": 420129,
        "name": "Nt_Tsumiki",
        "ccfLevel": 5,
        "title": "\u9898\u89e3\uff1a\u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898"
    },
    {
        "content": "# P3357\u672c\u4eba\u7684\u9898\u89e3\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P3357)\n\n\u7f51\u7edc\u6d41\u9898\u76ee\uff0c\u5173\u952e\u5728\u4e8e\u5efa\u6a21\u3002\n\n\u8fd9\u9898\u662f\u4e2a\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\uff0c\u6700\u5927\u6d41\u4fdd\u8bc1k\u53ef\u91cd\uff0c\u6700\u5927\u8d39\u7528\u5c31\u662f\u9898\u76ee\u6c42\u7684\u6700\u957f\u7684\u957f\u5ea6\u3002\n\n\u5efa\u6a21\uff1a\n\n0. \u5bf9\u4e8e\u8f93\u5165\u7684$x_i$\u548c$y_i$\uff0c\u6211\u4eec\u8ba1\u7b97\u6b64\u7ebf\u6bb5\u7684\u957f\u5ea6$Len_i$\uff1a\n\n$Len_i$ = $\\sqrt{x^2_i+y^2_i}$\n\n1. $S$->$1$ \u6d41$k$\uff0c\u8d39\u75280\n\n1. $i-1$\u5230$i$\uff0c\u6d41$k$\uff0c\u8d39\u75280\n\n1. $i$->$j$($i\\le j$) \u56e0\u4e3a\u53ef\u80fd\u51fa\u73b0$x$\u5750\u6807\u76f8\u540c\uff08\u7ebf\u6bb5\u5e73\u884c\u4e8e$y$\u8f74\uff09\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u62c6\u70b9\uff0c\u6bcf\u4e2a\u70b9\u62c6\u4e3a$i*2-1$\u548c$i*2$\u3002\u6211\u4eec\u8bbe\u8fd9\u4e24\u4e2a\u70b9\u4e3a$X_i$\u548c$Y_i$\u3002\u5c06$i$\u548c$j$\u79bb\u6563\u5316\u4e4b\u540e\uff1a\u82e5$i=j$\uff0c\u90a3\u4e48\u8fde$X_i$\u548c$Y_i$\uff1b\u82e5$i\\neq j$\uff0c\u8fde$Y_i$\u548c$X_j$\u3002\u6d41\u90fd\u662fk\uff0c\u8d39\u7528\u90fd\u662f$Len_i$\u3002\n\n1. \u8fde$X_n$,$Y_n$\u5230$t$\uff0c\u6d41$k$\uff0c\u8d39\u75280\u3002\n\n\u5efa\u6a21\u6bd5\u3002\n\n\u7136\u540e\u5c31\u662fmcmf\u677f\u5b50\uff0c\u6ce8\u610f\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u6700\u597d\u662f\u8fb9\u6743\u53d6\u53cd\u7136\u540e\u8dd1\u6b63\u5e38\u7684\uff0c\u4f46\u662f\u672c\u4eba\u6bd4\u8f83\u61d2\u5c31\u76f4\u63a5\u5728SPFA\u4e2d\u6362\u4e86\u4e2a\u7b26\u53f7\uff1a\n```cpp\nif(f&&dist[v]>dist[u]+w)\n```\n\u8fd9\u91cc\u628a`>`\u76f4\u63a5\u6539\u4e86`<`\uff0c\u6570\u636e\u5c0f\u7684\u8bdd\u5e94\u8be5\u6ca1\u95ee\u9898\u3002\n\n\u6ce8\u610f\u521d\u59cb\u5316\u8981\u6539\u6210\n```cpp\nmemset(dist,0xcf,sizeof(dist));\n```\n\u5176\u4ed6\u6ca1\u4ec0\u4e48\u4e86\uff0c\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int N=1000+5,INF=0x3f3f3f3f;\nstruct Edge{int u,v,f,w,nxt;}e[N*N];\nint h[N],flow[N],dist[N],pre[N],last[N];\nbool vis[N];\nint l[N],r[N],a[N*2],len[N];\nint n,m,s,t,k,tot=1,mc,mf;\ninline void add(int u,int v,int f,int w){//\u5efa\u56fe\uff0c\u5efa\u53cc\u5411\u8fb9\n\te[++tot]=(Edge){u,v,f,w,h[u]};h[u]=tot;\n\te[++tot]=(Edge){v,u,0,-w,h[v]};h[v]=tot;\n}\nbool spfa(){\n\tmemset(dist,0xcf,sizeof(dist));//\u8dd1\u6700\u5927\u8d39\u7528\uff0cdist\u8981\u8d4b\u65e0\u7a77\u5c0f\n\tmemset(vis,0,sizeof(vis));\n\tmemset(flow,0x3f,sizeof(flow));\n\tqueue<int>q;\n\tq.push(s);\n\tdist[s]=0;\n\tvis[s]=1;\n\tpre[t]=-1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=h[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].v,f=e[i].f,w=e[i].w;\n\t\t\tif(f&&dist[v]<dist[u]+w){//\u8fd9\u91cc\u6539\u4e86\u7b26\u53f7\n\t\t\t\tdist[v]=dist[u]+w;\n\t\t\t\tflow[v]=min(flow[u],f);\n\t\t\t\tpre[v]=u;\n\t\t\t\tlast[v]=i;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn pre[t]!=-1;\n}\nvoid mcmf(){//mcmf\u677f\u5b50\n\twhile(spfa()){\n\t\tmf+=flow[t];\n\t\tmc+=flow[t]*dist[t];\n\t\tint now=t;\n\t\twhile(now!=s){\n\t\t\te[last[now]].f-=flow[t];\n\t\t\te[last[now]^1].f+=flow[t];\n\t\t\tnow=pre[now];\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1,y1,y2;i<=n;++i){\n\t\tscanf(\"%d%d%d%d\",&l[i],&y1,&r[i],&y2);\n\t\tif(l[i]>r[i]) swap(l[i],r[i]);\n\t\tlen[i]=sqrt(pow(y1-y2,2)+pow(r[i]-l[i],2));//\u8ba1\u7b97Len[i]\n\t\tl[i]<<=1,r[i]<<=1;\n\t\tif(l[i]==r[i]) r[i]++;\n\t\telse l[i]++;\n\t\ta[i]=l[i],a[i+n]=r[i];\n\t}\n    //\u4e0b\u9762\u662f\u62c6\u70b9\n\tsort(a+1,a+2*n+1);\n\tm=unique(a+1,a+2*n+1)-a-1;s=m+1,t=m+2;\n\tfor(int i=1,L,R;i<=n;++i){\n\t\tL=lower_bound(a+1,a+m+1,l[i])-a;\n\t\tR=lower_bound(a+1,a+m+1,r[i])-a; \n\t\tadd(L,R,1,len[i]);\n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tif(i==1) add(s,i,k,0);\n\t\telse{\n\t\t\tadd(i-1,i,k,0);\n\t\t\tif(i==m) add(i,t,k,0),add(i,t,k,0);\n\t\t}\n\t}\n\tmcmf();\n\tprintf(\"%d\\n\",mc);//\u8f93\u51fa\u6700\u5927\u8d39\u7528\n\treturn 0;\n}\n```\n",
        "postTime": 1583319591,
        "uid": 160484,
        "name": "cunzai_zsy0531",
        "ccfLevel": 7,
        "title": "P3357\u9898\u89e3"
    },
    {
        "content": "~~\u5199\u5b8cP3358\u9898\u89e3\u518d\u8fc7\u6765\u6c34\u4e00\u6ce2\uff0c\u53cc\u500d\u7ecf\u9a8cQWQ~~\n\n\u524d\u7f6e\u9898\u89e3\uff1a[P3358 \u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898 \u9898\u89e3](https://www.luogu.org/blog/ZPC2048/solution-p3358)\n\n\u672c\u9898\u601d\u8def\u4e0eP3358\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837\uff0c\u672c\u9898\u5c31\u662f\u5c06\u4e00\u6761\u7ebf\u6bb5\u6295\u5f71\u5230$x$\u8f74\u4e0a\u53bb\u505aP3358\u3002\u9664\u4e86\u9700\u8981\u7279\u5224$x_{0}=x_{1}$\uff0c\u5373\u7ebf\u6bb5\u5782\u76f4\u4e8e$x$\u8f74\u7684\u60c5\u51b5\u5916\uff0c\u4ee3\u7801\u51e0\u4e4e\u4e0d\u7528\u6539\u3002**\u6ce8\u610f$length_{i}$\u7684\u8ba1\u7b97\u7206$int$** ~~\u5341\u5e74OI\u4e00\u573a\u7a7a\uff0c\u4e0d\u5f00long long\u89c1\u7956\u5b97~~\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\n\nusing namespace std;\n\nconst int MAXN = 500 + 20;\nconst int MAXE = MAXN * 400;\nconst long long INF = 0x3f3f3f3f3f3f3f3f;\n\nstruct Segment {\n    long long l, r, length;\n    Segment(long long l = 0, long long r = 0, long long length = 0) :\n        l(l), r(r), length(length) {};\n    bool operator < (const Segment &A) const {\n        return l == A.l ? r < A.r : l < A.l;\n    }\n}I[MAXN];\n\nstruct Edge {\n    int bg, ed, nxt, flow;\n    long long cost;\n    Edge(int bg = 0, int ed = 0, int nxt = 0, int flow = 0, long long cost = 0) :\n        bg(bg), ed(ed), nxt(nxt), flow(flow), cost(cost) {};\n};\n\nstruct Map {\n    Edge edge[MAXE];\n    int head[MAXN << 1], count = 1;\n    inline void insert(int bg, int ed, int flow, long long cost) {\n        edge[++count] = Edge(bg, ed, head[bg], flow, cost);\n        head[bg] = count;\n        edge[++count] = Edge(ed, bg, head[ed], 0, -cost);\n        head[ed] = count;\n    }\n}A;\n\nlong long dis[MAXN << 1];\nint pre[MAXN << 1][3];//node edge flow\nbool vis[MAXN << 1];\n\nbool bfs(int s, int t) {\n    memset(dis, 0x3f, sizeof(dis));\n    memset(pre, 0, sizeof(pre));\n    memset(vis, false, sizeof(vis));\n    queue<int> que;\n    que.push(s);\n    dis[s] = 0;\n    pre[s][2] = 0x3f3f3f3f;\n    while (!que.empty()) {\n        int now = que.front();\n        que.pop();\n        vis[now] = false;\n        for (int i = A.head[now]; i; i = A.edge[i].nxt) {\n            int v = A.edge[i].ed;\n            if (dis[v] > dis[now] + A.edge[i].cost && A.edge[i].flow) {\n                dis[v] = dis[now] + A.edge[i].cost;\n                pre[v][0] = now;\n                pre[v][1] = i;\n                pre[v][2] = min(pre[now][2], A.edge[i].flow);\n                if (!vis[v]) {\n                    que.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n    }\n    return dis[t] != INF;\n}\n\nlong long EK(int s, int t) {\n    long long ans = 0;\n    while (bfs(s, t)) {\n        int now = t, change = pre[t][2];\n        while (pre[now][0]) {\n            int e = pre[now][1];\n            A.edge[e].flow -= change;\n            A.edge[e ^ 1].flow += change;\n            now = pre[now][0];\n        }\n        ans += change * dis[t];\n    }\n    return ans;\n}\n\nint main() {\n    int n, k, s, S, T;\n    long long x0, y0, x1, y1;\n    scanf(\"%d%d\", &n, &k);\n    s = n * 2 + 1; S = s + 1; T = S + 1;\n    for (int i = 1; i <= n; ++i) {\n        scanf(\"%lld%lld%lld%lld\", &x0, &y0, &x1, &y1);\n        I[i] = Segment(min(x0, x1), max(x0, x1), (long long)floor(sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1))));\n    }\n    sort(I + 1, I + n + 1);\n    A.insert(S, s, k, 0);\n    for (int i = 1; i <= n; ++i) {\n        A.insert(i, i + n, 1, -I[i].length);\n        A.insert(s, i, 1, 0);\n        A.insert(i + n, T, 1, 0);\n        for (int j = i + 1; j <= n; ++j) {\n            if (I[i].l == I[i].r && I[j].l == I[j].r && I[i].l == I[j].l) continue;//\u7279\u5224\u4e00\u4e0b\u4e24\u6761\u91cd\u5408\u4e14\u5782\u76f4\u4e8ex\u8f74\u7684\u7ebf\u6bb5\n            if (I[i].r <= I[j].l || I[i].l >= I[j].r) {\n                A.insert(i + n, j, 1, 0);\n            }\n        }\n    }\n    printf(\"%lld\\n\", -EK(S, T));\n}\n```\n",
        "postTime": 1552648258,
        "uid": 10337,
        "name": "ZPC2048",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3357 \u3010\u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898\u3011"
    }
]