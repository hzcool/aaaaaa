[
    {
        "content": "\u9898\u76ee\u7406\u89e3\u8d77\u6765\u6709\u70b9\u56f0\u96be\uff08\u53cd\u6b63\u5bf9\u4e8e\u6211\u8fd9\u6837\u7684\u82f1\u8bed\u6e23\u6e23\u662f\u8fd9\u6837\uff09\n\n\n\u9898\u76ee\u610f\u601d\u5c31\u662f\u6709n\u4e2a\u5e72\u8349\u5305\uff0c\u5c06\u4e00\u6761\u8def\u5206\u6210\u4e86n-1\u6bb5\u533a\u95f4\uff0c\u628a\u8d77\u70b9\u8bbe\u5728\u8fd9n-1\u6bb5\u7684\u6bcf\u4e00\u6bb5\u4e2d\uff0c\u5224\u65ad\u4ece\u90a3\u91cc\u5f00\u59cb\u662f\u5426\u80fd\u591f\u9003\u8131\uff0c\u8f93\u51fa\u6240\u6709\u4e0d\u80fd\u9003\u8131\u7684\u533a\u95f4\u957f\u5ea6\u4e4b\u548c\u3002\n\n\n\u8fd9\u6837\u66b4\u529b\u5c31\u5f88\u597d\u6253\u4e86\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6bb5\u90fd\u66b4\u529b\u5224\u65ad\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u590d\u6742\u5ea6\u5f88\u9ad8\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4f18\u5316\u3002\n\n\u53ef\u4ee5\u60f3\u5230\u5bf9\u4e8e\u4e00\u6bb5\u533a\u95f4A\uff0c\u6a21\u62df\u4ee5\u533a\u95f4A\u4e3a\u8d77\u70b9\u5e76\u8bd5\u56fe\u9003\u8131\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u95ef\u5165\u4e86\u4e00\u6bb5\u5df2\u7ecf\u5224\u65ad\u4e3a\u53ef\u4ee5\u9003\u8131\u7684\u533a\u95f4B\uff0c\u90a3\u4e48\u533a\u95f4A\u4e5f\u662f\u53ef\u4ee5\u9003\u8131\u7684\u3002\n\n\u8fd9\u6837\u5c31\u5f00\u4e00\u4e2abool\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b\u90a3\u4e9b\u6bb5\u53ef\u4ee5\u9003\u8131\u5c31\u597d\u4e86\u3002\n\n\u590d\u6742\u5ea6\u5f88\u7384\u5b66\uff0c\u4ed4\u7ec6\u60f3\u60f3\u8fd8\u662f\u633a\u5c0f\u7684~~\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nstruct bao\n{\n    int x,d;\n}b[101000];\nint read()\n{\n    int f=1,p=0;\n    char x=getchar();\n    while(x<'0'||x>'9'){if(x=='-')f=-1;x=getchar();}\n    while(x>='0'&&x<='9'){p=p*10+x-'0';x=getchar();}\n    return f*p;\n}\nint n,s,l,r,ans;\nbool f[101000];\nbool cmp(const bao &a,const bao &b){return a.x<b.x;}\nbool work(int t)\n{\n    s=b[t+1].x-b[t].x;\n    l=t,r=t+1;\n    while(1<=l&&r<=n)\n    {\n        bool kkk=0;\n        if(s>b[l].d)\n        {\n            kkk=1,l--;\n            if(f[l]){f[t]=1;return 1;}\n            s+=(b[l+1].x-b[l].x); \n        }\n        if(s>b[r].d)\n        {\n            kkk=1,r++;\n            if(f[r-1]){f[t]=1;return 1;}\n            s+=(b[r].x-b[r-1].x);\n        }\n        if(!kkk)return 0;\n    }\n}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++)b[i].d=read(),b[i].x=read();\n    sort(b+1,b+n+1,cmp);\n    f[0]=1,f[n]=1;\n    for(int i=1;i<n;i++)\n        if(!work(i))ans+=b[i+1].x-b[i].x;\n    cout<<ans;\n    return 0;\n}\n\n```",
        "postTime": 1509162278,
        "uid": 21904,
        "name": "XY_ATOE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3127 \u3010[USACO15OPEN]\u88ab\u56f0\u5728haybales\uff08\u91d1\uff09Trappe\u2026\u3011"
    },
    {
        "content": "https://li-mi.github.io/2017/06/03/Usaco2015-Open-Gold-Trapped-in-the-Haybales/\n\n\u9898\u76ee\u597d\u7ed5\u554a\u3002\u3002\n\n\u5927\u6982\u5c31\u662f\u6c42Bessie\u7ad9\u5728\u54ea\u91cc\u9003\u4e0d\u51fa\u53bb\u3002\u3002\n\n\u5f53\u7136\u53ef\u4ee5\u66b4\u529b\u3002\u3002100000\uff0c\u663e\u7136\u53ea\u80fd\u7528O(nlogn)\uff0c\u5b98\u65b9\u7684\u6807\u7a0b\u4e5f\u662f\u7528\u8fd9\u4e2a\u590d\u6742\u5ea6\u7684\u3002\n\n\u5047\u5982Bessie\u4ece\u4e00\u4e2a\u5f88\u4f4e\u7684\u533a\u95f4\u4e00\u76f4\u5f80\u5916\u51b2\uff0c\u7ed3\u679c\u649e\u5728\u4e86\u5f88\u9ad8\u7684\u4e00\u4e2a\u533a\u95f4\u7684\u5e72\u8349\u5806\u4e0a\u3002\u5982\u679c\u4ece\u4f4e\u533a\u95f4\u5f80\u9ad8\u533a\u95f4\u6c42\u89e3\uff0c\u4e0d\u662f\u5f88\u4e8f\u5417\u3002\u3002\u4e8e\u662f\u4ece\u9ad8\u533a\u95f4\u5411\u4f4e\u533a\u95f4\u6c42\u89e3\u2193\n\n\u5148\u628a\u5e72\u8349\u5806\u7684\u9ad8\u5ea6\u6392\u9012\u51cf\u5e8f\uff0c\u5c06\u6bcf\u4e2a\u9ad8\u5ea6\u503c\u63d2\u5165set\uff0c\u5728set\u91cc\u9762\u4e8c\u5206\u627e\u5b83\u5de6\u53f3\u76f8\u90bb\u7684\u5e72\u8349\u5806\uff0c\n\n\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u6b63\u597d\u80fd\u628aBessie\u62e6\u4f4f\uff0c\u5c31\u628a\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u5e72\u8349\u5806\u6807\u8bb0\u4e00\u4e0b\uff0c\u4ee5\u540e\u5c31\u4e0d\u7528\u518d\u6807\u8bb0\u4e86\u3002\n\n\u8fd9\u91cc\u91c7\u7528\u5de6\u95ed\u53f3\u5f00\uff0c\u5c06\u5de6\u8fb9\u7684\u5e72\u8349\u5806\u6807\u8bb0\uff0c\u53f3\u8fb9\u7684\u4e0d\u6807\u8bb0\u3002\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u6570\u636e\u8fbe\u52301e9\uff0c\u8981\u79bb\u6563\u5316\u3002\uff08lz\u7528map\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(nlogn)\uff0c\u4f46\u7531\u4e8e\u7528\u4e86map\u5e38\u6570\u4f1a\u5927\u8dd1\u5f97\u6162\u3002\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ninline int read()\n{\n    int x=0;char ch=getchar();\n    while(ch<'0'||ch>'9'){ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x;\n}\nint n,pos[100008],l,r,ans;\nstruct node{\n    int s,p;\n}a[100008];\nmap<int,int> m;\nset<int> s;\nset<int>::iterator si;\nbool vis[100008];\ninline bool cmp(const int a,const int b){return a<b;}\ninline bool cmp2(const node a,const node b){return a.s>b.s;}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++){\n        a[i].s=read();a[i].p=read();\n        pos[i]=a[i].p;\n    }\n    sort(pos+1,pos+n+1,cmp);\n    for(int i=1;i<=n;i++)    m[pos[i]]=i;\n    sort(a+1,a+n+1,cmp2);\n    s.insert(a[1].p);\n    for(int i=2;i<=n;i++){\n        if(*s.begin()<a[i].p){\n            si=--s.upper_bound(a[i].p);\n            l=m[*si];r=m[a[i].p];\n            if(pos[r]-pos[l]<=a[i].s&&!vis[l]){\n                for(int j=l;j<r;j++)    vis[j]=1;\n            }\n        }\n        if(*--s.end()>a[i].p){\n            si=s.upper_bound(a[i].p);\n            l=m[a[i].p];r=m[*si];\n            if(pos[r]-pos[l]<=a[i].s&&!vis[l]){\n                for(int j=l;j<r;j++)    vis[j]=1;\n            }\n        }\n        s.insert(a[i].p);\n    }\n    for(int i=1;i<n;i++){\n        if(vis[i])    ans+=pos[i+1]-pos[i];\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1496475283,
        "uid": 15090,
        "name": "littleming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3127 \u3010[USACO15OPEN]\u88ab\u56f0\u5728haybales\uff08\u91d1\uff09Trappe\u2026\u3011"
    },
    {
        "content": "\u52a0\u4e86\u7ffb\u8bd1\u4e4b\u540e\u597d\u53d7\u591a\u4e86\u2026\u2026\n\n\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u4ecd\u6709\u751f\u758f\u8bf7\u5173\u7167\u3002\n\n\u5176\u5b9e\u8fd9\u4e00\u9898\u8fdc\u8fdc\u6ca1\u6709\u6807\u7b7e\u4e0a\u5199\u7684\u90a3\u4e48\u96be\uff0c\u66b4\u529b\u52a0\u4f18\u5316\u5c31\u80fd\u8fc7\u3002\u9996\u5148\u6734\u7d20\u5730\u601d\u8003\u4e00\u4e0b\uff0c\u8fd9\u9898\u7684\u4f4d\u7f6e\u8303\u56f4\u4e00\u76f4\u5230$10^9$\uff0c\u4e00\u4e2a\u70b9\u4e00\u4e2a\u70b9\u6765\u7edd\u5bf9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u800c\u5bf9\u4e8e\u4e00\u4e2a\u4e24\u4e2a\u76f8\u90bb\u8349\u5806\u56f4\u6210\u7684\u533a\u95f4\uff0c\u8981\u662f\u5176\u4e2d\u4e00\u4e2a\u70b9\u80fd\u591f\u8dd1\u51fa\u53bb\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u5176\u4ed6\u70b9\u4e5f\u80fd\u8dd1\u51fa\u53bb\u3002\u5355\u4e2a\u533a\u95f4\u5185\u7684\u52a0\u901f\u503c\u7b49\u4e8e\u8be5\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u4e00\u65e6\u5230\u8fbe\u53e6\u4e00\u4e2a\u533a\u95f4\uff0c\u8fd9\u4e00\u6b21\u9003\u8131\u7684\u52a0\u901f\u503c\u5c31\u6700\u5927\u4e3a\u539f\u52a0\u901f\u503c+\u8be5\u533a\u95f4\u7684\u957f\u5ea6\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6700\u7b80\u5355\u6700\u7b80\u5355\uff0c\u6700\u66b4\u529b\u6700\u66b4\u529b\u7684\u7b97\u6cd5\uff0c\u4e00\u4e2a\u533a\u95f4\u4e00\u4e2a\u533a\u95f4\u5224\u65ad\uff0c\u5982\u679c\u80fd\u591f\u8dd1\u51fa\u53bb\u5c31\u8ba9ans\u52a0\u4e0a\u8be5\u533a\u95f4\u7684\u957f\u5ea6\u3002\u590d\u6742\u5ea6\u663e\u7136\u662f$n^2$\uff0c\u4f1aTLE66\u5206\u3002\u7136\u540e\u6211\u4eec\u5f80\u4e0a\u53e0\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u4f18\u5316\u3002\n\n\u5982\u679c\u5728\u5411\u5de6\u53f3\u732a\u7a81\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u5165\u4e86\u4e00\u4e2a\u539f\u672c\u5c31\u80fd\u8dd1\u51fa\u53bb\u7684\u533a\u95f4\uff0c\u7531\u4e8e\u662f\u4ece\u65c1\u8fb9\u7684\u533a\u95f4\u8fdb\u5165\u8be5\u533a\u95f4\uff0c\u6240\u4ee5\u8fd9\u65f6\u7684\u52a0\u901f\u503c\u4e00\u5b9a\u6bd4\u539f\u672c\u5728\u8be5\u533a\u95f4\u5f00\u59cb\u65f6\u5927\uff0c\u800c\u539f\u672c\u7684\u52a0\u901f\u503c\u5c31\u8db3\u4ee5\u8dd1\u51fa\u53bb\uff0c\u90a3\u4e48\u8fd9\u65f6\u7edd\u5bf9\u4e5f\u80fd\u8dd1\u51fa\u53bb\u3002\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u4e0b\u80fd\u591f\u8dd1\u51fa\u53bb\u7684\u533a\u95f4\uff0c\u6216\u8005\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u4e0b\u6700\u53f3\u8fb9\u7684\u80fd\u8dd1\u51fa\u53bb\u7684\u533a\u95f4\u7684\u7f16\u53f7\uff0c\u4e00\u65e6\u8fdb\u5165\u8be5\u533a\u95f4\u5c31\u66f4\u65b0\u8be5\u53d8\u91cf\uff08\u4e0d\u8fc7\u8fd9\u70b9\u7a7a\u95f4\u8fd8\u6ca1\u5230\u7528\u4e0d\u8d77\u7684\u5730\u6b65\uff09\u3002\n\n\u8fd9\u9898\u7684\u6570\u636e\u5f3a\u5ea6\u663e\u7136\u4e0d\u8db3\uff0c\u4e0a\u9762\u7684\u672c\u8d28\u8fd8\u662f$n^2$\u7b97\u6cd5\uff0c\u4e00\u65e6\u8bbe\u7f6e\u4e00\u4e2a\u5168\u90e8\u90fd\u8dd1\u4e0d\u51fa\u53bb\u7684\u6570\u636e\u70b9\u5c31\u80fd\u5361\u6d17\u4f60\uff0c\u5b98\u65b9\u7684\u6b63\u89e3\u4e5f\u8981\u6c42\u7528$nlogn$\u7b97\u6cd5\uff0c\u4ecd\u7136\u63a8\u8350\u7814\u7a76\u4e00\u4e0b\u3002\u4ee5\u4e0b\u4e3a\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;;\nlong long n,ans;\nbool mk[100005];\nstruct grass{\n    long long s,p;//\u5927\u5c0f\u4e0e\u4f4d\u7f6e \n}gra[100005];\nbool cmp(grass a,grass b){\n    return a.p<b.p;\n}\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++)\n        cin>>gra[i].s>>gra[i].p;\n    sort(gra+1,gra+n+1,cmp);//\u4f7f\u8349\u5806\u6309\u7167\u4f4d\u7f6e\u6392\u5e8f \n    for(int i=1;i<n;i++){//\u679a\u4e3e\u8d77\u59cb\u70b9\u4e3a\u7b2ci\u4e2a\u8349\u5806\u7684\u533a\u95f4 \n        int now=gra[i+1].p-gra[i].p,l=i,r=i+1;\n        bool flag=1;\n        while(1){\n            bool done=1;\n            if(gra[l].s<now&&l>=0){//\u5411\u5de6\u732a\u7a81 \n                done=0;\n                now+=gra[l--].p-gra[l].p;\n            }\n            if(gra[r].s<now&&r<=n+1){//\u5411\u53f3\u732a\u7a81 \n                done=0;\n                now+=gra[r+1].p-gra[r++].p;\n            }\n            if(r==n+1||l==0||mk[l]==1){//\u5230\u8fbe\u8fb9\u754c\u6216\u8005\u5411\u5de6\u732a\u7a81\u5230\u4e86\u4e00\u4e2a\u672c\u8eab\u5c31\u80fd\u51fa\u53bb\u7684\u533a\u95f4 \n                flag=0;\n                break;\n            }\n            if(done)\n                break;//\u5728\u80fd\u591f\u6253\u7834\u8349\u5806\u7684\u60c5\u51b5\u4e0b\u4e00\u76f4\u5c1d\u8bd5\u5411\u5de6\u53f3\u732a\u7a81 \n        }\n        if(flag)\n            ans+=gra[i+1].p-gra[i].p;\n        else mk[i]=1;//flag==0\u8be5\u533a\u95f4\u80fd\u591f\u8dd1\u51fa\u53bb\uff0c\u8bb0\u5f55\u4e0b\u6765\u3002 \n    }\n    cout<<ans;\n}\n```\nI'm Schwarzkopf Henkal.",
        "postTime": 1570513020,
        "uid": 251723,
        "name": "Schwarzkopf_Henkal",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3127 \u3010[USACO15OPEN]\u88ab\u56f0\u5728haybales\uff08\u91d1\uff09Trappe\u2026\u3011"
    },
    {
        "content": "## Description\n\n\u7ed9\u4f60 $n$ \u4e2a\u5e72\u8349\u6346\uff0c\u628a\u8fd9\u6761\u8def\u5206\u6210\u4e86 $n-1$ \u4e2a\u533a\u95f4\uff0c\u95ee\u4f60\u4ece\u591a\u5c11\u4e2a\u70b9\u5f00\u59cb\u8d70\uff0c\u80fd\u591f\u6210\u529f\u9003\u8131\u3002\n\n## Solution\n\n\u5148\u6309\u5750\u6807\u6392\u5e8f\uff0c\u663e\u7136\u5728\u4e24\u4e2a\u5e72\u8349\u6346\u4e4b\u95f4\u7684\u6240\u6709\u70b9\u8981\u4e48\u90fd\u80fd\u9003\u8131\uff0c\u8981\u4e48\u90fd\u4e0d\u80fd\u9003\u8131\uff0c\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u533a\u95f4\u7136\u540e\u66b4\u529b\u53bb\u8dd1\uff0c\u8fd9\u6837\u662f $O(n^2)$ \u7684\uff0c\u6709 79 \u5206\u7684\u597d\u6210\u7ee9\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u8fd8\u662f\u679a\u4e3e\u533a\u95f4\uff0c\u5b9a\u4e49\u6570\u7ec4 $t$ \u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u662f\u5426\u80fd\u9003\u51fa\u53bb\u3002\u4e5f\u5c31\u662f\u8bf4\u5f53 $t_i$ \u7b49\u4e8e $1$ \u65f6\uff0c\u4ee3\u8868\u8fd9\u4e2a\u533a\u95f4\u53ef\u4ee5\u9003\u51fa\u53bb\uff0c\u5426\u5219\u9003\u4e0d\u51fa\u53bb\u3002\u90a3\u4e48\u6211\u4eec\u66b4\u529b\u8dd1\u5230\u4e00\u4e2a\u70b9 $x$ \u65f6\uff0c\u5982\u679c $t_x$ \u5df2\u7ecf\u88ab\u6807\u8bb0\u4e3a $1$ \u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u53ef\u4ee5\u8dd1\u51fa\u53bb\uff0c\u5e76\u628a\u5f53\u524d\u533a\u95f4\u6807\u8bb0\u4e3a $1$\u3002\u5426\u5219\u5c31\u4e00\u76f4\u66b4\u529b\u8d70\uff0c\u76f4\u5230\u80fd\u591f\u76f4\u63a5\u5224\u65ad\u8d70\u4e0d\u51fa\u53bb\u3002\u5927\u6982\u662f $O(n\\log n)$ \u7684\u3002\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\n#define db(x) cerr << #x << '=' << x << endl;\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define dbg debug(\"*** Passing [%s] in LINE %d\\n\", __FUNCTION__, __LINE__)\n\nusing namespace std;\n\nconst int kMaxN = 1e5 + 5;\n\nstruct Node {\n  int s, p;\n\n  friend bool operator < (const Node& n1, const Node& n2) {\n    return n1.p < n2.p;\n  }\n} a[kMaxN];\n\nint n, ans;\nint s[kMaxN], p[kMaxN];\nbool tra[kMaxN];\n\nbool check(int x) {\n  int l = x, r = x + 1;\n  for (; l && r <= n; ) {\n    int nw = p[r] - p[l];\n    if (nw <= s[l] && nw <= s[r]) {\n      return 0;\n    }    \n    if (nw > s[l]) {\n      --l;\n      if (!l || tra[l]) {\n        return tra[x] = 1;\n      }\n    }\n    if (nw > s[r]) {\n      ++r;\n      if (r > n || tra[r - 1]) {\n        return tra[x] = 1;\n      }\n    }\n  }\n  return 0;\n}\n\nint main() {\n  cin >> n;\n  for (int i = 1; i <= n; ++i) {\n    cin >> a[i].s >> a[i].p;\n  }\n  sort(a + 1, a + 1 + n);\n  for (int i = 1; i <= n; ++i) {\n    s[i] = a[i].s, p[i] = a[i].p;\n  }\n  tra[0] = tra[n] = 1;\n  for (int i = 1; i < n; ++i) {\n    if (!check(i)) {\n      ans += p[i + 1] - p[i];\n    }\n  }\n  cout << ans << endl;\n  return 0;\n}\n```",
        "postTime": 1660658255,
        "uid": 176843,
        "name": "Scarab",
        "ccfLevel": 0,
        "title": "[USACO15OPEN]Trapped in the Haybales G \u9898\u89e3"
    }
]