[
    {
        "content": "```plain\n\u9996\u5148\u8fd9\u9898\u4e0d\u7528\u624b\u5199\u5e73\u8861\u6811\uff0c\u4e0d\u7528\u5806\uff0c\u53ea\u7528\u4e24\u4e2a\u6570\u7ec4\uff0c\u4e24\u4e2amultiset\u548c\u4e00\u4e2a\u53d8\u91cf\u5c31\u597d\u4e86......\n\u7136\u800c\u8bed\u6587\u795e\u9898\u4e0d\u597d\u770b\u61c2......\n\u9996\u5148\u7406\u89e3\u9898\u610f\uff1a\u6211\u4eec\u65e0\u975e\u5c31\u662f\u628a\u8fd9\u4e2a\u5e8f\u5217\u5206\u6210n\u6bb5\uff0c\u5728\u6bcf\u4e00\u6bb5\u7ed3\u5c3e\u63d2\u5165\u65b0\u5143\u7d20\u3002\n\u6bd4\u5982\u8bf4\u6837\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\n[5][3,9,6][1]\u3002\n\u5176\u4e2d\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4e3a\u6bcf\u4e00\u6bb5\u6240\u542b\u7684\u5143\u7d20\u3002\n\u6211\u4eec\u9996\u5148\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4\uff0cst[]\u548ced[]\u8868\u793a\u6bcf\u4e00\u6bb5\u5f00\u5934\u7684\u5143\u7d20\u548c\u7ed3\u5c3e\u7684\u5143\u7d20\u3002\u6211\u4eec\u5728\u66f4\u65b0\u76f8\u90bb\u5dee\u503c\u7684\u65f6\u5019\u53ea\u7528\u8003\u8651\u65b0\u63d2\u5165\u7684\u503c\u548c\u539f\u7ed3\u5c3e\u7684\u5dee\u4ee5\u53ca\u548c\u4e0b\u4e00\u6bb5\u5f00\u5934\u7684\u5dee\u5c31\u597d\u4e86\u3002\n\u8fd9\u6837\uff0c\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a multiset<int> \uff0c\u4e00\u4e2a\u53eb full \uff0c\u8868\u793a\u5168\u90e8 \u5143\u7d20(\u5b58\u5728\u7684\u6570\u503c)\u3002\u53e6\u4e00\u4e2a\u53eb delta \uff0c\u8868\u793a\u5168\u90e8 \u5dee\u503c \u3002\n\u63d2\u5165\u65b0\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u4ed6\u5728 full \u4e2d\u627e\u5230\u524d\u9a71\u540e\u7ee7\u5206\u522b\u4f5c\u5dee\uff0c\u66f4\u65b0 \u6392\u5e8f\u540e\u6700\u5c0f\u5dee \u3002\n\u7136\u540e\u5728 delta \u4e2d\u5220\u9664 \u73b0\u5728\u672c\u6bb5\u7ed3\u5c3e\u4e0e\u4e0b\u4e00\u6bb5\u5f00\u5934\u7684\u5dee \uff0c\u63d2\u5165 \u65b0\u503c\u4e0e\u5f53\u524d\u672c\u6bb5\u7ed3\u5c3e\u7684\u5dee \u548c \u65b0\u503c\u4e0e\u4e0b\u4e00\u6bb5\u5f00\u5934\u7684\u5dee \u3002\n\u6ce8\u610f\u5fc5\u987b\u7528 multiset \uff0c \u56e0\u4e3a\u540c\u6837\u7684\u952e\u503c\u53ef\u80fd\u51fa\u73b0\u591a\u6b21\u3002\n\u53e6\u5916\u5220\u9664\u65f6\u8981 erase \u6389 find \u540e\u7684 iterator \uff0c\u4e0d\u80fd\u76f4\u63a5 erase \u6570\u503c\uff0c\u5426\u5219\u5c31\u628a\u51fa\u73b0\u591a\u6b21\u7684\u540c\u4e00\u4e2a\u6570\u503c\u5168\u5220\u4e86......\n\u6700\u540e\u4e0a\u4ee3\u7801\u3002\u5927\u725b\u5206\u7ad9O2\u4fe1\u4ef0\u8dd1\u3002\n```\n```cpp\n#include<cstdio>\n#include<set>\n#include<cstdlib>\n#include<cctype>\nusing namespace std;\nconst int maxn=5e5+1e2;\nconst int inf=0x3f3f3f3f;\n\nmultiset<int> delta,full;\nint st[maxn],ed[maxn];\nint srt=inf;\nint n,m;\n\ninline void update_srt(int x)\n{\n    multiset<int>::iterator it = full.lower_bound(x);\n    int nw = *it - x;\n    --it;\n    nw = min( nw , x - *it );\n    srt = min( srt , nw );\n    full.insert(x);\n}\n\ninline void replac(int pos,int x)\n{\n    delta.insert( abs( x - ed[pos] ) );\n    if( pos != n )\n        delta.erase( delta.find( abs( st[pos+1] - ed[pos] ) ) ),\n        delta.insert( abs( st[pos+1] - x ) );\n    ed[pos] = x;\n}\n\ninline int getint()\n{\n    int ret = 0 , fix = 1;\n    char ch = getchar();\n    while( !isdigit(ch) )\n    {\n        if( ch == '-' )\n            fix = -1;\n        ch = getchar();\n    }\n    while( isdigit(ch) )\n        ret = ret * 10 + ( ch - '0' ),\n        ch = getchar();\n    return ret * fix;\n}\n\nint main()\n{\n    static char str[1<<5];\n    n = getint() , m = getint();\n    for(int i=1;i<=n;i++)\n        st[i] = ed[i] = getint();\n    \n    full.insert(inf),\n    full.insert(-inf);\n    for(int i=1;i<n;i++)\n        delta.insert( abs( st[i+1] - ed[i] ) );\n    for(int i=1;i<=n;i++)\n        update_srt(st[i]);\n    for(int i=1,pos,x;i<=m;i++)\n    {\n        scanf(\"%s\",str);\n        if( *str == 'I' )\n        {\n            pos = getint() , x = getint();\n            update_srt(x);\n            replac(pos,x);\n        }\n        else if( str[4] == 'S' )\n            printf(\"%d\\n\",srt);\n        else\n            printf(\"%d\\n\",*delta.begin());\n    }\n    return 0;\n}\n```",
        "postTime": 1509612806,
        "uid": 31907,
        "name": "cmd2001",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u770b\u4e86\u534a\u5929\u600e\u4e48\u5c31\u6ca1\u6709Splay+\u5806\u7684\u9898\u89e3\u5462\u3002\u3002  \n\u9898\u610f\u662f\u5f88\u7b80\u5355\u7684\u3002\u3002  \n\u5c31\u662f\u4e00\u5f00\u59cb\u6709$n$\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u76f8\u5f53\u4e8e\u4e00\u4e2a\u961f\u5217\uff0c\u603b\u7684\u5e8f\u5217\u662f\u6240\u6709\u961f\u5217\u6309\u987a\u5e8f\u62fc\u63a5\u8d77\u6765\u7684\u5e8f\u5217\uff0c\u6709\u4e0b\u9762\u4e09\u79cd\u64cd\u4f5c\u3002  \n\u64cd\u4f5c\u4e00\uff1a\u5728\u539f\u5e8f\u5217\u7b2c$k$\u4e2a\u961f\u5217\u63d2\u5165\u4e00\u4e2a$x$  \n\u64cd\u4f5c\u4e8c\uff1a\u67e5\u8be2\u603b\u5e8f\u5217\u91cc\u9762\u76f8\u90bb\u5143\u7d20\u7684\u5dee\u503c\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5c0f\u503c\u3002  \n\u64cd\u4f5c\u4e09\uff1a\u67e5\u8be2\u603b\u5e8f\u5217\u91cc\u9762\u6240\u6709\u5143\u7d20\u5dee\u503c\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5c0f\u503c\u3002 \n\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5e94\u8be5\u662f\u5efa\u7acb\u5728\u4e8c\uff0c\u4e09\u64cd\u4f5c\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u3002\u3002  \n\u6211\u4eec\u5148\u5bf9\u4e8c\uff0c\u4e09\u64cd\u4f5c\u8fdb\u884c\u8ba8\u8bba\u3002  \n  \n\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u8981\u5efa\u7acb\u4e00\u4e2a\u5e73\u8861\u6811\uff0c\u6bcf\u6b21\u63d2\u5165\u5143\u7d20\u4e4b\u540e\uff0c\u67e5\u8be2\u8fd9\u4e2a\u5143\u7d20\u548c\u6392\u540d\u76f8\u90bb\u7684\u5143\u7d20\u7684\u5dee\u503c\uff0c\u7136\u540e\u7edf\u8ba1\u51fa\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86\u3002  \n  \n\u91cd\u70b9\u662f\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u3002  \n\u53d1\u73b0\u5982\u679c\u6211\u4eec\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e2a\u5143\u7d20\u4f1a\u6253\u7834\u4e00\u5bf9\u5143\u7d20\u7684\u76f8\u90bb\u5173\u7cfb\uff0c\u5e76\u4e14\u5efa\u7acb\u4e24\u961f\u76f8\u90bb\u5173\u7cfb\uff0c\u6bcf\u6b21\u7684\u7b54\u6848\u5c31\u662f\u6240\u6709\u7684\u76f8\u90bb\u5173\u7cfb\u4e2d\u5dee\u503c\u6700\u5c0f\u7684\u4e00\u5bf9\u3002  \n\u5dee\u503c\u6700\u5c0f\u7684\u4e00\u5bf9\u5f88\u5bb9\u6613\u7528\u5806\u6765\u7ef4\u62a4\uff0c\u6211\u4eec\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u7ef4\u62a4\u4e00\u4e2a\u53ef\u4ee5\u5220\u9664\u7684\u5806\u3002  \n  \n\u8fd9\u4e2a\u5806\u4e5f\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002\u3002  \n\u6211\u4eec\u5f00\u4e24\u4e2a\u5806\uff0c\u7b2c\u4e00\u4e2a\u5806\u50a8\u5b58\u5df2\u7ecf\u63d2\u5165\u7684\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5806\u50a8\u5b58\u5df2\u7ecf\u5220\u9664\u7684\u6570\uff0c\u6bcf\u6b21\u5f39\u51fa\u65f6\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u4e24\u5806\u7684\u5806\u9876\u662f\u4e0d\u662f\u4e00\u6837\uff0c\u5982\u679c\u4e00\u6837\u5c31\u540c\u65f6\u5f39\u6389\uff0c\u76f4\u5230\u5806\u9876\u4e0d\u4e00\u6837\u3002  \n  \n\u90a3\u4e48\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5c31\u662f\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u7684\u7ed3\u5408\u4e86\u5427\u3002\u3002\u4e0d\u8bb2\u4e86\u3002\u3002  \n\u6ce8\u610f\u5e73\u8861\u6811\u5224\u65ad\u524d\u9a71\uff0c\u540e\u7ee7\u7684\u65f6\u5019\u8981\u6ce8\u610f\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u6709\u591a\u4e2a\uff0c\u5982\u679c\u6709\u591a\u4e2a\u7684\u8bdd\u8bf4\u660e\u6700\u5c0f\u503c\u662f\u96f6\u3002  \n  \n\u540c\u65f6\u6709\u4e00\u4e2a\u5361\u5e38\u5c0f\u6280\u5de7\u3002\u3002  \n\u6700\u5c0f\u503c\u662f\u4e00\u76f4\u5411\u7740$0$\u8d34\u8fd1\u7684\uff0c\u4e0d\u4f1a\u53d8\u6210\u8d1f\u6570\u4e5f\u4e0d\u4f1a\u53d8\u5927\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u53d1\u73b0\u6700\u5c0f\u503c\u53d8\u6210$0$\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u518d\u8fdb\u884c\u5e73\u8861\u6811\u64cd\u4f5c\u4e86\uff08\u5361\u4e86\u8fd9\u4e2a\u4e4b\u540e\u6211\u4ee3\u7801\u5feb\u4e86700ms\uff09\u3002  \n\u5f53\u7136\u6700\u5f00\u59cb\u7684\u65f6\u5019\u6211\u4eec\u8981\u5bf9\u6240\u6709\u7684\u6570\u636e\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u786e\u5b9a\u6bcf\u4e2a\u6570\u636e\u5728\u6700\u7ec8\u7684\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002(\u4e0d\u7136\u7528vector\u597d\u50cf\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u6ca1\u8bd5\u8fc7\uff0c\u4f60\u4eec\u53ef\u4ee5\u53bb\u8bd5\u8bd5\uff09  \n  \n\u4e0b\u9762\u5c31\u76f4\u63a5\u8d34\u4ee3\u7801\uff08\u5e38\u719f\u5de8\u5927\u4e0d\u5f00\u6c27\u6c142336ms,\u5f00\u4e86\u6c27\u6c14\u4e5f\u662f830ms\uff09\n```cpp\n#include <bits/stdc++.h>\n#define fa(x) tree[x].fa\n#define son(x,k) tree[x].ch[k]\n#define cnt(x) tree[x].cnt\n#define val(x) tree[x].val\n#define siz(x) tree[x].siz\nusing namespace std;\nconst int N=5e6+1009;\nconst int inf=(1<<31)-1;\nstruct Hp{\n\tpriority_queue<int>q1,q2;\n\tHp(){\n\t\twhile(!q1.empty())q1.pop();\n\t\twhile(!q2.empty())q2.pop();\n\t}\n\tvoid Insert(int x){\n\t\tq1.push(-x);\n\t}\n\tvoid Delete(int x){\n\t\tq2.push(-x);\n\t}\n\tint Top(){\n\t\twhile(!q2.empty()&&!q1.empty()){\n\t\t\tif(q1.top()!=q2.top())return -q1.top();\n\t\t\tq1.pop();q2.pop();\n\t\t}\n\t}\n}Heap;\nint read(){\n\tchar c;int num,f=1;\n\twhile(c=getchar(),!isdigit(c))if(c=='-')f=-1;num=c-'0';\n\twhile(c=getchar(), isdigit(c))num=num*10+c-'0';\n\treturn f*num;\n}\nint abs(int x){return x<0?-x:x;}\nint rt,tot;\nint n,m,pos[N],minn=(1<<31)-1;\nint ord[N][10],a[N],b[N];\n\nstruct Node{\n    int fa,ch[2],siz,cnt,val;\n}tree[N];\nbool chk(int x){return son(fa(x),1)==x;}\nvoid update(int x){siz(x)=siz(son(x,0))+siz(son(x,1))+cnt(x);}\nint New(int x,int pre){\n    tot++;\n    if(pre)son(pre,x>val(pre))=tot;\n    son(tot,0)=son(tot,1)=0;\n    cnt(tot)=siz(tot)=1;\n    val(tot)=x;fa(tot)=pre;\n    return tot;\n}\nvoid rotate(int x){\n    int y=fa(x),z=fa(y),k=chk(x);\n    son(z,chk(y))=x;fa(x)=z;\n    son(y,k)=son(x,k^1);fa(son(x,k^1))=y;\n    son(x,k^1)=y;fa(y)=x;\n    update(y);update(x);\n}\nvoid splay(int x,int goal=0){\n    while(fa(x)!=goal){\n        int y=fa(x),z=fa(y);\n        if(z!=goal){\n            if(chk(y)==chk(x))rotate(y);\n            else rotate(x);\n        }\n        rotate(x);\n    }\n    if(!goal)rt=x;\n}\nvoid Insert(int x){\n    int cur=rt,p=0;\n    while(cur&&val(cur)!=x)\n        p=cur,cur=son(cur,x>val(cur));\n    if(cur)cnt(cur)++;\n    else cur=New(x,p);\n    splay(cur);\n}\nvoid Find(int x){\n    if(!rt)return ;\n    int cur=rt;\n    while(son(cur,x>val(cur))&&val(cur)!=x)\n        cur=son(cur,x>val(cur));\n    splay(cur);\n}\nint Pre(int x){\n    Find(x);\n    if(val(rt)<x||(val(rt)==x&&cnt(rt)>1))return rt;\n    int cur=son(rt,0);\n    while(son(cur,1))cur=son(cur,1);\n    return cur;\n}\nint Succ(int x){\n    Find(x);\n    if(val(rt)>x||(val(rt)==x&&cnt(rt)>1))return rt;\n    int cur=son(rt,1);\n    while(son(cur,0))cur=son(cur,0);\n    return cur;\n}\nint main()\n{\n\tn=read();m=read();\n\tInsert(inf);Insert(-inf);\n\tfor(int i=1;i<=n;i++){\n\t\tint x=read();\n\t\tpos[i]=x;\n\t\tb[i]++;\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tchar c[19];\n\t\tscanf(\"%s\",c);\n\t\tint len=strlen(c);\n\t\tif(len==6){\n\t\t\tord[i][0]=1;\n\t\t\tord[i][1]=read();\n\t\t\tord[i][2]=read();\n\t\t\tb[ord[i][1]]++;\n\t\t\tord[i][3]=b[ord[i][1]];\n\t\t}else if(len==7)ord[i][0]=2;\n\t\telse ord[i][0]=3;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(i!=1)Heap.Insert(abs(pos[i]-pos[i-1]));\n\t\tif(minn!=0){\n\t\t\tInsert(pos[i]);\n\t\t\tint xx=val(Succ(pos[i])),yy=val(Pre(pos[i]));\n\t\t\tif(xx!=inf&&xx!=-inf)minn=min(minn,xx-pos[i]);\n\t\t\tif(yy!=inf&&yy!=-inf)minn=min(minn,pos[i]-yy);\n\t\t}\n\t\ta[b[i-1]+1]=pos[i];\n\t\tb[i]+=b[i-1];\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tif(ord[i][0]==1){\n\t\t\tif(minn!=0) Insert(ord[i][2]);\n\t\t\ta[b[ord[i][1]-1]+ord[i][3]]=ord[i][2];\n\t\t\t\n\t\t\tHeap.Insert(abs(a[b[ord[i][1]-1]+ord[i][3]]-a[b[ord[i][1]-1]+ord[i][3]-1]));\n\t\t\tHeap.Insert(abs(a[b[ord[i][1]-1]+ord[i][3]]-a[b[ord[i][1]]+1]));\n\t\t\tHeap.Delete(abs(a[b[ord[i][1]]+1]-a[b[ord[i][1]-1]+ord[i][3]-1]));\n\t\t\tif(minn!=0){\n\t\t\t\tint xx=val(Succ(ord[i][2])),yy=val(Pre(ord[i][2]));\n\t\t\t\tif(xx!=inf&&xx!=-inf)minn=min(minn,xx-ord[i][2]);\n\t\t\t\tif(yy!=inf&&yy!=-inf)minn=min(minn,ord[i][2]-yy);\n\t\t\t}\n\t\t}else if(ord[i][0]==2)\n\t\t\tprintf(\"%d\\n\",Heap.Top());\n\t\telse printf(\"%d\\n\",minn);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1547182278,
        "uid": 66548,
        "name": "onglu",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u662f\u771f\u6bd2\u7624\u2026\u2026\u6211\u8db3\u8db3\u8c03\u8bd5\u4e8619\u4e2a\u5c0f\u65f6\uff0c\u6362\u4e86\u56db\u79cd\u4e0d\u540c\u7684\u5199\u6cd5\uff0c\u8dd1\u53bb\u95ee\u4e86\u673a\u623f\u91cc\u7092\u9e21\u5389\u5bb3\u7684\u5927\u4f6c$qyf$3\u6b21\u624d\u628a\u5b83\u5728$TLE$\u7684\u6761\u4ef6\u4e0b\u5f00$O_2AC$\u4e86$ORZZZZ$.\n\n\u4ee3\u7801\u91cf$7k$\uff08\u7531\u4e8e\u4e0d\u4f1a\u5199\u6210\u5458\u51fd\u6570\u6240\u4ee5\u4ee3\u7801\u957f\u7684\u5f88\uff09\n\n\u6240\u4ee5\u6211\u662f\u771f\u7684\u83dc\u3002\n\n\u54e6\uff0c\u8fd9\u9053\u9898\u7684\u96be\u5ea6\u5728\u6211\u8fd9\u4e2a\u4e0d\u4f1a\u5199\u6210\u5458\u51fd\u6570\u7684\u849f\u84bb\u770b\u6765\uff0c\u5e94\u8be5\u7b97\u662f\u4e00\u9053\u597d\u9898\u4e86\uff0c\u56e0\u4e3a\u5b83\u5e76\u6ca1\u6709\u5176\u4ed6\u7684\u7d2b\u9898\u90a3\u6837\u6c34\u3002\n\n\u54e6\uff0c\u60a8\u89c9\u5f97\u7b80\u5355\uff0c\u90a3\u60a8\u5f3a\u597d\u4e86\u3002\n\n\u90a3\u4e48\u5176\u5b9e\u5f88\u663e\u7136\uff0c\u8fd9\u4e2a\u9898\u6211\u4eec\u53ef\u4ee5\u7528\u5806\uff08\u5931\u8d25\uff09\uff0c\u53ef\u4ee5\u7528$STL$ \u91cc\u7684$set$\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e24\u68f5\u5e73\u8861\u6811\u3002\u800c\u5728\u8fd9\u91cc\u6211\u7531\u4e8e\u4e0d\u60f3\u624b\u5199\u5806\uff0c\u6240\u4ee5\u7528\u7684$STL$\u7ed3\u679c\u70b8\u4e86\u3002\n\n\u90a3\u4e48\uff0c\u4e00\u68f5\u5e73\u8861\u6811\u7ef4\u62a4\u6700\u5c0f\u4e0d\u76f8\u90bb\u5dee\u503c\uff0c\u4e00\u68f5\u5e73\u8861\u6811\u7ef4\u62a4\u6700\u5c0f\u76f8\u90bb\u5dee\u503c\uff0c\u524d\u8005\u4e0d\u5e26\u5220\u9664\uff0c\u540e\u8005\u5e26\u5220\u9664\u3002\n\n## \u7ef4\u62a4\u4e0d\u76f8\u90bb\u6700\u5c0f\u5dee\u503c\uff1a\n\n\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\u65f6\uff0c\u627e\u5b83\u7684\u524d\u9a71\u540e\u7ee7\uff0c\u7136\u540e\u66f4\u65b0\u7b54\u6848\u53d8\u91cf$minn$.\n\n## \u7ef4\u62a4\u76f8\u90bb\u6700\u5c0f\u5dee\u503c\uff1a\n\n\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b\u539f\u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\u4e4b\u540e\u63d2\u5165\u7684\u5143\u7d20\u4e2d\u6700\u540e\u63d2\u5165\u7684\u6570\u3002\u7136\u540e\u6bcf\u6b21$insert$\u4e4b\u540e\u5220\u9664\u4e00\u6b21\u63d2\u5165\u4e24\u6b21\u5373\u53ef\u3002\n\n$Code$:\n\n\u6211\u8fa3\u9e21\uff0c\u51d1\u5408\u7740\u770b\u5427\u3002\n\n\u5f53\u7136\uff0c\u6211\u4e0d\u4f1a\u5199\u6210\u5458\u51fd\u6570\uff08\u5176\u5b9e\u662f\u4e00\u5f00\u59cb\u6ca1\u7528\u6210\u5458\u51fd\u6570\u4e4b\u540e\uff0c\u5199\u4e86\u4e00\u534a\u61d2\u5f97\u7528\u4e86\uff09\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#define MAXN 500001\n#define Inf 2147483600\n#define ll long long\n\nusing namespace std;\nstruct tree{\n    ll v,sub,son[2],f,cnt;\n}s[MAXN<<1],S[MAXN<<1];\nll minn=Inf,root,wz,num[MAXN],base[MAXN],i,now,res,pre,suffix,fa;\nll _res,_wz,_root,_now,_fa,_rank,_old_root;\n\ninline long long qread(){\n    long long num=0;\n    char ch=getchar();\n    while(!isdigit(ch)){\n        ch=getchar();\n    }\n    while(isdigit(ch)){\n        num=(num<<1)+(num<<3)+ch-'0';\n        ch=getchar();\n    }\n    return num;\n}\n/*___________________________________________________________*/\ninline ll my_abs(ll x){\n    return x>0?x:-x;\n}\ninline bool which(ll x){\n    return x==s[s[x].f].son[1];\n}\ninline void update(ll x){\n    if(x){\n    s[x].sub=s[x].cnt;\n    if(s[x].son[0])s[x].sub+=s[s[x].son[0]].sub;\n    if(s[x].son[1])s[x].sub+=s[s[x].son[1]].sub;\n    }\n}\ninline void rotate(ll x){\n    ll fnow=s[x].f,ffnow=s[fnow].f;\n    bool w=which(x);\n    s[fnow].son[w]=s[x].son[w^1];\n    s[s[fnow].son[w]].f=fnow;\n    s[fnow].f=x;\n    s[x].f=ffnow;\n    s[x].son[w^1]=fnow;\n    if(ffnow){\n        s[ffnow].son[s[ffnow].son[1]==fnow]=x;\n    }\n    update(fnow);\n}\ninline void splay(ll x,ll goal){\n    for(ll qwq;(qwq=s[x].f)!=goal;rotate(x)){\n        if(s[qwq].f!=goal){\n            rotate(which(x)==which(qwq)?qwq:x);\n        }\n    }\n    if(goal==0){\n        root=x;\n    }\n}\ninline void insert(ll x){\n    if(!root){\n        wz++;\n        s[wz].son[0]=s[wz].son[1]=s[wz].f=0;\n        root=wz;\n        s[wz].sub=s[wz].cnt++;\n        s[wz].v=x;\n        return ;\n    } \n    now=root,fa=0;\n    while(1){\n        if(x==s[now].v){\n            s[now].cnt++;\n            update(now);\n            update(fa);\n            splay(now,0);\n            break;\n        }\n        fa=now;\n        now=s[now].son[s[now].v<x];\n        if(!now){\n            wz++;\n            s[wz].son[0]=s[wz].son[1]=0;\n            s[wz].f=fa;\n            s[wz].sub=s[wz].cnt++;\n            s[fa].son[s[fa].v<x]=wz;\n            s[wz].v=x;\n            update(fa);\n            splay(wz,0);\n            break; \n        }\n    }\n}\ninline ll find_pre(){\n    res=s[s[root].son[0]].v,now=s[root].son[0];\n    if(s[root].cnt>1)\n    return s[root].v;\n    while(s[now].son[1]){\n        res=s[s[now].son[1]].v;\n        now=s[now].son[1];\n    }\n    return res;\n}\ninline ll find_suffix(){\n    res=s[s[root].son[1]].v,now=s[root].son[1];\n    if(s[root].cnt>1)\n    return s[root].v;\n    while(s[now].son[0]){\n        res=s[s[now].son[0]].v;\n        now=s[now].son[0];\n    }\n    return res;\n}\ninline void init_insert(ll now){\n    insert(now); \n    suffix=find_suffix();\n    pre=find_pre();\n    if(suffix!=Inf){\n        minn=min(minn,my_abs(suffix-now));\n    }   \n    if(pre!=-Inf){\n        minn=min(minn,my_abs(pre-now));\n    }\n}\n\n/*___________________________________________________________*/\n\ninline bool S_which(ll x){\n    return x==S[S[x].f].son[1];\n}\ninline void S_clear(ll x){\n    S[x].cnt=S[x].son[1]=S[x].son[0]=S[x].f=S[x].sub=S[x].v=0;\n    if(x==-wz)_wz--;\n}\ninline void S_update(ll x){\n    if(x){\n    S[x].sub=S[x].cnt;\n    if(S[x].son[0])S[x].sub+=S[S[x].son[0]].sub;\n    if(S[x].son[1])S[x].sub+=S[S[x].son[1]].sub;\n    }\n}\ninline void S_rotate(ll x){\n    ll fnow=S[x].f,ffnow=S[fnow].f;\n    bool w=S_which(x);\n    S[fnow].son[w]=S[x].son[w^1];\n    S[S[fnow].son[w]].f=fnow;\n    S[fnow].f=x;\n    S[x].f=ffnow;\n    S[x].son[w^1]=fnow;\n    if(ffnow){\n        S[ffnow].son[S[ffnow].son[1]==fnow]=x;\n    }\n    S_update(fnow);\n}\ninline void S_splay(ll x,ll goal){\n    for(ll qwq;(qwq=S[x].f)!=goal;S_rotate(x)){\n        if(S[qwq].f!=goal){\n            S_rotate(S_which(x)==S_which(qwq)?qwq:x);\n        }\n    }\n    if(goal==0){\n        \n        _root=x;\n    }\n}\ninline void S_insert(ll x){\n    if(!_root){\n        _wz++;\n        S[_wz].son[0]=S[_wz].son[1]=S[_wz].f=0;\n        _root=_wz;\n        S[_wz].sub=S[_wz].cnt++;\n        S[_wz].v=x;\n        return ;\n    } \n    _now=_root,_fa=0;\n    while(1){\n        if(x==S[_now].v){\n            S[_now].cnt++;\n            S_update(_now);\n            S_update(_fa);\n            S_splay(_now,0);\n            break;\n        }\n        _fa=_now;\n        _now=S[_now].son[S[_now].v<x];\n        if(!_now){\n            _wz++;\n            S[_wz].son[0]=S[_wz].son[1]=0;\n            S[_wz].f=_fa;\n            S[_wz].sub=S[_wz].cnt++;\n            S[_fa].son[S[_fa].v<x]=_wz;\n            S[_wz].v=x;\n            S_update(_fa);\n            S_splay(_wz,0);\n            break; \n        }\n    }\n}\ninline ll S_find_pre(){\n    _now=S[_root].son[0];\n    while(S[_now].son[1]){\n        _now=S[_now].son[1];\n    }\n    return _now;\n}\ninline ll S_find_rank(ll x){\n    _now=_root,_rank=0;\n    while(1){\n        if(x<S[_now].v){\n            _now=S[_now].son[0];\n        }\n        else {\n            _rank+=(S[_now].son[0]?S[S[_now].son[0]].sub:0);\n            if(x==S[_now].v){\n                S_splay(_now,0);\n                return _rank+1;\n            }\n            _rank+=S[_now].cnt;\n            _now=S[_now].son[1];\n        }\n    }\t\n        \n}\ninline ll S_find_num(ll x){\n    _now=_root;\n    while(1){\n        if(S[_now].son[0]&&x<=S[S[_now].son[0]].sub){\n            _now=S[_now].son[0];\n        }\n        else {\n            ll temp=(S[_now].son[0]?S[S[_now].son[0]].sub:0)+S[_now].cnt;\n            if(x<=temp)return S[_now].v;\n            x-=temp;\n            _now=S[_now].son[1];\n        }\n    }\n} \ninline void S_delete(ll x){\n    int hhh=S_find_rank(x);\n    if(S[_root].cnt>1){\n        S[_root].cnt--;\n        S_update(_root);\n        return ;\n    }\n    if(!S[_root].son[0]&&!S[_root].son[1]){\n        S_clear(_root);\n        _root=0;\n        return ;\n    }\n    if(!S[_root].son[0]){\n        _old_root=_root;\n        _root=S[_root].son[1];\n        S[_root].f=0;\n        S_clear(_old_root);\n        return ;\n    }\n    if(!S[_root].son[1]){\n        _old_root=_root;\n        _root=S[_root].son[0];\n        S[_root].f=0;\n        S_clear(_old_root);\n        return ;\n    }\n    int left_max=S_find_pre(),_old_root=_root;\n    S_splay(left_max,0);\n    S[_root].son[1]=S[_old_root].son[1];\n    S[S[_old_root].son[1]].f=_root;\n    S_clear(_old_root);\n    S_update(_root);\n}\n\n/*___________________________________________________________*/\n\nint main(){\n    ll a,n,m,b;\n    char s[20];\n    cin>>n>>m;\n    insert(Inf);\n    insert(-Inf);\n    for(i=1;i<=n;i++){\n        base[i]=num[i]=qread();\n        if(i!=1)S_insert(my_abs(base[i-1]-base[i]));\n        init_insert(base[i]);\n    }\n    for(register int i=1;i<=m;i++){\n        scanf(\"%s\",s);\n        int ss=strlen(s);\n        if(ss==7) {\n            printf(\"%d\\n\",S_find_num(1));\n            continue;\n        }\n        else if(ss==12){\n            printf(\"%d\\n\",minn);\n        \tcontinue;\n        }\n        else {\n            a=qread();\n            b=qread();\n            if(a<n){\n            S_delete(my_abs(num[a]-base[a+1]));\n            S_insert(my_abs(b-base[a+1]));\n            }\n            S_insert(my_abs(b-num[a]));\n            init_insert(b);\n            num[a]=b;\n            continue;\n        }\n    }\n}\n```\n\n# $\\color{gold}Think$  $~$ $\\color{silver}Twice$ $,$ $\\color{cyan}Code$ $~$ $\\color{red}Once.$\n",
        "postTime": 1525959127,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "P1110 [ZJOI2007]\u62a5\u8868\u7edf\u8ba1"
    },
    {
        "content": "# \u524d\u8a00\n\u6d1b\u8c37\u548c\u7f51\u4e0a\u7684\u9898\u89e3\u90fd\u597d\u590d\u6742\u54e6\uff0c\u6216\u8005\u662f`stl`\u6c34\u8fc7\u3002  \n\u6211\u5c31\u662f\u51b2\u7740\u5e73\u8861\u6811\u7684\u6807\u7b7e\u6765\u7684\uff0c\u5e94\u8be5\u6ca1\u6709\u4eba\u548c\u6211\u60f3\u5230\u4e00\u5757\u53bb\u4e86\u3002\uff08\u5e0c\u671b\u7ba1\u7406\u5458\u80fd\u901a\u8fc7\u8fd9\u4e00\u7bc7\u9898\u89e3\uff0c\u6211\u89c9\u5f97\u8fd9\u7bc7\u535a\u5ba2\u5199\u7684\u633a\u597d\u7684\uff0c~~\u5982\u679c\u53ef\u4ee5\u5e0c\u671b\u80fd\u7f6e\u9876~~\uff09  \n\u7a9d\u7684\u8bed\u6587\u4e0d\u600e\u4e48\u597d\uff0c\u6240\u4ee5\u4f1a\u6709\u4e00\u4e9b\u8868\u8fbe\u4e0a\u7684\u7d2f\u8d58\u6216\u8005\u662f\u542b\u7cca\u4e0d\u6e05\uff0c\u671b\u5404\u5927\u4f6c\u6d77\u6db5\u3002  \n\u65e5\u5e38\u5ba3\u4f20\u535a\u5ba2\uff1a[\u3010\u4f20\u9001\u95e8\u3011](https://www.cnblogs.com/chhokmah/p/10645928.html)\n\n-----\n# \u524d\u7f6e\u829d\u58eb\n\u9996\u5148\u4f60\u4e00\u5b9a\u8981\u4f1a\u5e73\u8861\u6811\uff08BST\uff09\u3002  \n\u4ec0\u4e48\u5e73\u8861\u6811\u90fd\u53ef\u4ee5\uff0c\u53ea\u8981\u662f\u80fd\u8fc7\u6389[\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369)\u7684\u90fd\u53ef\u4ee5\u3002  \n\u5173\u4e8e\u5e73\u8861\u6811\u7684\u8be6\u7ec6\u64cd\u4f5c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u8d58\u8ff0\u4e86\u3002  \n\n------\n# \u6b63\u89e3\n\u8fd9\u4e00\u9053\u9898\u76ee\u770b\u5230\u7684\u65f6\u5019\u4e0d\u80fd\u76f2\u76ee\u601d\u8003\u80fd\u4e0d\u80fd\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4e00\u4e0b\u5b50\u7ef4\u62a4\u6240\u6709\u7684\u6b63\u786e\u7b54\u6848\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u9053\u9898\u76ee\u662f\u5f88\u96be\u5b9e\u73b0\u7684\u3002~~\u53cd\u6b63\u849f\u84bb\u662f\u5b9e\u73b0\u4e0d\u4e86~~\n\u6211\u4eec\u5c06\u8fd9\u4e2a\u95ee\u9898\u4e00\u5c42\u4e00\u5c42\u7684\u5256\u6790\u4e00\u4e0b\u3002  \n\n## \u7b2c\u4e00\u4e2a\u64cd\u4f5c\n\u63d2\u5165\u64cd\u4f5c\uff0c\u56e0\u4e3a\u662f\u5728\u6bcf\u4e00\u4e2a\u539f\u6765\u7684\u6570\u540e\u9762\u63d2\u5165\u4e00\u4e2a\u6570\u3002  \n\u90a3\u4e48\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u4e0d\u5b9a\u957f\u6570\u7ec4`vector`\u6765\u5b9e\u73b0\u3002  \n\u56e0\u4e3a\u8fd9\u4e2a\u6ee1\u8db3`vector`\u7684\u7ed3\u5c3e\u63d2\u5165\u548c\u4e0d\u59a8\u788d\u5176\u4ed6\u6570\u7ec4\u7684\u6027\u8d28\u3002  \n\n## \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\n\u67e5\u8be2\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u503c\uff08\u7edd\u5bf9\u503c\uff09\u7684\u6700\u5c0f\u503c\u3002  \n\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u597d\u4e86\u4e4b\u524d\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u53ea\u6709\u5728\u63d2\u5165\u7684\u65f6\u5019\u4f1a\u5f71\u54cd\u8fd9\u4e2a\u7b54\u6848\u3002\u8fd9\u53e5\u8bdd\u5f88\u91cd\u8981\u3002  \n\u800c\u4e14\u6539\u53d8\u7684\u80af\u5b9a\u662f\u4e00\u4e2a`vector`\u7684\u961f\u5c3e\u548c\u4e0b\u4e00\u4e2a`vector`\u7684\u961f\u9996\u4e4b\u95f4\u7684\u7b54\u6848\u3002  \n\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u6240\u6709\u961f\u5c3e\u548c\u4e0b\u4e00\u4e2a`vector`\u7684\u961f\u9996\u7684\u5dee\u503c\u7ef4\u62a4\u4e00\u4e0b\u3002    \n\u4f46\u662f\u6709\u4fee\u6539\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u4e00\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u90a3\u4e48\u4f1a\u9020\u6210\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a  \n\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u7684\u6570\u7ec4\u662f`v[n][n]`\u7684`vector`\uff0c\u5f53\u524d\u6211\u4eec\u63d2\u5165\u7684\u6570\u662f\u7b2c`x`\u4e2a\u6570\u7ec4\uff0c\u6743\u503c\u4e3a`Val`\u3002\u6bcf\u4e00\u4e2a`vector`\u7684\u7ed3\u5c3e\u662f`v[x].tail`\uff0c\u6bcf\u4e00\u4e2a`vector`\u7684\u5934\u662f`v[x].head`\u3002  \n\n* \u51cf\u5c11\u4e00\u4e2a\u7b54\u6848\uff0c\u4e5f\u5c31\u662f`v[x].tail`\u548c`v[x+1].head`\u4e4b\u95f4\u7684\u7b54\u6848  \n* \u589e\u52a0\u4e24\u4e2a\u7b54\u6848\uff0c\u4e5f\u5c31\u662f`v[x].tail`\u548c`k`\u548c`v[x+1].head`\u548c`k`\u4e4b\u95f4\u7684\u7b54\u6848\u3002  \n\n\u53cd\u89c2\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u7ef4\u62a4\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u53ef\u4fee\u6539\u7684\u5806\u6765\u7ef4\u62a4\uff0c\u4f46\u662f\u6211\u6bd4\u8f83\u5f31\uff0c\u53c8\u6bd4\u8f83\u61d2\uff0c\u5c31\u5199\u4e86\u4e00\u4e2a\u5e26\u63d2\u5165\u548c\u5220\u9664\u7684`Treap`\uff0c\u7136\u540e\u6211\u4eec\u6bcf\u4e00\u6b21\u9700\u8981\u8f93\u51fa\u7b54\u6848\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u627e\u5230\u8fd9\u4e2a`Treap`\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u5f80\u5de6\u513f\u5b50\u8d70\u5c31\u53ef\u4ee5\u4e86\u3002  \n\n## \u7b2c\u4e09\u4e2a\u64cd\u4f5c\n\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u6bd4\u8f83\u88f8\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u548c\u5f53\u524d\u8fd9\u4e2a\u6570\u8981\u5dee\u503c\u6700\u5c0f\uff0c\u90a3\u4e48\u53ea\u6709\u53ef\u80fd\u662f\u4ed6\u7684\u524d\u9a71\u548c\u540e\u7ee7\u3002  \n\u8fd9\u4e2a\u53c8\u662f\u5e73\u8861\u6811\u53ef\u4ee5\u5b9e\u73b0\u7684\u64cd\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u5b9e\u73b0\u67e5\u627e\u524d\u9a71\u548c\u540e\u7ee7\u7684`BST`\u5c31\u53ef\u4ee5\u4e86\u3002\u7a9d\u8fd8\u662f\u7528\u4e86`Treap`\u6765\u5b9e\u73b0\u3002  \n\n**ps.\u9700\u8981\u6ce8\u610f\u4e0b\uff0c\u56e0\u4e3a\u6211\u4eec\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u53ea\u662f\u5728\u4fee\u6539\u7684\u65f6\u5019\u6709\u64cd\u4f5c\uff0c\u5982\u679c\u6ca1\u6709\u63d2\u5165\u64cd\u4f5c\u524d\uff0c\u6211\u4eec\u8fd9\u4e2a\u505a\u6cd5\u5c31\u662f\u9519\u7684\uff0c\u90a3\u4e48\u5c31\u9884\u5904\u7406\u6392\u5e8f\u4e00\u4e0b\uff0c\u7136\u540e\u5f97\u5230\u6700\u5c0f\u7684\u5dee\u503c\u5c31\u53ef\u4ee5\u4e86**\n\n## \u603b\u7ed3\u4e00\u4e0b\n* \u64cd\u4f5c1\uff1a`vector`\u66b4\u529b\u52a0\u5165\n* \u64cd\u4f5c2\uff1a`treap`\u7ef4\u62a4\u5dee\u503c\n* \u64cd\u4f5c3\uff1a`treap`\u7ef4\u62a4\u6570\u503c\n\n------\n# \u590d\u6742\u5ea6\u5206\u6790\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$  \n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nlogn)$  \n\u4ee3\u7801\u590d\u6742\u5ea6\uff1a\u6bd4\u8f83\u4f4e\u3002  \n\u601d\u7ef4\u96be\u5ea6\uff1a\u6bd4\u8f83\u4f4e\u3002\n\n-----\n# \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#pragma GCC optimize(2)\n#define inf 0x3f3f3f3f\n#define pb push_back\n#define N 1000005\nusing namespace std;\ntemplate <typename T>\ninline void read(T &x) {//\u5feb\u8bfb\u4e0d\u8bf4\n    x = 0; T fl = 1; char ch = 0;\n    for (; ch < '0' || ch > '9'; ch = getchar())\n        if (ch == '-') fl = -1;\n    for (; ch >= '0' && ch <= '9'; ch = getchar())\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n    x *= fl;\n}\nvector<int> v[N];\nmap<int, int> mp;\nstruct Treap {//treap\u6a21\u677f\uff0c\u6709\u9700\u8981\u53ef\u4ee5copy\n    int tot, rt;\n    struct node {\n        int val, ch[2], rd, cnt, sz;\n        void Init(int Val) { val = Val, rd = rand() % 233; sz = cnt = 1; ch[1] = ch[0] = 0; }\n    }tr[N];\n    void pushup(int nod) { tr[nod].sz = tr[tr[nod].ch[0]].sz + tr[tr[nod].ch[1]].sz + tr[nod].cnt; }\n    void rotate(int &nod, int d) {\n        int k = tr[nod].ch[d]; tr[nod].ch[d] = tr[k].ch[d ^ 1]; tr[k].ch[d ^ 1] = nod;\n        pushup(nod); pushup(k); nod = k; \n    }\n    void ins(int &nod, int val) {\n        if (!nod) { nod = ++ tot; tr[nod].Init(val); }\n        else {\n            tr[nod].sz ++; \n            if (tr[nod].val == val) { tr[nod].cnt ++; return; }\n            int d = val > tr[nod].val; \n            ins(tr[nod].ch[d], val);\n            if (tr[nod].rd > tr[tr[nod].ch[d]].rd) rotate(nod, d);\n        }\n    }\n    void del(int &nod, int val) {\n    \tif (!nod) return;\n    \tif (tr[nod].val == val) {\n    \t\tif (tr[nod].cnt > 1) { tr[nod].cnt --, tr[nod].sz --; return; } \n    \t\tint d = tr[tr[nod].ch[0]].rd > tr[tr[nod].ch[1]].rd;\n    \t\tif (!tr[nod].ch[1] || !tr[nod].ch[0]) nod = tr[nod].ch[1] + tr[nod].ch[0];\n    \t\telse rotate(nod, d), del(nod, val);\n\t\t}\n\t\telse tr[nod].sz --, del(tr[nod].ch[tr[nod].val < val], val);\n\t}\n    int pre(int nod, int val) {\n        if (!nod) return -inf;\n        if (tr[nod].val > val) return pre(tr[nod].ch[0], val);\n        else return max(tr[nod].val, pre(tr[nod].ch[1], val));\n    }\n    int suc(int nod, int val) {\n        if (!nod) return inf;\n        if (tr[nod].val < val) return suc(tr[nod].ch[1], val);\n        else return min(tr[nod].val, suc(tr[nod].ch[0], val));\n    }\n    int Get_Min(int nod) {\n    \tif (!nod) return inf;\n    \treturn min(tr[nod].val, Get_Min(tr[nod].ch[0]));\n\t}\n}tp, tp2;//\u4e24\u4e2atreap\nint ans, n, m;\nchar opt[5];\nint a[N];\nint main() {\n    srand(19260817);//\u968f\u673a\u79cd\u5b50\n    read(n); read(m); ans = inf;\n    for (int i = 1; i <= n; i ++) { v[i].clear(); read(a[i]); v[i].pb(a[i]); tp.ins(tp.rt, a[i]); }\n    for (int i = 2; i <= n; i ++) tp2.ins(tp2.rt, abs(v[i][0] - v[i - 1][0]));\n    sort(a + 1, a + 1 + n); for (int i = 2; i <= n; i ++) ans = min(ans, a[i] - a[i - 1]);//\u9884\u5904\u7406\u51fa\u64cd\u4f5c3\u7684\u7b54\u6848\n    for (int i = 1; i <= m; i ++) {\n        scanf(\"%s\", opt);\n        if (opt[0] == 'I') {\n\t\t\tint x, k; read(x); read(k);\n\t\t\tint lst = tp.pre(tp.rt, k), nxt = tp.suc(tp.rt, k); \n\t\t\ttp.ins(tp.rt, k); //\u63d2\u5165\u5f53\u524d\u7684\u6570\n\t\t\tans = min(ans, min(abs(lst - k), abs(nxt - k)));//\u67e5\u627e\u524d\u9a71\u548c\u540e\u7ee7\u6765\u66f4\u65b0\u7b54\u6848\n\t\t\ttp2.del(tp2.rt, abs(v[x][(int)v[x].size() - 1] - v[x + 1][0])); //\u5220\u9664\u539f\u5148\u7b54\u6848\n\t\t\ttp2.ins(tp2.rt, abs(v[x][(int)v[x].size() - 1] - k)); \n\t\t\ttp2.ins(tp2.rt, abs(k - v[x + 1][0])); //\u52a0\u5165\u73b0\u5728\u7b54\u6848\n\t\t\tv[x].pb(k); //\u63d2\u5165\u8fd9\u4e2a\u6570\n        }\n        if (opt[4] == 'G') printf(\"%d\\n\", tp2.Get_Min(tp2.rt));//\u67e5\u627e\u6700\u5c0f\u5dee\u503c\n        if (opt[4] == 'S') printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```\n----\n# \u603b\u7ed3\u4e00\u4e0b\n\u8fd9\u91cc\u6211\u5e76\u6ca1\u6709\u628a`sort`\u770b\u6210`stl`\u56e0\u4e3a\u592a\u4e60\u60ef\u4e86\u3002  \n\u6211\u89c9\u5f97\u5427\uff0c\u6211\u5e76\u4e0d\u662f\u5bf9`stl`\u6709\u504f\u89c1\uff0c\u867d\u7136`stl`\u5728\u8003\u573a\u7684\u65f6\u5019\u53ef\u4ee5\u6551\u547d\uff0c\u4f46\u662f\u5728\u5e73\u65f6\u7684\u8bad\u7ec3\u6211\u8fd8\u662f\u5c3d\u53ef\u80fd\u7684\u5c11\u7528`stl`\uff0c\u50cf\u5e73\u8861\u6811\u8fd9\u79cd\u4e1c\u897f\uff0c\u591a\u6572\u6572\u9664\u4e86\u8d39\u65f6\u95f4\uff0c\u5bf9\u4e8e\u81ea\u5df1\u7684\u4ee3\u7801\u80fd\u529b\u8fd8\u662f\u6709\u5e2e\u52a9\u7684\u3002  \n\u81ea\u5df1\u5c42\u5c42\u5256\u6790\u95ee\u9898\u7684\u80fd\u529b\u8fd8\u662f\u9700\u8981\u52a0\u5f3a\u3002\uff08\u6211\u679c\u7136\u662f\u4e00\u4e2a\u849f\u84bb\uff09  \n\u8fd9\u4e2a\u7a0b\u5e8f\u5728`bzoj`\u4e0a\u8fc7\u4e0d\u6389\uff0c\u597d\u50cf\u8d85\u65f6\u4e86\uff0c\u4f46\u662f\u5728\u6d1b\u8c37\u8fd8\u662f\u7a33\u7a33\u7684\u8fc7\u6389\u4e86\u3002",
        "postTime": 1554215773,
        "uid": 35567,
        "name": "Ayers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u611f\u8c22 @[cmy962085349](https://www.luogu.org/space/show?uid=32483) \u63d0\u4f9b\u7684hack\u6570\u636e\uff0c\u5df2\u7ecf\u6539\u5bf9\u4e86\u3002\n\n------------\n\n\u5148\u58f0\u660e\uff0c\u6211\u597d\u50cf\u662f\u9898\u89e3\u91cc\u5199\u53ccfhq treap\u91cc\u552f\u4e00\u80fd\u8fc7\u7684...\uff08\u6700\u540e\u4e24\u4e2a\u70b9\u554a\uff09\n\n------------\n\n\u601d\u8def:\u9996\u5148\u770b\u9898\u76ee\uff0cMIN_GAP_SORT\u660e\u663e\u662f\u6c42\u5b83\u7684\u524d\u9a71\u4e0e\u540e\u7ee7(\u53ef\u80fd\u6709\u76f8\u540c\u7684)\uff0c\u6240\u4ee5\u5c31\u7528\u5e73\u8861\u6811\uff0c\u4f46\u662f\u53c8\u8981\u6c42\u4e24\u4e2a\u76f8\u90bb\u7684\u6570\u7684\u5dee\uff0c\u5c31\u53ef\u4ee5\u6709\u518d\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\u5b58\u653e\u5dee\u503c\n\n\u5b9e\u73b0:\u629b\u5f00~~\u5947\u5947\u602a\u602a\u7684\u7684~~\u9898\u9762\uff0c\u4e3b\u8981\u8003\u8651\u8fd9\u4e09\u4e2a\u64cd\u4f5c\uff1a\n\n1\u3001INSERT i k:\n\n\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u7528\u94fe\u8868\u5c31\u884c\u4e86\uff08\u6570\u7ec4\u6a21\u62df\u7684\uff09\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u63d2\u5165\u7684\u65f6\u5019\uff0c\u8981\u63a5\u7740\u4e0a\u4e00\u4e2a\u5728\u8fd9\u63d2\u5165\u7684\uff0c\u8fd8\u8981\u505a\u53cc\u5411\u94fe\u8868\uff0c\u6570\u7ec4\u8981\u8bb0\u5f97\u5f00\u4e24\u500d\n\n\u6700\u91cd\u8981\u7684\u662f\uff0c\u63d2\u5165\u4e86\u4ee5\u540e\uff0c\u8fd9\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u5dee\u8981\u5728\u5b58\u653e\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u5dee\u7684fhq treap\u91cc\u5220\u9664\uff0c\u5e76\u63d2\u5165\u8fd9\u4e2a\u6570\u4e0e\u524d\u4e00\u4e2a\u6570\u7684\u5dee\u548c\u8fd9\u4e2a\u6570\u4e0e\u540e\u4e00\u4e2a\u6570\u7684\u5dee\u8981\u5b58\u8fdb\u53bb\n\n2\u3001MIN_GAP:\n\n\u505a\u5b8c\u63d2\u5165\uff0c\u5c31\u5728\u5b58\u5dee\u7684fhq treap\u67e5rank1\u597d\u4e86(\u6700\u5de6\u8fb9\u7684\u90a3\u4e2a\u8282\u70b9)\n\n3\u3001MIN_SORT_GAP:\n\n\u4e3a\u4e86\u907f\u514d\u67e5\u524d\u9a71\u4e0e\u540e\u7ee7\u65f6\u51fa\u73b0\u81ea\u5df1(\u4e0d\u662f\u53e6\u4e00\u4e2a\u4e0e\u81ea\u5df1\u76f8\u540c\u7684\u6570)\uff0c\u6240\u4ee5\u63d2\u5165\u65f6(\u5206\u88c2\u540e\uff0c\u5408\u5e76\u524d\uff0c\u8fd9\u6837\u6b63\u597d\u7b26\u5408\u67e5\u524d\u9a71\u4e0e\u540e\u7ee7\u7684\u6807\u51c6)\u5c31\u6bd4\u8f83\u53d6\u5c0f\uff0c\u8be2\u95ee\u65f6\u76f4\u63a5\u8f93\u51fa\u5c31\u597d\u4e86\n\n\nP.S. \u8fd9\u9053\u9898\u5199\u4e24\u4e2a\u5e73\u8861\u6811\u8fc7\u540e\u9762\u4e24\u4e2a\u70b9\u5f88\u5173\u952e\u7684\u662f\u5361\u5e38(O2\u4e5f\u968f\u4f60\u4e86)!\u539f\u672cT\u540e\u9762\u4e24\u4e2a\u70b9\u7684\u4ee3\u7801\u52a0\u4e0a  \u4e0e\u7528 char\u800c\u4e0d\u7528string \u5c31\u8fc7\u4e86\uff0c\u6240\u4ee5\uff0c\u5361\u5e38\u6709\u7684\u65f6\u5019\u8fd8\u662f\u5f88\u91cd\u8981\u7684!(\u6216\u8005\u6211\u4eba\u4e11\u5e38\u6570\u5927\u5427)\n\n\u518dP.S. \u4f3c\u4e4e\u7ecf\u8fc7 @[cmy962085349](https://www.luogu.com.cn/user/32483) \u7684hack\u6570\u636e\u66f4\u6b63\u4ee5\u540e\uff0c\u4f3c\u4e4e\u5e76\u4e0d\u9700\u8981\u8fc7\u4e8e\u5361\u5e38\u4e86\uff08\u8bf4\u660e\u9898\u89e3\u91cc\u53cc\u5e73\u8861\u6811\u8fd8\u662f\u56e0\u4e3a\u5199\u9519\u4e86\u800cT\u4e86\u540e\u9762\u4e24\u4e2a\u70b9\uff09\uff0c\u4f3c\u4e4e\u4e0d\u7528cin\u4e0ecout\u5c31\u80fd\u8fc7\uff0c\u4e0d\u9700\u8981\u52a0\u4ec0\u4e48 register \u4e86\uff08~~\u867d\u7136\u6211\u8fd8\u662f\u52a0\u4e86~~\uff09\n\n\u518d\u518dP.S. \u53c8\u88abhack\u4e86\u3002\u3002\u3002 \u611f\u8c22 @[\u5251\u8d77\u5934\u843d\u5730](https://www.luogu.com.cn/user/116251)\u6307\u51fa\u5728\n\n```cpp\ndelete_val(abs(a[j+1]-a[b[j+1]]));\n```\n\n\u524d\u5e94\u52a0\u4e0a\n\n```cpp\nif(j<n)\n```\n\n\n\u9644\u4e0aAC\u4ee3\u7801:\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<iostream>\nusing namespace std;\n\nstruct tree{//\u5b58\u6bcf\u4e2a\u503c\u7684\u6570(\u4e0d\u662f\u5dee)\n    int size,val,dat,l,r;\n}tr[1000005];//\u6570\u7ec4\u8bb0\u5f97\u5f00\u4e24\u500d\n\nint s_tr,root,n,m,x,y,z,a[1000005],b[1000005],c[1000005];\n\nint min_sort_gap;//MIN_SORT_GAP\u7684\u7b54\u6848\n\ninline int abs(int a){\n    return a<0?-a:a;\n}\n\ninline int min(int a,int b){\n    return a<b?a:b;\n}\n\n//fhq treap\u5e38\u89c4\u64cd\u4f5c\n\ninline int new_tr(int val){\n    tr[++s_tr].val=val;\n    tr[s_tr].size=1;\n    tr[s_tr].dat=rand();\n    return s_tr;\n}\n\ninline void update(int p){\n    tr[p].size=tr[tr[p].l].size+tr[tr[p].r].size+1;\n}\n\nvoid split(int p,int k,int &x,int &y){\n    if(!p){\n        x=y=0;\n        return;\n    }\n    if(tr[p].val<=k)x=p,split(tr[p].r,k,tr[p].r,y);\n    else y=p,split(tr[p].l,k,x,tr[p].l);\n    update(p);\n}\n\nint merge(int x,int y){\n    if(!x||!y)return x+y;\n    if(tr[x].dat>tr[y].dat){\n        tr[x].r=merge(tr[x].r,y);\n        update(x);\n        return x;\n    }\n    else {\n        tr[y].l=merge(x,tr[y].l);\n        update(y);\n        return y;\n    }\n}\n\ninline int Max(int x){//\u4e00\u68f5fhq(\u53ef\u80fd\u662f\u5206\u88c2\u540e)\u4e2d\u6700\u5927\u7684\n    while(tr[x].r)x=tr[x].r;\n    return tr[x].val;\n}\n\ninline int Min(int y){//\u4e00\u68f5fhq(\u53ef\u80fd\u662f\u5206\u88c2\u540e)\u4e2d\u6700\u5927\u7684\n    while(tr[y].l)y=tr[y].l;\n    return tr[y].val;\n}\n\ninline void insert(int val){\n    split(root,val,x,y);\n    if(tr[x].size)//\u8981\u6709\u624d\u884c\n        min_sort_gap=min(min_sort_gap,abs(val-Max(x)));\n    if(tr[y].size)//\u8981\u6709\u624d\u884c\n        min_sort_gap=min(min_sort_gap,abs(Min(y)-val));\n    root=merge(merge(x,new_tr(val)),y);\n}\n\n//\u5b58\u5dee\u503c\u7684fhq treap\n\nstruct tree1{\n    int size,val,dat,l,r;\n}tr1[1000005];\n\nint s_tr1,root1;\n\ninline int new_tr1(int val){\n    tr1[++s_tr1].val=val;\n    tr1[s_tr1].size=1;\n    tr1[s_tr1].dat=rand();\n    return s_tr1;\n}\n\ninline void update1(int p){\n    tr1[p].size=tr1[tr1[p].l].size+tr1[tr1[p].r].size+1;\n}\n\nvoid split1(int p,int k,int &x,int &y){\n    if(!p){\n        x=y=0;\n        return;\n    }\n    if(tr1[p].val<=k)x=p,split1(tr1[p].r,k,tr1[p].r,y);\n    else y=p,split1(tr1[p].l,k,x,tr1[p].l);\n    update1(p);\n}\n\nint merge1(int x,int y){\n    if(!x||!y)return x+y;\n    if(tr1[x].dat>tr1[y].dat){\n        tr1[x].r=merge1(tr1[x].r,y);\n        update1(x);\n        return x;\n    }\n    else {\n        tr1[y].l=merge1(x,tr1[y].l);\n        update1(y);\n        return y;\n    }\n}\n\ninline void insert1(int val){\n    split1(root1,val,x,y);\n    root1=merge1(merge1(x,new_tr1(val)),y);\n}\n\ninline void delete_val(int val){//\u8fd9\u68f5fhq\u8981\u80fd\u652f\u6301\u5220\u9664\n    split1(root1,val,x,z);\n    split1(x,val-1,x,y);\n    y=merge1(tr1[y].l,tr1[y].r);\n    root1=merge1(merge1(x,y),z);\n}\n\ninline int Min1(int y){\n    while(tr1[y].l)y=tr1[y].l;\n    return tr1[y].val;\n}\n\nchar s[101];//\u5361\u5e38\n\ninline int read(){//\u5361\u5e38\n    int r=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9')r=(r<<1)+(r<<3)+c-'0',c=getchar();\n    return r*f;\n}\n\nint main(){\n    srand(time(0));\n    n=read(),m=read();\n    min_sort_gap=1e9+10;\n    for(register int i=1;i<=n;i++){//\u5361\u5e38\n        a[i]=read();\n        insert(a[i]);\n    }\n    for(register int i=1;i<n;i++)//\u5361\u5e38\u51cf\u5c11if\n        insert1(abs(a[i+1]-a[i])),c[i]=i+1;\n    for(register int i=2;i<=n;i++)//\u5361\u5e38\u51cf\u5c11if\uff0cn+1\u662f\u56e0\u4e3a\u53ef\u80fd\u5728\u7b2cn\u4e2a\u540e\u9762\u63d2\u5165\n        b[i]=i-1;\n    b[n+1]=n;\n    int cnt=n;\n    for(register int i=1;i<=m;i++){//\u5361\u5e38\n        scanf(\"%s\",s);\n        if(s[0]=='I'){\n            int j=read(),k=read();\n            if(j<n)delete_val(abs(a[j+1]-a[b[j+1]]));//\u56e0\u4e3a\u63d2\u5165\u540e\u4e0d\u5728\u4e00\u8d77\u4e86\uff0c\u5220\u9664\n            insert1(abs(a[b[j+1]]-k));//\u63d2\u5165\u540e\u591a\u4e86\u4e24\u4e2a\u5dee\u503c(\u4e0d\u7b97\u5220\u9664\u7684)\n            if(j<n)insert1(abs(k-a[j+1]));//\u53ef\u80fd\u63d2\u5728\u7b2cn\u4e2a\u7684\u540e\u9762\n            a[++cnt]=k;//\u653e\u8fdb\u6570\u7ec4\uff0c\u8fd9\u4ef6\u4e8b\u4e00\u5b9a\u8981\u5728\u4e0a\u8ff0\u64cd\u4f5c\u4ee5\u540e\u505a\uff0c\u4e0d\u7136\u82e5\u8fde\u7eed\u63d2\u5165\u5728\u7b2cn\u4e2a\u6570\u4ee5\u540e\u5c31\u6302\u4e86\uff0c\u56e0\u4e3a\u7b2c\u4e00\u6b21cnt+1\u540e\u4f1a\u76f4\u63a5\u53d6\u4ee3n+1,b[n+1]\u4e5f\u5c31\u6ca1\u4ec0\u4e48\u7528\u4e86\n            b[cnt]=b[j+1];//\u6570\u7ec4\u6a21\u62df\u94fe\u8868\n            c[cnt]=j+1;\n            c[b[j+1]]=cnt;//\u8bb0\u5f97\u4fee\u6539\u524d\u4e00\u4e2a\u4e0e\u540e\u4e00\u4e2a\u7684\u6307\u5411\n            b[j+1]=cnt;\n            insert(k);\n        }\n        else {\n            if(s[4]=='G')printf(\"%d\\n\",Min1(root1));//\u6574\u68f5fhq\u91cc\u6700\u5c0f\u7684\n            else printf(\"%d\\n\",min_sort_gap);\n        }\n    }\n    return 0;\n}\n```\n\n\u518d\u6b21\u611f\u8c22 @[cmy962085349](https://www.luogu.com.cn/user/32483) \u4e0e @[\u5251\u8d77\u5934\u843d\u5730](https://www.luogu.com.cn/user/116251)\n\n~~\u5b8c\u7ed3\u5077\u5077\u6492\u82b1!~~(\u273f\u273f\u30fd(\u00b0\u25bd\u00b0)\u30ce\u273f)",
        "postTime": 1563685775,
        "uid": 71403,
        "name": "\u4e00\u53f6\u77e5\u79cb\u3002",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u8fd9\u9898\u6211\u4f7f\u7528\u4e86\u503c\u57df\u7ebf\u6bb5\u6811\u505a\uff0c\u4ee5\u7eaa\u5ff5dhx\u8001\u5e08\u5728zjoi\u8003\u573a\u4e0a\u53d1\u660e\u503c\u57df\u7ebf\u6bb5\u6811\uff0cOrz\u3002\n\n**\u9ed8\u8ba4\u5df2\u4f1a\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u5efa\u8bae\u5728\u770b\u672c\u9898\u89e3\u524d\uff0c\u5148\u81ea\u884c\u601d\u800320min**\n\n### \u64cd\u4f5c\u601d\u8def\n\n#### MIN_SORT_GAP\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u4e1c\u897f\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a $ins$\uff0c\u4e5f\u5c31\u662f\u5f80\u503c\u57df\u7ebf\u6bb5\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\u3002\u8fd8\u9700\u8981\u4e00\u4e2a\u80fd\u67e5\u8be2\u503c\u57df\u7ebf\u6bb5\u6811\u4e2d\u6700\u63a5\u8fd1\u7684\u4e24\u4e2a\u503c\u7684\u5dee\u3002\n\n$ins$ \u597d\u8bf4\uff0c\u5c31\u662f\u57fa\u672c\u64cd\u4f5c\uff0c\u4f46\u662f\u6700\u63a5\u8fd1\u7684\u4e24\u4e2a\u503c\u7684\u5dee\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u7528 $tr[rt].ans$ \u6765\u4ee3\u8868\u5728\u503c\u57df\u7ebf\u6bb5\u6811\u4e2d\uff0c\u4ee5 $rt$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6700\u63a5\u8fd1\u7684\u4e24\u4e2a\u6570\u7684\u5dee\u3002\u8fd9\u6837\u7684\u8bdd\u6bcf\u6b21\u8be2\u95ee\u76f4\u63a5\u8f93\u51fa $tr[1].ans$ \u5373\u53ef\u3002\n\n\u90a3\u6211\u4eec\u600e\u4e48\u8f6c\u79fb\u5462\uff1f\n\n\u4ee5 $rt$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6700\u63a5\u8fd1\u7684\u4e24\u4e2a\u6570\u7684\u5dee\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u90fd\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u90fd\u5728\u53f3\u5b50\u6811\u4e2d\u4ee5\u53ca\u8de8\u5b50\u6811\u3002\u5982\u679c\u662f\u524d\u4e24\u79cd\u7684\u8bdd\uff0c\u76f4\u63a5\u7ee7\u627f\u5e76\u53d6 $\\min$ \u5373\u53ef\u3002\u7531\u4e8e\u662f\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u5b50\u6811\u76f4\u63a5\u6ee1\u8db3\u5355\u8c03\u5173\u7cfb\uff0c\u6240\u4ee5\u5982\u679c\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5\u4e00\u5b9a\u662f\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u76f4\u63a5\u7684\u5dee\uff0c\u518d\u548c\u524d\u4e24\u79cd\u60c5\u51b5\u53d6\u4e00\u4e0b $\\min$ \u5373\u53ef\u3002\n\n#### MIN_GAP\n\n\u90a3\u8fd9\u4e2a\u6211\u4eec\u600e\u4e48\u5904\u7406\u5462\uff1f\n\n\u7531\u4e8e\u662f\u76f8\u90bb\u7684\u4e24\u4e2a\uff0c\u6240\u4ee5\u6bcf\u6b21 INERT \u5bf9\u8fd9\u4e2a\u7684\u5f71\u54cd\u5c31\u4e0d\u50cf\u6574\u4f53\u6700\u5c0f\u503c\u90a3\u4e48\u7b80\u5355\u4e86\u3002\u5982\u679c\u5728\u4e24\u4e2a\u503c\u4e2d\u95f4\u63d2\u5165\u4e86\u4e00\u4e2a\u503c\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6574\u4e2a\u7684\u7b54\u6848\u7684\u5f71\u54cd\u5c31\u662f\u591a\u4e86\u4e24\u4e2a\u503c\uff08\u548c\u524d\u9a71\u7684\u5dee\u4ee5\u53ca\u548c\u540e\u7ee7\u7684\u5dee\uff09\uff0c\u7136\u540e\u5c11\u4e861\u4e2a\u503c\uff08\u524d\u9a71\u540e\u7ee7\u76f4\u63a5\u7684\u5dee\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u9996\u5148\u77e5\u9053\u524d\u9a71\u540e\u7ee7\uff0c\u7136\u540e\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u5b9e\u73b0\u4e00\u4e2a $ins$ \u548c\u4e00\u4e2a $del$ \u5373\u53ef\u3002\n\n\u90a3\u6211\u4eec\u600e\u4e48\u5b9e\u73b0\u524d\u9a71\u540e\u7ee7\u5462\uff1f\u6211\u4eec\u8981\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\uff0c\u4f7f\u540e\u9762\u7684\u5143\u7d20\u7684\u4f4d\u7f6e\u90fd\u4e0d\u53d8\uff0c\u540c\u65f6\u8fd8\u80fd\u7ef4\u62a4\u524d\u9a71\u540e\u7ee7\uff0c\u81ea\u7136\u5c31\u80fd\u60f3\u5230\u94fe\u8868\u4e86\u3002\n\n\u4f7f\u7528\u53cc\u5411\u94fe\u8868\u7ef4\u62a4\u4e00\u4e0b\u524d\u9a71\u540e\u7ee7\uff0c\u6211\u4eec\u5c31\u80fd\u505a\u4e86\u3002\n\n\u7136\u540e\u5c31\u662f\u67e5\u8be2\uff0c\u67e5\u8be2\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u67e5\u8be2\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f $tr[1].mn$ \u5373\u53ef\u3002\n\n### \u5177\u4f53\u4f18\u5316\n\n\u9996\u5148\uff0c\u7531\u4e8e\u7a7a\u95f4\u4e0d\u5141\u8bb8 $O(n\\log w)$\uff08$w$ \u662f\u503c\u57df\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5148\u79bb\u7ebf\u4e0b\u6765\uff0c\u5c06\u6240\u6709\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u503c\u90fd\u5904\u7406\u4e0b\u6765\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u79bb\u6563\u4e4b\u540e\u7684\u503c\u57df\u6765\u505a\u3002\n\n\u5177\u4f53\u5c31\u662f\u5148\u7528\u94fe\u8868\u6a21\u62df\u4e00\u904d\u5168\u8fc7\u7a0b\uff0c\u7136\u540e\u7528 $al$ \u6570\u7ec4\u5c06\u6240\u6709\u6570\u90fd\u5904\u7406\u51fa\u6765\uff0c\u4e4b\u540e\u5bf9 $al$ \u6392\u5e8f\u53bb\u91cd\uff0c\u6700\u540e\u7528 $num$ \u63a5\u6536\uff0c\u7136\u540e\u6bcf\u6b21\u9047\u5230\u7684\u503c $val$ \u5bf9\u5e94\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u7684\u7ed3\u70b9 $x$ \u4e00\u5b9a\u6ee1\u8db3 $num[x]=val$\uff0c\u81f3\u4e8e\u8fd9\u4e2a $x$ \uff0c\u6709\u4e24\u79cd\u53ef\u884c\u7684\u505a\u6cd5\uff0c $map$ \u5904\u7406\u548c $num$ \u4e2d\u4e8c\u5206\uff0c\u8fd9\u91cc\u9762\uff0c\u6211\u9009\u62e9\u7b2c\u4e8c\u79cd\uff0c\u56e0\u4e3a 2007 \u7684zjoi\u662f\u4e0d\u8ba9\u7528 $STL$ \u7684\u3002\u786e\u5b9a\u4e86\u4f4d\u7f6e\u4e4b\u540e\uff0c\u5b9e\u73b0\u4e00\u4e0b\u4e4b\u524d\u7684\u64cd\u573a\u5c31\u597d\u4e86\u3002\n\n\u6211\u7684\u505a\u6cd5\u5e38\u6570\u8f83\u5927\uff0c\u7531\u4e8e\u8bc4\u6d4b\u673a\u6ce2\u52a8\uff0c\u4e0d\u5f00 O2 \u4e0d\u4fdd\u8bc1\u80fd\u901a\u8fc7\u672c\u9898\u3002\n\n### \u6700\u540e\n\n\u6700\u540e\u5410\u69fd\u4e00\u53e5\uff1a\u597d\u591a\u9898\u89e3\u5176\u5b9e\u90fd\u53ef\u4ee5\u88ab $hack$ \uff0c\u8fd9\u7ed9\u6211\u5bf9\u62cd\u9020\u6210\u4e86\u6781\u5927\u7684\u9ebb\u70e6\u3002\u3002\u3002\u4ee5\u81f3\u4e8e\u6211\u8c03\u4e866h+\uff0c\u6700\u540e\u8fd8\u662f\u5199\u4e86\u4e2a\u66b4\u529b\u548c\u81ea\u5df1\u5bf9\u62cd\u7684\u3002\u3002\u3002\n\n\u8fd8\u6709\uff0c\u770b\u5230\u8ba8\u8bba\u533a\u6709\u4e9b\u9898\u89e3\u7528STL\u505a\u4e4b\u540e\u8bf4\u7b80\u5355\uff0c\u89c9\u5f97\u8fd9\u9898\u4e0d\u914d\u653e\u5230ZJOI\u91cc\u9762\uff0c\u4f46\u662f\u90a3\u65f6\u5019\u4e0d\u8ba9\u7528STL\u554a\u3002\u3002\u3002\u8fd9\u9898\u8981\u662f\u7528\u4e00\u4e2aset\u90a3\u8fd8\u6709\u4ec0\u4e48\u52b2\u554a\n\nupd\uff1a\u90a3\u65f6\u5019\u8fde $string$ \u4e5f\u4e0d\u80fd\u7528\u3002\u3002\u3002\n\n### \u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=5e5+10; \nvoid Min(int& x,int y){x=min(x,y);}\nvoid Max(int& x,int y){x=max(x,y);}\nint n,m;\nint a[NR];\nint al[NR*5],xx;\nint now[NR];\nchar s[NR][10];\nint in1[NR],in2[NR];\nint num[NR*5];\nint all;\nstruct Chtholly\n{\n\tint l,r,x;\n}lb[NR*3];\nstruct Nd{int l,r,mn,mx,ans,num;};\nstruct Tree\n{\n\tint cnt;\n\tNd tr[NR*6];\n\tvoid Init(){tr[0].mx=0;tr[0].ans=tr[0].mn=0x3f3f3f3f;cnt=0;}\n\tint newnode()\n\t{\n\t\tint x=++cnt;\n\t\ttr[x].l=tr[x].r=0;\n\t\ttr[x].mn=tr[x].ans=0x3f3f3f3f;\n\t\ttr[x].mx=0;return x;\n\t}\n\tvoid clear(int &rt)\n\t{\n\t\ttr[rt].l=tr[rt].r=tr[rt].mx=tr[rt].num=0;\n\t\ttr[rt].mn=tr[rt].ans=0x3f3f3f3f;rt=0;\n\t}\n\tvoid update(int rt)\n\t{\n\t\ttr[rt].mx=max(tr[tr[rt].l].mx,tr[tr[rt].r].mx);\n\t\ttr[rt].mn=min(tr[tr[rt].l].mn,tr[tr[rt].r].mn);\n\t\ttr[rt].ans=min(tr[tr[rt].l].ans,tr[tr[rt].r].ans);\n\t\tif(tr[rt].l&&tr[rt].r)Min(tr[rt].ans,tr[tr[rt].r].mn-tr[tr[rt].l].mx);\n\t}\n\tvoid ins(int &rt,int l,int r,int x,int val)\n\t{\n\t\tif(!rt)rt=newnode();\n\t\tMin(tr[rt].mn,val),Max(tr[rt].mx,val);\n\t\tif(l==r){tr[rt].num++;if(tr[rt].num>1)tr[rt].ans=0;return;}\n\t\tint mid=(l+r>>1);\n\t\tif(x<=mid)ins(tr[rt].l,l,mid,x,val);\n\t\telse ins(tr[rt].r,mid+1,r,x,val);\n\t\tupdate(rt);\n\t}\n\tvoid del(int &rt,int l,int r,int x)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tif(tr[rt].num>1)tr[rt].num--;\n\t\t\telse clear(rt);return;\n\t\t}\n\t\tint mid=(l+r>>1);\n\t\tif(x<=mid)\n\t\t{\n\t\t\tbool flag=(r==l+1&&tr[tr[rt].l].num==1);\n\t\t\tdel(tr[rt].l,l,mid,x);\n\t\t}\n\t\telse del(tr[rt].r,mid+1,r,x);\n\t\tupdate(rt);\n\t}\n\tint querymin(){return tr[1].mn;}\n\tint querym(){return tr[1].ans;}\n}A,B;\nint mp(int x)\n{\n\tint l=1,r=xx,ans=-1;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r>>1);\n\t\tif(x<=num[mid])ans=mid,r=mid-1;\n\t\telse l=mid+1;\n\t}\n\treturn ans;\n}\nint bl[NR*5];\nvoid msort(int l,int r)\n{\n\tif(l>=r) return;\n\tint mid=(l+r>>1);\n\tmsort(l,mid),msort(mid+1,r);\n\tfor(int i=l;i<=r;i++)bl[i]=al[i];\n\tint i=l,j=mid+1,t=l-1;\n\twhile(t<r)\n\t{\n\t\tif(i>mid){al[++t]=bl[j++];continue;}\n\t\tif(j>r){al[++t]=bl[i++];continue;}\n\t\tif(bl[i]<=bl[j])al[++t]=bl[i++];\n\t\telse al[++t]=bl[j++];\n\t}\n}\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint main()\n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout);\n\tn=read(),m=read();\n\ta[1]=read();al[++xx]=a[1];\n\tfor(int i=2;i<=n;i++)\n\t\ta[i]=read(),al[++xx]=a[i],al[++xx]=abs(a[i]-a[i-1]);\n\tfor(int i=1;i<=n;i++)now[i]=i;all=n;\n\tfor(int i=1;i<=n;i++)lb[i].l=i-1,lb[i].r=i+1,lb[i].x=a[i];\n\tlb[n].r=NR*2-1;lb[NR*2-1].x=lb[0].x=0x3f3f3f3f;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>s[i];\n\t\tif(s[i][0]!='I')continue;\n\t\tin1[i]=read(),in2[i]=read();\n\t\tal[++xx]=in2[i];\n\t\tal[++xx]=abs(lb[lb[now[in1[i]]].r].x-lb[now[in1[i]]].x);\n\t\tlb[++all].r=lb[now[in1[i]]].r;\n\t\tlb[lb[all].r].l=all;\n\t\tlb[now[in1[i]]].r=all;\n\t\tlb[all].l=now[in1[i]];\n\t\tlb[all].x=in2[i];\n\t\tal[++xx]=abs(in2[i]-lb[lb[all].l].x);\n\t\tal[++xx]=abs(lb[lb[all].r].x-in2[i]);\n\t\tnow[in1[i]]=all;\n\t}\n\tmemset(lb,0,sizeof(lb));\n\tmsort(1,xx);int xxx=xx;xx=0;\n\tfor(int i=1;i<=xxx;i++)\n\t{\n\t\tif(al[i]==al[i-1]&&i!=1)continue;\n\t\tnum[++xx]=al[i];\n\t}\n\tfor(int i=1;i<=n;i++)now[i]=i;all=n;\n\tfor(int i=1;i<=n;i++)lb[i].l=i-1,lb[i].r=i+1,lb[i].x=a[i];\n\tlb[n].r=NR*2-1;lb[NR*2-1].x=lb[0].x=0x3f3f3f3f;A.Init(),B.Init();\n\tint rootA=0,rootB=0;\n\tfor(int i=1;i<=n;i++)B.ins(rootB,1,xx,mp(a[i]),a[i]);\n\tfor(int i=2;i<=n;i++)A.ins(rootA,1,xx,mp(abs(a[i]-a[i-1])),abs(a[i]-a[i-1]));\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(s[i][0]=='I')\n\t\t{\n\t\t\tB.ins(rootB,1,xx,mp(in2[i]),in2[i]);\n\t\t\tint Xx=abs(lb[now[in1[i]]].x-lb[lb[now[in1[i]]].r].x);\n\t\t\tlb[++all].r=lb[now[in1[i]]].r;\n\t\t\tlb[lb[all].r].l=all;lb[now[in1[i]]].r=all;\n\t\t\tlb[all].l=now[in1[i]];lb[all].x=in2[i];\n\t\t\tint xX=abs(lb[all].x-lb[lb[all].l].x);\n\t\t\tint XX=abs(lb[all].x-lb[lb[all].r].x);\n\t\t\tA.del(rootA,1,xx,mp(Xx));A.ins(rootA,1,xx,mp(xX),xX);A.ins(rootA,1,xx,mp(XX),XX);\n\t\t\tnow[in1[i]]=all;\n\t\t}\n\t\telse if(s[i][4]=='S')printf(\"%d\\n\",B.querym());\n\t\telse printf(\"%d\\n\",A.querymin());\n\t}\n\treturn 0;\n}\n/*\n3 2\n6 7 3 \nINSERT 1 0\nMIN_GAP\n*/\n\n",
        "postTime": 1609037371,
        "uid": 97136,
        "name": "chenzida",
        "ccfLevel": 0,
        "title": "P1110 [ZJOI2007]\u62a5\u8868\u7edf\u8ba1"
    },
    {
        "content": "### \u8fd9\u662f\u4e00\u4efd\u53ef\u4ee5\u5361\u8fc7\u53bb\u7684\u7eaf$STL$\n\n\u4e24\u4e2a$multiset$\uff0c\u4e00\u4e2a$adjoin$\u8bb0\u5f55\u76f8\u90bb\u7684\u5dee\u503c\uff0c\u4e00\u4e2a$al$\u8bb0\u5f55\u6240\u6709\u7684\u5143\u7d20\n\n\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u5b58\u6240\u6709\u5143\u7d20\u7684\u6700\u5c0f\u5dee\u503c\n\n\u4e00\u4e2a$map$\u5b58$adjoin$\u4e2d\u5143\u7d20\u7684\u51fa\u73b0\u4e2a\u6570\n\n\u8fd9\u9898\u7684\u63d2\u5165\u6bd4\u8f83\u5947\u602a\n\n\u63d2\u5165\u591a\u6b21\u4e4b\u540e\u4e00\u4e2a\u6570\u540e\u9762\u7684\u5e8f\u5217\u4e2d\u4e2d\u95f4\u7684\u6570\u5c31\u6ca1\u6709\u4f5c\u7528\u4e86\uff0c\u5bf9\u7b54\u6848\u8d77\u5230\u5f71\u54cd\u7684\u53ea\u6709\u5934\u5c3e\u5143\u7d20\uff0c\u6240\u4ee5\u4e24\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u540e\u65b9\u5e8f\u5217\u7684\u5934\u548c\u5c3e\n\n\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\u90fd\u8981\u66f4\u65b0\uff0c\u6ce8\u610f\u7ec6\u8282\u5c31\u597d\n\n\u7531\u4e8e$STL$\u7528\u7684\u5f88\u591a\n\n\u8bfb\u4f18\u8f93\u4f18$O_2$\u4e00\u4e2a\u90fd\u4e0d\u80fd\u5c11\n\n\u7b2c\u4e00\u6b21$A$\u5361\u5230\u4e86$2493ms$\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <complex>\n#include <algorithm>\n#include <climits>\n#include <queue>\n#include <map>\n#include <ctime>\n#include <set>\n#include <vector>\n#include <iomanip>\n#define A 1000010\n#define B 2010\n\nusing namespace std;\ntypedef long long ll;\nconst int inf = 2000000000;\nmap<ll, ll> df;\nmultiset<ll> adjoin, al;\npriority_queue<ll, vector<ll>, greater<ll> > q;\nint n, m, s[A], e[A], x, y;\ntemplate<class T> void read(T &x) {\n    x = 0; char ch = getchar();\n    while (!isdigit(ch)) ch = getchar();\n    while (isdigit(ch)) x = x * 10 + (ch ^ 48), ch = getchar();\n}\nvoid operate1() {\n    read(x); read(y);\n    //\u66f4\u65b0\u76f8\u90bb\u5143\u7d20\u6700\u5c0f\u5dee\u503c\n    if (x != n) {\n        int tmp = abs(e[x] - s[x + 1]);\n        if (!--df[tmp]) adjoin.erase(tmp);\n    }\n    if (++df[abs(y - e[x])] == 1) adjoin.insert(abs(y - e[x]));\n    if (++df[abs(y - s[x + 1])] == 1) adjoin.insert(abs(y - s[x + 1]));\n    e[x] = y;\n    //\u66f4\u65b0\u90a3\u4e2a\u4f18\u5148\u961f\u5217\n    q.push(min(y - *--al.lower_bound(y), *al.lower_bound(y) - y));\n    al.insert(y);\n}\nvoid write(int x) {\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + '0');\n}\n\nint main(int argc, char *argv[]) {\n    read(n); read(m);\n    al.insert(inf); al.insert(-inf);\n    for (int i = 1; i <= n; i++) {\n        read(x);\n        q.push(min(x - *--al.lower_bound(x), *al.lower_bound(x) - x));\n    \tal.insert(x);\n        s[i] = e[i] = x;\n        if (i == 1) continue;\n        if (++df[abs(s[i] - s[i - 1])] == 1) adjoin.insert(abs(s[i] - s[i - 1]));\n    }\n    for (int i = 1; i <= m; i++) {\n        char opt[12];\n        scanf(\"%s\", opt);\n        switch (opt[4]) {\n        \tcase 'R' : operate1(); break;\n        \tcase 'S' : write(q.top()); puts(\"\"); break;\n        \tcase 'G' : write(*adjoin.begin()); puts(\"\"); break;\n        \tdefault : break;\n\t\t}\n    }\n}\n```",
        "postTime": 1546421028,
        "uid": 78064,
        "name": "\u826f\u6708\u6faa\u4e8c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u4e3b\u8981\u601d\u8def\u5927\u6982\u4e5f\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u5bf9\u4e8e\u4e24\u79cd\u8be2\u95ee\u5206\u522b\u7528\u7ebf\u6bb5\u6811\u4e0e\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u3002\n\n1.MIN_SORT_GAP:\n\u663e\u7136\u5e73\u8861\u6811\u7b80\u5355\u64cd\u4f5c\uff0c\u6765\u4e00\u53d1\u524d\u9a71\u3001\u540e\u7ee7\u5373\u53ef\u3002\n\n2.MIN_GAP:\u8fd9\u4e00\u4e2a\u6211\u7528\u7684\u662f\u7ebf\u6bb5\u6811\uff1a\u53ef\u4ee5\u6ce8\u610f\u5230\u63d2\u5165\u5143\u7d20\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u662f\u5728\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u53cd\u590d\u63d2\u5165\uff0c\u8fd9\u4e9b\u5143\u7d20\u4e4b\u95f4\u66f4\u65b0\u51fa\u6765\u7684\u6700\u5c0f\u503c\u662f\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u7684\u3002\u53ea\u6709\u5143\u7d20\u4e0e\u5143\u7d20\u4e4b\u95f4\u4f1a\u6709\u4e0d\u65ad\u7684\u63d2\u5165\u800c\u5bfc\u81f4\u6700\u5c0f\u503c\u53d8\u5927\u3002\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539+\u7ef4\u62a4\u533a\u95f4min\u503c\uff0c\u76f8\u90bb\u63d2\u5165\u503c\uff08\u4e2d\u95f4\u4e0d\u4f1a\u518d\u51fa\u73b0\u65b0\u7684\u6570\u5b57\uff09\u4e4b\u95f4\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u7ef4\u62a4\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define INF 99999999999LL\n#define maxn 2000000 \n#define int long long\nint n, m, tot, M1 = INF, M2 = INF, a[maxn];\nint b[maxn], root;\nstruct tree\n{\n\tint l, r, num;  \n}T[maxn];\n\nstruct node\n{\n\tint v, ch[2], fa;\n}P[maxn];\n\nint read()\n{\n\tint x = 0, k = 1;\n\tchar c;\n\tc = getchar();\n\twhile(c < '0' || c > '9') { if(c == '-') k = -1; c = getchar();}\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * k;\n}\n\nstruct Splay_Balanced_Tree\n{\n\tvoid rotate(int x)\n\t{\n\t\tint f = P[x].fa, gf = P[f].fa;\n\t\tint k = x == P[f].ch[1];\n\t\tP[x].fa = gf;\n\t\tif(gf) P[gf].ch[f == P[gf].ch[1]] = x;\n\t\tP[f].ch[k] = P[x].ch[k ^ 1], P[P[x].ch[k ^ 1]].fa = f;\n\t\tP[f].fa = x, P[x].ch[k ^ 1] = f;\n\t}\n\t\n\tvoid Splay(int x, int goal)\n\t{\n\t\twhile(P[x].fa != goal)\n\t\t{\n\t\t\tint f = P[x].fa, gf = P[f].fa;\n\t\t\tif(gf != goal) (P[f].ch[1] == x) ^ (P[gf].ch[1] == f) ? rotate(x) : rotate(f);\n\t\t\trotate(x);\n\t\t}\n\t\tif(goal == 0) root = x; \n\t}\n\t\n\tvoid ins(int x)\n\t{\n\t\tint u = root, ff = 0;\n\t\twhile(u && P[u].v != x)\n\t\t{\n\t\t\tff = u;\n\t\t\tu = P[u].ch[P[u].v < x];\n\t\t}\n\t\tif(!u)\n\t\t{\n\t\t\tu = ++ tot;\n\t\t\tP[u].fa = ff;\n\t\t\tif(ff) P[ff].ch[P[ff].v < x] = u;\n\t\t\tP[u].v = x;\n\t\t\tSplay(u, 0);\n\t\t} \n\t}\n\t\n\tvoid Find(int x)\n\t{\n\t\tint u = root;\n\t\tif(!u) return;\n\t\twhile(P[u].v != x && P[u].ch[P[u].v < x]) u = P[u].ch[P[u].v < x];\n\t\tSplay(u, 0);\n\t}\n\t\n\tint next(int x, int k)\n\t{\n\t\tFind(x);\n\t\tint u = root;\n\t\tif(P[u].v == x) return P[u].v;\n\t\tif((P[u].v < x && !k) || (P[u].v > x && k)) return P[u].v;\n\t\tu = P[u].ch[k];\n\t\twhile(P[u].ch[k ^ 1]) u = P[u].ch[k ^ 1];\n\t\treturn P[u].v;\n\t}\n}SBT;\n\nstruct Segament_Tree\n{\n\tvoid build(int p, int l, int r)\n\t{\n\t\tT[p].l = l, T[p].r = r;\n\t\tif(l == r) \n\t\t{\n\t\t\tT[p].num = abs(a[l] - a[l - 1]);\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(p << 1, l, mid), build(p << 1 | 1, mid + 1, r);\n\t\tT[p].num = min(T[p << 1].num, T[p << 1 | 1].num);\n\t}\n\t\n\tvoid update(int p, int x, int num)\n\t{\n\t\tint mid = (T[p].l + T[p].r) >> 1;\n\t\tif(T[p].l == T[p].r)\n\t\t{\n\t\t\tT[p].num = num;\n\t\t\treturn;\n\t\t}\n\t\tif(x <= mid) update(p << 1, x, num);\n\t\telse update(p << 1 | 1, x, num);\n\t\tT[p].num = min(T[p << 1].num, T[p << 1 | 1].num);\n\t}\n}SGT;\n\nsigned main()\n{\n\tn = read(), m = read();\n\tSBT.ins(INF), SBT.ins(- INF);\n\ta[0] = a[n + 1] = INF;\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\ta[i] = read();\n\t\tif(i != 1) \n\t\t{\n\t\t\tint l = SBT.next(a[i], 0), r = SBT.next(a[i], 1);\n\t\t\tM2 = min(M2, min(abs(l - a[i]), abs(r - a[i])));\n\t\t}\n\t\tSBT.ins(a[i]);\n\t\tb[i] = a[i];\n\t}\n\tSGT.build(1, 1, n);\n\tfor(int i = 1; i <= m; i ++)\n\t{\n\t\tstring s;\n\t\tcin >> s;\n\t\tif(s[0] == 'I')\n\t\t{\n\t\t\tint x = read(), y = read();\n\t\t\tint l = SBT.next(y, 0), r = SBT.next(y, 1);\n\t\t\tM2 = min(M2, min(abs(l - y), abs(r - y)));\n\t\t\tSBT.ins(y);\n\t\t\tM1 = min(M1, abs(b[x] - y));\n\t\t\tSGT.update(1, x + 1, abs(a[x + 1] - y));\n\t\t\tb[x] = y;\n\t\t}\n\t\telse if(s[4] == 'G') printf(\"%lld\\n\", min(M1, T[1].num));\n\t\telse printf(\"%lld\\n\", M2);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1518680757,
        "uid": 47135,
        "name": "Twilight_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "~~\u597d\u50cf\u8fd8\u6ca1\u6709fhq_treap\u7684\u9898\u89e3\u5462\uff0c\u5468\u9053\u6765\u94bb\u4e2a\u7a7a~~\n\n---\n\n$\\ \\ \\ \\ \\ \\ \\,$\u7b2c\u4e00\u6b21\u770b\u89c1\u8fd9\u4e2a\u9898\uff1a\u60f3\u4e86\u4e00\u4f1a\uff0cwoc\uff0c\u4e09\u9897\u5e73\u8861\u6811\uff0c\u597d\u9ebb\u70e6\u5440\uff0c\u5148\u653e\u4e00\u653e\u3002\n\n$\\ \\ \\ \\ \\ \\ \\,$\u7b2c\u4e8c\u6b21\u770b\u89c1\u8fd9\u4e2a\u9898\uff1a\u60f3\u4e86\u4e00\u4f1a\uff0cwoc\uff0c\u5e73\u8861\u6811\u52a0\u7ebf\u6bb5\u6811\uff0c\u597d\u9ebb\u70e6\u5440\uff0c\u5148\u653e\u4e00\u653e\u3002\n\n$\\ \\ \\ \\ \\ \\ \\,$\u7b2c\u4e09\u6b21\u770b\u89c1\u8fd9\u4e2a\u9898\uff1a\u60f3\u4e86\u4e00\u4f1a\uff0cwoc\uff0c\u4e00\u68f5\u6743\u503c\u5e73\u8861\u6811\u52a0\u4e00\u68f5\u4f4d\u7f6e\u5e73\u8861\u6811\uff0c\u597d\u9ebb\u70e6\u5440\uff0c\u5148\u653e\u4e00\u653e\u3002\n\n$\\ \\ \\ \\ \\ \\ \\,$\u7b2c\u56db\u6b21\u770b\u89c1\u8fd9\u4e2a\u9898\uff1a\u60f3\u4e86\u4e00\u4f1a\uff0cwoc\uff0c\u4e00\u68f5\u5e73\u8861\u6811\u52a0\u5806\uff0c\u597d\u9ebb\u70e6\u5440\u2026\u2026\u8bf6\u7b49\u7b49\uff0c\u597d\u50cf\u53ef\u4ee5\u5c31\u5f00\u4e24\u4e2a\u5dee\u4e0d\u591a\u7684\u5e73\u8861\u6811\u5c31\u884c\u4e86\u2026\u2026\n\n----\n\n$\\ \\ \\ \\ \\ \\ \\,$\u5199\u7684\u65f6\u5019\u8111\u888b\u6709\u70b9\u61f5\uff0c\u4e0d\u8fc7\u8fd8\u662f\u809d\u597d\u4e86\u5462\u3002\n\n$\\ \\ \\ \\ \\ \\ \\,$\u5f53\u4ed6\u63d2\u5165\u7684\u65f6\u5019\uff0c\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\uff0c\u5c31\u662f\u5728\u5806\u91cc\u9762\u5220\u9664\u5143\u7d20\uff1a$abs(head[id+1]-tail[id])$\uff1b\u7136\u540e\u63d2\u5165\u4e24\u4e2a\u65b0\u5143\u7d20\uff1a$abs(head[id+1]-new)$\uff0c$abs(new-tail[id])$\u3002\u7136\u540e\u65b0\u7684 $tail[id]$ \u518d\u9644\u4e0a $new$\u3002\u6bcf\u6b21\u8be2\u95ee $MIN\\_GAP$ \u5c31\u662f\u8be2\u95ee\u5806\u91cc\u9762\u7684\u6700\u5c0f\u503c\u4e86\u3002\n\n$\\ \\ \\ \\ \\ \\ \\,$\u652f\u6301\u5220\u9664\uff0c\u63d2\u5165\uff0c\u67e5\u8be2\u6743\u503c\u6700\u5c0f\uff0c\u663e\u7136\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u53bb\u641e\u3002\n\n$\\ \\ \\ \\ \\ \\ \\,$\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u8be2\u95ee\uff0c\u5355\u72ec\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u9700\u8981\u5728\u96c6\u5408\u91cc\u9762\u67e5\u627e\u4ed6\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u4fbf\u53ef\u4ee5\u8ba1\u7b97\u6700\u5c0f\u7684\u5dee\u503c\uff0c\u663e\u7136\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f00\u5168\u5c40\u53d8\u91cf\u53bb\u8bb0\u5f55\u3002\n\n$\\ \\ \\ \\ \\ \\ \\,$\u652f\u6301\u63d2\u5165\uff0c\u67e5\u524d\u9a71\uff0c\u67e5\u540e\u7ee7\uff0c\u663e\u7136\u53ef\u4ee5\u53c8\u7528\u5e73\u8861\u6811\u53bb\u641e\u3002\n\n$\\ \\ \\ \\ \\ \\ \\,$\u8fd9\u91cc\u6211\u7528\u4e86\u6211\u559c\u6b22\u7684$Fhq_Treap$\uff0c\u7136\u540e\u524d\u9a71\u540e\u7ee7\u662f\u76f4\u63a5\u67e5\u7684\uff0c\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7$pushup$\u4e0a\u4f20\u6700\u5927\u6700\u5c0f\u503c\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f1a\u6162\u4e00\u70b9\uff0c\u7136\u540e\u5361\u4e86\u4f1a\u513f\u5e38\uff0c\u4ee3\u7801\u6709\u70b9\u4e11\uff1a\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<ctime>\n#include<map>\n#include<set>\nusing namespace std;\nconst int inf=0x7fffffff;\nconst double eps=1e-10;\nconst double pi=acos(-1.0);\n//char buf[1<<15],*S=buf,*T=buf;\n//char getch(){return S==T&&(T=(S=buf)+fread(buf,1,1<<15,stdin),S==T)?0:*S++;}\ninline int read(){\n  int x=0,f=1;char ch;ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-') f=0;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n  if(f)return x;else return -x;\n}\nconst int N=1000010;\nint ans=inf;\ninline int Abs(const int &a){if(a<0)return -a;return a;}\ninline int min(const int &a,const int &b){if(a<b)return a;return b;}\ninline int max(const int &a,const int &b){if(a>b)return a;return b;}\nstruct fhq_treap_val{\n  #define lson ls[rt]\n  #define rson rs[rt]\n  int val[N],size[N],key[N];\n  int ls[N],rs[N];\n  int root,cnt;\n  void pushup(int rt){size[rt]=size[lson]+size[rson]+1;}\n  int merge(int a,int b){\n    if(!a||!b)return a|b;\n    if(key[a]<key[b]){rs[a]=merge(rs[a],b);pushup(a);return a;}\n    else {ls[b]=merge(a,ls[b]);pushup(b);return b;}\n  }\n  void split(int rt,int x,int &a,int &b){\n    if(!rt){a=b=0;return;}\n    if(val[rt]<=x){a=rt;split(rson,x,rson,b);}\n    else{b=rt;split(lson,x,a,lson);}\n    pushup(rt);\n  }\n  int Max(int rt){while(rson)rt=rson;return val[rt];}\n  int Min(int rt){while(lson)rt=lson;return val[rt];}\n  int newnode(int x){\n    int rt=++cnt;\n    val[rt]=x;\n    size[rt]=1;key[rt]=rand();\n    lson=rson=0;\n    return rt;\n  }\n  void Insert(int x){\n    int a,b;\n    split(root,x,a,b);\n    int rt=newnode(x);\n    root=merge(merge(a,rt),b);\n  }\n  void Insert_2(int x){\n    int a,b;\n    split(root,x,a,b);\n    if(size[a])ans=min(ans,abs(x-Max(a)));\n    if(size[b])ans=min(ans,abs(Min(b)-x));\n    int rt=newnode(x);\n    root=merge(merge(a,rt),b);\n  }\n  void Delete(int x){\n    int a,b,c;\n    split(root,x,a,c);\n    split(a,x-1,a,b);\n    b=merge(ls[b],rs[b]);\n    root=merge(merge(a,b),c);\n  }\n}T1,T2;\nint n,m,a[N],b[N],id,g;\nchar op[20];\nint main()\n{\n  srand(time(NULL));\n  n=read();m=read();\n  for(int i=1;i<=n;i++)a[i]=b[i]=read();\n  for(int i=1;i<n;i++)T1.Insert(Abs(a[i+1]-a[i]));\n  for(int i=1;i<=n;i++)T2.Insert_2(a[i]);\n  while(m--){\n    scanf(\"%s\",op);\n    if(op[0]=='I'){\n      id=read();g=read();\n      T2.Insert_2(g);\n      if(id!=n){\n        T1.Delete(Abs(a[id+1]-b[id]));\n        T1.Insert(Abs(a[id+1]-g));\n      }\n      T1.Insert(Abs(b[id]-g));\n      b[id]=g;\n    }\n    else if(op[4]=='G')printf(\"%d\\n\",T1.Min(T1.root));\n    else printf(\"%d\\n\",ans);\n  }\n  return 0;\n}\n\n```\n\n\n",
        "postTime": 1552395558,
        "uid": 62758,
        "name": "\u5468\u9053_Althen",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u8d85\u7ea7\u5927\u6c34\u9898\u3002\u7adf\u7136\u662f\u7701\u9009\u96be\u5ea6\u7684\uff1f\n\n\u4e00\u68f5\u65e0\u6bd4\u7b80\u5355\u7684\u8fdeupdate\u90fd\u4e0d\u7528\u5199\u7684splay+\u4e00\u4e2a\u5e26\u5220\u9664\u7684\u5806\uff0c\u5b8c\u7f8e\u641e\u5b9a\u3002\n\n\u64cd\u4f5c\u4e00\uff1a\u6ca1\u5fc5\u8981\u641e\u4e00\u68f5splay\u3002\u6211\u4eec\u53ea\u7528\u5f00\u4e00\u4e2alq[500001][2]\u7684\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u7684\u524d\u9762\u548c\u540e\u9762\u5c31\u884c\u3002\n\n\u64cd\u4f5c\u4e8c\uff1a\u5e26\u4fee\u6539\u7684\u5c0f\u6839\u5806\n\n\u64cd\u4f5c\u4e09\uff1a\u628a\u6240\u6709\u6570\u6254\u5230splay\u91cc\uff0c\u6309\u5927\u5c0f\u4e3a\u5173\u952e\u5b57\uff0c\u518d\u63d2\u5165\u7684\u65f6\u5019\u53d6\u4e2amax\u7684\u5dee\u503c\u5c31\u597d\u4e86\u3002\n\n\u5b8c\u7f8e\u89e3\u51b3\uff0c\u7279\u522b\u597d\u5199~\n\n\u5b8c\u7ed3\uff0c\u6492\u82b1~\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint tot,n,m,a,k,minans=1e7;\nstruct node\n{\n    int data;\n    node *son[2],*pre;\n    bool judge();\n    void setson(node *child,int lr);\n}pool[1000001],*null,*root;\nint heap1[1500001],delheap[1000001],lq[500001][3];\nchar s[25];\nbool node::judge(){return pre->son[1]==this;}\nvoid node::setson(node *child,int lr){son[lr]=child;if(child!=null)child->pre=this;}\nnode *getnew(int value)\n{\n    node *now=pool+ ++tot;\n    now->data=value;\n    now->pre=now->son[1]=now->son[0]=null;\n    return now;\n}\nint ab(int x)\n{\n    return x<0?-x:x;\n}\nvoid rotate(node *&now)\n{\n    node *dad=now->pre,*grandfa=now->pre->pre;\n    int lr=now->judge();\n    dad->setson(now->son[lr^1],lr);\n    now->setson(dad,lr^1);\n    now->pre=grandfa;\n    if(grandfa!=null) grandfa->son[grandfa->son[1]==dad?1:0]=now;\n}\nvoid splay(node *now,node *tar)\n{\n    for(;now->pre!=null;rotate(now))\n    if(now->pre->pre!=tar)\n    now->judge()==now->pre->judge()?rotate(now->pre):rotate(now);\n    if(tar==null)root=now;\n}\nvoid in(int *heap,int value)\n{\n    heap[++heap[0]]=value;\n    int now=heap[0],nxt;\n    while(now>1)\n    {\n        nxt=now>>1;\n        if(heap[nxt]<heap[now])break;\n        swap(heap[nxt],heap[now]);\n        now=nxt;\n    }\n}\nvoid del(int *heap)\n{\n    heap[1]=heap[heap[0]--];\n    int now=1,nxt;\n    while(now*2<=heap[0])\n    {\n        nxt=now<<1;\n        if(heap[nxt]>heap[nxt+1]&&nxt<heap[0])nxt++;\n        if(heap[now]<heap[nxt])break;\n        swap(heap[now],heap[nxt]);\n        now=nxt;\n    }\n}\nvoid insert(int value)\n{\n    node *newone=getnew(value);\n    node *now=root,*last=null;\n    while(now!=null)\n    {\n        last=now;\n        if(ab(newone->data-now->data)<minans)minans=ab(newone->data-now->data);\n        if(now->data>=newone->data) now=now->son[0];\n        else now=now->son[1];\n    }\n    if(last==null) root=newone;\n    else\n    {\n        if(ab(newone->data-last->data)<minans)minans=ab(newone->data-last->data);\n        if(last->data>=newone->data) last->setson(newone,0);\n        else last->setson(newone,1);\n    }\n}\nint main()\n{\n    null=pool;\n    null->data=0;\n    null->pre=null->son[1]=null->son[0]=null;\n    root=null;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&lq[i][1]);\n        lq[i][2]=lq[i][1];\n        if(i>1)in(heap1,ab(lq[i][1]-lq[i-1][2]));\n        insert(lq[i][1]);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%s\",s);\n        if(s[0]=='I')\n        {\n            scanf(\"%d%d\",&a,&k);\n            if(a<n)\n            {\n                in(delheap,ab(lq[a][2]-lq[a+1][1]));\n                in(heap1,ab(k-lq[a+1][1]));\n            }\n            in(heap1,ab(k-lq[a][2]));\n            lq[a][2]=k;\n            insert(k);\n        }\n        else\n        {\n            int length=strlen(s);\n            if(length<10)\n            {\n                while(heap1[1]==delheap[1])\n                {\n                    del(heap1);\n                    del(delheap);\n                }\n                printf(\"%d\\n\",heap1[1]);\n            }\n            else\n                printf(\"%d\\n\",minans);\n        }\n    }\n}\n```",
        "postTime": 1494070216,
        "uid": 24559,
        "name": "Treeloveswater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u53d1\u4e00\u7bc7\u6d45\u663e\u6613\u61c2\u7684\u9898\u89e3.\n\n\u7531\u9898\u610f,\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u6709\u591a\u4e2a\u5143\u7d20,\u5f88\u663e\u7136\u53ef\u4ee5\u7528vector\u7ef4\u62a4\u4e4b.\n\n\u8003\u8651min_gap\u4f1a\u88ab\u4ec0\u4e48\u4e1c\u897f\u5f71\u54cd.\u9996\u5148,\u5728\u5e8f\u5217\u5f00\u59cb\u65f6,\n$$min\\_gap=\\min_{i=2}^n\\{|a_i-a_{i-1}|\\}$$\n(\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u5c31\u5148\u4e0d\u8003\u8651vector)\n\n\u5176\u6b21,\u5728$x$\u4f4d\u7f6e\u6700\u540e\u52a0\u5165\u4e00\u4e2a\u5143\u7d20$val$\u7684\u5f71\u54cd:  \n\u8bb0$x$\u4f4d\u7f6e\u539f\u672c\u6700\u540e\u7684\u5143\u7d20\u662f$pre$(\u5373`a[x].back()`),$x+1$\u4f4d\u7f6e(\u5982\u679c\u5b58\u5728)\u5f00\u59cb\u7684\u5143\u7d20\u662f$nxt$(\u5373`a[x+1].front()`)\n\n- \u539f\u672c\u7684$|pre-nxt|$\u4e0d\u80fd\u518d\u5bf9$min\\_gap$\u4ea7\u751f\u8d21\u732e(\u8fd9\u91cc\"\u4ea7\u751f\u8d21\u732e\"\u662f\u6307\u9009\u67d0\u4e2a\u5143\u7d20\u5728$min\\_gap$\u7684\u53ef\u9009\u96c6\u5408\u4e2d(\u6ce8\u610f\u8fd9\u662f\u4e2a\u53ef\u91cd\u96c6)),\u628a\u5b83\u4ece$min\\_gap$\u7684\u53ef\u9009\u96c6\u5408\u4e2d\u5220\u9664.\n- $|pre-val|$\u4ea7\u751f\u8d21\u732e,\u52a0\u5165$min\\_gap$\u7684\u53ef\u9009\u96c6\u5408\n- $|val-nxt|$\u4ea7\u751f\u8d21\u732e,\u52a0\u5165$min\\_gap$\u7684\u53ef\u9009\u96c6\u5408\n\n\u7136\u540e`a[x].push_back(val)`\u5c31\u597d\u4e86.  \n\u8fd9\u4e2a\u96c6\u5408,\u663e\u7136\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u7ef4\u62a4.\u6211\u7528\u4e86FHQ_Treap.\u8be2\u95ee\u7684\u7ed3\u679c\u5c31\u662fFHQ_Treap\u4e2d\u7684\u6700\u5c0f\u503c\n\nmin_sort_gap\u5462?\n\u8003\u8651\u6bcf\u52a0\u5165\u4e00\u4e2a\u5143\u7d20$val$,\u8bb0\u5176\u524d\u9a71\u4e3a$pre$,\u540e\u7ee7\u4e3a$nxt$\n\n\u5219$val-pre$,$nxt-val$\u4ea7\u751f\u8d21\u732e,\u52a0\u5165$min\\_sort\\_gap$\u7684\u53ef\u9009\u96c6\u5408.\u6ce8\u610f\u5230\u8fd9\u4e2a\u96c6\u5408\u662f\u5355\u8c03\u4e0d\u51cf\u7684,\u53ef\u4ee5\u7528\u4e00\u4e2a\u53d8\u91cf$minval$\u7ef4\u62a4.\u4e3a\u4e86\u67e5\u627e\u524d\u9a71\u540e\u7ee7,\u53ef\u4ee5\u518d\u5efa\u4e00\u68f5\u5e73\u8861\u6811,\u5b58\u6240\u6709\u6570.\u7531\u4e8e\u6211\u5199\u4e86\u4e00\u4e2aFHQ_Treap\u7c7b,\u5c31\u53ef\u4ee5\u4e00\u8d77\u5b9a\u4e49\u8fd9\u4e24\u68f5FHQ_Treap\u4e86.\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O((n+m)log(n+m))$.XJOI\u4e0a\u7ed9\u4e8610s,\u6d1b\u8c37\u53ea\u67092.5s,\u5b9e\u9645\u8fd0\u884c\u53ef\u80fd\u4f1aTLE,\u9700\u8981\u5361\u5e38.\u6bd4\u5982\u6ce8\u610f\u5230\u6b63\u5728\u6709\u7528\u7684\u53ea\u6709`a[x].back(),a[x].front()`,\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4e0d\u7528vector,\u53ea\u8bb0\u5f55\u8fd9\u4e24\u4e2a\u5143\u7d20.minval\u6700\u5c0f\u662f0,\u662f0\u540e\u4e0d\u9700\u8981\u518d\u8003\u8651\u5b83\u7684\u66f4\u65b0\u7b49.\n\n```cpp\n/**********/\u7701\u7565\u5feb\u8bfb\n#define MAXN 1000011\nstruct fhq_Treap\u5c01\u88c5\n{\n    struct node\n    {\n        ll son[2];\n        ll val,data;\n        ll size;\n    }t[MAXN];\n#define rt t[cur]\n#define tl t[rt.son[0]]\n#define tr t[rt.son[1]]\n    ll root,cnt;\n    ll newnode(ll val)\n    {\n        t[++cnt]=node{0,0,val,rand(),1};\n        return cnt;\n    }\n    void pushup(ll cur)\n    {\n        rt.size=tl.size+tr.size+1;\n    }\n    fhq_Treap()//\u521d\u59cb\u5316,\u585e\u5165\u4e24\u4e2a\u6781\u503c\n    {\n        srand(time(0));\n\n        cnt=0;\n        newnode(-INF),newnode(INF);\n        root=1,t[1].son[1]=2;t[2].data=t[1].data-1;\n    }\n    void split(ll cur,ll k,ll& x,ll& y)\n    {\n        if (!cur)\n        {\n            x=y=0;\n            return;\n        }\n        if (rt.val<=k)\n        {\n            x=cur;split(rt.son[1],k,rt.son[1],y);\n        }\n        else y=cur,split(rt.son[0],k,x,rt.son[0]);\n        pushup(cur);\n    }\n    ll merge(ll x,ll y)\n    {\n        if (!x||!y)return max(x,y);\n        if (t[x].data<t[y].data)\n        {\n            t[y].son[0]=merge(x,t[y].son[0]);\n            pushup(y);\n            return y;\n        }\n        else\n        {\n            t[x].son[1]=merge(t[x].son[1],y);\n            pushup(x);\n            return x;\n        }\n    }\n    void insert(ll val)\n    {\n        ll x,y;\n        split(root,val,x,y);\n        root=merge(merge(x,newnode(val)),y);\n    }\n    void erase(ll val)\n    {\n        ll x,y,z;\n        split(root,val,x,y);\n        split(x,val-1,x,z);\n        z=merge(t[z].son[0],t[z].son[1]);\n        root=merge(merge(x,z),y);\n    }\n    ll _Qkth(ll cur,ll k)\n    {\n        if (k<=tl.size)return _Qkth(rt.son[0],k);\n        if (k<=tl.size+1)return rt.val;\n        return _Qkth(rt.son[1],k-tl.size-1);\n    }\n    ll Qkth(ll k)\n    {\n        return _Qkth(root,k+1);\n    }\n    ll Qpre(ll val)//\u4e3a\u4e86\u5904\u7406\u91cd\u590d\u5143\u7d20,\u8fd9\u91ccQpre\u8fd4\u56de\u7684\u662f\u4e0d\u5927\u4e8eval\u7684\u6700\u5927\u503c\n    {\n        ll x,y;\n        split(root,val,x,y);\n        ll res=_Qkth(x,t[x].size);\n        root=merge(x,y);\n        return res;\n    }\n    ll Qnxt(ll val)//\u540c\u7406,\u4e0d\u5c0f\u4e8eval\u7684\u6700\u5c0f\u503c\n    {\n        ll x,y;\n        split(root,val-1,x,y);\n        ll res=_Qkth(y,1);\n        root=merge(x,y);\n        return res;\n    }\n}t1,t2;//the gaps,the numbers\nll a[MAXN],b[MAXN],minval=INF;//a[x]\u5373a[x].front(),b[x]\u5373a[x].back()\nchar op[19];\nint main()\n{\n    ll n=read(),m=read();\n    for (int i = 1; i <= n; ++i)\n    {\n        ll x=read();\n        a[i]=b[i]=x;\n        if (i>1)t1.insert(abs(a[i]-b[i-1]));\n        umin(minval,x-t2.Qpre(x));\n        umin(minval,t2.Qnxt(x)-x);\n        t2.insert(x);\n    }\n    for (int i = 1; i <= m; ++i)\n    {\n        scanf(\"%s\",op);\n        if (op[0]=='I')\n        {\n            ll x=read(),val=read();\n            if (x<n)\n            {\n                t1.erase(abs(b[x]-a[x+1]));\n                t1.insert(abs(val-a[x+1]));\n            }\n            t1.insert(abs(b[x]-val));\n            b[x]=val;\n            if (minval)\n            {\n                umin(minval,val-t2.Qpre(val));\n                umin(minval,t2.Qnxt(val)-val);\n                t2.insert(val);\n            }\n        }\n        else if (op[4]=='G')printf(\"%lld\\n\",t1.Qkth(1));\n        else printf(\"%lld\\n\",minval);\n    }\n    return 0;\n}\n```",
        "postTime": 1579925242,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "$2019.11.05$ $update:$ \u65b0\u589e\u4e00\u4efd\u5e26\u6ce8\u91ca\u7684\u4ee3\u7801\uff0c\u66f4\u65b9\u4fbf\u98df\u7528\n\n\u672c\u7bc7\u9898\u89e3\u548c $@$[\u96e8\u5e55\u6563\u5f71_\u5c0f\u521d](https://www.luogu.org/user/135659)\u5171\u540c\u5b8c\u6210\u3002\n\n\u8fd9\u9898\u53ef\u771f\u662f\u8bba $STL$ \u7684\u5999\u7528\u4e86 $qwq$\n\n\u5c0f\u840c\u65b0\u5927\u6982\u770b\u4e86\u4e00\u4e0b\uff0c\u76ee\u524d\u9898\u89e3\u91cc\u5e94\u8be5\u6ca1\u6709\u4ee3\u7801\u91cf\u6bd4\u8fd9\u4e2a\u77ed\u7684 _~~(\u4e5f\u6ca1\u6709\u5e38\u6570\u6bd4\u8fd9\u4e2a\u5927\u7684)~~_ \n\n\u7528 $multiset$ \u548c $vector$ \u89e3\u51b3\n\n$vector$ \u7528\u6765\u5904\u7406\u6dfb\u52a0\u6570\u7684\u64cd\u4f5c\uff0c\u7ed9\u521d\u59cb\u6bcf\u4e2a\u6570\u7684\u4e0b\u6807\u90fd\u5efa\u4e00\u4e2a $vector$\uff0c\u7136\u540e\u5c06\u521d\u59cb\u7684\u6570\u653e\u8fdb\u53bb\uff0c\u9700\u8981\u6dfb\u52a0\u7684\u8bdd\u76f4\u63a5\u5728\u8fd9\u4e2a\u4e0b\u6807\u7684 $vector$ \u91cc $push$ _ $back$ \u9700\u8981\u6dfb\u52a0\u7684\u6570\u5b57\u5373\u53ef\n\n\u7136\u540e\u5c31\u9700\u8981\u4e24\u4e2a $multiset$ \u5206\u522b\u89e3\u51b3\u4e24\u4e2a\u8be2\u95ee\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u8be2\u95ee\uff0c\u9700\u8981\u4e00\u4e2a $multiset($\u4e0b\u79f0 $gap$ $)$ \u50a8\u5b58\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u7684\u5dee\uff0c\u6bcf\u6b21\u52a0\u5165\u6570\u5b57\u7684\u8bdd\uff0c\u5982\u679c\u5411 $x$ \u548c $y$ \u4e4b\u95f4\u52a0\u5165 $v$, \u90a3\u4e48\u5c31\u9700\u8981\u5148\u4ece $gap$ \u4e2d\u53d6\u51fa $x$ \u548c $y$ \u7684\u5dee\uff0c\u7136\u540e\u518d\u63d2\u5165 $v$ \u4e0e $x$ \u4ee5\u53ca $v$ \u4e0e $y$ \u7684\u5dee$($\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u5f00\u8fd9\u4e2a $multiset$\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u53ea\u8bb0\u5f55\u6700\u5c0f\u5dee\u503c\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\u5c31\u65e0\u6cd5\u53d6\u51fa $x$ \u548c $y$ \u7684\u5dee$)$ \n\n\u6ce8\u610f\u8ba1\u7b97\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u5dee\u503c\u5c31\u9700\u8981\u7528 $vector$ \u4e86\uff0c\u7528 $v$ \u548c $v$ \u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u7684 $vector$ \u7684\u524d\u4e00\u4e2a\u6570\u5b57$(x)$\u4ee5\u53ca $v$ \u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a $vector$ \u7684\u7b2c\u4e00\u4e2a\u6570\u5b57$(y)$\u5206\u522b\u4f5c\u5dee\n\n\u56e0\u4e3a $multiset$ \u81ea\u5e26\u6392\u5e8f\uff0c\u6240\u4ee5\u56de\u7b54\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7684\u8bdd\u53ea\u9700\u8981\u7b80\u5355\u5730\u8f93\u51fa $gap$ \u7684 $begin$ \u5373\u53ef\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u4e00\u4e2a $multiset($\u4e0b\u79f0 $sort$ _ $gap$ $)$ \u50a8\u5b58\u6bcf\u4e2a\u6570\u5b57\uff0c\u8fd9\u91cc\u4e5f\u7528\u5230\u4e86 $multiset$ \u81ea\u5e26\u6392\u5e8f\u7684\u6027\u8d28\u3002\n\n\u7136\u540e\u6211\u4eec\u9700\u8981\u4e00\u4e2a $ans$ \u6765\u8bb0\u5f55\u6b64\u65f6\u6392\u5e8f\u540e\u4e24\u4e24\u4e4b\u95f4\u7684\u5dee\u503c\u6700\u5c0f\u503c\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u56e0\u4e3a\u6709\u5e8f\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u8be2\u95ee\u4e8c\u7684\u7b54\u6848\u53ea\u4f1a\u66f4\u5c0f\u800c\u4e0d\u4f1a\u66f4\u5927\u3002\n\n\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u53ea\u9700\u8981\u7528 $lower$ _ $bound$ \u5728 $sort$ _ $gap$ \u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u63d2\u5165\u6570\u5b57\u7684\u5730\u65b9\uff0c\u7528\u5b83\u548c\u63d2\u5165\u540e\u5b83\u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u5b57\u66f4\u65b0\u4e00\u4e0b $ans$\uff0c\u6700\u540e\u522b\u5fd8\u4e86\u628a\u5b83\u6254\u5230 $sort$ _ $gap$ \u91cc\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\uff0c\u7136\u540e\u9700\u8981\u5904\u7406\u51e0\u4e2a\u7ec6\u8282$:$\n\n- \u6bd4\u5982 $lower$ _ $bound$ \u5728 $sort$ _ $gap$ \u91cc\u67e5\u8be2\u7684\u65f6\u5019\u8981\u6ce8\u610f\u8fb9\u754c\uff0c\u4e0d\u8981\u8bbf\u95ee\u4e86\u7a7a\u6307\u9488\uff0c\u8fd9\u91cc\u7684\u5efa\u8bae\u662f\u7ed9 $multiset$ \u91cc\u6254\u4e00\u4e2a $-inf$ \u548c $inf$\uff0c\u8fd9\u6837\u5b50\u5c31\u4e0d\u4f1a\u8d8a\u754c\u4e86\u3002\u7528 $multiset$ \u7684\u8bdd\u5c31\u662f\u8fb9\u754c\u95ee\u9898\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u4e00\u4e0d\u5c0f\u5fc3\u8c03\u7528\u4e86\u7a7a\u6307\u9488\u5c31\u76f4\u63a5\u89c1\u7956\u5b97\u4e86$($\u6211\u5c31\u662f\u8fd9\u6837\u5361\u4e86\u4e00\u4e2a\u5c0f\u65f6$)$\n\n- \u56e0\u4e3a\u7528\u4e86 _~~\u81ed\u540d\u662d\u8457~~_ \u7684 $STL$ \u5bfc\u81f4\u5e38\u6570\u6781\u5927 _~~(\u4f46\u5c0f\u840c\u65b0\u5c31\u662f\u559c\u6b22\u554aQvQ)~~_ \u4e00\u5b9a\u8981\u5438\u6c27\uff0c\u4e0d\u7136\u4e5f\u89c1\u7956\u5b97\u3002\n\n- \u8fd8\u6709\u4e00\u4e2a\u5c0f\u4f46\u81f4\u547d\u7684\u7ec6\u8282\uff0c\u4e0d\u8981\u5728 $min$ \u51fd\u6570\u91cc\u8fdb\u884c\u6307\u9488\u7684 $++$ \u6216 $--$ \u64cd\u4f5c\uff0c\u4f1a\u5947\u5999\u7684 $WA$\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4e5f\u5361\u4e86\u4e0d\u5c11\u65f6\u95f4\u3002\u3002\u3002\n\n- \u5728 $vector$ \u91cc\u8ba1\u7b97\u524d\u540e\u5dee\u503c\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u6ce8\u610f\u5982\u679c\u662f\u5728\u6700\u540e\u4e00\u4e2a\u6570\u540e\u9762\u63d2\u5165\u6570\u5b57\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8bb0\u5f55\u5b83\u548c\u524d\u4e00\u4e2a\u6570\u5b57\u7684\u5dee\uff0c\u800c\u4e0d\u9700\u8981\u8bb0\u5f55\u5b83\u548c\u540e\u4e00\u4e2a\u6570\u7684\u5dee$($\u56e0\u4e3a\u5b83\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u554a$)$\uff0c\u4e0d\u7136\u65e0\u9650\u7206 $0$\n\n\u7801\u91cf\u4e0d\u5927\u4f46\u7ec6\u8282\u8fd8\u6bd4\u8f83\u591a\u3002\u3002\u3002\n\n$STL$ \u4e07\u5c81\uff01\uff01\uff01\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<set>\n#define maxn 500005\n#define inf 999999999\nusing namespace std;\nint n, m, u, v, ans = inf, a[maxn];\nmultiset<int> sort_gap, gap;\nstring s;\nvector<int> mp[maxn];\n\ninline int get_min(int v) {\n\tmultiset<int>::iterator gg = sort_gap.lower_bound(v);\n\tint cur = *gg - v, tmp = v - *(-- gg);\n\treturn min(cur, tmp);\n}\n\nsigned main() {\n\tios::sync_with_stdio(false);\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n; i ++) cin >> a[i], mp[i].push_back(a[i]);\n\tsort_gap.insert(inf), sort_gap.insert(- inf);\n\tfor(int i = 2; i <= n; i ++) gap.insert(abs(a[i] - a[i - 1]));\n\tfor(int i = 1; i <= n; i ++) ans = min(ans, get_min(a[i])), sort_gap.insert(a[i]);\n\twhile(m --) {\n\t\tcin >> s;\n\t\tif(s == \"INSERT\") {\n\t\t\tcin >> u >> v;\n\t\t\tif(u != n) {\n\t\t\t\tgap.erase(gap.find(abs(mp[u][mp[u].size() - 1] - mp[u + 1][0])));\n\t\t\t\tgap.insert(abs(v - mp[u + 1][0]));\n\t\t\t}\n\t\t\tgap.insert(abs(mp[u][mp[u].size() - 1] - v));\n\t\t\tmp[u].push_back(v);\n\t\t\tans = min(ans, get_min(v));\n\t\t\tsort_gap.insert(v);\n\t\t}\n\t\tif(s == \"MIN_SORT_GAP\") cout << ans << endl;\n\t\tif(s == \"MIN_GAP\") cout << *gap.begin() << endl;\n\t}\n} \n```\n\n\u4ee5\u4e0b\u662f\u6709\u6ce8\u91ca\u7684\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=500005,inf=999999999;\nint n,m,u,v,hvx=inf,a[N];\nmultiset<int> lbh,lys;//\u6765\u81ea\u673a\u623f\u7684\u4e24\u4f4d\u5de8\u4f6c\uff0clbh\u8868\u793a\u6c42\u8be2\u95ee\"MIN_SORT_GAP\"\uff0clys\u5219\u662f\u53e6\u4e00\u4e2a\"MIN_GAP\" \nstring s;\nvector<int> mp[N];//vector\u5b58\u50a8\u6bcf\u4e2a\u70b9\u540e\u9762\u65b0\u589e\u52a0\u7684\u6570\uff0c\u597d\u50cf\u53ef\u4ee5\u7528\u6570\u7ec4\uff1f(\u849f\u84bb\u5e76\u4e0d\u4f1a\u554a--\u9003-- \ninline int get_min(int v)\n{\n\tmultiset<int>::iterator lb=lbh.lower_bound(v);\n\tint cur=*lb-v,tmp=v-*(--lb);//\u6ce8\u610f\u8fd9\u91cc\u7528--lb\u800c\u4e0d\u662flb--\uff0c\u7531\u4e8e\u6307\u9488\u7684\u7279\u6027\u80fd\u5feb\u4e00\u70b9 \n\treturn min(cur,tmp);//\u4e00\u5b9a\u4e0d\u8981\u5728algorithm\u5e93\u4e2d\u7684min\u51fd\u6570\u91cc--\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8c03\u8bd5\u4e86\u597d\u4e45 \n}\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)cin>>a[i],mp[i].push_back(a[i]);\n\tlbh.insert(inf),lbh.insert(-inf);//\u63d2\u5165\u6b63\u8d1f\u65e0\u7a77\u53ef\u4ee5\u907f\u514d\u540e\u9762\u63d2\u5165\u64cd\u4f5c\u4e2d\u5bf9\u6307\u9488\u8d8a\u754c\u7684\u5224\u65ad \n\tfor(int i=2;i<=n;i++)lys.insert(abs(a[i]-a[i-1]));\n\tfor(int i=1;i<=n;i++)hvx=min(hvx,get_min(a[i])),lbh.insert(a[i]);\n\twhile(m--)\n\t{\n\t\tcin>>s;\n\t\tif(s==\"INSERT\")\n\t\t{\n\t\t\tcin>>u>>v;\n\t\t\tif(u!=n)\n\t\t\t{\n\t\t\t\tlys.erase(lys.find(abs(mp[u][mp[u].size()-1]-mp[u+1][0])));//\u5c0f\u6280\u5de7\uff0c\u7528\u6765\u6e05\u9664multiset\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 \n\t\t\t\tlys.insert(abs(v-mp[u+1][0]));//\u8fd9\u91cc\u6bcf\u6b21\u8fdb\u6765\u65b0\u503c\u53ef\u80fd\u4f1a\u5c06\u539f\u6765\u7684\u503c\u7834\u574f\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u628a\u52a0\u6570\u540e\u88ab\u5f71\u54cd\u7684\u503c\u5220\u6389\u518d\u52a0\u5165\u65b0\u503c \n\t\t\t}\n\t\t\tlys.insert(abs(mp[u][mp[u].size()-1]-v));\n\t\t\tmp[u].push_back(v);\n\t\t\thvx=min(hvx,get_min(v));lbh.insert(v);\n\t\t}\n\t\tif(s==\"MIN_SORT_GAP\")cout<<hvx<<endl;//\u518d\u6b21\u501f\u7528\u5b66\u4e60OI\u65f6\u957f\u8fd1\u4e94\u5e74\u7684\u5b66\u957f\u7edf\u8ba1\u81ea\u5df1\u7684\u7b54\u6848 \n\t\tif(s==\"MIN_GAP\")cout<<*lys.begin()<<endl;//multiset\u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\uff0c\u8f93\u51fa\u6307\u9488begin\u7684\u503c\u5373\u4e3a\u7b54\u6848 \n\t}\n\treturn (^_^);//\u76ae\u4e00\u4e0b\uff0c\u5f88\u5f00\u5fc3(\u8bb0\u5f97\u5220\u6389\u3002\u3002\u3002 \n}\n```\n\n(\u4e5f\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u8fc7\uff0c\u5e0c\u671b\u5427\u3002\u3002\u3002",
        "postTime": 1572876863,
        "uid": 135655,
        "name": "Lauzun",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37\u2014P1110\u2014[ZJOI2007]\u62a5\u8868\u7edf\u8ba1"
    },
    {
        "content": "\u7528Treap\uff0c\u5e38\u6570\u7565\u5927\uff0c\u9700\u8981\u5728\u591c\u6df1\u4eba\u9759\u8bc4\u6d4b\u59ec\u6bd4\u8f83\u7a7a\u95f2\u7684\u65f6\u5019\u63d0\u4ea4\n\n\u4fdd\u5b58\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u6700\u524d\u548c\u6700\u540e\u7684\u6570\uff0c\u7528\u6765\u5728\u63d2\u5165\u65f6\u66f4\u65b0\u76f8\u90bb\u7684\u5dee\u503c\n\n\u5f00\u4e24\u68f5\u5e73\u8861\u6811\uff0c\u4e00\u68f5\u7ef4\u62a4\u6240\u6709\u6570\uff0c\u53e6\u4e00\u68f5\u7ef4\u62a4\u76f8\u90bb\u5143\u7d20\u7684\u5dee\u503c\n\n\u63d2\u5165\u65f6\u8981\u5c06\u4e4b\u524d\u7684\u5dee\u503c\u5f39\u51fa\n\n\u5408\u7406\u51cf\u5c0f\u5e38\u6570\uff0c\u53ef\u4ee5\u51cf\u5c11\u7b2c\u4e8c\u68f5\u6811\u66f4\u65b0\u7b54\u6848\u7684\u6b21\u6570\uff0c\u5728\u4fee\u6539\u65f6\u6253\u4e0a\u6807\u8bb0\uff0c\u5728\u8be2\u95ee\u7684\u65f6\u5019\u518d\u66f4\u65b0\u7b54\u6848\n\n\u540c\u65f6\uff0c\u5f53MINSORTGAP\u7684\u7b54\u6848==0\u65f6\u5c31\u53ef\u4ee5\u4e0d\u518d\u66f4\u65b0\u7b2c\u4e00\u68f5\u751f\u6210\u6811\n\n\u8fd9\u6837\u5c31\u5dee\u4e0d\u591a\u80fd\u8dd1\u8fc7\u53bb\u4e86\n```cpp\n#include<cstdio>\n#include<cstdlib>\nusing namespace std;\nint n,m,opt,x,y,mg,msg=519260817,ch,tot1,tot2,root1,root2,f[500010],l[500010],out;\nchar c,s[50];\nstruct Treap\n{\n\tint l,r,val,cnt,size,dat;\n}t1[1000010],t2[1000010];\nint read()\n{\n\tout=0,c=getchar();\n\twhile(c<48||c>57){c=getchar();}\n\twhile(c>=48&&c<=57){out=(out<<3)+(out<<1)+(c&15),c=getchar();}\n\treturn out;\n}\nint min(int a,int b)\n{\n\treturn a<b?a:b;\n}\nint New1(int val)\n{\n\tt1[++tot1].val=val,t1[tot1].cnt=1,t1[tot1].size=1,\n\tt1[tot1].dat=rand()%19260817;\n\treturn tot1;\n}\nvoid Update1(int p)\n{\n\tt1[p].size=t1[t1[p].l].size+t1[t1[p].r].size+t1[p].cnt;\n}\nvoid Zig1(int &p)\n{\n\tint q=t1[p].l;\n\tt1[p].l=t1[q].r,t1[q].r=p,p=q;\n\tUpdate1(t1[q].r);Update1(p);\n}\nvoid Zag1(int &p)\n{\n\tint q=t1[p].r;\n\tt1[p].r=t1[q].l,t1[q].l=p,p=q;\n\tUpdate1(t1[q].l);Update1(p); \n}\nvoid Insert1(int &p,int val)\n{\n\tif(!p){p=New1(val);return;}\n\tif(val==t1[p].val){++t1[p].cnt;Update1(p);return;}\n\tif(val<t1[p].val)\n\t{\n\t\tInsert1(t1[p].l,val);\n\t\tif(t1[p].dat<t1[t1[p].l].dat){Zig1(p);}\n\t}\n\telse\n\t{\n\t\tInsert1(t1[p].r,val);\n\t\tif(t1[p].dat<t1[t1[p].r].dat){Zag1(p);}\n\t}\n\tUpdate1(p);\n}\nint GP(int val)\n{\n\tint ans=1,p=root1;\n\twhile(p)\n\t{\n\t\tif(val==t1[p].val){return val;}\n\t\tif(t1[p].val<val&&t1[p].val>t1[ans].val){ans=p;}\n\t\tp=val<t1[p].val?t1[p].l:t1[p].r; \n\t}\n\treturn t1[ans].val;\n}\nint GS(int val)\n{\n\tint ans=2,p=root1;\n\twhile(p)\n\t{\n\t\tif(val==t1[p].val){return val;}\n\t\tif(t1[p].val>val&&t1[p].val<t1[ans].val){ans=p;}\n\t\tp=val<t1[p].val?t1[p].l:t1[p].r; \n\t}\n\treturn t1[ans].val;\n}\nint New2(int val)\n{\n\tt2[++tot2].val=val,t2[tot2].cnt=1,t2[tot2].size=1,\n\tt2[tot2].dat=rand()%19260817;\n\treturn tot2;\n}\nvoid Update2(int p)\n{\n\tt2[p].size=t2[t2[p].l].size+t2[t2[p].r].size+t2[p].cnt;\n}\nvoid Zig2(int &p)\n{\n\tint q=t2[p].l;\n\tt2[p].l=t2[q].r,t2[q].r=p,p=q;\n\tUpdate2(t2[q].r);Update2(p);\n}\nvoid Zag2(int &p)\n{\n\tint q=t2[p].r;\n\tt2[p].r=t2[q].l,t2[q].l=p,p=q;\n\tUpdate2(t2[q].l);Update2(p); \n}\nvoid Insert2(int &p,int val)\n{\n\tif(!p){p=New2(val);return;}\n\tif(val==t2[p].val){++t2[p].cnt;Update2(p);return;}\n\tif(val<t2[p].val)\n\t{\n\t\tInsert2(t2[p].l,val);\n\t\tif(t2[p].dat<t2[t2[p].l].dat){Zig2(p);}\n\t}\n\telse\n\t{\n\t\tInsert2(t2[p].r,val);\n\t\tif(t2[p].dat<t2[t2[p].r].dat){Zag2(p);}\n\t}\n\tUpdate2(p);\n}\nvoid Delete(int &p,int val)\n{\n\tif(!p){return;}\n\tif(val==t2[p].val)\n\t{\n\t\tif(t2[p].cnt>1){--t2[p].cnt;Update2(p);return;}\n\t\tif(t2[p].l||t2[p].r)\n\t\t{\n\t\t\tif(!t2[p].r||t2[t2[p].l].dat>t2[t2[p].r].dat){Zig2(p);Delete(t2[p].r,val);}\n\t\t\telse{Zag2(p);Delete(t2[p].l,val);}\n\t\t\tUpdate2(p);\n\t\t}\n\t\telse{p=0;}\n\t\treturn;\n\t}\n\tval<t2[p].val?Delete(t2[p].l,val):Delete(t2[p].r,val);\n\tUpdate2(p);\n}\nint GVBR(int p,int rank)\n{\n\tif(!p){return 1019260817;}\n\tif(t2[t2[p].l].size>=rank){return GVBR(t2[p].l,rank);}\n\tif(t2[t2[p].l].size+t2[p].cnt>=rank){return t2[p].val;}\n\treturn GVBR(t2[p].r,rank-t2[t2[p].l].size-t2[p].cnt);\n}\nvoid Build()\n{\n\tNew1(-1019260817);New1(1019260817);\n\tNew2(-1019260817);New2(1019260817);\n\troot1=1,t1[1].r=2,\n\troot2=1,t2[1].r=2;\n\tUpdate1(root1);\n\tUpdate2(root2);\n}\nint main()\n{\n\tBuild();\n\tn=read(),m=read(),f[n+1]=1019260817,ch=1;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tf[i]=read(),l[i]=f[i],\n\t\tmsg=min(msg,min(GS(f[i])-f[i],f[i]-GP(f[i])));\n\t\tif(i>1){Insert2(root2,abs(f[i]-f[i-1]));}\n\t\tInsert1(root1,f[i]);\n\t}\n\twhile(m--)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tfor(int i=0;;++i)\n\t\t{\n\t\t\tif(s[i]=='E'){opt=0;break;}\n\t\t\tif(s[i]=='G'){opt=1;break;}\n\t\t\tif(s[i]=='O'){opt=2;break;}\n\t\t}\n\t\tif(!opt)\n\t\t{\n\t\t\tx=read(),y=read();\n\t\t\tDelete(root2,abs(f[x+1]-l[x]));\n\t\t\tInsert2(root2,abs(y-l[x]));\n\t\t\tInsert2(root2,abs(f[x+1]-y));\n\t\t\tmsg=min(msg,min(GS(y)-y,y-GP(y))),l[x]=y,ch=1;\n\t\t\tInsert1(root1,y);\n\t\t}\n\t\tif(opt==1)\n\t\t{\n\t\t\tif(ch){ch=0;mg=GVBR(root2,2);}\n\t\t\tprintf(\"%d\\n\",mg);\n\t\t}\n\t\tif(opt==2){printf(\"%d\\n\",msg);}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1570707166,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u5e73\u8861\u6811\u597d\u9898   \n\n----------------\n\n\u4e0d\u5e9f\u8bdd\uff0c\u6b65\u5165\u6b63\u9898   \n\n\n\u6211\u5148\u628a\u9898\u610f\u8865\u5145\u4e00\u4e0b\uff0c\u5bf9\u4e8e$INSERT\\ \\ i\\ \\ k$  \u64cd\u4f5c\uff0c\u5e76\u4e0d\u662f\u4ee5\u5143\u7d20\u4e3a\u5750\u6807\u5728\u5143\u7d20\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a\u6570\uff0c\u800c\u662f\u4ee5\u5206\u6bb5\u4e3a\u5355\u4f4d\uff0c\u5728\u7b2c$i$\u6bb5\u672b\u7aef\u52a0\u5165\u4e00\u4e2a\n\u5143\u7d20$k$\uff0c\u4f8b\u5982\u6837\u4f8b  \n```\n[5][3][1]\n```\n\u5728\u7b2c2\u6bb5\u63d2\u51659\n```\n[5][3,9][1]\n```\n\u5728\u7b2c2\u6bb5\u63d2\u51656\n```\n[5][3,9,6][1]\n```\n\u5982\u679c\u5728\u7b2c3\u6bb5\u63d2\u5165$x$ \n```\n[5][3,9,6][1,x]\n```\n\u5206\u6bb5\u53ea\u662f\u65b9\u4fbf\u8bf4\u660e\u63d2\u5165\u64cd\u4f5c\uff0c\u76f8\u90bb\u6bb5\u4e4b\u95f4\u7684\u5dee\u503c\u4e5f\u8981\u8ba1\u7b97  \n\n\n-------------------------\n\n\u56e0\u4e3a\u6709\u4e86\u5206\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u66f4\u65b9\u4fbf\u7684\u5904\u7406\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6bb5\u7684\u8868\u793a\uff0c\u8bb0\u5f55\u4e00\u4e2a$prev$\u548c$last$(\u5728\u6211\u7a0b\u5e8f\u4e2d\u662f$x$\u6570\u7ec4\u548c$y$\u6570\u7ec4)\uff0c\u5bf9\u4e8e\u63d2\u5165\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u7528\u4fee\u6539\u5bf9\u5e94\u5206\u6bb5\u7684$last$  \n\n\n\n---------------\n\u5bf9\u4e8e$MIN\\_GAP$\u8be2\u95ee  \n\u6211\u4eec\u6784\u9020\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u4fdd\u5b58\u5f53\u524d\u7684\u76f8\u90bb\u5dee\u503c\u7684\u6700\u5c0f\u503c(\u4e3a\u4ec0\u4e48\u7528\u5e73\u8861\u6811\uff1f\u56e0\u4e3a\u540e\u9762\u6709\u5220\u9664\u64cd\u4f5c)  \n\u6700\u5f00\u59cb\u7684$n-1$\u4e2a\u5dee\u503c\u8bb0\u5f97\u5148\u52a0\u5165  \n\u5bf9\u4e8e\u6bcf\u4e2a$INSERT$\u64cd\u4f5c  \n- \u5982\u679c\u52a0\u5165\u7684\u5730\u65b9\u4e0d\u662f\u6700\u540e\u4e00\u6bb5\uff0c\u5c31\u8981\u628a\u64cd\u4f5c\u524d\u8fd9\u4e00\u6bb5\u4e0e\u4e0b\u4e00\u6bb5\u76f8\u90bb\u7684\u5dee\u503c\u5220\u9664   \n- \u52a0\u5165\u8be5\u6570\u4e0e\u524d\u9762\u4e00\u4e2a\u6570\u7684\u5dee\u503c  \n- \u5982\u679c\u52a0\u5165\u7684\u5730\u65b9\u4e0d\u662f\u6700\u540e\u4e00\u6bb5\uff0c\u5219\u52a0\u5165\u8fd9\u4e2a\u6570\u4e0e\u4e0b\u4e00\u6bb5\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u5dee\u503c  \n\n\u89c1\u4ee3\u7801\n```cpp\nscanf(\"%d%d\",&p,&q);\nif(p!=n)remove(root,abs(x[p+1]-y[p]));\ninsert(root,abs(q-y[p]));\ny[p]=q;\nif(p!=n)insert(root,abs(x[p+1]-y[p]));\n//\u540e\u9762\u7684\u5148\u4e0d\u7528\u7ba1\nMin=min(Min,min(abs(q-getprev_(q)),abs(q-getnext_(q))));\ninsert_(root_,q);\n```\n\u6bcf\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u5373\u662f\u5e73\u8861\u6811\u4e2d\u7684\u6700\u5c0f\u503c\n\n-----------------------\n\n\u5bf9\u4e8e$MIN\\_SORT\\_GAP$\u8be2\u95ee  \n\u5efa\u8bae\u5148\u770b\u8fd9\u9053\u9898\uff1a[\u8425\u4e1a\u989d\u7edf\u8ba1](https://www.luogu.org/problemnew/show/P2234)  \n\u4e0e\u8fd9\u9053\u9898\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u6362\u4e86\u4e00\u79cd\u95ee\u6cd5  \n\u518d\u5f00\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u5b58\u52a0\u5165\u7684\u5143\u7d20\u7684\u503c\uff0c\n\u5f00\u4e00\u4e2a\u5143\u7d20$Min$\u4fdd\u7559\u5f53\u524d\u7b54\u6848\uff0c\u6bcf\u6b21\u52a0\u5165\u6570\u7684\u65f6\u5019\u627e\u524d\u9a71\u540e\u7ee7\u4e0e\u5b83\u7684\u5dee\u503c\u4fdd\u7559\u6700\u5c0f\u503c  \n\u522b\u5fd8\u4e86\u6700\u5f00\u59cb\u7684n\u4e2a\u6570\u4e5f\u8981\u6309\u987a\u5e8f\u52a0\u8fdb\u53bb   \n\u73b0\u5728\u4f60\u5e94\u8be5\u660e\u767d\u4e0a\u9762\u4ee3\u7801\u7684\u6700\u540e\u4e24\u884c\u4ec0\u4e48\u610f\u601d\n\n\n---------------------\n\u624b\u6253\u4e24\u68f5\u5e73\u8861\u6811\u771f\u5fc3\u4e0d\u5bb9\u6613\uff0c\u53d1\u6cc4\u4e00\u4e0b  \n\u5f00\u59cb\u7528\u4e86$STL\\ set$\u548c$STL\\ string$  \n\u7ed3\u679c\u5f00\u4e86$O2$\u8fd8\u662f$TLE$\uff0c\u6539\u6210\u624b\u6253\u5e73\u8861\u6811\u548c$char$\u6570\u7ec4\u540e\uff0c\u4e0d\u5f00$O2$\u4e5f\u80fd$AC$\u3002  \n\u5949\u4e0a\u6211\u7684\u957f\u8fbe$6KB$\u7684\u4ee3\u7801\uff1a  \n```cpp\n\\\\\u81ea\u8ba4\u4e3a\u7801\u98ce\u8fd8\u633a\u597d\u770b\u7684\n\\\\\u524d\u9762\u5e73\u8861\u6811\u6a21\u677f\u53ef\u4ee5\u8df3\u8fc7  \n\\\\\u7279\u522b\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u7684\u5e73\u8861\u6811\u662f\u6570\u7ec4\u6a21\u62df\u4e14\u6ca1\u6709\u6808\u4f18\u5316\u7684\u5185\u5b58\u56de\u6536\uff0c\u5e73\u8861\u6811\u7684\u5143\u7d20\u4e00\u5b9a\u8981\u5f00\u52302000000\uff0c\u56e0\u4e3a\u6709\u5220\u9664\u64cd\u4f5c\n#include<bits/stdc++.h>\n#define INF (1<<30)\nusing namespace std;\nstruct node{\n\tint l,r,data,val,size,cnt;\n}a[2000005],b[2000005];\nint pop=0,root;\nint New(int data){\n\tpop++;\n\ta[pop].l=a[pop].r=0;\n\ta[pop].data=data;\n\ta[pop].val=rand();\n\ta[pop].size=1;\n\ta[pop].cnt=1;\n\treturn pop;\n}\nvoid updata(int p){\n\ta[p].size=a[a[p].l].size+a[a[p].r].size+a[p].cnt;\n}\nvoid build(){\n\troot=New(-INF);\n\ta[root].r=New(INF);\n\tupdata(root);a[0].cnt=a[0].data=a[0].size=a[0].val=0;\n}\nvoid zig(int &p){\n\tint q=a[p].l;\n\ta[p].l=a[q].r;\n\ta[q].r=p;p=q;\n\tupdata(a[p].r);\n\tupdata(p);\n}\nvoid zag(int &p){\n\tint q=a[p].r;\n\ta[p].r=a[q].l;\n\ta[q].l=p;p=q;\n\tupdata(a[p].l);\n\tupdata(p);\n}\nvoid insert(int &p,int data){\n\tif(p==0){\n\t\tp=New(data);\n\t\treturn;\n\t}\n\tif(data==a[p].data){\n\t\ta[p].cnt++;\n\t\tupdata(p);\n\t\treturn;\n\t}\n\tif(data<a[p].data){\n\t\tinsert(a[p].l,data);\n\t\tif(a[a[p].l].val>a[p].val)zig(p);\n\t\telse updata(p);\n\t\treturn;\n\t}\n\tif(data>a[p].data){\n\t\tinsert(a[p].r,data);\n\t\tif(a[a[p].r].val>a[p].val)zag(p);\n\t\telse updata(p);\n\t\treturn;\n\t}\n}\nvoid remove(int &p,int data){\n\tif(p==0)return;\n\tif(a[p].data==data){\n\t\tif(a[p].cnt>1){\n\t\t\ta[p].cnt--;\n\t\t\tupdata(p);\n\t\t\treturn;\n\t\t}\n\t\tif(a[p].l||a[p].r){\n\t\t\tif(a[p].r==0||a[a[p].l].val>a[a[p].r].val)\n\t\t\t  zig(p),remove(a[p].r,data);\n\t\t\telse zag(p),remove(a[p].l,data);\n\t\t\tupdata(p);return;\n\t\t}\n\t\tp=0;return;\n\t}\n\tif(data<a[p].data)remove(a[p].l,data);\n\telse remove(a[p].r,data);updata(p);\n}\nint getprev(int data){\n\tint ans=1;\n\tint p=root;\n\twhile(p){\n\t\tif(data>a[p].data){\n\t\t\tif(a[p].data>=a[ans].data)\n\t\t\t  ans=p;\n\t\t\tp=a[p].r;\n\t\t}\n\t\telse p=a[p].l;\n\t}\n\treturn a[ans].data;\n}\nint getnext(int data){\n\tint ans=2;\n\tint p=root;\n\twhile(p){\n\t\tif(data<a[p].data){\n\t\t\tif(a[p].data<=a[ans].data);\n\t\t\t  ans=p;\n\t\t\tp=a[p].l;\n\t\t}\n\t\telse p=a[p].r;\n\t}\n\treturn a[ans].data;\n}\nint getvalbyrank(int p,int rank){\n\tif(p==0)return 0;\n\tif(a[a[p].l].size>=rank)return getvalbyrank(a[p].l,rank);\n    if(a[a[p].l].size+a[p].cnt>=rank)return a[p].data;\n    return getvalbyrank(a[p].r,rank-a[p].cnt-a[a[p].l].size);\n}\nint getrankbyval(int p,int val){\n\tif(p==0)return 0;\n\tif(val==a[p].data) return a[a[p].l].size+1;\n\tif(val<a[p].data)return getrankbyval(a[p].l,val);\n\treturn getrankbyval(a[p].r,val)+a[a[p].l].size+a[p].cnt;\n}\nint top=0,root_;\nint New_(int data){\n\ttop++;\n\tb[top].l=b[top].r=0;\n\tb[top].data=data;\n\tb[top].val=rand();\n\tb[top].size=1;\n\tb[top].cnt=1;\n\treturn top;\n}\nvoid updata_(int p){\n\tb[p].size=b[b[p].l].size+b[b[p].r].size+b[p].cnt;\n}\nvoid build_(){\n\troot_=New_(-INF);\n\tb[root_].r=New_(INF);\n\tupdata_(root_);b[0].cnt=b[0].data=b[0].size=b[0].val=0;\n}\nvoid zig_(int &p){\n\tint q=b[p].l;\n\tb[p].l=b[q].r;\n\tb[q].r=p;p=q;\n\tupdata_(b[p].r);\n\tupdata_(p);\n}\nvoid zag_(int &p){\n\tint q=b[p].r;\n\tb[p].r=b[q].l;\n\tb[q].l=p;p=q;\n\tupdata_(b[p].l);\n\tupdata_(p);\n}\nvoid insert_(int &p,int data){\n\tif(p==0){\n\t\tp=New_(data);\n\t\treturn;\n\t}\n\tif(data==b[p].data){\n\t\tb[p].cnt++;\n\t\tupdata_(p);\n\t\treturn;\n\t}\n\tif(data<b[p].data){\n\t\tinsert_(b[p].l,data);\n\t\tif(b[b[p].l].val>b[p].val)zig_(p);\n\t\telse updata_(p);\n\t\treturn;\n\t}\n\tif(data>b[p].data){\n\t\tinsert_(b[p].r,data);\n\t\tif(b[b[p].r].val>b[p].val)zag_(p);\n\t\telse updata_(p);\n\t\treturn;\n\t}\n}\nvoid remove_(int &p,int data){\n\tif(p==0)return;\n\tif(b[p].data==data){\n\t\tif(b[p].cnt>1){\n\t\t\tb[p].cnt--;\n\t\t\tupdata_(p);\n\t\t\treturn;\n\t\t}\n\t\tif(b[p].l||b[p].r){\n\t\t\tif(b[p].r==0||b[b[p].l].val>b[b[p].r].val)\n\t\t\t  zig_(p),remove_(b[p].r,data);\n\t\t\telse zag_(p),remove_(b[p].l,data);\n\t\t\tupdata_(p);return;\n\t\t}\n\t\tp=0;return;\n\t}\n\tif(data<b[p].data)remove_(b[p].l,data);\n\telse remove_(b[p].r,data);updata_(p);\n}\nint getprev_(int data){\n\tint ans=1;\n\tint p=root_;\n\twhile(p){\n\t\tif(b[p].data==data)return data;\n\t\tif(data>b[p].data){\n\t\t\tif(b[p].data>=b[ans].data)\n\t\t\t  ans=p;\n\t\t\tp=b[p].r;\n\t\t}\n\t\telse p=b[p].l;\n\t}\n\treturn b[ans].data;\n}\nint getnext_(int data){\n\tint ans=2;\n\tint p=root_;\n\twhile(p){\n\t\tif(b[p].data==data)return data;\n\t\tif(data<b[p].data){\n\t\t\tif(b[p].data<=b[ans].data);\n\t\t\t  ans=p;\n\t\t\tp=b[p].l;\n\t\t}\n\t\telse p=b[p].r;\n\t}\n\treturn b[ans].data;\n}\nint getvalbyrank_(int p,int rank){\n\tif(p==0)return 0;\n\tif(b[b[p].l].size>=rank)return getvalbyrank_(b[p].l,rank);\n    if(b[b[p].l].size+b[p].cnt>=rank)return b[p].data;\n    return getvalbyrank_(b[p].r,rank-b[p].cnt-b[b[p].l].size);\n}\nint getrankbyval_(int p,int val){\n\tif(p==0)return 0;\n\tif(val==b[p].data) return b[b[p].l].size+1;\n\tif(val<b[p].data)return getrankbyval_(b[p].l,val);\n\treturn getrankbyval_(b[p].r,val)+b[b[p].l].size+b[p].cnt;\n}\nint n,m,x[500005],y[500005];\n#define oo 0x3f3f3f3f\nint main()\n{\n\tsrand(time(0));\n\tbuild();build_();\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n    \tscanf(\"%d\",&x[i]);\n    \ty[i]=x[i];\n\t}\n\tint Min=0x7fffffff;\n\tfor(int i=1;i<n;i++){\n\t\tinsert(root,abs(x[i+1]-y[i]));\n\t}\n\tinsert_(root_,x[1]);\n\tfor(int i=2;i<=n;i++){\n\t\tMin=min(Min,min(abs(x[i]-getprev_(x[i])),abs(x[i]-getnext_(x[i]))));\n\t\tinsert_(root_,x[i]);\n\t}\n\tchar t[1000];int p,q;\n    for(int i=1;i<=m;i++){\n    \tscanf(\"%s\",t);\n        if(t[0]=='I'){\n        \tscanf(\"%d%d\",&p,&q);\n        \tif(p!=n)remove(root,abs(x[p+1]-y[p]));\n        \tinsert(root,abs(q-y[p]));\n        \ty[p]=q;\n        \tif(p!=n)insert(root,abs(x[p+1]-y[p]));\n        \tMin=min(Min,min(abs(q-getprev_(q)),abs(q-getnext_(q))));\n        \tinsert_(root_,q);\n\t\t}\n\t\telse if(t[4]=='G'){\n\t\t\tprintf(\"%d\\n\",getvalbyrank(root,2));\n\t\t}\n\t\telse{\n\t\t\tprintf(\"%d\\n\",Min);\n\t\t}\n\t}\n    return 0;\n}\n```",
        "postTime": 1550303663,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8003\u8651\u5e73\u8861\u6811\u505a\u6cd5\u3002  \n\u5f88\u660e\u663e\u6211\u4eec\u76f4\u63a5\u5957\u5e73\u8861\u6811\u5f88\u96be\u7ef4\u62a4\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0c\u4e8e\u662f\u6211\u4eec~~\u653e\u5f03\u601d\u8003~~\uff0c\u518d\u5957\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u5373\u53ef\u3002  \n\u4e3b\u8981\u60f3\u8bb2\u4e00\u4e0b\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u7684\u601d\u60f3\u4e0e\u8be5\u9898\u6ce8\u610f\u70b9\u3002  \n\u7ecf\u89c2\u5bdf\u53d1\u73b0\uff0c\u6211\u4eec\u7684insert\u5176\u5b9e\u5f88\u6709\u7279\u70b9\uff0c\u90a3\u5c31\u662f\u6bcf\u6b21\u63d2\u5165\u66fe\u7ecf\u63d2\u5165\u8fc7\u7684\u4f4d\u7f6e\u65f6\uff0c\u90a3\u4e9b\u66fe\u7ecf\u5728\u8be5\u4f4d\u7f6e\u63d2\u5165\u597d\u7684\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u503c\u662f\u6052\u5b9a\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u4e00\u6b21insert\u771f\u6b63\u6539\u53d8\u7684\u53ea\u6709\u5f53\u524d\u63d2\u5165\u7684\u8fd9\u4e2a\u503c\u4e0e\u4e0a\u4e00\u4e2a\u5728\u5f53\u524d\u4f4d\u7f6e\u63d2\u5165\u7684\u503c\u4e0e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u521d\u59cb\u5143\u7d20\u3002\u6709\u70b9\u8d39\u89e3\u7684\u4e00\u53e5\u8bdd\uff0c\u5728\u8fd9\u91cc\u4e3e\u6837\u4f8b\u7406\u89e3\u3002  \n\u6837\u4f8b\u521d\u59cb\u65f6\u662f\u8fd9\u6837\u7684\uff1a   \n```cpp\n5 3 1\n```\n2\u4f4d\u7f6e\u63d2\u5165\u4e86\u4e00\u4e2a\u5143\u7d209\uff1a  \n```cpp\n5 3 9 1\n```\n\u53c8\u57282\u4f4d\u7f6e\u63d2\u5165\u4e86\u4e00\u4e2a\u5143\u7d206\uff1a\n```cpp\n5 3 9 6 1\n```\n\u6211\u4eec\u89c2\u5bdf\u63d2\u51656\u65f6\uff0c\u6539\u53d8\u7684\u76f8\u5f53\u4e8e\u53ea\u6709\u4ed6\u548c9\u7684\u5dee\u503c\u4e0e1\u7684\u5dee\u503c\u3002  \n\u5047\u5982\u6211\u4eec\u8fd8\u8981\u57282\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a7\u7684\u8bdd\uff1a   \n```cpp\n5 3 9 6 7 1\n```\n\u8fd9\u5c31\u66f4\u76f4\u89c2\u653e\u6620\u51fa\u6765\u521a\u624d\u7684\u7ed3\u8bba\u4e86\uff0c3 9 6\u5b8c\u5168\u4e0d\u53d8\u4e86\uff0c\u53d8\u7684\u53ea\u67097\u4e0e6\u4ee5\u53ca7\u4e0e1\u7684\u5dee\u503c\u3002  \n\u4f46\u662f\u6b64\u65f6\u53c8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u4e00\u6b21\u63d2\u5165\u53ef\u80fd\u4f1a\u4f7f\u7b54\u6848\u53d8\u5927\uff0c\u6bd4\u5982\u6211\u672c\u6765\u7b54\u6848\u662f1 1\u7684\u503c0\uff0c\u4f46\u662f\u5047\u5982\u6b64\u65f6\u6211\u4eec\u5728\u4e2d\u95f4\u63d2\u516510000\uff0c\u7b54\u6848\u5c31\u8981\u53d8\u5927\u4e86\u5bf9\u5427\u3002  \n\u6240\u4ee5\u8bf4\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u6700\u5c0f\u5dee\u503c\uff0c\u8003\u8651\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002  \n\u8fd9\u5c31\u662f\u5927\u4f53\u505a\u6cd5\u5427\u3002  \n# PS\n\u63a5\u4e0b\u6765\u8bb2\u8bb2\u7ec6\u8282\u5427\u3002  \n\u6211\u4eec\u5728\u7ef4\u62a4\u521d\u59cb\u7684MIN_SORT_GAP\u503c\u65f6\uff0c\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u8fb9\u52a0\u5165\u8fb9\u7ef4\u62a4\u3002\u5f88\u591a\u4eba\u53ef\u80fd\u4f1a\u60f3\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u524d\u9762\u63d2\u5165\u7684\u6570\u636e\u6b63\u786e\u6027\u6709\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u5168\u90e8\u63d2\u5165\u540e\u5148\u5220\u6389\u8be5\u5143\u7d20\u66f4\u65b0\u4e00\u6b21\u518d\u8fd8\u539f\u8fd9\u4e2a\u5143\u7d20\u3002\u5176\u5b9e\u8fd9\u4e48\u505a\u6ca1\u6709\u5fc5\u8981\u800c\u4e14\u8fd8\u6709\u53ef\u80fdWA\u6389\uff0c\u5176\u5b9e\u6211\u4eec\u53ea\u8981\u8fb9\u63d2\u5165\u8fb9\u7ef4\u62a4\u521d\u59cb\u503c\u5c31\u53ef\u4ee5\u4e86\u3002  \n\u56e0\u4e3a\u6211\u4eec\u5728\u6ca1\u63d2\u5165\u5b8c\u6240\u6709\u6570\u65f6\uff0c\u867d\u7136\u6211\u4eec\u5728\u8fd9\u4e00\u6b21\u4e0d\u4e00\u5b9a\u5f97\u5230\u6b63\u786e\u7684\u524d\u9a71\u6216\u8005\u540e\u7ee7\uff0c\u4f46\u662f\u8fd9\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u60c5\u51b5\uff1a\u6211\u4eec\u6b64\u65f6\u6b63\u786e\u7684\u524d\u9a71\u6216\u8005\u540e\u7ee7\u8fd8\u672a\u63d2\u5165\u3002\u6240\u4ee5\u5728\u540e\u9762\u63d2\u5165\u8fd9\u4e2a\u6570\u7684\u524d\u9a71\u6216\u8005\u540e\u7ee7\u65f6\u5c31\u53ef\u4ee5\u66f4\u65b0\u5230\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fb9\u52a0\u8fb9\u7ef4\u62a4\u3002  \n\u518d\u89e3\u91ca\u4e00\u4e0b\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u7684\u524d\u9a71\u540e\u7ee7\u5728\u6240\u6709\u90fd\u63d2\u5165\u5b8c\u540e\uff08\u5373\u4fdd\u8bc1\u6bcf\u4e2a\u7684\u6b63\u786e\u6027\u540e\uff09\u5176\u5b9e\u90fd\u91cd\u590d\u8d21\u732e\u4e86\u4e00\u6b21\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u6b21\u5c31\u884c\u4e86\u4e0d\u662f\u5417\uff1f  \n\u53ef\u80fd\u8fd8\u662f\u6709\u70b9\u6a21\u7cca\uff0c\u5018\u82e5\u8fd8\u662f\u6ca1\u61c2\u5c31\u81ea\u5df1\u4e3e\u4f8b\u7406\u89e3\u5427\u3002  \n# \u8fd8\u6709\u51e0\u4e2a\u5c0f\u70b9\uff1a  \n1.\u7ebf\u6bb5\u6811\u7ef4\u62a4\u65f6\uff0c\u5efa\u8bae\u4ee4a[0] = a[n + 1] = INF\uff0c\u7136\u540ebuild\u65f6\u76f4\u63a5ans[p] = abs(a[l] - a[l - 1])\u5373\u53ef\uff1b  \n2.\u5e73\u8861\u6811\u63d2\u5165INF\uff0c-INF\uff0c~~\u8001\u95ee\u9898\u4e86~~\uff1b  \n3.\u4e00\u4e2a\u5077\u61d2\u5c0f\u6280\u5de7\u2014\u2014\u56e0\u4e3a\u6211\u4eec\u67e5\u8be2\u7684\u662f1~n\uff0c\u6240\u4ee5\u4e0d\u7528\u5199query\u76f4\u63a5return ans[1]\u5373\u53ef\uff1b  \n# \u4e0a\u4ee3\u7801\uff1a  \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nconst int Len = 1e6 + 5,Inf = 99999999999LL;\nint read()\n{\n\tint x = 0, k = 1;\n\tchar c;\n\tc = getchar();\n\twhile(c < '0' || c > '9') { if(c == '-') k = -1; c = getchar();}\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * k;\n}\nint ls(int x){return x << 1;}\nint rs(int x){return x << 1 | 1;}\nint n,m,opt,x,tot,root,ans[Len << 2],a[Len],b[Len],wh,ans1 = Inf,ans2 = Inf;\nint last[Len];\nstruct node\n{\n\tint ch[2],size,cnt,ff,val;\n}t[Len];\nvoid rotate(int x)\n{\n\tint y = t[x].ff,z = t[y].ff,k = t[y].ch[1] == x;\n\tt[z].ch[t[z].ch[1] == y] = x;\n\tt[x].ff = z;\n\t//\n\tt[y].ch[k] = t[x].ch[k ^ 1];\n\tt[t[x].ch[k ^ 1]].ff = y;\n\t//\n\tt[x].ch[k ^ 1] = y;\n\tt[y].ff = x; \n}\nvoid Splay(int x,int goal)\n{\n\twhile(t[x].ff != goal)\n\t{\n\t\tint y = t[x].ff,z = t[y].ff;\n\t\tif(z != goal) (t[y].ch[1] == x) ^ (t[z].ch[1] == y) ? rotate(x) : rotate(y);\n\t\trotate(x);\n\t}\n\tif(goal == 0) root = x;\n}\nvoid insert(int x)\n{\n\tint u = root,ff = 0;\n\twhile(u && t[u].val != x) ff = u,u = t[u].ch[x > t[u].val];\n\tif(!u)\n\t{\n\t\tu = ++ tot;\n\t\tif(ff) t[ff].ch[x > t[ff].val] = u;\n\t\tt[u].ch[0] = t[u].ch[1] = 0;\n\t\tt[u].cnt = t[u].size = 1,t[u].val = x,t[u].ff = ff;\n\t\tSplay(u , 0);\n\t}\n}\nvoid Find(int x)\n{\n\tint u = root;\n\tif(!u) return;\n\twhile(t[u].ch[x > t[u].val] && t[u].val != x) u = t[u].ch[x > t[u].val];\n\tSplay(u , 0);\n}\nint Next(int x,int f)\n{\n\tFind(x);\n\tint u = root;\n\tif(t[u].val == x) return x;\n\tif((t[u].val > x && f) || (t[u].val < x && !f)) return t[u].val;\n\tu = t[u].ch[f];\n\twhile(t[u].ch[f ^ 1]) u = t[u].ch[f ^ 1];\n\treturn t[u].val;\n}\nvoid push_up(int p){ans[p] = min(ans[ls(p)],ans[rs(p)]);}\nvoid build(int p,int l,int r)\n{\n\tif(l == r){ans[p] = abs(a[l] - a[l - 1]) ; return;}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p) , l , mid);\n\tbuild(rs(p) , mid + 1 , r);\n\tpush_up(p);\n}\nvoid update(int p,int l,int r,int idx,int x)\n{\n\tif(l == r)\n\t{\n\t\tans[p] = x;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) update(ls(p) , l , mid , idx , x);\n\telse update(rs(p) , mid + 1 , r , idx , x);\n\tpush_up(p);\n}\nchar s[15];\nvoid Update(int x){ans2 = min(ans2,min(abs(x - Next(x , 0)) , abs(x - Next(x , 1))));}\nsigned main()\n{\n\tinsert(Inf),insert(-Inf);\n\tn = read() , m = read();\n\ta[0] = a[n + 1] = Inf;\n\tfor(int i = 1; i <= n; i ++) \n\t{\n\t\tlast[i] = a[i] = read();\n\t\tif(i != 1) Update(a[i]);\n\t\tinsert(a[i]);\n\t}\n\tbuild(1 , 1 , n);\n\twhile(m --)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tint lens = strlen(s);\n\t\tif(lens == 6)\n\t\t{\n\t\t\twh = read(),x = read();\n\t\t\tUpdate(x);\n\t\t\tinsert(x);\n\t\t\tans1 = min(ans1 , abs(x - last[wh]));\n\t\t\tupdate(1 , 1 , n  , wh + 1, abs(x - a[wh + 1]));\n\t\t\tlast[wh] = x;\n\t\t}\n\t\telse if(lens == 7) printf(\"%d\\n\",min(ans1 , ans[1]));\n\t\telse if(lens == 12) printf(\"%d\\n\",ans2);\n\t}\n\treturn 0;\n}\n```\n# \u5b8c\u7ed3\u6492\u82b1\uff01",
        "postTime": 1596085425,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u624b\u5199\u5e73\u8861\u6811\u56fa\u7136\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8981\u5584\u7528$STL$\u3002\n\n\u8003\u8651\u5230\u4e24\u4e2a\u8be2\u95ee\u95f4\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u56e0\u6b64\u6211\u4eec\u5206\u5f00\u7ef4\u62a4\u3002\n\n\u7ef4\u62a4\u4e24\u4e2a$multiset$,\u5bf9\u4e8e\u6240\u6709\u5143\u7d20\u5c31\u7ef4\u62a4\u5143\u7d20\u672c\u8eab\uff0c\u627e\u5230\u65f6\u5019$lower$ $_$ $bound$\u7136\u540e\u548c\u76f8\u90bb\u4e24\u4e2a\u503c\u53bb$min$\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u76f8\u90bb\u5143\u7d20\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4$a$\uff0c$b$\uff0c\u5206\u522b\u662f\u539f\u6570\u7ec4\u548c\u4fee\u6539\u7684\u8fd9\u91cc\u6211\u4eec\u7ef4\u62a4\u76f8\u90bb\u5143\u7d20\u5dee\u503c\uff0c\u652f\u6301\u63d2\u5165\u548c\u5220\u9664\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\u3002\n\n\u4ee3\u7801\u610f\u4f1a\u5373\u53ef\uff0c\u6709\u5f88\u591a$define$\u8fd9\u91cc\u6ca1\u7c98\u3002\n\n```cpp\nconst int N=5e5+5;\n\nint n,m;\nint a[N],b[N];\nmultiset<int>t,s;\nmultiset<int>::iterator it;\n\nint main()\n{\n    fio();\n    gi(n),gi(m);\n    for(int i=1;i<=n;++i) gi(a[i]),b[i]=a[i],t.insert(a[i]);\n    char op[15];\n    int x,y,z,min2=INF;\n    for(int i=2;i<=n;++i) s.insert(abs(a[i]-a[i-1]));\n    it=t.begin();\n    ++it;\n    for(;it!=t.end();++it)\n    {\n        --it,x=*it;\n        ++it,y=*it;\n        min2=min(min2,abs(x-y));\n    }\n    while(m--)\n    {\n        cin>>op;\n        if(op[0]=='I')\n        {\n            gi(x),gi(y);\n            s.insert(abs(y-b[x]));\n            if(x!=n) s.erase(s.find(abs(b[x]-a[x+1]))),s.insert(abs(y-a[x+1]));\n            b[x]=y;\n            it=t.lower_bound(y);\n            --it,x=*it;\n            ++it,z=*it;\n            min2=min({min2,abs(x-y),abs(y-z)});\n            t.insert(y);\n        }\n        else if(op[4]=='G')\n        {\n            it=s.begin();\n            print(*it),putchar(10);\n        }\n        else print(min2),putchar(10);\n    }\n    end();\n}\n```",
        "postTime": 1580353267,
        "uid": 208081,
        "name": "MikukuOvO",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "# STL_multiset\u7684\u7ecf\u5178\u5e94\u7528\u2014\u2014\u4ee3\u66ff\u5e73\u8861\u6811\n\n### \u4e00\u9053\u771f\u6b63\u610f\u4e49\u4e0a\u6709\u601d\u7ef4\u96be\u5ea6\u7684STL\u9898\u76ee\n\n\u5982\u679c\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\uff08\u6700\u503c/\u6c42\u548c\uff09\uff0c\u6211\u4eec\u662f\u65e0\u6cd5\u7528STL\u505a\u7684\n\n\u4f46\u662f\u6b64\u9898\u8be2\u95ee\u7684\u662f\u6574\u4e2a\u6570\u7ec4\u7684\u6700\u503c\uff0c\u8fd9\u5c31\u7ed9\u4e86\u6211\u4eec\u53ef\u4e58\u4e4b\u673a\n\n\u5bf9\u4e8e\u5168\u5143\u7d20\u7684\u6700\u5c0f\u5dee\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6570\u5217\uff08multiset\uff09\uff0c\u7528\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u8bb0\u5f55\u7b54\u6848\u5373\u53ef\n\n\u5bf9\u4e8e\u76f8\u90bb\u5143\u7d20\u6700\u5c0f\u5dee\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u5220\u9664\u4e0d\u80fd\u7528\u5168\u5c40\u53d8\u91cf\u7ef4\u62a4\uff0c\u7528\u4e00\u4e2a\u652f\u6301\u63d2\u5165\u5220\u9664\u6392\u5e8f\u7684multiset\u7ef4\u62a4\u5373\u53ef\n\n[\u539f\u9898\u89e3](https://www.luogu.org/blog/cmd2001/solution-p1110)\n```\nconst int N=5e5+10,inf=0x3f3f3f3f;\nint n,m,st[N],ed[N],d=inf;\nmultiset<int>full,delta;\ntypedef multiset<int>::iterator It;\nvoid update(int x){\n\tIt it=full.lower_bound(x);\n\tIt lt=it;lt--;\n\td=min(d,min(*it-x,x-*lt));\n\tfull.insert(x);\n}\nvoid change(int pos,int x){\n\tdelta.insert(abs(x-ed[pos]));\n\tif(pos!=n){\n\t\tdelta.insert(abs(x-st[pos+1]));\n\t\tIt it=delta.find(abs(ed[pos]-st[pos+1]));\n\t\tdelta.erase(it);\n\t}\n\ted[pos]=x;\n}\nint main(){\n\t//fin;\n\tread(n),read(m);\n\tgo(i,1,n) read(st[i]),ed[i]=st[i];\n\tfull.insert(inf),full.insert(-inf);\n\t//\u66f4\u65b9\u4fbf\u5730\u5904\u7406\u524d\u9a71\u540e\u7ee7\uff0c\u800c\u4e0d\u7528\u8003\u8651\u6ca1\u6709\u524d\u9a71/\u540e\u7ee7\u7684\u60c5\u51b5 \n\tgo(i,1,n-1) delta.insert(abs(st[i+1]-ed[i]));\n\tgo(i,1,n) update(st[i]);\n\tchar s[20];\n\tfor(int i=1,pos,x;i<=m;++i){\n\t\tscanf(\"%s\",s);\n\t\tif(s[0]=='I'){\n\t\t\tread(pos),read(x);\n\t\t\tupdate(x),change(pos,x);\n\t\t}\n\t\telse if(s[4]=='S') printf(\"%d\\n\",d);\n\t\telse printf(\"%d\\n\",*delta.begin());\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565841254,
        "uid": 109434,
        "name": "\u98ce\u968f\u9010\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "wa\u4e86\u534a\u5e74\u7684\u9898\u76ee\uff0c\u4eca\u5929\u7ec8\u4e8e\u8c03\u51fa\u6765\u4e86qaq\uff0c\u5199\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e0b\u3002\n\n----\n\u8fd9\u771f\u662f\u9053\u8bed\u6587\u9898\u3002\u9898\u76ee\u7684\u610f\u601d\u5176\u5b9e\u662f\u3002\u7ed9\u4f60n\u4e2a\u961f\u5217\uff0c\u6bcf\u6b21\u52a0\u6570\u5230\u961f\u5c3e\u3002\u64cd\u4f5c3\u662f\u95ee\u5728\u6240\u6709\u7684\u6570\u4e2d\u6700\u5c0f\u7684\u5dee\u3002\u800c\u64cd\u4f5c2\u662f\u95ee\u76f8\u90bb\u7684\u6570\u95f4\u6700\u5c0f\u7684\u5dee\uff0c\u4e14\u7b2ci\u4e2a\u961f\u5217\u7684\u961f\u5c3e\u548c\u7b2ci+1\u4e2a\u961f\u5217\u7684\u961f\u5934\u662f\u76f8\u90bb\u7684\n\n- \u5bf9\u4e8e\u64cd\u4f5c3\uff0c\u76f4\u63a5\u628a\u6240\u6709\u6570\u5b57\u4e22\u5230\u5e73\u8861\u6811\u91cc\uff0c\u518d\u67e5\u8be2\u524d\u540e\u7f00\u5c31\u884c\u3002\n- \u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u6211\u4eec\u8981\u7ef4\u62a4\u7684\u662f\u6240\u6709\u76f8\u90bb\u7684\u6570\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002\u7531\u4e8e\u4fee\u6539\u7684\u7279\u6027\uff0c\u6bcf\u6b21\u5728\u7b2ca\u4e2a\u961f\u5217\u52a0\u4e00\u4e2a\u6570\u5b57\uff0c\u4f1a\u589e\u52a0\u4e24\u4e2a\u5dee\uff0c\u4e00\u4e2a\u662f\u4e0e\u4e4b\u524d\u961f\u5c3e\u7684\u5dee\uff0c\u53e6\u4e00\u4e2a\u662f\u4e0ea+1\u961f\u5934\u7684\u5dee\u3002\u8fd8\u4f1a\u51cf\u5c11\u4e00\u4e2a\u4e4b\u524d\u961f\u5c3e\u548ca+1\u961f\u5934\u7684\u5dee\uff08\u8fd9\u662f\u663e\u800c\u6613\u89c1\u7684\u5427\uff09\u3002\u5728\u8fd9\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53d1\u73b0\uff0c\u6839\u672c\u6ca1\u5fc5\u8981\u8bb0\u5f55\u6bcf\u4e2a\u961f\u5217\u91cc\u7684\u6570\uff0c\u56e0\u4e3a\u8ddf\u64cd\u4f5c\u5b8c\u5168\u4e0d\u76f8\u5e72\u3002\u53ea\u9700\u8bb0\u5f55\u961f\u5934\u548c\u961f\u5c3e\u5c31\u597d\u4e86\u3002\n- \u64cd\u4f5c2\u80af\u5b9a\u662f\u53ef\u4ee5\u62ff\u5e73\u8861\u6811\u505a\u7684\u3002\u4f46\u6211\u770b\u5230\u6709\u5927\u4f6c\u62ff2\u4e2a\u5806\u5f53\u4f5c\u4e00\u4e2a\u5e26\u5220\u9664\u7684\u5806\u6765\u7ef4\u62a4\u4e5f\u662f\u6781\u5de7\u7684\u3002\u6211\u4eec\u628a\u4ee5\u524d\u5b58\u5728\u8fc7\u7684\u6240\u4ee5\u5dee\u90fd\u4e22\u8fdb\u7b2c\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u8981\u5220\u9664\u7684\u4e22\u8fdb\u7b2c\u4e8c\u4e2a\u5c0f\u6839\u5806\u3002\u5982\u679c\u4e24\u4e2a\u5806\u7684\u5806\u9876\u76f8\u540c\uff0c\u76f4\u63a5\u5f39\u51fa\uff0c\u76f4\u5230\u5806\u9876\u4e0d\u76f8\u540c\u3002\u6b64\u65f6\u7684MIN_GAP\u5c31\u662f\u7b2c\u4e00\u4e2a\u5806\u7684\u5806\u9876\uff0c\u56e0\u4e3a\u5b83\u7edd\u5bf9\u662f\u6700\u5c0f\u7684\uff0c\u4e14\u76ee\u524d\u5b58\u5728\u3002\n\n\u6700\u540e\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u5927\u5bb6\u76f4\u63a5\u89c1\u4ee3\u7801\u5566\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 501000\n#define INF 2047483647\nusing namespace std;\nint sum=0,R=0;\nint son[MAXN][2],num[MAXN],size[MAXN],tree[MAXN],rd[MAXN],n,m;\nint MIN_SORT_GAP=INF,MIN_GAP=INF;\nvoid up(int now){\n     size[now]=size[son[now][0]]+size[son[now][1]]+num[now];\n}\nvoid rotate(int &now,int d){\n     int to=son[now][!d];\n     son[now][!d]=son[to][d];\n     son[to][d]=now;\n     up(now);\n     up(to);\n     now=to;\n}\nvoid change(int &now,int x){\n     if (!now){now=++sum;size[now]=num[now]=1;tree[now]=x;rd[now]=rand();return;}\n     else if(tree[now]==x){num[now]++;size[now]++;return;}; \n     int tmp=(x>tree[now]);\n     change(son[now][tmp],x);\n     if (rd[now]>rd[son[now][tmp]])rotate(now,!tmp);\n     up(now);\n}\nint pre(int now,int x){\n    if(!now)return -INF;\n    if (tree[now]>x)return pre(son[now][0],x);\n    else if (tree[now]==x)return tree[now];\n    else return max(tree[now],pre(son[now][1],x));\n}\nint suc(int now,int x){\n    if(!now)return INF;\n    if (tree[now]<x)return suc(son[now][1],x);\n    else if (tree[now]==x)return tree[now];\n    else return min(tree[now],suc(son[now][0],x));\n}\nint end[500010],sta[500010];\nint main(){\n\t//freopen(\"test1.out\",\"w\",stdout);\n    cin>>n>>m;\n    memset(son,0,sizeof(son));\n    change(R,INF);\n    change(R,-INF);\n    priority_queue<int>q1,q2;\n    while(!q1.empty())q1.pop();\n    while(!q2.empty())q2.pop();\n    for(int i=1;i<=n;i++){\n            scanf(\"%d\",&sta[i]);\n            end[i]=sta[i];\n            MIN_SORT_GAP=min(MIN_SORT_GAP,abs(sta[i]-pre(R,sta[i])));\n            MIN_SORT_GAP=min(MIN_SORT_GAP,abs(suc(R,sta[i])-sta[i]));\n            change(R,sta[i]);\n            if (i!=1)q1.push(-abs(sta[i]-sta[i-1]));\n    }\n    MIN_GAP=-q1.top();\n    for(int i=1;i<=m;i++){\n            string s;\n            int a,b;\n            cin>>s;\n            if (s==\"MIN_GAP\") {\n\t\t\t\tcout<<MIN_GAP<<endl;\n\t\t\t\tcontinue;\n\t\t\t}\n            if (s==\"MIN_SORT_GAP\"){\n\t\t\t\tcout<<MIN_SORT_GAP<<endl;\n\t\t\t\tcontinue;\n\t\t\t}\n            \n            scanf(\"%d%d\",&a,&b);\n            if (a!=n){\n\t\t\t\tq1.push(-abs(b-sta[a+1]));\n            \tq2.push(-abs(end[a]-sta[a+1]));\n\t\t\t}\n            q1.push(-abs(b-end[a]));\n            end[a]=b;\n            while(q1.top()==q2.top()){q1.pop();q2.pop();};\n            MIN_GAP=-q1.top();\n            \n            if (MIN_SORT_GAP==0)continue;\n            MIN_SORT_GAP=min(MIN_SORT_GAP,abs(b-pre(R,b)));\n            MIN_SORT_GAP=min(MIN_SORT_GAP,abs(suc(R,b)-b));\n            change(R,b);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1555251253,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "## \u5f31\u667a\u9519\u8bef\u8c03\u4e863h,\u6211\u83dc\u6b7b\u4e86 /kk\n\n\u7531\u4e8e\u8fd9\u662f\u9053\u5e73\u8861\u6811\u7ec3\u4e60\u9898,\u6240\u4ee5\u6211\u5c31\u4e0d\u7528stl\u4e86 ~~(\u5176\u5b9e\u6211\u4e5f\u4e0d\u4f1a)~~\n\n\u9996\u5148\u770b\u5230\u9898,\u9898\u610f\u5927\u81f4\u4e3a,\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217,\u652f\u6301:**\u63d2\u5165,\u67e5\u8be2\u76f8\u90bb\u5143\u7d20\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5c0f\u503c,\u67e5\u8be2\u6240\u6709\u5143\u7d20\u5dee\u7684\u6700\u5c0f\u503c**\n\n\u56e0\u4e3a\u6211\u6ca1\u4ec0\u4e48\u8111\u5b50,\u4e5f\u60f3\u4e0d\u5230\u4ec0\u4e48\u5176\u4ed6\u7684,\u5c31\u53ea\u80fd\u60f3\u5230,\u7528\u4e00\u9897\u5e73\u8861\u6811\u7ef4\u62a4\u76f8\u90bb\u5143\u7d20\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5c0f\u503c,\u7528\u53e6\u4e00\u9897\u5e73\u8861\u6811\u7ef4\u62a4\u6240\u6709\u5143\u7d20\u5dee\u7684\u6700\u5c0f\u503c.\n\n\u9996\u5148\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a,\u663e\u7136\u662f\u6bd4\u8f83\u597d\u5904\u7406\u7684,\u53ea\u8981\u5728\u6bcf\u6b21\u63d2\u5165\u65f6\u6c42\u4e0b\u524d\u9a71\u540e\u7ee7,\u7136\u540e\u6c42\u5dee,\u6700\u540e\u5bf9ans\u53d6min\u5373\u53ef\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a,\u4e5f\u4e0d\u662f\u5f88\u9ebb\u70e6,\u6211\u4eec\u5199\u4e2a\u5e26\u5220\u9664\u7684\u5e73\u8861\u6811\u5c31\u53ef\u4ee5\u4e86,\u6bcf\u6b21\u63d2\u5165\u65f6,\u5c06**\u88ab\u65ad\u6389\u7684\u90a3\u4e2a\u5dee\u503c**\u5220\u6389(\u4e5f\u5c31\u662f\u5220\u6389**abs(a[x+1]-a[to[x]]**),\u518d\u63d2\u5165**\u524d\u9762\u548c\u540e\u9762\u4e0e\u81ea\u5df1\u7684\u5dee\u503c(abs(a[to[x]]-y\u4e0eabs(a[x+1]-y))** \n\n\n\u56e0\u4e3a\u662f\u63d2\u5728x+1\u524d\u9762,\u6240\u4ee5\u4e0d\u662f\u8ddfx\u53d6\u5dee\u800c\u662f\u8ddfx+1\u53d6\u5dee\n\n\u601d\u8def\u4e0d\u96be,\u5c31\u662f\u5b9e\u73b0\u8d77\u6765\u6709\u70b9\u9ebb\u70e6,\u5177\u4f53\u53ef\u4ee5\u770b\u6ce8\u91ca.\n\n\u53e6\u5916\u8fd9\u4efd\u4ee3\u7801\u8dd1\u6700\u540e\u4e00\u4e2a\u70b9\u7528\u4e862.1s,~~\u5e38\u6570\u597d\u5927,\u5e0c\u671b\u80fd\u88ab\u53c9\u6389~~,\u5982\u679c\u6211\u7684splay\u6709\u4ec0\u4e48\u80fd\u8ba9\u5e38\u6570\u53d8\u5c0f\u7684\u5730\u65b9,\u8bf7\u79c1\u4fe1\u6211,thks.\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1304005;\nint tot[2],ans=1e9,rt[2],n,m,a[N],cnt;\nint num[N][2],son[N][2][2],sz[N][2],rec[N][2],fa[N][2],to[N];\n//a\u662f\u7f16\u53f7\u503c,to\u662f\u4e0a\u4e00\u6b21\u64cd\u4f5c\u7f16\u53f7,\u5176\u4ed6\u662f\u5e73\u8861\u6811\u5e38\u7528\u6570\u7ec4,\u5c31\u4e0d\u8bf4\u4e86\n//ty\u4e3a0\u4ee3\u8868\u6240\u6709\u5143\u7d20\u5dee,1\u5219\u4ee3\u8868\u76f8\u90bb\u7684\u5143\u7d20\u5dee\nvoid clear(int x,int ty){//\u6e05\u7a7a\n    num[x][ty]=rec[x][ty]=fa[x][ty]=sz[x][ty]=son[x][1][ty]=son[x][0][ty]=0;\n}\nint get(int x,int ty){//\u83b7\u53d6\u81ea\u5df1\u5728\u54ea\u91cc\n    return son[fa[x][ty]][1][ty]==x;\n}\nvoid update(int x,int ty){//\u66f4\u65b0\n    if(x) sz[x][ty]=rec[x][ty]+sz[son[x][0][ty]][ty]+sz[son[x][1][ty]][ty];\n}\nvoid connect(int x,int y,int z,int ty){//\u94fe\u63a5\n    if(x) fa[x][ty]=y; if(y) son[y][z][ty]=x;\n}\nvoid rotate(int x,int ty){//\u4e0a\u65cb\n    int f=fa[x][ty],gf=fa[f][ty],fs=get(x,ty),gs=get(f,ty);\n    connect(son[x][fs^1][ty],f,fs,ty);\n    connect(f,x,fs^1,ty);connect(x,gf,gs,ty);\n    update(f,ty);update(x,ty);\n}\nvoid splay(int x,int ty){//splay\u64cd\u4f5c\n    for(int f;f=fa[x][ty];rotate(x,ty))\n        if(fa[f][ty]) rotate(get(x,ty)==get(f,ty)?f:x,ty);     \n    rt[ty]=x;\n}\n//\u524d\u9762\u5168\u662fsplay\u90e8\u5206\n\nint find(int x,int ty,int op){\n//\u8fd9\u91cc,\u6211\u5077\u61d2\u5c06\u6c42\u524d\u9a71\u540e\u7ee7\u548c\u6c42\u6700\u5de6\u8fb9\u7684\u513f\u5b50\u5199\u5728\u4e86\u4e00\u8d77,\u5efa\u8bae\u5206\u5f00\u5199,\u6211\u5c31\u51fa\u9505\u4e86,\u8fd8\u8c03\u4e863h /kk\n    int now=son[rt[ty]][x^1][ty];\n    while(son[now][x^op][ty]) now=son[now][x^op][ty];//op\u4e3a1\u4ee3\u8868\u6c42\u6700\u5de6\u8fb9\u7684\u513f\u5b50\n    if(op&&!now) return rt[ty]; \n    return now;\n}\nvoid check(int x,int ty){\n    if(!ty&&ans){//\u66f4\u65b0\u6240\u6709\u5143\u7d20\u5dee\u503c\u6700\u5c0f\u503c\n        int pr=find(1,0,0),nt=find(0,0,0);\n        ans=min(abs(x-num[pr][0]),min(abs(num[nt][0]-x),ans));\n    }   \n}\nvoid insert(int x,int ty){//\u63d2\u5165\u64cd\u4f5c\n    if(!rt[ty]){\n        num[++tot[ty]][ty]=x;\n        sz[tot[ty]][ty]=rec[tot[ty]][ty]=1;\n        rt[ty]=tot[ty];return;\n    }\n    int now=rt[ty],f=0;\n    while(1){\n        if(num[now][ty]==x){\n            sz[now][ty]++;rec[now][ty]++;\n            update(f,ty);splay(now,ty);\n            if(!ty)ans=0;//\u5982\u679c\u6709\u76f8\u540c\u7684\u503cans\u76f4\u63a5\u53d80\n            return;\n        }\n        f=now; now=son[f][x>num[f][ty]][ty];\n        if(!now){\n            num[++tot[ty]][ty]=x;\n            sz[tot[ty]][ty]=rec[tot[ty]][ty]=1;\n            son[f][x>num[f][ty]][ty]=tot[ty];\n            fa[tot[ty]][ty]=f;update(f,ty);\n            splay(tot[ty],ty);check(x,ty);//\u66f4\u65b0ans\n            return ;\n        }\n    }\n}\nvoid findd(int x){//\u67e5\u8be2\u5f53\u524dx\u7684\u4f4d\u7f6e\u5e76\u65cb\u5230\u6839\n    int now=rt[1];\n    while(num[now][1]!=x&&now) {\n        now=num[now][1]>x?son[now][0][1]:son[now][1][1];\n    }\n    if(!now) exit(0);\n    splay(now,1);\n}\nvoid del(int x){//\u5220\u9664\u64cd\u4f5c\u770b\u4e2a\u4eba\u5199\u6cd5,\u57fa\u672c\u4e0a\u90fd\u4e0d\u592a\u4e00\u6837\n    findd(x);\n    int now=rt[1];\n    if(rec[now][1]>1){//\u5982\u679c\u8fd8\u6709\u4e0d\u6b62\u4e00\u4e2a\u5c31\u76f4\u63a5\u51cf\n        rec[now][1]-=1;sz[now][1]-=1;\n        return;\n    }\n    if(!son[now][1][1]&&!son[now][0][1]){//\u5982\u679c\u90fd\u5220\u5149\u4e86\u5c31rt\u7f6e0\n        clear(now,1);rt[1]=0;return;\n    }\n    if(!son[now][0][1]){//\u6ca1\u6709\u5de6\u513f\u5b50\u5c31\u5c06\u53f3\u513f\u5b50\u63d0\u5230\u6839\n        fa[rt[1]=son[now][1][1]][1]=0;\n        clear(now,1);return;\n    }\n    if(!son[now][1][1]){//\u548c\u4e0a\u9762\u76f8\u540c\n        fa[rt[1]=son[now][0][1]][1]=0;\n        clear(now,1);return;\n    }\n//\u5982\u679c\u4e24\u4e2a\u513f\u5b50\u90fd\u6709,\u5c31\u5c06\u524d\u9a71\u63d0\u5230\u6839,\u518d\u628a\u53f3\u513f\u5b50\u8fde\u5230\u524d\u9a71\u7136\u540e\u76f4\u63a5\u5220\u6389\u81ea\u5df1\n    int nxt=find(1,1,0);rt[1]=nxt;splay(nxt,1);\n    connect(son[now][1][1],nxt,1,1); clear(now,1);  \n}\nvoid ins(int x,int y){//\u5220\u6389\u88ab\u6321\u4f4f\u7684\u52a0\u5165\u65b0\u7684\u4e24\u4e2a\u5dee\u503c\n    if(ans)insert(y,0);\n    int now=abs(a[x+1]-a[to[x]]);\n    if(x!=n)del(now);\n    now=abs(a[to[x]]-y);insert(now,1);\n    if(x!=n)now= abs(a[x+1]-y),insert(now,1);\n    //\u6ce8\u610f\u5f53x=n\u65f6,\u4e0d\u4f1a\u5220\u9664,\u4e5f\u53ea\u4f1a\u52a0\u4e00\u4e2a\u5dee\u503c\n    to[x]=++cnt,a[cnt]=y;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    insert(-1e9,0);insert(1e9,0);//\u52a0\u4e0a+-inf\u9632\u6b62\u524d\u9a71\u540e\u9a71\u51fa\u9505\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&a[i]);\n        if(i!=1) insert(abs(a[i]-a[i-1]),1);\n        if(ans)insert(a[i],0);to[i]=i;\n    }char c[20];cnt=n;\n    for(int i=1,x,y;i<=m;i++){\n        scanf(\"%s\",c);\n        if(c[4]=='G') printf(\"%d\\n\",num[find(1,1,1)][1]);\n        if(c[4]=='S') printf(\"%d\\n\",ans);\n        if(c[4]=='R'){\n            scanf(\"%d%d\",&x,&y);\n            ins(x,y);\n        }\n    }\n}\n```\n\n~~\u4ee3\u7801\u5927\u6982\u7b97\u5e73\u8861\u6811\u91cc\u6bd4\u8f83\u77ed\u7684\u4e86~~",
        "postTime": 1589513347,
        "uid": 53852,
        "name": "\u5f26\u5dfb\u3053\u3053\u308d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cdlazy\u5806+set\u7684\u5199\u6cd5  \n\u901f\u5ea6\u4e0d\u7b97\u5feb(\u6700\u5927\u70b91700ms)\u56e0\u4e3a\u5806\u4e5f\u7528\u7684STL, \u4f46\u4ee3\u7801\u4e0d\u52302KB.\n## \u56e0\u4e3a\u6ca1\u6709\u6a21\u677f\u6240\u4ee5\u5728\u8fd9\u91cc\u8bb2\u8bb2lazy\u5806\u662f\u4ec0\u4e48\n**lazy\u5806**\u662f\u4e00\u79cd\u652f\u6301\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u67e5\u8be2\u5e76\u5f39\u51fa\u6700\u503c\uff0c\u5220\u9664\u4e00\u4e2a\u6570\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u5229\u7528\u4e24\u4e2a\u5806\u6765\u5b9e\u73b0\u3002\u8bb0\u8fd9\u4e24\u4e2a\u5806\u5206\u522b\u4e3a$a$, $b$, \u5728\u63d2\u5165\u65f6\u5411$a$\u4e2dpush\uff0c\u5220\u9664\u6539\u4e3a\u5411$b$\u4e2dpush\u3002\u7b49\u5230\u67e5\u8be2\u6700\u503c\u65f6\uff0c\u82e5\u53d1\u73b0$a$\u7684\u6700\u503c\u4e0e$b$\u7684\u6700\u503c\u76f8\u7b49\uff0c\u8bf4\u660e$a$\u4e2d\u7684\u8fd9\u4e2a\u503c\u662f**\u88ab\u5220\u9664\u8fc7\u5374\u6ca1\u6709pop\u6389\u7684\uff08lazy\u601d\u60f3\u6240\u5728!\uff09**\uff0c\u4ece\u800c\u6267\u884c$a.pop(), b.pop()$\u5373\u53ef\uff0c\u5426\u5219\u8fd9\u4e2a\u6700\u503c\u5e76\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u8fd4\u56de\u5373\u53ef\u3002\n#### \u67e5\u8be2min\u7684\u793a\u4f8b\n![](https://cdn.luogu.com.cn/upload/pic/59972.png)\n#### \u7528\u9014\nmultiset\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u4f46\u5e38\u6570\u5927\u4e8elazy\u5806\uff08\u5c31\u50cf\u660e\u660e\u6709set\u4e3a\u4ec0\u4e48\u8981\u7528\u5806\u4e00\u6837)\u3002\n## Min Gap\u7684\u7ef4\u62a4\n\u5efa\u4e00\u4e2alazy\u5806\u7ef4\u62a4\u76f8\u90bb\u4e24\u6570gap\u7684\u96c6\u5408\uff0c\u4e00\u5f00\u59cb\u5c06\u76f8\u90bb\u4e24\u6570\u5dee\u7684\u7edd\u5bf9\u503c\u63d2\u5165\u3002  \n\u8bb0\u539f\u6570\u5217\u7b2ci\u4e2a\u6570\u53ca\u5728\u6b64\u6570\u540e\u63d2\u5165\u7684\u6570\u5171\u6709$n_i$\u4e2a\uff0c\u4f9d\u6b21\u4e3a$a_{i,1},a_{i,2},\\cdots,a_{i,n_i}$\u3002\u6267\u884c$insert(i,k)$\u65f6\uff0c\u6570\u5217\u7531$\\cdots a_{i,n_i},a_{i + 1,1}\\cdots $\u53d8\u4e3a$\\cdots a_{i,n_i},k,a_{i + 1,1}\\cdots $\uff0c\u6240\u4ee5\u5220\u9664$|a_{i,n_i} - a_{i + 1,1}|$\uff0c\u63d2\u5165$|a_{i,n_i} - k|$\u548c$|k - a_{i + 1,1}|$\u5373\u53ef\u3002\uff08\u5728$i=n$\u65f6\uff0c$|a_{i,n_i} - a_{i + 1,1}|$\u548c$|k - a_{i + 1,1}|$\u4e24\u9879\u4e0d\u9700\u8981\u63d2\u5165/\u5220\u9664\uff09\n## Min Sort Gap\u7684\u7ef4\u62a4\n\u6ce8\u610f\u5230\u8fd9\u4e2a\u503c\u5355\u8c03\u4e0d\u589e\uff0c\u6240\u4ee5\u7528set\u7ef4\u62a4\u8fd9\u4e9b\u6570\uff0c\u6bcf\u6b21\u65b0\u63d2\u5165\u4e00\u4e2a\u6570$x$\u65f6\uff0c\u627e\u5230$y$ = set\u4e2d\u5c0f\u4e8ex\u7684\u6700\u5927\u7684\u6570(lower bound - 1), $z$ = set\u4e2d\u5927\u4e8e\u7b49\u4e8e$x$\u7684\u6700\u5c0f\u7684\u6570(lower bound)\uff0c\u7528$x - y$, $z - x$\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u6709\u4e2atrick\uff0c\u5728\u521d\u59cb\u5316\u65f6\u5411set\u91cc\u63d2\u5165-inf\uff0cinf\u4e24\u6570\uff0c\u8fd9\u6837\u627ey,z\u65f6\u5c31\u4e0d\u4f1a\u8d8a\u754c\u4e86\u3002  \n## Code\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <utility>\n#include <cassert>\n#include <set>\n#define maxn 500005\nusing namespace std;\ntypedef long long ll;\nconst int inf = 0x3f3f3f3f;\ninline int getint(){\n  char c; int res = 0, sig = 1;\n  for(c = getchar();c < '0' || c > '9';c = getchar()) if(c == '-') sig = -1;\n  for(;c >= '0' && c <= '9';c = getchar()) res = res * 10 + (c - '0');\n  return res * sig;\n}\nint n,m;\nint fir[maxn],ed[maxn];\nstruct Heap{\n  priority_queue <int,vector <int>,greater<int> > que,lazy;\n  void push(int x){\n    que.push(x);\n  }\n  int top(){\n    while(que.top() == lazy.top()) que.pop(), lazy.pop();\n    return que.top();\n  }\n  void erase(int x){\n    lazy.push(x);\n  }\n}hp;\nset <int> st;\ntypedef set <int> :: iterator Ite;\nchar fl[15];\nint sortgap = inf;\nint main(){\n  n = getint(), m = getint();\n  st.insert(-inf);\n  st.insert(inf);\n  for(int i = 1;i <= n;i++){\n    fir[i] = ed[i] = getint();\n    if(i > 1) hp.push(abs(fir[i] - fir[i - 1]));\n    Ite it = st.lower_bound(fir[i]);\n    sortgap = min(sortgap,*it - fir[i]);\n    sortgap = min(sortgap,fir[i] - *(--it));\n    st.insert(fir[i]);\n  }\n  while(m--){\n    scanf(\"%s\",fl);\n    if(fl[0] == 'I'){\n      int pos = getint(), val = getint();\n      if(pos < n) hp.erase(abs(fir[pos + 1] - ed[pos]));\n      hp.push(abs(val - ed[pos]));\n      if(pos < n) hp.push(abs(val - fir[pos + 1]));\n      Ite it = st.lower_bound(val);\n      sortgap = min(sortgap,*it - val);\n      sortgap = min(sortgap,val - *(--it));\n      st.insert(val);\n      ed[pos] = val;\n    }else if(fl[4] == 'G'){\n      printf(\"%d\\n\",hp.top());\n    }else if(fl[4] == 'S'){\n      printf(\"%d\\n\",sortgap);\n    }\n  }\n  return 0;\n}\n```\n",
        "postTime": 1559394413,
        "uid": 53793,
        "name": "caeious",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "~~\u8212\u8001\u5e08\u8bf4\u8fd9\u9898\u4e8b\u5927\u6c34\u9898\u7136\u800c\u6211\u5bf9\u62cd\u7ed9\u4ed6\u62cd\u51fa\u6765\u4e00\u5806\u9519~~\n\n\u64cd\u4f5c\u4e00\u5728\u67d0\u4e2a\u4f4d\u7f6e\u540e\u9762\u63d2\u5165.\u62ff\u4e2a\u94fe\u8868\u7ef4\u62a4\u5c31\u597d\u4e86.\n\n\u64cd\u4f5c\u4e8c\u9700\u8981\u652f\u6301\u67e5\u8be2\u6700\u5c0f\u7684\u76f8\u90bb\u4f4d\u7f6e\u5dee\uff0c\u90a3\u4e48\u62ff\u5806\u7ef4\u62a4\uff0c\u63d2\u5165\u7684\u65f6\u5019\u5220\u6389\u539f\u6765\u7684\u518d\u52a0\u4e0a\u65b0\u7684.\n\n\u5173\u4e8e\u5220\u9664\uff0c\u6211\u770b\u6709\u5f88\u591a\u4eba\u662f\u5f00\u4e86\u4e24\u4e2a\u5806\u6765\u8fdb\u884c\u5220\u9664\u7684.\u7136\u800c\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u624b\u5199\u8fd9\u4e00\u64cd\u4f5c.\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u5728\u5806\u4e2d\u7684\u7f16\u53f7\u5c31\u597d\u4e86.\u89c1\u4ee3\u7801.\n\n\u64cd\u4f5c\u4e09\u62ff\u5e73\u8861\u6811\u7ef4\u62a4\u4e00\u4e2a\u524d\u9a71\u540e\u7ee7\u5c31\u597d\u4e86.\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#define inf 1000000007\nusing namespace std;\nconst int N=2e6;\nstruct Node{int ch[2],w,rnd,cnt;}a[N];\nstruct Q{int id,w;bool operator <(const Q &a)const{return w<a.w;}};\nint n,m,w[N],lst[N],fst[N],node_cnt,root;\nchar st[100];\nint abs1(int x){return x>0?x:-x;}\nvoid rotate(int &u,int f)\n{\n\tint v=a[u].ch[f^1];\n\ta[u].ch[f^1]=a[v].ch[f],a[v].ch[f]=u;\n\tu=v;\n}\nvoid ins(int &root,int w)//Treap\n{\n\tif(!root)\n\t{\n\t\troot=++node_cnt;Node *z=a+root;\n\t\tz->w=w,z->rnd=rand()<<15|rand();\n\t\tz->ch[0]=z->ch[1]=0;z->cnt=1;return;\n\t}\n\tif(w==a[root].w){return;}\n\tint d=w>a[root].w;\n\tins(a[root].ch[d],w);\n\tif(a[a[root].ch[d]].rnd<a[root].rnd)rotate(root,d^1);\n}\nint prep(int w)\n{\n\tint o=root,lst=-inf;\n\twhile(o)\n\t{\n\t\tif(w>=a[o].w)lst=a[o].w,o=a[o].ch[1];\n\t\telse o=a[o].ch[0];\n\t}\n\treturn lst;\n}\nint succ(int w)\n{\n\tint o=root,lst=inf;\n\twhile(o)\n\t{\n\t\tif(w<=a[o].w)lst=a[o].w,o=a[o].ch[0];\n\t\telse o=a[o].ch[1];\n\t}\n\treturn lst;\n}\nstruct Heap\n{\n\tint id[N],size;\n\tQ a[N];\n\tvoid push(Q x)\n\t{\n\t\ta[++size]=x;int o;\n\t\tfor(o=size;o>1;o>>=1)\n\t\t\tif(a[o]<a[o>>1])id[a[o>>1].id]=o,swap(a[o],a[o>>1]);\n\t\t\telse{id[x.id]=o;return;}//\u5220\u9664\u5c31\u4f53\u73b0\u5728id\u8fd9\u4e2a\u6570\u7ec4\u4e0a.\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u5806\u4e2d\u7f16\u53f7\n\t\tif(o==1)id[x.id]=1;\n\t}\n\tvoid pop(int pos)//\u53ea\u8981\u627e\u5230\u5806\u4e2d\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u5220\u9664\u4efb\u610f\u8282\u70b9\u5566\n\t{\n\t\tpos=id[pos];a[pos]=a[size--];\n\t\tfor(int o=pos,son;(o<<1|1)<=size;o=son)\n\t\t{\n\t\t\tson=(o<<1|1)>size||a[o<<1]<a[o<<1|1]?(o<<1):(o<<1|1);\n\t\t\tif(a[son]<a[o])id[a[son].id]=o,swap(a[o],a[son]);\n\t\t\telse{id[a[o].id]=o;return;}\n\t\t}\n\t}\n\tQ top(){return a[1];}\n}q;\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);int ans2=inf;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",w+i);\n\t\tif(i!=1){q.push((Q){i,abs1(w[i]-w[i-1])});ans2=min(ans2,min(w[i]-prep(w[i]),succ(w[i])-w[i]));}\n\t\tins(root,w[i]);lst[i]=i-1;\n\t}\n\tlst[n+1]=n;\n\tfor(int i=2;i<=m+1;i++)\n\t{\n\t\tscanf(\"%s\",st+1);\n\t\tif(st[1]=='I')\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d%d\",&x,w+i+n);if(x!=n)q.pop(x+1);\n\t\t\tlst[i+n]=lst[x+1],lst[x+1]=i+n;\n\t\t\tif(x!=n)q.push((Q){x+1,abs1(w[x+1]-w[i+n])});\n\t\t\tq.push((Q){i+n,abs1(w[i+n]-w[lst[i+n]])});\n\t\t\tans2=min(ans2,min(w[i+n]-prep(w[i+n]),succ(w[i+n])-w[i+n]));ins(root,w[i+n]);//\u524d\u9a71\u540e\u7ee7\u5404\u62ff\u51fa\u6765\u6bd4\u4e00\u4e0b.\n\t\t}\n\t\telse\n\t\t\tif(st[5]=='G')\n\t\t\t{\n\t\t\t\tQ t=q.top();printf(\"%d\\n\",t.w);\n\t\t\t}\n\t\t\telse printf(\"%d\\n\",ans2);\n\t}\n}\n```",
        "postTime": 1556066522,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u7528\u4e862\u68f5\u5e73\u8861\u6811\u505a\u7684\u3002\n### INSERT\u64cd\u4f5c\n\u628a\u63d2\u5165\u7684\u6570\u52a0\u5230\u94fe\u8868\u91cc\u9762\uff0c\u7528\u6570\u7ec4\u6a21\u62df\u94fe\u8868\uff0c\u5728\u52a0\u8fdb\u53bb\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0MIN_GAP\u7684\u503c\u3002MIN_GAP\u7684\u503c\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u3002\n\u5148\u5220\u9664\u63d2\u5165\u4f4d\u7f6e\u4e24\u8fb9\u7684\u6570\uff0c\u518d\u5728\u5e73\u8861\u6811\u4e2d\u63d2\u5165\u65b0\u52a0\u7684\u6570\u4e0e\u5de6\u53f3\u4e24\u8fb9\u6570\u7684\u5dee\u3002\n```cpp\nstruct Link{//\u6570\u7ec4\u6a21\u62df\u94fe\u8868\n\tint head[N]  , nxt[N] , tot , val[N];\n\tvoid init (){//\u9884\u5904\u7406\n\t\ttot = n;\n\t\tmemset(head , 0 , sizeof(head));\n\t\tfor(register int i = 1 ; i <= n ; i ++) {\n\t\t\thead[i] = i; val[i] = a[i];\n\t\t\tif(i > 1) T4.insert(abs(a[i] - a[i - 1]));\n\t\t} \n\t}\n\tinline void insert(int x , int y) { \n\t\tint pre = val[head[x]];\n\t\tnxt[++tot] = head[x];\n\t\tval[tot] = y;\n\t\thead[x] = tot;\n\t\tif(x != n) T4.Remove(abs(pre - val[x + 1]));\n\t\tT4.insert(abs(pre - y));\n\t\tif(x != n) T4.insert(abs(y - val[x + 1]));\n\t}\n} lk;\n```\n\n### MIN_GAP\u64cd\u4f5c\n\u5982\u4f55\u4fee\u6539\u4e0a\u6587\u5df2\u7ecf\u63d0\u5230\uff0c\u7b54\u6848\u5c31\u662f\u8fd9\u68f5\u5e73\u8861\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u3002\n\u5e73\u8861\u6811\u6211\u7528fhq_treap\u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u65b9\u4fbf\u5199\u3002\n```cpp\nstruct fhq_treap2 {\n\tint ch[N][2] , size[N] , val[N] , key[N] , tot , root;\n\tinline void pushup(int rt) {size[rt] = size[ch[rt][0]] + size[ch[rt][1]] + 1;}\n\tint New(int x) {//\u4e00\u4e9bfhq_treap\u7684\u57fa\u672c\u64cd\u4f5c\n\t    val[++tot] = x; size[tot] = 1;\n\t    key[tot] = rand();\n\t    ch[tot][0] = ch[tot][1] = 0;\n\t    return tot;\n\t}\n\tinline void split(int rt , int x , int &a , int &b) {\n\t    if(!rt) {a = b = 0;return;}\n\t    if(val[rt] <= x) a = rt , split(ch[rt][1] , x , ch[rt][1] , b);\n\t    else b = rt , split(ch[rt][0] , x , a , ch[rt][0]);\n\t    pushup(rt);\n\t}\n\tinline int merge(int a , int b) {\n\t    if(!a || !b) return a + b;\n\t    if(key[a] < key[b]) {\n\t        ch[a][1] = merge(ch[a][1] , b); \n\t        pushup(a); return a;\n\t    } else {\n\t        ch[b][0] = merge(a , ch[b][0]);\n\t        pushup(b); return b;\n\t    }\n\t}\n\tinline int Min() {//\u53d6\u6700\u5c0f\u503c\n\t\tint rt = root;\n\t\twhile(ch[rt][0]) rt = ch[rt][0];\n\t\treturn val[rt];\n\t}\t\n\tinline void insert(int v) {\n\t\tint x = 0 , y = 0;\n\t\tsplit(root , v , x , y);\n\t\troot = merge(merge(x , New(v)) , y);\n\t}\t\n\tinline void Remove(int v) {\n\t    int x = 0 , y = 0 , z = 0;\n\t    split(root , v , x , z);\n\t    split(x , v - 1 , x , y);\n\t    y = merge(ch[y][0] , ch[y][1]);\n\t    root = merge(merge(x , y) , z);\n\t}\n}T4;\n\n```\n### MIN_SORT_GAP\u64cd\u4f5c\n\u518d\u7528\u4e00\u68f5\u5e73\u8861\u6811\u7ef4\u62a4\uff0c\u6309\u6743\u503c\u6392\u5e8f\u3002\n\npre \u662f\u63d2\u5165\u7684\u6570\u7684\u524d\u9a71\n\nnxt \u662f\u63d2\u5165\u7684\u6570\u7684\u540e\u7ee7\n\nval \u662f\u63d2\u5165\u7684\u6570\n\n\u6bcf\u6b21\u63d2\u5165\u65f6\u5728\u539f\u6765\u7684\u7b54\u6848\uff0cval-pre , nxt - val\u4e2d\u53d6\u6700\u5c0f\u503c\u5373\u53ef\n```cpp\nstruct fhq_treap {\n\tint ch[N][2] , size[N] , val[N] , key[N] , tot , root , msgap;\n\tinline void pushup(int rt) {size[rt] = size[ch[rt][0]] + size[ch[rt][1]] + 1;}\n\tinline int New(int x) {\n\t    val[++tot] = x; size[tot] = 1;\n\t    key[tot] = rand();\n\t    ch[tot][0] = ch[tot][1] = 0;\n\t    return tot;\n\t}\n\tinline void split(int rt , int x , int &a , int &b) {\n\t    if(!rt) {a = b = 0;return;}\n\t    if(val[rt] <= x) a = rt , split(ch[rt][1] , x , ch[rt][1] , b);\n\t    else b = rt , split(ch[rt][0] , x , a , ch[rt][0]);\n\t    pushup(rt);\n\t}\n\tinline int merge(int a , int b) {\n\t    if(!a || !b) return a + b;\n\t    if(key[a] < key[b]) {\n\t        ch[a][1] = merge(ch[a][1] , b); \n\t        pushup(a); return a;\n\t    } else {\n\t        ch[b][0] = merge(a , ch[b][0]);\n\t        pushup(b); return b;\n\t    }\n\t}\n\tinline int kth(int rt , int x) {\n\t    while(1) {\n\t        if(x <= size[ch[rt][0]]) rt = ch[rt][0];\n\t        else if(x > size[ch[rt][0]] + 1) {\n\t            x = x - size[ch[rt][0]] - 1;\n\t            rt = ch[rt][1];\n\t        } else return rt;\n\t    } \n\t}\n    inline int find(int x) {\n    \tint rt = root;\n    \twhile(val[rt] != x && ch[rt][x > val[rt]]) rt = ch[rt][x > val[rt]];\n    \treturn val[rt];\n\t}\n    inline int prev(int v) {\n\t    int x = 0 , y = 0;\n\t    split(root , v - 1 , x , y);\n\t    int ans = kth(x , size[x]);\n\t    root = merge(x , y);\n\t    return ans;\n\t}\n\tinline int succ(int v) {\n\t    int x = 0 , y = 0;\n\t    split(root , v , x , y);\n\t    int ans = kth(y , 1);\n\t    root = merge(x , y);\n\t    return ans;\n\t}\n\tinline void insert(int v) {\n\t\tif(v != INF && v != -INF && msgap != 0) {//\u526a\u679d\uff0c\u5982\u679c\u5f53\u524d\u7b54\u6848\u5df2\u7ecf\u4e3a0\uff0c\u5c31\u4e0d\u5fc5\u66f4\u65b0\u4e86\u3002\n\t\t\tif(find(v) == v) msgap = 0;\n\t\t\telse {\n\t\t\t\tint pre = val[prev(v)] , nxt = val[succ(v)];\n\t\t\t\tmsgap = min(msgap , min(abs(v - pre) , abs(v - nxt)));\n\t\t\t} \n\t\t}\n\t\tint x = 0 , y = 0;\n\t\tsplit(root , v , x , y);\n\t\troot = merge(merge(x , New(v)) , y);\n\t}\t\n\tvoid init() {\n\t\tmsgap = INF; root = 0;\n\t\tsort(a + 1 , a + n + 1);\n\t\tinsert(INF) , insert(-INF);\n\t\tfor(int i = 1 ; i <= n ; i ++) insert(a[i]);\n\t}\n}T3;\n```\n\u6211\u7684\u4ee3\u7801\u5e38\u6570\u8f83\u5927\uff0c\u8981\u5361\u5e38\u624d\u80fd\u8fc7\u3002\n### code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 1e6 + 9 , INF = 1e9;\n\nint n , m , a[N];\n\nstruct fhq_treap2 {\n\tint ch[N][2] , size[N] , val[N] , key[N] , tot , root;\n\tinline void pushup(int rt) {size[rt] = size[ch[rt][0]] + size[ch[rt][1]] + 1;}\n\tint New(int x) {\n\t    val[++tot] = x; size[tot] = 1;\n\t    key[tot] = rand();\n\t    ch[tot][0] = ch[tot][1] = 0;\n\t    return tot;\n\t}\n\tinline void split(int rt , int x , int &a , int &b) {\n\t    if(!rt) {a = b = 0;return;}\n\t    if(val[rt] <= x) a = rt , split(ch[rt][1] , x , ch[rt][1] , b);\n\t    else b = rt , split(ch[rt][0] , x , a , ch[rt][0]);\n\t    pushup(rt);\n\t}\n\tinline int merge(int a , int b) {\n\t    if(!a || !b) return a + b;\n\t    if(key[a] < key[b]) {\n\t        ch[a][1] = merge(ch[a][1] , b); \n\t        pushup(a); return a;\n\t    } else {\n\t        ch[b][0] = merge(a , ch[b][0]);\n\t        pushup(b); return b;\n\t    }\n\t}\n\tinline int Min() {\n\t\tint rt = root;\n\t\twhile(ch[rt][0]) rt = ch[rt][0];\n\t\treturn val[rt];\n\t}\t\n\tinline void insert(int v) {\n\t\tint x = 0 , y = 0;\n\t\tsplit(root , v , x , y);\n\t\troot = merge(merge(x , New(v)) , y);\n\t}\t\n\tinline void Remove(int v) {\n\t    int x = 0 , y = 0 , z = 0;\n\t    split(root , v , x , z);\n\t    split(x , v - 1 , x , y);\n\t    y = merge(ch[y][0] , ch[y][1]);\n\t    root = merge(merge(x , y) , z);\n\t}\n}T4;\n\nstruct Link{\n\tint head[N]  , nxt[N] , tot , val[N];\n\tvoid init (){\n\t\ttot = n;\n\t\tmemset(head , 0 , sizeof(head));\n\t\tfor(register int i = 1 ; i <= n ; i ++) {\n\t\t\thead[i] = i; val[i] = a[i];\n\t\t\tif(i > 1) T4.insert(abs(a[i] - a[i - 1]));\n\t\t} \n\t}\n\tinline void insert(int x , int y) {\n\t\tint pre = val[head[x]];\n\t\tnxt[++tot] = head[x];\n\t\tval[tot] = y;\n\t\thead[x] = tot;\n\t\tif(x != n) T4.Remove(abs(pre - val[x + 1]));\n\t\tT4.insert(abs(pre - y));\n\t\tif(x != n) T4.insert(abs(y - val[x + 1]));\n\t}\n} lk;\n\nstruct fhq_treap {\n\tint ch[N][2] , size[N] , val[N] , key[N] , tot , root , msgap;\n\tinline void pushup(int rt) {size[rt] = size[ch[rt][0]] + size[ch[rt][1]] + 1;}\n\tinline int New(int x) {\n\t    val[++tot] = x; size[tot] = 1;\n\t    key[tot] = rand();\n\t    ch[tot][0] = ch[tot][1] = 0;\n\t    return tot;\n\t}\n\tinline void split(int rt , int x , int &a , int &b) {\n\t    if(!rt) {a = b = 0;return;}\n\t    if(val[rt] <= x) a = rt , split(ch[rt][1] , x , ch[rt][1] , b);\n\t    else b = rt , split(ch[rt][0] , x , a , ch[rt][0]);\n\t    pushup(rt);\n\t}\n\tinline int merge(int a , int b) {\n\t    if(!a || !b) return a + b;\n\t    if(key[a] < key[b]) {\n\t        ch[a][1] = merge(ch[a][1] , b); \n\t        pushup(a); return a;\n\t    } else {\n\t        ch[b][0] = merge(a , ch[b][0]);\n\t        pushup(b); return b;\n\t    }\n\t}\n\tinline int kth(int rt , int x) {\n\t    while(1) {\n\t        if(x <= size[ch[rt][0]]) rt = ch[rt][0];\n\t        else if(x > size[ch[rt][0]] + 1) {\n\t            x = x - size[ch[rt][0]] - 1;\n\t            rt = ch[rt][1];\n\t        } else return rt;\n\t    } \n\t}\n    inline int find(int x) {\n    \tint rt = root;\n    \twhile(val[rt] != x && ch[rt][x > val[rt]]) rt = ch[rt][x > val[rt]];\n    \treturn val[rt];\n\t}\n    inline int prev(int v) {\n\t    int x = 0 , y = 0;\n\t    split(root , v - 1 , x , y);\n\t    int ans = kth(x , size[x]);\n\t    root = merge(x , y);\n\t    return ans;\n\t}\n\tinline int succ(int v) {\n\t    int x = 0 , y = 0;\n\t    split(root , v , x , y);\n\t    int ans = kth(y , 1);\n\t    root = merge(x , y);\n\t    return ans;\n\t}\n\tinline void insert(int v) {\n\t\tif(v != INF && v != -INF && msgap != 0) {\n\t\t\tif(find(v) == v) msgap = 0;\n\t\t\telse {\n\t\t\t\tint pre = val[prev(v)] , nxt = val[succ(v)];\n\t\t\t\tmsgap = min(msgap , min(abs(v - pre) , abs(v - nxt)));\n\t\t\t} \n\t\t}\n\t\tint x = 0 , y = 0;\n\t\tsplit(root , v , x , y);\n\t\troot = merge(merge(x , New(v)) , y);\n\t}\t\n\tvoid init() {\n\t\tmsgap = INF; root = 0;\n\t\tsort(a + 1 , a + n + 1);\n\t\tinsert(INF) , insert(-INF);\n\t\tfor(int i = 1 ; i <= n ; i ++) insert(a[i]);\n\t}\n}T3;\n\ninline int read() {\n\tint s = 0 , w = 1; char ch = getchar();\n\twhile(ch < 48 || ch > 57) {if(ch == '-') w = -1; ch = getchar();}\n\twhile(ch >= 48 && ch <= 57) s = (s << 1) + (s << 3) + (ch ^ 48) , ch = getchar();\n\treturn s * w; \n}\n\ninline void write(int x) {\n    if(x < 0)putchar('-'), x *= (-1);\n    if(x > 9)write(x / 10);\n    putchar(x % 10 + '0');\n}\n\nint main() {\n\tsrand(time(NULL));\n\tn = read() , m = read();\t\n\tfor(register int i = 1 ; i <= n ; ++ i) a[i] = read();\n\tT4.tot = T4.root = 0;\n\tlk.init(); \n\tT3.init();\n\tfor(register int i = m ; i >= 1 ; -- i){\n\t\tchar s[20];\n\t\tscanf(\"%s\",s);\n\t\tif(s[0] == 'I') {\n\t\t\tint p = read() , x = read();\n\t\t\tlk.insert(p , x); \n\t\t\tT3.insert(x);\n\t\t} else if(s[0] == 'M' && s[4] == 'G') write(T4.Min()) , putchar('\\n');\n\t\telse write(T3.msgap) , putchar('\\n');\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1554896793,
        "uid": 80852,
        "name": "\u7a0b\u5c31\u672a\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "> [\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P1110)  \n> [\u4e2a\u4eba\u535a\u5ba2](http://bubbleioa.top/archives/755)\n\n## \u9898\u89e3\n\u53c8\u662f\u4e00\u9053\u9898\u4e00\u665a\u4e0a\u7cfb\u5217(\u6570\u636e\u7ed3\u6784\u4e00\u751f\u4e4b\u654c)\n\n\u8c03\u4e86\u5f88\u4e45\u7684\u539f\u56e0\u5176\u5b9e\u662f\u5199\u9519\u4e86\u4e00\u4e2a\u53d8\u91cf,\u5176\u5b9e\u8fd8\u662f\u5f88\u7b80\u5355\u7684\n\n\u8fd9\u91cc\u7528\u7684\u5e73\u8861\u6811\u662fTreap\n\n\u4f60\u53ef\u4ee5\u628a\u539f\u59cb\u6570\u5217\u770b\u6210n\u4e2a\u94fe\u8868,\u9996\u5c3e\u76f8\u8fde\u7684\u90a3\u79cd,\u4f46\u662f\u6211\u4eec\u8981\u5206\u6bb5\u5b58  \n\u7528vector\u5c31\u5f88\u8212\u670d\n\n\u7136\u540e\u5bf9\u4e8e\u7b2c\u4e09\u4e2a\u64cd\u4f5c,\u5176\u5b9e\u53ea\u8981\u6bcf\u6b21\u8fdb\u5165\u5e73\u8861\u6811\u7684\u5143\u7d20\u67e5\u627e\u4e0b\u524d\u9a71\u540e\u7ee7\u4e0e\u5b83\u672c\u8eab\u4f5c\u5dee\u53d6\u6700\u5c0f\u503c\u5373\u53ef(\u8fd9\u91cc\u7684\u524d\u9a71\u540e\u7ee7\u662f**\u975e\u4e25\u683c**\u7684)\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u64cd\u4f5c,\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u5143\u7d20,\u603b\u4f1a\u521b\u9020\u4e24\u4e2a\u5dee\u503c\u5173\u7cfb\u5e76\u4e14\u51cf\u53bb\u4e00\u4e2a\u5dee\u503c\u5173\u7cfb  \n\u6211\u4eec\u53ef\u4ee5\u7528\u4e24\u4e2a**\u5c0f\u6839\u5806**\u5206\u522b\u7ef4\u62a4\u4ea7\u751f\u7684\u5dee\u503c\u548c\u5220\u53bb\u7684\u5dee\u503c,\u6bcf\u6b21\u8be2\u95ee\u65f6,\u4e0d\u65ad\u5f39\u51fa\u9876\u7aef\u76f8\u540c\u5143\u7d20\u540e,\u7b2c\u4e00\u4e2a\u5806\u9876\u5c31\u662f\u7b54\u6848\u4e86\n\n\u8fd9\u79cd\u505a\u6cd5\u8fd8\u662f\u6709\u70b9\u6162\u7684(\u6700\u61621500ms,\u5f00\u4e86O2 790ms),\u5982\u679c\u5f53\u5e74\u7701\u9009\u4e0d\u5f00O2\u7684\u8bdd\u6709\u70b9\u60ac\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=600304,INF=0x7fffffff;\nint pos[MAXN];//\u53ef\u4ee5\u4e0d\u7528\nint minn=INF;\nvector<int>b[MAXN];\n\nstruct delhp{\n    priority_queue<int>q1,q2;\n    void insert(int kind,int x){\n        if(kind==1)q1.push(-x);//\u5c0f\u6839\u5806\n        else q2.push(-x);\n    }\n    int top(){\n        while(q1.size()&&q2.size()){\n            if(q1.top()!=q2.top())return -q1.top();\n            q1.pop();q2.pop();\n        }\n    }\n}q;\n\nstruct Treap{\n    int l,r;\n    int val,dat;\n    int cnt,size;\n}a[MAXN];\nint tot,root;\n\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n\nvoid update(int p){\n    a[p].size=a[a[p].l].size+a[a[p].r].size+a[p].cnt;\n}\n\nint New(int x){\n    a[++tot].val=x;\n    a[tot].dat=rand();\n    a[tot].size=a[tot].cnt=1;\n    return tot;\n}\n\nvoid build(){\n    New(-INF);New(INF);\n    a[1].r=2;\n    root=1;\n    update(root);\n}\n\nvoid zig(int &p){\n    int q=a[p].l;\n    a[p].l=a[q].r;a[q].r=p;p=q;\n    update(a[p].r);update(p);\n}\n\nvoid zag(int &p){\n    int q=a[p].r;\n    a[p].r=a[q].l;a[q].l=p;p=q;\n    update(a[p].l);update(p);\n}\n\nvoid insert(int &p,int val){\n    if(p==0){\n        p=New(val);\n        return;\n    }\n    if(val==a[p].val){\n        a[p].cnt++;\n        update(p);\n        return;\n    }\n    if(val<a[p].val){\n        insert(a[p].l,val);\n        if(a[a[p].l].dat>a[p].dat)zig(p);\n    }\n    else {\n        insert(a[p].r,val);\n        if(a[a[p].r].dat>a[p].dat)zag(p);\n    }\n    update(p);\n}\n\nint GetPre(int val){\n    int ans=1;\n    int p=root;\n    while(p){\n        if(val==a[p].val){\n            if(a[p].cnt>1)return a[p].val;\n            else if(a[p].l>0){\n                p=a[p].l;\n                while(a[p].r>0)p=a[p].r;\n                ans=p;\n            }\n            break;\n        }\n        if(a[p].val<val&&a[p].val>a[ans].val)ans=p;\n        p=val<a[p].val?a[p].l:a[p].r;\n    }\n    return a[ans].val;\n}\n\nint GetNext(int val){\n    int ans=2;\n    int p=root;\n    while(p){\n        if(val==a[p].val){\n            if(a[p].cnt>1)return a[p].val;\n            else if(a[p].r>0){\n                p=a[p].r;\n                while(a[p].l>0)p=a[p].l;\n                ans=p;\n            }\n            break;\n        }\n        if(a[p].val>val&&a[p].val<a[ans].val)ans=p;\n        p=val<a[p].val?a[p].l:a[p].r;\n    }\n    return a[ans].val;\n}\n\nint main(){\n    int n=read(),m=read();\n    build();\n    for(int i=1;i<=n;i++){\n        int x=read();\n        pos[i]=x;\n        b[i].push_back(x);\n        if(i!=1)q.insert(1,abs(pos[i]-pos[i-1]));\n        if(minn!=0){//\u7ef4\u62a4\u64cd\u4f5c3\n            insert(root,pos[i]);\n            int xx=GetNext(pos[i]);\n            int yy=GetPre(pos[i]);\n            if(xx!=INF&&xx!=-INF)minn=min(minn,xx-pos[i]);\n            if(yy!=INF&&yy!=-INF)minn=min(minn,pos[i]-yy);\n        }\n    }\n    for(int i=1;i<=m;i++){\n        char s[20];\n        scanf(\"%s\",s);\n        int len=strlen(s);\n        if(len==6){\n            int x=read(),k=read();\n            b[x].push_back(k);\n            if(minn!=0)insert(root,k);\n            q.insert(1,abs(k-*(b[x].end()-2)));//*\u53f7\u4e3a\u89e3\u9664\u5f15\u7528,\u5982\u679c\u4e0d\u52a0\u4e0a\u5219\u8fd4\u56de\u7684\u662f\u8fed\u4ee3\u5668\n            if(b[x+1].size()){//\u9632\u6b62\u8d8a\u754cRE\n                q.insert(1,abs(k-*(b[x+1].begin())));\n                q.insert(2,abs(*(b[x].end()-2)-*(b[x+1].begin())));\n            }\n            if(minn!=0){\n                int xx=GetNext(k);\n                int yy=GetPre(k);\n                if(xx!=INF&&xx!=-INF)minn=min(minn,xx-k);\n                if(yy!=INF&&yy!=-INF)minn=min(minn,k-yy);\n            }\n        }\n        else if(len==7){\n            printf(\"%d\\n\",q.top());\n        }\n        else {\n            printf(\"%d\\n\",minn);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1553610765,
        "uid": 61150,
        "name": "\u5192\u6ce1ioa",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "```cpp\n#include<iostream>\n#include<cstdio>\n#include<set>\n#define LS (X<<1)\n#define RS (X<<1|1)\n#define MID ((L+R)>>1)\n/*\nlp1110 ZJOI2007 \u62a5\u8868\u7edf\u8ba1\n\u4e8b\u5b9e\u4e0a\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u8be2\u95ee\u548c\u7b2c\u4e8c\u7c7b\u8be2\u95ee\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5904\u7406\u3002\n\u7b2c\u4e8c\u7c7b\u8be2\u95ee\u7684\u5904\u7406\u65b9\u6cd5\u662f\u975e\u5e38\u663e\u7136\u7684\u3002\u7531\u4e8e\u53ea\u6709\u63d2\u5165\u800c\u6ca1\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u56e0\u6b64\uff0c\u7b2c\u4e8c\u7c7b\u8be2\u95ee\u7684\u7b54\u6848\u53ea\u4f1a\u7f29\u5c0f\u3001\u4e0d\u4f1a\u589e\u5927\u3002\n\u6545\u800c\uff0c\u6211\u4eec\u5bf9\u6574\u4e2a\u6570\u5217\u7684\u503c\u7ef4\u62a4\u4e00\u4e2aSplay\uff0c\u6bcf\u4e00\u6b21\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u6570\u4ee5\u540e\uff0c\u7528\u5b83\u548c\u5b83\u7684\u524d\u9a71\u4e0e\u5b83\u548c\u5b83\u7684\u540e\u7ee7\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6765\u66f4\u65b0\u7b2c\u4e8c\u7c7b\u7684\u7b54\u6848\u3002\n\u8fd9\u53ef\u4ee5\u7528multiset\u6765\u7b80\u6613\u5730\u5b9e\u73b0\u3002\n\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u8be2\u95ee\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u7ef4\u62a4\u8fd9\u4e2a\u503c\u5176\u5b9e\u5e76\u4e0d\u662f\u96be\u70b9\u2014\u2014\u7528\u7ebf\u6bb5\u6811\u6216\u8005\u5e73\u8861\u6811\u90fd\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u3002\u95ee\u9898\u5728\u4e8e\uff0c\u5982\u4f55\u5728\u63d2\u5165\u65b0\u7684\u6570\u4e4b\u540e\u4fdd\u6301\u8fd9\u4e2a\u503c\u3002\n\u6211\u4eec\u4ed4\u7ec6\u601d\u8003\uff0c\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6bb5\u533a\u95f4\u6765\u8bf4\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u53ea\u6709\u4e09\u4e2a\uff1a\u8fd9\u4e2a\u533a\u95f4\u7684\u7b54\u6848\uff0c\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u8fd9\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u3002\n\u6545\u800c\uff0c\u6211\u4eec\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u6216\u8005\u5e73\u8861\u6811\uff0c\u7ef4\u62a4\u8fd9\u4e09\u4e2a\u4fe1\u606f\uff08\u4e2a\u4eba\u8ba4\u4e3a\u7ebf\u6bb5\u6811\u6bd4\u8f83\u79d1\u5b66\u3002\uff09\u6bcf\u4e00\u6b21\u4fee\u6539\u5219\u4fee\u6539\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u5411\u4e0a\u66f4\u65b0\u5373\u53ef\u3002\n\u8fd9\u6837\u5c31\u505a\u5b8c\u4e86\uff0c\u4e2a\u4eba\u89c9\u5f97\u5b9e\u73b0\u96be\u5ea6\u8fd8\u662f\u6bd4\u8f83\u4f4e\u7684\u3002\n*/\ninline int Abs(int X){\n\treturn X>0?X:-X;\n}\n\ninline int Min(int A,int B){\n\treturn A<B?A:B;\n}\n\nstd::multiset<int> st;\nint ansS=0x3f3f3f3f;\nint n,m,a[500005];\n\nclass SegmentTree{\n\tprivate:\n\t\tclass Node{\n\t\t\tpublic:\n\t\t\t\tint l;\n\t\t\t\tint r;\n\t\t\t\tint dlt;\n\t\t\tinline Node(){\n\t\t\t\tdlt=0x3f3f3f3f;\n\t\t\t}\n\t\t\tinline void init(int V){\n\t\t\t\tl=r=V;\n\t\t\t}\n\t\t\tinline void psh(int V){\n\t\t\t\tdlt=Min(dlt,Abs(r-V));\n\t\t\t\tr=V;\n\t\t\t}\n\t\t};\n\t\tNode tr[1100000];\n\t\tinline void updt(int X){\n\t\t\ttr[X].l=tr[LS].l;\n\t\t\ttr[X].r=tr[RS].r;\n\t\t\ttr[X].dlt=Min(Min(tr[LS].dlt,tr[RS].dlt),Abs(tr[LS].r-tr[RS].l));\n\t\t}\n\t\tinline void build(int L,int R,int X){\n\t\t\tif(L>R){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(L==R){\n\t\t\t\ttr[X].init(a[L]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbuild(L,MID,LS),build(MID+1,R,RS);\n\t\t\tupdt(X);\n\t\t}\n\t\tinline void push(int L,int R,int X,int A,int V){\n\t\t\tif(L>R){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(L==R){\n\t\t\t\ttr[X].psh(V);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tA>MID?push(MID+1,R,RS,A,V):push(L,MID,LS,A,V);\n\t\t\tupdt(X);\n\t\t}\n\t\tinline void prnt(int L,int R,int X){\n\t\t\tif(L>R){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(L==R){\n\t\t\t\tprintf(\"%d:[%d,%d,%d] \",X,tr[X].l,tr[X].r,tr[X].dlt);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprnt(L,MID,LS),prnt(MID+1,R,RS);\n\t\t}\n\tpublic:\n\t\tinline void PUSH(int X,int K){\n\t\t\tpush(1,n,1,X,K);\n\t\t}\n\t\tinline void BUILD(){\n\t\t\tbuild(1,n,1);\n\t\t}\n\t\tinline int QUERYG(){\n\t\t\treturn tr[1].dlt;\n\t\t}\n\t\tinline void PRINT(){\n\t\t\tprnt(1,n,1);\n\t\t\tputs(\"\");\n\t\t}\n};\n\ninline void STPUSH(int K){\n\tst.insert(K);\n\tstd::multiset<int> ::iterator it=st.find(K);\n\tint ans1,ans2;\n\t++it;\n\tif(it!=st.end()){\n\t\tans1=*it;\n\t}else{\n\t\tans1=0x3f3f3f3f;\n\t}\n\t--it;\n\tif(it!=st.begin()){\n\t\t--it;\n\t\tans2=*it;\n\t}else{\n\t\tans2=0x3f3f3f3f;\n\t}\n\tans1=Abs(K-ans1),ans2=Abs(K-ans2);\n\tansS=Min(ansS,Min(ans1,ans2));\n}\n\nSegmentTree T;\nvoid init(){\n\tscanf(\"%d%d\",&n,&m);\n\tint x;\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",a+i);\n\t\tSTPUSH(a[i]);\n\t}\n\tT.BUILD();\n\tchar op[10];\n\tint k;\n\tfor(int i=1;i<=m;++i){\n\t\tstd::cin>>op;\n\t\tswitch(op[4]){\n\t\t\tcase 'R':{\n\t\t\t\tscanf(\"%d%d\",&x,&k);\n\t\t\t\tT.PUSH(x,k);\n\t\t\t\tSTPUSH(k);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'G':{\n\t\t\t\tprintf(\"%d\\n\",T.QUERYG());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'S':{\n\t\t\t\tprintf(\"%d\\n\",ansS);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'P':{\n\t\t\t\tT.PRINT();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tinit();\n\treturn 0;\n}\n```",
        "postTime": 1545628785,
        "uid": 97512,
        "name": "Smokey_Days",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "emm\u2026\u2026\u697c\u4e0b\u7684\u4ee3\u7801\u90fd\u770b\u4e0d\u592a\u61c2\u2026\u2026\u6211\u4e00\u4e2a\u521a\u5b66\u4e86\u70b9splay\u7684\u83dc\u9e21\u6709\u70b9\u61f5\u2026\u2026\n\n\u8bf4\u5b9e\u8bdd\u6211\u53ea\u4f1a\u7528\u88f8\u7684splay\uff0c\u4e8e\u662f\u5f00\u4e2astruct\u5c01\u88c5\u4e00\u4e0b\u7136\u540e\u5efa\u4e24\u4e2asplay\u5c31\u597d\u4e86\n\n\u5148\u8bf4\u4e00\u4e0b\u8981\u7528\u5230\u7684\u3002\u6211\u4eec\u7528\u4e24\u4e2asplay\uff0cA\u6765\u5b58\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u5dee\u503c\uff0c\u7528B\u6765\u5b58\u6240\u6709\u6570\u7684\u503c\u3002h[i]\u8868\u793a\u63d2\u5165\u540e\u539f\u7b2ci\u4e2a\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u503c\uff08\u5373\u539f\u6765\u7684\u7b2ci\u4e2a\u5143\u7d20\uff09\uff0c\u7528t[i]\u8868\u793a\u63d2\u5165\u540e\u7b2ci\u4e2a\u5143\u7d20\u7684\u7ed3\u5c3e\u5143\u7d20\n\n\u5bf9\u4e8eINSERT\u64cd\u4f5c\uff0cA\u5220\u9664abs\uff08h[i+1]-t[i]\uff09\uff08\u539f\u6765\u7ed3\u5c3e\u4e0e\u4e0b\u4e00\u4e2a\u7684\u5dee\u503c\uff09\uff0c\u518d\u63d2\u5165\u65b0\u751f\u6210\u7684\u4e24\u4e2a\u5dee\u503c\u3002B\u76f4\u63a5\u63d2\u5165\uff0c\u987a\u4fbf\u627e\u524d\u7f00\u548c\u540e\u7f00\u66f4\u65b0\u6700\u5c0f\u503cminx\n\n\u5bf9\u4e8eMIN_GAP\u64cd\u4f5c\uff0c\u6211\u4eec\u76f4\u63a5\u67e5\u627eA\u91cc\u6700\u5c0f\u7684\u5143\u7d20\n\n\u5bf9\u4e8eMIN_SORT_GAP\uff0c\u6211\u4eec\u76f4\u63a5\u8f93\u51faminx\u5373\u53ef\n\nemm\u2026\u2026\u7136\u540eO2\u4fe1\u4ef0\u8dd1\u4e00\u8dd1\u2026\u2026\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cctype>\n#include<cmath>\n#define rint register int\nusing namespace std;\ntemplate<class T>inline bool cmin(T&a,const T&b){a>b?a=b,1:0;}\nconst int inf=0x3f3f3f3f,N=1000050;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getchar()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getchar());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nint h[N],t[N],minx=inf;\nstruct Splay{\n    struct node{\n        int v,father,ch[2];\n        int sum,recy;\n    } e[N];\n    int n,root;\n    void update(int x){\n        e[x].sum=e[e[x].ch[0]].sum+e[e[x].ch[1]].sum+e[x].recy;\n    }\n    int identify(int x){\n        return e[e[x].father].ch[1]==x;\n    }\n    void connect(int x,int f,int son){\n        e[x].father=f,e[f].ch[son]=x;\n    }\n    void rotate(int x){\n        int y=e[x].father,z=e[y].father;\n        int yson=identify(x),zson=identify(y);\n        int b=e[x].ch[yson^1];\n        connect(b,y,yson),connect(y,x,(yson^1)),connect(x,z,zson);\n        update(y),update(x);\n    }\n    void splay(int x,int goal){\n        while(e[x].father!=goal){\n            int y=e[x].father,z=e[y].father;\n            if(z!=goal)\n            (identify(x)^identify(y))?rotate(x):rotate(y);\n            rotate(x);\n        }\n        if(goal==0) root=x;\n    }\n    void push(int v){\n        int now=root,f=0;\n        while(now&&e[now].v!=v){\n            f=now;\n            now=e[now].ch[v>e[now].v];\n        }\n        if(now) e[now].recy++;\n        else{\n            now=++n;\n            if(f) e[f].ch[v>e[f].v]=now;\n            e[n].ch[0]=e[n].ch[1]=0;\n            e[n].father=f,e[n].v=v;\n            e[n].recy=e[n].sum=1;\n        }\n        splay(now,0);\n    }\n    void find(int v){\n        int now=root;\n        if(!now) return;\n        while(e[now].ch[v>e[now].v]&&v!=e[now].v)\n        now=e[now].ch[v>e[now].v];\n        splay(now,0);\n    }\n    int Next(int v,int f){\n        find(v);\n        int now=root;\n        if((e[now].v>v&&f)||(e[now].v<v&&!f)) return now;\n        now=e[now].ch[f];\n        while(e[now].ch[f^1]) now=e[now].ch[f^1];\n        return now;\n    }\n    int Next2(int v,int f){\n        find(v);\n        int now=root;\n        if((e[now].v>=v&&f)||(e[now].v<=v&&!f)) return now;\n        now=e[now].ch[f];\n        while(e[now].ch[f^1]) now=e[now].ch[f^1];\n        return now;\n    }\n    void pop(int v){\n        int lower=Next(v,0);\n        int upper=Next(v,1);\n        splay(lower,0),splay(upper,lower);\n        int del=e[upper].ch[0];\n        if(e[del].recy>1){\n            e[del].recy--;\n            splay(del,0);\n        }\n        else e[upper].ch[0]=0;\n        update(upper),update(lower);\n    }\n    int get(){\n        int now=root,v=2;\n        if(e[now].sum<v) return false;\n        while(true){\n            int y=e[now].ch[0];\n            if(v>e[y].sum+e[now].recy){\n                v-=e[y].sum+e[now].recy;\n                now=e[now].ch[1];\n            }\n            else if(e[y].sum>=v) now=y;\n            else return e[now].v;\n        }\n    }\n    void init(){n=root=0;push(inf),push(-inf);}\n}A,B;\ninline void pushb(int v){\n\tint lower=B.Next2(v,0);\n\tint upper=B.Next2(v,1);\n\tcmin(minx,min(abs(B.e[lower].v-v),abs(B.e[upper].v-v)));\n\tB.push(v);\n}\nint n,m;\nint main(){\n\t//freopen(\"testdata.in\",\"r\",stdin);\n\tA.init(),B.init();\n\tn=read(),m=read();\n\tfor(rint i=1;i<=n;i++) h[i]=t[i]=read();\n\th[n+1]=inf;\n\tfor(rint i=2;i<=n;i++)\n\tA.push(abs(h[i]-h[i-1]));\n\tfor(rint i=1;i<=n;i++)\n\tpushb(h[i]);\n\twhile(m--){\n\t\tchar c[20];int i,k;\n\t\tscanf(\"%s\",c);\n\t\tif(c[0]=='I'){\n\t\t\ti=read(),k=read();\n\t\t\tA.pop(abs(h[i+1]-t[i]));\n\t\t\tA.push(abs(k-h[i+1])),A.push(abs(k-t[i]));\n\t\t\tpushb(k);\n\t\t\tt[i]=k;\n\t\t}\n\t\telse if(c[4]=='G') printf(\"%d\\n\",A.get());\n\t\telse printf(\"%d\\n\",minx);\n\t}\n    for(;;);//\u9632\u6284\n\treturn 0;\n}\n```",
        "postTime": 1531216838,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "$Treap$ $+$ $Multiset$ \u5361\u5e38\u8fc7\u7684\u6b64\u9898.\n\n**\u7ef4\u62a4$MIN\\_GAP$**\uff1a$Multiset$\uff08\u53ef\u91cd\u96c6\uff09\u3002\u5bf9\u4e8e$N$\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u53ea\u9700\u8bb0\u5f55\u7b2c\u4e00\u4e2a\uff08$first$\uff09\u548c\u6700\u540e\u4e00\u4e2a\uff08$last$\uff09\u662f\u8c01\uff0c\u4e2d\u95f4\u7684\u5143\u7d20\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\u3002\n\n\u6bcf\u6b21\u628a\u6574\u6570$y$\u52a0\u5165\u5143\u7d20$x$\u7684\u65f6\u5019\uff0c\u9996\u5148\u628a$abs(last(x)  - first(x+1))$\u5220\u9664\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u76f8\u90bb\u4e86\u3002\u518d\u628a$abs(y -last(x))$\u3001$abs(y-first(x+1))$\u4e22\u8fdb$Multiset$.\u5220\u9664\u64cd\u4f5c\u76f4\u63a5$find+erase$\uff0c\u4e0d\u9700\u8981\u4e8c\u5206.\n\n**\u7ef4\u62a4$MIN\\_SORT\\_GAP$**\uff1a$Treap$.\u6bcf\u52a0\u5165\u4e00\u4e2a\u65b0\u5143\u7d20\uff0c\u627e\u4e00\u4e0b\u524d\u9a71\u548c\u540e\u7ee7\u66f4\u65b0\u7b54\u6848\uff0c\u7136\u540e\u4e22\u8fdb\u53bb.\n\n**\u5361\u5e38**\uff1a\u53ef\u4ee5\u7528$fread$\u624b\u5199$getchar$\uff0c\u518d\u624b\u5199\u8bfb\u5165.\n\n**\u6838\u5fc3\u4ee3\u7801**\uff1a\n\n```cpp\nint v[500010][2], sz[500010]; //v\u8bb0\u5f55\u9996\u672b\u4f4d\uff0csz\u8bb0\u5f55\u662f\u5426\u5143\u7d20>1 \nint N, M, msg(2e9 + 10);\n\nmultiset<int> t2;\n\nvoid update_msg(int x) {      //\u627e\u524d\u9a71\u540e\u7ee7\u66f4\u65b0MIN_SORT_GAP \n\tmsg = min(msg, min(x - pre(root, x), after(root, x) - x));\n}\n\nint main() {\n\tN = read(), M = read();\n\tfor(int i=1, x; i<=N; i++) {\n\t\tx = v[i][0] = read();\n\t\tupdate_msg(x), insert(root, x);          //\u628ax\u4e22\u8fdbTreap \n\t\tif(i > 1) t2.insert(abs(x - v[i-1][0])); //\u628a\u76f8\u90bb\u4e4b\u5dee\u4e22\u8fdb Multiset\n\t}\n\tchar buf[21];\n\tfor(int i=1, x, y; i<=M; i++) {\n\t\tread_s(buf);\n\t\tif(buf[4] == 'R') {\n\t\t\tx = read(), y = read();\n\t\t\tif(x < N) t2.erase(t2.find(abs(v[x+1][0] - v[x][sz[x]])));\n\t\t\tt2.insert(abs(y - v[x][sz[x]]));\n\t\t\tif(x < N) t2.insert(abs(y - v[x+1][0]));  //\u4e00\u4e2a\u5220\u9664\u4e24\u4e2a\u63d2\u5165 \n\t\t\tv[x][sz[x] ? 1 : (sz[x] = 1)] = y;        //\u5c3e\u90e8\u52a0\u5165\u5143\u7d20 \n\t\t\tupdate_msg(y), insert(root, y);           //\u628ay\u4e22\u8fdbTreap \n\t\t} else if(buf[4] == 'G') write(*(t2.begin())); //\u76f4\u63a5\u8f93\u51fa multiset\u6700\u5c0f\u5143\u7d20 \n\t\telse write(msg);                               //\u76f4\u63a5\u8f93\u51faMIN_SORT_GAP \n\t}\n\treturn 0;\n}\n```",
        "postTime": 1531042794,
        "uid": 20375,
        "name": "hongzy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u770b\u51fa\u662f\u5e73\u8861\u6811\u64cd\u4f5c\u7684\u88f8\u9898\uff0c\n\n\u8bbeen[x]\u8868\u793a\u7b2cx\u5143\u7d20\u7684\u94fe\u7684\u672b\u7aef\u7684\u6570\u5b57\u662f\u591a\u5c11\u3002\n\nnxt[x]\u8868\u793a\u7b2cx\u5143\u7d20\u7684\u94fe\u7684\u672b\u7aef\u7684\u540e\u9762\u4e00\u4e2a\u6570\u5b57\uff0c\u5373x[i+1]\n\n\u5f04\u4e2a\u524d\u9a71\u548c\u540e\u7ee7\u5c31\u53ef\u4ee5\u89e3\u51b3\u7b2c3\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e8c\u4e2a\u95ee\u9898\u53ea\u9700\u63d2\u5165abs(en[x]-new),abs(nxt[x]-new)\u7136\u540e\u6ce8\u610f\u5220\u9664abs(en[x]-nxt[x])\u3002\n\n\u4f46\u662f\u5c31\u5f04\u4fe9\u5e73\u8861\u6811\u4f1a\u88ab\u5361\u63893\u4e2a\u70b9\uff0c\u6211\u5199\u7684SBT\u90fd\u8fc7\u4e0d\u4e86\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7b2c\u4e8c\u4e2a\u95ee\u9898\u8003\u8651\u6362\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\n\n\u7528\u5806\u5427\uff0c\u4e8c\u53c9\u5806\u5c31\u884c\u4e86\uff0c\u4e0d\u9700\u8981\u5de6\u504f\u6811\u3002\u5728\u6211\u4eec\u9700\u8981\u7684\u5806\u4e2d\u63d2\u5165abs(en[x]-new),abs(nxt[x]-new)\uff0c\u7136\u540e\u518d\u53e6\u4e00\u4e2a\u5806\u4e2d\u63d2\u5165\u6211\u4eec\u9700\u8981\u5220\u9664\u7684abs(en[x]-nxt[x])\uff0c\u5982\u679c\u4e24\u4e2a\u5806\u9876\u76f8\u7b49\uff0c\u5c31\u90fd\u5f39\u6389\uff0c\u7406\u8bba\u590d\u6742\u5ea6\u6ca1\u6709\u53d8\uff0c\u4e8b\u5b9e\u4e0a\u6211\u89c9\u5f97\u5e38\u6570\u8fd8\u53d8\u5927\u4e86\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5c310.5s\u5c31\u8fc7\u4e86\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int INF=0x3f3f3f3f;\nconst int N=3*500010;\nint n,m,x[N],nxt[N],en[N];\nstruct SBT{\n    int root,NodeCnt;\n    int key[N],left[N],right[N],s[N];\n    void clear(){\n        root=NodeCnt=0;\n        memset(key,0,sizeof(key));\n        memset(left,0,sizeof(left));\n        memset(right,0,sizeof(right));\n        memset(s,0,sizeof(s));\n    }\n    void zag(int &t){\n        int p=right[t];\n        right[t]=left[p];\n        left[p]=t;\n        s[p]=s[t];\n        s[t]=s[left[t]]+s[right[t]]+1;\n        t=p;\n    }\n    void zig(int &t){\n        int p=left[t];\n        left[t]=right[p];\n        right[p]=t;\n        s[p]=s[t];\n        s[t]=s[left[t]]+s[right[t]]+1;\n        t=p;\n    }\n    void maintain(int &t,bool flag){\n        if (!flag){\n            if (s[left[left[t]]]>s[right[t]])zig(t);\n            else{\n                if (s[right[left[t]]]>s[right[t]]){\n                    zag(left[t]);zig(t);\n                }else return;\n            }\n        }else{\n            if (s[right[right[t]]]>s[left[t]])zag(t);\n            else{\n                if (s[left[right[t]]]>s[left[t]]){\n                    zig(right[t]);zag(t);\n                }else return;\n            }\n        }\n        maintain(left[t],false);\n        maintain(right[t],true);\n        maintain(t,false);\n        maintain(t,true);\n    }\n    void insert(int &t,int x){\n        if (!t){key[t=++NodeCnt]=x;s[t]=1;return;}\n        s[t]++;\n        if (x<key[t])insert(left[t],x);\n            else insert(right[t],x);\n        maintain(t,x>=key[t]);\n    }\n    int erase(int &p,int x){\n        s[p]--;int tmp;\n        if (x==key[p] || (x<key[p] && !left[p]) || (x>key[p] && !right[p])){\n            tmp=key[p];\n            if (!left[p] || !right[p])p=left[p]+right[p];\n            else key[p]=erase(left[p],key[p]+1);\n            return tmp;\n        }\n        if (x<key[p])tmp=erase(left[p],x);else tmp=erase(right[p],x);\n        return tmp;\n    }\n    int pred(int &t,int x){\n        if (!t)return -INF;\n        if (x==key[t])return x;\n        if (x<key[t])return left[t]?pred(left[t],x):-INF;\n        return max(pred(right[t],x),key[t]);\n    }\n    int succ(int &t,int x){\n        if (!t)return INF;\n        if (x==key[t])return x;\n        if (x>key[t])return right[t]?succ(right[t],x):INF;\n        return min(succ(left[t],x),key[t]);\n    }\n    int minx(int &rt){\n        int now=rt;\n        while (left[now])now=left[now];\n        return key[now];\n    }\n}T,T0;\nint f(int a){\n    return a>0?a:-a;\n}\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\nint main(){\n    n=read(),m=read();\n    T.clear();T0.clear();\n    int &rt=T.root,&o=T0.root,ans1=INF,ans2=INF;\n    nxt[n]=INF;\n    for (int i=1;i<=n;i++){\n        x[i]=read();\n        en[i]=x[i];nxt[i-1]=x[i];\n        if (i!=1)ans2=min(ans2,min(f(T.pred(rt,x[i])-x[i]),f(T.succ(rt,x[i])-x[i])));\n        T.insert(rt,x[i]);\n        if (i!=1)ans1=min(ans1,f(x[i]-x[i-1]));\n        if (i!=1)T0.insert(o,f(x[i]-x[i-1]));\n    }\n    int cnt=0;\n    for (int i=1;i<=m;i++){\n        char opt[20];\n        scanf(\"%s\",opt);\n        int l=strlen(opt);\n        if (l==6){\n            int x=read(),y=read();\n            ans2=min(ans2,min(f(T.pred(rt,y)-y),f(T.succ(rt,y)-y)));\n            T.insert(rt,y);\n            T0.insert(o,f(en[x]-y));\n            T0.insert(o,f(nxt[x]-y));\n            T0.erase(o,f(en[x]-nxt[x]));\n            en[x]=y;\n        }else if (l==7){ printf(\"%d\\n\",T0.minx(o));\n        }else printf(\"%d\\n\",ans2);\n    }\n    return 0;\n}\n```",
        "postTime": 1504010805,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u65b9\u6cd5\u697c\u4e0b\u7684\uff0c\u53ea\u662f\u7ed9\u51fa\u4e86\u53e6\u4e00\u79cd\u5199\u6cd5\uff1a\u4e8c\u53c9\u5806\u6362\u5de6\u504f\u6811\uff0cSplay\u6362Treap\u3002\n\n\u8fd9\u9898\u80fd\u5f88\u597d\u5730\u5229\u7528\u5de6\u504f\u6811\uff0c\u9996\u5148\u5229\u7528\u961f\u5217\u4e24\u4e24\u5408\u5e76O(n)\u5efa\u5806\uff0c\u5728\u5220\u9664\u65f6\u53ef\u4e0d\u5fc5\u50cf\u4e8c\u53c9\u5806\u90a3\u6837\u5efa\u4e24\u4e2a\u5806\u61d2\u60f0\u5220\u9664\uff0c\u53ea\u9700\u5f00\u4e00\u4e2a\u6570\u7ec4inx[x]\uff0c\u8bb0\u5f55\u539f\u59cb\u6570\u5217\u4e2d\u7b2cx\u4e2a\u5143\u7d20\u5728\u63d2\u5165\u540e\u7ba1\u8f96\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0e\u7b2cx+1\u4e2a\u5143\u7d20\u7684\u5dee\u503c\u7edd\u5bf9\u503c\u5728\u5de6\u504f\u6811\u4e2d\u7684\u5e8f\u53f7\uff0c\u5728\u63d2\u5165\u65b0\u5143\u7d20\u65f6\u5229\u7528\u5de6\u504f\u6811\u7684\u5220\u9664\u4efb\u610f\u8282\u70b9\u6765\u5220\u9664inx[x]\u5e76\u66f4\u65b0\u5373\u53ef\u3002\n\n\u4e0d\u8fc7\u6548\u7387\u5e76\u6ca1\u6709\u663e\u8457\u52a0\u5feb\uff08\u679c\u7136\u849f\u84bb\uff09\uff0c\u4ec5\u4f5c\u4e3aTreap\u548c\u5de6\u504f\u6811\u7684\u7ec3\u624b\u9898\u4ecd\u7136\u4e5f\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n\n\n\n\n\n \n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int Maxn = 0x3f3f3f3f;\nconst int N = 5e5 + 5, M = N << 1;\nint T, n, m, rTp, Ans = Maxn, x, y, str[N], edt[N];\nint pos[M], lc[M], rc[M], vis[M], h[M], inx[N]; char s[15];\nint tl[M], tr[M], dis[M], key[M], fa[M], E, rt;\ntemplate <class T> inline void CkMin(T &a, const T b) {if (a > b) a = b;}\ntemplate <class T> inline void Swap(T &a, T &b) {a ^= b; b ^= a; a ^= b;}\ntemplate <class T> inline T Min(const T a, const T b) {return a < b? a : b;}\ninline int Abs(const int x) {return x < 0 ? ~x + 1 : x;}\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\ninline void put(int x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\n//\n//\u5de6\u504f\u6811\uff1a\n//(1) \u5408\u5e76 \ninline int Merge(int x, int y)\n{\n    if (!x) return y;\n    if (!y) return x;\n    if (key[x] > key[y]) Swap(x, y);\n    tr[x] = Merge(tr[x], y); fa[tr[x]] = x;\n    if (dis[tl[x]] < dis[tr[x]]) Swap(tl[x], tr[x]); \n    dis[x] = tr[x] ? dis[tr[x]] + 1 : 0; return x;\n} \n//(2) \u5220\u9664\u4efb\u610f\u8282\u70b9 \ninline void Delte(const int x)\n{\n    int q = fa[x],\n        p = Merge(tl[x], tr[x]);\n    fa[p] = q;\n    if (x == rt) rt = p;\n    if (q) (tr[q] == x? tr[q] : tl[q]) = p;\n    while (q)\n    {\n        if (dis[tl[q]] < dis[tr[q]]) Swap(tl[q], tr[q]);\n        if (dis[tr[q]] + 1 == dis[q]) return ;\n        dis[q] = dis[tr[q]] + 1; q = fa[q];\n    }\n}\n//(3) \u63d2\u5165 \ninline void Push(const int vi) {key[++E] = vi; rt = Merge(rt, E);}\n//\n//Treap:\n//(1)\u5de6\u53f3\u65cb \ninline void Zig(int &x)\n{\n    int y = lc[x];\n    lc[x] = rc[y], rc[y] = x;\n    x = y;\n}\ninline void Zag(int &x)\n{\n    int y = rc[x];\n    rc[x] = lc[y], lc[y] = x;\n    x = y;\n}\n//(2)\u63d2\u5165 \ninline void Insert(int &x, const int vi)\n{\n    if (!x)\n    {\n        pos[x = ++T] = rand(); vis[x] = vi;\n        return ;\n    }\n    CkMin(Ans, Abs(vi - vis[x])); \n    if (vi == vis[x]) return ;\n    if (vi < vis[x])\n    {\n        Insert(lc[x], vi);\n        if (pos[lc[x]] < pos[x]) Zig(x); \n    }\n    else\n    {\n        Insert(rc[x], vi);\n        if (pos[rc[x]] < pos[x]) Zag(x);\n    }\n}\nint main()\n{\n    n = get(); m = get();\n    Insert(rTp, str[1] = edt[1] = get());\n    int t = 0, w = 0;\n    for (int i = 2; i <= n; ++i)  \n    {\n        Insert(rTp, str[i] = edt[i] = get());\n        h[++w] = inx[i - 1] = ++E;\n        key[h[w]] = Abs(str[i] - edt[i - 1]);\n    }\n    for (int i = 1; i < n - 1; ++i) // \u5229\u7528\u961f\u5217O(n)\u5efa\u5806\n     h[++w] = Merge(h[t], h[t + 1]), t += 2;\n    rt = h[w];\n    while (m--)\n    {\n        scanf(\"%s\", s);\n        if (s[0] == 'I')\n        {\n            x = get(); y = get();\n            if (x < n)\n            {\n                Delte(inx[x]);\n                Push(Abs(y - str[x + 1]));\n                inx[x] = E; // \u66f4\u65b0inx[x] \n            }\n            Push(Abs(edt[x] - y));\n            edt[x] = y; \n            Insert(rTp, y);\n        }\n        else if (s[4] == 'G')\n         put(key[rt]), putchar('\\n');\n        else \n         put(Ans), putchar('\\n');\n    }\n    return 0;\n}\n\n```",
        "postTime": 1494591358,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "**STL\u5927\u6cd5\u597d\uff0cset\u628a\u4f60\u4fdd**\n\nMIN\\_SORT\\_GAP\u7528set\u7ef4\u62a4\uff0c\u63d2\u5165\u524dlower\\_bound\u627e\u6700\u63a5\u8fd1\u7684\u503c\uff0c\u66f4\u65b0\u6700\u5c0f\u503c\uff0c\u7136\u540einsert\n\nMIN\\_GAP\u7528\u5806\u7ef4\u62a4\uff0c\u5728a,b\u4e4b\u95f4\u63d2\u5165c\u65f6\uff0c\u628aabs(a-b)\u4ece\u5806\u4e2d\u5220\u9664\uff0c\u7136\u540e\u63d2\u5165abs(a-c)\u548cabs(b-c)\n\n(\u7531\u4e8e\u672c\u849f\u84bb\u53ea\u4f1a\u7528stl\u5806\uff0c\u4e0d\u652f\u6301\u5220\u9664\uff0c\u6240\u4ee5\u7528\u4e86\u4e24\u4e2a\u5806\u6765\u8fbe\u5230\u5220\u9664\u6307\u5b9a\u6570\u503c\uff0c\u5177\u4f53\u89c1\u4ee3\u7801)\n\n\u8bb0\u5f97\u63d2\u5165\u7684\u65f6\u5019\uff0c\u627e\u5230\u771f\u6b63\u4e0e\u5f53\u524d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u56e0\u4e3a\u4e4b\u524d\u53ef\u80fd\u5df2\u7ecf\u63d2\u5165\u4e86\u4e00\u4e9b\u8282\u70b9\uff0c\u6240\u4ee5\u7528\u94fe\u8868\u6765O(1)\u627e\u5230\u5f53\u524d\u76f8\u90bb\u3002\n\n\u4ee3\u7801\u6bd4\u8f83\u4e11\uff0c\u4f46\u6bd4\u624b\u5199\u67d0\u6811\u548c\u67d0\u5806\u65b9\u4fbf\u591a\u4e86\n\n```cpp\n\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <cctype>\n#include <set>\nusing namespace std;\ntypedef long long ll;\n\nint iRead()\n{\n    int ret = 0;\n    int ch;\n    while(!isdigit(ch = getchar()) && ch != '-');\n    bool bm = (ch == '-'); if(bm) ch = getchar();\n    while(ret = ret * 10 + (ch - '0'), isdigit(ch = getchar()));\n    return bm ? -ret : ret;\n}\n\nvoid iReadstr(char *p)\n{\n    int ch;\n    while(isspace(ch = getchar()));\n    while(*p++ = ch, !isspace(ch = getchar()));\n    *p = '\\0';\n}\n\nconst int N = 1500003;\nconst int INF = 0x7FFFFFFF;\nint n, m;\nstruct iT\n{\n    int val;\n    iT *l, *r;\n}ss[N], *sp = ss;\niT *arr[N];\nint ss1[N], *pss1 = ss1;\nint ss2[N], *pss2 = ss2;\nset<int> s;\nint ans2 = INF;\n\nbool iCmp(int a, int b) {return a > b;}\n\nvoid iUp(int val)\n{\n    if(ans2)\n    {\n        pair<set<int>::iterator, bool> pr = s.insert(val);\n        if(pr.second)\n        {\n            set<int>::iterator it;\n            if(pr.first != s.begin())\n            {\n                it = pr.first;\n                ans2 = min(ans2, abs(*--it - val));\n            }\n            if(++pr.first != s.end())\n                ans2 = min(ans2, abs(*pr.first - val));\n                \n        }\n        else\n            ans2 = 0;\n    }\n}\n\nint iAns1()\n{\n    while(pss2 != ss2 && ss1[0] == ss2[0])\n    {\n        pop_heap(ss1, pss1--, iCmp);\n        pop_heap(ss2, pss2--, iCmp);\n    }\n    return ss1[0];\n}\n\nvoid iInsert(iT *c, int val)\n{\n    iT *nc = sp++;\n    *nc = (iT){val, c, c->r};\n    \n    if(c->r->val != INF)\n    {\n        *pss2++ = abs(c->val - c->r->val);\n        push_heap(ss2, pss2, iCmp);\n    }\n    \n    c->r->l = nc;\n    c->r = nc;\n    \n    *pss1++ = abs(c->val - c->r->val);\n    push_heap(ss1, pss1, iCmp);\n    if(c->r->r->val != INF)\n    {\n        *pss1++ = abs(c->r->val - c->r->r->val);\n        push_heap(ss1, pss1, iCmp);\n    }\n}\n\nint main()\n{\n    n = iRead(), m = iRead();\n    for(int i = 0; i < n; ++i)\n    {\n        int c = iRead();\n        arr[i] = sp++;\n        arr[i]->val = c;\n        iUp(c);\n        if(i)\n        {\n            *pss1++ = abs(c - arr[i - 1]->val);\n            push_heap(ss1, pss1, iCmp);\n        }\n    }\n    *(arr[n] = sp++) = (iT){INF, arr[n - 1], NULL};\n    for(int i = 0; i < n; ++i)\n    {\n        if(i)\n            arr[i]->l = arr[i - 1];\n        if(i != n - 1)\n            arr[i]->r = arr[i + 1];\n    }\n    \n    char str[20];\n    while(m--)\n    {\n        int a, b;\n        iReadstr(str);\n        switch(str[4])\n        {\n            case 'R':\n                a = iRead(), b = iRead();\n                iInsert(arr[a]->l, b);\n                iUp(b);\n                break;\n                \n            case 'G':\n                printf(\"%d\\n\", iAns1());\n                break;\n                \n            default:\n                printf(\"%d\\n\", ans2);\n        }\n    }\n    \n    return 0;\n}\n\n```",
        "postTime": 1444303950,
        "uid": 9567,
        "name": "HOOCCOOH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u8fd9\u9898\u8fd9\u4e48\u6c34 ~~\u6211\u90fdwa\u4e86\u597d\u51e0\u904d~~ ...\n\n\u672c\u6765\u6253\u7740\u5fc3\u7231\u7684 FHQ \uff0c\u540e\u6765\u53d1\u73b0 STL \u53ef\u4ee5\u89e3\u51b3\u4e8e\u662f\u5c31...\n\n# noteskey\n\n\u5176\u5b9e\u8fd9\u91cc\u5c31\u4e24\u4e2a\u64cd\u4f5c\uff0c\u8be2\u95ee\uff08\u7684\u4ee3\u7801\u590d\u6742\u5ea6\uff09\u662f O(1) \u7684\u3010\u96fe\n\n\u6bcf\u4e00\u4e2a\u4fee\u6539\u5bf9\u4e8e ans1 \u7684\u8d21\u732e\u5c31\u662f\u51cf\u53bb\u4e86\u4e00\u5bf9\u539f\u672c\u76f8\u90bb\u7684\u5143\u7d20\u5dee\u503c\uff0c\u5e76\u4e14\u52a0\u4e0a\u4e86\u53e6\u5916\u4e24\u5bf9\u5143\u7d20\u5dee\u503c\uff0c\u5bf9\u4e8e ans2 \u5c31\u662f\u76f4\u63a5\u66f4\u65b0\u4e86\u4e00\u4e0b\u7b54\u6848\uff08\u4e0e\u5e73\u8861\u6811\u4e2d\u524d\u9a71\u540e\u7ee7\u7684\u5dee\u503c\uff09\n\n\n# more\n\n\u8bdd\u8bf4\u60f3\u5e38\u6570\u66f4\u5c0f\u4e00\u70b9\u7684\u8bdd\u53ef\u4ee5\u7528[\u8fd9\u4e2a\u5806\u7684\u9ed1\u79d1\u6280](https://www.cnblogs.com/Judge/p/10557516.html)\u66ff\u6362\u6389 s1 ~~\uff08\u7136\u540e s2 \u4e5f\u53ef\u4ee5\u6539\u6210 set \u4e86\uff09~~\uff0c\u867d\u8bf4\u539f\u7248\u7684\u662f\u5927\u6839\u5806\uff0c\u4e0d\u8fc7\u591a\u52a0\u51e0\u4e2a\u8d1f\u53f7\u5c31\u80fd\u53d8\u6210\u5c0f\u6839\u5806\u4e8623333333\n\n\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u9898\u8fd8\u662f\u6bd4\u8f83\u6c34\u7684\uff0c\u6bd5\u7adf STL \u7684 set \u53ef\u4ee5\u6c34\u8fc7\u53bb\n\n# code\n\n3000 ms+\n\n```\n//by Judge\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n#define fp(i,a,b) for(register int i=(a),I=(b)+1;i<I;++i)\n#define IT multiset<int>::iterator\nusing namespace std;\nconst int M=5e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int abs(int x){return x<0?-x:x;}\ninline void cmin(int& a,int b){a=a<b?a:b;}\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline void reads(string& s){ char c=getchar();\n\tfor(;!isalpha(c);c=getchar()); s=\"\";\n\tfor(;isalpha(c)||c=='_';c=getchar()) s+=c;\n} char sr[1<<21],z[20];int CCF=-1,Z;\ninline void Ot(){fwrite(sr,1,CCF+1,stdout),CCF=-1;}\ninline void print(int x,char chr='\\n'){\n    if(CCF>1<<20)Ot();if(x<0)sr[++CCF]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++CCF]=z[Z],--Z);sr[++CCF]=chr;\n} int n,m,ans2=2e9,a[M],b[M];\nstring opt; multiset<int> s1,s2;\nint main(){ n=read(),m=read(); int x,y; a[0]=a[n+1]=2e9;\n\tfp(i,1,n){ a[i]=b[i]=read(); IT it=s2.lower_bound(a[i]);\n\t\tif(it!=s2.end()) cmin(ans2,abs(*it-a[i]));\n\t\tif(it!=s2.begin()) --it,cmin(ans2,abs(a[i]-*it)); s2.insert(a[i]);\n\t} fp(i,1,n) s1.insert(abs(a[i+1]-b[i]));\n\tfp(kkk,1,m){ reads(opt),n=opt.length();\n\t\tif(n==6){ x=read(),y=read();\n\t\t\ts1.erase(s1.lower_bound(abs(a[x+1]-b[x]))),\n\t\t\ts1.insert(abs(b[x]-y)),b[x]=y,s1.insert(abs(a[x+1]-b[x]));\n\t\t\tIT it=s2.lower_bound(y); if(it!=s2.end()) cmin(ans2,abs(*it-y));\n\t\t\tif(it!=s2.begin()) --it,cmin(ans2,abs(y-*it)); s2.insert(y);\n\t\t} else if(n==7) print(*s1.begin()); else print(ans2);\n\t} return Ot(),0;\n}\n```\n\n# code +1\n\n2000 ms-\n```\n//by Judge\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n#define fp(i,a,b) for(register int i=(a),I=(b)+1;i<I;++i)\n#define IT set<int>::iterator\nusing namespace std;\nconst int M=5e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int abs(int x){return x<0?-x:x;}\ninline void cmin(int& a,int b){a=a<b?a:b;}\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline void reads(string& s){ char c=getchar();\n\tfor(;!isalpha(c);c=getchar()); s=\"\";\n\tfor(;isalpha(c)||c=='_';c=getchar()) s+=c;\n} char sr[1<<21],z[20];int CCF=-1,Z;\ninline void Ot(){fwrite(sr,1,CCF+1,stdout),CCF=-1;}\ninline void print(int x,char chr='\\n'){\n    if(CCF>1<<20)Ot();if(x<0)sr[++CCF]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++CCF]=z[Z],--Z);sr[++CCF]=chr;\n} int n,m,ans2=2e9,a[M],b[M]; string opt; set<int> s2;\nstruct Heap{ priority_queue<int> q1,q2;\n    inline void push(int x){q1.push(-x);}\n    inline void erase(int x){q2.push(-x);}\n    inline void pop(){for(;q2.size()&&q1.top()==q2.top();q1.pop(),q2.pop());if(q1.size())q1.pop();}\n    inline int top(){for(;q2.size()&&q1.top()==q2.top();q1.pop(),q2.pop());return -q1.top();}\n    inline int top2(){int val,ret; val=top(),pop(),ret=top(),push(val); return -ret;}\n    inline int size(){return q1.size()-q2.size();}\n}s1;\nint main(){ n=read(),m=read(); int x,y; a[0]=a[n+1]=2e9;\n\tfp(i,1,n){ a[i]=b[i]=read(); IT it=s2.lower_bound(a[i]);\n\t\tif(it!=s2.end()) cmin(ans2,abs(*it-a[i]));\n\t\tif(it!=s2.begin()) --it,cmin(ans2,abs(a[i]-*it)); s2.insert(a[i]);\n\t} fp(i,1,n) s1.push(abs(a[i+1]-b[i]));\n\tfp(kkk,1,m){ reads(opt),n=opt.length();\n\t\tif(n==6){ x=read(),y=read(),s1.erase(abs(a[x+1]-b[x]));\n\t\t\ts1.push(abs(b[x]-y)),b[x]=y,s1.push(abs(a[x+1]-b[x]));\n\t\t\tIT it=s2.lower_bound(y); if(it!=s2.end()) cmin(ans2,abs(*it-y));\n\t\t\tif(it!=s2.begin()) --it,cmin(ans2,abs(y-*it)); s2.insert(y);\n\t\t} else if(n==7) print(s1.top()); else print(ans2);\n\t} return Ot(),0;\n}\n```\n\n\n",
        "postTime": 1555376025,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    },
    {
        "content": "**\u76ee\u6d4b\u5f88\u9ebb\u70e6\u3002\u53ea\u7528STL\u5e93\u4f1a\u8d85\u65f6\u3002**\n\n\u6240\u4ee5\u5efa\u4e86\u4e24\u68f5\u6811\u7ef4\u62a4MIN\\_GAP\u548cMIN\\_SORT\\_GAP\u3002\n\n\u4ee3\u7801\u5f88\u957f\u3002\n\n```cpp\n\n#include<set>  \n#include<queue>  \n#include<vector>  \n#include<cstdio>  \n#include<cstdlib>  \n#include<cstring>  \n#include<iostream>  \n#include<algorithm>  \nusing namespace std;  \nconst int N = 500010;  \n#define Sets(T,a,b,c){T[a].s[c] = b; T[b].p = a;}  \n#define rep(i,n) for(int i=1;i<=n;i++)  \n#define For(i,l,r) for(int i=l;i<=r;i++)  \n  \nstruct tnode{  \nint s[2],v,p,num;  \n}T1[N<<1],T2[N<<1];  \n  \nint kth,val,A[N],Last[N],MSG=2147483647,n,m;  \nint cnt,root1,root2,tot1,tot2,y,z;  \n  \nint read(){  \nint num = 0; char ch = getchar();  \nint q = 0;  \nwhile(ch<'0'||ch>'9') {  \nif(ch=='-') q = 1;  \nch = getchar();  \n}  \nwhile(ch>='0'&&ch<='9'){  \nnum = num * 10 + ch-'0';  \nch = getchar();  \n}  \n return (q==1)?(-num):num;  \n }  \n   \n void Rot(tnode T[],int x){  \n //cnt++;  \nint y = T[x].p , z = T[y].p;  \n int lx = T[y].s[1] == x , ly = T[z].s[1] == y;  \n Sets(T,y,T[x].s[!lx],lx);  \n Sets(T,z,x,ly);  \n Sets(T,x,y,lx^1);  \n }  \n   \n void Splay(tnode T[],int i,int goal,int &root){  \n while(T[i].p!=goal){  \n if(T[T[i].p].p!=goal) Rot(T,T[i].p);  \n Rot(T,i);  \n }  \n if(!goal) root = i;  \n }  \n   \n void Insert_1(int V,int i){  \n if(!i){  \n root1 = ++tot1;T1[root1].num = 1;T1[root1].p = 0;T1[root1].v = V;  \n return;  \n }  \n MSG = min(MSG,abs(V-T1[i].v));  \n if(T1[i].v==V)   T1[i].num++;  \n else{  \n if(!T1[i].s[V>T1[i].v]){  \n T1[i].s[V>T1[i].v] = ++tot1;T1[tot1].p = i;T1[tot1].v = V; T1[tot1].num = 1;  \n Splay(T1,tot1,0,root1);  \n }  \n else Insert_1(V,T1[i].s[V>T1[i].v]);  \n }  \n }  \n   \n void Insert_2(int V,int i){  \n if(!i){  \n root2 = ++tot2;T2[root2].num = 1;T2[root2].p = 0;T2[root2].v = V;  \n return;  \n }  \n if(T2[i].v==V)   T2[i].num++;  \n else{  \n if(!T2[i].s[V>T2[i].v]){  \n T2[i].s[V>T2[i].v] = ++tot2;T2[tot2].p = i;T2[tot2].v = V; T2[tot2].num = 1;  \n Splay(T2,tot2,0,root2);  \n }  \n else Insert_2(V,T2[i].s[V>T2[i].v]);  \n }  \n }  \n   \n int prev(int i){  \n int Next = T2[i].s[0];  \n while(T2[Next].s[1]) Next = T2[Next].s[1];  \n return Next;  \n }  \n   \n void Delete(int i){  \n if(T2[i].num>1) {  \n T2[i].num--;  \n return;  \n }  \n Splay(T2,i,0,root2);  \n if(T2[i].s[0]){  \n Splay(T2,prev(i),i,root2);  \n Sets(T2,T2[i].s[0],T2[i].s[1],1);  \n T2[T2[i].s[0]].p = 0;  \nroot2 = T2[i].s[0];  \n}else{  \nif(T2[i].s[1]){root2 = T2[i].s[1];T2[T2[i].s[1]].p = 0;}  \nelse           root2 = 0;  \n}  \nT2[i].num = T2[i].p = T2[i].s[0] = T2[i].s[1] = T2[i].v = 0;  \n}  \n  \nint Min(int root2){  \nint Next = T2[root2].s[0];  \nif(!Next) return T2[root2].v;  \nwhile(T2[Next].s[0]) Next =T2[Next].s[0];  \nreturn T2[Next].v;  \n}  \n  \nint find(int V,int i){  \nif(V==T2[i].v) return i;  \nelse           return find(V,T2[i].s[V>T2[i].v]);  \n}  \n  \nvoid Build1(int l,int r,int &i,int p){  \nif(l>r) return;  \nint m = (l+r) >> 1;  \nT1[i=++tot1].p = p; T1[i].v = A[m]; T1[i].num++;  \nBuild1(l,m-1,T1[i].s[0],i);  \nBuild1(m+1,r,T1[i].s[1],i);  \n}  \n  \nvoid Build2(int l,int r,int &i,int p){  \nif(l>r) return;  \nint m = (l+r) >> 1;  \nT2[i=++tot2].p = p; T2[i].v = Last[m];T2[i].num++;  \nBuild2(l,m-1,T2[i].s[0],i);  \nBuild2(m+1,r,T2[i].s[1],i);  \n}  \n  \nint main(){  \nn = read(); m = read();  \nrep(i,n){  \nA[i] = read();  \nif(i>1) Last[i-1] = abs(A[i] - A[i-1]);  \n}  \nsort(Last+1,Last+n);  \nBuild2(1,n-1,root2,0);  \nrep(i,n) Last[i] = A[i];  \nsort(A+1,A+n+1);For(i,1,n-1) MSG=min(MSG,abs(A[i]-A[i+1]));  \nBuild1(1,n,root1,0);  \nrep(i,n) A[i] = Last[i];   \nchar op[20];int troot;  \nrep(i,m){  \nscanf(\"%s\",&op);  \nif(op[0]=='I'){  \nkth = read() , val = read();  \nif(kth<n) {  \ntroot = find(abs(Last[kth]-A[kth+1]),root2);  \nDelete(troot);  \n}  \nInsert_2(abs(val-Last[kth]),root2);  \nif(kth<n) Insert_2(abs(val-A[kth+1]),root2);  \nInsert_1(val,root1);  \nLast[kth] = val;  \ncontinue;  \n}  \nif(op[4]=='S') printf(\"%d\\n\",MSG);  \nif(op[4]=='G') printf(\"%d\\n\",Min(root2));  \n}  \n//printf(\"%d\\n\",cnt);  \nreturn 0;  \n}\n\n```",
        "postTime": 1430265107,
        "uid": 5680,
        "name": "\u4e0a\u8fdb\u7684z\u541b",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1110 \u3010[ZJOI2007]\u62a5\u8868\u7edf\u8ba1\u3011"
    }
]