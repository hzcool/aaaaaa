[
    {
        "content": "\u601d\u8def\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u5b8c\u5168\u6ca1\u6709\u84dd\u9898\u7684\u96be\u5ea6\u3002\n\n\u8003\u8651bfs\uff0c\u6bcf\u9047\u5230\u4e00\u4e2a\u70b9\u5c31\u5f80\u5916\u5e7f\u5ea6\u641c\u7d22\uff0c\u53bb\u627e\u6700\u8fd1\u7684\u70b9\u3002\n\n\u65f6\u95f4\u770b\u8d77\u6765\u6bd4\u8f83\u591a\uff0c\u4f46\u5230\u4e86\u540e\u9762\u6709\u5f88\u591a\u6811\uff0c\u6bcf\u4e2a\u70b9\u7684\u65f6\u95f4\u662f\u975e\u5e38\u5feb\u7684\uff0c\u518d\u52a0\u70b9\u4f18\u5316\uff0c\u65f6\u95f4\u5176\u5b9e\u5dee\u4e0d\u591a\u662fO(g)\u7684\u3002\n\n\u5177\u4f53\u8bf7\u89c1\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\nstruct node\n{\n\tint x,y;\n}now,nex;\nconst int dir[4][2] = {0,-1,-1,0,0,1,1,0};\nchar a[505][505];\nint r,s,g;\nbool vis[505][505];\nint f(int x1,int y1,int x2,int y2)//\u7b97\u8ddd\u79bb \n{\n\treturn (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1);\n}\nint bfs(int x,int y)//bfs\u6a21\u677f\u4e0d\u7528\u591a\u8bb2\u5427 \n{\n\tmemset(vis,0,sizeof vis);\n\tqueue<node> que;\n\tint ans = 0x7ffffff;\n\tnow.x = x;now.y = y;\n\tque.push(now);\n\twhile(!que.empty())\n\t{\n\t\tnow = que.front();\n\t\tque.pop();\n\t\tif(f(now.x,now.y,x,y)>ans)continue;//\u6bd4\u6700\u5c0f\u503c\u5927\u5c31\u6ca1\u5fc5\u8981\u679a\u4e3e\u4e0b\u53bb\u4e86\uff08\u4f18\u5316\uff09 \n\t\tfor(int i = 0;i < 4;i++)\n\t\t{\n\t\t\tint xx = now.x+dir[i][0];\n\t\t\tint yy = now.y+dir[i][1];\n\t\t\tif(xx<1||xx>r||yy<1||yy>s||vis[xx][yy])continue;\n\t\t\tvis[xx][yy] = 1;\n\t\t\tint s = f(xx,yy,x,y);\n\t\t\tif(s >= ans)continue;//\u540c\u4e0a \n\t\t\tif(a[xx][yy] == 'x')ans = s;//\u6ce8\u610f\u53ea\u6709\u662f\u5f53\u524d\u4f4d\u7f6e\u6709\u82f9\u679c\u6811\u624d\u66f4\u65b0\u7b54\u6848 \n\t\t\tnex.x = xx;nex.y = yy;\n\t\t\tque.push(nex);\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n//\tfreopen(\"jabuke.in\",\"r\",stdin);\n//\tfreopen(\"jabuke.out\",\"w\",stdout);\n\tcin >> r >> s;\n\tfor(int i = 1;i <= r;i++)\n\t\tfor(int j = 1;j <= s;j++)\n\t\t\tcin >> a[i][j];\n\tcin >> g;\n\twhile(g--)\n\t{\n\t\tint x,y;\n\t\tcin >> x >> y;\n\t\tif(a[x][y] == 'x')//\u5982\u679c\u8fd9\u4e2a\u70b9\u662fx\u5c31\u76f4\u63a5\u8f93\u51fa0\uff08\u4f18\u5316\uff09 \n\t\t{\n\t\t\tcout << \"0\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tcout << bfs(x,y) << endl;\n\t\ta[x][y] = 'x';//\u4e00\u5b9a\u8981\u8bb0\u5f97 \n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1625823294,
        "uid": 167465,
        "name": "max0810",
        "ccfLevel": 6,
        "title": "P7663"
    },
    {
        "content": "# Foreword\n\n~~\u83ab\u540d\u5176\u5999\u62ff\u5230\u4e86\u6700\u4f18\u89e3\uff0c\u8c03\u4e86\u8c03\u53c2\u6570\u8fd8\u8dd1\u7684\u98de\u5feb\u3002~~\n\n\u8fd9\u4e48\u6a21\u677f\u7684\u9898\u5c45\u7136\u6ca1\u4eba\u53d1 KD-Tree \u7684\u505a\u6cd5\uff0c\u8fd9\u5c31\u6765\u53d1\u4e00\u7bc7 KD-Tree \u7684\u9898\u89e3\u3002\n\n\n# Problem\n\n\u9898\u76ee\u8bf4\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e00\u4e2a\u70b9\uff0c\u8be2\u95ee\u8ddd\u79bb\u8fd9\u4e2a\u70b9\u7684\u6700\u8fd1\u70b9\u3002\n\n\u5e76\u4e14\u6bcf\u6b21\u8be2\u95ee\u540e\u8fd8\u8981\u63d2\u5165\u8fd9\u4e2a\u70b9\u3002\n\n# Solution\n\n\u4e00\u9053 KD-Tree \u6a21\u677f\u9898\u3002\n\n\u8be2\u95ee\u6700\u8fd1\u70b9\u5bf9\u76f4\u63a5\u53ef\u4ee5\u8003\u8651 KD-Tree \u4e71\u641e\uff0c\u8be6\u7ec6\u6765\u8bf4\u53ef\u4ee5\u89c1[P1429 \u5e73\u9762\u6700\u8fd1\u70b9\u5bf9\uff08\u52a0\u5f3a\u7248\uff09](https://www.luogu.com.cn/problem/P1429)\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u8981\u52a8\u6001\u52a0\u5165\u70b9\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u5176\u5b9e\u8fd9\u4e5f\u662f KD-Tree \u7684\u5e38\u7528\u5957\u8def\uff0c\u5bf9\u4e8e KD-Tree \u52a8\u6001\u52a0\u70b9\uff0c\u5176\u5b9e\u6211\u4eec\u53d1\u73b0 KD-Tree \u5982\u679c\u76f4\u63a5\u66b4\u529b\u63d2\u5165\uff0c\u590d\u6742\u5ea6\u5e76\u4e0d\u4f18\uff0c\u4f1a\u7834\u574f\u6389\u539f\u672c\u7684\u5f62\u6001\uff0c\u4ece\u800c\u4f7f\u5f97\u6548\u7387\u964d\u4f4e\u3002\n\n\u50cf\u8fd9\u79cd\u53ea\u80fd\u4e00\u6b21\u6784\u5efa\uff0c\u591a\u6b21\u63d2\u5165\u540e\u4f1a\u7834\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u5b9e\u5927\u591a\u53ef\u4ee5\u5229\u7528\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3\uff0c\u901a\u8fc7\u201c\u66b4\u529b\u91cd\u6784\u201d\u6765\u7ef4\u6301\u539f\u672c\u4e0d\u9519\u7684\u7ed3\u6784\uff0c\u540c\u65f6\u91cd\u6784\u7684\u590d\u6742\u5ea6\u4e5f\u4e0d\u662f\u5f88\u9ad8\u3002\n\n\u81f3\u6b64\uff0c\u8be2\u95ee\u5e73\u9762\u5185\u8ddd\u79bb\u4e00\u4e2a\u70b9\u6700\u8fd1\u7684\u70b9\u7684\u8ddd\u79bb\uff0c\u4ee5\u53ca\u52a8\u6001\u52a0\u5165\u4e00\u4e2a\u70b9\u4e24\u4e2a\u64cd\u4f5c\u6211\u4eec\u90fd\u53ef\u4ee5\u7ef4\u62a4\u4e86\uff0c\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O($ \u7384\u5b66 $)$ \u7684\uff08\u4e5f\u5c31\u662f\u6700\u574f $O(n)$ \u5355\u6b21\u67e5\u8be2\uff09\uff0c\u56e0\u4e3a\u8be2\u95ee\u64cd\u4f5c\u662f\u7c7b\u4f3c\u542f\u53d1\u5f0f\u641c\u7d22\u4e00\u6837\u7684\u590d\u6742\u5ea6\uff0c\u65e0\u6cd5\u4f30\u8ba1\uff0c\u4f46\u662f\u4ece\u4e00\u822c\u9898\u76ee\u7684\u8868\u73b0\u6765\u8bf4\u5b9e\u9645\u8fd0\u884c\u6548\u7387\u4e0d\u9519\uff08\u5927\u81f4\u53ef\u4ee5\u4ece\u90a3\u9053\u52a0\u5f3a\u7248\u6765\u4f30\u8ba1\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6548\u7387\uff09\u3002\n\n\n# Code\n\n\u7b14\u8005\u76f4\u63a5\u628a\u6a21\u677f\u7ed9\u62f7\u8fc7\u6765\u4e86\u3002\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u4e0d\u91cd\u6784\u4e5f\u53ef\u4ee5\uff0c\u56e0\u4e3a\u53cd\u6b63\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u90fd\u662f\u4e0d\u592a\u6b63\u786e\u7684\u3002\n\n\u4f46\u662f\u4f3c\u4e4e\u91cd\u6784\u4e86\u8981\u66f4\u5feb\u4e00\u70b9\uff0c\u8fd9\u91cc\u5e73\u8861\u56e0\u5b50\u53d6\u5230 0.93 \u6548\u7387\u4f18\u79c0\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\ninline void read(T &x) {\n    x = 0;\n    char ch = getchar();\n    bool f = false;\n\n    while (!isdigit(ch)) {\n        if (ch == '-') {\n            f = true;\n        }\n\n        ch = getchar();\n    }\n\n    while (isdigit(ch)) {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n\n    x = f ? -x : x;\n    return ;\n}\ntemplate <typename T>\ninline void write(T x) {\n    if (x < 0)\n        putchar('-'), x = -x;\n\n    if (x > 9)\n        write(x / 10);\n\n    putchar(x % 10 ^ 48);\n    return ;\n}\n\nconst int N = 2e5 + 5, INF = 1e9 + 7;\nconst double alpha = 0.93;// KD-Tree \u5e73\u8861\u56e0\u5b50 \n\nnamespace KDTree {\n\t\nint root, cnt, cmptype;\n\nint rub[N], Top, cur;\n\nstruct point {\n    int d[2], id;\n} p[N];\n\nstruct node {\nint siz;\nint Min[2], Max[2];\nint lc, rc;\npoint tp;\nbool operator < (const node &k1)const {return tp.d[cmptype] < k1.tp.d[cmptype];}\n#define d(x,i) t[x].tp.d[i]\n#define Min(x,i) t[x].Min[i]\n#define Max(x,i) t[x].Max[i]\n#define lc(x) t[x].lc\n#define rc(x) t[x].rc\n#define siz(x) t[x].siz\n#define val(x) t[x].tp.val\n#define tp(x) t[x].tp\n} a[N], t[N];\ninline void Init() {\n    root = 0;\n    Max(root, 0) = Max(root, 1) = -INF, Min(root, 0) = Min(root, 1) = INF;\n    return ;\n}\ninline int NewNode() {\n    if (Top)\n        return rub[Top--];\n    else\n        return ++cur;\n}\ninline void Pushup(int x) {\n    siz(x) = 1;\n\n    if (lc(x))\n        siz(x) += siz(lc(x));\n\n    if (rc(x))\n        siz(x) += siz(rc(x));\n\n    for (int i = 0; i < 2; i++)\n        Min(x, i) = Max(x, i) = d(x, i);\n\n    for (int i = 0; i < 2; i++) {\n        if (lc(x)) {\n            Min(x, i) = min(Min(x, i), Min(lc(x), i)),\n            Max(x, i) = max(Max(x, i), Max(lc(x), i));\n        }\n\n        if (rc(x)) {\n            Min(x, i) = min(Min(x, i), Min(rc(x), i)),\n            Max(x, i) = max(Max(x, i), Max(rc(x), i));\n        }\n    }\n\n    return ;\n}\ninline bool cmp(point x, point y) {\n    return x.d[cmptype] < y.d[cmptype];\n}\nvoid Build(int &x, int l, int r, int type) {\n    if (l > r)\n        return x = 0, void();\n\n    int mid = (l + r) >> 1;\n    cmptype = type, x = NewNode();\n    nth_element(p + l, p + mid, p + r + 1, cmp), tp(x) = p[mid];\n    Build(lc(x), l, mid - 1, type ^ 1);\n    Build(rc(x), mid + 1, r, type ^ 1);\n    Pushup(x);\n    return ;\n}\nvoid dfs(int x, int num) {\n    if (lc(x))\n        dfs(lc(x), num);\n\n    p[siz(lc(x)) + num + 1] = tp(x), rub[++Top] = x;\n\n    if (rc(x))\n        dfs(rc(x), num + siz(lc(x)) + 1);\n\n    return ;\n}\ninline bool Balanced(int x) {\n    return (double)max(siz(lc(x)), siz(rc(x))) <= (double)siz(x) * alpha;\n}\nvoid Rebuild(int &x, int now) {\n    dfs(x, 0);\n    Build(x, 1, siz(x), now);\n    return ;\n}\nvoid Modify(int &x, point v, int now) {\n    if (!x)\n        return x = NewNode(), lc(x) = rc(x) = 0, tp(x) = v, Pushup(x), void();\n\n    if (!now)\n        Modify(v.d[0] <= d(x, 0) ? lc(x) : rc(x), v, now ^ 1);\n    else\n        Modify(v.d[1] <= d(x, 1) ? lc(x) : rc(x), v, now ^ 1);\n\n    Pushup(x);\n\n    if (!Balanced(x))\n        Rebuild(x, now);\n\n    return ;\n}\ninline int Dis(node k1, node k2) {\n    return abs(k1.tp.d[0] - k2.tp.d[0]) + abs(k1.tp.d[1] - k2.tp.d[1]);\n}\nnode T, Q;\nint Ans;\nint GuessMin(int x) {\n    if (x == 0)\n        return INF;\n\n    int res = 0;\n\n    for (int i = 0; i < 2; i++) {\n        res += max(Min(x, i) - T.tp.d[i], 0),\n               res += max(T.tp.d[i] - Max(x, i), 0);\n    }\n\n    return res;\n}\ninline int Distance(node x, node y) {\n    return (x.tp.d[0] - y.tp.d[0]) * (x.tp.d[0] - y.tp.d[0]) + (x.tp.d[1] - y.tp.d[1]) * (x.tp.d[1] - y.tp.d[1]);\n}\ninline int KGuessMin(int x) {\n    int res = 0;\n\n    if (!x)\n        return INT_MAX;\n\n    if (Min(x, 0) > Q.tp.d[0])\n        res += (Min(x, 0) - Q.tp.d[0]) * (Min(x, 0) - Q.tp.d[0]);\n\n    if (Max(x, 0) < Q.tp.d[0])\n        res += (Max(x, 0) - Q.tp.d[0]) * (Max(x, 0) - Q.tp.d[0]);\n\n    if (Min(x, 1) > Q.tp.d[1])\n        res += (Min(x, 1) - Q.tp.d[1]) * (Min(x, 1) - Q.tp.d[1]);\n\n    if (Max(x, 1) < Q.tp.d[1])\n        res += (Max(x, 1) - Q.tp.d[1]) * (Max(x, 1) - Q.tp.d[1]);\n\n    return res;\n}\nstruct Node {\n    int val;\n    int id;\n    inline bool operator < (const Node &B)const {\n        return (val == B.val) ? (id > B.id) : (val < B.val);\n    }\n    inline bool operator > (const Node &B)const {\n        return (val == B.val) ? (id < B.id) : (val > B.val);\n    }\n};\npriority_queue<Node>q;\nvoid KQueryMin(int x, int Now) {\n    if (!x)\n        return;\n\n    int now = Distance(Q, t[x]), dl = KGuessMin(lc(x)), dr = KGuessMin(rc(x));\n\n    if (now < Ans && t[x].tp.id != Now)\n        Ans = now;\n\n    if (dl < dr) {\n        if (dl < Ans)\n            KQueryMin(lc(x), Now);\n\n        if (dr < Ans)\n            KQueryMin(rc(x), Now);\n    } else {\n        if (dr < Ans)\n            KQueryMin(rc(x), Now);\n\n        if (dl < Ans)\n            KQueryMin(lc(x), Now);\n    }\n\n    return ;\n}\nvoid FindKthMin(int x, int y, int k, int qid) {\n    Q.tp.d[0] = x, Q.tp.d[1] = y;\n    KQueryMin(root, qid);\n    return ;\n}\n};\nusing namespace KDTree;\nint n, k, m, g, pos[N];\nchar str[N];\nsigned main() {\n    read(n);\n    read(m);\n    Init();\n\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%s\", str + 1);\n\n        for (int j = 1; j <= m; j++)\n            if (str[j] == 'x')\n                p[++cnt].d[0] = i, p[cnt].d[1] = j, p[cnt].id = cnt;\n    }\n\n    read(g);\n    Build(root, 1, cnt, 0);\n    Ans = INT_MAX;\n\n    for (int i = 1 + cnt, x, y; i <= g + cnt; i++) {\n        read(x), read(y);\n        Ans = INT_MAX;\n        FindKthMin(x, y, 1, i);\n        write(Ans), putchar('\\n');\n        Modify(root, (point) {\n            x, y, 1\n        }, 0);\n    }\n\n    return 0;\n}\n```\n\n",
        "postTime": 1629534500,
        "uid": 555420,
        "name": "GuuGuu",
        "ccfLevel": 0,
        "title": "P7663 [COCI2014-2015#5] JABUKE\u9898\u89e3"
    },
    {
        "content": "\u9898\u89e3\u4e00\u8840\uff0c\u7eaa\u5ff5\u4e00\u4e0b\u3002\n\n\u8003\u8651\u8bbe\uff1a\n\n- $up[i,j]$ \u4e3a\u70b9 $(i,j)$ \u6b63\u4e0a\u65b9\u6700\u8fd1\u7684\u82f9\u679c\u6811\u7684\u884c\u53f7\u3002\n\n- $low[i,j]$ \u4e3a\u70b9 $(i,j)$ \u6b63\u4e0b\u65b9\u4e0b\u9762\u6700\u8fd1\u7684\u82f9\u679c\u6811\u7684\u884c\u53f7\u3002\n\n\u90a3\u6211\u4eec\u5728\u8be2\u95ee $(x,y)$ \u6700\u8fd1\u70b9\u7684\u8ddd\u79bb\u65f6\uff0c\u6211\u4eec\u8003\u8651\u5728\u679a\u4e3e\u7b2c $y$ \u884c\u7684\u6240\u6709\u70b9 $j$\uff0c\u5219\u7b54\u6848\u4e3a $\\min_{j=1}^m(\\operatorname{dis}[(up[x,j],y),(x,y)],\\operatorname{dis}([low[x,j],y),(x,y)])$\n\n\u518d\u8003\u8651\u9884\u5904\u7406 $up$ \u548c $low$\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u5217\uff0c\u5bf9\u4e8e\u7b2c $j$ \u5217\uff0c\u6211\u4eec\u4ece\u4e0a\u5230\u4e0b\u66f4\u65b0 $up$\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0 $low$\uff0c\u81f3\u4e8e\u600e\u4e48\u66f4\u65b0\uff0c\u6211\u4eec\u8bb0\u4e00\u4e2a\u4e0a\u6b21\u7684\u82f9\u679c\u6811\u7684\u884c\u53f7\uff0c\u9047\u5230\u4e00\u4e2a\u82f9\u679c\u6811\u7acb\u523b\u66f4\u65b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $up$ \u548c $low$ \u90fd\u66f4\u65b0\u4e3a\u6807\u8bb0\u7684\u503c\u3002\n\n\u522b\u5fd8\uff0c\u6bcf\u8be2\u95ee\u4e00\u6b21\uff0c\u4e5f\u9700\u8981\u66f4\u65b0\u52a0\u5165\u7684\u8fd9\u4e2a\u70b9\u6240\u5728\u7684\u8fd9\u4e00\u5217\u7684\u6240\u6709\u70b9\u7684 $up$ \u548c $down$ \u503c\u3002\n\n\u7136\u540e\u4e00\u9053\u6c34\u84dd\u5c31\u505a\u5b8c\u4e86\u3002",
        "postTime": 1624583182,
        "uid": 360511,
        "name": "UperFicial",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P7663 \u3010[COCI2014-2015#5] JABUKE\u3011"
    },
    {
        "content": "# \u524d\u8a00\uff1a\n\n\u6c34\u9898\u4e00\u9053~\n\n~~\u53ef\u4ee5\u8bf4\u662f\u5e7f\u641c\u7684\u6a21\u677f\u9898~~\u3002\n\n## [\u601d\u8def]:\n\n\u53ef\u4ee5\u53d1\u73b0 $1\\leq n,m \\leq 500,1 \\leq g \\leq 10^5$\u3002\n\n\u8003\u8651\u5e7f\u641c\u3002\u5177\u4f53\u7684\u5c31\u662f\u6bcf\u843d\u4e0b\u4e00\u4e2a\u70b9\u5c31\u62ff\u5e7f\u641c\u5f80\u5916\u641c\u7d22\uff0c\u53bb\u627e\u6700\u8fd1\u7684\u82f9\u679c\u6811\u3002\n\n\u5728\u7565\u5fae\u526a\u679d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982 $O(g)$ \u3002\n\n\u5177\u4f53\u7ec6\u8282\u770b\u4ee3\u7801\uff1a\n\n\n------------\n## Code:\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int N=505;\nint T,n,m,n_x,n_y;\nint fx[4][2]={{-1,0},{0,-1},{1,0},{0,1}};//\u65b9\u5411\u6570\u7ec4 \nint ans=1e9,res=1e9;\nbool vis[N][N];\nstruct node{\n\tint x,y;\n}last,now;\nchar a[N][N];\nint far(int x1,int y1,int x2,int y2){//\u6c42\u8ddd\u79bb \n\treturn (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n}\nint Bfs(int x,int y){//Bfs\u6a21\u677f \n\tans=1e9;\n\tmemset(vis,0,sizeof(vis));//\u521d\u59cb\u5316 \n\tqueue<node> q;\n\tnow.x=x;\n\tnow.y=y;\n\tq.push(now);\n\twhile(!q.empty()){\n\t\tnow = q.front();\n\t\tq.pop();\n\t\tif(far(now.x,now.y,x,y)>ans) continue;//\u5982\u679c\u8fd9\u6b21\u641c\u7d22\u5230\u7684\u82f9\u679c\u6811\u5df2\u7ecf\u5927\u4e8e\u7b54\u6848\u4e86\u5c31\u6ca1\u5fc5\u8981\u7ee7\u7eed\u641c\u4e86\u3002 \n\t\tfor(int i=0;i<4;i++){\n\t\t\tint xx=now.x+fx[i][0];//\u5f80\u4e0a\uff0c\u4e0b\uff0c\u5de6\uff0c\u53f3\u56db\u4e2a\u65b9\u5411\u641c\u7d22 \n\t\t\tint yy=now.y+fx[i][1];\n\t\t\tif(xx>=1 && xx<=n && yy>=1 && yy<=m && vis[xx][yy]==0){\n\t\t\t\tvis[xx][yy]=1;\n\t\t\t\tint s=far(xx,yy,x,y);\n\t\t\t\tif(s>=ans) continue;//\u540c\u6837\u526a\u679d \n\t\t\t\tif(a[xx][yy]=='x') ans=s;\n\t\t\t\t//\u53ea\u6709\u8fd9\u4e2a\u70b9\u662f\u82f9\u679c\u6811\u65f6\u624d\u80fd\u7b97\u51fa\u7b54\u6848\u3002 \n\t\t\t\tlast.x=xx;\n\t\t\t\tlast.y=yy;\n\t\t\t\tq.push(last);//\u538b\u5165\u5bf9\u5217 \n\t\t\t}\n\t\t}\t\n\t}return ans;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tcin >> a[i][j]; \n\t\t}\n\t}\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tscanf(\"%d%d\",&n_x,&n_y);\n\t\tif(a[n_x][n_y]=='x'){\n\t\t\tprintf(\"0\\n\");\n\t\t\ta[n_x][n_y]='x';\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%d\\n\",Bfs(n_x,n_y));\n\t\ta[n_x][n_y]='x';//\u660e\u5e74\u8fd8\u662f\u53ef\u4ee5\u957f\u51fa\u82f9\u679c\u6811\u7684~~ \n\t}\n\treturn 0;//\u534e\u4e3d\u7684\u7ed3\u675f \n}\n```\n",
        "postTime": 1679728987,
        "uid": 701254,
        "name": "Mu_leaf",
        "ccfLevel": 4,
        "title": "P7663 [COCI2014-2015#5] JABUKE"
    },
    {
        "content": "\u5e7f\u641c\u5927\u6cd5\u597d\u3002\n\n- \u6211\u4eec\u6709\u8ddd\u79bb\u8ba1\u7b97\u516c\u5f0f\uff1a$d=(\\Delta x)^2+(\\Delta y)^2$\u3002\u6bcf\u6b21\u82f9\u679c\u843d\u4e0b\u65f6\uff0c\u5f80\u56db\u4e2a\u65b9\u5411\u641c\uff0c\u627e\u5230\u6700\u8fd1\u7684\u82f9\u679c\u6811\u5c31\u505c\uff0c\u5c06\u8fd9\u4e2a\u5750\u6807\u6807\u8bb0\u4e3a\u4e00\u9897\u82f9\u679c\u6811\u3002\n\n- \u56e0\u4e3a $n,m\\leq500,g\\leq 10^5$ \u641c\u7d22\u5230\u540e\u671f\u5c31\u57fa\u672c\u4e0a\u5168\u662f\u6811\u4e86\uff0c\u518d\u7cca\u4e00\u70b9\u57fa\u672c\u7684\u526a\u679d\u4f18\u5316\u4f1a\u8dd1\u5f97\u5f88\u5feb\u3002\n\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n```cpp\ninline int bfs(int x,int y){\n\tmemset(vis,false,sizeof vis);\n\tqueue<node>Q;\n\tint ans=inf;\n\tnow.x=x,now.y=y,Q.push(now);\n\twhile(!Q.empty()){\n\t\tnow=Q.front(),Q.pop();\n\t\tif(dis(now.x,now.y,x,y)>ans)\n\t\t\tcontinue;\n\t\tfor(int i=0;i<4;i++){\n\t\t\tint X=now.x+dir[i][0],Y=now.y+dir[i][1];\n\t\t\tif(X<1 or X>n or Y<1 or Y>m or vis[X][Y])\n\t\t\t\tcontinue;\n\t\t\tvis[X][Y]=true;\n\t\t\tint s=dis(X,Y,x,y);\n\t\t\tif(s>=ans)\n\t\t\t\tcontinue;\n\t\t\tif(a[X][Y]=='x')\n\t\t\t\tans=s;\n\t\t\tnxt.x=X,nxt.y=Y,Q.push(nxt);\n\t\t}\n\t}\n\treturn ans;\n}\n```\n",
        "postTime": 1678585805,
        "uid": 450861,
        "name": "QcpyWcpyQ",
        "ccfLevel": 5,
        "title": "P7663 [COCI2014-2015#5] JABUKE \u9898\u89e3"
    }
]