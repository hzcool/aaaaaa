[
    {
        "content": "## \u9898\u89e3\n\n#### \u8fd9\u9053\u9898\u7b97\u662f\u4e00\u4e2a\u6298\u534a\u641c\u7d22(meet in the middle)\u7684\u597d\u9898\n\n[\u900f\u5f7b](https://www.cnblogs.com/ZAGER/p/9823171.html)\n\n\u5982\u679c\u5bf9\u6298\u534a\u641c\u7d22\u4e0d\u592a\u719f\u6089\uff0c\u53ef\u4ee5\u5148\u505a\u4e00\u9053\u8f83\u7b80\u5355\u7684\u9898  [CEOI2015 Day2]\u4e16\u754c\u51b0\u7403\u9526\u6807\u8d5b\n\n[BZOJ\u94fe\u63a5](https://www.lydsy.com/JudgeOnline/problem.php?id=4800)\u6216[\u6d1b\u8c37\u94fe\u63a5](https://www.luogu.org/problemnew/show/P4799)  \u9644\u52a0[my blog](https://www.cnblogs.com/ZAGER/p/9827160.html)\n\n\u8fd9\u9053\u9898\u6709\u4e09\u79cd\u72b6\u6001\n\n1. \u4e0d\u653e\u5165\u4efb\u4f55\u96c6\u5408\n2. \u653e\u5165\u5de6\u8fb9\u96c6\u5408\n3. \u653e\u5165\u53f3\u8fb9\u96c6\u5408\n\n\u5728\u641c\u7d22\u65f6\u5982\u4f55\u8868\u793a\u5462\uff0c\u6211\u4eec\u53ef\u4ee50,1,-1\u6765\u8868\u793a\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ndfs(dep+1,sum);\ndfs(dep+1,sum+v[dep]);\ndfs(dep+1,sum-v[dep]);\n```\n\n\u4f46\u662f\u6211\u4eec\u5f97\u5230\u7684\u7b54\u6848\u53ef\u80fd\u4f1a\u6709\u91cd\u590d\uff0c\u5c31\u662f\u6211\u4eec\u53ef\u80fd\u628a\u4e00\u4e2a\u6570\u9009\u5165\u5de6\u96c6\u5408\u6216\u53f3\u96c6\u5408\uff0c\u4f46\u662f\u90fd\u52a0\u5165\u4e86\u72b6\u6001\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5224\u91cd\u3002\n\n\u5982\u4f55\u53bb\u5224\u91cd\uff0c\u72b6\u6001\u538b\u7f29\uff0c\u538b\u62102\u8fdb\u5236\u53bb\u5224\u91cd\u3002\n\n\u6240\u4ee5\u641c\u7d22\u65f6\u8fd8\u8981\u53bb\u8bb0\u5f55\u72b6\u6001\uff0c\u7528\u4e00\u4e2a$vis$\u6570\u7ec4\u5224\u91cd\u3002\n\n```cpp\nif(!vis[a[l].state|b[r].state])\n\tvis[a[l].state|b[r].state]=1;//state\u8bb0\u5f55\u4e8c\u8fdb\u5236\u7684\u9009\u6570\u72b6\u6001  1\u8868\u793a\u9009 0\u8868\u793a\u6ca1\u9009\n```\n\n\u6700\u540e\u8981\u7edf\u8ba1\u7b54\u6848\uff0c\u6392\u5e8f\u540e\u53cc\u6307\u9488\u626b\u63cf\u4e00\u904d\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff0c\u6700\u540e\u522b\u5fd8\u4e86\u628a0\u7684\u90a3\u79cd\u65b9\u6848\u51cf\u53bb\u3002\n\n### code\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#define ll long long\n#define R register\n#define N 22\nusing namespace std;\ntemplate<typename T>inline void read(T &a){\n    char c=getchar();T x=0,f=1;\n    while(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n    a=f*x;\n}\nint n,v[N<<1],maxdep,cnta,cntb;\nbool vis[1<<N];\nll ans;\nstruct node{\n    int state,x;\n}a[1<<N],b[1<<N];\ninline bool cmp1(R node a,R node b){\n    return a.x<b.x;\n}\ninline bool cmp2(R node a,R node b){\n    return a.x>b.x;\n}\ninline void dfs(R int dep,R int sum,R int now,R int flg){\n    if(dep==maxdep+1){\n        if(!flg){\n            a[++cnta].x=sum;\n            a[cnta].state=now;\n        }\n        else{\n            b[++cntb].x=sum;\n            b[cntb].state=now;\n        }\n        return;\n    }\n    dfs(dep+1,sum,now,flg);\n    dfs(dep+1,sum+v[dep],now+(1<<(dep-1)),flg);\n    dfs(dep+1,sum-v[dep],now+(1<<(dep-1)),flg);\n}\nint main(){\n    read(n);\n    for(R int i=1;i<=n;i++)read(v[i]);\n    maxdep=n/2;dfs(1,0,0,0);\n    maxdep=n;dfs(n/2+1,0,0,1);\n    sort(a+1,a+1+cnta,cmp1);\n    sort(b+1,b+1+cntb,cmp2);\n    R int l=1,r=1;\n    while(l<=cnta&&r<=cntb){\n        while(-a[l].x<b[r].x&&r<=cntb)r++;\n        R int pos=r;\n        while(r<=cntb&&-a[l].x==b[r].x){\n            if(!vis[a[l].state|b[r].state]){\n                vis[a[l].state|b[r].state]=1;\n                ans++;\n            }\n            r++;\n        }\n        if(l<cnta&&a[l].x==a[l+1].x)r=pos;//\u76f8\u540c\u8ba9b\u6570\u7ec4\u7684\u6307\u9488\u56de\u6765\n        l++;\n    }\n    printf(\"%lld\\n\",ans-1);//\u51cf\u53bb\u4e00\u4e2a\u7a7a\u96c6\n    return 0;\n}\n```\n\n",
        "postTime": 1540160857,
        "uid": 87967,
        "name": "ZAGER",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3067 \u3010[USACO12OPEN]\u5e73\u8861\u7684\u5976\u725b\u7fa4Balanced Cow S\u2026\u3011"
    },
    {
        "content": "\u8fd9\u662f\u63d0\u4ea4\u8bb0\u5f55\u4e2d140ms\uff0c\u6700\u5feb\u7684\u7b97\u6cd5\u3002\n\n## \u76ee\u5f55\n1. \u9898\u610f\u89e3\u8bfb\n2. \u7b97\u6cd5\u601d\u60f3\n3. \u4ee3\u7801\u5c55\u793a\n4. \u4e60\u9898\u63a8\u8350\n\n## \u6b63\u6587\n#### 1.\u9898\u610f\u89e3\u8bfb\n\n\n------------\n\u5bf9\u4e8e\u6bcf\u4e2a\u4eba\u6211\u4eec\u6709\u4e09\u79cd\u9009\u62e9\uff0c\u4e0d\u53d6\u3001\u53d6\u51fa\u81f31\u961f\u3001\u53d6\u51fa\u81f32\u961f\u3002\u6211\u4eec\u5206\u522b\u7ed9\u8fd9\u51e0\u79cd\u60c5\u51b5\u8d4b\u503c\u4e3a0\u30011\u3001-1\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u7c7b\u4f3c\u4e8e\u7ed9\u6bcf\u4e2a\u4eba\u5206\u914d\u4e09\u4e2a\u6743\u503c\u4e2d\u7684\u4e00\u4e2a\uff0c\u548c\u4e3a0\u7684\u65b9\u6848\u6570\u3002\u4f46\u662f\u8fd9\u91cc\u8981\u6ce8\u610f\u9898\u4e2d\u95ee\u7684\u662f\uff1a\n **\u201c\u7ed9n\u4e2a\u6570\uff0c\u4ece\u4e2d\u4efb\u610f\u9009\u51fa\u4e00\u4e9b\u6570\uff0c\u4f7f\u8fd9\u4e9b\u6570\u80fd\u5206\u6210\u548c\u76f8\u7b49\u7684\u4e24\u7ec4\u3002\u6c42\u6709\u591a\u5c11\u79cd\u9009\u6570\u7684\u65b9\u6848\u3002\u201d**\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u67d0\u4e00\u7ec4\u6570\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u76f8\u7b49\u7684\u96c6\u5408\uff0c\u4e0d\u7ba1\u8fd9\u4e00\u7ec4\u53ef\u4ee5\u6709\u591a\u5c11\u79cd\u65b9\u6848\u5206\u6210\u4e24\u4e2a\u76f8\u7b49\u7684\u96c6\u5408\u90a3\u4e48\u8ba1\u6570\u52a0\u4e00\uff0c**\u800c\u4e0d\u662f\u6c42\u6240\u6709\u7684\u4e24\u4e2a\u96c6\u5408\u76f8\u7b49\u7684\u7ec4\u5408\u65b9\u6848\u6570**\u3002\n\n\u5927\u5bb6\u770b\u4e86\u5176\u4ed6\u9898\u89e3\u6216\u8005\u6839\u636e\u7ecf\u9a8c\u4e5f\u660e\u767d\u8fd9\u4e00\u9898\u7528\u4e8c\u5206\u641c\u7d22\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u53ef\u4ee5\u6bd4\u8f83\u8f7b\u677e\u641c\u5b8c\u3002\u4f46\u9ebb\u70e6\u5c31\u9ebb\u70e6\u5728\u5982\u4f55\u53bb\u91cd\uff1f\n\n\n------------\n#### 2. \u7b97\u6cd5\u601d\u60f3\n\n\n------------\n\u672c\u7b97\u6cd5\u7684 $bitset$ \u6570\u7ec4\u4e3a\u6838\u5fc3\uff0c\u5efa\u8bae\u5148\u884c\u4e86\u89e3\u3002\n\n\u6211\u4eec\u7684\u7b2c\u4e00\u90e8\u5206\u641c\u7d22\u4e3a $ldfs$\uff0c\u641c\u7d22\u6570\u7ec4\u4e0b\u68070\u5230 $mid-1$ \u7684\u6570\u636e\uff0c\u6211\u4eec\u6bcf\u5c42\u641c\u7d22\u5411\u4e0b\u4f20\u90123\u4e2a\u53d8\u91cf\u5206\u522b\u4e3a $k$\uff08\u6570\u7ec4\u4e0b\u6807\uff09,$cost$\uff08\u5f53\u524d\u6240\u9009\u62e9\u6570\u7684\u603b\u6743\u503c\uff09,$id$\uff08\u7531\u9009\u62e9\u7684\u6570\u6240\u7ec4\u6210\u7684\u4e8c\u8fdb\u5236 $key$\uff09\uff0c \u6bcf\u6b21\u641c\u7d22\u5230\u5e95\u540e\u8bb0\u5f55\u4e0b\u5bf9\u5e94\u603b\u6743\u503c $cost$ \u5e76\u628a\u5bf9\u5e94 $cost$ \u4e0b\u7684 $id$ \u6807\u8bb0\u4e3a1\u3002\n\n#### \u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nconst int maxN = 20, halfN = 10;\nint n,mid,ans, a[maxN];\nbitset<1 << halfN> vis[1 << halfN];\nmap<int, bitset<1 << halfN>> mp;\n\nvoid ldfs(int k, int cost, int id) {\n    if (k ==mid) {\n        mp[cost].set(id);//bitset\u4e2d\u7684set\uff08id\uff09\u610f\u601d\u662f\u628abitset\u6570\u7ec4\u4e2d\u7684id\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u8fd9\u91cc\u610f\u601d\u662f\u6807\u8bb0\u4e3a\u53bb\u8fc7\u3002\n        return;\n    }\n    ldfs(k + 1, cost, id);\n    ldfs(k + 1, cost + a[k], id | (1 << k));\n    ldfs(k + 1, cost - a[k], id | (1 << k));\n}\n```\n\u6211\u4eec\u7684\u7b2c\u4e8c\u90e8\u5206\u641c\u7d22\u4e3a $hdfs$,\u5176\u5728 $mid$ \u81f3 $n-1$ \u95f4\u641c\u7d22\u5176\u4e0e\u7b2c\u4e00\u90e8\u5206\u4e0d\u540c\u7684\u662f\u5728\u641c\u7d22\u5230\u5e95\u540e\u6211\u4eec\u9700\u8981\u627e\u5230\u641c\u7d22\u7b2c\u4e00\u90e8\u5206\u4e2d\u4e0e\u7b2c\u4e8c\u90e8\u5206 $cost$ \u76f8\u7b49\u7684\u6570\u636e\uff0c**\u7136\u540e\u8bb0\u5f55\u90a3\u4e9b\u6ca1\u88ab\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206**\u3002\n\n**\u4ee3\u7801\u5982\u4e0b\uff1a**\n```cpp\nvoid hdfs(int k, int cost, int id) {\n   \n    if (k == n) {\n        if (mp.count(cost)) { \n           \n            bitset<1 << halfN> s(mp[cost]);//\u62f7\u8d1d\u51fd\u6570 \n             s &= ~vis[id];//vis\u6570\u7ec4\u8868\u793a\u6b64id\u548c\u5176\u4ed6id1\u7ec4\u5408\u7684\u8bb0\u5f55\uff0c\u82e5\u7ec4\u5408\u8fc7\u5219vis[id]\u7684\u7b2cid1\u4f4d\u4e3a1\u3002\u8fd9\u4e00\u6b65\u64cd\u4f5c\u5c06s\u4e2d\u4e0evis[id]\u540c\u4e3a1\u7684\u4f4d\u8ba1\u4e3a0\uff0c\u610f\u601d\u5c31\u662f\u53bb\u91cd\u3002\n            ans += s.count();//s\u4e2d\u5269\u4f59\u7684\u4ecd\u4e3a1\u7684\u4f4d\u6570\u4e4b\u548c\u5373\u4e3a\u7b26\u5408\u6761\u4ef6\u7684\u7b54\u6848\u3002\n            vis[id] |= s;//\u628a\u4e0a\u9762\u8bb0\u5f55\u7b54\u6848\u7684s\u4e2d\u7684\u5bf9\u5e941\u5728vis[id]\u4e2d\u6807\u8bb0\uff0c\u8868\u793a\u8fd9\u4e2aid1\u5df2\u7ecf\u53bb\u8fc7\u3002\u4e3a\u63a5\u4e0b\u6765\u53bb\u91cd\u51c6\u5907\u3002\n        }\n        return;\n    }\n    hdfs(k + 1, cost, id);\n    hdfs(k + 1, cost + a[k], id | (1 << k-mid));\n    hdfs(k + 1, cost - a[k], id | (1 << k-mid));\n}\n```\n$main$ \u51fd\u6570\u90e8\u5206\u5927\u5bb6\u90fd\u770b\u5f97\u61c2\uff0c\u5c31\u4e0d\u7ec6\u8bf4\u4e86\uff0c\u53ea\u662f\u91cc\u9762\u7528\u4e86\u6b21 $sort$\uff0c\u7ecf\u9a8c\u8868\u660e\u5927\u90e8\u5206\u60c5\u51b5\u6392\u5e8f\u540e\u518d\u4e8c\u5206\u641c\u7d22\u4f1a\u66f4\u5feb\u3002\n\n\n------------\n#### 3. \u4ee3\u7801\u5c55\u793a\n\n\n------------\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nchar ch1;\ntemplate<class T>\ninline void rd(T& x) {\n\tx = 0; bool w = 0;\n\tch1 = getchar();\n\twhile (!isdigit(ch1)) { ch1 == '-' && (w = 1), ch1 = getchar(); }\n\twhile (isdigit(ch1)) { x = (x << 1) + (x << 3) + (ch1 & 15), ch1 = getchar(); }\n\tw && (x = (~x) + 1);\n}\ntemplate<class T>\ninline void wr(T x)\n{\n\tif (x < 0) x = -x, putchar('-');\n\tif (x < 10) {\n\t\tputchar(x + 48);\n\t\treturn;\n\t}\n\tT L = x / 10;\n\twr(L);\n\tputchar(x - ((L << 1) + (L << 3)) + 48);\n}\nconst int maxN = 20, halfN = 10;\nint n,mid,ans, a[maxN];\nbitset<1 << halfN> vis[1 << halfN];\nmap<int, bitset<1 << halfN>> mp;\n\nvoid ldfs(int k, int cost, int id) {\n    if (k ==mid) {\n        mp[cost].set(id);\n        return;\n    }\n    ldfs(k + 1, cost, id);\n    ldfs(k + 1, cost + a[k], id | (1 << k));\n    ldfs(k + 1, cost - a[k], id | (1 << k));\n}\nvoid hdfs(int k, int cost, int id) {\n   \n    if (k == n) {\n        if (mp.count(cost)) { \n           \n            bitset<1 << halfN> s(mp[cost]); \n             s &= ~vis[id];\n            ans += s.count();\n            vis[id] |= s;\n        }\n        return;\n    }\n    hdfs(k + 1, cost, id);\n    hdfs(k + 1, cost + a[k], id | (1 << k-mid));\n    hdfs(k + 1, cost - a[k], id | (1 << k-mid));\n}\nint main() {\n    cin >> n; mid = n >> 1;\n    for (int i = 0; i < n; ++i)\n        cin >> a[i];\n    sort(a, a + n);//\u52a0\u4e86\u66f4\u5feb\n    ldfs(0, 0, 0);\n    hdfs(mid, 0, 0);\n    cout << ans - 1 ;//\u53bb\u9664\u4e24\u4e2a\u90fd\u4e3a0\u7684\u60c5\u51b5\u6240\u4ee5\u51cf1\n    return 0;\n}\n```\n\n\n------------\n#### 4. \u4e60\u9898\u63a8\u8350\uff1a\n[Scales S](https://www.luogu.com.cn/problem/P5194)\uff0c[\u4e16\u754c\u51b0\u7403\u9526\u6807\u8d5b](https://www.luogu.com.cn/problem/P4799)\n\n\u6ce8\uff1a\u7b97\u6cd5\u601d\u60f3\u6765\u81ea[DataSailor](https://www.luogu.com.cn/user/8513#practice)\n\u7b14\u8005\u57fa\u4e8e\u5176\u601d\u60f3\u5728\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u7b49\u65b9\u9762\u4f18\u5316\uff0c\u6bd4\u539f\u4ee3\u7801\u7a0d\u5feb35ms\u3002\n\n",
        "postTime": 1612079421,
        "uid": 301126,
        "name": "NKU_AI_HMX",
        "ccfLevel": 0,
        "title": "Balanced Cow Subsets G"
    },
    {
        "content": "\u9996\u5148\uff0c\u4e00\u4e2a\u6709$20$\u5934\u5976\u725b\uff0c\u90a3\u4e48\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u5934\u5976\u725b\u6765\u8bf4\u6709$3$\u79cd\u72b6\u6001\uff0c\u653e\u5728\u4e00\u7ec4\uff0c\u653e\u5728\u53e6\u4e00\u7ec4\uff0c\u4e0d\u653e\u4efb\u4f55\u4e00\u7ec4\uff0c\u5982\u679c\u66b4\u529b\u679a\u4e3e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(3^n)>1E9$\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002\n\n\u8003\u8651\u5c06$n$\u5934\u5976\u725b\u5206\u4e3a\u4e24\u534a\uff0c\u6bcf\u7ec4\u5206\u522b\u66b4\u529b\u6c42\u89e3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(3^\\frac{n}{2})$\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u5047\u8bbe\u5728\u524d\u4e00\u534a\u4e2d\uff0c\u5728\u7b2c\u4e00\u7ec4\u4e2d\u653e\u7684\u6570\u7684\u548c\u4e3a$a$\uff0c\u5728\u7b2c\u4e8c\u7ec4\u4e2d\u653e\u7684\u6570\u4e3a$b$\u3002\n\n\u5047\u8bbe\u5728\u540e\u4e00\u534a\u4e2d\uff0c\u5728\u7b2c\u4e00\u7ec4\u4e2d\u653e\u7684\u6570\u7684\u548c\u4e3a$c$\uff0c\u5728\u7b2c\u4e8c\u7ec4\u4e2d\u653e\u7684\u6570\u4e3a$d$\u3002\n\n\u90a3\u4e48$a+c=b+d$\n\n\u7531\u4e8e\u6211\u4eec\u8981\u5bf9\u6bcf\u4e00\u534a\u5206\u5f00\u5904\u7406\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u540c\u4e00\u534a\u7684\u6570\u653e\u5728\u4e00\u8d77\u5904\u7406\uff0c\u5373\u79fb\u9879\u5f97$a-b=c-d$\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1\u5728\u6bcf\u4e00\u534a\u4e2d\u548c\u4e3a$a-b$\u7684\u65b9\u6848\u6709\u591a\u5c11\u4e2d\uff0c\u5728\u8fdb\u884c\u7ec4\u5408\u3002\n\n\u4e00\u4e2a\u6570\u88ab\u653e\u5165\u7b2c\u4e00\u7ec4\u4e2d\uff0c$a-b$\u7684\u503c\u53d8\u5927\uff0c\u5728\u7b2c\u4e8c\u7ec4\u4e2d\uff0c$a-b$\u7684\u503c\u53d8\u5c0f\uff0c\u5982\u679c\u4e0d\u653e\uff0c\u5219$a-b$\u4e0d\u53d8\uff0c\u6240\u4ee5\u7ef4\u62a4$a-b$\u7684\u503c\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,N,a[21],ans[2000001],s,tot;\nvector<int> p[2000001];\nmap<int,int> b;\nvoid dfs1(int x,int sum,int now){//\u5bf9\u524d\u4e00\u534a\u641c\u7d22\uff0cx\u8868\u793a\u5230\u4e86\u7b2c\u51e0\u4e2a\uff0csum\u8868\u793aa-b\u7684\u503c\uff0cnow\u8868\u793a\u72b6\u538b\uff0c\u53d6\u4e86\u90a3\u4e9b\u6570\n\tif(x>N){\n\t\tif(b[sum]==0) b[sum]=++tot;//\u79bb\u6563\u5316\n\t\tp[b[sum]].push_back(now);//\u653e\u5165\u65b9\u6848\n\t\treturn;\n\t}\n\tdfs1(x+1,sum+a[x],now|(1<<(x-1)));  //\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\n    dfs1(x+1,sum-a[x],now|(1<<(x-1)));  \n    dfs1(x+1,sum,now);\n} \nvoid dfs2(int x,int sum,int now){//\u5bf9\u540e\u4e00\u534a\u641c\u7d22\uff0c\u540c\u4e0a\n\tif(x>n){ \n\t\tint t=b[sum];\n\t\tif(t!=0)  for(int i=0;i<p[t].size();i++)  ans[p[t][i]|now]=1;//\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u5c06\u503c\u8d4b\u4e3a1\uff0c\u6ce8\u610f\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u65b9\u6848\u6570\u4e3a\u53d6\u6570\u7684\u65b9\u6848\u6570\u800c\u4e0d\u662f\u5206\u6570\u7684\u65b9\u6848\u6570\uff0c\u56e0\u6b64\u4e0d\u662f+1\u800c\u662f=1\n\t\treturn;\n\t}\n\tdfs2(x+1,sum+a[x],now|(1<<(x-1)));  \n    dfs2(x+1,sum-a[x],now|(1<<(x-1)));  \n    dfs2(x+1,sum,now);\n} \nint main(){\n\tscanf(\"%d\",&n); N=n/2;\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tdfs1(1,0,0);\n\tdfs2(N+1,0,0);\n\tfor(int i=1;i<=(1<<n);i++)s+=ans[i];\n\tprintf(\"%d\",s);\n} \n```\n",
        "postTime": 1614594393,
        "uid": 98490,
        "name": "houzhiyuan",
        "ccfLevel": 7,
        "title": "P3067\u3010Balanced Cow Subsets G\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u9898\u89e3\u5927\u90fd\u662f\u5c06\u641c\u5230\u7684\u4e24\u4e2a\u6570\u7ec4\u6392\u5e8f\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u5bfb\u627e\u5408\u6cd5\u7b54\u6848\u7684\u3002\u4f46\u662f\u5982\u679c\u524d\u4e00\u534a\u6570\u7ec4\u7684\u6709\u76f8\u540c\u7684\u503c\uff0c\u540e\u4e00\u534a\u7684\u6307\u9488\u5c31\u4e0d\u80fd\u79fb\u52a8\u4e86\uff0c\u800c\u524d\u4e00\u534a\u6570\u7ec4\u91cc\u76f8\u540c\u7684\u503c\u4e4b\u95f4\u5982\u679c\u76f4\u63a5\u7d2f\u52a0\u76f8\u540c\u7684\u7b54\u6848\uff0c\u53c8\u5bfc\u81f4\u91cd\u590d\uff0c\u6240\u4ee5\u53ea\u80fd\u5c06\u540e\u4e00\u534a\u7684\u6307\u9488\u79fb\u5230\u4e0a\u6b21\u7684\u4f4d\u7f6e\u518d\u8dd1\u4e00\u6b21\u3002\u53ef\u4ee5\u8bbe\u60f3\uff0c\u5982\u679c\u524d\u4e00\u534a\u6570\u7ec4\u7684\u6570\u5168\u90e8\u76f8\u540c\uff0c\u90a3\u4e48\u5c31\u5f88\u5bb9\u6613`TLE`\uff0c\u8fc7\u4e0d\u4e86\u52a0\u5f3a\u7248\u3002\n\n\u6211\u4eec\u6362\u4e2a\u89d2\u5ea6\u8003\u8651\uff0c`N`\u53ea\u6709\u533a\u533a20\uff0c\u6240\u6709\u9009\u6216\u4e0d\u9009\u7684\u65b9\u6848\u6570\u53ea\u6709$2^N\\ = \\ 1e6$\uff0c\u5982\u679c\u5728\u4e24\u6b21\u641c\u7d22\u5c31\u628a\u6bcf\u79cd\u9009\u7684\u60c5\u51b5\u53ef\u884c\u6027\u505a\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u3002\n\n\u7b2c\u4e00\u6b21\u641c\u7d22\u65f6\uff0c\u6211\u4eec\u8bb0\u5f55\u6bcf\u4e00\u79cd\u7ed3\u679c\u53ef\u4ee5\u88ab\u54ea\u4e9b\u7ec4\u5408\u62fc\u51fa\u6765\uff08`N == 20`\uff0c\u7ec4\u5408\u72b6\u6001\u662f\u53ef\u4ee5\u538b\u7f29\u7684\uff09\u3002\u5f53\u7136\u4e00\u79cd\u7ed3\u679c\u53ef\u80fd\u88ab\u591a\u4e2a\u7ec4\u5408\u62fc\u51fa\u6765\uff0c\u6240\u4ee5\u8981\u7528`vector`\u8bb0\u5f55\uff0c\u800c\u4e00\u4e2a\u7ed3\u679c\u4e5f\u53ef\u80fd\u5f88\u5927\uff0c\u9700\u8981\u7528`map`\u79bb\u6563\u5316\uff08\u7f16\u4e2a\u53f7\u5c31\u884c\uff0c\u4e0d\u7528\u6392\u5e8f\uff09\u3002\n\n\u90a3\u4e48\u7b2c\u4e8c\u6b21\u641c\u7d22\u65f6\uff0c\u6bcf\u5f53\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u7ed3\u679c`S`\uff0c\u6211\u4eec\u662f\u9700\u8981\u524d\u4e00\u534a\u4ea7\u751f`-S`\u7684\u603b\u548c\u6765\u5f97\u5230\u65b9\u6848\u7684\uff0c\u663e\u7136`-S`\u7684\u65b9\u6848\u5c31\u662f`S`\u7684\u65b9\u6848\u53cd\u8fc7\u6765\u800c\u5df2\uff0c\u662f\u5b8c\u5168\u7b49\u6548\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u904d\u5386\u7b2c\u4e00\u6b21\u641c\u5230\u7684\u6240\u6709\u80fd\u4f7f\u524d\u4e00\u534a\u7b97\u51fa`S`\u7684\u65b9\u6848\uff0c\u4ed6\u4eec\u7684\u7ec4\u5408\u4e0e\u540e\u4e00\u534a\u7684\u7ec4\u5408\u5e76\u5728\u4e00\u8d77\u5c31\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define MAX (2000000 + 7)\nusing namespace std;\n\nint N, mx, mc, ans, a[23], use[MAX];\n\nvector <int> d[MAX];\nmap <int, int> M;\n\nvoid DFS1(int i, int sum, int now)//now\u4e3a\u538b\u7f29\u72b6\u6001\uff0csum\u4e3a\u5f53\u524d\u548c \n{\n\tif (i > mx)\n\t{\n\t\tif (!M.count(sum)) M[sum] = ++mc;//\uff08\u4f2a\uff09\u79bb\u6563\u5316\n\t\td[M[sum]].push_back(now);//\u5f53\u524dnow\u53ef\u4ee5\u62fc\u51fasum\u7684\u548c \n\t\treturn;\n\t}\n\tDFS1(i+1, sum, now);\n\tDFS1(i+1, sum+a[i], now|(1<<(i-1)));\n\tDFS1(i+1, sum-a[i], now|(1<<(i-1)));\n}\n\nvoid DFS2(int i, int sum, int now)\n{\n\tif (i > N)\n\t{\n\t\tif (M.count(sum))\n\t\t{\n\t\t\tint x = M[sum];//\u5bfb\u627e\u524d\u4e00\u534a\u80fd\u62fc\u51fa-sum\u7684\u7ec4\u5408 \n\t\t\tfor (int i = 0; i < d[x].size(); i++)\n\t\t\t\tuse[d[x][i] | now] = 1;//\u4e24\u534a\u7ec4\u5408\u5c31\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u4e00\u4e2a\u7b54\u6848 \n\t\t}return;\n\t}\n\tDFS2(i+1, sum, now);\n\tDFS2(i+1, sum+a[i], now|(1<<(i-1)));\n\tDFS2(i+1, sum-a[i], now|(1<<(i-1)));\n}\n\nint main()\n{\n\tscanf(\"%d\", &N), mx = N >> 1;\n\tfor (int i = 1; i <= N; i++)\n\t\tscanf(\"%d\", a + i);\n\tDFS1(1, 0, 0), DFS2(mx + 1, 0, 0);\n\tfor (int i = 1; i <= 1<<N; i++)//\u904d\u5386\u6bcf\u4e00\u79cd \n\t\tans += use[i];\n\tprintf(\"%d\\n\", ans);\n}\n```",
        "postTime": 1571750084,
        "uid": 73489,
        "name": "NyaRu_Official",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3067 \u3010[USACO12OPEN]\u5e73\u8861\u7684\u5976\u725b\u7fa4Balanced Cow S\u2026\u3011"
    },
    {
        "content": "## \u4e09\u8fdb\u5236\u72b6\u6001\u538b\u7f29\u5199\u6cd5\r\n\r\n\r\n\u770b\u4e86\u4e00\u4e0b\u5176\u5b83\u9898\u89e3\uff0c\u4f3c\u4e4e\u6ca1\u6709\u8fd9\u79cd\u5199\u6cd5\uff0c\u6240\u4ee5\u53d1\u4e00\u7bc7\u9898\u89e3**\u63d0\u4f9b\u4e00\u4e2a\u65b0\u5199\u6cd5**\u3002\r\n\r\n\u7531\u4e8e\u53ef\u4ee5\u628a\u53cc\u5411\u7684\u4e24\u4e2a\u90e8\u5206\u5408\u5728\u4e00\u8d77\u5199\uff0c\u4ee3\u7801\u4f1a\u6bd4\u5927\u90e8\u5206\u641c\u7d22\u5199\u6cd5\u77ed\u4e0d\u5c11\uff0c\u53ea\u6709 $33$ \u884c\u3002\r\n\r\n\u53d1\u73b0\u6bcf\u4e2a\u6570\u5176\u5b9e\u6709 $3$ \u79cd\u72b6\u6001: $1$ \u7ec4\u3001 $2$ \u7ec4\u3001\u4e0d\u5206\u7ec4\u3002\r\n\r\n\u867d\u7136 $N$ \u5f88\u5c0f\u4f46\u76f4\u63a5\u679a\u4e3e\u662f $3^{20}$ \u4ecd\u7136\u65e0\u6cd5\u63a5\u53d7\u3002\r\n\r\n\r\n\u4f46\u662f $N$ \u786e\u5b9e\u5f88\u5c0f\uff0c\u8003\u8651\u600e\u4e48\u4f18\u5316\u7eaf\u66b4\u529b\u679a\u4e3e\uff0c\u4e0d\u96be\u60f3\u5230 meet in middle\u3002\r\n\r\n\u4f46\u8fd9\u91cc\u8bf4\u7684 meet in middle \u4e5f\u53ef\u4ee5\u7528\u72b6\u6001\u538b\u7f29\u6765\u5b9e\u73b0\uff0c\u679a\u4e3e\u662f\u4e09\u8fdb\u5236\u72b6\u6001\u538b\u7f29\uff0c\u5224\u91cd\u662f\u4e8c\u8fdb\u5236\u72b6\u6001\u538b\u7f29\u3002\r\n\r\n\r\n$f[0][i]$ \u5b58\u50a8\u8003\u8651\u524d\u4e00\u534a\u7684\u6570\uff0c\u5206\u6210\u4e24\u7ec4\u7684\u5dee\u503c\uff08 $1$ \u7ec4- $2$ \u7ec4\uff09\u662f  $i$ \u7684\u6240\u6709\u65b9\u6848\u3002\r\n\r\n\r\n$f[1][i]$ \u5b58\u50a8\u8003\u8651\u540e\u4e00\u534a\u7684\u6570\uff0c\u5206\u6210\u7684\u4e24\u7ec4\u7684\u5dee\u503c\u662f $i$ \u7684\u6240\u6709\u65b9\u6848\u3002\r\n\r\n\r\n\u4e09\u8fdb\u5236\u72b6\u538b DP \u5373\u53ef\u6c42\u51fa\u8fd9\u4e24\u4e2a\u6570\u7ec4\uff08\u7528 `unordered_map` \u5b9e\u73b0\uff09\u3002\r\n\r\n\r\n\u7136\u540e `for()` \u4e00\u904d\u7d2f\u52a0\u7b54\u6848\u5373\u53ef\uff0c\u9700\u8981\u5224\u91cd\u3002\r\n\r\n\r\n\u6ce8\u610f\u6c42\u7684\u662f\u9009\u6570\u7684\u65b9\u6848\u4e0d\u662f\u5206\u7ec4\u7684\u65b9\u6848\u3002\r\n\r\n\r\n## code\r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\nint n,B[2],a[22],pow3[12],ans;\r\nbool st[(1<<20)+5];\r\nunordered_map<int,vector<int> > f[2];\r\nint main()\r\n{\r\n    scanf(\"%d\",&n); \r\n    B[0]=(n/2),B[1]=n-B[0];//B[0] B[1]\u662f\u201c\u524d\u4e00\u534a\u201d \u540e\u4e00\u534a\u201c\u5927\u5c0f\uff08\u56e0\u4e3an\u53ef\u80fd\u662f\u5947\u6570 \u6240\u4ee5\u4e0d\u4e00\u5b9a\u76f8\u7b49\uff09\r\n    for(int i=0;i<n;i++) scanf(\"%d\",&a[i]);\r\n    pow3[0]=1;\r\n    for(int i=1;i<=B[1];i++) pow3[i]=pow3[i-1]*3;//B[1]>=B[0] \u5904\u7406\u5230B[1]\u5c31\u591f\u4e86\r\n    for(int t=0;t<=1;t++)\r\n        for(int s=0;s<pow3[B[t]];s++)\r\n        {\r\n            int d=0,S=(1<<B[0])-1;\r\n            if(t==1) S=((1<<n)-1)-S;\r\n            for(int i=0;i<B[t];i++)\r\n            {\r\n                int v=(s/pow3[i])%3; \r\n                if(v==1) d+=a[i+t*B[0]];\r\n                else if(v==2) d-=a[i+t*B[0]];\r\n                else S-=(1<<(i+t*B[0]));\r\n            }//i+t*B[0] \u5219t=0\u7684\u65f6\u5019\u5c31\u662fi,t=1\u7684\u65f6\u5019\u4f1a\u52a0\u4e0aB[0],\u5c31\u53ef\u4ee5\u628a\u4e24\u4e2a\u6570\u7ec4\u653e\u5230\u4e00\u8d77\u6c42\r\n            f[t][d].push_back(S);\r\n        }\r\n    for(pair<int,vector<int> > a:f[0])\r\n        for(int b:a.second)\r\n            for(int c:f[1][-a.first])\r\n                if(!st[c|b]) ans++,st[c|b]=1;\r\n    printf(\"%d\\n\",ans-1);\r\n    return 0;\r\n}\r\n```\r\n\r\n**\u5176\u5b9e\u4e5f\u6709\u5176\u5b83\u7684\u53cc\u5411\u641c\u7d22\u9898\u53ef\u4ee5\u7528\u72b6\u6001\u538b\u7f29\u5b9e\u73b0\u679a\u4e3e\u3002**\r\n\r\n\u6bd4\u5982 P4799 [CEOI2015 Day2] \u4e16\u754c\u51b0\u7403\u9526\u6807\u8d5b \u3002\r\n## code\r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nint n,B[2],cnt[2];\r\nll a[45],m,ans,f[2][(1<<20)+5];\r\nint main()\r\n{\r\n    scanf(\"%d%lld\",&n,&m); B[0]=(n/2);B[1]=n-B[0];\r\n    for(int i=0;i<n;i++) scanf(\"%lld\",&a[i]);\r\n    for(int t=0;t<=1;t++)\r\n    {\r\n        int up=(1<<B[t])-1;\r\n        for(int s=0;s<=up;s++)\r\n        {\r\n            ll val=0;\r\n            for(int i=0;i<B[t];i++)\r\n                if(s&(1<<i))\r\n                    val+=a[t*B[0]+i];\r\n            if(val<=m) f[t][++cnt[t]]=val;\r\n        }\r\n    }\r\n    sort(f[0]+1,f[0]+cnt[0]+1);\r\n    for(int i=1;i<=cnt[1];i++) \r\n        ans+=(upper_bound(f[0]+1,f[0]+cnt[0]+1,m-f[1][i])-f[0]-1);\r\n    printf(\"%lld\\n\",ans);\r\n    return 0;\r\n}\r\n```\r\n",
        "postTime": 1662268309,
        "uid": 546246,
        "name": "E_huan",
        "ccfLevel": 8,
        "title": "P3067 Balanced Cow Subsets G\u9898\u89e3"
    },
    {
        "content": "\u4ecb\u7ecd\u4e00\u79cd\u89e3\u8fd9\u9053\u9898\u7684\u65b0\u601d\u8def\uff1a$bitset$\u5f3a\u884c\u603c\u3002\n\n\u5148\u4ece\u66b4\u529b\u7b97\u6cd5\u5f00\u59cb\uff0c\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u96c6\u5408\u4ee5\u53ca\u4ed6\u4eec\u7684\u5b50\u96c6\uff0c\u5982\u679c\u53d1\u73b0\u5b50\u96c6\u4ee5\u53ca\u5176\u8865\u96c6\u7684\u548c\u76f8\u7b49\uff0c\u90a3\u4e48\u8fd9\u4e2a\u96c6\u5408\u5c31\u662f\u4e00\u79cd\u65b9\u6848\u3002\n\n\u66f4\u5177\u4f53\u7684\u8bf4\uff0c\u5047\u8bbe$P$\u662f\u539f\u96c6\u5408\uff0c$S$\u662f$P$\u7684\u6240\u6709\u5b50\u96c6\u3002\u5982\u679c$\\forall s\\in S$ \u7684\u5b50\u96c6\u6709 $sum(s) == sum(\\bar{s})$\uff0c\u90a3\u4e48$S$\u5c31\u8d21\u732e\u4e00\u4e2a\u7b54\u6848\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b\u7684\u4ee3\u7801\uff1a\n```cpp\n    for (int i = 1; i < (1 << n); i++) {\n        for (int s1 = i; s1; s1 = (s1 - 1) & i) {\n            if (sum[s1] == sum[i ^ s1]) {\n                ans++;\n                break;\n            }\n        }\n    }\n```\n\u5b50\u96c6\u6c42\u548c\u662f$O(n2^n)$\u4f46\u662f\u679a\u4e3e\u5b50\u96c6\u7684\u5b50\u96c6\u662f$O(3^n)$\u7684\uff0c\u663e\u7136\u4f1aTLE\u7684\u6b7b\u6b7b\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4f1a\u60f3\u5230\u6298\u534a\u679a\u4e3e\uff0c\u5047\u8bbe\u6211\u4eec\u80fd\u679a\u4e3e\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u7684\u6240\u6709\u5b50\u96c6\uff0c\u90a3\u4e48\u5e94\u8be5\u600e\u4e48\u786e\u5b9a\u54ea\u4e9b\u5b50\u96c6\u662f\u7b26\u5408\u6761\u4ef6\u7684\u5462\uff1f\n\n\u5047\u8bbe\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408$S_1$\u6211\u4eec\u6709\u4e00\u4e2a\u5b50\u96c6$s_1$\u548c\u8865\u96c6$\\bar{s_1}$\uff0c\u540c\u65f6\u6211\u4eec\u6709\u53e6\u4e00\u4e2a\u96c6\u5408$S_2$\u548c\u5b50\u96c6$s_2$\u548c$\\bar{s_2}$\uff0c\u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u80fd\u5408\u5e76\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u6709\n\n- $S_1 \\cap S_2 = \\emptyset$\n- $sum(s_1) + sum(s_2) == sum(\\bar{s_1}) + sum(\\bar{s_2})$\n\n\u7b2c\u4e00\u4e2a\u6761\u4ef6\u7528\u6298\u534a\u679a\u4e3e\u53ef\u4ee5\u4fdd\u8bc1\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6765\u8bf4\uff0c\u5047\u8bbe\u6211\u4eec\u6709$sum(s_1)-sum(\\bar{s_1})=d$\uff0c\u90a3\u4e48\u5982\u679c$sum(\\bar{s_2})-sum(s_2)=d$\uff0c\u90a3\u4e48\u5c31\u6ee1\u8db3\u4e86\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u5de6\u8fb9\u7684\u6240\u6709\u53ef\u80fd\uff0c\u7136\u540e\u8bb0\u5f55\u6709\u591a\u5c11\u4e2a\u96c6\u5408\u5177\u6709\u5dee\u503c$d$\u3002\u7136\u540e\u5728\u679a\u4e3e\u53f3\u8fb9\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u8fb9\u5b50\u96c6\uff0c\u627e\u5230\u5b83\u7684\u5b50\u96c6\u603b\u5171\u80fd\u5339\u914d\u591a\u5c11\u4e2a\u5de6\u8fb9\u5b50\u96c6\u3002\u4e3a\u4e86\u8868\u8ff0\u6e05\u6670\uff0c\u8bbe$S_l$\u4e3a\u5de6\u8fb9\u96c6\u5408\u7684\u5b50\u96c6\uff0c$S_r$\u4e3a\u53f3\u8fb9\u96c6\u5408\u7684\u5b50\u96c6\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u8fb9\u96c6\u5408\u7684\u5b50\u96c6$s_r \\subset S_r$\uff0c\u4ee5\u53ca\u5b83\u7684\u5b50\u96c6$ss_r \\subset s_r$\uff0c\u6211\u4eec\u8981\u6c42\uff1a\n$$\n\t\\sum_{s_r}|\\bigcap_{ss_r\\in s_r}\\{s_l\\text{\u4f7f\u5f97}ss_r\\text{\u53ef\u4ee5\u4e0e\u5de6\u8fb9\u5408\u5e76}\\}|\n$$\n\n\u6240\u4ee5\u6211\u4eec\u8981\u6c42\u5dee\u503c\u4e3a$d$\u96c6\u5408\u7684\u5e76\u96c6\uff0c\u4f46\u662f\u96c6\u5408\u4e2a\u6570\u6709$2^{\\frac{n}{2}}$\u4e2a\uff0c\u65e0\u6cd5\u7528\u72b6\u6001\u538b\u7f29($int$\u548clong long)\u8868\u793a\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u60f3\u5230\u4e86\u4f7f\u7528$bitset$\uff0c$2^{\\frac{n}{2}}$\u5728\u8fd9\u9053\u9898\u4e2d\u4ec5\u6709$1024$\uff0c$bitset$\u5b9e\u73b0\u4e2d\u6bcf\u4e2a\u96c6\u5408\u6240\u5360\u7a7a\u95f4\u4ec5\u6709$\\frac{1024}{8} = 128$\u5b57\u8282\u3002\n\n\u6211\u4eec\u518d\u6765\u8ba1\u7b97\u4e00\u4e0b\u603b\u5171\u53ef\u80fd\u4f1a\u6709\u591a\u5c11\u79cd\u5dee\u503c\uff0c\u4e0d\u597d\u8ba1\u7b97\u4f46\u662f\u53ef\u4ee5\u4f30\u7b97\u51fa\u662f\u5c0f\u4e8e$3^{10}=6\\times10^4$\u7684\uff0c\u4e5f\u5c31\u662f\u6700\u574f\u4e5f\u53ea\u662f$sum$\u6570\u7ec4\u7684\u5185\u5b58\u7ea7\u522b\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u4e00\u4e2amap<int,bitset<1024>>\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee5\u4e0b\u662f\u8fd9\u79cd\u89e3\u6cd5\u5bf9\u5e94\u7684\u4ee3\u7801\uff1a\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n2^n+3^{n/2}\\log{3^{n/2}})$\uff0c\u56e0\u4e3a\u6211\u7528\u4e86map\u3002\n```cpp\n#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <cstdio>\n#include <map>\nusing namespace std;\nconst int MAXN = 25;\nint n, m, k;\nint arr[MAXN];\nint sum[(1 << 20) + 5];\nmap<int, bitset<1024>> mpp;\nint main() {\n#ifdef LOCALLL\n    freopen(\"in\", \"r\", stdin);\n    freopen(\"out\", \"w\", stdout);\n#endif\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    // \u6c42\u51fa\u6240\u6709\u5b50\u96c6\u7684\u548c\n    for (int i = 0; i < (1 << n); i++) {\n        for (int j = 0; j < n; j++) {\n            if ((i >> j) & 1) sum[i] += arr[j];\n        }\n    }\n    // \u679a\u4e3e\u5de6\u8fb9\n    int mid = n / 2;\n    for (int i = 0; i < (1 << mid); i++) {\n        for (int s1 = i;; s1 = (s1 - 1) & i) {\n            mpp[sum[s1 ^ i] - sum[s1]].set(i, true);\n            if (!s1) break;\n        }\n    }\n    // \u679a\u4e3e\u53f3\u8fb9\n    int ans = 0;\n    for (int i = 0; i < (1 << (n - mid)); i++) {\n        bitset<1024> sss(0);\n        // \u8fd9\u91cc\u6211\u523b\u610f\u4fdd\u7559\u4e86\u5b50\u96c6\u4e3a\u7a7a\u7684\u60c5\u51b5\n        for (int s1 = i;; s1 = (s1 - 1) & i) {\n            int diff = sum[s1 << mid] - sum[(s1 ^ i) << mid];\n            sss |= mpp[diff];\n            if (!s1) break;\n        }\n        // \u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f\u8fd9\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\n        ans += sss.count();\n    }\n    // \u8981\u51cf\u53bb\u5de6\u8fb9\u53f3\u8fb9\u90fd\u662f\u7a7a\u96c6\u7684\u60c5\u51b5\n    printf(\"%d\\n\", ans - 1);\n    return 0;\n}\n```\n\n\n",
        "postTime": 1574374391,
        "uid": 36956,
        "name": "Mr_Skirt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3067 \u3010[USACO12OPEN]\u5e73\u8861\u7684\u5976\u725b\u7fa4Balanced Cow S\u2026\u3011"
    },
    {
        "content": "\u9996\u5148\u89c2\u5bdf\u6570\u636e\u8303\u56f4n<=20\uff0c\u53ef\u4ee5\u60f3\u5230\u641c\u7d22\u7b97\u6cd5\n\n\n\u8f6c\u5316\u4e00\u4e0b\u6a21\u578b\uff0c\u4e0d\u96be\u60f3\u5230\u8fd9\u9053\u9898\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u6765\u8bf4\u4f1a\u6709\u4e09\u79cd\u60c5\u51b5\n\n\n1.\u6ca1\u6709\u88ab\u9009\u62e9\n\n\n2.\u88ab\u9009\u62e9\u8fdb\u4e86\u5de6\u8fb9\u7684\u96c6\u5408\u91cc\n\n\n3.\u88ab\u9009\u62e9\u8fdb\u4e86\u53f3\u8fb9\u7684\u96c6\u5408\u91cc\n\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e09\u79cd\u60c5\u51b5\u7528-1,0,1\u8868\u793a\n\n\n\u90a3\u4e48\u6211\u4eec\u6240\u9700\u8981\u505a\u7684\u5c31\u662f\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u66b4\u529b\u7edf\u8ba1\n\n\n\u4f46\u662f3^n\u5f88\u660e\u663e\u662f\u4f1a\u8d85\u65f6\u7684\n\n\n\u90a3\u600e\u4e48\u529e\u7684\uff1f\n\n\n\u6211\u4eec\u53ef\u4ee5\u7528meet in the middle\u7684\u601d\u60f3\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u6298\u534a\u641c\u7d22\n\n\n\u5148\u679a\u4e3e\u5de6\u8fb9\u7684\u60c5\u51b5\n\n\n\u518d\u679a\u4e3e\u53f3\u8fb9\u7684\u60c5\u51b5\n\n\n\u6700\u540e\u628a\u4e24\u79cd\u60c5\u51b5\u6392\u4e2a\u5e8f\uff0c\u66b4\u529b\u7edf\u8ba1\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u7384\u5b66\n\n\u5927\u7ea6\u662f2.23^n?\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=21;\ninline void read(int &n)\n{\n    char c=getchar();bool flag=0;n=0;\n    while(c<'0'||c>'9')    c=='-'?flag=1,c=getchar():c=getchar();\n    while(c>='0'&&c<='9')    n=n*10+c-48,c=getchar();flag==1?n=-n:n=n;\n}\nint n;\nint a[MAXN];\nint vis[1<<MAXN];\nstruct node\n{\n    int val,cur;// val\u6743\u503c  cur\u72b6\u6001 \n}Left[1<<MAXN],Right[1<<MAXN];\nint LeftCnt=0,RightCnt=0;\nvoid dfs(int bg,int ed,int nowval,int nowstate)\n{\n    if(bg>ed)// \u672c\u6b21\u641c\u7d22\u5b8c\u6210\n    {\n        if(ed==n/2)    Left[++LeftCnt].val=nowval,Left[LeftCnt].cur=nowstate;\n        else Right[++RightCnt].val=nowval,Right[RightCnt].cur=nowstate;\n        return ;    \n    } \n    dfs(bg+1,ed,nowval,nowstate);// \u4e0d\u9009\n    dfs(bg+1,ed,nowval-a[bg],nowstate+(1<<(bg-1)));// \u9009\u4e86\u4e14\u653e\u5728\u5de6\u8fb9\u7684\u533a\u95f4\u91cc \n    dfs(bg+1,ed,nowval+a[bg],nowstate+(1<<(bg-1)));// \u9009\u4e86\u4e14\u653e\u5728\u53f3\u8fb9\u7684\u533a\u95f4\u91cc \n}\nint comp1(const node &a,const node &b){    return a.val<b.val;        }\nint comp2(const node &a,const node &b){    return a.val>b.val;        }\nint main()\n{\n    read(n);\n    for(int i=1;i<=n;i++)    read(a[i]);\n    dfs(1,n/2,0,0);\n    dfs(n/2+1,n,0,0);//\u5206\u5f00dfs\n    sort(Left+1,Left+LeftCnt+1,comp1); \n    sort(Right+1,Right+RightCnt+1,comp2);\n    int l=1,r=1,ans=0;\n    while(l<=LeftCnt&&r<=RightCnt)\n    {\n        while(Left[l].val+Right[r].val>0&&r<=RightCnt)    r++;\n        int pre=r;\n        while(Left[l].val+Right[r].val==0&&r<=RightCnt)    \n        {\n            if(vis[ Left[l].cur|Right[r].cur ] == 0)    vis[ Left[l].cur|Right[r].cur ]=1,    ans++;\n            r++;\n        }\n        if(Left[l].val==Left[l+1].val)/*\u4e00\u4e2a\u5c0f\u526a\u679d*/     r=pre;\n        l++;\n    }\n    printf(\"%d\",ans-1);\n    return 0;\n}\n```",
        "postTime": 1507974219,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3067 \u3010[USACO12OPEN]\u5e73\u8861\u7684\u5976\u725b\u7fa4Balanced Cow S\u2026\u3011"
    },
    {
        "content": "**\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u4e0d\u7528\u53cc\u6307\u9488\u7684\u5199\u6cd5**\n\n~~\u5176\u5b9e\u662f\u6211\u770b\u4e0d\u61c2\u53cc\u6307\u9488\u6240\u4ee5\u5199\u7684\u66b4\u529b~~\n\n------------\n## \u4e00\u3001\u6298\u534a\u641c\u7d22\n**\u9002\u7528\u60c5\u51b5** \uff1a\n1. \u77e5\u9053\u603b\u5171\u8981\u641c\u7d22\u7684\u6b65\u6570\u548c\u6700\u7ec8\u7684\u7b54\u6848\u72b6\u6001\u3002\n2. \u666e\u901a\u7684\u641c\u7d22\u96be\u4ee5\u901a\u8fc7\uff0c\u4e5f\u6ca1\u6709\u66f4\u597d\u7684\u505a\u6cd5\u3002\n\n\u62ff\u8fd9\u9898\u6765\u4e3e\u4f8b\u5b50\uff1a\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a $O(3^n)$ \u7684\u505a\u6cd5\uff1a\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u6570\u201c\u4e0d\u9009\u201d\uff0c\u201c\u653e\u8fdb $A$ \u7ec4\u201d\uff0c\u201c\u653e\u8fdb $B$ \u7ec4\u201d\u4e09\u79cd\u60c5\u51b5\u3002\n\n\u6240\u4ee5\u6211\u4eec\u77e5\u9053\u4e86\u603b\u5171\u8981\u641c\u7d22 $n$ \u6b65\uff0c\u90a3\u4e48\u8003\u8651\u628a\u8fd9 $n$ \u6b65\u5206\u6210 $2$ \u534a\u6765\u8d70\uff1a\n1. \u5148\u679a\u4e3e $ 1 \\sim n/2 $ \u4e2a\u6570\u7684\u72b6\u6001\u3002\n2. \u518d\u679a\u4e3e $ n/2+1 \\sim n $ \u4e2a\u6570\u7684\u72b6\u6001\u3002\n3. \u6c42\u51fa\u7b54\u6848\u3002\n\n\u5f53\u7136\u8fd9\u662f\u4e00\u4e2a\u5f88 $naive$ \u7684\u60f3\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u6837\u5b8c\u5168\u6ca1\u8003\u8651\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u600e\u4e48\u5224\u91cd\u5462\uff1f\u8fd9\u5c31\u662f\u63a5\u4e0b\u6765\u8981\u8bb2\u7684\uff1a\n\n## \u4e8c\u3001\u66b4\u529b\u5224\u91cd\n\u5bf9\uff0c\u5c31\u662f\u66b4\u529b\u5224\u91cd\uff0c\u6ca1\u6709\u4ec0\u4e48\u82b1\u91cc\u80e1\u54e8\u7684\u4e1c\u897f\u3002\n\n\u6211\u4eec\u5728 `dfs` \u65f6\uff0c\u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u8bb0\u5f55\u53d6\u6570\u7684\u60c5\u51b5\u3002\n\n\u7136\u540e\u6bcf\u6b21\u5728\u641c\u7d22\u5b8c\u540e\uff0c\u6309\u7167\u5b83\u7684\u503c\u5b58\u5165\u4e00\u4e2a `map` \u4e2d\uff0c\u6700\u540e\u66b4\u529b\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=21;\nint n,a[N],ans;\nmap<int,vector<int> > m;\nbool s[1<<20];\nvoid dfs(int x,int sum,int t)\n{\n\tif(x>n/2)\n\t{\n\t\tm[sum].push_back(t);//\u628a\u80fd\u5230\u8fbe sum \u7684\u72b6\u6001\u5b58\u8d77\u6765\n\t\treturn ;\n\t}\n\tdfs(x+1,sum,t);\t\t     // \u4e0d\u9009\u7684\u8bdd sum \u4e0d\u53d8\n\tdfs(x+1,sum+a[x],t|1<<x-1);// \u653e\u5165 A \u7ec4\u5c31\u662f sum+a[x]\n\tdfs(x+1,sum-a[x],t|1<<x-1);// \u653e\u5165 B \u7ec4\u5c31\u662f sum-a[x]\n}\nvoid dfs2(int x,int sum,int t)\n{\n\tif(x>n)\n\t{\n\t\tif(!m.count(sum)) return ;\n\t\tint r=m[sum].size();\n\t\tfor(int i=0;i<r;i++)\n\t\t\ts[t|m[sum][i]]=1;//\u628a 2 \u6b21\u641c\u7d22\u7684\u72b6\u6001\u5408\u5e76\u8d77\u6765\n\t\treturn ;\n\t}\n\tdfs2(x+1,sum,t);\n\tdfs2(x+1,sum+a[x],t|1<<x-1);\n\tdfs2(x+1,sum-a[x],t|1<<x-1);\n}\nsigned main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tdfs(1,0,0);\n\tdfs2(n/2+1,0,0);\n\tfor(int i=1;i<1<<n;i++)//\u679a\u4e3e\u6240\u6709\u72b6\u6001\uff0c\u627e\u51fa\u53ef\u884c\u7684\n\t\tans+=s[i];\n\tcout<<ans;\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6:\n$$\nO(3^\\frac{n}{2} \\times log_2(3^\\frac{n}{2}) + 2^n)\n$$\n\u7b80\u5355\u6613\u61c2\uff0c\u975e\u5e38\u597d\u5199\u3002\n\n\u2014\u2014\u90a3\u4e48\uff0c\u4ee3\u4ef7\u662f\u4ec0\u4e48\u5462\uff1f\n\n~~\u4ee3\u4ef7\u662f\u4f60\u4e0d\u5438\u6c27\u8fc7\u4e0d\u4e86\u3002~~",
        "postTime": 1619679206,
        "uid": 297566,
        "name": "Tan_Wei_Ye",
        "ccfLevel": 0,
        "title": "P3067 Balanced Cow Subsets G \u3010\u6298\u534a\u641c\u7d22\u3011"
    },
    {
        "content": "#### Description\n\n> \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a_i$\uff0c\u6c42\u9009\u62e9\u4e24\u4e2a $a_i$ \u7684\u4e0d\u76f8\u4ea4\u5b50\u5e8f\u5217\u4f7f\u5f97\u8fd9\u4e24\u4e2a\u5b50\u5e8f\u5217\u7684\u548c\u76f8\u7b49\uff0c\u6c42\u9009\u62e9\u5b50\u5e8f\u5217\u6570\u3002\n\n#### Solution\n\n\u8003\u8651\u5c06\u5e8f\u5217\u5288\u6210\u4e24\u534a\uff0c\u5bf9\u4e8e\u4e24\u534a\u5206\u522b\u679a\u4e3e\uff0c\u6bcf\u6b21\u8003\u8651\u5c06\u5176\u5206\u5230\u7b2c\u4e00\u7ec4\uff0c\u5206\u5230\u7b2c\u4e8c\u7ec4\u8fd8\u662f\u4e0d\u5206\u5230\u4efb\u610f\u4e00\u7ec4\u3002\n\n\u8003\u8651\u72b6\u6001\u8868\u793a\uff0c\u5bf9\u4e8e\u5206\u5230\u7b2c\u4e00\u7ec4\u53ef\u4ee5\u5c06\u5176\u8bbe\u4e3a\u6b63\u6570\uff0c\u5206\u5230\u7b2c\u4e8c\u7ec4\u53ef\u4ee5\u5c06\u5176\u8bbe\u4e3a\u8d1f\u6570\uff0c\u4e0d\u5206\u5c31\u4e0d\u5c06\u5176\u8bbe\u5165\u7b54\u6848\uff0c\u5982\u679c\u6700\u540e\u548c\u4e3a $0$ \u5c31\u662f\u4e00\u7ec4\u5408\u6cd5\u89e3\u3002\n\n\u4f46\u662f\u6ce8\u610f\uff0c\u4e0d\u80fd\u4e24\u7ec4\u90fd\u4e3a\u7a7a\uff0c\u56e0\u6b64\u7b54\u6848\u8fd8\u9700\u8981\u51cf $1$\u3002\n\n\u8fd9\u4e48\u4e00\u6253\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u6837\u4f8b\u8fc7\u4e0d\u4e86\uff01\uff011 \u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u8fd9\u4e48\u8ba1\u6570\u4f1a\u51fa\u73b0\u91cd\u590d\u3002\n\n\u8003\u8651\u53bb\u91cd\uff0c\u5b9a\u4e49 $vis$ \u6570\u7ec4\uff08bool\uff09\uff0c$vis_i$ \u4e2d\u7684 $i$ \u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u4e8c\u8fdb\u5236\u6570\uff08\u53ef\u4ee5\u7528 int \u5341\u8fdb\u5236\u5b58\u50a8\uff09\uff0c\u5982\u679c $vis_i=0$\uff0c\u90a3\u4e48\u5c31\u8bb0\u5f55\u8fd9\u4e00\u4e2a\u503c\uff0c\u5e76 $vis_i \\leftarrow 1$\uff1b\u5982\u679c $vis_i=1$\uff0c\u90a3\u4e48\u5c31\u8df3\u8fc7\u8fd9\u4e2a\u503c\u3002\u8bb0\u5f55 $i$ \u4e5f\u4e0d\u662f\u96be\u4e8b\uff0c\u5728\u8fdb\u5165\u65b0\u7684 dfs \u65f6\u8fdb\u884c\u66f4\u65b0\uff0c\u8df3\u51fa\u65f6\u56de\u6eaf\uff08\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff09\u5373\u53ef\u3002",
        "postTime": 1617496503,
        "uid": 114914,
        "name": "\u4e00\u53ea\u4e66\u866b\u4ed4",
        "ccfLevel": 4,
        "title": "P3067 \u9898\u89e3"
    },
    {
        "content": "## \u5bf9Ofnoname\u5927\u4f6c\u601d\u8def\u7684\u4e2a\u4eba\u89c2\u70b9\n\n\n~~\u4e2a\u4eba\u5e76\u6ca1\u6709\u770b\u61c2\u5927\u4f6c\u7684\u6587\u5b57\u9610\u8ff0~~\n\n```cpp\n\u6211\u4eec\u8bbe\u7b2c\u4e00\u6b21\u6240\u9009\u7684\u6570\u548c\u4e3ax1\uff0c\u653e\u5165\u53e6\u4e00\u4e2a\u96c6\u5408\u6240\u5931\u53bb\u7684\u6570\u548c\u4e3ay1;\u540c\u7406\uff0c\u8bbe\u7b2c\u4e8c\u6b21\u6240\u9009\u7684\u6570\u548c\u4e3ax2,\u653e\u5165\u53e6\u4e00\u4e2a\u96c6\u5408\u6240\u5931\u53bb\u7684\u6570\u4e3ay2,2\u4e2a\u96c6\u5408\u6700\u7ec8\u8868\u793a\u51fa\u6765\u7684\u6570\u4e3anum\n\n\u6613\u5f97:\nx1-y1=num\nx2-y2=num\n\n\u663e\u7136\nx1+y2=x2+y1\n\n\u90a3\u4e48\u8fd9\u5c31\u9a8c\u8bc1\u4e86\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u7684dfs\u653e\u5165\u53e6\u4e00\u4e2a\u96c6\u5408\u800c\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u6b63\u786e\u6027\n```\n\n### \u6838\u5fc3\u4ee3\u7801\n\n```cpp\nvoid dfs1(int l,int r,int sum,int sta) {\n\tif(l==r+1) {\n\t\tif(!book.count(sum)) book[sum]=++cnt;\n\t\tt[book[sum]].push_back(sta);\n\t\treturn;\n\t}\n\tdfs1(l+1,r,sum,sta);\n\tdfs1(l+1,r,sum+a[l],sta|(1<<(l-1)));\n\tdfs1(l+1,r,sum-a[l],sta|(1<<(l-1)));\n}\n\nvoid dfs2(int l,int r,int sum,int sta) {\n\tif(l==r+1) {\n\t\tif(book.count(sum)) {\n\t\t\tint cur=book[sum];\n\t\t\tfor(int i=0;i<t[cur].size();i++) {\n\t\t\t\tvis[sta|t[cur][i]]=1;\n\t\t\t}\n\t\t} \n\t\treturn; \n\t}\n\tdfs2(l+1,r,sum,sta);\n\tdfs2(l+1,r,sum+a[l],sta|(1<<(l-1)));\n\tdfs2(l+1,r,sum-a[l],sta|(1<<(l-1)));\n}\n```\n",
        "postTime": 1605329093,
        "uid": 125901,
        "name": "FxorG",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3067 \u3010[USACO12OPEN]Balanced Cow Subsets G\u3011"
    },
    {
        "content": "# [\u987e](https://www.luogu.org/blog/RPdreamer/#)[z](https://www.cnblogs.com/-guz/)\n\n~~\u4f60\u6ca1\u6709\u53d1\u73b0\u4e24\u4e2a\u5b57\u91cc\u7684blog\u90fd\u4e0d\u4e00\u6837\u561b~~ qwq\n\n> ### Description\n>\n> \u7ed9n\u4e2a\u6570\uff0c\u4ece\u4e2d\u4efb\u610f\u9009\u51fa\u4e00\u4e9b\u6570\uff0c\u4f7f\u8fd9\u4e9b\u6570\u80fd\u5206\u6210\u548c\u76f8\u7b49\u7684\u4e24\u7ec4\u3002\n>\n> \u6c42\u6709\u591a\u5c11\u79cd\u9009\u6570\u7684\u65b9\u6848\u3002\n>\n> ### Input\n>\n> \u7b2c$1$\u884c\uff1a\u4e00\u4e2a\u6574\u6570$N$\n>\n> \u7b2c$2$\u5230$N+1$\u884c,\u5305\u542b\u4e00\u4e2a\u6574\u6570$m_i$\n>\n> ### Output\n>\n> \u4e00\u884c\uff1a\u5e73\u8861\u7684\u96c6\u5408\u7684\u4e2a\u6570.\n\n\u770b\u5230\u9898\u7684\u4e00\u77ac\u95f4\u6570\u636e\u8303\u56f4?\n\n$N \\leq 20$\uff1f\u72b6\u538b!\n\n\u660e\u663e\u76f4\u63a5\u505a\u8fc7\u4e0d\u53bb,\u9009\u62e9**\u6298\u534a\u641c\u7d22**.\n\n\u6298\u534a\u641c\u7d22\u7684\u8bdd\u4f1a\u6709\u4e09\u79cd\u60c5\u51b5\n\n- \u4e00.\u9009\u62e9\u5f53\u524d\u4f4d\u7f6e\n- \u4e8c.\u9009\u62e9\u5f53\u524d\u4f4d\u7f6e,\u7ed9\u7b2c\u4e00\u7ec4.\n- \u4e09.\u9009\u62e9\u5f53\u524d\u4f4d\u7f6e,\u7ed9\u7b2c\u4e8c\u7ec4.\n\n\u7136\u540e\u76f4\u63a5\u8dd1\u6298\u534a\u641c\u7d22+\u72b6\u538b\u5373\u53ef.\n\n\u5b58\u50a8\u7c7b\u4f3c\u94fe\u5f0f\u524d\u5411\u661f,\u5e94\u8be5\u4e0d\u662f\u5f88\u96be\u7406\u89e3,\u5c31\u4e0d\u8fc7\u591a\u89e3\u91ca\u4e86.\n\n\u7136\u540e\u5c31\u679a\u4e3e\u72b6\u6001\u5373\u53ef,\u53ef\u662f\u76f4\u63a5\u679a\u4e3e\u5230$2^n-1$\u663e\u7136\u4f1a$T$\u6389.\n\n\u7531\u4e8e\u6211\u4eec\u540e\u534a\u622a\u7684\u72b6\u6001\u5df2\u77e5,\u6240\u4ee5\u8bf4,\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u524d\u4e00\u534a\u7684\u72b6\u6001\u5373\u53ef.\n\n\u6ce8\u610f\u8981$sort$\u627e\u5230\u4e24\u8fb9\u503c\u76f8\u7b49\u7684.\n\n\u5176\u4ed6\u7684\u5c31\u4e0d\u592a\u96be\u7406\u89e3\u4e86,\u5982\u679c\u4e0d\u80fd\u7406\u89e3\u7684\u8bdd\u53ef\u4ee5\u79c1\u4fe1\u6211 qwq.\n\n``\u4ee3\u7801``\n\n```c++\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#define N 10000008\n#define R register\nusing namespace std;\ninline void in(int &x)\n{\n\tint f=1;x=0;char s=getchar();\n\twhile(!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n\twhile(isdigit(s)){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\nint n,w[28],mid,head[N];\nstruct cod{int u,val;}e[200008],edge[N];\nint v[N],ans,tot,ttt,sta,cnt;\nbool vis[2500000];\nvoid dfs1(int dep,int sum,int state)\n{\n\tif(dep>mid)\n\t{\n\t\tedge[++tot].u=head[state];\n\t\tedge[tot].val=sum;\n\t\thead[state]=tot;\n\t\treturn;\n\t}\n\tdfs1(dep+1,sum,state);\n\tdfs1(dep+1,sum+w[dep],state|(1<<(dep-1)));\n\tdfs1(dep+1,sum-w[dep],state|(1<<(dep-1)));\n}\nvoid dfs2(int dep,int sum,int state)\n{\n\tif(dep>n)\n\t{\n\t\te[++ttt].u=state;\n\t\te[ttt].val=sum;\n\t\treturn;\n\t}\n\tdfs2(dep+1,sum,state);\n\tdfs2(dep+1,sum+w[dep],state | (1<<(dep-1)));\n\tdfs2(dep+1,sum-w[dep],state | (1<<(dep-1)));\n}\ninline bool ccp(const cod&a,const cod&b)\n{\n\treturn a.val<b.val;\n}\nint main()\n{\n\tin(n);mid=(n+1)>>1;sta=(1<<n)-1;\n\tfor(R int i=1;i<=n;i++)in(w[i]);\n\tdfs1(1,0,0);dfs2(mid+1,0,0);\n\tsort(e+1,e+ttt+1,ccp);\n\tfor(R int i=0;i<=(1<<mid);i++)\n\t{\n\t\tR int cnt=0;\n\t\tfor(R int j=head[i];j;j=edge[j].u)\n\t\t\tv[++cnt]=edge[j].val;\n\t\tsort(v+1,v+cnt+1);\n\t\tR int pos=1;\n\t\tif(v[1]>e[ttt].val)break;\n\t\tfor(R int j=1;j<=ttt;j++)\n\t\t{\n\t\t\twhile(pos<=cnt and v[pos]<e[j].val)pos++;\n\t\t\tif(pos>cnt)break;\n\t\t\tif(v[pos]==e[j].val)\n\t\t\t\tvis[i|e[j].u]=true;\n\t\t}\n\t}\n\tfor(R int i=1;i<=sta;i++)\n\t\tif(vis[i])ans++;\n\tprintf(\"%d\",ans);\n}\n```",
        "postTime": 1540125617,
        "uid": 87960,
        "name": "\u987ez",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3067 \u3010[USACO12OPEN]\u5e73\u8861\u7684\u5976\u725b\u7fa4Balanced Cow S\u2026\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u4e00\u4e2a\u5f88\u5751\u7684\u9898\u3002\n\n\u5751\u70b9\uff1a\u53ea\u8981\u9009\u7684\u6570\u4e00\u6837\uff0c\u5c31\u53ea\u7b97\u4e00\u79cd\u65b9\u6848\u3002\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u4e8c\u8fdb\u5236\u72b6\u6001\u538b\u7f29\u3002\u9009\u4e86\uff1a$1$\uff0c\u4e0d\u9009\uff1a$0$\u3002\n\n\u7136\u540e\u6bcf\u4e2a\u6570\u90fd\u6709\u9009\u62e9\uff0c\u5982\u4e0b\uff1a\n\n1. \u5565\u90fd\u4e0d\u6295\uff08`sum` \u4e0d\u53d8\uff09\n1. \u6295\u5954\u5de6\u6d3e (`sum-w[i]`)\n1. \u6295\u5954\u53f3\u6d3e (`sum+w[i]`)\n\n\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u63a5\u4e0b\u6765\u7528 `map` \u4fdd\u5b58\u7b54\u6848\uff0c\u5e72\u5c31\u5b8c\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,vis[1<<21];\nint a[1001],ans,idx;\nmap<int,int> m;\nvector<int> g[1<<21];\nvoid dfs(int step,int sum,int state){\n\tif(step >= n/2){\n\t\tif(!m.count(sum))m[sum] = ++idx;\n\t\tg[m[sum]].push_back(state);\n\t}else{\n\t\tdfs(step+1,sum,state);\n\t\tdfs(step+1,sum+a[step],state|(1<<step));\n\t\tdfs(step+1,sum-a[step],state|(1<<step));\n\t}\n}\nvoid dfs2(int step,int sum,int state){\n\tif(step >= n){\n\t\tif(m.count(sum)){\n\t\t\tint t = m[sum];\n\t\t\tfor(int i = 0;i < g[t].size();i++){\n\t\t\t\tvis[g[t][i]|state] = 1;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tdfs2(step+1,sum,state);\n\t\tdfs2(step+1,sum-a[step],state|(1<<step));\n\t\tdfs2(step+1,sum+a[step],state|(1<<step));\n\t}\n}\nint main(){\n\tcin >> n;\n\tfor(int i = 0;i < n;i ++)cin >> a[i];\n\tdfs(0,0,0);\n\tdfs2(n/2,0,0);\n\tfor(int i = 1;i < (1<<n);i ++){\n\t\tif(vis[i]){\n\t\t\tans ++;\n\t\t}\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1653221313,
        "uid": 302394,
        "name": "dingshengyang",
        "ccfLevel": 4,
        "title": "MIM \u5927\u6cd5\u597d\u554a\uff01"
    },
    {
        "content": "\u9898\u610f\u7b80\u8ff0\uff1a\u4e00\u4e2a\u6570\u8981\u4e48\u653e\u5165\u96c6\u5408 $S_1$\uff0c\u8981\u4e48\u653e\u5165\u96c6\u5408 $S_2$\uff0c\u8981\u4e48\u4e24\u4e2a\u90fd\u4e0d\u653e\uff0c\u6c42\u4f7f\u5f97\u96c6\u5408\u975e\u7a7a\u65f6\u7684$\\Sigma_{v\\in S_1}v=\\Sigma_{u\\in S_2}u$ \u7684\u65b9\u6848\u6570\u3002\n\n$n\\leq20$ \u660e\u793a\u641c\u7d22\u6216\u8005\u72b6\u538b dp\uff0c\u4f46\u8fd9\u9898\u7206\u641c\u7684\u8bdd $O(3^{20})$ \u7684\u590d\u6742\u5ea6\u663e\u7136\u4f1a\u7206\u70b8\uff0c\u6709\u6ca1\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1f\n\n\u8003\u8651\u6298\u534a\u641c\u7d22\u3002\u5c06\u8fd9 $n$ \u4e2a\u6570\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u6bcf\u90e8\u5206\u5206\u522b\u7206\u641c\u5904\u7406\uff0c\u518d\u5408\u5e76\u7b54\u6848\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u5c31\u7206\u641c\u51fa\u4e24\u4e2a\u90e8\u5206\u7684\u6570\u53ef\u80fd\u7684\u548c\uff0c\u6392\u5e8f\u4e4b\u540e\u53cc\u6307\u9488\u7b54\u6848\u3002\n\n\u8bb0\u5f55\u7b54\u6848\u65f6\u6709\u4e00\u4e2a\u5f88\u5de7\u5999\u7684\u60f3\u6cd5\uff1a\u5bf9\u4e8e\u9009\u5165 $S_1$ \u7684\u6570\u5c31\u5728 dfs \u4f20\u53c2\u65f6\u4f20\u4e00\u4e2a $sum+a[i]$ \uff0c\u5bf9\u4e8e\u9009\u5165 $S_2$ \u7684\u6570\u5c31\u5728 dfs \u4f20\u53c2\u65f6\u4f20\u4e00\u4e2a $sum-a[i]$\uff0c\u6700\u540e\u5408\u5e76\u7b54\u6848\u65f6\u5224\u65ad\u4e24\u90e8\u5206\u662f\u5426\u548c\u4e3a $0$ \u5373\u53ef\u3002\n\n\u6700\u540e\u72b6\u538b\u4e00\u4e0b\u8bb0\u5f55\u4e2a\u72b6\u6001\uff08\u7b2c $i$ \u4f4d\u4e3a $1$ \u8868\u793a\u9009\u4e86\uff0c\u53cd\u4e4b\u6ca1\u9009\uff09\u5c31\u5b8c\u4e8b\u4e86\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define int long long\nusing namespace std;\ninline int read() {\n\tint res=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') f=-1; ch=getchar();}\n\twhile(ch>='0'&&ch<='9') res=res*10+ch-'0',ch=getchar();\n\treturn res*f;\n}\nconst int N=25;\nint n,ans,sump;\nint p[N];\nbool vis[10000000];\nstruct Node {\n\tint val,status;\n\tbool operator <(const Node &x) const {\n\t\treturn val<x.val;\n\t} \n}a[10000000],b[10000000];\ninline bool cmp(Node a,Node b) {return a.val>b.val;}\ninline void dfs(int dep,int limit,int sum,int status,Node *t) {\n\tif(dep>limit) {\n\t\tt[++t[0].val].val=sum;\n\t\tt[t[0].val].status=status;\n\t\treturn ;\n\t}\n\tdfs(dep+1,limit,sum+p[dep],status+(1<<(dep-1)),t);\n\tdfs(dep+1,limit,sum-p[dep],status+(1<<(dep-1)),t);\n\tdfs(dep+1,limit,sum,status,t);\n}\nsigned main() {\n\tn=read();\n\tfor(int i=1;i<=n;++i)\n\t\tsump+=(p[i]=read());\n\tdfs(1,n/2,0,0,a);\n\tdfs(n/2+1,n,0,0,b);\n\tsort(a+1,a+a[0].val+1);\n\tsort(b+1,b+b[0].val+1,cmp);\n\tint l=1,r=1;\n\twhile(l<=a[0].val&&r<=b[0].val) {\n\t\twhile(-a[l].val<b[r].val&&r<=b[0].val) r++;\n\t\tint pos=r;\n\t\twhile(r<=b[0].val&&-a[l].val==b[r].val) {\n\t\t\tif(!vis[a[l].status|b[r].status]) {\n\t\t\t\tvis[a[l].status|b[r].status]=1;\n\t\t\t\tans++;\n\t\t\t}\n\t\t\tr++;\n\t\t}\n\t\tif(l<a[0].val&&a[l].val==a[l+1].val) r=pos;\n\t\tl++;\n\t}\n\tprintf(\"%lld\",ans-1);\n\treturn 0;\n}\n```",
        "postTime": 1634870161,
        "uid": 149815,
        "name": "Isprime",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3067 [USACO12OPEN]Balanced Cow Subsets G"
    },
    {
        "content": "### \u89e3\u9898\u601d\u8def\uff1a\n\n\u9898\u610f\u7406\u89e3\u4e0a\u6ce8\u610f\u65e0\u8bba\u5982\u4f55\u5212\u5206\uff0c\u53ea\u8981\u96c6\u5408\u662f\u4e00\u6837\u7684\u5c31\u7b97\u4e00\u79cd\u65b9\u6848\uff0c\u4e0d\u80fd\u778e\u5199\u3002\n\n\u76f4\u63a5\u641c\u7d22\u7684\u72b6\u6001\u6570\u91cf\u4e3a $O(3^n)$\uff0c\u5c31\u662f\u76f4\u63a5\u5c06\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u5206\u4e3a\u4e0d\u9009\uff0c\u653e\u5728\u7b2c\u4e00\u4e2a\u90e8\u5206\u4e2d\u548c\u653e\u5728\u7b2c\u4e8c\u4e2a\u90e8\u5206\u4e2d\u4e09\u79cd\u53ef\u80fd\u60c5\u51b5\uff0c\u540c\u65f6\u8bb0\u5f55\u4e0b\u88ab\u53d6\u5230\u7684\u6570\u7684\u96c6\u5408\u5c31\u884c\u4e86\u3002\u660e\u663e\u7684\u662f\uff0c\u672c\u9898\u4e2d\u53ea\u5173\u5fc3\u4e24\u4e2a\u90e8\u5206\u7684\u5dee\u503c\uff0c\u76f4\u63a5\u8bb0\u5f55\u8fd9\u4e2a\u5dee\u503c\u5c31\u884c\u4e86\u3002\n\n\u867d\u7136\u4e0d\u80fd\u76f4\u63a5\u7528\u641c\u7d22\u901a\u8fc7\uff0c\u4f46\u662f\u8f83\u5c11\u7684\u641c\u7d22\u72b6\u6001\u542f\u793a\u6211\u4eec\u4f7f\u7528\u6548\u7387\u66f4\u9ad8\u7684\u6298\u534a\u641c\u7d22\u3002\u4e5f\u5c31\u662f\u5c06\u6240\u6709\u7684\u6570\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u8fdb\u884c\u641c\u7d22\uff0c\u5728\u6700\u540e\u8fdb\u884c\u76f8\u5e94\u7684\u5339\u914d\u3002\n\n\u8fdb\u884c\u5339\u914d\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u4e0b\u6240\u6709\u80fd\u8fbe\u6210\u5f53\u524d\u6570\u7684\u4f4d\u7f6e\uff0c\u867d\u7136\u8fd9\u6837\u590d\u6742\u5ea6\u4f1a\u8fbe\u5230\u76f8\u7b49\u6570\u7684\u5e73\u65b9\u7ea7\u3002\u4f46\u662f\u5bb9\u6613\u5f97\u77e5\uff0c\u8fd9\u6837\u7684\u6700\u5927\u503c\u51fa\u73b0\u5728\u5168\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u6bdb\u4f30\u4f30\u7b97\u4e00\u4e0b\u5373\u4f7f\u662f\u6700\u5927\u7684\u60c5\u51b5\u4e5f\u53ea\u6709\u4e0d\u5230 $9000$ \u76f8\u7b49\u7684\u6570\uff0c\u5438\u53e3\u6c27\u968f\u4fbf\u8fc7\u3002\n\n\n\n---\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<vector>\n#include<cstdio>\n#include<map>\nusing namespace std;\n#define int long long\nint n,n1,n2,a[50],ans,cnt,rep[2048576];\nvector<int> r[60000];\nmap<int,int>mp;\nvoid dfs1(int now,int num,int p){\n\tif(now==n1+1){\n\t\tif(mp[num]==0)mp[num]=++cnt;\n\t\tr[mp[num]].push_back(p);\n\t\treturn;\n\t}\n\tdfs1(now+1,num,p);\n\tdfs1(now+1,num+a[now],p|(1<<(now-1)));\n\tdfs1(now+1,num-a[now],p|(1<<(now-1)));\n}\nvoid dfs2(int now,int num,int p){\n\tif(now==n+1){\n\t\tint u=mp[-num];\n\t\tfor(int i=0;i<r[u].size();i++){\n\t\t\tif(rep[p|r[u][i]]==0){\n\t\t\t\trep[p|r[u][i]]=1;\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\tdfs2(now+1,num,p);\n\tdfs2(now+1,num+a[now],p|(1<<(now-1)));\n\tdfs2(now+1,num-a[now],p|(1<<(now-1)));\n}\nsigned main(){\n\tscanf(\"%lld\",&n);\n\tn1=n/2;\n\tfor(int i=1;i<=n;i++)scanf(\"%lld\",&a[i]);\n\tdfs1(1,0,0);\n\tdfs2(n1+1,0,0);\n\tprintf(\"%lld\\n\",ans-1);\n\treturn 0;\n}\n```\n",
        "postTime": 1667790161,
        "uid": 223559,
        "name": "qxp101",
        "ccfLevel": 6,
        "title": "P3067 [USACO12OPEN]Balanced Cow Subsets G  \u9898\u89e3"
    },
    {
        "content": "# \u4e0d\u662f\u6298\u534a\u641c\u7d22\uff0c\u662f\u4e8c\u8fdb\u5236\u679a\u4e3e\uff01\uff01\uff01\n\n\u6211\u662f\u5438\u6c27\u8fc7\u7684\n\n\u4e0d\u4f1aVECTOR\u7684\u7761\u89c9\n\n\u4e0d\u4f1aMAP\u7684\u7761\u89c9\n\n\u4e0d\u4f1aBITSET\u7684\u52c9\u5f3a\u770b\u5427\n\n\u628a\u6570\u7ec4\u6392\u4e2a\u5e8f\uff0c\u5206\u6210\u4e24\u534a\n\n\u4e8c\u8fdb\u5236\u679a\u4e3e\u4e0d\u8bf4\u4e86\n\n\u5728\u4e00\u4e2aMAP\u91cc\u8bb0\u5f55\u72b6\u6001\uff0c\u7528VECTOR\u5b58\n\n\u7528BITSET\u5224\u91cd\uff0cBOOL\u6570\u7ec4\u4e5f\u884c\n\n\u7136\u540e\u5c31A\u4e86\n\n\u4ee3\u7801\uff1a\u538b\u884c\u538b\u884c\u518d\u538b\u884c\uff0c\u6284\u9898\u89e3\u4f1aTLE\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct apple\n{\n\tint tot;\n\tvector<int>zt;\n\tvoid append(int ztt){zt.push_back(ztt);tot++;}\n};\nint a[25],n;\nmap<int,apple>mp;\nint dv1[1025],dv2[1025];\nbitset<1050000>bs;\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)cin>>a[i];\n\tsort(a+1,a+n+1);\n\tint zb1=n>>1,zb2=n-(n>>1);\n\tint ans=0;\n\tfor(int i=0;i=(1<<zb1);i++)for(int j=1;j<=zb1;j++)if(i&(1<<j-1))dv1[i]+=a[j];\n\tfor(int i=0;i<(1<<zb1);i++)for(int j=0;j<(1<<zb1);j++)if(!(i&j)&&(i||j)&&dv1[i]>=dv1[j])mp[dv1[i]-dv1[j]].append(i^j);\n\tapple ppa=mp[0];\n\tfor(int i=0;i<ppa.tot;i++)bs[ppa.zt[i]]=1;\n\tfor(int i=0;i<(1<<zb2);i++)for(int j=1;j<=zb2;j++)if(i&(1<<j-1))dv2[i]+=a[zb1+j];\n\tfor(int i=0;i<(1<<zb2);i++)for(int j=0;j<(1<<zb2);j++)if(!(i&j)&&(i||j)&&dv2[i]==dv2[j])bs[(i^j)<<zb2]=1;\n\tfor(int i=0;i<(1<<zb2);i++)for(int j=0;j<(1<<zb2);j++)if(!(i&j)&&(i||j)&&dv2[i]>=dv2[j])\n\t{\n\t\tint mg=(i^j)<<zb2;\n\t\tapple pa=mp[dv2[i]-dv2[j]];\n\t\tfor(int k=0;k<pa.tot;k++)bs[mg^pa.zt[k]]=1;\n\t}\n\tcout<<bs.count();\n\treturn 0;\n}\n```\n",
        "postTime": 1576483061,
        "uid": 107484,
        "name": "wmy_goes_to_thu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3067 \u3010[USACO12OPEN]\u5e73\u8861\u7684\u5976\u725b\u7fa4Balanced Cow S\u2026\u3011"
    },
    {
        "content": "\u8003\u8651\u679a\u4e3e $3^n$ \u79cd\u60c5\u51b5\uff0c\u7528\u4e09\u8fdb\u5236\u6570\u8868\u793a\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4f4d\uff0c$0$ \u8868\u793a\u4e0d\u653e\uff0c$1$ \u8868\u793a\u653e\u5165\u7b2c\u4e00\u4e2a\u96c6\u5408\uff0c$2$ \u8868\u793a\u653e\u5165\u7b2c\u4e8c\u4e2a\u96c6\u5408\u3002\n\n\u8fd9\u6837\u663e\u7136\u4f1a TLE\u3002\u8003\u8651 meet in the middle\u3002\n\n\u8003\u8651\u679a\u4e3e\u524d $3^{\\left\\lfloor\\frac{n}{2}\\right\\rfloor}$ \u79cd\u60c5\u51b5\uff0c\u5f00\u4e00\u4e2a\u6570\u7ec4 / map \u5904\u7406\u51fa\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002\n\n\u968f\u540e\u679a\u4e3e\u540e $3^{n-\\left\\lfloor\\frac{n}{2}\\right\\rfloor}$ \u79cd\u60c5\u51b5\uff0c\u548c\u524d\u9762\u5904\u7406\u51fa\u7684\u7b54\u6848\u5408\u5e76\u3002\n\n\u8003\u8651\u5982\u4f55\u5408\u5e76\u3002\u8bbe\u524d\u534a\u6bb5\u7684\u7b2c\u4e00\u4e2a\u96c6\u5408\u548c\u4e3a $a$\uff0c\u7b2c\u4e8c\u4e2a\u96c6\u5408\u548c\u4e3a $b$\uff1b\u540e\u534a\u6bb5\u7684\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e3a $a'$\uff0c\u7b2c\u4e8c\u4e2a\u96c6\u5408\u548c\u4e3a $b'$\uff0c\u5219\u6709 $a+a'=b+b'$\u3002\n\n\u79fb\u9879\u6709 $a-b=b'-a'$\uff0c\u90a3\u4e48\u53ea\u8981\u5c06\u7b54\u6848\u7528\u5dee\u4e3a\u7d22\u5f15\u8bb0\u5f55\u5373\u53ef\u3002\n\n\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u60c5\u51b5\uff0c\u5c31\u662f\u7b2c\u4e00\u4e2a\u96c6\u5408\u548c\u7b2c\u4e8c\u4e2a\u96c6\u5408\u53ea\u662f\u6211\u4eec\u89c4\u5b9a\u7684\u987a\u5e8f\uff0c\u672c\u8d28\u4e0a\u5b83\u662f\u65e0\u5e8f\u5bf9\uff1b\u9664\u6b64\u4e4b\u5916\uff0c\u4f60\u4e0d\u53ef\u4ee5\u9009\u4e24\u4e2a\u7a7a\u96c6\u3002\u90a3\u4e48\u7b54\u6848\u5c31\u662f $\\dfrac{ans-1}{2}$ \u4e86\u5417\uff1f\n\n\u5176\u5b9e\u4e0d\u662f\u3002\n\n\u770b\u9898\u76ee\uff0c\u53d1\u73b0\u8981\u6c42\u9009\u6570\u7684\u65b9\u6848\u800c\u975e\u5177\u4f53\u7684\u5b89\u6392\u65b9\u6848\uff0c\u4f8b\u5982\uff1a\n\n```\n3 3 3 3\n```\n\n\u5bf9\u4e8e\u8fd9\u56db\u4e2a\u6570\uff0c\u5206\u6bb5\u4e3a `3 3/3 3`\uff0c\u524d\u534a\u6bb5\u548c\u540e\u534a\u6bb5\u5185\u5171\u53ef\u4ee5\u7ec4\u6210 $2$ \u4e2a\u5408\u6cd5\u7b54\u6848\u3002\n\n\u4f60\u4f1a\u53d1\u73b0\uff0c$a_1+a_2=a_3+a_4$ \u672c\u8d28\u4e0a\u548c $a_1+a_3=a_2+a_4$ \u662f\u4e00\u79cd\u9009\u6570\u65b9\u6848\u3002\n\n\u8003\u8651\u5728\u679a\u4e3e\u72b6\u6001\u65f6\u52a0\u5165\u9009\u6570\u7684\u72b6\u6001\uff0c\u7528\u4e8c\u8fdb\u5236 $0/1$ \u6765\u8868\u793a\u3002\n\n\u5f00\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u662f\u5426\u8ba1\u7b97\u8fc7\u4e00\u79cd\u65b9\u6848\u7684\u7b54\u6848\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6\u662f $O(3^{\\left\\lfloor\\frac{n}{2}\\right\\rfloor}\\times2^{\\left\\lfloor\\frac{n}{2}\\right\\rfloor})$ \u5373 $O(6^{\\left\\lfloor\\frac{n}{2}\\right\\rfloor})$ \u7684\u3002$3$ \u4e3a\u679a\u4e3e\u96c6\u5408\u5206\u5e03\uff0c$2$ \u4e3a\u8bb0\u5f55\u7684\u9009\u6570\u65b9\u6848\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1 << 20;\nunordered_map <int, int> id; bool kk[N];\nint n, idx, a[N]; vector <int> kel[N];\n\nint main() {\n    ios_base::sync_with_stdio(false); cin.tie(0), cout.tie(0);\n    cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i];\n    int mid = n >> 1, lim = 1, res = 0; for (int i = 1; i <= mid; ++i) lim *= 3;\n    for (int s = 0; s < lim; ++s) {\n        int tmp = s, sum = 0, sta = 0;\n        for (int cnt = 1; cnt <= mid; ++cnt, sta = tmp % 3? (sta << 1 | 1) : (sta << 1), tmp /= 3)\n            if ((tmp % 3) & 1) sum += a[cnt]; else if (tmp % 3) sum -= a[cnt];\n        if (!id[sum]) id[sum] = ++idx;\n        kel[id[sum]].emplace_back(sta);\n    }\n    int lst = mid; mid = n - mid, lim = 1;\n    for (int i = 1; i <= mid; ++i) lim *= 3;\n    for (int s = 0; s < lim; ++s) {\n        int tmp = s, sum = 0, sta = 0;\n        for (int cnt = 1; cnt <= mid; ++cnt, sta = tmp % 3? (sta << 1 | 1) : (sta << 1), tmp /= 3)\n            if ((tmp % 3) & 1) sum -= a[cnt + lst]; else if (tmp % 3) sum += a[cnt + lst];\n        int curid = id[sum]; if (!curid) continue;\n        for (auto dk: kel[curid]) {\n            if (!((dk << mid) + sta)) continue;\n            if (kk[(dk << mid) | sta]) continue;\n            kk[(dk << mid) | sta] = true, ++res;\n        }\n    }\n    cout << res << endl;\n    return 0;\n}\n```",
        "postTime": 1668143761,
        "uid": 487752,
        "name": "MistZero",
        "ccfLevel": 0,
        "title": "\u53cc\u500d\u7ecf\u9a8c\u3002"
    },
    {
        "content": "\u96be\u5f97\u9047\u89c1\u4e00\u9053\u4f1a\u7684\u7d2b\u9898\n\n----\n\n\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u9053\u9898\u6211\u60f3\u7684\u662f\u7206\u641c\uff08$O(3^N)$\uff09\uff0c\u7b2c\u4e8c\u773c\u53d1\u73b0\u6570\u636e\u8303\u56f4 $n \\le 20$ \u5f53\u573a\u66b4\u6bd9\u3002\n\n\u518d\u770b\u4e00\u773c\uff0c\u53d1\u73b0\u8fd9\u9053\u9898\u53ef\u4ee5\u6298\u534a\u641c\u7d22\u3002\n\n\u76f4\u63a5\u6309\u7167\u6298\u534a\u641c\u7d22\u7684\u677f\u5b50 [P4799](https://www.luogu.com.cn/problem/P4799) \u6765\u6253\u3002\n\n```cpp\nvoid dfs(int l, int r, long long sum, long long a[], long long &cnt) {\n    if (sum > m) return;\n    if (l > r) {\n        a[++cnt] = sum;\n        return;\n    }\n    dfs(l + 1, r, sum + qwq[l], a, cnt);\n    dfs(l + 1, r, sum, a, cnt);\n    dfs(l + 1, r, sum - qwq[l], a, cnt);\n}\n```\n\n\u53ef\u4ee5\u62ff\u5230 $90pts$ \u7684\u597d\u6210\u7ee9\u3002\n\n\u600e\u4e48\u89e3\u51b3\u5982\u4e0a\u95ee\u9898\u5462\uff1f\n\n\u7ed3\u5408\u9898\u610f / \u5f00 O2 \u5373\u53ef\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u5728\u641c\u7d22 $[1, mid]$ \u7684\u65f6\u5019\u8bb0\u5f55\u53ef\u4ee5\u62fc\u63a5\u51fa\u5f53\u524d\u7ec4\u5408\u7684\u7684\u72b6\u6001\uff0c\u7136\u540e\u5728\u641c\u7d22 $[mid + 1, n]$ \u7684\u65f6\u5019\u6c42\u51fa\u4e00\u4e2a\u7ed3\u679c $sum$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5728 $[1, mid]$ \u91cc\u9762\u53ef\u4ee5\u6c42\u51fa\u540c\u6837\u7684\u7ed3\u679c $sum$ \u7684\u65b9\u6848\u6570\u91cf\uff0c\u8fd9\u65f6\u53ea\u9700\u8981\u8c03\u7528\u50a8\u5b58\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u8bb0\u5f55\u6240\u6709\u7684\u5728 $[1, mid]$ \u91cc\u7ed3\u679c\u4e3a $sum$ \u7684\u72b6\u6001\u52a0\u4e0a\u5f53\u524d\uff08$[mid + 1, n]$\uff09\u7684\u72b6\u6001\uff0c\u6700\u540e\u6c42\u548c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u9700\u8981\u6ce8\u610f\u76f8\u540c\u7684\u72b6\u6001\u53ea\u6709\u4e00\u4e2a\uff0c\u4e0d\u80fd\u7d2f\u52a0\u3002",
        "postTime": 1623577588,
        "uid": 317198,
        "name": "MilkyCoffee",
        "ccfLevel": 0,
        "title": "P3067 \u9898\u89e3"
    },
    {
        "content": "\u5982\u679c\u4e0d\u662f\u725b\u5976\u751f\u4ea7\u7684\u725b\u5976\u91cf\u4e0d\u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c06\u662f\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u52a8\u6001\u89c4\u5212\u6848\u4f8b\u3002\u53e6\u4e00\u65b9\u9762\uff0cN\u662f\u76f8\u5f53\u5c0f\u7684\uff0c\u6240\u4ee5\u6307\u6570\u65f6\u95f4\u65b9\u6cd5\u53ef\u80fd\u662f\u53ef\u884c\u7684\u3002\n\n\n\u663e\u800c\u6613\u89c1\u7684\u65b9\u6cd5\u662f\u4f9d\u6b21\u6d4b\u8bd5\u6bcf\u4e2a\u5b50\u96c6S\u3002\u5982\u679cS\u7684\u603b\u548c\u4e3aA\uff0c\u5219\u5c1d\u8bd5S\u7684\u6240\u6709\u5b50\u96c6\uff0c\u4ee5\u67e5\u770b\u5176\u4e2d\u4e00\u4e2a\u662f\u5426\u6709A / 2\u7684\u603b\u548c\u3002\u8fed\u4ee3\u6240\u6709\u5b50\u96c6\u7684\u6240\u6709\u5b50\u96c6\u9700\u89813 ^ N\u4e2a\u6b65\u9aa4\uff0c\u8fd9\u5bf9\u4e8e\u53ef\u7528\u7684\u65f6\u95f4\u6709\u4e00\u70b9\u592a\u5927\u3002\n\n\n\u4e3a\u4e86\u51cf\u5c11\u6240\u9700\u7684\u65f6\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u201c\u4e2d\u95f4\u4f1a\u8bae\u201d\u65b9\u6cd5\u3002\u5c06\u725b\u5747\u5300\u5206\u6210\u4e24\u7ec4\uff0c\u6d82\u4e00\u5957\u68d5\u8272\uff0c\u53e6\u4e00\u53ea\u767d\u8272\u3002\u5047\u8bbe\u96c6\u5408S\u662f\u5e73\u8861\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u5206\u6210\u5177\u6709\u76f8\u540c\u548c\u7684\u5b50\u96c6A\u548cB\u3002\u7136\u540e\u603b\u548c\uff08A\u4e2d\u7684\u68d5\u8272\uff09 - \u603b\u548c\uff08B\u4e2d\u7684\u68d5\u8272\uff09=\u548c\uff08B\u4e2d\u7684\u767d\u8272\uff09 - \u603b\u548c\uff08A\u4e2d\u7684\u767d\u8272\uff09\uff0c\u5373S\u4e2d\u7684\u68d5\u8272\u5976\u725b\u53ef\u4ee5\u5206\u6210\u4e24\u7ec4\uff0cS\u4e2d\u7684\u767d\u8272\u5976\u725b\u4e5f\u53ef\u4ee5\u5206\u88c2\u5206\u4e3a\u4e24\u7ec4\uff0c\u201c\u4e0d\u5e73\u8861\u201d\u7a0b\u5ea6\u76f8\u540c\u3002\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5c1d\u8bd5\u626d\u8f6c\u8fd9\u4e2a\u8fc7\u7a0b\uff1a\u5bf9\u4e8e\u8910\u8272\u725b\u7684\u6bcf\u4e00\u4e2a\u5b50\u96c6\uff0c\u8ba1\u7b97\u6240\u6709\u53ef\u80fd\u7684\u4e0d\u5e73\u8861\u503c\u5e76\u5b58\u50a8\u5b83\u4eec; \u7c7b\u4f3c\u4e8e\u767d\u725b\u3002\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u4e0d\u5e73\u8861\u503c\uff0c\u5c06\u6240\u6709\u5177\u6709\u8be5\u503c\u7684\u68d5\u8272\u5b50\u96c6\u4e0e\u6240\u6709\u5177\u6709\u8be5\u503c\u7684\u767d\u8272\u5b50\u96c6\u8fdb\u884c\u914d\u5bf9\uff0c\u4ee5\u4f7f\u5e73\u8861\u7684\u68d5\u767d\u8272\u7ec4\u7684\u6bcd\u725b\u3002\n\n\n\u4ec0\u4e48\u662f\u8ba1\u7b97\u6548\u7387\uff1f\u8f83\u6162\u7684\u90e8\u5206\u5c06\u662f\u6700\u7ec8\u7684\u5339\u914d\u3002\u4e0d\u6e05\u695a\u5982\u4f55\u83b7\u5f97\u4e00\u4e2a\u7d27\u5bc6\u7684\u754c\u9650\uff0c\u4f46\u662f\u8fd1\u4f3c\u503c\u8981\u6ce8\u610f\uff0c\u6709\u5206\u914dO\uff083 ^\uff08N / 2\uff09\uff09\u79cd\u65b9\u5f0f\u6765\u5206\u914d\u8910\u8272\u725b\u7684\u5b50\u96c6\uff0c\u800c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u5206\u533a\u4e4b\u4e00\u53ef\u80fd\u4f1a\u5339\u914d\u7ed9\u51fa\u767d\u725b\u7684\u6240\u6709\u5b50\u96c6\uff0c\u7ed9\u51faO\uff083 ^\uff08N / 2\uff09.2 ^\uff08N / 2\uff09\uff09= O\uff086 ^\uff08N / 2\uff09\uff09\u65f6\u95f4\uff0c\u8fd9\u662f\u8db3\u591f\u597d\u7684\u3002\n\n\n\u53ef\u4ee5\u505a\u51fa\u7684\u53e6\u4e00\u4e2a\u4f18\u5316\u662f\u5f53\u5c1d\u8bd5\u5c06\u4e00\u4e2a\u68d5\u8272\u5b50\u96c6\u4e0e\u4e00\u4e2a\u767d\u8272\u5b50\u96c6\u5339\u914d\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u4e24\u4e2a\u5b50\u96c6\u4e2d\u8f83\u5c0f\u7684\u5b50\u96c6\uff0c\u8fed\u4ee3\u8be5\u5b50\u96c6\u7684\u6bcf\u4e2a\u4e0d\u5e73\u8861\uff0c\u7136\u540e\u901a\u8fc7\u6267\u884c\u53e6\u4e00\u4e2a\u5b50\u96c6\u5bfb\u627e\u76f8\u540c\u7684\u4e0d\u5e73\u8861\u67e5\u627e\u54c8\u5e0c\u8868\u3002\u8fd9\u5bfc\u81f4\u5206\u6790\u8fd0\u884c\u65f6\u66f4\u5feb\u4f46\u66f4\u590d\u6742\uff0c\u53ef\u4ee5\u663e\u793a\u4e3a\uff081 + sqrt 1.5\uff09^ N\uff0c\u6709\u70b9\u597d\u4e8e\uff08sqrt 6\uff09^ N\u3002\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <map>\n#include <vector>\n#include <utility>\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef long long ll;\nvector<pii> half(const vector<int> &S)\n{\n    vector<pii> ans;\n    int N = S.size();\n    for (int i = 0; i < (1 << N); i++)\n        for (int j = i; ; j = (j - 1) & i)\n        {\n            int sum = 0;\n            for (int k = 0; k < N; k++)\n            {\n                if (j & (1 << k))\n                    sum -= S[k];\n                else if (i & (1 << k))\n                    sum += S[k];\n            }\n            if (sum >= 0)\n                ans.push_back(pii(sum, i));\n            if (j == 0)\n                break;\n        }\n    sort(ans.begin(), ans.end());\n    ans.resize(unique(ans.begin(), ans.end()) - ans.begin());\n    return ans;\n}\nint main()\n{\n    //ifstream in(\"subsets.in\");\n    //ofstream out(\"subsets.out\");\n    int N;\n    cin >> N;\n    vector<int> SL, SR;\n    for (int i = 0; i < N; i++)\n    {\n        int x;\n        cin >> x;\n        if (i & 1)\n            SL.push_back(x);\n        else\n            SR.push_back(x);\n    }\n    vector<pii> L = half(SL);\n    vector<pii> R = half(SR);\n    int p = 0;\n    int q = 0;\n    int LS = L.size();\n    int RS = R.size();\n    vector<bool> good(1 << N);\n    while (p < LS && q < RS)\n    {\n        if (L[p].first < R[q].first)\n            p++;\n        else if (L[p].first > R[q].first)\n            q++;\n        else\n        {\n            int p2 = p;\n            int q2 = q;\n            while (p2 < LS && L[p2].first == L[p].first)\n                p2++;\n            while (q2 < RS && R[q2].first == R[q].first)\n                q2++;\n            for (int i = p; i < p2; i++)\n                for (int j = q; j < q2; j++)\n                {\n                    good[L[i].second | (R[j].second << SL.size())] = true;\n                }\n            p = p2;\n            q = q2;\n        }\n    }\n    int ans = count(good.begin() + 1, good.end(), true);\n    cout << ans << endl;\n}\n```",
        "postTime": 1509200204,
        "uid": 41717,
        "name": "\u4e00\u9897\u8d5b\u8247",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3067 \u3010[USACO12OPEN]\u5e73\u8861\u7684\u5976\u725b\u7fa4Balanced Cow S\u2026\u3011"
    }
]