[
    {
        "content": "upt 2020.4.15\uff1a\u52a0\u4e0a\u4e86\u90e8\u5206\u611f\u6027\u8bc1\u660e\u548c Bowyer-Watson \u7b97\u6cd5\u90e8\u5206\u3002\n\nupt 2020.4.16\uff1a\u6dfb\u52a0\u4e86\u5173\u4e8e\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5916\u63a5\u5706\u5185\u7684\u4e09\u7ef4\u51e0\u4f55\u65b9\u6cd5\u7684\u8bc1\u660e\u3002\n\n---\n\n\u6ce8\u610f\uff1a\u4ee5\u4e0b\u5185\u5bb9\u5747\u5728\u539f\u56fe\u65e0\u91cd\u70b9\u3001\u65e0\u4e09\u70b9\u5171\u7ebf\u3001\u65e0\u56db\u70b9\u5171\u5706\u7684\u524d\u63d0\u4e0b\u8fdb\u884c\u8ba8\u8bba\u3002\u82e5\u539f\u56fe\u6709\u8fd9\u4e9b\u60c5\u51b5\uff0c\u53ef\u4ee5\u8fdb\u884c\u4e00\u5b9a\u6270\u52a8\u6765\u907f\u5f00\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u6211\u662f\u6b7b\u8bb0\u4e0b\u6765\u7684\uff0c\u6709\u4e9b\u5730\u65b9\u6ca1\u6709\u8bc1\u660e\uff0c\u6709\u4e9b\u5730\u65b9\u8bc1\u660e\u4e5f\u6bd4\u8f83\u53e3\u80e1\u3002\u671b\u8bf7\u89c1\u8c05\u3002\n\n\u672c\u9898\u89e3\u4ec5\u505a\u6982\u62ec\u6027\u5f52\u7eb3\u6574\u7406\uff0c\u60f3\u8981\u8be6\u7ec6\u5b66\u4e60\u8be5\u7b97\u6cd5\u53ef\u4ee5\u524d\u5f80 OI-Wiki \u7684\u8ba1\u7b97\u51e0\u4f55 $\\Rightarrow$ \u4e09\u89d2\u5256\u5206\u9875\u9762\u3002\n\n---\n\n\u6c42\u6b27\u5f0f\u6700\u5c0f\u751f\u6210\u6811 (EMST) \u662f Delaunay \u4e09\u89d2\u5256\u5206\u6700\u7ecf\u5178\u7684\u51e0\u4e2a\u5e94\u7528\u4e4b\u4e00\u3002\n\n\u4e00\u4e9b\u5b9a\u4e49\uff1a\n\n- \u4e09\u89d2\u5256\u5206\uff1a\u5bf9\u4e8e\u4e00\u79cd\u5e73\u9762\u5206\u5272\uff0c\u82e5\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u672a\u6dfb\u52a0\u7684\u8fb9\uff0c\u90fd\u4e0e\u81f3\u5c11\u4e00\u6761\u5df2\u6dfb\u52a0\u7684\u8fb9\u76f8\u4ea4\uff0c\u5c31\u79f0\u4e3a\u4e09\u89d2\u5256\u5206\u3002\n\n- Delaunay \u8fb9\uff1a\u4e00\u6761\u8fb9 $AB$ \u88ab\u79f0\u4e3a Delaunay \u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a\u7ecf\u8fc7 $A, B$ \u4e24\u70b9\u7684\u5706\uff0c\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u5176\u5b83\u7684\u70b9 $C$\uff0c$C$ \u90fd\u5728\u5706\u5916\uff08\u8fd9\u4e2a\u5706\u4e0d\u4e00\u5b9a\u9700\u8981\u662f\u4ee5 $AB$ \u4e3a\u76f4\u5f84\u7684\u5706\uff09\u3002\n- Delaunay \u4e09\u89d2\u5256\u5206\uff1a\u5bf9\u4e8e\u4e00\u79cd\u4e09\u89d2\u5256\u5206\uff0c\u5982\u679c\u5b83\u4fdd\u7559\u4e0b\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f Delaunay \u8fb9\uff0c\u5c31\u88ab\u79f0\u4e3a Delaunay \u4e09\u89d2\u5256\u5206\u3002\n\nDelaunay \u4e09\u89d2\u5256\u5206\u4e3b\u8981\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n- \u7a7a\u5706\u6027\uff1a\u5bf9\u4e8e\u5256\u5206\u51fa\u7684\u6bcf\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u5176\u5916\u63a5\u5706\u5185\u5747\u4e0d\u5305\u542b\u5176\u5b83\u70b9\u3002\n- \u6700\u5c0f\u89d2\u6700\u5927\u6027\uff1aDelaunay \u4e09\u89d2\u5256\u5206\u6240\u5256\u51fa\u7684\u6700\u5c0f\u89d2\uff0c\u662f\u6240\u6709\u53ef\u80fd\u7684\u4e09\u89d2\u5256\u5206\u5f62\u6210\u7684\u6700\u5c0f\u89d2\u4e2d\uff0c\u6700\u5927\u7684\u3002\n- \u552f\u4e00\u6027\uff1aDelaunay \u4e09\u89d2\u5256\u5206\u662f\u552f\u4e00\u7684\uff08\u5f53\u7136\u662f\u5728\u6ca1\u6709\u91cd\u70b9\u3001\u5171\u7ebf\u3001\u5171\u5706\u7684\u524d\u63d0\u4e0b\uff09\u3002\n\n\u7a7a\u5706\u6027\u53ef\u4ee5\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u8fdb\u884c\u8bc1\u660e\u3002\n\n\u5f53 $n=3$ \u65f6\uff0c\u663e\u7136\u7b26\u5408\u6761\u4ef6\u3002\n\n\u5f53 $n \\gt 3$ \u65f6\uff0c\u8003\u8651\u65b0\u63d2\u5165\u7684\u90a3\u4e00\u4e2a\u70b9\u6240\u6709\u76f8\u90bb\u4e09\u89d2\u5f62\u7684\u5bf9\u8fb9\u3002\u7531\u4e8e\u5176\u4ecd\u7136\u662f\u4e00\u6761 Delaunay \u8fb9\uff0c\u56e0\u6b64\u5fc5\u7136\u9700\u8981\u5b58\u5728\u4e00\u4e2a\u7a7a\u5706\u3002\u90a3\u4e48\u8fd9\u6761\u5bf9\u8fb9\u6240\u76f8\u90bb\u7684\u53e6\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u5916\u63a5\u5706\u4e00\u5b9a\u4e0d\u80fd\u5305\u542b\u8fd9\u4e2a\u65b0\u7684\u70b9\uff0c\u56e0\u4e3a\u4e00\u65e6\u5305\u542b\u5c31\u4f1a\u5bfc\u81f4\u4ee5\u8fd9\u6761\u8fb9\u4e3a\u5f26\u7684\u8fd9\u4e2a\u5706\u65e0\u8bba\u5411\u54ea\u4e00\u7aef\u6269\u5f20\uff0c\u90fd\u59cb\u7ec8\u4f1a\u542b\u6709\u4e24\u4e2a\u70b9\u4e2d\u7684\u4e00\u4e2a\uff0c\u8fd9\u4e0e Delaunay \u8fb9\u7684\u5b9a\u4e49\u51b2\u7a81\u3002\u5982\u6b64\u5bf9\u65b0\u52a0\u5165\u7684\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u76f8\u90bb\u4e09\u89d2\u5f62\u90fd\u662f\u6ee1\u8db3\u7a7a\u5706\u7684\uff0c\u6545\u53ef\u6570\u5b66\u5f52\u7eb3\u5f97\u5230\u6574\u5f20 Delaunay \u4e09\u89d2\u5256\u5206\u662f\u6ee1\u8db3\u7a7a\u5706\u6027\u7684\u3002\n\n\u6700\u5c0f\u89d2\u6700\u5927\u6027\u53ef\u4ee5\u8fd9\u6837\u4ece\u7a7a\u5706\u6027\u63a8\u5f97\uff1a\uff08\u611f\u8c22 @[\u798f\u5dde\u5468\u5723\u529b](https://www.luogu.com.cn/user/23688)\uff09\n\n![](https://i.loli.net/2020/04/15/EqgkGeWFJDysTtP.png)\n\n\u6839\u636e Thales' Theorem\uff0c\u7531\u4e8e $\\angle IKJ \\lt \\angle ILJ$\uff0c\u6240\u4ee5 $L$ \u5728 $\\angle IJK$ \u7684\u5916\u63a5\u5706\u5185\u3002\n\n> Thales' Theorem:\n> \n> [\u56fe\u7247\u6765\u6e90](https://link.springer.com/content/pdf/10.1007%2F978-3-540-77974-2_9)\n> \n> ![](https://i.loli.net/2020/04/15/OuAF3gNjISdG2vQ.png)\n> \n> $a, b$ \u662f\u5706 $C$ \u4e0a\u4e0e\u76f4\u7ebf $\\ell$ \u7684\u4ea4\u70b9\uff0c$p, q, r, s$ \u5728\u76f4\u7ebf $\\ell$ \u540c\u4fa7\uff0c\u5176\u4e2d $p, q$ \u5728\u5706\u4e0a\uff0c$r$ \u5728\u5706\u5185\uff0c$s$ \u5728\u5706\u5916\uff0c\u5219\u6709\u5982\u4e0b\u4e0d\u7b49\u5f0f\u6210\u7acb\uff1a$\\angle arb \\gt \\angle apb = \\angle aqb \\gt \\angle asb$\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u70b9\u5728\u4e00\u4e2a\u5df2\u77e5\u4e09\u89d2\u5f62\u7684\u5916\u63a5\u5706\u5185\uff0c\u90a3\u4e48\u8fd9\u5c31\u4e0d\u6ee1\u8db3 Delaunay \u4e09\u89d2\u5256\u5206\u7684\u7a7a\u5706\u6027\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u8981\u6362\u4e00\u79cd\u5256\u5206\u65b9\u5f0f\uff0c\u5728\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5fc5\u7136\u4f1a\u4f7f\u67d0\u4e00\u4e2a\u89d2\u53d8\u5927\uff08\u5f53\u7136\uff0c\u4e5f\u4f1a\u4f7f\u5176\u5b83\u7684\u4e00\u90e8\u5206\u89d2\u53d8\u5c0f\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u4e0d\u5408\u6cd5\u7684\u53d8\u5316\uff0c\u5373\u6700\u5c0f\u89d2\u53d8\u5f97\u66f4\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u9009\u62e9\u53e6\u5916\u4e00\u6761\u57fa\u51c6\u8fb9\u8fdb\u884c\u4fee\u6539\uff09\u3002\n\n\u552f\u4e00\u6027\u662f\u56e0\u4e3a\u6ca1\u6709\u56db\u70b9\u5171\u5706\uff0c\u4ece\u800c\u6700\u5c0f\u7684\u89d2\u5ea6\u5e8f\u5217\u662f\u552f\u4e00\u7684\uff0c\u5b83\u4e0d\u53ef\u80fd\u901a\u8fc7\u8c03\u6574\u5f97\u5230\u53e6\u4e00\u4e2a\u89d2\u5ea6\u5e8f\u5217\u4e0e\u5b83\u76f8\u540c\u7684\u4e09\u89d2\u5256\u5206\u3002\n\n\u6b64\u5916\uff0cDelaunay \u4e09\u89d2\u5256\u5206\u662f Voronoi \u56fe\uff08\u6cf0\u68ee\u591a\u8fb9\u5f62\uff09\u7684\u5bf9\u5076\u56fe\u3002\u5bf9\u5076\u56fe\u5373\u4e3a\uff0c\u5bf9\u4e8e\u4e00\u5f20\u5e73\u9762\u56fe\uff0c\u5c06\u5176\u6bcf\u5757\u533a\u57df\u62bd\u8c61\u4e3a\u5bf9\u5076\u56fe\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u5bf9\u5076\u56fe\u4e2d\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6709\u8fde\u8fb9\u5f53\u4e14\u4ec5\u5f53\u5176\u5bf9\u5e94\u533a\u57df\u6709\u516c\u5171\u8fb9\u3002\n\n---\n\n\u89e3\u51b3\u6b64\u9898\u9700\u8981\u7528\u5230\u7684\u7ed3\u8bba\uff1a\u6b27\u5f0f\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6\u662f Delaunay \u4e09\u89d2\u5256\u5206\u8fb9\u96c6\u7684\u5b50\u96c6\u3002\n\n\u4e00\u79cd\u7406\u89e3\u65b9\u6cd5\u6839\u636e Voronoi \u56fe\u3002\u7531\u4e8e Delaunay \u4e09\u89d2\u5256\u5206\u662f Voronoi \u56fe\u7684\u5bf9\u5076\u56fe\uff0c\u90a3\u4e48\u6211\u4eec\u60f3\u8c61\uff0cVoronoi \u56fe\u662f\u7531\u6bcf\u4e00\u4e2a\u70b9\u540c\u65f6\u5411\u5916\u6269\u5f20\u5f97\u5230\u7684\u3002\n\n\u82e5\u73b0\u5728\u6269\u5f20\u534a\u5f84\u4e3a $r$\uff0c\u5219\u539f\u56fe\u4e0a\u6240\u6709\u6b27\u6c0f\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $2r$ \u7684\u70b9\u90fd\u88ab\u8fde\u4e0a\u4e86\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u4e00\u4e2a Kruskal \u7684\u8fc7\u7a0b\uff0c\u5f53\u4e24\u5757\u8fde\u901a\u5757\u7b2c\u4e00\u6b21\u78b0\u649e\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u6b27\u5f0f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u4e24\u5757\u8fde\u901a\u5757\u7b2c\u4e00\u6b21\u8fde\u901a\u7684\u65f6\u5019\u3002\n\n\u53ef\u4ee5\u7ed3\u5408\u4e0b\u56fe\u8fdb\u884c\u7406\u89e3\u3002[\u56fe\u7247\u6765\u6e90](https://www.cnblogs.com/xzyxzy/p/10349399.html)\n\n![](https://i.loli.net/2020/04/12/CiKdzBtMZ3xU7Pa.gif)\n\n\u8fd8\u6709\u4e00\u79cd\u8bc1\u660e\uff0c\u4f7f\u7528\u53cd\u8bc1\u6cd5\uff0c\u8bbe\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u90a3\u6761\u4e0d\u5728 Delaunay \u4e09\u89d2\u5256\u5206\u4e2d\u7684\u8fb9\u4e3a $(a, b)$\u3002\u7531\u4e8e\u5176\u4e0d\u5728 Delaunay \u4e09\u89d2\u5256\u5206\u4e2d\uff0c\u56e0\u6b64\u4ee5\u5b83\u4e3a\u76f4\u5f84\u7684\u5706\u5185\u6216\u5706\u4e0a\uff0c\u4f1a\u5b58\u5728\u4e00\u4e2a\u5176\u5b83\u70b9 $c$\u3002\n\n\u6211\u4eec\u5c06 $(a, b)$ \u8fd9\u6761\u8fb9\u5272\u5f00\uff0c\u8fde\u63a5 $(a, c)$ \u6216 $(b, c)$\uff0c\u663e\u7136\u8fd9\u6837\u56fe\u8fd8\u662f\u8054\u901a\u7684\u3002\u4f46\u7531\u4e8e $(a, b)$ \u662f\u76f4\u5f84\uff0c\u957f\u5ea6\u5927\u4e8e $(a, c)$ \u548c $(b, c)$\u3002\u5982\u6b64\uff0c\u6211\u4eec\u627e\u5230\u4e86\u4e00\u68f5\u66f4\u4f18\u7684\u751f\u6210\u6811\uff0c\u6240\u4ee5 $(a, b)$ \u8fd9\u6837\u7684\u8fb9\u4e0d\u4f1a\u5b58\u5728\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\n\n---\n\n\u5b9e\u73b0 Delaunay \u4e09\u89d2\u5256\u5206\u7684\u82e5\u5e72\u65b9\u6cd5\u4e2d\uff0c\u4e00\u79cd\u6bd4\u8f83\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u589e\u91cf\u6784\u9020\u7684 Bowyer-Watson \u7b97\u6cd5\uff0c\u6734\u7d20\u5b9e\u73b0\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n ^ 2)$\u3002\n\nBowyer-Watson \u7b97\u6cd5\u57fa\u4e8e Delaunay \u4e09\u89d2\u5256\u5206\u7684\u5c40\u90e8\u6700\u4f18\u6027\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6784\u9020\u597d\u4e86\u524d $n - 1$ \u4e2a\u70b9\u7684 Delaunay \u4e09\u89d2\u5256\u5206\uff0c\u73b0\u5728\u63d2\u5165\u7b2c $n$ \u4e2a\u70b9\u3002\u7531\u4e8e Delaunay \u4e09\u89d2\u5256\u5206\u9700\u8981\u6ee1\u8db3\u7a7a\u5706\u7279\u6027\uff0c\u8fd9\u5f20\u5256\u51fa\u7684\u4e09\u89d2\u7f51\u4e0a\uff0c\u6240\u6709\u5185\u542b\u7b2c $n$ \u4e2a\u70b9\u7684\u4e09\u89d2\u5f62\u90fd\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u6211\u4eec\u5c06\u5176\u6254\u6389\uff0c\u5f62\u6210\u4e00\u4e2a\u5185\u90e8\u7684\u51f8\u591a\u8fb9\u5f62\u5f62\u72b6\u7684\u7a7a\u8154\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a Delaunay \u7a7a\u8154\u3002\u5f97\u5230 Delaunay \u7a7a\u8154\u540e\uff0c\u5c06\u7a7a\u8154\u4e0a\u7684\u70b9\u4e0e\u7b2c $n$ \u4e2a\u70b9\u76f8\u8fde\uff0c\u5c31\u6784\u9020\u6210\u4e86\u524d $n$ \u4e2a\u70b9\u7684 Delaunay \u4e09\u89d2\u5256\u5206\u3002\n\n[\u56fe\u7247\u6765\u6e90](https://blog.csdn.net/qq_38673350/article/details/90549904)\n\n![](https://img-blog.csdnimg.cn/20190525182457784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NjczMzUw,size_16,color_FFFFFF,t_70)\n\n\u5173\u4e8e Delaunay \u7a7a\u8154\u7684\u67e5\u627e\u4e0e\u7ef4\u62a4\uff0c\u53ef\u4ee5\u4f7f\u7528 Jonathan Shewchuk \u6559\u6388\u63d0\u51fa\u7684\u4e09\u89d2\u5f62\u94fe\u8868\u7ed3\u6784\u3002\n\n[\u56fe\u7247\u6765\u6e90](http://www.geom.uiuc.edu/~samuelp/del_project.html)\n\n![](http://www.geom.uiuc.edu/~samuelp/generic_tri.gif)\n\n\u5bf9\u4e09\u89d2\u5f62\u7684\u6bcf\u4e2a\u70b9\uff0c\u5176\u90bb\u63a5\u6307\u9488\u6307\u5411\u5b83\u5bf9\u8fb9\u6240\u76f8\u90bb\u7684\u4e09\u89d2\u5f62\u3002\u7279\u6b8a\u5730\uff0c\u82e5\u5bf9\u8fb9\u662f\u51f8\u5305\u4e0a\u7684\u8fb9\uff0c\u5916\u4fa7\u662f\u4e00\u4e2a\u65e0\u9650\u7684\u5e73\u9762\u7684\u8bdd\uff0c\u8be5\u6307\u9488\u6307\u5411 NULL\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u627e\u5230\u65b0\u52a0\u5165\u7684\u7b2c $n$ \u4e2a\u70b9\u5728\u54ea\u4e00\u4e2a\u4e09\u89d2\u5f62\u5185\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u4e09\u89d2\u5f62\u5f00\u59cb\u4e0d\u65ad\u68c0\u9a8c\u76f8\u90bb\u7684\u4e09\u89d2\u5f62\u662f\u5426\u5408\u6cd5\uff0c\u5c31\u80fd\u6269\u5f20\u51fa\u4e00\u4e2a Delaunay \u7a7a\u8154\u3002\n\n---\n\n\u53e6\u4e00\u79cd\u6bd4\u8f83\u5e38\u7528\u7684\u65b9\u6cd5\u662f Guibas\u3001Stolfi \u7684\u5206\u6cbb\u7b97\u6cd5\uff0c\u590d\u6742\u5ea6 $\\mathcal{O}(n \\log n)$\u3002\n\n[\u6b64\u90e8\u5206\u56fe\u7247\u6765\u6e90](http://www.geom.uiuc.edu/~samuelp/del_project.html)\n\n\u7b97\u6cd5\u5927\u81f4\u5982\u4e0b\uff08\u6b64\u90e8\u5206\u5f15\u7528\u56fe\u7247\u5747\u6765\u6e90\u4e8e\u4e0a\u8ff0\u6587\u7ae0\uff09\u3002\n\n\u6211\u4eec\u5c06\u8fd9\u4e9b\u70b9\u6c34\u5e73\u5e8f\u6392\u5e8f\uff0c\u5206\u6cbb\u8fdb\u884c\u5904\u7406\u3002\u5f53\u70b9\u6570\u4e0d\u8d85\u8fc7 $3$ \u65f6\uff0c\u76f4\u63a5\u6784\u9020\u8fd4\u56de\u3002\n\n![](http://www.geom.uiuc.edu/~samuelp/first_merge.gif)\n\n\u8003\u8651\u5408\u5e76\uff0c\u6211\u4eec\u9996\u5148\u627e\u5230\u4e00\u6761 Base LR-edge\uff0c\u5b83\u662f\u8fde\u63a5\u4e24\u90e8\u5206\u7684\u3001\u6700\u5e95\u4e0b\u7684\u3001\u4e14\u4e0e\u6784\u9020\u597d\u7684\u8fb9\u90fd\u4e0d\u76f8\u4ea4\u7684\u90a3\u6761\u8fb9\u3002\n\n![](http://www.geom.uiuc.edu/~samuelp/base_LR-edge.gif)\n\n\u518d\u679a\u4e3e\u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u4e24\u7aef\u70b9\u4e0a\uff0c\u4e0e\u7aef\u70b9\u76f8\u90bb\u7684\uff0c\u4e0e\u8be5\u8fb9\u5939\u89d2\u5c0f\u4e8e $\\pi$ \u7684\u6240\u6709\u70b9\u3002\u7531\u4e8e Delaunay \u4e09\u89d2\u5256\u5206\u5177\u6709\u552f\u4e00\u6027\uff0c\u8fd9\u4e48\u591a\u70b9\u4e2d\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u6ee1\u8db3\u4e0e Base LR-edge \u4e24\u7aef\u70b9\u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u4e0d\u5305\u542b\u5176\u5b83\u70b9\u3002\u201c\u6253\u64c2\u53f0\u201d \u65b9\u5f0f\u627e\u51fa\u8fd9\u4e2a\u70b9\u5373\u53ef\u3002\n\n![](http://www.geom.uiuc.edu/~samuelp/cand_final.gif)\n\n\u7136\u540e\u63d2\u5165\u8fd9\u4e2a\u70b9\u4e0e Base LR-edge \u7aef\u70b9\u4e4b\u95f4\u7684\u8fb9\uff0c\u5220\u53bb\u4e0e\u8be5\u8fb9\u76f8\u4ea4\u7684\u5df2\u6784\u9020\u597d\u7684\u8fb9\u3002\u518d\u5c06\u8be5\u8fb9\u4f5c\u4e3a Base LR-edge \u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u5230\u518d\u65e0\u6cd5\u6dfb\u52a0\u65b0\u8fb9\u4e3a\u6b62\u3002\n\n![](http://www.geom.uiuc.edu/~samuelp/final_merge.gif)\n\n\u6bcf\u6761\u8fb9\u5747\u644a\u53ea\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u56e0\u6b64\u6211\u4eec\u505a\u5230\u4e86\u7ebf\u6027\u7684\u5408\u5e76\u3002\u8fd9\u4e2a\u5206\u6cbb\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n \\log n)$\u3002\n\n---\n\n\u53e6\u5916\uff0c\u5bf9\u4e8e\u7cbe\u5ea6\u8981\u683c\u5916\u6ce8\u610f\u3002\n\n\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u4e00\u4e2a\u70b9 $P$ \u662f\u5426\u5728\u4e09\u4e2a\u70b9 $A, B, C$ \u7684\u5916\u63a5\u5706\u5185\u3002\u4e00\u822c\u7684\u60f3\u6cd5\u662f\uff1a\n\n1. \u6c42\u51fa $AB, BC$ \u7684\u4e2d\u5782\u7ebf\uff0c\u6c42\u4ea4\u5f97\u5230\u5706\u5fc3\uff0c\u5728\u7b97\u51fa\u534a\u5f84\uff0c\u7136\u540e\u6bd4\u8f83\u5706\u5fc3\u5230 $P$ \u7684\u8ddd\u79bb\u548c\u534a\u5f84\u6765\u786e\u5b9a $P$ \u662f\u5426\u5728\u5706\u5185\u3002\n2. \u6839\u636e\u53c9\u79ef\u5224\u65ad $C, P$ \u662f\u5426\u5728 $AB$ \u540c\u4fa7\u3002\u82e5\u5728\u540c\u4fa7\uff0c\u5219 $P$ \u5728\u5706\u5185\u7684\u5145\u8981\u6761\u4ef6\u4e3a $\\angle APB \\gt \\angle ACB$\uff0c\u6839\u636e\u540c\u5f26\u6240\u5bf9\u5706\u5468\u89d2\u76f8\u7b49\u53ef\u4ee5\u7b80\u5355\u8bc1\u660e\uff1b\u82e5\u5728\u5f02\u4fa7\uff0c\u5219 $P$ \u5728\u5706\u5185\u7684\u5145\u8981\u6761\u4ef6\u4e3a $\\angle APB + \\angle ACB \\gt 180 ^ {\\circ}$\uff0c\u6839\u636e\u5706\u5185\u63a5\u56db\u8fb9\u5f62\u5bf9\u89d2\u4e92\u8865\u53ef\u4ee5\u7b80\u5355\u8bc1\u660e\u3002\n\n\u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u7cbe\u5ea6\u4e22\u5931\u90fd\u975e\u5e38\u4e25\u91cd\uff0c\u4e0d\u5b9c\u4f7f\u7528\u3002\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u7528\u4e09\u7ef4\u51e0\u4f55\u8fdb\u884c\u5224\u65ad\u3002\n\n\u5c06\u6bcf\u4e00\u4e2a\u5e73\u9762\u5185\u7684\u70b9 $N(x, y)$ \u6620\u5c04\u5230\u7a7a\u95f4\u5185\u7684 $N'(x, y, x ^ 2 + y ^ 2)$\u3002\u5219\u70b9 $P$ \u5728 $ABC$ \u7684\u5916\u63a5\u5706\u5185\u7684\u5145\u8981\u6761\u4ef6\u4e3a\uff0c\u70b9 $P'$ \u5728 $A'B'C'$ \u4e09\u70b9\u6240\u6784\u6210\u5e73\u9762\u4e4b\u4e0b\u3002\n\n[\u56fe\u7247\u6765\u6e90](https://www.cnblogs.com/darklove/p/8056097.html)\n\n![](https://i.loli.net/2020/04/16/85MJpUD49LaKI2v.png)\n\n\u6b64\u90e8\u5206\u53c2\u8003\u4e86\u5468\u96e8\u626c\u7684\u300aIOI2020\u4e2d\u56fd\u56fd\u5bb6\u96c6\u8bad\u961f\u4f5c\u4e1a\u89e3\u9898\u62a5\u544a\u300bSasha Circle \u90e8\u5206\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\uff0c\u6211\u4eec\u4e0d\u59a8\u8bbe\u8be5\u5e73\u9762\u65b9\u7a0b\u4e3a $ax+by+z=c$\u3002\u5219 $A',B',C'$ \u4e09\u70b9\u90fd\u843d\u5728\u8be5\u5e73\u9762\u4e0e\u629b\u7269\u9762 $z=x^2+y^2$ \u76f8\u4ea4\u7684\u4f4d\u7f6e\u4e0a\u3002\u5bf9\u4e8e\u629b\u7269\u9762\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u6240\u6709\u5728\u88ab\u622a\u56fe\u5f62\u5185\u90e8\u7684\u70b9\u90fd\u843d\u5728\u4e86\u5e73\u9762\u4e4b\u4e0b\uff0c\u5176\u4f59\u70b9\u90fd\u843d\u5728\u4e86\u5e73\u9762\u4e4b\u4e0a\u3002\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u53ea\u9700\u8bc1\u660e\uff0c\u5e73\u9762 $ax+by+z=c$ \u622a\u629b\u7269\u9762 $z=x^2+y^2$ \u5728\u5e73\u9762 $z=0$ \u7684\u6295\u5f71\u4e0a\u4e3a\u4e00\u4e2a\u5706\u3002\n\n\u5217\u65b9\u7a0b\u5f97 $ax+by+x^2+y^2=c$\uff0c\u914d\u65b9\u5f97 $\\displaystyle \\left(x+ \\frac{a}{2} \\right)^2+\\left(y+\\frac{b}{2}\\right)^2=c+\\frac{a^2+b^2}{4}$\u3002\u8fd9\u5373\u4e3a\u5706\u7684\u65b9\u7a0b\u3002\n\n\u8fd9\u5c31\u8bc1\u660e\u4e86\uff0c\u5e73\u9762 $z=0$ \u4e0a\u6240\u6709\u5728\u5706\u5185\u90e8\u7684\u70b9\uff0c\u6620\u5c04\u5230\u629b\u7269\u9762\u4e0a\u4f1a\u843d\u5728\u88ab\u622a\u533a\u57df\u4e2d\u95f4\uff0c\u4f4d\u4e8e\u5e73\u9762 $ax+by+z=c$ \u4e4b\u4e0b\uff1b\u6240\u6709\u4e0d\u5728\u5706\u5185\u90e8\u7684\u70b9\uff0c\u5c31\u4f4d\u4e8e\u5e73\u9762 $ax+by+z=c$ \u4e4b\u4e0a\u3002\n\n\u5224\u65ad\u70b9\u4e0e\u5e73\u9762\u5173\u7cfb\uff0c\u53ef\u4ee5\u5148\u4e09\u7ef4\u53c9\u79ef\u7b97\u51fa\u5e73\u9762\u7684\u6cd5\u7ebf\uff0c\u518d\u7528\u4e09\u7ef4\u70b9\u79ef\u5224\u65ad\u4e0e\u6cd5\u7ebf\u5939\u89d2\u4e3a\u9510\u89d2\u8fd8\u662f\u949d\u89d2\uff0c\u4ece\u800c\u53ef\u4ee5\u786e\u5b9a\u8be5\u70b9\u5728\u5e73\u9762\u4e4b\u4e0a\u8fd8\u662f\u5e73\u9762\u4e4b\u4e0b\u3002\n\n\u8fd9\u79cd\u65b9\u6cd5\u7cbe\u5ea6\u8f83\u9ad8\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u51cf\u5c0f\u8bef\u5dee\u3002\n\n---\n\n\u5bf9\u4e8e\u672c\u9898\uff0c\u5206\u6cbb\u6c42\u4e00\u4e0b Delaunay \u4e09\u89d2\u5256\u5206\uff0c\u7136\u540e\u518d\u8dd1\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u5373\u53ef\u3002\n\n\u53ef\u4e3a\u4ec0\u4e48\u8fb9\u6570\u662f\u6b63\u786e\u7684\u5462\uff1f\u6211\u4eec\u8bbe\u603b\u70b9\u6570\u4e3a $n ~ (= V)$\uff0c\u51f8\u5305\u4e0a\u7684\u70b9\u6709 $k$ \u4e2a\uff0c\u4e09\u89d2\u5f62\u4e2a\u6570\u4e3a $m$\uff0c\u5219\u9762\u6570 $F = m + 1$\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u5b83\u6709\u4e09\u6761\u8fb9\u76f8\u90bb\uff0c\u51f8\u5305\u4e0a\u6709 $k$ \u6761\u8fb9\uff0c\u4e14\u6bcf\u6761\u8fb9\u53ea\u4e0e\u4e24\u4e2a\u9762\u76f8\u4ea4\uff08\u6291\u6216\u662f\u4e09\u89d2\u5f62\u4e0e\u4e09\u89d2\u5f62\uff0c\u6291\u6216\u662f\u4e09\u89d2\u5f62\u4e0e\u5916\u4fa7\u7684\u65e0\u7a77\u5e73\u9762\uff09\uff0c\u6545\u800c\u5f97\u51fa\u8fb9\u6570\u7684\u8868\u8fbe\u5f0f $E = \\dfrac{(3m + k)}{2}$\u3002\u4ee3\u5165\u6b27\u62c9\u516c\u5f0f $V - E + F = 2$\uff0c\u89e3\u5f97 $m = 2n - 2 - k$\uff0c\u4ece\u800c\u63a8\u51fa $E = 3n - 3 - k$\u3002\n\n\u5bf9\u4e8e\u4e00\u822c\u60c5\u51b5\uff0c\u51f8\u5305\u4e0a\u7684\u70b9\u6570\u81f3\u5c11\u4e3a $3$\uff0c\u6545\u800c\u8fb9\u6570\u4e0d\u4f1a\u8d85\u8fc7 $3n - 6$\u3002\u8fdb\u800c\u5c06\u7a20\u5bc6\u56fe\u95ee\u9898\u8f6c\u5316\u4e3a\u7a00\u758f\u56fe\u95ee\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u81f3 $\\mathcal{O}(n \\log n)$\u3002\n\n---\n\n\u4ee3\u7801\uff1a\n\nBowyer-Watson\uff0850 \u5206\uff09\uff1a\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <utility>\n#include <vector>\n\nconst int MaxN = 5005;\nconst int MaxF = 200000;\nconst double eps = 1e-9;\n\n#ifdef Tweetuzki\n#define debug(arg...) fprintf(stderr, arg)\n#else\n#define debug(arg...) void(0)\n#endif\n\ntypedef struct vec_t {\n  double x, y;\n  vec_t(double _x = 0, double _y = 0) { x = _x, y = _y; }\n  inline friend vec_t operator+(const vec_t &a, const vec_t &b) { return vec_t(a.x + b.x, a.y + b.y); }\n  inline friend vec_t operator-(const vec_t &a, const vec_t &b) { return vec_t(a.x - b.x, a.y - b.y); }\n  inline friend vec_t operator*(const vec_t &a, double k) { return vec_t(a.x * k, a.y * k); }\n  inline friend double dot(const vec_t &a, const vec_t &b) { return a.x * b.x + a.y * b.y; }\n  inline friend double cross(const vec_t &a, const vec_t &b) { return a.x * b.y - a.y * b.x; }\n  inline friend double mod(const vec_t &a) { return sqrt(a.x * a.x + a.y * a.y); }\n\n  inline void shake() {\n    if (rand() % 2 == 0) x += 1.0 * rand() / RAND_MAX * eps;\n    else x -= 1.0 * rand() / RAND_MAX * eps;\n    if (rand() % 2 == 0) y += 1.0 * rand() / RAND_MAX * eps;\n    else y -= 1.0 * rand() / RAND_MAX * eps;\n  }\n} node_t;\n\ntypedef struct vec3_t {\n  double x, y, z;\n  vec3_t(double _x = 0, double _y = 0, double _z = 0) { x = _x, y = _y, z = _z; }\n  inline friend vec3_t operator+(const vec3_t &a, const vec3_t &b) { return vec3_t(a.x + b.x, a.y + b.y, a.z + b.z); }\n  inline friend vec3_t operator-(const vec3_t &a, const vec3_t &b) { return vec3_t(a.x - b.x, a.y - b.y, a.z - b.z); }\n  inline friend vec3_t operator*(const vec3_t &a, double k) { return vec3_t(a.x * k, a.y * k, a.z * k); }\n  inline friend vec3_t cross(const vec3_t &a, const vec3_t &b) { return vec3_t(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x); }\n  inline friend double dot(const vec3_t &a, const vec3_t &b) { return a.x * b.x + a.y * b.y + a.z * b.z; }\n} node3_t;\n\nstruct triangle_t {\n  int a, b, c;\n  int la, lb, lc;\n\n  triangle_t(int _a = 0, int _b = 0, int _c = 0, int _la = 0, int _lb = 0, int _lc = 0) {\n    a = _a, b = _b, c = _c;\n    la = _la, lb = _lb, lc = _lc;\n  }\n};\n\nstruct edge_t {\n  int u, v;\n  double w;\n  edge_t(int _u = 0, int _v = 0, double _w = 0) { u = _u, v = _v, w = _w; }\n  inline friend bool operator<(const edge_t &a, const edge_t &b) { return a.w < b.w; }\n};\n\nint N, CntF;\nnode_t A[MaxN + 5];\ntriangle_t F[MaxF + 5];\nbool Del[MaxF + 5];\n\ninline vec3_t mapping(const vec_t &a) { return vec3_t(a.x, a.y, a.x * a.x + a.y * a.y); }\n\ninline bool inCircumcircle(const node_t &a, const node_t &b, const node_t &c, const node_t &p) {\n  node3_t _a = mapping(a), _b = mapping(b), _c = mapping(c), _p = mapping(p);\n  if (cross(b - a, c - a) < 0) std::swap(_b, _c);\n  node3_t normal = cross(_b - _a, _c - _a);\n  if (dot(normal, _p - _a) > eps) return false;\n  else return true;\n}\n\ninline bool inCircumcircle(const triangle_t &t, const node_t &p) { return inCircumcircle(A[t.a], A[t.b], A[t.c], p); }\n\nvoid init() {\n  scanf(\"%d\", &N);\n  for (int i = 1; i <= N; ++i) {\n    scanf(\"%lf %lf\", &A[i].x, &A[i].y);\n    A[i].shake();\n  }\n  A[N + 1] = node_t(-1e6, -1e6), A[N + 2] = node_t(-1e6, 1e6);\n  A[N + 3] = node_t(1e6, -1e6), A[N + 4] = node_t(1e6, 1e6);\n  F[++CntF] = triangle_t(N + 1, N + 3, N + 2, 2, 0, 0);\n  F[++CntF] = triangle_t(N + 4, N + 2, N + 3, 1, 0, 0);\n}\n\nstd::vector< std::pair<int, int> > Lk[MaxN + 5];\nint To[MaxN + 5], Tof[MaxN + 5];\nint NodeStk[MaxN + 5], NodeTp;\n\nvoid dfs(int u, int f, int beg) {\n  debug(\"dfs(%d, %d, %d)\\n\", u, f, beg);\n  if (u == beg) {\n    if (f != 0) return;\n    NodeStk[NodeTp++] = u;\n    auto p = *(Lk[u].begin());\n    To[u] = p.first;\n    Tof[u] = p.second;\n    dfs(p.first, u, beg);\n  } else {\n    NodeStk[NodeTp++] = u;\n    for (auto p : Lk[u]) {\n      if (p.first == f) continue;\n      To[u] = p.first;\n      Tof[u] = p.second;\n      dfs(p.first, u, beg);\n    }\n  }\n}\n\ninline bool cmp(int a, int b, int c, int d) {\n  if (a == c && b == d) return true;\n  if (a == d && b == c) return true;\n  return false;\n}\n\ninline void insert(int insertNode) {\n  static int stk[MaxF + 5];\n  int tp = 0;\n  for (int i = 1; i <= CntF; ++i)\n    if (Del[i] == false && inCircumcircle(F[i], A[insertNode]) == true) {\n      stk[++tp] = i;\n      Del[i] = true;\n    }\n  for (int i = 1; i <= tp; ++i) debug(\"stk[%d] = %d\\n\", i, stk[i]);\n  static int e[MaxF + 5][3]; int cnte = 0;\n  for (int i = 1; i <= tp; ++i) {\n    int x = stk[i];\n    if (F[x].la == 0) {\n      cnte++;\n      e[cnte][0] = F[x].b, e[cnte][1] = F[x].c, e[cnte][2] = 0;\n    } else if (inCircumcircle(F[F[x].la], A[insertNode]) == false) {\n      int y = F[x].la;\n      cnte++;\n      if (F[y].la == x) {\n        F[y].la = -1;\n        e[cnte][0] = F[y].b, e[cnte][1] = F[y].c, e[cnte][2] = y;\n      } else if (F[y].lb == x) {\n        F[y].lb = -1;\n        e[cnte][0] = F[y].a, e[cnte][1] = F[y].c, e[cnte][2] = y;\n      } else {\n        F[y].lc = -1;\n        e[cnte][0] = F[y].a, e[cnte][1] = F[y].b, e[cnte][2] = y;\n      }\n    }\n    if (F[x].lb == 0) {\n      cnte++;\n      e[cnte][0] = F[x].a, e[cnte][1] = F[x].c, e[cnte][2] = 0;\n    } else if (inCircumcircle(F[F[x].lb], A[insertNode]) == false) {\n      int y = F[x].lb;\n      cnte++;\n      if (F[y].la == x) {\n        F[y].la = -1;\n        e[cnte][0] = F[y].b, e[cnte][1] = F[y].c, e[cnte][2] = y;\n      } else if (F[y].lb == x) {\n        F[y].lb = -1;\n        e[cnte][0] = F[y].a, e[cnte][1] = F[y].c, e[cnte][2] = y;\n      } else {\n        F[y].lc = -1;\n        e[cnte][0] = F[y].a, e[cnte][1] = F[y].b, e[cnte][2] = y;\n      }\n    }\n    if (F[x].lc == 0) {\n      cnte++;\n      e[cnte][0] = F[x].a, e[cnte][1] = F[x].b, e[cnte][2] = 0;\n    } else if (inCircumcircle(F[F[x].lc], A[insertNode]) == false) {\n      int y = F[x].lc;\n      cnte++;\n      if (F[y].la == x) {\n        F[y].la = -1;\n        e[cnte][0] = F[y].b, e[cnte][1] = F[y].c, e[cnte][2] = y;\n      } else if (F[y].lb == x) {\n        F[y].lb = -1;\n        e[cnte][0] = F[y].a, e[cnte][1] = F[y].c, e[cnte][2] = y;\n      } else {\n        F[y].lc = -1;\n        e[cnte][0] = F[y].a, e[cnte][1] = F[y].b, e[cnte][2] = y;\n      }\n    }\n  }\n  for (int i = 1; i <= cnte; ++i)\n    debug(\"e[%d] = (%d, %d, %d)\\n\", i, e[i][0], e[i][1], e[i][2]);\n  for (int i = 1; i <= cnte; ++i) {\n    Lk[e[i][0]].emplace_back(e[i][1], e[i][2]);\n    Lk[e[i][1]].emplace_back(e[i][0], e[i][2]);\n  }\n  NodeTp = 0;\n  dfs(e[1][0], 0, e[1][0]);\n  for (int i = 0; i < NodeTp; ++i)\n    debug(\"node = %d, to = %d, tof = %d\\n\", NodeStk[i], To[NodeStk[i]], Tof[NodeStk[i]]);\n  for (int i = 0; i < NodeTp; ++i) {\n    int id = CntF + (i % NodeTp) + 1;\n    F[id] = triangle_t(insertNode, NodeStk[i], To[NodeStk[i]], Tof[NodeStk[i]], CntF + ((i + 1) % NodeTp) + 1, CntF + ((i - 1 + NodeTp) % NodeTp) + 1);\n    if (Tof[NodeStk[i]] != 0) {\n      int y = Tof[NodeStk[i]];\n      if (F[y].la == -1 && cmp(NodeStk[i], To[NodeStk[i]], F[y].b, F[y].c)) F[y].la = id;\n      if (F[y].lb == -1 && cmp(NodeStk[i], To[NodeStk[i]], F[y].a, F[y].c)) F[y].lb = id;\n      if (F[y].lc == -1 && cmp(NodeStk[i], To[NodeStk[i]], F[y].a, F[y].b)) F[y].lc = id;\n    }\n  }\n  CntF += NodeTp;\n  for (int i = 0; i < NodeTp; ++i) Lk[NodeStk[i]].clear();\n  for (int i = 1; i <= CntF; ++i)\n    debug(\"i = %d, a = %d, b = %d, c = %d, la = %d, lb = %d, lc = %d, del = %d\\n\", i, F[i].a, F[i].b, F[i].c, F[i].la, F[i].lb, F[i].lc, Del[i]);\n}\n\nint CntE, Par[MaxN + 5];\nedge_t ME[MaxF + 5];\n\nint find(int x) { return x == Par[x] ? x : Par[x] = find(Par[x]); }\n\nvoid solve() {\n  for (int i = 1; i <= N; ++i) insert(i);\n  for (int i = 1; i <= CntF; ++i)\n    if (Del[i] == false) debug(\"i = %d, a = %d, b = %d, c = %d, l = (%d, %d, %d)\\n\", i, F[i].a, F[i].b, F[i].c, F[i].la, F[i].lb, F[i].lc);\n  for (int i = 1; i <= N; ++i) Par[i] = i;\n  for (int i = 1; i <= CntF; ++i) {\n    if (F[i].a <= N && F[i].b <= N) ME[++CntE] = edge_t(F[i].a, F[i].b, mod(A[F[i].a] - A[F[i].b]));\n    if (F[i].a <= N && F[i].c <= N) ME[++CntE] = edge_t(F[i].a, F[i].c, mod(A[F[i].a] - A[F[i].c]));\n    if (F[i].b <= N && F[i].c <= N) ME[++CntE] = edge_t(F[i].b, F[i].c, mod(A[F[i].b] - A[F[i].c]));\n  }\n  std::sort(ME + 1, ME + 1 + CntE);\n  double ans = 0;\n  for (int i = 1; i <= CntE; ++i) {\n    int p = find(ME[i].u), q = find(ME[i].v);\n    if (p != q) {\n      Par[p] = q;\n      ans += ME[i].w;\n    }\n  }\n  printf(\"%lf\\n\", ans);\n}\n\nint main() {\n#ifdef Tweetuzki\n  freopen(\"input.txt\", \"r\", stdin);\n  freopen(\"output.txt\", \"w\", stdout);\n  freopen(\"errorfile.txt\", \"w\", stderr);\n#endif\n  init();\n  solve();\n  return 0;\n}\n```\n\nGuibas-Stolfi\uff1a\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n\nconst int MaxN = 100000, MaxM = 2000000;\nconst double eps = 1e-9;\n\ntypedef struct vec_t {\n  double x, y;\n  vec_t(double _x = 0, double _y = 0) { x = _x, y = _y; }\n  inline friend vec_t operator+(const vec_t &a, const vec_t &b) { return vec_t(a.x + b.x, a.y + b.y); }\n  inline friend vec_t operator-(const vec_t &a, const vec_t &b) { return vec_t(a.x - b.x, a.y - b.y); }\n  inline friend vec_t operator*(const vec_t &a, double k) { return vec_t(a.x * k, a.y * k); }\n  inline friend double dot(const vec_t &a, const vec_t &b) { return a.x * b.x + a.y * b.y; }\n  inline friend double cross(const vec_t &a, const vec_t &b) { return a.x * b.y - a.y * b.x; }\n  inline friend double mod(const vec_t &a) { return sqrt(a.x * a.x + a.y * a.y); }\n\n  inline void shake() {\n    if (rand() % 2 == 0) x += 1.0 * rand() / RAND_MAX * eps;\n    else x -= 1.0 * rand() / RAND_MAX * eps;\n    if (rand() % 2 == 0) y += 1.0 * rand() / RAND_MAX * eps;\n    else y -= 1.0 * rand() / RAND_MAX * eps;\n  }\n} node_t;\n\ntypedef struct vec3_t {\n  double x, y, z;\n  vec3_t(double _x = 0, double _y = 0, double _z = 0) { x = _x, y = _y, z = _z; }\n  inline friend vec3_t operator+(const vec3_t &a, const vec3_t &b) { return vec3_t(a.x + b.x, a.y + b.y, a.z + b.z); }\n  inline friend vec3_t operator-(const vec3_t &a, const vec3_t &b) { return vec3_t(a.x - b.x, a.y - b.y, a.z - b.z); }\n  inline friend vec3_t cross(const vec3_t &a, const vec3_t &b) { return vec3_t(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x); }\n  inline friend double dot(const vec3_t &a, const vec3_t &b) { return a.x * b.x + a.y * b.y + a.z * b.z; }\n} node3_t;\n\nstruct Graph {\n  int cnte;\n  int head[MaxN + 5], to[MaxM * 2 + 5];\n  int pre[MaxM * 2 + 5], nxt[MaxM * 2 + 5];\n\n  Graph() {\n    cnte = 1;\n    memset(head, 0, sizeof head);\n    memset(to, 0, sizeof to);\n    memset(pre, 0, sizeof pre);\n    memset(nxt, 0, sizeof nxt);\n  }\n\n  inline void addEdge(int u, int v) {\n    cnte++;\n    to[cnte] = v;\n    nxt[cnte] = head[u];\n    pre[head[u]] = cnte;\n    head[u] = cnte;\n  }\n\n  inline void delEdge(int id) {\n    if (pre[id] != 0) nxt[pre[id]] = nxt[id];\n    if (nxt[id] != 0) pre[nxt[id]] = pre[id];\n    if (head[to[id ^ 1]] == id) head[to[id ^ 1]] = nxt[id];\n  }\n};\n\nstruct Tree {\n  int cnte;\n  int head[MaxN + 5], nxt[MaxN * 2 + 5], to[MaxN * 2 + 5];\n  double val[MaxN * 2 + 5];\n\n  inline void addEdge(int u, int v, double w) {\n    cnte++; to[cnte] = v; val[cnte] = w;\n    nxt[cnte] = head[u]; head[u] = cnte;\n  }\n};\n\nstruct edge_t {\n  int u, v;\n  double w;\n  edge_t(int _u = 0, int _v = 0, double _w = 0) { u = _u, v = _v, w = _w; }\n  inline friend bool operator<(const edge_t &a, const edge_t &b) { return a.w < b.w; }\n};\n\nint N, M, Q;\nnode_t A[MaxN + 5], MemoryA[MaxN + 5];\nint Indice[MaxN + 5];\nint Par[MaxN + 5];\nedge_t E[MaxM + 5];\nGraph Gr;\nclock_t st = clock();\n\ntemplate <typename Int>\ninline Int max(Int a, Int b) { return a > b ? a : b; }\n\ninline node3_t mapping(const node_t &a) { return vec3_t(a.x, a.y, a.x * a.x + a.y * a.y); }\n\ninline bool inCircumcircle(const node_t &a, const node_t &b, const node_t &c, const node_t &p) {\n  node3_t _a = mapping(a), _b = mapping(b), _c = mapping(c), _p = mapping(p);\n  if (cross(b - a, c - a) < 0) std::swap(_b, _c);\n  node3_t normal = cross(_b - _a, _c - _a);\n  if (dot(normal, _p - _a) > eps) return false;\n  else return true;\n}\n\ninline bool intersect(const node_t &a, const node_t &b, const node_t &c, const node_t &d) {\n  if (cross(c - a, b - a) * cross(b - a, d - a) < eps) return false;\n  if (cross(a - d, c - d) * cross(c - d, b - d) < eps) return false;\n  return true;\n}\n\nvoid init() {\n  srand(20040313U);\n  scanf(\"%d\", &N);\n  for (int i = 1; i <= N; ++i) {\n    double x, y;\n    scanf(\"%lf %lf\", &x, &y);\n    A[i].x = x, A[i].y = y;\n    MemoryA[i] = A[i];\n    A[i].shake();\n  }\n}\n\ninline bool levelCompare(int x, int y) { return A[x].x < A[y].x; }\n\ninline std::pair<int, int> getInitialBaseEdge(int l, int r) {\n  int m = (l + r) >> 1;\n  static int stk[MaxN + 5];\n  int tp = 0;\n  stk[++tp] = l, stk[++tp] = l + 1;\n  for (int i = l + 2; i <= r; ++i) {\n    while (tp > 1 && cross(A[Indice[stk[tp]]] - A[Indice[stk[tp - 1]]], A[Indice[i]] - A[Indice[stk[tp]]]) < eps) tp--;\n    stk[++tp] = i;\n  }\n  for (int i = 1; i < tp; ++i)\n    if (stk[i] <= m && stk[i + 1] > m) return std::make_pair(Indice[stk[i]], Indice[stk[i + 1]]);\n  return std::make_pair(-1, -1);\n}\n\nvoid fun(int l, int r) {\n  if (l == r) return;\n  if (l + 1 == r) {\n    Gr.addEdge(Indice[l], Indice[r]);\n    Gr.addEdge(Indice[r], Indice[l]);\n    return;\n  }\n  if (l + 2 == r) {\n    Gr.addEdge(Indice[l], Indice[l + 1]);\n    Gr.addEdge(Indice[l + 1], Indice[l]);\n    Gr.addEdge(Indice[l], Indice[l + 2]);\n    Gr.addEdge(Indice[l + 2], Indice[l]);\n    Gr.addEdge(Indice[l + 1], Indice[l + 2]);\n    Gr.addEdge(Indice[l + 2], Indice[l + 1]);\n    return;\n  }\n  int m = (l + r) >> 1;\n  fun(l, m), fun(m + 1, r);\n  std::pair<int, int> base = getInitialBaseEdge(l, r);\n  for (;;) {\n    Gr.addEdge(base.first, base.second);\n    Gr.addEdge(base.second, base.first);\n    int leftFinal = -1, rightFinal = -1;\n    for (int i = Gr.head[base.first]; i; i = Gr.nxt[i]) {\n      int candidate = Gr.to[i];\n      if (cross(A[base.second] - A[base.first], A[candidate] - A[base.first]) < eps) continue;\n      if (leftFinal == -1 || inCircumcircle(A[base.first], A[base.second], A[leftFinal], A[candidate]) == true)\n        leftFinal = candidate;\n    }\n    for (int i = Gr.head[base.second]; i; i = Gr.nxt[i]) {\n      int candidate = Gr.to[i];\n      if (cross(A[candidate] - A[base.second], A[base.first] - A[base.second]) < eps) continue;\n      if (rightFinal == -1 || inCircumcircle(A[base.first], A[base.second], A[rightFinal], A[candidate]) == true)\n        rightFinal = candidate;\n    }\n    if (leftFinal == -1 && rightFinal == -1) break;\n    if (leftFinal != -1 && rightFinal != -1) {\n      if (inCircumcircle(A[base.first], A[base.second], A[leftFinal], A[rightFinal]) == true) leftFinal = -1;\n      else rightFinal = -1;\n    }\n    if (leftFinal != -1) {\n      for (int i = Gr.head[base.first]; i; i = Gr.nxt[i]) {\n        int linknode = Gr.to[i];\n        if (intersect(base.second, leftFinal, base.first, linknode) == true) {\n          Gr.delEdge(i);\n          Gr.delEdge(i ^ 1);\n        }\n      }\n      base = std::make_pair(leftFinal, base.second);\n    } else {\n      for (int i = Gr.head[base.second]; i; i = Gr.nxt[i]) {\n        int linknode = Gr.to[i];\n        if (intersect(base.first, rightFinal, base.second, linknode) == true) {\n          Gr.delEdge(i);\n          Gr.delEdge(i ^ 1);\n        }\n      }\n      base = std::make_pair(base.first, rightFinal);\n    }\n  }\n}\n\nint find(int x) { return x == Par[x] ? x : Par[x] = find(Par[x]); }\n\nvoid solve() {\n  for (int i = 1; i <= N; ++i) Indice[i] = i;\n  std::sort(Indice + 1, Indice + 1 + N, levelCompare);\n  fun(1, N);\n  fprintf(stderr, \"Delaunay = %lf s\\n\", 1.0 * (clock() - st) / CLOCKS_PER_SEC);\n  for (int u = 1; u <= N; ++u)\n    for (int i = Gr.head[u]; i; i = Gr.nxt[i]) {\n      int v = Gr.to[i];\n      if (u < v) E[++M] = edge_t(u, v, mod(MemoryA[v] - MemoryA[u]));\n    }\n  double ans = 0;\n  std::sort(E + 1, E + 1 + M);\n  for (int i = 1; i <= N; ++i) Par[i] = i;\n  for (int i = 1; i <= M; ++i) {\n    int u = E[i].u, v = E[i].v;\n    double w = E[i].w;\n    int p = find(u), q = find(v);\n    if (p != q) {\n      ans += w;\n      Par[p] = q;\n    }\n  }\n  printf(\"%lf\\n\", ans);\n}\n\nint main() {\n  init();\n  solve();\n  return 0;\n}\n```",
        "postTime": 1586673963,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6362 \u3010\u5e73\u9762\u6b27\u51e0\u91cc\u5f97\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "upd 4.12\uff1a\u4fee\u590d\u82e5\u5e72\u6392\u7248\uff0c\u8bed\u8a00\u9519\u8bef\n\nupd 4.14\uff1aKDT+boruvka\u4e0d\u662f\u6b64\u9898\u6b63\u89e3\uff0c\u65f6\u9650\u5f00\u5c0f\u4e4b\u540e\u65e0\u6cd5\u901a\u8fc7\u6b64\u9898\uff0c\u6b64\u9898\u89e3\u4ec5\u4f9b\u62d3\u5c55\u601d\u8def\n\n#### \u5c0f\u5c0f\u7684\u5410\u69fd\u4e00\u4e0b\n\nKD\u6811\u5e38\u6570\u771f\u5927...\n\n\u4e00\u4e2alog\u7684\u7384\u5b66\u505a\u6cd5\u771f\u7684\u4e0d\u61c2\uff08~~\u4eba\u50bb~~\uff09\n\n\n#### \u5410\u69fd\u7ed3\u675f\uff0c\u6b63\u6587\u5f00\u59cb\n\n\uff08\u6211\u7684\u505a\u6cd5\u7684\uff09\u524d\u7f6e\u829d\u58eb\uff1aKD\u6811\n\n\u8fd9\u9898\u662f\u8981\u6c42\u4e00\u4e2a\u5b8c\u5168\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\n\n\u90a3\u60a8\u77e5\u9053\u6709\u51e0\u79cd\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u65b9\u6cd5\u5417\uff1f\n\n\u60a8\u53ef\u80fd\u4f1a\u8bf4\uff1akruskal\uff0cprim\uff0c\u4e0d\u5c31\u4e24\u4e2a\u5417\n\n\u4f46\u5b9e\u9645\u4e0a\u8fd8\u6709\u7b2c\u4e09\u4e2a\u795e\u5947\u7684\u7b97\u6cd5\uff1aboruvka\u7b97\u6cd5\n\n\u5148\u8bf4\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7b80\u8981\u6d41\u7a0b\u5427\n\n\u6211\u4eec\u7ef4\u62a4\u56fe\u4e2d\u6240\u6709\u8fde\u901a\u5757\uff0c\u5f00\u59cb\u662f\u6bcf\u4e2a\u70b9\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8fde\u901a\u5757\uff0c\u7136\u540e\u6bcf\u4e00\u8f6e\u627e\u5230\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u548c\u5176\u4ed6\u8fde\u901a\u5757\u76f8\u8fde\u7684\u8fb9\u6743\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u5408\u5e76\u8fde\u901a\u5757\u3002\u91cd\u590d\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u6700\u540e\u5269\u4e0b\u4e00\u6574\u4e2a\u8fde\u901a\u5757\u3002\n\n\u8fd9\u6837\u6700\u591a\u4f1a\u6709$\\log n$\u8f6e\uff0c\u56e0\u4e3a\u6bcf\u8f6e\u81f3\u5c11\u51cf\u5c11\u4e00\u534a\u7684\u8fde\u901a\u5757\u7684\u4e2a\u6570\uff08\u5b9e\u9645\u4e0a\u8fdc\u8fdc\u4e0d\u5230$\\log n$\u8f6e\uff09\n\n\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u66b4\u529b\u4e0d\u662f\u4e5f\u662f$O(n^2\\log n)$\u7684\u5417\n\n\u4f46\u8fd9\u91cc\u6709\u4e00\u4e2a\u53ef\u4ee5\u4f18\u5316\u7684\u5730\u65b9\uff0c\u8fd9\u53e5\u8bdd\uff1a\u201c\u6bcf\u4e00\u8f6e\u627e\u5230\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u548c\u5176\u4ed6\u8fde\u901a\u5757\u76f8\u8fde\u7684\u8fb9\u6743\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\u3002\u201d\u76f4\u63a5\u66b4\u529b\u627e\u5c82\u4e0d\u662f\u592a\u8fc7\u66b4\u529b\uff1f\u6211\u4eec\u8003\u8651\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u627e\u201c\u548c\u5176\u4ed6\u8fde\u901a\u5757\u76f8\u8fde\u7684\u8fb9\u6743\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\u201d\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u518d\u4e00\u770b...\u8fd9\u4e0d\u662f\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u4e0b\u7684\u6700\u8fd1\u90bb\u561b...\u90a3\u597d\u529e\u4e86\uff0c\u7528KD\u6811\u7ef4\u62a4\u7f62\u3002\n\n\u90a3\u5728\u6bcf\u4e00\u8f6e\u91cc\uff0c\u4f9d\u6b21\u679a\u4e3e\u6240\u6709\u8fde\u901a\u5757\uff0c\u5bf9\u6240\u6709\u8fde\u901a\u5757\u91cc\u7684\u6bcf\u4e2a\u70b9\u90fd\u627e\u6700\u8fd1\u90bb\u4e0d\u5c31\u884c\u4e86\u3002\n\n\u5047\u7684\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u4e00\u4e2a\u70b9\u548c\u4ed6\u7684\u6700\u8fd1\u90bb\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\uff0c\u6240\u4ee5\u5728\u904d\u5386\u4e00\u4e2a\u8fde\u901a\u5757\u4e4b\u524d\uff0c\u5fc5\u987b\u8981\u628aKD\u6811\u4e2d\u5f53\u524d\u8fde\u901a\u5757\u4e2d\u6240\u6709\u70b9\u5220\u6389\uff0c\u518d\u67e5\u6700\u8fd1\u90bb\uff0c\u8fd9\u6837\u624d\u662f\u5bf9\u7684\u3002\n\n\u81f3\u4e8e\u63d2\u5165\u548c\u5220\u9664\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u53e6\u8bb0\u4e00\u4e2a\u662f\u5426\u5b58\u5728\u5c31\u884c\u4e86\u3002\n\n\u8fd8\u6709\uff0c\u67e5\u6700\u8fd1\u90bb\u4e0d\u662f\u6709\u4e2a\u6c42\u5230\u5f53\u524d\u8282\u70b9\u5de6\u53f3\u513f\u5b50\u77e9\u5f62\u7684\u6700\u8fd1\u8ddd\u79bb\u5417\uff0c\u6211\u4eec\u8ba4\u771f\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u6700\u8fd1\u8ddd\u79bb\u5728\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u4e0b\u600e\u4e48\u6c42\n\n\u6211\u4eec\u6709\u8fd9\u4e2a\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/d8is631r.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\uff08~~\u753b\u7684\u4e0d\u597d\u522b\u6253\u6211~~\uff09\n\n\u57281,3,7,9\u533a\u57df\u5185\uff0c\u6700\u5c0f\u8ddd\u79bb\u662f\u52304\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb\n\n\u800c\u57282,4,6,8\u533a\u57df\u5185\uff0c\u6700\u5c0f\u8ddd\u79bb\u662f\u52304\u4e2a\u8fb9\u7684\u8ddd\u79bb\n\n\u6700\u540e5\u533a\u57df\u6700\u5c0f\u8ddd\u79bb\u5c31\u662f0\n\n\u8fd9\u6837\u8fd9\u9898\u5c31\u53ef\u4ee5\u89e3\u51b3\u5566\n\nboruvka\u7b97\u6cd5\u6700\u591a\u4f1a\u6709$\\log n$\u8f6e\uff0c\u6bcf\u8f6e\u91cc\u904d\u5386\u4e86\u6240\u6709\u70b9\uff0c\u6bcf\u4e2a\u70b9\u63d2\u5165\u4e00\u6b21\uff0c\u5220\u9664\u4e00\u6b21\uff0c\u6700\u8fd1\u90bb\u67e5\u8be2\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f~~\u5e38\u6570\u5de8\u5927\u7684~~$O(n\\log^2 n)$\uff0c\u6700\u574f\u7406\u8bba\u590d\u6742\u5ea6\u662f$O(n\\sqrt{n}\\log n)$\uff0c\u4f46\u51e0\u4e4e\u65e0\u6cd5\u5361\u5230\u8fd9\u4e2a\u7ea7\u522b\n\n\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003\uff0c\u4e0d\u559c\u52ff\u55b7\uff08~~\u8981\u6284\u5c31\u6284\u597d\u4e86\uff0c\u73b0\u5728\u8fc7\u4e0d\u53bb\u4e86~~\uff09\n\n```cpp\n#pragma GCC optimize(2)\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=1e5+5;\n#define F first\n#define S second\nint L[N],R[N],U[N],D[N],sz[N],Px[N],Py[N],loc[N],num[N],poi[N],nst[N],fa[N],Fa[N],ls[N],rs[N];\ndouble Mn[N];\nint n,treesize,cnt,Dir,X,Y,To,rt; double ans,mn;\npair<int,int> a[N]; bool exi[N];\nstruct Poi{ int x,y; } s[N];\nbool operator < (const Poi& a, const Poi& b){ return Dir?a.y<b.y:a.x<b.x; }\nint find(int u){ return Fa[u]==u?u:Fa[u]=find(Fa[u]); }\ninline void Destroy(int now){ exi[now]=0,L[now]=R[now]=1e9,U[now]=D[now]=-1e9,sz[now]=0; }\ninline void Renew(int now){ exi[now]=1,L[now]=R[now]=Px[now],U[now]=D[now]=Py[now],sz[now]=1; }\ninline void pushup(int now){\n\tif (exi[now]) Renew(now); else Destroy(now);\n\tsz[now]+=sz[ls[now]]+sz[rs[now]];\n\tL[now]=min(L[now],min(L[ls[now]],L[rs[now]]));\n\tR[now]=max(R[now],max(R[ls[now]],R[rs[now]]));\n\tU[now]=min(U[now],min(U[ls[now]],U[rs[now]]));\n\tD[now]=max(D[now],max(D[ls[now]],D[rs[now]]));\n}\nvoid build(int& now, int l, int r, int tag){\n\tif (l>r) return;\n\tif (!now) now=++treesize;\n\tint mid=(l+r)>>1; Dir=tag;\n\tnth_element(s+l,s+mid,s+r+1);\n\tloc[mid]=now; num[now]=mid;\n\tPx[now]=L[now]=R[now]=s[mid].x;\n\tPy[now]=U[now]=D[now]=s[mid].y;\n\tsz[now]=1; exi[now]=1;\n\tbuild(ls[now],l,mid-1,tag^1); if (ls[now]) fa[ls[now]]=now;\n\tbuild(rs[now],mid+1,r,tag^1); if (rs[now]) fa[rs[now]]=now;\n\tpushup(now);\n}\ninline double dist(int x, int y){ return (double)sqrt(1ll*(x-X)*(x-X)+1ll*(y-Y)*(y-Y)); }\ninline double mndis(int now){\n\tif (!now || L[now]==1e9) return 1e9;\n\tif (X<=L[now]){\n\t\tif (Y<=U[now]) return dist(L[now],U[now]);\n\t\telse if (U[now]<=Y && Y<=D[now]) return L[now]-X;\n\t\telse return dist(L[now],D[now]);\n\t} else\n\tif (L[now]<=X && X<=R[now]){\n\t\tif (Y<=U[now]) return U[now]-Y;\n\t\telse if (U[now]<=Y && Y<=D[now]) return 0;\n\t\telse return Y-D[now];\n\t} else {\n\t\tif (Y<=U[now]) return dist(R[now],U[now]);\n\t\telse if (U[now]<=Y && Y<=D[now]) return X-R[now];\n\t\telse return dist(R[now],D[now]);\n\t}\n}\nvoid query(int now){\n\tif (!now) return;\n\tif (exi[now]){\n\t\tdouble dis=dist(Px[now],Py[now]);\n\t\tif (dis<mn) mn=dis,To=num[now];\n\t}\n\tdouble dl=mndis(ls[now]),dr=mndis(rs[now]);\n\tif (dl<dr){\n\t\tif (dl<mn) query(ls[now]);\n\t\tif (dr<mn) query(rs[now]);\n\t} else {\n\t\tif (dr<mn) query(rs[now]);\n\t\tif (dl<mn) query(ls[now]);\n\t}\n}\ninline int read(){\n\tint num=0,fu=1; char ch=getchar();\n\twhile (ch<'0' || ch>'9') fu&=(ch!='-'),ch=getchar();\n\twhile (ch>='0' && ch<='9') num=(num<<3)+(num<<1)+ch-'0',ch=getchar();\n\treturn fu?num:-num;\n}\nint main(){\n\tn=read(); L[0]=U[0]=1e9,R[0]=D[0]=-1e9;\n\tfor (int i=1; i<=n; i++) s[i].x=read(),s[i].y=read();\n\tfor (int i=1; i<=n; i++) Fa[i]=i;\n\tbuild(rt,1,n,0); cnt=n;\n\twhile (cnt>1){\n\t\tint now,k=0;\n\t\tfor (int i=1; i<=n; i++) a[i]=make_pair(find(i),i);\n\t\tsort(a+1,a+1+n);\n\t\tfor (int i=1; i<=n; i=now+1){\n\t\t\tnow=i; k++; Mn[k]=1e9; poi[k]=a[i].S;\n\t\t\twhile (a[now+1].F==a[i].F) now++;\n\t\t\tfor (int j=i; j<=now; j++){\n\t\t\t\tint u=loc[a[j].S]; Destroy(u);\n\t\t\t\twhile (fa[u]) pushup(u),u=fa[u];\n\t\t\t}\n\t\t\tfor (int j=i; j<=now; j++){\n\t\t\t\tX=s[a[j].S].x,Y=s[a[j].S].y;\n\t\t\t\tTo=0; mn=1e9; query(rt);\n\t\t\t\tif (mn<Mn[k]) Mn[k]=mn,nst[k]=To;\n\t\t\t}\n\t\t\tfor (int j=i; j<=now; j++){\n\t\t\t\tint u=loc[a[j].S]; Renew(u);\n\t\t\t\twhile (fa[u]) pushup(u),u=fa[u];\n\t\t\t}\n\t\t}\n\t\tfor (int j=1; j<=k; j++){\n\t\t\tint u=find(poi[j]),v=find(nst[j]);\n\t\t\tif (u==v) continue;\n\t\t\tFa[u]=v; ans+=Mn[j]; cnt--;\n\t\t}\n\t}\n\tprintf(\"%.6lf\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1586692042,
        "uid": 44599,
        "name": "wishapig",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6362 \u3010\u5e73\u9762\u6b27\u51e0\u91cc\u5f97\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a Bowyer-Watson \u7b97\u6cd5\u7684\u671f\u671b$O(n\\log{n})$\u5b9e\u73b0\u65b9\u6848\u3002\u6734\u7d20\u7684 Bowyer-Watson \u7b97\u6cd5\u6c42Delaunay\u4e09\u89d2\u5256\u5206\u5b9e\u73b0\u590d\u6742\u5ea6\u662f$O(n^2)$\u7684\uff0c\u800c\u6211\u4f7f\u7528\u7684\u8fd9\u4e2a\u7b97\u6cd5\u57fa\u4e8e\u7684\u662f\u968f\u673a\u589e\u91cf\u65b9\u6cd5\uff0c\u867d\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u770b\u8d77\u6765\u4e0d\u5bf9\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u662f\u968f\u673a\u7684\u9009\u62e9\u63d2\u5165\u987a\u5e8f\uff0c\u8d85\u8fc7$n\\log{n}$\u7684\u60c5\u51b5\u51e0\u4e4e\u4e0d\u5b58\u5728\u3002\n\n# \u7b97\u6cd5\u6d41\u7a0b\n\u6574\u4e2a\u7b97\u6cd5\u7684\u6d41\u7a0b\u662f\u8fd9\u6837\u7684\n1. \u4e00\u5f00\u59cb\u5148\u6784\u9020\u4e00\u4e2a\u6781\u5927\u4e09\u89d2\u5f62\uff0c\u7136\u540e\u6253\u4e71\u63d2\u5165\u70b9\u96c6\u7684\u987a\u5e8f\u3002\n2. \u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u70b9 $p$\uff0c\u786e\u5b9a\u8fd9\u4e2a\u70b9\u5728\u54ea\u4e2a\u4e09\u89d2\u5f62\uff0c\u540c\u65f6\u628a\u8fd9\u4e2a\u4e09\u89d2\u5f62\u4e09\u4e2a\u9876\u70b9\u8fde\u63a5\u63d2\u5165\u70b9\u5206\u6210\u4e09\u4efd\uff0c\u5206\u522b\u547d\u540d\u4e3a $a,b,c$\u3002\n![\u786e\u5b9a\u4e09\u89d2\u5f62](https://cdn.luogu.com.cn/upload/image_hosting/zgoiaf9m.png)\n3. \u5bf9\u4e8e $a,b,c$ \u4e09\u4e2a\u4e09\u89d2\u5f62\uff0c\u6211\u4eec\u628a\u6240\u6709\u4e0d\u5305\u542b $p$ \u7684\u8fb9\u6807\u8bb0\u4e3a\u53ef\u7591\u8fb9\u3002\n4. \u5bf9\u4e8e\u6240\u6709\u53ef\u7591\u8fb9\uff0c\u6211\u4eec\u9009\u62e9\u4e0e\u63d2\u5165\u70b9 $p$ \u6839\u636e\u53ef\u7591\u8fb9\u5bf9\u7acb\u7684\u9876\u70b9 $q$\u3002\u8bbe\u53ef\u7591\u8fb9\u4e24\u4e2a\u9876\u70b9\u4e3a $x, y$\u3002\u6b64\u65f6 $p,x,q,y$ \u7ec4\u6210\u4e86\u4e00\u4e2a\u56db\u8fb9\u5f62\uff0c\u5982\u679c $q$ \u5728 $p, x, y$ \u7ec4\u6210\u7684\u5706\u91cc\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5bf9\u56db\u8fb9\u5f62 $p,x,q,y$ \u8fdb\u884c**\u8fb9\u7ffb\u8f6c**\u64cd\u4f5c\u3002\n![\u53ef\u7591\u8fb9\u4e0e\u5bf9\u7acb\u9876\u70b9](https://cdn.luogu.com.cn/upload/image_hosting/cnc0btyg.png)\n5. \u5982\u679c\u8fdb\u884c\u4e86\u8fb9\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u6211\u4eec\u8981\u628a $qx$, $qy$ \u4e5f\u6807\u8bb0\u4e3a\u53ef\u7591\u8fb9\u3002\n6. \u5bf9\u6240\u6709\u53ef\u7591\u8fb9\u90fd\u8fdb\u884c**\u8fb9\u7ffb\u8f6c**\u64cd\u4f5c\uff0c\u5f53\u4e0d\u5b58\u5728\u4efb\u4f55\u53ef\u7591\u8fb9\u7684\u65f6\u5019\u63d2\u5165\u5c31\u7ed3\u675f\u4e86\u3002\n![\u8fb9\u7ffb\u8f6c\u64cd\u4f5c](https://cdn.luogu.com.cn/upload/image_hosting/yx3jpgky.png)\n7. \u63d2\u5165\u5b8c\u6240\u6709\u70b9\u540e\u7b97\u6cd5\u5c31\u7ed3\u675f\u4e86\u3002\n\n# \u96be\u70b9\n\u8fd9\u4e2a\u7b97\u6cd5\u672c\u8eab\u5305\u542b\u51e0\u4e2a\u96be\u70b9\uff1a\n1. \u5982\u4f55\u9ad8\u6548\u7684\u627e\u5230\u53ef\u7591\u8fb9\u548c\u5bf9\u7acb\u70b9\uff1f\n2. \u5982\u679c\u9ad8\u6548\u7684\u8fdb\u884c\u70b9\u5b9a\u4f4d\uff08Point Location\uff09\u64cd\u4f5c\uff1f\u5373\u786e\u5b9a\u63d2\u5165\u70b9\u843d\u5728\u54ea\u4e2a\u4e09\u89d2\u5f62\u5185\u90e8\uff1f\n3. \u5982\u4f55\u5224\u65ad\u70b9\u662f\u5426\u5728\u67d0\u4e09\u4e2a\u70b9\u7684\u5916\u63a5\u5706\u5185\u90e8\uff1f\n\n\u7b2c\u4e09\u4e2a\u95ee\u9898\u5728@Tweetuzki\u7684\u9898\u89e3\u91cc\u5df2\u7ecf\u89e3\u91ca\u7684\u975e\u5e38\u8be6\u7ec6\u4e86\uff0c\u6211\u8fd9\u91cc\u5c31\u76f4\u63a5\u5f15\u7528\u4ed6\u7684\u65b9\u6cd5\u4e86\u3002\n\n## \u5e73\u9762\u56fe\u8868\u793a\u65b9\u6cd5\n\u7b2c\u4e00\u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53eb\u505a**DCEL**\uff08doubly connected edge list\uff0c\u5373\u53cc\u5411\u94fe\u63a5\u8fb9\u8868\uff09\u7684\u7ed3\u6784\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u6211\u8fdb\u884c\u4e86\u4e00\u70b9\u7b80\u5316\uff0c\u4f7f\u7528\u7684\u662f\u5355\u5411\u94fe\u63a5\u8fb9\u8868\u3002\n\n\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u662f\u7531\u4e09\u4e2a\u57fa\u672c\u7ed3\u6784\u7ec4\u6210\u7684\uff0c\u6211\u4eec\u77e5\u9053\u5728\u5e73\u9762\u56fe\u4e2d\u6709\u4e09\u4e2a\u91cd\u8981\u7ec4\u6210\u5143\u7d20\uff1a**\u9876\u70b9\uff0c\u8fb9\uff0c\u9762**\u3002\n\n\u9876\u70b9\u5f88\u597d\u8868\u793a\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u5b83\u7684\u4f4d\u7f6e\u3002\n\n\u5bf9\u4e8e\u8fb9\u548c\u9762\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u66f4\u591a\u4fe1\u606f\u3002\u4e3a\u4e86\u80fd\u591f\u77e5\u9053\u8fd9\u4e2a\u8fb9\u7ec4\u6210\u4e86\u54ea\u4e2a\u9762\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u8fb9\u8fdb\u884c\u5b9a\u5411\uff0c\u5982\u679c\u67d0\u4e00\u4e9b\u8fb9\u9006\u65f6\u9488\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u9762\uff0c\u90a3\u4e48\u5c31\u8bf4\u8fd9\u4e9b\u8fb9\u662f\u8fd9\u4e2a\u9762\u7684**\u7ec4\u6210\u8fb9**\uff0c\u8fd9\u4e2a\u9762\u5c31\u6210\u4e3a\u8fd9\u4e9b\u8fb9\u7684**\u7ec4\u6210\u9762**\uff0c\u5982\u56fe\u6240\u793a\n![\u8fb9\u94fe\u8868](https://cdn.luogu.com.cn/upload/image_hosting/1e9yxim7.png)\n$A$ \u9762\u662f\u7531\u7ea2\u8272\u7684\u8fb9\u6240\u7ec4\u6210\u7684\uff0c$B$ \u9762\u662f\u7531\u84dd\u8272\u7684\u8fb9\u7ec4\u6210\u7684\uff0c\u6ce8\u610f $ac$ \u548c $ca$ \u7ec4\u6210\u7684\u9762\u662f\u4e0d\u540c\u7684\u3002\n\n\u9664\u6b64\u4e4b\u5916\uff0c\u4e3a\u4e86\u80fd\u591f\u904d\u5386\u4e00\u4e2a\u9762\u7684\u6240\u6709\u7ec4\u6210\u8fb9\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fb9\u6211\u4eec\u89c4\u5b9a\u5b83\u7684**\u524d\u9a71**\u6307\u9488\u6307\u5411\u6784\u6210\u8fd9\u4e2a\u9762\u7684\u9006\u65f6\u9488\u4e0b\u4e00\u6761\u8fb9\u3002\u6bd4\u5982\u8bf4\uff0c$ca$ \u8fd9\u6761\u8fb9\u7684**\u524d\u9a71**\u5c31\u662f\u8fb9 $ab$\u3002\n\n\u6700\u540e\uff0c\u4e3a\u4e86\u80fd\u591f\u83b7\u53d6\u5bf9\u7acb\u9876\u70b9\uff0c\u6211\u4eec\u9700\u8981\u7531\u4e00\u4e2a\u8de8\u9762\u7684\u64cd\u4f5c\uff0c\u5373\u4ece\u9762 $A$ \u8de8\u8d8a\u5230\u5b83\u7684\u90bb\u63a5\u9762 $B$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053 $ac$ \u8fb9\u7684**\u5b6a\u751f\u8fb9** $ca$ \u5373\u53ef\u3002 $ca$ \u7684\u7ec4\u6210\u9762\u5c31\u662f $B$\u3002\u6211\u4eec\u8981\u5bf9\u6bcf\u6761\u8fb9\u90fd\u7ef4\u62a4\u8fd9\u4e48\u4e00\u4e2a**\u5b6a\u751f\u8fb9**\u3002\n\n\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u83b7\u5f97 $b$ \u5bf9\u4e8e\u8fb9 $ac$ \u7684\u5bf9\u7acb\u9876\u70b9\uff0c\u53ea\u9700\u8981\u5148\u83b7\u5f97 $ac$ \u8fb9\uff0c\u7136\u540e\u627e\u5230\u5176**\u5b6a\u751f\u8fb9**\u7684\u524d\u9a71\u5373\u53ef\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u5bf9\u4e8e\u8fd9\u4e48\u4e00\u4e2a\u5e73\u9762\u7684\u56fe\u7684\u8868\u793a\uff0c\u4ee5\u4e0b\u662f\u8fd9\u4e09\u4e2a\u7ed3\u6784\u7684\u62bd\u8c61\u8868\u793a\u65b9\u6cd5\uff1a\n```cpp\nstruct Edge {\n    // \u8fb9\u7684\u8d77\u70b9\n    Vertex* from;\n    // \u8fb9\u7684\u7ec8\u70b9\n    Vertex* to;\n    // \u5b6a\u751f\u8fb9\n    Edge* twin;\n    // \u7ec4\u6210\u9762\n    Face* face;\n    // \u524d\u9a71\u8fb9\n    Edge* next;\n\n    int id;\n};\n\nstruct Face {\n    int id;\n    // \u5176\u4e2d\u4e00\u4e2a\u7ec4\u6210\u8fb9\n    Edge* edge;\n};\n\nstruct Vertex {\n    int id;\n    Vector2 pos;\n};\n\n```\n\n## \u9ad8\u6548\u70b9\u5b9a\u4f4d\n\u5728\u7ebf\u7684\u70b9\u5b9a\u4f4d\uff08Point Location\uff09\u95ee\u9898\u901a\u5e38\u9700\u8981\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982Kirpatrick\u7684\u7b97\u6cd5\u548c\u68af\u5f62\u56fe\uff08Trapezoidal Map\uff09\u7b97\u6cd5\u3002\u8fd9\u4e9b\u7b97\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u5355\u70b9\u671f\u671b $O(\\log{n})$ \u7684\u67e5\u8be2\u6548\u7387\uff0c\u4f46\u662f\u4ee3\u7801\u6781\u5176\u96be\u5199\u4e14\u8fb9\u754c\u6761\u4ef6\u4f17\u591a\u3002\uff08\u5f53\u5e74\u4e0a\u8ba1\u7b97\u51e0\u4f55\u8bfe\u5199\u8fd9\u4e2a\u5dee\u70b9\u6ca1\u628a\u6211\u9001\u8d70QAQ\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u6211\u4eec\u6709\u4e2a\u4f18\u52bf\u5c31\u662f\u53ef\u4ee5\u4f7f\u7528\u79bb\u7ebf\u7684\u7b97\u6cd5\uff0c\u800c\u4e14\u51fa\u4e4e\u610f\u6599\u7684\u662f\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u6781\u5176\u7b80\u5355\uff0c\u590d\u6742\u5ea6\u548c\u968f\u5373\u589e\u91cf\u7b97\u6cd5\u4e00\u6837\u770b\u8d77\u6765\u5f88\u9ad8\uff0c\u4f46\u662f\u7531\u4e8e\u968f\u673a\u6027\uff0c\u8fd9\u4e2a\u70b9\u5b9a\u4f4d\u53ef\u4ee5\u5728\u671f\u671b\u5747\u644a $O(n)$ \u7684\u65f6\u95f4\u89e3\u51b3\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u662f\uff0c\u5bf9\u4e8e\u6240\u6709\u4e09\u89d2\u5f62\u7684\u9762\u6211\u4eec\u7528\u4e00\u4e2a\u5217\u8868\u8bb0\u5f55\u54ea\u4e9b\u70b9\u5728\u8fd9\u4e2a\u4e09\u89d2\u5f62\u5185\uff0c\u6bcf\u6b21\u4e09\u89d2\u5f62\u6709\u53d8\u52a8\u7684\u65f6\u5019\u6211\u4eec\u66b4\u529b\u91cd\u65b0\u5206\u914d\u8fd9\u4e9b\u70b9\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\u770b\u8d77\u6765\u5f88\u66b4\u529b\uff0c\u4f46\u662f\u6548\u7387\u5947\u9ad8\uff08\u5e76\u4e0d\u662f\u56e0\u4e3a\u6570\u636e\u5f31\u54e6\uff09\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5bf9\u6bcf\u4e2a\u9876\u70b9\u7ef4\u62a4\u4e00\u4e0b\u5b83\u843d\u5728\u5c5e\u4e8e\u54ea\u4e2a\u9762\u5373\u53ef\u3002\n\n# \u5b9e\u73b0\u7ec6\u8282\n## \u8f93\u5165\u70b9\u6270\u52a8\n\u4e3a\u4e86\u907f\u514d\u91cd\u70b9\u3001\u4e09\u70b9\u5171\u7ebf\u3001\u56db\u70b9\u5171\u5706\u7b49\u7b49\u7684\u8fb9\u754c\u6761\u4ef6\uff0c\u6211\u4eec\u8981\u5148\u5bf9\u8f93\u5165\u70b9\u8fdb\u884c\u5fae\u5c0f\u6270\u52a8\u3002\n```cpp\nstatic std::mt19937 mt;\n\nvoid shake() {\n    pos.x += (mt.max() / 2 - mt()) / (double)mt.max() * 2 * EPS;\n    pos.y += (mt.max() / 2 - mt()) / (double)mt.max() * 2 * EPS;\n}\n```\n\n## \u904d\u5386\u53ef\u7591\u8fb9\n\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u786e\u8ba4\u4e86\u843d\u5728\u54ea\u4e2a\u4e09\u89d2\u5f62\u5185\u90e8\u4ee5\u540e\uff0c\u5206\u88c2\u51fa\u6765\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u7684\u5411\u5916\u7684\u8fb9\u90fd\u4f1a\u88ab\u6807\u8bb0\u4e3a\u53ef\u7591\u8fb9\uff0c\u4e3a\u4e86\u80fd\u591f\u6309\u7167\u987a\u5e8f\u5904\u7406\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\u5373\u53ef\uff0c\u8fdb\u884c\u8fb9\u7ffb\u8f6c\u4ee5\u540e\u52a0\u5165\u65b0\u7684\u53ef\u7591\u8fb9\u8fdb\u961f\u5217\u5373\u53ef\uff0c\u4f2a\u4ee3\u7801\uff1a\n```cpp\nstd::queue<Edge*> Q;\nwhile (!Q.empty()) {\n    auto curEdge = Q.front();\n    Q.pop();\n\n    // \u5982\u679c\u6ca1\u6709\u5b6a\u751f\u8fb9\u5c31\u7565\u8fc7\n    auto twin = curEdge->twin;\n    if (!twin) continue;\n\n    auto target = twin->next->to;\n    // \u5224\u65ad\u5bf9\u7acb\u9876\u70b9\u662f\u5426\u5728\u5916\u63a5\u5706\u5185\n    if (inCircumcircle(curEdge->from, curEdge->to, P, target)) {\n        // \u8fdb\u884c\u8fb9\u7ffb\u8f6c\uff0c\u540c\u65f6\u52a0\u5165\u65b0\u7684\u53ef\u7591\u8fb9\n    }\n}\n```\n\n## \u8fb9\u7ffb\u8f6c\n\u6211\u4eec\u53ea\u9700\u8981\u628a\u4e24\u4e2a\u5bf9\u7acb\u9876\u70b9\u7684\u8fb9\u7ffb\u8f6c\u5230\u53e6\u5916\u4e24\u4e2a\u5bf9\u7acb\u9876\u70b9\u5373\u53ef\uff0c\u6ce8\u610f\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u589e\u52a0\u548c\u5220\u9664\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u539f\u6765\u7684\u8fb9\u548c\u9762\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u9996\u5148\u628a\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u6362\u6389\uff0c\u7136\u540e\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u9762\uff0c\u91cd\u65b0\u8fde\u63a5\u8fb9\uff0c\u4ee5\u53ca\u524d\u9a71\u3002\n\n\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e5f\u522b\u5fd8\u4e86\u628a\u4e4b\u524d\u4e24\u4e2a\u9762\u8986\u76d6\u7684\u9876\u70b9\u62ff\u51fa\u6765\uff0c\u5e76\u4e14\u5728\u8fb9\u7ffb\u8f6c\u7ed3\u675f\u540e\u91cd\u65b0\u66f4\u65b0\u6bcf\u4e2a\u9876\u70b9\u7684\u6240\u5c5e\u9762\u3002\n![\u8fb9\u7ffb\u8f6c\u6d41\u7a0b](https://cdn.luogu.com.cn/upload/image_hosting/mg1sjyln.png)\n```cpp\nauto A = curEdge -> face;\nauto B = twin -> face;\n// \u63d0\u53d6\u51fa\u8986\u76d6\u4e86\u7684\u9876\u70b9\nstd::vector<Vertex*> cover;\nfor (auto vs : A->owned) {\n    cover.push_back(vs);\n}\nfor (auto vs : B->owned) {\n    cover.push_back(vs);\n}\n\n\n// \u91cd\u7ec4AB\u9762\n// ......\n// \u8fd9\u90e8\u5206\u4ee3\u7801\u7565\u53bb\u7559\u7ed9\u8bfb\u8005\u81ea\u5df1\u601d\u8003 \n\n\nfor (auto vs : cover) {\n    // \u5254\u9664\u6389\u6ca1\u5fc5\u8981\u66f4\u65b0\u7684\u70b9\n    if (vs->id == P->id) continue;\n    // \u6bcf\u4e2a\u9876\u70b9\u91cd\u65b0\u5224\u65ad\u6240\u5c5e\u9762\n    if (!vs->testInTriangle(A)) {\n        vs->belong = B;\n        B->owned.push_back(vs);\n    }\n}\n```\n\n## \u6253\u788e\u539f\u4e09\u89d2\u5f62\n\u4e0e\u4e0a\u9762\u7684\u8fb9\u7ffb\u8f6c\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u6ca1\u5fc5\u8981\u751f\u6210\u4e09\u4e2a\u65b0\u7684\u4e09\u89d2\u5f62\uff0c\u800c\u662f\u53ea\u751f\u6210\u4e24\u4e2a\uff0c\u7136\u540e\u53e6\u4e00\u4e2a\u4f7f\u7528\u539f\u4e09\u89d2\u5f62\u3002\u66f4\u65b0\u9876\u70b9\u6240\u5c5e\u9762\u548c\u4e0a\u9762\u4e00\u6837\u66b4\u529b\u3002\n\n\u81f3\u6b64\u8fd9\u4e2a\u968f\u673a\u589e\u91cf\u7b97\u6cd5\u7684\u5927\u90e8\u5206\u7ec6\u8282\u5c31\u90fd\u4ecb\u7ecd\u5b8c\u6bd5\u4e86\uff0c\u5bf9\u4e8e\u8fd9\u9898\u5269\u4e0b\u7684\u53ea\u8981\u904d\u5386\u6240\u6709\u8fb9\u7136\u540e\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\u3002\u622a\u6b62\u76ee\u524d\uff0c\u8fd9\u4e2a\u201c\u7eaf\u66b4\u529b\u201d\u7b97\u6cd5\u662f\u8dd1\u7684\u6700\u5feb\u7684\u63d0\u4ea4\uff0c\u6211\u7684\u4ee3\u7801\u8fd8\u6709\u5f88\u591a\u5730\u65b9\u6ca1\u6709\u4f18\u5316\uff0c\u6bd4\u5982\u628a\u6307\u9488\u66ff\u6362\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u4ee5\u53ca\u6bd4\u8f83\u4f18\u96c5\u7684\u5224\u65ad\u70b9\u662f\u5426\u5728\u9762\u5185\u7684\u7b97\u6cd5\u3002\n\n\u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0c\u968f\u673a\u5316\u601d\u60f3\u5728\u8ba1\u7b97\u51e0\u4f55\u4e2d\u7684\u91cd\u8981\u6027\uff0c\u5b83\u5141\u8bb8\u4e86\u6211\u4eec\u7528\u6781\u5176\u4f18\u96c5\u548c\u7b80\u5355\u7684\u65b9\u5f0f\u89e3\u51b3\u56f0\u96be\u7684\u95ee\u9898\u3002\n\n\n\u7b97\u6cd5\u672c\u8eab\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u76f4\u52301992\u5e74\u7684\u8bba\u6587[Randomized Incremental Construction of Delaunay and Voronoi Diagrams](http://www.wias-berlin.de/people/si/course/files/Guibas92-RandomizeIncr.pdf)\u624d\u771f\u6b63\u7684\u786e\u8ba4\u4e3a\u671f\u671b$O(n\\log{n})$\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff08\u5f88\u957f\uff0c\u4f46\u662f\u5927\u90e8\u5206\u4ee3\u7801\u90fd\u662f\u6570\u636e\u7ed3\u6784\u7684\u8868\u793a\u4ee5\u53ca\u5411\u91cf\u7684\u677f\u5b50\uff0c\u6838\u5fc3\u5c31\u662finsert\u51fd\u6570\uff09\n```cpp\n#include <algorithm>\n#include <cassert>\n#include <cstdio>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <random>\n#include <set>\n#include <vector>\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double LD;\nconst int INF = 2147483647;\nconst int INF2 = 0x3f3f3f3f;\nconst ll INF64 = 1e18;\nconst double INFD = 1e30;\nconst double PI = acos(-1);\nconst int MOD = 1e9 + 7;\ntemplate <typename T>\ninline T read() {\n    T X = 0, w = 0;\n    char ch = 0;\n    while (!isdigit(ch)) {\n        w |= ch == '-';\n        ch = getchar();\n    }\n    while (isdigit(ch)) X = (X << 3) + (X << 1) + (ch ^ 48), ch = getchar();\n    return w ? -X : X;\n}\n\nint n, m;\nint dr[4] = {1, 0, -1, 0};\nint dc[4] = {0, 1, 0, -1};\nint dr2[8] = {1, 1, 1, -1, -1, -1, 0, 0};\nint dc2[8] = {1, 0, -1, 1, 0, -1, 1, -1};\nint CASE = 1;\n\nconstexpr int MAXN = 100010;\nconstexpr double EPS = 1e-10;\n\nstatic std::mt19937 mt;\n\nint dcmp(double x) {\n    if (fabs(x) < EPS) return 0;\n    return x > 0 ? 1 : -1;\n}\n\nstruct Vector2 {\n    double x, y;\n    Vector2() : x(0), y(0) {}\n    Vector2(double x, double y) : x(x), y(y) {}\n    Vector2(double rad) : x(cos(rad)), y(sin(rad)) {}\n\n    static double dot(const Vector2& a, const Vector2& b) {\n        return a.x * b.x + a.y * b.y;\n    }\n    static double angle(const Vector2& a, const Vector2& b) {\n        return acos(dot(a, b) / a.length() / b.length());\n    }\n    static double cross(const Vector2& a, const Vector2& b) {\n        return a.x * b.y - a.y * b.x;\n    }\n    static double area2(const Vector2& a, const Vector2& b, const Vector2& c) {\n        return cross(b - a, c - a);\n    }\n\n    double length() const { return std::sqrt(x * x + y * y); }\n    double lengthSq() const { return x * x + y * y; }\n    double getRad() const { return atan2(y, x); }\n    Vector2 rotate(double rad) const {\n        return Vector2(x * cos(rad) - y * sin(rad),\n                       x * sin(rad) + y * cos(rad));\n    }\n    Vector2 unit() const {\n        double l = this->length();\n        return Vector2(x / l, y / l);\n    }\n    Vector2 normal() const {\n        double l = this->length();\n        return Vector2(-y / l, x / l);\n    }\n\n    bool operator<(const Vector2& other) const {\n        return x < other.x || (x == other.x && y < other.y);\n    }\n    bool operator==(const Vector2& other) const {\n        return !dcmp(x - other.x) && !dcmp(y - other.y);\n    }\n\n    Vector2& operator+=(const Vector2& vec) {\n        this->x += vec.x, this->y += vec.y;\n        return *this;\n    }\n    Vector2 operator+(const Vector2& vec) const {\n        return Vector2(this->x + vec.x, this->y + vec.y);\n    }\n    Vector2& operator-=(const Vector2& vec) {\n        this->x -= vec.x, this->y -= vec.y;\n        return *this;\n    }\n    Vector2 operator-(const Vector2& vec) const {\n        return Vector2(this->x - vec.x, this->y - vec.y);\n    }\n    Vector2& operator*=(double v) {\n        this->x *= v, this->y *= v;\n        return *this;\n    }\n    Vector2& operator*=(const Vector2& v) {\n        this->x *= v.x, this->y *= v.y;\n        return *this;\n    }\n    Vector2 operator*(double v) const {\n        return Vector2(this->x * v, this->y * v);\n    }\n    Vector2 operator*(const Vector2& vec) const {\n        return Vector2(this->x * vec.x, this->y * vec.y);\n    }\n    Vector2& operator/=(double v) {\n        this->x /= v, this->y /= v;\n        return *this;\n    }\n    Vector2& operator/=(const Vector2& vec) {\n        this->x /= vec.x, this->y /= vec.y;\n        return *this;\n    }\n    Vector2 operator/(double v) const {\n        return Vector2(this->x / v, this->y / v);\n    }\n    Vector2 operator/(const Vector2& vec) const {\n        return Vector2(this->x / vec.x, this->y / vec.y);\n    }\n};\n\nstruct Face;\nstruct Vertex;\nstruct Edge;\n\nstruct Edge {\n    Vertex* from;\n    Vertex* to;\n    Edge* twin;\n    Face* face;\n    Edge* next;\n\n    int id;\n\n    Edge()\n        : from(nullptr),\n          to(nullptr),\n          twin(nullptr),\n          face(nullptr),\n          next(nullptr),\n          id(0) {}\n    Edge(Vertex* fr, Vertex* to)\n        : from(fr),\n          to(to),\n          twin(nullptr),\n          face(nullptr),\n          next(nullptr),\n          id(0) {}\n};\n\nstruct Face {\n    int id;\n    Edge* edge;\n    std::vector<Vertex*> owned;\n    Face() : id(0), edge(nullptr) {}\n    Face(int id, Edge* edge) : id(id), edge(edge) {}\n};\n\nstruct Vertex {\n    int id;\n    Face* belong;\n    Vector2 pos;\n\n    Vertex() : id(0), belong(nullptr), pos() {}\n    Vertex(int id, double x, double y) : id(id), belong(nullptr), pos(x, y) {}\n\n    void shake() {\n        pos.x += (mt.max() / 2 - mt()) / (double)mt.max() * 2 * EPS;\n        pos.y += (mt.max() / 2 - mt()) / (double)mt.max() * 2 * EPS;\n    }\n\n    // \u975e\u5e38\u66b4\u529b\u5730\u5224\u65ad\u70b9\u662f\u5426\u5728\u9762\u5185\u90e8\n    bool testInTriangle(Face* face) {\n        auto e = face->edge;\n        for (int i = 0; i < 3; i++) {\n            auto dir = e->to->pos - e->from->pos;\n            auto p = pos - e->from->pos;\n            if (Vector2::cross(dir, p) < 0) return false;\n            e = e->next;\n        }\n        belong = face;\n        face->owned.push_back(this);\n        return true;\n    }\n};\n\nVertex vPool[MAXN];\nint totV;\n\nFace fPool[MAXN * 2];\nint totF;\n\nEdge ePool[MAXN * 6];\nint totE;\n\ntypedef struct vec3_t {\n    double x, y, z;\n    vec3_t(double _x = 0, double _y = 0, double _z = 0) {\n        x = _x, y = _y, z = _z;\n    }\n    inline friend vec3_t operator+(const vec3_t& a, const vec3_t& b) {\n        return vec3_t(a.x + b.x, a.y + b.y, a.z + b.z);\n    }\n    inline friend vec3_t operator-(const vec3_t& a, const vec3_t& b) {\n        return vec3_t(a.x - b.x, a.y - b.y, a.z - b.z);\n    }\n    inline friend vec3_t operator*(const vec3_t& a, double k) {\n        return vec3_t(a.x * k, a.y * k, a.z * k);\n    }\n    inline friend vec3_t cross(const vec3_t& a, const vec3_t& b) {\n        return vec3_t(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z,\n                      a.x * b.y - a.y * b.x);\n    }\n    inline friend double dot(const vec3_t& a, const vec3_t& b) {\n        return a.x * b.x + a.y * b.y + a.z * b.z;\n    }\n} node3_t;\n\nbool inCircumcircle(Vertex* a, Vertex* b, Vertex* c, Vertex* d) {\n    vec3_t A = vec3_t(a->pos.x, a->pos.y, Vector2::dot(a->pos, a->pos));\n    vec3_t B = vec3_t(b->pos.x, b->pos.y, Vector2::dot(b->pos, b->pos));\n    vec3_t C = vec3_t(c->pos.x, c->pos.y, Vector2::dot(c->pos, c->pos));\n    vec3_t D = vec3_t(d->pos.x, d->pos.y, Vector2::dot(d->pos, d->pos));\n    if (Vector2::cross(b->pos - a->pos, c->pos - a->pos) < 0) std::swap(B, C);\n\n    node3_t normal = cross(B - A, C - A);\n    if (dot(normal, D - A) > EPS)\n        return false;\n    else\n        return true;\n}\n\nVertex* newVertex(double x, double y) {\n    ++totV;\n    vPool[totV] = Vertex(totV, x, y);\n    return &vPool[totV];\n}\n\nEdge* newEdge(Vertex* fr, Vertex* to) {\n    ++totE;\n    ePool[totE] = Edge(fr, to);\n    ePool[totE].id = totE;\n    return &ePool[totE];\n}\n\n// \u521b\u9020\u4e00\u4e2a\u4ee5abc\u4e3a\u9006\u65f6\u9488\u9876\u70b9\u7684\u4e09\u89d2\u5f62\u9762\nvoid constructNewFace(Face* face, Vertex* a, Vertex* b, Vertex* c) {\n    Edge* edges[3];\n    edges[0] = newEdge(a, b);\n    edges[1] = newEdge(b, c);\n    edges[2] = newEdge(c, a);\n\n    for (int i = 0; i < 3; i++) {\n        edges[i]->next = edges[(i + 1) % 3];\n        edges[i]->face = face;\n    }\n    face->edge = edges[0];\n}\n\n// \u521b\u9020\u4e00\u4e2a\u4ee5\u8fb9abc\u4e3a\u9006\u65f6\u9488\u987a\u5e8f\u7684\u7ec4\u6210\u9762\nvoid constructFace(Face* face, Edge* a, Edge* b, Edge* c) {\n    Edge* edges[3];\n    edges[0] = a;\n    edges[1] = b;\n    edges[2] = c;\n    for (int i = 0; i < 3; i++) {\n        edges[i]->next = edges[(i + 1) % 3];\n        edges[i]->face = face;\n    }\n    face->edge = a;\n}\n\nFace* newFace() {\n    totF++;\n    fPool[totF].id = totF;\n    return &fPool[totF];\n}\nVector2 PT[MAXN];\nvoid insert(int x) {\n    Vertex* v = &vPool[x];\n    Face* face = v->belong;\n\n    // \u6253\u788e\u539f\u4e09\u89d2\u5f62\uff0c\u751f\u6210\u4e09\u4e2a\u65b0\u7684\u4e09\u89d2\u5f62\n\n    auto fEdge = face->edge;\n    Face* nFaces[3];\n    nFaces[0] = face;\n    nFaces[1] = newFace();\n    nFaces[2] = newFace();\n\n    // nEdges \u662f\u9006\u65f6\u9488\u7684\u7b2c\u4e00\u6761\u8fb9\uff0ccEdges\u662f\u7ec4\u6210\u9762\u7684\u9006\u65f6\u9488\u6700\u540e\u4e00\u6761\u8fb9\n    Edge* nEdges[3];\n    Edge* cEdges[3];\n    Edge* oEdges[3];\n\n    for (int i = 0; i < 3; i++) {\n        nEdges[i] = newEdge(v, fEdge->from);\n        cEdges[i] = newEdge(fEdge->to, v);\n        oEdges[i] = fEdge;\n        fEdge = fEdge->next;\n    }\n\n    for (int i = 0; i < 3; i++) {\n        constructFace(nFaces[i], nEdges[i], oEdges[i], cEdges[i]);\n        nEdges[i]->twin = cEdges[(i + 2) % 3];\n        cEdges[(i + 2) % 3]->twin = nEdges[i];\n    }\n\n    std::vector<Vertex*> children(nFaces[0]->owned.begin(),\n                                  nFaces[0]->owned.end());\n    for (int i = 0; i < 3; i++) {\n        nFaces[i]->owned.clear();\n    }\n\n    for (auto vs : children) {\n        if (vs->id == v->id) continue;\n        for (int i = 0; i < 3; i++) {\n            if (vs->testInTriangle(nFaces[i])) break;\n        }\n    }\n\n    std::queue<Edge*> Q;\n    for (int i = 0; i < 3; i++) {\n        Q.push(oEdges[i]);\n    }\n\n    while (!Q.empty()) {\n        auto curEdge = Q.front();\n        Q.pop();\n\n        auto twin = curEdge->twin;\n        if (!twin) continue;\n\n        auto targetV = twin->next->to;\n        if (targetV == v) continue;\n\n        if (inCircumcircle(curEdge->from, curEdge->to, v, targetV)) {\n            auto nxt1 = twin->next;\n            // \u6dfb\u52a0\u53ef\u7591\u8fb9\n            Q.push(nxt1), Q.push(nxt1->next);\n\n            auto A = curEdge->face;\n            auto B = twin->face;\n\n            assert(A != B);\n            children.clear();\n            for (auto vs : A->owned) children.push_back(vs);\n            for (auto vs : B->owned) children.push_back(vs);\n            A->owned.clear();\n            B->owned.clear();\n\n            auto lastNxt = curEdge->next;\n            auto lastPrev = lastNxt->next;\n\n            // Do edge flip\n            curEdge->from = v, curEdge->to = targetV;\n            twin->from = targetV, twin->to = v;\n\n            constructFace(A, curEdge, nxt1->next, lastNxt);\n            constructFace(B, twin, lastPrev, nxt1);\n\n            for (auto vs : children) {\n                if (vs->id == v->id) continue;\n                if (!vs->testInTriangle(A)) {\n                    vs->belong = B;\n                    B->owned.push_back(vs);\n                }\n            }\n        }\n    }\n}\n\nstruct UnionFind {\n    void clear(int n) {\n        for (int i = 0; i <= n; i++) fa[i] = i;\n    }\n    void join(int x, int y) {\n        int a = find(x), b = find(y);\n        fa[a] = b;\n    }\n    int find(int x) { return (fa[x] == x) ? x : fa[x] = find(fa[x]); }\n    int fa[MAXN];\n};\nUnionFind uf;\n\nstruct E2 {\n    int x, y;\n    double w;\n    bool operator<(const E2& e) const { return w < e.w; }\n};\nstd::vector<E2> edges;\nint main() {\n#ifdef LOCALLL\n    freopen(\"in\", \"r\", stdin);\n    freopen(\"out\", \"w\", stdout);\n#endif\n    mt.seed(19260817);\n    scanf(\"%d\", &n);\n    uf.clear(n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%lf %lf\", &PT[i].x, &PT[i].y);\n        vPool[++totV] = Vertex(i, PT[i].x, PT[i].y);\n        vPool[totV].shake();\n    }\n    std::random_shuffle(vPool + 1, vPool + totV + 1,\n                        [](int x) { return mt() % x; });\n    auto a = newVertex(1e6, 1e6);\n    auto b = newVertex(-1e6, 1e6);\n    auto c = newVertex(-1e6, -1e6);\n    auto d = newVertex(1e6, -1e6);\n\n    auto f1 = newFace();\n    auto f2 = newFace();\n    constructNewFace(f1, a, b, d);\n    constructNewFace(f2, d, b, c);\n\n    f1->edge->next->twin = f2->edge;\n    f2->edge->twin = f1->edge->next;\n\n    for (int i = 1; i <= n; i++) {\n        Vertex& v = vPool[i];\n        if (!v.testInTriangle(f1)) {\n            v.belong = f2;\n            f2->owned.push_back(&vPool[i]);\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        insert(i);\n    }\n    for (int i = 1; i <= totF; i++) {\n        auto e = fPool[i].edge;\n        for (int j = 0; j < 3; j++) {\n            int u = e->from->id, v = e->to->id;\n            if (u <= n && v <= n) {\n                edges.push_back({u, v, (PT[v] - PT[u]).length()});\n            }\n            e = e->next;\n        }\n    }\n    std::sort(edges.begin(), edges.end());\n    double ans = 0;\n    for (auto& e : edges) {\n        if (uf.find(e.x) != uf.find(e.y)) {\n            ans += e.w;\n            uf.join(e.x, e.y);\n        }\n    }\n    printf(\"%.6lf\\n\", ans);\n    return 0;\n}\n```\n\n\u8865\u5145\u4e00\u4e2a\u6bd4\u8f83\u597d\u73a9\u7684\uff0c\u5982\u679c\u8981\u4eceDelaunay\u4e09\u89d2\u5256\u5206\u6c42\u51fa\u5176\u5bf9\u5076Voronoi\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u4e09\u89d2\u5f62\u9762\u6c42\u51fa\u5916\u5fc3\uff0c\u7136\u540e\u8fde\u63a5\u5176\u4e09\u4e2a\u90bb\u63a5\u9762\u7684\u5916\u5fc3\u5373\u53ef\uff0c\u770b\u56fe\uff1a\n\n![Voronoi\u56fe\u6784\u9020](https://i.loli.net/2021/01/17/atpWuwvVlyj1PE4.gif)\n",
        "postTime": 1610837266,
        "uid": 36956,
        "name": "Mr_Skirt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6362 \u3010\u5e73\u9762\u6b27\u51e0\u91cc\u5f97\u6700\u5c0f\u751f\u6210\u6811\u3011"
    }
]