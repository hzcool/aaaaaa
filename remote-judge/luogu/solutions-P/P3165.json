[
    {
        "content": "## FHQ Treap\u89e3\u6cd5\n\n\u8fd9\u9053\u9898\u5f53\u7136\u7528\u597d\u5199\u7684fhq\u89e3\u51b3\u5566(~~\u5176\u5b9e\u662f\u4e0d\u4f1asplay~~)\n\n\u4e00\u5f00\u59cb, \u611f\u89c9\u65e0\u6cd5\u540c\u65f6\u6743\u503c\u5206\u88c2\u53c8\u6392\u540d\u5206\u88c2\n\n\u6240\u4ee5\u6211\u6309\u6392\u540d\u5206\u88c2, \u7ef4\u62a4\u5b50\u6811\u6700\u5c0f\u503c, \u8bbe\u8ba1\u4e00\u4e2a\u7c7b\u4f3c\u6c42\u7b2ck\u5927\u7684\u51fd\u6570,  \u627e\u51fa\u533a\u95f4\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n\n\u8be6\u89c1\u4ee3\u7801, \u8fd8\u662f\u5f88\u597d\u61c2\u7684(\u9664get_rk\u51fd\u6570, \u5176\u4ed6\u90e8\u5206\u548c\u6587\u827a\u5e73\u8861\u6811\u4e00\u6837)\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\n#include<ctime>\n\nusing namespace std;\n\ntemplate <typename T>\nvoid read(T &x) {\n\tx = 0; bool f = 0;\n\tchar c = getchar();\n\tfor (;!isdigit(c);c=getchar()) if (c=='-') f = 1;\n\tfor (;isdigit(c);c=getchar()) x=(x<<3)+(x<<1)+(c^48);\n\tif (f) x=-x;\n}\n\nconst int N = 100050;\nint tag[N], siz[N];\nint son[N][2], rnd[N];\nint val[N], mn[N];\n\nstruct node {\n\tint pos, num;\n\tbool operator < (const node &i) const {\n\t\tif (num != i.num) return num < i.num;\n\t\treturn pos < i.pos;\n\t}\n}a[N];\nint n;\n\nint rt, x, y, z;\nint tot;\nint build(int x) {\n\tval[++tot] = x, mn[tot] = x, siz[tot] = 1;\n\trnd[tot] = rand(); return tot;\n}\n\nint Mn(int x,int y) {return x < y ? x : y;}\n\nvoid update(int x) {\n\tsiz[x] = siz[son[x][0]] + siz[son[x][1]] + 1;\n\tmn[x] = val[x]; \n\tif (son[x][0]) mn[x] = Mn(mn[son[x][0]], mn[x]);\n\tif (son[x][1]) mn[x] = Mn(mn[son[x][1]], mn[x]);\n}\n\nvoid spread(int x) {\n\tif (!tag[x]) return;\n\tswap(son[x][0], son[x][1]);\n\tif (son[x][0]) tag[son[x][0]] ^= 1;\n\tif (son[x][1]) tag[son[x][1]] ^= 1;\n\ttag[x] = 0;\n}\n\nint merge(int x,int y) {\n\tif (!x || !y) return x | y;\n\tif (rnd[x] < rnd[y]) {\n\t\tspread(x);\n\t\tson[x][1] = merge(son[x][1], y);\n\t\tupdate(x); return x;\n\t}\n\tspread(y);\n\tson[y][0] = merge(x, son[y][0]);\n\tupdate(y); return y;\n}\n\nvoid split(int now,int k,int &x,int &y) {\n\tif (!now) {\n\t\tx = y = 0; return;\n\t}\n\tspread(now);\n\tif (siz[son[now][0]] < k) {\n\t\tx = now;\n\t\tsplit(son[x][1], k - siz[son[x][0]] - 1, son[x][1], y);\n\t}\n\telse y = now, split(son[y][0], k, x, son[y][0]);\n\tupdate(now);\n}\n\n//\u627e\u51fa\u6700\u5c0f\u503c\u7684\u6392\u540d\nint get_rk(int x) {\n\tint k = 1; //\u521d\u59cb\u6392\u540d\n\twhile (1) {\n\t\tspread(x);\n\t\tif (son[x][0] && mn[son[x][0]] == mn[x]) \n      \t\tx = son[x][0]; //\u5728\u5de6\u5b50\u6811\n\t\telse if (son[x][1] && mn[son[x][1]] == mn[x]) \n        \tk += siz[son[x][0]] + 1, x = son[x][1]; //\u5728\u53f3\u5b50\u6811\n\t\telse return k + siz[son[x][0]]; //\u5728\u5f53\u524d\u8282\u70b9\n\t}\n}\n\nint v[N];\nint main() {\n\tread(n);\n\tfor (int i = 1;i <= n; i++) {\n\t\tread(a[i].num); a[i].pos = i;\n\t}\n\tsort(a + 1, a + n + 1);\n\tfor (int i = 1;i <= n; i++)\n\tv[a[i].pos] = i;\n\tfor (int i = 1;i <= n; i++) \n\t\trt = merge(rt, build(v[i]));\n\tfor (int i = 1;i <= n; i++) {\n\t\tint k = get_rk(rt);\n\t\tsplit(rt, k, x, y);\n\t\tsplit(x, k-1, x, z);\n\t\ttag[x] ^= 1;\n\t\trt = merge(x, y);\n\t\tprintf (\"%d \", k + i - 1);\n\t}\n\treturn 0;\n}\n/*\n7\n1 8 6 5 3 5 2\n\n*/\n```\n\n",
        "postTime": 1574411106,
        "uid": 122144,
        "name": "hs_black",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "\u8fd9\u6837\u770b\u6765\uff0csplay\u7684\u5b9e\u73b0\u8fd9\u4e2a\u9898\u7684\u8fd8\u6ca1\u6709\u6570\u7ec4\u7248\u672c\uff0c\u90a3\u849f\u84bb\u638f\u51fa\u4e86\u81ea\u5df1\u5f31\u5f31\u7684\u4ee3\u7801\u3002\n\n\u9996\u5148\u660e\u767d\u4e00\u4e2a\u4e8b\uff0c\u8fd9\u4e2a\u9898\u4e3b\u4f53\u662f\u5728\u8ba9\u4f60\u5e72\u4ec0\u4e48\u3002\u8fd9\u4e2a\u9898\u660e\u663e\uff0c\u8981\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8ba9\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u533a\u95f4\u7ffb\u8f6c\u548c   \u67e5\u8be2\u5de5\u4f5c\u3002\n\n\u533a\u95f4\u7ffb\u8f6c\u5e94\u8be5\u90fd\u4f1a\u4e86\u5427\u3002\u4e0d\u4f1a\u7684\u8bf7\u5de6\u8f6c\u53bb\u6587\u827a\u5e73\u8861\u6811\u90a3\u4e2a\u6a21\u677f\u9898\u3002\u6211\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e0b\u5efa\u6811\u7684\u64cd\u4f5c\u548c\u67e5\u8be2\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u90a3\u4e2a\u6a21\u677f\u9898\u5efa\u6811\u7684\u65f6\u5019\u6570\u5b57\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5efa\u6811\u3002\u8fd9\u4e2a\u9898\u7531\u4e8e\u7ed9\u4e86\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u6240\u4ee5\u4e0d\u80fd\u8fd9\u4e48\u5e72\uff0c\u7136\u800c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u4ee5\u9ad8\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4e0b\u6807\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57sort\u4e00\u4e0b\uff0c\u7136\u540e\u9ad8\u5ea6\u5c31\u6ca1\u7528\u4e86\uff0c\u6211\u4eec\u6267\u884c\u6a21\u677f\u91cc\u7684\u7ffb\u8f6c\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u8981\u6c42\u7684\u662f\u4ec0\u4e48\uff0c\u4e00\u4e2a\u6392\u540d\uff0c\u6ca1\u9519\u3002\u90a3\u4e48\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u628a\u8981\u6c42\u7684\u90a3\u4e2a\u70b9\u76f4\u63a5\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u6c42\u51fa\u5b83\u7684\u5de6\u5b50\u6811\u5927\u5c0f+1\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u4e86\uff0c\u7701\u53bb\u4e86\u5f88\u591a\u529f\u592b\u3002\u7136\u800c\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u56e0\u4e3a\u4e00\u5f00\u59cb\u8bbe\u7f6e\u4e86\u54e8\u5175\u8282\u70b9\uff0c\u6240\u4ee5\u6700\u540e\u8fd8\u8981-1.\n\n\u5269\u4e0b\u7684\u5c31\u6ca1\u4ec0\u4e48\u5f88\u56f0\u96be\u7684\u4e86\uff0c\u4e0d\u660e\u767d\u7684\u518d\u4ed4\u7ec6\u770b\u770b\u4ee3\u7801\u5427\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define re register\n#define maxn 1000007\n#define ll long long\n#define ls rt<<1\n#define rs rt<<1|1\n#define inf 1000000007\nusing namespace std;\nint ch[100001][2],f[maxn],cnt[maxn],key[maxn],size[maxn],mark[maxn],root,sz,data[maxn];\nstruct po\n{\n\tint id,k;\n}a[maxn];\ninline int read()\n{\n    int x=0,c=1;\n    char ch=' ';\n    while((ch>'9'||ch<'0')&&ch!='-')ch=getchar();\n    while(ch=='-')c*=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-'0',ch=getchar();\n    return x*c;\n}\nbool cmp(po x,po y)\n{\n    if(x.k<y.k)\n    return 1;\n    else if(x.k==y.k)\n    return x.id<y.id;\n    return 0;\n}\ninline int get(int x)\n{\n    return ch[f[x]][1]==x;\n}\ninline void update(int x)\n{\n\tsize[x]=size[ch[x][1]]+size[ch[x][0]]+1;\n}\ninline void pushdown(int x)\n{\n    if(mark[x]){\n        if(ch[x][0]) mark[ch[x][0]]^=1;\n        if(ch[x][1]) mark[ch[x][1]]^=1;\n        swap(ch[x][0],ch[x][1]);\n        mark[x]=0;\n    }\n}\ninline void rotate(int x)\n{\n    int y=f[x],z=f[y];\n    int kind=get(x);\n    pushdown(y);pushdown(x);\n    ch[y][kind]=ch[x][kind^1];f[ch[y][kind]]=y;\n    ch[x][kind^1]=y;f[y]=x;f[x]=z;\n    if(z){\n        ch[z][ch[z][1]==y]=x;\n    }\n    update(y);update(x);\n}\ninline void splay(int x,int tar)\n{\n    for(re int fa;(fa=f[x])!=tar;rotate(x)){\n\t\tpushdown(f[fa]);pushdown(fa);pushdown(x);\n    \tif(f[fa]!=tar)\n    \t    rotate(get(x)==get(fa)?fa:x);\n\t}\n    if(!tar) root=x;\n}\ninline void build(int l,int r,int fa)\n{\n   if(l>r) return;\n    int mid=l+r>>1;\n    if(mid<fa) ch[fa][0]=mid;\n    else ch[fa][1]=mid;\n    size[mid]=1;f[mid]=fa;\n    if(l==r) return;\n    build(l,mid-1,mid);\n    build(mid+1,r,mid);\n    update(mid);\n}\ninline int findx(int x)\n{\n    int now=root;\n    while(1){\n\t\tif(mark[now])\n\t\tpushdown(now);\n        if(x<=size[ch[now][0]]&&ch[now][0])\n        now=ch[now][0];\n        else {\n            x-=size[ch[now][0]]+1;\n            if(x==0) return now;\n            else now=ch[now][1];\n        }\n    }\n}\nint main()\n{\n    int n;\n    cin>>n;\n    for(re int i=2;i<=n+1;i++){\n        a[i].k=read();\n        a[i].id=i;\n    }\n    a[1].id=1,a[1].k=-inf;\n    a[n+2].id=n+2,a[n+2].k=inf;\n    sort(a+1,a+n+3,cmp);\n    build(1,n+2,0);\n    root=n+3>>1;\n    for(re int i=2;i<=n;i++){\n        splay(a[i].id,0);\n        int ans=size[ch[root][0]]+1;\n        printf(\"%d \",ans-1);\n        int x1=findx(i-1);\n\t\tint y1=findx(ans+1);\n        splay(x1,0);splay(y1,x1);\n        mark[ch[ch[root][1]][0]]^=1;\n    }\n    cout<<n;\n}\n```",
        "postTime": 1519786294,
        "uid": 49223,
        "name": "Victorique",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/chenxiaoran666/p/BZOJ3506.html)\n\n**\u5927\u81f4\u9898\u610f\uff1a** \u7ed9\u4f60$n$\u4e2a\u6570\u3002\u7b2c\u4e00\u6b21\u627e\u5230\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e$P_1$\uff0c\u7ffb\u8f6c$[1,P_1]$\uff0c\u7b2c\u4e8c\u6b21\u627e\u5230\u5269\u4f59\u6570\u4e2d\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e$P_2$\uff0c\u7ffb\u8f6c$[2,P_2]$\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u6c42$P_1,P_2,...,P_n$\u7684\u503c\u3002\n\n------\n\n### \u521d\u59cb\u5316\n\n\u8fd9\u9898\u5e94\u8be5\u662f\u4e00\u9053\u6bd4\u8f83\u88f8\u7684$Splay$\u9898\u3002\n\n\u5173\u4e8e$Splay$\u53ef\u4ee5\u67e5\u770b\u8fd9\u7bc7\u535a\u5ba2\uff1a[\u7b80\u6790\u5e73\u8861\u6811\uff08\u4e09\uff09\u2014\u2014\u6d45\u8c08Splay](https://www.cnblogs.com/chenxiaoran666/p/Splay.html)\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5c06\u539f\u6570\u7ec4\u6392\u5e8f\u4e00\u904d\uff0c\u8bb0\u4e0b**\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u4f4d\u7f6e**\u3002\n\n\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u9898\u76ee\u8981\u6c42**\u76f8\u540c\u503c\u8981\u5148\u53d6\u4f4d\u7f6e\u9760\u524d\u7684**\uff08\u6ca1\u6ce8\u610f\u5230\u8fd9\u70b9\u7ed3\u679c\u72c2$WA$\u4e0d\u6b62\uff09\u3002\n\n\u7136\u540e\u4fbf\u662f\u5efa\u6811\u3002\n\n\u6ce8\u610f\uff0c$Splay$\u5efa\u6811\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e00\u822c\u4f1a\u5728\u5e8f\u5217\u5de6\u53f3\u5404\u52a0\u4e00\u4e2a\u591a\u4f59\u8282\u70b9\uff0c\u65b9\u4fbf\u540e\u9762\u53d6\u51fa\u4e00\u6bb5\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u3002\n\n------\n\n### \u64cd\u4f5c\n\n\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\u6211\u4eec\u628a\u8981\u64cd\u4f5c\u7684\u4f4d\u7f6e\u5148$Splay$\u5230\u6839\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u51fa\u7b54\u6848\u5373\u4e3a\u6b64\u65f6**\u5de6\u5b50\u6811\u7684$Size$**\uff0c\u8bb0\u5176\u4e3a$ans$\u3002\n\n\u6ce8\u610f\u662f$Size$\u800c\u4e0d\u662f$Size+1$\uff0c\u8981\u8003\u8651\u5230\u6211\u4eec\u5728\u5e8f\u5217\u5de6\u8fb9\u52a0\u7684\u90a3\u4e2a\u591a\u4f59\u8282\u70b9\u5df2\u7ecf\u4f7f$Size$\u6bd4\u5b9e\u9645\u5b58\u5728\u7684\u8282\u70b9\u4e2a\u6570\u591a$1$\u4e86\u3002\n\n\u7136\u540e\uff0c\u6309\u7167\u9898\u76ee\u8981\u6c42\uff0c\u6211\u4eec\u8981\u7ffb\u8f6c\u533a\u95f4$[i,ans]$\u3002\uff08\u5173\u4e8e\u8fd9\u4e00\u64cd\u4f5c\u7684\u5177\u4f53\u8fc7\u7a0b\u53ef\u4ee5\u770b\u8fd9\u9053\u9898\uff1a[\u3010\u6d1b\u8c373391\u3011\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09](https://www.luogu.org/problemnew/show/P3391)\uff09\n\n\u76f4\u63a5\u5c06$i$\u53f7\u8282\u70b9\u548c$ans+2$\u53f7\u8282\u70b9\u5206\u522b\u65cb\u5230\u6839\u8282\u70b9\u548c\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u7136\u540e\u7ffb\u8f6c\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u5373\u53ef\u3002\n\n------\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Type template<typename I>\n#define N 100000\n#define swap(x,y) (x^=y^=x^=y)\n#define INF 1e9\nusing namespace std;\nint n;\nstruct Data\n{\n    int pos,val;\n    inline friend bool operator < (Data x,Data y) {return x.val^y.val?x.val<y.val:x.pos<y.pos;}\n}a[N+5];\nclass Class_FIO\n{\n    private:\n        #define Fsize 100000\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,Fsize,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (FoutSize^Fsize?Fout[FoutSize++]=ch:(fwrite(Fout,1,Fsize,stdout),Fout[(FoutSize=0)++]=ch))\n        #define Isi(x) (typeid(x).name()==typeid(1).name())\n        #define Isc(x) (typeid(x).name()==typeid('a').name())\n        int Top,FoutSize;char ch,*A,*B,Fin[Fsize],Fout[Fsize],Stack[Fsize];\n    public:\n        Class_FIO() {A=B=Fin;}\n        Type inline void read(I& x) {x=0;while(!isdigit(ch=tc()));while(x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));}\n        Type inline void write(I x)\n        {\n            if(Isi(x)) {while(Stack[++Top]=x%10+48,x/=10);while(Top) pc(Stack[Top--]);}\n            if(Isc(x)) pc(x);\n        }\n        template<typename I,typename... A> inline void read(I& x,A&... y) {read(x),read(y...);}\n        template<typename I,typename... A> inline void write(I x,A... y) {write(x),write(y...);}\n        inline void clear() {fwrite(Fout,1,FoutSize,stdout),FoutSize=0;}\n}F;\nclass Class_Splay//Splay\n{\n    private:\n        #define SIZE N\n        #define PushUp(x) (node[x].Size=node[node[x].Son[0]].Size+node[node[x].Son[1]].Size+1)\n        #define Rever(x) (swap(node[x].Son[0],node[x].Son[1]),node[x].Rev^=1)\n        #define PushDown(x) (node[x].Rev&&(Rever(node[x].Son[0]),Rever(node[x].Son[1]),node[x].Rev=0))\n        #define Which(x) (node[node[x].Father].Son[1]==x)\n        #define Connect(x,y,d) (node[node[x].Father=y].Son[d]=x)\n        #define Split(x,y) (Splay(get_pos(x),rt),Splay(get_pos((y)+2),node[rt].Son[1]),node[node[rt].Son[1]].Son[0])\n        int rt;\n        struct Tree\n        {\n            int Size,Rev,Father,Son[2];\n        }node[SIZE+5];\n        inline void Rotate(int x,int& k)\n        {\n            register int fa=node[x].Father,pa=node[fa].Father,d=Which(x);PushDown(fa),PushDown(x),\n            (fa^k?node[pa].Son[Which(fa)]=x:k=x),node[x].Father=pa,Connect(node[x].Son[d^1],fa,d),Connect(fa,x,d^1),PushUp(fa),PushUp(x);\n        }\n        inline void Splay(int x,int& k) {register int fa;while(x^k) fa=node[x].Father,fa^k&&(Rotate(Which(x)^Which(fa)?x:fa,k),0),Rotate(x,k);}\n        inline void Build(int l,int r,int& rt)\n        {\n            register int mid=l+r>>1;\n            if(node[rt=mid].Size=1,!(l^r)) return;\n            l<mid&&(Build(l,mid-1,node[rt].Son[0]),node[node[rt].Son[0]].Father=rt),\n            r>mid&&(Build(mid+1,r,node[rt].Son[1]),node[node[rt].Son[1]].Father=rt),\n            PushUp(rt);\n        }\n        inline int get_pos(int rk)\n        {\n            register int x=rt;\n            while(x) \n            {\n                if(PushDown(x),node[node[x].Son[0]].Size>=rk) x=node[x].Son[0];\n                else if(!(rk-=node[node[x].Son[0]].Size+1)) return x;\n                else x=node[x].Son[1];\n            }\n        }\n    public:\n        inline void Init(int len) {Build(1,len+2,rt);}\n        inline int GetAns(int x) \n        {\n            register int k,ans;\n            Splay(a[x].pos+1,rt),ans=node[node[rt].Son[0]].Size,k=Split(x,ans),Rever(k);//\u627e\u5230ans\uff0c\u7136\u540e\u7ffb\u8f6c\n            return ans;//\u8fd4\u56de\u7b54\u6848\n        }\n        #undef SIZE\n}Splay;\nint main()\n{\n    register int i,p;\n    for(F.read(n),i=1;i<=n;++i) F.read(a[a[i].pos=i].val);//\u8bfb\u5165\n    for(sort(a+1,a+n+1),Splay.Init(n),i=1;i<=n;++i) F.write(p=Splay.GetAns(i),' ');//\u521d\u59cb\u5316\u6392\u5e8f+\u4f9d\u6b21\u64cd\u4f5c\n    return F.clear(),0;\n}\n```\n\n\n\n",
        "postTime": 1546863842,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "\u5927\u81f4\u5c31\u662f\u8981\u6211\u4eec\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c:\n\n1.\u67e5\u8be2\u533a\u95f4\u6700\u5c0f\u503c\n\n2.\u7ffb\u8f6c\u4e00\u4e2a\u533a\u95f4\n\n\u770b\u5230\u7ffb\u8f6c\u81ea\u7136\u5c31\u60f3\u5230\u4e86Splay\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9,\u6211\u4eec\u8bb0\u5f55\u4ee5\u4e0b\u4fe1\u606f:\n\n\u7ed3\u6784\u4f53v:\u5b83\u6240\u5bf9\u5e94\u7684\u533a\u95f4\u4e0a\u7684\u4e0b\u6807\u548c\u9ad8\u5ea6(\u7528\u4e8e\u786e\u5b9a\u5927\u5c0f,\u4e5f\u53ef\u4ee5\u4e0d\u5f00\u7ed3\u6784\u4f53,\u4f7f\u7528\u79bb\u6563\u5316)\n\n\u7ed3\u6784\u4f53mn:\u5b83\u548c\u5b83\u7684\u5b50\u6811\u4e2dv\u7684\u6700\u5c0f\u503c\n\n\u6574\u6570f:\u5b83\u7684\u7236\u4eb2\n\n\u6570\u7ec4(\u5176\u5b9e\u662f2\u4e2a\u6570)c[2]:\u5b83\u7684\u5de6/\u53f3\u513f\u5b50\n\n\u6574\u6570(0/1)tag:\u5b83\u548c\u5b83\u7684\u5b50\u6811\u662f\u5426\u6709\u88ab\u6574\u4f53\u7ffb\u8f6c\n\n\u6574\u6570sz:\u5b83\u7684\u5b50\u6811\u7684\u5927\u5c0f\n\n\u6211\u4eec\u7b2c$i$\u6b21\u67e5\u8be2\u533a\u95f4$[i,n]$\u4e2d\u7684\u6700\u5c0f\u503c,\u8bb0\u5f55\u5b83\u7684\u4f4d\u7f6e$id$\u8f93\u51fa\u5b83,\u5e76\u628a\u7b2c$i$\u4e2a\u6570\u5230\u7b2c$id$\u4e2a\u6570\u7684\u5b50\u533a\u95f4\u7ffb\u8f6c\u3002\n\n\u5c31\u53d8\u6210\u4e86Splay\u6a21\u677f\u9898\u3002\n\ncode:\n\n~~\u6709\u4e00\u4e9bPushdown\u662f\u6ca1\u6709\u5fc5\u8981\u7684,\u4fdd\u9669\u8d77\u89c1\u8fd8\u662f\u5199\u4e86\u3002~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct T{\n\tint h,id;\n\tbool operator >(T y)const{\n\t\tif(h!=y.h){\n\t\t\treturn h>y.h;\n\t\t}\n\t\treturn id>y.id;\n\t}\n\tbool operator <(T y)const{\n\t\tif(h!=y.h){\n\t\t\treturn h<y.h;\n\t\t}\n\t\treturn id<y.id;\n\t}\n\tbool operator ==(T y){\n\t\treturn h==y.h&&id==y.id;\n\t}\n}a[100010];\nstruct node{\n\tint f,c[2],tag,sz;\n\tT mn,v;\n}t[100010];\nint n,rt,cnt,p;\n\nvoid Upd(int x){\n\tt[x].mn=min(t[x].v,min(t[t[x].c[0]].mn,t[t[x].c[1]].mn));\n\tt[x].sz=t[t[x].c[0]].sz+t[t[x].c[1]].sz+1;\n}\nvoid Psd(int x){\n\tif(t[x].tag){\n\t\tswap(t[x].c[0],t[x].c[1]);\n\t\tif(t[x].c[0])t[t[x].c[0]].tag^=1;\n\t\tif(t[x].c[1])t[t[x].c[1]].tag^=1;\n\t\tt[x].tag=0;\n\t}\n}\nvoid Build(int &x,int f,int l,int r){\n\tif(l>r){\n\t\treturn;\n\t}\n\tx=++cnt;\n\tt[x].f=f;\n\tt[x].sz=r-l+1;\n\tint mid=(l+r)/2;\n\tt[x].v=a[mid];\n\tt[x].mn=a[mid];\n\tBuild(t[x].c[0],x,l,mid-1);\n\tBuild(t[x].c[1],x,mid+1,r);\n\tUpd(x);\n}\nvoid Rotate(int x){\n\tint y=t[x].f,z=t[y].f;\n\tPsd(y);\n\tPsd(x);\n\tint c=t[y].c[1]==x,gc=t[z].c[1]==y;\n\tt[z].c[gc]=x;\n\tt[x].f=z;\n\tt[y].c[c]=t[x].c[c^1];\n\tt[t[x].c[c^1]].f=y;\n\tt[x].c[c^1]=y;\n\tt[y].f=x;\n\tUpd(y);\n\tUpd(x);\n}\nvoid Splay(int x,int f){\n\twhile(t[x].f!=f){\n\t\tint y=t[x].f,z=t[y].f;\n\t\tPsd(y);\n\t\tPsd(z);\n\t\tif(z==f){\n\t\t\tRotate(x);\n\t\t}else{\n\t\t\tint c=t[y].c[1]==x,gc=t[z].c[1]==y;\n\t\t\tif(c==gc){\n\t\t\t\tRotate(y);\n\t\t\t}else{\n\t\t\t\tRotate(x);\n\t\t\t}\n\t\t\tRotate(x);\n\t\t}\n\t}\n\tif(!f){\n\t\trt=x;\n\t}\n}\nint Find_N(int x){//\u67e5\u627eSplay\u7ef4\u62a4\u7684\u5e8f\u5217\u7684\u7b2cx\u4e2a\u6570\n\tint nw=rt;\n\twhile(nw){\n\t\tPsd(nw);\n\t\tif(t[t[nw].c[0]].sz+1==x){\n\t\t\treturn nw;\n\t\t}\n\t\tif(t[t[nw].c[0]].sz>=x){\n\t\t\tnw=t[nw].c[0];\n\t\t}else{\n\t\t\tx-=t[t[nw].c[0]].sz+1;\n\t\t\tnw=t[nw].c[1];\n\t\t}\n\t}\n}\nint Find_Min(int l){//\u67e5\u627el\u5230n\u7684\u533a\u95f4\u6700\u5c0f\u503c\n\tint kkk=0;\n\tif(l!=1){\n\t\tSplay(Find_N(l-1),0);\n\t\tPsd(rt);\n\t\tint nw=t[rt].c[1];\n\t\twhile(nw){\n\t\t\tPsd(nw);\n\t\t\tif((!t[nw].c[0]&&!t[nw].c[1])||(t[nw].mn==t[nw].v)){\n\t\t\t\treturn kkk+t[t[nw].c[0]].sz+l;\n\t\t\t}\n\t\t\tif(t[t[nw].c[0]].mn>t[t[nw].c[1]].mn){\n\t\t\t\tkkk+=t[t[nw].c[0]].sz+1;\n\t\t\t\tnw=t[nw].c[1];\n\t\t\t}else{\n\t\t\t\tnw=t[nw].c[0];\n\t\t\t}\n\t\t}\n\t}else{\n\t\tint nw=rt;\n\t\twhile(nw){\n\t\t\tPsd(nw);\n\t\t\tif((!t[nw].c[0]&&!t[nw].c[1])||(t[nw].mn==t[nw].v)){\n\t\t\t\treturn kkk+t[t[nw].c[0]].sz+l;\n\t\t\t}\n\t\t\tif(t[t[nw].c[0]].mn>t[t[nw].c[1]].mn){\n\t\t\t\tkkk+=t[t[nw].c[0]].sz+1;\n\t\t\t\tnw=t[nw].c[1];\n\t\t\t}else{\n\t\t\t\tnw=t[nw].c[0];\n\t\t\t}\n\t\t}\n\t}\n}\nvoid Flip(int l,int r){//\u7ffb\u8f6c\u533a\u95f4[l,r]\n\tif(l==1){\n\t\tif(r==n){\n\t\t\tt[rt].tag^=1;\n\t\t}else{\n\t\t\tSplay(Find_N(r+1),0);\n\t\t\tPsd(rt);\n\t\t\tt[t[rt].c[0]].tag^=1;\n\t\t}\n\t}else if(r==n){\n\t\tSplay(Find_N(l-1),0);\n\t\tPsd(rt);\n\t\tt[t[rt].c[1]].tag^=1;\n\t}else{\n\t\tint L=Find_N(l-1);\n\t\tint R=Find_N(r+1);\n\t\tSplay(L,0);\n\t\tSplay(R,L);\n\t\tPsd(L);\n\t\tPsd(R);\n\t\tt[t[R].c[0]].tag^=1;\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i].h);\n\t\ta[i].id=i;\n\t}\n\tt[0].mn.h=1e9;\n\tBuild(rt,0,1,n);\n\tfor(int i=1;i<n;i++){\n\t\tp=Find_Min(i);\n\t\tprintf(\"%d \",p);\n\t\tFlip(i,p);\n\t}\n\tprintf(\"%d\",n);\n\treturn 0;\n}\n```",
        "postTime": 1541327461,
        "uid": 26294,
        "name": "xryjr233",
        "ccfLevel": 9,
        "title": "[2018.11.4]\u9898\u89e3 LuoguP3165/BZOJ3506 [Cqoi2014]\u6392\u5e8f\u673a\u68b0\u81c2(\u5e73\u8861\u6811/Splay)"
    },
    {
        "content": "## FHQ_Treap \u592a\u795e\u8fa3\n\n\u849f\u84bb\u521d\u5b66FHQ_Treap,\u4e8e\u662f\u6765\u5230\u4e86\u8fd9\u9053\u7565\u663e\u677f\u5b50\u7684\u9898\u76ee\n\n\u56e0\u4e3aTreap\u65e2\u6ee1\u8db3BST\u7684\u6027\u8d28\uff0c\u53c8\u6ee1\u8db3Heap\u7684\u6027\u8d28\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ee5\u5f80**\u968f\u673a\u51fa\u7684\u989d\u5916\u6743\u503c\u8f6c\u5316\u4e3a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u9ad8\u5ea6**\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u5c0f\u6839\u5806\u7684\u6027\u8d28\uff0c\u751a\u81f3\u8fde$Split$\u64cd\u4f5c\u90fd\u53ef\u4ee5\u7701\u7565\u6389\uff0c\u5c31\u53ef\u4ee5AC\u8fd9\u9053\u9898\u76ee\n\n\u6b65\u9aa4\uff1a\n1.\u9996\u5148\u627e\u5230\u73b0\u5728\u7684\u6839\u8282\u70b9\uff0c\u5373\u5f53\u524d\u9ad8\u5ea6\u6700\u4f4e\u7684\u4f4d\u7f6e\n\n2.\u6839\u636eTreap\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5176\u5de6\u5b50\u6811\u6253\u4e00\u4e2a\u53cd\u8f6c\u7684\u6807\u8bb0\uff0c\u7136\u540e\u5c06\u6839\u8282\u70b9\u5220\u9664\uff0c\u5c06\u5176\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u5408\u5e76\uff0c\u90a3\u4e48\uff0c\u65b0\u7684\u5b50\u8282\u70b9\u5c31\u662f\u6211\u4eec\u63a5\u4e0b\u6765\u9700\u8981\u7684\u7b2c2\u5c0f\u9ad8\u5ea6\u7684\u4f4d\u7f6e\n\n3.\u91cd\u590d1\uff0c2\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u9898\u76ee\u5c31\u5b8c\u7ed3\u6492\u82b1\u8fa3\uff01\uff01\n\n\u4f46\u662f\u9ad8\u5ea6\u6709\u53ef\u80fd\u662f\u76f8\u540c\u7684\uff0c\u9898\u76ee\u4e2d\u53c8\u8981\u6c42\u53d6\u9760\u524d\u7684\u90a3\u4e00\u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u6240\u6709\u7684\u6570\u4e58\u4e0an\uff0c\u518d\u52a0\u4e0ai\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6709\u6548\u907f\u514d\u8fd9\u4e00\u4e2a\u95ee\u9898\u3002\n\n~~\u613f\u671b\u603b\u662f\u7f8e\u597d\u7684~~\n\n----\n\n[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u6109\u5feb\u7684\u8fc7\u6389\u4e86\uff0c\u4f46\u53e6\u5916\u4e00\u9053\u76f8\u540c\u7684\u9898\u76ee\u5374\u8fc7\u4e0d\u4e86\uff08robotic sort\uff09\u3002\u7136\u540e\uff0c\u6709dalao\u6307\u51fa\uff0c\u8fd9\u6837\u7684\u505a\u6cd5\uff0c\u53ea\u8981\u6570\u636e\u662f\u5355\u8c03\u7684\uff0c\u5c31\u4f1a\u88ab\u5361\u6210$O(n^2)$\n\n\u4e8e\u662f\uff0c\u901a\u8fc7\u67e5\u9605\u8d44\u6599\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u795e\u5947\u7684\u65b9\u6cd5\u2014\u2014\u7b1b\u5361\u5c14\u6811\u4f18\u5316\u5efa\u6811\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6709\u6548\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u5bf9\u4e8e$Treap$\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u7b80\u5316\u4e3a\u4e00\u4e2a\u4e8c\u5143\u7ec4$(val,rand)$\uff0c\u610f\u4e49\u4e00\u770b\u4fbf\u77e5\n\n\u6211\u4eec\u6309\u7167val\u7684\u987a\u5e8f\u8fdb\u884c\u63d2\u5165\uff0c\u800c\u5728\u672c\u9898\u4e2d\uff0cval\u5373\u521d\u59cb\u4f4d\u7f6e1~n,\u6240\u4ee5\u4e0d\u7528\u91cd\u65b0\u6392\u5e8f\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u4ece\u800c\u6709\u6548\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5c06\u6808\u4e2d\u5927\u4e8e\u5f53\u524d\u8282\u70b9rand\u503c\u7684\u8282\u70b9\u5168\u90e8\u5f39\u51fa\uff0c\u5c06\u4ed6\u4eec\u6302\u5728\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u4e0a\uff0c\u7136\u540e\u518d\u628a\u8fde\u540c\u5f53\u524d\u8282\u70b9\u4e00\u8d77\u7684\u8fd9\u4e00\u68f5\u6811\u6302\u5728\u5f39\u5b8c\u6240\u6709\u503c\u4e4b\u540e\u7684\u6808\u9876\u8282\u70b9\u7684\u53f3\u513f\u5b50\u4e0a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6784\u5efa\u51fa\u4e00\u9897\u76f8\u5bf9\u5e73\u8861\u7684Treap\u3002\n\n\u7528\u901a\u4fd7\u7684\u8bdd\u8bb2\uff0c\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9u\uff0c\u6211\u4eec\u53ea\u8003\u8651\u5c06\u5176\u653e\u5728\u6700\u53f3\u8fb9\u7684\u8fd9\u4e00\u6761\u94fe\u4e0a\uff0c\u5982\u679c\u4ed6\u6bd4\u6240\u6709\u8282\u70b9\u7684rand\u503c\u90fd\u5927\uff0c\u90a3\u4e48\u5f53\u7136\u987a\u7406\u6210\u7ae0\u7684\u653e\u5728\u6700\u53f3\u8fb9\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u5c31\u8003\u8651\u540c\u65f6\u7ef4\u62a4BST\u4e0eHeap\u7684\u6027\u8d28\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u6211\u4eec\u4e0a\u9762\u7684\u505a\u6cd5\u3002\n\n\u8d34\u4ee3\u7801\u5566~\n\n```cpp\n//\u77ed\u77ed70\u884c\u89e3\u51b3\u6218\u6597\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn=5e5+10;\nlong long inline read()\n{\n    long long x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nlong long son[maxn][2],val[maxn],rnd[maxn],siz[maxn],cnt,rt,tag[maxn];\ninline void upd(long long t){siz[t]=siz[son[t][0]]+siz[son[t][1]]+1;}\ninline void down(long long x)\n{\n    if(tag[x])\n    {\n        swap(son[x][0],son[x][1]);\n        if(son[x][0]) tag[son[x][0]]^=1;\n        if(son[x][1]) tag[son[x][1]]^=1;\n        tag[x]=0;\n    }\n}\ninline long long init(long long x,long long qaq)\n{\n    ++cnt,val[cnt]=x,siz[cnt]=1,rnd[cnt]=qaq;\n    return cnt;\n}\ninline long long merge(long long x,long long y)\n{\n    if(!x||!y) return x+y;\n    if(rnd[x]<rnd[y])\n    {\n        down(x),son[x][1]=merge(son[x][1],y),upd(x);\n        return x;\n    }\n    else\n    {\n        down(y),son[y][0]=merge(x,son[y][0]),upd(y);\n        return y;\n    }\n}\nstruct cc{\n    long long num,id;\n}a[maxn];\nint main()\n{\n    srand(time(0));\n    long long opt,n,m,l,r,x,y,z;\n    stack<int> q;\n    scanf(\"%lld\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",&rnd[i]),rnd[i]=rnd[i]*n+i,val[i]=i,siz[i]=1;\n        while((!q.empty())&&rnd[i]<rnd[q.top()])\n            son[i][0]=q.top(),q.pop(),upd(son[i][0]);\n        if(!q.empty()) son[q.top()][1]=i;\n        q.push(i);\n    }\n    while(!q.empty()) rt=q.top(),upd(q.top()),q.pop();\n    for(int i=1;i<=n;++i)\n    {\n        down(rt);\n        printf(\"%lld \",siz[son[rt][0]]+i);\n        l=son[rt][0],r=son[rt][1];\n        son[rt][0]=son[rt][1]=0;\n        tag[l]^=1;\n        rt=merge(l,r);\n    }\n    return 0;\n}\n```",
        "postTime": 1559043178,
        "uid": 43957,
        "name": "HenryHuang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "# P3195 \u673a\u68b0\u81c2\u6392\u5e8f   \n\u5199\u4e86\u4e00\u4e0b\u5348\u9898\u4e0d\u60f3\u5199\u4e86\uff0c\u4e8e\u662f\u6765\u4e00\u53d1\u9898\u89e3  \u3002  \n\u9996\u5148\u6211\u4eec\u8981\u641e\u6e05\u695a\u8fd9\u9053\u9898\u8981\u6211\u4eec\u5e72\u4ec0\u4e48    \u3002\n## \u9898\u610f  \n\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0cn\u6b21\u64cd\u4f5c\uff0c\u7b2ci\u6b21\u64cd\u4f5c\u627e\u5230i-1\u4e4b\u540e\u6700\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\uff0c\u5c06i\u5230\u8fd9\u91cc\u505a\u7ffb\u8f6c\uff0c\u95ee\u6bcf\u6b21\u64cd\u4f5c\u6240\u627e\u5230\u7684\u90a3\u4e2a\u4f4d\u7f6e\u3002  \n\u4e3a\u4ec0\u4e48\u662f\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4f60\u7ffb\u8f6c\u533a\u95f4\u65f6\u90fd\u5c06i-1\u4e4b\u540e\u7684\u6700\u5c0f\u503c\u7ffb\u5230i\u4e86\uff0c\u6240\u4ee5i+1\u6b21\u64cd\u4f5c\u8981\u627e\u5e8f\u5217\u4e2di+1\u5c0f\u503c\u5c31\u4e00\u5b9a\u662fi\u4e4b\u540e\u7684\u6700\u5c0f\u503c\u3002\n## \u5fc3\u8def\u5386\u7a0b\n\u505a\u4e86\u6587\u827a\u5e73\u8861\u6811\u7684\u677f\u5b50\u540e\u8df3\u5230\u8fd9\u9053\u9898\uff0c\u4e00\u65f6\u4e0d\u77e5\u9053\u600e\u4e48\u641e\u67e5\u8be2\u64cd\u4f5c\uff0c\u7136\u540e\u3002\u3002\u3002   \n\u53c2\u8003\u4e86\u7f51\u4e0a\u5927\u4f6c\u4eec\u9898\u89e3\u540e\u7ec8\u4e8e\u6709\u4e86\u4e00\u70b9\u70b9\u601d\u8def\uff0c\u7136\u540e\u662f\u8ba9\u4eba\u53d1\u75af\u7684\u8c03\u8bd5\u3002  \n\u6211\u6682\u65f6\u653e\u4e0b\uff0c\u7136\u540e\u6559\u7ec3\u8bb2\u4e86LCT\uff0c\u5bf9splay\u7684\u7406\u89e3\u6df1\u4e86\u51e0\u5206\uff0c\u6700\u540e\u624d\u505a\u51fa\u6765 \u3002 \n## \u601d\u8003\u8fc7\u7a0b&&\u601d\u8def\n\u8fd9\u9053\u9898\u8981\u6211\u4eec\u505a\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u54ea\u79cd\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5feb\u901f\u5b9e\u73b0\u5462\uff1f  \n\u6beb\u65e0\u7591\u95ee\u5e73\u8861\u6811\u3002  \n\u5177\u4f53\u600e\u4e48\u505a\uff1f  \n\u6211\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22splay\uff0c\u6240\u4ee5\u672c\u9898\u89e3\u662fsplay\u7248\u3002  \n\u6211\u4eec\u4ee5\u4e00\u4e2a\u6570\u5728\u6570\u5217\u4e2d\u7684\u4f4d\u7f6e\u4e3a\u5173\u952e\u503c\u5c06\u5176\u63d2\u5165splay\uff0c\u6240\u4ee5splay\u7684\u4e2d\u987b\u904d\u5386\u5c31\u662f\u8fd9\u4e2a\u6570\u5217\u3002   \n\u600e\u6837\u7ffb\u8f6c\uff1f\uff1f    \n\u6211\u4eec\u53ea\u9700\u8981\u5c06\u4ee3\u8868\u7740\u8fd9\u4e2a\u533a\u95f4\u7684splay\u6574\u9897\u7ffb\u8f6c\u3002   \n\u4e5f\u5c31\u662f\u8bf4\u5c06\u8fd9\u9897splay\u6240\u6709\u975e\u53f6\u5b50\u8282\u70b9\u7684\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u4ea4\u6362\u3002  \n\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u601d\u8003\u4e00\u4e0b\u3002  \n\u6211\u5c31\u4e0d\u7ed9\u56fe\u4e86\u3002   \n\u6211\u4eec\u600e\u6837\u5c06\u4e00\u4e2a\u533a\u95f4\u63d0\u51fa\u6765\u5462\u3002  \n\u6211\u4eec\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684size\uff0c\u4e5f\u5c31\u662f\u5b50\u6811\u5927\u5c0f\u3002  \n\u7136\u540e\u6211\u4eec\u5c06\u8fd9\u4e2a\u533a\u95f4\u5de6\u7aef\u70b9\u524d\u4e00\u4e2a\u70b9\uff08\u8bbe\u5176\u4e3ax\uff09splay\u5230\u6839\uff0c\u53f3\u7aef\u70b9\u540e\u4e00\u4e2a\u70b9\uff08\u8bbe\u5176\u4e3ay\uff09splay\u4e3ax\u7684\u53f3\u513f\u5b50\uff0c\u56e0\u4e3ay\u7684\u5173\u952e\u503c\u6bd4x\u5927\uff0c\u6240\u4ee5y\u4e00\u5b9a\u662fx\u53f3\u513f\u5b50\u3002   \n   \u60f3\u60f3splay\u7684\u6027\u8d28\uff0c\u6bcf\u4e2a\u8282\u70b9\u53f3\u5b50\u6811\u7684\u6240\u6709\u70b9\u5173\u952e\u503c\u5927\u4e8e\u8be5\u70b9\uff0c\u5de6\u5b50\u6811\u7684\u6240\u6709\u70b9\u5173\u952e\u503c\u5c0f\u4e8e\u8be5\u70b9\uff0c\u6240\u4ee5y\u7684\u5de6\u5b50\u6811\u7684\u6240\u6709\u70b9\u7684\u5173\u952e\u503c\u90fd\u5c0f\u4e8ey\u800c\u4e14\u5927\u4e8ex\uff0c\u53c8\u56e0\u4e3a\u6211\u4eec\u6bcf\u4e2a\u5173\u952e\u503c\u53ea\u5bf9\u5e94\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u8fd9\u4e2a\u533a\u95f4\u6240\u6709\u70b9\u90fd\u5305\u542b\u5728y\u7684\u5de6\u5b50\u6811\u3002  \n\u4e3a\u4ec0\u4e48\u662f\u6240\u6709\u70b9\u5462\uff1f\uff1f   \n\u56e0\u4e3ax\u5230\u6839\u4e86\uff0c\u6240\u4ee5x\u7684\u5de6\u5b50\u6811\u5173\u952e\u503c\u90fd\u5c0f\u4e8ex\uff0cy\u53f3\u5b50\u6811\u7684\u5173\u952e\u503c\u90fd\u5927\u4e8ey\uff0c\u6240\u4ee5\u5173\u952e\u503c\u5927\u4e8ex\u5c0f\u4e8ey\u7684\u70b9\u90fd\u5728y\u7684\u5de6\u5b50\u6811\u4e0a\u3002  \n\u6211\u4eec\u5bf9\u7ed9\u51fa\u7684\u6570\u5217\u4ee5\u9ad8\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4f4d\u7f6e\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u5347\u5e8f\u6392\u5e8f\u3002  \n\u7136\u540e\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6bcf\u4e2a\u70b9\u7684\u5b9e\u9645\u6570\u503c\u3002    \n\u6211\u4eec\u8bbe\u8ba1\u4e00\u4e2a\u53ebsize_rt\u7684\u51fd\u6570\uff0c\u6765\u627e\u5f53\u524d\u6570\u5217\u7b2cx\u4e2a\u6570\u6240\u5728\u8282\u70b9\u7684\u7f16\u53f7\u3002   \n```cpp\nint size_rt(int u,int x)\n{\n\tpush_down(u);//\u6211\u4eec\u7ffb\u8f6c\u6574\u9897\u5b50\u6811\u662f\u4e0d\u53ef\u80fd\u66b4\u529b\u7ffb\u8f6c\uff0c\u6240\u4ee5\u53ea\u7ffb\u8f6c\u4e00\u4e2a\u70b9\n\t//\u7528lazy\u6807\u8bb0\u6765\u8868\u793a\u4e00\u4e2a\u70b9\u513f\u5b50\u662f\u5426\u5df2\u7ffb\u8f6c\uff0c\u8981\u8bbf\u95ee\u513f\u5b50\u65f6\u5c31\u8981push_down\n\t//\u4e00\u4e2a\u70b9\u5de6\u5b50\u6811\u7684\u70b9\u6570\u91cf\u4ee3\u8868\u5728\u8fd9\u9897\u5b50\u6811\u6240\u4ee3\u8868\u7684\u5e8f\u5217\u4e2d\u5b83\u4e4b\u524d\u7684\u70b9\u7684\u6570\u91cf \n\t//\u53f3\u5b50\u6811\u70b9\u7684\u6570\u91cf\u540c\u7406\n   while(a[a[u].son[0]].size+1!=x)//\u5982\u679c\u5f53\u524d\u70b9\u4e0d\u662f\u6570\u5217\u4e2d\u7684\u7b2cx\u4e2a\u70b9 \n\t{\n\tif(a[a[u].son[0]].size>=x) \n\tu=a[u].son[0];\n\telse\n\t{\n\t\tx-=1+a[a[u].son[0]].size;//\u5de6\u5b50\u6811\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u70b9\uff0c\u5c31\u8981\u5728\u53f3\u5b50\u6811\u4e2d\u627e \n\t\tu=a[u].son[1];\n\t}\n\tpush_down(u);\n\t}\n\treturn u;\n}\n```     \n\u6211\u5199\u6210\u9012\u5f52\u5427\u3002  \n```cpp\nint size_rt(int u,int x)\n{\n\tpush_down(u);\n\tif(a[a[u].son[0]].size+1==x)\n\treturn u;\n\tif(a[a[u].son[0]].size>=x)\n\treturn size_rt(a[u].son[0],x);\n\treturn size_rt(a[u].son[1],x-1-a[a[u].son[0]].size);\n}\n```\n\n\n\u518d\u8bbe\u8ba1\u4e00\u4e2a\u53ebfind\u7684\u51fd\u6570\uff0c\u7528\u6765\u627ei-1\u4e4b\u540e\u7684\u5b9e\u9645\u6570\u503c\u6700\u5c0f\u503c\u6240\u5728\u8282\u70b9\u7f16\u53f7\u3002  \n```\n//while\u5faa\u73af\u7248 \nint find(int u)\n{\n\twhile(a[u].val!=a[u].mi)\n\t{\n\t\tpush_down(u);\n\t\tif(a[a[u].son[0]].mi==a[u].mi)\n\t\tu=a[u].son[0];\n\t\telse\n\t\tu=a[u].son[1];\n\t}\n\treturn u;\n}\n//\u9012\u5f52\u7248\n//int find(int u)\n//{\n//\tif(a[u].val==mi)\n//\treturn u;\n//\tpush_down(u);\n//\tif(a[a[u].son[1]].mi==a[u].mi)//\u6211\u4eec\u4fdd\u8bc1\u6bcf\u4e2a\u5173\u952e\u503c\u53ea\u6709\u4e00\u4e2a \n//\treturn find(a[u].son[1]);\n//\treturn find(a[u].son[0]);\n//} \n```  \n\u8fd9\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u505a\u751a\uff1f\uff1f   \n\u73b0\u5728\u8003\u8651\u67e5\u8be2\u3002  \n\u6211\u4eec\u67e5\u8be2\u65f6\u5148\u5f97\u5230\u5e8f\u5217\u4e2d\u7b2ci-1\u4e2a\u70b9\u6240\u5728\u8282\u70b9\u7684\u7f16\u53f7\u3002  \n\u628a\u8fd9\u4e2a\u8282\u70b9splay\u5230\u6839\uff0c\u518d\u5728\u5b83\u7684\u53f3\u5b50\u6811\u4e0a\u67e5\u6700\u5c0f\u503c\u6240\u5728\u7684\u8282\u70b9\u7684\u7f16\u53f7\uff08\u8bbe\u5176\u4e3aa\uff09\n\u4e5f\u5c31\u662f\u67e5i-1\u4e4b\u540e\u7684\u6700\u5c0f\u503c\u6240\u5728\u8282\u70b9\u7684\u7f16\u53f7\u3002  \n\u5c06a spaly\u5230\u5230\u6839\uff0ca\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u5c31\u662fa\u5de6\u513f\u5b50\u7684size+1\u3002  \n\u7528find\u627e\u5230a\u53f3\u8fb9\u7684\u90a3\u4e2a\u70b9\u5728splay\u4e2d\u7684\u7f16\u53f7\uff0c\u63d0\u51fa\u8981\u7ffb\u8f6c\u7684\u533a\u95f4\u8fdb\u884c\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u8fd9\u5c31\u662f\u4e00\u6b21\u5b8c\u6574\u7684\u67e5\u8be2\u4e86\u3002\n\n\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u8bb2\u5b8c\u4e86\uff0c\u8fd9\u9053\u9898\u4e5f\u5c31\u53ea\u5269\u6253\u5b57\u5566\u5566\u5566\u3002 \n```\nint quert(int x)//\u6709\u4eba\u95ee\u6211\u4e3a\u5565\u662fquert\uff0c\n//\u56e0\u4e3a\u6211\u7b2c\u4e00\u6b21\u5b66\u7ebf\u6bb5\u6811\u662f\u5c06query\u6253\u6210\u4e86quert\uff0c\n//\u7136\u540e\u53d1\u73b0ert\u4e09\u4e2a\u5b57\u6bcd\u5728\u952e\u76d8\u4e0a\u662f\u8fde\u7eed\u7684\uff0c\u987a\u624b\uff0c\u6240\u4ee5\u3002\u3002\u3002\n{\n\tint u;\n\tsplay(x,0);\n\tu=find(a[x].son[1]);\n\tsplay(u,0);\n\tint tt=a[a[u].son[0]].size+1;//\u8bb0\u5f55\u4f4d\u7f6e\u3002\n        //splay\u65f6\u513f\u5b50\u4f1a\u53d8\uff0c\u6240\u4ee5\u8981\u63d0\u524d\u8bb0\u3002\n\tu=size_rt(root,tt+1);\n\tsplay(x,0);\n\tsplay(u,x);//\u63d0\u533a\u95f4\u3002\n\tfz(a[u].son[0]);\n\treturn tt-1;//\u4e3a\u4ec0\u4e48\u662f\u51cf\u4e00\u4ee3\u7801\u4e2d\u89e3\u91ca\u3002\n}\n```\n## \u5b8c\u6574\u4ee3\u7801  \n```\n#include<bits/stdc++.h>\nusing namespace std;\nint i,j,k,m,n,s,t,root,js,st[100100];\nconst int N=1e6+10;\nstruct tree{\n\tint son[2],fa,val,mi,sum,size;\n\ttree()\n\t{\n\t\tson[0]=son[1]=fa=0;\n\t\tsize=1;\n\t\tmi=2e9;//\u4e00\u5b9a\u8981\u8d4b\u521d\u503c\uff0c\u4e0d\u7136\u6700\u5c0f\u503c\u4f1a\u53d80\u3002\n\t}\n}a[N];\nstruct fu{\n\tint num,rank;\n}b[N];\nint lazy[N],tid[N];\nbool cmp(fu aa,fu bb)\n{\n\tif(aa.num!=bb.num)\n\treturn aa.num<bb.num;\n\treturn aa.rank<bb.rank;\n}\nvoid push_up(int rt)\n{\n\tif(rt==0)\n\treturn;\n\ta[rt].mi=min(min(a[a[rt].son[0]].mi,a[a[rt].son[1]].mi),a[rt].val);\n\ta[rt].size=a[a[rt].son[1]].size+a[a[rt].son[0]].size+1;\n}\nvoid fz(int rt)\n{\n\tif(rt==0)\n\treturn;\n\tswap(a[rt].son[0],a[rt].son[1]);\n\tlazy[rt]^=1;\n}\nvoid push_down(int rt)\n{\n\tif(lazy[rt]==0)\n\treturn;\n\tfz(a[rt].son[0]);\n\tfz(a[rt].son[1]);\n\tlazy[rt]=0;\n}\nvoid xz(int x)\n{\n\tint y=a[x].fa,z=a[y].fa;\n\tint o=a[y].son[1]==x,b=a[x].son[o^1];\n\ta[x].fa=z;\n\tif(z)\n\ta[z].son[a[z].son[1]==y]=x;\n\ta[x].son[o^1]=y;\n\ta[y].fa=x;\n\ta[y].son[o]=b;\n\tif(b)\n\ta[b].fa=y;\n\tpush_up(y);//\u6ce8\u610f\u8fd9\u91cc\u7684\u987a\u5e8f\u3002\n\tpush_up(x);\n}\nvoid splay(int x,int c)\n{\n\tint top=0;\n\tint y=a[x].fa;\n\tst[++top]=x;\n\twhile(y)\n\tst[++top]=y,y=a[y].fa;\n\twhile(top)\n\tpush_down(st[top--]);//\u6211\u4eecsplay\u65f6\u6ca1\u4fdd\u8bc1\u6240\u6709\u70b9\u90fdpushdown\u8fc7\u4e86\n\t//\u6240\u4ee5\u8981\u9884\u5148\u5904\u7406\uff0c\u6211\u662f\u5148\u5b66\u4e86LCT\u624d\u610f\u8bc6\u5230\u7684\u3002\n\ty=a[x].fa;\n\tfor(;y!=c;)\n\t{\n\t\tif(a[y].fa!=c)\n\t\txz(((a[a[y].fa].son[1]==y)^(a[y].son[1]==x))==0?y:x);\n\t\txz(x);\n\t\ty=a[x].fa;\n\t}\n\tif(c==0)\n\troot=x;//\u6362\u6839\u3002\n}\nvoid add(int u,int x)\n{\n\t// \u6211\u4eec\u662f\u4e25\u683c\u987a\u5e8f\u52a0\u70b9\u3002\n\twhile(a[u].son[1]!=0)//\u52a0\u70b9\u64cd\u4f5c\uff0c\u5f80\u53f3\u513f\u5b50\u653e\u5c31\u884c\u3002\n\tu=a[u].son[1];\n\ta[u].son[1]=++js;\n\ta[js].fa=u;\n\ta[js].val=x;\n\ta[js].mi=x;\n\tsplay(js,0);//\u4fdd\u8bc1\u590d\u6742\u5ea6\u5e76\u5411\u4e0a\u66f4\u65b0\u3002\n}\n//\u8fd9\u662fwhile\u5faa\u73af\u7248\u3002\n//int size_rt(int u,int x)\n//{\n//\tpush_down(u);//\u6211\u4eec\u7ffb\u8f6c\u6574\u9897\u5b50\u6811\u662f\u4e0d\u53ef\u80fd\u66b4\u529b\u7ffb\u8f6c\uff0c\u6240\u4ee5\u53ea\u7ffb\u8f6c\u4e00\u4e2a\u70b9\u3002\n//\t//\u7528lazy\u6807\u8bb0\u6765\u8868\u793a\u4e00\u4e2a\u70b9\u513f\u5b50\u662f\u5426\u5df2\u7ffb\u8f6c\uff0c\u8981\u8bbf\u95ee\u513f\u5b50\u65f6\u5c31\u8981push_down\u3002\n//\t//\u4e00\u4e2a\u70b9\u5de6\u5b50\u6811\u7684\u70b9\u6570\u91cf\u4ee3\u8868\u5728\u8fd9\u9897\u5b50\u6811\u6240\u4ee3\u8868\u7684\u5e8f\u5217\u4e2d\u5b83\u4e4b\u524d\u7684\u70b9\u7684\u6570\u91cf \u3002\n//\twhile(a[a[u].son[0]].size+1!=x)//\u5982\u679c\u5f53\u524d\u70b9\u4e0d\u662f\u6570\u5217\u4e2d\u7684\u7b2cx\u4e2a\u70b9\u3002\n//\t{\n//\tif(a[a[u].son[0]].size>=x) \n//\tu=a[u].son[0];\n//\telse\n//\t{\n//\t\tx-=1+a[a[u].son[0]].size;//\u5de6\u5b50\u6811\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u70b9\uff0c\u5c31\u8981\u5728\u53f3\u5b50\u6811\u4e2d\u627e\u3002\n//\t\tu=a[u].son[1];\n//\t}\n//\tpush_down(u);\n//\t}\n//\treturn u;\n//}\n//\u8fd9\u662f\u9012\u5f52\u7248\u3002\nint size_rt(int u,int x)\n{\n\tpush_down(u);\n\tif(a[a[u].son[0]].size+1==x)\n\treturn u;\n\tif(a[a[u].son[0]].size>=x)\n\treturn size_rt(a[u].son[0],x);\n\treturn size_rt(a[u].son[1],x-1-a[a[u].son[0]].size);\n}\n//while\u5faa\u73af\u7248 \nint find(int u)\n{\n\twhile(a[u].val!=a[u].mi)\n\t{\n\t\tpush_down(u);\n\t\tif(a[a[u].son[0]].mi==a[u].mi)\n\t\tu=a[u].son[0];\n\t\telse\n\t\tu=a[u].son[1];\n\t}\n\treturn u;\n}\n//\u9012\u5f52\u7248\n//int find(int u)\n//{\n//\tif(a[u].val==mi)\n//\treturn u;\n//\tpush_down(u);\n//\tif(a[a[u].son[1]].mi==a[u].mi)//\u6211\u4eec\u4fdd\u8bc1\u6bcf\u4e2a\u5173\u952e\u503c\u53ea\u6709\u4e00\u4e2a \n//\treturn find(a[u].son[1]);\n//\treturn find(a[u].son[0]);\n//} \nint quert(int x)\n{\n\tint u;\n\tsplay(x,0);\n\tu=find(a[x].son[1]);\n\tsplay(u,0);\n\tint tt=a[a[u].son[0]].size+1;\n\tu=size_rt(root,tt+1);\n\tsplay(x,0);\n\tsplay(u,x);\n\tfz(a[u].son[0]);\n\treturn tt-1;//\u56e0\u4e3a\u6709\u54e8\u5175\u8282\u70b9\n\t//\u6240\u4ee5\u70b9\u6bd4\u5b9e\u9645\u591a\u4e00\u4e2a \n}\nint main()\n{\n//\tfreopen(\"data.in\",\"r\",stdin);\n\ta[0].size=0;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++)\t\n\t{\n\t\tscanf(\"%d\",&b[i].num);\n\t\tb[i].rank=i;\n\t}\n\tsort(b+1,b+n+1,cmp);//\u6392\u5e8f\uff0c\u79bb\u6563\u5316 \n\tfor(i=1;i<=n;i++)\n\ttid[b[i].rank]=i;//tid[i]\u8868\u793ai\u4f4d\u7f6e\u7684\u79bb\u6563\u540e\u6570\u503c \n\tadd(root,1e9);//\u52a0\u4e24\u4e2a\u54e8\u5175\u8282\u70b9\uff0c\u9884\u9632find\u65f6find\u51fa\u53bb\u4e86 \n\tfor(i=1;i<=n;i++)\n\tadd(root,tid[i]);\n\tadd(root,1e9);\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tint yt=size_rt(root,i);\n\t\tprintf(\"%d \",quert(yt));\n\t}\n\treturn 0;\n}\n```\n\n\n\n\n\n\n",
        "postTime": 1593853214,
        "uid": 177535,
        "name": "CDFLS_mao_zx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3--\u673a\u68b0\u81c2\u6392\u5e8f(\u65e0\u6307\u9488splay)"
    },
    {
        "content": "\u4e00\u5e74\u4ee5\u524d\uff0c\u6211\u770b\u5230\u8fd9\u9898\uff0c\u60f3\u5230\uff1a\u8fd9\u4e2a\u4e1c\u897f\u4f60\u8981\u5728\u4e00\u4e2a\u533a\u95f4\u6811\u4e0a\u9762\u67e5\u6700\u5c0f\u503c\u2026\u2026\u8fd9\u73a9\u610f\u6ca1\u6cd5\u505a\u554a\uff08\u5f53\u65f6\u5565\u4e5f\u4e0d\u4f1a\uff09\u2026\u2026\n\n~~\u7136\u540e\u5c31\u628a\u8fd9\u9898\u7ed9\u6254\u4e86\u2026\u2026~~\n\n~~\u4e00\u5e74\u540e\u56de\u6765\u770b\uff1a\u8fd9\u4e0d sb \u9898\u5417\u2026\u2026~~\n\n\u6240\u4ee5\u5c31\u5728\u8fd9\u91cc\u8be6\u7ec6\u4ecb\u7ecd\u4e00\u4e0b\u533a\u95f4\u6811\u7684\u601d\u60f3\u5427\u3002\n\n\u9996\u5148\u4f60\u663e\u7136\u662f\u8981\u5199\u4e2a\u4e1c\u897f\u53bb\u7ef4\u62a4\u533a\u95f4\u7ffb\u8f6c\u533a\u95f4\u6c42 $\\min$ \u548c\u5176\u4f4d\u7f6e\uff0c\u5982\u679c\u8ba4\u4e3a\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u80fd\u7ef4\u62a4\u81ea\u5df1\u7684\u4fe1\u606f\u5c31\u5e9f\u6389\u4e86\u3002\u3002\u3002\n\n\u4f46\u662f\u6bcf\u4e00\u4e2a\u8282\u70b9\u7531\u4e8e\u53ea\u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u6240\u4ee5\u5982\u679c\u7ef4\u62a4\u7684\u4fe1\u606f\u53ef\u4ee5 $O(x)$ \u5408\u5e76\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5 $O(x)$ \u7531\u5b69\u5b50\u7684\u5b50\u6811\u4fe1\u606f\u9012\u63a8\u5230\u81ea\u5df1\u7684\u5b50\u6811\u4fe1\u606f\uff0c\u4ee5\u6b64\u6765\u8fbe\u5230\u7ef4\u62a4**\u8282\u70b9\u7684\u5b50\u6811\u5bf9\u5e94\u7684\u533a\u95f4**\u7684\u4fe1\u606f\u7684\u76ee\u7684\u3002\n\n\u65e2\u7136\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 Treap \u7684\u5408\u5e76\u548c\u5206\u88c2/Splay \u7684\u5411\u6839\u65cb\u8f6c\u6765 $O(x\\log n)$ \u5f97\u5230\u4e00\u6bb5\u533a\u95f4\u5185\u7684\u4fe1\u606f\u3002\n\n\u8fd9\u4e2a\u601d\u60f3\u5176\u5b9e\u53ef\u4ee5\u7c7b\u6bd4\u7ebf\u6bb5\u6811\u6765\u7406\u89e3\u3002\n\n\u56de\u5230\u8fd9\u9898\uff0c\u53d1\u73b0\u8fd9\u4e2a\u9898\u8981\u7ef4\u62a4\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u4fe1\u606f\u663e\u7136\u662f $O(1)$ \u5408\u5e76\u3002\n\n\u90a3\u4e48\u67e5\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u5c31\u5f88\u5bb9\u6613\u4e86\uff1a\u6211\u4eec\u53ea\u9700\u8981\u5728\u6811\u4e0a dfs\uff0c\u6bcf\u6b21\u6bd4\u8f83\u5de6\u5b50\u7684\u6700\u5c0f\u503c $v_l$\u3001\u81ea\u5df1\u7684**\u8282\u70b9\u503c** $v_0$\u3001\u53f3\u5b50\u7684\u6700\u5c0f\u503c $v_r$\uff0c\u5982\u679c $v_l$ \u6700\u5c0f\uff0c\u90a3\u4e48\u76f4\u63a5\u9012\u5f52\u67e5\u8be2\u5de6\u5b50\u6811\u5373\u53ef\uff1b\u5982\u679c $v_0$ \u6700\u5c0f\uff0c\u8fd4\u56de\u5de6\u5b50\u6811\u7684\u5927\u5c0f $+1$\uff0c\u5373\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u6392\u540d\uff1b\u5982\u679c $v_r$ \u6700\u5c0f\uff0c\u8fd4\u56de\u9012\u5f52\u67e5\u8be2\u53f3\u5b50\u6811\u7684\u7ed3\u679c\u52a0\u5de6\u5b50\u6811\u7684\u5927\u5c0f $+1$\uff0c\u56e0\u4e3a\u5de6\u5b50\u6811\u548c\u81ea\u5df1\u90fd\u6574\u4f53\u6bd4\u53f3\u5b50\u6811\u9760\u524d\uff0c\u6240\u4ee5\u8981\u5168\u90e8\u52a0\u5165\u6392\u540d\u3002\n\n\u67e5\u51fa\u4f4d\u7f6e $k$ \u4e4b\u540e\uff0c\u5c06\u6574\u4e2a\u533a\u95f4 $[L,R]$ \u5206\u89e3\u4e3a $[L,k-1]$\u3001$[k,k]$\u3001$[k+1,R]$\uff0c\u7136\u540e\u7ffb\u8f6c $[L,k-1]$\uff0c\u628a $[L,k-1]$ \u548c $[k+1,R]$ \u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u4e0d\u80fd\u6539\u53d8\u76f8\u5bf9\u987a\u5e8f\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u53ea\u9700\u8981\u628a\u6240\u6709\u7684\u6570 $\\times n$ \u7136\u540e\u6cbf\u51fa\u73b0\u6b21\u6570\u4f9d\u6b21\u5f80\u540e\u52a0\u5c31\u53ef\u4ee5\u3002\u6bd4\u5982 $1,3,2,4,3,4$ \u53d8\u6210 $6,18,12,24,19,25$\u3002\n\n\u8fd9\u6837\u8fd9\u9898\u5c31\u505a\u5b8c\u5566~\n\n\u56e0\u4e3a\u5408\u5e76\u662f $O(1)$\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\uff0c\u7a7a\u95f4\u4e3a $O(n)$\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline long long qread() {\n\tregister char c = getchar();\n\tregister long long x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline long long Abs(const long long& x) {return (x > 0 ? x : -x);}\ninline long long Max(const long long& x, const long long& y) {return (x > y ? x : y);}\ninline long long Min(const long long& x, const long long& y) {return (x < y ? x : y);}\n\n#define Getsize(p) (p ? p->siz : 0)\n#define Getmn(p) (p ? p->mn : 0x3f3f3f3f3f3f3f3f)//\u6ce8\u610f\u7a7a\u8282\u70b9\u7684 min \u503c\u8981\u53d6 +INF\nstruct Node {\n\tlong long val, mn, siz, rnd;\n\tbool revtag;\n\tNode *l, *r;\n\tNode() {\n\t\tl = r = NULL;\n\t\trevtag = val = mn = siz = rnd = 0;\n\t}\n\tinline void Update() {\n\t\tsiz = Getsize(l) + Getsize(r) + 1;\n\t\tmn = Min(Getmn(l), Min(Getmn(r), val));//\u5408\u5e76\u5de6\u53f3\u533a\u95f4\n\t}\n    //\u5f88\u5957\u8def\u7684\u4e0b\u653e\u7ffb\u8f6c\u6807\u8bb0\n\tinline void Pushdown() {\n\t\tif (revtag) {\n\t\t\tif (l) l->revtag ^= 1;\n\t\t\tif (r) r->revtag ^= 1;\n\t\t\tswap(l, r);\n\t\t\trevtag = 0;\n\t\t}\n\t}\n};\nNode nd[100005];\nint top;\nstruct Treap {\n\tNode *_root;\n    //\u521b\u5efa\u65b0\u8282\u70b9\n\tinline Node* New(long long val) {\n\t\tNode *p = &nd[top++];\n\t\tp->val = val;\n\t\tp->mn = val;//\u65b0\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u5b50\u6811\u6700\u5c0f\u503c\u5c31\u662f\u81ea\u5df1\u7684\u503c\n\t\tp->siz = 1;\n\t\tp->rnd = rand();\n\t\treturn p;\n\t}\n    //\u975e\u5e38\u6a21\u677f\u7684\u5408\u5e76\u5206\u88c2\n\tinline void split(Node *p, int spk, Node *&lt, Node *&rt) {\n\t\tif (!p) {\n\t\t\tlt = rt = NULL;\n\t\t\treturn;\n\t\t}\n\t\tp->Pushdown();\n\t\tif (Getsize(p->l) < spk) {\n\t\t\tlt = p;\n\t\t\tsplit(p->r, spk - Getsize(p->l) - 1, p->r, rt);\n\t\t} else {\n\t\t\trt = p;\n\t\t\tsplit(p->l, spk, lt, p->l);\n\t\t}\n\t\tp->Update();\n\t}\n\tinline Node* merge(Node *lt, Node *rt) {\n\t\tif (!lt) return rt;\n\t\tif (!rt) return lt;\n\t\tif (lt->rnd < rt->rnd) {\n\t\t\tlt->Pushdown();\n\t\t\tlt->r = merge(lt->r, rt);\n\t\t\tlt->Update();\n\t\t\treturn lt;\n\t\t} else {\n\t\t\trt->Pushdown();\n\t\t\trt->l = merge(lt, rt->l);\n\t\t\trt->Update();\n\t\t\treturn rt;\n\t\t}\n\t}\n    //\u67e5\u8be2\u6392\u540d\n\tinline int Query(Node *p) {\n\t\tif (!p) return 0;\n\t\tp->Pushdown();//\u6ce8\u610f\u8981\u4e0b\u653e\u6807\u8bb0\n\t\tif (Getmn(p->l) < Getmn(p->r) && Getmn(p->l) < p->val) return Query(p->l);//\u5de6\u5b50\u6811\u6700\u5c0f\uff0c\u9012\u5f52\u67e5\u8be2\u5de6\u6811\n\t\telse if (Getmn(p->l) > p->val && p->val < Getmn(p->r)) return Getsize(p->l) + 1;//\u81ea\u5df1\u6700\u5c0f\uff0c\u76f4\u63a5\u8fd4\u56de\u81ea\u5df1\u7684\u6392\u540d\n\t\telse return Query(p->r) + Getsize(p->l) + 1;//\u53f3\u5b50\u6811\u6700\u5c0f\uff0c\u9012\u5f52\u67e5\u8be2\u53f3\u6811\uff0c\u7136\u540e\u66f4\u65b0\u6392\u540d\n\t}\n};\nTreap tr;\nint n, cnt[10000005];\n\ninline void Read() {\n\tn = qread();\n\tfor (register int i = 1;i <= n;i++) {\n\t\tregister long long x = qread(), tmp = cnt[x];\n\t\tcnt[x]++;\n\t\tx = x * n + tmp;//\u5904\u7406\u8f93\u5165\u503c\n\t\ttr._root = tr.merge(tr._root, tr.New(x));\n\t}\n}\n\ninline void Solve() {\n\tfor (register int i = 1;i <= n;i++) {\n\t\tregister int k = tr.Query(tr._root);//\u67e5\u8be2\u6700\u5c0f\u503c\u4f4d\u7f6e\n\t\tprintf(\"%d \", k + i - 1);//\u56e0\u4e3a\u524d\u9762\u6709 i-1 \u4e2a\u8282\u70b9\u88ab\u5220\u9664\u4e86\uff0c\u6240\u4ee5\u8f93\u51fa\u65f6\u8981\u52a0\u56de\u6765\n        //\u63d0\u53d6\u533a\u95f4\n\t\tNode *p1, *p2, *p3;\n\t\ttr.split(tr._root, k - 1, p1, p2);\n\t\ttr.split(p2, 1, p2, p3);\n        //\u7ffb\u8f6c\uff0c\u6ce8\u610f\u5224\u7a7a\n\t\tif (p1) p1->revtag ^= 1;\n        //\u5408\u5e76\u56de\u6765\n\t\ttr._root = tr.merge(p1, p3);\n\t}\n}\n\nint main() {\n\tRead();\n\tSolve();\n\t#ifndef ONLINE_JUDGE\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```\n",
        "postTime": 1589769940,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4f5c\u4e3a\u4e00\u9053\u5341\u5206\u7ecf\u5178\u7684**\u5e73\u8861\u6811\u7ef4\u62a4\u5e8f\u5217**\u7684\u95ee\u9898\uff0c\u81ea\u7136\u662f\u503c\u5f97\u4e00\u505a\u7684\u4e86\u3002\n\n\u5199\u5b8c\u7ffb\u4e86\u4e0b\u9898\u89e3\u53d1\u73b0\u90fd\u662f\u5199**Splay**\u7684dalao\uff0c\u5c11\u6709\u7684\u66b4\u529b**FHQ_Treap**\u515a\u8fd8\u662f\u7528**\u6307\u9488**\u5b9e\u73b0\u7684\u3002\n\n\u6240\u4ee5\u8fd9\u91cc\u7565\u5fae\u8bb2\u89e3\u4e0b\u6570\u7ec4\u5b9e\u73b0\u7684FHQ_Treap\u597d\u4e86\uff0c\u611f\u89c9\u5199\u8d77\u6765\u6bd4Splay\u8212\u670d\u4e9b\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u62bd\u8c61\u5316\u4e00\u4e0b\u9898\u610f\uff1a\u7ed9\u4f60$n$\u4e2a\u6570\uff0c\u7b2c$i$\u6b21\u64cd\u4f5c\u5728$[i,n]$\u4e2d\u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e$p_i$\uff0c\u5e76**\u7ffb\u8f6c**$[i,p_i]$\u3002\u6700\u540e\u8f93\u51fa\u6240\u6709$p_i$\u7684\u503c\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u8f6c\u5316\u95ee\u9898\uff08\u56e0\u4e3a\u8c8c\u4f3cFHQ_Treap\u4e0d\u80fd\u540c\u65f6\u652f\u6301**\u57fa\u4e8e\u6743\u503c**\u7684```split```\u548c**\u57fa\u4e8e\u6392\u540d**\u7684\u5206\u88c2\uff09\u3002\n\n\u6240\u4ee5\u79bb\u6563\u5316\u662f\u5fc5\u987b\u7684\uff0c\u5c24\u5176\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u5bf9\u6570\u7ec4\u6392\u5e8f\uff08\u56e0\u4e3a\u4f1a\u6709**\u6743\u503c\u76f8\u7b49**\u7684\u70b9\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u8bb0\u4e00\u4e0b\u6bcf\u4e2a\u503c\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u518d\u8003\u8651\u5bf9\u4e00\u4e2a**\u57fa\u672c\u5e8f\u5217**\uff08\u5373\u521d\u59cb\u65f6\u4e3a$1,2,3,\\dots,n$\uff09\u8fdb\u884c\u7ffb\u8f6c\u3002\n\n\u624b\u52a8\u63a8\u5bfc\u4e00\u4e0b\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5148\u627e\u51fa\u6bcf\u6b21\u64cd\u4f5c\u4f4d\u7f6e\u7684**\u6392\u540d**\uff0c\u7136\u540e\u518d\u57fa\u672c\u5e8f\u5217\u4e0a\u4e0d\u505c\u7ffb\u8f6c\u533a\u95f4\u5373\u53ef\u3002\n\n\u7531\u4e8eFHQ_Treap\u6811\u9ad8\u671f\u671b$\\log$\u7684\u7279\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u67e5\u8be2\u6392\u540d\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u4ece\u4e00\u4e2a\u70b9\u8df3\u5230\u6839\u7136\u540e\u53cd\u7740\u7b97\u56de\u6765\u3002\n\n\u6700\u540e\u63d0\u4e00\u4e0b\u90a3\u79cd\u4ee5\u6743\u503c\u4e3a\u4fdd\u8bc1\u5806\u6027\u8d28\u7684\u503c\u7684\u505a\u6cd5\u662f**\u9519\u8bef**\u7684\uff01\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6811\u9ad8\u4e0d\u5e73\u8861\uff0c\u4e00\u65e6\u9047\u5230\u5355\u8c03\u7684\u6570\u636e\u5c31\u5361\u5230$O(n^2)$\u4e86\u3002\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#define RI register int\n#define CI const int&\n#define Tp template <typename T>\nusing namespace std;\nconst int N=100005;\nstruct data\n{\n    int val,id;\n    inline friend bool operator <(const data& A,const data& B)\n    {\n        return A.val<B.val||(A.val==B.val&&A.id<B.id);\n    }\n}a[N]; int n,rk;\nclass FileInputOutput\n{\n    private:\n        static const int S=1<<21;\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (Ftop<S?Fout[Ftop++]=ch:(fwrite(Fout,1,S,stdout),Fout[(Ftop=0)++]=ch))\n        char Fin[S],Fout[S],*A,*B; int Ftop,pt[15];\n    public:\n        Tp inline void read(T& x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        Tp inline void write(T x)\n        {\n            if (!x) return (void)(pc('0'),pc(' ')); RI ptop=0;\n            while (x) pt[++ptop]=x%10,x/=10; while (ptop) pc(pt[ptop--]+48); pc(' ');\n        }\n        inline void Fend(void)\n        {\n            fwrite(Fout,1,Ftop,stdout);\n        }\n        #undef tc\n        #undef pc\n}F;\nclass FHQ_Treap\n{\n    private:\n        struct treap\n        {\n            int ch[2],size,dat,fa; bool rev;\n            inline treap(CI Dat=0,CI Size=0)\n            {\n                ch[0]=ch[1]=rev=fa=0; dat=Dat; size=Size;\n            }\n        }node[N]; int tot,rt,seed,stack[N],top;\n        #define lc(x) node[x].ch[0]\n        #define rc(x) node[x].ch[1]\n        #define fa(x) node[x].fa\n        inline int rand(void)\n        {\n            return seed=(int)seed*482711LL%2147483647;\n        }\n        inline void swap(int& x,int& y)\n        {\n            int t=x; x=y; y=t;\n        }\n        inline void rever(CI x)\n        {\n            swap(lc(x),rc(x)); node[x].rev^=1;\n        }\n        inline void pushup(CI x)\n        {\n            node[x].size=node[lc(x)].size+node[rc(x)].size+1; fa(lc(x))=fa(rc(x))=x;\n        }\n        inline void pushdown(CI x)\n        {\n            if (node[x].rev) rever(lc(x)),rever(rc(x)),node[x].rev=0;\n        }\n        inline void merge(int& now,int x,int y)\n        {\n            if (!x||!y) return (void)(now=x|y); if (node[x].dat>node[y].dat)\n            pushdown(x),now=x,merge(rc(now),rc(x),y),pushup(x); else\n            pushdown(y),now=y,merge(lc(now),x,lc(y)),pushup(y);\n        }\n        inline void split(int now,int& x,int& y,int rk)\n        {\n            if (!now) return (void)(x=y=0); pushdown(now); if (node[lc(now)].size<rk)\n            x=now,split(rc(now),rc(x),y,rk-node[lc(now)].size-1); else\n            y=now,split(lc(now),x,lc(y),rk); pushup(now);\n        }\n    public:\n        FHQ_Treap() { seed=233; }\n        inline void insert(CI val)\n        {\n            node[++tot]=treap(rand(),1); merge(rt,rt,tot);\n        }\n        inline void reverse(RI l,RI r)\n        {\n            int x,y,z; split(rt,x,y,l-1); split(y,y,z,r-l+1);\n            rever(y); merge(y,y,z); merge(rt,x,y);\n        }\n        inline int get_rk(int now)\n        {\n            stack[top=1]=now; for (int t=now;fa(t);t=fa(t))\tstack[++top]=fa(t);\n            while (top) pushdown(stack[top--]); int ret=node[lc(now)].size;\n            for (;now;now=fa(now)) if (now==rc(fa(now))) ret+=node[lc(fa(now))].size+1;\n            return ret+1;\n        }\n        #undef lc\n        #undef rc\n}T;\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    RI i; for (F.read(n),i=1;i<=n;++i) F.read(a[i].val),a[i].id=i;\n    for (sort(a+1,a+n+1),i=1;i<=n;++i) T.insert(i); for (i=1;i<=n;++i)\n    rk=T.get_rk(a[i].id),F.write(rk),T.reverse(i,rk); return F.Fend(),0;\n}\n```\n\n",
        "postTime": 1547455325,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "\u672c\u9898\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\uff0c\u652f\u6301\u533a\u95f4\u7ffb\u8f6c\u3001\u533a\u95f4\u67e5\u627e\u3002\n\n\nSplay\u7ec3\u624b\u9898\u3002\n\n\n\u7b2ck\u5927\u5143\u7d20\u7684\u4f4d\u7f6e\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6765\uff0c\u4f46\u662f\u6bcf\u4e00\u6b21\u6392\u5e8f\u4e4b\u540e\u4f4d\u7f6e\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u600e\u4e48\u627e\u5230\u90a3\u4e2a\u5143\u7d20\u5462\n\n\n\u7528\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\u6765\u4fdd\u5b58\u6240\u5728\u7ed3\u70b9\u5c31\u597d\u5566\n\n\nQuery\u51fd\u6570\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstdlib>\n#define N 100005\nusing namespace std;\nstruct Point{\n    int ord,v;\n    Point(int x=0,int y=0):ord(x),v(y){}\n    bool operator < (const Point &rhs) const{return (v<rhs.v) || (v==rhs.v && ord<rhs.ord);}\n};\nstruct Node{\n    Node *ch[2],*pa;\n    Point v;\n    int s;\n    bool flip;\n    Node(int ,int);\n    int cmp(int x){\n        if(x==(ch[0]->s+1)) return -1;\n        return x<ch[0]->s+1 ? 0 : 1;\n    }\n    void maintain(){\n        s=ch[0]->s+ch[1]->s+1;\n        return ;\n    }\n    void pushdown(){\n        if(!flip) return ;\n        flip=false;\n        swap(ch[0],ch[1]);\n        ch[0]->flip=!ch[0]->flip;\n        ch[1]->flip=!ch[1]->flip;\n        return ;\n    }\n}*null,*root,*pos[N];\nNode :: Node(int x=0,int y=0){s = null ? 1 : 0; ch[0]=ch[1]=pa=null; v=Point(x,y); flip=false;}\nvoid Rotate(Node* &o,int d){\n    Node *k=o->ch[d^1];\n    o->ch[d^1]=k->ch[d]; k->ch[d]->pa=o;\n    k->ch[d]=o; k->pa=o->pa; o->pa=k;\n    o->maintain(); k->maintain();\n    o=k;\n    return ;\n}\nvoid Splay(Node* &o,int k){\n    o->pushdown();\n    int d=o->cmp(k);\n    if(d==1) k-=o->ch[0]->s+1;\n    if(d!=-1){\n        Node *p=o->ch[d];\n        p->pushdown();\n        int d2=p->cmp(k);\n        if(d2==1) k-=p->ch[0]->s+1;\n        if(d2!=-1){\n            Splay(p->ch[d2],k);\n            if(d==d2) Rotate(o,d^1);\n            else Rotate(o->ch[d],d);\n        }\n        Rotate(o,d^1);\n    }\n    return ;\n}\nNode* Merge(Node *l,Node *r){\n    Splay(l,l->s);\n    l->ch[1]=r;\n    l->maintain();\n    r->pa=l;\n    return l;\n}\nint Query(Node* x,Node*& las){\n    int cach=0;\n    if(x->pa!=null) cach+=Query(x->pa,x);\n    x->pushdown();\n    if(x->ch[1]==las) cach+=x->ch[0]->s+1;\n    return cach;\n}\nPoint seq[N];\nint pre[N],fi[N];\nint main(){\n    null=new Node();\n    null->ch[0]=null->ch[1]=null->pa=null;\n    int n;\n    scanf(\"%d\",&n);\n    root=null;\n    for(int i=1;i<=n;i++) scanf(\"%d\",&pre[i]) , seq[i]=Point(i,pre[i]);\n    sort(seq+1,seq+1+n);\n    for(int i=1;i<=n;i++) fi[seq[i].ord]=i;\n    for(int i=1;i<=n;i++){\n        Node *y=new Node(i,pre[i]);\n        y->ch[0]=y->ch[1]=y->pa=null;\n        pos[fi[i]]=y;\n        if(i==1) root=y;\n        else root=Merge(root,y);\n    }\n    for(int i=1;i<=n;i++){\n        int cach=Query(pos[i],pos[i]->ch[1]);\n        if(i!=n) printf(\"%d \",cach+i-1);\n        else printf(\"%d\",cach+i-1);\n        if(root->s==cach) root->flip=!root->flip;\n        else {\n            Splay(root,cach+1);\n            root->ch[0]->flip=!root->ch[0]->flip;\n        }\n        Splay(root,1);\n        Node *r=root->ch[1];\n        delete root;\n        root = r ;\n        root->pa=null;\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1482739001,
        "uid": 20558,
        "name": "zyh2015",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "# **fhq treap \u65e0\u65cbtreap**\n\n##\u9898\u610f\u7b80\u6790\n\n\u4f60\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\uff0c\u652f\u6301\u533a\u95f4\u7ffb\u8f6c\u4e0e\u67e5\u8be2\u533a\u95f4\u6700\u5c0f\u3002\n\n##\u89e3\u9898\u601d\u8def\n\n\u7531\u4e8e\u533a\u95f4\u6700\u5c0f\u5b9e\u9645\u4e0a\u6bcf\u4e00\u6b21\u5c31\u662f\u5bf9\u5e94\u7684\u6574\u4e2a\u6570\u5217\u7684\u7b2ck\u5c0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u9884\u5904\u7406\u89e3\u51b3\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u627e\u5230\u8fd9\u4e2a\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u6307\u9488\u89e3\u51b3\uff0c\u7136\u540e\u5c31\u662f\u7b80\u5355\u7684\u65e0\u65cbtreap\u64cd\u4f5c\uff1a\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e73\u8861\u6811\u4e0a\u8282\u70b9\uff0c\u6c42\u5b83\u5728\u5f53\u524d\u5e8f\u5217\u4e2d\u7684\u4e0b\u6807\uff0c\u9996\u5148\u6211\u4eec\u5148\u5c06\u8fd9\u4e2a\u70b9\u5230\u5e73\u8861\u6811\u6839\u8282\u70b9\u7684\u6807\u8bb0\u4e0b\u4f20\uff0c\u4f7f\u7528\u9012\u5f52\u89e3\u51b3\uff0c\u7136\u540e\u5c31\u76f4\u63a5\u6839\u636eBST\u7684\u6027\u8d28\u67e5\u627e\u5373\u53ef\u3002\n\n\n\u5176\u4f59\u7684\u5c31\u662f\u6309\u7167\u9898\u610f\u8fdb\u884c\u533a\u95f4rotate\uff0c\u8fd9\u662f\u65e0\u65cbtreap\u7684\u7b80\u5355\u64cd\u4f5c\u4e4b\u4e00\uff0c\u4e0d\u591a\u8d58\u8ff0\u3002\n\n\n\u4ee3\u7801\u4e2d\u8fd8\u6709\u5f88\u591a\u4e1c\u897f\u662f\u53ef\u4ee5\u4f18\u5316\u7684\uff0c\u4f8b\u5982\u4e0d\u9700\u8981\u5b58\u50a8val\uff0c\u53ef\u4ee5\u820d\u5f03\u5df2\u7ecf\u6709\u5e8f\u7684\u533a\u95f4\u7b49\uff0c\u5982\u679c\u4f60\u80fd\u505a\u5230\u7684\u8bdd\uff0c\u5e94\u8be5\u662f\u8f7b\u677eRank1\u7684\u8282\u594f\uff1f\n\n```cpp\n#include <stdio.h>\n#include <algorithm>\n#define r register\n#define MN 100005\n#define getchar() (S==TT&&(TT=(S=BB)+fread(BB,1,1<<15,stdin),TT==S)?EOF:*S++)\nchar BB[1<<15],*S=BB,*TT=BB;\ninline int in(){\n    r int x=0; r bool f=0; r char c;\n    for (;(c=getchar())<'0'||c>'9';f=c=='-');\n    for (x=c-'0';(c=getchar())>='0'&&c<='9';x=(x<<3)+(x<<1)+c-'0');\n    return f?-x:x;\n}\nnamespace Treap{\n    inline int Rand(){\n        static int x=23333;\n        return x^=x<<13,x^=x>>17,x^=x<<5;\n    }\n    struct node{\n        node *ls,*rs,*fa;\n        int val,sz,pri;bool rev;\n        inline void reverse(){std::swap(ls,rs);if (ls) ls->rev^=1;if (rs) rs->rev^=1;rev=0;}\n        inline void pushdown(){if (rev) reverse();}\n        inline void combine(){\n            sz=1;if (ls) sz+=ls->sz,ls->fa=this;\n            if (rs) sz+=rs->sz,rs->fa=this;\n        }\n        node(int val):val(val){sz=1,pri=Rand(),rev=0,fa=ls=rs=NULL;}\n    }*root,*pos[MN];    \n    struct Droot{node *a,*b;};\n    inline int Size(node *x){return x?x->sz:0;}\n    node *merge(node *a,node *b){\n        if (!a) return b;if (!b) return a;\n        if (a->pri<b->pri){\n            a->pushdown();\n            a->rs=merge(a->rs,b);\n            a->combine();return a;\n        }else{\n            b->pushdown();\n            b->ls=merge(a,b->ls);\n            b->combine();return b;\n        }\n    }\n    Droot split(node *x,int k){\n        if (!x) return (Droot){NULL,NULL};\n        r Droot y;x->pushdown();\n        if (k<=Size(x->ls)){\n            y=split(x->ls,k);\n            x->ls=y.b;x->combine();y.b=x;\n        }else{\n            y=split(x->rs,k-Size(x->ls)-1);\n            x->rs=y.a;x->combine();y.a=x;\n        }return y;\n    }\n    inline void Rotate(node *x){if (!x) return;Rotate(x->fa);x->pushdown();}\n    inline int getpos(node *x){\n        Rotate(x);r int res=Size(x->ls)+1;\n        while (x->fa!=NULL){\n            if (x->fa->rs==x) res+=Size(x->fa->ls)+1;x=x->fa;\n        }return res;\n    }\n    inline int Get_Ans(int k){    \n        r int ord=getpos(pos[k]);\n        Droot x=split(root,ord);\n        Droot y=split(x.a,k-1);\n        y.b->rev^=1;root=merge(merge(y.a,y.b),x.b);\n        return ord;\n    }\n}using namespace Treap;\nstruct things{\n    int ord,val;\n    inline bool operator <(const things &b)const{\n        return val<b.val||(val==b.val&&ord<b.ord);\n    }\n}a[MN];int n,val[MN],rnk[MN];\nvoid init(){\n    n=in();\n    for (int i=1; i<=n; ++i) val[i]=in(),a[i].ord=i,a[i].val=val[i];\n    std::sort(a+1,a+n+1);for (r int i=1; i<=n; ++i) rnk[a[i].ord]=i;\n    for (r int i=1; i<=n; ++i){\n        pos[rnk[i]]=new node(val[i]);\n        root=merge(root,pos[rnk[i]]);\n    }\n}\nvoid solve(){for (r int i=1; i<=n; ++i) printf(\"%d \",Get_Ans(i));}\nint main(){init();solve();return 0;}\n```\n[\u672c\u4ebablog\u4f20\u9001\u95e8](http://www.cnblogs.com/Melacau/p/BZOJ3506.html)\uff0c\u8fd8\u8bf7\u652f\u6301owo.\n",
        "postTime": 1494836787,
        "uid": 28867,
        "name": "Melacau",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "\u3010\u524d\u7f6e\u9898\u76ee\u3011[\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3391)\n\n\u8d34\u4e00\u4e2a\u672c\u4eba\u7684\u4ee3\u7801\u3002\n```cpp\n//\u7528\u4e2d\u5e8f\u904d\u5386\u8868\u793a\u5e8f\u5217\uff0c\u901a\u8fc7\u5bf9\u6811\u7684\u5bf9\u79f0\u7ffb\u8f6c\u5b9e\u73b0\u4e2d\u5e8f\u904d\u5386\uff08\u5373\u5e8f\u5217\uff09\u7684\u6539\u53d8\u3002\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=1e5+10;\nstruct trnode\n{\n\tint d,c,f,son[2];//d\u8868\u793a\u539f\u5e8f\u5217\u5bf9\u5e94\u7684\u6570\uff0c\u4f38\u5c55\u6811\u5e76\u4e0d\u6309d\u6765\u6392\u540d,n\u503c\u4e3a1\uff0c\u4e0d\u5fc5\u628a\u591a\u4e2a\u8282\u70b9\u538b\u6210\u4e00\u4e2a\u70b9\u3002 \n\tbool v;//\u7ffb\u8f6c\u6807\u8bb0\u30021\u5219\u8981\u7ffb\u8f6c\u3002\u8fd9\u6837\u5b9e\u9645\u4e0a\u662f\u4e3a\u4e86\u5b9e\u73b0lazy\u64cd\u4f5c\u3002 \n}tr[N];int root,len,n,m;\nvoid update(int x)\n{\n\tint lc=tr[x].son[0],rc=tr[x].son[1];\n\ttr[x].c=tr[lc].c+tr[rc].c+1;\n}\nvoid bt(int &x,int f,int l,int r)//build tree\n{\n\tif(l>r){x=0;return;}\n\tint m=(l+r)>>1;\n\tx=++len;tr[len].d=m;tr[len].c=1;tr[len].f=f;tr[len].v=0;\n\tbt(tr[x].son[0],x,l,m-1);\n\tbt(tr[x].son[1],x,m+1,r);\n\ttr[x].c=tr[tr[x].son[0]].c+tr[tr[x].son[1]].c+1;\n}\nvoid rotate(int x,int w)\n{\n\tint f=tr[x].f,ff=tr[f].f,r,R;\n\t\n\tr=tr[x].son[w];R=f;\n\ttr[R].son[1^w]=r;\n\tif(r)tr[r].f=R;\n\t\n\tr=x;R=ff;\n\tif(tr[R].son[0]==f)tr[R].son[0]=r;else tr[R].son[1]=r;\n\ttr[r].f=R;\n\t\n\tr=f;R=x;\n\ttr[R].son[w]=r;\n\ttr[r].f=R;\n\t\n\tupdate(f);\n\tupdate(x);\n}\nvoid splay(int x,int rt)\n{\n\twhile(tr[x].f!=rt)\n\t{\n\t\tint f=tr[x].f,ff=tr[f].f;\n\t\tif(ff==rt)\n\t\t{\n\t\t\tif(tr[f].son[0]==x)rotate(x,1);else rotate(x,0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t     if(tr[ff].son[0]==f&&tr[f].son[0]==x)rotate(f,1),rotate(x,1);\n\t\t\telse if(tr[ff].son[1]==f&&tr[f].son[1]==x)rotate(f,0),rotate(x,0);\n\t\t\telse if(tr[ff].son[0]==f&&tr[f].son[1]==x)rotate(x,0),rotate(x,1);\n\t\t\telse if(tr[ff].son[1]==f&&tr[f].son[0]==x)rotate(x,1),rotate(x,0);\n\t\t}\n\t}\n\tif(!rt)root=x;\n}\nvoid wh(int x)//\u7ef4\u62a4\n{\n\tint &lc=tr[x].son[0],&rc=tr[x].son[1];\n\tswap(lc,rc);\n\ttr[x].v=0;\n\ttr[lc].v^=1;\n\ttr[rc].v^=1;\n}\nint findnum(int k)//\u627e\u6392\u540d\u4e3ak\uff0c\u5373\u4e2d\u5e8f\u904d\u5386\u6392\u7b2ck\u7684\u7f16\u53f7 \n{\n\tint x=root;\n\twhile(1)\n\t{\n\t\tif(tr[x].v)wh(x);\n\t\tint lc=tr[x].son[0],rc=tr[x].son[1];\n\t\tif(tr[lc].c>=k)x=lc;\n\t\telse if(tr[lc].c+1>=k)break;\n\t\telse k-=tr[lc].c+1,x=rc;\n\t}\n\treturn x;\n}\nvoid fz(int l,int r)//\u5bf9\u4e2d\u5e8f\u904d\u5386\u6392\u540d\u4e3al~r\u7684\u5e8f\u5217\u8fdb\u884c\u5904\u7406\u3002 \n{\n\tint x=findnum(l-1),y=findnum(r+1);\n\tsplay(x,0);splay(y,x);\n\ttr[tr[y].son[0]].v^=1;\n}\n#define g getchar()\nvoid qr(int &x)\n{\n\tchar c=g;x=0;\n\twhile(!('0'<=c&&c<='9'))c=g;\n\twhile('0'<=c&&c<='9')x=x*10+c-'0',c=g;\n}\nvoid write(int x)//\u5feb\u5199 \n{\n\tif(x/10)write(x/10);\n\tputchar(x%10+'0');\n}\nvoid pri(int x)//\u4e2d\u5e8f\u904d\u5386\u3002\n{\n\tif(!x)return;\n\tif(tr[x].v)wh(x);\n\tpri(tr[x].son[0]);\n\tif(tr[x].d!=0)write(tr[x].d),putchar(' ');\n\tpri(tr[x].son[1]);\n}\nint main()\n{\n\tqr(n);qr(m);\n\tbt(tr[0].son[0],0,0,n+1);//\u591a\u52a0\u4e24\u4e2a\u8fb9\u754c\u70b9\u3002 \n\troot=tr[0].son[0];\n\ttr[len].d=0;//\u8bbe\u5b9a\u8fb9\u754c\n\twhile(m--)\n\t{\n\t\tint l,r;qr(l);qr(r);\n\t\tl++;r++;\n\t\tfz(l,r);\n\t}\n\tpri(root);\n\tputs(\"\");\n\treturn 0;\n}\n\n```\n\n\n\u3010\u7b80\u660e\u9898\u610f\u3011\n\n$\u6709n\u6b21\u64cd\u4f5c,\u7b2ci\u6b21\u64cd\u4f5c\u4e3a\u627e\u5230\u5e76\u8f93\u51fa[i,n]\u4e2d\u6700\u5c0f\u503c\u6240\u5904\u7684\u4f4d\u7f6eP_i(\u76f8\u540c\u503c\u65f6\u53d6\u539f\u4f4d\u7f6e\u5c0f\u7684)$\n\n\u3010\u5410\u69fd\u3011\n\n\u6211\u4e00\u5f00\u59cb\u7528\u4e24\u68f5\u5e73\u8861\u6811\u7ef4\u62a4\u2014\u2014\u4e00\u68f5\u7ef4\u62a4\u503c\uff0c\u4e00\u68f5\u7ef4\u62a4\u4f4d\u7f6e\uff0c\u7ed3\u679c\u505a\u4e86\u4e24\u5929\u624d\u505a\u51fa\u6765\u3002\u770b\u770b\u9898\u89e3\uff0c\u53d1\u73b0\u53ea\u7528\u4e00\u68f5\u6811\u5c31\u591f\u4e86\u3002\tQwQ\n\n\u3010\u601d\u8def\u3011\n\n#### 1.\u6309\u503csort,\u6c42\u51fa\u6bcf\u6b21\u5e94\u5904\u7406\u7684\u6807\u53f7(\u540c\u4e00\u4e2a\u6570\u7684\u6807\u53f7\u59cb\u7ec8\u4e0d\u53d8\uff0c\u8fd9\u4e2a\u8981\u770b\u4ee3\u7801\u7406\u89e3\uff09\u3002\n#### 2.\u628a\u8981\u5904\u7406\u7684\u70b9splay\u4e0a\u53bb\uff0c\u8f93\u51fa\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\u5373\u53ef\u3002(\u5728\u4e24\u7aef\u585e\u4e86\u54e8\u5175\u7ed3\u70b9\uff0c\u6240\u4ee5\u4e0d\u8981+1\uff09\n#### 3.\u8bb0\u5f97\u7ffb\u8f6c\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define g getchar()\n#define lc tr[x].son[0]\n#define rc tr[x].son[1]\nusing namespace std;\nvoid qr(int &x)\n{\n\tchar c=g;bool v=(x=0);\n\twhile(!( ('0'<=c&&c<='9') || c=='-' ))c=g;\n\tif(c=='-')v=1,c=g;\n\twhile('0'<=c&&c<='9')x=x*10+c-'0',c=g;\n\tif(v)x=-x;\n}\nvoid write(int x)\n{\n\tif(x/10)write(x/10);\n\tputchar(x%10+'0');\n}\nconst int N=1e5+10;\nstruct node\n{\n\tint x,id;//\u503c\u548c\u6807\u53f7\n\tbool operator <(node b)const{return x==b.x?id<b.id:x<b.x;}\n\t//\u91cd\u8f7d\u8fd0\u7b97\u7b26\u2014\u2014\u9ad8\u903c\u683c\u7684\u64cd\u4f5c\u2014\u2014\u5f53\u7136\u4e5f\u53ef\u4ee5\u5728\u5916\u9762\u6253cmp \n}a[N];int n;\nstruct trnode\n{\n\tint c,f,son[2];//c\u4e3a\u5b50\u6811\u7ed3\u70b9\u603b\u6570\uff0cf\u4e3a\u7236\u8282\u70b9\uff0cson\u4e3a\u5b50\u8282\u70b9 \n\tbool v;//\u7ffb\u8f6c\u6807\u8bb0 \n}tr[N];int root;\nvoid update(int x){tr[x].c=tr[lc].c+tr[rc].c+1;}//\u66f4\u65b0 \nvoid bt(int &x,int f,int l,int r)//\u9012\u5f52\u5efa\u6811 \n{\n\tif(l>r){x=0;return;}\n\tx=(l+r)>>1;\n\t//\u8fd9\u91cc\u7684\u6807\u53f7\u5bf9\u5e94\u5e8f\u5217\u4e2d\u6807\u53f7-1\u7684\u4f4d\u7f6e(\u5982\u6811\u4e0a2\u53f7\u70b9\u5bf9\u4e8e\u5e8f\u52171\u53f7\u4f4d\u7f6e)\u2014\u2014\u65b9\u4fbf\u5904\u7406 \n\ttr[x].f=f;tr[x].v=0;\n\tbt(tr[x].son[0],x,l,x-1);\n\tbt(tr[x].son[1],x,x+1,r);\n\tupdate(x);\n}\nvoid rotate(int x,int w)//\u65cb\u8f6c\n{\n\tint f=tr[x].f,ff=tr[f].f,r,R;\n\t\n\tr=tr[x].son[w];R=f;\n\ttr[R].son[1-w]=r;\n\tif(r)tr[r].f=R;\n\t\n\tr=x;R=ff;\n\ttr[R].son[tr[R].son[1]==f]=r;\n\ttr[r].f=R;\n\t\n\tr=f;R=x;\n\ttr[R].son[w]=r;\n\ttr[r].f=R;\n\t\n\tupdate(f);\n\tupdate(x);\n}\nvoid splay(int x,int rt)\n{\n\tif(!x)return;\n\twhile(tr[x].f!=rt)\n\t{\n\t\tint f=tr[x].f,ff=tr[f].f;\n\t\tif(ff==rt)rotate(x,tr[f].son[0]==x);\n\t\telse\n\t\t{\n\t\t\t\t if(tr[ff].son[0]==f&&tr[f].son[0]==x)rotate(f,1),rotate(x,1);\n\t\t\telse if(tr[ff].son[1]==f&&tr[f].son[1]==x)rotate(f,0),rotate(x,0);\n\t\t\telse if(tr[ff].son[0]==f&&tr[f].son[1]==x)rotate(x,0),rotate(x,1);\n\t\t\telse if(tr[ff].son[1]==f&&tr[f].son[0]==x)rotate(x,1),rotate(x,0);\n\t\t}\n\t}\n\tif(!rt)root=x;\n}\nint findnum(int k)//\u627e\u6392\u540d\u4e3ak\u7684\u6807\u53f7\n{\n\tint x=root;\n\twhile(1)\n\t{\n\t\tif(tr[x].v)\n\t\t{\n\t\t\ttr[x].v=0;swap(lc,rc);\n\t\t\ttr[lc].v^=1;tr[rc].v^=1;\n\t\t}\n\t\tif(tr[lc].c>=k)x=lc;\n\t\telse if(tr[lc].c+1>=k)break;\n\t\telse k-=tr[lc].c+1,x=rc;\n\t}\n\treturn x;\n}\nvoid wh(int x)//\u9012\u5f52\u7ef4\u62a4\u7ffb\u8f6c\n{\n\tif(!x)return;\n\twh(tr[x].f);\n\tif(tr[x].v)\n\t{\n\t\ttr[x].v=0;swap(lc,rc);\n\t\ttr[lc].v^=1;tr[rc].v^=1;\n\t}\n}\nvoid fz(int l,int r)\n{\n\tl=findnum(l-1);r=findnum(r+1);\n\tsplay(l,0);splay(r,l);\n\ttr[tr[r].son[0]].v^=1;\n}\nint find_rank(int x)\n{\n\twh(x);splay(x,0);\n\twrite(tr[tr[x].son[0]].c);putchar(' ');\n\treturn tr[tr[x].son[0]].c;\n}\nint main()\n{\n\tqr(n);\n\tfor(int i=1;i<=n;i++)qr(a[i].x),a[i].id=i;\n\tsort(a+1,a+n+1);\n\tbt(tr[0].son[0],0,1,n+2);root=tr[0].son[0];//\u591a\u52a0\u4e24\u4e2a\u54e8\u5175\u8282\u70b9 \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfz(i+1,find_rank(a[i].id+1)+1);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1563026335,
        "uid": 118826,
        "name": "2018LZY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P3165)\n\n~~Fhq Treap\u543c\u554a\uff01\uff01~~\n\n\u8fd9\u9898\u5f88\u660e\u663e\u8981\u7528\u5e73\u8861\u6811\u8fdb\u884c\u67e5\u8be2\u6392\u540d\u548c\u533a\u95f4\u7ffb\u8f6c\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u67e5\u8be2\u7684\u90fd\u662f\u5f53\u524d\u6743\u503c\u6700\u5c0f\u7684\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u80fd\u4e0d\u80fd\u628afhq treap\u7684key\u503c\u6539\u53d8\u4e00\u4e0b\uff0c\u53d8\u6210\u5f53\u524d\u8be5\u70b9\u7684\u9ad8\u5ea6\u3002\n\n\u56e0\u4e3afhq treap\u6ee1\u8db3\u5806\u7684\u6027\u8d28\uff0c\u8fd9\u6837\u6bcf\u6b21\u8981\u67e5\u8be2\u7684\u70b9\u5c31\u4e00\u5b9a\u662f\u5f53\u524d\u7684\u6839\u8282\u70b9\u3002\n\n\u81f3\u4e8e\u533a\u95f4\u7ffb\u8f6c\uff0c\u53ea\u8981\u628a\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u6253\u4e0a\u61d2\u6807\uff0c\u7136\u540e\u628a\u6839\u8282\u70b9\u5220\u6389\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u63a5\u4e0b\u6765\u8981\u67e5\u8be2\u7684\u70b9\u662f\u65b0\u7684\u6839\u8282\u70b9\uff09\uff0c\u5220\u9664\u53ef\u4ee5\u53c2\u7167\u5de6\u504f\u6811\uff0c\u628a\u5de6\u53f3\u5b50\u6811\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u3002\n\nPS\uff1a\u6ce8\u610f\u9ad8\u5ea6\u76f8\u7b49\u65f6\u7279\u5224~~\uff08\u4ec0\u4e48\uff1f\uff01\u4e0d\u662f\u8bf4\u597d\u4e86\u2018\u9ad8\u4f4e\u4e0d\u7b49\u2019\u7684\u5417\uff1f\uff09~~\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n\nint ch[100001][2],size[100001];\nlong long val[100001];\nint tem,root,n;\nbool lazy[100001];\ninline void swap(int &a,int &b){a^=b^=a^=b;}\ninline void spread(int x){\n    if(lazy[x]){\n        swap(ch[x][0],ch[x][1]);\n        if(ch[x][0])lazy[ch[x][0]]^=1;\n        if(ch[x][1])lazy[ch[x][1]]^=1;\n        lazy[x]=0;\n    }\n}\ninline void pushup(int x){if(x)size[x]=size[ch[x][0]]+size[ch[x][1]]+1;}\nint merge(int x,int y){\n    if(!x||!y)return x^y;\n    if(val[x]<val[y]){\n        spread(x);\n        ch[x][1]=merge(ch[x][1],y);\n        pushup(x);\n        return x;\n    }\n    else{\n        spread(y);\n        ch[y][0]=merge(x,ch[y][0]);\n        pushup(y);\n        return y;\n    }\n}\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n        scanf(\"%lld\",val+i);\n        val[i]*=100000;\n        val[i]+=i;\n        size[i]=1;\n        root=merge(root,i);\n    }\n    for(int i=1;i<=n;i++){\n        spread(root);\n        printf(\"%d \",size[ch[root][0]]+i);\n        if(ch[root][0])lazy[ch[root][0]]^=1;\n        root=merge(ch[root][0],ch[root][1]);\n    }\n    putchar('\\n');\n}\n```",
        "postTime": 1537705305,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP3165 [CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2"
    },
    {
        "content": "\u8868\u793a\u697c\u4e0b\u7684\u51e0\u7bc7\u9898\u89e3\u5e76\u6ca1\u6709\u770b\u61c2\uff0c\u4e8e\u662f\u81ea\u5df1\u6765\u4e00\u53d1\u3002\u3002\u3002\n\n\u533a\u95f4\u7ffb\u8f6c\u5f53\u7136splay\uff01\u6765\u4e00\u53d1\u7ed3\u6784\u4f53\u65e0\u6307\u9488splay\u3002\u3002\u3002\n\n~~\uff08\u5982\u679c\u4f60\u771f\u7684\u8981\u7528 fhq treap \u6211\u4e5f\u4e0d\u4f1a\u62e6\u7740\u4f60\uff09~~\n\n#### \u9884\u5904\u7406\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u9ad8\u5ea6\u662f\u65e0\u5e8f\u7684\uff0c\u800csplay\u4e2d\u8981\u6c42\u6709\u5e8f\uff0c\u5426\u5219kth\u4e0d\u80fd\u6b63\u786e\u6c42\u89e3\u3002\n\n\u600e\u4e48\u529e\u5462\uff1f\uff1f\uff1f\n\n\u53c8\u53d1\u73b0\uff0c\u4e0d\u9700\u8981\u6c42\u9ad8\u5ea6\uff0c\u53ea\u8981\u6c42\u4f4d\u7f6e\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u7528\u7ed3\u6784\u4f53\u5b58\u5165 \u9ad8\u5ea6 \u4e0e \u4e0b\u6807\uff0c\u6309\u9ad8\u5ea6\u6392\u5e8f\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u628a\u9ad8\u5ea6\u4e22\u4e00\u8fb9\u4e86~~\uff08\u4e00\u6ce2sao\u64cd\u4f5c\uff09~~\u3002\n\n\u8bb0\u5f97\u5934\u5c3e\u6dfb\u52a0\u4e24\u4e2a\u54e8\u5175\u8282\u70b9\u3002\u3002\u3002\n\n#### \u5efa\u6811\n\n\u6b63\u5e38 nlogn \u53ef\u80fd\u4f1a\u88ab\u5361\u5e38\uff0c\u6240\u4ee5\uff0c\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u7684\u5efa\u6811\uff0c\u5206\u6b64\u8282\u70b9\u4e0e\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u3002\n\n\u4ee3\u7801\uff1a\u89c1\u4e0b\u65b9 splay::buildtree\u3002\n\n#### \u533a\u95f4\u7b2ck\u5927\n\n\u6b63\u5e38kth~~\uff08\u522b\u8ddf\u6211\u8bf4\u4e0d\u4f1a\uff09~~\n\n\u4ee3\u7801\uff1a\u89c1\u4e0b\u65b9 splay::kth\u3002\n\n#### \u533a\u95f4\u7ffb\u8f6c\n\n\u9996\u5148\uff0c\u9700\u8981\u628a\u6240\u6c42\u7684\u8282\u70b9\uff08\u5373\u6392\u5e8f\u524d\u4e0b\u6807\u4e3aid\u7684\u8282\u70b9\uff09 splay \u5230 root \u3002\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662froot\u5de6\u5b69\u5b50\u7684\u8282\u70b9\u4e2a\u6570\uff08\u56e0\u4e3a\u6709\u54e8\u5175\u8282\u70b9\uff0c\u6240\u4ee5+1-1\u62b5\u6d88\uff09,\u8bb0\u4e3as\u3002\n\n\u7136\u540e\uff0c\u53d6\u51fa [i+1 , s+1] \u8fd9\u6bb5\u533a\u95f4\uff0c\u5373\uff1a\n\n\u5c06i\u8282\u70b9 splay \u5230\u6839\uff0cs+2\u8282\u70b9 splay \u5230i\u7684\u53f3\u8282\u70b9\u3002\n\n\u518d\u5c06s+2\u7684\u5de6\u5b69\u5b50\u6253\u4e0a\u7ffb\u8f6c\u6807\u8bb0\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\u89c1\u4e0b\u65b9 splay::reserve\u3002\n\n##### \u5982\u679c\u4f60\u5df2\u7ecf\u770b\u5b8c\u4e0a\u65b9\u6240\u6709\u95ee\u9898\uff0c\u8fd9\u8fd8\u6709\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\n\n#### \u6807\u8bb0\u4e0b\u4f20\n\n\u5c06\u5de6\u53f3\u5b69\u5b50\u7ffb\u8f6c\u6807\u8bb0\u6253\u4e0a\uff0c\u6b64\u8282\u70b9\u6807\u8bb0\u6e05\u7a7a\uff0c\u4ea4\u6362\u5de6\u53f3\u5b69\u5b50\u3002\n\n\u4f46\u662f\u4ec5\u6709\u8fd9\u6837\u4e0d\u884c\uff0c\u8fd8\u8981\u5728 kth \u4e2d\u5faa\u73af\u7684\u5f00\u5934\u6bcf\u6b21\u4e00\u4e0b pushdown\u3002\n\n\u7136\u800c\u8fd8\u4e0d\u5168\u5bf9\u2014\u2014splay\u6bcf\u6b21\u4e5f\u8981 pushdown \uff08\u4e09\u4e2a\u70b9\u90fd\u8981!\uff09\u3002\n\n\u4ee3\u7801\uff1a\u89c1\u4e0b\u65b9 splay::pushdown\u3002\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u770b\u5b8c\u4e0a\u65b9\u6240\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5e76\u4e0d\u80fdAC\uff0c\u5e76\u4e14\u786e\u5b9a\u4ee3\u7801\uff0c\u6ca1\u6709\u601d\u8def\u9519\u8bef\uff0c\u770b\u4ee3\u7801\u5427\u3002\n\n\u9644\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define MAXN 100010\n#define MAX 999999999//\u6700\u503c\nusing namespace std;\nint n,size=1,root=0;\nstruct node{\n    int x,id;\n}b[MAXN];\nnamespace splay{//\u6211\u5c31\u559c\u6b22\u7528 namespace \u5c01\u88c5\n    struct Splay{\n        int f,s,flag,son[2];\n        int v;//\u8fd9\u4e2a\u53ef\u6709\u53ef\u65e0\uff08\u82e5\u5220\u53bb\uff0c\u4e0b\u9762\u4e5f\u6709\u8981\u5220\u7684\u3002\u3002\u3002\uff09\n    }a[MAXN];\n    inline void clean(int rt){//\u6e05\u7a7a\u8282\u70b9\n        a[rt].son[0]=a[rt].son[1]=a[rt].f=a[rt].s=a[rt].flag=a[rt].v=0;\n    }\n    inline void pushup(int rt){//\u4e0a\u4f20\n        if(!rt)return;\n        a[rt].s=a[a[rt].son[0]].s+a[a[rt].son[1]].s+1;\n    }\n    inline void pushdown(int rt){//\u6807\u8bb0\u4e0b\u4f20\n        if(!rt||!a[rt].flag)return;//\u8bb0\u5f97\u8fd9\u53e5\n        a[a[rt].son[0]].flag^=1;a[a[rt].son[1]].flag^=1;a[rt].flag^=1;\n        swap(a[rt].son[0],a[rt].son[1]);\n    }\n    inline void turn(int rt,int k){//\u65cb\u8f6c\n        int x=a[rt].f,y=a[x].f;\n        a[x].son[k^1]=a[rt].son[k];\n        if(a[rt].son[k])a[a[rt].son[k]].f=x;\n        a[rt].f=y;\n        if(y)a[y].son[a[y].son[1]==x]=rt;\n        a[x].f=rt;\n        a[rt].son[k]=x;\n        pushup(x);pushup(rt);\n    }\n    void splay(int rt,int ancestry){//\u4f38\u5c55\n        while(a[rt].f!=ancestry){\n            int x=a[rt].f,y=a[x].f;\n            pushdown(y);pushdown(x);pushdown(rt);//\u6bcf\u6b21\u90fd\u8981\u4e0b\u4f20\n            if(y==ancestry)turn(rt,a[x].son[0]==rt);\n            else{\n                int k=a[y].son[0]==x?1:0;\n                if(a[x].son[k]==rt){turn(rt,k^1);turn(rt,k);}\n                else{turn(x,k);turn(rt,k);}\n            }\n        }\n        if(ancestry==0)root=rt;\n    }\n    inline int newnode(int x){//\u5efa\u7acb\u65b0\u8282\u70b9\n        int rt=size++;\n        clean(rt);\n        a[rt].v=x;a[rt].s=1;\n        return rt;\n    }\n    int buildtree(int l,int r){//\u5efa\u6811\n        if(l>r)return 0;\n        int mid=l+r>>1,lson=0,rson=0;\n        lson=buildtree(l,mid-1);\n        int rt=newnode(b[mid].x);\n        rson=buildtree(mid+1,r);\n        a[rt].son[0]=lson;\n        a[rt].son[1]=rson;\n        if(lson)a[lson].f=rt;\n        if(rson)a[rson].f=rt;\n        pushup(rt);//\u4e00\u5b9a\u8981\u6709\u8fd9\u53e5\uff01\n        return rt;\n    }\n    int kth(int rt,int k){//\u7b2ck\u5927\u503c\n        if(a[rt].s<k)return 0;\n        while(1){\n            pushdown(rt);//\u4e0b\u4f20\n            int y=a[rt].son[0];\n            if(k>a[y].s+1){\n                k-=a[y].s+1;\n                rt=a[rt].son[1];\n            }\n            else if(k<=a[y].s)rt=y;\n            else return rt;\n        }\n    }\n    inline void reverge(int i){//\u533a\u95f4\u7ffb\u8f6c\n        splay(b[i].id+1,0);//\u8bb0\u5f97\u52a01\uff08\u6709\u54e8\u5175\u8282\u70b9\uff09\n        int s=a[a[root].son[0]].s;\n        printf(\"%d \",s);\n        int front=kth(root,i),next=kth(root,s+2);\n        splay(front,0);splay(next,front);\n        a[a[next].son[0]].flag^=1;//\u6253\u4e0a\u6807\u8bb0\n    }\n}\ninline int read(){//\u8bfb\u4f18\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\nbool cmp(const node &x,const node &y){\n    if(x.x==y.x)return x.id<y.id;\n    return x.x<y.x;\n}\nvoid init(){//\u9884\u5904\u7406+\u8bfb\u5165+\u5de5\u4f5c\n    n=read();\n    for(int i=1;i<=n;i++){\n        b[i].x=read();\n        b[i].id=i;\n    }\n    b[0].x=-MAX;b[0].id=1;\n    b[n+1].x=MAX;b[n+1].id=n+1;//\u4e24\u4e2a\u54e8\u5175\u8282\u70b9\n    sort(b+1,b+n+1,cmp);\n    root=splay::buildtree(0,n+1);\n    for(int i=1;i<=n-1;i++)splay::reverge(i);\n    printf(\"%d\\n\",n);//\u6700\u540e\u4e00\u4e2a\u4e00\u5b9a\u662f n\n}\nint main(){//\u4e3b\u51fd\u6570So easy\uff01\n    init();\n\treturn 0;\n}\n\n```",
        "postTime": 1521285133,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "### \u770b\u8d77\u6765\u6ca1\u6709\u5927\u4f6c\u53d1\u5e03\u6709\u5220\u9664\u64cd\u4f5c\u7684\u7248\u672c\uff0c\u6211\u5728\u8fd9\u91cc\u5c31\u732e\u4e11\u4e86....(~~\u798f\u5229~~[Splay\u4e60\u9898\u5730\u5740\uff0c\u6211\u7684\u4ee3\u7801\u601d\u8def\u53c2\u8003\u8fd9\u4e2a\u5927\u4f6c\u7684QAQ](https://www.cnblogs.com/kuangbin/archive/2013/04/21/3034081.html))\n\n**PS\uff1a\u539f\u9898\u6709\u591a\u7ec4\u6570\u636e\uff0c\u4f46\u672c\u9898\u6ca1\u6709\uff0c\u8bf7\u6ce8\u610f\u533a\u5206\u3002~~\u522b\u6284\u9519\u4e86~~**\n\n\n\n------------\n\n\n## \u5927\u4f53\u7684\u601d\u8def\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a\n\n### 1. \u627e\u5230\u7b2ci\u5c0f\u7684\u8282\u70b9\n\n### 2. \u5c06\u5176\u65cb\u8f6c\u5230\u6839\uff0c\u5f97\u5230\u5176\u5de6\u5b50\u6811\u5927\u5c0f\uff0c\u5373\u5176\u4f4d\u7f6e\n\n### 3. \u5c06\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u7ffb\u8f6c\uff08\u6ce8\uff1a\u6211\u4eec\u4f1a\u5220\u9664\u6389\u7b2ci\u5c0f\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u5c06\u5176\u7ffb\u8f6c\uff09\n\n### 4. \u5220\u9664\u6839\u8282\u70b9\uff0c\u8fd4\u56de\u7b2c1\u6b65\n\n\u8fd9\u91cc\u9700\u8981\u533a\u5206\u4e24\u4e2a\u6982\u5ff5\uff1a\u5373\u8282\u70b9\u672c\u8eab\u7684\u5927\u5c0f\u548c\u8282\u70b9\u7684\u4f4d\u7f6e\u3002**splay\u7ef4\u62a4\u7684\u662f\u8282\u70b9\u7684\u4f4d\u7f6e\u800c\u4e0d\u662f\u8282\u70b9\u7684\u5927\u5c0f**\n\n\u8282\u70b9\u6309\u4f4d\u7f6e\u63d2\u5165splay\u4e2d\u5c06\u4f1a\u6253\u4e71\u5176\u5927\u5c0f\u7684\u6709\u5e8f\u6027\uff08~~\u4ec0\u4e48\uff0c\u4f60\u8bf4\u9898\u76ee\u8f93\u5165\u65e0\u5e8f\uff1f\u8bf7\u4f7f\u7528sort~~\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e1c\u897f\u4fdd\u5b58\u67d0\u4e2a\u503c\u5bf9\u5e94\u7684splay\u6811\u4e2d\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u4ee5\u4fbf\u4e8e\u540e\u7eed\u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9`pair`\u6216\u8005\u81ea\u5df1\u5199\u4e2a\u7ed3\u6784\u4f53\u3002\n\n**PS:\u672c\u89e3\u6cd5\u65e0\u9700\u54e8\u5175\u8282\u70b9\uff01~~\u5f53\u7136\u4f60\u52a0\u6211\u4e5f\u6ca1\u610f\u89c1\uff0c\u4e0d\u8fc7\u590d\u6742\u5ea6\u4e0a\u5347\u5f88\u9ad8\u7684\u8bf4~~**\n\n\u4e0b\u9762\u662f\u849f\u84bb\u7684\u4ee3\u7801QAQ\uff0c\u90e8\u5206\u89e3\u91ca\u5c06\u4e8e\u4ee3\u7801\u6ce8\u91ca\u7ed9\u51fa\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n\nusing namespace std;\n\nconst int MAXN = 100000 + 10;\n\nstruct Node{//\u4fdd\u5b58\u8282\u70b9\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002\n    int id, data;//id->\u4f4d\u7f6e;data->\u5927\u5c0f\n    Node(int id = 0, int data = 0):\n        id(id), data(data){};\n    bool operator < (const Node &A)const{\n        if(data == A.data) return id < A.id;\n        return data < A.data;\n    }\n};\n\nstruct SplayTree{\n    int child[MAXN][2], father[MAXN];\n    int size[MAXN], lazy[MAXN];\n    int root;\n    Node node[MAXN];\n    inline int build(int l, int r){//\u5efa\u6811\u64cd\u4f5c\n        if(l > r) return 0;\n        if(l == r){\n            size[l] = 1;\n            child[l][0] = child[l][1] = lazy[l] = 0;\n            return l;\n        }\n        int mid = (l + r) >> 1;\n        lazy[mid] = 0;\n        if((child[mid][0] = build(l, mid - 1))) father[child[mid][0]] = mid;//\u8fd9\u91cc\u4e0e\u5e38\u89c4\u7684newNode\u64cd\u4f5c\u4e0d\u540c\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1splay\u4e2d\u8282\u70b9\u7684\u7f16\u53f7\u548c\u4e0a\u9762\u7684node\u4e2d\u7684id\u4e00\u81f4\uff0c\u5177\u4f53\u60c5\u51b5\u53ef\u81ea\u884c\u601d\u8003\n        if((child[mid][1] = build(mid + 1, r))) father[child[mid][1]] = mid;\n        pushup(mid);\n        return mid;\n    }\n    inline int chk(int x){\n        return child[father[x]][1] == x;\n    }\n    inline void pushup(int x){\n        size[x] = size[child[x][0]] + size[child[x][1]] + 1;\n    }\n    inline void pushdown(int x){\n        if(!lazy[x]) return;\n        int lson = child[x][0], rson = child[x][1];\n        if(lson){\n            lazy[lson] ^= 1;\n            swap(child[lson][0], child[lson][1]);\n        }\n        if(rson){\n            lazy[rson] ^= 1;\n            swap(child[rson][0], child[rson][1]);\n        }\n        lazy[x] = 0;\n    }\n    inline void rotate(int x){\n        int f = father[x], gf = father[f];\n        pushdown(f); pushdown(x);//\u8fd9\u4e24\u53e5\u8c8c\u4f3c\u6ca1\u6bdb\u7528\uff1f\n        int xk = chk(x), w = child[x][xk ^ 1];\n        if(gf) child[gf][chk(f)] = x;\n        father[x] = gf;\n        father[f] = x, child[x][xk ^ 1] = f;\n        father[w] = f, child[f][xk] = w;\n        pushup(f); pushup(x);\n    }\n    inline void splay(int x, int goal = 0){//\u56e0\u4e3a\u6211\u4eec\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u800csplay\u6d89\u53ca\u5230\u5de6\u53f3\u513f\u5b50\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u64cd\u4f5c\u524d\u5148pushdown\n        pushdown(x);\n        while(father[x] != goal){\n            int f = father[x];\n            if(father[f] == goal){\n                pushdown(f); pushdown(x);\n                rotate(x);\n            }\n            else{\n                pushdown(father[f]); pushdown(f); pushdown(x);\n                if(chk(f) == chk(x)) rotate(f);\n                else rotate(x);\n                rotate(x);\n            }\n            \n        }\n        pushup(x);\n        if(!goal) root = x;\n    }\n    inline int pre(int now){//\u641c\u7d22\u67d0\u4e00\u8282\u70b9\u7684\u4e0a\u4e00\u4f4d\u7f6e\n        pushdown(now);\n        while(child[now][1]){\n            now = child[now][1];\n            pushdown(now);\n        }\n        return now;\n    }\n    inline int rank(int k){\n        splay(k);\n        return size[child[root][0]];\n    }\n    inline void reverse(int now){//\u6839\u8282\u70b9\u5de6\u5b50\u6811\u7684\u5c31\u662f\u9700\u8981\u7ffb\u8f6c\u7684\u8282\u70b9\uff0c\u65e0\u9700\u518dsplay\u5176\u4ed6\u8282\u70b9\u53d6\u533a\u95f4\n        if(!now) return;\n        lazy[now] ^= 1;\n        swap(child[now][0], child[now][1]);\n    }\n    inline void del(){//\u5173\u952e\u64cd\u4f5c\u4e4b\u4e00\n        if(!child[root][0]){//\u6839\u8282\u70b9\u5c31\u662f\u4f4d\u7f6e\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u76f4\u63a5\u5c06\u53f3\u5b50\u6811\u6839\u8282\u70b9\u62fd\u4e0a\u6765\u4f5c\u4e3a\u6839\u8282\u70b9\n            root = child[root][1];\n            father[root] = 0;\n        }\n        else{//\u627e\u5230\u6839\u8282\u70b9\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u6b63\u786e\u6027\u8bf7\u81ea\u5df1\u8bc1...\n            int front = pre(child[root][0]);\n            splay(front, root);\n            child[front][1] = child[root][1]; \n            father[child[root][1]] = front;\n            root = front;\n            father[root] = 0;\n            pushup(root);\n        }\n    }\n}A;\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    A.root = A.build(1, n);\n    for(int i = 1; i <= n; ++i){\n        scanf(\"%d\", &A.node[i].data);\n        A.node[i].id = i;//\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u5206\u914d\u4f4d\u7f6eid\n\t}\n    sort(A.node + 1, A.node + n + 1);//\u4ee5data\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0cid\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u53ef\u4fdd\u8bc1data\u76f8\u540c\u7684\u8282\u70b9\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d1\u751f\u6539\u53d8\n    for(int i = 1; i < n; ++i){\n        printf(\"%d \", A.rank(A.node[i].id) + i);//\u56e0\u4e3a\u4e4b\u524d\u6709\u88ab\u5220\u9664\u7684\u8282\u70b9\uff0c\u6240\u4ee5rank\u8981\u52a0i\n        A.reverse(A.child[A.root][0]);\n        A.del();\n    }\n    printf(\"%d\\n\", n);\n    return 0;\n}\n```",
        "postTime": 1546321127,
        "uid": 10337,
        "name": "ZPC2048",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    },
    {
        "content": "![Peipei](http://img.blog.csdn.net/20180120093509502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHJldGVuZF9mYWw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\u8fd8\u662f\u6211\u7684Logo  >\\_<\n\n\n\u770b\u522b\u7684\u9898\u89e3\u597d\u957f\u597d\u96be\u7406\u89e3\n\n\u90a3\u6211\u4eec\u5199\u4e2a\u77ed\u7684\n\n\u9996\u5148 \u8fd9\u662f\u4e00\u4e2a\u5e73\u8861\u6811\n\n\u8fd9\u4e2a\u9898\u8981\u6c42\u662f \u67e5\u8be2\u7b2c k \u5c0f\u5e76\u53cd\u8f6c\u67d0\u4e2a\u533a\u95f4\n\n\u6240\u4ee5\u5462\n\n# **fhq Treap** \u554a\n\n\u6211\u4eec\u6743\u503c\u4e3a\u8f93\u5165\u7684\u4e0b\u6807\uff0c  \u5efa\u4e00\u4e2afhq Treap\n\n\u7136\u540e\u4ee5\u8be5\u70b9\u7684\u6743\u503c\u4f5c\u4e3a\u4f18\u5148\u7ea7\uff0c\u4f7f\u4e4b\u6210\u4e3a\u5c0f\u6839\u5806\n\n\u8fd9\u6837\u5f53\u524d Treap \u7684\u5806\u9876\u5c31\u662f\u5f53\u524d\u6700\u5c0f\u503c\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u76f4\u63a5\u53d6\u5806\u9876\uff0c  \u7136\u540e\u5220\u9664\n\n\u81f3\u4e8e\u65cb\u8f6c\uff0c \u6211\u4eec\u5728\u5220\u9664\u4e4b\u524d\n\n\u5728\u5806\u9876\u7684\u5de6\u5b50\u6811\u4e2d\u6253\u4e0a lazy \u6807\u8bb0\u5c31\u597d\u4e86\n\n\u7136\u540e\u5220\u6389\u5806\u9876\n\n\u56e0\u4e3a\u6211\u4eec\u662f\u6309\u7167\u4f4d\u7f6e\u4e3a\u6743\u503c\uff0c\u90a3\u4e48\u5de6\u5b50\u6811\u7684\u6240\u6709\u70b9\u90fd\u5728\u5f53\u5e8f\u5217\u4e2d\u524d\u8282\u70b9\u7684\u5de6\u4fa7\n\n\u5373\u9700\u8981\u7ffb\u8f6c\u7684\u5730\u65b9\n\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u5199\u4e00\u4e2a\u751a\u81f3\u53ea\u9700\u8981 merge \u7684 fhq Treap \u5c31\u597d\u4e86\n\n\u68d2\u68d2\u54d2\n\n\n```cpp\n#include <bits/stdc++.h>\n#define II long long\n#define IL inline\n#define R register\n#define I 123456\n#define PI 100000\nusing namespace std;\n\nIL void of(R II &a) {\n    R char c=getchar(); R II w=1, p=0;\n    while (c<'0' || c>'9') { if(c=='-') w=-1; c=getchar(); }\n    while (c>='0' && c<='9') { p=p*10+c-'0'; c=getchar(); }\n    a=w*p;\n}\n\n/* -------------------- Peipei -------------------- */\n\nII n,root;\n\nstruct owo { II l,r,w,ra,siz,lazy; } Tr[I];\nIL void up(R II o) { Tr[o].siz=Tr[Tr[o].l].siz+Tr[Tr[o].r].siz+1; }\nIL void updata(R II o) {\n    if(Tr[o].lazy) {\n        R II l=Tr[o].l, r=Tr[o].r;\n        swap(Tr[o].l,Tr[o].r);\n        if(l) Tr[l].lazy^=1;\n        if(r) Tr[r].lazy^=1;\n        Tr[o].lazy=0;\n    }\n}\n\nIL II merge(R II l,R II r) {\n    if(l*r==0) return l+r;\n    if(Tr[l].ra<Tr[r].ra) {\n        updata(l);\n        Tr[l].r=merge(Tr[l].r,r);\n        up(l); return l;\n    } else {\n        updata(r);\n        Tr[r].l=merge(l,Tr[r].l);\n        up(r); return r;\n    }\n}\n\n\nint main()\n{\n//    freopen(\"1.in\",\"r\",stdin);\n    \n    of(n);\n    for(R II i=1,x;i<=n;i++) {\n        of(x); x=x*PI+i;\n        Tr[i]=(owo) {0,0,i,x,1,0};\n        root=merge(root,i);\n    }    \n    \n    for(R II i=1,l,r;i<=n;i++)\n    {\n        updata(root);\n        printf(\"%lld \",Tr[Tr[root].l].siz+i);\n        l=Tr[root].l; r=Tr[root].r;\n        Tr[root].l=Tr[root].r=0;\n        Tr[l].lazy^=1;\n        root=merge(l,r);\n    }\n    exit(0);\n}\n```\n\n\u662f\u4e0d\u662f\u7279\u522b\u77ed\uff1f\uff1f\uff01\n\n\u3010\u6ed1\u7a3d\u3011\n",
        "postTime": 1516884936,
        "uid": 36716,
        "name": "wuzhoupei",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3165 \u3010[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u3011"
    }
]