[
    {
        "content": "\u8fd9\u4e2a\u9898\u548c P5066 \u8fd8\u633a\u50cf\u7684\u8bf4\uff08\n\n\u60f3\u505a P5066 \u7684\u540c\u5b66\u4eec\u53ef\u4ee5\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u9898\u5462\uff08\n\nTips\uff1a\u4e3a\u4e86\u65b9\u4fbf\u63cf\u8ff0\uff0c\u8bb0\u6a21\u5f0f $0$ \u4e3a Original\uff0c\u6a21\u5f0f $1$ \u4e3a Extended\uff0c\u6a21\u5f0f $2$ \u4e3a Enhanced\u3002 \n\n\u9996\u5148\uff0c\u5355\u70b9\u63d2\u5165\uff0c\u60f3\u5230\u5e73\u8861\u6811\u3002\n\n\u4f46\u662f\u4f60\u76f4\u63a5\u7ef4\u62a4\u7684\u8bdd\u8981 $O(nx)\\approx O(10^{14})$ \u4e2a\u70b9\uff0c\u70b8\u5230\u6ca1\u8fb9\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65b9\u6848\uff0c\u5982\u679c\u4e00\u6bb5\u8fde\u7eed\u7684\u540c\u79cd\u71c3\u6599\u4e00\u90e8\u5206\u91c7\u7528\u72b6\u6001 $i$\uff0c\u4e00\u90e8\u5206\u91c7\u7528\u72b6\u6001 $j$\uff0c\u90a3\u4e48\u628a $j$ \u6362\u6210 $i$\uff08\u5982\u679c $a_j\\leq a_i$\uff09\u6216\u8005\u628a $i$ \u6362\u6210 $j$\uff08\u5982\u679c $a_j\\geq a_i$\uff09\uff0c\u7b54\u6848\u4e00\u5b9a\u4e0d\u4f1a\u53d8\u5dee\u3002\n\n\u6240\u4ee5\u65e2\u7136\u6709\u4e00\u79cd\u6700\u4f18\u65b9\u6848\u4fdd\u8bc1\u4efb\u610f\u4e00\u6bb5\u8fde\u7eed\u7684\u540c\u79cd\u71c3\u6599\u4e00\u5b9a\u6709\u76f8\u540c\u7684\u5de5\u4f5c\u6a21\u5f0f\uff0c\u6211\u4eec\u4e0d\u5982\u76f4\u63a5\u8fd0\u7528\u73c2\u6735\u8389\u6811\u7684\u601d\u60f3\uff0c\u5c06\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u7f29\u6210\u4e00\u4e2a\u70b9\u3002\uff085066 \u7684\u601d\u60f3\u548c\u6b64\u7c7b\u4f3c\uff09\n\n\u8fd9\u6837\u6211\u4eec\u518d\u8fd0\u7528\u4e00\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u63d2\u5165\u4e00\u4e2a\u8fde\u7eed\u6bb5\uff0c\u6700\u574f\u60c5\u51b5\u662f\u63d2\u5230\u4e86\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u4e2d\u95f4\uff0c\u8fd9\u6837\u6811\u4e2d\u4f1a\u589e\u52a0 $2$ \u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u6b21\u64cd\u4f5c\u5fc5\u7136\u4ec5\u5728\u6811\u4e2d\u589e\u52a0 $O(1)$ \u4e2a\u8282\u70b9\uff0c\u4e8e\u662f\u7a7a\u95f4\u5c31\u964d\u4f4e\u5230\u4e86 $O(n)$\u3002\uff08\u8fd9\u4e2a\u6027\u8d28\u5728 5066 \u4e2d\u540c\u6837\u8981\u7528\u5230\uff09\n\n\u73b0\u5728\u53bb\u8003\u8651\u600e\u4e48 Pushup\u3002\n\n\u6211\u4eec\u8bbe $m_{i,j}$ \u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u6d89\u53ca\u7684\u5de5\u4f5c **\u9636\u6bb5\uff08\u6ce8\u610f\u4e0d\u662f\u6a21\u5f0f\uff09** \u5728\u533a\u95f4 $[i,j]$ \u4e4b\u5185\u65f6\u4ea7\u751f\u7684\u6700\u5927\u80fd\u91cf\uff0c$dp_{i,j}$ \u8868\u793a\u8fd9\u68f5\u5b50\u6811\u6d89\u53ca\u7684\u5de5\u4f5c\u9636\u6bb5\u5728\u533a\u95f4 $[i,j]$ \u4e4b\u5185\u65f6\u4ea7\u751f\u7684\u6700\u5927\u80fd\u91cf\u3002\n\n\u5176\u4e2d\u5de5\u4f5c\u9636\u6bb5 $0$ \u5bf9\u5e94\u6a21\u5f0f $0$\uff0c\u5de5\u4f5c\u9636\u6bb5 $1$ \u5bf9\u5e94\u6a21\u5f0f $1$\uff0c\u5de5\u4f5c\u9636\u6bb5 $2$ \u5bf9\u5e94\u6a21\u5f0f $2$\uff0c\u5de5\u4f5c\u9636\u6bb5 $3$ \u5bf9\u5e94\u6a21\u5f0f $0$\u3002\n\n$m_{i,j}$ \u53ef\u4ee5\u76f4\u63a5\u66b4\u529b $O(k^3)$ \u6c42\uff0c\u56e0\u4e3a $k=4$ \u6240\u4ee5\u65f6\u95f4\u5f00\u9500\u4e0a\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u5f53\u7136\u8fd9\u91cc\u53ef\u4ee5\u4f18\u6389 $4$ \u500d\u5e38\u6570\u3002\n\n\u7136\u540e\u6211\u4eec\u8bb0\u5de6\u5b50\u6811\u7684 $dp_{i,j}$ \u4e3a $dl_{i,j}$\uff0c\u53f3\u5b50\u6811\u7684 $dp_{i,j}$ \u4e3a $dr_{i,j}$\u3002\u5982\u679c\u5b50\u6811\u4e3a\u7a7a\u5c31\u90fd\u662f $0$\u3002\n\n\u7136\u540e\u8f6c\u79fb\u4e00\u4e2a $t$ \u6570\u7ec4\uff0c$t_{i,j} = \\max\\limits_{i\\leq k\\leq j}dl_{i,k}+m_{k,j}$\u3002\u5176\u5b9e $t$ \u5c31\u662f\u5ffd\u7565\u53f3\u5b50\u6811\u7684 $dp$\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u8f6c\u79fb $dp$ \u6570\u7ec4\uff1a$dp_{i,j} = \\max\\limits_{i\\leq k\\leq j}t_{i,k}+dr_{k,j}$\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u662f $O(k^3)$ \u7684\uff0c\u540c\u6837\u53ef\u4ee5\u63a5\u53d7\u3002\n\n~~\u4f60\u751a\u81f3\u53ef\u4ee5 $O(k^4)$ \u6c42\u8fd9\u4e2a\u4e1c\u897f\uff0c\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u5361\u8fc7\u53bb\u3002~~\n\n\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u53d6\u6839\u5373\u53ef\u3002\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u5566~\n\n\u6700\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(nk^3\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(nk^2)$\u3002\n\n\u8fd9\u91cc\u5728\u5b9e\u73b0\u63d2\u5165\u8282\u70b9\u7684\u65f6\u5019\u56e0\u4e3a\u6d89\u53ca\u5230\u5206\u88c2\u4e00\u4e2a\u539f\u6709\u8282\u70b9\u4f1a\u4ea7\u751f\u4e00\u4e9b\u7ec6\u8282\uff0c\u4e0d\u8fc7\u4f7f\u7528 Fhq-Treap \u8fd8\u662f\u5f88\u597d\u5199\u7684~~\u800c\u4e14\u6bd4 5066 \u7684\u7ec6\u8282\u4e0d\u77e5\u9053\u5c11\u5230\u54ea\u53bb\u4e86\u3002~~\n\n\u4ee3\u7801\u4e3a\u6307\u9488\u7248 Fhq\uff1a\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\n#define int long long\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\n#define GetSize(p) (p ? p->siz : 0)\n#define GetMx(p, x, y) (p ? p->mx[x][y] : 0)\n#define GetSgmx(p, x, y) (p ? p->sgmx[x][y] : 0)\nstruct Node {\n\tint mx[4][4], sgmx[4][4], siz, rnd, a1, a2, a3, len;\n\tNode *l, *r;\n\tNode() {\n\t\tsiz = rnd = a1 = a2 = a3 = 0;\n\t\tmemset(mx, 0, sizeof(mx));\n\t\tmemset(sgmx, 0, sizeof(sgmx));\n\t\tl = r = NULL;\n\t}\n\tinline void Update() {\n\t\tmemset(mx, 0, sizeof(mx));\n\t\tmx[0][0] = mx[3][3] = a1 * len;\n\t\tmx[1][1] = a2 * len;\n\t\tmx[2][2] = a3 * len;\n\t\tfor (register int i = 0;i < 3;i++) {\n\t\t\tfor (register int j = i + 1;j <= 3;j++) {\n\t\t\t\tfor (register int k = i;k <= j;k++) {\n\t\t\t\t\tmx[i][j] = Max(mx[i][j], mx[k][k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tregister int tmp[4][4] = {0};\n\t\tfor (register int i = 0;i <= 3;i++) {\n\t\t\tfor (register int j = i;j <= 3;j++) {\n\t\t\t\tfor (register int k = i;k <= j;k++) {\n\t\t\t\t\ttmp[i][j] = Max(tmp[i][j], GetSgmx(l, i, k) + mx[k][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmemset(sgmx, 0, sizeof(sgmx));\n\t\tfor (register int i = 0;i <= 3;i++) {\n\t\t\tfor (register int j = i;j <= 3;j++) {\n\t\t\t\tfor (register int k = i;k <= j;k++) {\n\t\t\t\t\tsgmx[i][j] = Max(sgmx[i][j], tmp[i][k] + GetSgmx(r, k, j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsiz = GetSize(l) + GetSize(r) + len;\n\t}\n};\nNode nd[500005];\nint top;\nstruct Fhqtreap {\n\tNode *_root;\n\tinline Node* New(int len, int a1, int a2, int a3) {\n\t\tNode *p = &nd[top++];\n\t\tp->siz = p->len = len;\n\t\tp->a1 = a1;\n\t\tp->a2 = a2;\n\t\tp->a3 = a3;\n\t\tp->rnd = rand();\n\t\tp->Update();\n\t\treturn p;\n\t}\n\tinline void split(Node *p, int spk, Node *&lt, Node *&rt) {\n\t\tif (!p) {\n\t\t\tlt = rt = NULL;\n\t\t\treturn;\n\t\t}\n\t\tif (GetSize(p->l) < spk) {\n\t\t\tlt = p;\n\t\t\tsplit(p->r, spk - GetSize(p->l) - p->len, p->r, rt);\n\t\t} else {\n\t\t\trt = p;\n\t\t\tsplit(p->l, spk, lt, p->l);\n\t\t}\n\t\tp->Update();\n\t}\n\tinline Node* merge(Node *lt, Node *rt) {\n\t\tif (!lt) return rt;\n\t\tif (!rt) return lt;\n\t\tif (lt->rnd < rt->rnd) {\n\t\t\tlt->r = merge(lt->r, rt);\n\t\t\tlt->Update();\n\t\t\treturn lt;\n\t\t} else {\n\t\t\trt->l = merge(lt, rt->l);\n\t\t\trt->Update();\n\t\t\treturn rt;\n\t\t}\n\t}\n\tinline void Dfs(Node *p) {\n\t\tif (!p) return;\n\t\tDfs(p->l);\n\t\tfor (register int i = 1;i <= p->len;i++) printf(\"%d \", p->a1);\n\t\tDfs(p->r);\n\t}\n\tinline int queryMax(Node *p) {\n\t\twhile (p->r) p = p->r;\n\t\treturn p->len;\n\t}\n\tinline void Insert(int p, int x, int a1, int a2, int a3) {\n\t\tNode *p1, *p2, *p3;\n\t\tsplit(_root, p, p1, p3);\n\t\tif (GetSize(p1) == p) {\n\t\t\t_root = merge(merge(p1, New(x, a1, a2, a3)), p3);\n\t\t} else {\n\t\t\tregister int siz = queryMax(p1);\n\t\t\tsplit(p1, GetSize(p1) - siz, p1, p2);\n\t\t\tNode *p4 = New(p - GetSize(p1), p2->a1, p2->a2, p2->a3);\n\t\t\tNode *p5 = New(x, a1, a2, a3);\n\t\t\tNode *p6 = New(GetSize(p2) + GetSize(p1) - p, p2->a1, p2->a2, p2->a3);\n\t\t\t_root = merge(merge(merge(merge(p1, p4), p5), p6), p3);\n\t\t}\n\t}\n};\nFhqtreap tr;\n\ninline void Solve() {\n\tregister int ans = 0, n = qread();\n\twhile (n--) {\n\t\tregister int p = qread(), a1 = qread(), a2 = qread(), a3 = qread(), x = qread();\n\t\ttr.Insert(p, x, a1, a2, a3);\n\t\tprintf(\"%lld\\n\", GetSgmx(tr._root, 0, 3) - ans);\n\t\tans = GetSgmx(tr._root, 0, 3);\n\t}\n}\n\nsigned main() {\n\tSolve();\n\treturn 0;\n}\n```",
        "postTime": 1588863306,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "P3991 [BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539 \u9898\u89e3"
    },
    {
        "content": "\u975e\u5e38\u7b80\u5355\u7684\u52a8\u6001 dp\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u6bcf\u4e00\u8fde\u7eed\u6bb5\u90fd\u51b3\u7b56\u76f8\u540c\uff0c\u53ef\u4ee5\u5408\u5728\u4e00\u8d77\u5904\u7406\u3002\u8bbe $f_{i,j} (0\\le j\\le 3)$ \u8868\u793a\u524d $i$ \u4e2a\u8fde\u7eed\u6bb5\uff0c\u7b2c $i$ \u6bb5\u5728\u6574\u4f53\u7684 $1,2,3,4$ \u90e8\u5206\uff0c\u7684\u6700\u5927\u6536\u76ca\u3002\u5bb9\u6613\u5f97\u5230\u8f6c\u79fb\uff1a\n\n$$\\large f_{i,j}=\\max\\limits_{k\\le j} f_{i-1,k}+v_{i,j}$$\n\n$v_{i,j}$ \u4e3a\u7b2c $i$ \u6bb5\u653e\u5728\u7b2c $j$ \u90e8\u5206\u7684\u6536\u76ca\u3002\n\n\u663e\u7136\u53ef\u4ee5 ddp \u4f18\u5316\uff0c\u7528 FHQ Treap \u7ef4\u62a4\u77e9\u9635\u4e58\u79ef\u5373\u53ef\u3002\u77e9\u9635\u4e3a\uff0c\n\n$$\\begin{bmatrix} v_{i,0} & v_{i,1} & v_{i,2} & v_{i,3} \\\\ -10^{18} & v_{i,1} & v_{i,2} & v_{i,3} \\\\-10^{18} & -10^{18} & v_{i,2} & v_{i,3} \\\\-10^{18} & -10^{18} & -10^{18} & v_{i,3} \\\\\\end{bmatrix}\n\\quad$$\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pr;\nconst ll inf=1e18;\nstruct Matrix{\n\tll a[4][4];\n\tMatrix(){for(int i=0;i<4;i++)for(int j=0;j<4;j++)a[i][j]=-inf;}\n\tvoid Print(){\n\t\tfor(int i=0;i<4;i++){\n\t\t\tfor(int j=0;j<4;j++)if(a[i][j]!=-inf)printf(\"%lld \",a[i][j]);else printf(\"-inf \");\n\t\t\tputs(\"\");\n\t\t}\n\t}\n}t[300005],v[300005];\nMatrix operator *(const Matrix& a,const Matrix& b){\n\tMatrix ret;\n\tfor(int i=0;i<4;i++){\n\t\tfor(int j=0;j<4;j++){\n\t\t\tfor(int k=0;k<4;k++)ret.a[i][j]=max(ret.a[i][j],a.a[i][k]+b.a[k][j]);\n\t\t}\n\t}\n\treturn ret;\n}\nint n,c[300005][2],rnk[300005],tot,root;\nll size[300005],sum[300005];\nint New(int a,int b,int c,int x){\n\tint r=++tot;\n\tt[r].a[0][0]=1ll*x*a;\n\tt[r].a[0][1]=t[r].a[1][1]=1ll*x*b;\n\tt[r].a[0][2]=t[r].a[1][2]=t[r].a[2][2]=1ll*x*c;\n\tt[r].a[0][3]=t[r].a[1][3]=t[r].a[2][3]=t[r].a[3][3]=1ll*x*a;\n\tsum[r]=size[r]=x,rnk[r]=rand()*rand(),v[r]=t[r];\n\treturn r;\n}\nint copy(int x,int sz){\n\tint r=++tot;\n\tfor(int i=0;i<4;i++)for(int j=3;j>=i;j--)t[r].a[i][j]=v[x].a[i][j]/sum[x]*sz;\n\tsum[r]=size[r]=sz,rnk[r]=rand()*rand(),v[r]=t[r];\n\treturn r;\n}\nvoid Pushup(int p){\n\tsize[p]=size[c[p][0]]+size[c[p][1]]+sum[p],t[p]=v[p];\n\tif(c[p][0])t[p]=t[c[p][0]]*t[p];\n\tif(c[p][1])t[p]=t[p]*t[c[p][1]];\n}\npr Split(int p,ll s){\n\tif(!p)return make_pair(0,0);\n\tif(size[c[p][0]]+sum[p]>s){\n\t\tpr t=Split(c[p][0],s);\n\t\tc[p][0]=t.second,Pushup(p);\n\t\treturn make_pair(t.first,p);\n\t}\n\tpr t=Split(c[p][1],s-size[c[p][0]]-sum[p]);\n\tc[p][1]=t.first,Pushup(p);\n\treturn make_pair(p,t.second);\n}\nint Merge(int p,int q){\n\tif(!p||!q)return p+q;\n\tif(rnk[p]>rnk[q])return c[p][1]=Merge(c[p][1],q),Pushup(p),p;\n\telse return c[q][0]=Merge(p,c[q][0]),Pushup(q),q;\n}\nint Mn(int rt){\n\twhile(c[rt][0])rt=c[rt][0];\n\treturn rt;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tll pre=0;\n\tfor(int i=1,a,b,C,x;i<=n;i++){\n\t\tll p;\n\t\tscanf(\"%lld%d%d%d%d\",&p,&a,&b,&C,&x);\n\t\tpr tt=Split(root,p);\n\t\tif(size[tt.first]==p){\n\t\t\tint u=New(a,b,C,x);\n\t\t\troot=Merge(tt.first,Merge(u,tt.second));\n\t\t}\n\t\telse {\n\t\t\tp-=size[tt.first];\n\t\t\tint u=New(a,b,C,x),v=Mn(tt.second),y=sum[v];\n\t\t\tpr o=Split(tt.second,y);\n\t\t\troot=Merge(tt.first,Merge(Merge(Merge(copy(v,p),u),copy(v,y-p)),o.second));\n\t\t}\n\t\tll ans=-1e18;\n\t\tfor(int i=0;i<4;i++)for(int j=0;j<4;j++)ans=max(ans,t[root].a[i][j]);\n\t\tprintf(\"%lld\\n\",ans-pre),pre=ans;\n\t}\n}\n```",
        "postTime": 1599896316,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3991 \u3010[BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539\u3011"
    },
    {
        "content": "dp\u7684\u7ef4\u62a4\u522b\u7684\u9898\u89e3\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u53d1\u4e00\u7bc7\u975e\u6307\u9488fhq\u7684\u5199\u6cd5\u3002\n\n\uff08\u849f\u84bb\u4e0d\u4f1asplay\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\ninline long long read() {\n    long long x = 0, w = 1, ch = getchar();\n    for (; ch < '0' || ch > '9'; ch = getchar()) if (ch == '-') w = -1;\n    for (; ch >= '0' && ch <= '9'; ch = getchar()) x = x * 10 + ch - 48;\n    return w * x;\n}\n\nconst int maxn = 400005;\n\nstruct node_dp {\n    long long dp[4][4];\n    node_dp() { memset(dp, 0, sizeof dp);}\n    node_dp(int a, int b, int c, int x) {\n        dp[0][0] = dp[3][3] = 1ll * a * x;\n        dp[1][1] = 1ll * b * x, dp[2][2] = 1ll * c * x;\n        for (int i = 0; i < 4; i++)\n            for (int j = i + 1; j < 4; j++)\n                dp[i][j] = max(dp[i][j-1], dp[j][j]);\n    }\n    node_dp operator + (const node_dp &rhs) const {\n        node_dp res;\n        for (int i = 0; i < 4; i++)\n            for (int j = i; j < 4; j++)\n                for (int k = i; k <= j; k++)\n                    res.dp[i][j] = max(res.dp[i][j], dp[i][k] + rhs.dp[k][j]);\n        return res;\n    }\n} val[maxn], sum[maxn];\n\nint n, tot, root;\nint ch[maxn][2], rnd[maxn], siz[maxn];\n// all[x]\u50a8\u5b58\u5b50\u6811x\u7684\u71c3\u6599\u603b\u957f\u5ea6, len[x]\u50a8\u5b58\u8282\u70b9x\u7684\u71c3\u6599\u957f\u5ea6\u3002\nlong long all[maxn], a[maxn], b[maxn], c[maxn], len[maxn];\n\ninline void maintain(int x) {\n    siz[x] = siz[ch[x][0]] + siz[ch[x][1]] + 1;\n    all[x] = all[ch[x][0]] + all[ch[x][1]] + len[x];\n    sum[x] = val[x];\n    if (ch[x][0]) sum[x] = sum[ch[x][0]] + sum[x];\n    if (ch[x][1]) sum[x] = sum[x] + sum[ch[x][1]];\n}\n\ninline int newnode(int _a, int _b, int _c, int x) {\n    rnd[++tot] = rand(), all[tot] = len[tot] = x, siz[tot] = 1;\n    a[tot] = _a, b[tot] = _b, c[tot] = _c;\n    val[tot] = sum[tot] = node_dp(_a, _b, _c, x);\n    return tot;\n}\n\nint merge(int x, int y) {\n    if (!x || !y) return x + y;\n    if (rnd[x] < rnd[y]) { ch[x][1] = merge(ch[x][1], y); maintain(x); return x;}\n    else { ch[y][0] = merge(x, ch[y][0]); maintain(y); return y;}\n}\n\n// \u5206\u88c2\u51fa\u71c3\u6599\u957f\u5ea6<=k\u7684\u524d\u82e5\u5e72\u4e2a\u8282\u70b9\nvoid split1(int now, long long k, int &x, int &y) {\n    if (!now) { x = y = 0; return ;}\n    if (all[now] - all[ch[now][1]] <= k)\n        x = now, split1(ch[x][1], k - all[x] + all[ch[x][1]], ch[x][1], y);\n    else y = now, split1(ch[y][0], k, x, ch[y][0]);\n    maintain(now);\n}\n\n// \u5206\u88c2\u51fa\u524dk\u4e2a\u8282\u70b9\nvoid split2(int now, int k, int &x, int &y) {\n    if (!now) { x = y = 0; return ;}\n    if (siz[ch[now][0]] < k)\n        x = now, split2(ch[x][1], k - siz[ch[x][0]] - 1, ch[x][1], y);\n    else y = now, split2(ch[y][0], k, x, ch[y][0]);\n    maintain(now);\n}\n\n// \u5c06x\u8282\u70b9\u5206\u88c2\u4e3a\u71c3\u6599\u957f\u5ea6\u5206\u522b\u4e3ak\u548call[x]-k\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u5206\u522b\u4f5c\u4e3ay\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\nint insert(int x, int k, int y) {\n    ch[y][0] = k == 0 ? 0 : newnode(a[x], b[x], c[x], k);\n    ch[y][1] = k == all[x] ? 0 : newnode(a[x], b[x], c[x], all[x] - k);\n    maintain(y); return y;\n}\n\nint main() {\n    int A, B, C;\n    long long p, a, b, c, x, lastans, ans;\n    n = read() - 1;\n    p = read(), a = read(), b = read(), c = read(), x = read();\n    root = newnode(a, b, c, x);\n    cout << (lastans = sum[root].dp[0][3]) << '\\n';\n    while (n--) {\n        p = read(), a = read(), b = read(), c = read(), x = read();\n        split1(root, p, A, B), split2(B, 1, B, C);\n        root = merge(merge(A, insert(B, p - all[A], newnode(a, b, c, x))), C);\n        ans = sum[root].dp[0][3];\n        cout << ans - lastans << '\\n';\n        lastans = ans;\n    }\n}\n\n```",
        "postTime": 1552977195,
        "uid": 75102,
        "name": "zsplj_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3991 \u3010[BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539\u3011"
    },
    {
        "content": "\u4e0d\u96be\u770b\u51fa\u6211\u4eec\u9700\u8981\u4e00\u68f5\u5e73\u8861\u6811\u3002\n\n\u4e0d\u8fc7\u56e0\u4e3a\u4e00\u6b21\u63d2\u5165\u7684\u71c3\u6599\u6570\u91cf\u5f88\u591a\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e9b\u71c3\u6599\u538b\u6210\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u8bf4\u6211\u4eec\u9700\u8981\u5728\u8fd9\u4e00\u6bb5\u71c3\u6599\u7684\u5185\u90e8\u518d\u63d2\u5165\u4e00\u4e9b\u71c3\u6599\uff0c\u628a\u8fd9\u4e2a\u8282\u70b9\u62c6\u5f00\u5c31\u597d\u4e86\u3002\n\n\u663e\u7136\uff0c\u5bf9\u4e8e\u8fde\u7eed\u7684\u4e00\u6bb5\u76f8\u540c\u71c3\u6599\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u60c5\u51b5\u4f7f\u5f97\u5b83\u4eec\u7684\u5de5\u4f5c\u72b6\u6001\u662f\u4e00\u6837\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e24\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u3002\n\n`f[x][y]`\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u7684\u4e00\u4e2a\u5355\u4f4d\u71c3\u6599\u5728\u6d41\u7a0b$x$\u548c\u6d41\u7a0b$y$\u4e4b\u95f4\u7684\u6700\u5927\u80fd\u91cf\uff0c\u8fd9\u4e2a\u6570\u7ec4\u4e3b\u8981\u662f\u4e3a\u4e86`pushUp`\u7684\u65f6\u5019\u65b9\u4fbf\u3002\n\n`g[x][y]`\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u7684\u6240\u6709\u71c3\u6599\u4ece\u6d41\u7a0b$x$\u5230\u6d41\u7a0b$y$\u7684\u6700\u5927\u603b\u80fd\u91cf\u3002\n\n\u5176\u4e2d$0=3=\\text{Or}$\uff0c$1=\\text{Ex}$\uff0c$2=\\text{En}$\u3002\n\n\u7136\u540e`pushUp`\u76f4\u63a5\u66b4\u529b$O(4^{3})$\u5faa\u73af\uff0c\u53cd\u6b63\u65f6\u9650$3\\text{s}$\u4e0d\u53ef\u80fdT\u7684\uff08\n\n~~\u6211\u662f\u7edd\u5bf9\u4e0d\u4f1a\u8bf4\u6211\u5fd8\u5f00`long long`\u89c1\u4e86\u4e00\u6b21\u7956\u5b97\u7684\uff08~~\n\n~~\u5199\u5b8c\u4e00\u770b\u9898\u89e3\u611f\u89c9\u5c31\u81ea\u5df1\u5199\u5f97\u6700\u9ebb\u70e6\uff08~~\n\n\u65e0\u8bba\u5982\u4f55\u4ee5\u4e0b\u662f\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#define re register\n#define maxn 200000\n#define max(a,b) ((a)>=(b)?(a):(b))\n\nnamespace cltstream{\n\t#define size 1048576\n\tchar cltin[size+1],*ih=cltin,*it=cltin;\n\tinline char gc(){\n\t\t#ifdef ONLINE_JUDGE\n\t\t\tif(ih==it){\n\t\t\t\tit=(ih=cltin)+fread(cltin,1,size,stdin);\n\t\t\t\tif(ih==it)\n\t\t\t\t\treturn EOF;\n\t\t\t}\n\t\t\treturn *ih++;\n\t\t#else\n\t\t\treturn getchar();\n\t\t#endif\n\t}\n\n\tchar cltout[size+1],*oh=cltout,*ot=cltout+size;\n\tinline void pc(char c){\n\t\tif(oh==ot){\n\t\t\tfwrite(cltout,1,size,stdout);\n\t\t\toh=cltout;\n\t\t}\n\t\t*oh++=c;\n\t}\n\t#define clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout\n\t#undef size\n\n\ttemplate <typename _tp>\n\tinline void read(_tp& x){\n\t\tint sn=1;\n\t\tchar c=gc();\n\t\tfor(;c!=45&&(c<48||c>57)&&c!=EOF;c=gc());\n\t\tif(c==45&&c!=EOF)\n\t\t\tsn=-1,c=gc();\n\t\tfor(x=0;c>=48&&c<=57&&c!=EOF;x=(x<<3)+(x<<1)+(c^48),c=gc());\n\t\tx*=sn;\n\t}\n\n\ttemplate <typename _tp>\n\tinline void write(_tp x,char text=-1){\n\t\tif(x<0)\n\t\t\tpc(45),x=-x;\n\t\tif(!x)\n\t\t\tpc(48);\n\t\telse{\n\t\t\tint digit[22];\n\t\t\tfor(digit[0]=0;x;digit[++digit[0]]=x%10,x/=10);\n\t\t\tfor(;digit[0];pc(digit[digit[0]--]^48));\n\t\t}\n\t\tif(text>=0)\n\t\t\tpc(text);\n\t}\n}\n\nnamespace SplayTree{\n\tstruct node{\n\t\tnode* ftr;\n\t\tnode* ch[2];\n\t\tlong long val,sum,f[4][4],g[4][4];\n\n\t\tvoid pushUp();\n\t};\n\tlong long h[4][4];\n\t#define getSide(a) (a->ftr->ch[1]==a)\n\tstruct tree{\n\t\tprivate:\n\t\t\tnode mempool[maxn+10];\n\t\t\tnode* memtop;\n\t\t\tnode* null;\n\t\t\tnode* root;\n\t\t\tnode* tmp;\n\n\n\t\t\tnode* newNode(long long,long long,long long,long long);\n\t\t\tvoid connect(node*&,node*&,int);\n\t\t\tvoid rotate(node*&);\n\t\t\tvoid splay(node*&,node*&);\n\t\t\tnode* findPos(long long);\n\t\t\tvoid print(node*&);\n\n\t\tpublic:\n\t\t\tlong long insFuel();\n\n\t\t\ttree(){\n\t\t\t\tmemtop=mempool;\n\t\t\t\tnull=memtop;\n\t\t\t\tnull->ftr=null->ch[0]=null->ch[1]=null;\n\t\t\t\tnull->val=null->sum=0;\n\t\t\t\tfor(re int i=0;i<4;++i)\n\t\t\t\t\tfor(re int j=i;j<4;++j)\n\t\t\t\t\t\tnull->f[i][j]=null->g[i][j]=0;\n\t\t\t\tconnect(root=newNode(0,0,0,0),null,1);\n\t\t\t}\n\t};\n\n\tinline void node::pushUp(){\n\t\tsum=ch[0]->sum+ch[1]->sum+val;\n\t\tfor(re int i=0;i<4;++i)\n\t\t\tfor(re int j=i;j<4;++j){\n\t\t\t\th[i][j]=0;\n\t\t\t\tfor(re int k=i;k<=j;++k)\n\t\t\t\t\th[i][j]=max(h[i][j],ch[0]->g[i][k]+val*f[k][j]);\n\t\t\t}\n\t\tfor(re int i=0;i<4;++i)\n\t\t\tfor(re int j=i;j<4;++j){\n\t\t\t\tg[i][j]=0;\n\t\t\t\tfor(re int k=i;k<=j;++k)\n\t\t\t\t\tg[i][j]=max(g[i][j],h[i][k]+ch[1]->g[k][j]);\n\t\t\t}\n\t}\n\n\tinline node* tree::newNode(re long long x,re long long a,re long long b,re long long c){\n\t\tre node* p=++memtop;\n\t\tp->ftr=p->ch[0]=p->ch[1]=null;\n\t\tp->val=p->sum=x;\n\t\tp->f[0][0]=p->f[3][3]=a;\n\t\tp->f[1][1]=b;\n\t\tp->f[2][2]=c;\n\t\tp->f[0][1]=max(a,b);\n\t\tp->f[1][2]=max(b,c);\n\t\tp->f[2][3]=max(a,c);\n\t\tp->f[0][2]=p->f[0][3]=p->f[1][3]=max(max(a,b),c);\n\t\tfor(re int i=0;i<4;++i)\n\t\t\tfor(re int j=i;j<4;++j)\n\t\t\t\tp->g[i][j]=p->val*p->f[i][j];\n\t\treturn p;\n\t}\n\n\tinline void tree::connect(re node*& x,re node*& y,re int sd){\n\t\tx->ftr=y;\n\t\ty->ch[sd]=x;\n\t}\n\n\tinline void tree::rotate(re node*& p){\n\t\tre node* ptr=p->ftr;\n\t\tre node* gtr=ptr->ftr;\n\t\tre int s1=getSide(p),s2=getSide(ptr);\n\t\tconnect(p->ch[s1^1],ptr,s1);\n\t\tconnect(ptr,p,s1^1);\n\t\tconnect(p,gtr,s2);\n\t\tptr->pushUp();\n\t\tp->pushUp();\n\t}\n\n\tinline void tree::splay(re node*& st,re node*& ed){\n\t\tfor(re node* p=st->ftr;p!=ed;rotate(st),p=st->ftr)\n\t\t\tif(p->ftr!=ed)\n\t\t\t\trotate(getSide(p)==getSide(st)?p:st);\n\t}\n\n\tinline node* tree::findPos(re long long x){\n\t\tfor(re node* p=root;;){\n\t\t\tre long long ln=p->ch[0]->sum;\n\t\t\tif(x>ln&&x<=ln+p->val){\n\t\t\t\tsplay(p,null);\n\t\t\t\troot=p;\n\t\t\t\treturn p;\n\t\t\t}\n\t\t\telse\n\t\t\t\tif(x<=ln)\n\t\t\t\t\tp=p->ch[0];\n\t\t\t\telse{\n\t\t\t\t\tx-=ln+p->val;\n\t\t\t\t\tp=p->ch[1];\n\t\t\t\t}\n\t\t}\n\t}\n\n\tvoid tree::print(re node*& p){\n\t\tif(p!=null){\n\t\t\tprint(p->ch[0]);\n\t\t\tif(p->val)\n\t\t\t\tprintf(\"%I64d*(%I64d,%I64d,%I64d)\\n\",p->val,p->f[0][0],p->f[1][1],p->f[2][2]);\n\t\t\tprint(p->ch[1]);\n\t\t}\n\t}\n\n\tinline long long tree::insFuel(){\n\t\tre long long pos,a,b,c,x;\n\t\tcltstream::read(pos);\n\t\tcltstream::read(a);\n\t\tcltstream::read(b);\n\t\tcltstream::read(c);\n\t\tcltstream::read(x);\n\t\tre node* p;\n\t\tif(pos){\n\t\t\tp=findPos(pos);\n\t\t\tre long long l=pos-p->ch[0]->sum,r=p->val-l;\n\t\t\tif(l){\n\t\t\t\ttmp=newNode(l,p->f[0][0],p->f[1][1],p->f[2][2]);\n\t\t\t\tconnect(p->ch[0],tmp,0);\n\t\t\t\tconnect(tmp,p,0);\n\t\t\t\ttmp->pushUp();\n\t\t\t}\n\t\t\tif(r){\n\t\t\t\ttmp=newNode(r,p->f[0][0],p->f[1][1],p->f[2][2]);\n\t\t\t\tconnect(p->ch[1],tmp,1);\n\t\t\t\tconnect(tmp,p,1);\n\t\t\t\ttmp->pushUp();\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tp=root;\n\t\t\tfor(;p->ch[0]!=null;p=p->ch[0]);\n\t\t\tif(p->val){\n\t\t\t\tconnect(tmp=newNode(0,0,0,0),p,0);\n\t\t\t\tp=tmp;\n\t\t\t}\n\t\t\tsplay(p,null);\n\t\t\troot=p;\n\t\t}\n\t\tp->val=x;\n\t\tp->f[0][0]=p->f[3][3]=a;\n\t\tp->f[1][1]=b;\n\t\tp->f[2][2]=c;\n\t\tp->f[0][1]=max(a,b);\n\t\tp->f[1][2]=max(b,c);\n\t\tp->f[2][3]=max(a,c);\n\t\tp->f[0][2]=p->f[0][3]=p->f[1][3]=max(max(a,b),c);\n\t\tp->pushUp();\n\t\treturn p->g[0][3];\n\t}\n}\n\nint n;\nlong long lastAns,newAns;\nSplayTree::tree st;\n\nint main(){\n\tcltstream::read(n);\n\tfor(;n;--n){\n\t\tnewAns=st.insFuel();\n\t\tcltstream::write(newAns-lastAns,10);\n\t\tlastAns=newAns;\n\t}\n\tclop();\n\treturn 0;\n}\n```",
        "postTime": 1547024244,
        "uid": 63352,
        "name": "rehtorbegnaro",
        "ccfLevel": 7,
        "title": "\u300cBJOI2017\u300d\u55b7\u5f0f\u6c34\u6218\u6539"
    },
    {
        "content": "\u8003\u8651\u4e00\u79cd\u57fa\u4e8e\u5206\u6cbb\u6a21\u5f0f\u7684DP\u65b9\u7a0b\u3002\n\n\n$f(l, r, i, j)$ \u8868\u793a\u5728\u5f53\u524d\u71c3\u6599 $[l,r]$ \u90e8\u5206\u53ea\u5bf9\u5e94\u7740\u578b\u53f7 $[i,j]$ \u90e8\u5206\u80fd\u83b7\u5f97\u7684\u6700\u5927\u80fd\u91cf\u3002\u5219\u80fd\u5f97\u5230\u4e00\u79cd\u5206\u6cbb\u7684DP\u65b9\u7a0b\uff1a\n\n\n$\\forall l \\le d \\le r - 1, f(l, r, i, j) = \\max_{i \\le k \\le j} f(l, d, i, k) + f(d + 1, r, k, j)$\n\n\n\u8fd9\u4e2a\u5355\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\u662f $\\Theta(s)$ \u7684\uff0c $s$ \u662f\u7b49\u7ea7\u5c42\u6570\uff0c\u4e0d\u8fc7\u5728\u672c\u4f53\u4e2d\u4e3a\u5b9a\u503c4\u3002\n\n\n\u5982\u679c\u6211\u4eec\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\uff0c\u5219\u662f\u6bcf\u4e2a\u8282\u70b9\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a\u8be5\u5b50\u6811\u7684DP 2\u7ef4\u6570\u7ec4\u3002\u5728\u53d1\u751f\u63d2\u5165/\u65cb\u8f6c\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u8fdb\u884c update \u3002\n\n\n\u672c\u9898\u8fd8\u9700\u8981\u5c06\u6574\u6bb5\u5f53\u505a\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u4e14\u71c3\u6599\u5927\u5c0f\u5c45\u7136\u4f1a\u7206 `long long` \uff0c\u4e0d\u52a0\u4e0a\u5c31\u4f1a\u5168WA\uff0c\u53ef\u4ee5\u8bf4\u5341\u5206\u5201\u94bb\u3002\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n\n#include <algorithm>\n\n#define LOG(FMT...) // fprintf(stderr, FMT)\n\nusing namespace std;\n\ntypedef long long ll;\n\nstruct data {\n    ll dp[4][4];\n\n    data()\n    { memset(dp, 0, sizeof(dp)); }\n\n    data(const data& x)\n    { memcpy(dp, x.dp, sizeof(dp)); }\n\n    data(int a, int b, int c, int x);\n\n    data operator+(const data& x) const;\n};\n\nstruct node {\n    ll a, b, c, sz, cnt;\n    int rnd;\n    data d, sum;\n    node *ls, *rs;\n};\n\nconst int N = 100010;\n\nint n;\nnode* root;\n\nint fast_rand();\nll get_cnt(node* p);\nnode* create(int a, int b, int c, int x);\nvoid update(node* p);\nvoid insert(node*& p, node* q, ll x);\nvoid zig(node*& p);\nvoid zag(node*& p);\nvoid order(node* p);\n\nint main() {\n    int a, b, c, x;\n    ll p;\n    ll lste = 0, cure;\n    scanf(\"%d\", &n);\n    while (n--) {\n        scanf(\"%lld%d%d%d%d\", &p, &a, &b, &c, &x);\n        insert(root, create(a, b, c, x), p);\n        cure = root->sum.dp[0][3];\n        printf(\"%lld\\n\", cure - lste);\n        lste = cure;\n        LOG(\"\\n\");\n    }\n    return 0;\n}\n\nvoid order(node* p) {\n    if (!p)\n        return;\n    order(p->ls);\n    LOG(\" %d\", p->sz);\n    order(p->rs);\n}\n\ninline int fast_rand() {\n    static int x = 19260817, y = x << 4, z = x >> 2, t;\n    t = x ^ y ^ z;\n    x ^= y << 2;\n    x ^= z >> 4;\n    z = y;\n    y = x;\n    x = t;\n    return t;\n}\n\ninline ll get_cnt(node* p)\n{ return p ? p->cnt : 0; }\n\ninline void update(node* p) {\n    p->cnt = p->sz + get_cnt(p->ls) + get_cnt(p->rs);\n    p->sum = p->d;\n    if (p->ls)\n        p->sum = p->ls->sum + p->sum;\n    if (p->rs)\n        p->sum = p->sum + p->rs->sum;\n}\n\ninline node* create(int a, int b, int c, int x) {\n    static node pool[N << 1];\n    static node* p = pool;\n    ++p;\n    p->d = data(a, b, c, x);\n    p->a = a;\n    p->b = b;\n    p->c = c;\n    p->sz = x;\n    p->sum = p->d;\n    p->rnd = rand();\n    p->cnt = x;\n    return p;\n}\n\ninline void zig(node*& p) {\n    node* son = p->ls;\n    p->ls = son->rs;\n    son->rs = p;\n    update(p);\n    p = son;\n    update(p);\n}\n\ninline void zag(node*& p) {\n    node* son = p->rs;\n    p->rs = son->ls;\n    son->ls = p;\n    update(p);\n    p = son;\n    update(p);\n}\n\nvoid insert(node*& p, node* q, ll x) {\n    if (!p) {\n        LOG(\"%d\\n\", x);\n        p = q;\n        return;\n    }\n    if (x <= get_cnt(p->ls)) {\n        insert(p->ls, q, x);\n        update(p);\n        if (p->rnd > p->ls->rnd)\n            zig(p);\n        return;\n    }\n    x -= get_cnt(p->ls);\n    if (x >= p->sz) {\n        insert(p->rs, q, x - p->sz);\n        update(p);\n        if (p->rnd > p->rs->rnd)\n            zag(p);\n        return;\n    }\n    p->d = data(p->a, p->b, p->c, p->sz - x);\n    node* r = create(p->a, p->b, p->c, x);\n    p->sz -= x;\n    r->ls = p->ls;\n    p->ls = r;\n    r->rs = q;\n    update(r);\n    update(p);\n}\n\ndata::data(int a, int b, int c, int x) {\n    dp[0][0] = dp[3][3] = (ll)a * x;\n    dp[1][1] = (ll)b * x;\n    dp[2][2] = (ll)c * x;\n    for (int i = 0; i < 4; ++i)\n        for (int j = i + 1; j < 4; ++j)\n            dp[i][j] = max(dp[i][j - 1], dp[j][j]);\n}\n\ndata data::operator+(const data& x) const {\n    data ret;\n    for (int i = 0; i < 4; ++i)\n        for (int j = i; j < 4; ++j)\n            for (int k = i; k <= j; ++k)\n                ret.dp[i][j] = max(ret.dp[i][j], dp[i][k] + x.dp[k][j]);\n    return ret;\n}\n```",
        "postTime": 1516258821,
        "uid": 21423,
        "name": "Elegia",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3991 \u3010[BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539\u3011"
    },
    {
        "content": "~~Splay \u795e\u6559\u4e07\u5c81\uff01\uff01\uff0111~~\n\n\u9996\u5148\u6709\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff0c\u4e00\u6bb5\u8fde\u7eed\u7684\u71c3\u6599\u80af\u5b9a\u53ea\u7528\u4e8e\u4e00\u4e2a\u9636\u6bb5\u3002\n\n\u5bf9\u6bcf\u4e2a\u71c3\u6599\u7684\u8fde\u7eed\u6bb5\u7ef4\u62a4\u4e00\u4e2a Splay \u8282\u70b9\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4 $f_{i,j}$ \u8868\u793a\u8be5\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u7b2c\u4e00\u4e2a\u662f $i$ \u9636\u6bb5\uff0c\u6700\u540e\u4e00\u4e2a\u662f $j$ \u9636\u6bb5\u7684\u6700\u5927\u7b54\u6848\uff0c\u90a3\u8f6c\u79fb\u5c31\u662f $f_{i,j}=\\max\\limits_{i\\le k\\le j}\\{f'_{i,k}+f''_{k,j}\\}$\uff0c\u5176\u4e2d $f',f''$ \u5206\u522b\u8868\u793a\u5408\u5e76\u6210 $f_{i,j}$ \u7684\u4e24\u4e2a\u8282\u70b9\u7684 $f$ \u503c\n\n\u521d\u59cb\u6761\u4ef6\u5c31\u662f $f_{i,j}=\\max\\limits_{i\\le k\\le j} \\{val_k\\cdot x\\}$\n\n\u5957\u8def\u6027\u5730\u627e\u5230\u63d2\u5165\u7684\u4f4d\u7f6e\uff0cSplay \u5230\u6839\uff0c\u5982\u679c\u6b63\u597d\u5728\u4e00\u4e2a\u8282\u70b9\u5185\uff0c\u5c31\u628a\u8282\u70b9\u62c6\u88c2\u5f00\u62c6\u6210\u4e24\u4e2a\uff0c\u7136\u540e\u628a\u65b0\u7684\u70b9\u653e\u8fdb\u53bb\u5c31\u884c\u4e86\uff0c\u9700\u8981\u4e00\u70b9\u70b9\u8ba8\u8bba\n\n\u53e6\u5916\u9700\u8981\u6ce8\u610f `PushUp` \u7684\u5199\u6cd5\n\n\u603b\u7684\u590d\u6742\u5ea6 $O(q\\cdot \\log n)$\uff0c\u5e26\u4e00\u4e2a 64 \u500d\u5e38\u6570\uff0c\u8dd1\u5f97\u4e0d\u5feb\u4f46\u80fd\u8fc7\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n#define fi first\n#define se second\n\n#if __cplusplus < 201703L\n#define rg register\n#else\n#define rg\n#endif\n\n#define mp make_pair\n#define pb push_back\n#define pf push_front\n\n#define rep(i, s, t) for (rg int i = s; i <= t; i++)\n#define per(i, s, t) for (rg int i = t; i >= s; i--)\n#define OK cerr << \"OK!\\n\"\n\nnamespace fastio {\nconst int SIZE = (1 << 20) + 1;\nchar ibuf[SIZE], *iS, *iT, obuf[SIZE], *oS = obuf, *oT = obuf + SIZE - 1;\nchar _st[55];\nint _qr = 0;\n\ninline char getchar() {\n  return (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin),\n          (iS == iT ? EOF : *iS++) : *iS++);\n}\ninline void qread() {}\ntemplate <typename T1, typename... T2>\ninline void qread(T1& x, T2&... ls) {\n  x = 0;\n  rg char ch = ' ';\n  rg int ps = 1;\n  while (!isdigit(ch) && ch != '-') ch = getchar();\n  if (ch == '-') ps = -1, ch = getchar();\n  while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n  x *= ps;\n  qread(ls...);\n}\n\ninline void flush() {\n  fwrite(obuf, 1, oS - obuf, stdout);\n  oS = obuf;\n  return;\n}\ninline void putchar(char _x) {\n  *oS++ = _x;\n  if (oS == oT) flush();\n}\ntemplate <typename T>\ninline void qwrite(T x) {\n  if (x < 0) putchar('-'), x = -x;\n  if (x < 10) return putchar('0' + x), void();\n  qwrite(x / 10), putchar('0' + (x % 10));\n}\n\ntemplate <typename T>\ninline void qwrite(T x, char ch) {\n  qwrite(x), putchar(ch);\n}\n};  // namespace fastio\n\n#ifndef ONLINE_JUDGE\n\nvoid debug(const char* s) { cerr << s; }\ntemplate <typename T1, typename... T2>\nvoid debug(const char* s, const T1 x, T2... ls) {\n  int p = 0;\n  while (*(s + p) != '\\0') {\n    if (*(s + p) == '{' && *(s + p + 1) == '}') {\n      cerr << x;\n      debug(s + p + 2, ls...);\n      return;\n    }\n    cerr << *(s + p++);\n  }\n}\n\n#else\n#define debug(...) void(0)\n#endif\n\nconst ll mod = 1e9 + 7;\n// const ll mod = 1e9 + 9;\n// const ll mod = 19260817;\n// const ll mod = 998244353;\n// const int mod =2017;\n\ntemplate <typename T>\ninline void chkadd(T& x, T y) {\n  x = x + y >= mod ? x + y - mod : x + y;\n}\ntemplate <typename T>\ninline void chkadd(T& x, T y, T z) {\n  x = y + z >= mod ? y + z - mod : y + z;\n}\ntemplate <typename T>\ninline void chkmns(T& x, T y) {\n  x = x - y < 0 ? x - y + mod : x - y;\n}\ntemplate <typename T>\ninline void chkmns(T& x, T y, T z) {\n  x = y - z < 0 ? y - z + mod : y - z;\n}\ntemplate <typename T>\ninline void chkmax(T& x, T y) {\n  x = x < y ? y : x;\n}\ntemplate <typename T>\ninline void chkmax(T& x, T y, T z) {\n  x = y > z ? y : z;\n}\ntemplate <typename T>\ninline void chkmin(T& x, T y) {\n  x = x < y ? x : y;\n}\ntemplate <typename T>\ninline void chkmin(T& x, T y, T z) {\n  x = y < z ? y : z;\n}\n\nll qpow(ll x, ll p) {\n  rg ll base = x, res = 1;\n  while (p) {\n    if (p & 1) res = (res * base) % mod;\n    base = (base * base) % mod;\n    p >>= 1;\n  }\n  return res;\n}\n\n// fhq? \u72d7\u90fd\u4e0d\u5199\uff08\u96fe\n\nconst int N = 4e5 + 5;\n\nstruct SplayNode {\n  int fat;\n  ll same, siz;\n  int son[2];\n  ll val[5][5];\n  ll oval[5];\n  SplayNode(ll curval[], ll sam0 = 0, int fat0 = 0, int lson = 0, int rson = 0)\n      : fat(fat0), siz(sam0), same(sam0) {\n    son[0] = lson;\n    son[1] = rson;\n    memset(val, 0, sizeof val);\n    rep(i, 1, 4) rep(j, i, 4) rep(k, i, j) chkmax(val[i][j], (k == 4 ? curval[1] : curval[k]) * sam0);\n    rep(i, 1, 3) oval[i] = curval[i];\n  }\n  SplayNode() {}\n  \n  void renew() {\n  \tsiz = same;\n  \tmemset(val, 0, sizeof val);\n    rep(i, 1, 4) rep(j, i, 4) rep(k, i, j) chkmax(val[i][j], (k == 4 ? oval[1] : oval[k]) * same);\n  }\n};\n\nSplayNode tree[N];\nint n;\n\n#define fa(x) tree[x].fat\n#define son(x, p) tree[x].son[p]\n#define lson(x) son(x, 0)\n#define rson(x) son(x, 1)\n#define siz(x) tree[x].siz\n#define val(x, i, j) tree[x].val[i][j]\n#define pos(x) (rson(fa(x)) == x)\n#define same(x) tree[x].same\n#define oval(x) tree[x].oval\n\ninline void Merge(SplayNode& tar, SplayNode a, SplayNode b) {\n  memset(tar.val, 0, sizeof tar.val);\n    \n  rep(k, 1, 4) rep(i, 1, 4) rep(j, i, 4) if(i <= k && k <= j) chkmax(tar.val[i][j], a.val[i][k] + b.val[k][j]);\n  tar.siz = a.siz + b.siz;\n}\n\nvoid Connect(int cur, int fa, int p) {\n  son(fa, p) = cur;\n  fa(cur) = fa;\n}\n\ninline void PushUp(int p) {\n\ttree[p].renew();\n\tMerge(tree[p], tree[lson(p)], tree[p]);\n\tMerge(tree[p], tree[p], tree[rson(p)]);\n}\n\ninline void Rotate(int cur) {\n  int fa = fa(cur);\n  int pos = pos(cur);\n  Connect(cur, fa(fa), pos(fa));\n  Connect(son(cur, pos ^ 1), fa, pos);\n  Connect(fa, cur, pos ^ 1);\n  PushUp(fa);\n  PushUp(cur);\n  PushUp(fa(cur));\n}\n\ninline void Splay(int from, int to) {\n  to = fa(to);\n  while (fa(from) != to) {\n    int f = fa(from);\n    if (fa(f) == to) {\n      Rotate(from);\n    } else if (pos(from) == pos(f)) {\n      Rotate(f), Rotate(from);\n    } else {\n      Rotate(from), Rotate(from);\n    }\n  }\n}\n\ninline int kth(int cur, ll k) { //<= \u7684\u6709k\u4e2a\n\tif(k <= siz(lson(cur))) return kth(lson(cur), k);\n\telse if(siz(lson(cur)) <= k && k <= siz(lson(cur)) + same(cur)) return cur;\n\telse return kth(rson(cur), k - siz(lson(cur)) - same(cur));\n}\n\n#define rt lson(1)\n#define sroot 1\nint tot = 1;\n\ninline int newnode(ll val[], ll same) {\n\ttot++;\n\ttree[tot] = SplayNode(val, same);\n\treturn tot;\n}\n\ninline void Insert(ll p, ll val[], ll x) {\n\tif(rt == 0) {\n\t\trt = newnode(val, x);\n\t\tConnect(rt, sroot, 0);\n\t} else {\n\t\tif(p == siz(rt)) {\n\t\t\tint cur = newnode(val, x);\n\t\t\tConnect(rt, cur, 0);\n\t\t\tConnect(cur, sroot, 0);\n\t\t\tPushUp(cur);\n\t\t} else {\n\t\t\tSplay(kth(rt, p), rt);\n\t\t\tif(siz(lson(rt)) == p) {\n\t\t\t\tint cur = newnode(val, x);\n\t\t\t\tConnect(lson(rt), cur, 0);\n\t\t\t\tConnect(cur, rt, 0);\n\t\t\t\tPushUp(cur);\n\t\t\t\tPushUp(rt);\n\t\t\t} else if(siz(lson(rt)) + same(rt) == p) {\n\t\t\t\tint cur = newnode(val, x);\n\t\t\t\tConnect(rson(rt), cur, 1);\n\t\t\t\tConnect(cur, rt, 1);\n\t\t\t\tPushUp(cur);\n\t\t\t\tPushUp(rt);\n\t\t\t} else {\n\t\t\t\tint sizl = p - siz(lson(rt));\n\t\t\t\tint sizr = same(rt) - sizl;\n\t\t\t\tint nd1 = newnode(oval(rt), sizl);\n\t\t\t\tint nd2 = newnode(oval(rt), sizr);\n\t\t\t\tint cur = newnode(val, x);\n\t\t\t\tConnect(nd2, nd1, 1);\n\t\t\t\tConnect(cur, nd2, 0);\n\t\t\t\tConnect(rson(rt), nd2, 1);\n\t\t\t\tConnect(lson(rt), nd1, 0);\n\t\t\t\tConnect(nd1, sroot, 0);\n\t\t\t\tPushUp(nd2);\n\t\t\t\tPushUp(nd1);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tfastio::qread(n);\n\tll lastans = 0;\n\trep(i, 1, n) {\n\t\tstatic ll val[4];\n\t\tll p, x;\n\t\tfastio::qread(p, val[1], val[2], val[3], x);\n\t\tInsert(p, val, x);\n\t\tfastio::qwrite(val(rt, 1, 4) - lastans, '\\n');\n\t\tlastans = val(rt, 1, 4);\n\t}\n  fastio::flush();\n  return 0;\n}\n\n```",
        "postTime": 1621678834,
        "uid": 95103,
        "name": "KellyFrog",
        "ccfLevel": 9,
        "title": "P3991 [BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539 \u9898\u89e3"
    },
    {
        "content": "\u6d1b\u8c37 P3991 \u9898\u89e3\n\n\u7b80\u8981\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u79cd\u5143\u7d20\u6709\u4e09\u79cd\u5c5e\u6027\u503c\uff0c\u8981\u6c42\u652f\u6301\u968f\u65f6\u63d2\u5165\u4e00\u6bb5\u540c\u79cd\u7684\u5143\u7d20\u3001\u8be2\u95ee\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\u9009\u62e9\u5c5e\u6027\u503c\u7684\u548c\u7684\u6700\u5927\u503c\uff0c\u4e0d\u5f3a\u5236\u5728\u7ebf.\n\n\u90a3\u4e48\u8fd9\u4e00\u770b\u5c31\u662f\u4e00\u9053\u6570\u636e\u7ed3\u6784\u9898\uff0c\u8003\u8651\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u80fd\u591f\u7ef4\u62a4\u8fd9\u6837\u7684\u4e00\u4e2a\u5e8f\u5217\uff0c\u5982\u6b64\u6211\u4eec\u73b0\u5728\u7684\u76ee\u6807\u5c31\u662f\u627e\u51fa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u8fd9\u4e2a\u5e8f\u5217\uff0c\u6216\u8005\u8bf4\u8003\u8651**\u6211\u4eec\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u6709\u4ec0\u4e48\u80fd\u591f\u7ef4\u62a4\u8fd9\u4e2a\u5e8f\u5217**.\n\n\u9996\u5148\u7b2c\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\uff0c\u8fd9\u4e2a\u5e8f\u5217\u672c\u8eab\u7684\u957f\u5ea6\u662f $O(\\sum_{i=1}^{n} x_i)$ \u7684\uff0c\u65f6\u7a7a\u4e0a\u65e0\u6cd5\u63a5\u53d7\uff0c\u53c8\u56e0\u4e3a\u5e8f\u5217\u4e0a\u4e00\u6bb5\u540c\u79cd\u5143\u7d20\u8f83\u957f\uff0c\u8003\u8651**\u6309\u5143\u7d20\u7f29\u70b9**.\n\n\u6ce8\u610f\u5230\u5982\u679c\u540c\u79cd\u5143\u7d20\u7684\u4e00\u6bb5\u533a\u95f4\u5185\u7528\u4e86\u4e24\u79cd\u5c5e\u6027\u503c\uff0c\u6bd4\u5982\u8bf4\u5148\u901a\u5e38\u518d\u540e\u671f\uff0c\u6216\u8005\u5148\u540e\u671f\u518d\u589e\u5f3a\uff0c\u4e00\u5b9a\u4e0d\u5982\u90fd\u4f7f\u7528\u540c\u4e00\u79cd\u5c5e\u6027\uff0c\u800c\u4e14\u4f7f\u7528\u540c\u4e00\u79cd\u5c5e\u6027\uff0c\u5bf9\u540e\u7eed\u7684\u51b3\u7b56\u4e5f\u5305\u5bb9.\n\n\u6545\u800c\u53ea\u9700\u8981\u7f29\u70b9\uff0c\u628a\u957f\u5ea6\u4e3a $x_i$ \u7684\u4e00\u6bb5\u5c5e\u6027\u503c\u4e3a $a_i,b_i,c_i$ \u7684\u533a\u95f4\u7f29\u6210 **1 \u4e2a**\u5c5e\u6027\u503c\u4e3a $a_i\\times x_i,b_i\\times x_i,c_i\\times x_i$ \u7684\u70b9.\n\n\u7136\u540e\u8fd9\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u5c31\u7f29\u51cf\u5230 $2n-1$ \u4e86.\n\n\u6ce8\uff1a\u5982\u679c\u4fdd\u8bc1\u6240\u6709 $x_i$ **\u76f8\u7b49**\u800c\u4e14\u533a\u95f4\u4e24\u4e24\u4e0d\u76f8\u4ea4\uff0c\u63d2\u5165\u7684\u4f4d\u7f6e\u53ef\u4ee5\u79bb\u7ebf\u9006\u5e8f\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u4e0a\u500d\u589e\u7b80\u5355\u5730\u7ef4\u62a4\uff0c\u4e0d\u9700\u8981\u796d\u51fa\u6587\u827a\u5e73\u8861\u6811\u8fd9\u6837\u7684\u661f\u7ea7\u88c5\u5907.\n\n\u5176\u6b21\u7684\u7b2c\u4e8c\u4e2a\u95ee\u9898\u5728\u4e8e\uff0c\u5982\u679c\u76f4\u63a5\u5728\u8fd9\u4e2a\u652f\u6301\u63d2\u5165\u7684\u5e8f\u5217\u4e0a\u4f5c\u7b54\u6848\u7684\u7edf\u8ba1\u64cd\u4f5c\uff0c\u53ef\u80fd\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u7531\u4e8e\u8fd9\u9053\u9898\u4e0d\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\uff0c\u53ef\u4ee5\u5148\u628a\u6700\u540e\u7684\u5e8f\u5217\u6c42\u51fa\u6765\uff0c\u518d\u5728\u7a33\u5b9a\u7684\u6700\u540e\u7684\u5e8f\u5217\u4e0a\u8fdb\u884c\u7b54\u6848\u7684\u7edf\u8ba1\u64cd\u4f5c.\n\n**\u8fd9\u6837\u5c31\u628a\u672c\u6765\u5f88\u56f0\u96be\u7684\u53ef\u63d2\u5165\u5e8f\u5217\u4e0a\u7edf\u8ba1\u95ee\u9898\u5272\u88c2\u6210\u4e86\u4e24\u4e2a\u95ee\u9898\uff1a\u53ef\u63d2\u5165\u5e8f\u5217\u8ba1\u7b97\u3001\u7a33\u5b9a\u5e8f\u5217\u4e0a\u7edf\u8ba1**.\n\n\u7ee7\u7eed\u5206\u6790\uff0c\u53d1\u73b0\u8fd9\u4e2a\u53ef\u63d2\u5165\u5e8f\u5217\u53ef\u4ee5\u7528\u6587\u827a\u5e73\u8861\u6811\u7ef4\u62a4\uff0c\u4e2a\u4eba\u63a8\u8350\u4f7f\u7528 ```FHQ-Treap```\uff0c\u4f18\u70b9\u5728\u4e8e\u5176\u652f\u6301\u9762\u548c ```Splay``` \u7684\u652f\u6301\u9762\u76f8\u8fd1(\u867d\u7136\u4e0d\u80fd\u7528\u4f5c ```Link-Cut Tree``` \u8f85\u52a9\u6811)\uff0c\u5e76\u4e14\u5199\u6cd5\u8f83\u4e3a\u7b80\u5355\u3001\u76f4\u89c2\uff0c\u8981\u60f3\u540c\u65f6\u914d\u5408\u4e0a\u7ebf\u6bb5\u6811\u578b ```push_down``` \u64cd\u4f5c\u6216\u8005\u914d\u5408\u4e0a\u53ef\u6301\u4e45\u5316\u4e5f\u662f\u6539\u52a8\u7ec6\u8282\u5c31\u80fd\u5b8c\u6210\u7684\u4e8b\u60c5.\n\n\u4e2d\u5e8f\u904d\u5386\u5e73\u8861\u6811\u4e4b\u540e\u5f97\u5230\u4e86\u6700\u7ec8\u7684\u5e8f\u5217\uff0c\u90a3\u4e48\u8fd9\u65f6\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e0a\u5efa\u7acb\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u5373\u53ef\uff0c\u6ce8\u610f\u5230\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\u7b49\u6548\u4e8e\u5355\u70b9\u4fee\u6539\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u53ea\u9700\u652f\u6301 ```push_up``` \u800c\u4e0d\u9700\u652f\u6301 ```push_down```\uff0c\u8fd9\u5c31\u7ed9\u89e3\u9898\u5e26\u6765\u4e86\u6781\u5927\u7684\u65b9\u4fbf.\n\n\u5b9a\u4e49\u533a\u95f4\u52a8\u6001\u89c4\u5212\u6570\u7ec4 ```dp[x=0,1,2,3][y=0,1,2,3]``` \u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u5df2\u7ecf\u6d89\u53ca\u4e86\u4ece ```x``` \u72b6\u6001\u5230 ```y``` \u72b6\u6001\u7684\u6700\u4f18\u53ef\u80fd\u7b54\u6848\uff0c\u90a3\u4e48\u8f6c\u79fb\u663e\u7136\u5c31\u662f ```dp[x][y]=max{dp[x][i]+dp[i][y]}(x<=i&&i<=y)```.\n\n\u81f3\u4e8e\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u67e5\u51fa\u6839\u8282\u70b9\u7684 ```dp[x][y]``` \u7684\u6700\u5927\u503c\u5373\u53ef.\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u83b7\u5f97 $100$ \u5206\u7684\u6210\u7ee9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(n \\log n\\times k^3)$\uff0c\u5e38\u6570\u4e00\u822c\uff0c\u74f6\u9888\u5728\u7ebf\u6bb5\u6811 ```push_up```.\n\n\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e2a\u601d\u8def.\n\n\u9996\u5148\u5e94\u8be5\u5efa\u7acb\u4e00\u68f5\u666e\u901a ```FHQ-Treap```\uff0c\u7136\u540e\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\u7684\u65f6\u5019\u627e\u5230\u64cd\u4f5c\u4f4d\u7f6e\u5bf9\u5e94\u7684\u7ed3\u70b9\uff0c\u628a\u8fd9\u4e2a\u7ed3\u70b9\u5220\u9664\u6389\uff0c\u7136\u540e**\u65b0\u5efa\u4e24\u4e2a\u548c\u8fd9\u4e2a\u7ed3\u70b9\u5c5e\u6027\u4e00\u6837\u957f\u5ea6\u4e0d\u540c\u7684\u7ed3\u70b9** ```Lef,Rig``` \u8868\u793a\u88c2\u89e3\u7684\u4e24\u6bb5\u533a\u95f4\uff0c\u518d\u65b0\u5efa\u4e00\u4e2a\u8868\u793a\u5f85\u63d2\u5165\u533a\u95f4\u7684\u7ed3\u70b9 ```Cen```\uff0c\u4e4b\u540e\u6309\u7167 ```Son[0],Lef,Cen,Rig,Son[1]``` \u7684\u987a\u5e8f\u4f9d\u6b21\u5408\u5e76\u5373\u53ef.\n\n\u7136\u540e\u5728\u6700\u7ec8\u5f62\u6210\u7684\u5e8f\u5217\u4e0a\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u65e0\u9700\u521d\u59cb\u5316\uff0c\u76f4\u63a5\u4ece\u7b2c\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u5f00\u59cb\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\uff0c\u5f00 ```vector``` \u6570\u7ec4\u8868\u793a**\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u4f4d\u7f6e**\uff0c\u843d\u5b9e\u5230\u5355\u70b9\u4fee\u6539\u4e4b\u540e\u8fdb\u884c\u666e\u901a\u7ebf\u6bb5\u6811 ```push_up``` \u64cd\u4f5c\uff0c\u7136\u540e\u8bb0\u5f55\u4e0a\u6b21\u7684\u7b54\u6848\u76f4\u63a5\u67e5\u8be2\u51fa\u7b54\u6848\u76f8\u51cf\u5373\u53ef.\n\n**\u5199\u4ee3\u7801\u65f6\u6ce8\u610f\u533a\u5206\u5404\u4e2a\u8868\u793a\"\u4f4d\u7f6e\"\u7684\u53d8\u91cf\u7684\u5177\u4f53\u6db5\u4e49.**\n\n\u53ef\u4ee5\u53c2\u8003\u672c\u4eba\u5199\u7684\u8fd9\u4efd~~\u4e11\u964b\u7684~~\u4ee3\u7801\uff0c\u5171 ```222``` \u884c\uff0c\u6700\u5927\u6d4b\u8bd5\u70b9\u7528\u65f6 ```492ms(C++)/475ms(O2)```\uff0c\u76ee\u524d\u662f\u6d1b\u8c37 ```Rank 2(C++)/Rank 3(O2)```.\n\n```\n#include<bits/stdc++.h>\n#define int long long\n#define rep(a,b,c) for(register int a=(b);a<=(c);++a)\n#define dow(a,b,c) for(register int a=(b);a>=(c);--a)\nusing namespace std;\nconst int MaxN=100000+5,MaxVt=1000000+5,MaxM=200000+5,Inf=(1LL<<62),Null=0,Zero=0,SegRoot=1,Stat=3;\nconst int DownBorder=floor((double)1.1e15+0.1),HighBorder=floor((double)1.9e15+0.1);\ninline int pickrand(const register int beg,const register int end)\n{return abs((int)rand()*RAND_MAX*RAND_MAX*RAND_MAX*RAND_MAX\n\t\t\t\t+rand()*RAND_MAX*RAND_MAX*RAND_MAX\n\t\t\t\t+rand()*RAND_MAX*RAND_MAX\n\t\t\t\t+rand()*RAND_MAX\n\t\t\t\t+rand())%(end-beg+1)+beg;}\nstruct Vertex\n{\n\tint typ;\n\tint val;\n\tint pri;\n\tint siz;\n\tint ch[2];\n\tint Tim;\n};\nVertex vt[MaxVt];\nint OVERALLTot;\ninline void push_up(const register int idx)\n\t{vt[idx].siz=(vt[vt[idx].ch[0]].siz+vt[vt[idx].ch[1]].siz)+vt[idx].val;}\ninline int CreateVertex(const register int Tim,const register int typ,const register int val)\n{\n\t++OVERALLTot;\n\tvt[OVERALLTot].Tim=Tim;\n\tvt[OVERALLTot].typ=typ;\n\tvt[OVERALLTot].val=val;\n\tvt[OVERALLTot].pri=pickrand(DownBorder,HighBorder);\n\tvt[OVERALLTot].siz=val;\n\treturn OVERALLTot;\n}\ninline int Merge(const register int tx,const register int ty)\n{\n\tif(tx==Null) return ty;\n\tif(ty==Null) return tx;\n\tif(vt[tx].pri<=vt[ty].pri)\n\t\t{vt[tx].ch[1]=Merge(vt[tx].ch[1],ty),push_up(tx);return tx;}\n\telse\n\t\t{vt[ty].ch[0]=Merge(tx,vt[ty].ch[0]),push_up(ty);return ty;}\n}\ninline int GetKthVertex(const register int idx,const register int rnk,register int& Rem)\n{\n\tif(idx==Null) return Null;\n\tif(rnk<=vt[vt[idx].ch[0]].siz)\n\t\treturn GetKthVertex(vt[idx].ch[0],rnk,Rem);\n\telse if(rnk<=(vt[vt[idx].ch[0]].siz+vt[idx].val))\n\t\t{Rem=(rnk-vt[vt[idx].ch[0]].siz);return idx;}\n\telse //if(rnk>=(vt[vt[idx].ch[0]].siz+vt[idx].val)+1)\n\t\treturn GetKthVertex(vt[idx].ch[1],rnk-(vt[vt[idx].ch[0]].siz+vt[idx].val),Rem);\n}\ninline void Split(const register int idx,const register int rnk,register int& tx,register int& ty)\n{\n\tif(idx==Null){tx=ty=Null;return;}\n\tif(rnk<=(vt[vt[idx].ch[0]].siz+vt[idx].val-1))\n\t\tty=idx,Split(vt[idx].ch[0],rnk,tx,vt[idx].ch[0]);\n\telse\n\t\ttx=idx,Split(vt[idx].ch[1],rnk-(vt[vt[idx].ch[0]].siz+vt[idx].val),vt[idx].ch[1],ty);\n\tpush_up(idx);\n}\ninline void Insert(const register int Tim,register int& Root,\n\tconst register int typ,const register int val,const register int rnk)\n{\n\tregister int tx,ty,tz,idx,Rem,Lef=Null,Rig=Null,Cen;\n\tidx=GetKthVertex(Root,rnk,Rem);\n\tSplit(Root,rnk+(vt[idx].val-Rem),tx,tz);\n\tSplit(tx,rnk-Rem,tx,ty);\n\tif(vt[idx].typ!=Zero)\n\t{\n\t\tLef=CreateVertex(vt[idx].Tim,vt[idx].typ,Rem);\n\t\tRig=CreateVertex(vt[idx].Tim,vt[idx].typ,(vt[idx].val-Rem));\n\t}\n\tCen=CreateVertex(Tim,typ,val);\n\tRoot=Merge(Merge(Merge(tx,Lef),Cen),Merge(Rig,tz));\n}\nstruct FlightFuel\n{\n\tint typ;\n\tint pos;\n\tint org;\n\tint bef;\n\tint aft;\n\tint val;\n};\nFlightFuel fl[MaxN];\nint OVERALLPit,Dif[MaxN];\nstruct ConstructionNode\n{\n\tint Tim;\n\tint bef;\n\tint aft;\n};\nConstructionNode cn[MaxM];\nvector<int> Hash[MaxN];\ninline void MiddleDfs(const register int idx)\n{\n\tif(idx==Null) return;\n\tMiddleDfs(vt[idx].ch[0]);\n\tif(vt[idx].val>=1)\n\t{\n\t\t++OVERALLPit;\n\t\tcn[OVERALLPit].Tim=vt[idx].Tim;\n\t\tcn[OVERALLPit].bef=vt[idx].val*(fl[vt[idx].typ].bef-fl[vt[idx].typ].org);\n\t\tcn[OVERALLPit].aft=vt[idx].val*(fl[vt[idx].typ].aft-fl[vt[idx].typ].org);\n\t\tDif[vt[idx].Tim]+=(vt[idx].val*(fl[vt[idx].typ].org));\n\t\t++Hash[vt[idx].Tim][0],Hash[vt[idx].Tim].push_back(OVERALLPit);\n\t}\n\tMiddleDfs(vt[idx].ch[1]);\n}\nstruct SegmentTree\n{\n\tstruct SegmentNode\n\t{\n\t\tbool tag;\n\t\tint dp[4][4];\n\t\tinline void Initalize(void)\n\t\t{\n\t\t\ttag=false;\n\t\t\trep(i,0,Stat)\n\t\t\t\trep(j,i,Stat)\n\t\t\t\t\tdp[i][j]=Zero;\n\t\t}\n\t\tinline void Initalize(const register int bef,const register int aft)\n\t\t{\n\t\t\ttag=true;\n\t\t\trep(i,0,Stat)\n\t\t\t\trep(j,i,Stat)\n\t\t\t\t{\n\t\t\t\t\tdp[i][j]=-Inf;\n\t\t\t\t\tif(i<=0&&0<=j) dp[i][j]=max(dp[i][j],Zero);\n\t\t\t\t\tif(i<=1&&1<=j) dp[i][j]=max(dp[i][j],bef);\n\t\t\t\t\tif(i<=2&&2<=j) dp[i][j]=max(dp[i][j],aft);\n\t\t\t\t\tif(i<=3&&3<=j) dp[i][j]=max(dp[i][j],Zero);\n\t\t\t\t}\n\t\t}\n\t\tinline SegmentNode operator * (const SegmentNode sgx) const\n\t\t{\n\t\t\tSegmentNode Rec;\n\t\t\tRec.Initalize();\n\t\t\tif(!tag&&!sgx.tag)\n\t\t\t\treturn Rec;\n\t\t\telse if(tag&&!sgx.tag)\n\t\t\t\treturn Rec=(*this);\n\t\t\telse if(!tag&&sgx.tag)\n\t\t\t\treturn Rec=(sgx);\n\t\t\telse //if(tag&&sgx.tag)\n\t\t\t{\n\t\t\t\tRec.tag=true;\n\t\t\t\trep(i,0,Stat)\n\t\t\t\t\trep(j,i,Stat)\n\t\t\t\t\t{\n\t\t\t\t\t\tRec.dp[i][j]=-Inf;\n\t\t\t\t\t\trep(x,i,j)\n\t\t\t\t\t\t\tRec.dp[i][j]=max(Rec.dp[i][j],dp[i][x]+sgx.dp[x][j]);\n\t\t\t\t\t}\n\t\t\t\treturn Rec;\n\t\t\t}\n\t\t}\n\t};\n\tSegmentNode dt[MaxM<<2];\n\tinline int ls(const register int idx){return idx<<1;}\n\tinline int rs(const register int idx){return idx<<1|1;}\n\tinline void push_up(const register int idx)\n\t\t{dt[idx]=(dt[ls(idx)]*dt[rs(idx)]);}\n\tinline void Update(const register int pos,const register int bef,const register int aft,\n\t\tconst register int idx,const register int lef,const register int rig)\n\t{\n\t\tif(lef==pos&&pos==rig)\n\t\t\t{dt[idx].Initalize(bef,aft);return;}\n\t\tregister int mid=(lef+rig)>>1;\n\t\tif(pos<=mid)\n\t\t\tUpdate(pos,bef,aft,ls(idx),lef,mid);\n\t\telse\n\t\t\tUpdate(pos,bef,aft,rs(idx),mid+1,rig);\n\t\tpush_up(idx);\n\t}\n\tinline int Query(void)\n\t{\n\t\tregister int Max=-Inf;\n\t\trep(i,0,Stat)\n\t\t\trep(j,i,Stat)\n\t\t\t\tMax=max(Max,dt[SegRoot].dp[i][j]);\n\t\treturn Max;\n\t}\n};\nSegmentTree St;\nsigned main()\n{\n\tregister int n,m,typ,pos,org,bef,aft,val;\n\tscanf(\"%lld\",&n);\n\trep(i,1,n)\n\t{\n\t\tscanf(\"%lld%lld%lld%lld%lld\",&pos,&org,&bef,&aft,&val);\n\t\tfl[i].typ=i;\n\t\tfl[i].pos=pos;\n\t\tfl[i].org=org;\n\t\tfl[i].bef=bef;\n\t\tfl[i].aft=aft;\n\t\tfl[i].val=val;\n\t}\n\tregister int Root=Null;\n\trep(i,1,n)\n\t\tInsert(i,Root,fl[i].typ,fl[i].val,fl[i].pos);\n\trep(i,1,n)\n\t\tHash[i].push_back(0);\n\tMiddleDfs(Root);\n\tm=OVERALLPit;\n\tregister int Last=0,Today;\n\trep(i,1,n)\n\t{\n\t\trep(j,1,Hash[i][0])\n\t\t\tSt.Update(Hash[i][j],cn[Hash[i][j]].bef,cn[Hash[i][j]].aft,SegRoot,1,m);\n\t\tToday=(St.Query());\n\t\tprintf(\"%lld\\n\",(Today-Last)+Dif[i]);\n\t\tLast=Today;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1612836829,
        "uid": 130897,
        "name": "\u7480\u74a8\u661f\u7a7a1",
        "ccfLevel": 9,
        "title": "\u3010\u521d\u4e8c\u3011\u6d1b\u8c37 P3991 \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u60f3\u6e05\u695a\u8fd8\u662f\u633a\u597d\u5199\u7684\uff0c~~\u4ee3\u7801\u8fde100\u884c\u90fd\u4e0d\u5230~~\n\n\u9996\u5148\u8003\u8651\u5982\u679c\u6ca1\u6709\u63d2\u5165\u64cd\u4f5c\uff0c\u5c31\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\u600e\u4e48\u505a\uff0c\u90a3\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4e00\u7ef4\uff08\u4e8c\u7ef4\uff1f\uff09$dp$\uff0c\u6211\u4eec\u7528$f_{i,j}$\u8868\u793a\u7b2c$i$\u4e2a\u70b9\u5f53\u505a\u7b2c$j$\u4e2a\u533a\u95f4\u6765\u4f7f\u7528\uff08\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u56db\u4e2a\u533a\u95f4\u6807\u8bb0\u6210$0,1,2,3$\uff09\uff0c\u5176\u4e2d$0$\u548c$3$\u7684\u4ef7\u683c\u662f\u5b8c\u5168\u76f8\u540c\u7684\u3002\u90a3\u4e48\u8f6c\u79fb\u5c31\u662f\n\n$$f_{i,j}=\\max\\{f_{i-1,k}+val\\},k\\leq j$$\n\n\u7136\u540e\u6211\u4eec\u4f1a\u5230\u539f\u9898\u91cc\u9762\uff0c\u6709\u63d2\u5165\u64cd\u4f5c\uff0c\u663e\u7136\u60f3\u5230\u5e73\u8861\u6811\n\n\u90a3\u4e48\u6211\u4eec\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684$dp$\u642c\u5230\u5e73\u8861\u6811\u4e0a\u5c31\u597d\u4e86\n\n\u6211\u4eec\u7528$f[u] _{i,j} $\u8868\u793a\u5e73\u8861\u6811\u4e0a\u7f16\u53f7\u4e3a$u$\u7684\u8282\u70b9\u5f53\u4ed6\u4ee3\u8868\u7684\u662f$[i,j]$\u8fd9\u4e24\u4e2a\u5de5\u4f5c\u6a21\u5f0f\u7684\u65f6\u5019\u7684\u6700\u5927\u65b9\u6cd5(\u4e24\u6bb5\u53ef\u4ee5\u4e0d\u9009)\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u6539\u4e00\u4e0b$update$\u7684\u5199\u6cd5\u5c31\u53ef\u4ee5\uff0c\u8f6c\u79fb\u5c31\u662f\n\n$$f[u]_{i,k}=\\max\\{f[lc]_{i,j}+val[u]_j+f[rc]_{j,k}\\}$$\n\n~~\u8c8c\u4f3c\u6ca1\u6709ClCN\u59d0\u59d0\u7684\u90a3\u4e48\u9ebb\u70e6\uff1f\uff08~~\n\n\u4f46\u662f\u8fd9\u9898\u8fd8\u6709\u4e00\u4e2a\u6076\u5fc3\u7684\u5730\u65b9\u5c31\u662f\u6709$n$\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u63d2\u5165$x$\u4e2a\u6570\uff0c\u6700\u5dee\u7684\u65f6\u5019\u4f1a\u63d2\u5165$10^{14}$\u4e2a\u6570\uff0c\u70b8\u98de\u4e86\n\n\u600e\u4e48\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u7528ODT\u7684\u601d\u60f3\u628a\u8fde\u7eed\u4e00\u6bb5\u76f8\u540c\u7684\u5408\u5e76\u5230\u4e00\u4e2a\u70b9\u4e0a\n\n\u6bcf\u6b21\u63d2\u5165\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\uff0c\u5982\u679c\u63d2\u5230\u4e86\u4e00\u4e2a\u70b9\u7684\u4e2d\u95f4\uff0c\u5c31\u9700\u8981\u628a\u8fd9\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\n\n\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u63d2\u5165\u7684\u65f6\u5019\u6700\u591a\u591a\u4e09\u4e2a\u70b9\uff0c\u5982\u679c\u5f00\u7a7a\u95f4\u56de\u6536\u53ea\u7528\u5f00$3$\u500d\u7a7a\u95f4\u5c31\u53ef\u4ee5\uff0c\u4e0d\u5f00$4$\u500d\u4e5f\u591f\u4e86\uff0c\u5f53\u7136\u6211\u4e3a\u4e86\u4fdd\u9669\u5f00\u4e86$5$\u500d\n\n\u90a3\u4e48\u6211\u4eec\u6700\u540e\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(64n\\log n)$\uff0c\u65f6\u9650\u4e09\u79d2\u53ef\u4ee5\u901a\u8fc7\uff08\u56e0\u4e3a$64$\u8fd8\u6bd4\u8f83\u5927\u6240\u4ee5\u5355\u72ec\u5199\u51fa\u6765\u4e86\uff09\n\n\u5f53\u7136\u56e0\u4e3a\u9700\u8981\u62c6\u70b9\u8fd8\u6709\u4e00\u70b9\u70b9\u5c0f\u7ec6\u8282\n\n\u6bd4\u5982\u8bf4\u6211\u4eec\u600e\u4e48\u786e\u5b9a\u6211\u4eec\u8981\u63d2\u5165\u7684\u8fd9\u4e2a\u70b9\u4f4d\u4e8e\u54ea\u4e2a\u5e8f\u5217\u91cc\u9762\u5462\uff1f\u6211\u4eecsplit\u6309\u4ec0\u4e48split\u5462\uff1f\n\n\u53ef\u4ee5\u6309\u7167**\u5e73\u8861\u6811\u4e0a\u7684\u8282\u70b9\u6570siz**\u8fdb\u884csplit\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167**\u5b9e\u9645\u4e0a\u7684\u71c3\u6599\u6570sum**\u8fdb\u884csplit\uff0c\u5f53\u7136\u53ef\u4ee5\u4e24\u6b21\u5206\u522bsplit\u4e00\u4e0b\uff0c\u4f46\u662f\u5176\u5b9e\u662f\u6ca1\u6709\u5fc5\u8981\u7684\n\n\u6211\u4eec\u5e94\u8be5\u9009\u62e9\u6309\u7167\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u5e73\u8861\u6811\u4e0a\u7684\u8282\u70b9\u6570\u8fdb\u884csplit\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u6bd4\u5982\u8bf4\u6211\u4eec\u628a$p$\u6240\u5728\u7684\u70b9\u6309\u7167sum\u62c6\u51fa\u6765\u4e86\uff0c\u90a3\u4e48\u4ece\u54ea\u91cc\u628a\u8fd9\u4e2a\u70b9\u5288\u6210\u4e24\u534a\u5462\uff1f\u6211\u4eec\u4e0d\u77e5\u9053\n\n\u4f46\u662f\u5982\u679c\u6309\u7167siz\u62c6\u51fa\u6765\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u5229\u7528siz\u8868\u793a\u51fasum\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u6309\u7167siz\u8fdb\u884csplit\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636esum\u4e0a\u7684\u6392\u540d\uff08\u5df2\u77e5\uff09\u53bb\u627esiz\u4e0a\u7684\u6392\u540d\uff0c\u7136\u540e\u6839\u636e\u6392\u540dsplit\n\n\u7136\u540e\u7279\u5224\u63d2\u5165\u7684\u4f4d\u7f6e\u5728\u672b\u5c3e\u7684\u60c5\u51b5\uff0c\u518d\u8fd8\u539f\u5c31\u53ef\u4ee5\u4e86\n\n\u5f53\u7136\uff0c\u5f00\u4e86longlong\u4e4b\u540e\uff0c~~\u8bb0\u5f97\u8f93\u51fa%lld~~\n\n\u672c\u6765\u5199\u4e86\u4e2a\u6ca1\u5565\u7528\u7684\u7a7a\u95f4\u56de\u6536\uff0c\u540e\u6765\u4e3a\u4e86~~\u628a\u4ee3\u7801\u5361\u8fdb100\u884c\u7ed9\u5220\u4e86~~\n\n~~\u4e3a\u5565\u5220\u6389\u7a7a\u95f4\u56de\u6536\u8fd8\u53d8\u6162\u4e86500ms\u5462~~\n\n\u6700\u540e\u5361\u523095\u884c\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=5e5+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n;\nint son[N][2],treap[N],val[N][4],len[N],siz[N];\nll sum[N],f[N][4][4];\nll ans;\nint rt,tot;\nint bin[N],top;\n\nvoid update(int x){\n    memset(f[x],0,sizeof(f[x]));\n    Rep(i,0,3)\n        Rep(j,i,3)\n            Rep(k,j,3)\n                f[x][i][k]=max(f[x][i][k],f[son[x][0]][i][j]+1ll*val[x][j]*len[x]+f[son[x][1]][j][k]);\n    sum[x]=sum[son[x][0]]+sum[son[x][1]]+len[x];\n    siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n}\n\nvoid split(int o,int &u,int &v,int k){\n    if(!o){u=v=0;return;}\n    int rank=siz[son[o][0]]+1;\n    if(rank<=k)split(son[u=o][1],son[o][1],v,k-rank);\n    else split(son[v=o][0],u,son[o][0],k);\n    update(o);\n}   \n\nint merge(int u,int v){\n    if(!u||!v)return u|v;\n    int rt;\n    if(treap[u]<treap[v])son[rt=u][1]=merge(son[u][1],v);\n    else son[rt=v][0]=merge(u,son[v][0]);\n    return update(rt),rt;\n}\n\nint rnk(ll k){\n    int u=rt,res=0;\n    while(u){\n        if(sum[son[u][0]]>=k)u=son[u][0];\n        else if(sum[son[u][0]]+len[u]>=k)return res+siz[son[u][0]]+1;\n        else k-=sum[son[u][0]]+len[u],res+=siz[son[u][0]]+1,u=son[u][1];\n    }\n    return res;\n}\n\nint main()\n{\n    srand(19260817);\n    read(n);\n    Rep(i,1,n){\n        ll p,x;\n        int u=++tot;\n        read(p),read(val[u][0]),read(val[u][1]),read(val[u][2]),read(x),val[u][3]=val[u][0];\n        int rank=rnk(p);\n        int lef,mid,rht;\n        split(rt,lef,rht,rank);\n        split(lef,lef,mid,rank-1);\n        siz[u]=1,sum[u]=len[u]=x;\n        son[u][0]=son[u][1]=0;\n        treap[u]=rand();\n        update(u);\n        if(sum[lef]+len[mid]==p)rt=merge(merge(lef,mid),merge(u,rht));\n        else{\n            int l=++tot,r=++tot;\n            Rep(i,0,3)val[l][i]=val[r][i]=val[mid][i];\n            siz[l]=siz[r]=mid;\n            son[l][0]=son[r][0]=son[l][1]=son[r][1]=0;\n            sum[l]=len[l]=p-sum[lef];\n            sum[r]=len[r]=sum[lef]+sum[mid]-p;\n            treap[l]=rand(),treap[r]=rand();\n            update(l),update(r);\n            rt=merge(merge(lef,merge(l,u)),merge(r,rht));\n        }\n        printf(\"%lld\\n\",f[rt][0][3]-ans);\n        ans=f[rt][0][3];\n    }\n    return 0;\n}\n```\n",
        "postTime": 1589197268,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3991 \u3010[BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539\u3011"
    },
    {
        "content": "\u6211\u4eec\u5b9a\u4e49\u4e00\u79cd\u65b0\u7684\u77e9\u9635\u4e58\u6cd5\u4ee5\u53ca\u5bf9\u5e94\u7684\u5411\u91cf\u4e58\u6cd5\u3002\n\n\u5bf9\u4e8e\u5411\u91cf $a,c$ \u77e9\u9635 $b$\uff1a\n\n$c=a\\times b$ \u5bf9\u5e94\u7740\n\n$c_{i}=\\max\\limits_k \\left\\{a_{k}+b_{k,i}\\right\\} $\n\n\u5bf9\u4e8e\u77e9\u9635 $a,b,c$\n\n$c=a\\times b$ \u5bf9\u5e94\u7740\n\n$c_{i,j}=\\max\\limits_k \\left\\{a_{i,k}+b_{k,j}\\right\\}$\n\n\u5b83\u6ee1\u8db3\u7ed3\u5408\u5f8b\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u8fd9\u79cd\u77e9\u9635\u4e58\u6cd5\u6765\u7ef4\u62a4dp\n\n\u82e5 $dp_{i,p}$ \u4ee3\u8868\u5230\u8fbe\u7b2c $i$ \u4e2a\u71c3\u6599\u6bb5\uff0c\u6700\u540e\u4e00\u4e2a\u9636\u6bb5\u662f\u7b2c $j$ \u4e2a\u7684\u6700\u5927\u6536\u76ca\u3002\n\n\u6211\u4eec\u6709 $dp_{i,p}=\\max\\limits_{p'\\leq p} \\left\\{dp_{i-1,p'}+f(i,p)\\right\\}$\n\n\u5176\u4e2d $f(i,p)$ \u4ee3\u8868\u7b2c $i$ \u4e2a\u71c3\u6599\u6bb5\u4ee5\u7b2c $p$ \u9636\u6bb5\u4f7f\u7528\u7684\u6536\u76ca\uff08 $=$ \u71c3\u6599\u6bb5\u957f\u5ea6 $\\times$ \u5355\u4f4d\u6536\u76ca\uff09\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u9884\u5904\u7406\u4e00\u4e2a\u77e9\u9635 $t_{x,y}=\\begin{cases}f(i,y)& x\\leq y\\\\-\\infty & x>y\\end{cases}$\n\n\u90a3\u4e48\u8f6c\u79fb\u5c31\u53ef\u4ee5\u5199\u6210 $dp_i=dp_{i-1}\\times t$ \uff0c\u5176\u4e2d $t$ \u662f $i$ \u5bf9\u5e94\u7684\u77e9\u9635\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u5806\u8fde\u7eed\u6bb5\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f \u5168 $0$ \u5411\u91cf $a$ \u4e58\u4e0a\u6240\u6709\u7684\u6bb5\u5bf9\u5e94\u7684\u77e9\u9635 $t$ \u7684\u4e58\u79ef\uff08\u56e0\u4e3a dp \u521d\u59cb\u503c\u5168\u662f 0\uff0c\u4e4b\u540e\u6bcf\u6b21\u4e58\u4e0a\u4e00\u4e2a\u77e9\u9635\u5c31\u7b49\u4e8e\u8fdb\u884c\u4e86\u4e00\u6b21\u8f6c\u79fb\uff09\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u8fd9\u4e9b\u8fde\u7eed\u7684\u71c3\u6599\u6bb5\uff0c\u5e76\u4e14\u7ef4\u62a4\u533a\u95f4\u5bf9\u5e94\u77e9\u9635\u4e58\u79ef\u3002\n\n\u6700\u540e\uff0c0\u5411\u91cf\u4e58\u4e0a\u6839\u8282\u70b9\u7684\u4e58\u79ef\u6240\u5f97\u5230\u7684\u5411\u91cf\u7684\u5404\u9879\u7684\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\u3002\n\n\u6ce8\u610f\uff0c\u8fd9\u6837\u505a\u662f\u5bf9\u7684\u662f\u56e0\u4e3a\u8fd9\u79cd\u65b0\u5b9a\u4e49\u7684\u8fd0\u7b97\u6709\u7ed3\u5408\u5f8b\u3002**\u4f46\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u8bf7\u52a1\u5fc5\u6309\u987a\u5e8f\u4e58\u3002**\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u8f6c\u79fb\u77e9\u9635\u548c\u5bf9\u5e94\u5411\u91cf\u90fd\u662f 4 \u9636\u7684\uff0c\u800c\u4f17\u6240\u5468\u77e5\u77e9\u9635\u4e58\u6cd5\u53ef\u4ee5 $n^3$ \u641e\u5b9a\u3002\n\n\u6240\u4ee5\u590d\u6742\u5ea6 $O(4^3n\\log n )$\n\n\u53e6\u5916\u8fd8\u9700\u6ce8\u610f\uff0c\u5982\u679c\u5e73\u8861\u6811 split \u5230\u4e86\u4e00\u4e2a\u8282\u70b9\u7684\u4e2d\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u8282\u70b9\u5206\u88c2\u6210\u4e24\u534a\uff0c\u5176\u5b83\u90e8\u5206\u548c\u666e\u901a\u7684\u7ef4\u62a4\u533a\u95f4\u4e58\u79ef\u7684\u5e73\u8861\u6811\u65e0\u5f02\u3002\n\n\u8fd8\u6709 long long \u8981\u5f00\u8db3\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//dengyaotriangle!\n\nstruct mat{\n    long long v[4][4];\n    mat(){memset(v,0xc0,sizeof(v));}\n    inline friend mat operator*(const mat&a,const mat&b){\n        mat c;\n        for(int i=0;i<4;i++){\n            for(int j=i;j<4;j++){\n                for(int k=i;k<=j;k++){\n                    c.v[i][j]=max(c.v[i][j],a.v[i][k]+b.v[k][j]);\n                }\n            }\n        }\n        return c;\n    }\n};\n\nstruct node{\n    mat vl,sm;\n    long long sze,len;\n    int rnd;\n    int av,bv,cv;\n    node* c[2];\n};\n\nconst int maxn=100005;\nnode pool[maxn*2];\nint ps;\ninline void csct(node* rt){\n    #define mt rt->vl.v\n    rt->vl=mat();\n    mt[0][0]=mt[0][3]=mt[1][3]=mt[2][3]=mt[3][3]=rt->len*rt->av;\n    mt[1][1]=mt[0][1]=rt->len*rt->bv;\n    mt[2][2]=mt[0][2]=mt[1][2]=rt->len*rt->cv;\n}\n\ninline node* nwnode(long long l,int a,int b,int c){\n    node* nw=pool+ps++;\n    nw->sze=nw->len=l;nw->rnd=rand();nw->av=a;nw->bv=b;nw->cv=c;\n    csct(nw);\n    nw->sm=nw->vl;\n    return nw;\n}\n\ninline void pu(node* rt){\n    rt->sze=rt->len+(rt->c[0]?rt->c[0]->sze:0ll)+(rt->c[1]?rt->c[1]->sze:0ll);\n    if(!rt->c[0]&&!rt->c[1])rt->sm=rt->vl;\n    else if(!rt->c[1])rt->sm=rt->c[0]->sm*rt->vl;\n    else if(!rt->c[0])rt->sm=rt->vl*rt->c[1]->sm;\n    else rt->sm=rt->c[0]->sm*rt->vl*rt->c[1]->sm;\n}\n\nvoid spk(node*rt,long long k,node*&l,node*&r){\n    if(!rt){l=r=NULL;return;}\n    long long ls=rt->c[0]?rt->c[0]->sze:0;\n    if(k<=ls){\n        r=rt;\n        spk(rt->c[0],k,l,r->c[0]);pu(r);\n    }else if(k>=ls+rt->len){\n        l=rt;\n        spk(rt->c[1],k-ls-rt->len,l->c[1],r);pu(l);\n    }else{\n        node* w=nwnode(rt->len-(k-ls),rt->av,rt->bv,rt->cv);\n        rt->len=(k-ls);csct(rt);\n        w->c[1]=rt->c[1];rt->c[1]=w;pu(w);pu(rt);\n        l=rt;spk(rt->c[1],0,l->c[1],r);pu(l);\n    }\n}\n\nnode* mrg(node* a,node* b){\n    if(!a)return b;\n    if(!b)return a;\n    else if(a->rnd<b->rnd){\n        a->c[1]=mrg(a->c[1],b);\n        pu(a);return a;\n    }else{\n        b->c[0]=mrg(a,b->c[0]);\n        pu(b);return b;\n    }\n}\n\nint main(){\n    ios::sync_with_stdio(0);\n    int q;cin>>q;\n    node* rt=NULL;\n    long long lst=0;\n    while(q--){\n        long long p;\n        int a,b,c,x;\n        cin>>p>>a>>b>>c>>x;\n        node *ax,*bx;\n        spk(rt,p,ax,bx);\n        rt=mrg(mrg(ax,nwnode(x,a,b,c)),bx);\n        long long ans=0;\n        for(int i=0;i<4;i++)ans=max(ans,rt->sm.v[0][i]);\n        cout<<ans-lst<<'\\n';lst=ans;\n    }\n    return 0;\n}\n```",
        "postTime": 1584522770,
        "uid": 62598,
        "name": "dengyaotriangle",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3991 \u3010[BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539\u3011"
    },
    {
        "content": "\u672c\u6587\u540c\u6b65\u53d1\u8868\u4e8e[RainAir's Blog](https://blog.aor.sd.cn/archives/452)\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P3991)\n\n\u9898\u76ee\u5927\u610f\u662f\u5bf9\u4e8e\u6bcf\u79cd\u7269\u54c1\u88ab\u5212\u5206\u5230\u4e0d\u540c\u7684\u7ec4\u91cc\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u8d21\u732e\uff0c\u6c42\u4e00\u79cd\u6700\u5927\u7684\u5212\u5206\uff08\u8fd9\u91cc\u7684\u5212\u5206\u662f\u8fde\u7eed\u4e00\u6bb5\u5212\u5206\u5230\u4e00\u8d77\uff09\uff0c\u5e76\u4e14\u8981\u52a8\u6001\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u6211\u4eec\u9996\u5148\u8003\u8651\u9759\u6001\u5982\u4f55\u505a\u8fd9\u4e2a\u4e1c\u897f\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u8bbe\u51fa\u4e00\u4e2a\u6781\u4e3a\u66b4\u529b\u7684\u72b6\u6001\uff1a$f(l,r,i,j)$ \u8868\u793a\u71c3\u6599 $[l,r]$ \u4f7f\u7528\u533a\u95f4 $[i,j]$ \u5185\u7684\u5de5\u4f5c\u72b6\u6001\u80fd\u5f97\u5230\u7684\u6700\u5927\u4ef7\u503c\uff0c\u76f4\u63a5 $O(4^3)$ \u679a\u4e3e\u4e2d\u95f4\u70b9\u66b4\u529b\u8f6c\u79fb\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4f46\u662f\u6211\u4eec\u8fd8\u8981\u652f\u6301\u63d2\u5165\u5462\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u6765\u505a\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5373\u7528\u5e73\u8861\u6811\u7684\u8282\u70b9\u8868\u793a\u4e00\u6bb5\u533a\u95f4 $[l,r]$ \u7684\u6240\u6709 dp \u72b6\u6001\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u52a8\u6001\u7684\u4fee\u6539\u548c\u67e5\u8be2\u4e86\u3002\u56e0\u4e3a\u8c8c\u4f3c\u5e76\u4e0d\u662f\u7ef4\u62a4\u5e8f\u5217\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u5199\u4e86\u4e2a\u66ff\u7f6a\u7f8a\u6811\uff0c\u8c8c\u4f3c\u4e5f\u4e0d\u662f\u5f88\u6162\uff08\n\n\u4ee3\u7801\uff1a\n```c++\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <climits>\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n\n#define fi first\n#define lc(x) (ch[x][0])\n#define se second\n#define U unsigned\n#define rc(x) (ch[x][1])\n#define Re register\n#define LL long long\n#define MP std::make_pair\n#define CLR(i,a) memset(i,a,sizeof(i))\n#define FOR(i,a,b) for(Re int i = a;i <= b;++i)\n#define ROF(i,a,b) for(Re int i = a;i >= b;--i)\n#define SFOR(i,a,b,c) for(Re int i = a;i <= b;i+=c)\n#define SROF(i,a,b,c) for(Re int i = a;i >= b;i-=c)\n#define DEBUG(x) std::cerr << #x << '=' << x << std::endl\n\nconst int MAXN = 500000+5;\n\ninline char nc(){\n    static char buf[MAXN],*p1 = buf+MAXN,*p2 = buf+MAXN;\n    if(p1 == p2){\n        p1 = buf;p2 = buf + fread(buf,1,MAXN,stdin);\n        if(p1 == p2) return -1;\n    }\n    return *p1++;\n}\n\ninline void read(int &x){\n    x = 0;char ch = nc();int flag = 0;\n    while(!isdigit(ch)){\n        if(ch == '-') flag = 1;\n        ch = nc();\n    }\n    while(isdigit(ch)){\n        x = (x<<3) + (x<<1) + (ch^'0');\n        ch = nc();\n    }\n    if(flag) x = -x;\n}\n\ninline void read(LL &x){\n    x = 0;char ch = nc();int flag = 0;\n    while(!isdigit(ch)){\n        if(ch == '-') flag = 1;\n        ch = nc();\n    }\n    while(isdigit(ch)){\n        x = (x<<3) + (x<<1) + (ch^'0');\n        ch = nc();\n    }\n    if(flag) x = -x;\n}\n\nstruct Data{\n    LL f[4][4];\n    Data(){}\n    Data(LL a,LL b,LL c,LL l){\n        CLR(f,0);a *= l;b *= l;c *= l;\n        f[0][0] = f[3][3] = a;f[1][1] = b;f[2][2] = c;\n        f[0][1] = std::max(a,b);f[1][2] = std::max(b,c);f[2][3] = std::max(a,c);\n        f[0][2] = f[1][3] = f[0][3] = std::max(a,std::max(b,c));\n    }\n\n    Data operator + (const Data &t) const{\n        Data res;CLR(res.f,0);\n        FOR(l,1,4){\n            FOR(i,0,4-l){\n                int j = i+l-1;\n                FOR(k,i,j) res.f[i][j] = std::max(res.f[i][j],f[i][k]+t.f[k][j]);\n            }\n        }\n        return res;\n    }\n}val[MAXN];\nint fa[MAXN],ch[MAXN][2],A[MAXN],L[MAXN],B[MAXN],C[MAXN],q[MAXN],size[MAXN];\nint N,cnt,top,root,rebuilder;\nLL len[MAXN],tot;\n\nconst double alpha = 0.8;\n\ninline bool isbad(int x){\n    return alpha*size[x] < std::max(size[lc(x)],size[rc(x)]);\n}\n\ninline void pushup(int x){\n    val[x] = Data(A[x],B[x],C[x],L[x]);\n    if(lc(x)) val[x] = val[lc(x)] + val[x];\n    if(rc(x)) val[x] = val[x] + val[rc(x)];\n    len[x] = len[lc(x)] + len[rc(x)] + L[x];\n    size[x] = size[lc(x)] + size[rc(x)] + 1;\n}\n\ninline int find(int x,LL pos){\n    if((len[lc(x)] < pos || (!lc(x) && !pos)) && len[lc(x)]+L[x] >= pos) return x;\n    if(len[lc(x)] >= pos) return find(lc(x),pos);\n    tot += len[lc(x)]+L[x];\n    return find(rc(x),pos-len[lc(x)]-L[x]);\n}\n\ninline void insert(int &x,int a,int b,int c,LL pos,int l,int pre=0){\n    if(!x){\n        x = ++cnt;val[x] = Data(a,b,c,l);\n        A[x] = a;B[x] = b;C[x] = c;L[x] = len[x] = l;size[x] = 1;fa[x] = pre;\n        return;\n    }\n    if(pos < len[lc(x)]+L[x]) insert(lc(x),a,b,c,pos,l,x);\n    else insert(rc(x),a,b,c,pos-len[lc(x)]-L[x],l,x);\n    pushup(x);\n    if(isbad(x)) rebuilder = x;\n}\n\ninline void update(int x,int k,LL pos,int l){\n    if(x == k){\n        L[x] = l;pushup(x);\n        return;\n    }\n    if(pos <= len[lc(x)]) update(lc(x),k,pos,l);\n    else update(rc(x),k,pos-len[lc(x)]-L[x],l);\n    pushup(x);\n}\n\ninline void dfs(int x){\n    if(lc(x)) dfs(lc(x));\n    q[++top] = x;\n    if(rc(x)) dfs(rc(x));\n}\n\ninline void build(int &x,int l,int r,int pre){\n    if(l > r){\n        x = 0;return;\n    }\n    int mid = (l + r) >> 1;//DEBUG(mid);\n    x = q[mid];fa[x] = pre;\n    build(lc(x),l,mid-1,x);build(rc(x),mid+1,r,x);\n    pushup(x);\n}\n\ninline void rebuild(int x){\n    rebuilder = top = 0;dfs(x);int y = fa[x];\n    if(!y) build(root,1,top,0);\n    else build(ch[y][rc(y)==x],1,top,y);\n}\n\nsigned main(){\n    int N;read(N);\n    insert(root,0,0,0,0,0);\n    LL lastans = 0;\n    FOR(i,1,N){\n        LL p;int a,b,c,d;\n        read(p);read(a);read(b);read(c);read(d);\n        tot = 0;int x = find(root,p);\n        if(tot + len[lc(x)] + L[x] != p){\n            LL left = tot + len[lc(x)] + L[x] - p;\n            update(root,x,p,L[x]-left);\n            insert(root,a,b,c,p,d);if(rebuilder) rebuild(rebuilder);\n            insert(root,A[x],B[x],C[x],p+d,left);\n        }\n        else insert(root,a,b,c,p,d);\n        printf(\"%lld\\n\",val[root].f[0][3]-lastans);\n        lastans = val[root].f[0][3];if(rebuilder) rebuild(rebuilder);\n    }\n    return 0;\n}\n```",
        "postTime": 1549033655,
        "uid": 50075,
        "name": "RainAir",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3991 \u3010[BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539\u3011"
    },
    {
        "content": "\n\u6211\u6765\u4e00\u7bc7\u5f88\u9ebb\u70e6\u7684\u9898\u89e3\u3002\n\n## \u601d\u8def\u8bb2\u89e3\n\u9996\u5148\u6ce8\u610f\u5230\u9898\u76ee\u8981\u6c42\u67d0\u4e00\u6bb5\u7684\u548c\uff0c\u4e8e\u662f\u4e0d\u96be\u60f3\u5230\u7528\u524d\u7f00\u548c\u8f6c\u5316\u3002\u7531\u4e8e\u6240\u6709\u6743\u503c\u975e\u8d1f\uff0c\u56e0\u6b64\u6700\u540e\u4e00\u79cd\u9636\u6bb5\u7684\u672b\u7aef\u70b9\u4e00\u5b9a\u53d6\u5168\u90e8\u7684\u672b\u7aef\u70b9\u3002\u8bbe $A$\uff0c$B$\uff0c$C$ \u5206\u522b\u4e3a\u4e09\u79cd\u72b6\u6001\u7684\u524d\u7f00\u548c\uff0c\u4ec5\u9700\n$$\nAns=A_l-A_k+C_k-C_j+B_j-B_i+A_i \\space \\space \\space (i\\leq j\\leq k)\n$$\n\u6700\u5927\u5373\u53ef\u3002\u8003\u8651\u5230 $A_l$ \u4e3a\u5e38\u6570\uff0c\u4ec5\u9700\u7f6e\u53d8\u6362\n$$\n\\begin{cases}\nC'_k=C_k-A_k\\\\\nB'_j=B_j-C_j\\\\\nA'_i=A_i-B_i\\\\\n\\end{cases}\n$$\n\u9898\u76ee\u5373\u8981\u6c42\u5e8f\u5217\u4e2d $A_i'+B_j'+C_k'$ \u6700\u5927\u5373\u53ef\u3002\u8fd9\u662f\u663e\u7136\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u3002\u73b0\u5728\u95ee\u9898\u662f\u70b9\u6570\u91cf\u592a\u591a\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u76f8\u540c\u79cd\u7c7b\u7684\u70b9\u7f29\u5728\u4e00\u8d77\u3002\n\n\u8fd9\u542f\u793a\u6211\u4eec\u5c06\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u4f7f\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u51fa\u6bcf\u4e00\u6bb5\u7684\u7f16\u53f7\uff0c\u518d\u7528\u7ebf\u6bb5\u6811\u63d2\u5165\u3001\u533a\u95f4\u52a0\u5373\u53ef\u3002\n\n\u8fd9\u8fb9\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u6ca1\u6709\u63d2\u5165\u8fc7\u70b9\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u6211\u4eec\u672c\u6765\u65e0\u6cd5\u76f4\u63a5\u5c06\u533a\u95f4\u52a0\u7684\u6807\u8bb0\u548c\u5b83\u5408\u5e76\uff0c\u4e8e\u662f\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5355\u72ec\u7ef4\u62a4\u4e00\u4e2a\u6807\u8bb0\uff0c\u7b49\u5230\u8fd9\u4e2a\u70b9\u975e\u7a7a\u4e86\u5728\u5c06\u8fd9\u4e2a\u6807\u8bb0\u548c\u8fd9\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u5408\u5e76\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i,s,t) for(int i=(s);i<=(t);i++)\n#define MAXN 100009\n#define MAXSPACE 2000009\n#define int long long\nusing namespace std;\nint n,s;\nint a[MAXN],b[MAXN],c[MAXN],sum[MAXN];\nvector<pair<int,int>> S[MAXN];\ntypedef long long ull;\nstruct Treap {\n\tint wtot;\n\tdefault_random_engine egg;\n\tstruct Node {\n\t\tNode* ch[2];\n\t\tint pri;\n\t\tint val,rec,size1;\n\t\tull size2;\n\t} T[MAXN<<2];\n\tNode *NULLPTR,*root;\n\tTreap():NULLPTR(&T[0]),root(NULLPTR){ }\n\tinline Node* createnode(){ ++wtot; T[wtot].ch[0]=NULLPTR; T[wtot].ch[1]=NULLPTR; return &T[wtot]; }\n\tinline void pushup(Node* x){\n\t\tx->size1=x->ch[0]->size1+x->ch[1]->size1+1;\n\t\tx->size2=x->ch[0]->size2+x->ch[1]->size2+x->rec;\n\t}\t\n\tvoid split(Node* x,int k,Node* &a,Node* &b){\n\t\tif(x==NULLPTR){\n\t\t\ta=b=NULLPTR;\n\t\t\treturn;\n\t\t}\n\t\tif(k<=x->ch[0]->size1){\n\t\t\tb=x;\n\t\t\tsplit(x->ch[0],k,a,x->ch[0]);\n\t\t}\n\t\telse {\n\t\t\ta=x;\n\t\t\tsplit(x->ch[1],k-x->ch[0]->size1-1,x->ch[1],b);\n\t\t}\n\t\tpushup(x);\n\t}\n\tNode* merge(Node* a,Node* b){\n\t\tif(a==NULLPTR) return b;\n\t\tif(b==NULLPTR) return a;\n\t\tif(a->pri>b->pri){\n\t\t\ta->ch[1]=merge(a->ch[1],b);\n\t\t\tpushup(a);\n\t\t\treturn a;\n\t\t}\n\t\telse {\n\t\t\tb->ch[0]=merge(a,b->ch[0]);\n\t\t\tpushup(b);\n\t\t\treturn b;\n\t\t}\n\t}\n\tint mpfd(Node* x,int pos,int& d){\n\t\tif(x->ch[0]->size2<pos&&pos<=x->ch[0]->size2+x->rec){\n\t\t\td=pos-x->ch[0]->size2;\n\t\t\treturn x->ch[0]->size1+1;\n\t\t}\n\t\telse if(pos<=x->ch[0]->size2)\n\t\t\treturn mpfd(x->ch[0],pos,d);\n\t\telse return x->ch[0]->size1+1+mpfd(x->ch[1],pos-x->ch[0]->size2-x->rec,d);\n\t}\n\tvoid insert(int val,int rec,int pos){\n\t\tNode* a;\n\t\ta=createnode();\n\t\ta->val=val,a->size1=1,a->size2=a->rec=rec,a->pri=egg();\n\t\tif(root==NULLPTR){\n\t\t\troot=a;\n\t\t\treturn;\n\t\t}\n\t\tint d;\n\t\tint k=mpfd(root,pos,d);\n\t\tNode* x,*y,*b,*c;\n\t\tsplit(root,k,x,y);\n\t\tsplit(x,k-1,x,b);\n\t\tif(d==b->rec)\n\t\t\tc=NULLPTR;\n\t\telse {\n\t\t\tc=createnode();\n\t\t\tc->size1=1,c->val=b->val,c->size2=c->rec=b->rec-d;\n\t\t\tc->pri=egg(),b->size2=b->rec=d;\n\t\t}\n\t\troot=merge(merge(x,merge(merge(b,a),c)),y);\n\t}\n\tvoid __dfs(Node* x,int t=0){\n\t\tif(x==NULLPTR)\n\t\t\treturn;\n\t\tS[x->val].push_back(make_pair(x->ch[0]->size1+t+1,x->rec));\n\t\t__dfs(x->ch[0],t);\n\t\t__dfs(x->ch[1],t+x->ch[0]->size1+1);\n\t}\n\tvoid output(Node* x=0){\n\t\tif(x==0)\n\t\t\tx=root;\n\t\tif(x==NULLPTR)\n\t\t\treturn;\n\t\toutput(x->ch[0]);\n\t\tcerr<<x->val<<\",\"<<x->rec<<endl;\n\t\toutput(x->ch[1]);\n\t}\n\tvoid calc(){ __dfs(root); s=root->size1; }\n} bst;\n\nstruct SGT {\n\tstatic const ull NOTEXIST=-1145149980;\n\tstruct Node {\n\t\tull ans1,ans2,ans3;\n\t\tull mxv[3],dc[3];\n\t\tNode():mxv{NOTEXIST,NOTEXIST,NOTEXIST},dc{0,0,0} { }\n\t\tfriend Node operator+(const Node& A,const Node& B){\n\t\t\tif(A.mxv[0]==NOTEXIST) return B;\n\t\t\tif(B.mxv[0]==NOTEXIST) return A;\n\t\t\tNode C;\n\t\t\trep(i,0,2) C.mxv[i]=max(A.mxv[i],B.mxv[i]);\n\t\t\tC.ans1=max({A.ans1,B.ans1,A.mxv[0]+B.mxv[1]});\n\t\t\tC.ans2=max({A.ans2,B.ans2,A.mxv[1]+B.mxv[2]});\n\t\t\tC.ans3=max({A.ans3,B.ans3,A.ans1+B.mxv[2],A.mxv[0]+B.ans2});\n\t\t\treturn C;\n\t\t}\n\t\tvoid flush(){\n\t\t\tif(mxv[0]==NOTEXIST)\n\t\t\t\treturn;\n\t\t\trep(i,0,2){\n\t\t\t\tans3+=dc[i];\n\t\t\t\tif(i!=2) ans1+=dc[i];\n\t\t\t\tif(i!=0) ans2+=dc[i];\n\t\t\t\tmxv[i]+=dc[i];\n\t\t\t\tdc[i]=0;\n\t\t\t}\n\t\t}\n\t} T[MAXSPACE];\n\tull tag[MAXSPACE][3];\n\t\n\tinline void pushup(int x){ T[x]=T[x<<1]+T[x<<1|1]; T[x].flush(); }\n\tinline void pushdown(int x){\n\t\tfor(auto y:{x<<1,x<<1|1})\n\t\t\trep(i,0,2){\n\t\t\t\ttag[y][i]+=tag[x][i];\n\t\t\t\tT[y].dc[i]+=tag[x][i];\n\t\t\t\tT[y].flush();\n\t\t\t}\n\t\trep(i,0,2)\n\t\t\ttag[x][i]=0;\n\t}\n\t\n\tvoid __updata1(int x,int l,int r,int L,int R,ull det[3],int rec){\n\t\tif(L<=l&&r<=R){\n\t\t\trep(i,0,2){\n\t\t\t\ttag[x][i]+=det[i]*rec;\n\t\t\t\tT[x].dc[i]+=det[i]*rec;\n\t\t\t}\n\t\t\tT[x].flush();\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tpushdown(x);\n\t\tif(L<=mid) __updata1(x<<1,l,mid,L,R,det,rec);\n\t\tif(mid<R)  __updata1(x<<1|1,mid+1,r,L,R,det,rec);\n\t\tpushup(x);\n\t}\n\tvoid __updata2(int x,int l,int r,int pos,ull det[3],int rec){\n\t\tif(l==r){\n\t\t\t//cerr<<T[x].dc[0]<<\" \"<<T[x].dc[1]<<\" \"<<T[x].dc[2]<<endl;\n\t\t\trep(i,0,2){\n\t\t\t\tif(det[i]>0)\n\t\t\t\t\tT[x].mxv[i]=det[i]*rec;\n\t\t\t\telse T[x].mxv[i]=det[i];\n\t\t\t}\n\t\t\tif(det[0]>0&&det[1]<0){\n\t\t\t\tif(det[0]+det[1]>0)\n\t\t\t\t\tT[x].ans1=(det[0]+det[1])*rec;\n\t\t\t\telse T[x].ans1=det[0]+det[1];\n\t\t\t}\n\t\t\telse T[x].ans1=T[x].mxv[0]+T[x].mxv[1];\n\t\t\tif(det[1]>0&&det[2]<0){\n\t\t\t\tif(det[1]+det[2]>0)\n\t\t\t\t\tT[x].ans2=(det[1]+det[2])*rec;\n\t\t\t\telse T[x].ans2=det[1]+det[2];\n\t\t\t}\n\t\t\telse T[x].ans2=T[x].mxv[1]+T[x].mxv[2];\n\t\t\tif(det[0]>0){\n\t\t\t\t// i must equal to j\n\t\t\t\tif(det[0]+det[1]>0){\n\t\t\t\t\tif(det[0]+det[1]+det[2]>0)\n\t\t\t\t\t\tT[x].ans3=(det[0]+det[1]+det[2])*rec;\n\t\t\t\t\telse T[x].ans3=det[0]+det[1]+det[2];\n\t\t\t\t}\n\t\t\t\telse T[x].ans3=det[0]+det[1]+T[x].mxv[2];\n\t\t\t}\n\t\t\telse T[x].ans3=det[0]+T[x].ans2;\n\t\t\tT[x].flush();\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tpushdown(x);\n\t\tif(pos<=mid) __updata2(x<<1,l,mid,pos,det,rec);\n\t\telse __updata2(x<<1|1,mid+1,r,pos,det,rec);\n\t\tpushup(x);\n\t}\n\tvoid insert(int pos,int rec,int i){\n\t\tull tmp[]={a[i]-b[i],b[i]-c[i],c[i]-a[i]};\n\t\t__updata1(1,1,s,pos+1,s,tmp,rec);\n\t\t__updata2(1,1,s,pos,tmp,rec);\n\t}\t\n\tull getans(){ return T[1].ans3; }\n} sgt;\ntemplate<typename Integer>\ninline void read(Integer& x){\n\tx=0;\n\tregister char c=getchar();\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n}\nsigned main(){\n\tread(n);\n\tbst.insert(0,1,0);\n\tbst.insert(n+1,1,1);\n\trep(i,1,n){\n\t\tull pos,x;\n\t\tread(pos);\n\t\tread(a[i]),read(b[i]),read(c[i]);\n\t\tread(x);\n\t\tsum[i]=sum[i-1]+a[i]*x;\n\t\t\n\t\tbst.insert(i,x,pos+1);\n\t}\n\tbst.calc();\n\tsgt.insert(1,1,0);\n\tull lastans=0,tmp;\n\trep(i,1,n){\n\t\tfor(auto x:S[i])\n\t\t\tsgt.insert(x.first,x.second,i);\n\t\ttmp=sgt.getans()+sum[i];\n\t\tprintf(\"%lld\\n\",tmp-lastans);\n\t\tlastans=tmp;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1672038593,
        "uid": 482921,
        "name": "meizhuhe",
        "ccfLevel": 6,
        "title": "[BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539 \u9898\u89e3"
    },
    {
        "content": "> \u7ef4\u62a4\u4e00\u4e2a\u521d\u59cb\u4e3a\u7a7a\u7684\u96c6\u5408\n>\n> \u4e24\u4e2a\u70b9\u76f8\u540c\u5b9a\u4e49\u4e3a\u8fd9\u4e2a\u70b9\u88ab\u5206\u4e3a$0/1/2/3$\u7c7b\u522b\u65f6\u7684\u4ee3\u4ef7\u76f8\u540c\n>\n> \u652f\u6301\n>\n> - \u5728\u67d0\u4e2a\u4f4d\u7f6e\u540e\u8fde\u7eed\u63d2\u5165$x$\u4e2a\u76f8\u540c\u7684\u70b9\n>\n> - \u6c42\u4ece\u5de6\u5230\u53f3\u7c7b\u522b\u7f16\u53f7\u4e0d\u51cf\u7684\u4ee3\u4ef7\u6700\u5927\u5206\u7c7b\u65b9\u6cd5\n\n\u8003\u8651\u8be2\u95ee\u662f\u5168\u5c40\u6027\u7684\uff0c\u6211\u4eec\u5148\u505a\u4e00\u4e2a\u4ece$1$\u4f4d\u7f6e\u5f00\u59cb\u7684$dp$\n\n\u8bbe$f_{x,k}$\u8868\u793a$x$\u4f4d\u7f6e\u9009$k$\u7c7b\u7684\u6700\u5927\u65b9\u6848\u5219$f_{x,k}=\\max_{j\\leqslant k}{\\{f_{x,j}+val_k\\}}$\n\n\u8003\u8651\u8d77\u6b62\u7aef\u70b9\u4e0e\u9009\u62e9\u4e0d\u5b9a\n\n\u6539\u8bbe$f_{[l,r],[L,R]}$\u8868\u793a\u5bf9\u4e8e$[l,r]$\u4f4d\u7f6e\u7684\u70b9$l$\u9009$L$,$r$\u9009$R$\u7684\u6700\u4f18\u60c5\u51b5\n\n\u6709$\\displaystyle f_{[l,r],[L,R]}=\\max_{mid\\in[L,R]}\\{f_{[l,r'],[L,mid]}+val_{mid}+f_{[l',r],[mid,R]}\\}$\n\n\u56e0\u4e3a\u8981\u63d2\u5165\u6211\u4eec\u7528\u4efb\u610f\u5e73\u8861\u6811\u7ef4\u62a4\u4f4d\u7f6e\u5173\u7cfb\u5e76\u5212\u5206\u533a\u95f4\u7136\u540e$pushup$\u65f6\u8f6c\u79fb\u5373\u53ef\n\n\u6ce8\u610f\u5230\u8fde\u7eed\u7684\u76f8\u540c\u7684\u70b9\u5206\u7c7b\u5fc5\u987b\u4e00\u81f4\uff0c\u6240\u4ee5\u4e0d\u5982\u6346\u7ed1\u6210\u4e00\u4e2a\u70b9\u5e76\u6539\u5199\u4e00\u4e0b\u8d21\u732e\uff0c\u6700\u540e\u63d2\u5165\u65f6\u4e8c\u5206\u5230\u65e0\u6cd5\u5b8c\u5168\u653e\u5230\u4e24\u4e2a\u6574\u5757\u4e2d\u95f4\u5c31\u62c6\u70b9\u5373\u53ef\n\n\u6211\u7528\u7684FHQTreap\n\n```cpp\ninline void pushup(int x){\n\tint i,j,k;for(i=0;i<4;++i)for(j=0;j<4;++j)f[x][i][j]=0;\n\tfor(i=0;i<4;++i)for(j=i;j<4;++j)for(k=j;k<4;++k)f[x][i][k]=max(f[x][i][k],f[*son[x]][i][j]+f[son[x][1]][j][k]+1ll*v[x][j]*cnt[x]);\n\tsum[x]=sum[*son[x]]+sum[son[x][1]]+cnt[x];\n\tsize[x]=size[*son[x]]+size[son[x][1]]+1;\n}\n...\nwhile(n--){\n\t\tp=read(),a=read(),b=read(),c=read(),sz=read();\n\t\tnow=Newnode(a,b,c,a,sz),pos=Find_kth(p);\n\t\tSplit(rt,pos,x,y),Split(x,pos-1,x,z);\n\t\tif(sum[x]+cnt[z]==p)rt=Merge(Merge(x,z),Merge(now,y));\n\t\telse{\n\t\t\tl=Newnode(v[z][0],v[z][1],v[z][2],v[z][3],p-sum[x]);\n\t\t\tr=Newnode(v[z][0],v[z][1],v[z][2],v[z][3],sum[x]+sum[z]-p);\n\t\t\trt=Merge(Merge(x,Merge(l,now)),Merge(r,y));\n\t\t}printf(\"%lld\\n\",f[rt][0][3]-ans),ans=f[rt][0][3];\n\t}\n```",
        "postTime": 1599897786,
        "uid": 40629,
        "name": "zzw4257",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3991 \u3010[BJOI2017]\u55b7\u5f0f\u6c34\u6218\u6539\u3011"
    }
]