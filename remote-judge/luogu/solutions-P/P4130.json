[
    {
        "content": "\u6211\u53bb\uff0c\u8fd9\u9898\u5c45\u7136\u6ca1\u4eba\u5199ODT\uff1f \u867d\u8bf4ODT\u8dd1\u7684\u786e\u5b9e\u6162...\uff08\u6700\u540e\u4e00\u4e2a\u70b9\u5361\u65f6\u8fc7\uff0c960ms+\uff0c\u6240\u4ee5\u53ef\u80fd\u8981\u5361\u70b9\u5e38\u5427\uff09\n\n\n\u4e8e\u662f\u8d21\u732e\u4e00\u53d1ODT\u3002\n\n\u672c\u6765\u60f3\u4e86\u5f88\u4e45\u7684\u6807\u8bb0\u5904\u7406\uff08\u5c31\u662f\u987a\u65f6\u9488\u8f6c\u4ee5\u53ca\u7ffb\u8f6c\uff09\n\n\u540e\u6765\u60f3\u4e0d\u51fa\u6765\uff0c\u672c\u6765\u60f3\u5f03\u5751\u8df3\u7ebf\u6bb5\u6811\u7684\uff0c\u7136\u540e\u60f3\u4e86\u60f3\u501f(co)\u9274(py)\u4e00\u4e0b\u7f51\u4e0a\u7684\u6807\u8bb0\u5904\u7406\u4e0d\u5c31\u884c\u4e86\uff1f\u7ebf\u6bb5\u6811\u64cd\u4f5c\u7528\u73c2\u6735\u8389\u5e26\u4e00\u5e26\uff0c\u79d2\u89e3\u3002\u7136\u540e\u53c8\u809d\u4e86\u5f88\u4e45\u73c2\u6735\u8389\u3002\n\n\u6700\u540e\u8fd8\u662f\u809d\u51fa\u6765\u4e86\uff0c\u5c31\u662f\u4e24\u4e2a\u5c0f\u7ec6\u8282\u6ce8\u610f\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\u5176\u4ed6\u5730\u65b9\u6ca1\u4ec0\u4e48\u4eae\u70b9\uff0c\u90fd\u662f\u73c2\u6735\u8389\u57fa\u64cd\u3002\n\n~~\u6807\u8bb0\u5904\u7406\u4ee5\u53ca\u4fee\u6539\u7684\u8fb9\u754c\u7ef4\u62a4\u5168\u662f\u6284\u7684QvQ~~\n\n\n```\n//by Judge\n#include<set>\n#include<cstdio>\n#include<iostream>\n#define IT set<node>::iterator\nusing namespace std;\nconst int M=2e5+5;\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline int cread(){ char c=getchar(); static int x;\n\twhile(!isupper(c)) c=getchar();\n\tswitch(c){\n\t\tcase 'R': x=1; break;\n\t\tcase 'F': x=2; break;\n\t\tcase 'S': x=3; break;\n\t\tcase 'P': x=4; break;\n\t\tcase 'C': x=5; break;\n\t} c=getchar(); if(isupper(c)) x=6; return x;\n} char sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(int x,char chr='\\n'){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]=chr;\n}\ninline void cmax(int& a,int b) { if(a<b) a=b; }\nstruct node { int l,r; mutable int v; //\u90fd\u662f\u57fa\u64cd\n\tnode(int l,int r=-1,int v=0):l(l),r(r),v(v){} node() {}\n\tbool operator < (const node& b) const { return l<b.l; }\n}; set<node> s; IT it,lit,rit; int n,m,mov,rev;\ninline IT split(int pos) { //\u90fd\u662f\u57fa\u64cd\n\tit=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos) return it;\n\t--it; int l=it->l,r=it->r,v=it->v;\n\ts.erase(it),s.insert(node(l,pos-1,v));\n\treturn s.insert(node(pos,r,v)).first;\n}\ninline void update(int l,int r,int v) { //\u90fd\u662f\u57fa\u64cd\n\trit=split(r+1),lit=split(l);\n\ts.erase(lit,rit),s.insert(node(l,r,v));\n}\ninline int query(int l,int r) { //\u4eba\u7c7b\u7684\u672c\u8d28\u7adf\u7136\u662f____\n\tint res=0,las=0;\n\trit=split(r+1),lit=split(l);\n\tfor(; lit!=rit; las=lit->v,++lit)\n\t\tres+=lit->v!=las;\n\treturn res;\n}\ninline int col(int x) { //\u8fd9\u91cc\u76f4\u63a5split\n\treturn it=split(x),it->v;\n}\ninline int chg(int x) { //\u501f(chao)\u6765\u7684\n\tif(rev) x=n-x+2;\n\tx-=mov;\n\tfor(; x>n; x-=n);\n\tfor(; x<1; x+=n);\n\treturn x;\n}\nint main() {\n\tn=read(),m=read();\n\tfor(int i=1,x; i<=n; ++i)\n\t\tx=read(),s.insert(node(i,i,x));\n\tint op,l,r,k,a,b,ans;\n\tfor(int i=1,m=read(); i<=m; ++i) {\n\t\top=cread();\n\t\tif(op==1) {\n\t\t\tk=read();\n\t\t\tmov+=(rev)?(-k):k;\n\t\t\tfor(; mov>n; mov-=n);\n\t\t\tfor(; mov<0; mov+=n);\n\t\t} else if(op==2) rev^=1;\n\t\telse if(op==3) {\n\t\t\tl=read(),r=read();\n\t\t\tl=chg(l),r=chg(r);\n\t\t\ta=col(l),b=col(r);\n\t\t\tupdate(l,l,b);\n\t\t\tupdate(r,r,a);\n\t\t} else if(op==4) {\n\t\t\tl=read(),r=read(),k=read();\n\t\t\tl=chg(l),r=chg(r);\n\t\t\tif(rev) swap(l,r);\n\t\t\tif(l<=r) update(l,r,k);\n\t\t\telse update(l,n,k),update(1,r,k);\n\t\t} else if(op==5) {\n\t\t\tans=query(1,n);\n\t\t\tif(ans>1) ans-=col(1)==col(n); //\u8fd9\u91cc\u8981\u7279\u5224\u554a\n\t\t\tprint(ans);\n\t\t} else if(op==6) {\n\t\t\tl=read(),r=read();\n\t\t\tl=chg(l),r=chg(r);\n\t\t\tif(rev) swap(l,r);\n\t\t\tif(l<=r) ans=query(l,r);\n\t\t\telse {\n\t\t\t\tans=query(l,n)+query(1,r);\n\t\t\t\tif(ans>1) ans-=col(1)==col(n); //\u8fd9\u91cc\u4e5f\u662f\n\t\t\t}\n\t\t\tprint(ans);\n\t\t}\n\t} return Ot(),0;\n}\n```",
        "postTime": 1541686694,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4130 \u3010[NOI2007]\u9879\u94fe\u5de5\u5382\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7adf\u7136\u6ca1\u6709\u5e73\u8861\u6811\u7684\u9898\u89e3\uff01\n\n\u8003\u8651\u7528Splay\u7ef4\u62a4\u989c\u8272\u5e8f\u5217\u3002\n\n\u7ef4\u62a4\u5de6\u53f3\u7aef\u70b9\u989c\u8272\uff0c\u5f53\u524d\u8282\u70b9\u989c\u8272\uff0c\u5f53\u524d\u533a\u95f4\u7684\u7b54\u6848\u3002\n\n\u5bf9\u4e8eRotate\u64cd\u4f5c\uff0c\u5c31\u662f\u628a\u6700\u540ek\u4e2a\u642c\u5230\u6700\u524d\u9762\u3002\n\n\u5bf9\u4e8eFlip\u64cd\u4f5c\uff0c\u5bf9[2,n]\u8fdb\u884c\u533a\u95f4\u7ffb\u8f6c\uff0c\u6ce8\u610f\u7ef4\u62a4\u7ffb\u8f6c\u540e\u5de6\u53f3\u4e24\u7aef\u70b9\u989c\u8272\u53d8\u5316\u3002\n\n\u5bf9\u4e8eSwap\u64cd\u4f5c\uff0c\u4ea4\u6362\u4e24\u4e2a\u8282\u70b9\u7684\u989c\u8272\uff0c\u628a\u8fd9\u4e24\u4e2a\u8282\u70b9Splay\u5230\u6839\uff0c\u66f4\u65b0\u7956\u5148\u8282\u70b9\u4fe1\u606f\u3002\n\n\u5bf9\u4e8ePaint\u64cd\u4f5c\uff0c\u76f4\u63a5\u63d0\u53d6\u533a\u95f4\u6253\u6807\u8bb0\uff0c\u8981\u6ce8\u610f\u533a\u95f4\u53ef\u80fd\u5206\u6210[1,j],[i,n]\u4e24\u6bb5\u3002\n\n\u5bf9\u4e8eCount\u64cd\u4f5c\uff0c\u63d0\u53d6\u533a\u95f4\u5224\u662f\u5426\u9996\u5c3e\u989c\u8272\u76f8\u540c\u3002\n\n\u5bf9\u4e8eCountSegment\u64cd\u4f5c\uff0c\u63d0\u53d6\u533a\u95f4\uff0c\u82e5\u5206\u6210\u4e24\u6bb5\u8003\u8651\u8fde\u63a5\u5904\u989c\u8272\u662f\u5426\u76f8\u540c\u3002\n\n\u6ce8\u610fSplay\u54e8\u5175\u8282\u70b9\u3002\n\n\u4e0b\u9762\u662f\u6109\u5feb\u7684\u4e0a\u4ee3\u7801\u65f6\u95f4\n\n~~Splay\u8d85\u6162\uff0c\u7ec6\u8282\u8d85\u591a\uff0c\u7801\u91cf\u8d85\u5927~~\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nconst int N = 5e5 + 50;\n\nchar opt[10];\n\nint col[N];\nint n, m, k, i, j;\nint rt, tot;\nstruct node { int son[2], tag, fa, lc, rc, val, col, siz, cov; }t[N];\n\nvoid rev(int x) {\n\tswap(t[x].son[0], t[x].son[1]);\n\tswap(t[x].lc, t[x].rc);\n\tt[x].tag ^= 1;\n}\n\nvoid cover(int x, int color) {\n\tt[x].col = t[x].lc = t[x].rc = color;\n\tt[x].val = 1; t[x].cov = color;\n}\n\nvoid pushdown(int x) {\n\tif(!x) return ;\n\tif(t[x].tag) rev(t[x].son[0]), rev(t[x].son[1]), t[x].tag = 0;\n\tif(t[x].cov != -0x3f3f3f3f) cover(t[x].son[0], t[x].cov), cover(t[x].son[1], t[x].cov), t[x].cov = -0x3f3f3f3f;\n}\n\nvoid updata(int x) {\n\tt[0].lc = t[0].rc = -2;\n\tint ls = t[x].son[0], rs = t[x].son[1];\n\tt[x].val = 1;\n\tt[x].lc = ls ? t[ls].lc : t[x].col;\n\tt[x].rc = rs ? t[rs].rc : t[x].col;\n\tt[x].siz = t[ls].siz + t[rs].siz + 1;\n\tif(ls) t[x].val += t[ls].val;\n\tif(rs) t[x].val += t[rs].val;\n\tt[x].val -= ((t[ls].rc == t[x].col) + (t[rs].lc == t[x].col));\n\t\n}\n\nint build(int l, int r, int f) {\n\tif(l > r) return 0;\n\tif(l == r) {\n\t\tint x = ++ tot;\n\t\tt[x].lc = t[x].rc = t[x].col = col[l]; t[x].fa = f;\n\t\tt[x].cov = -0x3f3f3f3f;\n\t\tt[x].val = 1, t[x].siz = 1; return x;\n\t}\t\n\tint mid = (l + r) >> 1, x = ++ tot;\n\tt[x].col = col[mid], t[x].fa = f, t[x].cov = -0x3f3f3f3f;\n\tt[x].son[0] = build(l, mid - 1, x);\n\tt[x].son[1] = build(mid + 1, r, x);\n\tupdata(x);\n\treturn x;\n}\n\nvoid rotate(int x) {\n\tint y = t[x].fa, z = t[y].fa, tmp = (t[y].son[1] == x);\n\tt[z].son[t[z].son[1] == y] = x, t[x].fa = z;\n\tt[y].son[tmp] = t[x].son[tmp ^ 1], t[t[y].son[tmp]].fa = y;\n\tt[x].son[tmp ^ 1] = y, t[y].fa = x;\n\tupdata(y), updata(x);\n}\n\nvoid splay(int x, int to) {\n\twhile(t[x].fa != to) {\n\t\tint y = t[x].fa, z = t[y].fa;\n\t\tif(z != to) rotate(((t[y].son[0] == x) ^ (t[z].son[0] == y)) ? x : y);\n\t\trotate(x);\n\t}\n\tif(!to) rt = x;\n}\n\nint find(int k) {\n\tint x = rt;\n\twhile(1) {\n\t\tpushdown(x);\n\t\tif(t[t[x].son[0]].siz + 1 < k) {\n\t\t\tk -= (t[t[x].son[0]].siz + 1);\n\t\t\tx = t[x].son[1];\n\t\t}\n\t\telse if(t[t[x].son[0]].siz < k) return x;\n\t\telse x = t[x].son[0];\n\t}\n}\n\nvoid Rotate(int k) {\n\tint num = n - k + 1;\n\tint L = find(num), R = find(n + 2);\n\tsplay(L, 0), splay(R, L);\n\tint x = t[R].son[0];\n\tt[x].fa = 0, t[R].son[0] = 0;\n\tupdata(R), updata(L);\n\tL = find(1), R = find(2);\n\tsplay(L, 0), splay(R, L);\n\tt[R].son[0] = x, t[x].fa = R;\n\tupdata(R), updata(L);\n}\n\nvoid Flip() {\n\tint L = find(2), R = find(n + 2);\n\tsplay(L, 0), splay(R, L);\n\trev(t[R].son[0]);\n\tupdata(R), updata(L);\n}\n\nvoid Swap(int l, int r) {\n\tint L = find(l), R = find(r);\n\tswap(t[L].col, t[R].col);\n\tsplay(L, 0), splay(R, 0);\n}\n\nvoid Paint(int l, int r, int color) {\n\tint L = find(l - 1), R = find(r + 1);\n\tsplay(L, 0), splay(R, L);\n\tcover(t[R].son[0], color);\n\tupdata(R), updata(L);\n}\n\nint CountSegment(int l, int r) {\n\tint L = find(l - 1), R = find(r + 1);\n\tsplay(L, 0), splay(R, L);\n\treturn t[t[R].son[0]].val;\n}\n\nint Count() {\n\tint L = find(2), R = find(n + 1);\n\tint ans = t[rt].val - 2;\n\tif(ans > 1 && t[L].col == t[R].col) -- ans;\n\treturn ans;\n}\n\nint main() {\n\tscanf(\"%d%*d\", &n);\n\tcol[1] = col[n + 2] = -1;\n\tfor(int i = 2; i <= n + 1; ++ i) scanf(\"%d\", &col[i]);\n\trt = build(1, n + 2, 0);\n\tscanf(\"%d\", &m);\n\twhile(m --) {\n\t\tscanf(\"%s\", opt);\n\t\tif(opt[0] == 'R') { scanf(\"%d\", &k); Rotate(k); }\n\t\telse if(opt[0] == 'F') { Flip(); }\n\t\telse if(opt[0] == 'S') { scanf(\"%d%d\", &i, &j); Swap(i + 1, j + 1); }\n\t\telse if(opt[0] == 'P') {\n\t\t\tscanf(\"%d%d%d\", &i, &j, &k);\n\t\t\tif(j >= i) Paint(i + 1, j + 1, k);\n\t\t\telse Paint(2, j + 1, k), Paint(i + 1, n + 1, k);\n\t\t}\n\t\telse if(opt[0] == 'C' && opt[1] == 'S') {\n\t\t\tscanf(\"%d%d\", &i, &j);\n\t\t\tif(j >= i) printf(\"%d\\n\", CountSegment(i + 1, j + 1));\n\t\t\telse {\n\t\t\t\tint ans = CountSegment(2, j + 1);\n\t\t\t\tans += CountSegment(i + 1, n + 1);\n\t\t\t\tint L = find(2), R = find(n + 1);\n\t\t\t\tif(t[L].col == t[R].col) -- ans;\n\t\t\t\tprintf(\"%d\\n\", ans);\n\t\t\t}\n\t\t}\n\t\telse printf(\"%d\\n\", Count());\n\t}\n}\n\n\n```",
        "postTime": 1552356542,
        "uid": 44777,
        "name": "djh123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4130 \u3010[NOI2007]\u9879\u94fe\u5de5\u5382\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4130)\n\n**upd\uff1a\u4fee\u6539\u4e86\u9898\u89e3\u4e2d\u7684\u90e8\u5206\u5185\u5bb9\u3002**\n\n## \u7ebf\u6bb5\u6811\n\n\u5982\u679c\u6ca1\u6709\u65cb\u8f6c\u5bf9\u79f0\u64cd\u4f5c\uff0c\u8fd9\u9898\u5c31\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u6c34\u9898\u4e86\uff0c\u56e0\u6b64\u5148\u4e0d\u8003\u8651\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u53ea\u5728\u610f\u533a\u95f4\u4e0d\u540c\u989c\u8272\u6bb5\u6570\uff0c\u6240\u4ee5\u8fd9\u6bb5\u8fd9\u6bb5\u533a\u95f4\u4e2d\u95f4\u7684\u989c\u8272\u6211\u4eec\u4e0d\u9700\u8981\u77e5\u9053\uff0c\u53ea\u9700\u8981\u77e5\u9053\u5de6\u53f3\u4e24\u7aef\u989c\u8272\u5c31\u53ef\u4ee5\u5408\u5e76\u4e86\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4e00\u4e0b\u51e0\u4e2a\u503c\uff1a\n\n$l,r$ \u8868\u793a\u8fd9\u6bb5\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u989c\u8272\uff0c\n\n$ans$ \u8868\u793a\u8fd9\u6bb5\u533a\u95f4\u5df2\u6709\u7684\u4e0d\u540c\u989c\u8272\u6bb5\u6570\uff0c\n\n$tag$ \u61d2\u6807\u8bb0\uff0c\u7528\u4e8e\u652f\u6301\u533a\u95f4\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\u90a3\u4e48\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u5199\u51fa\u6765\u8fd9\u68f5\u7ebf\u6bb5\u6811\u3002\n\n```cpp\nstruct tree{\n\tint l,r,ans,tag;\n}tr[N<<2];\nvoid pushdown(int o){\n\tif(tr[o].tag==0)return;\n\ttr[ls].l=tr[ls].r=tr[ls].tag=\n\ttr[rs].l=tr[rs].r=tr[rs].tag=tr[o].tag;\n\ttr[ls].ans=tr[rs].ans=1;//\u82e5\u8fd9\u4e2a\u533a\u95f4\u88ab\u6574\u4f53\u8d4b\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5c31\u662f\u4e00\u6574\u4e2a\u989c\u8272\u6bb5\n\ttr[o].tag=0;\n}\nvoid pushup(int o){\n\ttr[o].l=tr[ls].l,tr[o].r=tr[rs].r;\n\ttr[o].ans=tr[ls].ans+tr[rs].ans-(int)(tr[ls].r==tr[rs].l);//\u82e5\u4e2d\u95f4\u4e24\u4e2a\u70b9\uff08\u5de6\u513f\u5b50\u53f3\u7aef\u70b9\u548c\u6709\u513f\u5b50\u5de6\u7aef\u70b9\uff09\u989c\u8272\u76f8\u540c\uff0c\u90a3\u4e48\u5408\u5e76\u65f6\u7b54\u6848-1\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u989c\u8272\u6bb5\u88ab\u7edf\u8ba1\u4e86\u4e24\u6b21\n}\nvoid build(int o,int l,int r){\n\tif(l==r)return (void)(tr[o].l=tr[o].r=a[l],tr[o].ans=1);\n\tint mid=l+r>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\tpushup(o);\n}\nvoid update(int o,int l,int r,int x,int y,int c){\n\tif(x<=l&&r<=y)return (void)(tr[o].l=tr[o].r=tr[o].tag=c,tr[o].ans=1);\n\tint mid=l+r>>1;\n\tpushdown(o);\n\tif(x<=mid)update(ls,l,mid,x,y,c);\n\tif(y>mid)update(rs,mid+1,r,x,y,c);\n\tpushup(o);\n}\ntree query(int o,int l,int r,int x,int y){\n\tif(x<=l&&r<=y)return tr[o];\n\tint mid=l+r>>1;\n\tpushdown(o);\n\ttree v1={0,0,0,0},v2={0,0,0,0};\n\tif(x<=mid)v1=query(ls,l,mid,x,y);\n\tif(y>mid)v2=query(rs,mid+1,r,x,y);\n\treturn (tree){v1.l==0?v2.l:v1.l,v2.r==0?v1.r:v2.r,v1.ans+v2.ans-(v1.r==v2.l),0};\n}\n```\n\n## \u65cb\u8f6c\n\n\u63a5\u4e0b\u6765\u95ee\u9898\u5c31\u662f\u8f6c\u6362\u4e86\u3002\n\n\u65cb\u8f6c\u64cd\u4f5c\u8fd8\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u6574\u4f53\u52a0 $k$\u3002\n\n\u4f46\u5bf9\u79f0\u64cd\u4f5c\u7a0d\u5fae\u6709~~\u4ebf\u70b9\u70b9~~\u9ebb\u70e6\u3002\n\n\u5efa\u8bbe\u5f53\u524d\u6211\u4eec\u65cb\u8f6c\u4e86 $k$ \u4e2a\u5355\u4f4d\uff0c\n\n\u8fdb\u884c\u5bf9\u79f0\u64cd\u4f5c\u540e\uff0c\u5bf9\u4e8e\u539f\u6765\u7684\u4f4d\u7f6e $i$\uff0c\n\n\u65cb\u8f6c\u540e\u662f $(i+k-1)\\%n+1$\uff0c\n\n\u5bf9\u79f0\u540e\u662f $(n-i-k)\\%n+1$\u3002\n\n\u6613\u53d1\u73b0\uff0c\u5bf9\u79f0\u4e00\u6b21\uff0c$i,k$ \u7684\u7cfb\u6570\u5c31\u4e58\u4ee5\u4e86 $-1$,\n\n\u56e0\u6b64\uff0c\u53ea\u8981\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u8868\u793a\u662f\u5426\u5bf9\u79f0\u8fc7\uff0c\u4e00\u4e2a\u8868\u793a\u65cb\u8f6c\u4e86\u591a\u5c11\u4e2a\u5355\u4f4d\u5373\u53ef\u3002\n\n## code\n\n\u6ce8\u610f\u521a\u624d\u662f\u4ece\u539f\u6765\u7684\u4f4d\u7f6e\u8f6c\u6362\u5230\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u800c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u7684\u624d\u505a\u662f\u4ece\u5f53\u524d\u7684\u4f4d\u7f6e\u8f6c\u6362\u5230\u539f\u6765\u7684\u4f4d\u7f6e\u3002\n\n\u8fd8\u8981\u6ce8\u610f\u4e00\u4e0b\uff0c\u67e5\u8be2\u6574\u4e2a\u9879\u94fe\u7684\u65f6\u5019\u6ce8\u610f\u4e24\u8fb9\u7684\u60c5\u51b5\uff0c\u4f46\u5982\u679c\u8fd9\u4e2a\u9879\u94fe\u539f\u672c\u5c31\u662f\u4e00\u4e2a\u5927\u7684\u989c\u8272\u6bb5\u5c31\u4e0d\u80fd $-1$ \u4e86\u3002\n\n\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ls (o<<1)\n#define rs (o<<1|1)\nusing namespace std;\nconst int N=5e5+10;\nint n,c,q,a[N],x,y;\nstruct tree{\n\tint l,r,ans,tag;\n}tr[N<<2];\nchar ch[10];\n//\u7ebf\u6bb5\u6811\u6a21\u677f\uff0c\u4e0a\u9762\u6709\u4e86\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\nint turn(int s){\n\tif(x)s=y-s+2;\n\telse s=s-y;\n\ts=(s%n+n)%n;\n\tif(s==0)s=n;\n\treturn s;\n}\nint main(){\n//\tfreopen(\"data.in\",\"r\",stdin);\n\tscanf(\"%d%d\",&n,&c);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tbuild(1,1,n);\n\tscanf(\"%d\",&q);\n\tfor(int l,r,k;q--;){\n\t\tscanf(\"%s\",ch);\n\t\tif(ch[0]=='R'){\n\t\t\tscanf(\"%d\",&k);\n\t\t\ty=(y+k)%n;\n\t\t}else if(ch[0]=='F')x^=1,y=(n-y+n)%n;\n\t\telse if(ch[0]=='S'){\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tint nl=turn(l);\n\t\t\tint nr=turn(r);\n\t\t\tint cl=query(1,1,n,nl,nl).l;\n\t\t\tint cr=query(1,1,n,nr,nr).l;\n\t\t\tif(cl!=cr)update(1,1,n,nl,nl,cr),update(1,1,n,nr,nr,cl);\n\t\t}else if(ch[0]=='P'){\n\t\t\tscanf(\"%d%d%d\",&l,&r,&k);\n\t\t\tint nl=turn(l);\n\t\t\tint nr=turn(r);\n\t\t\tif(x)swap(nl,nr);\n\t\t\tif(nl<=nr)update(1,1,n,nl,nr,k);\n\t\t\telse update(1,1,n,nl,n,k),update(1,1,n,1,nr,k);\n\t\t}else if(ch[1]=='S'){\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tint nl=turn(l);\n\t\t\tint nr=turn(r);\n\t\t\tif(x)swap(nl,nr);\n\t\t\tint ans=0;\n\t\t\tif(nl<=nr){\n\t\t\t\tans=query(1,1,n,nl,nr).ans;\n//\t\t\t\tif(nl==1&&nr==n)ans-=(int)(tr[1].l==tr[1].r);\n\t\t\t}else{\n\t\t\t\tans=query(1,1,n,nl,n).ans+query(1,1,n,1,nr).ans;\n\t\t\t\tans-=(int)(tr[1].l==tr[1].r);\n//\t\t\t\tif(nr+1==nl)ans-=query(1,1,n,nr,nl).ans-1;\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}else printf(\"%d\\n\",max(tr[1].ans-(int)(tr[1].l==tr[1].r),1));\n\t}\n}\n```\n\n\u603b\u7ed3\uff1a\u672c\u9898\u6700\u4e3b\u8981\u7684\u601d\u60f3\u662f\u7528\u4e24\u4e2a\u53d8\u91cf\u7ef4\u62a4\u6574\u4e2a\u533a\u95f4\u7684\u504f\u79fb\uff0c\u907f\u514d\u5927\u89c4\u6a21\u4fee\u6539\uff0c\u50cf\u8fd9\u6837\u7c7b\u4f3c\u6574\u4f53\u4fee\u6539\u7684\u9898\u76ee\u5c31\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u505a\u4e00\u4e2a\u6574\u4f53\u6807\u8bb0\u5373\u53ef\u3002",
        "postTime": 1636864314,
        "uid": 310802,
        "name": "_Diu_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4130 \u9879\u94fe\u5de5\u5382"
    },
    {
        "content": "\u8fc7\u6765\u770b\u4e86\u4e00\u4e0b\uff0c\u7adf\u7136\u6ca1\u6709\u7528FHQ_Treap\u7684\uff0c\u8d76\u7d27\u6765\u53d1\u4e00\u7bc7\u3002\n# \u9898\u89e3\n\u867d\u8bf4\u8fd9\u662f\u4e00\u4e2a\u73af\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u91c7\u53d6\u94fe\u7684\u65b9\u5f0f\u7ef4\u62a4\uff0c\u6700\u540e\u518d\u7279\u5224\u4e24\u7aef\u7684\u60c5\u51b5\u5373\u53ef\u3002\n\n\u5148\u6765\u5206\u6790\u4e00\u4e0b\u6bcf\u4e2a\u64cd\u4f5c\u7684\u60c5\u51b5\u3002\n\n\u5bf9\u4e8eP\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5206\u4e3a\u524dn-k\u4e2a\u4e0e\u540ek\u4e2a\u4e24\u68f5\u5b50\u6811\uff0c\u5c06\u5176\u53cd\u8fc7\u6765\u5408\u5e76\u5373\u53ef\u3002\n\n\u5bf9\u4e8eF\u64cd\u4f5c\uff0c\u6ca1\u5fc5\u8981\u53bb\u60f3\u90a3\u4e9b\u5947\u5076\u6027\u5224\u65ad\uff0c\u76f4\u63a5\u5c06\u540en-1\u4e2a\u5012\u7f6e\u8fc7\u6765\u5373\u53ef\u3002\n\n\u5bf9\u4e8eS\u64cd\u4f5c\uff0c\u5c06i\u70b9\u4e0ej\u70b9\u5355\u72ec\u5206\u51fa\u6765\uff0c\u4ea4\u6362\u4f4d\u7f6e\u540e\u518d\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5bf9\u4e8eP\u64cd\u4f5c\uff0c\u9700\u5206x\u5c0f\u4e8e\u7b49\u4e8ey\u4e0ex\u5927\u4e8ey\u4e24\u79cd\u60c5\u51b5\u6765\u5224\u65ad\uff0c\u8986\u76d6\u6389\u5206\u51fa\u6765\u7684\u90e8\u5206\u5373\u53ef\u3002\n\n\u5bf9\u4e8eC\u64cd\u4f5c\uff0c\u76f4\u63a5\u8f93\u51fa\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u7684\u548c\u5373\u53ef\u3002\n\n\u5bf9\u4e8eCS\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e5f\u9700\u5206x\u5c0f\u4e8e\u7b49\u4e8ey\u4e0ex\u5927\u4e8ey\u4e24\u79cd\u60c5\u51b5\u6765\u5904\u7406\uff0c\u8f93\u51fa\u9700\u8981\u6c42\u7684\u4e00\u5757\u6216\u4e24\u5757\u548c\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u53cd\u8f6c\u4e0e\u8986\u76d6\u9700\u8981\u7528\u61d2\u6807\u8bb0\u6765\u7ef4\u62a4\uff0c\u5426\u5219\u4f1a\u8d85\u65f6\u3002\n\n\u8bb0\u4f4f\uff01\uff01\uff01\u4e0d\u8981\u5728\u5916\u9762\u5355\u72ec\u5224\u65adC\u6216CS\u4e2d\u9700\u8981\u6c42\u51fa\u6574\u6bb5\u548c\u65f6\u4e24\u7aef\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u5c3d\u91cf\u5728updata\u4e2d\u3002\u7b14\u8005\u56e0\u4e3a\u7684\u7279\u5224WA\u4e86\u534a\u5929\uff0c\u6700\u540e\u5168\u653e\u5728updata\u4e2d\u7ef4\u62a4\u5c31\u6ca1\u4e8b\u513f\u4e86\u3002\n# \u4ee3\u7801\n\u771f\u7684\u96be\u8c03\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<queue>\n#define MAXN 1000005\nusing namespace std;\ntypedef long long LL;\nconst int INF=0x7f7f7f7f;\n#define gc() getchar()\nint son[MAXN][2],tot,rt;\nint rnd[MAXN],siz[MAXN],q,n,c;\nbool tag[MAXN];\nint val[MAXN],ad[MAXN],cov[MAXN];\nint pre[MAXN],re[MAXN],sum[MAXN];\ntemplate<typename _T>\ninline void read(_T &x){\n\t_T f=1;x=0;char s=gc();\n\twhile(s>'9'||s<'0'){if(s=='-')f=-1;s=gc();}\n\twhile(s>='0'&&s<='9'){x=(x<<3)+(x<<1)+(s^48);s=gc();}\n\tx*=f;\n} \ntemplate<typename _T>\nvoid write(_T x)\n{\n\tif(x<0) x=~x+1,putchar('-');\n\tif(x>9) write(x/10);\n\tputchar(x%10+'0');\n}\nint newnode(int v){\n\tint x=++tot;\n\tsiz[x]=1;rnd[x]=rand();sum[x]=1;\n\tpre[x]=re[x]=val[x]=v;cov[x]=0;\n\ttag[x]=son[x][0]=son[x][1]=0;\n\treturn x;\n}\nvoid reverse(int x){\n\tswap(son[x][0],son[x][1]);\n\tswap(pre[x],re[x]);\n\ttag[x]^=1;\n}\nvoid updata(int x){\n\tsiz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n\tif(son[x][0]) pre[x]=pre[son[x][0]];\n\telse pre[x]=val[x];\n\tif(son[x][1]) re[x]=re[son[x][1]];\n\telse re[x]=val[x];\n\tsum[x]=1;\n\tif(re[son[x][0]]!=val[x]) sum[x]+=sum[son[x][0]];\n\telse sum[x]+=sum[son[x][0]]-1;\n\tif(pre[son[x][1]]!=val[x]) sum[x]+=sum[son[x][1]];\n\telse sum[x]+=sum[son[x][1]]-1;\n\tif(siz[x]==n&&pre[x]==re[x]&&sum[x]!=1) sum[x]--;\n}\nvoid covered(int x,int d){\n\tcov[x]=val[x]=d;\n\tpre[x]=re[x]=d;sum[x]=1;\n}\nvoid downdata(int x){\n\tif(tag[x]){\n\t\tif(son[x][0]) reverse(son[x][0]);\n\t\tif(son[x][1]) reverse(son[x][1]);\n\t\ttag[x]^=1;\n\t}\n\tif(cov[x]){\n\t\tif(son[x][0]) covered(son[x][0],cov[x]);\n\t\tif(son[x][1]) covered(son[x][1],cov[x]);\n\t\tcov[x]=0;\n\t}\n}\nvoid build(int &p,int l,int r){\n\tif(l>r) return ;\n\tint mid=(l+r)>>1;p=newnode(ad[mid]);\n\tbuild(son[p][0],l,mid-1);\n\tbuild(son[p][1],mid+1,r);\n\tupdata(p);\n\t//printf(\"%d %d %d\\n\",l,r,minn[p]);\n}\nint merge(int a,int b){\n\tif(!a||!b) return a+b;\n\tdowndata(a);downdata(b);\n\tif(rnd[a]<rnd[b]){\n\t\tson[a][1]=merge(son[a][1],b);\n\t\tupdata(a);return a;\n\t}\t\n\tson[b][0]=merge(a,son[b][0]);\n\tupdata(b);return b;\n}\nvoid split(int now,int k,int &x,int &y){\n\tif(!now){\n\t\tx=y=0;\n\t\treturn ;\n\t}\n\tdowndata(now);\n\tif(k<=siz[son[now][0]]) \n\t\ty=now,split(son[now][0],k,x,son[now][0]);\n\telse x=now,split(son[now][1],k-siz[son[now][0]]-1,son[now][1],y);\n\tupdata(now);\n}\nsigned main()\n{\n\tread(n);read(c);\n\tfor(int i=1;i<=n;i++) read(ad[i]);\n\tbuild(rt,1,n);read(q);\n\tfor(int i=1;i<=q;i++){\n\t\tchar opt[15]={};scanf(\"%s\",opt);\n\t\tif(opt[0]=='F'){\n\t\t\tint xa,ya;split(rt,1,xa,ya);\n\t\t\treverse(ya);rt=merge(xa,ya);\n\t\t}\n\t\tif(opt[0]=='R'){\n\t\t\tint k,xa,ya;read(k);\n\t\t\tsplit(rt,n-k,xa,ya);rt=merge(ya,xa);\n\t\t}\n\t\tif(opt[0]=='S'){\n\t\t\tint x,y,xa,xb,ya,yb,xc,yc,xd,yd;read(x);read(y);\n\t\t\tif(x>y) swap(x,y);\n\t\t\tif(x==y) continue;\n\t\t\tsplit(rt,y,xa,ya);split(xa,y-1,xb,yb);\n\t\t\tsplit(xb,x,xc,yc);split(xc,x-1,xd,yd);\n\t\t\trt=merge(merge(merge(xd,yb),yc),merge(yd,ya));\n\t\t}\n\t\tif(opt[0]=='P'){\n\t\t\tint x,y,z;read(x);read(y);read(z);\n\t\t\tif(x<=y){\n\t\t\t\tint xa,ya,xb,yb;\n\t\t\t\tsplit(rt,y,xa,ya);split(xa,x-1,xb,yb);\n\t\t\t\tcovered(yb,z);rt=merge(merge(xb,yb),ya);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint xa,ya,xb,yb;\n\t\t\t\tsplit(rt,x-1,xa,ya);split(xa,y,xb,yb);\n\t\t\t\tcovered(xb,z);covered(ya,z);rt=merge(merge(xb,yb),ya);\n\t\t\t}\n\t\t}\n\t\tif(opt[0]=='C'&&opt[1]!='S') printf(\"%d\\n\",sum[rt]);\n\t\tif(opt[0]=='C'&&opt[1]=='S'){\n\t\t\tint x,y;read(x);read(y);\n\t\t\tif(x<=y){\n\t\t\t\tint xa,ya,xb,yb;\n\t\t\t\tif(x!=1||y!=n) {\n\t\t\t\t\tsplit(rt,y,xa,ya);split(xa,x-1,xb,yb);\n\t\t\t\t\tprintf(\"%d\\n\",sum[yb]);\n\t\t\t\t\trt=merge(merge(xb,yb),ya);\n\t\t\t\t}\n\t\t\t\telse printf(\"%d\\n\",sum[rt]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint xa,ya,xb,yb;\n\t\t\t\tsplit(rt,x-1,xa,ya);split(xa,y,xb,yb);\n\t\t\t\tif(re[ya]!=pre[xb]) printf(\"%d\\n\",sum[ya]+sum[xb]);\n\t\t\t\telse printf(\"%d\\n\",sum[ya]+sum[xb]-1);\n\t\t\t\trt=merge(merge(xb,yb),ya);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n## \u8c22\u8c22\uff01\uff01\uff01\ncsdn\u539f\u6587\u94fe\u63a5\uff1a[\u9879\u94fe\u5de5\u5382](https://blog.csdn.net/Tan_tan_tann/article/details/103325747)",
        "postTime": 1575105321,
        "uid": 105141,
        "name": "StaroForgin",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4130 \u3010[NOI2007]\u9879\u94fe\u5de5\u5382\u3011"
    },
    {
        "content": "\u9898\u89e3\uff1a\u8fd9\u9053\u9898\u5982\u679c\u6ca1\u6709\u65cb\u8f6c\u548c\u7ffb\u8f6c\u7684\u8bdd\uff0c\u90a3\u8fd9\u5c31\u662f\u4e00\u9053\u88f8\u7684\u7ebf\u6bb5\u6811\u4e86\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u60f3\uff0c\u5982\u4f55\u5c06\u65cb\u8f6c\u548c\u7ffb\u8f6c\u8fc7\u6ee4\u6389\uff0c\u4f7f\u5b83\u771f\u6b63\u6210\u4e3a\u4e00\u9053\u7ebf\u6bb5\u6811\u7684\u9898\u3002 \n\n\u56e0\u4e3a\u65e0\u8bba\u5982\u4f55\u65cb\u8f6c\u6216\u662f\u7ffb\u8f6c\uff0c\u90fd\u4e0d\u4f1a\u5f71\u54cd\u8fd9\u6761\u9879\u94fe\u7684\u4f4d\u7f6e\u53d8\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8bb0\u5f55\u521d\u59cb\u65f6\u4f4d\u4e8e\u4f4d\u7f6e1\u7684\u73e0\u5b50\u5728\u7ecf\u8fc7\u53d8\u6362\u540e\u7684\u4f4d\u7f6e\uff0c\u548c\u8fd9\u4e2a\u9879\u94fe\u662f\u5426\u7ecf\u8fc7\u7ffb\u8f6c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u6bcf\u6b21\u4fee\u6539\u6216\u67e5\u8be2\u65f6\uff0c\u4ece\u73b0\u5728\u7684\u4f4d\u7f6e\u63a8\u7b97\u51fa\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u73e0\u5b50\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u4e4b\u540e\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u67e5\u8be2\u548c\u4fee\u6539\u5373\u53ef\u3002 \n\n\u867d\u7136\u5f88\u597d\u60f3\uff0c\u4f46\u662f\u505a\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u4e00\u5927\u5806\u7684\u5c0f\u7ec6\u8282TvT\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define N 500010\n#define ls rt<<1\n#define rs rt<<1|1\n#define lson l,mid,rt<<1\n#define rson mid+1,r,rt<<1|1\nusing namespace std;\nstruct node\n{\n    int l,r,sum;\n};\nnode f[N<<2];\nint n,m,q,t;\nbool k;\nint lazy[N<<2];\n\nvoid PushUp(node l,node r,node &rt)\n{\n    rt.l=l.l,rt.r=r.r,rt.sum=l.sum+r.sum;\n    if(l.r==r.l)rt.sum--;\n}\n\nvoid PushDown(int rt)\n{\n    if(lazy[rt])\n    {\n        lazy[ls]=lazy[rs]=lazy[rt];\n        f[ls].l=f[rs].l=f[ls].r=f[rs].r=lazy[rt];\n        f[ls].sum=f[rs].sum=1;\n        lazy[rt]=0;\n    }\n}\n\nvoid build(int l,int r,int rt)\n{\n    if(l==r)\n    {\n        scanf(\"%d\",&f[rt].l);\n        f[rt].r=f[rt].l;\n        f[rt].sum=1;\n        return ;\n    }\n    int mid=(l+r)>>1;\n    build(lson);\n    build(rson);\n    PushUp(f[ls],f[rs],f[rt]);\n}\n\nvoid updata(int l,int r,int rt,int L,int R,int c)\n{\n    if(l>=L&&r<=R)\n    {\n        f[rt].l=f[rt].r=c;\n        f[rt].sum=1;\n        lazy[rt]=c;\n        return ;\n    }\n    PushDown(rt);\n    int mid=(l+r)>>1;\n    if(mid>=L)updata(lson,L,R,c);\n    if(mid<R)updata(rson,L,R,c);\n    PushUp(f[ls],f[rs],f[rt]);\n}\n\nnode query(int l,int r,int rt,int L,int R)\n{\n    if(l>=L&&r<=R)return f[rt];\n    PushDown(rt);\n    int mid=(l+r)>>1;\n    node a1,a2,a;\n    if(mid>=L&&mid>=R)return query(lson,L,R);\n    if(mid<R&&mid<L)return query(rson,L,R);\n    if(mid>=L&&mid<R)\n    {\n        a1=query(lson,L,R);\n        a2=query(rson,L,R);\n        PushUp(a1,a2,a);\n    }\n    return a;\n}\n\nvoid doing(int &x,int &y)\n{\n    if(!k)\n    {\n        if(x>=t+1)x=x-t;\n        else x=n-t+x;\n        if(y>=t+1)y=y-t;\n        else y=n-t+y;\n    }else\n    {\n        if(x<=t+1)x=t-x+2;\n        else x=t+n-x+2;\n        if(y<=t+1)y=t-y+2;\n        else y=t+n-y+2;\n    }\n}\n\nint main()\n{\n    cin>>n>>m;\n    build(1,n,1);\n    cin>>q;\n    for(int i=1;i<=q;i++)\n    {\n        int x,y,z;\n        char s[10];\n        scanf(\"%s\",s);\n        if(s[0]=='R')\n        {\n            scanf(\"%d\",&x);\n            t=(t+x)%n;\n        }else if(s[0]=='F')\n        {\n            k=!k;\n            t=(n-t)%n;\n        }else if(s[0]=='S')\n        {\n            scanf(\"%d%d\",&x,&y);\n            doing(x,y);\n            node a1=query(1,n,1,x,x);\n            node a2=query(1,n,1,y,y);\n            updata(1,n,1,x,x,a2.l);\n            updata(1,n,1,y,y,a1.l);\n        }else if(s[0]=='P')\n        {\n            scanf(\"%d%d%d\",&x,&y,&z);\n            doing(x,y);\n            if(k)swap(x,y);\n            if(x<=y)updata(1,n,1,x,y,z);\n            else updata(1,n,1,x,n,z),updata(1,n,1,1,y,z);\n        }else if(s[0]=='C'&&s[1]!='S')\n        {\n            int p=f[1].sum;\n            if(f[1].l==f[1].r)p--;\n            if(p)printf(\"%d\\n\",p);\n            else puts(\"1\");\n        }else\n        {\n            scanf(\"%d%d\",&x,&y);\n            doing(x,y);\n            node s1,s2,p;\n            if(k)swap(x,y);\n            if(x<=y)p=query(1,n,1,x,y);\n            else{\n                s1=query(1,n,1,x,n);\n                s2=query(1,n,1,1,y);\n                if(k)\n                {\n                    swap(s1.l,s1.r);\n                    swap(s2.l,s2.r);\n                    swap(s1,s2);\n                }\n                PushUp(s1,s2,p);\n            }\n            printf(\"%d\\n\",p.sum);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1528894971,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4130 \u3010[NOI2007]\u9879\u94fe\u5de5\u5382\u3011"
    },
    {
        "content": "\t\u4eca\u5929\u662f2018\u5e743\u670812\u65e5\u690d\u6811\u8282\uff0c\u6309\u7167\u4f20\u7edf\uff0c\u505a\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u770b\u5230\u8fd8\u6ca1\u6709\u9898\u89e3\uff0c\u6765\u8d21\u732e\u4e00\u53d1\uff08~~\u9003~~\uff09\n    odk\u90a3\u4e48\u8fd9\u4e2a\u9898\u770b\u4e00\u773c\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u5e76\u6ca1\u6709\u6539\u53d8\u6240\u6709\u70b9\u5728\u6574\u4e2a\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u4e24\u4e2a\u53d8\u91cf\uff0c\uff08\u6211\u5f00\u7684\u662f\uff09k\u8bb0\u5f55\u6574\u4e2a\u5e8f\u5217\u5de6\u79fb\u4e86\u51e0\u4f4d\uff0crev\uff08bool\uff09\u8bb0\u5f55\u662f\u5426\u7ffb\u8f6c\uff0c\u6211\u4eec\u5728\u6240\u6709\u7684\u64cd\u4f5c\u4e2d\u53ea\u8981\u901a\u8fc7k\u548crev\u627e\u5230\u5b83\u5728\u539f\u6765\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u8fdb\u884c\u6240\u8ff0\u64cd\u4f5c\u5373\u53ef\u3002\n    \u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u7684F\u64cd\u4f5c\uff0crev^=1\u5373\u53ef\uff1b\n    \u5bf9\u4e8e\u6240\u6709\u7684M\u64cd\u4f5c\uff08\u8be6\u60c5\u8bf7\u89c1\u4ee3\u7801\u2026\u8f93\u5165\u7684\u6570\u636e\u662fx\uff09\n     if(rev) k-=x\uff1belse k+=x;\n     \u5f88\u597d\u7136\u540e\u901a\u8fc7\u4e00\u4e9b\u52a0\u51cfn\u7684\u64cd\u4f5c\u4f7f\u5b83\u7684\u503c\u57281\u5230n\u4e2d\u5373\u53ef\uff08\u8bf7\u770b\u4ee3\u7801\uff09\n    \u5bf9\u4e8e\u5176\u4ed6\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u53ef\u4ee5\u53c2\u89c1   P2486\u67d3\u8272\u8fd9\u9053\u9898\uff0c\u8fd9\u91cc\u4e0d\u591a\u8d58\u8ff0\n    \u4f46\u662f\u6b64\u9898\u8bb8\u6ce8\u610f\u4e00\u4e2a\u5751\u70b9\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u5e8f\u5217\u5176\u5b9e\u662f\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u67e5\u8be2\u5230\u7b54\u6848\u540e\u8981\u5224\u65ad\u662f\u5426\u6839\u8282\u70b9\u7684\u5de6\u989c\u8272\u4e0e\u53f3\u989c\u8272\u76f8\u540c\uff0c\u7b49\u6548\u4e8e\u5224\u65ad\u73af\u9996\u548c\u73af\u5c3e\u662f\u5426\u76f8\u7b49\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u5230\u7684\u7b54\u6848\u51cf\u4e00\n    \u5728\u5f97\u5230\u4e86\u8f93\u5165\u7684\u533a\u95f4\uff08x\uff0cy\uff09\u4e4b\u540e\u6211\u4eec\u8fdb\u884c\u64cd\u4f5c\u5f97\u5230\u4e86\u8fd9\u4e24\u4e2a\u70b9\u5728\u539f\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5728\u8fd9\u91cc\u5751\u70b9\u53c8\u6765\u4e86\uff0c\u56e0\u4e3a\u64cd\u4f5c\u4e4b\u540e\u662f\u53ef\u4ee5\u5f97\u5230x>y\u7684\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\uff08\u8bf7\u770b\u4ee3\u7801\uff09\u662f\u5426\u5c06\u4e00\u4e2a\u533a\u95f4\u62c6\u6210\u4e24\u4e2a\uff08\u5c31\u662f\u73af\u62c9\uff09\uff08P.S.\u5927\u5bb6\u53ef\u4ee5\u770b\u5230\u6211\u88ab\u8fd9\u4e2a\u4e1c\u897f\u5751\u4e86\u597d\u4e45\u3002\u3002\u3002\u3002\uff09\n    \u8bf7\u770b\u4ee3\u7801\u5427\uff08\u611f\u89c9\u5947\u4e11\u65e0\u6bd4\u2026\u2026\u849f\u84bb\u745f\u745f\u53d1\u6296\u2026\u2026\uff09\n    \n    ```cpp\n \t#include <cstdio>\n\tusing namespace std;\n\tconst int N=500005;\n\tint n,C,Q,a[N]={},k=0;\n\tstruct node{\n\t\tint sum,lC,rC,col;\n\t}s[N<<2];\n\tbool rev=0;\n\tinline void read(int &X){\n\t\tX=0;char ch=0;int op=1;\n\t\tfor(;ch>'9'||ch<'0';){if(ch=='-')op=-1;ch=getchar();}\n\t\tfor(;ch>='0'&&ch<='9';){X=(X<<3)+(X<<1)+ch-48;ch=getchar();}\n\tX*=op;\n\t}\n\tinline void swap(int &x,int &y){int _=x;x=y;y=_;}\n\tinline void Seg(int &x){\n\t\tif(rev) x=n-x+2;\n\tx-=k;\n\tfor(;x<1;x+=n);\n\tfor(;x>n;x-=n);\n\t}\n\tinline void down(int p){\n\t\tif(s[p].col){\n\t\ts[p*2].lC=s[p*2].rC=s[p*2+1].lC=s[p*2+1].rC=s[p*2].col=s[p*2+1].col=s[p].col;\n\t\ts[p*2].sum=s[p*2+1].sum=1;\n\t\ts[p].col=0;\n\t}\n\t}\n\tinline void up(int p){\n\t\tif(p){\n\t//\t\tdown(p*2);\n\t//\t\tdown(p*2+1);\n\t\t\ts[p].sum=s[p*2].sum+s[p*2+1].sum;\n\t\t\tif(s[p*2].rC==s[p*2+1].lC)s[p].sum--;\n\t\t\ts[p].lC=s[p*2].lC;\n\t\t\ts[p].rC=s[p*2+1].rC;\n\t\t}\n\t}\t\n\tvoid build(int p,int l,int r){\n\t\ts[p].col=0;\n\t\tif(l==r){\n\t\t\ts[p].lC=s[p].rC=a[l];\n\t\t\ts[p].sum=1;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)/2;\n\t\tbuild(p*2,l,mid);\n\t\tbuild(p*2+1,mid+1,r);\n\t\tup(p);\n\t}\n\tvoid modify(int p,int l,int r,int x,int y,int v){\n\t\tif(x<=l&&y>=r){\n\t\t\ts[p].col=v;\n\t\t\ts[p].lC=s[p].rC=v;\n\t\t\ts[p].sum=1;\n\t\t\treturn;\n\t\t}\n\t\tdown(p);\n\t\tint mid=(l+r)/2;\n\t\tif(x<=mid)modify(p*2,l,mid,x,y,v);\n\t\tif(y>mid)modify(p*2+1,mid+1,r,x,y,v);\n\t\tup(p);\n\t}\n\tint query(int p,int l,int r,int x,int y){\n\t\tif(x<=l&&y>=r)return s[p].sum;\n\t\tdown(p);\n\t\tint mid=(l+r)/2,res=0;\n\t\tif(x<=mid)res+=query(p*2,l,mid,x,y);\n\t\tif(y>mid)res+=query(p*2+1,mid+1,r,x,y);\n\t\tif(x<=mid&&y>mid)if(s[p*2].rC==s[p*2+1].lC)return res-1;\n\t\treturn res;\n\t}\n\tint queryC(int p,int l,int r,int x){\n\t\tif(l==r&&l==x)return s[p].lC;\n\t\tdown(p);\n\t\tint mid=(l+r)/2;\n\t\tif(x<=mid)return queryC(p*2,l,mid,x);\n\t\telse return queryC(p*2+1,mid+1,r,x);\n\t}\n\tint main(){\n\t\tread(n);read(C);\n\t\tfor(int i=1;i<=n;i++)read(a[i]);\n\t\tbuild(1,1,n);\n\t\tread(Q);\n\t\tfor(char op[5];Q--;){\n\t\t\tscanf(\"%s\",op);\n\t\t\tif(op[0]=='C')\n\t\t\tif(op[1]){\n\t\t\t\tint x,y;\n\t\t\t\tread(x);read(y);\n\t\t\t\tSeg(y);\n\t\t\t\tSeg(x);\n\t\t\t\tif(rev)swap(x,y);\n\t\t\t\tif(x<=y){\n\t\t\t\t\tint ans=query(1,1,n,x,y);\n\t\t\t\t\tif(x==1&&y==n&&s[1].lC==s[1].rC&&ans>1)ans--;\n\t\t\t\t\tprintf(\"%d\\n\",ans);\n\t\t\t\t}else{\n\t\t\t\t\tint ans=query(1,1,n,x,n)+query(1,1,n,1,y);\n\t\t\t\t\tif(s[1].lC==s[1].rC)ans--;\n\t\t\t\t\tprintf(\"%d\\n\",ans);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tint ans=query(1,1,n,1,n);\n\t\t\t\tif(s[1].lC==s[1].rC&&ans>1)ans--;\n\t\t\t\tprintf(\"%d\\n\",ans);\n\t\t\t}\n\t\t\telse if(op[0]=='R'){\n\t\t\t\tint x;\n\t\t\t\tread(x);\n\t\t\t\tif(rev)k-=x;\n\t\t\t\telse k+=x;\n\t\t\t\tfor(;k<0;k+=n);\n\t\t\t\tfor(;k>n;k-=n);\n\t\t\t}else if(op[0]=='F')rev^=1;\n\t\t\t else if(op[0]=='S'){\n\t\t\t \tint x,y,xC,yC;\n\t\t\t \tread(x);read(y);\n\t\t\t \tSeg(x);\n\t\t\t\tSeg(y);\n\t\t\t \txC=queryC(1,1,n,x);\n\t\t\t \tyC=queryC(1,1,n,y);\n\t\t\t \tmodify(1,1,n,x,x,yC);\n\t\t\t \tmodify(1,1,n,y,y,xC);\n\t\t\t }else if(op[0]=='P'){\n\t\t\t \tint x,y,v;\n\t\t\t \tread(x);read(y);read(v);\n\t\t\t \tSeg(y);\n\t\t\t\tSeg(x);\n\t\t\t\tif(rev)swap(x,y);\n\t\t\t\tif(x<=y)modify(1,1,n,x,y,v);\n\t\t\t\telse modify(1,1,n,x,n,v),modify(1,1,n,1,y,v);\n\t\t\t }\n\t\t}\n\t\treturn 0;\n\t}\n```\n    \n\n",
        "postTime": 1520860525,
        "uid": 60553,
        "name": "CzxingcHen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4130 \u3010[NOI2007]\u9879\u94fe\u5de5\u5382\u3011"
    },
    {
        "content": "# Solution\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u9898\u76ee\u4e2d\u7684\u64cd\u4f5c\u5206\u4e3a\u4e24\u79cd\uff0c\u540e\u56db\u4e2a\u64cd\u4f5c\u662f\u7ecf\u5178\u7684\u7ebf\u6bb5\u6811\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u5bf9\u4e8e\u65cb\u8f6c\u64cd\u4f5c\uff0c\u6211\u4eec\u53d1\u73b0 $n$ \u9897\u73e0\u5b50\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u4f1a\u6539\u53d8\uff0c\u5373\u67e5\u8be2\u7684\u7b54\u6848\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u64cd\u4f5c\u65f6\u53ef\u4ee5\u5728\u539f\u6765\u7684\u6570\u5217\u4e0a\u8fdb\u884c\u4fee\u6539\u3002\u8003\u8651\u8bb0\u5f55\u4e00\u4e2a $delta$\uff0c\u8868\u793a\u5f53\u524d\u65cb\u8f6c\u4e86\u591a\u5c11\u4e2a\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u65cb\u8f6c\u5c06 $delta+k$\uff0c\u4e4b\u540e\u7684\u6bcf\u6b21\u64cd\u4f5c\u5c06\u4f4d\u7f6e\u7f16\u53f7\u6539\u53d8\u4e3a\u5728\u539f\u5e8f\u5217\u4e0a\u5bf9\u5e94\u7684\u7f16\u53f7\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u8fdb\u884c\u4e24\u6b21\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u5c31\u76f8\u5f53\u4e8e\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6253\u4e00\u4e2a\u7ffb\u8f6c\u6807\u8bb0 $flip$\uff0c\u6bcf\u6b21\u7ffb\u8f6c\u65f6\u5c06 $flip \\oplus 1$\u3002\u5bf9\u4e8e\u7ffb\u8f6c\u4e0b\u7684\u6bcf\u6b21\u65cb\u8f6c\u64cd\u4f5c\uff0c\u5176\u5b9e\u76f8\u5f53\u4e8e\u5bf9\u539f\u6765\u7684\u5e8f\u5217\u9006\u65f6\u9488\u8fdb\u884c\u65cb\u8f6c\uff0c\u6240\u4ee5\u8981\u5c06 $delta-k$\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u53bb\u627e\u8981\u64cd\u4f5c\u7684\u7f16\u53f7\u5728\u539f\u5e8f\u5217\u4e0a\u5bf9\u5e94\u7684\u7f16\u53f7\uff0c\u5982\u679c\u5f53\u524d\u8fdb\u884c\u4e86\u7ffb\u8f6c\uff0c\u90a3\u4e48\u8981\u5c06 $x$ \u53d8\u4e3a $n-x+2$\u3002\u4e4b\u540e\u518d\u628a $x$ \u53d8\u4e3a $x-delta$\uff0c\u5982\u679c\u5904\u7406\u540e\u7684\u7f16\u53f7\u5927\u4e8e $n$ \u6216\u8005\u5c0f\u4e8e $1$ \uff0c\u90a3\u4e48\u5c31\u8981\u76f8\u5e94\u7684 $+n$ \u6216 $-n$\u3002\n\n\u7279\u6b8a\u7684\uff0c\u5bf9\u4e8e\u533a\u95f4\u64cd\u4f5c\uff0c\u5982\u679c\u5f53\u524d\u8fdb\u884c\u4e86\u53cd\u8f6c\u64cd\u4f5c\uff0c\u90a3\u4e48\u9700\u8981\u5c06 $x$ \u548c $y$ \u4ea4\u6362\u3002\n\n# Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=500005;\nint n,q,delta,flip;\nint lyhqwq;\nint c[N];\nint t(int x){\n\tif(flip) x=n-x+2;\n\tx-=delta;\n\twhile(x<1) x+=n;\n\twhile(x>n) x-=n;\n\treturn x;\n}\nnamespace SegTree{\n\tstruct node{\n\t\tint l,r;\n\t\tint ans;\n\t\tint lco,rco;\n\t\tint lazy;\n\t}tree[N<<2];\n\tnode operator + (node a,node b){\n\t\tnode c;\n\t\tc.l=a.l;\n\t\tc.r=b.r;\n\t\tc.lco=a.lco;\n\t\tc.rco=b.rco;\n\t\tc.ans=a.ans+b.ans-(a.rco==b.lco);\n\t\treturn c;\n\t}\n\tint lc(int x){return x<<1;}\n\tint rc(int x){return x<<1|1;}\n\tvoid push_up(int rt){\n\t\ttree[rt].lco=tree[lc(rt)].lco;\n\t\ttree[rt].rco=tree[rc(rt)].rco;\n\t\ttree[rt].ans=tree[lc(rt)].ans+tree[rc(rt)].ans-(tree[lc(rt)].rco==tree[rc(rt)].lco);\n\t}\n\tvoid push_down(int rt){\n\t\tif(tree[rt].lazy){\n\t\t\ttree[lc(rt)].lazy=tree[rc(rt)].lazy=tree[rt].lazy;\n\t\t\ttree[lc(rt)].ans=tree[rc(rt)].ans=1;\n\t\t\ttree[lc(rt)].lco=tree[lc(rt)].rco=tree[rt].lazy;\n\t\t\ttree[rc(rt)].lco=tree[rc(rt)].rco=tree[rt].lazy;\n\t\t}\n\t\ttree[rt].lazy=0;\n\t}\n\tvoid build(int rt,int l,int r){\n\t\ttree[rt].l=l,tree[rt].r=r;\n\t\tif(l==r){\n\t\t\ttree[rt].ans=1;\n\t\t\ttree[rt].lco=tree[rt].rco=c[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(lc(rt),l,mid);\n\t\tbuild(rc(rt),mid+1,r);\n\t\tpush_up(rt);\n\t}\n\tvoid update(int rt,int L,int R,int v){\n\t\tint l=tree[rt].l,r=tree[rt].r;\n\t\tif(L<=l&&r<=R){\n\t\t\ttree[rt].ans=1;\n\t\t\ttree[rt].lco=tree[rt].rco=v;\n\t\t\ttree[rt].lazy=v;\n\t\t\treturn;\n\t\t}\n\t\tpush_down(rt);\n\t\tint mid=(l+r)>>1;\n\t\tif(L<=mid) update(lc(rt),L,R,v);\n\t\tif(R>mid) update(rc(rt),L,R,v);\n\t\tpush_up(rt); \n\t}\n\tnode query(int rt,int L,int R){\n\t\tint l=tree[rt].l,r=tree[rt].r;\n\t\tif(L<=l&&r<=R){\n\t\t\treturn tree[rt];\n\t\t}\n\t\tpush_down(rt);\n\t\tint mid=(l+r)>>1;\n\t\tif(R<=mid) return query(lc(rt),L,R);\n\t\tif(L>mid) return query(rc(rt),L,R);\n\t\treturn query(lc(rt),L,R)+query(rc(rt),L,R);\n\t}\n}\nusing namespace SegTree;\nint main(){\n\tscanf(\"%d%d\",&n,&lyhqwq);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&c[i]);\n\tbuild(1,1,n);\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tstring str;\n\t\tcin>>str;\n\t\tif(str==\"R\"){\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tif(flip)  delta-=x;\n\t\t\telse delta+=x;\n\t\t\twhile(delta<1) delta+=n;\n\t\t\twhile(delta>n) delta-=n; \n\t\t}\n\t\tif(str==\"F\") flip^=1;\n\t\tif(str==\"S\"){\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tx=t(x);\n\t\t\ty=t(y);\n\t\t\tif(flip) swap(x,y);\n\t\t\tint cx=query(1,x,x).lco,cy=query(1,y,y).lco;\n\t\t\tupdate(1,x,x,cy);\n\t\t\tupdate(1,y,y,cx);\n\t\t}\n\t\tif(str==\"P\"){\n\t\t\tint x,y,k;\n\t\t\tscanf(\"%d%d%d\",&x,&y,&k);\n\t\t\tx=t(x);\n\t\t\ty=t(y);\n\t\t\tif(flip) swap(x,y);\n\t\t\tif(y<x){\n\t\t\t\tupdate(1,x,n,k);\n\t\t\t\tupdate(1,1,y,k);\n\t\t\t}\n\t\t\telse update(1,x,y,k);\n\t\t}\n\t\tif(str==\"C\") printf(\"%d\\n\",max(1,query(1,1,n).ans-(query(1,1,1).lco==query(1,n,n).lco)));\n\t\tif(str==\"CS\"){\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tx=t(x);\n\t\t\ty=t(y);\n\t\t\tif(flip) swap(x,y);\n\t\t\tif(y<x) printf(\"%d\\n\",(query(1,x,n)+query(1,1,y)).ans);\n\t\t\telse printf(\"%d\\n\",query(1,x,y).ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1684552604,
        "uid": 100690,
        "name": "kawaii__yuyu",
        "ccfLevel": 0,
        "title": "P4130 [NOI2007] \u9879\u94fe\u5de5\u5382 \u9898\u89e3"
    },
    {
        "content": "# P4130 [NOI2007] \u9879\u94fe\u5de5\u5382 \u9898\u89e3\n\n## \u9898\u610f\u56de\u987e\n\n\u5bf9\u4e8e\u957f\u5ea6\u4e3a $ n $ \u7684\u73af\u5f62\u5e8f\u5217 $ a $\uff0c\u4f60\u9700\u8981\u652f\u6301\u987a\u65f6\u9488\u65cb\u8f6c\u82e5\u5e72\u683c\u3001$ [2,n] $ \u7ffb\u8f6c\u3001\u4e24\u70b9\u4ea4\u6362\u3001\u533a\u95f4\u67d3\u8272\u3001\u67e5\u8be2\u73af\u4e0a\u540c\u8272\u5757\u6570\u3001\u67e5\u8be2\u533a\u95f4\u540c\u8272\u5757\u6570\u51e0\u79cd\u64cd\u4f5c\u5171 $ q $ \u6b21\u3002\n\n$ 1 \\le n \\le 5 \\times 10^5 $\uff0c$ 1 \\le q \\le 5 \\times 10^5 $\u3002\n\n## \u5206\u6790\n\n\u5148\u4e0d\u8003\u8651\u65cb\u8f6c\u3001\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u5355\u8003\u8651\u4ea4\u6362\u3001\u67d3\u8272\u3001\u533a\u95f4\u6216\u5168\u73af\u540c\u8272\u5757\u6570\u67e5\u8be2\u51e0\u79cd\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u4fe1\u606f\u4e3a $ (st,ed,ct) $\uff0c\u5206\u522b\u4ee3\u8868\u533a\u95f4\u8d77\u59cb\u989c\u8272\u3001\u7ed3\u675f\u989c\u8272\u3001\u989c\u8272\u4e2a\u6570\u3002\n\n\u5408\u5e76\u65b9\u5f0f\u663e\u7136\u4e3a $ (st_{fa},ed_{fa},ct_{fa})=(st_{l},ed_{r},ct_{l}+ct_{r}-[st_{r}=ed_{l}]) $\u3002\n\n\u6ce8\u610f\u7279\u5224\u73af\u4e0a\u53ea\u6709\u4e00\u79cd\u989c\u8272\u7684\u60c5\u51b5\u3002\n\n\u533a\u95f4\u8986\u76d6\u6253\u61d2\u6807\u8bb0\u5373\u53ef\u3002\n\n\u8003\u8651\u52a0\u5165\u65cb\u8f6c\u3001\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u65cb\u8f6c\u64cd\u4f5c\uff0c\u65e0\u9700\u771f\u6b63\u65cb\u8f6c\u5e8f\u5217\uff0c\u800c\u53ef\u4ee5\u5c06\u64cd\u4f5c\u533a\u95f4\u5e73\u79fb\uff1b\u5bf9\u4e8e\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u5c06\u64cd\u4f5c\u533a\u95f4\u5bf9\u79f0\u5373\u53ef\u3002\n\n\u5f53\u4e24\u79cd\u64cd\u4f5c\u540c\u65f6\u5b58\u5728\u65f6\uff0c\u6211\u4eec\u5148\u7ffb\u8f6c\u518d\u65cb\u8f6c\uff0c\u65cb\u8f6c\u5728\u7ffb\u8f6c\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u3002\n\n## AC \u4ee3\u7801\n\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N = 5e5 + 5;\nint n, m, q;\nint a[N];\nstruct node {\n\tint st;\n\tint ed;\n\tint ct;\n} d[N * 4];\nint c[N * 4];\nnode make(int s0, int e0, int c0) {\n\tnode res;\n\tres.st = s0;\n\tres.ed = e0;\n\tres.ct = c0;\n\treturn res;\n}\nvoid out(node p1) {\n\tprintf(\"(start=%d,end=%d,color=%d)\\n\", p1.st, p1.ed, p1.ct);\n}\nnode operator+(node p1, node p2) {\n\tnode res;\n\tres.ct = p1.ct + p2.ct - (p1.ed == p2.st);\n\tres.st = p1.st;\n\tres.ed = p2.ed;\n\tif(p1.st == 0 && p1.ed == 0 && p1.ct == 0) {\n\t\treturn p2;\n\t}\n\t//out(p1);cout<<\"+\";out(p2);cout<<\"=\";out(res);\n\treturn res;\n}\nvoid build(int s, int t, int p) {\n\tif(s == t) {\n\t\td[p] = make(a[s], a[s], 1);\n\t\treturn;\n\t}\n\tint mid = (s + t) >> 1;\n\tbuild(s, mid, p * 2);\n\tbuild(mid + 1, t, p * 2 + 1);\n\td[p] = d[p * 2] + d[p * 2 + 1]; \n}\nvoid pushdown(int s, int t, int p) {\n\tif(c[p] != 0) {\n\t\td[p * 2] = make(c[p], c[p], 1);\n\t\td[p * 2 + 1] = make(c[p], c[p], 1);\n\t\tc[p * 2] = c[p];\n\t\tc[p * 2 + 1] = c[p];\n\t\tc[p] = 0;\n\t}\n}\nvoid update(int l, int r, int v, int s, int t, int p) {\n\tif(l <= s && t <= r) {\n\t\tc[p] = v;\n\t\td[p] = make(v, v, 1);\n\t\treturn;\n\t}\n\tpushdown(s, t, p);\n\tint mid = (s + t) >> 1;\n\tif(l <= mid) {\n\t\tupdate(l, r, v, s, mid, p * 2);\n\t}\n\tif(mid < r) {\n\t\tupdate(l, r, v, mid + 1, t, p * 2 + 1);\n\t}\n\td[p] = d[p * 2] + d[p * 2 + 1];\n}\nnode query(int l, int r, int s, int t, int p) {\n\tif(l <= s && t <= r) {\n\t\treturn d[p];\n\t}\n\tpushdown(s, t, p);\n\tint mid = (s + t) >> 1;\n\tnode res = make(0, 0, 0);\n\tif(l <= mid) {\n\t\tres = res + query(l, r, s, mid, p * 2);\n\t}\n\tif(mid < r) {\n\t\tres = res + query(l, r, mid + 1, t, p * 2 + 1);\n\t}\n\td[p] = d[p * 2] + d[p * 2 + 1];\n\treturn res;\n}\nint main() {\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n; i++) {\n\t\tcin >> a[i];\n\t}\n\tbuild(1, n, 1);\n\tstring str;\n\tint l, r, x;\n\tint rot = 0;\n\tint pls = 0;\n\tcin >> q;\n\tfor(int i = 1; i <= q; i++) {\n\t\tcin >> str;\n\t\tif(str == \"R\") {\n\t\t\tcin >> l;\n\t\t\tif(rot) {\n\t\t\t\tpls -= l;\n\t\t\t} else {\n\t\t\t\tpls += l;\n\t\t\t}\n\t\t\tpls = (pls % n + n) % n;\n\t\t} else if(str == \"F\") {\n\t\t\trot = rot ^ 1;\n\t\t} else if(str == \"S\") {\n\t\t\tcin >> l >> r;\n\t\t\tif(rot) {\n\t\t\t\tl = n + 2 - l;\n\t\t\t\tr = n + 2 - r;\n\t\t\t\tswap(l, r);\n\t\t\t\tl = (l % n + n) % n;\n\t\t\t\tr = (r % n + n) % n;\n\t\t\t}\n\t\t\tl = ((l - 1 - pls) % n + n) % n + 1;\n\t\t\tr = ((r - 1 - pls) % n + n) % n + 1;\n\t\t\tint col1 = query(l, l, 1, n, 1).st;\n\t\t\tint col2 = query(r, r, 1, n, 1).st;\n\t\t\tupdate(l, l, col2, 1, n, 1);\n\t\t\tupdate(r, r, col1, 1, n, 1);\n\t\t} else if(str == \"P\") {\n\t\t\tcin >> l >> r >> x;\n\t\t\t\n\t\t\tif(rot) {\n\t\t\t\tl = n + 2 - l;\n\t\t\t\tr = n + 2 - r;\n\t\t\t\tswap(l, r);\n\t\t\t\tl = (l % n + n) % n;\n\t\t\t\tr = (r % n + n) % n;\n\t\t\t}\n\t\t\tl = ((l - 1 - pls) % n + n) % n + 1;\n\t\t\tr = ((r - 1 - pls) % n + n) % n + 1;\n\t\t\tif(l <= r) {\n\t\t\t\tupdate(l, r, x, 1, n, 1);\n\t\t\t} else {\n\t\t\t\tupdate(l, n, x, 1, n, 1);\n\t\t\t\tupdate(1, r, x, 1, n, 1);\n\t\t\t}\n\t\t} else if(str == \"C\") {\n\t\t\tnode ans = query(1, n, 1, n, 1);\n\t\t\tif(ans.st == ans.ed) {\n\t\t\t\tif(ans.ct > 1) {\n\t\t\t\t\tans.ct--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout << ans.ct << endl;\n\t\t} else if(str == \"CS\") {\n\t\t\tcin >> l >> r;\n\t\t\t\n\t\t\tif(rot) {\n\t\t\t\tl = n + 2 - l;\n\t\t\t\tr = n + 2 - r;\n\t\t\t\tswap(l, r);\n\t\t\t\tl = (l % n + n) % n;\n\t\t\t\tr = (r % n + n) % n;\n\t\t\t}\n\t\t\tl = ((l - 1 - pls) % n + n) % n + 1;\n\t\t\tr = ((r - 1 - pls) % n + n) % n + 1;\n\t\t\t//cout << l << \"~\" << r << endl;\n\t\t\tif(l <= r) {\n\t\t\t\tcout << query(l, r, 1, n, 1).ct << endl;\n\t\t\t} else {\n\t\t\t\tcout << (query(l, n, 1, n, 1) + query(1, r, 1, n, 1)).ct << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## \u603b\u7ed3\u4e0e\u8bc4\u4ef7\n\n\u5f88\u5de7\u5999\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u628a\u96be\u4ee5\u89e3\u51b3\u7684\u64cd\u4f5c\u8bb0\u5f55\u4e0b\u6765\uff0c\u8003\u8651\u5bf9\u5176\u4ed6\u64cd\u4f5c\u7684\u5f71\u54cd\u3002\n\n\u7801\u91cf\u7565\u663e\u6076\u5fc3\u3002\n\n\u611f\u8c22\u673a\u623f\u540c\u7ea7\u5927\u4f6c lyhqwq \u5e2e\u6211\u8c03\u4e86\u4ee3\u7801\uff08",
        "postTime": 1684513950,
        "uid": 420998,
        "name": "Kevin0501",
        "ccfLevel": 7,
        "title": "P4130 \u9898\u89e3"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u3002\u603b\u4f53\u601d\u8def\u4e3a\u8bb0\u5f55\u4e00\u4e0b rotate/flip \u7684\u60c5\u51b5\u7136\u540e\u5c31\u662f\u666e\u901a\u7ebf\u6bb5\u6811\u4e86\u3002\n\n### swap\n\n\u5355\u67e5 $2$ \u6b21\u5f97\u5230 $i,j$ \u7684\u989c\u8272\uff0c\u7136\u540e\u8d4b\u503c\u5355\u4fee\u4e24\u6b21\u3002\n\n### paint\n\n\u8d4b\u503c\u533a\u4fee\uff0c\u8981\u61d2\u6807\u8bb0\u3002\n\n### count / countsegment\n\n\u533a\u67e5\uff0c\u8bb0\u5f55\u4e00\u4e0b\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u201c\u90e8\u5206\u201d\u7684\u4e2a\u6570\uff0c\u5de6\u754c\u989c\u8272\uff0c\u53f3\u754c\u989c\u8272\u3002\n\n\u5408\u5e76\uff1a\u82e5\u5de6\u5b50\u6811\u7684\u53f3\u754c\u989c\u8272\u548c\u53f3\u5b50\u6811\u7684\u5de6\u754c\u989c\u8272\u4e00\u6837\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a\u5de6\u5b50\u6811\u201c\u90e8\u5206\u201d $+$ \u53f3\u5b50\u6811\u201c\u90e8\u5206\u201d $-1$ \u3002\u5426\u5219\u7b54\u6848\u4e3a\u5de6\u5b50\u6811\u201c\u90e8\u5206\u201d $+$ \u53f3\u5b50\u6811\u201c\u90e8\u5206\u201d\u3002\n\n### rotate/flip\n\n\u5f00\u4e24\u4e2a\u53d8\u91cf $R,F$ \u8bb0\u5f55 rotate/flip\u3002\n\n\u66f4\u65b0 rotate \u65f6\uff0c$R$ \u53d8\u4e3a $R+k$\u3002\n\n\u66f4\u65b0 flip \u65f6\uff0crotate \u4f1a\u53d8\u6362\u65b9\u5411\uff0c\u6240\u4ee5 $R=n-R$\u3002\n\n\u8fd9\u91cc\u6ce8\u610f\u5bf9 $n$ \u53d6\u6a21\u65f6\u5019\u7684\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u3002\n\n### \u5c06 $x$ \u53d8\u4e3a\u539f\u73af\u4e0a\u7684\u4e0b\u6807\n\n\u8bf4\u767d\u4e86\u5c31\u662f\u5f80\u56de\u8f6c $R$ \u6b65\u3002\u5b58\u5728 flip \u53d6\u4e2a\u53cd\u3002\u6ce8\u610f\u5bf9 $n$ \u53d6\u6a21\u3002",
        "postTime": 1684502001,
        "uid": 327444,
        "name": "Tothetime_tolife",
        "ccfLevel": 0,
        "title": "P4130 \u9879\u94fe\u5de5\u5382 solution"
    }
]