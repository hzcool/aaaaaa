[
    {
        "content": "\u53d1\u73b0\u6bd2\u7624\u4eec\u60f3\u5f3a\u8feb\u6211\u4eec\u5199\u5e73\u8861\u6811\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651\u600e\u4e48\u4e0d\u5199\u5e73\u8861\u6811\u3002\n\n\u53d1\u73b0\u6709\u4e2a\u4e1c\u897f\u53eb\u505a 01trie\u3002\u8fd9\u73a9\u610f\u53ef\u4ee5\u5f53\u5e73\u8861\u6811\u7528\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u770b[\u8fd9\u91cc](https://www.luogu.com.cn/blog/GeorgeJia/solution-p3369)\u3002\n\n\u7136\u800c\u5e76\u4e0d\u80fd\u901a\u8fc7\u8fd9\u4e2a\u9898\uff0c\u56e0\u4e3a\u53ef\u6076\u7684\u6bd2\u7624\u4eec\u5361\u4e86\u7a7a\u95f4\uff0c\u800c 01trie \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log w)$\uff0c\u5176\u4e2d $w$ \u662f\u503c\u57df\u3002\n\n\u7136\u800c\uff0c\u8fd9\u68f5\u6811\u7684\u53f6\u8282\u70b9\u6570\u91cf\u662f $O(n)$ \u7684\uff0c\u56e0\u6b64\uff0c\u5047\u5982\u6211\u4eec\u80fd\u901a\u8fc7\u67d0\u79cd\u529e\u6cd5\u628a\u5b83\u7684\u6240\u6709\u5355\u94fe\u538b\u7f29\u8d77\u6765\uff0c\u8fd9\u68f5\u6811\u4e0a\u7684\u8282\u70b9\u6570\u5c31\u4f1a\u53d8\u6210 $O(n)$\u3002\u56e0\u4e3a\u6240\u6709 $n$ \u4e2a\u53f6\u8282\u70b9\u7684\u865a\u6811\u5927\u5c0f\u53ea\u6709 $O(n)$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/o1yziaa2.png)\n\n\u5b9e\u73b0\u8d77\u6765\uff0c\u5927\u6982\u5c31\u662f\u548c\u666e\u901a 01trie \u4e00\u6837\u5730\u4ece\u6839\u8282\u70b9\u5411\u4e0b\u5339\u914d\uff0c\u7136\u540e\u5047\u5982\u9047\u5230\u5931\u914d\uff0c\u5c31\u5206\u88c2\u5f53\u524d\u8282\u70b9\u3002\n\n\u5982\u679c\u4f60\u5b66\u4e60\u8fc7[\u540e\u7f00\u6811](https://www.luogu.com.cn/blog/EternalAlexander/xuan-ku-hou-zhui-shu-mo-shu)\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u7684\u5b9e\u73b0\u65b9\u5f0f\u548c\u540e\u7f00\u6811\u975e\u5e38\u7c7b\u4f3c\u3002\n\n\u8fd9\u6837\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230 $O(n)$\uff0c\u6211\u4eec\u5c31\u80fd\u6109\u5feb\u5730\u4e0d\u5199\u5e73\u8861\u6811\u800c\u901a\u8fc7\u672c\u9898\u4e86\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\nconst int maxn = 2000005,lim=30;\nconst int base=1e7;\nint g(int x,int i){return (x>>i)&1;}\nint reverse(int x){\n\tint ans=0;\n\tfor(int i=0;i<lim;++i)ans+=g(x,i)<<(lim-i-1);\n\treturn ans;\n}\nstruct compressed_trie {\n\tint ch[maxn*2][2],d[maxn*2],v[maxn*2],pt[maxn*2],size[maxn*2],tl=1;\n\tint newnode(int p,int dep){\n\t\tpt[++tl]=p;d[tl]=dep;return tl;\n\t}void insert(int x,int det){\n\t\tint v1=x;x=reverse(x);\n\t\tint rt=1,rem=0,last=0;\n\t\tfor(int i=0;i<lim;++i){\n\t\t\trem++;int c1=g(x,i);\n\t\t\twhile(i>d[rt]){\n\t\t\t\tif(!ch[rt][c1]){\n\t\t\t\t\tch[rt][c1]=newnode(x>>i,lim);\n\t\t\t\t\tv[tl]=v1;\n\t\t\t\t\tsize[ch[rt][c1]]=det;\n\t\t\t\t\treturn;\n\t\t\t\t}last=rt;rem=i-d[rt];rt=ch[rt][c1];\n\t\t\t\tsize[last]+=det;\n\t\t\t}int c2=g(pt[rt],rem-1);\n\t\t\tif(c1!=c2){\n\t\t\t\tint u=newnode(pt[rt],i-1);size[u]=size[rt]+det;\n\t\t\t\tch[u][c2]=rt;ch[u][c1]=newnode(x>>i,lim);\n\t\t\t\tch[last][g(pt[rt],0)]=u;\n\t\t\t\tpt[rt]>>=(rem-1);\n\t\t\t\tlast=u;rt=ch[u][c1];rem=1;size[rt]+=det;v[rt]=v1;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}size[rt]+=det;\n\t}int rank(int x){\n\t\tinsert(x,0);\n\t\tx=reverse(x);int rt=1,ans=0;\t\n\t\tfor(int i=0;i<lim;++i){\n\t\t\tint c1=g(x,i);\n\t\t\twhile(i>d[rt]){\n\t\t\t\tif(c1==1)ans+=size[ch[rt][0]];\n\t\t\t\trt=ch[rt][c1];\n\t\t\t}\n\t\t}return ans;\n\t}int kth(int x,int rt=1){\n\t\tif(rt==1)insert(x,0);\n\t\tif(!ch[rt][0]&&!ch[rt][1])return v[rt];\n\t\tif(x<=size[ch[rt][0]])return kth(x,ch[rt][0]);\n\t\telse return kth(x-size[ch[rt][0]],ch[rt][1]);\n\t}\t\n}T; \nint opt,t,n,q,sum,lastans;\nint main() {\n\tT.d[1]=-1;\n    scanf(\"%d%d\",&n,&q);\n    for(int i=1;i<=n;++i){scanf(\"%d\",&t);T.insert(t,1);}\n\twhile (q--) {\n\t\tscanf(\"%d %d\",&opt,&t);t^=lastans;\n\t\tif (opt==1) T.insert(t, 1);\n\t\tif (opt==2) T.insert(t, -1);\n\t\tif(opt<=2)continue;\n\t\tif (opt==3)lastans=T.rank(t)+1;\n\t\tif (opt==4)lastans=T.kth(t);\n\t\tif (opt==5)lastans=T.kth(T.rank(t));\n\t\tif (opt==6)lastans=T.kth(T.rank(t+1)+1);\n\t\tsum^=lastans;\n\t}printf(\"%d\",sum);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1582783136,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "## WBLT\n\n\u7531\u4e8e\u8003\u8651\u5230\u7b49\u4f1a\u6709\u53c8\u662f\u4e00\u5806 splay\uff0ctreap\uff0c\u987e\u5148\u4e3a WBLT \u515a\u5360\u4e2a\u5751\u3002\n\nWBLT \u662f\u4e00\u79cd leafy tree\u3002\u6240\u8c13 leafy tree\uff0c\u5c31\u662f\u6307\u6240\u6709\u7684\u4fe1\u606f\u653e\u5728\u53f6\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u5185\u90e8\u8282\u70b9\u7ef4\u62a4\u53f6\u8282\u70b9\u7684\u5408\u5e76\u4fe1\u606f\u3002\n\n\u8fd9\u597d\u50cf\u5f88\u50cf\u6211\u4eec\u719f\u6089\u7684\u7ebf\u6bb5\u6811\uff0c\u56e0\u6b64\uff0c\u7ebf\u6bb5\u6811\u5c31\u662f\u4e00\u7c7b leafy tree\u3002\n\n\u56e0\u6b64 WBLT \u7684\u67e5\u8be2\u64cd\u4f5c\u4e0e\u7ebf\u6bb5\u6811\u5341\u5206\u76f8\u4f3c\uff0c\u9700\u8981\u8d70\u5230\u53f6\u8282\u70b9\u624d\u80fd\u5b8c\u6210\u67e5\u8be2\u3002\n\n#### \u5148\u770b\u770b\u53d8\u91cf\n\n```cpp\nconst int ratio=4; \nstruct lef{\n\tint v,w,ls,rs;\n}t[maxn*80];\nint rt,tot,ans,lastans;\nvoid nnd(int &o,int v,int w,int ls,int rs){\n    o=++tot;\n    t[o]=(lef){v,w,ls,rs};\n}\n```\n\n$ratio$ \u662f\u4e00\u4e2a\u65cb\u8f6c\u56e0\u6570\uff0c\u53ef\u4ee5\u81ea\u884c\u8bbe\u7f6e\uff0c\u4e00\u822c\u6765\u8bf4 $4$ \u662f\u4e00\u4e2a\u6bd4\u5408\u9002\u7684\u6570\u5b57\u3002\n\n\u8fd9\u4e2a\u56e0\u6570\u5728\u4fee\u6539\u4e2d\u6709\u7528\u3002\n\n$v$ \u662f\u6307\u8fd9\u68f5\u5b50\u6811\u5185\u6700\u5927\u7684\u6811\u7684\u503c\u3002\n\n$w$ \u662f\u6307\u8fd9\u68f5\u5b50\u6811\u7684\u91cd\u91cf\uff0c\u4e5f\u5c31\u662f**\u53f6**\u8282\u70b9\u6570\u91cf\u3002\u6ce8\u610f**\u4e0d**\u5305\u62ec\u5185\u90e8\u8282\u70b9\u7684\u6570\u91cf\u3002\n\n$ls,rs$ \u4e3a\u5de6\u53f3\u513f\u5b50\u3002\n\n#### \u67e5\u8be2\u64cd\u4f5c\n\n\u67e5\u8be2\u64cd\u4f5c\u548c\u7ebf\u6bb5\u6811\u7684\u5199\u6cd5\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u3002\n```\nint qrk(int o,int k) {\n    if(t[o].w==1) return 1;\n    if(k<=t[t[o].ls].v)return qrk(t[o].ls,k);\n    else return t[t[o].ls].w+qrk(t[o].rs,k);\n}\nint qnm(int o,int k) {\n    if(t[o].w==1) return t[o].v;\n    if(k<=t[t[o].ls].w)return qnm(t[o].ls,k);\n    else return qnm(t[o].rs,k-t[t[o].ls].w);\n}\nint pre(int rk,int x){\n\treturn qnm(rt,qrk(rt,x)-1);\n}\nint suf(int rk,int x){\n\treturn qnm(rt,qrk(rt,x+1));\n}\n```\n\n\u5bf9\u4e8e\u67e5\u6392\u540d\uff0c\u53ea\u8981\u4e0d\u65ad\u6bd4\u8f83\u8be5\u503c\u4e0e\u5de6\u8fb9\u8282\u70b9\u7684 $v$ \u503c\u5927\u5c0f\uff0c\u786e\u5b9a\u8fdb\u5165\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\u3002\n\n\u67e5\u8be2 $kth$ \u5219\u4e0d\u65ad\u6bd4\u8f83\u4e0e\u8be5\u8282\u70b9\u5de6\u8fb9\u8282\u70b9\u7684 $w$ \u5927\u5c0f\u3002\n\n#### \u8c03\u6574\u64cd\u4f5c\n\n\u5f53\u5de6\u53f3\u8282\u70b9\u7684 $w$ \u76f8\u5dee\u8fc7\u5927\u65f6\uff08\u4e00\u822c\u8ba4\u5b9a\u662f\u4e00\u8fb9\u5927\u4e8e\u53e6\u4e00\u8fb9\u7684 $ratio$ \u500d\uff09\u6211\u4eec\u5c31\u9700\u8981\u505a\u51fa\u8c03\u6574\u3002\n\n\u8c03\u6574\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a\u5982\u679c\u53f3\u5b50\u6811\u8fc7\u5927\uff0c\u5219\u5c06\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u5408\u5e76\u6210\u4e00\u68f5\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u72ec\u7acb\u4f5c\u4e00\u9897\u5b50\u6811\u3002\n\n\u5177\u4f53\u4e00\u70b9\uff0c\u662f\u5efa\u7acb\u4e00\u4e2a\u65b0\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\uff0c\u65b0\u8282\u70b9\u7684\u5de6\u513f\u5b50\u662f\u539f\u6765\u7684 $ls$\uff0c\u65b0\u8282\u70b9\u7684\u53f3\u513f\u5b50\u662f\u539f\u6765\u53f3\u513f\u5b50\u7684 $ls$\u3002\n\n\u539f\u6765\u53f3\u513f\u5b50\u7684 $rs$ \u505a\u5f53\u524d\u8282\u70b9\u7684 $rs$\u3002\n\n\u5de6\u5b50\u6811\u8fc7\u5927\u540c\u7406\u3002\n\n```cpp\nvoid merge(int &o,int x,int y){\n\tnnd(o,t[y].v,t[x].w+t[y].w,x,y);\n}\nvoid maintain(int o){\n    if(t[t[o].ls].w>t[t[o].rs].w*ratio){\n\t\tmerge(t[o].rs,t[t[o].ls].rs,t[o].rs);\n\t\tt[o].ls=t[t[o].ls].ls;\n\t}\n\tif(t[t[o].rs].w>t[t[o].ls].w*ratio){\n\t\tmerge(t[o].ls,t[o].ls,t[t[o].rs].ls);\n\t\tt[o].rs=t[t[o].rs].rs;\n\t}\n}\n```\n\n\u7531\u4e8e\u6211\u4eec\u662f\u4ece\u4e0b\u5f80\u4e0a\u5c42\u5c42\u8c03\u6574\u7684\uff0c\u56e0\u6b64\u4e0d\u7528\u62c5\u5fc3\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u8fc7\u5927\u8fd9\u79cd\u4e8b\u3002\n\n\u53ef\u4ee5\u8bf4\uff0c\u8fd9\u4e00\u6b65\u4fdd\u8bc1\u4e86\u6811\u7684\u590d\u6742\u5ea6\u3002\n\n#### \u63d2\u5165\u64cd\u4f5c\n\n\u6211\u4eec\u627e\u5230\u6bd4\u8fd9\u4e2a\u6570\u5c0f\u7684\u6700\u5927\u53f6\u8282\u70b9\uff08\u6216\u662f\u5927\u7684\u6700\u5c0f\u53f6\u8282\u70b9\uff09\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u53f6\u8282\u70b9\u5206\u88c2\u3002\n\n\u5177\u4f53\u7684\u65b9\u6cd5\u4e3a\u8fd9\u4e2a\u53f6\u8282\u70b9\u65b0\u5efa\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5206\u522b\u8bb0\u5f55\u539f\u6765\u7684\u6570\u548c\u65b0\u6570\u3002\n\n\u7136\u540e\u539f\u8282\u70b9\u5c31\u4f5c\u4e00\u4e2a\u5185\u90e8\u8282\u70b9\u3002\n\n\u5728\u4fee\u6539\u7684\u65f6\u5019\u4e00\u8def\u5f80\u4e0a\u8c03\u6574\u3002\n\n```cpp\nvoid pushup(int o){\n    if(!t[o].ls){\n\t\tt[o].w=1; \n\t\treturn;\n\t}\n    t[o].w=t[t[o].ls].w+t[t[o].rs].w;\n\tt[o].v=t[t[o].rs].v;\n}\nvoid ins(int o,int x){\n    if(t[o].w==1){\n\t\tnnd(t[o].ls,min(t[o].v,x),1,0,0);\n\t\tnnd(t[o].rs,max(t[o].v,x),1,0,0);\n\t}\n    else{\n\t\tins(x>t[t[o].ls].v?t[o].rs:t[o].ls,x);\n\t}\n    pushup(o);maintain(o);\n}\n```\n#### \u5220\u9664\u64cd\u4f5c\n\n\u5148\u627e\u5230\u8981\u5220\u6389\u7684\u53f6\u8282\u70b9\uff0c\u7136\u540e\u5224\u65ad\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u53f6\u8282\u70b9\u7684\u7236\u8282\u70b9\u6ca1\u6709\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u5220\u6389\u3002\n\n\u5982\u679c\u6709\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u8ba9\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\u4e0a\u4f4d\u4ee3\u66ff\u7236\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u540c\u6837\uff0c\u4e00\u8def\u8c03\u6574\u3002\n\n\n\n```\nvoid del(int o,int x){\n    int wh,el;\n    if(x<=t[t[o].ls].v) wh=t[o].ls,el=t[o].rs;\n    else wh=t[o].rs,el=t[o].ls;\n    if(t[wh].w==1)\n        if(x==t[wh].v){\n            t[o].ls=t[el].ls;\n            t[o].rs=t[el].rs;\n            t[o].v=t[el].v;\n        }\n\t\telse return;\n    else del(wh,x);\n    pushup(o);maintain(o);  \n}\n```\n#### \u521d\u59cb\u5316\n\n\u4e00\u5f00\u59cb\u8981\u5148\u5efa\u7acb\u4e00\u4e2a\u6839\u8282\u70b9\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6839\u8282\u70b9\u7684\u503c\u9009\u62e9 $inf$\u3002\uff08\u56e0\u4e3a\u4e00\u5f00\u59cb\u6839\u8282\u70b9\u4e5f\u662f\u53f6\u8282\u70b9\uff09\n\n#### \u4ee3\u7801\n```\n#include <bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tregister int x=0;\n\tregister bool f=0;\n\tregister char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-') f=1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+c-48;\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nchar cr[200];int tt;\ninline void print(int x,char k='\\n') {\n    if(!x) putchar('0');\n    if(x < 0) putchar('-'),x=-x;\n    while(x) cr[++tt]=x%10+'0',x/=10;\n    while(tt) putchar(cr[tt--]);\n    putchar(k);\n}\nconst int maxn=100010;\nconst int ratio=4; \nstruct lef{\n\tint v,w,ls,rs;\n}t[maxn*80];\nint rt,tot,ans,lastans;\nvoid nnd(int &o,int v,int w,int ls,int rs){\n    o=++tot;\n    t[o]=(lef){v,w,ls,rs};\n}\nvoid merge(int &o,int x,int y){\n\tnnd(o,t[y].v,t[x].w+t[y].w,x,y);\n}\nvoid pushup(int o){\n    if(!t[o].ls){\n\t\tt[o].w=1; \n\t\treturn;\n\t}\n    t[o].w=t[t[o].ls].w+t[t[o].rs].w;\n\tt[o].v=t[t[o].rs].v;\n}\nvoid maintain(int o){\n    if(t[t[o].ls].w>t[t[o].rs].w*ratio){\n\t\tmerge(t[o].rs,t[t[o].ls].rs,t[o].rs);\n\t\tt[o].ls=t[t[o].ls].ls;\n\t}\n\tif(t[t[o].rs].w>t[t[o].ls].w*ratio){\n\t\tmerge(t[o].ls,t[o].ls,t[t[o].rs].ls);\n\t\tt[o].rs=t[t[o].rs].rs;\n\t}\n}\nint qrk(int o,int k) {\n    if(t[o].w==1) return 1;\n    if(k<=t[t[o].ls].v)return qrk(t[o].ls,k);\n    else return t[t[o].ls].w+qrk(t[o].rs,k);\n}\nint qnm(int o,int k) {\n    if(t[o].w==1) return t[o].v;\n    if(k<=t[t[o].ls].w)return qnm(t[o].ls,k);\n    else return qnm(t[o].rs,k-t[t[o].ls].w);\n}\nvoid ins(int o,int x){\n    if(t[o].w==1){\n\t\tnnd(t[o].ls,min(t[o].v,x),1,0,0);\n\t\tnnd(t[o].rs,max(t[o].v,x),1,0,0);\n\t}\n    else{\n\t\tins(x>t[t[o].ls].v?t[o].rs:t[o].ls,x);\n\t}\n    pushup(o);maintain(o);\n}\nvoid del(int o,int x){\n    int wh,el;\n    if(x<=t[t[o].ls].v) wh=t[o].ls,el=t[o].rs;\n    else wh=t[o].rs,el=t[o].ls;\n    if(t[wh].w==1)\n        if(x==t[wh].v){\n            t[o].ls=t[el].ls;\n            t[o].rs=t[el].rs;\n            t[o].v=t[el].v;\n        }\n\t\telse return;\n    else del(wh,x);\n    pushup(o);maintain(o);  \n}\nint pre(int rk,int x){\n\treturn qnm(rt,qrk(rt,x)-1);\n}\nint suf(int rk,int x){\n\treturn qnm(rt,qrk(rt,x+1));\n}\nsigned main(){\n    int n=read(),m=read();\n    nnd(rt,2147483647,1,0,0);\n    for(int i=1;i<=n;i++){\n    \tint a=read();ins(rt,a);\n\t}\n    while(m--){\n        int opt=read(),x=read()^lastans;\n        switch(opt){\n            case 1:ins(rt,x);break;\n            case 2:del(rt,x);break;\n            case 3:lastans=qrk(rt,x);break;\n            case 4:lastans=qnm(rt,x);break;\n            case 5:lastans=pre(rt,x);break;\n            case 6:lastans=suf(rt,x);break;\n        }\n        if(opt!=1&&opt!=2) ans^=lastans; \n    }\n    print(ans);\n    return 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1582763047,
        "uid": 120074,
        "name": "BFqwq",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "FHQ-Treap \u662f\u5e73\u8861\u6811\u4e2d\u7801\u91cf\u5f88\u5c0f\u7684\u4e00\u79cd\u3002\n\n- \u7279\u70b9\n- \u64cd\u4f5c\n  - \u5206\u88c2\n  - \u5408\u5e76\n  - \u63d2\u5165\n  - \u5220\u9664\n  - \u67e5\u8be2\u6392\u540d\n  - \u6839\u636e\u6392\u540d\u627e\u6570\n  - \u524d\u9a71\n  - \u540e\u7ee7\n- \u590d\u6742\u5ea6\n- \u4ee3\u7801\n\n## \u7279\u70b9\n\nTreap \u8fd9\u4e2a\u8bcd\u662f\u7531 Tree \u548c Heap \u7ec4\u5408\u5f62\u6210\u7684\uff0c\u53ef\u4ee5\u770b\u51fa Treap \u662f\u67e5\u627e\u6811\u548c\u5806\u7684\u7ed3\u5408\uff0c\u56e0\u6b64\u4e2d\u6587\u53eb\u6811\u5806\u3002\n\n\u6bcf\u4e2a\u7ed3\u70b9\u9664\u4fdd\u5b58\u4e00\u4e2a\u503c\u4e24\u4e2a\u5b50\u8282\u70b9\u5916\uff0c\u8fd8\u4fdd\u5b58\u4e00\u4e2a\u968f\u673a\u6743\uff1b\u4e0d\u8fc7\u4e0d\u4fdd\u5b58\u7236\u7ed3\u70b9\uff0c\u8fd9\u5c31\u662f Treap \u7801\u91cf\u5c0f\u7684\u539f\u56e0\u3002\n\n\u548c\u5176\u4ed6\u5e73\u8861\u6811\u4e00\u6837\uff0cTreap \u7684\u4e2d\u5e8f\u904d\u5386 \u503c\u5355\u8c03\u4e0d\u51cf\uff1b\u800c\u6839\u636e\u5806\u7684\u6027\u8d28\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6743\u5c0f\u4e8e\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7684\u6743\u3002\n\nTreap \u5206\u4e3a\u6709\u65cb\u548c\u65e0\u65cb\u4e24\u79cd\uff0c\u800c\u65e0\u65cb Treap \u662f\u7531\u8303\u6d69\u5f3a\u53d1\u660e\u7684\uff0c\u6240\u4ee5\u53c8\u53eb FHQ-Treap\u3002\n\n\u672c\u6587\u8981\u4ecb\u7ecd\u65e0\u65cb Treap\u3002\n\n## \u64cd\u4f5c\n\n### \u5206\u88c2\n\n\u5206\u88c2\u64cd\u4f5c\u662f\u5c06\u4e00\u4e2a Treap \u5206\u6210 $x,y$ \u4e24\u4e2a Treap\u3002\u5176\u4e2d $x$ \u4e2d\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e $k$\uff0c\u800c $y$ \u4e2d\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e $k$\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff08$k=4$\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jubdyomh.png)\n\n\uff08\u4e0a\u56fe\u4e2d\u7684\u6570\u5747\u4ee3\u8868\u503c\u800c\u975e\u6743\u6216\u7f16\u53f7\uff09\n\n\u5982\u679c\u5f53\u524d\u5b50\u6811\u7684\u6839\u7684\u503c\u5927\u4e8e\u7b49\u4e8e $k$\uff0c\u5c31\u7ee7\u7eed\u5206\u88c2\u5de6\u5b50\u6811\uff0c\u5e76\u5c06\u5206\u51fa\u6765\u7684\u53f3\u8fb9\u7684\u5b50\u6811\u4f5c\u4e3a\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\uff1b\u5426\u5219\u5206\u88c2\u53f3\u5b50\u6811\uff0c\u5e76\u5c06\u5206\u51fa\u6765\u7684\u5de6\u8fb9\u7684\u5b50\u6811\u4f5c\u4e3a\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u3002\n\n\u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5bf9\u5e94\u5230\u4e0a\u56fe\u5c31\u662f\uff0c\u56e0\u4e3a\u6839\u8282\u70b9\u7684\u503c $5$ \u5927\u4e8e\u7b49\u4e8e $k=4$\uff0c\u6240\u4ee5\u7ee7\u7eed\u5206\u88c2\u4ee5 $2$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5206\u51fa\u6765 $\\left\\{1,2,3\\right\\}$ \u548c $\\left\\{4\\right\\}$ \u4e24\u4e2a\u5b50\u6811\uff0c\u5e76\u5c06 $\\left\\{4\\right\\}$ \u4f5c\u4e3a $5$ \u7684\u5de6\u5b50\u6811\uff1b  \n\uff08\u7ee7\u7eed\u5206\u88c2\u4ee5 $2$ \u4e3a\u6839\u7684\u5b50\u6811\uff09\u56e0\u4e3a $2$ \u5c0f\u4e8e $k=4$\uff0c\u6240\u4ee5\u7ee7\u7eed\u5206\u88c2\u4ee5 $4$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5206\u51fa\u6765 $\\left\\{3\\right\\}$ \u548c $\\left\\{4\\right\\}$ \u4e24\u4e2a\u5b50\u6811\uff0c\u5e76\u5c06 $\\left\\{3\\right\\}$ \u4f5c\u4e3a $2$ \u7684\u53f3\u5b50\u6811\u3002\n\n\uff08\u4e0a\u9762\u6df7\u6dc6\u4e86\u503c\u548c\u7f16\u53f7\uff0c\u662f\u4e3a\u4e86\u8ba9\u53e5\u5b50\u7b80\u6d01\u4e00\u4e9b\uff09\n\n\u8ba4\u771f\u8bfb\u5b8c\u4e0a\u9762\u7684\u8bdd\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u51fa\u8981\u7528\u9012\u5f52\u5b9e\u73b0\u3002\n\n\u51fd\u6570 `split` \u63a5\u53d7\u4e00\u4e2a\u6839\u548c\u4e00\u4e2a $k$\uff0c\u8fd4\u56de\u5206\u88c2\u540e\u7684\u4e24\u68f5\u5b50\u6811\u7684\u6839\u3002\n\n```\nstruct pair{//\u8981\u8fd4\u56de\u4e24\u4e2a\u503c\uff0c\u5f97\u7528 pair\n\tint a,b;\n\tpair(int a_=0,int b_=0) { a=a_; b=b_; }//\u6784\u9020\u51fd\u6570\n};\npair split(int u,int k){//u \u662f\u6839\n\tif(!u) return pair(0,0);//\u7a7a\u6811\u8fd4\u56de\u7a7a\n\tif(key[u]<k){//\u5982\u679c\u503c\u5c0f\u4e8e k\n\t\tpair t=split(son[u][1],k);//\u5206\u88c2\u53f3\u5b50\u6811\n        //son[u][0]\u8868\u793a\u5de6\u5b50\u8282\u70b9\uff0cson[u][1]\u8868\u793a\u53f3\u5b50\u8282\u70b9\n\t\tson[u][1]=t.a;//\u5c06\u5de6\u8fb9\u7684\u5b50\u6811\u4f5c\u4e3a\u6839\u7684\u53f3\u5b50\u6811\n\t\tpushup(u);//\u91cd\u65b0\u8ba1\u7b97\u5b50\u6811\u5927\u5c0f\n\t\treturn pair(u,t.b);//\u8fd4\u56de\uff08\u7ed3\u5408\u4e0a\u9762\u7684\u56fe\u5e94\u8be5\u53ef\u4ee5\u7406\u89e3\uff09\n\t}else{//\u53cd\u4e4b\u540c\u7406\n\t\tpair t=split(son[u][0],k);\n\t\tson[u][0]=t.b;\n\t\tpushup(u);\n\t\treturn pair(t.a,u);\n\t}\n}\n```\n\n### \u5408\u5e76\n\n\u5408\u5e76\u662f\u5c06 $x,y$ \u4e24\u4e2a Treap \u5408\u5e76\u4e3a\u4e00\u4e2a Treap\uff08$x$ \u4e2d\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u7b49\u4e8e $y$ \u4e2d\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/bheudsa4.png)\n\n\uff08\u5176\u4e2d\u7eff\u8272\u7684\u6570\u4ee3\u8868\u968f\u673a\u6743\uff09\n\n\u6bd4\u8f83\u4e24\u4e2a\u6811\u6839\u7684\u6743\uff0c\u6743\u5927\u7684\u4f5c\u4e3a\u6743\u5c0f\u7684\u5b50\u7ed3\u70b9\uff0c\u7ee7\u7eed\u5408\u5e76\u5b50\u6811\u3002\n\n\u6bd4\u5982\u8fd9\u5f20\u56fe\uff0c\u56e0\u4e3a $2>1$\uff0c\u6240\u4ee5\u5c06 $\\left\\{1,2,3\\right\\}$ \u4f5c\u4e3a $\\left\\{4,5,6,7,8\\right\\}$ \u7684\u6839\u7684\u5de6\u5b50\u6811\uff0c\u7ee7\u7eed\u5408\u5e76 $\\left\\{1,2,3\\right\\}$ \u548c $\\left\\{4\\right\\}$\uff1b  \n\u56e0\u4e3a $2<3$\uff0c\u6240\u4ee5\u5c06 $\\left\\{4\\right\\}$ \u4f5c\u4e3a $\\left\\{1,2,3\\right\\}$ \u7684\u6839\u7684\u53f3\u5b50\u6811\uff0c\u7ee7\u7eed\u5408\u5e76 $\\left\\{3\\right\\}$ \u548c $\\left\\{4\\right\\}$\u3002  \n. . . . . . \n\n`merge` \u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e3a\u4e24\u68f5\u6811\u7684\u6839\uff1b\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6839\u3002\n\n```cpp\nint merge(int u,int v){\n\tif(!u||!v) return u+v;//\u5982\u679c\u4efb\u4f55\u4e00\u68f5\u6811\u4e3a\u7a7a\uff0c\u8fd4\u56de\u53e6\u4e00\u68f5\u6811\n\tif(wei[u]<wei[v]){//\u6bd4\u8f83\u968f\u673a\u6743\n\t\tson[u][1]=merge(son[u][1],v);\n        //\u5c06\u53f3\u5b50\u6811\u548c\u53e6\u4e00\u68f5\u6811\u5408\u5e76\uff0c\u4f5c\u4e3a\u53f3\u5b50\u6811\n\t\tpushup(u);//\u91cd\u65b0\u8ba1\u7b97\u5b50\u6811\u5927\u5c0f\n\t\treturn u;//\u6700\u7ec8\u6839\u4e3a u\n\t}else{//\u53cd\u4e4b\u540c\u7406\n\t\tson[v][0]=merge(u,son[v][0]);\n\t\tpushup(v);\n\t\treturn v;\n\t}\n}\n```\n\n### \u63d2\u5165\u7ed3\u70b9\n\n\u6bd4\u5982\uff0c\u8981\u63d2\u5165\u4e00\u4e2a\u503c\u4e3a $k$ \u7684\u7ed3\u70b9\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u5148\u5c06\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9\uff0c\u4f5c\u4e3a\u4e00\u68f5\u6811 $y$\uff1b\u5e76\u5c06\u539f\u6765\u7684\u6811\u5206\u88c2\u6210 $x,z$ \u4e24\u68f5\u6811\u3002  \n\u7136\u540e\u4f9d\u6b21\u5408\u5e76 $x,y,z$\uff0c\u5c31\u5b8c\u6210\u4e86\u3002\n\n```cpp\nvoid insert(int k){\n\tkey[++cnt]=k; wei[cnt]=rand1(); size[cnt]=1;\n    //\u7533\u8bf7\u4e00\u4e2a\u8282\u70b9\uff0c\u4f5c\u4e3a\u4e00\u68f5\u6811\uff0c\u5176\u5927\u5c0f\u4e3a 1\n\tpair t=split(root,k);//\u4ee5 k \u4e3a\u5173\u952e\u503c\u5206\u88c2\n\troot=merge(merge(t.a,cnt),t.b);//\u4f9d\u6b21\u5408\u5e76\uff0c\u66f4\u65b0\u6839\n}\n```\n\n### \u5220\u9664\u7ed3\u70b9\n\n\u5220\u9664\u6bd4\u8f83\u5de7\u5999\uff0c\u5148\u5c06\u6811\u5206\u88c2\u6210 $x,y,z$ \u4e09\u68f5\u6811\uff1b\u5176\u4e2d $x$ \u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e $k$\uff0c$y$ \u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u5747\u4e3a $k$\uff0c$z$ \u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e $k$\u3002\n\n\u7136\u540e\u76ee\u6807\u5c31\u662f\u8981\u5728 $y$ \u4e2d\u5220\u9664\u4ec5\u4e00\u4e2a\u7ed3\u70b9\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u505a\u6cd5\u662f\uff0c\u76f4\u63a5\u5408\u5e76 $y$ \u7684\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\uff0c\u6839\u8282\u70b9\u5c31\u88ab\u5220\u9664\u6389\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u7684\u4e8b\u60c5\u90fd\u77e5\u9053\u4e86\uff0c\u4f9d\u6b21\u5408\u5e76 $x,y,z$\u3002\n\n```cpp\nvoid eraser(int k){\n\tpair x,y;\n\tx=split(root,k);\n    //\u5c06\u6574\u68f5\u6811\u5206\u4e3a\u5c0f\u4e8e k \u7684\u548c\u5927\u4e8e\u7b49\u4e8e k \u7684\n\ty=split(x.b,k+1);\n    //\u5c06\u5927\u4e8e\u7b49\u4e8e k \u7684\u5206\u4e3a\u7b49\u4e8e k \u7684\u548c\u5927\u4e8e k \u7684\n\ty.a=merge(son[y.a][0],son[y.a][1]);\n    //\u76f4\u63a5\u5408\u5e76 y.a \u7684\u4e24\u68f5\u5b50\u6811\n\troot=merge(x.a,merge(y.a,y.b));\n    //\u4f9d\u6b21\u5408\u5e76\u8d77\u6765\uff0c\u66f4\u65b0\u6839\n}\n```\n\n### \u67e5\u8be2\u6392\u540d\n\n\u76f4\u63a5\u5206\u88c2\uff0c\u5e76\u5c06\u503c\u5c0f\u4e8e $k$ \u7684\u6811\u7684\u5927\u5c0f\u52a0\u4e00\uff0c\u8fd4\u56de\u3002\n\n```cpp\nint find1(int k){\n\tint re;\n\tpair t=split(root,k);//\u5206\u88c2\n\tre=size[t.a]+1;//\u5c06\u503c\u5c0f\u7684\u6811\u7684\u7ed3\u70b9\u6570 +1 \u4f5c\u4e3a\u7b54\u6848\n\troot=merge(t.a,t.b);//\u5408\u5e76\u56de\u53bb\n\treturn re;//\u8fd4\u56de\n}\n```\n\n### \u6839\u636e\u6392\u540d\u627e\u6570\n\n\u8fd9\u6b21\u6ca1\u6cd5\u5206\u88c2\u5408\u5e76\u4e86qwq\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/izyszovf.png)\n\n\u8fd9\u6b21\u7ed3\u70b9\u4e0a\u7684\u6570\u5c31\u662f\u7ed3\u70b9\u7f16\u53f7\u4e86\uff0c\u56e0\u4e3a\u7ed3\u70b9\u7684\u503c\u548c\u6743\u6ca1\u6709\u7528\u3002\n\n\u6bd4\u5982\u8981\u627e\u7b2c $3$ \u4e2a\u6570\uff0c\u8ba9\u6211\u4eec\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u3002\n\n\u9996\u5148\uff0c$1$ \u53f7\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u6709 $4$ \u4e2a\u7ed3\u70b9\uff0c\u90a3\u7b2c $3$ \u4e2a\u7ed3\u70b9\u80af\u5b9a\u5728\u5de6\u5b50\u6811\u4e86\uff0c\u4e8e\u662f\u53bb\u627e\u5de6\u5b50\u6811\u7684\u7b2c $3$ \u4e2a\u7ed3\u70b9\uff1b  \n\u7136\u540e\uff0c\u53d1\u73b0 $2$ \u53f7\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u6709 $1$ \u4e2a\u7ed3\u70b9\uff0c\u90a3\u7b2c $3$ \u4e2a\u7ed3\u70b9\u80af\u5b9a\u5728\u53f3\u5b50\u6811\u4e86\uff0c\u4e8e\u662f\u53bb\u627e $2$ \u53f7\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u7684\u7b2c $1$ \u4e2a\u7ed3\u70b9\uff1b  \n\u63a5\u7740\uff0c\u53d1\u73b0 $5$ \u53f7\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u6709 $1$ \u4e2a\u7ed3\u70b9\uff0c\u90a3\u7b2c $1$ \u4e2a\u7ed3\u70b9\u80af\u5b9a\u5728\u5de6\u5b50\u6811\u4e86\uff0c\u4e8e\u662f\u53bb\u627e $5$ \u53f7\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u7684\u7b2c $1$ \u4e2a\u7ed3\u70b9\uff1b  \n\u6700\u540e\uff0c\u53d1\u73b0 $8$ \u53f7\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u6709 $0$ \u4e2a\u7ed3\u70b9\uff0c\u90a3 $8$ \u53f7\u7ed3\u70b9\u81ea\u5df1\u80af\u5b9a\u5c31\u662f\u7b54\u6848\u4e86\uff0c\u4e8e\u662f\u8fd4\u56de\u81ea\u5df1\u7684\u503c\u3002\n\n\u6709\u5faa\u73af\u548c\u9012\u5f52\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\n\n```cpp\nint find2(int k){\n\tint pos=root;//\u5f53\u524d\u7ed3\u70b9\u521d\u59cb\u4e3a\u6839\n\twhile(pos){\n\t\tif(k==size[son[pos][0]]+1) return key[pos];\n        //\u5982\u679c\u8981\u627e\u7684\u6b63\u662f\u5f53\u524d\u7ed3\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\n\t\tif(k<=size[son[pos][0]]) pos=son[pos][0];\n        //\u5982\u679c\u8981\u627e\u7684\u5728\u5de6\u5b50\u6811\uff0c\u5f53\u524d\u8282\u70b9\u8f6c\u4e3a\u5de6\u5b50\u8282\u70b9\n\t\telse { k-=size[son[pos][0]]+1; pos=son[pos][1]; }\n        //\u5426\u5219\u4e0d\u4ec5\u5f53\u524d\u7ed3\u70b9\u8f6c\u4e3a\u53f3\u5b50\u8282\u70b9\uff0c\u8fd8\u8981\u5c06 k \u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f+1\n\t}\n}\n```\n\n```cpp\nint find2(int u,int k){\n\tif(k==size[son[u][0]]+1) return key[u];\n    //\u5982\u679c\u8981\u627e\u7684\u6b63\u662f\u5f53\u524d\u7ed3\u70b9\uff0c\u8fd4\u56de\u672c\u8282\u70b9\n\tif(k<=size[son[u][0]]) return find2(son[u][0],k);\n    //\u5982\u679c\u8981\u627e\u7684\u5728\u5de6\u5b50\u6811\uff0c\u8fd4\u56de\u5de6\u5b50\u6811\u7684\u7b2c k \u4e2a\u7ed3\u70b9\n\telse return find2(son[u][1],k-size[son[u][0]]-1);\n    //\u5426\u5219\u8fd4\u56de\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\uff0c\u8fd8\u662f\u8981\u51cf\u53bb\u90a3\u4e2a\u6570\n}\n```\n\n###  \u524d\u9a71\n\n\u4ec0\u4e48\u53eb\u201c\u5c0f\u4e8e $k$\uff0c\u4e14\u6700\u5927\u7684\u6570\u201d\uff1f\u4e0d\u5c31\u662f\u524d\u9762\u7684\u90a3\u4e2a\u6570\u5417\uff0c\u6240\u4ee5\u76f4\u63a5\u67e5\u627e\u6392\u540d\u6bd4 $k$ \u7684\u6392\u540d\u5c11\u4e00\u7684\u6570\u3002\n\n```cpp\nint lst(int k) { return find2(find1(k)-1); }\n```\n\n### \u540e\u7ee7\n\n\u503c\u76f8\u540c\u7684\u7ed3\u70b9\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff0c\u6240\u4ee5\u4e0d\u80fd\u627e\u540e\u9762\u7684\u90a3\u4e2a\u6570\u4e86\uff0c\u4f46\u662f\u53ef\u4ee5\u5c06\u503c\u52a0\u4e00\uff0c\u67e5\u8be2\u5b83\u7684\u6392\u540d\uff0c\u5e76\u627e\u5230\u5bf9\u5e94\u7684\u503c\u3002\n\n\u4e0d\u597d\u7406\u89e3\uff1f\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a\n\n```plain\n1,1,2,2,4,4,5,5\n```\n\n\u8981\u627e $2$ \u7684\u540e\u7ee7\u3002  \n\u5148\u67e5\u8be2 $3$ \u7684\u6392\u540d\uff0c\u5373\u5c0f\u4e8e $3$ \u7684\u5143\u7d20\u4e2a\u6570 $+1$\uff0c\u67e5\u8be2\u7ed3\u679c\u4e3a $5$\u3002  \n\u67e5\u8be2\u7b2c $5$ \u4e2a\u6570\uff0c\u4e3a $4$\u3002\u7ed3\u675f\u3002\n\n```cpp\nint nxt(int k) { return find2(find1(k+1)); }\n```\n\n## \u590d\u6742\u5ea6\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6570\u96c6\uff0c\u6392\u5e8f\u540e\u5c31\u662f Treap \u7684\u4e2d\u5e8f\u904d\u5386\uff1b\u800c\u6839\u80af\u5b9a\u662f\u968f\u673a\u6743\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u56e0\u6b64\u671f\u671b\u4f4d\u7f6e\u5728\u6b63\u4e2d\u95f4\uff1b\u6240\u4ee5\u8fd9\u68f5\u6811\u671f\u671b\u5e73\u8861\uff1b\u6240\u4ee5\u590d\u6742\u5ea6\u4e3a $O(\\log n)$\u3002\n\n## \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#define maxn 1100010\nstruct pair{\n\tint a,b;\n\tpair(int a_=0,int b_=0) { a=a_; b=b_; }\n};\nint read(){\n    int ans=0; char ch=getchar();\n    while(ch>'9'||ch<'0')ch=getchar();\n    while(ch<='9'&&ch>='0'){\n        ans=ans*10+ch-'0';\n        ch=getchar();\n    }\n    return ans;\n}\nint key[maxn],wei[maxn],size[maxn],son[maxn][2];\nint n,m,cnt,ans,seed=1,root,last;\nint rand1() { return seed*=19260817; }\ninline void pushup(int u)\n\t{ size[u]=size[son[u][0]]+size[son[u][1]]+1; }\npair split(int u,int k){\n\tif(!u) return pair(0,0);\n\tif(key[u]<k){\n\t\tpair t=split(son[u][1],k);\n\t\tson[u][1]=t.a;\n\t\tpushup(u);\n\t\treturn pair(u,t.b);\n\t}else{\n\t\tpair t=split(son[u][0],k);\n\t\tson[u][0]=t.b;\n\t\tpushup(u);\n\t\treturn pair(t.a,u);\n\t}\n}\nint merge(int u,int v){\n\tif(!u||!v) return u+v;\n\tif(wei[u]<wei[v]){\n\t\tson[u][1]=merge(son[u][1],v);\n\t\tpushup(u);\n\t\treturn u;\n\t}else{\n\t\tson[v][0]=merge(u,son[v][0]);\n\t\tpushup(v);\n\t\treturn v;\n\t}\n}\nvoid insert(int k){\n\tkey[++cnt]=k; wei[cnt]=rand1(); size[cnt]=1;\n\tpair t=split(root,k);\n\troot=merge(merge(t.a,cnt),t.b);\n}\nvoid eraser(int k){\n\tpair x,y;\n\tx=split(root,k);\n\ty=split(x.b,k+1);\n\ty.a=merge(son[y.a][0],son[y.a][1]);\n\troot=merge(x.a,merge(y.a,y.b));\n}\nint find1(int k){\n\tint re;\n\tpair t=split(root,k);\n\tre=size[t.a]+1;\n\troot=merge(t.a,t.b);\n\treturn re;\n}\nint find2(int k){\n\tint pos=root;\n\twhile(pos){\n\t\tif(k==size[son[pos][0]]+1) return key[pos];\n\t\tif(k<=size[son[pos][0]]) pos=son[pos][0];\n\t\telse { k-=size[son[pos][0]]+1; pos=son[pos][1]; }\n\t}\n}\nint lst(int k) { return find2(find1(k)-1); }\nint nxt(int k) { return find2(find1(k+1)); }\nint main(){\n\tn=read(); m=read();\n\tfor(int i=1;i<=n;i++){\n\t\tint a=read();\n\t\tinsert(a);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint o=read(),x; x=read();\n\t\tif(o==1) insert(x^last);\n\t\tif(o==2) eraser(x^last);\n\t\tif(o==3) { last=find1(x^last); ans^=last; }\n\t\tif(o==4) { last=find2(x^last); ans^=last; }\n\t\tif(o==5) { last=lst(x^last); ans^=last; }\n\t\tif(o==6) { last=nxt(x^last); ans^=last; }\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n[\u8bb0\u5f55](/record/32383047)",
        "postTime": 1585747572,
        "uid": 178294,
        "name": "zhy137036",
        "ccfLevel": 9,
        "title": "FHQ-Treap"
    },
    {
        "content": "# Treap\n\n\u5e73\u8861\u6811\u600e\u4e48\u80fd\u5c11\u4e86 treap \u8fd9\u4e48\u597d\u5199\u3001\u597d\u770b\u53c8\u91cd\u8981\u7684\u4e1c\u897f\u3002\n\n---\n\n\u5e73\u8861\u6811\u5b66\u8d77\u6765\u6709\u70b9\u56f0\u96be\u4f46\u6709\u65f6\u5019\u53ea\u8981\u638c\u63e1\u4e86\u5173\u952e\u7684\u4e00\u70b9\u3002\n\n\u5c31\u5b66\u4f1a\u4e86\u3002\n\nTreap \u662f Tree \u548c Heap \u7684\u7ed3\u5408\u3002\n\n\u5176\u4e2d Tree \u6307 BST , \u8fd9\u4e24\u4e2a\u4e1c\u897f\u4e3a\u524d\u7f6e\u77e5\u8bc6\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u505a\u9610\u8ff0\u3002\n\n\u5b66\u4e86 BST \u7684\u4eba\u90fd\u77e5\u9053\u5b83\u5bb9\u6613\u88ab\u5361\u3002\n\n\u6240\u4ee5\u5728\u6709 num \u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n\u4f7f\u7b2c\u4e8c\u5173\u952e\u5b57\u4fdd\u8bc1\u5806\u7684\u6027\u8d28\u3002\n\n\u8fd9\u6837\u624d\u80fd\u4f7f\u6bcf\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\u5e73\u5747\u4e3a $O(log n)$\n\n\u4f46\u662f\u5982\u4f55\u624d\u80fd\u4f7f\u7b2c\u4e8c\u5173\u952e\u5b57\u4fdd\u8bc1\u5806\u7684\u6027\u8d28\u5462\uff1f\n\n\u8fd9\u4e2a\u65f6\u5019\u5c31\u8981\u7528\u5230\u65cb\u8f6c\u4e86\uff01\n\n```cpp\n        A                         \n       / \\              \n      B   C               \n         / \\              \n        D   E      \n```\n\n\u7136\u540e\u65cb\u8f6c\n\n```cpp\n        C\n       / \\\n      A   E\n     / \\   \n    B   D\n    \n```\n\n\u624b\u6a21\u4e00\u4e0b\u5f88\u597d\u7406\u89e3\u3002\n\n\u6b64\u65f6\u5927\u5c0f\u5173\u7cfb\u6ca1\u53d8\uff0c\u4f46\u6811\u7684\u5f62\u72b6\u53d8\u4e86\u3002\n\n\u8fd9\u662f\u5de6\u65cb\u3002\n\n\u800c\u628a\u8fc7\u7a0b\u9006\u8fc7\u6765\u5c31\u662f\u53f3\u65cb\u3002\n\n\u8fd9\u4e2a\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u6211\u4eec\u9700\u8981\u6811\u7684\u7b2c\u4e00\u5173\u952e\u5b57\u6ee1\u8db3BST\u3002\n\n\u53c8\u8981\u7b2c\u4e8c\u5173\u952e\u5b57\u6ee1\u8db3heap\u3002\n\n\u5982\u679c\u7528heap\u539f\u672c\u7684\u79fb\u52a8\u65b9\u5f0f\u7ef4\u62a4\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n\u4f1a\u8f7b\u6613\u7834\u574f\u7b2c\u4e00\u5173\u952e\u5b57\u3002\n\n\u800c\u6211\u4eec\u5c06\u79fb\u52a8A\u548cB\uff0c\u6539\u4e3a\u65cb\u8f6c\u5c31\u80fd\uff0c\n\n**\u5728\u4fdd\u8bc1\u7b2c\u4e00\u5173\u952e\u5b57\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\uff0c\u7ef4\u62a4\u7b2c\u4e8c\u5173\u952e\u5b57\uff01**\n\n\u8fd9\u5c31\u662fTreap\u7684\u6838\u5fc3\uff01\n\n----\n\n\u4ee3\u7801\u65f6\u95f4\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define inf 2000000005\nusing namespace std;\n\nconst int maxn=(2000000);\nint cnt=0,R=0;\nint size[maxn],treap[maxn],num[maxn],rd[maxn],BST[maxn][2];\n\nvoid pushup(int i)\n{\n    size[i]=size[BST[i][0]]+size[BST[i][1]]+num[i];\n}\n\nvoid rotate(int &i,int d)\n{\n    int k=BST[i][d^1];\n    BST[i][d^1]=BST[k][d];\n    BST[k][d]=i;\n    pushup(i);\n    pushup(k);\n    i=k;\n}\n\nvoid insert(int &i,int x)\n{\n    if (i==0)\n    {\n        i=++cnt;\n        size[i]=1;\n        num[i]=1;\n        treap[i]=x;\n        rd[i]=rand();\n        return;\n    }\n    if (treap[i]==x)\n    {\n        num[i]++;\n        size[i]++;\n        return;\n    }\n    if(x>treap[i])\n    {\n        insert(BST[i][1],x);\n        if (rd[i]<rd[BST[i][1]])\n        {\n            rotate(i,0);\n        }\n    }\n    else\n    {\n        insert(BST[i][0],x);\n        if (rd[i]<rd[BST[i][0]])\n        {\n            rotate(i,1);\n        }\n    }\n    pushup(i);\n}\n\nvoid remove(int &i,int x)\n{\n    if (i==0)\n    {\n        return;\n    }\n    if (x<treap[i])\n    {\n        remove(BST[i][0],x);\n    }\n    else if (x>treap[i])\n    {\n        remove(BST[i][1],x);\n    }\n    else\n    {\n        if (BST[i][0]==0 && BST[i][1]==0)\n        {\n            num[i]--;\n            size[i]--;\n            if (num[i]==0)\n            {\n                i=0;\n            }\n        }\n        else if (BST[i][0] && BST[i][1]==0)\n        {\n            rotate(i,1);\n            remove(BST[i][1],x);\n        }\n        else if (BST[i][0]==0 && BST[i][1])\n        {\n            rotate(i,0);\n            remove(BST[i][0],x);\n        }\n        else if (BST[i][0] && BST[i][1])\n        {\n            if(rd[BST[i][0]]>rd[BST[i][1]])\n            {\n                rotate(i,1);\n                remove(BST[i][1],x);\n            }\n            else\n            {\n                rotate(i,0);\n                remove(BST[i][0],x);\n            }\n        }\n    }\n    pushup(i);\n}\n\nint rank(int i,int x)\n{\n    if (i==0)\n    {\n        return 1;\n    }\n    if (treap[i]==x)\n    {\n        return size[BST[i][0]]+1;\n    }\n    if (treap[i]<x)\n    {\n        return size[BST[i][0]]+num[i]+rank(BST[i][1],x);\n    }\n    if (treap[i]>x)\n    {\n        return rank(BST[i][0],x);\n    }\n}\n\nint find(int i,int x)\n{\n    if (i==0)\n    {\n        return 0;\n    }\n    if (size[BST[i][0]]>=x)\n    {\n        return find(BST[i][0],x);\n    }\n    else if (size[BST[i][0]]+num[i]<x)\n    {\n        return find(BST[i][1],x-num[i]-size[BST[i][0]]);\n    }\n    else\n    {\n        return treap[i];\n    }\n}\n\nint front(int i,int x)\n{\n    if (i==0)\n    {\n        return -inf;\n    }\n    if (treap[i]>=x)\n    {\n        return front(BST[i][0],x);\n    }\n    else\n    {\n        return max(treap[i],front(BST[i][1],x));\n    }\n}\n\nint back(int i,int x)\n{\n    if (i==0)\n    {\n        return inf;\n    }\n    if (treap[i]<=x)\n    {\n        return back(BST[i][1],x);\n    }\n    else\n    {\n        return min(treap[i],back(BST[i][0],x));\n    }\n}\n\nint main()\n{\n    int n,m,last=0,ans=0;\n    cin>>n>>m;\n    for (int i=1;i<=n;i++)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        insert(R,x);\n    }\n    for (int i=1;i<=m;i++)\n    {\n        int opt,x;\n        scanf(\"%d %d\",&opt,&x);\n        x^=last;\n        if (opt==1)\n        {\n            insert(R,x);\n        }\n        else if (opt==2)\n        {\n            remove(R,x);\n        }\n        else if (opt==3)\n        {\n            last=rank(R,x);\n            ans^=last;\n        }\n        else if (opt==4)\n        {\n            last=find(R,x);\n            ans^=last;\n        }\n        else if (opt==5)\n        {\n            last=front(R,x);\n            ans^=last;\n        }\n        else if (opt==6)\n        {\n            last=back(R,x);\n            ans^=last;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```\n\u63a8\u8350\u6d1b\u8c37\u65e5\u62a5\uff1a[\u5730\u5740](https://www.luogu.com.cn/blog/HOJQVFNA/qian-xi-treap-ping-heng-shu)\n\n\u5927\u4f6c\u52ff\u55b7\n\n## \u611f\u8c22\u7ba1\u7406\u5458\u5ba1\u6838\uff01\uff01\uff01\uff01",
        "postTime": 1584956548,
        "uid": 115359,
        "name": "phigy",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "## Splay\n\n>\n>\u4f38\u5c55\u6811\uff08$\\operatorname{Splay\\ Tree}$\uff09\uff0c\u4e5f\u53eb\u5206\u88c2\u6811\uff0c\u662f\u4e00\u79cd\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u5b83\u80fd\u5728 $\\operatorname O(\\log n)$ \u5185\u5b8c\u6210\u63d2\u5165\u3001\u67e5\u627e\u548c\u5220\u9664\u64cd\u4f5c\u3002\u5b83\u7531\u4e39\u5c3c\u5c14\u00b7\u65af\u7acb\u7279 Daniel Sleator \u548c \u7f57\u4f2f\u7279\u00b7\u6069\u5353\u00b7\u5854\u626c Robert Endre Tarjan \u57281985\u5e74\u53d1\u660e\u7684\u3002\n>\n>\u5728\u4f38\u5c55\u6811\u4e0a\u7684\u4e00\u822c\u64cd\u4f5c\u90fd\u57fa\u4e8e\u4f38\u5c55\u64cd\u4f5c\uff1a\u5047\u8bbe\u60f3\u8981\u5bf9\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\u6267\u884c\u4e00\u7cfb\u5217\u7684\u67e5\u627e\u64cd\u4f5c\uff0c\u4e3a\u4e86\u4f7f\u6574\u4e2a\u67e5\u627e\u65f6\u95f4\u66f4\u5c0f\uff0c\u88ab\u67e5\u9891\u7387\u9ad8\u7684\u90a3\u4e9b\u6761\u76ee\u5c31\u5e94\u5f53\u7ecf\u5e38\u5904\u4e8e\u9760\u8fd1\u6811\u6839\u7684\u4f4d\u7f6e\u3002\u4e8e\u662f\u60f3\u5230\u8bbe\u8ba1\u4e00\u4e2a\u7b80\u5355\u65b9\u6cd5\uff0c \u5728\u6bcf\u6b21\u67e5\u627e\u4e4b\u540e\u5bf9\u6811\u8fdb\u884c\u91cd\u6784\uff0c\u628a\u88ab\u67e5\u627e\u7684\u6761\u76ee\u642c\u79fb\u5230\u79bb\u6811\u6839\u8fd1\u4e00\u4e9b\u7684\u5730\u65b9\u3002\u4f38\u5c55\u6811\u5e94\u8fd0\u800c\u751f\u3002\u4f38\u5c55\u6811\u662f\u4e00\u79cd\u81ea\u8c03\u6574\u5f62\u5f0f\u7684\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5b83\u4f1a\u6cbf\u7740\u4ece\u67d0\u4e2a\u8282\u70b9\u5230\u6811\u6839\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u65cb\u8f6c\u628a\u8fd9\u4e2a\u8282\u70b9\u642c\u79fb\u5230\u6811\u6839\u53bb\u3002\n>\n>\u5b83\u7684\u4f18\u52bf\u5728\u4e8e\u4e0d\u9700\u8981\u8bb0\u5f55\u7528\u4e8e\u5e73\u8861\u6811\u7684\u5197\u4f59\u4fe1\u606f\u3002\n>\n\n- \u548c\u5927\u90e8\u5206\u5e73\u8861\u6811\u4e00\u6837\uff0cSplay_Tree \u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u6240\u6709\u8282\u70b9\u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u5b50\u6811\u6240\u6709\u8282\u70b9\u90fd\u6bd4\u5b83\u5927\u3002\u6bcf\u4e2a\u8282\u70b9\u8981\u7ef4\u62a4\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\t- \u503c\uff08$value$\uff09\n    - \u91cd\u590d\u6b21\u6570\uff08$count$\uff09\n    - \u5b50\u6811\u5927\u5c0f\uff08$size$\uff09\n    - \u5bb6\u957f\u7f16\u53f7\uff08$mother$\uff09\n    - \u5b69\u5b50\u7f16\u53f7\uff08$daughter_{0, 1}$\uff09\n\n- \u65f6\u95f4\u590d\u6742\u5ea6\u7b80\u5355\u8bc1\u660e\uff08\u76f4\u89c2\u611f\u53d7\u4e00\u4e0b\uff09\uff1a\n\n\t- \u5982\u679c\u6570\u636e\u968f\u673a\uff0c\u90a3\u4e48\u6811\u4e00\u5b9a\u5e73\u8861\uff1b\n    - \u5982\u679c\u6570\u636e\u4e0d\u968f\u673a\uff0c\u90a3\u4e48\u6bcf\u6b21\u5c06\u8981\u8bbf\u95ee\u7684\u8282\u70b9\u642c\u79fb\u81f3\u6839\uff0c\u53ef\u5e94\u4ed8\u4e0d\u968f\u673a\u7684\u6570\u636e\u3002\n\n- \u8003\u8651\u5982\u4f55\u65cb\u8f6c\u3002\n\n\t- \u8003\u8651\u5c06\u67d0\u4e00\u7ed3\u70b9\u4e0a\u65cb\u3002\n    \n    ![](https://cdn.luogu.com.cn/upload/image_hosting/2dbxqdu8.png)\n    \n    ```cpp\n\t    //\u65cb\u8f6c\u76f8\u5173\u4ee3\u7801\n        bool inline get_id(unsigned int const x) const {\n\t        return tree[tree[x].mother].daughter[1] == x;\n\t    }\n\t    void const inline upto(unsigned int const x) {\n\t        tree[x].size =\n\t            tree[tree[x].daughter[0]].size + tree[tree[x].daughter[1]].size\n\t            + tree[x].count;\n\t    }\n\t    void const inline connect\n\t        (unsigned int const x, unsigned int const y, bool const id) {\n\t        tree[x].mother = y, tree[y].daughter[id] = x;\n\t    }\n\t    void const inline rotate(unsigned int const x) {\n\t        unsigned int const m(tree[x].mother), g(tree[m].mother);\n\t        bool const id(get_id(x)), mid(get_id(m));\n\t        connect(tree[x].daughter[!id], m, id), upto(m),\n\t        connect(m, x, !id), upto(x), connect(x, g, mid);\n\t    }\n\t    ```\n    \n    - \u90a3\u4e48\u5c06\u4e00\u4e2a\u8282\u70b9\u65cb\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\u4e00\u76f4\u5c06\u8fd9\u4e2a\u8282\u70b9\u4e0a\u65cb\u3002\u7136\u800c\u8fd9\u79cd\u505a\u6cd5\u53ef\u80fd\u4f1a\u88ab\u6bd2\u7624\u51fa\u9898\u4eba\u5361\u6389\u3002\n    \n    - \u4e00\u79cd\u53ef\u884c\u89e3\u662f\uff1a\n    \t- \u5982\u679c\u8282\u70b9 $x$\u3001$x$ \u7684\u5bb6\u957f\u3001$x$ \u7684\u7956\u7236\u6bcd\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u5219\u5148\u65cb\u8f6c $x$ \u7684\u5bb6\u957f\uff0c\u518d\u65cb\u8f6c $x$\uff1b\n        - \u5982\u679c\u4e0d\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u5219\u65cb\u8f6c\u4e24\u6b21 $x$\u3002\n        ```cpp\n        //\u65cb\u8f6c\u8282\u70b9\u5230\u6307\u5b9a\u4f4d\u7f6e\u4ee3\u7801\n\t\t    void const inline splay(unsigned int const x, unsigned int root) {\n\t\t        root = tree[root].mother;\n\t\t        while (tree[x].mother not_eq root)\n\t\t            if (tree[tree[x].mother].mother == root) rotate(x);\n\t\t            else\n\t\t                if (get_id(x) == get_id(tree[x].mother))\n\t\t                    rotate(tree[x].mother), rotate(x);\n\t\t                else\n\t\t                    rotate(x), rotate(x);\n\t\t    }\n\t\t    void const inline Splay(unsigned int const x) {\n\t\t        splay(x, root), root = x;\n\t\t    }\n    \t```\n        \n**\u65cb\u8f6c\u662f Splay_Tree \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u4fdd\u8bc1\uff0c\u5728\u6bcf\u6b21\u64cd\u4f5c\u540e\u90fd\u5c3d\u91cf\u65cb\u8f6c\u3002**\n\n\u4ee5\u4e0b\u662f\u9898\u76ee\u8981\u6c42\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002\u6bd4\u8f83\u7b80\u5355\u3002\u53ef\u4ee5\u7565\u8fc7\u76f4\u63a5\u770b\u4ee3\u7801\u3002\n\n- \u63d2\u5165 $value$\n\t- \u4ece\u6839\u8282\u70b9\u8d70\u5230\u4e00\u4e2a\u503c\u4e0e $value$ \u76f8\u7b49\u7684\u8282\u70b9\u6216\u7a7a\u8282\u70b9\uff0c\u5c06\u8be5\u8282\u70b9\u7684 $count$ \u589e\u52a0\u4e00\u6216\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u3002\uff08\u5728\u8fc7\u7a0b\u4e2d\u5c06\u8def\u5f84\u4e0a\u6240\u6709 $size$ \u589e\u52a0 $1$\u3002\uff09\n\n- \u5220\u9664 $value$\n\t- \u4ece\u6839\u8282\u70b9\u8d70\u5230\u503c\u4e0e $value$ \u76f8\u7b49\u7684\u8282\u70b9\uff0c\u5c06\u8be5\u70b9 $count$ \u51cf\u5c11 $1$\u3002\uff08\u5728\u8fc7\u7a0b\u4e2d\u5c06\u8def\u5f84\u4e0a\u6240\u6709 $size$ \u51cf\u5c11 $1$\u3002\uff09\n\n- \u67e5\u8be2\u6392\u540d\n\t- \u4ece\u6839\u8282\u70b9\u8d70\u4e0b\u6765\uff0c\u5047\u5982\u8d70\u5230\u53f3\u5b50\u6811\uff0c\u5c31\u5c06\u7b54\u6848\u52a0\u4e0a\u5de6\u5b50\u6811\u5927\u5c0f\u4e0e\u5b50\u6811\u6839\u8282\u70b9 $count$ \u7684\u503c\u3002\n    \n- \u67e5\u8be2\u67d0\u6392\u540d\u7684\u6570\u3002\n\t- \u7c7b\u4f3c\u67e5\u8be2\u6392\u540d\uff0c\u5f53\u53d1\u73b0\u8981\u67e5\u8be2\u7684\u6392\u540d\u6b63\u597d\u5728\u5f53\u524d\u8282\u70b9\u4e2d\u7684\u8bdd\u5c31\u8fd4\u56de\u3002\n    \n- \u67e5\u8be2 $value$ \u7684\u524d\u9a71\n\t- \u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6cd5\u662f\u67e5\u8be2\u6392\u540d\u4e3a $value$ \u7684\u6392\u540d\u51cf\u4e00\u7684\u6570\u3002\n    - \u4e5f\u53ef\u4ee5\u4e0d\u65ad\u903c\u8fd1 $value$\uff0c\u66f4\u65b0\u7b54\u6848\u3002\n    \n- \u67e5\u8be2 $value$ \u7684\u540e\u7ee7\n\t- \u540c\u7406\u67e5\u8be2\u524d\u9a71\u3002\n\n```cpp\ntemplate<typename T = unsigned int>\nclass Balanced_Binary_Tree {\nprivate:\n    struct Point {\n        T value;\n        unsigned int count;\n        unsigned int size;\n        unsigned int daughter[2], mother;\n        Point() { size = count = 0, mother = daughter[1] = daughter[0] = 0; }\n        Point(T const value) {\n            this->value = value,\n            size = count = 1, mother = daughter[1] = daughter[0] = 0;\n        }\n    } tree[N + M + 1];\n    unsigned int length, size, root;\n    bool inline get_id(unsigned int const x) const {\n        return tree[tree[x].mother].daughter[1] == x;\n    }\n    void const inline upto(unsigned int const x) {\n        tree[x].size =\n            tree[tree[x].daughter[0]].size + tree[tree[x].daughter[1]].size\n            + tree[x].count;\n    }\n    void const inline connect\n        (unsigned int const x, unsigned int const y, bool const id) {\n        tree[x].mother = y, tree[y].daughter[id] = x;\n    }\n    void const inline rotate(unsigned int const x) {\n        unsigned int const m(tree[x].mother), g(tree[m].mother);\n        bool const id(get_id(x)), mid(get_id(m));\n        connect(tree[x].daughter[!id], m, id), upto(m),\n        connect(m, x, !id), upto(x), connect(x, g, mid);\n    }\n    void const inline splay(unsigned int const x, unsigned int root) {\n        root = tree[root].mother;\n        while (tree[x].mother not_eq root)\n            if (tree[tree[x].mother].mother == root) rotate(x);\n            else\n                if (get_id(x) == get_id(tree[x].mother))\n                    rotate(tree[x].mother), rotate(x);\n                else\n                    rotate(x), rotate(x);\n    }\n    void const inline Splay(unsigned int const x) {\n        splay(x, root), root = x;\n    }\npublic:\n    Balanced_Binary_Tree() { size = length = 0; }\n    void const inline Insert(T const x) {\n        if (not size++) {\n            tree[root = ++length] = Point(x), connect(root, 0, 0);\n            return;\n        }\n        for (unsigned int register i(root); ++tree[i].size, true;) {\n            if (tree[i].value == x)\n                { ++tree[i].count, Splay(i); return; }\n            else {\n                bool id(tree[i].value < x);\n                if (not tree[i].daughter[id]) {\n                    tree[++length] = Point(x), connect(length, i , id),\n                    Splay(length);\n                    return;\n                }\n                else\n                    i = tree[i].daughter[id];\n            }\n        }\n    }\n    void const inline Delete(T const x) {\n        --size;\n        for (\n            unsigned int register i(root);\n            tree[i].size--;\n            i = tree[i].daughter[x > tree[i].value]\n        )\n            if (tree[i].value == x) {\n                if (--tree[i].count) { Splay(i); return; }\n                Splay(i);\n                if (not tree[i].daughter[0])\n                    { connect(root = tree[i].daughter[1], 0, 0); return; }\n                if (not tree[i].daughter[1])\n                    { connect(root = tree[i].daughter[0], 0, 0); return; }\n                unsigned int j(tree[i].daughter[0]);\n                while (tree[j].daughter[1]) j = tree[j].daughter[1];\n                splay(j, tree[i].daughter[0]);\n                connect(tree[i].daughter[1], tree[i].daughter[0], 1),\n                upto(tree[i].daughter[0]),\n                connect(root = tree[i].daughter[0], 0, 0);\n                return;\n            }\n    }\n    unsigned int inline Get_Ranking(T const x) {\n        unsigned int r(1);\n        for (unsigned int register i(root); i;)\n            if (tree[i].value == x)\n                { Splay(i); return tree[tree[i].daughter[0]].size + 1; }\n            else\n                if (tree[i].value < x)\n                    r += tree[tree[i].daughter[0]].size + tree[i].count,\n                    i = tree[i].daughter[1];\n                else\n                    i = tree[i].daughter[0];\n        return r;\n    }\n    unsigned int inline Get_Rank(unsigned int const x) {\n        unsigned int r(1);\n        for (unsigned int register i(root); true;) {\n            if (\n                r + tree[tree[i].daughter[0]].size <= x\n                and x < r + tree[tree[i].daughter[0]].size + tree[i].count\n            ) { Splay(i); return tree[i].value; }\n            else\n                if (x < r + tree[tree[i].daughter[0]].size)\n                    i = tree[i].daughter[0];\n                else\n                    r += tree[tree[i].daughter[0]].size + tree[i].count,\n                    i = tree[i].daughter[1];\n        }\n    }\n    T inline Get_Less(T const x) {\n        T r; unsigned int register li;\n        for (unsigned int register i(root); i;)\n            if (tree[i].value >= x) li = i, i = tree[i].daughter[0];\n            else r = tree[li = i].value, i = tree[i].daughter[1];\n        Splay(li);\n        return r;\n    }\n    T inline Get_Greater(T const x) {\n        T r; unsigned int register li;\n        for (unsigned int register i(root); i;)\n            if (tree[i].value <= x) li = i, i = tree[i].daughter[1];\n            else r = tree[li = i].value, i = tree[i].daughter[0];\n        Splay(li);\n        return r;\n    }\n};\n```",
        "postTime": 1582850416,
        "uid": 321004,
        "name": "Houraisan_Kaguya",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6136"
    },
    {
        "content": "\u770b\u5230\u9898\u76ee\u7684\u65f6\u5019\u6211\u4e00\u9635\u7a83\u559c\uff0c\u56e0\u4e3a\u4e0a\u4e2a\u6708\u6211\u521a\u521a\u7814\u7a76\u4e86vector\u6c34\u5e73\u8861\u6811\u600e\u4e48\u6269\u5c55\uff0c\u594b\u6218\u4e24\u5929\u540e\u5f97\u5230[\u8fd9\u6837\u7684\u7ed3\u679c](https://www.luogu.com.cn/blog/ysl/kai-fa-vector)\u3002\uff08\u5efa\u8bae\u5148\u770b\u5b8c\u6b64\u9898\u89e3\uff0c\u518d\u770b\u6b64\u535a\u5ba2\uff09\n\n\u4f46\u662f\u56e0\u4e3a\u8fd9\u9053\u9898\u7684n\u548cm\u90fd\u8f83\u5c0f\uff0c\u6240\u4ee5\u91cc\u9762\u5f88\u591a\u4f18\u5316\u662f\u4e0d\u9700\u8981\u7684\uff0c\u6240\u4ee5\u7528\u5757\u72b6vector\u505a\u6b64\u9898\u62e5\u6709\u4ee3\u7801\u7b80\u7ec3\uff0c\u901a\u4fd7\u6613\u61c2\u4e14\u901f\u5ea6\u5feb\uff0c\u7a7a\u95f4\u5c0f\u7684\u4f18\u70b9\u3002\uff08\u53ef\u80fd\u662f\u7406\u89e3\u8d77\u6765\u6700\u7b80\u5355\uff0c\u7a7a\u95f4\u6700\u5c0f\u7684\u505a\u6cd5\uff09\n\n\u7531\u4e8em\u6bd4n\u5927\u5f97\u591a\uff0c\u6240\u4ee5\u6211\u4e0b\u9762\u7528m\u4ee3\u66ff\u539f\u9898\u4e2d\u7684n+m\uff0c\u540c\u65f6\u4e3a\u4e86\u65b9\u4fbf\uff0c\u7528size\u8868\u793a\u67d0vector\u4e2d\u5143\u7d20\u4e2a\u6570\u3002\n\n\u9996\u5148\u4f60\u8981\u77e5\u9053\uff0cvector\u7684insert\u548cerase\u662fO(size)\u7684\uff0c\u4f46\u5e38\u6570\u7279\u522b\u5c0f\uff08\u5982\u679c\u5361\u6ee1\u8fd8\u662f\u6bd4bitset\u6162\u4e00\u534a\uff0c\u968f\u673a\u6570\u636e\u597d\u4e00\u70b9\uff09\uff08\u6240\u4ee5\u5927\u6982\u53ef\u4ee5\u5199\u6210\u662fO(size/w)\uff1f\uff09\uff0c\u7136\u540e\u8fd8\u8981\u77e5\u9053vector\u600e\u4e48\u505a\u666e\u901a\u5e73\u8861\u6811\uff08\u539f\u7248\uff09\u3002\n\n\u8fd9\u91cc\u5047\u8bbe\u5927\u5bb6\u90fd\u77e5\u9053\u4e86\uff08\u4e0d\u77e5\u9053\u7684\u4e5f\u4e0d\u4f1a\u6765\u505a\u8fd9\u4e2a\u9898\u5427\uff09\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u91ccm=1e6,\u76f4\u63a5\u5957\u7528\u90a3\u4e2a\u505a\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(m^2)\u7684\uff0c\u867d\u7136\u5b83\u7684\u5e38\u6570\u7279\u522b\u5c0f\uff0c\u4f46\u4e5f\u6ca1\u6709\u5c0f\u5230\u8fd9\u4e2a\u7a0b\u5ea6\uff0c\u59a5\u59a5\u7684TLE\u3002\n\n\u7136\u540e\u6211\u4eec\u5c1d\u8bd5\u4f18\u5316\uff1a\u6211\u4eec\u53d1\u73b0\u5728\u8fd9\u4e2a\u505a\u6cd5\u4e2d\uff0c\u53ea\u6709insert\u548cerase\u662fO(size) \u7684\uff0c\u800c\u5176\u4ed6\u64cd\u4f5c\u90fd\u662fO(log)\u6216O(1)\u7684\uff0c\u6781\u5ea6\u4e0d\u5e73\u8861\u3002\u4f17\u6240\u5468\u77e5\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5904\u7406\u590d\u6742\u5ea6\u4e0d\u5e73\u8861\u60c5\u51b5\u7684\u505a\u6cd5\u662f\u5206\u5757\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7528\u5206\u5757\u4f18\u5316\u8fd9\u4e2a\u66b4\u529b\u3002\n\n\u4f46\u662f\u7531\u4e8e\u5143\u7d20\u4f1a\u5b9e\u65f6\u6539\u53d8\u6240\u4ee5\u6ca1\u6cd5\u76f4\u63a5\u5206\u5757\uff0c\u8981\u7528\u5757\u72b6\u94fe\u8868\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u6211\u628a\u8fd9\u4e2a\u4e1c\u897f\u53eb\u5757\u72b6vector\u3002\n\n\u5177\u4f53\u800c\u8a00\uff1a\u628a\u4e00\u4e2a\u5927vector\u62c6\u6210\u82e5\u5e72\u4e2a\u5c0fvector\uff0c\u8981\u4fdd\u8bc1\u8fd9\u4e9bvector\u90fd\u662f\u6709\u987a\u5e8f\u7684\uff0c\u5373\u4e0b\u4e00\u4e2avector\u4e2d\u7684\u5143\u7d20\u90fd\u4e0d\u5c0f\u4e8e\u4e0a\u4e00\u4e2avector\u4e2d\u7684\u5143\u7d20\uff0c\u540c\u65f6\u4e00\u4e2avector\u5185\u90e8\u4e5f\u8981\u4fdd\u8bc1\u6709\u5e8f\u3002\n\n\u9996\u5148\u8003\u8651\u91cd\u6784\u64cd\u4f5c\uff0c\u7531\u4e8em\u8f83\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u771f\u7684\u5199\u5757\u72b6\u94fe\u8868\uff0c\u6bcf\u8fdb\u884ct\u6b21\u64cd\u4f5c\u540e\u53ef\u4ee5\u66b4\u529b\u5168\u5c40\u91cd\u6784\uff0c\u6bcf\u6b21\u91cd\u6784\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(m)\u7684\uff0c\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u662fO(m^2/t)\u7684\uff0c\u6b64\u5916\u6211\u4eec\u8981\u51b3\u5b9a\u91cd\u6784\u5757\u957f\uff0c\u8bb0\u4e3alen,\u8868\u793a\u91cd\u6784\u7ed3\u675f\u6bcf\u4e2avector\u4e2d\u6709len\u4e2a\u5143\u7d20\u3002\n\n**uodate**:\u6211\u5df2\u7ecf\u627e\u5230\u4e86\u66f4\u597d\u7684\u5199\u6cd5\u65b9\u4fbf\u7684\u91cd\u6784\u65b9\u6cd5\uff1a\u4e0d\u7ba1t\u7684\u9650\u5236\uff0c\u53ea\u6709\u5f53\u67d0\u4e00\u4e2a\u5757\u88ab\u5220\u6210\u7a7a\u5757\u6216\u957f\u5ea6\u5927\u4e8e2*len\u7684\u65f6\u5019\u518d\u91cd\u6784\uff08\u66f4\u9760\u8fd1\u5757\u72b6\u94fe\u8868\u7684\u505a\u6cd5\uff09\uff0c\u8fd9\u6837\u6709\u4e00\u4e2a\u597d\u5904\u662f\u6570\u636e\u5f31\u7684\u65f6\u5019\u53ef\u4ee5\u5927\u5e45\u5ea6\u51cf\u5c11\u91cd\u6784\u6b21\u6570\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u4e5f\u662f\u6bcflen\u6b21\u64cd\u4f5c\u5c31\u8981\u91cd\u6784\u4e00\u6b21\uff0c\u6240\u4ee5\u4e0d\u4f1a\u9020\u6210\u8d1f\u4f18\u5316\uff0c\u7531\u4e8e\u6570\u636e\u8f83\u6c34\uff0c\u6211\u628alen\u5f00\u7684\u5f88\u5c0f\u4e5f\u6ca1\u6709\u51fa\u73b0\u5927\u91cf\u91cd\u6784\u7684\u73b0\u8c61\uff0c\u4e8e\u662f\u8fd9\u4e2a\u505a\u6cd5\u73b0\u5728\u6210\u4e86\u6700\u4f18\u89e3\uff0c\u8fd9\u91cc\u662f[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.com.cn/record/31181649)\u3002\n\n\u7136\u540e\u5c31\u662f\u5e73\u8861\u6811\u90e8\u5206\u7684\u64cd\u4f5c\u4e86\u3002\n\n\u9996\u5148\u8981\u5199\u4e00\u4e2awork()\u51fd\u6570\uff0c\u8868\u793a\u6211\u4eec\u8981\u627e\u5230\u67d0\u4e2a\u5143\u7d20\u5728\u7b2c\u51e0\u4e2a\u5757\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2avector\u5f00\u59cb\u6bcf\u6b21\u6bd4\u8f83\u8fd9\u4e2avector\u5f00\u5934\u7684\u5143\u7d20\u548c\u6211\u5f53\u524d\u8981\u67e5\u8be2\u7684\u5143\u7d20\u54ea\u4e2a\u66f4\u5927\uff0c\u9047\u5230\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\uff0c\u5c31\u8fd4\u56de\u4e0a\u4e00\u4e2avector\u3002\n\n\u63d2\u5165:\u5148\u8c03\u7528work(),\u7136\u540e\u6b63\u5e38\u7684\u4e8c\u5206insert\u5c31\u597d\u4e86\u3002\n\n\u5220\u9664:\u5148\u8c03\u7528work(),\u7136\u540e\u6b63\u5e38\u7684\u4e8c\u5206\u627e\u5230\u5b83\u7684\u4f4d\u7f6e\u7136\u540eerase\u3002\n\n\u67e5\u6392\u540d\uff1a\u5148\u627e\u5230\u5b83\u5728\u54ea\u4e00\u5757\uff0c\u7136\u540e\u7b54\u6848\u5c31\u662f\u5b83\u524d\u9762\u6240\u6709\u7684vector\u7684size\u548c\u52a0\u4e0a\u5f53\u524dvector\u4e2d\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u6700\u540e+1.\uff08\u6ce8\u610f\u8fd9\u91cc\u6392\u540d\u6307\u7684\u662f\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u7684\u4e2a\u6570+1\uff0c\u5b83\u81ea\u5df1\u4e0d\u4e00\u5b9a\u771f\u7684\u51fa\u73b0\u67d0\u4e2a\u5728vector\u4e2d\uff09\n\n\u67e5\u7b2ck\u5c0f\uff1a\u4ece\u7b2c\u4e00\u4e2avector\u5f00\u59cb\uff0c\u6bcf\u6b21\u5224\u65adk\u4e0e\u8fd9\u4e2avetor\u7684size\u5927\u5c0f\uff0c\u5982\u679ck>size,\u8bf4\u660e\u5b83\u4e0d\u5728\u8fd9\u4e2avector\u5185\uff0c\u5c06k\u51cfsize\uff0c\u7136\u540e\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4e2avector\uff0c\u5426\u5219\u8fd9\u4e2a\u5143\u7d20\u5c31\u5728\u8fd9\u4e2avector\u5185\uff0c\u76f4\u63a5\u8fd4\u56devector\u4e2d\u7b2ck\u4e2a\u5143\u7d20\u5c31\u597d\u4e86\u3002\n\n\u6c42x\u7684\u524d\u9a71\uff1a\u5148\u627e\u5230x\u7684\u6392\u540dk\uff0c\u7136\u540e\u8fd4\u56de\u7b2ck-1\u5c0f\u3002\n\n\u6c42x\u7684\u540e\u7ee7\uff1a\u5148\u627e\u5230x+1\u7684\u6392\u540dk\uff0c\u7136\u540e\u8fd4\u56de\u7b2ck\u5c0f\u3002\n\n\u5206\u6790\u590d\u6742\u5ea6\uff1a\u7531\u4e8e\u6bcf\u5757\u957f\u4e3alen,\u6240\u4ee5\u5171\u6709m/len\u4e2a\u5757\uff0c\u6240\u4ee5\u6211\u4eec\u7684work()\u51fd\u6570\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m/len)\u7684\uff0c\u5176\u4ed66\u4e2a\u51fd\u6570\u672c\u8d28\u4e0a\u90fd\u9700\u8981\u8c03\u7528\u4e00\u6b21work()\u51fd\u6570\u6240\u4ee5\u90fd\u8981\u7b97\u4e0a\uff0c\u6b64\u5916\u67e5\u6392\u540d\u6709\u4e00\u4e2aO(log len) \u7684\u4e8c\u5206\uff0c\u524d\u9a71\u540e\u7ee7\uff08\u4e3a\u4e86\u597d\u5199\uff09\u8c03\u7528\u4e86\u6392\u540d\u51fd\u6570\u6240\u4ee5\u4e5f\u8981\u5e26\u8fd9\u4e2alog\uff0cinsert\u548cerase\u9664\u4e86\u5e26\u8fd9\u4e2alog\u8fd8\u989d\u5916\u9644\u52a0\u4e00\u4e2aO((len+t)/w),\u5176\u4e2dw\u662f\u4e2a\u5927\u5e38\u6570,\u52a0t\u7684\u539f\u56e0\u662f\u53ef\u80fd\u591a\u6b21\u53ea\u5411\u4e00\u4e2avector\u63d2\u5165\u4f1a\u4f7f\u5b83\u4ea7\u751f\u65e0\u6cd5\u5ffd\u7565\u7684\u53d8\u957f\u3002\n\n\u6240\u4ee5\u6700\u6162\u7684\u64cd\u4f5c\u4f9d\u65e7\u4e3ainsert,\u590d\u6742\u5ea6O(m/len + log len + (len+t)/w);\n\n\u7b97\u4e0a\u91cd\u6784\u7684\u65f6\u95f4\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO( m^2/t + m( m/len +log len +(len+t)/w ) )\uff0c\u8fd9\u91cc\u53d6 len=t=1e4 \u5373\u53ef\u901a\u8fc7\u672c\u9898\u3002\n\n**update**:\u7531\u4e8e\u4eca\u5929\u53d1\u73b0vector\u7684\u5e38\u6570\u6ca1\u6709\u6211\u60f3\u8c61\u7684\u90a3\u4e48\u5c0f\uff0c\u6240\u4ee5\u628alen\u548ct\u5f00\u7684\u518d\u5c0f\u4e00\u70b9\u53ef\u80fd\u4f1a\u66f4\u597d\u3002\n\n\u4f46\u4e8b\u5b9e\u4e0a\u6b64\u505a\u6cd5\u8fd8\u6709\u8f83\u9ad8\u7684\u62d3\u5c55\u6027\uff0c\u5177\u4f53\u505a\u6cd5\u6211\u5df2\u7ecf\u653e\u5728\u6700\u5f00\u5934\u7684\u94fe\u63a5\u7684\u535a\u5ba2\u91cc\u4e86\uff0c\u7528\u5408\u7406\u7684\u65b9\u6cd5\u4f18\u5316\u6b64\u505a\u6cd5\u80fd\u5728m=1e7\u7684\u65f6\u5019\u4ecd\u4e0d\u8f93\u5e73\u8861\u6811\uff0c\u800c\u4e14\u53ef\u80fd\u4e5f\u6709\u5f88\u591a\u6211\u4e0d\u77e5\u9053\u7684\u5e38\u6570\u4f18\u5316\uff0c\u4f46\u7531\u4e8e\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4e2a\u4eba\u4e5f\u6ca1\u6709\u5199\u8fc7\u5757\u72b6\u94fe\u8868\uff0c\u6240\u4ee5\u6211\u6ca1\u6709\u4ee3\u7801\u5b9e\u73b0\uff0c\u90a3\u4e48\u6b22\u8fce\u5927\u5bb6\u5b9e\u73b0\u4e00\u4e0b\u90a3\u4e2a\u505a\u6cd5\u3002\n\n\u6309t\u91cd\u6784\u7684\u8bdd\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\uff1a\u5982\u679ct>len,\u90a3\u4e48\u6709\u53ef\u80fd\u4f1a\u5728\u4e24\u6b21\u91cd\u6784\u671f\u95f4\u5220\u5b8c\u67d0\u4e2avector,\u8fb9\u754c\u6761\u4ef6\u53d8\u5f97\u96be\u4ee5\u5904\u7406\uff0c\u4e00\u4e2a\u5b9e\u73b0\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u5220\u5230\u67d0 vector\u4e3a\u7a7a\u65f6\u76f4\u63a5\u91cd\u6784\u3002\u6b64\u5916\u6700\u540e\u4e00\u4e2avector\u7531\u4e8e\u957f\u5ea6\u4e0d\u8db3len,\u6240\u4ee5\u65e0\u8bbat\u548clen\u600e\u4e48\u8bbe\uff0c\u90fd\u6709\u53ef\u80fd\u88ab\u5220\u5b8c\uff0c\u8fd9\u65f6\u7279\u5224\u4e00\u4e0b\uff0c\u5982\u679c\u6700\u540e\u4e00\u4e2avector\u88ab\u5220\u5b8c\u4e86\u76f4\u63a5\u628avector\u7684\u6570\u91cf-1\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\u8d34\u4e0a\u7b80\u5355\u6613\u61c2\u7684\u4ee3\u7801\uff0c\u6709\u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\u770b\u4ee3\u7801\u5427\uff1a\uff08\u6309t\u91cd\u6784\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define find() lower_bound(v[i].begin(),v[i].end(),x)\n#define gc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nusing namespace std;\ninline int read()\n{\n\tstatic char buf[1<<21],*p1,*p2;\n\tint f=0,c=1; char ch=gc();\n\twhile(ch<'0'||ch>'9') { if(ch=='-') c=-1; ch=gc(); }\n\twhile(ch>='0'&&ch<='9') { f=f*10+ch-'0'; ch=gc(); }\n\treturn c*f;\n}\nconst int t=10000,len=10000;//\u6bcft\u6b21\u64cd\u4f5c\u91cd\u6784\u4e00\u6b21\uff0c\u6bcf\u4e2avector\u7684\u957f\u5ea6\u4e3alen \nint a[1234567];\nvector <int> v[1000];\nint op,x,y,n,m,sz,tot,cnt,lst,ans;//sz\u8bb0\u6709\u51e0\u4e2avector \nvoid init(int flag=0)//\u91cd\u6784 \n{\n\tif(!flag) tot=0; cnt=0; \n\tfor(int i=1;i<=sz;++i)\n\t{\n\t\tint m=v[i].size();\n\t\tfor(int j=0;j<m;++j)\n\t\t\ta[++tot]=v[i][j];\n\t\tv[i].clear();\n\t}\n\tsz=tot/len+(tot%len!=0);\n\tsz=max(sz,1);//\u7279\u5224\u4e00\u4e0b\u6ca1\u6709\u5143\u7d20\u7684\u60c5\u51b5 \n\tfor(int i=1;i<sz;++i)\n\t\tfor(int j=0;j<len;++j) \n\t\t\tv[i].push_back(a[++cnt]);\n\twhile(cnt<tot) v[sz].push_back(a[++cnt]);\n}\nint work(int x)//\u5b9a\u4f4dx\u5728\u90a3\u4e00\u5757 \n{\n\tint i=1;\n\twhile(i<=sz&&v[i][0]<x) ++i;\n\t--i;  \n\treturn max(1,i);//\u6709\u53ef\u80fdx\u662f\u6700\u5c0f\u7684\u5143\u7d20\u4f1a\u8fd4\u56de0\uff0c\u7279\u5224\u4e00\u4e0b \n}\nvoid insert(int x) { int i=work(x); v[i].insert(find(),x); }\nvoid erase(int x) \n{ \n\tint i=work(x); \n\tif(find()!=v[i].end()) v[i].erase(find()); //\u6709\u53ef\u80fd\u5b83\u5c31\u662f\u4e0b\u4e00\u4e2a\u5757\u5f00\u5934\u7684\u5143\u7d20\uff0c\u7279\u5224\u4e00\u4e0b\n\telse v[i+1].erase(v[i+1].begin());\n\tif(v[sz].size()==0) sz=max(sz-1,1);//\u6700\u540e\u4e00\u5757\u7531\u4e8e\u4e0d\u5b8c\u6574\uff0c\u662f\u6709\u53ef\u80fd\u88ab\u5220\u5b8c\u7684 \n}\nint rnk(int x) \n{ \n\tint i=work(x),ans=0;\n\tfor(int j=1;j<i;++j) ans+=v[j].size();\n\treturn ans+(find()-v[i].begin())+1;\n}\nint kth(int x)\n{\n\tfor(int i=1;i<=sz;++i)\n\t{\n\t\tif(x<=v[i].size()) return v[i][x-1]; \n\t\tx-=v[i].size();\n\t}\n}\nint pre(int x) { return kth(rnk(x)-1); }\nint nxt(int x) { return kth(rnk(x+1)); }\nint main()\n{\n//\tfreopen(\"test.in\",\"r\",stdin);\n//\tfreopen(\"test.out\",\"w\",stdout);\n\tn=read(); m=read();\n\tfor(int i=1;i<=n;++i) a[i]=read();\n\tsort(a+1,a+n+1);\n\ttot=n; init(1);//\u5f00\u59cb\u7684\u65f6\u5019\u7531\u4e8en>len,  \u6240\u4ee5\u8fd9\u91cc\u8981\u91cd\u6784 \n\twhile(m--)\n\t{\n\t\tif(m%t==0) init();//\u91cd\u6784 \n\t\top=read(); x=read()^lst;\n\t\tif(op==1) insert(x);\n\t\tif(op==2) erase(x);\n\t\tif(op==3) lst=rnk(x);\n\t\tif(op==4) lst=kth(x);\n\t\tif(op==5) lst=pre(x);\n\t\tif(op==6) lst=nxt(x);\n\t\tif(op>=3) ans^=lst;\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1582799381,
        "uid": 161160,
        "name": "VictorYuan",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "[$\\Large\\color{#FFBBFF}\\textit{Tian-Xing's blog}$](https://Tian-Xing.github.io)\n\n------------\n\n# $1.1$ $Leafy \\ Tree$ \n\n### \u5b9a\u4e49\n\n>$Leafy \\ Tree$ \u662f\u4e00\u79cd\u4e8c\u53c9\u6811\uff0c\u5176\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u4e3a\u53f6\u5b50\uff0c\u8981\u4e48\u6709\u4e24\u4e2a\u513f\u5b50\u3002\u5176\u4fe1\u606f\u5b8c\u5168\u50a8\n\u5b58\u5728\u53f6\u5b50\u4e0a\u9762\uff0c\u6bcf\u4e2a\u975e\u53f6\u8282\u70b9\u5b58\u50a8\u7684\u4fe1\u606f\u662f\u5176\u513f\u5b50\u7684\u4fe1\u606f\u7684\u5408\u5e76\u3002\n\n\u4f8b\u5982\u7ebf\u6bb5\u6811\u5c31\u662f\u4e00\u79cd$Leafy \\ Tree$\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u5b58\u7684\u4fe1\u606f\u662f\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u4fe1\u606f\u4e4b\u548c\u3002\n\n\u5728\u7528$Leafy \\ Tree$\u5b9e\u73b0\u91cd\u91cf\u5e73\u8861\u6811\u7684\u529f\u80fd\u7684\u65f6\u5019\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4e3a\u5176\u53f3\u5b50\u8282\u70b9\u7684\u6743\u503c\uff0c\u91cd\u91cf\u4e3a\u5de6\u53f3\u8282\u70b9\u91cd\u91cf\u4e4b\u548c\uff0c\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u4e3a\u96c6\u5408\u4e2d\u7684\u6570\u3002\n\n\u4f7f\u7528$Leafy \\ Tree$\u5b9e\u73b0\u91cd\u91cf\u5e73\u8861\u6811\u7684\u65b9\u6cd5\u53eb$WBLT(Weight \\ Balanced \\ Tree + Leafy \\ Tree)$\u3002\n\n\u56e0\u4e3a\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u5b58\u50a8\u96c6\u5408\u4e2d\u7684\u6570\uff0c\u6240\u4ee5$WBLT$\u4f7f\u7528\u7684\u8282\u70b9\u6570\u662f\u522b\u7684\u79cd\u7c7b\u7684\u5e73\u8861\u6811\u7684\u4e24\u500d\u3002\n\n\u4f46\u662f$WBLT$\u53ef\u6301\u4e45\u5316\u6bd4\u8f83\u65b9\u4fbf\uff0c\u901f\u5ea6\u4e5f\u5f88\u5feb\uff0c\u4e00\u822c\u6765\u8bb2\u6bd4$Splay$\u5feb\uff0c\u548c\u66ff\u7f6a\u7f8a\u6811\u5dee\u4e0d\u591a\u3002\n\n# $1.2$ \u52a0\u6743\u5e73\u8861\u6811\n\n### \u5b9a\u4e49\n\n>\u52a0\u6743\u5e73\u8861\u6811\uff08$Weight \\ Balanced \\ Tree$\uff0c\u4e5f\u53eb $BB[\\alpha]$ \u6811\uff0c\u91cd\u91cf\u5e73\u8861\u6811\uff09\u662f\u4e00\u79cd\u50a8\u5b58\u5b50\u6811\u5927\u5c0f\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002\u5373\u4e00\u4e2a\u7ed3\u70b9\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a\u503c\u3001\u5de6\u513f\u5b50\u3001\u53f3\u513f\u5b50\u3001\u5b50\u6811\u5927\u5c0f\u3002\n\n>\u91cd\u91cf\u5e73\u8861\u6811\u4e2d\u5982\u679c\u4e00\u4e2a\u8282\u70b9$x$\u6ee1\u8db3$min(weight_{x.left},weight_{x.right}) \u2265\\alpha \\times weight_x$,\u5219\u79f0\u8fd9\u4e2a\u8282\u70b9\u662f$\\alpha$\u52a0\u6743\u5e73\u8861\u7684\uff0c\u663e\u7136$0 < \\alpha \\leq \\frac{1}{2}$\u3002\u4e00\u68f5\u542b\u6709$n$\u4e2a\u5143\u7d20\u7684\u52a0\u6743\u5e73\u8861\u6811\u7684\u9ad8\u5ea6$h$\u6ee1\u8db3$h \\leq \\log_{\\frac{1}{1 - \\alpha}} n = O(\\log n)$\u3002\n\n\u66ff\u7f6a\u7f8a\u6811\u5c31\u662f\u4e00\u79cd\u91cd\u91cf\u5e73\u8861\u6811\u3002\n\n\u5f53\u8282\u70b9\u7684\u67d0\u4e2a\u513f\u5b50$x$\u7684\u5927\u5c0f\u5c0f\u4e8e\u4e86$\\alpha \\times$\u8282\u70b9$x$\u7684\u5927\u5c0f\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u64cd\u4f5c\u4f7f\u5176\u5e73\u8861\u3002\n\n\u5728\u66ff\u7f6a\u7f8a\u6811\u91cc\u6211\u4eec\u901a\u8fc7\u91cd\u6784\u6574\u4e2a$x$\u8282\u70b9\u7684\u5b50\u6811\u4f7f\u5176$\\alpha$\u52a0\u6743\u5e73\u8861\u3002\n\n\u5728$WBLT$\u4e2d\u6211\u4eec\u901a\u8fc7\u65cb\u8f6c\u6216\u8005\u91cd\u6784\u7684\u65b9\u5f0f\u4f7f\u5176$\\alpha$\u52a0\u6743\u5e73\u8861\u3002\n\n\u901a\u8fc7\u65cb\u8f6c\u4f7f\u8282\u70b9\u5e73\u8861\u7684$WBLT$\u6709\u5355\u65cb\u548c\u53cc\u65cb\u7684\u5199\u6cd5\uff0c\u867d\u7136\u5355\u65cb\u4e5f\u633a\u5feb\u4f46\u662f\u5355\u65cb\u7684\u590d\u6742\u5ea6\u662f\u9519\u8bef\u7684\uff0c\u800c\u4e14\u4e00\u822c\u6bd4\u53cc\u65cb\u6162\u3002\n\n\u4e0d\u8fc7\u5355\u65cb\u5012\u662f\u5e94\u8be5\u4e5f\u6ca1\u6709\u4eba\u5361\u3002\n\n# $2.1$ $Leafy \\ Tree$\u5b9e\u73b0\u4e8c\u53c9\u641c\u7d22\u6811\n\n\u9996\u5148\u5148\u6765\u770b\u4e0d\u7528\u52a0\u6743\u5e73\u8861\u7684\u64cd\u4f5c\u3002\n\n### $Pushup$\n\n```cpp\nvoid Pushup(int k) \n{ \n   tr[k].v = tr[tr[k].son[1]].v; \n   tr[k].siz = tr[tr[k].son[0]].siz + tr[tr[k].son[1]].siz; \n   return; \n}\n```\n\n\u6309\u7167\u5b9a\u4e49\u8fdb\u884c$Pushup$\u5373\u53ef\u3002\n\n### $Recycle$\u548c$Id$\n\n```cpp\nint Id() { return poolsize ? pool[poolsize--] : ++num; };\n\nvoid Recycle(int x) { pool[++poolsize] = x; return; }\n```\n\n\u56e0\u4e3a$WBLT$\u4f7f\u7528\u8282\u70b9\u6bd4\u8f83\u591a\uff0c\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\u53ef\u4ee5\u5bf9\u5220\u6389\u7684\u8282\u70b9\u8fdb\u884c\u56de\u6536\u64cd\u4f5c\u3002\u5f00\u4e00\u4e2a\u6808\u8868\u793a\u53ef\u4ee5\u4f7f\u7528\u7684\u7f16\u53f7\uff0c\u6bcf\u6b21\u5220\u9664\u65f6\u628a\u7f16\u53f7\u4e22\u8fdb\u6808\u91cc\u5373\u53ef\u3002\n\n### $Newnode$\n\n```cpp\nint Newnode(int x)\n{\n    int k = Id();\n    tr[k].siz = 1;\n    tr[k].v = x;\n    tr[k].son[0] = tr[k].son[1] = 0;\n    return k;\n}\n```\n\n\u65b0\u5efa\u4e00\u4e2a\u6743\u503c\u4e3a$x$\u7684\u8282\u70b9\uff0c\u8fd4\u56de\u5176\u6807\u53f7\u3002\n\n### $Merge$\n\n```cpp\nint Merge(int x, int y)\n{\n    int k = Id();\n    tr[k].son[0] = x; tr[k].son[1] = y;\n    Pushup(k);\n    return k;\n}\n```\n\n\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u5c06\u4e24\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u5408\u5e76\uff0c\u8fd4\u56de\u65b0\u5efa\u7684\u8282\u70b9\u7684\u7f16\u53f7\u3002\n\n### $Insert$\n\n```cpp\nvoid Insert(int &k, int x)\n{\n    if (!k) { k = Newnode(x); return; }\n    if (tr[k].siz == 1) \n    { \n    \tk = x > tr[k].v ? Merge(k, Newnode(x)) : Merge(Newnode(x), k); \t\t \n        return;\n    }\n    else Insert(tr[k].son[x > tr[tr[k].son[0]].v], x);\n    Pushup(k); Maintain(k);\n    return;\n}\n```\n$WBLT$\u91cc\u7684\u8282\u70b9\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\u5c31\u4e00\u5b9a\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u6309\u987a\u5e8f\u8d70\u5230\u53f6\u5b50\u8282\u70b9\u7136\u540e\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u5176\u513f\u5b50\u662f\u65b0\u63d2\u5165\u7684\u8282\u70b9\u548c\u539f\u6765\u8be5\u4f4d\u7f6e\u4e0a\u7684\u8282\u70b9\u3002\n\n### $Delete$\n\n```cpp\nvoid Delete(int &k, int x)\n{\n    if (tr[k].siz == 1) { Recycle(k); k = 0; return; }\n    int d = x > tr[tr[k].son[0]].v;\n    if (tr[tr[k].son[d]].siz == 1) Recycle(k), Recycle(tr[k].son[d]), k = tr[k].son[d ^ 1];\n    else Delete(tr[k].son[d], x), Pushup(k), Maintain(k);\n    return;\n}\n```\n\n\u4e00\u8def\u5f80\u4e0b\u8d70\u627e\u5230\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u7136\u540e\u7528\u7236\u4eb2\u8282\u70b9\u7684\u53e6\u5916\u4e00\u4e2a\u513f\u5b50\u4ee3\u66ff\u7236\u4eb2\u8282\u70b9\u3002\n\n\u5176\u5b83\u57fa\u7840\u64cd\u4f5c\u548c\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u64cd\u4f5c\u57fa\u672c\u7c7b\u4f3c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u53ea\u9700\u8bb0\u4f4f$WBLT$\u6bcf\u4e2a\u8282\u70b9\u7528\u4e8e\u6bd4\u8f83\u7684\u6743\u503c\u4e0d\u662f\u8be5\u8282\u70b9\u7684\u6743\u503c\u800c\u662f\u8be5\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u6743\u503c\uff0c\u56e0\u4e3a\u5de6\u513f\u5b50\u7684\u6743\u503c\u662f\u5de6\u513f\u5b50\u6240\u5728\u5b50\u6811\u7684\u6700\u5927\u503c\uff0c\u82e5\u6700\u5927\u503c\u90fd\u6ca1\u6709\u8d21\u732e\u66f4\u5c0f\u7684\u503c\u5fc5\u7136\u6ca1\u6709\u8d21\u732e\u3002\n\n# $2.2$ $WBLT$\n\n$WBLT$\u51fa\u73b0\u7684\u4e0d\u5e73\u8861\u72b6\u6001\u5927\u81f4\u5206\u4e3a\u4e24\u79cd\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/s7om6vtn.png)\n\n\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ea\u5b58\u5728\u8282\u70b9$x$\u6709\u5b50\u8282\u70b9$weight_{x.son} < \\alpha \\times weight_x$\uff0c\u8fdb\u884c\u4e00\u6b21\u5355\u65cb\u5373\u53ef\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hds58ra8.png)\n\n\u8fd9\u79cd\u60c5\u51b5\uff0c\u65e2\u5b58\u5728\u8282\u70b9$x$\u6709\u5b50\u8282\u70b9$weight_{x.son} < \\alpha \\times weight_x$\uff0c\u53c8\u5b58\u5728\u8be5\u5b50\u8282\u70b9\u7684\u53e6\u4e00\u4fa7\u8282\u70b9$weight_{x.son.son \\oplus 1}\\times \\frac{1 - 2 \\times \\alpha}{1 - \\alpha}$\uff0c\u5c31\u8fdb\u884c\u4e24\u6b21\u65cb\u8f6c\u3002\n\n$\\alpha$\u4e00\u822c\u8bbe\u4e3a$0.29$\uff0c\u76f8\u5bf9\u5e94\u7684$\\frac{1 - 2 \\times \\alpha}{1 - \\alpha}$\u4e00\u822c\u4e3a$0.6$\uff0c\u4e0d\u540c\u7684\u5e73\u8861\u6811\u9898\u53ef\u4ee5\u5c06$\\alpha$\u8fdb\u884c\u5fae\u8c03\uff0c\u6548\u7387\u4f1a\u53d1\u751f\u53d8\u5316\u3002\n\n### $Rotate$\n\n```cpp\nvoid Rotate(int k, int d)\n{\n    int temp = tree[k].son[d ^ 1];\n    tree[k].son[d ^ 1] = tree[k].son[d];\n    tree[k].son[d] = tree[tree[k].son[d ^ 1]].son[d];\n    tree[tree[k].son[d ^ 1]].son[d] = tree[tree[k].son[d ^ 1]].son[d ^ 1];\n    tree[tree[k].son[d ^ 1]].son[d ^ 1]=temp;\n    Pushup(tree[k].son[d ^ 1]);\n    Pushup(k);\n}\n```\n\n\u56e0\u4e3a\u4e0d\u540c\u4e8e$Splay$\u548c$Treap$\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u518d\u4f7f\u7528\u8be5\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u6240\u4ee5\u76f4\u63a5\u65cb\u8f6c\u5b8c\u4e4b\u540e\u5c06\u7f16\u53f7\u4ea4\u6362\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u4e0a\u9762\u7684$Merge$\u51fd\u6570\u7b80\u5316$Rotate$\u64cd\u4f5c\u3002\n\n```cpp\nvoid Rotate(int k, int d)\n{\n    if (d)\n    {\n        tr[k].son[0] = Merge(tr[k].son[0], tr[tr[k].son[1]].son[0]);\n        Recycle(tr[k].son[1]); \n        tr[k].son[1] = tr[tr[k].son[1]].son[1];\n        Pushup(tr[k].son[0]); Pushup(k); \n    }\n    else\n    {\n        tr[k].son[1] = Merge(tr[tr[k].son[0]].son[1], tr[k].son[1]);\n        Recycle(tr[k].son[0]);\n        tr[k].son[0] =  tr[tr[k].son[0]].son[0];\n        Pushup(tr[k].son[1]); Pushup(k);\n    }\n    return;\n}\n```\n\n### $Maintain$\n\n```cpp\nvoid Maintain(int k)\n{\n    int d;\n    if (tr[tr[k].son[0]].siz < tr[k].siz * alpha) d = 1;\n    else if (tr[tr[k].son[1]].siz < tr[k].siz * alpha) d = 0;\n    else return; \n    if (tr[tr[tr[k].son[d]].son[d ^ 1]].siz >= tr[tr[k].son[d]].siz * aalpha) Rotate(tr[k].son[d], d ^ 1);\n    Rotate(k, d);\n    return;\n}\n```\n\n\u5728\u63d2\u5165\u548c\u5220\u9664\u7684\u65f6\u5019\u4ece\u53f6\u5b50\u8282\u70b9\u5f80\u4e0a\u4f9d\u6b21\u7ef4\u62a4\u5e73\u8861\u5373\u53ef\u3002\n\n# \u53c2\u8003\u8d44\u6599\n\n\u6211\u662f\u4ece\u6210\u90fd\u4e03\u4e2d\u738b\u601d\u9f50\u7684$IOI2018$\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\u5b66\u4e60\u7684$WBLT$\uff0c\u5177\u4f53\u7684\u590d\u6742\u5ea6\u8bc1\u660e\u53ef\u4ee5\u53bb\u770b\u770b\u8fd9\u7bc7\u8bba\u6587\u3002",
        "postTime": 1583227099,
        "uid": 73983,
        "name": "Infiltrator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "## \u66ff\u7f6a\u7f8a\u6811\n\n\u66ff\u7f6a\u7f8a\u6811\u662f\u4e00\u79cd\u4e0d\u4f9d\u9760\u65cb\u8f6c\u64cd\u4f5c\u6765\u4fdd\u8bc1\u5e73\u8861\u7684\u5e73\u8861\u6811\u3002\u5176\u601d\u60f3\u5728\u652f\u6301\u4fee\u6539\u7684 k-D Tree \u4e2d\u4e5f\u6709\u5e94\u7528\u3002\n\n\u66ff\u7f6a\u7f8a\u6811\u9664\u4e86\u4fdd\u8bc1\u5e73\u8861\u7684\u64cd\u4f5c\u4e4b\u5916\uff0c\u5176\u4f59\u64cd\u4f5c\u90fd\u4e0e\u4e00\u822c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u76f8\u540c\u3002\n\n\u66ff\u7f6a\u7f8a\u6811\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u5b50\u6811\u4e0d\u6ee1\u8db3\u7279\u5b9a\u7684\u5e73\u8861\u6761\u4ef6\uff0c\u5c31\u5c06\u6574\u68f5\u5b50\u6811 **\u91cd\u6784** \u4f7f\u4e4b\u5e73\u8861\u3002\n\n\u8bbe\u4e00\u4e2a\u5e38\u6570 $\\alpha$ \uff0c\u82e5\u4e00\u4e2a\u70b9\u5de6\u53f3\u5b50\u6811\u5927\u5c0f\u5728\u8be5\u5b50\u6811\u4e2d\u7684\u5360\u6bd4\u5927\u4e8e $\\alpha$ \uff0c\u8bf4\u660e\u5b50\u6811\u5931\u8861\uff0c\u9700\u8981\u91cd\u6784\u3002\u5728\u6709\u5220\u9664\u64cd\u4f5c\u7684\u9898\u76ee\u4e2d\uff0c\u66ff\u7f6a\u7f8a\u6811\u91c7\u7528\u60f0\u6027\u5220\u9664\uff0c\u5373\u6807\u8bb0\u8be5\u7ed3\u70b9\u5df2\u7ecf\u88ab\u5220\u9664\uff0c\u4f46\u4fdd\u7559\u5176\u5728\u6811\u4e0a\u7684\u4f4d\u7f6e\uff0c\u82e5\u4e00\u4e2a\u5b50\u6811\u4e2d\u672a\u88ab\u6807\u8bb0\u5220\u9664\u7684\u8282\u70b9\u5360\u6bd4\u5c0f\u4e8e $\\alpha$ \uff0c\u5219\u8be5\u5b50\u6811\u4e5f\u9700\u8981\u91cd\u6784\u3002\n\n**\u91cd\u6784\u64cd\u4f5c\uff1a** \u5148\u4e2d\u5e8f\u904d\u5386\u6574\u68f5\u66ff\u7f6a\u7f8a\u6811\uff0c\u6309\u987a\u5e8f\u6392\u5217\u6240\u6709\u672a\u5220\u9664\u7ed3\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u7b1b\u5361\u5c14\u6811\u5efa\u6811\u65b9\u6cd5\u6216\u8005\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u7684\u5efa\u6811\u65b9\u6cd5\u5c06\u8fd9\u4e9b\u7ed3\u70b9\u6784\u6210\u4e00\u68f5\u6df1\u5ea6\u4e3a $O(\\log n)$ \u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002\u5206\u6790\u53ef\u77e5\uff0c\u8be5\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$ \u3002\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5e38\u6570 $\\alpha$ \u7684\u53d6\u503c\u5728 $0.7$ \u5de6\u53f3\u3002 $\\alpha$ \u4fdd\u8bc1\u4e86\u6240\u6709\u5b50\u6811\u7684\u5e73\u8861\u4e0e\u672a\u5220\u9664\u7ed3\u70b9\u7684\u6570\u91cf\uff0c\u6240\u4ee5\u66ff\u7f6a\u7f8a\u6811\u7684\u6df1\u5ea6\u662f $O(\\log n)$ \u7684\u3002\u6bcf\u4e2a\u521a\u91cd\u6784\u5b8c\u7684 $n$ \u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\uff0c\u81f3\u5c11\u9700\u8981\u518d\u52a0\u5165 $n(\\alpha-\\frac 1 2)$ \u4e2a\u7ed3\u70b9\uff0c\u624d\u4f1a\u518d\u6b21\u91cd\u6784\uff0c\u6240\u4ee5\u91cd\u6784\u6b21\u6570\u4e5f\u662f\u6709\u4fdd\u8bc1\u7684\u3002\u4e00\u822c\u8ba4\u4e3a\uff0c\u5f53 $\\alpha$ \u7684\u503c\u5408\u9002\u7684\u65f6\u5019\uff0c\u66ff\u7f6a\u7f8a\u6811\u4e0a\u5355\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\log n)$ \u7684\u3002\n\n#### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1100010;\nint n,op,x,q,lstans,ans;\ndouble a=0.725;\nint rt,cur,val[maxn],lc[maxn],rc[maxn],cnt[maxn],siz[maxn],siz2[maxn],sum[maxn];\nint t,g[maxn];\nvoid print(int x){if(!x)return;print(lc[x]);if(cnt[x])g[++t]=x;print(rc[x]);}\nvoid maintain(int x)\n{\n\tsiz[x]=siz[lc[x]]+siz[rc[x]]+(cnt[x]?1:0);\n\tsiz2[x]=siz2[lc[x]]+siz2[rc[x]]+1;\n\tsum[x]=sum[lc[x]]+sum[rc[x]]+cnt[x];\n}\nint build(int l,int r)\n{\n\tif(l>r)return 0;\n\tif(l==r){lc[g[l]]=rc[g[l]]=0;maintain(g[l]);return g[l];}\n\tint mid=(l+r)>>1;\n\tlc[g[mid]]=build(l,mid-1);rc[g[mid]]=build(mid+1,r);\n\tmaintain(g[mid]);\n\treturn g[mid];\n}\nvoid rebuild(int&x){t=0;print(x);x=build(1,t);}\nbool bad(int x){return sum[x]&&(a*siz2[x]<=max(siz2[lc[x]],siz2[rc[x]])||a*siz2[x]>=siz[x]);}\nvoid insert(int&x,int v)\n{\n\tif(!x){x=++cur;val[x]=v;cnt[x]=1;maintain(x);return;}\n\tif(v==val[x])cnt[x]++;\n\telse if(v<val[x])insert(lc[x],v);\n\telse insert(rc[x],v);\n\tmaintain(x);\n\tif(bad(x))rebuild(x);\n}\nvoid erase(int&x,int v)\n{\n\tif(v==val[x])cnt[x]--;\n\telse if(v<val[x])erase(lc[x],v);\n\telse erase(rc[x],v);\n\tmaintain(x);\n\tif(bad(x))rebuild(x);\n}\nint rnk(int x,int v)\n{\n\tif(!x)return 1;\n\tif(v==val[x])return sum[lc[x]]+1;\n\tif(v<val[x])return rnk(lc[x],v);\n\treturn sum[lc[x]]+cnt[x]+rnk(rc[x],v);\n}\nint kth(int x,int k)\n{\n\tif(!x)return -1;\n\tif(sum[lc[x]]<k&&k<=sum[lc[x]]+cnt[x])return val[x];\n\tif(k<=sum[lc[x]])return kth(lc[x],k);\n\treturn kth(rc[x],k-sum[lc[x]]-cnt[x]);\n}\nint pre(int v){return kth(rt,rnk(rt,v)-1);}\nint suf(int v){return kth(rt,rnk(rt,v+1));}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);t=n;\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",g+i),insert(rt,g[i]);\n\twhile(q--)\n\t{\n\t\tscanf(\"%d%d\",&op,&x);x^=lstans;\n\t\tif(op==1)insert(rt,x);\n\t\tif(op==2)erase(rt,x);\n\t\tif(op==3)lstans=rnk(rt,x);\n\t\tif(op==4)lstans=kth(rt,x);\n\t\tif(op==5)lstans=pre(x);\n\t\tif(op==6)lstans=suf(x);\n\t\tif(3<=op&&op<=6)ans^=lstans;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1582870996,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u63a8\u9500\u4e00\u4e0b\u6211\u7684\u65b0\u535a\u5ba2\uff1ahttps://yce3216037.github.io/post/luo-gu-p6136-ti-jie\n\n\u8fd9\u9053\u9898\u76ee\u600e\u4e48\u80fd\u6ca1\u6709AVL\u6811\u5462\uff1f\u5176\u5b9e\uff0c\u5728P3369\uff0c\u6211\u5c31\u5199\u4e86\u4e00\u7bc7AVL\u6811\u7684\u9898\u89e3\uff0c\u94fe\u63a5\u5728\u8fd9\u91cc\uff08\u7b2c\u4e8c\u7bc7\u53ef\u80fd\u6ca1\u6709\u56fe\u7247\uff0c\u89c1\u8c05\uff09\uff0c\u6211\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\uff1a  \nhttps://www.luogu.com.cn/blog/YCE-22/solution-p3369  \nhttps://yce3216037.github.io/post/luo-gu-p3369-ti-jie  \n\n\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8981\u627e\u6392\u540d\u7684\u6570\u4e0d\u4e00\u5b9a\u6709\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u67e5\u627e\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\ninline AVLtree Find(AVLtree& p, int x) {\n\tif (!p) return NULL;//\u627e\u4e0d\u5230\u5c31\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\u5c31\u8fd4\u56de\u5730\u5740\n\tif (p->data == x) return p;\n\tif (p->data > x) return Find(p->ls, x);\n\treturn Find(p->rs, x);\n}\ninline AVLtree find(int x) {\n\treturn Find(root, x);\n}\n```\n\u5982\u679c\u627e\u4e0d\u5230\u8fd9\u4e2a\u6570\uff0c\u5c31\u5c06\u8fd9\u4e2a\u6570\u6539\u4e3a\u5b83\u7684\u540e\u7ee7\uff0c\u6240\u4ee5\uff0c\u8fd8\u9700\u8981\u9884\u5148\u52a0\u4e00\u4e2a\u6781\u5927\u503c\u6765\u4fdd\u8bc1\u80fd\u8fc7\u627e\u5230\u8fd9\u4e2a\u6392\u540d\u3002\n\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define int long long\nusing namespace std;\nFILE *fin, *fout;\ninline int read(int &x) {//\u5feb\u8bfb\uff0c\u8fd9\u9898\u5e38\u6570\u4f18\u5316\u5f88\u91cd\u8981\n\tchar c = 0; int f = x = 0;\n\twhile (c < 48 || c > 57) {\n\t\tif (c == -1) return 0;\n\t\tif (c == '-') f = 1; c = fgetc(fin);\n\t}\n\twhile (c > 47 && c < 58) x = (x << 3) + (x << 1) + (c & 15), c = fgetc(fin);\n\tif (f) x = -x; return 1;\n}\ntemplate<class T, class... Args> inline int read(T &x, Args&... args) {\n\treturn read(x) + read(args...);\n}\ninline int write(int x) {\n\tif (x < 0) return fputc(45, fout), write(-x);\n\tif (x > 9) write(x / 10);\n\treturn fputc((x % 10) | 48, fout), 1;\n}\nstruct AVLnode;\ntypedef AVLnode* AVLtree;\nstruct AVLnode {//\u8fd9\u4e2a\u90e8\u5206\u5728\u4e4b\u524dP3369\u4e2d\u7684\u9898\u89e3\u5df2\u7ecf\u8be6\u7ec6\u8bb2\u8ff0\u4e86\uff0c\u8fd9\u91cc\u6211\u5c31\u4e0d\u5199\u6ce8\u91ca\u4e86\u3002\n\tint data, high;\n\tint freq, size;\n\tAVLtree ls, rs;\n\tAVLnode(): data(0), high(1), freq(1), size(1), ls(NULL), rs(NULL){}\n\tAVLnode(int a): data(a), high(1), freq(1), size(1), ls(NULL), rs(NULL){}\n};\ninline int GetSize(AVLtree p) {\n\tif (p == NULL) return 0;\n\treturn p->size;\n}\ninline int GetHigh(AVLtree p) {\n\tif (p == NULL) return 0;\n\treturn p->high;\n}\nstruct AVL {\n\tAVLtree root;\n\tinline void update(AVLtree& p) {\n\t\tp->size = GetSize(p->ls) + GetSize(p->rs) + p->freq;\n\t\tp->high = max(GetHigh(p->ls), GetHigh(p->rs)) + 1;\n\t}\n\tinline void LeftPlus(AVLtree& p) {\n\t\tAVLtree q;\n\t\tq = p->ls;\n\t\tp->ls = q->rs;\n\t\tq->rs = p;\n\t\tupdate(p);\n\t\tupdate(q);\n\t\tp = q;\n\t}\n\tinline void RightPlus(AVLtree& p) {\n\t\tAVLtree q;\n\t\tq = p->rs;\n\t\tp->rs = q->ls;\n\t\tq->ls = p;\n\t\tupdate(p);\n\t\tupdate(q);\n\t\tp = q;\n\t}\n\tinline void LeftRight(AVLtree& p) {\n\t\tRightPlus(p->ls);\n\t\tLeftPlus(p);\n\t}\n\tinline void RightLeft(AVLtree& p) {\n\t\tLeftPlus(p->rs);\n\t\tRightPlus(p);\n\t}\n\tinline void Insert(AVLtree &p, int x) {\n\t\tif (p == NULL) {\n\t\t\tp = new AVLnode(x);\n\t\t\treturn;\n\t\t}\n\t\tif (p->data == x) {\n\t\t\t++(p->freq);\n\t\t\tupdate(p);\n\t\t\treturn;\n\t\t}\n\t\tif (p->data > x) {\n\t\t\tInsert(p->ls, x), update(p);\n\t\t\tif (GetHigh(p->ls) - GetHigh(p->rs) == 2) {\n\t\t\t\tif (x < p->ls->data)\n\t\t\t\t\tLeftPlus(p);\n\t\t\t\telse\n\t\t\t\t\tLeftRight(p);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tInsert(p->rs, x), update(p);\n\t\t\tif (GetHigh(p->rs) - GetHigh(p->ls) == 2) {\n\t\t\t\tif (x > p->rs->data)\n\t\t\t\t\tRightPlus(p);\n\t\t\t\telse\n\t\t\t\t\tRightLeft(p);\n\t\t\t}\n\t\t}\n\t\tupdate(p);\n\t}\n\tinline void insert(int x) {\n\t\tInsert(root, x);\n\t}\n\tinline AVLtree Find(AVLtree& p, int x) {//\u53ea\u4e0d\u8fc7\u591a\u4e86\u4e00\u4e2a\u67e5\u627e\u64cd\u4f5c\n\t\tif (!p) return NULL;\n\t\tif (p->data == x) return p;\n\t\tif (p->data > x) return Find(p->ls, x);\n\t\treturn Find(p->rs, x);\n\t}\n\tinline AVLtree find(int x) {\n\t\treturn Find(root, x);\n\t}\n\tinline void Erase(AVLtree& p, int x) {\n\t\tif (p == NULL) return;\n\t\tif (p->data > x) {\n\t\t\tErase(p->ls, x), update(p);\n\t\t\tif (GetHigh(p->rs) - GetHigh(p->ls) == 2) {\n\t\t\t\tif (GetHigh(p->rs->rs) >= GetHigh(p->rs->ls))\n\t\t\t\t\tRightPlus(p);\n\t\t\t\telse\n\t\t\t\t\tRightLeft(p);\n\t\t\t}\n\t\t}\n\t\telse if(p->data < x) {\n\t\t\tErase(p->rs, x), update(p);\n\t\t\tif (GetHigh(p->ls) - GetHigh(p->rs) == 2) {\n\t\t\t\tif (GetHigh(p->ls->ls) >= GetHigh(p->ls->rs))\n\t\t\t\t\tLeftPlus(p);\n\t\t\t\telse\n\t\t\t\t\tLeftRight(p);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (p->freq > 1) {\n\t\t\t\t--(p->freq);\n\t\t\t\tupdate(p);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (p->ls && p->rs) {\n\t\t\t\tAVLtree q = p->rs;\n\t\t\t\twhile (q->ls) q = q->ls;\n\t\t\t\tp->freq = q->freq;\n\t\t\t\tp->data = q->data, q->freq = 1;\n\t\t\t\tErase(p->rs, q->data);\n\t\t\t\tupdate(p);\n\t\t\t\tif (GetHigh(p->ls) - GetHigh(p->rs) == 2) {\n\t\t\t\t\tif (GetHigh(p->ls->ls) >= GetHigh(p->ls->rs))\n\t\t\t\t\t\tLeftPlus(p);\n\t\t\t\t\telse\n\t\t\t\t\t\tLeftRight(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tAVLtree q = p;\n\t\t\t\tif (p->ls) p = p->ls;\n\t\t\t\telse if (p->rs) p = p->rs;\n\t\t\t\telse p = NULL;\n\t\t\t\tdelete q;\n\t\t\t\tq = NULL;\n\t\t\t}\n\t\t}\n\t\tif (p == NULL) return;\n\t\tupdate(p);\n\t}\n\tinline void erase(int x) {\n\t\tErase(root, x);\n\t}\n\tinline int get_val(AVLtree p, int rank) {\n\t\tif (GetSize(p->ls) >= rank) return get_val(p->ls, rank);\n\t\tif (GetSize(p->ls) + p->freq >= rank) return p->data;\n\t\treturn get_val(p->rs, rank - GetSize(p->ls) - p->freq);\n\t}\n\tinline int GetVal(int rank) {\n\t\treturn get_val(root, rank);\n\t}\n\tinline int get_rank(AVLtree p, int val) {\n\t\tif (p->data == val) return GetSize(p->ls) + 1;\n\t\tif (p->data > val) return get_rank(p->ls, val);\n\t\treturn get_rank(p->rs, val) + GetSize(p->ls) + p->freq;\n\t}\n\tinline int GetRank(int val) {\n\t\treturn get_rank(root, val);\n\t}\n\tinline int GetPrev(int val) {\n\t\tAVLtree ans = new AVLnode(-1LL << 42), p = root;\n\t\twhile (p) {\n\t\t\tif (p->data == val) {\n\t\t\t\tif (p->ls) {\n\t\t\t\t\tp = p->ls;\n\t\t\t\t\twhile (p->rs)\n\t\t\t\t\t\tp = p->rs;\n\t\t\t\t\tans = p;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (p->data < val && p->data > ans->data) ans = p;\n\t\t\tp = p->data < val ? p->rs : p->ls;\n\t\t}\n\t\treturn ans->data;\n\t}\n\tinline int GetNext(int val) {\n\t\tAVLtree ans = new AVLnode(1LL << 42), p = root;\n\t\twhile (p) {\n\t\t\tif (p->data == val) {\n\t\t\t\tif (p->rs) {\n\t\t\t\t\tp = p->rs;\n\t\t\t\t\twhile (p->ls)\n\t\t\t\t\t\tp = p->ls;\n\t\t\t\t\tans = p;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (p->data > val && p->data < ans->data) ans = p;\n\t\t\tp = p->data < val ? p->rs : p->ls;\n\t\t}\n\t\treturn ans->data;\n\t}\n};\nAVL a;\nint n, m, x, opt, last, ans;\nsigned main() {\n\t#ifdef ONLINE_JUDGE\n\tfin = stdin;\n\tfout = stdout;\n\t#else\n\tfin = fopen(\"P6136.in\", \"rb\");\n\tfout = fopen(\"P6136.out\", \"wb\");\n\t#endif\n\tread(n, m), a.insert(1LL << 42);//\u6781\u5927\u503c\u5148\u63d2\u5165\n\tfor (int i = 1; i <= n; ++i) read(x), a.insert(x);//\u8fb9\u8bfb\u5165\u8fb9\u63d2\u5165\n\tfor (int i = 1; i <= m; ++i) {\n\t\tread(opt, x), x ^= last;//\u8f93\u5165\u7ecf\u8fc7\u52a0\u5bc6\uff0c\u8981\u5148\u89e3\u5bc6\n\t\tswitch(opt) {\n\t\t\tcase 1: a.insert(x); break;\n\t\t\tcase 2: a.erase(x); break;\n\t\t\tcase 3:\n\t\t\t\tif (!a.find(x)) x = a.GetNext(x);//\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5c31\u6539\u4e3a\u540e\u7ee7\n\t\t\t\tlast = a.GetRank(x), ans ^= last; break;\n\t\t\tcase 4: last = a.GetVal(x), ans ^= last; break;\n\t\t\tcase 5: last = a.GetPrev(x), ans ^= last; break;\n\t\t\tcase 6: last = a.GetNext(x), ans ^= last; break;\n\t\t}\n\t}\n\twrite(ans);\n\treturn 0;\n}\n```",
        "postTime": 1582776327,
        "uid": 181378,
        "name": "Alarm5854",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u5e73\u8861\u6811\u677f\u5b50\u9898\uff0c\u6ca1\u5565\u597d\u8bf4\u7684   \n\u6211\u8fd9\u4e2a\u849f\u84bb\u6574\u4e00\u4e2a AVL \u6811\u7684\u9898\u89e3\u5427    \n\u5b66\u4e60\u81ea\u5927\u4f6c[AgOH](https://www.luogu.com.cn/user/109757)\u5728\u6b64\u611f\u8c22   \n# \u6811\u65cb\u8f6c\n### \u65cb\u8f6c\u64cd\u4f5c\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u6240\u4ee5\u6211\u653e\u5728\u6700\u5f00\u5934\u8bb2\n\u5148\u6765\u770b\u770b  \u65cb\u8f6c\u53e3\u8bc0  \uff1a\n\n## \u5de6\u65cb\u62ce\u53f3\u5de6\u6302\u53f3\uff0c\u53f3\u65cb\u62ce\u5de6\u53f3\u6302\u5de6\u2014\u2014AgOH\n\n------------\n\u663e\u7136\u4f60\u8fd8\u662f\u4e0d\u61c2\uff0c\u90a3\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\n###### \u5de6\u65cb\n\u4ee4$ Now $ \u7ed3\u70b9\u4e3a\u5f53\u524d\u7ed3\u70b9  \n\u4ee4$ R $\u4e3a$ Now $\u7ed3\u70b9\u7684\u53f3\u5b50\u6811  \n\u4ee4$ RL $\u4e3a$ R $\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\n- \u62ce\u53f3\uff1a\u628a$R$\u201c\u62ce\u201d\u5230$Now$\u7684\u4f4d\u7f6e\u4f5c\u4e3a$ Now $\u7684\u7236\u4eb2\uff0c\u5e76\u4e14\u628a$ Now $\u4f5c\u4e3a$ R $ \u7684\u5de6\u513f\u5b50   \n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53d1\u73b0$ R $\u7ed3\u70b9\u5c45\u7136\u6709\u4e24\u68f5\u5de6\u5b50\u6811$ (Now,RL) $\uff0c\u592a\u4ee4\u4eba\u6c14\u6124\u4e86\uff0c\u8fd9\u53ef\u4e0d\u884c  \n- \u5de6\u6302\u53f3\uff1a\u90a3\u4e48\u6211\u4eec\u770b\u770b\u5e94\u8be5\u628a$ RL $\u653e\u5728\u54ea\u91cc\uff0c\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u3002   \n$ RL $\u539f\u672c\u662f$ R $\u7684\u5de6\u513f\u5b50\uff0c\u90a3\u4ed6\u73b0\u5728\u5c31\u8981\u5728$ R $\u7684\u5de6\u5b50\u6811\u4e0a\u3002   \n$ R $\u539f\u6765\u5728$ Now $\u7684\u53f3\u5b50\u6811\u4e0a\uff0c\u8fd9\u5bfc\u81f4\u4e86$ RL $\u73b0\u5728\u4e5f\u8981\u5728$ Now $\u7684\u53f3\u5b50\u6811\u4e0a\u3002\n\u73b0\u5728\u8fd9\u68f5\u6811\u4e0a$ Now $\u5728$ R $\u7684\u53f3\u5b50\u6811\u4e0a\uff0c\u6240\u4ee5\u8981\u6ee1\u8db3$ RL $\u5728$ Now $\u7684\u53f3\u5b50\u6811\u4e0a\u4e14$ RL $\u5728$ R $\u7684\u5de6\u5b50\u6811\u4e0a\uff0c\u5c31\u76f4\u63a5\u8ba9$ Now $\u7684\u53f3\u5b50\u6811\u662f$ RL $\u5c31\u53ef\u4ee5\u4e86\u3002\n- \u5de6\u6302\u53f3\u7684\u7b80\u5355\u7406\u89e3\uff1a\u73b0\u5728$ Now $\u7684\u53f3\u513f\u5b50\u53d8\u6210\u81ea\u5df1\u7684\u7236\u8282\u70b9\uff0c\u90a3$ Now $\u5c31\u6ca1\u6709\u53f3\u5b50\u6811\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4ee4$ RL $\u4e3a\u5176\u53f3\u5b50\u6811\u5c31\u884c\u4e86\u3002\n- \u603b\u7ed3\uff1a\u5de6\u65cb\u5c31\u662f\u628a\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\u201c\u62ce\u8d77\u6765\u201d\uff0c\u4f5c\u4e3a\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u8282\u70b9\u5f53\u524d\u8282\u70b9\u4f5c\u4e3a\u5b83\u7684\u5de6\u513f\u5b50\uff08\u62ce\u53f3\uff09\u800c\u628a\u5b83\u539f\u6765\u7684\u5de6\u513f\u5b50\u201c\u6302\u5230\u201d\u5f53\u524d\u8282\u70b9\u7684\u53f3\u8fb9\uff0c\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff08\u5de6\u6302\u53f3\uff09\u3002    \n```cpp\ninline void lx(int &now)\n{\n    int r=avl[now].r;//\u53f3\u5b50\u6811\n    avl[now].r=avl[r].l;//\u5de6\u6302\u53f3\n    avl[r].l=now;//\u62ce\u53f3\n    now=r;//\u8fd8\u662f\u62ce\u53f3\n    updata(avl[now].l);//\u66f4\u65b0\uff0c\u5148\u66f4\u65b0\u5b50\u6811\uff0c\u5728\u66f4\u65b0\u7236\u4eb2\n    updata(now);//\u66f4\u65b0\n}\n```\n\n\n\n------------\n\u5982\u679c\u4f60\u7406\u89e3\u4e86\u5de6\u65cb\uff0c\u90a3\u53f3\u65cb\u5c31\u662f\u590d\u8bfb\u673a\u554a\uff08\u6ca1\u7406\u89e3\u8bf7\u53cd\u590d\u7406\u89e3\uff09\u5982\u679c\u4f60\u7406\u89e3\u4e86\u89c9\u5f97\u6ca1\u6709\u5fc5\u8981\u6d6a\u8d39\u65f6\u95f4\u518d\u8bfb\u4e00\u904d\u76f4\u63a5\u8df3\u8fc7\n###### \u53f3\u65cb\n\u4ee4$ Now $ \u7ed3\u70b9\u4e3a\u5f53\u524d\u7ed3\u70b9  \n\u4ee4$ L $\u4e3a$ Now $\u7ed3\u70b9\u7684\u5de6\u5b50\u6811  \n\u4ee4$ LR $\u4e3a$ L $\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\n- \u62ce\u5de6\uff1a\u628a$ L $\u201c\u62ce\u201d\u5230$ Now $\u7684\u4f4d\u7f6e\u4f5c\u4e3a$ Now $\u7684\u7236\u4eb2\uff0c\u5e76\u4e14\u628a$ Now $\u4f5c\u4e3a$ L $ \u7684\u53f3\u513f\u5b50\u3002   \n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53d1\u73b0$ L $\u7ed3\u70b9\u5c45\u7136\u6709\u4e24\u68f5\u53f3\u5b50\u6811$ (Now,LR) $\uff0c\u592a\u4ee4\u4eba\u6c14\u6124\u4e86\uff0c\u8fd9\u53ef\u4e0d\u884c\u3002  \n- \u53f3\u6302\u5de6\uff1a\u90a3\u4e48\u6211\u4eec\u770b\u770b\u5e94\u8be5\u628a$ LR $\u653e\u5728\u54ea\u91cc\uff0c\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u3002   \n$ LR $\u539f\u672c\u662f$ L $\u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4ed6\u73b0\u5728\u5c31\u8981\u5728$ L $\u7684\u53f3\u5b50\u6811\u4e0a\u3002   \n$ L $\u539f\u6765\u5728$ Now $\u7684\u5de6\u5b50\u6811\u4e0a\uff0c\u8fd9\u5bfc\u81f4\u4e86$ LR $\u73b0\u5728\u4e5f\u8981\u5728$ Now $\u7684\u5de6\u5b50\u6811\u4e0a\u3002\n\u73b0\u5728\u8fd9\u68f5\u6811\u4e0a$ Now $\u5728$ L $\u7684\u5de6\u5b50\u6811\u4e0a\uff0c\u6240\u4ee5\u8981\u6ee1\u8db3$ LR $\u5728$ Now $\u7684\u5de6\u5b50\u6811\u4e0a\u4e14$ LR $\u5728$ L $\u7684\u53f3\u5b50\u6811\u4e0a\uff0c\u5c31\u76f4\u63a5\u8ba9$ Now $\u7684\u5de6\u5b50\u6811\u662f$ LR $\u5c31\u53ef\u4ee5\u4e86\u3002\n- \u53f3\u6302\u5de6\u7684\u7b80\u5355\u7406\u89e3\uff1a\u73b0\u5728$ Now $\u7684\u5de6\u513f\u5b50\u53d8\u6210\u81ea\u5df1\u7684\u7236\u8282\u70b9\uff0c\u90a3$ Now $\u5c31\u6ca1\u6709\u5de6\u5b50\u6811\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u4ee4$ LR $\u4e3a\u5176\u5de6\u5b50\u6811\u5c31\u884c\u4e86\u3002\n- \u603b\u7ed3\uff1a\u53f3\u65cb\u5c31\u662f\u628a\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u513f\u5b50\u201c\u62ce\u8d77\u6765\u201d\uff0c\u4f5c\u4e3a\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u8282\u70b9\u5f53\u524d\u8282\u70b9\u4f5c\u4e3a\u5b83\u7684\u53f3\u513f\u5b50\uff08\u62ce\u5de6\uff09\u800c\u628a\u5b83\u539f\u6765\u7684\u53f3\u513f\u5b50\u201c\u6302\u5230\u201d\u5f53\u524d\u8282\u70b9\u7684\u5de6\u8fb9\uff0c\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\uff08\u53f3\u6302\u5de6\uff09\u3002  \n```cpp\ninline void rx(int &now)\n{\n    int l=avl[now].l;//\u5de6\u5b50\u6811\n    avl[now].l=avl[l].r;//\u53f3\u6302\u5de6\n    avl[l].r=now;//\u62ce\u5de6\n    now=l;//\u8fd8\u662f\u62ce\u5de6\n    updata(avl[now].r);//\u66f4\u65b0\n    updata(now);//\u66f4\u65b0\n} \n```    \n## \u6982\u5ff5\n\u7d27\u63a5\u7740\u4ece\u5934\u6765\u770b  \n- \u5e73\u8861\u56e0\u5b50$(BF,Balance Factor)$   \n\u67d0\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50=\u5de6\u5b50\u6811\u9ad8-\u53f3\u5b50\u6811\u9ad8\uff08\u53f3\u5b50\u6811\u9ad8-\u5de6\u5b50\u6811\u9ad8\uff09  \n```cpp\ninline int getBF(int now)\n{\n    return avl[avl[now].l].height-avl[avl[now].r].height;\n}\n```\n\n- \u5982\u4f55\u7ef4\u62a4$ AVL $\u6811\u5e73\u8861\uff1f  \n\u5982\u679c\u6211\u4eec\u8981\u4fdd\u6301\u5e73\u8861\u6811\u5e73\u8861\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u8ba9\u5b83\u66f4\u50cf\u4e00\u68f5\u6811\uff0c\u800c\u4e0d\u662f\u50cf\u4e00\u6761\u94fe\u3002   \n\u6240\u4ee5\u6211\u4eec\u8981\u8ba9\u4e00\u4e2a\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u7684\u7edd\u5bf9\u503c\uff0c\u4e5f\u5c31\u662f\u5de6\u5b50\u6811\u9ad8\u548c\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7$ 1 $\u3002\u6216\u8005\u8bf4\u5dee\u53ea\u80fd\u4e3a$ 1,0,-1 $\u3002   \n\u82e5\u8be5\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u7edd\u5bf9\u503c\u8d85\u8fc7$1$\uff0c\u5c31\u8ba4\u4e3a\u8be5\u5b50\u6811\u4e0d\u5e73\u8861\u3002\n## \u64cd\u4f5c\n-  LL \uff08\u5de6\u5de6\uff09  \n\u5bf9\u4e8e\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49\u662f\uff1a\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u8fc7\u9ad8\u4e86(BF>1)\uff0c\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u6bd4\u8f83\u9ad8(BF>0)\u3002    \n_**\u6ce8\u610f\uff1a\u5de6\u5b50\u6811\u7684\u5e73\u8861\u56e0\u5b50\u9700\u8981\u4e0d\u5e73\u8861\uff0c\u800c\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u53ea\u8981\u6bd4\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u9ad8\u5c31\u884c\u4e86\uff0c\u5e76\u4e0d\u8981\u6c42\u4e0d\u5e73\u8861\u3002**_  \n\u90a3\u4e48\u5bf9\u4e8e\u8be5\u7ed3\u70b9\u8fdb\u884c\u53f3\u65cb\u64cd\u4f5c   \n-  LR \uff08\u5de6\u53f3\uff09  \n\u5bf9\u4e8e\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49\u662f\uff1a\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u8fc7\u9ad8\u4e86(BF>1)\uff0c\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u6bd4\u8f83\u9ad8(BF>0)\u3002    \n_**\u6ce8\u610f\uff1a\u5de6\u5b50\u6811\u7684\u5e73\u8861\u56e0\u5b50\u9700\u8981\u4e0d\u5e73\u8861\uff0c\u800c\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u53ea\u8981\u6bd4\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u9ad8\u5c31\u884c\u4e86\uff0c\u5e76\u4e0d\u8981\u6c42\u4e0d\u5e73\u8861\u3002**_  \n\u90a3\u4e48\u5bf9\u4e8e\u8be5\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u8fdb\u884c\u5de6\u65cb\u64cd\u4f5c(L)\uff0c\u518d\u5bf9\u8be5\u8282\u70b9\u8fdb\u884c\u53f3\u65cb\u64cd\u4f5c(R)  \n\u6309\u7167\u64cd\u4f5c\u540d\u79f0\u7684\u987a\u5e8f\u65cb\u8f6c\u5373\u53ef\u3002\n-  RR \uff08\u53f3\u53f3\uff09  \n\u5bf9\u4e8e\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49\u662f\uff1a\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u8fc7\u9ad8\u4e86(BF>1)\uff0c\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u6bd4\u8f83\u9ad8(BF>0)\u3002    \n\u90a3\u4e48\u5bf9\u4e8e\u8be5\u7ed3\u70b9\u8fdb\u884c\u5de6\u65cb\u64cd\u4f5c   \n-  RL \uff08\u53f3\u5de6\uff09   \n\u5bf9\u4e8e\u672c\u64cd\u4f5c\u7684\u5b9a\u4e49\u662f\uff1a\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u8fc7\u9ad8\u4e86(BF>1)\uff0c\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u6bd4\u8f83\u9ad8$(BF>0)$\u3002    \n\u90a3\u4e48\u5bf9\u4e8e\u8be5\u7ed3\u70b9\u7684\u53f3\u7ed3\u70b9\u8fdb\u884c\u53f3\u65cb\u64cd\u4f5c(R)\uff0c\u518d\u5bf9\u8be5\u8282\u70b9\u8fdb\u884c\u5de6\u65cb\u64cd\u4f5c(L)   \n```cpp\ninline void check(int &now)\n{\n    int nBF=getBF(now);\n    if(nBF>1)//L\n    {\n        int lBF=getBF(avl[now].l);\n        if(lBF>0)//LL\n            rx(now);\n        else //RR\n            lx(avl[now].l),rx(now);\n    }\n    if(nBF<-1)//R\n    {\n        int rBF=getBF(avl[now].r);\n        if(rBF<0)//RR\n            lx(now);\n        else //RL\n            rx(avl[now].r),lx(now);\n    }\n    else if(now) updata(now);//\u5982\u679c\u5e73\u8861\uff0c\u66f4\u65b0\u8282\u70b9\n}\n```\n- \u52a0\u70b9  \n\u65b0\u8282\u70b9\u7684\u5927\u5c0f\u4e3a1\u3002  \n```cpp\ninline void newnode(int &now,int val)\n{\n    avl[now=++cnt].val=val;\n    avl[cnt].size=1;\n}\n```\n- \u66f4\u65b0   \n\u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f\u4e3a\u5de6\u53f3\u5b50\u6811\u5927\u5c0f\u7684\u548c\u52a0\u4e00\uff08\u81ea\u5df1\u4e5f\u8981\u7b97\uff09\n\u5f53\u524d\u7ed3\u70b9\u7684\u9ad8\u5ea6\u4e3a\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u4e2d\u66f4\u5927\u7684\u52a0\u4e00\uff08\u81ea\u5df1\u4e5f\u8981\u7b97\uff09\n```cpp\ninline void updata(int now)\n{\n    avl[now].size=avl[avl[now].l].size+avl[avl[now].r].size+1;\n    avl[now].height=max(avl[avl[now].l].height,avl[avl[now].r].height)+1;\n}\n```\n- \u63d2\u5165\n```cpp\nvoid ins(int &now,int val)\n{\n    if(!now)newnode(now,val);//\u5982\u679c\u6ca1\u6709\u7ed3\u70b9\uff0c\u52a0\u70b9\n    else if(val<avl[now].val)ins(avl[now].l,val);//\u4e8c\u53c9\u641c\u7d22\u6811\u6027\u8d28\uff0c\u503c\u6bd4\u5f53\u524d\u5c0f\u7ed3\u70b9\uff0c\u5f80\u5de6\u5b50\u6811\u63d2\u5165\n    else ins(avl[now].r,val);//\u5426\u5219\u5f80\u53f3\u5b50\u6811\u63d2\u5165\n    check(now);//\u81ea\u5e95\u5411\u4e0a\u68c0\u67e5\uff0c\u65cb\u8f6c\n}\n```\n- \u5220\u9664   \n\u76f4\u63a5\u7528\u540e\u7ee7\uff08\u627e\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\uff0c\u76f4\u5230\u8be5\u8282\u70b9\u6ca1\u6709\u5de6\u513f\u5b50\uff09\u66ff\u6362\u5f53\u524d\u7ed3\u70b9\n```cpp\nint find(int &now,int fa)//\u5bfb\u627e\u540e\u7ee7\n{\n    int res;\n    if(!avl[now].l)     //\u627e\u5230\u4e86\u8981\u7684\u540e\u7ee7\n    {\n        res=now;      //\u8fd4\u56de\u503c\n        avl[fa].l=avl[now].r;//\u7236\u4eb2\u7684\u5de6\u513f\u5b50\u6539\u6210\u8be5\u70b9\u7684\u53f3\u513f\u5b50\n    }\n    else                //\u6ca1\u627e\u5230\n    {\n        res=find(avl[now].l,now); //\u9012\u5f52\n        check(now);     //\u81ea\u5e95\u5411\u4e0a\u68c0\u67e5\uff0c\u65cb\u8f6c\n    }\n    return res;         //\u8fd4\u56de\u7ed3\u70b9\u7f16\u53f7\n}\nvoid del(int &now,int val)\n{\n    if(val==avl[now].val)   //\u5220\u9664\u5f53\u524d\u7ed3\u70b9\n    {\n        int l = avl[now].l,r = avl[now].r;  \n        if(!l||!r) now=l+r;  //\u5982\u679c\u65e0\u513f\u6216\u5355\u513f\uff0c\u5f88\u7b80\u5355\u5982\u679cl\u6216r\u7b49\u4e8e0\uff0c\u5c31\u8fd4\u56de\u53e6\u4e00\u4e2a\uff0c\u5426\u5219\u8fd4\u56de0\uff1b\n        else \n        {\n            now = find(r,r);    //\u627e\u540e\u7ee7\uff0c\u66ff\u6362\u5f53\u524d\n            if(now!=r)          //\u5982\u679c\u540e\u7ee7\u4e0d\u662f\u539f\u6765\u7684\u53f3\u513f\u5b50\n                avl[now].r=r;   //\u540e\u7ee7\u7684\u53f3\u513f\u5b50\u6539\u6210\u539f\u6765\u7684\u53f3\u513f\u5b50\n            avl[now].l=l;       //\u628a\u5de6\u513f\u5b50\u8fde\u4e0a\u540e\u7ee7\n        }\n    }\n    else if(val<avl[now].val) del(avl[now].l,val);//\u5982\u679c\u6bd4\u5f53\u524d\u8282\u70b9\u503c\u5c0f\uff0c\u5f80\u5de6\u5220\n    else del(avl[now].r,val);//\u5426\u5219\uff0c\u5f80\u53f3\u5220\n    check(now);                 //\u81ea\u5e95\u5411\u4e0a\u68c0\u67e5\uff0c\u65cb\u8f6c\n}\n```\n- \u67e5\u6392\u540d\n```cpp\nint getrank(int val)           \n{\n    int now=root,rank=1;//\u4ece\u6839\u8282\u70b9\u627e\n    while(now)\n    {\n        if(val<=avl[now].val)//\u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u6027\u8d28\uff0c\u6bd4\u5f53\u524d\u7ed3\u70b9\u503c\u5c0f\u5f80\u5de6\u627e\n            now=avl[now].l;\n        else//\u5426\u5219\u5f80\u53f3\u627e\n        {\n            rank+=avl[avl[now].l].size+1;//\u6bd4\u5de6\u5b50\u6811\u53ca\u5f53\u524d\u8282\u70b9\u90fd\u5927\uff0c\u628a\u6392\u540d\u52a0\u4e0a\u5de6\u5b50\u6811\u5927\u5c0f\u52a0\u4e0a\u5f53\u524d\u8282\u70b9\n            now=avl[now].r;\n        }\n    }\n    return rank;//\u8fd4\u56de\n}\n```\n- \u67e5\u503c\n```cpp\nint getnum(int rank)\n{\n    int now=root;//\u4ece\u6839\u8282\u70b9\u627e\n    while(now)\n    {\n        if(avl[avl[now].l].size+1==rank)//\u5982\u679c\u6b63\u597d\u5c31\u662f\u8be5\u8282\u70b9\n            break;//\u9000\u51fa\u5faa\u73af\n        else if(avl[avl[now].l].size>=rank)/\u5982\u679c\u6392\u540d\u6ca1\u6709\u5de6\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u5927\n            now=avl[now].l;//\u5f80\u5de6\u627e\n        else\n        {\n            rank-=avl[avl[now].l].size+1;//\u5426\u5219\uff0c\u5728\u53f3\u5b50\u6811\u627e\u6392\u540d\u6263\u6389\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u6263\u6389\u5f53\u524d\u8282\u70b9\n            now=avl[now].r//\u5f80\u53f3\u627e;\n        }\n    }\n    return avl[now].val;//\u8fd4\u56de\u5f53\u524d\u7ed3\u70b9\u7684\u503c\n}\n```\n## \u5b9e\u73b0  \n```cpp\nint main()\n{\n    int t;\n    scanf(\"%d\",&t);\n    while(t--)//\u591a\u7ec4\u6570\u636e\n    {\n        int opt,x;\n        scanf(\"%d%d\",&opt,&x);\n        switch(opt)\n        {\n        case 1:\n            ins(root,x);//\u63d2\u5165\n            break;\n        case 2:\n            del(root,x);//\u5220\u9664\n            break;\n        case 3:\n            printf(\"%d\\n\",getrank(x));//\u67e5\u6392\u540d\n            break;\n        case 4:\n            printf(\"%d\\n\",getnum(x));//\u67e5\u503c\n            break;\n        case 5:\n            printf(\"%d\\n\",getnum(getrank(x)-1));//\u524d\u9a71\uff0c\u6bd4x\u6392\u540d\u5c0f\u4e00\u7684\u6570\n            break;\n        case 6:\n            printf(\"%d\\n\",getnum(getrank(x+1)));//\u540e\u7ee7\uff0c\u6bd4x\u5c0f\u4e00\u7684\u6392\u540d\u7684\u503c\n            break;\n        }\n    }\n    return 0;\n}\n```\n## $Code  $\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+10;\nstruct Node\n{\n    int l,r;\n    int val;\n    int height,size;\n}avl[maxn];\nint cnt,root;\ninline void newnode(int &now,int val)\n{\n    avl[now=++cnt].val=val;\n    avl[cnt].size=1;\n}\ninline void updata(int now)\n{\n    avl[now].size=avl[avl[now].l].size+avl[avl[now].r].size+1;\n    avl[now].height=max(avl[avl[now].l].height,avl[avl[now].r].height)+1;\n}\ninline int getBF(int now)\n{\n    return avl[avl[now].l].height-avl[avl[now].r].height;\n}\ninline void lx(int &now)\n{\n    int r=avl[now].r;\n    avl[now].r=avl[r].l;\n    avl[r].l=now;\n    now=r;\n    updata(avl[now].l);\n    updata(now);\n}\ninline void rx(int &now)\n{\n    int l=avl[now].l;\n    avl[now].l=avl[l].r;\n    avl[l].r=now;\n    now=l;\n    updata(avl[now].r);\n    updata(now);\n}\ninline void check(int &now)\n{\n    int nBF=getBF(now);\n    if(nBF>1)\n    {\n        int lBF=getBF(avl[now].l);\n        if(lBF>0)\n            rx(now);\n        else \n            lx(avl[now].l),rx(now);\n    }\n    if(nBF<-1)\n    {\n        int rBF=getBF(avl[now].r);\n        if(rBF<0)\n            lx(now);\n        else \n            rx(avl[now].r),lx(now);\n    }\n    else if(now) updata(now);\n}\nvoid ins(int &now,int val)\n{\n    if(!now)newnode(now,val);\n    else if(val<avl[now].val)ins(avl[now].l,val);\n    else ins(avl[now].r,val);\n    check(now);\n}\nint find(int &now,int fa)\n{\n    int res;\n    if(!avl[now].l)\n    {\n        res=now;\n        avl[fa].l=avl[now].r;\n    }\n    else\n    {\n        res=find(avl[now].l,now);\n        check(now);\n    }\n    return res;\n}\nvoid del(int &now,int val)\n{\n    if(val==avl[now].val)\n    {\n        int l=avl[now].l;\n        int r=avl[now].r;\n        if(!l||!r)now=l+r;\n        else \n        {\n            now=find(r,r);\n            if(now!=r)\n                avl[now].r=r;\n            avl[now].l=l;\n        }\n    }\n    else if(val<avl[now].val)del(avl[now].l,val);\n    else del(avl[now].r,val);\n    check(now);\n}\nint getrank(int val)\n{\n    int now=root,rank=1;\n    while(now)\n    {\n        if(val<=avl[now].val)\n            now=avl[now].l;\n        else\n        {\n            rank+=avl[avl[now].l].size+1;\n            now=avl[now].r;\n        }\n    }\n    return rank;\n}\nint getnum(int rank)\n{\n    int now=root;\n    while(now)\n    {\n        if(avl[avl[now].l].size+1==rank)\n            break;\n        else if(avl[avl[now].l].size>=rank)\n            now=avl[now].l;\n        else\n        {\n            rank-=avl[avl[now].l].size+1;\n            now=avl[now].r;\n        }\n    }\n    return avl[now].val;\n}\nint main()\n{\n    int t;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        int opt,x;\n        scanf(\"%d%d\",&opt,&x);\n        switch(opt)\n        {\n        case 1:\n            ins(root,x);\n            break;\n        case 2:\n            del(root,x);\n            break;\n        case 3:\n            printf(\"%d\\n\",getrank(x));\n            break;\n        case 4:\n            printf(\"%d\\n\",getnum(x));\n            break;\n        case 5:\n            printf(\"%d\\n\",getnum(getrank(x)-1));\n            break;\n        case 6:\n            printf(\"%d\\n\",getnum(getrank(x+1)));\n            break;\n        }\n    }\n    return 0;\n}\n```\n\n\u8fd9\u6bb5\u4ee3\u7801\u53ea\u80fd$\\color{darkgreen}{AC}$[$[P3369]$](https://www.luogu.com.cn/problem/P3369)   \n\u4f46\u662f\uff0c\u6211\u4eec\u6839\u636e\u9898\u610f\uff1a\n- \u628a\u6570\u7ec4\u5f00\u5927\u4e00\u70b9\n- \u628a$int$\u6539\u6210$long$ $long$\n- \u628a\u4e3b\u51fd\u6570\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u5148\u52a0\u70b9\uff0c\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b`last`\n\n\u5c31\u53ef\u4ee5\u628a\u8fd9\u9898\u8fc7\u4e86\uff1f\u662f\u7684\uff01\n## \u771f\u00b7$Code$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int maxn = 2e6+10;\nstruct node\n{\n\tint l,r;\n\tint val;\n\tint size,height;\n}avl[maxn];\nint cnt,root;\ninline void newnode(int &now,int val)\n{\n\tavl[now=++cnt].val=val;\n\tavl[now].size=1;\n}\ninline void updata(int now)\n{\n\tavl[now].size=avl[avl[now].l].size+avl[avl[now].r].size+1;\n\tavl[now].height=max(avl[avl[now].l].height,avl[avl[now].r].height)+1;\n}\ninline void lx(int &now)\n{\n\tint r=avl[now].r;\n\tavl[now].r=avl[r].l;\n\tavl[r].l=now;\n\tnow=r;\n\tupdata(avl[now].l);\n\tupdata(now);\n}\ninline void rx(int &now)\n{\n\tint l=avl[now].l;\n\tavl[now].l=avl[l].r;\n\tavl[l].r=now;\n\tnow=l;\n\tupdata(avl[now].r);\n\tupdata(now);\n}\nint getBF(int now)\n{\n\treturn avl[avl[now].l].height-avl[avl[now].r].height;\n}\ninline void check(int &now)\n{\n\tint nBF=getBF(now);\n\tif(nBF>1)//L\n\t{\n\t\tint lBF=getBF(avl[now].l);\n\t\tif(lBF>0)//LL\n\t\t\trx(now);\n\t\telse //LR\n\t\t\tlx(avl[now].l),rx(now);\n\t}\n\tif(nBF<-1)//R\n\t{\n\t\tint rBF=getBF(avl[now].r);\n\t\tif(rBF<0)//RR\n\t\t\tlx(now);\n\t\telse //RL\n\t\t\trx(avl[now].r),lx(now);\n\t}\n\telse if(now)updata(now);\n}\ninline void ins(int &now,int val)\n{\n\tif(!now)newnode(now,val);\n\telse if(val<avl[now].val)ins(avl[now].l,val);\n\telse ins(avl[now].r,val);\n\tcheck(now);\n}\nint find(int &now,int fa)\n{\n\tint res;\n\tif(!avl[now].l)\n\t{\n\t\tres=now;\n\t\tavl[fa].l=avl[now].r;\t\n\t}\t\n\telse \n\t{\n\t\tres=find(avl[now].l,now);\n\t\tcheck(now);\n\t}\n\treturn res;\n} \nvoid del(int &now,int val)\n{\n\tif(val==avl[now].val)\n\t{\n\t\tint l=avl[now].l,r=avl[now].r;\n\t\tif(!l||!r)now=l+r;\n\t\telse \n\t\t{\n\t\t\tnow=find(r,r);\n\t\t\tif(now!=r)avl[now].r=r;\n\t\t\tavl[now].l=l;\n\t\t}\n\t}\n\telse if(val<avl[now].val)\n\t\tdel(avl[now].l,val);\n\telse del(avl[now].r,val);\n\tcheck(now);\n}\nint getrank(int val)\n{\n\tint now=root,rank=1;\n\twhile(now)\n\t{\n\t\tif(val<=avl[now].val)now=avl[now].l;\n\t\telse\n\t\t{\n\t\t\trank+=avl[avl[now].l].size+1;\n\t\t\tnow=avl[now].r;\n\t\t}\n\t}\n\treturn rank;\n}\nint getnum(int rank)\n{\n\tint now=root;\n\twhile(now)\n\t{\n\t\tif(avl[avl[now].l].size+1==rank)break;\n\t\telse if(avl[avl[now].l].size>=rank)now=avl[now].l;\n\t\telse \n\t\t{\n\t\t\trank-=avl[avl[now].l].size+1;\n\t\t\tnow=avl[now].r;\n\t\t}\n\t}\n\treturn avl[now].val;\n}\nsigned main()\n{\n\tint n,t;\n    scanf(\"%lld%lld\",&n,&t);\n    for(int i=1,v;i<=n;i++)scanf(\"%lld\",&v),ins(root,v);\n    int lst=0,ans=0;\n    while(t--)\n    {\n        int opt,x;\n        scanf(\"%lld%lld\",&opt,&x);x^=lst;\n        switch(opt)\n        {\n        case 1:ins(root,x);break;\n        case 2:del(root,x);break;\n        case 3:lst=getrank(x);break;\n        case 4:lst=getnum(x);break;\n        case 5:lst=getnum(getrank(x)-1);break;\n        case 6:lst=getnum(getrank(x+1));break;\n        }\n        if(opt>=3&&opt<=6)ans^=lst;\n    }\n    printf(\"%lld\",ans);\n    return 0;\n} \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1587541610,
        "uid": 115855,
        "name": "Yyxxxxx",
        "ccfLevel": 4,
        "title": "P6136 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09 \u9898\u89e3"
    },
    {
        "content": "## RBT\n\n\u6628\u5929\u5df2\u7ecf\u53d1\u8fc7\u4e00\u7bc7\u9898\u89e3\u4e86qaq\n\n\u4f46\u662f\u83ab\u540d\u5176\u5999\u8fd8\u60f3\u53d1\u4e00\u7bc7\u73a9\u73a9\u3002\n\n\u5c45\u7136\u6709 AVL \u6811\u4e86\uff0c\u600e\u4e48\u80fd\u7f3a\u5c11\u6211\u4eec\u53ef\u7231\u7684\u7ea2\u9ed1\u6811\u5462QAQ\n\n\u5176\u5b9e\u7ea2\u9ed1\u6811\u5199\u8d77\u6765\u5e76\u4e0d\u96be\uff0c\u4e3b\u8981\u6ce8\u610f\u4e00\u4e0b\u4e24\u4e2a\u4fee\u6b63\u5c31\u884c\u4e86qaq\n\n\u67e5\u8be2\u540c\u5176\u64cd\u4f5c\uff0c\u63d2\u5165\u7684\u65f6\u5019\u5927\u529b\u5206\u7c7b\u8ba8\u8bba\u3002\n\n\u7ea2\u9ed1\u6811\u7684\u57fa\u7840\u64cd\u4f5c\u6233[\u8fd9\u91cc](https://www.luogu.com.cn/blog/bfqaq/qian-tan-hong-hei-shu)\n\n\u8d34\u4e2a\u4ee3\u7801\uff08\u9003\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tregister int x=0;\n\tregister bool f=0;\n\tregister char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-') f=1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+c-48;\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nchar cr[200];int tt;\ninline void print(int x,char k='\\n') {\n    if(!x) putchar('0');\n    if(x < 0) putchar('-'),x=-x;\n    while(x) cr[++tt]=x%10+'0',x/=10;\n    while(tt) putchar(cr[tt--]);\n    putchar(k);\n}\nconst int inf=2147483647;\nconst int maxn=1100100;\nstruct rbt{\n\tint v,sz,cnt;\n\tbool col;\n\tint fa,ch[2];\n}t[maxn*4];\nint st[maxn*4],top,rt,tot,n,m,ans,lastans;\nvoid pushup(int o){\n\tt[o].sz=t[t[o].ch[0]].sz+t[t[o].ch[1]].sz+t[o].cnt;\n}\nbool get(int o){\n\treturn t[t[o].fa].ch[1]==o;\n}\nint newnode(int v){\n\tint o=top?st[top--]:++tot;\n\tt[o]=(rbt){v,1,1,1,0,0,0};\n    return o;\n}\nvoid rotate(int o,bool c){\n\tint s1=t[o].ch[!c];\n\tt[o].ch[!c]=t[s1].ch[c];\n\tif (t[s1].ch[c])\n\t\tt[t[s1].ch[c]].fa=o;\n    t[s1].fa=t[o].fa;\n    if(!t[o].fa)\n\t\trt=s1;\n    else \n\t\tt[t[o].fa].ch[get(o)]=s1;\n    t[s1].ch[c]=o;\n    t[o].fa=s1;\n    pushup(o);\n    pushup(s1);\n}\nvoid ins_fix(int o) {\n\twhile(t[t[o].fa].col){\n        int f=t[o].fa,gf=t[f].fa;\n        bool wh=!get(f);\n        int ul=t[gf].ch[wh];\n        if(t[ul].col) {\n            t[f].col=t[ul].col=0;\n            t[gf].col=1;\n            o=gf;\n        }\n\t\telse{\n\t\t\tif(o==t[f].ch[wh])\n            \trotate(o=f,!wh);\n\t\t\telse{\n            \tt[gf].col=1;\n            \tt[f].col=0;\n            \trotate(gf,wh);\n        \t}\n    \t}\n    }\n    t[rt].col=0;\n}\nvoid ins(int v) {\n    int o=rt,f=0;\n    while(o){\n        t[o].sz++,f=o;    \n        if(v==t[o].v){\n            t[o].cnt++;\n            return;\n        }\n        o=t[o].ch[v>t[o].v];\n    }\n    o=newnode(v);\n    if(f) t[f].ch[v>t[f].v]=o;\n    else rt=o;\n    t[o].fa=f;\n    ins_fix(o);\n}\nint kth(int k) {\n    int tmp;\n    int o=rt;\n    for (;o;) {\n        tmp=t[t[o].ch[0]].sz;\n        if (tmp+1<=k&&k<=tmp+t[o].cnt)\n\t\t\tbreak;\n        else{\n\t\t\tif (k<=tmp)\n\t\t\t\to=t[o].ch[0];\n\t\t\telse{\n\t\t\t\tk-=tmp+t[o].cnt;\n\t\t\t\to=t[o].ch[1];\n\t\t\t}\n\t\t}\n    }\n    return t[o].v;\n}\nvoid update(int o){\n\tfor(int i=o;i;i=t[i].fa){\n\t\tt[i].sz--;\n\t}\n}\nvoid del_fix(int o) {\n    while(o!=rt&&!t[o].col) {\n        bool wh=!get(o);\n        int f=t[o].fa,ul=t[f].ch[wh];\n        if(t[ul].col){\n            t[ul].col=0;\n            t[f].col=1;\n            rotate(f,!wh);\n            ul=t[f].ch[wh];\n        }\n\t\telse{\n\t\t\tif(!t[t[ul].ch[0]].col&&!t[t[ul].ch[1]].col){\n            \tt[ul].col=1;\n\t\t\t\to=f;\n        \t}\n\t\t\telse{\n            \tif(!t[t[ul].ch[wh]].col){\n                \tt[t[ul].ch[!wh]].col=0;\n                \tt[ul].col=1;\n                \trotate(ul,wh);\n                \tul=t[f].ch[wh];\n            \t}\n            \tt[ul].col=t[f].col;\n            \tt[t[ul].ch[wh]].col=t[f].col=0;\n            \trotate(f,!wh);\n            \tbreak;\n        \t}\n    \t}\n    }\n    t[o].col=0;\n}\nvoid del(int v) {\n\tint o=rt;\n\twhile(o&&t[o].v!=v){\n\t\to=t[o].ch[t[o].v<v];\n\t}\n    if(!o)return;\n    if(t[o].cnt>1) {        \n        t[o].cnt--;\n        update(o);\n        return;\n    }\n    int d=o,g=0;\n    if(t[o].ch[0]&&t[o].ch[1]){\n        d=t[o].ch[1];\n        while(t[d].ch[0])\n\t\t\td=t[d].ch[0];\n    }\n    g=t[d].ch[!t[d].ch[0]];\n    t[g].fa=t[d].fa;\n    if(!t[d].fa)\n\t\trt=g;\n    else t[t[d].fa].ch[get(d)]=g;\n    if(o!=d){\n    \tt[o].v=t[d].v;\n    \tt[o].cnt=t[d].cnt;\n\t}\n    update(t[d].fa);\n    for(int i=t[d].fa;i&&t[d].cnt>1&&i!=o;i=t[i].fa){\n    \tt[i].sz-=t[d].cnt;\n    \tt[i].sz++;\n    }\n    if (!t[d].col) del_fix(g);\n    st[++top]=d;\n}\nint rnk(int v) {\n\tins(v);\n    int tmp=0,sum=0;\n    int o=rt;\n    for (;o;) {\n        tmp=t[t[o].ch[0]].sz;\n        if(v==t[o].v)\n\t\t\tbreak;\n        else{\n\t\t\tif(v<t[o].v)\n\t\t\t\to=t[o].ch[0];\n        \telse{\n\t\t\t\tsum+=tmp+t[o].cnt,\n\t\t\t\to=t[o].ch[1];\n        \t}\n    \t}\n    }\n    del(v);\n    return sum+tmp+1;\n}\nint suf(int v) {\n    int res=inf;\n    int o=rt;\n    for(;o;){\n        if(t[o].v>v){\n\t\t\tres=t[o].v,\n\t\t\to=t[o].ch[0];\n\t\t}\n        else \n\t\t\to=t[o].ch[1];\n    }\n\treturn res;\n}\nint pre(int v) {\n    int res=-inf;\n    int o=rt;\n    for(;o;){\n        if(t[o].v<v){\n\t\t\tres=t[o].v,o=t[o].ch[1];\n        }\n        else\n            o=t[o].ch[0];\n    }\n\treturn res;\n}\nsigned main(){\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++){\n\t\tint a=read();\n\t\tins(a);\n\t}\n    while(m--){\n        int opt=read(),v=read()^lastans;\n        if(opt==1) ins(v);\n        if(opt==2) del(v);\n        if(opt==3) lastans=rnk(v);\n        if(opt==4) lastans=kth(v);\n        if(opt==5) lastans=pre(v);\n        if(opt==6) lastans=suf(v);\n        if(opt!=1&&opt!=2)ans^=lastans;\n    }\n    print(ans);\n    return 0;\n}\n```\n",
        "postTime": 1582785031,
        "uid": 120074,
        "name": "BFqwq",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "fhq treap\n\n\u7b80\u8981\u56de\u987etreap\uff1a\n\ntreap=tree+heap\n\n\u5b83\u7684\u5f62\u6001\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u6ee1\u8db3\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u6bcf\u4e2a\u70b9\u7684\u968f\u673a\u503c\u6ee1\u8db3\u5c0f\u6839\u5806\u7684\u6027\u8d28\n\nfhq treap\u7684\u6838\u5fc3\u64cd\u4f5c\u6709\u4e24\u4e2a\uff1a\u5206\u88c2\u548c\u5408\u5e76\n\n\u5206\u88c2\uff1a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6743\u503ck\uff0c\u5c06\u4e00\u68f5\u6811\u5206\u88c2\u6210\u4e24\u4e2a\uff0c\u4f7f\u5f97\u5206\u88c2\u540e\u7684\u4e24\u68f5\u6811\u4e00\u68f5\u6743\u503c\u5168\u90e8\u5c0f\u4e8e\u7b49\u4e8ek\uff0c\u53e6\u4e00\u68f5\u6743\u503c\u5168\u90e8\u5927\u4e8ek\uff0c\u5e76\u4e14\u4f9d\u65e7\u6ee1\u8db3\u5206\u88c2\u524d\u7684\u6027\u8d28\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mw0h5gfn.png)\n\n\u5982\u4e0a\u56fe\uff0c\u6bcf\u4e00\u4e2a\u70b9\u524d\u9762\u7684\u6570\u8868\u793a\u6743\u503c\uff0c\u540e\u9762\u7684\u6570\u8868\u793a\u968f\u673a\u503c\n\n\u5f53\u6211\u4eec\u904d\u5386\u5230\u4e00\u4e2a\u70b9\u65f6\uff0c\u5982\u679c\u5b83\u7684\u6743\u503c\u5c0f\u4e8ek\uff0c\u90a3\u4e48\u5b83\u7684\u5de6\u5b50\u6811\u4f1a\u88ab\u5206\u5230\u5de6\u8fb9\u7684\u6811\u91cc\uff0c\u7136\u540e\u6211\u4eec\u904d\u5386\u5b83\u7684\u53f3\u513f\u5b50\uff0c\u5982\u679c\u5927\u4e8e\u7b49\u4e8ek\uff0c\u5219\u628a\u5b83\u7684\u53f3\u5b50\u6811\u5206\u5230\u53f3\u8fb9\u7684\u6811\u91cc\uff0c\u7136\u540e\u904d\u5386\u4ed6\u7684\u5de6\u513f\u5b50\u3002\n\n\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u4ee4$k = 5$\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u4e2a\u5b50\u6811\u91cc\u9762\u662f3\u7684\u5de6\u5b50\u6811\u548c5\u7684\u5de6\u5b50\u6811\uff0c\u53e6\u4e00\u4e2a\u5b50\u6811\u91cc\u9762\u662f7\u7684\u53f3\u5b50\u6811\u548c6\u7684\u53f3\u5b50\u6811\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/l4qwq22l.png)\n\n```cpp\nvoid split(int cnt, int k, int &x, int &y)//\u6ce8\u610f\u4f20\u5740\u7b26 \n{\n\tif(!cnt)//\u5230\u8fbe\u9012\u5f52\u8fb9\u754c \n\t{\n\t\t//\u8fd9\u4e2a\u65f6\u5019\u6709\u4e24\u79cd\u60c5\u51b5\n\t\t//\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5206\u88c2\uff0c\u5219\u521d\u59cb\u53160\n\t\t//\u5982\u679c\u5230\u4e86\u53f6\u5b50\u8282\u70b9\uff0cx\u548cy\u4f1a\u5728\u56de\u6eaf\u7684\u65f6\u5019\u6539\u53d8 \n\t\tx = y = 0;\n\t\treturn;\n\t}\n\tif(T[cnt].val <= k)\n\t{\n\t\tx = cnt;//\u52a0\u5165\u5230x \n\t\tsplit(T[cnt].r, k, T[cnt].r, y);\n\t\t//\u904d\u5386\u53f3\u5b50\u6811\n\t\t//\u4e4b\u6240\u4ee5\u628ar\u653e\u5230x\u7684\u4f4d\u7f6e\u4e0a\u662f\u56e0\u4e3ar\u7684\u5de6\u5b50\u6811\u4e5f\u6709\u53ef\u80fd\u5728x\u4e2d \n\t}\n\telse//\u548c\u4e0a\u9762\u53cd\u8fc7\u6765 \n\t{\n\t\ty = cnt;\n\t\tsplit(T[cnt].l, k, x, T[cnt].l);\n\t}\n    Update(cnt);\n}\n```\n\n\u5408\u5e76\uff1a\u5c06\u4e24\u4e2a\u5b50\u6811\u6309\u7167\u968f\u673a\u503c\u5408\u5e76(\u56e0\u4e3a\u8981\u4fdd\u8bc1\u6811\u7684\u6df1\u5ea6\u6240\u4ee5\u8981\u6309\u7167\u968f\u673a\u503c)\n\n\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u4e24\u4e2a\u5b50\u6811\u6743\u503c\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u6240\u4ee5\u53ea\u9700\u6bcf\u6b21\u8ba9\u968f\u673a\u503c\u5c0f\u7684\u5728\u4e0a\u9762\u5c31\u884c\u4e86\n\n ```cpp\nint merge(int x, int y)\n{\n\tif(x == 0) return y;\n\tif(y == 0) return x;\n\tif(T[x].pri <= T[y].pri)\n\t{//x\u5c0f\uff0c\u628ay\u63a5\u5728\u53f3\u8fb9 \n\t\tT[x].r = merge(T[x].r, y);\n\t\tUpdate(x);\n\t\treturn x;\n\t}\n\tif(T[x].pri > T[y].pri)\n\t{//y\u5c0f\uff0c\u628ax\u63a5\u5728\u5de6\u8fb9 \n\t\tT[y].l = merge(x, T[y].l);\n\t\tUpdate(y);\n\t\treturn y;\n\t}\n}\n ```\n\n\n\n\u7b2ck\u5927\uff1a\n\n\u628a\u63e1\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\n\n```cpp\nint kth(int cnt, int k)\n{\n\tif(T[T[cnt].l].siz + 1 == k) return T[cnt].val;//\u8fd9\u4e2a\u6570\u4e3a\u6839\n\tif(T[T[cnt].l].siz >= k) return kth(T[cnt].l, k);//\u5728\u5de6\u533a\u95f4\n\telse return kth(T[cnt].r, k - T[T[cnt].l].siz - 1);//\u53f3\u533a\u95f4\uff1a\u6392\u540d-\u5de6\u513f\u5b50\u548c\u81ea\u5df1\n}\n```\n\n\u63a5\u4e0b\u6765\u662f\u64cd\u4f5c\uff1a\n\n```cpp\nif(opt == 1)\n{//\u6dfb\u52a0\n\tint x, y;\n\tsplit(root, a, x, y);//\u5206\u79bb<=x\u548c>x\n\troot = merge(merge(x, New(a)), y);//\u628ax\u6dfb\u52a0\u8fdb\u53bb\n}\nif(opt == 2)\n{//\u5220\u9664\n\tint x, y, z;\n\tsplit(root, a, x, y);//\u5206\u79bb<=x\u548c>x\n\tsplit(x, a - 1, x, z);//\u5728<=x\u4e2d\u5206\u79bb<x\u548c=x\n\tz = merge(T[z].l, T[z].r);//\u5728=x\u4e2d\u5220\u9664\u4e00\u4e2ax\n\troot = merge(merge(x, z), y);//\u5c06\u5269\u4f59\u7684\u5408\u5e76\n}\nif(opt == 3)\n{//\u67e5\u8be2x\u6392\u540d\n\tint x, y;\n\tsplit(root, a - 1, x, y);//\u5206\u79bb<x\u548c>=x\n\tcout << T[x].siz + 1 << endl;//x\u7684\u6392\u540d\u4e3a<=x\u7684\u6570\u7684\u4e2a\u6570\n\troot = merge(x, y);//\u5408\u5e76\n}\nif(opt == 4)\n{//\u67e5\u8be2\u6392\u540dx\u7684\u6570\n\tcout<< kth(root, a) << endl;\n}\nif(opt == 5)\n{//\u6c42x\u524d\u9a71\n\tint x, y;\n\tsplit(root, a - 1, x, y);//\u5206\u79bb<x\u548c>=x\n\tcout << kth(x, T[x].siz) << endl;//\u524d\u9a71\u5c31\u662f<x\u7684\u6570\u7684\u4e2a\u6570\u7684\u90a3\u4e2a\u6570\n\troot = merge(x, y);//\u5408\u5e76\n}\nif(opt == 6)\n{//\u6c42x\u540e\u7ee7\n\tint x, y;\n\tsplit(root, a, x, y);//\u5206\u79bb<=x\u548c>x\n\tcout << kth(y, 1) << endl;//>x\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u6570\n\troot = merge(x, y);//\u5408\u5e76\n}\n```\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u8981\u6ce8\u610f\u7684\u5c31\u662f$N$\u7684\u8303\u56f4\u3002\u6781\u9650\u6570\u636etreap\u91cc\u9762\u7684\u70b9\u6700\u591a\u53ef\u80fd\u6709$1100000$\u4e2a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 1100005;\nint read()\n{\n\tint ans = 0;\n\tchar c = getchar(), last = ' ';\n\twhile(c < '0' || c > '9') last = c, c = getchar();\n\twhile(c >= '0' && c <= '9') ans = (ans << 1) + (ans << 3) + c - '0', c = getchar();\n\tif(last == '-') ans = - ans;\n\treturn ans;\n}\nint ecnt;\nstruct tree\n{\n\tint l, r, siz, rad, val;\n}t[N<<2];\nunsigned long long seed = 1;\nint Rand()\n{\n\tseed *= 260817;\n\treturn int(seed);\n}\nvoid update(int cnt)\n{\n\tt[cnt].siz = t[t[cnt].l].siz + t[t[cnt].r].siz + 1;\n}\n\nint New(int x)\n{\n\tt[++ecnt].val = x;\n\tt[ecnt].rad = Rand();\n\tt[ecnt].siz = 1;\n\treturn ecnt;\n}\n\nvoid split(int cnt, int k, int &x, int &y)\n{\n\tif(!cnt)\n\t{\n\t\tx = y = 0;\n\t\treturn;\n\t}\n\tif(t[cnt].val <= k)\n\t{\n\t\tx = cnt;\n\t\tsplit(t[cnt].r, k, t[cnt].r, y);\n\t}\n\tif(t[cnt].val > k)\n\t{\n\t\ty = cnt;\n\t\tsplit(t[cnt].l, k, x, t[cnt].l);\n\t}\n\tupdate(cnt);\n}\n\nint merge(int x, int y)\n{\n\tif(x == 0) return y;\n\tif(y == 0) return x;\n\tif(t[x].rad <= t[y].rad)\n\t{\n\t\tt[x].r = merge(t[x].r, y);\n\t\tupdate(x);\n\t\treturn x;\n\t}\n\telse if(t[x].rad > t[y].rad)\n\t{\n\t\tt[y].l = merge(x, t[y].l);\n\t\tupdate(y);\n\t\treturn y;\n\t}\n}\n\nint kth(int cnt, int k)\n{\n\tif(t[t[cnt].l].siz + 1 == k) return t[cnt].val;\n\tif(t[t[cnt].l].siz >= k) return kth(t[cnt].l, k);\n\telse return kth(t[cnt].r, k - t[t[cnt].l].siz - 1);\n}\n\nint n, m, rt;\nint last = 0, ans = 0;\n\nint main()\n{\n\t//freopen(\"1.in\", \"r\", stdin);\n\t//freopen(\"1.out\", \"w\", stdout); \n\t//srand(time(0));\n\tscanf(\"%d%d\", &n, &m);\n\tint x, y, z, k, opt;\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\tk = read();\n\t\tsplit(rt, k, x, y);\n\t\trt = merge(merge(x, New(k)), y);\n\t}\n\tfor(int i = 1; i <= m; i ++)\n\t{\n\t\topt = read(), k = read();\n\t\tk ^= last;\n\t\tif(opt == 1) \n\t\t{\n\t\t\tsplit(rt, k, x, y);\n\t\t\trt = merge(merge(x, New(k)), y);\n\t\t}\n\t\tif(opt == 2)\n\t\t{\n\t\t\tsplit(rt, k, x, y);\n\t\t\tsplit(x, k - 1, x, z);\n\t\t\tz = merge(t[z].l, t[z].r);\n\t\t\trt = merge(merge(x, z), y); \n\t\t}\n\t\tif(opt == 3)\n\t\t{\n\t\t\tsplit(rt, k - 1, x, y);\n\t\t\tlast = t[x].siz + 1;\n\t\t\tans ^= last;\n\t\t\t//printf(\"%lld\\n\", last);\n\t\t\trt = merge(x, y);\n\t\t}\n\t\tif(opt == 4)\n\t\t{\n\t\t\tlast = kth(rt, k);\n\t\t\tans ^= last;\n\t\t\t//printf(\"%lld\\n\", last);\n\t\t}\n\t\tif(opt == 5)\n\t\t{\n\t\t\tsplit(rt, k - 1, x, y);\n\t\t\tlast = kth(x, t[x].siz);\n\t\t\tans ^= last;\n\t\t\t//printf(\"%lld\\n\", last);\n\t\t\trt = merge(x, y);\n\t\t}\n\t\tif(opt == 6)\n\t\t{\n\t\t\tsplit(rt, k, x, y);\n\t\t\tlast = kth(y, 1);\n\t\t\tans ^= last;\n\t\t\t//printf(\"%lld\\n\", last);\n\t\t\trt = merge(x, y);\n\t\t}\n\t}\n\tprintf(\"%d\", ans);\n}\n```",
        "postTime": 1593776099,
        "uid": 177510,
        "name": "\u5c0f\u849f\u84bb\u76ae\u76ae\u9c7c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "# \u5927\u7231\u66ff\u7f6a\u7f8a\u6811\n\n------------\n\n\u61c2\u66ff\u7f6a\u7f8a\u6811\u7684dalao\u53ef\u4ee5\u76f4\u63a5\u770b\u6700\u540e\u8fd9\u9053\u9898\u7684\u7a0b\u5e8f\u3002\n\n------------\n\n\u90a3\u4e48\u5c31\u4ece[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P3369)\u5f00\u59cb\u8bb2\u66ff\u7f6a\u7f8a\u6811\u5427\u3002\n\n#### \u6982\u5ff5/\u601d\u60f3\n\n\u66ff\u7f6a\u7f8a\u6811\u5c5e\u4e8e\u5e73\u8861\u6811\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u4ed6\u7ef4\u62a4\u5e73\u8861\u7684\u65b9\u5f0f\u4e0d\u662f\u590d\u6742\u7684\u65cb\u8f6c\uff0c\u800c\u662f\u76f4\u63a5\u628a\u8fd9\u68f5\u5b50\u6811\u76f4\u63a5\u63b0\u4e0b\u6765\u62cd\u6241\u91cd\u5efa\uff0c\u518d\u653e\u56de\u53bb\u5c31okk\u4e86~~\u6240\u4ee5\u66b4\u529b\u5929\u4e0b\u7b2c\u4e00\u554a~~\u3002\n\n#### \u5b9e\u73b0\uff1a\n\n0. \u53d8\u91cf\u540d\u7684\u5b9a\u4e49/\u542b\u4e49\uff1a\n```cpp\nstruct node{\n\tint ls , rs , tsize/*\u771f\u6b63\u7684\u5927\u5c0f\uff0c\u5305\u62ec\u5220\u9664\u7684*/ , fsize/*\u53ea\u6709\u771f\u6b63\u5b58\u5728\u7684\u70b9\u7684\u5927\u5c0f*/ , date/*\u503c*/ , f/*\u662f\u5426\u5b58\u5728*/; \n};\nnode a[400040];\nint root/*\u6839\u8282\u70b9*/ , pool/*\u5185\u5b58\u6c60\u7684\u6307\u9488*/ , poi/*\u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u540e\u7684\u6570\u7ec4\u7684\u6307\u9488*/ , n;\ndouble alpha = 0.75;\nint memo[400040]/*\u5185\u5b58\u6c60*/ , c[400040]/*\u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u540e\u7684\u6570*/;\n```\n\u5185\u5b58\u6c60\uff1a\u56e0\u4e3a\u52a8\u6001\u5f00\u70b9\u4f1a\u5f88\u6162\uff0c\u4e0d\u5982\u63d0\u524d\u7533\u8bf7\u7a7a\u95f4\uff0c\u8981\u7528\u7684\u65f6\u5019\u4ece\u91cc\u9762\u53d6\u5c31\u662f\u4e86\u3002\u6ce8\u610f\uff01\u56e0\u4e3a\u6211\u4eec\u7a0b\u5e8f\u91cc\u9762\u7684\u6811[\u5c42\u5e8f\u904d\u5386](https://baike.sogou.com/v538762.htm?fromTitle=%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86)\u7684\u70b9\u5e76\u4e0d\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u8fd9\u6837\u7ed9\u70b9\u662f\u6ca1\u95ee\u9898\u7684\uff08\u5c31\u50cf\u6709\u53ef\u80fd\u8282\u70b9$3$\u7684\u513f\u5b50\u53ef\u80fd\u662f$6$\u548c$11$\uff0c\u800c\u7236\u4eb2\u53c8\u4e3a$33$\uff09\u3002\n\n\u800c\u4e3a\u4ec0\u4e48\u8bf4$tsize$\u548c$fsize$\u5206\u4e3a\u5305\u62ec\u4e86\u5220\u9664\u4e86\u7684\u548c\u4e0d\u5305\u62ec\u5220\u9664\u4e86\u7684\u5462\uff1f\u56e0\u4e3a\u66ff\u7f6a\u7f8a\u6811\u662f\u60f0\u6027\u5220\u9664\uff0c\u53ea\u662f\u6253\u4e2a\u6807\u8bb0\u800c\u5df2\uff0c\u771f\u6b63\u7684\u5220\u9664\u5728\u91cd\u5efa\u7684\u65f6\u5019\u3002\n\n1. \u6838\u5fc3\u64cd\u4f5c\uff1a\u5224\u65ad\u662f\u5426\u62cd\u6241\n\n\u8fd9\u91cc\u5bf9\u4e8e\u4e00\u68f5\u6811\u662f\u5426\u9700\u8981\u62cd\u6241\uff0c\u6211\u4eec\u7528\u5230\u4e00\u4e2a\u4e1c\u897f\uff0c\u53eb\u5e73\u8861\u56e0\u5b50\uff0c\u5f53\u8fd9\u4e2a\u6811\u603b\u7684\u5927\u5c0f\u4e58\u4e00\u4e2a\u5e73\u8861\u56e0\u5b50\u7684\u65f6\u5019\uff0c\u8fd8\u6ca1\u6709\u5176\u4e2d\u5927\u7684\u90a3\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u5927\u65f6\uff0c\u5c31\u91cd\u5efa\u3002\u5e73\u8861\u56e0\u5b50\u4e00\u822c\u53d60.5 ~ 1\uff0c\u4f46\u662f\u7531\u4e8e\u592a\u5c0f\u7684\u8bdd\uff0c\u62cd\u6241\u6b21\u6570\u5c31\u592a\u591a\u4e86\uff0c\u592a\u5927\u7684\u8bdd\uff0c\u62cd\u6241\u6b21\u6570\u592a\u5c11\u4e86\uff0c\u90fd\u4e0d\u884c\uff0c\u6240\u4ee5\u4e00\u822c\u662f\u53bb0.7 ~ 0.8\uff0c\u6211\u4e00\u822c\u7528$0.75$\u3002\n\n```cpp\nbool cheak(int now){\t//\u5224\u65ad\u662f\u5426\u91cd\u5efa \n\tif((double)a[now].fsize * alpha >= (double)max(a[a[now].ls].fsize , a[a[now].rs].fsize)) return true;\n\treturn false;\n}\n```\n2. \u63d2\u5165\uff1a\n\n\u8fd9\u4e2a\u5c31\u8ddf\u666e\u901a\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u4e00\u6837\u7684\u4e86\uff0c\u53ea\u4e0d\u8fc7\u63d2\u5b8c\u540e\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u91cd\u5efa\u3002\n```cpp\nvoid insert(int &now , int t){\t//\u63d2\u5165\u6570t \n\tif(!now){\n\t\tnow = memo[pool--];\t//\u4ece\u5185\u5b58\u6c60\u5077\u4e00\u4e2a\u8282\u70b9 \n\t\ta[now].date = t;\n\t\ta[now].f = a[now].fsize = a[now].tsize = 1;\n\t\ta[now].ls = a[now].rs = 0;\n\t\treturn;\n\t}\n\ta[now].fsize++ , a[now].tsize++;\t//\u4e0b\u9762\u4f1a\u66f4\u65b0\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u8981\u52a0\u4e00 \n\tif(a[now].date >= t) insert(a[now].ls , t);\n\telse insert(a[now].rs , t);\n\tif(!cheak(now)) rebuild(now);\t//\u63d2\u5165\u4e00\u4e2a\u70b9\u540e\u53ef\u80fd\u4f1a\u4e0d\u5e73\u8861\u7684 \n}\n```\n3. \u5efa\u6811/\u91cd\u5efa\uff1a\n\n\u5f53\u6211\u4eec\u7684\u9700\u8981\u91cd\u5efa\u65f6\uff0c\u8fd9\u9897\u6811\u4e5f\u4e00\u5b9a\u662f\u4e00\u9897\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u6240\u4ee5\u4e2d\u5e8f\u904d\u5386\u4e00\u5b9a\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u4e2d\u5e8f\u904d\u5386\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u5e8f\u5217\uff0c\u4ece\u4e2d\u95f4\u5f00\u59cb\u5f80\u4e24\u8fb9\u4e8c\u5206\u8fdb\u884c\u5efa\u6811\uff08\u5982\u679c\u8fd9\u91cc\u4e0d\u662f\u5f88\u61c2\u7684\u8bdd\u53ef\u4ee5\u5148\u770b\u770b\u4ee3\u7801\uff0c\u7136\u540e\u624b\u63a8\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u4ece\u4e2d\u95f4\u5f00\u59cb\u5efa\u6811\u662f\u5e73\u8861\u7684\uff09\u3002\n```cpp\nvoid dfs(int now){\t//\u4e2d\u5e8f\u904d\u5386 \n\tif(!now) return;\n\tdfs(a[now].ls);\n\tif(a[now].f) c[++poi] = now;\n\telse memo[++pool] = now;\t//\u5728\u8fd9\u91cc\u771f\u6b63\u5220\u9664\u70b9 \uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u4e22\u56de\u5185\u5b58\u6c60 \n\tdfs(a[now].rs);\n}\nvoid build(int l , int r , int &now){\t//\u5efa\u6811 \n\tint mid = (l + r) / 2;\n\tnow = c[mid];\n\tif(l == r){\t//\u53f6\u5b50\u8282\u70b9 \n\t\ta[now].ls = a[now].rs = 0;\n\t\ta[now].fsize = a[now].tsize = 1;\n\t\treturn;\n\t}\n\tif(l < mid) build(l , mid - 1 , a[now].ls); //\u5728l=mid\u7684\u65f6\u5019\u518d\u8fdb\u884c\u5c31\u4f1a\u51fa\u73b0l>r\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u4ee4\u4ed6\u5de6\u513f\u5b50\u4e3a0\u5c31\u53ef\u4ee5\u4e86 \n\telse a[now].ls = 0;\n\tbuild(mid + 1 , r , a[now].rs);\t//\u56e0\u4e3a\u9664\u6cd5\u603b\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u6240\u4ee5mid\u603b\u662f\u5c0f\u4e8er\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0l>r\u7684\u60c5\u51b5 \n\ta[now].fsize = a[a[now].ls].fsize + a[a[now].rs].fsize + 1;\t//\u66f4\u65b0 \n\ta[now].tsize = a[a[now].ls].tsize + a[a[now].rs].tsize + 1;\n}\nvoid rebuild(int &now){\t//\u91cd\u5efa \n\tpoi = 0;\t//\u8bb0\u5f97\u6e050\uff01 \n\tdfs(now);\n\tif(poi) build(1 , poi , now);\t//\u6709\u53ef\u80fd\u8fd9\u4e00\u9897\u6811\u90fd\u662f\u88ab\u8fc7\u60f0\u6027\u8fc7\u6807\u8bb0\u7684\uff0c\u6240\u4ee5\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u6709\u8282\u70b9 \n\telse now = 0;\n}\n```\n4. \u67e5\u627e\u6392\u540d\u4e3ark\u7684\u6570\uff1a\n\n\u8fd9\u4e2a\u4e5f\u8ddf\u4e8c\u53c9\u67e5\u627e\u6811\u4e00\u6837\u7684\uff0c\u4e0d\u65ad\u5224\u65ad\uff0c\u7136\u540e\u770b\u662f\u5426\u5230\u8fbe\u5373\u53ef\u3002\u6ce8\u610f\u5224\u65ad\u7684\u90a3\u91cc\u56e0\u4e3a\u60f0\u6027\u6807\u8bb0\u6240\u4ee5\u4e0d\u4e00\u6837\uff08\u5177\u4f53\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u770b\u4e0b\u9762\u7684delet\u5220\u9664\u51fd\u6570\uff09\u3002\n```cpp\nint ft(int rk){\t//\u67e5\u627e\u6392\u540d\u4e3ark\u7684\u6570 \n\tint now = root;\n\twhile(now){\t//\u9012\u63a8\u67e5\u627e\uff08\u4e5f\u53ef\u4ee5\u9012\u5f52\u7684\uff0c\u53ea\u4e0d\u8fc7\u8981\u91cd\u65b0\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u9ebb\u70e6\u70b9\uff09 \n\t\tif(a[now].f && a[a[now].ls].fsize + 1 == rk) return a[now].date;\n\t\telse if(a[a[now].ls].fsize >= rk) now = a[now].ls;\n\t\telse{\n\t\t\trk -= a[a[now].ls].fsize + a[now].f;\n\t\t\tnow = a[now].rs;\n\t\t}\n\t}\n}\n```\n5. \u67e5\u627e\u6570t\u7684\u6392\u540d\uff1a\n\n\u4e5f\u8ddf\u4e8c\u53c9\u67e5\u627e\u6570\u4e00\u6837\uff0c\u6ce8\u610f\u4e0b\u5bf9\u6392\u540d\u7684\u7edf\u8ba1\u662f\u6bcf\u6b21\u8d70\u53f3\u5b50\u6811\u65f6\u7d2f\u52a0\u5de6\u5b50\u6811\u7684\u4e2a\u6570\uff08\u5177\u4f53\u4e3a\u4ec0\u4e48\u8fd8\u662f\u770bdelet\u5220\u9664\u51fd\u6570\uff09\u3002\n```cpp\nint frk(int t){\n\tint now = root , ans = 1;\n\twhile(now){\t//\u9012\u63a8\u67e5\u627e\uff08\u4e5f\u53ef\u4ee5\u9012\u5f52\u7684\uff0c\u53ea\u4e0d\u8fc7\u8981\u91cd\u65b0\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u9ebb\u70e6\u70b9\uff09\n\t\tif(a[now].date >= t) now = a[now].ls;\n\t\telse{\n\t\t\tans += a[a[now].ls].fsize + a[now].f;\n\t\t\tnow = a[now].rs;\n\t\t}\n\t}\n\treturn ans;\n}\n```\n6. \u5220\u9664\u6392\u540d\u4e3ark\u7684\u6570/\u5220\u9664\u6570k\uff1a\n\n\u8fd9\u91cc\u7684\u5220\u9664\u53ea\u662f\u6253\u4e0a\u6807\u8bb0\u800c\u5df2\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u5427~\uff08\u4e0a\u9762\u7684\u95ee\u9898\u4e5f\u90fd\u5728\u4ee3\u7801\u91cc\u9762\uff09\n```cpp\nvoid delet(int &now , int rk){\t//\u5220\u9664\u6392\u540d\u4e3ark\u7684\u6570 \n\tif(a[now].f && a[a[now].ls].fsize + 1 == rk){\n\t\t/*\u89e3\u91ca\u4e00\u4e0b\u4e0d\u662f\u8fd9\u6837\u5199\u7684\uff1aa[a[now].ls].fsize + a[now].f == rk\n\t\t\u56e0\u4e3a\u6709\u53ef\u80fd\u8fd9\u6211\u4eec\u8d70\u7684\u8fd9\u4e00\u6761\u8def\u6709\u5f88\u591a\u88ab\u5220\u9664\u4e86\u70b9\uff08\u53ea\u6253\u4e86\u6807\u8bb0\uff09\uff0c\u4f46\u662fa[a[now].ls].fsize\u7684\u503c\u6709\u53ef\u80fd\u4e3ark\uff0c\n\t\t\u5b9e\u9645\u4e0a\u662f\u8fd8\u6ca1\u6709\u5230\u8fbe\u90a3\u4e2a\u8be5\u5220\u9664\u7684\u70b9\u7684 \uff0c \n\t\t\u6240\u4ee5\u4e00\u4e2a\u5148\u5224\u65ad\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u5148\u662f\u5426\u5b58\u5728\uff0c\u518d\u8fdb\u884c\u5220\u9664 */\n\t\ta[now].f = 0;\t//\u60f0\u6027\u5220\u9664\uff0c\u53ea\u662f\u6253\u4e2a\u6807\u8bb0\uff0c\u5728\u4e2d\u5e8f\u904d\u5386\u65f6\u624d\u771f\u6b63\u5220\u9664\n\t\ta[now].fsize--;\n\t\treturn;\n\t}\n\ta[now].fsize--;\t//\u8ddfinsert\u90a3\u4e2a\u64cd\u4f5c\u5f88\u50cf\uff0c\u4e0b\u9762\u5220\u6389\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e00\u4e2a\u5c06fsize\u51cf\u4e00\uff0c\u4f46\u662ftsize\u4e0d\u7528\u51cf \n\tif(a[a[now].ls].fsize + a[now].f >= rk) delet(a[now].ls , rk);\t\n\telse delet(a[now].rs , rk - a[a[now].ls].fsize - a[now].f);\n\t/*\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48rk\u8981\u51cf\u53bb\u5de6\u5b50\u6811\u548c\u6839\u8282\u70b9\n\t\u56e0\u4e3a\u6211\u4eec\u6765\u5230\u7684\u662f\u4e00\u9897\u65b0\u7684\u5b50\u6811\uff0c\u8981\u51cf\u53bb\u5de6\u8fb9\u7684\u6392\u540d\u624d\u53ef\u4ee5\u8fdb\u5165\u65b0\u7684\u5b50\u6811\uff0c\u76f8\u5f53\u4e8e\u628a\u6811\u4e0d\u65ad\u53d8\u5c0f\uff0c\u6392\u540d\u4e5f\u4e0d\u65ad\u53d8\u5c0f\u4e86\n\t\u4f46\u662f\u5de6\u5b50\u6811\u4e3a\u4ec0\u4e48\u4e0d\u7528\u51cf\u5462\uff1f\n\t\u56e0\u4e3a\u6211\u4eec\u67d0\u4e2a\u70b9\u7684\u6392\u540d\u5e94\u8be5\u662f\u4ece\u8fd9\u4e2a\u70b9\u5f80\u53f3\u5b50\u6811\u8d70\u65f6\u7d2f\u52a0\u5de6\u5b50\u6811\u4e4b\u548c\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u4e0d\u80fd\u7d2f\u52a0\u6392\u540d\u7684\uff08\u53ef\u4ee5\u770b\u4e0bft\u548cfrk\u51fd\u6570\u91cc\u9762\u7684\u64cd\u4f5c\uff09 \n\t\u8fd9\u4e2a\u5730\u65b9\u53ef\u80fd\u5f88\u4e0d\u597d\u7406\u89e3\uff0c\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u6a21\u62df\u4e00\u4e0b\uff0c\u4f1a\u597d\u5f88\u591a\n\t\u8fd9\u53ef\u80fd\u5c31\u662f\u53ea\u53ef\u610f\u4f1a\u4e0d\u53ef\u8a00\u4f20\u5427~*/\n}\nvoid rdelet(int t){\t//\u5220\u9664\u503c\u4e3at\u7684\u6570 \n\tdelet(root , frk(t));\n\tif((double)a[root].tsize * alpha >= a[root].fsize) rebuild(root);\t//\u5220\u9664\u592a\u591a\u4e86\uff0c\u60f0\u6027\u6807\u8bb0\u7684\u8282\u70b9\u592a\u591a\u4e5f\u4f1a\u964d\u4f4e\u67e5\u627e\u901f\u5ea6 \n}\n```\n\n------------\n\n\u4e0a\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct node{\n\tint ls , rs , tsize/*\u771f\u6b63\u7684\u5927\u5c0f\uff0c\u5305\u62ec\u672a\u5220\u9664\u7684*/ , fsize/*\u53ea\u6709\u771f\u6b63\u5b58\u5728\u7684\u70b9\u7684\u5927\u5c0f*/ , date/*\u503c*/ , f/*\u662f\u5426\u5b58\u5728*/; \n};\nnode a[400040];\nint root/*\u6839\u8282\u70b9*/ , pool/*\u5185\u5b58\u6c60\u7684\u6307\u9488*/ , poi/*\u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u540e\u7684\u6570\u7ec4\u7684\u6307\u9488*/ , n;\ndouble alpha = 0.75;\nint memo[400040]/*\u5185\u5b58\u6c60*/ , c[400040]/*\u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u540e\u7684\u6570*/;\nbool cheak(int now){\t//\u5224\u65ad\u662f\u5426\u91cd\u5efa \n\tif((double)a[now].fsize * alpha >= (double)max(a[a[now].ls].fsize , a[a[now].rs].fsize)) return true;\n\treturn false;\n}\nvoid dfs(int now){\t//\u4e2d\u5e8f\u904d\u5386 \n\tif(!now) return;\n\tdfs(a[now].ls);\n\tif(a[now].f) c[++poi] = now;\n\telse memo[++pool] = now;\t//\u5728\u8fd9\u91cc\u771f\u6b63\u5220\u9664\u70b9 \uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u4e22\u56de\u5185\u5b58\u6c60 \n\tdfs(a[now].rs);\n}\nvoid build(int l , int r , int &now){\t//\u5efa\u6811 \n\tint mid = (l + r) / 2;\n\tnow = c[mid];\n\tif(l == r){\t//\u53f6\u5b50\u8282\u70b9 \n\t\ta[now].ls = a[now].rs = 0;\n\t\ta[now].fsize = a[now].tsize = 1;\n\t\treturn;\n\t}\n\tif(l < mid) build(l , mid - 1 , a[now].ls); //\u5728l=mid\u7684\u65f6\u5019\u518d\u8fdb\u884c\u5c31\u4f1a\u51fa\u73b0l>r\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u4ee4\u4ed6\u5de6\u513f\u5b50\u4e3a0\u5c31\u53ef\u4ee5\u4e86 \n\telse a[now].ls = 0;\n\tbuild(mid + 1 , r , a[now].rs);\t//\u56e0\u4e3a\u9664\u6cd5\u603b\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u6240\u4ee5mid\u603b\u662f\u5c0f\u4e8er\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0l>r\u7684\u60c5\u51b5 \n\ta[now].fsize = a[a[now].ls].fsize + a[a[now].rs].fsize + 1;\t//\u66f4\u65b0 \n\ta[now].tsize = a[a[now].ls].tsize + a[a[now].rs].tsize + 1;\n}\nvoid rebuild(int &now){\t//\u91cd\u5efa \n\tpoi = 0;\t//\u8bb0\u5f97\u6e050\uff01 \n\tdfs(now);\n\tif(poi) build(1 , poi , now);\t//\u6709\u53ef\u80fd\u8fd9\u4e00\u9897\u6811\u90fd\u662f\u88ab\u8fc7\u6807\u8bb0\u7684\uff0c\u6240\u4ee5\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u6709\u8282\u70b9 \n\telse now = 0;\n}\nvoid insert(int &now , int t){\t//\u63d2\u5165\u6570t \n\tif(!now){\n\t\tnow = memo[pool--];\t//\u4ece\u5185\u5b58\u6c60\u5077\u4e00\u4e2a\u8282\u70b9 \n\t\ta[now].date = t;\n\t\ta[now].f = a[now].fsize = a[now].tsize = 1;\n\t\ta[now].ls = a[now].rs = 0;\n\t\treturn;\n\t}\n\ta[now].fsize++ , a[now].tsize++;\t//\u4e0b\u9762\u4f1a\u66f4\u65b0\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u8981\u52a0\u4e00 \n\tif(a[now].date >= t) insert(a[now].ls , t);\n\telse insert(a[now].rs , t);\n\tif(!cheak(now)) rebuild(now);\t//\u63d2\u5165\u4e00\u4e2a\u70b9\u540e\u53ef\u80fd\u4f1a\u4e0d\u5e73\u8861\u7684 \n}\nvoid delet(int &now , int rk){\t//\u5220\u9664\u6392\u540d\u4e3ark\u7684\u6570 \n\tif(a[now].f && a[a[now].ls].fsize + 1 == rk){\n\t\t/*\u89e3\u91ca\u4e00\u4e0b\u4e0d\u662f\u8fd9\u6837\u5199\u7684\uff1aa[a[now].ls].fsize + a[now].f == rk\n\t\t\u56e0\u4e3a\u6709\u53ef\u80fd\u8fd9\u6211\u4eec\u8d70\u7684\u8fd9\u4e00\u6761\u8def\u6709\u5f88\u591a\u88ab\u5220\u9664\u4e86\u70b9\uff08\u53ea\u6253\u4e86\u6807\u8bb0\uff09\uff0c\u4f46\u662fa[a[now].ls].fsize\u7684\u503c\u6709\u53ef\u80fd\u4e3ark\uff0c\n\t\t\u5b9e\u9645\u4e0a\u662f\u8fd8\u6ca1\u6709\u5230\u8fbe\u90a3\u4e2a\u8be5\u5220\u9664\u7684\u70b9\u7684 \uff0c \n\t\t\u6240\u4ee5\u4e00\u4e2a\u5148\u5224\u65ad\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u5148\u662f\u5426\u5b58\u5728\uff0c\u518d\u8fdb\u884c\u5220\u9664 */\n\t\ta[now].f = 0;\t//\u60f0\u6027\u5220\u9664\uff0c\u53ea\u662f\u6253\u4e2a\u6807\u8bb0\uff0c\u5728\u4e2d\u5e8f\u904d\u5386\u65f6\u624d\u771f\u6b63\u5220\u9664\n\t\ta[now].fsize--;\n\t\treturn;\n\t}\n\ta[now].fsize--;\t//\u8ddfinsert\u90a3\u4e2a\u64cd\u4f5c\u5f88\u50cf\uff0c\u4e0b\u9762\u5220\u6389\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4e00\u4e2a\u5c06fsize\u51cf\u4e00\uff0c\u4f46\u662ftsize\u4e0d\u7528\u51cf \n\tif(a[a[now].ls].fsize + a[now].f >= rk) delet(a[now].ls , rk);\t\n\telse delet(a[now].rs , rk - a[a[now].ls].fsize - a[now].f);\n\t/*\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48rk\u8981\u51cf\u53bb\u5de6\u5b50\u6811\u548c\u6839\u8282\u70b9\n\t\u56e0\u4e3a\u6211\u4eec\u6765\u5230\u7684\u662f\u4e00\u9897\u65b0\u7684\u5b50\u6811\uff0c\u8981\u51cf\u53bb\u5de6\u8fb9\u7684\u6392\u540d\u624d\u53ef\u4ee5\u8fdb\u5165\u65b0\u7684\u5b50\u6811\uff0c\u76f8\u5f53\u4e8e\u628a\u6811\u4e0d\u65ad\u53d8\u5c0f\uff0c\u6392\u540d\u4e5f\u4e0d\u65ad\u53d8\u5c0f\u4e86\n\t\u4f46\u662f\u5de6\u5b50\u6811\u4e3a\u4ec0\u4e48\u4e0d\u7528\u51cf\u5462\uff1f\n\t\u56e0\u4e3a\u6211\u4eec\u67d0\u4e2a\u70b9\u7684\u6392\u540d\u5e94\u8be5\u662f\u4ece\u8fd9\u4e2a\u70b9\u5f80\u53f3\u5b50\u6811\u8d70\u65f6\u7d2f\u52a0\u5de6\u5b50\u6811\u4e4b\u548c\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u4e0d\u80fd\u7d2f\u52a0\u6392\u540d\u7684\uff08\u53ef\u4ee5\u770b\u4e0bft\u548cfrk\u51fd\u6570\u91cc\u9762\u7684\u64cd\u4f5c\uff09 \n\t\u8fd9\u4e2a\u5730\u65b9\u53ef\u80fd\u5f88\u4e0d\u597d\u7406\u89e3\uff0c\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u6a21\u62df\u4e00\u4e0b\uff0c\u4f1a\u597d\u5f88\u591a\n\t\u8fd9\u53ef\u80fd\u5c31\u662f\u53ea\u53ef\u610f\u4f1a\u4e0d\u53ef\u8a00\u4f20\u5427~*/\n}\nint ft(int rk){\t//\u67e5\u627e\u6392\u540d\u4e3ark\u7684\u6570 \n\tint now = root;\n\twhile(now){\t//\u9012\u63a8\u67e5\u627e\uff08\u4e5f\u53ef\u4ee5\u9012\u5f52\u7684\uff09 \n\t\tif(a[now].f && a[a[now].ls].fsize + 1 == rk) return a[now].date;\n\t\telse if(a[a[now].ls].fsize >= rk) now = a[now].ls;\n\t\telse{\n\t\t\trk -= a[a[now].ls].fsize + a[now].f;\n\t\t\tnow = a[now].rs;\n\t\t}\n\t}\n}\nint frk(int t){\n\tint now = root , ans = 1;\n\twhile(now){\t//\u9012\u63a8\u67e5\u627e\uff08\u4e5f\u53ef\u4ee5\u9012\u5f52\u7684\uff09\n\t\tif(a[now].date >= t) now = a[now].ls;\n\t\telse{\n\t\t\tans += a[a[now].ls].fsize + a[now].f;\n\t\t\tnow = a[now].rs;\n\t\t}\n\t}\n\treturn ans;\n}\nvoid rdelet(int t){\t//\u5220\u9664\u503c\u4e3at\u7684\u6570 \n\tdelet(root , frk(t));\n\tif((double)a[root].tsize * alpha >= a[root].fsize) rebuild(root);\t//\u5220\u9664\u592a\u591a\u4e86\uff0c\u60f0\u6027\u6807\u8bb0\u7684\u8282\u70b9\u592a\u591a\u4e5f\u4f1a\u964d\u4f4e\u67e5\u627e\u901f\u5ea6 \n}\nint main(){\n\tcin >> n;\n\tfor(int i = 400000; i >= 1; i--) memo[++pool] = i;\t//\u9884\u5904\u7406\u5185\u5b58\u6c60 \n\twhile(n--){\n\t\tint opt , x;\n\t\tcin >> opt >> x;\n\t\tif(opt == 1) insert(root , x);\n\t\tif(opt == 2) rdelet(x);\n\t\tif(opt == 3) cout << frk(x) << endl;\n\t\tif(opt == 4) cout << ft(x) << endl;\n\t\tif(opt == 5) cout << ft(frk(x) - 1) << endl;\t//\u6839\u636e\u7a0b\u5e8f\u548c\u9898\u76ee\uff0c\u81ea\u5df1\u53ef\u4ee5\u60f3\u4e0b\u4e3a\u4ec0\u4e48\u8f93\u51fa\u524d\u9a71\u548c\u540e\u7ee7\u7684\u65b9\u5f0f\u4e0d\u4e00\u6837 \n\t\tif(opt == 6) cout << ft(frk(x + 1)) << endl;\n\t\t/*\u89e3\u91ca\u4e3a\u4ec0\u4e48\u9a71\u548c\u540e\u7ee7\u7684\u65b9\u5f0f\u4e0d\u4e00\u6837\uff1a\n\t\t\u56e0\u4e3a\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u4e00\u6837\u7684\u6570\uff0c\u67e5\u627e\u540e\u7ee7\u7684\u65f6\u5019\u52a0\u4e00\u5c31\u53ef\u4ee5\u627e\u5230\u540e\u9762\u7684\u7b2c\u4e00\u4e2a\u6bd4\u4ed6\u5927\u7684\u6570\n\t\t\u5373\u4f7f\u8fd9\u4e2a\u6570\u5b57\u4e0d\u5b58\u5728\uff0c\u7531\u4e8e\u6211\u4eec\u7a0b\u5e8f\u7f16\u7a0b\u7684\u65b9\u5f0f\uff0c\u4e5f\u662f\u53ef\u4ee5\u627e\u5230\u6b63\u786e\u7684\u6570\u54d2 \n\t\t\u7136\u540e\u627e\u524d\u9a71\u7684\u65f6\u5019\u4e0d\u80fdft(frk(x - 1))\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u5b57\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u627e\u5230\u7684\u5c31\u662fx - 1\u540e\u9762\u4e00\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u539f\u6570*/\n\t}\n\treturn 0;\n}\n```\n\n------------\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u8bdd\uff0c\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u7684\u4e3b\u7a0b\u5e8f\u6539\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u4e0b\u9762\u5c31\u76f4\u63a5\u7ed9\u51fa\u4ee3\u7801\u4e86qwq\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint read(){\n    int ans = 0;\n\tchar ch = getchar();\n    while(ch > '9' || ch < '0') ch = getchar();\n    while(ch <= '9' && ch >= '0'){\n        ans = ans * 10 + ch - '0';\n        ch = getchar();\n    }\n    return ans;\n}\nstruct node{\n\tint ls , rs , f , tsize , fsize , date;\n};\nnode a[2000010];\nint memo[2000010] , c[2000010] , ha[2000010];\ndouble alpha = 0.75;\nint n , m , root , pool , poi , last , ans;\nbool cheak(int now){\n\tif((double)a[now].fsize * alpha >= (double)max(a[a[now].ls].fsize , a[a[now].rs].fsize)) return true;\n\treturn false;\n}\nvoid dfs(int now){\n\tif(!now) return;\n\tdfs(a[now].ls);\n\tif(a[now].f) c[++poi] = now;\n\telse memo[++pool] = now;\n\tdfs(a[now].rs);\n}\nvoid build(int l , int r , int &now){\n\tint mid = (l + r) / 2;\n\tnow = c[mid];\n\tif(l == r){\n\t\ta[now].ls = a[now].rs = 0;\n\t\ta[now].fsize = a[now].tsize = 1;\n\t\treturn;\n\t}\n\tif(l < mid) build(l , mid - 1 , a[now].ls);\n\telse a[now].ls = 0;\n\tbuild(mid + 1 , r , a[now].rs);\n\ta[now].fsize = a[a[now].ls].fsize + a[a[now].rs].fsize + 1;\n\ta[now].tsize = a[a[now].ls].tsize + a[a[now].rs].tsize + 1;\n}\nvoid rebuild(int &now){\n\tpoi = 0;\n\tdfs(now);\n\tif(poi) build(1 , poi , now);\n\telse now = 0;\n}\nvoid insert(int &now , int t){\n\tif(!now){\n\t\tnow = memo[pool--];\n\t\ta[now].date = t;\n\t\ta[now].fsize = a[now].tsize = a[now].f = 1;\n\t\ta[now].ls = a[now].rs = 0;\n\t\treturn;\n\t}\n\ta[now].fsize++ , a[now].tsize++;\n\tif(a[now].date >= t) insert(a[now].ls , t);\n\telse insert(a[now].rs , t);\n\tif(!cheak(now)) rebuild(now);\n}\nint ft(int rk){\n\tint now = root;\n\twhile(now){\n\t\tif(a[now].f && a[a[now].ls].fsize + 1 == rk) return a[now].date;\n\t\tif(a[a[now].ls].fsize + a[now].f >= rk) now = a[now].ls;\n\t\telse{\n\t\t\trk -= a[a[now].ls].fsize + a[now].f;\n\t\t\tnow = a[now].rs;\n\t\t}\n\t}\n}\nint frk(int t){\n\tint now = root , ans = 1;\n\twhile(now){\n\t\tif(a[now].date >= t) now = a[now].ls;\n\t\telse{\n\t\t\tans += a[a[now].ls].fsize + a[now].f;\n\t\t\tnow = a[now].rs;\n\t\t}\n\t}\n\treturn ans;\n}\nvoid delet(int &now , int rk){\n\tif(a[now].f && a[a[now].ls].fsize + 1 == rk){\n\t\ta[now].f = 0;\n\t\ta[now].fsize--;\n\t\treturn;\n\t}\n\ta[now].fsize--;\n\tif(a[now].f + a[a[now].ls].fsize >= rk) delet(a[now].ls , rk);\n\telse delet(a[now].rs , rk - a[now].f - a[a[now].ls].fsize);\n}\nvoid rdelet(int t){\n\tdelet(root , frk(t));\n\tif(a[root].tsize * alpha >= a[root].fsize) rebuild(root);\n}\nint main(){\n\tn = read() , m = read();\n\tfor(int i = 1; i <= n; i++) ha[i] = read();\n\tsort(ha + 1 , ha + n + 1);\t//\u624b\u52a8\u4e2d\u5e8f\u904d\u5386 \n\tfor(int i = 2000000; i >= 1; i--) memo[i] = ++pool;\n\tfor(int i = 1; i <= n; i++){\n\t\tc[i] = i;\t//\u6a21\u62dfdfs\u64cd\u4f5c \n\t\ta[i].date = ha[i];\t//\u628a\u503c\u653e\u56de\u53bb \n\t\ta[i].f = 1;\t//\u8fd9\u4e2a\u70b9\u5b58\u5728 \n\t}\n\tpool -= n;\t//\u7528\u4e86n\u4e2a\u5185\u5b58\uff0c\u5185\u5b58\u6c60\u91cc\u9762\u53d6n\u51fa\u6765 \n\tbuild(1 , n , root);\t//\u5efa\u6811 \n\twhile(m--){\n\t\tint opt , x , y;\n\t\topt = read() , x = read();\n\t\tx = last ^ x;\n\t\tif(opt == 1) insert(root , x);\n\t\tif(opt == 2) rdelet(x);\n        if(opt == 3) y = frk(x) , ans = ans ^ y , last = y;\n        if(opt == 4) y = ft(x) , ans = ans ^ y , last = y;\n        if(opt == 5) y = ft(frk(x) - 1) , ans = ans ^ y , last = y;\n        if(opt == 6) y = ft(frk(x + 1)) , ans = ans ^ y , last = y;\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```\n\n------------\n\n\u5410\u69fd\uff1a\u8fd9\u9053\u9898\u6570\u636e\u8fd8\u662f\u6709\u70b9\u6c34\u5427\uff0c\u6bd4\u8f83\u672a\u52a0\u5f3a\u6570\u636e\u7684\u76f4\u63a5\u642c\u8fc7\u6765\u80fdAC\uff0c\u53ef\u80fd\u662f\u4e3a\u4e86\u5361\u671d\u9c9c\u6811\u4e4b\u7c7b\u7684\u6570\u636e\u7ed3\u6784\u5427\u3002",
        "postTime": 1592296323,
        "uid": 117662,
        "name": "\u90a3\u4e00\u6761\u53d8\u963b\u5668",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4e0d\u9700\u8981\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u4e4b\u7c7b\u7684\u73a9\u610f\uff0c\u4e5f\u4e0d\u5199AVL\uff0cRBT\u4e4b\u7c7b\u7684\u4ee3\u7801\u7e41\u7410\u7684\u590d\u6742\u5e73\u8861\u6811\uff0c**FHQTreap** \u5176\u5b9e\u53ef\u4ee5\u6ee1\u8db3\u5927\u90e8\u5206oi\u6bd4\u8d5b\u4e2d\u5e73\u8861\u6811\u7684\u6027\u80fd\uff0c\u4e5f\u8f83\u7b80\u5355\uff08\u9002\u5408\u5c0f\u767d\u5b66\uff09\u3002\n\n\u8fd9\u4e00\u9898\uff0c\u6b63\u5e38\u7684**FHQTreap**\u5c31\u53ef\u4ee5\u8fc7\uff0c\u4e0d\u9700\u8981\u7279\u6b8a\u79cd\u5b50\u5f02\u6216\u5404\u79cd\u5361\u5e38\uff0c\u53ef\u80fd\u662f\u5927\u5bb6\u5199\u6cd5\u7684\u4e0d\u540c\u5427\uff0c\u6211\u5c31\u6765\u5c55\u793a\u4e00\u4e0b\u81ea\u5df1\u7684\u4ee3\u7801\u3002\n\n**FHQTreap**\u662f\u7528**merge**\u548c**split**\u6765\u7ef4\u62a4\u4e8c\u53c9\u6811\u5f62\u72b6\u7684\u4e8c\u53c9\u6811\uff0c\u5b83\u548c**Treap**\u4e00\u6837\u6709\u5806\u7684\u6027\u8d28\uff0c\u7528\u968f\u673a\u4f18\u5148\u7ea7\u6765\u7ef4\u62a4\u3002\n\n**split**\u6307\u5c06\u4e00\u68f5\u6811\u4ee5**val**\u5206\u88c2\u4e3a\u4e24\u68f5\u6811\uff0c\u4e00\u9897\u6240\u6709\u7684\u8282\u70b9\u90fd\u5c0f\u4e8e\u7b49\u4e8e**val**\uff0c\u53e6\u4e00\u5219\u5927\u4e8e\u3002\n\n**merge**\u5c31\u662f\u7528\u5806\u7684\u4f18\u5148\u7ea7\u91cd\u65b0\u5c06\u4e24\u68f5\u6811\u5408\u5e76\u3002\n\n\u6211\u4eec\u53ea\u9700\u5728\u63d2\u5165\u5220\u9664\u65f6\u6267\u884c\u4e24\u79cd\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u8ba9\u5b83\u4e0d\u9000\u5316\u3002\n\n```cpp\nenum {\n\tMaxn = 1000005\n};\n\nstruct FHQTreap {\n\tint lson[Maxn], rson[Maxn], data[Maxn];\n\tint rnd[Maxn], sze[Maxn], root, tot, seed;\n\tFHQTreap(void) {\n\t\tMs(lson, 0), Ms(rson, 0), Ms(data, 0);\n\t\tMs(rnd, 0), Ms(sze, 0), root = tot = 0, seed = 1;\n\t}\n\t\n\tinline int _rand(void) { return seed *= 482711; }\n\tinline void pushup(int pos) { sze[pos] = sze[lson[pos]] + sze[rson[pos]] + 1; }\n\tinline void split(int pos, int val, int &x, int &y) {\n\t\tif (!pos) { x = y = 0; return; }\n\t\tif (data[pos] <= val) x = pos, split(rson[pos], val, rson[pos], y);\n\t\telse y = pos, split(lson[pos], val, x, lson[pos]); pushup(pos);\n\t}\n\t\n\tinline int merge(int x, int y) {\n\t\tif (!x || !y) return x + y;\n\t\tif (rnd[x] < rnd[y]) return rson[x] = merge(rson[x], y), pushup(x), x;\n\t\telse return lson[y] = merge(x, lson[y]), pushup(y), y;\n\t}\n\t\n\tinline void insert(int val) {\n\t\tint x, y, pos = ++tot;\n\t\tdata[pos] = val, sze[pos] = 1, rnd[pos] = _rand();\n\t\tsplit(root, val, x, y);\n\t\troot = merge(merge(x, pos), y);\n\t}\n\t\n\tinline void remove(int val) {\n\t\tint x, y, z;\n\t\tsplit(root, val - 1, x, y);\n\t\tsplit(y, val, y, z); if (!y) return;\n\t\ty = merge(lson[y], rson[y]);\n\t\troot = merge(x, merge(y, z));\n\t}\n\t\n\tinline int query_rank(int val) {\n\t\tint x, y, ret;\n\t\tsplit(root, val - 1, x, y);\n\t\tret = sze[x] + 1; root = merge(x, y);\n\t\treturn ret;\n\t}\n\t\n\tinline int select(int kth) {\n\t\tint pos = root;\n\t\twhile (kth != sze[lson[pos]] + 1)\n\t\t\tif (kth <= sze[lson[pos]]) pos = lson[pos];\n\t\t\telse kth -= sze[lson[pos]] + 1, pos = rson[pos];\n\t\treturn data[pos];\n\t}\n\t\n\tinline int pred(int val) { return select(query_rank(val) - 1); }\n\tinline int succ(int val) { return select(query_rank(val + 1)); }\n} treap;\n```\n",
        "postTime": 1582855638,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u597d\u50cf\u8fd8\u6ca1\u6709\u66ff\u7f6a\u7f8a\u6811\u7684\u9898\u89e3\u3002\u6211\u6765\u53d1\u4e00\u4e2a\u3002\n\n\u66ff\u7f6a\u7f8a\u6811\u7684\u6838\u5fc3\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5047\u5982\u5b50\u6811\u4e0d\u5e73\u8861\u4e86\uff0c\u5c31\u66b4\u529b\u91cd\u6784\u3002\n\n\u5177\u4f53\u5730\uff0c\u5047\u5982\u4e00\u9897\u5b50\u6811\u4e2d\u5de6\u513f\u5b50\u5927\u5c0f\u8fdc\u5927\u4e8e\u53f3\u513f\u5b50\uff08\u6216\u8005\u53cd\u8fc7\u6765\uff09\uff0c\u5c31\u5e94\u8be5\u91cd\u6784\u8fd9\u68f5\u5b50\u6811\u3002\u201c\u8fdc\u5927\u4e8e\u201d\u662f\u6a21\u7cca\u7684\u8bf4\u6cd5\uff0c\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u53d6\u201c3 \u500d\u201d\u8fd9\u4e2a\u9608\u503c\u3002\n\n\u600e\u4e48\u91cd\u6784\uff1f\u628a\u5b50\u6811\u6709\u5e8f\u5730\u538b\u5230 vector \u91cc\u9762\uff0c\u4ece\u4e2d\u95f4\u5f80\u4e24\u8fb9\u9012\u5f52\u8fde\u8fb9\uff0c\u7c7b\u4f3c\u4e8e\u5efa\u7ebf\u6bb5\u6811\uff0c\u5c31\u80fd\u5efa\u51fa\u5b8c\u5168\u5e73\u8861\u7684\u4e00\u9897\u5b50\u6811\u4e86\u3002\n\n\u8dd1\u5f97\u5f88\u5feb\uff0c\u8fdc\u5feb\u4e8e\u666e\u901a\u7684 Splay\u3002\u4e0d\u52a0\u5feb\u8bfb\uff0c\u6700\u5927\u7684\u70b9\u4e0d\u5230\u4e00\u79d2\u3002\u56e0\u6b64\uff0c\u5728\u9700\u8981\u5361\u5e38\u7684\u9898\u76ee\u4e2d\uff0c\u90fd\u53ef\u4ee5\u8003\u8651\u66ff\u7f6a\u7f8a\u6811\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#define MaxN 1100005\nusing namespace std;\nstruct Scape_Goat_Tree{\n\tint ls[MaxN],rs[MaxN],fa[MaxN],val[MaxN],size[MaxN],all[MaxN];\n\tint exi[MaxN];\n\tint tot,top,stack[MaxN],root;\n\tScape_Goat_Tree():tot(0),top(0),root(0){}\n\tvoid PushUp(int p){\n\t\tall[p]=all[ls[p]]+all[rs[p]]+1;\n\t\tsize[p]=size[ls[p]]+size[rs[p]]+exi[p];\n\t}\n\tbool NeedRefac(int p){\n\t\treturn all[ls[p]]>all[p]*0.75||all[rs[p]]>all[p]*0.75;\n\t}\n\tint GetNewNode(int v,int father){\n\t\tint p;\n\t\tif(top)p=stack[top--];\n\t\telse p=++tot;\n\t\tls[p]=rs[p]=0;\n\t\texi[p]=size[p]=all[p]=1;\n\t\tfa[p]=father;\n\t\tval[p]=v;\n\t\treturn p;\n\t}\n\tvoid DFS(int p,vector<int> &tmp){\n\t\tif(ls[p])DFS(ls[p],tmp);\n\t\tif(exi[p])tmp.push_back(p);\n\t\telse stack[++top]=p;\n\t\tif(rs[p])DFS(rs[p],tmp);\n\t}\n\tint Rebuild(int l,int r,vector<int> &tmp){\n\t\tif(l>r)return 0;\n\t\tint mid=(l+r)>>1,p=tmp[mid];\n\t\tls[p]=Rebuild(l,mid-1,tmp);\n\t\trs[p]=Rebuild(mid+1,r,tmp);\n\t\tfa[ls[p]]=fa[rs[p]]=p;\n\t\tPushUp(p);\n\t\treturn p;\n\t}\n\tvoid Refactor(int &p){\n\t\tvector<int> tmp;\n\t\tint ftmp=fa[p];\n\t\tDFS(p,tmp);\n\t\tp=Rebuild(0,tmp.size()-1,tmp);\n\t\tfa[p]=ftmp;\n\t}\n\tint GetRank(int v){\n\t\tint p=root,ans=1;\n\t\twhile(p){\n\t\t\tif(v<=val[p])p=ls[p];\n\t\t\telse {\n\t\t\t\tans+=size[ls[p]]+exi[p];\n\t\t\t\tp=rs[p];\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\tint GetKth(int k){\n\t\tif(k<=0)return -2147483647;\n\t\tif(k>size[root])return 2147483647;\n\t\tint p=root;\n\t\twhile(p){\n\t\t\tif(size[ls[p]]+1==k&&exi[p])return val[p];\n\t\t\tif(size[ls[p]]>=k)p=ls[p];\n\t\t\telse k-=size[ls[p]]+exi[p],p=rs[p];\n\t\t}\n\t}\n\tint InsRet(int &p,int father,int v){\n\t\tif(!p){\n\t\t\tp=GetNewNode(v,father);\n\t\t\treturn 0;\n\t\t}\n\t\tint res;\n\t\tif(v<=val[p])res=InsRet(ls[p],p,v);\n\t\telse res=InsRet(rs[p],p,v);\n\t\tPushUp(p);\n\t\tif(NeedRefac(p))res=p;\n\t\treturn res;\n\t}\n\tvoid Insert(int v){\n\t\tint p=InsRet(root,0,v);\n\t\tif(!p)return ;\n\t\tif(p==root)Refactor(root);\n\t\telse {\n\t\t\tint father=fa[p];\n\t\t\tif(p==ls[father])Refactor(ls[father]);\n\t\t\telse Refactor(rs[father]);\n\t\t}\n\t}\n\tvoid DelKth(int p,int k){\n\t\tsize[p]--;\n\t\tif(exi[p]&&k==size[ls[p]]+exi[p]){\n\t\t\texi[p]=0;\n\t\t\treturn ;\n\t\t}\n\t\tif(k<=size[ls[p]])DelKth(ls[p],k);\n\t\telse DelKth(rs[p],k-size[ls[p]]-exi[p]);\n\t}\n\tvoid Delete(int v){\n\t\tDelKth(root,GetRank(v));\n\t\tif(size[root]<all[root]*0.75)Refactor(root);\n\t}\n\tint Pred(int v){\n\t\treturn GetKth(GetRank(v)-1);\n\t}\n\tint Succ(int v){\n\t\treturn GetKth(GetRank(v+1));\n\t}\n}tree;\nint main(){\n\tint n,q,ans=0,la=0;\n\tscanf(\"%d%d\",&n,&q);\n\twhile(n--){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\ttree.Insert(x);\n\t}\n\twhile(q--){\n\t\tint opt,x;\n\t\tscanf(\"%d%d\",&opt,&x),x^=la;\n\t\tif(opt==1)tree.Insert(x);\n\t\tif(opt==2)tree.Delete(x);\n\t\tif(opt==3)ans^=(la=tree.GetRank(x));\n\t\tif(opt==4)ans^=(la=tree.GetKth(x));\n\t\tif(opt==5)ans^=(la=tree.Pred(x));\n\t\tif(opt==6)ans^=(la=tree.Succ(x));\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1582862306,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "upd\uff1a\u7f29\u8fdb\u6302\u6389\u4e86\uff0c\u6240\u4ee5\u66f4\u65b0\u4e00\u4e0b\uff01\n\n\u6307\u9488\u7248WBLT\u3002\n\n\u6bcf\u4e2a\u64cd\u4f5c\u7684\u601d\u8def\u540c\u4e4b\u524d\u6570\u7ec4\u7248\u7684\u9898\u89e3\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\uff0c\u4ec5\u53d9\u8ff0\u51e0\u4e2a\u6307\u9488\u7248\u9700\u8981\u6ce8\u610f\u7684\uff1a\n\n1.\u5173\u4e8e\u7a7a\u6307\u9488\n\n- \u4f17\u6240\u5468\u77e5\uff0c\u6709\u4e00\u79cd\u5341\u5206\u70e6\u4eba\u7684\u6307\u9488\uff0c\u53eb\u505a\u7a7a\u6307\u9488\uff08NULL\uff09\u3002\u5728\u6811\u5f62\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6211\u4eec\u5e38\u5e38\u4f1a\u4e0d\u53ef\u907f\u514d\u5730\u8bbf\u95ee\u5230\u7a7a\u6307\u9488\uff08\u4f8b\u5982\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u53f3\u513f\u5b50\uff0c\u6211\u4eec\u5374\u8bbf\u95ee\u4e86\u5b83\u7684\u5de6\u513f\u5b50\uff09\u3002\u901a\u5e38\u7684\u65b9\u5f0f\u662f\u51e1\u662f\u8bbf\u95ee\u4e86\u6307\u9488\uff0c\u90fd\u5224\u65ad\u4e00\u4e0b\u3002\u7136\u800c\u8fd9\u6837\u6548\u7387\u5341\u5206\u4f4e\u4e0b\uff0c\u5927\u91cf\u5206\u652f\u7684\u5b58\u5728\u4f7f\u5f97\u4ee3\u7801\u5197\u957f\uff0c\u5e38\u6570\u53d8\u5927\uff0c\u4e0d\u6613\u8c03\u8bd5\uff0c\u53ef\u8bfb\u6027\u964d\u4f4e\u7b49\u95ee\u9898\u3002  \n- \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9```Node *null;```\u6765\u8868\u793a\u7a7a\u6307\u9488\u3002\u8fd9\u6837\uff0c\u5373\u4f7f\u6211\u4eec\u9047\u5230\u4e86\u4e00\u4e2a\u4e3a\u7a7a\u7684\u6307\u9488rt\uff0c\u5e76\u4e14\u8bd5\u56fe\u8bbf\u95ee```rt->siz```\uff08\u5e94\u5f53\u4e3a0\uff09\uff0c\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4f1a\u51fa\u73b0RE or WA\u3002\n- \u5199\u4ee3\u7801\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u8282\u70b9\u7684\u521d\u59cb\u5316\uff0c\u5207\u4e0d\u53ef\u6709\u53ef\u80fd\u88ab\u8bbf\u95ee\u5230\u7684\u6307\u9488\u4e3a\u7a7a\u5374\u6ca1\u6709\u88ab\u8d4b\u4e3anull\u7684\u60c5\u51b5\u3002\n- null\u8282\u70b9\u6307\u5411\u7684\u5bf9\u8c61\u4e0d\u5e94\u5f53\u5728\u4efb\u4f55\u65f6\u5019\u88ab\u4fee\u6539\u3002\n\n2.\u6570\u7ec4\u8981\u5f00\u5927\uff0c\u56e0\u4e3a\u6709null\u8fd9\u6837\u7684\u5f88\u591a\u591a\u4f59\u6307\u9488\u3002\n\n3.\u5173\u4e8e\u7801\u98ce\n\n- \u4e3a\u4e86\u5361\u5e38\u6570\uff08\u800c\u4e0d\u662f\u538b\u884c\uff09\u7565\u6709\u4e9b\u6bd2\u7624\u3002  \n\u4e09\u76ee\u5c31\u4e0d\u8bf4\u4e86\uff0c\u7136\u540e```a&&(b,0)```\u8fd9\u6837\u7684\u4e1c\u897f\u8868\u793a```if(a)b;```\u800c```a||(b,0)```\u8868\u793a```if(!a)b;```\u8fd9\u91cc\u7528\u4e86\u77ed\u8def\u8fd0\u7b97\u7684\u7279\u70b9\u3002\n\n\n## Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\n#define IOSIZE 1000000\nextern \"C\"{\nnamespace io{\n\tstatic char in[IOSIZE],*p=in,*pp=in,out[IOSIZE],*q=out,ch[20],*t=ch;\n\tinline char gc(){return p==pp&&(pp=(p=in)+fread(in,1,IOSIZE,stdin),p==pp)?EOF:*p++;}\n\tinline int read(){\n\t\treg int x=0;reg char ch,f=0;\n\t\twhile(!isdigit(ch=gc()))f|=ch=='-';\n\t\twhile(isdigit(ch))x=(x<<1)+(x<<3)+(ch^48),ch=gc();\n\t\treturn f?-x:x;\n\t}\n\tinline void write(int x){\n\t\t!x&&(*q++=48),x<0&&(*q++='-',x=-x);\n\t\twhile(x)*t++=x%10+48,x/=10;\n\t\twhile(t!=ch)*q++=*--t;\n\t\t*q++='\\n';\n\t}\n\tinline void flush(){fwrite(out,1,q-out,stdout);}\n}}\n#define rd io::read\n#define wt io::write\nconst int rat=4,maxn=2000001;\nstatic int n,m,tot;\nstatic struct Node{\n\tint siz,val;\n\tNode *ls,*rs;\n\tNode(){}\n\tNode(int siz,int val,Node *ls,Node *rs):siz(siz),val(val),ls(ls),rs(rs){}\n}*null,*root,tr[maxn<<1],*pl[maxn<<1];\n#define newNode(a,b,c,d) (&(*pl[tot++]=Node(a,b,c,d)))\ninline void pushup(Node *cur){\n\tcur->ls->siz&&(cur->siz=cur->ls->siz+cur->rs->siz,cur->val=cur->rs->val);\n}\ninline Node *merge(Node *a,Node *b){return newNode(a->siz+b->siz,b->val,a,b);}\ninline void maintain(Node *cur){\n\tcur->ls->siz>cur->rs->siz*rat&&(\n\t\tcur->rs=merge(cur->ls->rs,cur->rs),pl[--tot]=cur->ls,cur->ls=cur->ls->ls\n\t),\n\tcur->rs->siz>cur->ls->siz*rat&&(\n\t\tcur->ls=merge(cur->ls,cur->rs->ls),pl[--tot]=cur->rs,cur->rs=cur->rs->rs\n\t);\n}\nvoid ins(Node *cur,int val){\n\tcur->siz==1?\n\t\tcur->ls=newNode(1,min(val,cur->val),null,null),\n\t\tcur->rs=newNode(1,max(val,cur->val),null,null),0\n\t:(ins(val>cur->ls->val?cur->rs:cur->ls,val),0);\n\tpushup(cur),maintain(cur);\n}\nvoid del(Node *cur,int val){\n\tcur->ls->siz==1&&cur->ls->val==val?\n\t\tpl[--tot]=cur->ls,pl[--tot]=cur->rs,*cur=*cur->rs,0\n\t:cur->rs->siz==1&&cur->rs->val==val?\n\t\tpl[--tot]=cur->rs,pl[--tot]=cur->ls,*cur=*cur->ls,0\n\t:(del(val>cur->ls->val?cur->rs:cur->ls,val),0);\n\tpushup(cur),maintain(cur);\n}\nint Find(Node *cur,int k){\n\treturn cur->siz==1?cur->val:\n\tk>cur->ls->siz?Find(cur->rs,k-cur->ls->siz):Find(cur->ls,k);\n}\nint Rank(Node *cur,int val){\n\treturn cur->siz==1?1:\n\tval>cur->ls->val?cur->ls->siz+Rank(cur->rs,val):Rank(cur->ls,val);\n}\ninline int Pre(int val){return Find(root,Rank(root,val)-1);}\ninline int Nxt(int val){return Find(root,Rank(root,val+1));}\nint main(){\n\tfreopen(\"1.in\",\"r\",stdin);\n\tn=rd(),m=rd();\n\treg int lst=0,ans=0;\n\tnull=new Node(0,0,NULL,NULL);\n\troot=new Node(1,2147483647,null,null);\n\tfor(reg int i=0;i<(maxn<<1);++i)pl[i]=&tr[i];\n\tfor(reg int i=1,x;i<=n;++i)x=rd(),ins(root,x);\n\tfor(reg int x,y,i=0;i<m;++i){\n\t\ty=rd(),x=rd()^lst;\n\t\tswitch(y){\n\t\t\tcase 1:ins(root,x);break;\n\t\t\tcase 2:del(root,x);break;\n\t\t\tcase 3:ans^=(lst=Rank(root,x));break;\n\t\t\tcase 4:ans^=(lst=Find(root,x));break;\n\t\t\tcase 5:ans^=(lst=Pre(x));break;\n\t\t\tcase 6:ans^=(lst=Nxt(x));break;\n\t\t}\n\t}wt(ans);\n\tio::flush();\n\treturn 0;\n}\n```",
        "postTime": 1582856870,
        "uid": 75765,
        "name": "Starlight237",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "**Size Balanced Tree**\n\n\u770b\u5230\u9898\u89e3\u91cc\u6ca1\u6709\u4f18\u79c0\u7684 SBT \u7b97\u6cd5\uff0c\u672c\u849f\u84bb\u5c31\u6765\u5199\u4e00\u4e0b\u8fd9\u79cd\u6548\u7387\u5f88\u9ad8\u7684\u7b97\u6cd5\u5427\u3002~~\u5176\u5b9e\u6211\u53ea\u662f\u89c9\u5f97\u5b83\u7684\u540d\u5b57\u5f88\u597d\u542c\u3002~~\n\n\u540c\u65f6\u7531\u4e8e\u6211\u5728\u67e5\u8be2\u6b64\u7b97\u6cd5\u6709\u5173\u6587\u7ae0\u65f6\uff0c\u53d1\u73b0\u5927\u90e8\u5206\u4eba\u90fd\u6ca1\u6709 $cnt$ \u6570\u7ec4\uff0c\u8fd9\u6837\u4f1a\u6d6a\u8d39\u4e00\u90e8\u5206\u7a7a\u95f4\uff0c\u4e8e\u662f\u5728\u601d\u8003\u4e4b\u540e\uff0c\u672c\u849f\u84bb\u5199\u4e86\u4e00\u79cd\u5e26\u6709 $cnt$ \u6570\u7ec4\u7684 SBT \u3002\n\n\u4e0b\u9762\u662f\u6211\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u3002\n```\nstruct node\n{\n\tint ch[2],size,sz,cnt;\n\t//ch\u8868\u793a\u5de6\u53f3\u513f\u5b50\u7684\u7f16\u53f7\n\t//size\u8868\u793a\u4ee5\u6b64\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\n\t//sz\u8868\u793a\u6b64\u8282\u70b9\u8868\u793a\u7684\u6570\u503c\u5927\u5c0f\n\t//cnt\u8868\u793asz\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e5f\u5c31\u662f\u6b64\u8282\u70b9\u7684\u5927\u5c0f\n}tree[2000000];\n```\n\nSBT \u662f\u7531\u6211\u56fd\u7684\u9648\u542f\u5cf0\u540c\u5b66\u53d1\u660e\u7684\u4e00\u79cd\u5e73\u8861\u6811\u7b97\u6cd5\u3002\n\nSBT \u7684\u4e3b\u8981\u6027\u8d28\u662f\uff1a\n- $x.left.size\\ge\\max(x.right.left.size,x.right.right.size)$\n- $x.right.size\\ge\\max(x.left.left.size,x.left.right.size)$\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u5144\u5f1f\u7684\u5b50\u6811\u5927\u5c0f\u4e00\u5b9a\u8981\u5927\u4e8e\u81ea\u5df1\u7684\u4efb\u610f\u4e00\u4e2a\u513f\u5b50\u3002\n\n\u6240\u4ee5\u4e3a\u4e86\u7ef4\u62a4\u8fd9\u6761\u6027\u8d28\uff0c\u6211\u4eec\u8981\u5f15\u5165\u4e00\u4e2a SBT \u7279\u6709\u7684\u51fd\u6570\uff0c $\\operatorname{maintain}$ \u3002\n\n\u5176\u4e2d\u8981\u7528\u5230\u65cb\u8f6c\u64cd\u4f5c $\\operatorname{rotate}$ \uff0c\u8fd9\u91cc\u7684\u505a\u6cd5\u4e0e splay \uff0c treap \u7b49\u7b97\u6cd5\u7684\u65cb\u8f6c\u64cd\u4f5c\u76f8\u4f3c\uff0c\u5728\u8fd9\u91cc\u5c31\u53ea\u653e\u51fa\u4ee3\u7801\u4e86\uff0c\u6211\u5c06\u5de6\u65cb\u4e0e\u53f3\u65cb\u653e\u5728\u4e86\u540c\u4e00\u4e2a\u51fd\u6570\u91cc\u3002\n```cpp\nint update(int x)\n{\n\ttree[x].size=tree[tree[x].ch[0]].size+tree[tree[x].ch[1]].size+tree[x].cnt;\n\treturn 0;\n}\nint rotate(int &x,int gx)//gx\u8868\u793a\u65cb\u8f6c\u7684\u65b9\u5411\n{\n\tint son=tree[x].ch[gx^1];\n\ttree[x].ch[gx^1]=tree[son].ch[gx];\n\ttree[son].ch[gx]=x;\n\ttree[son].size=tree[x].size;\n\tupdate(x);\n\tx=son;\n\treturn 0;\n}\n```\n\u63a5\u4e0b\u6765\uff0c\u6811\u5728\u63d2\u5165\u8282\u70b9\u4e4b\u540e\u4e0d\u7b26\u5408 SBT \u7684\u6027\u8d28\u6709\u56db\u79cd\u60c5\u51b5\uff0c\u5176\u4e2d\u5de6\u8fb9\u4e0e\u53f3\u8fb9\u60c5\u51b5\u5bf9\u79f0\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u8ba8\u8bba\u5de6\u5b50\u6811\u8f83\u5c0f\u7684\u60c5\u51b5\u3002\n\n1. $x.left.size\\ge x.right.right.size$\n\n\u6b64\u65f6\u6211\u4eec\u7684\u64cd\u4f5c\u662f\uff0c\u76f4\u63a5\u5c06 $x$ \u8282\u70b9\u5de6\u65cb\uff0c\u5373 $\\operatorname{rotate}(x,0)$ \uff0c\u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u73b0\u5728\u7684\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5931\u8861\uff0c\u4e8e\u662f\u8fdb\u884c  $\\operatorname{maintain}(x.left)  ,\\operatorname{maintain}(x)$ \u5373\u53ef\u3002\n\n2. $x.left.size\\ge x.right.left.size$\n\n\u8fd9\u4e2a\u64cd\u4f5c\u6bd4\u4e0a\u4e00\u79cd\u60c5\u51b5\u590d\u6742\u4e00\u4e9b\uff0c\u6211\u4eec\u8981\u5148\u5c06 $x$ \u8282\u70b9\u7684\u53f3\u513f\u5b50\u53f3\u65cb\uff0c\u518d\u5c06 $x$ \u8282\u70b9\u5de6\u65cb\uff0c\u6b64\u65f6\u4f1a\u53d1\u73b0\u73b0\u5728\u7684\u6839\u8282\u70b9\u7684\u5de6\u53f3\u8282\u70b9\u5747\u4e0d\u5e73\u8861\uff0c\u6240\u4ee5\u8981\u5bf9\u6839\u7684\u5de6\u53f3\u513f\u5b50\u4ee5\u53ca\u6839\u672c\u8eab\u518d\u6b21\u8fdb\u884c $\\operatorname{maintain}$ \u64cd\u4f5c\u3002\n\n3. \u4e0e\u7b2c\u4e00\u79cd\u60c5\u51b5\u5bf9\u79f0\u3002\n\n4. \u4e0e\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5bf9\u79f0\u3002\n\n\u7136\u800c\uff0c\u7531\u4e8e\u6211\u4eec\u52a0\u5165\u4e86 $cnt$ \u6570\u7ec4\uff0c\u5982\u679c\u5728\u65cb\u8f6c\u4e4b\u540e\u6211\u4eec\u518d\u6b21\u5bf9\u6839\u8282\u70b9\u518d\u6b21\u64cd\u4f5c\uff0c\u5c31\u6709\u53ef\u80fd\u53d1\u751f\u6b7b\u5faa\u73af\uff0c\u6240\u4ee5\u6211\u9009\u62e9\uff0c\u5c06\u4e0b\u9762\u4e24\u884c\u7684 $\\operatorname{maintain}$ \u64cd\u4f5c\u5220\u53bb\u3002~~\u6240\u4ee5\u8bf4\u8fd9\u662f\u4e00\u79cd\u5f88\u61d2\u7684\u6570\u636e\u7ed3\u6784\u3002~~\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff0c\u5982\u4e0b\u3002\n```cpp\nint matain(int &x,int gx)//gx\u8868\u793a\u54ea\u4e2a\u5b50\u6811\u7684size\u589e\u52a0\u4e86\n{\n\tif(gx)\n\t{\n\t\tif(tree[tree[x].ch[0]].size<tree[tree[tree[x].ch[1]].ch[1]].size)//\u60c5\u51b51\n\t\t\trotate(x,0);\n\t\telse if(tree[tree[x].ch[0]].size<tree[tree[tree[x].ch[1]].ch[0]].size)//\u60c5\u51b52\n\t\t{\n\t\t\trotate(tree[x].ch[1],1);\n\t\t\trotate(x,0);\n\t\t}\n\t\telse\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\tif(tree[tree[x].ch[1]].size<tree[tree[tree[x].ch[0]].ch[0]].size)//\u60c5\u51b53\n\t\t\trotate(x,1);\n\t\telse if(tree[tree[x].ch[1]].size<tree[tree[tree[x].ch[0]].ch[1]].size)//\u60c5\u51b54\n\t\t{\n\t\t\trotate(tree[x].ch[0],0);\n\t\t\trotate(x,1);\n\t\t}\n\t\telse\n\t\treturn 0;\n\t}\n\tmatain(tree[x].ch[1],1);\n\tmatain(tree[x].ch[0],0);\n\t//matain(x,1);\u539f\u7248SBT\u6709\u7684\u64cd\u4f5c\uff0c\u6211\u5c06\u5176\u5220\u53bb\n\t//matain(x,0);\u8fd9\u6837\u4fdd\u8bc1\u4e86\u6b63\u786e\u6027\uff0c\u4f46\u4e5f\u727a\u7272\u4e86\u4e00\u70b9\u70b9\u5e38\u6570\n\treturn 0;\n}\n```\n\n\u5176\u4ed6\u7684\u95ee\u9898\u5c31\u662f\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u5b8c\u6210\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u516d\u4e2a\u64cd\u4f5c\u4e86\u3002\n1. \u63d2\u5165\u3002\n\n\u8f83\u7b80\u5355\uff0c\u5177\u4f53\u89c1\u6ce8\u91ca\u3002\n```cpp\nint add(int &x,int sz)\n{\n\tif(x==0)//\u5982\u679c\u6ca1\u6709\u6b64\u6570\u503c\u7684\u8282\u70b9\uff0c\u5c31\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\n\t{\n\t\tx=++step;\n\t\ttree[x].cnt=1;\n\t\ttree[x].size=1;\n\t\ttree[x].sz=sz;\n\t\treturn 0;\n\t}\n\ttree[x].size++;\n\tif(tree[x].sz==sz)//\u6b63\u662f\u6b64\u6570\u503c\u7684\u8282\u70b9\n\t{\n\t\ttree[x].cnt++;\n\t\treturn 0;//\u7531\u4e8e\u5de6\u53f3\u5b50\u6811\u90fd\u6ca1\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u4e0d\u7528maintain\n\t}\n\telse if(tree[x].sz<sz)\n\t\tadd(tree[x].ch[1],sz);\n\telse\n\t\tadd(tree[x].ch[0],sz);\n\tmatain(x,tree[x].sz<sz);//\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u54ea\u68f5\u5b50\u6811size\u589e\u5927\n\treturn 0;\n}\n```\n2. \u5220\u9664\u3002\n\n\u8fd9\u4e00\u90e8\u5206\u6211\u91cd\u70b9\u8bf4\u4e00\u4e0b\uff0c\u6211\u8fd9\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u662f\uff0c\u4ece\u5e73\u8861\u6811\u4e2d\u5220\u9664 $sl$  \u4e2a $sz$ \u3002\n\n\u5728\u5220\u9664\u7684\u65f6\u5019\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a\u7b2c\u4e00\u79cd\uff0c\u8282\u70b9\u7684 $cnt$ \u6570\u91cf\u8db3\u591f\u591a\uff0c\u90a3\u4e48\u76f4\u63a5\u51cf\u53bb\u3002\n\n\u7b2c\u4e8c\u79cd\uff0c\u8282\u70b9\u8981\u88ab\u76f4\u63a5\u5220\u9664\uff0c\u5982\u679c\u6b64\u8282\u70b9\u6ca1\u6709\u5de6\u5b50\u6811\u6216\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u5f88\u7b80\u5355\uff0c\u5c06\u6709\u7684\u90a3\u4e00\u9897\u5ac1\u63a5\u5230\u8981\u5220\u9664\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\n\n\u6700\u540e\u7b2c\u4e09\u79cd\uff0c\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5\uff0c\u90a3\u4e48\u5148\u5bfb\u627e\u81ea\u5df1\u7684\u76f4\u63a5\u540e\u9a71\uff0c\u7136\u540e\u76f4\u63a5\u5c06\u540e\u9a71\u6240\u5728\u8282\u70b9\u66ff\u6362\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u6b64\u540e\u9a71\u8282\u70b9\u3002\u5728\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u540e\u9a71\u8282\u70b9\u5c06\u5f53\u524d\u8282\u70b9\u5b8c\u5168\u66ff\u6362\uff0c\u90a3\u4e48\u5c31\u8981\u5c06\u4e0b\u65b9\u7684\u540e\u9a71\u8282\u70b9\u5220\u9664\u5f7b\u5e95\uff0c\u800c\u4e14\u7531\u4e8e\u76f4\u63a5\u540e\u9a71\u53ef\u4ee5\u77e5\u9053\uff0c\u8be5\u540e\u9a71\u8282\u70b9\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u4f1a\u5728\u90a3\u91cc\u6267\u884c\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c $\\operatorname{del}$ \u51fd\u6570\u5728\u4e00\u6b21\u5220\u9664\u4e2d\uff0c\u5220\u9664\u4e0d\u540c\u6570\u503c\u7684\u6b21\u6570\u81f3\u591a\u53ea\u6709\u4e24\u6b21\u3002\n\n\u7531\u4e8e\u5728\u5220\u9664\u4e4b\u540e\uff0c\u6811\u7684\u6700\u5927\u6df1\u5ea6\u4e0d\u4f1a\u589e\u5927\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8fdb\u884c $\\operatorname{maintain}$ \u3002~~\u771f\u7684\u662f\u4e00\u79cd\u5f88\u61d2\u7684\u7b97\u6cd5\u4e86\u3002~~\n```cpp\nint del(int &x,int sz,int sl)//\n{\n\ttree[x].size-=sl;//\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u5b50\u6811\u5927\u5c0f\u51cf\u5c0fsl\n\tif(tree[x].sz==sz)\n\t{\n\t\tif(tree[x].cnt>sl)\n\t\t\ttree[x].cnt-=sl;//\u7b2c\u4e00\u79cd\u60c5\u51b5\n\t\telse if((!tree[x].ch[0])||(!tree[x].ch[1]))\n\t\t\tx=tree[x].ch[0]+tree[x].ch[1];//\u7b2c\u4e8c\u79cd\u60c5\u51b5\n\t\telse\n\t\t{\n\t\t\tint temp=tree[x].ch[1];\n\t\t\twhile(tree[temp].ch[0])\n\t\t\t\ttemp=tree[temp].ch[0];//\u627e\u76f4\u63a5\u540e\u9a71\n\t\t\ttree[x].sz=tree[temp].sz;\n\t\t\ttree[x].cnt=tree[temp].cnt;//\u66ff\u6362\n\t\t\tdel(tree[x].ch[1],tree[temp].sz,tree[temp].cnt);\n        \t\t//\u5c06\u540e\u9a71\u5f7b\u5e95\u5220\u9664\n\t\t}\n\t\treturn 0;\n\t}\n\tif(tree[x].sz<sz)\n\t\tdel(tree[x].ch[1],sz,sl);\n\telse\n\t\tdel(tree[x].ch[0],sz,sl);\n\treturn 0;\n}\n\n```\n3.\u6c42\u6392\u540d\u3002\n\n\u4ece\u6839\u5411\u4e0b\u904d\u5386\uff0c\u5f80\u53f3\u5b50\u6811\u8d70\u5219\u52a0\u4e0a\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u4ee5\u53ca\u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u5728\u8fd9\u91cc\u7531\u4e8e\u6811\u7684\u7ed3\u6784\u4e0d\u4f1a\u53d8\u5316\uff0c\u53c2\u6570\u5c31\u6ca1\u6709\u7528\u5f15\u7528\uff0c\u540c\u65f6\u4e5f\u6ca1\u6709\u4f7f\u7528\u9012\u5f52\u3002\n```cpp\nint rank(int sz)\n{\n\tint x=root,res=0;\n\twhile(x)\n\t{\n\t\tif(tree[x].sz==sz)//\u5982\u679c\u6570\u503c\u76f8\u7b49\uff0c\u5219\u4e0d\u7528\u904d\u5386\u4e0b\u53bb\uff0c\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\n\t\t\treturn res+tree[tree[x].ch[0]].size+1;\n\t\tif(tree[x].sz<sz)//sz>tree[x].sz\u8bf4\u660e\u5de6\u5b50\u6811\u4e2d\u7684\u70b9\u548c\u6b64\u8282\u70b9\u672c\u8eab\u90fd\u5c0f\u4e8esz\n\t\t{\n\t\t\tres+=tree[tree[x].ch[0]].size+tree[x].cnt;//\u4e8e\u662fres\u52a0\u4e0a\u8fd9\u4e9b\u6570\u91cf\n\t\t\tx=tree[x].ch[1];\n\t\t}\n\t\telse\n\t\t\tx=tree[x].ch[0];\n\t}\n\treturn res+1;//\u5982\u679c\u4e0d\u5728\u6811\u91cc\uff0cres\u50a8\u5b58\u7684\u5c31\u662f\u5c0f\u4e8esz\u7684\u6570\u7684\u6570\u91cf\n}\n```\n4.\u6c42\u6392\u540d\u5bf9\u5e94\u7684\u6570\u3002\n\n\u53ef\u4ee5\u89c6\u4e3a $\\operatorname{rank}$ \u7684\u4e00\u79cd\u9006\u64cd\u4f5c\uff0c\u5177\u4f53\u770b\u6ce8\u91ca\u3002\n```cpp\nint arrank(int wz)//\u8fd9\u91cc\u76f4\u63a5\u7528\u4e86\u8fd9\u4e2awz\u8868\u793a\u5728\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u7684\u6392\u540d\n{\n\tint x=root;\n\twhile(x)\n\t{\n\t\tif(tree[x].cnt+tree[tree[x].ch[0]].size<wz)//\u8bf4\u660e\u6392\u540dwz\u7684\u8282\u70b9\u5728x\u7684\u53f3\u5b50\u6811\u4e0a\n\t\t{\n\t\t\twz-=tree[x].cnt+tree[tree[x].ch[0]].size;\n\t\t\tx=tree[x].ch[1];\n            \t\t//\u51cf\u53bb\u4e4b\u540e\u8868\u793a\u5728\u53f3\u5b50\u6811\u4e0a\u7684\u6392\u540d\uff0c\u540c\u65f6\u628ax\u53d8\u4e3a\u53f3\u513f\u5b50\n\t\t}\n\t\telse if(tree[tree[x].ch[0]].size<wz)//\u8868\u793a\u4e0d\u5728\u5de6\u5b50\u6811\u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4\u660e\u7ed3\u679c\u5c31\u662f\u5f53\u524d\u8282\u70b9\n\t\t\treturn tree[x].sz;\n\t\telse//\u4e0d\u5728\u53f3\u5b50\u6811\u4e0d\u5728\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u5728\u5de6\u5b50\u6811\n\t\t\tx=tree[x].ch[0];\n\t}\n\treturn 0;\n}\n```\n5.\u6c42\u524d\u9a71\u3002\n\n\u6211\u4eec\u5148\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u7684\u524d\u9a71 $maxx$ \uff0c\u5e76\u8d4b\u503c\u6781\u5c0f\u503c\uff0c\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u65e2\u662f\u524d\u9a71\uff0c\u53c8\u5927\u4e8e $maxx$ \uff0c\u5219\u66f4\u65b0\u3002\n```cpp\nint qianqu(int sz)\n{\n\tint x=root,maxx=-2147483647;\n\twhile(x)\n\t{\n\t\tif(tree[x].sz<sz&&tree[x].sz>maxx)//\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u66f4\u65b0\n\t\t\tmaxx=tree[x].sz;\n\t\tif(tree[x].sz<sz)\n\t\t\tx=tree[x].ch[1];\n\t\telse\n\t\t\tx=tree[x].ch[0];\n\t}\n\treturn maxx;\n}\n```\n6.\u6c42\u540e\u9a71\u3002 \n\n\u4e0e\u6c42\u524d\u9a71\u64cd\u4f5c\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u770b\u6ce8\u91ca\u5427\u3002\n```cpp\nint houqu(int sz)\n{\n\tint x=root,minn=2147483647;//\u7531\u4e8e\u540e\u9a71\u8981\u5c3d\u91cf\u5c0f\uff0c\u6240\u4ee5\u53d6\u6781\u5927\u503c\n\twhile(x)\n\t{\n\t\tif(tree[x].sz>sz&&tree[x].sz<minn)//\u6761\u4ef6\u4e0e\u4e0a\u8fb9\u521a\u597d\u76f8\u53cd\n\t\t\tminn=tree[x].sz;\n\t\tif(tree[x].sz<=sz)\n\t\t\tx=tree[x].ch[1];\n\t\telse\n\t\t\tx=tree[x].ch[0];\n\t}\n\treturn minn;\n}\n```\n\u5230\u8fd9\u91ccSBT\u7684\u516d\u79cd\u64cd\u4f5c\u5168\u90e8\u5b8c\u6210\uff0c\u4e0b\u9762\u653e\u51fa\u5b8c\u6574\u4ee3\u7801\u3002\n\n\u4e0d\u8981\u5fd8\u4e86\u5f3a\u5236\u5728\u7ebf\u7684 $last$ \u54e6\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\n\nint n,m,root,step,last=0,ans=0;\nint Read()\n{\n\tint sum=0,sig=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)&&ch!='-')\n\t\tch=getchar();\t\n\tif(ch=='-')\n\t{\n\t\tsig=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch))\n\t{\n\t\tsum=sum*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn sum*sig;\n}\n\nstruct node\n{\n\tint ch[2],size,sz,cnt;\n\t//ch\u8868\u793a\u5de6\u53f3\u513f\u5b50\u7684\u7f16\u53f7\n\t//size\u8868\u793a\u4ee5\u6b64\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\n\t//sz\u8868\u793a\u6b64\u8282\u70b9\u8868\u793a\u7684\u6570\u503c\u5927\u5c0f\n\t//cnt\u8868\u793asz\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e5f\u5c31\u662f\u6b64\u8282\u70b9\u7684\u5927\u5c0f\n}tree[2000000];\n\nint update(int x)\n{\n\ttree[x].size=tree[tree[x].ch[0]].size+tree[tree[x].ch[1]].size+tree[x].cnt;\n\treturn 0;\n}\nint rotate(int &x,int gx)//gx\u8868\u793a\u65cb\u8f6c\u7684\u65b9\u5411\n{\n\tint son=tree[x].ch[gx^1];\n\ttree[x].ch[gx^1]=tree[son].ch[gx];\n\ttree[son].ch[gx]=x;\n\ttree[son].size=tree[x].size;\n\tupdate(x);\n\tx=son;\n\treturn 0;\n}\nint matain(int &x,int gx)//gx\u8868\u793a\u54ea\u4e2a\u5b50\u6811\u7684size\u589e\u52a0\u4e86\n{\n\tif(gx)\n\t{\n\t\tif(tree[tree[x].ch[0]].size<tree[tree[tree[x].ch[1]].ch[1]].size)//\u60c5\u51b51\n\t\t\trotate(x,0);\n\t\telse if(tree[tree[x].ch[0]].size<tree[tree[tree[x].ch[1]].ch[0]].size)//\u60c5\u51b52\n\t\t{\n\t\t\trotate(tree[x].ch[1],1);\n\t\t\trotate(x,0);\n\t\t}\n\t\telse\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\tif(tree[tree[x].ch[1]].size<tree[tree[tree[x].ch[0]].ch[0]].size)//\u60c5\u51b53\n\t\t\trotate(x,1);\n\t\telse if(tree[tree[x].ch[1]].size<tree[tree[tree[x].ch[0]].ch[1]].size)//\u60c5\u51b54\n\t\t{\n\t\t\trotate(tree[x].ch[0],0);\n\t\t\trotate(x,1);\n\t\t}\n\t\telse\n\t\treturn 0;\n\t}\n\tmatain(tree[x].ch[1],1);\n\tmatain(tree[x].ch[0],0);\n\t//matain(x,1);\u539f\u7248SBT\u6709\u7684\u64cd\u4f5c\uff0c\u6211\u5c06\u5176\u5220\u53bb\n\t//matain(x,0);\u8fd9\u6837\u4fdd\u8bc1\u4e86\u6b63\u786e\u6027\uff0c\u4f46\u4e5f\u727a\u7272\u4e86\u4e00\u70b9\u70b9\u5e38\u6570\n\treturn 0;\n}\nint add(int &x,int sz)\n{\n\tif(x==0)//\u5982\u679c\u6ca1\u6709\u6b64\u6570\u503c\u7684\u8282\u70b9\uff0c\u5c31\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\n\t{\n\t\tx=++step;\n\t\ttree[x].cnt=1;\n\t\ttree[x].size=1;\n\t\ttree[x].sz=sz;\n\t\treturn 0;\n\t}\n\ttree[x].size++;\n\tif(tree[x].sz==sz)//\u6b63\u662f\u6b64\u6570\u503c\u7684\u8282\u70b9\n\t{\n\t\ttree[x].cnt++;\n\t\treturn 0;//\u7531\u4e8e\u5de6\u53f3\u5b50\u6811\u90fd\u6ca1\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u4e0d\u7528maintain\n\t}\n\telse if(tree[x].sz<sz)\n\t\tadd(tree[x].ch[1],sz);\n\telse\n\t\tadd(tree[x].ch[0],sz);\n\tmatain(x,tree[x].sz<sz);//\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u54ea\u68f5\u5b50\u6811size\u589e\u5927\n\treturn 0;\n}\nint del(int &x,int sz,int sl)//\n{\n\ttree[x].size-=sl;//\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u5b50\u6811\u5927\u5c0f\u51cf\u5c0fsl\n\tif(tree[x].sz==sz)\n\t{\n\t\tif(tree[x].cnt>sl)\n\t\t\ttree[x].cnt-=sl;//\u7b2c\u4e00\u79cd\u60c5\u51b5\n\t\telse if((!tree[x].ch[0])||(!tree[x].ch[1]))\n\t\t\tx=tree[x].ch[0]+tree[x].ch[1];//\u7b2c\u4e8c\u79cd\u60c5\u51b5\n\t\telse\n\t\t{\n\t\t\tint temp=tree[x].ch[1];\n\t\t\twhile(tree[temp].ch[0])\n\t\t\t\ttemp=tree[temp].ch[0];//\u627e\u76f4\u63a5\u540e\u9a71\n\t\t\ttree[x].sz=tree[temp].sz;\n\t\t\ttree[x].cnt=tree[temp].cnt;//\u66ff\u6362\n\t\t\tdel(tree[x].ch[1],tree[temp].sz,tree[temp].cnt);\n        \t\t//\u5c06\u540e\u9a71\u5f7b\u5e95\u5220\u9664\n\t\t}\n\t\treturn 0;\n\t}\n\tif(tree[x].sz<sz)\n\t\tdel(tree[x].ch[1],sz,sl);\n\telse\n\t\tdel(tree[x].ch[0],sz,sl);\n\treturn 0;\n}\n\nint rank(int sz)\n{\n\tint x=root,res=0;\n\twhile(x)\n\t{\n\t\tif(tree[x].sz==sz)//\u5982\u679c\u6570\u503c\u76f8\u7b49\uff0c\u5219\u4e0d\u7528\u904d\u5386\u4e0b\u53bb\uff0c\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\n\t\t\treturn res+tree[tree[x].ch[0]].size+1;\n\t\tif(tree[x].sz<sz)//sz>tree[x].sz\u8bf4\u660e\u5de6\u5b50\u6811\u4e2d\u7684\u70b9\u548c\u6b64\u8282\u70b9\u672c\u8eab\u90fd\u5c0f\u4e8esz\n\t\t{\n\t\t\tres+=tree[tree[x].ch[0]].size+tree[x].cnt;//\u4e8e\u662fres\u52a0\u4e0a\u8fd9\u4e9b\u6570\u91cf\n\t\t\tx=tree[x].ch[1];\n\t\t}\n\t\telse\n\t\t\tx=tree[x].ch[0];\n\t}\n\treturn res+1;//\u5982\u679c\u4e0d\u5728\u6811\u91cc\uff0cres\u50a8\u5b58\u7684\u5c31\u662f\u5c0f\u4e8esz\u7684\u6570\u7684\u6570\u91cf\n}\nint arrank(int wz)//\u8fd9\u91cc\u76f4\u63a5\u7528\u4e86\u8fd9\u4e2awz\u8868\u793a\u5728\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u7684\u6392\u540d\n{\n\tint x=root;\n\twhile(x)\n\t{\n\t\tif(tree[x].cnt+tree[tree[x].ch[0]].size<wz)//\u8bf4\u660e\u6392\u540dwz\u7684\u8282\u70b9\u5728x\u7684\u53f3\u5b50\u6811\u4e0a\n\t\t{\n\t\t\twz-=tree[x].cnt+tree[tree[x].ch[0]].size;\n\t\t\tx=tree[x].ch[1];\n            \t\t//\u51cf\u53bb\u4e4b\u540e\u8868\u793a\u5728\u53f3\u5b50\u6811\u4e0a\u7684\u6392\u540d\uff0c\u540c\u65f6\u628ax\u53d8\u4e3a\u53f3\u513f\u5b50\n\t\t}\n\t\telse if(tree[tree[x].ch[0]].size<wz)//\u8868\u793a\u4e0d\u5728\u5de6\u5b50\u6811\u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4\u660e\u7ed3\u679c\u5c31\u662f\u5f53\u524d\u8282\u70b9\n\t\t\treturn tree[x].sz;\n\t\telse//\u4e0d\u5728\u53f3\u5b50\u6811\u4e0d\u5728\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u5728\u5de6\u5b50\u6811\n\t\t\tx=tree[x].ch[0];\n\t}\n\treturn 0;\n}\nint qianqu(int sz)\n{\n\tint x=root,maxx=-2147483647;\n\twhile(x)\n\t{\n\t\tif(tree[x].sz<sz&&tree[x].sz>maxx)//\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u66f4\u65b0\n\t\t\tmaxx=tree[x].sz;\n\t\tif(tree[x].sz<sz)\n\t\t\tx=tree[x].ch[1];\n\t\telse\n\t\t\tx=tree[x].ch[0];\n\t}\n\treturn maxx;\n}\nint houqu(int sz)\n{\n\tint x=root,minn=2147483647;//\u7531\u4e8e\u540e\u9a71\u8981\u5c3d\u91cf\u5c0f\uff0c\u6240\u4ee5\u53d6\u6781\u5927\u503c\n\twhile(x)\n\t{\n\t\tif(tree[x].sz>sz&&tree[x].sz<minn)//\u6761\u4ef6\u4e0e\u4e0a\u8fb9\u521a\u597d\u76f8\u53cd\n\t\t\tminn=tree[x].sz;\n\t\tif(tree[x].sz<=sz)\n\t\t\tx=tree[x].ch[1];\n\t\telse\n\t\t\tx=tree[x].ch[0];\n\t}\n\treturn minn;\n}\nint main()\n{\n\tn=Read();\n\tm=Read();\n\tfor(int p,i=1;i<=n;i++)\n\t{\n\t\tp=Read();\n\t\tadd(root,p);\n\t}\n\tfor(int k,temp,i=1;i<=m;i++)\n\t{\n\t\ttemp=Read();\n\t\tk=Read()^last;\n\t\tif(temp==1)\n\t\t\tadd(root,k);\n\t\telse if(temp==2)\n\t\t\tdel(root,k,1);\n\t\telse if(temp==3)\n\t\t\tlast=rank(k);\n\t\telse if(temp==4)\n\t\t\tlast=arrank(k);\n\t\telse if(temp==5)\n\t\t\tlast=qianqu(k);\n\t\telse\n\t\t\tlast=houqu(k);\n\t\tif(temp>=3)\n\t\tans^=last;\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n\u8dd1\u7684\u5f88\u5feb\uff0c\u5728\u8fd9\u9053\u9898\u76ee\u91cc\u4e0d\u5230\u4e94\u79d2\u3002\n\n\u81f3\u6b64\uff0c\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u7ed3\u675f\u4e86\uff0c\u5e0c\u671b\u6709\u6240\u5e2e\u52a9\uff0c\u540c\u65f6\u6b22\u8fce\u63d0\u51fa\u95ee\u9898\u548c\u5efa\u8bae\u3002\n\n\n",
        "postTime": 1585234098,
        "uid": 235166,
        "name": "X_G_H_D_S_G_S_D_H",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "## AVL\u6811\u662f\u4e00\u79cd\u8ba9\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc71\u7684\u5e73\u8861\u6811\uff0c\u6240\u4ee5\u67e5\u627e\u7684\u5e38\u6570\u5f88\u5c0f\uff0c\u800c\u4fee\u6539\u7565\u5927\n\n\u770b\u5230\u6709AVL\u6811\u7684\u9898\u89e3\u4e86\uff0c\u5728\u6b64\u4e0d\u591a\u8d58\u8ff0\u3002\n\n\u4f46\u662f\u4ed6\u662f\u7528\u6307\u9488\u5199\u7684\u53ef\u80fd\u4f1a\u6162\uff0c\u6240\u4ee5\u53d1\u4e00\u7bc7\u6570\u7ec4\u5b9e\u73b0\u7684\uff08\u5e0c\u671b\u5728\u5b66\u5b8cAVL\u6811\u540e\u770b\u770b\u672c\u4ee3\u7801\u3002\n\nCODE:\n```cpp\n#include <cstdio>\nconst int N=1e5+1e6+5;\nint n,m,k,x,cnt,root,last,ans;\nstruct jd {\n\tint l,r,val,size;\n\tint ht;//\u6811\u9ad8\n}t[N]; \ninline int read(){\n\tint x=0,flag=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){flag|=(ch=='-');ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn flag?-x:x;\n}\ninline int newt(int val) {\n\tt[++cnt]=(jd) {0,0,val,1,0};\n\treturn cnt;\n}\ninline int mx(int x,int y) {return x>y?x:y;}\n\ninline int bf(int now) {return t[t[now].l].ht-t[t[now].r].ht;}\ninline void update(int now) {\n\tt[now].size=t[t[now].l].size+t[t[now].r].size+1;\n\tt[now].ht=mx(t[t[now].l].ht,t[t[now].r].ht)+1;\n}\ninline void lt(int &now) {//\u5de6\u65cb\n\tint y=t[now].r;\n\tt[now].r=t[y].l;\n\tt[y].l=now;\n\tnow=y;\n\tupdate(t[now].l);\n\tupdate(now); \n}\ninline void rt(int &now) {//\u53f3\u65cb\n\tint y=t[now].l;\n\tt[now].l=t[y].r;\n\tt[y].r=now;\n\tnow=y;\n\tupdate(t[now].r);\n\tupdate(now);\n}\n\ninline void ch(int &now) {//\u5bf9now\u5b50\u6811\u8fdb\u884c\u7ef4\u62a4\n\tint s=bf(now);\n\tif(s>1) {\n\t\tint ss=bf(t[now].l);\n\t\tif(ss>0) rt(now);//LL\n\t\telse lt(t[now].l),rt(now);//LR\n\t}\n\telse if(s<-1){\n\t\tint ss=bf(t[now].r);\n\t\tif(ss<0) lt(now);//RR\n\t\telse rt(t[now].r),lt(now);//RL\n\t}\n\telse if(now) update(now);\n}\n\nvoid ins(int &now,int val) {\n\tif(!now) now=newt(val);\n\telse if(t[now].val<=val) ins(t[now].r,val);\n\telse ins(t[now].l,val);\n\tch(now);\n}\n\nvoid del(int &now,int val) {//\u6211\u662f\u4f7f\u7528\u5c06\u5176\u65cb\u8f6c\u81f3\u53f6\u5b50\u8282\u70b9\u540e\u5220\u9664\u7684\n\tif(t[now].val==val) {\n\t\tif(!t[now].l||!t[now].r)now=t[now].l^t[now].r;\n\t\telse if(bf(now)<0) rt(now),del(now,val);//\u53f3\u5b50\u6811\u9ad8\uff0c\u65cb\u8f6c\u81f3\u5de6\u513f\u5b50\u4f4d\u7f6e\u53ef\u7565\u51cf\u5c0f\u7ef4\u62a4\u7684\u5e38\u6570\n\t\telse lt(now),del(now,val);//\u540c\u4e0a\n\t}\n\telse if(val>=t[now].val) del(t[now].r,val);\n\telse del(t[now].l,val);\n\tch(now);\n}\n\ninline int rank(int val) {\n\tint now=root,s=0;\n\twhile(now) {\n\t\tif(t[now].val>=val) now=t[now].l;\n\t\telse s+=t[t[now].l].size+1,now=t[now].r;\n\t}\n\treturn s+1;\n}\n\ninline int num(int val) {\n\tint now=root;\n\twhile(now) {\n\t\tif(t[t[now].l].size+1==val)\n\t\t\treturn t[now].val;\n\t\tif(t[t[now].l].size>=val) now=t[now].l;\n\t\telse val=val-t[t[now].l].size-1,now=t[now].r;\n\t}\n}\nint main() {\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tn=read();m=read();\n\tfor(int i=1;i<=n;++i)\n\t\tins(root,read());\n\twhile(m--) {\n\t\tk=read();x=read();\n\t\tx^=last;\n\t\tswitch(k) {\n\t\t\tcase 1:\n\t\t\t\tins(root,x);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tdel(root,x);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tans^=last=rank(x);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tans^=last=num(x);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tans^=last=num(rank(x)-1);\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tans^=last=num(rank(x+1));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n-\u5b8c-",
        "postTime": 1582859781,
        "uid": 114830,
        "name": "Kostlin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "# AVL\n\n\u8fd9\u662f\u4e00\u7bc7AVL\u6811(\u6bd4\u9898\u89e3\u533a\u7684\u90a3\u51e0\u7bc7\u5feb\u4e0d\u77e5\u9053\u54ea\u53bb\u4e86..\u641e\u4e0d\u61c2\u4ed6\n\u4eec\u7684avl\u6811\u4e3a\u5565\u8fd9\u4e48\u6162\uff0c\u5c24\u5176\u662f\u62ff\u6570\u7ec4\u7684\u90a3\u4f4d...)\uff08\u65e0\u610f\u5192\u72af\n\n\u8fd9\u7bc7AVL\u6811\u751a\u81f3\u548c\u9898\u89e3\u533a\u7684\u53e6\u4e00\u68f5RBT\u76f8\u5f53..\u6d4b\u901f\u5ea6\u65f6\u7684\u5fc3\u60c5\u662f\u7206\u70b8\u7684 qwq\n\navl\u76f8\u6bd4\u4e8e splay \u7b97\u662f\u5f88\u53e4\u8001\u7684\u6570\u636e\u7ed3\u6784\u5427\u3002\u4f46\u662f\u6548\u7387\u4e0d\u9519\uff0c\u6bd5\u7adf RBT \u5c31\u662f avl \u7684\u53d8\u79cd\n\navl\u6811\u662f\u6211\u552f\u4e8c\u4f1a\u7684\u5e73\u8861\u6811\uff0c\u5269\u4e0b\u90a3\u4e2a\u662f ScapeGoat....\u4f5c\u4e3a\u4e00\u4e2a\u4ece\u6765\u4e0d\u5199 treap \u7684\u4eba\uff08\u70b9\u80cc\uff09\n\n\u8fd8\u662f\u8981\u8bf4\u4e00\u4e0b,,\u5199\u4ee3\u7801\uff0c\u5c31\u8981\u5e38\u6570\u5c0f...\u5199\u4e2aavl\u80fd\u8dd1\u5230\u516b\u79d2.\u90a3\u8fd8\u4e0d\u5982 fhq_treap \u5462...\n\n\u91c7\u7528\u54e8\u5175\u7ed3\u70b9\u6765\u9632\u6b62\u5947\u602a\u7684RE,,\u6211\u5df2\u7ecf\u56e0\u4e3a\u8fd9\u4e2aRE\u65e0\u6570\u904d\u4e86..\n\n\u7ec6\u8282\u90fd\u5df2\u7ecf\u52a0\u4e86\u6ce8\u91ca\n\n\u732e\u4e0a\u4ee3\u7801\u5199\u7684\u7279\u522b\u7528\u5fc3..\n\n\u5e0c\u671b\u5927\u5bb6\u7684\u4ee3\u7801\u4e5f\u53ef\u4ee5\n\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define gc() getchar()\n#define pc(i) putchar(i)\n\ntemplate <typename KYN>\ninline KYN read()\n{\n\tKYN x = 0;\n\tchar ch = gc();\n\tbool f = 0;\n\twhile(!isdigit(ch))\n\t{\n\t\tf = (ch == '-');\n\t\tch = gc();\n\t}\n\twhile(isdigit(ch))\n\t{\n\t\tx = x * 10 + (ch - '0');\n\t\tch = gc();\n\t}\n\treturn f ? -x : x;\n}\n\ntemplate <typename KYN>\nvoid put(KYN x)\n{\n\tif(x < 0)\n\t{\n\t\tx = -x;\n\t\tpc('-');\n\t}\n\tif(x < 10) {\n\t\tpc(x + 48);\n\t\treturn;\n\t}\n\tput(x / 10);\n\tpc(x % 10 + 48);\n\treturn ;\n}\n\n#define vit std::vector <int>:: iterator \n#define vi std::vector <int>\n#define lbd(i, j, k) lower_bound(i, j, k)\n#define pii std::pair <int, int>\n#define mkp(i, j) std::make_pair(i, j)\n#define lowbit(i) (i & -i)\n#define ispow(i) (i == lowbit(i))\n#define rdi() read <int> ()\n#define rdl() read <long long> ()\n#define pti(i) put <int> (i), putchar(' ')\n#define ptl(i) put <long long> (i), putchar(' ')\n\ntypedef long long ll;\ntypedef double db;\ntypedef long double ldb;\ntypedef unsigned long long ull;\ntypedef unsigned int ui;\n\nconst int Maxn = 1e6  + 1e5 + 111;\n\nnamespace RSX_love_KYN\n{\n\n// \u4e0d\u8981\u95ee\u6211\u4e3a\u5565\u53eb\u8fd9\u4e2anamespace,qwq\n\nconst int MAXN = 1e6  + 1e5 + 111;\n\ntemplate <typename KYN>\nclass avlTree\n{\n\tprivate:\n\t//\u7ed3\u70b9\u58f0\u660e\n\t// \u5176\u5b9e\u5199\u4e0d\u5199 private \u5b8c\u5168\u770b\u4f60\u5fc3\u60c5\n\tstruct avlNode;\n\ttypedef avlNode *avl;\n\tstruct avlNode\n\t{\n\t\tavl ls, rs;\n\t\tint size, height, num;\n\t\tKYN data;\n\t\tvoid update() \n\t\t{\n\t\t\tthis->size = this->ls->size + this->rs->size + this->num;\n\t\t\tthis->height = max(this->ls->height , this->rs->height) + 1;\n\t\t}\n\t};\n\t// \u4e0d\u8981\u6284\u4ee3\u7801\u54df...\n\tprotected:\n\t// \u5927\u6982\u662f\u53cb\u5143\u7684\u610f\u601d\n   avl rot, null, tot, deleted[MAXN];\n\tavlNode memory[MAXN];\n\tint deltop;\n     \t// \u8fd9\u91cc\u4f7f\u7528\u4e86\u5185\u5b58\u6c60\u7684\u64cd\u4f5c\uff0c\u5177\u4f53\u53ef\u4ee5\u770b Marser \u7684 blog \u4ed6\u7684ScapeGoat \u8dd1\u7684\u98de\u5feb\n\tinline avl init(KYN x)\n\t{\n\t\tavl tmp = deltop ? deleted[deltop--] : tot++;\n\t\ttmp->ls = tmp->rs = null;\n\t\ttmp->size = tmp->num = tmp->height = 1;\n\t\ttmp->data = x;\n\t\treturn tmp;\n\t}\n\t//\u8fd9\u662f\u8bf4\u65b0\u5efa\u4e00\u4e2a\u7ed3\u70b9\u51fa\u6765\n\t\n\tinline avl Single_left(avl T)\n\t{\n\t\tavl a = T->ls;\n\t\tT->ls = a->rs;\n\t\ta->rs = T;\n\t\tT->update();\n\t\ta->update();\n\t\treturn a;\n\t}\n\t// \u5de6\u5355\u65cb\n\tinline avl Single_right(avl T)\n\t{\n\t\tavl a = T->rs;\n\t\tT->rs = a->ls;\n\t\ta->ls = T;\n\t\tT->update();\n\t\ta->update();\n\t\treturn a;\n\t}\n\t// \u53f3\u5355\u65cb\n\tinline avl double_left(avl T)\n\t{\n\t\tT->ls = Single_right(T->ls);\n\t\treturn Single_left(T);\n\t}\n\t// \u5de6\u53cc\u65cb\n\tinline avl double_right(avl T)\n\t{\n\t\tT->rs = Single_left(T->rs);\n\t\treturn Single_right(T);\n\t}\n\t// \u53f3\u53cc\u65cb\uff0c\u4e0b\u9762\u662f\u6dfb\u52a0\u64cd\u4f5c\n\tavl insert(avl T, KYN x)\n\t{\n\t\t // \u5df2\u7ecf\u5230\u4e86 null \u76f4\u63a5\u65b0\u5efa\u5373\u53ef\n\t\tif(T == null) return init(x);\n\t\tif(x == T->data)\n\t\t{\n        \t\t//\u539f\u5148\u6709\u8fd9\u4e2a\u70b9 \n\t\t\t++(T->num);\n\t\t\tT->update();\n\t\t\treturn T;\n\t\t}\n\t\tif(x < T->data)\n\t\t{\n    \t\t    // \u63d2\u5230\u5de6\u5b50\u6811\n\t\t\tT->ls = insert(T->ls, x);\n\t\t\tT->update();\n     \t\t       // \u540c\u65f6\u66f4\u65b0\u8fd9\u4e2a\u8282\u70b9\u7684size\u548cheight\n\t\t\tif(T->ls->height - T->rs->height == 2)\n\t\t\t{\n            // \u5982\u679c\u8fbe\u5230\u4e86\u4e0d\u5e73\u8861\n\t\t\t\tif(x < T->ls->data) T = Single_left(T);// \u8fd9\u65f6\u65f6\u5de6\u5355\u65cb\u56e0\u4e3a\u63d2\u5230\u4e86\u5de6\u5b50\u6811\u7684\u5de6\u8fb9\n\t\t\t\telse T = double_left(T);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{// \u53f3\u8fb9\u540c\u7406\n\t\t\tT->rs = insert(T->rs, x);\n\t\t\tT->update();\n\t\t\tif(T->rs->height - T->ls->height == 2)\n\t\t\t{\n\t\t\t\tif(T->rs->data < x) T = Single_right(T);\n\t\t\t\telse T = double_right(T);\n\t\t\t}\n\t\t}\n\t\treturn T;\n\t}\n\t\n\tavl erase(avl T, KYN x)\n\t{\n\t\tif(T == null) return null;// \u6ca1\u6709\u627e\u5230\u76f4\u63a5\u8fd4\u56de\n\t\tif(x < T->data)\n\t\t{// \u5728\u5de6\u5b50\u6811\u91cc\u5220\u9664\n\t\t\tT->ls = erase(T->ls, x);\n\t\t\tT->update();\n\t\t\tif(T->rs->height - T->ls->height == 2)\n\t\t\t{//\u8981\u662f\u4e0d\u5e73\u8861\u4e86\n\t\t\t\tif(T->rs->rs->height >= T->rs->ls->height) T = Single_right(T);\n\t\t\t\telse T = double_right(T);\n\t\t\t}\n\t\t}\n\t\telse if(T->data < x)\n\t\t{//\u5220\u9664\u53f3\u5b50\u6811\u7684\n\t\t\tT->rs = erase(T->rs, x);\n\t\t\tT->update();\n\t\t\tif(T->ls->height - T->rs->height == 2)\n\t\t\t{//\u8981\u662f\u4e0d\u5e73\u8861\u4e86\n\t\t\t\tif(T->ls->ls->height >= T->ls->rs->height) T = Single_left(T);\n\t\t\t\telse T = double_left(T);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{//\u5047\u5982\u8fd9\u4e2a\u70b9\u5c31\u662f\n\t\t\tif(T->num > 1)\n\t\t\t{//\u8d85\u8fc7\u4e00\u4e2a\u76f4\u63a5\u5220\n\t\t\t\t--(T->num);\n\t\t\t\tT->update();\n\t\t\t\treturn T;\n\t\t\t}\n\t\t\tif(T->ls != null && T->rs != null)\n\t\t\t{//\u5de6\u53f3\u90fd\u6709\u5b57\u6811\uff0c\u62ff\u51fa\u53f3\u5b50\u6811\u6700\u5c0f\u7684\n\t\t\t\tavl p = T->rs;\n\t\t\t\twhile(p->ls != null) p = p->ls;\n\t\t\t\tT->num = p->num;\n\t\t\t\tT->data = p->data, p->num = 1;\n\t\t\t\tT->rs = erase(T->rs, T->data);\n\t\t\t\tT->update();\n\t\t\t\tif(T->ls->height - T->rs->height == 2)\n\t\t\t\t{\n\t\t\t\t\tif(T->ls->ls->height >= T->ls->rs->height) T = Single_left(T);\n\t\t\t\t\telse T = double_left(T);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{//\u90fd\u6ca1\u6709\u76f4\u63a5\u5220\n\t\t\t\tavl p = T;\n\t\t\t\tif(T->ls != null) T = T->ls;\n\t\t\t\telse if(T->rs != null) T = T->rs;\n\t\t\t\telse T = null;\n\t\t\t\tdeleted[++deltop] = p;\n\t\t\t}\n\t\t}\n\t\treturn T;\n\t}\n\t\n\tKYN get_rank(avl T, KYN x) \n\t{//\u8fd9\u4e2a\u5c31\u6ca1\u4ec0\u4e48\u6280\u672f\u542b\u91cf\uff0c\u5176\u4ed6\u7684\u9898\u89e3\u90fd\u6709\n\t    // \u4f46\u662f\u6211\u4e4b\u524d\u65e0\u9650TLE\u7684\u539f\u56e0\u5c31\u662f\u5982\u679c\u8fd9\u4e2a\u70b9\u6bd4\u591a\u6709\u7684\u7ed3\u70b9\u90fd\u90fd\u5927\uff0c\u90a3\u5c31\u8fd4\u56de \u8282\u70b9\u6570 + 1\uff0c\u4e00\u5b9a\u8981\u8fd4\u56de\n\t\tint ans = 0;\n\t\twhile(T != null)\n\t\t{\n\t\t\tif(T->data == x) { return ans + T->ls->size + 1; }\n\t\t\telse if(x < T->data) { T = T->ls; }\n\t\t\telse { ans += T->ls->size + T->num; T = T->rs; }\n\t\t}\n\t\treturn ans + 1;\n\t}\n\t\n\tKYN get_data(avl T, int rank)\n\t{//\u540c\u6837\n\t\twhile(T != null)\n\t\t{\n\t\t\tif(T->ls->size >= rank) T = T->ls;\n\t\t\telse if(T->ls->size + T->num >= rank) { return T->data; }\n\t\t\telse { rank -= T->num + T->ls->size; T = T->rs; }\n\t\t}\n\t}\n\t\n\tavl makeempty(avl x)\n\t{//\u6e05\u7a7a\u4e00\u68f5\u6811\n\t\tif(x == null) return null;\n\t\tx->ls = makeempty(x->ls);\n\t\tx->rs = makeempty(x->rs);\n\t\tdeleted[++deltop] = x;\n\t\treturn null;\n\t}\n\t\n\tvoid output(avl x)\n\t{// debug\u7528\u7684\n\t\tif(x == null) return;\n\t\toutput(x->ls);\n\t\tput <KYN> (x->data);\n\t\tputchar(' ');\n\t\toutput(x->rs);\n\t}\n\t\n\tavl find(avl T, KYN x)\n\t{// \u663e\u5f97\u6ca1\u4e8b\u5e72\u5199\u7684\uff0c\u5c31\u662f\u4e3a\u4e86\u8c03\u8bd5TLE\u7528\u7684\n\t\twhile(T != null) {\n\t\t\tif(T->data == x) return T;\n\t\t\telse if(T->data > x) { T = T->ls; }\n\t\t\telse { T = T->rs; }\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tpublic:\t\n\tKYN prv(KYN x)\n\t{\n\t\tKYN ans = KYN(-1 << 30);\n\t\tavl tmp = rot;\n\t\twhile(tmp != null)\n\t\t{\n\t\t\tif(tmp->data == x)\n\t\t\t{\n\t\t\t\tif(tmp->ls != null)\n\t\t\t\t{\n\t\t\t\t\ttmp = tmp->ls;\n\t\t\t\t\twhile(tmp->rs != null) tmp = tmp->rs;\n\t\t\t\t\tans = tmp -> data;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(tmp->data < x && ans < tmp->data) ans = tmp->data;\n\t\t\ttmp = tmp->data < x ? tmp->rs : tmp->ls;\n\t\t}\n\t\treturn ans;\n\t}\n\t\n\tKYN next(KYN x) {\n\t\tKYN ans = KYN(1 << 30);\n\t\tavl tmp = rot;\n\t\twhile(tmp != null)\n\t\t{\n\t\t\tif(tmp->data == x)\n\t\t\t{\n\t\t\t\tif(tmp->rs != null)\n\t\t\t\t{\n\t\t\t\t\ttmp = tmp->rs;\n\t\t\t\t\twhile(tmp->ls != null) tmp = tmp->ls;\n\t\t\t\t\tans = tmp->data;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(x < tmp->data && tmp->data < ans) ans = tmp->data;\n\t\t\ttmp = tmp->data < x ? tmp->rs : tmp->ls;\n\t\t}\n\t\treturn ans;\n\t}// \u524d\u9a71\u548c\u540e\u7ee7\u4e0d\u591a\u8bf4\u4e86\n\t\n\tavlTree()\n\t{\n\t\tdeltop = 0;\n\t\tnull = new avlNode;\n\t\tnull->ls = null->rs = null;\n\t\tnull->size = null->height = null->num = 0;\n\t\trot = null;\n\t\ttot = memory;//\u6784\u9020\u51fd\u6570\n\t}\n\t\n\tinline void insert(KYN x) { rot = insert(rot, x); return ; }\n\t\n\tinline void erase(KYN x) { rot = erase(rot, x); }\n\t\n\tinline int get_rank(KYN x) { return get_rank(rot, x); }\n\t\n\tinline KYN get_data(int x) { return get_data(rot, x); }\n\t\n\tvoid clear() { rot = makeempty(rot); }\n\t\n\tbool find(KYN x) { return find(rot, x) != null; }\n\t\n\tvoid output() { output(rot); }\n\t\n\tKYN operator[] (int k) { return get_data(k); }\n\t\n\tint size() { return rot->size; }\n};\n\n}\n\nusing namespace RSX_love_KYN;\n\nint n, opt, x, m, last = 0, tmp, ans;\n\navlTree <int> tree;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"P6136_2.in\", \"r\", stdin);\n#endif\n\tn = rdi(); m = rdi();\n\twhile(n--) tree.insert(rdi());\n\twhile(m--) {\n\t\topt = rdi(); x = rdi();\n\t\tx ^= last;\n\t\tswitch (opt)\n\t\t{\n\t\t\tcase 1: tree.insert(x); break;\n\t\t\tcase 2: tree.erase(x); break;\n\t\t\tcase 3: last = tree.get_rank(x); ans ^= last; break;\n\t\t\tcase 4: last = tree[x]; ans ^= last; break;\n\t\t\tcase 5: last = tree.prv(x); ans ^= last; break;\n\t\t\tcase 6: last = tree.next(x); ans ^= last; break;\n\t\t}\n\t}\n\tpti(ans);\n\treturn 0;\n}\n```\n\n\u5f69\u86cb\uff1a\u6ca1\u5199\u6a21\u677f\u7c7b\u4e4b\u524d\u6bd4\u5199\u6a21\u677f\u7c7b\u5feb..\n",
        "postTime": 1587051858,
        "uid": 232125,
        "name": "SiRiehn_nx",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6136 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    }
]