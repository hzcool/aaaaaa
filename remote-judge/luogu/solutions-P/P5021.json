[
    {
        "content": "# [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u8fd9\u91cc](https://www.cnblogs.com/owencodeisking/p/9958850.html)\n\n\u8003\u573a\u4e0a\u6253\u4e86\u4e00\u4e2a $vector$ \u89e3\u6cd5\uff0c\u56e0\u4e3a\u6211\u5f53\u65f6\u4e0d\u4f1a $multiset$ \n\n\u597d\u5427\uff0c\u6211\u6765\u8bb2\u4e00\u8bb2\u4eca\u5e74\u7684 $\\text{tgD1T3}$ \n\n\u9996\u5148\uff0c\u8fd9\u9898 $55$ \u5206\u662f\u4e0d\u96be\u60f3\u7684\u3002\n\n### 1\u3001 $b_i=a_i+1$ \u7684\u60c5\u51b5\uff08\u4e00\u6761\u94fe\uff09\n\n\u89e3\u6cd5\uff1a\u628a\u6240\u6709\u8fb9\u6743\u8bb0\u5f55\u4e0b\u6765\uff0c\u8fd9\u79cd\u60c5\u51b5\u7b49\u4ef7\u4e8e\u5c06\u5e8f\u5217\u5206\u5272\u6210 $m$ \u6bb5\uff0c\u4f7f $m$ \u6bb5\u533a\u95f4\u548c\u7684\u6700\u5c0f\u503c\u6700\u5927\u3002\n\n\u90a3\u4e48\u4e8c\u5206 $m$ \u6bb5\u533a\u95f4\u548c\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e $O(n)$ \u8d2a\u5fc3\u626b\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$ \n\n```cpp\nnamespace subtask1{\n    int a[maxn];\n    void dfs(int x,int fa){\n        for(int i=head[x],y;i;i=e[i].next){\n            y=e[i].to;\n            if(y==fa) continue;\n            dfs(y,x);\n            a[x]=e[i].val;\n        }\n    }\n    int check(int k){\n        int t=0,now=0;\n        for(int i=1;i<n;i++){\n            if(now+a[i]>=k){\n                now=0;\n                t++;\n            }\n            else now+=a[i];\n        }\n        return t>=m;\n    }\n    void solve(){\n        dfs(1,0);\n        int l=1,r=sum,mid;\n        while(l<r){\n            mid=l+r+1>>1;\n            if(check(mid)) l=mid;\n            else r=mid-1;\n        }\n        printf(\"%d\\n\",l);\n        return ;\n    }\n}\n```\n\n### 2\u3001 $m=1$ \u7684\u60c5\u51b5\uff08\u6811\u7684\u76f4\u5f84\uff09\n\n\u89e3\u6cd5\uff1a\u53d6\u4e00\u6761\u6700\u957f\u94fe\uff0c\u5373\u4e3a\u6811\u7684\u76f4\u5f84\u95ee\u9898\uff0c\u8bb0\u5f55\u4e00\u4e0b\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff0c\u6bcf\u6b21\u628a\u6700\u5927\n\u503c\u4f20\u5230\u5b83\u7684\u7236\u4eb2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\n\n```cpp\nnamespace subtask2{\n    int dfs(int x,int fa){\n        int sum1=0,sum2=0;\n        for(int i=head[x],y;i;i=e[i].next){\n            y=e[i].to;\n            if(y==fa) continue;\n            sum2=max(sum2,dfs(y,x)+e[i].val);\n            if(sum2>sum1) swap(sum1,sum2); \n        }\n        ans=max(ans,sum1+sum2);\n        return sum1;\n    }\n    void solve(){\n        dfs(1,0);\n        printf(\"%d\\n\",ans);\n        return ;\n    }\n}\n```\n\n### 3\u3001$a_i=1$\u7684\u60c5\u51b5\uff08\u83ca\u82b1\u56fe\uff09\n\n\u89e3\u6cd5\uff1a\u628a\u6240\u6709\u8fb9\u6743\u8bb0\u5f55\u4e0b\u6765\uff0c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u8bbe\u8fb9\u6743\u4e3a $w$\uff0c\u7b54\u6848\u5373\u4e3a $w_1+w_{2m-1},w_2+w_{2m-2},...,w_m+w_{m+1}$ \u7684\u6700\u5c0f\u503c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(nlogn)$\n\n```cpp\nnamespace subtask3{\n\tint a[maxn];\n\tbool cmp(int a,int b){\n\t\treturn a>b;\n\t}\n\tvoid solve(){\n\t\tfor(int i=head[1],y;i;i=e[i].next){\n\t\t\ty=e[i].to;\n\t\t\ta[y-1]=e[i].val;\n\t\t}\n\t\tsort(a+1,a+n,cmp);\n\t\tint ans=inf;\n\t\tfor(int i=1;i<=m;i++)\n\t\t\tans=min(ans,a[i]+a[2*m-i+1]);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n```\n\n\u5206\u652f\u4e0d\u8d85\u8fc7 $3$ \u7684\u8bdd\u5176\u5b9e\u5c31\u662f\u6b63\u89e3\u7684\u5f31\u5316\u7248\u3002\n\n\u770b\u5230\u9898\u610f\u63cf\u8ff0\u7b2c\u4e00\u53cd\u5e94\u5c31\u662f\u5148\u4e8c\u5206\u90a3\u4e2a\u4fee\u5efa\u7684 $m$ \u6761\u8d5b\u9053\u4e2d\u957f\u5ea6\u6700\u5c0f\u7684\u8d5b\u9053\u7684\u957f\u5ea6 $k$ \uff0c\u7136\u540e $O(n)$ \u6216 $O(n\\log n)$ \u5224\u65ad\u3002\n\n\u90a3\u4e48\u600e\u4e48\u5224\u65ad\u5462\uff1f\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u628a\u6240\u6709\u4f20\u4e0a\u6765\u7684\u503c $val$ \u653e\u8fdb\u4e00\u4e2a $multiset$ \uff0c\u5176\u5b9e\u8fd9\u4e9b\u503c\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u5c31\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- $val\\geq k$\n- $val_a+val_b\\geq k$\n\n\u90a3\u4e48\u7b2c\u4e00\u79cd\u60c5\u51b5\u53ef\u4ee5\u4e0d\u7528\u653e\u8fdb $multiset$\uff0c\u76f4\u63a5\u7b54\u6848 $+1$ \u5c31\u597d\u4e86\u3002\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5c31\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u5728 $multiset$ \u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a $\\geq k$ \u7684\u6570\uff0c\u5c06\u4e24\u4e2a\u6570\u540c\u65f6\u5220\u53bb\uff0c\u6700\u540e\u628a\u5269\u4e0b\u6700\u5927\u7684\u503c\u4f20\u5230\u90a3\u4e2a\u7ed3\u70b9\u7684\u7236\u4eb2\n\n\u6211\u51fa\u8003\u573a\u540e\u60f3\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u89e3\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u6709\u6ca1\u6709\u53ef\u80fd\u5bf9\u4e8e\u6709\u4e9b\u60c5\u51b5\u76f4\u63a5\u4f20\u6700\u5927\u7684\u6570\u4f1a\u4f7f\u7b54\u6848\u66f4\u5927\uff1f\n\n\u5f53\u7136\u4e0d\u4f1a\u3002\u8fd9\u4e2a\u6570\u5373\u4f7f\u5f88\u5927\u4e5f\u53ea\u80fd\u5bf9\u7b54\u6848\u8d21\u732e\u52a0 $1$\uff0c\u5728\u5176\u6ca1\u4f20\u4e0a\u53bb\u7684\u65f6\u5019\u53ef\u4ee5\u8ddf\u539f\u6765\u7ed3\u70b9\u7684\u503c\u914d\u5bf9\uff0c\u4e5f\u53ea\u80fd\u5bf9\u7b54\u6848\u8d21\u732e\u52a0 $1$\u3002\n\n$multiset$ \u7248\uff1a\n\n```cpp\nint dfs(int x,int fa,int k){\n    s[x].clear();\n    int val;\n    for(int i=head[x],y;i;i=e[i].next){\n        y=e[i].to;\n        if(y==fa) continue;\n        val=dfs(y,x,k)+e[i].val;\n        if(val>=k) ans++;\n        //\u76f4\u63a5\u5904\u7406\u7b2c\u4e00\u79cd\u60c5\u51b5\n        else {\n            s[x].insert(val);\n        }\n    }\n    int Max=0;\n    while(!s[x].empty()){\n        if(s[x].size()==1){\n            return max(Max,*s[x].begin());\n        }\n        //\u628a\u6700\u5927\u7684\u7ed9\u4f20\u4e0a\u53bb\n        it=s[x].lower_bound(k-*s[x].begin());\n        //\u4e8c\u5206\u5230\u90a3\u4e2a\u503c\n        if(it==s[x].begin()&&s[x].count(*it)==1) it++;\n        //\u82e5\u627e\u5230\u7684\u5c31\u662f\u5b83\u81ea\u5df1\u4e14\u5f53\u524d\u503c\u7684count==1,\u8fed\u4ee3\u5668++\n        if(it==s[x].end()){\n            Max=max(Max,*s[x].begin());\n            s[x].erase(s[x].find(*s[x].begin()));\n        }\n        //\u82e5\u6ca1\u6709\u627e\u5230\u6bd4k-*s[x].begin()\u5927\u7684\uff0c\u5c31\u53d6\u4e2a\u6700\u5927\u503c\uff0c\u628a*s[x].begin()\u5220\u6389\n        else {\n            ans++;\n            s[x].erase(s[x].find(*it));\n\t\t\ts[x].erase(s[x].find(*s[x].begin()));\n        }\n        //\u5904\u7406\u7b2c\u4e8c\u79cd\u60c5\u51b5\n    }\n    return Max;\n    //\u628a\u6700\u5927\u503c\u4f20\u4e0a\u53bb\n}\n```\n\n$vector$ \u7248\uff1a\n\n```cpp\nwhile(!s[x].empty()){\n    if(s[x].size()==1){\n        return max(Max,*s[x].begin());\n    }\n    it=lower_bound(s[x].begin(),s[x].end(),k-*s[x].begin());\n    if(it==s[x].begin()) it++;\n    if(it==s[x].end()){\n        Max=max(Max,*s[x].begin());\n        s[x].erase(s[x].begin());\n    }\n    else {\n        ans++;\n        s[x].erase(it);\n        s[x].erase(s[x].begin());\n    }\n}\nreturn Max;\n```\n\n$multiset$ \u7248\uff1a\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\n\n$vector$ \u7248\uff1a\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2\\log n)$\n\n\u5907\u6ce8\uff1a\u5982\u679c\u6570\u636e\u662f\u968f\u673a\u7684\uff0c$vector$ \u7684\u5199\u6cd5\u4f1a\u5f88\u5feb\uff0c\u4f46\u83ca\u82b1\u56fe\u53ef\u4ee5\u628a\u5b83\u5361\u6389\u3002\n\n\u7136\u540e $tgD1T3$ \u5c31\u88ab\u6211\u4eec\u89e3\u51b3\u4e86\u3002\n\n\u8fd8\u6709\u5c31\u662f\u90a3\u4e2a\u4e8c\u5206\u4e0a\u754c\u53ef\u4ee5\u6362\u6210\u6811\u7684\u76f4\u5f84\u3002\n\n$Code\\ Below:$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=50000+10;\nint n,m,head[maxn],tot,ans,up;\n\nstruct node{\n    int to,next,val;\n}e[maxn<<1];\n\nmultiset<int> s[maxn];\nmultiset<int>::iterator it;\n\ninline int read(){\n    register int x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return (f==1)?x:-x;\n}\n\ninline void add(int x,int y,int w){\n    e[++tot].to=y;\n    e[tot].val=w;\n    e[tot].next=head[x];\n    head[x]=tot;\n}\n\nint dfs(int x,int fa,int k){\n    s[x].clear();\n    int val;\n    for(int i=head[x],y;i;i=e[i].next){\n        y=e[i].to;\n        if(y==fa) continue;\n        val=dfs(y,x,k)+e[i].val;\n        if(val>=k) ans++;\n        else {\n            s[x].insert(val);\n        }\n    }\n    int Max=0;\n    while(!s[x].empty()){\n        if(s[x].size()==1){\n            return max(Max,*s[x].begin());\n        }\n        it=s[x].lower_bound(k-*s[x].begin());\n        if(it==s[x].begin()&&s[x].count(*it)==1) it++;\n        if(it==s[x].end()){\n            Max=max(Max,*s[x].begin());\n            s[x].erase(s[x].find(*s[x].begin()));\n        }\n        else {\n            ans++;\n            s[x].erase(s[x].find(*it));\n            s[x].erase(s[x].find(*s[x].begin()));\n        }\n    }\n    return Max;\n}\n\nint check(int k){\n    ans=0;\n    dfs(1,0,k);\n    if(ans>=m) return 1;\n    return 0;\n}\n\nint dfs1(int x,int fa){\n    int sum1=0,sum2=0;\n    for(int i=head[x],y;i;i=e[i].next){\n        y=e[i].to;\n        if(y==fa) continue;\n        sum2=max(sum2,dfs1(y,x)+e[i].val);\n        if(sum1<sum2) swap(sum1,sum2);\n    }\n    up=max(up,sum1+sum2);\n    return sum1;\n}\n\n\nint main()\n{\n    n=read(),m=read();\n    int x,y,w;\n    for(int i=1;i<n;i++){\n        x=read(),y=read(),w=read();\n        add(x,y,w);add(y,x,w);\n    }\n    dfs1(1,0);\n    int l=1,r=up,mid;\n    while(l<r){\n        mid=l+r+1>>1;\n        if(check(mid)) l=mid;\n        else r=mid-1;\n    }\n    printf(\"%d\\n\",l);\n    return 0;\n}\n```\n\n$\\text{Upd}:2018.11.20$ \u6811\u7684\u76f4\u5f84\u6253\u9519\u4e86\uff0c\u63d0\u4ea4\u4e0a\u53bb\u6709 $90$ \u5206\n\n$\\text{Upd}:2019.08.31$ \u53ef\u80fd\u5927\u5bb6\u77e5\u9053\u5f53\u65f6\u6211\u8111\u5b50\u4e00\u70ed\u53d1\u7684\u5e16\u5b50\uff0c\u53ef\u4ee5\u8003\u53e4\uff0c\u4e0d\u8981 @ \u6211\uff0c\u8c22\u8c22\u3002",
        "postTime": 1542164326,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "### [\u5f00\u5934\u5c0f\u5e7f\u544a\uff1a\u81ea\u5df1\u505a\u7684\u4e00\u4e2a\u6a21\u677f\u5e93OwO](https://www.luogu.org/blog/29354/Templet)\n\n------------\n# Solution\n\n## \u53ea\u8bb2\u6ee1\u5206\u89e3\u6cd5\uff1a\n\n### \u770b\u9898\u76ee\u63cf\u8ff0\u80af\u5b9a\u4e00\u4e0b\u5c31\u80fd\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u4e5f\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206m\u6761\u8d5b\u9053\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u753b\u4e00\u6761\u5206\u754c\u7ebfmid\uff0c\u770b\u770b\u6bd4mid\u5927\u6216\u8005\u7b49\u4e8e\u7684\u8d5b\u9053\u80fd\u4e0d\u80fd\u6709m\u4e2a\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u4ece\u5b83\u5b50\u6811\u53d1\u6e90\u7684\u8d5b\u9053\uff0c\u6700\u591a\u53ea\u80fd\u6709\u4e00\u6761\u7a7f\u8fc7\u5b83\u5e76\u5411\u4e0a\u8d21\u732e\uff0c\u56e0\u4e3a\u7236\u4eb2\u8fb9\u662f\u552f\u4e00\u7684\uff0c\u591a\u4e00\u6761\u8d5b\u9053\u80af\u5b9a\u4f1a\u5728\u8fb9\u4e0a\u91cd\u590d\u3002\n\n### \u6211\u4eec\u8003\u8651\u4e00\u4e0b\u8d2a\u5fc3\uff1a\n\n\u5982\u679c\u73b0\u5728\u6811\u53ea\u6709\u4e24\u5c42\uff08\u4e00\u4e2a\u6811\u6839\u548c\u4e00\u5806\u513f\u5b50\uff09\uff0c\u6211\u4eec\u7684\u80af\u5b9a\u5e0c\u671b\u8fd9\u4e2a\u5b50\u6811\u591a\u51fa\u73b0\u8d5b\u9053\u3002\u6211\u4eec\u628a\u8fb9\u5168\u90e8\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u6700\u5c0f\u7684\u8fb9\u5f00\u59cb\uff0c\u7528\u5206\u754c\u7ebfmid\u51cf\u53bb\u8fd9\u4e2a\u8fb9\u7684\u8fb9\u6743\uff0c\u8bbe\u4e3ax\u3002\u663e\u7136\uff0c\u7ed9\u8fd9\u4e2a\u8fb9\u627e\u4e00\u6761\u6bd4**x\u5927\u4e00\u70b9\u6216\u8005\u7b49\u4e8e**\u7684\u8fb9\u5373\u53ef\uff0c\u56e0\u4e3a\u6bd4x\u957f\u7684\u8fb9\u867d\u7136\u4e5f\u80fd\u548c\u5f53\u524d\u5339\u914d\uff0c\u4f46\u662f\u540e\u9762\u6211\u4eec\u5176\u4ed6\u7684\u5339\u914d\u6216\u8005\u662f\u8981\u5411\u4e0a\u8d21\u732e\u7684\u673a\u4f1a\u53ef\u80fd\u5c31\u5c11\u4e86\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u4e0d\u4f18\u3002\n\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5b8c\u6210\u5b50\u6811\u5185\u7684\u6700\u5927\u5339\u914d\u4e86\uff0c\u6211\u4eec\u627e\u51fa\u94fe\u4e2d\u6ca1\u6709\u7528\u8fc7\u7684\u6700\u957f\u94fe\uff08\u53ef\u4ee5\u662f\u7a7a\u94fe\uff0c\u4e5f\u5c31\u662f0\uff09\uff0c\u4f5c\u4e3a\u5411\u4e0a\u7684\u8d21\u732e\uff08\u5177\u4f53\u505a\u6cd5\u4e5f\u5c31\u662f\u8bb0\u4e00\u4e2a\u70b9\u6743\uff0c\u70b9\u6743\u4e5f\u5c31\u662f\u90a3\u4e2a\u6700\u957f\u94fe\u7684\u957f\u5ea6\uff09\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u6700\u4e0b\u9762\u90a3\u4e00\u5c42\u5df2\u7ecf\u6ca1\u6709\u610f\u4e49\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5339\u914d\u597d\u4e86\uff0c\u5e76\u4e14\u627e\u51fa\u4e86\u6700\u957f\u94fe\uff0c\u5176\u4ed6\u5df2\u7ecf\u5339\u914d\u7684\u8d5b\u9053\u6216\u8005\u6bd4\u6700\u957f\u94fe\u5c0f\u7684\u94fe\u5df2\u7ecf\u6ca1\u6709\u7528\u5904\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u770b\u4f5c\u628a\u8fd9\u4e00\u5c42\u5168\u90e8\u6d88\u6389\uff0c\u663e\u7136\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff08\u8fd9\u65f6\u5019\u7684\u6700\u957f\u94fe\u5df2\u7ecf\u88ab\u5f53\u4f5c\u70b9\u6743\u4e86\uff09\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u7528DFS\u7684\u65b9\u5f0f\uff0c\u4ece\u4e0b\u5f80\u4e0a\u628a\u6811\u4e0d\u505c\u7684\u201c\u6d88\u5c42\u201d\uff0c\u76f4\u81f3\u6ca1\u6709\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6700\u4e0b\u5c42\u89e3\u51b3\u5b8c\u6bd5\u4ee5\u540e\uff0c\u540e\u9762\u7684\u5c42\u7684\u94fe\u662f**\u8fb9\u6743+\u70b9\u6743**\uff0c\u8fd9\u624d\u662f\u6211\u4eec\u7684\u94fe\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u770b\u4f5c\u6700\u4e0b\u5c42\u7684\u70b9\u6743\u662f0\u3002\n\n\u5728\u5168\u5c40\u7684\u8bbe\u4e2a\u53d8\u91cfres\u8bb0\u5f55\u8fd8\u9700\u8981\u627e\u5230\u51e0\u6761\u8d5b\u9053\u3002\u5148\u8ba9res\u7b49\u4e8em\uff0c\u6bcf\u6b21\u5728\u5b50\u6811\u5339\u914d\u6210\u529f\uff0c\u5c31res--\uff0cDFS\u5168\u90e8\u7ed3\u675f\u7684\u65f6\u5019\u53ea\u8981\u5224\u65adres\u662f\u4e0d\u662f\u5c0f\u4e8e\u7b49\u4e8e0\u5c31\u77e5\u9053\u662f\u5426\u6210\u529f\u4e86\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\u5efa\u8bae\u770b\u4e00\u4e0b\u4ee3\u7801\u7684\u6ce8\u91caqwq\n\n------------\n\n\n# CODE\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nconst int MAXN = 5e4 + 5, MAXM = MAXN << 1;\nconst int INF = 0x7fffffff;\n\nint head[MAXM], nxt[MAXM], v[MAXM], w[MAXM], cnt;\n\nint n, m;\nint root;\n\ninline void Addline(int x, int y, int z)\n{\n    v[cnt] = y, w[cnt] = z;\n    nxt[cnt] = head[x], head[x] = cnt++;\n\n    return;\n}\n\nint dp[MAXN], tag[MAXN];//dp\u662f\u5411\u4e0a\u8d21\u732e\u7684\u6700\u957f\u94fe\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u8bf4\u7684\u70b9\u6743\nint que[MAXN], tail;\nint res;//\u8fd8\u9700\u8981\u7684\u8d5b\u9053\u6570\n\ninline void DFS(int x, int from, int lim)\n{\n    for (int i = head[x]; ~i; i = nxt[i])\n        if (v[i] != from)\n            DFS(v[i], x, lim);//\u5148\u4e0b\u53bbDP\u4e00\u8fb9\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u591a\u5f00\u6570\u7ec4\u505a\u540e\u9762\u7684\u8d2a\u5fc3\u4e86\n\n    tail = 0;\n    for (int i = head[x]; ~i; i = nxt[i])\n        if (v[i] != from)\n            que[++tail] = dp[v[i]] + w[i];//\u628a\u51e0\u6761\u94fe\u52a0\u8fdb\u961f\u5217\n\n    sort(que + 1, que + tail + 1);//\u6392\u5e8f\n\n    for (int i = tail; i >= 1 && que[i] >= lim; i--)\n        tail--, res--;//\u5148\u628a\u5df2\u7ecf\u80fd\u53d8\u6210\u8d5b\u9053\u7684\u8fb9\u76f4\u63a5\u53bb\u6389\uff0c\u4ed6\u4eec\u4e0d\u9700\u8981\u4e24\u4e24\u5339\u914d\n\n    for (int i = 1; i <= tail; i++)\n        if (tag[i] != x)//\u8fd9\u4e2a\u94fe\u6ca1\u6709\u88ab\u9009\u8fc7\n\t\t//\u8fd9\u91cc\u7684tag\u4e0d\u518d\u5b58True\u548cFalse\uff0c\u800c\u662f\u5b58\u5f53\u524d\u70b9\u7684\u7f16\u53f7\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u591a\u6b21\u6e05\u7a7a\u6570\u7ec4\uff0c\u800c\u4e14\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u91cd\u590d\uff08\u6bcf\u4e2a\u70b9\u53ea\u8bbf\u95ee\u4e00\u6b21\uff09\n        {\n            int l = i + 1, r = tail, pst = tail + 1;//\u4e8c\u5206\u53e6\u5916\u4e00\u6761\u94fe\u4f7f\u5f97\u80fd\u521a\u597d\u7ec4\u6210\u8d5b\u9053\n            while (l <= r)\n            {\n                int mid = ((l + r) >> 1);\n                if (que[i] + que[mid] >= lim)\n                    pst = mid, r = mid - 1;\n                else\n                    l = mid + 1;\n            }\n\n            while (tag[pst] == x && pst <= tail)//\u56e0\u4e3a\u6709\u53ef\u80fd\u5f53\u524d\u4e8c\u5206\u5230\u7684\u662f\u5df2\u7ecf\u88ab\u9009\u8fc7\u7684\u94fe\uff0c\u90a3\u4e48\u6211\u4eec\u8d2a\u5fc3\u5f80\u540e\u627e\u4e00\u6761\u94fe\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u662f\u6700\u4f18\u7684\n                pst++;\n\n            if (pst <= tail)//\u5982\u679c\u6709\u89c2\u5bdf\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0tail+1\u662f\u6211\u4eec\u7684\u6ea2\u51fa\u533a\uff0c\u8fd9\u91cc\u5224\u65ad\u4e00\u4e0b\n                tag[i] = tag[pst] = x, res--;\n        }\n\n    dp[x] = 0;\n    for (int i = tail; i >= 1; i--)//\u627e\u5230\u5f53\u524d\u6ca1\u6709\u9009\u8fc7\u7684\u6700\u957f\u94fe\uff0c\u5411\u4e0a\u4f20\u9012\uff08\u5176\u5b9e\u4e5f\u5c31\u662f\u628a\u94fe\u770b\u6210\u662f\u5f53\u524d\u70b9\u5bf9\u4e0a\u9762\u70b9\u7684\u8d21\u732e\uff09\n        if (tag[i] != x)\n        {\n            dp[x] = que[i];\n            break;\n        }\n\n    return;\n}\n\nsigned main(void)\n{\n    memset(head, -1, sizeof head);\n\n    cin >> n >> m;\n    for (int i = 1, x, y, z; i < n; i++)\n    {\n        scanf(\"%d %d %d\", &x, &y, &z);\n        Addline(x, y, z), Addline(y, x, z);\n    }\n\n    root = rand() % n + 1;//\u968f\u673a\u9009\u6839\n\n    int l = 0, r = INF, ans = 0;\n    while (l <= r)//\u4e8c\u5206\u7b54\u6848\n    {\n        int mid = ((l + r) >> 1);\n        res = m;\n\n        memset(tag, false, sizeof tag);\n\n        DFS(root, 0, mid);\n        if (res <= 0)\n            ans = mid, l = mid + 1;\n        else\n            r = mid - 1;\n    }\n\n    cout << ans << endl;\n\n    return 0;\n}\n```",
        "postTime": 1542249350,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u9996\u53d1\u4e8e [\u4e2a\u4eba\u535a\u5ba2](https://zepto.page/post/noip-2018-track)\u3002\n\n### \u601d\u8def\n\n\u6211\u5c31\u987a\u7740\u6211\u8003\u573a\u4e0a\u7684\u601d\u8def\uff0c\u628a\u6240\u6709\u90e8\u5206\u5206\u90fd\u8bb2\u4e00\u8bb2\u5427\u3002\n\n\u9996\u5148\u5bf9\u4e8e $m=1$ \u7684\u6570\u636e\uff0c\u6211\u4eec\u663e\u7136\u53ea\u8981\u627e\u5230\u76f4\u5f84\u957f\u5ea6\u5c31\u884c\uff1b\n\n\u5bf9\u4e8e\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff0c\u4e8c\u5206\u7b54\u6848\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u4e8c\u5206\u51fa\u6765\u7684 $mid$\uff0c\u4ece\u6839\u5f00\u59cb\u8d2a\u5fc3\u9009\u53d6\u4e00\u6bb5\u8fb9\uff0c\u7d2f\u8ba1\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e $mid$ \u7684\u65f6\u5019\u5c31\u8ba1\u5165\u7b54\u6848\uff0c\u91cd\u65b0\u5f00\u59cb\u5bfb\u627e\u4e0b\u4e00\u6bb5\uff0c\u5f97\u51fa\u5bf9\u4e8e $mid$ \u6700\u5927\u7684\u7b54\u6848\uff0c\u5224\u65ad\u5b83\u662f\u5426\u5927\u4e8e $m$\uff1b\n\n\u5bf9\u4e8e\u83ca\u82b1\u56fe\uff0c\u7531\u4e8e\u8def\u5f84\u6700\u591a\u7ecf\u8fc7\u4e24\u6761\u8fb9\uff0c\u6211\u4eec\u5b9e\u8d28\u4e0a\u662f\u8981\u5728 $n-1$ \u6761\u8fb9\u4e2d\u9009\u4e00\u5171 $m$ \u6b21\uff0c\u6bcf\u6b21\u9009\u51fa\u4e00\u6761\u72ec\u7acb\u7684\u8fb9\uff0c\u6216\u8005\u4e00\u5bf9\u8fb9\uff0c\u4f7f\u5f97\u6700\u7ec8\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6 / \u6bcf\u5bf9\u8fb9\u7684\u957f\u5ea6\u548c\u5c3d\u91cf\u5927\u3002\u5bf9\u4e8e\u6bcf\u6b21\u4e8c\u5206\u51fa\u6765\u7684  $mid$\uff0c\u957f\u5ea6\u5927\u4e8e $mid$ \u7684\u8fb9\u72ec\u7acb\u5730\u9009\u51fa\uff0c\u800c\u5c0f\u4e8e $mid$ \u7684\u8fb9\u5c1d\u8bd5\u4e00\u957f\u4e00\u77ed\u4e24\u4e24\u914d\u5bf9\uff0c\u7528\u53cc\u6307\u9488\u5728\u6392\u8fc7\u5e8f\u7684\u957f\u5ea6\u6570\u636e\u4e2d\u626b\u63cf\u4e00\u904d\uff0c\u5f97\u51fa\u5bf9\u4e8e $mid$ \u6700\u5927\u7684\u7b54\u6848\uff0c\u5224\u65ad\u5b83\u662f\u5426\u5927\u4e8e $m$\uff1b\n\n\u5bf9\u4e8e \u201c\u5206\u652f\u4e0d\u8d85\u8fc7 3\u201d \u7684\u56fe\uff0c\u4e5f\u5c31\u662f\u9664\u6839\u8282\u70b9\u4e4b\u5916\uff0c\u6bcf\u4e2a\u70b9\u53ea\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u540c\u6837\u6211\u4eec\u4e8c\u5206\u7b54\u6848\u3002\u9996\u5148\u5b9a\u4e49\u51e0\u4e2a\u6982\u5ff5\uff0c\u6211\u4eec\u79f0\u4ece\u4e00\u6761\u8d5b\u9053\u4e24\u7aef\u70b9 $LCA$ \u5f00\u59cb\u7684\uff0c\u5230\u4e00\u4e2a\u7aef\u70b9\u7ed3\u675f\u7684\u94fe\u4e3a\u5bf9\u5e94\u8d5b\u9053\u7684\u534a\u94fe\uff0c\u4ee4 $f_i$ \u4e3a\u4ee5 $i$ \u4e3a $LCA$ \u7684\u6700\u4f18\u534a\u94fe\u957f\u5ea6\u3002\u6682\u65f6\u4e0d\u8003\u8651\u6839\u8282\u70b9\uff0c\u5982\u679c $i$ \u53ea\u6709\u4e00\u4e2a\u513f\u5b50 $v$\uff0c\u82e5 $f_v + l_i \\geq mid$\uff0c\u76f4\u63a5\u5c06 $f_v + l_i$ \u8ba1\u5165\u7b54\u6848\uff0c\u5426\u5219\uff0c$f_i = f_v + l_i$\uff1b\u5982\u679c $i$ \u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u5982\u679c\u5b83\u4eec\u53ef\u4ee5\u76f4\u63a5\u5355\u72ec\u8ba1\u5165\u7b54\u6848\u5219\u76f4\u63a5\u8ba1\u5165\uff0c\u5426\u5219\u8003\u8651\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u513f\u5b50\u7275\u5f15\u7684\u4e24\u6761\u534a\u94fe\u5408\u5e76\uff0c\u5408\u5e76\u540e\u957f\u5ea6\u5927\u4e8e $mid$ \u5219\u76f4\u63a5\u8ba1\u5165\u7b54\u6848\uff0c\u5426\u5219\u9009\u53d6\u6700\u957f\u7684\u4e00\u6bb5\u8f6c\u79fb\u5230 $f_i$\uff0c\u5bf9\u4e8e\u53ef\u80fd\u6709\u4e09\u4e2a\u513f\u5b50\u7684\u6839\u8282\u70b9\uff0c\u9075\u5faa\u7684\u539f\u5219\u540c\u6837\u662f\u5c3d\u91cf\u72ec\u7acb\u9009\u53d6\u4e24\u4e2a\u513f\u5b50\uff0c\u5426\u5219\u5c1d\u8bd5\u5408\u5e76\u4e24\u6761\u534a\u94fe\u8ba1\u5165\u7b54\u6848\uff1b\n\n\u5982\u679c\u6211\u4eec\u7ed3\u5408\u83ca\u82b1\u56fe\u548c \u201c\u5206\u652f\u4e0d\u8d85\u8fc7 3\u201d \u7684\u56fe\u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u641e\u5b9a 100% \u7684\u6570\u636e\u3002\u7ee7\u627f\u4e0a\u9762\u534a\u94fe\u548c $f_i$ \u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u8981\u505a\u7684\u662f\u5728\u4f7f\u6700\u591a\u7684\u513f\u5b50\u5bf9\u7b54\u6848\u505a\u51fa\u8d21\u732e\u7684\u540c\u65f6\uff0c\u5c3d\u91cf\u5927\u5730\u5c06 $f_{son}$ \u7684\u503c\u8f6c\u79fb\u7ed9 $f_i$\u3002\u56e0\u4e3a $f$ \u7684\u4e00\u4e2a\u503c\u6700\u591a\u5bf9\u7b54\u6848\u4ea7\u751f 1 \u7684\u8d21\u732e\uff0c\u6240\u4ee5\u4f7f\u513f\u5b50\u505a\u51fa\u66f4\u5c11\u8d21\u732e\uff0c\u8f6c\u79fb\u66f4\u5927\u7684 $f_i$ \u4e0d\u53ef\u80fd\u4f7f\u7b54\u6848\u53d8\u4f18\uff0c\u6211\u4eec\u7684\u8d2a\u5fc3\u7b2c\u4e00\u5173\u952e\u5b57\u5c31\u53ef\u4ee5\u8bbe\u4e3a\u4f7f\u513f\u5b50\u505a\u51fa\u6700\u5927\u7684\u8d21\u732e\u3002\u5728\u83ca\u82b1\u56fe\u7684\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u53ea\u6ee1\u8db3\u4e86\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 $f_i$ \u8fdb\u4e00\u6b65\u7684\u8f6c\u79fb\uff0c\u800c\u6211\u8ba4\u4e3a\u8fd9\u4e00\u70b9\u6b63\u662f A \u6389\u672c\u9898\u7684\u91cd\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u5728\u513f\u5b50\u7684 $f$ \u503c\u4e2d\uff0c\u9009\u51fa\u4e00\u4e2a\u6700\u4f18\u7684\u8f6c\u79fb\u81f3 $f_i$\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684 $f$ \u503c\u7684\u5408\u6cd5\u5339\u914d\u6700\u591a\u3002\u540c\u6837\u53ef\u4ee5\u4e8c\u5206\u8f6c\u79fb\u81f3 $f_i$ \u7684\u513f\u5b50\uff0c\u5269\u4e0b\u7684\u548c\u83ca\u82b1\u56fe\u7684\u505a\u6cd5\u76f8\u540c\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\u6b63\u89e3\uff1a\u9996\u5148\u4e8c\u5206\u7b54\u6848\uff0c\u8d2a\u5fc3\u8ba1\u7b97\u5bf9\u4e8e $mid$ \u7684\u6700\u5927\u53ef\u80fd\u7b54\u6848\uff0c\u5224\u65ad\u5b83\u548c $m$ \u7684\u5927\u5c0f\u3002\u6211\u4eec\u79f0\u4ece\u4e00\u6761\u8d5b\u9053\u4e24\u7aef\u70b9 $LCA$ \u5f00\u59cb\u7684\uff0c\u5230\u4e00\u4e2a\u7aef\u70b9\u7ed3\u675f\u7684\u94fe\u4e3a\u5bf9\u5e94\u8d5b\u9053\u7684\u534a\u94fe\uff0c\u4ee4 $f_i$ \u4e3a\u4ee5 $i$ \u4e3a $LCA$ \u7684\u6700\u4f18\u534a\u94fe\u957f\u5ea6\u3002\u8981\u6c42\u5bf9\u4e8e $i$ \u6240\u6709\u513f\u5b50\u7684 $f$\uff0c\u5728\u4fdd\u8bc1\u4e24\u4e24\u5339\u914d\u6570\uff08\u4e24\u4e2a\u534a\u94fe\u5408\u6210\u4e00\u6761\u8d5b\u9053\uff09\u6700\u591a\u7684\u540c\u65f6\uff0c\u5411 $f_i$ \u8f6c\u79fb\u5c3d\u53ef\u80fd\u5927\u7684\u503c\u3002\u4e8e\u662f\u5c06\u6240\u6709 $f$ \u6392\u5e8f\u8d2a\u5fc3\u627e\u5230\u6700\u5927\u5339\u914d\u6570\uff0c\u7136\u540e\uff0c\u4e8c\u5206\u627e\u5230\u8f6c\u79fb\u7ed9 $f_i$ \u7684\u503c\u3002\n\n\u590d\u6742\u5ea6\u4e0d\u592a\u4f1a\u8bc1\uff0c\u5e94\u8be5\u63a5\u8fd1 $\\Theta(n\\log n \\log \\dfrac{\\sum{l_i}}{m})$ \u5427\u3002\n\n### \u4ee3\u7801\n\n\n```cpp\n#include <bits/stdc++.h>\n#define mid ((l+r)>>1)\n#define ll long long\n#define maxn 50010\nusing namespace std;\nstruct Edge{\n\tint to,next,val;\n\tEdge(int a=0,int b=0,int c=0){\n\t\tto=a,next=b,val=c;\n\t}\n}l[maxn<<1];\nint head[maxn],cnt,n,m;\nvector<int> son[maxn];\nll f[maxn];\nint subans[maxn];\nvoid Add(int a,int b,int c){\n\tl[++cnt]=Edge(b,head[a],c);\n\thead[a]=cnt;\n}\nint check(int u,int pos,int tot,ll x){\n\tint res=0,l=0;\n\tfor (register int r=tot-1;r;--r){\n\t\tr-=r==pos;\n\t\twhile (l<r&&son[u][l]+son[u][r]<x) ++l;\n\t\tl+=l==pos;\n\t\tif (l>=r) break;\n\t\t++res;++l;\n\t}\n\treturn res;\n}\nvoid Dfs(int u,int fa,ll x){\n\tf[u]=subans[u]=0;\n\tson[u].clear();\n\tfor (register int i=head[u];i;i=l[i].next){\n\t\tint v=l[i].to;\n\t\tif (v==fa) continue;\n\t\tDfs(v,u,x);\n\t\tf[v]+=l[i].val;\n\t\tif (f[v]>=x) subans[u]++;\n       \t// \u5982\u679c\u5df2\u7ecf\u5927\u4e8e x \u5219\u76f4\u63a5\u8ba1\u5165\u7b54\u6848\n\t\telse son[u].push_back(f[v]);\n\t}\n\tint tot=son[u].size();\n\tsort(son[u].begin(),son[u].end());\n\tint l=0,r=tot,sub=0,res;\n\tfor (register int r=tot-1;r;--r){\n\t\twhile (l<r&&son[u][l]+son[u][r]<x) ++l;\n\t\tif (l>=r) break;\n\t\t++sub;++l;\n\t}\n\tsubans[u]+=sub;\n    // \u8d2a\u5fc3\u627e\u51fa\u6700\u5927\u7684\u5339\u914d\u6570\uff08\u4e24\u4e2a\u534a\u94fe\u5408\u6210\u4e00\u6761\u8d5b\u9053\uff09\n\tif (sub*2==tot) return;\n\tl=0,r=tot-1;\n\twhile(l<=r){\n\t\tint tem=check(u,mid,tot,x);\n\t\tif (tem==sub) res=mid,l=mid+1;\n\t\telse r=mid-1;\n\t}\n    // \u4e8c\u5206\u627e\u5230\u6ee1\u8db3\u6700\u5927\u5339\u914d\u7684\uff0c\u53ef\u4ee5\u8f6c\u79fb\u7ed9 f_u \u7684\u6700\u5927\u503c\n\tf[u]=son[u][res];\n}\nbool check(ll x){\n\tint tem=0;\n\tDfs(1,0,x);\n\tfor (register int i=1;i<=n;++i)\n\t\ttem+=subans[i];\n\treturn tem>=m;\n}\nint main(){\n\tll l=0,r=0,ans,c;\n\tscanf(\"%d%d\",&n,&m);\n\tfor (register int i=1,a,b;i<n;++i)\n\t\tscanf(\"%d%d%lld\",&a,&b,&c),\n\t\tAdd(a,b,c),Add(b,a,c),r+=c;\n\tr/=(ll)m;\n    // \u5728\u8fd9\u91cc\u4e8c\u5206\u7b54\u6848\n\twhile(l<=r){\n\t\tif (check(mid)) ans=mid,l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1542093695,
        "uid": 37158,
        "name": "XG_Zepto",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "# \u6d1b\u8c37P5021 [NOIP2018] \u8d5b\u9053\u4fee\u5efa\r\n\r\nnoip2018 day1t3\uff0c\u542c\u8bf4\u5927\u4f17\u520655\u5206\u3002\u6811\u7684\u76f4\u5f84+\u94fe\u4e0a\u4e8c\u5206\uff0c\u5f88\u597d\u6253\u7684\u6837\u5b50\u3002\r\n\r\n---\r\n\r\n\u6700\u5c0f\u503c\u6700\u5927\uff0c\u663e\u7136\u662f\u4e8c\u5206\u8fd9\u4e2a\u6700\u5c0f\u503c$\\lim$\r\n\r\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9$u$\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e2a\u8fde\u63a5\u5230$u$\u7684\u8d5b\u9053\u7684\u957f\u5ea6$val_i$\uff0c\u90a3\u4e48\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\u60c5\u51b5\u8fdb\u884c\u8ba8\u8bba\uff1a\r\n\r\n$\\begin{cases} val_i+dis \\geq lim \\text{\u76f4\u63a5\u7ed9\u7b54\u6848+1} \\\\ val_i+dis< lim \\text{\u52a0\u5165\u5230\\text{multiset}\u4e2d\u8fdb\u884c\u7ef4\u62a4}\\end{cases}$\r\n\r\n\u81f3\u4e8e\u5728$\\text{multiset}$\u4e2d\u5982\u4f55\u7ef4\u62a4\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5728$\\text{multiset}$\u4e2d\u627e\u5230\u4e00\u4e2a\u53ef\u4ee5\u4e0e\u5f53\u524d\u8fd9\u4e2a\u4e1c\u897f\u52a0\u8d77\u6765$\\geq lim$\u7684\u6700\u5c0f\u5143\u7d20\uff0c\u5220\u53bb\u8fd9\u4e24\u4e2a\u5143\u7d20\u5c31\u53ef\u4ee5\u8fbe\u5230\u6700\u4f18\u3002\r\n\r\n\u81f3\u4e8e\u4e8c\u5206\u7684\u8fb9\u754c\uff0c\u53ef\u4ee5\u5199\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u4e4b\u548c\uff0c\u5373$\\sum_{i=1}^n l_i$\uff0c\u4e5f\u53ef\u4ee5\u5199\u4e00\u904d\u6811\u7684\u76f4\u5f84\uff0c\u518d\u4ee5\u7ed3\u679c\u4f5c\u4e3a\u4e8c\u5206\u7684\u4e0a\u754c\uff0c\u5f53\u7136\u6700\u574f\u60c5\u51b5\u4e0b\u8fd8\u662f$\\sum_{i=1}^n l_i$\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709\u4ec0\u4e48\u5375\u7528\u3002\r\n\r\n\u8fd9\u91cc\u6211\u56e0\u4e3a\u4e0d\u4f1a\u6811\u5f62dp\u6c42\u6811\u7684\u76f4\u5f84\uff0c\u5199\u4e86\u4e24\u904dbfs\u7684\u505a\u6cd5\u3002\r\n\r\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(n \\log n \\log \\sum_{i=1}^n l_i)$\u3002\u56e0\u4e3a\u6211\u6bd4\u8f83\u83dc\u4e0d\u4f1a$O(n \\log \\sum_{i=1}^n l_i)$\u7684\u505a\u6cd5\uff0c\u6c42\u5404\u4f4d\u5927\u4f6c\u4e0d\u8981blame\u6211\u554aQAQ\r\n\r\ncode\uff1a\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <cstring>\r\n#include <cctype>\r\n#include <vector>\r\n#include <queue>\r\n#include <set>\r\n\r\nusing namespace std;\r\n\r\ninline int read()\r\n{\r\n\tint x=0,f=1;char ch=getchar();\r\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\r\n\twhile (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\r\n\treturn x*f;\r\n}\r\n\r\nint n,m;\r\n\r\nvector <int> G[50050],W[50050]; \r\n\r\nlong long dis[50050];\r\n\r\nbool vis[50050];\r\n\r\nlong long upper_dis=0;\r\n\r\ninline void Get_MaxDis()\r\n{\r\n\t/*\r\n\t\u6811\u7684\u76f4\u5f84\u7684\u4e24\u904dbfs\u6c42\u6cd5\u3002\r\n\t\u505a\u6cd5\u4e3a\uff1a\u4efb\u610f\u9009\u53d6\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u627e\u5230\u8ddd\u79bb\u8fd9\u4e2a\u70b9\u6700\u8fdc\u7684\u70b9u\u3002\r\n\t\u7136\u540e\u4ee5u\u4e3a\u8d77\u70b9\uff0c\u627e\u5230\u8ddd\u79bbu\u6700\u8fdc\u7684\u70b9\u3002\r\n\tu\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\uff0c\u5c31\u662f\u6811\u7684\u76f4\u5f84\u3002\r\n\t\u65f6\u95f4\u590d\u6742\u5ea6O(n) \r\n\t*/ \r\n\tqueue <int> q;\r\n\tq.push(1);\r\n\tvis[1]=true;\r\n\twhile (!q.empty())\r\n\t{\r\n\t\tint u=q.front();\r\n\t\tq.pop();\r\n\t\tfor (int i=0;i<G[u].size();i++)\r\n\t\t{\r\n\t\t\tint v=G[u][i];\r\n\t\t\tif (!vis[v])\r\n\t\t\t{\r\n\t\t\t\tvis[v]=true;\r\n\t\t\t\tq.push(v);\r\n\t\t\t\tdis[v]=dis[u]+W[u][i];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tint st=0;\r\n\tlong long maxd=0;\r\n\tfor (int i=1;i<=n;i++)\r\n\t\tif (dis[i]>maxd)\r\n\t\t{\r\n\t\t\tst=i;\r\n\t\t\tmaxd=dis[i];\r\n\t\t}\r\n\tq.push(st);\r\n\tmemset(dis,0,sizeof(dis));\r\n\tmemset(vis,0,sizeof(vis));\r\n\tvis[st]=true;\r\n\twhile (!q.empty())\r\n\t{\r\n\t\tint u=q.front();\r\n\t\tq.pop();\r\n\t\tfor (int i=0;i<G[u].size();i++)\r\n\t\t{\r\n\t\t\tint v=G[u][i];\r\n\t\t\tif (!vis[v])\r\n\t\t\t{\r\n\t\t\t\tvis[v]=true;\r\n\t\t\t\tq.push(v);\r\n\t\t\t\tdis[v]=dis[u]+W[u][i];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tmaxd=0;\r\n\tfor (int i=1;i<=n;i++)\r\n\t\tmaxd=max(maxd,dis[i]);\r\n\tupper_dis=maxd;\r\n}\r\n\r\n/*\r\n\u7b2c\u4e00\u79cd\u505a\u6cd5\r\n\u672c\u4eba\u58f0\u660e\u4e00\u4e0b\u4ee3\u7801\u5b9e\u73b0\u7ec6\u8282\u53c2\u8003\u4e86Owen_codeisking\u5927\u4f6c\u7684\u505a\u6cd5\r\n*/ \r\n\r\nnamespace solve1\r\n{\r\n\tmultiset <long long> s[50050];\r\n\t\r\n\tlong long ans=0;\r\n\t\r\n\tinline long long dfs(int u,int fa,long long lim)\r\n\t{\r\n\t\ts[u].clear();\r\n\t\tlong long val=0;\r\n\t\tfor (int i=0;i<G[u].size();i++)\r\n\t\t{\r\n\t\t\tint v=G[u][i];\r\n\t\t\tif (v!=fa)\r\n\t\t\t{\r\n\t\t\t\tval=dfs(v,u,lim)+W[u][i];\r\n\t\t\t\tif (val>=lim)\r\n\t\t\t\t\tans++;\r\n\t\t\t\telse\r\n\t\t\t\t\ts[u].insert(val);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlong long maxd=0;\r\n\t\twhile (!s[u].empty())\r\n\t\t{\r\n\t\t\tlong long res=*s[u].begin(); \r\n\t\t\tif (s[u].size()==1)\r\n\t\t\t\treturn max(maxd,res);\r\n\t\t\tmultiset <long long> :: iterator it=s[u].lower_bound(lim-res);\r\n\t\t\tif (it==s[u].begin() && s[u].count(*it)==1)\r\n\t\t\t\tit++;\r\n\t\t\tif (it==s[u].end())\r\n\t\t\t{\r\n\t\t\t\tmaxd=max(maxd,res);\r\n\t\t\t\ts[u].erase(s[u].find(res));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tans++;\r\n\t\t\t\ts[u].erase(s[u].find(*it));\r\n\t\t\t\ts[u].erase(s[u].find(res));\r\n\t\t\t\t//\u76f8\u5f53\u4e8e\u628a\u4e24\u6761\u94fe\u62fc\u63a5\u8d77\u6765\u5f62\u6210\u4e00\u6761\u94fe \r\n\t\t\t}\r\n\t\t}\r\n\t\treturn maxd;\r\n\t}\r\n\t\r\n\tlong long maxd=0;\r\n\t\r\n\tinline bool check(long long lim)\r\n\t{\r\n\t\tans=0;\r\n\t\tdfs(1,0,lim);\r\n\t\treturn ans>=m;\r\n\t}\r\n\t\r\n\tinline long long main()\r\n\t{\r\n\t\tlong long left=1,right=upper_dis,mid;\r\n\t\twhile (left<right)\r\n\t\t{\r\n\t\t\tmid=(left+right+1)>>1;\r\n\t\t\tif (check(mid))\r\n\t\t\t\tleft=mid;\r\n\t\t\telse\r\n\t\t\t\tright=mid-1;\r\n\t\t}\r\n\t\treturn left;\r\n\t}\r\n}\r\n\r\n/*\r\n\u672c\u9898\u7684\u7b2c\u4e8c\u79cd\u505a\u6cd5\r\n\u672c\u8d28\u4e0a\u548c\u7b2c\u4e00\u79cd\u505a\u6cd5\u662f\u7c7b\u4f3c\u7684\r\n\u53ea\u4e0d\u8fc7\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u66f4\u4f4e\uff0c\r\n\u5185\u5b58\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u5f53\u6bd4\u7b2c\u4e00\u7bc7\u597d\u4e00\u4e9b \r\n\u554a\u8fd8\u6709\u8fd9\u4e2a\u505a\u6cd5\u662f\u6211\u4eec\u8001\u5e08\u4e0a\u8bfe\u6240\u8bb2\u7684\r\n\u5e0c\u671b\u4e0d\u4f1a\u518d\u6709\u4ec0\u4e48\u5947\u602a\u7684\u91cd\u590d\u4e86QAQ \r\n*/ \r\n\r\nnamespace solve2\r\n{\r\n\tinline long long dfs(int u,int fa,long long &len,long long lim)\r\n\t{\r\n\t\tint ans=0;\r\n\t\tmultiset <long long> s;\r\n\t\tfor (int i=0;i<G[u].size();i++)\r\n\t\t{\r\n\t\t\tint v=G[u][i];\r\n\t\t\tif (v!=fa)\r\n\t\t\t{\r\n\t\t\t\tlong long res;\r\n\t\t\t\tans+=dfs(v,u,res,lim);\r\n\t\t\t\tres+=W[u][i];\r\n\t\t\t\tif (res>=lim)\r\n\t\t\t\t\tans++;\r\n\t\t\t\telse\r\n\t\t\t\t\ts.insert(res);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlen=0;\r\n\t\twhile (!s.empty())\r\n\t\t{\r\n\t\t\tlong long res=*s.begin();\r\n\t\t\ts.erase(s.begin());\r\n\t\t\tmultiset <long long> :: iterator it=s.lower_bound(lim-res);\r\n\t\t\tif (it!=s.end())\r\n\t\t\t{\r\n\t\t\t\t//\u5982\u679c\u627e\u5230\u4e86\u5c31\u8bf4\u660e\u53ef\u4ee5\u62fc\u63a5\u8d77\u6765\r\n\t\t\t\t//\u5426\u5219\u5c31\u8981\u53bb\u66f4\u65b0\u6700\u957f\u957f\u5ea6\u3002 \r\n\t\t\t\ts.erase(it);\r\n\t\t\t\tans++;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tlen=max(len,res);\r\n\t\t}\r\n\t\treturn ans;\r\n\t}\r\n\t\r\n\tinline long long main()\r\n\t{\r\n\t\tlong long left=0,right=upper_dis+1,mid;\r\n\t\twhile (right-left>1)\r\n\t\t{\r\n\t\t\tmid=(left+right)>>1;\r\n\t\t\tlong long res;\r\n\t\t\tif (dfs(1,0,res,mid)>=m)\r\n\t\t\t\tleft=mid;\r\n\t\t\telse\r\n\t\t\t\tright=mid;\r\n\t\t}\r\n\t\treturn left;\r\n\t}\r\n}\r\n\r\nint main()\r\n{\r\n\tn=read(),m=read();\r\n\tfor (int i=1;i<n;i++)\r\n\t{\r\n\t\tint u=read(),v=read(),d=read();\r\n\t\tG[u].push_back(v);\r\n\t\tG[v].push_back(u);\r\n\t\tW[u].push_back(d);\r\n\t\tW[v].push_back(d);\r\n\t}\r\n\tGet_MaxDis();\r\n\tcout << solve2::main() << endl;\r\n\treturn 0;\r\n}\r\n\r\n\r\n---\r\n\r\n\u4e0b\u65b9\u4e3a\u4e22\u4eba\u73b0\u573a\uff1a\r\n\r\n\u539f\u9898\u89e3\u6709\u8fd9\u4e48\u4e00\u53e5\u8bdd\uff1a\u53e6\u5916\u8865\u5145\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff1a$\\sum_{i=1}^n l_i$\u662f$5 \\times 10^9 > \\text{MAXINT}$\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5f00$\\text{long long}$\r\n\r\n\u7136\u540e\uff1a\r\n\r\n![](https://cdn.luogu.com.cn/upload/pic/44462.png)",
        "postTime": 1543039587,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "$\\tiny\\text{\u4f3c\u4e4e\u5de8\u4f6c\u90fd\u6ca1\u6709\u7ffb\u8bd1\u9898\u76ee\uff0c\u5176\u5b9e\u90e8\u5206\u96be\u5ea6\u5728\u4e8e\u9898\u76ee\u7ffb\u8bd1\uff0c\u6240\u4ee5:}$\n\n## \u5148\u7ffb\u8bd1\u4e0b\u672c\u9898\u7684\u9898\u610f\uff1a\n\n* $n$\u4e2a\u70b9\uff0c$n-1$\u6761\u8fb9\uff0c\u4efb\u610f\u4e24\u70b9\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff0c\u6bcf\u6761\u9053\u8def\u4ec5\u4ece\u5c5e\u4e8e\u4e00\u6761\u201c\u8d5b\u9053\u201d\u3002\n\n\u773c\u719f\uff1f$\\color{blue}\\text{\u5176\u5b9e\u5c31\u662f\u4e00\u68f5\u6811\u3002}$\n\n* \u8981\u5efa$m$\u6761\u201c\u8d5b\u9053\u201d\uff0c\u8d5b\u9053\u65e0\u73af\uff0c**\u6700\u5927\u5316**\u6700\u77ed\u9053\u8def\u3002\n\n\u5bf9\u4e86\uff01$\\color{red}\\text{\u5c31\u662f\u4e8c\u5206\u7b54\u6848\uff01}$\n\n\u90a3\u4e48\u6574\u9053\u9898\u7ffb\u8bd1\u51fa\u6765\u5c31\u5f88\u7b80\u6d01\u4e86\uff1a\n\n* \u7ed9\u51fa\u6709$n$\u4e2a\u8282\u70b9\u7684\u4e00\u68f5\u6811\u7684\u4fe1\u606f\uff0c\u4ece\u4e2d\u9009\u51fa$m$\u6761\u94fe\uff0c\u6ee1\u8db3\u94fe\u4e4b\u95f4\u4e92\u4e0d\u76f8\u4ea4\uff0c\u5e76\u6700\u5927\u5316\u6700\u77ed\u94fe\u957f\u3002\n\n---\n\n\u8fdb\u5165\u4e8c\u5206\u524d\uff0c\u5148\u60f3\u60f3\u4e8c\u5206\u4ec0\u4e48\uff0c\u4e8c\u5206\u6240\u9700\u8981\u7684\u4e0a\u754c\u5728\u54ea\u3002\n\n* \u4e8c\u5206\u4ec0\u4e48\uff1f\u660e\u663e\uff1a\u4e8c\u5206\u6700\u5c0f\u94fe\u957f\u3002\n\n* \u4e8c\u5206\u4e0a\u754c\uff1f\u660e\u663e\uff1a\u6811\u7684\u76f4\u5f84\u3002[(\u6811\u7684\u76f4\u5f84\u7684\u6982\u5ff5)](https://firstfan.blog.luogu.org/post-xue-xi-ji-lu-dong-tai-gui-hua)\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6811\u5f62$DP$\u4e00\u6b21\u6c42\u51fa\u6811\u7684\u76f4\u5f84\u3002\n\n\u6bd4\u5982\u6211\u4eec\u62ff$Sample\\ 2$\u6765\u8bb2\uff1a($len$\u662f\u8fb9\u957f\uff09\n\n![](https://i.loli.net/2019/04/09/5cacb4ae5237f.png)\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u68f5\u6811\u88ab\u5207\u6210\u4e86$3$\u6761\u65e0\u4ea4\u96c6\u7684\u94fe\uff0c\u5176\u4e2d\u6700\u77ed\u94fe\u662f$1->2->7$\uff0c\u5b83\u7684\u957f\u5ea6\u662f$15$\uff0c\u6b64\u65f6\u6700\u5927\u5316\u3002\n\n\u8fd9\u68f5\u6811\u7684\u76f4\u5f84\u662f$7->2->3->4->5$\u957f\u5ea6\u4e3a$27$\uff0c\u90a3\u4e48\u4e8c\u5206\u6700\u77ed\u8fb9\u7684\u957f\u5ea6\u5c31\u597d\u4e86\u3002\n\n* $Check()$\u600e\u4e48\u5199\uff1f\n\n\u56de\u5230\u8fd9\u5e45\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5bf9\u4e8e\u6bcf\u6761\u94fe\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5176\u4e0a\u4e00\u4e2a\u70b9\uff08\u4ee5\u4e0b\u7b80\u79f0**\u7279\u5f81\u70b9**\uff09\uff0c\u4f7f\u5f97\u6b64**\u94fe**\u4e0e\u8be5\u70b9\u7684**\u4e0a\u65b9\u6811**\u65e0\u4ea4\u96c6\u3002\u5373\u662f\u8bf4\uff0c\u8be5\u94fe\u4e3a**\u7279\u5f81\u70b9\u5b50\u6811\u7684\u5b50\u96c6**\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e0a\u56fe\uff0c\u7279\u5f81\u70b9\u5206\u522b\u4e3a\uff08\u6309\u989c\u8272\uff09\uff1a$\\color{red}\\text{1}$,$\\color{lime}\\text{2}$,$\\color{darkblue}\\text{4}$\n\n\u4e0b\u9762\u662f~~\u5e9f\u8bdd~~\u65f6\u95f4\uff1a\n\n\u5982\u679c\u4e00\u4e2a\u94fe\uff0c\u5b83\u7ecf\u8fc7\u4e86\u7ed3\u70b9$i$\u7684**\u7236\u7ed3\u70b9**\uff0c\u540c\u65f6\u5305\u542b\u4e86$i$**\u5230\u5b50\u7ed3\u70b9\u7684\u67d0\u6761\u8fb9**\uff0c\u90a3\u4e48\u5b83\u53ea\u80fd\u5305\u542b$i$\u5230\u6240\u6709\u5b50\u7ed3\u70b9\u7684\u8fb9**\u5f53\u4e2d\u7684\u4e00\u6761**\u3002\n\n\u8fd9\u53e5~~\u5e9f\u8bdd~~\u63a8\u5e7f\u4e00\u4e0b\u7684\u8bdd\u5c31\u5f88\u6709\u7528\u4e86\uff1a\n\n\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9$i$\u53ca\u5176\u5b50\u8282\u70b9$j,k$\u4ee5\u53ca\u5176\u4e2d\u7684\u4e00\u6761\u94fe$i->j$\uff0c\u6709$3$\u79cd\u60c5\u51b5\u9700\u8981\u8ba8\u8bba\uff1a(\u8bbe$i$\u7684\u7236\u7ed3\u70b9\u4e3a$f_i$)\n\n* \u5f03\u7f6e\n\n* \u4f7f\u7528\u4e3a$j->i->k$\u7684\u94fe`\uff08\u513f\u5b50\u627e\u7236\u4eb2\u8bf4\u53e6\u5916\u4e00\u4e2a\u513f\u5b50\u60f9\u7978\uff09`\n\n* \u4f7f\u7528\u4e3a$f_i->i->j$\u7684\u94fe\n\n\u90a3\u4e48\u5206\u7c7b\u5c31\u5f88\u7b80\u5355\u4e86\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9$i$\u8fdb\u884c\u8fde\u8fb9\u7684\u5c1d\u8bd5\uff08\u8fde\u4e00\u4e2a\u6216\u4e24\u4e2a\uff09:\n\n\u5982\u679c\u8fde\u4e00\u4e2a\u7684\u8bdd\u5c31**\u628a\u65b0\u8fb9\u957f\u5411\u4e0a\u4f20\u9012\u5e76\u4e0e\u7236\u7ed3\u70b9\u5408\u5e76\u5165\u540c\u4e00\u94fe**\uff08`\u8fde\u4e24\u4e2a\u7684\u8bdd\u8bf4\u660e\u5b83\u5c31\u662f\u7279\u5f81\u70b9`\uff09\n\n\u4f3c\u4e4e\u601d\u8def\u8d70\u8fdc\u4e86\uff1f\u4e0d\u662f\u8981\u4e8c\u5206\u5417\uff1f\n\n\u518d\u770b\u770b\uff1f\u6211\u4eec\u6709\u4e00\u4e2a\u4e8c\u5206\u94fe\u957f$len$\uff0c\u5c31\u53ef\u4ee5\u6309\u7167\u4e0a\u9762\u7684\u6b65\u9aa4\u8fde\u4e86\uff0c\u5982\u679c\u8fde\u51fa\u6765\u7684\u94fe\u957f\u5927\u4e8e$len$\u5c31\u8ba1\u6570\u91cd\u5f00\u4e00\u6761\u65b0\u94fe\uff0c\u5982\u679c\u7edf\u8ba1\u4e0b\u6765\u94fe\u6570\u4e0d\u591f\uff0c\u6211\u4eec\u5c31\u7f29\u5c0f$len$\u4e8c\u5206\uff0c\u53cd\u4e4b\u7c7b\u6bd4\u3002\n\n\u4f3c\u4e4e\u5fd8\u4e86\u4ec0\u4e48\uff1f\u6211\u4eec\u4e0d\u4ec5\u8981\u4fdd\u8bc1\u94fe\u7684\u6570\u91cf\u6700\u591a\uff0c\u8fd8\u8981\u4fdd\u8bc1\u6700\u77ed\u7684\u94fe\u6700\u5927\u5316\uff01\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u4f20\u56de\u7236\u7ed3\u70b9\u7684\u8fb9\u957f\u4e00\u5b9a\u8981\u5c3d\u91cf\u957f\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u6709\u52a0\u94fe\u6761\u4ef6\uff1a\n\n$len\\_pre+len\\_now>=binary\\_len$\n\n\u8fd9\u91cc\u91c7\u7528$multiset$\u8fdb\u884c\u7ef4\u62a4\u3002\n\n~~\u590d\u6742\u5ea6\uff1f\u4e0d\u597d\u8bf4~~\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u6709\u7b80\u6d01\u7684\u6ce8\u91ca\uff0c\u53c8\u4e0d\u61c2\u7684\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u63d0\u95ee\uff0c\u5373\u65f6$Update!$\n\n```cpp\n#include <bits/stdc++.h>\n#define ri register int\nusing namespace std;\n\nint read()\n{\n        int num=0;\n        int flg=1;\n        char c=getchar();\n        while(!isdigit(c))\n        {\n                if(c=='-')\n                {\n                        flg=-1;\n                }\n                c=getchar();\n        }\n        while(isdigit(c))\n        {\n                num=(num<<1)+(num<<3)+(c^48);\n                c=getchar();\n        }\n        return num*flg;\n}\n\nconst int maxn=20031125;\n\nint n,m;\n\nstruct edge\n{\n\tint to;\n\tint nex;\n\tint val;\n} e[maxn<<1];\n\nint head[maxn];\nint edge_cnt;\n\nvoid add(int u,int v,int val)\n{\n\te[++edge_cnt].to=v;\n\te[edge_cnt].nex=head[u];\n\te[edge_cnt].val=val;\n\thead[u]=edge_cnt;\n}\n\nbool vis[maxn];\nint dia,dp[maxn];\n\nvoid diameter(int u)\n{\n\tvis[u]=true;\n\tfor(ri i=head[u];i;i=e[i].nex)\n\t{\n\t\tint to=e[i].to;\n\t\tint val=e[i].val;\n\t\tif (vis[to])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tdiameter(to);\n\t\tdia=max(dia,dp[u]+dp[to]+val);\n\t\tdp[u]=max(dp[u],dp[to]+val);\n\t}\n}//\u6811\u5f62dp\u6c42\u76f4\u5f84\n\nstruct node\n{\n\tint cnt,edge;\n\tnode(int cnt_,int edge_)\n\t{\n\t\tcnt=cnt_;\n\t\tedge=edge_;\n\t}\n};\n\nint flg;\n\nnode dfs(int x,int fa,int binary_len)\n{\n\tint cnt=0,edge=0;\n\tmultiset<int> _set;\n\n\tfor(ri i=head[x];i;i=e[i].nex)\n\t{\n\t\tint to=e[i].to;\n\t\tint val=e[i].val;\n\t\t\n\t\tif (to == fa)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tnode son=dfs(to,x,binary_len);\n\t\tif (val+son.edge >= binary_len)\n\t\t{\n\t\t\t++cnt;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_set.insert(val+son.edge);\n\t\t}\n\t\tcnt += son.cnt;\n\t}\n\t\n\twhile (!_set.empty())\n\t{\n\t\t\n\t\tmultiset<int>::iterator it=_set.upper_bound(0);//\u8fed\u4ee3\u5668\n\t\t\n\t\tint top=*it;//\u8fed\u4ee3\u5668\u7684\u503c\n\t\t_set.erase(it);\n\t\tit=_set.lower_bound(binary_len-top);\n\t\t\n\t\tif (it == _set.end())\n\t\t{\n\t\t\tedge=top;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_set.erase(it);\n\t\t\t++cnt;\n\t\t}\n\t}\n\n\tif (cnt >= m)\n\t{\n\t\tflg=true;//\u4e2a\u6570\u8fc7\u591a\n\t}\n\treturn node(cnt,edge);//\u63a8\u8fdb\u53bb\n}\nint ans;\nint main()\n{\n\tsrand((time)(0));\n\tn=read();\n\tm=read();\n\tfor(ri i=1; i <= n-1; i++)\n\t{\n\t\tint u=read();\n\t\tint v=read();\n\t\tint val=read();\n\t\tadd(u,v,val);\n\t\tadd(v,u,val);\n\t}\n\tdiameter(1);//\u76f4\u5f84\n\t\n\tint l=0;\n\tint r=dia;\n\tint mid;\n\twhile (l<=r)//\u4e8c\u5206\u6700\u77ed\u957f\n\t{\n\t\tmid=(l+r)>>1;\n\t\tflg=false;\n\t\tdfs(1,0,mid);//flg\u8d4b\u503c\n\t\tif (flg)\n\t\t{\n\t\t\tl=mid+rand()%2;\n\t\t\tans=mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr=mid-rand()%2;//\u539f\u8c05\u6211\u81f3\u4eca\u4e0d\u77e5\u9053\u662f\u5426\u8981\u52a0\u51cf\u3002\n\t\t}\n\t}\n\treturn 0&printf(\"%d\",ans);\n}\n/*\n7 1\n1 2 10\n1 3 5\n2 4 9\n2 5 8\n3 6 6\n3 7 7\nout:\n31\n*/\n```\n\u53cd\u601d\u4e0e\u5c0f\u7ed3\uff1a\uff08\u524d\u9762\u6d6a\u8d39\u65f6\u95f4\u7cfb\u5217\uff09\n\n\u5176\u5b9e\u6839\u672c\u4e0d\u9700\u8981\u6c42\u76f4\u5f84\uff0c\u65e0\u8111\u53d6\u4e00\u4e2a\u5927\u503c\u5c31\u597d\u4e86\uff08\u6240\u6709\u8fb9\u957f\u4e4b\u548c\u5c31\u4e0d\u9519\uff09\uff0c\u6c42\u76f4\u5f84\u7684\u65f6\u95f4\u53ef\u4ee5\u7528\u6765\u591a\u4e8c\u5206\u51e0\u6b21\uff0c\u5e76\u4e14\u6b64\u9898\u65f6\u95f4\u5361\u5f97\u5e76\u4e0d\u5f88\u7d27\uff0c\u5426\u5219\u5fc5\u987b\u8981\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u94fe\u957f\u548c\u7279\u5f81\u70b9\u4e86\u3002",
        "postTime": 1554822156,
        "uid": 126484,
        "name": "first_fan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u5f53\u770b\u5230\u8fd9\u9053\u9898\u65f6\uff0c\u5f88\u5feb\u901f\u7684\u5c31\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e**\u2018\u6700\u5c0f\u4e2d\u6c42\u6700\u5927\u2019**\u548c**\u2018\u6700\u5927\u4e2d\u6c42\u6700\u5c0f\u2019**\u8fd9\u6837\u7684\u95ee\u9898\uff0c**\u57fa\u672c\u4e0a\u90fd\u662f\u4e8c\u5206\u7b54\u6848**\uff01\n\n\u4e4b\u540e\u8981\u601d\u8003\u7684\u5c31\u662f\uff0c\u5982\u4f55\u5bf9\u4e8c\u5206\u5230\u7684\u6bcf\u4e2amid\u8fdb\u884c\u68c0\u67e5\uff1a\n\n1.\u663e\u7136\u5f88\u96be\u76f4\u63a5\u627e\u51fa\u7b2cm\u5c0f\u8d5b\u9053\u7684\u957f\u5ea6\u662f\u5426\u4e3amid\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u67e5\u627e\u7684\u662f\uff0c\u8def\u5f84**\u957f\u5ea6\u5927\u4e8e\u6216\u7b49\u4e8emid**\u7684\u8d5b\u9053\u4e2a\u6570\u662f\u5426\u6709m\u6761\u3002\n\n2.\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u56fe\u662f\u4e00\u9897**\u65e0\u6839\u6811**\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6811\u5f62DP\u7684\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u9996\u5148\u8981\u786e\u5b9a\u53f6\u8282\u70b9\u548c\u6839\u8282\u70b9\uff0c\u7531\u4e8e\u8fd9\u9898\u53d6\u4efb\u4f55\u8282\u70b9\u4e3a\u6839\u90fd\u6ca1\u6709\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u5c31**\u53d61\u53f7\u8282\u70b9\u4e3a\u6839**\u5c31\u884c\u3002\n\n3.\u9898\u76ee\u4e2d\u7684\u8fd9\u53e5\u8bdd\u201c\u4e00\u6761\u8d5b\u9053\u662f\u4e00\u7ec4**\u4e92\u4e0d\u76f8\u540c\u7684\u9053\u8def** \uff0c\u6ee1\u8db3\u53ef\u4ee5\u4ece\u67d0\u4e2a\u8def\u53e3\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u8fd9\u4e9b\u9053\u8def\uff08**\u6bcf\u6761\u9053\u8def\u7ecf\u8fc7\u4e00\u6b21\uff0c\u4e0d\u5141\u8bb8\u8c03\u5934**\uff09\u5230\u8fbe\u53e6\u4e00\u4e2a\u8def\u53e3\u3002\u201d\u7ed9\u4e86\u6211\u4eec\u7b2c\u4e00\u4e2a\u63d0\u793a\uff1a**\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0e\u548c\u5b83\u76f8\u8fde\u7684\u5b50\u8282\u70b9\u4e4b\u95f4\uff0c\u6700\u591a\u53ea\u80fd\u9009\u53d6\u4e24\u6761\u8fb9\u7ec4\u6210\u8d5b\u9053\u3002**\u56e0\u4e3a\u5982\u679c\u8fb9\u6570\u8d85\u8fc72\uff0c\u5f88\u660e\u663e\u662f\u65e0\u6cd5\u5728\u4e0d\u6389\u5934\u7684\u60c5\u51b5\u4e0b\u4e00\u6b21\u6027\u8d70\u5b8c\u8fd9\u6761\u8d5b\u9053\u7684\u3002\uff08\u6bd4\u5982\u4e0b\u56fe\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/43800.png )\n\n4.\u9898\u76ee\u4e2d\u7684\u8fd9\u53e5\u8bdd\u201c\u8981\u6c42\u6bcf\u6761\u9053\u8def**\u81f3\u591a**\u88ab\u4e00\u6761\u8d5b\u9053\u7ecf\u8fc7\u201d\u7ed9\u4e86\u6211\u4eec\u7b2c\u4e8c\u4e2a\u63d0\u793a\uff1a**\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0e\u548c\u5b83\u76f8\u8fde\u7684\u5b50\u8282\u70b9\u672a\u88ab\u9009\u53d6\u7684\u8fb9\u4e2d\uff0c\u6700\u591a\u53ea\u6709\u4e00\u6761\u53ef\u4ee5\u5bf9\u4e4b\u540e\u7684\u7b54\u6848\u505a\u51fa\u8d21\u732e**\uff0c\u6211\u4eec\u53ea\u8981\u628a\u8fd9\u6761\u8fb9\u7684\u7684\u957f\u5ea6\u5411\u4e0a\u4f20\u9012\u5c31\u597d\u3002\u56e0\u4e3a\u8be5\u8282\u70b9\u4e0e\u5b83\u7236\u8282\u70b9\u4e4b\u95f4\u53ea\u6709\u4e00\u6761\u8fb9\uff0c\u53ea\u53ef\u4ee5\u5efa\u7acb\u4e00\u6761\u8d5b\u9053\u3002\uff08\u6bd4\u5982\u4e0b\u56fe\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/43801.png)\n\n5.\u57fa\u4e8e 3 \u548c 4 \u7684\u7279\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5177\u4f53\u7684\u5904\u7406\u65b9\u6cd5\uff1a\u5bf9\u4e8e\u6574\u68f5\u6811\u4ece\u6839\u5f00\u59cbDFS\uff0c\u4ece**\u6700\u5e95\u5c42**\u5f00\u59cb\uff0c\u5148\u5224\u65ad\u53ef\u4ee5\u9009\u53d6\u54ea\u4e9b\u8fb9\u7ec4\u6210\u957f\u5ea6>=mid\u7684\u8d5b\u9053\uff0c\u6bcf\u7ec4\u6210\u4e00\u6761\u5c31\u5c06check\u52a01\uff08\u5904\u74063\uff09\uff0c\u7b49\u65e0\u6cd5\u7ec4\u6210\u8d5b\u9053\u65f6\uff0c\u5c31\u5c06\u672a\u9009\u53d6\u7684\u8fb9\u4e2d\u6700\u957f\u7684\u4e00\u6761\u5411\u4e0a\u4f20\u9012\uff08\u5904\u74064\uff09\uff0c\u7b49\u6574\u68f5\u6811\u5904\u7406\u5b8c\u6210\u540e\u6bd4\u8f83\u7ec4\u6210\u7684\u8d5b\u9053\u4e2a\u6570\u662f\u5426>=m\uff08\u5373check\u662f\u5426>=m),\u5e76\u4e8c\u5206\u66f4\u65b0\u7b54\u6848\uff08\u5904\u74061\uff09\u3002\n\n\u4eca\u5e74\u6bd4\u8d5b\u51e0\u4e4e\u6ca1\u6709\u4eba\u7528Pascal\u4e86\uff0c\u9898\u89e3\u4e2d\u4e5f\u6ca1\u6709Pascal\u7684\u6587\u7ae0\uff0c\u770b\u6837\u5b50Pascal\u662f\u771f\u7684\u51c9\u4e86......\n\n~~\u4e0d\u8fc7\u6211\u8fd8\u662f\u5fe0\u4e8e\u7ec4\u7ec7\u7684\uff01\uff01\uff01~~\n\nPascal\u7a0b\u5e8f\n```pas\nprogram project1;\nvar\n   rp,up,dis,p:array[0..50005]of longint;\n   lp,v,w:array[0..100005]of longint;\n   n,m,i,mid,x,y,z,t,ll,rr,check:longint;\n\nprocedure qsort(l,r:longint);   //\u666e\u901a\u7684\u5feb\u6392\uff0c\u5f53\u7136C++\u53ef\u4ee5\u76f4\u63a5\u7528STL\nvar i,j,mid,t:longint;\nbegin\n  i:=l;\n  j:=r;\n  mid:=dis[(i+j) div 2];\n  repeat\n    while dis[i]<mid do inc(i);\n    while dis[j]>mid do dec(j);\n    if i<=j then begin\n      t:=dis[i];\n      dis[i]:=dis[j];\n      dis[j]:=t;\n      inc(i);\n      dec(j);\n    end;\n  until i>j;\n  if l<j then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\n\nprocedure sc(f,fa:longint);\nvar i,k,l,r,s:longint;\nbegin\n  k:=0;\n  s:=0;\n  i:=rp[f];\n  while i<>0 do begin\n    if v[i]<>fa then sc(v[i],f);\n    i:=lp[i];\n  end;\n  i:=rp[f];\n  while i<>0 do begin\n    if v[i]<>fa then begin\n      inc(k);\n      dis[k]:=w[i]+up[v[i]];\n    end;\n    i:=lp[i];\n  end;\n  qsort(1,k);\n  l:=1;\n  r:=k;\n  while dis[r]>=mid do dec(r);\n  inc(check,k-r);\n  while l<=r do begin                //\u8fd9\u90e8\u5206\u662f\u6700\u4e3b\u8981\u7684\u5904\u7406\uff0c\u4e5f\u662f\u672c\u9898\u4ee3\u7801\u7684\u6838\u5fc3\n    while (dis[l]+dis[r]>=mid) and (l<r) do begin\n      inc(s);\n      p[s]:=dis[r];\n      dec(r);\n    end;\n    if s<>0 then begin\n      dec(s);\n      inc(check);\n    end else up[f]:=dis[l];\n    inc(l);\n  end;\n  inc(check,s div 2);       \n  if s mod 2<>0 then up[f]:=p[1];\nend;\n\nbegin\n  read(n,m);\n  ll:=0;\n  rr:=0;\n  for i:=1 to n-1 do begin\n    t:=2*i;\n    read(x,y,z);\n    lp[t]:=rp[x];\n    rp[x]:=t;\n    v[t]:=y;\n    w[t]:=z;\n    lp[t-1]:=rp[y];\n    rp[y]:=t-1;\n    v[t-1]:=x;\n    w[t-1]:=z;\n    inc(rr,z);\n  end;\n  while ll<=rr do begin     //\u6807\u51c6\u4e8c\u5206\u6a21\u677f\uff0c\u521d\u59cb\u4e0b\u754c\u4e3a0\uff0c\u521d\u59cb\u4e0a\u754c\u4e3a\u6811\u7684\u76f4\u5f84\uff08\u6211\u8fd9\u91cc\u7528\u7684\u662f\u6240\u6709\u8fb9\u957f\u5ea6\u4e4b\u548c\uff0c\u7528\u6811\u7684\u76f4\u5f84\u4f1a\u66f4\u4f18\uff09\n    fillchar(up,sizeof(up),0);\n    mid:=(ll+rr) shr 1;\n    check:=0;\n    sc(1,0);     \n    if check>=m then ll:=mid+1\n      else rr:=mid-1;\n  end;\n  writeln(ll-1);\nend.\n\n```",
        "postTime": 1542456927,
        "uid": 24425,
        "name": "fysbb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\u4f7f$m$\u6761\u8d5b\u9053\u4e2d\u6700\u77ed\u8d5b\u9053\u7684\u957f\u5ea6\u5c3d\u53ef\u80fd\u5927\uff0c\u4e0d\u96be\u60f3\u5230\u4e8c\u5206\u6700\u77ed\u8d5b\u9053\u7684\u957f\u5ea6$len$\uff0c\u5e76\u5224\u5b9a\u662f\u5426\u80fd\u4fee\u5efa\u51fa$m$\u6761\u8d5b\u9053\u3002\n\n\u5b9a\u4e49$f[u]$\u4e3a\u81ea\u8282\u70b9$u$\u5411\u4e0b\u5ef6\u4f38\u7684**\u4e0d\u4f5c\u4e3a\u8d5b\u9053**\u7684\u6700\u957f\u94fe\u957f\u5ea6\u3002\u5047\u8bbe\u5df2\u77e5\u6240\u6709\u7684$f[v]+w(u,v) (v\\in son(u))$\uff08\u5373\u81ea\u8282\u70b9$u$\u5411\u4e0b\u5ef6\u4f38\u7684\u6240\u6709\u94fe\u7684\u957f\u5ea6\uff09\uff0c\u5219\u6211\u4eec\u5e94\u5728\u4fdd\u8bc1\u8fd9\u4e9b\u94fe\u80fd\u7ec4\u6210\u6700\u591a\u8d5b\u9053\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u4fdd\u7559\u4e0b\u6765\u7684$f[v]+w(u,v)$\u6700\u5927\u3002\n\n\u8003\u8651\u8d2a\u5fc3\u3002\u5bf9\u4e8e$f[v]+w(u,v)\\ge len$\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u4f5c\u4e3a\u4e00\u6761\u8d5b\u9053\u3002\u800c\u5269\u4f59\u7684\u94fe\uff0c\u53ea\u80fd\u5c06\u5b83\u4eec\u4e24\u4e24\u62fc\u63a5\u6210\u8d5b\u9053\u3002\u7531\u4e8e\u9700\u8981\u4f7f\u4fdd\u7559\u4e0b\u6765\u7684$f[v]+w(u,v)$\u53d6\u6700\u5927\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f18\u5148\u4f7f\u8f83\u77ed\u7684\u94fe\u5f97\u5230\u5339\u914d\uff0c\u5728\u5269\u4f59\u7684\u65e0\u6cd5\u5339\u914d\u7684\u94fe\u4e2d\u53d6\u6700\u503c\u4f5c\u4e3a\u65b0\u7684$f[u]$\u3002\n\n\u8d2a\u5fc3\u64cd\u4f5c\u53ef\u4ee5\u7528$multiset$\u5b9e\u73b0\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 50005;\nstruct Edge {int v, w;};\nvector<Edge> G[MAXN];\nint N, M, L, cnt;\nint f[MAXN];\ninline bool cmp(int a, int b) {return a > b;}\ninline void dfs(int u, int fa) {\n    multiset<int> s;\n    for (vector<Edge>::iterator it = G[u].begin(); it != G[u].end(); it++) {\n        int v = it -> v, w = it -> w;\n        if (v == fa) continue;\n        dfs(v, u);\n        if (f[v] + w >= L) cnt++;\n        else s.insert(f[v] + w);\n    }\n    while (!s.empty()) {\n        multiset<int>::iterator it = s.begin();\n        s.erase(it);\n        multiset<int>::iterator it1 = s.lower_bound(L - *it);\n        if (it1 == s.end())\n            f[u] = max(f[u], *it);\n        else {\n            cnt++;\n            s.erase(it1);\n        }\n    }\n}\ninline bool check() {\n    memset(f, 0, sizeof(f));\n    cnt = 0;\n    dfs(1, 0);\n    if (cnt >= M) return 1;\n    return 0;\n}\nint main() {\n    scanf(\"%d%d\", &N, &M);\n    for (register int i = 1; i < N; ++i) {\n        int u, v, w;\n        scanf(\"%d%d%d\", &u, &v, &w);\n        G[u].push_back((Edge){v, w});\n        G[v].push_back((Edge){u, w});\n    }\n    int l = 0, r = 500000000;\n    int ans = 0;\n    while (l <= r) {\n        int mid = (l + r) >> 1;\n        L = mid;\n        if (check()) {\n            ans = mid;\n            l = mid + 1;\n        }\n        else r = mid - 1;\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n\n```\n",
        "postTime": 1562951612,
        "uid": 116851,
        "name": "_\u98ce\u4f11\u4f4f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u5bb9\u6613\u60f3\u5230\u7684\u662f\u7528**\u6811\u5f62DP**\uff0c\u540c\u65f6\u9898\u9762\u8981\u6c42\u7684\u662f\u201c\u6700\u77ed\u957f\u5ea6\u6700\u957f\u201d\uff0c\u5c31\u662f\u660e\u663e\u7684**\u4e8c\u5206\u7b54\u6848**\n\n\u90a3\u4e48\u6211\u4eec\u53d6$min(a[i])$\u4e3a\u5de6\u8fb9\u754c\uff0c$\\Sigma_{i=1}^{n}a[i]$\u4e3a\u53f3\u8fb9\u754c\u8fdb\u884c\u4e8c\u5206\u7b54\u6848\n\n\u7528\u4e24\u4e2a\u6570\u7ec4$f[i]$\u548c$g[i]$\u5206\u522b\u8868\u793a**\u4ee5$i$\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u6761\u957f\u5ea6$>=mid$\uff0c\u53bb\u6389\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\u540e\u4ece$i$\u5f80\u4e0a\u8fde\u6700\u957f\u7684\u957f\u5ea6**\n\n\u5728\u8f6c\u79fb\u65f6\u5c06\u5f53\u524d\u8282\u70b9\u6240\u6709\u5b50\u8282\u70b9\u7684$g[i]$\u52a0\u4e0a$w[i]$\u540e\u52a0\u5165\u4e00\u4e2a$multiset$\u4e2d\uff0c\u56e0\u4e3a\u6211\u4eec\u4e4b\u540e\u8981\u5148\u5c06\u957f\u5ea6\u6ee1\u8db3$>=mid$\u7684\u52a0\u5230\u7b54\u6848\u4e2d\uff0c\u6240\u4ee5\u9700\u8981\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u800c\u4e14\u4e0d\u80fd\u53bb\u91cd\uff0c\u6240\u4ee5$multiset$\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\n\n\u52a0\u5165\u540e\u4ece\u540e\u5f80\u524d\u626b$multiset$\u7684\u5143\u7d20\uff0c\u5982\u679c$>=mid$\u52a0\u5230\u7b54\u6848\uff08\u5373$f$\u6570\u7ec4\u4e2d\uff09\uff0c\u5426\u5219\u9000\u51fa\u5faa\u73af\n\n\u7136\u540e\u6211\u4eec\u4ece\u524d\u5f80\u540e\u626b$multiset$\u4e2d\u7684\u5143\u7d20\uff0c\u7136\u540e\u7528$lower$_$bound$\u5728$multiset$\u4e2d\u627e\u80fd\u591f\u4e0e\u5b83\u914d\u5bf9\u7684\u5143\u7d20\uff0c\u627e\u4e0d\u5230\u7684\u8bdd\u5c31\u7528\u8fd9\u4e2a\u5143\u7d20\u6765\u66f4\u65b0$g[i]$\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u4f18\u89e3\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint cnt,fst[50005],nxt[100005],to[100005],w[100005];\nint n,m,l=2147400000,r,mid,ans,f[50005],g[50005];\nmultiset <int> s;\nmultiset <int>::iterator it;\nvoid AddEdge(int u,int v,int c)//\u94fe\u5f0f\u524d\u5411\u661f\n{\n    to[++cnt]=v;\n    nxt[cnt]=fst[u];\n    fst[u]=cnt;\n    w[cnt]=c;\n}\nvoid Dfs(int u,int faz)//\u6811\u5f62DP\u90e8\u5206\n{\n    for(int i=fst[u];i;i=nxt[i])\n    {\n        int v=to[i];\n        if(v==faz) continue;\n        Dfs(v,u);\n        f[u]+=f[v];\n    }\n    for(int i=fst[u];i;i=nxt[i])\n    {\n        int v=to[i];\n        if(v==faz) continue;\n        s.insert(g[v]+w[i]);\n    }\n    while(!s.empty())\n    {\n        int now=*s.rbegin();\n        if(now>=mid)\n        {\n            it=s.find(now);\n            f[u]++;\n            s.erase(it);\n        }\n        else break;\n    }\n    while(!s.empty())\n    {\n        int now=*s.begin();\n        s.erase(s.begin());\n        it=s.lower_bound(mid-now);\n        if(it==s.end()) g[u]=now;\n        else\n        {\n            f[u]++;\n            s.erase(it);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<n;i++)\n    {\n        int x,y,z;\n        scanf(\"%d %d %d\",&x,&y,&z);\n        AddEdge(x,y,z);\n        AddEdge(y,x,z);\n        l=min(l,z);\n        r+=z;\n    }\n    while(l<=r)//\u4e8c\u5206\u7b54\u6848\n    {\n        mid=l+r>>1;\n        memset(f,0,sizeof(f));\n        memset(g,0,sizeof(g));\n        Dfs(1,0);\n        if(f[1]>=m)\n        {\n            ans=max(ans,mid);\n            l=mid+1;\n        }\n        else r=mid-1;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1542243048,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u8003\u573a\u4e0a\u5199\u4e86\u4e2a\u66b4\u529b\uff0c\u81ea\u5df1\u5224\u4e86\u4e2a65\uff0c\u6ca1\u60f3\u5230\u4f60\u8c37\u548cCCF\u90fd\u7ed9\u4e86\u621190\u5206QWQ\n\n\u597d\u5427\uff0c\u7167\u8003\u573a\u601d\u8def\u8bf4\u4e00\u904d\u3002\n\n\u8fd9\u9898\u9996\u5148\u5f88\u660e\u663e\u662f\u4e00\u9053\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540echeck\u662f\u5728\u8d2a\u5fc3\u7684\u57fa\u7840\u4e0a\u5b8c\u6210\u7684\u3002\n\n\u6765\u8bb2\u4e00\u4e0b\u8fd9\u9898\u7684\u8d2a\u5fc3\u7b56\u7565\u3002\n\n\u9996\u5148\uff0c\u5047\u8bbea\u53f7\u8282\u70b9\u6709k\u4e2a\u513f\u5b50\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2adis\u503c\uff0cdis[i]\u8868\u793a\u4ecea\u53f7\u8282\u70b9\u5f80i\u8d70\uff0c\u5728\u6ee1\u8db3i\u8fbe\u5230\u6700\u4f18\u65f6\uff0ci\u6700\u591a\u80fd\u7ed9\u51fa\u7684\u8d21\u732e\u3002\n\n1. \u9996\u5148\u628adis\u503c\u5927\u4e8e\u7b49\u4e8egoal\uff08\u8bbe\u4e3a\u5f53\u524d\u4e8c\u5206\u5230\u7684\u7b54\u6848\uff09\u7684\u70b9\u5168\u90e8\u52a0\u5165\u5230\u7b54\u6848\u4e2d\uff0c\u5e76\u4e0d\u5728\u4e4b\u540e\u7684\u6b65\u9aa4\u4e2d\u8003\u8651\uff0c\u56e0\u4e3a\u5b83\u5df2\u53ef\u4ee5\u72ec\u81ea\u6210\u4e3a\u4e00\u6761\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\uff0c\u518d\u5f80\u4e0a\u4f20\u9012\uff0c\u4e0d\u4f1a\u4f7f\u7b54\u6848\u66f4\u4f18\u3002\n1. \u82e5\u80fd\u5728dis[i]\u5c3d\u91cf\u5c0f\u65f6\u627e\u5230dis[i]+dis[j]>=goal \u4e14\u4e0d\u5b58\u5728 dis[i]+dis[k]>=goal && dis[j]>dis[k] \uff08i $\\ne$ j $\\ne$ k\uff09\uff0c\u5219\u5408\u5e76i,j\uff0c\u7b54\u6848\u52a01\uff0c\u4e4b\u540e\u4e0d\u518d\u8003\u8651.\u4f46\u53ef\u80fdi\uff0cj\u4e2d\u6709\u4e00\u6761\u662fdis\u6700\u5927\u7684\u70b9\uff0c\u82e5\u8f6c\u79fb\u7ed9a\u8282\u70b9\u53ef\u80fd\u4f1a\u5f62\u6210\u53e6\u4e00\u6761\u8def\u5f84\u3002\u4f46\u4ece\u6700\u4f18\u6027\u8003\u8651\uff0c\u6b64\u65f6\u5408\u5e76\uff0c\u7b54\u6848\u5fc5\u5b9a\u52a01\uff0c\u800c\u5373\u4f7f\u8f6c\u79fb\u4e0a\u53bb\uff0c\u7b54\u6848\u6491\u6b7b\u4e5f\u662f\u52a01\uff0c\u6240\u4ee5\u8f6c\u79fb\u6709\u53ef\u80fd\u52a3\u4e8e\u6216\u7b49\u4e8e\u5408\u5e76\uff0c\u56e0\u6b64\u9009\u62e9\u5408\u5e76\u3002\n\n\u601d\u8def\u5927\u6982\u8bb2\u5b8c\u4e86\uff0c\u5148\u653e\u4e00\u6bb5\u8003\u573a\u4e0a\u5199\u7684\u4ee3\u7801\u5427\u3002\n```cpp\n    for(register int i=1;i<zone;++i)    //zone\u662f\u5c06\u53ef\u5355\u72ec\u6210\u8def\u5f84\u7684\u513f\u5b50\u6392\u9664\u540e\u5269\u7684\u4e2a\u6570\u51cf1\n    {\n        if(pd[son[i]])\n            continue;\n        int bj=zone-1,mem=-1;\n        for(;bj>i;--bj)\n        {\n            if(pd[son[bj]])\n                continue;\n            if(dis[son[i]]+dis[son[bj]]>=goal)\n                mem=bj;\n            if(dis[son[i]]+dis[son[bj]]<goal)\n                break;\n        }\n        if(mem==-1)\n            continue;\n        ++num;\n        pd[son[i]]=pd[son[mem]]=1;\n    }\n    for(register int i=zone-1;i>=1;--i)\n        if(pd[son[i]]==0)\n        {\n            dis[a]+=dis[son[i]];\n            break;\n        }\n```\n\u505a\u6cd5\u6bd4\u8f83\u66b4\u529b\uff0c\u5c31\u662f\u7528pd\u6570\u7ec4\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u88ab\u53d6\uff0c\u7136\u540e\u5e73\u5206\u679a\u4e3e\u3002\n\n\u8fd9\u6837\u7684\u505a\u6cd5\u663e\u7136\u4f1a\u88ab\u83ca\u82b1\u56fe\u5361\u6210O($n^2$)\u3002\n\n\u6240\u4ee5\u60f3\u5230\u4e86\u7528[multiset](https://www.cnblogs.com/zyxStar/p/4542835.html)\u6765\u4f18\u5316\u8ba1\u7b97\u3002\uff08\u4e0d\u8981\u95ee\u6211multiset\u600e\u4e48\u7528~~\u6211\u5b66\u4e86\u597d\u4e45\u624d\u4f1a\u4e86\u4e00\u70b9~~\uff09\n\n\u4ee3\u7801\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u6837\n```cpp\n    Q.clear();\n    for(register int i=1;i<=cnt;++i)   //cnt\u662f\u513f\u5b50\u4e2a\u6570\n        if(dis[son[i]]>=goal)\n            ++num;\n        else\n            Q.insert(dis[son[i]]);\n    int maxn=0;\n    Q.insert(500000001);\n    multiset<int>::iterator aa;\n    multiset<int>::iterator bb;\n    while(Q.size()!=1)\n    {\n        aa=Q.upper_bound(0);\n        int bf=*aa;\n        Q.erase(aa);\n        bb=Q.lower_bound(goal-bf);\n        int bf2=*bb;\n        if(bf2!=500000001)\n            Q.erase(bb),++num;\n        else\n            maxn=bf;\n    }\n    dis[a]+=maxn;\n```\nQWQ\u53ef\u80fd\u662f\u6211\u7684multiset\u5199\u5f97\u6bd4\u8f83\u4e11\uff0c\u5438\u6c27\u624d\u80fd\u8fc7~~\u90a3\u4e5f\u7b97\u8fc7\u4e86\u561b~~\n\n# PS\uff1a\u672c\u6765\u60f3\u5199splay\u4f18\u5316\uff0c\u4f46\u5199\u4e86\u5199\u88ab\u7801\u91cf\u529d\u9000\u4e86\uff0c\u8fd8\u662f\u7528STL\u5427\u3002",
        "postTime": 1542732346,
        "uid": 36933,
        "name": "zhy12138",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u6700\u5c0f\u503c\u6700\u5927\uff0c\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002  \n\u8bbe\u5f53\u5f85\u68c0\u67e5\u7684\u7b54\u6848\u4e3a$k$,\u5219\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u4e00\u68f5\u6811\u4e0a\u80fd\u5426\u627e\u51fa\u81f3\u5c11$m$\u6761\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e$k$\u7684\u8def\u5f84\u3002  \n\u8003\u8651\u4e00\u68f5\u5b50\u6811\u5bf9\u5168\u5c40\u7b54\u6848\u7684\u8d21\u732e\uff0c\u663e\u7136\u6709\u4e24\u4e2a\u65b9\u9762\u3002  \n\u7b2c\u4e00\u662f\u5f53\u524d\u5b50\u6811\u4e2d\u80fd\u6700\u591a\u80fd\u627e\u5230\u7684\u6ee1\u8db3\u8981\u6c42\u7684\u8def\u5f84\u6761\u6570\uff0c\u5728\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u8bb0\u4e3a$ans_u$\uff1b\u7b2c\u4e8c\u662f\u8fde\u5230\u5f53\u524d\u5b50\u6811\u7684\u6839\u7684\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u8bb0\u4e3a$len_u$\u3002  \n\n\u7ea6\u5b9a\u6709\u5e8f\u5bf9$(a, b)$\u8868\u793a$ans_u=a, len_u=b$,\u5b9a\u4e49$(a, b) < (c, d)$\u4e3a\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5b50\u6811\uff0c\u8d21\u732e\u4e3a$(a, b)$\u65f6\u5168\u5c40\u7b54\u6848\u7684\u6700\u5927\u503c<\u8d21\u732e\u4e3a$(c, d)$\u65f6\u5168\u5c40\u7b54\u6848\u7684\u6700\u5927\u503c\u3002\n\n\u76f4\u89c9\u544a\u8bc9\u6211\u4eec\uff0c\u5e94\u8be5\u5728\u6700\u5927\u5316$ans_u$\u7684\u524d\u63d0\u4e0b\u6700\u5927\u5316$len_u$\uff0c\u539f\u56e0\u4e5f\u5f88\u663e\u7136\uff0c\u82e5\u5f53\u524d\u5b50\u6811\u8d21\u732e\u7684\u4e24\u4e2a\u72b6\u6001\u4e3a$A=(a, b), B=(c, d)$,\u4e14$a>c$\uff0c\u90a3\u4e48$B \\leq A$\uff0c\u56e0\u4e3a\u65e0\u8bba$d$\u6709\u591a\u5927\uff0c\u6700\u591a\u4e5f\u53ea\u80fd\u7ec4\u6210\u4e00\u6761\u6ee1\u8db3\u9898\u610f\u7684\u8def\u5f84\uff0c\u5219$(c, d) < (c+1, 0) \\leq (a, b)$\u3002\n\n\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u4ee5$u$\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8d21\u732e\u3002\u5728u\u7684\u6240\u6709\u513f\u5b50v\u7684\u8d21\u732e\u90fd\u5df2\u7ecf\u88ab\u8ba1\u7b97\u51fa\u6765\u7684\u60c5\u51b5\u4e0b\uff0c\u663e\u7136ans_u\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u4e3a$\\sum ans_v$\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8003\u8651  \n1.\u5982\u4f55\u5c06$len_v$\u7ec4\u6210\u5c3d\u91cf\u591a\u7684\u6ee1\u8db3\u9898\u610f\u7684\u8def\u5f84  \n2.\u5982\u4f55\u6700\u5927\u5316\u5269\u4e0b\u7684\u5143\u7d20\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u3002    \n\n1\u7684\u505a\u6cd5\u7c7b\u4f3c\u4e8eP1094\uff0c\u7528\u53cc\u6307\u9488\u626b\u4e00\u904d\u5c31\u884c\u4e86\u3002  \n2\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\uff0c\u6bcf\u6b21\u5220\u53bb\u4e00\u4e2a\u5143\u7d20\u540e\u75281\u7684\u505a\u6cd5\u8ba1\u7b97\u7b54\u6848\uff0c\u53ef\u4ee5\u6c42\u51fa\u5728\u7b54\u6848\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\u80fd\u591f\u5220\u53bb\u7684\u6700\u5927\u5143\u7d20\u3002\n\n\u8003\u573a\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\n#define maxn 50005\n\nint n, m, head[maxn], tail, ans[maxn], len[maxn], arr[maxn], vis[maxn];\n\nstruct edge {\n\tint v,w,next;\n}edges[maxn<<1];\n\nvoid add_edge(int u,int v,int w) {\n\tedges[++tail].v=v;\n\tedges[tail].w=w;\n\tedges[tail].next=head[u];\n\thead[u]=tail;\n}\n\nint calc(int tl, int lim) {\n\tint p2=1; int ret=0;\n\tfor (int i=tl;i>p2;i--) {\n\t\tif (vis[i]) continue;\n\t\twhile (p2<i&&(arr[p2]+arr[i]<lim||vis[p2])) p2++;\n\t\tif (p2<i&&!vis[p2]&&arr[i]+arr[p2]>=lim) ret+=1;\n\t\tp2++;\n\t}return ret;\n}\n\nvoid dfs(int u, int f, int lim) {\n\tans[u]=0;\n\tfor (int i=head[u];i;i=edges[i].next) {\n\t\tif (edges[i].v==f) continue;\n\t\tlen[edges[i].v]=edges[i].w;\n\t\tdfs(edges[i].v, u, lim);\n\t\tans[u]+=ans[edges[i].v];\n\t}int tl=0; \n\tfor (int i=head[u];i;i=edges[i].next) {\n\t\tif (edges[i].v==f)continue;\n\t\tarr[++tl]=len[edges[i].v];\n\t}if (tl>0)\t{\n\t\tstd::sort(arr+1,arr+tl+1); arr[0]=0;\n\t\tint vl=calc(tl,lim); ans[u]+=vl;\n\t\tint lb=0, rb=tl, res;\n\t\twhile (lb<=rb) {\n\t\t\tint mid=(lb+rb)>>1;\n\t\t\tvis[mid]=1;\n\t\t\tif (calc(tl,lim)==vl){\n\t\t\t\tres=mid; lb=mid+1;\n\t\t\t}else rb=mid-1;\n\t\t\tvis[mid]=0;\n\t\t}len[u]+=arr[res];\n\t}if (len[u]>=lim) {len[u]=0; ans[u]++;}\n//\tprintf(\"%d:%d %d\\n\", u, len[u],ans[u]);\n}\n\nint check(int v) {\n//\tprintf(\"checking:%d\\n\", v);\n\tstd::memset(ans,0,sizeof(ans));\n\tstd::memset(len,0,sizeof(len));\n\tdfs(1, 0, v);\n\treturn ans[1]>=m;\n}\n\nint main() {\n\tfreopen(\"track.in\",\"r\",stdin);\n\tfreopen(\"track.out\",\"w\",stdout);\n\tstd::memset(vis,0,sizeof(vis));\n\ttail=0;std::memset(head,0,sizeof(head));\n\tint l=1; int r=0;\n\tint u,v,w,ret;\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i=1;i<n;++i) {\n\t\tscanf(\"%d %d %d\", &u, &v, &w); r+=w;\n\t\tadd_edge(u, v, w);add_edge(v, u,w);\n\t}while (l<=r) {\n\t\tint mid=(l+r)>>1;\n\t\tif (check(mid)) {ret=mid; l=mid+1;}\n\t\telse r=mid-1;\n\t}printf(\"%d\", ret);\n\treturn 0;\n}\n\n```",
        "postTime": 1542381839,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u770b\u5230\u5927\u5bb6\u90fd\u662f\u7528\u7684\u4e8c\u5206+multiset\u8fc7\u53bb\u7684\uff0c\u90a3\u6211\u5c31\u8bb2\u8bb2\u4e24\u6b21\u4e8c\u5206\u7684\u65b9\u6cd5\u5427\u3002\n\n\u9898\u610f\u5c31\u4e0d\u8bf4\u4e86\uff0c~~Day1\u9047\u52303\u9053\u539f\u9898\u6211\u4e5f\u5c31\u4e0d\u8bf4\u4ec0\u4e48\u4e86~~\n\n\u8bb2\u771f\uff0c\u8fd9\u9053\u9898\u8981\u662f\u6ca1\u6709\u505a\u8fc7POI\u7684SZN\uff0c\u771f\u7684\u6709\u70b9\u5403\u4e8f\u3002~~\u597d\u4e86\uff0c\u4e0d\u591a\u8bf4\u95f2\u8bdd\u4e86~~\n\n\u89c1\u5230\u6700\u5c0f\u503c\u6700\u5927\uff0c\u60f3\u5230\u4e8c\u5206\uff1b\u89c1\u5230\u6570\u636e\u8303\u56f4\uff0c\u60f3\u5230\u8d2a\u5fc3\uff1b\u89c1\u5230\u6811\u4e0a\u8def\u5f84\uff0c\u60f3\u5230SZN\uff1b\u89c1\u5230SZN\uff0c\u60f3\u5230\u5408\u5e76\u513f\u5b50\uff1b\u89c1\u52305e4\uff0c$O(N\\log ^2 N)$\u7a33\u3002~~\u8fd9\u5c31\u662f\u4f60\u60f3\u51fa\u8fd9\u9053\u9898\u7684\u8fc7\u7a0b\uff1f\uff1f\uff1f~~\n\n\u9996\u5148\u4e8c\u5206\u4e00\u4e2a\u6743\u503cmid\uff0c\u8003\u8651\u9a8c\u8bc1\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u4e00\u5b9a\u662f\u5c06\u5b83\u7684\u5b50\u6811\u5408\u5e76\uff0c\u7136\u540e\u5c3d\u53ef\u80fd\u591a\u7684\u62fc\u51fa\u8d5b\u9053\u3002\u6211\u4eec\u8bb0$f[i]$\u8868\u793a\u5df2\u7ecf\u5b8c\u6210\u5bf9i\u7684\u5b50\u6811\u7684\u8d2a\u5fc3\uff0c\u5269\u4f59\u7684\u7ecf\u8fc7\u70b9i\u7684\u8def\u5f84\u6700\u591a\u8fd8\u80fd\u5f80\u4e0b\u5ef6\u4f38\u591a\u957f\u3002\n\n\u65e2\u7136\u8981\u5c3d\u53ef\u80fd\u7684\u62fc\u51fa\u8d5b\u9053\uff0c\u6211\u4eec\u5148\u4e0d\u505a\u4efb\u4f55\u9650\u5236\u7684\u62fc\u63a5\u513f\u5b50\uff0c\u770b\u6700\u591a\u62fc\u51fa\u51e0\u4e2a\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f\uff0c\u5148\u628a\u5df2\u7ecf$>=mid$\u7684\u513f\u5b50\u5206\u51fa\u6765\u3002\u7136\u540e\u6392\u5e8f\uff0c\u8003\u8651\u53cc\u6307\u9488\uff0c\u5f53$len[L]+len[R]>=mid$\u65f6\uff0c\u5c31\u628aLR\u62fc\u6210\u4e00\u4e2a\u8d5b\u9053\uff0c\u8fd9\u6837\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5728\u8d5b\u9053\u6570\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u7559\u4e0b\u54ea\u4e2a\u513f\u5b50\u3002\u8fd9\u4e2a\u957f\u5ea6\u663e\u7136\u662f\u53ef\u4ee5\u4e8c\u5206\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u4e8c\u5206\u7559\u4e0b\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u518d\u62fc\u4e00\u904d\uff0c\u5982\u679c\u6570\u91cf\u4e0d\u53d8\uff0c\u8bf4\u660e\u8fd9\u4e2a\u513f\u5b50\u53ef\u4ee5\u9009\u3002\n\n\u7136\u540e\u9012\u5f52\u5904\u7406\u7236\u4eb2\u5c31\u597d\u4e86\u3002\n\n300~ms\u7684\u4ee3\u7801\uff1a\n\n```cpp\nnamespace i207M\n{\n\n#define N 50005\nint n,m;\nint v[N<<1],nx[N<<1],w[N<<1];\nint head[N],cnte=1;\nil void adde(const int &uu,const int &vv,const int &ww)\n{\n    v[++cnte]=vv,nx[cnte]=head[uu],head[uu]=cnte,w[cnte]=ww;\n}\nint sum,mini=1000000000;\nil int mmin(const int x,const int y)\n{\n    return x<y?x:y;\n}\nint f[N];\nint tmp[N];\nint tot,cnt;\nint mid;\nint check(const int val)\n{\n    int tar=0,L=1,R=cnt;\n    while(R>0&&tmp[R]>=mid) \n    {\n        if(R==val) \n        {\n            --R;\n            continue;\n        }\n        --R,++tar;\n    }\n    while(L<R&&R>0)\n    {\n        while(L<R&&tmp[L]+tmp[R]<mid) ++L;\n        if(L>=R) break;\n        if(L==val)\n        {\n            ++L;\n            continue;\n        }\n        if(R==val)\n        {\n            --R;\n            continue;\n        }\n        ++tar,++L,--R;\n    }\n    return tar;\n}\nvoid dfs(int x,int fa)\n{\n    for(ri i=head[x];i;i=nx[i])\n        if(v[i]!=fa) dfs(v[i],x);\n    cnt=0;\n    for(ri i=head[x];i;i=nx[i])\n        if(v[i]!=fa) tmp[++cnt]=f[v[i]]+w[i];\n    if(cnt==0) return;\n    sort(tmp+1,tmp+1+cnt);\n    int tar=check(0);\n    int l=1,r=cnt,tmid,tans=-1;\n    while(l<=r)\n    {\n        tmid=(l+r)>>1;\n        if(check(tmid)>=tar) tans=tmid,l=tmid+1;\n        else r=tmid-1;\n    }\n    if(tans!=-1) f[x]=tmp[tans];\n    tot+=tar;\n}\nil void clear()\n{\n    tot=0;\n    for(ri i=1;i<=n;++i) f[i]=0;\n}\nbool judge()\n{\n    clear();\n    dfs(1,0);\n    return tot>=m;\n}\nsigned main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(ri i=1;i<n;++i)\n    {\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        adde(a,b,c); adde(b,a,c);\n        sum+=c,mini=mmin(c,mini);\n    }\n    int l=mini,r=sum/m,ans=mini;\n    while(l<=r)\n    {\n        mid=(l+r)>>1;\n        if(judge()) ans=mid,l=mid+1;\n        else r=mid-1;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n\n}\n```\n\n",
        "postTime": 1542242806,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "NOIP2018-Day1T3-\u8d5b\u9053\u4fee\u5efa-\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u6211\u5927\u6982\u662f\u4e3a\u6570\u4e0d\u591a\u7684\u6ca1\u7528STL\u7684\u5427\u2026\u2026\n\n\u9996\u514855\u5206\u66b4\u529b\u662f\u4e0d\u96be\u60f3\u7684\uff0c\u6811\u7684\u76f4\u5f84+\u94fe\u4e0a\u4e8c\u5206+\u83ca\u82b1\u56fe\u3002\n\n\u4e0b\u9762\u8bf4\u4e00\u8bf4\u6211\u8003\u573a\u7684\u601d\u8def\u5427\u3002\n\n\u9996\u5148\u4e8c\u5206\uff0c\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5224\u5b9a\u6027\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u8981\u505a\u7684\u5c31\u662f\u5982\u4f55\u7ec4\u6210\u5c3d\u53ef\u80fd\u591a\u7684\u957f\u5ea6>length\u7684\u8def\u5f84\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u5b50\u6811\u5185\u6709\u82e5\u5e72\u94fe\u53ef\u4ee5\u9009\u62e9\uff0c\u8fd9\u4e9b\u94fe\u6709\u56db\u79cd\u53ef\u80fd\u7684\u53bb\u5411\uff1a\n\n1\u3001\u5355\u72ec\u4f5c\u4e3a\u4e00\u6761\u8def\u5f84\uff0c\u9884\u5904\u7406\u51fa\u6765\u3002\n\n2\u3001\u548c\u8fd9\u68f5\u6811\u5185\u90e8\u7684\u53e6\u4e00\u6761\u94fe\u62fc\u6210\u4e00\u6761\u8def\u5f84\u3002\n\n3\u3001\u7559\u5230\u6700\u540e\u548c\u8fd9\u4e2a\u8282\u70b9\u5230\u7236\u4eb2\u7684\u8def\u5f84\u8fde\u5728\u4e00\u8d77\u62fc\u6210\u4e00\u6761\u65b0\u94fe\u3002\n\n4\u3001\u5e9f\u6389\u3002\n\n\u7136\u540e\u5c31\u662f\u5927\u529b\u8d2a\u5fc3\u4e86\u3002\n\n\u9996\u5148\uff0c\u56e0\u4e3a3\u53bb\u5411\u7684\u94fe\u53ea\u80fd\u6709\u4e00\u6761\uff0c\u6240\u4ee5\u5b50\u6811\u5185\u90e8\u8981\u62fc\u6210\u5c3d\u53ef\u80fd\u591a\u7684\u8def\u5f84\u3002\uff08\u5426\u5219\u662f\u65e0\u6cd5\u901a\u8fc7\u5b83\u7684\u7956\u5148\u8282\u70b9\u8865\u56de\u6765\u7684\uff09\n\n\u5176\u6b21\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u7559\u5230\u6700\u540e\u7684\u94fe\u5c3d\u53ef\u80fd\u957f\u3002\n\n\u90a3\u4e48\u600e\u4e48\u5b9e\u73b0\u8fd9\u4e2a\u8981\u6c42\u5462\uff1f\n\n\u8fd8\u662f\u8d2a\u5fc3\u3002\n\n\u9996\u5148\u628a\u957f\u5ea6\u5927\u4e8elength\u7684\u94fe\u5148\u62ce\u51fa\u6765\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6bcf\u6b21\u9009\u5f53\u524d\u6700\u77ed\u7684\u4e00\u6761\u94fe\uff0c\u627e\u5230\u80fd\u548c\u5b83\u62fc\u6210\u4e00\u6761\u8def\u5f84\u7684\u5c3d\u53ef\u80fd\u77ed\u7684\u53e6\u4e00\u6761\u94fe\uff0c\u8def\u5f84\u6761\u6570+1\u5e76\u5c06\u8fd9\u4e24\u6761\u94fe\u5220\u9664\uff0c\u4e0d\u65ad\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u76f4\u5230\u65e0\u6cd5\u62fc\u6210\u65b0\u7684\u8def\u5f84\u3002\n\n\uff08\u4e0d\u4f1a\u8bc1\u660e\uff0c\u8003\u573a\u4e0a\u6211\u5927\u6982\u60f3\u4e86\u4e09\u56db\u79cd\u8d2a\u5fc3\u65b9\u6cd5\uff0c\u5176\u5b83\u65b9\u6cd5\u90fd\u88ab\u6211\u53c9\u4e86\uff0c\u8fd9\u4e00\u79cd\u6ca1\u4e3e\u51fa\u6765\u53cd\u4f8b\u5c31\u76f4\u63a5\u7528\u4e86\u3002\uff09\n\n\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n\u5f88\u591a\u4eba\u7528multiset\uff0c\u4f46\u662f\u6211\u8003\u573a\u6ca1\u60f3\u5230\u8fd9\u4e2a\uff0c\u4e8e\u662f\u5c31\u53cc\u5411\u94fe\u8868+\u53cc\u6307\u9488\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f$O(n\\log n)$\uff0c\u4f46\u662f\u5e38\u6570\u5c0f\u3002\n\n\u8003\u573a\u4e0a\u88ab\u5404\u79cd\u7ec6\u8282\u5361\u4e86\u597d\u4e45\uff0c\u5927\u6982\u7528\u4e86\u4e00\u4e2a\u534a\u5c0f\u65f6\u624d\u8c03\u8bd5\u6b63\u786e\uff08\u7136\u800c\u6211\u8fd8\u662f\u5269\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u8fd8\u597dT1T2\u79d2\u7684\u5feb\uff09\uff0c\u4e0b\u9762\u662f\u6211\u8003\u573a\u4e0a\u8e29\u8fc7\u7684\u5751\uff1a\n\n1\u3001\u53f3\u6307\u9488\u4e0d\u4e00\u5b9a\u662f\u5355\u8c03\u5f80\u524d\u79fb\u52a8\u7684\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff1a\n```cpp\nlength=8\n3 3 5 5\n```\n\u6b64\u65f6\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a\u5408\u5e76\u6210\u4e00\u6761\u8def\u5f84\uff0c\u7136\u540e\u53f3\u6307\u9488\u53f3\u79fb\uff0c\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u56db\u4e2a\u5408\u5e76\u6210\u4e00\u6761\u8def\u5f84\u3002\n\n\u89e3\u51b3\u65b9\u6cd5\uff1a\u914d\u5bf9\u5b8c\u6210\u540e\u53f3\u6307\u9488\u5148\u53f3\u79fb\u4e00\u4f4d\u3002\n\n2\u3001\u5bfb\u627e\u6700\u77ed\u7684\u94fe\u7684\u65f6\u5019\u6709\u53ef\u80fd\u4f1a\u627e\u5230\u81ea\u5df1\uff0c\u6b64\u65f6\u81ea\u5df1\u548c\u81ea\u5df1\u4e0d\u80fd\u914d\u5bf9\uff0c\u8981\u7279\u5224\u3002\n\n3\u3001\u53f3\u6307\u9488\u53ef\u80fd\u8df3\u51fa\u94fe\u8868\u8fb9\u754c\u5bfc\u81f4\u6b7b\u5faa\u73af\uff0c\u8981\u5728\u94fe\u8868\u672b\u5c3e\u52a0\u4e00\u4e2a\u65e0\u7a77\u5927\u3002\n\n4\u3001\u5404\u79cd\u53d8\u91cf\u610f\u4e49\u2026\u2026\n\n\u5176\u5b83\u7684\u8be6\u89c1\u8003\u573a\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nstruct Edge\n{\n\tint to;\n\tint nxt;\n\tint len;\n}e[100005];\nint n,m,edgenum,head[50005],dep[50005],rest[50005],pa[50005],top,num,length;\nbool flag[50005];\nstruct Line\n{\n\tint v;\n\tint pre;\n\tint nxt;\n}tmp[50005];//\u8fd9\u91cc\u662f\u53cc\u5411\u94fe\u8868\nbool cmp(Line a,Line b)\n{\n\treturn a.v<b.v;\n}\ninline int read()//\u5f53\u8001\u7237\u673a\u505a\u7684\n{\n\tchar c=getchar();\n\tint t=0;\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tt=t*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn t;\n}\nvoid add(int u,int v,int l)\n{\n\te[++edgenum].len=l;\n\te[edgenum].to=v;\n\te[edgenum].nxt=head[u];\n\thead[u]=edgenum;\n}\nvoid dfs(int node)//\u91cd\u70b9\u6765\u4e86\uff01\n{\n\tfor(int hd=head[node];hd;hd=e[hd].nxt)\n\t{\n\t\tint to=e[hd].to;\n\t\tif(to==pa[node])continue;\n\t\tpa[to]=node;\n\t\tdep[to]=dep[node]+e[hd].len;\n\t\tdfs(to);\n\t}\n\ttop=0;\n\tfor(int hd=head[node];hd;hd=e[hd].nxt)\n\t{\n\t\tint to=e[hd].to;\n\t\tif(to==pa[node])continue;\n\t\ttmp[++top].v=rest[to]+e[hd].len;//\u8fd9\u4e00\u6761\u94fe\u7684\u957f\u5ea6=\u5b50\u8282\u70b9\u5269\u4e0b\u7684\u94fe\u7684\u957f\u5ea6+\u7236\u5b50\u8fb9\u7684\u957f\u5ea6\n\t\tflag[top]=0;\n\t}\n\tsort(tmp+1,tmp+top+1,cmp);//\u6392\u5e8f\uff0c\u4e3a\u4e86\u540e\u9762\u7684\u8d2a\u5fc3\n\twhile(tmp[top].v>=length)top--,num++;//\u9884\u5904\u7406\u957f\u5ea6>length\u7684\u8fb9\n\tfor(int i=0;i<=top;i++)\n\t  tmp[i].nxt=i+1,tmp[i].pre=i-1;//\u521d\u59cb\u5316\n\ttmp[top+1].nxt=0;\n\ttmp[top+1].pre=top;\n\ttmp[top+1].v=1000000000;//\u5c3e\u90e8\u52a0\u4e0a\u6b63\u65e0\u7a77\n\tint now=top+1;//now\u5b58\u50a8\u7684\u662f\u5f53\u524d\u7b26\u5408\u8981\u6c42\u7684\u6700\u77ed\u7684\u94fe\u7684\u4f4d\u7f6e\n\tfor(int i=1;i<=top;i=tmp[i].nxt)//\u4ece\u5c0f\u5230\u5927\u8d2a\u5fc3\n\t{\n\t\tif(tmp[tmp[i].pre].nxt!=i||tmp[tmp[i].nxt].pre!=i)continue;//\u5982\u679c\u5220\u6389\u4e86\u5c31\u7ee7\u7eed\uff0c\u8003\u573a\u4e00\u5f00\u59cb\u4e0d\u52a0\u8fd9\u4e2a\u6ca1\u8fc7\u5bf9\u62cd\n\t\twhile(tmp[i].v+tmp[now].v>=length&&now>i)now=tmp[now].pre;//\u53cc\u6307\u9488\n\t\tnow=tmp[now].nxt;\n\t\tif(now==top+1)continue;//\u5f53\u524d\u8fb9\u592a\u77ed\uff0c\u6ca1\u6cd5\u5339\u914d\n\t\tif(now==i)//\u81ea\u5df1\u4e0d\u80fd\u548c\u81ea\u5df1\u5339\u914d\n\t\t{\n\t\t\tnow=tmp[now].nxt;\n\t\t\tcontinue;//\u4e00\u5f00\u59cb\u5199\u4e86break\u8c03\u4e86\u597d\u4e45\n\t\t}\n\t\ttmp[tmp[i].pre].nxt=tmp[i].nxt;//\u4e0b\u9762\u56db\u884c\u662f\u5220\u9664\n\t\ttmp[tmp[i].nxt].pre=tmp[i].pre;\n\t\ttmp[tmp[now].pre].nxt=tmp[now].nxt;\n\t\ttmp[tmp[now].nxt].pre=tmp[now].pre;\n\t\tnum++;\n\t\tnow=tmp[now].nxt;\n\t}\n\trest[node]=tmp[tmp[top+1].pre].v;//tmp[top+1]\u662f\u5c3e\u90e8\u7684\u6b63\u65e0\u7a77\uff0c\u6240\u4ee5\u5b83\u7684\u524d\u9762\u4e00\u4e2a\u5c31\u662f\u5269\u4e0b\u7684\u6700\u957f\u7684\u8def\u5f84\u4e86\n//\tprintf(\"%d:\",node);\n//\tfor(int i=1;i<=top;i++)\n//\t  printf(\"%d \",tmp[i].v);\n//\tprintf(\"\\n%d\\n\",rest[node]);\n}\nint main()\n{\n\tfreopen(\"track.in\",\"r\",stdin);\n\tfreopen(\"track.out\",\"w\",stdout);\n\tn=read();\n\tm=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u=read();\n\t\tint v=read();\n\t\tint l=read();\n\t\tadd(u,v,l);\n\t\tadd(v,u,l);\n\t}\n\tint l=0,r=1000000000;//\u4e8c\u5206\uff0c\u4e0d\u7528\u591a\u8bf4\u4e86\n\twhile(l<=r)\n\t{\n\t\tlength=l+r>>1;\n\t\tnum=0;\n\t\tdfs(1);\n\t\tif(num>=m)l=length+1;\n\t\telse r=length-1;\n\t}\n\tprintf(\"%d\\n\",r);\n\treturn 0;\n}\n```",
        "postTime": 1544085156,
        "uid": 54214,
        "name": "wucstdio",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "# [Noip2018]\u8d5b\u9053\u4fee\u5efa\n\n## \u4e00.\u524d\u8a00\n\n\u200b\t\u8fd9\u9898\u7684\u90e8\u5206\u5206\u8fd8\u662f\u7ed9\u7684\u975e\u5e38\u53cb\u597d\uff01STL\u771f\u597d\u7528\uff01[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5021)\n\n## \u4e8c.20pts\n\n\u200b\t\u8fd9\u662f $m=1$ \u7684\u505a\u6cd5\uff0c\u53ea\u9700\u8981\u4e24\u904ddfs\u7b97\u6811\u7684\u76f4\u5f84\u5c31\u53ef\u4ee5\u4e86\uff0c\u4ee3\u7801\u7a0d\u6709\u6ce8\u91ca\u3002\n\n```c++\nint est,sume;\nvoid dfs1(int x,int fa,int sumd){\n\tif(sumd>sume)est=x,sume=sumd;//\u66f4\u65b0\u79bb\u4ed6\u6700\u8fdc\u7684\u70b9\n\tfor(int i=head[x];i;i=ne[i]){\n\t\tif(to[i]==fa)continue;\n\t\tdfs1(to[i],x,sumd+dis[i]);\n\t}\n}\n\nif(m==1){\n\t\tdfs1(1,0,0);\n\t\tsume=0;\n\t\tdfs1(est,0,0);//\u7528\u79bb1\u6700\u8fdc\u7684est\u518d\u6765\u4e00\u6b21\n\t\tprintf(\"%d\",sume); \n}\n```\n\n## \u4e09.40pts\n\n\u200b\t\u8fd9\u662f20\u5206\u52a0\u4e0a\u94fe\u7684\u60c5\u51b5\u2026\u2026\n\n\u200b\t\u7ed9\u51fa\u4e00\u79cd**\u9519\u8bef\u601d\u8def**\uff1a\u76f4\u63a5\u603b\u548c\u9664m\uff08\u4e00\u4e2a\u7279\u522b\u5927\u5c31\u53ef\u4ee5hack\uff09\n\n\u200b\t\u4e0b\u9762\u662f**\u6b63\u786e\u7684\u601d\u8def**\uff0c\u4e8c\u5206\u4e00\u4e2a\u6700\u77ed\u957f\u5ea6\u57cb\u4f0f\u4ed6\u4e00\u624b\uff0c\u7136\u540e\u8d2a\u5fc3\u770b\u6700\u591a\u80fd\u591f\u51d1\u51fa\u51e0\u4e2a\u8d5b\u9053\u6765\u3002\n\n```c++\nbool check(int x){\n\tint cnt=0,sum=0;\n\tm_for(i,1,n-1){\n\t\tif(sum+a[i]>=x)sum=0,cnt++;//\u53c8\u51d1\u51fa\u4e00\u6bb5\n\t\telse sum+=a[i];\n\t}\n\treturn cnt>=m;\n}\n//\u94fe\u5f0f\u5411\u524d\u661f\u5b58\u50a8\u7684\uff0cspecial1\u662f\u5224\u65ad\u662f\u4e0d\u662f\u94fe\nelse if(!spe1){\n\tm_for(i,1,n-1)\n\tsume+=(a[i]=(dis[head[i]]!=a[i-1]?dis[head[i]]:dis[ne[head[i]]]));\n    //\u8fd9\u91cc\u5077\u4e2a\u61d2\u628a\u957f\u5ea6\u603b\u548c\u548c\u6c42\u51fa\u5230i+1\u7684\u957f\u5ea6\u5408\u5728\u4e00\u8d77\u5199\u4e86\n\tint l=1,r=sume,ans=1;//\u4e8c\u5206\u4e0a\u754c\u4e3a\u957f\u5ea6\u603b\u548c\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid))l=mid+1,ans=mid;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\",ans);\n}\n```\n\n## \u4e09.55pts\n\n\u5c31\u662f $a_i=1$ \u7684\u83ca\u82b1\u56fe\uff0c\u4e5f\u662f\u90e8\u5206\u5206\u7684\u4e0a\u9650\u3002\u5bf9\u4e8e\u83ca\u82b1\u56fe\uff0c\u6211\u4eec\u8981\u4e48\u662f\u8fde\u77401\u7684\u4e24\u6761\u8fb9\u51d1\u4e00\u8d77\uff0c\u8981\u4e48\u4e00\u6761\u8fb9\u81ea\u6210\u4e00\u5bb6\u3002\u8fd9\u91cc**\u5148 sort \u4ece\u5927\u5230\u5c0f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u53d6\u524d $2m$ \u4e2a\u6765\u62fc\u8d5b\u9053\uff0c\u6309\u7167\u6700\u5927\u914d\u6700\u5c0f\u7684\u6765**\u3002\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u8d5b\u9053\u7684\u6700\u77ed\u957f\u5ea6\u6700\u5927\uff08**\u5f53 $2m>n$ \u65f6\u76f8\u5f53\u4e8e\u63a5\u4e0a\u7a7a\u6c14\u8d5b\u9053\uff0c\u957f\u5ea6\u4e3a0\uff0c\u4e5f\u5c31\u662f\u81ea\u6210\u4e00\u5bb6\uff0c\u4e0d\u5f71\u54cd**\uff09\n\n```c++\nelse if(!spe2){\n\tfor(int i=head[1];i;i=ne[i])a[to[i]]=dis[i];\n\tsort(a+1,a+n+1,cmp);\n\tint ans=1<<29;\n\tfor(int i=1;i<=m;++i)ans=min(ans,a[i]+a[(m<<1)-i+1]);\n\tprintf(\"%d\",ans);\n}\n```\n\n## \u56db.100pts\n\n\u200b\t\u672c\u7247\u9898\u89e3\u7684\u91cd\u5934\u620f\uff0c\u6ee1\u5206\u601d\u8def\u6765\u5566\uff01\n\n\u200b\t\u9996\u5148\u8fd8\u662f\u4e8c\u5206\u957f\u5ea6\u57cb\u4f0f\u4ed6\u4e00\u624b\uff0c\u51d1\u51fa\u5c3d\u53ef\u80fd\u591a\u7684\u8d5b\u9053\u3002\u9898\u76ee\u7ed9\u51fa\u7684\u5927\u80cc\u666f\u662f\u4e00\u4e2a\u6811\uff0c\u6211\u624d\u7528\u6df1\u641c\uff0c\u5f88\u663e\u7136\u7684\uff0c\u904d\u5386\u5230\u4e00\u4e2a\u70b9\uff0c\u6211\u5148\u8ba9\u513f\u5b50\u4eec**\u53ea\u51ed\u501f\u4ed6\u4eec\u6240\u5728\u7684\u5b50\u6811**\u51d1\u51fa\u5c3d\u53ef\u80fd\u591a\u7684\u8d5b\u9053\u6765\u3002\u5fc5\u7136\u7684\uff0c\u513f\u5b50\u4e0d\u53ef\u80fd\u5c06\u4ed6\u4eec\u8eab\u4e0a\u6240\u6709\u7684\u8fb9\u90fd\u7528\u5b8c\uff0c\u6b64\u65f6\u51fa\u73b0\u4e86\u82e5\u5e72\u6761\u8fd8\u6ca1\u7528\u7684\u8fb9\uff0c\u5982\u56fe\n![](https://cdn.luogu.com.cn/upload/image_hosting/ordsbs3u.png)\n\n\n\u73b0\u5728\u5728\u7ea2\u70b9\uff0c\u8ba9\u84dd\u70b9\u5b8c\u6210\u4e86\u4efb\u52a1\uff0c\u84dd\u70b9\u53cd\u9988\u8bf4\u6211\u8fd8\u6709\u4e09\u6761\u9ed1\u8fb9\u6ca1\u6709\u7528\u4e0a\uff0c\u8bf7\u6c42\u7236\u4eb2\u5e2e\u52a9\uff01\u4e5f\u8bb8\u8fd9\u4e09\u6761\u9ed1\u8fb9\u4efb\u610f\u4e00\u6761\u52a0\u4e0a\u7ea2\u8fb9\u5c31\u53ef\u4ee5\u51d1\u51fa\u8d5b\u9053\uff0c\u53c8\u6216\u8bb8\u52a0\u4e0a\u7ea2\u8fb9\u8fd8\u4e0d\u884c\uff0c\u8fd8\u8981\u548c\u84dd\u8fb9\u7684\u5144\u5f1f\u518d\u64cd\u4f5c\u4e00\u624b\u624d\u884c\u2026\u2026\n\n\u200b\t\u4f46\u662f\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c**\u8fd9\u4e09\u6761\u9ed1\u8fb9\u90fd\u5fc5\u987b\u52a0\u4e0a\u7ea2\u8fb9\u624d\u53ef\u80fd\u6709\u673a\u4f1a\u3002\u5e76\u4e14\u5728\u4e00\u6761\u9ed1\u8fb9\u83b7\u5f97\u5ba0\u5e78\u540e\u5176\u4ed6\u7684\u9ed1\u8fb9\u5c31\u518d\u4e5f\u6ca1\u6709\u673a\u4f1a\u4e86\u3002**\n\u672c\u7740\u8d2a\u5fc3\u7684\u539f\u5219\uff0c\u6211\u4eec\u8ffd\u6c42\u5c3d\u91cf\u591a\u7684\u8d5b\u9053\uff0c\u90a3\u4e48\u80af\u5b9a\u662f\u4ece\u8fd9\u4e09\u6761\u9ed1\u8fb9\u5f53\u4e2d\u9009\u4e00\u6761\u6700\u957f\u7684\u51fa\u6765\u548c\u7ea2\u8fb9\u76f8\u63a5\u3002**\u4e8e\u662f\u513f\u5b50\u505a\u5b8c\u4efb\u52a1\u540e\u8fd8\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u6700\u957f\u7684\u6ca1\u6709\u7528\u5230\u7684\u5047\u8d5b\u9053\u3002**\n\n\u200b\t\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u7b97\u51fa\u53ea\u4f9d\u9760\u81ea\u5df1\u7684\u5b50\u6811\u7684\u8d5b\u9053\u6570\u3002\u5f88\u663e\u7136\uff0c\u513f\u5b50\u4eec\u90fd\u53cd\u9988\u7ed9\u6211\u4e86\u4e00\u4e9b\u6700\u957f\u7684\u5047\u8d5b\u9053\uff0c\u6211\u4ece\u4e2d\u5c06\u5047\u8d5b\u9053\u63a5\u8d77\u6765\u5c31\u884c\u3002\u8fd8\u5269\u4e0b\u7684\u65e0\u7528\u5047\u8d5b\u9053\u9009\u4e00\u4e2a\u6700\u957f\u7684\u8fd4\u56de\u7ed9\u7236\u4eb2\u3002\u5982\u6b64\uff0c\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n```c++\nint dfs(int x,int fa,int &alf,int mid){\n\tint ans=0;\n\tmultiset<int> s;//\u4fdd\u5b58\u5047\u8d5b\u9053\n\tfor(int i=head[x];i;i=ne[i]){\n\t\tif(to[i]==fa)continue;\n\t\tint k=0;//\u513f\u5b50\u7684\u6700\u957f\u5047\u8d5b\u9053\n\t\tans+=dfs(to[i],x,k,mid);//\u8ba9\u513f\u5b50\u5148\u505a\u4efb\u52a1\n\t\tk+=dis[i];//\u548c\u7ea2\u8fb9\u914d\u8d77\u6765\n\t\tif(k>=mid)ans++;//\u6700\u597d\u76f4\u63a5\u6210\u4e3a\u8d5b\u9053\n\t\telse s.insert(k);//\u4e0d\u884c\u5c31\u653e\u5165\u5047\u8d5b\u9053\u96c6\u5408\u4e2d\n\t}\n\twhile(!s.empty()){\n\t\tint k=*s.begin();//\u53d6\u4e00\u4e2a\u6700\u5c0f\u5047\u8d5b\u9053\n\t\ts.erase(s.begin());//\u76f4\u63a5\u6254\u6389\n\t\tmultiset<int>::iterator it=s.lower_bound(mid-k);//\u80fd\u914d\u8d77\u6765\u7684\u6700\u5c0f\u5047\u8d5b\u9053\n\t\tif(it!=s.end()){ans++;s.erase(it);}//\u627e\u5f97\u5230\u5c31\u62fc\u8d77\u6765\uff0c\u7136\u540e\u5220\u6389\n\t\telse alf=max(alf,k);//\u8bb0\u5f55\u6700\u957f\u65e0\u7528\u5047\u8d5b\u9053\n\t}\n\treturn ans;\n}\nelse{\n\tdfs1(1,0,0);\n\tsume=0;\n\tdfs1(est,0,0);\n\tint r=sume,l=1,ans;//\u4e8c\u5206\u4e0a\u754c\u4e3a\u6811\u7684\u76f4\u5f84\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tint alf=0;\n\t\tif(dfs(1,0,alf,mid)>=m)l=mid+1,ans=mid;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\",ans);\n}\n```\n\n\u6700\u540e\u5c06\u5404\u4e2a\u6a21\u5757\u62fc\u8d77\u6765\u5c31\u884cqwq",
        "postTime": 1596769901,
        "uid": 68561,
        "name": "clockwhite",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u63a8\u5e7f\u535a\u5ba2 qwq\uff1a[$\\left \\lceil \\text {longlongzhu123} \\right \\rfloor$](https://www.cnblogs.com/longlongzhu123)\uff08\u6682\u65f6\u8fd8\u6ca1\u6709\u4ec0\u4e48\u4e1c\u897f\uff0c\u4f46\u6b22\u8fce\u6765\u73a9\u54e6\uff01\uff09\n\n## \u9898\u610f\u5206\u6790\n\n\u7ed9\u51fa\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u5e76\u5728\u5176\u4e2d\u9009\u53d6 $m$ \u6761**\u8fb9\u4e0d\u76f8\u4ea4**\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u6700\u77ed\u8def\u5f84\uff08\u8d5b\u9053\uff09\u7684\u957f\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002\n\n## \u5206\u6790\n\n\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u5c3d\u53ef\u80fd\u5927\uff0c\u5373\u8981\u6c42\u6700\u5927\u5316\u6700\u5c0f\u503c\u3002\u663e\u7136\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u3002\n\n\u8003\u8651\u4e8c\u5206\u8f6c\u6362\u4e3a\u5224\u5b9a\u95ee\u9898\uff1a\u4e8c\u5206\u679a\u4e3e $limit$\uff0c\u80fd\u5426\u9009\u51fa $m$ \u6761\u957f\u5ea6\u4e0d\u5c0f\u4e8e $limit$ \u7684\u8def\u5f84\uff1f\n\n\u4e0d\u59a8**\u5c3d\u53ef\u80fd\u591a\u5730**\u9009\u62e9\u957f\u5ea6\u4e0d\u5c0f\u4e8e $limit$ \u7684\u8def\u5f84\uff0c\u5224\u65ad\u9009\u62e9\u7684\u6700\u5927\u6570\u91cf\u662f\u5426\u5927\u4e8e\u7b49\u4e8e $m$\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u7684\u95ee\u9898\u8fdb\u4e00\u6b65\u88ab\u8f6c\u6362\u4e3a\uff1a\u7ed9\u51fa $limit$\uff0c\u6c42\u51fa\u4e0d\u5c0f\u4e8e $limit$ \u7684\u8def\u5f84\u6700\u591a\u6709\u591a\u5c11\u6761\u3002\n\n## \u8d2a\u5fc3\u7b56\u7565\n\n\u5148\u7ed9\u51fa\u4e00\u4e2a\u5b9a\u4e49\uff1a\u4ece $u$ \u5b50\u6811\u4e2d\u67d0\u4e2a\u8282\u70b9\u8fde\u5411 $u$ \u7684\u4e00\u6761\u8def\u5f84\u79f0\u4e3a\u201c\u534a\u94fe\u201d\uff08\u501f\u9274\u4e86 @[XG_Zepto](https://www.luogu.org/space/show?uid=37158) \u7684\u5b9a\u4e49\uff09\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u534a\u94fe\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u4e24\u6761\u957f\u5ea6\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8e $limit$ \u7684\u672a\u4f7f\u7528\u7684\u534a\u94fe\uff08\u7ea2\u8272\uff09\u53ef\u4ee5\u5408\u5e76\u5728\u4e00\u8d77\u5bf9\u7b54\u6848\u9020\u6210\u8d21\u732e\u3002\n\n![1.png](https://i.loli.net/2019/08/15/yasb5JVQYoWUFxd.png)\n\n\u5982\u56fe\uff0cA \u548c B \u5206\u522b\u662f\u4e24\u6761\u672a\u88ab\u4f7f\u7528\u8fc7\u7684\u534a\u94fe\u3002\u5982\u679c A \u4e0e B \u7684\u603b\u957f\u53ef\u4ee5\u8fbe\u5230 $limit$\uff0c\u5219\u5c06\u5b83\u4eec\u5408\u5e76\uff0c\u5bf9\u7b54\u6848\u5c31\u9020\u6210\u4e86\u8d21\u732e\u3002\n\n*   \u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\uff1a\u6bcf\u6b21\u5408\u5e76\u65f6\u5c3d\u91cf\u8ba9\u4e24\u6761\u534a\u94fe\u603b\u957f\u63a5\u8fd1 $limit$\uff0c\u6b64\u65f6\u624d\u80fd\u66f4\u4f18\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c**\u8ba9\u5408\u6cd5\u7684\u603b\u957f\u5c3d\u91cf\u5c0f\u66f4\u4f18**\u3002\n\n*   \u53e6\u5916\uff0c\u5982\u679c $v$ \u662f $u$ \u7684\u513f\u5b50\uff0c\u5982\u679c $v$ \u7684\u5b50\u6811\u4e2d\u6709\u4e24\u6761\u534a\u94fe\u53ef\u4ee5\u5408\u5e76\uff0c\u90a3\u4e48\u5c31\u4e0d\u8981\u5c06\u5176\u4e2d\u67d0\u4e00\u6761\uff08\u518d\u52a0\u4e0a $u, v$ \u8ddd\u79bb\u540e\uff09\u7559\u5230 $u$ \u5904\u5408\u5e76\u3002\n\n    \u8fd9\u662f\u56e0\u4e3a\u4e00\u6761\u534a\u94fe\u5bf9\u7b54\u6848\u6700\u591a\u9020\u6210 $1$ \u7684\u8d21\u732e\uff0c\u800c\u4e14 $v$ \u53ea\u80fd\u7559\u51fa\u4e00\u6761\u8fd4\u56de\u7ed9 $u$\uff0c\u8fd9\u6837\u505a\u7b54\u6848\u5e76\u4e0d\u4f1a\u66f4\u4f18\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c**\u80fd\u5728\u5b50\u6811\u4e2d\u5408\u5e76\u5c31\u5c3d\u91cf\u5728\u5b50\u6811\u4e2d\u5408\u5e76**\u3002\n\n\u6709\u4e86\u8fd9\u4e24\u4e2a\u8d2a\u5fc3\u7b56\u7565\u540e\uff0c\u6211\u4eec\u8003\u8651\u9012\u5f52\u904d\u5386\u6574\u68f5\u6811\u3002\u8bbf\u95ee\u5230 $u$ \u53f7\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u5148\u5c06 $u$ \u7684\u513f\u5b50\u4eec\u7684\u5b50\u6811\u4e2d\uff0c\u80fd\u591f\u5408\u5e76\u7684\u534a\u94fe\u5c3d\u91cf\u5408\u5e76\uff0c\u5e76\u5c06\u5408\u5e76\u7684\u6570\u91cf\u7d2f\u52a0\u5230\u7b54\u6848\u4e2d\u3002\u4ece\u67d0\u4e2a\u513f\u5b50\u8fd4\u56de\u65f6\uff0c\u65e0\u975e\u5c31\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1.  \u8be5\u513f\u5b50\u5b50\u6811\u4e2d\u7684\u534a\u94fe\u4e0d\u80fd\u4e24\u4e24\u914d\u5bf9\u5408\u5e76\u3002\u8981\u4e48\u5269\u4f59\u7684\u534a\u94fe\u957f\u5ea6\u592a\u5c0f\uff0c\u8981\u4e48\u6570\u91cf\u4e0d\u591f\uff08\u662f\u5947\u6570\uff09\u3002\n1.  \u5b50\u6811\u4e2d\u7684\u534a\u94fe\u5df2\u7ecf\u4e24\u4e24\u914d\u5bf9\u4e86\uff0c\u6ca1\u6709\u5269\u4f59\u7684\u534a\u94fe\u3002\n\n\u76f8\u5e94\u7684\u89e3\u51b3\u65b9\u6848\u5982\u4e0b\uff1a\n\n1.  \u5728\u5269\u4f59\u7684\u534a\u94fe\u4e2d\u9009\u62e9\u4e00\u6761\u6700\u957f\u7684\u534a\u94fe\uff0c\u5c06\u5176\u957f\u5ea6\u52a0\u4e0a $u, v$ \u8ddd\u79bb\u540e\u8fd4\u56de\u3002\uff08\u4e00\u4e2a\u513f\u5b50\u6700\u591a\u8fd4\u56de\u4e00\u6761\u534a\u94fe\uff09\n1.  \u76f4\u63a5\u8fd4\u56de $u, v$ \u8ddd\u79bb\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u77e5\u9053\u534a\u94fe\u7684\u59cb\u672b\u8282\u70b9\u3002\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u534a\u94fe\u7684\u957f\u5ea6\u5c31\u884c\u4e86\uff08\u53cd\u6b63\u80af\u5b9a\u53ef\u4ee5\u5408\u5e76\u7684\u561b\uff09\u3002\n\n## \u5408\u5e76\u65b9\u6cd5\n\n\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u5177\u4f53\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\n\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u5230\u4e86 $u$ \u53f7\u8282\u70b9\uff0c\u5148\u5c06 $u$ \u7684\u6240\u6709\u513f\u5b50\u9012\u5f52\u904d\u5386\u3002\u6bcf\u4e2a\u513f\u5b50\u90fd\u4f1a\u8fd4\u56de\u4e00\u6761\u534a\u94fe\u7684\u957f\u5ea6\u3002\u6211\u4eec\u5c06\u8fd9\u4e9b\u957f\u5ea6\u7edf\u7edf\u5b58\u8fdb\u4e00\u4e2a `vector` \u91cc\u3002\n\n\u7136\u540e\u5bf9\u8fd9\u4e9b\u6570\u636e\u5408\u5e76\u3002\u5408\u5e76\u65b9\u6cd5\u662f\u6bcf\u6b21\u627e\u5230\u4e24\u4e2a\u603b\u548c\u4e0d\u5c0f\u4e8e $limit$ \u7684\u6570\u636e\uff0c\u5c06\u7b54\u6848\u7d2f\u52a0 $1$\uff0c\u5e76\u5c06\u8fd9\u4e24\u4e2a\u6570\u636e\u5220\u9664\u3002\n\n\u6211\u4eec\u65e2\u8981\u4fdd\u8bc1\u4e0d\u4f1a\u6f0f\u6389\u4e00\u4e9b\u5408\u6cd5\u7684\u5408\u5e76\u65b9\u6848\uff0c\u53c8\u8981\u5c3d\u53ef\u80fd\u5730\u4f7f\u6700\u7ec8\u8fd4\u56de\u7684\u534a\u94fe\u957f\u5ea6\u5c3d\u91cf\u957f\u3002\u9996\u5148\u662f\u4ece\u5c0f\u5230\u5927\u5339\u914d\uff08\u4e0d\u4f1a\u4f7f\u7b54\u6848\u66f4\u5dee\uff0c\u800c\u4e14\u8fd8\u907f\u514d\u6700\u5927\u7684\u534a\u94fe\u7b2c\u4e00\u4e2a\u88ab\u5220\u9664\uff09\u3002\u4e5f\u8bb8\u4f60\u4f1a\u60f3\u5230\u6392\u5e8f\u5e76\u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff08two-pointers\uff09\uff0c\u9057\u61be\u7684\u662f\uff0c\u53cc\u6307\u9488\u6cd5\u4f1a\u6f0f\u6389\u4e00\u4e9b\u60c5\u51b5\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\u53c2\u8003\u4e0b\u9762\u7684\u4e00\u4e2a\u6837\u4f8b\u3002\u6211\u4eec\u5148\u5047\u8bbe\u53cc\u6307\u9488\u6cd5\u4ece\u5c0f\u5230\u5927\u5408\u5e76\u5427\uff0c\u4e5f\u5c31\u662f\u4ee3\u7801\u53ef\u80fd\u957f\u8fd9\u4e2a\u6837\u5b50\uff08\u51cf\u5c11\u4e86\u4e00\u4e9b\u7279\u5224\uff09\uff1a\n\n```cpp\n// vector<int> v; n = v.size();\nsort(v.begin(), v.end()); // \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\nint cur = n - 1;\nfor (int i = 0; i < n; i++) {\n  if (used[i]) continue;\n  while (used[cur] && v[i] + v[cur - 1] >= limit)\n    cur--;\n  if (v[i] + v[cur] >= limit) {\n    ans++;\n    used[i] = used[cur] = true;\n  }\n  if (i + 1 == cur) break;\n}\n```\n\n\u4e3a\u4e86\u4f7f\u5408\u5e76\u7684\u603b\u957f\u5c3d\u53ef\u80fd\u5c0f\uff0c\u5f53 `v[i] + v[cur - 1] >= limit` \u65f6\u4e0d\u65ad\u5c06 `cur--`\u3002\u770b\u4e0a\u53bb\u597d\u50cf\u5e76\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u6bcf\u4e2a\u534a\u94fe $i$ \u4e00\u5b9a\u4f1a\u627e\u5230\u4e0e\u4e4b\u5339\u914d\u7684\u6700\u5c0f\u534a\u94fe $cur$\u3002\u8fd9\u4efd\u4ee3\u7801\u751a\u81f3\u8fd8\u8fc7\u4e86\u6837\u4f8b\u3002\u6211\u4eec\u770b\u770b\u8fd9\u6837\u4e00\u7ec4\u6570\u636e\uff1a\n\n```plain text\nv: 1 2 3 3 3 4\nlimit = 5\n```\n\n\u5f88\u7b80\u5355\uff0c\u662f\u5427\uff1f\u5982\u679c\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\n\n*   `1` \u548c `4` \u914d\u5bf9\uff0c`cur--`\n*   `2` \u548c `3` \u914d\u5bf9\uff0c\u56e0\u4e3a `2` \u548c\u6bcf\u4e2a `3` \u90fd\u53ef\u4ee5\u914d\u5bf9\uff0c\u6839\u636e\u6211\u4eec\u7684\u7b97\u6cd5\uff0c\u6211\u4eec\u8ba9 `2` \u548c\u6700\u5de6\u8fb9\u7684 `3` \u914d\u5bf9\u3002\n*   \u597d\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c$i$ \u6307\u5411 `2`\uff0c\u800c $cur$ \u6307\u5411\u6700\u5de6\u8fb9\u7684 `3`\uff0c\u56e0\u4e3a $i$ \u548c $cur$ \u76f8\u649e\uff0c\u56e0\u6b64\u9000\u51fa\u5faa\u73af\uff0c\u5e76\u8fd4\u56de\u5269\u4e0b\u6570\u5b57\u4e2d\u7684\u6700\u5927\u503c `3`\n\n\u53d1\u73b0\u4ec0\u4e48\u95ee\u9898\u4e86\u5417\uff1f\u6307\u9488\u79fb\u52a8\u7684\u65f6\u5019\u8df3\u8fc7\u4e86 `3` \u548c `3` \u8fd9\u4e24\u4e2a\u539f\u672c\u80fd\u591f\u5408\u5e76\u7684\u6570\u636e\u3002\u89e3\u51b3\u65b9\u6848\uff1f\u5c06 $cur$ \u79fb\u5230\u672b\u5c3e\uff1f\u8ba9 `2` \u548c\u6700\u53f3\u8fb9\u7684 `3` \u914d\u5bf9\uff1f\u4ece\u5927\u5230\u5c0f\u914d\u5bf9\uff1f\u5f88\u53ef\u60dc\uff0c\u90fd\u4e0d\u884c\u3002\u53ef\u4ee5\u8f7b\u6613\u5730\u6784\u9020 Hack \u6570\u636e\u3002\u53cc\u6307\u9488\u7684\u95ee\u9898\u5c31\u5728\u4e8e\u8df3\u8fc7\u4e86\u7684\u6570\u5b57\u6ca1\u6cd5\u627e\u56de\u6765\u3002\n\n## \u4f7f\u7528\u5e73\u8861\u6811 / multiset\n\n\u518d\u56de\u987e\u4e00\u4e0b\u6211\u4eec\u7684\u4efb\u52a1\uff1a\u6bcf\u6b21\u627e\u5230\u4e24\u4e2a\u603b\u548c\u4e0d\u5c0f\u4e8e $limit$ \u7684\u6570\u636e\uff0c\u5c06\u7b54\u6848\u7d2f\u52a0 $1$\uff0c\u5e76\u5c06\u8fd9\u4e24\u4e2a\u6570\u636e\u5220\u9664\u3002\n\n\u4f7f\u7528\u5e73\u8861\u6811\u5c31\u884c\u4e86\u561b\uff01\u4e0d\u65ad\u904d\u5386\u6700\u5c0f\u7684\u6570\u636e $x$\uff0c\u7136\u540e\u5728\u5e73\u8861\u6811\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4 $(limit - x)$ \u5927\u7684\u6570 $y$\uff0c\u5c06\u7b54\u6848\u7d2f\u52a0 $1$\uff0c\u6700\u540e\u5c06 $x$ \u548c $y$ \u5220\u9664\uff0c\u76f4\u5230\u5e73\u8861\u6811\u5927\u5c0f\u4e0d\u8d85\u8fc7 $1$ \u4e3a\u6b62\u3002\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u6ca1\u5fc5\u8981\u624b\u5199\u4e00\u4e2a\u5e73\u8861\u6811\u3002STL \u91cc\u7684 `multiset` \u8db3\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n`multiset::lower_bound(x)` \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e $x$ \u7684\u6570 $y$\uff08\u7684\u8fed\u4ee3\u5668\uff09\u3002\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u8fed\u4ee3\u5668\u662f\u4ec0\u4e48\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u7406\u89e3\u6210\u4e00\u4e2a\u66f4**\u9ad8\u660e**\u7684\u6307\u9488\uff08\u6ed1\u7a3d\uff09\u3002`*iter` \u7684\u8bed\u6cd5\u540c\u6837\u9002\u7528\u4e8e\u8fed\u4ee3\u5668\u3002\n\n\u597d\u4e86\uff0c\u4e0b\u9762\u8fd9\u4efd\u4ee3\u7801\u53ef\u4ee5\u53d6\u4ee3\u4e0a\u9762\u90a3\u4efd\u53cc\u6307\u9488\u7684\u4ee3\u7801\u4e86\u3002\n\n```cpp\n// multiset<int> son[u]\nwhile (!son[u].empty()) {\n  LL x = *(son[u].begin());\n  son[u].erase(son[u].begin());\n  Iter iter = son[u].lower_bound(limit - x);\n  if (iter == son[u].end()) {\n    ans.val = max(ans.val, x);\n  } else {\n    ans.cnt++;\n    son[u].erase(iter);\n  }\n}\n```\n\n\u8fd9\u91cc\u5c31\u662f\u67e5\u627e\u5e76\u5220\u9664\u7684\u8fc7\u7a0b\u3002\u6ce8\u610f\u5982\u679c `lower_bound` \u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7b49\u4e8e `son[u].end()` \u5219\u8bf4\u660e\u627e\u4e0d\u5230\u3002\u6b64\u65f6\u7528\u5b83\u6765\u66f4\u65b0 $u$ \u5c06\u8981\u8fd4\u56de\u7684\u6700\u957f\u534a\u94fe\u957f\u5ea6\u3002\u5982\u679c\u6ca1\u6709\u6570\u636e\u66f4\u65b0\u6700\u957f\u534a\u94fe\u957f\u5ea6\uff0c\u5219\u5c06\u5176\u8bbe\u6210 $0$\u3002\u52a0\u4e0a $u, v$ \u8ddd\u79bb\u8fd9\u6b65\u4f1a\u5728\u7236\u4eb2\u4e2d\u5904\u7406\u3002\n\n## \u4ee3\u7801\n\n\u6ce8\u610f\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1a\u5982\u679c\u67d0\u6761\u534a\u94fe\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e $limit$\uff0c\u5219\u8fd9\u6761\u534a\u94fe\u53ef\u4ee5\u5355\u72ec\u6210\u4e3a\u4e00\u6761\u8def\u5f84\uff08\u4e0d\u7528\u5408\u5e76\uff09\u3002\n\n\u4ee3\u7801\u5176\u5b9e\u8fd8\u633a\u77ed\u7684 qwq\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef multiset<LL>::iterator Iter;\nconst int kMaxN = 50000 + 10;\nstruct Graph {\n  struct Arc {\n    int to;\n    LL dis;\n  };\n  vector<Arc> arcs[kMaxN];\n  void Add(int u, int v, LL dis) {\n    arcs[u].push_back((Arc) {v, dis});\n    arcs[v].push_back((Arc) {u, dis});\n  }\n};\nstruct Info {\n  int cnt;\n  LL val;\n};\nGraph G;\nint n, m;\nLL limit, max_limit;\nmultiset<LL> son[kMaxN];\nInfo Dfs(int u, int fa) {\n  Info ans = (Info) {0, 0ll};\n  son[u].clear();\n  for (int i = 0; i < G.arcs[u].size(); i++) {\n    Graph::Arc& arc = G.arcs[u][i];\n    int v = arc.to;\n    if (v != fa) {\n      Info res = Dfs(v, u);\n      res.val += arc.dis;\n      ans.cnt += res.cnt;\n      if (res.val >= limit) {\n        ans.cnt++;\n      } else {\n        son[u].insert(res.val);\n      }\n    }\n  }\n  while (!son[u].empty()) {\n    LL x = *(son[u].begin());\n    son[u].erase(son[u].begin());\n    Iter iter = son[u].lower_bound(limit - x);\n    if (iter == son[u].end()) {\n      ans.val = max(ans.val, x);\n    } else {\n      ans.cnt++;\n      son[u].erase(iter);\n    }\n  }\n  return ans;\n}\nint main() {\n  scanf(\"%d %d\", &n, &m);\n  for (int i = 1; i <= n - 1; i++) {\n    int u, v, w;\n    scanf(\"%d %d %d\", &u, &v, &w);\n    G.Add(u, v, w);\n    max_limit += w;\n  }\n  LL end = 0, top = max_limit + 1;\n  while (end + 1 != top) {\n    limit = (end + top) >> 1;\n    int count = Dfs(1, 0).cnt;\n    if (count >= m) {\n      end = limit;\n    } else {\n      top = limit;\n    }\n  }\n  printf(\"%lld\\n\", end);\n  return 0;\n}\n```\n\n",
        "postTime": 1565881586,
        "uid": 57525,
        "name": "longlongzhu123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "[$\\LARGE\\texttt{P5021}$](https://www.luogu.com.cn/problem/P5021)\n\n[$\\small\\texttt{In my cnblogs}$](https://www.cnblogs.com/RedreamMer/p/14084275.html)\n\n\u505a\u6cd5\uff1a\u8d2a\u5fc3/\u4e8c\u5206/$\\texttt{DFS}$\uff08\u6811\u5f62 $\\texttt{DP}$\uff09/\u5e76\u67e5\u96c6\n\n## \u524d\u8a00\n\n\u6e05\u4e00\u8272\u7684 $\\texttt{multiset}$ \uff0c\u4e3a\u4ec0\u4e48\u554a\uff1f\n\n\u8fd9\u7684\u786e\u662f\u4e00\u9053\u597d\u9898\uff0c\u505a\u6cd5\u5f88\u591a\uff0c\u5bf9\u4e8e\u8fd9\u91cc\u8d2a\u5fc3\u7684\u7ef4\u62a4\u96be\u9053\u975e\u8981\u8fdb\u884c\u5220\u9664\u64cd\u4f5c\uff1f\uff08\u8fd8\u6709\u4e3a\u4ec0\u4e48\u6709\u4eba\u8bf4\u663e\u7136\u8981 $\\texttt{multiset}$ \uff1f)\u50cf\u6211\u8fd9\u6837\u7684\u849f\u84bb\u4e0d\u4f1a $\\texttt{multiset}$ \u600e\u4e48\u529e\uff1f\n\n\u63d0\u4f9b\u4e00\u79cd\u4e0d\u7528 $\\texttt{multiset}$ \u7684\u505a\u6cd5\uff08\u7801\u91cf\u5c0f\uff09\u3002\n\n## \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u9897\u5e26\u6743\u6811\uff0c\u8981\u4f60\u9009 $k$ \u6761\u6ca1\u6709\u91cd\u8fb9\u7684\u94fe\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u94fe\u4e2d\u6743\u503c\u6700\u5c0f\u503c\u6700\u5927\u3002\n\n\u8fd9\u91cc\u94fe\u7684\u6743\u503c\u5b9a\u4e49\u4e3a\u94fe\u4e0a\u6240\u6709\u8fb9\u6743\u4e4b\u548c\u3002\n\n## \u601d\u8def\n\n~~\u597d\u50cf\u505a\u8fc7\u4e00\u9053\u7c7b\u4f3c\u7684\u9898~~\n\n$\\texttt{undate}$\uff1a\u786e\u5b9e\u4e3a[$\\texttt{P6147}$](https://www.luogu.com.cn/problem/P6147)\u7684\u52a0\u5f3a\u7248\u3002\n\n\u770b\u5230\u6700\u5c0f\u503c\u6700\u5927\uff0c\u663e\u7136\u4e8c\u5206\u7b54\u6848\uff0c\u4e14\u6709\u5341\u5206\u660e\u663e\u7684\u5355\u8c03\u6027\uff0c\u7136\u540e $check$ \u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n$check$ \u91cc\u9762\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u6811\u5f62 $\\texttt{DP}$\uff0c\u8003\u8651\u4ece\u53f6\u5b50\u8282\u70b9\u5f80\u4e0a\u5904\u7406\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u5411\u4e0a\u5230\u7236\u4eb2\u7684\u8fb9\u53ea\u6709\u4e00\u6761\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u4ece\u8fd9\u4e2a\u8282\u70b9\u4e00\u76f4\u5f80\u4e0b\u6700\u6df1\u5e76\u6ca1\u6709\u9009\u8fdb\u94fe\u7684\u94fe\uff08\u4ee5\u4e0b\u8bb0\u4e3a $s[i]$ \uff0c\u5982\u4f55\u5f97\u5230\u8fd9\u4e2a\u503c\u8bf7\u5f80\u4e0b\u770b)\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u8981\u8fdb\u884c\u4e24\u79cd\u64cd\u4f5c\u3002\n\n+ \u82e5\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u94fe\u7684\u7aef\u70b9\uff0c\u6709\u5927\u4e8e\u76ee\u6807\u503c\u7684\u94fe\uff0c\u76f4\u63a5\u5bf9\u7b54\u6848\u8d21\u732e $+1$ \u3002\n\n+ \u82e5\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u67d0\u4e00\u6761\u94fe\uff0c\u4e24\u4e2a\u7aef\u70b9\u7684 $\\texttt{LCA}$ \uff0c\u5219\u8981\u505a\u4e00\u4e2a\u62fc\u63a5\u64cd\u4f5c\uff0c\u5c06\u4e24\u4e2a\u513f\u5b50\u7684  $s[i]+dis(fa,son_i)$ \u503c\u5408\u5e76\uff0c\u4f46\u8fd9\u4e24\u4e2a $s$ \u503c\u76f8\u52a0\u5fc5\u987b\u8981\u5927\u4e8e\u76ee\u6807\u503c\u3002\n\n\t\u5269\u4e0b\u7684\u513f\u5b50\u8282\u70b9\u4e2d\u6700\u5927\u7684 $s[i]+dis(fa,son_i)$ \u4f5c\u4e3a $s[fa]$ \u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u5148\u8981\u4f18\u5148\u6700\u5927\u5316\u5408\u5e76\u64cd\u4f5c\u7684\u6b21\u6570\uff0c\u56e0\u4e3a\u82e5\u8981\u4f18\u5148\u6700\u5927\u5316 $s[i]$ \uff0c\u5219\u53ef\u80fd\u8fd9\u7b2c $i$ \u4e2a\u8282\u70b9\u7684\u5408\u5e76\u4e2a\u6570\u4f1a\u53d8\u5c0f\uff0c\u4f46 $s[i]$ \u589e\u5927\u6700\u591a\u5bf9i\u7684\u7236\u8282\u70b9\u7684\u8d21\u732e $+1$ \u3002(\u8d2a\u5fc3\\*1\uff09\n    \n\u4f46\u662f\u5728\u4f18\u5148\u6700\u5927\u5316\u6bcf\u4e2a\u8282\u70b9\u5408\u5e76\u7684\u6b21\u6570\uff0c\u8fd8\u8981\u6b21\u4f18\u5148\u6700\u5927\u5316 $s[i]$ \uff0c\u539f\u672c\u6211\u6709\u4e00\u4e2a\u9519\u8bef\u7684\u8d2a\u5fc3\uff1a\u662f\u5148\u6392\u5e8f $s[son\\_of\\_i]$ \uff0c\u7136\u540e\u4e0d\u65ad\u5c06\u6700\u5de6\u8fb9\u7684\u6570\u548c\u6700\u53f3\u8fb9\u7684\u6570\u5408\u5e76\uff0c\u82e5\u4e0d\u80fd\u5408\u5e76\uff0c\u5219\u5c06\u6700\u5de6\u8fb9\u7684\u503c\u5220\u53bb\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u8d2a\u5fc3\u662f\u9519\u7684\uff0c\u53c2\u8003\u6837\u4f8b\uff1a`2 8 9 \u76ee\u6807\u503c:10 wrong:s[n]=8 ans:s[n]=9` \u3002\n\n\u53d1\u73b0\u8fd9\u91cc\u758f\u5ffd\u4e86\u4e00\u70b9\uff0c\u5c31\u662f\u5e94\u8be5\u9009\u62e9\u8fd9\u4e2a\u6570\u6700\u5c0f\u80fd\u5339\u914d\u7684\u6570\uff0c\u53ef\u4ee5\u7528 $\\texttt{lower\\_bound}$ \u6c42\u51fa\u3002(\u8d2a\u5fc3\\*2)\n\n\u6c42\u51fa\u90a3\u4e2a\u6570\u4e4b\u540e\uff0c\u8981\u5c06\u5b83\u5220\u53bb\uff0c\u8fd9\u91cc\u6211\u7528 $\\Large\\texttt{\u5e76\u67e5\u96c6}$ \u6765\u7ef4\u62a4\uff0c\u82e5\u7b2c $i$ \u4e2a\u6570\u88ab\u5220\u53bb\uff0c\u5c31\u5c06\u81ea\u5df1\u7684\u7236\u4eb2\u5b9a\u4e3a $i+1$ \u3002\u7136\u540e\u53d6\u4e8c\u5206\u5230\u7684\u90a3\u4e2a\u6570\u7684\u7956\u5b97\uff0c\u82e5\u8fd9\u4e2a\u7956\u5b97\u662f $s.size()+1$ \uff08\u5373\u8fd9\u4e2a\u6570\u540e\u9762\u7684\u6570\u90fd\u88ab\u5220\u5b8c\u4e86\uff09\uff0c\u5c31\u8df3\u8fc7\u8fd9\u4e2a\u6570\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((\\log\\sum val)\\times N(\\log N +\\alpha(N)))$ \uff08\u8fdc\u8fdc\u8fbe\u4e0d\u5230\u7684\uff0c~~\u672c\u4eba\u4e0d\u4f1a\u5747\u644aQwQ~~\uff09\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n #define PB push_back\n #define MP make_pair\n const int N = 5e4;\n #define pii pair<int,int>\ninline int read()\n{\n    int s = 0;\n    register bool neg = 0;\n    register char c = getchar();\n    for (; c < '0' || c > '9'; c = getchar())\n        neg |= (c == '-');\n    for (; c >= '0' && c <= '9'; s = s * 10 + (c ^ 48), c = getchar())\n        ;\n    s = (neg ? -s : s);\n    return s;\n}\n\nint a,b,p,res,s[N+10],nxt[N+10],lst[N+10],Fa[N+10];\nbool vis[N+10];\nvector<pair<int,int> >st[N+10];\n\ninline int f(int n) {\n\treturn Fa[n]==n?n:Fa[n]=f(Fa[n]);\n}\n\ninline void dfs(int n,int fa) {\n\ts[n]=0;\n\tvector<int> q;\n\tq.clear();\n\tfor(int i=0;i<st[n].size();i++) {\n\t\tint v=st[n][i].first,val=st[n][i].second;\n\t\tif(v==fa) continue;\n\t\tdfs(v,n);\n\t\tif(s[v]+val>=p) res++;\n\t\telse q.PB(val+s[v]);\n\t}\n\tif(!q.size()) return;\n\tif(q.size()==1) {\n\t\ts[n]=q[0];\n\t\treturn;\n\t}\n\tsort(q.begin(),q.end());\n\tfor(int i=0;i<=(int)q.size();i++) Fa[i]=i,vis[i]=0;\n\tfor(int i=0;i<(int)(q.size()-1);i++) {\n\t\tif(vis[i]) continue;\n\t\tif(i>=q.size()-1||i==-1) break;\n\t\tint t=lower_bound(q.begin()+i+1,q.end(),p-q[i])-q.begin();\n\t\tif(t>=q.size()) continue;\n\t\tt=f(t);\n\t\tif(t>=q.size()) continue;\n\t\tif(q[t]+q[i]<p) continue;\n\t\tvis[t]=1;\n\t\tvis[i]=1;\n\t\tFa[t]=t+1;\n\t\tres++;\n\t}\n\tfor(int i=(int)(q.size()-1);i>=0;i--) if(!vis[i]) {\n\t\ts[n]=q[i];\n\t\tbreak;\n\t}\n}\n\ninline bool check(int n) {\n\tp=n;\n\tres=0;\n\tdfs(1,0);\n\treturn res>=b;\n}\n\nsigned main()\n{\n//\tfreopen(\"in.txt\",\"r\",stdin);\n\ta=read();\n\tb=read();\n\tint x,y,z,mx=0;\n\tfor(int i=1;i<a;i++) {\n\t\tx=read();\n\t\ty=read();\n\t\tz=read();\n\t\tmx+=z;\n\t\tst[x].PB(MP(y,z));\n\t\tst[y].PB(MP(x,z));\n\t}\n\tint l=1,r=mx,ans=0;\n\twhile(l<=r) {\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)) l=mid+1,ans=mid;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1607047930,
        "uid": 184549,
        "name": "RedreamMer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "## \u514d\u8d23\u58f0\u660e\uff0c\u7eaf\u5c5e\u4e2a\u4eba\u89c1\u89e3\uff0c\u501f\u9274dalao\u4f1a\u653e\u51fa\u5904\uff0c\u4e0d\u559c\u52ff\u55b7\n\n\u554a\uff0c\uff0c\u53c8\u662f\u4e00\u9053\u8d2a\u5fc3\u597d\u9898\u554a\u3002\u53ef\u80fd\u662f\u592a\u5f31\u4e86\uff0c\u770b\u61c2chen_zhe\u5de8\u4f6c\u7684\u4ee3\u7801\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\u3002\n\n**\u53c8\u662f\u4e00\u4e2a\u8ba9\u6211\u8fd9\u79cd\u849f\u84bb\u770b\u6765\u5b8c\u5168\u65e0\u6cd5\u4e0a\u624b\u7684\u9898\u554a\uff0c\u628a\u6811\u89e3\u6784\u7684\u529f\u592b\u8fd8\u662f\u8981\u82b1\u65f6\u95f4\u53bb\u7ec3\u7684\u3002**\n\n[\u9898\u9762](https://www.luogu.org/problem/P5021)\n\n\u6700\u5c0f\u503c\u6700\u5927\uff0c\u518d\u52a0\u4e0a\u9898\u76ee\u8981\u6c42\uff0c\u771f\u7684\u5728\u5f3a\u70c8\u7684\u6697\u793a\u60a8\u53bb\u4e8c\u5206\uff0c\u4f46\u663e\u7136\u6697\u793a\u4e86\u4e5f\u662f\u4e0d\u4f1a\u7684\u3002\n\n\u90e8\u5206\u5206\u8fd8\u662f\u6bd4\u8f83\u6c34\u7684\uff0c40\u5206\u7684\u6811\u7684\u76f4\u5f84\uff0c\u8fd8\u670915\u94fe\u4e0a\u4e8c\u5206\u3002\n\n\u5176\u5b9e\u8fd9\u9898\u7684\u83ca\u82b1\u56fe\u7684\u5206\u70b9\uff0c\u5176\u5b9e\u540e\u6765\u60f3\u60f3\u771f\u7684\u662f\u5728\u5f3a\u70c8\u7684\u6697\u793a\u6ee1\u5206\u7b97\u6cd5$->multiset$\u3002\n\n\u6211\u4eec\u51b7\u9759\u5206\u6790\uff0c\u5c31\u628a\u8d2a\u5fc3\u7b56\u7565\u653e\u5230\u4e86\u5b50\u6811\u4e0a\uff0c\u6211\u4eec\u53d1\u73b0\u5c3d\u53ef\u80fd\u7684\u5728\u5b50\u6811\u4e2d\u89e3\u51b3\u95ee\u9898\u7684\u7b56\u7565\u662f\u4f18\u7684\uff0c\u800c\u4e14\u6211\u4eec\u53c8\u53ef\u4ee5\u53bb\u76f4\u89c2\u7684\u60f3\u5230\u8ba9\u6ee1\u8db3\u8981\u6c42\u7684\u540c\u65f6\u6d6a\u8d39\u5c3d\u53ef\u80fd\u7684\u5c11\u3002\n\n**\u4e8e\u662f\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6811\u5f00\u4e00\u4e2a$multiset$\u53bb\u7ef4\u62a4\u5b50\u8282\u70b9\u5269\u4f59\u7684\u6700\u957f\u8def\u5f84\uff0c\u4f18\u5148\u53bb\u5339\u914d\u5c0f\u7684**\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u7ed9\u7236\u8282\u70b9\u7559\u4e00\u4e2a\u5927\u7684\u957f\u5ea6\u80af\u5b9a\u6bd4\u4e00\u4e2a\u8f83\u5c0f\u7684\u957f\u5ea6\u66f4\u5bb9\u6613\u53bb\u6ee1\u8db3\u4e8c\u5206\u4e0b\u9650\uff0c\u800c\u8f83\u5c0f\u7684\u8fb9\u53c8\u662f\u6bd4\u8f83\u96be\u4ee5\u5904\u7406\u7684\u5b83\u4eec\u4f1a\u6d88\u8017\u66f4\u591a\u7684\u8fb9\uff0c\u6211\u4eec\u7684\u8d2a\u5fc3\u7b56\u7565\u662f\u5c3d\u53ef\u80fd\u7684\u5728\u5b50\u6811\u4e2d\u89e3\u51b3\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5148\u5e72\u6389\u5269\u4f59\u957f\u5ea6\u8f83\u5c0f\u7684\u5b50\u8282\u70b9\uff0c\u800c\u4e14\u9009\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u4e0d\u80fd\u8fdb\u884c\u5339\u914d\u7684\u5411\u4e0a\u4f20\u9012\u3002\n\n***\u597d\u4e86\u5230\u8fd9\u91cc\u4e5f\u5c31\u5dee\u4e0d\u591a\u4e86\u5b9e\u73b0\u662f\u771f\u7684\u4e0d\u96be\u5c31\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u60f9\uff0c\u90a3\u6211\u5c31\u628a\u4ee3\u7801\u8001\u5b9e\u4ea4\u51fa\u6765\u5427***\n\n***Code***\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <set>\nusing namespace std;\nint read(){\n\tint w=1,x=0,ch=getchar();\n\tfor(;ch<'0'||ch>'9';ch=getchar())if(ch=='-')w=-1;\n\tfor(;ch>='0'&&ch<='9';ch=getchar())x=x*10+ch-'0';\n\treturn x*w;\n}\nconst int MAXN = (int)5e4+10;\nint n,m;\nstruct Edge{\n\tint from,to,val,nxt;\n\tEdge(int from,int to,int val,int nxt){\n\t\tthis->from = from;\n\t\tthis->to = to;\n\t\tthis->val = val;\n\t\tthis->nxt = nxt;\n\t}Edge(){\n\t}\n}E[MAXN<<1];\nint head[MAXN],tot;\ninline void Add_Edge(int from,int to,int val){\n\tE[++tot] = Edge(from,to,val,head[from]),head[from] = tot;\n}\ninline long long Dfs(int x,int fa,long long &len,long long lim){\n\tlong long ans = 0;\n\tmultiset<long long>s;\n\tfor(int i=head[x];i;i=E[i].nxt){\n\t\tint to = E[i].to;\n\t\tif(to==fa)continue;\n\t\tlong long res;\n\t\tans += Dfs(to,x,res,lim);\n\t\tres += E[i].val;\n\t\tif(res>=lim){\n\t\t\tans ++ ;\n\t\t}\n\t\telse {\n\t\t\ts.insert(res);\n\t\t}\n\t}\n\tlen = 0;\n\twhile(!s.empty()){\n\t\tlong long res = *s.begin();\n\t\ts.erase(s.begin());\n\t\tmultiset<long long>::iterator it = s.lower_bound(lim-res);\n\t\tif(it!=s.end()){\n\t\t\tans ++;\n\t\t\ts.erase(it);\n\t\t}else {\n\t\t\tlen = max(len,res);\n\t\t}\n\t}\n\treturn ans;\n}\nlong long Dp[MAXN],upper_dis = 0;\nvoid Get_Max(int x,int pre){\n\tfor(int i=head[x];i;i=E[i].nxt){\n\t\tint to = E[i].to;\n\t\tif(to==pre)continue;\n\t\tGet_Max(to,x);\n\t\tupper_dis = max(upper_dis,Dp[x]+Dp[to]+E[i].val);\n\t\tDp[x] = max(Dp[x],Dp[to]+E[i].val);\n\t}\n}\ninline long long Solve(){\n\tlong long l = 0,r = upper_dis;\n\tlong long ans = 0;\n\twhile(l<=r){\n\t\tlong long mid = l+r >> 1,res;\n\t\tif(Dfs(1,1,res,mid)>=m)ans = mid,l = mid + 1;\n\t\telse r = mid - 1;\n\t}\n\treturn ans;\n}\nint main(){\n\tn = read(),m = read();\n\tfor(int i=1;i<n;i++){\n\t\tint x = read(),y = read(),val = read();\n\t\tAdd_Edge(x,y,val),Add_Edge(y,x,val);\n\t}\n\tGet_Max(1,1);\n\tcout<<Solve();\n\treturn 0;\n}\n\n```\n***\u898b\u3066\u304f\u308c\u3066\u3042\u308a\u304c\u3068\u3046***",
        "postTime": 1569194595,
        "uid": 165030,
        "name": "Sweetie_Liu",
        "ccfLevel": 6,
        "title": "P5021 \u8d5b\u9053\u4fee\u5efa"
    },
    {
        "content": "\u8fd9\u9898\u90e8\u5206\u5206\u7b97\u6cd5\u63d0\u793a\u5f97\u5f88\u76f4\u63a5\uff08\u53c8\u662f\u83ca\u82b1\u56fe\u53c8\u662f\u94fe\u7684\uff09\n\n\u672c\u4eba\u8d5b\u573a\u4e0a\u8fc7\u5206\u81ea\u4fe1\u6ca1\u770b\u90e8\u5206\u5206\u5bfc\u81f430\u5206\u949f\u624d\u60f3\u51fa\u6765;\n\n------------\n\n\u601d\u8def\u5f62\u6210\uff1a\n\u7b2c\u4e00\u60f3\u6cd5\u80af\u5b9a\u8981\u4e8c\u5206\u7b54\u6848,\u867d\u7136\u6709\u7684\u9898\u8fd9\u4e2a\u5957\u8def\u4e0d\u9002\u7528,\u6bd5\u7adf\u8fd8\u662f\u8981\u4f9d\u7167\u9898\u76ee\u6027\u8d28\u60f3\u7b97\u6cd5.\u5982\u679c\u6362\u6839dp\u4e4b\u7c7b\u7684\u9898\u76ee\u505a\u591a\u6211\u4eec\u80fd\u5927\u81f4\u60f3\u5230\u6bcf\u66f4\u6539\u4e00\u4e2a\u5f53\u524d\u8282\u70b9\u7ef4\u62a4\u4e00\u4e9b\u4fe1\u606f\u4e4b\u7c7b\u7684\u65b9\u5411.\u8003\u8651\u4e00\u5f00\u59cb\u4f60\u6709\u8fb9\u6761\u6570\u4e2a\u8d5b\u9053,\u5982\u679c\u4e24\u4e2a\u4e0d\u7b26\u5408mid\u7684\u8d5b\u9053\u5408\u5e76\u8d77\u6765\u662f\u6709\u53ef\u80fd\u5f97\u5230\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u8d5b\u9053\u7684,\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u4e2a\u7236\u4eb2\u8282\u70b9\u6700\u591a\u53ea\u80fd\u627f\u63a5\u4e00\u6761\u8d5b\u9053\u5411\u4e0a\u7ee7\u627f\uff1b\n\n\n------------\n\n\n\u6b63\u89e3\u6210\u5f62\uff1a\u4e8b\u5b9e\u4e0a\u6211\u4eec\u53ef\u4ee5\u4ece\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4ece\u4e0b\u81f3\u4e0a\u7ef4\u62a4\u5e76\u7edf\u8ba1.\n\n\u73b0\u5728\u7684\u95ee\u9898\u8f6c\u6362\u6210\u6709\u82e5\u5e72\u6761\u8d5b\u9053\u76ee\u7684\u5730\u662f\u73b0\u5728dfs\u5728\u7684\u8fd9\u4e2a\u70b9,\u6211\u4eec\u8bb2\u4e0d\u7b26\u5408mid\u7684\u8d5b\u9053\u4e24\u4e24\u5408\u5e76\uff0c\u4f46\u662f\u5408\u5e76\u7684\u8fc7\u7a0b\u8981\u6ce8\u610f\u5c3d\u53ef\u80fd\u7559\u4e0b\u957f\u7684\u9053\u8def,\u4e5f\u5c31\u662f\u5bf9\u7b54\u6848\u4ea7\u751f\u6700\u5927\u8d21\u732e\u7684\u540c\u65f6\u627e\u51fa\u6700\u5927\u7684\u90a3\u4e2a\u5269\u4e0b\u7684\u76ee\u524d\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u8d5b\u9053\uff08\u8fd9\u4e00\u6b65\u662f\u5bf9\u4e8e\u5408\u5e76\u5b8c\u4e4b\u540e\u7684\uff09,\u540c\u65f6\u8981\u4fdd\u8bc1\u6bcf\u4e00\u6b21\u5408\u5e76\u7684\u7ed3\u679c\u90fd\u662f\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u7684,\u65e0\u8d21\u732e\u7684\u5408\u5e76\u6beb\u65e0\u610f\u4e49,\u56e0\u4e3a\u5b83\u5df2\u7ecf\u4e0d\u80fd\u88ab\u4efb\u4f55\u627f\u63a5.\n\n\uff08\u8d2a\u5fc3\u7ef4\u62a4\u7684\u65f6\u5019\u8981\u6ce8\u610f\u8ba9\u5c0f\u8fb9\u5c3d\u53ef\u80fd\u548c\u5c0f\u8fb9\u5408\u5e76,\u8fd9\u5f88\u91cd\u8981\u5f88\u591a\u4eba\u5ffd\u7565\uff09\n\n\u8fd9\u91cc\u8d2a\u5fc3\u7ef4\u62a4\u6211\u7528\u7684\u53cc\u6307\u9488\u6cd5,\u4e0d\u4f1a\u4ed6\u4eec\u8bf4\u7684\u4e8c\u5206,\u94fe\u5f0f\u524d\u5411\u661f\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6log(n*10000) *(mlogm+m)\u6b64\u5904\u7684mlogm\u662f\u5747\u644a\u7684\u6240\u4ee5\u4f1a\u6bd4\u5b9e\u9645\u6765\u7684\u5927\u3002\n \u4ee5\u4e0b\u662f\u4ee3\u7801 \u6709\u538b\u884c\u6240\u4ee5\u7528\u6237\u4f53\u9a8c\u5e94\u8be5\u4e0d\u592a\u597d\n\n------------\n\n**\u8c28\u4ee5\u6b64\u9898\u89e3\u94ed\u8bb0\u6211noip\u5b9e\u529b\u4ee5\u53ca\u7b56\u7565\u4e0d\u8db3\u65f6\u4ea7\u751f\u7684\u9519_sak__fail_ **\n\u6240\u6709\u4e8b\u6545\u90fd\u662f\u6e90\u4e8e\u5f53\u4e8b\u8005\u80fd\u529b\u4e0d\u8db3\u9020\u6210\u7684\n\n```cpp\n#include<bits/stdc++.h>\n#define N 50010*2\nusing namespace std;\nint las[N],to[N],nxt[N],val[N],n,m,mid,cnt,ans;\nint tas[N],txt[N],tal[N],num[N]; \nvoid dfs(int x,int fa,int now){\n\tfor(int i=las[x];i;i=nxt[i])if(to[i]!=fa)dfs(to[i],x,i);\n\tint res=0,p=0,pid,l,r,op=0,part=0;\n\tfor(int i=tas[x];i;i=txt[i])num[++p]=tal[i];\n\t\n\tsort(num+1,num+p+1),l=1,r=p;if(num[l]<mid&&p!=0){\n\t \twhile(l<=r){\n\t \t\tpid=l+r>>1;if(num[pid]<mid)l=pid+1;\n\t\t\telse r=pid-1;\n\t\t}l=1;\n\t\twhile(l<=r){\n\t\t\twhile(l<r&&num[r]+num[l]>=mid){\n\t\t\t if(op==0)part=num[r];\n\t\t\t r--,op++;\n\t\t\t} \n\t\t\tif(op>0){op--,ans++;if(op==0)part=0;}\n\t\t\telse res=num[l];l++;\n\t\t}ans+=op/2;if(op%2==0)part=0;\n\t}\n\tres=max(res,part);if(res+val[now]>=mid)ans++;\n\ttxt[++cnt]=tas[fa],tas[fa]=cnt,tal[cnt]=res+val[now];\n}\nint main(){\n\tcin>>n>>m;int x,l=1,r=n*10000;for(int i=1,c=n*2-2;i<=c;i+=2)\n\t scanf(\"%d%d%d\",&x,&to[i],&val[i]),to[i+1]=x,val[i+1]=val[i],\n\t nxt[i]=las[x],las[x]=i,nxt[i+1]=las[to[i]],las[to[i]]=i+1;\n\t\n\twhile(l<=r){\n\t\tmemset(tas,0,sizeof tas),mid=l+r>>1,cnt=0,ans=0,dfs(1,0,0);\n\t\tif(ans<m)r=mid-1;else l=mid+1;\n\t}cout<<r;\n}\n```",
        "postTime": 1542418515,
        "uid": 59907,
        "name": "Sakura_\u68a6\u7476",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "## Solution\n\n\u603b\u4f53\u601d\u8def\uff1a\u5047\u8bbe\u7b54\u6848\u662f a \uff0c\u6211\u4eec\u8981\u627e\u5230\u81f3\u5c11 m \u6761\u957f\u5ea6\u4e3a a \u7684\u8def\u5f84\u4e14\u4e0d\u91cd\u53e0\u3002\n\n\u4ffa\u4eec\u5148\u770b\u770b\u6570\u636e\u8303\u56f4\uff1a$n,m\\leq 5\\times10^4$ \u63a5\u8fd1 $10^5$ \uff0c\u6240\u4ee5~~\u5f88\u5bb9\u6613~~\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u4e8c\u5206\u90e8\u5206\uff1a\n\n```c++\nint l=1,r=sum/m,ans=0;\n    while (l<=r)\n\t{ \n        mid=(l+r)>>1;\n        cnt=0;\n        dfs(rt,0);\n        if (cnt>=m) ans=mid,l=mid+1;\n        else r=mid-1;\n    }\n```\n\n\u63a5\u4e0b\u6765\u5eb7\u5eb7\u601d\u8def\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9$u$\u548c\u7236\u4eb2$fa$\uff0c\u5b50\u6811$v_1,v_2,\u2026\u2026,v_k$\uff0c\u7ecf\u8fc7u\u7684\u8def\u5f84\u6709\u8fd9\u4e48\u51e0\u79cd\uff1a\n\n1. $v_i\\ -\\!\\!\\!> u \\ -\\!\\!\\!> v_j$\n2. $v_i\\ -\\!\\!\\!> u \\ -\\!\\!\\!> fa$\n\n\u663e\u7136\u540e\u9762\u4e00\u79cd\u53ea\u6709\u53ef\u80fd\u6709\u4e00\u6761\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u5c3d\u91cf\u591a\u5730\u4f7f\u7528\u7b2c\u4e00\u79cd\u8def\u5f84\uff0c\u5c06\u65e0\u6cd5\u914d\u5bf9\u7684\u6700\u957f\u7684\u4e00\u6761\u7528\u4e8e\u7b2c\u4e8c\u79cd\u3002\n\n## Code\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=50005,MAXM=100005;\nint n,m,sum,rt,cnt,mid;\nint hd[MAXN],nxt[MAXM],v[MAXM],w[MAXM],tot=0;\nvoid add_edge(int x,int y,int z)\n{\n    v[++tot]=y;\n\tw[tot]=z;\n\tnxt[tot]=hd[x];\n\thd[x]=tot;\n}\nint dfs(int u,int fa)\n{\n    int ret=0,x;\n    multiset<int> ms;\n    multiset<int>::iterator it;\n    for (int i=hd[u];i;i=nxt[i])\n        if (v[i]!=fa)\n\t\t{\n            x=w[i]+dfs(v[i],u);\n            if (x>=mid) cnt++;\n            else ms.insert(x);\n        }\n    while (!ms.empty())\n\t{\n        it=ms.begin();\n        x=*it;\n        ms.erase(it);\n        it=ms.lower_bound(mid-x);\n        if (it!=ms.end())\n\t\t{\n            ++cnt;\n            ms.erase(it);\n        }\n\t\telse ret=max(ret,x);\n    }\n    return ret;\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n    cin>>n>>m;\n    int x,y,z;\n    for (int i=1;i<n;i++)\n\t{\n        cin>>x>>y>>z;\n        add_edge(x,y,z),add_edge(y,x,z);\n        sum+=z;\n    }\n    rt=rand()%n+1;\n    int l=1,r=sum/m,ans=0;\n    while (l<=r)\n\t{ \n        mid=(l+r)>>1;\n        cnt=0;\n        dfs(rt,0);\n        if (cnt>=m) ans=mid,l=mid+1;\n        else r=mid-1;\n    }\n    cout<<ans;\n    return 0;\n}\n```\n\n",
        "postTime": 1604585727,
        "uid": 148507,
        "name": "_Imaginary_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "# P5021 \u8d5b\u9053\u4fee\u5efa \u9898\u89e3\n\n- ## \u5199\u5728\u524d\u9762\n\n> \u770b\u5230\u6700\u5927\u7684\u6700\u5c0f\uff0c\u6216\u8005\u6700\u5c0f\u7684\u6700\u5927\uff0c\u6211\u4eec\u4e00\u822c\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\u8fd9\u4e2a\u65f6\u5019check\u51fd\u6570\u5c06\u4f1a\u6210\u4e3a\u6574\u4e2a\u7a0b\u5e8f\u7684\u91cd\u70b9\u5185\u5bb9\u3002\u4e00\u4e2a\u4f18\u79c0\u7684check\u51fd\u6570\u53ef\u4ee5AC\u4e00\u4e2a\u9898\u76ee\uff0c\u4f46\u662f\u4e5f\u53ef\u80fd\u9001\u4f60AFO\u3002\n\n\uff08\u4ee5\u4e0a\u7eaf\u5c5e\u53e3\u80e1\u2026\u2026\uff09\n\n- ## \u89e3\u9898\u601d\u8def\n\n- **\u663e\u7136\u7b97\u6cd5\u662f\u4e8c\u5206\u7b54\u6848+\uff1f**\n\n\u56e0\u4e3a\u6811\u4e0a\u6700\u957f\u7684\u7b80\u5355\u8def\u5f84\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7\u6811\u7684\u76f4\u5f84\uff0c\u6240\u4ee5\u4e8c\u5206\u7684\u4e0a\u754c\u662f\u6811\u7684\u76f4\u5f84\uff0c\u4e0b\u754c\u662f\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u3002\n\n\u4f46\u662f\u9898\u76ee\u8981\u6c42\u7684\u662f\u6700\u5c0f\u5730\u5c3d\u91cf\u5927\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6240\u5c0f\u7684\u662f\u4e8c\u5206\u7684\u4e0b\u754c\u5373 $l$\uff0c\u800c\u5bf9\u4e8e $C++$ \uff0c\u9664\u6cd5\u662f\u5411\u4e0b\u53d6\u6574\u7684\uff0c\u6211\u4eec $check$ \u7684\u65f6\u5019\u8981\u5411\u4e0a\u9760\u62e2\uff0c\u4e5f\u5c31\u662f\u5411\u4e0a\u53d6\u6574\uff0c\u6240\u4ee5\u8fd9\u6837\u5199\u662f\u4f1a\u6b7b\u5faa\u73af\u7684\uff1a\n\n~~~cpp\nwhile(l < r) {\n\tmid = (l + r) >> 1;\n\tif(check()) l = mid;\n\telse r = mid - 1;\n} printf(\"%d\\n\", l);\n\n~~~\n\n\u4e5f\u5c31\u662f\u56e0\u4e3a $(l+r) >>1$ \u5411 $l$ \u9760\u62e2\uff0c\u5bfc\u81f4 $l$ \u6700\u540e\u4f1a\u7b49\u4e8e $r-1$\uff0c\u6b63\u786e\u7684\u5199\u6cd5\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a\n\n~~~cpp\nwhile(l < r) {\n\tmid = (l + r + 1) >> 1;\n\tif(check()) l = mid;\n\telse r = mid - 1;\n} printf(\"%d\\n\", l);\n\n~~~\n\n\n\n\u8fd9\u91cc $(l+r+1)>>1$ \u5176\u5b9e\u5c31\u662f $(l+r)/2$ \u4e0a\u53d6\u6574\u4e86\u3002\n\n$check()$~~\u51fd\u6570\u771f\u7684\u53ef\u4ee5\u9001\u4f60~~ $AFO$ ~~\u7684\u2026\u2026~~\n\n- ### \u63a5\u4e0b\u6765\u8003\u8651 $check()$ \u51fd\u6570\u600e\u4e48\u5199\n\n\u9996\u5148\u6709\u4e00\u4e2a\u9650\u5236\u6761\u4ef6 $m$ \uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u6700\u540e\u9009\u51fa\u6765\u7684\u8def\u5f84\u591a\u4e8e $m$ \u6761\uff0c\u8fd9\u56de\u6210\u4e3a $check()$ \u51fd\u6570\u7684\u4e00\u4e2a\u6761\u4ef6\u3002\n\n\u63a5\u4e0b\u6765\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6811\u4e0a\u8282\u70b9 $x$\uff0c\u5b83\u5728\u4e00\u6761\u8def\u5f84\u4e0a\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1. \u8def\u5f84\u7684\u7aef\u70b9\u3002\n\n2. \u8def\u5f84\u4e2d\u7684\u70b9\uff0c\u8fd9\u6837\u7684\u70b9\u53ea\u8d77\u5230\u4f20\u9012\u7684\u4f5c\u7528\u3002\n\n3. \u8def\u5f84\u7684\u8f6c\u6298\u70b9\uff0c\u5373\u8def\u5f84\u4ece\u7aef\u70b9\u5411\u4e0a\u8d70\u7a81\u7136\u5411\u4e0b\u94bb\u5165\u53e6\u4e00\u68f5\u5b50\u6811\u7684\u8f6c\u6298\u70b9\u3002\u5982\u679c\u8fd9\u6761\u8def\u5f84\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u90a3\u4e48\u8f6c\u6298\u70b9\u5c31\u662f\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u3002\n\n\u5176\u4e2d\u8def\u5f84\u7684\u8f6c\u6298\u70b9\u662f\u975e\u5e38\u5173\u952e\u7684\u4e00\u4e2a\u70b9\uff0c\u5b83\u622a\u65ad\u4e86\u4e00\u6761\u8def\u5f84\u3002\n\n\u5bf9\u4e8e\u4ee5 $x$ \u4e3a\u7aef\u70b9\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4 $g$ \u8bb0\u5f55\u3002\u663e\u7136\u8def\u5f84\u957f\u5ea6\u662f\u4ece $x$ \u7684\u513f\u5b50\u8282\u70b9\u8f6c\u79fb\u6765\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u4e0b\u5411\u4e0a\u66f4\u65b0\u4fe1\u606f\u3002\u663e\u7136\u5bf9\u4e8e\u8def\u5f84\u7684\u8f6c\u6298\u70b9\u6709 $g_x=0$\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u622a\u65ad\u4e00\u6761\u8def\u5f84\u4e86\uff08\u6211\u4eec\u53ef\u4ee5\u5728\u62fc\u63a5\u8def\u5f84\u662f\u5224\u65ad\u662f\u5426\u66f4\u65b0$g_x$\uff09\n\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u5f88\u597d\u8003\u8651\u4e86\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\uff08\u5b9a\u4e49\u6570\u7ec4 $f_x$ \u8868\u793a\u4ee5 $x$ \u4e3a\u6839\u7684\u8d5b\u9053\u6570\u91cf\uff09\n\n1. $val_x\u2265mid$\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u8ba9 $f_x+1$ \u800c\u4e0d\u66f4\u65b0 $val$\uff08\u6ce8\u610f\u8fd9\u91cc\u7684val_x\u4e0e$g_x$\u5b9a\u4e49\u76f8\u540c\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u7b49\u4e8e$g_x$\uff0c\u56e0\u4e3a$g_x$\u8d77\u5230\u622a\u65ad\u548c\u8f6c\u79fb\u7684\u4f5c\u7528\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u8ba9\u5f53\u524d\u6240\u6709\u7684 $val$ \u4ece\u5927\u5230\u5c0f\u6392\uff0c\u8fd9\u6837\u6ee1\u8db3\u6700\u4f18\u6027\u8d28\u3002\n\n2. $val_x < mid$\uff0c\u8fd9\u4e2a\u65f6\u5019\u53c8\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- \u80fd\u5728\u4ed6\u5b50\u6811\u4e2d\u627e\u5230**\u53e6\u4e00\u6761**\uff08\u6ce8\u610f\u4e0d\u662f\u521a\u521a\u66f4\u65b0\u4e0a\u6765\u7684\u90a3\u6761\uff09\u8def\u5f84\u548c\u5b83\u62fc\u5728\u4e00\u8d77\u6ee1\u8db3$val_x+val'\u2265mid$\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd9\u6761\u8def\u5f84\u4e5f\u662f\u6ee1\u8db3\u8981\u6c42\u7684\uff0c\u4e5f\u4e0d\u9700\u8981\u66f4\u65b0 $g_x$\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f $f_x++$\u3002\n\n- \u53e6\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u627e\u4e0d\u5230\uff0c\u90a3\u4e48 $x$ \u5c31\u8fd8\u9700\u8981\u7ee7\u7eed\u5411\u4e0a\u4f20\u9012\u4fe1\u606f\uff0c\u8fd9\u4e2a\u65f6\u5019\u8981\u66f4\u65b0 $g_x$\u3002\n\n\u5bf9\u4e8e $2$ \u7684\u4e24\u5f20\u60c5\u51b5\u6211\u4eec\u5e94\u8be5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\uff0c\u53ef\u4ee5\u6ee1\u8db3\u6700\u4f18\u6027\uff0c\u56e0\u4e3a\u53ea\u8981\u627e\u5230\u4e00\u4e2a $val'$ \u53ef\u4ee5\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e14\u5373\u4f7f\u627e\u4e0d\u5230\u6211\u4eec\u4e5f\u8981\u8ba9 $g_x$ \u7684\u503c\u5c3d\u91cf\u5c0f\u7684\u524d\u63d0\u4e0b\u5c3d\u91cf\u5730\u5927\uff08\u8fd9\u6837\u624d\u6ee1\u8db3\u9898\u610f\uff0c\u56e0\u4e3a\u662f\u6700\u77ed\u7684\u8def\u5f84\u6700\u957f\uff09\u3002\n\n\u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u4e9b\u60c5\u51b5\u7684\u6b63\u786e\u66f4\u65b0\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a $mutiset$ \u8fdb\u884c\u7ef4\u62a4\u3002\u5e76\u4e14\u5bf9\u4e8e $x$ \u7684\u5b50\u6811\u7684 $val$ \u5728 $mutiset$ \u4e2d\u540c\u65f6\u66f4\u65b0\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u5f71\u54cd\u5230\u540e\u9762\u7684\u51b3\u7b56\uff0c\u4e5f\u80fd\u4fdd\u8bc1\u6211\u4eec\u5224\u65ad\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u7684\u65f6\u5019\u6b63\u786e\u5730\u628a\u4e24\u6761\u94fe\u8fde\u5728\u4e00\u8d77\uff0c\u800c\u4e0d\u662f\u65ad\u5f00\u7684\u3002\n\n\u6211\u4eec\u6309\u7167\u4e0a\u9762\u8fd9\u79cd\u65b9\u5f0f\u5c31\u53ef\u4ee5\u5b9e\u73b0 $Check()$ \u51fd\u6570\u4e86\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nlogn)$\u3002\n\n~~~cpp\n\nmultiset<int> s;\nmultiset<int> :: iterator it;\nint n, m, mid;\nvoid check(int x, int fa) {\n\tfor(int i = head[x]; i; i = e[i].next) {\n\t\tint y = e[i].to;\n\t\tif(y == fa) continue;\n\t\tcheck(y, x);\n\t\tf[x] += f[y];\n\t\t\n\t}\n\t\n\tfor(int i = head[x]; i; i = e[i].next) { // x\u7684\u5b50\u6811\u540c\u65f6\u66f4\u65b0\n\t\tint y = e[i].to;\n\t\tif(y == fa) continue;\n\t\ts.insert(e[i].val + g[y]);\n                // \u5bf9\u4e8e x \u7684\u6240\u6709val\u5168\u90e8\u63d2\u5165\n                // \u5373\u6bcf\u4e00\u6761\u5230x\u7684\u8d5b\u9053\u957f\u5ea6\n\t}\n\t\n\twhile(s.size()) {\n\t\tint now = *--s.end(); // \u4ece\u5927\u5230\u5c0f\u679a\u4e3e\n\t\tif(now >= mid) { // \u6ee1\u8db3\u6761\u4ef6\n\t\t\tf[x]++;\n\t\t\ts.erase(--s.end());\n\t\t}\n\t\telse break;\n\t}\n\t\n\twhile(s.size()) {\n\t\tint now = *s.begin();\n\t\ts.erase(s.begin());\n\t\tit = s.lower_bound(mid - now);\n\t\tif(it == s.end()) g[x] = now; // \u65e0\u6cd5\u548c\u5176\u4ed6\u8def\u62fc\u5728\u4e00\u8d77\n\t\telse { // \u53ef\u4ee5\u62fc\u5728\u4e00\u8d77\n\t\t\tf[x]++;\n\t\t\ts.erase(it);\t\n\t\t}\n\t}\n}\n\n~~~\n\n- \u8fd9\u91cc\u6709\u51e0\u4e2a\u7ec6\u8282\uff1a\n\n1. $mutiset$ \u4e2d $s.end()$ \u8fd4\u56de\u7684\u662f $s$ \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u7684\u4e0b\u4e00\u4f4d\uff0c\u56e0\u6b64 $--s.end()$ \u624d\u662f $s$ \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002\n\n2. $s.erase(--s.end())$ \u662f\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u5220\u9664\uff0c\u5982\u6709\u591a\u4e2a\u5c31 $-1$, \u800c\u4e0d\u662f\u628a\u6574\u4e2a $s.end()$ \u90fd\u5220\u9664\u4e86\u3002\n\n- \u8c03\u7528 $check(1, 0)$\uff0c\u6700\u540e\u7684\u5224\u5b9a\u6761\u4ef6\u5c31\u662f $f[1]\u2265m$\n\n- \u7136\u540e\u6211\u4eec\u77e5\u9053\u771f\u6b63\u7684\u7b97\u6cd5\u662f**\u4e8c\u5206\u7b54\u6848+\u8d2a\u5fc3**\u4e86 $Orz$ \u2026\u2026\n\n------------\n\n\n\u5b8c\u6574$Code$\n------------\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 5e4 + 10;\nstruct Edge {\n\tint next, to, val;\n}e[N << 1];\nint head[N], f[N], g[N];\nvoid add(int from, int to, int val) {\n\tstatic int cnt = 0;\n\te[++cnt].to = to;\n\te[cnt].val = val;\n\te[cnt].next = head[from];\n\thead[from] = cnt;\n}\n\nmultiset<int> s;\nmultiset<int> :: iterator it;\nint n, m, mid;\nvoid check(int x, int fa) {\n\tfor(int i = head[x]; i; i = e[i].next) {\n\t\tint y = e[i].to;\n\t\tif(y == fa) continue;\n\t\tcheck(y, x);\n\t\tf[x] += f[y];\n\t\t\n\t}\n\t\n\tfor(int i = head[x]; i; i = e[i].next) {\n\t\tint y = e[i].to;\n\t\tif(y == fa) continue;\n\t\ts.insert(e[i].val + g[y]);\n\t}\n\t\n\twhile(s.size()) {\n\t\tint now = *--s.end();\n\t\tif(now >= mid) {\n\t\t\tf[x]++;\n\t\t\ts.erase(--s.end());\n\t\t}\n\t\telse break;\n\t}\n\t\n\twhile(s.size()) {\n\t\tint now = *s.begin();\n\t\ts.erase(s.begin());\n\t\tit = s.lower_bound(mid - now);\n\t\tif(it == s.end()) g[x] = now;\n\t\telse {\n\t\t\tf[x]++;\n\t\t\ts.erase(it);\t\n\t\t}\n\t}\n}\n\nlong long d[N], r;\nbool v[N];\nvoid dp(int x) { // \u6811\u7684\u76f4\u5f84 \n\tv[x] = 1;\n\tfor(int i = head[x]; i; i = e[i].next) {\n\t\tint y = e[i].to;\n\t\tif(v[y]) continue;\n\t\tdp(y);\n\t\tr = max(r, d[x] + d[y] + e[i].val);\n\t\td[x] = max(d[x], d[y] + e[i].val);\n\t}\n}\n\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\tfor(int i = 1, x, y, v; i < n; i++) {\n\t\tscanf(\"%d %d %d\", &x, &y, &v);\n\t\tadd(x, y, v);\n\t\tadd(y, x, v);\n\t}\n\tdp(1);\n\tint l = 1;\n\twhile(l < r) {\n\t\tmemset(f, 0, sizeof(f));\n\t\tmemset(g, 0, sizeof(g));\n\t\tmid = (l + r + 1) >> 1;\n\t\tcheck(1, 0);\n\t\tif(f[1] >= m) l = mid;\n\t\telse r = mid - 1;\n\t}\n\tprintf(\"%d\\n\", l);\n\treturn 0;\n}\n```\n\n\n------------\n\n$End$\n------------\n\n- ~~\u4f38\u51fa\u5c0f\u624b\u65e0\u803b\u6c42\u8d5e~~ $QwQ$",
        "postTime": 1573786036,
        "uid": 196649,
        "name": "xiejinhao",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P5021)\n\n[\u6233\u6211](https://www.luogu.org/blog/wjr5082/)\n\n\u8fd9\u9898splay\u6bd4multiset\u5feb\u4e863\u500d\u4ee5\u4e0a...\uff08\u6240\u4ee5\u4ee5\u540e\u679c\u65ad\u5199splay\u597d\u4e86\uff09\n\n\u5927\u81f4\u601d\u8def\u4e5f\u6709\u5f88\u591a\u4eba\u8bf4\u4e86\uff0c\u4e8c\u5206+\u6811\u5f62DP\u5c31\u884c\u4e86\uff0cDP\u65f6\u8d2a\u5fc3\uff0c\u4e0d\u96be\u53d1\u73b0\u5f53\u4e00\u9897\u5b50\u6811x\u80fd\u5339\u914d\u7684\u94fe\u6570\u6700\u5927\u65f6\uff0c\u8fc7x\u5411\u4e0a\u7684\u94fe\u503c\u8d8a\u5927\u8d8a\u597d\uff0c\u6240\u4ee5\u8bb0f\u4e3a\u6700\u5927\u5339\u914d\u6570,g\u4e3a\u5411\u4e0a\u7684\u6700\u957f\u7684\u94fe\u957f\u5c31\u597d\u4e86\uff08\u5957\u8def\uff09\n\n\u4e0b\u9762\u90fd\u7528\u7684\u624b\u5199splay\u4ee3\u66ff\u6162\u7684\u8981\u6b7b\u7684multiset(\u538b\u884c\u540e\u7684splay\u5c31\u5199\u4e8650\u591a\u884c)\n\n```c\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <set>\nusing namespace std;\nstruct Splay{\n\tint fa[51000],ch[51000][2],rt,cnt,val[51000];\n\t#define lc ch[x][0]\n\t#define rc ch[x][1]\n\tinline void rotate(int x){\n\t\tint y=fa[x];int z=fa[y];int k=ch[y][1]==x;\n\t\tch[z][ch[z][1]==y]=x;fa[x]=z;\n\t\tch[y][k]=ch[x][k^1];fa[ch[x][k^1]]=y;\n\t\tch[x][k^1]=y;fa[y]=x;\n\t}\n\tinline void splay(int x,int goal){\n\t\tint y,z;\n\t\twhile(fa[x]!=goal){\n\t\t\ty=fa[x],z=fa[y];\n\t\t\tif(z!=goal){(ch[y][1]==x)^(ch[z][1]==y)?rotate(x):rotate(y);}\n\t\t\trotate(x);\n\t\t}\n\t\tif(!goal)rt=x;\n\t}\n\tinline void new_(int x,int last){\n\t\tval[++cnt]=x;fa[cnt]=last;ch[cnt][0]=ch[cnt][1]=0;\n\t}\n\tinline void insert(int x){\n\t\tif(!rt){cnt=0;new_(x,0);rt=cnt;return;}\n\t\tint last=0,now=rt;\n\t\twhile(now){last=now;now=ch[now][x>=val[now]];}\n\t\tnew_(x,last);\n\t\tch[last][x>=val[last]]=cnt;\n\t\tsplay(cnt,0);\n\t}\n\tinline void clear(){rt=0;}\n\tinline int end(){int x=rt;while(rc)x=rc;return x;}\n\tinline int begin(){int x=rt;while(lc)x=lc;return x;}\n\tinline int last(int v){\n\t\tint id=-1,x=rt;\n\t\twhile(x){\n\t\t\tif(val[x]>=v&&(id==-1||val[x]<val[id])){id=x;}\n\t\t\tx=ch[x][v>=val[x]];\n\t\t}return id;\n\t}\n\tinline void erase(int x){\n\t\tsplay(x,0);\n\t\tint k=-1;\n\t\tif(lc)k=0;\n\t\telse if(rc)\n\t\t\t\tk=1;\n\t\telse{rt=0;return;}\n\t\tint y=ch[x][k];while(ch[y][k^1])y=ch[y][k^1];\n\t\tsplay(y,x);\n\t\tch[y][k^1]=ch[x][k^1];fa[ch[x][k^1]]=y;\n\t\trt=y;fa[y]=0;\n\t}\n}t;\nint d[51000],nxt[101000],to[101000],tot,val[101000];\ninline void ins(int a,int b,int c){\n\tto[++tot]=b;\n\tnxt[tot]=d[a];\n\td[a]=tot;\n\tval[tot]=c;\n}\nmultiset<int>q;\nint f[51000],g[51000],n,m,maxn;\n//f[x]:\u4ee5x\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6700\u591a\u53ef\u4ee5\u5339\u914d\u7684\u90fd\u6bd4\u4e8c\u5206\u7684\u503c\u5927\u7684 \u94fe\u6570\n//g[x]:\u6ee1\u8db3f[x]\u6700\u5927\u7684\u5411\u4e0a\u7684\u94fe\u957f\ninline void dfs(int x,int fa){\n\tf[x]=0;\n\tfor(int i=d[x];i;i=nxt[i]){\n\t\tint u=to[i];\n\t\tif(u==fa)continue;\n\t\tdfs(u,x);f[x]+=f[u];\n\t}\n\tfor(int i=d[x];i;i=nxt[i]){\n\t\tint u=to[i];\n\t\tif(u==fa)continue;\n\t\tt.insert(g[u]+val[i]); \n\t}\n\twhile(t.rt){\n\t\tint u=t.end();\n\t\tif(t.val[u]>=maxn){f[x]++;t.erase(u);}\n\t\telse break;\n\t}\n\tg[x]=0;\n\twhile(t.rt){\n\t\tint u=t.begin();\n\t\tt.erase(u);\n\t\tint p=t.last(maxn-t.val[u]);\n\t\tif(p==-1)g[x]=t.val[u];\n\t\telse{\n\t\t\tt.erase(p);f[x]++;\n\t\t}\n\t}\n\tt.clear();\n}\ninline int ck(int x){\n\tmaxn=x;\n\tdfs(1,0);\n\treturn f[1];\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tint l=1,r=0;\n\tint a,b,c;\n\tfor(int i=1;i<n;++i){\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tins(a,b,c);\n\t\tins(b,a,c);\n\t\tr+=c;\n\t}\n\tr/=m;\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tif(ck(mid)>=m)l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\\n\",l-1);\n\treturn 0;\n}\n\n```",
        "postTime": 1550188695,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "P5021\u8d5b\u9053\u4fee\u5efa"
    },
    {
        "content": "[P5021 \u8d5b\u9053\u4fee\u5efa](https://www.luogu.com.cn/problem/P5021)\n\n~~\u542c\u8bf4CSP\u524d\u4e00\u5929\u5199\u9898\u89e3\u53ef\u4ee5\u589e\u52a0RP~~\n\n## \u4e3b\u8981\u601d\u60f3\uff1a\u4e8c\u5206\u7b54\u6848+\u6811\u4e0a\u95ee\u9898\uff08dfs\uff09\n\n $n$ \u7684\u6700\u5927\u503c\u662f $5\u00d710^4$ , \u9898\u76ee\u660e\u663e\u662f\u4e8c\u5206\u7b54\u6848\u3002\uff08\u5426\u5219\u4f1aT\u98de\uff09\n\n\u5728\u5199\u9898\u4e4b\u524d\u9700\u4e86\u89e3\u4e0b\u9762\u8fd9\u4e9b\u70b9\uff1a\n\n**\u4e00\u3001\u4e8c\u5206\u4ec0\u4e48\uff1f**\n\n\u81ea\u7136\u662f\u4e8c\u5206\u6700\u77ed\u7684\u8d5b\u9053\u7684\u6700\u5927\u503c\u3002\n\n\u628a $mid$ \u770b\u505a\u4e00\u6761\u94fe\uff0c\u5224\u65ad\u80fd\u4e0d\u80fd\u53d6 $m$ \u6761\u3002\n\n**\u4e8c\u3001\u5206\u6790**\n\n\u6811\u4e0a\u7684\u60c5\u51b5\u80af\u5b9a\u662f\u94fe\u4e0a\u63a8\u5e7f, \u770b\u94fe\u7684\u505a\u6cd5\u3002\n\n\u9010\u4e2a\u5224\u65ad\u6bcf\u6761\u8d5b\u9053\u662f\u5426 $>=mid$ \uff0c\u4e0d\u65ad\u8d2a\u5fc3\u53d6\u3002\n\n\u6811\u4e0a\u8fd9\u4e48\u53d6\u4e5f\u53ef\u4ee5\u3002\n\n\u8bbe\u5f53\u524d\u4e3a $u$ \u70b9, \u513f\u5b50\u7684\u6570\u7ec4\u4e3a $v$ , \u8def\u5f84\u6709\u8fd9\u51e0\u79cd\u60c5\u51b5:\n1.  $u->v[i]$ ,   $>=mid$ \u7d2f\u8ba1\u8d5b\u9053\u6761\u6570, \u5982\u679c $<mid$ \u5219\u770b\u540e\u9762\n2.  $v[i]->u->v[j]$\n3. \u518d\u5f80\u4e0b\u8d70,\u4f46\u662fdfs\u662f\u4ece\u6839\u8282\u70b9\u5f80\u4e0b,\u770b\u513f\u5b50\u4e0d\u597d\u5904\u7406,\u53cd\u7740\u6765,  $fa(u)->u->v[i]$\n\n $check$ \u51fd\u6570\u5c31\u662fdfs, \u7c7b\u4f3c\u94fe\u5f0f\u505a\u6cd5.\n\u5982\u679c:\n\n1.  $u->v[i],  >=mid$ \u7d2f\u8ba1\u8d5b\u9053\u6761\u6570, \u5982\u679c $<mid$ \u5c31\u8bb0\u4e0b\u6765,\n\n2. \u4e0b\u4e00\u6b21dfs.\n\n\u8bb0\u5f55\u4e0b\u6765\u7684,\u5c31\u662f\u83ca\u82b1\u56fe\u505a\u6cd5.\n\n## \u4ee3\u7801\u5982\u4e0b:\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=5e4+5;\nint n,m,head[maxn],tot,ans;\n\nstruct node{//\u5b58\u8fb9\n    int to,val,next;\n}e[maxn<<1];//\u7531\u4e8e\u662f\u65e0\u5411\u56fe,\u9700\u8981\u5b58\u4e24\u500d\n\ninline int read()//\u5feb\u8bfb\n{\n    register int x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return (f==1)?x:-x;\n}\n\ninline void add(int x,int y,int w)//\u5efa\u8fb9\n{\n    e[++tot] = (node){y,w,head[x]};\n    head[x]=tot;\n}\n\nint dfs(int x,int fa,int k)//dfs\u5224\u65ad\n{\n    multiset<int> s;//\u81ea\u52a8\u6392\u5e8f\n    int val;\n    for(int i=head[x],y;i;i=e[i].next){//\u626b\u63cf\u9010\u6761\u8fb9\n        y=e[i].to;\n        if(y==fa) continue;\n        val=dfs(y,x,k)+e[i].val;\n        if(val>=k) ans++;//1.\n        else s.insert(val);//x\u51fa\u53d1\u7684\u94fe        \n    }\n    int len=0;\n    while(!s.empty()){//\u8fd9\u5c31\u8ddf\u6700\u77ed\u8def\u5f84/bfs\u5f88\u50cf\n        int tmp = *s.begin(); \n        s.erase(s.begin());\n        multiset<int>::iterator it=s.lower_bound(k-tmp);// >=\n        if(it==s.end()) len=max(len,tmp);//x->i x->j\u6ca1\u6709\u62fc\u8d77\u6765\u5230k\u7684.\n        else s.erase(it), ans++;//2.        \n    }\n    return len;//x\u51fa\u53d1\u7684\u6700\u957f\u94fe\n}\n\nint check(int k)//\u4e8c\u5206\u5224\u65ad\u51fd\u6570\n{\n    ans=0;\n    dfs(1,0,k);\n    if(ans>=m) return 1;//\u5927\u4e8e\u7b49\u4e8em\n    return 0;//\u5c0f\u4e8em\n}\n\nint main()\n{\n    n=read(),m=read();\n    int x,y,w,up=0;\n    for(int i=1;i<n;i++){\n        x=read(),y=read(),w=read();\n        add(x,y,w);add(y,x,w); //\u65e0\u5411\u56fe\n        up+=w;\n    }\n    int l=1,r=up/m,mid;//\u8bbe\u7f6e\u4e8c\u5206\u8fb9\u754c\n    while(l<r){//\u4e8c\u5206\n        mid=(l+r+1)>>1;\n        if(check(mid)) l=mid;\n        else r=mid-1;\n    }\n    printf(\"%d\",l);\n    return 0;\n}\n```\n",
        "postTime": 1604639050,
        "uid": 219935,
        "name": "JeffWang2019",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "## \u4ecb\u7ecd\n- \u672c\u7bc7\u6587\u7ae0\u662f\u6211\u5199\u8fc7\u7684\u6700\u8be6\u7ec6\u6613\u61c2\u7684\u4e00\u7bc7\u9898\u89e3\uff0c\u540c\u65f6\u4e5f\u662f\u6211\u7528 GitHub \u5199\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u3002\n- \u8fd9\u7bc7\u9898\u89e3\u529b\u6c42\u5728\u5206\u6790\u8fc7\u7a0b\u65b9\u9762\u5e2e\u52a9\u5230\u66f4\u591a\u7684\u4eba\uff0c\u5e76\u4e14\u6211\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u5176\u4ed6\u9898\u89e3\u8981\u5bb9\u6613\u7406\u89e3\u8bb8\u591a\u3002\n- \u5982\u679c\u4f60\u60f3\u8981\u66f4\u4f73\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u8bf7\u70b9\u51fb[\u6b64\u5904](https://pengyule.github.io/post/luogu-solution-p5012/)\u3002\n\n## \u5206\u6790\u9636\u6bb5\n\u8981\u60f3\u8ba9\u6700\u5c0f\u503c\u6700\u5927\uff0c\u8fd9\u7c7b\u9898\u76ee\u4e00\u822c\u91c7\u7528\u4e8c\u5206\u7b54\u6848\u7684\u65b9\u6cd5\u3002\u4e8c\u5206\u6211\u4eec\u7684\u6700\u5c0f\u8d5b\u9053\u957f\uff0c\u7136\u540e\u6bcf\u6b21\u5728\u6811\u4e0a\u6784\u5efa\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u4e8c\u5206\u5230\u7684\u503c $mid$ \u7684\u8d5b\u9053\uff0c\u770b\u770b\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u51fa\u4e0d\u5c0f\u4e8e $m$ \u6761\u8d5b\u9053\u3002\n\n\u8fd9\u4e00\u6b65\u4e0d\u96be\u60f3\u5230\uff0c\u6b64\u9898\u7684\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u53bb\u5224\u65ad $mid$ \u662f\u5426\u53ef\u4ee5\u6784\u5efa\u51fa\u5408\u6cd5\u6761\u4ef6\u7684\u8d5b\u9053\uff0c\u5373\u5982\u4f55\u5728\u6811\u4e0a\u6784\u5efa\u5408\u6cd5\u8d5b\u9053\u624d\u53ef\u4ee5\u6700\u5927\u5316\u8d5b\u9053\u6761\u6570\u3002\n\n\u8ba9\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u3002\n\n![\u56fe\u7247.png](https://i.loli.net/2020/07/11/SMh8Cqwymu4gBfX.png)\n\n\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u68f5\u6811\uff0c\u6211\u4eec\u5148\u4ece\u5b83\u6700\u5e95\u5c42\u7684\u5b50\u6811\u8bf4\u8d77\uff0c\u5c31\u6bd4\u5982 $6,7,8$ \u8fd9\u68f5\u5b50\u6811\u3002\n\n\u5982\u679c\u4e00\u6761\u8d5b\u9053\u5305\u542b\u6709\u8fd9\u4e00\u68f5\u5b50\u6811\u4e2d\u7684\u8fb9\uff0c\u90a3\u4e48\u8fd9\u6761\u8d5b\u9053\u53ef\u80fd\u6709\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a\n1. \u8fd9\u6761\u8d5b\u9053\u7684\u5168\u90e8\u90e8\u5206\u90fd\u7531\u8fd9\u68f5\u5b50\u6811\u4e2d\u7684\u8fb9\u7ec4\u6210\u3002\n2. \u8fd9\u6761\u8d5b\u9053\u7684\u4e00\u7aef\u6709\u90e8\u5206\u8fb9\u7531\u8fd9\u6761\u5b50\u6811\u4e2d\u7684\u8fb9\u7ec4\u6210\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u7531\u8282\u70b9 $6$ \u4ee5\u4e0a\uff08\u4e0d\u5728\u8fd9\u68f5\u5b50\u6811\u4e2d\uff09\u7684\u8fb9\u7ec4\u6210\u3002\n\n\u5982\u679c\u8bf4\u5f97\u6613\u61c2\u4e00\u4e9b\uff0c\u90a3\u4e48\u5c31\u662f\uff0c\u4ece\u8fd9\u68f5\u5b50\u6811\u4e2d\u7684\u67d0\u4e00\u4e2a\u9876\u70b9\u4e00\u76f4\u5411\u4e0a\u4f38\u8fc7\u6765\uff0c\u5230\u8fbe\u5b50\u6811\u6839 $6$\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4ed6\u8d8a\u8fc7\u9876\u70b9 $6$\uff0c\u53bb\u5f80\u5916\u63a2\u7d22\u4e16\u754c\uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4ed6\u6298\u56de\u5934\u7ee7\u7eed\u53bb\u8fd9\u68f5\u5b50\u6811\u5f53\u4e2d\u7684\u5176\u4ed6\u5206\u652f\u5ef6\u4f38\u5f00\u53bb\u3002\n\n\u5f53\u7136\uff0c\u8fd8\u6709\u4e00\u79cd\u6bd4\u8f83\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u5c31\u662f\u521a\u597d\u5b83\u5230\u4e86 $6$ \u8fd9\u91cc\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u6211\u4eec\u4e8c\u5206\u5230\u7684\u8fd9\u4e2a\u503c\uff0c\u5b83\u5c31\u4e0d\u9700\u8981\u518d\u53bb\u63a2\u7d22\u5176\u4ed6\u7684\u8fb9\u4e86\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u8bb0\u505a\u4e00\u6761\u8d5b\u9053\u3002\n\n\u56fe\u89e3\uff1a\n\n![\u56fe\u7247.png](https://i.loli.net/2020/07/11/xqohudB6R471Amz.png)\n\n\u6211\u4eec\u8003\u8651\uff1a\u9996\u5148\uff0c\u53bb\u5728\u8fd9\u68f5\u5b50\u6811\u91cc\u627e\u4e24\u4e2a\u5206\u652f\uff0c\u4f7f\u5f97\u4ed6\u4eec\u8fb9\u6743\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8e $mid$\uff1b\u8fd9\u4e00\u6b65\u6211\u4eec\u5e94\u8be5\u5c3d\u91cf\u201c\u8282\u7701\u201d\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u6709 $3\\ 4$ \u548c $3\\ 5$ \u4e24\u79cd\u5408\u6cd5\u7684\u9009\u62e9\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u9009\u62e9 $3\\ 4$\uff0c\u4e3a\u540e\u9762\u7559\u4e0b\u66f4\u591a\u7684\u7a7a\u95f4\u3002\u7136\u540e\uff0c\u5728\u5269\u4e0b\u7684\u65e0\u6cd5\u914d\u5bf9\u7684\u5206\u652f\u5f53\u4e2d\uff0c\u9009\u53d6\u8fb9\u6743\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u5448\u732e\u7ed9\u6211\u4eec\u7684\u6839\u8282\u70b9\uff0c\u8fd9\u6837\uff0c\u5f53\u6211\u4eec\u50cf\u8fd9\u6837\u5b50\u53bb\u64cd\u4f5c\u4e0a\u9762\u7684 $2,5,6$ \u8fd9\u4e2a\u5b50\u6811\u65f6\uff0c$6$ \u8fd9\u4e2a\u5b50\u8282\u70b9\u6240\u80fd\u8fbe\u5230\u7684\u6700\u4f18\u5206\u652f\u957f\u5ea6\u5c31\u5e94\u8be5\u662f \u8fb9 `2-6` \u7684\u957f\u52a0\u4e0a\u6211\u4eec\u5448\u732e\u7ed9 $6$ \u7684\u5b50\u5206\u652f\u957f\u5ea6 \u7684\u548c\u3002\n\n## \u7b56\u7565\u9636\u6bb5\n\u6211\u4eec\u6709\u4e86\u5927\u6982\u7684\u601d\u8def\uff0c\u5e94\u8be5\u60f3\u60f3\u4ec0\u4e48\u6837\u7b56\u7565\u9002\u5408\u8ba1\u7b97\u673a\u53bb\u5b9e\u73b0\u3002\n\n1. \u5bf9\u6574\u68f5\u6811\u8fdb\u884c\u904d\u5386\uff0c\u628a\u8f93\u5165\u7684\u65e0\u5411\u56fe\u6574\u5408\u6210\u4e00\u68f5\u6811\uff0c\u65b9\u4fbf\u540e\u9762\u5b9e\u73b0\uff0c\u540c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\uff1a\u7236\u4eb2\uff0c\u513f\u5b50\u53ca\u5230\u8fd9\u4e2a\u513f\u5b50\u7684\u8fb9\u4e4b\u957f\u3002\n2. \u7b97\u51fa\u8fd9\u68f5\u6811\u7684\u76f4\u5f84\uff0c\u4e8c\u5206\u7b54\u6848\u7684\u4e0a\u754c\u5c31\u5e94\u8be5\u662f\u5b83\u2014\u2014\u56e0\u4e3a\u8d5b\u9053\u662f\u4e00\u6761\u94fe\uff0c\u6240\u4ee5\u7b54\u6848\u4e00\u5b9a\u4e0d\u4f1a\u8d85\u8fc7\u6811\u7684\u76f4\u5f84\u3002\uff08\u6811\u7684\u76f4\u5f84\u5c31\u662f\u4e00\u68f5\u6811\u4e0a\u6700\u957f\u7684\u4ece\u4e00\u70b9\u5230\u4e00\u70b9\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5e38\u7528\u7684\u6c42\u6811\u7684\u76f4\u5f84\u7684\u65b9\u6cd5\u662f\uff0c\u4ece\u6811\u4e0a\u4efb\u610f\u4e00\u70b9\u627e\u5230\u4e00\u4e2a\u6811\u4e0a\u8ddd\u79bb\u5b83\u6700\u8fdc\u7684\u70b9\uff0c\u7136\u540e\u627e\u5230\u4ece\u8fd9\u4e2a\u6700\u8fdc\u70b9\u5f00\u59cb\u7684\u6811\u4e0a\u8def\u5f84\u4e2d\u6700\u957f\u7684\u957f\u5ea6\u3002\uff09\n3. \u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a $\\text{set}$\uff0c\u50a8\u5b58\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6240\u6709\u5206\u652f\uff0c\u5f53\u7136\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728 $\\text{set}$ \u4e2d\u653e\u90a3\u4e9b\u9700\u8981\u7ec4\u5408\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ed6\u81ea\u5df1\u4e00\u4e2a\u4eba\u4e0d\u8db3\u8d5b\u9053\u957f\u7684\u5206\u652f\uff0c\u5982\u679c\u662f\u6211\u4eec\u521a\u624d\u8bf4\u7684\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u76f4\u63a5\u8bf4\u6211\u4eec\u591a\u4e86\u4e00\u6761\u8d5b\u9053\u5c31\u597d\u4e86\uff08\u4e0d\u9700\u8981\u653e\u5165 $\\text{set}$\uff09\u3002\n4. \u7136\u540e\u5728 $\\text{set}$ \u4e2d\u8fdb\u884c\u914d\u5bf9\uff08\u914d\u6210\u4e00\u5bf9\u5c31\u52a0\u4e86\u4e00\u6761\u8d5b\u9053\uff09\uff0c\u914d\u4e0d\u6210\u7684\u5c31\u53d6 $\\max$ \u7136\u540e\u8d21\u732e\u7ed9\u6839\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u8282\u70b9\u5f97\u5230\u7684\u8d21\u732e\u8bb0\u4e3a $val$\u3002\n5. \u6700\u540e\u68c0\u67e5\u4e00\u4e0b\u662f\u4e0d\u662f\u8d5b\u9053\u6570\u5927\u4e8e\u7b49\u4e8e $m$\uff0c\u5982\u679c\u662f\uff0c\u8fd9\u4e2a $mid$ \u5408\u6cd5\uff08$L=mid$\uff09\uff0c\u5426\u5219\uff0c$mid$ \u4e0d\u5408\u6cd5\uff08$R=mid$\uff09\u3002\u6700\u7ec8\u7684 $L$ \u5373\u662f\u7b54\u6848\u3002\n\n## \u4ee3\u7801\u9636\u6bb5\n\u6709\u4e86\u6e05\u6670\u7684\u601d\u8def\uff0c\u4ee3\u7801\u5e94\u8be5\u6bd4\u8f83\u597d\u5199\u4e86\uff0c\u4f46\u662f\u8fd8\u662f\u6709\u4e00\u4e9b\u5730\u65b9\u9700\u8981\u6ce8\u610f\u3002\n\n1. \u52a0\u5feb\u8bfb\n2. \u5f00 O2\n3. \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5 AC \u4e86\n\n\u4ee3\u7801\u6709\u7b80\u8981\u6ce8\u91ca\u3002\n\n```\n#pragma GCC optimize(2) //O2\u4f18\u5316\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=5e4+10;\nint n,m,cnt,val[N],u[N],v[N],w[N],book[N],fa[N],Max,V;\n//n,m\u5982\u9898\u6240\u8ff0\uff0ccnt\u7528\u6765\u8bb0\u6bcf\u6b21\u4e8c\u5206\u5230\u7684\u503c\u5bf9\u5e94\u5408\u6cd5\u8d5b\u9053\u6570\n//u,v,w\u662f\u9898\u76ee\u8f93\u5165\u7684\u4e24\u4e2a\u9876\u70b9\u3001\u4e00\u6761\u8fb9\u957f\n//book\u662f\u5728\u8fd8\u6ca1\u6709\u628a\u6811\u9020\u51fa\u6765\u7684\u60c5\u51b5\u4e0b\u7528\u6765\u8bb0\u5f55dfs\u65f6\u54ea\u4e9b\u70b9\u8d70\u8fc7\u6ca1\u6709\nstruct race {\n    int node,edge; //\u9876\u70b9\u7f16\u53f7\u3001\u8fb9\u957f\n};\nvector<int> _g[N];\nvector<race> W[N];\nvector<race> G[N];\nmultiset<int> s[N];\nmultiset<int>::iterator it;\nvoid dfs(int step,int k){ \n    int x=0;\n    s[step].clear();\n    for(int i=0;i<G[step].size();i++){\n        dfs(G[step][i].node,k);\n        if(val[G[step][i].node]+G[step][i].edge>=k)\n            cnt++;\n        else \n            s[step].insert(val[G[step][i].node]+G[step][i].edge);\n    }\n    while(!s[step].empty()){\n        if(s[step].size()==1){ //\u53ea\u5269\u4e00\u4e2a\u9876\u70b9\u6ca1\u6709\u5904\u7406\u4e86\uff0c\u53d6\u4e2amax\u5448\u732e\u7ed9\u6839\n            val[step]=max(x,*s[step].begin());\n            return;\n        }\n        it=s[step].lower_bound(k-*s[step].begin()); //\u7b2c\u4e00\u4e2a\u548cs.begin()\u76f8\u52a0\u80fd\u5927\u4e8e\u7b49\u4e8ek\u7684\n        if(it==s[step].begin() && s[step].count(*it)==1) it++; //\u5982\u679c\u662f\u81ea\u5df1\u90a3\u6ca1\u529e\u6cd5\u53ea\u80fd\u627e\u540e\u9762\u4e00\u4e2a\n        if(it==s[step].end()){ //\u6ca1\u6709\u5408\u9002\u7684\u4e5f\u5c31\u662f\u8bf4\u914d\u4e0d\u4e86\u5bf9\n            x=max(x,*s[step].begin()); //\u6309\u7167\u6211\u4eec\u4e4b\u524d\u8bf4\u7684\u627e\u4e00\u4e2a\u4e2a\u513f\u5927\u7684\n            s[step].erase(s[step].find(*s[step].begin())); //\u5904\u7406\u8fc7\u7684\u5c31\u8981\u5220\u6389\n        }\n        else {\n            cnt++; //\u914d\u6210\u4e00\u5bf9\u513f\n            //\u540c\u6837\uff0c\u914d\u6210\u5bf9\u7684\u4e24\u4e2a\u4e0d\u80fd\u518d\u7528\u4e86\uff0c\u5220\u6389\n            s[step].erase(s[step].find(*it));\n\t\t\ts[step].erase(s[step].find(*s[step].begin()));\n        }\n    }\n    val[step]=x; //\u5448\u73b0\u7ed9\u5b50\u6811\u6839\n    return;\n}\nbool check(int k){\n    cnt=0;\n    dfs(1,k);\n    return cnt>=m;\n}\nvoid init(int step){ //\u628a\u7236\u8282\u70b9\u4ec0\u4e48\u7684\u6574\u5408\u51fa\u6765\n    book[step]=1;\n    for(int i=0;i<_g[step].size();i++)\n        if(!book[_g[step][i]]){\n            fa[_g[step][i]]=step;\n            init(_g[step][i]);\n        }\n    return;\n}\nint read(){ //\u5feb\u901f\u8bfb\u5165\n    int x=0;\n    char ch=getchar();\n    while(ch<'0' || ch>'9') ch=getchar();\n    while(ch>='0' && ch<='9') x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return x;\n}\nvoid getdis(int step,int sum){ //\u627e\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u7684\u6700\u8fdc\u70b9\n    book[step]=1;\n    if(sum>Max) V=step,Max=sum; //V\u662f\u6700\u8fdc\u70b9\uff0cMax\u662f\u6700\u957f\u8def\u5f84\u957f\u5ea6\n    for(int i=0;i<W[step].size();i++)\n        if(!book[W[step][i].node])\n            getdis(W[step][i].node,sum+W[step][i].edge);\n}\nint tree_D(){ //\u8fd4\u56de\u503c\u5c31\u662f\u6811\u7684\u76f4\u5f84\n    Max=0;\n    memset(book,0,sizeof(book));\n    getdis(1,0);\n    Max=0;\n    memset(book,0,sizeof(book));\n    getdis(V,0);\n    return Max;\n}\nint main()\n{\n    n=read(),m=read();\n    race t;\n    for(int i=1;i<=n-1;i++){\n        u[i]=read(),v[i]=read(),w[i]=read();\n        _g[u[i]].push_back(v[i]);\n        _g[v[i]].push_back(u[i]);\n        t.node=v[i],t.edge=w[i];\n        W[u[i]].push_back(t);\n        t.node=u[i],t.edge=w[i];\n        W[v[i]].push_back(t);\n    }\n    init(1);\n    //\u4ee5\u4e0a\u662f\u4e00\u4e9b\u57fa\u7840\u6811\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u8d58\u8ff0\n    for(int i=1;i<=n-1;i++){ //\u628a\u65e0\u5411\u56fe\u6574\u5408\u6210\u4e00\u68f5\u6811\n    //G[x]\u662fx\u7684\u6240\u6709\u513f\u5b50\u548c\u5206\u522b\u5230\u4ed6\u4eec\u7684\u8ddd\u79bb\n        if(fa[u[i]]==v[i]){\n            t.node=u[i],t.edge=w[i];\n            G[v[i]].push_back(t);\n        } \n        else {\n            t.node=v[i],t.edge=w[i];\n            G[u[i]].push_back(t);\n        }\n    }\n    int L=1,R=tree_D()+1,mid;\n    while(L<R-1){\n        mid=(L+R)/2;\n        if(check(mid)) L=mid;\n        else R=mid;\n    }\n    printf(\"%d\\n\",L); //\u8f93\u51fa\u7b54\u6848\n    return 0;\n}\n```\n\u5e0c\u671b\u4f60\u80fd\u6536\u83b7\u66f4\u591a\uff01",
        "postTime": 1594450989,
        "uid": 300078,
        "name": "pengyule",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "## \u3010NOIP2018\u3011\u8d5b\u9053\u4fee\u5efa\uff08\u4e8c\u5206+\u8d2a\u5fc3\uff09\n\n> \u7ed9\u4f60\u4e00\u4e2a\u6709$N$\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u9700\u8981\u5728\u6811\u4e0a\u627e\u51fa$M$\u6761\u4e92\u5f02\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u7684\u6700\u5c0f\u503c\u6700\u5927\uff0c$1<=M<N<=50000$\n\n\u9996\u5148\u8003\u8651\u4e8c\u5206\u7b54\u6848\uff0c\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848$mid$\uff0c\u7136\u540e\u5728\u6811\u4e0a\u60f3\u529e\u6cd5\u8d2a\u5fc3\u6c42\u8def\u5f84\u6570\u3002\n\n\u5bf9\u4e8e\u6811\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u822c\u4ece\u5b50\u6811\u5165\u624b\n\n\u6709\u4e09\u79cd\u8def\u5f84\u60c5\u51b5\uff1a\n\n1\u3001\u90fd\u5728\u4e00\u4e2a\u5b50\u6811\u5185\uff0c\u4e14\u8def\u5f84\u4e0d\u7ecf\u8fc7\u5b50\u6811\u7684\u6839\u8282\u70b9\n\n2\u3001\u90fd\u5728\u4e00\u4e2a\u5b50\u6811\u5185\uff0c\u4f46\u8def\u5f84\u7ecf\u8fc7\u5b50\u6811\u7684\u6839\u8282\u70b9\n\n3\u3001\u8def\u5f84\u4e0d\u4ec5\u5728\u8be5\u5b50\u6811\u4e0b\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u6709\u5982\u4e0b\u7b56\u7565\uff1a\n\n1\u3001\u5982\u679c\u672c\u8eab\u5927\u4e8e\u6211\u4eec\u4e8c\u5206\u7684\u503c\uff0c\u76f4\u63a5\u7d2f\u52a0\u7b54\u6848\n\n2\u3001\u5982\u679c\u672c\u8eab\u5c0f\u4e8e\u6211\u4eec\u4e8c\u5206\u7684\u503c\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u51b3\u7b56\n\n\u200b\t\t1)\u4e0e\u8be5\u5b50\u6811\u4e0b\u7684\u53e6\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u7b54\u6848\u7684\u8def\u5f84\u52a0\u8d77\u6765\u6765\u6ee1\u8db3\u7b54\u6848\u503c\n\n\u200b\t\t2)\u4f5c\u4e3a\u8def\u5f84\u7684\u4e00\u90e8\u5206\u4f20\u7ed9$x$\u7684\u7236\u4eb2\u8282\u70b9\n\n\u4e8e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8d2a\u5fc3\u7b56\u7565\uff0c\u9996\u5148\u8003\u8651\u628a\u6240\u6709\u7684\u80fd\u5728\u5b50\u6811\u4e0b\u7ec4\u6210\u6ee1\u8db3\u7684\u8def\u5f84\u7684\u5168\u7b97\u5b8c\uff0c\u7136\u540e\u518d\u628a\u5269\u4e0b\u7684\u8def\u5f84\u4e2d\u7684\u6700\u5927\u503c\u5f80$x$\u7684\u7236\u8282\u70b9\u4f20\uff0c\u5c31\u53ef\u4ee5\u6ee1\u8db3\u6700\u5927\u5229\u7528\u7387\n\n\u8fd9\u4e00\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u7528$STL$\u4e2d\u7684$multiset$\u5b9e\u73b0\uff0c\u8be6\u89c1\u4ee3\u7801\n\n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n#define re register\n#define ll long long\n#define puts puts(\"\")\n#define File(x) freopen(x\".in\",\"r\",stdin); freopen(x\".out\",\"w\",stdout)\nusing namespace std;\ninline int read(){\n\tint k=1,sum=0;char c=getchar();\n\tfor(;c<'0' || c>'9';c=getchar()) if(c=='-') k=-1;\n\tfor(;c>='0' && c<='9';c=getchar()) sum=sum*10+c-48;\n\treturn sum*k;\n}\nconst int N=5e4+10;\nint n,m;\nstruct Edge{\n\tint to,nxt,w;\n}edge[N<<1];\nint head[N],cnt;\ninline void Add(int x,int y,int w){\n\tedge[++cnt].to=y;edge[cnt].w=w;edge[cnt].nxt=head[x];head[x]=cnt;\n}\nmultiset<int> S[N];\nmultiset<int>::iterator it;\nint ans;\ninline int dfs(int x,int fa,int lim){\n\tS[x].clear();\n\tint tot=0;\n\tfor(re int i=head[x];i;i=edge[i].nxt){\n\t\tint y=edge[i].to;\n\t\tif(y==fa) continue;\n\t\ttot=dfs(y,x,lim)+edge[i].w;\n\t\tif(tot>=lim) ++ans;\n\t\telse S[x].insert(tot);\n\t}\n\tint ret=0;\n\twhile(!S[x].empty()){\n\t\tif(S[x].size()==1) return max(ret,*S[x].begin());\n\t\tit=S[x].lower_bound(lim-*S[x].begin());\n\t\tif(it==S[x].begin() && S[x].count(*S[x].begin())==1) ++it;\n\t\tif(it==S[x].end()) {ret=max(ret,*S[x].begin());S[x].erase(*S[x].begin());}\n\t\telse{\n\t\t\t++ans;\n\t\t\tS[x].erase(it);S[x].erase(S[x].begin());\n\t\t}\n\t}\n\treturn ret;\n}\ninline bool Check(int x){\n\tans=0;\n\tdfs(1,1,x);\n\treturn ans>=m;\n}\nint up,dis[N],p;\nbool vis[N];\ninline void bfs(int x){\n\tqueue<int> Q;\n\tQ.push(x);\n\tmemset(vis,0,sizeof(vis));memset(dis,0,sizeof(dis));\n\tvis[x]=1;\n\twhile(!Q.empty()){\n\t\tint u=Q.front();Q.pop();\n\t\tfor(re int i=head[u];i;i=edge[i].nxt){\n\t\t\tint v=edge[i].to;\n\t\t\tif(vis[v]) continue;\n\t\t\tvis[v]=1;\n\t\t\tdis[v]=dis[u]+edge[i].w;\n\t\t\tif(dis[v]>up) {up=dis[v];p=v;}\n\t\t\tQ.push(v);\n\t\t}\n\t}\n}\nint main(){\n\t//File(\"testdata\");\n\tn=read(),m=read();\n\tfor(re int i=1;i<n;++i) {\n\t\tint x=read(),y=read(),w=read();\n\t\tAdd(x,y,w),Add(y,x,w);\n\t}\n\tbfs(1);bfs(p);\n\tint l=1,r=up,mid;\n\twhile(l<=r){\n\t\tmid=((l+r)>>1);\n\t\tif(Check(mid)) l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tcout<<r;\n\treturn 0;\n}\n\n```",
        "postTime": 1573382900,
        "uid": 48270,
        "name": "_YYY_",
        "ccfLevel": 0,
        "title": "\u3010NOIP2019\u3011\u8d5b\u9053\u4fee\u5efa"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P5021)\u770b\u9898\u76ee\u3002\n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u636e\u8bf4\u8fd9\u8fd8\u662f\u4e00\u9053\u539f\u9898\uff0c\u4ee5\u81f3\u4e8e\u5f53\u65f6$D1$\u6d8c\u73b0\u4e86\u8bb8\u591a$AK$\u7684\u5de8\u4f6c\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u50cf\u6211\u8fd9\u79cd\u83dc\u9e21\u5c31\u53ea\u4f1a\u5728\u8d5b\u573a\u4e0b\u8865\u9898\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5f00\u59cb\u6b63\u7d27\u90e8\u5206\u3002\u8981\u89e3\u51b3\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u5148\u4ece\u9a97\u5206\u65b9\u6cd5\u5165\u624b\u3002\u770b\u4e00\u4e0b\uff0c\u672c\u9898\u795e\u5947\u7684\u6570\u636e\uff0c\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u8ba9\u6211\u4eec\u9a97\u5230$80$\u5206\uff01  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u600e\u4e48\u9a97\uff1f  \n### P1 M = 1\u7684\u6570\u636e\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6811\u4e0a\u76f4\u5f84\u3002  \n### P2 bi = ai + 1\u7684\u6570\u636e\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5355\u94fe\u6570\u636e\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u5373\u5982\u679c\u5b58\u5728\u4f7f\u5f97\u6700\u77ed\u8d5b\u9053$\\ge k$\u7684\u65b9\u6848\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4f7f\u5f97\u6700\u77ed\u8d5b\u9053$\\ge k-1$\u7684\u65b9\u6848\u3002\u5229\u7528\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\uff08\u4ee5\u4e0b\u7684\u8ba8\u8bba\u5747\u5728\u4e8c\u5206\u7684\u80cc\u666f\u4e4b\u4e0b\uff09  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e0b\u9762\u8003\u8651\u600e\u4e48\u68c0\u67e5\u3002\u60f3\u5fc5\u4f60\u5df2\u7ecf\u60f3\u5230\u4e86\uff0c\u5728\u5355\u94fe\u60c5\u51b5\u4e0b\uff0c\u5212\u5206\u8d5b\u9053\u76f8\u5f53\u4e8e\u628a\u8fb9\u5212\u5206\u6210\u5185\u90e8\u662f\u8fde\u7eed\u5143\u7d20\u7684\u96c6\u5408\u3002\u8fd9\u662f\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u89e3\u6cd5\u4e0d\u8bf4\u4e86\u3002\n### P3 ai = 1\u7684\u6570\u636e\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u83ca\u82b1\u56fe\u6570\u636e\u3002\u6211\u4eec\u5148\u628a\u8fb9\u6392\u4e00\u6ce2\u5e8f\u3002\u5bf9\u4e8e\u5927\u4e8e\u4e8c\u5206\u5230\u7684\u957f\u5ea6\u7684\u8fb9\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u5b83\u81ea\u5df1\u4f5c\u4e00\u6761\u8d5b\u9053\u3002\u5426\u5219\uff0c\u7531\u4e8e\u83ca\u82b1\u56fe\u4e0a\u6700\u591a\u7528\u4e24\u6761\u8fb9\u8fde\u6210\u4e00\u6761\u8d5b\u9053\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u53cc\u6307\u9488\u626b\u63cf\u6392\u5e8f\u540e\u7684\u8fb9\u7684\u5e8f\u5217\uff0c\u7ec4\u5408\u51fa\u8d5b\u9053\u5373\u53ef\u3002\n### P4 \u5206\u652f\u4e0d\u8d85\u8fc73\u7684\u6570\u636e\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e8c\u53c9\u6811\u6570\u636e\u3002\u5148\u5bf9\u4e8c\u53c9\u6811$DFS$\u904d\u5386\u3002\u5bf9\u4e8e\u8282\u70b9$u$\u7684\u4e24\u4e2a\u513f\u5b50$v_1$\u548c$v_2$\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5f97\u5230\u4ece$v_1$\u548c$v_2$\u8fd4\u56de\u4e0a\u6765\u7684\u4e24\u6761\u94fe\uff0c\u8fde\u5230$u$\u4e0a\u9762\u5f97\u5230$f_{v_1}$\u548c$f_{v_2}$\u3002\u5982\u679c$f_{v_1}$\u548c$f_{v_2}$\u4e2d\u6709\u53ef\u4ee5\u5355\u72ec\u6210\u8d5b\u9053\u7684\uff0c\u5c31\u8ba9\u5b83\u4eec\u53d8\u6210\u8d5b\u9053\uff1b\u5982\u679c$f_{v_1}$\u548c$f_{v_2}$\u8fde\u8d77\u6765\u53ef\u4ee5\u6210\u8d5b\u9053\uff0c\u6211\u4eec\u5c31\u8ba9\u5b83\u4eec\u8fde\u8d77\u6765\u6210\u4e3a\u8d5b\u9053\u3002\u5426\u5219\u8fd4\u56de\u4e0d\u80fd\u5355\u72ec\u6210\u8d5b\u9053\u7684\u8f83\u957f\u7684\u4e00\u6761\u94fe\uff08\u5982\u679c\u94fe\u7528\u5b8c\u4e86\u5c31\u8fd4\u56de$0$\uff09\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u6216\u8005\u5206\u652f\u4e3a$2$\u7684\u70b9\u6765\u5f00\u59cb\u6211\u4eec\u7684$DFS$\uff1b\u5426\u5219\uff0c\u6839\u4e0a\u9762\u5c31\u6709\u53ef\u80fd\u6709\u4e09\u4e2a\u513f\u5b50\uff0c\u5c31\u4e0d\u80fd\u5355\u7eaf\u5730\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u89e3\u51b3\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u6839\u636e\u9a97\u5206\u65b9\u6cd5\u5f97\u5230\u7684\u4e1c\u897f\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e\u4e00\u4e2a\u6811\u4e0a\u8282\u70b9$u$\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ece\u5b83\u7684\u513f\u5b50\u4e0a\u9762\u8fd4\u56de\u7684\u94fe\u518d\u8fde\u5230$u$\u4e0a\u5f97\u5230\u7684$f_{v_1},f_{v_2}......f$\u91cc\u9762\u5982\u679c\u5df2\u7ecf\u6709\u6bd4\u4e8c\u5206\u7684\u957f\u5ea6\u957f\u7684\u94fe\uff0c\u6211\u4eec\u5c31\u8ba9\u5b83\u4eec\u5355\u72ec\u6210\u4e3a\u8d5b\u9053\uff1b\u5426\u5219\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6309\u7167\u83ca\u82b1\u56fe\u7684\u5904\u7406\u65b9\u6cd5\u524d\u540e\u5339\u914d$f$\u91cc\u9762\u5269\u4e0b\u7684\u8fb9\uff0c\u6700\u540e\u8fd4\u56de\u6ca1\u6709\u88ab\u7528\u5230\u7684$f$\u4e2d\u6700\u957f\u7684\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5427\uff1f  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5f88\u9057\u61be\u4e0d\u884c\uff01\u8bf7\u770b\u4e0b\u9762\u8fd9\u7ec4\u53cd\u4f8b\uff1a  \n![graph.png](https://i.loli.net/2019/09/12/D6AGmUCOfgquSE3.png)  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd9\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u83ca\u82b1\u56fe\u3002\u4e0d\u8fc7\uff0c\uff08\u6211\u731c\u4f60\u4eec\u90fd\u662f\u4ece$1$\u5f00\u59cb\u904d\u5386\u7684\uff09\u7531\u4e8e\u6839\u6362\u4e86\u4f4d\u7f6e\uff0c\u5bfc\u81f4\u6211\u4eec\u65e0\u6cd5\u8bc6\u522b\u51fa\u8fd9\u662f\u83ca\u82b1\u56fe\uff0c\u8fdb\u800c\u5bfc\u81f4\u4e86\u7b54\u6848\u7684\u9519\u8bef\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6a21\u62df\u4e4b\u540e\u53d1\u73b0\uff0c\u7a0b\u5e8f\u9009\u62e9\u4e86$2+3$\u548c$4+3$\uff0c\u800c\u66f4\u4f18\u7684\u7b54\u6848\u662f$2+4$\u548c$3+3$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u663e\u7136\uff0c\u6839\u7684\u9009\u62e9\u4e0d\u662f\u6700\u672c\u8d28\u7684\u95ee\u9898\u3002\u672c\u8d28\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u83ca\u82b1\u56fe\u5f0f\u7684\u5339\u914d\u603b\u662f\u8ba9\u5927\u7684\u8fb9\u5339\u914d\u6389\uff0c\u8fd4\u56de\u4e86\u4e00\u4e2a\u8f83\u5c0f\u7684\u94fe\u3002\u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7**\u8c03\u6574\u5df2\u6709\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u5728\u8d5b\u9053\u6570\u91cf\u4e0d\u51cf\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u66f4\u957f\u7684\u94fe**\u3002\u65b9\u6cd5\u5c31\u662f\uff0c\u91cd\u65b0\u626b\u63cf$f$\u6570\u7ec4\uff08\u4ece\u5c0f\u5230\u5927\u6392\u8fc7\u5e8f\u7684\uff09\uff0c\u5bf9\u4e8e$f_i$\uff0c\u5982\u679c$f_{i-1}$\u6ca1\u6709\u88ab\u7528\u8fc7\uff0c\u5e76\u4e14$f_{i-1}$\u548c$f_i$\u7684\u5339\u914d\u94fe\u5339\u914d\u5728\u4e00\u8d77\u7684\u8bdd\u540c\u6837\u53ef\u4ee5\u5f97\u5230\u4e00\u6761\u8d5b\u9053\uff0c\u6211\u4eec\u5c31\u9009\u62e9\u8ba9$f_i$\u7a7a\u51fa\u6765\uff0c\u7528$f_{i-1}$\u548c$f_i$\u7684\u539f\u5339\u914d\u94fe\u5339\u914d\u3002\u6700\u540e\u8fd9\u6837\u5c31\u80fd\u5f97\u5230\u53ef\u4ee5\u8fd4\u56de\u7684\u6700\u957f\u7684\u94fe\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u4e00\u6b21\u68c0\u67e5\u65f6\u95f4$O(n\\log_2n)$\uff0c\u603b\u65f6\u95f4$O(n\\log_2n\\log_2\\{\\frac{\\sum_i{l_i}}{m}\\})$\n# \u4ee3\u7801\n```cpp\n#include <vector>\n#include <cstdio>\n#include <utility>\n#include <algorithm>\nusing namespace std;\n\nconst int MAXN = 5e4 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\ntypedef pair<int, int> pii;\n\nstruct edge\n{\n\tint to, nxt, w;\n}Graph[MAXN * 2];\n\nint w[MAXN], ret[MAXN];\nint DP[MAXN];\nint head[MAXN], indx[MAXN], other[MAXN];\nint N, M, cnt = 0, d = 0, tot = 0;\nbool used[MAXN];\n\nvoid addEdge( const int from, const int to, const int W )\n{\n\tcnt ++;\n\tGraph[cnt].w = W;\n\tGraph[cnt].to = to;\n\tGraph[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid DFS( const int u, const int fa, const int low )\n{\n\tvector<pii> line;\n\tline.clear();\n\tret[u] = 0;\n\tint v, w, val;\n\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t{\n\t\tv = Graph[i].to, w = Graph[i].w;\n\t\tif( v ^ fa )\n\t\t{\n\t\t\tDFS( v, u, low );\n\t\t\tval = ret[v] + w;\n\t\t\tif( val >= low ){ used[v] = true, tot ++; continue; }\n\t\t\tline.push_back( pii( val, v ) );\n\t\t}\n\t}\n\tsort( line.begin(), line.end() );\n\tfor( int i = 0 ; i < line.size() ; i ++ ) indx[line[i].second] = i;\n\tint lef = 0, rig = line.size() - 1;\n\twhile( lef < rig )\n\t{\n\t\tif( line[lef].first + line[rig].first < low ) lef ++;\n\t\telse\n\t\t{\n\t\t\ttot ++;\n\t\t\tused[line[lef].second] = used[line[rig].second] = true;\n\t\t\tother[line[lef].second] = line[rig].second, other[line[rig].second] = line[lef].second;\n\t\t\tlef ++, rig --;\n\t\t}\n\t}\n\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t{\n\t\tv = Graph[i].to;\n\t\tif( v ^ fa && ! used[v] ) ret[u] = MAX( ret[u], Graph[i].w + ret[v] );\n\t}\n\tfor( int i = 0 ; i < line.size() ; i ++ )\n\t{\n\t\tv = line[i].second;\n\t\tif( used[v] )\n\t\t{\n\t\t\tif( i && ! used[line[i - 1].second] && line[i - 1].first + line[indx[other[v]]].first >= low )\n\t\t\t{\n\t\t\t\tused[i] = false;\n\t\t\t\tused[line[i - 1].second] = true;\n\t\t\t\tother[line[i - 1].second] = other[v], other[v] = line[i - 1].second;\n\t\t\t\tret[u] = MAX( ret[u], line[i].first );\n\t\t\t}\n\t\t}\n\t}\n}\n\nbool chk( const int mn )\n{\n\tfor( int i = 1 ; i <= N ; i ++ ) used[i] = false;\n\ttot = 0;\n\tDFS( 1, 0, mn );\n\treturn tot >= M;\n}\n\nvoid work( const int left, const int right )\n{\n\tint l = left, r = right, mid;\n\twhile( r - l > 1 )\n\t{\n\t\tmid = ( l + r ) >> 1;\n\t\tif( chk( mid ) ) l = mid;\n\t\telse r = mid - 1;\n\t}\n\tif( chk( r ) ) write( r );\n\telse write( l );\n\tputchar( '\\n' );\n}\n\nint main()\n{\n//\tfreopen( \"track.in\", \"r\", stdin );\n//\tfreopen( \"track.out\", \"w\", stdout );\n\tint fr, to, mn = 0x3f3f3f3f, sm = 0;\n\tread( N ), read( M );\n\tfor( int i = 1 ; i < N ; i ++ )\n\t{\n\t\tread( fr ), read( to ), read( w[i] );\n\t\taddEdge( fr, to, w[i] ), addEdge( to, fr, w[i] );\n\t\tmn = MIN( w[i], mn ), sm += w[i];\n\t}\n\twork( mn, sm / M );\n\treturn 0;\n}\n```",
        "postTime": 1568290503,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[LG P5021][NOIp 2018 D1T3]\u8d5b\u9053\u4fee\u5efa"
    },
    {
        "content": "# \u8d5b\u9053\u4fee\u5efa\u9898\u89e3\n\n\u65f6\u8fc7\u5883\u8fc1\uff0c\u4f34\u968f\u7740NOIP\u7684\u53d6\u6d88\uff0cCSPS\u4e5f\u5373\u5c06\u5f00\u59cb\uff0c\u4e00\u4f4d\u5f31\u5f31\u7684\u83dc\u9e21\u7684\u6765\u6c34\u66fe\u7ecf\u7684NOIP\uff01\n\n## NOIP2018 Day1 T3 \u8d5b\u9053\u4fee\u5efa\n\u6253\u5f00\u9898\u76ee\uff0c\u6620\u5165\u773c\u5e18\u7684\u662f\u957f\u957f\u7684\u9898\u9762\u63cf\u8ff0\u3002\u4ee5\u81f3\u4e8e\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u91cc\uff0c\u8fd9\u9898\u8fde\u9898\u9762\u90fd\u4e0d\u60f3\u770b\u4e00\u773c\u3002\n\n\u6240\u4ee5\u7b80\u5355\u63cf\u8ff0\u4e00\u4e0b\u9898\u9762\uff1a**\u5728\u4e00\u5f20\u6709n\u4e2a\u70b9\uff0cn-1\u6761\u8fb9\u7684\u56fe\u4e2d\uff0c\u627e\u5230m\u6761\u9053\u8def\uff0c\u5e76\u4e14\u4f7f\u5f97\u8fd9m\u6761\u9053\u8def\u4e2d \u957f\u5ea6\u6700\u5c0f\u7684\u90a3\u6761\u9053\u8def \u957f\u5ea6\u6700\u5927\u3002** \u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u6c42\u6700\u5c0f\u957f\u5ea6\u7684\u6700\u5927\u503c\uff01\n\n\u6700\u5c0f\u6700\u5927\uff0c\u6700\u5927\u6700\u5c0f\uff0c\u4e0d\u5047\u601d\u7d22\uff0c\u8fd9\u80af\u5b9a\u662f\u4e8c\u5206\u7b54\u6848\uff01\n\n\u8fd9\u65f6\u5019\u901a\u8bfb\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0cEmm~\uff0c\u8fd9\u91cc\u6709\u597d\u591a\u597d\u73a9\u7684\u6027\u8d28\uff0c\u4e0d\u9519\uff01\n\n### **\u6572\u91cd\u70b9\uff01\uff01\u6ee1\u5206\u4e0d\u4f1a\u600e\u4e48\u529e\uff0c\u5206\u6790\u6027\u8d28\u53d6\u5f97\u90e8\u5206\u5206\u6570\uff01**\n------------\n### \u7279\u6b8a\u6027\u8d28\u5982\u4e0b\uff1a\n#### Character 1\uff1a\n\u6839\u636eai\u7684\u503c\u548cai\uff0cbi\u7684\u5173\u7cfb\u53ef\u4ee5\u5f97\u5230\uff0c\u8fd9\u4e2a\u9898\u4e2d\u56fe\u7684\u7c7b\u578b\u5927\u81f4\u6709\u4e09\u79cd\uff1a**\u4e00\u6761\u94fe\uff0c\u4e00\u5f20\u83ca\u82b1\u56fe\uff08\u4e00\u9897\u7279\u6b8a\u7684\u6811\uff09\uff0c\u4e00\u9897\u6811\uff01**\n\n#### Character 2\uff1a\n\u572820\u4e2a\u6d4b\u8bd5\u70b9\u5f53\u4e2d\uff0c1\u53f7\u6d4b\u8bd5\u70b9\u30014\u53f7\u6d4b\u8bd5\u70b9\u30015\u53f7\u6d4b\u8bd5\u70b9\u30016\u53f7\u6d4b\u8bd5\u70b9\u4e2d\uff0cm=1\uff0c\u8fd9\u8bf4\u660e\u4ec0\u4e48\u5462\uff1f\n\n\u8fd9\u8bf4\u660e\u5728\u8fd9\u51e0\u4e2a\u6d4b\u8bd5\u70b9\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u4e00\u6761\u9053\u8def\uff08\u5e9f\u8bdd\uff01\uff09\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6d4b\u8bd5\u70b9\u4e2d\uff0c\u6211\u4e48\u53ea\u9700\u8981\u6765\u627e\u5230\u56fe\u4e2d\u6700\u8fdc\u7684\u4e24\u70b9\u5462\u3002\u90a3\u4e48\u5728\u4e00\u6761\u94fe\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u8fd9\u6761\u94fe\u7684\u957f\u5ea6\u5373\u53ef\uff1b\u5728\u4e00\u5f20\u83ca\u82b1\u56fe\u6216\u8005\u4e00\u9897\u6811\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6811\u7684\u76f4\u5f84\u5373\u53ef\u3002\n\n#### Character 3\uff1a\n\u572820\u4e2a\u6d4b\u8bd5\u70b9\u4e2d\uff0c\u67092\u53f7\u6d4b\u8bd5\u70b9\uff0c9\u53f7\u6d4b\u8bd5\u70b9\uff0c10\u53f7\u6d4b\u8bd5\u70b9\uff0c11\u53f7\u6d4b\u8bd5\u70b9\u7684\u56fe\u662f\u4e00\u6761\u94fe\u3002\n\n\u5982\u679cm=1\u90a3\u4fbf\u5c31\u662f\u4e0a\u6587Character 2\u4e2d\u7684\u6c42\u94fe\u957f\uff1b\u5018\u82e5m\u22651\u5462\uff1f\u663e\u7136\u4ed6\u4e5f\u662f\u4e0d\u96be\u7684\uff0c\u8fd8\u8bb0\u5f97\u8fd9\u9898\u7684\u672c\u8d28\u662f\u4ec0\u4e48\u5417\uff1f\u6700\u5c0f\u6700\u5927\uff0c\u4e8c\u5206\u7b54\u6848\uff01\u6211\u4eec\u7528\u4e8c\u5206\u7b54\u6848\u7684\u65b9\u6cd5\u53bb\u4e0d\u65ad\u5224\u65ad\uff0c\u6700\u7ec8\u5f97\u5230\u7b54\u6848\uff01\uff08\u5999\u554a\uff01\uff09\n\n```cpp\nint a[maxn];\ninline void dfs(int u,int f)\n{\n    for(int i=head[u],y;i;i=e[i].next)\n\t{\n        v=e[i].to;\n        if(y==f) continue;\n        dfs(v,u);\n        a[u]=e[i].val;\n    }\n}\n\ninline bool check(int k)\n{\n    int tot=0,now=0;\n    for(int i=1;i<n;i++)\n\t{\n        if(now+a[i]>=k)\n\t\t{\n            now=0;\n            tot++;\n        }\n        else now+=a[i];\n        sum+=a[i];\n    }\n    return tot>=m;\n}\n\ninline void solve()\n{\n    dfs(1,0);\n    int l=1,r=sum,mid;\n    while(l<r)\n\t{\n        mid=l+r>>1;\n        if(check(mid)) l=mid;\n        else r=mid-1;\n    }\n    printf(\"%d\\n\",l);\n    return;\n}\n```\n\n\n#### Character 4\uff1a\n\u5728\u4e8c\u5341\u4e2a\u6d4b\u8bd5\u70b9\u4e2d\uff0c3\u53f7\u6d4b\u8bd5\u70b9\uff0c5\u53f7\u6d4b\u8bd5\u70b9\uff0c7\u53f7\u6d4b\u8bd5\u70b9\uff0c8\u53f7\u6d4b\u8bd5\u70b9\u7684ai=1\uff0c\u4e5f\u5c31\u662f\u5b83\u662f\u4e00\u5f20\u83ca\u82b1\u56fe\uff01\u540c\u7406\u5982\u679cm=1\uff0c\u90a3\u4fbf\u53d8\u6210\u4e86\u4e0a\u6587Character 2\u7684\u60c5\u51b5\u4f46\u662f\u4ed6\u4e0d\u662f\u5462\uff1f\n\n\u4ece\u56fe\u4e0a\u5f88\u663e\u7136\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5728\u83ca\u82b1\u56fe\u4e0a\u4e00\u6761\u8def\u5f84u\u2014>v\uff0c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1au\u2014>1\u2014>v,\u6216\u8005\u76f4\u63a5u\u2014>v\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/oign60yt.png)\n\n\u5bf9\u4e8e\u83ca\u82b1\u56fe\uff0c\u7531\u4e8e\u8def\u5f84\u6700\u591a\u7ecf\u8fc7\u4e24\u6761\u8fb9\uff0c\u6211\u4eec\u5b9e\u8d28\u4e0a\u662f\u8981\u5728 n-1\u6761\u8fb9\u4e2d\u9009\u4e00\u5171 m\u6b21\uff0c\u6bcf\u6b21\u9009\u51fa\u4e00\u6761\u72ec\u7acb\u7684\u8fb9\uff0c\u6216\u8005\u4e00\u5bf9\u8fb9\uff0c\u4f7f\u5f97\u6700\u7ec8\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6 / \u6bcf\u5bf9\u8fb9\u7684\u957f\u5ea6\u548c\u5c3d\u91cf\u5927\u3002\u5bf9\u4e8e\u6bcf\u6b21\u4e8c\u5206\u51fa\u6765\u7684 mid\uff0c\u957f\u5ea6\u5927\u4e8e mid \u7684\u8fb9\u72ec\u7acb\u5730\u9009\u51fa\uff0c\u800c\u5c0f\u4e8e mid\u7684\u8fb9\u5c1d\u8bd5\u4e00\u957f\u4e00\u77ed\u4e24\u4e24\u914d\u5bf9\uff0c\u7528\u53cc\u6307\u9488\u5728\u6392\u8fc7\u5e8f\u7684\u957f\u5ea6\u6570\u636e\u4e2d\u626b\u63cf\u4e00\u904d\uff0c\u5f97\u51fa\u5bf9\u4e8e mid\u6700\u5927\u7684\u7b54\u6848\uff0c\u5224\u65ad\u5b83\u662f\u5426\u5927\u4e8em\uff1b\n\n------------\n### \u77e5\u8bc6\u8865\u5145\uff1a\u5982\u4f55\u6c42\u4e00\u9897\u6811\u7684\u76f4\u5f84!\n\u4f17\u6240\u5468\u77e5\uff0c\u6c42\u6811\u7684\u76f4\u5f84\u4e00\u822c\u6709\u5982\u4e0b\u65b9\u6cd5\uff01\n\n#### \u65b9\u6cd5\u4e00\uff1a\u4e24\u8fb9BFS\u6216\u8005\u4e24\u8fb9DFS\u6765\u6c42\u6811\u7684\u76f4\u5f84\n\u5e76\u4e14\u8fd9\u4e24\u79cd\u65b9\u6cd5\u66f4\u5bb9\u6613\u8ba1\u7b97\u51fa\u76f4\u5f84\u4e0a\u7684\u5177\u4f53\u8282\u70b9\n\n\u8be6\u7ec6\u5730\u8bf4\uff0c\u8fd9\u4e2a\u505a\u6cd5\u5305\u542b\u4e24\u6b65\uff1a\n\n1.\u4ece\u4efb\u610f\u8282\u70b9\u51fa\u53d1\uff0c\u901a\u8fc7BFS\u548cDFS\u5bf9\u6811\u8fdb\u884c\u4e00\u6b21\u904d\u5386\uff0c\u6c42\u51fa\u4e0e\u51fa\u53d1\u70b9\u8ddd\u79bb\u6700\u8fdc\u7684\u8282\u70b9\u8bb0\u4e3ap\n\n2.\u4ece\u8282\u70b9p\u51fa\u53d1\uff0c\u901a\u8fc7BFS\u6216DFS\u518d\u8fdb\u884c\u4e00\u6b21\u904d\u5386\uff0c\u6c42\u51fa\u4e0ep\u8ddd\u79bb\u6700\u8fdc\u7684\u8282\u70b9\uff0c\u8bb0\u4e3aq\u3002\n\n\u4ecep\u5230q\u7684\u8def\u5f84\u5c31\u662f\u6811\u7684\u4e00\u6761\u76f4\u5f84\u3002\u56e0\u4e3ap\u4e00\u5b9a\u662f\u76f4\u5f84\u7684\u4e00\u7aef\uff0c\u5426\u5219\u603b\u80fd\u627e\u5230\u4e00\u6761\u66f4\u957f\u7684\u94fe\uff0c\u4e0e\u76f4\u5f84\u7684\u5b9a\u4e49\u77db\u76fe\u3002\u663e\u7136\u5730\u8111\u6d1e\u4e00\u4e0b\u5373\u53ef\u3002p\u4e3a\u76f4\u5f84\u7684\u4e00\u7aef\uff0c\u90a3\u4e48\u81ea\u7136\u7684\uff0c\u4e0ep\u6700\u8fdc\u7684q\u5c31\u662f\u76f4\u5f84\u7684\u53e6\u4e00\u7aef\u3002\n\n\u5728\u7b2c2\u6b65\u7684\u904d\u5386\u4e2d\uff0c\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u524d\u9a71\u8282\u70b9\u3002\u6700\u540e\u4eceq\u9012\u5f52\u5230p\uff0c\u5373\u53ef\u5f97\u5230\u76f4\u5f84\u7684\u5177\u4f53\u65b9\u6848\u3002\n\uff08\u800c\u4e14dp\u90a3\u4e48\u96be\uff0c\u641c\u7d22\u591a\u4e48\u597d\uff01\uff09\n\n\u4eba\u751f\u82e6\u77ed\uff0c\u9644\u4e0a\u4e24\u8fb9bfs\uff01\n\n```cpp\nint dis[50050],maxdis=0;\nbool vis[50050];\ninline void finder()\n{\n    queue <int> q;\n    q.push(1);\n    vis[1]=true;\n    while (!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for (int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            if (!vis[v])\n            {\n                vis[v]=true;\n                q.push(v);\n                dis[v]=dis[u]+e[i].val;\n            }\n        }\n    }\n    int st=0;\n    int maxd=0;\n    for (int i=1;i<=n;i++)\n        if (dis[i]>maxd)\n        {\n            st=i;\n            maxd=dis[i];\n        }\n    q.push(st);\n    memset(dis,0,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    vis[st]=true;\n    while (!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for (int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            if (!vis[v])\n            {\n                vis[v]=true;\n                q.push(v);\n                dis[v]=dis[u]+e[i].val;\n            }\n        }\n    }\n    maxd=0;\n    for(register int i=1;i<=n;i++) maxd=max(maxd,dis[i]);\n    maxdis=maxd;\n}\n```\n\n\n#### \u65b9\u6cd5\u4e8c\uff1a\u6811\u5f62dp\u6c42\u6811\u7684\u76f4\u5f84\n\u8bbe1\u53f7\u8282\u70b9\u4e3a\u6839,\"N\u4e2a\u70b9N-1\u6761\u8fb9\u7684\u65e0\u5411\u56fe\"\u5c31\u53ef\u4ee5\u770b\u505a\u201c\u6709\u6839\u6811\u201d\n\n\u8bbed[x]\u8868\u793a\u4ece\u8282\u70b9x\u51fa\u53d1\u8d70\u5411\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u80fd\u591f\u5230\u8fbe\u7684\u6700\u8fdc\u8282\u70b9\u7684\u8ddd\u79bb\u3002\u8bbex\u7684\u5b50\u8282\u70b9\u4e3ay1,y2, y3, ..., yt\uff0cedge(x, y)\u8868\u793a\u8fb9\u6743\uff0c\u663e\u7136\u6709\"\nd[x] = max{d[yi] + edge(x, yi)}(1 <= i <= t)\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u6bcf\u4e2a\u8282\u70b9x\u6c42\u51fa\"\u7ecf\u8fc7\u8282\u70b9x\u7684\u6700\u957f\u94fe\u7684\u957f\u5ea6\"f[x]\uff0c\u6574\u68f5\u6811\u7684\u76f4\u5f84\u5c31\u662fmax{f[x]}(1 <= x <= n)\n\n\u5bf9\u4e8ex\u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9yi\u548cyj\uff0c\"\u7ecf\u8fc7\u8282\u70b9x\u7684\u6700\u957f\u94fe\u957f\u5ea6\"\u53ef\u4ee5\u901a\u8fc7\u56db\u4e2a\u90e8\u5206\u6784\u6210\uff1a\u4eceyi\u5230yi\u5b50\u6811\u4e2d\u7684\u6700\u8fdc\u8ddd\u79bb\uff0c\u8fb9(x, yi)\uff0c\u8fb9(x, yj)\uff0c\u4eceyj\u5230yj\u5b50\u6811\u4e2d\u7684\u6700\u8fdc\u8ddd\u79bb\u3002\n\n\u8bbej < i\uff0c\u56e0\u6b64\uff1af[x] = max{d[yi] + d[yj] + edge(x, yi) + edge(x, yj)}(1 <= j < i <= t)\n\n\u4f46\u662f\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528\u4e24\u5c42\u5faa\u73af\u6765\u679a\u4e3ei, j\u3002\n\n\u5728\u8ba1\u7b97d[x]\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b50\u8282\u70b9\u7684\u5faa\u73af\u5c06\u8981\u679a\u4e3e\u5230i\u65f6d[x]\u6070\u597d\u5c31\u4fdd\u5b58\u4e86\u4ece\u8282\u70b9x\u51fa\u53d1\u8d70\u5411\u201c\u4ee5yj(j < i)\u4e3a\u6839\u7684\u5b50\u6811\u201d\uff0c\u80fd\u591f\u5230\u8fbe\u7684\u6700\u8fdc\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u8fd9\u4e2a\u8ddd\u79bb\u5c31\u662fmax{d[yi] +edge(x, yi)}(1<= j < i)\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5148\u7528d[x] + d[yi] + edge(x, yi)\u66f4\u65b0f[x]\uff0c\u518d\u7528d[yi] + edge(x, yi)\u66f4\u65b0d[x]\u5373\u53ef\u3002\n\n## \u73b0\u5728\u5f00\u59cb\u8bb2\u8ff0\u6ee1\u5206\u505a\u6cd5\uff01\n\n\u9996\u5148\u6211\u4eec\u5206\u6790\u6811\u4e0a\u8def\u5f84\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u591a\u4e2av\u4ee5u\u4e3a\u8282\u70b9\u7684\u60c5\u51b5\uff08\u5373u=LCA\uff08v1\uff0cv2\uff0cv3\uff0c\u2026\u2026\uff09\uff09\uff0c\u81f3\u591a\u53ea\u80fd\u6709\u4e00\u4e2av\u7684\u503c\u5411\u4e0a\u4f20\u9012\uff0c\u5176\u4f59\u6240\u6709\u70b9\uff0c\u5e94\u5c3d\u53ef\u80fd\u7684\u5408\u5e76\uff01\u4e00\u65e6\u53ef\u4ee5\u5408\u5e76\uff0c\u6216\u8005\u672c\u8eab\u8d85\u8fc7\u4e8c\u5206\u7b54\u6848\u7684\u8981\u6c42\uff0c\u4fbfans++\uff0c\u6700\u7ec8\u5224\u65adans\u4e0em\u7684\u5173\u7cfb\uff0c\u4ece\u800c\u4e8c\u5206\u7b54\u6848\uff01\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7sfh71uh.png)\n\n\u5982\u679cval\uff08\u4ece\u5b69\u5b50\u4eec\u90a3\u5f97\u5230\u7684\u503c\uff09+dis[v][u]\u8d85\u8fc7\u4e86limit\uff0c\u90a3\u4e48\u7b54\u6848+1\u3002\u5426\u5219\u6211\u4eec\u80af\u5b9a\u5f97\u60f3\u627e\u4e2a\u4e1c\u897f\u53bb\u7ef4\u62a4\u8fd9\u4e9b\u53ef\u80fd\u505a\u51fa\u8d21\u732e\u7684\u503c\uff01\u540c\u65f6\u8fd9\u4e9b\u503c\u6216\u8bb8\u53ef\u4ee5\u548c\u53e6\u4e00\u4e2a\u8def\u5f84\u5408\u5e76\uff0c\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u4fbf\u53ef\u4ee5\u4ece\u7ef4\u62a4\u7684\u91cc\u9762\u5220\u53bb\uff0c\u5e76\u4e14ans++\u3002\u5982\u679c\u5230\u6700\u540e\u6240\u6709\u7684\u70b9\u90fd\u901a\u8fc7\u5408\u5e76\u6216\u8005\u81ea\u8eab\u6ee1\u8db3\u4e86\u6761\u4ef6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5f80\u4e0a\u7684\u8d21\u732e\uff08\u9664\u81ea\u8eab\u8def\u5f84\u5916\uff09\u4e3a0\uff01\n\n\u6b63\u5982\u8be5\u56fe\uff0c\u6b64\u65f65\u53f7\u8282\u70b9\u662f\uff0c6,7,8\u4e09\u70b9\u7684LCA\uff0c\u90a3\u4e486,7,8\u4e09\u70b9\u5404\u81ea\u4ece\u81ea\u5df1\u5b69\u5b50\u90a3\u7ee7\u627f\u6765\u7684\u503c\uff0cval6\uff0cval7\uff0cval8\u3001\n\n\u7528\u4e0a\u56fe\u6765\u8bf4\u5c31\u662f\uff0c\u5047\u5982val6+dis[6][5]\u6bd4limit\u5927\uff0c\u90a3\u4e48\u6211\u4eecans++\uff0c\u4e0d\u52a0\u5165\u7ef4\u62a4\u7684\u5e8f\u5217\u3002\u5e76\u4e14\u628aval7+dis[7][5]\u548cval8+dis[8][5]\u538b\u5165\u7ef4\u62a4\u7684\u5e8f\u5217\uff1b\u5047\u5982val7+dis[7][5]+val8+dis[8][5]\u6bd4limit\u5927\uff0c\u6211\u4eec\u4fbf\u628a7,8\u4e4b\u524d\u52a0\u5165\u5e8f\u5217\u7684\u503c\u5220\u53bb\uff0c\u8fd9\u68375\u5f80\u4e0a\u7684\u8d21\u732e\uff08\u9664\u672c\u8eabdis[4][5]\uff09\u4e3a0\uff01\n\n\u5f53\u7136\u8fd9\u662f\u80fd\u591f\u5408\u5e76\uff0c\u5982\u679c\u4e0d\u80fd\u5408\u5e76\u6216\u8005\u5408\u5e76\u5b8c\u4e86\u4ee5\u540e\u6709\u5404\u79cd\u591a\u4f59\u7684\u8fb9\u5462\uff1f\n\n\u7531\u4e8e\u6211\u4eec\u662f\u7528m\u6761\u9053\u8def\uff0c\u56e0\u6b64\u4e0d\u4e00\u5b9a\u9700\u8981\u628an-1\u6761\u9053\u8def\u5168\u90e8\u5e94\u7528\uff01\u4e3a\u4e86\u66f4\u597d\u7684\u7ef4\u62a4\u6700\u5c0f\u503c\u6700\u5927\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u5c06\u5e8f\u5217\u4e2d\u6700\u5927\u7684\u5411\u4e0a\u8d21\u732e\uff01\n\n\u6700\u540e\u5c31\u5404\u81ea\u4e8c\u5206\u7b54\u6848\u5c31\u8fc7\u53bb\u4e86\u554a\uff01\uff01\n\n### \u663e\u7136\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u7ef4\u62a4\u5e8f\u5217\u5e94\u8be5\u7528\u4ec0\u4e48\u7ef4\u62a4\uff01  multiset\uff01\uff01\uff01\nmultiset\u53ef\u4ee5\u5f88\u597d\u7684\u5c06\u5e8f\u5217\u91cc\u7684\u6570\u503c\u6392\u5e8f\uff0c\u5e76\u4e14\u5141\u8bb8\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\uff01\u800c\u4e14\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u662f\uff0c\u4ed6\u652f\u6301\u5220\u9664\u67d0\u4e2a\u5143\u7d20\u4ee5\u53ca\u4e8c\u5206\u67e5\u627e\u7684\u7b49\u64cd\u4f5c\uff01\n\n\u5177\u4f53\u529f\u80fd\u5982\u4e0b\uff1a\n```cpp\nmultiset <int> S;\nS.clear();//\u79fb\u9664\u6240\u6709\u5143\u7d20\uff0c\u5c06\u5bb9\u5668\u6e05\u7a7a\nS.erase(pos);//\u79fb\u9664\u8fed\u4ee3\u5668pos\u6240\u6307\u4f4d\u7f6e\u5143\u7d20\uff0c\u65e0\u8fd4\u56de\u503c\u3002\nS.begin();//\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\nS.end();//\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e,\u5373\u4ed6\u6ca1\u6709\u5143\u7d20\u7684\u4f4d\u7f6e\u6307\u9488\u3002\nS.count(num);//\u8fd4\u56de\u5e8f\u5217\u91ccnum\u8fd9\u4e2a\u5143\u7d20\u7684\u6b21\u6570\nS.find(num);//\u8fd4\u56de\u5e8f\u5217\u91cc\u7b2c\u4e00\u4e2anum\u7684\u4f4d\u7f6e\u3002\nS.lower_bound(num);//\u8fd4\u56de\u5143\u7d20\u503c\u4e3anum\u7684\u7b2c\u4e00\u4e2a\u53ef\u5b89\u63d2\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u5143\u7d20\u503c >=num\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e \nS.insert(num);//\u63d2\u5165\u4e00\u4e2a\u5143\u7d20num\nS.empty();//\u5224\u65ad\u5e8f\u5217\u662f\u5426\u4e3a\u7a7a\nS.size();//\u8fd4\u56de\u5e8f\u5217\u4e2d\u5143\u7d20\u4e2a\u6570 \n```\n\n### \u663e\u7136\u8fd9\u91cc\u8fd8\u6709\u53e6\u4e00\u4e2a\u95ee\u9898\uff01\u4e8c\u5206\u7b54\u6848\u7684\u8fb9\u754c\uff01\n\u663e\u7136\u65e0\u8bba\u5728m\u4e3a\u4f55\u503c\u65f6\uff0c\u6700\u5927\u8def\u5f84\u4e0d\u4f1a\u8d85\u8fc7\u6811\u7684\u76f4\u5f84\uff08\u6216\u8005\u94fe\u7684\u957f\u5ea6\uff09\uff0c\u90a3\u4e48r\u4e0d\u59a8\u4e00\u5f00\u59cb\u5c31\u4e3a\u6811\u7684\u76f4\u5f84\uff01\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cctype>\n#include <vector>\n#include <queue>\n#include <set>\n#define maxn 500005\n\nusing namespace std;\n\ninline int read()\n{\n    int x=0,f=1;\n\tchar ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nint n,m;\n\nstruct Edge\n{\n\tint to,val,next;\n}e[maxn];\nint head[maxn],cur;\ninline void add(int from,int to,int val)\n{\n\te[++cur].to=to;\n\te[cur].val=val;\n\te[cur].next=head[from];\n\thead[from]=cur;\n}\n\n//\u4e24\u8fb9bfs\u6c42\u6811\u7684\u76f4\u5f84 \n\nint dis[50050],maxdis=0;\nbool vis[50050];\ninline void finder()\n{\n    queue <int> q;\n    q.push(1);\n    vis[1]=true;\n    while (!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for (int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            if (!vis[v])\n            {\n                vis[v]=true;\n                q.push(v);\n                dis[v]=dis[u]+e[i].val;\n            }\n        }\n    }\n    int st=0;\n    int maxd=0;\n    for (int i=1;i<=n;i++)\n        if (dis[i]>maxd)\n        {\n            st=i;\n            maxd=dis[i];\n        }\n    q.push(st);\n    memset(dis,0,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    vis[st]=true;\n    while (!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for (int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            if (!vis[v])\n            {\n                vis[v]=true;\n                q.push(v);\n                dis[v]=dis[u]+e[i].val;\n            }\n        }\n    }\n    maxd=0;\n    for(register int i=1;i<=n;i++) maxd=max(maxd,dis[i]);\n    maxdis=maxd;\n}\n\nstruct Work\n{\n    multiset <int> s[50050];\n    int ans=0;\n    inline int dfs(int u,int fa,int lim)\n    {\n        s[u].clear();\n        int val=0;\n        for(register int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            if (v!=fa)\n            {\n                val=dfs(v,u,lim)+e[i].val;\n                if(val>=lim) ans++;\n                else s[u].insert(val);\n            }\n        }\n        int maxd=0;\n        while (!s[u].empty())\n        {\n            int res=*s[u].begin(); \n            if(s[u].size()==1) return max(maxd,res);//\u5982\u679c\u8fd9\u70b9\u73b0\u5728\u53ea\u7ef4\u62a4\u4e86\u4e00\u4e2a\u503c\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u5c31\u597d\u4e86\uff01~ \n            multiset <int> :: iterator it=s[u].lower_bound(lim-res);\n            if(it==s[u].begin() && s[u].count(*it)==1) it++;\n\t\t\t//\u5982\u679clim-res\u6070\u597d\u7b49\u4e8eres\uff0c\u4f46\u662fres\u7684\u6570\u91cf\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u5f97\u4e0d\uff0c\u8ba9\u8fed\u4ee3\u5668it\u7684\u4f4d\u7f6e\u5411\u540e\u4e00\u4f4d\uff1b\n\t\t\t//\u8d77\u7801\u8fd9\u6837\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\uff0c\u56e0\u4e3amultiset\u540e\u4e00\u4f4d\u4e00\u5b9a\u6bd4\u524d\u4e00\u4f4d\u5927 \n            if(it==s[u].end()) \n            {\n                maxd=max(maxd,res);\n                s[u].erase(s[u].find(res));\n            }\n            //\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u5148\u628a\u539f\u5148\u8fd9\u4e2a\u503c\u6e05\u9664\u6389\uff0c\u518d\u51c6\u5907\u5411\u4e0a\u4f20\u9012\uff01 \n            else//\u663e\u7136\u8fd9\u662f\u5408\u5e76\u5566\uff01 \n            {\n                ans++;\n                s[u].erase(s[u].find(*it));\n                s[u].erase(s[u].find(res)); \n            }\n        }\n        return maxd;\n    }\n\n    inline bool check(int lim)\n    {\n        ans=0;\n        dfs(1,0,lim);\n        return ans>=m;\n    }\n    \n    inline int solve()\n    {\n        int l=1,r=maxdis,mid;\n        while (l<r)\n        {\n            mid=(l+r+1)>>1;\n            if (check(mid)) l=mid;\n            else r=mid-1;\n        }\n        return l;\n    }\n}T;\n\nint main()\n{\n    n=read(),m=read();\n    for (int i=1;i<n;i++)\n    {\n        int u=read(),v=read(),w=read();\n        add(u,v,w),add(v,u,w);\n    }\n    finder();\n    cout<<T.solve()<<endl;\n    return 0;\n}\n\n```\n",
        "postTime": 1568188980,
        "uid": 124517,
        "name": "Notshgiook",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\n> \u505a\u6cd5: \u4e8c\u5206\u7b54\u6848+\u8d2a\u5fc3\n\n- $m=1$\uff1a\u76f4\u63a5\u8dd1\u6811\u7684\u76f4\u5f84,\u5c31\u662f\u5b83\u7684\u6700\u5927\u503c\u3002\n\n- $a_i=1$\uff1a\u83ca\u82b1\u56fe\u3002\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u3002\u5982\u679cn>2m,\u8bf4\u660e\u662f\u8db3\u591f\u6211\u4eec\u5408\u5e76\u7684,\u76f4\u63a5\u5408\u5e76\u7b2c2m\u5927\u4e0e\u7b2c1\u5927,\u7b2c2m-1\u4e0e\u7b2c2\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u5982\u679cn<=2m,\u8bf4\u660e\u94fe\u4e0d\u591f\u6211\u4eec\u5168\u90e8\u5408\u5e76\u7684,\u56e0\u6b64\u6211\u4eec\u8981\u7a7a\u51fa\u6700\u5927\u7684\u90a3\u51e0\u6761\u94fe,\u5269\u4e0b\u7684\u4e24\u4e24\u5408\u5e76\u3002\n\n(\u4e0b\u9762\u8fd9\u5e45\u56fe\u662f\u4ece\u5927\u5230\u5c0f\u540e\u6392\u5e8f\u540e\u7684\u7b56\u7565)(\u603b\u611f\u89c9[Owen_codeisking](https://www.cnblogs.com/owencodeisking/p/9958850.html)\u5927\u4f6c\u5224\u9519\u4e86\uff1f)\n\n![](https://s2.ax1x.com/2019/08/16/mm6nAg.png)\n\n(\u8be6\u60c5\u89c1code\u5427)\n\n- $b_i=a_i+1$\uff1a\u4e00\u6761\u957f\u94fe\u94fe,\u6211\u4eec\u4e8c\u5206\u5b83\u7684\u6700\u5c0f\u503c,\u7136\u540e\u770b\u80fd\u5206\u51fa\u591a\u5c11\u4e2a`$\\ge$`\u8fd9\u4e2a\u503c\u7684\u533a\u95f4\u3002\n\n- \u5206\u652f\u4e0d\u8d85\u8fc73\uff1a\u76f8\u5f53\u4e8e\u5316\u7b80\u7248\u7684\u6b63\u89e3,\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u5b50\u94fe\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u6700\u5c0f\u503c,\u63a5\u4e0b\u6765\u8fdb\u884c\u5224\u65ad,\u82e5\u6211\u4eec\u5f53\u524d\u7684\u8fd9\u4e2a\u94fe\u5df2\u7ecf>=\u8fd9\u4e2a\u957f\u5ea6\u7684\u8bdd,\u90a3\u4e48\u6211\u4eec\u76f4\u63a5++cnt,\u5426\u5219\u6211\u4eec\u8fd8\u8981\u8fdb\u884c\u4e00\u6b21\u5224\u65ad,\u7528\u6765\u5224\u65ad\u4e24\u6761\u5b50\u94fe\u80fd\u4e0d\u80fd\u5408\u5e76\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u5927\u94fe\u3002\u5982\u679c\u4e24\u6761\u5b50\u94fe\u4e0d\u80fd\u5408\u5e76\u51fa,\u90a3\u4e48\u5c31\u8981\u627e\u51fa\u6700\u5927\u7684\u4e00\u6761\u5b50\u94fe\u5f80\u4e0a\u9762\u4f20\u9012\u3002\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u8d2a\u5fc3\u7b56\u7565\u3002\n\n- \u6b63\u89e3\n\n\u6b63\u89e3\u4e5f\u4e0e\u4e0a\u9762\u4e00\u79cd\u60c5\u51b5\u5dee\u4e0d\u591a\u4e86\u3002\u5c31\u662f\u6bcf\u6b21\u627e\u5b50\u94fe\u7684\u65f6\u5019,\u627e\u51fa\u7b2c\u4e00\u4e2a\u80fd\u4e0e\u4ed6\u8138\u8fde\u4e0a\u5f62\u6210\u4e00\u6761\u957f\u94fe\u3002(\u5373\u4e24\u4e24\u5408\u5e76)\n\n\u4e3a\u4e86\u4e0d\u91cd\u590d\u5408\u5e76,\u6211\u4eec\u5728\u6bcf\u4e24\u6761\u94fe\u540e\u5408\u5e76\u5b8c\u6bd5\u540e,\u8fd8\u8981\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4,\u76f8\u5f53\u4e8e\u8d77\u5230\u4e86\u6307\u9488\u7684\u4f5c\u7528\u3002(\u8be6\u60c5\u89c1code)\n\n#### Code:\n,\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define rep(i,a,b) for(re int i=a,i##end=b; i<=i##end; i++)\n#define drep(i,a,b) for(re int i=a,i##end=b; i>=i##end; i--)\n#define repp(i,a,b) for(re int i=a,i##end=b; i<i##end; i++)\n#define drepp(i,a,b) for(re int i=a,i##end=b; i>i##end; i--)\n#define Erep(i,x) for(int i=head[x]; ~i; i=Edge[i].nxt)\n#define ms(x,a) memset(x,a,sizeof x)\ntypedef long long ll;\nusing namespace std;\ntemplate<class T>inline T rd(){\n\tstatic char ch;static bool neg;static T x;\n\tfor(neg=0,ch=0; ch>'9'||ch<'0'; neg|=(ch=='-'),ch=getchar());\n\tfor(x=0; ch<='9'&&ch>='0'; x=(x<<1)+(x<<3)+(ch-'0'),ch=getchar());\n\treturn neg?-x:x;\n}\ntemplate<class T>inline bool Max(T &x, T y){\n\treturn x<y?x=y,1:0;\n}\ntemplate<class T>inline bool Min(T &x, T y){\n\treturn x>y?x=y,1:0;\n}\nconst int N=50000+5;\n//bool S1;\nstruct edge{\n\tint to,val,nxt;\n}Edge[N<<1];\nint head[N],tcnt;\nvoid AddEdge(int u, int v, int w){\n\tEdge[++tcnt]=(edge)<%v,w,head[u]%>;;\n\thead[u]=tcnt; return;\n}\n\nint A[N];\nint n,m,tot,mn=2e9;\nstruct flower{//\u83ca\u82b1\n\tvoid solve(){\n\t\tsort(A+1,A+n+1,greater<int>());\n\t\tint ans=2e9;\n\t\tif(n>2*m) rep(i,1,m) Min(ans,A[i]+A[(m<<1)-i+1]);\n\t\telse{\n\t\t\trepp(i,m+1,n) A[(m<<1)-i+1]+=A[i];\n\t\t\trep(i,1,m) Min(ans,A[i]);\n\t\t}\n\t\tprintf(\"%d\\n\",ans); return;\n\t}\n}flower;\n\nstruct Chain{//\u5927\u94fe\n\tint dis[N];\n\tvoid dfs(int x, int fa){\n\t\tErep(i,x){\n\t\t\tedge y=Edge[i];\n\t\t\tif(y.to==fa) continue;\n\t\t\tdis[y.to]=dis[x]+y.val;\n\t\t\tdfs(y.to,x);\n\t\t}\n\t\treturn;\n\t}\n\tbool check(int x){\n\t\tint lst=0,tot=0;\n\t\trep(i,1,n){\n\t\t\tif(dis[i]-dis[lst]>=x) lst=i,tot++;\n\t\t}\n\t\treturn tot>=m;\n\t}\n\tvoid solve(){\n\t\tdfs(1,0);\n\t\tint l=mn,r=tot,res=0;\n\t\twhile(l<=r){\n\t\t\tint mid=(l+r)>>1;\n//\t\t\tprintf(\"check %d\\n\",mid);\n\t\t\tif(check(mid)) res=mid,l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tprintf(\"%d\\n\",res); return;\n\t}\n}chain;\n\nstruct P20{//m=1\n\tint ans1,ans2;\n\tvoid dfs(int x, int fa, int dis){\n\t\tif(dis>ans2) ans2=dis,ans1=x;\n\t\tErep(i,x){\n\t\t\tedge y=Edge[i];\n\t\t\tif(y.to==fa) continue;\n\t\t\tdfs(y.to,x,dis+y.val);\n\t\t}\n\t\treturn;\n\t}\n\tvoid solve(){\n\t\tans1=0,ans2=0;\n\t\tdfs(1,0,0); ans2=0; dfs(ans1,0,0);\n\t\tprintf(\"%d\\n\",ans2);\n\t}\n}p20;\n\nint deg[N];\n\nstruct P80{//\u4e8c\u53c9\u6811\n\tint cnt;\n\tvector<int>vec[N];\n\tint dfs(int x, int fa, int limit){\n\t\tvec[x].clear();\n\t\tErep(i,x){\n\t\t\tedge y=Edge[i];\n\t\t\tif(y.to==fa) continue;\n\t\t\tint tmp=dfs(y.to,x,limit)+y.val;\n\t\t\tif(tmp>=limit) cnt++;\n\t\t\telse vec[x].push_back(tmp);\n\t\t}\n\t\tint SZ=vec[x].size();\n\t\tif(!SZ) return 0;\n\t\tif(SZ==1) return vec[x][0];\n\t\tif(vec[x][1]+vec[x][0]>=limit) {cnt++; return 0;}\n\t\treturn max(vec[x][1],vec[x][0]);\n\t}\n\tbool check(int x){\n\t\tcnt=0;\n\t\trep(i,1,n) if(deg[i]==1){\n\t\t\tdfs(i,i,x); return cnt>=m;\n\t\t}\n\t\treturn 0;\n\t}\n\tvoid solve(){\n\t\tint l=mn,r=tot,res=-1;\n\t\twhile(l<=r){\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(check(mid)) res=mid,l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tprintf(\"%d\\n\",res);\n\t\treturn;\n\t}\n}p80;\n\nstruct P100{//\u6b63\u89e3\uff0c\u8ddf\u4e8c\u53c9\u6811\u5dee\u4e0d\u591a\n\tint cnt;\n\tint List[N];\n\tint f[N];\n\tbool mark[N];\n\tint find(int x){\n\t\treturn x==f[x]?x:f[x]=find(f[x]);\n\t}\n\tint dfs(int x, int fa, int limit){\n\t\tint pre=List[0]+1;\n\t\tErep(i,x){\n\t\t\tedge y=Edge[i];\n\t\t\tif(y.to==fa) continue;\n\t\t\tint tmp=dfs(y.to,x,limit)+y.val;\n\t\t\tif(tmp>=limit) cnt++;\n\t\t\telse List[++List[0]]=tmp;\n\t\t}\n\t\tsort(List+pre,List+List[0]+1);\n\t\trep(i,pre,List[0]+1) f[i]=i,mark[i]=0;//\u5e76\u67e5\u96c6\u7ef4\u62a4\n\t\trep(i,pre,List[0]){\n\t\t\tif(mark[i]) continue;//\u9632\u6b62\u91cd\u590d\u7528\u94fe\n\t\t\tint k=lower_bound(List+i+1,List+List[0]+1,limit-List[i])-List;//\u627e\u5230\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u4e0e\u4e4b\u5408\u5e76\u7684\n\t\t\tif((k=find(k))>List[0]) continue;//\u770b\u540e\u9762\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u5408\u7684\n\t\t\tmark[i]=mark[k]=1;\n\t\t\tf[k]=k+1, f[i]=i+1; cnt++;\n\t\t}\n\t\tint mx=0;\n\t\tdrep(i,List[0],pre){\n\t\t\tif(mark[i]) continue;\n\t\t\tMax(mx,List[i]); break;//\u627e\u5230\u6700\u957f\u94fe\n\t\t}\n\t\tList[0]=pre-1;\n\t\treturn mx;\n\t}\n\tbool check(int x){\n\t\tcnt=0;\n\t\trep(i,1,n) if(deg[i]==1){\n\t\t\tdfs(i,i,x); return cnt>=m;\n\t\t}\n\t\treturn 0;\n\t}\n\tvoid solve(){\n\t\tint l=mn,r=tot,res=-1;\n\t\twhile(l<=r){\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(check(mid)) res=mid,l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tprintf(\"%d\\n\",res);\n\t\treturn;\n\t}\n}p100;\n\n//bool S2;\n\nint main(){\n//\tprintf(\"%.2lf\\n\",(&S2-&S1)/1024.0/1024);\n\tms(head,-1);\n\tn=rd<int>(); m=rd<int>();\n\tint Deg=0;\n\tbool flag1=1,flag2=1;\n\trepp(i,1,n){\n\t\tint u=rd<int>(),v=rd<int>(),w=rd<int>(); deg[u]++,deg[v]++;\n\t\tMax(Deg,deg[u]); Max(Deg,deg[v]);\n\t\tAddEdge(u,v,w); AddEdge(v,u,w);\n\t\tA[i]=w; tot+=w; Min(mn,w);\n\t\tflag1&=(u==1 || v==1); flag2&=(u==v+1 || v==u+1);\n\t}\n\t/*\u4e00\u5806\u5207\u5206\u2026\u2026*/\n\tif(flag1) flower.solve();\n\telse if(flag2) chain.solve();\n\telse if(m==1) p20.solve();\n\telse if(Deg<=3) p80.solve();\n\telse p100.solve();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1565998397,
        "uid": 81715,
        "name": "ppp204",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u672c\u7bc7\u9898\u89e3\u5e9f\u8bdd\u6bd4\u8f83\u591a\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728\u6211\u7684blog\u4e0a\u67e5\u770b\uff1ahttps://arintaro.com/2019/04/27/Contest/NOIP%202018/D1T3%20%E8%B5%9B%E9%81%93%E4%BF%AE%E5%BB%BA/\n#### Description:\n\n\u7ed9\u5b9a\u4e00\u68f5\u5e26\u6743\u6811\uff0c\u8981\u6c42\u4ece\u6811\u4e0a\u5212\u5206\u51fa$m\u200b$\u6761\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\uff0c\u4ee4\u201c\u957f\u5ea6\u6700\u5c0f\u7684\u8def\u5f84\u7684\u957f\u5ea6\u201d\u6700\u5927\uff0c\u6570\u636e\u8303\u56f4\u5728$5 \\times 10^4\u200b$\u7ea7\u522b\uff08\u5b9e\u9645\u4e0a\u53ef\u4ee5\u51fa\u5230$5\\times10^5\u200b$\u5de6\u53f3\uff0c\u8fb9\u6743\u518d\u7f29\u5c0f\u70b9\u751a\u81f3\u80fd\u66f4\u5927\uff0c\u5361$sort\u200b$?(\u96fe\n\n#### Solution:\n\n\u5206\u6790\u4e00\u4e0b\u51fa\u9898\u65b9\u5411\uff0c\u8fd9\u4e2a\u63cf\u8ff0\u6b63\u89e3\u57fa\u672c\u662f\u4e8c\u5206\u7b54\u6848\u6ca1\u8dd1\u4e86\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6709\u4e00\u4e2a\u4e0d\u9519\u7684$idea$\uff0c\u4f46\u662f\u96be\u5ea6\u8fd8\u4e0d\u591f/\u5361\u4e0d\u6389\u4e71\u641e\uff0c\u9700\u8981\u5f80\u5916\u9762\u5957\u4e2a\u58f3\uff0c\u6700\u5bb9\u6613\u5957\u4e5f\u6700\u597d\u60f3\u7684\u5c31\u662f\u52a0\u4e2a\"\u6700\u5c0f\u503c\u6700\u5927\u3001\u6700\u5927\u503c\u6700\u5c0f\"\u7684\u63cf\u8ff0\uff0c\u5916\u5c42\u5c31\u5957\u4e0a\u4e86\u4e2a\u4e8c\u5206\u7b54\u6848\u7684\u58f3\uff0c\u6240\u4ee5\u6211\u4eec\u80af\u5b9a\u662f\u4f18\u5148\u8003\u8651\u4e8c\u5206\u7b54\u6848\u7684\u3002\n\u65e2\u7136\u786e\u5b9a\u4e86\u7b97\u6cd5\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u6bcf\u6b21\u5224\u65ad\u80fd\u5426\u6709$m$\u6761\u8def\u5f84\uff0c\u957f\u5ea6\u81f3\u5c11\u6709$mid$\uff0c\u90a3\u4e48\u4e8c\u5206\u7684\u51fa\u7684\u7b54\u6848\"\u8def\u5f84\u7684\u6700\u5c0f\u957f\u5ea6\"\u5fc5\u7136\u5bf9$check$\u6709\u6240\u5e2e\u52a9\uff0c\u53d1\u73b0\u4e0d\u5bb9\u6613$check$\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u201c\u4ece\u54ea\u91cc\u5212\u5206\u8def\u5f84\u201d\uff0c\u5982\u679c\u8fd9\u4e00\u6b65\u5212\u5206\u51fa\u4e86\u4e00\u6761\u8fb9\uff0c\u53ef\u80fd\u8f83\u5927\u5f71\u54cd\u540e\u9762\u7684\u8ba1\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u786e\u5b9a\u4e00\u4e2a\u8ba1\u7b97\u987a\u5e8f\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u5bb9\u6613\u7684\u5212\u5206\u8def\u5f84\u3002\u6309\u7167\u5957\u8def\uff0c\u601d\u8003\u5230\u8fd9\u91cc\uff0c\u80af\u5b9a\u9700\u8981\u6709\u4e00\u4e2a\u6027\u8d28\u5e2e\u52a9\u6211\u4eec\u786e\u5b9a\u8ba1\u7b97\u987a\u5e8f\uff0c\u4e5f\u5c31\u662f\u201c\u4ece\u54ea\u91cc\u4e0b\u624b\u201d\u3002\u80fd\u591f\u786e\u5b9a\u8ba1\u7b97\u987a\u5e8f\u7684\u6027\u8d28\u4e00\u822c\u6765\u8bf4\u90fd\u662f\u8d2a\u5fc3\uff0c\u5c31\u50cf\u201c\u75ab\u60c5\u63a7\u5236\u201d\u4e00\u6837\u3002\n\u8003\u8651**\u6027\u8d281\uff1a\u6bcf\u6761\u8def\u5f84\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5176\u5b9e\u662f\u76f8\u540c\u7684\uff0c\u90fd\u662f$1$**\uff0c\u6211\u4eec\u4e4b\u524d\u505a\u8fc7\u4e0d\u5c11\u4f9d\u9760\u201c\u5bf9\u7b54\u6848\u8d21\u732e\u76f8\u540c\u201d\u7684\u8d2a\u5fc3\uff0c\u90fd\u662f\u6392\u5e8f\u4ee5\u540e\u8003\u8651\u600e\u4e48\u9009\u5bf9\u540e\u5e8f\u5f71\u54cd\u6700\u597d\uff0c\u7136\u540e\u80fd\u9009\u5c31\u9009\uff0c\u4ece\u6b64\u786e\u5b9a\u8ba1\u7b97\u987a\u5e8f\u3002\u975e\u5e38\u50cf\u8fd9\u91cc\u7684\u6a21\u578b\uff0c\u8003\u8651\u600e\u4e48\u201c\u6392\u5e8f\u201d\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u5f80\u4e0b\u80fd\u6784\u6210\u4e00\u6761\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e$mid$\u7684\u8def\u5f84\uff0c\u90a3\u5c31\u76f4\u63a5\u9009\u4e0a\u8fd9\u6761\u8def\u5f84\uff0c\u56e0\u4e3a\u8fd9\u6761\u8def\u5f84\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u81f3\u591a\u662f$1$\uff0c\u5373\u4f7f\u628a\u5b83\u7559\u7ed9\u7236\u8282\u70b9\u7528\uff0c\u7b54\u6848\u4e5f\u80af\u5b9a\u4e0d\u4f1a\u66f4\u4f18\uff0c\u52a0\u4e4b**\u6027\u8d282\uff1a\u7236\u8282\u70b9\u53ea\u80fd\u6709\u4e00\u6761\u8def\u5f84\u5230\u5f53\u524d\u8282\u70b9**\uff0c\u7b54\u6848\u53cd\u800c\u8fd8\u53ef\u80fd\u53d8\u5f97\u66f4\u574f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u7c7b\u4f3c\u70b9\u5206\u6cbb\u7684\u5957\u8def\u4ece\u4e0b\u5230\u4e0a\uff0c\u6bcf\u6b21\u8003\u8651\u7ecf\u8fc7\u5f53\u524d\u8282\u70b9\u7684\u8def\u5f84\uff0c\u80fd\u914d\u5bf9\u5c31\u914d\u5bf9\uff0c\u6ce8\u610f\u8fd9\u91cc\u5728**\u4fdd\u8bc1\u914d\u5bf9\u6570\u6700\u5927\u7684\u540c\u65f6\uff0c\u8fd8\u8981\u4fdd\u8bc1\u5269\u4e0b\u7684\u6df1\u5ea6\u6700\u5927**\uff0c\u4ece\u800c\u4e0a\u4f20\u7ed9\u7236\u8282\u70b9\u3002\u6211\u4eec\u4e8c\u5206\u51fa\u7684\u7b54\u6848\u4e5f\u6709\u4e86\u7528\u6b66\u4e4b\u5730\uff0c\u53d1\u73b0\u7684\u6027\u8d28\u4e5f\u5f88\u7b80\u6d01\uff0c\u5728\u8003\u573a\u4e0a\u57fa\u672c\u53ef\u4ee5\u786e\u5b9a\u8fd9\u5c31\u662f\u6b63\u89e3\u60f3\u6cd5\u4e86\u3002\uff08\u60a8\u54ea\u6765\u7684\u81ea\u4fe1\uff1f\n\u7136\u800c\u5230\u8fd9\u91cc\uff0c\u624d\u662f\u672c\u6587\u7684\u6b63\u9898\uff0c\u4e0a\u9762\u90fd\u662f\u5e9f\u8bdd\uff0c\u6ca1\u4eba\u4e0d\u4f1a\u7684\uff0c\u5177\u4f53\u8be5\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u628a\u4e0a\u9762\u7684\u95ee\u9898\u62bd\u8c61\u4e00\u4e0b\uff1a\n\n> \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5217\u548c\u4e00\u4e2a\u6570$mid$\uff0c\u8981\u6c42\u4ece\u6570\u5217\u4e2d\u9009\u51fa\u6700\u591a\u5bf9\u6570\uff0c\u548c\u5927\u4e8e\u7b49\u4e8e$mid$\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u4fdd\u8bc1\u5269\u4e0b\u7684\u6570\u4e2d\u7684\u201c\u6700\u5927\u503c\u201d\u6700\u5927\u3002\n\n\u8fd9\u91cc\u7f51\u4e0a\u901a\u5e38\u6709\u4e09\u79cd\u5b9e\u73b0\u5f62\u5f0f\uff0c\u6211\u4ece\u590d\u6742\u5230\u7b80\u6d01\u8bb2\uff1a\n\n###### \u7b97\u6cd51\uff1a\u8d2a\u5fc3+\u5e73\u8861\u6811/\u53cc\u5411\u94fe\u8868\u3001\u5220\u9664\u6807\u8bb0\n\n\u9996\u5148\uff0c\u6211\u4eec\u663e\u7136\u6709**\u6027\u8d281\uff1a\u5e94\u8be5\u4f18\u5148\u914d\u5bf9\u8f83\u5c0f\u7684\u6df1\u5ea6**\u3002\n\n> \u5982\u679c\u60a8\u89c9\u5f97\u5e76\u4e0d\u663e\u7136\uff0c\u8fd9\u662f\u8bc1\u660e\uff1a\u7531\u4e8e\u6211\u4eec\u8003\u8651\u4e86\u6bcf\u4e2a\u6df1\u5ea6\u80fd\u5426\u914d\u5bf9\uff0c\u8fd9\u80af\u5b9a\u4fdd\u8bc1\u4e86\u5bf9\u6570\u6700\u591a\u3002\u4ee5\u6211\u4eec\u53ea\u8981\u8bc1\u660e\u53ef\u4ee5\u4fdd\u8bc1\u5269\u4e0b\u7684\u6700\u5927\u503c\u6700\u5927\u5373\u53ef\u3002\n> \u4e0d\u59a8\u8003\u8651\u5f53\u524d\u8fd8\u6ca1\u88ab\u5220\u80fd\u914d\u5bf9\u6700\u5c0f\u7684\u6570\uff0c\u5b83\u663e\u7136\u53ef\u4ee5\u4e0e\u5f53\u524d\u8fd8\u6ca1\u88ab\u5220\u6700\u5927\u7684\u6570\u914d\u5bf9\uff0c\u5982\u679c\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u4e0d\u914d\u5bf9\u5b83\uff0c\u4e14\u5bf9\u6570\u76f8\u540c\uff0c\u6700\u5927\u503c\u66f4\u5927\uff1a\u5982\u679c\u8fd9\u79cd\u65b9\u6848\u914d\u5bf9\u4e86\u5f53\u524d\u6700\u5927\u503c\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u628a\u5f53\u524d\u6700\u5927\u503c\u914d\u5bf9\u7684\u6570\u6362\u6210\u5f53\u524d\u6700\u5c0f\u7684\uff0c\u4ece\u800c\u4e0d\u6539\u53d8\u6700\u5927\u503c\uff1b\u5982\u679c\u8fd9\u79cd\u65b9\u6848\u6ca1\u914d\u5bf9\u5f53\u524d\u6700\u5927\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u4e00\u914d\u4f1a\u589e\u591a\u4e00\u4e2a\u5bf9\u6570\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\uff0c\u6545\u8fd9\u6837\u7684\u65b9\u6848\u4e0d\u5b58\u5728\uff0c\u6211\u4eec\u5e94\u8be5\u4f18\u5148\u914d\u8f83\u5c0f\u7684\u3002\n> \u5b9e\u9645\u4e0a\uff0c\u6211\u89c9\u5f97\u8fd9\u79cd\u663e\u7136\u6027\u8d28\u7684\u8bc1\u660e\u5927\u591a\u90fd\u662f\u53cd\u8bc1\u4e00\u6b65\u5c31\u51fa\u6765\u4e86\uff0c\u518d\u4e0d\u884c\u5e26\u4e2a\u8ba8\u8bba\uff0c\u6bd4\u8f83\u5e9f\u8bdd\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u6709**\u6027\u8d282\uff1a\u6700\u4f18\u65b9\u6848\u4e2d\uff0c\u6bcf\u4e2a\u6700\u5c0f\u503c\u90fd\u5e94\u8be5\u4e0e\u80fd\u914d\u5bf9\u7684\u6700\u5c0f\u7684\u6570\u914d\u5bf9**\uff0c\u663e\u7136\uff0c\u4e0d\u8bc1\u4e86\u3002\n\u57fa\u4e8e\u8fd9\u4fe9\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5b9e\u73b0\uff0c\u5927\u6982\u5c31\u662f\u4ece\u5c0f\u5230\u5927\u8003\u8651\u6bcf\u4e2a\u6df1\u5ea6$deep[i]$\uff0c\u5728\u5e73\u8861\u6811\u91cc\u627e\u6700\u5c0f\u7684 $deep[y]$\u6ee1\u8db3$deep[y] \\ge mid - deep[x]$\u5373\u53ef\uff0c\u627e\u5b8c\u76f4\u63a5\u5220\u4e86\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6700\u663e\u7136\uff0c\u590d\u6742\u5ea6\u548c\u5e38\u6570\u90fd\u6700\u5dee\uff0c\u5728\u83ca\u82b1\u56fe\u4e0a\u975e\u5e38\u5bb9\u6613T\u6389\uff0c\u5177\u4f53\u5b9e\u73b0\u65f6\uff0c\u8fd8\u8981\u6ce8\u610f\u201c\u6ca1\u627e\u5230\u201d\uff0c\u201c\u627e\u5230\u81ea\u5df1\u201d\uff0c\u201c\u8fed\u4ee3\u5668\u5220\u9664\u201d\u7b49\u7ec6\u8282\uff08\u5982\u679c\u6ca1\u6709$multiset$\uff0c\u4ee3\u7801\u91cf\u4e5f\u662f\u6700\u5927\u7684\n\u7136\u540e\u8fd8\u6709\u590d\u6742\u5ea6\u4e0d\u5bf9\u7684\u4e71\u641e\uff0c\u6bd4\u5982\u7528$vector$\u66b4\u529b$erase$\uff0c\u7528\u53cc\u5411\u94fe\u8868\u6307\u9488\u626b\u6765\u626b\u53bb\uff0c\u7528\u4e8c\u5206+\u5220\u9664\u6807\u8bb0\uff0c\u4e8c\u5206\u5230\u88ab\u5220\u9664\u7684\u5c31\u66b4\u529b\u5f80\u540e\u627e\uff0c\u8fd9\u4e9b\u90fd\u5bb9\u6613\u9000\u5316\u5230$O(n^2)$\uff0c\u4e0d\u8bf4\u4e86\u3002\uff08~~\u671f\u671b\u5f97\u5206\uff1a55\u5206\uff0c\u5b9e\u9645\u5f97\u5206\uff1a100\u5206~~\n\n###### \u7b97\u6cd52\uff1a\u53cc\u6307\u9488+\u6808\n\n\u4e00\u822c\u8fd9\u79cd\u5f62\u5f0f\u7684\u6570\u5217\u95ee\u9898\u90fd\u80fd\u7528\u6392\u5e8f+\u53cc\u6307\u9488\u89e3\u51b3\uff0c\u6211\u4eec\u63a5\u7740\u8003\u8651\uff0c\u53ef\u4ee5\u5148\u6392\u5e8f\uff0c\u7531\u4e8e\u6027\u8d282\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u5de6\u6307\u9488\uff0c\u628a\u53f3\u6307\u9488\u4e00\u76f4\u5f80\u5de6\u626b\uff0c\u76f4\u5230\u53f3\u6307\u9488\u6307\u7684\u6570\u6ca1\u6cd5\u914d\u5bf9\u4e3a\u6b62\uff0c\u4e2d\u9014\u628a\u53f3\u6307\u9488\u626b\u5230\u7684\u6570\u90fd\u5165\u6808\uff0c\u8fd9\u6837\u6808\u9876\u5c31\u662f**\u80fd\u914d\u5bf9\u7684\u6700\u5c0f\u7684\u6570**\u3002\u5f53\u7136\uff0c\u5982\u679c\u6808\u91cc\u6ca1\u6709\u6570\u5c31\u4e0d\u80fd\u914d\u5bf9\u4e86\uff0c\u5b83\u5c31\u662f\u201c\u5269\u4e0b\u7684\u6570\u201d\uff0c\u8bb0\u5f97\u7528\u5b83\u66f4\u65b0\u4e0a\u4f20\u7ed9\u7236\u8282\u70b9\u7684\u6700\u5927\u6df1\u5ea6\u3002\u6700\u540e\u518d\u628a\u5de6\u6307\u9488\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\uff0c\u7531\u4e8e\u5de6\u6307\u9488\u6307\u7684\u6570\u53d8\u5927\u4e86\uff0c\u4ee5\u524d\u80fd\u914d\u5bf9\u7684\u6570\u73b0\u5728\u8fd8\u90fd\u80fd\u914d\u5bf9\uff0c\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\u3002\n\u7136\u540e\u914d\u5bf9\u5b8c\u6808\u91cc\u7684\u6570\u80af\u5b9a\u90fd\u80fd\u4e24\u4e24\u914d\u5bf9\uff0c\u5982\u679c\u8fd8\u5269\u5947\u6570\u4e2a\uff0c\u6211\u4eec\u663e\u7136\u8fd8\u53ef\u4ee5\u628a\u5269\u4e0b\u6700\u5927\u7684\u6570\u4e0a\u4f20\u7ed9\u7236\u8282\u70b9\uff0c\u7b54\u6848\u7d2f\u52a0\u5373\u53ef\u3002\u6211\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u79cd\u7b97\u6cd5\u662f\u6700\u4f18\u79c0\u7684\uff0c\u6ca1\u4ec0\u4e48\u7ec6\u8282\uff0c\u7406\u89e3\u8d77\u6765\u8fd8\u4e0d\u56f0\u96be\u3002\n\n###### STD\u7b97\u6cd5\uff1a\u53cc\u6307\u9488\n\n\u90a3\u4e48\u6709\u6ca1\u6709\u4e0d\u7528\u6808\uff0c\u5e38\u6570\u66f4\u52a0\u4f18\u79c0\uff08\u5e76\u4e0d\uff0c\u66f4\u52a0\u7b80\u6d01\u7684\u7b97\u6cd5\u5462\uff1f\u6709\uff0c\u5c31\u662f\u672c\u9898\u7684\u6807\u7b97\u3002\n\u57fa\u4e8e\u7b97\u6cd52\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u53f3\u6307\u9488\u8003\u8651\u80fd\u914d\u5bf9\u7684\u5de6\u6307\u9488\uff0c\u628a\u5de6\u6307\u9488\u4e00\u76f4\u5f80\u53f3\u79fb\uff0c\u76f4\u5230\u80fd\u914d\u5bf9\u4e3a\u6b62\uff0c\u5e76\u4e14\u4e2d\u95f4\u7528\u914d\u5bf9\u4e0d\u4e86\u7684\u66f4\u65b0\u4e0a\u4f20\u7684\u6700\u5927\u503c\u3002\u7136\u800c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u7559\u4e0b\u7684\u4e0d\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u53e6\u5916\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488$last\u200b$\uff0c\u8868\u793a\u6700\u5927\uff08\u6700\u53f3\u8fb9\uff09\u7684\u4e00\u4e2a\u53f3\u6307\u9488\uff0c\u5b83\u914d\u5bf9\u7684\u5de6\u6307\u9488\u53ef\u4ee5\u5f80\u524d\u627e\u4e00\u4e2a\u66f4\u5c0f\u7684\u53f3\u6307\u9488\u8fdb\u884c\u914d\u5bf9\u3002\u5bf9\u4e00\u4e2a\u53f3\u6307\u9488$j\u200b$\uff0c\u914d\u5bf9\u5230\u4e86\u5de6\u6307\u9488$i\u200b$\uff0c\u5982\u679c$j-1\u200b$\u4e0d\u80fd\u4e0e$i\u200b$\u914d\u5bf9\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u53f3\u6307\u9488\u4e5f\u663e\u7136\u914d\u5bf9\u4e0d\u4e86\uff0c\u6240\u4ee5$i\u200b$\u5fc5\u987b\u5f97\u4e0e$j\u200b$\u914d\u5bf9\uff0c\u8fd9\u65f6\u6211\u4eec\u66f4\u65b0$last = j - 1\u200b$\u5373\u53ef\uff0c\u5982\u679c\u6700\u540e\u8003\u8651\u4e00\u4e2a\u53f3\u6307\u9488$j\u200b$\u7684\u65f6\u5019\uff0c\u5de6\u53f3\u6307\u9488\u76f8\u649e\uff0c\u90a3\u4e48\u5c31\u5269\u4e0b\u4e86\u4e00\u4e2a\u6570\uff08\u5bf9\u5e94\u7b97\u6cd52\u4e2d\u7684\u6808\u91cc\u7684\u6570\u8fd8\u5269\u5947\u6570\u4e2a\uff09\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u628a$[j+1,last]\u200b$\u6210\u529f\u914d\u5bf9\u7684\u53f3\u6307\u9488\u5e73\u79fb\u5230$[j,last-1]\u200b$\uff0c\u7136\u540e\u7528$last\u200b$\u5bf9\u5e94\u7684\u503c\u66f4\u65b0\u4e0a\u4f20\u7684\u6700\u5927\u503c\u3002\u7531\u4e8e\u7f51\u4e0a$blog\u200b$\u6ca1\u6709\u5bf9\u8fd9\u4e2a\u7b97\u6cd5\u7684\u8bb2\u89e3\uff0c$std\u200b$\u91cc\u7684\u53d8\u91cf\u540d\u8fd8\u90fd\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u5b57\u6bcd\uff0cruozhi\u7684\u6211\u770b\u4e86\u4e24\u8282\u8bfe\u624d\u770b\u61c2$std\u200b$\u5728\u5e72\u4ec0\u4e48\u3002\u3002\n\n\u8fd9\u65f6\u6709\u4eba\u5c31\u8981\u95ee\u4e86\uff0c\u4f18\u5316\u4e86\u4e00\u5927\u987f\uff0c\u6211\u7b97\u6cd51\u4e5f\u662f$O(nlogn log\\frac{\\sum{w_i}}{m})$\u7684\uff0c\u60a8$std$\u4e0d\u8fd8\u662f\u5f97\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u90fd\u4e00\u6837\u554a\u3002\u7136\u800c\u5e76\u4e0d\u662f\uff0c$std$\u91c7\u7528\u4e86\u9ad8\u7aef\u7684\u57fa\u6570\u6392\u5e8f\uff0c\u628a\u6392\u5e8f\u590d\u6742\u5ea6\u964d\u5230\u4e86$O(n)$\uff0c~~\u4ece\u800c\u5b9e\u73b0\u4e86\u5361sort\u7684\u53ef\u80fd~~\u3002\n\u8fd8\u6709\u4fe9\u526a\u679d\uff0c\u4e8c\u5206\u4e0a\u754c\u53ef\u4ee5\u8bbe\u5230$min\\{\\frac{\\sum{w_i}}{m} ,d\\}$\uff0c\u5176\u4e2d$d$\u4e3a\u76f4\u5f84\u957f\u5ea6\u3002\u7136\u540e\u6bcf\u6b21\u4e8c\u5206\u7b54\u6848\u5927\u4e8e\u7b49\u4e8e$m$\u4e86\u5c31\u7acb\u5373\u8fd4\u56de\u3002\n\n\n\n#### Code:\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n\n#define rint register int\n#define lint long long\n#define isnum(x) ('0' <= (x) && (x) <= '9')\ntemplate<typename tint>\nextern inline void readint(tint& x) {\n\tint f = 1; char ch = getchar(); x = 0;\n\tfor(; !isnum(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor(; isnum(ch); ch = getchar()) x = x * 10 + ch - '0';\n\tx *= f;\n}\nusing namespace std;\nconst int maxn = 50000 + 10;\nconst int maxm = 2 * maxn;\nconst int rid = 8;\nint n, m;\nint root = 1, sumw = 0;\n\nint temp[maxn], rcnt[1<<rid], rmod = (1 << rid) - 1;\ninline void rsort(int arr[], int n) {\n\tif(n < 256) { sort(arr+1, arr+n+1); return; }\n\tfor(rint i=0; i<=31; i+=rid) {\n\t\tmemset(rcnt, 0, sizeof(rcnt));\n\t\tfor(rint k=1; k<=n; k++) rcnt[arr[k] >> i & rmod]++;\n\t\tfor(rint j=1; j<=rmod; j++) rcnt[j] += rcnt[j-1];\n\t\tfor(rint k=n; k>=1; k--) temp[rcnt[(arr[k] >> i & rmod)]--] = arr[k];\n\t\tmemcpy(arr, temp, sizeof(int) * (n+1));\n\t}\n}\n\nint head[maxn], ev[maxm], ew[maxm], nxt[maxm];\nint totedge = 0;\ninline void addedge(int nu, int nv, int nw) {\n\tev[++totedge] = nv, ew[totedge] = nw, nxt[totedge] = head[nu];\n\thead[nu] = totedge;\n\tsumw += nw;\n}\n\nint arr[maxn], dist[maxn];\nint dfs(int x, int fa, int mid) {\n\tint res = 0, tot = 0;\n\tfor(rint i=head[x]; i; i=nxt[i]) {\n\t\tif(ev[i] == fa) continue;\n\t\tres += dfs(ev[i], x, mid);\n\t\tif(res >= m) return res;\n\t}\n\tfor(rint i=head[x]; i; i=nxt[i]) {\n\t\tif(ev[i] == fa) continue;\n\t\tif(dist[ev[i]] + ew[i] >= mid) res++;\n\t\telse arr[++tot] = dist[ev[i]] + ew[i];\n\t}\n\trsort(arr, tot), dist[x] = 0;\n\tfor(rint i=1, j=tot, last=tot; i <= j; i++, j--, res++) {\n\t\twhile(i < j && arr[i] + arr[j] < mid) dist[x] = arr[i++];\n\t\tif(i == j) { dist[x] = arr[last]; break; }\n\t\tif(j && arr[i] + arr[j-1] < mid) last = j-1;\n\t\tif(res >= m) return res;\n\t}\n\treturn res;\n}\n\nint maxd, dp[maxn];\nvoid dfs2(int x, int fa) {\n\tfor(rint i=head[x], y=ev[i]; i; i=nxt[i], y=ev[i]) {\n\t\tif(y == fa) continue;\n\t\tdfs2(y, x), maxd = max(maxd, dp[x] + dp[y] + ew[i]);\n\t\tdp[x] = max(dp[x], dp[y] + ew[i]);\n\t}\n}\n\nint main() {\n\tint nu, nv, nw;\n\treadint(n), readint(m);\n\tfor(rint i=1; i<n; i++) {\n\t\treadint(nu), readint(nv), readint(nw);\n\t\taddedge(nu, nv, nw), addedge(nv, nu, nw);\n\t}\n\tdfs2(root, root);\n\tint l = 1, r = min(maxd, sumw / m);\n\twhile(l < r) {\n\t\tint mid = (l + r + 1) >> 1;\n\t\tif(dfs(root, root, mid) >= m) l = mid;\n\t\telse r = mid - 1;\n\t}\n\tprintf(\"%d\\n\", l);\n\treturn 0;\n}\n\n```\n\n```cpp\n// multiset\u7248\uff0c\u5728\u83ca\u82b1\u56fe\u4e0a\u6548\u7387\u5f88\u4f4e\uff0c\u4e0d\u8fc7\u5f00\u4e86O2\u4ee5\u540e\u8dd1\u7684\u98de\u5feb\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <set>\n\n#define rint register int\n#define lint long long\n#define isnum(x) ('0' <= (x) && (x) <= '9')\n#define sit multiset<int>::iterator\ntemplate<typename tint>\nextern inline void readint(tint& x) {\n\tint f = 1; char ch = getchar(); x = 0;\n\tfor(; !isnum(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor(; isnum(ch); ch = getchar()) x = x * 10 + ch - '0';\n\tx *= f;\n}\nusing namespace std;\nconst int maxn = 50000 + 10;\nconst int maxm = 2 * maxn;\nint n, m;\nint root = 1;\nint sumw = 0, dist[maxn];\n\nint head[maxn], ev[maxm], ew[maxm], nxt[maxm];\nint totedge = 0;\ninline void addedge(int nu, int nv, int nw) {\n\tev[++totedge] = nv, ew[totedge] = nw, nxt[totedge] = head[nu];\n\thead[nu] = totedge;\n\tsumw += nw;\n}\n\nmultiset<int> s;\nint dfs(int x, int fa, int mid) {\n\tint res = 0;\n\tfor(rint i=head[x]; i; i=nxt[i]) {\n\t\tif(ev[i] == fa) continue;\n\t\tres += dfs(ev[i], x, mid);\n\t\tif(res >= m) return res;\n\t}\n\tdist[x] = 0, s.clear();\n\tfor(rint i=head[x]; i; i=nxt[i]) {\n\t\tif(ev[i] == fa) continue;\n\t\tif(dist[ev[i]] + ew[i] >= mid) res++;\n\t\telse s.insert(dist[ev[i]] + ew[i]);\n\t}\n\tfor(sit it=s.begin(); it!=s.end() && s.size();) { // nxt\u4e00\u5b9a\u5728it\u540e\u9762\n\t\tsit nxt = s.lower_bound(mid - (*it));\n\t\tif(nxt == it && nxt != s.end()) nxt++;\n\t\tif(nxt == s.end()) { it++; continue; }\n\t\ts.erase(nxt), s.erase(it++), res++; // \u6ce8\u610f\u5148\u5220nxt, \u4e0d\u7136it++\u53ef\u80fd\u7b49\u4e8enxt\n\t\tif(res >= m) return res;\n\t}\n\tif(!s.empty()) dist[x] = *s.rbegin();\n\treturn res;\n}\n\nint main() {\n\tint nu, nv, nw;\n\treadint(n), readint(m);\n\tfor(rint i=1; i<n; i++) {\n\t\treadint(nu), readint(nv), readint(nw);\n\t\taddedge(nu, nv, nw), addedge(nv, nu, nw);\n\t}\n\tint l = 1, r = sumw / 2;\n\twhile(l < r) {\n\t\tint mid = (l + r + 1) >> 1;\n\t\tif(dfs(root, root, mid) >= m) l = mid;\n\t\telse r = mid - 1;\n\t}\n\tprintf(\"%d\\n\", l);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1556185268,
        "uid": 107978,
        "name": "Rintaro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "~~\u542c\u8bf4\u8fd9\u662f\u539f\u9898\u7136\u800c\u6211\u6ca1\u505a\u8fc7~~\n\n\u4e3a\u4e86\u53d1\u626cNOIP\u7684\u98ce\u8303~~\u9a97\u5206~~\uff0c\u5148\u5206\u6790\u90e8\u5206\u5206\uff1a\n\n$20pts$\uff1a\u6ce8\u610f\u5230$m=1$\uff0c\u76f4\u63a5\u6811\u7684\u76f4\u5f84\u3002\n\n$20pts$\uff1a\u6811\u9000\u5316\u6210\u94fe\uff0c\u53ef\u4ee5\u53c2\u8003[\u8fd9\u9053\u9898](https://www.luogu.org/problemnew/show/P1182)\uff0c\u76f4\u63a5\u4e8c\u5206\u7b54\u6848+\u8d2a\u5fc3\u626b\u63cf\u89e3\u51b3\u3002\n\n\u8fd9\u5c31\u542f\u53d1\u4e86\u6211\u4eec\uff0c\u5176\u4ed6\u70b9\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848+\u6811\u4e0a\u8d2a\u5fc3\u89e3\u51b3\u5462\uff1f\n\n\u9996\u5148\u4e8c\u5206\u7b54\u6848\uff0c\u5047\u8bbe\u5f53\u524d\u7b54\u6848\u4e3a$k$\uff0c\u8003\u8651\u8d2a\u5fc3\uff1a\n\n\u8bbe$g_{i}$\u4e3a\u8fde\u5230$i$\u70b9\u7684\u8d5b\u9053\u957f\u5ea6\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$u$\u548c\u5b83\u7684\u540e\u4ee3$v$\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. $g_{v}+dis_{u,v}\\ge k$\uff0c\u76f4\u63a5\u52a0\u5230\u8d21\u732e\u91cc\uff1b\n2. $g_{v}+dis_{u,v}<k$\uff0c\u628a$g_{v}+dis_{u,v}$\u7559\u4e0b\u6765\u8fdb\u5165\u4e0b\u4e00\u6b65\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u628a\u7559\u4e0b\u6765\u7684\u94fe\u4e24\u4e24\u914d\u5bf9\uff0c\u5bf9\u4e8e\u6bcf\u6761\u94fe\uff0c\u914d\u5bf9\u548c\u5b83\u52a0\u8d77\u6765$\\ge k$\u4e14\u5c3d\u91cf\u77ed\u7684\u94fe\uff08\u8fd9\u6837\u8fbe\u5230\u6700\u4f18\uff09\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6ce8\u610f\u5224\u91cd\u3002\n\n\u6700\u540e\uff0c\u5728\u5269\u4e0b\u6765\u7684\u94fe\u91cc\u627e\u4e00\u6761\u6700\u957f\u7684\u4f5c\u4e3a$g_{u}$\u5411\u4e0a\u66f4\u65b0\u3002\n\n### \u8bc1\u660e\uff1a\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\u548c\u6700\u540e\u4e00\u6b65\uff0c\u6b63\u786e\u6027\u663e\u7136\uff1b\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\uff0c\u8003\u8651\u5982\u679c\u548c$link_{a}$\u914d\u5bf9\u7684\u662f$link_{b}$\uff0c\u73b0\u5728\u8981\u628a$link_{a}$\u5411\u4e0a\u4f20\uff0c\u90a3\u4e48$link_{b}$\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u6ca1\u6709\u94fe\u548c\u5b83\u914d\u5bf9\uff0c\u767d\u767d\u6d6a\u8d39\u4e00\u4e2a$link_{b}$\uff0c\u5fc5\u5b9a\u4e0d\u4f1a\u66f4\u4f18\uff1b\n2. \u6709\u4e00\u4e2a\u7a7a\u95f2\u7684$link_{c}$\u53ef\u4ee5\u4e0e\u5b83\u914d\u5bf9\uff0c\u7531\u201c\u914d\u5bf9\u548c\u5b83\u52a0\u8d77\u6765$\\ge k$\u4e14\u5c3d\u91cf\u77ed\u7684\u94fe\u201d\u53ef\u77e5$link_{a}$\u6bd4$link_{c}$\u77ed\uff0c\u90a3\u4e48\u628a$link_{c}$\u6362\u6210$link_{a}$\u4e00\u5b9a\u4e0d\u4f1a\u4f7f$g_{u}$\u53d8\u4f18\uff0c\u56e0\u6b64\u4e5f\u4e0d\u662f\u6700\u4f18\u65b9\u6848\uff1b\n\n\u7efc\u5408\uff0c\u4e0a\u8ff0\u8d2a\u5fc3\u53ef\u4ee5\u627e\u5230\u6700\u4f18\u65b9\u6848\u3002\n\n\u4e8e\u662f\uff0c\u53ef\u4ee5\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\uff01\u7136\u540e\u4e00\u4e2a\u5927\u95ee\u9898\u6765\u4e86\uff1a\u627e\u94fe\u53ef\u4ee5\u4e8c\u5206\uff0c\u5224\u91cd\u600e\u4e48\u529e\uff1f~~\u4f1a\u5e73\u8861\u6811\u3001\u53cc\u6307\u9488\u7b49\u64cd\u4f5c\u7684\u5927\u4f6c\u8bf7\u65e0\u89c6~~\n\n## ~~\u66b4\u529b\u51fa\u5947\u8ff9\uff01~~\n\n\u4e8e\u662f\uff0c\u7528\u4e00\u4e2a$used$\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b\uff0c\u5728\u4e8c\u5206\u7684\u57fa\u7840\u4e0a**\u66b4\u529b\u79fb\u52a8**\u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u590d\u6742\u5ea6$O(nlog^{2}n)-O(n^{2}logn)$\uff0c\u53cd\u6b63\u8fc7\u4e86\uff09\n\n\u4e22\u4ee3\u7801~~\uff08\u8003\u573a\u4ee3\u7801\u5d29\u4e86\uff09~~\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=50005;\nint G[N],to[N<<1],dis[N<<1],nxt[N<<1],sz=-1,n,m;\nint t[N],f[N],g[N];\nbool used[N];\ninline void add(int u,int v,int d){\n    to[++sz]=v;nxt[sz]=G[u];G[u]=sz;\n    to[++sz]=u;nxt[sz]=G[v];G[v]=sz;\n    dis[sz^1]=dis[sz]=d;\n}\ninline int erfen(int x,int l,int r){\n    int m;\n    while(l<r){\n        m=(l+r)>>1;\n        if(t[m]>=x)r=m;\n        else l=m+1;\n    }\n    return t[l]>=x?l:l+1;\n}\nbool dfs(int u,int fa,int k){\n    int i,j,v,cnt=0;\n    for(i=G[u];i!=-1&&f[u]<m;i=nxt[i])if((v=to[i])!=fa){\n        if(dfs(v,u,k))return 1;  //\u5982\u679c\u5df2\u7ecf\u6ee1\u8db3\u4e86\uff0c\u90a3\u5c31\u522b\u7b97\u4e86\uff0cfor\u5faa\u73af\u7684f[u]<m\u4e5f\u662f\u8fd9\u4e2a\u7528\u5904\n        f[u]+=f[v];\n    }\n    for(i=G[u];i!=-1&&f[u]<m;i=nxt[i])if((v=to[i])!=fa){\n        if(g[v]+dis[i]>=k)f[u]++;  //\u60c5\u51b51\n        else{  //\u60c5\u51b52\n            t[++cnt]=g[v]+dis[i];\n            used[cnt]=0;\n        }\n    }\n    if(f[u]>=m)return 1;  //\u603b\u8d21\u732e\u503c\u53ef\u4ee5\u5927\u4e8em\uff01\u4e0d\u8981\u5199==\uff01\n    sort(t+1,t+cnt+1);\n    for(i=1;i<cnt;i++)if(!used[i]){\n        j=erfen(k-t[i],i+1,cnt);\n        while(j<=cnt&&used[j])j++; //\u6ca1\u9519\u66b4\u529b\u79fb\n        if(j<=cnt){\n            if(++f[u]==m)return 1;  //\u8fd9\u6b21\u53ef\u4ee5\u5199==\u4e86\n            used[i]=used[j]=1;\n        }\n    }\n    for(i=cnt;i;i--)if(!used[i]){  //\u6700\u540e\u4e00\u6b65\n        g[u]=t[i];\n        break;\n    }\n    return 0;\n}\ninline bool check(int k){\n    memset(f,0,sizeof(f));memset(g,0,sizeof(g));\n    return dfs(1,0,k);\n}\nint main(){\n    int i,u,v,w,l=1e9,r=0,mid;\n    scanf(\"%d%d\",&n,&m);\n    memset(G,-1,sizeof(G));\n    for(i=1;i<n;i++){\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add(u,v,w);\n    }\n    for(i=0;i<n-1;i++){\n        if(dis[i<<1]<l)l=dis[i<<1];\n        r+=dis[i<<1];\n    }\n    r/=m;  //l,r\u7684\u4e0a\u4e0b\u754c\u5b9a\u7684\u7d27\u4e00\u70b9\uff0c\u63d0\u9ad8\u6548\u7387\n    while(l<r){\n        mid=(l+r+1)>>1;\n        if(check(mid))l=mid;\n        else r=mid-1;\n    }\n    printf(\"%d\",l);\n    return 0;\n}\n```\n\n\u597d\u5427\u518d\u6765\u4e00\u4e2a$O(nlog^{2}n)$\u7684$Treap$\u6b63\u89e3\uff08\u4f60\u95ee\u6211\u4e3a\u4ec0\u4e48\u4e0d\u7528$multiset$\uff1f~~\u56e0\u4e3a\u4e0d\u4f1a\u7528~~\uff09~~\u597d\u5427\u88ab\u66b4\u529b\u540a\u6253~~\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<new>\n#include<algorithm>\nusing namespace std;\n//Treap\u90e8\u5206\nstruct node{\n    int v,cnt,r;\n    node *ch[2];\n    node(int v):v(v){cnt=1;r=rand();ch[0]=ch[1]=NULL;}\n    int cmp(int x){\n        if(v==x)return -1;\n        return x<v?0:1;\n    }\n}*rt=NULL;\ninline void rotate(node* &o,int d){\n    node *k=o->ch[d^1];o->ch[d^1]=k->ch[d];k->ch[d]=o;o=k;\n}\nvoid ins(node* &o,int x){\n    if(o==NULL)o=new node(x);\n    else{\n        int d=o->cmp(x);\n        if(d==-1)o->cnt++;\n        else{\n            ins(o->ch[d],x);\n            if(o->ch[d]->r>o->r)rotate(o,d^1);\n        }\n    }\n}\nvoid del(node* &o,int x){\n    int d=o->cmp(x);\n    if(d==-1){\n        if(o->cnt>1)o->cnt--;\n        else{\n            if(o->ch[0]!=NULL&&o->ch[1]!=NULL){\n                int d2=(o->ch[0]->r<o->ch[1]->r?0:1);\n                rotate(o,d2);del(o->ch[d2],x);\n            }else{\n                node *k=o;\n                if(o->ch[0]==NULL)o=o->ch[1];\n                else o=o->ch[0];\n                delete k;\n            }\n        }\n    }else del(o->ch[d],x);\n}\nbool find(node *o,int x){\n    if(o==NULL)return 0;\n    int d=o->cmp(x);\n    if(d==-1)return 1;\n    else return find(o->ch[d],x);\n}\n//Treap\u6b63\u5e38\u64cd\u4f5c\nint ask(node *o,int x){  //\u627e\u94fe\uff08\u76f8\u5f53\u4e8e\u4e0a\u4e00\u4e2a\u7684erfen\u51fd\u6570\uff09\n    if(o==NULL)return -1;\n    if(o->v==x)return x;\n    else if(o->v<x)return ask(o->ch[1],x);\n    else{\n        int t=ask(o->ch[0],x);\n        if(t!=-1)return t;\n        else return o->v;\n    }\n}\nvoid clear(node* &o){  //\u628aTreap\u6e05\u7a7a\n    if(o==NULL)return;\n    clear(o->ch[0]);clear(o->ch[1]);\n    delete(o);o=NULL;\n}\ninline int askmax(){  //\u627e\u5269\u4f59\u7684\u91cc\u9762\u7684\u6700\u5927\u503c\n    if(rt==NULL)return 0;\n    node *k=rt;\n    while(k->ch[1]!=NULL){\n        k=k->ch[1];\n    }\n    return k->v;\n}\nconst int N=50005;\nint G[N],to[N<<1],dis[N<<1],nxt[N<<1],sz=-1,n,m;\nint t[N],f[N],g[N];\ninline void add(int u,int v,int d){\n    to[++sz]=v;nxt[sz]=G[u];G[u]=sz;\n    to[++sz]=u;nxt[sz]=G[v];G[v]=sz;\n    dis[sz^1]=dis[sz]=d;\n}\nbool dfs(int u,int fa,int k){\n    int i,j,v,cnt=0;\n    for(i=G[u];i!=-1&&f[u]<m;i=nxt[i])if((v=to[i])!=fa){\n        if(dfs(v,u,k))return 1;\n        f[u]+=f[v];\n    }\n    clear(rt);\n    for(i=G[u];i!=-1&&f[u]<m;i=nxt[i])if((v=to[i])!=fa){\n        if(g[v]+dis[i]>=k)f[u]++;\n        else{\n            t[++cnt]=g[v]+dis[i];\n            ins(rt,t[cnt]);\n        }\n    }\n    if(f[u]>=m)return 1;\n    sort(t+1,t+cnt+1);\n    //\u8ddf\u539f\u6765\u7684\u5dee\u4e0d\u591a\uff0c\u4e0d\u8bf4\u4e86\n    for(i=1;i<cnt;i++)if(find(rt,t[i])){  //\u8fd9\u6761\u94fe\u8981\u5b58\u5728\uff08\u6ca1\u6709\u88ab\u7528\u8fc7\uff09\u624d\u53ef\u4ee5\n        del(rt,t[i]);  //\u4e3a\u4e86\u9632\u6b62\u81ea\u5df1\u5339\u914d\u81ea\u5df1\uff0c\u5148\u5220\u6389\n        if((j=ask(rt,k-t[i]))!=-1){  //\u627e\u5230\n            if(++f[u]==m)return 1;\n            del(rt,j);\n        }else ins(rt,t[i]);  //\u6ca1\u627e\u5230\uff0c\u52a0\u56de\u53bb\n    }\n    g[u]=askmax();\n    return 0;\n}\ninline bool check(int k){\n    memset(f,0,sizeof(f));memset(g,0,sizeof(g));\n    return dfs(1,0,k);\n}\nint main(){\n    int i,u,v,w,l=1e9,r=0,mid;\n    scanf(\"%d%d\",&n,&m);\n    memset(G,-1,sizeof(G));\n    for(i=1;i<n;i++){\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add(u,v,w);\n    }\n    for(i=0;i<n-1;i++){\n        if(dis[i<<1]<l)l=dis[i<<1];\n        r+=dis[i<<1];\n    }\n    r/=m;\n    while(l<r){\n        mid=(l+r+1)>>1;\n        if(check(mid))l=mid;\n        else r=mid-1;\n    }\n    printf(\"%d\",l);\n    return 0;\n}\n```",
        "postTime": 1542527352,
        "uid": 57926,
        "name": "Thinking",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": " \u6b64\u7bc7\u9898\u89e3\u4e0e\u697c\u9876 [Owen_codeisking](https://www.luogu.com.cn/user/35069) \u5b66\u957f\u7b97\u6cd5\u4e00\u81f4\u3002\u7531\u4e8e Owen \u7740\u7b14\u4e8e\u90e8\u5206\u5206\uff0c\u5bf9\u4e8e\u6700\u7ec8\u4ee3\u7801\u7684\u7ec6\u8282\u89e3\u91ca\u8f83\u5c11\uff0c\u5e94\u8be5\u4f1a\u6709\u4eba\u770b\u4e0d\u61c2\uff08\u53cd\u6b63\u6211\u5f00\u59cb\u6ca1\u770b\u61c2\uff09\u3002\u672c\u7bc7\u9898\u89e3\u5bf9 Owen \u7684\u9898\u89e3\u505a\u8865\u5145\uff0c~~\u671b\u7ba1\u7406\u8fc7\u5ba1~~\u3002\n \n### Solution\n\n\u90e8\u5206\u5206\u8bf7\u5230[Owen \u7684\u9898\u89e3](https://www.cnblogs.com/owencodeisking/p/9958850.html)\u3002\n\n\u9898\u76ee\u8981\u6c42**\u957f\u5ea6\u6700\u5c0f\u7684\u8d5b\u9053\u957f\u5ea6\u7684\u6700\u5927\u503c**\uff0c\u60f3\u5230\u4e8c\u5206\u3002\u4e8c\u5206\u7684\u53f3\u4fa7\u7aef\u70b9\u662f\u4ec0\u4e48\u5462\uff1f\u5f00\u59cb\u6211\u60f3\u5230**\u5e73\u5747\u503c\u539f\u7406**\uff1a$min(a,b,c,d)$ \u7684\u6700\u5927\u503c $k$ \uff0c\u6ee1\u8db3 $k\u2264(a+b+c+d)/4$ \uff0c\u521d\u59cb\u53f3\u7aef\u70b9\u5c31\u8d4b\u4e3a $(a+b+c+d)/4$ \u3002Owen \u8fd9\u91cc\u7528**\u6811\u7684\u76f4\u5f84**\u4f5c\u4e3a\u521d\u59cb\u53f3\u7aef\u70b9\u3002\n```cpp\ninline int dfs1(int u,int fa){\n\tint sum1=0,sum2=0;\n\tfor(int i=head[u],v;i;i=e[i].ne){\n\t\tv=e[i].to;\n\t\tif(v==fa)continue;\n\t\tsum2=max(dfs1(v,u)+e[i].val,sum2);\n\t\tif(sum1<sum2)swap(sum1,sum2);\n\t}\n\tup=max(up,sum1+sum2);\n\treturn sum1;\n}\n```\n\n\u4e8c\u5206\u7684\u65f6\u5019\u5224\u65ad $mid$ \u80fd\u5426\u6ee1\u8db3 \u201c\u5206\u6210 $m$ \u4efd\u5e76\u4e14\u6700\u5c0f\u8d5b\u9053\u957f\u5ea6\u7684\u6700\u5927\u503c\u8d85\u8fc7 $mid$ \u201d\u3002\u4e0b\u9762\u6211\u4eec\u601d\u8003\u5982\u4f55\u5224\u65ad\u3002\n\n\u6bcf\u4e00\u4e2a\u8282\u70b9 $u$ \uff0c\u628a\u6bcf\u4e00\u4e2a\u548c\u5b83\u76f8\u8fde\u7684\u70b9 $v$ \u5206\u522b\u52a0\u4e0a\u6765\uff08\u6709\u70b9\u96be\u5f62\u5bb9\uff0c\u770b\u4ee3\u7801\uff09\u3002\n```cpp\n\tv=e[i].to;\n\tif(v==fa)continue;\n\tval=dfs(v,u,k)+e[i].val;\n```\n\n\u5982\u679c\u4e0a\u9762\u7ed9\u51fa\u7684 $val$ \u5df2\u7ecf\u5927\u4e8e\u4e8c\u5206\u65f6\u7684 $mid$ \u4e86\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u591a\u4e00\u6761\u8d5b\u9053\u3002\u5982\u679c\u8fd8\u6ca1\u6709\uff0c\u5c31\u628a\u8fd9\u4e2a\u503c\u52a0\u5230 $multiset$ \u91cc\u9762\u3002\n \n\u540e\u7eed\u7684 $multiset$ \u7684\u5904\u7406\u9700\u8981\u505a\u5206\u7c7b\u3002\n```cpp\n\tint Max=0;\n\twhile(!s[u].empty()){\n\t\tif(s[u].size()==1)//\u53ea\u5269\u4e00\u4e2a\u4e86\u5c31\u7528\u5b83\u4e86\u3002\n\t\t\treturn max(Max,*s[u].begin());\n\t\tit=s[u].lower_bound(k-*s[u].begin());//\u627e\u5230\u53ef\u4ee5\u4f7f\u5f97\u5408\u5e76\u4e24\u6761\u5b50\u56fe\u7684\u6700\u5c0f\u503c\u3002\n\t\tif(it==s[u].begin()&&s[u].count(*it)==1)it++;//\u5982\u679c\u627e\u5230\u7684\u662f it \u81ea\u5df1\uff0c\u8003\u8651\u4e0b\u4e00\u4e2a\u3002\n\t\tif(it==s[u].end()){\n\t\t\tMax=max(Max,*s[u].begin());\n\t\t\ts[u].erase(s[u].find(*s[u].begin()));\n\t\t}//\u6ca1\u6709\u627e\u5230\u6bd4 k-*s[u].begin() \u5927\u7684\uff0c\u5c31\u6311\u6700\u5927\u7684\u3002\n\t\telse {\n\t\t\tans++;\n\t\t\ts[u].erase(s[u].find(*it));\n\t\t\ts[u].erase(s[u].find(*s[u].begin()));\n\t\t}\n\t}\n\treturn Max;\n```\n\n### CODE\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int gin(){\n\tchar c=getchar();\n\tint s=0,f=1;\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-')f=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\ts=(s<<3)+(s<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn s*f;\n}\n\nconst int N=5e4+5;\nint n,m,head[N],tot=0,ans=0,up;\n\nstruct edge {\n\tint to,ne,val;\n}e[N<<1];\n\ninline void add(int u,int v,int w){\n\te[++tot].to=v;\n\te[tot].val=w;\n\te[tot].ne=head[u];\n\thead[u]=tot;\n}\n\ninline int dfs1(int u,int fa){\n\tint sum1=0,sum2=0;\n\tfor(int i=head[u],v;i;i=e[i].ne){\n\t\tv=e[i].to;\n\t\tif(v==fa)continue;\n\t\tsum2=max(dfs1(v,u)+e[i].val,sum2);\n\t\tif(sum1<sum2)swap(sum1,sum2);\n\t}\n\tup=max(up,sum1+sum2);\n\treturn sum1;\n}\n\nmultiset<int> s[N];\nmultiset<int>::iterator it;\n\nint dfs(int u,int fa,int k){\n\ts[u].clear();\n\tint val;\n\tfor(int i=head[u],v;i;i=e[i].ne){\n\t\tv=e[i].to;\n\t\tif(v==fa)continue;\n\t\tval=dfs(v,u,k)+e[i].val;\n\t\tif(val>=k)ans++;\n\t\telse s[u].insert(val);\n\t}\n\tint Max=0;\n\twhile(!s[u].empty()){\n\t\tif(s[u].size()==1)\n\t\t\treturn max(Max,*s[u].begin());\n\t\tit=s[u].lower_bound(k-*s[u].begin());\n\t\tif(it==s[u].begin()&&s[u].count(*it)==1)it++;\n\t\tif(it==s[u].end()){\n\t\t\tMax=max(Max,*s[u].begin());\n\t\t\ts[u].erase(s[u].find(*s[u].begin()));\n\t\t}\n\t\telse {\n\t\t\tans++;\n\t\t\ts[u].erase(s[u].find(*it));\n\t\t\ts[u].erase(s[u].find(*s[u].begin()));\n\t\t}\n\t}\n\treturn Max;\n}\n\nbool check(int k){\n\tans=0;\n\tdfs(1,0,k);\n\tif(ans>=m)return true;\n\treturn false;\n}\n\nint main(){\n\tn=gin(),m=gin();\n\tfor(int i=1;i<n;i++){\n\t\tint u=gin(),v=gin(),w=gin();\n\t\tadd(u,v,w);add(v,u,w);\n\t}\n\tdfs1(1,0);\n\tint l=1,r=up,mid;\n\twhile(l<r){\n\t\tmid=l+r+1>>1;\n\t\tif(check(mid))l=mid;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\\n\",l);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1599393498,
        "uid": 135485,
        "name": "Push_Y",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "# \u5410\uff01\uff01\uff01\n\u8fd9\u9053\u9898\u76ee\u7684\u6570\u636e\u8bf4\u660e\u633a\u6e05\u695a\u7684\uff0c20\u5206\u7684\u94fe**\uff08\u4e8c\u5206\uff09**\uff0c20\u5206\u7684\u6811\u7684\u76f4\u5f84**\uff08\u6811\u5f62dp  \u6216\u80052\u6b21dfs\uff09**\uff0c20\u5206\u7684\u83ca\u82b1\u56fe~~\uff08\u778e\u63b0\uff09~~\uff0c\u4ee5\u53ca100\u5206\u7684\u4e8c\u5206\u3002\n\n------------\n## \u94fe\u4e0e\u6811\u7684\u76f4\u5f84\n\u4e8c\u5206\u8d5b\u9053\u957f\u5ea6\u4e0b\u7ebf\u5373\u53ef\uff0c\u6811\u7684\u76f4\u5f84\u843d\u5f97\u6a21\u677f\uff0c\u849f\u84bb\u8bed\u6587\u592a\u5dee\uff0c\u4e0d\u4f1a\u8868\u8ff0\uff0c\u9886\u4f1a\u7cbe\u795e\u5c31\u597d~\n#### \u4ee3\u7801\u51fa\u573a\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,m;\nint ans,num;\nstruct Edge{\n\tint next,to,len;\n};\nEdge edge[100005];\nint cnt;\nint head[50005];\nint dis[50005];\nint a[50005];\nvoid add(int from,int to,int len)\n{\n\tedge[++cnt].next=head[from];\n\thead[from]=cnt;\n\tedge[cnt].to=to;\n\tedge[cnt].len=len;\n}\nvoid dfs(int u,int fa)\n{\n\tfor(int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\tdfs(v,u);\n\t\tans=max(ans,dis[u]+dis[v]+edge[i].len);\n\t\tdis[u]=max(dis[u],dis[v]+edge[i].len);\n\t}\n}\nint check(int k)\n{\n\tint res=0,tmp=0;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\ttmp+=a[i];\n\t\tif(tmp>=k)\n\t\t{\n\t\t\tres++;\n\t\t\ttmp=0;\n\t\t}\n\t}\n\treturn res;\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tif(m==1)\n\t{\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tint x,y,w;\n\t\t\tscanf(\"%d %d %d\",&x,&y,&w);\n\t\t\tadd(x,y,w);\n\t\t\tadd(y,x,w);\n\t\t}\n\t\tans=0;\n\t\tdfs(1,-1);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\telse\n\t{\n\t\tint l=0,r=0,mid;\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tint x,y,w;\n\t\t\tscanf(\"%d %d %d\",&x,&y,&w);\n\t\t\ta[max(x,y)]=w;\n\t\t\tr+=w;\n\t\t}\n\t\twhile(l<r)\n\t\t{\n\t\t\tmid=(l+r)>>1;\n\t\t\tif(check(mid)<m)\n\t\t\t\tr=mid;\n\t\t\telse\n\t\t\t{\n\t\t\t\tl=mid+1;\n\t\t\t\tans=mid;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n## \u83ca\u82b1\u56fe\n\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u518d\u8fdb\u884c\u6bd4\u8f83\u6700\u5c0f\u503c\uff0c\u5373ans=(ans,a[i]+a[2*m-i+1])\n\u601d\u60f3\u5c31\u662f\u5c0f\u7684\u8865\u4e0a\u66f4\u5c0f\u7684\uff0c\u6709\u4e00\u70b9\u8d2a\u5fc3\u554a~~~\n#### \u4ee3\u7801\u51fa\u573a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint a[50005];\nint ans;\nbool cmp(int p,int q)\n{\n\treturn p>q;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y,w;\n\t\tcin>>x>>y>>w;\n\t\ta[max(x,y)-1]=w;\n\t}\n\tif(m<=(n-1)/2)\n\t{\n\t\tsort(a+1,a+n,cmp);\n\t\tans=1e9+7;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\ta[i]+=a[2*m-i+1];\n\t\t\tans=min(ans,a[i]);\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n\telse\n\t{\tsort(a+1,a+n,cmp);\n\t\tans=1e9+7;\n\t\tfor(int i=1;i<=m;i++)\n            ans=min(ans,a[i]+a[2*m-i+1]);\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}\n```\n## \u6b63\u89e3\n\u663e\u800c\u6613\u89c1\u7684\u4e8c\u5206\uff0c~~\u5c3d\u7ba1~~~~\u6211\u4e0d\u4f1a~~\uff0c\u8bb0\u5f97\u5f00O2\n#### \u76f4\u63a5\u653e\u4ee3\u7801\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<set>\nusing namespace std;\nconst int N=50000;\nint n,m;\nint head[N+5],tot,ans,up;\nstruct node{\n    int to,next,val;\n}e[N*2+5];\nmultiset<int> s[N+5];\nmultiset<int>::iterator it;\ninline int read()\n{\n    int s=0,w=1;\n    char c=getchar();\n    while(c<'0'||c>'9')\n    {\n        if(c=='-')\n            w=-w;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9')\n    {\n        s=s*10+c-'0';\n        c=getchar();\n    }\n    return s*w;\n}\ninline void add(int x,int y,int w)\n{\n    e[++tot].to=y;\n    e[tot].val=w;\n    e[tot].next=head[x];\n    head[x]=tot;\n}\nint dfs(int x,int fa,int k)\n{\n    s[x].clear();\n    int val;\n    for(int i=head[x],y;i;i=e[i].next)\n    {\n        y=e[i].to;\n        if(y==fa)\n            continue;\n        val=dfs(y,x,k)+e[i].val;\n        if(val>=k)\n            ans++;\n        else\n            s[x].insert(val);\n    }\n    int res=0;\n    while(!s[x].empty())\n    {\n        if(s[x].size()==1)\n            return max(res,*s[x].begin());\n        it=s[x].lower_bound(k-*s[x].begin());\n        if(it==s[x].begin()&&s[x].count(*it)==1)\n            it++;\n        if(it==s[x].end())\n        {\n            res=max(res,*s[x].begin());\n            s[x].erase(s[x].find(*s[x].begin()));\n        }\n        else\n        {\n            ans++;\n            s[x].erase(s[x].find(*it));\n            s[x].erase(s[x].find(*s[x].begin()));\n        }\n    }\n    return res;\n}\nint check(int k)\n{\n    ans=0;\n    dfs(1,0,k);\n    if(ans>=m)\n        return 1;\n    return 0;\n}\nint dfs1(int x,int fa)\n{\n    int sum1=0,sum2=0;\n    for(int i=head[x],y;i;i=e[i].next)\n    {\n        y=e[i].to;\n        if(y==fa)\n            continue;\n        sum2=max(sum2,dfs1(y,x)+e[i].val);\n        if(sum1<sum2)\n            swap(sum1,sum2);\n    }\n    up=max(up,sum1+sum2);\n    return sum1;\n}\nint main()\n{\n    n=read(),m=read();\n    int x,y,w;\n    for(int i=1;i<n;i++)\n    {\n        x=read(),y=read(),w=read();\n        add(x,y,w);\n        add(y,x,w);\n    }\n    dfs1(1,0);\n    int l=1,r=up,mid;\n    while(l<r)\n    {\n        mid=(l+r+1)>>1;\n        if(check(mid))\n            l=mid;\n        else\n            r=mid-1;\n    }\n    printf(\"%d\\n\",l);\n    return 0;\n}\n```\n\u7b2c\u4e00\u4e2a\u9898\u89e3\uff0c\u5e0c\u671b\u5927\u4f6c\u8f7b\u55b7\u77e5\u9053",
        "postTime": 1574613932,
        "uid": 124311,
        "name": "Nice\u5361\u5361\u897f",
        "ccfLevel": 0,
        "title": "\u8d5b\u9053\u4fee\u5efa"
    },
    {
        "content": "\u4e8c\u5206\u7b54\u6848+\u8d2a\u5fc3`check`\n\n\u5361\u4e86\u6211\u4e00\u4e2a\u5c0f\u65f6\u7684\u9898...\n\n\u5176\u5b9e\u5f88\u4e45\u4e4b\u524d\u5199\u662f\u6ca1\u6709\u601d\u8def\u7684\uff0c\u80e1\u4e71\u6253\u4e86\u6253\u66b4\u529b\u7684`55`\u5206\u5c31\u6e9c\u4e86\u3002\n\n\u5982\u4eca\u518d\u6361\u8d77\u6765\u770b\uff0c\u77e5\u9053\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u53ef\u662f`check`\u600e\u4e48\u60f3\u4e5f\u60f3\u4e0d\u51fa\u3002\n\n\u6ca1\u529e\u6cd5\u770b\u4e86\u9898\u89e3\u7684\u601d\u8def\uff0c\u8c41\u7136\u5f00\u6717\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u6570\u7ec4$f_i$\u4ee3\u8868\uff0c\u4ee5$i$\u4e3a\u6839\u7684\u6700\u957f\u7684\uff0c\u672a\u88ab\u9009\u62e9\u7684\u94fe\u662f\u591a\u5c11\u3002\n\n\u6211\u4eec\u5728`check`\u6bcf\u4e00\u4e2a`mid`\u65f6\uff0c\u4ece\u6839\u90e8\u5f00\u59cb\u8d2a\u5fc3\u7684\u5411\u4e0a\u53d6\uff0c\u7136\u540e\u9884\u5904\u7406\u51fa\u5b83\u5bf9\u5e94\u7684\u6240\u6709\u513f\u5b50\u7684$f_i+w$\uff08$w$\u4e3a\u8fb9\u6743\uff09\uff0c\u7136\u540e\u6392\u5e8f\u4e00\u4e0b\uff0c\u518d\u4ece\u6700\u5c0f\u7684\u5f00\u59cb\u4e00\u4e00\u8fdb\u884c\u914d\u5bf9\uff0c\u5982\u679c\u914d\u5bf9\u6210\u529f\u7684\u8bdd$tot++$\uff0c\u5426\u5219\u66f4\u65b0\u4e00\u4e0b\u65e0\u6cd5\u914d\u5bf9\u7684\u6700\u5927\u503c$max$\u3002\n\n\u8fdb\u884c\u4e86\u5982\u4e0a\u64cd\u4f5c\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5c06$f_i=max$\uff0c\u7136\u540e\u9010\u6b65\u7684\u66f4\u65b0\u5230\u6839\u8282\u70b9\uff0c\u5224\u65ad$tot$\u4e0e$mid$\u7684\u5173\u7cfb\u5373\u53ef\u3002\n\n\u7136\u540e\u91cd\u70b9\u6765\u4e86\uff0c\u6bcf\u6b21\u6392\u5e8f\uff1f\u518d\u52a0\u4e0a\u4e8c\u5206\u7b54\u6848\uff1f\u590d\u6742\u5ea6$O(n^2log^2n)$?\n\n~~\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a`Splay`\u8fdb\u884c\u5feb\u901f\u7684\u63d2\u5165~~\n\n\u53ef\u4ee5\u91cd\u590d\u5e76\u4e14\u5feb\u901f\u63d2\u5165\uff0c\u4f60\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\n\n\u663e\u7136\u662f```std::multiset```\uff08~~\u4ec0\u4e48\u90fd\u662f\u663e\u7136~~\uff09\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u590d\u6742\u5ea6$O(logn)$\uff0c\u63d2\u5165\u540e\u67e5\u627e\u7684\u64cd\u4f5c\u662f$O(logn)$,\u7b97\u4e0a\u4e8c\u5206\u7684\u8bdd\uff0c\u603b\u590d\u6742\u5ea6\u662f$O(nlog^2n)$\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n(\u8bb2\u9053\u7406\uff0c\u6709\u70b9\u96be\u8c03...\u78e8\u4e86\u6211\u5feb\u4e00\u5c0f\u65f6\u7684\u65f6\u95f4...\n\n$Code:$\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 50000 + 10;\nint n , m;\nmultiset <int> S[N];\n\nint l = 0, r ,head_[N] , cnt , mid , tot;\nint f[N];\n\nstruct Edge {\n\tint to , nxt , w;\n}e[N << 1];\n\nvoid add(int u , int v , int w) {\n\te[++ cnt].to = v;\n\te[cnt].w = w;\n\te[cnt].nxt = head_[u];\n\thead_[u] = cnt;\n}\n\nvoid Insert(int x , int p) {\n\tS[p].insert(x);\n}\n\nvoid dfs(int now , int fa) {\n\tS[now].clear();\n\tint max1 = 0 , max2 = 0;\n\tfor(int i = head_[now] ; i ; i = e[i].nxt) {\n\t\tint v = e[i].to , w = e[i].w;\n\t\tif(v == fa) continue;\n\t\tdfs(v , now);\n\t\tif(f[v] + w >= mid) {\n\t\t\ttot ++; continue;\n\t\t}\n\t\tInsert(f[v] + w , now);\n\t}\n\tmultiset <int> :: iterator it;\n\tint maxx = 0;\n\twhile(!S[now].empty()) {\n\t\tint tag = *S[now].begin();\n\t\tS[now].erase(S[now].begin()); \n\t\tit = S[now].lower_bound(mid - tag);\n\t\tif(it != S[now].end()) {\n\t\t\tS[now].erase(it); tot ++;\n\t\t} else maxx = max(maxx , tag);\n\t} \n\tf[now] = maxx;\t\n}\n\nbool check() {\n\ttot = 0;\n\tfor(int i = 1 ; i <= n ; ++ i) f[i] = 0;\n\tdfs(1 , 1);\n\tif(tot >= m) return true;\n\treturn false;\n}\n\nint main () {\n\tscanf(\"%d %d\" , &n , &m);\n\tfor(int i = 1 ; i < n ; ++ i) {\n\t\tint u , v , w;\n\t\tscanf(\"%d %d %d\" ,&u , &v , &w);\n\t\tadd(u , v , w); add(v , u , w);\n\t\tr += w;\n\t}\n\tint ans = 0;\n\twhile(l <= r) {\n\t\tmid = (l + r) >> 1;\t\t\n\t\tif(check()) ans = mid , l = mid + 1;\n\t\telse r = mid - 1;\n\t}\n\tprintf(\"%d\\n\" , ans);\n\treturn 0;\n}\n```",
        "postTime": 1572521484,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u5176\u5b9e\u601d\u8def\u524d\u9762\u7684\u90fd\u8bb2\u8fc7\u4e86,\u5c31\u662f\u8d2a\u5fc3+\u4e8c\u5206\u7b54\u6848.\n\n\u9996\u5148\u8981\u660e\u786e.\u7531\u4e8e\u8fd9\u662f\u68f5\u6811,\u5e76\u4e14\u6211\u4eec\u4fee\u5efa\u7684\u8d5b\u9053\u4e0d\u80fd\u9009\u91cd\u590d\u7684\u8fb9,\u6240\u4ee5.\u5bf9\u4e8e\u6bcf\u4e2a\u975e\u53f6\u8282\u70b9.\u5b83\u4e00\u5b9a\u6709\u513f\u5b50.\u5e76\u4e14\u975e\u53f6\u8282\u70b9\u5f80\u513f\u5b50\u8d70,\u5b83\u4e00\u5b9a\u53ea\u4f1a\u8d70\u51fa\u4e00\u4e2a\u503c.\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848.\n\n\u5bf9\u4e8e\u6bcf\u4e2ak,\u6211\u4eec\u7528dfs\u6765check.\u6211\u4eec\u5148\u8003\u8651\u7b2c\u4e8c\u5c42\u975e\u53f6\u8282\u70b9(\u513f\u5b50\u662f\u53f6\u7ed3\u70b9)\u5b83\u53ef\u80fd\u4f1a\u6709\u8bb8\u591a\u513f\u5b50,\u4f46\u5b83\u6bcf\u4e2a\u53ea\u80fd\u6709\u4e00\u4e2a\u503c,\u90a3\u5c31\u662f\u5b83\u548c\u513f\u5b50\u7684\u8fde\u8fb9,\u5bf9\u4e8e\u5b83\u4e2d\u95f4\u7684\u8bb8\u591a\u503c.\u6211\u4eec\u91c7\u7528\u8d2a\u5fc3\u7684\u601d\u60f3,\u5148sort\u4e00\u904d.\u5c06\u5b83\u513f\u5b50\u7684\u503c\u6392\u5e8f.\u5bf9\u4e8e\u8fd9\u4e9b\u503c,\u6211\u4eec\u6709\u4e09\u79cd\u5904\u7406\u65b9\u5f0f\n\n1.\u5982\u679c\u8fd9\u4e2a\u503c\u2265k,ans\u76f4\u63a5++\n\n2.\u5982\u679c\u8fd9\u4e2a\u503c<k,\u6211\u4eec\u5c31\u627e\u4e00\u4e2a\u521a\u597d\u80fd\u7ec4\u6210\u2265k\u7684\u53e6\u5916\u4e00\u4e2a\u503c,\u4e0e\u4e4b\u914d\u5bf9.\n\n3.\u5982\u679c\u8fd9\u4e2a\u6570\u5c0f\u4e8ek\u4e14\u4e0d\u80fd\u914d\u5bf9.\u90a3\u5c31\u76f4\u63a5\u5c06\u8fd9\u4e2a\u503c\u5411\u4e0a\u4f20.\u4f5c\u4e3a\u8fd9\u4e2a\u8282\u70b9\u7236\u8282\u70b9\u7684\u6743\u503c.\n\n\u5b50\u8282\u70b9\u7684\u6743\u503c\u5c31\u4e3a. \u4f20\u4e0a\u53bb\u7684\u6743\u503c+\u8fb9\u6743\n\n\u663e\u7136\u590d\u6742\u5ea6\u74f6\u9888\u57282\u4e0a,\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u590d\u6742\u5ea6\u53e6\u5916\u7684\u601d\u8def.\n\nvector\u5b58\u6743\u503c,\u7136\u540e\u518d\u4e8c\u5206\u4e00\u4e0b,\u627e\u7b26\u54082\u6761\u4ef6\u7684,\u5982\u679c\u4e4b\u524d\u7528\u8fc7\u4e86,\u5c31\u5411\u540e.\u5982\u679c\u627e\u5230\u7684\u503c\u7b26\u54081,\u5c31\u5c06\u5f53\u524d\u503c\u4e0a\u4f20,\u4e0d\u7528\u914d\u5bf9.\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500005;\nvector<int> v[maxn];\nint co[maxn],n,m,ans;\nvector<int> a[maxn];\nbool vis[maxn];\nvoid dfs(int x,int  k,int fa)\n{\n\tfor(int i=0;i<v[x].size();i+=2)\n\t{\n\t\tint nxt=v[x][i],z=v[x][i+1];\n\t\tif(nxt==fa)  continue;\n\t\tdfs(nxt,k,x);\n\t\ta[x].push_back(z+co[nxt]);\n\t\tco[nxt]=0;\n\t}\n\tsort(a[x].begin(),a[x].end());\n\tint len=a[x].size();\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tvis[i]=0;\n\t}\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tif(!vis[i]&&a[x][i]>=k)\n\t\t{\n\t\t\tans++;\n\t\t\tcontinue;\n\t\t}\t\n\t\tif(!vis[i])\n\t\t{\n\t\t\tint l=i+1,r=len-1,mu=k-a[x][i];\n\t\t\twhile(l<r)\n\t\t\t{\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tif(a[x][mid]>=mu)\n\t\t\t\t{\n\t\t\t\t\tr=mid;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tl=mid+1;\n\t\t\t\t}\n\t\t\t}\t\n\t\t\twhile(vis[l]) l++;//\u5faa\u73af\u9632\u91cd\u590d\u9009.\n\t\t\tif(a[x][l]>=k||l==i||a[x][l]+a[x][i]<k||l>=len) {co[x]=a[x][i];continue;}//\u6ce8\u610f\u8fd9\u91cc\u7ec6\u8282\u8f83\u591a.\n\t\t\tvis[l]=1;\n\t\t\tans++;\n\t\t\tcontinue;\n\t\t}\n\t\n\t}\n\twhile(!a[x].empty())\n\t{\n\t\ta[x].pop_back();\n\t}\t\n}\nbool work(int k)\n{\n\tans=0;\n\tdfs(1,k,0);\n\tif(ans>=m) return 0;else return 1;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tint maxx=0;\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tv[x].push_back(y);\n\t\tv[x].push_back(z);\n\t\tv[y].push_back(x);\n\t\tv[y].push_back(z);\t\n\t\tmaxx+=z;//\u6700\u5927\u503c\n\t}\t\n\tint l=1,r=maxx;\n\twhile(l<r)//\u4e8c\u5206\n\t{\n\t\tif(l==r-1) {if(!work(r)) {l=r;break;}else break;}//\u9632\u6b7b\u5faa\u73af.\n\t\tint mid=(l+r)>>1;\n\t\tif(work(mid))\n\t\t{\n\t\t\tr=mid-1;\n\t\t}else\n\t\t{\n\t\t\tl=mid;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",l);\n}\n```",
        "postTime": 1571362287,
        "uid": 53852,
        "name": "\u5f26\u5dfb\u3053\u3053\u308d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u666e\u53ca\u9009\u624b\u53c8\u6765\u505aNOIP\u539f\u9898\u4e86\u3002\n\n## \u4e00\u3001\u9898\u76ee\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P5021)\n\n## \u4e8c\u3001\u89e3\u6cd5\n\n55\u5206\u4e0d\u591a\u8bf4\uff0c\u8010\u5fc3\u5199\u62ff\u5f97\u5230\u7684\u3002\n\n\u6b63\u89e3\u8003\u8651\u5bf9\u7b54\u6848\u4e8c\u5206\uff0c\u6211\u4eec\u8003\u8651\u600e\u4e48\u68c0\u67e5$mid$\u3002\n\n\u7528\u6811\u5f62$dp$\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5148\u8003\u8651\u5bf9\u4e8e$u$\u7684\u5b50\u6811\u7684\u60c5\u51b5\uff1a\n\n1\u3001\u5982\u679c\u5b50\u6811$u$\u4e2d\u7684\u6700\u957f\u94fe\u5927\u4e8e\u7b49\u4e8e$mid$\uff0c\u80af\u5b9a\u8ba9\u5b83\u5355\u72ec\u8d21\u732e\u7b54\u6848\u3002\n\n2\u3001\u5982\u679c\u5b50\u6811\u4e24\u6761\u94fe\u7684\u7ec4\u5408\u5927\u4e8e\u7b49\u4e8e$mid$\uff0c\u8ba9\u4ed6\u4eec\u7ec4\u5408\u540e\u8d21\u732e\u7b54\u6848\u3002\n\n3\u3001\u9009\u62e9\u5269\u4e0b\u7684\u6700\u957f\u94fe\u4e0a\u4f20\u3002\n\n\u6211\u4eec\u7684$dfs$\u5c31\u6309\u987a\u5e8f\u505a\u8fd9\u4e09\u70b9\uff0c\u6211\u4eec\u8981\u4f18\u5148\u5728\u5b50\u6811\u5185\u64cd\u4f5c\uff0c\u539f\u56e0\u662f\u8d21\u732e\u6700\u591a\u4e3a\u4e00\uff0c\u8d2a\u5fc3\u5730\u80fd\u8d21\u732e\u65f6\u5c31\u8d21\u732e\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u7528$multiset$\u7ef4\u62a4\uff08\u4e0d\u4f1a\u7684\u540c\u5b66\u81ea\u884c\u53f3\u8f6c\u767e\u5ea6\uff09\uff0c\u6bcf\u6b21\u62ff\u51fa\u6700\u5c0f\u7684\u94fe\u548c\u521a\u597d\u80fd\u7ec4\u5408\u6210\u5927\u4e8e\u7b49\u4e8e$mid$\u7684\u6700\u5c0f\u94fe\uff08\u6ce8\u610f\u4e0d\u80fd\u53ea\u5f00\u4e00\u4e2a$multiset$\uff0c\u56e0\u4e3a\u6211\u4eec\u5728$dfs$\u6bcf\u4e2a\u70b9$multiset$\u662f\u540c\u65f6\u66f4\u65b0\u7684\uff09\u3002\n\n\n```cpp\n#include <cstdio>\n#include <set>\nusing namespace std;\nconst int MAXN = 50005;\nint read()\n{\n    int num=0,flag=1;\n    char c;\n    while((c=getchar())<'0'||c>'9')if(c=='-')flag=-1;\n    while(c>='0'&&c<='9')num=(num<<3)+(num<<1)+(c^48),c=getchar();\n    return num*flag;\n}\nint n,m,tot,sum,ans,cnt,f[MAXN];\nmultiset<int> s[MAXN];\nmultiset<int> :: iterator it;\nstruct edge\n{\n    int v,c,next;\n}e[MAXN*2];\nint dfs(int u,int fa,int x)\n{\n    s[u].clear();\n    for(int i=f[u];i;i=e[i].next)\n    {\n        int v=e[i].v;\n        if(v==fa) continue;\n        int val=dfs(v,u,x)+e[i].c;\n        if(val>=x)\n            cnt++;\n        else\n            s[u].insert(val);\n    }\n    int Max=0;\n    while(!s[u].empty())\n    {\n        if(s[u].size()==1)\n            return max(Max,*s[u].begin());\n        it=s[u].lower_bound(x-*s[u].begin());\n        if(it==s[u].begin() && s[u].count(*s[u].begin())==1) it++;\n        if(it==s[u].end())\n        {\n            Max=max(Max,*s[u].begin());\n            s[u].erase(s[u].begin());\n        }\n        else\n        {\n            cnt++;\n            s[u].erase(it);\n            s[u].erase(s[u].begin());\n        }\n    }\n    return Max;\n}\nbool check(int x)\n{\n    cnt=0;\n    dfs(1,0,x);\n    return cnt>=m;\n}\nvoid conquer(int l,int r)\n{\n    if(l>r) return ;\n    int mid=(l+r)>>1;\n    if(check(mid))\n    {\n        ans=mid;\n        conquer(mid+1,r);\n    }\n    else\n        conquer(l,mid-1);\n}\nint main()\n{\n    freopen(\"track.in\",\"r\",stdin);\n    freopen(\"track.out\",\"w\",stdout);\n    n=read();m=read();\n    for(int i=1;i<n;i++)\n    {\n        int u=read(),v=read(),c=read();\n        e[++tot]=edge{v,c,f[u]},f[u]=tot;\n        e[++tot]=edge{u,c,f[v]},f[v]=tot;\n        sum+=c;\n    }\n    sum/=m;\n    conquer(0,sum);\n    printf(\"%d\\n\",ans);\n}\n\n```\n\uff08\u52a0\u4e86$freopen$\uff09\\^\\_\\^\n",
        "postTime": 1568348988,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "## \u8fd9\u9053\u9898\u6709\u4e00\u70b9\u70b9\u6811\u4e0adp\u7684\u610f\u601d\uff08~~\u5927\u4f6c\u8f7b\u55b7~~\n\u6211\u521a\u62ff\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\u6beb\u65e0\u5934\u7eea\uff0c\u53ea\u77e5\u9053\u8fd9\u9053\u9898\u8981\u4e8c\u5206\u7b54\u6848\n### \u4e3a\u4ec0\u4e48\u662f\u4e8c\u5206\u7b54\u6848\uff1f\uff1f\uff1f\n\u9898\u76ee:\n\n\u76ee\u524d\u8d5b\u9053\u4fee\u5efa\u7684\u65b9\u6848\u5c1a\u672a\u786e\u5b9a\u3002\u4f60\u7684\u4efb\u52a1\u662f\u8bbe\u8ba1\u4e00\n\u79cd\u8d5b\u9053\u4fee\u5efa\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u4fee\u5efa\u7684 m \u6761\u8d5b\u9053\u4e2d**\u957f\u5ea6\n\u6700\u5c0f\u7684\u8d5b\u9053\u957f\u5ea6\u6700\u5927**\uff08\u5373 m \u6761\u8d5b\u9053\u4e2d\u6700\u77ed\u8d5b\u9053\u7684\n\u957f\u5ea6\u5c3d\u53ef\u80fd\u5927\uff09\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\u51fa\u73b0 \u6700\u5c0f\u7684\u2026\u2026\u6700\u5927 \u6216\u8005 \u6700\u5927\u7684\u2026\u2026\u6700\u5c0f \u65f6\u5c31\u662f\u4e8c\u5206\u7b54\u6848\u3002\n\n### \u5982\u4f55\u4e8c\u5206\u7b54\u6848\uff1f\uff1f\uff1f\n\n\u8fd9\u9053\u9898\u95ee\u7684\u662f\u6700\u5c0f\u7684**\u957f\u5ea6**\u6700\u5927\uff0c \u90a3\u4e00\u5b9a\u662f\n\u4e8c\u5206\u957f\u5ea6\uff0c \u5373\u6211\u4eec\u53ef\u4ee5\u5148\u8bbe\u5f00\u59cb\u65f6\n\n\n```cpp\nl = 0\uff0c r = \u6700\u5927\u503c  mid = (l + r) / 2\n```\n\n\n\u6211\u4eec\u6c42\u51fa\u7684\u6bcf\u4e00\u6761\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8emid\u7684\u8d5b\u9053\u6211\u4eec\u79f0\u4e4b\u4e3a\u5408\u6cd5, \u5982\u679c\u5408\u6cd5\u7684\u8d5b\u9053\u6570\u5927\u4e8em\uff0c \u90a3\u4e48\u8bf4\u660emid <= \u771f\u5b9e\u7b54\u6848\uff0c \u6240\u4ee5\u6211\u4eec\u5c31\u8ba9 l = mid + 1\uff0c\u7ee7\u7eed\u4e8c\u5206\uff0c \u5426\u5219\u5c31\u8ba9 r = mid\u3002\n\n### \u5982\u4f55\u8f6c\u79fb\uff1f\uff1f\uff1f\n\n\u5176\u5b9e\u521a\u5f00\u59cb\u778e\u505a\u7684\u65f6\u5019\u6211\u5e76\u6ca1\u6709\u53d1\u73b0\u8fd9\u662f\u4e2a\u6811\u4e0adp\uff08\u9003\n\n\n![](https://cdn.luogu.com.cn/upload/pic/72990.png )\n\n\u6709\u8fd9\u4e48\u4e00\u4e2a\u56fe\uff0c\u6211\u4eec\u5148\u4ece\u6bcf\u4e2a\u5b50\u6811\u8003\u8651\n\n![](https://cdn.luogu.com.cn/upload/pic/72991.png)\n\n\n\u6211\u4eec\u5047\u8bbe\uff0c 2\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u4ece5\u52302\u518d\u52307\u7684\u8fd9\u6761\u8def\u5f84\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u5408\u6cd5\u8d5b\u9053\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7b54\u6848\u52a01\uff0c \u7136\u540e\u628a\u8fd9\u4e24\u6761\u8fb9\u5220\u53bb\u3002\n\n\u90a3\u4e48\u53ef\u80fd\u4f1a\u5269\u4e0b\u51e0\u6761\u8fb9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c \u5982\u679c\u8981\u75282\u8fd9\u4e2a\u8282\u70b9\u53bb\u6784\u6210\u957f\u5ea6\u5408\u6cd5\u7684\u8d5b\u9053\uff0c \u8981\u4e48\u662f2\u8282\u70b9\u5f00\u59cb\u4ece0\u5f80\u4e0a\u8d70\uff0c\u53bb\u51d1\u51fa\u5408\u6cd5\u957f\u5ea6\uff0c \u8981\u4e48\u662f\u6311\u4e00\u4e2a2\u4e0b\u9762\u7684\u8fb9\uff08\u6211\u4eec\u5148\u5047\u8bbe\u4e3a6\u52302\u8fd9\u6761\u8fb9\uff09\u5f80\u4e0a\u53bb\u51d1\uff0c \u6700\u591a\u53ea\u80fd\u6311\u4e00\u6761\u7684\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u5b9a\u662f\u8981\u6311\u4e00\u6761\u6ca1\u7528\u8fc7\u7684\u6700\u957f\u7684\u8fb9\u3002\n\nn = 50000\uff0c \u6211\u4eec\u53ef\u4ee5\u7528multiset\u7684lower_bound\u6765\u5b9e\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684\u8fb9\u7684\u6709\u5e8f\u548c\u67e5\u627e\u67d0\u6761\u8fb9\u662f\u5426\u53ef\u4ee5\u51d1\u6210\u5408\u6cd5\u7684\u8fb9\u3002\n\n\u8fd9\u53ef\u4ee5\u8fd9\u4e48\u5b9e\u73b0\n\n```cpp\nint dfs(int x, int fa, int mid) {\n    int len = 0;\n    multiset<int> s;\n    for (int i = p[x]; i != -1; i = e[i].nxt) {\n        int v = e[i].v, w = e[i].w, l;\n        if (v == fa) {\n            continue;\n        }\n        l = dfs(v, x, mid) + w;\n        opt[x] += opt[v];\n        if (l >= mid) {\n            opt[x]++;\n        } else {\n            s.insert(l);\n        }\n    }\n    while (!s.empty()) {\n        int now = (*s.begin());\n        s.erase(s.begin());\n        multiset<int>::iterator it = s.lower_bound(mid - now);\n        if (it != s.end()) {\n            s.erase(it);\n            opt[x]++;\n        } else {\n            len = now;\n        }\n    }\n    return len;\n}\n```\n\u81f3\u4e8e\u83ca\u82b1\u56fe\u7684\u8bdd\u53ef\u80fd\u4f1a\u88ab\u5361\uff1f\uff1f\uff1f\u6211\u6ca1\u8bd5\u8fc7\uff0c\u5982\u679c\u62c5\u5fc3\u7684\u8bdd\u53ef\u4ee5\u7279\u5224\u4e00\u4e0b\uff0c\u53ea\u9700\u8981\u4e00\u6b21\u6392\u5e8f\u7136\u540elower_bound\u5c31OK\u4e86\u3002\n\n8.19\u66f4\u65b0\n\n\u6709\u540c\u5b66\u4e0d\u77e5\u9053\u83ca\u82b1\u56fe\u662f\u4ec0\u4e48\n![](https://cdn.luogu.com.cn/upload/pic/73248.png )\n\u5c31\u662f\u4ecb\u4e2a\u4e1c\u897fQWQ\n\n\u83ca\u82b1\u56fe\u901a\u5e38\u4f1a\u88ab\u5361\uff0c\u6240\u4ee5\u9700\u8981\u7279\u5224\u6216\u8005\u5bfb\u627e\u66f4\u9ad8\u6548\u7b97\u6cd5\uff08 \u4e00\u822c\u662f\u7279\u5224\u8fa3\uff0c \u56e0\u4e3a\u83ca\u82b1\u56fe\u4e0a\u7684\u95ee\u9898\u5927\u90e8\u5206\u6bd4\u8f83\u7b80\u5355\u7684 \uff09\n\n~~\u597d\u50cf\u4e5f\u6ca1\u591a\u5c11\u6811\u4e0adp~~\n",
        "postTime": 1566095613,
        "uid": 149105,
        "name": "Indigo_Boy",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "# NOIP2018D1T3\u8d5b\u9053\u4fee\u5efa \u9898\u89e3\n### \u9898\u76ee\u5927\u610f\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P5021)\n\n\u4e00\u68f5\u6811\uff0c\u7ed9\u5b9a\u6bcf\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\uff0c\u8981\u4ece\u5176\u4e2d\u9009\u51fa$m$\u6761\u4e0d\u91cd\u590d\u7684\u94fe\uff0c\u4f7f\u5f97\u94fe\u957f\u7684\u6700\u5c0f\u503c\u6700\u5927\u3002**\uff08\u5982\u679c\u4e0d\u592a\u4e60\u60ef\u201c\u94fe\u201d\uff0c\u53ef\u4ee5\u67e5\u770b\u62ec\u53f7\u4e2d\u7684\u6ce8\u91ca\uff0c\u5426\u5219\u8bf7\u5ffd\u7565\u5927\u90e8\u5206\u62ec\u53f7\uff09**\n\n### \u7b80\u8981\u5206\u6790\n\u901a\u8fc7~~\u67e5\u770b\u9898\u89e3~~\u9898\u76ee\u8981\u6c42\u6700\u5c0f\u503c\u6700\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u8bbe\u9700\u8981\u5224\u5b9a\u7684\u7b54\u6848\u4e3a$ans$\u3002\n\n\u8bb0\u4ee5$i$\u4e3a$LCA$\u7684\u6700\u4f18\u534a\u94fe\u957f\u5ea6\u4e3a$f_{i}$\u3002\uff08\u5373\u5728$i$\u7684\u5b50\u6811\uff08\u5305\u62ec$i$\uff09\u4e2d\u5c3d\u91cf\u5408\u6210\u94fe\u957f\uff08\u8d5b\u9053\u957f\uff09\u4e0d\u5c0f\u4e8e$ans$\u7684\u94fe\uff08\u8d5b\u9053\uff09\u540e\uff0c\u5269\u4f59\u7684\u4ee5$i$\u4e3a\u94fe\uff08\u8d5b\u9053\uff09\u7684\u4e00\u7aef\u6700\u957f\u7684\u94fe\uff08\u8d5b\u9053\uff09\u7684\u957f\u5ea6\uff09\u3002\n\n\u6613\u5f97$f_{i}$\u4ece$i$\u7684\u5b50\u8282\u70b9\u5408\u5e76\u5f97\u6765\u3002\n\n\u8d34\u597d\u6211\u5197\u957f\u7684\u4e3b\u8981\u4ee3\u7801\uff08$deal$\u51fd\u6570\uff08\u7528\u4e8e\u66f4\u65b0\u5bf9\u5e94\u8282\u70b9\u7684$f$\u503c\u5e76\u8003\u8651\u5bf9\u5e94\u8282\u70b9\u7684\u8d21\u732e\uff09\u88ab\u6211\u53bb\u6389\u4e86\uff0c\u76f8\u5e94\u4f4d\u7f6e\u53ea\u6709\u58f0\u660e\u7684\u6ce8\u91ca\uff0c$deal$\u51fd\u6570\u6211\u4f1a\u5728\u4e0b\u9762**\u91cd\u70b9\u8bb2\u89e3**\uff09\uff1a\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define max_n 50000\nusing namespace std;\nstruct node{\n    int v,w,nxt;\n    node(){}\n    node(int _v,int _w,int _nxt):v(_v),w(_w),nxt(_nxt){}\n};\nstruct tree{\n    int head[max_n+1];\n    node edge[max_n<<1];\n    int cnt;\n    void build(){\n        memset(head,-1,sizeof(head)),cnt=-1;\n    }\n    void add(int u,int v,int w){\n        edge[++cnt]=node(v,w,head[u]),head[u]=cnt;\n    }\n};\ntree tr;\nint que[max_n+1];//\u786e\u4fdd\u5148\u904d\u5386\u5b50\u8282\u70b9\uff0c\u7136\u540e\u904d\u5386\u7236\u8282\u70b9\u7684\u904d\u5386\uff08\u7c7b\u4f3c\u4e8e\u540e\u5e8f\u904d\u5386\uff09\nbool vis[max_n+1];//\u5728check\u51fd\u6570\u4e2d\u8bb0\u5f55i\u8282\u70b9\u7684\u503c\u662f\u5426\u5df2\u77e5\uff08\u7528\u4e8e\u5728deal\u51fd\u6570\u4e2d\u5224\u65ad\u662f\u5426\u4e3a\u7236\u8282\u70b9\uff09\nint f[max_n+1];//dp\u6570\u7ec4\uff0c\u8be6\u89c1\u5206\u6790\u90e8\u5206\nint son[max_n+1];//\u5728deal\u51fd\u6570\u4e2d\u8bb0\u5f55\u513f\u5b50\u8282\u70b9\u4e0a\u4f20\u7684f\u503c\nint _count;//\u5728deal\u51fd\u6570\u4e2d\u8bb0\u5f55\u513f\u5b50\u8282\u70b9\u7684\u4e2a\u6570\nint n,m;\n//int deal(int num,int expected,int&cnt);\nbool check(int ans){//\u4e8c\u5206\u7b54\u6848\u7684\u5224\u65ad\u51fd\u6570\n    int i,cnt=0;\n    memset(vis,0,sizeof(vis));\n    //memset(f,0,sizeof(f));\n    for(i = 1; i <= n; i ++){\n        f[que[i]]=deal(que[i],ans,cnt),vis[que[i]]=1;\n        if(cnt>=m)\n        \treturn 1;\n    }\n    return 0;\n}\nint main(){\n    tr.build();\n    int i,j,u,v,l,r,mid,cnt;\n    scanf(\"%d%d\",& n,& m);\n    r=0;\n    for(i = 1; i < n; i ++){\n        scanf(\"%d%d%d\",& u,& v,& l);\n        tr.add(u,v,l);\n        tr.add(v,u,l);\n        r+=l;\n    }\n    //\u5904\u7406\u904d\u5386\u6570\u7ec4\uff08\u632a\u7528vis\u6570\u7ec4\u8bb0\u5f55\u662f\u5426\u8bbf\u95ee\u8fc7\uff09\uff0c\u4e5f\u53ef\u4ee5\u7528dfs\u5b9e\u73b0\uff1a\n    que[n]=1,vis[1]=1;\n    cnt=n;\n    for(i = n; i; i --)\n        for(j = tr.head[que[i]]; ~j; j = tr.edge[j].nxt)\n            if(!vis[tr.edge[j].v])\n                vis[tr.edge[j].v]=1,que[--cnt]=tr.edge[j].v;\n    //\u4e8c\u5206\u7b54\u6848\uff1a\n    l=1;\n    r/=m;\n    ++r;\n    while(l<r-1){\n        mid=(l+r)>>1;\n        if(check(mid))\n            l=mid;\n        else\n            r=mid;\n    }\n    printf(\"%d\\n\",l);\n    return 0;\n}\n```\n## \u72b6\u6001\u8f6c\u79fb\n\u5927\u591a\u6570\u9898\u89e3\u4e2d\u90fd\u662f\u7528\u4e00\u4e2a$multiset$\u6765\u8bb0\u5f55\u4e0a\u9762\u4ee3\u7801\u7684$son$\u6570\u7ec4\u3002\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u5143\u7d20\uff0c\u5982\u679c\u5728$multiset$\u4e2d\u6709\u5143\u7d20\u53ef\u4ee5\u4e0e\u4e4b\u7ec4\u6210\u6ee1\u8db3\u8981\u6c42\u7684\u94fe\uff08\u8d5b\u9053\uff09\uff0c\u5219\u9009\u6700\u5c0f\uff08\u8d2a\u5fc3\u601d\u60f3 ~~\uff0c\u672c\u6587\u6ca1\u6709\u4e25\u683c\u8bc1\u660e\uff0c\u7406\u89e3\u8bf7\u81ea\u884c\u8111\u8865\uff0c\u56fe\u7247\u7559\u5751~~\uff09\u7684\u4e00\u4e2a\u7ec4\u6210\uff0c\u7b54\u6848$+1$\uff0c\u5e76\u628a\u5b83\u4eec\u4ece$multiset$\u4e2d\u5220\u53bb\uff0c\u6700\u540e$f$\u503c\u53d6$multiset$\u4e2d\u5269\u4f59\u7684\u6700\u5927\u7684\u503c\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u73b0\u5728\u8981\u7528\u4e00\u4e2a\u4f18\u79c0\u7684\u8d2a\u5fc3\u5c06\u8fd9\u4e2a\u95ee\u9898\u89e3\u51b3\uff0c\u4ee5\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6 ~~\uff08\u5c3d\u7ba1**\u6211\u7684**\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u53d8\uff09~~ \n### \u8d2a\u5fc3\u2014\u2014\u5168\u6587\u91cd\u70b9\n\u5148\u58f0\u660e\u4e00\u4e0b$deal$ \u51fd\u6570\u7684\u53c2\u6570\uff1a\n\n- $num$\uff1a\u5f53\u524d\u8282\u70b9\u7f16\u53f7\n- $expected$\uff1a\u671f\u671b\u8d5b\u9053\u957f\u5ea6\uff08\u5373\u8981\u5224\u65ad\u7684\u7b54\u6848\uff09\n- $cnt$\uff1a\u5b9a\u4e49\u5728$check$\u51fd\u6570\u91cc\u7684\u5168\u5c40\u8d21\u732e\uff0c\u4f20\u5f15\u7528\u8fdb\u884c\u66f4\u65b0\n\n\u518d\u58f0\u660e\u4e00\u4e0b\u51e0\u4e2a\u4e3b\u8981\u7684\u53d8\u91cf\uff1a\n\n- $l,r$\uff1a\u4e24\u4e2a\u6307\u9488\uff0c\u5177\u4f53\u610f\u4e49\u4e0b\u9762\u89e3\u91ca\n- $ll,rr$\uff1a\u4e24\u4e2a\u7528\u4e8e\u8bb0\u5f55\u7684\u4e34\u65f6\u53d8\u91cf\uff0c\u5177\u4f53\u542b\u4e49\u4e2d\u9014\u53ef\u80fd\u4f1a\u53d8\u5316\uff0c\u4f46\u7ed3\u5408\u4ee3\u7801\u5f88\u597d\u731c\u6d4b\u548c\u7406\u89e3\n- $ret$\uff1a\u8fd4\u56de\u503c\uff0c\u5373\u6700\u540e$f_{num}$\u7684\u503c\n- $cntt$\uff1a\u8ba1\u6570\u5668\uff0c$son$\u6570\u7ec4\u4e2d\u957f\u5ea6\u4e0d\u5c0f\u4e8e$\\frac{expected}{2}$\uff0c\u4f46\u6ca1\u6709\u88ab\u9009\u7684\u6570\u91cf\n\n```cpp\n    int i,l,ll,r,rr,ret,cntt;\n```\n\n\n\u5148\u5c06\u5b50\u8282\u70b9\u7684\u4fe1\u606f\u66f4\u65b0\u5230$son$\u6570\u7ec4\uff0c\u82e5\u80fd\u5355\u72ec\u6210\u94fe\uff08\u8d5b\u9053\uff09\uff0c\u5219\u7b54\u6848$+1$\uff1a\n```cpp\n    _count=0;\n    for(i = tr.head[num]; ~i; i = tr.edge[i].nxt)\n        if(vis[tr.edge[i].v])\n        \tif((f[tr.edge[i].v]+tr.edge[i].w)>=expected)\n        \t\tcnt++;\n        \telse\n            \tson[++_count]=f[tr.edge[i].v]+tr.edge[i].w;\n    stable_sort(son+1,son+_count+1);//\u5982\u679c\u6362\u6210\u6876\u6392\u5373\u53ef\u63d0\u5347\u65f6\u95f4\u590d\u6742\u5ea6\n```\n\u63a5\u7740\u5bfb\u627e$r\\le\\frac{expected}{2}\\text{\uff0c\u4f46}l\\ge\\frac{expected}{2}$\uff0c\u7528$l$\u548c$r$\u7ec4\u6210\u94fe\uff08\u8d5b\u9053\uff09\u5f97\u5230\u7684\u6700\u5927\u8d21\u732e\uff08\u6b64\u65f6$ret$\u53ea\u8bb0\u5f55\u5927\u4e8e$\\frac{expected}{2}$\u7684\u503c\uff0c$ll$\u4e3a\u6b63\u597d\u5927\u4e8e$\\frac{expected}{2}$\u7684\u6700\u5c0f\u503c\uff09\n\n\uff08\u672c\u53e5\u8bbe$k<r$\uff09\u56e0\u4e3a$r$\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u5982\u679c$son_{r}$\u4e0d\u80fd\u5339\u914d\uff0c$son_{k}$\u4e5f\u65e0\u6cd5\u5339\u914d\uff1b\u4f46\u82e5$son_{k}$\u80fd\u5339\u914d\uff0c$son_{r}$\u4e00\u5b9a\u80fd\u5339\u914d\u3002\u7efc\u4e0a\u6240\u8ff0\uff0c\u5c3d\u91cf\u7528$son_{r}$\u5339\u914d\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n    ll=l=lower_bound(son+1,son+_count+1,(expected+1)>>1)-son;\n    if(l>_count)\n    \treturn son[_count];\n    r=l-1;\n    ret=0;\n    cntt=0;\n    while(r&&l<=_count){\n    \tif(son[l]+son[r]<expected){\n    \t\tret=son[l];\n    \t\tl++;\n    \t\tcntt++;\n    \t\tcontinue;\n        }\n        cnt++;\n        l++;\n        r--;\n    }\n```\n\u5904\u7406\u672a\u5339\u914d\u7684\u4f46$\\ge \\frac{expected}{2}$\u7684\u503c\uff0c\u4e24\u4e24\u5339\u914d\uff1a\n```cpp\n    if(l<=_count){\n        cntt+=(_count-l+1);\n        if(cntt&1)\n            ret=son[_count];\n    }\n    cnt+=cntt>>1;\n```\n\u5982\u679c$\\ge \\frac{expected}{2}$\u7684\u5168\u90e8\u5339\u914d\u5b8c\u4e86\uff0cret\u53ea\u80fd\u4ece$<\\frac{expected}{2}$\u7684\u503c\u4e2d\u8ba1\u7b97\u3002\n\n\u56e0\u4e3a\u5df2\u7ecf\u8ba1\u7b97\u51fa$\\ge \\frac{expected}{2}$\u7684\u53ea\u80fd\u6709$\\frac{cntt}{2}$\u4e2a\u4e0d\u548c$<\\frac{expected}{2}$\u7684\u5339\u914d\uff0c\u6240\u4ee5$l$\u5c3d\u91cf\u7528\u5927\u7684\u5339\u914d\uff0c$r$\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5c0f\u7684\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n    if(!(cntt&1)){\n        r=1,l=_count;\n        rr=ll-1;\n        ll+=cntt>>1;\n        while(l>=ll){\n            if(son[l]+son[r]<expected){\n                ret=son[r];\n                r++;\n                continue;\n            }\n            l--,r++;\n        }\n        if(r<=rr)\n        \tret=son[rr];\n    }\n```\n\n[\u5b8c\u6574\u4ee3\u7801](https://www.luogu.org/recordnew/show/19602377)\n\n\u5982\u679c\u80fd\u7ed9\u51fa\u8d2a\u5fc3\u7684\u53cd\u4f8b\u6216\u8005\u4e25\u683c\u8bc1\u660e\uff0c\u8bf7\u8054\u7cfb\u7b14\u8005\u3002",
        "postTime": 1559563017,
        "uid": 35347,
        "name": "wangzhifang",
        "ccfLevel": 0,
        "title": "P5021\u3010NOIP2018D1T3\u3011\u8d5b\u9053\u4fee\u5efa \u9898\u89e3"
    },
    {
        "content": "NOIP4\u4e2a\u6708\u540e\u91cd\u65b0\u56de\u987e\u8fd9\u9053\u9898\uff0c\u7ec8\u4e8e\u89e3\u51b3\u4e86\n\n\u8003\u573a\u4e0a\u7684\u6211\uff1a5minA\u4e86T1\uff0c\u7136\u540e45min\u5199\u4e86T2\u80fd\u88ab\u5361\u7684\u505a\u6cd5\uff0c\u5269\u4e0b150min\u5c31\u5f00\u59cb\u5168\u529b\u809dT3\uff08\u7ed3\u679c\u53ea\u5f97\u4e8675\u5206\uff09\n\n\u5148\u770b\u770b\u90e8\u5206\u5206\n\n### 1.\u53ea\u6709\u4e00\u6761\u8d5b\u9053\n\n\u5f88\u7b80\u5355\uff0cdfs\u6c42\u76f4\u5f84\u5c31\u53ef\u4ee5\u4e86\n\n20\u5206\n\n### 2.\u4e00\u6761\u94fe\n\n\u6709\u9053\u9898\u548c\u8fd9\u79cd\u60c5\u51b5\u6bd4\u8f83\u76f8\u4f3c\uff1a\u8df3\u77f3\u5934\n\n\u4e8c\u5206\u6700\u77ed\u8d5b\u9053\u7684\u957f\u5ea6\uff0c\u7136\u540e\u8d2a\u5fc3\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\n\n\u5224\u65ad\u65f6\uff0c\u8bb0\u5f55\u5f53\u524d\u53ef\u7528\u90e8\u5206\u957f\u5ea6\n\n\u6bcf\u6b21\u52a0\u4e0a\u4e0b\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\n\n\u5982\u679c\u957f\u5ea6\u591f\u4e86\uff0c\u5c31\u628a\u7b54\u6848\u52a01\uff0c\u53ef\u7528\u90e8\u5206\u6e05\u96f6\n\n**\u5343\u4e07\u4e0d\u8981\u5199\u8fd9\u79cd\u4ee3\u7801\uff1a**\n\n```cpp\nfor(int i=1;i<n;i++)\n    len[i]=list[i][2];\n```\n\n**\u5e94\u8be5\u8fd9\u6837\uff1a**\n```cpp\nfor(int i=1;i<n;i++)\n    len[list[i][0]]=list[i][2];\n```\n\n\u5426\u5219\u4f60\u5c31\u53ef\u4ee5\u5f00\u5fc3\u5730\u770b\u7740\u8fd9\u4e9b\u90e8\u5206\u5206\u53d8\u6210WA\u4e86\uff08\u5c31\u662f\u6211\u8003\u573a\u4e0asb\u7684\u5199\u6cd5\\kel\uff0c\u767d\u767d\u4e22\u4e8620\u5206\uff09\n\n\u73b0\u5728\u5c31\u670940\u5206\u4e86\n\n### 3.\u83ca\u82b1\u56fe\n\n\u9010\u4e2a\u914d\u5bf9\n\n\u5982\u679c$m\\leq 2n$\n\n\u4e5f\u5c31\u662f\u53ef\u914d\u5bf9\u6570\u91cf\u6bd4\u9700\u8981\u4fee\u5efa\u7684\u6570\u91cf\u8fd8\u591a\n\n\u5c31\u76f4\u63a5\u914d\u5bf9\n\n\u628a$n-i$\u4e0e$n-2m+i$\u914d\u5bf9\n\n\u7136\u540e\u53d6\u6700\u5c0f\u503c\n\n\u53ef\u4ee5\u4ea4\u6362\u8bba\u8bc1\u5f97\u5230\u8fd9\u6837\u662f\u6700\u4f18\u89e3\n\n\u5982\u679c$m>2n$\n\n\u5219\u6709\u4e00\u90e8\u5206\u9700\u8981\u5355\u72ec\u4fee\u5efa\n\n\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e00\u5806\u957f\u5ea6\u4e3a0\u7684\u8fb9\uff0c\u7136\u540e\u914d\u5bf9\n\n\u6211\u7684\u505a\u6cd5\uff1a\n\n\u5c06\u524d$2n-2m$\u4e2a\u4e24\u4e24\u914d\u5bf9\uff0c\u548c\u4e0a\u9762\u4e00\u6837\n\n\u540e\u9762\uff08\u4ece$2n-2m+1$\u5230$n$\uff09\u5355\u4e2a\u4fee\u5efa\n\n\u8fd9\u6837\u4e00\u5171$\\frac{2n-2m}{2}+(n-(2n-2m+1)+1)=m$\u6761\u8d5b\u9053\n\n\u53d6\u6700\u5c0f\u503c\u5373\u53ef\n\n\u73b0\u572855\u5206\u4e86\n\n### 4.\u4e8c\u53c9\u6811\n\n\u8003\u573a\u4e0a\u60f3\u8fc7\uff0c\u4f46\u6ca1\u60f3\u51fa\u6765\n\n### 5.\u6b63\u89e3\n\n\u6839\u636e2\u548c3\u53ef\u4ee5\u542f\u53d1\u6211\u4eec\u8003\u8651\u8fd9\u6837\u7684\u7b97\u6cd5\uff1a\n\n\u4e8c\u5206\u7b54\u6848+\u8d2a\u5fc3\n\n\u7136\u800c\u76f4\u63a5\u8d2a\u5fc3\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\n\n\u663e\u7136\uff0c\u5982\u679c\u6709\u4e00\u6761\u94fe\u5df2\u7ecf\u6ee1\u8db3\u7b54\u6848\u4e86\uff0c\u90a3\u4e48\u76f4\u63a5\u628a\u5b83\u53d6\u8d70\u5c31\u53ef\u4ee5\uff0c\u4e0d\u4f1a\u6709\u66f4\u4f18\u7684\u65b9\u6848\uff0c\u8fd9\u70b9\u6ca1\u95ee\u9898\n\n\u8003\u8651\u8fd9\u6837\u7684\u8d2a\u5fc3\uff1a\n\n\u5bf9\u4e8e\u5269\u4f59\u90e8\u5206\uff0c\u4ece\u6700\u5927\u7684\u5f00\u59cb\uff0c\u5c1d\u8bd5\u548c\u5c3d\u91cf\u5c0f\u7684\u914d\u5bf9\n\n\u8fd9\u6837\u80fd\u4fdd\u8bc1\u53d6\u6700\u591a\u6761\u8d5b\u9053\n\n\u8fd9\u79cd\u7b97\u6cd5\u80fd\u8fc7\u7b2c\u4e8c\u4e2a\u5c0f\u6837\u4f8b\n\n\u4f46\u662f\u8fd9\u6837\u5f97\u5230\u7684\u65b9\u6848\u4e0d\u4e00\u5b9a\u6ee1\u8db3\u5f53\u524d\u8282\u70b9\u4fdd\u7559\u5c3d\u91cf\u957f\u7684\u94fe\n\n\u4e8e\u662f\u5c31\u8fc7\u4e0d\u4e86\u5927\u6837\u4f8b\u4e86\n\n\u5c1d\u8bd5\u8fdb\u884c\u4fee\u6539\uff1a\n\n\u5982\u679c\u4fdd\u7559\u6700\u5927\u7684\u94fe\u4ecd\u7136\u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7684\u7b54\u6848\uff0c\u5c31\u4fdd\u7559\u6700\u5927\u7684\u94fe\n\n\u53ea\u8981\u5904\u7406\u4e24\u6b21\u5c31\u53ef\u4ee5\u4e86\n\n\u4e8e\u662f\u5c31\u8fc7\u4e86\u5927\u6837\u4f8b\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u8fd8\u662f\u5b58\u5728\u95ee\u9898\n\n\u5bf9\u4e8e\u4ee5\u4e0b\u4e00\u5217\u6570\uff0c\u5f53\u7b54\u6848\u4e3a16\u65f6\n\n```\n1 3 13 14 15\n```\n\u76f4\u63a5\u914d\u5bf9\u80fd\u4fdd\u755913\uff0c\u800c\u4fdd\u755915\u5c31\u4e0d\u80fd\u5f97\u5230\u6700\u5927\u914d\u5bf9\n\n\u4f46\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u4fdd\u755914\uff0c\u53ef\u4ee51-15,3-13\n\n\u7136\u540e\u8fd9\u6837\u5c31\u4f1aWA\u4e24\u4e2a\u70b9\uff1a#1 #18\n\n[\u8bb0\u5f55](https://www.luogu.org/recordnew/show/16952497)\n\n\u6362\u4e00\u4e2a\u8d2a\u5fc3\uff1f\n\n\u5982\u679c\u4ece\u4e2d\u95f4\u5f00\u59cb\u914d\u5bf9\uff1f\n\n\u7136\u540e\u6211\u5c31\u9677\u5728\u8fd9\u91cc\u4e86\n\n\u4e0d\u4f46\u7ec6\u8282\u5f88\u591a\uff0c\u800c\u4e14\u8fd9\u6837\u8fd8\u662f\u9519\u7684\n\n[\u8bb0\u5f55](https://www.luogu.org/recordnew/show/16955177)\n\n\u6240\u4ee5\u600e\u4e48\u529e\uff1f\n\n\u66b4\u529b\u679a\u4e3e\u4fdd\u7559\u54ea\u4e00\u6761\uff1f\n\n~~\u7a81\u7136\uff0c\u4e00\u9053\u7075\u5149\u95ea\u8fc7\uff1a~~ \u4e8c\u5206\u4f4d\u7f6e\n\n\u770b\u770b\u53ef\u884c\u6027\uff1a\n\n\u5982\u679c\u4fdd\u7559\u8f83\u957f\u7684\u8fb9\u53ef\u4ee5\u5b9e\u73b0\u6700\u5927\u914d\u5bf9\uff0c\u90a3\u4e48\u4fdd\u7559\u8f83\u77ed\u8fb9\u4e5f\u53ef\u4ee5\n\n\u628a\u8fd9\u4e24\u6761\u8fb9\u5728\u4fdd\u7559\u8f83\u957f\u8fb9\u7684\u65b9\u6848\u4e2d\u4ea4\u6362\u4f4d\u7f6e\uff0c\u5219\u53d7\u5f71\u54cd\u7684\u90a3\u4e00\u5bf9\u53ea\u4f1a\u53d8\u957f\uff0c\u6545\u53ef\u884c\n\n\u53cd\u4e4b\uff0c\u5982\u679c\u4fdd\u7559\u8f83\u77ed\u7684\u8fb9\u4e0d\u53ef\u4ee5\u5b9e\u73b0\u6700\u5927\u914d\u5bf9\uff0c\u90a3\u4e48\u4fdd\u7559\u8f83\u957f\u8fb9\u4e5f\u4e0d\u53ef\u4ee5\n\n\u53ef\u4ee5\u76f4\u63a5\u7531\u9006\u5426\u547d\u9898\u5f97\u8bc1\uff08\u96fe\n\n\u6216\u8005\uff0c\u8003\u8651\u7531\u539f\u547d\u9898\u63a8\uff0c\u7528\u53cd\u8bc1\u6cd5\n\n\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4fdd\u7559\u8f83\u957f\u8fb9\u7684\u65b9\u6848\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4fdd\u7559\u8f83\u77ed\u8fb9\u65b9\u6848\uff0c\u4e0e\u9898\u8bbe\u77db\u76fe\n\n\u6240\u4ee5\u53ea\u8981\u4e8c\u5206\u4fdd\u7559\u7684\u8fb9\u6240\u5728\u4f4d\u7f6e\uff0c\u7136\u540e\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\n\n\u5224\u65ad\u7684\u65f6\u5019\uff0c\u5982\u679c\u9047\u5230\u4fdd\u7559\u7684\u8fb9\uff0c\u5c31\u8df3\u8fc7\uff0c\u5176\u5b83\u548c\u7eaf\u8d2a\u5fc3\u7c7b\u4f3c\n\n\u56e0\u800c\uff0c\u6b63\u89e3\u5c31\u662f\u4e8c\u5206\u5957\u4e8c\u5206\u518d\u5957\u8d2a\u5fc3\uff08\u96fe\n\n\u590d\u6742\u5ea6\u4e0a\u754c\uff1a$O(n log^2 n)$\n\n\u81ea\u5df1\u8bc1\u5427\n\n\u4ee3\u7801\n\n\u5305\u62ec\u4e0a\u9762\u63d0\u5230\u7684\u6570\u636e\u5206\u6cbb\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define next var001\nusing namespace std;\nbool tp1,tp2,tp3;\nconst int N=500007;\nconst bool DEBUG=false;\nint head[N],next[N*2],ver[N*2],tot;long long edge[N*2];\nvoid add(int a,int b,long long w){\n    tot++;\n    edge[tot]=w;\n    ver[tot]=b;\n    next[tot]=head[a];\n    head[a]=tot;\n    tot++;\n    edge[tot]=w;\n    ver[tot]=a;\n    next[tot]=head[b];\n    head[b]=tot;\n}\nint n,m;\nint list[N][3];\nnamespace s1{\n    long long len[N];\n    long long ans;\n    long long sum;\n    long long nowcnt,nowdis;\n    long long solve(){\n        for(int i=1;i<n;i++){\n            len[list[i][0]]=list[i][2];\n            sum+=len[list[i][0]];\n        }\n        long long l=0,r=sum,mid;\n        while(l!=r){\n            mid=((l+r)>>1);\n            nowcnt=nowdis=0;\n            for(int i=1;i<n;i++){\n                nowdis+=len[i];\n                if(nowdis>=mid){\n                    nowcnt++;\n                    nowdis=0;\n                }\n            }\n            if(nowcnt>=m){\n                l=mid+1;\n            }else{\n                r=mid;\n            }\n        }\n        return l-1;\n    }\n}\nnamespace s2{\n    int vis[N];\n    int p1,p2;\n    long long ans1,ans2;\n    void dfs1(int id,long long dis){\n        if(dis>ans1){\n            ans1=dis;\n            p1=id;\n        }\n        vis[id]=1;\n        for(int i=head[id];i;i=next[i]){\n            if(vis[ver[i]]==1)continue;\n            dfs1(ver[i],dis+edge[i]);\n        }\n    }\n    void dfs2(int id,long long dis){\n        if(dis>ans2){\n            ans2=dis;\n            p2=id;\n        }\n        vis[id]=2;\n        for(int i=head[id];i;i=next[i]){\n            if(vis[ver[i]]==2)continue;\n            dfs2(ver[i],dis+edge[i]);\n        }\n    }\n    long long solve(){\n        dfs1(1,0);\n        dfs2(p1,0);\n        return ans2;\n    }\n}\nnamespace s3{\n    long long len[N];\n    long long ans;\n    int i,j;\n    long long solve(){\n        for(i=1;i<n;i++){\n            len[i]=list[i][2];\n        }\n        sort(len+1,len+n);\n        if((m<<1)>n-1){\n            ans=len[n*2-m*2-1];\n            i=1;\n            j=n*2-m*2-2;\n            for(;i<j;i++,j--){\n                ans=min(ans,len[i]+len[j]);\n            }\n        }else{\n            i=n-m*2;j=n-1;\n            ans=len[i]+len[j];\n            for(;i<j;i++,j--){\n                ans=min(ans,len[i]+len[j]);\n            }\n        }\n        return ans;\n    }\n}\nnamespace s4{\n    int pa[N];\n    int cnt[N];\n    int order[N],cntp;\n    bool vis[N];\n    void dfs(int id){\n        vis[id]=true;\n        for(int i=head[id];i;i=next[i]){\n            if(vis[ver[i]])continue;\n            pa[ver[i]]=id;\n            dfs(ver[i]);\n        }\n        order[cntp++]=id;\n    }\n    long long len[N];\n    long long _tmpl[N],top;\n    void refresh(int id,long long ans){\n    \tlong long *tmpl=_tmpl+1;\n        cnt[id]=0;\n        len[id]=0;\n        top=0;\n        for(int i=head[id];i;i=next[i]){\n            if(ver[i]==pa[id])continue;\n            cnt[id]+=cnt[ver[i]];\n            tmpl[top++]=edge[i]+len[ver[i]];\n        }\n        sort(tmpl,tmpl+top);\n        \n        int i,j;\n        for(i=top-1;i>=0;i--){\n            if(tmpl[i]<ans)break;\n            cnt[id]++;\n        }\n        if(i==0){\n            len[id]=max(tmpl[i],len[id]);\n            return;\n        }\n        if(i==-1){\n        \tlen[id]=0;\n        \treturn;\n        }\n        int baci=i;\n        j=0;\n        int maxans=0,nowans;\n        while(i>j){\n        \tif(tmpl[i]+tmpl[j]>=ans){\n        \t\tmaxans++;\n        \t\ti--;j++;\n        \t}else{\n        \t\tj++;\n        \t}\n        }\n        int l=-1,r=baci+1,mid;\n        while(l!=r){\n        \tmid=((l+r)>>1);\n        \tnowans=0;\n        \ti=baci;j=0;\n        \twhile(i>j){\n        \t\tif(i==mid){i--;continue;}\n        \t\tif(j==mid){j++;continue;}\n            \tif(tmpl[i]+tmpl[j]>=ans){\n            \t\tnowans++;\n            \t\ti--;j++;\n            \t}else{\n            \t\tj++;\n            \t}\n            }\n            if(nowans==maxans)l=mid+1;\n            else r=mid;\n        }\n        len[id]=tmpl[l-1];\n        cnt[id]+=maxans;\n    }\n    long long sum;\n    long long solve(){\n        dfs(1);\n        for(int i=1;i<n;i++){\n            sum+=list[i][2];\n        }\n        long long l=-1,r=sum+1,mid;\n        while(l!=r){\n            mid=((l+r)>>1);\n            memset(len,0,sizeof(len));\n            memset(cnt,0,sizeof(cnt));\n            for(int i=0;i<cntp;i++){\n                refresh(order[i],mid);\n            }\n            if(cnt[1]>=m){\n                l=mid+1;\n            }else{\n                r=mid;\n            }\n        }\n        return l-1;\n    }\n}\nint main(){\n    ios::sync_with_stdio(false);\n    tp1=tp2=tp3=true;\n    cin>>n>>m;\n    if(m!=1)tp2=false;\n    for(int i=1;i<n;i++){\n        cin>>list[i][0]>>list[i][1]>>list[i][2];\n        add(list[i][0],list[i][1],list[i][2]);\n        if(list[i][0]!=1)tp3=false;//juhua\n        if(list[i][1]!=list[i][0]+1)tp1=false;//lian\n    }\n        if(tp1){\n            cout<<s1::solve()<<endl;\n        }else if(tp2){\n            cout<<s2::solve()<<endl;\n        }else if(tp3){\n            cout<<s3::solve()<<endl;\n        }else{\n            cout<<s4::solve()<<endl;\n        }\n}\n```",
        "postTime": 1551960983,
        "uid": 86649,
        "name": "Hope2075",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u5e7f\u544a\uff1a\u98df\u7528[$blog$](https://www.cnblogs.com/heyujun/p/9979208.html)\u4f53\u9a8c\u66f4\u4f73\n\n$NOIp$\u4e4b\u524d\u505a\u8fc7\u589e\u5f3a\u7248\u8fd8\u6ca1\u505a\u51fa\u6765$QAQ$\n\n\u4e00\u770b\u5230\u9898\u76ee\u4e2d\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u7b54\u6848\n\n\u91cd\u70b9\u662f\u8003\u8651\u5982\u4f55$check$\n\n\u8bbe$dp[x]$\u8868\u793a\u5728$x$\u7684\u5b50\u6811\u4e2d\u672a\u88ab\u9009\u8fc7\u7684\u6743\u503c\u6700\u5927\u7684\u8def\u5f84\u6743\u503c\u4e3a\u591a\u5c11\n\n\u5bf9\u4e8e\u5176\u5b50\u8282\u70b9$v$\uff0c\u5b83\u6ee1\u8db3$f[v] + cost[u][v] >= mid$\u5c31\u53ef\u4ee5\u9009\u62e9\n\n\u5426\u5219\u518d\u9009\u4e00\u6761\u8def\u5f84\u548c\u5b83\u62fc\u5728\u4e00\u8d77\u5373\u53ef\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u5f00\u4e2a$multiset$\u53ef\u4ee5\u8f83\u7b80\u5355\u5730\u505a\n\n\u590d\u6742\u5ea6$O(nlog_n^2)$(\u5e38\u6570\u6709\u70b9\u5927)\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <set> \nusing namespace std;\n\ninline int gi() {\n    register int data = 0, w = 1;\n    register char ch = 0;\n    while (ch != '-' && (ch > '9' || ch < '0')) ch = getchar();\n    if (ch == '-') w = -1 , ch = getchar();\n    while (ch >= '0' && ch <= '9') data = data * 10 + (ch ^ 48), ch = getchar();\n    return w * data;\n} \n#define MAX_N 50005 \nstruct Graph { int to, cost, next; } e[MAX_N << 1]; int fir[MAX_N], e_cnt = 0; \nvoid clearGraph() { memset(fir, -1, sizeof(fir)); e_cnt = 0; } \nvoid Add_Edge(int u, int v, int w) { e[e_cnt] = (Graph){v, w, fir[u]}; fir[u] = e_cnt++; } \nint N, M, dp[MAX_N], stk[MAX_N], top; \nmultiset<int> s; \nmultiset<int> :: iterator ite; \nint mid, cnt; \nvoid dfs(int x, int f) { \n    for (int i = fir[x]; ~i; i = e[i].next) \n        if (e[i].to != f) dfs(e[i].to, x); \n    top = 0; \n\tfor (int i = fir[x]; ~i; i = e[i].next) { \n\t    int v = e[i].to; \n\t    if (v == f) continue; \n\t    dp[v] += e[i].cost; \n\t    if (dp[v] >= mid) ++cnt; else stk[++top] = dp[v]; \n    } \n    sort(&stk[1], &stk[top + 1]); s.clear(); \n    for (int i = 1; i <= top; i++) { \n        ite = s.lower_bound(mid - stk[i]); \n        if (ite != s.end()) s.erase(ite), ++cnt; \n        else s.insert(stk[i]); \n    } \n    dp[x] = s.size() ? *s.rbegin() : 0; \n} \nint main () { \n    clearGraph(); \n    N = gi(), M = gi(); \n    int l = 0, r = 0; \n    for (int i = 1; i < N; i++) { \n        int u = gi(), v = gi(), w = gi(); r += w; \n        Add_Edge(u, v, w), Add_Edge(v, u, w); \n    } \n    int ans = (r = r / M); \n    while (l <= r) { \n        mid = (l + r) >> 1, cnt = 0; \n        dfs(1, 0); \n        if (cnt >= M) ans = mid, l = mid + 1; \n        else r = mid - 1; \n    } \n    printf(\"%d\\n\", ans); \n    return 0; \n} \n```",
        "postTime": 1550388313,
        "uid": 42506,
        "name": "\u4f55\u4fde\u5747",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u6b64\u9898\u9898\u76ee\u6709\u5f88\u660e\u663e\u7684\u63d0\u793a\uff0c\u5c31\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8d2a\u5fc3\u4e86\n\n\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u8bbe\u4e00\u4e2a\u6570\u7ec4dep[i]\u8868\u793ai\u4ece\u4e0b\u9762\u63a5\u4e0a\u7684\u8d5b\u9053\u662f\u591a\u5c11\u3002\u9996\u5148\uff0c\u518d\u8282\u70b9\u4e0a\u5bf9\u63a5\u597d\u7684\u8d5b\u9053\u80af\u5b9a\u8d8a\u591a\u8d8a\u597d\uff0c\u7559\u7740\u5728\u4e0a\u9762\u518d\u63a5\u80af\u5b9a\u4e0d\u597d\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bf9\u7b54\u6848\u8d21\u732e\u90fd\u4e3a\u4e00\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u8981\u5728\u5bf9\u63a5\u8d5b\u9053\u6700\u591a\u7684\u57fa\u7840\u4e0a\uff0cdep[i]\u8d8a\u5927\u8d8a\u597d\uff0c\u4f46\u7531\u4e8e\u6211\u6ca1\u6709\u60f3\u5230\u4ec0\u4e48\u4f18\u79c0\u7684\u8d2a\u5fc3\u7b97\u6cd5\u8ba9dep[i]\u6700\u5927\uff0c\u6211\u4eec\u5427\u5b50\u8282\u70b9\u7684dep[i]\u6392\u5e8f\uff0c\u7ee7\u7eed\u4e8c\u5206\uff0c\u628a\u4e8c\u5206\u7684\u8282\u70b9\u53bb\u6389\uff0c\u770b\u5bf9\u63a5\u7684\u8d5b\u9053\u7684\u8d5b\u9053\u6570\u662f\u5426\u51cf\u5c11\u4e86\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u505a\u5230\u4e86\u8ba9dep[i]\u6700\u5927\n\n\u81f3\u4e8e\u5bf9\u63a5\uff0c\u6211\u4eec\u628adep[i]\u4ece\u5927\u5230\u5c0f\u626b\u63cf\uff0c\u5c1d\u8bd5\u4e3a\u5c3d\u53ef\u80fd\u5927\u7684\u51e0\u4e2adep[i]\u627e\u5bf9\u63a5\uff0c\u53e6\u4e00\u4e2a\u6307\u9488\u4ecedep[i]\u6700\u5c0f\u7684\u5730\u65b9\u5f00\u59cb\u626b\uff0c\u5982\u679c\u80fd\u5bf9\u63a5\u5c31\u5bf9\u63a5\uff0c\u5426\u5219++\u627e\u4e0b\u4e00\u4e2a\uff0c\u76f4\u5230\u4e24\u6307\u9488\u91cd\u5408\n\n\u65f6\u95f4\u8d1f\u8d23\u5ea6O(nlog^2n)\n\n\u4ee3\u7801\uff1a\n```\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<algorithm>\n#include<iostream>\nusing namespace std;\nint n,i,j,m,head[100005],Next[200005],adj[200005],leng[200005],u,v,w,k,dep[100005],ans,l,r,mid,a[100005],vis[100005];\nvoid Push(int u,int v,int w)\n{\n    Next[++k]=head[u];\n    head[u]=k;\n    adj[k]=v;\n    leng[k]=w;\n}\nvoid dfs(int i,int fa,int m)\n{\n    int j,r,s=0,l,t,u;\n    for(j=head[i];j!=0;j=Next[j])\n        if(adj[j]!=fa)\n            dfs(adj[j],i,m);\n    k=0;\n    for(j=head[i];j!=0;j=Next[j])\n        if(adj[j]!=fa)\n        {\n            if(dep[adj[j]]+leng[j]>=m)\n                ans++;\n            else\n                a[++k]=dep[adj[j]]+leng[j];\n        }\n    sort(a+1,a+1+k);\n    for(j=1;j<=k;j++)\n        vis[j]=0;\n    t=1;\n    for(j=k;j>=1;j--)\n    {\n        while(a[t]+a[j]<m&&t<j)\n            t++;\n        if(t>=j)\n            break;\n        s++;\n        t++;\n    }\n    u=s;\n    ans+=s;\n    l=1;\n    r=k+1;\n    while(l<r)\n    {\n        int mid=(l+r)/2;\n        s=0;\n        t=1;\n        for(j=k;j>=1;j--)\n        {\n            if(j==mid)\n                continue;\n            while((a[t]+a[j]<m||t==mid)&&t<j)\n                t++;\n            if(t>=j)\n                break;\t\n            t++;\n            s++;\n        }\n        if(s==u)\n            l=mid+1;\n        else\n            r=mid;\n    }\n    dep[i]=a[l-1];\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(i=1;i<n;i++)\n    {\n        scanf(\"%d %d %d\",&u,&v,&w);\n        r+=w;\n        Push(u,v,w);\n        Push(v,u,w);\n    }\n    r++;\n    while(l<r)\n    {\n        mid=(l+r)/2;\n        ans=0;\n        dfs(1,0,mid);\n        if(ans>=m)\n            l=mid+1;\n        else\n            r=mid;\n    }\n    printf(\"%d\",l-1);\n}\n```",
        "postTime": 1542983595,
        "uid": 26800,
        "name": "Sshenyyyu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u9898\u610f:\n\n- \u7ed9\u4f60\u4e00\u73c2\u6811\u3002\n- \u8ba9\u4f60\u627e\u51fa\u4e00\u4e9b\u8def\u5f84\u4f7f\u5f97\u6700\u5c0f\u7684\u8def\u5f84\u957f\u5ea6\u7684\u6700\u5927\u3002\n- \u8def\u5f84\u8981\u6c42\u8fb9\u4e0d\u76f8\u4ea4,\u70b9\u53ef\u4ee5\u76f8\u4ea4\u3002\n\n#### $80$ \u5206\u524d\u7f6e\u505a\u6cd5\n\n\u9996\u5148\u8003\u8651\u4e8c\u5206\u3002\u5047\u8bbe\u4e8c\u5206\u7684\u503c\u662f $goal$\u3002\n\n```pascal\nleft:=0; root:=1;\n    while left<=right do\n    begin\n        fillchar(val,sizeof(val),0); // val \u6570\u7ec4\u4ee3\u8868\u6bcf\u4e00\u4e2a\u70b9\u80fd\u7ed9\u7236\u4eb2\u7684\u6700\u4f18\u8d21\u732e\n        mid:=(left+right) >> 1;\n        tmp:=Check(mid,root,root);\n        if tmp>=m then begin left:=mid+1; ans:=mid end else right:=mid-1;\n    end;\nwriteln(ans);\n```\n\n\u6211\u4eec\u8003\u8651\u5230,\u4e00\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u53ef\u80fd\u4f1a\u7ed9\u81ea\u5df1\u5e26\u6765\u4e00\u4e9b\u8def\u5f84,\u628a\u8fd9\u4e9b\u8def\u5f84\u5b58\u8d77\u6765,\u8bbe\u4e3a $rope$ \u6570\u7ec4\u3002\n\n\u5728 $rope$ \u4e2d,\u5982\u679c\u6709\u4e00\u6761\u8def\u5f84 $\\ge goal$ \u7684\u8bdd\u53ef\u4ee5\u81ea\u5df1\u5339\u914d,$ans++$\u3002\u5982\u679c\u4e0d\u80fd\u81ea\u5df1\u5339\u914d,\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u5b83\u8ddf\u522b\u4eba\u5339\u914d,\u5982\u679c\u53ef\u4ee5\u90a3\u4e48 $ans++$\u3002\u56e0\u4e3a\u65f6\u95f4\u7684\u9650\u5236,\u4e0a\u9762\u7684\u64cd\u4f5c\u65f6\u53ef\u4ee5\u5148\u6392\u4e00\u4e2a\u5e8f\u7136\u540e\u64cd\u4f5c\u7684\u3002\n\n![](https://i.loli.net/2018/11/23/5bf7935ae44b8.png)\n\n($11$ \u76f4\u63a5\u9009,\u800c $9$ \u548c $1$ \u52a0\u8d77\u6765\u4e5f\u53ef\u4ee5 $\\ge goal$)\n\n- \u95ee\u9898 $1$ \u4e3a\u4ec0\u4e48\u8981\u4e24\u4e24\u5339\u914d?\n\n\u4e00\u4e2a\u6811\u4e0a\u8def\u5f84\u5c31\u662f\u4e00\u6761\u7ebf,\u800c\u4e00\u6761\u7ebf\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u53ea\u80fd\u8fde\u51fa\u53e6\u4e00\u6761\u8fb9,\u4e0d\u80fd\u8fde\u591a\u6761\u8fb9\u3002\n\n![](https://i.loli.net/2018/11/23/5bf793f91437b.png)\n\n- \u95ee\u9898 $2$ \u4e3a\u4ec0\u4e48 $\\ge goal$ \u53ef\u4ee5\u76f4\u63a5\u9009?\n\n\u5b83\u8ddf\u522b\u4eba\u518d\u6b21\u5339\u914d\u5c31\u662f\u846c\u9001\u4e86\u522b\u4eba,\u6240\u4ee5\u6700\u597d\u81ea\u4e2a\u5339\u914d\u6389\u3002\n\n\n```pascal\nfunction Check(mid,x,fa:longint):longint;\nvar i,l:longint;\nbegin\n    i:=cnt[x]; Check:=0;\n    while i<>-1 do // \u5148\u8dd1\u513f\u5b50\n    begin\n        if reach[i]<>fa then inc(Check,Check(mid,reach[i],x));\n        i:=next[i];\n    end;\n\n    i:=cnt[x]; tail:=0; // \u628a\u6240\u6709\u8def\u5f84\u53d6\u4e0b\u6765,\u5176\u4e2d\u5982\u679c\u513f\u5b50\u6709\u8def\u5f84\u5347\u4e0a\u6765,\u90a3\u4e48\u4e45\u8fde\u7740\u8fb9\u4e00\u8d77\u52a0\u4e0a\u6765\n    while i<>-1 do\n    begin\n        if reach[i]<>fa then\n        begin\n            inc(tail);\n            rope[tail]:=val[reach[i]]+value[i];\n        end;\n        i:=next[i];\n    end;\n    Sort(1,tail); // \u624b\u52a8\n    for i:=tail downto 1 do\n        if rope[i]>=mid then begin inc(Check); dec(tail); end else break; \n        // \u81ea\u5df1\u76f4\u63a5\u5339\u914d,\u6ce8\u610f\u8fd9\u91cc\u6709\u5355\u8c03\u6027\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5 break\n    l:=1;\n    for i:=tail downto 1 do // \u4e92\u76f8\u5339\u914d,\u5982\u679c\u4e24\u4e24\u52a0\u8d77\u6765\u53ef\u4ee5\u7684\u8bdd\u5c31\u5f04\n    begin\n        while (rope[i]+rope[l]<mid)and(l<tail+1) do inc(l); // \u7528\u6307\u9488\u641e\n        if l<i then begin inc(Check); rope[i]:=0; rope[l]:=0; end else break; \n        // \u5339\u914d\u8fc7\u5c31\u4e0d\u8981\u4e86 rope[i/l]=0\n    end;\n    for i:=tail downto 1 do val[x]:=max(val[x],rope[i]); \n    // \u627e\u6700\u5927\u7684(\u4e14\u6ca1\u6709\u88ab\u5339\u914d\u8fc7)\u7ed9\u7236\u4eb2\n    exit(check);\nend;\n```\n\n#### $100$ \u505a\u6cd5\n\n\u770b\u5b8c\u4e0a\u9762\u90a3\u4e2a\u4f60\u4f1a\u53d1\u73b0\u4f60\u5f97\u5230\u4e86 $80$ \u7684\u9ad8\u5206\u90e8\u5206\u5206\u3002\n\n\u9519\u8bef\u539f\u56e0\u5728\u4e8e **\u4f60\u7559\u7ed9\u7236\u4eb2\u7684\u53ea\u662f\u4f60\u90a3\u4e9b\u8fb9\u5339\u914d\u5269\u4e0b\u7684,\u5bf9\u4f60\u7684\u7236\u4eb2\u5f88\u4e0d\u5229**\u3002\u6240\u4ee5 $80$ \u5c31\u662f\u8d2a\u5fc3\u3002\n\n\u9996\u5148\u5148\u628a\u90a3\u4e9b $\\ge goal$ \u7684\u5339\u914d\u6389,\u539f\u56e0\u5982\u4e0a\u8ff0\u3002\n\n\u5176\u4f59\u7684\u5c31\u8fdb\u884c\u4e00\u6b21\u4e8c\u5206\u7b54\u6848\u770b\u7559\u54ea\u4e2a\u8def\u5f84\u7ed9\u7236\u4eb2\u597d,\u5982\u679c\u6211\u7559\u4e86\u8fd9\u6761\u8fb9\u6211\u8fd8\u80fd\u4fdd\u8bc1\u81ea\u5df1\u7684\u7b54\u6848\u8d21\u732e\u4e0d\u53d8,\u90a3\u5f88\u597d,\u5176\u5b83\u7684\u7ed9\u7236\u4eb2\u5c31 $OK$\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf(~~X$i$n$Y$a$n$g~~),\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a $Judge(goal,choose,tail)$ \u4ee3\u8868\u5728 $1$~$tail$ \u5185\u4e0d\u5339\u914d $rope[choose]$ \u8fbe\u5230 $goal$ \u7684\u6700\u5927\u5339\u914d\u6570\u91cf\u3002\u6ee1\u8db3\u5355\u8c03\u6027\u5f88\u597d\u641e\u3002\n\n```pascal\nfunction Judge(goal,choose,tail:longint):longint;\nvar l,r:longint;\nbegin\n    l:=0; Judge:=0;\n    for r:=tail downto 1 do\n    begin\n        if r=choose then continue;\n        if l=choose then inc(l);\n        repeat\n            inc(l); if l=choose then inc(l);\n        until (rope[r]+rope[l]>=goal)or(l>tail);\n        if l<r then inc(Judge) else break;\n    end;\nend;\n```\n\n\u7136\u540e\u770b\u4e00\u4e0b $Check$:\n\n```pascal\nfunction Check(goal,x,fa:longint):longint;\nvar i,l,ans,mid,tmp:longint;\nbegin\n    i:=cnt[x]; Check:=0;\n    while i<>-1 do\n    begin\n        if reach[i]<>fa then inc(Check,Check(goal,reach[i],x));\n        i:=next[i];\n    end;\n\n    i:=cnt[x]; tail:=0;\n    while i<>-1 do\n    begin\n        if reach[i]<>fa then\n        begin\n            inc(tail);\n            rope[tail]:=val[reach[i]]+value[i];\n        end;\n        i:=next[i];\n    end;\n\n    Sort(1,tail);\n    for i:=tail downto 1 do\n    \tif rope[i]>=goal then begin inc(Check); dec(tail); end else break;\n    // \u5355\u72ec\u7684\u5339\u914d\u6389\n    tmp:=Judge(goal,-1,tail); // \u5168\u90e8\u90fd\u9009\u53ef\u4ee5\u5339\u914d\u591a\u5c11\n    inc(Check,tmp); // \u7b54\u6848+=tmp\n\n    l:=1; r:=tail; ans:=0; \n    while l<=r do\n    begin\n    \tmid:=(l+r) >> 1; // \u6211\u7559 rope[mid] \u7ed9\u7236\u4eb2\n    \tif Judge(goal,mid,tail)=tmp then begin l:=mid+1; ans:=rope[mid]; end else r:=mid-1;\n        // \u5751\u70b9\u6ce8\u610f:\u7531\u4e8e\u53ef\u80fd\u6ca1\u6709\u8def\u5f84\u7236\u4eb2,\u6240\u4ee5\u8fd9\u91cc\u7684 ans \u4e0d\u80fd\u5b58 mid,\u53ea\u80fd\u5b58 rope[mid]\n    end;\n    val[x]:=ans;\nend;\n```\n\n#### \u975e\u6b63\u786e\u7684\u590d\u6742\u5ea6\u5206\u6790\n\n\u8bbe $\\sqrt{N}$ \u4e2a\u8282\u70b9\u6bcf\u4e00\u4e2a\u8282\u70b9\u6709 $\\sqrt{N}$ \u4e2a\u513f\u5b50(\u5e73\u644a?)\u3002\n\n- \u6392\u5e8f $+$ \u5404\u79cd $N \\times \\sqrt{N} \\log \\sqrt{N}$\n- \u5916\u9762\u4e00\u5c42\u662f $\\log \\sum\\limits^{N}_{i=1}l_i$ \u3002\n\n\u6240\u4ee5\u5e94\u8be5\u662f $N \\sqrt{N} \\log \\sqrt{N} \\log \\sum\\limits^{N}_{i=1}l_i$\u3002\n\n\u6309\u7167\u5927\u5bb6\u8bf4\u7684 $N \\log N \\log \\frac{\\sum\\limits^{N}_{i=1}l_i}{M}$ \u5c31\u597d\u4e86\u3002\n\n\n\n",
        "postTime": 1542952119,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u636e\u8bf4\u524d\u9762\u7684\u9898\u89e3\u6709\u4eba\u8bf4\n\n$vector$ \u53ef\u4ee5\u7528\u83ca\u82b1\u56fe\u5361\u6389\uff1f\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u6709\u4e00\u79cd\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\n\n$O(n log^2 n)$ \u7684\u4f18\u79c0 $vector$ \u7b97\u6cd5\n\n~~\u849f\u84bb\u8003\u573a\u6ca1\u60f3\u5230\u7528 multiset~~\n\n\u9996\u5148\u8fd9\u9053\u9898\u663e\u7136\u662f\u8981\u4e8c\u5206\u7b54\u6848\u7684\uff0c\u539f\u56e0\u524d\u9762\u7684\u9898\u89e3\u90fd\u5df2\u7ecf\u8bf4\u8fc7\u4e86\uff0c\u5c31\u662f\u663e\u7136\"\u80fd\u5426\"\u8fd9\u4e2a\u610f\u4e49\u4e0b\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\u3002\n\n\u9996\u5148\u6211\u4eec\u5206\u6790 $vector$ \u7b97\u6cd5\u7684\u74f6\u9888\n\n1\u3001\n\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f $lower\\_bound$ \u52a0\u4e0a\u66b4\u529b\u67e5\u8be2\u7684 $vector$:\n\n\u5927\u81f4\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nfor(i = 0;i < vec.size(); ++ i)\n{\n\tif(used[i]) continue;\n\tint ps = lower_bound(vec.begin() + i + 1,vec.end(),vec[i]) - vec.begin();\n    while(used[ps]/*used[i] \u8868\u793a i \u8fd9\u4e2a\u6570\u662f\u5426\u88ab\u5339\u914d*/ && ps < vec.size()) ps ++;\n    if(ps == vec.size()) continue;\n    used[i] = used[ps] = 1;\n}\n```\n\n\u8fd9\u6837\u505a\uff0c\u663e\u7136\u590d\u6742\u5ea6\u74f6\u9888\u5c31\u5728\u90a3\u4e2a\u4e0d\u65ad\u8df3\u7684 $ps$ \u4e0a\uff0c$ps$ \u6700\u591a\u8df3 $n$ \u6b21\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u6210\u4e86 $O(n^2 log n)$\n\n\u6709\u4eba\u53ef\u80fd\u8981\u95ee\u4e86\uff1a\u4f60\u8fd9\u6837\u505a\u4e0d\u662f $n^3logn$ \u7684\u5417\n\n\u5176\u5b9e\u4e0d\u7136\uff0c\u56e0\u4e3a\u6700\u591a\u53ea\u6709 $n$ \u4e2a\u513f\u5b50\uff0c\u6bcf\u4e2a\u513f\u5b50\u5047\u8bbe\u5b83\u4eec\u90fd\u6070\u597d\u505a\u4e86 $n$ \u6b21\u5339\u914d\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u662f $O(n^2 log n)$\n\n\u7136\u800c\u8c8c\u4f3c NOIP \u6570\u636e\u8f83\u6c34\uff1f \u6211\u4e5f\u6ca1\u8bd5\u8fc7\n\n2\u3001\n\u4f60\u5df2\u7ecf\u53d1\u73b0\u4e86\u4f60\u7684\u4ee3\u7801\u7684\u6f0f\u6d1e\uff0c\u8003\u8651 $vector$ \u62e5\u6709 $erase$ \u51fd\u6570\uff0c\u4f60\u81ea\u4fe1\u5730\u5199\u51fa\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\n```cpp\nfor(int i = 0;i < seq.size(); ++ i)\n{\n\tint tarps = lower_bound(seq.begin() + i + 1,seq.end(),mid - seq[i]) - seq.begin();\n\tif(tarps != seq.size()) cnt ++,seq.erase(seq.begin() + tarps),seq.erase(seq.begin() + i),i --;\n}\n```\n\n\u4f60\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5b8c\u7f8e\u5730\u8dd1\u8fc7\u968f\u673a\u5927\u6570\u636e\u548c\u539f\u672c\u53ef\u4ee5\u5361\u6389\u4f60\u7684\u83ca\u82b1\u56fe\u6570\u636e!\n\n\u7136\u800c\u4f60\u4e0d\u80fd\u9ad8\u5174\u5f97\u592a\u65e9:\n\n\u4e00\u4e2a\u83ca\u82b1\u56fe\u5f53\u6240\u6709\u8fb9\u6743\u90fd\u662f\u8fb9\u6743\u7684\u4e0a\u754c\uff0c\u4f60\u7684\u7a0b\u5e8f\u518d\u6b21\u5149\u8363\u5730 TLE \u4e86...\n\n(\u5176\u5b9e\u53ea\u9700\u8981 2.0 s)\n\n3\u3001\u4f60\u53c8\u601d\u8003\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e0a\u8ff0\u90a3\u79cd\u60c5\u51b5\u80fd\u5361\u6389\u4f60\u7684\u5173\u952e\u5728\u4e8e:\n\n\u4f60\u7684\u7a0b\u5e8f\u5339\u914d\u4e86\u82e5\u5e72\u6b21\uff0c\u8fd9\u82e5\u5e72\u6b21\u90fd\u662f\u8dd1\u6ee1\u4e86\u7684\uff0c\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u8d85\u6807\u3002\n\n\u8f6c\u5ff5\u4e00\u60f3:\u51fa\u9898\u4eba\u603b\u4e0d\u4f1a\u5728\u771f\u6b63\u6700\u5927\u7684\u6570\u636e\u4e0a\u51fa\u4e00\u4e2a\u4ec0\u4e48\n```\n50000 25000\n1 2 10000\n1 3 10000\n...\n```\n\n\u7684\u6570\u636e\u5427\uff0c\u8fd9\u6837\u4f1a\u8ba9\u592a\u591a\u4eba\u6c34\u8fc7\u4e86\u3002\n\n\u4e8e\u662f\u4f60\u8bd5\u56fe\u5728\u5339\u914d\u5230 $m$ \u6761\u8def\u5f84\u540e\u76f4\u63a5\u8fd4\u56de\u4e3b\u7a0b\u5e8f\uff01\n\n(\u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u4e48\u76f4\u63a5)\n\n\u7136\u540e\u4f60\u5c31\u80fd\u5728\u671f\u671b $O(n log^2 n * \\text{\u7384\u5b66})$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8fc7\u6389\u8fd9\u9053\u9898\u4e86\uff01\n\n\u6e23\u6e23\u7684\u8003\u573a\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n\nusing namespace std;\n\nstruct edge\n{\n\tint v,nxt,w;\n}e[100050];\n\nint ecnt,head[50050];\n\nvoid adde(int u,int v,int w)\n{\n\te[++ ecnt].v = v;\n\te[ecnt].nxt = head[u];\n\thead[u] = ecnt;\n\te[ecnt].w = w;\n}\n\nint seq[50050];\nint mid;\n\nint mxdep[50050];\nint cnt = 0,n,m;\n\nvoid dfs(int u,int lst)\n{\n\tmxdep[u] = 0;\n\tif(cnt >= m) return ;\n\tvector<int> seq;\n\tfor(int i = head[u];i;i = e[i].nxt)\n\t{\n\t\tint v = e[i].v;\n\t\tif(v != lst)\n\t\t{\n\t\t\tdfs(v,u);\n\t\t\tif(cnt >= m) return ;\n\t\t\tseq.push_back(mxdep[v] + e[i].w);\n\t\t}\n\t}\n\tif(cnt >= m) return ;\n\tsort(seq.begin(),seq.end());\n\tfor(int i = seq.size() - 1;i >= 0; -- i)\n\t\tif(seq[i] >= mid) seq.erase(seq.begin() + i),cnt ++;\n\tif(cnt >= m) return ;\n\tfor(int i = 0;i < seq.size(); ++ i)\n\t{\n\t\tint tarps = lower_bound(seq.begin() + i + 1,seq.end(),mid - seq[i]) - seq.begin();\n\t\tif(tarps != seq.size()) cnt ++,seq.erase(seq.begin() + tarps),seq.erase(seq.begin() + i),i --;\n\t\tif(cnt >= m) break;\n\t}\n\tif(cnt >= m) return ;\n\tfor(int i = 0;i < seq.size(); ++ i)\n\t\tmxdep[u] = max(mxdep[u],seq[i]);\n\tseq.clear();\n}\n\nint main()\n{\n\tfreopen(\"track.in\",\"r\",stdin);\n\tfreopen(\"track.out\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&m);\n\tint tot = 0;\n\tfor(int i = 1;i < n; ++ i)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadde(u,v,w); adde(v,u,w);\n\t\ttot += w;\n\t}\n\tint l = 0,r = tot / m,ans;\n\twhile(l <= r)\n\t{\n\t\tmid = (l + r) >> 1;\n\t\tcnt = 0;\n\t\tdfs(1,0);\n\t\tif(cnt >= m) l = mid + 1,ans = mid;\n\t\telse r = mid - 1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n```",
        "postTime": 1542717116,
        "uid": 25308,
        "name": "Wen_kr",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u672c\u9898\u601d\u8def\u4e8c\u5206\u7b54\u6848+\u8d2a\u5fc3  \n\u5176\u5b9e\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u8bb2\u7684\u5f88\u900f\u5f7b\u4e86\uff0c\u4f46\u662f\u5728\u4ee3\u7801\u4e2d\u5927\u91cf\u4f7f\u7528stl\u3002\u5bf9\u4e8e\u4e0d\u719f\u6089STL\u7684\u540c\u5b66\uff0c\u672c\u7bc7\u9898\u89e3\u7ed9\u51fa\u4e00\u79cd\u4e0d\u4f7f\u7528set\uff08\u53ef\u80fd\u4e0d\u4f1a\u7528\uff09,vector\uff08\u5bfc\u81f4\u5361\u5e38\uff09\u7684\u4ee3\u7801\u3002  \n  \n\u4e0e\u5176\u4ed6\u9898\u89e3\u7684\u4e0d\u540c\uff0c\u5728\u4e8edfs\u4e2d\u7684\u66f4\u65b0\u7b56\u7565\u3002  \n\u9996\u5148\uff0c\u5c3d\u91cf\u5c06\u81ea\u5df1\u7684\u5b50\u8282\u70b9\u7684\u957f\u5ea6\u4e24\u4e24\u62fc\u6210\u5927\u4e8e\u5f53\u524d\u60f3\u8981\u957f\u5ea6\u7684\uff0c\u5e76\u7edf\u8ba1\u6ee1\u8db3\u957f\u5ea6\u7684\u9053\u8def\u6570\u91cf\u3002\u7136\u540e\u5c06\u5269\u4f59\u957f\u5ea6\u4e2d\u6700\u957f\u7684\u8fd4\u56de\u7236\u8282\u70b9\u3002\u4f46\u4f1a\u6709\u4e2a\u95ee\u9898\uff0c\u5982\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u8fd4\u56de\u957f\u4e3a\uff1a4 3 2   \n\u800c\u9884\u671f\u957f\u5ea6\u4e3a 5  \n\u5982\u679c\u6309\u521a\u624d\u7b56\u7565\uff0c4+2>5\u62fc\u4e3a\u4e00\u6761\u8def\uff0c\u8fd4\u56de3\u3002\u4f46\u5176\u5b9e\u6709\u6d6a\u8d39\uff0c\u53ea\u8981\u5c063+2\u62fc\u8d77\u6765\u5c31\u884c\u4e86\uff0c\u8fd4\u56de\u66f4\u5927\u76844\u3002\u4e8e\u662f\u5c06\u8fd4\u56de\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u5f97\u5230\u6570\u7ec4A\uff0c\u5bf9\u4e8eAi+Aj>=\u9884\u671f\u503c\uff08i<j\uff09,\u5982\u679cAi+1+Aj>=\u9884\u671f\u503c\uff0c\u5219\u5c06Ai+1\u4e0eAj\u62fc\u8d77\u6765\uff0c\u5c06Ai\u5b58\u8d77\u6765\u3002\u5f53Ak+Aj<\u9884\u671f\u503c\u65f6(k<j),\u628aAi\u62ff\u51fa\u6765\u548cAj\u62fc\uff0c\u5e76\u5728\u4e0b\u6b21\u8bd5\u56fe\u5c06Ai\u66f4\u65b0\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn=10000005;\n\nstruct node\n{\n    int v,w;\n    node *next;\n}*g[maxn],pool[maxn<<1];\n\nint cnt=0;\n\nvoid addedge(int u,int v,int w)\n{\n    node *p=&pool[++cnt];\n    node *q=&pool[++cnt];\n    p->v=v;p->w=w;p->next=g[u];g[u]=p;\n    q->v=u;q->w=w;q->next=g[v];g[v]=q;\n}\n\nint n,m;\nbool vis[maxn]={};\nint root=0;\nint sumlen=0;\nint in[maxn]={};\n\nint max(int a,int b)\n{\n    return a>b?a:b;\n}\n\nint Std=0;\nbool stop=0;\nint ways=0;\n\nbool cmp(int a,int b)\n{\n    return a>b;\n}\n\nbool use[maxn];\nint list[maxn];\nint LEFT_=0;\nint dfs2(int p)\n{\n    vis[p]=1;\n    int num=0;\n    int R=LEFT_;\n    int L=LEFT_+in[p]-2;\n    LEFT_=L+1;\n    int pos=R;\n    for(node *v=g[p];v;v=v->next)\n    {\n        if(!vis[v->v])\n        {\n            num=dfs2(v->v)+v->w;\n            list[pos++]=num;\n        }\n    }\n    sort(list+R,list+L+1,cmp);\n    int l=R,r=L;\n    \n    while(l<=r && list[l]>=Std)\n    {\n        ways++;\n        use[l]=1;\n        l++;\n    }\n    int maxreturn=0;\n    int Pos=maxn-1;\n    while(l<r)\n    {\n        if(list[l]+list[r]>=Std)\n        {\n            if(Pos==maxn-1 && l+1<r && list[l+1]+list[r]>=Std)\n            {\n                Pos=l;\n                l++;\n            }\n            use[l]=use[r]=1;\n            ways++;\n            l++;\n        }\n        else if(Pos!=maxn-1 && !use[Pos])\n        {\n            if(list[Pos]+list[r]>=Std)\n            {\n                use[Pos]=use[r]=1;\n                ways++;\n                pos=maxn-1;\n            }\n        }\n        r--;\n    }\n    if(!use[r])\n    {\n\t    if(Pos!=maxn-1 && !use[Pos])\n\t    {\n\t        if(list[Pos]+list[r]>=Std)\n\t        {\n\t            use[Pos]=use[r]=1;\n\t            ways++;\n\t            pos=maxn-1;\n\t        }\n\t    }\n    }\n    for(int i=R;i<=L;i++)\n    {\n        if(!use[i])\n        {\n            maxreturn=list[i];\n            break;\n        }\n    }\n    return maxreturn;\n}\n\nint main()\n{\n    cin>>n>>m;\n    int u,v,w;\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        addedge(u,v,w);\n        in[u]++;\n        in[v]++;\n        sumlen+=w;\n    }\n    root=1;\n    in[root]++;\n    int l=0,r=sumlen/m+1;\n    int mid;\n    while(l+1<r)\n    {\n        LEFT_=0;\n        ways=0;\n        memset(use,0,sizeof(use));\n        memset(list,0,sizeof(list));\n        memset(vis,0,sizeof(vis));\n        mid=(l+r)>>1;\n        Std=mid;\n        dfs2(root);\n        if(ways>=m)\n            l=mid;\n        else\n            r=mid;\n    }\n    cout<<l<<endl;\n    return 0;\n}\n\n```\n\n",
        "postTime": 1542282930,
        "uid": 38188,
        "name": "\u6570\u5b66\u7cfb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "**$noip2018 D1T3$**\n\n\u522b\u95ee\uff0c\u95ee\u5c31\u4e0d\u4f1a\uff0c\u73b0\u5b66$multiset$\n\n**\u6d1b\u5495\u63d0\u4ea4\u9700\u5438\u6c27\u4fdd\u5e73\u5b89**\n\n\u8fd9\u91cc\u5c31\u5199\u4e00\u4e0b~~\u770b\u4e86\u4e00\u5927\u5806\u9898\u89e3\u540e\u8fd8\u662f\u4e0d\u600e\u4e48\u61c2\u7684~~\u89e3\u9898\u62a5\u544a\u5427\n\n## **[\u4ee3\u7801\u6765\u6e90\u9898\u89e3](http://www.manongjc.com/detail/9-lbrlartefmufyvr.html)**\n\n \u5b66\u4e00\u4e0b**multiset\u57fa\u672c\u7528\u6cd5**[c++\u53c2\u8003\u624b\u518c](https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5)\n  [set\u4e0emultiset](https://www.cnblogs.com/ChinaHook/p/6985444.html)\n \n## multiset\n\n\u5141\u8bb8\u5143\u7d20\u91cd\u590d\uff0c\u5e38\u4ee5\u5e73\u8861\u4e8c\u53c9\u6811\u5b8c\u6210\n\n\u4e0d\u63d0\u4f9b\u76f4\u63a5\u7528\u6765\u5b58\u53d6\u5143\u7d20\u7684\u4efb\u4f55\u64cd\u4f5c\u5143\u7d20\n\n\u901a\u8fc7\u8fed\u4ee3\u5668\u8fdb\u884c\u5143\u7d20\u7684\u5b58\u53d6\u3002\n\n## **lower_bound**\n\n\u7b2c\u4e00\u4e2a$first$\u53c2\u6570\u662f\u4e00\u6bb5\u8fde\u7eed\u7a7a\u95f4\u7684\u9996\u5730\u5740\uff0c$last$\u662f\u8fde\u7eed\u7a7a\u95f4\u672b\u7aef\u7684\u5730\u5740\uff0c$val$\u662f\u8981\u67e5\u627e\u7684\u503c\u3002\n\n\u8c03\u7528$lower$_$bound()$\u7684\u524d\u63d0\u662f\u8fd9\u6bb5\u8fde\u7eed\u7684\u7a7a\u95f4\u91cc\u7684\u5143\u7d20\u662f\u6709\u5e8f\uff08\u9012\u589e\uff09\u7684\u3002\n\n\u5728$first$\u548c$last$\u4e2d\u7684\u524d\u95ed\u540e\u5f00\u533a\u95f4\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\uff0c\u8fd4\u56de\u5927\u4e8e\u6216\u7b49\u4e8e$val$\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e\u3002\u5982\u679c\u6240\u6709\u5143\u7d20\u90fd\u5c0f\u4e8e$val$\uff0c\u5219\u8fd4\u56de$last$\u7684\u4f4d\u7f6e\n\n\n## **upper_bound**\n\n\u7528\u6cd5\u8ddf$lower$_$bound()$\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u5b83\u8fd4\u56de\u7684\u662f\u7b2c\u4e00\u4e2a**\u5927\u4e8e**$x$\u7684\u503c\u7684\u5730\u5740\uff0c \u800c$lower$_$bound()$\u662f\u8fd4\u56de\u7b2c\u4e00\u4e2a**\u5927\u4e8e\u7b49\u4e8e**$x$\u7684\u503c\u7684\u5730\u5740\n\n**> \u548c >= \u662f\u4e8c\u8005\u7684\u533a\u522b**\n\n------------\n\n# [luogu 5021 \u8d5b\u9053\u4fee\u5efa](https://www.luogu.org/problem/P5021) $Accepted$\n\n~~\u4eca\u5929\u5b9e\u5728\u4e0d\u60f3\u5199\u4e86\u540e\u9762\u518d\u586b\u5427~~\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u606d\u656c\u7684\u6284\u5199\u9898\u89e3\uff0c\u4e0d\u61c2\u7684\u5199\u4e86\u6ce8\u91ca\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100010\n\nint n,m,x,y,z,cnt,mid,sum;\nint head[maxn],w[maxn],to[maxn],nxt[maxn];\n//\u6700\u597d\u8fd8\u662f\u6253\u7ed3\u6784\u4f53\u5427\uff0c\u53d8\u91cf\u540d\u91cd\u590d\u633a\u70e6\u4eba\u7684\n\nmultiset<int> e[maxn];//\u5b9a\u4e49\u4e8e\u5934\u6587\u4ef6<set>\n\nvoid add(int u,int v,int c){\n    to[++cnt]=v;\n    w[cnt]=c;\n    nxt[cnt]=head[u];\n    head[u]=cnt;\n}\n\nmultiset<int>::iterator it;//\u8fed\u4ee3\u5668\uff0c\u7c7b\u4f3c\u4e8e\u6307\u9488\uff0c\u53ef\u4ee5\u7528\"*\"\u89e3\u9664\u5f15\u7528\n\nint dfs(int x,int fa){\n    e[x].clear();//clear\u6e05\u9664\u5185\u5bb9\n    for(int i=head[x];i;i=nxt[i]){\n        int v=to[i];\n        if(v==fa) continue;\n        int val=w[i]+dfs(v,x);\n        if(val>=mid) sum++;\n        else e[x].insert(val);\n    }\n    int ret=0;\n    while(!e[x].empty()){//\u68c0\u67e5\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a\n        if(e[x].size()==1) {//size\u8fd4\u56de\u5bb9\u7eb3\u7684\u5143\u7d20\u6570\n            return max(ret,*e[x].begin());//\u7528*\u8bfb\u53d6\u5b83\u7684\u503c\n        }\n        it=e[x].lower_bound(mid-*e[x].begin());\n        if(it==e[x].begin()&&e[x].count(*it)==1) it++;\n        if(it==e[x].end()){//end\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n            ret=max(ret,*e[x].begin());\n            e[x].erase(e[x].find(*e[x].begin()));\n        }//begin\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\uff0cerase\u64e6\u9664\u5143\u7d20\n        else{\n            sum++;\n            e[x].erase(e[x].find(*it));\n            e[x].erase(e[x].find(*e[x].begin()));\n        }\n    }\n    return ret;\n}\n\nbool check(){\n    sum=0;\n    dfs(1,0);\n    return sum>=m;\n}\n\nint main(){\n    // freopen(\"in\",\"r\",stdin);\n    cin>>n>>m;\n    for(int i=1;i<n;++i){\n        cin>>x>>y>>z;\n        add(x,y,z);\n        add(y,x,z);\n    }\n    int l=1,r=1e9;\n    while(l<=r){\n        mid=(l+r)>>1;\n        if(check()) l=mid+1;\n        else r=mid-1;\n    }\n    cout<<l-1<<endl;\n    return 0;\n}\n```\n\n\n",
        "postTime": 1572260050,
        "uid": 154646,
        "name": "IamStarlight",
        "ccfLevel": 0,
        "title": "luogu 5021 \u8d5b\u9053\u4fee\u5efa"
    },
    {
        "content": "# \u95f2\u626f\n\n$NOIP2018$ \u7684 $D1T3$ \uff0c\u5495\u4e86\u5feb\u4e00\u5e74\u4e86\uff0c\u7ec8\u4e8e\u8fc7\u6765\u505a\u4e86\u3002\u3002\n\n# \u9898\u9762\n\n[\u9898\u9762](https://www.luogu.org/problem/P5021)\n\n# Solution\n\n\u8981\u8ba9\u6700\u5c0f\u7684\u6700\u5927\uff0c\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\n\n\u56e0\u4e3a\u6bcf\u6761\u8fb9\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u80fd\u5411\u4e0a\u4f20\u9012\u4e00\u6bb5\u8d5b\u9053\u3002\n\n\u5728\u5b50\u6811\u4e2d\uff0c\u5982\u679c\u4e00\u6761\u8d5b\u9053\u5df2\u7ecf\u8fbe\u5230\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u5c06\u5176\u7eb3\u5165\u6700\u540e\u7684\u65b9\u6848\u4e2d\u3002\u56e0\u4e3a\u5982\u679c\u7ee7\u7eed\u5411\u5b83\u91cc\u9762\u52a0\u8d5b\u9053\uff0c\u5e76\u4e0d\u4f1a\u8ba9\u7b54\u6848\u66f4\u4f18\u3002\n\n\u5bf9\u4e8e\u4e0d\u80fd\u8fbe\u5230\u8981\u6c42\u7684\u8d5b\u9053\uff0c\u6682\u65f6\u4fdd\u7559\uff0c\u5982\u679c\u6709\u4e24\u6761\u8d5b\u9053\u62fc\u5230\u4e00\u8d77\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\uff0c\u6211\u4eec\u4e5f\u76f4\u63a5\u5c06\u5176\u7eb3\u5165\u6700\u540e\u7684\u65b9\u6848\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u957f\u5ea6\u4e0d\u591f\u7684\u8d5b\u9053\uff0c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\uff0c\u7136\u540e\u627e\u51fa\u4e00\u6761\u6700\u5c0f\u7684\uff0c\u4e0e\u5b83\u62fc\u63a5\u540e\u53ef\u4ee5\u8fbe\u5230\u8981\u6c42\u7684\u6765\u7ec4\u5408\u3002\u56e0\u4e3a\u5927\u7684\u65e0\u8bba\u662f\u5411\u4e0a\u4f20\u9012\u8fd8\u662f\u4e0e\u5176\u4ed6\u7684\u8d5b\u9053\u62fc\u63a5\u80af\u5b9a\u90fd\u6bd4\u5c0f\u7684\u597d\u3002\n\n\u5bf9\u4e8e\u5269\u4e0b\u7684\u6ca1\u6cd5\u62fc\u63a5\u7684\u8d5b\u9053\uff0c\u6211\u4eec\u9009\u51fa\u4e00\u6761\u6700\u957f\u7684\u6765\u5411\u4e0a\u4f20\u9012\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u62fc\u51fa\u65b0\u8d5b\u9053\u7684\u6982\u7387\u66f4\u5927\u3002\n\n\u4ee5\u4e0a\u51b3\u7b56\u90fd\u662f\u57fa\u4e8e**\u8d2a\u5fc3**\u7684\u601d\u60f3\u7684\u3002\n\n\u5bf9\u4e8e\u6bcf\u9897\u5b50\u6811\u7684\u7ef4\u62a4\uff0c\u6211\u4eec\u56e0\u4e3a\u8981\u6392\u5e8f\uff0c\u8fd8\u8981\u627e\u6700\u63a5\u8fd1\u9700\u6c42\u7684\u8d5b\u9053\uff0c\u53ef\u4ee5\u60f3\u5230\u7528 $set$ \u548c\u5176\u81ea\u5e26\u7684 $lower\\_bound$ \u6765\u7ef4\u62a4\u3002\u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u6761\u957f\u5ea6\u4e00\u6837\u7684\u8d5b\u9053\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 $multiset$ \u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a $multiset$ \uff0c\u4ee5\u6b64\u6765\u786e\u4fdd\u6bcf\u4e00\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5b50\u6811\u5728\u5904\u7406\u65f6\u4e92\u4e0d\u5f71\u54cd\u3002\n\n```c++\n#include<bits/stdc++.h>\n#define del(a,i) memset(a,i,sizeof(a))\n#define ll long long\n#define inl inline\n#define il inl void\n#define it inl int\n#define ill inl ll\n#define re register\n#define ri re int\n#define rl re ll\n#define mid ((l+r)>>1)\n#define lowbit(x) (x&(-x))\n#define INF 0x3f3f3f3f\nusing namespace std;\ntemplate<class T>il read(T &x){\n\tint f=1;char k=getchar();x=0;\n\tfor(;k>'9'||k<'0';k=getchar()) if(k=='-') f=-1;\n\tfor(;k>='0'&&k<='9';k=getchar()) x=(x<<3)+(x<<1)+k-'0';\n\tx*=f;\n}\ntemplate<class T>il print(T x){\n\tif(x/10) print(x/10);\n\tputchar(x%10+'0');\n}\nll mul(ll a,ll b,ll mod){long double c=1.;return (a*b-(ll)(c*a*b/mod)*mod)%mod;}\nit qpow(int x,int m,int mod){\n\tint res=1,bas=x%mod;\n\twhile(m){\n\t\tif(m&1) res=(1ll*res*bas)%mod;\n\t\tbas=(1ll*bas*bas)%mod,m>>=1;\n\t}\n\treturn res%mod;\n}\nconst int MAXN = 5e4+5;\nint n,k,u,v,d,head[MAXN],num_edge,l=1,r,cnt;\nstruct Edge{\n\tint next,to,dis;\n\tEdge(){}\n\tEdge(int next,int to,int dis):next(next),to(to),dis(dis){}\n}edge[MAXN<<1];\nil add_edge(int u,int v,int dis){\n\tedge[++num_edge]=Edge(head[u],v,dis),head[u]=num_edge;\n\tedge[++num_edge]=Edge(head[v],u,dis),head[v]=num_edge;\n}\nit DFS(int u,int fa){\n\tri mx=0,mx1=0;\n\tfor(ri i=head[u];i;i=edge[i].next){\n\t\tif(edge[i].to==fa) continue;\n\t\tmx1=max(DFS(edge[i].to,u)+edge[i].dis,mx1);\n\t\tif(mx1>mx) swap(mx1,mx);\n\t}\n\tr=max(r,mx+mx1);\n\treturn mx;\n}\nmultiset<int> s[MAXN];\nit DFS1(int u,int fa,int lim){\n\ts[u].clear();\n\tfor(ri i=head[u];i;i=edge[i].next){\n\t\tif(edge[i].to==fa) continue;\n\t\tri val=DFS1(edge[i].to,u,lim)+edge[i].dis;\n\t\tif(val>=lim) cnt++;\n\t\telse s[u].insert(val);\n\t}\n\tri mx=0;\n\twhile(!s[u].empty()){\n\t\tif(s[u].size()==1) return max(mx,*s[u].begin());\n\t\tmultiset<int>::iterator ite=s[u].lower_bound(lim-*s[u].begin());\n\t\tif(ite==s[u].begin()&&s[u].count(*s[u].begin())==1) ite++;\n\t\tif(ite==s[u].end()) mx=max(mx,*s[u].begin()),s[u].erase(s[u].begin());\n\t\telse cnt++,s[u].erase(ite),s[u].erase(s[u].begin());\n\t}\n\treturn mx;\n}\ninl bool check(int lim){\n\tcnt=0,DFS1(1,0,lim);\n\treturn cnt>=k;\n}\nint main()\n{\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tread(n),read(k);\n\tfor(ri i=1;i<n;++i) read(u),read(v),read(d),add_edge(u,v,d);\n\tDFS(1,0);\n\twhile(l<r){\n\t\tri md=(l+r+1)>>1;\n\t\tif(check(md)) l=md;\n\t\telse r=md-1;\n\t}\n\tprint(l);\n\treturn 0;\n}\n```\n\n# \u603b\u7ed3\n\n\u5bf9\u4e8e\u8d2a\u5fc3\u8fd8\u662f\u4e0d\u592a\u719f\u7ec3\uff0c\u81ea\u5df1\u60f3\u4e86\u534a\u5929\u8fd8\u662f\u6ca1\u6709\u60f3\u51fa\u505a\u6cd5\uff0c\u8fd8\u662f\u7ffb\u4e86\u9898\u89e3\u3002~~\u8be5\u6253~~",
        "postTime": 1567342461,
        "uid": 122273,
        "name": "TheShadow",
        "ccfLevel": 0,
        "title": "P5021 \u8d5b\u9053\u4fee\u5efa \u9898\u89e3"
    },
    {
        "content": "```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n/*\nNOIP2018 \u8d5b\u9053\u4fee\u5efa\n\u4e00\u9053\u6811\u5f62DP\u88f8\u9898\u3002\n\u56e0\u4e3a\u90e8\u5206\u5206\u7ed9\u5f97\u5f88\u8db3\uff0c\u6240\u4ee5\u6211\u5728\u8003\u573a\u4e0a\u5148\u6253\u4e86\u4e00\u5806\u90e8\u5206\u5206\uff0c\u5efa\u4e865\u4e2a\u547d\u540d\u7a7a\u95f4\u3002\n\u7136\u540e\u5728\u6253\u4e8c\u53c9\u6811\u7684\u90e8\u5206\u5206\u7684\u65f6\u5019\u60f3\u5230\u4e86\u6b63\u89e3\u3002\uff08\u867d\u7136\u53ef\u80fd\u4e8c\u5206\u5199\u6302\u4e86\uff09 \n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5\u5e26\u6743\u6811\uff0c\u5c06\u5b83\u7684\u4e00\u90e8\u5206\u62c6\u6210$latex m$\u6761\u94fe\uff0c\u4f7f\u5f97\u6743\u503c\u6700\u77ed\u7684\u94fe\u7684\u6743\u503c\u6700\u5927\u3002\n\u6700\u5c0f\u7684\u6c42\u6700\u5927\uff0c\u5f53\u7136\u6ee1\u8db3\u65e0\u540e\u6548\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\n\u7136\u540e\u6211\u4eec\u8003\u8651\u68c0\u9a8c\u3002\u9996\u5148\uff0c\u5f88\u5bb9\u6613\u53ef\u4ee5\u53d1\u73b0\u7b54\u6848\u5177\u6709\u65e0\u540e\u6548\u6027\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u4e2a\u5b50\u6811\u5728\u8ba1\u7b97\u51fa\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e4b\u540e\uff0c\u5c31\u53ea\u9700\u8981\u8ba1\u7b97\u51fa\u5b83\u5bf9\u7236\u8282\u70b9\u7684\u8d21\u732e\u3002\n\u8fd9\u662f\u56e0\u4e3a\uff0c\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u5b83\u80fd\u4f7f\u7528\u7684\u4ec5\u6709\u5b50\u6811\u7684\u4e00\u6761\u94fe\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u5b50\u6811\u7684\u4fe1\u606f\u3002\n\u6545\u800c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u300c\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u7236\u8282\u70b9\u7684\u90a3\u6761\u94fe\u300d\u7684\u503c\u66f4\u65b0\u4e0a\u53bb\u5373\u53ef\u3002\u6211\u4eec\u7528$latex f_{x}$\u8868\u8fbe\u8fd9\u4e2a\u4e0a\u4f20\u7684\u503c\u3002\n\u5e76\u4e14\uff0c\u5bf9\u4e8e\u6bcf\u68f5\u5b50\u6811\u662f\u53ef\u4ee5\u8d2a\u5fc3\u5730\u5904\u7406\u7684\u2014\u2014\u5982\u679c\u4e00\u68f5\u5b50\u6811\u4e2d\u7684\u4e00\u6761\u94fe\u53ef\u4ee5\u548c\u53e6\u4e00\u6761\u94fe\u7ec4\u6210\u4e00\u6761\u5408\u6cd5\u7684\u94fe\uff0c\u90a3\u5c31\u6ca1\u5fc5\u8981\u628a\u5b83\u4e0a\u4f20\u4e86\u3002 \n\u8fd9\u662f\u56e0\u4e3a\uff0c\u5982\u679c\u4e0d\u4e0a\u4f20\uff0c\u4e00\u5b9a\u53ef\u4ee5\u5bf9\u7b54\u6848\u4ea7\u751f1\u7684\u8d21\u732e\uff1b\u5982\u679c\u4e0a\u4f20\u4e86\uff0c\u4ec5\u4ec5\u662f\u6709\u53ef\u80fd\u5bf9\u7b54\u6848\u4ea7\u751f1\u7684\u8d21\u732e\u3002 \n\u90a3\u4e48\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5b50\u6811\u5206\u522b\u8003\u8651\u3002\u8fd9\u5c31\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\uff1a \n\u300c\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a$latex n$\u7684\u5e8f\u5217\uff0c\u53d6\u51fa\u5176\u4e2d\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u5bf9\u6216\u6570\uff0c\u4f7f\u5f97\u6570\u5bf9\u7684\u548c\u6216\u6570\u7684\u503c\u5927\u4e8e\u7ed9\u5b9a\u503c\uff0c\u5e76\u4e14\u5728\u6709\u9057\u7559\u6570\u7684\u60c5\u51b5\u4e0b\u4f7f\u5f97\u9057\u7559\u7684\u6570\u7684\u503c\u6700\u5927\u3002\u300d\n\u8fd9\u4e2a\u95ee\u9898\u8981\u600e\u4e48\u505a\u5462\uff1f\u5c06\u5b83\u4eec\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5927\u4e8e\u7ed9\u5b9a\u503c\u7684\u6570\uff0c\u5355\u72ec\u9009\u53d6\u662f\u66f4\u4f18\u7684\u3002\n\u7136\u540e\u5904\u7406\u5269\u4e0b\u6765\u7684\u6570\u3002\u7528\u53cc\u6307\u9488\u505a\u3002\n\u5982\u679c\u53f3\u6307\u9488\u7684\u6570\u53ef\u4ee5\u4e0e\u5de6\u6307\u9488\u6307\u7684\u6570\u7ec4\u6210\u5408\u6cd5\u6570\u5bf9\u5c31\u628a\u53f3\u6307\u9488\u63a8\u5165\u6808\u4e2d\uff0c\u76f4\u5230\u6ca1\u6709\u5408\u6cd5\u7684\u53f3\u6307\u9488\uff0c\u5c31\u8003\u8651\u6808\u4e2d\u662f\u5426\u4e3a\u7a7a\u3002\n\u5982\u679c\u4e0d\u4e3a\u7a7a\u5c31\u8bf4\u660e\u5b58\u5728\u4e00\u4e2a\u53ef\u4ee5\u548c\u5de6\u6307\u9488\u5339\u914d\u7684\u6570\uff0c\u90a3\u4e48\u5c31\u5c06\u7b54\u6848\u52a0\u4e00\uff0c\u5426\u5219\u5de6\u6307\u9488\u5c31\u627e\u4e0d\u5230\u6570\u548c\u5b83\u5339\u914d\u4e86\uff0c\u90a3\u4e48\u5c31\u7528\u5b83\u6765\u66f4\u65b0$latex f{x}$\u5de6\u6307\u9488\u5f80\u53f3\u63a8\u3002\u4e00\u76f4\u5230\u5e8f\u5217\u4e3a\u7a7a\u3002 \n\u7136\u540e\uff0c\u5bf9\u4e8e\u5269\u4e0b\u7684\u6570\uff0c\u5b83\u4eec\u4e00\u5b9a\u90fd\u53ef\u4ee5\u7ec4\u6210\u5408\u6cd5\u6570\u5bf9\u2014\u2014\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u88ab\u63a8\u5165\u6808\u4e2d\u7684\u6570\uff0c\u90fd\u53ef\u4ee5\u548c\u4e00\u4e2a\u6bd4\u6808\u4e2d\u6700\u5c0f\u6570\u8fd8\u8981\u5c0f\u7684\u6570\u7ec4\u6210\u5408\u6cd5\u6570\u5bf9\u3002\n\u90a3\u4e48\uff0c\u6211\u4eec\u8003\u8651\u5269\u4e0b\u7684\u6570\u7684\u6570\u91cf\u7684\u5947\u5076\u6027\u3002\u5982\u679c\u662f\u5947\u6570\u4e2a\uff0c\u90a3\u4e48\u5c31\u8ba1\u7b97\u7b54\u6848\u4e4b\u540e\u7528\u6700\u5927\u503c\u6765\u66f4\u65b0$latex f_{x}$\u3002\n\u8fd9\u5c31\u505a\u5b8c\u4e86\u3002 \n*/\nstruct ee{\n    int v;\n    int w;\n    int nxt;\n}e[50005];\nint h[50005],et=0;\nint n,m;\ninline void add(int u,int v,int w){\n    e[++et]=(ee){v,w,h[u]};\n    h[u]=et;\n}\nint MN,rt=0,f[50005],nw;\nint st[50005],tp=0,st2[50005],tp2=0;\ninline void dfs(int X){\n    for(int i=h[X];i;i=e[i].nxt){\n        dfs(e[i].v);\n    }\n    tp=0,tp2=0;\n    for(int i=h[X];i;i=e[i].nxt){\n        st[++tp]=f[e[i].v]+e[i].w;\n    }\n    std::sort(st+1,st+1+tp);\n    while(tp&&st[tp]>=MN){\n        --tp;\n        ++rt;\n    }\n    for(int i=1;i<=tp;++i){\n        while(i<tp&&st[i]+st[tp]>=MN){\n            st2[++tp2]=st[tp];\n            --tp;\n        }\n        if(tp2){\n            --tp2;\n            ++rt;\n        }else{\n            f[X]=st[i];\n        }\n    } \n    if(tp2&1){\n        f[X]=st2[1];\n    }\n    rt+=(tp2>>1);\n} \ninline bool chck(int X){\n    std::memset(f,0,sizeof(f));\n    MN=X;\n    rt=0;\n    dfs(1);\n    if(rt>=m){\n        return 1;\n    }else{\n        return 0;\n    }\n}\nvoid init(){\n    scanf(\"%d%d\",&n,&m);\n    int u,v,w;\n    for(int i=1;i<n;++i){\n        scanf(\"%d%d%d\",&u,&v,&w);\n        if(u>v){\n            u^=v^=u^=v;\n        }\n        add(u,v,w);\n    }\n    int l=0,r=0x3f3f3f3f,mid,ans=0;\n    while(l<=r){\n        mid=(l+r)>>1;\n        if(chck(mid)){\n            l=mid+1;\n            ans=mid;\n        }else{\n            r=mid-1;\n        }\n    }\n    printf(\"%d\\n\",ans);\n}\nint main(){\n    init();\n    return 0;\n}\n```",
        "postTime": 1542277907,
        "uid": 97512,
        "name": "Smokey_Days",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "\u7b80\u5355\u7406\u7406\u8003\u573a\u7684\u601d\u8def\uff1a\n\n\u9996\u5148\u6700\u5927\u8fb9\u6700\u5c0f\u503c\u80af\u5b9a\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u5c31\u662fsolve\u7684\u95ee\u9898\n\n~~\u53e6\u5916m=1\u5c31\u662f\u76f4\u5f84emm...~~\n\n\u4ee5\u4e0b\u8d2a\u5fc3\u8bc1\u4e0d\u51fa\u5747\u53ef\u4ee5\u611f\u6027\u7406\u89e3\n\n\u94fe\u72b6\u5f88\u597d\u60f3\u626b\u8fc7\u53bb\u8d2a\u5fc3\u5c31\u597d\uff0c\u5f88\u597d\u8bc1\uff0c\u7565\n\n\u83ca\u82b1\u56fe\uff0c\u663e\u7136\u5927\u4e8e\u4e8c\u5206\u503c\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389\uff0c\u7136\u540e\u6bcf\u6b21\u62ff\u51fa\u6700\u5c0f\u8fb9\u627e\u4e00\u6761\u6ee1\u8db3\u548c\u4ed6\u548c\u5927\u4e8e\u4e8c\u5206\u503c\u7684\u8fb9\u4e00\u8d77\u62ff\u8d70,\u8fd9\u6837\u663e\u7136\u662f\u6700\u7701\u7684\n\n\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u5f80\u4e0a\u4f20\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u5f53\u524d\u7684\u4e24\u6761\u8fb9\u6709\u5927\u4e8e\u4e8c\u5206\u503c\u5c31\u62ff\u8d70\uff0c\u7136\u540e\u9009\u5269\u4e0b\u7684\u5927\u503c\u5f80\u4e0a\u4f20\uff0c\u55ef\u5f88\u8d2a\n\n\u628a\u83ca\u82b1\u56fe\u548c\u4e8c\u53c9\u6811\u62fc\u4e00\u4e0b\uff0c\u6211\u4eec\u7ed9\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e2amultiset,\u628a\u8fb9\u7684\u503c\u5f80\u4e0a\u4f20\u5c31\u597d\u4e86\n\n\u590d\u6742\u5ea6$O(nlog^nlog^{nl/m})$\n\n\u7531\u4e8e\u6ca1\u6709\u628a\u4e8c\u5206\u8fb9\u754c\u9664m\u81ea\u6d4bT\u4e00\u4e2a\u70b9\u5fc3\u6001\u7206\u70b8\n\n\u8003\u540e\u4ee3\u7801\n```cpp\n#include <set>\n#include <cstdio>\ntypedef std::multiset<int>::iterator ITR;\nconst int maxn = 51234;\nstruct edge{ int v, val, nxt;\n}e[maxn<<1]; int fir[maxn], num(1);\ninline void add(int u, int v, int val){\n    e[++num].v = v; e[num].val = val;\n    e[num].nxt = fir[u]; fir[u] = num;\n}\nstd::multiset<int> st[maxn];\nint du[maxn], q[maxn], leafs;\nint fa[maxn], fval[maxn];\nvoid getfa(int now, int fr){\n    for(int itr(fir[now]); itr; itr = e[itr].nxt){\n        if(e[itr].v == fr) continue;\n        getfa(e[itr].v, now);\n        fa[e[itr].v] = now;\n        fval[e[itr].v] = e[itr].val;\n    }\n}//\u5f97\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\nint n, m;\ninline void init(){ \n    getfa(1, -1); ++du[1];\n    for(int i(1); i <= n; ++i){\n        if(du[i] == 1) q[++leafs] = i;\n    }\n    int l(1), r(leafs), now;\n    while(l <= r){\n        now = q[l++]; --du[fa[now]];\n        if(du[fa[now]] == 1) q[++r] = fa[now];\n    }\n}//\u5f97\u5230topo\u5e8f,\u6309\u7167topo\u5e8f\u5904\u7406\ninline int solve(int mid){\n    int ret(0);\n    for(int i(1); i <= n; ++i){\n        int now = q[i], to = fa[now], fv = fval[now], Max(0);\n        while(st[now].size()){\n            ITR itr = st[now].begin(); \n            int val = *itr; st[now].erase(itr);\n            itr = st[now].lower_bound(mid-val);//\u627e\u7b2c\u4e00\u4e2a\u6bd4mid-val\u5927\u7684\n            if(itr == st[now].end()){\n                Max = val; continue;\n            }//\u4e0d\u5b58\u5728\u5c31\u66f4\u65b0\u4e3a\u6700\u5927\u503c\n            ++ret; st[now].erase(itr);\n        }\n        if(Max + fv >= mid) ++ret;//\u5982\u679c\u5f80\u4e0a\u8d70\u6bd4mid\u5927\u76f4\u63a5\u8ba1\u5165\u7b54\u6848\n        else st[to].insert(Max + fv);//\u4e0d\u7136\u5f80\u4e0a\u63a8\n    }\n    return ret;\n}//\u4e8c\u5206\u7b54\u6848solve\nint main(){\n    scanf(\"%d%d\", &n, &m);\n    int l(1), r(0), ans(1);\n    for(int i(1), u, v, val; i < n; ++i){\n        scanf(\"%d%d%d\", &u, &v, &val);\n        add(u, v, val); add(v, u, val);\n        ++du[u]; ++du[v]; r += val;\n    }\n    r = r / m + 1;\n    init();\n    while(l <= r){\n        int mid((l + r) >> 1);\n        if(solve(mid) >= m){\n            l = mid + 1; ans = mid;\n        }\n        else{\n            r = mid - 1;\n        }\n    }//\u4e8c\u5206\u7b54\u6848\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1542114097,
        "uid": 32576,
        "name": "ygsldr",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    },
    {
        "content": "### Describe:\n\u6709 $n$ \u4e2a\u70b9\u7684\u4e00\u68f5\u65e0\u6839\u6811\uff0c\u73b0\u5728\u4ece\u8fd9\u68f5\u65e0\u6839\u6811\u4e2d\u9009\u51fa $m$ \u6761\u8def\u5f84\uff0c\u4e14\u6bcf\u6761\u8fb9\u6700\u591a\u5c5e\u4e8e**\u4e00\u6761\u8def\u5f84**\uff0c\u6c42**\u6700\u77ed\u8def\u5f84**\u6700\u957f\u662f\u591a\u5c11\uff1f\n### Solution:\n\u9996\u5148\u770b\u5b50\u4efb\u52a1\u3002\n##### 1. $a_i = 1$ \u7684\u60c5\u51b5\n\u7531**\u83ca\u82b1\u56fe**\u53ef\u77e5\uff0c\u4e00\u6761\u8def\u5f84\u6700\u591a\u5305\u542b\u4e24\u6761\u8fb9\uff0c\u6240\u4ee5\u5148\u628a\u8fb9\u6743 $l$ \u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u4ece $l_i + l_{2m-i+1}$ \u4e2d\u9009\u62e9\u6700\u5927\u503c\u5373\u53ef\u3002\n##### 2. $b_i = a_i + 1$ \u7684\u60c5\u51b5\n\u90a3\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u5c06**\u4e00\u6761\u94fe\u5206\u6210 $m$ \u6bb5**\uff0c\u65f6\u6700\u5c0f\u548c\u6700\u5927\u3002\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\u89e3\u51b3\u3002\n\u6bcf\u6b21\u4e8c\u5206\u6700\u5c0f\u957f\u5ea6 $top$\uff0c\u5c06\u94fe\u4ece\u7b2c $1$ \u6761\u8fb9\u5f00\u59cb\u7d2f\u52a0\uff0c\u5f53\u7d2f\u52a0\u7684\u548c $s$ \u5927\u4e8e $top$ \u65f6\uff0c\u5c31\u5c06 $s$ \u6e05\u96f6\uff0c\u5e76\u4e14\u4f7f $na$++\uff0c\u6700\u540e\u8fd4\u56de $na \\geq m$ \u5373\u53ef\u3002\n##### 3. $m = 1$ \u7684\u60c5\u51b5\n\u5f53 $m = 1$ \u65f6\uff0c\u5c31\u662f\u8981\u5728\u6811\u5185\u627e\u4e00\u6761\u8def\u5f84\u4f7f\u5176\u6700\u957f\uff0c\u90a3\u5c31\u662f\u5728\u627e**\u6811\u7684\u76f4\u5f84**\uff0c\u4e24\u6b21 DFS \uff0c\u7b2c\u4e00\u6b21\u627e\u5230\u8ddd\u79bb\u6839\u8282\u70b9\u6700\u8fdc\u7684\u70b9 $P_1$\uff0c\u7b2c\u4e8c\u6b21\u627e\u8ddd\u79bb $P_1$ \u6700\u8fdc\u7684\u70b9 $P_2$\uff0c\u6700\u540e\u8f93\u51fa $P_1$ \u4e0e $P_2$ \u7684\u8ddd\u79bb\u5373\u53ef\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u80fd\u6c34\u5230 $55$ \u5206\n```cpp\n// P5021 \u8d5b\u9053\u4fee\u5efa\n#include <algorithm>\n#include <cstdio>\n#include <iostream>\n#define MN 50005\n#define getMid(l, r) ((l + r) >> 1)\nusing namespace std;\ninline int read() {\n  int x = 0, f = 1;\n  char ch = getchar();\n  while (ch < '0' || ch > '9') {\n    if (ch == '-') f = -1;\n    ch = getchar();\n  }\n  while (ch >= '0' && ch <= '9')\n    x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n  return x * f;\n}\nstruct edge {\n  int to, l, nxt;\n} edges[MN * 2];\ninline bool cmp1(edge e1, edge e2) { return e1.l > e2.l; }\ninline bool cmp2(int i1, int i2) { return i1 > i2; }\nint n, m, cnt, head[MN], depth[MN];  // \u56fe\u4e2d\u7684\u57fa\u672c\u4fe1\u606f\nint MaxM;                            // \u4e8c\u5206\u8f85\u52a9\nint mdn, md;                         // \u6811\u7684\u76f4\u5f84\u8f85\u52a9\nint a[MN];                           // \u83ca\u82b1\u56fe\u8f85\u52a9\u6570\u7ec4\nbool isJ = true;                     // \u662f\u5426\u662f\u83ca\u82b1\u56fe\nint ans;                             // \u7b54\u6848\n// \u52a0\u8fb9\ninline void addEdge(int x, int y, int l) {\n  cnt++, edges[cnt] = edge{y, l, head[x]}, head[x] = cnt;\n  cnt++, edges[cnt] = edge{x, l, head[y]}, head[y] = cnt;\n}\n// \u5904\u7406\u6df1\u5ea6\nvoid dfsDepth(int now, int pre, int d, int len) {\n  if (len > md) md = len, mdn = now;\n  depth[now] = d;\n  for (int i = head[now]; i; i = edges[i].nxt)\n    if (edges[i].to != pre) dfsDepth(edges[i].to, now, d + 1, len + edges[i].l);\n}\n// \u5904\u7406\u94fe\ninline bool check1(int top) {\n  int s = 0, j = 0;\n  // \u8d2a\u5fc3\u9009\u62e9\n  for (int i = 1; i < n; i++) {\n    s += (edges[head[i]].to == i + 1) ? edges[head[i]].l\n                                      : edges[edges[head[i]].nxt].l;\n    if (s >= top) s = 0, j++;\n  }\n  return j >= m;\n}\nint main() {\n  int x, y, len;\n  n = read(), m = read();\n  for (int i = 1; i < n; i++)\n    x = read(), y = read(), len = read(), MaxM += len, addEdge(x, y, len),\n    isJ &= (x == 1);\n  dfsDepth(1, 1, 1, 0);\n  // \u83ca\u82b1\u56fe\u7684\u60c5\u51b5\n  if (isJ) {\n    for (int i = head[1]; i; i = edges[i].nxt) a[edges[i].to - 1] = edges[i].l;\n    sort(a + 1, a + n, cmp2), ans = 0x3f3f3f3f;\n    for (int i = 1; i <= m; i++) ans = min(ans, a[i] + a[2 * m - i + 1]);\n  }\n  // m=1\u6c42\u6811\u7684\u76f4\u5f84\u7684\u60c5\u51b5\n  else if (m == 1)\n    dfsDepth(mdn, mdn, 1, 0), ans = md;\n  // \u94fe\u7684\u60c5\u51b5\n  else if (depth[n] == n) {\n    // \u4e8c\u5206\n    int l = 1, r = MaxM / m, mid;\n    while (l <= r) {\n      mid = getMid(l, r);\n      if (check1(mid))\n        l = mid + 1, ans = mid;\n      else\n        r = mid - 1;\n    }\n  }\n  printf(\"%d\", ans);\n  return 0;\n}\n```\n---\n\u5728\u6c34\u5230 $55$ \u5206\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u6b63\u89e3\u8fdb\u519b\u4e86\u3002\n\u9996\u5148\u6c42\u6700xx\u6700\u4e0dxx\u8fd9\u7c7b\u9898\u4e00\u822c\u90fd\u662f\u7528\u4e8c\u5206\u7b54\u6848\u89e3\u51b3\u7684\u3002\u90a3\u4e48\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#define getMid(l, r) ((l + r) >> 1)\nint l = 1, r = MaxM / m, mid;\nwhile (l <= r) {\n  mid = getMid(l, r);\n  if (check2(mid))\n    l = mid + 1, ans = mid;\n  else\n    r = mid - 1;\n  }\n}\n```\n\u90a3\u4e48\u6211\u4eec\u7684\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u4e86\u5982\u4f55\u786e\u5b9a\u5728\u8def\u5f84\u6700\u77ed\u662f $mid$ \u7684\u60c5\u51b5\u4e0b\u6700\u591a\u80fd\u6709\u51e0\u6761\u8def\u5f84\u3002\n\u9996\u5148\u662f\u80fd\u5728\u8fd9\u68f5\u5b50\u6811\u4e2d\u5408\u6210\u4e86\u7684\uff0c\u5c31**\u5c3d\u91cf\u5408\u6210**\u3002\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\u56e0\u4e3a\u4e00\u6761\u8fb9\u6700\u591a\u5bf9\u4e00\u6761\u8def\u5f84\u4ea7\u751f\u8d21\u732e\uff0c\u5982\u679c\u5728\u8fd9\u68f5\u5b50\u6811 $T$ \u5185\u5fc5\u987b\u9700\u8981\u8fd9\u4e00\u6761\u8fb9 $e$ \u5408\u6210\u4e00\u6761\u8def\u5f84\uff0c\u4f46\u662f\u5374\u5bfc\u81f4 $T$ \u7684\u7236\u8282\u70b9\u7684\u53e6\u4e00\u6761\u8def\u5f84\u4e0d\u80fd\u5408\u6210\uff0c\u90a3\u4e48\u80fd\u4f7f\u7b54\u6848\u52a0\u4e00\uff0c\u5982\u679c\u5c06\u8fd9\u6761\u8fb9\u4f20\u7ed9\u7236\u8282\u70b9\uff0c\u90a3\u4e48\u4e5f\u53ea\u80fd\u4f7f\u7b54\u6848\u52a0\u4e00\uff0c\u8fd9\u6837\u7684\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u8bf4\u56e0\u4e3a\u5728 $T$ \u5185\u5408\u6210\u5904\u7406\u66f4\u52a0\u7684\u65b9\u4fbf\uff0c\u5c31\u8ba9\u4ed6\u4eec\u5c3d\u529b\u5408\u6210\u3002\n\u53ef\u4ee5\u5199\u51fa $80$ \u5206\u4ee3\u7801\uff08\u4f7f\u7528\u4e86 $multiset$ \u53ef\u91cd\u96c6\u7ef4\u62a4\u4e86\u6700\u5927\u6700\u5c0f\u503c\uff09\n```cpp\nint na, t;\nint dfs(int now, int pre, int len) {\n  multiset<int> ms;\n  int count = 0, nc;\n  multiset<int>::iterator it;\n  for (int i = head[now]; i; i = edges[i].nxt)\n    if (edges[i].to != pre)\n      ms.insert(dfs(edges[i].to, now, edges[i].l)), count++;\n  if (!count) return len;\n  while (!ms.empty()) {\n    it = ms.end(), it--, nc = *it, ms.erase(it);\n    if (nc >= t) {\n      na++;\n      continue;\n    }\n    if ((it = ms.lower_bound(t - nc)) != ms.end())\n      na++, ms.erase(it);\n    else\n      return nc + len;\n  }\n  return len;\n}\ninline bool check2(int top) {\n  na = 0, t = top, dfs(1, 1, 0);\n  return na >= m;\n}\n```\n\u4e3a\u4ec0\u4e48\u4f1a $80$ \u5206\u5462\uff1f\n\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u603b\u9009\u62e9\u6700\u5927\u7684\u8fb9\u5408\u6210\uff0c\u4f46\u662f\u6709\u7684\u65f6\u5019\u662f\u4e0d\u9700\u8981\u6700\u5927\u7684\u8fb9\uff0c\u6b21\u5927\u7684\u8fb9\u4e5f\u80fd\u5408\u6210\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5728\u4fdd\u8bc1\u80fd\u5408\u6210\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u6bcf\u6b21\u5408\u6210\u540e\u7684\u8fb9\u957f**\u5c3d\u53ef\u80fd\u7684\u63a5\u8fd1 $mid$**\u3002\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u4e24\u6b21 $lower\\_bound()$ \u5bfb\u627e\u8fd9\u4e24\u6761\u8fb9\n```cpp\nint na, t;\nint dfs(int now, int pre, int len) {\n  multiset<int> ms;\n  int count = 0, nc;\n  multiset<int>::iterator it, it2, it3;\n  for (int i = head[now]; i; i = edges[i].nxt)\n    if (edges[i].to != pre)\n      ms.insert(dfs(edges[i].to, now, edges[i].l)), count++;\n  if (!count) return len;\n  while (!ms.empty()) {\n    if (na >= m) return 0;\n    it = ms.end(), it--, nc = *it;\n    if (nc >= t) {\n      na++, ms.erase(it);\n      continue;\n    }\n    if ((it2 = ms.lower_bound(t - nc)) != ms.end() && it2 != it) {\n      if ((it3 = ms.lower_bound(t - *it2)) != it && it3 != it2)\n        na++, ms.erase(it2), ms.erase(it3);\n      else if (it3 == it2 && (++it3) != it)\n        na++, ms.erase(it2), ms.erase(it3);\n      else\n        na++, ms.erase(it2), ms.erase(it);\n\n    } else\n      return nc + len;\n  }\n  return len;\n}\ninline bool check2(int top) {\n  na = 0, t = top, dfs(1, 1, 0);\n  return na >= m;\n}\n```\n\u81f3\u6b64\uff0c\u6b63\u89e3\u5df2\u7ecf\u8bb2\u5b8c\u4e86\uff0ccheck()\u51fd\u6570\u7684\u590d\u6742\u5ea6\u5927\u6982\u662f $O(n \\log n)$\u3002\n### Code:\n```cpp\n// P5021 \u8d5b\u9053\u4fee\u5efa\n#include <algorithm>\n#include <cstdio>\n#include <iostream>\n#include <set>\n#define MN 50005\n#define getMid(l, r) ((l + r) >> 1)\nusing namespace std;\ninline int read() {\n  int x = 0, f = 1;\n  char ch = getchar();\n  while (ch < '0' || ch > '9') {\n    if (ch == '-') f = -1;\n    ch = getchar();\n  }\n  while (ch >= '0' && ch <= '9')\n    x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n  return x * f;\n}\nstruct edge {\n  int to, l, nxt;\n} edges[MN * 2];\ninline bool cmp1(edge e1, edge e2) { return e1.l > e2.l; }\ninline bool cmp2(int i1, int i2) { return i1 > i2; }\nint n, m, cnt, head[MN];  // \u56fe\u4e2d\u7684\u57fa\u672c\u4fe1\u606f\nint ans;                  // \u7b54\u6848\nint mdn, md;              // \u6811\u7684\u76f4\u5f84\nint a[MN], isJ = 1;       // \u83ca\u82b1\u56fe\nint MaxM, depth[MN];      // \u94fe\n// \u52a0\u8fb9\ninline void addEdge(int x, int y, int l) {\n  cnt++, edges[cnt] = edge{y, l, head[x]}, head[x] = cnt;\n  cnt++, edges[cnt] = edge{x, l, head[y]}, head[y] = cnt;\n}\n// \u5904\u7406\u6df1\u5ea6\nvoid dfsDepth(int now, int pre, int d, int len) {\n  if (len > md) md = len, mdn = now;\n  depth[now] = d;\n  for (int i = head[now]; i; i = edges[i].nxt)\n    if (edges[i].to != pre) dfsDepth(edges[i].to, now, d + 1, len + edges[i].l);\n}\n// \u5904\u7406\u94fe\ninline bool check1(int top) {\n  int s = 0, j = 0;\n  // \u8d2a\u5fc3\u9009\u62e9\n  for (int i = 1; i < n; i++) {\n    s += (edges[head[i]].to == i + 1) ? edges[head[i]].l\n                                      : edges[edges[head[i]].nxt].l;\n    if (s >= top) s = 0, j++;\n  }\n  return j >= m;\n}\n// \u5904\u7406\u4e00\u822c\u60c5\u51b5\nint na, t;\nint dfs(int now, int pre, int len) {\n  multiset<int> ms;\n  int count = 0, nc;\n  multiset<int>::iterator it, it2, it3;\n  for (int i = head[now]; i; i = edges[i].nxt)\n    if (edges[i].to != pre)\n      ms.insert(dfs(edges[i].to, now, edges[i].l)), count++;\n  if (!count) return len;\n  while (!ms.empty()) {\n    if (na >= m) return 0;\n    it = ms.end(), it--, nc = *it;\n    if (nc >= t) {\n      na++, ms.erase(it);\n      continue;\n    }\n    if ((it2 = ms.lower_bound(t - nc)) != ms.end() && it2 != it) {\n      if ((it3 = ms.lower_bound(t - *it2)) != it && it3 != it2)\n        na++, ms.erase(it2), ms.erase(it3);\n      else if (it3 == it2 && (++it3) != it)\n        na++, ms.erase(it2), ms.erase(it3);\n      else\n        na++, ms.erase(it2), ms.erase(it);\n\n    } else\n      return nc + len;\n  }\n  return len;\n}\ninline bool check2(int top) {\n  na = 0, t = top, dfs(1, 1, 0);\n  return na >= m;\n}\nint main() {\n  int x, y, len;\n  n = read(), m = read();\n  for (int i = 1; i < n; i++)\n    x = read(), y = read(), len = read(), MaxM += len, addEdge(x, y, len),\n    isJ &= (x == 1);\n  dfsDepth(1, 1, 1, 0);\n  // \u83ca\u82b1\u56fe\u7684\u60c5\u51b5\n  if (isJ) {\n    for (int i = head[1]; i; i = edges[i].nxt) a[edges[i].to - 1] = edges[i].l;\n    sort(a + 1, a + n, cmp2), ans = 0x3f3f3f3f;\n    for (int i = 1; i <= m; i++) ans = min(ans, a[i] + a[2 * m - i + 1]);\n  }\n  // m=1\u6c42\u6811\u7684\u76f4\u5f84\u7684\u60c5\u51b5\n  else if (m == 1)\n    dfsDepth(mdn, mdn, 1, 0), ans = md;\n  // \u94fe\u7684\u60c5\u51b5\n  else if (depth[n] == n) {\n    // \u4e8c\u5206\n    int l = 1, r = MaxM / m, mid;\n    while (l <= r) {\n      mid = getMid(l, r);\n      if (check1(mid))\n        l = mid + 1, ans = mid;\n      else\n        r = mid - 1;\n    }\n  } else {\n    // \u4e00\u822c\u60c5\u51b5\uff0c\u6811\u5f62dp\n    int l = 1, r = MaxM / m, mid;\n    while (l <= r) {\n      mid = getMid(l, r);\n      if (check2(mid))\n        l = mid + 1, ans = mid;\n      else\n        r = mid - 1;\n    }\n  }\n  printf(\"%d\", ans);\n  return 0;\n}\n```",
        "postTime": 1586411839,
        "uid": 289573,
        "name": "wtxy2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5021 \u3010\u8d5b\u9053\u4fee\u5efa\u3011"
    }
]