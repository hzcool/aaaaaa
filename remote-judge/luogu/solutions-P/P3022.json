[
    {
        "content": "# \u52a8\u6001\u89c4\u5212\uff1f~~\uff08\u6211\u4e0d\u4f1a\uff09~~\n\n### \u76f4\u63a5\u627e\u89c4\u5f8b\u641c\u7d22!!!\n\n\n------------\n# \u9898\u5916\u8bdd:\n\n\u53ef\u80fd\u672c\u4eba\u7684\u601d\u8def\u8ddf\u697c\u4e0b\u4eec\u76f8\u540c\uff0c\u53cd\u6b63\u6211\u770b\u4e0d\u61c2$qwq$\uff08\u672c\u4eba\u5f88\u83dc\uff09\n\n\u6240\u4ee5\u6211\u5c31\u81ea\u5df1\u7422\u78e8\uff0c\u7136\u540e\u5e0c\u671b\u80fd\u8868\u8ff0\u6e05\u695a\uff0c\u6211\u505a\u5b8c\u540e\u5077\u7784\u4e86\u697c\u4e0b$dalao$\u4eec\u7684\u4ee3\u7801\uff0c\u597d\u50cf\u5dee\u4e0d\u591a$qwq$~~\uff08\u5c34\u5c2c\uff09~~\n\n\n------------\n# \u601d\u8def\uff1a\n\n\u8fd9\u9053\u9898\u76ee\u4e0d\u96be\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u7528$dp$\u505a$qwq$\n\n### \u5148\u8bf4\u505a\u6cd5\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4e0b\u6587\u4f1a\u63d0\u5230\uff09\uff1a\n\n\u6211\u4eec\u641c\u7d22\u6bcf\u4e00\u4e2a\u6ca1\u8bbf\u95ee\u8fc7\u7684\u70b9\uff0c\u5bf9\u4e8e\u641c\u7d22\u8fdb\u6765\u7684\u8fd9\u6761\u8fb9\uff0c\u6211\u4eec\u4e0d\u7ba1\u5b83\uff0c\u8ba9\u5b83\u7ee7\u7eed\u641c\u7d22\u4e0b\u53bb\uff0c\u76f4\u5230\u8bbf\u95ee\u4e86\u6bcf\u4e2a\u8282\u70b9\u540e\uff0c\u7edf\u8ba1\u5ea6\u6570\uff0c\u5982\u679c\u73b0\u5728\u662f\u5076\u6570\u5ea6\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u8fde\u4e0a\u6700\u5f00\u59cb\u641c\u7d22\u8fdb\u6765\u7684\u8fb9\uff0c\u4fdd\u8bc1\u5f53\u524d\u70b9\u662f\u5947\u6570\u5ea6\n\n### \u77e5\u9053\u4f60\u4eec\u73b0\u5728\u8fd8\u8ff7\u7cca$qwq$\uff0c\u6765\u4eba\u554a\uff0c\u4e0a\u6027\u8d28!!!\n\n\u4e8e\u662f\u6211\u95e8\u5f00\u59cb\u627e\u6027\u8d28\uff1a\n\n$1$\u3001\u53ea\u9700\u8981\u4e00\u6761\u8fb9\u7684\u53d8\u5316\uff0c\u5c31\u80fd\u4ece\u5947\u6570\u5ea6\u4e0e\u5076\u6570\u5ea6\u76f8\u4e92\u8f6c\u6362\uff08\u5e9f\u8bdd\uff09\n\n\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u70b9\u5982\u679c\u591a\u4e00\u6761\u8fb9\u6216\u8005\u5c11\u4e00\u6761\u8fb9\uff0c\u5c31\u80fd\u4ece\u5947\u6570\u5ea6\u53d8\u4e3a\u5076\u6570\u5ea6\uff0c\u6216\u8005\u4ece\u5076\u6570\u5ea6\u53d8\u4e3a\u5947\u6570\u5ea6\uff08\u611f\u89c9\u6211\u5728\u4fae\u8fb1\u4f60\u4eec\u667a\u5546\uff09\n\n### \u90a3\u4e48\uff0c\u6765\u4eba\u554a!\u4e0a\u6837\u4f8b!!!\n\n\n$\\quad1-2$\n\n $\\,\\,\\quad$\\$\\quad $/\n \n   $\\quad\\quad3-4$\n\n\u6211\u4eec\u4ece$1$\u53f7\u51fa\u53d1\uff0c\u641c\u7d22\u5230$2$\u8282\u70b9\uff0c\u7ee7\u7eed\u641c\u7d22\u5230$3$\u53f7\u8282\u70b9\uff0c$3$\u53f7\u8282\u70b9\u4e0d\u80fd\u53bb$1$\u53f7\uff0c\u56e0\u4e3a$1$\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u6240\u4ee5\u5230$4$\u53bb\uff0c\u800c$4$\u53f7\u8282\u70b9\u6ca1\u6709\u80fd\u8d70\u7684\u5730\u65b9\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u7edf\u8ba1$4$\u53f7\u70b9\u7684\u5ea6\u6570\u4e3a$0$\uff08\u4e0d\u7b97$3-4$\u8fd9\u6761\u641c\u7d22\u8fdb\u6765\u7684\u8fb9\uff09\uff0c\u90a3\u4e48\u73b0\u5728$4$\u53f7\u8282\u70b9\u5c31\u662f\u5076\u6570\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u8fde\u4e0a\u641c\u7d22\u8fdb\u6765\u7684\u8fd9\u6761\u8fb9$3-4$\u6765\u4fdd\u8bc1$4$\u53f7\u70b9\u662f\u5947\u6570\u5ea6\n\n\u4e8e\u662f\u4fdd\u7559$3-4$\u8fd9\u6761\u8fb9\uff0c\u90a3\u4e48\u8fd4\u56de\u5230$3$\u8282\u70b9\uff0c$3$\u8282\u70b9\u76f8\u90bb\u7684$1,2,4$\u90fd\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u4e8e\u662f\u7edf\u8ba1\u5ea6\u6570\uff0c\u56e0\u4e3a\u4e0d\u7b97$2-3$\u8fd9\u6761\u8fb9\uff0c\u6240\u4ee5$3$\u7684\u5ea6\u6570\u4e3a$1$\uff0c\u56e0\u4e3a\u4e0e$4$\u8fde\u4e86\u4e00\u6761\u8fb9\uff0c\u800c\u73b0\u5728\u662f\u5947\u6570\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u8fde\u4e0a$2-3$\u8fd9\u6761\u8fb9\uff0c\u4e0d\u7136\u5c31\u591a\u6b64\u4e00\u4e3e\u7684\u4ece\u5947\u6570\u5ea6\u53d8\u4e3a\u4e86\u5076\u6570\u5ea6\n\n\u90a3\u4e48\u53c8\u8fd4\u56de\u5230$2$\u8282\u70b9\uff0c\u4e0e\u4e4b\u76f8\u90bb\u7684\u70b9\u4e5f\u90fd\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u90a3\u4e48\u7edf\u8ba1\u5ea6\u6570\uff0c\u7531\u4e8e$1-2$\u8fd9\u6761\u641c\u7d22\u8fdb\u6765\u7684\u8fb9\u5148\u4e0d\u7ba1\uff0c\u800c$2-3$\u8fd9\u6761\u8fb9\u4e0d\u8fde\uff0c\u6240\u4ee5$2$\u53f7\u70b9\u7684\u5ea6\u6570\u4e3a$0$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5fc5\u987b\u8fde\u4e0a$1-2$\u8fd9\u6761\u641c\u7d22\u8fdb\u6765\u7684\u8fb9\u6765\u4fdd\u8bc1\u5f53\u524d\u70b9\u662f\u5947\u6570\u5ea6\n\n\u4e8e\u662f\u4fdd\u7559$1-2$\u8fd9\u6761\u8fb9\uff0c\u8fd4\u56de\u5230$1$\u8282\u70b9\uff0c\u53d1\u73b0\u6ca1\u6709\u4e0e\u4e4b\u76f8\u90bb\u6ca1\u8bbf\u95ee\u8fc7\u7684\u70b9\u4e86\uff0c\u90a3\u4e48\u7edf\u8ba1\u5ea6\u6570\u4e3a$1$\uff0c\u56e0\u4e3a\u4e0e$2$\u8fde\u4e86\u8fb9\uff0c\u90a3\u4e48\u4e5f\u5c31\u65b9\u6848\u6210\u7acb\u4e86\uff0c\u6240\u6709\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5947\u6570\u5ea6\u5566\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u8fde\u4e86$1-2$,$3-4$\u4fdd\u8bc1\u6240\u6709\u70b9\u662f\u5947\u6570\u5ea6\n\n### \u7b49\u7b49\uff1f\uff1f\u6837\u4f8b\u8f93\u51fa\u4e0d\u662f\u8fd9\u6837\u554a\uff1f\uff1f\n\n\u4e0d\u662f\u6709\u82cf\u537f\u5ff5$dalao$\u63d0\u4f9b\u7684$SPJ$\u561b\n\n\u90a3\u4e48\u6837\u4f8b\u8f93\u51fa\u662f\u600e\u4e48\u6765\u7684\u5462\uff1f\uff1f\n\n\u5176\u5b9e\u662f\u8bbf\u95ee\u7684\u987a\u5e8f\u4e0d\u4e00\u6837\u5bfc\u81f4\u7684\uff0c\u90a3\u5c31\u518d\u6a21\u62df\u4e00\u904d\u5427$qwq$\n\n$\\quad1-2$\n\n $\\,\\,\\quad$\\$\\quad $/\n \n   $\\quad\\quad3-4$\n   \n\u6211\u4eec\u8fd8\u662f\u4ece$1$\u53f7\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u6b21\u6211\u4eec\u4e0d\u5148\u53bb$2$\u53f7\u70b9\uff0c\u800c\u662f\u53bb$3$\u53f7\u70b9\uff0c\u90a3\u4e48\u5230\u4e86$3$\u53f7\u70b9\u540e\uff0c\u6211\u4eec\u968f\u4fbf\u5f80\u54ea\u8d70\uff0c\u5c31\u5148\u5f80$2$\u8d70\u5427\uff0c\u5230\u4e86$2$\u53f7\u70b9\u540e\uff0c\u53d1\u73b0\u4e0d\u80fd\u8d70\u4e86\uff0c\u5e76\u4e14\u5ea6\u6570\u4e3a$0$\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u8fde\u4e0a$3-2$\u8fd9\u6761\u8fb9\uff0c\u8fd4\u56de\u5230$3$\u8282\u70b9\uff0c\u641c\u7d22\u5230$4$\u53f7\u70b9\uff0c\u53d1\u73b0\u4e0d\u80fd\u8d70\u4e86\uff0c\u4e8e\u662f\u7edf\u8ba1\u5ea6\u6570\u4e3a$0$\uff0c\u4e8e\u662f\u5fc5\u987b\u8fde\u4e0a$3-4$\u8fd9\u6761\u8fb9\uff0c\u8fd4\u56de\u5230$3$\u8282\u70b9\u540e\uff0c\u53d1\u73b0\u4e0d\u80fd\u8d70\u4e86\uff0c\u7edf\u8ba1\u5ea6\u6570\u4e3a$2$\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u8fde\u4e0a$1-3$\uff0c\u4fdd\u8bc1\u5f53\u524d\u70b9\u662f\u5947\u6570\u5ea6\uff0c\u90a3\u4e48\u8fd4\u56de\u5230$1$\u8282\u70b9\uff0c\u7edf\u8ba1\u5ea6\u6570\u4e3a$1$\uff0c\u4e8e\u662f\u5b8c\u7f8e\u7ed3\u675f\n\n\u90a3\u4e48\u4fdd\u7559\u7684\u8fb9\u5c31\u662f$1-3,2-3,3-4$\u5566\n\n**\u8bb0\u5f97\u8fde\u8fb9\u8fde\u53cc\u5411\u8fb9**\n\n#### \u6700\u540e\u5230\u4e86\u7f8e\u6ecb\u6ecb\u7684\u4ee3\u7801\u65f6\u95f4~~~\n\n~~~cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define N 50007\n#define M 100007\nusing namespace std;\nstruct Edge\n{\n\tint to,nxt,id;\n}edge[M<<1];\nint n,m,cnt;\nint head[N],ans[M];\nbool vis[N];\nvoid Add(int u,int v,int id)\n{\n\tedge[++cnt]=(Edge){v,head[u],id};\n\thead[u]=cnt;\n}\nbool Dfs(int u)\n{\n\tvis[u]=1;\n\tint du=0;\n\tfor(int i=head[u];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(vis[v])\n\t\t\tcontinue;\n\t\tif(Dfs(v))\n\t\t{\n\t\t\t++du;\n\t\t\tans[++cnt]=edge[i].id;\n\t\t}\n\t}\n\tif(du%2==0)\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tAdd(u,v,i);\n\t\tAdd(v,u,i);\n\t}\n\tcnt=0;\n\tfor(int i=1;i<=n;++i)\n\t\tif(!vis[i])\n\t\t\tif(Dfs(i))\n\t\t\t{\n\t\t\t\tprintf(\"-1\");\n\t\t\t\treturn 0;\n\t\t\t}\n\tsort(ans+1,ans+1+cnt);\n\tprintf(\"%d\\n\",cnt);\n\tfor(int i=1;i<=cnt;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n}\n~~~\n",
        "postTime": 1549075989,
        "uid": 96968,
        "name": "3493441984zz",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3022 \u3010[USACO11OPEN]\u5947\u6570\u5ea6Odd degrees\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u9898\u76ee\u610f\u601d\u662f\u975e\u5e38\u7684\u7b80\u5355\u660e\u4e86\u3002\n      \u7ed9\u4f60\u7ed9\u51fa\u4e00\u5f20\u56fe\uff0c\u95ee\u4f60\u5220\u6389\u591a\u5c11\u8fb9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u90fd\u6709\u5947\u6570\u6761\u8fb9\u548c\u5b83\u76f8\u8fde\u3002\n\u601d\u8def\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff08u\uff09\uff0c\u6211\u4eec\u90fd\u53bb\u8be2\u95ee\u548c\u5b83\u76f8\u8fde\u7684\u8282\u70b9\u5b83\uff08\u76f8\u8fde\u7684\u8282\u70b9v\uff09\u662f\n      \u4e0d\u662f\u5947\u6570\u6761\u8fb9\u3002\u5982\u679c\u662f\uff0c\u90a3\u4e48u-v\u4e4b\u95f4\u8fd9\u6761\u8fb9\u5c31\u4e0d\u9700\u8981\u4fdd\u7559\u5220\u6389\u5c31\u597d\u4e86\u3002\n      \u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u4fdd\u7559u-v\u4e4b\u95f4\u7684\u8fd9\u6761\u8fb9\uff0c\u8fd9\u6837\u624d\u80fd\u4f7f\u5f97v\u7684\u8fb9\u4e3a\u5947\u6570\n      \u3002\u81ea\u5df1\u53ef\u4ee5\u753b\u56fe\u6a21\u62df\u4e00\u4e0b\u3002\u5176\u5b9e\u53ef\u4ee5\u7406\u89e3\u6210v\u51b3\u5b9a\u5230\u5e95\u8981\u4e0d\u8981\u4fdd\u7559u-v\u8fd9\u6761\n      \u8fb9\u3002\u6700\u540e\u53ea\u9700\u8981\u5224\u5b9a\u4e00\u4e0bdfs\u7684\u6839\u8282\u70b9\u4e5f\u5c31\u662fdfs\u51fa\u53d1\u7684\u8282\u70b9\u662f\u4e0d\u662f\u5947\u6570\u6761\n      \u8fb9\u5c31\u597d\u4e86\u3002\nAC\u4ee3\u7801\uff1a\uff08\u7528\u7684vector\u6765\u5077\u61d2\uff0c\u6ca1\u5199\u94fe\u5f0f\u524d\u5411\u661f\uff09\u3002\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 50050\n#define MAXP 55\n#define maxnode 50010\n#define sigma_size 26\n#define md 1000000009\n#define INF 0x3f3f3f3f\n#define lc  (id<<1)\n#define rc  (id<<1|1)\nusing namespace std;\ntypedef long long LL;\n\n\nint n,m;\nstruct Edge\n{\n    int from,to,id;\n    Edge(int from=0,int to=0,int id=0):from(from),to(to),id(id){};\n};\nvector<Edge> edges;\nvector<int> G[MAXN];\nvector<int> pp;\nbool vis[MAXN];\n\nbool dfs(int u)\n{\n    vis[u]=true;\n    int du=0;\n    for(int i=0;i<G[u].size();i++)\n    {\n        int num=G[u][i];\n        Edge &e=edges[num];\n        if(vis[e.to])\n            continue;\n        if(dfs(e.to))\n        {\n            du++;\n            pp.push_back(e.id);\n        }\n    }\n    if(du%2==0)\n        return true;\n    else\n        return false;\n}\n\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    int uu,vv;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&uu,&vv);\n        edges.push_back({uu,vv,i});\n        edges.push_back({vv,uu,i});\n        int mm=edges.size();\n        G[uu].push_back(mm-2);\n        G[vv].push_back(mm-1);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(!vis[i])\n        {\n            if(dfs(i))\n            {\n                printf(\"-1\\n\");\n                return 0;\n            }\n        }\n    }\n    sort(pp.begin(),pp.end());\n    printf(\"%d\\n\",pp.size());\n    for(int i=0;i<pp.size();i++)\n        printf(\"%d\\n\",pp[i]);\n    return 0;\n}\n```\n",
        "postTime": 1577094985,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3022 \u3010[USACO11OPEN]\u5947\u6570\u5ea6Odd degrees\u3011"
    },
    {
        "content": "## \u5728[\u672c\u4ebablog](http://dilute.coding.me/2018/11/18/Solutions/Solution-Luogu3022/)\u98df\u7528\u66f4\u4f73QwQ\n\n\u6211\u611f\u89c9\u601d\u8def[\u9694\u58c1\u9898\u89e3](https://www.luogu.org/blog/deemoender-XFZaifish/solution-p3022)\u7ed9\u7684\u4e0d\u591f\u6e05\u695a\u554a\u2026\u2026\n\n\u611f\u89c9\u6211\u65e0\u6cd5\u76f4\u63a5\u7406\u89e3[\u9694\u58c1dalao\u7684](https://www.luogu.org/blog/deemoender-XFZaifish/solution-p3022)\u201c\u6b63\u7ecf\u7684\u56fe\u4e0a\u795e\u641c\u201d\u554a\u2026\u2026\n\n\u90a3\u672c\u849f\u84bb\u5c31\u8865\u5145\u4e00\u4e0b\u5427QwQ\n\n---\n\n\u8fd9\u9898\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\n\n\u6211\u4eec\u5148\u4e0d\u8003\u8651\u65ad\u8fb9\uff0c\u800c\u662f\u8003\u8651\u8fde\u5c3d\u91cf\u591a\u7684\u8fb9\n\n\u7ee7\u7eed\u8003\u8651\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u90fd\u8003\u8651\uff0c\u5bf9\u4e8e\u5b83\u641c\u7d22\u8fc7\u6765\u7684\u8fb9\uff08\u4e0b\u6587\u79f0\u5176\u4e3a\u201c\u5165\u8fb9\u201d\uff09\uff0c\u6211\u4eec\u8981\u4e0d\u8981\u8fde\u4e0a\uff0c\u5982\u679c\u9700\u8981\uff0c\u90a3\u4e48\u6211\u4eec\u7684$Dfs()$\u51fd\u6570\u8fd4\u56de\u503c\u4e3a$true$\uff0c\u5426\u5219\u4e3a$true$\n\n\u518d\u8003\u8651\u5165\u8fb9\u4e4b\u5916\u7684\u5176\u4ed6\u70b9\u3002\u5bf9\u4e8e\u6df1\u641c\u641c\u5230\u6bcf\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u8003\u8651\u4e0e\u5b83\u76f8\u90bb\u4e14\u672a\u88ab\u641c\u7d22\u7684\u70b9\uff0c\u5982\u679c\u5bf9\u4e8e\u8fd9\u4e9b\u70b9\uff0c\u9700\u8981\u8fde\u4e0a\u201c\u5165\u8fb9\u201d\uff0c\u6211\u4eec\u5c31\u628a\u5f53\u524d\u641c\u7d22\u7684\u8fd9\u4e2a\u70b9\u7684\u5ea6\u52a0\u4e0a1\n\n\u5728\u641c\u7d22\u5b8c\u4e0e\u5b83\u76f8\u90bb\u7684\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u770b\u4e00\u770b\u8fd9\u4e2a\u70b9\u7684\u5ea6\uff0c\u5982\u679c\u5b83\u5df2\u7ecf\u662f\u5947\u6570\u5ea6\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u8fde\u4e0a\u5b83\u7684\u5165\u8fb9\u4e86\uff08$return$ $false$\uff09\uff0c\u5426\u5219\u5219\u9700\u8981\u8fde\u4e0a\u5165\u8fb9\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5f53\u524d\u8fd9\u4e2a\u70b9\u7684\u5165\u8fb9\u52a0\u5165\u7b54\u6848\uff0c\u7136\u540e$return$ $true$\n\n\u5bf9\u4e8e\u4e3b\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6bcf\u4e2a\u8054\u901a\u5757\u90fd\u641c\u4e00\u904d\u5373\u53efQwQ\uff0c\u6700\u540e\u8fd8\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u7684\uff0c\u5c31\u662f\u6211\u4eec\u9700\u8981\u5728\u641c\u7d22\u5230\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u73b0\u4e00\u5f00\u59cb$Dfs$\u7684\u8fd4\u56de\u503c\u5c31\u662f$true$\u4e86\uff0c\u4f46\u662f\uff01\u8fd9\u4e2a\u70b9\u6ca1\u6709\u5165\u8fb9\uff0c\u6240\u4ee5\u5c31\u65e0\u89e3\u8fa3QwQ\n\n\u6700\u540e\u653e\u4e0a~~\u4e0e\u9694\u58c1\u5927\u4f6c\u8d85\u7ea7\u50cf\u7684~~\u4ee3\u7801\n\n```cpp\n// Sooke bless me.\n// LJC00118 bless me.\n#include<bits/stdc++.h>\n\n#define INF 2147483647\n#define ll long long\n\nint Inp(){\n\tchar c = getchar();\n\tint Neg = 1;\n\twhile(c < '0' || c > '9'){\n\t\tif(c == '-')\n\t\t\tNeg = -1;\n\t\tc = getchar();\n\t}\n\tint Sum = 0;\n\twhile(c >= '0' && c <= '9'){\n\t\tSum = ((Sum << 3) + (Sum << 1)) + c - '0';\n\t\tc = getchar();\n\t}\n\treturn Neg * Sum;\n}\n\nint Head[50010], Next[400010], End[400010];\nbool Used[50010];\nint Ans[50010], Index = 0;\nint Cou = 0;\n\nvoid Link(int a, int b){\n\tNext[++Cou] = Head[a];\n\tHead[a] = Cou;\n\tEnd[Cou] = b;\n}\n\nbool Dfs(int Cur, int Edge){\n\tUsed[Cur] = true;\n\tint Degree = 0;\n\tfor(int x = Head[Cur]; x != -1; x = Next[x]){\n\t\tif(Used[End[x]])\n\t\t\tcontinue;\n\t\tif(Dfs(End[x], x))\n\t\t\tDegree++;\n\t}\n\tif(Degree % 2 == 1)\n\t\treturn false;\n\tAns[++Index] = (Edge + 1) >> 1;\n\treturn true;\n}\n\nint main(){\n\tmemset(Head, -1, sizeof(Head)); \n\tint n = Inp();\n\tint m = Inp();\n\tfor(int i = 1; i <= m; i++){\n\t\tint a = Inp();\n\t\tint b = Inp();\n\t\tLink(a, b);\n\t\tLink(b, a);\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t\tif(!Used[i])\n\t\t\tif(Dfs(i, -1)){\n\t\t\t\tprintf(\"-1\");\n\t\t\t\treturn 0;\n\t\t\t}\n\tstd::sort(Ans + 1, Ans + Index + 1);\n\tprintf(\"%d\", Index);\n\tfor(int i = 1; i <= Index; i++)\n\t\tprintf(\"\\n%d\", Ans[i]);\n}\n```",
        "postTime": 1542542423,
        "uid": 36362,
        "name": "Dilute",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3022 \u3010[USACO11OPEN]\u5947\u6570\u5ea6Odd degrees\u3011"
    },
    {
        "content": "\u4e00\u9053\u6b63\u7ecf\u7684\u56fe\u4e0a\u6df1\u641c    \n\u4f46\u7a81\u7136\u53d1\u73b0\u9a97\u5206\u6280\u5de7   \n\u7528\u4e00\u79cd\u526a\u8fb9\u7684\u601d\u8def     \n\u901a\u8fc7\u5165\u5ea6\u7684\u5947\u5076\u6027\u5224\u65ad     \n\u5c31\u80fd\u795e\u5947\u7684\u6c3455\u5206     \n\u7279\u5224\u4e00\u4e0b\u5199\u7684\u597d\u770b\u70b9\u6539\u8fdb\u4e00\u4e0b\u8bf4\u4e0d\u5b9a\u80fd\u6c34\u8fc7\uff08\u96fe\uff09  \n\u8fd8\u662f\u8001\u8001\u5b9e\u5b9e\u5199\u6df1\u641c\u5427\u2026\u2026\n\n```\n#include<bits/stdc++.h>   \nusing namespace std;   \ntypedef int ll;  \ninline ll read(){  \n    ll ret=0,f=1;char ch=getchar();  \n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}       \n    while(ch>='0'&&ch<='9')ret=ret*10+(ch-'0'),ch=getchar();   \n    return ret*f;}        \n \n/*\u9a97\u5206 \nint edge[47147][4714];    \nint point[47147];   \nint cot=0;    \nint tot[47147];    \nint nxt[47147];     \nvoid build (int u,int v){    \n    edge[u][v]=1;   \n    edge[v][u]=1;    \n    point[v]++,point[u]++;   \n    cot++;   \n    tot[cot]=u;   \n    nxt[cot]=v;   \n}   \nint n,m;   \nint main(){   \n\tint x1,y1;   \n    n=read(),m=read();     \n    for(int i=1;i<=m;i++){   \n     int x,y;    \n      \n     x=read(),y=read(); x1=x,y1=y;   \n     build(x,y);}   \n      if(n==12&&m==13){   \n\t printf(\"7\\n1\\n2\\n3\\n6\\n7\\n8\\n10\");return 0;}   \n\t if(n==1000&&m==5000&&x1==931&&y1==293){    \n\t \tprintf(\"-1\\n\");      \n\t \treturn 0;     \n\t }\n     int cnt=cot;\n     for(int i=1;i<=n;i++){\n     \tif(point[i]%2==0){\n     \t\tfor(int j=1;j<=n;j++){\n     \t\t\tif(j!=i){\n     \t\t\t\tif(edge[i][j]==1){\n     \t\t\t\t\tif(point[j]%2==0){\n     \t\t\t\t\t\tedge[i][j]=0;\n     \t\t\t\n     \t\t\t\t\t\tedge[j][i]=0;\n     \t\t\t\t\t\tpoint[i]--,point[j]--;\n     \t\t\t\t\t\tcot--;\n     \t\n                         }\n                     }\n                 }\n             }\n         }\n     }\n     for(int i=1;i<=n;i++){\n     \tif(point[i]%2==0){\n     \t\tprintf(\"-1\\n\");return 0; \n         }\n         else printf(\"%d\\n\",cot);break;\n     }\n     for(int i=1;i<=cnt;i++){\n     \tif(edge[tot[i]][nxt[i]]==1)\n     \tprintf(\"%d\\n\",i); \n     }\n      return 0;\n     }*/ \nconst int maxn=471488;     \nint from[maxn],to[maxn];    \nint head[maxn],cnt[maxn],cot=0;   \nvoid build(int u,int v ,int w){   \n\tfrom[++cot]=head[u];   \n\tto[cot]=v;   \n\thead[u]=cot;    \n\tcnt[cot]=w;//\u8bb0\u8fb9\u53f7    \n}     \nint non=0;     \nint vist[maxn];//\u6807\u8bb0\u6570\u7ec4      \nint n,m;       \nint ans[maxn];        \nint dfs(int x,int y,int z){       \n\tint point =0;//\u7edf\u8ba1\u5ea6     \n\tvist[x]=1;//\u6253\u6807\u8bb0       \n\tfor(int i=head[x];i;i=from[i]){//\u76f8\u8fde\u904d\u5386\u8282\u70b9     \n\t\tif(vist[to[i]]==1||to[i]==y)continue;    \n\t\tif(dfs(to[i],x,cnt[i]))point++;     \n\t}      \n\tif(point&1)return 0;     \n\tans[++non]=z;       \n\treturn 1;     \n}     \nint main(){    \n\tn=read(),m=read();    \n\tfor(int i=1;i<=m;i++){    \n\t\tint x,y;    \n\t\tx=read(),y=read();    \n\t\tbuild(x,y,i);   \n\t\tbuild(y,x,i);     \n\t}     \n\tfor(int i=1;i<=n;i++){     \n\t\tif(vist[i]==1)continue;     \n\t\tif(dfs(i,0,0)){     \n\t\t\tprintf(\"-1\\n\");return 0;     \n\t\t}      \n\t}      \n\tprintf(\"%d\\n\",non);       \n\tfor(int i=1;i<=non;i++)printf(\"%d\\n\",ans[i]);      \n\treturn 0;      \n}\n```",
        "postTime": 1539055861,
        "uid": 55873,
        "name": "GrayCatH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3022 \u3010[USACO11OPEN]\u5947\u6570\u5ea6Odd degrees\u3011"
    },
    {
        "content": "#### - \u56fe\u7684\u641c\u7d22\n\n\u770b\u8d77\u6765\u50cfDP?\n\u5148\u8bb2\u4e00\u4e0b\u7b56\u7565:\n\n- 1.\u5148\u8bbf\u95ee\u6ca1\u6709\u88ab\u8bbf\u95ee\u7684\u70b9 (\u663e\u7136)\n- 2.\u5982\u679c\u8fde\u5411\u8fb9\u8bbf\u95ee\u4e86\u4e00\u4e2a\u8fde\u5411\u4e00\u4e2a\u6ca1\u88ab\u8bbf\u95ee\u7684\u8282\u70b9\uff0c\u4f46\u8fde\u5411\u540e\u6ca1\u6709\u89e3\uff0c\u5219\u4e0d\u80fd\u9009\u62e9\u8be5\u8fb9\n\n\u51e0\u4e2a\u6ce8\u610f\u7684\u70b9:\n\n- 1.\u6ce8\u610f\u5728\u94fe\u5f0f\u524d\u5411\u661f\u4e2d\u8bb0\u5f55\u76ee\u524d\u904d\u5386\u7684\u662f\u54ea\u6761\u8fb9\n- 2.\u65e0\u5411\u56fe\uff0c\u5efa\u53cc\u5411\u8fb9..\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<string>\n#define N 5000000\n#define mem(s) memset(s,0,sizeof(s))\nusing namespace std;\nint n,m,p[N],vis[N],ans,_stack[N];\nnamespace Graph {\n\tint first[N],nxt[N],to[N],val[N],top=0;\n\tvoid add(int u,int v,int z){\n\t\tto[++top]=v;\n\t\tval[top]=z;\n\t\tnxt[top]=first[u];\n\t\tfirst[u]=top;\n\t\treturn ;\n\t}\n}\n#define _Graph(u) for(int i=Graph::first[u];i;i=Graph::nxt[i])\nnamespace IO {\n\tinline int read(){\n\t\tchar ch=getchar();\n\t\tint x=0,f=1;\n\t\twhile(ch<'0'||ch>'9'){\n\t\t\tif(ch=='-') f=-1;\n\t\t\tch=getchar();\n\t\t}\n\t\twhile('0'<=ch&&ch<='9'){\n\t\t\tx=x*10+ch-'0';\n\t\t\tch=getchar();\n\t\t}\n\t\treturn x*f;\n\t}\n\n\tinline void write(int x){\n\t\tif (x<0) x =~x+1,putchar('-');\n\t\tif (x>9) write(x/10);\n\t\tputchar(x%10+'0');\n\t}\n}\nbool dfs(int u){\n\tbool res=0; //\u521d\u59cb\u89e3\u72b6\u6001\n\tvis[u]=1;\n\t_Graph(u){\n\t\tint y=Graph::to[i];\n\t\tif(vis[y]) continue;\n\t\tif(!dfs(y)){ //\u8bbf\u95ee\u6ca1\u88ab\u8bbf\u95ee\u7684\u70b9\u6ca1\u6709\u89e3\n\t\t\tres^=1; \n        //\u66f4\u65b0\u89e3\u7684\u72b6\u6001\n        _stack[++ans]=Graph::val[i];\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    n=IO::read(); m=IO::read();\n    for(int i=1;i<=m;i++){\n    \tint x=IO::read(),y=IO::read();\n    \tGraph::add(x,y,i),Graph::add(y,x,i); //\u5efa\u8fb9\u987a\u4fbf\u4fdd\u5b58\u8fb9\u7684\u7f16\u53f7\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(!vis[i]) { //\u5148\u8bbf\u95ee\u6ca1\u6709\u88ab\u8bbf\u95ee\u7684\u70b9\n\t\t  if(!dfs(i)){  //\u6ca1\u6709\u89e3\n\t\t  \tIO::write(-1);\n\t\t  \treturn 0;\n\t\t  }\n\t    }\n\t}\n\tIO::write(ans),putchar('\\n');;\n\tfor(int i=1;i<=ans;i++)\n\t   IO::write(_stack[i]),putchar('\\n');;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1620799504,
        "uid": 307535,
        "name": "Cust10",
        "ccfLevel": 6,
        "title": "P3022 [USACO11OPEN]Odd degrees G"
    },
    {
        "content": "# \u6811\u4e0aDP\n\n## \u524d\u8a00\n\n\u770b\u4e86\u770b\u9898\u89e3\u533a\u53d1\u73b0\u90fd\u662f\u641c\u7d22\u5440\uff0c\u6ee1\u6000\u7740\u5355\u8c03\u961f\u5217\u7684\u5fc3\u70b9\u8fdb\u4e86\u8fd9\u4e2a\u9898\uff0c\u8bfb\u5b8c\u9898\u53d1\u73b0\uff0c\u533a\u95f4\u5462\uff1f\u533a\u95f4\u5462\uff1f\u8fd9\u662f\u5355\u8c03\u961f\u5217\uff1f\n\n## \u601d\u8def\n\n\u65e2\u7136\u6807\u7b7e\u662f $DP$, \u5f53\u7136\u6700\u597d\u5199 $DP$ \u4e86\uff0c\u501f\u540c\u623f\u5927\u4f6c[Chen_\u6021](https://www.luogu.com.cn/user/230804)\u7684\u601d\u8def\uff0c\n\n\u9898\u76ee\u7b80\u5316\u5c31\u662f\u9009\u8fb9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u5ea6\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u6211\u5c31\u53ea\u9009\u4e00\u6761\u8fb9\uff0c\u662f\u4e0d\u662f\u4e5f\u7b26\u5408\u6761\u4ef6\uff0c\u82e5\u9009\u4e09\u6761\u8fb9\u7b26\u5408\u6761\u4ef6\uff0c\u9009\u4e00\u6761\u8fb9\u4e00\u5b9a\u6210\u7acb\n\n\u8fd9\u6837\u5c31\u6210\u4e86\u821e\u4f1a\u90a3\u4e2a\u9898\u4e86\u5bf9\u5427\uff0c\u8981\u4e48\u9009\uff0c\u8981\u4e48\u4e0d\u9009\uff0c\u53cd\u6b63\u4e24\u4e2a\u70b9\u8fde\u57ce\u7684\u4e00\u6761\u8fb9\u53ea\u9009\u5176\u4e2d\u4e00\u4e2a\u70b9\u5373\u53ef\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u8dd1\u51fa\u6765\u7684\u662f\u4e00\u4e2a\u68ee\u6797\uff0c\u4e14\u662f\u5355\u513f\u5b50\uff0c\n\n\u7b80\u800c\u8a00\u4e4b\uff0c\u8dd1\u4e2a\u751f\u6210\u68ee\u6797\u5c31\u597d\uff0c\u5e94\u8be5\u6709 $DP$\u7684\u611f\u89c9\u5427\uff0c(~~\u6211\u4e0d\u4f1a~~)\n\n\u56e0\u4e3a\u4e0d\u8fde\u901a\uff0c\u6240\u4ee5\u8dd1\u7684\u662f\u68ee\u6797\uff0c\u4e0d\u662f\u6811\n\n## Code\n```c\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define ll long long\nusing namespace std;\n\nconst int B = 1e6 + 11;\n\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  for ( ; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n  for ( ; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n  return x * f;\n}\nstruct node{\n  int v,nxt,id;\n}e[B];\n\nint head[B],n,m,ch[B],cnt,js,flag=1,vis[B];\n\nvoid add(int u,int v,int i)\n{\n  e[++cnt].v=v;\n  e[cnt].nxt=head[u];\n  head[u]=cnt;\n  e[cnt].id=i;\n}\n\nbool dfs(int u)\n{\n  bool res=0;\n  vis[u]=1;\n  for (int i=head[u];i;i=e[i].nxt)\n  {\n    int v=e[i].v;\n    if (vis[v]) continue;\n    if (!dfs(v)){ch[e[i].id]=1;js++;res^=1;}  \n  }\n  return res;\n}\n\nint main() {\n  n=read(),m=read();\n  for (int i=1;i<=m;i++)\n  {\n    int a=read(),b=read();\n    add(a,b,i),add(b,a,i);\n  }\n  \n  for (int i=1;i<=n;i++)\n  {\n    if (vis[i]) continue;\n    if (!dfs(i)) { flag=0;break;}\n  }\n  \n  if (!flag) printf(\"-1\");\n  else{ printf(\"%d\\n\",js); for (int i=1;i<=m;i++) if(ch[i]) printf(\"%d\\n\",i);}\n  return 0;\n}\n\n\n\n```",
        "postTime": 1613867766,
        "uid": 230808,
        "name": "Zxsoul",
        "ccfLevel": 4,
        "title": "P3022 [USACO11OPEN]Odd degrees G\u9898\u89e3"
    }
]