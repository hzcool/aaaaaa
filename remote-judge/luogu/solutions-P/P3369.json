[
    {
        "content": "\u5e73\u8861\u6811\u7684\u677f\u9898\uff0c\u7528Treap\u5b9e\u73b0\u3002\n\n\u5177\u4f53\u53c2\u89c1\u6ce8\u91ca\uff0c\u5199\u7684\u5f88\u8be6\u7ec6\u4e86\uff0c\u5305\u62ec\u4e86\u539f\u7406\uff0c\u5b9e\u73b0\u4ee5\u53ca\u6ce8\u610f\u4e8b\u9879\n\n~~\u849f\u84bb\u5199\u4e2a\u6ce8\u91ca\u677f\u5b50\u5199\u4e86\u4e24\u5929\uff0c\u592a\u5f31\u4e86QAQ~~\n\n\u611f\u8c22[niiick](https://www.luogu.org/space/show?uid=60885)\u6307\u5bfc\n\n# Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#include<climits>\ntypedef long long LL;\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\n//\u7b2c\u4e00\u6b21\u6253treap\uff0c\u4e0d\u538b\u884c\u5199\u6ce8\u91caXD\nconst int maxn = 1000019,INF = 1e9;\n//\u5e73\u8861\u6811\uff0c\u5229\u7528BST\u6027\u8d28\u67e5\u8be2\u548c\u4fee\u6539\uff0c\u5229\u7528\u968f\u673a\u548c\u5806\u4f18\u5148\u7ea7\u6765\u4fdd\u6301\u5e73\u8861\uff0c\u628a\u6811\u7684\u6df1\u5ea6\u63a7\u5236\u5728log N\uff0c\u4fdd\u8bc1\u4e86\u64cd\u4f5c\u6548\u7387\n//\u57fa\u672c\u5e73\u8861\u6811\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u51fd\u6570\uff1a\u65b0\u5efa\uff0c\u63d2\u5165\uff0c\u5220\u9664\uff0c\u65cb\u8f6c\n//\u8282\u70b9\u7684\u57fa\u672c\u5c5e\u6027\u6709val(\u503c)\uff0cdat(\u968f\u673a\u51fa\u6765\u7684\u4f18\u5148\u7ea7)\n//\u901a\u8fc7\u589e\u52a0\u5c5e\u6027\uff0c\u7ed3\u5408BST\u7684\u6027\u8d28\u53ef\u4ee5\u8fbe\u5230\u4e00\u4e9b\u6548\u679c\uff0c\u5982size(\u5b50\u6811\u5927\u5c0f\uff0c\u67e5\u8be2\u6392\u540d)\uff0ccnt(\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u7684\u526f\u672c\u6570)\u7b49\nint na;\nint ch[maxn][2];//[i][0]\u4ee3\u8868i\u5de6\u513f\u5b50\uff0c[i][1]\u4ee3\u8868i\u53f3\u513f\u5b50\nint val[maxn],dat[maxn];\nint size[maxn],cnt[maxn];\nint tot,root;\nint New(int v){//\u65b0\u589e\u8282\u70b9\uff0c\n\tval[++tot] = v;//\u8282\u70b9\u8d4b\u503c\n\tdat[tot] = rand();//\u968f\u673a\u4f18\u5148\u7ea7\n\tsize[tot] = 1;//\u76ee\u524d\u662f\u65b0\u5efa\u53f6\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u5b50\u6811\u5927\u5c0f\u4e3a1\n\tcnt[tot] = 1;//\u65b0\u5efa\u8282\u70b9\u540c\u7406\u526f\u672c\u6570\u4e3a1\n\treturn tot;\n\t}\nvoid pushup(int id){//\u548c\u7ebf\u6bb5\u6811\u7684pushup\u66f4\u65b0\u4e00\u6837\n\tsize[id] = size[ch[id][0]] + size[ch[id][1]] + cnt[id];//\u672c\u8282\u70b9\u5b50\u6811\u5927\u5c0f = \u5de6\u513f\u5b50\u5b50\u6811\u5927\u5c0f + \u53f3\u513f\u5b50\u5b50\u6811\u5927\u5c0f + \u672c\u8282\u70b9\u526f\u672c\u6570\n\t}\nvoid build(){\n\troot = New(-INF),ch[root][1] = New(INF);//\u5148\u52a0\u5165\u6b63\u65e0\u7a77\u548c\u8d1f\u65e0\u7a77\uff0c\u4fbf\u4e8e\u4e4b\u540e\u64cd\u4f5c(\u8c8c\u4f3c\u4e0d\u52a0\u4e5f\u884c)\n\tpushup(root);//\u56e0\u4e3aINF > -INF,\u6240\u4ee5\u662f\u53f3\u5b50\u6811\uff0c\n\t}\nvoid Rotate(int &id,int d){//id\u662f\u5f15\u7528\u4f20\u9012\uff0cd(irection)\u4e3a\u65cb\u8f6c\u65b9\u5411\uff0c0\u4e3a\u5de6\u65cb\uff0c1\u4e3a\u53f3\u65cb\n\tint temp = ch[id][d ^ 1];//\u65cb\u8f6c\u7406\u89e3\uff1a\u627e\u4e2a\u52a8\u56fe\u770b\u4e00\u770b\u5c31\u597d(\u6216\u53c2\u89c1\u5176\u4ed6OIer\u7684blog)\n\tch[id][d ^ 1] = ch[temp][d];//\u8fd9\u91cc\u8bb2\u4e00\u4e2a\u8bb0\u5fc6\u6280\u5de7\uff0c\u8fd9\u4e9b\u6570\u636e\u90fd\u662f\u88ab\u8bb0\u5f55\u540e\u9a6c\u4e0a\u4fee\u6539\n\tch[temp][d] = id;//\u6240\u4ee5\u50cf\u201cZ\u201d\u4e00\u6837\n\tid = temp;//\u6bd4\u5982\u8fd9\u4e2aid\uff0c\u5728\u4e0a\u4e00\u884c\u624d\u88ab\u8bb0\u5f55\u8fc7\uff0cch[temp][d]\u3001ch[id][d ^ 1]\u4e5f\u662f\u4e00\u6837\u7684\n\tpushup(ch[id][d]),pushup(id);//\u65cb\u8f6c\u4ee5\u540esize\u4f1a\u6539\u53d8\uff0c\u770b\u56fe\u5c31\u4f1a\u53d1\u73b0\u53ea\u66f4\u65b0\u81ea\u5df1\u548c\u8f6c\u4e0a\u6765\u7684\u70b9\uff0cpushup\u4e00\u4e0b,\u6ce8\u610f\u5148\u5b50\u8282\u70b9\u518d\u7236\u8282\u70b9\n\t}//\u65cb\u8f6c\u5b9e\u8d28\u662f({\u5728\u6ee1\u8db3BST\u7684\u6027\u8d28\u7684\u57fa\u7840\u4e0a\u6bd4\u8f83\u4f18\u5148\u7ea7}\u901a\u8fc7\u4ea4\u6362\u672c\u8282\u70b9\u548c\u5176\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9)\u628a\u94fe\u53c9\u5f00\u6210\u4e8c\u53c9\u5f62\u72b6(\u4ece\u800c\u63a7\u5236\u6df1\u5ea6)\uff0c\u53ef\u4ee5\u770b\u56fe\u7406\u89e3\u4e00\u4e0b\nvoid insert(int &id,int v){//id\u4f9d\u7136\u662f\u5f15\u7528\uff0c\u5728\u65b0\u5efa\u8282\u70b9\u65f6\u53ef\u4ee5\u4f53\u73b0\n\tif(!id){\n\t\tid = New(v);//\u82e5\u8282\u70b9\u4e3a\u7a7a\uff0c\u5219\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\n\t\treturn ;\n\t\t}\n\tif(v == val[id])cnt[id]++;//\u82e5\u8282\u70b9\u5df2\u5b58\u5728\uff0c\u5219\u526f\u672c\u6570++;\n\telse{//\u8981\u6ee1\u8db3BST\u6027\u8d28\uff0c\u5c0f\u4e8e\u63d2\u5230\u5de6\u8fb9\uff0c\u5927\u4e8e\u63d2\u5230\u53f3\u8fb9\n\t\tint d = v < val[id] ? 0 : 1;//\u8fd9\u4e2ad\u662f\u65b9\u5411\u7684\u610f\u601d\uff0c\u6309\u7167BST\u7684\u6027\u8d28\uff0c\u5c0f\u4e8e\u672c\u8282\u70b9\u5219\u5411\u5de6\uff0c\u5927\u4e8e\u5411\u53f3\n\t\tinsert(ch[id][d],v);//\u9012\u5f52\u5b9e\u73b0\n\t\tif(dat[id] < dat[ch[id][d]])Rotate(id,d ^ 1);//(\u53c2\u8003\u4e00\u4e0b\u56fe)\u4e0e\u5de6\u8282\u70b9\u4ea4\u6362\u53f3\u65cb\uff0c\u4e0e\u53f3\u8282\u70b9\u4ea4\u6362\u5de6\u65cb\n\t\t}\n\tpushup(id);//\u73b0\u5728\u66f4\u65b0\u4e00\u4e0b\u672c\u8282\u70b9\u7684\u4fe1\u606f\n\t}\nvoid Remove(int &id,int v){//\u6700\u96bede\u90e8\u5206\u4e86\n\tif(!id)return ;//\u5230\u8fd9\u4e86\u53d1\u73b0\u67e5\u4e0d\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u8be5\u70b9\u4e0d\u5b58\u5728\uff0c\u76f4\u63a5\u8fd4\u56de\n\tif(v == val[id]){//\u68c0\u7d22\u5230\u4e86\u8fd9\u4e2a\u503c\n\t\tif(cnt[id] > 1){cnt[id]--,pushup(id);return ;}//\u82e5\u526f\u672c\u4e0d\u6b62\u4e00\u4e2a\uff0c\u51cf\u53bb\u4e00\u4e2a\u5c31\u597d\n\t\tif(ch[id][0] || ch[id][1]){//\u53d1\u73b0\u53ea\u6709\u4e00\u4e2a\u503c\uff0c\u4e14\u6709\u513f\u5b50\u8282\u70b9,\u6211\u4eec\u53ea\u80fd\u628a\u503c\u65cb\u8f6c\u5230\u5e95\u90e8\u5220\u9664\n\t\t\tif(!ch[id][1] || dat[ch[id][0]] > dat[ch[id][1]]){//\u5f53\u524d\u70b9\u88ab\u79fb\u8d70\u4e4b\u540e\uff0c\u4f1a\u6709\u4e00\u4e2a\u65b0\u7684\u70b9\u8865\u4e0a\u6765(\u5de6\u513f\u5b50\u6216\u53f3\u513f\u5b50)\uff0c\u6309\u7167\u4f18\u5148\u7ea7\uff0c\u4f18\u5148\u7ea7\u5927\u7684\u8865\u4e0a\u6765\n\t\t\t\tRotate(id,1),Remove(ch[id][1],v);//\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u53f3\u65cb\u662f\u4e0e\u5de6\u513f\u5b50\u4ea4\u6362\uff0c\u5f53\u524d\u70b9\u53d8\u6210\u53f3\u8282\u70b9\uff1b\u5de6\u65cb\u5219\u662f\u4e0e\u53f3\u513f\u5b50\u4ea4\u6362\uff0c\u5f53\u524d\u70b9\u53d8\u4e3a\u5de6\u8282\u70b9\n\t\t\t\t}\n\t\t\telse Rotate(id,0),Remove(ch[id][0],v);\n\t\t\tpushup(id);\n\t\t\t}\n\t\telse id = 0;//\u53d1\u73b0\u672c\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u76f4\u63a5\u5220\u9664\n\t\treturn ;//\u8fd9\u4e2areturn\u5bf9\u5e94\u7684\u662f\u68c0\u7d22\u5230\u503cde\u6240\u6709\u60c5\u51b5\n\t\t}\n\tv < val[id] ? Remove(ch[id][0],v) : Remove(ch[id][1],v);//\u7ee7\u7eedBST\u6027\u8d28\n\tpushup(id);\n\t}\nint get_rank(int id,int v){\n\tif(!id)return 0;//\u82e5\u67e5\u8be2\u503c\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\uff1b\u56e0\u4e3a\u6700\u540e\u8981\u51cf\u4e00\u6392\u9664\u54e8\u5175\u8282\u70b9\uff0c\u60f3\u8981\u7ed3\u679c\u4e3a-1\u8fd9\u91cc\u5c31\u8fd4\u56de0\n\tif(v == val[id])return size[ch[id][0]] + 1;//\u67e5\u8be2\u5230\u8be5\u503c\uff0c\u7531BST\u6027\u8d28\u53ef\u77e5\uff1a\u8be5\u70b9\u5de6\u8fb9\u503c\u90fd\u6bd4\u8be5\u70b9\u7684\u503c(\u67e5\u8be2\u503c)\u5c0f\uff0c\u6545rank\u4e3a\u5de6\u513f\u5b50\u5927\u5c0f + 1\n\telse if(v < val[id])return get_rank(ch[id][0],v);//\u53d1\u73b0\u9700\u67e5\u8be2\u7684\u70b9\u5728\u8be5\u70b9\u5de6\u8fb9\uff0c\u5f80\u5de6\u8fb9\u9012\u5f52\u67e5\u8be2\n\telse return size[ch[id][0]] + cnt[id] + get_rank(ch[id][1],v);//\u82e5\u67e5\u8be2\u503c\u5927\u4e8e\u8be5\u70b9\u503c\u3002\u8bf4\u660e\u8be2\u95ee\u70b9\u5728\u5f53\u524d\u70b9\u7684\u53f3\u4fa7\uff0c\u4e14\u6b64\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u67e5\u8be2\u503c\uff0c\u6240\u4ee5\u8981\u52a0\u4e0acnt[id]\n\t}\nint get_val(int id,int rank){\n\tif(!id)return INF;//\u4e00\u76f4\u5411\u53f3\u627e\u627e\u4e0d\u5230\uff0c\u8bf4\u660e\u662f\u6b63\u65e0\u7a77\n\tif(rank <= size[ch[id][0]])return get_val(ch[id][0],rank);//\u5de6\u8fb9\u6392\u540d\u5df2\u7ecf\u5927\u4e8erank\u4e86\uff0c\u8bf4\u660erank\u5bf9\u5e94\u7684\u503c\u5728\u5de6\u513f\u5b50\u90a3\u91cc\n\t\telse if(rank <= size[ch[id][0]] + cnt[id])return val[id];//\u4e0a\u4e00\u6b65\u6392\u9664\u4e86\u5728\u5de6\u533a\u95f4\u7684\u60c5\u51b5\uff0c\u82e5\u662frank\u5728\u5de6\u4e0e\u4e2d(\u76ee\u524d\u8282\u70b9)\u4e2d\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u76ee\u524d\u8282\u70b9(\u4e2d\u533a\u95f4)\u7684\u503c\n\telse return get_val(ch[id][1],rank - size[ch[id][0]] - cnt[id]);//\u5269\u4e0b\u53ea\u80fd\u5728\u53f3\u533a\u95f4\u627e\u4e86\uff0crank\u51cf\u53bb\u5de6\u533a\u95f4\u5927\u5c0f\u548c\u4e2d\u533a\u95f4\uff0c\u7ee7\u7eed\u9012\u5f52\n\t}\nint get_pre(int v){\n\tint id = root,pre;//\u9012\u5f52\u4e0d\u597d\u8fd4\u56de\uff0c\u4ee5\u5faa\u73af\u6c42\u89e3\n\twhile(id){//\u67e5\u5230\u8282\u70b9\u4e0d\u5b58\u5728\u4e3a\u6b62\n\t\tif(val[id] < v)pre = val[id],id = ch[id][1];//\u6ee1\u8db3\u5f53\u524d\u8282\u70b9\u6bd4\u76ee\u6807\u5c0f\uff0c\u5f80\u5f53\u524d\u8282\u70b9\u7684\u53f3\u4fa7\u5bfb\u627e\u6700\u4f18\u503c\n\t\telse id = ch[id][0];//\u65e0\u8bba\u662f\u6bd4\u76ee\u6807\u8282\u70b9\u5927\u8fd8\u662f\u7b49\u4e8e\u76ee\u6807\u8282\u70b9\uff0c\u90fd\u4e0d\u6ee1\u8db3\u524d\u9a71\u6761\u4ef6\uff0c\u5e94\u5f80\u66f4\u5c0f\u5904\u9760\u8fd1\n\t\t}\n\treturn pre;\n\t}\nint get_next(int v){\n\tint id = root,next;\n\twhile(id){\n\t\tif(val[id] > v)next = val[id],id = ch[id][0];//\u540c\u7406\uff0c\u6ee1\u8db3\u6761\u4ef6\u5411\u5de6\u5bfb\u627e\u66f4\u5c0f\u89e3(\u4e5f\u5c31\u662f\u6700\u4f18\u89e3)\n\t\telse id = ch[id][1];//\u4e0e\u4e0a\u65b9\u540c\u7406\n\t\t}\n\treturn next;\n\t}\nint main(){\n\tbuild();//\u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316[\u8fd0\u884cbuild()\u4f1a\u8fde\u540croot\u4e00\u5e76\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u5f88\u91cd\u8981]\n\tna = RD();\n\tfor(int i = 1;i <= na;i++){\n\t\tint cmd = RD(),x = RD();\n\t\tif(cmd == 1)insert(root,x);//\u51fd\u6570\u90fd\u5199\u597d\u4e86\uff0c\u6ce8\u610f\uff1a\u9700\u8981\u9012\u5f52\u7684\u51fd\u6570\u90fd\u4ece\u6839\u5f00\u59cb\uff0c\u4e0d\u9700\u8981\u9012\u5f52\u7684\u51fd\u6570\u76f4\u63a5\u67e5\u8be2\n\t\telse if(cmd == 2)Remove(root,x);\n\t\telse if(cmd == 3)printf(\"%d\\n\",get_rank(root,x) - 1);//\u6ce8\u610f\uff1a\u56e0\u4e3a\u521d\u59cb\u5316\u65f6\u63d2\u5165\u4e86INF\u548c-INF,\u6240\u4ee5\u67e5\u8be2\u6392\u540d\u65f6\u8981\u51cf1(-INF\u4e0d\u662f\u7b2c\u4e00\u5c0f\uff0c\u662f\u201c\u7b2c\u96f6\u5c0f\u201d)\n\t\telse if(cmd == 4)printf(\"%d\\n\",get_val(root,x + 1));//\u540c\u7406\uff0c\u7528\u6392\u540d\u67e5\u8be2\u503c\u5f97\u65f6\u5019\u8981\u67e5x + 1\u540d\uff0c\u56e0\u4e3a\u7b2c\u4e00\u540d(\u5176\u5b9e\u4e0d\u662f)\u662f-INF\n\t\telse if(cmd == 5)printf(\"%d\\n\",get_pre(x));\n\t\telse if(cmd == 6)printf(\"%d\\n\",get_next(x));\n\t\t}\n\treturn 0;\n\t}\n```\n---\n\n# Upd 20.08.09\n\u9ad8\u8003\u5b8c\u4e86\u56de\u6765\u770b\u770b\n\n\u9996\u5148\u662f\u56de\u590d\u4e00\u4e0b\u8bc4\u8bba\u533a\u7684\u95ee\u9898\uff1a\n\n### By @Van_Darkholmcnt \uff1acnt\u6570\u7ec4\u8bb0\u7684\u526f\u672c\u6570\u6307\u7684\u662f\u4ec0\u4e48 \n\u526f\u672c\u6570\u8bb0\u5f55\u7684\u662f\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u6570\u7684\u4e2a\u6570\uff0c\u6bd4\u5982\u8bf4\u6709 $3$ \u4e2a\u5927\u5c0f\u4e3a $1$ \u7684\u6570\uff0c$1$\u5bf9\u5e94\u8282\u70b9\u7684 $cnt$ \u5c31\u4e3a $3$\n\n### By @\u6027\u522b\u7537\u7231\u597d\u5973 \uff1a\u4e3a\u4ec0\u4e48\u4f18\u5148\u7ea7\u662f\u968f\u673a\u7684  \n\u672c\u7bc7\u9898\u89e3\u6ce8\u91cd\u7684\u662f\u4ee3\u7801\u5bf9 $Treap$ \u7684\u5b9e\u73b0\uff0c\u968f\u673a\u4f18\u5148\u7ea7\u7684\u590d\u6742\u5ea6\u4e3a $O(log$ $N)$ \u662f\u7ecf\u8fc7\u4e86\u4e25\u8c28\u7684\u8bc1\u660e\u7684\u3002\u5f88\u60ed\u6127\uff0c\u6000\u7740\u4e00\u4e1d\u4e1d\u529f\u5229\u5fc3\u641e\u7ade\u8d5b\u7684\u6211\u5e76\u6ca1\u6709\u60f3\u8fc7\u8981\u53bb\u4e86\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u7684\u672c\u8d28\uff0c\u6240\u4ee5\u4ee5\u6211\u76ee\u524d\u7684\u6c34\u5e73\u65e0\u6cd5\u89e3\u51b3\u4f60\u7684\u95ee\u9898\u3002\u4f46\u82e5\u662f\u771f\u7684\u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u53c2\u7167\uff1a\n\n### \u201c\n   _\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6392\u5e8f\u6811\u8282\u70b9\u63d2\u5165\u7684\u987a\u5e8f\u662f\u968f\u673a\u7684\uff0c\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u5e73\u8861\u7684\uff0c\u5373\u4f7f\u5b58\u5728\u4e00\u4e9b\u6781\u7aef\u60c5\u51b5\uff0c\u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5f88\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5efa\u7acb\u4e00\u9897\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u800c\u4e0d\u5fc5\u8981\u50cfAVL\u90a3\u6837\u65cb\u8f6c\uff0c\u53ef\u4ee5\u8bc1\u660e\u968f\u673a\u987a\u5e8f\u5efa\u7acb\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u5728\u671f\u671b\u9ad8\u5ea6\u662fO(logn)\uff0c\u4f46\u662f\u67d0\u4e9b\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u80fd\u5f97\u77e5\u6240\u6709\u7684\u5e26\u63d2\u5165\u8282\u70b9\uff0c\u6253\u4e71\u4ee5\u540e\u518d\u63d2\u5165\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u79cd\u89c4\u5219\u6765\u5b9e\u73b0\u8fd9\u79cd\u60f3\u6cd5\uff0c\u5e76\u4e14\u4e0d\u5fc5\u8981\u6240\u6709\u8282\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\u8282\u70b9\u662f\u987a\u5e8f\u8f93\u5165\u7684\uff0c\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e00\u70b9\u53ef\u4ee5\u7528Treap\u3002\uff08\u6458\u81ea\u767e\u5ea6\u767e\u79d1\uff09_ \n### \u201d\n\n### By @daisijie  @garbage2 \uff1a\u6709\u5173\u968f\u673a\u6570\n$rand()$ \u662f\u5305\u62ec\u5728 #$include <stdlib.h>$ \u5e93\u4e2d\u7684\u51fd\u6570\n\n\u968f\u673a\u6570\u79cd\u5b50\u7684\u4f5c\u7528\u662f\u63d0\u4f9b\uff08\u751f\u6210\uff09\u4e00\u4e2a\u5e8f\u5217\u6765\u53d6\u968f\u673a\u6570\uff0c\u5728\u4e00\u6b21\u8fd0\u884c\u4e2d\uff0c\u5373\u4f7f\u79cd\u5b50\u76f8\u540c\uff0c\u7b2c\u4e8c\u4e2a\u751f\u6210\u7684\u968f\u673a\u6570\u4e5f\u548c\u7b2c\u4e00\u4e2a\u751f\u6210\u7684\u968f\u673a\u6570\u6ca1\u6709\u5fc5\u7136\u8054\u7cfb\u3002\n\n\u4f46\u8fd0\u884c\u4e24\u6b21\u7a0b\u5e8f\uff0c\u7b2c\u4e8c\u6b21\u8fd0\u884c\u751f\u6210\u7684\u968f\u673a\u6570\u5fc5\u5b9a\u548c\u7b2c\u4e00\u6b21\u751f\u6210\u7684\u76f8\u540c\n\n\u6240\u4ee5\u662f\u4e0d\u9700\u8981\u7528 srand((unsigned)time(0)) \u521d\u59cb\u5316\u7684\n\n[\u53ef\u4ee5\u53c2\u7167\u8fd9\u7bc7\u535a\u5ba2](https://blog.csdn.net/qq_42900286/article/details/89433759)\n\n# Upd 22.07.27\n\n### \u5173\u4e8e\u6570\u636e\u52a0\u5f3a\u7248Hack\n[\u5f53\u65f6\u8fd9\u7bc7\u8ba8\u8bba\u8bf4\u7684\u5f88\u660e\u767d\u4e86](https://www.luogu.com.cn/discuss/313582)\uff0c\u4f46\u662f\u88ab\u5237\u4e0b\u53bb\u4e86\u5927\u4f19\u4e5f\u770b\u4e0d\u5230\uff0c\u8fd9\u91cc\u8865\u4e00\u4e0b\u4f20\u9001\u95e8\u3002\u4ee3\u7801\u672c\u8eab\u662f\u6ca1\u5f97\u9519\u7684\uff0c\u611f\u8c22\u5c0f\u4f19\u4f34\u4eec\u6307\u51fa\uff1aD\n\n\n# \u5199\u5728\u6700\u540e\n\u56de\u6d1b\u8c37\u770b\u770b\uff0c\u662f\u6000\u7740\u4e00\u4e1d\u656c\u4f69\u7684\u3002\n\n\u7ade\u8d5b\u52a0\u5206\u53d6\u6d88\u540e\uff0c\u8eab\u8fb9\u4e0d\u77e5\u591a\u5c11\u4eba\u591a\u5c11\u5b66\u6821\u5c06 $OI$ \u6254\u8fdb\u4e86\u5783\u573e\u5806\u3002\n\n\u6211\u8fd9\u4e2a\u4eba\u5427\u662f\u90a3\u79cd\u4e0d\u7231\u770b\u91cd\u6210\u7ee9\u53bb\u4ec0\u4e48\u4ec0\u4e48\u5f88\u597d\u7684\u5927\u5b66\u624d\u6709\u51fa\u8def\u3002\n\n\u4f46\u5373\u4fbf\u662f\u6211\uff0c\u4e5f\u4e0d\u80fd\u8bf4\u5f53\u521d\u9009\u62e9\u4fe1\u606f\u7ade\u8d5b\u6ca1\u6709\u8003\u8651\u8fc7\u529f\u5229\u3002\n\n\u8c01\u4e0d\u66fe\u68a6\u60f3\u8fc7\u91d1\u724c\u4fdd\u9001\u6e05\u5317\u5462\uff1f\n\n\u8089\u9ebb\u7684\u8bdd\u6211\u8bf4\u4e0d\u51fa\uff0c\u4e5f\u4e0d\u60f3\u8bf4\u3002\n\n\u4f46\u4f60\u4eec\uff0c\u4ecd\u7136\u575a\u6301\u7740\u7684\u4f60\u4eec\uff0c\u5b9e\u5b9e\u5728\u5728\u5730\u4ecd\u633a\u76f4\u7740\u4e0d\u5c48\u7684\u810a\u80cc\u3002\n\n\u4f60\u4eec\u662f\u51ed\u7740\u4e00\u7247\u70ed\u5ff1\u8fd8\u575a\u5b88\u7740\u8fd9\u7247\u571f\u5730\u554a\uff01\n\n\u4e5f\u8bb8\u6709\u4e00\u5929\uff0c\u4f60\u53d1\u73b0\uff0c\u4ed8\u51fa\u4e86\u8bb8\u591a\u7684\u4f60\uff0c\u548c\u4e5f\u8bb8\u6ca1\u90a3\u4e48\u52aa\u529b\u7684\u5176\u4ed6\u4eba\u76f8\u6bd4\uff0c\u90fd\u80fd\u8e0f\u5165\u633a\u5389\u5bb3\u7684\u5927\u5b66\uff0c\u90fd\u6709\u7740\u7f8e\u597d\u7684\u524d\u7a0b\u3002\n\n\u4f60\u4e5f\u8bb8\u4f1a\u6d6e\u60f3\u8054\u7fe9\uff1a\u8981\u662f\u6211\u5f53\u521d\u6ca1\u8e0f\u8db3 $OI$ \uff0c\u6211\u4f1a\u4e0d\u4f1a\u5728\u4e00\u4e2a\u66f4\u597d\u7684\u5730\u65b9\uff1f\n\n\u8fd9\u65f6\uff0c\u8bf7\u4e0d\u8981\u540e\u6094\u3002\n\n**\u7ed5\u8fdc\u7684\u8def\uff0c\u603b\u6709\u98ce\u666f\u3002**\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/g638uuva.png)\n![](https://cdn.luogu.com.cn/upload/image_hosting/628nccfu.png)\n![](https://cdn.luogu.com.cn/upload/image_hosting/5cq796y2.png)\n![](https://cdn.luogu.com.cn/upload/image_hosting/i6gwjxsu.png)",
        "postTime": 1528869265,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u5e73\u8861\u6811\u3010Treap\u3011"
    },
    {
        "content": "\u770b\u4e86\u90a3\u4e48\u591aSplay\u3001Treap\u3001SBT\u3001\u66ff\u7f6a\u7f8a\u6811\u7684\u9898\u89e3\uff0c\u662f\u65f6\u5019\u6765\u4e00\u7bc7\u6b64\u9898\u5386\u53f2\u6700\u5feb\u7684\u4ee3\u7801\u4e86\u3002\n\n**\u7ea2\u9ed1\u6811**\uff0c\u540c\u6837\u662f\u4e00\u79cd\u81ea\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7531Rudolf Bayer\u6700\u5148\u63d0\u51fa\uff0c\u5f53\u65f6\u88ab\u79f0\u4e3a\u5e73\u8861\u4e8c\u53c9B\u6811\uff08\u5176\u5b9e\u7ea2\u9ed1\u6811\u672c\u8d28\u5c31\u662f\u4e00\u68f5B-tree\uff09\uff0c\u540e\u6765\u88abLeo J. Guibas\u548cRobert Sedgewick\u4fee\u6539\u4e3a\"\u7ea2\u9ed1\u6811\"\u3002\n\n# \u7ea2\u9ed1\u6811\u5177\u6709\u5982\u4e0b\u6027\u8d28\uff1a\n\n1.\u7ea2\u9ed1\u6811\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5176\u4e2d\u5e8f\u904d\u5386\u5355\u8c03\u4e0d\u51cf\u3002\n\n2.\u8282\u70b9\u662f\u7ea2\u8272\u6216\u9ed1\u8272\u3002\n\n3.\u6839\u8282\u70b9\u662f\u9ed1\u8272\u3002\n\n4.\u6bcf\u4e2a\u53f6\u8282\u70b9(\u4e5f\u6709\u79f0\u5916\u90e8\u8282\u70b9\u7684\uff0c\u76ee\u7684\u662f\u5c06\u7ea2\u9ed1\u6811\u53d8\u4e3a\u771f\u4e8c\u53c9\u6811\uff0c\u5373NULL\u8282\u70b9\uff0c\u7a7a\u8282\u70b9)\u662f\u9ed1\u8272\u7684\u3002\n\n5.\u6bcf\u4e2a\u7ea2\u8272\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u662f\u9ed1\u8272\u3002(\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ece\u6bcf\u4e2a\u53f6\u5b50\u5230\u6839\u7684\u6240\u6709\u8def\u5f84\u4e0a\u4e0d\u80fd\u6709\u4e24\u4e2a\u8fde\u7eed\u7684\u7ea2\u8272\u8282\u70b9)\n\n6.\u4ece\u6839\u8282\u70b9\u5230\u6bcf\u4e2a\u53f6\u5b50\u7684\u6240\u6709\u8def\u5f84\u90fd\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u8282\u70b9\uff08\u8fd9\u4e2a\u6570\u503c\u53eb\u505a\u9ed1\u9ad8\u5ea6\uff09\u3002\n\n\u5982\u4e0b\u9762\u4e00\u68f5\u6811\u5c31\u662f\u7ea2\u9ed1\u6811\uff08\u8bf7\u81ea\u884c\u8111\u8865\u5916\u90e8\u8282\u70b9\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/14509.png)\n\n\u800c\u8fd9\u51e0\u68f5\u6811\u5c31\u4e0d\u662f\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/14510.png)\n\n\u7ea2\u9ed1\u6811\u6709\u51e0\u4e2a\u53d8\u79cd\uff0c\u5982AA\u6811\u7b49\uff0c\u5c31\u6b64\u9898\u800c\u8a00\uff0c\u6211\u5c06\u4f7f\u7528\u81ea\u5df1\u5b9e\u73b0\u7684\u6700\u5e38\u89c1\u7684**\u7ea2\u9ed1\u6811\u6a21\u7248**\u3002\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cassert>\nusing namespace std;\n\n//#define __REDBLACK_DEBUG\n\n#define bro(x) (((x)->ftr->lc == (x)) ? ((x)->ftr->rc) : ((x)->ftr->lc))\n#define islc(x) ((x) != NULL && (x)->ftr->lc == (x))\n#define isrc(x) ((x) != NULL && (x)->ftr->rc == (x))\n\ntemplate<typename T>\nclass redblacktree {\n\tprotected:\n\t\tstruct Node;\n\n\t\tNode* _root;\t////\u6839\u8282\u70b9\u4f4d\u7f6e\n\t\tNode* _hot;\t////\u4e34\u65f6\u7ef4\u62a4\u7684\u8282\u70b9\n\n\t\tvoid init(T);\n\t\tvoid connect34(Node*, Node*, Node*, Node*, Node*, Node*, Node*);\n\t\tvoid SolveDoubleRed(Node*);\t////\u53cc\u7ea2\u4fee\u6b63\n\t\tvoid SolveDoubleBlack(Node*);\t//\u53cc\u9ed1\u4fee\u6b63\n\t\tNode* find(T, const int);\t////\u5141\u8bb8\u91cd\u590d\u7684\u67e5\u627e\n\t\tNode* rfind(T, const int);\t////\u4e0d\u5141\u8bb8\u91cd\u590d\u7684\u67e5\u627e\n\t\tNode* findkth(int, Node*);\n\t\tint find_rank(T, Node*);\n#ifdef __REDBLACK_DEBUG\n\t\tvoid checkconnect(Node*);\n\t\tvoid previs(Node*, int);\n\t\tvoid invis(Node*, int);\n\t\tvoid postvis(Node*, int);\n#endif\n\n\tpublic:\n\n\t\tstruct iterator;\n\n\t\tredblacktree() : _root(NULL), _hot(NULL) {}\n\n\t\tint get_rank(T);\n\t\titerator insert(T);\n\t\tbool remove(T);\n\t\tint size();\n        bool empty();\n\t\titerator kth(int);\n\t\titerator lower_bound(T);\n\t\titerator upper_bound(T);\n#ifdef __REDBLACK_DEBUG\n\t\tvoid vis();\n\t\tvoid correctlyconnected();\n#endif\n};\n```\n\u5176\u4e2d\u5b9a\u4e49\u5b8f__REDBLACK_DEBUG\u662f\u4e3a\u4e86\u65b9\u4fbf\u8c03\u8bd5\uff0c\u63d0\u4ea4\u7684\u65f6\u5019\u53ef\u4ee5\u6ce8\u91ca\u6389\u3002\n\n\u5b8fislc()\u3001isrc()\u662f\u7528\u6765\u5224\u65ad\u662f\u5426\u4e3a\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u7684\uff0c\u5b8fbro(x)\u8fd4\u56de\u8282\u70b9x\u7684\u5144\u5f1f\u3002\n\n# \u8282\u70b9\n\n\u4e0b\u9762\uff0c\u6839\u636e\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5199\u51fa\u8282\u70b9Node\u7684\u7ed3\u6784\u4f53\uff1a\n```cpp\n\ntemplate <typename T>\nstruct redblacktree<T>::Node {\n\tT val;\t////\u8282\u70b9\u4fe1\u606f\n\tbool RBc;\t////\u8282\u70b9\u989c\u8272\uff0c\u82e5\u4e3atrue\uff0c\u5219\u8282\u70b9\u4e3aRed;\u5426\u5219\u8282\u70b9\u4e3aBlack.\n\tNode* ftr;\t////\u7236\u4eb2\n\tNode* lc;\t////\u5de6\u513f\u5b50\n\tNode* rc;\t////\u53f3\u513f\u5b50\n\tint s;\t\t////\u57df\n\n\tNode(\tT v = T(), bool RB = true,\n\t        Node* f = NULL, Node* l = NULL, Node* r = NULL ,int ss = 1\t)\n\t\t: val(v), RBc(RB), ftr(f), lc(l), rc(r), s(ss) {}\n\n\tNode* succ() {\t\t////\u5220\u9664\u8282\u70b9\u65f6\u7528\u5230\u7684\u66ff\u4ee3\u8282\u70b9\n\t\tNode* ptn = rc;\n\t\twhile(ptn->lc != NULL) {\n\t\t\t--(ptn->s);\n\t\t\tptn = ptn->lc;\n\t\t}\n\t\treturn ptn;\n\t}\n\n\tNode* left_node() {\t\t////\u76f4\u63a5\u524d\u9a71\n\t\tNode* ptn = this;\n\t\tif(!lc) {\n\t\t\twhile(ptn->ftr && ptn->ftr->lc == ptn)\n\t\t\t\tptn = ptn->ftr;\n\t\t\tptn = ptn->ftr;\n\t\t} else {\n\t\t\tptn = ptn->lc;\n\t\t\twhile(ptn->rc) {\n\t\t\t\tptn = ptn->rc;\n\t\t\t}\n\t\t}\n\t\treturn ptn;\n\t}\n\n\tNode* right_node() {\t////\u76f4\u63a5\u540e\u7ee7\n\t\tNode* ptn = this;\n\t\tif(!rc) {\n\t\t\twhile(ptn->ftr && ptn->ftr->rc == ptn)\n\t\t\t\tptn = ptn->ftr;\n\t\t\tptn = ptn->ftr;\n\t\t} else {\n\t\t\tptn = ptn->rc;\n\t\t\twhile(ptn->lc) {\n\t\t\t\tptn = ptn->lc;\n\t\t\t}\n\t\t}\n\t\treturn ptn;\n\t}\n\n\tvoid maintain() {\t////\u7ef4\u62a4\u57dfs\n\t\ts = 1;\n\t\tif(lc) s += lc->s;\n\t\tif(rc) s += rc->s;\n\t}\n};\n```\n# \u8fed\u4ee3\u5668\n\n\u8fed\u4ee3\u5668\u7684\u7ed3\u6784\u4f53\u4e5f\u5f88\u5bb9\u6613\u5199\u51fa\u6765\u5566\uff1a\n```cpp\ntemplate <typename T>\nstruct redblacktree<T>::iterator {\n\tprivate:\n\n\t\tNode* _real__node;\n\n\tpublic:\n\n\t\titerator& operator++() {\n\t\t\t_real__node = _real__node->right_node();\n\t\t\treturn *this;\n\t\t}\n\n\t\titerator& operator--() {\n\t\t\t_real__node = _real__node->left_node();\n\t\t\treturn *this;\n\t\t}\n\n\t\tT operator*() {\n\t\t\treturn _real__node->val;\n\t\t}\n\n\t\titerator(Node* node_nn = NULL) : _real__node(node_nn) {}\n\t\titerator(T const& val_vv) : _real__node(rfind(val_vv, 0)) {}\n\t\titerator(iterator const& iter) : _real__node(iter._real__node) {}\n\n};\n```\n# \u63d2\u5165\u3001\u53cc\u7ea2\u73b0\u8c61\u53ca\u5176\u4fee\u6b63\n\n\u63d2\u5165\u6bd4\u8f83\u597d\u5199\uff0c\u53ea\u9700\u8981\u5c06\u8282\u70b9\u4f5c\u4e3a\u7ea2\u8272\u8282\u70b9\u63d2\u5165\uff08\u4fdd\u8bc1\u4e0d\u8fdd\u53cd\u6027\u8d286\uff0c\u4f46\u53ef\u80fd\u8fdd\u53cd\u6027\u8d285\uff0c\u6bd5\u7adf\u6027\u8d285\u6bd4\u6027\u8d286\u5bb9\u6613\u4fee\u6b63\uff09\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u51fa\u73b0\u53cc\u7ea2\u73b0\u8c61\uff0c\u4fee\u6b63\u8be5\u8282\u70b9\u5373\u53ef\u3002\n```cpp\ntemplate <typename T>\ntypename\nredblacktree<T>::iterator redblacktree<T>::insert(T v) {\n\tNode* ptn = find(v, 1);\n\tif(_hot == NULL) {\n\t\tinit(v);\n\t\treturn iterator(_root);\n\t}\n\tptn = new Node(v, true, _hot, NULL, NULL, 1);\n\tif(\t_hot->val <= v\t)\n\t\t_hot->rc = ptn;\n\telse\n\t\t_hot->lc = ptn;\n\tSolveDoubleRed(ptn);\n\treturn iterator(ptn);\n}\n\ntemplate <typename T>\nvoid redblacktree<T>::init(T v) {\n\t_root = new Node(v, false, NULL, NULL, NULL, 1);\n#ifdef __REDBLACK_DEBUG\n\t++blackheight;\n#endif\n}\n```\n\u6b64\u5904\u4f7f\u7528\u4e86\u51fd\u6570find\uff0c\u548crfind\u4e00\u6837\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5f85\u5bfb\u627e\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6bcf\u4e2a\u8def\u8fc7\u7684\u8282\u70b9\u57df\u7684\u589e\u52a0\u503c\uff08\u63d2\u5165\u4e3a1\uff0c\u5220\u9664\u4e3a-1\uff0c\u666e\u901a\u67e5\u627e\u4e3a0\uff09\uff1a\n```cpp\ntemplate <typename T>\ntypename\nredblacktree<T>::Node* redblacktree<T>::find(T v, const int op) {\n\tNode* ptn = _root;\t////\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u67e5\u627e\n\t_hot = NULL;\t////\u7ef4\u62a4\u7236\u4eb2\u8282\u70b9\n\twhile(ptn != NULL) {\n\t\t_hot = ptn;\n\t\tptn->s += op;\n\t\tif(ptn->val > v)\n\t\t\tptn = ptn->lc;\n\t\telse\n\t\t\tptn = ptn->rc;\n\t}\n\treturn ptn;\n}\n\ntemplate <typename T>\ntypename\nredblacktree<T>::Node* redblacktree<T>::rfind(T v, const int op) {\n\tNode* ptn = _root;\n\t_hot = NULL;\n\twhile(ptn != NULL && ptn->val != v) {\n\t\t_hot = ptn;\n\t\tptn->s += op;\n\t\tif(ptn->val > v)\n\t\t\tptn = ptn->lc;\n\t\telse\n\t\t\tptn = ptn->rc;\n\t}\n\treturn ptn;\n}\n```\n## \u53cc\u7ea2\u4fee\u6b63\n\n\u81f3\u4e8e\u53cc\u7ea2\u4fee\u6b63\uff0c\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a\n\n### 1.\u6ca1\u6709\u51fa\u73b0\u53cc\u7ea2\u3002\n\n\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u4e00\u5b9a\u8981\u52a0\u5728SolveDoubleRed()\u91cc\u9762\u5224\u65ad\uff0c\u56e0\u4e3a\u4e0d\u8bba\u662f\u76f4\u63a5\u63d2\u5165\u8fd8\u662f\u4e0a\u6ea2\u90fd\u6709\u53ef\u80fd\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/14511.png)\n\n\u76f4\u63a5return\u8fd4\u56de\u5c31\u597d\uff0c\u4e0d\u89e3\u91ca\u2026\u2026\n\n### 2.\u7236\u4eb2\u4e3a\u7ea2\u8272\uff08\u5219\u7236\u4eb2\u975e\u6839\uff0c\u7956\u7236\u975e\u7a7a\uff09\uff0c\u53d4\u53d4bro(\u7236\u4eb2)\u4e3a\u9ed1\u8272\uff08\u6ce8\u610f\uff1a\u53ef\u80fd\u662f\u53f6\u5b50NULL\uff0c\u9700\u8981\u5224\u65ad\uff1b\u7956\u7236\u53ef\u80fd\u662f\u6839\uff0c\u9700\u8981\u5224\u65ad\uff09\u3002(RR-1)\n\n![](https://cdn.luogu.com.cn/upload/pic/14513.png)\n\n\u82e5\u4fee\u6b63\u8282\u70b9x\u662f\u7956\u7236g\u7684\u5de6\u513f\u5b50\u7684\u5de6\u513f\u5b50\u6216\u53f3\u513f\u5b50\u7684\u53f3\u513f\u5b50\uff08\u5373\u4e92\u4e3a\u540c\u5411\u7956\u5b59\u5173\u7cfb\uff09\uff0c\u5c06g\u5355\u65cb\u4e00\u6b21\uff08\u5c06x\u7684\u7236\u4eb2p\u4f38\u5c55\u5230g\u4f4d\u7f6e\uff09\uff0c\u518d\u5c06g\u67d3\u7ea2\u3001p\u67d3\u9ed1\u5373\u53ef\uff1b\u82e5x\u4e0d\u662fg\u7684\u540c\u5411\u5b59\u5b50\uff0c\u9700\u8981\u5c06x\u7684\u7236\u4eb2p\u65cb\u8f6c\u4e00\u6b21\uff0c\u518d\u65cb\u8f6cg\u4e00\u6b21\uff08\u5c06x\u4f38\u5c55\u5230g\u4f4d\u7f6e\uff09\uff0c\u6700\u540e\u5c06g\u67d3\u7ea2\u3001x\u67d3\u9ed1\u5373\u53ef\u3002\n\n### 3.\u7236\u4eb2\u4e3a\u7ea2\u8272\uff0c\u53d4\u53d4\u4e3a\u7ea2\u8272\u3002(RR-2)\n\n![](https://cdn.luogu.com.cn/upload/pic/14516.png)\n\n\u53cc\u7ea2\u4fee\u6b63\u4e2d\u552f\u4e00\u9700\u8981\u8fed\u4ee3\u6216\u9012\u5f52\u7684\u60c5\u51b5\u3002\u5c06\u7956\u7236g\u67d3\u7ea2\u3001\u53d4\u53d4u\u548c\u7236\u4eb2p\u67d3\u9ed1\uff0c\u53cc\u7ea2\u7f3a\u9677\u5c31\u4f1a\u4e0a\u6ea2\u4e24\u5c42\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u4fee\u6b63g\u7684\u53cc\u7ea2\u7f3a\u9677\u5566\uff01\n\n\u4f46\u8981\u6ce8\u610f\u7684\u662f\uff0cg\u6709\u53ef\u80fd\u662f\u6811\u6839\u3002\u5982\u679c\u8fd9\u79cd\u60c5\u51b5\u4e0a\u6ea2\u5230\u4e86\u6811\u6839\uff0c\u53ea\u9700\u8981\u5c06g\u518d\u67d3\u9ed1\u5373\u53ef\uff0c\u6b64\u65f6\u5168\u6811\u9ed1\u9ad8\u5ea6\u589e\u52a01\u3002\u867d\u7136\u8fd9\u6837\u53ef\u80fd\u4f1a\u904d\u5386\u6574\u68f5\u6811\u7684O(log n)\u4e2a\u8282\u70b9\uff0c\u4f46\u662f\u5206\u644a\u610f\u4e49\u4e0b\uff0cSolveDoubleRed()\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\u3002\u53ef\u4ee5\u7528\u52bf\u80fd\u5206\u6790\u6cd5\u8bc1\u660e\u3002\n\n### \u56e0\u6b64\u53ef\u4ee5\u8f7b\u677e\u5199\u51faSolveDoubleRed()\u51fd\u6570\u5566\uff1a\n```cpp\ntemplate <typename T>\nvoid redblacktree<T>::SolveDoubleRed(Node* nn) {\n\twhile((!(nn->ftr)) || nn->ftr->RBc) {\n\t\tif(nn == _root) {\n\t\t\t_root->RBc = false;\n#ifdef __REDBLACK_DEBUG\n\t\t\t++blackheight;\n#endif\n\t\t\treturn;\n\t\t}\n\t\tNode* pftr = nn->ftr;\n\t\tif(!(pftr->RBc)) return;\t\t\t////No double-red\n\t\tNode* uncle = bro(nn->ftr);\n\t\tNode* grdftr = nn->ftr->ftr;\n\t\tif(uncle != NULL && uncle->RBc) {\t////RR-2\n\t\t\tgrdftr->RBc = true;\n\t\t\tuncle->RBc = false;\n\t\t\tpftr->RBc = false;\n\t\t\tnn = grdftr;\n\t\t} else {\t\t\t\t\t\t\t////RR-1\n\t\t\tif(islc(pftr)) {\n\t\t\t\tif(islc(nn)) {\n\t\t\t\t\tpftr->ftr = grdftr->ftr;\n\t\t\t\t\tif(grdftr == _root) _root = pftr;\n\t\t\t\t\telse if(grdftr->ftr->lc == grdftr) grdftr->ftr->lc = pftr;\n\t\t\t\t\telse grdftr->ftr->rc = pftr;\n\t\t\t\t\tconnect34(pftr, nn, grdftr, nn->lc, nn->rc, pftr->rc, uncle);\n\t\t\t\t\tpftr->RBc = false;\n\t\t\t\t\tgrdftr->RBc = true;\n\t\t\t\t} else {\n\t\t\t\t\tnn->ftr = grdftr->ftr;\n\t\t\t\t\tif(grdftr == _root) _root = nn;\n\t\t\t\t\telse if(grdftr->ftr->lc == grdftr) grdftr->ftr->lc = nn;\n\t\t\t\t\telse grdftr->ftr->rc = nn;\n\t\t\t\t\tconnect34(nn, pftr, grdftr, pftr->lc, nn->lc, nn->rc, uncle);\n\t\t\t\t\tnn->RBc = false;\n\t\t\t\t\tgrdftr->RBc = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(islc(nn)) {\n\t\t\t\t\tnn->ftr = grdftr->ftr;\n\t\t\t\t\tif(grdftr == _root) _root = nn;\n\t\t\t\t\telse if(grdftr->ftr->lc == grdftr) grdftr->ftr->lc = nn;\n\t\t\t\t\telse grdftr->ftr->rc = nn;\n\t\t\t\t\tconnect34(nn, grdftr, pftr, uncle, nn->lc, nn->rc, pftr->rc);\n\t\t\t\t\tnn->RBc = false;\n\t\t\t\t\tgrdftr->RBc = true;\n\t\t\t\t} else {\n\t\t\t\t\tpftr->ftr = grdftr->ftr;\n\t\t\t\t\tif(grdftr == _root) _root = pftr;\n\t\t\t\t\telse if(grdftr->ftr->lc == grdftr) grdftr->ftr->lc = pftr;\n\t\t\t\t\telse grdftr->ftr->rc = pftr;\n\t\t\t\t\tconnect34(pftr, grdftr, nn, uncle, pftr->lc, nn->lc, nn->rc);\n\t\t\t\t\tpftr->RBc = false;\n\t\t\t\t\tgrdftr->RBc = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}\n```\n## \u7edf\u4e00\u91cd\u5e73\u8861\n\n\u4e3a\u4e86\u7b80\u5316\u4ee3\u7801\uff0c\u65cb\u8f6c\u64cd\u4f5c\u90fd\u4f7f\u7528\u4e86\u7edf\u4e00\u91cd\u5e73\u8861\u51fd\u6570connect34()\n```cpp\n\ntemplate <typename T>\nvoid redblacktree<T>::connect34(\tNode* nroot,\tNode* nlc,\t\tNode* nrc,\n                                    Node* ntree1,\tNode* ntree2,\tNode* ntree3,\tNode* ntree4) {\n\tnlc->lc = ntree1;\n\tif(ntree1 != NULL) ntree1->ftr = nlc;\n\tnlc->rc = ntree2;\n\tif(ntree2 != NULL) ntree2->ftr = nlc;\n\tnrc->lc = ntree3;\n\tif(ntree3 != NULL) ntree3->ftr = nrc;\n\tnrc->rc = ntree4;\n\tif(ntree4 != NULL) ntree4->ftr = nrc;\n\tnroot->lc = nlc;\n\tnlc->ftr = nroot;\n\tnroot->rc = nrc;\n\tnrc->ftr = nroot;\n\tnlc->maintain();\n\tnrc->maintain();\n\tnroot->maintain();\n}\n```\n\n# \u4e24\u79cdbound\n\nlower_bound(v)\u3001upper_bound(v)\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u8fd4\u56de\u7ea2\u9ed1\u6811\u4e2d\u4e0d\u5927\u4e8ev\u7684\u6700\u5927\u7684\u5143\u7d20\u3001\u5927\u4e8ev\u7684\u6700\u5c0f\u7684\u5143\u7d20\u3002\u53ef\u4ee5\u7528rfind(v, 0)\u5b9e\u73b0\uff0c\u4f46\u6b64\u5904\u6ce8\u91cd\u6548\u7387\uff0c\u53ef\u4ee5\u53e6\u5199\u67e5\u627e\u7b97\u6cd5\uff1a\n```cpp\ntemplate <typename T>\ntypename\nredblacktree<T>::iterator redblacktree<T>::lower_bound(T v) {\n\tNode* ptn = _root;\n\twhile(ptn) {\n\t\t_hot = ptn;\n\t\tif(ptn->val < v) {\n\t\t\tptn = ptn->rc;\n\t\t} else {\n\t\t\tptn = ptn->lc;\n\t\t}\n\t}\n\tif(_hot->val < v) {\n\t\tptn = _hot;\n\t} else {\n\t\tptn = _hot->left_node();\n\t}\n\treturn iterator(ptn);\n}\n\ntemplate <typename T>\ntypename\nredblacktree<T>::iterator redblacktree<T>::upper_bound(T v) {\n\tNode* ptn = _root;\n\twhile(ptn) {\n\t\t_hot = ptn;\n\t\tif(ptn->val > v) {\n\t\t\tptn = ptn->lc;\n\t\t} else {\n\t\t\tptn = ptn->rc;\n\t\t}\n\t}\n\tif(_hot->val > v) {\n\t\tptn = _hot;\n\t} else {\n\t\tptn = _hot->right_node();\n\t}\n\treturn iterator(ptn);\n}\n```\n# \u5bfb\u627e\u7b2ck\u5927\n\n\u5c31\u50cf\u5feb\u901f\u9009\u62e9\u4e00\u6837\uff0c\u975e\u5e38\u7b80\u5355\u5bf9\u4e0d\u5bf9\uff1f\n```cpp\ntemplate <typename T>\ntypename\nredblacktree<T>::iterator redblacktree<T>::kth(int rank) {\n\treturn iterator(findkth(rank, _root));\n}\n\ntemplate <typename T>\ntypename\nredblacktree<T>::Node* redblacktree<T>::findkth(int rank, Node* ptn) {\n\tif(!(ptn->lc)) {\n\t\tif(rank == 1) {\n\t\t\treturn ptn;\n\t\t} else {\n\t\t\treturn findkth(rank - 1, ptn->rc);\n\t\t}\n\t} else {\n\t\tif(ptn->lc->s == rank - 1) return ptn;\n\t\telse if(ptn->lc->s >= rank) return findkth(rank, ptn->lc);\n\t\telse return findkth(rank - (ptn->lc->s) - 1, ptn->rc);\n\t}\n}\n```\n# \u627e\u5230\u5143\u7d20\u7684\u540d\u6b21\n\n\u66f4\u7b80\u5355\u4e86\u6709\u6728\u6709\uff1f\n```cpp\ntemplate <typename T>\nint redblacktree<T>::get_rank(T v) {\n\treturn find_rank(v, _root);\n}\n\ntemplate <typename T>\nint redblacktree<T>::find_rank(T v, Node* ptn) {\n\tif(!ptn) return 1;\n\telse if(ptn->val >= v) return find_rank(v, ptn->lc);\n\telse return (1 + ((ptn->lc) ? (ptn->lc->s) : 0) + find_rank(v, ptn->rc));\n}\n```\n# \u5176\u4ed6\u63a5\u53e3\n\n\u4ecb\u7ecd\u5220\u9664\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u63a5\u53e3\u64cd\u4f5c\uff0c\u5982size()\u3001empty()\u3002\n```cpp\ntemplate <typename T>\nint redblacktree<T>::size() {\n\treturn _root->s;\n}\n\ntemplate <typename T>\nbool redblacktree<T>::empty() {\n\treturn !_root;\n}\n```\n# \u5220\u9664\u3001\u53cc\u9ed1\u73b0\u8c61\u53ca\u5176\u4fee\u6b63\n\n\u4fd7\u8bdd\u8bf4\uff1a\u8001\u9f20\u62c9\u6728\u9528\uff0c\u5927\u5934\u5728\u540e\u8fb9\u3002\u5220\u9664\u548c\u53cc\u9ed1\u4fee\u6b63\u662f\u7ea2\u9ed1\u6811\u6700\u4ee4\u4eba\u6076\u5fc3\u548c\u7a92\u606f\u7684\u64cd\u4f5c\uff0c\u8bb8\u591a\u5927\u5b66\u6559\u6750\u5bf9\u6b64\u95ed\u53e3\u4e0d\u8c08\uff0c\u8fde\u6e05\u534e\u7684\u300a\u6570\u636e\u7ed3\u6784\u300b\u4e5f\u8bb2\u8ff0\u5730\u5341\u5206\u6df7\u4e71\uff08\u4f46\u7f16\u8005\u9093\u4fca\u8f89\u6559\u6388\u7edd\u5bf9\u662f\u6211\u7684\u6069\u4eba\uff0c2017\u63d0\u9ad8\u7ec4NOIP\u8003\u8bd5\u4e4b\u524d\u5076\u7136\u77a5\u4e86\u4e00\u773c\u300a\u6570\u636e\u7ed3\u6784\u300b\u91cc\u9762\u7684\u5e0c\u5c14\u6392\u5e8f\u90a3\u4e00\u7ae0\uff0c\u91cc\u9762\u4e00\u4e2a\u6570\u8bba\u95ee\u9898\u5438\u5f15\u4e86\u6211\u7684\u6ce8\u610f\uff0c\u4e8e\u662f\u6211\u4e0d\u7ecf\u610f\u95f4\u8bb0\u4e0b\u4e86\u90a3\u4e2a\u516c\u5f0f\uff1ax(g, h) = g\\*h - g - h\uff0c\u7b2c\u4e8c\u5929\u770b\u5230\u9898\u6211\u7b11\u4e86\uff0cAC\u4e86D1T1\uff09\u3002\n\n\u4e0d\u8bf4\u6211\u7684\u6545\u4e8b\u4e86\uff0c\u4e5f\u4e0d\u8bf4\u9093\u6559\u6388\u7684\u4e66\u4e86\uff0c\u4e0b\u9762\u76f4\u63a5\u8fdb\u5220\u9664\uff1a\n```cpp\ntemplate <typename T>\nbool redblacktree<T>::remove(T v) {\n\tNode* ptn = rfind(v, -1);\n\tif(!ptn) return false;\n\tNode* node_suc;\n\twhile(ptn->lc || ptn->rc) {\t////\u8fed\u4ee3\u5bfb\u627e\u771f\u540e\u7ee7\n\t\tif(!(ptn->lc)) {\n\t\t\tnode_suc = ptn->rc;\n\t\t} else if(!(ptn->rc)) {\n\t\t\tnode_suc = ptn->lc;\n\t\t} else {\n\t\t\tnode_suc = ptn->succ();\n\t\t}\n\t\t--(ptn->s);\n\t\tptn->val = node_suc->val;\n\t\tptn = node_suc;\n\t}\n\tif(!(ptn->RBc)) {\n\t\t--(ptn->s);\n\t\tSolveDoubleBlack(ptn);\n\t}\n\tif(ptn == _root) {\n\t\t_root = NULL;\n\t\tdelete ptn;\n\t\treturn true;\n\t}\n\tif(ptn->ftr->lc == ptn)\n\t\tptn->ftr->lc = NULL;\n\telse\n\t\tptn->ftr->rc = NULL;\n\tdelete ptn;\n\treturn true;\n}\n```\n\u770b\u4f3c\u975e\u5e38\u7b80\u5355\u5bf9\u4e0d\u5bf9\uff1f\u53ea\u662f\u56e0\u4e3a\u6211\u6ca1\u6709\u7ed9\u51fa\u90a3\u4e00\u767e\u6765\u884c\u7684SolveDoubleBlack()\u4ee3\u7801\u2026\u2026\n\n## \u53cc\u9ed1\u4fee\u6b63\n\n\u53cc\u9ed1\u4fee\u6b63\u6bd4\u8f83\u5389\u5bb3\uff0c\u60c5\u51b5\u4e00\u5171\u56db\u79cd\uff0c\u540c\u6837\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\u9700\u8981\u8fed\u4ee3\u6216\u9012\u5f52\u3002\u53cc\u9ed1\u4fee\u6b63\u4e0d\u5bb9\u6613\u7406\u89e3\u7684\u5c31\u662fSolveDoubleBlack(Node* x)\u7684\u53c2\u6570x\u3002\u5fc5\u9ed1\u7684\u8282\u70b9x\u4ee3\u8868\uff0cx\u7684\u5de6\u53f3\u513f\u5b50\u9ed1\u9ad8\u5ea6\u5747\u76f8\u7b49\uff0c\u5373\u82e5\u4ee5x\u4f5c\u4e3a\u6839\uff0c\u5b50\u6811x\u5e76\u4e0d\u5b58\u5728\u53cc\u9ed1\u7f3a\u9677\uff0c\u4f46x\u6bd4\u5144\u5f1fbro(x)\u7684\u9ed1\u9ad8\u5ea6\u5c111\uff0c\u56e0\u6b64\u9700\u8981\u4fee\u6b63\u3002\n\n\u53cc\u9ed1\u4fee\u6b63\u76844\u79cd\u60c5\u51b5\u5982\u4e0b\uff1a\n\n### 1.\u5144\u5f1f\u4e3a\u7ea2\u8272(BB-1)\n\n\u8bb8\u591a\u6559\u6750\u5c06\u6b64\u60c5\u51b5\u6700\u540e\u5224\u65ad\uff0c\u540c\u65f6\u4e5f\u8ba4\u4e3a\u662f\u9700\u8981\u9012\u5f52\u7684\u60c5\u51b5\uff0c\u4f46\u6211\u8ba4\u4e3a\u4e0d\u5fc5\uff0c\u9996\u5148\u5224\u65ad\u8fd9\u4e2a\u60c5\u51b5\uff0c\u53ef\u4ee5\u517c\u987e\u6548\u7387\u548c\u4ee3\u7801\u53ef\u8bfb\u6027\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/14521.png)\n\n\u65cb\u8f6c\u7236\u4eb2p\uff0c\u5c06b\u4f38\u5c55\u5230p\u4f4d\u7f6e\uff0c\u7136\u540e\u67d3\u9ed1b\u3001\u67d3\u7ea2p\uff0c\u4e8e\u662f\u5c06\u95ee\u9898\u8f6c\u5316\u5230\u4e86BB-2R\u6216BB-3\u3002\n\n### 2.\u5144\u5f1f\u548c\u7236\u4eb2\u90fd\u4e3a\u9ed1\u8272\uff0c\u4e14\u5144\u5f1f\u6ca1\u6709\u7ea2\u513f\u5b50(BB-2B)\n\n\u6839\u636e\u6211\u7684\u8ddf\u8e2a\u8bb0\u5f55\uff0c\u5728\u4e00\u4e9b\u63d2\u5165\u64cd\u4f5c\u5c45\u591a\u7684\u6570\u636e\uff08\u5982\u767e\u79d1\u8bcd\u6761\u3001\u533b\u9662\u836f\u54c1\u8bb0\u5f55\u3001\u6838\u7535\u7ad9\u63a7\u5236\u7cfb\u7edf\u7b49\u73b0\u5b9e\u60c5\u51b5\uff09\uff0c\u6b64\u60c5\u51b5\u51e0\u4e4e\u4e0d\u4f1a\u53d1\u751f\uff0c\u4f46\u53ea\u8981\u51fa\u73b0\u5168\u6811\u9ed1\u9ad8\u5ea6\u51cf\u5c111\u7684\u60c5\u51b5\uff0cBB-2B\u5c31\u4e00\u5b9a\u53d1\u751f\u4e14\u4e0b\u6ea2\u5230\u6839\u8282\u70b9\u4e86\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/14523.png)\n\n\u67d3\u7ea2\u5144\u5f1fb\uff0c\u53cc\u9ed1\u7f3a\u9677\u4e0b\u6ea2\u5230\u4e86\u7236\u4eb2p\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86BB-1\u3001BB-2B\u3001BB-2R\u6216BB-3\u4e2d\u7684\u4e00\u4e2a\u3002\n\n\u5982\u679c\u88ab\u4fee\u6b63\u8282\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u53ea\u9700\u8981\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\uff0c\u6b64\u65f6\u5168\u6811\u9ed1\u9ad8\u5ea6\u51cf\u5c111\u3002\n\n### 3.\u5144\u5f1f\u662f\u9ed1\u8272\uff0c\u6ca1\u6709\u7ea2\u513f\u5b50\uff0c\u7236\u4eb2\u4e3a\u7ea2\u8272(BB-2R)\n\n\u76f8\u5f53\u7b80\u5355\u4e86\u5427\uff0c\u4e0d\u7528\u6211\u4ecb\u7ecd\uff0c\u806a\u660e\u7684\u8bfb\u8005\u5e94\u8be5\u4e5f\u80fd\u60f3\u5230:\n\n![](https://cdn.luogu.com.cn/upload/pic/14524.png)\n\n\u67d3\u7ea2b\uff0c\u67d3\u9ed1p\uff0c\u7136\u540e\u5c31\u5b8c\u6210\u4fee\u6b63\u4e86\u3002\n\n### 4.\u5144\u5f1f\u662f\u9ed1\u8272\uff0c\u6709\u7ea2\u513f\u5b50(BB-3)\n\n\u540c\u6837\u4e0d\u9700\u8981\u8f6c\u5316\u95ee\u9898\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/14525.png)\n\n\u5982\u679c\u4f84\u5b50c\u662f\u7236\u4eb2p\u7684\u540c\u5411\u5b59\u5b50\u7684\u8bdd\uff0c\u65cb\u8f6cp\u4f7f\u5144\u5f1fb\u4f38\u5c55\u5230p\u4f4d\u7f6e\uff0c\u5e76\u5c06b\u67d3\u4e3ap\u7684\u989c\u8272\uff0cp\u3001c\u67d3\u9ed1\u5373\u53ef\uff1b\u5982\u679cc\u4e0d\u662fp\u7684\u540c\u5411\u5b59\u5b50\uff0c\u4f38\u5c55c\u5230p\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06c\u67d3\u4e3ap\u7684\u989c\u8272\uff0c\u7136\u540e\u67d3\u9ed1p\u5373\u53ef\u3002\n\n### \u4e8e\u662f\u53cc\u9ed1\u4fee\u6b63SolveDoubleBlack\u7684\u4ee3\u7801\u4e5f\u5f88\u5bb9\u6613\u5199\u51fa\u5566\uff1a\n```cpp\ntemplate <typename T>\nvoid redblacktree<T>::SolveDoubleBlack(Node* nn) {\n\twhile(nn != _root) {\n\t\tNode* pftr = nn->ftr;\n\t\tNode* bthr = bro(nn);\n\t\tif(bthr->RBc) {\t\t\t\t\t////BB-1\n\t\t\tbthr->RBc = false;\n\t\t\tpftr->RBc = true;\n\t\t\tif(_root == pftr) _root = bthr;\n\t\t\tif(pftr->ftr) {\n\t\t\t\tif(pftr->ftr->lc == pftr)\n\t\t\t\t\tpftr->ftr->lc = bthr;\n\t\t\t\telse\n\t\t\t\t\tpftr->ftr->rc = bthr;\n\t\t\t}\n\t\t\tbthr->ftr = pftr->ftr;\n\t\t\tif(islc(nn)) {\n\t\t\t\tconnect34(bthr, pftr, bthr->rc, nn, bthr->lc, bthr->rc->lc, bthr->rc->rc);\n\t\t\t} else {\n\t\t\t\tconnect34(bthr, bthr->lc, pftr, bthr->lc->lc, bthr->lc->rc, bthr->rc, nn);\n\t\t\t}\n\t\t\tbthr = bro(nn);\n\t\t\tpftr = nn->ftr;\n\t\t}\n\t\tif(bthr->lc && bthr->lc->RBc) {\t////BB-3\n\t\t\tbool oldRBc = pftr->RBc;\n\t\t\tpftr->RBc = false;\n\t\t\tif(pftr->lc == nn) {\n\t\t\t\tif(pftr->ftr) {\n\t\t\t\t\tif(pftr->ftr->lc == pftr)\n\t\t\t\t\t\tpftr->ftr->lc = bthr->lc;\n\t\t\t\t\telse\n\t\t\t\t\t\tpftr->ftr->rc = bthr->lc;\n\t\t\t\t}\n\t\t\t\tbthr->lc->ftr = pftr->ftr;\n\t\t\t\tif(_root == pftr) _root = bthr->lc;\n\t\t\t\tconnect34(bthr->lc, pftr, bthr, pftr->lc, bthr->lc->lc, bthr->lc->rc, bthr->rc);\n\t\t\t} else {\n\t\t\t\tbthr->lc->RBc = false;\n\t\t\t\tif(pftr->ftr) {\n\t\t\t\t\tif(pftr->ftr->lc == pftr)\n\t\t\t\t\t\tpftr->ftr->lc = bthr;\n\t\t\t\t\telse\n\t\t\t\t\t\tpftr->ftr->rc = bthr;\n\t\t\t\t}\n\t\t\t\tbthr->ftr = pftr->ftr;\n\t\t\t\tif(_root == pftr) _root = bthr;\n\t\t\t\tconnect34(bthr, bthr->lc, pftr, bthr->lc->lc, bthr->lc->rc, bthr->rc, pftr->rc);\n\t\t\t}\n\t\t\tpftr->ftr->RBc = oldRBc;\n\t\t\treturn;\n\t\t} else if(bthr->rc && bthr->rc->RBc) {\t////BB-3\n\t\t\tbool oldRBc = pftr->RBc;\n\t\t\tpftr->RBc = false;\n\t\t\tif(pftr->lc == nn) {\n\t\t\t\tbthr->rc->RBc = false;\n\t\t\t\tif(pftr->ftr) {\n\t\t\t\t\tif(pftr->ftr->lc == pftr)\n\t\t\t\t\t\tpftr->ftr->lc = bthr;\n\t\t\t\t\telse\n\t\t\t\t\t\tpftr->ftr->rc = bthr;\n\t\t\t\t}\n\t\t\t\tbthr->ftr = pftr->ftr;\n\t\t\t\tif(_root == pftr) _root = bthr;\n\t\t\t\tconnect34(bthr, pftr, bthr->rc, pftr->lc, bthr->lc, bthr->rc->lc, bthr->rc->rc);\n\t\t\t} else {\n\t\t\t\tif(pftr->ftr) {\n\t\t\t\t\tif(pftr->ftr->lc == pftr)\n\t\t\t\t\t\tpftr->ftr->lc = bthr->rc;\n\t\t\t\t\telse\n\t\t\t\t\t\tpftr->ftr->rc = bthr->rc;\n\t\t\t\t}\n\t\t\t\tbthr->rc->ftr = pftr->ftr;\n\t\t\t\tif(_root == pftr) _root = bthr->rc;\n\t\t\t\tconnect34(bthr->rc, bthr, pftr, bthr->lc, bthr->rc->lc, bthr->rc->rc, pftr->rc);\n\t\t\t}\n\t\t\tpftr->ftr->RBc = oldRBc;\n\t\t\treturn;\n\t\t}\n\t\tif(pftr->RBc) {\t\t\t\t\t////BB-2R\n\t\t\tpftr->RBc = false;\n\t\t\tbthr->RBc = true;\n\t\t\treturn;\n\t\t} else {\t\t\t\t\t\t////BB-2B\n\t\t\tbthr->RBc = true;\n\t\t\tnn = pftr;\n\t\t}\n\t}\n#ifdef __REDBLACK_DEBUG\n\t--blackheight;\n#endif\n}\n```\n# Debug\u7684\u4ee3\u7801\n\n\u4e3a\u4e86\u65b9\u4fbf\u8c03\u8bd5\uff0c\u6211\u5728\u5199\u7ea2\u9ed1\u6811\u677f\u5b50\u7684\u540c\u65f6\u4e5f\u5199\u4e86\u4e00\u4e9b\u8c03\u8bd5\u4ee3\u7801\uff1a\n```cpp\n#ifdef __REDBLACK_DEBUG\n\nint blackheight(0);\n\ntemplate <typename T>\t////\u5148\u5e8f\u904d\u5386\nvoid redblacktree<T>::previs(Node* ptn, int cnt) {\n\tif(ptn == NULL) {\n\t\tif(blackheight == -1) blackheight = cnt;\n\t\tassert(blackheight == cnt);\n\t\treturn;\n\t}\n\tprintf(\"%d %s %d \\n\", ptn->val, ptn->RBc ? \"Red\" : \"Black\", ptn->s);\n\tif(!(ptn->RBc)) ++cnt;\n\tprevis(ptn->lc, cnt);\n\tprevis(ptn->rc, cnt);\n}\n\ntemplate <typename T>\t////\u4e2d\u5e8f\u904d\u5386\nvoid redblacktree<T>::invis(Node* ptn, int cnt) {\n\tif(ptn == NULL) {\n\t\tif(blackheight == -1) blackheight = cnt;\n\t\tassert(blackheight == cnt);\n\t\treturn;\n\t}\n\tif(!(ptn->RBc)) ++cnt;\n\tinvis(ptn->lc, cnt);\n\tprintf(\"%d %s %d \\n\", ptn->val, ptn->RBc ? \"Red\" : \"Black\", ptn->s);\n\tinvis(ptn->rc, cnt);\n}\n\ntemplate <typename T>\t////\u540e\u5e8f\u904d\u5386\nvoid redblacktree<T>::postvis(Node* ptn, int cnt) {\n\tif(ptn == NULL) {\n\t\tif(blackheight == -1) blackheight = cnt;\n\t\tassert(blackheight == cnt);\n\t\treturn;\n\t}\n\tif(!(ptn->RBc)) ++cnt;\n\tpostvis(ptn->lc, cnt);\n\tpostvis(ptn->rc, cnt);\n\tprintf(\"%d %s %d \\n\", ptn->val, ptn->RBc ? \"Red\" : \"Black\", ptn->s);\n}\n\ntemplate <typename T>\t////\u8f93\u51fa\u6240\u6709\u5e8f\u904d\u5386\u7684\u63a5\u53e3\nvoid redblacktree<T>::vis() {\n\tprintf(\"BlackHeight:\\t%d\\n\", blackheight);\n\tprintf(\"------pre-vis------\\n\");\n\tprevis(_root, 0);\n\tprintf(\"------in-vis------\\n\");\n\tinvis(_root, 0);\n\tprintf(\"------post-vis------\\n\");\n\tpostvis(_root, 0);\n}\n\ntemplate <typename T>\t////\u9a8c\u8bc1\u6240\u6709\u8282\u70b9\u4e0e\u7236\u4eb2\u7684\u8fde\u63a5\u662f\u5426\u6b63\u5e38\u3001\u57dfs\u662f\u5426\u7ef4\u62a4\u6b63\u5e38\nvoid redblacktree<T>::checkconnect(Node* ptn) {\n\tif(!ptn) return;\n\tassert(ptn->s > 0);\n\tif(ptn->lc && ptn->lc->ftr != ptn) {\n\t\tprintf(\"Oops! %d has a lc %d, but it failed to point its ftr!\\n\", ptn->val, ptn->lc->val);\n\t}\n\tif(ptn->rc && ptn->rc->ftr != ptn) {\n\t\tprintf(\"Oops! %d has a rc %d, but it failed to point its ftr!\\n\", ptn->val, ptn->rc->val);\n\t}\n\tint sss = ptn->s;\n\tif(ptn->lc) sss -= ptn->lc->s;\n\tif(ptn->rc) sss -= ptn->rc->s;\n\tif(sss - 1) {\n\t\tprintf(\"Damn! %d's size is %d, but the sum of its children's size is %d!\\n\", ptn->val, ptn->s, ptn->s - sss);\n\t}\n\tcheckconnect(ptn->lc);\n\tcheckconnect(ptn->rc);\n}\n\ntemplate <typename T>\nvoid redblacktree<T>::correctlyconnected() {\n\tcheckconnect(_root);\n}\n#endif\n```\n# \u4e3b\u7a0b\u5e8f\n\n\u677f\u5b50\u90fd\u6709\u4e86\uff0c\u8fd9\u4e2a\u6700\u597d\u5199\u4e86\u4e0d\u662f\uff1f\n```cpp\ninline\nint readint() {\n\tint ret(0);\n\tint sgn(1);\n\tchar c;\n\twhile(isspace(c = getchar()));\n\tif(c == '-') {\n\t\tsgn = -1;\n\t\tc = getchar();\n\t}\n\twhile(isdigit(c)) {\n\t\tret = (ret << 3) + (ret << 1) + c - '0';\n\t\tc = getchar();\n\t}\n\treturn ret * sgn;\n}\n#define ri readint()\n\nint opt, x;\n\nint tot;\n\nredblacktree<int> my_tree;\n\nint main() {\n\tregister int i;\n\ttot = ri;\n\tredblacktree<int>::iterator it;\n\tfor(i = 0; i < tot; ++i) {\n\t\topt = ri;\n\t\tx = ri;\n\t\tswitch(opt) {\n\t\t\tcase 1:\n\t\t\t\tmy_tree.insert(x);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tmy_tree.remove(x);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tprintf(\"%d\\n\", my_tree.get_rank(x));\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tit = my_tree.kth(x);\n\t\t\t\tprintf(\"%d\\n\", *it);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tit = my_tree.lower_bound(x);\n\t\t\t\tprintf(\"%d\\n\", *it);\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tit = my_tree.upper_bound(x);\n\t\t\t\tprintf(\"%d\\n\", *it);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}\n```\n# \u603b\u7ed3\n\n\u7ea2\u9ed1\u6811\u5e94\u8be5\u662f\u9664\u54c8\u5e0c\u8868\u5916\u6700\u5feb\u7684\u641c\u7d22\u7ed3\u6784\u4e86\uff08\u54c8\u5e0c\u8868\u7531\u4e8e\u5360\u5185\u5b58\u592a\u5927\uff0c\u5b9e\u9645\u60c5\u51b5\u5e38\u5e38\u4e0d\u7528\uff09\u3002\u5f88\u591a\u4eba\u8ba4\u4e3a\u7ea2\u9ed1\u6811\u592a\u96be\u5199\uff0c\u5c31\u653e\u5f03\u5b66\u4e60\u5b83\u3002\u6211\u8ba4\u4e3a\u7ea2\u9ed1\u6811\u4ee3\u7801\u5e76\u4e0d\u9ebb\u70e6\uff0c\u548c\u7ebf\u6bb5\u6811\u7684\u96be\u5ea6\u5dee\u4e0d\u591a\uff0c\u5982\u679c\u5b66\u4f1a\u4e86\u4f1a\u5f88\u5bb9\u6613\u5199\u51fa\u6765\u3002\n\n\u5199\u4e8e2018\u5e742\u670815\u65e5\uff0c\u795d\u5927\u5bb6\u9664\u5915\u5feb\u4e50\uff0c\u62dc\u4e2a\u65e9\u5e74\u3002",
        "postTime": 1518678942,
        "uid": 29277,
        "name": "\u5317\u6781\u9e45",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u8fa3\u4e48\uff0c\u6211\u8981\u4ecb\u7ecd\u6211\u81ea\u5b66\u7684 Splay \u4e86\uff0c\u867d\u7136\u8ddf\u5927\u4f6c\u4eec\u8bb2\u5f97\u4f1a\u6709\u4e9b\u91cd\u590d\uff0c\u4f46\u662f\u81ea\u8ba4\u4e3a\u628a\u4e00\u4e9b\u7384\u5999\u7684\u4e1c\u897f\u70b9\u51fa\u6765\u4e86 qwq\u3002\n\n# \u5f15\u8a00\n\n\u9996\u5148\uff0c\u6211\u5e76\u6ca1\u89c9\u5f97 Splay \u6709\u591a\u96be\u2026\u2026\u4ee3\u7801\u957f\u7684\u539f\u56e0\u4e5f\u5c31\u6700\u591a\u662f\u56e0\u4e3a\u4e0d\u7528\u6307\u9488\u592a\u9ebb\u70e6\u2026\u2026\u5c31\u597d\u50cf\u4f60\u94fe\u8868\u4e0d\u7528\u6307\u9488\u800c\u7528\u6570\u7ec4\u6a21\u62df\uff0c\u5728\u63d2\u5165\u5220\u9664\u7684\u65f6\u5019\u5c31\u6709\u4f60\u597d\u53d7\u7684\u4e86 qnq,\u66f4\u4f55\u51b5\u6811\u5f62\u7ed3\u6784\u66f4\u4e3a\u9ebb\u70e6\uff0c\u5728\u6811\u4e0a\u7684\u64cd\u4f5c\u4e5f\u66f4\u52a0\u82b1\u6837\u7e41\u591a\u3002\u603b\u4e4b\uff0c\u9ebb\u70e6\u3002\n\n\u4f46\u662f Splay \u5728\u6211\u773c\u4e2d\u5374\u66f4\u50cf\u662f\u4e00\u79cd\u53ef\u4ee5\u653e\u8bf8\u56db\u6d77\u800c\u7686\u53ef\u7528\u7684\u7b97\u6cd5,\u4e0d\u4f46\u53ef\u4ee5\u6709\u6548\u66ff\u4ee3\u4e8c\u53c9\u641c\u7d22\u6811\u3001AVL \u6811\u7b49\u6570\u636e\u7ed3\u6784\uff0c\u4e5f\u4e0d\u4f1a\u7531\u4e8e Treap \u7684\u968f\u673a\u952e\u503c\u800c\u9760\u8138\u62ff\u5206\uff08\u5176\u5b9e\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u6ca1\u6709\u56e0\u4e3a\u88ab\u5927\u4f6c % \u800c rp--\uff0cTreap \u4e5f\u662f\u4e0d\u9519\u7684\u9009\u62e9\uff09\uff0c\u5e76\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f\u5f88\u53ef\u89c2\u7684\u3002\n\n\u90a3\u4e48\u65e0\u8bba\u600e\u6837\uff0c\u5728\u5b66\u4e60\u4e00\u79cd\u65b0\u7684\u3001\u6211\u559c\u6b22\u7684\u4e1c\u897f\u4e4b\u524d\uff0c\u603b\u662f\u8981\u9001\u4e00\u53e5\u8bdd\u52c9\u52b1\u81ea\u5df1\uff0c\u5e76\u62a8\u51fb\u90a3\u4e9b\u8ba4\u4e3a\u8fd9\u79cd\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u6ca1\u6709\u4ec0\u4e48\u5b66\u7684\u5fc5\u8981\u7684\u4eba\uff1a\n\n## $\\color{cyan}{A}$ $\\color{cyan}{person}$ $\\color{cyan}{who}$ $\\color{cyan}{is}$ $\\color{cyan}{regarded}$ $\\color{cyan}{as}$ $\\color{cyan}{a}$ $\\color{cyan}{loser}$ $\\color{cyan}{isn't}$ $\\color{cyan}{those}$ $\\color{cyan}{ordinarys}$ $\\color{cyan}{,but}$ $\\color{cyan}{the}$ $\\color{cyan}{satisfieds}$ \n\n## \u6700\u6015\u4f60\u4e00\u751f\u5eb8\u788c\u65e0\u4e3a\uff0c\u5374\u603b\u662f\u5b89\u6170\u81ea\u5df1\u5e73\u51e1\u53ef\u8d35\n\n\u90a3\u4e48\u5f00\u59cb\u5427\uff01\n\n## \u4e00. \u65cb\u8f6c\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\uff1f\uff1f\uff1f\n\n\u65cb\u8f6c\u8fd9\u4e2a\u64cd\u4f5c\u5462\uff0c\u5728\u4e4b\u524d\u7684\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u53ef\u8c13\u89c1\u6240\u672a\u89c1\uff0c\u95fb\u6240\u672a\u95fb\uff08\u778e\u626f\u6de1ing\uff09\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u5148\u4ece\u65cb\u8f6c\u5f00\u59cb\u7814\u7a76\u5427\uff01\n\n\u7531\u4e8e\u662f\u5efa\u7acb\u5728\u4e00\u682a\u4e8c\u53c9\u641c\u7d22\u6811\u4e0a\u7684\uff0c\u6240\u4ee5\u5f53\u65f6\u662f\u4e00\u6761\u94fe\u65f6\uff0c\u65cb\u8f6c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u6811\u7684\u7ed3\u6784 qwqqq\u3002\n\n\u4e8e\u662f\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65cb\u8f6c\uff0c\u5b8c\uff01\n\n_________________\n\n\u8bf6\uff0c\u9a97\u4f60\u7684\u5566\uff0c\u600e\u4e48\u53ef\u80fd\u5b8c\uff0c\u4f60\u8981\u77e5\u9053\u6bcf\u4e2a\u8282\u70b9\u53ef\u90fd\u662f\u8fd8\u6709\u5b50\u8282\u70b9\u7684\uff0c\u5982\u679c\u76f4\u63a5\u65cb\u8f6c\u7684\u8bdd\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u8282\u70b9\u6709\u4e09\u4e2a\u5b50\u8282\u70b9\u7684\u60c5\u51b5 emmmmmm \u8fd9\u53ef\u4e0d\u662f\u6211\u4eec\u60f3\u770b\u5230\u7684\uff0c\u56e0\u4e3a\u77ac\u95f4\u4f60\u7684\u4e00\u68f5 $\\rm BT$ \u5c31\u6bc1\u706d\u4e86 qwqqqq\u3002\n\n\n\u90a3\u4e48\u5176\u5b9e\u4e3a\u4e86\u6ee1\u8db3 $\\rm BST$ \u7684\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u5b9d\u8d35\u7684\u89c4\u5f8b\u6765\uff1a\n\n\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u70b9\u4e0e\u4ed6\u7236\u4eb2\u7684\u5173\u7cfb\u662f $x$\uff0c\u90a3\u4e48\u5728\u65cb\u8f6c\u65f6\uff0c\u4ed6\u7684\u7236\u4eb2\u6210\u4e3a\u4e86\u4ed6\u7684 $!x$ \u513f\u5b50,\u5e76\u4e14\u90a3\u4e2a\u4e0a\u6587\u4e2d\u6240\u8bf4\u7684\u201c\u591a\u4f59\u7ed3\u70b9\u201d\uff0c\u540c\u65f6\u4e5f\u662f\u5f53\u524d\u8282\u70b9\u7684 $!x$ \u513f\u5b50\uff0c\u4f46\u5728\u65cb\u8f6c\u4e4b\u540e\u9700\u8981\u6210\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u201c\u524d\u201d\u7236\u8282\u70b9\u7684 $x$ \u513f\u5b50\u3002\n\n\n$Talk$ $is$ $\\color{silver}{cheap}$ $,show$ $you$ $the$ $\\color{silver}{code}$:\n\n```cpp\ninline void update(int x){\n\tif(x){\n\t\tsub_size[x]=cnt[x];\n\t\tif(sons[x][1])sub_size[x]+=sub_size[sons[x][1]];\n\t    if(sons[x][0])sub_size[x]+=sub_size[sons[x][0]];\n\t}\n\treturn ;\n}\ninline bool get_which(int x){\n\treturn sons[f[x]][1]==x;\n}\ninline void rotate(int x){\n\tint father=f[x],g_father=f[father];\n\tbool which_son=get_which(x);//\u5f53\u524d\u8282\u70b9\u7684\u5173\u7cfb\n\tsons[father][which_son]=sons[x][which_son^1];\n\tf[sons[father][which_son]]=father;\n\tsons[x][which_son^1]=father;\n\tf[father]=x;\n\tf[x]=g_father;\n\tif(g_father){\n\t\tsons[g_father][get_which(father)]=x;\n\t}\n\tupdate(x);\n\tupdate(father);\n}\n```\n\n`son` \u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\uff0c`f` \u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2 `sub_size[i]` \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\u3002\n\n\u8bf6\uff0c\u4e3a\u4ec0\u4e48\u8981\u8bb0\u5f55\u5b50\u6811\u5927\u5c0f\u554a\uff1f\n\nqwqqq \u662f\u4e3a\u4e86\u65b9\u4fbf\u6267\u884c\u4e4b\u540e\u7684 $zz$ \u64cd\u4f5c\u554a\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u770b Splay \u64cd\u4f5c\uff0c\u5176\u5b9e\u8fd9\u4e2a\u64cd\u4f5c\u5341\u5206\u5730\u7b80\u5355\uff0c\u4e0d\u8fc7\u662f\u62fc\u547d\u5730\u5411\u4e0a\u65cb\u8f6c\u81f3\u6839\u8282\u70b9\u800c\u5df2\uff0c\u4f46\u5728\u8fd9\u5176\u4e2d\u8fd8\u6709\u4e9b\u5730\u65b9\u503c\u5f97\u6ce8\u610f\uff1a\n\n$\\mathcal{1.}$ \u5982\u679c\u7237\u7237\u8282\u70b9\u3001\u7236\u8282\u70b9\u4e0e\u81ea\u5df1\u4e0d\u5171\u7ebf\uff0c\u90a3\u4e48\u5c31\u662f\u8fd9\u6837\n![](https://cdn.luogu.com.cn/upload/pic/17965.png)\n\n\u8fd9\u65f6\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4f1a\u600e\u6837\u2026\u2026\u4f60\u5c31\u4e0d\u65ad\u65cb\u8f6c\u5c31\u884c\u4e86$qwq$\n\n$\\mathcal{2.}$\u5982\u679c\u4e09\u4e2a\u8282\u70b9\u5171\u7ebf\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u5148\u8981\u65cb\u8f6c\u7236\u8282\u70b9\uff0c\u56e0\u4e3a\u5982\u679c\u5148\u65cb\u8f6c\u5b50\u8282\u70b9\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u539f\u6765\u534e\u4e3d\u7684\u4e00\u6761\u94fe\u7684\u7ed3\u6784\u88ab\u7834\u574f\uff0c\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u5373\u4f1a\u5bfc\u81f4\u8fd9\u68f5\u6811\u5931\u8861\uff0c\u6240\u4ee5\u5e94\u8be5\u5148\u65cb\u8f6c\u7236\u8282\u70b9\uff0c\u518d\u65cb\u8f6c\u5b50\u8282\u70b9$qwq$\n\n![](https://cdn.luogu.com.cn/upload/pic/17966.png)\n\n\u256e(\uffe3\u25bd\uffe3\")\u256d\u867d\u7136\u6211\u4e0d\u662f\u5f88\u60f3\u505a\u6548\u679c\u56fe\uff0c\u4f46\u662f\u4e3a\u4e86\u4f60\u4eec\u6211\u5fcd\u4e86\uff08\u9003\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u662f\u5f53\u4e09\u4e2a\u70b9\u5171\u7ebf\u65f6\u7684\u4e24\u79cd\u5904\u7406\u65b9\u5f0f\u7684\u4e0d\u540c\u7ed3\u679c\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/17969.png)\n\nemmmm \u5b9e\u8d28\u4e0a\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u94fe\u5f88\u957f\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u6267\u884c\u5148\u65cb\u7236\u8282\u70b9\u518d\u65cb\u5f53\u524d\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4e00\u6b21\u603b\u64cd\u4f5c\u4e4b\u540e\uff0c\u8fd9\u6761\u94fe\u7684\u6df1\u5ea6\u4f1a\u51cf\u534a\u3002\n\n$Talk$ $is$ $\\color{silver}{cheap}$ $,show$ $you$ $the$ $\\color{silver}{code}$:\n\n```cpp\ninline void splay(int x){\n\tfor (int fa;fa=f[x];rotate(x))  \n      if (f[fa])  \n        rotate((get_which(x)==get_which(fa))?fa:x);  \n    root=x;  \n}\n```\n\u8bf6\uff0c\u4e0a\u56fe\u753b\u7684\u597d\u50cf\u4e0d\u662f\u5f88\u6d45\u663e\uff0c\u56e0\u4e3a\u8282\u70b9\u6570\u592a\u5c11\u4e86\uff0c\u4f46\u662f\u65e0\u8bba\u5982\u4f55\uff0c\u672c\u849f\u84bb\u7528\u673a\u623f\u7684 XP \u753b\u56fe\u505a\u56fe\u5f88\u96be\u53d7\u7684...\n\n____________________\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u2026\u2026\u90a3\u4e9b\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u6211\u5c31\u4e0d\u8d58\u8ff0\u4e86\uff0c\u56e0\u4e3a\u672c\u8eab\u4e8c\u53c9\u641c\u7d22\u6811\u5c31\u53ef\u4ee5\u652f\u6301\u627e\u524d\u9a71\u540e\u7ee7\u3001\u627e\u6392\u540d\u627e\u6570\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u4e24\u70b9\uff1a\n\n1.\u6bcf\u6b21\u8fdb\u884c\u6709\u5173\u70b9\u7684\u64cd\u4f5c\u65f6\u90fd\u8981 Splay \u4e00\u6b21\uff0c\u56e0\u4e3a\u8981\u7ef4\u62a4\u6811\u7684\u968f\u673a\u6027\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u7ef4\u62a4\u590d\u6742\u5ea6\u3002\n\n2.\u6ce8\u610f\u7b2c\u4e00\u6761\u4e2d\u7684\u201c\u6709\u5173\u70b9\u201d\uff0c\u6bd4\u5982\u5f53\u7ed9\u51fa\u6392\u540d\u627e\u6570\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u5176\u5b9e\u8ddf\u8fd9\u4e2a\u70b9\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u6240\u4ee5\u4e0d\u7528 Splay .\n\n$\\rm Show~ The~ Whole ~Code$\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\n#define MAXN 1000000\nint f[MAXN],cnt[MAXN],value[MAXN],sons[MAXN][2],sub_size[MAXN],whole_size,root;                 \ninline int qread(){\n    int res=0,k=1;\n    char c=getchar();\n    while(!isdigit(c)){\n        if(c=='-')k=-1;\n        c=getchar();\n    }\n    while(isdigit(c)){\n        res=(res<<1)+(res<<3)+c-48;\n        c=getchar();\n    }\n    return res*k;\n}\ninline void S_Clear(int x){\n    sons[x][0]=sons[x][1]=f[x]=sub_size[x]=cnt[x]=value[x]=0; \n}\ninline bool get_which(int x){\n    return sons[f[x]][1]==x;\n}\ninline void update(int x){\n    if (x){  \n        sub_size[x]=cnt[x];  \n        if (sons[x][0]) sub_size[x]+=sub_size[sons[x][0]];  \n        if (sons[x][1]) sub_size[x]+=sub_size[sons[x][1]];  \n    }  \n    return ;\n}\ninline void rotate(int x){\n    int father=f[x],g_father=f[father],which_son=get_which(x);\n    sons[father][which_son]=sons[x][which_son^1];\n    f[sons[father][which_son]]=father;\n    sons[x][which_son^1]=father;\n    f[father]=x;\n    f[x]=g_father;\n    if(g_father){\n        sons[g_father][sons[g_father][1]==father]=x;\n    }\n    update(father);\n    update(x);\n}\ninline void splay(int x){\n    for (int fa;fa=f[x];rotate(x))  \n      if (f[fa])  \n        rotate((get_which(x)==get_which(fa))?fa:x);  \n    root=x;  \n}\ninline void insert(int x){\n    if(!root){\n        whole_size++;\n        sons[whole_size][0]=sons[whole_size][1]=f[whole_size]=0;\n        root=whole_size;\n        sub_size[whole_size]=cnt[whole_size]++;\n        value[whole_size]=x;\n        return ;\n    } \n    int now=root,fa=0;\n    while(1){\n        if(x==value[now]){\n            cnt[now]++;\n            update(now);\n            update(fa);\n            splay(now);\n            break;\n        }\n        fa=now;\n        now=sons[now][value[now]<x];\n        if(!now){\n            whole_size++;\n            sons[whole_size][0]=sons[whole_size][1]=0;\n            f[whole_size]=fa;\n            sub_size[whole_size]=cnt[whole_size]=1;\n            sons[fa][value[fa]<x]=whole_size;\n            value[whole_size]=x;\n            update(fa);\n            splay(whole_size);\n            break; \n        }\n    }\n    \n}\ninline int find_num(int x){ \n    int now=root;\n    while(1){\n        if(sons[now][0]&&x<=sub_size[sons[now][0]])\n        now=sons[now][0];\n        else {\n            int temp=(sons[now][0]?sub_size[sons[now][0]]:0)+cnt[now];\n            if(x<=temp)return value[now];\n            x-=temp;\n            now=sons[now][1];\n        }\n    }\n}\n\ninline int find_rank(int x){\n      int now=root,ans=0;  \n    while(1){  \n        if (x<value[now])  \n          now=sons[now][0];  \n        else{  \n            ans+=(sons[now][0]?sub_size[sons[now][0]]:0);  \n            if (x==value[now]){  \n                splay(now); return ans+1;  \n            }  \n            ans+=cnt[now];  \n            now=sons[now][1];  \n        }  \n    }  \n}\ninline int find_pre(){\n    int now=sons[root][0];\n    while(sons[now][1])now=sons[now][1];\n    return now;\n}\ninline int find_suffix(){\n    int now=sons[root][1];\n    while(sons[now][0])now=sons[now][0];\n    return now;\n}\ninline void my_delete(int x){\n    int hhh=find_rank(x);\n    if (cnt[root]>1){\n    cnt[root]--; \n    update(root); \n    return;\n    }  \n    if (!sons[root][0]&&!sons[root][1]) {\n    S_Clear(root);\n    root=0;\n    return;\n    }  \n    if (!sons[root][0]){  \n        int old_root=root; \n        root=sons[root][1];\n        f[root]=0; \n        S_Clear(old_root); \n        return;  \n    }  \n     \n    else if (!sons[root][1]){  \n        int old_root=root; \n        root=sons[root][0]; \n        f[root]=0; \n        S_Clear(old_root); \n        return;  \n    } \n    int left_max=find_pre(),old_root=root;  \n    splay(left_max);  \n    sons[root][1]=sons[old_root][1];  \n    f[sons[old_root][1]]=root;  \n    S_Clear(old_root);  \n    update(root);  \n}\n\n   \nint main(){\n    int m,num,be_dealt;\n    cin>>m;\n    for(int i=1;i<=m;i++){\n       num=qread();\n       be_dealt=qread();\n        switch(num)\n        {\n            case 1:insert(be_dealt);break;\n            case 2:my_delete(be_dealt);break;\n            case 3:printf(\"%d\\n\",find_rank(be_dealt));break;\n            case 4:printf(\"%d\\n\",find_num(be_dealt));break;\n            case 5:insert(be_dealt);printf(\"%d\\n\",value[find_pre()]);my_delete(be_dealt);break;\n            case 6:insert(be_dealt);printf(\"%d\\n\",value[find_suffix()]);my_delete(be_dealt);break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1524401789,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "More Senior Data Structure \u00b7 \u7279\u522b\u6d45\u5730\u6d45\u8c08Splay"
    },
    {
        "content": "**01trie**\n\n\u5df2\u77e5\u6700\u597d\u5199\u7684\u5e73\u8861\u6811\uff0c\u81f3\u5c11\u76ee\u524d\u5e38\u6570\u6700\u5c0f\uff08\u6d4b\u4e86\u5927\u90e8\u5206\u5e73\u8861\u6811\u5b9e\u73b0\uff09\n\n\u8dd1\u7684\u6bd4\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ec0\u4e48\u7684\u5feb\u591a\u4e86\n\n\u6bd4Splay\u5feb1.5-2\u500d\n\n\n\n\u552f\u4e00\u7f3a\u70b9\u662f\u4e0d\u80fd\u50cfSplay\u4e00\u6837\u533a\u95f4\u64cd\u4f5c\uff08\u4e0d\u8fc7\u80fd\u505a\u8fd9\u4e2a\u7684\u597d\u50cf\u4e0d\u591a...\uff09\n\n\u8fd8\u6709\u5185\u5b58\u5360\u7528\u8f83\u5927\uff0c\u4e0d\u8fc7\u6b63\u5e38\u4f7f\u75281e5-3e5\u51e0\u4e4e\u90fd\u662f\u6700\u592730M\u5de6\u53f3\n\n\n\n\u4e3b\u8981\u662f\u57fa\u4e8e\u4e8c\u8fdb\u5236\u5206\u89e3\u7684 Trie\n\n\u540c\u65f6\u6ee1\u8db3\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u7ebf\u6bb5\u6811\u548c\u5e73\u8861\u6811\u6027\u8d28\uff0c\u5177\u6709\u9ad8\u53ef\u6269\u5c55\u6027\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nconst int maxlog = 25;\nconst int MAXN = 100010;\nusing namespace std;\n\nnamespace trie{\n\tint id = 2;//\u6b64\u65f6id = 2 \n\tint ch[MAXN * maxlog][2];\n\tint sz[MAXN * maxlog];\n\t//int nval[MAXN * maxlog];\n\tint newnode(){\n\t\tch[id][0] = ch[id][1] = sz[id] = 0;\n\t\treturn id++;\n\t}\t\t\t\t\n\tvoid ins(int x,int d){\t\t\t\n\t\tint u = 1;\t\t\t\n\t\tfor(int i = maxlog - 1;i >= 0;i--){\t\t\t\n\t\t\tint v = (x >> i) & 1;//\u5fc5\u987b\u662f\u5de6\u79fbx \t\t\t\n\t\t\tif(!ch[u][v]) ch[u][v] = newnode();\t\t\t\n\t\t\tu = ch[u][v];\t\t\n\t\t\tsz[u] += d;//sz[1] = 0; \t\n\t\t}\t\t\t\t\n\t\t//nval[u] += d;\t\t\t\t\n\t}\t\t\t\t\t\t\t\t\t\t\n\tint kth(int k){\n\t\tint u = 1;\n\t\tint x = 0;\n\t\tfor(int i = maxlog - 1;i >= 0;i--){\n\t\t\tif(sz[ch[u][0]] >= k){\t///////////////////////////> >=\t\t\t\t\t\t\n\t\t\t\tu = ch[u][0]; \n\t\t\t}\n\t\t\telse{\n\t\t\t\tx |= (1 << i);\n\t\t\t\tk -= sz[ch[u][0]];\n\t\t\t\tu = ch[u][1];\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\tint nlt(int x){\n\t\tint ans = 0;\n\t\tint u = 1;\n\t\tfor(int i = maxlog - 1;i >= 0;i--){\n\t\t\tif((x >> i) & 1){\n\t\t\t\tans += sz[ch[u][0]];\n\t\t\t\tu = ch[u][1];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tu = ch[u][0];\n\t\t\t}\n\t\t\tif(!u) break;//\u4e0d\u5fc5\u6709\u7684 \n\t\t}             \n\t\treturn ansn\t}\t\n\tvoid clear(){\n\t\tch[1][0] = ch[1][1] = 0;\n\t\tid = 2;\n\t} \n\tint pre(int x){\n\t\tint ans;\n\t\t//ins(x,1);\n\t\tans = kth(nlt(x));\n\t\t//ins(x,-1);\n\t\treturn ans;\n\t}\n\tint next(int x){\n\t\tint ans;\n\t\t//ins(x,1);\n\t\tans = kth(nlt(x+1)+1);\n\t\t//ins(x,-1);\n\t\treturn ans;\n\t}\n} \n\nconst int num = 10000000; \nint main(){\n\t int n;\n\t scanf(\"%d\",&n);\n\t for(int i = 0;i < n;i++){\n\t \tint ord,t;\n\t \tscanf(\"%d%d\",&ord,&t);\n\t\tswitch(ord){\n\t\t\tcase 1:trie::ins(t + num,1);break;\n\t\t\tcase 2:trie::ins(t + num,-1);break;\n\t\t\tcase 3:printf(\"%d\\n\",trie::nlt(t + num) + 1);break;\n\t\t\tcase 4:printf(\"%d\\n\",trie::kth(t) - num);break;\n\t\t\tcase 5:printf(\"%d\\n\",trie::pre(t + num) - num);break;\n\t\t\tcase 6:printf(\"%d\\n\",trie::next(t + num) - num);break;\n\t\t}\n\t}\n\treturn 0;\n} \n```\n\u597d\u5199\u597d\u8c03\uff0c\u5e38\u6570\u6bd4splay\u5c0f1.5-2\u500d\uff0c\u6bd4\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5c0f\u5f97\u591a\uff0c\u5e76\u4e14\u51e0\u4e4e\u4e0d\u9700\u8981\u8c03\u8bd5\n\n\u6d6e\u70b9\u6570\u76f4\u63a5\u6307\u9488\u5f3a\u5236\u8f6clong long\uff0c\u6309\u4f4d\u6bd4\u8f83double/single\u5185\u5b58\u662f\u53ef\u4ee5\u7684",
        "postTime": 1535891155,
        "uid": 54974,
        "name": "GeorgeJia",
        "ccfLevel": 0,
        "title": "01trie"
    },
    {
        "content": "\u6211\u662f\u7528\u4e86\u5f53treap\u6a21\u677f\u9898\u505a\u7684\u3002\r\n\r\n\u89e3\u91ca\u4e00\u4e0b\u53d8\u91cf\u5427......s(x,0)\u8868\u793a\u5de6\u513f\u5b50\uff0cs(x,1)\u8868\u793a\u53f3\u513f\u5b50\uff0csiz\u662f\u5b50\u6811\u7684\u5927\u5c0f,w\u662f\u5f53\u524d\u70b9\u7684\u6743\u503c,pos\u662f\u968f\u673a\u51fa\u6765\u7684\u4e00\u4e2a\u503c\uff0c\u7528\u4e8e\u4fdd\u8bc1treap\u7684\u5c3d\u91cf\u5e73\u8861\u3002\r\n\r\n\u6709\u4eba\u8bf4\u6211\u7f29\u884c\u4e25\u91cdQAQ......?\u6211\u660e\u660e\u6ca1\u6709\u4e00\u884c\u8d85\u8fc7\u4e8680\u884c\u88abD\u7ebf\u7684......\u800c\u4e14\u540c\u4e00\u884c\u7684\u8bed\u53e5\u4ece\u903b\u8f91\u4e0a\u6765\u8bf4\u662f\u6709\u5173\u8054\u7684\u554a......?\r\n\r\ntreap\u7684\u65cb\u8f6c\u64cd\u4f5c\uff1a\r\n\r\n```cpp\r\nvoid up(int i){siz[i]=siz[s[i][0]]+siz[s[i][1]]+1;}\r\nvoid spin(int &i,int p){\r\n    int t=s[i][p];\r\n    s[i][p]=s[t][!p],s[t][!p]=i,up(i),up(t),i=t;\r\n}\r\n```\r\n\u90a3\u4e48\u8bb2\u8bb2treap\u505a\u6cd5\uff1a\r\n\r\n1.\u63d2\u5165\uff1a\u7ed9\u6bcf\u4e2a\u70b9\u968f\u673a\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u7136\u540e\u5982\u679c\u5b50\u8282\u70b9\u7684\u4f18\u5148\u7ea7\u8981\u5c0f\u4e8e\u7236\u8282\u70b9\uff0c\u6211\u4eec\u5c31\u628a\u5b50\u8282\u70b9\u65cb\u8f6c\u4e0a\u53bb\u3002\r\n\r\n```cpp\r\nvoid ins(int x,int &i){\r\n    if(!i){i=++tot,siz[i]=1,w[i]=x,pos[i]=rand();return;}\r\n    siz[i]++;\r\n    if(x<=w[i]){ins(x,s[i][0]);if(pos[s[i][0]]<pos[i])spin(i,0);}\r\n    else {ins(x,s[i][1]);if(pos[s[i][1]]<pos[i])spin(i,1);}\r\n}\r\n```\r\n2.\u5220\u9664\uff1a\u5c06\u8fd9\u4e2a\u70b9\u4f18\u5148\u7ea7\u5c0f\u7684\u5b50\u8282\u70b9\u65cb\u8f6c\u4e0a\u6765\uff0c\u4e00\u76f4\u5c06\u5176\u65cb\u5230\u53f6\u5b50\uff0c\u7136\u540e\u5220\u9664\u3002\r\n\r\n```cpp\r\nvoid del(int x,int &i){\r\n    if(w[i]==x){\r\n        if(s[i][0]*s[i][1]==0){i=s[i][0]+s[i][1];return;}\r\n        if(pos[s[i][0]]>pos[s[i][1]]){spin(i,1);del(x,s[i][0]);}\r\n        else {spin(i,0);del(x,s[i][1]);}\r\n    }\r\n    else if(w[i]>x)del(x,s[i][0]);\r\n    else del(x,s[i][1]);\r\n    up(i);\r\n}\r\n```\r\n3.\u67e5\u627ex\u6570\u7684\u6392\u540d\r\n\r\n\u53ea\u8981\u7ef4\u62a4\u5de6\u53f3\u5b50\u6811\u7684\u5927\u5c0f\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u4e00\u70b9\uff1a\u56e0\u4e3a\u6211\u4eec\u67e5\u8be2\u7684\u662f\u6700\u5c0f\u7684\u6392\u540d\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u67e5\u5230x\u6570\u7684\u65f6\u5019\uff0c\u4e0d\u5e94\u8be5\u4e4b\u95f4\u8fd4\u56de\uff0c\u800c\u5e94\u8be5\u9012\u5f52\u4e0b\u53bb\uff0c\u76f4\u5230\u5230\u8fbe0\u4e3a\u6b62\uff08\u5f00\u59cb\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e2a\u624dWA\u7684\uff0c\u4e5f\u6ce8\u610f\u4e0d\u8981\u5199\u5982\u679c\u5176\u5de6\u513f\u5b50\u8fd8\u662fx\u5c31\u7ee7\u7eed\u9012\u5f52\u5426\u5219\u8fd4\u56de\uff0c\u56e0\u4e3a\u53ef\u80fd\u8fd8\u6709x\u5728\u5176\u5de6\u513f\u5b50\u7684\u53f3\u5b50\u6811\u4e2d\u3002\uff09\r\n\r\n```cpp\r\nint find(int x,int i){\r\n    if(!i)return 1;\r\n    if(w[i]>=x)return find(x,s[i][0]);\r\n    return find(x,s[i][1])+siz[s[i][0]]+1;\r\n}\r\n```\r\n4.\u67e5\u627e\u6392\u540d\u4e3ax\u7684\u6570\r\n\r\n\u8fd9\u4e2a\u5c31\u66f4\u7b80\u5355\u4e86\u4e0d\u662f\u5417\uff1f\r\n\r\n```cpp\r\nint ask(int x,int i){\r\n    if(siz[s[i][0]]==x-1)return w[i];\r\n    if(siz[s[i][0]]>=x)return ask(x,s[i][0]);\r\n    return ask(x-siz[s[i][0]]-1,s[i][1]);\r\n}\r\n```\r\n5/6\uff1a\u67e5\u627e\u524d\u9a71/\u540e\u7ee7\r\n\r\n\u524d\u9a71\uff1a\u627e\u5230\u4e00\u4e2a\u6bd4x\u5c0f\u7684\u6570\uff0c\u5c31\u8bb0\u5f55\u8fd9\u4e2a\u6570\u5e76\u5224\u65ad\u8fd9\u4e2a\u6570\u7684\u53f3\u5b50\u6811\uff08\u6bd4\u8fd9\u4e2a\u6570\u5927\u7684\u6570\uff09\u4e2d\u662f\u5426\u8fd8\u6709\u6bd4x\u5c0f\u7684\u6570\u3002\u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u5f80\u5de6\u5b50\u6811\u4e2d\u7ee7\u7eed\u627e\u3002\r\n\r\n\u540e\u7ee7\u540c\u7406\u3002\r\n\r\n```cpp\r\nint pre(int x,int i){\r\n    if(!i)return -2000000005;\r\n    if(w[i]<x)return max(w[i],pre(x,s[i][1]));\r\n    else return pre(x,s[i][0]);\r\n}\r\nint nxt(int x,int i){\r\n    if(!i)return 2000000005;\r\n    if(w[i]>x)return min(w[i],nxt(x,s[i][0]));\r\n    else return nxt(x,s[i][1]);\r\n}\r\n```",
        "postTime": 1499666145,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u5f3a\u52bf\u56fe\u89e3 $\\texttt{FHQ Treap}$\u3002\n\n\u9996\u5148\u8bf4\u4e00\u8bf4 $\\texttt{FHQ Treap}$ \u7684\u4f18\u70b9,\u597d\u7406\u89e3,\u4e0a\u624b\u5feb,\u4ee3\u7801\u4e00\u822c\u5f88\u77ed,\u53ef\u6301\u4e45\u5316\u7b49\u3002\n\n\u91cd\u8981\u7684\u662f\u4e0d\u7528\u65cb\u8f6c\u3002\n\n$\\texttt{FHQ Treap}$ \u540c\u65f6\u4e5f\u501f\u7528\u4e86 $\\texttt{Treap}$ \u7684\u7279\u70b9,\u6bcf\u4e00\u4e2a\u8282\u70b9\u62e5\u6709\u4e24\u4e2a\u6743\u503c,\u4e00\u4e2a\u662f\u4e8c\u53c9\u6811\u6743\u503c $tree$,\u53e6\u4e00\u4e2a\u662f $heap$\u3002\u5176\u6b21,\u5b83\u57fa\u4e8e\u4e24\u4e2a\u64cd\u4f5c,\u4e00\u4e2a\u662f\u5206\u88c2 $\\texttt{Split}$,\u53e6\u4e00\u4e2a\u662f $\\texttt{Merge}$\u3002\n\n$\\texttt{Split}$ \u7684\u610f\u601d\u5c31\u662f\u5c06\u8fd9\u9897\u4e8c\u53c9\u6811\u6309\u67d0\u79cd\u6761\u4ef6\u63b0\u5f00\u4e24\u534a\u3002\u8fd9\u9053\u9898\u662f\u6309\u6743\u503c\u7684\u5927\u5c0f\u63b0\u5f00\u3002\u5047\u5982\u4e00\u68f5\u6811\u8981\u4ee5 $\\texttt{6}$ \u6765\u63b0\u5f00,\u5982\u56fe : (\u4e0b\u65b9\u90fd\u662f $tree$ \u503c)\n\n![](https://i.loli.net/2019/02/23/5c70f2d1b0d50.png)\n\n\u7136\u540e\u5927\u529b\u5f00\u82b1\n\n![](https://i.loli.net/2019/02/23/5c70f2f76c4dc.png)\n\n\u7ea6\u5b9a : \u5206\u88c2\u540e\u5de6\u8fb9\u7684\u6811\u4e3a $x$,\u53f3\u8fb9\u7684\u6811\u4e3a $y$,\u5b83\u4eec\u7684\u6839\u4e3a $X$ \u548c $Y$\u3002\n\n\u90a3\u4e48\u5408\u5e76\u5462? \u5c31\u662f\u5927\u529b\u5c06\u4e24\u68f5\u6811\u5408\u5728\u4e00\u8d77\u3002\n\n\u90a3\u4e48\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u6709\u4ec0\u4e48\u7528\u5462?\n\n$$\\large\\texttt{Insert}$$\n\n\u9996\u5148\u662f\u63d2\u5165\u4e00\u4e2a\u6570\u5b57 $k$\u3002\n\n\u6211\u4eec\u60f3,\u5982\u679c\u6211\u4eec\u6309\u7167 $k$ \u63b0\u5f00\u6574\u9897\u6811,\u7136\u540e\u5c06 $k$ \u5f3a\u884c\u5957\u8fdb\u53bb,\u7136\u540e\u518d\u5408\u8d77\u6765\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u5462\u4e86\u3002\n\n\u56fe\u89e3 : (\u5047\u5982 $\\texttt{Insert}\\ 5$)\n\n![](https://i.loli.net/2019/02/23/5c70f511e0404.png)\n\n\u7136\u540e\u662f $\\texttt{FHQ Treap}$ \u7684\u63d2\u5165 (\u535a\u4e3b\u6ca1\u6709\u8003\u8651 $heap$ \u503c,\u6240\u4ee5\u5927\u5bb6\u5148\u611f\u6027\u7406\u89e3)\n\n![](https://i.loli.net/2019/02/23/5c70f674ddf72.png)\n\n\u4ee3\u7801?\n\n```pascal\nprocedure Insert(val:longint);\nvar x,y,o:longint;\nbegin\n\tx:=0; y:=0; Add(val); o:=n; // \u65b0\u5efa\u4e00\u4e2a\u8282\u70b9,\u5de6\u6811\u7684\u6839\u4e3a x,\u53f3\u6811\u7684\u6839\u8bf6 y\n\tSplit(root,x,y,val); // \u8fd9\u4e00\u4e2a\u5206\u88c2\u64cd\u4f5c\u4f1a\u8fd4\u56de x,y,\u8fd8\u4f1a\u5c06\u4e00\u4e9b\u8fb9\u6539\u53d8\n\tMerge(x,x,o); Merge(root,x,y); // \u5c06 x \u6811\u548c\u65b0\u8282\u70b9\u5408\u5e76,\u5f62\u6210\u7684\u65b0\u6811\u8ddf y \u8282\u70b9\u5408\u5e76\nend;\n```\n\u6211\u4eec\u53ef\u4ee5\u4f9d\u8d56 $\\texttt{Merge}$ \u6765\u7ef4\u62a4\u5806\u7684\u6027\u8d28\u3002\n \n\n$$\\large\\texttt{Delete}$$\n\n\u4f17\u6240\u5468\u77e5,$\\texttt{BST}$ \u7684\u5220\u9664\u65e0\u6bd4\u9ebb\u70e6\u3002\n\n$\\texttt{FHQ Treap}$ \u53ef\u771f\u662f\u55e8\u5230\u4e0d\u884c\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u77e5\u9053,\u5982\u679c\u6211\u4eec\u628a\u4e00\u4e2a\u70b9\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u5408\u5728\u4e00\u8d77,\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u4f1a\u53d8\u6210 $\\texttt{JO}$ \u6781\u751f\u7269\u3002\n\n\u6211\u4eec\u8981\u5220\u9664\u8282\u70b9 $k$\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u628a\u8fd9\u68f5\u6811\u5206\u6210\u4ee5 $k$ \u9886\u5bfc\u7684\u6811\u548c\u975e $k$ \u9886\u5bfc\u7684\u6811,\u5c31\u662f\u5927\u529b\u63b0\u5f00\u3002\u7136\u540e\u628a\u4ee5 $k$ \u9886\u5bfc\u7684\u6811\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u5408\u8d77\u6765,\u5c06 $k$ \u4e22\u5165\u865a\u65e0\u3002\u7136\u540e\u518d\u5408\u5e76\u65b0\u5408\u6210\u7684\u6811\u548c\u975e $k$ \u9886\u5bfc\u7684\u6811\u3002\n\n\u56fe\u89e3 : (\u5047\u5982\u6211\u4eec $\\texttt{Delete}\\ 9$)\n\n![](https://i.loli.net/2019/02/23/5c70fa1c92768.png)\n\n```pascal\nprocedure Delete(val:longint);\nvar x,y,o:longint;\nbegin\n\tx:=0; y:=0; o:=0;\n\tSplit(root,x,y,val); // \u5206\u88c2\u6210 x,y \u6811 \n   \tSplit(x,x,o,val-1); // \u5206\u88c2\u6210 x',o \u6811\n\tMerge(o,son[o,0],son[o,1]); // \u5c06 o \u6811\u7684\u6839\u5e72\u6389,\u7136\u540e\u53d8\u6210\u65b0\u7684 o \u6811\n\tMerge(x,x,o); // o+x' \u6811=x\u6811\n   \tMerge(root,x,y); // x+y\u6811\nend;\n```\n\n$$\\large\\texttt{Query}$$\n\n\u8fd9\u4e2a\u64cd\u4f5c\u662f\u67e5\u8be2\u7b2c $K$ \u5927,\u8981\u6309\u7167\u666e\u901a\u7684\u67e5\u8be2\u65b9\u6cd5\u6765\u641e\u3002\n\n```pascal\nfunction Query(now,k:longint):longint;\nbegin\n\tQuery:=0;\n\tif size[son[now,0]]+1=k then exit(tree[now]);\n\tif size[son[now,0]]>=k then Query:=Query(son[now,0],k) else\n\tQuery:=Query(son[now,1],k-size[son[now,0]]-1);\nend;\n```\n\n$$\\large\\texttt{Rank}$$\n\n\u6c42\u6570\u5b57 $k$ \u7684\u6392\u540d\u3002\n\n\u6211\u4eec\u518d\u6b21\u5927\u529b\u63b0\u5f00,\u628a $k-1$ \u8fd9\u4e2a\u70b9\u62ff\u51fa\u6765\u3002\u8fd9\u4e2a\u65f6\u5019\u6839 $x$ \u90fd\u662f $\\leq k-1$ \u7684 (\u4e5f\u5c31\u662f $< k$)\u3002\u7136\u540e\u6211\u4eec\u628a\u5b83\u7684 $size$ \u62ff\u51fa\u6765,\u52a0\u4e2a\u4e00\u5c31\u597d\u4e86\u3002\n\n```pascal\nfunction Rank(k:longint):longint;\nvar x,y:longint;\nbegin\n\tx:=0; y:=0; Split(root,x,y,k-1);\n\tRank:=size[x]+1; Merge(root,x,y);\nend;\n```\n\n$$\\large\\texttt{Precursor}$$\n\n\u6c42\u6570\u5b57 $k$ \u7684\u524d\u7f00\u3002\n\n\u4f60\u6309\u7167 $k-1$ \u63b0\u5f00\u8fd9\u68f5\u6811,\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u68f5\u6811\u90fd\u662f $< k$ \u7684,\u7136\u540e\u627e\u6700\u5927\u503c\u3002\n\n\u56fe\u89e3 : ($\\texttt{Precursor}\\ 5$)\n\n![](https://i.loli.net/2019/02/23/5c70fc769faf7.png)\n\n```pascal\nfunction Precursor(k:longint):longint;\nvar x,y:longint;\nbegin\n\tx:=0; y:=0; Split(root,x,y,k-1);\n\tPrecursor:=Query(x,size[x]);\n\tMerge(root,x,y);\nend;\n```\n\n$$\\large\\texttt{Next}$$\n\n\u6c42\u6570\u5b57 $k$ \u7684\u540e\u7ee7\u3002\n\n\u4f60\u6309\u7167 $k$ \u63b0\u5f00\u8fd9\u68f5\u6811,\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u68f5\u6811\u90fd\u662f $\\ge k$ \u7684,\u7136\u540e\u627e\u6700\u5c0f\u503c\u3002\n\n```pascal\nfunction Next(k:longint):longint;\nvar x,y:longint;\nbegin\n\tx:=0; y:=0; Split(root,x,y,k);\n\tNext:=Query(y,1);\n\tMerge(root,x,y);\nend;\n```\n$$\\large\\texttt{Split}$$\n\n\u6fc0\u52a8\u4eba\u5fc3\u7684\u65f6\u5019\u5230\u4e86\u3002\n\n\n$son[i,0/1]$ \u4e3a\u5de6\u53f3\u513f\u5b50\u3002\n\n\u6309\u7167 $tree$ \u6765\u5206\u88c2\u3002\n\n\u56fe\u89e3 : (\u7ea2\u8272\u5708\u4ee3\u8868\u73b0\u5728\u6240\u5728\u7684\u8282\u70b9,\u84dd\u8272\u3001\u6a59\u8272\u4ee3\u8868\u7ecf\u8fc7\u7ea2\u8272\u5708\u540e\u6240\u63a8\u51fa\u8fd9\u4e00\u90e8\u5206\u5728\u5de6\u6811\u8fd8\u662f\u53f3\u6811,\u7070\u8272\u4ee3\u8868\u672a\u77e5)\n\n![](https://i.loli.net/2019/02/23/5c7117fb8b454.png)\n\n```pascal\nprocedure Split(now:longint;var a,b:longint;val:longint);\nbegin\n\t// now \u4e3a\u73b0\u5728\u7684\u8282\u70b9,a,b \u4e3a\u5206\u88c2\u7684\u6811,val \u4e3a\u8981\u63b0\u5f00\u7684\u503c\n\tif now=0 then begin a:=0; b:=0; exit; end; // \u7ed3\u675f\u5206\u88c2\n\tif tree[now]<=val then // \u5982\u679c\u8fd9\u4e2a tree \u503c\u8981\u653e\u5728\u5de6\u8fb9\n\tbegin a:=now; Split(son[now,1],son[a,1],b,val); end // \u90a3\u4e48\u8fd9\u4e2a\u6811 a \u7684\u53f3\u513f\u5b50\u8fd8\u662f\u53ef\u80fd\u4f1a\u5927\u4e8e val \u7684,\u6240\u4ee5\u7ed9 b\n\telse begin b:=now; Split(son[now,0],a,son[b,0],val); end; // \u540c\u7406\n\tsize[now]:=size[son[now,0]]+size[son[now,1]]+1;\nend;\n```\n\u6ce8\u610f,$\\texttt{Split}$ \u4f1a\u8ba9\u6574\u68f5\u6811\u5206\u4e3a\u4e24\u68f5\u6811 (\u8fde\u8fb9\u4e0a),\u7136\u540e\u4f1a\u8fd4\u56de\u4e24\u4e2a\u6743\u503c\u4e3a\u4e24\u68f5\u6811\u7684\u6839\u3002\n\n\u4e00\u6b21\u5206\u88c2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(Height)$,\u671f\u671b\u4e3a $O(\\log N)$\u3002 (\u5982\u679c\u4f60\u5c06\u5927\u4f6c\u7684\u751f\u65e5\u7f16\u5165\u968f\u673a,\u90a3\u4e48\u4f60\u7684\u671f\u671b\u6548\u7387\u5c06\u4f1a\u5927\u5927\u63d0\u5347)\n\n$$\\large\\texttt{Merge}$$\n\n\u6ee1\u8db3 $heap$ \u6765\u5408\u5e76\u3002\n\n\u56e0\u4e3a\u5206\u88c2\u6210 $x,y$ \u6811,\u90a3\u4e48 $y$ \u6811\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\u7684\u503c\u80af\u5b9a\u662f\u5927\u4e8e $x$ \u6811\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u786e\u5b9a\u7236\u5b50\u5173\u7cfb,\u8fd9\u7531 $heap$ (\u5c0f\u6839\u5806) \u51b3\u5b9a\u3002\u5982\u679c $x$ \u4e2d\u7684\u67d0\u70b9\u7684 $a$ \u7684 $heap$ \u5c0f\u4e8e $y$ \u4e2d\u7684 $b$ \u7684 $heap$,\u90a3\u4e48 $b$ \u80af\u5b9a\u662f $a$ \u7684\u53f3\u513f\u5b50,\u53cd\u4e4b $a$ \u4e3a $b$ \u7684\u5de6\u513f\u5b50\u3002\n\n\u56fe\u89e3 : (\u4ee5\u4e0b\u5708\u5916\u662f $heap$ \u503c,\u6a59\u8272\u90e8\u5206\u4e3a\u88ab\u9009\u5165\u513f\u5b50\u7684\u90e8\u5206)\n\n![](https://miao.su/images/2019/02/26/311dac211f88e48ebe83f.png)\n\n\n![](https://miao.su/images/2019/02/26/5a1e4d427469dee695f95.png)\n\n\u8fd9\u6837\u4e00\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u591a\u662f $O(x_{Height}+y_{Height})$,\u671f\u671b\u4e5f\u662f $O(\\log N)$\u3002\n\n```pascal\nprocedure Merge(var now:longint;a,b:longint);\nbegin\n\tif (a=0)or(b=0) then begin now:=a+b; exit; end; // \u4e00\u4e2a\u6811\u4e3a\u7a7a\u4e86,\u53e6\u4e00\u4e2a\u6811\u6574\u4f53\u63d2\u5165\n\tif (heap[a]<heap[b]) then // \u5982\u679c a \u6811\u4e3a b \u6811\u7684\u7236\u4eb2,\n // \u53c8\u56e0\u4e3a b \u6811\u80af\u5b9a\u662f\u5927\u4e8e a \u6811\u7684,\u6240\u4ee5 b \u6811\u662f a \u6811\u7684\u53f3\u540e\u4ee3,\u7ee7\u7eed\u5f80\u53f3\u8fb9\u5408\u5e76,\u800c\u5de6\u513f\u5b50\u4e0d\u7ba1\n\tbegin now:=a; Merge(son[now,1],son[a,1],b); end \n\telse begin now:=b; Merge(son[now,0],a,son[b,0]); end; // \u540c\u7406\n\tsize[now]:=size[son[now,0]]+size[son[now,1]]+1;\nend;\n```\n\n$$\\large\\texttt{Code}$$\n\n```pascal\nUses math;\n\nConst\n\tRP=2006212; \n\ttotal=100010;\n\nvar\n\tsize,tree,heap:array[-1..total*2] of longint;\n\tson:array[-1..total*2,-1..2] of longint;\n\ti,m,n,k,root,order:longint;\n\nprocedure Add(val:longint); begin inc(n); size[n]:=1; tree[n]:=val; heap[n]:=random(RP); end;\n\nprocedure Split(now:longint;var a,b:longint;val:longint);\nbegin\n\tif now=0 then begin a:=0; b:=0; exit; end;\n\tif tree[now]<=val then\n\tbegin a:=now; Split(son[now,1],son[a,1],b,val); end\n\telse begin b:=now; Split(son[now,0],a,son[b,0],val); end;\n\tsize[now]:=size[son[now,0]]+size[son[now,1]]+1;\nend;\n\nprocedure Merge(var now:longint;a,b:longint);\nbegin\n\tif (a=0)or(b=0) then begin now:=a+b; exit; end;\n\tif (heap[a]<heap[b]) then\n\tbegin now:=a; Merge(son[now,1],son[a,1],b); end\n\telse begin now:=b; Merge(son[now,0],a,son[b,0]); end;\n\tsize[now]:=size[son[now,0]]+size[son[now,1]]+1;\nend;\n\nprocedure Insert(val:longint);\nvar x,y,o:longint;\nbegin\n\tx:=0; y:=0; Add(val); o:=n;\n\tSplit(root,x,y,val);\n\tMerge(x,x,o); Merge(root,x,y);\nend;\n\nprocedure Delete(val:longint);\nvar x,y,o:longint;\nbegin\n\tx:=0; y:=0; o:=0;\n\tSplit(root,x,y,val); Split(x,x,o,val-1);\n\tMerge(o,son[o,0],son[o,1]);\n\tMerge(x,x,o); Merge(root,x,y);\nend;\n\nfunction Query(now,k:longint):longint;\nbegin\n\tQuery:=0;\n\tif size[son[now,0]]+1=k then exit(tree[now]);\n\tif size[son[now,0]]>=k then Query:=Query(son[now,0],k) else\n\tQuery:=Query(son[now,1],k-size[son[now,0]]-1);\nend;\n\nfunction Rank(k:longint):longint;\nvar x,y:longint;\nbegin\n\tx:=0; y:=0; Split(root,x,y,k-1);\n\tRank:=size[x]+1; Merge(root,x,y);\nend;\n\nfunction Precursor(k:longint):longint;\nvar x,y:longint;\nbegin\n\tx:=0; y:=0; Split(root,x,y,k-1);\n\tPrecursor:=Query(x,size[x]);\n\tMerge(root,x,y);\nend;\n\nfunction Next(k:longint):longint;\nvar x,y:longint;\nbegin\n\tx:=0; y:=0; Split(root,x,y,k);\n\tNext:=Query(y,1);\n\tMerge(root,x,y);\nend;\n\nbegin\n\trandomize; root:=1; Add(maxlongint); heap[root]:=-maxlongint;\n\tread(m);\n\tfor i:=1 to m do\n\tbegin\n\t\tread(order,k);\n\t\tCase order of\n\t\t\t1 : Insert(k);\n\t\t\t2 : Delete(k);\n\t\t\t3 : writeln(Rank(k)); // Get num's rank\n\t\t\t4 : writeln(Query(root,k)); // Get rank's num\n\t\t\t5 : writeln(Precursor(k));\n\t\t\t6 : writeln(Next(k));\n\t\tend;\n\tend;\nend.\n```\n\n\u672c\u6587\u53ef\u80fd\u4f1a\u6709\u7ec6\u8282\u9519\u8bef ~~(\u6709\u9505)~~ \u4e4b\u7c7b\u7684,\u5df2\u6709\u53d1\u73b0\u656c\u8bf7\u63d0\u51fa\u3002\n\n\u535a\u4e3b\u4e66\u5199\u4e0d\u6613,\u656c\u8bf7\u5355\u8fde\u3002\u5173\u4e8e\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u4e1c\u897f,\u8bf7\u770b :[\u5173\u4e8e\u666e\u901a\u5e73\u8861\u6811\u7684\u5747\u644a\u590d\u6742\u5ea6\u7684\u4f18\u5316](https://www.luogu.org/blog/acking/guan-yu-pu-tong-ping-heng-shu-di-jun-tan-fu-za-du-di-you-hua)\u3002",
        "postTime": 1550909155,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "## \u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u5e73\u8861\u6811\n\n\u6709\u5173\u5e73\u8861\u6811\u7684\u95ee\u9898\u5f88\u591a\u65f6\u5019\u5176\u5b9e\u662f\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u6216\u662fset\u6765\u5904\u7406\u7684\uff0c\u4f46\u4f3c\u4e4e\u9898\u89e3\u5f88\u5c11\u6709\u8fd9\u65b9\u9762\u7684\u8bf4\u660e~~\u8d76\u7d27\u6c34\u4e00\u53d1~~\n\n\u672c\u9898\u503c\u57df\u8303\u56f4\u4e0d\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e4b\u95f4\u5728\u7ebf\u505a\uff0c\u4f46\u4e00\u822c\u5f00\u5230$10^9$\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u79bb\u6563\u5316\u4e09\u8fdesort,unique,lower_bound\uff0c\u5728\u79bb\u6563\u5316\u4e4b\u540e\u6811\u72b6\u6570\u7ec4\u7528\u6765\u7ef4\u62a4\u503c\u57df\n\n\u9996\u5148\u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u76f4\u63a5\u5728x\u5bf9\u5e94\u7684\u4f4d\u7f6e+1\u5c31\u597d\u4e86\uff0c\u64cd\u4f5c2\u540c\u7406\n\n\u64cd\u4f5c3\u53ea\u8981\u67e5\u8be2x-1\u7684\u524d\u7f00\u548c\u5c31\u662f\u6bd4x\u7684\u5c0f\u7684\u6240\u6709\u7684\u6570\uff0c+1\u5c31\u662f\u6392\u540d\u4e86\n\n\u64cd\u4f5c4\u5c31\u662f\u627e\u5230\u524d\u7f00\u548c\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u5bf9\u5e94\u7684\u6570\uff0c\u56e0\u4e3a\u524d\u7f00\u548c\u5176\u5b9e\u5c31\u662f\u6392\u540d\n\n\u64cd\u4f5c5\u548c6\u540c\u7406\uff0c5\u4e2d\u6bd4\u5982\u6bd4x\u5c0f\u7684\u6709k\u4e2a\u6570\uff0c\u6211\u53ea\u8981\u6b63\u597d\u627e\u5230\u524d\u7f00\u548c\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ek\u5bf9\u5e94\u7684\u6570\u5c31\u597d\u4e86\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e24\u4e2a\u64cd\u4f5c\u7684\u5b9e\u73b0\u6709\u4e00\u4e9b\u4e0d\u540c\n```cpp\nif(p[i]==5) printf(\"%d\\n\",query(sum(hash(a[i])-1)));\nif(p[i]==6) printf(\"%d\\n\",query(sum(hash(a[i]))+1));\n```\n\u4e3a\u4ec0\u4e48\u67e5\u8be2\u524d\u9a71\n\u4ece$sum(i-1)$\u91cc\u627e\u800c\u540e\u7ee7\u8981\u4ece$sum(i)+1$\u800c\u4e0d\u662f$sum(i+1)$\u91cc\u627e\u5462\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u4e3a\u4e86\u79bb\u6563\u5316\u65b9\u4fbf\u628a\u67e5\u8be2\u6392\u540d\u7684x\u4e5f\u63d2\u4e86\u8fdb\u53bb\uff0c\u8fd9\u4e2a\u5730\u65b9\u53ef\u80fd\u662f\u6ca1\u6709\u6570\u7684\uff0c$sum(i+1)$\u5c31\u548c$sum(i)$\u4e00\u6837\u4e86\uff0c\u6240\u4ee5\u8fd9\u6837\u5904\u7406\n\u800c\u5982\u4f55\u67e5\u8be2\u7b2c\u4e00\u4e2a\u524d\u7f00\u548c\u5927\u4e8e\u7b49\u4e8ex\u5bf9\u5e94\u7684\u6570\u5462\uff0c\u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u5c31\u662f\u4e8c\u5206\uff0c\u8fd8\u6709\u4e00\u79cd\u5c31\u662f\u901a\u8fc7\u6811\u72b6\u6570\u7ec4\u7684\u6027\u8d28\u6765\u5904\u7406\uff0c\u4e8c\u5206\u4f3c\u4e4e\u4e4b\u524d\u6709\u4e00\u7bc7\u9898\u89e3\u63d0\u5230\u8fc7\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u7b2c\u4e8c\u79cd\u65b9\u6cd5\n\n\u9996\u5148\u6811\u72b6\u6570\u7ec4\u5176\u5b9e\u662f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u8ba9\u6211\u4eec\u770b\u8fd9\u5e45\u56fe\n![](https://timgsa.baidu.com/timg?image&quality=80&size=b99999_300&sec=1533061471546&di=db3fad4bf880fe5c58c064c91714f5dd&imgtype=jpg&src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D1927451027%2C3617440677%26fm%3D214%26gp%3D0.jpg)\n**\u56fe\u7247\u6765\u6e90\u7f51\u7edc**\n\n\u6211\u4eec\u53d1\u73b0\u4e8c\u7684\u5e42\u6b21\u65b9\u7ef4\u62a4\u7684\u503c\u4ece\u5f00\u5934\u5f00\u59cb\u7684\uff0c\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u57288\u8fd9\u4e2a\u70b9\uff0c\u7ef4\u62a4\u7684\u662f8\u7684\u524d\u7f00\u548c\uff0c\u4f46\u8fd9\u4e2a\u503c\u5df2\u7ecf\u6bd4k\u5927\u4e86\uff0c\u4e0d\u6ee1\u8db3\u6700\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u8df3\u52304\uff0c\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u5f80\u5de6\u513f\u5b50\u8d70\uff0c\u5047\u59825\u662f\u7b26\u5408\u8981\u6c42\u7684\uff0c\u90a3\u6211\u4eec\u4ece4\u8df3\u52306(+$2^1$)\u53d1\u73b0\u4e0d\u53ef\u4ee5\uff0c\u518d\u8df3\u52305($+2^0$)\u53d1\u73b0\u53ef\u4ee5\uff0c\u4e4b\u540e\u8fd4\u56de\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u548c$logn$\u6709\u5173\u7684\uff0c\u603b\u4ee5\u901a\u8fc7\n\n\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100050;\ninline int read()\n{\n\tint x=0,t=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')t=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn x*t;\n}\nint n,q[maxn],a[maxn],p[maxn],tot=0,c[maxn];\nint hash(int x){return lower_bound(q+1,q+1+tot,x)-q;}\nint lowbit(int x){return x&-x;}\nvoid add(int x,int p)\n{\n\twhile(x<=tot)\n\t{\n\t\tc[x]+=p;\n\t\tx+=lowbit(x);\n\t}\n}\nint sum(int x)\n{\n\tint res=0;\n\twhile(x)\n\t{\n\t\tres+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn res;\n}\nint query(int x)\n{\n\tint t=0;\n\tfor(int i=19;i>=0;i--)\n\t{\n\t\tt+=1<<i;\n\t\tif(t>tot||c[t]>=x) t-=1<<i;\n\t\telse x-=c[t];\n\t}\n\treturn q[t+1];\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tp[i]=read(),a[i]=read();\n\t\tif(p[i]!=4) q[++tot]=a[i];\n\t}\n\t//hash\n\tsort(q+1,q+1+tot);\n\ttot=unique(q+1,q+1+tot)-(1+q);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(p[i]==1) add(hash(a[i]),1);\n\t\tif(p[i]==2) add(hash(a[i]),-1);\n\t\tif(p[i]==3) printf(\"%d\\n\",sum(hash(a[i])-1)+1);\n\t\tif(p[i]==4) printf(\"%d\\n\",query(a[i]));\n\t\tif(p[i]==5) printf(\"%d\\n\",query(sum(hash(a[i])-1)));\n\t\tif(p[i]==6) printf(\"%d\\n\",query(sum(hash(a[i]))+1));\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1533052104,
        "uid": 50976,
        "name": "songhn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u8bf6\u8bf6\u8bf6\u3002\n\n\u4eca\u5929\u4e0d\u77e5\u9053\u600e\u4e48\u4e86\uff0c\u8fd9\u4e48\u60f3\u5199\u9898\u89e3\uff08\u53ef\u80fd\u770b\u5230\u697c\u4e0b\u4e24\u4f4d\u90fd\u662f\u6211\u8ba4\u8bc6\u7684\u5927\u4f6c\u628a\uff09\n\n%%%\u4e0b\u65b9ylx\u5927\u4f6c\u548c\u4e0b\u4e0b\u65b9cyh\u5927\u4f6c\n\n\u4e00\u4e2a\u7528pbds\u3002\u4e00\u4e2a\u6b63\u89e3treap\n\n\u6ca1\u5173\u7cfb\uff0c\u518d\u6765\u4e00\u4e2asplay\n\n\u5c31\u8fd9\u6837\u5427\uff0csplay\u505a\u8fd9\u9053\u9898\u4f1a\u6bd4treap\u5feb\u4e00\u4e9b\u628a\uff1f\uff1f\n\nsplay\u4e0d\u65ad\u8c03\u6574\u81ea\u8eab\uff0c\u8fbe\u5230\u5c3d\u53ef\u80fd\u5e73\u8861\u7684\u76ee\u7684\n\n\u4ece\u800c\u9632\u6b62\u6811\u9000\u5316\u6210\u94fe\uff0c\u7136\u540e\u4f7f\u5f97O(logn)\u7684\u590d\u6742\u5ea6\u53d8\u4e3a\u4e86O(n)\n\nsplay\u76f8\u6bd4\u4e8e\u5176\u4ed6\u7684\u5e73\u8861\u6811\u5df2\u7ecf\u662f\u975e\u5e38\u597d\u5199\u4e86\uff08\u5c3d\u7ba1\u6211\u73b0\u5728\u8fd8\u662f\u81ea\u5df1\u6253\u4e0d\u51fa\u6765\uff09\n\n\u4f46\u662f\u53ea\u8981\u80fd\u591f\u7406\u89e3\u4ed6\u7684\u601d\u8def\uff0csplay\u4e5f\u4e0d\u662f\u5f88\u96be\u3002\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\n#define MAX 500100\nint root=0,N,tot=0;\n\ninline int read()\n{\n       register int x=0,t=1;\n       register char ch=getchar();\n       while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n       if(ch=='-'){t=-1;ch=getchar();}\n       while(ch>='0'&&ch<='9'){x=x*10+ch-48;ch=getchar();}\n       return x*t;\n}\n\nstruct Node\n{\n       int ch[2];//\u5b50\u8282\u70b9\n       int ff;//\u7236\u8282\u70b9 \n       int cnt;//\u6570\u91cf\n       int val;//\u503c \n       int son;//\u513f\u5b50\u6570\u91cf  \n}t[MAX];\n\nvoid push_up(int u)//\u8ba1\u7b97\u513f\u5b50\u6570 \n{\n       t[u].son=t[t[u].ch[0]].son+t[t[u].ch[1]].son+t[u].cnt;\n}\n\nvoid rotate(int x)//\u65cb\u8f6c \n{\n       register int y=t[x].ff;\n       register int z=t[y].ff;\n       register int k=t[y].ch[1]==x;//x\u662fy\u7684\u5de6\u6216\u53f3\u513f\u5b50\n       t[z].ch[t[z].ch[1]==y]=x;  t[x].ff=z;\n       t[y].ch[k]=t[x].ch[k^1];   t[t[x].ch[k^1]].ff=y;\n       t[x].ch[k^1]=y;              t[y].ff=x;\n       push_up(y);push_up(x);   \n}\n\nvoid Splay(int x,int goal)//\u628ax\u8282\u70b9\u65cb\u8f6c\u5230\u76ee\u6807\u4f4d\u7f6e\n{\n       while(t[x].ff!=goal)\n       {\n                 int y=t[x].ff;\n                 int z=t[y].ff;\n                 if(z!=goal)//\u65cb\u8f6c  \n                    (t[y].ch[0]==x)^(t[z].ch[0]==y)?rotate(x):rotate(y);\n                 rotate(x);\n       }\n       if(goal==0)\n           root=x;//\u5f53\u524d\u7684\u6839\u8282\u70b9 \n}\n\nvoid insert(int x)//\u63d2\u5165x\n{\n       int u=root,ff=0;\n       while(u&&t[u].val!=x)\n       {\n                 ff=u;\n                 u=t[u].ch[x>t[u].val];\n       }\n       if(u)//\u5df2\u7ecf\u6709\u8fd9\u4e2a\u6570\u5b57\u4e86  \n          t[u].cnt++;//\u8ba1\u7b97\u6570\u5b57\u4e2a\u6570 \n       else//\u4e0d\u5b58\u5728\u8fd9\u4e2a\u6570\u5b57\uff0c\u52a0\u5165\u65b0\u7684\u8282\u70b9 \n       {\n                  u=++tot;//\u603b\u7684\u8282\u70b9\u6570\n               if(ff)\n                   t[ff].ch[x>t[ff].val]=u;\n               t[tot].ch[0]=0;\n               t[tot].ch[1]=0;\n               t[tot].ff=ff;  t[tot].val=x;\n               t[tot].cnt=1;  t[tot].son=1;\n       }\n       Splay(u,0);\n}\n\nvoid Find(int x)//\u67e5\u627ex\u7684\u4f4d\u7f6e \n{\n       int u=root;\n       if(!u)return;//\u4e0d\u5b58\u5728\u8282\u70b9\uff0c\u65e0\u6cd5\u67e5\u627e\u6392\u540d\n       while(t[u].ch[x>t[u].val]&&x!=t[u].val)//\u627e\u5230x\u6240\u5728\u7684\u4f4d\u7f6e \n          u=t[u].ch[x>t[u].val]; \n       Splay(u,0);\n       \n}\n\nint Next(int x,int f)//\u67e5\u627e\u524d\u9a71/\u540e\u7ee7\n{\n       Find(x);//\u67e5\u627ex\u7684\u4f4d\u7f6e(Splay\u64cd\u4f5c\u5230\u6839\u8282\u70b9) \n       int u=root;\n       if((t[u].val>x&&f)||(t[u].val<x&&!f))return u;//\u8fd4\u56de\u7ed3\u679c \n       u=t[u].ch[f];\n       while(t[u].ch[f^1])u=t[u].ch[f^1];\n       return u;\n}\n\nvoid Delete(int x)//\u5220\u9664x\n{\n       int last=Next(x,0);//\u67e5\u627e\u524d\u9a71\n       int next=Next(x,1);//\u67e5\u627e\u540e\u7ee7\n       Splay(last,0);Splay(next,last);\n       int del=t[next].ch[0];\n       if(t[del].cnt>1)\n       {\n                 t[del].cnt--;//\u5b58\u5728\u591a\u4e2a\u8fd9\u4e2a\u6570\u5b57\uff0c\u76f4\u63a5\u51cf\u53bb\u4e00\u4e2a \n                 Splay(del,0);\n       }\n       else\n          t[next].ch[0]=0;//\u6e05\u9664\u6389\u8282\u70b9 \n}\n\nint K_th(int x)//\u67e5\u627e\u6392\u540d\u4e3ax\u7684\u503c \n{\n       int u=root;\n       if(t[u].son<x)//\u4e0d\u5b58\u5728\u8fd9\u4e48\u591a\u4e2a\u6570 \n          return false;\n       while(2333)\n       {\n                int y=t[u].ch[0];\n                if(x>t[y].son+t[u].cnt)//\u5728\u6392\u540d\u5728u\u7684\u540e\u9762 \n                {\n                         x-=t[y].son+t[u].cnt;//\u76f4\u63a5\u51cf\u6389\u8fd9\u4e48\u591a\n                     u=t[u].ch[1];//\u5728\u53f3\u5b50\u6811\u4e2d\u7ee7\u7eed\u627e  \n                }\n                else\n                   if(t[y].son>=x)//\u5982\u679cy\u7684\u8282\u70b9\u6570\u591a\u4e8ex \n                       u=y;       //\u5728\u5de6\u5b50\u6811\u4e2d\u7ee7\u7eed\u67e5\u627e\n                else\n                    return t[u].val;//\u5426\u5219\u627e\u5230\u4e86\u7ed3\u679c\uff0c\u76f4\u63a5\u8fd4\u56de \n       }\n}\nint main()\n{\n       insert(-2147483647);\n       insert(+2147483647);\n       N=read();\n       while(N--)\n       {\n                 int opt=read();\n                 if(opt==1)\n                    insert(read());\n                 else\n                 if(opt==2)\n                    Delete(read());\n                 else\n                 if(opt==3)\n                 {\n                      Find(read());\n                      printf(\"%d\\n\",t[t[root].ch[0]].son);\n                 }\n                 else\n                 if(opt==4)\n                      printf(\"%d\\n\",K_th(read()+1));\n                 else\n                 if(opt==5)\n                    printf(\"%d\\n\",t[Next(read(),0)].val);\n                 else\n                 if(opt==6)\n                    printf(\"%d\\n\",t[Next(read(),1)].val);\n       }\n       return 0;\n}\n```",
        "postTime": 1501428689,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u7ed9\u4e00\u79cd\u975e\u65cb\u8f6cTreap\u7684\u8be6\u7ec6\u6559\u7a0b\n\n\u5efa\u8bae\u6709\u4e86splay\u7684\u57fa\u7840\u518d\u770b\u8fd9\u4e2a\u6559\u7a0b\n\n\u53cd\u5bf9\u697c\u4e0b\u8bf4\u975e\u65cb\u8f6cTreap\u6162\uff0c\u5b9e\u5730\u6d4b\u8bd5\u6bd4splay\u5feb\u5f88\u591a\n\n\u60f3\u5b66\u66f4\u591aTreap\u7684\u59ff\u52bf\u6b22\u8fce\u6765[\u535a\u5ba2](http://www.yhzq-blog.cc/fhq-treap\u603b\u7ed3/)\n\n\u9996\u5148Orz fhq %%%%%\n\n\u4f55\u4e3aTreap\n\nTreap\u662f\u4e00\u79cd\u4e8c\u53c9\u5e73\u8861\u6811\u3002Treap=BST+Heap\n\nTreap\u6bd4\u8f83\u597d\u73a9\u7684\u4e00\u70b9\u662f\uff0c\u5b83\u6574\u4f53\u662f\u62e5\u6709\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u4f46\u662f\u5b83\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f1a\u6709\u4e00\u4e2a**\u9644\u52a0\u6743\u503c**\uff0c\u5b83\u7684\u9644\u52a0\u6743\u503c\u662f\u7b26\u5408\u5806\u7684\u6027\u8d28\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u660e\u663e\u770b\u51fa\uff0c\u8fd9\u68f5\u6811\u7684\u5f62\u6001(\u5e73\u8861\u4e0e\u5426)\u662f\u7531\u8fd9\u4e2a**\u9644\u52a0\u6743\u503c**\u51b3\u5b9a\u7684\u3002\n\n\u90a3\u6211\u4eec\u8be5\u5982\u4f55\u53d6\u8fd9\u4e2a\u6743\u503c\u5462\uff1f**\u968f\u673a\uff01\uff01**\n\n\u662f\u7684\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u968f\u673a\u4e00\u4e2a\u6743\u503c\u4f5c\u4e3a\u5b83\u7684\u9644\u52a0\u6743\u503c\uff0c\u90a3\u4e48\u5b83\u5c31\\*\u5927\u6982\\*\u662f\u5e73\u8861\u7684\u3002\n\n\u4f46\u662f\u4e00\u822c\u7684\u5e73\u8861\u6811\u90fd\u4f1a\u6709\u5f88\u607c\u4eba\u7684\u65cb\u8f6c\uff0c\u53c8\u4e0d\u597d\u5199\uff0c\u53c8\u4e0d\u597d\u8c03\u3002\n\n\u8fd9\u91cc\u5c31\u90d1\u91cd\u63a8\u51fa\uff1a**fhq treap!**\n\n\u53ea\u9700\u8981\u4e24\u4e2a\u57fa\u7840\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u8fbe\u5230splay\u7684\u6240\u6709\u529f\u80fd\n\n\n### 1\uff1a \uffe5split\uffe5\n\n\n\n![](http://i2.muimg.com/567571/be4649106d7f931d.gif)\n\n\u5b83\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u628a\u4e00\u4e2aTreap\u5206\u6210\u4e24\u4e2a\u3002\n\nsplit\u64cd\u4f5c\u6709\u4e24\u79cd\u7c7b\u578b\uff0c\u4e00\u79cd\u662f\u6309\u7167\u6743\u503c\u5206\u914d\uff0c\u4e00\u79cd\u662f\u6309\u524dk\u4e2a\u5206\u914d\u3002\n\n\u7b2c\u4e00\u79cd\u5c31\u662f\u628a\u6240\u6709\u5c0f\u4e8ek\u7684\u6743\u503c\u7684\u8282\u70b9\u5206\u5230\u4e00\u68f5\u6811\u4e2d\uff0c\u7b2c\u4e8c\u79cd\u662f\u628a\u524dk\u4e2a\u5206\u5230\u4e00\u4e2a\u6811\u91cc\u3002\n\n\n\u6743\u503c\u7248\uff1a\n\n\n```cpp\nvoid split(int now,int k,int &x,int &y)\n{\n    if (!now) x=y=0;\n    else\n    {\n        if (val[now]<=k)\n            x=now,split(ch[now][1],k,ch[now][1],y);\n        else\n            y=now,split(ch[now][0],k,x,ch[now][0]);\n        update(now);\n    }\n}\n```\n\n\u5bf9\u4e8e\u6211\u4eec\u904d\u5386\u5230\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5047\u5982\u5b83\u7684\u6743\u503c\u5c0f\u4e8ek\uff0c\u90a3\u4e48\u5b83\u7684\u6240\u6709\u5de6\u5b50\u6811\uff0c\u90fd\u8981\u5206\u5230\u5de6\u8fb9\u7684\u6811\u91cc\uff0c\u7136\u540e\u904d\u5386\u5b83\u7684\u53f3\u513f\u5b50\u3002\u5047\u5982\u5927\u4e8ek\uff0c\u628a\u5b83\u7684\u6240\u6709\u53f3\u5b50\u6811\u5206\u5230\u53f3\u8fb9\u7684\u6811\u91cc\uff0c\u904d\u5386\u5de6\u513f\u5b50\u3002\n\n\u56e0\u4e3a\u5b83\u7684\u6700\u591a\u64cd\u4f5c\u6b21\u6570\u5c31\u662f\u4e00\u76f4\u5206\u5230\u5e95\uff0c\u6548\u7387\u5c31\u662f$O(\\log n)$\u3002\n\n\u5bf9\u4e8e\u524dk\u4e2a\u7248\u7684\uff0c\u5c31\u662f\u50cf\u627e\u7b2ck\u5927\u7684\u611f\u89c9\u3002\u6bcf\u6b21\u51cf\u6389siz\n\n\n```cpp\nvoid split(int now,int k,int &x,int &y)\n{\n    if (!now) x=y=0;\n    else\n    {\n        if (k<=siz[ch[now][0]])\n            y=now,split(ch[now][0],k,x,ch[now][0]);\n        else\n            x=now,split(ch[now][1],k-siz[ch[now][0]]-1,ch[now][1],y);\n        update(now);\n    }\n}\n```\n\n### 2\uff1a $merge$\n\n\n\u8fd9\u4e2a\u5c31\u662f\u628a\u4e24\u4e2aTreap\u5408\u6210\u4e00\u4e2a\uff0c\u4fdd\u8bc1\u7b2c\u4e00\u4e2a\u7684\u6743\u503c\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u3002\n\n![](http://i4.buimg.com/567571/f7a7f6484789010a.gif)\n\n\u56e0\u4e3a\u7b2c\u4e00\u4e2aTreap\u7684\u6743\u503c\u90fd\u6bd4\u8f83\u5c0f\uff0c\u6211\u4eec\u6bd4\u8f83\u4e00\u4e0b\u5b83\u7684tar(\u9644\u52a0\u6743\u503c)\uff0c\u5047\u5982\u7b2c\u4e00\u4e2a\u7684tar\u5c0f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u4fdd\u7559\u5b83\u7684\u6240\u6709\u5de6\u5b50\u6811\uff0c\u63a5\u7740\u628a\u7b2c\u4e00\u4e2aTreap\u53d8\u6210\u5b83\u7684\u53f3\u513f\u5b50\u3002\u53cd\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u7b2c\u4e8c\u68f5\u7684\u6240\u6709\u53f3\u5b50\u6811\uff0c\u6307\u9488\u6307\u5411\u5de6\u513f\u5b50\u3002\n\n\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u5f62\u8c61\u7684\u7406\u89e3\u4e3a\u5728\u7b2c\u4e00\u4e2aTreap\u7684\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u7b2c\u4e8c\u4e2a\u6811\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u7b2c\u4e8c\u4e2a\u6811\u7684\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u7b2c\u4e00\u68f5\u6811\u3002\u56e0\u4e3a\u7b2c\u4e00\u68f5\u6811\u90fd\u6ee1\u8db3\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u6811\uff0c\u6240\u4ee5\u5c31\u53d8\u6210\u4e86\u6bd4\u8f83tar\u6765\u786e\u5b9a\u6811\u7684\u5f62\u6001\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5176\u5b9e\u662f\u904d\u5386\u4e86\u7b2c\u4e00\u4e2atrep\u7684\u6839->\u6700\u5927\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2aTreap\u7684\u6839->\u6700\u5c0f\u8282\u70b9\uff0c\u4e5f\u5c31\u662f$O(\\log n)$\n\n\n\u4ee3\u7801\uff1a\n\n\n```cpp\nint merge(int x,int y)\n{\n    if (!x || !y) return x+y;\n    if (pri[x]<pri[y])\n    {\n        ch[x][1]=merge(ch[x][1],y);\n        update(x);\n        return x;\n    }\n    else\n    {\n        ch[y][0]=merge(x,ch[y][0]);\n        update(y);\n        return y;\n    }\n}\n```\n\n\u4e0b\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e24\u4e2a\u57fa\u672c\u7684\u4e1c\u897f\u5b9e\u73b0\u5404\u79cd\u5404\u6837\u7684\u64cd\u4f5c\u4e86\u3002\n\n\n### 3\uff1a$insert$\n\n\n\u63d2\u5165\u4e00\u4e2a\u6743\u503c\u4e3av\u7684\u70b9\uff0c\u628a\u6811\u6309\u7167v\u7684\u6743\u503csplit\u6210\u4e24\u4e2a\uff0c\u518d\u6309\u7167\u987a\u5e8fmerge\u56de\u53bb\u3002\n\n\n```cpp\nsplit(root,v,x,y);\nroot=merge(merge(x,new_node(v)),y);\n```\n\n### 4\uff1a $del$\n\n\n\u5220\u9664\u6743\u503c\u4e3av\u7684\u70b9\uff0c\u628a\u6811\u6309\u7167v\u5206\u6210\u4e24\u4e2aa,b,\u518d\u628aa\u6309\u7167v-1\u5206\u6210c,d\u3002\u628ac\u7684\u4e24\u4e2a\u5b50\u513f\u5b50merge\u8d77\u6765\uff0c\u518dmerge(merge(c,d),b)\n\n\n```cpp\nsplit(root,v,x,z);\nsplit(x,v-1,x,y);\ny=merge(ch[y][0],ch[y][1]);\nroot=merge(merge(x,y),z);\n```\n\n### 5\uff1a $precursor$\n\n\n\u627e\u524d\u9a71\u7684\u8bdd\u628aroot\u6309v-1 split\u6210x,y\uff0c\u5728x\u91cc\u9762\u627e\u6700\u5927\u503c\n\n\n### 6\uff1a $successor$\n\n\n\u627e\u540e\u7ee7\u7684\u8bdd\u628aroot\u6309v split\u6210x,y\uff0c\u5728y\u91cc\u627e\u6700\u5c0f\u503c\n\n\n### 7\uff1a $rank$\n\n\n\u628aroot\u6309v-1 split\u6210x,y\uff0c\u6392\u540d\u662fx\u7684siz\n\n\n\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#define N 500005\nusing namespace std;\nint inline read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint ch[N][2],val[N],pri[N],siz[N],sz;\nvoid update(int x){siz[x]=1+siz[ch[x][0]]+siz[ch[x][1]];}\nint new_node(int v)\n{\n    siz[++sz]=1;\n    val[sz]=v;\n    pri[sz]=rand();\n    return sz;\n}\nint merge(int x,int y)\n{\n    if (!x || !y) return x+y;\n    if (pri[x]<pri[y])\n    {\n        ch[x][1]=merge(ch[x][1],y);\n        update(x);\n        return x;\n    }\n    else\n    {\n        ch[y][0]=merge(x,ch[y][0]);\n        update(y);\n        return y;\n    }\n}\nvoid split(int now,int k,int &x,int &y)\n{\n    if (!now) x=y=0;\n    else\n    {\n        if (val[now]<=k)\n            x=now,split(ch[now][1],k,ch[now][1],y);\n        else\n            y=now,split(ch[now][0],k,x,ch[now][0]);\n        update(now);\n    }\n}\nint kth(int now,int k)\n{\n    while(1)\n    {\n        if (k<=siz[ch[now][0]])\n            now=ch[now][0];\n        else\n        if (k==siz[ch[now][0]]+1)\n            return now;\n        else\n            k-=siz[ch[now][0]]+1,now=ch[now][1];\n    }\n}\nmain()\n{\n    srand((unsigned)time(NULL));\n    int T,com,x,y,z,a,b,root=0;\n    scanf(\"%d\",&T);\n    while(T--)\n    {\n        com=read(),a=read();\n        if (com==1)\n        {\n            split(root,a,x,y);\n            root=merge(merge(x,new_node(a)),y);\n        }\n        else\n        if (com==2)\n        {\n            split(root,a,x,z);\n            split(x,a-1,x,y);\n            y=merge(ch[y][0],ch[y][1]);\n            root=merge(merge(x,y),z);\n        }\n        else\n        if (com==3)\n        {\n            split(root,a-1,x,y);\n            printf(\"%d\\n\",siz[x]+1);\n            root=merge(x,y);\n        }\n        else\n        if (com==4)\n            printf(\"%d\\n\",val[kth(root,a)]);\n        else\n        if (com==5)\n        {\n            split(root,a-1,x,y);\n            printf(\"%d\\n\",val[kth(x,siz[x])]);\n            root=merge(x,y);\n        }\n        else\n        {\n            split(root,a,x,y);\n            printf(\"%d\\n\",val[kth(y,1)]);\n            root=merge(x,y);\n        }\n    }\n}\n```",
        "postTime": 1492990650,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "# \u66ff\u7f6a\u7f8a\u6811\n\n## \u4ecb\u7ecd\n\n\u5728\u4f17\u591a\u7684\u5e73\u8861\u6811\u4e4b\u4e2d\uff0c\u5927\u90e8\u5206\u4f9d\u8d56\u65cb\u8f6c\uff08\u5355\u65cb\u6216\u53cc\u65cb\uff09\u6765\u7ef4\u6301\u5e73\u8861\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u5e73\u8861\u6811\u662f\u4e0d\u4f9d\u8d56\u4e8e\u65cb\u8f6c\u64cd\u4f5c\u3002\u66ff\u7f6a\u7f8a\u6811\u4fbf\u662f\u5176\u4e2d\u4e00\u79cd\u3002\n\n\u66ff\u7f6a\u7f8a\u6811\u57fa\u4e8e\u4e00\u79cd**\u66b4\u529b\u91cd\u6784**\u7684\u64cd\u4f5c\u6765\u4fdd\u8bc1\u5e73\u8861\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a\u5e73\u8861\u56e0\u5b50$alpha$\uff0c\u5f53\u67d0\u4e2a\u8282\u70b9x\u7684\u67d0\u68f5\u5b50\u6811\u7684$x.ch.size>x.size*alpha$\\*\u65f6\u4fbf\u5c06\u8fd9\u68f5\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u62cd\u6241\u91cd\u6784\u3002\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/11602.png) \n\n\u4e00\u4e2a\u9700\u8981\u91cd\u6784\u7684\u4f8b\u5b50\n\n\n## \u91cd\u6784\u65b9\u6cd5\n\n\u91cd\u6784\u7684\u76ee\u7684\u662f\u8ba9\u8be5\u5b50\u6811\u5c06\u53d8\u5f97\u5e73\u8861\uff0c\u90a3\u4e48\u5982\u4f55\u8fdb\u884c\u91cd\u6784\u4f7f\u5f97\u8be5\u6811\u53d8\u5f97\u5e73\u8861\u5462\uff1f\n\n\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\n\n1\u3001\u5c06\u8be5\u6811\u62cd\u6241\uff0c\u5b58\u5165\u6570\u7ec4\u6216\u8005vector\u4e2d\u3002\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/11603.png) \n\n\u62cd\u6241\u540e\u7684\u6837\u5b50\n\n\n2\u3001\u91cd\u65b0\u5efa\u6811\uff08\u6bcf\u6b21\u53d6\u533a\u95f4\u4e2d\u70b9\u4f5c\u4e3a\u6839\uff0c\u7136\u540e\u9012\u5f52\u4e24\u8fb9\u4e3a\u5de6\u53f3\u5b50\u6811\u5efa\u6811\uff09\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/11601.png) \n\n\u5efa\u6811\u8fc7\u7a0b\n\n\n# \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\n\n\u8fd9\u6837\u91cd\u6784\u4e00\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n)$\uff08n\u4e3a\u5b50\u6811\u5927\u5c0f\uff09\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u66ff\u7f6a\u7f8a\u6811\u7684\u5355\u6b21\u63d2\u5165\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u4f1a\u8fbe\u5230$O(nlogn)$\uff0c\u56e0\u4e3a\u4e00\u4e2a$size=t$\u7684\u5b50\u6811\u9700\u8981\u63d2\u5165$\u03a9(t)$\u4e2a\u70b9\u624d\u4f1a\u88ab\u91cd\u6784\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u52bf\u80fd\u5206\u6790\u6765\u8bc1\u660e\u66ff\u7f6a\u7f8a\u6811\u7684\u5355\u6b21\u64cd\u4f5c\u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(logn)$\uff0c\u5177\u4f53\u8bc1\u660e\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u5c55\u5f00\u3002\n\n\n## \u7ecf\u5178\u64cd\u4f5c\n\n\u4e0b\u9762\u6765\u770b\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff1a\n\n\u63d2\u5165\uff1a\n\n\u63d2\u5165\u64cd\u4f5c\u548c\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u65e0\u5927\u5f02\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u5728\u9012\u5f52\u8fd4\u56de\u65f6\u9700\u8981\u5224\u65ad\u8be5\u5b50\u6811\u662f\u5426\u9700\u8981\u91cd\u6784\u3002\n\n\u5220\u9664\uff1a\n\n\u8fd9\u91cc\u7684\u5220\u9664\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u5220\u9664\uff0c\u800c\u662f\u7ed9\u8981\u5220\u9664\u7684\u70b9\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u5728\u8be5\u8282\u70b9\u9700\u8981\u88ab\u91cd\u6784\u65f6\u5220\u9664\u6389\u3002\n\nrank\u548ckth\u64cd\u4f5c\u4e5f\u65e0\u5927\u5dee\u522b\u3002\n\n\n## \u5e73\u8861\u56e0\u5b50\u7684\u53d6\u503c\u8303\u56f4\uff1a\n\n\u663e\u7136\uff0c$alpha$\u7684\u53d6\u503c\u8303\u56f4\u57280.5~1\u7684\u8303\u56f4\u5185\uff0c\u4e00\u822c\u53d60.7\u8f83\u4e3a\u5408\u9002\u3002\u592a\u5927\u7684$alpha$\u4f1a\u4f7f\u5f97\u6811\u53d8\u6df1\uff0c\u592a\u5c0f\u5219\u4f1a\u5f15\u8d77\u8fc7\u591a\u7684\u91cd\u6784\u3002\n\n\n## \u6a21\u7248\u4ee3\u7801\uff1a\n\n\uff08P3369\u666e\u901a\u5e73\u8861\u6811\uff09\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n```cpp\n    #include <bits/stdc++.h>\n    using std::vector;\n    const double alpha=0.7;\n    struct node{\n        node *l,*r;\n        int val,size,cnt;\n        bool deleted;\n        bool isbad(){return l->cnt>alpha*cnt+5||r->cnt>alpha*cnt+5;}\n        void maintain(){size=!deleted+l->size+r->size;cnt=1+l->cnt+r->cnt;}\n    };\n    node *null;\n    void dfs(node *o,vector<node*> &v)\n    {\n        if(o==null)return;\n        dfs(o->l,v);\n        if(!o->deleted)v.push_back(o);\n        dfs(o->r,v);\n        if(o->deleted)delete o;\n    }\n    node *build(vector<node*> &v,int l,int r)\n    {\n        if(l>=r)return null;\n        int mid=(l+r)>>1;\n        node *o=v[mid];\n        o->l=build(v,l,mid);\n        o->r=build(v,mid+1,r);\n        o->maintain();\n        return o;\n    }\n    void rebuild(node* &o)\n    {\n        vector<node*> v;\n        dfs(o,v);\n        o=build(v,0,v.size());\n    }\n    void insert(int x,node* &o)\n    {\n        if(o==null)\n        {\n            o=new node;\n            o->l=o->r=null;\n            o->deleted=false;\n            o->size=o->cnt=1;\n            o->val=x;\n            return;\n        }\n        else\n        {\n            ++o->size;\n            ++o->cnt;\n            if(x>=o->val)\n                insert(x,o->r);\n            else\n                insert(x,o->l);\n            if(o->isbad())rebuild(o);\n        }\n    }\n    int rank(node *now,int x)\n    {\n        int ans=1;\n        while(now!=null)\n        {\n            if(now->val>=x)now=now->l;\n            else\n            {\n                ans+=now->l->size+!now->deleted;\n                now=now->r;\n            }\n        }\n        return ans;\n    }\n    int kth(node *now,int x)\n    {\n        while(now!=null)\n        {\n            if(!now->deleted && now->l->size+1==x)\n                return now->val;\n            if(now->l->size>=x)now=now->l;\n            else\n            {\n                x-=now->l->size+!now->deleted;\n                now=now->r;\n            }\n        }\n    }\n    void erase(node *o,int rk)\n    {\n        if(!o->deleted && rk==o->l->size+1)\n        {\n            o->deleted=1;\n            --o->size;\n            return;\n        }\n        --o->size;\n        if(rk<=o->l->size+!o->deleted)\n            erase(o->l,rk);\n        else\n            erase(o->r,rk-o->l->size-!o->deleted);\n    }\n    node *root;\n    int main()\n    {\n        null=new node;\n        root=null;\n        int n;\n        scanf(\"%d\",&n);\n        while(n--)\n        {\n            int op,x;\n            scanf(\"%d%d\",&op,&x);\n            if(op==1)insert(x,root);\n            if(op==2)erase(root,rank(root,x));\n            if(op==3)printf(\"%d\\n\",rank(root,x));\n            if(op==4)printf(\"%d\\n\",kth(root,x));\n            if(op==5)printf(\"%d\\n\",kth(root,rank(root,x)-1));\n            if(op==6)printf(\"%d\\n\",kth(root,rank(root,x+1)));\n        }\n    } \n\n```",
        "postTime": 1512786929,
        "uid": 34886,
        "name": "ezoixx130",
        "ccfLevel": 8,
        "title": "\u3010\u7b97\u6cd5\u3011\u3010\u6a21\u7248\u3011\u66ff\u7f6a\u7f8a\u6811"
    },
    {
        "content": "\u53c2\u89c12014\u5e74\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\uff0c\u7ebf\u6bb5\u6811\u7684\u5e38\u6570\u662f\u4f18\u4e8e\u5e73\u8861\u6811\u7684\u5e38\u6570\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd0\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u5c31\u5f53\u505a\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811\u64cd\u4f5c\u5c31\u884c\u4e86\u3002\n\n\u6709\u7684\u65f6\u5019\u53ef\u80fd\u6392\u540d\u4e0d\u662f\u5f88\u597d\u5f04\n\n\u90a3\u4e48\u53ef\u4ee5\u7528stl\u6a21\u62df\n\n\u603b\u4e4b\u80fd\u8fc7\n\n\u4e00\u822c\u4eba\u81ea\u5df1\u5199\u7684\u5e73\u8861\u6811\u4e0d\u4f1a\u6bd4\u5f00\u4e86O2\u7684\u7ea2\u9ed1\u6811\u4f18\u8d8a\u591a\u5c11\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 10000005\nusing namespace std;\nint m;\nint lc[100005*40],rc[100005*40],sum[100005*80],cnt,root;\nvoid ins(int &rt,int l,int r,int q,int v)\n{\n    if(!rt)rt=++cnt;sum[rt]+=v;\n    if(l==r)return;int mid=(l+r)/2;\n    if(q<=mid)ins(lc[rt],l,mid,q,v);else ins(rc[rt],mid+1,r,q,v);\n}\nint queryx(int rt,int l,int r,int ql,int qr)\n{\n    int mid=(l+r)/2,ans=0;\n    if(ql<=l&&r<=qr)return sum[rt];\n    if(ql<=mid)ans+=queryx(lc[rt],l,mid,ql,qr);\n    if(qr>mid)ans+=queryx(rc[rt],mid+1,r,ql,qr);\n    return ans;\n}\nint querykth(int rt,int l,int r,int k)\n{\n    int mid=(l+r)/2;if(l==r)return l;\n    int s=sum[lc[rt]];\n    if(k<=s)return querykth(lc[rt],l,mid,k);\n    else return querykth(rc[rt],mid+1,r,k-s);\n}\nmap<int,int> ma;\nint main()\n{\n    scanf(\"%d\",&m);\n    while(m--)\n    {\n        int opt,x;scanf(\"%d%d\",&opt,&x);\n        if(opt==1)\n        {\n            ins(root,1,maxn*2,x+maxn,1),ma[x]++;\n        }\n        if(opt==2)\n        {\n            ins(root,1,maxn*2,x+maxn,-1);ma[x]--;\n            if(ma[x]==0)ma.erase(x);\n        }\n        if(opt==3)printf(\"%d\\n\",queryx(root,1,maxn*2,1,x+maxn-1)+1);\n        if(opt==4)printf(\"%d\\n\",querykth(root,1,maxn*2,x)-maxn);\n        if(opt==5)printf(\"%d\\n\",(--ma.lower_bound(x))->first);\n        if(opt==6)printf(\"%d\\n\",(ma.upper_bound(x))->first);\n    }\n    return 0;\n}\n```",
        "postTime": 1497667642,
        "uid": 2978,
        "name": "zcysky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "# Treap\u8be6\u89e3\n## Treap=Tree+Heap   \nTreap\u4e2d\u6bcf\u4e2a\u8282\u70b9\u67092\u4e2a\u503c\uff0c\u5176\u4e2d\u4e00\u4e2a\u6ee1\u8db3\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff0c\u4e00\u4e2a\u6ee1\u8db3\u5927\u6839\u5806\u7684\u6027\u8d28\u3002\u628a\u6ee1\u8db3\u4e8c\u53c9\u67e5\u627e\u6811\u6027\u8d28\u7684\u503c\u79f0\u4f5c```data```\uff0c\u628a\u6ee1\u8db3\u5927\u6839\u5806\u6027\u8d28\u7684\u503c\u79f0\u4f5c```value```\u3002 \u5bf9\u4e8eTreap\u6765\u8bf4\uff0c\u5f53\u524d\u8282\u70b9\u7684```data```\u503c\u5927\u4e8e\u5de6\u513f\u5b50\uff0c\u5c0f\u4e8e\u53f3\u513f\u5b50\u3002\u5f53\u524d\u8282\u70b9\u7684```value```\u503c\u5c0f\u4e8e\u513f\u5b50\u8282\u70b9\u7684\u503c\u3002    \n\u6bcf\u4e2a\u8282\u70b9\u7684```data```\u6211\u4eec\u65e0\u6cd5\u6539\u53d8\uff0c\u4e3a\u4e86\u4fdd\u8bc1Treap\u7684\u5e73\u8861\u6027\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u6bcf\u4e2a\u8282\u70b9\u7684```value```\u5747\u4e3a\u968f\u673a\u503c\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u68f5\u6811\u201c\u57fa\u672c\u5e73\u8861\u201d\u3002   \n## \u7edf\u8ba1\n$up$\uff1a\u8ba1\u7b97\u513f\u5b50\u6570\n``` cpp\nvoid up(int x)\n{\n\tt[x].siz=t[t[x].left].siz+t[t[x].right].siz+1;\n}\n```\n\n## \u65cb\u8f6c   \n![rorate](https://cdn.luogu.com.cn/upload/pic/44303.png)   \n\u53f3\u65cb\u5c31\u662f\uff0c\u8ba9\u5f53\u524d\u8282\u70b9\u964d\u4e3a\u81ea\u5df1\u7684\u53f3\u513f\u5b50\uff0c\u8ba9\u5de6\u513f\u5b50\u4ee3\u66ff\u81ea\u5df1\uff0c\u5e76\u8ba9\u81ea\u5df1\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u6210\u4e3a\u81ea\u5df1\u7684\u5de6\u513f\u5b50\u3002    \n\u5de6\u65cb\u76f8\u53cd\uff0c\u8ba9\u5f53\u524d\u8282\u70b9\u964d\u4e3a\u81ea\u5df1\u7684\u5de6\u513f\u5b50\uff0c\u8ba9\u53f3\u513f\u5b50\u4ee3\u66ff\u81ea\u5df1\uff0c\u5e76\u8ba9\u81ea\u5df1\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u6210\u4e3a\u81ea\u5df1\u7684\u53f3\u513f\u5b50\u3002  \n\u6ce8\uff1a\u4ee3\u7801\u4e2d\u7684```now```\u52a0\u4e0a\u4e86```&```\u662f\u4e3a\u4e86\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u540c\u65f6\u66f4\u6539```now```\u7684\u503c\u3002\u5982\u4e0a\u56fe\u53f3\u65cb\u65f6\uff0c\u539f\u6765```now```\u6307\u5411$A$\u8282\u70b9\uff0c\u8fd0\u884c\u5b8c\u51fd\u6570\u540e\u6307\u5411$B$\u8282\u70b9\u3002\n``` cpp\nvoid right_rorate(int &now)\n{\n\tint tmp=t[now].left;\n\tt[now].left=t[tmp].right;\n\tt[tmp].right=now;\n\tt[tmp].siz=t[now].siz;\n\tup(now);\n\tnow=tmp;\n}\nvoid left_rorate(int &now)\n{\n\tint tmp=t[now].right;\n\tt[now].right=t[tmp].left;\n\tt[tmp].left=now;\n\tt[tmp].siz=t[now].siz;\n\tup(now);\n\tnow=tmp;\n}\n```\n\u65cb\u8f6c\u5b9e\u4f8b\uff1a![Eg](https://cdn.luogu.com.cn/upload/pic/44308.png)   \n![eg2](https://cdn.luogu.com.cn/upload/pic/44309.png)\n## \u63d2\u5165   \n\u7ed9\u8282\u70b9\u968f\u673a\u5206\u914d\u4e00\u4e2a\u4f18\u5148\u7ea7(```value```)\uff0c\u5148\u628a\u8981\u63d2\u5165\u7684\u70b9\u63d2\u5165\u5230\u4e00\u4e2a\u53f6\u5b50\u4e0a\uff0c\u7136\u540e\u8ddf\u7ef4\u62a4\u5806\u4e00\u6837\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a **\u5c0f\u6839\u5806**\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u4f18\u5148\u7ea7\u6bd4\u5b83\u7684\u513f\u5b50\u5927\u5c31\u65cb\u8f6c\uff0c**\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u6839\u7684\u5de6\u513f\u5b50\u5c31\u53f3\u65cb\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u6839\u7684\u53f3\u513f\u5b50\u5c31\u5de6\u65cb\u3002**  \n``` cpp\nvoid insert(int &now,int data)\n{\n\tif(now==0)\n\t{\n\t\tnow=++cnt;\n\t\tt[now].siz=1;\n\t\tt[now].data=data;\n\t\tt[now].value=rand()*rand()%19620817;\n\t\treturn ;\n\t}\n\tt[now].siz++;\n\tif(data>=t[now].data)\n\t{\n\t\tinsert(t[now].right,data);\n\t}\n\telse\n\t{\n\t\tinsert(t[now].left,data);\n\t}\n\tif(t[now].left!=0&&t[now].value>t[t[now].left].value)\n\t{\n\t\tright_rorate(now);\n\t}\n\tif(t[now].right!=0&&t[now].value>t[t[now].right].value)\n\t{\n\t\tleft_rorate(now);\n\t}\n\tup(now);\n}\n```\n\n## \u5220\u9664   \n\u56e0\u4e3a$Treap$\u6ee1\u8db3\u5806\u6027\u8d28\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u628a\u8981\u5220\u9664\u7684\u8282\u70b9\u65cb\u8f6c\u5230\u53f6\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u76f4\u63a5\u5220\u9664\u5c31\u53ef\u4ee5\u4e86\u3002   \n\u5177\u4f53\u7684\u65b9\u6cd5\uff1a   \n\u5982\u679c\u8be5\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u53f3\u5b50\u8282\u70b9\u7684\u4f18\u5148\u7ea7\uff0c\u53f3\u65cb\u8be5\u8282\u70b9\uff0c\u4f7f\u8be5\u8282\u70b9\u964d\u4e3a\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u8bbf\u95ee\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u7ee7\u7eed\u64cd\u4f5c\uff1b    \n\u53cd\u4e4b\uff0c\u5de6\u65cb\u8be5\u8282\u70b9,\u4f7f\u8be5\u8282\u70b9\u964d\u4e3a\u5de6\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u8bbf\u95ee\u5de6\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u7ee7\u7eed\u64cd\u4f5c\uff0c\u76f4\u5230\u53d8\u6210\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u7684\u8282\u70b9\u3002 \n\uff08\u5373\uff1a\u8ba9```value```\u7684\u7ed3\u70b9\u65cb\u5230\u4e0a\u9762\uff0c\u6ee1\u8db3\u5806\u7684\u6027\u8d28\uff09   \n``` cpp\nvoid erase(int &now,int data)\n{\n\tt[now].siz--;\n\tif(t[now].data==data)\n\t{\n\t\tif(t[now].left==0&&t[now].right==0)\n\t\t{\n\t\t\tnow=0;\n\t\t\treturn ;\n\t\t}\n\t\tif(t[now].left==0||t[now].right==0)\n\t\t{\n\t\t\tnow=t[now].left+t[now].right;\n\t\t\treturn ;\n\t\t}\n\t\tif(t[t[now].left].value<t[t[now].right].value)\n\t\t{\n\t\t\tright_rorate(now);\n\t\t\terase(t[now].right,data);\n\t\t\treturn ;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tleft_rorate(now);\n\t\t\terase(t[now].left,data);\n\t\t\treturn ;\n\t\t}\n\t}\n\tif(t[now].data>=data)\n\t{\n\t\terase(t[now].left,data);\n\t}\n\telse\n\t{\n\t\terase(t[now].right,data);\n\t}\n\tup(now);\n}\n```\n## \u67e5\u8be2\u6392\u540d\n\u663e\u7136\uff0c\u82e5```t[now].data<data```\uff0c\u5219\u5728```now```\u7684\u53f3\u5b50\u6811\u4e2d\u4ecd\u6709\u90e8\u5206\u5c0f\u4e8e```data```\u7684\u6570\uff0c\u6240\u4ee5\u5728\u52a0\u4e0a```t[t[now].left].siz+1```\u7684\u540c\u65f6\u8fd8\u9700\u5728```now```\u7684\u53f3\u5b50\u6811\u4e2d\u7ee7\u7eed\u9012\u5f52\u3002\u53cd\u4e4b\uff0c\u5219\u53ea\u9700\u5728\u5de6\u5b50\u6811\u4e2d\u9012\u5f52\n``` cpp\nint rank(int now,int data)\n{\n\tif(now==0)\n\t{\n\t\treturn 0;\n\t}\n\tif(data>t[now].data)\n\t{\n\t\treturn t[t[now].left].siz+1+rank(t[now].right,data);\n\t}\n\treturn rank(t[now].left,data);\n}\n```\n\n## \u67e5\u8be2\u6392\u540d\u4e3a$x$\u7684\u6570   \n\u82e5\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u521a\u597d\u4e3a$x-1$\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684```data```\u5373\u4e3a\u6240\u6c42\u7ed3\u679c\u3002   \n\u82e5\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u5927\u4e8e$x-1$\uff0c\u5219\u5728\u53f3\u5b50\u6811\u4e2d\u9012\u5f52\u67e5\u627e\u3002   \n\u82e5\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u5c0f\u4e8e$x-1$\uff0c\u5219\u5728\u5de6\u5b50\u6811\u4e2d\u9012\u5f52\u67e5\u627e\u3002   \n``` cpp\nint find(int now,int rank)\n{\n\tif(rank==t[t[now].left].siz+1)\n\t{\n\t\treturn t[now].data;\n\t}\n\tif(rank>t[t[now].left].siz+1)\n\t{\n\t\treturn find(t[now].right,rank-t[t[now].left].siz-1);\n\t}\n\treturn find(t[now].left,rank);\n}\n```\n\n## \u67e5\u8be2\u524d\u9a71\n\u51fd\u6570\u5b9a\u4e49\uff1a\n``` cpp\nint query_pre(int now,int data)\n```\n\u82e5```now==0```\uff0c\u5219\u4e0d\u5b58\u5728\u8fd4\u56de\u503c\uff08```return 0```\uff09\u3002  \n\u82e5\u5f53\u524d\u8282\u70b9\u7684\u503c\u5927\u4e8e\u7b49\u4e8e```data```\uff0c\u5219\u5728\u53f3\u5b50\u6811\u4e2d\u627e\u3002\uff08\u5fc5\u987b\u5305\u542b\u7b49\u4e8e\uff01\uff01\uff01\uff09   \n\u82e5\u5f53\u524d\u8282\u70b9\u7684\u503c\u5c0f\u4e8e```data```\uff0c\u5219\u5728\u5de6\u5b50\u6811\u4e2d\u627e\uff0c\u82e5\u627e\u4e0d\u5230\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u503c\u3002\uff08\u4e0d\u80fd\u6709\u7b49\u4e8e\uff01\uff01\uff01\uff09   \n``` cpp\nint query_pre(int now,int data)\n{\n\tif(now==0)\n\t{\n\t\treturn 0;\n\t}\n\tif(t[now].data>=data)\n\t{\n\t\treturn query_pre(t[now].left,data);\n\t}\n\tint tmp=query_pre(t[now].right,data);\n\tif(tmp==0)\n\t{\n\t\treturn t[now].data;\n\t}\n\treturn tmp;\n}\n```\n\n## \u67e5\u8be2\u540e\u7ee7\n\u4e0e\u524d\u9a71\u51e0\u4e4e\u76f8\u540c\uff08\u7565\uff09\n``` cpp\nint query_suf(int now,int data)\n{\n\tif(now==0)\n\t{\n\t\treturn 0;\n\t}\n\tif(t[now].data<=data)\n\t{\n\t\treturn query_suf(t[now].right,data);\n\t}\n\tint tmp=query_suf(t[now].left,data);\n\tif(tmp==0)\n\t{\n\t\treturn t[now].data;\n\t}\n\treturn tmp;\n}\n```\n\n[\u6d1b\u8c37P3369](https://www.luogu.org/problemnew/show/P3369)\u5b8c\u6574\u4ee3\u7801\uff1a\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Treap\n{\n\tint data;\n\tint value;\n\tint left;\n\tint right;\n\tint siz;\n};\nTreap t[100005];\nint cnt;\nint root;\nvoid up(int x)\n{\n\tt[x].siz=t[t[x].left].siz+t[t[x].right].siz+1;\n}\nvoid right_rorate(int &now)\n{\n\tint tmp=t[now].left;\n\tt[now].left=t[tmp].right;\n\tt[tmp].right=now;\n\tt[tmp].siz=t[now].siz;\n\tup(now);\n\tnow=tmp;\n}\nvoid left_rorate(int &now)\n{\n\tint tmp=t[now].right;\n\tt[now].right=t[tmp].left;\n\tt[tmp].left=now;\n\tt[tmp].siz=t[now].siz;\n\tup(now);\n\tnow=tmp;\n}\nvoid insert(int &now,int data)\n{\n\tif(now==0)\n\t{\n\t\tnow=++cnt;\n\t\tt[now].siz=1;\n\t\tt[now].data=data;\n\t\tt[now].value=rand()*rand()%19620817;\n\t\treturn ;\n\t}\n\tt[now].siz++;\n\tif(data>=t[now].data)\n\t{\n\t\tinsert(t[now].right,data);\n\t}\n\telse\n\t{\n\t\tinsert(t[now].left,data);\n\t}\n\tif(t[now].left!=0&&t[now].value>t[t[now].left].value)\n\t{\n\t\tright_rorate(now);\n\t}\n\tif(t[now].right!=0&&t[now].value>t[t[now].right].value)\n\t{\n\t\tleft_rorate(now);\n\t}\n\tup(now);\n}\nvoid erase(int &now,int data)\n{\n\tt[now].siz--;\n\tif(t[now].data==data)\n\t{\n\t\tif(t[now].left==0&&t[now].right==0)\n\t\t{\n\t\t\tnow=0;\n\t\t\treturn ;\n\t\t}\n\t\tif(t[now].left==0||t[now].right==0)\n\t\t{\n\t\t\tnow=t[now].left+t[now].right;\n\t\t\treturn ;\n\t\t}\n\t\tif(t[t[now].left].value<t[t[now].right].value)\n\t\t{\n\t\t\tright_rorate(now);\n\t\t\terase(t[now].right,data);\n\t\t\treturn ;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tleft_rorate(now);\n\t\t\terase(t[now].left,data);\n\t\t\treturn ;\n\t\t}\n\t}\n\tif(t[now].data>=data)\n\t{\n\t\terase(t[now].left,data);\n\t}\n\telse\n\t{\n\t\terase(t[now].right,data);\n\t}\n\tup(now);\n}\nint rank(int now,int data)\n{\n\tif(now==0)\n\t{\n\t\treturn 0;\n\t}\n\tif(data>t[now].data)\n\t{\n\t\treturn t[t[now].left].siz+1+rank(t[now].right,data);\n\t}\n\treturn rank(t[now].left,data);\n}\nint find(int now,int rank)\n{\n\tif(rank==t[t[now].left].siz+1)\n\t{\n\t\treturn t[now].data;\n\t}\n\tif(rank>t[t[now].left].siz+1)\n\t{\n\t\treturn find(t[now].right,rank-t[t[now].left].siz-1);\n\t}\n\treturn find(t[now].left,rank);\n}\nint query_pre(int now,int data)\n{\n\tif(now==0)\n\t{\n\t\treturn 0;\n\t}\n\tif(t[now].data>=data)\n\t{\n\t\treturn query_pre(t[now].left,data);\n\t}\n\tint tmp=query_pre(t[now].right,data);\n\tif(tmp==0)\n\t{\n\t\treturn t[now].data;\n\t}\n\treturn tmp;\n}\nint query_suf(int now,int data)\n{\n\tif(now==0)\n\t{\n\t\treturn 0;\n\t}\n\tif(t[now].data<=data)\n\t{\n\t\treturn query_suf(t[now].right,data);\n\t}\n\tint tmp=query_suf(t[now].left,data);\n\tif(tmp==0)\n\t{\n\t\treturn t[now].data;\n\t}\n\treturn tmp;\n}\nint main()\n{\n\tsrand(19620817);\n\tint n;\n\tcin>>n;\n\tint opt,data;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d %d\",&opt,&data);\n\t\tif(opt==1)\n\t\t{\n\t\t\tinsert(root,data);\n\t\t}\n\t\tif(opt==2)\n\t\t{\n\t\t\terase(root,data);\n\t\t}\n\t\tif(opt==3)\n\t\t{\n\t\t\tprintf(\"%d\\n\",rank(root,data)+1);\n\t\t}\n\t\tif(opt==4)\n\t\t{\n\t\t\tprintf(\"%d\\n\",find(root,data));\n\t\t}\n\t\tif(opt==5)\n\t\t{\n\t\t\tprintf(\"%d\\n\",query_pre(root,data));\n\t\t}\n\t\tif(opt==6)\n\t\t{\n\t\t\tprintf(\"%d\\n\",query_suf(root,data));\n\t\t}\n\t}\n\treturn 0;\n}\n```   \n\u6ce8\uff1a\u672c\u6587\u90e8\u5206\u56fe\u7247\u6765\u81ea[Brave_Cattle\u7684Blog](https://www.cnblogs.com/BCOI/p/9072444.html)\uff08\u81ea\u5df1\u5b66\u7684\u65f6\u5019\u53c2\u8003\u7684\uff09",
        "postTime": 1543155770,
        "uid": 70780,
        "name": "wasa855",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u4ec0\u4e48\uff1f\uff0121\u9875\u9898\u89e3\u7adf\u7136\u6ca1\u6709\u4e00\u4e2a\u4eba\u5199 AVL \u6811\uff0c\u4e8e\u662f\u672c\u849f\u84bb\u5c31\u5199\u4e00\u7bc7 AVL \u6811\u7684\u9898\u89e3\u3002\u5f53\u7136\uff0c AVL \u6811\u53ef\u80fd\u4f1a\u6bd4\u8f83\u96be\uff0c\u800c\u4e14\u5e38\u6570\u8f83\u5927\uff0c\u4f46\u5982\u679c\u6709\u6bd4\u8f83\u591a\u7684\u63d2\u5165\u548c\u5220\u9664 AVL \u6811\u5c31\u4f1a\u6709\u4f18\u52bf\u3002\n\n\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u666e\u901a\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log_2 n)$\uff0c\u4f46\u5728\u7279\u6b8a\u6784\u9020\u7684\u6570\u636e\u4e2d\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\uff0c\u5982\u56fe\u6240\u793a\u3002  \n![](https://cdn.luogu.com.cn/upload/image_hosting/oyvfpmtu.png)  \n\n\u4f46\u662f\uff0cAVL \u6811\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u5c31\u662f\u4e24\u68f5\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\uff0c\u6240\u4ee5\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log_2 n)$\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log_\\phi n)$\uff0c\u5982\u56fe\u6240\u793a\u3002  \n![](https://cdn.luogu.com.cn/upload/image_hosting/acgb6w38.png)  \n\u7531\u4e8e $\\log_\\phi2=1.44$\uff0c\u6240\u4ee5\u6700\u574f\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log_2^{1.44} n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u9ad8\u3002\n\n## \u505a\u6cd5\uff1a\n### \u57fa\u672c\u7684\u8282\u70b9\u5b9a\u4e49\uff1a\n```cpp\nstruct AVLnode;\ntypedef AVLnode* AVLtree;\nstruct AVLnode {\n\tint data, high;//\u6743\u503c\uff0c\u6811\u9ad8\n\tint freq, size;//\u9891\u6570\uff0c\u5927\u5c0f\n\tAVLtree ls, rs;//\u5de6\u5b50\uff0c\u53f3\u5b50\n\tAVLnode(): data(0), high(1), freq(1), size(1), ls(NULL), rs(NULL){}\n\tAVLnode(int a): data(a), high(1), freq(1), size(1), ls(NULL), rs(NULL){}//\u521d\u59cb\u5316\n};\n```\n### \u83b7\u53d6\u53ca\u66f4\u65b0\u6811\u9ad8\uff0c\u5927\u5c0f\uff1a\n\u4e3a\u4e86\u9632\u6b62\u56e0\u8bbf\u95ee\u7a7a\u8282\u70b9\u800c\u5bfc\u81f4 RE\uff0c\u6240\u4ee5\u8981\u7279\u5b9a\u51fd\u6570\u6765\u83b7\u53d6\u53ca\u66f4\u65b0\n```cpp\ninline int GetSize(AVLtree p) {//\u83b7\u53d6\u5927\u5c0f\n\tif (p == NULL) return 0;\n\treturn p->size;\n}\ninline int GetHigh(AVLtree p) {//\u83b7\u53d6\u6811\u9ad8\n\tif (p == NULL) return 0;\n\treturn p->high;\n}\ninline void update(AVLtree& p) {//\u66f4\u65b0\u8282\u70b9\n\tp->size = GetSize(p->ls) + GetSize(p->rs) + p->freq;\n\tp->high = max(GetHigh(p->ls), GetHigh(p->rs)) + 1;\n}\n```\n### \u5de6\u53f3\u65cb\u8f6c\uff1a\nAVL \u6811\u7684\u65cb\u8f6c\u65b9\u5f0f\u6709\u56db\u79cd\uff1a\u5de6\u5de6\uff0c\u53f3\u53f3\uff0c\u5de6\u53f3\uff0c\u53f3\u5de6\u3002  \n#### \u5de6\u5de6\uff1a\n\u5047\u5982\u6709\u8fd9\u6837\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5982\u56fe\u6240\u793a\u3002  \n![](https://cdn.luogu.com.cn/upload/image_hosting/l3bpc4yd.png)  \n\u73b0\u5728\u8981\u63d2\u516521\uff0c\u5219\u6b65\u9aa4\u5982\u4e0b\uff08\u6ce8\u610f\u53f3\u4e0b\u89d2\u7684\u5b57\uff09:  \n![](https://cdn.luogu.com.cn/upload/image_hosting/em7a9m63.png)  \n![](https://cdn.luogu.com.cn/upload/image_hosting/4xftqv65.png)  \n![](https://cdn.luogu.com.cn/upload/image_hosting/572my7q3.png)  \n```cpp\ninline void LeftPlus(AVLtree& p) {\n\tAVLtree q;\n\tq = p->ls;\n\tp->ls = q->rs;\n\tq->rs = p;\n\tupdate(p);\n\tupdate(q);\n\tp = q;\n}\n```\n#### \u53f3\u53f3\uff1a\n\u5047\u5982\u6709\u8fd9\u6837\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5982\u56fe\u6240\u793a\u3002  \n![](https://cdn.luogu.com.cn/upload/image_hosting/oe4z8x9a.png)  \n\u73b0\u5728\u8981\u63d2\u516555\uff0c\u5219\u6b65\u9aa4\u5982\u4e0b\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/gq9ads9c.png)  \n![](https://cdn.luogu.com.cn/upload/image_hosting/xlguww6z.png)  \n![](https://cdn.luogu.com.cn/upload/image_hosting/1mrcjdku.png)\n```cpp\ninline void RightPlus(AVLtree& p) {\n\tAVLtree q;\n\tq = p->rs;\n\tp->rs = q->ls;\n\tq->ls = p;\n\tupdate(p);\n\tupdate(q);\n\tp = q;\n}\n```\n#### \u5de6\u53f3\u53ca\u53f3\u5de6\uff1a\n\u5de6\u53f3\u8981\u5148\u628a\u8fd9\u9897\u4e8c\u53c9\u6811\u5411\u53f3\u65cb\u8f6c\u53d8\u6210\u5de6\u5de6\uff0c\u518d\u5de6\u65cb\uff1b\u53f3\u5de6\u53cd\u4e4b\u3002\n```cpp\ninline void LeftRight(AVLtree& p) {//\u5de6\u53f3\n\tRightPlus(p->ls);\n\tLeftPlus(p);\n}\ninline void RightLeft(AVLtree& p) {//\u53f3\u5de6\n\tLeftPlus(p->rs);\n\tRightPlus(p);\n}\n```\n### \u4e2d\u5e8f\u904d\u5386(\u672c\u9898\u4e0d\u9700\u8981\uff0c\u4f46\u53ef\u5f53\u505a\u8c03\u8bd5\u8bed\u53e5)\uff1a\n```cpp\ninline void OutPut(AVLtree p) {\n\tif (p == NULL) return;\n\tOutPut(p->ls);\n\tfor (int i = 1; i <= p->freq; ++i)\n\t\twrite(p->data), putchar(32);\n\tOutPut(p->rs);\n}\ninline void output() {//\u4e3b\u7a0b\u5e8f\u53ef\u4ee5\u66f4\u7b80\u6d01\uff0c\u4e0b\u540c\n\tOutPut(root);\n}\n```\n### \u63d2\u5165\uff1a\n\u5148\u6309\u7167\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u63d2\u5165\uff0c\u518d\u8fdb\u884c\u8c03\u6574\u3002\n```cpp\ninline void Insert(AVLtree &p, int x) {\n\tif (p == NULL) {\n\t\tp = new AVLnode(x);//\u6ca1\u6709\u8fd9\u4e2a\u8282\u70b9\uff0c\u76f4\u63a5\u63d2\u5165\u4e00\u4e2a\n\t\treturn;\n\t}\n\tif (p->data == x) {//\u5982\u679c\u5df2\u7ecf\u6709\u8fd9\u4e2a\u6811\u4e86\uff0c\u76f4\u63a5\u589e\u52a0\u8fd9\u4e2a\u6570\u7684\u9891\u7387\uff0c\u66f4\u65b0\u8fd9\u4e2a\u8282\u70b9\u5373\u53ef\n\t\t++(p->freq);\n\t\tupdate(p);\n\t\treturn;\n\t}\n\tif (p->data > x) {//\u5f80\u5de6\u5b50\u6811\u63d2\u5165\uff0c\u5de6\u5b50\u6811\u53ef\u80fd\u504f\u9ad8\n\t\tInsert(p->ls, x), update(p);\n\t\tif (GetHigh(p->ls) - GetHigh(p->rs) == 2) {\n\t\t\tif (x < p->ls->data)\n\t\t\t\tLeftPlus(p);//\u5de6\u5de6\n\t\t\telse\n\t\t\t\tLeftRight(p);//\u5de6\u53f3\n\t\t}\n\t}\n\telse {//\u5f80\u53f3\u5b50\u6811\u63d2\u5165\uff0c\u53f3\u5b50\u6811\u53ef\u80fd\u504f\u9ad8\n\t\tInsert(p->rs, x), update(p);\n\t\tif (GetHigh(p->rs) - GetHigh(p->ls) == 2) {\n\t\t\tif (x > p->rs->data)\n\t\t\t\tRightPlus(p);//\u53f3\u53f3\n\t\t\telse\n\t\t\t\tRightLeft(p);//\u53f3\u5de6\n\t\t}\n\t}\n\tupdate(p);//\u522b\u5fd8\u8bb0\u66f4\u65b0\n}\ninline void insert(int x) {\n\tInsert(root, x);\n}\n```\n### \u5220\u9664\uff1a\n\u5148\u6309\u7167\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u5220\u9664\uff0c\u518d\u8fdb\u884c\u8c03\u6574\u3002\n```cpp\ninline void Erase(AVLtree& p, int x) {\n\tif (p == NULL) return;//\u627e\u4e0d\u5230\u8fd9\u4e2a\u6811\uff0c\u76f4\u63a5\u8fd4\u56de\n\tif (p->data > x) {//\u5220\u5de6\u5b50\u6811\u7684\u6570\uff0c\u53f3\u5b50\u6811\u53ef\u80fd\u504f\u9ad8\n\t\tErase(p->ls, x), update(p);\n\t\tif (GetHigh(p->rs) - GetHigh(p->ls) == 2) {\n\t\t\tif (GetHigh(p->rs->rs) >= GetHigh(p->rs->ls))//\u4e00\u5b9a\u8981\u52a0\u7b49\u53f7\uff0c\u540c\u4e0b\uff0c\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e2a\uff0c\u672c\u849f\u84bb92\u5206\u8c03\u4e8655\u5206\u949f\uff01\n\t\t\t\tRightPlus(p);\n\t\t\telse\n\t\t\t\tRightLeft(p);\n\t\t}\n\t}\n\telse if(p->data < x) {\n\t\tErase(p->rs, x), update(p);\n\t\tif (GetHigh(p->ls) - GetHigh(p->rs) == 2) {\n\t\t\tif (GetHigh(p->ls->ls) >= GetHigh(p->ls->rs))\n\t\t\t\tLeftPlus(p);\n\t\t\telse\n\t\t\t\tLeftRight(p);\n\t\t}\n\t}\n\telse {\n\t\tif (p->freq > 1) {//\u5982\u679c\u8fd9\u4e2a\u6570\u7684\u9891\u7387\u5927\u4e8e1\uff0c\u90a3\u4e48\u76f4\u63a5\u51cf\u53bb\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\n\t\t\t--(p->freq);\n\t\t\tupdate(p);\n\t\t\treturn;\n\t\t}\n\t\tif (p->ls && p->rs) {//\u5de6\u53f3\u5b50\u6811\u90fd\u6709\n\t\t\tAVLtree q = p->rs;//\u627e\u8fd9\u4e2a\u6570\u7684\u540e\u7ee7\n\t\t\twhile (q->ls) q = q->ls;\n\t\t\tp->freq = q->freq;\n\t\t\tp->data = q->data, q->freq = 1;//\u628aq\u8282\u70b9\u63d0\u4e0a\u6765\n\t\t\tErase(p->rs, q->data);//\u8fd9\u4e2a\u8282\u70b9\u80af\u5b9a\u5c11\u4e8e2\u4e2a\u5b50\u6811\u4e86\uff0c\u76f4\u63a5\u5220\u9664\n\t\t\tupdate(p);//\u522b\u5fd8\u8bb0\u66f4\u65b0\n\t\t\tif (GetHigh(p->ls) - GetHigh(p->rs) == 2) {\n\t\t\t\tif (GetHigh(p->ls->ls) >= GetHigh(p->ls->rs))\n\t\t\t\t\tLeftPlus(p);\n\t\t\t\telse\n\t\t\t\t\tLeftRight(p);\n\t\t\t}\n\t\t}\n\t\telse {//\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5b50\u6811\uff0c\u76f4\u63a5\u628a\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u63d0\u4e0a\u6765\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u66f4\u65b0\n\t\t\tAVLtree q = p;\n\t\t\tif (p->ls) p = p->ls;\n\t\t\telse if (p->rs) p = p->rs;\n\t\t\telse p = NULL;\n\t\t\tdelete q;\n\t\t\tq = NULL;\n\t\t}\n\t}\n\tif (p == NULL) return;//\u6ce8\u610f\u8fd9\u91cc\u8fd8\u8981\u5224\u65ad\uff0c\u5426\u5219\u53ef\u80fd\u4f1aRE\n\tupdate(p);//\u6700\u540e\u66f4\u65b0\u4e00\u4e0b\n}\ninline void erase(int x) {\n\tErase(root, x);\n}\n```\n### \u6839\u636e\u6570\u503c\u627e\u6392\u540d\uff1a\n```cpp\ninline int get_rank(AVLtree p, int val) {\n\tif (p->data == val) return GetSize(p->ls) + 1;//\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u8981\u627e\u7684\u6570\u5b57\uff0c\u8fd4\u56de\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u52a01\n\tif (p->data > val) return get_rank(p->ls, val);//\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u5927\u4e8e\u8981\u627e\u7684\u6570\u5b57\uff0c\u5f80\u5de6\u627e\n\treturn get_rank(p->rs, val) + GetSize(p->ls) + p->freq;//\u5f80\u53f3\u627e\uff0c\u8fd4\u56de\u503c\u8981\u52a0\u4e0a\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u548c\u8fd9\u4e2a\u8282\u70b9\u6570\u51fa\u73b0\u7684\u9891\u6570\n}\ninline int GetRank(int val) {\n\treturn get_rank(root, val);\n}\n```\n### \u6839\u636e\u6392\u540d\u627e\u6570\u503c\uff1a\n```cpp\ninline int get_val(AVLtree p, int rank) {\n\tif (GetSize(p->ls) >= rank) return get_val(p->ls, rank);//\u5982\u679c\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u4e0d\u5c0f\u4e8e\u6392\u540d\uff0c\u5f80\u5de6\u627e\n\tif (GetSize(p->ls) + p->freq >= rank) return p->data;//\u5982\u679c\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u52a0\u4e0a\u8fd9\u4e2a\u8282\u70b9\u6570\u503c\u51fa\u73b0\u7684\u9891\u6570\u4e0d\u5c0f\u4e8e\u6392\u540d\uff0c\u8fd4\u56de\u8fd9\u4e2a\u6570\u503c\n\treturn get_val(p->rs, rank - GetSize(p->ls) - p->freq);//\u5f80\u53f3\u627e\uff0c\u4e3b\u8981\u6392\u540d\u8981\u51cf\u53bb\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u548c\u8fd9\u4e2a\u8282\u70b9\u6570\u503c\u51fa\u73b0\u7684\u9891\u6570\n}\ninline int GetVal(int rank) {\n\treturn get_val(root, rank);\n}\n```\n### \u627e\u524d\u9a71\u540e\u7ee7\uff1a\n```cpp\ninline int GetPrev(int val) {//\u627e\u524d\u9a71\n\tAVLtree ans = new AVLnode(-1LL << 42), p = root;//\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u627e\uff0c\u521d\u59cb\u7b54\u6848\u8d4b\u6700\u5c0f\u503c\n\twhile (p) {//\u5982\u679cp\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u5219\u4e00\u76f4\u627e\n\t\tif (p->data == val) {\n\t\t\tif (p->ls) {//\u5982\u679c\u627e\u5230\u8fd9\u4e2a\u6570\u4e86\uff0c\u5148\u627e\u8fd9\u4e2a\u6570\u7684\u5de6\u5b50\u6811\uff0c\u518d\u4e00\u76f4\u5f80\u53f3\u627e\n\t\t\t\tp = p->ls;\n\t\t\t\twhile (p->rs)\n\t\t\t\t\tp = p->rs;\n\t\t\t\tans = p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (p->data < val && p->data > ans->data) ans = p;//\u5982\u679c\u9047\u5230\u4e00\u4e2a\u6bd4\u8fd9\u4e2a\u503c\u5c0f\u4f46\u5927\u4e8e\u5f53\u524d\u7b54\u6848\u7684\u503c\u7684\u8bdd\uff0c\u628a\u7b54\u6848\u8d4b\u7ed9ans\n\t\tp = p->data < val ? p->rs : p->ls;\n\t}\n\treturn ans->data;\n}\ninline int GetNext(int val) {//\u627e\u540e\u7ee7\uff0c\u4e0e\u627e\u524d\u9a71\u7c7b\u4f3c\n\tAVLtree ans = new AVLnode(1LL << 42), p = root;\n\twhile (p) {\n\t\tif (p->data == val) {\n\t\t\tif (p->rs) {\n\t\t\t\tp = p->rs;\n\t\t\t\twhile (p->ls)\n\t\t\t\t\tp = p->ls;\n\t\t\t\tans = p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (p->data > val && p->data < ans->data) ans = p;\n\t\tp = p->data < val ? p->rs : p->ls;\n\t}\n\treturn ans->data;\n}\n```\n### \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b(\u6ce8\u91ca\u524d\u9762\u6709\u4e86\uff0c\u5c31\u4e0d\u5199\u4e86)\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N = 100000 + 10;\ntemplate<class T> inline void read(T &x) {\n\tchar c = 0;\n\tint f = x = 0;\n\twhile (c < 48 || c > 57) {\n\t\tif (c == '-')\n\t\t\tf = 1;\n\t\tc = getchar();\n\t}\n\twhile (c > 47 && c < 58) x = (x << 3)+(x << 1)+(c & 15), c = getchar();\n\tif (f) x = -x;\n}\ntemplate<class T,class... Args> inline void read(T &x, Args&... args) {\n\tread(x), read(args...);\n}\ntemplate<class T> inline void write(T x) {\n\tif (x < 0) {\n\t\tputchar(45);\n\t\twrite(-x);\n\t\treturn;\n\t}\n\tif (x > 9) write(x / 10);\n\tputchar((x % 10) | 48);\n}\nstruct AVLnode;\ntypedef AVLnode* AVLtree;\nstruct AVLnode {\n\tint data, high;\n\tint freq, size;\n\tAVLtree ls, rs;\n\tAVLnode(): data(0), high(1), freq(1), size(1), ls(NULL), rs(NULL){}\n\tAVLnode(int a): data(a), high(1), freq(1), size(1), ls(NULL), rs(NULL){}\n};\ninline int GetSize(AVLtree p) {\n\tif (p == NULL) return 0;\n\treturn p->size;\n}\ninline int GetHigh(AVLtree p) {\n\tif (p == NULL) return 0;\n\treturn p->high;\n}\nstruct AVL {\n\tAVLtree root;\n\tinline void update(AVLtree& p) {\n\t\tp->size = GetSize(p->ls) + GetSize(p->rs) + p->freq;\n\t\tp->high = max(GetHigh(p->ls), GetHigh(p->rs)) + 1;\n\t}\n\tinline void LeftPlus(AVLtree& p) {\n\t\tAVLtree q;\n\t\tq = p->ls;\n\t\tp->ls = q->rs;\n\t\tq->rs = p;\n\t\tupdate(p);\n\t\tupdate(q);\n\t\tp = q;\n\t}\n\tinline void RightPlus(AVLtree& p) {\n\t\tAVLtree q;\n\t\tq = p->rs;\n\t\tp->rs = q->ls;\n\t\tq->ls = p;\n\t\tupdate(p);\n\t\tupdate(q);\n\t\tp = q;\n\t}\n\tinline void LeftRight(AVLtree& p) {\n\t\tRightPlus(p->ls);\n\t\tLeftPlus(p);\n\t}\n\tinline void RightLeft(AVLtree& p) {\n\t\tLeftPlus(p->rs);\n\t\tRightPlus(p);\n\t}\n\tinline void OutPut(AVLtree p) {\n\t\tif (p == NULL) return;\n\t\tOutPut(p->ls);\n\t\tfor (int i = 1; i <= p->freq; ++i)\n\t\t\twrite(p->data), putchar(32);\n\t\tOutPut(p->rs);\n\t}\n\tinline void output() {\n\t\tOutPut(root);\n\t}\n\tinline void Insert(AVLtree &p, int x) {\n\t\tif (p == NULL) {\n\t\t\tp = new AVLnode(x);\n\t\t\treturn;\n\t\t}\n\t\tif (p->data == x) {\n\t\t\t++(p->freq);\n\t\t\tupdate(p);\n\t\t\treturn;\n\t\t}\n\t\tif (p->data > x) {\n\t\t\tInsert(p->ls, x), update(p);\n\t\t\tif (GetHigh(p->ls) - GetHigh(p->rs) == 2) {\n\t\t\t\tif (x < p->ls->data)\n\t\t\t\t\tLeftPlus(p);\n\t\t\t\telse\n\t\t\t\t\tLeftRight(p);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tInsert(p->rs, x), update(p);\n\t\t\tif (GetHigh(p->rs) - GetHigh(p->ls) == 2) {\n\t\t\t\tif (x > p->rs->data)\n\t\t\t\t\tRightPlus(p);\n\t\t\t\telse\n\t\t\t\t\tRightLeft(p);\n\t\t\t}\n\t\t}\n\t\tupdate(p);\n\t}\n\tinline void insert(int x) {\n\t\tInsert(root, x);\n\t}\n\tinline void Erase(AVLtree& p, int x) {\n\t\tif (p == NULL) return;\n\t\tif (p->data > x) {\n\t\t\tErase(p->ls, x), update(p);\n\t\t\tif (GetHigh(p->rs) - GetHigh(p->ls) == 2) {\n\t\t\t\tif (GetHigh(p->rs->rs) >= GetHigh(p->rs->ls))\n\t\t\t\t\tRightPlus(p);\n\t\t\t\telse\n\t\t\t\t\tRightLeft(p);\n\t\t\t}\n\t\t}\n\t\telse if(p->data < x) {\n\t\t\tErase(p->rs, x), update(p);\n\t\t\tif (GetHigh(p->ls) - GetHigh(p->rs) == 2) {\n\t\t\t\tif (GetHigh(p->ls->ls) >= GetHigh(p->ls->rs))\n\t\t\t\t\tLeftPlus(p);\n\t\t\t\telse\n\t\t\t\t\tLeftRight(p);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (p->freq > 1) {\n\t\t\t\t--(p->freq);\n\t\t\t\tupdate(p);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (p->ls && p->rs) {\n\t\t\t\tAVLtree q = p->rs;\n\t\t\t\twhile (q->ls) q = q->ls;\n\t\t\t\tp->freq = q->freq;\n\t\t\t\tp->data = q->data, q->freq = 1;\n\t\t\t\tErase(p->rs, q->data);\n\t\t\t\tupdate(p);\n\t\t\t\tif (GetHigh(p->ls) - GetHigh(p->rs) == 2) {\n\t\t\t\t\tif (GetHigh(p->ls->ls) >= GetHigh(p->ls->rs))\n\t\t\t\t\t\tLeftPlus(p);\n\t\t\t\t\telse\n\t\t\t\t\t\tLeftRight(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tAVLtree q = p;\n\t\t\t\tif (p->ls) p = p->ls;\n\t\t\t\telse if (p->rs) p = p->rs;\n\t\t\t\telse p = NULL;\n\t\t\t\tdelete q;\n\t\t\t\tq = NULL;\n\t\t\t}\n\t\t}\n\t\tif (p == NULL) return;\n\t\tupdate(p);\n\t}\n\tinline void erase(int x) {\n\t\tErase(root, x);\n\t}\n\tinline int get_val(AVLtree p, int rank) {\n\t\tif (GetSize(p->ls) >= rank) return get_val(p->ls, rank);\n\t\tif (GetSize(p->ls) + p->freq >= rank) return p->data;\n\t\treturn get_val(p->rs, rank - GetSize(p->ls) - p->freq);\n\t}\n\tinline int GetVal(int rank) {\n\t\treturn get_val(root, rank);\n\t}\n\tinline int get_rank(AVLtree p, int val) {\n\t\tif (p->data == val) return GetSize(p->ls) + 1;\n\t\tif (p->data > val) return get_rank(p->ls, val);\n\t\treturn get_rank(p->rs, val) + GetSize(p->ls) + p->freq;\n\t}\n\tinline int GetRank(int val) {\n\t\treturn get_rank(root, val);\n\t}\n\tinline int GetPrev(int val) {\n\t\tAVLtree ans = new AVLnode(-1LL << 42), p = root;\n\t\twhile (p) {\n\t\t\tif (p->data == val) {\n\t\t\t\tif (p->ls) {\n\t\t\t\t\tp = p->ls;\n\t\t\t\t\twhile (p->rs)\n\t\t\t\t\t\tp = p->rs;\n\t\t\t\t\tans = p;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (p->data < val && p->data > ans->data) ans = p;\n\t\t\tp = p->data < val ? p->rs : p->ls;\n\t\t}\n\t\treturn ans->data;\n\t}\n\tinline int GetNext(int val) {\n\t\tAVLtree ans = new AVLnode(1LL << 42), p = root;\n\t\twhile (p) {\n\t\t\tif (p->data == val) {\n\t\t\t\tif (p->rs) {\n\t\t\t\t\tp = p->rs;\n\t\t\t\t\twhile (p->ls)\n\t\t\t\t\t\tp = p->ls;\n\t\t\t\t\tans = p;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (p->data > val && p->data < ans->data) ans = p;\n\t\t\tp = p->data < val ? p->rs : p->ls;\n\t\t}\n\t\treturn ans->data;\n\t}\n};\nint n, x, opt;\nAVL a;\nsigned main() {\n\tread(n);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tread(opt, x);\n\t\tswitch(opt) {\n\t\t\tcase 1: a.insert(x); break;\n\t\t\tcase 2: a.erase(x); break;\n\t\t\tcase 3: write(a.GetRank(x)), putchar(10); break;\n\t\t\tcase 4: write(a.GetVal(x)), putchar(10); break;\n\t\t\tcase 5: write(a.GetPrev(x)), putchar(10); break;\n\t\t\tcase 6: write(a.GetNext(x)), putchar(10); break;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1576989299,
        "uid": 181378,
        "name": "Alarm5854",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "# ~~\u849f\u84bb\u7b2c\u4e00\u7bc7\u9898\u89e3~~\n\n## \u770b\u5230\u6709\u4f4d%%\u5de8\u4f6c%%\u5c45\u7136\u5199\u4e86\u7ea2\u9ed1\u6811\uff08\u770b\u4e0d\u61c2\uff09\n\n## \u4e0d\u8fc7\u8fd9\u9898\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811k\u6389\n\n---------------------\u5b9e\u73b0-----------------------\n\n### \u6211\u4eec\u628a\u7ebf\u6bb5\u6811\u5f00\u6210\u4e00\u4e2a\u6876\n\n### \u79bb\u7ebf\u64cd\u4f5c\n\n### \u6bcf\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u4e3a\u533a\u95f4\u5185\u6570\u7684\u4e2a\u6570\n\n### \u8fd9\u6837\u5199\u4e0d\u4ec5\u7801\u91cf\u51cf\u5c11\u4e86\uff0c\u8fd0\u884c\u901f\u5ea6\u4e5f\u5feb\u4e86\u4e0d\u5c11\n\n---\n\n1.\u63d2\u5165\n              \u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u6743\u503c+1\uff1b\n\n2.\u5220\u9664\n             \n             \u540c\u4e0a\uff0c\u8282\u70b9\u6743\u503c-1\uff1b  \n        \u56e0\u6b64\uff0c\u4ee5\u4e0a\u64cd\u4f5c\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u51fd\u6570\n\n        \n    inline void add_or_del(int o,int l,int r,int k,int pos)\n    {\n        st[o]+=pos;//\u52a0\u6216\u51cf\n        if(l==r) return;  //\u5230\u53f6\u5b50\u8282\u70b9\n        int mid=(l+r)>>1;     \n        if(k<=mid) add_or_del(ls,l,mid,k,pos);   //\u5206\u522b\u5411\u5de6\u53f3\u513f\u5b50\u9012\u5f52\n        else add_or_del(rs,mid+1,r,k,pos);\n    }\n\n\u975e\u5e38\u7b80\u5355\uff0c\u800c\u4e14\u5f00\u59cb\u90fd\u4e0d\u7528\u5efa\u6811\uff08\u6876\u4e3a\u7a7a\uff09\n\n3.\u67e5\u8be2 x \u6570\u7684\u6392\u540d:\n\n         \u6bcf\u6b21\u628ax\u4e0e\u5f53\u524d\u533a\u95f4\u4e2d\u70b9mid\u6bd4\u8f83         \n        \n         \u5982\u679c\u5c0f\u4e8e\u7b49\u4e8emid\uff0c\u8bf4\u660e\u5728\u5de6\u533a\u95f4\uff0c\u5411\u5de6\u513f\u5b50\u5bfb\u627e \n     \n         \u5982\u679c\u5927\u4e8emid\uff0c\u8bf4\u660e\u5728\u53f3\u533a\u95f4  \n     \n         \u8fd9\u65f6\uff0c\u5b83\u7684\u6392\u540d\u8981\u52a0\u4e0a\u5de6\u5b50\u6811\u7684\u5927\u5c0f\uff08\u5b83\u6bd4\u6574\u4e2a\u5de6\u5b50\u6811\u7684\u6570\u90fd\u5927\uff09\n      \n         \u8fb9\u754c\uff0c\u5f53l==r\u65f6\uff08\u5230\u4e86\u53f6\u5b50\uff09\uff0c\u90a3\u4e48return 1\uff1b(\u5728[l,r]\u7684\u533a\u95f4\u53ea\u6709\u81ea\u5df1\uff0c\u6392\u540d\u7b2c\u4e00)\n\n  QAQ\u4ee3\u7801\n\n    inline int x_rank_n(int o,int l,int r,int k)\n    {\n        if(l==r) return 1;\n        int mid=(l+r)>>1;\n        if(k<=mid) return x_rank_n(ls,l,mid,k);\n        else return st[ls]+x_rank_n(rs,mid+1,r,k);\n    }\n4.\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570\n \n \t    \u539f\u7406\u540c\u4e0a\uff0c\u6ce8\u610f\u5728\u5411\u53f3\u513f\u5b50\u627e\u7684\u65f6\u5019\u8981\u51cf\u53bb\u5de6\u513f\u5b50\u5927\u5c0f\n        \n5.x\u7684\u524d\u9a71\n        \n        \u7b49\u4e8e\u6392\u5728   x\u7684\u6392\u540d\u51cf\u4e00  \u4f4d\u7f6e\u7684\u6570\n\n6.x\u7684\u540e\u7ee7\n\n        \u7b49\u4e8e\u6392\u5728     x+1\u7684\u6392\u540d   \u4f4d\u7f6e\u7684\u6570\n### \u5168\u90e8\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cctype>\n#include<algorithm>\nusing namespace std;\n#define int long long\n#define ls (o<<1)\n#define rs (ls|1)\nint b[100500];\nint a[100500];\nint val[100500];\nint st[405000];\nint n;\nint tot;\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch))\n    {\n        if(ch=='-')\n            f=-f;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        x=(x<<1)+(x<<3)+(ch^48);\n        ch=getchar();\n    }\n    return x*f;\n}\ninline void put(int x)\n{\n    if(x<0)\n    {\n        putchar('-');\n        x=-x;\n    }\n    if(x>9)\n        put(x/10);\n    putchar(x%10+'0');\n}\ninline void add_or_del(int o,int l,int r,int k,int pos)\n{\n    st[o]+=pos;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(k<=mid) add_or_del(ls,l,mid,k,pos);\n    else add_or_del(rs,mid+1,r,k,pos);\n}\ninline int x_rank_n(int o,int l,int r,int k)\n{\n    if(l==r) return 1;\n    int mid=(l+r)>>1;\n    if(k<=mid) return x_rank_n(ls,l,mid,k);\n    else return st[ls]+x_rank_n(rs,mid+1,r,k);\n}\ninline int n_rank_x(int o,int l,int r,int k)\n{\n    if(l==r) return l;\n    int mid=(l+r)>>1;\n    if(st[ls]>=k) return n_rank_x(ls,l,mid,k);\n    else return n_rank_x(rs,mid+1,r,k-st[ls]);\n}\nsigned main()\n{\n    n=read();\n    for(int i=1;i<=n;i++)\n    {\n        val[i]=read();\n        a[i]=read();\n        if(val[i]!=4)\n            b[++tot]=a[i];\n    }\n    sort(b+1,b+tot+1);\n    for(int i=1;i<=n;i++)\n    {\n        if(val[i]!=4)\n            a[i]=lower_bound(b+1,b+tot+1,a[i])-b;\n    }\n    for(int i=1;i<=n;i++)\n    {\n        switch(val[i])\n        {\n            case 1: add_or_del(1,1,tot,a[i],1);break;\n            case 2: add_or_del(1,1,tot,a[i],-1);break;\n            case 3: put(x_rank_n(1,1,tot,a[i]));putchar('\\n');break;\n            case 4: put(b[n_rank_x(1,1,tot,a[i])]);putchar('\\n');break;\n            case 5: put(b[n_rank_x(1,1,tot,x_rank_n(1,1,tot,a[i])-1)]);putchar('\\n');break;\n            default: put(b[n_rank_x(1,1,tot,x_rank_n(1,1,tot,a[i]+1))]);putchar('\\n');\n        }\n    }\n    return 0;\n}\n```\n### \u8dd1\u4e86388ms\n",
        "postTime": 1533284090,
        "uid": 88460,
        "name": "olinr",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "# \u5e73\u8861\u6811\u677f\u5b50\n\u5176\u5b9e\u8fd9\u5c31\u662f\u5e73\u8861\u6811\u7684\u6a21\u677f\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u505a\u6cd5\uff0c\u7b2c\u4e00\u79cd\u5c31\u662f\u76f4\u63a5\u624b\u5199\u5e73\u8861\u6811FHQ,\u8fd8\u6709\u4e00\u79cd\u5c31\u662f\u7528stl\uff0c\u524d\u8005\u6bd4\u8f83\u5feb\uff0cstl\u53c8\u5206\u4e24\u79cd\uff1avector\u548cset\uff08\u4e3b\u8981\u662fmultiset\uff09;\u8fd9\u91cc\u6211\u4e3b\u8981\u8bb2\u4e24\u79cdFHQ\u548cvector\uff08\u4e3b\u8981\u662fset\u4e0d\u597d\u64cd\u4f5cqwq\uff09\u3002\n\n\nFHQ\u662f\u6700\u8fd1\u51e0\u5e74\u624d\u6d41\u884c\u7684\uff0c\u662f\u4e00\u4e2a\u5b66\u751f\uff08\u8303\u6d69\u5f3a\uff09\u7684\u5927\u725b\u53d1\u660e\u51fa\u6765\u7684\uff0c\u5b83\u4e3b\u8981\u6d89\u53ca\u5230\u4e24\u79cd\u64cd\u4f5c\u54e6\uff0c\u7b2c\u4e00\u79cd\u5c31\u662f\u5206\u88c2\uff08split\uff09\uff0c\u4e0e\u5408\u5e76\uff08merge\uff09\uff0c\u800c\u8fd9\u9053\u9898\u8fd8\u9700\u8981\u591a\u52a0\u4e00\u4e2a\u51fd\u6570kth\u6c42\u6392\u540d\u4e3ak\u7684\u6811\uff1b\u4e0d\u505a\u591a\u89e3\u91ca\u4e86\uff0c\u4ee3\u7801\u4e0a\u6162\u6162\u89e3\u91ca\u2014\u2014\u2014\u2014\u2014\u20141.\n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int M=1e6+10;\nint n,root,l,r,p,cnt;//\uff08l,r,q\u5206\u522b\u8868\u793a\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u8fd8\u6709\u4e2d\u95f4\u8282\u70b9\u7684\u6839\uff09\uff1b\nstruct node\n{\n\tint l,r;\n\tint val,key;//val\u8bb0\u5f55\u503c,key\u8bb0\u5f55\u952e\u503c\uff08key\u503c\u968f\u673a\u5316\uff0c\u8fd9\u6837\u7a0b\u5e8f\u66f4\u52a0\u8fd0\u884c\u7684\u7a33\u5b9a\uff09\n\tint size;//size\u8bb0\u5f55\u5f53\u524d\u6811\u7684\u8282\u70b9\u6570\n}tree[M];\nvoid update(int u)//size\u5305\u62ec\u6839\u81ea\u5df1\n{\n\ttree[u].size=tree[tree[u].l].size+tree[tree[u].r].size+1;//\u66f4\u65b0\u8282\u70b9\u6570 \n}\nvoid split(int u,int x,int &l,int &r)//\u52a0\u4e2a&\u662f\u4e3a\u4e86\u53ef\u4ee5\u5427l\u4e0er\u540c\u65f6\u4f20\u56de\u53bb\uff08\u8fd9\u4e5f\u4e0d\u53eb\u4f20\uff0c\u5c31\u53eb\u8bb0\u5f55\u597d\u4e86\uff09\uff1b\n{//\u5206\u79bb\u64cd\u4f5c \n\tif(!u)\n\t{//\u5230\u5e95\u4e86 \n\t\tl=r=0;\n\t\treturn ;\n\t}\n\tif(tree[u].val<=x)\n\t{//\u786e\u5b9a\u5de6\u5b50\u6811\u7684\u6839 \n\t\tl=u;\n\t\tsplit(tree[u].r,x,tree[u].r,r);//\u9012\u5f52\u53f3\u5b50\u6811 \n\t}\n\tif(tree[u].val>x)\n\t{//\u786e\u5b9a\u53f3\u5b50\u6811\u7684\u6839 \n\t\tr=u;\n\t\tsplit(tree[u].l,x,l,tree[u].l);//\u9012\u5f52\u5de6\u5b50\u6811 \n\t}\n\tupdate(u);//\u66f4\u65b0\u5f53\u524d\u7684\u8282\u70b9 \n}\nvoid adde(int x)\n{//\u5efa\u7acb\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u6811 \n\tcnt++;tree[cnt].size=1;\n\ttree[cnt].l=tree[cnt].r=0;\n\ttree[cnt].val=x;tree[cnt].key=rand();//\u7cbe\u9ad3,\u968f\u673a\u5316,\u9632\u6b62\u6570\u636e\u5361\u4e00\u6761\u94fe\t\n}\nint merge(int l,int r)\n{//\u5408\u5e76\u64cd\u4f5c(\u53ef\u4ee5\u540c\u5de6\u504f\u6811\u4e00\u8d77\u7406\u89e3)\n\tif(!l || !r)//\u627e\u5230\u53f6\u5b50\u8282\u70b9 \n\t\treturn l+r;\n\t//\u7ef4\u62a4\u952e\u503c\u7684\u4e00\u4e2a\u5c0f\u6839\u5806\n\tif(tree[l].key<=tree[r].key)\n\t{//l\u8282\u70b9\u662f\u7236\u4eb2\u8282\u70b9 \n\t\ttree[l].r=merge(tree[l].r,r);//\u5176\u5de6\u513f\u5b50\u4e3a\u539f\u6765\u7684\u5de6\u513f\u5b50,\u53ea\u9700\u66f4\u65b0\u53f3\u513f\u5b50 \n\t\tupdate(l);return l;\n\t}\n\tif(tree[l].key>tree[r].key)\n\t{//r\u8282\u70b9\u662f\u7236\u4eb2\u8282\u70b9 \n\t\ttree[r].l=merge(l,tree[r].l);//\u5176\u53f3\u513f\u5b50\u4e3a\u539f\u6765\u7684\u53f3\u513f\u5b50,\u53ea\u9700\u66f4\u65b0\u5de6\u513f\u5b50 \n\t\tupdate(r);return r;\n\t}\n}\nint kth(int u,int k)\n{//\u6c42\u6392\u540d\u7b2ck\u7684\u6570\n\tif(k<=tree[tree[u].l].size)//\u5728\u5de6\u533a\u95f4 \n\t\treturn kth(tree[u].l,k);\n\telse if(k==tree[tree[u].l].size+1)//\u8fd9\u4e2a\u6570\u4e3a\u6b64\u533a\u95f4\u7684\u6839 \n\t\t\treturn u;\n\telse\n\t{\n\t\tk-=(tree[tree[u].l].size+1);//\u6392\u540d\u4e3ak\u8981\u51cf\u5c11\u5de6\u513f\u5b50\u7684\u8282\u70b9\u6570 \n\t\treturn kth(tree[u].r,k);//\u5728\u53f3\u533a\u95f4 \n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tint opt,x;//opt\u4e3a\u64cd\u4f5c\uff0cx\u53d8\u91cf\uff1b \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",&opt,&x);\n\t\tif(opt==1)\n\t\t{//\u6dfb\u52a0\u64cd\u4f5c\n\t\t\tsplit(root,x,l,r);//\u5148\u5206\u79bb<=x\u548c>x\u7684\u4e24\u68f5\u6811 \n\t\t\tadde(x);//\u65b0\u5efa\u4e00\u9897\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u4e3ax\u7684\u6811\n\t\t\troot=merge(merge(l,cnt),r);//\u5728<=x\u7684\u6811\u91cc\u9762\u6dfb\u52a0\u8fd9\u68f5\u6811\u5e76\u4e14\u5408\u5e76\u4e4b\u524d\u5206\u79bb\u7684>x\u7684\u6811 \n\t\t}\n\t\tif(opt==2)\n\t\t{//\u5220\u9664\u64cd\u4f5c(\u4e24\u6b21\u5206\u79bb\u64cd\u4f5c) \n\t\t\tsplit(root,x,l,r);//\u5206\u79bb<=x\u7684\u6811\u548c>x\u7684\u6811 \n\t\t\tsplit(l,x-1,l,p);//\u5206\u79bb<x\u7684\u6811\u548c==x\u7684\u6811 \n\t\t\tp=merge(tree[p].l,tree[p].r);//\u5220\u9664==x\u7684\u6811\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2ax,\u53ea\u80fd\u5220\u4e00\u4e2a,\u4e0d\u80fd\u5220\u6574\u68f5\u6811 \uff0c\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u5408\u5e76\u540e\u6839\u8282\u70b9\u5c31\u6ca1\u4e86\n\t\t\troot=merge(merge(l,p),r);//\u5c06<x\u7684\u6811,>x\u7684\u6811\u4ee5\u53ca\u5269\u4f59\u7684==x\u7684\u6811\u5408\u5e76 \n\t\t}\n\t\tif(opt==3)\n\t\t{//\u67e5\u8be2\u6570x\u7684\u6392\u540d \n\t\t\tsplit(root,x-1,l,r);//\u5148\u5206\u79bb<x\u7684\u6811\u548c>=x\u7684\u6811 \n\t\t\tprintf(\"%d\\n\",tree[l].size+1);//\u6811x\u7684\u6392\u540d\u5373\u4e3a<x\u7684\u6811\u4e2d\u5143\u7d20\u7684\u4e2a\u6570+1,\u4e0d\u80fd\u5206\u79bb\u6210<=x\u7684\u6811,\u56e0\u4e3ax\u6709\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a \n\t\t\troot=merge(l,r);//\u5408\u5e76 \n\t\t}\n\t\tif(opt==4)\n\t\t{//\u627e\u6392\u540d\u7b2ck\u7684\u6570 \n\t\t\tprintf(\"%d\\n\",tree[kth(root,x)].val);//kth\u8fd4\u56de\u7684\u662f\u6b64\u8282\u70b9 \n\t\t}\n\t\tif(opt==5)\n\t\t{//\u6c42x\u7684\u524d\u9a71 \n\t\t\tsplit(root,x-1,l,r);//\u5148\u5206\u79bb<x\u7684\u6811\u548c>=x\u7684\u6811\n\t\t\tprintf(\"%d\\n\",tree[kth(l,tree[l].size)].val);//<x\u7684\u6811\u4e2d \u6392\u540d\u7b2c \u6b64\u6811\u5143\u7d20\u4e2a\u6570(size) \u7684\u6570\u5373\u4e3a\u6b64\u6811\u7684\u524d\u9a71,\u4e0d\u80fd\u5206\u79bb\u6210<=x\u7684\u6811,\u7406\u7531\u540c\u4e0a \n\t\t\troot=merge(l,r);//\u5408\u5e76 \n\t\t}\n\t\tif(opt==6)\n\t\t{//\u6c42x\u7684\u540e\u7ee7 \n\t\t\tsplit(root,x,l,r);//\u5148\u5206\u79bb<=x\u7684\u6811\u548c>x\u7684\u6811 \n\t\t\tprintf(\"%d\\n\",tree[kth(r,1)].val);//>x\u7684\u6811\u4e2d\u6392\u540d\u7b2c\u4e00\u7684\u6570\u5373\u4e3a\u6b64\u6570\u7684\u540e\u7ee7,\u4e0d\u80fd\u5206\u79bb\u6210>x\u7684\u6811,\u7406\u7531\u540c\u4e0a \n\t\t\troot=merge(l,r);//\u5408\u5e76 \n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\u4ee3\u7801\u4e5f\u5c31100\u591a\u884c\uff0c\u770b\u4e0d\u61c2\u7684\u5730\u65b9\u5c31\u8bf4\u5427\uff0c\u5176\u5b9e\u4e5f\u4e0d\u957f\uff0c\u51e0\u4e2a\u51fd\u6570\u4e5f\u5f88\u7b80\u5355\uff1b\n\n\n\n\u8fd8\u6709\u4e00\u79cd\u5c31\u662fvector\uff0c\u4ed6\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u51e0\u4e2a\u64cd\u4f5c\uff0c\u4f46\u8dd1\u7684\u662f\u771f\u7684\u6162\uff0c\u8003\u8bd5\u7684\u8bdd\u5f88\u5bb9\u6613\u88ab\u5361\uff0c\u4e0d\u5efa\u8bae\u5927\u5bb6\u4f7f\u7528\uff08\u8fd9\u9053\u9898\u8303\u56f4\u8f83\u5c0f\uff0c2w\u4ee5\u5185vector\u5c31\u53ef\u4ee5\u8fc7\uff08\u5e94\u8be5\u662f\u8fd9\u6837\uff09\uff09\uff1b\n\t\u732e\u51fa\u6211\u4e11\u964b\u7684\u4ee3\u7801\uff08\u8fd9\u4efd\u6211\u5c31\u4e0d\u4f5c\u51fa\u89e3\u91ca\u4e86\uff08\u53cd\u6b63\u4e5f\u4e0d\u662f\u6211\u4e3b\u8981\u8bb2\u7684\uff09\uff0c\u4e0d\u61c2\u5c31\u5728\u7f51\u4e0a\u641c\u4e00\u4e0bvector\u7684\u7528\u6cd5\u5427\uff09\n\n\u8fd8\u662f\u7ed9\u4f60\u4eec\u8bf4\u5427\n\n\u5934\u6587\u4ef6  #include<vector>\n  \n\u5411\u91cf\u7684\u5b9a\u4e49\uff1a\n  \nvector<int> vec\uff1b//\u5b9a\u4e49\u4e00\u4e2avec\u578b\u7684\u5411\u91cfa\n  \nvector<int> vec(5); //\u5b9a\u4e49\u4e00\u4e2a\u521d\u59cb\u5927\u5c0f\u4e3a5\u7684\u5411\u91cf\n  \nvector<int> vec(5,1); //\u521d\u59cb\u5927\u5c0f\u4e3a5\uff0c\u503c\u90fd\u4e3a1\u7684\u5411\u91cf\n  \n\u56e0\u4e3avector\u662f\u53ef\u4ee5\u6839\u636e\u63d2\u5165\u7684\u503c\u7684\u6570\u91cf\u81ea\u52a8\u589e\u957f\u7684\uff0c\u6240\u4ee5\u521d\u59cb\u5b9a\u4e49\u7684\u65f6\u5019\u53ea\u9700\u8981\u6309\u7167\u7b2c\u4e00\u79cd\u65b9\u6cd5\u5b9a\u4e49\u5c31\u53ef\u4ee5\u4e86(\u4e00\u7ef4)\u3002\n\u5f88\u591a\u65f6\u5019\u6211\u4eec\u9700\u8981\u5f00\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff1a\n  \nvector<vector<int>> vec(100);\n \nVector\u7684\u4e0b\u6807\u548c\u6570\u7ec4\u4e00\u6837\u4ece0\u5f00\u59cb\u7684\n  \nvec.size(); //\u8fd4\u56de\u5411\u91cf\u7684\u5b9e\u9645\u5927\u5c0f\n  \nvec.begin(); //\u8fd4\u56de\u5411\u91cf\u7684\u5f00\u59cb\u6307\u9488\u7684\u4f4d\u7f6e\n  \nvec.end(); //\u8fd4\u56de\u5411\u91cf\u7684\u7ed3\u675f\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n  \nvec.push_back(x); //\u5728\u5bf9\u8c61\u672b\u5c3e\u63d2\u5165\u6570\u636ex\n  \nvec.pop_back(); //\u5728\u5bf9\u8c61\u672b\u5c3e\u5220\u9664\u6570\u636e\n  \nvec.clear(); //\u6e05\u9664\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u6570\u636e\n  \nvec.at(i); //\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7b2ci\u4e2a\u6570\u7684\u503c(\u63a8\u8350)\n  \nvec[i]: //\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7b2ci\u4e2a\u6570\u7684\u503c(\u4e0d\u63a8\u8350)\nv![\u8fd9\u662f\u4ed6\u7684\u5b9e\u9645\u64cd\u4f5c](https://cdn.luogu.com.cn/upload/pic/52390.png)\n  \n\u5728\u7b2ci+1\u4e2a\u6570\u524d\u9762\u63d2\u5165\u4e00\u4e2a\u6570x\uff1a\n  \nvec.insert(vec.begin()+i,x);\n  \n\u5220\u9664\u7b2ci+1\u4e2a\u6570:\n  \nvec.erase(vec.begin()+i);\n  \n\u8fd9\u624d\u662fvector\u7684\u7cbe\u9ad3\u6240\u5728\uff0c\u4ee5\u4e0a\u5220\u9664\uff0c\u63d2\u5165\u64cd\u4f5c\u90fd\u662flogn\u7684\uff0c\u56e0\u4e3avector\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u4e0b\u6807\u4e3ai\u7684\u6570\u5b9e\u9645\u4e0a\u5c31\u662f\u7b2ci+1\u4e2a\u6570\n  \n\u4ee5\u4e0a\u4e24\u4e2a\u64cd\u4f5c\u518d\u96c6\u5408\u4e24\u4e2aSTL\u51fd\u6570\u53ef\u4ee51\u884c\u4ee3\u7801\u5b9e\u73b0\u4e00\u4e2a\u5e73\u8861\u6811\u7684\u5355\u70b9\u64cd\u4f5c\u3002\n  \n#include<algorithm>\n  \n\u8fd9\u4e2a\u5934\u6587\u4ef6\u4e2d\u6709\u5f88\u591a\u5f88\u5b9e\u7528\u7684\u5e93\u51fd\u6570\uff0c\u5176\u4e2d\u4e09\u4e2a\u5728noip\u8303\u56f4\u5185\u7ecf\u5e38\u88ab\u7528\u5230\n  \nlower_bound();\n  \nupper_bound();\n  \nunique();//\u5224\u91cd\n  \n\n\n1\u2026.lower_bound(a+1,a+n+1,x);\n  \n\u4e8c\u5206\u67e5\u627e\u6709\u5e8f\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u6570\u7684\u4f4d\u7f6e\n  \n\u4ec5\u9002\u7528\u4e8e\u975e\u964d\u5e8f\u7684\u6709\u5e8f\u8868\uff0c\u5982\u679c\u662f\u975e\u5347\u5e8f\u7684\u6709\u5e8f\u8868\uff0c\u5219\u9700\u8981\u91cd\u8f7d\uff1a\n  \nlower_bound(a+1,a+n+1,x,greater<int>());\n  \n\u8fd4\u56de\u6709\u5e8f\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u6570\u7684\u4f4d\u7f6e\uff0c\u4ec5\u9002\u7528\u4e8e\u975e\u5347\u5e8f\u7684\u6709\u5e8f\u8868\n  \n\n\u7ed9\u5927\u5bb6\u4e00\u4e2a\u4f8b\u5b50\n  \n\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6709\u5e8f\u4e0d\u4e0b\u964d\u5e8f\u5217\uff0c\u7ed9\u5b9am\u6b21\u67e5\u627e\uff0c\u5982\u679c\u67e5\u627e\u7684\u6570\u5728\u5e8f\u5217\u4e2d\uff0c\u8f93\u51fa\u5728\u5e8f\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5728\u5e8f\u5217\u4e2d\uff0c\u8f93\u51fa\u4ed6\u5728\u54ea\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4(\u4fdd\u8bc1\u67e5\u627e\u7684\u6570\u80af\u5b9a\u5728\u5e8f\u5217\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\uff09\n  \n\u4f2a\u4ee3\u7801 \uff1a\n  \nint t=lower_bound(a+1,a+n+1,x)-a;//\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u6570\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de\u503c\u662f\u5730\u5740 \nif(a[t]==x) //\u5982\u679c\u8fd9\u4e2a\u6570==x \n  \nprintf(\"%d\\n\",t);\n  \nelse //\u5426\u5219\u5c31\u5728\u4e24\u4e2a\u6570\u4e4b\u95f4 \n  \nprintf(\"%d %d\\n\",t-1,t);\n\n\n2\u2026upper_bound(a+1,a+n+1,x);\n  \n\u4e8c\u5206\u67e5\u627e\u6709\u5e8f\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8ex\u7684\u6570\u7684\u4f4d\u7f6e\n  \n\u4ec5\u9002\u7528\u4e8e\u975e\u964d\u5e8f\u7684\u6709\u5e8f\u8868\uff0c\u5982\u679c\u662f\u975e\u5347\u5e8f\u7684\u6709\u5e8f\u8868\uff0c\u5219\u9700\u8981\u91cd\u8f7d\uff1a\n  \nupper_bound(a+1,a+n+1,x,greater<int>());\n  \n\u8fd4\u56de\u6709\u5e8f\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5c0f\u4e8ex\u7684\u6570\u7684\u4f4d\u7f6e\uff0c\u4ec5\u9002\u7528\u4e8e\u975e\u5347\u5e8f\u7684\u6709\u5e8f\u8868\n  \n\n\u4f8b\u5b50\u5dee\u4e0d\u591a\uff08\u624b\u52a8\u6ed1\u7a3d\uff09\n  \n\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6709\u5e8f\u4e0d\u4e0b\u964d\u5e8f\u5217\uff0c\u7ed9\u5b9am\u6b21\u67e5\u627e\uff0c\u5982\u679c\u67e5\u627e\u7684\u6570\u5728\u5e8f\u5217\u4e2d\uff0c\u8f93\u51fa\u5728\u5e8f\u5217\u4e2d\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5728\u5e8f\u5217\u4e2d\uff0c\u8f93\u51fa\u4ed6\u5728\u54ea\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4(\u4fdd\u8bc1\u67e5\u627e\u7684\u6570\u80af\u5b9a\u5728\u5e8f\u5217\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\uff09\n  \n\u4f2a\u7801\u5b50:\n  \nint t=upper_bound(a+1,a+n+1,x)-a;//\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8ex\u7684\u6570\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de\u503c\u662f\u5730\u5740 \n  \nif(a[t-1]==x) //\u5982\u679c\u8fd9\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u6570==x \n  \nprintf(\"%d\\n\",t-1);\n  \nelse //\u5426\u5219\u5c31\u5728\u4e24\u4e2a\u6570\u4e4b\u95f4 \n  \nprintf(\"%d %d\\n\",t-1,t);\n\n\n3\u2026unique(a+1,a+n+1):\n  \nSTL\u7684\u53bb\u91cd\u51fd\u6570\uff0c\u4ed6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u624b\u52a8\u53bb\u91cd(\u5148\u6392\u5e8f\uff0c\u540e\u53bb\u91cd)\u4e00\u6837\uff0c\u90fd\u662fnlogn\uff0c\u4f46\u662f\u4ed6\u7684\u539f\u7406\u548c\u624b\u52a8\u53bb\u91cd\u4e0d\u4e00\u6837\uff0c\u4ed6\u662f\u628a\u91cd\u590d\u7684\u5143\u7d20\u653e\u5230\u5e8f\u5217\u7684\u672b\u5c3e\uff0c\u5e8f\u5217\u7684\u524dk\u4e2a\u6570\u90fd\u662f\u4e0d\u91cd\u590d\u7684\u6709\u6548\u5143\u7d20\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u65f6\u5019\u53ea\u9700\u8981\u8f93\u51fa\u6709\u6548\u957f\u5ea6\u5c31\u53ef\u4ee5\u4e86\u3002\n  \n\u5c31\u8fd9\u6837\u4f7f\u7528\n  \nint k=unique(a+1,a+n+1)-a;//\u5f97\u5230\u6709\u6548\u957f\u5ea6\n  \nfor(int i=1;i<=k;i++) //\u53ea\u8f93\u51fa\u6709\u6548\u957f\u5ea6\n                     \nprintf(\"%d \",a[i]);\n                     \n\u8bb2\u7684\u5dee\u4e0d\u591a\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u662fvector\u7684\u8868\u6f14\u65f6\u523b\u4e86\uff01\uff01\n\n ```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nconst int maxn=100050;\nvector<int> vec;\nint a,b,x,n;\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d\",&a,&x);\n        if(a==1)\n        {\n            vec.insert(lower_bound(vec.begin(),vec.end(),x),x); \n        }\n        if(a==2)\n        {\n            vec.erase(lower_bound(vec.begin(),vec.end(),x)); \n        }\n        if(a==3)\n        {\n            printf(\"%d\\n\",lower_bound(vec.begin(),vec.end(),x)-vec.begin()+1);\n        }\n        if(a==4)\n        {\n            printf(\"%d\\n\",vec.at(x-1));\n        }\n        if(a==5)\n        {\n            printf(\"%d\\n\",vec.at(lower_bound(vec.begin(),vec.end(),x)-vec.begin()-1));\n        }\n        if(a==6)\n        {\n            printf(\"%d\\n\",vec.at(upper_bound(vec.begin(),vec.end(),x)-vec.begin()));\n        }\n    }\n    return 0;\n}\n\n```\n \u597d\u50cfstl\u8bb2\u7684\u66f4\u591a\u4e86\uff1f\uff1f\u65e0\u6240\u8c13\n                         \n\u6240\u4ee5\uff0c\u8fd9\u9053\u9898\u5c31\u8bb2\u5b8c\u4e86\uff0c\u6ca1\u641e\u61c2\u7684\u8bc4\u8bba\u6216\u8005\u79c1\u4fe1\u53d1\u7ed9\u6211\u5427\uff0c\u6211\u53ef\u4ee5\u5e2e\u4f60\u89e3\u7b54\uff08\u8d81\u6211\u8fd8\u6ca1\u5fd8\uff08\u624b\u52a8\u6ed1\u7a3d\uff09\uff09\uff01\uff01\uff01\uff01\uff01\n\n                         \n                        ",
        "postTime": 1550738054,
        "uid": 111956,
        "name": "king_storm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u666e\u901a\u5e73\u8861\u6811\uff08treap\uff0cFHQ\uff0cSplay\uff09\n# \u2014Splay\u8be6\u89e3\n\n~~\u5404\u4f4d\u5927\u4f6c\u6253\u7684\u4ee3\u7801\u4e5f\u662f\u5404\u6709\u5404\u7684\u7279\u8272~~\uff0c\u8fd9\u91cc\u849f\u84bb\u732e\u4e0a\u4e00\u7bc7\u9898\u89e3\uff1b\n\n#### Splay\u5e73\u8861\u6811\u7684\u5b9e\u73b0\u4e3b\u8981\u7531\u4e24\u90e8\u5206\u6784\u6210\uff1asplay\u7684\u65cb\u8f6c+splay\u7684\u524d\u9a71\u540e\u9a71\u70b9\u67e5\u627e\n\n\n\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u5e73\u8861\u6811\u7684\u57fa\u672c\u6982\u5ff5\uff08\u5e73\u8861\u6811\u7684\u5b9a\u4e49\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff0c\u5de6\u513f\u5b50\u7684\u503c\u6bd4\u5b83\u5c0f\uff0c\u53f3\u513f\u5b50\u7684\u503c\u6bd4\u5b83\u5927 \uff09\n\n\u8fd8\u6709\u5c31\u662fSplay\u6709\u4e2a\u5f88\u66b4\u529b\u7684\u5730\u65b9\uff1a\u5c31\u662f\u65e0\u8bba\u4ec0\u4e48\u64cd\u4f5c\uff0c\u90fd\u4f1a\u5c06\u8be5\u70b9\u53d8\u4e3aroot\uff0c\u4ece\u800c\u65b9\u4fbf\u5176\u540e\u7684\u8be2\u95ee\uff1b\n- ### Splay\u65cb\u8f6c\n\n\n\n![](https://img-blog.csdn.net/20170825215240167?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA5NzQzNjk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nx\uff0cy\uff0cz\u5206\u522b\u4e3a\u4e09\u4e2a\u8282\u70b9\uff08\u4e5f\u5c31\u662f\u6211\u4eec\u9700\u8981\u4ea4\u6362\u7684\u8282\u70b9\uff09\uff0cA,B,C\u5219\u5206\u522b\u4e3a\u8be5\u6811\u7684\u5176\u4ed6\u8282\u70b9\uff1b\u5176\u4e2d\u6709\u4e09\u4e2a\u5173\u7cfb\uff1a\n\n###### 1.A<x<y;\n        \n######     2.x<B<y;\n            \n######     3.x<y<C;\n\n\u6211\u4eec\u9996\u5148\u8981\u5c06x\u53d8\u4e3ay\u7684\u7236\u4eb2\uff0c\u540c\u65f6y\u53d8\u4e3ax\u7684\u513f\u5b50\uff1b\u5728\u6b64\u671f\u95f4\u88ab\u5360\u6389\u7684\u4f4d\u7f6e\u66f4\u65b0\u6389\uff0c\u4e3a\u88ab\u5360\u6389\u7684\u4e0d\u4fbf\uff0c\u800c\u88ab\u5360\u6389\u7684\u4f4d\u7f6e\u7684\u539f\u8282\u70b9\u91cd\u65b0\u8fde\u63a5\u5728\u65b0\u7684\u56fe\u4e0a\uff08~~\u4ecd\u9075\u5faa\u5e73\u8861\u6811\u7684\u89c4\u5219\u8fdb\u884c\u66f4\u65b0~~\uff09\n\n### \u66f4\u65b0\u540e\u5c31\u53d8\u6210\u4e86\uff1a---->\n![](https://img-blog.csdn.net/20170825215730979?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA5NzQzNjk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### \u4e4b\u540e\u6309\u76f8\u540c\u7684\u65b9\u5f0f\u53d8\u6362x\u4e0ez\u7684\u4f4d\u7f6e\uff1a---->\n![](https://img-blog.csdn.net/20170826173119938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA5NzQzNjk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n###### \u5230\u8fd9\u6211\u4eec\u5c31\u5df2\u7ecf\u4e86\u89e3\u4e86Splay\u7684\u5927\u6982\u65cb\u8f6c\u65b9\u5f0f\uff1b\n\u4f46\u8fd9\u53ea\u662f\u5176\u4e2d\u7684\u4e00\u79cd\u60c5\u51b5\uff0c\u51e0x\u76f8\u5bf9\u4e8ey\u548cy\u76f8\u5bf9\u4e8ez\u90fd\u662f\u5de6\u513f\u5b50\uff0c\u6709\u513f\u5b50\u65f6\u4e5f\u76f8\u540c\uff1b\n\u4f46\u5982\u679c\u4e0d\u76f8\u540c\u5462\uff1f\uff1f\uff1f\uff08~~\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u753b\u753b\u56fe~~\uff09\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\n\n##### \u60c5\u51b51\uff1a\uff08\u76f8\u540c\uff09\u5148\u4ea4\u6362x\u5728\u4ea4\u6362x\uff1b\n##### \u60c5\u51b52\uff1a\uff08\u4e0d\u76f8\u540c\uff09\u5148\u4ea4\u6362y\u518d\u4ea4\u6362x\uff1b\n### \u4e8e\u662f\u5c31\u6709\u4e86\u4ee3\u7801\uff1a\n```cpp\nvoid splay(int x,int goal)//\u5373\u5c06x\u8f6c\u81f3goal\u7684\u513f\u5b50\uff1b\n{\n\twhile(tree[x].fa!=goal)\n\t{\n\t\tint y=tree[x].fa;\n\t\tint z=tree[y].fa;\n\t\tif(z!=goal)//\u6309\u524d\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u8f6c\uff1b\n\t\t{\n\t\t\t(tree[z].ch[0]==y)^(tree[y].ch[0]==x)?rotate(x):rotate(y);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(goal==0)root=x;//\u66f4\u65b0\u6839\uff1b\n}\n```\n\n\n------------\n## \u4ea4\u6362\u51fd\u6570\uff1a\n\u5c31\u662f\u628a\u8be5\u53d8\u513f\u5b50\u7684\u53d8\u513f\u5b50\uff0c\u8be5\u53d8\u7238\u7238\u7684\u53d8\u7238\u7238\uff1b\n\n### \u4e3b\u8981\u8bb2\u89e3\u4e00\u4e0bki\u7684\u4f5c\u7528\uff1a\u5c31\u662f\u8bb0\u5f55x\u662fy\u7684\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\uff1b\u800cki^2\u5c31\u662f\u4e0e\u5176\u76f8\u53cd\uff1b\n\u5176\u4f59\u7684\u7684\u6253\u4ee3\u7801\u65f6\u5c31\u53ef\u4ee5\u753b\u753b\u4e0a\u9762\u7684\u56fe\u627e\u627e\u89c4\u5f8b\n\n```\nvoid rotate(int x)\n{\n\tint y=tree[x].fa;\n\tint z=tree[y].fa;\n\tint ki=tree[y].ch[1]==x;\n\ttree[z].ch[tree[z].ch[1]==y]=x;\n\ttree[x].fa=z;\n\ttree[y].ch[ki]=tree[x].ch[ki^1];\n\ttree[tree[x].ch[ki^1]].fa=y;\n\ttree[x].ch[ki^1]=y;\n\ttree[y].fa=x;\n\tupdata(y);updata(x);\n}\n```\n\n\n------------\n\n## \u63d2\u5165\u5220\u9664\u51fd\u6570\uff1a\n\u5e94\u4e3a\u5e73\u8861\u6811\u95f4\u8282\u70b9\u95f4\u5b58\u5728\u5dee\u503c\u5173\u7cfb\uff0c\u5c31\u4e0d\u53ef\u80fd\u6709\u4e24\u4e2a\u8282\u70b9\u76f8\u7b49\uff0c\u5219\u91cd\u590d\u60c5\u51b5\u7528cnt\u5b9e\u73b0\uff1b\n\n\u63d2\u5165\uff1a\u627e\u5230\u8be5\u70b9\uff0c\u82e5\u6709\uff0ccnt++\uff1b\u6ca1\u6709\uff0c\u65b0\u5efa\uff1b\n\n\u5220\u9664\uff1a\u82e5\u5927\u4e8e1\uff0c\u5220\u4e2a\u6570\uff1b\u5426\u5219\uff0c\u6e05\u7a7a\u8be5\u8282\u70b9\uff1b\n```\nvoid make_in(int x)\n{\n\tint now=root,fa=0;\n\twhile(now&&tree[now].val!=x)\n\t{\n\t\tfa=now;\n\t\tnow=tree[now].ch[x>tree[now].val];//\u82e5x>\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u5411\u53f3\u627e\uff1b\u5426\u5219\uff0c\u5411\u5de6\u627e\uff1b \n\t}\n\tif(now)/*\u5b58\u5728\u8be5\u70b9*/{tree[now].cnt++;}\n\telse//\u4e0d\u5b58\u5728\uff1b\n\t{\n\t\tnow=++k;\n\t\tif(fa)tree[fa].ch[x>tree[fa].val]=now;//\u6709\u7236\u4eb2\uff0c\u5c06\u5176\u513f\u5b50\u8d4b\u503c\uff1b \n\t\ttree[k].fa=fa;\n\t\ttree[k].val=x;\n\t\ttree[k].size=tree[k].cnt=1;\n\t}\n\tsplay(now,0);\n}\n\nvoid del(int x)\n{\n\tint p_fa=pre(x);\n\tint n_fa=net(x);\n\tsplay(p_fa,0); \n\tsplay(n_fa,p_fa);//\u4f7f\u6bd4x\u5c0f\u7684\u6570\u4e3a\u6839\u8282\u70b9\u53ca\u5de6\u6811\uff0c\u6bd4\u4ed6\u5927\u7684\u5728\u53f3\u6811\uff1b \n\tint tmp=tree[n_fa].ch[0];\n\tif(tree[tmp].cnt>1)//\u6709\u591a\u4e2a\u60c5\u51b5\uff1b \n\t{\n\t\ttree[tmp].cnt--;\n\t\tsplay(tmp,0);\n\t}\n\telse tree[n_fa].ch[0]=0;//\u53ea\u6709\u4e00\u4e2a\uff1b \n}\n```\n\n\n------------\n### \u67e5\u627e\u51fd\u6570\uff1a\uff08~~\u8fd8\u662f\u6bd4\u8f83\u597d\u7406\u89e3~~\uff09\n#### \u6bd4\u5982\u67e5\u627e\u7b2ck\u4e2a\u6570\uff0c\u5219\u5148\u627e\u6bd4\u5176\u5c0f\u7684\uff0c\u5373\u5728\u5de6\u513f\u5b50\u5185\uff0c\u82e5size\u5927\u4e8ek\uff0c\u5219\u8fdb\u5165\u5de6\u513f\u5b50\u5bfb\u627e\uff1b\u5426\u5219\uff0c\u8fdb\u5165\u53f3\u513f\u5b50\uff0c\u627e\u6392\u540d\u4e3a\uff08k-size\uff09\u7684\uff1b\n\n\u63a5\u7740\uff0c\u5c31\u662f\u524d\u9a71\u540e\u7ee7\u7684\u51fd\u6570\uff1a\n\n#### \u524d\u9a71\uff1a\u5373\u6bd4\u5176\u5c0f\u800c\u6700\u5927\uff0c\u5219\u5230\u5de6\u5b50\u6811\u4e2d\u627e\u6700\u5927\u6570\uff08\u5373\u5de6\u5b50\u6811\u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u4e2d\u6709\u53f3\u513f\u5b50\u7684\uff0c\u5373\u4e3a\u5176\u524d\u9a71\uff0cbreak\uff09\uff1b\n\n#### \u540e\u7ee7\uff1a\u5373\u6bd4\u5176\u5927\u800c\u6700\u5c0f\uff0c\u5219\u5230\u53f3\u5b50\u6811\u4e2d\u627e\u6700\u5c0f\u6570\uff08\u5373\u53f3\u5b50\u6811\u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u4e2d\u6709\u5de6\u513f\u5b50\u7684\uff0c\u5373\u4e3a\u5176\u540e\u7ee7\uff0cbreak\uff09\n```\n\nint pre(int x)//\u627e\u524d\u9a71\n{\n\tsearch(x);\n\tint now=tree[root].ch[0];\n\twhile(tree[now].ch[1])\n\t{\n\t\tnow=tree[now].ch[1];\n\t}\n\treturn now;\n}\n\nint net(int x)//\u627e\u540e\u7ee7\n{\n\tsearch(x);\n\tint now=tree[root].ch[1];\n\twhile(tree[now].ch[0])\n\t{\n\t\tnow=tree[now].ch[0];\n\t}\n\treturn now;\n}\n\nint find(int x)//\u627e\u8282\u70b9\n{\n\tint now=root;\n\twhile(1)\n\t{\n\t\tif(x<=tree[tree[now].ch[0]].size)\n\t\t{\n\t\t\tnow=tree[now].ch[0];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx-=(tree[tree[now].ch[0]].size+tree[now].cnt);\n\t\t\tif(x<=0)return now;\n\t\t\telse now=tree[now].ch[1];\n\t\t}\n\t}\n}\n\n```\n\n\n------------\n\u6700\u540e\uff0c\n## \u9644\u4e0aAC\u2014Code\n```\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,k=0,root;\nconst int maxn=100000+10;\nconst int inf=0x7f7f7f7f;\nstruct node{\n\tint ch[2],fa,val,cnt,size;\n}tree[maxn];\n\nvoid updata(int x)\n{\n\ttree[x].size=tree[tree[x].ch[0]].size+tree[tree[x].ch[1]].size+tree[x].cnt;\n}\n\nvoid rotate(int x)\n{\n\tint y=tree[x].fa;\n\tint z=tree[y].fa;\n\tint ki=tree[y].ch[1]==x;\n\ttree[z].ch[tree[z].ch[1]==y]=x;\n\ttree[x].fa=z;\n\ttree[y].ch[ki]=tree[x].ch[ki^1];\n\ttree[tree[x].ch[ki^1]].fa=y;\n\ttree[x].ch[ki^1]=y;\n\ttree[y].fa=x;\n\tupdata(y);updata(x);\n}\n\nvoid splay(int x,int goal)\n{\n\twhile(tree[x].fa!=goal)\n\t{\n\t\tint y=tree[x].fa;\n\t\tint z=tree[y].fa;\n\t\tif(z!=goal)\n\t\t{\n\t\t\t(tree[z].ch[0]==y)^(tree[y].ch[0]==x)?rotate(x):rotate(y);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(goal==0)root=x;\n}\n\nvoid make_in(int x)\n{\n\tint now=root,fa=0;\n\twhile(now&&tree[now].val!=x)\n\t{\n\t\tfa=now;\n\t\tnow=tree[now].ch[x>tree[now].val];//\u82e5x>\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u5411\u53f3\u627e\uff1b\u5426\u5219\uff0c\u5411\u5de6\u627e\uff1b \n\t}\n\tif(now)/*\u5b58\u5728\u8be5\u70b9*/{tree[now].cnt++;}\n\telse//\u4e0d\u5b58\u5728\uff1b\n\t{\n\t\tnow=++k;\n\t\tif(fa)tree[fa].ch[x>tree[fa].val]=now;//\u6709\u7236\u4eb2\uff0c\u5c06\u5176\u513f\u5b50\u8d4b\u503c\uff1b \n\t\ttree[k].fa=fa;\n\t\ttree[k].val=x;\n\t\ttree[k].size=tree[k].cnt=1;\n\t}\n\tsplay(now,0);\n}\n\nvoid search(int x)\n{\n\tint now=root;\n\tif(!now)return ;\n\twhile(tree[now].ch[x>tree[now].val]&&x!=tree[now].val)\n\t{\n\t\tnow=tree[now].ch[x>tree[now].val];\n\t}//\u627e\u5230\u4e86\uff1b \n\tsplay(now,0);//\u65cb\u8f6c\u4e3a\u6839\u8282\u70b9\uff1b \n}\n\nint pre(int x)\n{\n\tsearch(x);\n\tint now=tree[root].ch[0];\n\twhile(tree[now].ch[1])\n\t{\n\t\tnow=tree[now].ch[1];\n\t}\n\treturn now;\n}\n\nint net(int x)\n{\n\tsearch(x);\n\tint now=tree[root].ch[1];\n\twhile(tree[now].ch[0])\n\t{\n\t\tnow=tree[now].ch[0];\n\t}\n\treturn now;\n}\n\nint find(int x)\n{\n\tint now=root;\n\twhile(1)\n\t{\n\t\tif(x<=tree[tree[now].ch[0]].size)\n\t\t{\n\t\t\tnow=tree[now].ch[0];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx-=(tree[tree[now].ch[0]].size+tree[now].cnt);\n\t\t\tif(x<=0)return now;\n\t\t\telse now=tree[now].ch[1];\n\t\t}\n\t}\n}\n\nvoid del(int x)\n{\n\tint p_fa=pre(x);\n\tint n_fa=net(x);\n\tsplay(p_fa,0); \n\tsplay(n_fa,p_fa);//\u4f7f\u6bd4x\u5c0f\u7684\u6570\u4e3a\u6839\u8282\u70b9\u53ca\u5de6\u6811\uff0c\u6bd4\u4ed6\u5927\u7684\u5728\u53f3\u6811\uff1b \n\tint tmp=tree[n_fa].ch[0];\n\tif(tree[tmp].cnt>1)//\u6709\u591a\u4e2a\u60c5\u51b5\uff1b \n\t{\n\t\ttree[tmp].cnt--;\n\t\tsplay(tmp,0);\n\t}\n\telse tree[n_fa].ch[0]=0;//\u53ea\u6709\u4e00\u4e2a\uff1b \n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tint opt,x;\n\tmake_in(inf);make_in(-inf);//\u4fdd\u8bc1\u5b58\u5728\u524d\u9a71\u540e\u7ee7\uff1b \n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d%d\",&opt,&x);\n\t\tif(opt==1)make_in(x);\n\t\telse if(opt==2)del(x);\n\t\telse if(opt==3)\n\t\t{\n\t\t\tsearch(x);//\u627e\u5230x\u65cb\u8f6c\u4e3a\u6839\uff1b \n\t\t\tprintf(\"%d\\n\",tree[tree[root].ch[0]].size);\n\t\t}\n\t\telse if(opt==4)\n\t\t{\n\t\t\tprintf(\"%d\\n\",tree[find(x+1)].val);\n\t\t}\n\t\telse if(opt==5)\n\t\t{\n\t\t\tmake_in(x);\n\t\t\tprintf(\"%d\\n\",tree[pre(x)].val);\n\t\t\tdel(x);\n\t\t}\n\t\telse if(opt==6)\n\t\t{\n\t\t\tmake_in(x);\n\t\t\tprintf(\"%d\\n\",tree[net(x)].val);\n\t\t\tdel(x);\n\t\t}\n\t}\n\treturn 0;\n    \n    \n    //                                \u8c22\u8c22\u9605\u8bfb\uff0cfrom\uff1a   Tel\u517c_dope \n}\n```\n",
        "postTime": 1551445306,
        "uid": 111987,
        "name": "Tel\u517c_dope",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1$leafytree$\u9898\u89e3\u3002(\u4eca\u5e74\u8bba\u6587\u65b0\u51fa\u7684\u795e\u79d8\u6570\u636e\u7ed3\u6784)\n\n\u5f53\u4f60\u5199\u4e8c\u53c9\u5e73\u8861\u6811\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u6570\u4e0d\u540c\u5bfc\u81f4\u8ba8\u8bba\u5197\u6742\uff0c\u5bb9\u6613\u51fa\u9519\u3002\u5e76\u4e14\u5e38\u7528\u7684\u51e0\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\uff0c$treap$\u9002\u7528\u8303\u56f4\u8f83\u5c0f\uff0c$splay$\u5e38\u6570\u5de8\u5927\u4e14\u4e0d\u652f\u6301\u53ef\u6301\u4e45\u5316\uff0c\u66ff\u7f6a\u7f8a\u6811\u7b49\u5176\u4f59\u6570\u636e\u7ed3\u6784\u4ee3\u7801\u91cf\u5927\u6216\u590d\u6742\uff0c\u7ec6\u8282\u591a\uff0c\u4e0d\u6613\u5b9e\u73b0\u3002\u90a3\u4e48\uff0c\u6709\u6ca1\u6709\u4e00\u79cd\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\uff0c\u80fd\u591f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462?\n\n~~\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u95ee\u95ee\u795e\u5947\u6d77\u87ba\u5462?~~\n\n\u7b54\u6848\u5c31\u662f$leafytree$\u3002\n\n$leafytree$\u662f\u4e00\u79cd\u5947\u5999\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u7531\u53f6\u5b50\u8282\u70b9\u548c\u8f85\u52a9\u8282\u70b9\u7ec4\u6210\u3002\u5176\u4e3b\u8981\u4fe1\u606f\u5b58\u50a8\u5728\u53f6\u5b50\u8282\u70b9\u4e0a\uff0c\u8f85\u52a9\u8282\u70b9\u53ef\u4ee5\u7406\u89e3\u4e3a\u7ebf\u6bb5\u6811\u7684\u975e\u6700\u540e\u4e00\u5c42\u8282\u70b9\u3002\u8fd9\u4e5f\u662f\u5b83\u540d\u79f0\u7684\u7531\u6765\u3002\u6bcf\u4e2a\u8f85\u52a9\u8282\u70b9\u90fd\u6709$2$\u4e2a\u513f\u5b50\u8282\u70b9\uff0c\u7528\u6765\u8fde\u63a5\u6574\u68f5\u6811\u3002\u8fd9\u6837\u5b58\u50a8\u53ef\u4ee5\u8f7b\u6613\u7b97\u51fa\u8f85\u52a9\u8282\u70b9\u5171\u6709$n-1$\u4e2a($n$\u662f\u53f6\u5b50\u8282\u70b9\u603b\u6570)\u3002\u56e0\u6b64\uff0c\u5b83\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a$2n$\u3002\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\u7a7a\u95f4\u95ee\u9898\u3002~~\u7136\u800c1e5\u7684\u6570\u636e\u53ea\u8981\u75289M\u6839\u672c\u4e0d\u65b9~~\n\n#### 1.\u63d2\u5165\u548c\u7ef4\u62a4\u5e73\u8861\n\n$leafytree$\u548c\u5176\u5b83\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4e00\u6837\uff0c\u9700\u8981\u4fdd\u8bc1\u5de6\u8fb9\u7684\u8282\u70b9\u6743\u503c\u5927\u4e8e\u53f3\u8fb9\u7684\u8282\u70b9\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u9012\u5f52\u7684\u65b9\u6cd5\u6765\u63d2\u5165\u8282\u70b9\u3002\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5176\u4e0b\u8f96\u5b58\u50a8\u533a\u95f4\u5185\u7684\u6700\u5927\u503c(\u5373\u53f3\u7aef\u70b9)\u3002\u6bcf\u6b21\u63d2\u5165\u65f6\uff0c\u5c06\u5de6\u5b50\u6811\u7684\u6700\u5927\u70b9\u548c\u63d2\u5165\u8282\u70b9\u7684\u6743\u503c\u4f5c\u6bd4\u8f83\u3002\u9009\u62e9\u8282\u70b9\u6240\u5c5e\u8303\u56f4\u7684\u4e00\u8fb9\u5373\u53ef\u3002\u63d2\u5165\u7684\u65f6\u5019\u52a0\u5165\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u540c\u65f6\u4e5f\u4f1a\u52a0\u5165\u4e00\u4e2a\u8f85\u52a9\u8282\u70b9\u3002\n\n\u7136\u800c\u6781\u6613\u53d1\u73b0\uff0c\u8fd9\u79cd\u63d2\u5165\u65b9\u6cd5\u53ef\u4ee5\u88ab\u8f7b\u677e\u5361\u6210\u4e00\u6761\u94fe\u3002\u8fd9\u6837\u660e\u663e\u662f\u4e0d\u884c\u7684\u3002\u56e0\u6b64\u8003\u8651\u4f7f\u7528\u4e00\u4e9b\u65b9\u6cd5\u6765\u7ef4\u62a4\u5e73\u8861\u3002\u53ef\u4ee5\u518d\u6b21\u5f15\u5165\u66ff\u7f6a\u7f8a\u6811\u4e2d\u7684\u5e73\u8861\u56e0\u5b50\u601d\u60f3\uff0c\u5982\u679c\u5931\u8861\u5230\u67d0\u4e00\u4e2a\u5b50\u6811\u7684$size$\u6bd4\u5168\u6811\u7684$size$\u4e58\u4e0a\u5e73\u8861\u56e0\u5b50\u8fd8\u8981\u5c0f\uff0c\u5219\u8ba4\u4e3a\u5176\u5df2\u7ecf\u5931\u8861\uff0c\u9700\u8981\u7ef4\u62a4\u3002\n\n\u7ef4\u62a4\u5931\u8861\u7684\u65b9\u6cd5\u53ef\u4ee5\u9009\u62e9\u62cd\u6241\u91cd\u5efa\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9$rotate$\u3002\u56e0\u4e3a\u62cd\u6241\u91cd\u5efa\u548c\u66ff\u7f6a\u7f8a\u6811\u57fa\u672c\u4e00\u6837\uff0c\u6240\u4ee5\u5728\u6b64\u4e0d\u518d\u4ecb\u7ecd\u3002\n\n\u8003\u8651\u7528$rotate$\u6765\u7ef4\u62a4\u5e73\u8861\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9\u7684\u5e73\u8861\u5ea6\u4e3a$\\displaystyle\\frac{size[l]}{size[x]}$(\u5047\u8bbe\u6b64\u65f6\u5de6\u5b50\u6811\u6bd4\u53f3\u5b50\u6811\u5c0f)\u3002\u8003\u8651\u5355\u65cb\u548c\u53cc\u65cb\u5bf9\u5e73\u8861\u5ea6\u7684\u5f71\u54cd\u3002\n\n\u4f8b\u5982\u5355\u65cb:(\u5982\u4e0b\u56fe\uff0c\u8bbe$size[Y]>size[a]$)\n\n![\u6b64\u5904\u5e94\u6709\u56fe\u7247](https://cdn.luogu.com.cn/upload/pic/20330.png)\n\n![\u6b64\u5904\u4e5f\u5e94\u6709\u56fe\u7247](https://cdn.luogu.com.cn/upload/pic/20331.png)\n\n\u8bbe$X$\u65cb\u8f6c\u524d\u7684\u5e73\u8861\u5ea6\u4e3a$\\rho_1$,$Y$\u65cb\u8f6c\u524d\u7684\u5e73\u8861\u5ea6\u4e3a$\\rho_2$\uff0c\u65cb\u8f6c\u540e\u5206\u522b\u4e3a$\\gamma_1$\u548c$\\gamma_2$\u3002\n\n\u901a\u8fc7\u7b80\u5355\u8ba1\u7b97\u53ef\u4ee5\u77e5\u9053:\n\n$\\gamma_1=\\displaystyle\\frac{\\rho_1}{\\rho_1+(1-\\rho_1)\\rho_2}$\n\n$\\gamma_2=\\rho_1+(1-\\rho_1)\\rho_2$\n\n\u540c\u7406\uff0c\u5bf9\u4e8e\u53cc\u65cb\uff0c\u6709:(\u56fe\u89c1\u4e0b\u65b9)\n\n$\\gamma_1=\\displaystyle\\frac{\\rho_1}{\\rho_1+(1-\\rho_1)\\rho_2\\rho_3}$\n\n$\\gamma_2=\\displaystyle\\rho_1+(1-\\rho_1)\\rho_2\\rho_3$\n\n$\\gamma_3=\\displaystyle\\frac{\\rho_2(1-\\rho_3)}{1-\\rho_2\\rho_3}$\n\n![\u6b64\u5904\u4ecd\u7136\u662f\u56fe\u7247](https://cdn.luogu.com.cn/upload/pic/20333.png)\n\n![\u6b64\u5904\u662f\u53e6\u4e00\u5e45\u56fe\u7247](https://cdn.luogu.com.cn/upload/pic/20334.png)\n\n\u6b64\u65f6\u8003\u8651\u5bf9\u4e8e\u5e73\u8861\u56e0\u5b50$\\alpha$\u7684\u9009\u53d6\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5f53$\\displaystyle\\alpha<1-\\frac{\\sqrt2}{2}$\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e24\u79cd\u64cd\u4f5c\u6765\u4f7f\u65b0\u7684\u8282\u70b9\u5e73\u8861\u5ea6\u5904\u4e8e$[\\alpha,1-\\alpha]$\u4e4b\u5185\u3002\u5f53\u7136\u6b64\u65f6\u9009\u62e9$\\displaystyle\\alpha=1-\\frac{\\sqrt2}{2}$\u6700\u5408\u9002\u3002\n\n\u81f3\u4e8e\u7ef4\u62a4\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u5f53\u53d1\u73b0\u6811\u5931\u8861\u65f6\uff0c\u6839\u636e\u8f83\u5c0f\u6811\u7684\u5e73\u8861\u5ea6$\\rho$\u8fdb\u884c\u8ba8\u8bba\u3002\u5982\u679c$\\displaystyle\\rho<\\frac{1-2\\alpha}{1-\\alpha}$\u65f6\uff0c\u8fdb\u884c\u4e00\u6b21\u5355\u65cb\u3002\u5426\u5219\u8fdb\u884c\u4e00\u6b21\u53cc\u65cb\u3002\n\n\n\n\u6211\u7684\u4ee3\u7801\u4e2d\u6709\u4e00\u4e2a$newnode$\u51fd\u6570\u548c\u4e00\u4e2a$delet$\u51fd\u6570\uff0c\u662f\u7528\u6765\u56de\u6536\u8282\u70b9\u7684\uff0c\u53ef\u4ee5\u4e0d\u5199\u3002\n\n\n\n\u4ee3\u7801:\n\n```cpp\ninline bool isr(int x){return x==son[fa[x]][1];}\n\ninline void\trotate(int x)//\u7b80\u5355\u5e73\u8861\u6811\u7684\u65cb\u8f6c\u64cd\u4f5c(\u4e00\u6a21\u4e00\u6837)\n{\n\tstatic int f,ff,k;f=fa[x];ff=fa[f];k=isr(x);\n\tson[fa[son[x][k^1]]=f][k]=son[x][k^1];\n\tson[fa[x]=ff][isr(f)]=x;\n\tson[fa[f]=x][k^1]=f;\n\trefresh(f);refresh(x);\n\tif(f==rt)rt=x;\n}\n\nconst double alp=1-sqrt(2)/2,lim=(1-2*alp)/(1-alp);\n\ninline void maintain(int x)//\u4fdd\u6301\u5e73\u8861\n{\n\tstatic int dir;\n\tif(son[x][0])//\u975e\u53f6\u5b50\u8282\u70b9\u624d\u9700\u8981\u7ef4\u62a4\u5e73\u8861\n\t{\n\t\tif(sz[son[x][0]]<sz[x]*alp)dir=1;//\u627e\u5230\u8f83\u5c0f\u7684\u4e00\u4e2a\u5b50\u6811\n\t\telse if(sz[son[x][1]]<sz[x]*alp)dir=0;\n\t\telse return;//\u6ca1\u6709\u5931\u8861\u5219\u8df3\u51fa\n\t\tif(sz[son[son[x][dir]][dir^1]]>=sz[son[x][dir]]*lim)//\u5206\u60c5\u51b5\u5206\u7c7b\u8ba8\u8bba\n\t\t\trotate(son[son[x][dir]][dir^1]);\n\t\trotate(son[x][dir]);\n\t}\n}\n\nvoid insert(int now,int x)\n{\n\tif(!rt){rt=newnode(x);return;}//\u7279\u5224\u6839\u8282\u70b9\n\tif(sz[now]==1)//\u627e\u5230\u53f6\u5b50\u7ed3\u70b9\n\t{\n\t\tfa[son[now][0]=newnode(x)]=now;//\u5f00\u542f\u65b0\u8282\u70b9\uff0c\u5f53\u524d\u53f6\u5b50\u7ed3\u70b9\u4e0b\u653e\n\t\tfa[son[now][1]=newnode(ma[now])]=now;\n\t\tif(x>ma[now])swap(son[now][0],son[now][1]);\n\t}\n\telse insert(son[now][x>ma[son[now][0]]],x);//\u5411\u4e0b\u9012\u5f52\n\trefresh(now);//\u7ef4\u62a4\n\tmaintain(now);\n}\n```\n\n####2.\u5220\u9664\n\n\u53d1\u73b0\u56e0\u4e3a\u8282\u70b9\u53ea\u4f1a\u5220\u53bb\u53f6\u5b50\u7ed3\u70b9\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c06\u7ed3\u70b9\u76f4\u63a5\u5220\u53bb\uff0c\u5176\u7236\u4eb2\u53f6\u5b50\u7ed3\u70b9\u7531\u53e6\u4e00\u68f5\u5b50\u6811\u4ee3\u66ff\uff0c\u4e5f\u88ab\u5220\u9664\u3002\n\n\n\n\u4ee3\u7801:\n\n```cpp\nvoid del(int now,int x)\n{\n\tint dir=x>ma[son[now][0]],t;\n\tif(sz[son[now][dir]]==1)//\u627e\u5230\u53f6\u5b50\u7ed3\u70b9\n\t{\n\t\tdelet(son[now][dir]);//\u76f4\u63a5\u5220\u6389\n\t\tfa[t=son[now][dir^1]]=fa[now];//\u7528\u53e6\u4e00\u68f5\u5b50\u6811\u66ff\u4ee3\u8f85\u52a9\u8282\u70b9\u5e76\u5220\u9664\n\t\tson[fa[now]][isr(now)]=t;\n\t\tdelet(now);\n\t\tif(now==rt)rt=t;//\u7279\u5224\u6839\u7684\u60c5\u51b5\n\t\tnow=t;\n\t}\n\telse del(son[now][dir],x);//\u5411\u4e0b\u9012\u5f52\n\trefresh(now);//\u7ef4\u62a4\n\tmaintain(now);\n}\n```\n\n####3.\u6c42\u7ed3\u70b9rank\n\n\u8fd9\u4e2a\u548c\u666e\u901a\u5e73\u8861\u6811\u57fa\u672c\u4e00\u6837\u3002\u4f46\u662f\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684$size$\u5b9e\u9645\u4e0a\u53ea\u662f\u53f6\u5b50\u7ed3\u70b9\u6570\u91cf\uff0c\u6240\u4ee5\u5206\u7c7b\u8ba8\u8bba\u7684\u7ec6\u8282\u5927\u5927\u51cf\u5c11\u3002\n\n\n\n\u4ee3\u7801:\n\n```cpp\nint find_by_order(int now,int x)\n{\n\tif(sz[now]==1)return now;//\u627e\u5230\u53f6\u5b50\u7ed3\u70b9\u5373\u8fd4\u56de\n\tif(sz[son[now][0]]>=x)return find_by_order(son[now][0],x);//\u9012\u5f52\u67e5\u627e\n\telse return find_by_order(son[now][1],x-sz[son[now][0]]);\n}\n```\n\n####4.\u627e\u5230\u7b2ck\u5927\u5143\u7d20\n\n\u548c\u666e\u901a\u5e73\u8861\u6811\u5dee\u4e0d\u591a\u3002\u540c\u6837\u4e5f\u5c11\u4e86\u5f88\u591a\u7ec6\u8282\u3002\n\n\n\n\u4ee3\u7801:\n\n```cpp\nint order_of_key(int now,int x)\n{\n\tif(x<=mi[now])return 0;//\u6570\u5b57\u4e0d\u5728\u8303\u56f4\u5185\u5219\u8fd4\u56de0\n\tif(sz[now]==1)return 1;//\u627e\u5230\u53f6\u5b50\u8fd4\u56de1\n\tif(ma[son[now][0]]>=x)return order_of_key(son[now][0],x);//\u9012\u5f52\u6c42\u89e3\n\telse return sz[son[now][0]]+order_of_key(son[now][1],x);\n}\n```\n\n#### 5.\u67e5\u627e\u524d\u9a71/\u540e\u7ee7\n\n\u76f4\u63a5\u6309\u7167\u5b9a\u4e49\u6765\u67e5\u627e\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\n\u4ee3\u7801:\n\n```cpp\nint pre(int now,int x)\n{\n\tif(sz[now]==1)return now;\n\tif(mi[son[now][1]]>=x)return pre(son[now][0],x);\n\telse return pre(son[now][1],x);\n}\n\nint suf(int now,int x)\n{\n\tif(sz[now]==1)return now;\n\tif(ma[son[now][0]]>x)return suf(son[now][0],x);\n\telse return suf(son[now][1],x);\n}\n```\n\n\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u672c\u7a0b\u5e8f\u901f\u5ea6\u4f18\u79c0\u3002\u5728\u81ea\u5e26\u5927\u5e38\u6570\u60c5\u51b5\u4e0b\uff0c\u5728\u6211\u81ea\u5df1\u6253\u7684\u51e0\u79cd\u4e0d\u540c\u5e73\u8861\u6811\u4e2d\uff0c\u4ec5\u6b21\u4e8e$01trie$(\u5982\u679c\u8fd9\u4e5f\u7b97\u7684\u8bdd)\u3002\n\n\n\n\u6574\u4f53\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#define Rep(i,a,b) for(register int i=(a),i##end=(b);i<=i##end;++i)\n#define Repe(i,a,b) for(register int i=(a),i##end=(b);i>=i##end;--i)\n#define For(i,a,b) for(i=(a),i<=(b);++i)\n#define Forward(i,a,b) for(i=(a),i>=(b);--i)\n#define Chkmin(a,b) a=a<b?a:b\n#define Chkmax(a,b) a=a>b?a:b\n#define pb push_back\n\ninline void read(int &x)\n{\n    static const int BUFSIZE = 1048576;\n    static char buf[BUFSIZE];\n    static char *bufnow = buf;\n    static char *bufmax = buf;\n    if (bufnow == bufmax) {\n        bufmax = buf + fread(buf, 1, BUFSIZE, stdin);\n        bufnow = buf;\n    }\n    static int c,f;\n    f=1;\n    c = *bufnow++;\n    for (;!isdigit(c)&&(c^'-');c = *bufnow++) {\n            if (bufnow == bufmax) {\n            bufmax = buf + fread(buf, 1, BUFSIZE, stdin);\n            bufnow = buf;\n        }\n    }\n    if(!isdigit(c)){f=-1;c=*bufnow++;}\n    x = 0;\n    for (;isdigit(c);c = *bufnow++) {\n        x = (x << 1) + (x << 3) + c - 48;\n        if (bufnow == bufmax) {\n            bufmax = buf + fread(buf, 1, BUFSIZE, stdin);\n            bufnow = buf;\n        }\n    }\n    x*=f;\n}\n\ninline void write(int a,char ed='\\n')\n{\n\tstatic short s[13],tp;\n\tif(!a){putchar('0'),putchar(ed);return;}\n\tfor(tp=0;a;a/=10)s[++tp]=a%10;\n\tfor(;tp;putchar(s[tp--]^48));\n\tputchar(ed);\n}\nusing namespace std;\n\nconst int MAXN=2e5+27;\n\nstatic int n;\n\nnamespace leafy_tree\n{\n\tconst double alp=1.0-sqrt(2)/2,lim=(1-2*alp)/(1-alp);\n\n\tstatic int sz[MAXN],fa[MAXN],son[MAXN][2],ma[MAXN],mi[MAXN],rt;\n\n\tinline void refresh(int h)\n\t{\n\t\tif(son[h][0])\n\t\t{\n\t\t\tmi[h]=mi[son[h][0]];ma[h]=ma[son[h][1]];\n\t\t\tsz[h]=sz[son[h][0]]+sz[son[h][1]];\n\t\t}\n\t}\n\n\tinline bool isr(int x){return x==son[fa[x]][1];}\n\n\tinline void\trotate(int x)\n\t{\n\t\tstatic int f,ff,k;f=fa[x];ff=fa[f];k=isr(x);\n\t\tson[fa[son[x][k^1]]=f][k]=son[x][k^1];\n\t\tson[fa[x]=ff][isr(f)]=x;\n\t\tson[fa[f]=x][k^1]=f;\n\t\trefresh(f);refresh(x);\n\t\tif(f==rt)rt=x;\n\t}\n\n\tinline void maintain(int x)\n\t{\n\t\tstatic int dir;\n\t\tif(son[x][0])\n\t\t{\n\t\t\tif(sz[son[x][0]]<sz[x]*alp)dir=1;\n\t\t\telse if(sz[son[x][1]]<sz[x]*alp)dir=0;\n\t\t\telse return;\n\t\t\tif(sz[son[son[x][dir]][dir^1]]>=sz[son[x][dir]]*lim)\n\t\t\t\trotate(son[son[x][dir]][dir^1]);\n\t\t\trotate(son[x][dir]);\n\t\t}\n\t}\n\n\tstatic int sta[MAXN],tp;\n\n\tinline int newnode(int x)\n\t{\n\t\tma[sta[tp]]=mi[sta[tp]]=x;sz[sta[tp]]=1;\n\t\treturn sta[tp--];\n\t}\n\t\n\tvoid insert(int now,int x)\n\t{\n\t\tif(!rt){rt=newnode(x);return;}\n\t\tif(sz[now]==1)\n\t\t{\n\t\t\tfa[son[now][0]=newnode(x)]=now;\n\t\t\tfa[son[now][1]=newnode(ma[now])]=now;\n\t\t\tif(x>ma[now])swap(son[now][0],son[now][1]);\n\t\t}\n\t\telse insert(son[now][x>ma[son[now][0]]],x);\n\t\trefresh(now);\n\t\tmaintain(now);\n\t}\n\n\tinline void delet(int x)\n\t{son[x][0]=son[x][1]=fa[x]=sz[x]=0;sta[++tp]=x;}\n\n\tvoid del(int now,int x)\n\t{\n\t\tint dir=x>ma[son[now][0]],t;\n\t\tif(sz[son[now][dir]]==1)\n\t\t{\n\t\t\tdelet(son[now][dir]);\n\t\t\tfa[t=son[now][dir^1]]=fa[now];\n\t\t\tson[fa[now]][isr(now)]=t;\n\t\t\tdelet(now);\n\t\t\tif(now==rt)rt=t;\n\t\t\tnow=t;\n\t\t}\n\t\telse del(son[now][dir],x);\n\t\trefresh(now);\n\t\tmaintain(now);\n\t}\n\n\tint find_by_order(int now,int x)\n\t{\n\t\tif(sz[now]==1)return now;\n\t\tif(sz[son[now][0]]>=x)return find_by_order(son[now][0],x);\n\t\telse return find_by_order(son[now][1],x-sz[son[now][0]]);\n\t}\n\n\tint order_of_key(int now,int x)\n\t{\n\t\tif(x<=mi[now])return 0;\n\t\tif(sz[now]==1)return 1;\n\t\tif(ma[son[now][0]]>=x)return order_of_key(son[now][0],x);\n\t\telse return sz[son[now][0]]+order_of_key(son[now][1],x);\n\t}\n\n\tint pre(int now,int x)\n\t{\n\t\tif(sz[now]==1)return now;\n\t\tif(mi[son[now][1]]>=x)return pre(son[now][0],x);\n\t\telse return pre(son[now][1],x);\n\t}\n\n\tint suf(int now,int x)\n\t{\n\t\tif(sz[now]==1)return now;\n\t\tif(ma[son[now][0]]>x)return suf(son[now][0],x);\n\t\telse return suf(son[now][1],x);\n\t}\n}\n\nusing namespace leafy_tree;\n\ninline void work()\n{\n\tread(n);\n\tRep(i,1,(n<<1)+10)sta[i]=i;tp=(n<<1)+10;\n\tstatic int opt,x;\n\tinsert(rt,-2147483647);\n\tinsert(rt,2147483647);\n\tRep(i,1,n)\n\t{\n\t\tread(opt);read(x);\n\t\tswitch(opt)\n\t\t{\n\t\t\tcase 1:insert(rt,x);break;\n\t\t\tcase 2:del(rt,x);break;\n\t\t\tcase 3:printf(\"%d\\n\",order_of_key(rt,x));break;\n\t\t\tcase 4:printf(\"%d\\n\",ma[find_by_order(rt,x+1)]);break;\n\t\t\tcase 5:printf(\"%d\\n\",ma[pre(rt,x)]);break;\n\t\t\tcase 6:printf(\"%d\\n\",ma[suf(rt,x)]);break;\n\t\t}\n\t}\n}\n\ninline void file()\n{\n\t#ifndef ONLINE_JUDGE\n\tfreopen(\"water.in\",\"r\",stdin);\n\tfreopen(\"water.out\",\"w\",stdout);\n\t#endif\n}\n\nint main()\n{\n\tfile();\n\twork();\n\tcerr<<1.0*clock()/CLOCKS_PER_SEC<<endl;\n\treturn 0;\n}\n```\n\n####ex.leafy tree\u7684\u5176\u4ed6\u6269\u5c55\n\n$leafy tree$\u7684\u4f5c\u7528\u8fdc\u4e0d\u6b62\u901a\u8fc7\u6a21\u677f\u9898\u3002\n\n\u5b83\u80fd\u591f\u652f\u6301\u53ef\u6301\u4e45\u5316\uff0c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a$O(logn)$\uff0c\u5e38\u6570\u6bd4$FHQ$\u8981\u66f4\u5c0f\u3002\n\n\u5b83\u80fd\u591f\u5408\u5e76\u4e0e\u5206\u88c2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(logn)$\uff0c\u4e14\u5e38\u6570\u6bd4$FHQ$\u5c0f\u3002\n\n~~\u603b\u4e4b\u5c31\u662f\u6bd4FHQ\u597d\u7528~~\n\n\u5e76\u4e14\u5b83\u7684\u5f62\u5f0f\u548c\u7ebf\u6bb5\u6811\u76f8\u4f3c\uff0c\u533a\u95f4\u64cd\u4f5c\u66f4\u52a0\u7b80\u5355\u3002\n\n\u5c3d\u65e9\u5b66\u4e60\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u5e38\u6570\u4f18\u79c0\u7684\u7b80\u5355\u5e73\u8861\u6811\u6765\u4f7f\u7528\u5427\u3002",
        "postTime": 1527757120,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "## \u58f0\u660e\uff1a\u6700\u597d\u662f\u6709\u4e00\u5b9a\u5e73\u8861\u6811\u57fa\u7840\u7684\u540c\u5b66\u518d\u6765\u770b\u8fd9\u4e2a\u9898\u89e3\uff0c\u4f60\u9996\u5148\u5f97\u4f1a\u624b\u5199:D\n\n**\u8fd9\u91cc\u5411\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e2a\u795e\u5947\u7684\u5b9d\u8d1d\uff1apb\\_ds\u5e93\u7684tree\u3002**\n\ntree\u7684\u529f\u80fd\u76f8\u5f53\u5f3a\u5927\uff0c\u800c\u8fd9\u4e00\u9898\u5c31\u53ef\u4ee5\u7528\u5230\u91cc\u9762\u5c01\u88c5\u7684\u5e73\u8861\u6811\u3002\n\n\u6211\u5c1d\u8bd5\u4e86Splay\u548c\u7ea2\u9ed1\u6811(\u7ea2\u9ed1\u6811\u7528\u7684\u522b\u4eba\u7684\u4ee3\u7801)\uff0c\u53d1\u73b0\u679c\u7136RBT\u5feb\u4e86\u4e0d\u5c11\uff0cSplay\u8017\u65f6\u63a5\u8fd1RBT\u7684\u4e09\u500d\u4e86\u3002\n\n\u4f7f\u7528pb\\_ds\uff0c\u80cc\u4ee3\u7801\u7684\u80fd\u529b\u5fc5\u4e0d\u53ef\u5c11\uff0c\u6bd4\u5982\u7528tree\u5c31\u9700\u8981\u4e24\u4e2a\u5f88\u957f\u7684\u5934\u6587\u4ef6\uff0c\u5177\u4f53\u53c2\u8003\u4ee3\u7801\u3002\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8fd9\u4e2a\u6a21\u677f\u7684erase\u53ea\u9700\u8981\u5220\u9664\u4e00\u4e2a\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5bf9\u63d2\u5165\u7684\u6570\u8fdb\u884c\u7b80\u5355\u7684\u5904\u7406~~\u867d\u7136\u8fd9\u4e2a\u201c\u7b80\u5355\u7684\u201d\u5904\u7406\u548c\u5947\u7279\u7684\u5904\u7406lowerbound\u8017\u8d39\u4e86\u6211\u4e00\u4e24\u4e2a\u5c0f\u65f6\u624d\u5199\u5b8c\uff0c\u6211\u89c9\u5f97\u6211\u667a\u5546\u4e5f\u662f\u6ca1\u6551\u4e86~~\n\n\u5173\u4e8epb\\_ds\u7684\u8be6\u7ec6\u5185\u5bb9\u89c1\u4ee3\u7801\u5427\u3002\u5f53\u7136\uff0c\u5efa\u8bae\u8fd8\u662f\u53bb**\u7f51\u4e0a\u627e\u535a\u5ba2**\u8be6\u7ec6\u6df1\u6316\u3002\n\n\u6700\u540e\uff0c\u6211\u7231pb\\_ds\uff0c\u6211\u7231STL\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<ext/pb_ds/tree_policy.hpp>\n#include<ext/pb_ds/assoc_container.hpp>//\u5934\u6587\u4ef6\n#define f(i,a,b) for(i=a;i<=b;++i)\nusing namespace  __gnu_pbds;//\u7531\u4e8e\u5b9a\u4e49tree\u65f6\u9010\u4e2a\u6dfb\u4e0a\u8fd9\u4e2a\u4e1c\u897f\u592a\u96be\u7f20\u4e86\uff0c\u4e8e\u662f\u5e72\u8106\u5c31\u8fd9\u6837\u4e86\ntypedef long long ll;\ntree<ll,null_type,std::less<ll>,splay_tree_tag,tree_order_statistics_node_update>st;//splay,\u53ea\u8981\u628asplay\u6539\u4e3arb\u5c31\u662f\u7ea2\u9ed1\u6811XD,\u53e6\u5916\u6ce8\u610fstd::less\nint main()\n{\n    int i,j,m;\n    ll ans,x,y;\n    scanf(\"%d\",&m);\n    f(i,1,m)\n    {\n        scanf(\"%lld%lld\",&x,&y);\n        if(x==1)st.insert((y<<20)+i);//\u7b80\u5355\u7684\u5904\u7406\n        else if(x==2)st.erase(st.lower_bound(y<<20));\n        else if(x==3)printf(\"%d\\n\",st.order_of_key(y<<20)+1);\n        else\n        {\n            if(x==4)ans=*st.find_by_order(y-1);\n            if(x==5)ans=*--st.lower_bound(y<<20);\n            if(x==6)ans=*st.lower_bound((y+1)<<20);\n            printf(\"%lld\\n\",ans>>20);//\u4e00\u5e76\u5904\u7406ans\n        }\n    }//f(i,0,st.size()-1)printf(\"%lld \",(*st.find_by_order(i))>>20);//check\n    return 0;\n}\n```",
        "postTime": 1501082395,
        "uid": 7020,
        "name": "teafrogsf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "B\u6811\u7684\u5e38\u89c1\u4f7f\u7528\u573a\u666f\u5728\u4e8e\u6587\u4ef6\u8bfb\u5199\uff0c\u7136\u800c\u56e0\u4e3a\u5176\u5185\u5b58\u7684\u8fde\u7eed\u6027(\u4e00\u4e2a\u8282\u70b9\u5185\u53ef\u4ee5\u5b58\u653e\u5927\u91cf\u6570\u636e)\uff0c\u5728\u8282\u70b9\u5185\u8fdb\u884c\u7684\u4e8c\u5206\u641c\u7d22\u53ef\u4ee5\u6bd4\u5176\u4ed6\u5e73\u8861\u6811\u7684\u641c\u7d22\u901f\u5ea6\u66f4\u5feb\u3002\n\n\u5927\u5bb6\u53ef\u4ee5\u7a0d\u5fae\u611f\u53d7\u4e00\u4e0bB\u6811\u7684\u529b\u91cf\u300256ms AC\uff0c\u8fd9\u662f\u6240\u6709\u771f\u7684\u7528\u5e73\u8861\u6811\u505a\u8fd9\u9053\u9898\u7684\u63d0\u4ea4\u91cc\u9762\u901f\u5ea6\u6700\u5feb\u7684\u3002\u4f5c\u4e3a\u5bf9\u6bd4\uff0c\u6211\u7684\u7ea2\u9ed1\u6811\u662f68ms\u3002\n\n\u8fd9\u91cc\u662f\u5b8c\u6574\u4ee3\u7801\uff0c\u61d2\u5f97\u8bb2\u89e3\u4e86\uff0c\u6ce8\u91ca\u91cc\u8bf4\u7684\u90fd\u5f88\u6e05\u695a\u3002\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename K, int BF>\nclass BTree\n{\n  public:\n    typedef std::pair<K, int> value_type;\n\n  private:\n    struct Node\n    {\n        value_type values[2 * BF - 1];\n        Node *child[2 * BF] = {nullptr};\n        Node *p = nullptr;\n        int keyNum = 0, size = 0;\n        bool isLeaf = true;\n        const K &key(int i) const { return values[i].first; }\n        int &cnt(int i) { return values[i].second; }\n        Node(Node *p = nullptr) : p(p) {}\n    };\n    Node *root = nullptr;\n    static bool pairComp(const value_type &lhs, const K &rhs) { return lhs.first < rhs; }\n    template <typename T>\n    static void shiftBy(T *ptr, int length, int shift) { memmove(ptr + shift, ptr, length * sizeof(T)); }\n    static int calcSize(Node *x)\n    {\n        if (!x)\n            return 0;\n        int nsz = 0;\n        for (int i = 0; i < x->keyNum; ++i)\n            nsz += getSize(x->child[i]) + x->cnt(i);\n        nsz += getSize(x->child[x->keyNum]);\n        return nsz;\n    }\n    static int getSize(Node *x)\n    {\n        if (!x)\n            return 0;\n        return x->size;\n    }\n    //\u628awhere\u5b69\u5b50\u5206\u6210\u4e24\u4e2a\u8282\u70b9\uff0c\u90fd\u4f5c\u4e3ax\u7684\u5b69\u5b50\n    void split(Node *x, int where)\n    {\n        Node *z = new Node(x);\n        Node *y = x->child[where];\n        z->isLeaf = y->isLeaf;\n        memmove(z->values, y->values + BF, (BF - 1) * sizeof(value_type));\n        if (!y->isLeaf)\n        {\n            memmove(z->child, y->child + BF, BF * sizeof(Node *));\n            for (int i = 0; i < BF; ++i)\n                z->child[i]->p = z;\n        }\n        z->keyNum = y->keyNum = BF - 1;\n        shiftBy(x->child + where + 1, x->keyNum - where, 1); //\u6ce8\u610fchild\u672c\u8eabkeyNum\u591a\u4e00\u4e2a\n        x->child[where + 1] = z;\n        shiftBy(x->values + where, x->keyNum - where, 1);\n        new (x->values + where) value_type(y->values[BF - 1]);\n\n        y->size = calcSize(y), z->size = calcSize(z);\n        ++x->keyNum;\n    }\n    void insertEmpty(Node *x, const K &key)\n    {\n        while (true)\n        {\n            int i = lower_bound(x->values, x->values + x->keyNum, key, pairComp) - x->values;\n            if (i != x->keyNum && !(key < x->values[i].first)) //\u91cd\u590d\u63d2\u5165\n            {\n                ++x->cnt(i);\n                while (x)\n                    ++x->size, x = x->p;\n                return;\n            }\n            if (x->isLeaf)\n            {\n                shiftBy(x->values + i, x->keyNum - i, 1);\n                x->values[i] = {key, 1};\n                ++x->keyNum;\n                while (x)\n                    ++x->size, x = x->p;\n                return;\n            }\n            if (x->child[i]->keyNum == 2 * BF - 1)\n            {\n                split(x, i);\n                if (x->key(i) < key)\n                    ++i;\n                else if (!(key < x->key(i)))\n                {\n                    ++x->cnt(i);\n                    while (x)\n                        ++x->size, x = x->p;\n                    return;\n                }\n            }\n            x = x->child[i];\n        }\n    }\n\n    void merge(Node *x, int i) //\u5c06x\u7684i\u5b69\u5b50\u4e0ei+1\u5b69\u5b50\u5408\u5e76\uff0c\u7528x\u7684i\u952e\u4f5c\u4e3a\u5206\u9694\uff0c\u8fd9\u4e24\u4e2a\u5b69\u5b50\u90fd\u53ea\u6709BF-1\u4e2a\u5b69\u5b50\uff0c\u5408\u5e76\u540e\u67092*BF-1\u4e2a\n    {\n        Node *y = x->child[i], *z = x->child[i + 1];\n        y->keyNum = 2 * BF - 1;\n        y->values[BF - 1] = std::move(x->values[i]);\n        memmove(y->values + BF, z->values, (BF - 1) * sizeof(value_type));\n        if (!y->isLeaf)\n        {\n            memmove(y->child + BF, z->child, BF * sizeof(Node *));\n            for (int j = BF; j <= 2 * BF - 1; ++j)\n                y->child[j]->p = y;\n        }\n        shiftBy(x->values + i + 1, x->keyNum - i - 1, -1);\n        shiftBy(x->child + i + 2, x->keyNum - i - 1, -1);\n\n        --x->keyNum;\n        y->size = calcSize(y);\n    }\n    void erase(Node *x, const K &key)\n    {\n        int i = lower_bound(x->values, x->values + x->keyNum, key, pairComp) - x->values;\n        if (i != x->keyNum && !(key < x->values[i].first)) //\u627e\u5230key\u4e86\n        {\n            if (x->cnt(i) > 1)\n            {\n                --x->cnt(i);\n                while (x)\n                    --x->size, x = x->p;\n                return;\n            }\n            if (x->isLeaf) //x\u662f\u53f6\u8282\u70b9\uff0c\u76f4\u63a5\u5220\u9664\n            {\n                shiftBy(x->values + i + 1, --x->keyNum - i, -1); //\u9700\u8981\u79fb\u52a8\u7684\u5185\u5b58\u662fx->keyNum-i-1\n                while (x)\n                    --x->size, x = x->p;\n            }\n            else\n            {\n                if (x->child[i]->keyNum >= BF) //\u524d\u9a71\u6240\u5728\u5b69\u5b50\u6709\u8db3\u591f\u7684\u5b69\u5b50(\u4ee5\u5e94\u5bf9\u5b83\u7684\u5b69\u5b50\u7684\u9700\u6c42)\n                {\n                    Node *y = x->child[i];\n                    while (!y->isLeaf)\n                        y = y->child[y->keyNum]; //\u627e\u524d\u9a71\n                    x->values[i] = y->values[y->keyNum - 1];\n                    if (x->cnt(i) != 1) //y\u7684\u5bf9\u5e94\u8282\u70b9cnt\u6709\u591a\u4e2a\uff0c\u90a3\u4e48\u6cbf\u8def\u51cfsize;\u53ea\u6709\u4e00\u4e2a\u7684\u8bdd\u5220\u9664\u7684\u65f6\u5019\u4f1a\u5904\u7406\n                    {\n                        y->cnt(y->keyNum - 1) = 1;\n                        while (y != x)\n                            y->size -= x->cnt(i) - 1, y = y->p;\n                    }\n\n                    erase(x->child[i], x->key(i));\n                }\n                else if (x->child[i + 1]->keyNum >= BF) //\u540e\u7ee7\u6240\u5728\u5b69\u5b50\u6709\u8db3\u591f\u7684\u5b69\u5b50\n                {\n                    Node *y = x->child[i + 1];\n                    while (!y->isLeaf)\n                        y = y->child[0]; //\u627e\u540e\u7ee7\n                    x->values[i] = y->values[0];\n                    if (x->cnt(i) != 1)\n                    {\n                        y->cnt(0) = 1;\n                        while (y != x)\n                            y->size -= x->cnt(i) - 1, y = y->p;\n                    }\n\n                    erase(x->child[i + 1], x->key(i));\n                }\n                else //\u90fd\u6ca1\u6709,\u90a3\u4e48\u628a\u8fd9\u4e24\u4e2a\u8282\u70b9\u90fd\u5408\u5e76\u5230y\u4e2d\uff0c\u5e76\u4e14\u632a\u52a8x\u7684\u5b69\u5b50\u548c\u952e\n                {\n                    merge(x, i);\n                    if (root->keyNum == 0) //keyNum==0\u53ea\u662f\u6ca1\u6709\u952e\u4e86\uff0c\u4f46\u662f\u8fd8\u53ef\u80fd\u6709\u4e00\u4e2a\u5b69\u5b50\uff0c\u8fd9\u65f6\u6839\u53d8\u6210\u8fd9\u4e2a\u5b69\u5b50\n                        root = x->child[i], root->p = nullptr;\n                    erase(x->child[i], key);\n                }\n            }\n        }\n        else if (!x->isLeaf) //\u6ca1\u6709\u627e\u5230key,\u53ea\u8981\u4fdd\u8bc1x->child[i]->keyNum\u8db3\u591f\u591a\u5373\u53ef\u65e0\u8111\u9012\u5f52\uff0c\u7136\u800c\u5f88\u96be\u4fdd\u8bc1\n        {\n            if (x->child[i]->keyNum == BF - 1)\n            {\n                Node *y = x->child[i];\n                if (i >= 1 && x->child[i - 1]->keyNum >= BF) //\u5de6\u5144\u5f1f\uff0c\u53d6\u8d70\u5b83\u7684\u6700\u5927\u5b69\u5b50\n                {\n                    //\u627e\u76f8\u90bb\u7684\u5144\u5f1f\u501f\u8282\u70b9\uff0c\u7c7b\u4f3c\u65cb\u8f6c\u64cd\u4f5c,\u628ax\u7684\u4e00\u4e2a\u952e\u79fb\u5165\u8981\u5220\u7684key\u6240\u5728\u5b69\u5b50\uff0c\u628a\u5b83\u7684\u5144\u5f1f\u7684\u4e00\u4e2akey\u548c\u5b69\u5b50\u79fb\u5165x\n                    //\u4f46\u662f\u4ece\u5de6\u8fd8\u662f\u53f3\u501f\u5e76\u4e0d\u5b8c\u5168\u4e00\u6837\uff0c\u6240\u4ee5\u4e0d\u80fd\u4e00\u6982\u5904\u7406\n                    Node *z = x->child[i - 1];\n                    shiftBy(y->values, y->keyNum, 1);\n                    //\u662f\u5426\u9700\u8981\u8003\u8651\u6790\u6784\u7684\u95ee\u9898\uff1fz\u7684keyNum\u5df2\u7ecf\u51cf\u4e86\uff0c\u4e0d\u53ef\u80fd\u518d\u53bb\u6790\u6784z->values[z->keyNum - 1]\u4e86\n                    //\u6240\u4ee5\uff0cvalue\u7684\u6784\u9020\u5fc5\u987b\u8981\u7528new\u4e0d\u80fd\u7528=\uff0c\u4ece\u800c\u907f\u5f00=\u7684\u8d44\u6e90\u91ca\u653e\n                    //\u4f46\u662fvalue\u7684\u79fb\u52a8\u4f3c\u4e4e\u5e94\u8be5\u662fbitwise\u7684\uff0c\u8003\u8651std::move\n                    new (y->values) value_type(std::move(x->values[i - 1]));\n                    new (x->values + i - 1) value_type(std::move(z->values[z->keyNum - 1]));\n                    if (!y->isLeaf)\n                    {\n                        shiftBy(y->child, y->keyNum + 1, 1);\n                        y->child[0] = z->child[z->keyNum], y->child[0]->p = y;\n                    }\n\n                    --z->keyNum, ++y->keyNum;\n                    y->size = calcSize(y), z->size = calcSize(z);\n                    erase(y, key);\n                }\n                else if (i < x->keyNum && x->child[i + 1]->keyNum >= BF) //\u53f3\u5144\u5f1f,\u53d6\u8d70\u5b83\u7684\u6700\u5c0f\u5b69\u5b50\n                {\n                    Node *z = x->child[i + 1];\n                    new (y->values + y->keyNum) value_type(std::move(x->values[i]));\n                    new (x->values + i) value_type(std::move(z->values[0]));\n                    if (!y->isLeaf) //y\u548cz\u6df1\u5ea6\u4e00\u6837\uff0cisLeaf\u60c5\u51b5\u76f8\u540c\n                    {\n                        y->child[y->keyNum + 1] = z->child[0], y->child[y->keyNum + 1]->p = y;\n                        shiftBy(z->child + 1, z->keyNum, -1);\n                    }\n                    shiftBy(z->values + 1, z->keyNum - 1, -1);\n\n                    --z->keyNum, ++y->keyNum;\n                    y->size = calcSize(y), z->size = calcSize(z);\n                    erase(y, key);\n                }\n                else //\u4e24\u4e2a\u5144\u5f1f\u90fd\u6ca1\u6709\u8282\u70b9\u501f,\u90a3\u4e48\u5c06\u5b83\u4e0e\u968f\u4fbf\u5de6\u53f3\u54ea\u4e2a\u5144\u5f1f\u5408\u5e76\uff0c\u7136\u800c\u8fd8\u662f\u8981\u7279\u5224\u4e00\u4e0b\n                {\n                    if (i != 0)\n                        --i; //i==0\u65f6\uff0cy\u4e0ey+1\u5408\u5e76\u4ecd\u653e\u4e8ey\uff1b\u5426\u5219y\u4e0ey-1\u5408\u5e76\u653e\u4e8ey-1\n                    y = x->child[i];\n                    merge(x, i);\n                    if (root->keyNum == 0)\n                        root = y, root->p = nullptr;\n                    erase(y, key);\n                }\n            }\n            else\n                erase(x->child[i], key);\n        }\n    }\n\n  public:\n    BTree() : root(new Node) {}\n    void insert(const K &key)\n    {\n        //\u6cbf\u8def\u5411\u4e0b\u5206\u88c2\u6ee1\u8282\u70b9,\u6bcf\u6b21\u5206\u88c2\u6210\u5de6\u53f3\u4e00\u534a\uff0c\u5b69\u5b50\u7684\u4e2d\u95f4key\u7559\u5728\u7236\u4eb2\u8282\u70b9\u4e2d\u7528\u4e8e\u5206\u9694\u4e24\u4e2a\u65b0\u5b69\u5b50\n        //insertEmpty\u53ea\u4fdd\u8bc1\u4e86\u5f53\u524d\u8282\u70b9\u6709\u7a7a\u95f4(\u6765\u5bb9\u7eb3\u5b83\u7684\u5b69\u5b50\u7684\u5206\u88c2)\uff0c\u4e0d\u4fdd\u8bc1key\u9700\u8981\u53bb\u7684\u5b69\u5b50\u8282\u70b9\u4e5f\u6709\u7a7a\u95f4\n        if (root->keyNum == 2 * BF - 1)\n        {\n            Node *x = new Node;\n            x->isLeaf = false, x->child[0] = root, x->size = root->size; //+1\u64cd\u4f5c\u7531insertEmpty\u6765\u505a\n            root->p = x, root = x;\n            split(x, 0); //split\u63a5\u53d7\u53c2\u6570\uff1anode\u7684\u6ee1\u5b50\u8282\u70b9\u4e0b\u6807\n        }\n        insertEmpty(root, key);\n    }\n    void erase(const K &key) { erase(root, key); }\n    int next(const K &key)\n    {\n        Node *x = root;\n        int ret;\n        while (x)\n        {\n            int i = lower_bound(x->values, x->values + x->keyNum, key, pairComp) - x->values;\n            if (x->values[i].first == key)\n                ++i;\n            if (i != x->keyNum)\n                ret = x->values[i].first;\n            x = x->child[i];\n        }\n        return ret;\n    }\n    int prev(const K &key)\n    {\n        Node *x = root;\n        int ret;\n        while (x)\n        {\n            int i = lower_bound(x->values, x->values + x->keyNum, key, pairComp) - x->values;\n            if (i)\n                ret = x->values[i - 1].first;\n            x = x->child[i];\n        }\n        return ret;\n    }\n    int rank(const K &key)\n    {\n        Node *x = root;\n        int ret = 0;\n        while (x)\n        {\n            if (x->key(x->keyNum - 1) < key)\n            {\n                ret += x->size - getSize(x->child[x->keyNum]);\n                x = x->child[x->keyNum];\n                continue;\n            }\n            for (int i = 0; i < x->keyNum; ++i)\n            {\n                if (x->key(i) < key)\n                    ret += getSize(x->child[i]) + x->cnt(i);\n                else if (x->key(i) == key)\n                    return ret + getSize(x->child[i]) + 1;\n                else\n                {\n                    x = x->child[i];\n                    break;\n                }\n            }\n        }\n        return ret;\n    }\n    int kth(int k)\n    {\n        Node *x = root;\n        while (true)\n        {\n            for (int i = 0; i <= x->keyNum; ++i)\n            {\n                //const int csz = getSize(x->child[i]) + (i == x->keyNum ? 1 : x->cnt(i));\n                const int lb = getSize(x->child[i]) + 1, ub = getSize(x->child[i]) + (i == x->keyNum ? 1 : x->cnt(i));\n                if (k >= lb && k <= ub)\n                    return x->key(i);\n                if (k < lb)\n                {\n                    x = x->child[i];\n                    break;\n                }\n                k -= ub;\n            }\n        }\n    }\n};\nstruct io_t\n{\n    char p[1 << 23], *s;\n    char e[1 << 24], *t;\n    int a[24];\n    io_t() : s(p), t(e)\n    {\n        //freopen(\"in.txt\", \"r\", stdin);\n        fread(s, 1, sizeof p, stdin);\n    }\n    ~io_t()\n    {\n        //freopen(\"out.txt\", \"w\", stdout);\n        fwrite(e, 1, t-e, stdout);\n    }\n    operator int()\n    {\n        static int v, j;\n        v = 0, j = 0;\n        while (*s < '0')\n            j = *s++ == '-';\n        do\n            v = v * 10 + *s++ - '0';\n        while (*s > ' ');\n        return j ? -v : v;\n    }\n    void print(int v)\n    {\n        static int *q = a;\n        static int cnt = 0;\n        ++cnt;\n        if (!v)\n            *t++ = '0';\n        else\n        {\n            if (v < 0)\n                *t++ = '-', v = -v;\n            while (v)\n                *q++ = v % 10 + '0', v /= 10;\n            while (q != a)\n                *t++ = *--q;\n        }\n        *t++ = '\\n';\n    }\n} ip;\nint main()\n{\n    BTree<int, 35> bt;\n    int n = ip, opt, x;\n    while (n--)\n    {\n        opt = ip, x = ip;\n        switch (opt)\n        {\n        case 1:\n            bt.insert(x);\n            break;\n        case 2:\n            bt.erase(x);\n            break;\n        case 3:\n            ip.print(bt.rank(x));\n            break;\n        case 4:\n            ip.print(bt.kth(x));\n            break;\n        case 5:\n            ip.print(bt.prev(x));\n            break;\n        case 6:\n            ip.print(bt.next(x));\n            break;\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1521853999,
        "uid": 68618,
        "name": "MashPlant",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "7\u4e2a\u6708\u524d\u5199\u8fc7\u4e00\u7bc7\u9898\u89e3\uff0c\u4eca\u5929\u56de\u6765\u770b\u4e0b\u7ed3\u679c\u81ea\u5df1\u90fd\u770b\u4e0d\u4e0b\u53bb\uff0c\u4e8e\u662f\u5c31\u6765\u91cd\u5199\u4e86\u3002\n\n\n# \u9012\u5f52\u7248Splay\n\n\n\u4f18\u70b9\uff1a**\u4e0d\u7528\u7ef4\u62a4\u7236\u6307\u9488\uff01\uff01\uff01**\u521a\u5f00\u59cb\u5b66\u5199\u975e\u9012\u5f52Splay\u7684\u65f6\u5019\u88ab\u7236\u6307\u9488\u7684\u7ef4\u62a4\u5751\u4e86\u597d\u4e45\uff01\uff01\uff01\n\n\n\u53c2\u8003\u4e86\u5927\u5218\u7684\u300a\u8bad\u7ec3\u6307\u5357\u300b\u3002\n\n\n## \u5b9e\u73b0\n\n\n**\u524d\u6392\u8b66\u544a\uff1a\u524d\u65b9\u5b58\u5728\u5927\u91cf\u7ed3\u6784\u4f53+\u6307\u9488**\n\n\n\u9996\u5148\u6211\u7528\u540d\u4e3anode\u7684\u7ed3\u6784\u4f53\u4fdd\u5b58\u8282\u70b9\uff1a\n\n\n```cpp\nconst int inf = 0x7fffffff;\nstruct node *nil; // \u54e8\u5175\u8282\u70b9\uff0c\u7528\u4e8e\u9632\u6b62\u8bbf\u95ee\u65e0\u6548\u5185\u5b58\u5bfc\u81f4\u7ffb\u8f66\nstruct node\n{\n    node *ch[2];        // ch[0]\u662f\u5de6\u513f\u5b50\u6307\u9488\uff0cch[1]\u662f\u53f3\u513f\u5b50\u6307\u9488\n    int val, cnt, size; // \u5143\u7d20\u7684\u503c\u3001\u5143\u7d20\u4e2a\u6570\uff08\u5904\u7406\u91cd\u590d\uff09\u3001\u8be5\u8282\u70b9\u6784\u6210\u7684\u5b50\u6811\u5305\u542b\u5143\u7d20\u7684\u4e2a\u6570\n    int cmp(int v)      // \u5982\u4ee3\u7801\u6240\u793a\uff0c\u8fd4\u56de\u8981\u5bfb\u627e\u503c\u4e3av\u7684\u5143\u7d20\u8be5\u5411\u5de6\u8d70\u8fd8\u662f\u5411\u53f3\u8d70\n    {\n        if (v == val)\n            return -1;\n        else\n            return v < val ? 0 : 1;\n    }\n    int cmpkth(int k) // \u540c\u4e0a\uff0c\u8fd4\u56de\u8981\u5bfb\u627e\u7b2ck\u5c0f\u5143\u7d20\u8be5\u5411\u5de6\u8d70\u8fd8\u662f\u5411\u53f3\u8d70\n    {\n        if (k <= ch[0]->size)\n            return 0;\n        else if (k <= ch[0]->size + cnt)\n            return -1;\n        else\n            return 1;\n    }\n    void pullup() { size = cnt + ch[0]->size + ch[1]->size; }      // \u7528\u4e8e\u63d2\u5165\u6216\u5220\u9664\u540e\u91cd\u65b0\u8ba1\u7b97size\n    node(int v) : val(v), cnt(1), size(1) { ch[0] = ch[1] = nil; } //  \u666e\u901a\u7684\u6784\u9020\u51fd\u6570\n} * root;\nvoid init() // \u4e3b\u8981\u7528\u6765\u521d\u59cb\u5316\u54e8\u5175\u8282\u70b9\n{\n    nil = new node(0);\n    root = nil->ch[0] = nil->ch[1] = nil;\n    nil->size = nil->cnt = 0;\n}\n```\n\n\u4e0b\u9762\u7684\u8bf4\u660e\u4e2dnode\u65e2\u53ef\u4ee5\u8868\u793a**\u8282\u70b9**\u4e5f\u53ef\u4ee5\u8868\u793a**\u6811**\u3002\n\n\n\u75280\uff0f1\u8868\u793a\u5411\u5de6\uff0f\u5411\u53f3\uff0c\u7528`ch[0]`\uff0f`ch[1]`\u8868\u793a\u5de6\u513f\u5b50\uff0f\u53f3\u513f\u5b50\u6307\u9488\uff0c\u7528`cmp(int v)`\u8fd4\u56de\u5f80\u5de6\u8d70\uff0f\u5f80\u53f3\u8d70\uff0c\u7528\u5f02\u6216\u8fd0\u7b97\u53d6\u76f8\u53cd\u65b9\u5411\uff0c\u8fd9\u4e9b\u90fd\u662f\u6765\u81ea\u5927\u5218\u300a\u8bad\u7ec3\u6307\u5357\u300b\u7684\u6280\u5de7\u3002\u56e0\u4e3a\u5e73\u8861\u6811\u4e2d\u5bf9\u79f0\u7684\u60c5\u5f62\u592a\u591a\u4e86\uff0c\u5408\u7406\u8fd0\u7528\u8fd9\u4e9b\u6280\u5de7\u53ef\u4ee5\u538b\u7f29\u4ee3\u7801\u91cf\u3002\n\n\n### \u4f38\u5c55\n\n\n\u6240\u8c13\u9012\u5f52Splay\uff0c\u5176\u5b9e\u5c31\u662f\u628a\u5bfb\u627e\u8282\u70b9\u548c\u4f38\u5c55\u8282\u70b9\u5199\u5728\u4e86\u4e00\u8d77\uff0c\u628a\u9012\u5f52\u5bfb\u627e\u8282\u70b9\u5c55\u5f00\u4e00\u5c42\u4ee5\u540e\u585e\u51e0\u884c\u4ee3\u7801\u8c03\u7528\u65cb\u8f6c\u3002\u5982\u679c\u627e\u4e0d\u5230\u8fd9\u4e2a\u503c\u7684\u8282\u70b9\uff0c\u5c31\u4f1a\u4f38\u5c55\u6700\u540e\u4e00\u4e2a\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u3002\n\n\n```cpp\nvoid rotate(node *&t, int d) //\u4f20\u5f15\u7528\u5f88\u91cd\u8981\uff01\uff01\n{\n    node *k = t->ch[d ^ 1];\n    t->ch[d ^ 1] = k->ch[d];\n    k->ch[d] = t;\n    t->pullup(), k->pullup(); // \u6ce8\u610f\u6b64\u65f6k\u5df2\u7ecf\u662ft\u7684\u7236\u4eb2\n    t = k;\n}\nvoid splay(int v, node *&t) // \u5728\u6811t\u4e2d\u5bfb\u627e\u503c\u4e3av\u7684\u8282\u70b9\uff0c\u5e76\u4f38\u5c55\u6210\u4e3at\u7684\u6839\u8282\u70b9\uff1b\u4f20\u5f15\u7528\u5f88\u91cd\u8981\uff01\uff01\n{\n    int d = t->cmp(v);              //\u4e0b\u4e00\u6b65\u8be5\u8d70\u7684\u65b9\u5411\n    if (d != -1 && t->ch[d] != nil) //\u5982\u679c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u8d70\u5411\u4e00\u4e2a\u5408\u6cd5\u7ed3\u70b9\n    {\n        int d2 = t->ch[d]->cmp(v);               //\u4e0b\u4e24\u6b65\u8be5\u8d70\u7684\u65b9\u5411\n        if (d2 != -1 && t->ch[d]->ch[d2] != nil) //\u5982\u679c\u4e0b\u4e24\u6b65\u53ef\u4ee5\u8d70\u5411\u4e00\u4e2a\u5408\u6cd5\u7ed3\u70b9\n        {\n            splay(v, t->ch[d]->ch[d2]); //\u5148\u9012\u5f52\n            if (d == d2)\n                rotate(t, d2 ^ 1), rotate(t, d ^ 1); // zig-zig\n            else\n                rotate(t->ch[d], d2 ^ 1), rotate(t, d ^ 1); //zig-zag\n        }\n        else\n            rotate(t, d ^ 1); // zig\n    }\n    // else t\u5df2\u7ecf\u662f\u7ec8\u70b9\n}\nvoid splaykth(int k, node *&t) // \u540c\u4e0a\uff0c\u5728\u6811t\u4e2d\u5bfb\u627e\u7b2ck\u5c0f\u7684\u8282\u70b9\uff0c\u5e76\u4f38\u5c55\u6210\u4e3at\u7684\u6839\u8282\u70b9\uff1b\u4f20\u5f15\u7528\u5f88\u91cd\u8981\uff01\uff01\n{\n    int d = t->cmpkth(k);\n    if (d == 1)\n        k -= t->ch[0]->size + t->cnt;\n    if (d != -1)\n    {\n        int d2 = t->ch[d]->cmpkth(k);\n        int k2 = (d2 == 1) ? k - (t->ch[d]->ch[0]->size + t->ch[d]->cnt) : k;\n        if (d2 != -1)\n        {\n            splaykth(k2, t->ch[d]->ch[d2]);\n            if (d == d2)\n                rotate(t, d2 ^ 1), rotate(t, d ^ 1);\n            else\n                rotate(t->ch[d], d2 ^ 1), rotate(t, d ^ 1);\n        }\n        else\n            rotate(t, d ^ 1);\n    }\n}\n```\n\n\u867d\u7136\u5199\u8d77\u6765\u662f\u9012\u5f52\uff0c\u4f46\u672c\u8d28\u8fd8\u662f\u81ea\u5e95\u5411\u4e0a\u7684\u3002\u767e\u5ea6\u53ef\u4ee5\u627e\u5230\u771f\u6b63\u7684\u81ea\u9876\u5411\u4e0b\u4f38\u5c55\u7684\u65b9\u6cd5\u3002\n\n\n-----\n\n\u65e2\u7136Splay\u53ef\u4ee5\u53d8\u6765\u53d8\u53bb\uff0c\u90a3\u4e48\u5f88\u591a\u64cd\u4f5c\u90fd\u6709**\u201cSplay\u7279\u8272\u201d**\u7684\u5199\u6cd5\uff1a\n\n\n###\u6c42\u524d\u9a71/\u540e\u7ee7\n\n\n\u901b\u4e86\u4e00\u5708\u53d1\u73b0\u90fd\u662f\u66b4\u529b\u63d2\u5165\u518d\u6c42\u524d\u9a71\uff0f\u540e\u7ee7\u518d\u5220\u9664\u7684\uff0c\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e2a\u4f18\u96c5\u7684\u65b9\u6cd5\u3002\u6216\u8bb8\u662f\u6211\u539f\u521b\u7684\u5427\u3002\n\n\n\u9996\u5148\u4f38\u5c55X\u81f3\u6839\uff0c\u5982\u679cX\u5b58\u5728\uff0c\u6839\u5c31\u4f1a\u53d8\u6210X\uff0cX\u7684\u524d\u9a71\u5c31\u662f\u5de6\u5b50\u6811\u6700\u5927\u7684\u503c\uff1b\u518d\u4f38\u5c55\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u6210\u4e3a\u5de6\u5b50\u6811\u7684\u6839\uff0c\u5c31\u662f\u6839\u8282\u70b9\u7684\u5de6\u513f\u5b50\u3002\u6c42\u540e\u7ee7\u540c\u7406\u3002\n\n\n\u5982\u679cX\u4e0d\u5b58\u5728\u5462\uff1f\u53ef\u4ee5\u8bc1\u660e**\u67e5\u627e\u8282\u70b9\u65f6\u6700\u540e\u4e00\u4e2a\u8bbf\u95ee\u7684\u8282\u70b9\u5fc5\u5b9a\u662f\u524d\u9a71\u6216\u8005\u540e\u7ee7**\u3002\u6240\u4ee5\u4f38\u5c55\u540e\u6839\u5c31\u662fX\u7684\u524d\u9a71\u548c\u540e\u7ee7\u4e4b\u4e00\u3002\n\n\n\u5f53\u6839\u662f\u524d\u9a71\u7684\u65f6\u5019\uff0c\u524d\u9a71\u5c31\u662f\u6839\uff0c\u540e\u7ee7\u5c31\u662f\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\uff1b\n\n\n\u5f53\u6839\u662f\u540e\u7ee7\u7684\u65f6\u5019\uff0c\u524d\u9a71\u5c31\u662f\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\uff0c\u540e\u7ee7\u5c31\u662f\u6839\u3002\n\n\n```cpp\nint lower(int v, node *&t = root) // \u524d\u9a71\n{\n    splay(v, t);\n    if (t->val >= v) // \u6839\u662fX\u6216\u662fX\u7684\u540e\u9a71\n    {\n        if (t->ch[0] == nil)\n            return -inf;\n        splay(inf, t->ch[0]); // \u76f8\u5f53\u4e8e\u4f38\u5c55\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\n        return t->ch[0]->val;\n    }\n    else\n        return t->val;\n}\nint upper(int v, node *&t = root) // \u540e\u9a71\n{\n    splay(v, t);\n    if (t->val <= v) // \u6839\u662fX\u6216\u662fX\u7684\u524d\u9a71\n    {\n        if (t->ch[1] == nil)\n            return inf;\n        splay(-inf, t->ch[1]); // \u76f8\u5f53\u4e8e\u4f38\u5c55\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\n        return t->ch[1]->val;\n    }\n    else\n        return t->val;\n}\n```\n\n**\u4e0d\u4e25\u8c28\u7684\u8bc1\u660e\uff1a**\n\n\n\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\u3002\n\n\n\u60f3\u8c61\u4e00\u4e0b\u5bf9\u8fd9\u68f5\u6811\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002\u67e5\u627e\u64cd\u4f5c\u548c\u4e8c\u5206\u67e5\u627e\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u8fc7\u6bcf\u6b21\u662f\u4ee5\u5b50\u6811\u7684\u6839\u4e3a\u5206\u754c\u70b9\uff0c\u8fdb\u5165\u5de6\u8fb9\u6216\u53f3\u8fb9\u7684\u5e8f\u5217\uff08\u4e0d\u5305\u542b\u8be5\u5206\u754c\u70b9\uff09\u7ee7\u7eed\u5bfb\u627e\u3002\n\n\n\u7531\u4e8e\u8be5\u5e8f\u5217\u59cb\u7ec8\u662f\u8fde\u7eed\u7684\uff0c\u82e5X\u4e0d\u5b58\u5728\uff0c\u6700\u540e\u5e8f\u5217\u5fc5\u5b9a\u4f1a\u53d8\u6210\u7a7a\u7684\u3002\u8003\u8651\u5728\u6b64\u4e4b\u524d\u7684\u4e0a\u4e00\u6b65\uff0c\u82e5\u662f**\u5728\u4e00\u4e2a\u5c0f\u4e8e\u524d\u9a71\u7684\u7ed3\u70b9**\uff0c\u5219\u4e0b\u4e00\u6b65\u5fc5\u5b9a\u662f\u5f80\u5305\u542b\u524d\u9a71\u7684\u65b9\u5411\u7f29\u5c0f\u5e8f\u5217\uff0c\u6545\u8fd9\u4e00\u6b65\u4e0d\u53ef\u80fd\u662f\u6700\u540e\u4e00\u6b65\uff08\u9664\u975e\u524d\u9a71\u4e0d\u5b58\u5728\uff09\u3002**\u5728\u4e00\u4e2a\u5927\u4e8e\u540e\u7ee7\u7684\u7ed3\u70b9**\u540c\u7406\u3002\n\n\n\u6545\u7ecf\u8fc7\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u5fc5\u5b9a\u662f\u524d\u9a71\u6216\u540e\u7ee7\uff08\u82e5\u5b58\u5728\uff09\u3002\n\n\n### \u6c42\u6392\u540d\n\n\n\u4f38\u5c55X\u6210\u4e3a\u6839\uff0c\u6c42\u5de6\u5b50\u6811\u7684\u5143\u7d20\u6570\u91cf+1\u5373\u53ef\n\n\n```cpp\nint getrank(int v, node *&t = root)\n{\n    splay(v, t);\n    return t->ch[0]->size + 1;\n}\n```\n\n### \u6c42K\u5927\n\n\n\n```cpp\nint getkth(int k, node *&t = root)\n{\n    splaykth(k, t);\n    return t->val;\n}\n```\n\n`splaykth(k, root)`\u7136\u540e\u8f93\u51fa`root->val`\u5373\u53ef\u3002\n\n### \u5206\u88c2\n\n\n\u5c06\u6811t\u5206\u4e3a\u5c0f\u4e8e\u7b49\u4e8eX\u548c\u5927\u4e8eX\u4e24\u90e8\u5206\uff1a\n\n\n- \u82e5X\u5728\u6811\u4e0a\uff0c\u5148\u4f38\u5c55X\uff0c\u8fd9\u65f6\u5019\u6811\u7684\u5de6\u5b50\u6811\u90fd\u662f\u5c0f\u4e8eX\u7684\u5143\u7d20\uff0c\u53f3\u5b50\u6811\u90fd\u662f\u5927\u4e8eX\u7684\u5143\u7d20\u3002\u65ad\u5f00\u6839\u548c\u53f3\u5b50\u6811\u7684\u8fde\u63a5\u5373\u53ef\u3002\n\n- \u82e5X\u4e0d\u5728\u6811\u4e0a\uff0c\u4f38\u5c55\u64cd\u4f5c\u5c06\u4f1a\u628aX\u7684\u524d\u9a71\u6216\u540e\u7ee7\u4f38\u5c55\u81f3\u6839\uff08\u8bc1\u660e\u5728\u4e0b\u9762\uff09\u3002\u53ea\u9700\u5224\u65ad\u4e0b\u6839\u662f\u5927\u4e8eX\u8fd8\u662f\u5c0f\u4e8eX\uff0c\u51b3\u5b9a\u65ad\u5f00\u6839\u548c\u5de6\u5b50\u6811\u7684\u8fde\u63a5\u8fd8\u662f\u53f3\u5b50\u6811\u7684\u8fde\u63a5\u3002\n\n\n```cpp\nnode *split(int v, node *&t) // \u5206\u88c2\u540e\uff0c\u6811t\u90fd\u662f\u5c0f\u4e8e\u7b49\u4e8eX\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u7684\u6811\u90fd\u662f\u5927\u4e8eX\u7684\u5143\u7d20\n{\n    if (t == nil)\n        return nil;\n    splay(v, t);\n\n    node *t1, *t2; // \u7528\u4e8e\u4fdd\u5b58\u5206\u88c2\u540e\u7684\u4e24\u68f5\u6811\n    if (t->val <= v)\n        t1 = t, t2 = t->ch[1], t->ch[1] = nil;\n    else\n        t1 = t->ch[0], t2 = t, t->ch[0] = nil;\n    t->pullup();\n    t = t1;\n    return t2;\n}\n```\n\n### \u5408\u5e76\n\n\n\u8981\u5408\u5e76\u7684\u4e24\u68f5\u6811\u5206\u522b\u4e3aT1\u548cT2\uff0c\u5219\u5fc5\u987b\u4fdd\u8bc1\u6811T1\u7684\u6700\u5927\u503c**\u4e25\u683c\u5c0f\u4e8e**\u6811T2\u7684\u6700\u5c0f\u503c\u3002\n\n\n\u5148\u4f38\u5c55T1\u7684\u6700\u5927\u503c\u8282\u70b9\uff0c\u8fd9\u65f6\u5019T1\u7684\u6839\u5fc5\u7136\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u5c06T2\u63a5\u4e0a\u53bb\u5373\u53ef\u3002\n\n\n```cpp\nvoid merge(node *&t1, node *&t2) // \u5408\u5e76\u540e\u5f97\u5230\u7684\u6811\u662ft1\uff0ct2\u4f1a\u53d8\u4e3a\u7a7a\u6811\n{\n    if (t1 == nil)\n        swap(t1, t2);\n\n    splay(inf, t1);\n    t1->ch[1] = t2;\n    t2 = nil;\n    t1->pullup();\n}\n```\n\n### \u63d2\u5165\n\n\n\u4e3a\u4ec0\u4e48\u8981\u628a\u63d2\u5165\u548c\u5220\u9664\u653e\u5230\u6700\u540e\u9762\u3002\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u5206\u88c2\u548c\u5408\u5e76\u4f18\u96c5\u5730\u5b9e\u73b0\u3002\n\n\n\u5148\u5c06\u6811\u5206\u88c2\u4e3a\u5c0f\u4e8e\u6216\u7b49\u4e8eX\u7684\u6811T1\u548c\u5927\u4e8eX\u7684\u6811T2\u3002\n\n\n\u7531\u4e8eT1\u7684\u6839\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u6545T1\u7684\u6839\u5c31\u662fT1\u7684\u6700\u5927\u503c\u3002\u68c0\u67e5T1\u7684\u6839\u662f\u5426\u7b49\u4e8eX\uff1a\u82e5\u662f\uff0c\u8bf4\u660e\u51fa\u73b0\u91cd\u590d\uff0c\u8ba1\u6570\u52a0\u4e00\uff1b\u5426\u5219\u5408\u5e76T1\u548c\u65b0\u8282\u70b9\u3002\u4e4b\u540e\u91cd\u65b0\u5408\u5e76\u65b0\u7684T1\u548cT2\u3002\n\n\n```cpp\nvoid insert(int v, node *&t = root)\n{\n    node *t2 = split(v, t);\n    if (t->val == v)\n        t->cnt++;\n    else\n    {\n        node *nd = new node(v);\n        merge(t, nd);\n    }\n    merge(t, t2);\n}\n```\n\n### \u5220\u9664\n\n\n\u5148\u5c06\u6811\u5206\u88c2\u4e3a\u5c0f\u4e8e\u6216\u7b49\u4e8eX\u7684\u6811T1\u548c\u5927\u4e8eX\u7684\u6811T2\u3002\n\n\n\u7531\u4e8eT1\u7684\u6839\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u6545T1\u7684\u6839\u5c31\u662fT1\u7684\u6700\u5927\u503c\u3002\u68c0\u67e5T1\u7684\u6839\u662f\u5426\u4e3aX\u4e14\u8ba1\u6570\u51cf\u4e00\u540e\u4e3a0\uff1a\u82e5\u662f\uff0c\u7528T1\u7684\u5de6\u5b50\u6811\u4ee3\u66ffT1\uff0c\u5e76\u5220\u9664\u539fT1\u7684\u6839\uff1b\u5426\u5219\u4e0d\u5904\u7406\u3002\u4e4b\u540e\u91cd\u65b0\u5408\u5e76\u65b0\u7684T1\u548cT2\u3002\n\n\n```cpp\nvoid erase(int v, node *&t = root)\n{\n    node *t2 = split(v, t);\n    if (t->val == v && --(t->cnt) < 1) // \u547d\u4e2d\u8282\u70b9\uff0c\u8ba1\u6570\u5148\u51cf\u4e00\uff0c\u518d\u5224\u65ad\u662f\u5426\u8981\u5c06\u8282\u70b9\u5220\u9664\n    {\n        node *t3 = t->ch[0];\n        delete t;\n        t = t3;\n    }\n    merge(t, t2);\n}\n```\n\n## \u6a21\u677f\n\n\n```cpp\n// https://www.luogu.org/problem/show?pid=3369\n// UPD: 2017/12/3\n#include <iostream>\nusing namespace std;\nnamespace splay // \u6570\u636e\u7ed3\u6784\u7528namespace\u88c5\u7740\u662f\u4e2a\u4eba\u4e60\u60ef\n{\nconst int inf = 0x7fffffff;\nstruct node *nil; // \u54e8\u5175\u8282\u70b9\uff0c\u7528\u4e8e\u9632\u6b62\u8bbf\u95ee\u65e0\u6548\u5185\u5b58\u5bfc\u81f4\u7ffb\u8f66\nstruct node\n{\n    node *ch[2];        // ch[0]\u662f\u5de6\u513f\u5b50\u6307\u9488\uff0cch[1]\u662f\u53f3\u513f\u5b50\u6307\u9488\n    int val, cnt, size; // \u5143\u7d20\u7684\u503c\u3001\u5143\u7d20\u4e2a\u6570\uff08\u5904\u7406\u91cd\u590d\uff09\u3001\u8be5\u8282\u70b9\u6784\u6210\u7684\u5b50\u6811\u5305\u542b\u5143\u7d20\u7684\u4e2a\u6570\n    int cmp(int v)      // \u5982\u4ee3\u7801\u6240\u793a\uff0c\u8fd4\u56de\u8981\u5bfb\u627e\u503c\u4e3av\u7684\u5143\u7d20\u8be5\u5411\u5de6\u8d70\u8fd8\u662f\u5411\u53f3\u8d70\n    {\n        if (v == val)\n            return -1;\n        else\n            return v < val ? 0 : 1;\n    }\n    int cmpkth(int k) // \u540c\u4e0a\uff0c\u8fd4\u56de\u8981\u5bfb\u627e\u7b2ck\u5c0f\u5143\u7d20\u8be5\u5411\u5de6\u8d70\u8fd8\u662f\u5411\u53f3\u8d70\n    {\n        if (k <= ch[0]->size)\n            return 0;\n        else if (k <= ch[0]->size + cnt)\n            return -1;\n        else\n            return 1;\n    }\n    void pullup() { size = cnt + ch[0]->size + ch[1]->size; }      // \u7528\u4e8e\u63d2\u5165\u6216\u5220\u9664\u540e\u91cd\u65b0\u8ba1\u7b97size\n    node(int v) : val(v), cnt(1), size(1) { ch[0] = ch[1] = nil; } //  \u666e\u901a\u7684\u6784\u9020\u51fd\u6570\n} * root;\nvoid init() // \u4e3b\u8981\u7528\u6765\u521d\u59cb\u5316\u54e8\u5175\u8282\u70b9\n{\n    nil = new node(0);\n    root = nil->ch[0] = nil->ch[1] = nil;\n    nil->size = nil->cnt = 0;\n}\nvoid rotate(node *&t, int d) //\u4f20\u5f15\u7528\u5f88\u91cd\u8981\uff01\uff01\n{\n    node *k = t->ch[d ^ 1];\n    t->ch[d ^ 1] = k->ch[d];\n    k->ch[d] = t;\n    t->pullup(), k->pullup(); // \u6ce8\u610f\u6b64\u65f6k\u5df2\u7ecf\u662ft\u7684\u7236\u4eb2\n    t = k;\n}\nvoid splay(int v, node *&t) // \u5728\u6811t\u4e2d\u5bfb\u627e\u503c\u4e3av\u7684\u8282\u70b9\uff0c\u5e76\u4f38\u5c55\u6210\u4e3at\u7684\u6839\u8282\u70b9\uff1b\u4f20\u5f15\u7528\u5f88\u91cd\u8981\uff01\uff01\n{\n    int d = t->cmp(v);              //\u4e0b\u4e00\u6b65\u8be5\u8d70\u7684\u65b9\u5411\n    if (d != -1 && t->ch[d] != nil) //\u5982\u679c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u8d70\u5411\u4e00\u4e2a\u5408\u6cd5\u7ed3\u70b9\n    {\n        int d2 = t->ch[d]->cmp(v);               //\u4e0b\u4e24\u6b65\u8be5\u8d70\u7684\u65b9\u5411\n        if (d2 != -1 && t->ch[d]->ch[d2] != nil) //\u5982\u679c\u4e0b\u4e24\u6b65\u53ef\u4ee5\u8d70\u5411\u4e00\u4e2a\u5408\u6cd5\u7ed3\u70b9\n        {\n            splay(v, t->ch[d]->ch[d2]); //\u5148\u9012\u5f52\n            if (d == d2)\n                rotate(t, d2 ^ 1), rotate(t, d ^ 1); // zig-zig\n            else\n                rotate(t->ch[d], d2 ^ 1), rotate(t, d ^ 1); //zig-zag\n        }\n        else\n            rotate(t, d ^ 1); // zig\n    }\n    // else t\u5df2\u7ecf\u662f\u7ec8\u70b9\n}\nvoid splaykth(int k, node *&t) // \u540c\u4e0a\uff0c\u5728\u6811t\u4e2d\u5bfb\u627e\u7b2ck\u5c0f\u7684\u8282\u70b9\uff0c\u5e76\u4f38\u5c55\u6210\u4e3at\u7684\u6839\u8282\u70b9\uff1b\u4f20\u5f15\u7528\u5f88\u91cd\u8981\uff01\uff01\n{\n    int d = t->cmpkth(k);\n    if (d == 1)\n        k -= t->ch[0]->size + t->cnt;\n    if (d != -1)\n    {\n        int d2 = t->ch[d]->cmpkth(k);\n        int k2 = (d2 == 1) ? k - (t->ch[d]->ch[0]->size + t->ch[d]->cnt) : k;\n        if (d2 != -1)\n        {\n            splaykth(k2, t->ch[d]->ch[d2]);\n            if (d == d2)\n                rotate(t, d2 ^ 1), rotate(t, d ^ 1);\n            else\n                rotate(t->ch[d], d2 ^ 1), rotate(t, d ^ 1);\n        }\n        else\n            rotate(t, d ^ 1);\n    }\n}\n// WARNING: split\u548cmerge\u5fc5\u987b\u8981\u5199\u5f97\u683c\u5916\u5c0f\u5fc3\nnode *split(int v, node *&t) // \u5206\u88c2\u540e\uff0c\u6811t\u90fd\u662f\u5c0f\u4e8e\u7b49\u4e8eX\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u7684\u6811\u90fd\u662f\u5927\u4e8eX\u7684\u5143\u7d20\n{\n    if (t == nil)\n        return nil;\n    splay(v, t);\n\n    node *t1, *t2; // \u7528\u4e8e\u4fdd\u5b58\u5206\u88c2\u540e\u7684\u4e24\u68f5\u6811\n    if (t->val <= v)\n        t1 = t, t2 = t->ch[1], t->ch[1] = nil;\n    else\n        t1 = t->ch[0], t2 = t, t->ch[0] = nil;\n    t->pullup();\n    t = t1;\n    return t2;\n}\nvoid merge(node *&t1, node *&t2) // \u5408\u5e76\u540e\u5f97\u5230\u7684\u6811\u662ft1\uff0ct2\u4f1a\u53d8\u4e3a\u7a7a\u6811\n{\n    if (t1 == nil)\n        swap(t1, t2);\n\n    splay(inf, t1);\n    t1->ch[1] = t2;\n    t2 = nil;\n    t1->pullup();\n}\nvoid insert(int v, node *&t = root)\n{\n    node *t2 = split(v, t);\n    if (t->val == v)\n        t->cnt++;\n    else\n    {\n        node *nd = new node(v);\n        merge(t, nd);\n    }\n    merge(t, t2);\n}\nvoid erase(int v, node *&t = root)\n{\n    node *t2 = split(v, t);\n    if (t->val == v && --(t->cnt) < 1) // \u547d\u4e2d\u8282\u70b9\uff0c\u8ba1\u6570\u5148\u51cf\u4e00\uff0c\u518d\u5224\u65ad\u662f\u5426\u8981\u5c06\u8282\u70b9\u5220\u9664\n    {\n        node *t3 = t->ch[0];\n        delete t;\n        t = t3;\n    }\n    merge(t, t2);\n}\nint getrank(int v, node *&t = root)\n{\n    splay(v, t);\n    return t->ch[0]->size + 1;\n}\nint getkth(int k, node *&t = root)\n{\n    splaykth(k, t);\n    return t->val;\n}\nint lower(int v, node *&t = root) // \u524d\u9a71\n{\n    splay(v, t);\n    if (t->val >= v) // \u6839\u662fX\u6216\u662fX\u7684\u540e\u9a71\n    {\n        if (t->ch[0] == nil)\n            return -inf;\n        splay(inf, t->ch[0]); // \u76f8\u5f53\u4e8e\u4f38\u5c55\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\n        return t->ch[0]->val;\n    }\n    else\n        return t->val;\n}\nint upper(int v, node *&t = root) // \u540e\u9a71\n{\n    splay(v, t);\n    if (t->val <= v) // \u6839\u662fX\u6216\u662fX\u7684\u524d\u9a71\n    {\n        if (t->ch[1] == nil)\n            return inf;\n        splay(-inf, t->ch[1]); // \u76f8\u5f53\u4e8e\u4f38\u5c55\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\n        return t->ch[1]->val;\n    }\n    else\n        return t->val;\n}\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    splay::init();\n    int n, opt, x;\n    cin >> n;\n    while (n--)\n    {\n        cin >> opt >> x;\n        switch (opt)\n        {\n        case 1:\n            splay::insert(x);\n            break;\n        case 2:\n            splay::erase(x);\n            break;\n        case 3:\n            cout << splay::getrank(x) << endl;\n            break;\n        case 4:\n            cout << splay::getkth(x) << endl;\n            break;\n        case 5:\n            cout << splay::lower(x) << endl;\n            break;\n        case 6:\n            cout << splay::upper(x) << endl;\n            break;\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1512300155,
        "uid": 22890,
        "name": "huangwenlong",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u5728luogu\u590f\u4ee4\u8425\u5b66\u4f1a\u4e86\u4e00\u4e2a\u65b0\u7684\u9a9a\u73a9\u610f\uff0cddd\u6559\u7684\uff0c\u4f46\u662f\u540d\u5b57\u6709\u5f88\u591a\uff0czcy\u53eb\u5b83finger_tree,lxl\u6bd2\u7624\u53eb\u5b83\u5e73\u8861\u7ebf\u6bb5\u6811\uff0c\u5176\u4ed6\u6709\u4e9b\u4eba\u53eb\u5b83\u5b97\u6cd5\u6811\uff0c\u53cd\u6b63\u53c8\u53ef\u4ee5\u5f53\u53ef\u5e76\u5806\uff0c\u53c8\u53ef\u4ee5\u5f53\u5e73\u8861\u6811\uff0c\u53c8\u50cf\u4e00\u9897\u7ebf\u6bb5\u6811\u3002\u4e0e\u7ebf\u6bb5\u6811\u76f8\u540c\u7684\u90e8\u5206\u5c31\u662f\u4ed6\u7684**\u8282\u70b9**\u5b58\u7684\u662f\u4e24\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u4e00\u4e2a\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u7528\u6765\u5f53\u5806\u3002\u8c03\u6574\u5e73\u8861\u53ef\u4ee5\u7528\u65cb\u8f6c\u4e5f\u53ef\u4ee5\u62cd\u6241\u91cd\u6784\u3002\u6211\u8fd9\u91cc\u5199\u7684\u662f\u65cb\u8f6c\uff0c\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u548c\u6ce8\u91ca\u3002\n\n2018/5/7 update\n\n\u5728\u5b66\u4e60\u4e86\u5176\u4ed6\u66f4\u591a\u5e73\u8861\u6811\u540e\uff0c\u6211\u624b\u52a8\u6a21\u62df\u4e86\u4e00\u4e0b\u5b83\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u53d1\u73b0\u5b83\u7684\u590d\u6742\u5ea6\u8bc1\u660e\u5e94\u8be5\u7c7b\u4f3c\u4e8eSBT\uff0c\u56e0\u4e3a\u5b83\u8fd9\u79cd\u5e73\u8861\u8c8c\u4f3c\u80fd\u59cb\u7ec8\u4fdd\u6301\u5728log(n) + 4 \u7684\u8fd9\u79cd\u7ea7\u522b\u3002\u3002\u4f46\u662f\u7531\u4e8e\u5b83\u5728\u975e\u53f6\u5b50\u60c5\u51b5\u4e0b\u6709\u5de6\u53f3\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u7701\u53bb\u4e86\u5927\u91cf\u7684\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u6b64\u975e\u5e38\u597d\u5199\u3002\u3002\u3002\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 300006\nusing namespace std;\nstruct Node\n{\n    int val,size;\n    Node *ls,*rs;\n    void pushup()\n    {\n        if(ls==NULL)return ;\n        size = ls->size + rs->size;\n        val = rs->val;\n    }//\u4e0e\u7ebf\u6bb5\u6811\u540c\u6837\u5177\u6709pushup\n    Node(int v,int s,Node *l,Node *r):val(v),size(s),ls(l),rs(r){}\t\n    Node(){}\n}pool[MAXN];\nint cnt = 0;\nNode *root = NULL;\nNode *NewNode(int val,int size,Node *ls,Node *rs)\n{\n    pool[cnt] = Node(val,size,ls,rs);\n    return &pool[cnt++];//\u8282\u70b9\u6c60\u5efa\u65b0\u70b9\uff0cnew,delete\u592a\u6162\n}\nint find(int k,Node *rt)\n{\n    if(rt->size == 1)return rt->val;\n    if(k<=rt->ls->size)return find(k,rt->ls);\n    else return find(k-rt->ls->size,rt->rs);//\u627e\u6392\u540d\u4e3ak\u7684\u70b9\u3002\n}\nint Rank(int x,Node *rt)//\u627e\u4e00\u4e2a\u70b9\u7684\u6392\u540d\uff0c\u56e0\u4e3a\u6839\u8282\u70b9\u5b58\u7684\u662f\u4e24\u4e2a\u5b50\u6811\u4e2d\u5927\u7684\u4e00\u4e2a\uff0c\u4e5f\u5c31\u662f\u53f3\u5b50\u6811\u7684\u503c\uff0c\u6240\u4ee5\u8981\u4e0e\u5de6\u5b50\u6811\u6bd4\u8f83\n{\n    if(rt->size == 1)\n    {\n        return 1;\n    }\n    else \n    {\n        if(x<=rt->ls->val){\n            return Rank(x,rt->ls);\n        }\n        else{\n            return Rank(x,rt->rs)+rt->ls->size;\n        }\n    }\t\n}\ninline void maintain(Node *rt)//\u65cb\u8f6c\uff0c\u5e73\u8861\u7cfb\u6570\u8bbe\u4e3a4\u500d\u65f6\u65cb\u8f6c\n{\n    if(rt->ls->size>rt->rs->size*4)\n    {\n        rt->rs = NewNode(rt->rs->val,rt->ls->rs->size+rt->rs->size,rt->ls->rs,rt->rs);\n        Node *tmp = rt->ls;rt->ls = rt->ls->ls;*tmp = *rt->rs;rt->rs = tmp;//\u5783\u573e\u56de\u6536\uff0c\u4e0b\u9762\u540c\u7406\n        cnt--;\n    }\n    else if(rt->ls->size*4<rt->rs->size)\n    {\n        rt->ls = NewNode(rt->rs->ls->val,rt->rs->ls->size+rt->ls->size,rt->ls,rt->rs->ls);\n        Node *tmp = rt->rs;rt->rs = rt->rs->rs;*tmp = *rt->ls;rt->ls = tmp;\n        cnt--;\n    }\n}\nvoid ins(int val,Node *&rt)//\u63d2\u5165\uff0c\u540c\u65f6\u5411\u4e0apushup\u4f7f\u5f97\u5176\u6ee1\u8db3\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u90a3\u4e2a\u6027\u8d28\n{\n    if(rt == NULL){rt = NewNode(val,1,NULL,NULL);return ;}\n    if(rt->size == 1)\n    {\n        rt->ls = NewNode(min(val,rt->val),1,NULL,NULL);\n        rt->rs = NewNode(max(val,rt->val),1,NULL,NULL);\n    }\n    else \n    {\n        if(val>rt->ls->val)ins(val,rt->rs);\n        else ins(val,rt->ls);\n    }\n    rt->pushup();\n    maintain(rt);\n}\nvoid del(Node *rt,Node *fa,int val)//\u5220\u9664\uff0c\u76f4\u63a5\u8dd1\u5230\u6700\u540e\u4e00\u5c42\uff0c\u5c06\u53e6\u4e00\u4e2a\u5b50\u6811\u63d0\u4e0a\u6765\u505a\u7236\u4eb2\uff0c\u540c\u65f6\u5411\u4e0apushup,\u8fd9\u5c31\u662f\u4e3a\u5565\u5f88\u591a\u4eba\u53eb\u5b83\u5b97\u6cd5\u6811,\u5144\u5f1f\u505a\u7236\u4eb22333\uff0c\u7c7b\u4f3c\u7ee7\u4f4d\n{\n    if(rt->size == 1)\n    *fa = fa->ls->val == val?*fa->rs:*fa->ls; \n    else\n    {\n        if(val<=rt->ls->val)del(rt->ls,rt,val);\n        else del(rt->rs,rt,val);\n    }\n    rt->pushup();\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    root = NewNode(2147483647,1,NULL,NULL);\n    for(int i = 1; i <= n; i++)\n    {\n        int  opt,x;\n        scanf(\"%d %d\",&opt,&x);\n        if(opt == 1)ins(x,root);\n        if(opt == 2)del(root,NULL,x);\n        if(opt == 3)printf(\"%d\\n\",Rank(x,root));\n        if(opt == 4)printf(\"%d\\n\",find(x,root));\n        if(opt == 5)printf(\"%d\\n\",find(Rank(x,root)-1,root));\n        if(opt == 6)printf(\"%d\\n\",find(Rank(x+1,root),root));\n    }\n}```\n",
        "postTime": 1519369411,
        "uid": 52576,
        "name": "moye\u5230\u7897\u91cc\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "### STL\u771f\u662f\u4e2a\u597d\u4e1c\u897f\u3002\n\n\u6700\u8fd1\u5728\u770bpb_ds\u5e93\u53cavector\u548cset\u7684\u7528\u6cd5\uff0c\u5c31\u60f3\u7528\u8fd9\u4e09\u79cd\u64cd\u4f5c\u6765\u5b9e\u73b0\u4e00\u4e0b\u666e\u901a\u5e73\u8861\u6811\uff0c\u7ed3\u679cpb_ds\u4e2d\u7684rbtree\u4e0d\u652f\u6301\u91cd\u590d\u503c\uff0c\u800c\u672c\u849f\u84bb\u4e5f\u770b\u4e0d\u61c2\u4e0d\u61c2\u5404\u5927\u4f6c\u7528pb_ds\u7684\u5b9e\u73b0\uff0c\u51b5\u4e14\u5e94\u8be5\u6709\u4eba\u5df2\u7ecf\u8d34\u4e0a\u4e86\u9898\u89e3\u3002\u6211\u5c31\u53d1\u4e00\u53d1vector\u548cset\uff08\u5176\u5b9e\u662fmultiset\uff09\u7684\u9898\u89e3\u5427\u3002~~\uff08\u53ea\u4e0d\u8fc7\u849f\u84bb\u7684\u6211\u6211\u6839\u672c\u4e0d\u4f1a\u6253splay\uff09~~\n\n\u4ee3\u7801\u90fd\u5f88\u77ed\uff0c\u64cd\u4f5c\u5176\u5b9e\u4e5f\u5f88\u57fa\u7840\u3002\n\n\n------------\n\n#### vector\u7248\uff1a \n\n- \u4f60\u8981\u77e5\u9053\uff1a\n    \n    - lower_bound(first,last,x)\u5728first\u548clast\u4e2d\u7684\u524d\u95ed\u540e\u5f00\u533a\u95f4\u8fdb\u884c\u67e5\u627e\uff0c\u5176\u4e2d\u5982\u679c\u5bfb\u627e\u7684x\u5b58\u5728\uff0c\u90a3\u4e48lower_bound\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u6307\u5411\u5176\u4e2d**\u7b2c\u4e00\u4e2a**x\u5143\u7d20\u3002\n    \n      \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)\n      \n    -  upper_bound(first,last,x)\u5728first\u548clast\u4e2d\u7684\u524d\u95ed\u540e\u5f00\u533a\u95f4\u8fdb\u884c\u67e5\u627e\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u6307\u5411\u6700\u540e\u4e00\u4e2ax\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff08\u5c31\u662f\u8bf4\u8fd4\u56de\u5728\u4fdd\u6301\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u63d2\u5165x\u7684**\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e**\u6216\u8005\u8bf4\u5c31\u662f\u8fd4\u56dex\u7684\u540e\u7ee7\uff09\n    \n        \u65f6\u95f4\u590d\u6742\u5ea6:O(logN)\n        \n    -  vector.insert(pos,x)\u5728pos\u5904\u63d2\u5165\u4e00\u4e2ax\n    \n       vector.erase(pos,x)\u5728\u5220\u9664pos\u5904\u7684x\n    \n        \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u8fd9\u4e2a\u4e0d\u592a\u6e05\u695a\uff0c\u8c8c\u4f3c\u662fO(N)\n        \n  \u7136\u540e\u4f60\u5c31\u80fd\u770b\u61c2\u4e0b\u9762\u7684\u4ee3\u7801\u4e86\n  \n  \n  ```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cctype>\nusing namespace std;\nvector <int>a;\nint read()\n{\n\tint x=0;char ch;short int neg=0;ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tneg|=(ch=='-');ch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=x*10+ch-48;ch=getchar();\n\t}\n\treturn neg?-x:x;\n}\nint main()\n{\n\tint n,op;\n\tcin>>n;\n\twhile(n--)\n\t{\n\t\tcin>>op;\n\t\tregister int x=read();\n        switch(op){ \n  case(1):a.insert(upper_bound(a.begin(),a.end(),x),x);break;\n  case(2):a.erase(lower_bound(a.begin(),a.end(),x));break;\n  case(3): cout<<lower_bound(a.begin(),a.end(),x)-a.begin()+1<<endl;break;\n  case(4): cout<<a[x-1]<<endl;break;\n  case(5): cout<<*--lower_bound(a.begin(),a.end(),x)<<endl;break;\n  case(6): cout<<*upper_bound(a.begin(),a.end(),x)<<endl;break;\n       }\n\t}\n\treturn 0;\n}\n```\n\u53ef\u4ee5\u770b\u51fa,\u6211\u4eec\u662f\u6709\u5e8f\u5730\u52a0\u5165\u5143\u7d20\uff0cvector\u672c\u8eab\u4e5f\u662f\u6709\u5e8f\u7684\n  \n\u5f00O2\u8dd1\u5f97~~\u6bd4\u9999\u6e2f\u8bb0\u8005\u8fd8~~\u5feb\uff0c\u4e0d\u5f00O2\u597d\u50cf\u6700\u6162\u7684300\u591ams\n\n\n\n------------\n\n#### set\u7248\uff1a\n\n  C++ STL\u4e2d\u7684set\u597d\u50cf\u662f\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u652f\u6301\u91cd\u590d\u5143\u7d20,\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u7528multiset,\u7136\u800c\u7528multiset(\u5176\u5b9eset\u4e5f\u662f)\u641e\u6392\u540d\u4e4b\u7c7b\u7684\u5c31\u597d\u590d\u6742\u4e86......\u770b\u7f51\u4e0a\u8bf4\u597d\u50cf\u662fSTL\u4e2d\u7684\u7ea2\u9ed1\u6811\u5e76\u6ca1\u6709\u7ef4\u62a4\u4ec0\u4e48size\u57df\uff0c\u6211\u4e5f\u4e0d\u592a\u61c2\u3002\n  \n - \u4f60\u8981\u77e5\u9053\uff1a\n \n    - insert\u548cerase\u548c\u4e0a\u9762\u57fa\u672c\u4e00\u6837\u7684\n    \n    - distance(pos1,pos2)\u8fd4\u56de\u4e00\u4e2aint\u503c\u4e3apos1\u4e0epos2\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0cpos1,pos2\u4e3a\u6307\u5411\u540c\u4e00\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\u3002\n    \n      \u65f6\u95f4\u590d\u6742\u5ea6:O(N)\n    \n    - advance(pos,k)\u4e00\u4e2avoid\u7684\u51fd\u6570\uff0c\u8ba9pos\u8fd9\u4e2a\u8fed\u4ee3\u5668\u524d\u8fdbk\u6b65\n    \n      \u65f6\u95f4\u590d\u6742\u5ea6:O(N)\n    -  set.equal_range(x),\u5b83\u8fd4\u56de\u7684\u4e00\u961f\u8fed\u4ee3\u5668\uff0c\u56e0\u6b64\u662fpair\u7c7b\u578b,\u5b9a\u4e49\u65f6\u9700\u6ce8\u610f\u3002\n    \n       \u5177\u4f53\u7528\u6cd5\u8be6\u89c1\u8fd9\uff1a http://blog.csdn.net/zhongguoren666/article/details/8463249\n       \n       \u65f6\u95f4\u590d\u6742\u5ea6:O(logN)\n      \n    \u7531\u4e8e\u4e0a\u9762\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ee5\u53ca\u5e38\u6570\u8f83\u5927\uff0c\u7528set\u5f00O2\u4f9d\u65e7\u4f1aT\u6389\u51e0\u4e2a\u70b9\uff0c\u6211\u8fd9\u4e2a\u4ee3\u7801\u5728O2\u4f18\u5316\u65f6\u8fd8\u4f1a\u7384\u5b66WA\u4e86\u4e00\u4e2a\uff0c\u6211\u4e5f\u4e0d\u6e05\u695a\u4e3a\u4ec0\u4e48\uff0c\u4e0d\u77e5\u9053\u6709\u6ca1\u6709dalao\u641e\u4e00\u4e2a\u66f4\u4f18\u7684set\u505a\u6cd5\n    \n  ```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#include <set>\n#include <cctype>\nusing namespace std;\nmultiset <int>a;\nint read()\n{\n\tint x=0;char ch;short int neg=0;ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tneg|=(ch=='-');ch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=x*10+ch-48;ch=getchar();\n\t}\n\treturn neg?-x:x;\n}\nint main()\n{\n\tint n,op;\n\tcin>>n;\n\twhile(n--)\n\t{\n\t\tcin>>op;\n\t\tregister int x=read();\n      if(op==1)a.insert(upper_bound(a.begin(),a.end(),x),x);\n      else if(op==2)a.erase(lower_bound(a.begin(),a.end(),x));\n      else if(op==3)cout<<distance(a.begin(),a.upper_bound(x))<<endl;\n      else if(op==4)\n              {multiset<int>::iterator it =a.begin();\n               //int k=distance(a.begin(),a+x);\n               advance(it,x-1); cout<<' '<<*it<<endl;}\n      else if(op==5) cout<<*--lower_bound(a.begin(),a.end(),x)<<endl;\n      else { pair<multiset<int>::const_iterator,multiset<int>::const_iterator> it;\n\t\t       it=a.equal_range(x);cout<<*it.second<<endl;}//cout<<*upper_bound(a.begin(),a.end(),x)<<endl;   \n\t}\n\treturn 0;\n}\n```\n\n\u5f53\u7136\uff0cSTL\u4e0d\u4f1a\u652f\u6301\u66f4\u591a\u53d8\u5f0f\u64cd\u4f5c\u51b5\u4e14\u73b0\u5728\u88f8\u9898\u4e5f\u8d8a\u6765\u8d8a\u5c11\uff0c\u4f46\u5b83\u7528\u6765\u4f18\u5316\u67d0\u4e9b\u4e1c\u897f\u6216\u662f\u5bf9\u62cd\u8fd8\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\n\n\u672c\u849f\u84bb\u4e5f\u8981\u5f00\u59cb\u5b66splay\u4e86",
        "postTime": 1519268646,
        "uid": 61382,
        "name": "Rye_Catcher",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\n\u4f38\u5c55\u6811\uff08\u82f1\u8bed\uff1aSplay Tree\uff09\u662f\u4e00\u79cd\u80fd\u591f**\u81ea\u6211\u5e73\u8861**\u7684\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5b83\u80fd\u5728\u5747\u644aO(log n)\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u57fa\u4e8e\u4f38\u5c55\uff08Splay\uff09\u64cd\u4f5c\u7684\u63d2\u5165\u3001\u67e5\u627e\u3001\u4fee\u6539\u548c\u5220\u9664\u64cd\u4f5c\u3002\n\n# \u5b9a\u4e49\n\n## \u8282\u70b9\n\nnode.v\uff1a\u8282\u70b9node\u7684\u503c\n\nnode.father\uff1a\u8282\u70b9node\u7684\u7236\u8282\u70b9\n\nnode.ch[0]\u4e0enode.ch[1]\uff1a\u8282\u70b9node\u7684\u5de6\u5b50\u8282\u70b9\u4e0e\u53f3\u5b50\u8282\u70b9\n\nnode.size\uff1a\u4ee5\u8282\u70b9node\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u8282\u70b9\u603b\u6570\n\nnode.cnt\uff1a\u6570\u503c\u4e0e\u8282\u70b9node\u76f8\u540c\u7684\u8282\u70b9\u7684\u6570\u91cf\uff08\u90fd\u50a8\u5b58\u5728\u8282\u70b9node\u4e2d\uff09\n\n\u4ee3\u7801\uff1a\n```cpp\nclass Node {\npublic:\n    int v, father, ch[2], size, cnt;\n\n    Node(int v = 0, int father = 0, int size = 0, int cnt = 0):v(v), father(father), size(size), cnt(cnt) {\n        ch[0] = ch[1] = 0;\n    }\n};\n```\n\n## \u6811\n\nroot\uff1a\u6839\u8282\u70b9\n\ncnt\uff1a\u603b\u7ed3\u70b9\u6570\n\n```cpp\nNode node[MAXN];\nint root = 0, cnt = 0;\n```\n\n# \u64cd\u4f5c\n\n## \u57fa\u672c\u64cd\u4f5c\n\n### pushup\n\npushup()\u51fd\u6570\uff1a**\u66f4\u65b0**\u8282\u70b9p\u7684size\u503c\n\n```cpp\nvoid pushup(int p) {\n    node[p].size = node[node[p].ch[0]].size + node[p].cnt + node[node[p].ch[1]].size; //\u8282\u70b9\u6570 = \u5de6\u5b50\u6811\u8282\u70b9\u6570 + \u672c\u8eab\u7684\u8282\u70b9\u6570 + \u53f3\u5b50\u6811\u8282\u70b9\u6570\n}\n```\n---\n\n### check\n\ncheck()\u51fd\u6570\uff1a\u8be2\u95ee\u8282\u70b9p\u662f\u5176\u7236\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u8fd8\u662f\u53f3\u5b50\u8282\u70b9\n\n```cpp\nint check(int p) {\n    return node[node[p].father].ch[0] == p ? 0 : 1; //0\u4ee3\u8868\u5de6\u5b50\u8282\u70b9\uff0c1\u4ee3\u8868\u53f3\u5b50\u8282\u70b9\n}\n```\n---\n\n### connect\n\nconnect()\u51fd\u6570\uff1a\u5c06\u8282\u70b9x\u8fde\u63a5\u4e3a\u8282\u70b9f\u7684\u5b50\u8282\u70b9\uff0c\u65b9\u5411\u4e3ad (d = 0, 1\uff0c\u540c\u4e0a)\n\n```cpp\nvoid connect(int x, int f, int d) {\n    node[f].ch[d] = x; //\u5c06\u8282\u70b9f\u7684\u5b50\u8282\u70b9\u8bbe\u7f6e\u4e3ax\n    node[x].father = f; //\u5c06\u8282\u70b9x\u7684\u7236\u8282\u70b9\u8bbe\u7f6e\u4e3af\n}\n```\n\n## \u65cb\u8f6c\n\n### rotate\n\n\u65cb\u8f6c\u662f\u5e73\u8861\u6811\u6700\u4e3b\u8981\u7684\u64cd\u4f5c\uff0c\u5176\u672c\u8d28\u5728\u4e8e\uff0c\u6bcf\u6b21\u8fdb\u884c\u65cb\u8f6c\u65f6\uff0c\u5de6\u53f3\u5b50\u6811\u5f53\u4e2d\u4e4b\u4e00\u9ad8\u5ea6 -1\uff0c\u53e6\u5916\u4e00\u68f5\u9ad8\u5ea6 +1\uff0c\u4ee5\u8fbe\u5230\u5e73\u8861\u7684\u76ee\u7684\u3002\n\n\u5de6\u65cb\uff1a\n\n\u7b2c\u4e00\u6b21\u8fde\u8fb9\uff0c\u8282\u70b9x\u7684\u5b50\u8282\u70b9\u6210\u4e3ax\u7684\u7236\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\n\n\u7b2c\u4e8c\u6b21\u8fde\u8fb9\uff0c\u8282\u70b9x\u6210\u4e3a\u8282\u70b9x\u7684\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u65b9\u5411\u4e0ex\u7684\u7236\u8282\u70b9\u76f8\u540c\n\n\u7b2c\u4e09\u6b21\u8fde\u8fb9\uff0c\u8282\u70b9x\u7684\u7236\u8282\u70b9\u6210\u4e3a\u8282\u70b9x\u7684\u5de6\u5b50\u8282\u70b9\n\n![](https://keepthethink.github.io/images/left_rotate.jpg)\n\n\u53f3\u65cb\uff1a\n\n\u7b2c\u4e00\u6b21\u8fde\u8fb9\uff0c\u8282\u70b9x\u7684\u5b50\u8282\u70b9\u6210\u4e3ax\u7684\u7236\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\n\n\u7b2c\u4e8c\u6b21\u8fde\u8fb9\uff0c\u8282\u70b9x\u6210\u4e3a\u8282\u70b9x\u7684\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u65b9\u5411\u4e0ex\u7684\u7236\u8282\u70b9\u76f8\u540c\n\n\u7b2c\u4e09\u6b21\u8fde\u8fb9\uff0c\u8282\u70b9x\u7684\u7236\u8282\u70b9\u6210\u4e3a\u8282\u70b9x\u7684\u53f3\u5b50\u8282\u70b9\n\n![](https://keepthethink.github.io/images/right_rotate.jpg)\n\n\u65cb\u8f6c\u64cd\u4f5c\u53ea\u4e0e\u6807\u4e3a\u7ea2\uff0c\u84dd\uff0c\u7eff\u7684\u4e09\u4e2a\u90e8\u5206\u6709\u5173\u3002\n\n```cpp\nvoid rotate(int x) {\n    int y = node[x].father, z = node[y].father, d = check(x), w = node[x].ch[d ^ 1]; //w\u5224\u65ad\u5e94\u8be5\u5de6\u65cb\u8fd8\u662f\u53f3\u65cb\n    connect(w, y, d); //\u7b2c\u4e00\u6b21\u8fde\u8fb9\uff0c\u8282\u70b9x\u7684\u5b50\u8282\u70b9\u8fde\u63a5\u5230x\u7684\u7236\u8282\u70b9\uff0c\u65b9\u5411\u4e0e\u8282\u70b9x\u76f8\u540c\n    connect(x, z, check(y)); //\u7b2c\u4e8c\u6b21\u8fde\u8fb9\uff0c\u8282\u70b9x\u8fde\u63a5\u5230\u8282\u70b9x\u7684\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u65b9\u5411\u4e0ex\u7684\u7236\u8282\u70b9\u76f8\u540c\n    connect(y, x, d ^ 1); //\u7b2c\u4e09\u6b21\u8fde\u8fb9\uff0c\u8282\u70b9x\u7684\u7236\u8282\u70b9\u8fde\u63a5\u5230\u8282\u70b9x\uff0c\u65b9\u5411\u4e0e\u8282\u70b9x\u539f\u5148\u7684\u65b9\u5411\u76f8\u53cd\n    pushup(y); //\u66f4\u65b0\u5b50\u6811\n    pushup(x); //\u66f4\u65b0\u5b50\u6811\n}\n```\n\n## \u4f38\u5c55\n\n### splay\n\nSplay\u64cd\u4f5c\uff1a\u5c06\u8282\u70b9x\u65cb\u8f6c\u5230\u8282\u70b9dist\u7684\u5b50\u8282\u70b9\u3002\u901a\u5e38\u662f\u5c06\u8be5\u8282\u70b9\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e94\u5f53\u5c06root\u7f6e\u4e3ax\n\n\u6700\u6734\u7d20\u7684\u60f3\u6cd5\uff1a\u53ea\u8981\u7236\u8282\u70b9\u4e0d\u662fdist\u5c31\u4e00\u76f4\u65cb\u8f6c\u8be5\u8282\u70b9\uff0c\u4f46\u8fd9\u6837\u5f88\u5bb9\u6613\u88ab\u67d0\u4e9b\u673a\uff08wu\uff09\u667a\uff08liang\uff09\u51fa\u9898\u4eba\u5361\u3002\n\n```cpp\nvoid splay(int x, int dist = 0) {\n    while(node[x].father != dist) {\n        rotate(x);\n    }\n    if(dist == 0) {\n        root = x;\n    }\n}\n```\n\n\u6240\u4ee5\uff0c\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u901a\u5e38\u4f1a\u9884\u5224\u8282\u70b9x\u7684\u7236\u8282\u70b9\u7684\u65b9\u5411\uff0c\u82e5\u65b9\u5411\u4e00\u81f4\u5219\u65cb\u8f6c\u5176\u7236\u8282\u70b9\uff0c\u51cf\u5c11\u88ab\u5361\u7684\u53ef\u80fd\u6027\u3002~~\u591a\u4e48\u5996\u5a06~~\n\n```cpp\nvoid splay(int x, int dist = 0) {\n    for(int f = node[x].father; f = node[x].father, f != dist; rotate(x)) {\n        if(node[f].father != dist) {\n            if(check(x) == check(f)) {\n                rotate(f); //\u65b9\u5411\u4e00\u81f4\u5219\u65cb\u8f6cx\u7684\u7236\u8282\u70b9\n            } else {\n                rotate(x); //\u65b9\u5411\u4e0d\u4e00\u81f4\u5219\u65cb\u8f6cx\n            }\n        }\n    }\n    if(dist == 0) {\n        root = x;\n    }\n}\n```\n\n## \u67e5\u627e\n\n### find\n\n\u67e5\u627e\u503c\u4e3ax\u7684\u8282\u70b9\uff0c\u627e\u5230\u540e\u5c06\u5176\u7f6e\u4e3aroot\u4ee5\u4fbf\u64cd\u4f5c\u3002\n\nfind\u64cd\u4f5c\u7684\u610f\u4e49\u5728\u4e8e\u5c06\u503c\u4e3ax\u7684\u8282\u70b9\u4f38\u5c55\uff08splay\uff09\u5230\u6839\uff0c\u5728\u4e0d\u5b58\u5728\u503c\u4e3ax\u7684\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u5c06\u5c0f\u4e8ex\u7684\u8282\u70b9\u4e2d\u6700\u5927\u7684\u8282\u70b9\u4f38\u5c55\uff08splay\uff09\u5230\u6839\u3002\n\n```cpp\nvoid find(int x) {\n    int cur = root;\n    while(node[cur].ch[x > node[cur].v] != 0 && x != node[cur].v) {\n        cur = node[cur].ch[x > node[cur].v]; //\u67e5\u627e\u503c\u4e3ax\u7684\u8282\u70b9\n    }\n    splay(cur);\n}\n```\n\n## \u516c\u5171\u64cd\u4f5c\n\n\u5982\u679c\u5c06\u672c\u6587\u8bb2\u7684Splay\u6253\u5305\u6210\u4e00\u4e2aclass\uff0c\u5219\u524d\u6587\u6240\u8ff0\u7684\u64cd\u4f5c\u5e94\u5305\u542b\u5728private\u4e2d\uff0c\u672c\u8282\u6240\u8ff0\u7684\u64cd\u4f5c\u5e94\u5305\u542b\u5728public\u4e2d\u3002\n\n### insert\n\nSplay\u4e2d\u7684insert\u5176\u5b9e\u4e0e\u6734\u7d20BST\u4e2d\u7684insert\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u4f46\u82e5\u76f4\u63a5\u63d2\u5165\u53ef\u80fd\u5bfc\u81f4\u6811\u9000\u5316\u4e3a\u94fe\uff0c\u6240\u4ee5\u8981\u5728\u672b\u5c3e\u5904\u8c03\u7528\u4e00\u6b21splay()\u51fd\u6570\uff0c\u4f7fSplay\u6811\u4fdd\u6301\u5e73\u8861\u3002\n\n```cpp\nvoid insert(int x) {\n    int cur = root, p = 0;\n    while(cur != 0 && node[cur].v != x) {\n        p = cur;\n        cur = node[cur].ch[x < node[cur].v ? 0 : 1];\n    }\n    if(cur != 0) {\n        node[cur].cnt++;\n    } else {\n        cur = ++cnt;\n        if(p != 0) {\n            node[p].ch[x <= node[p].v ? 0 : 1] = cur;\n        }\n        node[cur] = Node(x, p, 1, 1);\n    }\n    splay(cur);\n}\n```\n\n### serial\n\nserial\u64cd\u4f5c\uff1a\u67e5\u8be2\u503c\u4e3ax\u7684\u8282\u70b9\uff0c\u5728find\u64cd\u4f5c\u7684\u57fa\u7840\u4e0a\uff0cserial\u53ea\u9700\u8981\u5728find\u8fc7\u540e\u8f93\u51fa\u5de6\u5b50\u6811\u8282\u70b9\u6570\u91cf\u5373\u53ef\u3002\n\n```cpp\nint serial(int x) {\n    find(x);\n    return node[node[root].ch[0]].size\n}\n```\n\n### pre\n\n\u627e\u51fa\u503c\u4e3ax\u7684\u8282\u70b9\u7684\u524d\u9a71\uff0c\u5c06\u8282\u70b9splay\u5230root\u540e\u5728\u5de6\u5b50\u6811\u67e5\u627e\u6700\u5927\u503c\u5373\u53ef\u3002\n\n```cpp\nint pre(int x) {\n    find(x);\n    if(node[root].v < x) {\n        return root;\n    }\n    int cur = node[root].ch[0];\n    while(node[cur].ch[1] != 0) {\n        cur = node[cur].ch[1];\n    }\n    return cur;\n}\n```\n\n### suc\n\n\u627e\u51fa\u503c\u4e3ax\u7684\u70b9\u7684\u540e\u7ee7\uff0c\u4e0e\u524d\u9a71\u540c\u7406\u3002\n\n```cpp\nint suc(int x) {\n    find(x);\n    if(node[root].v > x) {\n        return root;\n    }\n    int cur = node[root].ch[1];\n    while(node[cur].ch[0] != 0) {\n        cur = node[cur].ch[0];\n    }\n    return cur;\n}\n```\n\n### remove\n\n\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u3002\n\n\u5220\u9664\u8f83\u4e3a\u590d\u6742\uff0c\u5206\u56db\u6b65\u6765\u5b8c\u6210\uff1a\n\n1. \u5b9a\u4e49last\u4e3a\u8282\u70b9\u7684\u524d\u9a71\uff0cnext\u4e3a\u8282\u70b9\u7684\u540e\u7ee7\u3002\n2. \u5c06last\u8282\u70b9splay\u5230root\uff0c\u8fd9\u65f6last\u7684\u5de6\u5b50\u6811\u7686\u5c0f\u4e8ex\n3. \u5c06next\u8282\u70b9splay\u5230last\u7684\u5b50\u8282\u53f3\u70b9\uff0c\u6b64\u65f6next\u7684\u53f3\u5b50\u6811\u7686\u5927\u4e8ex\n4. next\u7684\u5de6\u8282\u70b9rm\u5fc5\u7136\u6ee1\u8db3 last < rm < next\uff0c\u5220\u9664rm\u5373\u53ef\n\n```cpp\nvoid remove(int x) {\n    int last = pre(x), next = suc(x);\n    splay(last);\n    splay(next, last);\n    int rm = node[next].ch[0];\n    if(node[rm].cnt > 1) {\n        node[rm].cnt--;\n        splay(rm);\n    } else {\n        node[next].ch[0] = 0;\n        pushup(next);\n        pushup(root);\n    }\n}\n```\n\n### rank\n\n\u67e5\u627e\u6392\u540d\u4e3ak\u7684\u8282\u70b9\n\n\u7528\u4e00\u4e2a\u6307\u9488cur\u4eceroot\u5f00\u59cb\u67e5\u627e\uff0c\u6bcf\u6b21\u6839\u636e\u5de6\u5b50\u6811\u5927\u5c0f\u4e8ek\u7684\u5173\u7cfb\u4fee\u6539cur\u4ee5\u53cak\u3002\n\n```cpp\nint rank(int k) {\n    int cur = root;\n    while(1) {\n        if(node[cur].ch[0] != 0 && k <= node[node[cur].ch[0]].size) {\n            cur = node[cur].ch[0];\n        } else if(k > node[node[cur].ch[0]].size + node[cur].cnt) {\n            k -= node[node[cur].ch[0]].size + node[cur].cnt;\n            cur = node[cur].ch[1];\n        } else {\n            return cur;\n        }\n    }\n}\n```\n\n# \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 200005;\n\nint ch[N][2], par[N], val[N], cnt[N], size[N], ncnt, root;\n\nbool chk(int x) {\n    return ch[par[x]][1] == x;\n}\n\nvoid pushup(int x) {\n    size[x] = size[ch[x][0]] + size[ch[x][1]] + cnt[x];\n}\n\nvoid rotate(int x) {\n    int y = par[x], z = par[y], k = chk(x), w = ch[x][k^1];\n    ch[y][k] = w; par[w] = y;\n    ch[z][chk(y)] = x; par[x] = z;\n    ch[x][k^1] = y; par[y] = x;\n    pushup(y); pushup(x);\n}\n\nvoid splay(int x, int goal = 0) {\n    while (par[x] != goal) {\n        int y = par[x], z = par[y];\n        if (z != goal) {\n            if (chk(x) == chk(y)) rotate(y);\n            else rotate(x);\n        }\n        rotate(x);\n    }\n    if (!goal) root = x;\n}\n\nvoid insert(int x) {\n    int cur = root, p = 0;\n    while (cur && val[cur] != x) {\n        p = cur;\n        cur = ch[cur][x > val[cur]];\n    }\n    if (cur) {\n        cnt[cur]++;\n    } else {\n        cur = ++ncnt;\n        if (p) ch[p][x > val[p]] = cur;\n        ch[cur][0] = ch[cur][1] = 0;\n        par[cur] = p; val[cur] = x;\n        cnt[cur] = size[cur] = 1;\n    }\n    splay(cur);\n}\n\nvoid find(int x) {\n    int cur = root;\n    while (ch[cur][x > val[cur]] && x != val[cur]) {\n        cur = ch[cur][x > val[cur]];\n    }\n    splay(cur);\n}\n\nint kth(int k) {\n    int cur = root;\n    while (1) {\n        if (ch[cur][0] && k <= size[ch[cur][0]]) {\n            cur = ch[cur][0];\n        } else if (k > size[ch[cur][0]] + cnt[cur]) {\n            k -= size[ch[cur][0]] + cnt[cur];\n            cur = ch[cur][1];\n        } else {\n            return cur;\n        }\n    }\n}\n\nint pre(int x) {\n    find(x);\n    if (val[root] < x) return root;\n    int cur = ch[root][0];\n    while (ch[cur][1]) cur = ch[cur][1];\n    return cur;\n}\n\nint succ(int x) {\n    find(x);\n    if (val[root] > x) return root;\n    int cur = ch[root][1];\n    while (ch[cur][0]) cur = ch[cur][0];\n    return cur;\n}\n\nvoid remove(int x) {\n    int last = pre(x), next = succ(x);\n    splay(last); splay(next, last);\n    int del = ch[next][0];\n    if (cnt[del] > 1) {\n        cnt[del]--;\n        splay(del);\n    }\n    else ch[next][0] = 0, pushup(next), pushup(root);\n}\n\nint n, op, x;\n\nint main() {\n    scanf(\"%d\", &n);\n    insert(0x3f3f3f3f);\n    insert(0xcfcfcfcf);\n    while (n--) {\n        scanf(\"%d%d\", &op, &x);\n        switch (op) {\n            case 1: insert(x); break;\n            case 2: remove(x); break;\n            case 3: find(x); printf(\"%d\\n\", size[ch[root][0]]); break;\n            case 4: printf(\"%d\\n\", val[kth(x+1)]); break;\n            case 5: printf(\"%d\\n\", val[pre(x)]); break;\n            case 6: printf(\"%d\\n\", val[succ(x)]); break;\n        }\n    }\n}\n```\n\n# \u53c2\u8003\u8d44\u6599\n\n[\u4f38\u5c55\u6811- \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66](https://zh.wikipedia.org/zh-hans/\u4f38\u5c55\u6811)\n\n[Splay Tree Introduction](https://www.youtube.com/watch?v=IBY4NtxmGg8)",
        "postTime": 1567345275,
        "uid": 132435,
        "name": "\u667a\u5b50",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "~~\u5e73\u8861\u6811\u7684\u6a21\u677f\u9898\u600e\u4e48\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u5199\u5462\uff1f~~\n\n\u672c\u7bc7\u9898\u89e3\u4f7f\u7528**\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811**\uff0c**\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55STL\u548c\u79bb\u7ebf\u7b49\u64cd\u4f5c\u6765\u7ef4\u62a4**\n\n\u4e0d\u4f1a\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u540c\u5b66\u5148\u53bb\u5b66\u4e60\n\n0. \u56e0\u4e3a\u503c\u57df\u8303\u56f4\u662f $[-1e7,1e7]$\uff0c\u64cd\u4f5c\u4e2a\u6570\u662f $1e5$ \uff0c\u6240\u4ee5\u52a0\u5165 `1` \u4e2a\u6570\u6700\u591a\u4f1a\u5f00 $log_22e7$ \u5927\u7ea6 `25` \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u8282\u70b9\u4fe1\u606f\u6570\u7ec4\u5927\u5c0f\u5e94\u5f00\u5230 $25 * 100000 = 2500000$\uff0c\u8fd9\u91cc\u4fdd\u9669\u5f00\u4e86 $3000000=3*10^6$\n\n\u64cd\u4f5c1\u548c2\u8fd9\u91cc\u4e0d\u8bb2\uff0ctoo simple\n\n1. \u64cd\u4f5c `4` \uff1a\u67e5\u8be2\u5f53\u524d\u8282\u70b9\u5185\u7b2c $k$ \u5c0f\u503c\u65f6\uff0c\u5982\u679c $k$ \u5c0f\u4e8e\u7b49\u4e8e\u5de6\u5b50\u6811\u5185\u6570\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u8bf4\u660e\u7b2c $k$ \u5c0f\u6570\u5728\u5de6\u5b50\u6811\u5185\uff0c\u76f4\u63a5\u8fdb\u53bb\uff1b\u5426\u5219\uff0c\u8fd9\u4e2a\u6570\u80af\u5b9a\u5728\u53f3\u5b50\u6811\u5185\u4e86\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u53ea\u8981\u67e5\u8be2\u53f3\u5b50\u6811\u5185\u7684\u7b2c `k - \u5de6\u5b50\u6811\u5185\u6570\u7684\u4e2a\u6570` \u5c0f\u503c\u5c31\u884c\u4e86\n\n2. \u64cd\u4f5c `3` \uff1a\u76f4\u63a5\u67e5\u8be2 $[-1e7,x-1]$ \u8303\u56f4\u5185\u6709\u591a\u5c11\u6570\uff0c$+1$ \u8f93\u51fa\u5c31\u884c\u4e86\n\n3. \u64cd\u4f5c `5` \uff1a\u6211\u4eec\u5148\u67e5\u8be2\u51fa $[-1e7,x-1]$ \u8303\u56f4\u5185\u6709\u591a\u5c11\u6570\uff0c\u8bbe\u4e3a $m$\uff0c\u7136\u540e\u7528\u64cd\u4f5c `4` \u67e5\u8be2\u7b2c `m` \u5c0f\u503c\u5c31\u884c\u4e86\n\n4. \u64cd\u4f5c `6` \uff1a\u548c\u64cd\u4f5c `5` \u7c7b\u4f3c\uff0c\u67e5\u8be2\u51fa $[-1e7,x]$ \u8303\u56f4\u5185\u6709\u591a\u5c11\u6570\uff0c\u8bbe\u4e3a $m$ \uff0c$x$ \u7684\u540e\u7ee7\u7684\u6570\u5f53\u7136\u662f\u7b2c $m+1$ \u5c0f\u6570\uff0c\u6240\u4ee5\u7528\u64cd\u4f5c `4` \u67e5\u8be2\u7b2c $m+1$ \u5c0f\u7684\u6570\u5c31\u884c\u4e86\n\n```cpp\n// This code wrote by chtholly_micromaker(MicroMaker)\n#include <bits/stdc++.h>\n#define reg register\nusing namespace std;\nconst int MaxN=100050;\nconst int MaxTR=3000050;\ntemplate <class t> inline void read(t &s)\t// \u5feb\u8bfb\n{\n\ts=0;\n\treg int f=1;\n\treg char c=getchar();\n\twhile(!isdigit(c))\n\t{\n\t\tif(c=='-')\n\t\t\tf=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\n\t\ts=(s<<3)+(s<<1)+(c^48),c=getchar();\n\ts*=f;\n\treturn;\n}\n#define lson ls[u]\n#define rson rs[u]\nint val[MaxTR],ls[MaxTR],rs[MaxTR];\nint ndcnt=1;\ninline void pushup(int u)\n{\n\tval[u]=val[lson]+val[rson];\n\treturn;\n}\ninline int modify(int &u,int l,int r,int p,int k)\n{\n\tif(!u)\n\t\tu=++ndcnt;\n\tif(l==r)\n\t{\n\t\tval[u]+=k;\n\t\treturn u;\n\t}\n\treg int mid=(l+r)>>1;\n\tif(p<=mid)\n\t\tmodify(lson,l,mid,p,k);\n\telse\n\t\tmodify(rson,mid+1,r,p,k);\n\tpushup(u);\n\treturn u;\n}\ninline int query(int u,int l,int r,int ql,int qr)\n{\n\tif(!u)\n\t\treturn 0;\n\tif(ql<=l&&r<=qr)\n\t\treturn val[u];\n\treg int mid=(l+r)>>1,ans=0;\n\tif(ql<=mid)\n\t\tans+=query(lson,l,mid,ql,qr);\n\tif(mid<qr)\n\t\tans+=query(rson,mid+1,r,ql,qr);\n\treturn ans;\n}\ninline int kth(int u,int l,int r,int k)\n{\n\tif(!u)\n\t\treturn -1;\n\tif(l==r)\n\t\treturn l;\n\treg int mid=(l+r)>>1;\n\tif(k<=val[lson])\n\t\treturn kth(lson,l,mid,k);\n\telse\n\t\treturn kth(rson,mid+1,r,k-val[lson]);\n\treturn -1;\n}\nsigned main(void)\n{\n\tint n;cin>>n;\n\treg int opt,x;\n\treg int rt=1;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tread(opt);read(x);\n\t\tif(opt==1)\n\t\t\tmodify(rt,-1e7,1e7,x,1);\n\t\telse if(opt==2)\n\t\t\tmodify(rt,-1e7,1e7,x,-1);\n\t\telse if(opt==3)\n\t\t\tprintf(\"%d\\n\",query(1,-1e7,1e7,-1e7,x-1)+1);\n\t\telse if(opt==4)\n\t\t\tprintf(\"%d\\n\",kth(1,-1e7,1e7,x));\n\t\telse if(opt==5)\n\t\t{\n\t\t\treg int t=query(1,-1e7,1e7,-1e7,x-1);\n\t\t\tprintf(\"%d\\n\",kth(1,-1e7,1e7,t));\n\t\t}\n\t\telse\n\t\t{\n\t\t\treg int t=query(1,-1e7,1e7,-1e7,x)+1;\n\t\t\tprintf(\"%d\\n\",kth(1,-1e7,1e7,t));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1579356839,
        "uid": 51376,
        "name": "MyukiyoMekya",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "01trie\u662f\u4e2a\u795e\u5947\u7684\u4e1c\u897f\u3002\u3002\u3002\n\n\u5c06\u6bcf\u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u62c6\u5206\u540e\uff08\u9700\u8981\u5148\u52a0\u4e0a1e7\u4f7f\u5f97\u90fd\u662f\u975e\u8d1f\u6574\u6570\uff09\u4ece\u9ad8\u4f4d\u5230\u5730\u4f4d\u63d2\u5165\u5230trie\u4e2d\uff08\u53ea\u4fdd\u5b5801\u8282\u70b9\uff09\uff0c\u7136\u540e\u67e5\u8be2\u7684\u8bddYY\u4e00\u4e0b\u5c31\u884c\uff08\u6216\u8005\u770b\u4ee3\u7801\uff09\u3002\n\n01trie\u5341\u5206\u597d\u5199\uff01\uff01\uff0101trie\u5341\u5206\u597d\u5199\uff01\uff01\uff0101trie\u5341\u5206\u597d\u5199\uff01\uff01\uff01\n\n\u5982\u679c\u8bf4split-merge treap\u662f\u65f6\u95f4\u6362\u4ee3\u7801\u7684\u8bdd\uff08\u4e8b\u5b9e\u4e0a\u90a3\u4e2a\u6211\u89c9\u5f97\u4e0d\u592a\u597d\u7406\u89e3\u3002\u3002\u3002\u800c\u4e14\u4e00\u822csplit\u7528\u7684pair\u901f\u5ea6\u8d85\u6162\u7684\u6837\u5b50\u3002\u3002\u3002\uff08\u4e0d\u8fc7clj\u7684\u90a3\u79cd\u4e0d\u9700\u8981\u4fdd\u5b58\u4f18\u5148\u503c\u7684\u65b9\u6cd5\u633a\u597d\u7684\u3002\u3002\u3002\uff09\uff09\uff0c01trie\u5c31\u662f\u7a7a\u95f4\u6362\u4ee3\u7801\uff08\u7136\u800c\u53ea\u662f32\u500d\u7684\u7a7a\u95f4\uff01\u800c\u4e14\u662f\u6700\u70c2\u7684\u60c5\u51b5\u4e0b\uff01\uff09\u3002\u3002\u3002\n\n\u4e0d\u8fc7\u7f8e\u4e2d\u4e0d\u8db3\u7684\u662f\uff0c01trie\u53ea\u80fd\u7528\u4e8e\u975e\u8d1f\u6574\u6570\uff08\u4e5f\u5c31\u662f\u8bf4\u5176\u5b83\u7684\u6570\u636e\uff08\u6bd4\u5982\u8bf4\u5b9e\u6570\uff09\u9700\u8981\u5148\u79bb\u6563\u5316\u540e\u624d\u80fd\u7528\u3002\u3002\u3002\uff09\u3002\u3002\u3002\n\n\uff08\u7136\u800c\u4e8b\u5b9e\u4e0a\u8003\u8bd5\u7684\u65f6\u5019\u90fd\u662f\u5f3a\u5236\u5728\u7ebf\u5427\u3002\u3002\u3002\uff09\n\n\u4e0d\u8fc7\u4e00\u822c\u5199\u5e73\u8861\u6811\u5c31\u662f\u6574\u6570\u4e86\u5427\u3002\u3002\u3002\u4e8e\u662f01trie\u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u6837\u5b50\u3002\u3002\u3002\u2570(\\*\u00b4\ufe36`\\*)\u256f\n\n\u4ee3\u7801\uff1fhttp://www.cnblogs.com/KingSann/articles/7339563.html\n",
        "postTime": 1502351257,
        "uid": 47111,
        "name": "nekko",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "# \u65e0\u65cbTreap\n\u65e0\u9700\u65cb\u8f6c\uff0c\u4f9d\u9760**\u6309\u968f\u673a\u6743\u503c\u6ee1\u8db3\u5806\u6027\u8d28**\u7684\u5408\u5e76\u4fdd\u6301\u5e73\u8861\u3002~~\u4f60\u503c\u5f97\u62e5\u6709\u3002~~\n## \u8282\u70b9\u5b9a\u4e49\n&emsp;&emsp;\u6bcf\u4e2a\u8282\u70b9\u5e265\u4e2a\u4fe1\u606f\uff0c$ls\\;$\u548c$\\;rs\\;$\u4e3a\u5de6\u53f3\u5b69\u5b50\u4e0b\u6807\uff0c$\\;rnd\\;$\u4e3a\u968f\u673a\u6743\u503c\uff0c$\\;val\\;$\u4e3a\u8282\u70b9\u6743\u503c\uff0c$\\;size\\;$\u4e3a\u5b50\u6811\u5927\u5c0f\u3002\n\u5168\u5c40$\\;cnt\\;$\u4e3a\u8282\u70b9\u603b\u4e2a\u6570\uff0c\u5168\u5c40$\\;root\\;$\u4e3a\u6811\u7684\u6839\u8282\u70b9\u4e0b\u6807\u3002\n```cpp\n#define ls(p) t[p].ls\n#define rs(p)  t[p].rs\n#define val(p) t[p].val\n#define rnd(p) t[p].rnd\n#define size(p) t[p].size\n\nint cnt, root;\n\nstruct Treap\n{\n\tint ls, rs;\n\tint rnd, val, size;\n};\n\nTreap t[N];\n```\n## \u4fee\u6539\u8282\u70b9size\u503c\n&emsp;&emsp;\u8282\u70b9size\u66f4\u6539\u4e3a\u5de6\u53f3\u5b50\u6811\u5927\u5c0f\u52a0\u4e00\u3002\n```cpp\nvoid ModifySize(int p)\n{\n\tsize(p) = size(ls(p)) + size(rs(p)) + 1;\n}\n```\n\n## \u65b0\u5efa\u8282\u70b9\n&emsp;&emsp;\u5de6\u53f3\u5b69\u5b50\u4e0b\u6807\u8bbe\u4e3a$\\;0$\uff0c\u8868\u793a\u5de6\u53f3\u5b50\u8282\u70b9\u4e3a\u7a7a\uff0c\u8282\u70b9\u5927\u5c0f\u4e3a$\\;1\\;$\u3002\n```cpp\nvoid NewNode(int& k,int x)\n{\n\tval(++cnt) = x;\n\tsize(cnt) = 1;\n\trnd(cnt) = rand();\n\tls(cnt) = rs(cnt) = 0;\n\n\tk = cnt;\n}\n```\n\n## \u5408\u5e76\u64cd\u4f5c\n&emsp;&emsp;\u6838\u5fc3\u64cd\u4f5c\u3002\u5408\u5e76\u4e24\u4e2a\u6811\u3002\u53c2\u6570$\\;x\\;$\u548c$\\;y\\;$\u4e3a\u5f85\u5408\u5e76\u7684\u4e24\u4e2a\u6811\u6839\u8282\u70b9\uff0c\u5176\u4e2d\u6811$\\;x\\;$\u6ee1\u8db3\u6240\u6709\u8282\u70b9\u6743\u503c\u5c0f\u4e8e\u6811$\\;y\\;$\u3002\u8fd4\u56de\u503c\u4e3a\u5408\u5e76\u540e\u6811\u6839\u8282\u70b9\u4e0b\u6807\u3002\n\u5982\u679c\u5f85\u5408\u5e76\u6811\u4e2d\u5b58\u5728\u7a7a\u6811\uff0c\u5373$\\;x\\;$\u548c$\\;y\\;$\u6709\u4e00\u4e2a\u662f$\\;0\\;$\uff0c\u5219\u65e0\u9700\u5408\u5e76\uff0c\u8fd4\u56de$\\;x+y\\;$\u3002\u5982\u679c\u4e24\u4e2a\u6811\u5747\u975e\u7a7a\uff0c\u5219\u76ee\u6807\u4e3a\u4f7f\u5f97\u5408\u5e76\u540e\u7684\u5927\u6811\u65e2\u6ee1\u8db3$\\;rnd\\;$\u5b58\u5728\u5806\u6027\u8d28\uff0c$val\\;$\u5b58\u5728$\\;BST\\;$\u6027\u8d28\u3002\u6b64\u5904\u9009\u7528\u5c0f\u6839\u5806\uff0c\u5373\u5408\u5e76\u540e\u7236\u4eb2\u8282\u70b9\u7684\u968f\u673a\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5176\u5b69\u5b50\u7684\u968f\u673a\u6743\u503c\u3002$BST\\;$\u6027\u8d28\u5373\u4e3a\u8282\u70b9\u6743\u503c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u9012\u589e\u3002\u8be6\u89c1\u4ee3\u7801\u53ca\u6ce8\u91ca\u3002\n```cpp\nint Merge(int x, int y)\n{\n\tif (!x || !y)\n\t{\n\t\treturn x | y;     //\u5373x + y\n\t}\n\n\tif (rnd(x) < rnd(y))  //\u5982\u679cy\u6811\u7684\u968f\u673a\u6743\u503c\u66f4\u5927\uff0c\u4e3a\u6ee1\u8db3\u5806\u6027\u8d28\uff0cy\u505ax\u7684\u5b50\u6811\n\t{\n\t    //\u4e3a\u6ee1\u8db3BST\u6027\u8d28\uff0c\u7531\u4e8ey\u6811\u6743\u503c\u66f4\u5927\uff0c\u9012\u5f52\u5408\u5e76\u53f3\u5b50\u6811\n\t    //\u76f8\u5f53\u4e8e\u628ay\u6811\u63a5\u5728x\u7684\u53f3\u5b50\u6811\u4e0a\n\t\trs(x) = Merge(rs(x), y); \n\t\t//\u4fee\u6539\u5927\u6811\u6839\u8282\u70b9size\n\t\tModifySize(x);\n\t\t//\u8fd4\u56de\u5927\u6811\u6839\u8282\u70b9\n\t\treturn x;\n\t}\n\telse  //\u540c\u7406\n\t{\n\t\tls(y) = Merge(x, ls(y));\n\t\tModifySize(y);\n\t\treturn y;\n\t}\n}\n```\n## \u5206\u88c2\u64cd\u4f5c\n&emsp;&emsp;\u53e6\u4e00\u6838\u5fc3\u64cd\u4f5c\u3002\u6309\u8282\u70b9\u6743\u503c$\\;k\\;$\u5c06\u4e00\u4e2a\u6811\u5206\u88c2\u4e3a\u4e24\u4e2a\u6811\uff0c\u8fd9\u4e24\u68f5\u6811\u6ee1\u8db3\u5176\u4e2d\u4e00\u68f5\u6811\u8282\u70b9\u6743\u503c\u5747\u5c0f\u4e8e\u7b49\u4e8e$\\;k\\;$\uff08\u6211\u4eec\u4ee5\u4e0b\u79f0\u4f5c\u201c\u5de6\u6811\u201d\uff09\uff0c\u53e6\u4e00\u68f5\u6811\u8282\u70b9\u6743\u503c\u5747\u5927\u4e8e$\\;k\\;$\uff08\u6211\u4eec\u4ee5\u4e0b\u79f0\u4f5c\u201c\u53f3\u6811\u201d\uff09\u3002\u5f15\u7528\u53c2\u6570$\\;x\\;$\u548c$\\;y\\;$\u4e3a\u5206\u88c2\u540e\u7684\u5de6\u6811\u548c\u53f3\u6811\u7684\u6839\u8282\u70b9\u3002$p\\;$\u4e3a\u6b63\u5728\u8bbf\u95ee\u7684\u8282\u70b9\u3002\n&emsp;&emsp;\u5982\u679c\u6b63\u5728\u8bbf\u95ee\u7684\u8282\u70b9$\\;p\\;$\u7684\u6743\u503c$\\;val<=k\\;$\uff0c\u6839\u636e$\\;BST\\;$\u6027\u8d28\uff0c\u8fd9\u610f\u5473\u7740\u8282\u70b9$\\;p\\;$\u4ee5\u53ca\u5b83\u7684\u5de6\u5b50\u6811\u5747\u53ef\u4ee5\u5212\u5206\u5230\u5de6\u6811\u7684\u5de6\u5b50\u6811\u4e2d\u53bb\uff0c\u63a5\u4e0b\u6765\u53ea\u9700\u8003\u8651\u5de6\u6811\u7684\u53f3\u5b50\u6811\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u53f3\u6811\u662f\u4ec0\u4e48\u3002\u6b64\u65f6\u95ee\u9898\u53d8\u4e3a\uff1a\u7ed9\u5b9a\u6811\u6839$\\;rs(p)\\;$\uff08\u56e0\u4e3a$\\;p\\;$\u7684\u5de6\u5b50\u6811\u5df2\u7ecf\u5212\u5206\u7ed9\u4e86\u5de6\u6811\uff09\uff0c\u6309\u6743\u503c$\\;k\\;$\u5c06\u6811\uff08\u5373$\\;p\\;$\u7684\u53f3\u5b50\u6811\uff09\u5206\u88c2\u4e3a\u4ee5\u201c\u5de6\u6811\u7684\u53f3\u5b69\u5b50\u201d\uff08\u5373$\\;rs(x)\\;$)\u4e3a\u6839\u548c\u4ee5\u53f3\u6811\u6811\u6839\uff08\u5373$\\;y\\;$\uff09\u4e3a\u6839\u7684\u4e24\u68f5\u5c0f\u6811\u3002\u4e8e\u662f\u53ef\u4ee5\u9012\u5f52\u89e3\u51b3\u3002\n&emsp;&emsp;\u5982\u679c\u6b63\u5728\u8bbf\u95ee\u7684\u8282\u70b9$\\;p\\;$\u7684\u6743\u503c$\\;val>k\\;$\uff0c\u5206\u6790\u4e0e\u4e0a\u6bb5\u7c7b\u4f3c\u3002\n```cpp\nvoid Split(int p, int k, int& x, int& y)\n{\n\tif (!p)\n\t{\n\t\tx = y = 0;\n\t\treturn;\n\t}\n\tif (val(p) <= k)\n\t{\n\t    //\u786e\u5b9a\u5de6\u6811\u7684\u6839\u5373\u4e3ap\n\t\tx = p;\n\t\t//\u7ee7\u7eed\u5206\u88c2\u53f3\u5b50\u6811\n\t\tSplit(rs(x), k, rs(x), y);\n\t\t//\u4fee\u6539size\u503c\n\t\tModifySize(x);\n\t}\n\telse\n\t{\n\t    //\u786e\u5b9a\u53f3\u6811\u7684\u6839\u5373\u4e3ap\n\t\ty = p;\n\t\t//\u7ee7\u7eed\u5206\u88c2\u5de6\u5b50\u6811\n\t\tSplit(ls(y), k, x, ls(y));\n\t\t//\u4fee\u6539size\n\t\tModifySize(y);\n\t}\n}\n```\n## \u6309\u503c\u5220\u9664\n&emsp;&emsp;\u5220\u9664\u503c\u4e3a$\\;v\\;$\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u5f15\u7528\u53c2\u6570$\\;root\\;$\u4e3a\u5168\u5c40\u6839\u8282\u70b9\u3002\n\u5148\u5c06\u6574\u68f5\u6811\u5206\u88c2\u4e3a\u4e24\u68f5\u6811$\\;x\\;$\u548c$\\;z\\;$\uff0c\u6811$\\;x\\;$\u6ee1\u8db3\u6240\u6709\u8282\u70b9\u5747\u5c0f\u4e8e\u7b49\u4e8e$\\;v\\;$\uff0c\u6811$\\;z\\;$\u6ee1\u8db3\u6240\u6709\u8282\u70b9\u5747\u5927\u4e8e$\\;v\\;$\uff0c\u7136\u540e\u6309\u503c$v-1$\u7ee7\u7eed\u5206\u88c2\u6811$\\;x\\;$\uff0c\u5206\u88c2\u4e3a\u6811$\\;x\\;$\u548c\u6811$\\;y\\;$\uff0c\u4e8e\u662f\uff0c\u6811$\\;x\\;$\u6ee1\u8db3\u6240\u6709\u8282\u70b9\u5747\u5c0f\u4e8e\u7b49\u4e8e$\\;v-1\\;$\uff0c\u6811$\\;y\\;$\u6ee1\u8db3\u6240\u6709\u8282\u70b9\u5747\u5927\u4e8e$\\;v-1\\;$\uff0c\u6b64\u65f6\u6811$\\;y\\;$\u7684\u6839\u6743\u503c\u4e00\u5b9a\u4e3a$\\;v\\;$\u3002\u6240\u4ee5\u53ea\u9700\u5408\u5e76\u6811$\\;y\\;$\u7684\u5de6\u53f3\u5b50\u6811\uff0c\u5373\u53ef\u6d88\u9664\u503c\u4e3a$\\;v\\;$\u7684\u8282\u70b9\u7684\u5f71\u54cd\u3002\n```\nvoid Pop(int& root, int v)\n{\n\tint x, y, z;\n\tx = y = z = 0;\n\t\n    //\u5206\u88c2\u51fa\u6839\u8282\u70b9\u4e3av\u7684\u5b50\u6811\n\tSplit(root, v, x, z);\n\tSplit(x, v - 1, x, y);\n    \n    //\u539f\u6765\u6811y\u6839\u8282\u70b9\u5728\u5408\u5e76\u4e2d\u88ab\u62b9\u53bb\n\ty = Merge(ls(y), rs(y));\n\t//\u5408\u5e76\u4e3a\u4e00\u6574\u68f5\u6811\uff0c\u4fee\u6539root\n\troot = Merge(Merge(x, y), z);\n}\n```\n\n## \u63d2\u5165\u65b0\u6570\n&emsp;&emsp;\u5148\u6309\u63d2\u5165\u503c$\\;v\\;$\u5206\u88c2\u6574\u68f5\u6811\uff0c\u540c\u65f6\u65b0\u5efa\u503c\u4e3a$\\;v\\;$\u7684\u8282\u70b9\uff0c\u518d\u6309\u987a\u5e8f$\\;Merge\\;$\u3002\n```cpp\nvoid Push(int& root, int v)\n{\n\tint x, y, z;\n\tx = y = z = 0;\n\n\tSplit(root, v, x, y);\n\tNewNode(z, v);\n\t//\u6309SBT\u987a\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u5408\u5e76\n\troot = Merge(Merge(x, z), y);\n}\n```\n\n## \u6309\u6392\u884c\u67e5\u8be2\u503c\n&emsp;&emsp;\u5982\u679c\u5de6\u5b50\u6811\u5927\u5c0f\u52a0\u4e00\u5373\u4e3a$\\;rank\\;$\uff0c\u8868\u660e\u6839\u8282\u70b9\u5373\u4e3a\u6240\u6c42\u503c\u3002\u5426\u5219\u5206\u5927\u5c0f\u5728\u5de6\u53f3\u5b50\u6811\u4e2d\u7ee7\u7eed\u67e5\u8be2\u3002\n```cpp\nint RankToNum(int p, int rank)\n{\n\tif (rank == size(ls(p)) + 1)\n\t{\n\t\treturn val(p);\n\t}\n\t//\u5de6\u5b50\u6811\n\telse if (rank <= size(ls(p)))\n\t{\n\t\treturn RankToNum(ls(p), rank);\n\t}\n\t//\u53f3\u5b50\u6811\uff0c\u6392\u540d\u9700\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\u518d\u51cf\u53bb\u4e00\uff08\u6839\u8282\u70b9\uff09\n\telse\n\t{\n\t\treturn RankToNum(rs(p), rank - size(ls(p)) - 1);\n\t}\n}\n```\n\n## \u6309\u503c\u67e5\u8be2\u6392\u884c\n&emsp;&emsp;\u6309\u503c\u5206\u88c2\uff0c\u5de6\u5b50\u6811\u5927\u5c0f\u52a0\u4e00\u5373\u4e3a\u7b54\u6848\u3002\n```cpp\nint NumToRank(int& root, int v)\n{\n\tint x, y;\n\tSplit(root, v - 1, x, y);\n\tint rank = size(x) + 1;\n\t//\u5408\u5e76\uff0c\u66f4\u65b0\u6839\u8282\u70b9\n\troot = Merge(x, y);\n\treturn rank;\n}\n```\n\n## \u524d\u9a71\n&emsp;&emsp;\u540c\u6837\u6309\u503c\u5206\u88c2\uff0c\u5229\u7528$\\;RankToNum\\;$\u51fd\u6570\u914d\u5408\u5de6\u6811\u5927\u5c0f\u67e5\u8be2\u524d\u9a71\u503c\uff0c\u6700\u540e\u5408\u5e76\u3002\u7279\u5224\u5e94\u8be5\u6ca1\u4ec0\u4e48\u7528\u3002\n```cpp\nint Pre(int& root, int v)\n{\n\tint x, y, k, pre;\n\tSplit(root, v - 1, x, y);\n    //\u5e94\u8be5\u6ca1\u7528\u7684\u7279\u5224\n\tif (!x)\n\t{\n\t\treturn -INF;\n\t}\n\tk = size(x);\n\t//\u8bb0\u5f55\u7b54\u6848\n\tpre = RankToNum(x, k);\n\t//\u66f4\u65b0root\n\troot = Merge(x, y);\n\treturn pre;\n}\n```\n## \u540e\u7ee7\n&emsp;&emsp;\u548c\u524d\u9a71\u7c7b\u4f3c\uff0c\u5206\u88c2\u3001\u67e5\u6392\u884c\u3001\u5408\u5e76\n```cpp\nint Next(int& root, int v)\n{\n\tint x, y, nex;\n\tSplit(root, v, x, y);\n\tif (!y)\n\t{\n\t\treturn INF;\n\t}\n\telse\n\t{\n\t\tnex = RankToNum(y, 1);\n\t}\n\n\troot = Merge(x, y);\n\treturn nex;\n}\n```\n\u9644\u9001~~\u65e0\u7801~~AC\u7a0b\u5e8f\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdlib>\n#include <ctime>\n\n#define ls(p) t[p].ls\n#define rs(p)  t[p].rs\n#define val(p) t[p].val\n#define rnd(p) t[p].rnd\n#define size(p) t[p].size\n\nusing namespace std;\n\nconst int N = 100000 + 20;\nconst int INF = 0x3f3f3f3f;\n\nint cnt, root;\n\nstruct Treap\n{\n\tint ls, rs;\n\tint rnd, val, size;\n};\n\nTreap t[N];\n\nvoid ModifySize(int p)\n{\n\tsize(p) = size(ls(p)) + size(rs(p)) + 1;\n}\n\nvoid NewNode(int& k,int x)\n{\n\tval(++cnt) = x;\n\tsize(cnt) = 1;\n\trnd(cnt) = rand();\n\tls(cnt) = rs(cnt) = 0;\n\n\tk = cnt;\n}\n\nint Merge(int x, int y)\n{\n\tif (!x || !y)\n\t{\n\t\treturn x | y;\n\t}\n\n\tif (rnd(x) < rnd(y))\n\t{\n\t\trs(x) = Merge(rs(x), y);\n\t\tModifySize(x);\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tls(y) = Merge(x, ls(y));\n\t\tModifySize(y);\n\t\treturn y;\n\t}\n}\n\n\nvoid Split(int p, int k, int& x, int& y)\n{\n\tif (!p)\n\t{\n\t\tx = y = 0;\n\t\treturn;\n\t}\n\tif (val(p) <= k)\n\t{\n\t\tx = p;\n\t\tSplit(rs(x), k, rs(x), y);\n\t\tModifySize(x);\n\t}\n\telse\n\t{\n\t\ty = p;\n\t\tSplit(ls(y), k, x, ls(y));\n\t\tModifySize(y);\n\t}\n}\n\nvoid Pop(int& root, int v)\n{\n\tint x, y, z;\n\tx = y = z = 0;\n\n\tSplit(root, v, x, z);\n\tSplit(x, v - 1, x, y);\n\n\ty = Merge(ls(y), rs(y));\n\troot = Merge(Merge(x, y), z);\n}\n\nvoid Push(int& root, int v)\n{\n\tint x, y, z;\n\tx = y = z = 0;\n\n\tSplit(root, v, x, y);\n\tNewNode(z, v);\n\troot = Merge(Merge(x, z), y);\n}\n\nint RankToNum(int p, int rank)\n{\n\tif (rank == size(ls(p)) + 1)\n\t{\n\t\treturn val(p);\n\t}\n\telse if (rank <= size(ls(p)))\n\t{\n\t\treturn RankToNum(ls(p), rank);\n\t}\n\telse\n\t{\n\t\treturn RankToNum(rs(p), rank - size(ls(p)) - 1);\n\t}\n}\n\nint NumToRank(int& root, int v)\n{\n\tint x, y;\n\tSplit(root, v - 1, x, y);\n\tint rank = size(x) + 1;\n\troot = Merge(x, y);\n\treturn rank;\n}\n\nint Pre(int& root, int v)\n{\n\tint x, y, k, pre;\n\tSplit(root, v - 1, x, y);\n\n\tif (!x)\n\t{\n\t\treturn -INF;\n\t}\n\tk = size(x);\n\tpre = RankToNum(x, k);\n\troot = Merge(x, y);\n\treturn pre;\n}\n\nint Next(int& root, int v)\n{\n\tint x, y, nex;\n\tSplit(root, v, x, y);\n\tif (!y)\n\t{\n\t\treturn INF;\n\t}\n\telse\n\t{\n\t\tnex = RankToNum(y, 1);\n\t}\n\n\troot = Merge(x, y);\n\treturn nex;\n}\n\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\n\tsrand(unsigned(time(NULL)));\n\n\tint n, op, val;\n\tcin >> n;\n\n\twhile (n--)\n\t{\n\t\tcin >> op >> val;\n\t\tif (op == 1)\n\t\t{\n\t\t\tPush(root, val);\n\t\t}\n\t\telse if (op == 2)\n\t\t{\n\t\t\tPop(root, val);\n\t\t}\n\t\telse if (op == 3)\n\t\t{\n\t\t\tcout << NumToRank(root, val) << endl;\n\t\t}\n\t\telse if (op == 4)\n\t\t{\n\t\t\tcout << RankToNum(root, val) << endl;\n\t\t}\n\t\telse if (op == 5)\n\t\t{\n\t\t\tcout << Pre(root, val) << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << Next(root, val) << endl;\n\t\t}\n\t}\n}\n```",
        "postTime": 1565249940,
        "uid": 159730,
        "name": "Sophon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "### \u65e2\u7136\u8fd9\u662f\u4e00\u9053\u5e73\u8861\u6811\u88f8\u9898\uff0c\u90a3\u4e48\u6211\u4eec\u6253\u5b8c\u5e73\u8861\u6811\u4e4b\u540e\uff0c\u4e0d\u59a8\u8003\u8651\u4e00\u4e0b\u80fd\u4e0d\u80fd\u5927\u529b\u7ebf\u6bb5\u6811\u3002\u4e8b\u5b9e\u544a\u8bc9\u6211\u4eec\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u662f\u8d44\u74f7\u7684\u3002\n\n\u9996\u5148\u7531\u4e8e\u4e0d\u5b58\u5728\u533a\u95f4\u64cd\u4f5c\uff0c\u663e\u7136\u8003\u8651\u503c\u57df\u7ebf\u6bb5\u6811\u3002\u5bf9\u4e8e\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\uff0c\u6b63\u5e38\u503c\u57df\u7ebf\u6bb5\u6811\u7684\u63d2\u5165\u5220\u9664\u5373\u53ef\u3002\n\n\u7531\u4e8e\u6709\u67e5\u8be2\u67d0\u4e2a\u6570\u7684\u6392\u540d\u548c\u67e5\u8be2\u6392\u540d\u4e3ak\u7684\u6570\u5b57\uff0c\u8003\u8651\u7ef4\u62a4\u5bf9\u5e94\u503c\u57df\u533a\u95f4\u7684\u6570\u5b57\u4e2a\u6570\u3002\u5e38\u89c4\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u524d\u9a71\u3001\u540e\u7ee7\uff0c\u4e0d\u59a8\u770b\u505a\u503c\u57df\u533a\u95f4\u4e0a\u7684\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3002\u5373\u5982\u679c\u6211\u4eec\u8981\u6c4234\u8fd9\u4e2a\u6570\u5b57\u7684\u540e\u7ee7\uff0c\u53ef\u4ee5\u8003\u8651\u6c42\u5728[35,inf]\u533a\u95f4\u5185\u6700\u5c0f\u7684\u6570\u5b57\u3002\u540c\u7406\uff0c\u5982\u679c\u6c4234\u7684\u524d\u9a71\uff0c\u53ef\u4ee5\u8003\u8651\u5728[-inf,33]\u533a\u95f4\u5185\u6700\u5927\u7684\u6570\u5b57\u3002\u5bf9\u4e8e\u8fd9\u79cd\u9700\u6c42\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u6743\u503c\u533a\u95f4\u4e0a\u7684\u6700\u5927\u3001\u6700\u5c0f\u503c\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8fdb\u884c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u503c\u7684\u6570\u5b57\u4e2a\u6570\u88ab\u5220\u5b8c\u4e86\uff0c\u5219\u9700\u8981\u5728\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u8bb2cnt\u6e05\u96f6\uff0cmin\u8bbe\u7f6e\u4e3ainf\uff0cmax\u8bbe\u7f6e\u4e3a-inf\uff0c\u6b64\u5730\u6613\u9519\u3002\n\n\u89c2\u5bdf\u503c\u57df\u533a\u95f4\uff0c[-1e7,1e7]\uff0c\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u5373\u53ef\u3002\n\n\u8be6\u89c1\u4ee3\u7801\n``` c++\n#include<bits/stdc++.h>\n#define ls(k) a[k].ch[0]\n#define rs(k) a[k].ch[1]\nusing namespace std;\nstruct node { \n    int l,r,ch[2],cnt,mi,ma;\n};node a[1200000];\nint cnt=1;\nconst int M=10000000;\nint n,mark,val;\ninline void update(int k) { \n    a[k].cnt=a[ls(k)].cnt+a[rs(k)].cnt;\n    a[k].mi=min(a[ls(k)].mi,a[rs(k)].mi);\n    a[k].ma=max(a[ls(k)].ma,a[rs(k)].ma);\n} \n\ninline void make(int k) { \n    int l=a[k].l,r=a[k].r,mid=l+r>>1;\n    ls(k)=++cnt,a[cnt].l=l,a[cnt].r=mid,a[cnt].mi=M,a[cnt].ma=-M;\n    rs(k)=++cnt,a[cnt].l=mid+1,a[cnt].r=r,a[cnt].mi=M,a[cnt].ma=-M;\n} \n\ninline void ins(int k,int val) { \n    if(a[k].l==a[k].r) { \n        a[k].cnt++,a[k].mi=a[k].ma=val;\n        return;\n    } \n    if(1ll*ls(k)*rs(k)==0) make(k);\n    int mid=a[k].l+a[k].r>>1;\n    if(val<=mid) ins(ls(k),val);\n    else ins(rs(k),val);\n    update(k);\n} \n\ninline void del(int k,int val) { \n    if(a[k].l==a[k].r) { \n        a[k].cnt--;\n        if(a[k].cnt==0) a[k].mi=M,a[k].ma=-M;\n        return;\n    } \n    int mid=a[k].l+a[k].r>>1;\n    if(val<=mid) del(ls(k),val);\n    else del(rs(k),val);\n    update(k);\n} \n\ninline int qmi(int k,int l,int r) { \n    if(k==0) return M;\n    if(a[k].l==l&&a[k].r==r) return a[k].mi;\n    int mid=a[k].l+a[k].r>>1;\n    if(r<=mid) return qmi(ls(k),l,r);\n    else if(l>mid) return qmi(rs(k),l,r);\n    else return min(qmi(ls(k),l,mid),qmi(rs(k),mid+1,r));\n} \n\ninline int qma(int k,int l,int r) { \n    if(k==0) return -M;\n    if(a[k].l==l&&a[k].r==r) return a[k].ma;\n    int mid=a[k].l+a[k].r>>1;\n    if(r<=mid) return qma(ls(k),l,r);\n    else if(l>mid) return qma(rs(k),l,r);\n    else return max(qma(ls(k),l,mid),qma(rs(k),mid+1,r));\n} \n\nint kth(int k,int val) { \n    if(a[k].l==a[k].r) return a[k].l;\n    int lsi=a[ls(k)].cnt;\n    if(val<=lsi) return kth(ls(k),val);\n    else return kth(rs(k),val-lsi);\n} \n\nint qr(int k,int val) { \n    if(a[k].l==a[k].r) return 1;\n    int mid=a[k].l+a[k].r>>1;\n    if(val<=mid) return qr(ls(k),val);\n    else return a[ls(k)].cnt+qr(rs(k),val);\n} \n\nint main() { \n    a[1].l=-M,a[1].r=M;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i) { \n        scanf(\"%d%d\",&mark,&val);\n        if(mark==1) ins(1,val);\n        if(mark==2) del(1,val);\n        if(mark==3) printf(\"%d\\n\",qr(1,val));\n        if(mark==4) printf(\"%d\\n\",kth(1,val));\n        if(mark==5) printf(\"%d\\n\",qma(1,-M,val-1));\n        if(mark==6) printf(\"%d\\n\",qmi(1,val+1,M));\n    } \n    return 0;\n} \n\n```",
        "postTime": 1528109801,
        "uid": 47981,
        "name": "liangs333",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "# Vector\u5927\u6cd5\u597d\n\nsplay\u6709\u54ea\u4e9b\u7f3a\u70b9\uff0c\u76f8\u4fe1\u5927\u5bb6\u90fd\u6e05\u695a\n\n\u5e38\u6570\u5927\uff0c\u4ee3\u7801\u590d\u6742\n\n\u5b9e\u9645\u4e0a\uff0c\u5728\u53ea\u8981\u6c42\u5355\u70b9\u64cd\u4f5c\u7684\u9898\u76ee\u4e2d\uff0c\u5927\u53ef\u4f7f\u7528STLvector\u6765\u4ee3\u66ff\u624b\u5199splay\uff0c\u53ea\u9700\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u7ebf\u6027\u8868\u5373\u53ef\n\nvector\u7684insert\u548cerase\u64cd\u4f5c\uff0c\u867d\u7136\u662fO(N)\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u5e38\u6570\u6781\u5c0f\uff0c\u4e14\u81ea\u5e26c++\u6807\u51c6\u5e93\u7684\u7f16\u8bd1\u4f18\u5316\uff0c\u5b9e\u9645\u8868\u73b0\u4f18\u79c0\uff0c\u53ef\u4ee5\u80dc\u4efb\u6b64\u9898\n\n\u4e8b\u5b9e\u4e0a\uff0c\u7531\u4e8e\u5e38\u6570\u6781\u5c0f\uff0cvector\u6bd4\u5927\u591a\u6570\u624b\u5199splay\u90fd\u8981\u5feb,\u5b9e\u6d4b367ms\n\n\u5f53\u7136,splay\u7684\u533a\u95f4\u64cd\u4f5c\u548cLCT\u662fvector\u65e0\u6cd5\u505a\u5230\u7684\n```\n#include<bits/stdc++.h>\nusing namespace std;\nvoid read(int &x){\n    int f=1;char c=getchar();x=0;\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=(x<<3)+(x<<1)+c-'0';c=getchar();}\n    x*=f;\n}\nint n;\nvector<int> a;\n\nint main(){\n\t//freopen(\"vector_PHS.in\", \"r\", stdin);\n\tread(n); int op, x;\n\twhile(n--){\n\t\tread(op),read(x);\n\t\tif(op == 1) a.insert(lower_bound(a.begin(), a.end(), x), x);\n\t\telse if(op == 2) a.erase(lower_bound(a.begin(), a.end(), x));\n\t\telse if(op == 3) printf(\"%d\\n\", lower_bound(a.begin(), a.end(), x) - a.begin() + 1);\n\t\telse if(op == 4) printf(\"%d\\n\", a[x - 1]);\n\t\telse if(op == 5) printf(\"%d\\n\", *--lower_bound(a.begin(), a.end(), x));\n\t\telse printf(\"%d\\n\", *upper_bound(a.begin(), a.end(), x));\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1565517390,
        "uid": 109434,
        "name": "\u98ce\u968f\u9010\u5f71",
        "ccfLevel": 0,
        "title": "\u5e73\u8861\u6811\u5355\u70b9\u4fee\u6539 vector\u5b9e\u73b0"
    },
    {
        "content": "\u6b63\u5e38\u7684treap\u89e3\u6cd5\n\n\u524d\u9a71\u548c\u540e\u7ee7\u5c31\u4e8c\u5206\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nstruct node\n{\n    node* ch[2];\n    int w;\n    int v;\n    int s;//\u8282\u70b9\u6570 \n    int flag;//\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u6240\u4ee5~ \n    node()\n    {\n        ch[0]=NULL;\n        ch[1]=NULL;\n        w=rand();\n        v=0;\n        s=1;\n        flag=1; \n    }\n};\nnode* root; \ninline void maintain(node* &u)//\u66f4\u65b0\u8be5\u8282\u70b9\u6240\u5bf9\u7684\u6811\u7684\u8282\u70b9\u603b\u6570 \n{\n    u->s=u->flag;//flag\u5b58\u7684\u662f\u6743\u503c\u4e3av\u7684\u70b9\u7684\u4e2a\u6570 \n    if (u->ch[0]!=NULL) u->s+=u->ch[0]->s;//\u5de6\u5b50\u6811\u4e0d\u4e3a\u7a7a\u5c31\u52a0\u4e0a\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570 \n    if (u->ch[1]!=NULL) u->s+=u->ch[1]->s;//\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\u5c31\u52a0\u4e0a\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570 \n}\ninline void turn(node* &u,int d)//\u5de6\u65cb\u53f3\u65cb\uff0cd=0\uff1a\u5de6\u65cb\uff0c1\uff1a\u53f3\u65cb \n{//\u6211\u4eec\u5047\u8bbe\u4e3a\u5de6\u65cb \n    node* k=u->ch[d^1];//\u63d0\u51fau\u7684\u53f3\u5b50\u6811\uff0cu\u7684\u53f3\u5b50\u6570\u7684\u6839\u8282\u70b9\u4f5c\u4e3a\u6574\u4e2a\u6811\u7684\u6839\u8282\u70b9 \n    u->ch[d^1]=k->ch[d];//\u53f3\u5b50\u6811\u7684\u5de6\u8282\u70b9\uff0c\u4f5c\u6839\u8282\u70b9\u7684\u53f3\u8282\u70b9 \n    k->ch[d]=u;//\u539f\u672c\u7684\u6811u\uff0c\u4f5ck\u6811\u7684\u5de6\u5b50\u6811 \n    maintain(u);//\u66f4\u65b0u\u4e4b\u540ek\u624d\u80fd\u66f4\u65b0 \n    maintain(k);//\u66f4\u65b0k \n    u=k;//\u8d4b\u8fc7\u53bb \n} \ninline void insert(node* &u,int d)\n{\n    if (u==NULL)//\u5982\u679cu\u4e3a\u7a7a\u76f4\u63a5\u63d2\u8fdb\u53bb \n    {\n        u=new node;\n        u->v=d;\n        return;\n    } else \n    if (u->v==d)//\u56e0\u4e3a\u53ef\u80fd\u6709\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u7edfflag\uff0c\u7136\u540e\u66f4\u65b0 \n    {\n        u->flag++;\n        maintain(u);\n        return; \n    }\n    int d1=d>u->v?1:0;//\u5224\u65ad\u662f\u5e94\u8be5\u641c\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811 \n    insert(u->ch[d1],d);\n    if (u->ch[d1]->w > u->w) turn(u,d1^1); //\u770b\u641c\u7684\u5b50\u6811\u7684\u6743\u91cd\uff0c\u6bd4\u8f83\uff0c\u65cb\u8f6c \n    else maintain(u); //\u65cb\u8f6c\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u66f4\u4e86\u8282\u70b9\u6570\uff0c\u6ca1\u65cb\u4e5f\u8981\u66f4\u65b0 \n}\ninline void remove(node* &u,int d)\n{\n    if (u==NULL) return;//\u7a7a\u7684\u5c31\u9000\u6389 \n    if (u->v==d)\n    {\n        if (u->flag>1) u->flag--;//\u5982\u679c\u8fd9\u4e2a\u503c\u51fa\u73b0\u591a\u6b21\u76f4\u63a5\u51cf \n        else\n        {\n            if (u->ch[0]==NULL&&u->ch[1]==NULL)\n            {//\u6ca1\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u76f4\u63a5\u5220\u9664 \n                u=NULL;\n            } else\n            if (u->ch[0]!=NULL&&u->ch[1]!=NULL)\n            {//\u6709\u4e24\u4e2a\u5b50\u6811\u5c31\u770b\u54ea\u8fb9\u6743\u91cd\u5927\uff0c\u7136\u540e\u65cb\u8fc7\u53bb\uff0c\u7136\u540e\u7ee7\u7eed\u641c\u90a3\u4e2a\u5b50\u6811 \n                if (u->ch[0]->w >u->ch[1]->w) turn (u,1),remove(u->ch[1],d); else turn(u,0),remove(u->ch[0],d);                \n            } else\n            {//\u53ea\u6709\u4e00\u4e2a\u5b50\u6811\u5c31\u76f4\u63a5\u62ff\u53e6\u4e00\u4e2a\u68f5\u5b50\u6811\u8865\u4e0a \n                if (u->ch[0]==NULL) u=u->ch[1]; else u=u->ch[0];\n            }\n        }\n        if (u!=NULL) maintain(u);//\u4e0d\u4e3a\u7a7a\u624d\u7edf\u8ba1 \n    } else\n    {//\u6839\u636ed\u7684\u5927\u5c0f\u626b\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811 \n        if (d < u->v) remove(u->ch[0],d); else\n        if (d > u->v) remove(u->ch[1],d);\n        if (u!=NULL) maintain(u);//\u66f4\u65b0 \n    }\n}\ninline int sum(node* u,int k)//\u67e5\u8be2\u6392\u540d\u4e3ak\u7684\u6570 \n{\n    if (k<0||k>u->s||u==NULL) return 0; //\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u76f4\u63a5\u9000\u51fa \n    int ss=0;//ss\uff1au\u7684\u5de6\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u6ca1\u6709\u5219\u4e3a0\uff0c\u7701\u5f97\u5206\u7c7b\u8ba8\u8bba \n    if  (u->ch[0]!=NULL) ss=u->ch[0]->s;//\u66f4\u65b0 \n    if (k>=ss+1&&k<=u->flag+ss) return u->v;//\u55ef\u56e0\u4e3au\u6709flag\u4e2a\uff0c\u6240\u4ee5\u5728ss+1~ss+flag\u8fd9\u4e2a\u8303\u56f4\u5c31\u7b97\u627e\u5230\u4e86 \n    if (ss>=k) return sum(u->ch[0],k); //ss\u5927\u4e86\u5c31\u5f80\u5de6\u5b50\u6811\u626b \n    else return sum(u->ch[1],k-ss-u->flag);//\u5426\u5219\u5c31\u641c\u53f3\u5b50\u6811 \n}\ninline int ans(node* u,int k)//\u67e5\u8be2k\u7684\u6392\u540d \n{\n    if (u==NULL) return 0;//\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5 \n    int ss=0;//\u5b58\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u4e0d\u7136\u6ca1\u5de6\u5b50\u6811\u5c31\u8981\u518d\u5206 \n    if (u->ch[0]!=NULL) ss=u->ch[0]->s;\n    if (u->v==k) return ss+1;//\u8fd4\u56de\u6392\u540d\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u662fss+1 \n    if (u->v>k) //\u5927\u4e86\u641c\u5de6\u8fb9 \n    {\n        return ans(u->ch[0],k);\n    }\n    else//\u641c\u53f3\u5b50\u8f93\u7684\u65f6\u5019\u8981\u628a\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\u52a0\u4e0a \n    {\n        return ss+u->flag+ans(u->ch[1],k); \n    }\n} \ninline void qq(node* u,int k,int &ans)//\u6c42k\u7684\u524d\u9a71 \n{\n    if (u==NULL) return;\n    if (u->v<k) \n    {\n        if (u->v > ans) ans=u->v;//\u65e5\u5e38\u66f4\u65b0,\u6ca1\u6709\u5f80\u5de6\u626b\u7684\u5fc5\u8981\u4e86 \n        if (u->ch[1]!=NULL) qq(u->ch[1],k,ans);//\u6240\u4ee5\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\u5c31\u626b \n    } else\n    if (u->v>=k)//\u5927\u4e86\u7684\u8bdd\u5c31\u5f80\u5de6\u626b\uff0c\u4ec5\u6b64\u800c\u5df2 \n    {\n        if (u->ch[0]!=NULL) qq(u->ch[0],k,ans);\n    } //\u5de6\u5b50\u6811\u4e0d\u4e3a\u7a7a\u5c31\u5f80\u5de6\u626b \n}\ninline void hj(node* u,int k,int &ans)//\u6c42k\u7684\u540e\u7ee7 \n{\n    if (u==NULL) return;\n    if (u->v>k)//\u5176\u5b9e\u539f\u7406\u548c\u524d\u9a71\u5dee\u4e0d\u591a \n    {\n        if (u->v < ans) ans=u->v;//\u66f4\u65b0 \n        if (u->ch[0]!=NULL) hj(u->ch[0],k,ans);//\u626b\u5de6\u5b50\u6811\u770b\u6709\u66f4\u63a5\u8fd1\u7684\u6ca1 \n    } else\n    if (u->v<=k)\n    {\n        if (u->ch[1]!=NULL) hj(u->ch[1],k,ans);//\u626b\u53f3\u5b50\u6811 \n    }\n}\nint T,a,b;\nint main()\n{ \n    srand(937);\n    scanf(\"%d\",&T);\n    while (T--)//6\u79cd\u64cd\u4f5c \n    {\n        scanf(\"%d%d\",&a,&b);\n        if (a==1)\n        {\n            insert(root,b);\n        } else\n        if (a==2)\n        {\n            remove(root,b);\n        } else\n        if (a==3)\n        {\n            int ans3=ans(root,b);\n            printf(\"%d\\n\",ans3);\n        } else\n        if (a==4)\n        {\n            int ans4=sum(root,b);\n            printf(\"%d\\n\",ans4);\n        } else\n        if (a==5)\n        {\n            int ans5=0;\n            qq(root,b,ans5);\n            printf(\"%d\\n\",ans5);\n        } else\n        if (a==6)\n        {\n            int ans6=100000000;//\u6beb\u65e0\u610f\u4e49\u7684\u521d\u503c \n            hj(root,b,ans6); \n            printf(\"%d\\n\",ans6);\n        }\n    }\n    return 0;\n} \n```",
        "postTime": 1501164064,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u54c7\uff01\u771f\u8d39\u52b2\u3002\u7ed9\u5927\u5bb6\u6765\u4e00\u4e2a\u6574\u5408\u7248\uff1a\n\n\u4ee3\u78011\uff1aSplay Tree\uff08\u4e2d\u6587\u4f38\u5c55\u6811\uff09\n\n\u4ee3\u78012\uff1aBB[\u03b1]\u6811\uff08\u53c8\u79f0\u66ff\u7f6a\u7f8a\u6811\uff09\n\n\u4ee3\u78013\uff1a$p14y 7r33\uff08\u5373\u5e73\u677f\u7535\u89c6\uff08pb\\_ds\uff09\u6811\u7684\u5185\u90e8\u9ad8\u7ea7\u540d\u79f0\uff09\n\n\n\u4ee3\u78011\uff0c2\u4eb2\u81ea\u624b\u5199\uff0c\u91c7\u7528mul\u57df\u505a\u6cd5\uff0c\u5b58\u50a8\u8be5\u7c7b\u5143\u7d20\u4e2a\u6570\u6765\u5904\u7406\u91cd\u590d\u5143\u7d20\n\n\u8fd9\u5c31\u4f7f\u5f97\u5176\u4e2d\u66ff\u7f6a\u7f8a\u6811\u53ef\u4ee5\u4f7f\u7528\u5220\u9664\u61d2\u6807\u8bb0\u505a\u6cd5\uff1a\n\n\u5220\u9664\u65f6\u4e0d\u5220\u9664\u8282\u70b9\uff0c\u53ea\u8ba9mul\u57df--\uff0c\u5982\u679cmul\u57df\u662f0\u8bf4\u660e\u8fd9\u4e2a\u5143\u7d20\u88ab\u5220\u9664\u4e86\uff0c\u5982\u679c\u88ab\u5220\u9664\u5143\u7d20\u5927\u4e8e\u603b\u657050%\uff0c\u6574\u6811\u5c31\u91cd\u6784\u3002\n\n\u4e3a\u8282\u7701\u7a7a\u95f4\uff0c\u66ff\u7f6a\u7f8a\u6811\u6574\u6811\u91cd\u6784\u65f6\u7279\u5224\uff0c\u8ba9\u5185\u5b58\u6c60\u5f52\u96f6\u3002\n\n\n\u4ee3\u7801\u4e00\uff1a\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 300000\n#define mx(x) t[x].mx\n#define mul(x) t[x].mul\n#define sz(x) t[x].sz \n#define fa(x) t[x].fa\n#define lc(x) t[x].c[0]\n#define rc(x) t[x].c[1]\n#define c(x,y) t[x].c[y]\n#define mid ((lef+rig)>>1)\nstruct Node\n{\n    int mx,mul,sz,fa,c[2];\n}t[MAXN+5];\nint tot = 1, n, a, b, x;\nstruct Splay_Tree\n{\n    int root;\n    void Init(int x)\n    {\n        root = x, fa(x) = lc(x) = rc(x) = mul(x) = sz(x) = 0;\n        return;\n    }\n    void Push(int p)\n    {\n        sz(p) = sz(lc(p)) + sz(rc(p)) + mul(p);\n        return;    \n    }\n    int New(int v, int p)\n    {\n        mx(tot) = v, fa(tot) = p, lc(tot) = rc(tot) = 0, mul(tot) = sz(tot) = 1;\n        return tot++;\n    }\n    void Rotate(int x, bool w)    //0 for Zig        1 for Zag (Same as children relationship)\n    {\n        int y = fa(x), z = fa(y), b = c(x,!w); \n        if(b)                    //y with b\n            fa(b) = y;\n        c(y,w) = b;\n        c(x,!w) = y, fa(y) = x;    //x with y\n        if(z)\n            c(z,(y==rc(z))) = x;//z with x\n        fa(x) = z, Push(y), Push(x);\n        return;\n    }\n    void Splay(int x, int goal)    //goal is 0 represents to the root\n    {\n        for(int y = fa(x), z = fa(y), xy, yz; y != goal; Rotate(x,xy), y = fa(x), z = fa(y))\n            if((xy=(x==rc(y))) == (yz=(y==rc(z))) && z != goal)\n                Rotate(y,yz);\n        if(!goal)\n            root = x;\n        return; \n    }\n    int Find(int p, int v)\n    {\n        while(mx(p)!=v && c(p,mx(p)<v))\n            p = c(p,mx(p)<v);\n        Splay(p,0);\n        return p;\n    }\n    int MinMax(int p, bool w)    //0 for min        1 for max\n    {\n        while(c(p,w))\n            p = c(p,w);\n        return p;\n    }\n    int Adjnode(int p, bool w)    //0 for predecessor        1 for successor\n    {\n        Splay(p,0), p = c(p,w);\n        return MinMax(p,!w);\n    }\n    void Insert(int v)\n    {\n        if(!root)\n        {\n            root = New(v,0);\n            return;\n        }\n        int p = Find(root,v), w = (mx(p)<v);\n        if(mx(p) == v)\n        {\n            mul(p)++, sz(p)++;\n            return; \n        }\n        if(c(p,w))\n            Splay(Adjnode(p,w),p), c(c(p,w),!w) = New(v,c(p,w)), Push(c(p,w)),\n            Push(p), Splay(c(c(p,w),!w),0);\n        else\n            c(p,w) = New(v,p), Push(p), Splay(c(p,w),0);\n        return;\n    }\n    bool Delete(int v)\n    {\n        int p = Find(root,v);\n        if(mx(p) != v)\n            return false;\n        if(!--mul(p))\n        {\n            if(!lc(p))\n                root = rc(p), fa(rc(p)) = 0;\n            else\n                Splay(Adjnode(p,0),p), root = lc(p), rc(lc(p)) = rc(p),\n                fa(rc(p)) = lc(p), fa(lc(p)) = 0, Push(root);\n        }\n        else\n            Push(p);\n        return true;\n    }\n    int Rank(int v)                //Query value v's Rank(1~n, min)\n    {\n        int p = Find(root,v);\n        return sz(lc(p))+1;\n    }\n    int Select(int k)            //Find node with rank k(1~n, min)\n    {\n        int p = root, s = sz(lc(p))+1;\n        for(; p; s = sz(lc(p))+1)\n            if(s > k)\n                p = lc(p);\n            else if(s+mul(p)-1 < k)\n                k -= s+mul(p)-1, p = rc(p);\n            else\n                break;\n        Splay(p,0);\n        return p; \n    }\n};\nSplay_Tree T;\ninline int read()\n{\n    int ans=0;\n    char last=' ',ch=getchar();\n    while(ch<'0' || ch>'9') last=ch,ch=getchar();\n    while(ch>='0' && ch<='9')ans=ans*10+ch-'0',ch=getchar();\n    if(last=='-')ans=-ans;\n    return ans;\n}\nint main()\n{\n    for(T.Init(0), n = read(); n--; )\n        switch(read())\n        {\n            case 1 :T.Insert(read());            break;\n            case 2 :T.Delete(read());            break;\n            case 3 :x = read(), a = T.Rank(x);\n                    if(mx(T.root) < x)\n                        a += mul(T.root);\n                    printf(\"%d\\n\",a);            break;\n            case 4 :a = mx(T.Select(read()));\n                    printf(\"%d\\n\",a);            break;\n            case 5 :x = read(), T.Find(T.root,x);\n                    if(mx(T.root) < x)\n                        a = mx(T.root);\n                    else    \n                        a = mx(T.Adjnode(T.root,0));\n                    printf(\"%d\\n\",a);            break;\n            case 6 :x = read(), T.Find(T.root,x);\n                    if(mx(T.root) > x)\n                        a = mx(T.root);\n                    else    \n                        a = mx(T.Adjnode(T.root,1));\n                    printf(\"%d\\n\",a);            break;\n        }\n     return 0;\n}\n```\n\u4ee3\u78012\uff1a\n\n\n\n\n\n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 3000000\n#define mx(x) t[x].mx\n#define fa(x) t[x].fa\n#define mul(x) t[x].mul\n#define lc(x) t[x].c[0]\n#define rc(x) t[x].c[1]\n#define c(x,y) t[x].c[y]\n#define sz(x) t[x].sz\n#define mid ((lef+rig)>>1)\n#define gc() getchar()\n#define ALPHA 0.75\ninline int read(int ans = 0, int sgn = ' ', int ch = gc())\n{\n    for(;ch < '0' || ch > '9'; sgn=ch,ch=gc());\n    for(;ch >='0' && ch <='9'; (ans*=10)+=ch-'0',ch=gc());\n    return sgn-'-' ? ans : -ans;\n}\nvoid o(int x){\n    if(x<0)putchar('-'),x=-x;\n    if(x<10)\n        putchar(x+'0');\n    else{\n        o(x/10);\n        putchar(x%10+'0');\n    }\n    return;\n}\nstruct Node\n{\n    int mx,fa,mul,c[2],sz;\n};\nNode t[MAXN+5];\nint s[MAXN+5], num[MAXN+5], top, tot = 1;\ninline bool BB(int p)\n{\n    return sz(lc(p))-5 > sz(p)*ALPHA || sz(rc(p))-5 > sz(p)*ALPHA;\n}\nstruct BB_alpha\n{\n    int root, fp;\n    inline void Init(int x)\n    {\n        root = x, fa(x) = lc(x) = rc(x) = mul(x) = sz(x) = 0;\n        return;\n    }\n    inline void Push(int p)\n    {\n        if(p)\n            sz(p) = sz(lc(p)) + sz(rc(p)) + mul(p);\n        return;    \n    }\n    inline int New(int v, int p)\n    {\n        mx(tot) = v, fa(tot) = p, lc(tot) = rc(tot) = 0, mul(tot) = sz(tot) = 1;\n        return tot++;\n    }\n    void DFS(int x)\n    {\n        if(x)\n            DFS(lc(x)),    (mul(x) ? s[++top] = mx(x), num[top] = mul(x) : fp--), DFS(rc(x));\n        return;\n    }\n    int Build(int lef, int rig, int father)\n    {\n        if(lef > rig)\n            return 0;\n        int p = New(s[mid],father);\n        mul(p) = num[mid];\n        lc(p) = Build(lef,mid-1,p);\n        rc(p) = Build(mid+1,rig,p);\n        Push(p);\n        return p;\n    }\n    inline void Rebuild(int p, int x = 0)\n    {\n        if(!fa(p))\n            tot = 1;\n        top = 0, DFS(p), x = Build(1,top,fa(p));\n        if(fa(p))\n            c(fa(p),p==rc(fa(p))) = x;\n        else\n            root = x;\n        return;\n    }\n    inline int Find(int v, int p = 0)\n    {\n        for(p = root; mx(p)!=v && c(p,mx(p)<v); p = c(p,mx(p)<v));\n        return p;\n    }\n    inline void Insert(int v)\n    {\n        if(!root)\n        {\n            root = New(v,0);\n            return;\n        }\n        int p = Find(v), w = (mx(p)<v), BBA = 0;\n        (mx(p) == v ? mul(p)++, sz(p)++ : c(p,w) = New(v,p));\n        for(Push(p); p; p = fa(p), Push(p))\n            (BB(p) ? BBA = p : 0);\n        if(BBA)\n            Rebuild(BBA);\n        return;\n    }\n    inline bool Delete(int v)\n    {\n        int p = Find(v);\n        if(mx(p) != v || !mul(p))\n            return false;\n        for((!--mul(p) ? fp++ : 0), Push(p); p; p = fa(p), Push(p));\n        if(fp > sz(root))\n            Rebuild(root);\n        return true;\n    }\n    inline int Rank(int v)                \n    {\n        int p = root, s = sz(lc(p))+1, ans = 1;\n        for(; mx(p)!=v && c(p,mx(p)<v); p = c(p,mx(p)<v))\n            if(mx(p) < v)\n                ans += sz(lc(p))+mul(p);\n        return ans+sz(lc(p))+(mx(p)<v ? mul(p):0); \n    }\n    inline int Select(int k)\n    {\n        int p = root, s = sz(lc(p))+1;\n        for(; p; s = sz(lc(p))+1)\n            if(s > k)\n                p = lc(p);\n            else if(s+mul(p)-1 < k)\n                k -= s+mul(p)-1, p = rc(p);\n            else\n                break;\n        return p; \n    }\n}T;\nint main()\n{\n    register int n,a,x;\n    for(T.Init(0), n = read(); n--; )\n        switch(read())\n        {\n            case 1 :T.Insert(read());                                    break;\n            case 2 :T.Delete(read());                                    break;\n            case 3 :o(T.Rank(x)), putchar('\\n');                        break;\n            case 4 :o(mx(T.Select(read()))), putchar('\\n');                break;\n            case 5 :o(mx(T.Select(T.Rank(read())-1))), putchar('\\n');    break;\n            case 6 :o(mx(T.Select(T.Rank(read()+1)))), putchar('\\n');    break;\n        }\n     return 0;\n}\n```\n\u4ee3\u78013\uff1a\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <ext/pb_ds/assoc_container.hpp> \nusing namespace std;\nusing namespace __gnu_pbds;\n#define Node pair<int,int>\nmap <int,int> s;\ntree< Node ,null_type,less< Node >,splay_tree_tag,tree_order_statistics_node_update> T;\nint n,op,x;\nint main()\n{\n    scanf(\"%d\",&n);\n    for(register int i = 1; i <= n; i++)\n        switch(scanf(\"%d%d\",&op,&x), op)\n        {\n            case 1 :T.insert(Node(x,s[x]++));\n                    break;\n            case 2 :T.erase(Node(x,--s[x]));\n                    break;\n            case 3 :printf(\"%d\\n\",(int)T.order_of_key(Node(x,0))+1);\n                    break;\n            case 4 :printf(\"%d\\n\",T.find_by_order(x-1)->first);\n                    break;\n            case 5 :printf(\"%d\\n\",T.find_by_order(\n                    T.order_of_key(Node(x,0))-1\n                                                      )->first);\n                    break;\n            case 6 :printf(\"%d\\n\",T.find_by_order(\n                    T.order_of_key(Node(x,s[x]-1))+(T.find(Node(x,0)) == T.end() ? 0 : 1)\n                                                      )->first);\n                    break;\n            default:break;\n        }\n    return 0;\n}\n\n```",
        "postTime": 1485756023,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "# \u5e73\u8861\u7ed3\u5408\r\n\r\n## \u5f15\u5165\r\n\r\n[Luogu P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3369)\r\n\r\n>\u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\u3002  \r\n>\u6709 $n$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u79cd\u64cd\u4f5c\u662f\u4e0b\u5217 6 \u79cd\u4e4b\u4e00\uff1a  \r\n>1. \u63d2\u5165 $x$ \u6570\u3002  \r\n>2. \u5220\u9664 $x$ \u6570(\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u56e0\u53ea\u5220\u9664\u4e00\u4e2a)\u3002  \r\n>3. \u67e5\u8be2 $x$ \u6570\u7684\u6392\u540d\uff08\u6392\u540d\u5b9a\u4e49\u4e3a\u6bd4\u5f53\u524d\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570 +$1$\uff09\u3002  \r\n>4. \u67e5\u8be2\u6392\u540d\u4e3a $x$ \u7684\u6570\u3002  \r\n>5. \u6c42 $x$ \u7684\u524d\u9a71\uff08\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e $x$\uff0c\u4e14\u6700\u5927\u7684\u6570\uff09\u3002  \r\n>6. \u6c42 $x$ \u7684\u540e\u7ee7\uff08\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e $x$\uff0c\u4e14\u6700\u5c0f\u7684\u6570\uff09\u3002\r\n>\r\n>$1\\le n\\le 10^5$\u3002\r\n\r\n\u672c\u9898\u663e\u7136\u53ef\u4f7f\u7528\u5e73\u8861\u6811\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u7b49\u65b9\u6cd5\u7ef4\u62a4\uff0c\u5b83\u4eec\u67e5\u8be2\u4fee\u6539\u7684\u590d\u6742\u5ea6\u662f\u5e73\u8861\u7684\uff0c\u5747\u4e3a $O(\\log n)$ \u7ea7\u522b\u3002  \r\n\u53ef\u4ee5\u5728\u4fee\u6539\uff0c\u67e5\u8be2\u6b21\u6570\u540c\u7ea7\u65f6\u83b7\u5f97\u8f83\u4f18\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002  \r\n\r\n\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u4e0e\u67e5\u8be2\u6b21\u6570\u53ef\u80fd\u662f\u4e0d\u5e73\u8861\u7684\uff0c\u8fd9\u65f6\u53ef\u901a\u8fc7\u5176\u4ed6\u624b\u6bb5\u6765\u5904\u7406\u8be5\u95ee\u9898\uff1a  \r\n\u8003\u8651\u5206\u5757\u89e3\u6cd5\uff0c\u4fee\u6539 $O(1)$\uff0c\u67e5\u8be2 $O(\\sqrt{n})$ \uff0c\u5728\u4fee\u6539\u6570\u5927\u4e8e\u67e5\u8be2\u6570\u65f6\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u4f18\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002  \r\n\r\n\u8fd9\u5c31\u662f\u4e00\u79cd\u5e73\u8861\u7ed3\u5408\u3002  \r\n\u6839\u636e\u4fee\u6539\u4e0e\u67e5\u8be2\u6b21\u6570\u7684\u5173\u7cfb\uff0c\u901a\u8fc7\u8c03\u6574\u7ef4\u62a4\u7684\u624b\u6bb5\uff0c\u4f7f\u603b\u7684\u590d\u6742\u5ea6\u8fbe\u5230\u66f4\u4f4e\u7ea7\u522b\u3002\r\n\r\n## \u5206\u5757\u89e3\u6cd5\r\n\r\n\u64cd\u4f5c\u6570\u91cf\u8f83\u5c11\uff0c**\u5148\u5bf9\u51fa\u73b0\u7684\u6570\u79bb\u6563\u5316**\uff0c\u8bbe\u79bb\u6563\u5316\u540e\u503c\u57df\u4e3a $[1,n]$\u3002  \r\n\u67e5\u8be2\u6570\u7684\u6392\u540d\u4e0e\u67d0\u6392\u540d\u5bf9\u5e94\u7684\u6570\uff0c\u8003\u8651\u5bf9\u503c\u57df\u5206\u5757\uff0c\u8bbe\u5757\u5927\u5c0f\u4e3a $T$\u3002  \r\n\u7ef4\u62a4\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u53ca\u503c\u57df\u5206\u5757\u540e\u6bcf\u5757\u5185\u6240\u6709\u6570\u51fa\u73b0\u7684\u4e2a\u6570\u3002  \r\n\r\n\u64cd\u4f5c 1\uff0c2\uff0c\u63d2\u5165\u5220\u9664\u64cd\u4f5c\uff0c$O(1)$ \u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002  \r\n\r\n\u64cd\u4f5c 3\uff0c\u67e5\u8be2\u6392\u540d\u64cd\u4f5c\uff0c\u5373\u67e5\u8be2\u8be5\u6570\u5de6\u4fa7\u6240\u6709\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002  \r\n\u6574\u5757\u76f4\u63a5\u67e5\u8be2\uff0c\u6563\u5757\u66b4\u529b\uff0c\u590d\u6742\u5ea6\u4e0a\u754c $O(\\frac{n}{T} + T)$\u3002  \r\n\r\n\u64cd\u4f5c 4\uff0c\u67e5\u8be2\u67d0\u6392\u540d\u5bf9\u5e94\u7684\u6570\uff0c\u5927\u529b\u679a\u4e3e\u5373\u53ef\u3002  \r\n\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6574\u5757\uff0c\u7d2f\u8ba1\u7ef4\u62a4\u503c\u57df\u5185\u6240\u6709\u6570\u51fa\u73b0\u6b21\u6570\u4e4b\u548c\u3002  \r\n\u5f53\u7d2f\u8ba1\u503c + \u6700\u540e\u4e00\u4e2a\u679a\u4e3e\u5230\u7684\u6574\u5757 $\\ge x$ \u65f6\uff0c\u8bf4\u660e\u7b54\u6848\u5c31\u5728\u8be5\u5757\u4e2d\u3002  \r\n\u518d\u987a\u5e8f\u679a\u4e3e\u7b54\u6848\u6240\u5728\u6574\u5757\u4e2d\u7684\u6570\uff0c\u7d2f\u8ba1\u51fa\u73b0\u6b21\u6570\u76f4\u81f3 $\\ge x$ \u5373\u5f97\u3002   \r\n\u590d\u6742\u5ea6\u4e0a\u754c $O(\\frac{n}{T} + T)$\u3002  \r\n\r\n\u64cd\u4f5c 5\uff0c\u67e5\u8be2\u524d\u9a71\u3002  \r\n\u5148\u679a\u4e3e $x$ \u6240\u5728\u6563\u5757\u5185 $< x$ \u7684\u6570\uff0c\u68c0\u67e5\u662f\u5426\u5b58\u5728\u3002  \r\n\u518d\u679a\u4e3e $x$ \u4e4b\u524d\u7684\u6574\u5757\uff0c\u76f4\u81f3\u627e\u5230\u4e00\u4e2a\u5185\u90e8\u6709\u6570\u7684\u6574\u5757\u3002  \r\n\u7b54\u6848\u5c31\u5728\u8be5\u6574\u5757\u4e2d\uff0c\u964d\u5e8f\u679a\u4e3e\u627e\u5230\u6700\u5927\u7684\u5b58\u5728\u7684\u6570\u5373\u53ef\u3002  \r\n\u590d\u6742\u5ea6\u4e0a\u754c $O(\\frac{n}{T} + T)$\u3002  \r\n\r\n\u64cd\u4f5c 6\uff0c\u67e5\u8be2\u540e\u7ee7\uff0c\u540c\u64cd\u4f5c 5 \u5927\u529b\u679a\u4e3e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5b58\u5728\u7684 $>x$ \u7684\u6570\uff0c\u590d\u6742\u5ea6\u76f8\u540c\u3002\r\n\r\n\r\n\u8bbe\u5757\u5927\u5c0f\u4e3a $\\sqrt{n}$\uff0c\u64cd\u4f5c 3 ~ 6 \u7684\u590d\u6742\u5ea6\u5747\u4e3a $O(\\sqrt n)$\uff0c\u603b\u590d\u6742\u5ea6\u4e0a\u754c $O(n\\sqrt{n})$\u3002  \r\n\u5f53\u4fee\u6539\u6b21\u6570 > \u67e5\u8be2\u6b21\u6570\u65f6\u590d\u6742\u5ea6\u8f83\u4f18\u3002\r\n\r\n\u4ee3\u7801\r\n\r\n```cpp\r\n//\u77e5\u8bc6\u70b9\uff1a\u5206\u5757\r\n/*\r\nBy:Luckyblock\r\n*/\r\n#include <algorithm>\r\n#include <cctype>\r\n#include <cmath>\r\n#include <cstdio>\r\n#include <cstring>\r\n#define ll long long\r\nconst int kMaxn = 1e5 + 10;\r\nconst int kMaxSqrtn = 320;\r\nconst int kInf = 1e9 + 2077;\r\n//=============================================================\r\nstruct Operation {\r\n  int opt, x;\r\n} q[kMaxn];\r\nint n, block_size, block_num, L[kMaxSqrtn], R[kMaxSqrtn], bel[kMaxn];\r\nint cnt[kMaxn], cntblock[kMaxSqrtn];\r\nint data_num, max_data, data[kMaxn], map[kMaxn];\r\n//=============================================================\r\ninline int read() {\r\n  int f = 1, w = 0;\r\n  char ch = getchar();\r\n  for (; !isdigit(ch); ch = getchar())\r\n    if (ch == '-') f = -1;\r\n  for (; isdigit(ch); ch = getchar()) w = (w << 3) + (w << 1) + (ch ^ '0');\r\n  return f * w;\r\n}\r\nvoid Prepare() { //\u79bb\u7ebf\u64cd\u4f5c\uff0c\u5e76\u79bb\u6563\u5316\u3002\r\n  n = read();\r\n  for (int i = 1; i <= n; ++ i) {\r\n    q[i] = (Operation) {read(), read()};\r\n    if (q[i].opt != 4) data[++ data_num] = q[i].x; //\u6ce8\u610f\u64cd\u4f5c 4 \u7684\u53c2\u6570\u4e0d\u9700\u8981\u79bb\u6563\u5316\u3002\r\n  }\r\n  data[0] = - kInf;\r\n  std :: sort(data + 1, data + data_num + 1);\r\n  for (int i = 1; i <= data_num; ++ i) {\r\n    if (data[i] != data[i - 1]) max_data ++;\r\n    data[max_data] = data[i];\r\n  }\r\n  for (int i = 1; i <= n; ++ i) {\r\n    if (q[i].opt == 4) continue;\r\n    int origin = q[i].x;\r\n    q[i].x = std :: lower_bound(data + 1, data + max_data + 1, q[i].x) - data;\r\n    map[q[i].x] = origin;\r\n  }\r\n}\r\nvoid PrepareBlock() {\r\n  block_size = (int) sqrt(max_data);\r\n  block_num = max_data / block_size;\r\n  for (int i = 1; i <= block_num; ++ i) {\r\n    L[i] = (i - 1) * block_size + 1;\r\n    R[i] = i * block_size;\r\n  }\r\n  if (R[block_num] < max_data) {\r\n    block_num ++;\r\n    L[block_num] = R[block_num - 1] + 1;\r\n    R[block_num] = max_data;\r\n  }\r\n  for (int i = 1; i <= block_num; ++ i) {\r\n    for (int j = L[i]; j <= R[i]; ++ j) {\r\n      bel[j] = i;\r\n    }\r\n  }\r\n}\r\nvoid Insert(int val_) { //O(1) \u63d2\u5165\r\n  cnt[val_] ++;\r\n  cntblock[bel[val_]] ++;\r\n}\r\nvoid Delete(int val_) { //O(1) \u5220\u9664\r\n  cnt[val_] --;\r\n  cntblock[bel[val_]] --;\r\n}\r\nint QueryRank(int val_) { //\u67e5\u8be2\u7ed9\u5b9a\u6570\u503c\u7684\u6392\u540d\r\n  int belval = bel[val_], ret = 0;\r\n  for (int i = L[belval]; i < val_; ++ i) ret += cnt[i]; //\u6ce8\u610f <val_\r\n  for (int i = 1; i < belval; ++ i) ret += cntblock[i];\r\n  return ret + 1;\r\n}\r\nint QueryVal(int rank_) { //\u67e5\u8be2\u7ed9\u5b9a\u6392\u540d\u5bf9\u5e94\u7684\u6570\r\n  int size = 0, ret, belval;\r\n  for (belval = 1; belval <= block_num; ++ belval) {\r\n    if (size + cntblock[belval] >= rank_) break;\r\n    size += cntblock[belval];\r\n  }\r\n  for (ret = L[belval]; ret <= R[belval]; ++ ret) {\r\n    if (size + cnt[ret] >= rank_) break;\r\n    size += cnt[ret];\r\n  }\r\n  return ret;\r\n}\r\nint QueryAhead(int val_) { //\u67e5\u8be2\u524d\u9a71\r\n  int belval = bel[val_];\r\n  for (int i = val_ - 1; i >= L[belval]; -- i) {\r\n    if (cnt[i]) return i;\r\n  }\r\n  for (int i = belval - 1; i; -- i) {\r\n    if (! cntblock[i]) continue;\r\n    for (int j = R[i]; j >= L[i]; -- j) {\r\n      if (cnt[j]) return j;\r\n    }\r\n  }\r\n}\r\nint QueryBack(int val_) { //\u67e5\u8be2\u540e\u7ee7\r\n  int belval = bel[val_];\r\n  for (int i = val_ + 1; i <= R[belval]; ++ i) {\r\n    if (cnt[i]) return i;\r\n  }\r\n  for (int i = belval + 1; i <= block_num; ++ i) {\r\n    if (! cntblock[i]) continue;\r\n    for (int j = L[i]; j <= R[i]; ++ j) {\r\n      if (cnt[j]) return j;\r\n    }\r\n  }\r\n}\r\nvoid koishi() {\r\n  int satori;\r\n}\r\n//=============================================================\r\nint main() {\r\n  Prepare();\r\n  PrepareBlock();\r\n  for (int i = 1; i <= n; ++ i) {\r\n    int opt = q[i].opt, x = q[i].x;\r\n    if(opt == 1) Insert(x);\r\n    if(opt == 2) Delete(x);\r\n    if(opt == 3) printf(\"%d\\n\", QueryRank(x));\r\n    if(opt == 4) printf(\"%d\\n\", map[QueryVal(x)]);\r\n    if(opt == 5) printf(\"%d\\n\", map[QueryAhead(x)]);\r\n    if(opt == 6) printf(\"%d\\n\", map[QueryBack(x)]);\r\n  }\r\n  return 0; \r\n}\r\n```\r\n\r\n## \u4e00\u4e2a\u4f8b\u5b50\r\n\r\n[\u53ef\u80fd\u662f\u96c6\u8bad\u9898\u7684\u65e0\u51fa\u5904\u9898](http://114514.cn)  \r\n\r\n>\u7ed9\u5b9a\u4e00\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u5217 $a$\uff0c\u53c2\u6570 $w$\uff0c$q$ \u6b21\u8be2\u95ee\u3002  \r\n>\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a\u53c2\u6570 $l,r$\uff0c\u6c42\u5ffd\u7565\u51fa\u73b0\u6b21\u6570 $>w$ \u7684\u6570\u540e\uff0c\u533a\u95f4 $[l,r]$ \u5185\u7b2c $k$ \u5c0f\u503c\u3002   \r\n>$1\\le n,q,a_i,w\\le10^5$\u3002 \r\n\r\n\u5ffd\u7565\u51fa\u73b0\u6b21\u6570 $>w$ \u7684\u6570\uff0c\u6ca1\u6cd5\u4e0a\u4e3b\u5e2d\u6811\u3002  \r\n\u4f46\u663e\u7136\u53ef\u4ee5\u83ab\u961f\u5957\u5e73\u8861\u6811\uff0c\u5f53\u679a\u4e3e\u7684\u533a\u95f4\u5185\u67d0\u4e2a\u6570\u9996\u6b21\u51fa\u73b0\u65f6\u63d2\u5165\uff0c\u51fa\u73b0\u6b21\u6570 $=0$ \u6216 $> w$ \u65f6\u5220\u9664\u3002  \r\n\r\n$n,a_i$ \u540c\u7ea7\uff0c\u4fee\u6539\u548c\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u76f8\u540c\uff0c\u5747\u4e3a $O(\\log n)$\u3002  \r\n\u5757\u5927\u5c0f\u4e3a $T$ \u65f6\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O((\\frac{n^2}{T}+qT)\\log n + q\\log n)$\u3002  \r\n\u5757\u5927\u5c0f\u4e3a $\\frac{n}{\\sqrt{q}}$ \u65f6\u6700\u4f18\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt{q}\\log n+ q\\log n)$\uff0c\u8fc7\u4e0d\u4e86\u3002  \r\n\r\n\u53d1\u73b0\u5757\u5927\u5c0f\u4e3a $T$ \u65f6\uff0c\u83ab\u961f\u4e2d\u4e00\u5171\u6709 $\\frac{n^2}{T}+qT$ \u6b21\u4fee\u6539\u64cd\u4f5c\uff0c\u4f46\u53ea\u6709 $q$ \u6b21\u67e5\u8be2\u64cd\u4f5c\u3002  \r\n\u8003\u8651\u5e73\u8861\u7ed3\u5408\uff0c\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u4f7f\u7528\u5206\u5757\u7ef4\u62a4\u533a\u95f4\u7b2c $k$ \u5c0f\u503c\u3002  \r\n\u5355\u6b21\u4fee\u6539\u590d\u6742\u5ea6\u53d8\u4e3a $O(1)$\uff0c\u67e5\u8be2\u53d8\u4e3a $O(\\sqrt{n})$\uff0c\u603b\u590d\u6742\u5ea6 $O(\\frac{n^2}{T}+qT + q\\sqrt{n})$\u3002  \r\n\u5757\u5927\u5c0f\u53d6 $\\frac{n}{\\sqrt{q}}$ \u65f6\u6700\u4f18\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt{q} + q\\sqrt{n})$\u3002\r\n\r\n## \u4e24\u4e2a\u4f8b\u5b50\r\n\r\n[P4867 Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217](https://www.luogu.com.cn/problem/P4867) \r\n\r\n>\u7ed9\u5b9a\u4e00\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u5217 $a$\uff0c$m$ \u6b21\u8be2\u95ee\u3002  \r\n>\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a\u53c2\u6570 $l,r,a,b$\uff0c\u6c42\u533a\u95f4 $[l,r]$ \u5185\u6743\u503c $\\in [a,b]$ \u7684\u6570\u7684\u79cd\u7c7b\u6570\u3002   \r\n>$1\\le a_i\\le n\\le 10^5$\uff0c$1\\le m\\le 10^6$\u3002\r\n\r\n---\r\n\r\n\u53d1\u73b0\u83ab\u961f\u6bd4\u8f83\u4fbf\u4e8e\u7ef4\u62a4\u79cd\u7c7b\u6570\uff0c\u5957\u4e00\u4e2a\u83ab\u961f\u6d88\u53bb\u533a\u95f4\u7684\u9650\u5236\u3002  \r\n\u8003\u8651\u503c\u57df\u7684\u9650\u5236\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\u3002  \r\n\u5355\u6b21 \u4fee\u6539/\u67e5\u8be2 \u590d\u6742\u5ea6\u5747\u4e3a $O(\\log n)$\u3002  \r\n\u8bbe\u5757\u5927\u5c0f\u4e3a $\\dfrac{n}{\\sqrt{m}}$\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt{m}\\log n + m\\log n)$\u3002\r\n\r\n\u53ea\u6709\u5355\u70b9\u4fee\u6539\uff0c\u8003\u8651\u5bf9\u503c\u57df\u5206\u5757\uff0c\u7ef4\u62a4\u5757\u5185\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\uff0c\u53ef\u5728\u83ab\u961f\u5de6\u53f3\u7aef\u70b9\u79fb\u52a8\u987a\u4fbf\u7ef4\u62a4\u3002  \r\n\u67e5\u8be2\u65f6\uff0c\u5728\u67e5\u8be2\u503c\u57df\u5185\u7684\u5b8c\u6574\u5757\u76f4\u63a5\u7edf\u8ba1\u7b54\u6848\uff0c\u4e0d\u5b8c\u6574\u5757\u66b4\u529b\u67e5\u8be2\u3002  \r\n\u8bbe\u5757\u5927\u5c0f\u4e3a $\\dfrac{n}{\\sqrt{m}}$\uff0c\u5355\u6b21\u4fee\u6539\u590d\u6742\u5ea6 $O(1)$\uff0c\u67e5\u8be2\u590d\u6742\u5ea6 $\\sqrt{n}$\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt{m} +m\\sqrt{n})$\u3002\r\n\r\n\u4ee3\u7801\u8be6\u89c1\uff1a[\u6211\u7684 Blog](https://www.cnblogs.com/luckyblock/p/13611018.html)\u3002",
        "postTime": 1599563450,
        "uid": 186186,
        "name": "\u7075\u4e4c\u8def\u7a7a",
        "ccfLevel": 0,
        "title": "\u5e73\u8861\u7ed3\u5408"
    },
    {
        "content": "Powered by ***Vanadianfan***.\n\n## \u5199\u5728\u524d\u9762\n\n\u6000\u7740\u5f02\u6837\u7684\u5fc3\u60c5\u7b14\u8005\u5199\u4e0b\u4e86\u4eba\u751f\u4e2d\u7684\u7b2c\u4e00\u4efd\u535a\u5ba2\uff0c\u6709\u70b9\u5c0f\u6fc0\u52a8\u5462\u3002\n\n\u7f51\u4e0a\u5173\u4e8e $Splay$ \u7684\u8bb2\u89e3\u7684\u535a\u5ba2\u5df2\u7ecf\u8db3\u591f\u591a\u4e86~~\uff08\u56e0\u4e3a\u662fTarjan\u53c2\u4e0e\u53d1\u660e\u7684\uff09~~\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u535a\u5ba2\u7684\u6c34\u5e73\u53c2\u5dee\u4e0d\u9f50\uff0c\u4f46\u8010\u5fc3\u4e1c\u627e\u627e\u897f\u627e\u627e\u540e\u603b\u80fd\u770b\u5230\u4e00\u4e9b\u6709\u7528\u7684\u90e8\u5206\uff0c\u849f\u84bb\u7b14\u8005\u4e5f\u662f\u6323\u624e\u5728\u8fd9\u4e9b\u535a\u5ba2\u4e2d\u5b66\u61c2\u7684\u3002\n\n\u5982\u679c\u51d1\u5de7\u7ffb\u5230\u8fd9\u7bc7\u535a\u5ba2\u7684\u670b\u53cb\u8fd8\u6ca1\u6709\u5b66\u4f1a $Splay$\uff0c~~\u6211\u4e00\u5b9a\u4e0d\u4f1a\u544a\u8bc9\u4f60~~\u5bf9\u4e8e $Splay$\uff0c\u4f60\u53ea\u9700\u8981\u6e05\u695a\u51e0\u4ef6\u4e8b\uff1a\n\n- \u5de6\u65cb\u548c\u53f3\u65cb\u7684\u56fe\u89e3\u539f\u7406\uff08\u662f\u4ec0\u4e48\uff09\n- \u4e3a\u4ec0\u4e48\u9700\u8981\u65cb\u8f6c\uff1f\uff08\u4e3a\u4ec0\u4e48\uff09\n- \u65cb\u8f6c\u771f\u7684\u4f1a\u8ba9\u6811\u66f4\u52a0\u5e73\u8861\u5417\uff1f\uff08\u662f\u8fd9\u6837\u5417\uff09\uff08\u6279\u5224\u6027\u601d\u7ef4\u975e\u5e38\u91cd\u8981\uff09\n- \u600e\u6837\u65cb\u8f6c\u4f1a\u4f7f\u6574\u68f5\u6811\u66f4\u8d8b\u4e8e\u5e73\u8861\uff1f\uff08\u600e\u4e48\u529e\uff09\n\n\u7b54\u6848\u5e76\u4e0d\u96be\uff0c\u9ed8\u8ba4\u5927\u5bb6\u90fd\u77e5\u9053\u4e86\uff0c\u672c\u6587\u7684\u521d\u8877\u662f\u8be6\u8bb2\u6a21\u677f\u7ec6\u8282\u3002\n\n\u4e5f\u5c31\u662f\u5982\u4f55\u5199**\u597d\u7528\u7684\u57fa\u7840Splay\u6a21\u677f**\u3002\n\n\u8fd9\u4e9a\u5b50 $Splay$ \u5269\u4e0b\u7684\u90e8\u5206\u5c31\u548c\u4e8c\u53c9\u67e5\u627e\u6811\u4e00\u6478\u4e00\u6837\u4e86\uff0c\u7801\u91cf\u7565\u5927\uff0c\u7b14\u8005\u5199\u7684\u4e5f\u5c314000B\u591a\u4e00\u70b9\uff08VSCode\u663e\u793a4081B\uff09\u3002\u56e0\u4e3a\u6570\u636e\u7ed3\u6784\u7684\u7ec6\u8282\u8f83\u591a\uff0c\u5e0c\u671b\u4e0b\u9762\u4ee3\u7801\u7684\u6ce8\u91ca\u80fd\u5bf9\u521d\u5b66 $Splay$ \u7684\u8bfb\u8005\u63d0\u4f9b\u5e2e\u52a9\u3002\n\n\u7b14\u8005\u826f\u5fc3\u53d1\u73b0\uff0c\u52a0\u4e86\u6ce8\u91ca\u4e4b\u540e\u4ee3\u7801\u957f\u5ea6\u53d8\u4e3a\u4e86\u2026\u20266735B\u3002\n\n## \u51c6\u5907\n\n\u5728\u5f00\u59cb\u9605\u8bfb\u57fa\u672c\u6a21\u7248**\u4ee3\u7801**\u548c\u6ce8\u91ca\u524d\uff0c\u4f60\u9700\u8981\u9605\u8bfb\u4ee5\u4e0b\u8bf4\u660e\u3002\n\n1. \u4ee3\u7801\u5168\u90e8\u4f7f\u7528**\u6307\u9488**\u3002\u5b83\u4f1a\u6bd4\u4f7f\u7528\u5f88\u591a\u6570\u7ec4\u7684\u5199\u6cd5\u5feb\uff1b\u548c\u7ed3\u6784\u4f53\u6570\u7ec4\u7684\u5199\u6cd5\u901f\u5ea6\u76f8\u5f53\u3002\n\n2. \u901a\u8fc7\u9884\u5148\u58f0\u660e\u5185\u5b58\u6c60\u56de\u6536\u65e0\u7528\u7684\u6307\u9488\u3002\u907f\u514d\u8017\u65f6\u53c8\u4f4e\u80fd\u7684\u5173\u952e\u5b57 **new\u200b** \u548c **delete\u200b**\u3002\n\n3. \u7b14\u8005\u7684\u4e60\u60ef\u662f\u80fd\u7528\u82f1\u6587\u5355\u8bcd\u4f5c\u4e3a\u540d\u79f0\u7684\u4e00\u5f8b\u4e0d\u7528\u4e2d\u6587\u62fc\u97f3\u7f29\u5199\u6216\u8005\u65e5\u8bed\u7f57\u9a6c\u97f3\u7f29\u5199\u3002\n\n4. \u51fa\u4e8e\u5ba1\u7f8e\u9700\u8981\uff0c\u7b14\u8005\u4e0d\u559c\u6b22\u5728\u4ee3\u7801\u4e2d\u95f4\u7a7a\u4e00\u884c\u6765\u5199\u6ce8\u91ca\uff0c\u6240\u4ee5\u53ea\u5199\u5728\u4e00\u884c\u4ee3\u7801\u7684\u540e\u9762\uff0c\u656c\u8bf7\u8c05\u89e3\u3002\n\n5. **\u5982\u679c\u8fd0\u7b97\u7b26\u548c\u53d8\u91cf\u540d\u4e4b\u95f4\u4e0d\u52a0\u7a7a\u683c\uff0c\u7b14\u8005\u4f1a\u7a92\u606f\u3002**\n\n6. \u53d8\u91cf\u540d\u8bf4\u660e\uff1a\n\n   - $lst$ = left subtree\u200b\uff0c\u5de6\u5b50\u6811\uff1b$rst$ \u540c\u7406\u3002\n   - $pre$\uff0c\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u6307 $this$ \u7684\u7236\u4eb2\u8282\u70b9\u3002\n   - $key$\uff0c\u952e\u503c\uff0c\u7406\u89e3\u4e3a\u8be5\u8282\u70b9\u7684\u201c\u5173\u952e\u201d\uff0c\u5728\u8fd9\u91cc\u662f\u6307\u8282\u70b9\u7684\u6743\u503c\u3002\n   - $weight$\uff0c\u5b9e\u9645\u8bb0\u5f55\u7684\u662f\u8be5\u6743\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u5e0c\u671b\u5bf9\u91cd\u590d\u7684\u503c\u5f00\u5f88\u591a\u4e2a\u70b9\u3002\n   - $size$\uff0c\u5b50\u6811\u7684\u5927\u5c0f\uff08\u9700\u8981\u7b97\u4e0a\u5b50\u6811\u5185\u8282\u70b9\u7684 $weight$ \uff09\uff0c\u7528\u4e8e\u6392\u540d\u5b9a\u4f4d\u548c\u8ba1\u7b97\u6392\u540d\u3002\n   - \u4ee5\u4e0a\u662f\u5173\u4e8e\u8282\u70b9\u7684\uff0c\u5176\u4f59\u8be6\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\n\n7. \u9884\u5148\u52a0\u5165 -INF\u200b \u548c INF \u53ef\u4ee5\u9632\u6b62\u4e00\u4e9b\u7384\u5b66\u7684\u8fb9\u754c\u95ee\u9898\u3002\uff08\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48\uff09\n\n8. \u628a\u51fd\u6570\u5199\u8fdb **class** \u662f\u56e0\u4e3a\u5b83\u53ef\u4ee5\u63d0\u4f9b **private** \u548c **protected** \u5173\u952e\u5b57\uff0c\u8fd9\u6837\u5047\u82e5\u8bfb\u8005\u548c\u6211\u4e00\u6837\u4f7f\u7528**VSCode**\uff0c\u6216\u8005\u8bf8\u5982**Notepad++**\u3001~~DevC++~~\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\u65f6\uff0c\u53ef\u4ee5\u907f\u514d\u628a\u6709\u4e9b\u6211\u4eec\u4e0d\u60f3\u770b\u5230\u7684\u51fd\u6570\u663e\u793a\u51fa\u6765\uff0c\u4f8b\u5982\u5728 $main$ \u51fd\u6570\u4e2d\u4f60\u80af\u5b9a\u4e0d\u5e0c\u671b\u5728\u8865\u5168\u65f6\u770b\u89c1 $Rotate$ \u51fd\u6570\u3002\n\n   **class\u200b** \u53ef\u4ee5\u914d\u5408\u5185\u5b58\u6c60\u3002~~\u8fd9\u4e9a\u5b50\u4ee3\u7801\u770b\u7740\u5f88\u8212\u670d\u3002~~\n\n9. \u5982\u679c\u4f60\u4e0d\u559c\u6b22 **namespace\u200b** \u7684\u5c01\u88c5\uff0c\u4f60\u53ef\u4ee5\u624b\u52a8\u62ff\u6389\u3002\n\n10. \u5927\u591a\u6570\u4eba\u5bf9\u4e8e\u5b50\u6811\u4e60\u60ef\u5199 $ch[2]$\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u53ef\u4ee5\u76f4\u63a5\u7528\u5224\u65ad\u51fd\u6570\u7684\u7ed3\u679c\u4f5c\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u4f46\u7b14\u8005\u597d\u50cf\u5e76\u4e0d\u662f\u5f88\u559c\u6b22\u201c\u7236\u4eb2\u201d\u201c\u513f\u5b50\u201d\u201c\u7956\u5148\u201d\u201c\u5144\u5f1f\u201d\u7684\u8868\u8ff0\u65b9\u5f0f\uff1f\uff1f\uff1f\u5206\u5f00\u5199\u4f5c $lst$ \u548c $rst$\uff0c\u6211\u60f3\u8fd9\u6837\u5927\u5bb6\u4f1a\u770b\u5f97\u66f4\u6e05\u695a\u4e00\u4e9b\u3002\n\n\u5f00\u59cb\u5427\u3002\n\n~~~cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nconst int INF = 0x3f3f3f3f; // \u6216\u8005\u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528climits\u5e93\u91cc\u9762\u7684INT_MAX\ninline void read(int &w){ // \u6a21\u677f\u9898\u8f93\u5165\u91cf\u8fd8\u662f\u86ee\u5927\u7684\uff0c\u63a8\u8350\u4f7f\u7528\u590d\u5236\u7c98\u8d34\n\tw = 0; char c = 0; int f = 1;\n\twhile(!isdigit(c)){if(c == '-') f = -f; c = getchar();}\n\twhile(isdigit(c)) w = (w << 3) + (w << 1) + c - '0', c = getchar(); w *= f;\n}\nnamespace Splay_Tree{\n\t#define MAXN 100023\n\t#define trial (val < cur->key ? cur->lst : cur->rst) // \u53ef\u4ee5\u770b\u51fa\u8fd9\u662f\u6839\u636e\u952e\u503c\u5411\u4e0b\u7684\u8fc7\u7a0b\u3002\u5199\u7740\u592a\u957f\u4e86\n\tstruct Node{ // \u8865\u5145\u8bf4\u4e00\u53e5\uff0c\u4e0a\u9762\u90a3\u4e2a\u5b8f\u5b9a\u4e49\u5b8c\u5168\u662f\u6309\u7167\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5b9a\u4e49\u6765\u7684\uff0c\u5e94\u8be5\u95ee\u9898\u4e0d\u5927\n\t\tNode *lst, *rst, *pre;\n\t\tint key, weight, size;\n\t\tbool isLsubT(){return this == this->pre->lst;} // \u901a\u8fc7\u5b83\u83b7\u77e5\u5f53\u524d\u8282\u70b9\u662f\u5176pre\u7684lst\u8fd8\u662frst\n\t\tvoid InfoUpdate(){this->size = lst->size + rst->size + this->weight;} // \u4e00\u952e\u66f4\u65b0\u8282\u70b9\u6570\u636e\n\t};\n\tclass SplayTree{\n\tprotected: // \u4ee5\u4e0b\u5f88\u591a\u4e1c\u897f\u662f\u6211\u5728main\u51fd\u6570\u91cc\u8c03\u7528\u65f6\u4e0d\u5e0c\u671b\u81ea\u52a8\u8865\u5168\u65f6\u663e\u793a\u51fa\u6765\u7684\n\t\tNode MemoryPool[MAXN]; // \u7533\u8bf7\u5185\u5b58\u6c60\n\t\tNode *root, *tail, *null; // \u7528\u4e00\u4e2a\u4ec0\u4e48\u503c\u90fd\u662f0\u3001\u81ea\u5df1\u6307\u5411\u81ea\u5df1\u7684\u540d\u53ebnull\u7684\u8282\u70b9\u4ee3\u66ffNULL\uff0c\u907f\u514d\u6bb5\u9519\u8bef\n\t\tNode *bin[MAXN]; int bin_top; // \u201cbin\u201d\u662f\u201c\u5bb9\u5668\u201d\u6216\u201c\u5783\u573e\u6876\u201d\u7684\u610f\u601d\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6808\u3002tail\u662f\u5185\u5b58\u6c60\u7684\u6307\u9488\n\t\tNode *NewNode(int key){ // \u8fd9\u4e2a\u51fd\u6570\u6267\u884c\u7684\u662f\u7c7b\u4f3cNode(){\u2026}\u7684\u8282\u70b9\u521d\u59cb\u5316\n\t\t\tNode *x = bin_top ? bin[--bin_top] : tail++; // \u5982\u679c\u5783\u573e\u6876\u91cc\u6709\u4e1c\u897f\u5c31\u53ef\u4ee5\u56de\u6536\u5229\u7528\u5566\n\t\t\tx->key = key;\n\t\t\tx->weight = x->size = 1; // \u65b0\u5efa\u8282\u70b9\u7684\u65f6\u5019\u8fd9\u4e24\u4e2a\u503c\u80af\u5b9a\u662f1\u6ca1\u6709\u7591\u95ee\n\t\t\tx->pre = x->lst = x->rst = null; // null\u8282\u70b9\u6d3e\u4e0a\u7528\u573a\n\t\t\treturn x;\n\t\t}\n\t\tvoid Midorder(Node *cur){ // \u8fd9\u4e2a\u4e2d\u5e8f\u8f93\u51fa\u662f\u65b9\u4fbf\u540e\u671f\u8c03\u8bd5\u67e5\u770b\u8fc7\u7a0b\u7684\uff0c\u4f60\u77e5\u9053\u6307\u9488\u5f88(b\u00f9)\u597d\u8c03\u8bd5\n\t\t\tif(cur == null) return;\n\t\t\tif(cur->key == -INF || cur->key == INF) return; // \u6211\u4eec\u5e76\u4e0d\u662f\u5f88\u60f3\u770b\u5230\u5b83\u4eec\uff0c\u8fc7\u6ee4\u6389\n\t\t\tMidorder(cur->lst); // \u9012\u5f52\u6267\u884c\u5de6\u5b50\u6811\n\t\t\tfor(int i = 0; i < cur->weight; i++)\n\t\t\t\tprintf(\"%d \", cur->key); // cout << cur->key << endl;\n\t\t\tMidorder(cur->rst); // \u9012\u5f52\u6267\u884c\u53f3\u5b50\u6811\n\t\t}\n\t\tvoid Clear(Node *x){ // \u8fd9\u4e2a\u51fd\u6570\u7528\u6765\u5220\u9664\u4ee5x\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u4e00\u822c\u6ca1\u6709\u7528\uff0c\u4e5f\u8bb8\u53ef\u80fd\u5927\u6982\u67d0\u9053\u9898\u76ee\u80fd\u7528\u4e0a\n\t\t\tif(x == null) return;\n\t\t\tClear(x->lst);\n\t\t\tClear(x->rst);\n\t\t\tbin[bin_top++] = x; // \u5f88\u91cd\u8981\u7684\u56de\u6536\u8282\u70b9\u7684\u64cd\u4f5c\u2014\u2014\u628a\u5b83\u653e\u8fdb\u5783\u573e\u6876\n\t\t}\n\t\tvoid Rotate(Node *x){ // \u4e3a\u4e86\u7f29(k\u00e0n)\u51cf(zhe)\u7801(sh\u016b)\u91cf(f\u00fa)\u628a\u5de6\u65cb\u548c\u53f3\u65cb\u5199\u5230\u4e00\u8d77\uff0c\u5f53\u7136\u7528ch[2]\u66f4\u597d\u5199\n\t\t\tNode *y = x->pre, *z = y->pre; // \u5de6\u53f3\u65cb\u90fd\u53ea\u4e0e\u8fd93\u4e2a\u8282\u70b9\u6709\u5173\n\t\t\tint k = x->isLsubT(); // \u5148\u8bb0\u5f55\u597dx\u8282\u70b9\u7684\u5c5e\u6027\uff0c\u56e0\u4e3a\u4e0b\u4e00\u6b65\u5c31\u4f1a\u88ab\u4fee\u6539\uff0c\u800c\u540e\u9762\u8fd8\u4f1a\u7528\u5230\n\t\t\tif(y->isLsubT()) z->lst = x; else z->rst = x;\n\t\t\tx->pre = z; // \u8fd9\u4e24\u884c\u4f7fx\u66ff\u4ee3\u4e86y\u7684\u4f4d\u7f6e\uff0c\u539f\u6765y\u548cz\u7684\u5173\u7cfb\u5c31\u662f\u73b0\u5728x\u4e0ez\u7684\u5173\u7cfb\n\t\t\tif(k) y->lst = x->rst, x->rst->pre = y; // \u5982\u679c\u539f\u5148x\u5728y\u7684\u5de6\u8fb9\uff0c\u90a3x\u7684\u53f3\u5b50\u6811\u6302\u5728y\u7684\u5de6\u8fb9\uff08\u53f3\u65cb\uff09\n\t\t\telse y->rst = x->lst, x->lst->pre = y; // \u5982\u679c\u539f\u5148x\u5728y\u7684\u53f3\u8fb9\uff0c\u90a3x\u7684\u5de6\u5b50\u6811\u6302\u5728y\u7684\u53f3\u8fb9\uff08\u5de6\u65cb\uff09\n\t\t\tif(k) x->rst = y; else x->lst = y; // \u53f3\u65cby\u8f6c\u5230x\u7684\u53f3\u8fb9\uff0c\u5de6\u65cby\u8f6c\u5230x\u7684\u5de6\u8fb9\n\t\t\ty->pre = x; y->InfoUpdate(); // x\u8f6c\u5230y\u7684\u4e0a\u9762\u6beb\u65e0\u7591\u95ee\u3002\u8f6c\u5b8c\u4e86\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\n\t\t}\n\t\tvoid Splay(Node *x, Node *ter){ // Splay\u64cd\u4f5c\uff0c\u51fd\u6570\u5b9a\u4e49\u662f\u628ax\u8282\u70b9\u8f6c\u5230\u7684ter(terminal)\u8282\u70b9\u7684\u4e0b\u9762\n\t\t\twhile(x->pre != ter){ // \u8fd8\u6ca1\u5230terminal\u7684\u4e0b\u9762\u5462\n\t\t\t\tNode *y = x->pre; // \u4e0b\u97624\u884c\u8981\u8fde\u7740\u4e00\u8d77\u8bfb\uff014\u884c\u4e4b\u540e\u76843\u884c\u4e5f\u8981\u4e00\u8d77\u8bfb\uff01\n\t\t\t\tif(y->pre != ter) // \u8fd9\u91cc\u6d89\u53ca\u5230\u6211\u4e00\u5f00\u59cb\u7684\u95ee\u9898\u7684\u6700\u540e\u4e00\u4e2a\uff1a\u5982\u4f55\u65cb\u8f6c\u3002\u5047\u5982y\u8fd8\u53ef\u4ee5\u8f6c\uff0c\u90a3\u4e48\u5982\u679c\n\t\t\t\t\tRotate(x->isLsubT() == y->isLsubT() ? y : x); // x\u548cy\u540c\u5728\u5de6\u8fb9\u6216\u8005\u540c\u5728\u53f3\u8fb9\u5148\u8f6cy\uff0c\u5426\u5219\u5148\u8f6cx\uff0c\n\t\t\t\tRotate(x); // \u7136\u540e\u518d\u8f6cx\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u9632\u6b62\u8f6c\u4e86\u4e4b\u540e\u8fd8\u662f\u4e00\u6761\u94fe\uff08\u76f8\u4fe1\u5927\u5bb6\u5f88\u6e05\u695a\uff09\uff1b\n\t\t\t} // \u5f53\u7136\u5982\u679cy\u8f6c\u4e0d\u4e86\uff08y\u7684\u5934\u9876\u5c31\u662f\u7ec8\u70b9\u5566\uff09\u7684\u8bdd\uff0c\u5c31\u53ea\u80fd\u8f6cx\u3002\n\t\t\tx->InfoUpdate(); // \u82e5\u521a\u521aRotate\u91cc\u9762\u66f4\u65b0x\u7684\u4fe1\u606f\u5c31\u4f1a\u66f4\u65b0x\u5f88\u591a\u6b21\uff0c\n\t\t\tif(ter == null) root = x; // \u4f46\u56e0\u4e3ax\u4e00\u76f4\u5728\u5f80\u4e0a\u8d70\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u6700\u540e\u66f4\u65b0\u4e00\u6b21\u5c31\u591f\u4e86\uff0c\u7b97\u662f\u4e00\u70b9\u70b9\u5e38\u6570\u4f18\u5316\u3002\n\t\t} // \u4e5f\u8bb8\u5feb\u4e0d\u4e86\u591a\u5c11\uff0c\u4f46\u8fd9\u8bf4\u660e\u4f60\u5bf9Splay\u64cd\u4f5c\u7684\u7406\u89e3\u66f4\u6df1\u4e86\n\t\tvoid Search(int val){ // \u8fd9\u662f\u4e00\u4e2a\u67e5\u627e\u67d0\u4e2aval(value\uff0c\u503c)\u662f\u5426\u5b58\u5728\u7684\u51fd\u6570\n\t\t\tif(root == null) return;\n\t\t\tNode *cur = root; // cur(current\uff0c\u201c\u5f53\u524d\u7684\u201d\u6216\u201c\u6d0b\u6d41\u201d\u7684\u610f\u601d)\u6307\u7684\u662f\u5f53\u524d\u8282\u70b9\n\t\t\twhile(val != cur->key){ // \u5c3d\u91cf\u4e0d\u7528\u9012\u5f52\n\t\t\t\tNode *Next = trial; // \u5148\u8bd5\u63a2\u4e00\u4e0bcur\u7684\u4e0b\u4e00\u6b65\u662f\u4e0d\u662f\u60ac\u5d16\n\t\t\t\tif(Next == null) break; // \u662f\u60ac\u5d16\u5c31\u7b97\u4e86\uff0c\u8bf4\u660e\u6ca1\u6709\u6811\u91cc\u6ca1\u6709\u76ee\u6807\u503c\n\t\t\t\tcur = Next; // \u4e0b\u4e00\u6b65\u8fd8\u662f\u571f\u5730\u5c31\u7ee7\u7eed\u8d70\u4e0b\u53bb\uff0c\u8fd8\u6709\u627e\u5230\u76ee\u6807\u503c\u7684\u53ef\u80fd\uff0c\u4e8e\u662f\u5faa\u73af\n\t\t\t} // \u6309\u201c\u8d70\u4e00\u6b65\uff0c\u518d\u8d70\u4e00\u6b65\u201d\u7406\u89e3\u5c31\u597d\n\t\t\tSplay(cur, null); // \u6ca1\u4e8b\u5c3d\u91cf\u591a\u8f6c\u4e00\u8f6c\u3002\u597d\u5904\u5982\u4e0b\uff1a1.\u6709\u76ca\u8eab\u4f53\u5065\u5eb7 2.\u6811\u5f62\u4f1a\u66f4\u52a0\u5300\u79f0\u5706\u6ed1~~\uff08\u5e73\u8861\uff09\n\t\t} // \u7531\u4e8e\u8fd9\u91cc\u6709Splay\uff0c\u90a3\u5c31\u610f\u5473\u7740\uff0c\u6211\u4eec\u5728\u627e\u5230\u4e4b\u540e\u987a\u5e26\u628a\u90a3\u4e2a\u8282\u70b9\u8f6c\u5230\u4e86\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u8fd9\u5c06\u6709\u610f\u60f3\u4e0d\u5230\u7684\u5999\u5904\n\tpublic: // \u6211\u4eec\u53ea\u5e0c\u671b\u5728\u5916\u90e8\u770b\u5230\u4e0b\u9762\u8fd9\u4e9b\u51fd\u6570\n\t\tSplayTree(void){ // \u5f53\u6211\u4eec\u521b\u5efa\u4e00\u68f5Splay\u6811\u7684\u65f6\u5019\u9700\u8981\u505a\u7684\n\t\t\ttail = MemoryPool; // tail\u662f\u5185\u5b58\u6c60\u7684\u6307\u9488\uff0c\u5b83\u6307\u7684\u4f4d\u7f6e\u5c31\u662f\u4e0b\u4e00\u6b21\u4f7f\u7528\u4f4d\u7f6e\u3002\u5f53\u7136\u521d\u59cb\u65f6\u6307\u5411\u6570\u7ec4\u7684\u8111\u888b\u5904\n\t\t\tnull = tail++; // *null\u662f\u6307\u9488\uff0c\u6240\u4ee5\u4ec5\u4ec5\u53ea\u662f\u4e2a\u6307\u9488\u3002\u4f60\u5f97\u8ba9\u5b83\u5148\u6307\u4e00\u5757\u5185\u5b58\uff0c\u5426\u5219\u8eab\u4e3a\u91ce\u6307\u9488\u4f1a\u5bfc\u81f4\u6bb5\u9519\u8bef\n\t\t\tnull->lst = null->rst = null; // null\u6240\u6307\u7684Node\u7ed3\u6784\u4f53\u91cc\u7684\u6240\u6709\u6307\u9488\u5168\u90e8\u6307\u56de\u5b83\u81ea\u5df1\n\t\t\tnull->weight = null->weight = null->key = 0; // null\u6240\u6307\u7684Node\u7ed3\u6784\u4f53\u91cc\u7684\u6240\u6709\u503c\u4e3a0\n\t\t\troot = null, bin_top = 0; // \u6811\u7684\u6839\u8282\u70b9\u662fnull\uff0c\u8868\u660e\u6811\u4e3a\u7a7a\uff1b\u663e\u7136\u5783\u573e\u6876\u76ee\u524d\u6ca1\u88c5\u4e1c\u897f\n\t\t} // \u8fd9\u5c31\u8fbe\u6210\u4e86\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\uff1a\u8bbf\u95eeNULL\u7684\u67d0\u4e2a\u503c\u65f6\u4e0d\u4f1a\u5f15\u53d1\u6bb5\u9519\u8bef\u3002\u56e0\u4e3a\u6211\u4eec\u8bbf\u95ee\u7684\u662f\u4e00\u4e2a\u5b9e\u5b9e\u5728\u5728\u76840\uff01\n\t\tvoid Print_Midorder(void){ // \u8c03\u8bd5\u65f6\u8f93\u51fa\u4e2d\u5e8f\u904d\u5386\u7684\u516c\u6709\u51fd\u6570\u5165\u53e3\n\t\t\tMidorder(root); // \u5185\u90e8\u8c03\u7528\u79c1\u6709\u51fd\u6570\uff0c\u4ee5\u4e0b\u539f\u7406\u7686\u540c\n\t\t\tprintf(\"\\n\"); // cout << endl;\n\t\t}// \u5b8c\u7f8e\u89e3\u51b3\u4e86\u8c03\u8bd5\u8f93\u51fa\u65f6\u6362\u884c\u7b26\u7684\u9ebb\u70e6\n\t\tint Calculate_Rank(int val){ // \u5916\u90e8\u8c03\u7528\u8ba1\u7b97\u6392\u540d\u7684\u516c\u6709\u51fd\u6570\u7684\u5165\u53e3\n\t\t\tSearch(val); // \u8981\u67e5\u627e\u7684\u503c\u88ab\u8f6c\u5230\u4e86\u6839\u7684\u4f4d\u7f6e\uff0c\u800c\u6839\u5c31\u662froot\uff0c\u8bbf\u95ee\u975e\u5e38\u65b9\u4fbf\uff01\n\t\t\treturn root->lst->size; // \u7531\u4e8e\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u653e\u4e86-INF\u8fdb\u53bb\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d+1\u4e86\n\t\t}\n\t\tNode *Rank_Locate(int k){ // \u5916\u90e8\u8c03\u7528\u901a\u8fc7\u67d0\u6392\u540d\u4e0a\u503c\u7684\u516c\u6709\u51fd\u6570\u7684\u5165\u53e3\n\t\t\tk++; // \u56e0\u4e3a-INF\u4e5f\u5360\u4e86\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6240\u4ee5\u7b2cK\u540d\u5b9e\u9645\u4e0a\u662f\u6811\u91cc\u7684\u7b2c(K+1)\u540d\n\t\t\tNode *cur = root; // \u8ba9\u6211\u4eec\u4ece\u6811\u6839\u5f00\u59cb\u722c\u6811\u5427\n\t\t\twhile(true){ // \u524d\u8def\u6f2b\u6f2b\n\t\t\t\tif(k <= cur->lst->size) cur = cur->lst; // \u4f60\u770b\u770b\u5de6\u5b50\u6811\u5927\u5c0f\u591f\u4e0d\u591fK\u8fd9\u4e48\u5927\uff0c\u4e0d\u591f\u5c31\u5f80\u5de6\u8df3\n\t\t\t\telse if(k > cur->lst->size + cur->weight){\n\t\t\t\t\tk -= cur->lst->size + cur->weight;\n\t\t\t\t\tcur = cur->rst;  // \u8fd9\u79cd\u60c5\u51b5\u662f\u8bf4\uff1a\u4f60\u770b\u770b\u5de6\u5b50\u6811\u5927\u5c0f\u548c\u5f53\u524d\u8282\u70b9weight\u7684\u603b\u548c\u90fd\u4e0d\u591fK\uff0c\u5c31\u5f80\u53f3\u8df3\n\t\t\t\t}\n\t\t\t\telse return cur; // \u90a3\u4e48\u6700\u540e\u4e00\u79cd\u60c5\u51b5\u80af\u5b9a\u5c31\u662f\uff1acur\u8282\u70b9\u5373\u4e3a\u6240\u6c42\u4e86\n\t\t\t}\n\t\t}\n\t\tNode *Foreward(int val){ // \u5916\u90e8\u8c03\u7528\u5bfb\u627e\u6743\u503c\u4e3aval\u7684\u8282\u70b9\u7684\u524d\u9a71\u7684\u516c\u6709\u51fd\u6570\u7684\u5165\u53e3\n\t\t\tSearch(val); // \u540c\u7406\uff0c\u5feb\u8f6c\u5230\u6839\u8282\u70b9\u6765\uff08\u83ab\u540d\u8054\u60f3\u5230\u201c\u5feb\u5230\u7897\u91cc\u6765\uff01\u201d\uff09\n\t\t\tif(root->key < val) return root; // \u62b1\u6b49\u4f60\u600e\u4e48\u628a-INF\u8f6c\u4e0a\u6765\u4e86\n\t\t\tNode *cur = root->lst; // \u524d\u9a71\uff1a\u5c0f\u4e8eval\u7684\u6700\u5927\u7684\u503c\uff0c\u800c\u8fd9\u4e2a\u60f3\u6cd5\u53ef\u4ee5\u53cd\u5e94\u5728\u4e8c\u53c9\u6811\u4e2d\uff1a\n\t\t\twhile(cur->rst != null) cur = cur->rst; // \u4e5f\u5c31\u662f\u5148\u5230\u5de6\u8fb9\uff08\u5c0f\u4e8eval\uff09\uff0c\u7136\u540e\u5c3d\u53ef\u80fd\u5411\u53f3\u4e0b\u8d70\uff08\u6700\u5927\uff09\n\t\t\treturn cur; // \u6293\u5230\u4e00\u53ea\u5c0f\u53ef\u7231\n\t\t}\n\t\tNode *Backward(int val){ // \u5916\u90e8\u8c03\u7528\u5bfb\u627e\u6743\u503c\u4e3aval\u7684\u8282\u70b9\u7684\u540e\u7ee7\u7684\u516c\u6709\u51fd\u6570\u7684\u5165\u53e3\n\t\t\tSearch(val);\n\t\t\tif(root->key > val) return root;\n\t\t\tNode *cur = root->rst;\n\t\t\twhile(cur->lst != null) cur = cur->lst; // \u4e0d\u8bf4\u4e86\uff0c\u4f60\u628aForeward\u91cc\u9762\u7684\u4e1c\u897f\u955c\u50cf\u4e00\u4e0b\u5c31\u662f\u4e86\n\t\t\treturn cur; // \u53c8\u6293\u4f4f\u4e86\n\t\t}\n\t\tvoid Insert(int val){ // \u5916\u90e8\u8c03\u7528\u63d2\u5165\u4e00\u4e2a\u503c\u7684\u516c\u6709\u51fd\u6570\u7684\u5165\u53e3\n\t\t\tNode *cur = root, *f = null; // f\u7528\u6765\u8bb0cur\u7684\u5934\u4e0a\u662f\u8c01\n\t\t\twhile(cur != null && val != cur->key) \n\t\t\t\tf = cur, cur = trial; // \u53c8\u5f00\u59cb\u722c\u6811\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8981\u968f\u65f6\u8bb0\u5f55cur\u7684\u5934\u4e0a\u662f\u8c01\n\t\t\tif(cur != null) ++cur->weight; // \u82e5\u8fd9\u4e2a\u503c\u5df2\u7ecf\u5b58\u5728\u8282\u70b9\u90a3\u4e48\u6570\u91cf+1\n\t\t\telse{\n\t\t\t\tcur = NewNode(val); // \u6ca1\u6709\u7684\u8bdd\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9\n\t\t\t\tif(f != null){ // \u8bf4\u660e\u8fd9\u4e2a\u65b0\u7684\u8282\u70b9\u5934\u4e0a\u662f\u6709\u4e1c\u897f\u7684\n\t\t\t\t\tval > f->key ? f->rst : f->lst = cur; // \u554a\uff01\u6709\u6ca1\u6709\u5927\u4f6c\u544a\u8bc9\u6211\u4e3a\u4ec0\u4e48\u53cd\u8fc7\u6765\u5199\u4e0d\u53d6\u7b49\u5c31\u4e0d\u884c\u554a\uff1f\n\t\t\t\t\tcur->pre = f; // \u513f\u5b50\u8ba4\u7236\u4eb2\u73b0\u573a\n\t\t\t\t}\n\t\t\t}\n\t\t\tSplay(cur, null); // \u67d0\u4e9b\u7384\u5b66\u9898\u76ee\uff0c\u4f60\u591a\u5199\u51e0\u4e2aSplay\u8bf4\u4e0d\u5b9a\u5c31\u53ef\u4ee5\u62ef\u6551\u4f60\u7684TLE\u4e86\u3002\n\t\t}\n\t\tvoid Erase_via_Value(int val){ // \u5916\u90e8\u8c03\u7528\u5220\u9664\u4e00\u4e2a\u503c\u7684\u516c\u6709\u51fd\u6570\u7684\u5165\u53e3\n\t\t\tNode *lst = Foreward(val), *nxt = Backward(val); // \u8bdd\u8bf4\u8fd9\u4e2a\u201clst\u201d\u662f\u201clast\u201d\uff0c\u201cnxt\u201d\u662f\u201cnext\u201d\n\t\t\tSplay(lst, null), Splay(nxt, lst); // \u8bf7\u60f3\u60f3\u8fd9\u4e2a\u539f\u7406\uff0c\u628aval\u7684\u524d\u9a71lst\u8f6c\u5230\u6839\uff0c\n\t\t\tNode *cur = nxt->lst; // \u628aval\u7684\u540e\u7ee7nxt\u8f6c\u5230\u6839\u7684\u53f3\u8fb9\uff0cval\u662f\u4e0d\u662f\u4e00\u5b9a\u5904\u5728nxt\u7684\u5de6\u8fb9\uff1f(lst<val<nxt)\n\t\t\tif(cur->weight > 1){\n\t\t\t\tcur->weight--; // \u5982\u679c\u8fd9\u4e2a\u8981\u64e6\u7684\u503c\u6709\u597d\u4e9b\u4e2a\uff0c\u6570\u91cf-1\u5373\u53ef\n\t\t\t\tSplay(cur, null);\n\t\t\t}\n\t\t\telse{ // \u5426\u5219\u5c31\u53ea\u6709\u5220\u9664\u8282\u70b9\u4e86\n\t\t\t\tClear(nxt->lst); // \u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u8fd9\u91cc\u5199\u6210 \"bin[bin_top++] = nxt->lst;\" \u4e5f\u53ef\u4ee5\n\t\t\t\tnxt->lst = null;\n\t\t\t    nxt->size--, lst->size--;\n\t\t\t}\n\t\t}\n\t\t#undef trial // JLY\u5927\u4f6c\u8bf4\u8fd9\u662f\u4e2a\u597d\u4e60\u60ef\n\t};\n\t#undef MAXN\n}\nusing namespace Splay_Tree;\nSplayTree __ST; // \u542c\u8bf4Windows\u64cd\u4f5c\u7cfb\u7edf\u7684\u6e90\u4ee3\u7801\u5145\u65a5\u7740\u5927\u5199\u548c\u5404\u79cd\u4e0b\u5212\u7ebf\u2026\u2026macOS\u7528\u6237\u745f\u745f\u53d1\u6296\u2026\u2026\nint main(){ // ios::sync_with_stdio(false); \u66fe\u7ecf\u7684\u6211\u5929\u771f\u5730\u4ee5\u4e3a\u5b66\u6821OJ\u4e0d\u5361scanf\u7684\u901f\u5ea6\u3002\n\t__ST.Insert(-INF), __ST.Insert(INF); // \u4f60\u770b\u6211\u6ca1\u6709\u9a97\u4f60\n\tint m; cin >> m;\n\tfor(; m; m--){\n\t\tint op, x; read(op), read(x); // cin >> opt >> x;\n\t\tif(op == 1) __ST.Insert(x);\n\t\tif(op == 2) __ST.Erase_via_Value(x);\n\t\tif(op == 3) printf(\"%d\\n\", __ST.Calculate_Rank(x));\n\t\tif(op == 4) printf(\"%d\\n\", __ST.Rank_Locate(x)->key);\n\t\tif(op == 5) printf(\"%d\\n\", __ST.Foreward(x)->key);\n\t\tif(op == 6) printf(\"%d\\n\", __ST.Backward(x)->key);\n\t\t__ST.Print_Midorder();\n\t}\n\treturn 0;\n}\n~~~\n\n~~\u4f1a\u5199Splay\uff0cLCT\u4e0d\u662f\u68a6\u3002~~\n\n## \u54b3\u54b3\n\n> \u4e07\u4e8b\u4e07\u7269\u7684\u666e\u904d\u89c4\u5f8b\uff1a\u5f00\u7aef\u3001\u53d1\u5c55\u3001\u9ad8\u6f6e\u3001\u6bc1\u706d\u3002\n\n\u5728\u594b\u529b\u5199\u4e0b\u521a\u521a\u90a3\u4e9b\u6ce8\u91ca\u4e4b\u540e\uff0c\u8fd9\u7bc7\u535a\u5ba2\u4e5f\u8be5\u7ed3\u675f\u4e86\u3002\u5728\u6ce8\u91ca\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u52a0\u6df1\u4e86\u81ea\u5df1\u7684\u7406\u89e3\uff0c\u201c\u6559\u5b66\u76f8\u957f\u4e5f\u201d\u3002\n\n\u611f\u8c22\u89c2\u770b\uff0c\u4f5c\u8005\u849f\u84bb\uff0c\u5982\u6709\u9519\u8bef\u656c\u8bf7\u6307\u6559\u3002\n\n~~\u7ed3\u5c3e\u6492\u82b1\uff01~~",
        "postTime": 1565190268,
        "uid": 171359,
        "name": "Vanadianfan",
        "ccfLevel": 0,
        "title": "\u597d\u7528\u597d\u7406\u89e3\u7684\u57fa\u7840Splay\u6a21\u677f\u6559\u7a0b"
    },
    {
        "content": "# $Scapegoat Tree$(\u66ff\u7f6a\u7f8a\u6811)\n**\u7f51\u4e0a\u8bb8\u591a\u9898\u89e3\u90fd\u4e0d\u662f\u5b8c\u6574\u7684\u66ff\u7f6a\u7f8a\u6811**\n\n\u4e00\u4e2a\u5b8c\u6574\u7684\u66ff\u7f6a\u7f8a\u6811\u8fd8\u9700\u505a\u5230\u4ee5\u4e0b\u4e24\u70b9\n\n1\u3001\u5220\u9664\u65f6\u9700\u8981\u5bf9\u6839\u8282\u70b9\u8fdb\u884c\u8fc7\u591acnt==0\u8282\u70b9\u7684\u5224\u65ad\n\n![\u5220\u9664\u91cd\u6784](https://cdn.luogu.com.cn/upload/pic/42058.png)\n\n2\u3001\u91cd\u6784\u5b50\u6811\u65f6\u6ca1\u6709\u53ca\u65f6\u66f4\u65b0\u7236\u4eb2\u7684cover\u503c\n\n\u6765\u4e00\u53d1\u6700\u4e3a\u6b63\u786e\u7684\u5b9e\u73b0\u4e86rankTree\u7684\u66ff\u7f6a\u7f8a\u6811\u9898\u89e3\n\nO2\u8dd1\u4e86151ms,\u4e0d\u52a0\u4f18\u5316\u4e5f\u6709250ms\n\n[\u65e0O2](https://www.luogu.org/recordnew/show/13173573) | [O2](https://www.luogu.org/record/show?rid=13173548)\n\n~~\u8fd8\u6ca1\u5b8c\u5168\u5b9e\u73b0\u5e38\u6570\u4f18\u5316~~\n\n~~\u672c\u4eba\u611f\u89c9\u597d\u597d\u80cc~~\n### \u66ff\u7f6a\u7f8a\u6811\u539f\u7406\u4ee5\u53ca\u5b9e\u73b0\u524d\u5b8c\u5907\u6027\u8ba8\u8bba\n\u66ff\u7f6a\u7f8a\u6811\u5c5e\u4e8e\u66b4\u529b\u91cd\u6784\u5e73\u8861\u6811\u3002\n\n\u5176\u7ef4\u62a4\u5e73\u8861\u624b\u6bb5\u5c31\u662f\u66b4\u529b\u91cd\u6784\u3002\n\n\u66b4\u529b\u91cd\u6784(rebuild)\uff1a\u628a\u4e00\u4e2a\u6811\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u6392\u5e8f\u540e\u6570\u7ec4\uff0c\u518d\u5bf9\u8fd9\u4e2a\u6570\u7ec4\u5b9e\u65bd\u7c7b\u4f3c\u5efa\u7ebf\u6bb5\u6811\u7684\u5efa\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8fc7\u7a0b\uff0c\u5c31\u5f97\u5230\u4e86\u5b8c\u7f8e\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002\n\n\u66ff\u7f6a\u7f8a\u6811\u6709\u6027\u8d281:\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8282\u70b9node\u90fd\u6709\n$$max(size(lson),size(rson))\\le size(node)*alpha$$\nsize\u6307\u8fd9\u9897\u5b50\u6811\u7684\u8282\u70b9\u6570\u91cf,alpha\u4e3a\u9884\u5b9a\u4e49\u5e38\u6570\n#### \u63d2\u5165\n\u56de\u6eaf\u65f6\u5c31\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u5224\u65ad\u8fd9\u4e2a\u5f0f\u5b50\u662f\u5426\u6210\u7acb\uff0c\u4e0d\u6210\u7acb\u5c31rebuild\n\n\u4f46\u662f\u5982\u679c\u7236\u8282\u70b9rebuild\u4e86\uff0c\u5b50\u8282\u70b9\u5c31\u4e0d\u5fc5rebuild\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u56de\u6eaf\u65f6\u7528\u4e00\u4e2a\u53d8\u91cf\u5b58\u9700\u8981\u91cd\u6784\u7684\u6700\u6700\u6700\u4e0a\u7684\u8282\u70b9\uff0cinsert\u5b8c\u6bd5\u540erebuild\u5373\u53ef\n\n#### \u5220\u9664\n\u66ff\u7f6a\u7f8a\u6811\u5220\u9664\u662f\u628a\u6bcf\u4e2a\u8282\u70b9\u6253\u4e0a\u5df2\u5220\u9664\u6807\u8bb0\uff0c\u7136\u540e\u518d\u5728rebuild(\u51c6\u786e\u6765\u8bf4\u662f\u538b\u6241)\u65f6\u5220\u9664\n\n\u6211\u4eec\u4e0d\u59a8\u6269\u5c55\u8fd9\u4e2a\u6807\u8bb0\u5230\u526f\u672c\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5b9e\u73b0RankTree\u64cd\u4f5c\u4e86(\u751a\u81f3\u7ef4\u62a4\u533a\u95f4)\n\n\u4f46\u662f\u4e0a\u9762size\u7684\u5b9a\u4e49\u5c31\u53d8\u4e86\u554a\uff0c\u6211\u4eec\u5c31\u628a\u4e0a\u9762size\u53d8\u6210\u53e6\u4e00\u4e2a\u53d8\u91cfcover\u5c31\u53ef\u4ee5\u4e86\u561b\n\n\u7136\u540e\u53c8\u6709\u4e24\u4e2a\u95ee\u9898\u51fa\u73b0\u4e86\n\n1\u3001\u5982\u679c\u5220\u9664\u8282\u70b9\u8fc7\u591a\u5bfc\u81f4\u6574\u68f5\u6811\u6709\u7740\u5de8\u591a\u7684\u7a7a\u8282\u70b9\uff0c\u6211\u4eec\u8fd8\u9700\u5bf9\u6bcf\u4e2a\u8282\u70b9\u52a0\u4e2arsize\u57df\u8868\u793a\u5f53\u524d\u5b50\u6811\u4e2d\u5b9e\u9645\u5b58\u5728\u7684\u8282\u70b9\u6570\u91cf,\u6bcf\u6b21erase\u65f6\u5224\u65ad\u6839\u8282\u70b9\u6ee1\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6,\u4e0d\u6ee1\u8db3\u5c31rebuild\u6839\u8282\u70b9\n\n2\u3001\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e00\u4e2a\u5b50\u6811\u8fdb\u884crebuild\uff0c\u8fd9\u4e2a\u5b50\u6811\u6839\u8282\u70b9\u7684cover\u503c\u53ef\u80fd\u4f1a\u53d8(rebuild\u5220\u6389\u4e86\u561b),\u6211\u4eec\u5c31\u5229\u7528\u4e0a\u8ff0rsize\u57df,\u6253\u4e0a\u9700\u91cd\u6784\u6807\u8bb0\u524d\u628arsize\u7ed9cover\u5373\u53ef\u9632\u6b62\u6b64\u73b0\u8c61\uff0c\u56e0\u4e3a\u8fd9\u65f6\u7684cover\u624d\u662f\u6b63\u786e\u7684cover\n#### \u67e5\u627ek\u5927&\u591a\u5c11\u4e2a\u6bd4x\u5c0f\n\u540c\u4e8c\u53c9\u67e5\u627e\u6811\u7684kth&rank\u64cd\u4f5c\n## \u4ee3\u7801\u5b9e\u73b0\n### alpha&beta&\u8282\u70b9\u5b9a\u4e49\n\u8fd9\u91cc\u6211~~\u778eBB~~\u4e86\u4e00\u4e2a\u5e38\u91cfbeta\uff0c\u7528\u4e8e\u5220\u9664\u540e\u5224\u65ad\u5b50\u6811\u662f\u5426\u6709\u8fc7\u591acnt==0\u8282\u70b9\n\nalpha\u8d8b\u8fd1\u4e8e1\u65f6\uff0c\u6574\u68f5\u6811\u5c31\u662f\u4e2aBST\n\nalpha\u8d8b\u8fd1\u4e8e0.5\uff0c\u6574\u68f5\u6811\u8d8b\u8fd1\u4e8e\u5b8c\u5168\u5e73\u8861\uff0c\u4f46\u662frebuild\u6b21\u6570\u6025\u5267\u589e\u591a\n\n\u53ef\u7528\u6765\u63a7\u5236\u4fee\u6539\u5bc6\u96c6\u578b\u548c\u67e5\u627e\u5bc6\u96c6\u578b\u6570\u636e\n\n\u5b9e\u8df5\u8bc1\u660e\u5f53\u63d2\u5165\u548c\u67e5\u8be2kth\u64cd\u4f5c\u4e3a1:3\u6bd4\u91cd\u65f6,alpha=0.75\u6700\u5feb\u30021:1\u65f6\u5219\u504f\u54110.85\n\n\u53d6\u4e2d\u95f4\u503c0.8\u5373\u53ef\n\n\u5982\u679c\u67e5\u627e\u64cd\u4f5c\u8f83\u591a,alpha\u5efa\u8bae\u53d60.7\n```\nconst double alpha=0.8;\nconst double beta=0.35;\n```\nrsize\u548c\u4e0a\u8ff0\u5b9a\u4e49\u4e00\u81f4\uff0c\u7528\u4e8e\u5b58\u50a8\u5b50\u6811\u771f\u5b9e\u5b58\u5728(cnt!=0)\u7684\u8282\u70b9\uff0c\u53ef\u7528\u4e8e\u5224\u65ad\u5b50\u6811\u662f\u5426\u6709\u8db3\u591f\u7684cnt==0\u8282\u70b9\u4ee5\u53ca\u91cd\u6784\u66f4\u65b0cover\u7528(rmaintain\u51fd\u6570)\n```\ntemplate<class T,class iT>\nstruct node{//T\u4e3a\u503c\u7c7b\u578b,iT\u4e3a\u7d22\u5f15\u503c\u7c7b\u578b\n\tT val;//\u503c\n\tiT cnt,size,cover,rsize;//cnt\u503c\u6570\u91cf,size\u5b50\u6811\u6570\u91cf,cover\u5b50\u6811\u8282\u70b9\u6570\u91cf\n\tnode *ch[2];//\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\n\tnode (T v,iT c){val=v;cnt=size=c;rsize=(c!=0);cover=1;}\n\tinline void maintain(){//\u8c03\u6574\n\t\t\t\t\tsize=cnt+ch[0]->size+ch[1]->size;\n\t\t\t\t\trsize=(cnt!=0?1:0)+ch[0]->rsize+ch[1]->rsize;\n\t\t\t\t\tcover=1+ch[0]->cover+ch[1]->cover;}\n\tinline void rmaintain(){maintain();cover=rsize;}//\u7528\u4e8e\u91cd\u6784\u65f6\u8c03\u6574\n\tinline bool isBad(){return max(ch[0]->cover,ch[1]->cover)>\n\t\t\t\t\t\t(alpha*cover+0.4);}//\u5224\u65ad\u662f\u4e0d\u662f\u66ff\u7f6a\u7f8a\n\tinline char cmp(T v){//\u6bd4\u8f83&\u8fd4\u56de,char\u538b\u4f4d\n\t\tif (v==val) return -1;\n\t\treturn v>=val;\n\t}\n\tinline char cmpkth(iT &k){//\u6bd4\u8f83k\u5927&\u4fee\u6539k\n\t\tiT p=k-ch[0]->size;\n\t\tif (p<=0) return 0;\n\t\tk=p;p-=cnt;\n\t\tif (p<=0) return -1;\n\t\tk=p;return 1;\n\t}\n};\n```\n### \u5185\u5b58\u6c60\u4f18\u5316\n```cpp\ntemplate<class T>\nstruct mem_pool{\n\tT *begin,*end,**clr;//begin,end\u8868\u793a\u5f53\u524d\u6c60\u533a\u95f4\uff0c\u524d\u5f00\u540e\u95ed\n\t\t\t\t\t\t//clr\u8868\u793a\u66ff\u7f6a\u7f8a\u6811reBuild\u65f6\u4e34\u65f6\u6570\u7ec4\n\tunsigned long long s;//\u5f53\u524d\u6c60\u7684\u603bsize\n\tqueue<T*> gc;//\u5783\u573e\u56de\u6536\u5668\uff0c\u5b58\u653e\u5220\u9664\u8282\u70b9\uff0c\u53ef\u91cd\u590d\u5229\u7528\u5185\u5b58\u7a7a\u95f4\n\tvoid extend(){s<<=1;end=(begin=(T*)malloc(sizeof(T)*s))+s;}//\u500d\u589e\u6269\u5c55\u6c60\n\tinline mem_pool(){//\u6784\u9020\u51fd\u6570\n\t\ts=1<<15;extend();\n\t\tclr=(T**)malloc(sizeof(T*)*100010);\n\t}\n\tinline T* New(T a){//new\n\t\tT *ans;\n\t\tif (gc.empty()){\n\t\t\t*(ans=begin)=a;\n\t\t\tif (++begin==end) extend();//\u5f53\u524d\u6c60\u7528\u5b8c,\u6269\u5c55\n\t\t}else{//\u7528\u5783\u573e\u56de\u6536\u5668\n\t\t\t*(ans=gc.front())=a;\n\t\t\tgc.pop();\n\t\t}\n\t\treturn ans;\n\t}\n\tinline void Del(T *a){gc.push(a);}//delete\n};\n```\n\u500d\u589e\uff0c\u4fdd\u8bc1\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\u52a8\u6001\u589e\u957f\n\n~~\u8003\u573a\u4e0a\u9762\u8fd8\u662f\u6253\u4e2a\u7b80\u5355\u70b9\u7684\u5427~~\n\n### SGT\u6784\u9020\u51fd\u6570&Rebuild\n\n```\n\tTnode **to;//\u5f85\u91cd\u6784\u8282\u70b9\uff0c\u56e0\u4e3a\u8981\u6539\u53d8\u4e00\u4e2a\u6307\u9488\uff0c\u6240\u4ee5\u8981\u7528\u53cc\u91cd\u6307\u9488\n\tT v;iT s;//\u5f85\u52a0\u5165/\u5220\u9664\u8282\u70b9\u6743\u503c\u548csize\n\tinline void insert(Tnode *&e){//\u9012\u5f52\u63d2\u5165\n\t\tif (e==nil){\n\t\t\te=alloc->New(Tnode(v,s));\n\t\t\te->ch[0]=e->ch[1]=nil;\n\t\t\treturn ;\n\t\t}\n\t\tchar d=e->cmp(v);//char\u538b\u4f4d\n\t\tif (d==-1)\n\t\t\te->cnt+=s;\n\t\telse insert(e->ch[d]);\n\t\t//\u56de\u6eaf\u8c03\u6574\n\t\tif (e->isBad()) to=&e,e->rmaintain();//rsize\u8986\u76d6cover,\u53ef\u4f20\u6b63\u786ecover\u7ed9\u7956\u5148\u8282\u70b9\n        else e->maintain();\n\t}\n\n\tinline void erase(Tnode *&e){//\u9012\u5f52\u5220\u9664\n\t\tif (e==nil) exit(-1);//\u6ca1\u627e\u5230,\u5f3a\u884c\u9000\u51faXD\n\t\tchar d=e->cmp(v);\n\t\tif (d==-1)\n\t\t\te->cnt=max(0,e->cnt-s);//\u4e3a\u4e86\u9632\u6b62\u975e\u6cd5\u8c03\u7528\n\t\telse erase(e->ch[d]);\n\t\te->maintain();\n\t}\n\n\tinline void insert(T vs,iT ss){//\u5bf9\u4e0a\u8ff0\u9012\u5f52\u63d2\u5165\u7b80\u5355\u5c01\u88c5\n\t\tv=vs;s=ss;\n\t\tto=&nil;\n\t\tinsert(head);\n\t\treBuild(*to);\n\t}\n\n\tinline void erase(T vs,iT ss){//\u540c\u4e0a\n\t\tv=vs;s=ss;\n\t\terase(head);\n\t\tif ((head->cover-head->rsize)>head->cover*beta)//\u5982\u679ccnt!=0\u8282\u70b9\u8fc7\u591a\n\t\t\treBuild(head);\n\t}\n\t}\n```\n### Rank&Kth\n\u6709\u4e86cmp&cmpkth\u5c31\u597d\u5199\u4e86\n```cpp\n\tinline iT rank(T v){\n\t\tTnode *e=head;iT k=1;char d;\n\t\twhile (e!=nil&&(d=e->cmp(v))!=-1){\n\t\t\tif (d==1) k+=e->ch[0]->size+e->cnt;//\u53f3\u8d70\u7d2f\u52a0\n\t\t\te=e->ch[d];\n\t\t}\n\t\treturn k+e->ch[0]->size;//\u8fd4\u56de\u524d\u522b\u5fd8\u4e86\u5de6\u5b50\u6811\n\t}\n\n\tinline Tnode* kth(iT k){\n\t\tTnode *e=head;char d;\n\t\twhile ((d=e->cmpkth(k))!=-1) e=e->ch[d];//cmpkth\u5e2e\u6211\u4eec\u505a\u4e86\u51cf\u6cd5\n\t\treturn e;\n\t}\n\t#undef Tnode//define\u540eundef\u66f4\u68d2\n};\n```\n### register&inline\u4f18\u5316\u603b\u4ee3\u7801\n[LuoguPaste](https://www.luogu.org/paste/zwf94s8p)\n### Thanks\n[\u67d0\u4e0d\u5b58\u5728\u767e\u79d1\u7f51\u7ad9](https://zh.wikipedia.org/)\n\n[\u67d0\u82f1\u8bed\u767e\u79d1\u7f51\u7ad9](https://en.wikipedia.org/)\n\n[ g1n0st\u7684SGT\u6559\u7a0b](https://zhuanlan.zhihu.com/p/21263304)",
        "postTime": 1541336757,
        "uid": 46860,
        "name": "z3475",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "## \u770b\u89c1\u8bb8\u591a\u89e3\u6cd5\u4f46\u5c45\u7136\u6ca1\u6709\u4f18\u79c0\u7684SBT\uff01\uff01\uff01\n\nSBT\u5168\u79f0Size Balanced Tree\u987e\u540d\u601d\u4e49\uff0c\u662f\u4e00\u79cd\u4f9d\u9760\u5b50\u6811\u5927\u5c0f\u8c03\u6574\u5e73\u8861\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u4f18\u70b9\uff1a\u636e\u9648\u542f\u5cf0\u8bba\u6587\u4e2d\u6240\u8a00  \uff0c\n\n\u201c\u8fd9\u662f\u76ee\u524d\u4e3a\u6b62\u901f\u5ea6\u6700\u5feb\u7684\u9ad8\u7ea7\u4e8c\u53c9\u641c\u7d22\u6811\u201d\u3002\u5b83\u80fd\u5728O(logn)\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u6240\u6709BST\u7684\u76f8\u5173\u64cd\u4f5c\u3002\u800c\u4e14\u7531\u4e8eSBT\u8d56\n\n\u4ee5\u4fdd\u6301\u5e73\u8861\u7684\u662fSize\u57df\u800c\u4e0d\u662f\u5176\u4ed6\u201c\u65e0\u7528\u201d\u7684\u57df\uff0c\u5b83\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5b9e\u73b0\u52a8\u6001\u987a\u5e8f\u7edf\u8ba1\u4e2d\u7684select\u548crank\u3002\n\n\u90a3\u4e48\uff0cSBT\u5982\u4f55\u4fdd\u8bc1\u5176\u5e73\u8861\u5462\uff1f\n\n\u6211\u501f\u7528\u9648\u542f\u5cf0dalao\uff08SBT\u7684\u53d1\u660e\u8005\uff09\u548c hr_whisper\u7684\u535a\u5ba2\u8d44\u6599\u6765\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e0b\u3002\u3002\u3002\n\n\u5bf9\u4e8eSBT\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9 t,\u6709\u5982\u4e0b\u6027\u8d28\uff1a\n\u00a0 \u00a0\u6027\u8d28(a) s[ right[t] ]\u2265s[ left [ left[ t ] ] ], s[ right [ left[t] ] ]\n\u00a0 \u00a0\u6027\u8d28(b) s[ left[t] ]\u2265s[right[ right[t] ] ], s[ left[ right[t] ] ]\n\u5373.\u6bcf\u68f5\u5b50\u6811\u7684\u5927\u5c0f\u4e0d\u5c0f\u4e8e\u5176\u5144\u5f1f\u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n\u4f46\u7ecf\u8fc7ins\u6216del\u64cd\u4f5c\u540e\uff0c\u5c31\u4e0d\u4e00\u5b9a\u6ee1\u8db3\u6b64\u6027\u8d28\u4e86.\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u5f15\u51fa\u6700\u91cd\u8981\u7684\u64cd\u4f5c\n### maintain\uff08int&pos, bool flg);\n\n~~\u5de6\u65cb\u53f3\u65cb\u4ec0\u4e48\u7684\u6211\u5c31\u4e0d\u8c08\u4e86\uff0c\u840c\u65b0\u53bb\u5b66Splay\uff0cTreap\u5427~~\n\n## Case 1: s[ Left[ Left[ T ] ]>s[ Right[ T ] ]\u00a0\n\u5728\u4e0b\u56fe\u4e2d\uff0c\u5c31\u662f\u8bf4 s[A]>s[R]\n\n![1](https://img-blog.csdn.net/20131129202211734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u9996\u5148\u6267\u884c\u53f3\u65cb\uff08Right-Rotate (T)\uff09\u53ef\u5f97\n\n![2](https://img-blog.csdn.net/20131129203355843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u6709\u53ef\u80fd\u65cb\u8f6c\u540e\u7684\u6811\u4ecd\u7136\u4e0d\u662fSBT,\u9700\u8981\u518d\u6b21\u6267\u884cMaintain(T)\n\n\u7531\u4e8eL\u7684\u53f3\u513f\u5b50\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u56e0\u6b64\u9700\u8981\u6267\u884cMaintain(L)\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u79cd\u60c5\u51b5\u5148\u6267\u884c\u4e00\u6b21Right-Rotate (T)\uff0c\u63a5\u7740\u6267\u884cMaintain (T) \u4fdd\u8bc1T\u4e3aSBT\uff0c\u7136\u540e\u6267\u884cMaintain(L)\uff0c\u4fdd\u8bc1L\u4e3aSBT\n\n## Case 2: s[ right[ left[ t ] ]>s[ right[ t ] ] \u00a0\n\u5728\u4e0b\u56fe\u4e2d\uff0c\u4e5f\u5c31\u662f\u8bf4\u00a0s[B]>s[R]\n\n![3](https://img-blog.csdn.net/20131129203745125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u5148\u6267\u884c\u5de6\u65cbLeft-Rotate(L)\u3002\u5982\u4e0b\u56fe\n\n![4](https://img-blog.csdn.net/20131129203857906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u6267\u884c\u53f3\u65cbRight-Rotate(T)\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![5](https://img-blog.csdn.net/20131129203924718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXVybXVyZWQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u63a5\u7740\u6267\u884cMaintain (L) \u548cMaintain (T)\uff0c\u6765\u4fdd\u8bc1L\u548cT\u662fSBT\n\u540c\u7406\u6267\u884cMaintain (B)\n\n## Case 3\uff1as[ right[ right[ t ] ] ]>s[ left[ t ] ]\n \u8fd9\u4e2a\u548ccase 1\u662f\u5bf9\u79f0\u7684\n \n## Case 4\uff1as[ left[ right[ t ] ] ]>s[ left[ t ] ]\n\u8fd9\u4e2a\u548ccase 2\u662f\u5bf9\u79f0\u7684\n\n\u597d\u4e86\u4e0d\u591a\u8bf4\u4e86\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n\ninline void update(int pos) {\nt[pos].sze = t[t[pos].lft].sze + t[t[pos].rgt].sze + 1;\n}\n\ninline void right_rotate(int &pos)\n{\n\tint k = t[pos].lft;\n\tt[pos].lft = t[k].rgt;\n\tt[k].rgt = pos;\n\tt[k].sze = t[pos].sze;\n\tupdate(pos); pos = k;\n}\n\t\t\ninline void left_rotate(int &pos)\n{\n\tint k = t[pos].rgt;\n\tt[pos].rgt = t[k].lft;\n\tt[k].lft = pos;\n\tt[k].sze = t[pos].sze;\n\tupdate(pos); pos = k;\n}\n\t\t\n#define rt(pos) right_rotate(pos)\n#define lt(pos) left_rotate(pos)\n\t\t\ninline void maintain(int &pos, bool flg)\n{\n\tif (!flg) {\n\t\tif (t[t[t[pos].lft].lft].sze > \n\t\tt[t[pos].rgt].sze) rt(pos);\n\t\telse if (t[t[t[pos].lft].rgt].sze > \n\t\tt[t[pos].rgt].sze)\n\t\t{\n\t\t\tlt(t[pos].lft); rt(pos);\n\t\t} else return;\n\t} else {\n\t\tif (t[t[t[pos].rgt].lft].sze > \n\t\tt[t[pos].lft].sze)\n\t\t{\n\t\t\trt(t[pos].rgt); lt(pos);\n\t\t} else return;\n\t}\n\tmaintain(t[pos].lft, false);\n\tmaintain(t[pos].rgt, true);\n\tmaintain(pos, true);\n\tmaintain(pos, false);\n}\n```\n\n\u53ea\u9700\u5728\u4f60\u7684insert\u91cc\u52a0\u4e0amaintain\u64cd\u4f5c\u5c31\u53ef\u4ee5\u8ba9\u4f60\u7684\u666e\u901a\u4e8c\u53c9\u67e5\u627e\u6811\u534e\u4e3d\u4e3d\u5730\u5347\u7ea7\u5566\u3002\u3002\u3002\n\n\u4ec0\u4e48\uff0c\u4f60\u4e0d\u4f1a\u4e8c\u53c9\u67e5\u627e\u6811\uff1f \u60f3\u8981\u5b8c\u6574\u4ee3\u7801\u3002\n\n~~\u54ea\u6709\u8fd9\u4e48\u5bb9\u6613\u544a\u8bc9\u4f60\uff0c\u6211\u53ef\u8c03\u4e86\u4e00\u4e0b\u5348\u5462~~\n\n\u8d34\u4e00\u4e2a\u6709\u6f0f\u6d1e\u7684\u4ee3\u7801\uff0c\u60f3\u6284\u9898\u89e3\u7684\u5c0foier\u5f53\u5fc3\u5566\n\n\uff08\u63d0\u793a\uff1a\u6ce8\u610ferase\uff09\n\n```cpp\n//Program written by Liu Zhaozhou ~~~\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <vector>\n#include <deque>\n\n#define lowbit(x) x & -x\n\n#pragma GCC optimize(3)\n\nusing namespace std;\n\ninline char gc(void)\n{\n    static char buf[100000], *p1 = buf, *p2 = buf;\n    return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\n#define gc() getchar()\n\ntemplate <class T> inline void read(register T &x)\n{\n    static T flag = 1; x = 0;\n\tregister char ch = gc();\n    for (; !isdigit(ch); ch = gc()) if (ch == '-') flag = -1;\n    for (; isdigit(ch); ch = gc()) x = (x << 1) + (x << 3) + (ch ^ 48);\n    x *= flag; return;\n}\n\ntemplate <class T> inline void write(register T x)\n{\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + '0');\n}\n\ntemplate <class T> inline void writeln(register T x) {write(x); puts(\"\");}\ntemplate <class T> inline void writeln(T x, char c) {write(x); putchar(c);}\ntemplate <class T> inline void writeln(char c, T x) {putchar(c); write(x);}\n\ntemplate <class T> inline void chkmax(T &x, const T y) {x > y ? x = x : x = y;}\ntemplate <class T> inline void chkmin(T &x, const T y) {x < y ? x = x : x = y;}\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n\nint n, opt, x;\n\nenum {\n\tmaxpool = 150005\n};\n\ntemplate <int S>\nclass Size_Balanced_Tree {\n\tprivate:\n\t\tint rtt, cnt, u;\n\t\tstruct _SBTNode {\n\t\t\tint key, sze, lft, rgt;\n\t\t} t[maxpool];\n\t\t\n\t\t#define l(idx) t[idx].lft\n\t\t#define r(idx) t[idx].rgt\n\t\t#define s(idx) t[idx].sze\n\t\t#define k(idx) t[idx].key\n\t\t\n\t\tinline void update(int pos) {\n\t\t\tt[pos].sze = t[t[pos].lft].sze + t[t[pos].rgt].sze + 1;\n\t\t}\n\t\t\n\t\tinline void right_rotate(int &pos)\n\t\t{\n\t\t\tint k = t[pos].lft;\n\t\t\tt[pos].lft = t[k].rgt;\n\t\t\tt[k].rgt = pos;\n\t\t\tt[k].sze = t[pos].sze;\n\t\t\tupdate(pos); pos = k;\n\t\t}\n\t\t\n\t\tinline void left_rotate(int &pos)\n\t\t{\n\t\t\tint k = t[pos].rgt;\n\t\t\tt[pos].rgt = t[k].lft;\n\t\t\tt[k].lft = pos;\n\t\t\tt[k].sze = t[pos].sze;\n\t\t\tupdate(pos); pos = k;\n\t\t}\n\t\t\n\t\t#define rt(pos) right_rotate(pos)\n\t\t#define lt(pos) left_rotate(pos)\n\t\t\n\t\tinline void maintain(int &pos, bool flg)\n\t\t{\n\t\t\tif (!flg) {\n\t\t\t\tif (t[t[t[pos].lft].lft].sze > \n\t\t\t\tt[t[pos].rgt].sze) rt(pos);\n\t\t\t\telse if (t[t[t[pos].lft].rgt].sze > \n\t\t\t\tt[t[pos].rgt].sze)\n\t\t\t\t{\n\t\t\t\t\tlt(t[pos].lft); rt(pos);\n\t\t\t\t} else return;\n\t\t\t} else {\n\t\t\t\tif (t[t[t[pos].rgt].lft].sze > \n\t\t\t\tt[t[pos].lft].sze)\n\t\t\t\t{\n\t\t\t\t\trt(t[pos].rgt); lt(pos);\n\t\t\t\t} else return;\n\t\t\t}\n\t\t\tmaintain(t[pos].lft, false);\n\t\t\tmaintain(t[pos].rgt, true);\n\t\t\tmaintain(pos, true);\n\t\t\tmaintain(pos, false);\n\t\t}\n\t\t\n\t\tinline void ins(int &pos, int val) {\n\t\t\tif (pos == 0) {\n\t\t\t\tpos = ++cnt;\n\t\t\t\tt[pos].key = val;\n\t\t\t\tt[pos].sze = 1;\n\t\t\t\tt[pos].lft = t[pos].rgt = 0;\n\t\t\t} else {\n\t\t\t\t++t[pos].sze;\n\t\t\t\tif (t[pos].key > val) ins(t[pos].lft, val);\n\t\t\t\telse ins(t[pos].rgt, val);\n\t\t\t\tmaintain(pos, t[pos].key <= val);\n\t\t\t} return;\n\t\t}\n\t\t\n\t\tinline int del(int &pos, int val) {\n\t\t\tint ret = 0; --s(pos);\n\t\t\tif ((k(pos) == val) || (k(pos) > val) && \n\t\t\t(l(pos) == 0) || (k(pos) < val) && (r(pos) == 0))\n\t\t\t{\n\t\t\t\tret = k(pos);\n\t\t\t\tif (l(pos) == 0 || r(pos) == 0) pos = l(pos) + r(pos);\n\t\t\t\telse k(pos) == del(l(pos), k(pos) + 1); return ret;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (k(pos) > val) return del(l(pos), val);\n\t\t\t\telse return del(r(pos), val);\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tinline bool find(int &pos, int val) {\n\t\t\tif (pos == 0) return false;\n\t\t\tif (val < t[pos].key) return find(t[pos].lft, val);\n\t\t\treturn (t[pos].key == val) || find(t[pos].rgt, val);\n\t\t}\n\t\t\n\t\tinline int rank(int &pos, int &val) {\n\t\t\tif (pos == 0) return 1;\n\t\t\treturn val <= k(pos) ? rank(l(pos), val) : s(l(pos)) + 1 + rank(r(pos), val);\n\t\t}\n\t\t\n\t\tinline int select(int &pos, int rk) {\n\t\t\tif (rk == s(l(pos)) + 1) return k(pos);\n\t\t\tif (rk <= s(l(pos))) return select(l(pos), rk);\n\t\t\telse return select(r(pos), rk - 1 - s(l(pos)));\n\t\t}\n\n        inline int _pred(int &pos, int &val) {\n            register int ret;\n            if (pos == 0) return val;\n            if (val <= k(pos)) return _pred(l(pos), val);\n            else {\n                ret = _pred(r(pos), val);\n                if (ret == val) ret = k(pos);\n                return ret;\n            }\n        }\n\n        inline int _succ(int &pos, int &val) {\n            register int ret;\n            if (pos == 0) return val;\n            if (val >= k(pos)) return _succ(r(pos), val);\n            else {\n                ret = _succ(l(pos), val);\n                if (ret == val) ret = k(pos);\n                return ret;\n            }\n        }\n\n    public:\n    \t\n    \tinline void init(void) {\n    \t\trtt = cnt = s(0) = 0;\n\t\t}\n    \t\n        inline void insert(int val) {\n            ins(rtt, val); return;\n        }\n\n        inline void erase(int val) {\n        \tif (!find(rtt, val)) return;\n            u = del(rtt, val);\n        }\n\n        inline int rank(int &val) {\n            return rank(rtt, val);\n        }\n\n        inline int select(int kth) {\n            return select(rtt, kth);\n        }\n\n        inline int pred(int &val) {\n            return _pred(rtt, val);\n        }\n\n        inline int succ(int &val) {\n            return _succ(rtt, val);\n        }\n};\n\nSize_Balanced_Tree <maxpool> SBT;\n\nint main(void)\n{\n\tSBT.init();\n\tread(n);\n\twhile (n--) {\n\t\tread(opt); read(x);\n\t\tswitch (opt) {\n            case 1:\n                SBT.insert(x);\n                break;\n            case 2:\n                SBT.erase(x);\n                break;\n            case 3:\n                writeln(SBT.rank(x));\n                break;\n            case 4:\n                writeln(SBT.select(x));\n                break;\n            case 5:\n                writeln(SBT.pred(x));\n                break;\n            case 6:\n                writeln(SBT.succ(x));\n                break;\n            default: break;\n        }\n\t}\n    return 0;\n}\n\n/**/\n\n\n```\n\n\n",
        "postTime": 1556890135,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "## \u975e\u65cb\u8f6ctreap\u4e86\u89e3\u4e00\u4e0b\n\n\u4e2a\u4eba\u89c9\u5f97\u6bd4\u65cb\u8f6ctreap\u597d\u6253\u5f88\u591a\uff0c\u4e0d\u7528\u641e\u6765\u641e\u53bb\u8f6c\u6765\u8f6c\u53bb\u3002\u3002\n\n\u975e\u65cb\u8f6ctreap\u4e3b\u8981\u901a\u8fc7\u4e24\u4e2a\u64cd\u4f5c:\u5408\u5e76(merge)\uff0c\u5206\u79bb(divide)\u5b8c\u6210\u51e0\u4e4e\u8fd9\u91cc\u7684\u6240\u6709\u64cd\u4f5c\uff08\u9664\u4e86\u67e5\u8be2\u6392\u540d\uff09\u3002\n\n### Merge\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\uff0c\u6211\u4eec\u4e0d\u80fd\u968f\u4fbf\u5408\u4e00\u4e0b\uff0c\u6211\u4eec\u8981\u7ef4\u62a4Treap\u7684\u6027\u8d28\uff0c\u4e5f\u5c31\u662f\u4e8c\u53c9\u67e5\u627e\u6811+\u5806\u3002\u4ee5\u4e00\u4e2a\u968f\u673a\u7684key\u503c\u6765\u7ef4\u62a4\u5806\uff0c\u7ed3\u70b9\u7684\u6743\u503cval\u6765\u7ef4\u62a4\u4e8c\u53c9\u67e5\u627e\u6811\u3002\n\n\u6211\u4eec\u5df2\u77e5\u68f5\u5b50\u6811\u7684\u6839l\u548cr(l<r)\uff0c\u6211\u4eec\u6bd4\u8f83l\u548cr\u7684key\u503c\uff0c\u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5982\u679cl\u7684key\u6bd4\u8f83\u5c0f\uff0c\u8ba9l\u4e3a\u5408\u5e76\u7684\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u7136\u540er\u5f80l\u7684\u53f3\u5b50\u6811\u9012\u5f52\u3002\u53cd\u4e4b\uff0cr\u628al\u8e22\u4e0b\u53bb\uff0cr\u4e3a\u6839\u7ed3\u70b9\uff0c\u7136\u540el\u5f80r\u7684\u5de6\u5b50\u6811\u9012\u5f52\u3002\u6bd4\u5982\u8bf4l\u505a\u4e86\u6839\u7ed3\u70b9\uff0cr\u4e5f\u627e\u5230\u4e86\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628ar\u76f4\u63a5\u63a5\u4e0a\u53bb\u4e86\uff0c\u7136\u540e\u628a\u539f\u6765l\u4e0a\u7684\u88ab\u8e22\u6389\u7684\u90e8\u5206\u53d6\u51fa\u6765\uff0c\u5f80\u521a\u63a5\u4e0a\u53bb\u7684\u90e8\u5206\u5728\u91cd\u65b0\u627e\u5b83\u7684\u4f4d\u7f6e\u3002\u3002\u501f\u6765\u501f\u53bb\uff0c\u8e22\u6765\u8e22\u53bb\uff0c\u6700\u540e\u63a5\u597d\u7684\u7ed3\u70b9\u8d8a\u6765\u8d8a\u591a\u3002\u3002\u7136\u540e\u5c31\u5408\u5b8c\u4e86\u3002\u3002\n\n\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/27744.png)\n\n\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\uff1a\n```cpp\nint merge(int l,int r)\n{\n\tif(!l) return r;//l\u6ca1\u6709\u4e86\uff0c\u5168\u90e8\u5408\u5b8c\u4e86\u90a3\u4e48r\u63a5\u4e0a\u5373\u53ef\uff0c\u8fd4\u56de\u6839r\n\tif(!r) return l;//\u540c\u7406\n\tif(tr[l].key<tr[r].key)//l\u7684key\u5c0f\uff0cl\u5f53\u5f53\u524d\u5b50\u6811\u7684\u6839\n\t{\n\t\ttr[l].ch[1]=merge(tr[l].ch[1],r);//\u5f80\u53f3\u5b50\u6811\u9012\u5f52\n\t\tupdate(l);\n\t\treturn l;\n\t}\n\telse\n\t{\n\t\ttr[r].ch[0]=merge(l,tr[r].ch[0]);\n\t\tupdate(r);\n\t\treturn r;\n\t}\n}\n```\n\n### Divide\n\u5c31\u662f\u628a\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u7ed3\u70b9\u5168\u90e8\u5206\u5728\u4e00\u4e2a\u5b50\u6811l\u4e2d\uff0c\u5927\u4e8e\u7684\u5206\u5728\u53e6\u4e00\u4e2a\u5b50\u6811r\u4e2d\u3002\u5176\u5b9e\u5c31\u662f\u6309\u7167\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u5f0f\u5411\u4e0b\u627e\uff0c\u5f53\u524d\u7ed3\u70b9\u5c0f\u4e8ek\u7684\u8bdd\u5f80\u53f3\u5b50\u6811\u627e\uff0c\u7136\u540e\u5f53\u524d\u7ed3\u70b9\u52a0\u5165\u5de6\u5b50\u6811\u3002\u53cd\u4e00\u4e0b\u5c31\u4e0d\u8bb2\u4e86\n\n\u6055\u6211\u4e0d\u4e00\u6b65\u4e00\u6b65\u753b\u4e86\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/27752.png)\n\n```cpp\nvoid divid(int u,int x,int &l,int &r)//\u6ce8\u610f\u53d6\u5730\u5740\u7b26\uff0c\u4f20\u8fc7\u6765\u7684\u53c2\u6570\u4f1a\u8ddf\u7740\u66f4\u65b0\n{\n\tif(!u)\n\t{\n\t\tl=0,r=0;\n\t\treturn;\n\t}\n\tif(tr[u].val<=x) l=u,divid(tr[u].ch[1],x,tr[u].ch[1],r);//\u8fd9\u91cc\u5f88\u5de7\u5999\uff0c\u4e5f\u5c31\u662f\u8ba9x\u7684\u53f3\u5b50\u7ed3\u70b9\u53d8\u6210\u53f3\u5b50\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\uff0c\u88ab\u5206\u51fa\u6765\u7684\u5de6\u5b50\u6811\u7684\u6839\u3002\u597d\u7ed5\u3002\u3002\u3002\n\telse r=u,divid(tr[u].ch[0],x,l,tr[u].ch[0]);//\u53cd\u8fc7\u6765\u4e00\u6837\u7684\n\tupdate(u);\n}\n```\n### Insert\n\u4ee5\u6743\u503ck\u4e3a\u5206\u754c\u503c\uff0c\u5206\u51fa\u5de6\u5b50\u6811l\u548c\u53f3\u5b50\u6811r\uff0c\u5728\u628a\u8fd9\u4e09\u4e2a\u4e1c\u897f\u91cd\u65b0\u5408\u5e76\u8d77\u6765\uff0c\u4e24\u4e24\u5408\u5e76merge(merge(l,k),r)\uff0c\u63d2\u5165\u5b8c\u6210\u3002\u8fd9\u5e94\u8be5\u4e0d\u7528\u753b\u56fe\u4e5f\u80fd\u61c2\u3002\n\n### Delete\n\u4ee5k\u4e3a\u5206\u754c\u503c\uff0c\u5206\u51fal,p\uff0c\u5728l\u91cc\uff0c\u5728\u4ee5k-1\u4e3a\u5206\u754c\u503c\u5206\u51fa\uff0cl,r\uff0c\u8fd9\u6837\u628ak\u5206\u79bb\u4e86\u51fa\u6765\uff08\u6bd4k\u5c0f\u7684\uff0c\u6bd4k\u5927\u7684\uff0c\u90fd\u5206\u51fa\u53bb\u4e86\uff09\uff0c\u7136\u540e\uff0c\u5408\u5e76k\u7684\u5de6\u53f3\u5b50\u6811\uff0c\u5f62\u6210\u65b0\u7684r\uff0c\u518d\u628al,r,\u5408\u5e76\u5373\u53ef\u3002\n\n\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/27765.png)\n\n### \u6c42k\u7684\u6392\u540d\n\u628a\u6574\u68f5\u6811\u4ee5k-1\u4e3a\u5206\u754c\u503c\u5206\u4e86\uff0c\u90a3\u4e48\u5c0f\u4e8ek\u7684\u8282\u70b9\u5168\u5728\u5de6\u6811\u5185\uff0c\u8f93\u51fa\u5de6\u6811\u7684size\u5373\u53ef\n\n### \u627e\u7b2ck\u5927\n\u8fd9\u4e0d\u7528\u591a\u8bb2\uff0c\u4e8c\u53c9\u67e5\u627e\u6811\u57fa\u672c\u64cd\u4f5c\uff0c\u6839\u636e\u6bcf\u4e2a\u7ed3\u70b9\u7684size\uff08\u5f53\u524d\u5b50\u6811\u7684\u7ed3\u70b9\u603b\u6570\uff09\u9012\u5f52\u5373\u53ef\n```cpp\nint kth(int u,int k)\n{\n\tif(k<=tr[tr[u].ch[0]].siz) return kth(tr[u].ch[0],k);\n    else\n    {\n        if(k==tr[tr[u].ch[0]].siz+1) return u;\n        else \n        {\n            k-=tr[tr[u].ch[0]].siz+1;\n            return kth(tr[u].ch[1],k);\n        }\n    }\n} \n```\n\n### \u524d\u9a71\n\u628a\u6574\u68f5\u6811\u4ee5k-1\u4e3a\u5206\u754c\u503c\u5206\u4e86\uff0c\u90a3\u4e48\u5c0f\u4e8ek\u7684\u8282\u70b9\u5168\u5728\u5de6\u6811\u5185\uff0c\u5728\u5de6\u5b50\u6811\u91cc\u627e\u5230\u6392\u540d\u4e3a\u6700\u540e\u7684\u7ed3\u70b9\u6743\u503c\u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u6392\u540d\u4e3a\u5de6\u5b50\u6811\u7684siz\u7684\u70b9\u3002\u5f53\u7136\u8fd8\u6709\u5408\u56de\u6765\u3002\u3002\n\n### \u540e\u7ee7\n\u5dee\u4e0d\u591a\u7684\uff0c\u81ea\u5df1\u60f3\u53bb\n\n## \u4ee3\u7801\n\u4e0d\u591a\u89e3\u91ca\u4e86\uff0c\u7ed3\u5408\u4e0a\u9762\u5e94\u8be5\u80fd\u770b\u61c2\n```cpp\n#include<ctime>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,root,cnt=0;\nstruct Treeeeee\n{\n\tint ch[2],fa,val,key,siz;\n}tr[100100];\nvoid Add(int x)\n{\n\tcnt++;\n\ttr[cnt].siz=1,tr[cnt].val=x,tr[cnt].key=rand();\n\ttr[cnt].ch[0]=tr[cnt].ch[1]=0;\n}\nvoid update(int x)\n{\n\ttr[x].siz=tr[tr[x].ch[0]].siz+tr[tr[x].ch[1]].siz+1;\n}\nvoid divid(int u,int x,int &l,int &r)\n{\n\tif(!u)\n\t{\n\t\tl=0,r=0;\n\t\treturn;\n\t}\n\tif(tr[u].val<=x) l=u,divid(tr[u].ch[1],x,tr[u].ch[1],r);\n\telse r=u,divid(tr[u].ch[0],x,l,tr[u].ch[0]);\n\tupdate(u);\n}\nint merge(int l,int r)\n{\n\tif(!l) return r;\n\tif(!r) return l;\n\tif(tr[l].key<tr[r].key)\n\t{\n\t\ttr[l].ch[1]=merge(tr[l].ch[1],r);\n\t\tupdate(l);\n\t\treturn l;\n\t}\n\telse\n\t{\n\t\ttr[r].ch[0]=merge(l,tr[r].ch[0]);\n\t\tupdate(r);\n\t\treturn r;\n\t}\n}\nint kth(int u,int k)\n{\n\tif(k<=tr[tr[u].ch[0]].siz) return kth(tr[u].ch[0],k);\n    else\n    {\n        if(k==tr[tr[u].ch[0]].siz+1) return u;\n        else \n        {\n            k-=tr[tr[u].ch[0]].siz+1;\n            return kth(tr[u].ch[1],k);\n        }\n    }\n} \nint main()\n{\n\tint l,r,p;\n\tsrand(time(NULL));\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint k,x;\n\t\tscanf(\"%d%d\",&k,&x);\n\t\tif(k==1)\n\t\t{\n\t\t\tdivid(root,x,l,r);\n\t\t\tAdd(x);\n\t\t\troot=merge(merge(l,cnt),r);\n\t\t}\n\t\telse if(k==2)\n\t\t{\n\t\t\tdivid(root,x,l,p);\n\t\t\tdivid(l,x-1,l,r);\n\t\t\tr=merge(tr[r].ch[0],tr[r].ch[1]);\n\t\t\troot=merge(merge(l,r),p);\n\t\t}\n\t\telse if(k==3)\n\t\t{\n\t\t\tdivid(root,x-1,l,r);\n            printf(\"%d\\n\",tr[l].siz+1);\n            root=merge(l,r);\n\t\t}\n\t\telse if(k==4) printf(\"%d\\n\",tr[kth(root,x)].val);\n\t\telse if(k==5)\n\t\t{\n\t\t\tdivid(root,x-1,l,r);\n            printf(\"%d\\n\",tr[kth(l,tr[l].siz)].val);\n            root=merge(l,r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdivid(root,x,l,r);\n            printf(\"%d\\n\",tr[kth(r,1)].val);\n            root=merge(l,r);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1533819239,
        "uid": 21874,
        "name": "hicc0305",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "184ms /  3.15MB\n\n\u4ee3\u7801\uff1a2.61KB C++11\n\n\n\u65f6\u7a7a\u4ee5\u53ca\u7f16\u7a0b\u590d\u6742\u5ea6\u90fd\u8fd8\u597d\u5427= =\uff0c\u5927\u5bb6\u4f3c\u4e4e\u90fd\u5f88\u559c\u6b22Splay\uff1f\u849f\u84bb\u6709\u70b9\u5f3a\u8feb\u75c7\uff0c\u5bf9\u4e8e\u968f\u673a\u5316\uff08\u4ee5\u53ca\u5177\u6709\u968f\u673a\u6027\uff0c\u590d\u6742\u5ea6\u7684logn\u662f\u5747\u644a\u610f\u4e49\uff09\u7684\u7b97\u6cd5\u603b\u6709\u62b5\u89e6\u5fc3\u7406\uff0c\u4f46\u4e0d\u5f97\u4e0d\u8bf4\uff0cSplay\u4e0eTreap\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u4e0e\u7f16\u7a0b\u590d\u6742\u5ea6\u8f83\u4e4b\u4e8eAVL\u4e0eRed\u2014Black\u90fd\u662f\u5f88\u4f18\u79c0\u7684\uff0c\u66f4\u91cd\u8981\u7684\u662f\u4ed6\u4eec\u652f\u6301\u5408\u5e76O\\_O,\u4ece\u76ee\u524d\u770b\u6765\uff0cSBT(Size Blanced tree)\u4f3c\u4e4e\u6ca1\u6709\u652f\u6301\u5408\u5e76\u7684\u64cd\u4f5c\uff0c\u5e9f\u8bdd\u8bf4\u4e86\u4e00\u5927\u5806\uff0c\u8bf4\u6b63\u4e8b\u3002\n\n\nSBT\u7684\u57fa\u672c\u64cd\u4f5c\u2014\u2014zig(\u5de6\u65cb\uff09\uff0czag\uff08\u53f3\u65cb\uff09\uff0cmaintain\uff0cinsert\uff0cerase\uff08\u5220\u9664\uff09\uff0crank\uff08\u5927\u5c0f\u4e3ak\u7684\u6570\u7684\u6392\u540d\uff09\uff0cselect\uff08\u6392\u540d\u4e3ak\u7684\u6570\uff09\uff0cpred\uff08\u524d\u9a71\uff09\uff0csucc\uff08\u540e\u7ee7\uff09\n\n\n\u9664\u4e86maintain\uff0c\u5176\u4ed6\u7684\u90fd\u4e0e\u666e\u901a\u7684BST\uff08\u4e8c\u832c\u6392\u5e8f\u6811\uff09\u4e00\u6a21\u4e00\u6837\uff0c\n\n\u6240\u4ee5\u6211\u8fd9\u91cc\u5c31\u4ecb\u7ecd\u4e00\u4e0bmaintain\n\nSBT\u53ea\u7ef4\u62a4\u4e00\u4e2akey\uff1a\u952e\u503c\uff0c\u4e00\u4e2asize\uff1a\u5b50\u6811\u4e2d\u8282\u70b9\u7684\u4e2a\u6570\u3002\n\n\u6211\u4eec\u8003\u8651\uff0c\u4ec0\u4e48\u6837\u7684\u4e8c\u53c9\u6811\u662f\u5e73\u8861\u7684\uff1f\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5176\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\u90fd\u5927\u81f4\u7b49\u4e8e\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u5373size[left]~=\uff08\u8fd1\u4f3c\u7b49\u4e8e\uff09size[right]\n\n\u53ef\u662f\u8fd9\u4e2a\u5927\u81f4\uff0c\u8303\u56f4\u5c31\u5f88\u5bbd\u4e86\uff0c\u6211\u4eec\u4e0d\u597d\u786e\u5b9a\uff0c\n\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\uff0c\u4ec0\u4e48\u6837\u7684\u4e8c\u53c9\u6811\u4e00\u5b9a\u662f\u4e0d\u5e73\u8861\u7684\uff1f\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\n\n\u82e5\u5176\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\u5927\u4e8e\u7b49\u4e8e\u5176\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u8fd9\u65f6\u6211\u4eec\u753b\u4e2a\u56fe\u5c31\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\uff0c\u8fd9\u6811\u4e0d\u5e73\u8861\uff0c\u6211\u4eec\u53ea\u9700\u901a\u8fc7\u4e00\u6b21zag(\u6839)\u5373\u53ef\u5c06\u5176\u5e73\u8861\u3002\n\n\u82e5\u5176\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\u5927\u4e8e\u7b49\u4e8e\u5176\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5148\u5c06\u5176\u5de6\u5b50\u6811\u5e73\u8861\uff08\u4f60\u53ef\u4ee5\u9009\u62e9\u9012\u5f52\uff0c\u4f46\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\uff0c\u63a5\u7740\u770b\u770b\u4e0b\u9762\u4e24\u79cd\u60c5\u51b5\u5c31\u80fd\u660e\u767d\uff09\uff0c\u7136\u540e\u4e00\u4e2azag(\u6839)\u5c31\u53ef\u4ee5\u4f7f\u6811\u5e73\u8861\u3002\n\n\u82e5\u5176\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\u5927\u4e8e\u7b49\u4e8e\u5176\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u8fd9\u65f6\u7c7b\u6bd4\u60c5\u51b51\uff0c\u6211\u4eec\u53ea\u9700\u4e00\u4e2azig(\u6839)\n\n\u82e5\u5176\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\u5927\u4e8e\u7b49\u4e8e\u5176\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u8fd9\u65f6\u7c7b\u6bd4\u60c5\u51b52\uff0c\u6211\u4eec\u5148\u5e73\u8861\u53f3\u5b50\u6811\uff0c\u518dzig(\u6839\uff09\n\n\n\u5f88\u660e\u663e\uff0c\u8fd94\u4e2d\u60c5\u51b5\u662f\u5bf9\u79f0\u7684\uff0c\u6211\u4eec\u65e0\u9700\u4e00\u4e00\u5217\u4e3e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2aflag\uff0c\n\nflag\u4e3afalse\u8868\u793a\u5f53\u524d\u8282\u70b9\u63d2\u5165\u5230\u5de6\u5b50\u6811\u4e2d\uff0c\u8fd9\u65f6\u53ea\u6709\u53ef\u80fd\u51fa\u73b0\u60c5\u51b51,2\n\nflag\u4e3atrue\u8868\u793a\u5f53\u524d\u8282\u70b9\u63d2\u5165\u5230\u53f3\u5b50\u6811\u4e2d\uff0c\u8fd9\u65f6\u53ea\u6709\u53ef\u80fd\u51fa\u73b0\u60c5\u51b53,4\n\n\n\u90a3\u4e48\u6211\u4eec\u5728\u65cb\u8f6c\u5b8c\u5f53\u524d\u7684\u6839\u540e\uff0c\u8fd8\u662f\u6709\u5fc5\u8981\u518d\u68c0\u67e5\u4e00\u4e0b\u5176\u5de6\u53f3\u5b50\u4e66\u662f\u5426\u90fd\u5df2\u5e73\u8861\uff0c\u9012\u5f52\u8c03\u7528\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u53ef\u4ee5\u8bc1\u660e\u5728\u4e00\u4e2a\u5e73\u8861\u6811\u4e2d\u63d2\u5165\u540e\u8fdb\u884c\u7684maintain\u9012\u5f52\u7684\u6548\u7387\u5747\u644a\u662fO(1)\u7684\uff0c\u800c\u4e1499%\u603b\u662fO(1)\u7684= =\n\n\u849f\u84bb\u89c9\u5f97SBT\u5e94\u8be5\u5c31\u662f\u8fd9\u6837\u4e86\uff0c\u8fd8\u7b97\u6e05\u695a\u5427\uff1f\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int N=100100;\nint M;\nstruct Size_Blanced_Tree{\n    int rt,NodeCnt;\n    int key[N],s[N],left[N],right[N];\n    void clear(){\n        rt=0,NodeCnt=0;\n        memset(key,0,sizeof(key));\n        memset(s,0,sizeof(s));\n        memset(left,0,sizeof(left));\n        memset(right,0,sizeof(right));\n    }\n    void zig(int &p){\n        int k=right[p];\n        right[p]=left[k];\n        left[k]=p;\n        s[k]=s[p];\n        s[p]=s[left[p]]+s[right[p]]+1;\n        p=k;\n    }\n    void zag(int &p){\n        int k=left[p];\n        left[p]=right[k];\n        right[k]=p;\n        s[k]=s[p];\n        s[p]=s[left[p]]+s[right[p]]+1;\n        p=k;\n    }\n    void maintain(int &p,bool flag){\n        if (!flag){\n            if (s[left[left[p]]]>s[right[p]])zag(p);\n            else{\n                if (s[right[left[p]]]>s[right[p]]){\n                    zig(left[p]);\n                    zag(p);\n                }else return;\n            }\n        }else{\n            if (s[right[right[p]]]>s[left[p]])zig(p);\n            else{\n                if (s[left[right[p]]]>s[left[p]]){\n                    zag(right[p]);\n                    zig(p);\n                }else return;\n            }\n        }\n        maintain(left[p],false);\n        maintain(right[p],true);\n        maintain(p,true);\n        maintain(p,false);\n    }\n    void insert(int &p,int x){\n        if (!p){\n            p=++NodeCnt;key[p]=x;s[p]=1;\n            return; \n        }\n        s[p]++;\n        if (x<key[p])insert(left[p],x);\n            else insert(right[p],x);\n        maintain(p,x>=key[p]);\n    }\n    int erase(int &p,int x){\n        s[p]--;int tmp;\n        if (x==key[p] || (x<key[p] && !left[p]) || (x>key[p] && !right[p])){\n            tmp=key[p];\n            if (!left[p] || !right[p])p=left[p]+right[p];\n            else key[p]=erase(left[p],key[p]+1);\n            return tmp;\n        }\n        if (x<key[p])tmp=erase(left[p],x);else tmp=erase(right[p],x);\n        return tmp;\n    }\n    int rank(int &p,int x){\n        if (!p)return 1;int tmp=0;\n        if (x<=key[p])tmp=rank(left[p],x);\n        else tmp=s[left[p]]+1+rank(right[p],x);\n        return tmp;\n    }\n    int select(int &p,int x){\n        if (x==s[left[p]]+1)return key[p];\n        if (x<=s[left[p]])return select(left[p],x);\n        else return select(right[p],x-1-s[left[p]]);\n    }\n    int pred(int &p,int x){\n        if (!p)return x;int tmp;\n        if (x<=key[p])tmp=pred(left[p],x);\n        else{tmp=pred(right[p],x);if (tmp==x)tmp=key[p];}\n        return tmp;\n    }\n    int succ(int &p,int x){\n        if (!p)return x;int tmp;\n        if (x>=key[p])tmp=succ(right[p],x);\n        else{tmp=succ(left[p],x);if (tmp==x)tmp=key[p];}\n        return tmp;\n    }\n}T;\nint main(){\n    scanf(\"%d\",&M);\n    T.clear();\n    int &rt=T.rt=0;\n    while (M--){\n        int opt,x;\n        scanf(\"%d%d\",&opt,&x);\n        if (opt==1)T.insert(rt,x);\n        else if (opt==2)T.erase(rt,x);\n        else if (opt==3)printf(\"%d\\n\",T.rank(rt,x));\n        else if (opt==4)printf(\"%d\\n\",T.select(rt,x));\n        else if (opt==5)printf(\"%d\\n\",T.pred(rt,x));\n        else if (opt==6)printf(\"%d\\n\",T.succ(rt,x));\n    }\n    return 0;\n}\n\n```",
        "postTime": 1503558702,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "# \u54b3\u54b3~~\u770b\u9ed1\u677f\u4e86~~\uff1a\n\n\u672c\u9898\u89e3\u8bb2\u89e3\uff1atreap\n\n\n\n\u9996\u5148\u5e73\u8861\u6811\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5728\u4e86\u89e3\u4e4b\u524d\u8981\u77e5\u9053\u4e8c\u53c9\u67e5\u627e\u6811\n\u4f20\u9001\u95e8\uff1a[\u4e8c\u53c9\u67e5\u627e\u6811\u535a\u5ba2](https://www.cnblogs.com/Renyi-Fan/p/8185325.html)\n\n## \u672c\u9898\u89e3ls==\u5de6\u513f\u5b50\uff0crs==\u53f3\u513f\u5b50\n### \u8fdb\u5165\u6b63\u9898\uff1a~~\u5f00\u59cb\u4e86\uff0c\u8bf7\u5750\u7a33\u6276\u597d\u2026\u2026~~\n\n\u5e73\u8861\u6811\u662f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u4f18\u5148\u7ea7\uff0c\u5176\u4e00\u4e2a\u8282\u70b9\u7684ls\u4f18\u5148\u7ea7\u5c0f\u4e8e\u6b21\u8282\u70b9\u7684\u4f18\u5148\u7ea7\uff0crs\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u8282\u70b9\u7684\u4f18\u5148\u7ea7\uff0c\u6700\u7b80\u5355\u7684\u4f18\u5148\u7ea7\u5c31\u662f\u6743\u503c\u5927\u5c0f\uff0c\u8fd8\u6709\u6df1\u5ea6(~~LCT~~)\u7b49\u7b49\u3002\n\u4e00\u68f5\u7b80\u5355\u7684\u5e73\u8861\u6811\uff1a![](https://i.loli.net/2019/07/27/5d3c128ed0f9136690.png)\n\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u5c31\u662f\u63d2\u5165\u6216\u5220\u9664\u4e4b\u540e\u8fd9\u68f5\u6811\u7684\u5e73\u8861\u6001\uff0c\u8ba9\u4ed6\u8d8b\u8fd1\u4e8e\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u6765\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\u3002Treap\u7684\u672c\u8d28\u662f\u6309\u7167\u968f\u673a\u751f\u6210\u7684\u6570\u5b57\u6765\u4f18\u5316\uff0c\u6240\u4ee5\u67d0\u4e9b\u65f6\u5019\u8981\u770b\u8138\u3002\u4f46\u6548\u7387\u8fd8\u662f\u5f88\u9ad8\u7684\u3002\n\u63a5\u4e0b\u6765\u4ecb\u7ecd\u5982\u4f55\u7ef4\u62a4\u5e73\u8861\u6811\u2014\u2014\u5de6\u65cb\uff08zig)\u548c\u53f3\u65cb\uff08zag):\n\n\u5de6\u65cb\u548c\u53f3\u65cb\u662f\u8ba9ls,rs\u8f6c\u5230\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u4f46\u5e73\u8861\u6027\u4e0d\u53d8\u3002\n\n\uff08\u7ea2\u8272\u8868\u793a\u5220\u9664\u7684\u8fb9\uff0c\u84dd\u8272\u8868\u793a\u65b0\u5efa\u7684\u8fb9\uff0c\u865a\u7ebf\u8868\u793a\u4e4b\u524d\u88ab\u5220\u6389\u7684\u8fb9\uff09\n\n\u5bf9\u4e0a\u56fe\u5de6\u65cb\uff1a\n\n![](https://i.loli.net/2019/07/27/5d3c4ba0cf28285662.png)\n\u7136\u540e\u5c31\u53d8\u6210\u4e86\n![](https://i.loli.net/2019/07/27/5d3c4bca2985011693.png)\n## \u5de6\u65cb\u5b8c\u6210\u3002\n\n\u8fd8\u662f\u90a3\u4e2a\u56fe\uff0c\u53f3\u65cb\uff1a\n\n![](https://i.loli.net/2019/07/27/5d3c4c694644a79725.png)\n\u6574\u7406\u540e\uff1a\n![](https://i.loli.net/2019/07/27/5d3c4c7adc52241414.png)\n## \u53f3\u65cb\u5b8c\u6210\n## \u6574\u4e2a\u8fc7\u7a0b\uff1a\n![](https://i.loli.net/2019/07/27/5d3c407fa037575592.png)\n\n\u5269\u4e0b\u7684\u5c31\u4f9d\u636e\u5e73\u8861\u6811\u7684\u6027\u8d28\u904d\u5386\u5bfb\u627e\u5373\u53ef\uff0c\u522b\u5fd8\u4e86\u5404\u79cd\u7ef4\u62a4\u3002\n# \u5b8c\u6574\u4ee3\u7801+\u8be6\u7ec6\u8bb2\u89e3\u6ce8\u91ca\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define N 101010\nusing namespace std;\nint tot,n,root,inf=1e9;\nstruct node{\nint l,r;\n//\u5206\u522b\u8868\u793a\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50 \nint dat,size;\n//size\u8868\u793a\u6b21\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\uff0cdat\u8868\u793a\u968f\u673a\u751f\u6210\u7684\u503c \nint cnt,val;\n//val\u8868\u793a\u6743\u503c,cnt\u8868\u793a\u5143\u7d20\u7684\u6570\u91cf\n//\u56e0\u4e3a\u4e00\u6837\u503c1\u7684\u70b9\u53ef\u80fd\u4e0d\u53ea\u4e00\u4e2a\n//\u5728\u5220\u9664\u65f6 \uff0ccnt--,\u5982\u679ccnt\u4e3a0\u5219\u5220\u53bb \n}a[N];\nvoid updat(int p){\na[p].size=a[a[p].l].size+a[a[p].r].size+a[p].cnt;\n}//\u4fee\u6539\u2026\u2026\u5373\u7ef4\u62a4\u8282\u70b9\u4fe1\u606f\uff08size) \nint grbv(int p,int v)//\u67e5\u8be2\u6392\u540d \n{\n\tif(p==0) return 0;\n\tif(v==a[p].val) return a[a[p].l].size+1;//\u627e\u5230\u8fd4\u56de \n\tif(v<a[p].val) return grbv(a[p].l,v);//\u6bd4\u8282\u70b9\u5c0f\u67e5\u8be2\u5de6\u5b50\u6811 \n\treturn grbv(a[p].r,v)+a[a[p].l].size+a[p].cnt;//\u5426\u5219\u67e5\u8be2\u53f3\u5b50\u6811,\u56e0\u4e3a\u5de6\u5b50\u6811\u548c\u6b64\u8282\u70b9\u7684\u503c\u90fd\u6bd4\u5bfb\u627e\u7684\u5c0f\uff0c\u6545\u8981\u52a0\u4e0a \n}\nint grbr(int p,int v)//\u67e5\u8be2\u7b2cv\u5927\u6570 \n{\n\tif(p==0) return inf;//\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u6700\u5927\u503c \n\tif(a[a[p].l].size>=v) return grbr(a[p].l,v);//\u5982\u679c\u5de6\u5b50\u6811\u7684\u6570\u91cf\u5df2\u7ecf\u8d85\u8fc7v\uff0c\u5bfb\u627e\u5de6\u5b50\u6811 \n\tif(a[a[p].l].size+a[p].cnt>=v) return a[p].val;//\u5982\u679c\u5de6\u5b50\u6811\u52a0\u4e0a\u6b64\u8282\u70b9\u7684\u6570\u91cf\u521a\u597d\u7b49\u4e8ev\uff0c\u6b64\u8282\u70b9\u5373\u4e3a\u6240\u6c42\u6570 \n\treturn grbr(a[p].r,v-a[a[p].l].size-a[p].cnt);//\u5426\u5219\u5728\u53f3\u5b50\u6811\u4e0a\u5bfb\u627e \n}\n\nvoid zig(int &p)//\u5de6\u65cb\n{\n\tint q=a[p].l;//\u6307\u5411\u5de6\u8282\u70b9 \n\ta[p].l=a[q].r,a[q].r=p;//\u5de6\u53f3\u8282\u70b9\u8f6c \n\tp=q;\n\tupdat(a[p].r);updat(p);//\u7ef4\u62a4 \n}\nvoid zag(int &p)//\u53f3\u65cb\n{\n\tint q=a[p].r;//\u6307\u5411\u53f3\u8282\u70b9 \n\ta[p].r=a[q].l,a[q].l=p;////\u5de6\u53f3\u8282\u70b9\u8f6c  \n\tp=q;\n\tupdat(a[p].l),updat(p);//\u7ef4\u62a4 \n} \n\n\n//\u5728\u51fd\u6570\u53d8\u91cf\u4e2d\uff0c\u52a0\u4e2a&\u8868\u793a\u5916\u9762\u7a7f\u8fdb\u6765\u53d8\u91cf\u7684\u503c\u4e5f\u8ddf\u7740\u53d8\uff0c\u8fd9\u91cc\u662froot \nvoid inster(int &p,int v)//p\u8868\u793a\u8282\u70b9\u53f7\uff0cv\u8868\u793a\u6b64\u8282\u70b9\u7684\u6743\u503c\u3002 \n{\n\tif(p==0)//\u5982\u679c\u6ca1\u6709\u65b0\u5efa\u4e00\u4e2a\u70b9 \n\t{\n\t\tp=++sum;\n\t\ta[p].dat=rand();\n\t\ta[p].size=a[p].cnt=1;\n\t\ta[p].val=v;\n\t\treturn;\n\t}\n\t\n\tif(v==a[p].val)//\u5982\u679c\u6709\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u5c31cnt++; \n\t{\n\t\ta[p].cnt++;\n\t\tupdat(p);//\u7ef4\u62a4\u8282\u70b9\u4fe1\u606f \n\t\treturn;\n\t}\n\t//\u5426\u5219\u7ee7\u7eed\u5411\u4e0b\u5bfb\u627e\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u5408\u9002\u4f4d\u7f6e \n\tif(v<a[p].val)//\u5982\u679c\u6bd4\u6b64\u8282\u70b9\u5c0f\uff0c\u6839\u636e\u5e73\u8861\u6811\u6027\u8d28\uff0c\u5bfb\u627e\u5de6\u5b50\u6811 \n\t{\n\t\tinster(a[p].l,v);\n\t\tif(a[p].dat<a[a[p].l].dat) zig(p);//\u5982\u679c\u6b64\u8282\u70b9\u7684\u968f\u673a\u751f\u6210\u503c\u5c0f\u4e8e\u5de6\u8282\u70b9\uff0c\u5de6\u65cb \n\t}\n\telse//\u6bd4\u5b83\u8282\u70b9\u5927\uff0c\u5bfb\u627e\u53f3\u5b50\u6811 \n\t{\n\t\tinster(a[p].r,v);\n\t\tif(a[p].dat<a[a[p].r].dat) zag(p);//\u5982\u679c\u5c0f\u4e8e\u53f3\u8282\u70b9\u7684\u503c\uff0c\u53f3\u65cb \n\t}\n\tupdat(p);//\u522b\u5fd8\u4e86\u7ef4\u62a4\u8282\u70b9\u4fe1\u606f \n}\nint gp(int v,int p)//\u6c42\u503c\u4e3av\u7684\u524d\u9a71 \n{\n\tif(!p) return -inf;//\u5982\u679c\u6ca1\u6709\u8fd4\u56de\u6781\u5c0f\u503c \n\tif(v<=a[p].val) gp(v,a[p].l);//\u5982\u679c\u6b64\u8282\u70b9\u5927\u4e8e\u7b49\u4e8ev,\u5bfb\u627e\u5de6\u5b50\u6811 \n\t else return max(gp(v,a[p].r),a[p].val);//\u8fd4\u56de\u53f3\u5b50\u6811\u7684\u503c\u548c\u6b64\u8282\u70b9\u7684max\uff0c\u56e0\u4e3a\u524d\u9a71\u53ef\u80fd\u4e3a\u6b64\u8282\u70b9 \n}\nint gn(int v,int p)//\u6c42\u503c\u4e3av\u7684\u540e\u7ee7 \n{\n\tif(!p) return inf;//\u5982\u679c\u6ca1\u6709\u8fd4\u56de\u6781\u5927\u503c \n\tif(v>=a[p].val)//\u5982\u679c\u8282\u70b9\u7684\u503c\u5927\u4e8e\u7b49\u4e8ev,\u5bfb\u627e\u53f3\u5b50\u6811 \n\tgn(v,a[p].r);\n\telse//\u67e5\u627e\u5de6\u5b50\u6811\uff0c\u518d\u548c\u6b64\u8282\u70b9\u53d6\u4e2amin,v\u53ef\u80fd\u521a\u597d\u4e3a\u5de6\u5b50\u6811\uff0c\u5c31\u5728\u5de6\u5b50\u6811\u91cc\u627e\u4e0d\u5230\uff0c\u5c06\u5f97\u5230\u6781\u5927\u503c\uff0c\u6b64\u65f6\u540e\u7ee7\u4e3a\u6b64\u8282\u70b9\u6240\u4ee5\u53d6\u4e2amin \n\treturn min(a[p].val,gn(v,a[p].l));\n}\nvoid rmove(int &p,int v)//\u5220\u9664\u4e00\u4e2a\u5927\u5c0f\u4e3av\u7684\u70b9 \n{\n\tif(p==0) return;//\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u70b9\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de \n\tif(v==a[p].val)//\u5982\u679c\u627e\u5230\u4e86\u540c\u65f6\u6570\u91cf>1\uff0c\u6570\u91cfcnt--,\u4e5f\u8981\u7ef4\u62a4\u4fe1\u606f \n\t{\n\t\tif(a[p].cnt>1)\n\t\t{\n\t\t\ta[p].cnt--;\n\t\t\tupdat(p);\n\t\t\treturn;\n\t\t}\n\t\t//\u63a5\u4e0b\u6765\u5904\u7406\u6b64\u8282\u70b9cnt\u4e3a1\u65f6\uff0c\u5220\u53bb\u8981\u7ef4\u62a4\u5e73\u8861\u6811 \n\t\tif(a[p].l||a[p].r)\n\t\t{\n\t\t\tif(a[p].r==0||a[a[p].l].dat>a[a[p].r].dat)\t\n\t\t\tzig(p),rmove(a[p].r,v);//\u5982\u679c\u53f3\u5b50\u6811\u4e3a0\u6216\u5de6\u5b50\u6811\u7684\u968f\u673a\u503c\u5927\u4e8e\u53f3\u5b50\u6811\uff0c\u5de6\u65cb\uff0c\u5728\u5de6\u5b50\u6811\u91cc\u5220\u9664 \n\t\t\telse zag(p),rmove(a[p].l,v);//\u5426\u5219\uff0c\u53f3\u65cb\uff0c\u5728\u53f3\u5b50\u6811\u91cc\u5220\u9664 \n\t\t\tupdat(p);//\u7ef4\u62a4\u4fe1\u606f \n\t\t}\n\t\telse//\u5982\u679c\u90fd\u4e0d\u6ee1\u8db3\uff0c\u5c31\u6ca1\u6709\u6b64\u70b9\u4e86 \n\t\tp=0;\n\t\treturn;\n\t}\n\tif(v<a[p].val)\trmove(a[p].l,v);//\u5982\u679c\u5c0f\u4e8e\u6b64\u8282\u70b9\uff0c\u5bfb\u627e\u5de6\u5b50\u6811 \n\t else   rmove(a[p].r,v);//\u5bfb\u627e\u53f3\u5b50\u6811 \n\t updat(p);//\u7ef4\u62a4\u4fe1\u606f \n}\nint main()\n{\n\tscanf(\"%d\",&n);\t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint opt,x;\tscanf(\"%d%d\",&opt,&x);\n\t\tif(opt==1)//\u6dfb\u52a0\u4e00\u4e2a\u6570 \n\t\t{\n\t\t\tinster(root,x);\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt==2)//\u5220\u9664\u4e00\u4e2a\u6570 \n\t\t{\n\t\t\trmove(root,x);\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt==3)//\u67e5\u8be2\u6392\u540d \n\t\t{\n\t\t\tprintf(\"%d\\n\",grbv(root,x));\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt==4)//\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u503c \n\t\t{\n\t\t\tprintf(\"%d\\n\",grbr(root,x));\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt==5)//\u6c42x\u7684\u524d\u9a71 \n\t\t{\n\t\t\tprintf(\"%d\\n\",gp(x,root));\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt==6)//\u6c42x\u7684\u540e\u7ee7 \n\t\t{\n\t\t\tprintf(\"%d\\n\",gn(x,root));\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n### \u5b8c\u7ed3\u6563\u82b1",
        "postTime": 1564233495,
        "uid": 126164,
        "name": "lzxy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\n\u9898\u76ee\u94fe\u63a5\uff1a~~https://www.luogu.org/problemnew/show/P3369~~\n\n\u2014\u2014\u5173\u4e8eFHQ\u2014\u2014\n\n\u666e\u901a\u7684Treap\u4ee5\u65cb\u8f6c\u4e3a\u4e3b\u8981\u64cd\u4f5c\uff0cFHQ\u5219\u662f\u7c7b\u4f3c\u4e8e\u5de6\u504f\u6811\uff0c\u4ee5\u62c6\u5206\u3001\u5408\u5e76\u4e3a\u4e3b\u8981\u64cd\u4f5c\u3002\n\n### Split \u62c6\u5206\u64cd\u4f5c\nSplit\u662f\u628a\u4e00\u9897treap\u5206\u5f00\u4e24\u4e2a\u6811\u7684\u64cd\u4f5c\uff0c\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\uff1b\n\n\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u6709\u4e24\u79cd\u5206\u6cd5\uff0c\u4e00\u79cd\u662f\u6309Val\u5206\uff0c\u4e00\u79cd\u662f\u6309Size\u5206\uff0c\u5177\u4f53\u7528\u54ea\u4e2a\u8981\u770b\u60c5\u51b5\uff0c\u672c\u9898\u7528Val\u5206\u8f83\u4e3a\u65b9\u4fbf\uff1b\n\n```c\n\u6ce8\u610f\u8fd9\u65f6\u5019Val\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u8282\u70b9\u90fd\u5728\u5de6\u6811\u4e2d\uff0c\u5927\u4e8ex\u7684\u90fd\u5728\u53f3\u6811\u4e2d\n```\n\n### Merge \u5408\u5e76\u64cd\u4f5c\n\nMerge\u5c31\u662f\u628a\u4e24\u4e2aTreap\u5408\u6210\u4e00\u4e2a\uff0c\u4ee5\u9012\u5f52\u6765\u5b9e\u73b0\uff1b\n\nFHQ\u7684\u4e3b\u8981\u5e73\u8861\u6761\u4ef6\u5373\u662f\u6211\u4eecrand()\u51fa\u6765\u7684\u7684Key\u503c\uff0c\u4f46\u6211\u4eec\u4e0d\u9700\u8981\u62c5\u5fc3\u539f\u672c\u7684Val\u3002\u6211\u4eec\u5728Split\u64cd\u4f5c\u4e2d\u4fbf\u662f\u4ee5Val\u4f5c\u4e3a\u5e73\u8861\u6761\u4ef6\u5904\u7406\u8fc7\u4e86\uff0c\u5728Merge\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528Key\u6765\u8c03\u8282\uff0c\u9632\u6b62\u94fe\u7684\u60c5\u51b5\u4ee5\u4f18\u5316Treap\u6548\u7387\uff1b\n\n### Rank \u67e5\u8be2\u6392\u540d\u64cd\u4f5c\n\n\u627e\u6392\u540d\u4e3aK\u7684\u6570\uff0c\u548cSplay\u4e00\u6837\uff1b\n\n\u5982\u679cK\u8fd8\u6bd4\u5de6\u5b50\u6811\u7684Size\u5c0f\uff0c\u5c31\u53d6\u5de6\u5b50\u6811\u627e\u5426\u5219K\u51cf\u53bb\u5de6\u5b50\u6811\u7684Size\u548c\u5f53\u524d\u76841\u4e2a\uff0c\n\u53d6\u53f3\u5b50\u6811\u627e\u73b0\u5728\u7684\u7b2ck\u4e2a\uff0c\u627e\u5230\u6709(\u5de6\u5b50\u6811Size)=K\u5373\u53ef\n\n\u5b66\u4e60\u53c2\u8003\u535a\u5ba2\uff1ahttps://blog.csdn.net/CABI_ZGX/article/details/79963427\n\n\n## Code.jpg\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define maxn (100000+10)\n#define updata(x) size[x]=size[lson[x]]+size[rson[x]]+1\nusing namespace std;\nint val[maxn],lson[maxn],rson[maxn],num,key[maxn],n,size[maxn],root;\nvoid insert(int x){\n\tsize[++num]=1;\n\tval[num]=x;\n\tkey[num]=rand();//\u7cbe\u9ad3\u6240\u5728 \n\tlson[num]=rson[num]=0;\n}\nvoid split(int u,int x,int &l,int &r){\n\tif(!u){l=r=0;return;}//\u6ca1\u6709\u5b50\u6811\u53ef\u4ee5\u62c6\u5206\u4e86\uff0c\u8bf4\u660e\u8be5\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u4e3a\u7a7a \n\tif(val[u]<=x) l=u,split(rson[u],x,rson[u],r);//\u5982\u679cx\u5728\u5f53\u524d\u6839\u7ed3\u70b9\u7684\u53f3\u5b50\u6811 \n\telse r=u,split(lson[u],x,l,lson[u]);//\u5982\u679cx\u5728\u5f53\u524d\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811 \n\tupdata(u);\n}\nint merge(int l,int r){\n\tif(!l || !r) return l+r;//\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u76f4\u63a5\u628a\u53e6\u4e00\u68f5\u6811\u63a5\u4e0a\u53bb \n\tif(key[l]<key[r]){//\u8bf4\u660e\u5de6\u5b50\u6811\u4e3a\u6839 \n\t\trson[l]=merge(rson[l],r);//\u5de6\u5b50\u6811\u7684\u53f3\u5b69\u5b50\u53ef\u80fd\u4f1a\u53d8 \n\t\tupdata(l);return l;\n\t}\n\telse{\n\t\tlson[r]=merge(l,lson[r]);//\u53f3\u5b50\u6811\u7684\u5de6\u5b69\u5b50\u53ef\u80fd\u4f1a\u53d8\n\t\tupdata(r);return r;\n\t}\n}\nint rank(int u,int num){\n\tif(num<=size[lson[u]]) return rank(lson[u],num);//\u8bf4\u660e\u5728\u5de6\u5b50\u6811\u4e2d\n\telse{\n\t\tif(num==size[lson[u]]+1) return u;\n\t\telse{\n\t\t\tnum-=size[lson[u]]+1;//\u53f3\u5b50\u6811\u53ea\u662f\u5f53\u524d\u5b50\u6811\u7684\u6392\u540d\uff0c\u8981\u51cf\u53bb\u524d\u9762\u7684\n\t\t\treturn rank(rson[u],num);//\u9012\u5f52\u67e5\u627e\u53f3\u5b50\u6811 \n\t\t}\n\t}\n}\nsigned main(){\n\tint opt,x,l,r,left;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d\",&opt,&x);\n\t\tswitch(opt){\n\t\t\tcase 1:\n\t\t\t\tsplit(root,x,l,r),insert(x);\n\t\t\t\troot=merge(merge(l,num),r);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tsplit(root,x,l,left),split(l,x-1,l,r);\n\t\t\t\tr=merge(lson[r],rson[r]);\n\t\t\t\troot=merge(merge(l,r),left);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tsplit(root,x-1,l,r);\n\t\t\t\tprintf(\"%d\\n\",size[l]+1);\n\t\t\t\troot=merge(l,r);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tprintf(\"%d\\n\",val[rank(root,x)]);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tsplit(root,x-1,l,r);\n\t\t\t\tprintf(\"%d\\n\",val[rank(l,size[l])]);\n\t\t\t\troot=merge(l,r);\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tsplit(root,x,l,r);\n\t\t\t\tprintf(\"%d\\n\",val[rank(r,1)]);\n\t\t\t\troot=merge(l,r);\n\t\t\t\tbreak;\n\t\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1550474985,
        "uid": 111957,
        "name": "Teal_",
        "ccfLevel": 0,
        "title": "FHQ\u5e73\u8861\u6811"
    },
    {
        "content": "\u8fd9\u9898\u6709\u4e00\u4e2a\u975e\u5e38\u795e\u5947\u7684\u89e3\u6cd5\u5c31\u662ffhq treap\n\n\u5176\u601d\u8def\u548c\u4ee3\u7801\u697c\u4e0b\u7684\u8fdc\u822a\u4e4b\u66f2\u5927\u4f6c\u5df2\u7ecf\u7ed9\u51fa\u4e86\u8be6\u7ec6\u7684\u89e3\u91ca\uff0c\n\n\u4f46\u662f\u5bf9\u4e8e6\u79cd\u64cd\u4f5c\u7684\u4ee3\u7801\u5b9e\u73b0\u8c8c\u4f3c\u6ca1\u6709\u89e3\u91ca\u7684\u7279\u522b\u6e05\u695a\uff08\u53ef\u80fd\u662f\u90a3\u4f4d\u5927\u4f6c\u592a\u5f3a\u89c9\u5f97\u8fd9\u4e1c\u897f\u6ca1\u5fc5\u8981\u89e3\u91ca\u5427\u3002\u4e0d\u8fc7\u6211\u53ef\u662f\u60f3\u4e86\u534a\u5929\u624d\u60f3\u660e\u767d\uff09\n\n\u90a3\u4e48\u6211\u6765\u8865\u5145\u4e00\u4e0b\u8fd9\u516d\u79cd\u64cd\u4f5c\u7684\u5177\u4f53\u5b9e\u73b0\uff1a\n\n\n###1.\u63d2\u5165\uff1a\n\n\nsplit(root,a,x,y);\n\nroot=merge(merge(x,new\\_node(a)),y);\n\n\u8fd9\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u6211\u4eec\u5148\u628a\u6811\u5206\u4e3ax,y\u4e24\u90e8\u5206\uff0c\u7136\u540e\u628a\u65b0\u7684\u8282\u70b9a\u770b\u505a\u662f\u4e00\u68f5\u6811\uff0c\u5148\u4e0ex\u5408\u5e76\uff0c\u5408\u5e76\u5b8c\u4e4b\u540e\u5c06\u5408\u5e76\u7684\u6574\u4f53\u4e0ey\u5408\u5e76\n\n\n \n\n###2.\u5220\u9664\n\n\n```cpp\n1 split(root,a,x,z);\n2 split(x,a-1,x,y);\n3 y=merge(ch[y][0],ch[y][1]);\n4 root=merge(merge(x,y),z);\n```\n\u9996\u5148\u6211\u4eec\u628a\u6811\u5206\u4e3ax\u548cz\u4e24\u90e8\u5206\n\n\u90a3\u4e48x\u6811\u4e2d\u7684\u6700\u5927\u6743\u503c\u4e3aa\n\n\n\u518d\u628ax\u5206\u4e3ax\u548cy\u4e24\u90e8\u5206\u3002\n\n\n\u6b64\u65f6x\u4e2d\u7684\u6700\u5927\u6743\u503c\u4e3aa-1\uff0c\u4e14\u6743\u503c\u4e3aa\u7684\u8282\u70b9\u4e00\u5b9a\u662fy\u7684\u6839\u8282\u70b9\u3002\n\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u65e0\u89c6y\u7684\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u628ay\u7684\u5de6\u53f3\u5b69\u5b50\u5408\u5e76\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u6210\u529f\u7684\u5220\u9664\u4e86\u6839\u8282\u70b9\uff0c\n\n\n\u6700\u540e\u518d\u628ax\uff0cy\uff0cz\u5408\u5e76\u8d77\u6765\u5c31\u597d\n\n\n###3.\u67e5\u8be2a\u7684\u6392\u540d\n\n\n \n\n1 split(root,a-1,x,y);\n\n2 printf(\"%d\\n\",siz[x]+1);\n\n3 root=merge(x,y);\n\n\u6211\u4eec\u9996\u5148\u6309\u7167a-1\u7684\u6743\u503c\u628a\u6811\u5206\u5f00\u3002\n\n\n\u90a3\u4e48x\u6811\u4e2d\u6700\u5927\u7684\u5e94\u8be5\u662fa-1\u3002\n\n\n\u90a3\u4e48a\u7684\u6392\u540d\u5c31\u662fsiz[x]+1\n\n\n###4.\u67e5\u8be2\u6392\u540d\u4e3aa\u7684\u6570\n\n\n\n 1 printf(\"%d\\n\",val[kth(root,a)]); \n\n\u76f4\u63a5\u8c03\u7528\u67e5\u627e\u6392\u540d\u7684\u51fd\u6570\u5373\u53ef\uff0c\n\n\n\u8fd9\u4e2a\u51fd\u6570\u5e94\u8be5\u6bd4\u8f83\u597d\u7406\u89e3\u3002\u3002\n\n\n\n```cpp\n###5.\u6c42x\u7684\u524d\u9a71(\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8ea\uff0c\u4e14\u6700\u5927\u7684\u6570)\n1 split(root,a-1,x,y);\n2 printf(\"%d\\n\",val[kth(x,siz[x])]);\n3 root=merge(x,y);\n```\n\u56e0\u4e3a\u8981\u5c0f\u4e8ea\uff0c\u90a3\u4e48\u6211\u4eec\u6309\u7167a-1\u7684\u6743\u503c\u5212\u5206\uff0c\n\nx\u4e2d\u6700\u5927\u7684\u4e00\u5b9a\u662f<=a-1\u7684\uff0c\n\n\n\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8f93\u51fax\u4e2d\u6700\u5927\u7684\u6570\u5c31\u597d\uff0c\n\n\n\uff08\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u56e0\u4e3asiz\u50a8\u5b58\u7684\u662f\u8282\u70b9\u7684\u6570\u76ee\uff0c\u7136\u540e\u6839\u636e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff0c\u7f16\u53f7\u6700\u5927\u7684\u5c31\u662f\u503c\u6700\u5927\u7684\uff09\n\n\n \n\n\n```cpp\n###6.\u6c42x\u7684\u540e\u7ee7(\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8ex\uff0c\u4e14\u6700\u5c0f\u7684\u6570)\n1 split(root,a,x,y);\n2 printf(\"%d\\n\",val[kth(y,1)]);\n3 root=merge(x,y);\n```\n\u548c\u4e0a\u9762\u7684\u539f\u7406\u7c7b\u4f3c\uff0c\n\n\u7559\u7ed9\u5927\u5bb6\u601d\u8003\uff0c\n\n\n\u4e0d\u61c2\u7684\u518d\u95ee\u6211\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nconst int MAXN=100001;\nstatic void read(int &n)\n{\n    char c='+';int x=0;bool flag=0;\n    while(c<'0'||c>'9'){c=getchar();if(c=='-')flag=1;}\n    while(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c-48);c=getchar();}\n    flag==1?n=-x:n=x;\n}\nint ch[MAXN][3];// 0\u5de6\u5b69\u5b50 1\u53f3\u5b69\u5b50\nint val[MAXN];// \u6bcf\u4e00\u4e2a\u70b9\u7684\u6743\u503c\nint pri[MAXN];// \u968f\u673a\u751f\u6210\u7684\u9644\u4ef6\u6743\u503c\nint siz[MAXN];// \u4ee5i\u4e3a\u8282\u70b9\u7684\u6811\u7684\u8282\u70b9\u6570\u91cf\nint sz;// \u603b\u7ed3\u70b9\u7684\u6570\u91cf \nvoid update(int x)\n{\n    siz[x]=1+siz[ch[x][0]]+siz[ch[x][1]];\n} \nint new_node(int v)\n{\n    siz[++sz]=1;// \u65b0\u5f00\u8f9f\u4e00\u4e2a\u8282\u70b9\n    val[sz]=v;\n    pri[sz]=rand(); \n    return sz;\n}\nint merge(int x,int y)// \u5408\u5e76 \n{\n    if(!x||!y)    return x+y;// x\u548cy\u4e2d\u5fc5\u5b9a\u6709\u4e00\u4e2a\u662f0\n    if(pri[x]<pri[y])// \u628ax\u52a0\u5230\u5de6\u8fb9\u7684\u6811\u4e0a \n    {\n        ch[x][1]=merge(ch[x][1],y);// \u4e0d\u61c2\u7684\u770bGIF\u56fe \n        update(x);\n        return x;\n    } \n    else\n    {\n        ch[y][0]=merge(x,ch[y][0]);\n        update(y);\n        return y;\n    }\n}\nvoid split(int now,int k,int &x,int &y)\n{\n    if(!now) x=y=0;// \u5230\u8fbe\u53f6\u5b50\u8282\u70b9\n    else\n    {\n        if(val[now]<=k)// \u5206\u79bb\u53f3\u5b50\u6811    \n            x=now,split(ch[now][1],k,ch[now][1],y);\n        else \n            y=now,split(ch[now][0],k,x,ch[now][0]);\n        update(now);\n    } \n}\nint kth(int now,int k)// \u67e5\u8be2\u6392\u540d \n{\n    while(1)\n    {\n        if(k<=siz[ch[now][0]])\n            now=ch[now][0];// \u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u4e14\u6570\u91cf\u5c0f\u4e8e\u5de6\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u8fed\u4ee3\u5bfb\u627e\n        else if(k==siz[ch[now][0]]+1)\n            return now;// \u627e\u5230\u4e86\n        else \n            k-=siz[ch[now][0]]+1,now=ch[now][1];// \u53bb\u53f3\u5b50\u6811\u627e \n    }\n}\nint main()\n{\n    srand((unsigned)time(NULL));\n    int n;\n    read(n);\n    int root=0,x,y,z;\n    for(int i=1;i<=n;i++)\n    {\n        int how,a;\n        read(how);read(a);\n        if(how==1)// \u63d2\u5165 \n        {\n            split(root,a,x,y);\n            root=merge(merge(x,new_node(a)),y);\n        }\n        else if(how==2)//\u5220\u9664x \n        {\n            split(root,a,x,z);\n            split(x,a-1,x,y);\n            y=merge(ch[y][0],ch[y][1]);\n            root=merge(merge(x,y),z);\n        }\n        else if(how==3)//\u67e5\u8be2x\u7684\u6392\u540d \n        {\n            split(root,a-1,x,y);\n            printf(\"%d\\n\",siz[x]+1);\n            root=merge(x,y);\n        }\n        else if(how==4)// \u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570 \n        {\n            printf(\"%d\\n\",val[kth(root,a)]);\n        }\n        else if(how==5)// \u6c42x\u7684\u524d\u9a71 \n        {\n            split(root,a-1,x,y);\n            printf(\"%d\\n\",val[kth(x,siz[x])]);\n            root=merge(x,y);\n        }\n        else if(how==6)// \u6c42x\u7684\u540e\u7ee7 \n        {\n            split(root,a,x,y);\n            printf(\"%d\\n\",val[kth(y,1)]);\n            root=merge(x,y);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1499768520,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "```cpp\n// \u6211\u53ef\u4ee5\u5148\u5199Splay\u518d\u5199\u9898\u89e3\u5417...\n```\n\n# \u6b63\u6587\uff1a\u5173\u4e8eSPLAY\n\n\u5176\u5b9e\u6211\u66f4\u504f\u5411\u4e8e\u628asplay\u53eb\u505a~~cosplay~~\n\n\u8bb2\u5e73\u8861\u6811\u603b\u9003\u4e0d\u8fc7BST(Binary Search Tree)\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4ee5\u4e0b\u662fBST\u7684\u6027\u8d28\uff1a\n\n\u4e00\u68f5\u5408\u6cd5\u7684BST\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u5e26\u6709\u4e00\u4e2a\u6570\u503c\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u8282\u70b9\u7684\u201c\u5173\u952e\u7801\u201d\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u68f5BST\u4e0a\u7684\u4efb\u610f\u8282\u70b9\uff0c\u6ee1\u8db3\uff1a\n\n- \u8be5\u8282\u70b9\u7684\u5173\u952e\u7801\u4e0d\u5c0f\u4e8e\u5b83\u5de6\u5b50\u6811\u7684\u4efb\u610f\u7ed3\u70b9\u7684\u5173\u952e\u7801\n\n- \u8be5\u7ed3\u70b9\u7684\u5173\u952e\u7801\u4e0d\u5927\u4e8e\u5b83\u53f3\u5b50\u6811\u7684\u4efb\u610f\u7ed3\u70b9\u7684\u5173\u952e\u7801\n\n`\u663e\u7136`\uff0cBST\u7684\u4e2d\u5e8f\u904d\u5386\u662f\u4e00\u4e2a\u9012\u589e\u7684\u5e8f\u5217\n\n## \u5efa\u7acb\u4e00\u68f5BST\n\n\u56e0\u4e3a\u7b14\u8005\u5f88\u61d2\uff0c\u4e0d\u60f3\u5230\u5904\u5224\u8fb9\u754c\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u822c\u53ef\u4ee5\u5728\u4e00\u68f5\u7a7a\u7684BST\u4e2d\u9884\u5148\u63d2\u5165\u4e24\u4e2a\u7ed3\u70b9\uff0c\u4e00\u4e2a\u6b63\u65e0\u7a77\uff0c\u4e00\u4e2a\u8d1f\u65e0\u7a77\uff0c\u5982\u56fe:\n\n![img spfaed](https://i.loli.net/2019/12/13/V2N6AQUynRGvzYI.png)\n\n```cpp\nconst int SIZE = 1e5 + 5;\nconst int INF = 0x7fffffff;\nstruct BSTNode {\n\tint l, r; // \u5de6\u53f3\u513f\u5b50\u7684\u7f16\u53f7\n   int val; // \u5173\u952e\u7801\n} T[SIZE];\nint tot, root;\n\nint clone(int val) { // \u65b0\u5efa\u8282\u70b9\n\tT[++tot].val = val;\n   return tot;\n}\n\nvoid build() {\n\tclone(-INF), clone(INF);\n   root = 1, T[1].r = 2;\n}\n```\n\n\u4ee5\u4e0a\u662f\u5efa\u6811\u7684\u4ee3\u7801\n\n\u90a3\u4e48\uff0cBST\u5c31\u8bb2\u5230\u8fd9\u91cc\n\n## \u5e73\u8861\u6811\u7684\u8bde\u751f\n\n\u5f53BST\u5f62\u6210\u4e00\u6761\u94fe\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u67e5\u8be2\u4f1a\u53d8\u6210$O(n^2)$\n\n\u8fd9\u79cd\u6df1\u5ea6\u8fc7\u6df1\u7684BST\u662f\u4e0d\u5e73\u8861\u7684\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u79cd\u80fd\u4fdd\u6301\u6811\u7684\u6df1\u5ea6\u5728$\\log(n)$\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e8e\u662f\u4fbf\u8bde\u751f\u4e86\u5e73\u8861\u6811\n\n## SPLAY\n\nsplay\uff0c\u53c8\u79f0~~cosplay~~\u4f38\u5c55\u6811\uff0c\u6709\u201c\u5e8f\u5217\u4e4b\u738b\u201d\u7684\u7f8e\u79f0\uff0c~~\u5e38\u6570\u5de8\u5927~~\uff0c\u8dd1\u7684\u6ca1\u6709$fhq-treap$\u5feb\uff0c\u4f46\u8fd9\u4e0d\u5728\u6211\u4eec\u7684\u8ba8\u8bba\u8303\u56f4\u4ee5\u5185\n\n![graph.png](https://i.loli.net/2019/12/13/jFfZRvedxLYJg2y.png)\n\n\u60f3\u8c61\u4e00\u4e0b\u8fd9\u6837\u4e00\u9897BST\uff0c\u6211\u4eec\u5148\u628a\u5b83\u4eec\u7684\u5927\u5c0f\u5173\u7cfb\u5217\u51fa\u6765\u3002\n\n$$\nY<Z, C>Y, X<Y,A<X,B>X\n$$\n\n\u5bf9\u4e8e\u8fd9\u6837\u4e00\u9897BST\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u7279\u6b8a\u7684\u65b9\u5f0f\u6765\u6539\u53d8\u5b83\u7684\u5f62\u6001\u4fdd\u6301\u4e2d\u5e8f\u5e8f\u5217\u4e0d\u53d8\uff0c\u8fd9\u4e5f\u662f\u5e73\u8861\u6811\u7684\u7cbe\u9ad3\u3002\n\n\u600e\u4e48\u6539\u53d8\u5462\uff1f\n\n## \u65cb\u8f6c\n\n\u65cb\u8f6c~~\u4e0d\u8f6c\u4e0d\u662f\u4e2d\u56fd\u4eba~~\uff0c\u8fd9\u662fsplay\u7684\u7cbe\u9ad3\u6240\u5728\u3002\n\n\u73b0\u5728\u6211\u4eec\u7684\u76ee\u6807\u662f\u8ba9X\u8282\u70b9\u5f80\u4e0a\u722c\u5230\u5b83\u7236\u4eb2\u8282\u70b9Y\u5904\uff0c\u8ba9Y\u53d8\u6210X\u7684\u5e7a\u513f\uff0c\u4e5f\u5c31\u662f\u8ba9Y\u8282\u70b9\u4e0b\u964d\u3002\n\n`\u8fd9\u4e2a\u8fc7\u7a0b\u9996\u5148\u8981\u6ee1\u8db3BST\u6027\u8d28`\n\n\u901a\u8fc7\u4f8b\u56fe\u6765\u601d\u8003\uff0c\u6b64\u65f6\u7684X\u8282\u70b9\u662fY\u8282\u70b9\u7684\u5de6\u513f\u5b50\uff0c\u5c0f\u4e8eY\u8282\u70b9\uff0c\u4e3a\u4e86\u4e0d\u6539\u53d8\u4e2d\u5e8f\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9Y\u8282\u70b9\u6210\u4e3aX\u7684\u53f3\u513f\u5b50\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff1a\u53d8\u6362\u540e\u7684Y\u7684\u786e\u5927\u4e8eX\uff0c\u4f46X\u8fd8\u6709\u4e00\u9897\u53f3\u5b50\u6811\u5462\uff01\n\n\u522b\u6025\uff0c\u518d\u56de\u60f3\u4e00\u4e0bBST\u7684\u6027\u8d28\uff0c\u4efb\u610f\u8282\u70b9\u5927\u4e8e\u5176\u5de6\u5b50\u6811\u4e2d\u7684\u4efb\u610f\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u628aX\u7684\u5de6\u5b50\u6811B\u62ff\u7ed9Y\u5f53\u5de6\u5b50\u6811\u3002\n\n\u597d\u4e86\uff01\u4e16\u754c\u6838\u5e73\u4e86\uff01~~Tarjan\u653e\u5fc3\u4e86~~\n\n\u5c55\u793a\u4e00\u4e0b\u65cb\u8f6c\u7684\u6210\u679c\u5427\uff01\n\n\u65cb\u8f6c\u524d\uff1a\n\n![graph.png](https://i.loli.net/2019/12/13/jFfZRvedxLYJg2y.png)\n\n\u65cb\u8f6c\u540e\n\n![graph _1_.png](https://i.loli.net/2019/12/13/Dr5IfBWVl7b6PTH.png)\n\n\u522b\u9ad8\u5174\u5f97\u592a\u65e9\uff01\n\n\u8fd9\u53ea\u662f\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f`\u901a\u7528`\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u5373\uff1a\n\n$$\nodd\\bigoplus1=odd-1\n$$\n\n$$\neven\\bigoplus1=even+1\n$$\n\n\u8fd9\u4e2a\u6027\u8d28\u7684\u8bc1\u660e\u5f88\u7b80\u5355\uff1a\n\n`\u5373\u5f97\u6613\u89c1\u5e73\u51e1\uff0c\u4eff\u7167\u4e0a\u4f8b\u663e\u7136\u3002`\n\n`\u7559\u4f5c\u4e60\u9898\u7b54\u6848\u7565\uff0c\u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be\u3002`\n\n`\u53cd\u4e4b\u4ea6\u7136\u540c\u7406\uff0c\u63a8\u8bba\u81ea\u7136\u6210\u7acb\uff0c\u7565\u53bb\u8fc7\u7a0bQED\uff0c\u7531\u4e0a\u53ef\u77e5\u8bc1\u6bd5\u3002`\n\n$Just$ $a$ $joke$\n\n\u8bbe\u8282\u70b9Y\u4e3aX\u7684\u7236\u4eb2\uff0cY\u7684w(0\u4ee3\u8868\u5de6\u513f\u5b50\uff0c1\u4ee3\u8868\u53f3\u513f\u5b50)\u513f\u5b50\n\n- $step1$:\u5c06Y\u8282\u70b9\u653e\u5230X\u8282\u70b9\u7684w$\\bigoplus$1\u7684\u4f4d\u7f6e\n- $step2$:\u5982\u679cX\u7684w$\\bigoplus$1\u4f4d\u7f6e\u4e0a\u6709\u4e00\u9897\u5b50\u6811\uff0c\u653e\u5728Y\u7684w\u4f4d\u7f6e\u4e0a\n\n```cpp\ninline void update(int x) { // \u66f4\u65b0\u8282\u70b9\u4fe1\u606f\n\tT[x].siz = T[T[x].ch[0]].siz + T[T[x].ch[1]].siz + T[x].cnt;\n}\n\ninline void rotate(int x) { // \u65cb\u8f6c\n\tint y = T[x].fa; // X\u5b83\u7239\n\tint z = T[y].fa; // X\u5b83\u7239\u5b83\u7239\n\tint w = T[y].ch[1] == x; // X\u662f\u5b83\u7239\u7684\u5de6\u5e7a\u513f\u8fd8\u662f\u53f3\u5e7a\u513f\n\tT[z].ch[T[z].ch[1] == y] = x;\n\tT[x].fa = z;\n\tT[y].ch[w] = T[x].ch[w ^ 1];\n\tT[T[x].ch[w ^ 1]].fa = y;\n\tT[x].ch[w ^ 1] = y;\n\tT[y].fa = x;\n\tupdate(y), update(x);\n}\n```\n\n\u4ec5\u4ec5\u6709rotate\u64cd\u4f5c\u8fd8\u4e0d\u591f\uff0csplay\u5230\u76ee\u524d\u4e3a\u6b62\u4f9d\u7136\u5f88\u5bb9\u6613\u88ab\u5361\u3002\n\n\u60f3\u8c61\u8fd9\u6837\u4e00\u68f5\u6811\uff1a\n\n![img spfaed](https://i.loli.net/2019/12/13/6hBzE2UsC8oJXfu.png)\n\n\u53d1\u73b0\u65e0\u8bba\u600e\u4e48\u65cb\u8f6cX\u90fd\u4e0d\u80fd\u4f7f\u5f97\u8fd9\u68f5\u6811\u6700\u957f\u7684\u4e00\u6761\u94fe\u53d8\u77ed\u3002\u6211\u4eec\u79f0\u8fd9\u79cdX\uff0cX\u5b83\u7239\uff0cX\u5b83\u7239\u5b83\u7239\u5728\u4e00\u6761\u7ebf\u4e0a\u7684\u60c5\u51b5\u79f0\u4e3a\u4e09\u70b9\u5171\u7ebf\u3002\n\n\u600e\u4e48\u529e\u5462\uff1f~~\u53ef\u601c\u7684splay\u88ab\u4eba\u6e9c\u4e86~~\n\n\u529e\u6cd5\u8fd8\u662f\u6709\u6ef4\n\n- $step1$:\u5982\u679c\u4e09\u70b9\u5171\u7ebf\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u65cb\u8f6cX\u5b83\u7239\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5\u4f7f\u5176\u66f4\u52a0\u201c\u5e73\u8861\u201d\n- $step2$:\u5982\u679c\u4e0d\u5171\u7ebf\u2026\u2026\u4e0d\u5171\u7ebf\u2026\u2026\u90a3\u5c31\u65cb\u8f6cX\u5c31\u597d\u4e86\n\n\u8fd9\u4fbf\u662fsplay\u64cd\u4f5c\n\n```cpp\ninline void splay(int x, int goal) { //splay\n\tfor (; T[x].fa ^ goal; rotate(x)) { // \u4e00\u76f4\u65cb\u8f6c\u5230x\u6210\u4e3agoal\u7684\u513f\u5b50\n\t\tint y = T[x].fa;\n\t\tint z = T[y].fa;\n\t\tif (z ^ goal)\n\t\t\tT[y].ch[1] ^ x ^ T[z].ch[1] ^ y ? rotate(x) : rotate(y); //\u5224\u65ad\u4e09\u70b9\u662f\u5426\u5171\u7ebf\uff0c\u5982\u679c\u662f\uff0c\u5c31\u65cb\u8f6cY\uff0c\u5426\u5219\u65cb\u8f6cX\n\t}\n\tif (!goal) root = x; // \u628a\u6839\u8282\u70b9\u8bbe\u4e3aX\n}\n\n```\n\n\u81f3\u6b64\uff0csplay\u5c31\u5dee\u4e0d\u591a\u8bb2\u5b8c\u4e86\uff0c\u90a3\u4e48\u518d\u6765\u4e00\u9053\u4f8b\u9898\u5427\n\n[\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3369)\n\n- \u9898\u9762\uff1a\n\n```\n\u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff08\u53ef\u53c2\u8003\u9898\u76ee\u6807\u9898\uff09\uff0c\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\uff0c\u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n1.\u63d2\u5165 x \u6570\n2.\u5220\u9664 x \u6570(\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u56e0\u53ea\u5220\u9664\u4e00\u4e2a)\n3.\u67e5\u8be2 x \u6570\u7684\u6392\u540d(\u6392\u540d\u5b9a\u4e49\u4e3a\u6bd4\u5f53\u524d\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570 +1 )\n4.\u67e5\u8be2\u6392\u540d\u4e3a x \u7684\u6570\n5.\u6c42 x \u7684\u524d\u9a71(\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e x\uff0c\u4e14\u6700\u5927\u7684\u6570)\n6.\u6c42 x \u7684\u540e\u7ee7(\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e x\uff0c\u4e14\u6700\u5c0f\u7684\u6570)\n```\n\n## \u63d2\u5165\u64cd\u4f5c\n\n\u9996\u5148\u6211\u4eec\u5148\u67e5\u627eBST\u5f53\u4e2d\u6709\u6ca1\u6709\u548c\u9700\u8981\u63d2\u5165\u7684\u8282\u70b9\u5173\u952e\u7801\u76f8\u540c\u7684\u8282\u70b9\uff0c\u5982\u679c\u6709\uff0c\u5c31\u628a\u5f53\u524d\u8282\u70b9\u7684\u201c\u526f\u672c\u201d\u6570+1\n\n\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u518d\u65b0\u589e\u4e00\u4e2a\u8282\u70b9\u5c31\u597d\u4e86\n\n```cpp\ninline void insert(int x) {\n\tint u = root, fa = 0; // \u4ece\u6839\u8282\u70b9\u5f00\u59cb\u627e\n\twhile (u && x ^ T[u].val) // \u627e\u5173\u952e\u7801\u76f8\u540c\u7684\u8282\u70b9\n\t\tfa = u, u = T[u].ch[x > T[u].val];\n\tif (u) T[u].cnt++; // \u5982\u679c\u6709\uff0c\u5c31\u589e\u52a0\u4e00\u4e2a\u526f\u672c\n\telse { // \u5426\u5219\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\n\t\tu = ++tot;\n\t\tif (fa) T[fa].ch[x > T[fa].val] = u;\n\t\tT[u].fa = fa;\n\t\tT[u].siz = T[u].cnt = 1;\n\t\tT[u].ch[0] = T[u].ch[1] = 0;\n\t\tT[u].val = x;\n\t}\n\tsplay(u, 0);\n}\n```\n\n## \u67e5\u627e\u64cd\u4f5c\n\n\u8bbe\u67e5\u627e\u8282\u70b9\u7684\u5173\u952e\u7801\u4e3ax\uff0c\u5982\u679cx\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u5173\u952e\u7801\uff0c\u5c31\u5f80\u53f3\u5b50\u6811\u8dd1\uff0c\u5426\u5219\u5f80\u5de6\u5b50\u6811\u627e\u3002\u627e\u5230\u540e\u628a\u5f53\u524d\u8282\u70b9splay\u5230\u6839\uff0c\u4fdd\u8bc1BST\u7684\u5e73\u8861\n\n```cpp\ninline void find(int x) {\n\tint u = root;\n\tif (!u) return ; // BST\u7a7a\n\twhile (T[u].ch[x > T[u].val] && x ^ T[u].val)\n\t\tu = T[u].ch[x > T[u].val];\n\tsplay(u, 0);\n}\n```\n\n## \u524d\u9a71/\u540e\u7ee7\u64cd\u4f5c\n\n\u9996\u5148\u6267\u884cfind\u64cd\u4f5c\u3002\n\n\u4ee5\u524d\u9a71\u4e3a\u4f8b\uff0c\u5f53\u524d\u7684\u6839\u8282\u70b9\u5c31\u662fx\u7684\u7236\u8282\u70b9\uff0c\u6240\u4ee5\u5982\u679croot\u7684\u5173\u952e\u7801\u5927\u4e8ex\uff0c\u90a3\u4e48root\u5c31\u662fx\u7684\u524d\u9a71\u3002\u5426\u5219\u5c31\u8df3\u5230\u5de6\u513f\u5b50\u627e\uff0c\u518d\u53cd\u7740\u8df3\u5c31\u597d\u4e86\n\n```cpp\ninline int next_bound(int x, int f) { // f=0\u524d\u9a71\uff0cf=1\u540e\u7ee7\n\tfind(x);\n\tint u = root; // x\u7684\u7236\u8282\u70b9\n\tif (T[u].val > x && f) return u;\n\tif (T[u].val < x && !f) return u;\n\tu = T[u].ch[f]; // \u8df3\u5230\u5bf9\u5e94\u7684\u5b50\u6811\n\twhile (T[u].ch[f ^ 1]) u = T[u].ch[f ^ 1]; // \u53cd\u7740\u8df3\u8f6c\n\treturn u;\n}\n```\n\n## \u5220\u9664\u64cd\u4f5c\n\n\u627e\u5230\u8fd9\u4e2a\u6570\u7684last\uff0c\u628a\u4ed6splay\u5230\u6839\u8282\u70b9\n\n\u7136\u540e\u627e\u5230\u8fd9\u4e2a\u6570next\uff0c\u628a\u4ed6splay\u5230last\u7684\u5e95\u4e0b\n\n\u7136\u540e\u2026\u2026\u7136\u540e\u5c31\u6ca1\u6709\u4e86\u5440\u2026\u2026\n\n\u6bd4last\u5927\u662fnext\n\n\u6bd4next\u5c0f\u7684\u4e14\u6bd4last\u5927\u7684\u53ea\u6709\u5f53\u524d\u7684\u8282\u70b9\n\n\u5728next\u7684\u5de6\u5e7a\u513f\u4e0a\u9762\uff0c\n\n\u6240\u4ee5\u76f4\u63a5\u628aroot\u53f3\u5e7a\u513f\u7684\u5de6\u5e7a\u513f\u5220\u6389\u5c31\u53ef\u4ee5\u4e86\n\n```cpp\ninline void erase(int x) {\n\tint last = next_bound(x, 0);\n\tint next = next_bound(x, 1);\n\tsplay(last, 0), splay(next, last);\n\tint del = T[next].ch[0];\n\tif (T[del].cnt > 1) {\n\t\tT[del].cnt--;\n\t\tsplay(del, 0);\n\t}\n\telse T[next].ch[0] = 0;\n}\n```\n\n## \u7b2cK\u5927\n\n\u73b0\u5728\u518d\u6765\u770b\u5df2\u7ecf\u5341\u5206\u7b80\u5355\u4e86\n\n\u9996\u5148\u5982\u679c\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u52a0\u4e0a\u672c\u8eab\u7684\u4e2a\u6570\u5927\u4e8ek\uff0c\u76f4\u63a5\u5728\u5de6\u5b50\u6811\u91cc\u627e\u5c31\u884c\u4e86\n\n\u5426\u5219\u5c31\u628ak\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\u518d\u51cf\u53bb\u672c\u8eab\u7684\u4e2a\u6570\uff0c\u518d\u5728\u53f3\u5b50\u6811\u91cc\u627e\u5c31\u884c\u4e86\n\n```cpp\ninline int kth_element(int x) {\n\tint u = root;\n\tif (T[u].siz < x) return 0; // \u6ca1\u6709\u90a3\u4e48\u591a\uff0c\u76f4\u63a5\u6b7b\u4ea1\n\twhile (233) {\n\t\tint y = T[u].ch[0];\n\t\tif (x > T[y].siz + T[u].cnt) {\n\t\t\tx -= T[y].siz + T[u].cnt;\n\t\t\tu = T[u].ch[1];\n\t\t}\n\t\telse if (T[y].siz >= x) u = y;\n\t\telse return T[u].val;\n\t}\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n\nusing namespace std;\n\nconst int SIZE = 1e5 + 5;\nint n, root, tot;\nstruct SPLAY {\n\tint fa;\n\tint siz;\n\tint cnt;\n\tint val;\n\tint ch[2];\n} T[SIZE];\n\ninline void update(int x) {\n\tT[x].siz = T[T[x].ch[0]].siz + T[T[x].ch[1]].siz + T[x].cnt;\n}\n\ninline void rotate(int x) {\n\tint y = T[x].fa;\n\tint z = T[y].fa;\n\tint w = T[y].ch[1] == x;\n\tT[z].ch[T[z].ch[1] == y] = x;\n\tT[x].fa = z;\n\tT[y].ch[w] = T[x].ch[w ^ 1];\n\tT[T[x].ch[w ^ 1]].fa = y;\n\tT[x].ch[w ^ 1] = y;\n\tT[y].fa = x;\n\tupdate(y), update(x);\n}\n\ninline void splay(int x, int goal) {\n\tfor (; T[x].fa ^ goal; rotate(x)) {\n\t\tint y = T[x].fa;\n\t\tint z = T[y].fa;\n\t\tif (z ^ goal)\n\t\t\tT[y].ch[1] ^ x ^ T[z].ch[1] ^ y ? rotate(x) : rotate(y);\n\t}\n\tif (!goal) root = x;\n}\n\ninline void find(int x) {\n\tint u = root;\n\tif (!u) return ;\n\twhile (T[u].ch[x > T[u].val] && x ^ T[u].val)\n\t\tu = T[u].ch[x > T[u].val];\n\tsplay(u, 0);\n}\n\ninline void insert(int x) {\n\tint u = root, fa = 0;\n\twhile (u && x ^ T[u].val)\n\t\tfa = u, u = T[u].ch[x > T[u].val];\n\tif (u) T[u].cnt++;\n\telse {\n\t\tu = ++tot;\n\t\tif (fa) T[fa].ch[x > T[fa].val] = u;\n\t\tT[u].fa = fa;\n\t\tT[u].siz = T[u].cnt = 1;\n\t\tT[u].ch[0] = T[u].ch[1] = 0;\n\t\tT[u].val = x;\n\t}\n\tsplay(u, 0);\n}\n\ninline int next_bound(int x, int f) {\n\tfind(x);\n\tint u = root;\n\tif (T[u].val > x && f) return u;\n\tif (T[u].val < x && !f) return u;\n\tu = T[u].ch[f];\n\twhile (T[u].ch[f ^ 1]) u = T[u].ch[f ^ 1];\n\treturn u;\n}\n\ninline void erase(int x) {\n\tint last = next_bound(x, 0);\n\tint next = next_bound(x, 1);\n\tsplay(last, 0), splay(next, last);\n\tint del = T[next].ch[0];\n\tif (T[del].cnt > 1) {\n\t\tT[del].cnt--;\n\t\tsplay(del, 0);\n\t}\n\telse T[next].ch[0] = 0;\n}\n\ninline int kth_element(int x) {\n\tint u = root;\n\tif (T[u].siz < x) return 0;\n\twhile (233) {\n\t\tint y = T[u].ch[0];\n\t\tif (x > T[y].siz + T[u].cnt) {\n\t\t\tx -= T[y].siz + T[u].cnt;\n\t\t\tu = T[u].ch[1];\n\t\t}\n\t\telse if (T[y].siz >= x) u = y;\n\t\telse return T[u].val;\n\t}\n}\n\nsigned main() {\n\tscanf(\"%d\", &n);\n\tinsert(1e9);\n\tinsert(-1e9);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint opt, x;\n\t\tscanf(\"%d %d\", &opt, &x);\n\t\tif (opt == 1) insert(x);\n\t\tif (opt == 2) erase(x);\n\t\tif (opt == 3) {\n\t\t\tfind(x);\n\t\t\tprintf(\"%d\\n\", T[T[root].ch[0]].siz);\n\t\t}\n\t\tif (opt == 4) printf(\"%d\\n\", kth_element(x + 1));\n\t\tif (opt == 5) printf(\"%d\\n\", T[next_bound(x, 0)].val);\n\t\tif (opt == 6) printf(\"%d\\n\", T[next_bound(x, 1)].val);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1580266901,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "# **Splay**\n\n------------\n\n### **\u4ec0\u4e48\u662fSplay\uff1f**\n\n**\u4f38\u5c55\u6811\uff08Splay Tree\uff09**\uff0c\u4e5f\u53eb\u5206\u88c2\u6811\uff0c\u662f\u4e00\u79cd\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u5b83\u80fd\u5728$O(log \\ n)$\u5185\u5b8c\u6210\u63d2\u5165\u3001\u67e5\u627e\u548c\u5220\u9664\u64cd\u4f5c\u3002\n\n\u603b\u4e4b\uff0c\u8fd9\u662f\u4e00\u4e2a\u80fd\u5b9e\u73b0$O(log \\ n)$\u590d\u6742\u5ea6\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\n\n\u4ec0\u4e48\u662f\u4e8c\u53c9\u6392\u5e8f\u6811\u5462\uff1f\n\n\u4e8c\u53c9\u6392\u5e8f\u6811\u5c31\u662f\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5b83\u6700\u663e\u8457\u7684\u7279\u70b9\u4fbf\u662f\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u975e\u53f6\u8282\u70b9\uff0c\u5b83\u7684\u5de6\u513f\u5b50\u7684\u503c\u5c0f\u4e8e\u5b83\u7684\u503c\uff0c\u53f3\u513f\u5b50\u7684\u503c\u5927\u4e8e\u5b83\u7684\u503c\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bd4\u5b83\u5c0f\u7684\u70b9\u5168\u5728\u5176\u5de6\u4fa7\uff0c\u6bd4\u5b83\u5927\u7684\u70b9\u5168\u5728\u5b83\u53f3\u4fa7\n\n\u4f20\u7edf\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u6548\u7387\u4e0d\u591f\u9ad8\uff0c\u5c24\u5176\u662f\u5f53\u6392\u6210\u4e00\u6761\u94fe\u540e\uff0c\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u81f3$O(n)$\n\n\u5e73\u8861\u6811\u4fbf\u662f\u53ef\u4ee5\u7ef4\u62a4\u6548\u7387\u7684\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u80fd\u4fdd\u8bc1\u590d\u6742\u5ea6\u5728$O(log \\ n)$\u4e0a\u4e0b\n\nSplay\u4fbf\u662f\u5e73\u8861\u6811\u7684\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\u5e73\u8861\u6811\u53ef\u4ee5\u7531\u5f88\u591a\u4e1c\u897f\u6765\u5b9e\u73b0\u3002~~\u4f46\u662f\u849f\u84bb\u53ea\u4f1aSplay~~\n\n### **\u6846\u67b6\u4ee3\u7801\u53ca\u4e00\u4e9b\u524d\u7f6e\u51fd\u6570\uff1a**\n\n\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0d\u662f\u53ea\u4ee3\u8868\u4e00\u4e2a\u6570\uff0c\u800c\u662f\u4ee3\u8868\u82e5\u5e72($cnt$)\u4e2a\u6743\u503c($v$)\u76f8\u540c\u7684\u6570\n\n\u5bf9\u4e8e\u5b83\u7684\u5de6\u513f\u5b50($son[0]$)\uff0c\u503c\u603b\u662f\u5c0f\u4e8e\u5b83\uff0c\u53f3\u513f\u5b50$son[1]$\u53cd\u4e4b\n\n\u53e6\u5916\u6ce8\u610f$sum$\u4ee3\u8868\u7684\u662f\u5b50\u6811\u7684\u5143\u7d20\u603b\u4e2a\u6570(\u5305\u62ec\u91cd\u590d\u7684\u5143\u7d20\u6570)\uff0c\u4e0d\u662f\u70b9\u6570(\u5373\u5143\u7d20\u79cd\u7c7b\u6570)\n\n```cpp\n#define N 100005\nint sum[N],cnt[N],son[N][2],fa[N],w[N];\n//sum:\u8be5\u70b9\u53ca\u5176\u5b50\u6811\u7684\u5143\u7d20\u603b\u6570 cnt:\u8be5\u70b9\u8868\u793a\u5143\u7d20\u7684\u4e2a\u6570 \n//son:0\u5de6\u513f\u5b50,1\u53f3\u513f\u5b50 fa:\u7236\u4eb2 w:\u6743\u503c \nint n,m; //n\u4e3a\u8282\u70b9\u6570\uff0cm\u4e3a\u5143\u7d20\u6570 \t\n#define root son[0][1] //\u6839\u8282\u70b9 \n\n//\u529f\u80fd\u51fd\u6570......\n\n#undef root\n```\n\u4ee5\u4e0b\u5206\u522b\u662f\u66f4\u65b0$sum$\u503c\u7684$pushup$\u51fd\u6570\uff0c\u5224\u65ad\u81ea\u5df1\u662f\u7236\u4eb2\u7684\u5de6/\u53f3\u513f\u5b50\u7684$getid$\u51fd\u6570\n\n\u4ee5\u53ca\u8fde\u63a5$rt$\u4e0e$f$\u4e24\u70b9\uff0c\u4f7f$rt$\u6210\u4e3a$f$\u7684$son[id]$\u7684$connect$\u51fd\u6570\n\n```cpp\ninline void pushup(int rt)\n{\n\tsum[rt] = sum[son[rt][0]] + sum[son[rt][1]] + cnt[rt]; //\u8bb0\u5f97\u52a0\u4e0a\u81ea\u5df1\t\n}\n\ninline int getid(int rt)\n{\n\treturn son[fa[rt]][0] == rt ? 0 : 1; \n}\n\ninline void connect(int rt,int f,int id)\n{\n\tfa[rt] = f;\n\tson[f][id] = rt;\n}\n```\n\u4f46\u8bf7\u6ce8\u610f\u5bf9\u4e8e\u4e24\u4e2a\u70b9\u4e4b\u95f4\uff0c\u53ea\u7528\u4e00\u6b21$connect$\u4f1a\u51fa\u9505\n\n\u56e0\u4e3a\u4f60\u53ea\u66f4\u65b0\u4e86\u8981\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u800c\u6ca1\u6709\u8003\u8651\u5230\u5b83\u4eec\u539f\u6765\u6240\u8fde\u63a5\u7684\u8282\u70b9\n\n\u5982\u56fe\uff0c\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vee7o671.png)\n\n\u6211\u4eec\u5982\u679c$connect(3,1,1)$\uff0c\u5373\u628a3\u53f7\u8282\u70b9\u8fde\u52301\u53f7\u8282\u70b9\u4e0a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4xqhbx1j.png)\n\n\u770b\u8d77\u6765\u597d\u50cf\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u4ed4\u7ec6\u4e00\u770b\uff0c\u53d1\u73b02\u53f7\u8282\u70b9\u7684\u53f3\u513f\u5b50\u4ecd\u7136\u4e3a3\n\n\u5728\u4e0b\u9762\u5b66\u4e60\u65cb\u8f6c\u65f6\uff0c\u4f1a\u7740\u91cd\u5f3a\u8c03$connect$\u7684\u7528\u6cd5\n\n### **\u65cb\u8f6c\u53ca\u4f38\u5c55\uff1a**\n\n\u4f38\u5c55\u6811\u4e4b\u6240\u4ee5\u53ef\u4ee5\u7ef4\u62a4\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5e73\u8861\uff0c\u5c31\u5728\u4e8e\u5b83\u7684\u65cb\u8f6c\u53ca\u4f38\u5c55\u64cd\u4f5c\n\n\u65cb\u8f6c\u662f\u4e00\u4e2a\u7070\u5e38\u91cd\u8981\u7684\u64cd\u4f5c\uff0c\u4f38\u5c55\u4fbf\u662f\u5efa\u7acb\u5728\u5176\u4e4b\u4e0a\u7684\n\n\u4ec0\u4e48\u662f\u65cb\u8f6c\uff0c\u600e\u6837\u65cb\u8f6c\uff1f\n\n\u5148\u6765\u770b\u56fe\uff0c1\u4e0e2\u662f\u8981\u65cb\u8f6c\u7684\u70b9\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qc41bqvi.png)\n\n\u65cb\u8f6c\u540e\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6ok48kz6.png)\n\n\u6709\u5173\u7cfb\u5417\uff1f\uff1f\uff1f\n\n~~\u5f88\u660e\u663e\u6ca1\u6709~~\n\n\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u53d1\u73b0\u5728\u53d8\u5316\u540e\uff0c2\u6210\u4e861\u7684\u7236\u4eb2\uff0c0\u7684\u513f\u5b50\u75311\u53d8\u4e3a\u4e862\n\n\u96be\u9053\u53ea\u662f\u7b80\u5355\u7684$swap$\u4e861\u548c2\u5417\uff1f\n\n\u5f88\u660e\u663e\u4e0d\u662f\uff0c3\u539f\u67652\u7684\u53f3\u513f\u5b50\uff0c\u73b0\u5728\u53d8\u6210\u4e861\u7684\u5de6\u513f\u5b50\n\n1\u539f\u6765\u7684\u5de6\u513f\u5b50\u4e3a2,2\u539f\u6765\u7684\u53f3\u513f\u5b50\u4e3a3,1\u4e0e3\u4e92\u76f8\u9876\u66ff\u4e86\u5b83\u4eec\u7684\u4f4d\u7f6e\n\n\u5f88\u660e\u663e\u8fd9\u6837\u65cb\u8f6c\u662f\u6709\u9053\u7406\u7684\uff0c\u76ee\u7684\u662f\u4f7f\u65cb\u8f6c\u540e\u4ecd\u7136\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\n\n\u7ed3\u5408\u5e73\u8861\u6811\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n\u2460\u5f53\u5f53\u524d\u8282\u70b9$v$\u4e3a\u7236\u8282\u70b9$u$\u7684\u5de6\u513f\u5b50\u65f6\uff0c\u56e0\u4e3a$w[v] < w[u]$\uff0c\u6240\u4ee5\u65cb\u8f6c\u540e\uff0c$u$\u5e94\u4e3a$v$\u7684\u53f3\u513f\u5b50\uff0c\u8fd9\u6837\u539f\u6765$v$\u7684\u53f3\u513f\u5b50\u53ca\u5176\u5b50\u6811\u53ea\u80fd\u662f$u$\u7684\u5de6\u513f\u5b50\n\n\u2461\u5f53\u5f53\u524d\u8282\u70b9$v$\u4e3a\u7236\u8282\u70b9$u$\u7684\u53f3\u513f\u5b50\u65f6\uff0c\u56e0\u4e3a$w[v] > w[u]$\uff0c\u6240\u4ee5\u65cb\u8f6c\u540e\uff0c$u$\u5e94\u4e3a$v$\u7684\u5de6\u513f\u5b50\uff0c\u8fd9\u6837\u539f\u6765$v$\u7684\u5de6\u513f\u5b50\u53ca\u5176\u5b50\u6811\u53ea\u80fd\u662f$u$\u7684\u53f3\u513f\u5b50\n\n(\u95ee\u4e3a\u4ec0\u4e48\u6ca1\u6709$w[v] == w[u]$\u7684\u60c5\u51b5\u7684\u4eba\uff0c\u53ef\u4ee5\u91cd\u5934\u518d\u770b\u4e00\u904d)\n\n\u5047\u8bbe\u8282\u70b9$v$\u662f$u$\u7684$x(x \\in \\{0,1\\})$\u513f\u5b50\uff0c\u5f88\u5bb9\u6613\u770b\u51fa\u65cb\u8f6c\u540e$u$\u7684$x$\u513f\u5b50\u4e3a$x$\u76f8\u5bf9\u7684\u513f\u5b50$x \\  xor  \\ 1$\n\n\u90a3\u8be5\u600e\u4e48\u8fde\u63a5\u8fd9\u4e9b\u70b9\u5462\uff1f\n\n\u7b2c\u4e00\u7bc7\u535a\u5ba2\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u5c31\u4e0d\u590d\u8ff0\u4e86(~~\u4e3b\u8981\u662f\u61d2\u5f97\u4f5c\u56fe~~)\uff0c\u8be6\u60c5\u770b\u4ee3\u7801\uff1a\n\n```cpp\ninline void rotate(int rt) //\u5c06\u81ea\u5df1\u65cb\u8f6c\u81f3\u7236\u4eb2\u7684\u4f4d\u7f6e\u4e0a \n{\n\tint f = fa[rt],rtid = getid(rt); //f\u4e3a\u5f53\u524d\u8282\u70b9\u7236\u4eb2\uff0cgf\u5373\u7236\u4eb2\u7684\u7236\u4eb2 \n\tint gf = fa[f],fid = getid(f); //rtid\u4e3a\u5f53\u524d\u70b9\u662f\u7236\u8282\u70b9\u7684\u54ea\u4e2a\u513f\u5b50,fid\u540c\u7406 \n\tconnect(son[rt][rtid ^ 1],f,rtid);//\u8fde\u63a5\u81ea\u5df1\u7684\u513f\u5b50\u4e0e\u7236\u4eb2 \n\tconnect(f,rt,rtid ^ 1),connect(rt,gf,fid);//\u8fde\u63a5\u7236\u4eb2\u4e0e\u81ea\u5df1\uff0c\u81ea\u5df1\u4e0e\u7956\u7236 \n\tpushup(f),pushup(rt); //\u7236\u4eb2\u662f\u4f60\u7684\u513f\u5b50\uff0c\u5148\u66f4\u65b0\u8001\u7236\u4eb2\uff0c\u518d\u66f4\u65b0\u4f60 \n} \n```\n\u81f3\u4e8e\u4ec0\u4e48\u662f\u4f38\u5c55\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u5c06\u4e00\u4e2a\u8282\u70b9$u$\u65cb\u8f6c\u81f3\u8282\u70b9$v$\u7684\u4f4d\u7f6e\u4e0a\u53bb\uff0c\u8bf4\u767d\u4e86\uff0c\u5c31\u662f\u8fde\u7eed\u65cb\u8f6c\u81f3\u76ee\u6807\u70b9\n\n\u6309\u7406\u6765\u8bf4\uff0c\u662f\u53ef\u4ee5\u76f4\u63a5\u65e0\u8111\u4e0a\u65cb\u7684\n\n\u4f46\u4f3c\u4e4e\u5982\u679c\u7956\u5b59\u4e00\u6761\u7ebf\uff0c\u5148\u8f6c\u7236\u4eb2\u6548\u679c\u4f1a\u66f4\u597d\uff0c\u5177\u4f53\u5b9e\u73b0\u8fd8\u662f\u770b\u4ee3\u7801\n\n```cpp\nvoid splay(int rt,int to) //\u5c06\u5f53\u524d\u8282\u70b9\u65cb\u8f6c\u81f3\u6307\u5b9a\u8282\u70b9\n{\n\tto = fa[to];\n\twhile(fa[rt] ^ to) //\u5373e[rt].fa != to \n\t{\n\t\tint up = fa[rt];\n\t\tif(fa[up] == to)  rotate(rt); //\u7236\u4eb2\u5373\u4e3a\u6307\u5b9a\u8282\u70b9\n\t\telse if(getid(rt) ^ getid(up)) //\u4e0d\u5728\u4e00\u6761\u7ebf\u4e0a\uff0c\u5c06\u81ea\u5df1\u5411\u4e0a\u65cb\u8f6c\u4e24\u6b21\n\t\t\trotate(rt),rotate(rt);\n\t\telse //\u5982\u679c\u4f60\u548c\u4f60\u7684\u7956\u7236\u5728\u4e00\u6761\u7ebf\u4e0a\uff0c\u5148\u65cb\u8f6c\u7236\u4eb2\uff0c\u518d\u65cb\u8f6c\u81ea\u5df1\n\t\t\trotate(up),rotate(rt); \n\t}\n}\n```\n### **\u63d2\u5165\u5143\u7d20\uff1a**\n\n\u5efa\u7acb\u65b0\u8282\u70b9\uff1a\n\n```cpp\ninline void create(int v,int f,int id) \n{\n\t++ n;\n\tw[n] = v;\n\tconnect(n,f,id);\n\tsum[n] = cnt[n] = 1;\n}\n```\n\n\u63d2\u5165\u5143\u7d20(\u4e0d\u4e00\u5b9a\u4f1a\u5efa\u7acb\u8282\u70b9):\n\n```cpp\nvoid insert(int v) \n{\n\tint rt = root;\n\tif(!m) create(v,root,1),rt = 1;\n\telse\n\t\twhile(true)\n\t\t{\n\t\t\t++ sum[rt];//\u65b0\u8282\u70b9\u80af\u5b9a\u5728\u4e0b\u65b9\uff0c\u6240\u4ee5\u5f53\u524d\u8282\u70b9\u53ca\u5176\u5b50\u6811\u5305\u542b\u7684\u5143\u7d20++\n\t\t\tif(v == w[rt])\n\t\t\t{\n\t\t\t\t++ cnt[rt]; //\u6709\u8be5\u5143\u7d20\u4fbf++\u51fa\u73b0\u6b21\u6570 \n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint nxt = w[rt] > v ? 0 : 1;\n\t\t\tif(!son[rt][nxt])\n\t\t\t{\n\t\t\t\tcreate(v,rt,nxt); //\u6ca1\u6709\u5219\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \n\t\t\t\trt = n;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\trt = son[rt][nxt];\n\t\t}\n\t++ m;\n\tsplay(rt,root);//\u56e0\u4e3a\u65b0\u5efa\u8282\u70b9\u53ef\u80fd\u4f1a\u62c9\u51fa\u4e00\u6761\u94fe\uff0c\u9700\u8981\u5c06\u8be5\u8282\u70b9splay\u5230\u6839\u8282\u70b9,\u6cbf\u9014\u4e00\u76f4rotate\u53ef\u6062\u590d\u5e73\u8861\n}\n```\n\n### **\u67e5\u8be2\u5143\u7d20\uff1a**\n\n```cpp\ninline int find(int v) //\u627e\u5230\u6743\u503c\u7b49\u4e8e\u6216\u6700\u63a5\u8fd1V\u7684\u8282\u70b9 \n{\n\tint rt = root;\n\twhile(true)\n\t{\n\t\tif(w[rt] == v) return rt;\n\t\tint nxt = w[rt] > v ? 0 : 1;\n\t\tif(!son[rt][nxt]) return rt;//\u5982\u679c\u6ca1\u6709\u76f8\u7b49\u7684\u5143\u7d20\uff0c\u5f53\u524d\u8282\u70b9\u4e3a\u6700\u63a5\u8fd1v\u7684\u8282\u70b9\n\t\trt = son[rt][nxt];\n\t} \n}\n```\n\u4ee3\u7801\u8fd8\u662f\u597d\u7406\u89e3\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u8fd4\u56de\u6700\u63a5\u8fd1\u7684\u8282\u70b9\uff0c\u5728\u4e0b\u9762\u6c42\u524d\u9a71\u4e0e\u540e\u7f00\u65f6\u6709\u7528\n\n### **\u524d\u9a71\u4e0e\u540e\u7f00\uff1a**\n\n\u524d\u9a71\u5373\u5c0f\u4e8e$x$\u7684\u6700\u5927\u7684\u6570\uff0c\u7531\u4e8e\u6211\u4eec\u5728$find$\u51fd\u6570\u4e2d\u627e\u7684\u662f\u6700\u63a5\u8fd1\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5143\u7d20$splay$\u5230\u6839\u4e0a\u53bb\uff0c\u5982\u679c\u5b83\u6bd4$v$\u5c0f\uff0c\u90a3\u5b83\u5373\u4e3a\u524d\u9a71\uff0c\u5426\u5219\u8df3\u81f3\u5176\u5de6\u513f\u5b50\uff0c\u5bb9\u6613\u5f97\u77e5\u5de6\u5b50\u6811\u7684\u6240\u6709\u6743\u503c\u80af\u5b9a\u6bd4$v$\u5c0f\uff0c\u5219\u4e00\u76f4\u8df3\u81f3\u53f3\u513f\u5b50\uff0c\u4ee5\u6c42\u6700\u5927\n\n```cpp\nint pre(int v)\n{\n\tsplay(find(v),root);\n\tif(w[root] < v) return root;  \n\tint rt = son[root][0]; //\u8df3\u5230\u5de6\u513f\u5b50 \n\twhile(son[rt][1]) rt = son[rt][1]; //\u5728\u5de6\u513f\u5b50\u4e2d\u4e00\u76f4\u627e\u53f3\u513f\u5b50 \n\treturn rt;\n} \n\n```\n\u540e\u7f00\u540c\u7406\uff1a\n\n```cpp\nint last(int v) //\u627e\u540e\u7ee7\uff0c\u5373\u5927\u4e8ev\u7684\u6700\u5c0f\u7684\u6570 \n{\n\tsplay(find(v),root);\n\tif(w[root] > v) return root;\n\tint rt = son[root][1];\n\twhile(son[rt][0]) rt = son[rt][0];\n\treturn rt;\n}\n```\n### **\u79fb\u9664\u8282\u70b9\uff1a**\n\n```cpp\nvoid remove(int v)\n{\n\tint del = find(v);\n\tif(w[del] != v) return; \n\t-- m;\n\tsplay(del,root);\n\tif(cnt[del] > 1) //\u5982\u679c\u6709\u591a\u4e2a\u5143\u7d20\uff0c\u5220\u6389\u4e00\u4e2a \n\t{\n\t\t-- cnt[del];\n\t\t-- sum[del]; \n\t\treturn;\n\t}\n\tif(!son[del][0]) //\u6ca1\u6709\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\u5f53\u6839 \n\t{\n\t\troot = son[del][1];\n\t\tfa[root] = 0;\n\t}\n\telse //\u6709\u5de6\u513f\u5b50\uff0c\u627e\u5230\u5de6\u513f\u5b50\u4e2d\u6700\u5927\u7684\uff0c\u4ee4\u5176\u6210\u4e3a\u5de6\u513f\u5b50\uff0c\u5de6\u513f\u5b50\u4fbf\u6ca1\u4e86\u5b83\u7684\u53f3\u513f\u5b50 \n\t{\n\t\tint lef = son[del][0],rig = son[del][1];\n\t\twhile(son[lef][1]) lef = son[lef][1];\n\t\tsplay(lef,son[del][0]);\n\t\tconnect(rig,lef,1),connect(lef,0,1); //\u628a\u53f3\u513f\u5b50\u63a5\u5728\u6ca1\u4e86\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u4e0a\uff0c\u5de6\u513f\u5b50\u5f53\u6839\n\t\troot = lef;\n\t\tpushup(root);\n\t} \n}\n```\n\u4e3b\u8981\u662f\u4e3a\u4ec0\u4e48\u8981\u627e\u5de6\u513f\u5b50\u4e2d\u6700\u5927\u7684\u5f53\u6839\u96be\u4ee5\u8ba9\u4eba\u7406\u89e3\n\n\u5de6\u513f\u5b50\u6700\u5927\u7684\u8282\u70b9\u80af\u5b9a\u662f\u6ca1\u6709\u53f3\u513f\u5b50\u7684\uff0c\u4e5f\u4e00\u5b9a\u5c0f\u4e8e\u5220\u9664\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u6240\u4ee5\u4fbf\u53ef\u4ee5\u5c06\u53f3\u513f\u5b50\u76f4\u63a5\u63a5\u5728\u5b83\u8eab\u4e0a\n\n### **\u7f16\u53f7\u76f8\u5173\uff1a**\n\n\u5f97\u5230\u6392\u540d\uff1a\n\n\u9996\u5148\u627e\u5230\u8be5\u8282\u70b9\uff0c\u5c06\u5176$splay$\u5230\u6839\uff0c\u5219\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u90fd\u6c47\u96c6\u81f3\u5b83\u7684\u5de6\u5b50\u6811\n\n\u5b83\u7684\u6392\u540d\u4fbf\u4e3a\u5f53\u524d\u8282\u70b9\u5de6\u5b50\u6811\u7684\u5143\u7d20\u548c+1(\u52a0\u4e0a\u81ea\u5df1)\n\n```\ninline int get_rank(int v)\n{\n\tint k = find(v);\n\tif(v != w[k]) return -1;\n\tsplay(k,root);\n\treturn sum[son[root][0]] + 1;\n}\n```\n\u67e5\u627e\u7f16\u53f7\u4e3ak\u7684\u6570\uff1a\n\n```cpp\nint atrank(int k)\n{\n\tif(k > m) return -1;\n\tint rt = root;\n\twhile(true)\n\t{\n\t\tint minuse = sum[rt] - sum[son[rt][1]];\n\t\tif(k > sum[son[rt][0]]&&k <= minuse) break; //x\u5373\u4e3art\n\t\tif(k < minuse) rt = son[rt][0]; //\u5728\u5de6\u513f\u5b50\u4e2d \n\t\telse\n\t\t{\n\t\t\tk -= minuse; //\u51cf\u53bb\u6bd4\u4ed6\u5c0f\u7684\u4e2a\u6570\n\t\t\trt = son[rt][1]; //\u5728\u53f3\u513f\u5b50\u4e2d \n\t\t}\n\t}\n\tsplay(rt,root); \n\treturn rt;\n}\n```\n\n\u597d\u4e86\uff0c\u8bb2\u5b8c\u4e86\u3002\n\n\u6ca1\u6709\u5e2e\u52a9\uff1f~~\u90a3\u5c31\u5bf9\u4e86~~\n",
        "postTime": 1570868166,
        "uid": 88583,
        "name": "\u67e5\u65e0\u6b64\u4eba",
        "ccfLevel": 0,
        "title": "\u5e73\u8861\u6811\u5b66\u4e60"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5927\u5bb6\u4f7f\u7528\u7684\u90fd\u662f\u5e38\u89c1\u5e73\u8861\u6811\u5427\u2026\u2026\n\n\u6211\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2aTrie\u6811\u7684\u89e3\u6cd5\u5427\u3002\n\n> \u5b57\u5178\u6811\uff0c\u53c8\u79f0\u5355\u8bcd\u67e5\u627e\u6811\uff0cTrie\u6811\uff0c\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784\uff0c\u662f\u4e00\u79cd\u54c8\u5e0c\u6811\u7684\u53d8\u79cd\u3002    From Baidu\n\n\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u57fa\u6570base\uff0c\u5c06\u9700\u8981\u5904\u7406\u7684\u6570\u8868\u793a\u4e3abase\u8fdb\u5236\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u50a8\u5b58\u6570\u7ec4\u7684Trie\u6811\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728base\u4e3a2\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u8bfb\u5165\u7684\u6570\u5b57\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b9a\u957f\u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u7136\u540e\u6839\u636e\u6bcf\u4e00\u4f4d\u7684\u6570\u503c\u5224\u65ad\u8d70\u5411\uff0c\u8d70\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\n\n\u5728\u672c\u4ee3\u7801\u4e2d\uff0cbase\u8bbe\u7f6e\u4e3a2\uff08\u4e3b\u8981\u662f\u8003\u8651\u5230\u4ee3\u7801\u5bb9\u6613\u5199\uff09\n\n\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u7ef4\u62a4\u7684\u503c\u5982\u4e0b:\n\n```\nmaxx[u]  :\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839 \u7684Trie\u5b50\u6811\u4e2d \u6240\u6709\u53f6\u5b50\u8282\u70b9 \u50a8\u5b58\u7684\u6570 \u7684\u6700\u5927\u503c\nminn[u]  :\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839 \u7684Trie\u5b50\u6811\u4e2d \u6240\u6709\u53f6\u5b50\u8282\u70b9 \u50a8\u5b58\u7684\u6570 \u7684\u6700\u5c0f\u503c\nsiz[u]   :\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839 \u7684Trie\u5b50\u6811\u4e2d \u53f6\u5b50\u8282\u70b9 \u7684\u4e2a\u6570\npcs[u]   :\u8be5\u8282\u70b9\u50a8\u5b58\u7684\u6570\u51fa\u73b0\u4e86\u591a\u5c11\u6b21(\u4ec5\u53f6\u5b50\u8282\u70b9)\nnumber[u]:\u8be5\u8282\u70b9\u4ee3\u8868\u7684\u6570\u5b57(\u4ec5\u53f6\u5b50\u8282\u70b9)\n```\n\n\u6dfb\u52a0\u64cd\u4f5c\u5176\u5b9e\u5f88\u660e\u663e\u4e86\uff0c\u62ff\u51fa\u6570\u7684\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u4e4b\u540e\u6dfb\u52a0\u8282\u70b9\u5e76\u8d70\u4e0b\u53bb\uff0c\u6700\u540e\u66f4\u6539\u53f6\u5b50\u8282\u70b9\u4fe1\u606f\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nvoid add_number(int u){\n\tint p=u,curr=1; //curr\u8868\u793a\u5f53\u524d\u8282\u70b9\n\tfor(int i=depth-1;i+1;i--){\n\t\tint v=(p>>i)&1;//\u8be5\u4f4d\n\t\tif(!c[curr][v])\tc[curr][v]=++idx,fa[idx]=curr;\n                //\u5728\u6ca1\u6709\u5bf9\u5e94\u8282\u70b9\u7684\u65f6\u5019\uff0c\u65b0\u5efa\u4e00\u4e2a\n\t\tmaxx[curr]=max(maxx[curr],u);//\u6cbf\u9014\u66f4\u65b0max\u503c\n\t\tminn[curr]=min(minn[curr],u);//\u8fd9\u662fmin\u503c\n\t\t++siz[curr];curr=c[curr][v];//\u8bb0\u5f55size\u5e76\u5f80\u4e0b\u8d70\n\t}\n\t++siz[curr];number[curr]=u;++pcs[curr];maxx[curr]=minn[curr]=u;\n        //\u4fdd\u5b58\u53f6\u8282\u70b9\u7684\u4fe1\u606f\n}\n```\n\n\u5220\u9664\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6cbf\u7740\u8def\u5f84\u5f80\u4e0b\u8d70\uff0c\u627e\u5230\u8be5\u53f6\u5b50\u8282\u70b9\u5bf9\u5176\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u4f46\u662f\uff0cmax\u548cmin\u4e0d\u80fd\u5728\u5411\u4e0b\u7684\u8fc7\u7a0b\u4e2d\u6539\u53d8\uff0c\u56e0\u4e3a\u4f60\u65e0\u6cd5\u77e5\u9053\u8fd9\u4e2a\u8282\u70b9\u4f1a\u4e0d\u4f1a\u88ab\u5b8c\u5168\u5220\u9664\uff08\u4e5f\u5c31\u662f\u5bf9\u5e94\u6570\u7684\u6570\u91cf\u4e3a0\uff09\n\n\u6240\u4ee5\uff0c\u91c7\u7528\u7ebf\u6bb5\u6811\u7684push_up\u7b97\u6cd5\uff0c\u5c06max\u548cmin\u5411\u4e0a\u63a8\uff0c\u5c31\u80fd\u5f97\u5230\u771f\u6b63\u7684max\u548cmin\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\nvoid del_number(int u){\n\tint p=u,curr=1;\n\tfor(int i=depth-1;i+1;i--){\n\t\tint v=(p>>i)&1;\n\t\tif(!c[curr][v])\treturn;\n\t\tcurr=c[curr][v];\n\t}//\u4ee5\u4e0a\u540c\u524d\u9762\u7684\u6dfb\u52a0\u64cd\u4f5c\n\t--pcs[curr];--siz[curr];//\u6539\u53d8pcs\u548csiz\n\tif(pcs[curr]==0)\tmaxx[curr]=-1,minn[curr]=0x3f3f3f3f;\n        //\u6ca1\u6709\u5bf9\u5e94\u6570\u5b57\u7684\u65f6\u5019\uff0c\u8bbe\u7f6e\u6700\u503c\u4e3a\u6781\u7aef\u503c\n\tfor(curr=fa[curr];curr;curr=fa[curr]){\n\t\t--siz[curr];//\u66f4\u6539\u5927\u5c0f\n\t\tmaxx[curr]=max(maxx[c[curr][0]],maxx[c[curr][1]]);\n\t\tminn[curr]=min(minn[c[curr][0]],minn[c[curr][1]]);\n        \t//\u6539\u53d8\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n\t}\n}\n```\n\n\u67e5\u8be2rank\u9700\u8981siz\u6570\u7ec4\u8f85\u52a9\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u5728\u4e00\u4e2a\u5206\u53c9\u7684\u5730\u65b9\uff08\u4e0d\u59a8\u5047\u8bbe1\u8fb9\u5728\u53f3\u8fb9\uff0c0\u8fb9\u5728\u5de6\u8fb9\uff09\uff0c\u53f3\u8fb9\u4efb\u610f\u4e00\u4e2a\u6570\u90fd\u6bd4\u5de6\u8fb9\u4efb\u610f\u4e00\u4e2a\u6570\u5927\u3002\n\n---\n\n\u8bc1\u660e\uff1a\u5728\u6b64\u5904\u5f00\u59cb\u5206\u53c9\uff0c\u8bf4\u660e\u4e4b\u524d\u7684\u4e8c\u8fdb\u5236\u4f4d\u76f8\u540c\uff0c\u6240\u4ee5\u524d\u9762\u7684\u4e8c\u8fdb\u5236\u4f4d\u53ef\u4ee5\u5ffd\u7565\u3002\n\n\u53bb\u6389\u8fd9\u4e9b\u4e0d\u5f71\u54cd\u5224\u65ad\u7684\u4f4d\u540e\uff0c\u53f3\u8fb9\u7684\u6570\u6700\u9ad8\u4f4d\u4e3a1\uff0c\u5de6\u8fb9\u7684\u6570\u6700\u9ad8\u4e3a\u4e3a0\u3002\n\n\u53c8\u56e0\u4e3a\u4e24\u8005\u7684\u4e8c\u8fdb\u5236\u957f\u5ea6\u76f8\u540c\uff08\u7b49\u957f\u7684\u4e8c\u8fdb\u5236\u6570\u53bb\u9664\u76f8\u7b49\u7684\u4f4d\u6570\uff09\uff0c\u90a3\u4e48\u53f3\u8fb9\u7684\u6570\u5c31\u6bd4\u5de6\u8fb9\u7684\u6570\u5927\u4e86\u3002\n\n---\n\n\u6211\u4eec\u770b\u56de\u95ee\u9898\uff0c\u6211\u4eec\u8fd8\u662f\u987a\u7740\u4e8c\u8fdb\u5236\u4f4d\u5f80\u4e0b\u8d70\uff0c\u5f53\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e3a1\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7b54\u6848\u52a0\u4e0a\u5de6\u5b50\u6811\u5927\u5c0f\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6570\u90fd\u6bd4\u8be2\u95ee\u7684\u6570\u66f4\u5c0f\u3002\n\n\u6700\u540e\u5f97\u51fa\u7684\u7b54\u6848\u5c31\u662f\u5c0f\u4e8e\u8be2\u95ee\u6570\u7684\u6570\u4e2a\u6570\uff0c\u52a0\u4e0a1\u8f93\u51fa\u5c31\u884c\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nint rk(int u){\n\tint p=u,curr=1,ret=0;\n\tfor(int i=depth-1;i+1;i--){\n\t\tint v=(p>>i)&1;\n\t\tif(v)\tret+=siz[c[curr][0]];//\u662f1\u7684\u65f6\u5019\u52a0\u4e0a\u5de6\u5b50\u6811\u5927\u5c0f\n\t\tif(!c[curr][v])\treturn ret+1;//\u5b50\u6811\u4e3a\u7a7a\u7684\u65f6\u5019\u76f4\u63a5\u8fd4\u56de\n\t\tcurr=c[curr][v];//\u8df3\u5230\u5b50\u6811\n\t}\n\treturn ret+1;\n}\n```\n\n\u67e5\u8be2\u7b2c\u51e0\u4e2a\u6570\u4e5f\u662f\u9700\u8981siz\u51fd\u6570\u7684\u3002\u6839\u636e\u521a\u624d\u7684\u8bc1\u660e\uff0c\u5728\u4e00\u4e2a\u8282\u70b9\u4e0b\uff0c\u53f3\u8fb9\u7684\u6570\u90fd\u662f\u504f\u5927\u7684\uff0c\u90a3\u4e48\u5de6\u8fb9\u7684\u6570\u5c31\u662f\u4ee5\u8be5\u8282\u70b9\u4e3a\u5b50\u6811\u4e2d\u8f83\u5c0f\u7684\u6570\u3002\n\n\u6211\u4eec\u5f84\u76f4\u5411\u4e0b\u8d70\uff0c\u5f53\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u5927\u4e8e\u7b49\u4e8e\u8be2\u95ee\u6570\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u80c6\u7684\u5f80\u5de6\u5b50\u6811\u8d70\u3002\u5426\u5219\uff0c\u6211\u4eec\u5c31\u5c06\u8be2\u95ee\u6570\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\uff0c\u8df3\u5230\u53f3\u5b50\u6811\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7684\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u5df1\u8bc1\u660e\u4e00\u4e0b\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nint dfn(int u){\n\tint curr=1;//\u5f53\u524d\u4f4d\u7f6e\n\tfor(int i=depth-1;i+1;i--){\n\t\tif(siz[c[curr][0]]<u)\tu-=siz[c[curr][0]],curr=c[curr][1];\n        \t//\u5728\u5de6\u5b50\u6811\u5927\u5c0f\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u8df3\u5230\u53f3\u5b50\u6811\n\t\telse\tcurr=c[curr][0];\n        \t//\u5426\u5219\uff0c\u8df3\u5230\u5de6\u5b50\u6811\n\t}\n\treturn number[curr];\n\t//\u8fd4\u56de\n}\n```\n\n\u67e5\u8be2\u524d\u9a71\u540e\u7ee7\u5c31\u8981\u4f7f\u7528max\u548cmin\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5224\u65ad\u4e0d\u90a3\u4e48\u7b80\u5355\u3002\n\n\u6211\u4eec\u5728\u8fd9\u91cc\u53ea\u770b\u540e\u7ee7\uff0c\u524d\u9a71\u540c\u7406\u3002\n\n\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u8bc1\u660e\uff0c\u5047\u5982\u5728\u5bfb\u627e\u540e\u7ee7\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u786e\u5b9a\u4e0b\u6765\u7684\u524d\u51e0\u4f4d\u548c\u8be2\u95ee\u6570\u7684\u524d\u51e0\u4f4d\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u7528\u653e\u5fc3\u53d6\u8fd9\u4e2a\u5b50\u6811\u7684\u6700\u5c0f\u503c\u5c31\u884c\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5bfb\u627e\u540e\u7ee7\u7684\u8fc7\u7a0b\u4e2d\uff0c\u786e\u5b9a\u4e0b\u6765\u7684\u524d\u51e0\u4f4d\u5e94\u8be5\u4e0d\u5c0f\u4e8e\u6bd4\u8be2\u95ee\u6570\u7684\u524d\u51e0\u4f4d\uff0c\u90a3\u4e48\u6839\u636e\u524d\u9762\u7684\u7406\u8bba\uff0c\u5269\u4e0b\u7684\u6570\u600e\u4e48\u53d6\u90fd\u6bd4\u8be2\u95ee\u6570\u5927\uff0c\u4e4b\u540e\u5c31\u662f\u6839\u636e\u540e\u7ee7\u4e2d\u201c\u6700\u5c0f\u201d\u7684\u5b9a\u4e49\uff0c\u5f97\u5230\u6211\u4eec\u7684\u547d\u9898\u662f\u6210\u7acb\u7684\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nint next(int u){\n\tint p=u,curr=1;\n\tbool flag=false; //\u524d\u51e0\u4f4d\u662f\u5426\u4e0d\u4e00\u6837\n\tfor(int i=depth-1;i+1;i--){\n\t\tint v=(p>>i)&1;\n\t\tif(flag)\tv=(siz[c[curr][0]]?0:1);\n\t\t//\u4e0d\u4e00\u6837\uff1f\u5c3d\u91cf\u5f80\u5de6\u8d70\uff01\n\t\telse if(v==0 && (siz[c[curr][v]]==0 || maxx[c[curr][v]]<=u))\tv=1,flag=true;\n\t\t//\u6211\u4eec\u53d6\u4e0d\u4e00\u6837\u53ea\u6709\u5728\u201c\u8d70\u6295\u65e0\u8def\u201d\u7684\u65f6\u5019\n\t\t//\u56e0\u4e3a\u6211\u4eec\u8981\u5c3d\u91cf\u8d34\u8fb9\u8d70\n\t\t//\u201c\u8d70\u6295\u65e0\u8def\u201d\u6709\u4e24\u79cd\u60c5\u51b5\n\t\t//1:\u5de6\u5b50\u6811\u6ca1\u6709\u6570\n\t\t//2:\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u6bd4\u8be2\u95ee\u6570\u8fd8\u8981\u5c0f\n\t\tcurr=c[curr][v];\n\t}\n\treturn number[curr];\n\t//\u7ed3\u675f\n}\n```\n\n\u524d\u9a71\u5bf9\u79f0\u5904\u7406\uff0c\u4ee3\u7801\u8be6\u89c1\u6700\u540e\u7684\u4ee3\u7801\u3002\n\n\u6700\u540e\u5c31\u662f\u771f\u6b63\u7684\u4ee3\u7801\u4e86\u3002\n\nP.S. :\u7531\u4e8e\u8d1f\u6570\u5728\u4e8c\u8fdb\u5236\u91cc\u9762\u975e\u5e38\u96be\u641e\uff0c\u672c\u4eba\u5efa\u8bae\u76f4\u63a5\u8f6c\u6362\u4e3a\u81ea\u7136\u6570\u5904\u7406\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int depth=30,maxi=100010;\nint c[maxi*depth][2],idx=1,fa[maxi*depth];\nint number[maxi*depth],pcs[maxi*depth],siz[maxi*depth];\nint maxx[maxi*depth],minn[maxi*depth],N;\nvoid add_number(int u){\n\tint p=u,curr=1;\n\tfor(int i=depth-1;i+1;i--){\n\t\tint v=(p>>i)&1;\n\t\tif(!c[curr][v])\tc[curr][v]=++idx,fa[idx]=curr;\n\t\tmaxx[curr]=max(maxx[curr],u);\n\t\tminn[curr]=min(minn[curr],u);\n\t\t++siz[curr];curr=c[curr][v];\n\t}\n\t++siz[curr];number[curr]=u;++pcs[curr];maxx[curr]=minn[curr]=u;\n}\nvoid del_number(int u){\n\tint p=u,curr=1;\n\tfor(int i=depth-1;i+1;i--){\n\t\tint v=(p>>i)&1;\n\t\tif(!c[curr][v])\treturn;\n\t\tcurr=c[curr][v];\n\t}\n\t--pcs[curr];--siz[curr];\n\tif(pcs[curr]==0)\tmaxx[curr]=-1,minn[curr]=0x3f3f3f3f;\n\tfor(curr=fa[curr];curr;curr=fa[curr]){\n\t\t--siz[curr];\n\t\tmaxx[curr]=max(maxx[c[curr][0]],maxx[c[curr][1]]);\n\t\tminn[curr]=min(minn[c[curr][0]],minn[c[curr][1]]);\n\t}\n}\nint rk(int u){\n\tint p=u,curr=1,ret=0;\n\tfor(int i=depth-1;i+1;i--){\n\t\tint v=(p>>i)&1;\n\t\tif(v)\tret+=siz[c[curr][0]];\n\t\tif(!c[curr][v])\treturn ret+1;\n\t\tcurr=c[curr][v];\n\t}\n\treturn ret+1;\n}\nint dfn(int u){\n\tint curr=1;\n\tfor(int i=depth-1;i+1;i--){\n\t\tif(siz[c[curr][0]]<u)\tu-=siz[c[curr][0]],curr=c[curr][1];\n\t\telse\tcurr=c[curr][0];\n\t}\n\treturn number[curr];\n}\nint prev(int u){\n\tint p=u,curr=1;\n\tbool flag=false;\n\tfor(int i=depth-1;i+1;i--){\n\t\tint v=(p>>i)&1;\n\t\tif(flag)\tv=(siz[c[curr][1]]?1:0);\n\t\telse if(v && (siz[c[curr][v]]==0 || minn[c[curr][v]]>=u))\tv=0,flag=true;\n\t\tcurr=c[curr][v];\n\t}\n\treturn number[curr];\n}\nint next(int u){\n\tint p=u,curr=1;\n\tbool flag=false;\n\tfor(int i=depth-1;i+1;i--){\n\t\tint v=(p>>i)&1;\n\t\tif(flag)\tv=(siz[c[curr][0]]?0:1);\n\t\telse if(v==0 && (siz[c[curr][v]]==0 || maxx[c[curr][v]]<=u))\tv=1,flag=true;\n\t\tcurr=c[curr][v];\n\t}\n\treturn number[curr];\n}\nint main(){\n\tmemset(maxx,-1,sizeof(maxx));\n\tmemset(minn,0x3f,sizeof(minn));\n\tscanf(\"%d\",&N);\n\tfor(int i=1,a,b;i<=N;i++){\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tif(a==1)\tadd_number(b+1e7);\n\t\tif(a==2)\tdel_number(b+1e7);\n\t\tif(a==3)\tprintf(\"%d\\n\",rk(b+1e7));\n\t\tif(a==4)\tprintf(\"%d\\n\",dfn(b)-(int)1e7);\n\t\tif(a==5)\tprintf(\"%d\\n\",prev(b+1e7)-(int)1e7);\n\t\tif(a==6)\tprintf(\"%d\\n\",next(b+1e7)-(int)1e7);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1566398233,
        "uid": 60864,
        "name": "tiger2005",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u63a8\u5e7fblog\uff1a<http://zhoushengjie.pw>\n\n\u5947\u602aPascal\u9898\u89e3\u53ea\u6709\u4e24\u7bc7\uff0c\u4e00\u7bc7\u7ebf\u6bb5\u6811\uff0c\u4e00\u7bc7\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n~~\u90fd\u597d\u5de8\u554a~~\n\n\u6211\u6765\u4e00\u7bc7\u6b63\u89e3treap\u3002\u6bd5\u7adfPascal\u7684\u9898\u89e3\u771f\u5fc3\u5c11\u554a\u3002\n\n\u4e0d\u8bb2\u4e86\u3002C++\u7684\u5927\u4f6c\u4eec\u5df2\u7ecf\u8bb2\u5f97\u5f88\u8be6\u7ec6\u4e86\u3002\n\nPascal\u4ee3\u7801\uff1a\n\n```pas\n//\u5148\u89e3\u91ca\u4e00\u4e0b\u53d8\u91cf\u540d\n//a\u662f\u539f\u6765\u7684\u6570\u503c\n//l\u662f\u5de6\u513f\u5b50\n//r\u662f\u53f3\u513f\u5b50\n//s\u662f\u5b50\u6811\u7684\u5927\u5c0f\uff08\u51e0\u4e2a\u6570\uff09\n//p\u662f\u968f\u673a\u4f18\u5148\u503c\n//num\u662f\u5f53\u524d\u8282\u70b9\u7684\u6570\u6709\u51e0\u4e2a\nvar\n  a,l,r,s,p,num:array[0..100000]of longint;\n  n,i,q,x,y,root:longint;\nfunction max(x,y:longint):longint;//\u4e0d\u89e3\u91ca\nbegin\n  if x>y then\n    exit(x)\n  else\n    exit(y);\nend;\nfunction min(x,y:longint):longint;\nbegin\n  if x<y then\n    exit(x)\n  else\n    exit(y);\nend;\nprocedure zag(var x:longint);//\u5de6\u65cb\nvar\n  t:longint;\nbegin\n  t:=r[x];\n  r[x]:=l[t];\n  l[t]:=x;\n  s[t]:=s[x];\n  s[x]:=s[l[x]]+s[r[x]]+num[x];\n  x:=t;\nend;\nprocedure zig(var x:longint);//\u53f3\u65cb\nvar\n  t:longint;\nbegin\n  t:=l[x];\n  l[x]:=r[t];\n  r[t]:=x;\n  s[t]:=s[x];\n  s[x]:=s[l[x]]+s[r[x]]+num[x];\n  x:=t;\nend;\nprocedure insert(var x:longint;k:longint);//\u63d2\u5165\u8282\u70b9\nbegin\n  if x=0 then\n  begin\n    inc(n);\n    x:=n;\n    s[x]:=1;\n    a[x]:=k;\n    p[x]:=random(maxlongint);\n    num[x]:=1;\n    exit;\n  end;\n  inc(s[x]);\n  if k=a[x] then\n    inc(num[x])\n  else\n    if k<a[x] then\n    begin\n      insert(l[x],k);\n      if p[l[x]]<p[x] then\n        zig(x);\n    end\n    else\n    begin\n      insert(r[x],k);\n      if p[r[x]]<p[x] then\n        zag(x);\n    end;\nend;\nprocedure delete(var x:longint;k:longint);//\u5220\u9664\u8282\u70b9\nbegin\n  if x=0 then\n    exit;\n  if k=a[x] then\n  begin\n    if num[x]>1 then\n    begin\n      dec(s[x]);\n      dec(num[x]);\n      exit;\n    end;\n    if (l[x]=0) or (r[x]=0) then\n      x:=l[x]+r[x]\n    else\n    begin\n      if p[l[x]]<p[x] then\n        zig(x)\n      else\n        zag(x);\n      delete(x,k);\n    end;\n  end\n  else\n  begin\n    dec(s[x]);\n    if k<a[x] then\n      delete(l[x],k)\n    else\n      delete(r[x],k);\n  end;\nend;\nfunction rank(x,k:longint):longint;//\u67e5\u8be2\u6392\u540d\nbegin\n  if x=0 then\n    exit(0);\n  if k<a[x] then\n    exit(rank(l[x],k));\n  if k=a[x] then\n    exit(s[l[x]]+1);\n  if k>a[x] then\n    exit(rank(r[x],k)+s[l[x]]+num[x]);\nend;\nfunction kth(x,k:longint):longint;//\u7b2ck\u4e2a\u6570\nbegin\n  while true do\n  begin\n    if k<=s[l[x]] then\n      x:=l[x]\n    else\n      if k>s[l[x]]+num[x] then\n      begin\n        dec(k,s[l[x]]+num[x]);\n        x:=r[x];\n      end\n      else\n        exit(a[x]);\n  end;\nend;\nfunction pred(x,k:longint):longint;//\u524d\u9a71\nbegin\n  if x=0 then\n    exit(-maxlongint-1);\n  if k<=a[x] then\n    exit(pred(l[x],k))\n  else\n    exit(max(a[x],pred(r[x],k)));\nend;\nfunction succ(x,k:longint):longint;//\u540e\u7f00\nbegin\n  if x=0 then\n    exit(maxlongint);\n  if k>=a[x] then\n    exit(succ(r[x],k))\n  else\n    exit(min(a[x],succ(l[x],k)));\nend;\nbegin                          //\u4e3b\u7a0b\u5e8f\n  randomize;\n  read(q);\n  n:=0;\n  root:=0;\n  for i:=1 to q do\n  begin\n    read(x,y);\n    case x of\n    1:insert(root,y);\n    2:delete(root,y);\n    3:writeln(rank(root,y));\n    4:writeln(kth(root,y));\n    5:writeln(pred(root,y));\n    6:writeln(succ(root,y));\n    end;\n  end;\nend.\n```",
        "postTime": 1544358486,
        "uid": 40241,
        "name": "dblark",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u4e86$Splay,Treap,Fhq Treap$\u7684\u6a21\u677f\u6570\u7ec4\u5199\u6cd5\n\n\u7c97\u7565\u63cf\u8ff0\u4e00\u4e0b$Fhq Treap$\n\n$Fhq Treap$\u5c31\u662f\u975e\u65cb$Treap$\n\n\u901a\u8fc7merge split\u4e24\u4e2a\u51fd\u6570\u5b9e\u73b0\u5e73\u8861\u6811\u7684\u64cd\u4f5c\n\n\u4ee5\u4e0b\u662f\u5404\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\n\n- ### pus(int x)\n\n\u8fd9\u4e2a\u5c31\u662f\u4e0a\u63a8\n```\nvoid pus(int x)\n{\n\tsiz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n}\n```\n- ### merge(int x,int y)\n\n$merge$\u5c06\u6839\u4e3a$x$\u548c$y$\u7684\u4e24\u68f5$Treap$\u5408\u5728\u4e00\u8d77\uff0c\u6ce8\u610f\u5408\u5e76\u524d$x$\u7684\u6700\u5927\u8282\u70b9\u5c0f\u4e8e$y$\u7684\u6700\u5c0f\u8282\u70b9\n\n\u7136\u800c$merge$\u65f6\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n$x$\u4e3a\u6839\uff0c$x$\u7684\u53f3\u513f\u5b50\u4e3a$y$\n\n$y$\u4e3a\u6839\uff0c$y$\u7684\u5de6\u513f\u5b50\u4e3a$x$\n\n\u8fd9\u65f6\u901a\u8fc7$Treap$\u6bcf\u4e2a\u8282\u70b9\u7684\u968f\u673a\u6570\uff08\u5373$pos$\uff09\u5224\u65ad\n```\nint merge(int x,int y)\n{\n\tif(!x||!y) return x+y;\n\tif(pos[x]<pos[y])\n\t{\n\t\tson[x][1]=merge(son[x][1],y);\n\t\tpus(x);\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tson[y][0]=merge(x,son[y][0]);\n\t\tpus(y);\n\t\treturn y;\n\t}\n}\n```\n- ### split(int i,int x,int &a,int &b)\n\n\u901a\u8fc7$split$\u53ef\u4ee5\u5c06\u4e00\u68f5$Treap$\u5206\u79bb\u6210\u4e24\u68f5$Treap$\uff0c\u4e24\u68f5$Treap$\u7684\u6839\u8282\u70b9\u5206\u522b\u4e3a$a,b$\n\n\u8fd9\u91cc\u901a\u8fc7\u8282\u70b9\u503c\uff08\u5373$w$\uff09\u5206\u88c2\n```\nvoid split(int i,int x,int &a,int &b)\n{\n\tif(!i) a=0,b=0;\n\telse\n\t{\n\t\tif(w[i]<=x)\n\t\ta=i,split(son[i][1],x,son[i][1],b);\n\t\telse b=i,split(son[i][0],x,a,son[i][0]);\n\t\tpus(i);\n\t}\n}\n```\n\u8fd8\u6709\u4e00\u79cd\u901a\u8fc7\u6392\u540d\uff08\u901a\u8fc7$siz$\uff09\u627e\n```\nvoid split(int i,int x,int &a,int &b)\n{\n    if (!i) a=0,b=0;\n    else\n    {\n        if(x<=siz[son[i][0]])\n        b=i,split(son[i][0],x,a,son[i][0]);\n        else a=i,split(son[i][1],x-siz[son[i][0]]-1,son[i][1],b);\n        pus(i);\n    }\n}\n```\n\u4ee5\u4e0b\u4ee3\u7801\u90fd\u662f\u901a\u8fc7\u6743\u503c\u627e\n- ### ins(int x)\n\n\u6dfb\u52a0\u8282\u70b9\n\n\u5148\u6839\u636e\u6743\u503c\u901a\u8fc7$split$\u5206\u79bb\u51fata\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5efa\u7acb\u65b0\u8282\u70b9\n\n\u6700\u540e\u628a\u65b0\u8282\u70b9\u5408\u8d77\u6765\u5c31\u884c\u4e86\n\n$merge(merge(split_left,new),split_right)$\n\n~~\u7b80\u5355\u5427~~\n```\nvoid ins(int x)\n{\n\tint a,b;\n\tsplit(rt,x,a,b);\n\tw[++tot]=x,siz[tot]=1,pos[tot]=Rand();\n\trt=merge(merge(a,tot),b);\n}\n```\n- ### cut(int x)\n\n\u5220\u9664\u4e00\u4e2a\u8282\u70b9\n\n\u5148\u628a\u6811\u6309\u7167\u6743\u503c$split$\u6210$a,b$\uff0c\u518d\u628a$a$\u6309\u7167\u6743\u503c-1 $split$\u6210$c,d$\n\n\u518d$merge(son_{d,0},son_{d,1})$\uff0c\u6700\u540e$merge(merge(c,d),b)$\n\n\u8fd9\u91cc\u53d8\u91cf\u6709\u91cd\u590d\u4f7f\u7528~~\u51d1\u5408\u770b\u5427~~\n```\nvoid cut(int x)\n{\n\tint a,b,c;\n\tsplit(rt,x,a,c);\n\tsplit(a,x-1,a,b);\n\tb=merge(son[b][0],son[b][1]);\n\trt=merge(merge(a,b),c);\n}\n```\n- ### rank(int x)\n\n\u627e\u6743\u503c\u4e3a$x$\u7684\u70b9\u7684\u6392\u540d\n\n\u901a\u8fc7$split$\u5206\u79bb\u51fa\u8fd9\u4e2a\u70b9\u7684\u5de6\u5b50\u6811,\u90a3\u4e48\u5de6\u5b50\u6811\u7684$siz+1$\u5c31\u662f\u6392\u540d\n\n\u6700\u540e\u522b\u5fd8\u4e86$merge$\u56de\u53bb\n```\nint rank(int x)\n{\n\tint a,b;\n\tsplit(rt,x-1,a,b);\n\tint ans=siz[a]+1;\n\trt=merge(a,b);\n\treturn ans;\n}\n```\n- ###  mink(int x,int i)\n\n\u67e5\u627e\u7b2c$k$\u5c0f\u70b9\u7684\u503c,\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u5199\u2026\u2026\n\n\u5c31\u5199\u4e86\u4e00\u4e2a\u666e\u901a$Treap$\u7684$mink$\n```\nint mink(int k,int i)\n{\n\tint hh=siz[son[i][0]]+1;\n\tif(hh==k) return w[i];\n\tif(hh>k) return mink(k,son[i][0]);\n\treturn mink(k-hh,son[i][1]);\n}\n```\n- ### pre(int x)\n\n\u67e5\u627e\u524d\u9a71\u6bd4\u8f83\u9ebb\u70e6\n\n\u5148\u6839\u636e\u6743\u503c$x-1$ $split$\u51fa$a,b$\uff0c\u7136\u540e\u5728$a$\u4e2d\u627e\u6392\u540d\u6700\u5927\u7684\u70b9\uff08\u5373\u6700\u53f3\u8282\u70b9\uff0c\u8fd9\u91cc\u7528$mink$\u5b9e\u73b0\uff09\n```\nint pre(int x)\n{\n\tint a,b;\n\tsplit(rt,x-1,a,b);\n\tint ans=mink(siz[a],a);\n\trt=merge(a,b);\n\treturn ans;\n}\n```\n- ### nxt(int x)\n\n\u67e5\u627e\u540e\u7ee7\n\n$pre$\u7684\u9006\u64cd\u4f5c\uff0c$b$\u4e2d\u627e\u6392\u540d\u6700\u5c0f\u7684\u8282\u70b9\uff08\u5373\u6700\u5de6\u8282\u70b9\uff09\n```\nint nxt(int x)\n{\n\tint a,b;\n\tsplit(rt,x,a,b);\n\tint ans=mink(1,b);\n\trt=merge(a,b);\n\treturn ans;\n}\n```\n\u5168\u90e8\u4ee3\u7801\u5982\u4e0b\uff08\u8fd8\u6709$Splay$\u548c\u666e\u901a$Treap$\u7684\uff09\uff1a\n```\n# include<iostream>\n# include<cstring>\n# include<cstdio>\n# include<ctime>\n# include<algorithm>\nusing namespace std;\nconst int MAX=1e5+1,inf=inf;\nint m,rt,tot;\nint read()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch))\n\t{\n\t\tif(ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch))\n\tx=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\nint Rand()//Treap\u7684\u968f\u673a\u6570\n{\n\tstatic int seed=703;\n    return seed=int(seed*48271LL%2147483647);\n}\n\n//----------------------------zz\u5206\u5272\u7ebf--------------------------------\n\nstruct Splay{\n\tint fa[MAX],siz[MAX],w[MAX],res[MAX];\n\tint son[MAX][2];\n\tvoid pus(int x)\n\t{\n\t\tsiz[x]=siz[son[x][1]]+siz[son[x][0]]+res[x];\n\t}\n\tint id(int x)\n\t{\n\t\treturn son[fa[x]][1]==x;\n\t}\n\tint clear(int x)\n\t{\n\t\tw[x]=siz[x]=fa[x]=son[x][0]=son[x][1]=res[x]=0;\n\t}\n\tvoid rot(int x)\n\t{\n\t\tint y=fa[x],z=fa[y];\n\t\tint l=id(x),r=(l^1);\n\t\tson[y][l]=son[x][r];\n\t\tfa[y]=x;\n\t\tif(son[y][l]) fa[son[y][l]]=y;\n\t\tson[x][r]=y;\n\t\tfa[x]=z;\n\t\tif(z) son[z][son[z][1]==y]=x;\n\t\tpus(y),pus(x);\n\t}\n\tvoid splay(int x)\n\t{\n\t\tfor(int y;y=fa[x];rot(x))\n\t\t  if(fa[y])\n\t\t  rot(id(y)==id(x)?y:x);\n\t\trt=x;\n\t}\n\tvoid ins(int x)\n\t{\n\t\tif(!rt)\n\t\t{\n\t\t\trt=++tot;\n\t\t\tw[tot]=x,siz[tot]=1,res[tot]=1;\n\t\t\treturn;\n\t\t}\n\t\tint now=rt,y=0;\n\t\twhile(1)\n\t\t{\n\t\t\tif(x==w[now])\n\t\t\t{\n\t\t\t\tres[now]++;\n\t\t\t\tpus(now);\n\t\t\t\tsplay(now);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ty=now,now=son[now][w[now]<x];\n\t\t\tif(!now)\n\t\t\t{\n\t\t\t\tw[++tot]=x,siz[tot]=1,res[tot]=1;\n\t\t\t\tfa[tot]=y;\n\t\t\t\tson[y][w[y]<x]=tot;\n\t\t\t\tsplay(tot);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\tvoid cut(int x)\n\t{\n\t\trank(x);\n\t\tif(res[rt]>1)\n\t\t{\n\t\t\tres[rt]--;\n\t\t\tpus(rt);\n\t\t\treturn;\n\t\t}\n\t\tif(!son[rt][0]&&!son[rt][1])\n\t\t{\n\t\t\tclear(rt),rt=0;\n\t\t\treturn;\n\t\t}\n\t\tif(!son[rt][1])\n\t\t{\n\t\t\trt=son[rt][0];\n\t\t\tclear(fa[rt]);\n\t\t\tfa[rt]=0;\n\t\t\treturn;\n\t\t}\n\t\tif(!son[rt][0])\n\t\t{\n\t\t\trt=son[rt][1];\n\t\t\tclear(fa[rt]);\n\t\t\tfa[rt]=0;\n\t\t\treturn;\n\t\t}\n\t\tint last=rt;\n\t\tsplay(Pre());\n\t\tson[rt][1]=son[last][1];\n\t\tfa[son[last][1]]=rt;\n\t\tclear(last);\n\t\tpus(rt);\n\t}\n\tint rank(int x)\n\t{\n\t\tint ans=0,now=rt;\n\t\twhile(1)\n\t\t{\n\t\t\tif(!now) return ans+1;\n\t\t\tif(x<w[now])\n\t\t\tnow=son[now][0];\n\t\t\telse\n\t\t\t{\n\t\t\t\tans+=siz[son[now][0]];\n\t\t\t\tif(x==w[now])\n\t\t\t\t{\n\t\t\t\t\tsplay(now);\n\t\t\t\t\treturn ans+1;\n\t\t\t\t}\n\t\t\t\tans+=res[now];\n\t\t\t\tnow=son[now][1];\n\t\t\t}\n\t\t}\n\t}\n\tint mink(int x)\n\t{\n\t\tint now=rt;\n\t\twhile(1)\n\t\t{\n\t\t\tif(x<=siz[son[now][0]])\n\t\t\tnow=son[now][0];\n\t\t\telse\n\t\t\t{\n\t\t\t\tx-=siz[son[now][0]];\n\t\t\t\tif(x<=res[now])\n\t\t\t\t{\n\t\t\t\t\tsplay(now);\n\t\t\t\t\treturn w[now];\n\t\t\t\t}\n\t\t\t\tx-=res[now];\n\t\t\t\tnow=son[now][1];\n\t\t\t}\n\t\t}\n\t}\n\tint Pre()\n\t{\n\t\tint now=son[rt][0];\n\t\twhile(son[now][1]) now=son[now][1];\n\t\treturn now;\n\t}\n\tint Nxt()\n\t{\n\t\tint now=son[rt][1];\n\t\twhile(son[now][0]) now=son[now][0];\n\t\treturn now;\n\t}\n\tint pre(int x)\n\t{\n\t\tins(x);\n\t\tint ans=w[Pre()];\n\t\tcut(x);\n\t\treturn ans;\n\t}\n\tint nxt(int x)\n\t{\n\t\tins(x);\n\t\tint ans=w[Nxt()];\n\t\tcut(x);\n\t\treturn ans;\n\t}\n}Tree1;//\u4ee5\u4e0a\u662fSplay\n\n//----------------------------zz\u5206\u5272\u7ebf--------------------------------\n\nstruct Treap{\n\tint siz[MAX],pos[MAX],w[MAX];\n\tint son[MAX][2];\n\tvoid pus(int x)\n\t{\n\t\tsiz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n\t}\n\tvoid rot(int &i,int x)\n\t{\n\t\tint tt=son[i][x];\n\t\tson[i][x]=son[tt][x^1];\n\t\tson[tt][x^1]=i;\n\t\tpus(i),pus(tt);\n\t\ti=tt;\n\t}\n\tvoid ins(int x,int &i)\n\t{\n\t\tif(!i)\n\t\t{\n\t\t\ti=++tot;\n\t\t\tsiz[i]=1,w[i]=x,pos[i]=Rand();\n\t\t\treturn;\n\t\t}\n\t\tsiz[i]++;\n\t\tif(x<=w[i])\n\t\t{\n\t\t\tins(x,son[i][0]);\n\t\t\tif(pos[son[i][0]]<pos[i]) rot(i,0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tins(x,son[i][1]);\n\t\t\tif(pos[son[i][1]]<pos[i]) rot(i,1);\n\t\t}\n\t}\n\tvoid cut(int x,int &i)\n\t{\n\t\tif(w[i]==x)\n\t\t{\n\t\t\tif(!son[i][0]||!son[i][1])\n\t\t\t{\n\t\t\t\ti=son[i][0]+son[i][1];\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(pos[son[i][0]]>pos[son[i][1]])\n\t\t\trot(i,1),cut(x,son[i][0]);\n\t\t\telse rot(i,0),cut(x,son[i][1]);\n\t\t}\n\t\telse if(w[i]>x) cut(x,son[i][0]);\n\t\telse cut(x,son[i][1]);\n\t\tpus(i);\n\t}\n\tint rank(int x,int i)\n\t{\n\t\tif(!i) return 1;\n\t\tif(w[i]>=x) return rank(x,son[i][0]);\n\t\treturn rank(x,son[i][1])+siz[son[i][0]]+1;\n\t}\n\tint mink(int x,int i)\n\t{\n\t\tif(siz[son[i][0]]==x-1) return w[i];\n\t\tif(siz[son[i][0]]>=x) return mink(x,son[i][0]);\n\t\treturn mink(x-siz[son[i][0]]-1,son[i][1]);\n\t}\n\tint pre(int x,int i)\n\t{\n\t\tif(!i) return -1e8;\n\t\tif(w[i]<x) return max(w[i],pre(x,son[i][1]));\n\t\treturn pre(x,son[i][0]);\n\t}\n\tint nxt(int x,int i)\n\t{\n\t\tif(!i) return 1e8;\n\t\tif(w[i]>x) return min(w[i],nxt(x,son[i][0]));\n\t\treturn nxt(x,son[i][1]);\n\t}\n}Tree2;//\u4ee5\u4e0a\u662f$Treap$\n\n//----------------------------zz\u5206\u5272\u7ebf--------------------------------\n\nstruct Fhq_Treap{\n\tint pos[MAX],w[MAX],siz[MAX];\n\tint son[MAX][2];\n\tvoid pus(int x)\n\t{\n\t\tsiz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n\t}\n\tint merge(int x,int y)\n\t{\n\t\tif(!x||!y) return x+y;\n\t\tif(pos[x]<pos[y])\n\t\t{\n\t\t\tson[x][1]=merge(son[x][1],y);\n\t\t\tpus(x);\n\t\t\treturn x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tson[y][0]=merge(x,son[y][0]);\n\t\t\tpus(y);\n\t\t\treturn y;\n\t\t}\n\t}\n\tvoid split(int i,int x,int &a,int &b)\n\t{\n\t\tif(!i) a=0,b=0;\n\t\telse\n\t\t{\n\t\t\tif(w[i]<=x)\n\t\t\ta=i,split(son[i][1],x,son[i][1],b);\n\t\t\telse b=i,split(son[i][0],x,a,son[i][0]);\n\t\t\tpus(i);\n\t\t}\n\t}\n\tvoid ins(int x)\n\t{\n\t\tint a,b;\n\t\tsplit(rt,x,a,b);\n\t\tw[++tot]=x,siz[tot]=1,pos[tot]=Rand();\n\t\trt=merge(merge(a,tot),b);\n\t}\n\tvoid cut(int x)\n\t{\n\t\tint a,b,c;\n\t\tsplit(rt,x,a,c);\n\t\tsplit(a,x-1,a,b);\n\t\tb=merge(son[b][0],son[b][1]);\n\t\trt=merge(merge(a,b),c);\n\t}\n\tint rank(int x)\n\t{\n\t\tint a,b;\n\t\tsplit(rt,x-1,a,b);\n\t\tint ans=siz[a]+1;\n\t\trt=merge(a,b);\n\t\treturn ans;\n\t}\n\tint mink(int k,int i)\n\t{\n\t\tint hh=siz[son[i][0]]+1;\n\t\tif(hh==k) return w[i];\n\t\tif(hh>k) return mink(k,son[i][0]);\n\t\treturn mink(k-hh,son[i][1]);\n\t}\n\tint pre(int x)\n\t{\n\t\tint a,b;\n\t\tsplit(rt,x-1,a,b);\n\t\tint ans=mink(siz[a],a);\n\t\trt=merge(a,b);\n\t\treturn ans;\n\t}\n\tint nxt(int x)\n\t{\n\t\tint a,b;\n\t\tsplit(rt,x,a,b);\n\t\tint ans=mink(1,b);\n\t\trt=merge(a,b);\n\t\treturn ans;\n\t}\n}Tree3;//\u4ee5\u4e0a\u662fFhq Treap\n\n//----------------------------zz\u5206\u5272\u7ebf--------------------------------\n\nint main()\n{\n\tsrand(time(0));\n\tint choose=rand()%3+1;\n\tm=read();\n\tif(choose==1)\n\t{\n\t\tfor(int i=1;i<=m;i++)\n\t\t  {\n\t\t  \tint op=read(),x=read();\n\t\t  \tif(op==1) Tree1.ins(x);\n\t\t  \tif(op==2) Tree1.cut(x);\n\t\t  \tif(op==3) printf(\"%d\\n\",Tree1.rank(x));\n\t\t  \tif(op==4) printf(\"%d\\n\",Tree1.mink(x));\n\t\t  \tif(op==5) printf(\"%d\\n\",Tree1.pre(x));\n\t\t  \tif(op==6) printf(\"%d\\n\",Tree1.nxt(x));\n\t\t  }\n\t}\n\telse if(choose==2)\n\t{\n\t\tfor(int i=1;i<=m;i++)\n\t\t  {\n\t\t\tint op=read(),x=read();\n\t\t  \tif(op==1) Tree2.ins(x,rt);\n\t\t  \tif(op==2) Tree2.cut(x,rt);\n\t\t  \tif(op==3) printf(\"%d\\n\",Tree2.rank(x,rt));\n\t\t  \tif(op==4) printf(\"%d\\n\",Tree2.mink(x,rt));\n\t\t  \tif(op==5) printf(\"%d\\n\",Tree2.pre(x,rt));\n\t\t  \tif(op==6) printf(\"%d\\n\",Tree2.nxt(x,rt));\n\t\t  }\n\t}\n\telse if(choose==3)\n\t{\n\t\tfor(int i=1;i<=m;i++)\n\t\t  {\n\t\t  \tint op=read(),x=read();\n\t\t  \tif(op==1) Tree3.ins(x);\n\t\t  \tif(op==2) Tree3.cut(x);\n\t\t  \tif(op==3) printf(\"%d\\n\",Tree3.rank(x));\n\t\t  \tif(op==4) printf(\"%d\\n\",Tree3.mink(x,rt));\n\t\t  \tif(op==5) printf(\"%d\\n\",Tree3.pre(x));\n\t\t  \tif(op==6) printf(\"%d\\n\",Tree3.nxt(x));\n\t\t  }\n\t}\n\treturn 0;\n}\n```\n### [\u535a\u5ba2](https://a-failure.github.io/2018/03/14/%E5%B9%B3%E8%A1%A1%E6%A0%91%E6%A8%A1%E6%9D%BF+Fhq_Treap%E7%95%A5%E8%A7%A3/)",
        "postTime": 1520565564,
        "uid": 49206,
        "name": "Dispwnl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u697c\u4e0b\u4e5f\u6709\u5199pbds\u7684\uff0c\u4f46\u662f\u9700\u8981n^20\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fd8\u662f\u6709\u53ef\u80fd\u649ehash\uff08\u5982\u679c\u6570\u636e\u591f\u5927\uff09\u3002\u4e8e\u662f\u8fd9\u91cc\u7ed9\u51fa\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff0c0%\u7684\u51e0\u7387\u649ehash\u3002\n\n\u65b9\u6cd5\u662f\u7528Node\uff0c\u7136\u540e\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u8f93\u5165\u65f6\u95f4\uff0c\u7136\u540e\u6ce8\u610f\u5230\u76f8\u540c\u6570\u636e\u4e0b\u8f93\u5165\u65f6\u95f4\u5fc5\u5b9a\u4e0d\u540c\u3002\n\n\u540c\u65f6\u6309\u7167\u8fd9\u4e2a\u6b21\u5e8f\u53ef\u4ee5\u65b9\u4fbf\u7684lower/upper\\_bound\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\ninline char get_char(){\n    static char buf[5000001], *p1 = buf, *p2 = buf + fread(buf, 1, 5000000, stdin);\n    return p1 == p2 ? EOF : *p1 ++;\n}\ninline int read(){\n    int num = 0;\n    char c, sf = 1;\n    while (isspace(c = get_char()));\n    if(c == '-') sf = -1, c = get_char();\n    while (num = num * 10 + c - 48, isdigit(c = get_char()));\n    return num * sf;\n}\nstruct Node{\n    int v, id;\n    Node(int a, int b){\n        v = a, id = b;\n    }\n    bool operator < (Node tar) const {\n        return v == tar.v ? id < tar.id : v < tar.v;\n    }\n};\ntypedef tree<Node, null_type, less<Node>, rb_tree_tag, tree_order_statistics_node_update> Tree;\nTree stl_tree;\nTree::iterator it;\nint main(){\n    int n = read();\n    for(int i = 1; i <= n; i++){\n        int cons = read(), tar = read();\n        switch(cons){\n            case 1:\n                stl_tree.insert((Node){tar, i});\n                break;\n            case 2:\n                it = stl_tree.lower_bound((Node{tar, 1}));\n                stl_tree.erase(it);\n                break;\n            case 3:\n                printf(\"%d\\n\", stl_tree.order_of_key(Node{tar, 1}) + 1);\n                break;\n            case 4:\n                printf(\"%d\\n\", stl_tree.find_by_order(tar - 1) -> v);\n                break;\n            case 5:\n                it = stl_tree.lower_bound(Node{tar, 1});\n                it--;\n                printf(\"%d\\n\", *it);\n                break;\n            case 6:\n                it = stl_tree.upper_bound(Node{tar, n});//\u6ce8\u610f\u8fd9\u4e2a\u5730\u65b9\n                printf(\"%d\\n\", *it);\n                break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1514342113,
        "uid": 43464,
        "name": "Creeper_LKF",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u7ecf\u8fc7\u4e3b\u5e2d,duck,kh\u7684\u6307\u70b9,bear\u7ec8\u4e8e\u5b66\u4f1a\u4e86fhq,\u5c31\u5199\u4e86\u4e00\u7bc7\u9898\u89e3,\u6765\u7eaa\u5ff5\u4e00\u4e0b\n\n\u9996\u5148,\u7b2c\u4e00\u4e2a\u95ee\u9898:fhq\u662f\u4ec0\u4e48?\n\nfhq\u662f\u7531fhq\u5de8\u4f6c\u53d1\u660e\u7684treap,\u5229\u7528\u5206\u88c2\u548c\u5408\u5e76,\u53ef\u4ee5\u505a\u5230\u65e0\u65cbtreap,\u53ca\u53ef\u6301\u4e45\u5316\u7b49\u591a\u9879\u529f\u80fd\n\n\n\n------------\n\n## fhq\u7684\u6838\u5fc3\u5c31\u662f\u5206\u88c2\u4e0e\u5408\u5e76\n\n### \u9996\u5148\u662f\u5408\u5e76:\n\n\u5bf9\u4e8e\u4e24\u9897\u6811t1,t2,\u6ee1\u8db3t1\u4e2d\u7684\u6240\u6709\u70b9\u5747<=t2,\u6211\u4eec\u53ef\u4ee5\u6309\u4ee5\u4e0b\u89c4\u5219\u5408\u5e76:\n\n1.\u5982\u679ct1,t2\u4e2d\u6709\u4efb\u610f\u4e00\u9897\u6811\u662f\u7a7a\u7684\u90a3\u4e48,\u76f4\u63a5\u63a5\u4e0a\u5373\u53ef\n\n2.\u5426\u5219,\u4e3a\u4e86\u4fdd\u6301\u5e73\u8861,\u6211\u4eecrand\u503c,\u6309sz[t1]:sz[t2]\u7684\u6982\u7387\u6765\u51b3\u5b9a\u662f\u5408\u5e76\u5230t1,\u8fd8\u662ft2\n\n3.\u9012\u5f52\u5408\u5e76,\u4e0a\u4f20\n\n**\u6ce8\u610f:\u56e0\u4e3at2\u7684\u70b9\u5927\u4e8et1,\u6240\u4ee5\u5408\u5e76\u4e00\u5b9a\u662ft2\u5408t1\u53f3\u5b50\u6811,t1\u5408t2\u5de6\u5b50\u6811,\u8fd8\u6709\u5728\u9012\u5f52\u5408\u5e76\u65f6\u4e5f\u8981\u6ce8\u610ft1,t2\u5927\u5c0f**\n\n**(\u7b80\u5355\u6765\u8bf4,\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u8ba9\u5c0f\u7684\u5408\u5e76\u5230\u5927\u7684\u7684\u6982\u7387\u66f4\u5927)**\n\n![\u5408\u5e76](https://cdn.luogu.com.cn/upload/image_hosting/y8d5252b.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n```cpp\n\tint hb(int t1,int t2) //\u5408\u5e76\u64cd\u4f5c\uff0c\u5fc5\u987b\u4fdd\u8bc1t1\u7684\u70b9\u90fd<=t2 \n\t{\n\t\tif(!t1||!t2) return t1+t2;\n\t\telse if((rad()%(sz[t1]+sz[t2]))<sz[t1]) //\u7136\u5b83\u671f\u671b\u5747\u644a\u5230\u4e24\u9897\u6811\u4e2d \n\t\t// < t1,t2\u7684\u671f\u671b:sz[t1]:sz[t2]   > t1,t2\u7684\u671f\u671b:sz[t2]:sz[t1]\n\t\t//\u7b80\u5355\u6765\u8bf4,\u5c31\u662f\u5c3d\u53ef\u80fd\u8ba9\u5c0f\u7684\u548c\u5230\u5927\u7684\u4e0a\u9762,\u6765\u4fdd\u8bc1\u5b83\u826f\u597d\u7684\u590d\u6742\u5ea6 \n\t\t{\n\t\t\tr[t1]=hb(r[t1],t2); //\u5c06t2\u5408\u5e76\u5230t1\u53f3\u6811\uff08t2>=t1) \n\t\t\tpup(t1);\n\t\t\treturn t1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl[t2]=hb(t1,l[t2]); //\u540c\u4e0a \n\t\t\tpup(t2);\n\t\t\treturn t2;\n\t\t}\n\t}\n```\n\n------------\n### \u7136\u540e\u662f\u5206\u88c2\n\n\u5206\u88c2\u6709\u4e24\u79cd,\u6309\u503c\u5206\u88c2\u548c\u6309\u4e2a\u6570\u5206\u88c2\n\n\u5148\u8bb2\u5206\u88c2\u7684\u603b\u4f53\u601d\u8def:\n\n\u5982\u679c\u4f60\u7684\u6811\u7a7a\u4e86,\u90a3\u4e48\u5206\u51fa\u6765\u7684\u4e5f\u4e00\u5b9a\u662f\u7a7a\u7684\n\n\u7136\u540e\u6309\u5224\u65ad\u6807\u51c6,\u9009\u62e9\u5206\u88c2\u5230\u8c01,\u9012\u5f52,\u4e0a\u4f20\n\n![\u5206\u88c2](https://cdn.luogu.com.cn/upload/image_hosting/31udk9ph.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u6309\u503c\u5206\u88c2:\u5c31\u662f\u628a\u6240\u6709<=w\u5408\u5230x\u6811\u4e0a,\u5176\u4ed6\u7684\u5408\u5230y\u6811\u4e0a\n\n```cpp\n\tvoid splitv(int k,int w,int &x,int &y) //\u6309\u503c\u5206\u88c2\uff0c\u4fdd\u8bc1x<=y , \u628a\u6240\u6709<=w\u7684\u503c\u90fd\u7ed9x,\u5269\u4e0b\u7684\u7ed9y \n\t{\n\t\tif(!k) x=y=0;\n\t\telse if(w>=v[k]) //\u6211\u8981\u7684\u503c\u6bd4\u5f53\u524d\u503c\u5927 \n\t\t{\n\t\t\tx=k; //\u5f53\u524d\u503c\u7ed9\u5c0f\u7684\uff08x\uff09 \n\t\t\tsplitv(r[k],w,r[x],y); //\u5411\u53f3\u5b50\u6811\u7ee7\u7eed\u5206\u88c2 \n\t\t\tpup(x);\n\t\t}\n\t\telse \n\t\t{\n\t\t\ty=k;\n\t\t\tsplitv(l[k],w,x,l[y]);\n\t\t\tpup(y);\n\t\t}\n\t}\n```\n\n\u6309\u4e2a\u6570\u5206\u88c2:\u5c31\u662f\u628a\u524dw\u4e2a\u5206\u5230x\u6811\u4e0a,\u5269\u4e0b\u7684\u5206\u5230y\u6811\u4e0a\n```cpp\n\tvoid splits(int k,int w,int &x,int &y) //\u6309\u4e2a\u6570\u5206\u88c2\uff0c\u4fdd\u8bc1x<=y,(x\u5c31\u662f\u90a3\u524dw\u4e2a) \n\t{\n\t\tif(!k) x=y=0;\n\t\telse if(w<=sz[l[k]]) //\u5982\u679c\u5f53\u524d\u4e2a\u6570\u591a\u4f59 \n\t\t{\n\t\t\ty=k; //\u6bd4w\u591a\uff0c\u4e00\u5b9a\u662f\u5728y\u4e0a\u7684 \n\t\t\tsplits(l[k],w,x,l[y]); //\u5411\u5de6\u5b50\u6811\u5206\u88c2 \n\t\t\tpup(y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=k;\n\t\t\tsplits(r[k],w-sz[l[k]]-1,r[x],y);\n\t\t\tpup(x);\n\t\t}\n\t}\n```\n------------\n\u6709\u4e86\u8fd9\u4e24\u4e2a\u64cd\u4f5c,\u90a3\u4e48\u5269\u4e0b\u7684\u4e5f\u6bd4\u8f83\u7b80\u5355\u4e86\n\n\n------------\n\n\u63d2\u5165:\u628a\u6240\u6709<=x\u7684\u5206\u88c2\u5230\u4e00\u9897\u6811a\u4e0a,\u5269\u4e0b\u7684\u5728\u53e6\u4e00\u9897\u6811b\u4e0a,\u628aa,x,b\u5408\u5e76\u5373\u4e3a\u6240\u6c42\n\n```cpp\n\tvoid ins(int x) //\u63d2\u5165 \n\t{\n\t\tint t1,t2;\n\t\tsplitv(rt,x,t1,t2); //\u628a\u4e00\u68f5\u6811\u5206\u88c2\u6210\u6309x\u5206\u88c2\u6210\u4e24\u90e8\u5206 \n\t\trt=hb(hb(t1,xj(x)),t2); //\u518d\u628a\u5de6\u8fb9\u4e0ex\u5408\u5e76\uff0c\u518d\u4e0e\u53f3\u8fb9\u5408\u5e76 \n\t}\n```\n\n\n------------\n\u5220\u9664:\u628a\u6240\u6709<x\u7684\u503c\u5206\u88c2\u5230\u4e00\u9897\u6811a\u4e0a,\u5269\u4e0b\u7684\u5728b\u4e0a,\u518d\u628ab\u4e0a\u5206\u51fa\u4e00\u4e2a\u7b2c\u4e00\u5c0f\u7684\u6570,\u5373\u4e3a\u8981\u5220\u7684x,\u5269\u4e0b\u7684\u662fd,\u53ea\u8981\u628a\u4e2d\u95f4\u8fd9\u4e2ax\u5ffd\u7565,\u76f4\u63a5\u5408\u5e76a,d,\u5c31\u76f8\u5f53\u4e8e\u5220\u4e86\u4e00\u4e2ax\n```cpp\n\tvoid del(int x) //\u5220\u9664 \n\t{\n\t\tint a,b,c,d;\n\t\tsplitv(rt,x-1,a,b); //\u628a\u5b83\u5206\u6210\u4e24\u90e8\u5206\uff08x\u662f\u53f3\u8fb9\u90a3\u90e8\u5206\u7684\u6700\u5c0f\u503c\uff09 \n\t\tsplits(b,1,c,d); //\u628a\u53f3\u8fb9\u5206\u88c2\u51fa\u4e00\u4e2a\u5927\u5c0f\u4e3a1\u7684\u70b9c\uff08x\uff09\n\t\trt=hb(a,d); //\u4e0d\u7ba1c\uff0c\u76f4\u63a5\u5408\u5e76a\uff0cd\uff08\u5ffd\u7565\u4e86\u4e00\u4e2ax\uff09 \n\t}\n```\n------------\n\u5269\u4e0b\u7684\u64cd\u4f5c\u4f60\u53ef\u4ee5\u6309\u666e\u901atreap\u8fdb\u884c,\u4e5f\u53ef\u4ee5\u7528\u5206\u88c2\u5408\u5e76,\u8bfb\u8005\u81ea\u60f3\u4e0d\u96be,\u60f3\u4e0d\u51fa\u7684\u53ef\u4ee5\u770b\u4ee3\u7801,\u6ce8\u91ca\u91cc\u8bf4\u7684\u5f88\u8be6\u7ec6\n\n\n------------\n\u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\n#define il inline\nusing namespace std;\nconst int N = 1e5+5;\nil int rad(){return 1ll*rand()*19491001%19260817;}\nstruct treep\n{\n\tint l[N],r[N],sz[N],v[N];\n\tint tim,rt;\n\til void pup(int x){sz[x]=sz[l[x]]+sz[r[x]]+1;}\n\til int xj(int x)\n\t{\n\t\ttim++;\n\t\tv[tim]=x;\n\t\tsz[tim]=1;\n\t\treturn tim;\n\t}\n\tint hb(int t1,int t2) //\u5408\u5e76\u64cd\u4f5c\uff0c\u5fc5\u987b\u4fdd\u8bc1t1\u7684\u70b9\u90fd<=t2 \n\t{\n\t\tif(!t1||!t2) return t1+t2;\n\t\telse if((rad()%(sz[t1]+sz[t2]))<sz[t1]) //\u7136\u5b83\u671f\u671b\u5747\u644a\u5230\u4e24\u9897\u6811\u4e2d \n\t\t// < t1,t2\u7684\u671f\u671b:sz[t1]:sz[t2]   > t1,t2\u7684\u671f\u671b:sz[t2]:sz[t1]\n\t\t//\u7b80\u5355\u6765\u8bf4,\u5c31\u662f\u5c3d\u53ef\u80fd\u8ba9\u5c0f\u7684\u548c\u5230\u5927\u7684\u4e0a\u9762,\u6765\u4fdd\u8bc1\u5b83\u826f\u597d\u7684\u590d\u6742\u5ea6 \n\t\t{\n\t\t\tr[t1]=hb(r[t1],t2); //\u5c06t2\u5408\u5e76\u5230t1\u53f3\u6811\uff08t2>=t1) \n\t\t\tpup(t1);\n\t\t\treturn t1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl[t2]=hb(t1,l[t2]); //\u540c\u4e0a \n\t\t\tpup(t2);\n\t\t\treturn t2;\n\t\t}\n\t}\n\tvoid splitv(int k,int w,int &x,int &y) //\u6309\u503c\u5206\u88c2\uff0c\u4fdd\u8bc1x<=y , \u628a\u6240\u6709<=w\u7684\u503c\u90fd\u7ed9x,\u5269\u4e0b\u7684\u7ed9y \n\t{\n\t\tif(!k) x=y=0;\n\t\telse if(w>=v[k]) //\u6211\u8981\u7684\u503c\u6bd4\u5f53\u524d\u503c\u5927 \n\t\t{\n\t\t\tx=k; //\u5f53\u524d\u503c\u7ed9\u5c0f\u7684\uff08x\uff09 \n\t\t\tsplitv(r[k],w,r[x],y); //\u5411\u53f3\u5b50\u6811\u7ee7\u7eed\u5206\u88c2 \n\t\t\tpup(x);\n\t\t}\n\t\telse \n\t\t{\n\t\t\ty=k;\n\t\t\tsplitv(l[k],w,x,l[y]);\n\t\t\tpup(y);\n\t\t}\n\t}\n\tvoid splits(int k,int w,int &x,int &y) //\u6309\u4e2a\u6570\u5206\u88c2\uff0c\u4fdd\u8bc1x<=y,(x\u5c31\u662f\u90a3\u524dw\u4e2a) \n\t{\n\t\tif(!k) x=y=0;\n\t\telse if(w<=sz[l[k]]) //\u5982\u679c\u5f53\u524d\u4e2a\u6570\u591a\u4f59 \n\t\t{\n\t\t\ty=k; //\u6bd4w\u591a\uff0c\u4e00\u5b9a\u662f\u5728y\u4e0a\u7684 \n\t\t\tsplits(l[k],w,x,l[y]); //\u5411\u5de6\u5b50\u6811\u5206\u88c2 \n\t\t\tpup(y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=k;\n\t\t\tsplits(r[k],w-sz[l[k]]-1,r[x],y);\n\t\t\tpup(x);\n\t\t}\n\t}\n\tvoid ins(int x) //\u63d2\u5165 \n\t{\n\t\tint t1,t2;\n\t\tsplitv(rt,x,t1,t2); //\u628a\u4e00\u68f5\u6811\u5206\u88c2\u6210\u6309x\u5206\u88c2\u6210\u4e24\u90e8\u5206 \n\t\trt=hb(hb(t1,xj(x)),t2); //\u518d\u628a\u5de6\u8fb9\u4e0ex\u5408\u5e76\uff0c\u518d\u4e0e\u53f3\u8fb9\u5408\u5e76 \n\t}\n\tvoid del(int x) //\u5220\u9664 \n\t{\n\t\tint a,b,c,d;\n\t\tsplitv(rt,x-1,a,b); //\u628a\u5b83\u5206\u6210\u4e24\u90e8\u5206\uff08x\u662f\u53f3\u8fb9\u90a3\u90e8\u5206\u7684\u6700\u5c0f\u503c\uff09 \n\t\tsplits(b,1,c,d); //\u628a\u53f3\u8fb9\u5206\u88c2\u51fa\u4e00\u4e2a\u5927\u5c0f\u4e3a1\u7684\u70b9c\uff08x\uff09\n\t\trt=hb(a,d); //\u4e0d\u7ba1c\uff0c\u76f4\u63a5\u5408\u5e76a\uff0cd\uff08\u5ffd\u7565\u4e86\u4e00\u4e2ax\uff09 \n\t}\n\tint askpm(int x) //\u67e5x\u7684\u6392\u540d \n\t{\n\t\tint a,b;\n\t\tsplitv(rt,x-1,a,b); //\u88c2\u51fa\u6240\u6709\u6bd4x\u5c0f\u7684\u6570 \n\t\tint ans=sz[a]+1; //x\u6392\u540d\u4e3a\u6bd4\u5b83\u5c0f\u7684\u6570\u7684\u4e2a\u6570+1 \n\t\trt=hb(a,b); //\u628a\u6811\u5408\u5e76\u56de\u53bb \n\t\treturn ans;\n\t}\n\tint askdx(int x) //\u67e5\u7b2cx\u5927\u7684\u6570 \n\t{\n\t\tint a,b,c,d;\n\t\tsplits(rt,x-1,a,b); //\u628a\u524dx-1\u4e2a\u6570\u88c2\u51fa\u6765 \n\t\tsplits(b,1,c,d); //\u90a3\u4e48\u6ca1\u88ab\u88c2\u51fa\u6765\u7684\u6570\u4e2d\u7684\u7b2c\u4e00\u4e2a,\u4e00\u5b9a\u5c31\u662f\u7b2cx\u5927\u7684 \n\t\tint ans=v[c];\n\t\trt=hb(a,hb(c,d)); //\u628a\u6240\u6709\u88c2\u5f00\u7684\u90fd\u4f9d\u6b21\u5408\u56de\u53bb \n\t\treturn ans;\n\t}\n\tint askq(int x) //\u67e5\u524d\u9a71 \n\t{\n\t\tint a,b,c,d;\n\t\tsplitv(rt,x-1,a,b); //\u628a\u6bd4\u5b83\u5c0f\u7684\u6570\u88c2\u51fa\u6765 \n\t\tsplits(a,sz[a]-1,c,d); //\u5728\u5c0f\u7684\u4e2d\u88c2\u51fa\u6700\u5927\u7684\u4e00\u4e2a \n\t\tint ans=v[d];\n\t\trt=hb(hb(c,d),b); //\u5408\u5e76 \n\t\treturn ans;\n\t}\n\tint askh(int x) //\u67e5\u540e\u7ee7 \n\t{\n\t\tint a,b,c,d;\n\t\tsplitv(rt,x,a,b); //\u628a\u6bd4\u5b83\u5927\u7684\u88c2\u51fa\u6765 \n\t\tsplits(b,1,c,d); //\u5728\u6bd4\u5b83\u5927\u7684\u6570\u4e2d\u627e\u6700\u5c0f\u7684 \n\t\tint ans=v[c];\n\t\trt=hb(a,hb(c,d)); //\u5408\u5e76 \n\t\treturn ans;\n\t}\n}T;\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tint opt,x;\n\t\tscanf(\"%d%d\",&opt,&x);\n\t\tif(opt==1) T.ins(x);\n\t\tif(opt==2) T.del(x);\n\t\tif(opt==3) printf(\"%d\\n\",T.askpm(x));\n\t\tif(opt==4) printf(\"%d\\n\",T.askdx(x));\n\t\tif(opt==5) printf(\"%d\\n\",T.askq(x));\n\t\tif(opt==6) printf(\"%d\\n\",T.askh(x));\n\t}\n}\n```\n\u5199\u4e8e2019.12.13,\u7eaa\u5ff5\u5b66\u4f1afhq\n\n\u540c\u65f6\u7eaa\u5ff5\u5357\u4eac\u5927\u5c60\u6740",
        "postTime": 1576210761,
        "uid": 11392,
        "name": "shenbear",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "# \u66ff\u7f6a\u7f8a\u6811\n\n\u867d\u7136\u4ece\u79d1\u6280\u6811\u4e0a\u6765\u770b\u8fd9\u4e2a\u6bd4 $Splay, Treap$ \u4e4b\u6d41\u8981\u9ad8\u7aef\uff0c\u4e0d\u8fc7\u9ed1\u732b\u89c9\u5f97\u8fd9\u5176\u5b9e\u4e0d\u4ec5\u6bd4\u8fd9\u4e24\u4e2a\u597d\u7406\u89e3\uff0c\u4e5f\u66f4\u597d\u6572\u3002\n\n1.\u4f55\u4e3a\u66ff\u7f6a\u7f8a\u6811\uff1f\n\n\u4f5c\u4e3a\u4e00\u9897\u5408\u683c\u7684\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u7ef4\u62a4\u4ed6\u7684\u5e73\u8861\uff0c\u4ee5\u4fdd\u8bc1 $O(logN)$ \u7684\u590d\u6742\u5ea6\u3002\n\n\u4e3a\u4e86\u7ef4\u62a4\u6811\u7684\u5e73\u8861\uff0c\u5176\u4ed6\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u90fd\u6709\u4e00\u4e9b\u5947\u6deb\u6280\u5de7\uff0c\u4e0d\u8fc7\u5927\u591a\u6570\u6bd4\u5982 $Splay, Treap, AVL, Red\\_Black\\_Tree$ \u90fd\u662f\u901a\u8fc7\u65cb\u8f6c\u6765\u7ef4\u62a4\u7684\uff0c\u4e0d\u8fc7\u662f\u65cb\u8f6c\u7684\u4e00\u4e9b\u7ec6\u8282\u6709\u6240\u4e0d\u540c\u3002\n\n\u4f46\u662f\u66ff\u7f6a\u7f8a\u6811\u6bd4\u8f83\u725b\u903c\uff0c\u5b83\u901a\u8fc7\u5224\u65ad\u4e24\u9897\u5b50\u6811\u5e73\u4e0d\u5e73\u8861\uff0c\u5982\u679c\u4e0d\u5e73\u8861\u8d85\u8fc7\u4e86\u67d0\u4e00\u4e2a\u9650\u5ea6\uff0c\u5c31\u76f4\u63a5\u5c06\u8fd9\u9897\u5305\u542b\u81ea\u5df1\u5728\u5185\u7684\u5b50\u6811\u62cd\u6241\u4e86\u91cd\u6784\uff0c\u5f62\u6210\u4e00\u4e2a\u63a5\u8fd1\u5b8c\u7f8e\u7684\u4e8c\u53c9\u6811\u7ed3\u6784\u3002\n\n2.\u64cd\u4f5c\n\n**\u8282\u70b9\u53ca\u4fe1\u606f\uff1a**\n\n```cpp\n\tstruct node {\n\t\tint ch[2], val, size, tsize, real;\n\t} e[MAXN];\n```\n\n\u8bb0\u5f55\u4e86\u4e24\u4e2a\u513f\u5b50\u3001\u503c\u3001\u5b50\u6811\u5927\u5c0f\u3001\u771f\u5b9e\u5b50\u6811\u5927\u5c0f\u3001\u5b58\u5728\u4e0e\u5426\u3002\n\n\u8fd9\u91cc\u6709\u4e24\u4e2a $size$ \u5176\u4e2d\u5e26 $t$ \u7684\u90a3\u4e2a $t(rue) \\ size$ \u662f\u56e0\u4e3a\u66ff\u7f6a\u7f8a\u6811\u4e0d\u50cf\u662f\u522b\u7684\u6811\uff0c\u53ef\u4ee5\u8f7b\u677e\u7684\u5220\u9664\u8282\u70b9\uff0c\u53ea\u80fd\u901a\u8fc7\u6807\u8bb0\u6765\u5728\u91cd\u6784\u7684\u65f6\u5019\u5220\u9664\uff0c\u6240\u4ee5 $tsize$ \u8bb0\u5f55\u771f\u5b9e\u5b58\u5728\u7684\u8282\u70b9\u7684\u5927\u5c0f\uff0c$size$ \u5219\u662f\u628a\u771f\u5b9e\u8282\u70b9\u3001\u5220\u6389\u7684\u8282\u70b9\u90fd\u8bb0\u4e86\u8fdb\u6765\uff0c\u7528\u4e8e\u5224\u5b50\u6811\u4e2d\u5b58\u5728\u592a\u591a\u7684\u5df2\u5220\u9664\u8282\u70b9\u65f6\uff0c\u8981\u4e0d\u8981\u91cd\u6784\u3002\n\n(size \u548c tsize \u597d\u957f\u7684\u8bf4\uff0c\u5982\u679c\u4e0d\u662f\u677f\u5b50\u5176\u5b9e\u53ea\u8981\u7528\u4e00\u4e2a v \u4e00\u4e2a w \u5c31\u884c\u4e86\uff0c\u53cd\u6b63\u7ed3\u6784\u4f53\u91cc\u7684\u53d8\u91cf\u4e0d\u4f1a\u51b2\u7a81)\n\n**\u5224\u65ad\u5e73\u8861\uff1a**\n\n```cpp\n\tbool isbad(int u) {\n\t\tif (1.0 * e[u].tsize * alpha < 1.0 * e[e[u].ch[0]].tsize ||\n\t\t\t1.0 * e[u].tsize * alpha < 1.0 * e[e[u].ch[1]].tsize) \n\t\t\treturn true;\n\t\telse \n\t\t\treturn false;\n\t}\n```\n\n\u8fd9\u91cc $alpha$ \u662f\u81ea\u5df1\u5b9a\u4e49\u7684\u4e00\u4e2a\u503c\uff0c\u4e00\u822c\u6765\u8bf4 $0.7 \\sim 0.8$ \u6bd4\u8f83\u5408\u9002\uff0c\u56e0\u4e3a\u5982\u679c\u9650\u5236\u7684\u592a\u4e25\u683c\u4e86\u91cd\u6784\u6b21\u6570\u4f1a\u592a\u591a\uff0c\u5982\u679c\u592a\u4e0d\u4e25\u683c\u4e86\u4f1a\u9020\u6210\u5931\u8861\uff0c\u6240\u4ee5\u524d\u8f88\u4eec\u8bd5\u51fa\u6765\uff08\u4e5f\u53ef\u80fd\u662f\u7b97\u51fa\u6765\uff09\u7684\u8fd9\u4e2a\u503c\uff0c\u7528\u5c31\u662f\u4e86\u3002\n\n\u7136\u540e\u5c31\u662f\u5982\u679c\u4e00\u4e2a\u6811\u7684\u4e00\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u8d85\u8fc7\u4e86\u6811\u7684\u591a\u5c11\uff0c\u5c31\u5224\u65ad\u4e3a\u662f\u4e0d\u5e73\u8861\u7684\u3002\u7136\u540e\u8fd4\u5382\u91cd\u6784\u3002\n\n**\u63d2\u5165\uff1a**\n\n```cpp\n\tvoid insert(int &u, int val) {\n\t\tif (!u) {\n\t\t\tu = ++tot;\n\t\t\te[u].val = val;\n\t\t\te[u].real = e[u].size = e[u].tsize = 1;\n\t\t\te[u].ch[0] = e[u].ch[1] = 0;\n\t\t\treturn ;\n\t\t}\n\t\te[u].size++, e[u].tsize++;\n\t\tif (e[u].val >= val) insert(e[u].ch[0], val);\n\t\telse insert(e[u].ch[1], val);\n\t\tif (isbad(u)) rebuild(u);\n\t}\n```\n\n\u8fd9\u4e00\u4e2a\u5e94\u8be5\u6bd4\u8f83\u597d\u7406\u89e3\u5427\u3002\u5982\u679c\u9047\u5230\u4e00\u4e2a\u7a7a\u8282\u70b9\uff0c\u5c31\u65b0\u5efa\u4e00\u4e2a\uff0c\u7136\u540e\u521d\u59cb\u7684\u4e24\u4e2a $size$ \u90fd\u662f $1$ \uff0c\u8981\u4e0d\u7136\u5c31\u662f\u628a\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u6240\u6709\u8282\u70b9\u8bb0\u5f55\u7684 $size++$ \uff0c\u7136\u540e\u627e\u5230\u90a3\u4e00\u4e2a\u53ef\u4ee5\u5b89\u7f6e\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u4e0d\u5e73\u8861\u4e86\u5c31\u91cd\u6784\u4e00\u4e0b\u3002\n\n\u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\u6709\u4e00\u70b9\u7ec6\u8282\u4e0d\u4e00\u6837\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e00\u6b21\u63d2\u5165\u4e2d\u53ea\u8981\u627e\u5230\u5b50\u6811\u6839\u6700\u6d45\u7684\u90a3\u4e00\u9897\u4e0d\u5e73\u8861\u5b50\u6811\u91cd\u6784\uff0c\u5c31\u4e0d\u4f1a\u91cd\u590d\u91cd\u6784\u5b50\u6811\uff0c\u9632\u6b62\u9000\u5316\u5230 $log^2N$ \u3002\n\n**\u5f39\u51fa\uff1a**\n\n```cpp\n\tvoid pop_rk(int &u, int rk) {\n\t\tif (e[u].real && e[e[u].ch[0]].tsize + 1 == rk) {\n\t\t\te[u].real = 0;\n\t\t\te[u].tsize--;\n\t\t\treturn ;\n\t\t}\n\t\te[u].tsize--;\n\t\tif (e[e[u].ch[0]].tsize + e[u].real >= rk)\n\t\t\tpop_rk(e[u].ch[0], rk);\n\t\telse \n\t\t\tpop_rk(e[u].ch[1], rk - e[e[u].ch[0]].tsize - e[u].real);\n\t}\n\n\tvoid pop(int val) {\n\t\tpop_rk(root, rank(val));\n\t\tif (1.0 * e[root].size * alpha > e[root].tsize)\n\t\t\trebuild(root);\n\t}\n```\n\n\u6838\u5fc3\u4e5f\u5c31\u662f\u628a\u8def\u5f84\u4e0a\u8bb0\u5f55\u7684 $tsize--$ \u5c31\u884c\u4e86\uff0c\u5982\u679c\u65e0\u7528\u7684\u8282\u70b9\u592a\u591a\u4e86\u5c31\u91cd\u6784\u4e00\u4e0b\u3002\n\n**\u91cd\u6784\u64cd\u4f5c\uff1a**\n\n```cpp\n\tvoid dfs(int u) {\n\t\tif (!u) return ;\n\t\tdfs(e[u].ch[0]);\n\t\tif (e[u].real) cur[++cp] = u;\n\t\tdfs(e[u].ch[1]);\n\t}\n\n\tvoid build(int l, int r, int &u) {\n\t\tint mid = l + r >> 1;\n\t\tu = cur[mid];\n\t\tif (l == r) {\n\t\t\te[u].ch[0] = e[u].ch[1] = 0;\n\t\t\te[u].size = e[u].tsize = 1;\n\t\t\treturn ;\n\t\t}\n\t\tif (l < mid) build(l, mid - 1, e[u].ch[0]);\n\t\telse e[u].ch[0] = 0;\n\t\tbuild(mid + 1, r, e[u].ch[1]);\n\t\te[u].size = e[e[u].ch[0]].size + e[e[u].ch[1]].size + 1;\n\t\te[u].tsize = e[e[u].ch[0]].tsize + e[e[u].ch[1]].tsize + e[u].real;\n\t}\n\n\tvoid rebuild(int &u) {\n\t\tcp = 0;\n\t\tdfs(u);\n\t\tif (cp) build(1, cp, u);\n\t\telse u = 0;\n\t}\n```\n\n\u5148\u8bf4 $DFS$ \uff0c\u7531\u4e8e\u4e8c\u53c9\u641c\u7d22\u6811\u6027\u8d28\uff0c\u4e2d\u5e8f\u904d\u5386\u9012\u589e\uff0c\u6240\u4ee5\u5c31\u628a\u8fd9\u4e00\u4e2a\u5b50\u6811\u4e2d\u5e8f\u904d\u5386\u4e00\u904d\uff0c\u5c31\u5b8c\u6210\u4e86\u62cd\u6241\u64cd\u4f5c\u3002\n\n\u7136\u540e\u770b\u770b $build$\uff0c\u5176\u5b9e\u548c\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\u5dee\u4e0d\u591a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u83b7\u5f97\u4e00\u9897\u5c3d\u91cf\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u4e86\uff0c\u8981\u6ce8\u610f\u8981\u5224 $l = mid$ \u7684\u60c5\u51b5\uff0c\u56e0\u4e3a $l != r$ \u65f6\u628a $mid$ \u4f5c\u4e3a\u7236\u8282\u70b9\u540e\u53ef\u80fd\u4f1a\u51fa\u73b0 $mid$ \u5de6\u8fb9\u5e8f\u5217\u4e3a\u7a7a\u7684\u60c5\u51b5\uff0c\u8fd9\u548c\u7ebf\u6bb5\u6811\u6709\u4e00\u4e22\u4e22\u4e0d\u540c\u3002\n\n**\u8be2\u95ee\uff1a**\n\n\u7565\uff0c\u8fd9\u4e9b\u548c\u57fa\u672c\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u6ca1\u4ec0\u4e48\u5dee\u522b\uff0c\u7ed3\u5408\u4ee3\u7801\u770b\u770b\u5c31\u884c\u3002\n\n$p.s.$\u5176\u5b9e\u8fd9\u4e00\u4efd\u4ee3\u7801\u8fd8\u6709\u4e00\u4e9b\u4e0d\u5b8c\u5907\u7684\u5730\u65b9\uff0c\u6bd4\u5982\u6ca1\u6709\u5185\u5b58\u6c60\u91cd\u590d\u4f7f\u7528\u5185\u5b58\uff0c\u6bd4\u5982\u6ca1\u6709\u4f7f\u7528\u6307\u9488\uff0c\u4e0d\u8fc7\u600e\u4e48\u8bf4\u8fd9\u90fd\u662f\u4e00\u4efd\u5b8c\u6574\u7684\u66ff\u7f6a\u7f8a\u4e86\u3002\n\n[P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problem/P3369)\n\n```cpp\n// Scapegoat Tree\n#include <bits/stdc++.h>\nconst double alpha = 0.7;\n#define MAXN 2000001\n\ninline int read() {\n\tint x = 0, f = 0; char c = getchar();\n\tfor (; c < '0'; c = getchar()) if (c == '-') f = 1;\n\tfor (; c > '.'; c = getchar()) x = (x << 3) + (x << 1) + (c ^ 48);\n\treturn f ? -x : x;\n}\n\nnamespace ScapegoatTree {\n\tstruct node {\n\t\tint ch[2], val, size, tsize, real, fa;\n\t} e[MAXN];\n\tint cur[MAXN];\n\tint root, tot, cp, cnt, rb;\n\t\n\tint id(int u) {\n\t\treturn e[e[u].fa].ch[1] == u;\t\n\t}\n\t\n\tbool isbad(int u) {\n\t\tif (1.0 * e[u].tsize * alpha + 5 < 1.0 * e[e[u].ch[0]].tsize ||\n\t\t\t1.0 * e[u].tsize * alpha + 5 < 1.0 * e[e[u].ch[1]].tsize) \n\t\t\treturn true;\n\t\telse \n\t\t\treturn false;\n\t}\n\n\tvoid dfs(int u) {\n\t\tif (!u) return ;\n\t\tdfs(e[u].ch[0]);\n\t\tif (e[u].real) cur[++cp] = u;\n\t\tdfs(e[u].ch[1]);\n\t}\n\n\tvoid build(int l, int r, int &u, int fa = 0) {\n\t\tint mid = l + r >> 1;\n\t\tu = cur[mid];\n\t\te[u].fa = fa;\n\t\tif (l == r) {\n\t\t\te[u].ch[0] = e[u].ch[1] = 0;\n\t\t\te[u].size = e[u].tsize = 1;\n\t\t\treturn ;\n\t\t}\n\t\tif (l < mid) build(l, mid - 1, e[u].ch[0], u);\n\t\telse e[u].ch[0] = 0;\n\t\tbuild(mid + 1, r, e[u].ch[1], u);\n\t\te[u].size = e[e[u].ch[0]].size + e[e[u].ch[1]].size + 1;\n\t\te[u].tsize = e[e[u].ch[0]].tsize + e[e[u].ch[1]].tsize + e[u].real;\n\t}\n\n\tvoid rebuild(int &u) {\n\t\tcp = 0;\n\t\tdfs(u);\n\t\tif (cp) build(1, cp, u);\n\t\telse u = 0;\n\t}\n\n\tvoid insert(int &u, int val) {\n\t\tif (!u) {\n\t\t\tu = ++tot;\n\t\t\te[u].val = val;\n\t\t\te[u].real = e[u].size = e[u].tsize = 1;\n\t\t\te[u].ch[0] = e[u].ch[1] = 0;\n\t\t\treturn ;\n\t\t}\n\t\te[u].size++, e[u].tsize++;\n\t\tif (e[u].val >= val) insert(e[u].ch[0], val);\n\t\telse insert(e[u].ch[1], val);\n\t\tif (isbad(u)) rb = u;\n\t}\n\n\tint kth(int k) {\n\t\tfor (int u = root; u; ) {\n\t\t\tif (e[u].real && e[e[u].ch[0]].tsize + 1 == k)\n\t\t\t\treturn e[u].val;\n\t\t\tif (e[e[u].ch[0]].tsize >= k)\n\t\t\t\tu = e[u].ch[0];\n\t\t\telse \n\t\t\t\tk -= e[e[u].ch[0]].tsize + e[u].real,\n\t\t\t\tu = e[u].ch[1];\n\t\t}\n\t}\n\n\tint rank(int val) {\n\t\tint ans = 1;\n\t\tfor (int u = root; u; ) {\n\t\t\tif (e[u].val >= val)\n\t\t\t\tu = e[u].ch[0];\n\t\t\telse \n\t\t\t\tans += e[e[u].ch[0]].tsize + e[u].real,\n\t\t\t\tu = e[u].ch[1];\n\t\t}\n\t\treturn ans;\n\t}\n\n\tvoid pop_rk(int &u, int rk) {\n\t\tif (e[u].real && e[e[u].ch[0]].tsize + 1 == rk) {\n\t\t\te[u].real = 0;\n\t\t\te[u].tsize--;\n\t\t\treturn ;\n\t\t}\n\t\te[u].tsize--;\n\t\tif (e[e[u].ch[0]].tsize + e[u].real >= rk)\n\t\t\tpop_rk(e[u].ch[0], rk);\n\t\telse \n\t\t\tpop_rk(e[u].ch[1], rk - e[e[u].ch[0]].tsize - e[u].real);\n\t}\n\n\tvoid pop(int val) {\n\t\tpop_rk(root, rank(val));\n\t\tif (1.0 * e[root].size * alpha > e[root].tsize)\n\t\t\trebuild(root);\n\t}\n};\nusing namespace ScapegoatTree;\n\nint main() {\n\tint opt, x, Q;\n\tQ = read();\n\twhile (Q--) {\n\t\topt = read(); x = read();\n\t\tswitch(opt) {\n\t\t\tcase 1: \n\t\t\t\tinsert(root, x); \n\t\t\t\tif (rb) {\n\t\t\t\t\trebuild(rb == root ? root : e[e[rb].fa].ch[id(rb)]);\n\t\t\t\t\trb = 0;\t\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2: pop(x); break;\n\t\t\tcase 3: printf(\"%d\\n\", rank(x)); break;\n\t\t\tcase 4: printf(\"%d\\n\", kth(x)); break;\n\t\t\tcase 5: printf(\"%d\\n\", kth(rank(x) - 1)); break;\n\t\t\tcase 6: printf(\"%d\\n\", kth(rank(x + 1))); break;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1574442794,
        "uid": 11956,
        "name": "\u4e94\u66f4\u7409\u7483",
        "ccfLevel": 0,
        "title": "[\u79d1\u6280\u70b9] \u66ff\u7f6a\u7f8a\u6811"
    },
    {
        "content": "$\\sf\\large\\text{Size Balanced Tree}$(\u8282\u70b9\u5927\u5c0f\u5e73\u8861\u6811\uff0c\u4e0b\u7b80\u79f0SBT)\u662f\u9648\u542f\u5cf0\u5728WC2007\u63d0\u51fa\u7684\u4e00\u79cd\u65b0\u578b\u5e73\u8861\u6811\u3002\n\nSBT\u7684\u9ad8\u5ea6\u4e3alog n\uff0c\u5176\u6838\u5fc3\u64cd\u4f5cmaintain()\u590d\u6742\u5ea6O(1)\uff0c\u5176\u4ed6\u64cd\u4f5c\u5747\u4e3aO(log n)\uff0c\u6240\u4ee5\u662f\u5e73\u8861\u6811\u4e2d\u975e\u5e38\u4f18\u79c0\u7684\u4e00\u79cd\u3002\u5176\u4e3b\u8981\u901a\u8fc7\u5b50\u6811\u5927\u5c0f\u6765\u7ef4\u6301\u5176\u5e73\u8861\u6027\u8d28\u3002\n\n\u548c\u5176\u4ed6\u5e73\u8861\u6811\u4e00\u6837\uff0cSBT\u652f\u6301\u5927\u90e8\u5206\u8f83\u4e3a\u5e38\u89c4\u7684\u64cd\u4f5c\uff1a\n\n* \"\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\"\u5728\u4e0b\u6587\u4e2d\u7b80\u79f0\u4e3a\"x\u5b50\u6811\"\n\n```cpp\ninsert(x,val):\u5411x\u5b50\u6811\u63d2\u5165\u503c\u4e3aval\u7684\u7ed3\u70b9\ndel(x,val):\u5220\u9664x\u5b50\u6811\u4e2d\u503c\u4e3aval\u7684\u7ed3\u70b9\nfind(x,val):\u67e5\u627ex\u5b50\u6811\u4e2d\u503c\u4e3aval\u7684\u7ed3\u70b9\nrank(x,val):\u8fd4\u56dex\u5b50\u6811\u4e2dval\u7684\u6392\u540d\nkth(x,k):\u8fd4\u56dex\u5b50\u6811\u4e2d\u6392\u540d\u7b2ck\u7684\u7ed3\u70b9(\u5927\u5c0f\u6392\u5e8f\u5747\u53ef)\npre(x,val):\u8fd4\u56dex\u5b50\u6811\u4e2dval\u7684\u524d\u9a71\nsuc(x,val):\u8fd4\u56dex\u5b50\u6811\u4e2dval\u7684\u540e\u7ee7\n```\n\n$\\sf\\large\\text{1.SBT\u7684\u7ed3\u70b9\u5b9a\u4e49}$\n\n```cpp\n#define ls(x) t[x].l\n#define rs(x) t[x].r\n//\u4e0b\u6587\u4e2d\u7684ls,rs\u5747\u4e3a\u6b64\u5904\u5b8f\u5b9a\u4e49\nstruct SBT\n{\n\tint l;//\u5de6\u5b50\u6811\n\tint r;//\u53f3\u5b50\u6811\n\tint val;//\u503c\n\tint siz;//\u5b50\u6811\u5927\u5c0f\n}t[maxn];\n```\n\nSBT\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u6027\u8d28\u9700\u8981\u7ef4\u62a4:\u67d0\u5b50\u6811\u7684\u5927\u5c0f\u5927\u4e8e\u7b49\u4e8e\u5176\u5144\u5f1f\u5b50\u6811\u7684\u5927\u5c0f\u3002\n\n\u76f4\u89c2\u5199\u51fa\u6765\u5c31\u662f\uff1a\n\n```cpp\nt[ls(i)].siz>=max(t[rs(rs(x))].siz,t[ls(rs(x))].siz);\nt[rs(i)].siz>=max(t[ls(ls(x))].siz,t[rs(ls(x))].siz);\n```\n\n$\\sf\\large\\text{2.SBT\u7684\u5de6\u53f3\u65cb}$\n\nSBT\u4e5f\u662f\u9700\u8981\u65cb\u8f6c\u7684\uff0c\u4e14\u540c\u6837\u5206\u4e3a\u5de6\u53f3\u65cb\u4e24\u79cd\u3002\n\n![](https://i.loli.net/2019/10/20/MU1AmnYzRbjoV6c.png)\n\n\u6211\u4eec\u5217\u51fa\u65cb\u8f6c\u524d\u540e\u7684\u72b6\u6001\uff0c\u5373\n\n```cpp\n\u5de6\u65cb\u524d:\n\u6839:rt\t\u5de6\u5b50\u6811\u7684\u6839:L\n\u53f3\u5b50\u6811\u7684\u6839:R_rt\t\u53f3\u5b50\u6811\u7684\u5b50\u6811:R_l,R_r\n\u5de6\u65cb\u540e:\n\u6839:R_rt\t\u53f3\u5b50\u6811\u7684\u6839:R_r\n\u5de6\u5b50\u6811\u7684\u6839:rt\t\u5de6\u5b50\u6811\u7684\u5b50\u6811:L,R_l\n\n\u53f3\u65cb\u524d:\n\u6839:rt\t\u53f3\u5b50\u6811\u7684\u6839:R\n\u5de6\u5b50\u6811\u7684\u6839:L_rt\t\u53f3\u5b50\u6811\u7684\u5b50\u6811:L_l,L_r\n\u53f3\u65cb\u540e:\n\u6839:L_rt\t\u5de6\u5b50\u6811\u7684\u6839:L_l\n\u53f3\u5b50\u6811\u7684\u6839:rt\t\u53f3\u5b50\u6811\u7684\u5b50\u6811:L_r,R\n```\n\n\u5de6\u53f3\u65cb\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\nvoid lrot(int &x)\n{\n\tint y=rs(x);\n\trs(x)=ls(y);\n\tls(y)=x;\n\tt[y].siz=t[x].siz;\n\tt[x].siz=t[ls(x)].siz+t[rs(x)].siz+1;\n\tx=y;\n}\n\nvoid rrot(int &x)\n{\n\tint y=ls(x);\n\tls(x)=rs(y);\n\trs(y)=x;\n\tt[y].siz=t[x].siz;\n\tt[x].siz=t[ls(x)].siz+t[rs(x)].siz+1;\n\tx=y;\n}\n```\n\n$\\sf\\large\\text{3.SBT\u7684\u7ef4\u62a4}$\n\n\u9996\u5148\uff0c\u5047\u8bbe\u4e00\u682a\u6ee1\u8db3\u6761\u4ef6\u7684SBT\u957f\u8fd9\u6837\uff1a\n\n![](https://i.loli.net/2019/10/20/khYEgfinPvxerM3.png)\n\n\u6b64\u65f6\u6709A.siz,B.siz\u2264R.siz\u5e76\u4e14C.siz,D.siz\u2264L.siz\n\n\u6bcf\u5f53\u63d2\u5165\u4e00\u4e2a\u503c\u7684\u65f6\u5019\uff0c\u5e73\u8861\u6811\u7684\u5e73\u8861\u6027\u5c31\u53ef\u80fd\u88ab\u6253\u7834\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4f7f\u7528O(1)\u7684`maintain(x)`\u5bf9x\u5b50\u6811\u8fdb\u884c\u4fee\u590d\u64cd\u4f5c\u3002\n\n\u63d2\u5165\u540e\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u7684\u56db\u79cd\u60c5\u51b5:\n\n```cpp\n* t[ls(ls(x))].siz>t[rs(x)].siz\n* t[ls(rs(x))].siz>t[rs(x)].siz\n* t[rs(rs(x))].siz>t[ls(x)].siz\n* t[rs(ls(x))].siz>t[ls(x)].siz\n```\n\n\u76f4\u63a5\u5206\u7c7b\u5904\u7406\u4f1a\u5f88\u590d\u6742\u3002\u4f46SBT\u7684\u5bf9\u79f0\u6027\u8d28\u4f7f\u6211\u4eec\u53ea\u7528\u8ba8\u8bba\u4e24\u79cd\u60c5\u51b5\uff1a\n\n$\\sf 1.t[ls(ls(x))].siz>t[rs(x)].siz$\n\n\u770b\u5230\u4e0a\u56fe\uff0c\u5bf9\u4e8eT\u5b50\u6811\uff0c\u6b64\u65f6\u7684\u60c5\u51b5\u5c31\u662fA.siz>R.siz\uff0c\u663e\u7136\u6b64\u65f6\u5c31\u5bfc\u81f4\u5e73\u8861\u6027\u8d28\u53d7\u635f\u3002\n\n\u7b2c\u4e00\u6b65\uff0c\u6211\u4eec\u5148\u5c06\u5176\u53f3\u65cb\uff0c\u5f97\u5230\u4e0b\u9762\u8fd9\u682a\u53ef\u80fd\u4ecd\u7136\u4e0d\u6ee1\u8db3\u6027\u8d28\u7684\u6811\uff1a\n\n![](https://i.loli.net/2019/10/20/AGUZCcN69DI2kjo.png)\n\n\u4e4b\u6240\u4ee5\u8bf4\u53ef\u80fd\u4ecd\u4e0d\u6ee1\u8db3\u6027\u8d28\uff0c\u662f\u56e0\u4e3aC.siz>B.siz\u6216D.siz>B.siz\u7684\u60c5\u51b5\u53ef\u80fd\u53d1\u751f\uff0c\u6240\u4ee5\u6709\u5fc5\u8981\u518d\u6b21\u4f7f\u7528maintain(T)\u3002\u8fd9\u6837\u4e00\u6765\uff0cL\u7684\u53f3\u5b50\u6811\u5c31\u4f1a\u88ab\u591a\u6b21\u8c03\u6574\uff0c\u4e0d\u8fc7\u522b\u62c5\u5fc3\uff0c\u6bcf\u6b21\u8c03\u6574\u90fd\u662fO(1)\u7684\u3002\n\n$\\sf 1.t[rs(ls(x))].siz>t[rs(x)].siz$\n\n\uff08\u4e3a\u4e86\u76f4\u89c2\uff0c\u6b64\u5904\u589e\u52a0\u7ed3\u70b9\u6570\uff09\u4e0a\u8ff0\u60c5\u51b5\u5728\u4e0b\u56fe\u4e2d\u8868\u793a\u4e3a\uff1aB.siz>R.siz\n\n![](https://i.loli.net/2019/10/20/8VOo7kwPWxZFQCT.png)\n\n\u90a3\u4e48\u5bf9\u79f0\u5730\uff0c\u6211\u4eec\u5148\u8fdb\u884c\u5de6\u65cb\uff0c\u5f97\u5230\uff1a\n\n![](https://i.loli.net/2019/10/20/TMjQJtFUi1aRBXl.png)\n\n\u4e0d\u540c\u7684\u662f\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fd8\u8981\u8fdb\u884c\u4e00\u6b21\u53f3\u65cb\uff0c\u5f97\u5230:\n\n![](https://i.loli.net/2019/10/20/rsWMngUahG2qvZw.png)\n\n\u6709\u540c\u5b66\u53ef\u80fd\u5c31\u4f1a\u95ee\u4e86\uff1a\u5de6\u65cb\u53f3\u65cb\u8fc7\u540e\u8fd9\u68f5\u6811\u5c31\u5f88\u4e0d\u7a33\u5b9a\u4e86\uff0c\u600e\u4e48\u529e\uff1f\n\n\u7b54\uff1a\u6ca1\u4e8b\uff0c\u81f3\u5c11\u56fe\u4e2d\u7684\u5c0f\u5b50\u6811\u8fd8\u662f\u6ee1\u8db3\u6027\u8d28\u7684\uff0c\u6240\u4ee5\u53ea\u8981maintain\u4e00\u4e0bL\u548cT\u5c31\u53ef\u4ee5\u8ba9L,T\u5b50\u6811\u5e73\u8861\u3002\u6700\u540e\u518d\u6765\u4e00\u6b21maintain(B)\u5373\u53ef\u3002\n\n\u60c5\u51b53,4\u4e0e\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\u5206\u522b\u76f8\u53cd\uff0c\u5bf9\u5e94\u64cd\u4f5c\u5373\u53ef\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\u3002\n\nmaintain\u91c7\u7528\u9012\u5f52\u5b9e\u73b0\uff0c\u5177\u6709\u4e00\u5b9a\u7684\u5bf9\u79f0\u7f8e\u611f\u3002\n\n```cpp\nvoid maintain(int &x,bool lr)\n{\n\tif(lr)//\u5de6\u8fb9\n\t{\n\t\tif(t[ls(ls(x))].siz>t[rs(x)].siz)//#1\n\t\t{\n\t\t\trrot(x);\n\t\t}\n\t\telse if(t[rs(ls(x))].siz>t[rs(x)].siz)//#2\n\t\t{\n\t\t\tlrot(ls(x));\n\t\t\trrot(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn ;\n\t\t}\n\t}\n\telse//\u53f3\u8fb9\n\t{\n\t\tif(t[rs(rs(x))].siz>t[ls(x)].siz)//#3\n\t\t{\n\t\t\tlrot(x);\n\t\t}\n\t\telse if(t[ls(rs(x))].siz>t[ls(x)].siz)//#4\n\t\t{\n\t\t\trrot(rs(x));\n\t\t\tlrot(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn ;\n\t\t}\n\t}\n\tmaintain(ls(x),1);\n\tmaintain(rs(x),0);\n\tmaintain(x,0);\n\tmaintain(x,1);\n}\n```\n\n$\\sf\\large\\text{4.\u63d2\u5165\u5143\u7d20}$\n\nSBT\u7684\u63d2\u5165\u548c\u5176\u4ed6\u5e73\u8861\u6811\u57fa\u672c\u4e00\u81f4,\u53ea\u662f\u5411\u975e\u7a7a\u5b50\u6811\u63d2\u5165\u5143\u7d20\u65f6\u8981maintain\u4e00\u4e0b:\n\n```cpp\nvoid insert(int &x,int val)\n{\n\tif(x==0)\n\t{\n\t\tx=++cnt;\n\t\tls(x)=rs(x)=0;\n\t\tt[x].siz=1;\n\t\tt[x].val=val;\n\t}\n\telse\n\t{\n\t\tt[x].siz++;\n\t\tif(val<t[x].val)\n\t\t{\n\t\t\tinsert(ls(x),val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinsert(rs(x),val);\n\t\t}\n\t\tmaintain(x,val<t[x].val);\n\t}\n}\n```\n\n$\\sf\\large\\text{5.\u67e5\u627e\u524d\u9a71\\&\u540e\u7ee7}$\n\n\u67e5\u627e\u524d\u9a71\u51fd\u6570pre()\uff0c\u6211\u4eec\u4f20\u5165\u4e09\u4e2a\u53c2\u6570\uff1a\n\n* x:\u5f53\u524d\u5b50\u6811\n* p:\u4fdd\u5b58\u7684\u524d\u9a71\u7ed3\u70b9\n* val:\u67e5\u627e\u503c\n\n```cpp\nint pre(int &x,int p,int val)\n{\n\tif(!x)\n\t{\n\t\treturn p;\n\t}\n\tif(t[x].val>=val)\n\t{\n\t\treturn pre(ls(x),p,val);\n\t}\n\telse\n\t{\n\t\treturn pre(rs(x),x,val);\n\t}\n}\n```\n\n\u540e\u7ee7\u540c\u7406\uff1a\n\n```cpp\nint suc(int &x,int p,int val)\n{\n\tif(!x)\n\t{\n\t\treturn p;\n\t}\n\tif(t[x].val>val)\n\t{\n\t\treturn suc(ls(x),x,val);\n\t}\n\telse\n\t{\n\t\treturn suc(rs(x),p,val);\n\t}\n}\n```\n\n$\\sf\\large\\text{6.\u5220\u9664\u5143\u7d20}$\n\n\u5220\u9664\u5143\u7d20\u7684\u64cd\u4f5c\u4e0eBST\u7684\u5220\u9664\u57fa\u672c\u4e00\u81f4\u3002\u5220\u9664\u4e4b\u540emaintain\u4e5f\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u5176\u539f\u56e0\u662f\uff1a\n\n>\u867d\u7136\u4e0d\u80fd\u4fdd\u8bc1\u5220\u5b8c\u540e\u8fd8\u662fSBT\uff0c\u4f46\u662f\u6811\u7684\u6700\u5927\u6df1\u5ea6\u4e0d\u4f1a\u53d8\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5e76\u4e0d\u53d8\u5316\uff0cmaintain\u5c31\u663e\u5f97\u591a\u4f59\u4e86\u3002\n\n\u5220\u9664\u6709\u4e24\u79cd\u4e3b\u6d41\u65b9\u6cd5\uff0c\u5747\u53ef\u4f7f\u7528\uff1a\n\n1.\u540e\u7ee7\u66ff\u6362\n\n```cpp\nint del(int &x,int val)\n{\n\tt[x].siz--;\n\tif(val>t[x].val)\n\t{\n\t\tdel(rs(x),val);\n\t\treturn ;\n\t}\n\telse if(val<t[x].val)\n\t{\n\t\tdel(ls(x),val);\n\t\treturn ;\n\t}\n\t\n\tif(ls(x)&&!rs(x))\n\t{\n\t\tint reg=x;\n\t\tx=ls(x);\n\t\treturn reg;\n\t}\n\telse if(!ls(x)&&rs(x))\n\t{\n\t\tint reg=x;\n\t\tx=rs(x);\n\t\treturn reg;\n\t}\n\telse if(!ls(x)&&!rs(x))\n\t{\n\t\tint reg=x;\n\t\tx=0;\n\t\treturn reg;\n\t}\n\telse\n\t{\n\t\tint reg=rs(x);\n\t\twhile(ls(res))\n\t\t{\n\t\t\treg=ls(reg);\n\t\t}\n\t\tt[x].val=t[reg].val;\n\t\tdel(rs(x),t[reg].val);\n\t}\n}//reg\u662f\u4e34\u65f6\u6682\u5b58\u53d8\u91cf\n```\n\n2.\u524d\u9a71\u66ff\u6362\n\n\n```cpp\n\nint del(int &x,int val)\n{\n\tint reg;\n\tt[x].size--;\n\tif((val==t[x].val)||(val<t[x].val&&!ls(x))||(val>t[x].val&&!rs(x)))\n\t{\n\t\treg=t[x].val;\n\t\tif(ls(x)&&rs(x))\n\t\t{\n\t\t\tt[x].val=del(ls(x),t[x].val+1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=ls(x)+rs(x);\n\t\t}\n\t}\n\telse if(val>t[x].val)\n\t{\n\t\treg=del(rs(x),val);\n\t}\n\telse if(val<t[x].val)\n\t{\n\t\treg=del(ls(x),val);\n\t}\n\treturn reg;\n}\n```\n\n$\\sf\\large\\text{7.\u4e00\u7cfb\u5217\u7684\u67e5\u8be2\u64cd\u4f5c}$\n\n1.\u6700\u503c\u67e5\u8be2(\u5355\u5411\u722c\u6811)\n\n```cpp\nint extremum(int x,bool minmax)\n{\n\tif(minmax)//\u6700\u5c0f\u503c\n\t{\n\t\twhile(ls(x))\n\t\t{\n\t\t\tx=ls(x);\n\t\t}//\u4e00\u76f4\u5411\u5de6\u722c\n\t}\n\telse//\u6700\u5927\u503c\n\t{\n\t\twhile(rs(x))\n\t\t{\n\t\t\tx=rs(x);\n\t\t}//\u4e00\u76f4\u5411\u53f3\u722c\n\t}\n\treturn t[x].val;\n}\n```\n\n2.\u67e5\u8be2\u7b2ck\u5c0f\n\n```cpp\nint kth(int &x,int k)\n{\n\tint cur=t[ls(x)].siz+1;\n\tif(cur==k)\n\t{\n\t\treturn t[x].val;\n\t}\n\telse if(cur>k)\n\t{\n\t\treturn kth(ls(x),k);\n\t}\n\telse\n\t{\n\t\treturn kth(rs(x),k-cur);\n\t}\n}\n```\n\n\u82e5\u8981\u67e5\u8be2\u7b2ck\u5927\uff0c\u5219\u5bf9\u51e0\u4e2a\u9009\u62e9\u7ed3\u6784\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u4ea4\u6362\u5e76\u8c03\u6574\u5373\u53ef\u3002\n\n3.\u67e5\u627e\u6392\u540d\n\n```cpp\nint rank(int &x,int val)\n{\n\tif(val==t[x].val)\n\t{\n\t\treturn t[ls(x)].siz+1;\n\t}\n\telse if(val<t[x].val)\n\t{\n\t\treturn rank(ls(x),val);\n\t}\n\telse\n\t{\n\t\trank(rs(x),val)+t[ls(x)].siz+1;\n\t}\n}\n```\n\n\u5173\u4e8e\u6811\u9ad8log n\u7684\u8bc1\u660e\u4ee5\u53camaintain\u65f6\u95f4\u590d\u6742\u5ea6O(1)\u7684\u8bc1\u660e\uff0c\u9648\u542f\u5cf0\u5728\u8bba\u6587\u4e2d\u6709\u63d0\u5230\uff0c\u8be6\u89c1[\u6b64\u5904](https://www.luogu.org/blog/firstfan/SBT-prove)\u3002\n\n\u6700\u540e\uff0c\u4ee5[LuoGu3369](https://www.luogu.org/problem/P3369)\u4f5c\u4e3a\u4f8b\u9898\uff0c[SBT\u7684\u4ee3\u7801\u5b9e\u73b0\u89c1\u6b64](https://www.luogu.org/paste/1iktxkt4)\uff0c\u7528\u65f6142ms\uff0c\u5df2\u7ecf\u7b97\u662f\u5f88\u4f18\u79c0\u7684\u5e73\u8861\u6811\u4e86\u3002",
        "postTime": 1571550117,
        "uid": 126484,
        "name": "first_fan",
        "ccfLevel": 0,
        "title": "[\u6570\u636e\u7ed3\u6784]Size Balanced Tree"
    },
    {
        "content": "\u7ffb\u4e86\u6240\u6709\u9898\u89e3\uff0c\u5168\u7136\u770b\u4e0d\u89c1\u4e00\u7bc7\u7eaf\u7cb9\u7684\u7ebf\u6bb5\u6811\uff0c\u53ea\u89c1\u5230\u7528map+heap\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u53d1\u4e00\u7bc7\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\uff0c\u6ca1\u6709STL\u54e6~  \n\n#### \u4e3b\u8981\u601d\u8def\uff1a\u5efa\u7acb\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u63d2\u5165\u5373\u5bf9\u5bf9\u5e94\u7684\u8282\u70b9\u7684\u503c+1\uff0c\u5220\u9664-1\uff0c\u67e5\u8be2\u6392\u540d\u5373\u627e\u524d\u7f00\u548c\uff0c\u7b2cK\u5927\u7684\u503c\u5c31\u662f\u524d\u7f00\u548c\u662fK\uff08\u8bf4\u6cd5\u4e0d\u51c6\u786e\uff0c\u81ea\u884c\u8111\u8865\uff09\u3002\u524d\u7f00\u540e\u7f00\u53ef\u7528\u4e0a\u8ff0\u51fd\u6570\u5b8c\u6210\uff08\u5c31\u5982\u5e73\u8861\u6811\u4e00\u6837\uff09\u3002\n\n\u5148\u8bf4\u4e00\u4e0b\u52a8\u6001\u5f00\u70b9\u7684\u5fc5\u8981\u6027\u3002\u6211\u4eec\u5efa\u7acb\u7684\u662f**\u503c\u57df\u7ebf\u6bb5\u6811**\uff0c\u503c\u57df\u6709$R=2*10^{7}$\u90a3\u4e48\u5927\uff0c\u666e\u901a\u7ebf\u6bb5\u6811\u8981\u5f004\u500d\u7a7a\u95f4\uff0c\u81f3\u5c11\u603b\u5171\u8981\u5f00$10^{8}$\u5927\u5c0f\u7684int\u6570\u7ec4\u5427\u3002MLE\u7b49\u7740\u4f60\u54e6~    \n\n\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u7279\u70b9\u662f\u6bcf\u4e00\u6b21\u5bf9\u5143\u7d20\u7684\u52a0\u51cf\u64cd\u4f5c\u6700\u591a\u65b0\u589e$log_{2}R$\u4e2a\u8282\u70b9\u3002\u90a3\u662f\u56e0\u4e3a\u6bcf\u4e00\u6b21\u53ea\u4f1a\u4ece\u6839\u8282\u70b9\u8d70\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u5373\u7ebf\u6bb5\u6811\u7684\u6df1\u5ea6\uff0c\u4e3a\u4e25\u683c$log_{2}R$\u3002\u8fd9\u6837\uff0cN(100000)\u6b21\u64cd\u4f5c\u5171\u65b0\u5efa2200000\u4e2a\u8282\u70b9\uff0c\u4e0d\u4f1a\u8d85\u5185\u5b58\u5566\uff01  \n  \n\u6bcf\u6b21\u65b0\u5efa\u8282\u70b9\uff1a\n```cpp\nvoid jia(int &p, int l, int r, int k, int x){//\u5728k\u7684\u4f4d\u7f6e\u4e0a\u52a0x\n    if(!p) p = ++c;//\u5173\u952e\u6240\u5728\uff0c\u5374\u6d45\u663e\u6613\u61c2\n    if(l == r) d[p] += x;//\u63a5\u4e0b\u6765\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u6beb\u65e0\u533a\u522b\n    else{\n        int m=l+r>>1;\n        if(k <= m) jia(lc[p], l, m, k, x);\n        if(k > m) jia(rc[p], m+1, r, k, x);\n        d[p] = d[lc[p]] + d[rc[p]];\n    }\n}\n```\n  \n\u5269\u4e0b\u7684\u51fd\u6570\u5c31\u7eaf\u7cb9\u662f\u5b9e\u73b0\u4e0a\u7684\u96be\u5ea6\u4e86\uff0c\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u601d\u7ef4\u96be\u5ea6\uff0c\u5efa\u8bae\u628a\u8fd9\u4e2a\u754c\u9762\u5220\u4e86\uff0c\u8c03\u4e0d\u51fa\u6765\u518d\u5077\u7784\u4e00\u773c\u3002  \n  \n\u67e5\u8be2\u6392\u540d\u7b2cK\u5927\u7684\u5143\u7d20\uff1a\n```cpp\nint pai(int &p, int l, int r, int k){//\u6392\u540d\u4e3ak\u7684\u5143\u7d20\n    if(l == r) return r-P;//P=10^7\uff0c\u6d88\u9664\u503c\u57df\u4e2d\u7684\u8d1f\u6570\u3002\u4f46\u5728\u8fd4\u56de\u65f6\u8981\u51cf\u56de\u6765\n    int m=l+r>>1;\n    if(k <= d[lc[p]]) return pai(lc[p], l, m, k);//\u6bd4\u4e2d\u95f4\u5c0f\n    else return pai(rc[p], m+1, r, k-d[lc[p]]);//\u6bd4\u4e2d\u95f4\u5927\n}\n```\n  \n\u8fd4\u56de\u5c0f\u4e8e\u7b49\u4e8eK\u7684\u5143\u7d20\u4e2a\u6570\uff1a\n```cpp\nint cha1(int p, int l, int r, int x){\n    int m=l+r>>1;\n    if(l == r) return d[p];//\u8fd9\u4e2a\u67e5\u8be2\u503c\u5b58\u5728\uff0c\u8bb0\u5f97\u7b49\u4e8e\u7684\u60c5\u51b5\u8981\u628a\u81ea\u5df1\u52a0\u4e0a\u53bb\n    if(x <= m) return cha1(lc[p], l, m, x);\n    else return cha1(rc[p], m+1, r, x) + d[lc[p]];\n}\n```\n  \n\u8fd4\u56deK\u7684\u6392\u540d\uff08\u5c0f\u4e8eK\u7684\u5143\u7d20\u4e2a\u6570+1\uff09\uff1a\n```cpp\nint cha2(int p, int l, int r, int x){\n    int m=l+r>>1;\n    if(l == r) return 1;//\u65e0\u8bba\u5982\u4f55\u8fd4\u56de1\n    if(x <= m) return cha2(lc[p], l, m, x);\n    else return cha2(rc[p], m+1, r, x) + d[lc[p]];\n}\n```\n  \n\u8fd9\u4e9b\u5b8c\u4e86\uff0c\u4e3b\u51fd\u6570\u8fd8\u4f1a\u8fdc\u5417\uff1f\n```cpp\nint main(){\n    scanf(\"%d\", &n);\n    while(n--){\n        scanf(\"%d%d\", &k, &x);\n        if(k == 1){\n            jia(r, 1, Q, x+P, 1);\n        }\n        if(k == 2){\n            jia(r, 1, Q, x+P, -1);\n        }\n        if(k == 3){\n            printf(\"%d\\n\", cha2(r, 1, Q, x+P));\n        }\n        if(k == 4){\n            printf(\"%d\\n\", pai(r, 1, Q, x));\n        }\n        if(k == 5){\n        \tprintf(\"%d\\n\", pai(r, 1, Q, cha2(r, 1, Q, x+P)-1));\n\t\t}\n\t\tif(k == 6){\n\t\t\tprintf(\"%d\\n\", pai(r, 1, Q, cha1(r, 1, Q, x+P)+1));\n\t\t}\n    }\n    return 0;\n}//\u8fd9\u4e2a\u4f24\u8111\u7b4b\u554a\uff0c\u4e0d\u8fc7\u597d\u5c31\u597d\u5728\u8fd9\u4e2a\u5bb9\u6613\u8c03\u8bd5\n```\n\n\u5751\u70b9\uff1a  \n1\u3001\u503c\u57df\u5305\u542b\u8d1f\u6570\uff0c\u8bb0\u5f97\u52a0\u4e0aP  \n2\u3001main\u51fd\u6570\u91cc\u90a3\u4e9b\u503c\u9700\u8981\u52a0P,\u90a3\u4e9b\u4e0d\u7528  \n3\u3001\u67e5\u8be2\u6392\u540d\u7684\u503c\u53ef\u80fd\u5728\u4e0d\u5b58\u5728\uff0c\u5206\u5f00\u4e24\u4e2a\u51fd\u6570\u53ef\u4ee5\u4ee4\u4e3b\u51fd\u6570\u6bd4\u8f83\u597d\u5199  \n\n\u603b\u7ed3\uff1a  \n\u8fd9\u4e2a\u4ee3\u7801\u4f1a\u6bd4\u4e00\u822c\u7684\u5e73\u8861\u6811\u4ee3\u7801\u8981\u5feb\u4e00\u4e9b\uff08\u5e38\u6570\u5c0f\uff09\uff0c\u4f46\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4f3c\u4e4e\u53ea\u80fd\u89e3\u51b3\u7ecf\u5178\u7684\u5e73\u8861\u6811\u6a21\u677f\u9898\uff0cSplay\u7684\u6a21\u677f\u9898\u53ef\u80fd\u89e3\u51b3\u4e0d\u4e86\uff08\u4e5f\u53ef\u80fd\u662fI am so vegetable\uff09\u3002\u5c55\u793a\u8fd9\u4e2a\u4ee3\u7801\u662f\u4e3a\u4e86\u5b66\u4e60\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u670d\u52a1\u7684\uff0c\u5e76\u975e\u8ba4\u4e3a\u7ebf\u6bb5\u6811\u53ef\u4ee5\u4ee3\u66ff\u5e73\u8861\u6811\u3002\n\n\n\n\n",
        "postTime": 1570801261,
        "uid": 93041,
        "name": "__Watcher",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "# fhq treap--\u975e\u65cbtreap  \n\n## begin\n \u9996\u5148\u8bf4\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u641e\u4e00\u5207$\\text{bst}$,$\\text{treap}$,$\\text{splay}$\u53ef\u4ee5\u641e\u7684\u4e1c\u897f        \n\u201c\u5e73\u8861\u6811\u597d\u70e6\u554a\uff0c\u8f6c\u6765\u8f6c\u53bb\u7684\uff0c\u800c\u4e14$\\text{treap}$\u4e00\u9047\u533a\u95f4\u5e8f\u5217\u95ee\u9898\u5c31gg\u201d     \n\u4e8e\u662f\uff0c\u4e00\u4e2a\u53eb$\\text{fhq}$\u7684\u5927\u4f6c\u5c31\u60f3\u51fa\u4e86\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u53eb$\\text{fhq treap}$\uff0c\u53ef\u4ee5\u89e3\u51b3\u533a\u95f4\u5e8f\u5217\u95ee\u9898\n\n## body\n\n\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u53ea\u6709\u4e24\u4e2a\u64cd\u4f5c    \n- 1.*split*\uff08\u5206\u79bb\uff09\u628a\u4e00\u68f5\u6811\u5206\u6210\u4e24\u68f5\u6811      \n- 2.*merge*\uff08\u5408\u5e76\uff09\u628a\u4e24\u68f5\u6811\u548c\u6210\u4e00\u68f5\u6811    \n\n\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u662f$\\text{fhq treap}$\u7684\u7075\u9b42\u64cd\u4f5c     \n\u5148\u6765\u4e00\u4e32\u5b9a\u4e49\n```cpp\nint rd[N+1];//\u6bcf\u4e2a\u8282\u70b9\u7684\u968f\u673a\u503c\nint siz[N+1];//\u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\nint val[N+1];//\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\nint ls[N+1];//\u5de6\u513f\u5b50\nint rs[N+1];//\u53f3\u513f\u5b50\n```\n#### \u7b2c\u4e00\u4e2a\u51fd\u6570\n```cpp\nvoid pushup(int p)\n{\n\tsiz[p]=siz[ls[p]]+siz[rs[p]]+1;\n}\n```\n\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u7528\u6765\u7ef4\u62a4\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u7684\uff0c\u5b83\u5c31\u7b49\u4e8e\u5de6\u513f\u5b50\u7684\u5b50\u6811\u5927\u5c0f\u52a0\u4e0a\u53f3\u513f\u5b50\u7684\u5b50\u6811\u5927\u5c0f\u5728\u5bb6\u8fd9\u4e2a\u8282\u70b9\u672c\u8eab\n#### \u5206\u88c2  \n![](https://cdn.luogu.com.cn/upload/pic/61187.png)\n![](https://cdn.luogu.com.cn/upload/pic/61190.png)\n![](https://cdn.luogu.com.cn/upload/pic/61189.png)\n\u5206\u88c2\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u6743\u503c\u5206\u88c2\uff0c\u4e00\u79cd\u662f\u6392\u540d\u5206\u88c2\u3002\u6211\u4eec\u5148\u8bb2\u6743\u503c\u5206\u88c2\u3002\u5982\u56fe\uff0c\u5f53\u6211\u4eec\u904d\u5386\u5230\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5982\u679c\u5b83\u7684\u6743\u503c\u5c0f\u4e8ek\uff0c\u90a3\u4e48\u5b83\u7684\u5de6\u5b50\u6811\u4f1a\u88ab\u5206\u5230\u5de6\u8fb9\u7684\u6811\u91cc\uff0c\u7136\u540e\u6211\u4eec\u904d\u5386\u5b83\u7684\u53f3\u513f\u5b50\uff0c\u5982\u679c\u5927\u4e8ek\uff0c\u5219\u628a\u5b83\u7684\u53f3\u5b50\u6811\u5206\u5230\u53f3\u8fb9\u7684\u6811\u91cc\u3002\u5982\u679c\u5230\u8fbe\u9012\u5f52\u8fb9\u754cp==0\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u91cc\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n- 1.root=0\uff08\u5373\u7b2c\u4e00\u6b21split\uff09\uff0c\u5f88\u660e\u663e\u8981\u7ed9x\u548cy\u521d\u59cb\u5316\uff0c\u5373x=y=0\u3002\n- 2.split\u5230\u4e86\u53f6\u5b50\u8282\u70b9\uff0c\u6b64\u65f6\u65e0\u6cd5\u7ee7\u7eedsplit\u4e86\uff0c\u53ea\u80fd\u8fd4\u56de\u3002\u6b64\u65f6\u7684x=y=0\u6ca1\u4ec0\u4e48\u7528\uff0c\u56e0\u4e3ax\u548cy\u4f1a\u5728\u56de\u6eaf\u7684\u65f6\u5019\u901a\u8fc7\u5730\u5740\u7b26\u53f7\u6539\u53d8\u3002\n```cpp\nvoid split(int p,int k,int &x,int &y)\n{\n\tif(p==0)\n\t{\n\t\tx=y=0;\n\t\treturn;\n\t}\n\tif(val[p]<=k)\n\t\tx=p,split(rs[p],k,rs[p],y);\n\telse\n\t\ty=p,split(ls[p],k,x,ls[p]);\n\tpushup(p);//\u7ef4\u62a4\u5b50\u6811\u5927\u5c0f\n}\n```\n#### \u5408\u5e76\n\u5047\u8bbe\u8bf4\u6211\u4eec\u8981\u5408\u5e76\u4ee5a\u4e3a\u6839\u548c\u4ee5b\u4e3a\u6839\u4e24\u68f5\u5b50\u6811\uff0c\u90a3\u4e48\u5c06\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5:   \n- 1.\u5982\u679c$\\text{rd[a]<rd[b]}$\uff0c\u90a3\u4e48\u5c06a\u53f3\u513f\u5b50\u548cb\u5408\u5e76\n- 2.\u5982\u679c$\\text{rd[a]<rd[b]}$\uff0c\u90a3\u4e48\u5c06b\u5de6\u513f\u5b50\u548ca\u5408\u5e76\n```cpp\nint merge(int a,int b)//\u5408\u5e76\u4ee5a\u4e3a\u6839\u548c\u4ee5b\u4e3a\u6839\u4e24\u68f5\u5b50\u6811\uff0c\u8fd4\u56de\u548c\u5e76\u540e\u7684\u6839\u8282\u70b9\n{\n\tif(a==0||b==0)//\u82e5\u5176\u4e2d\u4e00\u68f5\u6811\u4e3a\u7a7a\u6811\uff0c\u8fd4\u56de\u975e\u7a7a\u6811\n\t\treturn a+b;\n\tif(rd[a]<rd[b])\n\t{\n\t\trs[a]=merge(rs[a],b);\n\t\tpushup(a);\n\t\treturn a;\n\t}\n\telse\n\t{\n\t\tls[b]=merge(a,ls[b]);\n\t\tpushup(b);\n\t\treturn b;\n\t}\n}\n```\n\u63a5\u4e0b\u6765\u5c31\u662f$\\text{fhq treap}$\u7684\u57fa\u672c\u64cd\u4f5c\n#### \u63d2\u5165\n\u76f4\u63a5\u4e0a\u4ee3\u7801\n```cpp\nint new_word(int k)\n{\n\tval[++sum]=k;//sum\u4e3a\u76ee\u524d\u66f4\u65b0\u5230\u7684\u8282\u70b9\u7f16\u53f7\n\tsiz[sum]=1;\n\trd[sum]=rand();\n\treturn sum;\n}\nvoid insert(int k)\n{\n\tsplit(root,k,l,r);\n\troot=merge(merge(l,new_word(k)),r);\n}\n```\n#### \u5220\u9664\n\u5220\u9664\u6743\u503c\u4e3ak\u7684\u70b9\uff0c\u5148\u628a\u6574\u9897\u6811\u4ee5k\u4e3a\u6743\u503csplit\u6210\u4e24\u68f5\u6811l,r,\u518d\u628al\u6811\u6309\u7167k-1\u5206\u6210l,mid\u3002\u8fd9\u65f6\u5019\u503c\u4e3ak\u7684\u70b9\u4e00\u5b9a\u4e3amid\u7684\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u628amid\u7684\u4e24\u4e2a\u5b50\u513f\u5b50merge\u8d77\u6765\uff08\u5212\u91cd\u70b9\uff1a\u8fd9\u4e00\u6b65\u5c31\u662f\u53bb\u9664\u6389k\u7684\u5f71\u54cd\uff09\uff0c\u518d\u628a\u4ed6\u4eec\u91cd\u65b0merge\u8d77\u6765\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6811\uff0c\u8fd9\u9897\u6811\u5c31\u53bb\u9664\u6389\u4e86k\u7684\u5f71\u54cd\u3002\n```cpp\nvoid del(int k)\n{\n\tsplit(root,k,l,r);\n\tsplit(l,k-1,l,mid);\n\tmid=merge(ls[mid],rs[mid]);\n\troot=merge(merge(l,mid),r);\n}\n```\n#### \u6392\u540d\n\u76f4\u63a5\u6309\u7167k-1\u7684\u6743\u503c\u628a\u6811\u5206\u5f00\uff0c\u90a3\u4e48l\u6811\u4e2d\u6700\u5927\u7684\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8ek-1\uff0c\u90a3\u4e48k\u7684\u6392\u540d\u5c31\u662fsize[l]+1\u3002\n```cpp\nint Rank(int k)\n{\n\tsplit(root,k-1,l,r);\n\tint res=siz[l]+1;\n\troot=merge(l,r);\n\treturn res;\n}\n```\n#### k\u5c0f\u503c\n\u548c\u666e\u901a\u7684treap\u5dee\u4e0d\u591a\n```cpp\nint kth(int p,int k)//\u5728\u4ee5\u6839\u4e3ap\u7684\u5b50\u6811\u4e2d\u5bfb\u627e\u6392\u540d\u4e3ak\u7684\u8282\u70b9\n{\n\twhile(1)\n\t{\n\t\tif(k<=siz[ls[p]])//\u5f53\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u5b50\u6811\u5927\u5c0f\uff0c\u5f80\u5de6\u5b50\u6811\u8d70\n\t\t\tp=ls[p];\n\t\telse\n\t\t{\n\t\t\tif(k==siz[ls[p]]+1)//\u5f53\u7b49\u4e8e\u5de6\u5b50\u6811\u5927\u5c0f\u52a0\u4e00\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\n\t\t\t\treturn p;\n\t\t\telse//\u5f53\u5927\u4e8e\u5de6\u5b50\u6811\u5927\u5c0f\u52a0\u4e00\u65f6\uff0c\u628ak\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\u52a0\u4e00,\u5f80\u53f3\u5b50\u6811\u8d70\n\t\t\t\tk-=siz[ls[p]]+1,p=rs[p];\n\t\t}\n\t}\n}\n```\n#### \u524d\u9a71\u540e\u7ee7\n\n\u6211\u4eec\u5148\u770b\u524d\u9a71\uff0c\u56e0\u4e3a\u8981\u5c0f\u4e8ek\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u6309\u7167k-1\u7684\u6743\u503c\u5212\u5206l\uff0c\u73b0\u5728l\u4e2d\u6700\u5927\u7684\u6570\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8ek-1\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8f93\u51fal\u4e2d\u6700\u5927\u7684\u6570\u5c31\u597d\uff0c\u540e\u7ee7\u540c\u7406\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n```cpp\nint query_pre(int k)\n{\n\tsplit(root,k-1,l,r);\n\tint res=val[kth(l,siz[l])];\n\troot=merge(l,r);\n\treturn res;\n}\nint query_suf(int k)\n{\n\tsplit(root,k,l,r);\n\tint res=val[kth(r,1)];\n\troot=merge(l,r);\n\treturn res;\n}\n```\n## end\nAC\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<ctime>\n#define N 100000\nusing namespace std;\nstruct fhq_treap\n{\n\tint root=0,l,r,mid;\n\tint sum,rd[N+1],siz[N+1],val[N+1],ls[N+1],rs[N+1];\n\tvoid pushup(int p)\n\t{\n\t\tsiz[p]=siz[ls[p]]+siz[rs[p]]+1;\n\t}\n\tvoid split(int p,int k,int &x,int &y)\n\t{\n\t\tif(p==0)\n\t\t{\n\t\t\tx=y=0;\n\t\t\treturn;\n\t\t}\n\t\tif(val[p]<=k)\n\t\t\tx=p,split(rs[p],k,rs[p],y);\n\t\telse\n\t\t\ty=p,split(ls[p],k,x,ls[p]);\n\t\tpushup(p);\n\t}\n\tint merge(int a,int b)\n\t{\n\t\tif(a==0||b==0)\n\t\t\treturn a+b;\n\t\tif(rd[a]<rd[b])\n\t\t{\n\t\t\trs[a]=merge(rs[a],b);\n\t\t\tpushup(a);\n\t\t\treturn a;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tls[b]=merge(a,ls[b]);\n\t\t\tpushup(b);\n\t\t\treturn b;\n\t\t}\n\t}\n\tint new_word(int k)\n\t{\n\t\tval[++sum]=k;\n\t\tsiz[sum]=1;\n\t\trd[sum]=rand();\n\t\treturn sum;\n\t}\n\tvoid insert(int k)\n\t{\n\t\tsplit(root,k,l,r);\n\t\troot=merge(merge(l,new_word(k)),r);\n\t}\n\tvoid del(int k)\n\t{\n\t\tsplit(root,k,l,r);\n\t\tsplit(l,k-1,l,mid);\n\t\tmid=merge(ls[mid],rs[mid]);\n\t\troot=merge(merge(l,mid),r);\n\t}\n\tint kth(int p,int k)\n\t{\n\t\twhile(1)\n\t\t{\n\t\t\tif(k<=siz[ls[p]])\n\t\t\t\tp=ls[p];\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(k==siz[ls[p]]+1)\n\t\t\t\t\treturn p;\n\t\t\t\telse\n\t\t\t\t\tk-=siz[ls[p]]+1,p=rs[p];\n\t\t\t}\n\t\t}\n\t}\n\tint Rank(int k)\n\t{\n\t\tsplit(root,k-1,l,r);\n\t\tint res=siz[l]+1;\n\t\troot=merge(l,r);\n\t\treturn res;\n\t}\n\tint query_pre(int k)\n\t{\n\t\tsplit(root,k-1,l,r);\n\t\tint res=val[kth(l,siz[l])];\n\t\troot=merge(l,r);\n\t\treturn res;\n\t}\n\tint query_suf(int k)\n\t{\n\t\tsplit(root,k,l,r);\n\t\tint res=val[kth(r,1)];\n\t\troot=merge(l,r);\n\t\treturn res;\n\t}\n}t;\nint main()\n{\n\tsrand(time(0));\n\tint n;\n\tscanf(\"%d\",&n);\n\twhile(n--)\n\t{\n\t\tint s,x;\n\t\tscanf(\"%d %d\",&s,&x);\n\t\tif(s==1) t.insert(x);\n\t\telse\n\t\t\tif(s==2) t.del(x);\n\t\telse\n\t\t\tif(s==3) printf(\"%d\\n\",t.Rank(x));\n\t\telse\n\t\t\tif(s==4) printf(\"%d\\n\",t.val[t.kth(t.root,x)]);\n\t\telse\n\t\t\tif(s==5) printf(\"%d\\n\",t.query_pre(x));\n\t\telse printf(\"%d\\n\",t.query_suf(x));\n\t}\n\treturn 0; \n}\n```\n\n",
        "postTime": 1561123620,
        "uid": 111475,
        "name": "doctorZ_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u770b\u8d77\u6765\u6574\u4e2a\u9898\u89e3\u533a\u90fd\u6ca1\u6709\u4e00\u4e2aleafy tree\u7684\u9898\u89e3\uff0c\u90a3\u6211\u5c31\u6765\u8d21\u732e\u4e00\u4e2a\u5427\n\n\u8c03\u4e86\u4e00\u4e2a\u665a\u4e0a\u7684\u5fc3\u8840\u554a\n\n```\n#include<cstdio>\n#include<iostream>\n#define ls tree[node].l\n#define rs tree[node].r\n#define merge(a,b) new_Node(tree[b].value,tree[a].size+tree[b].size,a,b)\nusing namespace std;\nconst int maxN=3e5 + 100,ratio=4;\nstruct leafy\n{\n\tint value,size;\n\tint l,r;\n}tree[maxN*2+1];\nint cnt,root;\nint read()\n{\n\tint num=0,f=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)) {if(ch=='-') f=-1; ch=getchar();}\n\twhile(isdigit(ch)) num=(num<<3)+(num<<1)+(ch^48),ch=getchar();\n\treturn num*f;\n}\nint new_Node(int value,int size,int l,int r)//\u521b\u5efa\u65b0\u8282\u70b9 \n{\n\tint node=++cnt;\n\ttree[node]=(leafy){value,size,l,r};\n\treturn node;\n}\nvoid update(int node)\n{\n\tif(!tree[node].l) {tree[node].size=1; return;}\n\ttree[node].size=tree[ls].size+tree[rs].size; tree[node].value=tree[rs].value;\n}\nvoid rotate(int node)//\u65cb\u8f6c \n{\n\tif(tree[ls].size>tree[rs].size*ratio) rs=merge(tree[ls].r,rs),ls=tree[ls].l;\n\tif(tree[rs].size>tree[ls].size*ratio) ls=merge(ls,tree[rs].l),rs=tree[rs].r;\n}\nint rank(int node,int x)//\u67e5x\u7684\u6392\u540d \n{\n\tif(tree[node].size==1) return 1;\n\tif(x>tree[ls].value) return tree[ls].size+rank(rs,x);\n\telse return rank(ls,x); \n}\nint find(int node,int x)//\u67e5\u6392\u540d\u4e3ax\u7684\u6570 \n{\n\tif(tree[node].size==1) return tree[node].value;\n\tif(x>tree[ls].size) return find(rs,x-tree[ls].size);\n\telse return find(ls,x);\n}\nvoid insert(int node,int x)//\u63d2\u5165x \n{\n\tif(tree[node].size==1) ls=new_Node(min(tree[node].value,x),1,0,0),rs=new_Node(max(tree[node].value,x),1,0,0);\n\telse insert(x>tree[ls].value?rs:ls,x);\n\tupdate(node); rotate(node);\n}\nvoid del(int node,int x)//\u5220\u9664x \n{\n\tint now,other;\n\tif(x>tree[ls].value) now=rs,other=ls;\n\telse now=ls,other=rs;\n\tif(tree[now].size==1)\n\t\tif(x==tree[now].value)\n\t\t{\n\t\t\ttree[node].l=tree[other].l;\n\t\t\ttree[node].r=tree[other].r;\n\t\t\ttree[node].value=tree[other].value;\n\t\t}else return;\n\telse del(now,x);\n\tupdate(node); rotate(node);  \n}\nint main()\n{\n\tint n=read();\n    root=new_Node(1e8,1,0,0);\n    while(n--)\n    {\n        int op,x;\n        op=read();x=read();\n        switch(op)\n        {\n            case 1:insert(root,x);break;\n            case 2:del(root,x);break;\n            case 3:printf(\"%d\\n\",rank(root,x));break;\n            case 4:printf(\"%d\\n\",find(root,x));break;\n            case 5:printf(\"%d\\n\",find(root,rank(root,x)-1));break;\n            case 6:printf(\"%d\\n\",find(root,rank(root,x+1)));break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1544799154,
        "uid": 39144,
        "name": "cmwqf",
        "ccfLevel": 9,
        "title": "leafy tree"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6700\u7b80\u5355\u7684\u89e3\u6cd5: **\u6743\u503c\u7ebf\u6bb5\u6811**\u3002\n\n- \u4ee3\u7801\u884c\u6570: $48$\u3002\n\n- \u96be\u5ea6: $Splay$ \u7684 $\\frac{1}{10}$ \u4e0d\u5230\u3002\n\n\u4e0b\u9762\u7684\u7a0b\u5e8f\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\u6ca1\u6709\u79bb\u6563\u5316\u54e6\u3002\n\n#### \u64cd\u4f5c $I$ / $II$: \u63d2\u5165 / \u5220\u9664 $x$ \u6570\n\n\u76f4\u63a5\u5199\u4e00\u4e2a $Change$ \u51fd\u6570\u4ee3\u8868\u5728\u7ebf\u6bb5\u6811\u7684 $x$ \u8fd9\u4e2a\u4f4d\u7f6e $\u00b11$\u3002\n\n```pascal\nprocedure Change(l,r,k,key,add:longint);\nvar mid:longint;\nbegin\n    inc(tree[k],add); if l=r then exit;\n    mid:=(l+r) >> 1;\n    if key<=mid then Change(l,mid,k << 1,key,add)\n    else Change(mid+1,r,k << 1+1,key,add);\nend;\n```\n\n#### \u64cd\u4f5c $III$: \u67e5\u8be2 $x$ \u6570\u7684\u6392\u540d\n\n\u5229\u7528\u7b2c $K$ \u5927\u7684\u65b9\u6cd5,\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u5f80\u53f3\u8dd1\u7684\u65f6\u5019\u5e94\u8be5\u52a0\u4e0a\u5de6\u513f\u5b50\u7684\u6743\u503c\u3002\u6700\u540e\u5230\u4e86\u8981\u52a0\u4e0a\u81ea\u5df1\u7684\u4e00\u540d\u3002\n\n```pascal\nfunction Query_number_rank(l,r,k,key:longint):longint;\nvar mid:longint;\nbegin\n    Query_number_rank:=0;\n    if l=r then exit(1);\n    mid:=(l+r) >> 1;\n    if key<=mid then inc(Query_number_rank,Query_number_rank(l,mid,k << 1,key)) else\n    begin inc(Query_number_rank,tree[k << 1]); inc(Query_number_rank,Query_number_rank(mid+1,r,k << 1+1,key)); end;\nend;\n```\n\n#### \u64cd\u4f5c $IV$: \u67e5\u8be2\u6392\u540d\u4e3a $x$ \u7684\u6570\n\n\u76f4\u63a5\u67e5\u8be2\u7b2c $K$ \u5927\u5c31\u597d\u5566\u3002\n\n```pascal\nfunction Query_rank_number(l,r,k,key:longint):longint;\nvar mid:longint;\nbegin\n    if l=r then exit(l);\n    mid:=(l+r) >> 1;\n    if tree[k << 1]>=key then Query_rank_number:=Query_rank_number(l,mid,k << 1,key)\n    else Query_rank_number:=Query_rank_number(mid+1,r,k << 1+1,key-tree[k << 1]);\nend;\n```\n\n\n#### \u64cd\u4f5c $V$: \u6c42 $x$ \u7684\u524d\u9a71\n\n\u6c42 $x$ \u7684\u524d\u9a71\u53ef\u4ee5\u8f6c\u5316\u4e3a\u627e $rank[x]-1$ \u7684\u6570\u4ec0\u4e48,\u7136\u540e\u76f4\u63a5\u641e\u3002\n\n```pascal\nif order=5 then writeln(Query_rank_number(1,border,1,Query_number_rank(1,border,1,k)-1));\n```\n\n#### \u64cd\u4f5c $VI$: \u6c42 $x$ \u7684\u540e\u7ee7\n\n\u8003\u8651\u5230\u76f4\u63a5\u50cf $V$ \u4e00\u6837\u67e5\u540e\u7ee7\u53ef\u80fd\u662f\u6570\u672c\u8eab (\u5982\u679c\u6709\u5f88\u591a\u4e2a\u540c\u6837\u7684\u6570\u5b57),\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u4e3a $bucket[x]$,\u7136\u540e\u76f4\u63a5\u641e\u3002\n\n```pascal\nif order=6 then writeln(Query_rank_number(1,border,1,Query_number_rank(1,border,1,k)+bucket[k]));\n```\n\n#### $Code$\n\n\u79bb\u6563\u5316\u540e\u7684 $100$ \u5206\u3002(\u8fd9\u6570\u636e\u5f3a\u5ea6\u771f\u7684\u662f\u9189\u4e86)\n\n```pascal\nvar\n\tnum,sortn,order:array[-1..110000] of longint;\n    dis:array[-11000000..11000000] of longint;\n    recf,bucket:array[-1..110000] of longint;\n    tree:array[-1..810000] of longint;\n    i,k,n,head,tail,border:longint;\n\nprocedure Swap(var x,y:longint);var t:longint; begin t:=x; x:=y; y:=t; end;\n\nprocedure Sort(l,r:longint);\nvar i,j,s:longint;\nbegin\n    i:=l; j:=r; s:=sortn[(l+r) >> 1];\n    repeat\n        while sortn[i]<s do inc(i);\n        while sortn[j]>s do dec(j);\n        if i<=j then begin Swap(sortn[i],sortn[j]); inc(i); dec(j); end;\n    until i>=j;\n    if i<r then Sort(i,r);\n    if j>l then Sort(l,j);\nend;\n\nprocedure Change(l,r,k,key,add:longint);\nvar mid:longint;\nbegin\n    inc(tree[k],add); if l=r then exit;\n    mid:=(l+r) >> 1;\n    if key<=mid then Change(l,mid,k << 1,key,add)\n    else Change(mid+1,r,k << 1+1,key,add);\nend;\n\nfunction Query_number_rank(l,r,k,key:longint):longint;\nvar mid:longint;\nbegin\n    Query_number_rank:=0;\n    if l=r then exit(1);\n    mid:=(l+r) >> 1;\n    if key<=mid then inc(Query_number_rank,Query_number_rank(l,mid,k << 1,key)) else\n    begin inc(Query_number_rank,tree[k << 1]); inc(Query_number_rank,Query_number_rank(mid+1,r,k << 1+1,key)); end;\nend;\n\nfunction Query_rank_number(l,r,k,key:longint):longint;\nvar mid:longint;\nbegin\n    if l=r then exit(l);\n    mid:=(l+r) >> 1;\n    if tree[k << 1]>=key then Query_rank_number:=Query_rank_number(l,mid,k << 1,key)\n    else Query_rank_number:=Query_rank_number(mid+1,r,k << 1+1,key-tree[k << 1]);\nend;\n\nbegin\n    read(n);\n    for i:=1 to n do begin  read(order[i],num[i]); if (order[i]<=2)or(order[i]>=5) then begin inc(head); sortn[head]:=num[i]; end; end;\n    Sort(1,head);\n    for i:=1 to head do if sortn[i]<>sortn[i-1] then begin inc(tail); dis[sortn[i]]:=tail; recf[tail]:=sortn[i]; end;\n    border:=tail;\n    for i:=1 to n do\n    begin\n        if order[i]=1 then begin inc(bucket[dis[num[i]]]); Change(1,border,1,dis[num[i]],1); end;\n        if order[i]=2 then begin dec(bucket[dis[num[i]]]); Change(1,border,1,dis[num[i]],-1); end;\n        if order[i]=3 then writeln(Query_number_rank(1,border,1,dis[num[i]]));\n        if order[i]=4 then writeln(recf[Query_rank_number(1,border,1,num[i])]);\n        if order[i]=5 then writeln(recf[Query_rank_number(1,border,1,Query_number_rank(1,border,1,dis[num[i]])-1)]);\n        if order[i]=6 then writeln(recf[Query_rank_number(1,border,1,Query_number_rank(1,border,1,dis[num[i]])+bucket[dis[num[i]]])]);\n    end;\nend.\n```\n",
        "postTime": 1542605861,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "01\u5e73\u8861\u6811\u3002\n\n\u5c06\u6bcf\u4e00\u4e2a\u5143\u7d20\u7528\u4e8c\u8fdb\u5236\u62c6\u5206\u540e\uff0c\u63d2\u5165\u4e00\u68f5\u9ad8\u4e3a26\u7684\u5b57\u5178\u6811\u3002\n\n\u5b57\u5178\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\uff1a\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\uff0c\u5b50\u6811\u5927\u5c0f\u3002\n\n\u64cd\u4f5c\u4e00\uff1a\u63d2\u5165\u3002\n\n\u5c06\u6bcf\u4e2a\u5143\u7d20\u752826\u4f4d01\u5b57\u7b26\u4e32\u8868\u793a\uff08\u4e0d\u8db3\u7528\u524d\u5bfc0\u8865\u8db3\uff09\uff0c\u67d0\u4e00\u4f4d\u4e3a0\u5c31\u8bbf\u95ee\u5de6\u513f\u5b50\uff0c\u5426\u5219\u8bbf\u95ee\u53f3\u513f\u5b50\uff0c\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u5b50\u6811\u5927\u5c0f\u52a01.\n\n\u64cd\u4f5c\u4e8c\uff1a\u5220\u9664\u3002\n\n\u540c\u64cd\u4f5c\u4e00\u3002\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u5b50\u6811\u5927\u5c0f\u51cf1.\n\n\u64cd\u4f5c\u4e09\uff1a\u67d0\u5143\u7d20\u6392\u540d\u3002\n\n\u82e5\u8fd9\u4e2a\u5143\u7d20\u67d0\u4e00\u4f4d\u4e3a1\u800c\u5411\u53f3\u5b50\u6811\u67e5\u8be2\u65f6\uff0c\u5de6\u5b50\u6811\u4e2d\u6240\u6709\u5143\u7d20\u8fd9\u4e00\u4f4d\u90fd\u4e3a0\uff0c\u6240\u6709\u5143\u7d20\u90fd\u6bd4\u8fd9\u4e2a\u5143\u7d20\u5c0f\uff0c\u52a0\u4e0a\u5de6\u5b50\u6811\u5927\u5c0f\u3002\n\n\u64cd\u4f5c\u56db\uff1a\u6392\u540d\u4e3a\u67d0\u6570\u7684\u5143\u7d20\u3002\n\n\u8bb0\u53d8\u91cfans\u3002\u521d\u503c\u4e3a\u8f93\u5165\u7684\u6570\u51cf1.\n\n\u5230\u4e86\u67d0\u4e00\u4e2a\u70b9\uff0c\u82e5ans\u7684\u503c\u6bd4\u5de6\u5b50\u6811\u5927\u5c0f\u6765\u5f97\u5c0f\uff0c\u5411\u5de6\u5b50\u6811\u9012\u5f52\uff1b\u5426\u5219\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\u540e\u5411\u53f3\u5b50\u6811\u9012\u5f52\u3002\n\n\u64cd\u4f5c\u4e94\uff1a\u524d\u9a71\u3002\n\n\u524d\u9a71\u5373\u5f53\u524d\u5b57\u5178\u6811\u4e2d\u4e0d\u5927\u4e8e\u67e5\u8be2\u5143\u7d20\u7684\u6240\u6709\u5143\u7d20\u4e2d\u7684\u6700\u5927\u503c\u3002\n\n\u5c06\u67e5\u8be2\u7684\u6570\u63d2\u5165\u5b57\u5178\u6811\uff0c\u5982\u679c\u4ee3\u8868\u8fd9\u4e2a\u6570\u672b\u4f4d\u7684\u70b9\u5b50\u6811\u5927\u5c0f\u4e0d\u662f1\uff0c\u5219\u5728\u63d2\u5165\u8fd9\u4e2a\u6570\u524d\uff0c\u5b57\u5178\u6811\u4e2d\u5c31\u6709\u548c\u8fd9\u4e2a\u6570\u76f8\u7b49\u7684\u67d0\u4e2a\u6570\uff0c\u76f4\u63a5\u8f93\u51fa\u8fd9\u4e2a\u6570\u5373\u53ef\uff1b\u5426\u5219\u64cd\u4f5c\u4e09\u6c42\u51fa\u8fd9\u4e2a\u6570\u7684\u6392\u540d\uff0c\u518d\u64cd\u4f5c\u56db\u6c42\u51fa\u6392\u540d\u5728\u8fd9\u4e2a\u6570\u524d\u4e00\u4f4d\u7684\u6570\u3002\n\n\u64cd\u4f5c\u516d\uff1a\u540e\u7ee7\u3002\n\n\u540c\u64cd\u4f5c\u4e94\u3002\u64cd\u4f5c\u56db\u6c42\u51fa\u6392\u540d\u5728\u8fd9\u4e2a\u6570\u540e\u4e00\u4f4d\u7684\u6570\u3002\n\n\u7531\u4e8e\u8d1f\u6570\u65e0\u6cd5\u63d2\u5165\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u63d2\u5165\u6bcf\u4e2a\u6570\u524d\u5148\u5c06\u5176\u52a0\u4e0a\u67d0\u4e2a\u5e38\u6570\uff0c\u4fdd\u8bc1\u6240\u6709\u6570\u90fd\u662f\u975e\u8d1f\u6574\u6570\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<math.h>\nusing namespace std;\n\nint T,op,x;\nint tot=1,siz[10000005],sn[10000005][2];\n\nvoid insert(int x)\n{\n\tint i,now=1;\n\tfor(i=25;i>-1;--i)\n\t{\n\t\t++siz[now];\n\t\tif(x&(1<<i))\n\t\t{\n\t\t\tif(!sn[now][1]) sn[now][1]=++tot;\n\t\t\tnow=sn[now][1];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!sn[now][0]) sn[now][0]=++tot;\n\t\t\tnow=sn[now][0];\n\t\t}\n\t}\n\t++siz[now];\n}\n\nvoid delet(int x)\n{\n\tint i,now=1;\n\tfor(i=25;i>-1;--i)\n\t{\n\t\t--siz[now];\n\t\tif(x&(1<<i)) now=sn[now][1];\n\t\telse now=sn[now][0];\n\t}\n\t--siz[now];\n}\n\nint minrk(int x)\n{\n\tint i,now=1,ret=1;\n\tfor(i=25;i>-1;--i)\n\t{\n\t\tif(!(x&(1<<i))) now=sn[now][0];\n\t\telse ret+=siz[sn[now][0]],now=sn[now][1];\n\t}\n\treturn ret;\n}\n\nint maxrk(int x)\n{\n\tint i,now=1,ret=1;\n\tfor(i=25;i>-1;--i)\n\t{\n\t\tif(!(x&(1<<i))) now=sn[now][0];\n\t\telse ret+=siz[sn[now][0]],now=sn[now][1];\n\t}\n\treturn ret+siz[now]-1;\n}\n\nint askrk(int x)\n{\n\tint i,now=1,ret=0;\n\tfor(i=25;i>-1;--i)\n\t{\n\t\tif(x>siz[sn[now][0]])\n\t\t\tx-=siz[sn[now][0]],now=sn[now][1],ret+=(1<<i);\n\t\telse now=sn[now][0];\n\t}\n\treturn ret-1e7;\n}\n\nint main()\n{\n\tfreopen(\"tree.in\",\"r\",stdin);\n\tfreopen(\"tree.out\",\"w\",stdout);\n\tscanf(\"%d\",&T);\n\twhile(T--)\n\t{\n\t\tscanf(\"%d%d\",&op,&x);\n\t\tif(op==1) insert(x+1e7);\n\t\telse if(op==2) delet(x+1e7);\n\t\telse if(op==3) printf(\"%d\\n\",minrk(x+1e7));//x's least rank\n\t\telse if(op==4) printf(\"%d\\n\",askrk(x));//rank x\n\t\telse if(op==5)\n\t\t{\n\t\t\tinsert(x+1e7);\n\t\t\tprintf(\"%d\\n\",askrk(minrk(x+1e7)-1));\n\t\t\tdelet(x+1e7);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinsert(x+1e7);\n\t\t\tprintf(\"%d\\n\",askrk(maxrk(x+1e7)+1));\n\t\t\tdelet(x+1e7);\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```\n\n\u590d\u6742\u5ea6\uff1aO(26n)\n\n\u8fd0\u884c\u65f6\u95f4\u5927\u7ea6\u548cTreap\u76f8\u7b49\uff0c\u662fSpaly\u76841/3~1/4.\n",
        "postTime": 1532161052,
        "uid": 31435,
        "name": "hwk0518",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5e76\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\uff0c\u6240\u4ee5\u53ef\u4ee5\u79bb\u7ebf\u79bb\u6563\u5316+\u6743\u503c\u7ebf\u6bb5\u6811\uff08 \u6811\u72b6\u6570\u7ec4\uff09\uff0c\u5c31\u662f\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u7b2ck\u5c0f\u51fa\u73b0\u8fc7\u7684\u6570\uff08\u53bb\u91cd\u4e4b\u540e\uff09\u7684\u51fa\u73b0\u6b21\u6570\u3002\u63d2\u5165\u5c06\u90a3\u4e2a\u6570\u5bf9\u5e94\u4f4d\u7f6e+1\uff1b\u5220\u9664-1\uff1b\u67e5\u8be2\u6392\u540d\u5c31\u662f\u6c42x-1\u5904\u7684\u524d\u7f00\u548c\uff1b\u67e5\u8be2\u7b2ck\u5927\u5148\u4e8c\u5206\u4e00\u4e2ax\uff0c\u7136\u540e\u5224\u65adx\u5904\u524d\u7f00\u548c\u7684\u5927\u5c0f\u5173\u7cfb\uff1b\u67e5\u8be2\u524d\u9a71\u4e5f\u662f\u5148\u4e8c\u5206\uff0c\u5224\u65ad\u8fd9\u4e2a\u70b9\u5230\u8be2\u95ee\u70b9\u7684\u533a\u95f4\u548c\u662f\u5426\u5927\u4e8e0\uff1b\u540e\u7ee7\u540c\u7406\u3002\u6211\u6ca1\u6709\u76f4\u63a5\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u4e8c\u5206\uff0c\u800c\u662f\u4e8c\u5206\u5957\u67e5\u8be2\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f$O(n\\log ^(2)n)$\uff0c\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\u4e5f\u6bd4\u6211\u4e00\u4e2alog\u7684splay\u5feb\u4e86200\u591ams\u3002\u611f\u89c9\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u5c42\u6b21\u5173\u7cfb\u662f\u7528lowbit\u786e\u5b9a\u7684\uff0c\u6ca1\u6709\u7ebf\u6bb5\u6811\u90a3\u4e48\u663e\u800c\u6613\u89c1\uff0c\u8c01\u4f1a\u4e00\u4e2alog\u7684\u76f4\u63a5\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u4e8c\u5206\u53ef\u4ee5\u4ea4\u6d41\u4e00\u4e0b\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n\nconst int N = 200005;\nconst int inf = 2e9+7;\n\ntypedef long long ll;\nint lsh[N], shu[N];\nstruct opt {int ty, x;} q[N];\nll c[N]; int n = 0, m;\n\ninline int lowbit (int x) {return x&(-x);}\n\nll presum (int o) {ll r = 0; while (o) r += c[o], o -= lowbit (o); return r;}\n\nvoid modify (int o, int v) {while (o <= n) c[o] += v, o += lowbit (o);}\n\nint querysum (int l, int r) {return int(presum (r)-presum (l-1));}\n\nvoid prelsh () {\n    sort (shu+1, shu+m+1); shu[0] = -inf;\n    for (int i = 1; i <= m; ++ i)\n        if (shu[i] != shu[i-1]) lsh[++n] = shu[i];\n}\n\nint find (int x) {\n    int l = 1, r = n;\n    while (l < r) {\n        int mid = (l+r)>>1;\n        (lsh[mid] < x)? l = mid+1: r = mid; \n    }\n    return l;\n}\n\nvoid ins (int x) {x = find (x); modify (x, 1);}\n\nvoid del (int x) {x = find (x); modify (x, -1);}\n\nint rank (int x) {x = find (x); return querysum (1, x-1)+1;}\n\nint kth (int k) {\n    int l = 1, r = n;\n    while (l < r) {\n        int mid = (l+r)>>1, x = querysum (1, mid), y = querysum (1, mid-1);\n        if (y+1 <= k && k <= x) return lsh[mid];\n        if (k <= y) r = mid; else l = mid+1;\n    }\n    return lsh[l];\n}\n\nint pre (int x) {\n    x = find (x); int l = 1, r = x-1;\n    while (l < r) {\n        int mid = (l+r)>>1;\n        (querysum (mid, x-1) > 0)? l = mid+1: r = mid;\n    }\n    return querysum (l, x-1)? lsh[l]: lsh[l-1];\n}\n\nint suc (int x) {\n    x = find (x); int l = x+1, r = n;\n    while (l < r) {\n        int mid = (l+r)>>1;\n        (querysum (x+1, mid)>0)? r = mid: l = mid+1;\n    }\n    return lsh[l];\n}\n\nint main () {\n    scanf (\"%d\", &m);\n    for (int i = 1; i <= m; ++ i) {\n        scanf (\"%d%d\", &q[i].ty, &q[i].x); shu[i] = q[i].x;\n    }\n    prelsh ();\n    for (int i = 1; i <= m; ++ i) {\n        if (q[i].ty == 1) ins (q[i].x);\n        if (q[i].ty == 2) del (q[i].x);\n        if (q[i].ty == 3) printf (\"%d\\n\", rank (q[i].x));\n        if (q[i].ty == 4) printf (\"%d\\n\", kth (q[i].x));\n        if (q[i].ty == 5) printf (\"%d\\n\", pre (q[i].x));\n        if (q[i].ty == 6) printf (\"%d\\n\", suc (q[i].x));\n    }\n    return 0;\n}\n\n```",
        "postTime": 1510967530,
        "uid": 18479,
        "name": "yhgalaxy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "## \u770b\u5230\u6ca1\u6709AVL\u7684\u9898\u89e3\uff0c\u6765\u6c34\u4e00\u6ce2  \n \n### \u53d8\u91cf\u58f0\u660e\n\n#### $l($\u5de6\u513f\u5b50$),r($\u53f3\u513f\u5b50$),v($\u503c$),h($\u9ad8\u5ea6$),s($\u5b50\u6811\u5927\u5c0f$),si($\u5f53\u524d\u6570\u51fa\u73b0\u6b21\u6570$)$\n\n### \u51fd\u6570\u58f0\u660e\n\n1. $ levo($\u5de6\u65cb$)$\n\n\u793a\u610f\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7czt0s9q.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n# $\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\downarrow$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/12wujpcf.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u53ef\u89c1\uff0c\u6b64\u64cd\u4f5c\u4f7f\u5f97$height(\u6811)$\u4ece$max(h(c),h(d)+1,h(e)+1)$\u53d8\u4e3a\u4e86$max(h(c)+1,h(d)+1,h(e))$\n\n2. $ dext($\u53f3\u65cb$)$\n\n\u663e\u7136\uff0c\u53ea\u662f\u4e0a\u9762\u5bf9\u79f0\u4e86\u4e0b\u800c\u5df2\n\n3. $ lext($\u5de6\u53f3\u65cb$)$\n\n\u5148\u5bf9\u6839\u8282\u70b9\u7684\u5de6\u8282\u70b9\u505a\u5de6\u65cb\uff0c\u518d\u5728\u6839\u8282\u70b9\u505a\u53f3\u65cb\n\n\u793a\u610f\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vv3mt4gj.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n# $\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\downarrow$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2z1gxl1f.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n4. $devo($\u53f3\u5de6\u65cb$)$\n\n\u4e0a\u56fe\u5bf9\u79f0\u4e86\u4e0b\n\n5. $balance($\u5e73\u8861$)$\n\n\u9996\u5148,$AVL$\u9700\u4fdd\u8bc1\u4efb\u610f\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee$\\leq 1(h(null)=0)$\n\n\u5047\u8bbe\u8be5\u6811\u5728\u63d2\u5165$or$\u5220\u9664\u524d\u5df2\u7ecf\u4e3a$AVL$\uff0c\u53ef\u77e5\uff0c\u4efb\u610f\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u5728\u4fee\u6539\u540e\u6700\u5927\u4e3a$2.$\n\n\u518d\u5047\u8bbe\u5f53\u524d\u5df2\u7ecf\u4f7f\u8282\u70b9$n$\u7684\u513f\u5b50\u5e73\u8861\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u6811$n$\u5e73\u8861\n\n- $h(ls(n))=h(rs(n))+2$\n\n\t- $h(ls(ls(n))) > h(ls(rs(n)))$\n    \n    \u53ef\u77e5\uff0c\u5de6\u5b50\u6811\u7684\u5de6\u513f\u5b50\u6700\u9ad8\uff0c\u6240\u4ee5\u8fdb\u884c\u53f3\u65cb\n    \n   - $h(ls(ls(n))) < h(ls(rs(n)))$\n   \t \n    \u53ef\u77e5\uff0c\u5de6\u5b50\u6811\u7684\u53f3\u513f\u5b50\u6700\u9ad8\uff0c\u6240\u4ee5\u8fdb\u884c\u5de6\u53f3\u65cb\n    \n- $h(ls(n))+2=h(rs(n))$\n\n\t- $h(rs(rs(n))) > h(rs(ls(n)))$\n    \n    \u53ef\u77e5\uff0c\u53f3\u5b50\u6811\u7684\u53f3\u513f\u5b50\u6700\u9ad8\uff0c\u6240\u4ee5\u8fdb\u884c\u5de6\u65cb\n    \n   - $h(rs(rs(n))) < h(rs(ls(n)))$\n   \t \n    \u53ef\u77e5\uff0c\u53f3\u5b50\u6811\u7684\u5de6\u513f\u5b50\u6700\u9ad8\uff0c\u6240\u4ee5\u8fdb\u884c\u53f3\u5de6\u65cb\n    \n6. $includeremove(now,need)$\u5185\u7f6e\u5220\u9664\u64cd\u4f5c\n\n\t- $now=null\\ \\ \\ \\ \\ \\ \\ return\\ null$\n    \n\t- $v(now)>need\\ \\ \\ $\u628a\u5f53\u524d\u70b9\u7684\u5de6\u513f\u5b50\u8d4b\u4e3a$includeremove(ls(now),need)$\n    \n\t- $v(now)<need\\ \\ \\ $\u628a\u5f53\u524d\u70b9\u7684\u53f3\u513f\u5b50\u8d4b\u4e3a$includeremove(rs(now),need)$\n    \n\t- $v(now)=need\\ \\ \\ $\n    \n   \t\t- $si(now)=1$\n        \n        \t- $ls(now) \\neq null \\And rs(now) \\neq null$\n        \n        \t\u628a\u5f53\u524d\u70b9\u7f6e\u4e3a\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u5bf9\u5e94\u7684\u8282\u70b9(\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u8282\u70b9)\uff0c\u518d**\u5b8c\u5168\u3001\u5b8c\u5168\u3001\u5b8c\u5168**\u5220\u6389\u5de6\u5b50\u6811\u4e2d\uff08\u53f3\u5b50\u6811\u4e2d\uff09\u54ea\u4e2a\u53ef\u601c\u7684\u88ab\"\u5192\u540d\u9876\u66ff\"\u8282\u70b9,$return$\u5f53\u524d\u70b9\n            \n           - $ls(now) \\neq null \\And rs(now) = null$\n           \n           \u628a\u5f53\u524d\u70b9\u7f6e\u4e3a\u4ed6\u7684\u53f3\u513f\u5b50~~\u88ab\u513f\u5b50ntr\u4e86~~\n        \n           - $rs(now) \\neq null \\And ls(now) = null$\n           \n           \u628a\u5f53\u524d\u70b9\u7f6e\u4e3a\u4ed6\u7684\u5de6\u513f\u5b50~~\u88ab\u513f\u5b50ntr\u4e86~~\n           \n      - $si(now) > 1$\n      \t\t\n      \t\t\u76f4\u63a5$--si(now)$\n            \n7. $lower(n)\\And biger(n) \\And findrank(n) \\And findindex(n) \\And findmax(n) \\And findmin(n) \\And insert $\u7b49\n\n\u592a\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u8df3\u8fc7\n\n$\\mathfrak{talk\\ is\\ cheap,show\\ you\\ the\\ code}$\n\n```cpp\n#include<cstdio>\n# define read read1<int>()\n# define Type template<typename T>\nType inline const T read1()\n{\n    T m=0;\n    char k=getchar();\n    while(('0'>k||k>'9')&&(k!='-'))k=getchar();\n    const bool f=(k=='-'?1:0);\n    if(f)k=getchar();\n    while('0'<=k&&k<='9')m=(m<<3)+(m<<1)+(k^48),k=getchar();\n    return f?-m:m;\n}\nType const T Max(T a,T b){return a>b?a:b;}\nType struct AVL\n{\n\tint tot;\n\tstruct node\n\t{\n\t\tnode *l,*r;\n\t\tT v;\n\t\tint h,s,si;\n\t\tnode(T tv){l=r=NULL;v=tv;h=s=si=1;}\n\t\tnode(){l=r=NULL;v=0;h=s=si=1;}\n\t}*Root,f[1000000];\n\tAVL(){Root=NULL;tot=0;}\n\tint height(node *now)\n\t{\n\t\treturn now?now->h:0;\n\t}\n\tint size(node *now)\n\t{ \n\t\treturn now?now->s:0;\n\t}\n\tnode* includefindindex(node *now,int k)\n\t{\n\t\tif(k<=size(now->l))return includefindindex(now->l,k);\n\t\tif(k>size(now->l)+now->si)return includefindindex(now->r,k-(size(now->l)+now->si));\n\t\treturn now;\n\t}\n\tT operator [](int k)\n\t{\n\t\treturn includefindindex(Root,k)->v;\n\t}\n\tnode* find(T want)\n\t{\n\t\tnode *tem=Root;\n\t\twhile(tem&&tem->v!=want)\n\t\t\tif(tem->v>want)tem=tem->l;\n\t\t\telse tem=tem->r;\n\t\treturn tem;\n\t}\n\tint findrank(T want)\n\t{\n\t\tnode *tem=Root;\n\t\tint t=0;\n\t\twhile(tem)\n\t\t{\n\t\t\tif(tem->v<want)t+=size(tem->l)+tem->si,tem=tem->r;\n\t\t\telse if(tem->v>want)tem=tem->l;\n\t\t\telse return t+size(tem->l)+1;\n\t\t}\n\t\treturn 1;\n\t}\n\tnode* levo(node *now)\n    {\n\t\tnode *tem=now->r;\n\t\tnow->r=tem->l;\n\t\ttem->l=now;\n\t\tnow->h=Max(height(now->l),height(now->r))+1;\n\t\tnow->s=size(now->l)+size(now->r)+now->si;\n\t\ttem->h=Max(height(tem->l),height(tem->r))+1;\n\t\ttem->s=size(tem->l)+size(tem->r)+tem->si;\n\t\treturn tem;\n\t}\n\tnode* dext(node *now)\n\t{\n\t\tnode *tem=now->l;\n\t\tnow->l=tem->r;\n\t\ttem->r=now;\n\t\tnow->h=Max(height(now->l),height(now->r))+1;\n\t\tnow->s=size(now->l)+size(now->r)+now->si;\n\t\ttem->h=Max(height(tem->l),height(tem->r))+1;\n\t\ttem->s=size(tem->l)+size(tem->r)+tem->si;\n\t\treturn tem;\n\t}\n\tnode* lext(node *now)\n\t{\n\t\tnow->l=levo(now->l);\n\t\treturn dext(now);\n\t}\n\tnode* devo(node *now)\n\t{\n\t\tnow->r=dext(now->r);\n\t\treturn levo(now);\n\t}\n\tnode* balance(node *now)\n\t{\n\t\tif(height(now->l)==height(now->r)+2)\n\t\t\tif(height(now->l->l)>height(now->l->r))now=dext(now);\n\t\t\telse now=lext(now);\n\t\telse if(height(now->r)==height(now->l)+2)\n\t\t\tif(height(now->r->r)>height(now->r->l))now=levo(now);\n\t\t\telse now=devo(now);\n\t\treturn now;\n\t}\n\tnode* findmin(node *now)\n\t{\n\t\tif(!now)return NULL;\n\t\twhile(now->l)now=now->l;\n\t\treturn now;\n\t}\n\tnode* findmax(node *now)\n\t{\n\t\tif(!now)return NULL;\n\t\twhile(now->r)now=now->r;\n\t\treturn now;\n\t}\n\tnode* includeinsert(node *now,T need)\n\t{\n\t\tif(!now)\n\t\t{\n\t\t\tnow=f+(tot++);\n\t\t\tnow->v=need;\n\t\t\treturn now;\n\t\t}\n\t\tif(need==now->v)++now->si;\n\t\telse if(need<now->v)now->l=includeinsert(now->l,need);\n\t\telse now->r=includeinsert(now->r,need);\n\t\tnow->h=Max(height(now->l),height(now->r))+1;\n\t\tnow->s=size(now->l)+size(now->r)+now->si;\n\t\treturn balance(now);\n\t}\n\tnode* includeremove(node *now,T need)\n\t{\n\t\tif(!now)return NULL;\n\t\tif(now->v>need)now->l=includeremove(now->l,need);\n\t\telse if(now->v<need)now->r=includeremove(now->r,need);\n\t\telse if(now->si>1)--now->si;\n\t\telse if(now->l&&now->r)\n\t\t{\n\t\t\tnode* tem=findmin(now->r);\n\t\t\tnow->v=tem->v;now->si=tem->si;\n\t\t\ttem->si=1;\n\t\t\tnow->r=includeremove(now->r,now->v);\n\t\t}\n\t\telse if(now->l||now->r)now=now->l?now->l:now->r;\n\t\telse return now=NULL;\n\t\tnow->h=Max(height(now->l),height(now->r))+1;\n\t\tnow->s=size(now->l)+size(now->r)+now->si;\n\t\treturn balance(now);\n\t}\n\tnode* bigger(T need)\n\t{\n\t\tnode *tem=Root,*ans=NULL;\n\t\twhile(tem)\n\t\t{\n\t\t\tif(tem->v>need)\n\t\t\t{\n\t\t\t\tif(!ans||tem->v<ans->v)ans=tem;\n\t\t\t\ttem=tem->l;\n\t\t\t}\n\t\t\telse tem=tem->r;\n\t\t}\n\t\treturn ans;\n\t}\n\tnode* lower(T need)\n\t{\n\t\tnode *tem=Root,*ans=NULL;\n\t\twhile(tem)\n\t\t{\n\t\t\tif(tem->v<need)\n\t\t\t{\n\t\t\t\tif(!ans||tem->v>ans->v)ans=tem;\n\t\t\t\ttem=tem->r;\n\t\t\t}\n\t\t\telse tem=tem->l;\n\t\t}\n\t\treturn ans;\n\t}\n\tvoid insert(T need){Root=includeinsert(Root,need);}\n\tvoid remove(T need){Root=includeremove(Root,need);}\n};\nAVL<int>tree;\nint main()\n{\n\tint s=read;\n\twhile(s--)\n\t\tswitch(read)\n\t\t{\n\t\t\tcase 1:tree.insert(read);break;\n\t\t\tcase 2:tree.remove(read);break;\n\t\t\tcase 3:printf(\"%d\\n\",tree.findrank(read));break;\n\t\t\tcase 4:printf(\"%d\\n\",tree[read]);break;\n\t\t\tcase 5:printf(\"%d\\n\",tree.lower(read)->v);break;\n\t\t\tdefault:printf(\"%d\\n\",tree.bigger(read)->v);\n\t\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1575274311,
        "uid": 108067,
        "name": "\u4e1b\u96e8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369"
    },
    {
        "content": "treap\u6a21\u677f\u9898\n\u56e0\u4e3a\u9700\u8981\u67e5\u627e\u6392\u540d\uff0c\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2asize[i]\u4ee3\u8868\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u56e0\u4e3atreap\u6ee1\u8db3\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u5c31\u5f88\u597d\u641e\u3002\n\u56e0\u4e3a\u53ef\u80fd\u4f1a\u51fa\u73b0\u91cd\u590d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u518d\u5b9a\u4e49\u4e00\u4e2anum\u6765\u8bb0\u5f55\u6570\u503cx\u5728\u6811\u4e2d\u7684\u4e2a\u6570\n\u8be6\u89c1\u4ee3\u7801\n\n**Code:**\n```\n#include<bits/stdc++.h>\n#define N 100001\n#define inf 1926081700\nusing namespace std;\nint n;\nstruct treap{\n\t#define ls tree[q].l\n\t#define rs tree[q].r\n\tstruct dqy{\n\t\tint l,r;\n\t\tint val,key;\n\t\tint num,size;\n\t}tree[N];\n\tint root,tot;\n\tint add(int v){\n\t\ttree[++tot].val=v;\n\t\ttree[tot].key=rand();\n\t\ttree[tot].num=tree[tot].size=1;\n\t\treturn tot;\n\t}\n\tvoid update(int q){\n\t\ttree[q].size=tree[ls].size+tree[rs].size+tree[q].num;\n\t}//\u66f4\u65b0\u81ea\u5df1\n\tvoid build(){\n\t\tadd(-inf),add(inf);\n\t\troot=1;tree[1].r=2;\n\t\tupdate(1);\n\t}\n\tint getrank(int q,int v){\n\t\tif(q==0)return 0;\n\t\tif(tree[q].val==v)return tree[ls].size+1;//\u5de6\u5b50\u6811\u4e0a\u7684\u70b9\u5fc5\u5b9a\u5c0f\u4e8e\u81ea\u5df1\n\t\tif(tree[q].val>v)return getrank(ls,v);//\u5982\u679c\u6bd4\u81ea\u5df1\u5c0f,\u8df3\u5230\u5de6\u5b50\u6811\u4e0a\u53bb\u627e\n\t\treturn getrank(rs,v)+tree[ls].size+tree[q].num;\n\t\t//\u5426\u5219\u8df3\u5230\u53f3\u5b50\u6811,\u56e0\u4e3a\u53f3\u5b50\u4e0a\u7684\u70b9\u5fc5\u5b9a\u5927\u4e8e\u5de6\u5b50\u6811\u548c\u7236\u4eb2,\u6240\u4ee5\u8fd8\u8981\u52a0\u4e0a\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u548c\u7236\u4eb2\u7684\u6570\u91cf\n\t}//\u67e5\u627e\u6392\u540d\n\tint getval(int q,int rk){\n\t\tif(q==0)return inf;\n\t\tif(tree[ls].size>=rk)return getval(ls,rk);//\u5de6\u5b50\u6811\u5c0f\u4e8e\u81ea\u5df1,\u6240\u4ee5\u76f4\u63a5\u8df3\u5230\u5de6\u5b50\u6811\u627e\n\t\tif(tree[ls].size+tree[q].num>=rk)return tree[q].val;\n\t\t//\u56e0\u4e3a\u4e0d\u5728\u5de6\u5b50\u6811\u4e0a,\u53c8\u5728\u5de6\u5b50\u6811\u548c\u81ea\u5df1\u4e4b\u95f4,\u6240\u4ee5\u80af\u5b9a\u662f\u81ea\u5df1\n\t\treturn getval(rs,rk-tree[ls].size-tree[q].num); //\u5426\u5219\u8df3\u5230\u53f3\u5b50\u6811\u4e0a\u627e\n\t}//\u67e5\u627e\u6743\u503c\n\tvoid zig(int &q){\n\t\tint tmp=ls;\n\t\tls=tree[tmp].r;tree[tmp].r=q;q=tmp;\n\t\tupdate(rs),update(q);\n\t}//\u53f3\u65cb\n\tvoid zag(int &q){\n\t\tint tmp=rs;\n\t\trs=tree[tmp].l;tree[tmp].l=q;q=tmp;\n\t\tupdate(ls),update(q);\n\t}//\u5de6\u65cb\n\tvoid insert(int &q,int v){\n\t\tif(q==0){\n\t\t\tq=add(v);\n\t\t\treturn ;\n\t\t}//\u6ca1\u6709\u8fd9\u4e2a\u70b9\u5c31\u65b0\u5efa\u4e00\u4e2a\u70b9\u51fa\u6765\n\t\tif(v==tree[q].val){\n\t\t\ttree[q].num++;\n\t\t\tupdate(q);\n\t\t\treturn ;\n\t\t}//\u6709\u8fd9\u4e2a\u70b9\u5c31\u76f4\u63a5\u7ed9\u8fd9\u4e2a\u70b9\u7684num++\u5c31\u53ef\u4ee5\u4e86\n\t\tif(v<tree[q].val){\n\t\t\tinsert(ls,v);\n\t\t\tif(tree[q].key<tree[ls].key)zig(q);\n\t\t}\n\t\telse {\n\t\t\tinsert(rs,v);\n\t\t\tif(tree[q].key<tree[rs].key)zag(q);\n\t\t}\n\t\t//\u627e\u6709\u6ca1\u6709\u8fd9\u4e2a\u70b9\n\t\tupdate(q);\n\t}\n\tint precursor(int v){\n\t\tint ans=1;\n\t\tint q=root;\n\t\twhile(q){\n\t\t\tif(v==tree[q].val){\n\t\t\t\tif(ls>0){\n\t\t\t\t\tq=ls;\n\t\t\t\t\twhile(rs>0)q=rs;\n\t\t\t\t\tans=q;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}//\u8981\u4e25\u683c\u5c0f\u4e8e\n\t\t\tif(tree[q].val<v&&tree[q].val>tree[ans].val)ans=q;\n\t\t\tq=v<tree[q].val?ls:rs;\n\t\t}\n\t\treturn tree[ans].val;\n\t}//\u524d\u9a71\n\tint successor(int v){\n\t\tint ans=2;\n\t\tint q=root;\n\t\twhile(q){\n\t\t\tif(v==tree[q].val){\n\t\t\t\tif(rs>0){\n\t\t\t\t\tq=rs;\n\t\t\t\t\twhile(ls>0)q=ls;\n\t\t\t\t\tans=q;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}//\u8981\u4e25\u683c\u5927\u4e8e\n\t\t\tif(tree[q].val>v&&tree[q].val<tree[ans].val)ans=q;\n\t\t\tq=v<tree[q].val?ls:rs;\n\t\t}\n\t\treturn tree[ans].val;\n\t}//\u540e\u7ee7\n\tvoid remove(int &q,int v){\n\t\tif(q==0)return ;\n\t\tif(v==tree[q].val){//\u5b58\u5728\u8fc7\u8fd9\u4e2a\u70b9\n\t\t\tif(tree[q].num>1){\n\t\t\t\ttree[q].num--,update(q);\n\t\t\t\treturn ;\n\t\t\t}//\u5982\u679c\u6709\u8fd9\u4e2a\u70b9,\u76f4\u63a5num--\n\t\t\tif(ls||rs){\n\t\t\t\tif(rs==0||tree[ls].key>tree[rs].key)zig(q),remove(rs,v);\n\t\t\t\telse zag(q),remove(ls,v);\n\t\t\t\tupdate(q);\n\t\t\t}//\u5426\u5219\u8df3\u5230\u5b50\u6811\u4e0a\u53bb\u627e\n\t\t\telse q=0;\n\t\t\treturn ;\n\t\t}\n\t\tv<tree[q].val?remove(ls,v):remove(rs,v);//\u8df3\u5230\u5b50\u6811\u4e0a\u53bb\u627e\n\t\tupdate(q);\n\t}\n}T;\ninline int read(){ \n    int x=0,f=1;char ch=getchar(); \n    while(!isdigit(ch)){if(ch=='-')f=-f;ch=getchar();} \n    while(isdigit(ch)){x=x*10+ch-48;ch=getchar();} \n    return x*f; \n}\nint main(){\n\tn=read();T.build();\n\tfor(int i=1;i<=n;i++){\n\t\tint opt=read(),x=read();\n\t\tswitch(opt){\n\t\t\tcase 1:\n\t\t\t\tT.insert(T.root,x);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tT.remove(T.root,x);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tprintf(\"%d\\n\",T.getrank(T.root,x)-1);//\u4e00\u5f00\u59cb\u63d2\u5165\u4e86\u6700\u503c,\u6240\u4ee5\u8981\u51cf\u4e00\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tprintf(\"%d\\n\",T.getval(T.root,x+1));\n\t\t\t\t//\u56e0\u4e3a\u662f\u4e25\u683c\u5927\u4e8e\u5c0f\u4e8e,\u6240\u4ee5\u8981\u7ed9\u6392\u540d\u52a0\u4e00\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tprintf(\"%d\\n\",T.precursor(x));\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tprintf(\"%d\\n\",T.successor(x));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0; \n}\n```",
        "postTime": 1544176180,
        "uid": 73702,
        "name": "DQYdqy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "# \u6307\u9488Splay\u9898\u89e3\n\n## \u524d\u8a00\n[\u535a\u5ba2](https://www.luogu.org/blog/LLCSBlog/solution-p3369)\u98df\u7528\u6548\u679c\u66f4\u4f73\n\nSplay\u662f\u50cf\u6211\u8fd9\u6837\u7684\u5c0f\u849f\u84bb\u4e00\u5f00\u59cb\u5b66\u7684\u5e73\u8861\u6811\u3002\n\n\u867d\u7136Splay\u5e38\u6570\u4e0d\u5c0f\uff0c\u4f46\u662f\u529f\u80fd\u5341\u5206\u5168\u9762\uff0c\u65e2\u53ef\u4ee5\u5f53\u533a\u95f4\u6811\u4e5f\u53ef\u4ee5\u5f53\u5e73\u8861\u6811(\u5f53\u7136\u8fd9\u4e24\u8005\u4e0d\u53ef\u517c\u987e)\n\n\u770b\u5230\u9898\u89e3\u91cc\u4e00\u5806dalao\u5199\u6570\u7ec4,\u4f46\u662fSplay\u672c\u6765\u662f\u5e94\u8be5\u7528\u6307\u9488\u5b9e\u73b0\u7684\uff08\u636e\u8bf4\u8fd9\u6837\u5e38\u6570\u4f1a\u5c0f\u5f88\u591a\uff09,\u4e8e\u662f\u849f\u84bb\u5c31\u5f00\u59cb\u5199\u8d77\u4e86\u6307\u9488Splay\u3002\u3002\u3002\n\n\u51fa\u4eba\u610f\u6599\uff0c\u6570\u7ec4Splay\u6211\u4e00\u904dA,\u6307\u9488\u6211\u5c45\u7136\u8c03\u8bd5\u4e86\u5c06\u8fd1\u4e00\u5e74\uff08\u771f\u4e8b\uff09~~\u6211\u679c\u7136\u592a\u849f\u4e86~~\u3002~~\u4f3c\u4e4e\u660e\u767d\u4e86\u5927\u5bb6\u4e3a\u4ec0\u4e48\u90fd\u4e0d\u7528\u6307\u9488~~\u3002\n\n\u4f46\u662f\uff0c\u4ece\u4e00\u904d\u904d\u7684\u8c03\u8bd5\u4e4b\u95f4\uff0c\u6211\u8fd8\u662f\u5b66\u5230\u4e86\u4e0d\u5c11\u4e1c\u897f\uff0c\u6bd4\u5982\u5982\u4f55\u589e\u52a0\u4ee3\u7801\u7684\u53ef\u8c03\u8bd5\u6027\uff0c\u5982\u4f55\u8003\u8651\u5230\u65b9\u65b9\u9762\u9762~~\u4ee5\u9632\u6b62RE~~\u3002\u8fd9\u53ef\u80fd\u4e5f\u662f\u4e00\u79cd\u8fdb\u6b65\u3002\u6700\u540e\u53d1\u73b0\uff0c\u5176\u5b9e\u6307\u9488Splay\u4e5f\u633a\u597d(nan)\u6253\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6307\u9488\u4e5f\u66f4\u65b9\u4fbf\u7406\u89e3\u3002\n\n\u4e3a\u4e86\u5e0c\u671b\u5927\u5bb6\u5c11\u8d70\u70b9\u5f2f\u8def.~~\u5e26\u5927\u5bb6\u5165\u8c03\u8bd5\u5927\u5751~~\u672c\u849f\u84bb\u89c9\u5f97\u6709\u5fc5\u8981\u5199\u4e00\u4efd\u8be6\u7ec6\u7684\u6307\u9488Splay\u9898\u89e3.\n\n\u5927\u90e8\u5206\u8d44\u6599\u6765\u6e90\u4e8e\u7f51\u7edc\u3002\n\n~~Spaly\u6700\u5feb\u4e86233~~\n\n## \u6b63\u6587\n(\u672c\u6587\u5047\u8bbe\u5927\u5bb6\u90fd\u5bf9\u4e8c\u53c9\u67e5\u627e\u6811\u6709\u57fa\u672c\u7406\u89e3\uff0c\u4e0d\u518d\u8d58\u8ff0\u4e00\u4e9b\u5e38\u8bc6.~~\u7f51\u4e0a\u7684\u8bb2\u7684\u6bd4\u6211\u597d\u591a\u4e86~~)\uff08\u672c\u6587\u9ed8\u8ba4\u8282\u70b9\u5de6\u5c0f\u53f3\u5927\uff09\n## \u4e00\u4e9b\u524d\u7f6e\u51fd\u6570\n\n### \u83b7\u53d6\u8282\u70b9\u7684\u5927\u5c0f\n```cpp\ninline unsigned int size(tree x){return x?x->size:0;}/*\u9632\u6b62x\u4e3a\u7a7a\u5bfc\u81f4\u8bbf\u95eeNULL\u7684\u4fe1\u606f(RE)*/\n```\n### \u7ef4\u62a4\u8282\u70b9\u5927\u5c0f\n```cpp\ninline void pushup(tree x){x->size=size(x->ch[0])+size(x->ch[1])+x->cnt;}//\u4e00\u4e2a\u8282\u70b9\u7684\u5927\u5c0f\u7b49\u4e8e\u5b83\u7684\u5de6\u5b50\u6811\u7684\u5927\u5c0f+\u53f3\u5b50\u6811\u5927\u5c0f+\u672c\u8eab\u7684\u4e2a\u6570(\u53ef\u4ee5\u6709\u91cd\u590d)\n```\n### \u83b7\u53d6\u8282\u70b9\u662f\u5b83\u7236\u4eb2\u7684\u90a3\u4e2a\u513f\u5b50\n```cpp\ninline bool wson(tree son,tree par)//0\u4e3a\u5de6\u513f\u5b50\uff0c\u4e00\u4e3a\u53f3\u513f\u5b50\n{\n\tif(!par)return 0;//\u7236\u4eb2\u4e3a\u7a7a\u9632\u6b62RE\n\treturn par->ch[1]==son;\n}\n```\n### \u5efa\u7acb\u7236\u5b50\u5173\u7cfb\n```cpp\ninline void buildfather(tree son,tree par,bool which)//0\u8868\u793a\u53d8\u4e3a\u5de6\u513f\u5b50\uff0c1\u8868\u793a\u53d8\u4e3a\u53f3\u513f\u5b50\n{\n\tif(son)son->par=par;\n\tif(par)par->ch[which]=son;\n\telse root=son;//\u5982\u679c\u7236\u4eb2\u4e3a\u7a7a\uff0c\u81ea\u7136\u5176\u4e3a\u6839\u3002\n}\n```\n### \u65cb\u8f6c\u64cd\u4f5c\n![](https://cdn.luogu.com.cn/upload/pic/26263.png)\n\n\u65cb\u8f6c\u64cd\u4f5c\u662fSplay Tree\u7684\u6838\u5fc3\u64cd\u4f5c\n\u5b83\u901a\u8fc7\u65cb\u8f6c\u5728\u4e0d\u7834\u574fBST\u7684\u6027\u8d28\u7684\u60c5\u51b5\u4e0b\uff0c\u8c03\u6574\u6811\u7684\u7ed3\u6784\u3002\n\n\u56fe\u4e2d\u53ef\u4ee5\u770b\u51faC>Q>B>P>A.\n\n\u6211\u4eec\u7684\u76ee\u6807\u662f\u5c06P\u8f6c\u5230Q\u7684\u4f4d\u7f6e\n\n\u76f4\u63a5\u4ea4\u6362\u80af\u5b9a\u4e0d\u884c\uff0c\u8fd9\u7834\u574f\u4e86BST\u7684\u6027\u8d28\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0cA\u4e0eC\u7684\u4f4d\u7f6e\u4e00\u5b9a\u662f\u56fa\u5b9a\u7684\u3002\n\nP,Q\u662f\u6211\u4eec\u9700\u8981\u4ea4\u6362\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9B\u8fdb\u884c\u6362\u4f4d\u6765\u4fdd\u8bc1BST\u7684\u6027\u8d28\u4e0d\u88ab\u7834\u574f\u3002\u4ee5\u53f3\u65cb\u4e3a\u4f8b\u3002\u53f3\u56fe\u4ecd\u7136\u6709C>Q>B>P>A.\n\n\u8fd9\u6837\u5c31\u6210\u529f\u5b9e\u73b0\u4e86\u4e0a\u65cb\u7684\u64cd\u4f5c\n\n\u4e2a\u4eba\u4e60\u60ef\u5c06\u5de6\u53f3\u65cb\u8f6c\u5199\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\n```cpp\ninline void rotate(tree x)\n{\n\ttree p=x->par,g=p->par;//\u8fd9\u91cc\u5bfc\u81f4\u6211\u8c03\u8bd5\u4e86\u4e00\u5e74\u3002\n\tbool r=wson(x,p);//\u672c\u6765\u6211\u4eff\u7167\u7684\u6570\u7ec4\u7684\u9898\u89e3\uff0c\u5c06wson(x)\u8868\u793ax\u4e3a\u5b83\u7684\u7236\u4eb2\u7684\u54ea\u4e00\u4e2a\u5b69\u5b50\u3002\u4f46\u662f\u65cb\u8f6c\u8fc7\u7a0b\u4e2d\u7236\u5b50\u5173\u7cfb\u4ea7\u751f\u4e86\u53d8\u5316\uff0c\u4e8e\u662f\u5c31\u5fc5\u987b\u63d0\u524d\u8bb0\u5f55\u597dpar,\u4e0egrandpar.\n\tbuildfather(x,g,wson(p,g));//\u5c06x\u63d0\u5230p\u7684\u4f4d\u7f6e\u3002\u5c31\u5fc5\u987b\u5c06g\u7684\u513f\u5b50\uff08p\uff09\u7684\u4f4d\u7f6e\u53d8\u6210x\u3002\u6240\u4ee5\u8fd9\u91cc\u7528\u4e86wson(p,g).\n\tbuildfather(x->ch[!r],p,r);//x->ch[!r]\u5373\u4e3a\u56fe\u4e2d\u7684B.\n\tbuildfather(p,x,!r);//\u5c06p\u8bbe\u4e3ax\u7684\u513f\u5b50\uff0c\u5728\u539f\u6765B\u7684\u4f4d\u7f6e\u4e0a\n\tpushup(p);//\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981pushup(x)\uff0cSplay\u51fd\u6570\u4f1a\u7ed9\u51fa\u76f8\u5173\u89e3\u91ca\n}\n```\n### Splay\u64cd\u4f5c\nSplay\u662fSplayTree\u7684\u6838\u5fc3\u64cd\u4f5c(\u5e9f\u8bdd)\u3002\n\u5b83\u901a\u8fc7rotate\uff0c\u5355\u65cb\u4e0e\u53cc\u65cb\u6765\u7ef4\u62a4Splay Tree\u7684\u6df1\u5ea6\u3002\n\u5982\u679c\u4e0d\u7406\u89e3\u53cc\u65cb(\u6216\u8005\u662fSpaly\u6559\u7684\u5fe0\u5b9e\u4fe1\u5949\u7740)\u53ef\u4ee5\u53c2\u8003[\u7f51\u4e0a\u8d44\u6599](https://www.zhihu.com/question/40777845)\n\n\u8fd9\u91cc\u56e0\u4e3a\u662f\u4e3b\u8981\u8bb2\u89e3\u6307\u9488\uff0c\u6240\u4ee5\u4e0d\u518d\u8d58\u8ff0\u3002\n```cpp\ninline void Splay(tree x,tree y)//\u5c06x\u8f6c\u5230y\u7684\u4e0b\u65b9\n{\n\twhile(x->par!=y)//\u76f4\u5230x\u7684\u7236\u4eb2\u662fy.\n\t{\n\t\ttree p=x->par,g=p->par;//\u540crotate\u53ca\u65f6\u9884\u5904\u7406\u597dp\u4e0eg.(\u867d\u7136\u8fd9\u91cc\u6ca1\u6709\u5fc5\u8981)\n\t\tif(x->par->par!=y)wson(x,p)^wson(p,g)?rotate(x):rotate(p);//\u5982\u679c\u6210\u4e00\u6761\u94fe\u5c31\u5148\u8f6cp,\u53cd\u4e4b\u8f6c\u4e24\u6b21x\n        rotate(x);\n\t}\n\tpushup(x);//\u586b\u5751\uff0c\u56e0\u4e3a\u4f60\u6bcf\u4e00\u6b21rotate\u90fd\u5c06x\u5411\u4e0a\u8f6c\uff0c\u90a3\u4e48\u4f60\u7684x\u7684size\u4e00\u5b9a\u4f1a\u4e00\u76f4\u6539\u53d8\uff0c\u6240\u4ee5\u5728rotate\u91cc\u9762pushup(x)\u6ca1\u6709\u610f\u4e49\u3002\u53ea\u9700\u8981\u5728\u6700\u540epushup(x)\u5373\u53ef\u3002\n}\n```\n### Insert\u64cd\u4f5c\n\u5efa\u6811\u65f6\uff0c\u5f53\u7136\u53ef\u4ee5\u9884\u5148\u8bfb\u5165\u6570\u636e\u6784\u5efa\u5b8c\u7f8e\u7684Splay.\n\u8fd9\u91cc\u53ea\u7ed9\u51faInsert.~~\u6bd5\u7adf\u590d\u6742\u5ea6\u4e5f\u6ca1\u5dee\u591a\u5c11~~\n```cpp\ninline void insert(int val)\n{\n\tif(!root)//\u7279\u5224root\u4e3a\u7a7a\u60c5\u51b5\n\t{\n\t\troot=new node(val,NULL);\n\t\treturn;\n\t}\n\tfor(tree x=root;x;x=x->ch[val>=x->val])//\u4eceroot\u5411\u4e0b\u63d2\u5165\uff0c\u6bcf\u6b21\u5224\u65ad\u5e94\u5f53\u8d70\u54ea\u8fb9\n\t{\n\t\tif(x->val==val)//\u5982\u679c\u5df2\u7ecf\u6709\u8fd9\u4e2a\u5143\u7d20\u4e86\u3002\u5219cnt++.\n\t\t{\n\t\t\tx->cnt++;\n\t\t\tSplay(x,NULL);//\u7ef4\u62a4Splay\u6df1\u5ea6\n\t\t\treturn;\n\t\t}\n\t\tif(!x->ch[val>=x->val])//\u5982\u679c\u5230\u4e86\u7a7a\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u8fd9\u4e2a\u8282\u70b9\n\t\t{\n\t\t\tx->ch[val>=x->val]=new node(val,x);//\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0cC++\u7684new\u548cdelete\u8f83\u6162\uff0c\u8fd9\u91cc\u4e3a\u4e86\u53cb\u597d\u4e00\u70b9\u5c31\u4e0d\u7528\u5185\u5b58\u6c60\u4e86233.\n\t\t\tSplay(x->ch[val>=x->val],NULL);\n\t\t\treturn;\n\t\t}\n\t}\n}\n```\n### Find\u64cd\u4f5c\n\u540c\u666e\u901aBST\n```cpp\ninline void find(int val)\n{\n\ttree x=root;\n\twhile(x/*root\u4e3a\u7a7a*/&&x->ch[val>x->val]/*\u8fd9\u91cc\u56e0\u4e3a\u8981\u7cbe\u786e\u67e5\u627e\u6240\u4ee5\u5c06>=\u5206\u5f00\u6210\u4e86>\u4e0e=\u4e24\u79cd\u60c5\u51b5*/&&val!=x->val/*\u627e\u5230\u4e86*/)x=x->ch[val>x->val];\n\tif(x)Splay(x,NULL);//\u8bb0\u5f97\u5728\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u8981Splay\n}\n```\n### Delete\u64cd\u4f5c\n\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u70b9.\n\n\u4f60\u5f53\u7136\u4e5f\u53ef\u4ee5\u5c06\u524d\u9a71\u65cb\u8f6c\u5230\u6839\uff0c\u540e\u7ee7\u65cb\u8f6c\u5230\u53f3\u5b50\u6811\uff0c\u7136\u540e\u76f4\u63a5\u5220\u9664\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u3002\u4f46\u8fd9\u6837\u9700\u8981\u63d0\u524d\u63d2\u5165INF\u4e0e-INF(\u6216\u7279\u5224)\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u5bb9\u6613\u51fa\u9519\uff0c\u6bd5\u7adf\u4f60\u7684Splay\u91cc\u591a\u4e86\u4e24\u4e2a\u8282\u70b9\uff0cfindkth(k),\u9700\u8981\u5c06k++(INF\u6c38\u8fdc\u6bd4\u4f60\u5927)\uff09\n\n\u8be6\u89c1\u6ce8\u91ca\n```cpp\ninline int del(int val)\n{\n\tfind(val);//\u5c06\u503c\u4e3aval\u7684\u70b9\u8f6c\u5230\u6839 \n\tif(root->val!=val)return;//\u627e\u4e0d\u5230\n\ttree x=root;\n\tif(x->cnt>1)x->cnt--;//\u591a\u4e8e\u4e00\u4e2a\u3002 \n\telse \n\tif(!x-ch[0])//\u6709\u4e00\u5b50\u6811\u4e3a\u7a7a \n\t{\n\t\troot=x->ch[1];//root\u8f6c\u79fb\u5230\u53e6\u5916\u4e00\u8fb9 \n\t\tif(root)root->par=NULL;//\u9632\u6b62RE. \n\t\tdelete x;//\u56de\u6536x \n\t}\n\telse//\u4e24\u5b50\u6811\u90fd\u975e\u7a7a \n\t{\n\t\ttree k=x->ch[0];//\u627e\u5230\u5de6\u5b50\u6811\u4e2d\u6700\u5927\u7684\u4e00\u4e2a \n\t\twhile(k->ch[1])k=k->ch[1];\n\t\tSplay(k,x);//\u5c06\u4ed6\u65cb\u8f6c\u5230\u5de6\u5b50\u6811\u7684\u6839\u4e0a \n\t\troot=k,root->par=NULL;//\u8fd9\u4e2a\u65f6\u5019\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u80af\u5b9a\u4e3a\u7a7a \n\t\tbuildfather(x->ch[1],root,1);//\u518d\u5c06\u53f3\u5b50\u6811\u8f6c\u79fb\u5230\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811 \n\t\tdelete x;//\u56de\u6536x \n\t}\n}\n```\n\u8fd9\u91cc\u7406\u89e3\u53ef\u80fd\u6709\u4e9b\u96be\u5ea6\uff0c\u53ef\u4ee5\u8003\u8651\u624b\u73a9\u4e00\u4e0b\u3002\n### kth\u64cd\u4f5c\n\u8fd9\u4e2a\u4e0d\u96be\uff0c\u4f46\u662f\u4e00\u5b9a\u8981\u753b\u51fa\u56fe\uff0c\u4e0d\u80fd\u60f3\u5f53\u7136!\n```cpp\ninline int findkth(int k)\n{\n\ttree x=root;\n\tassert(size(x)>=k);//\u5143\u7d20\u4e2a\u6570\u4e00\u5b9a\u8981\u81f3\u5c11\u6709k\u4e2a,\u4e14\u6ca1\u6709\u7b2c0\u5927 \n    assert(k);//\u4f60\u53ef\u4ee5\u9009\u62e9\u65e0\u89c6\u8fd9\u4e24\u53e5\u8bdd\n\twhile(x)\n\t{\n\t\tif(size(x->ch[0])+x->cnt>=k&&size(x->ch[0])<k)return x->val;//\u5982\u679c\u4f60\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u52a0\u4e0a\u4f60\u7684\u4e2a\u6570>=k\u5e76\u4e14\u4f60\u5de6\u5b50\u6811\u7684\u5927\u5c0f<k\u90a3\u4e48\u4f60\u5c31\u662f\u7b2ck\u5927\n\t\tif(size(x->ch[0])>=k)x->ch[0];//\u5982\u679c\u5de6\u5b50\u6811\u5927\u5c0f\n\t\telse k-=size(x->ch[0])+x->cnt,x=x->ch[1]; //\n\t}\n\treturn -2147483647;//\u51fa\u73b0\u672a\u77e5\u9519\u8bef (\u6811\u7684\u6784\u5efa\u53ef\u80fd\u51fa\u73b0\u95ee\u9898)\uff08\u5982\u679c\u4f60\u5176\u4ed6\u5730\u65b9\u6b63\u786e\uff0c\u8fd9\u91cc\u5e76\u4e0d\u4f1a\u6709\u7528\uff09\n}\t\n```\n### \u524d\u9a71\u4e0e\u540e\u7ee7(pre&nxt)\u64cd\u4f5c\n\u524d\u9a71\u5c31\u662f\u6bd4\u4f60\u5c0f\u7684\u6700\u5927\u7684\u4e00\u4e2a\n\u540e\u7ee7\u5c31\u662f\u6bd4\u4f60\u5927\u7684\u6700\u5c0f\u7684\u4e00\u4e2a\n\u6240\u4ee5\u524d\u9a71\u5c31\u662f\u5de6\u5b50\u6811\u7684\u6700\u53f3\u4e00\u4e2a\n\u540e\u7ee7\u540c\u7406\n\u8fd9\u91cc\u53ea\u5bf9\u4e8e\u524d\u9a71\u505a\u51fa\u8bf4\u660e\n```cpp\ninline int pre(int val)\n{\n\tinsert(val);//\u63d2\u5165val,\u5b83\u4f1a\u88ab\u8f6c\u5230root\n\ttree x=x->root->ch[0];\n\twhile(x->ch[1])x=x->ch[1];//\u627e\u5230\u6bd4val\u5c0f\u7684\u6700\u5927\u7684\u6570\n\tdel(val);//\u518d\u5220\u6389\n\treturn x->val;\n}\ninline int nxt(int val)\n{\n\tinsert(val);\n\ttree x=x->root->ch[1];\n\twhile(x->ch[0])x=x->ch[0];\n\tdel(val);\n\treturn x->val;\n}\n```\n## \u5b8c\u6574\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define IL inline\n#define RG register\n#define gi getint()\n#define pi(k) putint(k)\n#define gc getchar()\n#define File(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\nIL int getint()\n{\n    RG int xi=0;\n    RG char ch=gc;\n    bool f=0;\n    while(ch<'0'|ch>'9')ch=='-'?f=1:f,ch=gc;\n    while(ch>='0'&ch<='9')xi=(xi<<1)+(xi<<3)+ch-48,ch=gc;\n    return f?-xi:xi;\n}\nIL void putint(int k)\n{\n    if(k<0)k=-k,putchar('-');\n    if(k>=10)putint(k/10);\n    putchar(k%10+'0');\n}\nstruct SplayTree{\n\tstruct node;\n\ttypedef node* tree;\n\tstruct node{\n\t\ttree ch[2],par;\n\t\tint size,val,cnt;\n\t\tnode(int value,tree fa)\n\t\t{\n\t\t\tval=value,par=fa;\n\t\t\tsize=1,cnt=1;\n\t\t\tch[0]=ch[1]=NULL; \n\t\t}\n\t}*root;\n\tSplayTree(){root=NULL;}\n\tinline int size(tree x){return x?x->size:0;}\n//\t#define size(x) (x?x->size:0)\n\tinline void pushup(tree x){if(x)x->size=size(x->ch[0])+size(x->ch[1])+x->cnt;}\n\tinline void buildfather(tree son,tree par,bool which)\n\t{\n\t\tif(son)son->par=par;\n\t\tif(par)par->ch[which]=son;\n\t\telse root=son;\n\t}\n\tinline bool wson(tree son,tree par)\n\t{\n\t\tif(!par)return 0;\n\t\treturn par->ch[1]==son;\n\t}\n\tinline void rotate(tree x)\n\t{\n\t\ttree p=x->par,g=p->par;\n\t\tbool r=wson(x,p);\n\t\tbuildfather(x,g,wson(p,g));\n\t\tbuildfather(x->ch[!r],p,r);\n\t\tbuildfather(p,x,!r);\n\t\tpushup(p);\n\t}\n\tinline void Splay(tree x,tree y)\n\t{\n\t\twhile(x->par!=y)\n\t\t{\n\t\t\ttree p=x->par,g=p->par;\n\t\t\tif(x->par->par!=y)wson(x,p)^wson(p,g)?rotate(x):rotate(p);\n\t\t\trotate(x);\n\t\t}\n\t\tpushup(x);\n\t}\n\tinline void insert(int val)\n\t{\n\t\tif(!root)\n\t\t{\n\t\t\troot=new node(val,NULL);\n\t\t\treturn;\n\t\t}\n\t\tfor(tree x=root;x;x=x->ch[val>=x->val])\n\t\t{\n\t\t\tif(x->val==val)\n\t\t\t{\n\t\t\t\tx->cnt++;\n\t\t\t\tSplay(x,NULL);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(!x->ch[val>=x->val])\n\t\t\t{\n\t\t\t\tx->ch[val>=x->val]=new node(val,x);\n\t\t\t\tSplay(x->ch[val>=x->val],NULL);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tinline void find(int val)\n\t{\n\t\ttree x=root;\n\t\twhile(x&&x->ch[val>x->val]&&val!=x->val)x=x->ch[val>x->val];\n\t\tif(x)Splay(x,NULL);\n\t}\n\tinline int findkth(int k)\n\t{\n\t\ttree x=root;\n\t\tassert(size(x)>=k);\n        assert(k);\n\t\twhile(x)\n\t\t{\n\t\t\tif(size(x->ch[0])+x->cnt>=k&&size(x->ch[0])<k)return x->val;\n\t\t\tif(size(x->ch[0])>=k)x=x->ch[0];\n\t\t\telse k-=size(x->ch[0])+x->cnt,x=x->ch[1]; \n\t\t}\n\t\treturn -2147483647;\n\t}\n\tinline void del(int val)\n\t{\n\t\tfind(val);\n\t\tif(root->val!=val)return;\n\t\ttree x=root;\n\t\tif(x->cnt>1)x->cnt--;\n\t\telse \n\t\tif(!x->ch[0])\n\t\t{\n\t\t\troot=x->ch[1];\n\t\t\tif(root)root->par=NULL; \n\t\t\tdelete x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttree k=x->ch[0];\n\t\t\twhile(k->ch[1])k=k->ch[1];\n\t\t\tSplay(k,x);\n\t\t\troot=k,root->par=NULL;\n\t\t\tbuildfather(x->ch[1],root,1); \n\t\t\tdelete x;\n\t\t}\n\t}\n\tinline int pre(int val)\n\t{\n\t\tinsert(val);\n\t\ttree x=root->ch[0];\n\t\twhile(x->ch[1])x=x->ch[1];\n\t\tdel(val);\n\t\treturn x->val;\n\t}\n\tinline int nxt(int val)\n\t{\n\t\tinsert(val);\n\t\ttree x=root->ch[1];\n\t\twhile(x->ch[0])x=x->ch[0];\n\t\tdel(val);\n\t\treturn x->val;\n\t}\n}bt; \nint main(void)\n{\n\tint n=gi;\n    int a;\n    for(RG int i=1; i<=n; i++)\n        switch(gi)\n        {\n            case 1:\n                a=gi;\n                bt.insert(a);\n                break;\n            case 2:\n                a=gi;\n                bt.del(a);\n                break;\n            case 3:\n                a=gi;\n                bt.find(a);\n                printf(\"%d\\n\",bt.size(bt.root->ch[0])+1);//\u8fd9\u80fd\u7406\u89e3\u5417\n                break;\n            case 4:\n                a=gi;\n                printf(\"%d\\n\",bt.findkth(a));\n                break;\n            case 5:\n                a=gi;\n                printf(\"%d\\n\",bt.pre(a));\n                break;\n            case 6:\n                a=gi;\n                printf(\"%d\\n\",bt.nxt(a));\n                break;\n        }\n    return 0;\n}\n```",
        "postTime": 1533176963,
        "uid": 19607,
        "name": "ACA\u306d",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u77e5\u9053\u5e73\u8861\u6811\u7684\u6c34\u5f88\u6df1\uff0c\u4f46\u662f\u4e00\u76f4\u6ca1\u6709\u65f6\u95f4\u7cfb\u7edf\u7684\u5b66\u4e60\uff0c\u6700\u8fd1\u94bb\u7814\u4e86\u4e00\u4e0b\uff0c\u5728\u8fd9\u91cc\u8bf4\u8bf4\u6211\u7684\u5fc3\u5f97\u3002\n\n## \u66ff\u7f6a\u7f8a\u6811\n\n\u6700\u66b4\u529b\u7684\u5e73\u8861\u6811\uff0c\u4f46\u662f\u5728\u968f\u673a\u60c5\u51b5\u4e0b\u8dd1\u7684\u98de\u5feb23333.\n\n\u66ff\u7f6a\u7f8a\u6811\u7684\u4e3b\u8981\u601d\u60f3\u662f**\u91cd\u91cf\u5e73\u8861**\uff0c\u4e5f\u5c31\u662f\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u7684\u4e24\u68f5\u5b50\u6811\u6240\u542b\u7684\u8282\u70b9\u6570\u5927\u81f4\u76f8\u7b49\u3002\u6211\u4eec\u7528\u4e00\u4e2a\u5e38\u6570$~\\alpha$ \u6765\u8868\u793a\u8fd9\u4e00\u89c4\u5b9a\uff0c\u4fdd\u8bc1\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u4efb\u4e00\u5b50\u6811\u5927\u5c0f\u4e0e\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\u4e4b\u6bd4\u5c0f\u4e8e$~\\alpha$ \u3002\u66ff\u7f6a\u7f8a\u6811\u5c31\u662f\u6839\u636e\u8fd9\u4e00\u89c4\u5b9a\u7ef4\u6301\u5e73\u8861\u7684\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c$~\\alpha$ \u53d60.6~0.8\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u6570\u636e\uff0c\u5b58\u5728\u4e00\u5b9a\u7684\u6548\u7387\u504f\u5dee\u3002\n\n\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u51fa\u73b0\u4e86\u5931\u8861\u7684\u60c5\u51b5\uff0c\u5982\u4f55\u7ef4\u62a4\u5b83\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u7528\u6700\u66b4\u529b\u7684\u65b9\u6cd5\uff1a\u62cd\u6241\u91cd\u5efa\uff01\n\n\u5c06\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5b58\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u8fd9\u4e2a\u533a\u95f4\u7684\u5347\u5e8f\u6392\u5217\u3002\u6211\u4eec\u6bcf\u6b21\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u534a\uff0c\u518d\u9012\u5f52\u5efa\u6811\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5efa\u6210\u4e00\u68f5\u6bd4\u8f83\u5e73\u8861\u7684\u6811\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u52bf\u80fd\u5206\u6790\u63a8\u51fa\u66ff\u7f6a\u7f8a\u6811\u7684\u5747\u644a\u590d\u6742\u5ea6\u662f$O(nlogn)$\uff0c\u8be6\u7ec6\u7684\u8bc1\u660e\u53ef\u4ee5\u770b\u770b[\u8fd9\u4e00\u7bc7\u6587\u7ae0](https://www.zhihu.com/question/51891585)\u3002\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u66ff\u7f6a\u7f8a\u6811\u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u5185\u5b58\u6d6a\u8d39\uff0c\u4e60\u60ef\u4e0a\u4f7f\u7528\u6307\u9488\u548c\u5185\u5b58\u6c60\u6253\u6cd5\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u4f7f\u7528\u4e00\u4e2a\u6807\u8bb0\u8bb0\u5f55\u662f\u5426\u88ab\u5220\u9664\uff0c\u5728\u91cd\u6784\u65f6\u518d\u7edf\u4e00\u56de\u6536\u5185\u5b58\u3002\n\n```cpp\n\nconstexpr static const double alpha=0.75;//\u5e73\u8861\u5e38\u6570 \nstruct Node{\n\tNode* son[2];//\u5b50\u6811\u6307\u9488 \n\tint siz,cnt,val;//val->\u952e\u503c \n\tbool exist;//\u662f\u5426\u88ab\u5220\u9664 \n \tvoid pushup(){siz=son[0]->siz+son[1]->siz+exist;cnt=son[0]->cnt+son[1]->cnt+1;}//\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0 \n \tbool needdel(){return (son[0]->cnt>cnt*alpha+5)||(son[1]->cnt>cnt*alpha+5);}//\u662f\u5426\u9700\u8981\u91cd\u6784 \n};\n```\nsiz\u8868\u793a\u8be5\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u672a\u88ab\u5220\u9664\u7684\u8282\u70b9\uff0ccnt\u8868\u793a\u8be5\u8282\u70b9\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u603b\u548c\u3002\u8fd9\u4e24\u4e2a\u503c\u5728\u4ee5\u540e\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u6709\u7528\u5904\u3002\n\n\u63a5\u4e0b\u6765\u662f\u5185\u5b58\u6c60\u7684\u57fa\u672c\u64cd\u4f5c\uff1a\n```cpp\nNode memorypool[MN];//\u5185\u5b58\u6c60 \nNode *NIL,*root,*tot;//\u7528NIL\u66ff\u4ee3NULL\u6307\u9488\uff0ctot\u8868\u793a\u5f53\u524d\u53ef\u4ee5\u6dfb\u52a0\u7684\u4f4d\u7f6e \nNode *deleted[MN];//\u88ab\u5220\u9664\u7684\u8282\u70b9\u5730\u5740\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5185\u5b58\u91cd\u5229\u7528 \nint deltop;\nNode* newnode(int k){//\u521b\u5efa\u65b0\u8282\u70b9 \n \tNode* p=deltop?deleted[--deltop]:tot++;//\u5206\u914d\u5185\u5b58 \n \tp->son[0]=p->son[1]=NIL;p->val=k;\n \tp->siz=p->cnt=1;p->exist=true;//\u521d\u59cb\u5316 \n\treturn p;\n}\n```\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u770b\u5982\u4f55\u5b8c\u6210\u91cd\u6784\u7684\u8fc7\u7a0b\u3002\n```cpp\nvoid getarray(Node* p,vector<Node*>&a){//\u5f97\u5230\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff08\u62cd\u6241\u7684\u8fc7\u7a0b\uff09 \n\tif(p==NIL)return;getarray(p->son[0],a);//\u9012\u5f52\u66f4\u65b0 \n\tif(p->exist)a.push_back(p);\n\telse deleted[deltop++]=p;//\u56de\u6536\u5185\u5b58 \n\tgetarray(p->son[1],a);\n}\nNode* divide(vector<Node*>&a,int l,int r){//\u91cd\u65b0\u5efa\u6811 \n\tif(l>=r)return NIL;Node* p=a[mid];//\u53d6\u4e2d\u70b9\u4f5c\u4e3a\u6839 \n \tp->son[0]=divide(a,l,mid);p->son[1]=divide(a,mid+1,r);//\u9012\u5f52\u91cd\u5efa \n \tp->pushup();return p;\n}\nvoid rebuild(Node* &p){//\u91cd\u6784\u51fd\u6570 \n\tstatic vector<Node*>a;a.clear();\n    getarray(p,a);p=divide(a,0,a.size());\n}\n```\n\u5728\u63d2\u5165\u548c\u5220\u9664\u7684\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u6253\u6807\u8bb0\u7684\u65b9\u5f0f\u5220\u9664\uff0c\u540c\u65f6\u5904\u7406\u91cd\u6784\u7684\u95ee\u9898\u3002\n```cpp\nNode** insert(Node* &p,int v){//\u63d2\u5165\u51fd\u6570,\u8fd4\u56de\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff08\u7b11\uff09\n\tif(p==NIL){p=newnode(v);return &NIL;}//\u65b0\u5efa\u8282\u70b9 \n    p->siz++;p->cnt++;Node** res=insert(p->son[p->val<=v],v);\n    if(p->needdel())res=&p;return res;//\u5982\u679c\u9700\u8981\u5220\u9664\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u8be5\u8282\u70b9\u7684\u4f4d\u7f6e \n}\nvoid erase(Node* p,int rk){\n   \tp->siz--;reg int pren=p->son[0]->siz+p->exist;//pren\u8868\u793a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u8282\u70b9\u6570\u91cf \n    if(p->exist&&rk==pren){p->exist=false;return;}//\u6253\u6807\u8bb0 \n    else if(rk<=pren)erase(p->son[0],rk);\n    else erase(p->son[1],rk-pren);\n}\n```\n\u63a5\u4e0b\u6765\u7684\u662f\u5e73\u8861\u6811\u7684\u6b63\u5e38\u64cd\u4f5c\uff1a\n```cpp\nint find(int v){//\u67e5\u627e\u952e\u503c\u4e3av\u7684\u5143\u7d20\u7684\u6700\u5c0f\u6392\u540d \n\tNode* p=root;reg int ans=1;\n    while(p!=NIL)//\u975e\u9012\u5f52\u67e5\u627e \n     \tif(p->val>=v)p=p->son[0];\n        else ans+=p->son[0]->siz+p->exist,p=p->son[1];\n        return ans;\n}\nint findx(int k){//\u67e5\u627e\u7b2ck\u5927\u7684\u5143\u7d20 \n    Node* p=root;\n    while(p!=NIL){\n        if(p->son[0]->siz+1==k&&p->exist)return p->val;//\u627e\u5230 \n        if(p->son[0]->siz>=k)p=p->son[0];\n        else k-=p->son[0]->siz+p->exist,p=p->son[1];\n    }\n}\n```\n\u63d2\u5165\u548c\u5220\u9664\u7684\u64cd\u4f5c\u4e5f\u76f8\u5bf9\u7b80\u5355\uff1a\n```cpp\nvoid init(){//\u521d\u59cb\u5316 \n \ttot=memorypool;NIL=tot++;NIL->son[0]=NIL->son[1]=NIL;\n    NIL->cnt=NIL->siz=NIL->val=deltop=0;root=NIL;\n}\nvoid ins(int v){\n    Node** p=insert(root,v);if(*p!=NIL)rebuild(*p);//\u91cd\u6784\u9700\u8981\u8c03\u6574\u7684\u6700\u9ad8\u7684\u8282\u70b9 \n}\nvoid del(int v){//\u5220\u9664\u8282\u70b9 \n    erase(root,find(v));\n    if(root->siz<alpha*root->cnt)rebuild(root);//\u91cd\u6784 \n}\n```\n\u5bf9\u4e8e\u67e5\u627e\u524d\u9a71\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u67e5\u627e\u6bd4\u5b83\u7684\u6392\u540d\u7b2c\u4e00\u4f4d\u7684\u5143\u7d20\uff1b\n\n\u5bf9\u4e8e\u540e\u7ee7\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\u6bd4\u5b83\u59271\u7684\u5143\u7d20\u7684\u6392\u540d\uff0c\u518d\u67e5\u627e\u8be5\u6392\u540d\u6240\u5bf9\u7684\u5143\u7d20\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u5e73\u8861\u6811\u7684\u4e3b\u8981\u64cd\u4f5c\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u65e0\u9700\u65cb\u8f6c\uff0c\u66ff\u7f6a\u7f8a\u6811\u53ef\u4ee5\u652f\u6301\u5bf9\u4e8e\u5386\u53f2\u7248\u672c\u7684\u67e5\u8be2\u3002\n\n\u63a5\u4e0b\u6765\u4e0a\u4ee3\u7801\u5566\uff01~~\uff08\u592a\u4e11\u52ff\u55b7\uff09~~\n```cpp\n//Luogu3369\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing std::vector;\n#define reg register\ntypedef long long ll;\ntemplate<typename T>inline T read(){\n    reg T x=0;reg short f=1;reg char c=getchar();\n    for(;!isdigit(c);f=c=='-'?-1:1,c=getchar());\n    for(;isdigit(c);x=x*10+(c^48),c=getchar());\n    return x*f;\n}\nconst int MN=2e6+5;\nclass ScapeGoat{\n#define mid (l+r>>1)\n    private:\n        constexpr static const double alpha=0.75;//\u5e73\u8861\u5e38\u6570 \n        struct Node{\n            Node* son[2];//\u5b50\u6811\u6307\u9488 \n            int siz,cnt,val;//siz->\u5b9e\u9645\u5b58\u5728\u7684\u5b50\u6811\u5927\u5c0f\uff1bcnt->\u4ece\u5c5e\u4e8e\u8be5\u8282\u70b9\u5b50\u6811\u7684\u603b\u7ed3\u70b9\u6570\uff1bval->\u952e\u503c \n            bool exist;//\u662f\u5426\u88ab\u5220\u9664 \n            void pushup(){siz=son[0]->siz+son[1]->siz+exist;cnt=son[0]->cnt+son[1]->cnt+1;}//\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0 \n            bool needdel(){return (son[0]->cnt>cnt*alpha+5)||(son[1]->cnt>cnt*alpha+5);}//\u662f\u5426\u9700\u8981\u91cd\u6784\n        };\n    protected:\n        Node memorypool[MN];//\u5185\u5b58\u6c60 \n        Node *NIL,*root,*tot;//\u7528NIL\u66ff\u4ee3NULL\u6307\u9488\uff0ctot\u8868\u793a\u5f53\u524d\u53ef\u4ee5\u6dfb\u52a0\u7684\u4f4d\u7f6e \n        Node *deleted[MN];//\u88ab\u5220\u9664\u7684\u8282\u70b9\u5730\u5740\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5185\u5b58\u91cd\u5229\u7528 \n        int deltop;\n        Node* newnode(int k){//\u521b\u5efa\u65b0\u8282\u70b9 \n            Node* p=deltop?deleted[--deltop]:tot++;//\u5206\u914d\u5185\u5b58 \n            p->son[0]=p->son[1]=NIL;p->val=k;\n            p->siz=p->cnt=1;p->exist=true;//\u521d\u59cb\u5316 \n            return p;\n        }\n        void getarray(Node* p,vector<Node*>&a){//\u5f97\u5230\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff08\u62cd\u6241\u7684\u8fc7\u7a0b\uff09 \n            if(p==NIL)return;getarray(p->son[0],a);//\u9012\u5f52\u66f4\u65b0 \n            if(p->exist)a.push_back(p);\n            else deleted[deltop++]=p;//\u56de\u6536\u5185\u5b58 \n            getarray(p->son[1],a);\n        }\n        Node* divide(vector<Node*>&a,int l,int r){//\u91cd\u65b0\u5efa\u6811 \n            if(l>=r)return NIL;Node* p=a[mid];//\u53d6\u4e2d\u70b9\u4f5c\u4e3a\u6839 \n            p->son[0]=divide(a,l,mid);p->son[1]=divide(a,mid+1,r);//\u9012\u5f52\u91cd\u5efa \n            p->pushup();return p;\n        }\n        void rebuild(Node* &p){//\u91cd\u6784\u51fd\u6570 \n            static vector<Node*>a;a.clear();\n            getarray(p,a);p=divide(a,0,a.size());\n        }\n        Node** insert(Node* &p,int v){//\u63d2\u5165\u51fd\u6570,\u8fd4\u56de\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff08\u7b11\uff09 \n            if(p==NIL){p=newnode(v);return &NIL;}//\u65b0\u5efa\u8282\u70b9 \n            p->siz++;p->cnt++;Node** res=insert(p->son[p->val<=v],v);\n            if(p->needdel())res=&p;return res;//\u5982\u679c\u9700\u8981\u5220\u9664\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u8be5\u8282\u70b9\u7684\u4f4d\u7f6e \n        }\n        void erase(Node* p,int rk){\n            p->siz--;reg int pren=p->son[0]->siz+p->exist;//pren\u8868\u793a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u8282\u70b9\u6570\u91cf \n            if(p->exist&&rk==pren){p->exist=false;return;}//\u6253\u6807\u8bb0 \n            else if(rk<=pren)erase(p->son[0],rk);\n            else erase(p->son[1],rk-pren);\n        }\n    public:\n        ScapeGoat(){init();}\n        int find(int v){//\u67e5\u627e\u952e\u503c\u4e3av\u7684\u5143\u7d20\u7684\u6700\u5c0f\u6392\u540d \n            Node* p=root;reg int ans=1;\n            while(p!=NIL)//\u975e\u9012\u5f52\u67e5\u627e \n                if(p->val>=v)p=p->son[0];\n                else ans+=p->son[0]->siz+p->exist,p=p->son[1];\n            return ans;\n        }\n        int findx(int k){//\u67e5\u627e\u7b2ck\u5927\u7684\u5143\u7d20 \n            Node* p=root;\n            while(p!=NIL){\n                if(p->son[0]->siz+1==k&&p->exist)return p->val;//\u627e\u5230 \n                if(p->son[0]->siz>=k)p=p->son[0];\n                else k-=p->son[0]->siz+p->exist,p=p->son[1];\n            }\n        }\n        void init(){//\u521d\u59cb\u5316 \n            tot=memorypool;NIL=tot++;NIL->son[0]=NIL->son[1]=NIL;\n            NIL->cnt=NIL->siz=NIL->val=deltop=0;root=NIL;\n        }\n        void ins(int v){\n            Node** p=insert(root,v);if(*p!=NIL)rebuild(*p);//\u91cd\u6784\u9700\u8981\u8c03\u6574\u7684\u6700\u9ad8\u7684\u8282\u70b9 \n        }\n        void del(int v){//\u5220\u9664\u8282\u70b9 \n            erase(root,find(v));\n            if(root->siz<alpha*root->cnt)rebuild(root);//\u91cd\u6784 \n        }\n}S;\nint main(){\n    reg int n=read<int>(),opt,x;\n    while(n--){\n        opt=read<int>();x=read<int>();\n        switch(opt){\n            case 1:S.ins(x);break;\n            case 2:S.del(x);break;\n            case 3:printf(\"%d\\n\",S.find(x));break;\n            case 4:printf(\"%d\\n\",S.findx(x));break;\n            case 5:printf(\"%d\\n\",S.findx(S.find(x)-1));break;\n            case 6:printf(\"%d\\n\",S.findx(S.find(x+1)));break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1530754228,
        "uid": 17930,
        "name": "Marser",
        "ccfLevel": 0,
        "title": "\u5e38\u7528\u7684\u5e73\u8861\u6811\u2014\u2014\u66ff\u7f6a\u7f8a\u6811"
    },
    {
        "content": "\uff08\u8fd9\u662f\u4e00\u4efd\u8d70\u9519\u5730\u65b9\u7684\u9898\u89e3\uff09\n\n\u8fd9\u9053\u9898\u4f3c\u4e4e\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u505a\u554a\n\n\u9996\u5148\u628a\u64cd\u4f5c\u7684X\u79bb\u6563\u5316\uff0c\u4e0d\u8fc7\u8981\u5ffd\u7565opt=4\n\n\n\u9700\u8981\u7ef4\u62a4\u7684\u64cd\u4f5c\uff1a\n\n\n```cpp\n1.    \u5355\u70b9\u589e\u51cf\uff08opt == 1 or 2\uff09\n2.    \u533a\u95f4\u6c42\u548c\uff08opt == 3\uff09\n3.    \u5168\u5c40\u7b2cK\u5927\uff08opt == 4\uff09\n4.    \u533a\u95f4\u6700\u503c\uff08opt == 5 or 6\uff09\n```\n\u4e0b\u9762\u4e0a\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <algorithm>\n\ninline int getch() {\n    static int size = 0, pt = 0;\n    static char buf[1048576];\n    if(size == pt) {\n        if((size = fread(buf, sizeof(char), 1048575, stdin)) == 0)\n            return EOF;\n        buf[size] = 0;\n        pt = 0;\n    }\n    return buf[pt++];\n}\n\ninline int get_int() {\n    int ch = getch(), flag = 1, x;\n    while((ch != EOF) && (ch != '-') && (unsigned)(ch ^'0') > 9) ch = getch();\n    if(ch == EOF) return EOF;\n    if(ch == '-') flag = -1, ch = getch();\n    x = ch ^ '0';\n    for(ch = getch(); (unsigned)(ch ^ '0') < 10; ch = getch())\n        x = (x << 3) + (x << 1) + (ch ^ '0');\n    return x * flag;\n}\n\nstruct IN {\n    IN &operator >> (int &a) {\n        return a = get_int(), *this;\n    }\n} in;\n\ntemplate <int DATA_SIZE>\nclass SegmentTree {\n#define lch(a) (a<<1)\n#define rch(a) ((a<<1)|1)\n    struct Node{\n        int size, l, r, mid;\n    } node[DATA_SIZE];\n    int N;\n    void init_DFS(const int l, const int r, const int now) {\n        node[now].size = 0;\n        node[now].mid = ((node[now].l = l) + (node[now].r = r)) >> 1;\n        if(l != r) {\n            init_DFS(l, node[now].mid, lch(now));\n            init_DFS(node[now].mid + 1, r, rch(now));\n        }\n    }\n    int calSum(const int l, const int r, const int now) {\n        if(l <= node[now].l && node[now].r <= r) return node[now].size;\n        register int ret = 0;\n        if(l <= node[now].mid) ret = calSum(l, r, lch(now));\n        if(r > node[now].mid) ret += calSum(l, r, rch(now));\n        return ret;\n    }\n    int findMax(const int l, const int r, const int now) {\n        if(!node[now].size) return 0;\n        if(node[now].l == node[now].r) return node[now].r;\n        if(r > node[now].mid) {\n            register int ret = findMax(l, r, rch(now));\n            if(ret) return ret;\n        }\n        return findMax(l, r, lch(now));\n    }\n    int findMin(const int l, const int r, const int now) {\n        if(!node[now].size) return 0x7FFFFFFF;\n        if(node[now].l == node[now].r) return node[now].l;\n        if(l <= node[now].mid) {\n            register int ret = findMin(l, r, lch(now));\n            if(ret != 0x7FFFFFFF) return ret;\n        }\n        return findMin(l, r, rch(now));\n    }\npublic:\n    void init(const int n) {\n        N = n;\n        init_DFS(1, N, 1);\n    }\n    void increase(const int pos) {\n        register int pt = 1;\n        do {\n            ++node[pt].size;\n            if(node[pt].mid >= pos) pt = lch(pt);\n            else pt = rch(pt);\n        }while(node[pt].l != node[pt].r);\n        ++node[pt].size;\n    }\n    void decrease(const int pos) {\n        register int pt = 1;\n        do {\n            --node[pt].size;\n            if(node[pt].mid >= pos) pt = lch(pt);\n            else pt = rch(pt);\n        }while(node[pt].l != node[pt].r);\n        --node[pt].size;\n    }\n    int getRank(const int pos) {\n        return calSum(1, pos - 1, 1) + 1;\n    }\n    int getNum(int Kth) {\n        register int pt = 1;\n        do {\n            if(node[lch(pt)].size >= Kth) pt = lch(pt);\n            else Kth -= node[lch(pt)].size, pt = rch(pt);\n        }while(node[pt].l != node[pt].r);\n        return node[pt].l;\n    }\n    int findPre(const int x) {\n        return findMax(1, x - 1, 1);\n    }\n    int findSuf(const int x) {\n        return findMin(x + 1, N, 1);\n    }\n#undef lch\n#undef rch\n};\n\nSegmentTree<400020> seg;\n\nint N, M, Opt[100005], X[100005], Num[100005];\n\ninline void init() {\n    N = get_int();\n    M = 0;\n    for(register int i = 1; i <= N; ++i) {\n        Opt[i] = get_int();\n        X[i] = get_int();\n        if(Opt[i] != 4) Num[++M] = X[i];\n    }\n    std::sort(Num + 1, Num + M + 1);\n    M = std::unique(Num + 1, Num + M + 1) - Num - 1;\n    for(register int i = 1; i <= N; ++i)\n        if(Opt[i] != 4) X[i] = std::lower_bound(Num + 1, Num + M + 1, X[i]) - Num;\n    seg.init(M);\n}\n\ninline void solve() {\n    for(register int i = 1; i <= N; ++i) {\n        switch(Opt[i]) {\n            case 1:    seg.increase(X[i]);                                    break;\n            case 2:    seg.decrease(X[i]);                                    break;\n            case 3:    printf(\"%d\\n\", seg.getRank(X[i]));        break;\n            case 4: printf(\"%d\\n\", Num[seg.getNum(X[i])]);    break;\n            case 5: printf(\"%d\\n\", Num[seg.findPre(X[i])]);break;\n            case 6: printf(\"%d\\n\", Num[seg.findSuf(X[i])]);break;\n        }\n    }\n}\n\nint main() {\n    freopen(\"test.in\", \"r\", stdin);\n    freopen(\"test.out\", \"w\", stdout);\n    init();\n    solve();\n    return 0;\n}\n```\n\u867d\u7136\u6bd4\u8f83\u957f\uff0c\u4f46\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355 \uff08\u5417\uff1f\uff09\n",
        "postTime": 1505991403,
        "uid": 38765,
        "name": "H1KHC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u867d\u7136\u8fd9\u91cc\u662f\u5e73\u8861\u6811\u6a21\u677f\uff0c\u4f46\u662f\u4e8b\u5b9e\u8bc1\u660e\uff0cSTL\u662f\u5341\u5206\u5f3a\u5927\u7684......\n\n\u8bba\u719f\u7ec3\u4f7f\u7528STL\u7684\u91cd\u8981\u6027......\n\n\n\u6240\u4ee5\uff0c\u54b1\u7528\u4e86\u4e00\u4e2avector\u5c31\u6c34\u8fc7\u53bb\u4e86......\n\n\u4e0b\u9762\u5168\u662fSTL\u7684\u59ff\u52bf\uff0c\u4ec5\u4f9b\u53c2\u8003......\n\n\n```cpp\n#include<iostream>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0' || '9'<ch)\n    {\n        if(ch=='-')\n            f=-1;\n        ch=getchar();\n    }\n    while('0'<=ch && ch<='9')\n    {\n        x=x*10+(ch^48);\n        ch=getchar();\n    }\n\n    return x*f;\n}\n\nvector<int> weactor;\n\nint main()\n{\n    int n=read();\n\n    for(int i=1,ty,u;i<=n;i++)\n    {\n        ty=read();\n        u=read();\n\n        switch(ty)\n        {\n            case 1:\n            {\n                if(weactor.size())\n                    weactor.insert(lower_bound(weactor.begin(),weactor.end(),u),u);\n                else\n                    weactor.push_back(u);\n            }\n            break;\n\n            case 2:\n                weactor.erase(lower_bound(weactor.begin(),weactor.end(),u));\n            break;\n\n            case 3:\n                printf(\"%d\\n\",distance(weactor.begin(),lower_bound(weactor.begin(),weactor.end(),u))+1);\n            break;\n\n            case 4:\n                printf(\"%d\\n\",weactor[u-1]);\n            break;\n\n            case 5:\n            {\n                printf(\"%d\\n\",*(lower_bound(weactor.begin(),weactor.end(),u)-1));\n            }\n            break;\n\n            case 6:\n                printf(\"%d\\n\",*upper_bound(weactor.begin(),weactor.end(),u));\n            break;\n        }\n    }\n\n    return 0;\n}\n\n```",
        "postTime": 1498133660,
        "uid": 19293,
        "name": "zltttt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u4e3a\u4f55\u6574\u4e2a\u9898\u89e3\u533a\u90fd\u6ca1\u6709**\u6307\u9488Splay**\uff1f\u6307\u9488\u7248Splay\u7684\u5e38\u6570\u51e0\u4e4e\u53ef\u4ee5\u548cWBLT\u76f8\u5ab2\u7f8e\uff0c\u800c\u4e14\u5728\u6784\u9020\u6570\u636e\u4e0a\u8868\u73b0\u5341\u5206\u4f18\u8d8a\uff0c\u751a\u81f3\u6bd4\u4e00\u822c\u7684treap\u548cSBT\u8981\u5feb\u3002\n\n\u7136\u800c\u4f17\u6240\u5468\u77e5\uff0c\u6307\u9488\u7248Splay\u5e76\u4e0d\u662f\u90a3\u4e48\u597d\u5199~~\u6211\u8c03\u4e86\u4e00\u4e0a\u5348~~\uff0c\u6545\u53d1\u4e00\u7bc7\u9898\u89e3\u63d0\u4f9b\u53c2\u8003\uff0c\u987a\u4fbf\u6307\u51fa\u51e0\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u3002\n\n~~\u53e3\u80e1\u5b8c\u6bd5~~\uff0c\u4e0b\u9762\u8fdb\u5165\u6b63\u9898\n___\n## key points\n1.\u5173\u4e8e\u7a7a\u6307\u9488\n- \u4f17\u6240\u5468\u77e5\uff0c\u6709\u4e00\u79cd\u5341\u5206\u70e6\u4eba\u7684\u6307\u9488\uff0c\u53eb\u505a\u7a7a\u6307\u9488\uff08NULL\uff09\u3002\u5728\u6811\u5f62\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6211\u4eec\u5e38\u5e38\u4f1a\u4e0d\u53ef\u907f\u514d\u5730\u8bbf\u95ee\u5230\u7a7a\u6307\u9488\uff08\u4f8b\u5982\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u53f3\u513f\u5b50\uff0c\u6211\u4eec\u5374\u8bbf\u95ee\u4e86\u5b83\u7684\u5de6\u513f\u5b50\uff09\u3002\u901a\u5e38\u7684\u65b9\u5f0f\u662f\u51e1\u662f\u8bbf\u95ee\u4e86\u6307\u9488\uff0c\u90fd\u5224\u65ad\u4e00\u4e0b\u3002\u7136\u800c\u8fd9\u6837\u6548\u7387\u5341\u5206\u4f4e\u4e0b\uff0c\u5927\u91cf\u5206\u652f\u7684\u5b58\u5728\u4f7f\u5f97\u4ee3\u7801\u5197\u957f\uff0c\u5e38\u6570\u53d8\u5927\uff0c\u4e0d\u6613\u8c03\u8bd5\uff0c\u53ef\u8bfb\u6027\u964d\u4f4e\u7b49\u95ee\u9898\u3002\n- \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9```Node *null;```\u6765\u8868\u793a\u7a7a\u6307\u9488\u3002\u8fd9\u6837\uff0c\u5373\u4f7f\u6211\u4eec\u9047\u5230\u4e86\u4e00\u4e2a\u4e3a\u7a7a\u7684\u6307\u9488```rt```\uff0c\u5e76\u4e14\u8bd5\u56fe\u8bbf\u95ee```rt->siz```\uff08\u5e94\u5f53\u4e3a0\uff09\uff0c\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4f1a\u51fa\u73b0RE or WA\u3002\n- \u5199\u4ee3\u7801\u65f6**\u4e00\u5b9a\u8981\u6ce8\u610f\u8282\u70b9\u7684\u521d\u59cb\u5316**\uff0c\u5207\u4e0d\u53ef\u6709**\u53ef\u80fd\u88ab\u8bbf\u95ee\u5230\u7684**\u6307\u9488\u4e3a**\u7a7a**\u5374\u6ca1\u6709\u88ab\u8d4b\u4e3anull\u7684\u60c5\u51b5\u3002\n- null\u8282\u70b9\u6307\u5411\u7684\u5bf9\u8c61**\u4e0d\u5e94\u5f53\u5728\u4efb\u4f55\u65f6\u5019\u88ab\u4fee\u6539**\u3002\n\n2.**\u6570\u7ec4\u8981\u5f00\u5927**\uff0c\u56e0\u4e3a\u6709null\u8fd9\u6837\u7684\u591a\u4f59\u6307\u9488\u3002\u5efa\u8bae\u81f3\u5c11\u5f00\u5230maxn+3\uff08\u7b14\u8005\u91c7\u7528maxn+10\uff09\u3002\n\n3.\u548cWBLT\u4e0d\u540c\uff0croot\u4e0d\u53ef\u4ee5\u88ab\u521d\u59cb\u5316\uff0c\u800c\u662f\u5e94\u5f53\u88ab\u8d4b\u4e3anull\u3002\u56e0\u4e3a\u6211\u4eec\u63d2\u5165\u7b2c\u4e00\u4e2a\u6570\u503c\u65f6\uff0c\u8fd9\u4e2a\u6570\u503c\u5e94\u5f53\u88ab\u653e\u5728root\u3002\n\n4.\u9488\u5bf9\u5404\u4e2a\u51fd\u6570\u7684\u5176\u4ed6key points\u53c2\u89c1\u6ce8\u91ca\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4ee3\u7801\u4f7f\u7528\u4e86\u5185\u5b58\u6c60\uff0c\u5220\u9664\u8282\u70b9\u4f1a\u56de\u6536\u5185\u5b58\u3002\n\n5.\u5173\u4e8e\u7801\u98ce\n- **\u4e3a\u4e86\u5361\u5e38\u6570**\uff08\u800c\u4e0d\u662f\u538b\u884c\uff09\u7565\u6709\u4e9b\u6bd2\u7624\u3002\u4e09\u76ee\u5c31\u4e0d\u8bf4\u4e86\uff0c\u7136\u540e```a&&(b,0)```\u8fd9\u6837\u7684\u4e1c\u897f\u8868\u793a```if(a)b;```\u800c```a||(b,0)```\u8868\u793a```if(!a)b;```\u8fd9\u91cc\u7528\u4e86\u77ed\u8def\u8fd0\u7b97\u7684\u7279\u70b9\u3002\n## code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\nextern \"C\"{\nnamespace io{\n#define IOSIZE 1000000\n\tstatic char in[IOSIZE],*p=in,*pp=in,out[IOSIZE],*q=out,ch[20],*t=ch;\n\tinline char gc(){return p==pp&&(pp=(p=in)+fread(in,1,IOSIZE,stdin),p==pp)?EOF:*p++;}\n\tinline int read(){\n\t\treg int x=0;reg char f=0,ch;\n\t\twhile(!isdigit(ch=gc()))f|=ch=='-';\n\t\twhile(isdigit(ch))x=(x<<1)+(x<<3)+(ch^48),ch=gc();\n\t\treturn f?-x:x;\n\t}\n\tinline void write(int x){\n\t\tx||(*q++=48),x<0&&(*q++='-',x=-x);\n\t\twhile(x)*t++=x%10+48,x/=10;\n\t\twhile(t!=ch)*q++=*--t;\n\t\t*q++='\\n';\n\t}\n\tinline void flush(){fwrite(out,1,q-out,stdout);}\n}}\n#define rd io::read\n#define wt io::write\nconst int N=100010;\ninline void work();\nint main(){\n\twork();\n\tio::flush();\n\treturn 0;\n}\n//End of MAIN\nint n;\nnamespace Splay{\n\tstruct Node{\n\t\tint v,cnt,siz;Node *fa,*ch[2];\n\t\tNode(){}\n\t\tNode(int V,int Cnt,int Siz,Node *Fa,Node *ls,Node *rs):\n\t\tv(V),cnt(Cnt),siz(Siz),fa(Fa){ch[0]=ls,ch[1]=rs;}\n\t}*null,tr[N],*pl[N],**ptr=pl,*root;\n#define newNode(a,b,c,d,e,f) (&(**ptr++=Node(a,b,c,d,e,f)))\n\tinline void init(){\n\t\tfor(reg int i=0;i<N;++i)pl[i]=&tr[i];//\u521d\u59cb\u5316\u5185\u5b58\u6c60\n\t\tnull=newNode(0,0,0,0,0,0),root=null;//\u7a7a\u8282\u70b9\u4e0e\u6839\n\t}\n\tinline void pushup(Node *rt){\n\t\trt->siz=rt->ch[0]->siz+rt->ch[1]->siz+rt->cnt;\n\t}\n#define connect(a,b,son) (b->ch[son]=a,a->fa=b,0)\n\tinline void rotate(Node *x){\n\t\treg Node *y=x->fa,*z=y->fa;reg int k=y->ch[1]==x;\n\t\tconnect(x->ch[k^1],y,k),connect(y,x,k^1),\n\t\tz!=null?connect(x,z,z->ch[1]==y):(x->fa=z,0);//\u6b64\u5904\u5e94\u5f53\u5224\u65adz\u6307\u9488\u662f\u5426\u7a7a\u3002\u56e0\u4e3anull\u6307\u9488\u4e0d\u5e94\u5f53\u88ab\u4fee\u6539\u3002\n\t\tpushup(y),pushup(x);\n\t}\n\tinline void splay(Node *x,Node *g){\n\t\tfor(reg Node *y,*z;x->fa!=g;rotate(x))\n\t\t\ty=x->fa,z=y->fa,\n\t\t\tz!=g&&(rotate((y->ch[0]==x)^(z->ch[0]==y)?x:y),0);\n\t\tg==null&&(root=x,0);\n\t}\n\tinline void ins(int x){\n\t\treg Node *rt=root,*ff=null;\n\t\tfor(;rt!=null&&rt->v!=x;ff=rt,rt=rt->ch[x>rt->v]);\n\t\tif(rt!=null){++rt->cnt,splay(rt,null);return;}//\u5224\u65ad\u6839\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\n\t\trt=newNode(x,1,1,ff,null,null),ff!=null&&(ff->ch[x>ff->v]=rt,0);//\u65b0\u52a0\u5165\u8282\u70b9\u3002rt\u7684\u5de6\u53f3\u513f\u5b50\u662f\u7a7a\u7684\uff0c\u56e0\u6b64\u5e94\u5f53\u88ab\u8d4b\u4e3anull\u3002\n\t\tsplay(rt,null);\n\t}\n\tinline void Find(int x){\n\t\treg Node *rt=root;if(rt==null)return;\n\t\tfor(;rt->ch[x>rt->v]!=null&&rt->v!=x;rt=rt->ch[x>rt->v]);\n\t\tsplay(rt,null);\n\t}\n\tinline Node *Nxt(int x,int op){\n\t\tFind(x);\n\t\treg Node *rt=root;\n\t\tif(rt->v>x&&op||rt->v<x&&!op)return rt;\n\t\trt=rt->ch[op];\n\t\tfor(;rt->ch[op^1]!=null;rt=rt->ch[op^1]);\n\t\treturn rt;\n\t}\n\tinline void del(int x){\n\t\treg Node *lst=Nxt(x,0),*nxt=Nxt(x,1);\n\t\tsplay(lst,null),splay(nxt,lst);\n\t\treg Node *tmp=nxt->ch[0];\n\t\ttmp->cnt>1?--tmp->cnt,splay(tmp,null),0:(*--ptr=tmp,nxt->ch[0]=null,0);//\u4e09\u76ee\u3002\u6ce8\u610f\u8fd9\u91cc\u56de\u6536\u4e86\u5185\u5b58\u3002\n\t}\n\tinline int kth(int k){\n\t\treg Node *rt=root,*y;\n\t\tif(rt->siz<k)return 0;\n\t\tfor(;;){\n\t\t\ty=rt->ch[0];\n\t\t\tif(y->siz+rt->cnt<k){k-=y->siz+rt->cnt,rt=rt->ch[1];continue;}\n\t\t\tif(y->siz>=k){rt=y;continue;}\n\t\t\treturn rt->v;\n        //\u4e3a\u4e86\u4f18\u5316\u5e38\u6570\uff0c\u6240\u6709else\u88ab\u5220\u53bb\uff0c\u5e76\u7528continue\u4ee3\u66ff\u3002\n\t\t}\n\t}\n}\ninline void work(){\n\tn=rd();\n\tSplay::init();\n\tSplay::ins(2147483647),Splay::ins(-2147483648);//\u8bb0\u5f97\u521d\u59cb\u5316\n\tfor(reg int i=1,x,y;i<=n;++i)\n\t\tswitch(y=rd(),x=rd(),y){\n\t\t\tcase 1:Splay::ins(x);break;\n\t\t\tcase 2:Splay::del(x);break;\n\t\t\tcase 3:\n\t\t\t\tSplay::Find(x),wt(Splay::root->ch[0]->siz);\n\t\t\t\tbreak;\n\t\t\tcase 4:wt(Splay::kth(x+1));break;//\u8bb0\u5f97+1\n\t\t\tcase 5:wt(Splay::Nxt(x,0)->v);break;\n\t\t\tcase 6:wt(Splay::Nxt(x,1)->v);break;\n\t\t}\n}\n\n```",
        "postTime": 1580024381,
        "uid": 75765,
        "name": "Starlight237",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\u5462\uff0c\u5e73\u8861\u6811\u8fd9\u4e1c\u897f\u975e\u5e38\u597d(~~\u7801\u91cf\u5927~~)\n\n\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u4e8c\u53c9\u67e5\u627e\u6811(~~\u867d\u7136\u8fd9\u4e1c\u897f\u6a21\u677f\u4e5f\u662f\u7d2b\u9898~~)\u5427!\uff08\u51fa\u95e8\u53f3\u8f6c[BST](https://www.luogu.org/problem/P1864)\uff09\n\n# \u4e8c\u53c9\u67e5\u627e\u6811\uff1a\n\n\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5e26\u6709\u4e00\u4e2a\u6570\u503c\uff08\u5e38\u89c1\u7684\u5173\u952e\u7801\u54e6\uff09\n\n\u8981\u6c42\uff1a\n\n1.\u6b64\u7ed3\u70b9\u7684\u5173\u952e\u7801\u4e0d\u5c0f\u4e8e\u5de6\u5b50\u6811\u4efb\u4e00\u5173\u952e\u7801\n\n2.\u6b64\u7ed3\u70b9\u7684\u5173\u952e\u7801\u4e0d\u5927\u4e8e\u53f3\u5b50\u6811\u4efb\u4e00\u5173\u952e\u7801\n\n\u6240\u4ee5\uff0c~~\u663e\u7136~~\uff0c\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u5e8f\u904d\u5386\u662f\u9012\u589e\u7684\u7ed3\u70b9\u5e8f\u5217\u54e6\uff01\n\n\u5982\u56fe\uff1a\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811\uff08~~\u592a\u4e11\u52ff\u55b7~~\uff09\uff1a\n```\n         5\n        /  \\\n       3   8\n      /  \\  /  \\\n     1  4   7  9\n```\n\n## \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5efa\u7acb\uff1a\n\u4e3a\u4e86\u51cf\u5c11\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\uff0c\u6211\u4eec\u4f1a\u989d\u5916\u63d2\u5165\u4e00\u4e2a\u6b63\u65e0\u7a77\uff0c\u8d1f\u65e0\u7a77\u7684\u503c\n\n```cpp\n#define ll long long\nstruct BST\n{\n\tll l,r,val;\n}a[SIZE];//\u6570\u7ec4\u6a21\u62df\u94fe\u8868\nll tot,root,INF=1<<30;\nll New(ll val)//\u5efa\u7acb\u65b0\u7ed3\u70b9\n{\n\ta[++tot].val=val;\n\treturn tot; \n } \nvoid Build()\n{\n\tNew(-INF),New(INF);\n\troot=1;\n\ta[1].r=2; \n}\n```\n\n## \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u68c0\u7d22\n\n\u68c0\u7d22\u6811\u4e2d\u5173\u952e\u7801\u4e3aval\u7684\u7ed3\u70b9\uff0c\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n1.\u82e5\u5f53\u524d\u7ed3\u70b9\u5173\u952e\u7801\u4e3aval\uff0c\u5219\u8868\u793a\u627e\u5230(~~\u663e\u7136~~)\n\n2.\u82e5p\u7684\u5173\u952e\u7801\u5927\u4e8eval \uff0c\u627e\u5de6\u5b50\u6811\uff08\u6ca1\u6709\u5c31\u4e0d\u5b58\u5728\uff09\n\n3.\u82e5p\u7684\u5173\u952e\u7801\u5c0f\u4e8eval\uff0c\u627e\u53f3\u5b50\u6811\uff08\u6ca1\u6709\u8fd8\u662f\u4e0d\u5b58\u5728\uff09\n\n```cpp\nll Get(ll p,ll val)\n{\n\tif(p==0) return 0;//\u4e0d\u5b58\u5728\n\tif(val==a[p].val) return p;//\u663e\u7136\u6210\u529f\n\treturn val<a[p].val?Get(a[p].l,val):Get(a[p].r,val);//\u521a\u624d\u7684\u4e24\u79cd\u60c5\u51b5 \n}\n```\n## \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u63d2\u5165\n\n\u8fd9\u91cc\u4fbf\u4e0d\u518d\u7ed9\u4ee3\u7801\uff0c\u81ea\u5df1\u7406\u89e3\u81ea\u5df1\u5199\n\n\u4e0e\u68c0\u7d22\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u6ce8\u610f\u5982\u679c\u68c0\u7d22\u6210\u529f\u6b64\u7ed3\u70b9\u5df2\u6709\u503c\uff0c\u90a3\u4e48\u76f4\u63a5 return\n\n\u5927\u4e8eval\u5c31\u5f80\u5de6\u513f\u5b50\u63d2\u5165\uff0c\u5c0f\u4e8e\u5c31\u5f80\u53f3\n\n## \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u524d\u9a71\u540e\u7ee7\n\n\u4ee5\u540e\u7ee7\u4e3a\u4f8b\uff08\u524d\u9a71\u7c7b\u4f3c~~\u5077\u4e2a\u61d2~~\uff09\n\n3\u79cd\u53ef\u80fd\uff1a\n1.\u672a\u627e\u5230\uff08~~\u8fd9\u8fd8\u80fd\u7b97\u79cd\u60c5\u51b5\uff1f\uff1f\uff1f~~\uff09\u4e0d\u8fc7\u6b64\u65f6\u7684val\u5df2\u5728\u7ecf\u8fc7\u7684\u8282\u70b9\u4e86\n\n2.\u627e\u5230\u4e86val\uff0cp\u6ca1\u53f3\u5b50\u6811\uff0c\u4e0e\u4e0a\u79cd\u60c5\u51b5\u76f8\u540c\n\n3.\u627e\u5230\u4e86val\uff0cp\u6709\u53f3\u5b50\u6811\uff1a\u4ece\u53f3\u7ed3\u70b9\u51fa\u53d1\uff0c\u4e00\u76f4\u5f80\u5de6\u8d70\n\n\u4ee3\u7801\uff1a\n```cpp\nll Getnext(ll val)//\u540e\u7ee7 \n{\n\tll ans=2,p=root;\n\twhile(p)\n\t{\n\t\tif(val==val(p))\n\t\t{\n\t\t\tif(r(p)>0)\n\t\t\t{\n\t\t\t\tp=r(p);\n\t\t\t\twhile(l(p)>0) p=l(p);\n\t\t\t\tans=p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif(val(p)>val&&val(p)<val(ans)) ans=p;\n\t\tp=val<val(p)?l(p):r(p);\n\t}\n\treturn val(ans);\n}\n```\n\n## \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5220\u9664:\n\n1.\u82e5p\u7684\u7ed3\u70b9\u6570\u5c0f\u4e8e2:\uff0c\u76f4\u63a5\u5220\u9664\u5373\u53ef\uff01\uff08\u8ba9p\u5b50\u7ed3\u70b9\u4ee3\u66ff\uff09\n\n2.\u82e5p\u65e2\u6709\u5de6\u5b50\u6811\u53c8\u6709\u53f3\u5b50\u6811\uff1a\u6c42\u540e\u7ee7\u4ee3\u66ff\uff01\n\n\u4ee3\u7801\uff1a\n\n```cpp\nvoid Remove(ll &p,ll val)//\u5220\u9664 \n{\n\tif(p==0) return ;\n\tif(val==val(p))\n\t{\n\t\tif(cnt(p)>1)\n\t\t{\n\t\t\tcnt(p)--;\n\t\t\tUpdate(p);\n\t\t\treturn ;\n\t\t}\n\t\tif(l(p)||r(p))\n\t\t{\n\t\t\tif(r(p)==0||dat(l(p))>dat(r(p))) zig(p),Remove(r(p),val);\n\t\t\telse zag(p),Remove(l(p),val);\n\t\t\tUpdate(p);\n\t\t}\n\t\telse p=0;\n\t\treturn ;\n\t}\n\tval<val(p)?Remove(l(p),val):Remove(r(p),val);\n\tUpdate(p);\n}\n```\n\n\u6b64\u65f6\u7684\u4f60\u82e5\u770b\u61c2\u4e86\u4e0a\u9762\uff0c\u4e8c\u53c9\u67e5\u627e\u6811\u5c31\u57fa\u672c\u89e3\u51b3\u4e86\u3002\n\n# \u6b65\u5165\u6b63\u9898\uff0cTreap\n\nTreap\u5176\u5b9e\u5c31\u662fTree&Heap\uff08~~\u5de7\u5999\u7684\u6784\u8bcd\u6cd5~~\uff09\u65e2\u8981\u6ee1\u8db3BST\uff0c\u8fd8\u8981\u6ee1\u8db3\u5927\u6839\u5806\u54e6\uff01\uff01\n\nTreap\u662f\u4e00\u79cd\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u4e0d\u8fc7\u652f\u6301\u591a\u79cd\u4e8c\u53c9\u67e5\u627e\u6811\u6ca1\u6709\u7684\u64cd\u4f5c\uff1a\n\n\u6bd4\u5982\uff1a\u5de6\u65cb\uff08\u53f3\u65cb\u7c7b\u4f3c\uff08~~\u867d\u7136\u53c8\u5077\u4e86\u4e2a\u61d2~~\uff09\uff09\n\n\u53ef\u4ee5\u7406\u89e3\u4e3a\u628ap\u7684\u53f3\u5b50\u7ed3\u70b9\u7ed5p\u5411\u5de6\u65cb\u8f6c\u54e6\uff01\uff01\n\n\u4ee3\u7801\uff1a\n```cpp\nvoid zag(ll &p)//\u5de6\u65cb \n{\n\tll q=r(p);\n\tr(p)=l(q),l(q)=p;\n\tp=q;\n\tUpdate(l(p));\n\tUpdate(p);\n}\n```\n\n\u6bd4\u5982\uff1a\u6392\u540d\uff08\u76f4\u63a5\u4e0a\u4ee3\u7801\uff09\n\n```cpp\nll Getrankbyval(ll p,ll val)//\u67e5\u8be2\u6570\u503cx\u7684\u6392\u540d \n{\n\tif(p==0) return 0;\n\tif(val==val(p)) return size(l(p))+1;\n\tif(val<val(p)) return Getrankbyval(l(p),val);\n\treturn Getrankbyval(r(p),val)+size(l(p))+cnt(p);\n}\nll Getvalbyrank(ll p,ll rank)//\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570\u503c \n{\n\tif(p==0) return INF;\n\tif(size(l(p))>=rank) return Getvalbyrank(l(p),rank);\n\tif(size(l(p))+cnt(p)>=rank) return val(p);\n\treturn Getvalbyrank(r(p),rank-size(l(p))-cnt(p));\n}\n```\n\uff08~~\u867d\u7136\u6211\u4e5f\u4e0d\u662f\u5f88\u61c2~~\uff09\n\n\n\n\n# \u4f46\u662f\n## \u5b8c\u6574\u4ee3\u7801\n### \u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\n#define SIZE 100010\n#define ll long long\nusing namespace std;\nll read()\n{\n\tll r=0,f=1;char c=getchar();\n\twhile((c<'0'||c>'9')&&(c!='-')) c=getchar();\n\tif(c=='-') f=-1,c=getchar();\n\twhile(c>='0'&&c<='9') r=r*10+c-'0',c=getchar();\n\treturn r*f;\n}\nstruct Treap\n{\n\tll l,r,val,dat,cnt,size;\n\t#define l(x) tree[x].l\n\t#define r(x) tree[x].r\n\t#define val(x) tree[x].val\n\t#define dat(x) tree[x].dat\n\t#define cnt(x) tree[x].cnt\n\t#define size(x) tree[x].size \n}tree[SIZE]; \nll tot,root,n,INF=0x7fffffff;\nll New(ll val)//\u65b0\u7ed3\u70b9 \n{\n\tval(++tot)=val;\n\tdat(tot)=rand();\n\tcnt(tot)=size(tot)=1;\n\treturn tot;\n}\nvoid Update(ll p)//\u8fd0\u7b97 \n{\n\tsize(p)=size(l(p))+size(r(p))+cnt(p); \n}\nvoid build()//\u5efa\u6811 \n{\n\tNew(-INF),New(INF);\n\troot=1;\n\tr(1)=2;\n\tUpdate(root);\n}\nll Getrankbyval(ll p,ll val)//\u67e5\u8be2\u6570\u503cx\u7684\u6392\u540d \n{\n\tif(p==0) return 0;\n\tif(val==val(p)) return size(l(p))+1;\n\tif(val<val(p)) return Getrankbyval(l(p),val);\n\treturn Getrankbyval(r(p),val)+size(l(p))+cnt(p);\n}\nll Getvalbyrank(ll p,ll rank)//\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570\u503c \n{\n\tif(p==0) return INF;\n\tif(size(l(p))>=rank) return Getvalbyrank(l(p),rank);\n\tif(size(l(p))+cnt(p)>=rank) return val(p);\n\treturn Getvalbyrank(r(p),rank-size(l(p))-cnt(p));\n}\nvoid zig(ll &p)//\u53f3\u65cb \n{\n\tll q=l(p);\n\tl(p)=r(q),r(q)=p;\n\tp=q;\n\tUpdate(r(p));\n\tUpdate(p);\n}\nvoid zag(ll &p)//\u5de6\u65cb \n{\n\tll q=r(p);\n\tr(p)=l(q),l(q)=p;\n\tp=q;\n\tUpdate(l(p));\n\tUpdate(p);\n}\nvoid Insert(ll &p,ll val)//\u63d2\u5165 \n{\n\tif(p==0)\n\t{\n\t\tp=New(val);\n\t\treturn ;\n\t}\n\tif(val==val(p))\n\t{\n\t\tcnt(p)++;\n\t\tUpdate(p);\n\t\treturn ;\n\t}\n\tif(val<val(p))\n\t{\n\t\tInsert(l(p),val);\n\t\tif(dat(p)<dat(l(p))) zig(p);\n\t}\n\telse\n\t{\n\t\tInsert(r(p),val);\n\t\tif(dat(p)<dat(r(p))) zag(p);\n\t}\n\tUpdate(p);\n}\nll Getpre(ll val)//\u524d\u9a71 \n{\n\tll ans=1,p=root;\n\twhile(p)\n\t{\n\t\tif(val==val(p))\n\t\t{\n\t\t\tif(l(p)>0)\n\t\t\t{\n\t\t\t\tp=l(p);\n\t\t\t\twhile(r(p)>0) p=r(p);\n\t\t\t\tans=p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif(val(p)<val&&val(p)>val(ans)) ans=p;\n\t\tp=val<val(p)?l(p):r(p);\n\t}\n\treturn val(ans);\n}\nll Getnext(ll val)//\u540e\u7ee7 \n{\n\tll ans=2,p=root;\n\twhile(p)\n\t{\n\t\tif(val==val(p))\n\t\t{\n\t\t\tif(r(p)>0)\n\t\t\t{\n\t\t\t\tp=r(p);\n\t\t\t\twhile(l(p)>0) p=l(p);\n\t\t\t\tans=p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif(val(p)>val&&val(p)<val(ans)) ans=p;\n\t\tp=val<val(p)?l(p):r(p);\n\t}\n\treturn val(ans);\n}\nvoid Remove(ll &p,ll val)//\u5220\u9664 \n{\n\tif(p==0) return ;\n\tif(val==val(p))\n\t{\n\t\tif(cnt(p)>1)\n\t\t{\n\t\t\tcnt(p)--;\n\t\t\tUpdate(p);\n\t\t\treturn ;\n\t\t}\n\t\tif(l(p)||r(p))\n\t\t{\n\t\t\tif(r(p)==0||dat(l(p))>dat(r(p))) zig(p),Remove(r(p),val);\n\t\t\telse zag(p),Remove(l(p),val);\n\t\t\tUpdate(p);\n\t\t}\n\t\telse p=0;\n\t\treturn ;\n\t}\n\tval<val(p)?Remove(l(p),val):Remove(r(p),val);\n\tUpdate(p);\n}\nint main()\n{\n\tbuild();\n\tn=read();\n\twhile(n--)\n\t{\n\t\tll opt=read(),x=read();\n\t\tswitch(opt)\n\t\t{\n\t\t\tcase 1:Insert(root,x);break;//\u63d2\u5165 \n\t\t\tcase 2:Remove(root,x);break;//\u5220\u9664 \n\t\t\tcase 3:printf(\"%lld\\n\",Getrankbyval(root,x)-1);break;//\u67e5\u8be2\u6392\u540d \n\t\t\tcase 4:printf(\"%lld\\n\",Getvalbyrank(root,x+1));break;//\u67e5\u8be2\u6392\u540dx\u7684\u6570\u503c \n\t\t\tcase 5:printf(\"%lld\\n\",Getpre(x));break;//\u524d\u9a71 \n\t\t\tcase 6:printf(\"%lld\\n\",Getnext(x));break;//\u540e\u7ee7 \n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u8c22\u8c22\u5927\u5bb6\u7684\u89c2\u770b\uff01\uff01\uff01",
        "postTime": 1571996075,
        "uid": 138649,
        "name": "\u7237\uff0c\u65e0\u9650\u9738\u6c14",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "### FHQ Treap\n\n\u4f17\u6240\u5468\u77e5\uff0c\u4e00\u822c\u7684\u5e73\u8861\u6811\u90fd\u7528\u65cb\u8f6c\u6765\u4fdd\u6301\u5e73\u8861\uff0c $FHQ\\;Treap$ \u662f\u4e00\u79cd\u4e0d\u7528\u65cb\u8f6c\u5c31\u80fd\u4fdd\u8bc1\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$ \u7684\u5e73\u8861\u6811\uff0c$FHQ\\;Treap$ \u548c $Treap$ \u4e00\u6837\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a $heap[i]$ \u503c\uff0c\u6ee1\u8db3\u5806\u7684\u6027\u8d28\uff0c\u6838\u5fc3\u64cd\u4f5c\u662f $split$\uff08\u63b0\u5f00\uff09\u548c $merge$ \uff08\u5408\u5e76\uff09\n\n### \u53d8\u91cf\u5b9a\u4e49\n\n$son[i][0..1]$ $0$ \u8868\u793a\u5de6\u513f\u5b50\uff0c$1$ \u8868\u793a\u53f3\u513f\u5b50\n\n$size[i]$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u8282\u70b9\u4e2a\u6570\n\n$heap[i]$ \u8868\u793a\u968f\u673a\u7684\u503c\uff08\u7528\u4e8e\u4fdd\u8bc1\u5806\u7684\u6027\u8d28\uff09\n\n$t[i]$ \u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\n\n$cnt$ \u8868\u793a\u8282\u70b9\u4e2a\u6570\n\n### \u6838\u5fc3\u64cd\u4f5c\uff08$split$&$merge$\uff09\n\n**FHQ Treap** \u7684\u6838\u5fc3\u64cd\u4f5c\u5c31\u662f **\u63b0\u5f00** \u4ee5\u53ca **\u5408\u5e76**\n\n1. **\u63b0\u5f00**\n\n\u5c06\u5e73\u8861\u6811\u6309 $val$ \u503c\uff0c\u63b0\u6210\u4e24\u68f5\u5e73\u8861\u6811\uff08\u6309\u6743\u63b0\u5f00\uff09\uff0c\u4fdd\u8bc1\u4e00\u68f5\u5e73\u8861\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684 $tree[i]\\le val$\uff0c\u53e6\u4e00\u68f5\u6240\u6709\u8282\u70b9 $tree[i]>val$ \u540c\u65f6\u8fd4\u56de\u4e24\u68f5\u6811\u7684\u6839\n\n\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a $now$\n\n**\u5f53 $tree[now]\\le val$ \u65f6**\n\n$a=now$\uff0c\u7136\u540e\u5411\u53f3\u8d70\uff0c\u540c\u65f6\u66f4\u6539 $a$ \u7684\u53f3\u513f\u5b50\uff0c$split(son[now][1],son[a][1],b,val)$\n\n**\u5426\u5219**\n\n$b=now$\uff0c\u7136\u540e\u5411\u5de6\u8d70\uff0c\u540c\u65f6\u66f4\u6539 $b$ \u7684\u5de6\u513f\u5b50\uff0c$split(son[now][0],a,son[b][0],val)$\n```cpp\nvoid split(int now,int &a,int &b,int val)\n{\n\tif (!now) {a=0,b=0;return;}\n\tif (t[now]<=val) a=now,split(son[now][1],son[a][1],b,val);\n\telse b=now,split(son[now][0],a,son[b][0],val);\n\tupdate(now);\n}\n```\n\n2. **\u5408\u5e76**\n\n\u5c06\u4e24\u68f5\u5e73\u8861\u6811\u5408\u8d77\u6765\uff0c\u540c\u65f6\u6ee1\u8db3\u5176 $heap$ \u503c\u7684\u5806\u6027\u8d28\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6839\u5e8f\u53f7\uff0c\u4fdd\u8bc1\u4ee5 $a$ \u4e3a\u6839\u7684\u6811\u79cd\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u90fd\u5c0f\u4e8e\u4ee5 $b$ \u4e3a\u6839\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\n\n**\u5f53\u4e24\u68f5\u5b50\u6811\u5176\u4e2d\u6709\u4e00\u68f5\u4e3a\u7a7a\u65f6\uff0c\u5c06\u6839\u8bbe\u4e3a $a+b$\uff08\u5373\u975e\u7a7a\u6811\u7684\u6839\u5e8f\u53f7\uff09**\n\n**\u5f53 $heap[a]<heap[b]$ \u65f6**\n\n\u5c06\u5f53\u524d\u6839\u8bbe\u4e3a $a$\uff0c\u540c\u65f6\u5408\u5e76 $son[a][1]$ \u548c $b$\n\n**\u5426\u5219**\n\n\u5c06\u5f53\u524d\u6839\u8bbe\u4e3a $b$\uff0c\u540c\u65f6\u5408\u5e76 $a$ \u548c $son[b][0]$\n\n```cpp\nvoid merge(int &now,int a,int b)\n{\n\tif (a==0 || b==0) {now=a+b;return;}\n\tif (heap[a]<heap[b]) now=a,merge(son[now][1],son[a][1],b);\n\telse now=b,merge(son[now][0],a,son[b][0]);\n\tupdate(now);\n}\n```\n\n### \u57fa\u7840\u64cd\u4f5c\n\n1. $update$\n\n\u66f4\u65b0\u5f53\u524d\u8282\u70b9 $size$ \u503c\n\n```cpp\nvoid update(int x)\n{\n\tsize[x]=size[son[x][0]]+size[son[x][1]]+1;\n}\n```\n\n2. $add$\n\n\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u5e76\u628a\u5176\u521d\u59cb\u5316\n\n```cpp\nvoid add(int val)\n{cnt++,size[cnt]=1,t[cnt]=val,heap[cnt]=random(INF);}\n```\n\n### \u63d2\u5165\uff08$insert$\uff09\n\n\u5c06\u5f53\u524d\u5e73\u8861\u6811\u6309 $val$ \u63b0\u6210\u4e24\u68f5\u6811\uff0c$x,y$ \u5206\u522b\u4e3a\u4e24\u68f5\u6811\u7684\u6839\n\n\u65b0\u5efa\u4e00\u4e2a $tree[i]=val$ \u7684\u8282\u70b9\uff0c\u4e3a $o$\n\n\u5408\u5e76 $x,o$ \u8fd4\u56de\u7684\u6839\u4e3a $x$\uff0c\u518d\u5408\u5e76 $x,y$\n\n```cpp\nvoid insert(int val)\n{\n\tint x=0,y=0;\n\tadd(val);\n\tint o=cnt;\n\tsplit(root,x,y,val);\n\tmerge(x,x,o);merge(root,x,y);\n}\n```\n\n### \u5220\u9664\uff08$del$\uff09\n\n\u5148\u5c06\u5f53\u524d\u5e73\u8861\u6811\u6309 $val$ \u63b0\u6210\u4e24\u68f5\u6811\uff0c$x,y$ \u5206\u522b\u4e3a\u4e24\u68f5\u6811\u7684\u6839\uff0c\u518d\u5c06\u4ee5 $x$ \u4e3a\u6839\u7684\u6811\u6309 $val-1$ \u63b0\u6210\u4e24\u68f5\u6811\uff0c$x,o$ \u4e3a\u4e24\u68f5\u6811\u7684\u6839\n\n\u90a3\u4e48 $o$ \u8282\u70b9\u5c31\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8282\u70b9\n\n\u5c06 $son[o][0],son[o][1]$ \u5408\u5e76\uff08\u8fd9\u6837\u5c31\u5220\u9664\u4e86 $o$ \u8282\u70b9\uff09\uff0c$o$ \u4e3a\u5176\u8fd4\u56de\u7684\u6839\n\n\u518d\u5408\u5e76 $x,o$ \u548c $y,x$\n\n```cpp\nvoid del(int val)\n{\n\tint x=0,y=0,o=0;\n\tsplit(root,x,y,val);split(x,x,o,val-1);\n\tmerge(o,son[o][0],son[o][1]);\n\tmerge(x,x,o),merge(root,x,y);\n}\n```\n\n### \u627e\u6392\u540d\u4e3a $k$ \u7684\u6570\uff08$findnum$\uff09\n\n\u4ee4 $findnum(now,k)$ \u8868\u793a\u5f53\u524d\u8282\u70b9\u4e3a $now$\uff0c\u8981\u5728 $now$ \u8282\u70b9\u4e0b\u9762\u67e5\u627e\u6743\u4e3a $k$ \u7684\u8282\u70b9\n\n\u50cf\u666e\u901a\u4e8c\u53c9\u67e5\u627e\u6811\u4e00\u6837\u67e5\u627e\n\n```cpp\nint findnum(int now,int k)\n{\n\tif (size[son[now][0]]+1==k) return t[now];\n\tif (size[son[now][0]]>=k) return findnum(son[now][0],k);\n\telse return findnum(son[now][1],k-size[son[now][0]]-1);\n}\n```\n\n### \u627e $val$ \u7684\u6392\u540d\uff08$findrank$\uff09\n\n\u5c06\u5f53\u524d\u5e73\u8861\u6811\u6309 $val-1$ \u63b0\u6210\u4e24\u68f5\uff0c\u6839\u5206\u522b\u4e3a $x,y$\n\n\u76f4\u63a5\u8fd4\u56de $size[x]+1$\uff0c\u518d\u5408\u5e76\u56de\u53bb\n\n```cpp\nint findrank(int k)\n{\n\tint x=0,y=0;\n\tsplit(root,x,y,k-1);\n\tint ans=size[x]+1;\n\tmerge(root,x,y);\n\treturn ans;\n}\n```\n\n### \u627e $x$ \u7684\u524d\u9a71\uff08$pred$\uff09\n\n\u5c06\u5f53\u524d\u5e73\u8861\u6811\u6309 $val-1$ \u63b0\u6210\u4e24\u68f5\uff0c\u6839\u5206\u522b\u4e3a $x,y$\n\n\u8fd4\u56de $findnum(x,size[x])$\uff0c\u518d\u5408\u5e76\u56de\u53bb\n\n```cpp\nint pred(int k)\n{\n\tint x=0,y=0;\n\tsplit(root,x,y,k-1);\n\tint ans=findnum(x,size[x]);\n\tmerge(root,x,y);\n\treturn ans;\n}\n```\n\n### \u627e $x$ \u7684\u540e\u7ee7\uff08$succ$\uff09\n\n\u5c06\u5f53\u524d\u5e73\u8861\u6811\u6309 $val$ \u63b0\u6210\u4e24\u68f5\uff0c\u6839\u5206\u522b\u4e3a $x,y$\n\n\u8fd4\u56de $findnum(y,1)$\uff0c\u518d\u5408\u5e76\u56de\u53bb\n\n```cpp\nint succ(int k)\n{\n\tint x=0,y=0;\n\tsplit(root,x,y,k);\n\tint ans=findnum(y,1);\n\tmerge(root,x,y);\n\treturn ans;\n}\n```\n\n### \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define random(x) (rand()%x)\n#define INF random(3000010)+1000000\n#define N 4000010\nusing namespace std;\nint size[N],t[N],heap[N],son[N][2];\nint cnt,n,x,root,opt;\nvoid add(int val){cnt++,size[cnt]=1,t[cnt]=val,heap[cnt]=random(INF);}\n\nvoid update(int x)\n{\n\tsize[x]=size[son[x][0]]+size[son[x][1]]+1;\n}\n\nvoid split(int now,int &a,int &b,int val)\n{\n\tif (!now) {a=0,b=0;return;}\n\tif (t[now]<=val) a=now,split(son[now][1],son[a][1],b,val);\n\telse b=now,split(son[now][0],a,son[b][0],val);\n\tupdate(now);\n}\n\nvoid merge(int &now,int a,int b)\n{\n\tif (a==0 || b==0) {now=a+b;return;}\n\tif (heap[a]<heap[b]) now=a,merge(son[now][1],son[a][1],b);\n\telse now=b,merge(son[now][0],a,son[b][0]);\n\tupdate(now);\n}\n\nvoid insert(int val)\n{\n\tint x=0,y=0;\n\tadd(val);\n\tint o=cnt;\n\tsplit(root,x,y,val);\n\tmerge(x,x,o);merge(root,x,y);\n}\n\nvoid del(int val)\n{\n\tint x=0,y=0,o=0;\n\tsplit(root,x,y,val);split(x,x,o,val-1);\n\tmerge(o,son[o][0],son[o][1]);\n\tmerge(x,x,o),merge(root,x,y);\n}\n\nint findnum(int now,int k)\n{\n\tif (size[son[now][0]]+1==k) return t[now];\n\tif (size[son[now][0]]>=k) return findnum(son[now][0],k);\n\telse return findnum(son[now][1],k-size[son[now][0]]-1);\n}\n\nint findrank(int k)\n{\n\tint x=0,y=0;\n\tsplit(root,x,y,k-1);\n\tint ans=size[x]+1;\n\tmerge(root,x,y);\n\treturn ans;\n}\n\nint pred(int k)\n{\n\tint x=0,y=0;\n\tsplit(root,x,y,k-1);\n\tint ans=findnum(x,size[x]);\n\tmerge(root,x,y);\n\treturn ans;\n}\n\nint succ(int k)\n{\n\tint x=0,y=0;\n\tsplit(root,x,y,k);\n\tint ans=findnum(y,1);\n\tmerge(root,x,y);\n\treturn ans;\n}\n\nint main()\n{\n\tsrand((int)time(0));\n\troot=1;\n\tadd(INT_MAX);\n\theap[root]=-INT_MAX;\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",&opt,&x);\n\t\tif (opt==1) insert(x);\n\t\tif (opt==2) del(x);\n\t\tif (opt==3) printf(\"%d\\n\",findrank(x));\n\t\tif (opt==4) printf(\"%d\\n\",findnum(root,x));\n\t\tif (opt==5) printf(\"%d\\n\",pred(x));\n\t\tif (opt==6) printf(\"%d\\n\",succ(x));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1559220773,
        "uid": 67718,
        "name": "G\u6211\u5c31\u662f\u83dcG",
        "ccfLevel": 6,
        "title": "\u3010\u5b66\u4e60\u7b14\u8bb0\u3011\u666e\u901a\u5e73\u8861\u6811\u2014\u2014FHQ Treap"
    },
    {
        "content": "**\u8ba9\u6211\u5148\u6765\u6c34\u4e00\u7bc7\u9898\u89e3**\n\n\n\u9996\u5148\u662f\u6807\u51c6\u7684Treap\uff0c\u697c\u4e0a\u7684dalao\u4eec\u5df2\u7ecf\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\n\n```cpp\n// treap my \u6570\u7ec4\n\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#define FOR(i,n,m) for(int i=n;i<=m;++i)\n#define il inline\nusing namespace std;\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\nstatic char buf[100000],*pa(buf),*pb(buf);\n#define gc pa==pb&&(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++\t//\u7384\u5b66\u5feb\u8bfb\nil int read()\n{\n    register int x(0);register int f(1);register char c(gc);\n    while((c<'0'||c>'9')&&c!='-')c=gc;\n    c=='-'?f=-1,c=gc:f;\n    while(c>='0'&&c<='9')x=x*10+(c^48),c=gc;\n    return f*x;\n}\n\nconst int N=100100,INF=(1<<29);\nstruct Treap {\n    int lc,rc,key,pri,size,cnt;\n}a[N];\n#define c(x) a[x].cnt\n#define s(x) a[x].size\n#define p(x) a[x].pri\n#define v(x) a[x].key\n#define rc(x) a[x].rc\n#define lc(x) a[x].lc\n#define up(k) s(k)=s(rc(k))+s(lc(k))+c(k);\n//\u61d2\u4eba\u7684\u5b8f\u5b9a\u4e49\u65b9\u4fbf\u4e66\u5199\n\nint tot,rt;\n\nil void zig(int &k) {\t//\u5de6\u65cb \n    int y=lc(k);\n    lc(k)=rc(y);\n    rc(y)=k;\n    s(y)=s(k);\n    up(k)\n    k=y;\n}\n\nil void zag(int &k) {\t//\u53f3\u65cb \n    int y=rc(k);\n    rc(k)=lc(y);\n    lc(y)=k;\n    s(y)=s(k);\n    up(k)\n    k=y;\n}\n\nil void insert(int &k,const int &key) {\t//\t\u63d2\u5165 \n    if(!k) {\n        k=++tot;\n        v(k)=key;\n        p(k)=rand();\n        c(k)=s(k)=1;\n        lc(k)=rc(k)=0;\n        return; \n    }\n    else ++s(k);\n    if(v(k)==key) ++c(k);\n    else if(key<v(k)) {\n        insert(lc(k),key);\t//\u5411\u5de6\u641c \n        if(p(lc(k))<p(k)) zig(k);\t//\u5de6\u513f\u5b50\u4f18\u5148\u7ea7\u5c0f\uff0c\u5de6\u65cb \n    }\n    else {\n        insert(rc(k),key);\n        if(p(rc(k))<p(k)) zag(k);\n    }\n    return;\n}\n\nil void del(int &k,const int &key) {\t//\u5220\u9664\u5143\u7d20 \n    if(v(k)==key) {\n        if(c(k)>1) --c(k),--s(k);\n        else if(!lc(k) || !rc(k)) k=lc(k)+rc(k);\n        else if(p(lc(k))<p(rc(k))) zig(k),del(k,key);\n        else zag(k),del(k,key);\n        return;\n    }\n    --s(k);\n    if(key<v(k)) del(lc(k),key);\n    else del(rc(k),key);\n    return;\n}\n\nil int querypre(int key) {\t//\u524d\u9a71 \n    int x=rt,res=-INF;\n    while(x) {\n        if(v(x)<key) res=v(x),x=rc(x);\n        else x=lc(x);\n    }\n    return res;\n}\n\nil int querysuf(int key) {\t//\u540e\u7ee7 \n    int x=rt,res=INF;\n    while(x) {\n        if(v(x)>key) res=v(x),x=lc(x);\n        else x=rc(x);\n    }\n    return res;\n}\n\nil int querykth(int k) { //\u67e5\u627e\u7b2ck\u5927\u5143\u7d20 \n    int x=rt;\n    while(x) {\n        if(s(lc(x))<k&&s(lc(x))+c(x)>=k) return v(x);\n        if(s(lc(x))>=k) x=lc(x);\n        else k-=s(lc(x))+c(x),x=rc(x);\n    }\n    return 0;\n}\n\nil int querdrank(int key) {\t//\u67e5\u627e\u5143\u7d20\u6392\u540d \n    int x=rt,res=0;\n    while(x) {\n        if(key==v(x)) return res+s(lc(x))+1;\n        if(key<v(x)) x=lc(x);\n        else res+=s(lc(x))+c(x),x=rc(x);\n    }\n    return res;\n}\n\nvoid print(int x)\n{\n    if(!x) return;\n    print(lc(x));\n    cout<<x<<\" \"<<s(x)<<endl;\n    print(rc(x));\n}\n\nvoid work() {\n    int n=read();\n\n    FOR(i,1,n) {\n        int a=read(),x=read();\n        if(a==1) insert(rt,x);\n        if(a==2) del(rt,x);\n        if(a==3) cout<<querdrank(x)<<endl;\n        if(a==4) cout<<querykth(x)<<endl;\n        if(a==5) cout<<querypre(x)<<endl;\n        if(a==6) cout<<querysuf(x)<<endl;\n    }\n    return;\n}\n\nint main() {\n    \n    \n    work();\n    \n    return 0;\n}\n```\n\n\u6574\u4e2a\u7684\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u4e0d\u5927\uff0c\u4e3b\u8981\u8981\u6ce8\u610f\u524d\u9a71\uff0c\u540e\u7ee7\u4e4b\u7c7b\u7684\u7b49\u53f7\u95ee\u9898\u3002\u3002\uff08~~\u56e0\u4e3a\u8fd9\u4e2awa\u4e86\u5f88\u4e45~~\uff09\n\n\n\u8868\u793a\u9898\u89e3\u91cc\u9762\u6307\u9488\u5199\u7684\u7279\u522b\u5c11\u3002\u3002\u3002\u7136\u540e\u4f5c\u4e3a\u4e00\u4e2a\u521a\u5f00\u59cb\u5b66\u6307\u9488\u7684\u8868\u793a\u5f88\u65e0\u5948\u3002\u3002\n\n\u4e0b\u4e00\u6bb5\u4ee3\u7801\u9001\u7ed9\u6307\u9488\u515a\n\n```cpp\n//Treap my \u6307\u9488 \n\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#define FOR(i,n,m) for(int i=n;i<=m;++i)\n#define FR(i,n,m) for(int i=n;i>=m;--i)\n#define re register\n#define gc getchar()\nusing namespace std;\nconst int N=100010,INF=(1<<29);\ninline int read() {\n    re int x(0),f(1);\n    re char ch=gc;\n    while(ch<'0'||ch>'9') {\n        if(ch=='-') f=-1;\n        ch=gc;\n    }\n    while(ch>='0'&&ch<='9') {\n        x=(x<<1)+(x<<3)+(ch^48);\n        ch=gc;\n    }\n    return x*f;\n}\n\nstruct node {\n    node* ch[2];\t//\u5199\u6210\u8fd9\u4e2a\u6837\u5b50\u4e4b\u540e\u65cb\u8f6c\u5c31\u4e0d\u7528\u5199\u4e24\u4e2a\u4e86\n    int pri,val,size,cnt;\n    node() {\n        ch[0]=ch[1]=NULL;\n        pri=rand();\n        val=size=cnt=1;\n    } \n    void update() {\n        size=(ch[0]==NULL?0:ch[0]->size)+(ch[1]==NULL?0:ch[1]->size)+cnt;\n    }\n};\nnode* root;\n\nstruct treap {\n        \n    inline void rotate (node* &k,int d) {\t//1\u53f3\uff0c0\u5de6 \n        node* y=k->ch[d^1];\n        k->ch[d^1]=y->ch[d];\n        y->ch[d]=k;\n        y->size=k->size;\n        k->update();\n        k=y;\n    }\n    \n    inline void insert(node* &k,const int &key) {\n        if(k==NULL) {\n            k=new node;\n            k->val=key;\n            return;\n        }\n        ++k->size;\n        if(k->val==key) {++k->cnt;return;}\n        int a=key>k->val;\n        insert(k->ch[a],key);\n        if(k->ch[a]->pri>k->pri) rotate(k,a^1);\n    }\n    \n    inline void del(node* &k,const int &key) {\n        if(k==NULL) return;\n        if(k->val==key) {\n            if(k->cnt>1) --k->cnt,--k->size;\n            else if(k->ch[0]==NULL&&k->ch[1]==NULL) k=NULL;\n            else if(k->ch[0]==NULL) k=k->ch[1];\n            else if(k->ch[1]==NULL) k=k->ch[0];\n            else rotate(k,(int)(k->ch[0]->pri>k->ch[1]->pri)),del(k,key);\n            return; \n        }\n        --k->size;\n        del(k->ch[key>k->val],key);\n    }\n    \n    inline int queryrank(const int &key) {\n        node* k=root;\n        int ans(0);\n        while(k!=NULL) {\n            if(k->val==key) return ans+(k->ch[0]?k->ch[0]->size:0)+1;\n            if(k->val>key) k=k->ch[0];\n            else ans+=(k->ch[0]?k->ch[0]->size:0)+k->cnt,k=k->ch[1];\n        }\n        return ans;\n    }\n    \n    inline int querykth(int rank) {\n        node* k=root;\n        while(k!=NULL) {\n            int res=k->ch[0]?k->ch[0]->size:0;\n            if(res<rank&&res+k->cnt>=rank) return k->val;\n            if(res>=rank) k=k->ch[0];\n            else rank-=res+k->cnt,k=k->ch[1];\n        }\n        return 0;\n    }\n    \n    inline int querypre(const int &key) {\n        node* k=root;\n        int ans=-INF;\n        while(k) {\n            if(k->val>=key) k=k->ch[0];\n            else ans=k->val,k=k->ch[1];\n        }\n        return ans==-INF?-1:ans;\n    }\n    \n    inline int querysuf(const int &key) {\n        node* k=root;\n        int ans=INF;\n        while(k) {\n            if(k->val<=key) k=k->ch[1];\n            else ans=k->val,k=k->ch[0];\n        }\n        return ans==INF?-1:ans;\n    } \n\n}Treap;\n\n\nvoid work() {\n    int n=read();\n    \n    while(n--) {\n        int op=read(),x=read();\n        int ans;\n        switch(op) {\n            case 1:Treap.insert(root,x);break;\n            case 2:Treap.del(root,x);break;\n            case 3:cout<<Treap.queryrank(x)<<endl;break;\n            case 4:cout<<Treap.querykth(x)<<endl;break;\n            case 5:cout<<Treap.querypre(x)<<endl;break;\n            case 6:cout<<Treap.querysuf(x)<<endl;break;\n        }\n    }\n}\n\nint main() {\n    \n//\tfreopen(\"y.txt\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n    \n    work();\n    \n    return 0;\n}\n```\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u76ee\u8fd8\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u6c34\u8fc7\u53bb\u3002\u3002\u3002\u7136\u540e\u6811\u72b6\u6570\u7ec4\u5e38\u6570\u5c0f\uff0c\u6240\u4ee5\u8dd1\u7684\u975e\u5e38\u975e\u5e38\u975e\u5e38\u5730\u5feb\uff08\u4e00\u767e\u591a\u662f\u8dd1\u7684\u6bd4\u8f83\u5feb\u5730\u4e86\u5427\uff09\n\n\u6700\u91cd\u8981\u7684\u662f \u7801\u91cf\u975e\u5e38\u5c0f\n\n```cpp\n//\u6811\u72b6\u6570\u7ec4\n\n#include<cstdio>\n#include <iostream>\nusing namespace std;\nconst int M=10000001;\nint f[20000002],n,vmax=20000001;\n#define lowbit(x) (x&(-x))\ninline void add(int x,int k){\n     \n    while(x<=vmax) {\n    \tf[x]+=k;\n    \tx+=lowbit(x);\n    }\n} \n\ninline int getRank(int x){\n    int sum(0);x;\n    while(x) {\n        sum+=f[x];\n        x-=lowbit(x);\n    } \n    return sum;\n}\n\nint find(int k){\n    int ans=0,cnt=0;\n    for(int i=25;i>=0;i--){\n        ans+=(1<<i);\n        if(ans>vmax||cnt+f[ans]>=k)\n            ans-=(1<<i);\n        else\n            cnt+=f[ans];\n    }\n    return ++ans;\n}\ninline int min(int a,int b){return a<b?a:b;}\ninline int max(int a,int b){return a>b?a:b;}\nstatic char buf[100000],*pa(buf),*pb(buf);\n#define gc pa==pb&&(pb=(pa=buf)+fread(buf,1,100000,stdin),pa==pb)?EOF:*pa++\ninline int read()\n{\n    register int x(0);register int f(1);register char c(gc);\n    while((c<'0'||c>'9')&&c!='-')c=gc;\n    c=='-'?f=-1,c=gc:f;\n    while(c>='0'&&c<='9')x=x*10+(c^48),c=gc;\n    return f*x;\n}\nint tp;\nstatic char pbuf[10000000],*pp(pbuf),st[15];\ninline void write(int v)\n{\n    if(!v)\n        *pp++=48;\n    else\n    {\n        int mark(0);\n        if(v<0)\n            v=~v+1,mark=1;\n        while(v)\n            st[++tp]=v%10+48,v/=10;\n        if(mark)\n            st[++tp]='-';\n        while(tp)\n            *pp++=st[tp--];\n    }\n    *pp++='\\n';\n}\nint main(){\n//\tfreopen(\"y.txt\",\"r\",stdin);\n//\tfreopen(\"o.txt\",\"w\",stdout);\n    n=read(); \n    int opt,x;\n    while(n--){\n        opt=read(),x=read();\n        x+=M;\n        switch(opt) {\n        case 1:add(x,1);break;\n        case 2:add(x,-1);break;\n        case 3:write(getRank(x-1)+1);break;\n        case 4:x-=M;write(find(x)-M);break;\n        case 5:write(find(getRank(x-1))-M);break;\n        case 6:write(find(getRank(x)+1)-M);break;\n    }}\n}\n```\n\uff08\u6211\u7231\u6811\u72b6\u6570\u7ec4\uff09\n\n\n\n",
        "postTime": 1547096449,
        "uid": 119086,
        "name": "zijinjun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u5728\u7f51\u4e0a\u67d0\u7bc7\u795e\u5947\u7684\u6559\u7a0b\u548c@codesonic \u5927\u4f6c\u7684\u6807\u7a0b\u5e2e\u52a9\u4e0b\uff0c\u6211\u53c8\u809d\u5b8c\u4e86Leafy Tree\uff0c\u8dd1\u8fc7\u6765\u5199\u7bc7\u9898\u89e3\uff08\u597d\u50cf\u4ee5\u524d\u5199\u8fc7\u4e00\u7bc7\uff1f\uff09\n\n------------\n\n### \u4ec0\u4e48\u662fLeafy Tree?\n\nLeafy Tree\u7531\u4e24\u79cd\u8282\u70b9\u7ec4\u6210\uff1a\u8f85\u52a9\u8282\u70b9\u4e0e\u53f6\u5b50\u8282\u70b9\u3002\n\n\u53f6\u5b50\u8282\u70b9\u50a8\u5b58\u503c\uff0c\u800c\u8f85\u52a9\u8282\u70b9\u50a8\u5b58\u5de6\u53f3\u5b69\u5b50\u4e2d\u5927\u7684\u90a3\u4e2a\u503c\u3002\n\n\u6ce8\u610f\uff1a\u8f85\u52a9\u8282\u70b9\u5fc5\u5b9a\u6709\u4e24\u4e2a\u5b69\u5b50\u3002\n\n### \u64cd\u4f5c\u5982\u4f55\u5b9e\u73b0\uff1f\n\n\u62ff\u63d2\u5165\u64cd\u4f5c\u4e3e\u4f8b\uff1a\n\n\u4e00\u8def\u5411\u4e0b\u9012\u5f52\uff0c\u6bcf\u6b21\u62ff\u5de6\u5b50\u6811\u6700\u5927\u503c\u4e0e\u63d2\u5165\u503c\u4f5c\u6bd4\u8f83\uff0c\u5982\u679c\u5927\u5c31\u5f80\u5de6\uff0c\u5982\u679c\u5c0f\u5c31\u5f80\u53f3\u3002\n\n\u5230\u5e95\u4e86\u5c31\u63d2\u5165\u53f6\u5b50\u4e0e\u8f85\u52a9\u3002\n\n\u7136\u540e\u518d\u56de\u6eaf\u66f4\u65b0\u3002\n\n\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u4e2a\u7b97\u6cd5\u5f88\u5bb9\u6613\u88ab\u6570\u636e\u5361\u3002\n\n\u89e3\u51b3\u65b9\u6848\u662f\u5f15\u5165\u5e73\u8861\u56e0\u5b50\uff0c\u5728\u9002\u5f53\u7684\u65f6\u5019\u91cd\u5efa\u8fd9\u9897\u6811\u3002\n\n\u91cd\u6784\u65b9\u6cd5\u53ef\u4ee5\u62cd\u6241\u4e5f\u53ef\u4ee5\u65cb\u8f6c\u3002\n\n\u62cd\u6241\u7684\u65b9\u6cd5\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\u4e00\u904d\u7136\u540e\u91cd\u65b0\u5efa\u6811(\u5177\u4f53\u53ef\u4ee5\u53c2\u8003[\u8fd9\u91cc](https://www.luogu.org/blog/38859/solution-p3369))\uff0c\u65cb\u8f6c\u7684\u4e00\u4f1a\u513f\u4f1a\u8bb2\u3002\n\n------------\n\n### \u5de5\u5177\u51fd\u6570\n\n\u8fd9\u91cc\u662f\u4e00\u4e9b~~\u7b80\u5355\u7684~~\u91cd\u8981\u7684\u5de5\u5177\u51fd\u6570\u3002\n\n1. \u65b0\u5efa\u8282\u70b9\n\n```cpp\ninline void newNode(int &pos,int v){\n\tpos=++cnt,size[pos]=1,val[pos]=v;\n}\n```\n\ncnt\u662f\u603b\u7ed3\u70b9\u4e2a\u6570\uff0csize\u662f\u5b50\u6811\u5927\u5c0f\uff0cval\u662f\u503c\uff08\u5e9f\u8bdd\uff09\u3002\n\n2. \u590d\u5236\u8282\u70b9\n\n```cpp\ninline void copyNode(int x,int y){\n\tsize[x]=size[y],ls[x]=ls[y],rs[x]=rs[y],val[x]=val[y];\n}\n```\n\n\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\n\n3. \u5408\u5e76\u8282\u70b9\n\n```cpp\nvoid merge(int l,int r){\n\tsize[++cnt]=size[l]+size[r],val[cnt]=val[r],ls[cnt]=l,rs[cnt]=r;\n}\n```\n\n4. \u65cb\u8f6c\n\n```cpp\nvoid rotate(int pos,bool flag){\n\tif(flag){\n\t\tmerge(ls[pos],ls[rs[pos]]);\n\t\tls[pos]=cnt,rs[pos]=rs[rs[pos]];\n\t}else{\n\t\tmerge(rs[ls[pos]],rs[pos]);\n\t\trs[pos]=cnt,ls[pos]=ls[ls[pos]];\n\t}\n}\n```\n\n\u8fd9\u662f\u91cd\u5efa\u4f9d\u8d56\u7684\u65cb\u8f6c\u51fd\u6570\uff0c\u5de6\u65cb\u53f3\u65cb\u770bflag\u3002\n\n\u5177\u4f53\u6d41\u7a0b\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\uff0c\u53ef\u4ee5\u53c2\u8003splay\u7684\u5de6\u65cb\u4e0e\u53f3\u65cb\u3002\n\n5. \u91cd\u5efa\n\n```cpp\nvoid maintain(int pos){\n\tif(size[ls[pos]]>size[rs[pos]]*alpha)rotate(pos,0);\n\telse if(size[rs[pos]]>size[ls[pos]]*alpha)rotate(pos,1);\n\tif(size[ls[pos]]>size[rs[pos]]*alpha)rotate(ls[pos],1),rotate(pos,0);\n\telse if(size[rs[pos]]>size[ls[pos]]*alpha)rotate(rs[pos],0),rotate(pos,1);\n}\n```\n\n\u8fd9\u662f\u91cd\u5efa\u51fd\u6570\uff0c\u5e73\u8861\u56e0\u5b50\u5c31\u8fd9\u9898\u800c\u8a00\u53d64\u5e94\u8be5\u662f\u6700\u5feb\u7684\u3002\n\n------------\n\n### \u63d2\u5165\u64cd\u4f5c\n\n```cpp\nvoid insert(int pos,int v){\n\tif(size[pos]==1){\n\t\tnewNode(ls[pos],min(v,val[pos]));\n\t\tnewNode(rs[pos],max(v,val[pos]));\n\t\tpushup(pos);\n\t\treturn;\n\t}\n\tif(v>val[ls[pos]])insert(rs[pos],v);\n\telse insert(ls[pos],v);\n\tpushup(pos);\n    maintain(pos);\n}\n```\n\n\u601d\u8def\u5c31\u662f\u4e4b\u524d\u8bb2\u7684\u4e00\u8def\u5411\u4e0b\u9012\u5f52\u3002\n\n\u5f53\u5b50\u6811\u5927\u5c0f\u4e3a1\u7684\u65f6\u5019\uff08\u5230\u5934\u4e86\uff09\u5c31\u5728\u5e95\u4e0b\u65b0\u5efa\u4e24\u4e2a\u8282\u70b9\uff0c\u4e00\u4e2a\u53f6\u5b50\u4e00\u4e2a\u8f85\u52a9\uff0c\u7136\u540e\u56de\u6eaf\u66f4\u65b0\u3002\n\n\u5982\u679c\u6ca1\u5230\u5934\u7684\u8bdd\u5c31\u7ee7\u7eed\u9012\u5f52\uff0c\u7136\u540e\u9012\u5f52\u5b8c\u4e86\u5c31\u7ef4\u62a4\u4e00\u4e0b\u5de6\u53f3\u5b50\u6811\u7684\u5e73\u8861\uff0c\u770b\u770b\u9700\u4e0d\u9700\u8981\u91cd\u5efa\u3002\n\n------------\n\n### \u5220\u9664\u64cd\u4f5c\n\n```cpp\nvoid erase(int pos,int v){\n\tif(size[pos]==1){\n\t\tif(ls[father]==pos)copyNode(father,rs[father]);\n\t\telse copyNode(father,ls[father]);\n\t\treturn;\n\t}\n\tfather=pos;\n\tif(v>val[ls[pos]])erase(rs[pos],v);\n\telse erase(ls[pos],v);\n\tpushup(pos);\n\tmaintain(pos);\n}\n```\n\n\u5220\u9664\u64cd\u4f5c\u7684\u601d\u8def\u548c\u63d2\u5165\u64cd\u4f5c\u4e00\u6837\uff0c\u4e00\u8def\u5411\u4e0b\u3002\n\n\u9700\u8981\u8bf4\u660e\u7684\u662ffather\u662f\u6211\u4eec\u8bb0\u5f55\u7684\u7236\u4eb2\uff08\u4e5f\u53ef\u4ee5\u4e0d\u8fd9\u6837\u800c\u662f\u901a\u8fc7\u4f20\u53c2\u89e3\u51b3\uff09\u3002\n\n------------\n\n### \u6392\u540d\u67e5\u8be2&\u6392\u540d\u5bf9\u5e94\u6570\u67e5\u8be2\n\n```cpp\nint kth(int pos,int v){\n\tif(size[pos]==v)return val[pos];\n\tif(v>size[ls[pos]])return kth(rs[pos],v-size[ls[pos]]);\n\treturn kth(ls[pos],v);\n}\nint rank(int pos,int v){\n\tif(size[pos]==1)return 1;\n\tif(v>val[ls[pos]])return rank(rs[pos],v)+size[ls[pos]];\n\treturn rank(ls[pos],v);\n}\n```\n\n\u8fd9\u4e24\u4e2a\u3002\u3002\u3002\u5199\u4ec0\u4e48\u5e73\u8861\u6811\u90fd\u4f1a\u7528\u5230\u80af\u5b9a\u5927\u5bb6\u90fd\u4f1a\u3002\n\n------------\n\n\u7136\u540e\u597d\u50cf\u5c31\u7ed3\u675f\u4e86\uff08Leafy Tree\u672c\u6765\u7801\u91cf\u5c31\u4e0d\u9ad8\uff09\n\n\u4e0d\u5f00O2\u4e0d\u52a0\u8bfb\u4f18\u5927\u6982\u662f311ms\u5de6\u53f3\uff08\u7adf\u7136\u8fd8\u6ca1\u6709\u6211\u66ff\u7f6a\u7f8a\u6811\u5feb\uff09\uff0c\u5e94\u8be5\u662f\u5199\u4e11\u4e86\u5427\u3002\u3002\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=100100;\nconst int alpha=4;\nint n,cnt,father,root;\nint val[N<<2],size[N<<2],ls[N<<2],rs[N<<2];\ninline void newNode(int &pos,int v){\n\tpos=++cnt,size[pos]=1,val[pos]=v;\n}\ninline void copyNode(int x,int y){\n\tsize[x]=size[y],ls[x]=ls[y],rs[x]=rs[y],val[x]=val[y];\n}\nvoid merge(int l,int r){\n\tsize[++cnt]=size[l]+size[r],val[cnt]=val[r],ls[cnt]=l,rs[cnt]=r;\n}\nvoid rotate(int pos,bool flag){\n\tif(flag){\n\t\tmerge(ls[pos],ls[rs[pos]]);\n\t\tls[pos]=cnt,rs[pos]=rs[rs[pos]];\n\t}else{\n\t\tmerge(rs[ls[pos]],rs[pos]);\n\t\trs[pos]=cnt,ls[pos]=ls[ls[pos]];\n\t}\n}\nvoid maintain(int pos){\n\tif(size[ls[pos]]>size[rs[pos]]*alpha)rotate(pos,0);\n\telse if(size[rs[pos]]>size[ls[pos]]*alpha)rotate(pos,1);\n\tif(size[ls[pos]]>size[rs[pos]]*alpha)rotate(ls[pos],1),rotate(pos,0);\n\telse if(size[rs[pos]]>size[ls[pos]]*alpha)rotate(rs[pos],0),rotate(pos,1);\n}\nvoid pushup(int pos){\n\tif(!size[ls[pos]])return;\n\tsize[pos]=size[ls[pos]]+size[rs[pos]];\n\tval[pos]=val[rs[pos]];\n}\nvoid insert(int pos,int v){\n\tif(size[pos]==1){\n\t\tnewNode(ls[pos],min(v,val[pos]));\n\t\tnewNode(rs[pos],max(v,val[pos]));\n\t\tpushup(pos);\n\t\treturn;\n\t}\n\tif(v>val[ls[pos]])insert(rs[pos],v);\n\telse insert(ls[pos],v);\n\tpushup(pos);\n\tmaintain(pos);\n}\nvoid erase(int pos,int v){\n\tif(size[pos]==1){\n\t\tif(ls[father]==pos)copyNode(father,rs[father]);\n\t\telse copyNode(father,ls[father]);\n\t\treturn;\n\t}\n\tfather=pos;\n\tif(v>val[ls[pos]])erase(rs[pos],v);\n\telse erase(ls[pos],v);\n\tpushup(pos);\n\tmaintain(pos);\n}\nint kth(int pos,int v){\n\tif(size[pos]==v)return val[pos];\n\tif(v>size[ls[pos]])return kth(rs[pos],v-size[ls[pos]]);\n\treturn kth(ls[pos],v);\n}\nint rank(int pos,int v){\n\tif(size[pos]==1)return 1;\n\tif(v>val[ls[pos]])return rank(rs[pos],v)+size[ls[pos]];\n\treturn rank(ls[pos],v);\n}\nint main(){\n    scanf(\"%d\",&n);\n    newNode(root,2147483647);\n    while(n--){\n        int s,a;\n        scanf(\"%d%d\",&s,&a);\n        if(s==1)insert(root,a);\n        if(s==2)erase(root,a);\n        if(s==3)printf(\"%d\\n\",rank(root,a));\n        if(s==4)printf(\"%d\\n\",kth(root,a));\n        if(s==5)printf(\"%d\\n\",kth(root,rank(root,a)-1));\n        if(s==6)printf(\"%d\\n\",kth(root,rank(root,a+1)));\n    }\n}\n```",
        "postTime": 1535544779,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u5f53\u7136\u662f\u9009\u62e9\u624b\u5199\u7ea2\u9ed1\u6811\u5566,\u4e0d\u5c31\u4e09\u767e\u6765\u884c\u4ee3\u7801\u5417\uff08\u6ed1\u7a3d\n\n\u6309\u7406\u6765\u8bf4\u7ea2\u9ed1\u6811\u5e94\u8be5\u662f\u6bd4\u5176\u4ed6\u7684\u5e73\u8861\u6811\u5e38\u6570\u5c0f\u4e00\u70b9\u7684\uff0c\u4f46\u662f\u56e0\u4e3a\u6211\u4ee3\u7801\u6c34\u5e73\u592a\u5f31\uff0c\u611f\u89c9\u5e76\u6ca1\u6709\u6bd4\u522b\u4eba\u5199\u7684\u66f4\u5feb(\u5341\u4e2a\u70b9\u603b\u8ba1184ms)\n\n\u7ea2\u9ed1\u6811\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u989c\u8272\u4fe1\u606f\u3002\u63d2\u5165\u548c\u5220\u9664\u5728\u505a\u5b8c\u6b63\u5e38\u7684\u63d2\u5165\uff0c\u5220\u9664\u64cd\u4f5c\u4e4b\u540e\u8981\u8fdb\u884cfix up\u6765\u7ef4\u62a4\u7ea2\u9ed1\u6027\u8d28\uff0c\u5206\u4e3a\u5f88\u591a\u79cd\u60c5\u51b5(\u5927\u6982\u662f\u63d2\u5165\u4e09\u79cd\uff0c\u5220\u9664\u56db\u79cd?)\u3002\u60f3\u8be6\u7ec6\u4e86\u89e3\u7684\u53ef\u4ee5\u7ffb\u7ffb\u7b97\u5bfc\u6216\u8005\u4e0a\u7f51\u770b\u770b\u8be6\u7ec6\u6559\u7a0b\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u8d34\u4ee3\u7801\u4e86\u3002\n\n\n\n\n\n\n\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define R true\n#define B false\nconst int maxn = 1e6 + 1;\nconst int npos = INT_MAX;\nint ch[maxn][2], sz[maxn], cnt[maxn], p[maxn], keys[maxn];\nbool color[maxn];\nint root, tree_size;\nconst int nil = 0;\ninline void rotate(int x, bool right)\n{\n    //right == 0 -> rotateL\n    //right == 1 -> rotateR\n    int y = ch[x][!right];\n    ch[x][!right] = ch[y][right];\n    if (ch[y][right] != nil)\n        p[ch[y][right]] = x;\n    p[y] = p[x];\n    if (p[x] == nil)\n        root = y;\n    else\n        ch[p[x]][x == ch[p[x]][1]] = y;\n    ch[y][right] = x;\n    p[x] = y;\n    sz[y] = sz[x];\n    sz[x] = sz[ch[x][0]] + sz[ch[x][1]] + cnt[x];\n}\ninline void transplant(int to, int from)\n{\n    //\u628afrom\u8282\u70b9\u79fb\u63a5\u5230to\u8282\u70b9\u4e0b\u6210\u4e3a\u5176\u5b50\u6811,\u7528\u4e8e\u5220\u9664\u64cd\u4f5c\n    p[from] = p[to];\n    if (p[to] == nil)\n        root = from;\n    else\n        ch[p[to]][to == ch[p[to]][1]] = from;\n}\ninline int findMin(int x)\n{\n    while (ch[x][0] != nil)\n        x = ch[x][0];\n    return x;\n}\ninline int findMax(int x)\n{\n    while (ch[x][1] != nil)\n        x = ch[x][1];\n    return x;\n}\ninline int findNode(int k)\n{\n    int x = root;\n    while (x != nil)\n    {\n        if (keys[x] == k)\n            return x;\n        //k\u5927\u5219\u53f3,k\u5c0f\u5219\u5de6\n        x = ch[x][keys[x] < k];\n    }\n    return npos;\n}\ninline int find(int k)\n{\n    int x;\n    if ((x = findNode(k)) != npos)\n        return keys[x];\n    return npos;\n}\ninline void putFixUp(int z)\n{\n    //\u4fee\u590dput\u7834\u574f\u7684\u7ea2\u9ed1\u6027\u8d28\n    while (color[p[z]] == R)\n    {\n        int fa = p[z], grand = p[fa];\n        bool is_left = fa == ch[grand][0];\n        int y = ch[grand][is_left];\n        if (color[y] == R)\n        {\n            color[y] = color[fa] = B;\n            color[grand] = R;\n            z = grand;\n        }\n        else\n        {\n            if (z == ch[fa][is_left])\n            {\n                z = fa;\n                rotate(z, !is_left);\n            }\n            color[p[z]] = B;\n            color[p[p[z]]] = R;\n            rotate(grand, is_left);\n        }\n    }\n    color[root] = B;\n}\ninline void put(int k)\n{\n    int x = root, y = nil;\n    while (x != nil)\n    {\n        y = x;\n        ++sz[y];\n        if (keys[x] == k)\n        {\n            ++cnt[x];\n            return;\n        }\n        x = ch[x][keys[x] < k];\n    }\n    int z = ++tree_size;\n    keys[z] = k;\n    color[z] = R;\n    p[z] = y;\n    sz[z] = cnt[z] = 1;\n    if (y == nil)\n        root = z;\n    else\n        ch[y][keys[y] < k] = z;\n    putFixUp(z);\n}\ninline void delFixUp(int x)\n{\n    //\u4fee\u590ddel\u7834\u574f\u7684\u7ea2\u9ed1\u6027\u8d28\n    while (x != root && color[x] == B)\n    {\n        int fa = p[x];\n        bool is_left = x == ch[p[x]][0];\n        int w = ch[fa][is_left];\n        if (color[w] == R) //case 1,will enter case 234 later\n        {\n            color[fa] = R;\n            color[w] = B;\n            rotate(fa, !is_left);\n            w = ch[fa][is_left];\n        }\n        if (color[ch[w][0]] == B && color[ch[w][1]] == B) //case 2,will not enter case 34\n        {\n            color[w] = R;\n            x = p[x];\n        }\n        else\n        {\n            if (color[ch[w][is_left] == B]) //case 3,will enter case 4\n            {\n                color[w] = R;\n                color[ch[w][!is_left]] = B;\n                rotate(w, is_left);\n                w = ch[fa][is_left];\n            }\n            //case 4,after which the \"while\" will finish\n            color[w] = color[fa]; //swap the color of w and x->p(w->p)\n            color[fa] = B;\n            color[ch[w][is_left]] = B;\n            rotate(p[w], !is_left);\n            x = root;\n        }\n    }\n    color[x] = B;\n}\ninline void del(int k)\n{\n    int z = root, w = nil;\n    while (z != nil)\n    {\n        w = z;\n        --sz[w];\n        if (k == keys[z])\n            break;\n        z = ch[z][keys[z] < k];\n    }\n    if (z != nil)\n    {\n        if (cnt[z] > 1)\n        {\n            --cnt[z];\n            return;\n        }\n        int y = z, x;\n        bool oldColor = color[y];\n        if (ch[z][0] == nil)\n        {\n            x = ch[z][1];\n            transplant(z, ch[z][1]);\n        }\n        else if (ch[z][1] == nil)\n        {\n            x = ch[z][0];\n            transplant(z, ch[z][0]);\n        }\n        else\n        {\n            y = findMin(ch[z][1]);\n            oldColor = color[y];\n            x = ch[y][1];\n            if (p[y] == z)\n                p[x] = y;\n            else\n            {\n                //\u628ay\u79fb\u63a5\u5230z\u4e0b,\u6cbf\u8def\u51cf\u5c0fsz,\u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5--sz[tempy]\n                int tempy = y;\n                while (tempy != z)\n                {\n                    sz[tempy] -= cnt[y];\n                    tempy = p[tempy];\n                }\n                transplant(y, ch[y][1]);\n                ch[y][1] = ch[z][1];\n                p[ch[y][1]] = y;\n            }\n            transplant(z, y);\n            ch[y][0] = ch[z][0];\n            p[ch[y][0]] = y;\n            color[y] = color[z];\n            sz[y] = sz[ch[y][0]] + sz[ch[y][1]] + cnt[y];\n        }\n        if (oldColor == B)\n            delFixUp(x);\n    }\n    else\n    {\n        //\u6ca1\u627e\u5230,\u6062\u590d\u4e4b\u524d\u51cf\u6389\u7684sz\n        while (w != nil)\n        {\n            ++sz[w];\n            w = p[w];\n        }\n    }\n}\ninline void inorderWalk(int x, void pred(int k, int cnt))\n{\n    //\u4e2d\u5e8f\u904d\u5386\u6811,\u8fd9\u91cc\u6ca1\u6709\u7528\u5230\n    if (ch[x][0] != nil)\n        inorderWalk(ch[x][0], pred);\n    pred(keys[x], cnt[x]);\n    if (ch[x][1] != nil)\n        inorderWalk(ch[x][1], pred);\n}\ninline int countLower(int rend, bool canEqual)\n{\n    //canEqual\u4e3atrue\u65f6,\u4f1a\u628arend\u6392\u5728\u4e0e\u5b83\u76f8\u7b49\u7684\u5143\u7d20\u4e4b\u540e,\u8fd9\u91cc\u6ca1\u6709\u7528\u5230\n    int x = root;\n    int ret = 0;\n    while (x != nil)\n    {\n        if (keys[x] < rend || (canEqual && !(rend < keys[x]) && !(keys[x] < rend)))\n        {\n            ret += sz[ch[x][0]] + cnt[x];\n            x = ch[x][1];\n        }\n        else\n            x = ch[x][0];\n    }\n    return ret;\n}\ninline int countBetween(int lend, int rend)\n{\n    return countLower(rend, true) - countLower(lend, false);\n}\ninline int findNext(int k)\n{\n    put(k);\n    int ret, x = findNode(k);\n    if (ch[x][1] != nil)\n        ret = keys[findMin(ch[x][1])];\n    else\n    {\n        while (ch[p[x]][1] == x)\n            x = p[x];\n        if (p[x] == nil)\n            ret = npos;\n        else\n            ret = keys[p[x]];\n    }\n    del(k);\n    return ret;\n}\ninline int findPrev(int k)\n{\n    put(k);\n    int ret, x = findNode(k);\n    if (ch[x][0] != nil)\n        ret = keys[findMax(ch[x][0])];\n    else\n    {\n        while (ch[p[x]][0] == x)\n            x = p[x];\n        if (p[x] == nil)\n            ret = npos;\n        else\n            ret = keys[p[x]];\n    }\n    del(k);\n    return ret;\n}\ninline int findKthSmallest(int k)\n{\n    int x = root;\n    while (x != nil)\n    {\n        int l = ch[x][0], r = ch[x][1];\n        if (sz[l] + 1 <= k && sz[l] + cnt[x] >= k)\n            return keys[x];\n        else\n        {\n            if (sz[l] + cnt[x] < k)\n            {\n                k -= sz[l] + cnt[x];\n                x = r;\n            }\n            else\n                x = l;\n        }\n    }\n    return npos;\n}\nint main()\n{\n    int n, opt, x;\n    scanf(\"%d\", &n);\n    while (n--)\n    {\n        scanf(\"%d%d\", &opt, &x);\n        switch (opt)\n        {\n        case 1:\n            put(x);\n            break;\n        case 2:\n            del(x);\n            break;\n        case 3:\n            printf(\"%d\\n\", countLower(x, false) + 1);\n            break;\n        case 4:\n            printf(\"%d\\n\", findKthSmallest(x));\n            break;\n        case 5:\n            printf(\"%d\\n\", findPrev(x));\n            break;\n        case 6:\n            printf(\"%d\\n\", findNext(x));\n            break;\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1514446348,
        "uid": 68618,
        "name": "MashPlant",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "# \u65e0\u6307\u9488\uff0c\u7eaf\u5e73\u8861\u4e8c\u53c9\u6811\u6253\u6cd5\n\u6211\u4e00\u4e2a\u849f\u84bb\u90fd\u6765\u53d1\u7d2b\u9898\u9898\u89e3\u4e86\uff0c\u611f\u89c9\u6709\u70b9\u7d27\u5f20\u3002\u3002\n\n\u8fdb\u5165\u6b63\u9898\u3002\n\n\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u5927\u81f4\u5206\u6210\u516d\u5927\u5757\uff1a\n\n1. **\u63d2\u5165\u6570**\n1. **\u5220\u9664\u6570**\n1. **\u67e5\u8be2\u6570\u7684\u6392\u540d**\n1. **\u67e5\u8be2\u6392\u540d\u7b2cn\u7684\u6570**\n1. **\u524d\u9a71 \u540e\u7ee7**\n\n\u4e0b\u9762\u5206\u70b9\u8fdb\u884c\u8be6\u89e3\u3002\n\n\n------------\n## \u4e00\u3001\u63d2\u5165\u6570\n\u6839\u636e\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u6982\u5ff5\uff0c\u6211\u4eec\u5bf9\u4e00\u4e2a\u533a\u95f4\u4e0d\u65ad\u4e8c\u5206\uff0c\u76f4\u5230\u5de6\u53d8\u91cf\u7b49\u4e8e\u53f3\u53d8\u91cf\u4e3a\u6b62\u3002\n\n\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6dfb\u52a0\u6570\u7684\u540c\u65f6\uff0c\u5bf9\u8fd9\u4e2a\u8fc7\u7a0b\u6240\u7ecf\u8fc7\u7684\u70b9\u8fdb\u884c\u8bb0\u5f55\uff0c\u5176\u4f18\u70b9\uff1a\n\n1. **\u53ef\u4ee5\u5728\u5fc5\u8981\u65f6\u8fdb\u884c\u526a\u679d**\n1. **\u4e3a\u540e\u6765\u67e5\u8be2\u6392\u540d\u548c\u524d\u9a71\u540e\u7ee7\u505a\u4e00\u5b9a\u4f18\u5316**\n```cpp\ninline void inst(ll k){\n\tregister int i,j;\n\tll ll=l,rr=r,mid,p=1;\n\twhile(ll<rr){//\u5bf9\u533a\u95f4\u8fdb\u884c\u4e8c\u5206\n\t\tmid=(ll+rr)/2;\n\t\tif(mid<0)mid--;//\u6b64\u5904\u662f\u5bf9\u8d1f\u6570\u8fdb\u884c\u5224\u65ad\uff0c\u4ee5\u4fdd\u8bc1\u8d1f\u6570\u4e0d\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\n\t\ta[p].num++;//\u5bf9\u6240\u7ecf\u8fc7\u7684\u6839\u8282\u70b9\u8fdb\u884c\u8bb0\u5f55\n\t\tif(k<=mid){//\u5f80\u5de6\u8fb9\u641c\u7d22\n\t\t\tif(a[p].lf==0){\n\t\t\t\tan++;a[p].lf=an;//\u65b0\u62d3\u5c55\u70b9\n\t\t\t\ta[an].lf=0;a[an].rt=0;a[an].num=0;//\u521d\u59cb\u5316\n\t\t\t}\n\t\t\tp=a[p].lf;rr=mid;//\u5de6\u8fb9\n\t\t}\n\t\telse{//\u5f80\u53f3\u8fb9\u641c\u7d22\n\t\t\tif(a[p].rt==0){\n\t\t\t\tan++;a[p].rt=an;//\u65b0\u62d3\u5c55\u70b9\n\t\t\t\ta[an].lf=0;a[an].rt=0;a[an].num=0;\n\t\t\t}\n\t\t\tp=a[p].rt;ll=mid+1;//\u53f3\u8fb9\n\t\t}\n\t}\n\ta[p].num++;//\u4e0d\u8981\u5fd8\u4e86\u67e5\u627e\u5230\u4e5f\u8981\u5bf9\u8fd9\u4e2a\u6570\u8fdb\u884c++\n\n}\n```\n\n\n------------\n## \u4e8c\u3001\u5220\u9664\u6570\n\u6b64\u5904\u6211\u4eec\u7684\u65b9\u6cd5\u4f9d\u7136\u662f\u4e8c\u5206\uff0c\u4e0d\u8fc7\u8981\u6ce8\u610f\u7684\u662f\u8981\u6d88\u6389\u6b64\u524d\u6240\u505a\u7684\u6807\u8bb0\u3002\n\n\u4f46\u6709\u4e00\u4e2a\u95ee\u9898\uff1a**\u5982\u679c\u518d\u5f80\u4e0b\u641c\u7d22\u7684\u8fc7\u7a0b\u5148\u6d88\u9664\u6807\u8bb0\uff0c\u6700\u540e\u53d1\u73b0\u6ca1\u6709\u8fd9\u4e2a\u70b9\u3002**\n\n\u5f88\u660e\u663e\uff0c\u89e3\u51b3\u8fd9\u9ebb\u70e6\u7528**\u9012\u5f52\u597d\u8fc7\u975e\u9012\u5f52**\u3002\n```cpp\ninline bool pop(ll sl,ll sr,ll k,ll p){\n\tif(p>0){//\u5224\u65ad\u662f\u5426\u62d3\u5c55\u8fc7\n\t    if(sl==sr){//\u5982\u679c\u533a\u95f4\u91cd\u5408\n\t    \tif(a[p].num>0){//\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u70b9\n\t    \t\ta[p].num--; \n\t    \t\treturn true;//\u56de\u6eaf\uff0c\u4ee3\u8868\u786e\u5b9e\u6709\u8fd9\u4e2a\u70b9\n\t\t\t}\n\t    \telse return false;\n\t\t}\n\t\telse{\n\t\t\tll mid=(sl+sr)/2;\n\t\t\tif(k<=mid){\n\t\t\t\tif(pop(sl,mid,k,a[p].lf))a[p].num--;//\u56de\u6eaf\uff0c\u53bb\u9664\u6807\u8bb0\n\t\t\t}\n\t\t\telse{\n\t\t\t    if(pop(mid+1,sr,k,a[p].rt))a[p].num--;//\u56de\u6eaf\uff0c\u53bb\u9664\u6807\u8bb0\n\t\t\t}\n\t\t}\n\t}\n\tcout<<\"\";//\u8fd9\u91cc\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u7684DEVC++\u5728\u6b64\u4e0d\u52a0\u8f93\u51fa\u4f1aWA\u6389\u4e00\u4e9b\u6d4b\u8bd5\u70b9\n}\n```\n\n\n------------\n## \u4e09\u3001\u67e5\u8be2x\u6570\u7684\u6392\u540d\n\n\n\u6807\u8bb0\u6709\u7528\u6b66\u4e4b\u5730\u8fbd\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5bf9\u4e8e\u533a\u95f4\u4e3a1-10\u7684\u5e73\u8861\u4e8c\u53c9\u6811\u3002\u6211\u4eec\u8981\u67e5\u8be26\u7684\u6392\u540d\u3002\n|1-10  | 3 |\n| -----------: | -----------: |\n| 1-5 | 2 |\n| 6-10 | 1 |\n\n\u5f88\u660e\u663e\uff0c\u56e0\u4e3a\u5de6\u5b50\u68111-5\u6709\u4e24\u4e2a\u6570\uff0c\u800c6\u4e0d\u5728\u5de6\u5b50\u6811\u4e0a\uff0c\u6240\u4ee56\u7684\u6392\u540d\u5fc5\u5b9a\u5927\u4e8e2.\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4e0d\u65ad\u641c\u7d22\uff0c\u82e5\u53d1\u73b0\u641c\u7d22\u7684\u6570\u5728\u53f3\u5b50\u6811\uff0c\u90a3\u5c31\u628a\u5de6\u5b50\u6811\u4e0a\u6570\u7684\u603b\u548c\u52a0\u4e0a\u53bb\uff0c\u4ece\u800c\u51cf\u5c11\u641c\u7d22\u65f6\u95f4\u3002\n```cpp\ninline ll found(ll sl,ll sr,ll k,ll p,ll rank){\n\tregister int i,j;\n\tif(p>0)//\u662f\u5426\u62d3\u5c55\u8fc7\n\t    if(sl==sr){\n\t    \tif(a[p].num>0)return rank;//\u67e5\u627e\u5230\n\t\t}\n\t\telse{\n\t\t\tll mid=(sl+sr)/2;\n\t\t\tif(mid<0)mid--;//\u5bf9\u4e8e\u8d1f\u6570\u5904\u7406\n\t\t\tif(k<=mid)found(sl,mid,k,a[p].lf,rank);//\u5982\u679c\u5728\u5de6\u5b50\u6811\n\t\t\telse found(mid+1,sr,k,a[p].rt,rank+a[a[p].lf].num);\n\t\t}//\u5728\u53f3\u5b50\u6811\uff0c\u6ca1\u5fc5\u8981\u641c\u7d22\u5de6\u5b50\u6811\uff0c\u53ea\u9700\u8981\u52a0\u4e0a\u5de6\u5b50\u6811\u4e0a\u70b9\u7684\u4e2a\u6570\n}\n```\n\n\n\n------------\n\n## \u56db\u3001\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570\n\u6211\u4eec\u4e4b\u524d\u6240\u505a\u7684\u6807\u8bb0\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\n\n\u5047\u8bbe\u6211\u4eec\u9762\u5bf9\u533a\u95f4\u4e3a1-10\u7684\u5e73\u8861\u4e8c\u53c9\u6811\u3002\u6211\u4eec\u8981\u67e5\u8be2\u6392\u540d\u4e3a3\u7684\u6570\u3002\n| 1-10 | 3 |\n| -----------: | -----------: |\n| 1-5 | 2 |\n| 6-10 |  1|\n\u5f88\u660e\u663e\uff0c\u6392\u540d\u7b2c\u4e09\u7684\u8282\u70b9\u4e0d\u5728\u5de6\u5b50\u6811\u3002\u56e0\u6b64\u6211\u4eec**\u6ca1\u5fc5\u8981\u641c\u7d22\u5de6\u5b50\u6811\uff0c\u53ea\u9700\u8981\u641c\u7d22\u53f3\u5b50\u6811\u3002**\n\n\u53c8\u56e0\u4e3a\u5de6\u5b50\u6811\u4e0a\u6709\u4e24\u4e2a\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u8f6c\u6362\u6210\uff1a**\u5728\u533a\u95f4\u4e3a6-10\u7684\u5e73\u8861\u4e8c\u53c9\u6811\u3002\u6211\u4eec\u8981\u67e5\u8be2\u6392\u540d\u4e3a3-2=1\u7684\u6570\u3002**\n\n\u82e5\u5728\u5de6\u5b50\u6811\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5bf9\u5de6\u5b50\u6811\u641c\u7d22\u3002\n\n\u5229\u7528\u8fd9\u4e00\u6027\u8d28\uff0c\u505a\u6210\u4e00\u4e0b\u51fd\u6570\uff1a\n```cpp\ninline ll find(ll sl,ll sr,ll k,ll p){\n\tregister int i,j;\n\tif(a[p].num<k);//\u5982\u679c\u6b64\u65f6\u533a\u95f4\u7684\u70b9\u90fd\u6ca1\u6709k\u4e2a\uff0c\u76f4\u63a5return\n\telse{\n\t    if(sl==sr&&a[p].num>0)return sl;//\u67e5\u8be2\u5230\u70b9\uff0c\u8f93\u51fa\n\t    ll pl=a[p].lf,pr=a[p].rt;\n\t    ll mid=(sl+sr)/2;\n        if(mid<0)mid--;\n\t    if(a[pl].num<k)find(mid+1,sr,k-a[pl].num,pr);//\u5982\u679c\u5728\u53f3\u5b50\u6811\n\t    else find(sl,mid,k,pl);//\u5982\u679c\u5728\u5de6\u5b50\u6811\n\t}\n}\n```\n\n\n------------\n## \u4e94\u3001\u524d\u9a71\uff0c\u540e\u7ee7\n\u4e24\u8005\u9053\u7406\u5dee\u4e0d\u591a\uff0c\u6240\u4ee5\u5e76\u5728\u4e00\u8d77\u8c08\u3002\n\n\u5148\u5c06\u524d\u9a71\uff0c\u540e\u7ee7\u4e0e\u4e4b\u51e0\u4e4e\u76f8\u53cd\u3002\n\n**\u6211\u4eec\u5148\u4e0d\u65ad\u641c\u7d22x\u3002\u82e5\u67e5\u8be2\u5230x\uff0c\u56de\u6eaf\uff0c\u76f4\u5230x\u6240\u5904\u7684\u5b50\u6811\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u53f3\u5b50\u6811\uff0c\u4e14\u8be5\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5b58\u5728\u70b9\u3002\u518d\u5bf9\u8fd9\u4e2a\u5de6\u5b50\u6811\u641c\u7d22\u5176\u6700\u5927\u503c\u3002**\n\n\u90a3\u4e48\u95ee\u9898\u5206\u6210\u4e09\u5757\uff1a\n\n1. **\u641c\u7d22x**\n1. **\u56de\u6eaf\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9**\n1. **\u67e5\u627e\u6700\u5927\u503c**\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u5728\u53f3\u5b50\u6811\uff0c\u5927\u5bb6\u53ef\u4ee5\u4ee5\u533a\u95f4\u4e3a1-10\u7684\u5e73\u8861\u4e8c\u53c9\u6811\u4e3a\u4f8b\uff0c1\u5fc5\u7136\u6ca1\u6709\u524d\u9a71\uff0c\u800c\u4e141\u5fc5\u7136\u5728\u5de6\u5b50\u6811\u4e0a\u3002\n```cpp\ninline bool fmax(ll sl,ll sr,ll k,bool t,ll p){\n\tregister int i,j;\n\tll mid=(sl+sr)/2;\n\tif(mid<0)mid--; //\u5bf9\u4e8e\u8d1f\u6570\u5224\u65ad\n\tif(t==false){//\u5982\u679c\u8fd8\u6ca1\u6709\u641c\u7d22\u5230x\uff0c\u6216\u8005\u6ca1\u6709\u67e5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\n\t\tif(p>0)//\u662f\u5426\u62d3\u5c55\u8fc7\n\t\t    if(sl==sr){//\u67e5\u627e\u5230x\uff0c\u7acb\u5373\u8fd4\u56de\n\t\t    \tt=true;\n\t\t    \treturn t;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(k<=mid){//\u5982\u679c\u5728\u5de6\u5b50\u6811\n\t\t\t\t    if(fmax(sl,mid,k,0,a[p].lf)){//\u5982\u679c\u5de6\u5b50\u6811\u4e0a\u5b58\u5728x\n\t\t\t\t    \tt=true;\n\t\t\t\t    \treturn t;//\u56e0\u4e3a\u4e0d\u5728\u53f3\u5b50\u6811\uff0c\u6240\u4ee5\u56de\u6eaf\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t        else{\n\t\t\t\t    if(fmax(mid+1,sr,k,0,a[p].rt)){//\u5982\u679c\u53f3\u5b50\u6811\u5b58\u5728x\n\t\t\t\t\t    if(a[a[p].lf].num>0)fmax(sl,mid,k,1,a[p].lf);//\u6709\u70b9\uff0c\u5f00\u59cb\u67e5\u627e\u6700\u5927\u503c\n\t\t\t\t        else{\n\t\t\t\t    \t    t=true;//\u6ca1\u6709\u70b9\uff0c\u7ee7\u7eed\u56de\u6eaf\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\n\t\t\t\t    \t    return t;\n\t\t\t\t    \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\t}\n\telse{//\u82e5\u53ef\u4ee5\u5f00\u59cb\u67e5\u627e\u6700\u5927\u503c\n\t\tif(b==false&&p>0)//\u82e5\u8fd8\u6ca1\u6709\u627e\u5230\n\t\t    if(sl==sr){\n\t\t    \tif(a[p].num>0){//\u67e5\u627e\u5230\n\t\t    \t\tcout<<sl<<endl;//\u8f93\u51fa\n\t\t    \t\tb=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{//\u56e0\u4e3a\u627e\u6700\u5927\u503c\uff0c\u800c\u4e14\u53f3\u5b50\u6811\u5fc5\u5927\u4e8e\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u4f18\u5148\u641c\u7d22\u53f3\u5b50\u6811\n\t\t\t\tif(b==false)fmax(mid+1,sr,k,1,a[p].rt);\n\t\t\t\tif(b==false)fmax(sl,mid,k,1,a[p].lf);\n\t\t\t}\n\t}\n}\n```\n\u540e\u7ee7\u540c\u7406\uff0c\u53ea\u662f\u610f\u601d\u76f8\u53cd\u3002\n\n\u5949\u4e0aAC\u4ee3\u7801:\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\ntypedef long long ll;\nstruct node{\n\tll lf,rt,num;\n}a[1000001];\nll l=-10000001,r=10000001,an;\nll n;\nbool b=false;\ninline void inst(ll k){//\u63d2\u5165\u6570\n\tregister int i,j;\n\tll ll=l,rr=r,mid,p=1;\n\twhile(ll<rr){\n\t\tmid=(ll+rr)/2;\n\t\tif(mid<0)mid--;\n\t\ta[p].num++;\n\t\tif(k<=mid){\n\t\t\tif(a[p].lf==0){\n\t\t\t\tan++;a[p].lf=an;\n\t\t\t\ta[an].lf=0;a[an].rt=0;a[an].num=0;\n\t\t\t}\n\t\t\tp=a[p].lf;rr=mid;\n\t\t}\n\t\telse{\n\t\t\tif(a[p].rt==0){\n\t\t\t\tan++;a[p].rt=an;\n\t\t\t\ta[an].lf=0;a[an].rt=0;a[an].num=0;\n\t\t\t}\n\t\t\tp=a[p].rt;ll=mid+1;\n\t\t}\n\t}\n\ta[p].num++;\n}\ninline bool pop(ll sl,ll sr,ll k,ll p){\u5220\u9664\u6570\n\tif(p>0){\n\t    if(sl==sr){\n\t    \tif(a[p].num>0){\n\t    \t\ta[p].num--; \n\t    \t\treturn true;\n\t\t\t}\n\t    \telse return false;\n\t\t}\n\t\telse{\n\t\t\tll mid=(sl+sr)/2;\n\t\t\tif(k<=mid){\n\t\t\t\tif(pop(sl,mid,k,a[p].lf))a[p].num--;\n\t\t\t}\n\t\t\telse{\n\t\t\t    if(pop(mid+1,sr,k,a[p].rt))a[p].num--;\n\t\t\t}\n\t\t}\n\t}\n\tcout<<\"\";\n}\ninline ll find(ll sl,ll sr,ll k,ll p){//\u67e5\u8be2\u6392\u540d\u4e3an\u7684\u6570\n\tregister int i,j;\n\tif(a[p].num<k);\n\telse{\n\t    if(sl==sr&&a[p].num>0)return sl;\n\t    ll pl=a[p].lf,pr=a[p].rt;\n\t    ll mid=(sl+sr)/2;\n\t    if(mid<0)mid--; \n\t    if(a[pl].num<k)find(mid+1,sr,k-a[pl].num,pr);\n\t    else find(sl,mid,k,pl);\n\t}\n}\ninline ll found(ll sl,ll sr,ll k,ll p,ll rank){//\u67e5\u8be2x\u7684\u6392\u540d\n\tregister int i,j;\n\tif(p>0)\n\t    if(sl==sr){\n\t    \tif(a[p].num>0)return rank;\n\t\t}\n\t\telse{\n\t\t\tll mid=(sl+sr)/2;\n\t\t\tif(mid<0)mid--;\n\t\t\tif(k<=mid)found(sl,mid,k,a[p].lf,rank);\n\t\t\telse found(mid+1,sr,k,a[p].rt,rank+a[a[p].lf].num);\n\t\t}\n}\ninline bool fmax(ll sl,ll sr,ll k,bool t,ll p){//\u524d\u9a71\n\tregister int i,j;\n\tll mid=(sl+sr)/2;\n\tif(mid<0)mid--; \n\tif(t==false){\n\t\tif(p>0)\n\t\t    if(sl==sr){\n\t\t    \tt=true;\n\t\t    \treturn t;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(k<=mid){\n\t\t\t\t    if(fmax(sl,mid,k,0,a[p].lf)){\n\t\t\t\t    \tt=true;\n\t\t\t\t    \treturn t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t        else{\n\t\t\t\t    if(fmax(mid+1,sr,k,0,a[p].rt)){\n\t\t\t\t\t    if(a[a[p].lf].num>0)fmax(sl,mid,k,1,a[p].lf);\n\t\t\t\t        else{\n\t\t\t\t    \t    t=true;\n\t\t\t\t    \t    return t;\n\t\t\t\t    \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\t}\n\telse{\n\t\tif(b==false&&p>0)\n\t\t    if(sl==sr){\n\t\t    \tif(a[p].num>0){\n\t\t    \t\tcout<<sl<<endl;\n\t\t    \t\tb=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(b==false)fmax(mid+1,sr,k,1,a[p].rt);\n\t\t\t\tif(b==false)fmax(sl,mid,k,1,a[p].lf);\n\t\t\t}\n\t}\n}\ninline bool fmin(ll sl,ll sr,ll k,bool t,ll p){//\u540e\u7ee7\n\tregister int i,j;\n\tll mid=(sl+sr)/2;\n\tif(mid<0)mid--;\n\tif(t==false){\n\t\tif(p>0)\n\t\t    if(sl==sr){\n\t\t    \tt=true;\n\t\t    \treturn t;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(k<=mid){\n\t\t\t\t    if(fmin(sl,mid,k,0,a[p].lf)){\n\t\t\t\t        if(a[a[p].rt].num>0)fmin(mid+1,sr,k,1,a[p].rt);\n\t\t\t\t        else{\n\t\t\t\t    \t    t=true;\n\t\t\t\t    \t    return t;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t        else{\n\t\t\t\t    if(fmin(mid+1,sr,k,0,a[p].rt)){\n\t\t\t\t    \tt=true;\n\t\t\t\t    \treturn t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\t}\n\telse{\n\t\tif(b==false&&p>0)\n\t\t    if(sl==sr){\n\t\t    \tif(a[p].num>0){\n\t\t    \t\tcout<<sl<<endl;\n\t\t    \t\tb=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(b==false)fmin(sl,mid,k,1,a[p].lf);\n\t\t\t\tif(b==false)fmin(mid+1,sr,k,1,a[p].rt);\n\t\t\t}\n\t}\n}\nint main(){\n\tregister int i,j;\n\tcin>>n;\n\tan=1;a[an].lf=0;a[an].rt=0;a[an].num=0;\n\twhile(n){\n\t\tn--;\n\t\tll opt,x;\n\t\tcin>>opt>>x;\n\t\tif(opt==1)inst(x);\n\t\tif(opt==2)pop(l,r,x,1);\n\t\tif(opt==3)cout<<found(l,r,x,1,1)<<endl;\n\t\tif(opt==4)cout<<find(l,r,x,1)<<endl;\n\t\tif(opt==5)b=false,fmax(l,r,x,0,1);\n\t\tif(opt==6)b=false,fmin(l,r,x,0,1);\n\t}\n}\n```\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nk4ubf1t.png)",
        "postTime": 1575794914,
        "uid": 133986,
        "name": "judgejudge",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "## \u672c\u9898splay\u5199\u6cd5\n### 1. \u601d\u60f3\n\u5e73\u8861\u6811\u672c\u8d28\u5c31\u662f\u4e00\u9897\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5229\u7528\u65cb\u8f6c\u4fdd\u8bc1\u5176\u67e5\u627e $\\log n$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\n\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58 5 \u4e2a\u4fe1\u606f\uff1a\n\n- $num$ \u8868\u793a\u8be5\u8282\u70b9\u5b58\u7684\u6570\n- $son[0..1]$ \u8868\u793a\u5de6\u53f3\u513f\u5b50\u7684\u7f16\u53f7\n- $fa$ \u8868\u793a\u8be5\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u7f16\u53f7\n- $size$ \u8868\u793a\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u8282\u70b9\u4e2a\u6570\n- $same$ \u8868\u793a\u4e0e\u8be5\u8282\u70b9\u6570\u76f8\u540c\u7684\u4e2a\u6570\n\n\u5b9a\u4e49\u5982\u4e0b\uff1a\n```cpp\nint cnt,root,n,i,x,opt,ans,now;\nstruct node{\n    int son[3],fa,num,size,same;\n}t[2000010];\n```\n\n\u540c\u65f6\uff0c\u8be5\u6811\u8fd8\u6709\u4e00\u4e2a\u8d85\u7ea7\u6839\u8282\u70b9 $t[0]$\uff0c\u5176\u53f3\u8282\u70b9\u5c31\u662f\u6811\u6839\n\n### 2. \u529f\u80fd\u5168\u89e3\n**1. \u8ddf\u65b0\u5f53\u524d\u8282\u70b9\u7684 $size$ \u503c\uff08$update$\uff09**\n\n\u503c\u4e3a\u5176\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\u548c\u81ea\u5df1 $same$ \u503c\u4e4b\u548c\n```cpp\nvoid update(int i)\n{\n    t[i].size=t[t[i].son[0]].size+t[t[i].son[1]].size+t[i].same;\n}\n```\n\n**2. \u67e5\u8be2\u8fd9\u662f\u54ea\u4e2a\u513f\u5b50\uff08$whichson$\uff09**\n\n\u5982\u679c\u662f\u5de6\u513f\u5b50\u5c31\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de1\n```cpp\nint whichson(int i)\n{\n    if (t[t[i].fa].son[0]==i) return 0;\n    else return 1;\n}\n```\n\n**3. \u65cb\u8f6c\uff08$rotate$\uff09**\n\n\u65cb\u8f6c\u5206\u4e3a\u5de6\u65cb\u548c\u53f3\u65cb\n\n\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a $i$\n1. \u5de6\u65cb\n\n\u5f53 $i$ \u4e3a\u5de6\u513f\u5b50\u65f6\uff0c\u9700\u5de6\u65cb\n```cpp\nif (!which(x)) then \n{\n    t[t[x].son[1]].fa=fa;\n    t[p].son[0]=t[x].son[1];\n    t[x].son[1]=fa;\n}\n```\n\n2. \u53f3\u65cb\n\n\u5f53 $i$ \u4e3a\u53f3\u513f\u5b50\u65f6\uff0c\u9700\u53f3\u65cb\n```cpp\nif (which(x)) then \n{\n    t[t[x].son[0]].fa=fa;\n    t[p].son[1]=t[x].son[0];\n    t[x].son[0]=fa;\n}\n```\n\n\u7ecf\u8fc7\u89c2\u5bdf\uff0c\u6211\u4eec\u53ef\u628a\u5de6\u65cb\u548c\u53f3\u65cb\u5408\u5728\u4e00\u8d77\uff08\u81ea\u5df1\u4f53\u4f1a\uff09\n```cpp\nvoid rotate(int x)\n{\n    int fa=t[x].fa,gfa=t[fa].fa;\n    int whichx=whichson(x),whichfa=whichson(fa);\n    t[t[x].son[!whichx]].fa=fa;\n    t[fa].son[whichx]=t[x].son[!whichx];\n    t[x].son[!whichx]=fa;\n    t[gfa].son[whichfa]=x;\n    t[fa].fa=x;\n    t[x].fa=gfa;\n    update(fa);update(x);\n}\n```\n\n**4. Spaly\uff08\u6838\u5fc3\u64cd\u4f5c\uff09**\n\n\u6bcf\u6b21\u67e5\u8be2/\u63d2\u5165\u64cd\u4f5c\u4ee5\u540e\u90fd\u8981\u628a\u65b0\u8282\u70b9\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u4fdd\u8bc1\u5176\u6df1\u5ea6\u4e3a $\\log n$\n\n\u7528 $splay(x,y)$ \u8868\u793a\u628a $x$ \u7ed3\u70b9\u8f6c\u5230 $y$ \u7ed3\u70b9\u4e0b\u9762\n\n\u6bcf\u6b21\u65cb\u8f6c\u5224\u65ad $whichson(x)$ \u662f\u5426\u4e0e $whichson(t[x].fa)$ \u76f8\u7b49\n\n\u5982\u679c\u76f8\u7b49\uff0c\u5219\u5148\u65cb\u8f6c $t[x].fa$\uff0c\u518d\u65cb\u8f6c $x$\n\n\u5982\u679c\u4e0d\u7b49\uff0c\u5219\u5148\u65cb\u8f6c $x$\uff0c\u518d\u65cb\u8f6c $x$\n\n\u5426\u5219\u4f1a\u5f62\u6210\u5355\u9009\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u6df1\u5ea6\u4e3a $\\log n$\uff08\u4e0d\u61c2\u5f97\u540c\u5b66\u53ef\u4ee5\u81ea\u5df1\u62ff\u4e00\u6761\u94fe\u5f0f\u6570\u636e\u8bd5\u4e00\u4e0b\uff09\n```cpp\nvoid splay(int x,int y)\n{\n    int fa,gfa;\n    if (x==y) return;\n    while (t[x].fa!=y)\n    {\n        fa=t[x].fa;gfa=t[fa].fa;\n        if (gfa!=y)\n        {\n            if (whichson(fa)==whichson(x)) rotate(fa);\n            else rotate(x);\n        }\n        rotate(x);\n    }\n    if (!y) root=x;\n}\n```\n\n**5. \u63d2\u5165\uff08insert\uff09**\n\n\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a $i$\uff0c\u63d2\u5165\u7684\u6570\u503c\u4e3a $x$\uff0c\u5f53\u524d\u8282\u70b9\u7684\u7236\u4eb2\u4e3a $fa$\n1. \u5f53 $i=0$ \u65f6\n\n\u65b0\u52a0\u5165\u4e00\u4e2a\u8282\u70b9\n```cpp\nif (!i)\n{\n    nt++;\n    t[cnt].fa=fa;\n    t[cnt].num=x;t[cnt].size=t[cnt].same=1;\n    if (x<t[fa].num) t[fa].son[0]=cnt;\n    else t[fa].son[1]=cnt;\n    if (cnt==1) root=1;\n    now=cnt;\n    return;\n}\n```\n\n\u5f53\u53d1\u73b0 $x$ \u5df2\u5b58\u5728\n```cpp\nif (x==t[i].num)\n{\n    t[i].size++;t[i].same++;\n    now=i;\n    return;\n} \n```\n\n\u5426\u5219\u5982\u679c $x<t[i].num$ \u5219\u5411\u5de6\uff0c\u5426\u5219\u5411\u53f3\n```cpp\nif (x<t[i].num) insert(t[i].son[0],x,i);\nelse insert(t[i].son[1],x,i);\nupdate(i);  \\\\\u522b\u5fd8\u8bb0update\n```\n\n**6. \u627e $x$ \u7684\u6392\u540d\uff08findrank\uff09**\n\n\u548c\u666e\u901a\u4e8c\u53c9\u67e5\u627e\u6811\u4e00\u6837\uff0c\u5982\u679c $x$ \u6bd4 $t[i].num$ \u5927\uff0c\u5219\u5411\u53f3\u8d70\uff0c\u540c\u65f6\u7528 $sum$ \u8bb0\u5f55\u5176\u6392\u540d\uff0c\u5426\u5219\u7528 $fa$ \u8bb0\u5f55\u6539\u8282\u70b9\uff0c\u7136\u540e\u5411\u5de6\u8d70\uff0c\u6700\u540e $splay(fa,0)$\uff0c\u8fd4\u56de $sum$\n\n```cpp\nint findrank(int x)\n{\n    int i=root,sum=0,fa=0;\n    while (i)\n    {\n        if (t[i].num<x)\n        {\n            sum+=t[t[i].son[0]].size+t[i].same;\n            fa=i;i=t[i].son[1];\n        }\n        else\n        {\n            fa=i;i=t[i].son[0];\n        }\n    }\n    splay(fa,0);\n    return sum;\n}\n```\n\n**7. \u627e\u6392\u540d\u4e3a $k$ \u7684\u8282\u70b9\uff08findnum\uff09**\n\n\u53d1\u73b0\u5f53\u524d $k$ \u6bd4 $t[t[i].son[0]].size+t[i].same$ \u5927\uff0c\u5219 $k-=t[t[i].son[0]].size+t[i].same$ \u5411\u53f3\u8d70\uff0c\u5982\u679c $k\\le t[i].same$ \u5219\u76f4\u63a5\u8fd4\u56de $t[i].num$\uff0c\u5426\u5219 $k-=t[i].num$\uff0c\u5411\u5de6\u8d70\n```cpp\nint findnum(int x)\n{\n    int i=root,sum=0;\n    while (i)\n    {\n        if (t[t[i].son[0]].size+t[i].same>=x)\n        {\n            if (t[t[i].son[0]].size<x) return i;\n            sum=i;i=t[i].son[0];\n        }\n        else\n        {\n            x-=t[t[i].son[0]].size+t[i].same;\n            sum=i;i=t[i].son[1];\n        }\n    }\n    return sum;\n}\n```\n\n**8. \u524d\u7f00\uff08pred\uff09**\n\n\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5f53 $t[i].num\\geq x$ \u65f6\uff0c\u76f4\u63a5\u5411\u5de6\u8d70\uff0c\u5426\u5219\u7528 $sum$ \u8bb0\u5f55\u8be5\u8282\u70b9\uff0c\u5411\u53f3\u8d70\uff0c\u6700\u540e\u8fd4\u56de $sum$\n```cpp\nint pred(int x)\n{\n    int i=root,sum=0;\n    while (i)\n    {\n        if (t[i].num>=x) i=t[i].son[0];\n        else\n        {\n            sum=i;i=t[i].son[1];\n        }\n    }\n    return sum;\n}\n```\n\n**9. \u540e\u7f00\uff08succ\uff09**\n\n\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5f53 $t[i].num\\leq x$ \u65f6\uff0c\u76f4\u63a5\u5411\u53f3\u8d70\uff0c\u5426\u5219\u7528 $sum$ \u8bb0\u5f55\u8be5\u8282\u70b9\uff0c\u5411\u5de6\u8d70\uff0c\u6700\u540e\u8fd4\u56de $sum$\n```cpp\nint succ(int x)\n{\n    int i=root,sum=0;\n    while (i)\n    {\n        if (t[i].num<=x) i=t[i].son[1];\n        else\n        {\n            sum=i;i=t[i].son[0];\n        }\n    }\n    return sum;\n}\n```\n\n**10. \u5220\u9664\uff08del\uff09**\n\n\u5220\u9664\u6709\u70b9\u590d\u6742\uff0c\u6240\u4ee5\u6211\u4eec\u653e\u5728\u6700\u540e\uff0c\u5177\u4f53\u662f\u5148\u5c06 $x$ \u7684\u524d\u7f00\u8282\u70b9 $splay$ \u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u5c06 $x$ \u7684\u540e\u7f00 $splay$ \u5230\u6839\u8282\u70b9\u4e0b\u9762\uff0c\u7136\u540e $t[t[root].son[1]].son[0]$ \u5c31\u662f $x$ \u8282\u70b9\uff0c\u540c\u65f6\u5176\u5de6\u53f3\u513f\u5b50\u90fd\u662f\u7a7a\u7684\uff0c\u53ea\u9700\u8981\u76f4\u63a5\u5220\u9664\u5c31\u884c\u4e86\uff0c\u540c\u65f6\u4e3a\u4e86\u907f\u514d\u6ca1\u6709\u524d\u540e\u7f00\u7684\u60c5\u51b5\uff0c\u6700\u65e9\u8981\u63d2\u5165 `0x7f7f7f7f`\n```cpp\nvoid del(int x)\n{\n    int predd=pred(x),succc=succ(x);\n    splay(predd,0);splay(succc,root);\n    int rs=t[root].son[1],rsls=t[rs].son[0];\n    if (t[rsls].same>1)\n    {\n        t[rsls].same--;t[rsls].size--;\n    }\n    else\n    {\n        t[rs].son[0]=0;\n        t[rsls].same--;t[rsls].size--;\n    }\n    update(rs);update(root);\n}\n```\n\n#### 3. \u5b8c\u6574\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint cnt,root,n,i,x,opt,ans,now;\nstruct node{\n    int son[3],fa,num,size,same;\n}t[2000010];\n\n\nvoid update(int i)\n{\n    t[i].size=t[t[i].son[0]].size+t[t[i].son[1]].size+t[i].same;\n}\n\n\nint whichson(int i)\n{\n    if (t[t[i].fa].son[0]==i) return 0;\n    else return 1;\n}\n\n\nvoid rotate(int x)\n{\n    int fa=t[x].fa,gfa=t[fa].fa;\n    int whichx=whichson(x),whichfa=whichson(fa);\n    t[t[x].son[!whichx]].fa=fa;\n    t[fa].son[whichx]=t[x].son[!whichx];\n    t[x].son[!whichx]=fa;\n    t[gfa].son[whichfa]=x;\n    t[fa].fa=x;\n    t[x].fa=gfa;\n    update(fa);update(x);\n}\n\n\nvoid splay(int x,int y)\n{\n    int fa,gfa;\n    if (x==y) return;\n    while (t[x].fa!=y)\n    {\n        fa=t[x].fa;gfa=t[fa].fa;\n        if (gfa!=y)\n        {\n            if (whichson(fa)==whichson(x)) rotate(fa);\n            else rotate(x);\n        }\n        rotate(x);\n    }\n    if (!y) root=x;\n}\n\n\nvoid insert(int i,int x,int fa)\n{\n    if (!i)\n    {\n        cnt++;\n        t[cnt].fa=fa;\n        t[cnt].num=x;t[cnt].size=t[cnt].same=1;\n        if (x<t[fa].num) t[fa].son[0]=cnt;\n        else t[fa].son[1]=cnt;\n        if (cnt==1) root=1;\n        now=cnt;\n        return;\n    }\n    if (x==t[i].num)\n    {\n        t[i].size++;t[i].same++;\n        now=i;\n        return;\n    }\n    if (x<t[i].num) insert(t[i].son[0],x,i);\n    else insert(t[i].son[1],x,i);\n    update(i);\n}\n\n\nint findnum(int x)\n{\n    int i=root,sum=0;\n    while (i)\n    {\n        if (t[t[i].son[0]].size+t[i].same>=x)\n        {\n            if (t[t[i].son[0]].size<x) return i;\n            sum=i;i=t[i].son[0];\n        }\n        else\n        {\n            x-=t[t[i].son[0]].size+t[i].same;\n            sum=i;i=t[i].son[1];\n        }\n    }\n    return sum;\n}\n\n\nint findrank(int x)\n{\n    int i=root,sum=0,fa=0;\n    while (i)\n    {\n        if (t[i].num<x)\n        {\n            sum+=t[t[i].son[0]].size+t[i].same;\n            fa=i;i=t[i].son[1];\n        }\n        else\n        {\n            fa=i;i=t[i].son[0];\n        }\n    }\n    splay(fa,0);\n    return sum;\n}\n\n\nint pred(int x)\n{\n    int i=root,sum=0;\n    while (i)\n    {\n        if (t[i].num>=x) i=t[i].son[0];\n        else\n        {\n            sum=i;i=t[i].son[1];\n        }\n    }\n    return sum;\n}\n\n\nint succ(int x)\n{\n    int i=root,sum=0;\n    while (i)\n    {\n        if (t[i].num<=x) i=t[i].son[1];\n        else\n        {\n            sum=i;i=t[i].son[0];\n        }\n    }\n    return sum;\n}\n\n\nvoid del(int x)\n{\n    int predd=pred(x),succc=succ(x);\n    splay(predd,0);splay(succc,root);\n    int rs=t[root].son[1],rsls=t[rs].son[0];\n    if (t[rsls].same>1)\n    {\n        t[rsls].same--;t[rsls].size--;\n    }\n    else\n    {\n        t[rs].son[0]=0;\n        t[rsls].same--;t[rsls].size--;\n    }\n    update(rs);update(root);\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    insert(root,0x7f7f7f7f,0);\n    insert(root,-0x7f7f7f7f,0);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d\",&opt,&x);\n        if (opt==1)\n        {\n            insert(root,x,0);\n            splay(now,0);\n        }\n        if (opt==2)\n        {\n            del(x);\n        }\n        if (opt==3)\n        {\n            printf(\"%d\\n\",findrank(x));\n        }\n        if (opt==4)\n        {\n            ans=findnum(x+1);\n            printf(\"%d\\n\",t[ans].num);\n            splay(ans,0);\n        }\n        if (opt==5)\n        {\n            ans=pred(x);\n            printf(\"%d\\n\",t[ans].num);\n            splay(ans,0);\n        }\n        if (opt==6)\n        {\n            ans=succ(x);\n            printf(\"%d\\n\",t[ans].num);\n            splay(ans,0);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1558011167,
        "uid": 67718,
        "name": "G\u6211\u5c31\u662f\u83dcG",
        "ccfLevel": 6,
        "title": "\u3010\u5b66\u4e60\u7b14\u8bb0\u3011\u666e\u901a\u5e73\u8861\u6811\u2014\u2014spaly"
    },
    {
        "content": "\u524d\u8a00:\u82b1\u4e86\u4e24\u5929\u65f6\u95f4\u5199\u5e73\u8861\u6811\u6a21\u677f,\u611f\u89c9\u81ea\u5df1\u628a\u80fd\u9519\u7684\u5730\u65b9\u90fd\u9519\u4e86,\u7ec8\u4e8e\u5728\u706b\u8f66\u4e0a\u5199\u5b8c\u4e86\u3002\u4e3a\u4e86\u81ea\u5df1\u4ee5\u540e\u80fd\u591f\u770b\u5f97\u61c2\u81ea\u5df1\u5199\u5f97\u4ee3\u7801,\u6211\u7684\u6ce8\u91ca\u8f83\u4e3a\u8be6\u7ec6,\u53ea\u662f\u6ca1\u6709\u56fe,\u4f46\u5bf9\u5e73\u8861\u6811\u6709\u4e00\u5b9a\u4e86\u89e3\u7684\u8bdd,\u770b\u4ee3\u7801\u548c\u6ce8\u91ca\u4e00\u5b9a\u80fd\u61c2\uff1a\n\n\u4ee3\u7801\u7565\u4e11\uff0c\u968f\u7f18\u538b\u884c\n```c\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nint n=0,now,root,num=0;//n\u662f\u8282\u70b9\u6570,num\u662f\u5143\u7d20\u4e2a\u6570 \nint q;\nstruct node{\n    int v,father;//v\u662f\u5f53\u524d\u8282\u70b9\u7684\u503c \n    int ch[2];//ch[0]\u8868\u793a\u5de6\u5b69\u5b50,ch[1]\u8868\u793a\u53f3\u5b69\u5b50\n    int cnt;//\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u6709\u51e0\u4e2a\u76f8\u540c\u5143\u7d20,\u53ca\u5f53\u524d\u8282\u70b9\u5143\u7d20\u4e2a\u6570 \n    int sum;//sum\u662f\u5143\u7d20\u4e2a\u6570,\u4e0d\u662f\u8282\u70b9\u4e2a\u6570,\u4e00\u4e2a\u8282\u70b9\u91cc\u53ef\u80fd\u6709\u591a\u4e2a\u5143\u7d20,\u610f\u601d\u662fa[i]\u8fd9\u9897\u5b50\u6811\u91cc\u7684\u5143\u7d20\u4e2a\u6570 \n}a[100100];\nvoid add(int x,int fa){//\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9 \n    n++;\n    a[n].cnt=1,a[n].sum=1,a[n].father=fa,a[n].v=x;\n    return ;\n}\nvoid update(int x){//\u4fee\u6539\u6b64\u8282\u70b9\u7684\u4fe1\u606f \n    a[x].sum=a[x].cnt+a[a[x].ch[0]].sum+a[a[x].ch[1]].sum;//x\u7684\u5b50\u6811\u5927\u5c0f\u7b49\u4e8e\u81ea\u5df1\u8fd9\u4e2a\u8282\u70b9\u5143\u7d20\u4e2a\u6570\u52a0\u53f3\u5b50\u6811\u5927\u5c0f\u52a0\u5de6\u5b50\u6811\u5927\u5c0f \n    return ;\n}\nvoid father(int x,int y,int lr){//\u5c06x\u53d8\u6210y\u7684\u5de6/\u53f3\u513f\u5b50(\u5305\u62ec\u5b50\u6811) \n    a[x].father=y,a[y].ch[lr]=x;\n    return ;\n}\nbool flag(int x){//\u5224\u65adx\u662f\u4ed6\u7236\u4eb2\u7684\u5de6/\u53f3\u513f\u5b50 \n    if(a[a[x].father].ch[0]==x){\n        return 0;\n    }\n    else return 1;\n}\n//\u8fd9\u91cc\u7684x\u662f\u8282\u70b9\u7f16\u53f7:\nvoid rotate(int x){//\u4e0a\u65cb,\u81ea\u5df1\u753b\u4e2a\u56fe(\u6ce8\u610f:\u5982\u679c\u8981\u5c06x\u65cb\u5230y,\u90a3\u4e48y\u8282\u70b9\u4e0e\u4ed6\u7684\u7236\u4eb2\u7684\u5173\u7cfb\u4e5f\u4f1a\u53d8),\u53ef\u4ee5\u53d1\u73b0\u67093\u4e2a\u8282\u70b9\u5173\u7cfb\u4f1a\u53d8 \n    int y=a[x].father;\n    int z=a[y].father;\n    int lr=flag(x),LR=flag(y);\n    //\u5982\u679cx\u662fy\u7684\u5de6\u513f\u5b50,\u90a3\u4e48x\u7684\u53f3\u5b50\u6811\u5c31\u4f1a\u4f5c\u4e3ay\u7684\u5de6\u5b50\u6811,\u5982\u679cx\u662fy\u7684\u53f3\u513f\u5b50,\u90a3\u4e48x\u7684\u5de6\u5b50\u6811\u5c31\u4f1a\u4f5c\u4e3ay\u7684\u53f3\u5b50\u6811\n    //\u5de6\u513f\u5b50\u4e3a0,^1\u540e\u53d8\u62101,\u5c31\u6210\u4e3a\u4e86\u53f3\u5b50\u6811\n    //\u5e76\u4e14x\u53d8\u6210y\u7684\u7236\u4eb2 \n    father(a[x].ch[lr^1],y,lr),father(y,x,lr^1);\n    //\u5982\u679cy\u662fz\u7684\u5de6\u513f\u5b50,\u5c31\u5c06x\u53d8\u6210z\u7684\u5de6\u513f\u5b50,\u53cd\u4e4b\u540c\u7406\n    father(x,z,LR);\n    update(y),update(x);//\u753b\u56fe\u5bb9\u6613\u770b\u51fa,\u53ea\u6709y\u548cx\u7684\u5b50\u6811\u5927\u5c0f\u53d8\u4e86\n    //\u8fd9\u91cc\u6ce8\u610f:y\u4e00\u5b9a\u8981\u5728x\u524d\u9762,\u56e0\u4e3ay\u7684\u5de6\u53f3\u513f\u5b50\u5b50\u6811\u4e2a\u6570\u5df2\u77e5,\u53ef\u4ee5\u5148\u6c42\u51fay\u7684sum,\u800cx\u7684\u5de6\u53f3\u513f\u5b50\u4e00\u4e2a\u662fy,\u800c\u53e6\u4e00\u4e2a\u5df2\u77e5,\u56e0\u4e3ay\u7684\u503c\u5df2\u7ecf\u6539\u53d8\n    //\u6240\u4ee5\u8981\u5148\u6c42\u51fay.\u5982\u679c\u5148\u6c42x,\u90a3\u4e48\u7531\u4e8ey\u7684\u503c\u672a\u66f4\u65b0,\u5c31\u4f1a\u5bfc\u81f4\u503c\u6c42\u9519. \n    return ;\n}\n//splay\u80fd\u4fdd\u6301\u4e8c\u53c9\u67e5\u627e\u6811\u539f\u6709\u6027\u8d28\u5e76\u4e14\u8ba9\u6811\u5c42\u6570\u66f4\u5c11 \nvoid splay(int x,int to){//\u4e0a\u65cb\u64cd\u4f5c,\u5c06x\u8282\u70b9\u4e0a\u65cb\u5230to\u8282\u70b9 \n    int p=a[to].father;\n    //\u5f53x\u8f6c\u5230\u7684\u4f4d\u7f6e\u7684\u7236\u4eb2\u4e0e\u539f\u6765to\u7684\u7236\u4eb2\u4e00\u6837\u65f6,x\u5c31\u8f6c\u5230to\u7684\u4f4d\u7f6e\u4e86,\u800cx\u53ea\u4f1a\u4e0a\u65cb,\u6240\u4ee5to\u7684\u7236\u4eb2\u8282\u70b9\u4e00\u5b9a\u4e0d\u4f1a\u53d8 \n    while(a[x].father!=p){\n        int up=a[x].father;\n        if(up==to){//\u5982\u679c\u662f\u7236\u4eb2,\u76f4\u63a5\u65cb\u81ea\u5df1\u7136\u540e\u9000\u51fa \n            rotate(x);\n            return ;\n        }\n        if(flag(x)!=flag(up)){//\u4fd7\u79f0\u7684\u4e4b\u5b57\u5f62,\u65cb\u81ea\u5df1\u4e24\u6b21 \n            rotate(x),rotate(x);\n        }\n        else{//\u4e00\u5b57\u5f62,\u5148\u65cb\u7236\u8282\u70b9\u518d\u65cb\u81ea\u5df1 \n            rotate(up),rotate(x);\n        }\n        //\u65cb\u81ea\u5df1\u76f8\u5f53\u4e8e\u5f80\u4e0a\u8df3,\u5373\u53d8\u6210\u4e86\u7236\u4eb2,\u6240\u6709\u4fe1\u606f\u4e5f\u90fd\u4f1a\u968f\u4e4b\u6539\u53d8 \n    }\n    return ;\n}\n//\u8fd9\u91cc\u7684x\u662f\u4e00\u4e2a\u503c:\nvoid build(int x){//\u63d2\u5165\u4e00\u4e2a\u8282\u70b9(\u63d2\u5165\u4e0d\u7b49\u4e8e\u6dfb\u52a0,\u63d2\u5165\u6709\u53ef\u80fd\u662f\u63d2\u5728\u5df2\u6709\u8282\u70b9\u4e0a,\u5e76\u4e14\u8fd8\u8981\u5bfb\u627e,\u800c\u6dfb\u52a0\u662f\u5728\u5df2\u6709\u8282\u70b9\u4e0a\u6dfb\u52a0\u5de6/\u53f3\u513f\u5b50) \n    if(num==0){//\u5f53\u76ee\u524d\u8fd9\u4e2a\u6811\u8fd8\u6ca1\u6709\u503c,\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u503c\u662f\u7b2c\u4e00\u4e2a\u63d2\u5165\u7684,\u4f5c\u4e3a\u6839\u8282\u70b9\n        n=0;\n        add(x,0);\n        root=1;\n        num++;\n        return ;\n    }\n    num++;\n    now=root;\n    while(1){//\u4e0d\u505c\u5f80\u4e0b\u627e \n        a[now].sum++;//\u4e00\u5b9a\u5728\u8fd9\u4e2a\u5b50\u6811\u91cc,\u6240\u4ee5\u8fd9\u9897\u5b50\u6811\u91cc\u7684\u5143\u7d20\u4e00\u5b9a+1\n        if(a[now].v==x){\n            a[now].cnt++;\n            splay(now,root);\n            root=now;\n            return ;\n        }\n        int lr;\n        if(a[now].v>x) lr=0;\n        else lr=1;\n        //\u5e94\u8be5\u5728\u5de6/\u53f3\u5b50\u6811 \n        if(a[now].ch[lr]==0){\n            add(x,now);\n            a[now].ch[lr]=n;\n            splay(n,root);//\u5c06x\u65cb\u5230\u6839\u8282\u70b9,\u4fdd\u6301\u6811\u7684\u5c42\u6570\u8f83\u5c11\n            root=n;\n            //cout<<a[root].v<<\" \";\n            //\u5728x\u63d2\u5165\u4e4b\u524d\u6574\u68f5\u6811\u662f\u7a33\u5b9a\u7684,\u5728x\u63d2\u5165\u540e\u6811\u7684\u5f62\u6001\u6539\u53d8\u4e86,\u6240\u4ee5\u8981\u4ecex\u5f80\u4e0a\u65cb\u5230\u6839\u8282\u70b9\u6765\u4fdd\u6301\u6811\u5f62\u6001\u7684\u7a33\u5b9a \n            return ;//now\u6ca1\u6709\u5de6/\u53f3\u513f\u5b50,\u5c31\u5c06x\u4f5c\u4e3a\u4ed6\u7684\u5de6/\u53f3\u513f\u5b50\n        }\n        now=a[now].ch[lr];//\u8d70\u5230\u5de6/\u53f3\u513f\u5b50\u7ee7\u7eed\u64cd\u4f5c \n    }\n    return ;\n}\nint find(int x){//\u67e5\u627ex\u503c\u662f\u5426\u5728\u6811\u4e2d\u548c\u5b83\u5728\u6811\u4e2d\u7684\u7f16\u53f7 \n    int now=root;\n    while(1){\n        if(a[now].v==x){\n            splay(now,root);\n            root=now;\n            return now;//\u5c06now\u65cb\u5230\u6839\u8282\u70b9\u6765\u4fdd\u8bc1\u590d\u6742\u5ea6\u7684\u7a33\u5b9a\n        }\n        int lr;\n        if(a[now].v<x){//\u5982\u679cx\u6bd4\u8fd9\u4e2a\u8282\u70b9\u5927,\u90a3x\u4e00\u5b9a\u5728\u8fd9\u4e2a\u8282\u70b9\u7684\u53f3\u513f\u5b50 \n            lr=1;//\u5904\u4e8e\u53f3\u513f\u5b50\u8303\u56f4\u5185 \n        }\n        else{//\u5982\u679cx\u6bd4\u8fd9\u4e2a\u8282\u70b9\u5c0f,\u90a3\u4e48x\u4e00\u5b9a\u5728\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u513f\u5b50 \n            lr=0;//\u5904\u4e8e\u5de6\u513f\u5b50\u8303\u56f4\u5185 \n        }\n        if(a[now].ch[lr]==0){\n            return 0;\n        }\n        now=a[now].ch[lr];\n    }\n}\nvoid every(int x){//\u5f7b\u5e95\u5220\u9664\u4e00\u4e2a\u8282\u70b9 \n    if(x==n) n--; \n    a[x].sum=a[x].cnt=a[x].father=a[x].v=a[x].ch[0]=a[x].ch[1]=0;\n    return ;\n}\nvoid delEt(int x){//\u5220\u9664x\u8fd9\u4e2a\u5143\u7d20,\u6211\u4eec\u9700\u8981\u5148\u67e5\u627e\u5230\u4ed6,\u5e76\u4e14\u5c06\u5b83\u65cb\u5230\u6839\u8282\u70b9,\u4fdd\u8bc1\u6811\u7684\u7a33\u5b9a,\u4e5f\u5c31\u662f\u590d\u6742\u5ea6,\u7136\u540e\u518d\u5220\u9664 \n//\u6211\u4eec\u5220\u9664\u65f6\u5982\u679c\u5b83\u6ca1\u6709\u5de6\u513f\u5b50,\u90a3\u4e48\u76f4\u63a5\u5220\u9664,\u7136\u540e\u628a\u53f3\u513f\u5b50\u505a\u6839,\u5982\u679c\u5b83\u6709\u5de6\u513f\u5b50,\u90a3\u4e48\u627e\u5230\u5b83\u5de6\u513f\u5b50\u4e2d\u6700\u5927\u5143\u7d20,\u5c06\u5b83\u65cb\u5230\u5de6\u513f\u5b50\n//\u7136\u540e\u5c06\u8282\u70b9\u6467\u6bc1,\u5de6\u513f\u5b50\u53d8\u6210\u6839,\u53f3\u513f\u5b50\u53d8\u6210\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50 \n//\u4e3a\u4ec0\u4e48\u5462?\u5982\u679c\u9009\u7528\u5de6\u5b50\u6811\u4e2d\u7684\u6b21\u5927\u503c,\u90a3\u4e48\u5269\u4e0b\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u5c31\u5f88\u96be\u5904\u7406\u4e86,\u4e0d\u53ef\u80fd\u5c06\u5b83\u653e\u5728\u5de6\u5b50\u6811,\u56e0\u4e3a\u5b83\u6bd4\u6839\u5927,\u653e\u5728\u53f3\u5b50\u6811\u590d\u6742\u5ea6\u8fc7\u5927\n//\u6240\u4ee5\u6211\u4eec\u9009\u7528\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c,\u76f4\u63a5\u9009\u5c31\u884c,\u4e0d\u4f1a\u51fa\u73b0\u9700\u8981\u5c06\u522b\u7684\u8282\u70b9\u8f6c\u79fb\u5b50\u6811\u60c5\u51b5,\n//\u540c\u7406,\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u53f3\u513f\u5b50\u7684\u6700\u5c0f\u503c\u505a\u6839 \n//\u8fd8\u6709\u4e0d\u80fd\u76f4\u63a5\u65cb\u5230\u6839,\u5426\u5219\u6839\u5c31\u4f1a\u53d8\u6210\u53f3\u513f\u5b50 \n//\u9700\u8981\u6ce8\u610f\u7684\u662f,\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u7684cnt\u5220\u5b8c\u540e>0\u90a3\u4e48\u5c31\u4e0d\u80fd\u6467\u6bc1\u8282\u70b9. \n    int y=find(x);\n    if(y==0) return ;//\u5982\u679c\u6ca1\u6709y\u8fd9\u4e2a\u5143\u7d20,\u90a3\u5c31\u4e0d\u7528\u5220\u9664\n    num--;\n    if(a[y].cnt>1){\n        a[y].cnt--,a[y].sum--;\n        return ;//\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u4fdd\u7559y\u8282\u70b9,\u56e0\u4e3a\u4ed6\u8fd8\u6709cnt>0,\u6240\u4ee5\u4e0d\u80fd\u5220\u9664 \n    }\n    else{\n        if(a[y].ch[0]==0){\n            root=a[y].ch[1],a[a[y].ch[1]].father=0;\n        }\n        else{\n            int k=a[y].ch[0];\n            while(a[k].ch[1]!=0){//\u4e0d\u65ad\u5bfb\u627e\u53f3\u513f\u5b50,\u4e0d\u53ef\u80fd\u5f80\u5de6\u8d70,\u5426\u5219\u5c31\u6bd4\u76ee\u524d\u503c\u5c0f,\u6240\u4ee5\u6700\u7ec8\u7684k\u5c31\u662f\u5de6\u513f\u5b50\u5b50\u6811\u4e2d\u5143\u7d20\u6700\u5927\u7684\u8282\u70b9 \n                k=a[k].ch[1];\n            }\n            splay(k,a[y].ch[0]);\n            root=k;\n            father(a[y].ch[1],k,1),a[k].father=0;\n            update(k);//\u66f4\u65b0k\u503c\n            \n        }\n    }\n    every(y);//\u5f7b\u5e95\u5220\u9664y\u8282\u70b9 \n    return ;\n}\nint rank(int x){\n    int ans=0,now=root;//ans\u662f\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u4e2a\u6570 \n    while(1){\n        if(x==a[now].v){\n            ans+=1+a[a[now].ch[0]].sum;//\u8fd9\u91cc\u4e0d\u80fdsplay\u540e\u518dreturn ans,\u56e0\u4e3asplay\u540enow\u5df2\u7ecf\u88ab\u4e0a\u65cb\u4e86,\u5c31\u8ddf\u539f\u672c\u72b6\u6001\u4e0d\u4e00\u6837,\u6392\u540d\u4e5f\u5c31\u4e0d\u4e00\u6837\n            //\u5e94\u8be5\u8981\u5148\u7b97\u6392\u540d\u5728\u4e0a\u65cb.\u6bd4\u5982\u539f\u672c\u5de6\u513f\u5b50\u4e3a\u7a7a,\u4e0a\u65cb\u540e\u5de6\u513f\u5b50\u5c31\u6709\u503c\u4e86,\u6392\u540d\u4e5f\u5c31\u4e0d\u4e00\u6837. \n            break;\n        }\n        if(now==0){//\u8bf4\u660e\u76ee\u524d\u8fd9\u4e2a\u70b9\u662f\u7a7a\u7684\n            return ans+1;\n        }\n        if(x<a[now].v){//\u5728\u5de6\u513f\u5b50,\u5c31\u5f80\u5de6\u513f\u5b50\u9012\u5f52,\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u53d8 \n            now=a[now].ch[0];\n        }\n        else{//\u5f80\u53f3\u513f\u5b50\u9012\u5f52,\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\u52a0\u4e0a\u5de6\u513f\u5b50\u5b50\u6811\u548cnow\u7684cnt\n            ans+=a[a[now].ch[0]].sum+a[now].cnt;\n            now=a[now].ch[1];\n        }\n    }\n    splay(now,root);//\u5982\u679c\u76f8\u7b49,\u6392\u540d\u5c31\u7b49\u4e8e\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u4e2a\u6570+1+\u5de6\u5b50\u6811\u4e2a\u6570 \n    root=now;\n    return ans;\n}\n//\u5982\u679c\u5f53\u524d\u6392\u540d\u5927\u4e8e\u5de6\u5b50\u6811,\u5c0f\u4e8e\u53f3\u5b50\u6811,\u5f53\u524d\u70b9\u5c31\u662f\u7b54\u6848,\u5982\u679c\u5927\u4e8e\u5de6\u5b50\u6811+cnt,\u5c31\u5f80\u53f3\u5b50\u6811\u9012\u5f52\u5e76\u51cf\u53bb\u5de6\u5b50\u6811+cnt\u7684\u503c,\u5982\u679c\u5c0f\u4e8e\u53f3\u5b50\u6811+cnt,\u5c31\n//\u9012\u5f52\u5230\u5de6\u5b50\u6811 \nint atrank(int x){\n    if(x>num||x<1) return -1*999999999;\n    int now=root;\n    while(1){\n        if(a[a[now].ch[0]].sum<x&&a[a[now].ch[0]].sum+a[now].cnt>=x){//\u6b64\u65f6now\u8282\u70b9\u5c31\u662f\u6211\u4eec\u67e5\u8be2\u7684\u8282\u70b9 \n            break;\n        }\n        if(a[a[now].ch[0]].sum+a[now].cnt<x){\n            x=x-a[a[now].ch[0]].sum-a[now].cnt,now=a[now].ch[1];//\u8fd9\u91ccnow\u8981\u540e\u8d4b\u503c,\u4e0d\u7136\u4f1a\u51cf\u53bb\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\u4ee5\u53cacnt\u800c\u4e0d\u662f\u539f\u6765\u5b50\u6811\u7684\u503c \n        }\n        else{\n            now=a[now].ch[0];\n        }\n    }\n    splay(now,root),root=now;\n    return a[now].v;\n}\n//\u524d\u9a71\u662f\u5c0f\u4e8e\u8fd9\u4e2a\u6570\u7684\u6700\u5927\u503c \nint front(int x){//\u6c42x\u7684\u524d\u9a71,\u521d\u59cb\u5316\u6700\u503c,\u5f80\u4e0b\u627e,\u4e0d\u65ad\u66f4\u65b0 \n    int now=root;\n    int maxx=-999999999; \n    while(now){//\u5982\u679c\u73b0\u5728\u8fd9\u4e2a\u8282\u70b9\u4e0d\u4e3a\u7a7a \n        if(a[now].v<x&&a[now].v>maxx) maxx=a[now].v;//\u5148\u5224\u65ad\u8fd9\u4e2a\u8282\u70b9\u503c\u662f\u5426\u66f4\u4f18 \n        if(a[now].v<x){//\u5982\u679c\u8282\u70b9\u6bd4x\u5c0f,\u90a3\u4ed6\u7684\u5de6\u5b50\u6811\u4e00\u5b9a\u4e0d\u53ef\u80fd\u6bd4\u8fd9\u4e2a\u8282\u70b9\u66f4\u4f18\n        //\u6240\u4ee5\u4ed6\u7684\u5de6\u5b50\u6811\u4e0d\u53ef\u80fd\u4e3a\u7b54\u6848,\u90a3\u5c31\u5f80\u53f3\u5b50\u6811\u9012\u5f52(\u6ce8\u610f,\u6b64\u65f6\u8282\u70b9\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86) \n        //\u4e0d\u80fd\u5c0f\u4e8e\u7b49\u4e8e,\u5426\u5219\u5de6\u5b50\u6811\u8fd8\u6709\u53ef\u80fd\u4e3a\u7b54\u6848 \n            now=a[now].ch[1];\n        }\n        else{//\u5982\u679c\u8282\u70b9>=x,\u90a3\u4e48\u4ed6\u7684\u53f3\u5b50\u6811\u4e00\u5b9a\u4e0d\u53ef\u80fd\u4e3a\u7b54\u6848,\u90a3\u5c31\u5f80\u5de6\u5b50\u6811\u9012\u5f52 \n            now=a[now].ch[0];\n        }\n    }\n    return maxx;\n}\nint behind(int x){//\u6c42x\u7684\u540e\u9a71,\u521d\u59cb\u5316\u6700\u503c,\u5f80\u4e0b\u627e,\u4e0d\u65ad\u66f4\u65b0 \n    int now=root;\n    int minn=999999999;\n    while(now){\n        if(a[now].v>x&&a[now].v<minn) minn=a[now].v;//\u5224\u65ad\u662f\u5426\u66f4\u4f18 \n        if(a[now].v>x){//\u540c\u7406,\u53f3\u5b50\u6811\u4e5f\u4e00\u5b9a\u6ca1\u6709now\u8282\u70b9\u4f18 \n            now=a[now].ch[0];\n        }\n        else{//\u8282\u70b9<=,\u6240\u4ee5\u5de6\u5b50\u6811<,\u4e0d\u53ef\u80fd \n            now=a[now].ch[1];\n        }\n    }\n    return minn;\n}\nint main(){\n    cin>>q;\n    for(int i=1;i<=q;i++){\n        int opt,x;\n        cin>>opt>>x;\n        if(opt==1){//\u63d2\u5165 \n            build(x);\n        }\n        if(opt==2){//\u5220\u9664 \n            delEt(x);\n        }\n        if(opt==3){//\u67e5\u8be2x\u7684\u6392\u540d \n            cout<<rank(x)<<\"\\n\";\n        }\n        if(opt==4){//\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570 \n            cout<<atrank(x)<<\"\\n\";\n        }\n        if(opt==5){//\u6c42x\u7684\u524d\u9a71 \n            cout<<front(x)<<\"\\n\";\n        }\n        if(opt==6){//\u6c42x\u7684\u540e\u7ee7 \n            cout<<behind(x)<<\"\\n\";\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1532355503,
        "uid": 27939,
        "name": "The_clear_pool",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "~~\u53c8\u662f\u4e00\u4e2a\u753b\u98ce\u8be1\u5f02\u7684\u975e\u6b63\u89e3\u3002~~\n\n## **\u6ce8\u610f\u6211\u5199\u7684\u4e0d\u662f \u5e73\u8861\u6811 \uff0c\u662f \u7ebf\u6bb5\u6811 \uff0c\u8981\u770b\u5e73\u8861\u6811\u7684\u51fa\u95e8\u53f3\u62d0**\n\n~~em.....\u6211\u624d\u60f3\u8d77\u6765\u8981\u8bb2\u4e00\u4e0b\u518d\u653e\u4ee3\u7801~~\n\n### \u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e00\u4e2a\u5b50\u8282\u70b9\u65e5\u5e38\u6389\u7ebf\u7684\u52a8\u6001\u7ebf\u6bb5\u6811\uff0c\u8981\u7528\u7684\u65f6\u5019\u5c31\u4f38\u5c55\u51fa\u4e00\u6761\u94fe\u5230\u8fbe\u53f6\u5b50\uff0c\u5426\u5219\u5c31\u7f29\u56de\u6765\uff0c\u8fd9\u6837\u7684\u8bdd\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3a**O(n lg n)**\uff0c\u6709\u70b9\u4f2a\u4f46\u662f\u4e0d\u4f1a\u70b8\u3002\n\n### \u6dfb\u52a0\u6570\u5b57\u5c31\u662f\u7ebf\u6bb5\u6811\u90a3\u4e00\u4f4d+1\uff0c\u5220\u9664\u5c31-1\n\n### \u6392\u540d\u5c31\u662f\u5b83\u524d\u9762\u7684\u6c42\u4e00\u4e2a\u533a\u95f4\u548c\u7136\u540e+1\n\n### \u6c42\u7b2cx\u4e2a\u5c31\u662f\u548c\u5e73\u8861\u6811\u4e00\u6837\u7684\uff0c\u5982\u679c\u5411\u53f3\u8d70\u5c31\u51cf\u53bb\u5de6\u4fa7\u4e2a\u6570\uff0c\u5411\u5de6\u8d70\u4e0d\u53d8\uff0c\u76f4\u5230\u53f6\u5b50\n\n### \u524d\u9a71\u540e\u7ee7\u540c\u524d\u4e24\u4e2a\n\n# \u90a3\u4e48\u653e\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\ntypedef long long LL;\nconst LL oo=1ll<<60;\n#define dd c=getchar()\nusing std::min;\nusing std::max;\ninline LL read(){\n    LL a=0,b=1;\n    char dd;\n    while(!isdigit(c)&&c!='-')dd;\n    if(c=='-'){\n        b=-b;\n        dd;\n    }\n    while(isdigit(c)){\n        a=a*10+c-'0';\n        dd;\n    }\n    return a*b;\n}\n#undef dd\nclass vtree{\n    vtree*ls;\n    vtree*rs;\n    LL v,l,r,mid,mx,mn;\n    void crt(){\n        if(l!=r&&ls==NULL&&rs==NULL){\n            ls=new vtree(l,mid);\n            rs=new vtree(mid+1,r);\n        }\n    }\n    void pushup(){\n        if(ls==NULL&&rs==NULL)return;\n        v=ls->v+rs->v;\n        if(v>0){\n            if(rs->v>0)mx=rs->mx;\n            else mx=ls->mx;\n            if(ls->v>0)mn=ls->mn;\n            else mn=rs->mn;\n        }else{\n            mx=-oo;\n            mn=oo;\n        }\n    }\n    void clr(){\n        if(ls!=NULL){\n            delete ls;\n            ls=NULL;\n        }\n        if(rs!=NULL){\n            delete rs;\n            rs=NULL;\n        }\n        v=0;\n        mx=-oo;\n        mn=oo;\n    }\n    LL gmx(LL x,LL y){\n        if(v==0)return -oo;\n        if(l==x&&r==y){\n            return mx;\n        }\n        LL ans=-oo;\n        if(x<=mid){\n            ans=max(ans,ls->gmx(x,min(y,mid)));\n        }\n        if(y>mid){\n            ans=max(ans,rs->gmx(max(x,mid+1),y));\n        }\n        return ans;\n    }\n    LL gmn(LL x,LL y){\n        if(v==0)return oo;\n        if(l==x&&r==y){\n            return mn;\n        }\n        LL ans=oo;\n        if(x<=mid){\n            ans=min(ans,ls->gmn(x,min(y,mid)));\n        }\n        if(y>mid){\n            ans=min(ans,rs->gmn(max(x,mid+1),y));\n        }\n        return ans;\n    }\npublic:\n    vtree(LL ll,LL rr){\n        ls=rs=NULL;\n        v=0;\n        l=ll;\n        r=rr;\n        mid=(l+r)>>1;\n        mx=-oo;\n        mn=oo;\n    }\n    vtree(){\n        ls=rs=NULL;\n        v=0;\n        l=-oo;\n        r=oo;\n        mid=(l+r)>>1;\n        mx=-oo;\n        mn=oo;\n    }\n    ~vtree(){\n        clr();\n    }\n    void add(LL val,LL c=1){\n        if(l==r){\n            v+=c;\n            if(v==0){\n                clr();\n            }else{\n                mx=mn=l;\n            }\n        }else{\n            crt();\n            if(val<=mid)ls->add(val,c);\n            else rs->add(val,c);\n            pushup();\n            if(v==0){\n                clr();\n            }\n        }\n    }\n    LL count(LL x,LL y){\n    \tif(x<l)x=l;\n    \tif(y>r)y=r;\n    \tif(x>y)return 0;\n        if(v==0)return 0;\n        if(l==x&&r==y){\n            return v;\n        }\n        LL ans=0;\n        if(x<=mid){\n            ans+=ls->count(x,min(y,mid));\n        }\n        if(y>mid){\n            ans+=rs->count(max(x,mid+1),y);\n        }\n        return ans;\n    }\n    LL count(LL x){\n        return count(x,x);\n    }\n    LL lst(LL x){\n        return gmx(l,x-1);\n    }\n    LL nxt(LL x){\n        return gmn(x+1,r);\n    }\n    LL rnk(LL x){\n        return count(l,x-1)+1;\n    }\n    LL kth(LL x){\n        if(x>v)return oo;\n        if(x<=0)return -oo;\n        if(l==r)return l;\n        if(x<=ls->v)return ls->kth(x);\n        else return rs->kth(x-ls->v);\n    }\n}p;\nLL n,x,y,z;\nint main(){\n    n=read();\n    for(LL i=1;i<=n;i++){\n        x=read();\n        y=read();\n        if(x==1){\n            p.add(y);\n        }else if(x==2){\n            p.add(y,-1);\n        }else if(x==3){\n            printf(\"%lld\\n\",p.rnk(y));\n        }else if(x==4){\n            printf(\"%lld\\n\",p.kth(y));\n        }else if(x==5){\n            printf(\"%lld\\n\",p.lst(y));\n        }else if(x==6){\n            printf(\"%lld\\n\",p.nxt(y));\n        }\n    }\n    return 0;\n}\n\n```\n\n### ~~\u5934\u4e00\u6b21\u53d1\u73b0\u6211\u7684\u4ee3\u7801\u597d\u50cf\u8fd8\u662f\u53ef\u4ee5\u770b\u7684~~\u2026\u2026\u2026\u2026\n\n### \u7136\u800c\uff0c\u8fd9\u4e2a\u5199\u6cd5\u7eaf\u7cb9\u5c31\u662f\u5b9e\u9a8c\u7528\u54c1\uff0c\n\n## \u5199SBT\u7684\u65f6\u5019`136ms/2.87MB 2.07KB`\uff0c\n\n## \u5199\u8fd9\u4e2a\u7684\u65f6\u5019`748ms/30.34MB 3.72KB`\uff0c\n\n### ~~\u57fa\u672c\u4e0a\u5c31\u662f\u5403\u9971\u4e86\u6491\u7684\u4eba\u624d\u4f1a\u53bb\u5199\u7684~~\n\n## \u552f\u4e00\u7684\u597d\u5904\u5c31\u662f\u8fd9\u4e2a\u6a21\u677f\u53bb\u505a\u7ebf\u6bb5\u6811\u4e5f\u662f\u975e\u5e38\u8d44\u74f7\u7684\u3002",
        "postTime": 1520676097,
        "uid": 13925,
        "name": "yyhhenry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u5e73\u8861\u6811\u53ef\u4ee5\u7528splay\u6765\u7ef4\u62a4\uff0c\u6bcf\u4e00\u6b21\u5c06\u8981\u64cd\u4f5c\u7684\u70b9\u90fdrotate\u5230\u8fd9\u9897\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6839\u8282\u70b9\uff0c\u4fdd\u8bc1\u5355\u6b21\u67e5\u8be2log(n)\u7684\u590d\u6742\u5ea6\u3002\n\n\n\u9996\u5148\u58f0\u660e\uff1aval[x]\u8bb0\u5f55\u8282\u70b9\u70b9\u6743\uff0ccnt[x]\u8bb0\u5f55\u8be5\u8282\u70b9\u6743\u503c\u51fa\u73b0\u4e86\u591a\u5c11\u6b21(\u53ef\u4ee5\u5c06\u8bb8\u591a\u70b9\u6743\u76f8\u540c\u7684\u8282\u70b9\u6c47\u96c6\u5230\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u5e76\u7528cnt\u8bb0\u5f55\u8be5\u70b9\u4e0a\u5b9e\u9645\u6709\u591a\u5c11\u4e2a\u70b9)\uff0cf[x]\u8bb0\u5f55x\u7684\u7236\u4eb2\u8282\u70b9\uff0csiz[x]\u8bb0\u5f55\u4ee5x\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5143\u7d20\u4e2a\u6570(\u6bcf\u4e2a\u8282\u70b9\u7684cnt\u4e5f\u8981\u7b97\u8fdb\u6765)\u3002\n\n\nch[x][0]\u4ee3\u8868x\u7684\u5de6\u5b50\u8282\u70b9\uff0cch[x][1]\u4ee3\u8868x\u7684\u53f3\u5b50\u8282\u70b9\u3002\n\nsize\u8bb0\u5f55\u6574\u68f5\u6811\u7684\u5927\u5c0f\uff0crt\u8bb0\u5f55\u6839\n\n\n---\n\u8282\u70b9\u6e05\u7a7a\u548c\u66f4\u65b0\uff0clson\u548crson\u4e3a\u5b8f\u5b9a\u4e49\n\n```cpp\ninline void Clear(int x){\n    lson(x)=rson(x)=0;\n    cnt[x]=val[x]=siz[x]=f[x]=0;\n}\n\ninline void update(int x){\n    if(x){\n        siz[x]=cnt[x];\n        if(lson(x)) siz[x]+=siz[lson(x)];\n        if(rson(x)) siz[x]+=siz[rson(x)];\n    }\n}\n```\n---\n\n\u6700\u6838\u5fc3\u7684\u90e8\u5206\u2014\u2014rorate\u64cd\u4f5c,\u4e00\u5b9a\u8981\u6309\u7167\u987a\u5e8f\u5efa\u7acb\u7236\u5b50\u5173\u7cfb\u624d\u53ef\u4ee5\u4fdd\u8bc1\u8282\u70b9\u8fde\u63a5\u7684\u6b63\u786e\u6027\u5e76\u4e14\u9632\u6b62\u64cd\u4f5c\u8131\u8282\u3002\n\n```cpp\ninline void rotate(int x){\n    int fa=f[x],ffa=f[fa],c=get(x);    //c\u8bb0\u5f55x\u662ff[x]\u7684\u5de6\u8282\u70b9\u8fd8\u662f\u53f3\u8282\u70b9\n    //step 1\n    ch[fa][c]=ch[x][c^1],f[ch[x][c^1]]=fa;    // step 1 \n    \n    //step 2\n    f[fa]=x,ch[x][c^1]=fa;\n    \n    //step3\n    f[x]=ffa;    //\u5148\u786e\u5b9ax\u7684\u7236\u4eb2\uff0c\u518d\u6839\u636e\u539f\u8282\u70b9\u786e\u5b9a\u4e3affa\u7684\u5de6\u8282\u70b9\u8fd8\u662f\u53f3\u8282\u70b9\n    if(ffa) ch[ffa][(fa==rson(ffa))]=x;\n    update(fa),update(x);    //\u4e0d\u8981\u5fd8\u8bb0\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u548c\u5b83\u7684\u7236\u4eb2\n}\n```\n---\n\u57fa\u4e8erotate\u7684splay\u64cd\u4f5c\uff0c\u65e8\u5728\u5c06\u5f53\u524d\u8282\u70b9\u65cb\u8f6c\u5230\u6839\u7684\u4f4d\u7f6e\u4e14\u4e0d\u6539\u53d8\u4e8c\u53c9\u6811\u7684\u6027\u8d28(\u5de6\u8282\u70b9\u6743\u503c < \u7236\u4eb2\u8282\u70b9\u6743\u503c < \u53f3\u8282\u70b9\u6743\u503c),\u4f7f\u6811\u5728\u4efb\u610f\u60c5\u51b5\u4e0b\u90fd\u8d8b\u4e8e\u5e73\u8861\uff0c\u8fbe\u5230\u6700\u9ad8\u6548\u7684\u65f6\u95f4\u590d\u6742\u5ea6\n\n```cpp\ninline void splay(int x){\n    for(int fa;fa=f[x];rotate(x))\n        if(f[fa]) rotate(get(x)==get(fa)?fa:x);    //\u6ce8\u610f\u5230\u5e95\u662f\u65cb\u8f6c\u5f53\u524d\u7ed3\u70b9\u8fd8\u662f\u7236\u4eb2\u8282\u70b9\n    rt=x;    //\u6839\u8282\u70b9\u8981\u8bb0\u5f55\n}\n```\n---\n\u63d2\u5165\u64cd\u4f5c\uff0c\u8bb0\u5f97\u6ce8\u610f\u5f53\u6839\u8282\u70b9\u4e3a0\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u6ce8\u610f\u4e0b\u9762\u51e0\u4e2a\u60c5\u51b5\uff1a\n\n1\u3001\u82e5\u63d2\u5165\u8282\u70b9\u7684\u6743\u503c\u5728\u539f\u6811\u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u5c06\u8be5\u6811\u4e2d\u7684\u70b9\u7684\u6b21\u6570\u52a01.\n\n2\u3001\u82e5\u5df2\u7ecf\u67e5\u627e\u5230\u6811\u7684\u6700\u5e95\u90e8\uff0c\u5219\u76f4\u63a5\u8fde\u4e00\u4e2a\u70b9\u5373\u53ef.\n\n\u00d7\u00d7\u90fd\u8981\u8bb0\u5f97\u4e00\u4e9b\u66f4\u65b0\u8282\u70b9\u4ee5\u53casplay\u7684\u7ec6\u8282\u00d7\u00d7\n\n```cpp\ninline void insert(int v){\n    if(!rt){\n        size++;\n        lson(size)=rson(size)=f[size]=0;\n        cnt[size]=siz[size]=1;\n        val[size]=v,rt=size;\n        return;\n    }\n    int now=rt,fa=0;\n    while(true){\n        if(val[now]==v){\n            cnt[now]++;\n            update(now),update(fa);\n            splay(now);\n            break;\n        }\n        fa=now;\n        if(v>val[now]) now=rson(now);\n        else now=lson(now);\n        if(!now){\n            size++;\n            lson(size)=rson(size)=0;\n            val[size]=v;\n            siz[size]=cnt[size]=1;\n            f[size]=fa;\n            if(v>val[fa]) rson(fa)=size;\n            else lson(fa)=size;\n            update(fa),splay(size);\n            break;\n        }    \n    }\n}\n```\n---\n\u67e5\u627e\u6743\u503c\u4e3aV\u7684\u7ed3\u70b9\u7684\u6392\u540d\uff0c\u6ce8\u610f\u4e0b\u9762\u4e24\u4e2a\u60c5\u51b5\uff1a\n\n1\u3001\u82e5v\u6bd4\u5f53\u524d\u70b9\u6743\u5c0f\uff0c\u5219\u5411\u5de6\u5b50\u8282\u70b9\u8d70\uff0cans\u4e0d\u6539\u53d8(\u53ef\u4ee5\u62bd\u8c61\u7684\u8ba4\u4e3a\u5de6\u5b50\u6811\u7684\u6392\u540d\u90fd\u6bd4\u5f53\u524d\u7684\u9760\u524d)\u3002\n\n2\u3001\u82e5v\u6bd4\u5f53\u524d\u70b9\u6743\u5927\uff0c\u5219\u5411\u53f3\u5b50\u8282\u70b9\u8d70\uff0cans\u8981\u52a0\u4e0a\u8be5\u8282\u70b9\u4e0a\u7684\u4e2a\u6570\u548c\u5de6\u5b50\u6811\u7684\u5143\u7d20\u4e2a\u6570\u3002\n\n```cpp\ninline int find(int v){\n    int ans=0,now=rt;\n    while(true){\n        if(v>=val[now]){\n            if(lson(now)) ans+=siz[lson(now)];\n            if(v==val[now]) {splay(now);return ans+1;}\n            ans+=cnt[now];\n            now=rson(now);\n        }else now=lson(now);\n    }\n}\n```\n---\n\u67e5\u627e\u6392\u540d\u7b2cx\u7684\u8282\u70b9\u7684\u6743\u503c\n\n```cpp\ninline int findx(int x){\n    int now=rt;\n    while(true){\n        if(lson(now) && x<=siz[lson(now)])\n            now=lson(now);\n        else{\n            int temp=cnt[now];\n            if(lson(now)) temp+=siz[lson(now)];\n            if(x<=temp) return val[now];\n            x-=temp,now=rson(now);\n        }\n    }\n}\n```\n---\n\u6c42\u5f53\u524d\u8282\u70b9\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\n\n\u524d\u9a71\u7b49\u4ef7\u4e8e\u5de6\u5b50\u6811\u6700\u53f3\u8fb9\u7684\u8282\u70b9\n\n\u540e\u7ee7\u7b49\u4ef7\u4e8e\u53f3\u5b57\u6811\u6700\u5de6\u8fb9\u7684\u8282\u70b9\n\n\u5f88\u5bb9\u6613\u60f3\u901a\u3002\n\n```cpp\ninline int pre(){\n    int now=ch[rt][0];\n    while(rson(now)) now=rson(now);\n    return now;\n}\n\ninline int nex(){\n    int now=ch[rt][1];    \n    while(lson(now)) now=lson(now);\n    return now;\n}\n```\n---\n\u5220\u9664\u8282\u70b9\uff0c\u5b9e\u8d28\u662f\u5c06\u8be5\u8282\u70b9\u5de6\u5b50\u6811\u6700\u53f3\u8fb9\u7684\u70b9(\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u8be5\u70b9\u70b9\u6743\u7684\u70b9\uff0c\u524d\u9a71)\u65cb\u8f6c\u5230\u6839\uff0c\u518d\u5c06\u8be5\u8282\u70b9\u539f\u5148\u7684\u53f3\u5b50\u8282\u70b9\u8fde\u63a5\u5230\u65b0\u6839\u7684\u53f3\u5b50\u6811\u4e0a\u3002\u6ce8\u610f\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5\uff1a\n\n1\u3001\u82e5\u6211\u4eec\u60f3\u5220\u7684\u70b9\u6743\u5bf9\u5e94\u7684\u70b9\u4e0d\u6b62\u4e00\u4e2a\uff0c\u76f4\u63a5\u5c06\u8be5\u70b9\u7684cnt--\u5c31\u884c\u4e86.\n\n2\u3001\u82e5\u6211\u4eec\u60f3\u5220\u9664\u7684\u662f\u6700\u540e\u4e00\u4e2a\u70b9\uff0c\u5219\u76f4\u63a5Clear\u4e00\u6ce2.\n\n3\u3001\u82e5\u5c06x\u65cb\u8f6c\u5230\u6839\u540e\uff0c\u5b83\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u5c06\u4ed6\u7684\u552f\u4e00\u7684\u5b50\u8282\u70b9\u5f53\u505a\u6574\u68f5\u6811\u7684\u6839\uff0c\u518d\u5c06\u539f\u6839Clear\u5c31\u884c\u4e86.\n\n\u8981\u6ce8\u610fClear\u7684\u4e00\u4e9b\u5c0f\u7ec6\u8282\n\n```cpp\ninline void del(int x){\n    int useless=find(x);     //\u505a\u4e00\u6b21\u67e5\u627e\u5c06x\u65cb\u8f6c\u5230\u6839\n    if(cnt[rt]>1) {cnt[rt]--; return;}\n    if(!lson(rt) && !rson(rt)) {Clear(rt),rt=0;return;}\n    if(!lson(rt) && rson(rt)){\n        int temp=rt;\n        rt=rson(rt),f[rt]=0;\n        Clear(temp);\n        return;\n    }\n    if(lson(rt) && !rson(rt)){\n        int temp=rt;\n        rt=lson(rt),f[rt]=0;\n        Clear(temp);\n        return;\n    }\n    int Pre=pre(),temp=rt;\n    splay(Pre);\n    f[rson(temp)]=rt;\n    rson(rt)=rson(temp);\n    Clear(temp),update(rt);\n    return;\n}    \n```\n---\n\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801,over\n\n```cpp\n#include<bits/stdc++.h>\n#define lson(x) (ch[x][0])\n#define rson(x) (ch[x][1])\n#define get(x) (rson(f[x])==x)\n#define For(i,j,k) for(register int i=(j);i<=(k);++i)\n#define Forr(i,j,k) for(register int i=(j);i>=(k);--i)\nusing namespace std;\n\ntemplate<typename T>\ninline void read(T &x){\n    T p=1,c=getchar();\n    x=0;\n    while(!isdigit(c)){\n        if(c=='-') p=-1;\n        c=getchar();\n    }\n    while(isdigit(c)){\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    x*=p;\n} \n\ninline void file(){\n#ifndef ONLINE_JUDGE\n    freopen(\"test.in\",\"r\",stdin);\n    freopen(\"test.out\",\"w\",stdout);\n#endif\n}\n\nconst int N=1e6+10;\nint ch[N][2],f[N],siz[N],cnt[N],val[N];\nint size,rt,op,x,n;\n\ninline void Clear(int x){\n    lson(x)=rson(x)=0;\n    cnt[x]=val[x]=siz[x]=f[x]=0;\n}\n\ninline void update(int x){\n    if(x){\n        siz[x]=cnt[x];\n        if(lson(x)) siz[x]+=siz[lson(x)];\n        if(rson(x)) siz[x]+=siz[rson(x)];\n    }\n}\n\ninline void rotate(int x){\n    int fa=f[x],ffa=f[fa],c=get(x);\n    ch[fa][c]=ch[x][c^1],f[ch[x][c^1]]=fa;    \n    f[fa]=x,ch[x][c^1]=fa;\n    f[x]=ffa;\n    if(ffa) ch[ffa][(fa==rson(ffa))]=x;\n    update(fa),update(x);\n}\n\ninline void splay(int x){\n    for(int fa;fa=f[x];rotate(x))\n        if(f[fa]) rotate(get(x)==get(fa)?fa:x);\n    rt=x;\n}\n\ninline void insert(int v){\n    if(!rt){\n        size++;\n        lson(size)=rson(size)=f[size]=0;\n        cnt[size]=siz[size]=1;\n        val[size]=v,rt=size;\n        return;\n    }\n    int now=rt,fa=0;\n    while(true){\n        if(val[now]==v){\n            cnt[now]++;\n            update(now),update(fa);\n            splay(now);\n            break;\n        }\n        fa=now;\n        if(v>val[now]) now=rson(now);\n        else now=lson(now);\n        if(!now){\n            size++;\n            lson(size)=rson(size)=0;\n            val[size]=v;\n            siz[size]=cnt[size]=1;\n            f[size]=fa;\n            if(v>val[fa]) rson(fa)=size;\n            else lson(fa)=size;\n            update(fa),splay(size);\n            break;\n        }    \n    }\n}\n\ninline int find(int v){\n    int ans=0,now=rt;\n    while(true){\n        if(v>=val[now]){\n            if(lson(now)) ans+=siz[lson(now)];\n            if(v==val[now]) {splay(now);return ans+1;}\n            ans+=cnt[now];\n            now=rson(now);\n        }else now=lson(now);\n    }\n}\n\ninline int findx(int x){\n    int now=rt;\n    while(true){\n        if(lson(now) && x<=siz[lson(now)])\n            now=lson(now);\n        else{\n            int temp=cnt[now];\n            if(lson(now)) temp+=siz[lson(now)];\n            if(x<=temp) return val[now];\n            x-=temp,now=rson(now);\n        }\n    }\n}\n\ninline int pre(){\n    int now=ch[rt][0];\n    while(rson(now)) now=rson(now);\n    return now;\n}\n\ninline int nex(){\n    int now=ch[rt][1];    \n    while(lson(now)) now=lson(now);\n    return now;\n}\n\ninline void del(int x){\n    int motherfucker=find(x);\n    if(cnt[rt]>1) {cnt[rt]--; return;}\n    if(!lson(rt) && !rson(rt)) {Clear(rt),rt=0;return;}\n    if(!lson(rt) && rson(rt)){\n        int temp=rt;\n        rt=rson(rt),f[rt]=0;\n        Clear(temp);\n        return;\n    }\n    if(lson(rt) && !rson(rt)){\n        int temp=rt;\n        rt=lson(rt),f[rt]=0;\n        Clear(temp);\n        return;\n    }\n    int Pre=pre(),temp=rt;\n    splay(Pre);\n    f[rson(temp)]=rt;\n    rson(rt)=rson(temp);\n    Clear(temp),update(rt);\n    return;\n}    \n\nint main(){\n    file();\n    read(n);\n    while(n--){\n        read(op),read(x);\n        if(op==1) {insert(x);continue;}\n        if(op==2) {del(x);continue;}\n        if(op==3) {printf(\"%d\\n\",find(x));continue;}\n        if(op==4) {printf(\"%d\\n\",findx(x));continue;}\n        if(op==5) {insert(x),printf(\"%d\\n\",val[pre()]),del(x);continue;}\n        if(op==6) {insert(x),printf(\"%d\\n\",val[nex()]),del(x);continue;}\n    }\n    return 0;\n}\n\n```",
        "postTime": 1515329428,
        "uid": 23088,
        "name": "LSTete",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct dian{\n    int l,r;//\u5de6\u53f3\u513f\u5b50 \n    int size;//\u7edf\u8ba1\u5305\u542b\u81ea\u8eab\u7684\u8282\u70b9\u4e2a\u6570 \n    int recy;//\u7edf\u8ba1\u81ea\u5df1\u51fa\u73b0\u7684\u6b21\u6570\n    int rd;//\u968f\u673a\u51fa\u6765\u7684\u4f18\u5148\u7ea7\n    int val;//\u81ea\u8eab\u7684\u503c \n}tree[1000000];\nint root,size,m,ans;\nvoid update(int k)//\u66f4\u65b0\u8282\u70b9\u7684\u4e2a\u6570 \n{\n    tree[k].size=tree[ tree[k].l ].size+tree[ tree[k].r ].size+tree[k].recy; \n    return;//\u8bb0\u4f4f\u52a0\u4e0a\u81ea\u8eab\u7684\u91cd\u590d \n}\nvoid left_turn(int &k)//\u662f\u5c06\u5176\u7684\u53f3\u513f\u5b50\u5de6\u8f6c\uff0c\u800c\u4e0d\u662fk\u5de6\u8f6c \n{\n    int rson=tree[k].r;\n    tree[k].r=tree[rson].l;//\u5c06\u81ea\u5df1\u7684\u53f3\u513f\u5b50\u53d8\u4e3a\u5176\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50 \n    tree[rson].l=k;//\u628a\u81ea\u5df1\u53d8\u4e3a\u5176\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50 \n    tree[rson].size=tree[k].size;//\u7136\u540e\u5728\u7edf\u8ba1\u5b50\u6811\u5927\u5c0f \n    update(k);//\u5e76\u4e14\u66f4\u65b0\u5176\u8282\u70b9,\uff01\uff01\uff01\uff01\uff01\u6ce8\uff1a\u56e0\u4e3ak\u5df2\u7ecf\u4e0d\u662f\u90a3\u4e2a\u603b\u7ed3\u70b9\u53d8\u6210\u4e86\u5b50\u8282\u70b9\u6240\u4ee5\u8981\u91cd\u65b0\u66f4\u65b0 \n    k=rson;//\u8fd9\u4e2a\u662f\u5c06k\u7684\u7236\u4eb2\u628ak\u8fd9\u4e2a\u513f\u5b50\u6539\u6210\u4e86rson\u3002\u3002\u3002\u81ea\u5df1\u624b\u63a8\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86 \n}\n```\n/\\*\n\u89e3\u91ca\u4e00\u4e0b\u8fd9\u4e2ak\u5230\u5e95\u662f\u4ec0\u4e48\n\n\u5176\u5b9e\u8fd9\u4e2ak\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5730\u5740\uff0c\u5b83\u6240\u50a8\u5b58\u4e86\u4e00\u5806\u4fe1\u606f\uff0c\u7136\u540e\u6211\u4eec\u4fee\u6539\u4e86\u8fd9\u4e2a\u6307\u9488\u6240\u5bf9\u5e94\u7684\u503c\n\n\u4f46\u6ca1\u6709\u6539\u53d8\u8fd9\u4e2a\u6307\u9488\u91cc\u9762\u7684\u503c\uff0c\u53ea\u662f\u4fee\u6539\u4e86\u6307\u9488\u8ba9\u5b83\u6307\u5411\u4e86\u53e6\u5916\u4e00\u4e2a\u70b9\u3002\u6307\u5411\u4e86\u53e6\u4e2a\u4f4d\u7f6e\u6240\u5bf9\u5e94\u7684\u503c\n\n\\*/\n```cpp\n//\u8fd9\u4e2a\u753b\u56fe\u81ea\u5df1\u7406\u89e3 \nvoid right_turn(int &k)\n{\n    int lson=tree[k].l;\n    tree[k].l=tree[lson].r;\n    tree[lson].r=k;\n    tree[lson].size=tree[k].size;\n    update(k);\n    k=lson;            \n```\n}//\u540c\u7406\n```cpp\nvoid insert(int &k,int x)\n{\n    if(k==0)//\u5df2\u7ecf\u9012\u5f52\u5230\u4e86\u53f6\u5b50\u7ed3\u70b9\n    {\n       size++;//\u603b\u7684\u8282\u70b9\u6570\u52a0\u52a0 \n       k=size;//\u8fd9\u4e2ak\u81ea\u884c\u4f53\u4f1a \n       tree[k].size=1;\n       tree[k].recy=1;\n       tree[k].val=x;\n       tree[k].rd=rand();//\u968f\u673a\u4e00\u4e2a\u5806\uff1a\u6211\u4eec\u505a\u7684\u662f\u5c0f\u6839\u5806 \n       return;\n    }\n    tree[k].size++;//\u5982\u679c\u6ca1\u5230\u53f6\u8282\u70b9\uff0c\u8bf4\u660e\u6b64\u8282\u70b9\u53ef\u5305\u542b\u6240\u63d2\u5165\u5f97\u6570\uff0c\u6240\u4ee5++ \n    if(tree[k].val==x)\n    {\n        tree[k].recy++;\n        return;\n```\n}//\u5982\u679c\u76f8\u7b49\u76f4\u63a5\u52a0\u4e0a\u91cd\u590d\n\n \n \n  \n\n```cpp\n    if(tree[k].val<x)//\u5982\u679c\u5c0f\u4e8e\u653e\u5230\u53f3\u5b50\u6811\u4e0a \n    {\n        insert(tree[k].r,x);//\u63d2\u5165\u53f3\u5b50\u6811\u987a\u4fbf\u968f\u673a\u4e00\u4e2a\u4f18\u5148\u7ea7 \n        if(tree[tree[k].r].rd<tree[k].rd)//\u8fdd\u53cd\u4e86\u5806\u7684\u6027\u8d28\n        left_turn(k); //\u5c06k\u7684rson\u8f6c\u5230k\u4e0a\u53bb\uff0c\u628ak\u8f6c\u4e0b\u53bb \n    }\n    if(tree[k].val>x)//\u653e\u5230\u5de6\u5b50\u6811\u540c\u7406\u53f3\u5b50\u6811 \n    {\n        insert(tree[k].l, x);\n        if(tree[ tree[k].l ].rd<tree[k].rd)\n        right_turn(k);\n    }\n} \nvoid del(int &k,int x)//\u5220\u9664\u503c\u7b49\u4e8ex\u8fd9\u4e2a\u8282\u70b9\n{\n   if(tree[k].val==x)//\u627e\u5230\u4e86\u8fd9\u4e2a\u8282\u70b9 \n   {\n     if(tree[k].recy>1)//\u5982\u679c\u6709\u91cd\u590d\u7684\u8bdd\u5c31\u76f4\u63a5-- \n     {\n          tree[k].recy--;\n       tree[k].size--;\n       return;\n     } \n     if(tree[k].l*tree[k].r==0)//\u5982\u679c\u4ed6\u6ca1\u6709\u91cd\u590d\u4e14\u5de6\u53f3\u5b50\u6811\u81f3\u5c11\u6709\u4e00\u4e2a0 \n        k=tree[k].l+tree[k].r;//\u5c06\u4e0ek\u76f8\u8fde\u7684\u7236\u4eb2\u8282\u70b9\u8fde\u5230k\u7684\u5b50\u6811\u4e0a \u9053\u7406\u4e0ek=lson/rson\u76f8\u540c \u8fd8\u662f\u4fee\u6539\u4e86\u5176\u6240\u6307\u5411\u7684\u70b9\uff0c\u5e76\u6ca1\u6709\u6539\u53d8\u6b64\u8282\u70b9\u7684\u6240\u5305\u542b\u7684\u4fe1\u606f \n     else  \n       if(tree[tree[k].l].rd<tree[tree[k].r].rd)//\u4e24\u4e2a\u5b50\u6811\u90fd\u6709\uff0c\u627e\u5230\u4f18\u5148\u7ea7\u6700\u5927(\u4e5f\u5c31\u662f\u968f\u673a\u503c\u6700\u5c0f\u7684)\u7136\u540e\u8f6c\u4e0a\u53bb  \n         right_turn(k),del(k,x);//\u6b64\u65f6\u7684k\u5df2\u7ecf\u53d8\u4e3a\u53f6\u8282\u70b9\u5c31\u53ef\u76f4\u63a5\u5220\u53bb \n       else \n         left_turn(k),del(k,x); \n   }\n   else\n     if(tree[k].val>x)\n     tree[k].size--,del(tree[k].l,x);\n     else \n     tree[k].size--,del(tree[k].r,x);//\u4e00\u76f4\u627e\u4e0b\u53bb\u76f4\u5230k\u4e3a\u53f6\u8282\u70b9\u7136\u540e\u5220\u9664 \n}\n int paiming1(int &k,int x)//\u5bfb\u627e\u503c\u4e3ax\u7684\u6392\u540d \n {\n     if(k==0) return 0;\n     if(tree[k].val==x) return tree[tree[k].l].size+1;//\u5982\u679c\u627e\u5230\u4e86\u90a3\u4e48\u5c31\u662f\u5176\u5de6\u5b50\u6811\u7684\u4e2a\u6570+1 \n     if(tree[k].val<x) return tree[tree[k].l].size+tree[k].recy+paiming1(tree[k].r,x);\n    if(tree[k].val>x) return paiming1(tree[k].l,x);\n }\n int paiming2(int &k,int x)//\u5bfb\u627e\u6392\u540d\u4e3ax\u7684\u503c\n {\n    if(x<=tree[tree[k].l].size) \n    return paiming2(tree[k].l,x);//\u5982\u679c\u6392\u540d\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u5de6\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5c31\u5728\u4ed6\u7684\u5de6\u5b50\u6811\u4e2d\u5bfb\u627e \n    if(x>tree[tree[k].l].size+tree[k].recy)//\u5982\u679c\u5927\u4e8e\u4ed6\u7684\u91cd\u590d\u52a0\u4e0a\u5176\u5de6\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u8bf4\u660ex\u7684\u6392\u540d\u6bd4\u5f53\u524d\u7684k\u8981\u5927\uff0c\u6240\u4ee5\u5728\u5176\u53f3\u5b50\u6811\u5bfb\u627e \n    return paiming2(tree[k].r,x-tree[tree[k].l].size-tree[k].recy);\n    return tree[k].val;\n }\n void min_max(int &k,int x)//\u627e\u6bd4x\u5c0f\u7684\u6700\u5927\u6570\n {\n     if(k==0) return;//\u5982\u679c\u627e\u5230\u4e86\u53f6\u8282\u70b9\u7684\u513f\u5b50(\u4e5f\u5c31\u662f\u6ca1\u6709) \n     if(tree[k].val<x)//\u5982\u679c\u6bd4\u6b64\u8282\u70b9\u5927 \n     ans=k,min_max(tree[k].r,x);//\u5c31\u5148\u8d4b\u503c\u8868\u660e\u5df2\u7ecf\u627e\u5230\uff0c\u7136\u540e\u518d\u53bb\u627e\u66f4\u4f18\u89e3(\u6ce8\uff1a\u4ece\u4ed6\u7684\u53f3\u5b50\u6811\u627e\u56e0\u4e3a\u8981\u6ee1\u8db3\u66f4\u5927) \n     else min_max(tree[k].l,x);//\u5982\u679c\u5c0f\u4e86\u5c31\u53ea\u80fd\u5728\u5176\u7684\u5de6\u5b50\u6811\u53bb\u627e\u66f4\u5c0f\u7684 \n } \n void max_min(int &k,int x)//\u627e\u6bd4x\u5927\u7684\u6700\u5c0f\u6570\uff0c\u540c\u4e0a\u5c31\u662f\u5168\u90e8\u53d8\u6210\u4e86\u76f8\u53cd\u7684 \n {\n     if(k==0) return;\n     if(tree[k].val>x)\n     ans=k,max_min(tree[k].l,x);\n     else max_min(tree[k].r,x);\n } \nint main()\n{\n     int f,x;\n    scanf(\"%d\",&m);\n    for (int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d\",&f,&x);\n        ans=0;\n        if (f==1) insert(root,x);\n        if (f==2) del(root,x);\n        if (f==3) printf(\"%d\\n\",paiming1(root,x));\n        if (f==4) printf(\"%d\\n\",paiming2(root,x));\n        if (f==5) {min_max(root,x); printf(\"%d\\n\",tree[ans].val);}\n        if (f==6) {max_min(root,x); printf(\"%d\\n\",tree[ans].val);}\n    }\n    return 0;\n}\n```",
        "postTime": 1514555827,
        "uid": 30845,
        "name": "ltcx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u7531\u4e8e\u5e73\u8861\u6811\u4e0d\u592a\u4f1a\u5199\uff0c\u5c31\u5199\u68f5\u7ebf\u6bb5\u6811\u51d1\u5408\u7740\n\n\u5c31\u5f00\u68f5\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\n\n\u6dfb\u52a0/\u5220\u9664\uff0c\u5c31\u662f\u5728\u5305\u542b\u6539\u6570\u7684\u533a\u95f4\u8282\u70b9+1/-1\n\n\u8be2\u95ee\u67d0\u6570\u7684\u6392\u540d\u65f6\uff0c\u5c31\u662f\u7ecf\u8fc7\u53f3\u8282\u70b9\u65f6\uff0c\u628a\u5de6\u8fb9\u5b50\u6811\u7684\u503c\u52a0\u4e0a\n\n\u8be2\u95ee\u67d0\u6392\u540d\u7684\u6570\u65f6\uff0c\u5c31\u662f\u7c7b\u4f3c\u6c42kth\u65f6\u7684\u64cd\u4f5c\n\n\u8be2\u95ee\u67d0\u6570\u524d\u9a71\u540e\u7ee7\u65f6\uff0c\u8be2\u95ee\u67d0\u6570\u6392\u540d\uff0c\u5728\u5bf9\u8be5\u6392\u540d\u8fdb\u884c\u8bbf\u95eekth\n\n```cpp\n    #include<cstdio>\n    #include<algorithm>\n    #define FOR(i,s,t) for(register int i=s;i<=t;++i)\n    #define ls k<<1,l,mid\n    #define rs k<<1|1,mid+1,r\n    #define gc getchar()\n    using namespace std;\n    const int N=400011;\n    int n,p;\n    int a[N],b[N],c[N];\n    namespace Segment_Tree{\n        int tr[N];\n        inline void modify(int x,int v,int k=1,int l=1,int r=c[0]){\n            tr[k]+=v;\n            if(l==r)return ;\n            int mid=(l+r)>>1;\n            x<=mid?modify(x,v,ls):modify(x,v,rs);\n        }\n        inline int query_num(int x,int k=1,int l=1,int r=c[0]){\n            if(l==r)return l;\n            int mid=(l+r)>>1;\n            return x<=tr[k<<1]?query_num(x,ls):query_num(x-tr[k<<1],rs);\n        }\n        inline int query_pos(int x,int type,int k=1,int l=1,int r=c[0]){\n            if(l==r){\n                if(type==3)return 1;\n                if(type==5)return 0;\n                if(type==6)return tr[k]+1;\n            }\n            int mid=(l+r)>>1;\n            return x<=mid?query_pos(x,type,ls):(tr[k<<1]+query_pos(x,type,rs));\n        }\n    }\n    using namespace Segment_Tree;\n    inline void disc_init(){\n        sort(c+1,c+c[0]+1);\n        c[0]=unique(c+1,c+c[0]+1)-c-1;\n        FOR(i,1,n)\n            if(a[i]!=4)b[i]=lower_bound(c+1,c+c[0]+1,b[i])-c;\n    }\n    inline int read(){\n        char c;while(c=gc,c==' '||c=='\\n');int data=0,f=1;\n        c=='-'?f=-1:data=c-48;\n        while(c=gc,c>='0'&&c<='9')data=(data<<1)+(data<<3)+c-48;\n        return data*f;\n    }\n    int main(){\n        n=read();\n        FOR(i,1,n){\n            a[i]=read();b[i]=read();\n            if(a[i]!=4)c[++c[0]]=b[i];\n        }\n        disc_init();\n        FOR(i,1,n){\n            if(a[i]==1)modify(b[i],1);\n            if(a[i]==2)modify(b[i],-1);\n            if(a[i]==3)printf(\"%d\\n\",query_pos(b[i],3));\n            if(a[i]==4)printf(\"%d\\n\",c[query_num(b[i])]);\n            if(a[i]==5)printf(\"%d\\n\",c[query_num(query_pos(b[i],5))]);\n            if(a[i]==6)printf(\"%d\\n\",c[query_num(query_pos(b[i],6))]);\n        }\n        return 0;\n}\n```",
        "postTime": 1514471538,
        "uid": 45523,
        "name": "Stump",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u5927\u5bb6\u90fd\u7528\u5e73\u8861\u6811\uff0c\u6211\u7528\u7ebf\u6bb5\u6811\n\n\u8fd9\u9898\u5176\u5b9e\u5148\u79bb\u6563\u5316\u4e00\u4e0b\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u505a\u7684\n\n\u5e38\u6570\u80af\u5b9a\u5c0f\u5f88\u591a\n\n\u65f6\u95f4\u590d\u6742\u5ea6nlogn\n\n\u5176\u5b9e\u6211\u4e0d\u4f1a\u5e73\u8861\u6811\u5566\u5566~\n\n\u4ee3\u7801\uff1a\n\n```cpp\nprogram rrr(input,output);\ntype\n  tree=record\n     l,r,tot:longint;\n  end;\nvar\n  a:array[0..400040]of tree;\n  b,c,num:array[0..100000]of longint;\n  m,n,i,x,y:longint;\nprocedure sort(q,h:longint);  //\u6392\u5e8f\uff0c\u7528\u6765\u79bb\u6563\u5316\nvar\n  i,j,x,t:longint;\nbegin\n   i:=q;j:=h;x:=num[(i+j)>>1];\n   repeat\n       while num[i]<x do inc(i);\n       while x<num[j] do dec(j);\n       if i<=j then\n           begin\n              t:=num[i];num[i]:=num[j];num[j]:=t;\n              inc(i);dec(j);\n           end;\n   until i>j;\n   if j>q then sort(q,j);\n   if i<h then sort(i,h);\nend;\nfunction find(x:longint):longint;  //\u79bb\u6563\u5316\u540e\u7684\u4e8c\u5206\u67e5\u627e\nvar\n  l,r,mid:longint;\nbegin\n   l:=1;r:=n;\n   while l<r-1 do\n       begin\n          mid:=(l+r)>>1;\n          if num[mid]<x then l:=mid+1 else r:=mid;\n       end;\n   if num[l]=x then exit(l) else exit(r);\nend;\nprocedure build(k,l,r:longint);  //\u5efa\u7ebf\u6bb5\u6811\nvar\n  i,mid:longint;\nbegin\n   a[k].l:=l;a[k].r:=r;a[k].tot:=0;\n   if l=r then exit;\n   mid:=(l+r)>>1;i:=k<<1;\n   build(i,l,mid);\n   build(i+1,mid+1,r);\nend;\nprocedure ins;  //\u52a0\u4e00\u4e2ax\nvar\n  k:longint;\nbegin\n   k:=1;\n   while a[k].l<>a[k].r do\n       begin\n          inc(a[k].tot);\n          if x<=(a[k].l+a[k].r)>>1 then k:=k<<1 else k:=k<<1+1;\n       end;\n   inc(a[k].tot);\nend;\nprocedure del;  //\u5220\u4e00\u4e2ax\nvar\n  k:longint;\nbegin\n   k:=1;\n   while a[k].l<>a[k].r do\n       begin\n          dec(a[k].tot);\n          if x<=(a[k].l+a[k].r)>>1 then k:=k<<1 else k:=k<<1+1;\n       end;\n   dec(a[k].tot);\nend;\nfunction ask(k:longint):longint;  //\u8be2\u95eex\u7684\u6392\u540d\uff0c\u5373\u7edf\u8ba11~x-1\u6709\u51e0\u4e2a\u6570\uff0c\u518d\u52a01\u5c31\u662f\u6392\u540d\nvar\n  i,mid:longint;\nbegin\n   if (x<=a[k].l) and (a[k].r<=y) then exit(a[k].tot);\n   mid:=(a[k].l+a[k].r)>>1;i:=k<<1;\n   ask:=0;\n   if x<=mid then ask:=ask(i);\n   if mid<y then ask:=ask+ask(i+1);\nend;\nfunction ask2(x:longint):longint;  //\u8be2\u95ee\u6392\u540dx\u7684\u6570\nvar\n  i,j,k:longint;\nbegin\n   k:=1;j:=0;\n   while a[k].l<>a[k].r do\n       begin\n          i:=k<<1;\n          if j+a[i].tot<x then begin j:=j+a[i].tot;k:=i+1; end\n          else k:=i;   //\u5982\u679c\u5de6\u5b50\u6811\u5c11\u4e86\u5c31\u5f80\u53f3\uff0c\u5426\u5219\u5f80\u5de6\n       end;\n   exit(a[k].l);\nend;\nfunction fin(x:longint):longint;  //\u67e5\u627ex\u6240\u5728\u7684\u7ebf\u6bb5\u6811\u7ed3\u70b9\u7f16\u53f7\nvar\n  k:longint;\nbegin\n   k:=1;\n   while a[k].l<>a[k].r do\n       if x<=(a[k].l+a[k].r)>>1 then k:=k<<1 else k:=k<<1+1;\n   exit(k);\nend;\nfunction pre:longint;  //\u6c42x\u7684\u524d\u9a71\nvar\n  k:longint;\nbegin\n   k:=fin(x);\n   while (a[k].tot=a[k>>1].tot) or (k mod 2=0) do k:=k>>1;\n   dec(k);\n   while a[k].l<>a[k].r do\n        if a[k<<1+1].tot>0 then k:=k<<1+1\n            else k:=k<<1;\n   exit(a[k].l);\nend;\nfunction suc:longint;  //\u6c42x\u7684\u540e\u7ee7\nvar\n  k:longint;\nbegin\n   k:=fin(x);\n   while (a[k].tot=a[k>>1].tot) or (k mod 2=1) do k:=k>>1;\n   inc(k);\n   while a[k].l<>a[k].r do\n      if a[k<<1].tot>0 then k:=k<<1\n         else k:=k<<1+1;\n   exit(a[k].l);\nend;\nbegin\n   //assign(input,'r.in');assign(output,'r.out');reset(input);rewrite(output);\n   readln(m);\n   for i:=1 to m do begin readln(b[i],c[i]);if b[i]<>4 then num[i]:=c[i]; end;\n   sort(1,m);\n   n:=1;\n   for i:=2 to m do\n       if num[i]<>num[i-1] then\n          begin\n             inc(n);num[n]:=num[i];\n          end;  //\u79bb\u6563\u5316\u540e\u5c06\u91cd\u590d\u7684\u6570\u5b57\u5220\u53bb\n   build(1,1,n);\n   for i:=1 to m do\n       begin\n          x:=find(c[i]);\n          if b[i]=1 then ins;\n          if b[i]=2 then del;\n          if b[i]=3 then\n             begin\n                if x=1 then writeln(1)\n                else begin y:=x-1;x:=1;writeln(ask(1)+1); end;\n             end;\n          if b[i]=4 then writeln(num[ask2(c[i])]);\n          if b[i]=5 then writeln(num[pre]);\n          if b[i]=6 then writeln(num[suc]);\n       end;\n   //close(input);close(output);\nend.\n```",
        "postTime": 1484481846,
        "uid": 28023,
        "name": "McGrady",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u66ff\u7f6a\u7f8a\u6811\u662f\u771f\u7684\u5feb\u554a\u3002\u62ff\u5230\u4e86\u6d1b\u8c37\u76ee\u524drank1\u3002\n\n\u4ed6\u5176\u5b9e\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u8bbe\u7f6e\u4e86\u4e00\u4e2aa,\u5f53size[\u513f\u5b50]>size[\u7238\u7238]\\*a\u5c31\u91cd\u6784\u3002a\u53ef\u4ee5\u53d60.75\u3002\n\n\u5220\u9664\u6211\u5c31\u66b4\u529b\u4e86\uff0c\u4f30\u8ba1\u6709\u66f4\u4f18\u7684\uff0c\u53cd\u6b63\u4e00\u822c\u9898\u76ee\u4e5f\u6ca1\u7528\u5230\u3002\n\n\u4ed6\u7684\u4e00\u4e2a\u4f18\u70b9\u5c31\u662f\u4e0d\u7528\u65cb\u8f6c\uff0c\u6240\u4ee5\u4e0d\u7528\u7ecf\u5e38\u5408\u5e76\u4fe1\u606f\u3002\u6240\u4ee5\u5982\u679c\u4fe1\u606f\u4e0d\u5bb9\u6613\u5408\u5e76\uff0c\u6bd4\u5982\u8bf4\u5957\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u4ed6\u5c31\u5f88\u6709\u4f18\u52bf\u4e86(\u4f8b\u5982\u5e26\u63d2\u5165\u533a\u95f4k\u5c0f)\u3002\n\n```cpp\n#include<cstdio>\n#include<cmath> \n#include<algorithm>\n#include<time.h>\nusing namespace std;\n\n#define ch_top 10000000\nchar ch[ch_top],*now_r=ch;\nvoid read(int &x)\n{\n    while (*now_r<'-') ++now_r;\n    if (*now_r=='-')\n    {\n        for (x=*++now_r-48;*++now_r>=48;)\n         x=(x<<1)+(x<<3)+*now_r-48;    \n        x=-x;\n    }\n    else\n    for (x=*now_r-48;*++now_r>=48;)\n     x=(x<<1)+(x<<3)+*now_r-48;\n}\n\n#define N 100010\nstruct tree\n{\n    int c[2],key,f,sz;\n}T[N];int rt,tot;\nint x;\n\n#define up(x) T[x].sz=T[T[x].c[0]].sz+T[T[x].c[1]].sz+1;\n#define get(x) (x==T[T[x].f].c[1]) \nvoid sc(int f,int x,bool d) { T[x].f=f;T[f].c[d]=x; }\n\nint ans,i,*w,f; \nint q[N],top;\nvoid travel(int x)\n{\n    if (!x) return ;\n    travel(T[x].c[0]);\n    q[++top]=x;\n    travel(T[x].c[1]);\n}\n#define mid (l+r>>1)\nint build(int l,int r)\n{\n    int rt=q[mid];\n    if (l!=mid) sc(rt,build(l,mid-1),0);else T[rt].c[0]=0;\n    if (r!=mid) sc(rt,build(mid+1,r),1);else T[rt].c[1]=0;\n    up(rt)\n    return rt;\n}\nvoid ins()\n{\n    ++tot;T[tot].key=x;T[tot].sz=1;\n    if (!rt) {rt=tot;return;}\n    for (i=rt;;)\n    {\n        ++T[i].sz;\n        if (!*(w=&T[i].c[T[i].key<x])) {*w=tot;T[tot].f=i;break;}\n        i=*w;\n    }\n    int need=0;\n    while (f=T[i].f) \n    { \n        if ((T[i].sz<<2)>T[f].sz*3)  need=f;\n        i=f;\n    }\n    if (need)\n    {\n        top=0;\n        travel(need);\n        if (need==rt) T[rt=build(1,top)].f=0;//\u6839\u88ab\u6362\u4e86 \n        else {f=T[need].f;bool d=get(need);sc(f,build(1,top),d);}\n    }\n}\n\nvoid del()\n{\n    for (i=rt;T[i].key!=x;) {--T[i].sz;i=T[i].c[T[i].key<x];}\n    if (!T[i].c[0]) { if(i==rt)T[rt=T[i].c[1]].f=0; else sc(T[i].f,T[i].c[1],get(i));} else\n    if (!T[i].c[1]) { if(i==rt)T[rt=T[i].c[0]].f=0; else sc(T[i].f,T[i].c[0],get(i));} else\n    {\n        --T[i].sz;\n        x=T[i].c[1];\n        while (T[x].c[0]) {--T[x].sz;x=T[x].c[0];}\n        T[i].key=T[x].key;sc(T[x].f,T[x].c[1],get(x));\n    }\n}\n\nint rank()\n{\n    ans=1;\n    for (i=rt;i;)\n    if (x<=T[i].key) i=T[i].c[0];\n    else \n    {ans+=T[T[i].c[0]].sz+1;\n     i=T[i].c[1];\n    }\n    return ans;\n} \n\nint sz;\nint find()\n{\n    --x;\n    for (i=rt;(sz=T[T[i].c[0]].sz)!=x;)\n    if (x<sz) i=T[i].c[0];\n    else {x-=sz+1;i=T[i].c[1];}\n    return T[i].key;\n}\n\nint pre()\n{\n    for (i=rt;i;)\n    if (T[i].key<x) {ans=T[i].key;i=T[i].c[1];}\n    else i=T[i].c[0];\n    return ans;\n}\n\nint next()\n{\n    for (i=rt;i;)\n    if (T[i].key>x) {ans=T[i].key;i=T[i].c[0];}\n    else i=T[i].c[1];\n    return ans;\n}\n\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);freopen(\"2.out\",\"w\",stdout);\n    fread(ch,1,ch_top,stdin);\n    int n,o;\n    read(n);\n    while (n--)\n    {\n        read(o);read(x);\n        switch (o) \n        { case 1:ins();break;\n          case 2:del();break;\n          case 3:printf(\"%d\\n\",rank());break;\n          case 4:printf(\"%d\\n\",find());break;\n          case 5:printf(\"%d\\n\",pre());break;\n          case 6:printf(\"%d\\n\",next());break;\n        }\n    }\n}\n```",
        "postTime": 1484055287,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u8d34\u4e00\u4e0bSplay\u7684\u6a21\u677f, \u81ea\u4ee5\u4e3a\u5199\u5f97\u8fd8\u662f\u5f88\u597d\u770b\u7684\n\n/\\*\n\u63d0\u4e00\u4e9b\u8981\u6ce8\u610f\u7684\u70b9:\n\n1. \u6ce8\u610f\u5224\u65ad\u8fb9\u754c, \u4e0d\u8981\u8bbf\u95ee\u5230\u7a7a\u8282\u70b9\n\n2. \u6bcf\u4e00\u6b21\u64cd\u4f5c\u6216\u8bbf\u95ee\u5b8c\u4ee5\u540e, \u8bb0\u5f97\u8981splay\u5230root\n\n3. insert\u64cd\u4f5c\u53ea\u8981update\u5f53\u524d\u8282\u70b9\u548c\u7236\u4eb2\u8282\u70b9\u5373\u53ef, \u56e0\u4e3a\u8fd8\u4f1a\u4e0a\u65cb\u5230root\n\n4.\u7262\u8bb0\u53cc\u65cb\u7684\u6253\u6cd5\n\n5. delete\u65f6\u9700\u8981\u628a\u5c06\u8981delete\u7684\u70b9\u4e0a\u65cb\u7684\u6839, \u56e0\u6b64\u53ef\u4e0efind\u5171\u7528\u51fd\u6570\n\n6. \u5728\u627e\u4e00\u4e2abst\u4e2d\u539f\u672c\u4e0d\u5b58\u5728\u7684\u70b9\u7684\u524d\u9a71\u6216\u540e\u7ee7\u65f6, \u53ef\u5148\u5c06\u8be5\u70b9\u63d2\u5165, \u7136\u540e\u627e\u524d\u9a71\u6216\u540e\u7ee7, \u7136\u540e\u518d\u5220\u9664\n\n\\*/\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\nusing namespace std;\nvoid read(int &x)\n{\n    x = 0;\n    char c;\n    int flag = 1;\n    while(! isgraph(c = getchar()))\n        if(c == '-')\n            flag *= - 1;\n    while(isgraph(c))\n        x = x * 10 + c - '0', c = getchar();\n    x *= flag;\n}\nconst int MAXN = (int)1e5;\nint top;\nstruct node\n{\n    int key, cnt, ch[2], size, fa;\n}T[MAXN + 64];\nint root;\nvoid create(int x)\n{\n    T[top].ch[0] = T[top].ch[1] = - 1;\n    T[top].key = x;\n    T[top].cnt = 1;\n    T[top ++].size = 1;\n}\nvoid update(int u)\n{\n    T[u].size = T[u].cnt;\n    if(T[u].ch[0] != - 1)\n        T[u].size += T[T[u].ch[0]].size;\n    if(T[u].ch[1] != - 1)\n        T[u].size += T[T[u].ch[1]].size;\n}\ninline int getson(int p)\n{\n    return  (p == T[T[p].fa].ch[1]);\n}\nvoid rotate(int p)\n{\n    int fa = T[p].fa, fafa = T[fa].fa, k = getson(p);\n    T[fa].ch[k] = T[p].ch[k ^ 1];\n    T[T[p].ch[k ^ 1]].fa = T[p].fa;\n    T[p].ch[k ^ 1] = fa;\n    T[fa].fa = p;\n    T[p].fa = fafa;\n    if(fafa != - 1)\n        T[fafa].ch[T[fafa].ch[1] == fa] = p;\n    update(fa), update(p);\n}\nvoid splay(int u)\n{\n    for(int fa; (fa = T[u].fa) != - 1; rotate(u))\n        if(T[fa].fa != - 1)\n            rotate((getson(u) == getson(fa)) ? fa : u);\n    root = u;\n}\nvoid insert(int x)\n{\n    if(root != - 1)\n    {\n        int p = root, fa = - 1;\n        while(1)\n        {\n            if(T[p].key == x)\n            {\n                T[p].cnt ++;\n                update(p), update(fa);\n                //\u8fd9\u91cc\u53ea\u9700\u8981\u66f4\u65b0p\u548cfa\u5c31\u53ef\u4ee5\u4e86 \n                splay(p);\n                //\u56e0\u4e3a\u8fd9\u91cc\u8fd8\u4f1a\u66f4\u65b0\u5230p\u5230\u6839\u8282\u70b9\u4e0a\u7684\u6240\u6709\u7956\u5148 \n                break;\n            }\n            fa = p;\n            p = T[p].ch[x > T[fa].key];\n            if(p == - 1)\n            {\n                create(x);\n                T[top - 1].fa = fa;\n                T[fa].ch[x > T[fa].key] = top - 1;\n                update(fa);\n                splay(top - 1);\n                break;\n            }\n        }\n    }\n    else\n        create(x), T[top - 1].fa = root, root = top - 1;\n}\nint find(int x)    //\u5199\u5f97\u6709\u70b9\u5947\u602a\u4e86, \u56e0\u4e3a\u5f3a\u884c\u628a\u4e24\u4e2a\u64cd\u4f5c\u5408\u5e76\u5728\u4e00\u8d77233 \n{\n    int p = root, sum = 0;\n    while(1)\n    {\n        if(x < T[p].key)\n            p = T[p].ch[0];\n        else\n        {\n            sum += (T[p].ch[0] == - 1) ? 0 : T[T[p].ch[0]].size;\n            if(x == T[p].key)\n            {\n                splay(p);\n                return sum + 1;\n            }\n            sum += T[p].cnt;\n            p = T[p].ch[1];\n        }\n    }\n}\nint get_pre()\n{\n    int p = T[root].ch[0];\n    while(T[p].ch[1] != - 1)\n        p = T[p].ch[1];\n    return p;\n}\nvoid del(int x)    //\u4e0b\u9762\u5c31\u662f\u65e0\u804a\u7684\u5206\u7c7b\u8ba8\u8bba\u4e86 \n{\n    find(x);\n    if(T[root].cnt > 1)\n    {\n        T[root].cnt --;\n        update(root);\n        return;\n    }\n    if(T[root].ch[0] == - 1 && T[root].ch[1] == - 1)\n    {\n        root = - 1;\n        return;\n    }\n    if(T[root].ch[1] == - 1)\n    {\n        int tmp = root;\n        root = T[root].ch[0];\n        T[root].fa = - 1;\n        return;\n    }\n    else\n    if(T[root].ch[0] == - 1)\n    {\n        int tmp = root;\n        root = T[root].ch[1];\n        T[root].fa = - 1;\n        return;\n    }\n    int pre = get_pre(), tmp = root;\n    splay(pre);\n    T[T[tmp].ch[1]].fa = root;\n    T[root].ch[1] = T[tmp].ch[1];\n    update(root);\n}\nvoid print(int x)\n{\n    if(x < 0)\n        putchar('-');\n    if(x == 0)\n        putchar('0');\n    int ans[10], top = 0;\n    while(x)\n        ans[top ++] = x % 10, x /= 10;\n    for(; top; top --)\n        putchar(ans[top - 1] + '0');\n}\nint get_rank(int x)\n{\n    int p = root;\n    while(1)\n    {\n        if(T[p].ch[0] != - 1 && x <= T[T[p].ch[0]].size)\n            p = T[p].ch[0];\n        else\n        {\n            int tmp = ((T[p].ch[0] != - 1) ? T[T[p].ch[0]].size : 0) + T[p].cnt;\n            if(x <= tmp)\n                return T[p].key;\n            x -= tmp;\n            p = T[p].ch[1];        \n        }\n    }\n}\nint get_next()\n{\n    int p = T[root].ch[1];\n    while(T[p].ch[0] != - 1)\n        p = T[p].ch[0];\n    return p;\n}\nint main()\n{\n    #ifndef ONLINE_JUDGE\n    freopen(\"L3369.in\", \"r\", stdin);\n    freopen(\"L3369.out\", \"w\", stdout);\n    #endif\n    int n;\n    read(n);\n    root = - 1;\n    top = 0;\n    for(int i = 0; i < n; i ++)\n    {\n        int opt, x;\n        read(opt), read(x);\n        switch (opt)\n        {\n            case 1: insert(x); break;\n            case 2: del(x); break;\n            case 3: print(find(x)); putchar('\\n'); break;\n            case 4: print(get_rank(x)); putchar('\\n'); break;\n            case 5: \n            {\n                insert(x);\n                print(T[get_pre()].key);\n                putchar('\\n');\n                del(x);\n                break;\n            }\n            case 6:\n            {\n                insert(x);\n                print(T[get_next()].key);\n                putchar('\\n');\n                del(x);\n                break;\n            }\n        }\n    }\n}\n```",
        "postTime": 1483750399,
        "uid": 21910,
        "name": "Ken_He",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u7ffb\u904d\u4e86\u4e00\u767e\u591a\u7bc7\u9898\u89e3\u53d1\u73b0\u90fd\u6ca1\u6709\u7528\u671d\u9c9c\u6811\u6765\u505a\u7684\u3002\u867d\u7136\u8fd9\u662f\u4e00\u79cd\u4e0d\u9760\u8c31\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u80dc\u5728\u597d\u5199\uff0c\u5e0c\u671b\u80fd\u7ed9\u5927\u5bb6\u4e00\u4e9b\u5e2e\u52a9\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\n\n\n------------\n\n\n## \u4e8c\u53c9\u641c\u7d22\u6811(BST)\n\n> \u5b83\u6216\u8005\u662f\u4e00\u68f5\u7a7a\u6811\uff0c\u6216\u8005\u662f\u5177\u6709\u4e0b\u5217\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff1a \u82e5\u5b83\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219**\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9**\u7684\u503c\uff1b \u82e5\u5b83\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219**\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c**\uff1b \u5b83\u7684**\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u6392\u5e8f\u6811**\u3002\n\n\u6027\u8d28\uff1a\u4e2d\u5e8f\u904d\u5386\u4e3a\u5347\u5e8f\n\nsuch as:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uqr9m5rm.png)\n\n### \u5b83\u652f\u6301\uff1a\u63d2\u5165\uff0c\u67e5\u8be2\uff0c\u5220\u9664\n\n\u5728\u63a5\u4e0b\u6765\u7684\u8bf4\u660e\u4e2d\uff0c\u6211\u4eec\u8ba4\u4e3a\u5143\u7d20\u6ca1\u6709\u91cd\u590d(\u6709\u7684\u8bdd\u5c31\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570cnt\u5c31\u597d\u4e86)\n\n#### \u63d2\u5165\uff1a\n\n\u5f53\u6211\u4eec\u63d2\u5165\u4e00\u4e2a\u6570\u65f6\uff0c\u548c\u6839\u8282\u70b9\u6bd4\u8f83\u5927\u5c0f\uff0c\u5982\u679c\u6bd4\u6839\u8282\u70b9\u5c0f\u5c31\u5230\u5de6\u5b50\u6811\u5bfb\u627e\uff0c\u5426\u5219\u5230\u53f3\u5b50\u6811\u5bfb\u627e\uff0c\u7136\u540e\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u627e\u5230\u63d2\u5165\u7684\u4f4d\u7f6e\n\n\u4f8b\u5982\uff1a\u63d2\u516515\n\n1.\u548c13\u6bd4\u8f83\uff0c15>13\uff0c\u5411\u53f3\u5b50\u6811\u5bfb\u627e\n\n2.\u548c16\u6bd4\u8f83\uff0c15<16\uff0c\u5411\u5de6\u5b50\u6811\u5bfb\u627e\n\n3.\u548c14\u6bd4\u8f83\uff0c15>14\uff0c\u5411\u53f3\u5b50\u6811\u5bfb\u627e\uff0c\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u8282\u70b915\u63d2\u5165\u523014\u7684\u53f3\u8fb9\n\n#### \u67e5\u8be2\n\n\u8bbe\u6570\u7ec4$siz[x]$\u8868\u793a\u4ee5$x$\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u5927\u5c0f(\u5305\u62ec$x$)\uff0c$ls$\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\uff0c$rs$\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u53f3\u513f\u5b50\n\n\u67e5\u8be2$x$\u7684\u6392\u540d\uff1a\u6bd4\u8f83$x$\u4e0e\u6839\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u5982\u679c\u7b49\u4e8e\u6839\u8282\u70b9\uff0c\u6392\u540d\u4e3a$siz[ls]+1$\uff1b\u5982\u679c\u6bd4\u6839\u8282\u70b9\u5c0f\uff0c\u5230\u5de6\u5b50\u6811\u4e2d\u67e5\u627e\uff0c\u6392\u540d\u4e3a\u5de6\u5b50\u6811\u7684\u6392\u540d\uff1b\u5982\u679c\u6bd4\u6839\u8282\u70b9\u5927\uff0c\u5230\u53f3\u5b50\u6811\u4e2d\u67e5\u627e\uff0c\u6392\u540d\u4e3a\u53f3\u5b50\u6811\u7684\u6392\u540d+siz[ls]+1\n\n\u67e5\u8be2\u6392\u540d\u4e3a$x$\u7684\u6570\uff1a\u5224\u65ad\u5de6\u5b50\u6811\u5927\u5c0f\u548c$x$\u7684\u5173\u7cfb\u3002\u5982\u679c$siz[ls]+1=x$\uff0c\u8bf4\u660e\u6839\u8282\u70b9\u5c31\u662f\u8981\u627e\u7684x\uff1b\u5426\u5219\uff0c\u5982\u679csiz[ls]>x\uff0c\u8bf4\u660e\u8fd9\u4e2a\u6570\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u5230\u5de6\u5b50\u6811\u5bfb\u627e\u6392\u540d\u4e3ax\u7684\u6570\uff1b\u5982\u679csiz[ls]<x\uff0c\u8bf4\u660e\u8fd9\u4e2a\u6570\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u5230\u53f3\u5b50\u6811\u5bfb\u627e\u6392\u540d\u4e3ax-siz[ls]-1\u7684\u6570\n\n\u67e5\u8be2x\u7684\u524d\u9a71\uff1a\u5148\u67e5\u627e\u5230x\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u627e\u5230\u5de6\u5b50\u6811\u6700\u9760\u53f3\u7684\u513f\u5b50\n\n\u67e5\u8be2x\u7684\u540e\u7ee7\uff1a\u5148\u67e5\u627e\u5230x\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u627e\u5230\u53f3\u5b50\u6811\u6700\u9760\u5de6\u7684\u513f\u5b50\n\n#### \u5220\u9664\n\n\u5b9a\u4f4d\u5f53\u524d\u8282\u70b9\u3002\u5982\u679c\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5c31\u628a\u53f3\u5b50\u6811\u63d0\u4e0a\u6765\uff0c\u5982\u679c\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5c31\u628a\u5de6\u5b50\u6811\u63d0\u4e0a\u6765\u3002\u5426\u5219\uff0c\u5220\u53bb\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u8282\u70b9(\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e00\u5b9a\u4e3a\u7a7a)\uff0c\u628a\u8fd9\u4e2a\u8282\u70b9\u79fb\u52a8\u5230\u5f53\u524d\u8282\u70b9\u7684\u4f4d\u7f6e\u4e0a\u6765\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 100005;\n\nint n, cnt, rot;\n\nstruct node\n{\n\tint ls, rs, val, siz, cnt;\n}nod[N];\n\nvoid Push_up(int x)\n{\n\tint ls = nod[x].ls, rs = nod[x].rs;\n\tnod[x].siz = nod[ls].siz + nod[rs].siz + nod[x].cnt;\n} \n\nvoid Insert(int &rt, int x)\n{\n\tif(rt == 0)\n\t{\n\t\trt = ++cnt;\n\t\tnod[rt].siz = nod[rt].cnt = 1;\n\t\tnod[rt].val = x;\n\t\treturn;\n\t}\n\tif(nod[rt].val == x)\n\t{\n\t\tnod[rt].cnt ++;\n\t\tnod[rt].siz ++;\n\t\treturn;\n\t}\n\tif(nod[rt].val < x)\n\t{\n\t\tInsert(nod[rt].rs, x);\n\t\tPush_up(rt);\n\t\treturn;\n\t}\n\tif(nod[rt].val > x)\n\t{\n\t\tInsert(nod[rt].ls, x);\n\t\tPush_up(rt);\n\t\treturn;\n\t}\n}\n\nint Findmin(int &rt)\n{\n\tif(nod[rt].ls)\n\t{\n\t\tint ret = Findmin(nod[rt].ls);\n\t\tPush_up(rt);\n\t\treturn ret;\n\t}\n\tint ret = rt;\n\trt = nod[rt].rs;\n\treturn ret; \n}\n\nvoid Delete(int &rt, int x)\n{\n\tif(nod[rt].val == x)\n\t{\n\t\tif(nod[rt].cnt > 1) \n\t\t{\n\t\t\tnod[rt].cnt --;\n\t\t\tnod[rt].siz --;\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(nod[rt].ls == 0)\n\t\t\t{\n\t\t\t\trt = nod[rt].rs;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(nod[rt].rs == 0)\n\t\t\t{\n\t\t\t\trt = nod[rt].ls;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint nd = Findmin(nod[rt].rs);\n\t\t\t\tnod[rt].val = nod[nd].val;\n\t\t\t\tnod[rt].cnt = nod[nd].cnt;\n\t\t\t\tPush_up(rt);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tif(nod[rt].val < x)\n\t{\n\t\tDelete(nod[rt].rs, x);\n\t\tPush_up(rt);\n\t\treturn;\n\t}\n\tif(nod[rt].val > x)\n\t{\n\t\tDelete(nod[rt].ls, x);\n\t\tPush_up(rt);\n\t\treturn;\n\t}\n}\n\nint Getk(int rt, int x)\n{\n\tif(nod[rt].val == x) return nod[nod[rt].ls].siz + 1;\n\telse if(nod[rt].val < x) return nod[nod[rt].ls].siz + nod[rt].cnt + Getk(nod[rt].rs, x);\n\telse if(nod[rt].val > x) return Getk(nod[rt].ls, x);\n}\n\nint Getkth(int rt, int x)\n{\n\tif(nod[nod[rt].ls].siz + 1 <= x && nod[nod[rt].ls].siz + nod[rt].cnt >= x) return nod[rt].val;\n\tif(nod[nod[rt].ls].siz + 1 > x) return Getkth(nod[rt].ls, x);\n\tif(nod[nod[rt].ls].siz + nod[rt].cnt < x) return Getkth(nod[rt].rs, x - (nod[nod[rt].ls].siz + nod[rt].cnt));\n}\n\nint Getpre(int rt, int x)\n{\n\tint p = rt, ans;\n\twhile(p)\n\t{\n\t\tif(x <= nod[p].val) p = nod[p].ls;\n\t\telse ans = p, p = nod[p].rs;\n\t}\n\treturn nod[ans].val;\n}\n\nint Getsuc(int rt, int x)//succeed\n{\n\tint p = rt, ans;\n\twhile(p)\n\t{\n\t\tif(x >= nod[p].val) p = nod[p].rs;\n\t\telse ans = p, p = nod[p].ls;\n\t}\n\treturn nod[ans].val;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\tint opt, x;\n\t\tscanf(\"%d%d\", &opt, &x);\n\t\tif(opt == 1) Insert(rot, x);\n\t\tif(opt == 2) Delete(rot, x);\n\t\tif(opt == 3) printf(\"%d\\n\", Getk(rot, x));\n\t\tif(opt == 4) printf(\"%d\\n\", Getkth(rot, x));\n\t\tif(opt == 5) printf(\"%d\\n\", Getpre(rot, x));\n\t\tif(opt == 6) printf(\"%d\\n\", Getsuc(rot, x));\n\t}\n}\n```\n\n## \u671d\u9c9c\u6811\n\n\u671d\u9c9c\u6811\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u5199\u7684\u6570\u636e\u7ed3\u6784\n\n\u671d\u9c9c\u6811\u662f\u4e00\u79cd\u81ea\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\u3002\u5176\u7279\u8272\u5c31\u662f\u4f7f\u7528\u8005\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u503c\uff0c\u5f53\u6574\u68f5\u6811\u7684\u6df1\u5ea6\u5927\u4e8eK\u65f6\u5c31\u91cd\u5efa\u8fd9\u9897\u6811\uff0c\u56e0\u6b64\u907f\u514d\u4e86\u590d\u6742\u7684\u65cb\u8f6c\u64cd\u4f5c\uff0c\u5176\u6838\u5fc3\u8fd8\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002\n\n\u867d\u7136\u4ed6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u662f\u5f88\u4f18\u79c0\uff0c\u4f46\u662f\u5b83\u7684\u4f18\u52bf\u5c31\u662f\u4ee3\u7801\u7b80\u5355\uff0c\u601d\u8def\u597d\u60f3\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4f5c\u4e3a\u66ff\u7f6a\u7f8a\u6811\u7684\u66ff\u4ee3\u54c1\u3002\n\ncode\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 100005;\n\nint n, cnt, rot;\n\nstruct node\n{\n\tint ls, rs, val, siz, cnt, dep, mxd;\n}nod[N];\n\nvoid Push_up(int x)\n{\n\tint ls = nod[x].ls, rs = nod[x].rs;\n\tnod[x].siz = nod[ls].siz + nod[rs].siz + nod[x].cnt;\n\tnod[x].mxd = max(nod[ls].mxd, nod[rs].mxd);\n} \n\nbool cmp(const node& a, const node& b)\n{\n\treturn a.val < b.val;\n}\n\nint Build(int l, int r, int dep)\n{\n\tif(l > r) return 0;\n\tint mid = l + r >> 1;\n\tnod[mid].ls = Build(l, mid - 1, dep + 1);\n\tnod[mid].rs = Build(mid + 1, r, dep + 1);\n\tnod[mid].dep = dep;\n\tPush_up(mid);\n\treturn mid;\n}\n\nvoid rebuild()\n{\n\tsort(nod + 1, nod + 1 + cnt, cmp);\n\trot = Build(1, cnt, 1);\n}\n\nvoid Insert(int &rt, int x, int dep)\n{\n\tif(rt == 0)\n\t{\n\t\trt = ++cnt;\n\t\tnod[rt].siz = nod[rt].cnt = 1;\n\t\tnod[rt].val = x;\n\t\tnod[rt].dep = nod[rt].mxd = dep;\n\t\treturn;\n\t}\n\tif(nod[rt].val == x)\n\t{\n\t\tnod[rt].cnt ++;\n\t\tnod[rt].siz ++;\n\t\treturn;\n\t}\n\tif(nod[rt].val < x)\n\t{\n\t\tInsert(nod[rt].rs, x, dep + 1);\n\t\tPush_up(rt);\n\t\treturn;\n\t}\n\tif(nod[rt].val > x)\n\t{\n\t\tInsert(nod[rt].ls, x, dep + 1);\n\t\tPush_up(rt);\n\t\treturn;\n\t}\n}\n\nint Findmin(int &rt)\n{\n\tif(nod[rt].ls)\n\t{\n\t\tint ret = Findmin(nod[rt].ls);\n\t\tPush_up(rt);\n\t\treturn ret;\n\t}\n\tint ret = rt;\n\trt = nod[rt].rs;\n\treturn ret; \n}\n\nvoid Delete(int &rt, int x)\n{\n\tif(nod[rt].val == x)\n\t{\n\t\tif(nod[rt].cnt > 1) \n\t\t{\n\t\t\tnod[rt].cnt --;\n\t\t\tnod[rt].siz --;\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(nod[rt].ls == 0)\n\t\t\t{\n\t\t\t\trt = nod[rt].rs;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(nod[rt].rs == 0)\n\t\t\t{\n\t\t\t\trt = nod[rt].ls;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint nd = Findmin(nod[rt].rs);\n\t\t\t\tnod[rt].val = nod[nd].val;\n\t\t\t\tnod[rt].cnt = nod[nd].cnt;\n\t\t\t\tPush_up(rt);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tif(nod[rt].val < x)\n\t{\n\t\tDelete(nod[rt].rs, x);\n\t\tPush_up(rt);\n\t\treturn;\n\t}\n\tif(nod[rt].val > x)\n\t{\n\t\tDelete(nod[rt].ls, x);\n\t\tPush_up(rt);\n\t\treturn;\n\t}\n}\n\nint Getk(int rt, int x)\n{\n\tif(nod[rt].val == x) return nod[nod[rt].ls].siz + 1;\n\telse if(nod[rt].val < x) return nod[nod[rt].ls].siz + nod[rt].cnt + Getk(nod[rt].rs, x);\n\telse if(nod[rt].val > x) return Getk(nod[rt].ls, x);\n}\n\nint Getkth(int rt, int x)\n{\n\tif(nod[nod[rt].ls].siz + 1 <= x && nod[nod[rt].ls].siz + nod[rt].cnt >= x) return nod[rt].val;\n\tif(nod[nod[rt].ls].siz + 1 > x) return Getkth(nod[rt].ls, x);\n\tif(nod[nod[rt].ls].siz + nod[rt].cnt < x) return Getkth(nod[rt].rs, x - (nod[nod[rt].ls].siz + nod[rt].cnt));\n}\n\nint Getpre(int rt, int x)\n{\n\tint p = rt, ans;\n\twhile(p)\n\t{\n\t\tif(x <= nod[p].val) p = nod[p].ls;\n\t\telse ans = p, p = nod[p].rs;\n\t}\n\treturn nod[ans].val;\n}\n\nint Getsuc(int rt, int x)//succeed\n{\n\tint p = rt, ans;\n\twhile(p)\n\t{\n\t\tif(x >= nod[p].val) p = nod[p].rs;\n\t\telse ans = p, p = nod[p].ls;\n\t}\n\treturn nod[ans].val;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\tint opt, x;\n\t\tscanf(\"%d%d\", &opt, &x);\n\t\tif(opt == 1) Insert(rot, x, 1);\n\t\tif(opt == 2) Delete(rot, x);\n\t\tif(opt == 3) printf(\"%d\\n\", Getk(rot, x));\n\t\tif(opt == 4) printf(\"%d\\n\", Getkth(rot, x));\n\t\tif(opt == 5) printf(\"%d\\n\", Getpre(rot, x));\n\t\tif(opt == 6) printf(\"%d\\n\", Getsuc(rot, x));\n\t\tif(nod[rot].mxd > 100) rebuild();\n\t}\n}\n```\n\n~~\u522b\u5fd8\u4e86\u5438\u53e3\u6c27~~(\u6ed1\u7a3d)\n\n",
        "postTime": 1580820689,
        "uid": 177510,
        "name": "\u5c0f\u849f\u84bb\u76ae\u76ae\u9c7c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u5b66\u5e73\u8861\u6811\u4e4b\u524d\u8981\u5148\u5b66\u4f1a\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u5806\uff0c\u5426\u5219\u5c31\u4f1a\u5f88\u96be\u7406\u89e3\uff0c\u8fd9\u4e24\u4e2a\u4e1c\u897f\u90fd\u4e0d\u7b97\u96be\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e9b\u53c2\u8003\n\n1. [**\u4e8c\u53c9\u641c\u7d22\u6811**](https://www.cnblogs.com/pyyyyyy/p/12067890.html)\n2. [**\u5806**](https://www.cnblogs.com/JVxie/p/4859889.html)\n\n\u5982\u679c\u4f60\u5b66\u4f1a\u4e86\u8fd9\u4e9b\uff0c\u5c31\u53ef\u4ee5\u5165\u95e8\u5e73\u8861\u6811\u5566~\n\n> \u5e73\u8861\u6811\uff0c\u5373\u5e73\u8861\u4e8c\u53c9\u6811\uff08Balanced Binary Tree\uff09\uff0c\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\u5b83\u662f\u4e00\u68f5\u7a7a\u6811\u6216\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002\n\n\u53d1\u73b0\u5199$treap$\u7684\u9898\u89e3\u6bd4\u8f83\u5c11,\u4e8e\u662f\u81ea\u5df1\u770b\u7740\u9ec4\u5b66\u957f\u7684\u4ee3\u7801\u5199\u4e86\u4e00\u904d\uff0c\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u6ce8\u91ca\u5199\u7684\u5f88\u660e\u767d\uff0c\u90fd\u5728\u4ee3\u7801\u91cc\u4e86\uff0c\u4e0b\u9762\u5c31\u770b\u4e00\u4e0b\u4ee3\u7801\u5427\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\nusing namespace std;\n\nconst int A = 1e5 + 11;\n\ninline int read() {\n\tchar c = getchar(); int x = 0, f = 1;\n\tfor( ; !isdigit(c); c = getchar()) if(c == '-') f = -1; \n\tfor( ; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n\treturn x * f;\n}\n\nint n, size, root, ans;\nstruct data { int l, r, v, size, rnd, w; } tr[A];\n//l\u5de6\u513f\u5b50\uff0cr\u53f3\u513f\u5b50\uff0cv\u6743\u503c\uff0csize\u5b50\u6811\u5927\u5c0f\uff0crnd\u968f\u673a\u6570\uff0cw\u4e3a\u5f53\u524d\u6743\u503c\u7684\u4e2a\u6570 \n\nvoid update(int rt) {\n\ttr[rt].size = tr[tr[rt].l].size + tr[tr[rt].r].size + tr[rt].w;\n\t//\u5f53\u524d\u5b50\u6811\u7684\u5927\u5c0f\u7b49\u4e8e\u5de6\u5b50\u6811\u5927+\u53f3\u5b50\u6811\u5927\u5c0f+\u5f53\u524d\u8282\u70b9\u6743\u503c\u7684\u4e2a\u6570 \n}\n\n//\u53f3\u65cb \n/*\n\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u53d8\u6210\u53f3\u65cb\u8282\u70b9\u7684\u53f3\u513f\u5b50\n\u65cb\u8f6c\u8282\u70b9\u7684\u53f3\u513f\u5b50\u53d8\u6210\u5f53\u524d\u8282\u70b9\n\u65cb\u8f6c\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u53d8\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\n\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u5b50\u6811\u5927\u5c0f \n*/\nvoid rturn(int &rt) {\n\tint t = tr[rt].l;\n\ttr[rt].l = tr[t].r;\n\ttr[t].r = rt;\n\ttr[t].size = tr[rt].size;\n\tupdate(rt); rt = t;\n}\n\n//\u5de6\u65cb\n/*\n\u5f53\u524d\u8282\u70b9\u7684\u53f3\u513f\u5b50\u53d8\u6210\u5de6\u65cb\u8282\u70b9\u7684\u5de6\u513f\u5b50\n\u65cb\u8f6c\u8282\u70b9\u7684\u5de6\u513f\u5b50\u53d8\u6210\u5f53\u524d\u8282\u70b9\n\u65cb\u8f6c\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u53d8\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\n\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u5b50\u6811\u5927\u5c0f\n*/ \nvoid lturn(int &rt) {\n\tint t = tr[rt].r;\n\ttr[rt].r = tr[t].l;\n\ttr[t].l = rt; \n\ttr[t].size = tr[rt].size;\n\tupdate(rt); rt = t; \n}\n\n//\u63d2\u5165\u8282\u70b9\nvoid insert(int &rt, int x) {\n\tif(rt == 0) {//\u6ca1\u6709\u8fd9\u79cd\u6743\u503c\u7684\u8282\u70b9\u5c31\u65b0\u5efa\u4e00\u4e2a \n\t\trt = ++size;\n\t\ttr[rt].size = tr[rt].w = 1;//\u56e0\u4e3a\u662f\u65b0\u5efa\u7684\uff0c\u6240\u4ee5siz\u548cw\u90fd\u4e3a1\n\t\ttr[rt].v = x, tr[rt].rnd = rand(); return;\n\t}\n\ttr[rt].size++;//\u5982\u679c\u76ee\u524d\u8282\u70b9\u7f16\u53f7\u4e0d\u4e3a0\u5219\u8ba9\u5f53\u524d\u8282\u70b9\u7684size++ \n\tif(tr[rt].v == x) { tr[rt].w++; return; } \n\t//\u5982\u679c\u627e\u5230\u4e86\u76f8\u540c\u6743\u503c\u7684\u8282\u70b9\u5c31\u76f4\u63a5\u8ba9\u5f53\u524d\u8282\u70b9\u76f8\u540c\u503c\u7684\u4e2a\u6570++\u5e76\u76f4\u63a5\u8fd4\u56de\n\tif(x > tr[rt].v) {//\u5982\u679c\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u5c31\u5230\u53f3\u5b50\u6811\u91cc\u5bfb\u627e\uff08\u4e8c\u53c9\u641c\u7d22\u6811\u6027\u8d28\uff09 \n\t\tinsert(tr[rt].r, x);\n\t\tif(tr[tr[rt].r].rnd < tr[rt].rnd) lturn(rt);//\u7ef4\u62a4\u5806\u6027\u8d28  \n\t}\n\telse {//\u5426\u5219\u53bb\u5de6\u513f\u5b50 \n\t\tinsert(tr[rt].l, x);\n\t\tif(tr[tr[rt].l].rnd > tr[rt].rnd) rturn(rt);//\u7ef4\u62a4\u5806\u6027\u8d28 \n\t}\n} \n\n//\u5220\u9664\u8282\u70b9 \nvoid del(int &rt, int x) {\n\tif(rt == 0) return; //\u5982\u679crt\u662f0\u8bf4\u660e\u6ca1\u6709\u627e\u5230\uff0c\u76f4\u63a5\u8fd4\u56de\n\tif(tr[rt].v == x) { //\u627e\u5230\u5566~~ \n\t\tif(tr[rt].w > 1) { //\u5982\u679c\u4e0d\u6b62\u4e00\u4e2a\u53ea\u5220\u9664\u4e00\u4e2a\uff0c\u76f8\u5e94\u7684size\u4e5f\u8981-- \n\t\t\ttr[rt].size--, tr[rt].w--; return;\n\t\t}\n\t\tif(tr[rt].l * tr[rt].r == 0) rt = tr[rt].l + tr[rt].r; //\u6709\u4e00\u4e2a\u513f\u5b50\u4e3a\u7a7a \n\t\telse if(tr[tr[rt].l].rnd < tr[tr[rt].r].rnd) rturn(rt), del(rt, x);\n\t\telse lturn(rt), del(rt, x);\n\t}\n\telse if(x > tr[rt].v) tr[rt].size--, del(tr[rt].r, x);\n\telse tr[rt].size--, del(tr[rt].l, x);\n} \n\n//x\u7684\u6392\u540d \nint rank(int rt, int x) {\n\tif(rt == 0) return 0;//\u6ca1\u6709\u5c31\u8fd4\u56de0\n\tif(tr[rt].v == x) return tr[tr[rt].l].size + 1;\n\t//\u5f53\u524d\u8282\u70b9\u627e\u5230\u4e86\uff0c\u7b54\u6848\u5c31\u662f\u5de6\u5b50\u6811\u5927\u5c0f+1\uff0c\u56e0\u4e3a\u5de6\u5b50\u6811\u4e2d\u8282\u70b9\u7684\u6743\u503c\u90fd\u6bd4\u5f53\u524d\u8282\u70b9\u5c0f\uff0c\u53f3\u5b50\u6811\u90fd\u6bd4\u5f53\u524d\u5927\n\tif(x > tr[rt].v) return tr[tr[rt].l].size + tr[rt].w + rank(tr[rt].r, x);\n\t//\u5982\u679c\u5f53\u524d\u8282\u70b9\u6743\u503c\u5c0f\u4e8ex\uff0c\u5219\u5230\u53f3\u5b50\u6811\u4e2d\u5bfb\u627ex\uff0c\u6b64\u65f6\u9700\u8981\u8fd4\u56de\u5de6\u513f\u5b50\u5927\u5c0f\u52a0\u4e0a\u5f53\u524d\u8282\u70b9\u6743\u503c\u4e2a\u6570\u518d\u52a0\u4e0a\u53f3\u5b50\u6811\u4e2dx\u7684\u6392\u540d \n\treturn rank(tr[rt].l, x); \n}\n\n//\u6392\u540d\u4e3ax\u7684\u6570\nint num(int rt, int x) {\n\tif(rt == 0) return 0;//\u8001\u5957\u8def\n\tif(x <= tr[tr[rt].l].size) return num(tr[rt].l, x);\n\t//\u56e0\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u5de6\u5b50\u6811\u7684\u6743\u503c\u90fd\u6bd4\u5f53\u524d\u5c0f\uff0c\u5982\u679cx\u5c0f\u4e8e\u5de6\u5b50\u6811\u7684size\uff0c\u5c31\u5230\u5de6\u5b50\u6811\u4e2d\u53bb\u627e\n\tif(x > tr[tr[rt].l].size + tr[rt].w) return num(tr[rt].r, x - tr[tr[rt].l].size - tr[rt].w);\n\t//\u5982\u679cx\u5927\u4e8e\u5de6\u5b50\u6811\u5927\u5c0f\u4e0e\u5f53\u524d\u6743\u503c\u4e2a\u6570\u4e4b\u548c\u7684\u5927\u5c0f \u5c31\u5230\u53f3\u5b50\u6811\u4e2d\u53bb\u627e\uff0c\u627e\u7684\u65f6\u5019\u8981\u8ba9x\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\u548c\u5f53\u524d\u6743\u503c\u4e2a\u6570\u4e4b\u548c\n\t//\u5373\u5230\u53f3\u5b50\u6811\u4e2d\u5bfb\u627e\u7b2cx - tr[tr[rt].l].size - tr[rt].w\u5927\u7684\u6570 \n\treturn tr[rt].v; //\u8d1f\u8d23\u5c31\u662f\u627e\u5230\u4e86\uff0c\u76f4\u63a5return \n}\n\n//\u8fd9\u91cc\u7684ans\u662f\u6307\u8282\u70b9\u7f16\u53f7\uff0c\u6700\u540e\u8fd8\u8981\u8f93\u51fa\u8282\u70b9\u7684\u503c \n//\u67e5\u8be2\u524d\u9a71precursor(\u5c31\u662f\u6307\u5c0f\u4e8e\u5f53\u524d\u503c\u7684\u6700\u5927\u503c)\nvoid pre(int rt, int x) {\n\tif(rt == 0) return;//\u8001\u5957\u8def * 2\n\tif(tr[rt].v < x) ans = rt, pre(tr[rt].r, x);\n\telse pre(tr[rt].l, x);\n}\n\n//\u67e5\u8be2\u540e\u7ee7successor(\u5c31\u662f\u6307\u5927\u4e8e\u5f53\u524d\u503c\u7684\u6700\u5c0f\u503c) \nvoid suc(int rt, int x) {\n\tif(rt == 0) return;//\u8001\u5957\u8def * 3\n\tif(tr[rt].v > x) ans = rt, suc(tr[rt].l, x);\n\telse suc(tr[rt].r, x);\n} \n\nint main() {\n\tn = read();\n\t//\u6309\u8981\u6c42\u6267\u884cqwq \n\tfor(int i = 1, opt, x; i <= n; i++) {\n\t\topt = read(), x = read();\n\t\tif(opt == 1) insert(root, x);//\u63d2\u5165\n\t\telse if(opt == 2) del(root, x);//\u5220\u9664\n\t\telse if(opt == 3) cout << rank(root, x) << '\\n';//x\u7684\u6392\u540d\n\t\telse if(opt == 4) cout << num(root, x) << '\\n';//\u6392\u540d\u4e3ax\u7684\u6570\n\t\telse if(opt == 5) ans = 0, pre(root, x), cout << tr[ans].v << '\\n';//\u524d\u9a71\n\t\telse if(opt == 6) ans = 0, suc(root, x), cout << tr[ans].v << '\\n';//\u540e\u7ee7\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1580287393,
        "uid": 198323,
        "name": "loceaner",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "### \u8fd9\u9898\u53ef\u4ee5\u7528\u4e8c\u5206\u67e5\u627e+vector\u5b9e\u73b0\u3002\n### ~~\u5de8\u4f6c\u8463\u80e4\u7136\u4e0d\u559c\u52ff\u55b7~~\n### \u9996\u5148\u8ba9\u6211\u4eec\u770b\u5411\u8fd9\u9053\u9898\u7684\u9898\u9762\n#### 1.\u4e8c\u5206\u67e5\u627e\u5e76\u63d2\u5165\u3002\n#### 2.\u4e8c\u5206\u67e5\u627e\u3002\n#### 3.\u4e8c\u5206\u67e5\u627ex\u6570\u3002\n#### 4.\u76f4\u63a5\u8f93\u51fa\u4f4d\u7f6e\u4e3ax-1\u7684\u6570\u3002\n#### 5.\u518d\u4e00\u6b21\u4e8c\u5206\u67e5\u627ex\u6570\u3002\n#### 6.\u540c\u4e0a\u3002\n#### 233 \u7136\u540e\u4f60\u5c31\u4f1a\u53d1\u73b0\u8fd9\u9898A\u4e86-----\u3002\n### \u8dd1\u7684\u6bd4\u6b63\u5e38\u7684\u5e73\u8861\u6811\u8fd8\u5feb 233.\n## xqz\uff1a\u5999\u554a\n\n------------\n# ~~\u6055\u6211\u76f4\u8a00--\u6ca1\u6709\u4e00\u9053\u5e73\u8861\u6811\u7684\u9898\u8fd9\u6837\u505a\u4e0d\u4e86\u7684\u3002~~\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>a;\nint a2,a3,a4;\nint erfen(int be,int en) {\n    int mid=be+en>>1;\n    if(be==en) {\n        return be;\n    }\n    int hj;\n    if(a[mid]>a2) {\n        hj=erfen(be,mid);\n    } else {\n        hj=erfen(mid+1,en);\n    }\n    return hj;\n}\nint erfenfind(int be,int en) {\n    int mid=be+en>>1;\n    if(a[mid]==a2) {\n        return mid;\n    }\n    int hj;\n    if(a[mid]>a2) {\n        hj=erfenfind(be,mid);\n    } else {\n        hj=erfenfind(mid+1,en);\n    }\n    return hj;\n}\nint main() {\n    int a1;\n    set<int>::iterator it;\n    int n;\n    ios::sync_with_stdio(false);\n    cin>>n;\n    int i;\n    for(i=1; i<=n; i++) {\n        cin>>a1;\n        if(a1==1) {\n            cin>>a2;\n            q.insert(a2);\n            if(a.size()==0) {\n                a.push_back(a2);\n            } else {\n                if(a2>a[a.size()-1]) {\n                    a.push_back(a2);\n                } else {\n                    int hj=erfen(0,a.size()-1);\u63d2\u5165\u64cd\u4f5c\u3002\n                    a.insert(a.begin()+hj,a2);\n                }\n            }\n        } else if(a1==2) {\n            cin>>a2;\n            int w=erfenfind(0,a.size()-1);\u5220\u9664\u64cd\u4f5c\n            if(a[w]==a2) {\n                a.erase(a.begin()+w);\n            }\n            int flag=1;\n        } else if(a1==3) {\n            cin>>a2;\n            int w=erfenfind(0,a.size()-1);//\u6734\u7d20\u7684\u4e8c\u5206\u67e5\u627e\u3002\n            int code=w;\n            while(a[code]==a[w]&&code>=0) {\n                code--;\n            }\n            if(code<w)\n                code++;\n            cout<<code+1<<endl;\n        } else if(a1==4) {\n            cin>>a2;\n            cout<<a[a2-1]<<endl;//vector\u4e2d\u4e0b\u6807\u4f1a\u51cf\u4e00\u3002\n        } else if(a1==5) {\n            cin>>a2;\n            int hj=erfen(0,a.size()-1);\n            int code=hj;\n            while(a[code]>=a2) {\n                code--;\n            }//\u9632\u6b62\u6709\u76f8\u540c\u7684\u3002\n            cout<<a[code]<<endl;\n        } else if(a1==6) {\n            cin>>a2;\n            int hj=erfen(0,a.size()-1);\n            int code=hj;\n            while(a[code]<=a2) {\n                code++;\n            }//\u9632\u6b62\u6709\u76f8\u540c\u7684\u3002\n\n            cout<<a[code]<<endl;\n\n        }\n    }\n    return 0;\n}\n```\n## 233233",
        "postTime": 1572939550,
        "uid": 244730,
        "name": "\u51af\u00b7\u66fc\u65bd\u5766\u56e0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "$\\quad$\u4f17\u6240\u5468\u77e5\uff0c\u5e73\u8861\u6811\u7684\u9898\u7528\u5e73\u8861\u6811\u505a\u662f\u6ca1\u6709\u7075\u9b42\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u796d\u51fa\u6211\u4eec\u7684\u4f20\u7edf\u624b\u827a\uff1a\n## \uff08\u6743\u503c\uff09\u7ebf\u6bb5\u6811\n\n~~\u5982\u679c\u4f60\u662f\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u5c31\u6765\u5b66\u5e73\u8861\u6811\u7684\u795e\u4ed9\uff0c\u90a3\u5bf9\u4e0d\u8d77\uff0c\u4e0b\u4e00\u7bc7\u5427~~\n\n\u7eb5\u89c26\u79cd\u64cd\u4f5c\uff0c\u867d\u7136\u6211\u4eec\u4e0d\u80fd\u7528\u666e\u901a\u7684\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u53d1\u73b0\u8fd9\u4e9b\u64cd\u4f5c\u5bf9\u4f4d\u7f6e\u6ca1\u6709\u8981\u6c42\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u5b8c\u6210\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4e00\u4e00\u5206\u6790\uff1a\n\n- $1,$\u63d2\u5165\u64cd\u4f5c\uff0c\u628a\u7ebf\u6bb5\u6811\u4e2d\u533a\u95f4\u5305\u542bx\u7684\u8282\u70b9\u7684sum++\uff0c\u5355\u6b21\u590d\u6742\u5ea6$O(log_2V)$($V$\u8868\u793a\u7ebf\u6bb5\u6811\u5f00\u4e86\u591a\u5927\uff0c\u4e0b\u540c\uff09\n\n- $2,$\u5220\u9664\u64cd\u4f5c\uff0c\u628a\u7ebf\u6bb5\u6811\u4e2d\u533a\u95f4\u5305\u542bx\u7684\u8282\u70b9\u7684sum--\uff0c\u5355\u6b21\u590d\u6742\u5ea6$O(log_2V)$\n\n- $3,$\u6c42\u4e00\u4e2a\u6570\u7684\u6392\u540d\uff0c\u6c42\u7ebf\u6bb5\u6811\u5c0f\u4e8ex\u7684\u6570\u7684\u4e2a\u6570\uff0c\u6700\u540e\u52a0$1$\uff0c\u5355\u6b21\u590d\u6742\u5ea6$O(log_2V)$\n\n- $4,$\u6c42\u6392\u540d\u4e3ak\u7684\u6570\uff0c\u6bcf\u6b21\u5224\u65ad\uff0c\u5982\u679c\u5de6\u5b50\u6811\u7684\u6570\u7684\u4e2a\u6570\u5927\u4e8ek\uff0c\u5f80\u5de6\u5b50\u6811\u4e2d\u627e\uff0c\u5426\u5219\u5f80\u53f3\u5b50\u6811\u4e2d\u627e\uff0c\u5355\u6b21\u590d\u6742\u5ea6$O(log_2V)$\n\n- $5,$\u6c42\u524d\u9a71\uff0c\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u4e2d\u627e\u7b2c\u4e00\u4e2a\u6bd4x\u5c0f\u7684\u6570\uff0c\u5f53\u53f3\u5b50\u6811\u6709\u6ee1\u8db3\u7684\u76f4\u63a5\u8f93\u51fa\uff0c\u53ef\u4ee5\u8fd9\u4e48\u611f\u6027\u7406\u89e3:\u4ece\u53f3\u5f80\u5de6\u627e\uff0c\u53ea\u8981\u627e\u5230\u4e00\u4e2a\u5c31\u662f\u7b54\u6848\uff0c\u6240\u4ee5\u53ea\u4f1a\u5230\u8fbe\u5e95\u5c421\u6b21\uff0c\u6700\u5927\u503c\u6bd4x\u5c0f\u7684\u533a\u95f4\u53ef\u4ee5O(1)\u5224\u65ad\u662f\u5426\u6709\u7b54\u6848\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e5f\u662f$O(log_2V)$\n\n- $6,$\u6c42\u540e\u7ee7\uff0c\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u4e2d\u627e\u7b2c\u4e00\u4e2a\u6bd4x\u5927\u7684\u6570\uff0c\u540c\u4e0a\uff0c\u590d\u6742\u5ea6$O(log_2V)$\n\n$\\quad$\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog_2V)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(V)$\u3002\u6211\u4eec\u53ef\u4ee5\u79bb\u7ebf\u641e\uff0c\u8bb0\u5f55\u51fa\u73b0\u8fc7\u7684\u6570\u540e\u79bb\u6563\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230$O(nlog_2n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(n)$\u3002\u56e0\u4e3a\u7ebf\u6bb5\u6811\u7ed3\u6784\u76f8\u5f53\u5e73\u8861\uff0c\u6240\u4ee5\u5e38\u6570\u76f8\u6bd4\u5e73\u8861\u6811\u8f83\u5c0f\uff0c\u548c$treap$\u5dee\u4e0d\u591a\uff0c\u800c\u4e14\u7801\u91cf\u76f8\u5f53\u5c0f\uff0c\u4e0d\u52a0\u8bfb\u5165\u8f93\u51fa\u4f18\u5316\u624d60\u884c~~\u7528vector\u6eda\u5f00~~\uff0c\u5176\u5b9e\u4e5f\u662f\u4e2a\u8f83\u597d\u7684\u9009\u62e9\u3002\n\n$Code:$\n\n```cpp\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define getchar()(p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#define rint register int\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n\trint a=0,fh=1;\n\tregister char c=getchar();\n\twhile(c>'9'||c<'0'){if(c=='-')fh=-1;c=getchar();}\n\twhile('0'<=c&&c<='9'){\n\t\ta=a*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn a*fh;\n}//\u5feb\u8bfb\n#define Ls (x<<1)\n#define Rs (x<<1|1)\n#define MN 100005\nint x[MN],v[MN],sum[MN<<2],op[MN],N,n;\n//x\uff0cop\uff1a\u79bb\u7ebf\u505a\uff0c\u5148\u8bb0\u5f55\u64cd\u4f5c v:\u7528\u4e8e\u79bb\u6563\u5316\n//sum:\u7ebf\u6bb5\u6811\u4e2d\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u6709\u51e0\u4e2a\u6570\nvoid Ins(int x,int l,int r,int loc,int v){\n\tsum[x]+=v;\n\tif(l==r)return;\n\trint mid=(l+r)>>1;\n\tif(loc<=mid) Ins(Ls,l,mid,loc,v);\n\telse Ins(Rs,mid+1,r,loc,v);\n}//\u63d2\u5165\u6216\u5220\u9664\u4e00\u4e2a\u6570\nint query(int x,int l,int r,int e){\n\tif(l>e) return 0;\n\tif(r<=e)return sum[x];\n\trint mid=(l+r)>>1;\n\treturn query(Ls,l,mid,e)+query(Rs,mid+1,r,e);\n}//\u6c42\u5c0f\u4e8ee\u7684\u6570\u7684\u4e2a\u6570\nint kth(int x,int l,int r,int k){\n\tif(l==r)return l;\n\trint mid=(l+r)>>1;\n\treturn (sum[Ls]>=k)?kth(Ls,l,mid,k):kth(Rs,mid+1,r,k-sum[Ls]);//\u6ce8\u610f\u5f80\u53f3\u5b50\u6811\u627e\u65f6k\u8981\u5148\u51cf\u53bb\u5de6\u5b50\u6811\u7684\u6570\u7684\u4e2a\u6570\n}//\u6c42\u7b2cK\u5927\nint pre(int x,int l,int r,int loc){\n\tif(!sum[x]||l>=loc)return -1;\n\tif(l==r) return l;\n\trint mid=(l+r)>>1,Rans=pre(Rs,mid+1,r,loc);\n\tif(Rans!=-1) return Rans;\n\treturn pre(Ls,l,mid,loc);\n}//\u524d\u9a71\nint suf(int x,int l,int r,int loc){\n\tif(!sum[x]||r<=loc) return -1;\n\tif(l==r)return l;\n\trint mid=(l+r)>>1,Lans=suf(Ls,l,mid,loc);\n\tif(Lans!=-1) return Lans;\n\treturn suf(Rs,mid+1,r,loc);\n}//\u540e\u7ee7\nint main(){\n\tn=read();\n\tfor(rint i=1;i<=n;++i){\n\t\top[i]=read();x[i]=read();\n\t\tif(op[i]==1) v[++N]=x[i];//\u628a\u8981\u63d2\u5165\u7ebf\u6bb5\u6811\u4e2d\u7684\u79bb\u6563\u5316\uff0c\u5176\u5b83\u6570\u6ca1\u6709\u5fc5\u8981\n\t}\n\tsort(v+1,v+1+N);\n\tN=unique(v+1,v+1+N)-v-1;\n\tfor(rint i=1;i<=n;++i){\n\t\trint tmp=x[i];\n\t\tif(op[i]!=4) x[i]=lower_bound(v+1,v+1+N,x[i])-v;//\u8fd9\u91cc\u8981\u628a\u9664\u4e86\u67e5\u8be2\u6392\u540d\u7684\u90fd\u79bb\u6563\u5316\n\t\tswitch(op[i]){\n\t\t\tcase 1: Ins(1,1,N,x[i],1);break;\n\t\t\tcase 2: Ins(1,1,N,x[i],-1);break;\n\t\t\tcase 3: printf(\"%d\\n\",query(1,1,N,x[i]-1)+1);break;\n\t\t\tcase 4: printf(\"%d\\n\",v[kth(1,1,N,x[i])]);break;//\u6ce8\u610f\u8f93\u51fa\u539f\u6570\uff0c\u4e0b\u540c\n\t\t\tcase 5: printf(\"%d\\n\",v[pre(1,1,N,x[i])]);break;\n            //\u627e\u524d\u9a71\u65f6\u6211\u4eec\u7528\u7684\u662flower_bound\uff0c\u5982\u679c\u6811\u4e2d\u6ca1\u6709\u67e5\u8be2\u7684\u8fd9\u4e2a\u6570\uff0c\u90a3\u4e48\u5c31\u7b49\u4ef7\u4e8e\u67e5\u6700\u5c0f\u7684\u6bd4\u5b83\u5927\u7684\u53ef\u80fd\u5728\u6811\u4e2d\u7684\u6570\u7684\u524d\u9a71\n\t\t\tcase 6: printf(\"%d\\n\",v[suf(1,1,N,(tmp==v[x[i]])?x[i]:(x[i]-1))]);break;\n            //\u6ce8\u610f\u627e\u540e\u7ee7\u65f6\u8981\u7279\u5224\u8fd9\u4e2a\u6570\u662f\u5426\u53ef\u80fd\u5728\u6811\u4e2d\uff0c\u53ef\u4ee5\u624b\u6a21\u4e00\u4e0b\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1566958340,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u5708\uff0c\u597d\u50cf\u771f\u7684\u6ca1\u4ec0\u4e48\u7528\u6307\u9488\u7684\u5462\u3002\u3002\n\n\u660e\u660e\u89c9\u5f97\u6307\u9488\u5f88\u597d\u770b\uff08\u4ec0\u4e48\uff1f\uff1f\u4f60\u8bf4RE\uff1f\uff1f\uff1f\u542c\u4e0d\u89c1\u542c\u4e0d\u89c1\uff09  \n\u5176\u5b9e\u6211\u89c9\u5f97\u7528\u6570\u7ec4\u7684\u8bdd\u4e0dRE\u76f4\u63a5WA\u8c03\u8d77\u6765\u4e0d\u662f\u66f4\u56f0\u96be\u561b\uff0c\u6bd5\u7adf\u901a\u8fc7gdb\u8fd8\u53ef\u4ee5\u77e5\u9053\u54ea\u91ccRE\uff0cWA\u5c31\u4e0d\u77e5\u9053\u548b\u56de\u4e8b\u4e86\uff0c\u662f\u4e0d\u662f\u5f88\u6709\u9053\u7406\uff0c\u867d\u7136\u6211\u8fd8\u662f\u8c03\u4e86\u51e0\u5c0f\u65f6\n\n\u6211\u5199\u7684\u662ffhq treap\uff0c\u6838\u5fc3\u662fsplit\u548cmerge\u64cd\u4f5c\uff0c\u601d\u60f3\u9ad8\u8d5edalao\u90fd\u8bb2\u5f97\u5f88\u6e05\u695a\uff0c\u6211\u8bed\u6587\u5f31\u6e23\u5c31\u4e0d\u73ed\u95e8\u5f04\u65a7\u4e86\uff0c\u4e3b\u8981\u662f\u60f3\u63d0\u4f9b\u4e00\u4e2a\u6307\u9488\u7248\u7684\u53c2\u8003\u5427QAQ\n\n~~\u6211\u771f\u7684\u662f\u4e00\u6574\u5929\u90fd\u5728\u641e\u5206\u88c2(split)\uff0c\u6709\u79cd\u8981\u8fdb\u5165\u4e03\u6708\u67aa\u6bd9\u540d\u5355\u7684\u8d76\u811a\uff0c\u614c\u5f20.jpg~~\n\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\n#define fr(i,x,y) for(int i=(x);i<=(y);i++)\n#define rf(i,x,y) for(int i=(x);i>=(y);i--)\n#define frl(i,x,y) for(int i=(x);i<(y);i++)\nusing namespace std;\nconst int N=100005;\nstruct node{\n\tint v,rnd,s,sz;  //s\u8868\u793a\u6743\u503c\u4e3av\u7684\u4e2a\u6570,sz\u8868\u793a\u5b50\u6811size,\u7136\u800c\u6211\u7ecf\u5e38\u5fd8\u8bb0s\u7684\u5b58\u5728,\u76f4\u63a5\u5199\u62101,\u6302\u4e86\u597d\u4e45\n\tnode* ch[2];\n\t\n\tinline int cmp(int x){ return x>v; } //\u8fd9\u5176\u5b9e\u662f\u5199\u65cb\u8f6ctreap\u65f6\u7559\u4e0b\u7684\u5386\u53f2\u9057\u7559\u95ee\u9898= =\u65e0\u89c6\u5427\n\t\n\tinline void maintain(){\n\t\tsz=s;\n\t\tif (ch[0]!=NULL) sz+=ch[0]->sz; //\u5199\u6307\u9488\u4e00\u5b9a\u8981\u7279\u522b\u6ce8\u610f\u5bf9NULL\u7684\u5224\u65ad\n\t\tif (ch[1]!=NULL) sz+=ch[1]->sz;\n\t}\n\t\n\tnode(){\n\t\tch[0]=ch[1]=NULL;\n\t\trnd=rand();\n\t}\n}nd[N];\nint tot;\nnode* rt;\nint n;\n\nvoid read(int &x){ //\u8bfb\u4f18\u4e00\u5f00\u59cb\u5fd8\u8bb0\u8d1f\u6570\u4e86= =\n\tchar ch=getchar();x=0;int w=0;\n\tfor(;ch<'0'||ch>'9';ch=getchar()) if (ch=='-') w=1;\n\tfor(;ch>='0'&&ch<='9';ch=getchar()) x=(x<<3)+(x<<1)+ch-'0';\n\tif (w) x=-x;\n}\n\ninline int sss(node* &o){\n\treturn o==NULL?0:o->sz;\n}\n\nnode* &kth(node* &o,int k){ \n\tassert(o!=NULL);\n\tint s=sss(o->ch[0]);\n\tif (s+1<=k&&s+o->s>=k) return o;\n\tif (s+1>k) return kth(o->ch[0],k);\n\treturn kth(o->ch[1],k-o->s-s);\n}\n\nvoid split(node* o,node* &L,node* &r,int k){ //split <=k\n\tif (o==NULL) return L=r=NULL,void();\n\tif (o->v<=k){\n\t\tsplit(o->ch[1],o->ch[1],r,k);\n\t\tL=o;\n\t} else{\n\t\tsplit(o->ch[0],L,o->ch[0],k);\n\t\tr=o;\n\t}\n\to->maintain(); //\u8981\u7ecf\u5e38\u7ef4\u62a4\u4e00\u4e0b\u4fe1\u606f\n}\n\nnode* &merge(node* &L,node* &r){\n\tif (L==NULL) return r;\n\tif (r==NULL) return L;\n\tif (L->rnd<r->rnd){\n\t\tL->ch[1]=merge(L->ch[1],r);\n\t\tL->maintain();\n\t\treturn L;\n\t} else{\n\t\tr->ch[0]=merge(L,r->ch[0]);\n\t\tr->maintain();\n\t\treturn r;\n\t}\n}\n\nvoid add_node(int v){\n\tnode* L;\n\tnode* r;node* xx;\n\tsplit(rt,L,r,v);\n\tif (L!=NULL&&(xx=kth(L,L->sz))->v==v){ //\u5982\u679c\u5b58\u5728\u8fd9\u4e2a\u6570\u76f4\u63a5\u52a0\u4e2a\u6570\n\t\tsplit(L,L,xx,v-1);\n\t\txx->s++;xx->sz++;  //\u4e0d\u8981\u5fd8\u8bb0\u52a0size\n\t\t//rt=merge(L,r);\n\t}else{\n\t\txx=&nd[++tot];\n\t\txx->s=xx->sz=1;xx->v=v;\n\t}\n\trt=merge(merge(L,xx),r);\n}\n\nvoid del_node(int v){\n\tnode *L,*r,*mid;\n\tsplit(rt,L,r,v-1);\n\tsplit(r,mid,r,v);\n\tif (mid!=NULL&&mid->s>1) mid->s--,mid->sz--,r=merge(mid,r);\n\trt=merge(L,r);\n}\n\nint rk(node* &o,int v){\n\tassert(o!=NULL);\n\tif (o->v==v) return sss(o->ch[0])+1;\n\tif (v<o->v) return rk(o->ch[0],v);\n\t else return rk(o->ch[1],v)+sss(o->ch[0])+o->s;\n}\n\nint rkk(node* rt,int v){\n\tnode *L,*r;\n\tsplit(rt,L,r,v-1);\n\tint ans=sss(L)+1;\n\trt=merge(L,r);\n\treturn ans;\n}\n//rk\u548crkk\u90fd\u53ef\u4ee5\u6c42rank,\u4e00\u4e2a\u901a\u8fc7split\u4e00\u4e2a\u901a\u8fc7size,\u597d\u50cfrkk\u66f4\u5feb?\u611f\u89c9\u6709\u70b9\u5947\u602a...\n\nint main(){\n\tsrand(19260817);\n\tread(n);\n\tint tp,x;\n\tnode *L,*r;\n\tint s=0;\n\tadd_node(19260817);\n\tfr(o,1,n){\n\t\tread(tp);read(x);\n\t\tif (tp==1) add_node(x);\n\t\tif (tp==2) del_node(x);\n\t\tif (tp==3) printf(\"%d\\n\",rk(rt,x)),s++;\n\t\tif (tp==4) printf(\"%d\\n\",kth(rt,x)->v),s++;\n\t\tif (tp==5){\n\t\t\tsplit(rt,L,r,x-1);\n\t\t\tprintf(\"%d\\n\",kth(L,L->sz)->v),s++;\n\t\t\trt=merge(L,r);\n\t\t}\n\t\tif (tp==6){\n\t\t\tsplit(rt,L,r,x);\n\t\t\tprintf(\"%d\\n\",kth(r,1)->v),s++;\n\t\t\trt=merge(L,r);\n\t\t}\n\t\t//if (s==670) printf(\"----%d %d %d\\n\",o,tp,x);\n\t}\n\treturn 0;\n}\n```\n\n\u4f8b\u884c\u5ba3\u4f20\u535a\u5ba2\u65f6\u95f4  \n[cnblogs](https://www.cnblogs.com/ymzqwq/p/11178248.html)  [CSDN](https://blog.csdn.net/ymzqwq/article/details/95657492)  [wordpress](https://ymzqwq.wordpress.com/)",
        "postTime": 1562934393,
        "uid": 6174,
        "name": "\u591c\u732b\u5b50\u9a71\u868a\u5668",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u6ca1\u770b\u5230\u5199\u5f97\u5f88\u900f\u5f7b\u7684$Treap$\u9898\u89e3\uff0c\u4f5c\u4e3a\u521d\u5b66\u8005\u8fd8\u662f\u81ea\u5df1\u5199\u4e00\u7bc7\u5427\u3002\n# $Treap$\n\u5b9a\u4e49\uff1a\u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u6811$T$\u6ee1\u8db3$\\forall x\\in T$\uff0c$x>$ $x$\u5de6\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u4e14$x<$ $x$\u53f3\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u5219$T$\u53ef\u88ab\u79f0\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811$BST$ $(Binary$ $Search$ $Tree)$\u3002\n\n\u987e\u540d\u601d\u4e49\uff0c$Treap=Tree+Heap$\uff0c\u6240\u4ee5$Treap$\u5e73\u8861\u6811\u5176\u5b9e\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u628a\u5806\u5957\u5728\u6811\u4e0a\u7684\u7ed3\u6784\u3002\u5982\u679c\u6211\u4eec\u9700\u8981\u5bf9\u4e00\u4e2a\u5e8f\u5217\u8fdb\u884c\u63d2\u5165\u3001\u5220\u9664\u3001\u6c42\u524d\u9a71\u540e\u7ee7\u3001\u6c42\u7b2c$k$\u5927\u6570\u3001\u6c42\u6392\u540d\u7b49\u64cd\u4f5c\uff0c\u5982\u679c\u53ea\u662f\u7b80\u5355\u5730\u5efa\u7acb\u4e00\u68f5$BST$\u6765\u8dd1\u7684\u8bdd\uff0c**\u590d\u6742\u5ea6\u548c\u6811\u7684\u9ad8\u5ea6\u6709\u5173** \u3002\u5176\u6700\u574f\u590d\u6742\u5ea6\u662f$O(n)$\uff0c\u4f8b\u5982\u8f93\u5165\u6570\u636e\u6709\u5e8f\u7684\u65f6\u5019\uff0c\u6811\u76f4\u63a5\u5c31\u53d8\u6210\u4e00\u6761\u94fe\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u5728\u7ef4\u62a4$BST$\u6027\u8d28\u7684\u60c5\u51b5\u4e0b\uff0c\u5c3d\u53ef\u80fd\u5730\u628a\u6811\u7684\u9ad8\u5ea6\u538b\u7f29\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u4e86\u3002\n\n\u800c\u5bf9\u4e8e\u4e00\u68f5$BST$\uff0c\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a\u53f3\u65cb$(Zig)$\u548c\u5de6\u65cb$(Zag)$\uff0c\u5b83\u4eec\u4e0d\u4f1a\u6539\u53d8$BST$\u6027\u8d28\uff0c\u5374\u53ef\u4ee5\u6539\u53d8\u8282\u70b9\u95f4\u7684\u7236\u5b50\u5173\u7cfb\u3002\n# $Zig$\u64cd\u4f5c\n![zig.jpg](https://img.ffis.me/images/2019/03/09/zig.jpg)\n\u5177\u4f53\u6b65\u9aa4\u4e3a\uff1a\n\n1. \u628a\u84dd\u8272\u8282\u70b9\u63a5\u5230\u7ea2\u8272\u8282\u70b9\u7684\u5de6\u513f\u5b50\u4e0a\u9762\u3002\u7531\u4e8e**\u84dd\u8272\u8282\u70b9\u4e00\u5b9a\u5c0f\u4e8e\u7ea2\u8272\u8282\u70b9\u800c\u5927\u4e8e\u7eff\u8272\u8282\u70b9**\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u5b83\u63a5\u5230\u7ea2\u8272\u8282\u70b9\u7684\u5de6\u513f\u5b50\u4e0a\u9762\u3002\n2. \u628a\u7eff\u8272\u70b9\u7684\u53f3\u513f\u5b50\u66ff\u6362\u4e3a\u7ea2\u8272\u8282\u70b9\u3002\n3. \u628a\u7ea2\u8272\u8282\u70b9\u7ef4\u62a4\u7684\u8282\u70b9\u6570\u4fe1\u606f\u66f4\u65b0\u5230\u7eff\u8272\u8282\u70b9\u4e0a\u3002\n4. \u5c06$Zig$\u4e4b\u540e\u7684\u7ea2\u8272\u8282\u70b9\u7ef4\u62a4\u7684\u8282\u70b9\u6570\u4fe1\u606f\u66f4\u65b0\uff0c\u7136\u540e\u628a\u7ea2\u8272\u8282\u70b9\u6362\u6389\u3002\n* \u6ce8\u610f\uff0c\u66f4\u65b0\u8282\u70b9\u6570\u4fe1\u606f\u7684\u65f6\u5019**\u4e00\u5b9a\u4e0d\u8981**\u66f4\u65b0\u6210$Zig$\u540e\u53d8\u6210\u6811\u6839\u7684\u90a3\u4e2a\u70b9\uff0c\u800c\u66f4\u65b0\u7684\u662f$Zig$\u540e**\u53d8\u6210\u6811\u6839\u53f3\u513f\u5b50\u7684\u90a3\u4e2a\u70b9**\u3002\u8fd9\u91cc\u88ab\u5751\u4e86\u3002\n\n```cpp\ninline void Zig(int &x) {\n\tint k = l(x);\n\tl(x) = r(k), r(k) = x;\n\ts(k) = s(x);\n\tupdate(x); // attention!!\n\tx = k;\n\treturn;\n}\n```\n\n# $Zag$\u64cd\u4f5c\n![zag.jpg](https://img.ffis.me/images/2019/03/09/zag.jpg)\n$Zag$\u4e0e$Zig$\u64cd\u4f5c\u65e0\u5f02\uff0c\u53ea\u662f$l$\u4e0e$r$\u4e92\u6362\u3002$Zig$\u548c$Zag$\u4e92\u4e3a\u9006\u64cd\u4f5c\u3002\n```cpp\ninline void Zag(int &x) {\n\tint k = r(x);\n\tr(x) = l(k), l(k) = x;\n\ts(k) = s(x);\n\tupdate(x); // attention!!\n\tx = k;\n\treturn;\n}\n```\n# \u7ef4\u62a4\u65b9\u5f0f\n\u6211\u4eec\u4e0e$BST$\u5efa\u7acb\u4e00\u4e2a\u5b8c\u5168\u5bf9\u5e94\u7684\u5c0f\u6839\u5806\uff0c\u6bcf\u6b21\u65b0\u5efa\u8282\u70b9\u7684\u65f6\u5019\u5c31\u968f\u673a\u4e3a\u8282\u70b9\u5206\u914d\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u5e76\u4e14\u7528$Zig$\u548c$Zag$\u7ef4\u62a4\u5c0f\u6839\u5806\u3002\u7531\u4e8e\u5806\u7684\u6027\u8d28\uff0c\u5176\u9ad8\u5ea6\u4e3a$log(n)$\uff0c\u56e0\u6b64\u7528\u8fd9\u79cd\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5728\u7ef4\u6301$BST$\u6027\u8d28\u7684\u524d\u63d0\u4e0b\u628a$BST$\u7684\u9ad8\u5ea6\u538b\u7f29\u5230$log(n)$\uff0c\u56e0\u6b64\u63a5\u4e0b\u6765\u6240\u6709\u7684\u64cd\u4f5c\u6700\u574f\u590d\u6742\u5ea6\u5c31\u5168\u90e8\u53d8\u6210$log(n)$\u7ea7\u522b\u4e86\u3002\n\n# \u63d2\u5165\u8282\u70b9\n\u63d2\u5165\u7ed3\u70b9\u7684\u65f6\u5019\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u5f53\u524d\u63d2\u5165\u4f4d\u7f6e\u662f\u7a7a\u70b9\uff0c\u5219\u76f4\u63a5\u5728\u8fd9\u91cc\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u521d\u59cb\u5316\u8282\u70b9\u5c5e\u6027\u3002\n2. \u5f53\u524d\u63d2\u5165\u4f4d\u7f6e\u4e0d\u662f\u7a7a\u70b9\uff0c\u5148\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7ef4\u62a4\u7684\u8282\u70b9\u6570\u3002\u82e5\u63d2\u5165\u503c\u548c\u5f53\u524d\u8282\u70b9\u503c\u76f8\u7b49\uff0c\u76f4\u63a5\u628a$c(x)+1$\uff1b\u82e5\u63d2\u5165\u503c\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u503c\uff0c\u5219\u5728\u5de6\u5b50\u6811\u4e2d\u63d2\u5165\uff0c\u5e76\u4e14\u7ef4\u62a4\u5806\u5c5e\u6027\uff1a\u82e5\u5de6\u513f\u5b50\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u4f18\u5148\u7ea7\uff0c\u5c31$Zig$\u4e00\u4e0b\uff1b\u540c\u6837\u5730\uff0c\u82e5\u63d2\u5165\u503c\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u503c\uff0c\u5219\u5728\u53f3\u5b50\u6811\u4e2d\u63d2\u5165\uff0c\u5e76\u4e14\u7ef4\u62a4\u5806\u5c5e\u6027\uff1a\u82e5\u53f3\u513f\u5b50\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u4f18\u5148\u7ea7\uff0c\u5c31$Zag$\u4e00\u4e0b\u3002\n\n\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u5bf9\u8282\u70b9\u7684\u63d2\u5165\u3002\n```cpp\ninline void Insert(int &x, int v) {\n\tif(!x) {\n\t\tx = ++id;\n\t\tv(x) = v, c(x) = s(x) = 1;\n\t\tl(x) = r(x) = 0;\n\t\tp(x) = rand();\n\t\treturn;\n\t}\n\ts(x)++;\n\tif(v(x) == v)\n\t\tc(x)++;\n\telse {\n\t\tif(v < v(x)) {\n\t\t\tInsert(l(x), v);\n\t\t\tif(p(l(x)) < p(x))\n\t\t\t\tZig(x);\n\t\t} else {\n\t\t\tInsert(r(x), v);\n\t\t\tif(p(r(x)) < p(x))\n\t\t\t\tZag(x);\n\t\t}\n\t}\n\treturn;\n}\n```\n\n# \u5220\u9664\u8282\u70b9\n\u5220\u9664\u8282\u70b9\u7684\u65f6\u5019\u6709\u4e24\u79cd\u5927\u60c5\u51b5\uff1a\n1. \u5f53\u524d\u8282\u70b9\u503c\u7b49\u4e8e\u5220\u9664\u8282\u70b9\u503c\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u8ba1\u6570$\\ge1$\u5219\u76f4\u63a5$c(x)-1,s(x)-1$\u5373\u53ef\uff1b\u82e5\u5f53\u524d\u8282\u70b9\u8ba1\u6570\u4e3a$1$\uff0c\u5219\uff1a\u2460\u5982\u679c\u8be5\u70b9\u4e3a\u94fe\u8282\u70b9$($\u53ea\u6709\u4e00\u4e2a\u513f\u5b50$)$\uff0c\u76f4\u63a5\u628a\u5b83\u66ff\u6362\u4e3a\u513f\u5b50\u5373\u53ef\uff1b\u2461\u5982\u679c\u8be5\u70b9\u6709\u5de6\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u5c31\u7c7b\u4f3c\u4e8e\u5806\u7684\u5220\u9664\uff0c\u82e5\u5de6\u513f\u5b50\u4f18\u5148\u7ea7\u5c0f\u4e8e\u53f3\u513f\u5b50\u5219$Zig$\uff0c\u518d\u7ee7\u7eed\u5220\u9664\uff1b\u5426\u5219$Zag$\u540e\u518d\u7ee7\u7eed\u5220\u9664\u3002\n2. \u5f53\u524d\u8282\u70b9\u4e0d\u7b49\u4e8e\u5220\u9664\u8282\u70b9\u503c\uff0c\u90a3\u4e48**\u5148\u66f4\u65b0**$s(x)$\uff0c\u82e5\u5220\u9664\u8282\u70b9\u503c\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u503c\u5219\u4ece\u5de6\u8282\u70b9\u7ee7\u7eed\u5f00\u59cb\u5220\u9664\uff1b\u82e5\u5220\u9664\u8282\u70b9\u503c\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u503c\u5219\u4ece\u53f3\u8282\u70b9\u7ee7\u7eed\u5f00\u59cb\u5220\u9664\u3002\n```cpp\ninline void Delete(int &x, int v) {\n\tif(v(x) == v) {\n\t\tif(c(x) > 1)\n\t\t\tc(x)--, s(x)--;\n\t\telse\n\t\t\tif(!l(x) || !r(x))\n\t\t\t\tx = l(x) + r(x);\n\t\t\t\t// x = l(x) ? l(x) : r(x);\n\t\t\telse\n\t\t\t\tif(p(l(x)) < p(r(x)))\n\t\t\t\t\tZig(x), Delete(x, v);\n\t\t\t\telse\n\t\t\t\t\tZag(x), Delete(x, v);\n\t\treturn;\n\t}\n\ts(x)--; // attention!! \n\tif(v < v(x))\n\t\tDelete(l(x), v);\n\telse\n\t\tDelete(r(x), v);\n\treturn;\n}\n```\n# \u67e5\u627e\u7b2c$k$\u5927\u6570\n\u76f4\u63a5\u4ece\u6839\u5f00\u59cb\u67e5\u627e\u3002\u5bf9\u4e8e\u67e5\u8be2\u7684\u5e8f\u6570$k$\uff0c\u53ef\u77e5\uff1a\u5982\u679c$k\\in(s(l(x)), s(l(x))+c(x)]$\uff0c\u5219\u6bd4$k$\u5c0f\u7684\u5c31\u53ea\u6709$s(l(x))$\u4e2a\uff0c\u56e0\u6b64$v(x)$\u5c31\u662f\u7b54\u6848\u3002\u4ece\u6811\u6839\u5f00\u59cb\u67e5\u627e\uff0c\u53ea\u8981$x\\neq0$\uff0c\u5219\uff1a\n1. \u82e5$k\\in(s(l(x)), s(l(x))+c(x)]$\uff0c\u5219\u76f4\u63a5\u8fd4\u56de$v(x)$\u3002\n2. \u82e5$k\\notin(s(l(x)), s(l(x))+c(x)]$\uff0c\u2460$k\\le s(l(x))$\uff0c\u5219\u67e5\u8be2\u7684\u70b9\u5728\u5de6\u5b50\u6811\u5185\uff0c\u56e0\u6b64\u628a$x$\u66f4\u65b0\u4e3a$l(x)$\uff0c\u518d\u7ee7\u7eed\u67e5\u627e\uff1b\u2461$k>s(l(x))$\uff0c\u5219\u67e5\u8be2\u7684\u70b9\u5728\u5de6\u5b50\u6811\u5185\uff0c\u56e0\u6b64\u628a$k$\u66f4\u65b0\u4e3a$k-s(l(x))-c(x)$\uff0c\u628a$x$\u66f4\u65b0\u4e3a$r(x)$\uff0c\u5373\u5728\u53f3\u5b50\u6811\u91cc\u67e5\u627e\u7b2c$k-s(l(x))-c(x)$\u5927\u8282\u70b9$($\u7b49\u4ef7\u4e8e\u66f4\u65b0\u4e4b\u524d\u7684\u67e5\u627e$)$\uff0c\u7136\u540e\u7ee7\u7eed\u67e5\u627e\u3002\n```cpp\ninline int QueryKth(int k) {\n\tint x = root, _k = k;\n\twhile(x) {\n\t\tif(_k > s(l(x)) && _k <= s(l(x)) + c(x))\n\t\t\treturn v(x);\n\t\tif(_k <= s(l(x)))\n\t\t\tx = l(x);\n\t\telse\n\t\t\t_k -= s(l(x)) + c(x), x = r(x);\n\t}\n\treturn 0;\n}\n```\n# \u67e5\u627e\u524d\u9a71\u4e0e\u540e\u7ee7\n\u8fd9\u91cc\u5b9a\u4e49\uff1a$x$\u7684\u524d\u9a71\u6307\u5e8f\u5217\u4e2d\u5c0f\u4e8e$x$\u7684\u6700\u5927\u6570\uff1b$x$\u7684\u540e\u7ee7\u6307\u5e8f\u5217\u4e2d\u5927\u4e8e$x$\u7684\u6700\u5c0f\u6570\u3002$($\u6709\u4e9b\u5730\u65b9\u7684\u5b9a\u4e49\u548c\u8fd9\u4e2a\u4e0d\u4e00\u6837$)$\n\n\u6c42\u524d\u9a71\u4e0e\u6c42\u540e\u7ee7\u7684\u601d\u8def\u76f8\u4f3c\uff0c\u8fd9\u91cc\u4ee5\u524d\u9a71\u4e3a\u4f8b\uff1a\n\u7528$res$\u7ef4\u62a4\u7b54\u6848\u3002\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u53ea\u8981$x\\neq0$\uff0c\u5219\uff1a\n\n1. \u5982\u679c\u5f53\u524d\u8282\u70b9\u503c\u5c0f\u4e8e\u67e5\u627e\u503c\uff0c\u5219\u628a$res$\u66f4\u65b0\u4e3a\u5f53\u524d\u8282\u70b9\u503c\uff0c\u7136\u540e\u628a$x$\u66f4\u65b0\u4e3a$r(x)$\u4ee5\u5bfb\u627e\u53f3\u5b50\u6811\u4e2d\u662f\u5426\u8fd8\u6709\u66f4\u4f18\u7684\u89e3\u3002\n2. \u5982\u679c\u5f53\u524d\u8282\u70b9\u503c\u5927\u4e8e\u67e5\u627e\u503c\uff0c\u5219\u628a$x$\u66f4\u65b0\u4e3a$l(x)$\u4ee5\u5bfb\u627e\u5de6\u5b50\u6811\u4e2d\u662f\u5426\u6709\u5c0f\u4e8e\u67e5\u627e\u503c\u7684\u8282\u70b9\u3002\u540e\u7ee7\u7684\u7b97\u6cd5\u4e0e\u524d\u9a71\u76f8\u4f3c\uff0c\u4f46\u7565\u6709\u533a\u522b\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n```cpp\ninline int QueryPre(int v) {\n\tint x = root, res = -INF;\n\twhile(x) {\n\t\tif(v(x) < v)\n\t\t\tres = v(x), x = r(x);\n\t\telse\n\t\t\tx = l(x);\n\t}\n\treturn res;\n}\n\ninline int QuerySuf(int v) {\n\tint x = root, res = INF;\n\twhile(x) {\n\t\tif(v(x) > v)\n\t\t\tres = v(x), x = l(x);\n\t\telse\n\t\t\tx = r(x);\n\t}\n\treturn res;\n}\n```\n\n# \u83b7\u53d6\u6392\u540d\n\u6700\u540e\u5c31\u662f\u5229\u7528$Treap$\u6c42\u67e5\u627e\u503c\u5728\u5e8f\u5217\u4e2d\u7684\u6392\u540d\u3002\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u7d2f\u8ba1\u6392\u540d$rank$\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u53ea\u8981$x\\neq0$\uff0c\u5219\uff1a\n\n1. \u5982\u679c\u5f53\u524d\u8282\u70b9\u503c\u7b49\u4e8e\u67e5\u627e\u503c\uff0c\u76f4\u63a5\u8fd4\u56de$rank+s(l(x))+1$\u3002\n2. \u5982\u679c\u5f53\u524d\u8282\u70b9\u503c\u5c0f\u4e8e\u67e5\u627e\u503c\uff0c\u5219\u628a$x$\u66f4\u65b0\u4e3a$l(x)$\uff1b\u5982\u679c\u5f53\u524d\u8282\u70b9\u503c\u5927\u4e8e\u67e5\u627e\u503c\uff0c\u5148\u628a$rank$\u66f4\u65b0\u4e3a$rank+s(l(x))+c(x)$\uff0c\u8868\u793a\u5f53\u524d\u5df2\u6709$rank+s(l(x))+c(x)$\u4e2a\u8282\u70b9\u5c0f\u4e8e\u67e5\u627e\u503c\u3002\n\u6700\u540e\u8fd4\u56de$rank$\u5373\u53ef\u3002\n\n```cpp\ninline int QueryRank(int v) {\n\tint x = root, rank = 0;\n\twhile(x) {\n\t\tif(v(x) == v)\n\t\t\treturn rank + s(l(x)) + 1;\n\t\tif(v < v(x))\n\t\t\tx = l(x);\n\t\telse\n\t\t\trank += s(l(x)) + c(x), x = r(x);\n\t}\n\treturn rank;\n}\n```\n\n---\n\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n//code\n#include<bits/stdc++.h>\n#include<ctime>\n#define l(x) tree[x].lson\n#define r(x) tree[x].rson\n#define v(x) tree[x].val\n#define p(x) tree[x].pri\n#define c(x) tree[x].cnt\n#define s(x) tree[x].size\nusing namespace std;\n\nconst int MAXN = 100010;\nconst int INF = 1 << 30;\n\nstruct TREE {\n\tint lson, rson, val, pri, cnt, size;\n} tree[MAXN];\nint id = 0, root = 0;\nint n, o, opt;\n\ninline int read() {\n\tint res = 0, uz = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9') {\n\t\tif(ch == '-')\n\t\t\tuz = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9') {\n\t\tres = (res << 3) + (res << 1) + (ch ^ '0');\n\t\tch = getchar();\n\t}\n\treturn res * uz;\n}\n\ninline void update(int &x) {\n\ts(x) = s(l(x)) + s(r(x)) + c(x);\n\treturn;\n}\n\ninline void Zig(int &x) {\n\tint k = l(x);\n\tl(x) = r(k), r(k) = x;\n\ts(k) = s(x);\n\tupdate(x); // attention!!\n\tx = k;\n\treturn;\n}\n\ninline void Zag(int &x) {\n\tint k = r(x);\n\tr(x) = l(k), l(k) = x;\n\ts(k) = s(x);\n\tupdate(x); // attention!!\n\tx = k;\n\treturn;\n}\n\ninline void Insert(int &x, int v) {\n\tif(!x) {\n\t\tx = ++id;\n\t\tv(x) = v, c(x) = s(x) = 1;\n\t\tl(x) = r(x) = 0;\n\t\tp(x) = rand();\n\t\treturn;\n\t}\n\ts(x)++;\n\tif(v(x) == v)\n\t\tc(x)++;\n\telse {\n\t\tif(v < v(x)) {\n\t\t\tInsert(l(x), v);\n\t\t\tif(p(l(x)) < p(x))\n\t\t\t\tZig(x);\n\t\t} else {\n\t\t\tInsert(r(x), v);\n\t\t\tif(p(r(x)) < p(x))\n\t\t\t\tZag(x);\n\t\t}\n\t}\n\treturn;\n}\n\ninline void Delete(int &x, int v) {\n\tif(v(x) == v) {\n\t\tif(c(x) > 1)\n\t\t\tc(x)--, s(x)--;\n\t\telse\n\t\t\tif(!l(x) || !r(x))\n\t\t\t\tx = l(x) + r(x);\n\t\t\telse\n\t\t\t\tif(p(l(x)) < p(r(x)))\n\t\t\t\t\tZig(x), Delete(x, v);\n\t\t\t\telse\n\t\t\t\t\tZag(x), Delete(x, v);\n\t\treturn;\n\t}\n\ts(x)--; // attention!! \n\tif(v < v(x))\n\t\tDelete(l(x), v);\n\telse\n\t\tDelete(r(x), v);\n\treturn;\n}\n\ninline int QueryKth(int k) {\n\tint x = root, _k = k;\n\twhile(x) {\n\t\tif(_k > s(l(x)) && _k <= s(l(x)) + c(x))\n\t\t\treturn v(x);\n\t\tif(_k <= s(l(x)))\n\t\t\tx = l(x);\n\t\telse\n\t\t\t_k -= s(l(x)) + c(x), x = r(x);\n\t}\n\treturn 0;\n}\n\ninline int QueryPre(int v) {\n\tint x = root, res = -INF;\n\twhile(x) {\n\t\tif(v(x) < v)\n\t\t\tres = v(x), x = r(x);\n\t\telse\n\t\t\tx = l(x);\n\t}\n\treturn res;\n}\n\ninline int QuerySuf(int v) {\n\tint x = root, res = INF;\n\twhile(x) {\n\t\tif(v(x) > v)\n\t\t\tres = v(x), x = l(x);\n\t\telse\n\t\t\tx = r(x);\n\t}\n\treturn res;\n}\n\ninline int QueryRank(int v) {\n\tint x = root, rank = 0;\n\twhile(x) {\n\t\tif(v(x) == v)\n\t\t\treturn rank + s(l(x)) + 1;\n\t\tif(v < v(x))\n\t\t\tx = l(x);\n\t\telse\n\t\t\trank += s(l(x)) + c(x), x = r(x);\n\t}\n\treturn rank;\n}\n\nint main() {\n\tsrand(time(NULL)); // attention!!\n\tn = read();\n\twhile(n--) {\n\t\topt = read(), o = read();\n\t\tswitch(opt) {\n\t\t\tcase 1: {\n\t\t\t\tInsert(root, o);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\tDelete(root, o);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: {\n\t\t\t\tprintf(\"%d\\n\", QueryRank(o));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4: {\n\t\t\t\tprintf(\"%d\\n\", QueryKth(o));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 5: {\n\t\t\t\tprintf(\"%d\\n\", QueryPre(o));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tprintf(\"%d\\n\", QuerySuf(o));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nwritten at 2019/03/08/23:51",
        "postTime": 1552067000,
        "uid": 60258,
        "name": "NCC79601",
        "ccfLevel": 7,
        "title": "\u3010\u5b66\u4e60\u7b14\u8bb0\u3011Treap \u5e73\u8861\u6811"
    },
    {
        "content": "\u76f8\u4fe1\u5404\u79cd\u5e73\u8861\u6811\u5927\u4f6c\u4eec\u90fd\u4f1a\u5199\u7684\u6e9c\u5730\u4e0d\u5f97\u4e86\u4e86\uff0c\u6211\u6765\u4e00\u79cd\u66b4\u529b\u4e71\u641e\u5427!\n\u8fd9\u662f\u6211\u5728\u4e00\u4e2a\u665a\u81ea\u4e60\u809d\u5b8c\u4f5c\u4e1a\u540e\u60f3\u5230\u7684\u3002\u6211\u4eec\u5148\u8003\u8651\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u8fd9\u91cc\u7684$x$\u7684\u8303\u56f4\u4e0d\u662f$[-10^7,10^7]$\u800c\u662f$[1,100]$\uff0c\u90a3\u4e48\u8fd8\u4f1a\u6709\u5fc5\u8981\u5199\u5e73\u8861\u6811\u5417\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58$x$\u51fa\u73b0\u7684\u6b21\u6570(\u8bb0\u4e3acnt[x])\u3002\u64cd\u4f5c\u6d41\u7a0b\u5982\u4e0b\n\n 1. \u5bf9\u4e8e1\u64cd\u4f5c\uff0c\u76f4\u63a5cnt[x]++\n 2. \u5bf9\u4e8e2\u64cd\u4f5c\uff0c\u5982\u679ccnt[x]>0\u5219cnt[x]--\u5426\u5219\u4e0d\u7ba1\n 3. \u5bf9\u4e8e3\u64cd\u4f5c\uff0c\u76f4\u63a5\u66b4\u529b\u8ba1\u7b97$\\sum_{i = 1}^{x-1}cnt[i]$\u6700\u540e\u52a0\u4e0a1\u5373\u53ef\n 4. \u5bf9\u4e8e4\u64cd\u4f5c\uff0c\u76f4\u63a5\u4ececnt[1]\u5f00\u59cb\u7d2f\u52a0\uff0c\u5982\u679c\u52a0\u5230pos\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\uff0c\u7d2f\u8ba1\u548c\u5927\u4e8ex\uff0c\u76f4\u63a5\u8fd4\u56depos\n 5. \u5bf9\u4e8e5\u64cd\u4f5c\uff0c\u4ecex-1\u5f00\u59cb\u54111\u5f00\u59cb\u66b4\u529b\u8dd1\uff0c\u627e\u5230\u7684\u7b2c\u4e00\u4e2acnt[x]\u4e0d\u4e3a0\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u7b54\u6848\n 6. \u5bf9\u4e8e6\u64cd\u4f5c\uff0c\u540c5\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u662f\u4ecex+1\u5f00\u59cb\u8dd1\u5230100\n\n\u5bf9\u4e8e$[1,100]$\u7684x\u53ef\u4ee5\u8fd9\u4e48\u505a\uff0c\u90a3\u80fd\u4e0d\u80fd\u5728$[-10^7,10^7]$\u4e0a\u4e5f\u8fd9\u4e48\u8dd1\u66b4\u529b\u5462\uff1f\u663e\u7136\uff0c\u662f\u53ef\u4ee5\u7684\uff0c\u6211\u4eec\u628a\u6570\u636e\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u79bb\u6563\u5316\u7684\u6b65\u9aa4\u5982\u4e0b\n  >\u628a\u6240\u6709\u8be2\u95ee\u5168\u90e8\u79bb\u7ebf(\u5c31\u7b97\u8fd9\u9053\u9898\u5f3a\u5236\u5728\u7ebf\u4e5f\u4e0d\u7ba1\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u79bb\u7ebf\u6839\u672c\u4e0d\u5f71\u54cd)\uff0c\u7136\u540e\u628a\u64cd\u4f5c\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4ece\u5927\u5230\u5c0f\u4e3a\u6bcf\u4e2a\u6570\u8d4b\u4e88\u4e00\u4e2a\u79bb\u6563\u5316\u4ee5\u540e\u7684\u503ci(i\u4ece1\u5f00\u59cb\u9012\u589e)\uff0c\u4e4b\u540e\uff0c\u5168\u90e8\u4f7f\u7528\u79bb\u6563\u5316\u4ee5\u540e\u7684i\u4ee3\u66ff\u64cd\u4f5c\u6570\u6765\u64cd\u4f5c\u3002\u6ce8\u610f\u4e00\u4e0b\uff0c\u5bf9\u4e8e4\u64cd\u4f5c\uff0c\u5176\u5b9e\u79bb\u6563\u5316\u662f\u6ca1\u6709\u7528\u7684\uff0c\u4e3a\u4e86\u5b9e\u73b0\u7b80\u4fbf\uff0c\u6211\u4eec\u5c31\u7167\u6837\u8fd9\u4e48\u505a\uff0c\u4f46\u662f\u5728\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u5c31\u6309\u7167\u539f\u6765\u7684\u503c\u6765\u505a\u5c31\u597d\u4e86\n  \n  \u8fd9\u6837\u5c31\u79bb\u6563\u5316\u597d\u4e86\uff0c\u7136\u540e\u518d\u6309\u64cd\u4f5c\u987a\u5e8f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u4ece\u5934\u5f00\u59cb\u6109\u5feb\u5730\u56de\u7b54\u8be2\u95ee\u3002\u6211\u4eec\u7528nums[i]\u8868\u793a\u79bb\u6563\u5316\u4e4b\u540e\u7684\u6570i\u5bf9\u5e94\u7684\u79bb\u6563\u5316\u4e4b\u524d\u7684\u6570\u662f\u591a\u5c11\u3002\n  \u7136\u540e\u5bf9\u4e8e\u8be2\u95ee1\uff0c\u6211\u4eec\u53ea\u9700\u8981cnt[i]++;\u5c31\u597d\u4e86\n  \u5bf9\u4e8e\u8be2\u95ee2\uff0c\u5982\u679ccnt[i]>0\u6211\u4eec\u5c31cnt[i]--;\u597d\u4e86\n  \u5bf9\u4e8e\u8be2\u95ee3\uff0c4,5\uff0c\u505a\u6cd5\u548c\u4e0a\u9762\u6240\u8bf4\u7684\u4e00\u6837\uff0c\u76f4\u63a5\u4e0a\u66b4\u529b\n  \u4ee5\u4e0b\u662f\u90e8\u5206\u4ee3\u7801\n\u64cd\u4f5c1\n```cpp\nvoid insert(int val){\n    int id = val;\n    cnt[id]++;\n}\n```\n\u64cd\u4f5c2\n```cpp\n  void del(int val){\n    int id = val;\n    if(cnt[id]>0)cnt[id]--;\n}\n```\n\u64cd\u4f5c3\n```cpp\nint getRank(int val){\n    int Id = val;\n    int ans = 0;\n    for(int i = 0;i<Id;i++)ans+=cnt[i];//\u76f4\u63a5\u4ece1\u5f00\u59cb\u5f80\u540e\u603c\n    return ans+1;\n}\n```\n\u64cd\u4f5c4\n```cpp\nint getVal(int rank){\n    int ans = cnt[1];\n    int pos = 1;\n    while(ans<rank)//\u4ece\u5934\u5f00\u59cb\u5f80\u540e\u603c\n        ans+=cnt[++pos];\n    return nums[pos];\n}\n```\n\u64cd\u4f5c5\n```cpp\nint getPre(int val){\n    int Id = val-1;\n    while(Id>=1)if(cnt[Id]>0)return nums[Id];else Id--;//\u4e0a\u9762\u4ee5\u53ca\u63d0\u5230\u8fc7\u7684\u66b4\u529b\u8dd1\u6cd5\n    return 444;\n}\n```\n\u64cd\u4f5c6\n```cpp\nint getBack(int val){\n    int Id = val+1;\n    while(Id<=id)if(cnt[Id]>0)return nums[Id];else Id++;\n    return 444;\n}\n\n```\n**\u6ce8\u610f\u4e86**\uff0c\u8fd9\u4e2a\u505a\u6cd5\u4f1aTLE\u6389\u597d\u51e0\u4e2a\u70b9\uff0c\u9700\u8981\u5438\u6c27\u624d\u80fd\u8fc7\u53bb\u3002\u4f46\u662f`NOIplus`\u4e0d\u80fd\u5f00O2\u600e\u4e48\u529e\u5462\uff1f\u5176\u5b9e\u6211\u4e5f\u60f3\u5230\u4e86\u89e3\u51b3\u529e\u6cd5\uff0c\u5c31\u662f\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4cnt\u6570\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u67e5\u627e\u524d\u7f00\u548c\u4e3ax\u7684\u70b9\uff0c\u4f46\u662f\u56e0\u4e3a\u6211\u6bd4\u8f83\u61d2\uff0c\u6240\u4ee5\u6ca1\u6709\u53bb\u5b9e\u73b0\uff0c\u8bfb\u8005\u53ef\u4ee5\u81ea\u5df1\u8bd5\u4e00\u4e0b\uff0c\u8fd9\u6837\u5c31\u628a$O(n)$\u7684\u67e5\u8be2\u524d\u9a71\u540e\u7ee7\u6539\u6210\u4e86$O(logN)$\u3002\n\u603b\u4f53\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include <algorithm>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\nint read(){\n    int x = 0,f = 1;\n    static char c = getchar();\n    while(c<'0'||c>'9'){ if(c=='-')f = -1;c = getchar(); }\n    while(c>='0'&&c<='9'){ x = (x<<1)+(x<<3)+(c^'0');c = getchar(); }\n    return x*f;\n}\nconst int MAXN = 1000010;\nint nums[MAXN],id;\nstruct op{\n    int opt,val,time,id;\n    bool operator<(const op &op2)const {return val<op2.val;}\n}ops[MAXN];\nbool cmp(const op &op1,const op &op2){\n    return op1.time<op2.time;\n}\nint cnt[MAXN];\nint n;\nvoid insert(int val){\n    int id = val;\n    cnt[id]++;\n}\nvoid del(int val){\n    int id = val;\n    if(cnt[id]>0)cnt[id]--;\n}\nint getRank(int val){\n    int Id = val;\n    int ans = 0;\n    for(int i = 0;i<Id;i++)ans+=cnt[i];\n    return ans+1;\n}\nint getVal(int rank){\n    int ans = cnt[1];\n    int pos = 1;\n    while(ans<rank)\n        ans+=cnt[++pos];\n    return nums[pos];\n}\nint getPre(int val){\n    int Id = val-1;\n    while(Id>=1)if(cnt[Id]>0)return nums[Id];else Id--;\n    return 2333;\n}\nint getBack(int val){\n    int Id = val+1;\n    while(Id<=id)if(cnt[Id]>0)return nums[Id];else Id++;\n    return 23333;\n}\n\nint main(void){\n    n = read();\n    for(int i = 1;i<=n;i++)ops[i].opt = read(),ops[i].val = read(),ops[i].time = i;\n    sort(ops+1,ops+n+1);\n    ops[0].val = 0x7f7f7f7f;//\u8fd9\u91cc\u662f\u4e3a\u4e86\u65b9\u4fbf\u540e\u9762\u79bb\u6563\u5316\u8d4b\u65b0\u503c\n    id = 0;\n    for(int i = 1;i<=n;i++){\n        if(ops[i].val==ops[i-1].val)ops[i].id = ops[i-1].id;\n        else nums[++id] = ops[i].val,ops[i].id = id;\n    }\n    int cnt = 0;\n    sort(ops+1,ops+1+n,cmp);\n    for(int i = 1;i<=n;i++){\n        if(ops[i].opt==1){insert(ops[i].id);continue;}\n        else if(ops[i].opt == 2){del(ops[i].id);continue;}\n        else if(ops[i].opt == 3){printf(\"%d\\n\",getRank(ops[i].id));continue;}\n        else if(ops[i].opt == 4){printf(\"%d\\n\",getVal(ops[i].val));continue;}\n        else if(ops[i].opt == 5){printf(\"%d\\n\",getPre(ops[i].id));continue;}\n        else printf(\"%d\\n\",getBack(ops[i].id));\n    }\n    return 0;\n}\n```\n\u6c42\u7ba1\u7406\u7f6e\u9876\uff0c\u987a\u4fbf\u5b89\u5229\u4e00\u6ce2\u535a\u5ba2[denghaoyu's blog](http://denghaoyu.leanote.com/)",
        "postTime": 1545406753,
        "uid": 61493,
        "name": "BeyondStars",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u6700\u8fd1\u70ed\u8877\u4e8e\u7528\u7ebf\u6bb5\u6811\u6c34\u5e73\u8861\u6811\u9898\n\n\u8fd9\u9053\u9898\u7684\u516d\u4e2a\u64cd\u4f5c\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u90fd\u53ef\u4ee5\u5f88\u5feb\u7684\u5b8c\u6210\uff0c\u4f46\u662f\u82e6\u4e8e\u7a7a\u95f4\u5f00\u4e0d\u4e0b\n\n\u90a3\u4e48\u5c31\u7528\u52a8\u6001\u5f00\u70b9\u505a\u5427\n\n\u4ecb\u7ecd\u4e00\u4e0b\u52a8\u6001\u5f00\u70b9\uff0c\u5176\u5b9e\u5e76\u4e0d\u662f\u7279\u522b\u7384\u4e4e\uff0c\u5c31\u662f\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u8fd9\u68f5\u6811\u60f3\u8c61\u51fa\u6765\u800c\u4e0d\u662f\u5efa\u51fa\u6765\uff0c\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u5efa\u51fa\u5176\u4e2d\u7684\u4e00\u6761\u94fe\uff0c\u56e0\u4e3a\u8fd9\u6837\u6bcf\u6b21\u90fd\u8981\u73b0\u5f00\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u53eb\u505a\u52a8\u6001\u5f00\u70b9\uff08\u6211\u662f\u8fd9\u4e48\u8ba4\u4e3a\u7684QAQ\uff09\n\n\u8fd9\u6837\u5c31\u7b97\u6743\u503c\u7684\u8303\u56f4\u975e\u5e38\u5927\uff0c\u6211\u4eec\u4e5f\u6700\u591a\u5efa $n$ \u6761\u94fe\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6 $nlogn$ \uff0c\u7406\u8bba\u4e0a\u5341\u5206\u4f18\u79c0\n\n\u63d2\u5165\u64cd\u4f5c\u57fa\u672c\u5c31\u662f\u8fd9\u6837\n\n```cpp\nvoid insert(int &p,int l,int r,int x){\n    if(p==0){\n        p=++cnt;\n    }\n    t[p].s++;\n    t[p].l=l;t[p].r=r;\n    if(l==r){\n        return;\n    }\n    int mid=l+r>>1;\n    if(x<=mid) insert(t[p].ls,l,mid,x);\n    else insert(t[p].rs,mid+1,r,x);\n}\n\n```\n\n\u5bf9\u4e8e\u5220\u9664\u7ed3\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u70b9\u80af\u5b9a\u662f\u88ab\u5efa\u8fc7\u7684\uff0c\u5c31\u4e0d\u7528\u518d\u5efa\u4e86\n\n```cpp\nvoid del(int &p,int x){\n    if(p==0){\n        p=++cnt;\n    }\n    t[p].s--;\n    if(t[p].l==t[p].r){\n        return;\n    }\n    int mid=t[p].l+t[p].r>>1;\n    if(x<=mid) del(t[p].ls,x);\n    else del(t[p].rs,x);\n}\n```\n\n\u7136\u540e\u63a5\u4e0b\u6765\u7684\u56db\u4e2a\u64cd\u4f5c\n\n\u67e5\u627e\u6392\u540d\u7684\u8bdd\u53ef\u4ee5\u76f4\u63a5\u6c42\u548c $(-10000000,x-1)$ \u91cc\u7684\u6240\u6709\u6570\u52a0\u4e00\u5c31\u884c\u4e86\n\n```cpp\nint ask(int p,int x){\n\tif(t[p].l==t[p].r){\n\t\treturn t[p].l;\n\t}\n\tif(t[t[p].ls].s>=x) return ask(t[p].ls,x);\n\telse return ask(t[p].rs,x-t[t[p].ls].s);\n}\n\n```\n\n\u7b2c $k$ \u5927\u662f\u6743\u503c\u7ebf\u6bb5\u6811\u6b63\u5e38\u64cd\u4f5c\u76f4\u63a5\u627e\u5c31\u884c\u4e86\n\n```cpp\nint qsum(int p,int l,int r){\n\tif(l<=t[p].l && r>=t[p].r){\n\t\treturn t[p].s;\n\t}\n\tif(p==0) return 0;\n\tint mid=t[p].l+t[p].r>>1;\n\tint ans=0;\n\tif(l<=mid) ans+=qsum(t[p].ls,l,r);\n\tif(r>mid) ans+=qsum(t[p].rs,l,r);\n\treturn ans;\n}\n```\n\n\u524d\u9a71\u540e\u7ee7\u4e5f\u662f\u53ef\u505a\u7684\uff0c\u53ea\u662f\u4f3c\u4e4e\u4e0d\u600e\u4e48\u5e38\u7528\n\n\u5bf9\u4e8e\u5bfb\u627e $x$ \u7684\u524d\u9a71\uff0c\u6211\u4eec\u9996\u5148\u6392\u9664\u4e24\u7c7b\u533a\u95f4\uff0c\u7b2c\u4e00\u7c7b\u662f\u5de6\u7aef\u70b9\u5927\u4e8e\u7b49\u4e8e $x$ \u7684\uff0c\u7b2c\u4e8c\u7c7b\u662f\u6ca1\u6709\u6570\u7684\n\n\u7136\u540e\u5728\u5411\u4e0b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5148\u8be2\u95ee\u53f3\u513f\u5b50\uff0c\u5982\u679c\u53f3\u513f\u5b50\u533a\u95f4\u5185\u6709\u4e00\u4e2a\u6570\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u6bd4\u5de6\u513f\u5b50\u7684\u4f18\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u5426\u5219\u518d\u8be2\u95ee\u5de6\u513f\u5b50\n\n\u540e\u7ee7\u540c\u7406\u53ef\u5f97\n\n```cpp\nint findl(int p,int x){\n    if(t[p].l>=x) return -1;\n    if(t[p].s==0) return -1;\n    if(t[p].l==t[p].r){\n        return t[p].l;\n    }\n    int mid=t[p].l+t[p].r;\n    int res=findl(t[p].rs,x);\n    if(res!=-1) return res;\n    else return findl(t[p].ls,x);\n}\n\nint findr(int p,int x){\n    if(t[p].r<=x) return -1;\n    if(t[p].s==0) return -1;\n    if(t[p].l==t[p].r){\n        return t[p].l;\n    }\n    int mid=t[p].l+t[p].r;\n    int res=findr(t[p].ls,x);\n    if(res!=-1) return res;\n    else return findr(t[p].rs,x);\n}\n```\n\n\u8fd9\u6837\u5c31\u80fd\u7528\u7ebf\u6bb5\u6811\u6ee1\u8db3\u6240\u6709\u64cd\u4f5c\u4e86\u3002\n",
        "postTime": 1545122167,
        "uid": 60136,
        "name": "chengni",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u521a\u521a\u6076\u8865\u4e86\u66ff\u7f6a\u7f8a\u6811\uff0c\u7531\u4e8e\u4e00\u4e2a\u6307\u9488\u51fa\u9505\u8c03\u4e86\u8d3c\u4e45\uff0c\u5fc5\u987b\u5f97\u5199\u4e00\u7bc7\u9898\u89e3\u5de9\u56fa\u4e00\u4e0b\u7406\u89e3\u3002\n\n\u53c2\u8003\u4e86ikka\u5927\u4f6c\u7684\u535a\u5ba2\uff0c\u6211\u7684\u66ff\u7f6a\u7f8a\u6811\u5c31\u662f\u5728\u90a3\u91cc\u5b66\u4f1a\u7684\u3002\n____\n\n\u66ff\u7f6a\u7f8a\u6811\u662f\u4e00\u79cd\u4f18\u8d8a\u7684\u5e73\u8861\u6811\uff0c\u5b83\u4e0d\u50cfSplay\u548cTreap\u6709\u7740\u7eda\u4e3d\u7684\u65cb\u8f6c\u64cd\u4f5c\uff0c\u800c\u662f\u6734\u5b9e\u5730\u66b4\u529b\u91cd\u6784\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u4e3a\u4e86\u4fdd\u6301\u6811\u7ed3\u6784\u7684\u5e73\u8861\uff0c\u66ff\u7f6a\u7f8a\u6811\u5728\u6bcf\u4e00\u6b21\u63d2\u5165\u548c\u5220\u9664\u7684\u65f6\u5019\u90fd\u4f1a\u5224\u65ad\u6811\u662f\u5426\u5e73\u8861\uff0c\u6839\u636e\u7ed3\u679c\u9009\u62e9\u662f\u5426\u8981\u91cd\u6784\u5b50\u6811\u3002\n\n\u660e\u767d\u4e86\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3\u4e4b\u540e\u5b9e\u73b0\u5176\u5b9e\u4e0d\u96be\uff08\u6bd5\u7adf\u601d\u8def\u6734\u5b9e\uff09\u3002\n\n____\n\n### \u5e73\u8861\u5224\u65ad\n\n\u66ff\u7f6a\u7f8a\u6811\u6700\u6838\u5fc3\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u5b83\u5224\u65ad\u6811\u662f\u5426\u5e73\u8861\u7684\u8fc7\u7a0b\uff0c\u662f\u901a\u8fc7\u5e73\u8861\u56e0\u5b50\u6765\u5b9e\u73b0\u7684\u3002\n\n\u8fd9\u4e2a\u540d\u5b57\u542c\u8d77\u6765\u5f88\u9738\u6c14\u5f88\u9ad8\u6df1\uff0c\u4f46\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a0.5\u52301\u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u7f62\u4e86\u3002\n\n```cpp\nconst double alpha = 0.75;\n```\n\n\u5f53\u4e00\u9897\u6811\u7684\u5de6\u5b50\u6811\uff08\u6216\u53f3\u5b50\u6811\uff09**\u5b58\u5728\u7684**\u8282\u70b9\u6570\u5927\u4e8e\u8fd9\u68f5\u6811**\u5b58\u5728\u7684**\u8282\u70b9\u6570*\u5e73\u8861\u56e0\u5b50\u7684\u65f6\u5019\uff0c\u8fd9\u9897\u6811\u5c31\u662f\u4e0d\u5e73\u8861\u7684\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7528\u5230\u3002\n\n____\n\n### \u8282\u70b9\u7ed3\u6784\u4f53\n\n```cpp\nstruct Node{\n\tint val,size,cover;\n\tbool exist;\n\tNode* ch[2];\n\tvoid pushup(){this->size=ch[0]->size+ch[1]->size+(int)exist,this->cover=ch[0]->cover+ch[1]->cover+1;}\n\tint isbad(){return (ch[0]->cover>this->cover*alpha+5)||(ch[1]->cover>this->cover*alpha+5);}\n};\n```\n\nval\u662f\u8282\u70b9\u7684\u503c\uff0csize\u662f\u8282\u70b9\u5b50\u6811\u7684\u5927\u5c0f\uff0ccover\u662f\u8282\u70b9**\u5b58\u5728\u7684**\u7684\u8282\u70b9\u4e2a\u6570\u3002\n\nexist\u662f\u8282\u70b9\u662f\u5426**\u5b58\u5728**\u3002\n\nch\u662f\u5de6\u513f\u5b50\u4e0e\u53f3\u513f\u5b50\u3002\n\npushup\u64cd\u4f5c\u5f88\u597d\u7406\u89e3\uff0c\u5c31\u662fsize\u548ccover\u90fd\u66f4\u65b0\u4e00\u4e0b\u3002\n\nisbad\u64cd\u4f5c\u5224\u65ad\u5f53\u524d\u5b50\u6811\u662f\u5426\u662f\u4e0d\u5e73\u8861\u7684\uff0c\u539f\u7406\u5c31\u662f\u4e4b\u524d\u8bb2\u7684\u90a3\u4e2a\u8fc7\u7a0b\u3002\uff08\u4e4b\u6240\u4ee5\u52a0\u4e0a5\u662f\u6015\u4e0d\u7a33\uff09\n\n\u4f60\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u672c\u6587\u591a\u6b21\u5f3a\u8c03\u4e86\u201c\u5b58\u5728\u201d\u8fd9\u4e2a\u6982\u5ff5\uff0c\u6ca1\u9519\uff0c\u66ff\u7f6a\u7f8a\u6811**\u4e0d\u4f1a\u771f\u6b63\u5220\u53bb**\u8282\u70b9\uff0c\u800c\u662f\u5c06\u5b83\u4eec\u53d8\u4e3a\u201c\u4e0d\u5b58\u5728\u201d\u3002\n\n____\n\n### \u65b0\u8282\u70b9\n\n\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u65b0\u5efa\u8282\u70b9\u5c31\u662fnew node\uff0c\u7136\u9e45\u8fd9\u6837\u592a\u6162\u4e86\u3002\n\n\u4e3a\u4e86\u63d0\u901f\uff0c\u6211\u4eec\u5fc5\u987b\u624b\u52a8\u6a21\u62df\u5185\u5b58\u6c60\uff08\u5176\u5b9e\u6211\u542c\u5230\u8fd9\u4e2a\u8bcd\u662f\u61f5\u903c\u7684\uff09\u3002\n\n\u6a21\u62df\u5185\u5b58\u6c60\u7684\u6d41\u7a0b\u5c31\u662f\uff0c\u628a\u6240\u6709\u4e0d\u8981\u7684\u8282\u70b9\u4e22\u8fdb\u5185\u5b58\u56de\u6536\u6c60\uff0c\u7136\u540e\u9700\u8981\u7684\u65f6\u5019\u518d\u63d0\u53d6\u51fa\u6765\u3002\n\n\u8fd9\u6837\u5220\u9664\u6389\u7684\u8282\u70b9\u5c31\u4e0d\u4f1a\u6d6a\u8d39\uff0c\u800c\u80fd\u5f97\u5230\u6709\u6548\u5229\u7528\u3002\n\n```cpp\nNode mempool[N];\nNode *tail,*null,*root;\nNode *bc[N];\nint bc_top;\nNode* newNode(int val){\n\tNode* p=bc_top?bc[--bc_top]:tail++;\n\tp->ch[0]=p->ch[1]=null;\n\tp->size=p->cover=p->exist=1;\n\tp->val=val;\n\treturn p;\n}\n```\nmempool\u5c31\u662f\u6211\u4eec\u6a21\u62df\u7684\u5185\u5b58\u6c60\u3002tail\u6307\u5411\u5185\u5b58\u6c60\u5185\u7684\u5143\u7d20\u3002\n\nroot\u4e0d\u7528\u7ba1\u5b83\u3002\n\nnull\u662f\u6211\u4eec\u6a21\u62df\u7684\u7a7a\u8282\u70b9~~\u5176\u5b9e\u6ca1\u4ec0\u4e48\u7528~~\u3002\n\nbc\u662f\u5185\u5b58\u56de\u6536\u503c\uff0cbc_top\u662f\u56de\u6536\u6c60\u9876\u3002\n\n\u521b\u5efa\u4e00\u4e2a\u65b0\u8282\u70b9\u7684\u6d41\u7a0b\u3002\u3002\u3002\u5176\u5b9e\u6211\u89c9\u5f97\u4e0d\u8bf4\u4f60\u4eec\u4e5f\u770b\u5f97\u61c2\uff0c\u90a3\u5c31\u4e0d\u8bf4\u4e86\u3002\n\n____\n\n### \u91cd\u6784\u5b50\u6811\n\n\u8fd9\u662f\u6700\u6838\u5fc3\u7684\u90e8\u5206\uff0c\u5176\u6839\u672c\u601d\u8def\u662f\u8bb2\u6811\u62cd\u6210\u4e00\u4e2a\u6709\u5e8f\u6570\u5217\uff0c\u7136\u540e\u518d\u91cd\u65b0\u5efa\u6811\u3002\n\n\u6392\u6210\u6709\u5e8f\u6570\u5217\u505a\u4e00\u4e2a\u4e2d\u5e8f\u904d\u5386\u5c31\u53ef\u4ee5\u4e86\uff0c\u53ea\u6709\u5b58\u5728\u7684\u8282\u70b9\u624d\u52a0\u5165\u6570\u5217\u3002\n\n\u5efa\u6811\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u6bcf\u6b21\u6570\u7ec4\u6298\u534a\uff0c\u5206\u6cbb\u5efa\u5373\u53ef\u3002\n\n```cpp\nvoid Travel(Node* p,vector<Node*>& x){\n\tif(p==null)return;\n\tTravel(p->ch[0],x);\n\tif(p->exist)x.push_back(p);\n\telse bc[bc_top++]=p;\n\tTravel(p->ch[1],x);\n}\nNode* Divide(vector<Node*>& x,int l,int r){\n\tif(l>=r)return null;\n\tint mid=(l+r)>>1;\n\tNode* p=x[mid];\n\tp->ch[0]=Divide(x,l,mid);\n\tp->ch[1]=Divide(x,mid+1,r);\n\tp->pushup();\n\treturn p;\n}\nvoid Rebuild(Node*& p){\n\tvector<Node*> x;\n\tx.clear();\n\tTravel(p,x);\n\tp=Divide(x,0,x.size());\n}\n```\n\n\u6570\u7ec4\u4f60\u7528\u5565\u90fd\u884c\uff0c\u7531\u4e8e\u61d2\u8fd9\u91cc\u7528vector\u3002\n\n\u5b9e\u73b0\u6ca1\u6709\u4ec0\u4e48\u597d\u8bb2\u7684\u3002\n\n____\n\n### \u63d2\u5165\u8282\u70b9\n\n\u6211\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u63d2\u5165\u8282\u70b9\u662f\u66ff\u7f6a\u7f8a\u6811\u6700\u6bd2\u7624\u7684\u5730\u65b9\uff08\u6307\u9488\u4e0d\u53cb\u597d\uff09\u3002\n\n\u63d2\u5165\u8282\u70b9\u5728\u63d2\u5165\u7684\u540c\u65f6\uff0c\u4f1a\u8fd4\u56de\u6307\u5411\u6307\u5411\u4e0d\u5e73\u8861\u7684\u8282\u70b9\u7684\u6307\u9488\u7684\u6307\u9488\u3002\n\n\u4e0a\u9762\u90a3\u53e5\u8bdd\u5c31\u662f\u6211\u6240\u8c13\u7684\u6bd2\u7624\uff08\u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u6bd2\u7624\uff09\uff0c\u7b2c\u4e00\u6b21\u53ef\u80fd\u4f1a\u88ab\u7ed5\u5730\u6655\u5934\u8f6c\u5411\u3002\n\n\u4e4b\u6240\u4ee5\u8981\u8fd4\u56de\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u6240\u6709\u64cd\u4f5c\u90fd\u9700\u8981\u6307\u9488\u3002\n\n```cpp\nNode** Insert(Node*& p,int val){\n\tif(p==null){\n\t\tp=newNode(val);\n\t\treturn &null;\n\t}\n\tp->size++,p->cover++;\n\tNode** res=Insert(p->ch[val>=p->val],val);\n\tif(p->isbad())res=&p;\n\treturn res;\n}\n```\n\n\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u7a7a\u8282\u70b9\uff0c\u90a3\u5c31\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u8fd4\u56de\u7a7a\u8282\u70b9\uff08\u65b0\u7684\u8282\u70b9\u4e0d\u4f1a\u5bfc\u81f4\u6811\u4e0d\u5e73\u8861\uff09\u3002\n\n\u5426\u5219\u6839\u636e\u63d2\u5165\u8282\u70b9\u7684\u503c\u9012\u5f52\u5de6\u53f3\u513f\u5b50\u3002\n\n\u7136\u540e\u5047\u5982\u5f53\u524d\u8282\u70b9\u5b50\u6811\u4e0d\u5e73\u8861\uff0c\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u3002\n\n____\n\n### \u5220\u9664\u64cd\u4f5c\n\n\u5220\u9664\u64cd\u4f5c\u5f88\u6c34\uff0c\u6ca1\u4ec0\u4e48\u6280\u672f\u542b\u91cf\u3002\n\n```cpp\nvoid Erase(Node*& p,int k){\n\tp->size--;\n\tint offset=p->ch[0]->size+p->exist;\n\tif(p->exist&&offset==k){\n\t\tp->exist=false;\n\t}else{\n\t\tif(k<=offset)Erase(p->ch[0],k);\n\t\telse Erase(p->ch[1],k-offset);\n\t}\n}\n```\n\n____\n\n### \u521d\u59cb\u5316\n\n\u987a\u5e26\u4e00\u63d0\uff0c\u4ece\u672c\u51fd\u6570\u5f00\u59cb\u662f\u975e\u5de5\u5177\u51fd\u6570\uff08\u4e4b\u524d\u7684\u90fd\u662fprotected\uff0c\u5e76\u975e\u5916\u90e8\u76f4\u63a5\u8c03\u7528\u7684\u51fd\u6570\uff09\u3002\n\n```cpp\nvoid init(){\n\ttail=mempool;\n\tnull=tail++;\n\tnull->ch[0]=null->ch[1]=null;\n\tnull->cover=null->size=null->exist=0;\n\troot=null;\n\tbc_top=0;\n}\n```\n\n\u521d\u59cb\u5316\u5c31\u641e\u4e00\u4e2a\u7a7a\u8282\u70b9\uff0c\u7136\u540e\u6ca1\u4e86\u3002\n\n____\n\n### \u5176\u4ed6\u64cd\u4f5c\n\n\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u5efa\u7acb\u5728\u5de5\u5177\u51fd\u6570\u7684\u57fa\u7840\u4e0a\uff0cYY\u51fa\u6765\u7684\u3002\n\n\u8981\u6ce8\u610f\u63d2\u5165\u548c\u5220\u9664\u90fd\u5f97\u68c0\u67e5\u6811\u662f\u5426\u5e73\u8861\u3002\n\n\u7136\u540e\u67e5\u8be2rank\u548c\u7b2cK\u5927\u90fd\u662f\u5faa\u73af\u5b9e\u73b0\uff0c\u601d\u8def\u5f88\u6734\u5b9e\u3002\n\n```cpp\nvoid insert(int val){\n\tNode** res=Insert(root,val);\n\tif(*res!=null)Rebuild(*res);\n}\nint rank(int val){\n\tNode* now=root;\n\tint ans=1;\n\twhile(now!=null){\n\t\tif(now->val>=val)now=now->ch[0];\n\t\telse{\n\t\t\tans+=now->ch[0]->size+now->exist;\n\t\t\tnow=now->ch[1];\n\t\t}\n\t}\n\treturn ans;\n}\nint kth(int val){\n\tNode* now=root;\n\twhile(now!=null){\n\t\tif(now->ch[0]->size+1==val&&now->exist)return now->val;\n\t\tif(now->ch[0]->size>=val)now=now->ch[0];\n\t\telse val-=now->ch[0]->size+now->exist,now=now->ch[1];\n\t}\n}\nvoid erase(int k){\n\tErase(root,rank(k));\n\tif(root->size<root->cover*alpha)Rebuild(root);\n}\n```\n\n____\n\n### \u4ee3\u7801\n\nAC\u4ee3\u7801~~\u653e\u5fc3\u4f7f\u7528~~\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nnamespace Scapegoat{\n\tconst int N=100100;\n\tconst double alpha = 0.75;\n\tstruct Node{\n\t\tint val,size,cover;\n\t\tbool exist;\n\t\tNode* ch[2];\n\t\tvoid pushup(){this->size=ch[0]->size+ch[1]->size+(int)exist,this->cover=ch[0]->cover+ch[1]->cover+1;}\n\t\tint isbad(){return (ch[0]->cover>this->cover*alpha+5)||(ch[1]->cover>this->cover*alpha+5);}\n\t};\n\tstruct Tree{\n\t\tprotected:\n\t\t\tNode mempool[N];\n\t\t\tNode *tail,*null,*root;\n\t\t\tNode *bc[N];\n\t\t\tint bc_top;\n\t\t\tNode* newNode(int val){\n\t\t\t\tNode* p=bc_top?bc[--bc_top]:tail++;\n\t\t\t\tp->ch[0]=p->ch[1]=null;\n\t\t\t\tp->size=p->cover=p->exist=1;\n\t\t\t\tp->val=val;\n\t\t\t\treturn p;\n\t\t\t}\n\t\t\tvoid Travel(Node* p,vector<Node*>& x){\n\t\t\t\tif(p==null)return;\n\t\t\t\tTravel(p->ch[0],x);\n\t\t\t\tif(p->exist)x.push_back(p);\n\t\t\t\telse bc[bc_top++]=p;\n\t\t\t\tTravel(p->ch[1],x);\n\t\t\t}\n\t\t\tNode* Divide(vector<Node*>& x,int l,int r){\n\t\t\t\tif(l>=r)return null;\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tNode* p=x[mid];\n\t\t\t\tp->ch[0]=Divide(x,l,mid);\n\t\t\t\tp->ch[1]=Divide(x,mid+1,r);\n\t\t\t\tp->pushup();\n\t\t\t\treturn p;\n\t\t\t}\n\t\t\tvoid Rebuild(Node*& p){\n\t\t\t\tstatic vector<Node*> x;\n\t\t\t\tx.clear();\n\t\t\t\tTravel(p,x);\n\t\t\t\tp=Divide(x,0,x.size());\n\t\t\t}\n\t\t\tNode** Insert(Node*& p,int val){\n\t\t\t\tif(p==null){\n\t\t\t\t\tp=newNode(val);\n\t\t\t\t\treturn &null;\n\t\t\t\t}\n\t\t\t\tp->size++,p->cover++;\n\t\t\t\tNode** res=Insert(p->ch[val>=p->val],val);\n\t\t\t\tif(p->isbad())res=&p;\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\tvoid Erase(Node*& p,int k){\n\t\t\t\tp->size--;\n\t\t\t\tint offset=p->ch[0]->size+p->exist;\n\t\t\t\tif(p->exist&&offset==k){\n\t\t\t\t\tp->exist=false;\n\t\t\t\t}else{\n\t\t\t\t\tif(k<=offset)Erase(p->ch[0],k);\n\t\t\t\t\telse Erase(p->ch[1],k-offset);\n\t\t\t\t}\n\t\t\t}\n\t\tpublic:\n\t\t\tvoid init(){\n\t\t\t\ttail=mempool;\n\t\t\t\tnull=tail++;\n\t\t\t\tnull->ch[0]=null->ch[1]=null;\n\t\t\t\tnull->cover=null->size=null->exist=0;\n\t\t\t\troot=null;\n\t\t\t\tbc_top=0;\n\t\t\t}\n\t\t\tTree(){\n\t\t\t\tinit();\n\t\t\t}\n\t\t\tvoid insert(int val){\n\t\t\t\tNode** res=Insert(root,val);\n\t\t\t\tif(*res!=null)Rebuild(*res);\n\t\t\t}\n\t\t\tint rank(int val){\n\t\t\t\tNode* now=root;\n\t\t\t\tint ans=1;\n\t\t\t\twhile(now!=null){\n\t\t\t\t\tif(now->val>=val)now=now->ch[0];\n\t\t\t\t\telse{\n\t\t\t\t\t\tans+=now->ch[0]->size+now->exist;\n\t\t\t\t\t\tnow=now->ch[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn ans;\n\t\t\t}\n\t\t\tint kth(int val){\n\t\t\t\tNode* now=root;\n\t\t\t\twhile(now!=null){\n\t\t\t\t\tif(now->ch[0]->size+1==val&&now->exist)return now->val;\n\t\t\t\t\tif(now->ch[0]->size>=val)now=now->ch[0];\n\t\t\t\t\telse val-=now->ch[0]->size+now->exist,now=now->ch[1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tvoid erase(int k){\n\t\t\t\tErase(root,rank(k));\n\t\t\t\tif(root->size<root->cover*alpha)Rebuild(root);\n\t\t\t}\n\t};\n}\nusing namespace Scapegoat;\nTree tree;\nint main(){\n\tint n,op,x;\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tscanf(\"%d%d\",&op,&x);\n\t\tif(op==1)tree.insert(x);\n        if(op==2)tree.erase(x);\n        if(op==3)printf(\"%d\\n\",tree.rank(x));\n        if(op==4)printf(\"%d\\n\",tree.kth(x));\n        if(op==5)printf(\"%d\\n\",tree.kth(tree.rank(x)-1));\n        if(op==6)printf(\"%d\\n\",tree.kth(tree.rank(x+1)));\n\t}\n\treturn 0;\n}\n```\n\n\u7136\u540e\u5c31\u6ca1\u4e86\u3002\n___\n\n### \u540e\u8bb0\n\n\u6709\u4e00\u5929\u6211\u4e00\u4e2aZZ\u540c\u5b66\u8ddf\u6211\u8bf4\u66ff\u7f6a\u7f8a\u6811\u4e43\u81f3\u5e73\u8861\u6811**\u63d0\u9ad8\u7ec4\u4e0d\u8003**\u3002\n\no_0??WTF?????????",
        "postTime": 1533477320,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "## Question Description\n```\n\t\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784, \u4f7f\u5176\u80fd\u591f\u8fdb\u884c\u63d2\u5165\u6570\u636ex\u3001\u5220\u9664\u6570\u636ex\u3001\u67e5\u8be2\u6570\u636ex\u524d\u9a71\u4e0e\u540e\u7ee7\u3001\u67e5\u8be2\u6570\u636ex\u6392\u540d\u3001\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570\u636e\u7b49\u64cd\u4f5c. ( \u6570\u636e\u53ef\u80fd\u91cd\u590d )\n```\n---\n### Treap\n\t\tTreap = Tree + Heap \u03a3(\u3063 \u00b0\u0414 \u00b0;)\u3063\n\n#### Step 1 \" Tree \"\n\t\t\u4e0a\u9762\u7684\u7b49\u5f0f\u8868\u660e\u4e86 Treap \u540d\u5b57\u7684\u7531\u6765\u548c\u5b83\u7684\u6784\u6210.\n        \u90a3\u4e48\u6211\u4eec\u5148\u4ece Tree \u5f00\u59cb. \u8fd9\u91cc\u7684 Tree \u6307\u7684\u662f BST (Binary Search Tree, \u4e8c\u53c9\u67e5\u627e\u6811, \u53c8\u79f0\u4e8c\u53c9\u6392\u5e8f\u6811\u7b49).\n        \n        \u4e8c\u53c9\u67e5\u627e\u6811\u662f\u8fd9\u6837\u4e00\u79cd\u6570\u636e\u7ed3\u6784:\n        \t0. \u4e00\u9897\u7a7a\u6811\u6216\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\u7684\u4e8c\u53c9\u6811.\n        \t1. \u6839\u8282\u70b9\u5de6\u5b50\u6811\u975e\u7a7a\u5219\u6839\u8282\u70b9\u7684\u503c\u5927\u4e8e\u5176\u5de6\u5b50\u6811\u6240\u6709\u8282\u70b9\u7684\u503c.\n            2. \u6839\u8282\u70b9\u53f3\u5b50\u6811\u975e\u7a7a\u5219\u6839\u8282\u70b9\u7684\u503c\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u6240\u6709\u8282\u70b9\u7684\u503c.\n            3. \u5176\u5de6\u53f3\u5b50\u6811\u4e5f\u5747\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811.\n            \n        \u5b83\u53c8\u4ec0\u4e48\u7528\u5462? \u5b83\u53ef\u4ee5\u5728 logn \u590d\u6742\u5ea6\u5185\u5b9e\u73b0\u4e0a\u8ff0\u64cd\u4f5c:\n        \t1. \u63d2\u5165\u6570\u636e x:\n            \ta. \u82e5 x \u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u503c, \u5219\u5411\u53f3\u5b50\u8282\u70b9\u9012\u5f52.\n                b. \u82e5 x \u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u503c, \u5219\u5411\u5de6\u5b50\u8282\u70b9\u9012\u5f52.\n                c. \u82e5\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a, \u5219\u63d2\u5165\u6570\u636e.\n                d. \u82e5\u5f53\u524d\u8282\u70b9\u503c\u7b49\u4e8e x ( \u91cd\u590d\u6570\u636e ), \u5219\u5f53\u524d\u8282\u70b9\u7684 cnt++ ( \u8ba1\u6570\u5668 ).\n                \n            2. \u5220\u9664\u6570\u636e x:\n            \ta. \u82e5 x \u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u503c, \u5219\u5411\u53f3\u5b50\u8282\u70b9\u9012\u5f52.\n                b. \u82e5 x \u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u503c, \u5219\u5411\u5de6\u5b50\u8282\u70b9\u9012\u5f52.\n                c. \u82e5\u5f53\u524d\u8282\u70b9\u503c\u4e3a x, \u4e14\u5176 cnt \u7b49\u4e8e 1, \u5219\u5220\u9664.\n                \t* \u5220\u9664\u9700\u5206\u60c5\u51b5\u8ba8\u8bba:\n                    \t1) \u5f85\u5220\u9664\u8282\u70b9\u4e3a\u53f6\u5b50\u8282\u70b9, \u5219\u76f4\u63a5\u5220\u9664.\n                        2) \u5f85\u5220\u9664\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9, \u5219\u5220\u9664\u8be5\u8282\u70b9, \u5e76\u5c06\u5176\u552f\u4e00\u5b50\u8282\u70b9\u63d0\u81f3\u539f\u5f85\u5220\u9664\u8282\u70b9\u7684\u4f4d\u7f6e.\n                        3) \u5f85\u5220\u9664\u8282\u70b9\u6709\u4e24\u4e2a\u5b50\u8282\u70b9, \u5219\u4ee5\u5176\u540e\u7ee7 ( \u5373\u5176\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c ) \u4ee3\u66ff\u5b83, \u5e76\u5220\u9664\u5176\u540e\u7ee7 ( \u9012\u5f52 ).\n                d. \u82e5\u5f53\u524d\u8282\u70b9\u503c\u4e3a x, \u4e14\u5176 cnt \u5927\u4e8e 1, \u5219 cnt-- \u5373\u53ef.\n                \n            3. \u67e5\u8be2 x \u7684\u524d\u9a71\u540e\u7ee7:\n            \t\u524d\u9a71 = x \u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c;\n                \u540e\u7ee7 = x \u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c.\n                \u5148\u67e5\u8be2 x, \u518d\u5411\u4e0b\u67e5\u8be2\u4e4b\u5373\u53ef.\n            \t\n            4. \u67e5\u8be2 x \u7684\u6392\u540d:\n            \t\u5411\u4e0b\u67e5\u8be2 x, \u627e\u5230\u4e4b\u524d\u7d2f\u52a0\u6bcf\u6b21\u5de6\u5b50\u6811\u7684 size ( \u5373\u5b50\u6811\u8282\u70b9\u4e2a\u6570 ) \u548c\u5f53\u524d\u8282\u70b9\u7684 cnt, \u8fd9\u6837\u76f8\u5f53\u4e8e\u7d2f\u52a0\u4e86\u5c0f\u4e8e x \u7684\u5143\u7d20\u7684\u4e2a\u6570\u548c\u4e4b\u524d\u5143\u7d20\u7684\u91cd\u590d\u4e2a\u6570, \u8fd9\u6837\u627e\u5230 x \u5219\u67e5\u8be2\u5230\u4e86\u6392\u540d.\n            \t\n            5. \u67e5\u8be2\u6392\u540d\u4e3a x \u7684\u6570\u636e:\n            \ta. \u82e5 x \u5c0f\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d\u5de6\u5b50\u6811\u7684 size, \u5219\u5411\u5de6\u5b50\u6811\u9012\u5f52.\n                b. \u82e5 x \u5927\u4e8e\u5f53\u524d\u5de6\u5b50\u6811\u7684 size + cnt[x], \u5219\u5411\u53f3\u5b50\u6811\u9012\u5f52, \u5e76\u4e14 x -= size[x.left] + cnt[x] ( \u5728\u4e0b\u4e00\u5c42\u9012\u5f52\u7684\u5b50\u6811\u4e2d\u7684*\u76f8\u5bf9*\u6392\u540d\u9700\u8981\u51cf\u53bb\u4e4b\u524d\u7684\u5de6\u5b50\u6811\u5927\u5c0f\u548c\u8be5\u8282\u70b9\u7684\u4e2a\u6570 ), \u5e76\u548c\u4e4b\u524d\u4e00\u6837 x \u8981\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\u548c\u91cd\u590d\u8282\u70b9\u4e2a\u6570 ( size + cnt ).\n                c. \u82e5 x \u5c0f\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d\u5de6\u5b50\u6811\u5927\u5c0f\u52a0\u4e0a\u91cd\u590d\u8282\u70b9\u4e2a\u6570, \u90a3\u4e48\u5df2\u7ecf\u67e5\u8be2\u5230\u7b54\u6848, \u8fd4\u56de\u5373\u53ef.\n                \n*** \u63d0\u793a: \u6bcf\u6b21\u8bb0\u5f97\u7ef4\u62a4\u8282\u70b9\u7684 size! \u53ef\u4ee5\u4e13\u95e8\u5199\u4e00\u4e2a update(x) \u51fd\u6570\u7528\u4ee5\u66f4\u65b0 size.**\n            \n\t\t\u4f46\u662f\u5982\u679c\u6811\u975e\u5e38\u7684\"\u4e0d\u5e73\u8861\", \u751a\u81f3\u53d8\u6210\u4e86\u4e00\u6761\u94fe, \u90a3\u4e48\u64cd\u4f5c\u590d\u6742\u5ea6\u5c31\u4f1a\u7531 O(logn) \u9000\u5316\u6210 O(n), \u975e\u5e38\u53ef\u6015(\uffe3\u03b5(#\uffe3). \u600e\u4e48\u529e\u5462? \u90a3\u5c31\u628a\u6811\u5f04\u5e73\u8861\u561b~\n\n#### Step 2 \" Heap \"\n\t\t\u7b49\u5f0f\u91cc\u51fa\u73b0\u7684 Heap ( \u5806 ) \u662f\u4ec0\u4e48\u9b3c\u5462?\n        \u8fd9\u5c31\u662f Treap \u7684\u7384\u5999\u4e4b\u5904 (bushi\n        \n        \u600e\u4e48\u505a\u5462? \u6211\u4eec\u4f1a\u7ed9\u539f\u5148\u7684 BST \u4e0a\u6bcf\u4e2a\u8282\u70b9\u52a0\u4e0a\u4e00\u4e2a key \u503c, \u7136\u540e\u7528\u5947\u5f02\u7684\u65b9\u6cd5\u8c03\u6574\u8fd9\u9897 BST \u4f7f\u5176 key \u503c\u6ee1\u8db3\u5806\u7684\u6027\u8d28 ( \u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811, \u4ec5\u6307\u6bcf\u4e2a\u8282\u70b9\u7684 key \u503c\u5747\u5c0f\u4e8e\u5176\u5b50\u8282\u70b9 ). \u8fd9\u4e2a key \u5462\u662f\u968f\u4fbf\u7ed9\u7684 (\u5927\u968f\u673a\u6570), \u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u751f\u6210 key \u7684\u5747\u5300\u6027, \u82e5\u662f\u5176\u6ee1\u8db3\u4e0a\u8ff0\u6027\u8d28\u5c31\u53ef\u4ee5\u8fbe\u5230\u5c3d\u91cf\u5e73\u8861\u7684\u6761\u4ef6.\n        \n        \u95ee\u9898\u6765\u4e86, \u600e\u4e48\u8fdb\u884c\u4e0a\u9762\u8bf4\u7684\u7384\u5b66\u8c03\u6574\u5462?\n\n#### Step 3 \u65cb\u8f6c\u64cd\u4f5c\n\t\tBST \u4e0a\u8282\u70b9\u53ef\u4ee5\u8fdb\u884c\u67d0\u4e9b\u795e\u5947\u7684\u65cb\u8f6c\u6765\u8c03\u6574\u6811\u7684\u5f62\u72b6\u5e76\u7ef4\u6301\u5176 BST \u7684\u6027\u8d28.\n        \u65cb\u8f6c\u6709\u5de6\u65cb\u548c\u53f3\u65cb\u4e24\u79cd:\n        \n![](https://cdn.luogu.com.cn/upload/pic/22968.png)\n![](https://cdn.luogu.com.cn/upload/pic/22969.png)\n\n\t\t\u524d\u56fe\u8f6c\u81f3\u540e\u56fe\u662f\u53f3\u65cb, \u79f0\u4e3a zig;\n        \u540e\u56fe\u8f6c\u81f3\u524d\u56fe\u662f\u5de6\u65cb, \u79f0\u4e3a zag.\n        \u53ef\u4ee5\u89c2\u5bdf\u5230\u65cb\u8f6c\u524d\u540e BST \u6027\u8d28\u4e0d\u53d8.\n        \n        \u6211\u4eec\u5c31\u5c06\u5229\u7528\u65cb\u8f6c\u7684\u57fa\u672c\u64cd\u4f5c\u6765\u5b9e\u73b0\u8c03\u6574.\n\n#### Step 4\n\t\tBST \u5728\u52a0\u5165 key \u4e4b\u540e\u8fd8\u662f\u4e00\u9897 BST, \u90a3\u4e48\u4e4b\u524d\u7684\u57fa\u672c\u64cd\u4f5c\u5176\u5b9e\u53d8\u5316\u4e0d\u5927:\n        \n        1. \u63d2\u5165\u6570\u636e x:\n        \ta. \u82e5 x \u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u503c, \u5219\u5411\u53f3\u5b50\u8282\u70b9\u9012\u5f52, \u56de\u6eaf\u65f6\u5224\u65ad\u5176\u53f3\u5b50\u8282\u70b9\u7684 key \u662f\u5426\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684 key, \u662f\u5219\u5de6\u65cb ( \u5c06 key \u8f83\u5c0f\u7684\u8282\u70b9\u8f6c\u5230\u4e0a\u9762\u6765 ).\n            b. \u82e5 x \u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u503c, \u5219\u5411\u5de6\u5b50\u8282\u70b9\u9012\u5f52, \u56de\u6eaf\u65f6\u5224\u65ad\u5176\u5de6\u5b50\u8282\u70b9\u7684 key \u662f\u5426\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684 key, \u662f\u5219\u53f3\u65cb ( \u5c06 key \u8f83\u5c0f\u7684\u8282\u70b9\u8f6c\u5230\u4e0a\u9762\u6765 ).\n            c. \u82e5\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a, \u5219\u63d2\u5165\u6570\u636e.\n            d. \u82e5\u5f53\u524d\u8282\u70b9\u503c\u7b49\u4e8e x ( \u91cd\u590d\u6570\u636e ), \u5219\u5f53\u524d\u8282\u70b9\u7684 cnt++ ( \u8ba1\u6570\u5668 ).\n            \n            \u53ef\u4ee5\u770b\u5230\u53ea\u662f\u591a\u4e86\u56de\u6eaf\u65f6\u7684\u65cb\u8f6c\u64cd\u4f5c, \u56e0\u4e3a\u5728\u63d2\u5165\u8282\u70b9\u540e, \u56e0\u4e3a\u88ab\u63d2\u5165\u8282\u70b9\u7684 key \u968f\u673a, \u53ef\u80fd\u4f1a\u6270\u4e71\u6811\u7684\u5806\u6027\u8d28, \u6240\u4ee5\u8981\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c, \u53ef\u4ee5\u505a\u5230\u5c06 key \u5c0f\u7684\u8282\u70b9\u8f6c\u81f3\u4e0a\u65b9, \u4ece\u800c\u7ef4\u62a4\u5806\u6027\u8d28 ( \u56e0\u4e3a\u65cb\u8f6c\u64cd\u4f5c\u5bf9\u88ab\u65cb\u8f6c\u70b9\u66f4\u4e0b\u65b9\u7684\u5b50\u6811\u6ca1\u5f71\u54cd, \u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u65cb\u8f6c\u4f1a\u5f71\u54cd\u4e4b\u524d\u5b50\u6811\u7684\u5806\u6027\u8d28 ).\n        \n        2. \u5220\u9664\u6570\u636e x:\n        \t* \u8fd9\u91cc\u6709\u4e9b\u533a\u522b:\n            a. \u82e5 x \u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u503c\u5219\u5411\u5de6\u9012\u5f52.\n            b. \u82e5 x \u5927\u4e8e\u5f53\u524d\u8282\u70b9\u503c\u5219\u5411\u53f3\u9012\u5f52.\n            c. \u82e5 x \u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u503c\u4e14\u5176 cnt > 1 \u5219 cnt--, \u7ed3\u675f.\n            d. \u82e5 x \u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u503c\u4e14\u5176 cnt == 1 \u5219:\n            \t1) \u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\u6216\u8005\u5f53\u524d\u8282\u70b9 key \u503c\u5c0f\u4e8e\u5176\u5de6\u5b50\u8282\u70b9 key \u503c, \u5219\u53f3\u65cb\u5e76\u5411\u53f3\u9012\u5f52.\n                2) \u5426\u5219\u5de6\u65cb\u5e76\u5411\u5de6\u9012\u5f52.\n                * \u610f\u601d\u5c31\u662f\u628a\u8981\u5220\u9664\u7684\u8282\u70b9\u901a\u8fc7\u4e0d\u5f71\u54cd\u5806\u6027\u8d28\u7684\u65b9\u5f0f\u8f6c\u5230\u6811\u7684\u6700\u4e0b\u9762\u518d\u76f4\u63a5\u5220\u9664.\n        \n        3. \u67e5\u8be2 x \u7684\u524d\u9a71\u540e\u7ee7: \u4e0e BST \u4e00\u81f4.\n        4. \u67e5\u8be2 x \u7684\u6392\u540d: \u4e0e BST \u4e00\u81f4.\n        5. \u67e5\u8be2\u6392\u540d\u4e3a x \u7684\u6570\u636e: \u4e0e BST \u4e00\u81f4.\n\n### Source\n```cpp\n#include<iostream>\n#include<stdio.h>\nusing namespace std;\n\ninline void _read(int &x){\n    int _num=0;\n    short _fac=1;\n    char _peek=getchar();\n    while(_peek<'0'||_peek>'9'){if(_peek=='-')_fac=-1;_peek=getchar();}\n    while(_peek>='0'&&_peek<='9')_num=_num*10+_peek-'0',_peek=getchar();\n    x=_fac*_num;\n}\n\ntemplate<typename Ty>\n    class Treap{\n        #define MAXNUM 100005\n        #define SEED 233\n        private:int _total;\n        \n        private:inline int _random(int _seed,int _up){\n            static int __seed=_seed;\n    \t\treturn __seed=(int)__seed*482711LL%_up;\n        }\n        \n        private:struct _treap_node{\n            long long val;\n            int key,left,right,size,count;\n        }data[MAXNUM];\n        \n        public:inline void _init(){\n            _total=0;\n            return;\n        }\n        \n        private:inline int _new_node(Ty _val){\n            data[++_total].val=_val;\n            data[_total].key=_random(SEED,MAXNUM*10000);\n            data[_total].size=1;\n            data[_total].count=1;\n            return _total;\n        } \n        \n        private:inline void _update(int x){\n            data[x].size=data[data[x].left].size+data[data[x].right].size+data[x].count;\n        }\n        \n        private:inline void _zag(int &x){\n            int y=data[x].right;\n            data[x].right=data[y].left;\n            data[y].left=x;\n            data[y].size=data[x].size;\n            _update(x);\n            x=y;\n        }\n        \n        private:inline void _zig(int &x){\n            int y=data[x].left;\n            data[x].left=data[y].right;\n            data[y].right=x;\n            data[y].size=data[x].size;\n            _update(x);\n            x=y;\n        }\n        \n        public:inline void _insert(Ty x,int &p){\n            if(!p){\n                p=_new_node(x);\n                return;\n            }\n            if(x==data[p].val){\n                data[p].count++;\n            }else if(x<=data[p].val){\n                _insert(x,data[p].left);\n                if(data[data[p].left].key<data[p].key)_zig(p);\n            }else{\n                _insert(x,data[p].right);\n                if(data[data[p].right].key<data[p].key)_zag(p);\n            }\n            _update(p);\n        }\n        \n        public:inline void _delete(Ty x,int &p){\n            if(!p)return;\n            if(data[p].val==x){\n                if(data[p].count>1){\n                    data[p].count--;\n                    _update(p);\n                    return;\n                }\n                if(data[p].left||data[p].right){\n                    if(!data[p].right||data[data[p].left].key>data[data[p].right].key){\n                        _zig(p);\n                        _delete(x,data[p].right);\n                    }else{\n                        _zag(p);\n                        _delete(x,data[p].left);\n                    }\n                    _update(p);\n                }else{\n                    p=0;\n                }\n                return;\n            }else if(x<data[p].val){\n                _delete(x,data[p].left);\n                _update(p);\n            }else{\n                _delete(x,data[p].right);\n                _update(p);\n            }\n        }\n        \n        public:inline int _get_rank(Ty x,int p){\n            if(!p)return -1;\n            if(x==data[p].val){\n                return data[data[p].left].size+1;\n            }else if(x<data[p].val){\n                return _get_rank(x,data[p].left); \n            }else{\n                return _get_rank(x,data[p].right)+data[data[p].left].size+data[p].count;\n            }\n        }\n        \n        public:inline int _get_value(int x,int p){\n            if(!p)return -1;\n            if(x<=data[data[p].left].size){\n                return _get_value(x,data[p].left);\n            }else if(x<=data[data[p].left].size+data[p].count){\n                return data[p].val;\n            }else{\n                return _get_value(x-data[data[p].left].size-data[p].count,data[p].right);\n            }\n        }\n        \n        public:inline int _get_previous(int p,int root){\n            int v=root,t;\n            while(v){\n                if(data[v].val<p){\n                    t=data[v].val;\n                    v=data[v].right;\n                }else{\n                    v=data[v].left;\n                }\n            }\n            return t;\n        }\n        \n        public:inline int _get_succeed(int p,int root){\n            int v=root,t;\n            while(v){\n                if(data[v].val>p){\n                    t=data[v].val;\n                    v=data[v].left;\n                }else{\n                    v=data[v].right;\n                }\n            }\n            return t;\n        }\n    };\n\n#define INSERT 1\n#define DELETE 2\n#define NUM2RANK 3\n#define RANK2NUM 4\n#define PREVIOUS 5\n#define SUCCEED 6\n\nint n,r=0;\nTreap<int> tree;\n\nint main(){\n    tree._init();\n    \n    _read(n);\n    for(int i=1;i<=n;i++){\n        int x,y;\n        _read(x),_read(y);\n        if(x==INSERT){\n            tree._insert(y,r);\n            if(!r)r=1;\n        }else if(x==DELETE){\n            tree._delete(y,r);\n        }else if(x==NUM2RANK){\n            printf(\"%d\\n\",tree._get_rank(y,r));\n        }else if(x==RANK2NUM){\n            printf(\"%d\\n\",tree._get_value(y,r));\n        }else if(x==PREVIOUS){\n            printf(\"%d\\n\",tree._get_previous(y,r));\n        }else if(x==SUCCEED){\n            printf(\"%d\\n\",tree._get_succeed(y,r));\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1531305704,
        "uid": 30153,
        "name": "Gralerfics",
        "ccfLevel": 0,
        "title": "\u3010Data Structure\u3011Treap"
    },
    {
        "content": "**\u6d1b\u8c37\u7684\u65b0\u6570\u636e\u5b97\u6cd5\u6811\u4f1a\u88ab\u5361\u6389\u4e00\u4e2a\u70b9**\n\n\u5b97\u6cd5\u6811\u662f\u4e00\u79cd\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e2a\u4eba\u7406\u89e3\u6bd4\u8f83\u50cf\u7ebf\u6bb5\u6811\u3002\n\n\u5b83\u652f\u6301\u4ee5\u4e0b6\u79cd\u529f\u80fd\n\n1. \u63d2\u5165\u4e00\u4e2a\u8282\u70b9\n2. \u5220\u9664\u4e00\u4e2a\u8282\u70b9\n3. \u6c42x\u7684\u6392\u540d\n3. \u6c42\u6392\u540d\u4e3ax\u7684\u6570\n2. \u6c42x\u7684\u524d\u9a71\n1. \u6c42x\u7684\u540e\u7ee7\n\n\u5c31\u662f\u8bf4\u5b83\u652f\u6301\u5e73\u8861\u6811\u7684\u57fa\u672c\u529f\u80fd(\u542c\u8bf4\u9664\u4e86LCT\u90fd\u80fd\u505a)\n\n\u6b64\u5916\uff0c\u5b83\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\n\n1. \u662f\u4e8c\u53c9\u6811\n2. \u53f6\u8282\u70b9\u5b58\u7684\u662f\u6570\n3. \u975e\u53f6\u8282\u70b9\u5b58\u7684\u662f\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\u7684\u6700\u5927\u503c\n2. \u975e\u53f6\u8282\u70b9\u5de6\u5b50\u6811\u7684\u503c\u90fd\u6bd4\u53f3\u5b50\u6811\u7684\u503c\u5c0f\n1. \u975e\u53f6\u8282\u70b9\u5fc5\u6709\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\n\n\u6bd4\u5982\u8fd9\u6837\u7684\u4e00\u68f5\u5b97\u6cd5\u6811\n\n![01.png](https://zeromaton.github.io/upload/image/20180611/01.png)\n\n\u4e0b\u9762\u7528\u5b83\u6765\u4ecb\u7ecd\u5b97\u6cd5\u6811\u7684\u64cd\u4f5c\n\n## \u64cd\u4f5c\n### insert \u63d2\u5165\n\n\u5728\u6811\u4e0a\u63d2\u51656:\n1. \u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u53d1\u73b0\u5de6\u513f\u5b505<6\uff0c\u4e8e\u662f\u5411\u53f3\u9012\u5f52\n2. \u53d1\u73b0\u8be5\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u4e8e\u662f\u5728\u8282\u70b9\u4e0b\u65b9\u518d\u5efa\u4e24\u4e2a\u65b0\u8282\u70b9\n3. \u8be5\u8282\u70b9\u539f\u6765\u7684\u503c9>6\uff0c\u6240\u4ee5\u5c069\u653e\u5230\u53f3\u513f\u5b50\uff0c6\u653e\u5230\u5de6\u513f\u5b50\n4. \u56de\u6eaf\u66f4\u65b0\n\n\n\u6548\u679c\u5982\u56fe\n\n![02.png](https://zeromaton.github.io/upload/image/20180611/02.png)\n\n\u4ee3\u7801\n\n```cpp\ninline void Insert(int v,node *s){\n\tif(!s){\n\t\ts=new node(v);\n\t\troot=s;\n\t\treturn;\n\t}else if(!s->left){\n\t\ts->left=new node(min(s->val,v));\n\t\ts->right=new node(max(s->val,v));\n\t\ts->left->father=s->right->father=s;\n\t\tupdate(s);\n\t\treturn;\n\t}\n\tif(v>s->left->val){\n\t\tInsert(v,s->right);\n\t}else Insert(v,s->left);\n\tupdate(s);\n}\n```\n\n### erase \u5220\u9664\n\n\u5220\u96645\uff1a\n1. \u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5de6\u513f\u5b50\u503c5>=5\uff0c\u5411\u5de6\u9012\u5f52\n2. \u8be5\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u503c3<=5\uff0c\u5411\u53f3\u9012\u5f52\n3. \u627e\u52305\uff0c\u5c06\u8be5\u8282\u70b9\u5220\u9664\n4. \u5220\u9664\u540e\u8be5\u8282\u70b9\u53ea\u6709\u5de6\u513f\u5b50\uff0c\u6ca1\u6709\u53f3\u513f\u5b50\uff0c\u56e0\u6b64\u8be5\u8282\u70b9\u6ca1\u6709\u610f\u4e49\uff0c\u7528\u5de6\u513f\u5b50\u5c06\u5176\u4ee3\u66ff\n5. \u56de\u6eaf\u66f4\u65b0\n\n\u6548\u679c\u5982\u56fe\n\n![03.png](https://zeromaton.github.io/upload/image/20180611/03.png)\n\n\u7531\u4e8e\u76f4\u63a5\u5220\u9664\u8282\u70b9\u5728\u56de\u6eaf\u65f6\u4f1a\u8bbf\u95ee\u7a7a\u6307\u9488\u800cRE\uff0c\u56e0\u6b64\u6211\u76f4\u63a5\u5c06\u5176\u5269\u4e0b\u7684\u513f\u5b50\u7684\u503c\u8d4b\u7ed9\u539f\u8282\u70b9\uff0c\u5220\u9664\u8be5\u513f\u5b50\u8282\u70b9\n\n```cpp\ninline void Erase(int v,node *s){\n\tif(isleaf(s)){\n\t\tregister node *p=s->father,*t;\n\t\tif(!p){\n\t\t\troot=NULL;\n\t\t\tdelete s;\n\t\t}\n\t\telse if(p->right==s){\n\t\t\tt=p->left;\n\t\t\tif(p->left->left){\n\t\t\t\tp->left->left->father=p->left->right->father=p;\n\t\t\t}\n\t\t\tp->val=p->left->val,p->size=p->left->size;\n\t\t\tp->left=t->left,p->right=t->right;\n\t\t\tdelete t;\n\t\t\tdelete s;\n\t\t}\n\t\telse {\n\t\t\tt=p->right;\n\t\t\tif(p->right->left){\n\t\t\t\tp->right->left->father=p->right->right->father=p;\n\t\t\t}\n\t\t\tp->val=p->right->val,p->size=p->right->size;\n\t\t\tp->right=t->right,p->left=t->left;\n\t\t\tdelete t;\n\t\t\tdelete s;\n\t\t}\n\t\treturn;\n\t}\n\tif(v>s->left->val){\n\t\tErase(v,s->right);\n\t}else Erase(v,s->left);\n\tupdate(s);\n}\n```\n\n### rank \u67e5\u8be2\u6392\u540d\n\u6b65\u9aa4:\n1. \u5230\u8fbe\u53f6\u8282\u70b9\uff0c\u503c\u4e0d\u6bd4x\u5c0f\uff0c\u8fd4\u56de1\n2. \u5230\u8fbe\u53f6\u8282\u70b9\uff0c\u503c\u6bd4x\u5c0f\uff0c\u8fd4\u56de2\n2. x\u6bd4\u5de6\u513f\u5b50\u503c\u5927\uff0c\u8fd4\u56de\u5411\u53f3\u9012\u5f52\u7ed3\u679c+\u5de6\u5b50\u6811size\n3. x\u4e0d\u6bd4\u5de6\u513f\u5b50\u503c\u5927\uff0c\u8fd4\u56de\u5411\u5de6\u9012\u5f52\u7ed3\u679c\n\n```cpp\ninline int Rank(int v,node *s){\n\tif(isleaf(s)){\n\t\tif(s->val<v)return 2;\n\t\treturn 1;\n\t}\n\tif(v>s->left->val)return Rank(v,s->right)+s->left->size;\n\telse return Rank(v,s->left);\n}\n```\n\n### search \u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570\n\u6b65\u9aa4:\n1. \u5230\u8fbe\u53f6\u8282\u70b9\uff0c\u8fd4\u56de\u8282\u70b9\u503c\n2. \u5de6\u5b50\u6811size<=x\uff0c\u7ed3\u679c\u5728\u5de6\u5b50\u6811\u5185\uff0c\u5411\u5de6\u9012\u5f52x\n3. \u5de6\u5b50\u6811size>x\uff0c\u7ed3\u679c\u5728\u53f3\u5b50\u6811\u5185\uff0c\u5411\u53f3\u9012\u5f52(x-\u5de6\u5b50\u6811size)\n\n```cpp\ninline int Search(int v,node *s){\n\tif(isleaf(s))return s->val;\n\telse if(v>s->left->size)return Search(v-s->left->size,s->right);\n\telse return Search(v,s->left);\n}\n```\n\n### predecessor \u6c42x\u7684\u524d\u9a71\n```cpp\ninline int predecessor(int v){\n\treturn Search(Rank(v,root)-1,root);\n}\n```\n\n### successor \u6c42x\u7684\u540e\u7ee7\n```cpp\ninline int successor(int v){\n\treturn Search(Rank(v+1,root),root);\n}\n```\n\n## \u5b8c\u6574\u4ee3\u7801\n\u9898\u76ee:(\u6d1b\u8c37) [P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nclass patriarchal_tree{\n\tprivate:\n\t\tstruct node{\n\t\t\tint val,size;\n\t\t\tnode *left,*right,*father;\n\t\t\tnode(int v=0){\n\t\t\t\tval=v,size=1,left=right=father=NULL;\n\t\t\t}\n\t\t}*root;\n\t\tinline void update(node *x){\n\t\t\tif(x&&x->left)x->val=max(x->left->val,x->right->val),x->size=x->left->size+x->right->size;\n\t\t}\n\t\tinline bool isleaf(node *x){\n\t\t\treturn x->left==NULL;\n\t\t}\n\t\tinline void Insert(int v,node *s){\n\t\t\tif(!s){\n\t\t\t\ts=new node(v);\n\t\t\t\troot=s;\n\t\t\t\treturn;\n\t\t\t}else if(!s->left){\n\t\t\t\ts->left=new node(min(s->val,v));\n\t\t\t\ts->right=new node(max(s->val,v));\n\t\t\t\ts->left->father=s->right->father=s;\n\t\t\t\tupdate(s);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(v>s->left->val){\n\t\t\t\tInsert(v,s->right);\n\t\t\t}else Insert(v,s->left);\n\t\t\tupdate(s);\n\t\t}\n\t\tinline void Erase(int v,node *s){\n\t\t\tif(isleaf(s)){\n\t\t\t\tregister node *p=s->father,*t;\n\t\t\t\tif(!p){\n\t\t\t\t\troot=NULL;\n\t\t\t\t\tdelete s;\n\t\t\t\t}\n\t\t\t\telse if(p->right==s){\n\t\t\t\t\tt=p->left;\n\t\t\t\t\tif(p->left->left){\n\t\t\t\t\t\tp->left->left->father=p->left->right->father=p;\n\t\t\t\t\t}\n\t\t\t\t\tp->val=p->left->val,p->size=p->left->size;\n\t\t\t\t\tp->left=t->left,p->right=t->right;\n\t\t\t\t\tdelete t;\n\t\t\t\t\tdelete s;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tt=p->right;\n\t\t\t\t\tif(p->right->left){\n\t\t\t\t\t\tp->right->left->father=p->right->right->father=p;\n\t\t\t\t\t}\n\t\t\t\t\tp->val=p->right->val,p->size=p->right->size;\n\t\t\t\t\tp->right=t->right,p->left=t->left;\n\t\t\t\t\tdelete t;\n\t\t\t\t\tdelete s;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(v>s->left->val){\n\t\t\t\tErase(v,s->right);\n\t\t\t}else Erase(v,s->left);\n\t\t\tupdate(s);\n\t\t}\n\t\tinline int Rank(int v,node *s){\n\t\t\tif(isleaf(s)){\n\t\t\t\tif(s->val<v)return 2;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif(v>s->left->val)return Rank(v,s->right)+s->left->size;\n\t\t\telse return Rank(v,s->left);\n\t\t}\n\t\tinline int Search(int v,node *s){\n\t\t\tif(isleaf(s))return s->val;\n\t\t\telse if(v>s->left->size)return Search(v-s->left->size,s->right);\n\t\t\telse return Search(v,s->left);\n\t\t}\n\tpublic:\n\t\tpatriarchal_tree(){\n\t\t\troot=NULL;\n\t\t}\n\t\tinline void insert(int v){//\u63d2\u5165 \n\t\t\tInsert(v,root);\n\t\t}\n\t\tinline void erase(int v){\n\t\t\tErase(v,root);\n\t\t}\n\t\tinline int rank(int v){ \n\t\t\treturn Rank(v,root);\n\t\t}\n\t\tinline int search(int v){\n\t\t\treturn Search(v,root);\n\t\t}\n\t\tinline int predecessor(int v){ \n\t\t\treturn Search(Rank(v,root)-1,root);\n\t\t}\n\t\tinline int successor(int v){\n\t\t\treturn Search(Rank(v+1,root),root);\n\t\t}\n};\npatriarchal_tree T;\nint n,opt,x;\nint main(int argc,char **argv){\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tscanf(\"%d %d\",&opt,&x);\n\t\tif(opt==1) T.insert(x);\n\t\telse if(opt==2) T.erase(x);\n\t\telse if(opt==3) printf(\"%d\\n\",T.rank(x));\n\t\telse if(opt==4) printf(\"%d\\n\",T.search(x));\n\t\telse if(opt==5) printf(\"%d\\n\",T.predecessor(x));\n\t\telse if(opt==6) printf(\"%d\\n\",T.successor(x));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1528725960,
        "uid": 49231,
        "name": "Starduster",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "# Treap \u6811\u5806\n## \u4e00\u3001\u610f\u4e49\n\u6811\u5806\uff0c\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u4e5f\u79f0Treap\uff0c\u662f\u6307\u6709\u4e00\u4e2a\u968f\u673a\u9644\u52a0\u57df\u6ee1\u8db3\u5806\u7684\u6027\u8d28\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5176\u7ed3\u6784\u76f8\u5f53\u4e8e\u4ee5\u968f\u673a\u6570\u636e\u63d2\u5165\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002\u5176\u57fa\u672c\u64cd\u4f5c\u7684\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\u3002\u76f8\u5bf9\u4e8e\u5176\u4ed6\u7684\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0cTreap\u7684\u7279\u70b9\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u4e14\u80fd\u57fa\u672c\u5b9e\u73b0\u968f\u673a\u5e73\u8861\u7684\u7ed3\u6784\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6392\u5e8f\u6811\u8282\u70b9\u63d2\u5165\u7684\u987a\u5e8f\u662f\u968f\u673a\u7684\uff0c\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u5e73\u8861\u7684\uff0c\u5373\u4f7f\u5b58\u5728\u4e00\u4e9b\u6781\u7aef\u60c5\u51b5\uff0c\u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5f88\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5efa\u7acb\u4e00\u9897\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u800c\u4e0d\u5fc5\u8981\u50cfAVL\u90a3\u6837\u65cb\u8f6c\uff0c\u53ef\u4ee5\u8bc1\u660e\u968f\u673a\u987a\u5e8f\u5efa\u7acb\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u5728\u671f\u671b\u9ad8\u5ea6\u662fO(logn)\uff0c\u4f46\u662f\u67d0\u4e9b\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u80fd\u5f97\u77e5\u6240\u6709\u7684\u5e26\u63d2\u5165\u8282\u70b9\uff0c\u6253\u4e71\u4ee5\u540e\u518d\u63d2\u5165\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u79cd\u89c4\u5219\u6765\u5b9e\u73b0\u8fd9\u79cd\u60f3\u6cd5\uff0c\u5e76\u4e14\u4e0d\u5fc5\u8981\u6240\u6709\u8282\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\u8282\u70b9\u662f\u987a\u5e8f\u8f93\u5165\u7684\uff0c\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e00\u70b9\u53ef\u4ee5\u7528Treap\u3002\nTreap=Tree+Heap\nTreap\u662f\u4e00\u68f5\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u5b83\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5206\u522b\u662f\u4e00\u4e2aTreap\uff0c\u548c\u4e00\u822c\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u4e0d\u540c\u7684\u662f\uff0cTreap\u7eaa\u5f55\u4e00\u4e2a\u989d\u5916\u7684\u6570\u636e\uff0c\u5c31\u662f\u4f18\u5148\u7ea7\u3002Treap\u5728\u4ee5\u5173\u952e\u7801\u6784\u6210\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u540c\u65f6\uff0c\u8fd8\u6ee1\u8db3\u5806\u7684\u6027\u8d28(\u5728\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u8282\u70b9\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u8be5\u8282\u70b9\u7684\u5b69\u5b50\u7684\u4f18\u5148\u7ea7)\u3002\u4f46\u662f\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662fTreap\u548c\u4e8c\u53c9\u5806\u6709\u4e00\u70b9\u4e0d\u540c\uff0c\u5c31\u662f\u4e8c\u53c9\u5806\u5fc5\u987b\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u800cTreap\u53ef\u4ee5\u5e76\u4e0d\u4e00\u5b9a\u662f\u3002\n\n## \u4e8c\u3001\u64cd\u4f5c\nTreap\u7ef4\u62a4\u5806\u6027\u8d28\u7684\u65b9\u6cd5\u7528\u5230\u4e86\u65cb\u8f6c\uff0c\u8fd9\u91cc\u5148\u7b80\u5355\u5730\u4ecb\u7ecd\u4e00\u4e0b\u3002Treap\u53ea\u9700\u8981\u4e24\u79cd\u65cb\u8f6c\uff0c\u8fd9\u6837\u7f16\u7a0b\u590d\u6742\u5ea6\u6bd4Splay\u7b49\u5c31\u8981\u5c0f\u4e00\u4e9b\uff0c\u8fd9\u6b63\u662fTreap\u7684\u7279\u8272\u4e4b\u4e00\u3002\n\u65cb\u8f6c\u662f\u8fd9\u6837\u7684\uff1a\n![](https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=ab8bb2d5f603918fc3dc359830544df2/3b292df5e0fe9925749d8c6535a85edf8db17176.jpg)\n\n### \u63d2\u5165\n\u7ed9\u8282\u70b9\u968f\u673a\u5206\u914d\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u5148\u548c\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u63d2\u5165\u4e00\u6837\uff0c\u5148\u628a\u8981\u63d2\u5165\u7684\u70b9\u63d2\u5165\u5230\u4e00\u4e2a\u53f6\u5b50\u4e0a\uff0c\u7136\u540e\u8ddf\u7ef4\u62a4\u5806\u4e00\u6837\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u4f18\u5148\u7ea7\u6bd4\u6839\u5927\u5c31\u65cb\u8f6c\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u6839\u7684\u5de6\u513f\u5b50\u5c31\u53f3\u65cb\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u6839\u7684\u53f3\u513f\u5b50\u5c31\u5de6\u65cb\u3002\n\u6211\u4eec\u5982\u679c\u628a\u63d2\u5165\u5199\u6210\u9012\u5f52\u5f62\u5f0f\u7684\u8bdd\uff0c\u53ea\u9700\u8981\u5728\u9012\u5f52\u8c03\u7528\u5b8c\u6210\u540e\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u5806\u6027\u8d28\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u5c31\u65cb\u8f6c\uff0c\u5b9e\u73b0\u975e\u5e38\u5bb9\u6613\u3002\n\u7531\u4e8e\u662f\u65cb\u8f6c\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u6700\u591a\u8fdb\u884ch\u6b21(h\u662f\u6811\u7684\u9ad8\u5ea6),\u63d2\u5165\u7684\u590d\u6742\u5ea6\u662flog( n )\u7684\uff0c\u5728\u671f\u671b\u60c5\u51b5\u4e0b\uff0c\u6240\u4ee5\u5b83\u7684\u671f\u671b\u590d\u6742\u5ea6\u662f O( log( N ) );\n\n### \u5220\u9664\n\u5220\u9664\n\u6709\u4e86\u65cb\u8f6c\u7684\u64cd\u4f5c\u4e4b\u540e\uff0cTreap\u7684\u5220\u9664\u6bd4\u4e8c\u53c9\u6392\u5e8f\u6811\u8fd8\u8981\u7b80\u5355\u3002\u56e0\u4e3aTreap\u6ee1\u8db3\u5806\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u628a\u8981\u5220\u9664\u7684\u8282\u70b9\u65cb\u8f6c\u5230\u53f6\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u76f4\u63a5\u5220\u9664\u5c31\u53ef\u4ee5\u4e86\u3002\u5177\u4f53\u7684\u65b9\u6cd5\u5c31\u662f\u6bcf\u6b21\u627e\u5230\u4f18\u5148\u7ea7\u6700\u5927\u7684\u513f\u5b50\uff0c\u5411\u4e0e\u5176\u76f8\u53cd\u7684\u65b9\u5411\u65cb\u8f6c\uff0c\u76f4\u5230\u90a3\u4e2a\u8282\u70b9\u88ab\u65cb\u8f6c\u5230\u53f6\u8282\u70b9\uff0c\u7136\u540e\u76f4\u63a5\u5220\u9664\u3002\u5220\u9664\u6700\u591a\u8fdb\u884clog( n )\u6b21\u65cb\u8f6c\uff0c\u671f\u671b\u590d\u6742\u5ea6\u662flog( n )\u3002\n\n### \u67e5\u627e\n\u548c\u4e00\u822c\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u4e00\u6837\uff0c\u4f46\u662f\u7531\u4e8eTreap\u7684\u968f\u673a\u5316\u7ed3\u6784\uff0c\u53ef\u4ee5\u8bc1\u660eTreap\u4e2d\u67e5\u627e\u7684\u671f\u671b\u590d\u6742\u5ea6\u662flog( n )\u3002\n### \u5206\u79bb\n\u8981\u628a\u4e00\u4e2aTreap\u6309\u5927\u5c0f\u5206\u6210\u4e24\u4e2aTreap\uff0c\u53ea\u8981\u5728\u9700\u8981\u5206\u5f00\u7684\u4f4d\u7f6e\u52a0\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff0c\u7136\u540e\u65cb\u81f3\u6839\u8282\u70b9\u5220\u9664\uff0c\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u5c31\u662f\u5f97\u51fa\u7684\u4e24\u4e2aTreap\u4e86\u3002\u6839\u636e\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u6027\u8d28\uff0c\u8fd9\u65f6\u5de6\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u90fd\u5c0f\u4e8e\u53f3\u5b50\u6811\u7684\u8282\u70b9\u3002\n\u65f6\u95f4\u76f8\u5f53\u4e8e\u4e00\u6b21\u63d2\u5165\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\uff0c\u4e5f\u5c31\u662f log( n )\n### \u5408\u5e76\n\u5408\u5e76\u662f\u6307\u628a\u4e24\u4e2aTreap\u5408\u5e76\u6210\u4e00\u4e2aTreap\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2aTreap\u7684\u6240\u6709\u8282\u70b9\u90fd\u5fc5\u987b\u5c0f\u4e8e\u6216\u7b49\u4e8e\u7b2c\u4e8c\u4e2aTreap\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u5206\u79bb\u7684\u7ed3\u679c\u6240\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\u3002\u5408\u5e76\u7684\u8fc7\u7a0b\u548c\u5206\u79bb\u76f8\u53cd\uff0c\u53ea\u8981\u52a0\u4e00\u4e2a\u865a\u62df\u7684\u6839\uff0c\u628a\u4e24\u68f5\u6811\u5206\u522b\u4f5c\u4e3a\u5de6\u53f3\u5b50\u6811\uff0c\u7136\u540e\u628a\u6839\u5220\u9664\u5c31\u53ef\u4ee5\u4e86\u3002\n\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5220\u9664\u4e00\u6837\uff0c\u4e5f\u662f\u671f\u671b\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Node{\n    int l,r;\n    int v,rank;\n    int size,same;\n}a[100010];\nint n,root,len,ans;\nvoid update (int k)\n{\n    int lc=a[k].l,rc=a[k].r;\n    a[k].size=a[lc].size+a[rc].size+a[k].same;\n}\nvoid lturn (int &k)\n{\n    int rc=a[k].r;\n    a[k].r=a[rc].l;\n    a[rc].l=k;\n    a[rc].size=a[k].size;\n    update(k);\n    k=rc;\n}\nvoid rturn (int &k)\n{\n    int lc=a[k].l;\n    a[k].l=a[lc].r;\n    a[lc].r=k;\n    a[lc].size=a[k].size;\n    update(k);\n    k=lc;\n}\nvoid insert (int &k,int x)\n{\n    if (k==0)\n    {\n        k=++len;\n        a[k].v=x,a[k].rank=rand ();\n        a[k].size=a[k].same=1;\n        return;\n    }\n    a[k].size++;\n    if (a[k].v==x)\n        a[k].same++;\n    else if(x>a[k].v)\n    {\n        insert (a[k].r,x);\n        if (a[a[k].r].rank<a[k].rank)\n            lturn (k);\n    }\n    else\n    {\n        insert (a[k].l,x);\n        if (a[a[k].l].rank<a[k].rank)\n            rturn (k);\n    } \n}\nint query (int k,int x)\n{\n    if (k==0)\n        return 0;\n    if (a[k].v==x)\n        return a[a[k].l].size+1;\n    else if(x>a[k].v)\n        return a[a[k].l].size+a[k].same+query (a[k].r,x);\n    else\n        return query(a[k].l,x);\n}\nvoid del (int &k,int x)\n{\n\tif (k==0)\n\t\treturn; \n\tif (a[k].v==x)\n\t{\n\t\tif(a[k].same>1)\n        {\n            a[k].same--;\n\t\t\ta[k].size--;\n\t\t\treturn;\n        }\n\t\tif (a[k].l*a[k].r==0)\n\t\t\tk=a[k].l+a[k].r;\n\t\telse if (a[a[k].l].rank<a[a[k].r].rank)\n\t\t\trturn (k),del (k,x);\n\t\telse\n\t\t\tlturn (k),del (k,x);\n\t}\n\telse if(x>a[k].v)\n\t\ta[k].size--,del (a[k].r,x);\n\telse\n\t\ta[k].size--,del (a[k].l,x);\n}\nint query_num (int k,int x)\n{\n\tif (k==0)\n\t\treturn 0;\n    if (x<=a[a[k].l].size)\n        return query_num (a[k].l,x);\n    if (a[a[k].l].size+a[k].same<x)\n        return query_num (a[k].r,x-a[a[k].l].size-a[k].same);\n    return a[k].v;\n}\nvoid query_pro(int k,int x)\n{\n    if (k==0)\n\t\treturn;\n    if (a[k].v<x)\n    {\n        ans=k;query_pro (a[k].r,x);\n    }\n    else\n\t\tquery_pro (a[k].l,x);\n}\nvoid query_sub(int k,int x)\n{\n    if (k==0)\n\t\treturn;\n    if(a[k].v>x)\n    {\n        ans=k;query_sub (a[k].l,x);\n    }\n    else\n\t\tquery_sub (a[k].r,x);\n}\nint main()\n{\n    scanf (\"%d\",&n);\n    for (int i=1;i<=n;i++)\n    {\n        int opt,x;\n        scanf (\"%d%d\",&opt,&x);\n        switch (opt)\n        {\n            case 1:insert (root,x);break;\n            case 2:del (root,x);break;\n            case 3:printf (\"%d\\n\",query (root,x));break;\n            case 4:printf (\"%d\\n\",query_num (root,x));break;\n            case 5:ans=0;query_pro (root,x);printf (\"%d\\n\",a[ans].v);break;\n            case 6:ans=0;query_sub (root,x);printf (\"%d\\n\",a[ans].v);break;\n        }\n    }\n}\t\n```",
        "postTime": 1523952833,
        "uid": 24024,
        "name": "Paul\u00b7Shi",
        "ccfLevel": 0,
        "title": "\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap\uff09"
    },
    {
        "content": "\u770b\u56fe\n![\u8f6f\u4ef6\uff1a\u5e55\u5e03](http://www.lzoi.org/upload/pic/image/20180218/20180218053414_56514.png)\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\nconst int lb=-10000000;\nconst int rb=10000000;\nstruct nod{\n    int ls,rs,l,r,value;\n}ch[6000000];\nint en=0;\nint nw(int l,int r){\n    en++;\n    ch[en].l=l;\n    ch[en].r=r;\n    return en;\n}\nvoid xg(int pos,int value,int o){\n    if(ch[o].l==ch[o].r){\n        ch[o].value+=value;\n        return;\n    }\n    int &ls=ch[o].ls;\n    int &rs=ch[o].rs;\n    int mid=ch[o].l+ch[o].r>>1;\n    if(pos<=mid){\n        if(ls==0){\n            ls=nw(ch[o].l,mid);\n        }\n        xg(pos,value,ls);\n    }else {\n        if(rs==0){\n            rs=nw(mid+1,ch[o].r);\n        }\n        xg(pos,value,rs);\n    }\n    ch[o].value=ch[ls].value+ch[rs].value;\n    return;\n}\nint findx(int l,int r,int o){\n    if(ch[o].l==l&&ch[o].r==r){\n        return ch[o].value;\n    }\n    int mid=ch[o].l+ch[o].r>>1;\n    if(r<=mid){\n        if(ch[o].ls==0){\n            return 0;\n        }\n        return findx(l,r,ch[o].ls);\n    }else if(l>mid){\n        if(ch[o].rs==0){\n            return 0;\n        } \n        return findx(l,r,ch[o].rs);\n    }else{\n        if(ch[o].ls==0&&ch[o].rs==0){\n            return 0;\n        }else if(ch[o].rs==0){\n            return  findx(l,mid,ch[o].ls);\n        }else if(ch[o].ls==0){\n             return findx(mid+1,r,ch[o].rs);\t\n        }else{\n            return findx(l,mid,ch[o].ls)+findx(mid+1,r,ch[o].rs);\n        }\n    }\n} \nint findr(int o,int rank){                                 \n    if(ch[o].l==ch[o].r){\n        return ch[o].l;\n    }\n    int ls=ch[o].ls;\n    int rs=ch[o].rs;\n    if(ch[ls].value>=rank){\n    \treturn findr(ls,rank);\n    }else{\n    \treturn findr(rs,rank-ch[ls].value);\n    }\n}\nint main()\n{\n    int n,opt,x;\n    scanf(\"%d\",&n);\n    nw(lb,rb); \n    for(int i=1;i<=n;i++){\n        scanf(\"%d%d\",&opt,&x);\n        if(opt==1){\n            xg(x,1,1);\n        }else if(opt==2){\n            xg(x,-1,1);\n        }else if(opt==3){\n            int k=findx(lb,x-1,1)+1;\n            printf(\"%d\\n\",k);\n        }else if(opt==4){\n            int k=findr(1,x);\n            printf(\"%d\\n\",k);\n        }else if(opt==5){\n            int k=findx(lb,x-1,1);\n            int g=findr(1,k);\n            printf(\"%d\\n\",g);\n        }else if(opt==6){\n            int k1=findx(lb,x,1);\n            int k=findx(lb,x+1,1);\n            while(k==k1){\n                x++;\n                k=findx(lb,x+1,1);\n            }\n            int g=findr(1,k);\n            printf(\"%d\\n\",g);\n        }\n    }\n} \n```",
        "postTime": 1518950160,
        "uid": 53543,
        "name": "circle_star",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "treap\u8ffd\u6c42\u7684\u5e76\u4e0d\u662f\u6574\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5f62\u6001\u4e0a\u7684\u5e73\u8861\uff0c\u800c\u662f\u8ba9\u5b83\u540c\u65f6\u6ee1\u8db3\u4e00\u4e2a\u5806\u7684\u6027\u8d28\uff0c\u8fd9\u4e2a\u5806\u53ef\u4ee5\u662f\u968f\u673a\u7684\n\n\u6838\u5fc3\u64cd\u4f5c\u5c31\u662f\u5f53\u6211\u4eec\u63d2\u5165\u5b8c\u8282\u70b9\u4ee5\u540e\u5224\u65ad\u4ed6\u6ee1\u4e0d\u6ee1\u8db3\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u6ee1\u8db3\u5c31\u901a\u8fc7\u5de6\u65cb\u6216\u53f3\u65cb\u5f80\u4e0a\u8c03\u6574\u3002\n\n\n\u6765\u5410\u69fd\u4e00\u4e0b\u6d1b\u8c37\u4e0a\u7684\u9898\u89e3\uff0c\u5927\u90e8\u5206\u90fd\u7528\u4e86\u5927\u91cf\u7684\u5f15\u7528\u53d8\u91cf\uff0c\u4f7f\u5f97\u6700\u540e\u6839\u672c\u641e\u4e0d\u6e05\u695a\u8c01\u5f15\u7528\u8c01\u4e86\uff0c\u800c\u4e14\u90fd\u4e0d\u7ef4\u62a4\u7236\u6307\u9488\uff0c\u5de6\u53f3\u65cb\u8f6c\u6839\u672c\u770b\u4e0d\u61c2\n\n\u6211\u7528\u4e86\u6307\u9488\uff0c\u867d\u7136\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u4f46\u6bcf\u4e00\u6b65\u90fd\u6bd4\u8f83\u6e05\u695a\n\n\u4ee3\u7801\uff1a\uff08340ms\uff09\n\n```cpp\n#include<iostream>  \n#include<cstdio>  \n#include<cstdlib> \n#include<cstring>\nusing namespace std;\nstruct node {\n    int x, rnd, num, size;//\u5206\u522b\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u5806\u503c\uff0c\u91cd\u590d\u6b21\u6570\uff0c\u5b50\u6811\u5927\u5c0f\uff1b\n    struct node *fa, *r, *l;//\u7236\u4eb2\u548c\u5de6\u53f3\u513f\u5b50\n    node() {\n        x = 0; rnd = 0; num = 0; size = 0; fa = r = l = NULL;\n    }\n};\nnode *root;\nint pre = 0, suc = 0;\nvoid rturn(node *u, node *v);\nvoid lturn(node *u, node *v);\nvoid out(node *u) {\n    if (u != NULL) {\n        out(u->l);\n        while (u->num--)printf(\"%d \", u->x);\n        out(u->r);\n    }\n}\nvoid p_tree(node *u) {\n    if (u != NULL) {\n        printf(\"now x=%d,rnd=%d,num=%d,size=%d,\", u->x, u->rnd, u->num, u->size);\n        if (u->l != NULL) printf(\"ls=%d,\", u->l->x);\n        if (u->r != NULL) printf(\"rs=%d\", u->r->x);\n        cout << endl;\n        p_tree(u->l);\n        p_tree(u->r);\n    }\n}\nvoid insert(node *u, node *v);\nvoid del(node* u, int k);\nvoid get_rank(node* u,int k,int now_rank);\nvoid get_kth(node* u, int k);\nvoid get_pre(node* u, int k);\nvoid get_suc(node* u, int k);\nint main() {\n    //freopen(\"treap.in\", \"r\", stdin);\n    //freopen(\"treap.out\", \"w\", stdout);\n    ios::sync_with_stdio(false);\n    int i, n, k;\n    cin >> n;\n    node* p;\n    srand(2333);\n    root = new node;\n    root->rnd = -1;//\u865a\u62df\u4e00\u4e2a\u6839\uff0c\u4f7f\u7b2c\u4e00\u6b21\u63d2\u5165\u80fd\u5b9e\u73b0\n    int opt;\n    int cnt=1;\n    for (i = 1; i <= n; i++) {\n        cin >> opt >> k;\n        if (opt == 1) {\n            p = new node;\n            p->x = k; p->rnd = rand(); p->num = 1; p->size = 1;\n            insert(root, p);\n            if (cnt == 1) del(root,0);//\u7b2c\u4e00\u6b21\u63d2\u5165\u5b8c\u4e4b\u540e\u5c31\u628a\u865a\u62df\u7684\u6839\u5220\u9664\n            cnt++;\n        }\n        if(opt == 2) del(root,k);\n        if(opt == 3) get_rank(root,k,0);\n        if(opt == 4) get_kth(root,k);\n        if(opt == 5) get_pre(root,k);\n        if(opt == 6) get_suc(root,k);\n        p_tree(root);\n    }\n    //out(root);\n    //system(\"pause\");\n    //fclose(stdin); fclose(stdout);\n    return 0;\n}\nvoid insert(node *u, node *v) {\n    if (u == NULL)return;\n    u->size++;\n    if (v->x == u->x) {\n        u->num++; return;\n    }\n    else if (v->x > u->x) {\n        if (u->r == NULL) {\n            u->r = v; v->fa = u;\n            while (v->fa != NULL && (v->rnd < v->fa->rnd)) {\n                if (v == v->fa->r)lturn(v->fa, v);\n                else rturn(v->fa, v);\n            }\n        }\n        else insert(u->r, v);\n    }\n    else {\n        if (u->l == NULL) {\n            u->l = v; v->fa = u;\n            while (v->fa != NULL && (v->rnd < v->fa->rnd)) {\n                if (v == v->fa->r)lturn(v->fa, v);\n                else rturn(v->fa, v);\n            }\n        }\n        else insert(u->l, v);\n    }\n}\nvoid lturn(node *u, node *v) {//\u628aV\u5de6\u65cb\u5230u\u7684\u4f4d\u7f6e\n    node *t = u->fa;\n    u->r = v->l; if (v->l != NULL)v->l->fa = u;\n    v->l = u; u->fa = v;\n    v->fa = t;\n    if (t != NULL) {//\u4fee\u6539\u539f\u672cu\u7684\u7236\u4eb2\uff0c\u4f7f\u4ed6\u7684\u513f\u5b50\u53d8\u6210v\n        if (t->l == u)t->l = v;\n        else t->r = v;\n    }\n    else root = v;//\u5982\u679c\u539f\u672cu\u7684\u7236\u4eb2\u662fNULL\uff0c\u8bf4\u660e\u539f\u672cu\u5c31\u662f\u6811\u6839\n    u->size = u->num;//\n    if (u->l != NULL) u->size += u->l->size;\n    if (u->r != NULL) u->size += u->r->size;\n    v->size = u->size + v->num;\n    if (v->r) v->size += v->r->size;\n    return;\n}\nvoid rturn(node *u, node *v) {//\u53f3\u65cb\u540c\u7406\n    node *t = u->fa;\n    u->l = v->r; if (v->r != NULL)v->r->fa = u;\n    u->fa = v; v->r = u;\n    v->fa = t;\n    if (t != NULL) {\n        if (t->l == u)t->l = v;\n        else t->r = v;\n    }\n    else root = v;\n    u->size = u->num;\n    if (u->l != NULL) u->size += u->l->size;\n    if (u->r != NULL) u->size += u->r->size;\n    v->size = u->size + v->num;\n    if (v->l) v->size += v->l->size;\n    return;\n}\nvoid del(node* u, int k) {\n    if (u == NULL) return;\n    u->size--;\n    if (u->x == k) {\n        if (u->num > 1) { u->num--; return; }\n        u->num--;\n        while (u->l != NULL || u->r != NULL) {\n            if (u->l != NULL) rturn(u, u->l);\n            else lturn(u, u->r);\n        }\n        if (u->fa != NULL && u == u->fa->l) u->fa->l = NULL;\n        else u->fa->r = NULL;\n        delete u;\n    }\n    else if (u->x < k) del(u->r, k);\n    else if (u->x > k) del(u->l, k);\n    return;\n}\nvoid get_rank(node* u,int k,int now_rank){\n    if (u == NULL) return;\n    //printf(\"now searching:x=%d,k=%d\\n\", u->x, k);\n    if (u->x == k) {\n        if (u->l == NULL) cout << now_rank+1 << endl;\n        else cout << now_rank + u->l->size + 1 << endl;\n        return;\n    }\n    else if (k < u->x) get_rank(u->l, k, now_rank);\n    else if (k > u->x) {\n        if (u->l != NULL) now_rank += u->l->size;\n        now_rank += u->num;\n        get_rank(u->r, k, now_rank);\n    }\n    return;\n}\nvoid get_kth(node* u, int k){\n    if (u == NULL) return;\n    int lsize = 0;\n    if (u->l != NULL) lsize = u->l->size;\n    if (k <= lsize) get_kth(u->l, k);\n    else if (k > lsize + u->num)get_kth(u->r, k - lsize - u->num);\n    else cout << u->x << endl;\n    return;\n}\nvoid get_pre(node* u, int k) {\n    if (u == NULL) { cout << pre << endl; return; }\n    if (u->x < k) { pre = u->x; get_pre(u->r,k); }\n    else if (u->x >= k)get_pre(u->l, k);\n    return;\n}\nvoid get_suc(node* u, int k) {\n    if (u == NULL) { cout << suc << endl; return; }\n    if (u->x > k) { suc = u->x; get_suc(u->l, k); }\n    else if (u->x <= k)get_suc(u->r, k);\n    return;\n}\n```cpp",
        "postTime": 1514605101,
        "uid": 30066,
        "name": "Jianuo_Zhu",
        "ccfLevel": 6,
        "title": "\u5e73\u8861\u6811-Treap\u677f\u5b50"
    },
    {
        "content": "\u8c03splay\u8c03\u5455\u4e86\u6765\u7784\u4e00\u773c\u9898\u89e3\uff0c\u7784\u5230\u4e86\u697c\u4e0b\u7684\u503c\u57df\u7ebf\u6bb5\u6811\uff5e\n\n\u6211\u89c9\u5f97\u5f88\u6709\u9053\u7406\uff0c\u7136\u800csegtree\u5e38\u6570\u592a\u5927\u4e86\uff0c\u6211\u6539\u6210\u4e86BIT\u5b58\u6392\u540d\uff0c\u7136\u540e\u5269\u4e0b\u7684\u76f4\u63a5\u4e8c\u5206\uff5e\n\n\uff08\u76f4\u63a5\u4e8c\u5206\u51fa\u524d\u9a71\u3001\u540e\u7ee7\u548c\u6392\u540d\u4e3ak\u7684\u6570\uff09\n\n\u7ed3\u679c\u8dd1\u7684\u8fd8\u633a\u5feb\uff1f112ms\n\n\u7136\u540e\u5199\u5b8c\u4e86\u53c8\u662f50\u5206\uff0c\u7adf\u7136\u53d1\u73b0\u4e86\u548csplay\u4e00\u6a21\u4e00\u6837\u7684\u9519\u8bef\uff1f\n\n\u7ed3\u679c\u3002\u3002\u3002\u6211**\u8bfb\u5165\u4f18\u5316\u6ca1\u8bfb\u8d1f\u6570\u3002\u3002\u3002\n\n\u5413\u5f97\u6211\u8d76\u7d27\u6539\u4e86\u4e00\u53d1\u8bfb\u5165\u4f18\u5316\u3002\u3002\u3002\u8fdeA\u4e24\u6b21\u3002\u3002\u3002~~\u6211\u7684\u6b27\u5462~~\n\n~~\u611f\u89c9\u8fd9\u9898\u597d\u6c34\u554a\uff0c\u7528\u4ec0\u4e48\u90fd\u80fd\u5199~~\n\n[~~\u6700\u540e\u5b89\u5229\u535a\u5ba2~~](http://www.cnblogs.com/xzz\\_233/p/7588980.html)\n\n```cpp\n// It is made by XZZ\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n#define rep(a,b,c) for(rg int a=b;a<=c;a++)\n#define drep(a,b,c) for(rg int a=b;a>=c;a--)\n#define erep(a,b) for(rg int a=fir[b];a;a=nxt[a])\n#define il inline\n#define rg register\n#define vd void\ntypedef long long ll;\nil int gi(){\n    rg int x=0,f=1;rg char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nint n,m;\nstruct bit{\n    int tree[100010];\n    il int lb(const int&a){return a&-a;}\n    bit(){memset(tree,0,sizeof tree);}\n    il vd Updata(int pos,int num){while(pos<=m)tree[pos]+=num,pos+=lb(pos);}\n    il int Query(int pos){int ret=0;while(pos)ret+=tree[pos],pos-=lb(pos);return ret;}\n};\nint opt[100010],x[100010],data[100010];\nbit t;\nint main(){\n    n=gi();\n    rep(i,1,n){\n    opt[i]=gi(),x[i]=gi();\n    if(opt[i]!=4)data[++m]=x[i];\n    }\n    sort(data+1,data+m+1);\n    m=unique(data+1,data+m+1)-data-1;\n    rep(i,1,n)if(opt[i]!=4)x[i]=lower_bound(data+1,data+1+m,x[i])-data;\n    int l,r,mid,k;\n    rep(i,1,n){\n    if(opt[i]==1)t.Updata(x[i]+1,1);\n    else if(opt[i]==2)t.Updata(x[i]+1,-1);\n    else if(opt[i]==3)printf(\"%d\\n\",t.Query(x[i])+1);\n    else if(opt[i]==4){\n        l=1,r=m;\n        while(l<r){\n        mid=(l+r)>>1;\n        if(t.Query(mid+1)>=x[i])r=mid;\n        else l=mid+1;\n        }\n        printf(\"%d\\n\",data[l]);\n    }else if(opt[i]==5){\n        k=t.Query(x[i]);\n        l=1,r=x[i]-1;\n        while(l<r){\n        mid=(l+r)>>1;\n        if(t.Query(mid+1)==k)r=mid;\n        else l=mid+1;\n        }\n        printf(\"%d\\n\",data[l]);\n    }else{\n        k=t.Query(x[i]+1);\n        l=x[i]+1,r=m;\n        while(l<r){\n        mid=(l+r)>>1;\n        if(t.Query(mid)==k)l=mid+1;\n        else r=mid;\n        }\n        printf(\"%d\\n\",data[l-1]);\n    }\n    }\n    return 0;\n}\n```\n~~\u987a\u4fbf\uff0c\u8bf7\u7ba1\u7406\u5927\u5927\u5220\u4e86\u524d\u9762\u90a3\u7247\u9898\u89e3\uff0c\u87f9\u87f9~~\n",
        "postTime": 1506487681,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "- \u8fd9\u79cd\u9898\u5f53\u7136\u662f\u7528\u66ff\u7f6a\u7f8a\u6811\u505a\u554a\uff08\u66b4\u529b\u51fa\u5947\u8ff9\uff09\n\n- \u6bcf\u4e00\u6b21\u63d2\u5165\u540e\uff0c\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u8282\u70b9\u6240\u5728\u7684\u5b50\u6811\u662f\u5426\u5e73\u8861\uff0c\u82e5\u4e0d\u5e73\u8861\u5c31\u5c06\u8fd9\u9897\u5b50\u6811\u62cd\u6241\u91cd\u5efa\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define MAXN 100010\n#define alpha 0.75\ninline int read()\n{\n    register int x = 0, flag = 1;\n    register char ch = getchar();\n    while ((ch < '0' || ch > '9') && ch != '-')\n        ch = getchar();\n    if (ch == '-')\n    {\n        flag = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x * flag;\n}\nstruct sgt\n{\n    int left, right, father, val, size;\n    sgt() { this->left = this->right = this->father = -1; }\n    sgt(int left, int right, int val, int father = -1, int size = 1) : left(left), right(right), val(val), father(father), size(size){};\n} pool[MAXN];\nint root = -1, tot = 0;\ninline bool balance(int node)\n{\n    return alpha * pool[node].size >= pool[pool[node].left].size && alpha * pool[node].size >= pool[pool[node].right].size;\n}\nint temp[MAXN], cnt = 0;\ninline int build(int l, int r)\n{\n    if (l > r)\n        return -1;\n    int mid = (l + r) >> 1;\n    int x = temp[mid];\n    pool[x].left = build(l, mid - 1);\n    if (~pool[x].left)\n        pool[pool[x].left].father = x;\n    pool[x].right = build(mid + 1, r);\n    if (~pool[x].right)\n        pool[pool[x].right].father = x;\n    pool[x].size = 1;\n    if (~pool[x].left)\n        pool[x].size += pool[pool[x].left].size;\n    if (~pool[x].right)\n        pool[x].size += pool[pool[x].right].size;\n    return x;\n}\ninline void traversal(int x)\n{\n    if (~x)\n    {\n        traversal(pool[x].left);\n        temp[cnt++] = x;\n        traversal(pool[x].right);\n    }\n}\ninline void rebuild(int x)\n{\n    cnt = 0;\n    traversal(x);\n    int f = pool[x].father;\n    if (~f)\n    {\n        if (x == pool[f].left)\n        {\n            pool[f].left = build(0, cnt - 1);\n            pool[pool[f].left].father = f;\n        }\n        else\n        {\n            pool[f].right = build(0, cnt - 1);\n            pool[pool[f].right].father = f;\n        }\n    }\n    else\n    {\n        root = build(0, cnt - 1);\n        pool[root].father = -1;\n    }\n}\ninline void add(int x)\n{\n    if (root == -1)\n    {\n        root = 0;\n        pool[tot++] = sgt(-1, -1, x);\n        return;\n    }\n    int p = root, f = -1;\n    while (~p)\n    {\n        f = p;\n        pool[f].size++;\n        if (x <= pool[p].val)\n            p = pool[p].left;\n        else\n            p = pool[p].right;\n    }\n    pool[tot] = sgt(-1, -1, x, f);\n    if (f != -1)\n    {\n        if (x <= pool[f].val)\n            pool[f].left = tot;\n        else\n            pool[f].right = tot;\n    }\n    tot++;\n    int sg = -1;\n    while (~f)\n    {\n        if (!balance(f))\n            sg = f;\n        f = pool[f].father;\n    }\n    if (~sg)\n        rebuild(sg);\n}\ninline int rank(int x)\n{\n    int p = root, ans = 0;\n    while (~p)\n    {\n        if (x <= pool[p].val)\n        {\n            p = pool[p].left;\n        }\n        else\n        {\n            if (~pool[p].left)\n                ans += pool[pool[p].left].size;\n            ans++;\n            p = pool[p].right;\n        }\n    }\n    return ans;\n}\ninline int query(int x)\n{\n    int p = root;\n    while (~p)\n    {\n        if (pool[pool[p].left].size == x - 1)\n            return p;\n        if (pool[pool[p].left].size > x - 1)\n            p = pool[p].left;\n        else\n        {\n            x -= pool[pool[p].left].size;\n            x--;\n            p = pool[p].right;\n        }\n    }\n    return p;\n}\ninline int getPos(int x)\n{\n    int p = root;\n    while (~p)\n    {\n        if (pool[p].val == x)\n            return p;\n        if (x > pool[p].val)\n        {\n            p = pool[p].right;\n        }\n        else\n        {\n            p = pool[p].left;\n        }\n    }\n    return p;\n}\ninline void remove(int x)\n{\n    while ((~pool[x].left) && (~pool[x].right))\n    {\n        int p = pool[x].left;\n        while (~pool[p].right)\n            p = pool[p].right;\n        pool[x].val = pool[p].val;\n        x = p;\n    }\n    int s = ~pool[x].left ? pool[x].left : pool[x].right;\n    if (pool[pool[x].father].left == x)\n    {\n        pool[pool[x].father].left = s;\n        pool[s].father = pool[x].father;\n    }\n    else\n    {\n        pool[pool[x].father].right = s;\n        pool[s].father = pool[x].father;\n    }\n    for (int i = pool[x].father; ~i; i = pool[i].father)\n        pool[i].size--;\n    if (x == root)\n        root = s;\n}\ninline int next(int x)\n{\n    int p = root;\n    int min = 0x7FFFFFFF;\n    while (~p)\n    {\n        if (x < pool[p].val)\n        {\n            min = std::min(min, pool[p].val);\n            p = pool[p].left;\n        }\n        else\n        {\n            p = pool[p].right;\n        }\n    }\n    return min;\n}\ninline int pre(int x)\n{\n    int p = root;\n    int max = 0x80000000;\n    while (~p)\n    {\n        if (x > pool[p].val)\n        {\n            max = std::max(max, pool[p].val);\n            p = pool[p].right;\n        }\n        else\n        {\n            p = pool[p].left;\n        }\n    }\n    return max;\n}\nint n, x;\nint main()\n{\n    tot = 2;\n    root = 0;\n    pool[0].val = -2147483647;\n    pool[0].size = 2;\n    pool[0].right = 1;\n    pool[0].father = -1;\n    pool[1].val = 2147483647;\n    pool[1].size = 1;\n    pool[1].father = 0;\n    n = read();\n    while (n--)\n    {\n        switch (read())\n        {\n        case 1:\n            add(read());\n            break;\n        case 2:\n            remove(getPos(read()));\n            break;\n        case 3:\n            printf(\"%d\\n\", rank(read()));\n            break;\n        case 4:\n            printf(\"%d\\n\", pool[query(read() + 1)].val);\n            break;\n        case 5:\n            printf(\"%d\\n\", pre(read()));\n            break;\n        case 6:\n            printf(\"%d\\n\", next(read()));\n            break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1504052202,
        "uid": 26282,
        "name": "__asm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9053\u9898\u8fd8\u6709\u4e00\u4e2a**\u5947\u6280\u6deb\u5de7**\n\n\u6211\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4fe1\u4ef0\u73a9\u5bb6\uff08\u5176\u5b9e\u5c31\u662f\u5f31\u597d\u5427QAQ\uff09\n\n\u8fd9\u4e2a\u9898\u7528map+heap\u9884\u5904\u7406\u51fa\u6240\u6709\u6570\u7684\u6392\u540d\n\n\u7136\u540e\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\u4e86\n\n\u867d\u7136\u5e38\u6570\u4f1a\u6709\u70b9\u5927\u3002\u3002\u3002\u3002\uff08\u90a3\u662f\u5f88\u5927\u597d\u561b\uff01\uff01\uff01\uff09\n\n\u4f46\u662f\u5bf9\u6211\u4eec\u8fd9\u4e9b\u53ea\u4f1a\u6253\u7ebf\u6bb5\u6811\u7684\u849f\u84bb\u5f88\u597d\u7406\u89e3\n\n\u9644\u4ee3\u7801\uff08\u52ff\u55b7\u8c22\u8c22\uff09\n\n\n\n```cpp\n//%std\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<map>\nusing namespace std;\n#define lovelive long long\nint tot;\nint pos[100020];\nint p[100020];\nmap <int,int> s;\npriority_queue<int,vector<int>,greater<int> > so;\nstruct question\n{\n  int num,x;\n}q[100020];\nstruct tree\n{\n  int l,r,sum;\n}t[400020];\nvoid buildtree(int i,int l,int r)\n{\n  t[i].l=l;\n  t[i].r=r;\n  if(l==r)\n  {\n      pos[l]=i;\n    return ;\n  }\n  int mid=(l+r)>>1;\n  buildtree(i<<1,l,mid);\n  buildtree(i<<1|1,mid+1,r);\n}\nvoid insert(int i,int point)\n{\n  t[i].sum++;\n  int mid=(t[i].l+t[i].r)>>1;\n  if(t[i].l==t[i].r)\n    return ;\n  if(point>mid)\n    insert(i<<1|1,point);\n  else\n    insert(i<<1,point);\n}\nvoid Delete(int i,int point)\n{\n  t[i].sum--;\n  int mid=(t[i].l+t[i].r)>>1;\n  if(t[i].l==t[i].r)\n    return ;\n  if(point>mid)\n    Delete(i<<1|1,point);\n  else\n    Delete(i<<1,point);\n}\nint find_num(int i,int x)\n{\n  if(t[i].l==t[i].r)\n    return t[i].l;\n  if(x>t[i<<1].sum)\n    find_num(i<<1|1,x-t[i<<1].sum);\n  else\n    find_num(i<<1,x);\n}\nint query(int i,int l,int r)\n{\n  if(r<t[i].l||l>t[i].r)\n    return 0;\n  if(r>=t[i].r&&l<=t[i].l)\n    return t[i].sum;\n  return query(i<<1,l,r)+query(i<<1|1,l,r);\n}\nint find_rank(int x)\n{\n  return query(1,1,x-1)+1;\n}\nint find_pre(int x)\n{\n  int p=find_rank(x);\n  return find_num(1,p-1);\n}\nint find_next(int x)\n{\n  int p=find_rank(x);\n  return find_num(1,p+t[pos[x]].sum);\n}\nint main()\n{\n  int n;\n  scanf(\"%d\",&n);\n  for(int i=1;i<=n;i++)\n    {\n      scanf(\"%d%d\",&q[i].num,&q[i].x);\n      if(q[i].num!=4) \n        so.push(q[i].x);\n    }\n  int point = -2e9-1;\n  while(!so.empty())\n  {\n      if(so.top()!=point)\n        ++tot;\n      s[so.top()]=tot;\n      p[tot]=so.top();\n      point=so.top();\n      so.pop();\n  }  \n  buildtree(1,1,tot);\n  for(int i=1;i<=n;i++)\n    if(q[i].num!=4)\n        q[i].x=s[q[i].x];\n  for(int i=1;i<=n;i++)\n  {\n      switch(q[i].num)\n      {\n        case 1:insert(1,q[i].x);break;\n        case 2:Delete(1,q[i].x);break;\n        case 3:cout<<find_rank(q[i].x)<<\"\\n\";break;\n        case 4:cout<<p[find_num(1,q[i].x)]<<\"\\n\";break;\n        case 5:cout<<p[find_pre(q[i].x)]<<\"\\n\";break;\n        case 6:cout<<p[find_next(q[i].x)]<<\"\\n\";break;\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1496632679,
        "uid": 22129,
        "name": "NicoDafaGood",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u53ef\u4ee5\u76f4\u63a5\u7528vector\u66b4\u529b\u6c42\u89e3\uff0c\u76f4\u63a5\u6a21\u62df\u5e73\u8861\u6811\u7684\u8fc7\u7a0b\u3002\u4f46\u662f\u901f\u5ea6\u582a\u5fe7\u3002\n\n\u8be6\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=100000+2017;\nvoid Read(int & p)\n{\n    p=0;\n    int f=1;\n    char c=getchar();\n    while(c<'0' or c>'9') \n    {\n        if(c=='-') f=-1;\n        c=getchar();\n    }\n    while(c<='9' and c>='0')\n        p=p*10+c-'0',c=getchar();\n    p*=f;\n    return ;\n}\nint n,ask,fri;\nvector <int> Epic;\nint main()\n{\n    Read(n);\n    Epic.reserve(MAXN);//\u62d3\u5c55vector\u7684\u4e0a\u9650\uff0c\u8ba9\u5b83\u4e0d\u5728\u4e2d\u9014\u62d3\u5c55\u7a7a\u95f4\n    for(int i=1;i<=n;i++)\n    {\n        Read(ask); Read(fri);\n        if(ask==1)//insert\uff1a\u5728\u5408\u9002\u7684\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u503c\n            Epic.insert(upper_bound(Epic.begin(),Epic.end(),fri),fri);//upper_bound(a,b,c)\u662f\u533a\u95f4[a,b]\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ec\u7684\u503c\u5f97\u4e0b\u6807\n        else if(ask==2)//erase\uff1a\u64e6\u53bb\u8fd9\u4e2a\u503c\n            Epic.erase(lower_bound(Epic.begin(),Epic.end(),fri));\n        else if(ask==3)//\u8f93\u51fa\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u4e0b\u6807\uff08\u4e5f\u5c31\u662f\u6392\u540d\uff09\n            printf(\"%d\\n\",lower_bound(Epic.begin(),Epic.end(),fri)-Epic.begin()+1);\n        else if(ask==4)//\u8f93\u51fa\u6392\u540d\u5bf9\u5e94\u7684\u503c\n            printf(\"%d\\n\",Epic[fri-1]);\n        else if(ask==5)//\u6c42\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u6ce8\u610f*\uff0c\u8fd4\u56de\u7684\u662f\u503c\n            printf(\"%d\\n\",*--lower_bound(Epic.begin(),Epic.end(),fri));\n        else printf(\"%d\\n\",*upper_bound(Epic.begin(),Epic.end(),fri));\n    }\n    return 0;\n}\n\n```",
        "postTime": 1490594986,
        "uid": 37652,
        "name": "Crloss",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u672c\u6765\u60f3\u5c55\u793a\u4e00\u4e0bpbds\u89e3\u6cd5\u7684\uff0c\u88ab\u4eba\u62a2\u5148\u4e00\u5929\uff0c\u4e0d\u8fc7\u4e0d\u8981\u7d27\uff0c\u6211\u7528\u53e6\u4e00\u79cd\u5199\u6cd5\uff0c\u4fee\u6539\u6570\u503c\u4e0d\u592a\u666e\u904d\uff0c\u4e0d\u5982pair<int,int>+map\u65f6\u95f4\u6233\uff0c\u6ca1\u6709\u7528rb\\_tree\\_tag\uff0c\u90a3\u6837\u4f1a\u66f4\u5feb\uff0c\u4f46\u662fsplay\\_tree\\_tag\u66f4\u5b89\u5168\u3002\u6ca1\u6709\u4f7f\u7528Lowerbound\u800c\u662f\u7528order\\_of\\_key\u7b49\u64cd\u4f5c\uff0c\u5927\u5bb6\u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b\u7528\u6cd5\uff0c\u6ce8\u610fOff-by-one mistake\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <ext/pb_ds/assoc_container.hpp> \nusing namespace std;\nusing namespace __gnu_pbds;\n#define Node pair<int,int>\nmap <int,int> s;\ntree< Node ,null_type,less< Node >,splay_tree_tag,tree_order_statistics_node_update> T;\nint n,op,x;\nint main()\n{\n    scanf(\"%d\",&n);\n    for(register int i = 1; i <= n; i++)\n        switch(scanf(\"%d%d\",&op,&x), op)\n        {\n            case 1 :T.insert(Node(x,s[x]++));\n                    break;\n            case 2 :T.erase(Node(x,--s[x]));\n                    break;\n            case 3 :printf(\"%d\\n\",(int)T.order_of_key(Node(x,0))+1);\n                    break;\n            case 4 :printf(\"%d\\n\",T.find_by_order(x-1)->first);\n                    break;\n            case 5 :printf(\"%d\\n\",T.find_by_order(\n                    T.order_of_key(Node(x,0))-1\n                                                      )->first);\n                    break;\n            case 6 :printf(\"%d\\n\",T.find_by_order(\n                    T.order_of_key(Node(x,s[x]-1))+(T.find(Node(x,0)) == T.end() ? 0 : 1)\n                                                      )->first);\n                    break;\n            default:break;\n        }\n    return 0;\n}\n\n```",
        "postTime": 1480860111,
        "uid": 21953,
        "name": "Landia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u6211\u8bf4\u5440\n\n\u4f5c\u4e3a\u4e00\u4e2a\u81ea\u8ba4\u4e3a\u5bf9\u5e73\u8861\u6811\u8fd9\u5957\u7406\u8bba\u6df1\u6709\u7814\u7a76\u7684\u4eba\n\n\u5bf9\u6bcf\u79cd\u5e73\u8861\u6811\uff08\u6b63\u5e38\u7684\uff09\u505a\u4e2a\u8bc4\u4ef7\u5427\n\n1.RedBlackTree\n\n\u78be\u538b\u6027\u7684\u901f\u5ea6\u4f18\u52bf\u548c\u4ee3\u7801\u91cf\n\n\u53ef\u4ee5\u5206\u88c2\u5408\u5e76\uff0c\u4f46\u662f\u662flog\u65b9\u7684\uff0c\u53ef\u4ee5\u53ef\u6301\u4e45\u5316\n\n\u975e\u5e38\u5389\u5bb3\u7684\u4e00\u4e2aDS\n\n\u6ca1\u4eba\u5199\n\n2.ScapegoatTree\n\n\u4ee3\u7801\u91cf\u5c0f\uff0c\u968f\u673a\u6570\u636e\u4e0b\u975e\u5e38\u5feb\uff0c\u7136\u800c\u8fd8\u662f\u4e0d\u5982RBT\n\n\u4e0d\u80fd\u5206\u88c2\u5408\u5e76\uff0c\u53ef\u4ee5\u90e8\u5206\u53ef\u6301\u4e45\u5316\n\n\u4f46\u662f\u5728\u5361\u94fe\u7684\u6570\u636e\u6216\u8005\u6784\u9020\u6570\u636e\u4e0b\u8868\u73b0\u5c31\u4e00\u822c\u4e86\n\n3.Treap\uff08\u65cb\u8f6c\u5f0f\uff09\n\n\u4ee3\u7801\u91cf\u5c0f\uff0c\u901f\u5ea6\u8f83\u5feb\n\n\u4e0d\u80fd\u5206\u88c2\u5408\u5e76\uff0c\u53ef\u4ee5\u53ef\u6301\u4e45\u5316\n\n\u633a\u597d\u7684\u4e1c\u897f\n\n4.Treap\uff08\u975e\u65cb\u8f6c\u5f0f\uff09\n\n\u4ee3\u7801\u91cf\u5c0f\uff0c\u901f\u5ea6\u975e\u5e38\u6162\uff08\u8fd9\u4e2a\u5176\u5b9e\u770b\u5199\u6cd5\uff0c\u6b63\u5e38\u4eba\u5199\u7684\u90fd\u5f88\u6162\uff09\n\n\u53ef\u4ee5\u5206\u88c2\u5408\u5e76\u53ef\u6301\u4e45\u5316\uff0c\u529f\u80fd\u633a\u591a\u7684\n\n\u4f46\u662f\u901f\u5ea6\u5b9e\u5728\u6162\n\n5.Splay\n\n\u4ee3\u7801\u91cf\u4e00\u822c\uff0c\u901f\u5ea6\u975e\u5e38\u6162\n\n\u53ef\u4ee5\u5206\u88c2\u5408\u5e76\uff0c\u4e0d\u80fd\u53ef\u6301\u4e45\u5316\n\n\u4e00\u822c\u4eba\u5b66\u7684\u5e73\u8861\u6811\n\n6.AVLTree\n\n\u4ee3\u7801\u91cf\u8f83\u5927\uff0c\u901f\u5ea6\u4e00\u822c\n\n\u5982\u679c\u4fee\u6539\u5c11\u67e5\u8be2\u591a\u7684\u8bddAVL\u4f1a\u5f88\u6709\u4f18\u52bf\uff0c\u56e0\u4e3aAVL\u7684\u67e5\u8be2\u975e\u5e38\u5feb\n\n\u53ef\u4ee5\u5206\u88c2\u5408\u5e76\uff0c\u53ef\u6301\u4e45\u5316\uff0c\u4f46\u662f\u5206\u88c2\u5408\u5e76\u4e0d\u600e\u4e48\u597d\u5199\n\n\u597d\u50cf\u6ca1\u4ec0\u4e48\u4eba\u4f1a\uff1f\n\n7.SizeBalancedTree\n\n\u6240\u8c13\u7684\u201c\u81ea\u5df1\u53d1\u660e\u7684\u5e73\u8861\u6811\u201d\n\n\u53cd\u6b63\u6211\u611f\u89c9\u5c31\u662fAVL\u7136\u540e\u5f3a\u884c\u91cd\u91cf\u5e73\u8861\u3002\u3002\u3002\n\n\u8bba\u6587\u4e2d\u4ed6\u8bf4\u901f\u5ea6\u53ef\u4ee5\u540a\u6253\u7ea2\u9ed1\u6811\uff1f\n\n\u7136\u800c\u5b9e\u9645\u4e0a\u662f\u88abRBT\u540a\u6253\u51fa\u4e86\u4e00\u6761\u8857\n\n\u597d\u50cf\u8fd8\u662f\u6709\u4e9b\u4eba\u53bb\u5b66\u7684\n\n8.DigitalSearchTree\uff08\u5176\u5b9e\u5c31\u662fTrie\u548c\u503c\u57df\u7ebf\u6bb5\u6811\uff09\n\n\u6548\u7387\u8f83\u9ad8\uff0c\u4ee3\u7801\u91cf\u8f83\u4f4e\n\n\u53ef\u4ee5\u5206\u88c2\u5408\u5e76\uff0c\u53ef\u6301\u4e45\u5316\n\n\u4f46\u662f\u7a7a\u95f4\u8f83\u5927\uff0c\u4e3a\u4e86\u89e3\u51b3\u7a7a\u95f4\u95ee\u9898\u53ef\u4ee5\u52a8\u6001\u5f00\u70b9\uff08\u591alog\uff09\u6216\u8005\u79bb\u7ebf\u79bb\u6563\u5316\n\n9.RRFGT\n\n\u6548\u7387\u8f83\u9ad8\uff0c\u4ee3\u7801\u91cf\u6700\u5c0f\n\n\u53ef\u4ee5\u5206\u88c2\u5408\u5e76\uff0c\u53ef\u6301\u4e45\u5316\n\n\u901a\u7528\u5316\u7684\u6570\u636e\u7ed3\u6784\n\n\u563f\u563f\u563f\n\n10.B\u6811\u7cfb\u5217\n\n\u8fd9\u4e2a\u6211\u4e5f\u4e0d\u4f1a\n\n11.\u503c\u57df\u5206\u5757\n\n\u6548\u7387\u4e00\u822c\uff0c\u6bd5\u7adf\u6709\u6839\u53f7\n\n\u4e5f\u4e0d\u662f\u5f88\u597d\u5199\n\n12.\u6392\u5e8f\u5411\u91cf\u6811\uff08\u5176\u5b9e\u5c31\u662f\u4e2avector\uff09\n\n\u975e\u5e38\u597d\u5199\uff0c\u590d\u6742\u5ea6O( nm )\u3002\u3002\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u5e38\u6570\u95ee\u9898\u6240\u4ee5\u53ef\u4ee5\u8fc7\u9898\n\n\u800c\u4e14\u67e5kth\u662fO( 1 ) \u7684\n\n\u5176\u4ed6\u7684\u9ad8\u8bba\u4e1c\u897f\u5e0c\u671b\u5927\u5bb6\u8865\u5145\n\n\u6bd5\u7adf\u6211\u5f88\u83dc\uff0c\u5373\u5c06\u9000\u5f79\uff0c\u57fa\u672c\u4e0a\u4e5f\u4e0d\u4f1a\u4ec0\u4e48\u4e1c\u897f\n",
        "postTime": 1475481993,
        "uid": 3296,
        "name": "noip",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u6211\u51b3\u5b9a\u4e86\n\n~~\u6211\u4e0d\u5199\u4e86~~\n\n# \u6211\u8981\u8bb2\u7684\u662f**\u6709\u65cbTreap**\n\n## \u4e00\u3001\u6027\u8d28\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u77e5\u9053\u4ec0\u4e48\u662f\u6709\u65cbTreap\n\n### 1.\u5b83\u662f\u4e00\u9897\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u4e8c\u53c9\u67e5\u627e\u6811\uff09\n\t\n###### \u5373\uff1a\u5de6\u5b69\u5b50\u6743\u503c<\u6839\u6743\u503c<\u53f3\u5b69\u5b50\u6743\u503c\n\t \u5982\u56fe\uff1a\n     \n[\u56fe]\n\nfile:///G:/%E9%AB%98%E7%BA%A7%E6%A0%91%E7%BB%93%E6%9E%84/Treap/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png\n\n\n\u987a\u5e8f\uff1a1 2 3 4 5 6 7 \n\n### 2.\u5b83\u5177\u6709\u5806\u7684\u6027\u8d28\n\n##### \u6709\u4e2a\u95ee\u9898\uff1a\n\n \u65e2\u7136treap\u5177\u6709\u5806\u7684\u6027\u8d28\u4e3a\u4ec0\u4e48\u4e0d\u628a\u6743\u503c\u6700\u5927\u6216\u6700\u5c0f\u7684\u653e\u6839\u4e0a\u5462\uff1f\n        \u53ef\u8fd9\u6837\u53c8\u6ca1\u6709\u4e86\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\n\n#### \u56e0\u4e3a\u7ef4\u62a4\u5806\u7684\u6027\u8d28\u7684\u4e0d\u662f\u6743\u503c\uff0c\u800c\u662f\u968f\u673a\u751f\u6210\u7684\u968f\u673a\u6570\n\n\u5373\u6bcf\u6b21\u63d2\u5165\u65b0\u6743\u503c\u7684\u65f6\u5019\uff0c\u8981\u7ed9\u8fd9\u4e2a\u65b0\u751f\u6210\u7684\u8282\u70b9\u4e00\u4e2a\u968f\u673a\u503c\uff08\u8c03\u7528\u51fd\u6570rean()\uff09\n\n\u6b63\u662f\u8fd9\u4e2a\u968f\u673a\u503c\u7ef4\u62a4\u4e86\u5806\u7684\u6027\u8d28\uff0c\u8ba9\u6700\u5927\u6216\u6700\u5c0f\uff08\u4e00\u822c\u662f\u6700\u5c0f\uff09\u7684\u968f\u673a\u6570\u5f53\u6839\uff0c\u8fd9\u4fdd\u8bc1\u4e86\u6839\u7684\u968f\u673a\u6027\u548c\u6811\u7684\u9ad8\u5ea6\u4fdd\u6301\u5728log\u7ea7\u522b\n\n\u6240\u4ee5\uff0c\u8981\u968f\u65f6\u7ef4\u62a4\uff0c\u8fd9\u4e48\u7ef4\u62a4\u5462\uff1f\n\n\u65cb\u65cb\uff0c\u53f3\u65cb\u65cb\uff0c\u5982\u56fe\n\n[\u5de6\u65cb\u65cb\uff0c\u53f3\u65cb\u65cb]\n\nfile:///G:/%E9%AB%98%E7%BA%A7%E6%A0%91%E7%BB%93%E6%9E%84/Treap/%E5%B7%A6%E6%97%8B%E4%B8%8E%E5%8F%B3%E6%97%8B.png\n\n\n\u4ee3\u7801\u5728\u6b64\uff1a\n\n```\nvoid rturn(int &k)\n{//\u53f3\u65cb\uff0ct\u53d8\u6210\u6839\uff0ck\u4e3at\u7684\u53f3\u5b69\u5b50\uff0c\u540c\u65f6t\u7684\u53f3\u5b69\u5b50\u53d8\u6210k\u7684\u5de6\u5b69\u5b50 \n\tint tt=t[k].l;\n\tt[k].l=t[tt].r;\n\tt[tt].r=k;\n\tt[tt].size=t[k].size; \n\tt[k].size=t[t[k].l].size+t[t[k].r].size+t[k].w;\n\tk=tt;\n}\nvoid lturn(int &k)\n{//\u5de6\u65cb\uff0ct\u53d8\u6210\u6839\uff0ck\u53d8\u6210t\u7684\u5de6\u5b69\u5b50\uff0c\u540c\u65f6t\u7684\u5de6\u5b69\u5b50\u53d8\u6210k\u7684\u53f3\u5b69\u5b50 \n\tint tt=t[k].r;\n\tt[k].r=t[tt].l;\n\tt[tt].l=k;\n\tt[tt].size=t[k].size;\n\tt[k].size=t[t[k].l].size+t[t[k].r].size+t[k].w;\n\tk=tt;\n}\n```\n\n\n## \u4e8c\u3001\u5efa\u6811\n\n\u4ecb\u7ecd\u4e00\u4e0b\u53d8\u91cf\uff1a\n\n```\nstruct ege{\n\tint size,l,r,v,rand,w;\n\t//\u7b2ci\u4e2a\u70b9\u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\n\t//\u5de6\u5b69\u5b50\uff0c\u53f3\u5b69\u5b50\uff0c\u503c\n\t//\u968f\u673a\u751f\u6210\u7684\u503c\uff0c\u6ee1\u8db3\u5806\u7684\u6027\u8d28\n\t//\u76f8\u540c\u7684\u503c\u7684\u4e2a\u6570 \n}t[100005];\n```\n\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8981\u4ecb\u7ecd\u4e00\u4e2a\u5c0f\u4e1c\u897f\u3002\n\n\u4e3e\u4e2a\u6817\u5b50\n\n```\nvoid cr(int &k,int x)\n```\n\n\u5509\uff0c\u6211\u4eec\u53d1\u73b0k\u524d\u9762\u6709\u4e2a&\n\n\u8fd9\u662f\u4ec0\u4e48\uff1f\n\n&\u53eb\u53d6\u5730\u5740\u7b26\u53f7\uff0c\u53ef\u4ee5\u4f7f\u5f97\u53d8\u91cf\uff08k\uff09\u5728\u51fd\u6570\u91cc\u6539\u53d8\uff0c\n\n\u56e0\u4e3a\u63d2\u5165\u3001\u5220\u9664\u3001\u65cb\u8f6c\u7684\u65f6\u5019k\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\n\n\u5982\u679c\u4e0d\u7528&\u7684\u8bdd\uff0c\u4ee3\u7801\u4f1a\u53d8\u5f97\u6bd4\u8f83\u96be\u6253\u8fd8\u6076\u5fc3\n\n### 1.\u63d2\u5165\n\n\u989d\uff0c\u770b\u4ee3\u7801\u5427\n\n```\nvoid cr(int &k,int x)\n{//\u63d2\u5165\uff1a\u4ecek\u5f00\u59cb\u540c\u65f6k\u7684\u503c\u4e5f\u4f1a\u6539\u53d8 \n\tif(k==0)//\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9 \n\t{//\u82e5k\u8fd9\u4e2a\u503c\u4e3a0\uff0c\u5373\u4e3a\u7b2c\u4e00\u4e2a\u8fd9\u6837\u7684\u503c \n\t\tsize++;//\u603b\u7684\u8282\u70b9\u6570++\u5373\u4e3a1\uff1b\n\t\tk=size;//\u65b0\u5f00\u7684\u8282\u70b9\u7684\u7f16\u53f7\u5c31\u662f\u6700\u540e\u4e00\u4e2a \n\t\tt[k].size=t[k].w=1;\n\t\t//\u4ee5k\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3001\u91cd\u590d\u4e2a\u6570=1 \n\t\tt[k].v=x;\n\t\t//k\u8fd9\u4e2a\u70b9\u7684\u4ef7\u503c\u4e3ax \n\t\tt[k].rand=rand();\n\t\t//\u968f\u673a\u751f\u6210\u4e00\u4e2a\u6570\u6765\u7ef4\u62a4\u968f\u673a\u6027 \n\t\treturn;\n\t}\n\tt[k].size++;\n    //\u4ee5k\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570++ \n\tif(t[k].v==x) t[k].w++;\n    //\u5982\u679ck\u8282\u70b9\u7684\u503c\u548cx\u76f8\u540c\uff0c\u91cd\u590d\u4e2a\u6570++\uff1b\n\telse if(x>t[k].v)\n\t{//\u4e0d\u662f\uff0c\u6bd4k\u7684\u503c\u5927\uff0c\u53bb\u627e\u53f3\u5b50\u6811 \n\t\tcr(t[k].r,x);\n\t\tif(t[t[k].r].rand<t[k].rand) lturn(k);\n\t\t//\u53f3\u5b69\u5b50\u7684\u968f\u673a\u6570\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u968f\u673a\u6570\uff0c\u7ef4\u62a4\u4e8c\u53c9\u641c\u7d22\u6811 \n\t}\n\telse \n\t{//\u6bd4k\u5c0f\uff0c\u53bb\u627e\u5de6\u5b50\u6811 \n\t\tcr(t[k].l,x);\n\t\tif(t[t[k].l].rand<t[k].rand) rturn(k);\n        //\u5de6\u5b69\u5b50\u7684\u968f\u673a\u6570\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u968f\u673a\u6570\uff0c\u7ef4\u62a4\u4e8c\u53c9\u641c\u7d22\u6811 \n\t}\n}\n```\n\n### 2.\u5220\u9664\n\n```\nvoid sc(int &k,int x)\n{//\u5220\u9664 \n\tif(k==0) return;//\u8fd8\u6ca1\u6709\u503c\u6216\u5220\u5230\u6700\u540e\u4e00\u4e2a\u4e86\u5373\u6ca1\u6709\u4e86 \n\tif(t[k].v==x)\n\t{\n\t\tif(t[k].w>1)\n\t\t{//\u503c\u76f8\u540c\uff0c\u4e14\u4e0d\u6b62\u4e00\u4e2a\uff0c\u5904\u7406\u8fd4\u56de \n\t\t\tt[k].w--;\n\t\t\tt[k].size--;\n\t\t\treturn;\n\t\t}\n\t\tif(t[k].l*t[k].r==0)\n\t\t\tk=t[k].l+t[k].r;\n\t\t//\u6709\u4e00\u4e2a\u5b69\u5b50\u4e3a\u7a7a\uff0c\u76f4\u63a5\u53d8\u6210\u53e6\u4e00\u4e2a\u5b69\u5b50 \n\t\t//\u7ef4\u62a4\u5806\u7684\u6027\u8d28\uff0c\u65cb\u8f6c\u8fc7\u540ek\u7684\u503c\u53d1\u751f\u6539\u53d8\uff0c\u76f4\u63a5\u5220\u9664 \n\t\telse if(t[t[k].l].rand<t[k].rand) \n\t\t{\n\t\t\trturn(k);\n\t\t\tsc(k,x);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlturn(k);\n\t\t\tsc(k,x);\n\t\t}\n\t}\n\telse if(x>t[k].v)\n\t{//\u5927\u4e8ek\u7684\u6743\u503c\uff0c\u53bb\u627e\u53f3\u5b50\u6811 \n\t\tt[k].size--;\n\t\tsc(t[k].r,x);\n\t}\n\telse \n\t{//\u5c0f\u4e8e\uff0c\u53bb\u627e\u5de6\u5b50\u6811 \n\t\tt[k].size--;\n\t\tsc(t[k].l,x);\n\t}\n}\n```\n\n### 3.\u67e5\u8be2x\u6570\u7684\u6392\u540d\n\n\n```\nint findp(int k,int x)\n{//\u67e5\u8be2x\u6570\u7684\u6392\u540d\n\tif(k==0) return 0;\n\tif(t[k].v==x) return t[t[k].l].size+1;\n\telse if(x>t[k].v)\n\t\treturn t[t[k].l].size+t[k].w+findp(t[k].r,x);\n\telse return findp(t[k].l,x);\n}\n```\n\n4.\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570\n\n\n```\nint finds(int k,int x)\n{\n\tif(k==0) return 0;\n\tif(x<=t[t[k].l].size) return finds(t[k].l,x);\n\telse if(x>t[k].w+t[t[k].l].size) \n\t\treturn finds(t[k].r,x-t[k].w-t[t[k].l].size);\n\telse return t[k].v;\n}\n```\n\n### 5.\u67e5\u8be2\u524d\u9a71\n\n\n```\nint findq(int k,int x)\n{\n    if(k==0) return -inf;\n    \n\tif (t[k].v>=x) return findq(t[k].l,x);\n    \n    else return max(t[k].v,findq(t[k].r,x));\n}\n```\n\n### 6.\u67e5\u8be2\u540e\u9a71\n\n\n```\nint findh(int k,int x)\n{\n    if(k==0) return inf;\n    \n\tif (t[k].v<=x) return findh(t[k].r,x);\n\t\n\telse return min(t[k].v,findh(t[k].l,x));\n}\n```\n\n## \u4e09\u3001\u5b8c\u6574\u4ee3\u7801\n\n\u54ce\uff0c\u6211\u6253\u4e86\u8fd9\u4e48\u591a\uff0c\u4f60\u5e94\u8be5\u4f1a\u4e86\u5427\n\n\u76f4\u63a5\u5199\u5566^ ^",
        "postTime": 1566378664,
        "uid": 203827,
        "name": "\u6c5fyyyz1911",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "### \u5199\u5728\u524d\u9762\n\n\u5e73\u8861\u6811\u7684\u6a21\u677f\u5199\u4e86\u5927\u6982\u4e00\u4e2a\u591a\u5c0f\u65f6\uff0c\u5176\u5b9e\u539f\u7406\u8fd8\u662f\u86ee\u7b80\u5355\u7684\uff0c\u5c31\u662f\u4ee3\u7801\u592a\u957f\u5982\u679c\u80cc\u7684\u4e0d\u662f\u7279\u522b\u719f\uff0c\u8003\u573a\u4e0a\u53ef\u80fd\u4f1a\u6709\u7ec6\u8282\u51fa\u9519\u3002\n\n### \u5206\u6790\n\n\u5f53\u4e00\u68f5\u6811\u9000\u5316\u6210\u4e00\u6761\u94fe\u540e\uff0cBST\uff08\u4e8c\u53c9\u67e5\u627e\u6811\uff09\u7684\u6027\u8d28\u5bf9\u4e8e\u5b83\u6709\u5c31\u6ca1\u4ec0\u4e48\u610f\u4e49\u4e86\uff0c\u67e5\u8be2\u548c\u4fee\u6539\u5c31\u4f1a\u53d8\u5f97\u5f88\u6162\u3002\u6240\u4ee5\u6211\u4eec\u8981\u8ba9\u8fd9\u68f5\u6811\u5e73\u8861\uff0c\u4f7f\u5b83\u7684\u5de6\u53f3\u8282\u70b9\u4e2a\u6570\u76f8\u5dee\u8f83\u5c0f\uff0c\u91cd\u65b0\u6210\u4e3a\u4e00\u68f5\u9ad8\u6548\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u3002\n\n**\u600e\u4e48\u4f7f\u4e00\u68f5\u6811\u5e73\u8861\u5462\uff1f**\n\n\u5c31\u662f\u7ed9\u6bcf\u4e2a\u8282\u70b9\u9664\u4e86\u5b83\u539f\u6709\u7684\u6743\u503c\u4e4b\u5916\u53e6\u5916\u8d4b\u4e00\u4e2a\u968f\u673a\u751f\u6210\u7684\u6570dat\uff0c\u4ee5dat\u4e3a\u5173\u952e\u5b57\u4fdd\u8bc1\u6574\u68f5\u6811\u6ee1\u8db3\u5927\u6839\u5806\u7684\u6027\u8d28\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5c31\u901a\u8fc7\u5de6\u65cb\u548c\u53f3\u65cb\u7684\u64cd\u4f5c\u4f7f\u5176\u6ee1\u8db3\u3002\n\n**\u5de6\u65cb\uff1a**\n\n\u8ba9\u5f53\u524d\u70b9\uff08\u5b83\u7236\u4eb2\u7684\u53f3\u5b50\u8282\u70b9\uff09\u7ee7\u627f\u5b83\u7236\u4eb2\u7684\u4f4d\u7f6e\uff0c\u518d\u8ba9\u4ed6\u7236\u4eb2\u6210\u4e3a\u5b83\u7684\u5de6\u5b50\u8282\u70b9\uff0c\u5e76\u8ba9\u5b83\u539f\u6765\u7684\u5de6\u5b50\u8282\u70b9\u6210\u4e3a\u5b83\u7236\u4eb2\u7684\u53f3\u5b50\u8282\u70b9\u3002\n\n**\u53f3\u65cb\uff1a**\n\n\u8ba9\u5f53\u524d\u70b9\uff08\u5b83\u7236\u4eb2\u7684\u5de6\u5b50\u8282\u70b9\uff09\u7ee7\u627f\u5b83\u7236\u4eb2\u7684\u4f4d\u7f6e\uff0c\u518d\u8ba9\u4ed6\u7236\u4eb2\u6210\u4e3a\u5b83\u7684\u53f3\u5b50\u8282\u70b9\uff0c\u5e76\u8ba9\u5b83\u539f\u6765\u7684\u5de6\u5b50\u8282\u70b9\u6210\u4e3a\u5b83\u7236\u4eb2\u7684\u5de6\u5b50\u8282\u70b9\u3002\n\n\u4ee5\u4e0b\u7ed9\u51fa\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u548c\u6ce8\u89e3QWQ\n\n### \u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100010,inf=0x7fffffff;\nint n,opt,x,tot=0,root;\nstruct Treap{\n\tint l,r,val,dat;\n\tint cnt,size; \n}a[N];\n//\u8bfb\u5165\u4f18\u5316 \nint read()\n{\n\tint sum=0,f=1;\n\tchar ch=getchar();\n\twhile(ch>'9'||ch<'0')\n\t{if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){sum=sum*10+ch-'0';ch=getchar();}\n\treturn sum*f;\n}\n//\u65b0\u5efa\u4e00\u4e2a\u70b9 \nint New(int val)\n{\n   a[++tot].val=val;a[tot].dat=rand();\n   a[tot].cnt=a[tot].size=1;\t\n   return tot;\n}\n//\u66f4\u65b0\u5f53\u524d\u70b9\u4fe1\u606f \nvoid update(int p)\n{\n a[p].size=a[a[p].l].size+a[a[p].r].size+a[p].cnt;\n}\n//\u5efa\u7acb\u4e00\u68f5\u5e73\u8861\u6811\uff08\u521d\u59cb\u4e24\u4e2a\u70b9\uff09 \nvoid build()\n{\n\tNew(-inf);New(inf);\n\troot=1;a[1].r=2;\n    update(root);\n}\n//\u53f3\u65cb \nvoid zig(int&p)\n{ \n  int q=a[p].l;\n  a[p].l=a[q].r;a[q].r=p;p=q;\n  update(a[p].r);update(p);\n} \n//\u5de6\u65cb \nvoid zag(int&p)\n{\n\tint q=a[p].r;\n\ta[p].r=a[q].l;a[q].l=p;p=q;\n\tupdate(a[p].l);update(p);\n } \n//\u63d2\u5165\u4e00\u4e2a\u503c \nvoid insert(int &p,int val)\n{\n\tif(p==0){\n\tp=New(val);return;\n\t} \n\tif(val==a[p].val){\n\t\ta[p].cnt++;update(p);\n\t   return; \n\t}\n\tif(val<a[p].val)\n\t{\n\t\tinsert(a[p].l,val);\n\t\tif(a[p].dat<a[a[p].l].dat)zig(p); \n\t}\n\telse{\n\t\tinsert(a[p].r,val);\n\t\tif(a[p].dat<a[a[p].r].dat)zag(p);\n\t}\n\tupdate(p);\n}\n//\u5220\u9664\u4e00\u4e2a\u503c \nvoid remove(int&p,int val)\n{\n     if(p==0)return;\n     if(val==a[p].val)\n\t {\n\t \tif(a[p].cnt>1){a[p].cnt--,update(p);return;}\n\t \tif(a[p].l||a[p].r)\n\t \t{\n\t\t if(a[p].l==0||a[a[p].l].dat<a[a[p].r].dat)zag(p),remove(a[p].l,val);\n\t\t else zig(p),remove(a[p].r,val);\n\t\t update(p);\n\t\t}\n\t\telse p=0;\n\t\treturn;\n\t  } \n\t   if(a[p].val<val)remove(a[p].r,val);\n\t   else remove(a[p].l,val);\n\t   update(p);\n}\n//\u901a\u8fc7\u503c\u67e5\u8be2\u6392\u540d \nint get_rank(int p,int val)\n{   \n    if(p==0)return 0;\n\tif(a[p].val==val)return a[a[p].l].size+1;\n\tif(a[p].val>val)return get_rank(a[p].l,val);\n\telse return get_rank(a[p].r,val)+a[a[p].l].size+a[p].cnt;\n} \n//\u901a\u8fc7\u6392\u540d\u67e5\u8be2\u503c \nint get_val(int p,int rank)\n{\n\tif(p==0)return inf;\n\tif(a[a[p].l].size>=rank)return get_val(a[p].l,rank);\n\tif(a[a[p].l].size+a[p].cnt>=rank)return a[p].val;\n\treturn get_val(a[p].r,rank-a[a[p].l].size-a[p].cnt);\n}\n//\u67e5\u8be2\u524d\u9a71 \nint getpre(int val){\n\tint p=root,ans=1;\n    while(p){\n    \tif(val==a[p].val)\n    \t{\n    \t if(a[p].l)\n\t\t {\n\t\t \tp=a[p].l;\n\t\t \twhile(a[p].r>0)p=a[p].r;\n\t\t   ans=p;\n\t\t  }\n\t\t  break;\t\n\t\t}\n\t\tif(a[p].val<val&&a[p].val>a[ans].val)ans=p;\n\t\tif(val<a[p].val)p=a[p].l;\n\t\telse p=a[p].r;\n\t}\n\treturn a[ans].val;\n}\n//\u67e5\u8be2\u540e\u7f00 \nint getnext(int val){\n\tint p=root,ans=2;\n\twhile(p)\n\t{\n\t\tif(val==a[p].val){\n\t\t\tif(a[p].r){\n\t\t\t\tp=a[p].r;\n\t\t\t\twhile(a[p].l)p=a[p].l;\n               ans=p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif(a[p].val>val&&a[p].val<a[ans].val)ans=p;\n\t\tif(val<a[p].val) p=a[p].l;\n\t\telse p=a[p].r;\n\t}\n\treturn a[ans].val;\n}\nint main(){\n\tn=read();\n\tbuild();\n\twhile(n--)\n\t{\n\t\topt=read();x=read();\n\t    switch(opt)\n\t    {\n\t    case 1:\n\t    \tinsert(root,x);\n\t    \tbreak;\n\t    case 2:\n\t    \tremove(root,x);\n\t    \tbreak;\t\n\t\tcase 3:\n\t      printf(\"%d\\n\",get_rank(root,x)-1);\t\n\t    \tbreak;\n\t    case 4:\n\t      printf(\"%d\\n\",get_val(root,x+1));\n\t    \tbreak;\n\t    case 5:\n\t      printf(\"%d\\n\",getpre(x));\n\t    \tbreak;\n\t    case 6:\n\t       printf(\"%d\\n\",getnext(x));\n\t       break;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565178788,
        "uid": 100708,
        "name": "Trilarflagz",
        "ccfLevel": 0,
        "title": "\u666e\u901a\u5e73\u8861\u6811\u8be6\u7ec6\u6a21\u677f"
    },
    {
        "content": "fhq-treap\u5c0f\u7ed3\n\u7ec8\u4e8eAC fhq-Treap\u5566\uff01\uff01\uff01\u6492\u82b1\u5e86\u795dqwq\n\n\u56de\u5934\u770b\u770bfhq-treap\u771f\u7684\u543c\u54c7\uff01\n\n\u63a8\u4e00\u6ce2\u5927\u4f6c\u7684\u535a\u5ba2\uff1ahttps://www.cnblogs.com/ppprseter/p/9382132.html\n\n\u5c31\u662f\u770b\u8fd9\u4e2a\u5b66\u4f1a\u7684qwq\n\n\u8fdb\u5165\u6b63\u9898\uff1a\n\nfhq-treap\uff0c\u4e5f\u5177\u6709Treap\u7684\u6027\u8d28\uff0c\u5373\u5806+bst\u7684\u6027\u8d28\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u5b83\u4e0d\u9700\u8981\u8fdb\u884c\u65cb\u8f6c\u4ee5\u7ef4\u62a4\u5e73\u8861\uff0c\u800c\u662f\u7528\u62c6\u6811\u548c\u5408\u5e76\u7684\u64cd\u4f5c\u8ba9\u6811\u4fdd\u6301\u5e73\u8861\n\n\u652f\u6301\u533a\u95f4\u3001\u6548\u7387\u9ad8\u3001\u53ef\u6301\u4e45\u5316\uff01\n\n```\n\u89c4\u5b9a\u5982\u4e0b\uff1a\n\n\u3000\u3000val:\u6309\u5e73\u8861\u6811\u7684\u6743\u503c\n\n\u3000\u3000key:\u6309\u5806\u7684\u6743\u503c\n\n\u3000\u3000sz:\u5b50\u6811\u5927\u5c0f\n\n\u3000\u3000root:\u5f53\u524d\u6839\n\n\u3000\u3000ch[now][0] : \u5de6\u513f\u5b50\uff0cch[now][1]\u53f3\u513f\u5b50\n\n\u3000\u3000#define ls ch[now][0]    rs ch[now][1]\n```\n\n\u64cd\u4f5c1\uff1asplit\uff08\u62c6\u6811\uff09\n\n\u3000\u3000\u5c06\u4e00\u4e2a\u6811\u62c6\u6210\u4e24\u4e2a\uff1a\n\n```pascal\nvoid split(int now,int k,int &x,int &y)//x <= k,y > k\n{\n    if(!now) \n    {        \n        x = y = 0;\n        return;\n    }\n    if(val[now] <= k) x = now,split(rs,k,rs,y);\n    else y = now,split(ls,k,x,ls);\n    update(now);\n}\n```\n\n\u51fd\u6570\u610f\u4e49\u4e3a\uff1a\u4ee5now\u4e3a\u6839\uff0c\u5c06\u6811\u62c6\u6210\u4e24\u90e8\u5206\uff0cx\u90e8\u7684\u6743\u503c\u5168\u90e8<=k\uff0cy\u90e8>k\u3000\u3000\u3000\u3000\n\n\u8003\u8651\u5f53\u524d\u8282\u70b9now\uff1a\u5982\u679cval[now]<=k\uff0c\u90a3\u4e48now\u7684\u5de6\u5b50\u6811\u5e94\u5f53\u88ab\u5206\u914d\u7ed9x\uff08\u5341\u5206\u663e\u7136qwq\uff09\uff0c\u800cnow\u7684\u53f3\u5b50\u6811\u4e0d\u786e\u5b9a\uff0c\u540c\u65f6x\u7684\u53f3\u5b50\u6811\u4e5f\u4e0d\u786e\u5b9a\uff0c\u800cy\u672a\u88ab\u5206\u914d\uff0c\u56e0\u6b64\u8fdb\u5165\u4e0b\u4e00\u5c42\u6c42\u89e3\u3002>k\u540c\u7406\n\n\u64cd\u4f5c2\uff1amerge\uff08\u5408\u5e76\uff09\n\n\u3000\u3000\u5c06\u4e24\u4e2a\u6811\u5408\u5e76\uff0c\u8fd4\u56de\u65b0\u6811\u7684\u6839\uff1a\n\n\n```cpp\nint merge(int x,int y)//val\uff1ax <= y \n{\n    if(!x || !y) return x + y;\n    if(key[x] < key[y])\n    {\n        ch[x][1] = merge(ch[x][1],y);\n        update(x);\n        return x;\n    }\n    else \n    {\n        ch[y][0] = merge(x,ch[y][0]);\n        update(y);\n        return y;\n    }\n}\n```\n\n\u89c4\u5b9a\uff1aval[x] < val[y]\u3000\u3000\n\n\u5982\u679cx\u548cy\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u90a3\u4e48\u8fd4\u56de\u53e6\u4e00\u4e2a\u5373\u53ef\n\n\u7531\u4e8ex,y\u662f\u7531split\u5f97\u6765\uff0c\u56e0\u6b64\u4e8c\u8005\u5747\u662fbst,\u56e0\u6b64\u5728\u5408\u5e76\u65f6\uff0c\u53ea\u7528\u8003\u8651\u5806\u6027\u8d28\u5373\u53ef\n\n \n\n\u6709\u4e86\u8fd9\u4e24\u4e2a\uff0c\u5176\u4ed6\u7684\u64cd\u4f5c\u5c31\u56f4\u7ed5\u4ed6\u4eec\u6765\uff1a\n\n\u65b0\u5efa\u70b9\uff1a\u4e0d\u591a\u8bf4\n\n```\nint New(int k)\n{\n    key[++tot] = rand(),val[tot] = k,sz[tot] = 1;\n    return tot;\n}\n```\n\u63d2\u5165\uff1a\u3000\u3000\n\n\u3000\u3000\u5148\u5c06\u6811\u6309\u63d2\u5165\u6570\u5927\u5c0fk\u5206\u6210\u4e24\u4efd\uff0c\u628ak\u52a0\u5230x\u4e2d\uff0c\u518d\u628a\u6811\u5408\u5e76\u56de\u53bb\uff1a\n\n\n```cpp\nvoid insert(int k)\n{\n    int x,y;\n    split(root,k,x,y);\n    root = merge(merge(x,New(k)),y);\n}\n```\n\n\u5220\u9664\uff1a\n\n\u3000\u3000\u5148\u628a\u6811\u6309\u8981\u5220\u7684\u6570k\u5206\u6210x,y\uff0c\u6b64\u65f6x\u4e2d\u6240\u6709\u6570<=k,\u518d\u628ax\u6309k-1\u5206\u6210x\u548cz,\u6b64\u65f6z\u4e2d\u6240\u6709\u6570\u90fd\u7b49\u4e8ek\uff0c\u5220\u53bbz\u7684\u6839\uff0c\u5c31\u628az\u7684\u5de6\u53f3\u513f\u5b50\u5408\u5e76\uff08\u76f8\u5f53\u4e8e\u629b\u5f03\u4e86z\u7684\u6839\u8282\u70b9\uff09\uff0c\u7136\u540e\u518d\u5408\u5e76\u56de\u53bb\u5373\u53ef\n\n\n```cpp\nvoid del(int k)\n{\n    int x,y,z;\n    split(root,k,x,y);\n    split(x,k - 1,x,z);\n    z = merge(ch[z][0],ch[z][1]);\n    root = merge(x,merge(z,y));\n}\n```\n\n\u67e5k\u7684\u6392\u540d\uff1a\n\n\u3000\u3000\u3000\u628a\u6811\u6309k - 1\u5206\u6210\u4e24\u4efd\uff08\u6ce8\u610f\uff01\u4e0d\u80fd\u6309k\u5206\uff0c\u7531\u4e8e\u53ef\u80fd\u6709\u91cd\uff0c\u6309k\u5206\u65e0\u6cd5\u5f97\u5230\u6b63\u89e3\uff09\uff0c\u6b64\u65f6x\u90e8<=k - 1\uff0cy\u90e8>=k\uff0c\u8f93\u51fax\u90e8\u5927\u5c0f\u5373\u53ef\n\n\n```pascal\nvoid Rank(int k)\n{\n    int x,y;\n    split(root,k - 1,x,y);\n    printf(\"%d\\n\",sz[x] + 1);\n    root = merge(x,y);\n}\n```\n\n\u627e\u7b2ck\u5927\uff1a\n\n\t\u4e0eTreap\u76f8\u540c\n\n```cpp\nvoid fRank(int now,int k)\n{\n    while(1)\n    {\n        if(k <= sz[ls]) now = ls;\n        else if(k > sz[ls] + 1) k -= sz[ls] + 1,now = rs;\n        else { printf(\"%d\\n\",val[now]); return;}\n    }\n}\n\n```\n\u524d\u540e\u7ee7\uff1a\n\n\t\u7531\u62c6\u5206\u548c\u5408\u5e76\u6613\u5f97\n\n\n\n\u603b\u4f53\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<climits>\n#include<vector>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\n#define ls ch[now][0]\n#define rs ch[now][1]\ninline int read()\n{\n    int ans = 0,op = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9')\n    {\n        if(ch == '-') op = -1;\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9')\n    {\n        (ans *= 10) += ch - '0';\n        ch = getchar();\n    }\n    return ans * op;\n}\nconst int maxn = 1e5 + 5;\nint sz[maxn],key[maxn],val[maxn],tot,ch[maxn][2],root;//key:\u5806\u76f8\u5173;val:\u6811\u76f8\u5173 \ninline void update(int now)\n{\n    sz[now] = sz[ls] + sz[rs] + 1;\n}\nvoid split(int now,int k,int &x,int &y)//x <= k,y > k\n{\n    if(!now) \n    {        \n        x = y = 0;\n        return;\n    }\n    if(val[now] <= k) x = now,split(rs,k,rs,y);\n    else y = now,split(ls,k,x,ls);\n    update(now);\n}\nint merge(int x,int y)//val\uff1ax <= y \n{\n    if(!x || !y) return x + y;\n    if(key[x] < key[y])\n    {\n        ch[x][1] = merge(ch[x][1],y);\n        update(x);\n        return x;\n    }\n    else \n    {\n        ch[y][0] = merge(x,ch[y][0]);\n        update(y);\n        return y;\n    }\n}\nint New(int k)\n{\n    key[++tot] = rand(),val[tot] = k,sz[tot] = 1;\n    return tot;\n}\nvoid insert(int k)\n{\n    int x,y;\n    split(root,k,x,y);\n    root = merge(merge(x,New(k)),y);\n}\nvoid del(int k)\n{\n    int x,y,z;\n    split(root,k,x,y);\n    split(x,k - 1,x,z);\n    z = merge(ch[z][0],ch[z][1]);\n    root = merge(x,merge(z,y));\n}\nvoid Rank(int k)\n{\n    int x,y;\n    split(root,k - 1,x,y);\n    printf(\"%d\\n\",sz[x] + 1);\n    root = merge(x,y);\n}\nvoid fRank(int now,int k)\n{\n    while(1)\n    {\n        if(k <= sz[ls]) now = ls;\n        else if(k > sz[ls] + 1) k -= sz[ls] + 1,now = rs;\n        else { printf(\"%d\\n\",val[now]); return;}\n    }\n}\nvoid pre(int k)\n{\n    int x,y;\n    split(root,k - 1,x,y);\n    fRank(x,sz[x]);\n    root = merge(x,y);\n}\nvoid suc(int k)\n{\n    int x,y;\n    split(root,k,x,y);\n    fRank(y,1);\n    root = merge(x,y);\n}\nint main()\n{\n    int n = read();\n    int opt,x;\n    while(n--)\n    {\n        opt = read(),x = read(); \n        if(opt == 1) insert(x);\n        if(opt == 2) del(x);\n        if(opt == 3) Rank(x); \n        if(opt == 4) fRank(root,x);\n        if(opt == 5) pre(x);\n        if(opt == 6) suc(x); \n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1548674827,
        "uid": 86721,
        "name": "L_M_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "# Ads\n\n\u4e2a\u4eba\u535a\u5ba2\u540c\u6b65\uff1a\n\nwordpress\u7248\uff1a[\u70b9\u6211](https://oldblog.cinema000.xyz/1629.ruby)\n\nhexo\u7248\uff1a[\u70b9\u6211](https://blog.cinema000.xyz)\n\n\u60f3\u8981\u652f\u6301\u6211\u5c31\u70e6\u8bf7\u70b9\u51fbwordpress\u7248\u94fe\u63a5\uff08\u73b0\u5df2\u52a0\u5165Google Adsense\uff09\n\n# \u5206\u6790\n\n\u8fd9\u9898\u5728\u6570\u636e\u591a\u4e86\u4e24\u4e2a\u70b9\u540eRBT\u8fd8\u662f\u80fd\u591f\u8dd1\u5230139ms\uff08[\u70b9\u6211](https://www.luogu.org/record/show?rid=11832428)\uff09\u7684\uff0c\u5927\u6982\u4eba\u50bb\u5e38\u6570\u5927\uff0c\u800c\u4e14\u8fd9\u9898\u6709\u67e5\u8be2\u4e0d\u5b58\u5728\u7684\u70b9\u7684\u540e\u7ee7\u524d\u9a71\u4e4b\u7c7b\u7684\u6076\u5fc3\u64cd\u4f5c\uff0c\u5168\u7a0b\u6307\u9488\u5f0f\u5199\u6cd5\uff0c\u6211\u4e0d\u4f1a\u5199\u5185\u5b58\u6c60\u963f\uff0c\u5185\u5b58\u6cc4\u6f0f\u548c\u788e\u7247\u4e25\u91cd\uff0c\u65b0\u4e00\u4ee3\u8bc4\u6d4b\u673a\u8fd8\u4e0d\u8ba9\u8dd1\u51fa0ms\u7684\u70b9\u4e86\uff0c\uff0c\uff0c\n\nRBT\u7684\u7406\u8bba\u7b2c\u4e8c\u7bc7\u9898\u89e3\u5f04\u5f97\u5f88\u6e05\u695a\u5566\uff0c\u8fd9\u91cc\u53ea\u662f\u5b9e\u73b0\u7684\u7b80\u5355\u7248\uff08\u6ca1\u6709\u5199\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u6211\u7684\u7a0b\u5e8f\u5728\u6dfb\u52a0\u6d4b\u8bd5\u70b9\u540e\u8fd8\u6bd4\u4ed6\u5feb\uff08\u5f53\u7136\u6709\u5e38\u6570\u4f18\u5316\uff0c\uff0c\uff09\uff09\u3002\n\n# \u4ee3\u7801\n\n\u53ea\u6709\u77ed\u77ed\u7684226\u884c\u8bf6\n\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#include<cstdio>\n#include<cctype>\nnamespace IO{//fast-IO here}\nenum RBColor{RED,BLACK};\ntemplate<class T>\nclass RBTNode{\npublic:\n    T key;RBColor color;int size,cnt;\n    RBTNode *p,*ch[2];\n    RBTNode(){}\n    RBTNode(T key){\n        this -> key = key;\n        size = cnt = 1;\n        color = RED;\n    }\n};\ntemplate<class T>\nclass RBT{\npublic:\n    RBTNode<T> *root,*nil;\n    RBT<T>(){\n        nil = new RBTNode<T>(0);\n        nil -> color = BLACK;\n        nil -> size = nil -> cnt = 0;\n        root = new RBTNode<T>();\n        root = nil;\n        root -> p = nil;\n    }\n    inline void rotate(RBTNode<T> *x,bool isRight){\n        RBTNode<T> *y = x -> ch[!isRight];\n        x -> ch[!isRight] = y -> ch[isRight];\n        if(y -> ch[isRight] != nil) y -> ch[isRight] -> p = x;\n        y -> p = x -> p;\n        if(x -> p == nil) root = y;\n        else x -> p -> ch[x == x -> p -> ch[1]] = y;\n        y -> ch[isRight] = x;\n        x -> p = y;\n        y -> size = x -> size;\n        x -> size = x -> ch[0] -> size + x -> ch[1] -> size + x -> cnt;\n    }\n    inline RBTNode<T>* minimum(RBTNode<T> *x){\n        while(x -> ch[0] != nil) x = x -> ch[0];\n        return x;\n    }\n    inline RBTNode<T>* maximum(RBTNode<T> *x){\n        while(x -> ch[1] != nil) x = x -> ch[1];\n        return x;\n    }\n    inline RBTNode<T>* find(int k){\n        RBTNode<T> *x = root;\n        while(x != nil){\n            if(x -> key == k) return x;\n            x = x -> ch[x -> key < k];\n        }\n        return nil;\n    }\n    inline void insert(int k){\n        RBTNode<T> *x = root,*y = nil,*z = new RBTNode<T>(k);\n        while(x != nil){\n            y = x;\n            y -> size++;\n            if(x -> key == k){x -> cnt++;return;}\n            x = x -> ch[x -> key < k];\n        }\n        z -> p = y;\n        z -> ch[0] = z -> ch[1] = nil;\n        if(y == nil) root = z;\n        else y -> ch[y -> key < k] = z;\n        insertFixup(z);\n    }\n    inline void insertFixup(RBTNode<T> *z){\n        RBTNode<T> *fa,*ga,*y;\n        bool isLeft;\n        while(z -> p -> color == RED){\n            fa = z -> p,ga = fa -> p;\n            isLeft = fa == ga -> ch[0];\n            y = ga -> ch[isLeft];\n            if(y -> color == RED){\n                y -> color = fa -> color = BLACK;\n                ga -> color = RED;\n                z = ga;\n            }else{\n                if(z == fa -> ch[isLeft]){z = fa;rotate(z,!isLeft);}\n                z -> p -> color = BLACK;\n                z -> p -> p -> color = RED;\n                rotate(ga,isLeft);\n            }\n        }\n        root -> color = BLACK;\n    }\n    inline void transplant(RBTNode<T> *u,RBTNode<T> *v){\n        v -> p = u -> p;\n        if(u -> p == nil) root = v;\n        else u -> p -> ch[u == u -> p -> ch[1]] = v;\n    }\n    inline void remove(int k){\n        RBTNode<T> *z = root,*w = nil,*y,*x,*delta;\n        RBColor oldColor;\n        while(z != nil){\n            w = z;\n            w -> size--;\n            if(k == z -> key) break;\n            z = z -> ch[z -> key < k];\n        }\n        if(z != nil){\n            if(z -> cnt > 1){z -> cnt--;return;}\n            y = z;\n            oldColor = y -> color;\n            if(z -> ch[0] == nil){x = z -> ch[1];transplant(z,z -> ch[1]);\n            }else if(z -> ch[1] == nil){x = z -> ch[0];transplant(z,z -> ch[0]);\n            }else{\n                y = minimum(z -> ch[1]);\n                oldColor = y -> color;\n                x = y -> ch[1];\n                if(y -> p == z) x -> p = y;\n                else{\n                    delta = y;\n                    while(delta != z){\n                        delta -> size -= y -> cnt;\n                        delta = delta -> p;\n                    }\n                    transplant(y,y -> ch[1]);\n                    y -> ch[1] = z -> ch[1];\n                    y -> ch[1] -> p = y;\n                }\n                transplant(z,y);\n                y -> ch[0] = z -> ch[0];\n                y -> ch[0] -> p = y;\n                y -> color = z -> color;\n                y -> size = y -> ch[0] -> size + y -> ch[1] -> size + y -> cnt;\n            }\n            if(oldColor == BLACK) removeFixup(x);\n        }else{\n            while(w != nil){w -> size++;w = w -> p;}\n        }\n        delete z;\n    }\n    inline void removeFixup(RBTNode<T> *x){\n        RBTNode<T> *fa,*w;\n        bool isLeft;\n        while(x != root && x -> color == BLACK){\n            fa = x -> p;\n            isLeft = x == x -> p -> ch[0];\n            w = fa -> ch[isLeft];\n            if(w -> color == RED){\n                fa -> color = RED;\n                w -> color = BLACK;\n                rotate(fa,!isLeft);\n                w = fa -> ch[isLeft];\n            }\n            if(w -> ch[0] -> color == BLACK && w -> ch[1] -> color == BLACK){w -> color = RED;x = x -> p;}\n            else{\n                if(w -> ch[isLeft] -> color == BLACK){\n                    w -> color = RED;\n                    w -> ch[!isLeft] -> color = BLACK;\n                    rotate(w,isLeft);\n                    w = fa -> ch[isLeft];\n                }\n                w -> color = fa -> color;\n                fa -> color = BLACK;\n                w -> ch[isLeft] -> color = BLACK;\n                rotate(w -> p,!isLeft);\n                x = root;\n            }\n        }\n        x -> color = BLACK;\n    }\n    inline int rank(int k){\n        RBTNode<T> *x = root;\n        int ret = 0;\n        while(x != nil)\n            if(x -> key < k) ret += x -> ch[0] -> size + x -> cnt,x = x -> ch[1];\n            else x = x -> ch[0];\n        return ret;\n    }\n    inline int select(int k){\n        RBTNode<T> *x = root;\n        while(x != nil){\n            if(x -> ch[0] -> size + 1 <= k && x -> ch[0] -> size + x -> cnt >= k) return x -> key;\n            else{\n                if(x -> ch[0] -> size + x -> cnt < k) k -= x -> ch[0] -> size + x -> cnt,x = x -> ch[1];\n                else x = x -> ch[0];\n            }\n        }\n        return nil -> key;\n    }\n    inline RBTNode<T>* successor(int k){\n        insert(k);\n        RBTNode<T> *x = find(k),*ret;\n        if(x -> ch[1] != nil) ret = minimum(x -> ch[1]);\n        else{\n            while(x -> p -> ch[1] == x) x = x -> p;\n            ret = x -> p;\n        }\n        remove(k);\n        return ret;\n    }\n    inline RBTNode<T>* predecessor(int k){\n        insert(k);\n        RBTNode<T> *x = find(k),*ret;\n        if(x -> ch[0] != nil) ret = maximum(x -> ch[0]);\n        else{\n            while(x -> p -> ch[0] == x) x = x -> p;\n            ret = x -> p;\n        }\n        remove(k);\n        return ret;\n    }\n};\nRBT<int> T;\nint main(){\n    register int n,op,x;IO::read(n);\n    while(n--){\n        IO::read(op),IO::read(x);\n        switch(op){\n            case 1:T.insert(x);break;\n            case 2:T.remove(x);break;\n            case 3:IO::println(T.rank(x) + 1);break;\n            case 4:IO::println(T.select(x));break;\n            case 5:IO::println(T.predecessor(x) -> key);break;\n            case 6:IO::println(T.successor(x) -> key);break;\n        }\n    }\n    return 0;\n}\n```\n\n# Hints\n\n\u8fd9\u9898\u6570\u636e\u592azz\u4e86\uff0c\u5e94\u8be5\u5361\u6389Rank\u524d10\u7684\u6811\u72b6\u6570\u7ec4\u7684\u963f\uff08\u8fd9\u4e0d\u662f\u5e73\u8861\u6811\u7684\u677f\u9898\u561b\uff09",
        "postTime": 1539397878,
        "uid": 77211,
        "name": "i9_7980XE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u6211\u4e5f\u6765\u4e00\u53d1\u975e\u6b63\u89e3\u2014\u2014\n\n\u7ebf\u6bb5\u6811\uff0c\u4e0d\u662f\u697c\u4e0b\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u6216\u8005\u5e73\u8861\u7ebf\u6bb5\u6811\u4ec0\u4e48\u4e71\u4e03\u516b\u7cdf\u7684\uff0c\u76f4\u63a5\u5728\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u5b58\u6570\uff0c\u800c\u4e14\u4e3a\u4e86\u6ee1\u8db3\u4e8c\u5206\u7684\u5355\u8c03\u6027\uff0c\u6211\u4eec\u8981\u4ece\u5c0f\u5230\u5927\u5b58\u3002\u5982\u4f55\u4fdd\u8bc1\u8fd9\u4e2a\u987a\u5e8f\u5462\uff1f\u6211\u7528\u4e86\u79bb\u7ebf\u64cd\u4f5c\u5c31\u662f\u5148\u628a\u8981\u63d2\u5165\u7684\u6240\u6709\u6570\u4e0d\u7ba1\u4ed6\u662f\u5426\u5df2\u7ecf\u5220\u9664\u8fd8\u662f\u600e\u4e48\u7684\u90fd\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u6570\u5efa\u6811\uff0c\u5e76\u4e14\u56e0\u4e3a\u4e00\u5f00\u59cb~~\u6211\u4eec\u8981\u5047\u88c5~~\u8fd9\u662f\u68f5\u7a7a\u6811\uff0c\u7136\u540e\u5c31\u628a\u6240\u6709\u7684\u533a\u95f4\u90fd\u6807\u8bb0\u4e3a\u4e0d\u53ef\u7528\uff08\u672a\u63d2\u5165\uff09\uff0c\u7136\u540e\u6211\u4eec\u5728\u6bcf\u4e2a\u533a\u95f4\u8282\u70b9\u4e0a\u7ef4\u62a4\u8fd9\u4e48\u51e0\u4e2a\u503c\uff1a\u5df2\u7ecf\u63d2\u8fdb\u6765\u7684\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u672a\u63d2\u8fdb\u6765\u7684\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff08\u6ce8\u610f\u4e00\u5f00\u59cb\u7ebf\u6bb5\u6811\u4e2d\u5b9e\u9645\u4e0a\u5305\u62ec\u4e86\u6240\u6709\u53ef\u80fd\u4f1a\u88ab\u63d2\u8fdb\u6765\u7684\u6570\uff0c\u53ea\u662f\u6211\u4eec\u6807\u8bb0\u4e3a\u4e86\u672a\u63d2\u5165\u800c\u5df2\uff09\uff0c\u533a\u95f4\u5df2\u7ecf\u88ab\u63d2\u8fdb\u6765\u7684\u6570\u7684\u4e2a\u6570\u4ee5\u53ca\u8fd9\u4e2a\u533a\u95f4\u662f\u5426\u4e0d\u53ef\u7528\u3002\u7136\u540e\u63d2\u7684\u65f6\u5019\u6211\u4eec\u5229\u7528\u533a\u95f4\u672a\u63d2\u5165\u7684\u6570\u7684\u6700\u503c\u4e8c\u5206\u51fa\u8fd9\u4e2a\u6570\u7684\u67d0\u4e2a\u672a\u88ab\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u627e\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u6807\u8bb0\u4e3a\u5df2\u63d2\u5165\u3002\u5220\u9664\u64cd\u4f5c\u548c\u63d2\u5165\u64cd\u4f5c\u6b63\u597d\u76f8\u53cd\u4e5f\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u6807\u8bb0\u672a\u63d2\u5165\u800c\u5df2\u3002\u67e5\u6392\u540d\u5c31\u662f\u5229\u7528\u533a\u95f4\u5927\u5c0f\u8fdb\u884c\u4e8c\u5206\u5373\u53ef\uff0c\u67e5\u6570\u7684\u6392\u540d\u4e5f\u53ef\u4ee5\u4e8c\u5206\u6765\u641e\uff0c\u4e0d\u8fc7\u6211\u4eec\u8981\u5c3d\u91cf\u9760\u5de6\u627e\u56e0\u4e3a\u67e5\u7684\u662f\u8f83\u5c0f\u7684\u6392\u540d\u3002\u524d\u9a71\u540e\u7ee7\u5c31\u662f\u66f4\u52a0\u7b80\u5355\u7684\u4e8c\u5206\u4e86\u3002\u7136\u540e\u5c31\u5b8c\u4e86\u3002\u5176\u5b9e\u8fd9\u4e2a\u9898\u4e0d\u7ba1\u7528\u5e73\u8861\u6811\u8fd8\u662f\u7ebf\u6bb5\u6811\u90fd\u662f\u5728\u4f7f\u52b2\u7684\u4e8c\u5206\uff0c\u53ea\u662f\u5e73\u8861\u6811\u662f\u201c\u627e\u4e2d\u70b9\u5224\u5b9a\u201d\u7684\u4e8c\u5206\uff0c\u7ebf\u6bb5\u6811\u662f\u201c\u627e\u5de6\u53f3\u533a\u95f4\u5224\u5b9a\u201d\u7684\u4e8c\u5206\u3002\u8fd9\u4e2a\u65f6\u95f4\u548c\u4e00\u822c\u5e73\u8861\u6811\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u7a7a\u95f4\u7a0d\u5fae\u6709\u70b9\u5927\u800c\u5df2\uff0c~~\u4e2a\u4eba\u89c9\u5f97\u7ebf\u6bb5\u6811\u8981\u6bd4\u5e73\u8861\u6811\u597d\u5199\u5f97\u591a~~\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int get(){\n    int n=0;char c;\n    while((c=getchar())||1){\n        if(c>='0'&&c<='9')break;\n        if(c=='-')goto s;\n    }n=c-'0';while((c=getchar())||1){\n        if(c>='0'&&c<='9')n=n*10+c-'0';\n        else return(n);\n    }s:while((c=getchar())||1){\n        if(c>='0'&&c<='9')n=n*10-c+'0';\n        else return(n);\n    }\n}\ntypedef struct _n{\n    int left;int right;unsigned char bj;//\u533a\u95f4\u662f\u5426\u4e0d\u53ef\u7528\n    int maxdata;int mindata;//\u5df2\u63d2\u5165\u7684\u6700\u503c\n    \n    int maxn;int minn;//\u672a\u63d2\u5165\u7684\u6700\u503c\n    int size;//\u533a\u95f4\u6570\u5b57\u5927\u5c0f\n}node;node memchi[1000000];int gn=1;int ints[100001],number;\ninline void up(int tree){//\u6700\u5173\u952e\u7684\u4e0a\u653e\u64cd\u4f5c\n    int ls=memchi[tree].left,rs=memchi[tree].right;memchi[tree].size=0;memchi[tree].bj=0;\n    if(memchi[ls].bj&&memchi[rs].bj){\n        memchi[tree].maxn=max(memchi[ls].maxn,memchi[rs].maxn);\n        memchi[tree].minn=min(memchi[ls].minn,memchi[rs].minn);\n        memchi[tree].bj=1;memchi[tree].maxdata=-1234567890;memchi[tree].mindata=0x7fffffff;return;\n    }\n    memchi[tree].maxn=max(memchi[ls].maxn,memchi[rs].maxn);\n    memchi[tree].minn=min(memchi[ls].minn,memchi[rs].minn);\n    if(!memchi[ls].bj)memchi[tree].size+=memchi[ls].size;\n    if(!memchi[rs].bj)memchi[tree].size+=memchi[rs].size;\n    memchi[tree].bj=0;\n    memchi[tree].maxdata=max(memchi[ls].maxdata,memchi[rs].maxdata);\n    memchi[tree].mindata=min(memchi[ls].mindata,memchi[rs].mindata);\n}\nint build(int l,int r){//\u5efa\u6811\n    int tree=gn;gn++;memchi[tree].bj=1;\n    if(l==r){\n        memchi[tree].maxn=ints[l];memchi[tree].minn=ints[l];memchi[tree].size=0;\n        memchi[tree].maxdata=-1234567890;memchi[tree].mindata=0x7fffffff;\n    }else{\n        int mid=(l+r)>>1;memchi[tree].left=build(l,mid);memchi[tree].right=build(mid+1,r);up(tree);\n    }return(tree);\n}\nvoid insert(int l,int r,int tree){//\u63d2\u5165\n    if(l==r){\n        //printf(\"&&&&&! %d\\n\",ints[l]);\n        memchi[tree].bj=0;memchi[tree].size=1;\n        memchi[tree].maxdata=memchi[tree].mindata=ints[l];\n        memchi[tree].maxn=-1234567890;memchi[tree].minn=0x7fffffff;return;\n    }int mid=(l+r)>>1,ls=memchi[tree].left,rs=memchi[tree].right;\n    if(memchi[rs].minn<=number)insert(mid+1,r,rs);\n    else{\n        insert(l,mid,ls);\n    }up(tree);\n}\nvoid del(int l,int r,int tree){//\u5220\u9664\n    if(l==r){memchi[tree].size=0;\n        memchi[tree].bj=1;memchi[tree].maxdata=-1234567890;memchi[tree].mindata=0x7fffffff;\n        memchi[tree].maxn=memchi[tree].minn=ints[l];return;\n    }int mid=(l+r)>>1,ls=memchi[tree].left,rs=memchi[tree].right;\n    if(memchi[rs].mindata<=number)del(mid+1,r,rs);\n    else{\n        del(l,mid,ls);\n    }up(tree);\n}\nint kth(int l,int r,int tree,int k){//\u6392\u540d\u67e5\u627e\n    if(l==r)return(ints[l]);\n    int mid=(l+r)>>1,ls=memchi[tree].left,rs=memchi[tree].right;\n    if(k<=memchi[ls].size)return(kth(l,mid,ls,k));\n    return(kth(mid+1,r,rs,k-memchi[ls].size));\n}\nint rankof(int l,int r,int tree){//\u67e5\u627e\u6392\u540d\n    if(l==r)return(1);\n    int mid=(l+r)>>1,ls=memchi[tree].left,rs=memchi[tree].right;\n    if(memchi[ls].maxdata>=number)return(rankof(l,mid,ls));\n    return(rankof(mid+1,r,rs)+memchi[ls].size);//\u8981\u5c3d\u91cf\u5f80\u5de6\u627e\n}\nint getprev(int l,int r,int tree){//\u4e8c\u5206\u524d\u9a71\n    if(l==r)return(ints[l]);\n    int mid=(l+r)>>1,ls=memchi[tree].left,rs=memchi[tree].right;\n    if(memchi[rs].mindata>=number)return(getprev(l,mid,ls));\n    if(number>memchi[ls].maxdata&&number<=memchi[rs].mindata)return(memchi[ls].maxdata);\n    return(getprev(mid+1,r,rs));\n}\nint getnext(int l,int r,int tree){//\u4e8c\u5206\u540e\u7ee7\n    if(l==r)return(ints[l]);\n    int mid=(l+r)>>1,ls=memchi[tree].left,rs=memchi[tree].right;\n    if(memchi[ls].maxdata<=number)return(getnext(mid+1,r,rs));\n    if(number>=memchi[ls].maxdata&&number<memchi[rs].mindata)return(memchi[rs].mindata);\n    return(getnext(l,mid,ls));\n}\nint cmd[100001],xs[100001];//\u79bb\u7ebf\u5b58\u64cd\u4f5c\nvoid print_s(int num){\n    if(num<0){\n        putchar('-');print_s(-num);\n    }else{\n        if(num<10){\n            putchar(num+'0');\n        }else{\n            print_s(num/10);putchar(num%10+'0');\n        }\n    }\n}\nvoid print(int num){\n    print_s(num);putchar('\\n');\n}\nvoid dfs(int l,int r,int tree){//\u8c03\u8bd5\u7528\u7684\u2026\u2026\n    printf(\"In[%d,%d]:\\n\",l,r);\n    printf(\"bj=%d,maxdata=%d,mindata=%d,\",memchi[tree].bj,memchi[tree].maxdata,memchi[tree].mindata);\n    printf(\"minn=%d,maxn=%d,size=%d\\n\",memchi[tree].minn,memchi[tree].maxn,memchi[tree].size);\n    if(l!=r){\n        int mid=(l+r)>>1;\n        dfs(l,mid,memchi[tree].left);\n        dfs(mid+1,r,memchi[tree].right);\n    }\n}\nint main(){\n    int n=get();int ptr=1;\n    for(register int i=1;i<=n;i++){\n        cmd[i]=get(),xs[i]=get();\n        if(cmd[i]==1){\n            ints[ptr]=xs[i];ptr++;\n        }\n    }ptr--;sort(ints+1,ints+1+ptr);\n    int root=build(1,ptr);//\u6392\u5e8f\u7136\u540e\u5efa\u6811\n    for(register int i=1;i<=n;i++){\n        if(cmd[i]==1){\n            number=xs[i];insert(1,ptr,root);\n        }if(cmd[i]==2){\n            number=xs[i];del(1,ptr,root);\n        }if(cmd[i]==3){\n            number=xs[i];print(rankof(1,ptr,root));\n        }if(cmd[i]==4){\n            print(kth(1,ptr,root,xs[i]));\n        }if(cmd[i]==5){\n            number=xs[i];print(getprev(1,ptr,root));\n        }if(cmd[i]==6){\n            number=xs[i];print(getnext(1,ptr,root));\n        }\n    }\n    return(0);\n}\n```",
        "postTime": 1523336792,
        "uid": 56917,
        "name": "\u989c\u4f1f\u4e1a_C_Asm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u65e2\u7136\u90fd\u6765\u770b\u9898\u89e3\u4e86\uff0c\u90a3\u5c31\u59d1\u4e14\u8ba4\u4e3a\uff0c\u5404\u4f4d\u5df2\u7ecf\u5bf9\u5e73\u8861\u6811\u7684\u57fa\u672c\u5e38\u8bc6\u6709\u6240\u4e86\u89e3\u4e86\uff0c\u90a3\u4e48\u5728\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u5e73\u8861\u6811\u7684\u5b9e\u73b0\u4e86\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7684\u662ftreap\u6811\uff0c\u7b97\u662f\u5e73\u8861\u6811\u91cc\u4ee3\u7801\u5b9e\u73b0\u6700\u7b80\u5355\u7684\u5199\u6cd5\u4e86\uff0c\u7406\u89e3\u8d77\u6765\u4e5f\u4f1a\u5bb9\u6613\u4e00\u4e9b\u3002\n\ntreap\u6811\u7684\u7cbe\u9ad3\u5c31\u5728\u4e8e\u65cb\u8f6c\uff0c\u4e00\u65e6\u65cb\u8f6c\u6ca1\u5199\u5bf9\uff0c\u90a3\u5c31\u771f\u7684\u87ba\u65cb\u5347\u5929\u4e86\uff0c\u57fa\u672c\u601d\u8def\u5c31\u4e0d\u8bf4\u4e86\uff0c\u7279\u522b\u63d0\u793a\u5c31\u8981\u8bb0\u4f4f\uff0c\u5de6\u5b50\u6811\u662f\u53f3\u65cb\uff0c\u53f3\u5b50\u6811\u662f\u5de6\u65cb\u5c31\u597d\u3002\n\n\u7136\u540e\u5c31\u662f\u968f\u673a\u6743\u503c\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5e73\u8861\u6811\u5806\u7684\u968f\u673a\u6027\u4e0e\u552f\u4e00\u6027\uff0c\u603b\u4e4b\u5f88\u6709\u7528\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fd8\u662f\u770b\u770b\u4ee3\u7801\uff0c\u4ee3\u7801\u4e2d\u4e5f\u6709\u8f83\u8be6\u7ec6\u7684\u89e3\u91ca\uff0c\u65b0\u624b\u4ee3\u7801\u53ef\u80fd\u6709\u70b9\u5197\u957f\uff0c\u4f5c\u4e3a\u849f\u84bb\uff0c\u5e0c\u671b\u5927\u4f6c\u52ff\u55b7\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nstruct sd{\n    int l,r,sz,key,rd,re;//\u6811\u7684\u5de6\uff0c\u53f3\uff0c\u5927\u5c0f\uff0c\u5173\u952e\u503c\uff0c\u968f\u673a\u6743\u503c\uff0c\u91cd\u590d\u6b21\u6570\n    //\u6211\u8fd9\u91cc\u5efa\u7acb\u7684\u662f\u5c0f\u6839\u5806\uff0c\u5373\u968f\u673a\u6743\u503c\u5c0f\u7684\u5728\u4e0a\u65b9 \n}t[100005];\nint size,ans,root;\nvoid update(int k)//\u6bcf\u6b21\u4e0a\u6d6e\u90fd\u8981\u66f4\u65b0\u6811\u7684\u5927\u5c0f \n{\n    t[k].sz=t[t[k].l].sz+t[t[k].r].sz+t[k].re;\n}\nvoid right(int &k)//\u5411\u53f3\u65cb\u8f6c\uff0c\u662f\u5de6\u5b50\u6811\u5c31\u53f3\u65cb \n{\n    int y=t[k].l;t[k].l=t[y].r;t[y].r=k;\n    t[y].sz=t[k].sz;\n    update(k);k=y;\n}\nvoid left(int &k)//\u5411\u5de6\u65cb\u8f6c \uff0c\u662f\u53f3\u5b50\u6811\u5c31\u5de6\u65cb \n{\n    int y=t[k].r;t[k].r=t[y].l;t[y].l=k;\n    t[y].sz=t[k].sz;\n    update(k);k=y;\n}\nvoid inin(int &k,int x)//\u63d2\u5165x\n{\n    if(k==0)//\u5224\u65ad\u662f\u5426\u5230\u4e86\u53f6\u8282\u70b9\uff0c\u5982\u679c\u662f\u5c31\u5f00\u59cb\u63d2\u5165X \n    {\n        size++;\n        k=size;t[k].sz=1;\n        t[k].re=1;\n        t[k].key=x;\n        t[k].rd=rand();//\u968f\u673a\u6743\u503c\uff0c\u4fdd\u8bc1\u5e73\u8861\u6811\u7684\u968f\u673a\u6027\u4e0e\u552f\u4e00\u6027\uff0c\u8ba9\u51fa\u9898\u4eba\u5361\u4e0d\u4e86 \n        return;\n    }\n    t[k].sz++;//\u6bcf\u6b21\u5411\u4e0b\u63d2\u5165\u65f6\u90fd\u8981\u5728\u5b50\u6811\u5927\u5c0f\u52a0\u4e00\n    if(t[k].key==x)//\u5982\u679c\u8981\u63d2\u5165\u7684\u6570\u539f\u672c\u5c31\u5b58\u5728\uff0c\u90a3\u5c31\u76f4\u63a5\u5728\u8fd9\u4e2a\u7ed3\u70b9\u6570\u7684\u91cd\u590d\u6b21\u6570+1. \n    t[k].re++;\n    else\n    {\n        if(x>t[k].key)\n        {\n            inin(t[k].r,x);//\u5230\u53f3\u5b50\u6811\u4e2d\u53bb\u627e \n            if(t[t[k].r].rd<t[k].rd)//\u6bcf\u6b21\u63d2\u5165\u540e\u5224\u65ad\u662f\u5426\u6539\u53d8\u4e86\u5e73\u8861\u6811\u5806\u7684\u6027\u8d28 \n            left(k);\n        }\n        else\n        {\n            inin(t[k].l,x);//\u5728\u5de6\u5b50\u6811\u4e2d\u627e \n            if(t[t[k].l].rd<t[k].rd)\n            right(k);\n        }\n    }\n}\nvoid del(int &k,int x)//\u5220\u9664x\n{\n    if(k==0)\n    return;\n    if(t[k].key==x)//\u627e\u5230\u4e86\u76ee\u6807x\u5c31\u5c06\u5176\u4e0b\u6c89 \n    {\n        if(t[k].re>1)//\u5982\u679cx\u91cd\u590d\u591a\u6b21\u51fa\u73b0\uff0c\u53ea\u7528\u5220\u9664\u4e00\u4e2a\uff0c\u90a3\u5c31\u4e0d\u7528\u4e0b\u6c89\u4e86\uff0c\u76f4\u63a5\u5c06\u91cd\u590d\u6b21\u6570-1 \n        {\n            t[k].re--;\n            t[k].sz--;\n            return;\n        }\n        if(t[k].l*t[k].r==0)//\u5982\u679c\u67d0\u4e2a\u5b50\u6811\u4e3a\u7a7a\uff0c\u90a3\u5c31\u76f4\u63a5\u5c06\u90a3\u4e2a\u5b50\u6811\u63a5\u5230\u539f\u6811\u4e0a\uff0c\u7136\u540e\u5c31\u628a\u539f\u6811\u6324\u6389\u4e86 \n        k=t[k].l+t[k].r;\n        else\n        {\n            if(t[t[k].l].rd<t[t[k].r].rd)//\u4e3a\u4e86\u7ef4\u6301\u5e73\u8861\u6811\u5806\u7684\u6027\u8d28\uff0c\u6bcf\u6b21\u4e0b\u6c89\u90fd\u4e0e\u968f\u673a\u6743\u503c\u5c0f\u7684\u4ea4\u6362 \n            right(k),del(k,x);\n            else\n            left(k),del(k,x);\n        }\n    }\n    else//\u5982\u679c\u8fd8\u6ca1\u627e\u5230\u8981\u5220\u9664\u7684\u6570\uff0c\u90a3\u5c31\u7ee7\u7eed\u627e\u5457 \n    {\n        if(x>t[k].key)\n        {\n            t[k].sz--;\n            del(t[k].r,x);\n        }\n        else\n        {\n            t[k].sz--;\n            del(t[k].l,x);\n        }\n    }\n}\nint rank1(int k,int x)//\u67e5\u627e\u6570x\u7684\u6392\u540d\n{\n    if(k==0)return 0;\n    if(t[k].key==x)return t[t[k].l].sz+1;//\u627e\u5230\u76ee\u6807\u6570\uff0c\u52a0\u4e0a\u81ea\u5df1\u4e0e\u6bd4\u81ea\u5df1\u5c0f\u7684\uff08\u5373\u5de6\u5b50\u6811\uff09\u7684\u6570\u7684\u4e2a\u6570 \n    else\n    if(x>t[k].key)\n    return t[t[k].l].sz+t[k].re+rank1(t[k].r,x);//\u4e00\u65e6\u5728\u53f3\u5b50\u6811\u5bfb\u627e\u5c31\u8981\uff0c\u9012\u5f52\u56de\u6765\u65f6\u5c31\u8981\u52a0\u4e0a\u5de6\u5b50\u6811\u5927\u5c0f \n    else\n    return rank1(t[k].l,x);//\u5982\u679c\u5728\u5de6\u5b50\u6811\u627e\u7684\u8bdd\u5c31\u4e0d\u7528\u52a0\u4e86 \n}\nint rank2(int k,int x)//\u67e5\u627e\u6392\u540d\u4e3ax\u7684\u6570\n{\n    if(k==0)return 0;\n    if(x<=t[t[k].l].sz)//\u5728\u5de6\u5b50\u6811\u4e2d\u627e \n    return rank2(t[k].l,x);\n    else\n    if(x>(t[t[k].l].sz+t[k].re))\n    return rank2(t[k].r,x-t[t[k].l].sz-t[k].re);//\u5728\u53f3\u5b50\u6811\u4e2d\u627e \n    else\n    return t[k].key;//\u5982\u679c\u65e2\u4e0d\u5728\u5de6\u5b50\u6811\uff0c\u4e5f\u4e0d\u5728\u53f3\u5b50\u6811\uff0c\u90a3\u5c31\u5728\u8fd9\u4e2a\u7ed3\u70b9\u4e0a\u4e86\uff0c\u5c31\u662f\u8fd9\u4e2a\u7ed3\u70b9\u7684\u6570 \n}\nvoid pre(int k,int x)//\u627e\u524d\u7f00 \n{\n    if(k==0)return;\n    if(t[k].key<x)\n    {\n        ans=k;//\u6bcf\u6b21\u90fd\u66f4\u65b0ans\u7684\u503c\uff0c\u76f4\u5230\u627e\u5230\u6700\u503c \n        pre(t[k].r,x);\n    }\n    else\n    pre(t[k].l,x);//\u663e\u7136\u6ca1\u627e\u5230\u7b26\u5408\u8981\u6c42\u7684\uff0c\u90a3\u5c31\u7ee7\u7eed\u627e \n}\nvoid next(int k,int x)//\u627e\u540e\u7f00 \n{\n    if(k==0)return;\n    if(t[k].key>x)\n    {\n        ans=k;//\u4e0e\u627e\u524d\u7f00\u540c\u7406 \n        next(t[k].l,x);\n    }\n    else\n    next(t[k].r,x);\n}\nint main()\n{\n    srand(time(0));//\u597d\u50cf\u8fd9\u884c\u4ee3\u7801\u53ef\u52a0\u53ef\u4e0d\u52a0\uff0c\u672c\u6765\u5c31\u662f\u53ea\u4e3a\u4e86\u4f7f\u968f\u673a\u6570\u6bcf\u6b21\u4e0d\u540c\uff0c\u81f3\u4e8e\u4e3a\u4f55\u5220\u6389\u540e\u6ca1\u5f71\u54cd\uff0c\u6211\u5c31\u4e0d\u77e5\u9053\u4e86 \n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        int op,x;\n        scanf(\"%d%d\",&op,&x);\n        if(op==1)\n        inin(root,x);\n        if(op==2)\n        del(root,x);\n        if(op==3)\n        {\n            int res=rank1(root,x);\n            printf(\"%d\\n\",res);\n        }\n        if(op==4)\n        {\n            int res=rank2(root,x);\n            printf(\"%d\\n\",res);\n        }\n        if(op==5)\n        {\n            pre(root,x);\n            printf(\"%d\\n\",t[ans].key);\n        }\n        if(op==6)\n        {\n            next(root,x);\n            printf(\"%d\\n\",t[ans].key);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1513999636,
        "uid": 64915,
        "name": "genius777",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "(\u5c34\u5c2c\u3002\u3002\u4e0a\u6b21\u8d34\u9519\u4ee3\u7801\u4e86\uff09\n\n\n\u8fd9\u662f\u6211\u7528\u4e0d\u540c\u65b9\u6cd5\u505a\u8fc7\u6700\u591a\u6b21\u7684\u4e00\u9053\u9898\u4e86\u3002\u3002\u3002\n\n\n\u975e\u65cbtreap\u3002\n\n\n\u975e\u65cbtreap\u57fa\u4e8esplit\u548cmerge\u800c\u4e0d\u662frotate\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u7b80\u5316\u5176\u4ed6\u64cd\u4f5c\u3002\n\n\n\u4e0a\u4ee3\u7801\uff1a\n\n\n``` cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\nusing namespace std;\nint ans;\nstruct node{\n    int data,siz,RP;\n    node *ch[2];\n    node(int a=0){data=a;ch[0]=ch[1]=NULL;siz=1;RP=rand()*rand();}\n    void maintain(){\n        siz=1;\n        if(ch[0]!=NULL)siz+=ch[0]->siz;\n        if(ch[1]!=NULL)siz+=ch[1]->siz;\n    }\n};\nnode *root;\nclass treap{\n    private:\n        void split(int x,node *bt,node *&lfr,node *&rfr){\n            if(bt==NULL){lfr=rfr=NULL;return;}\n            if(x>=bt->data){lfr=bt;split(x,bt->ch[1],bt->ch[1],rfr);}\n            else{rfr=bt,split(x,bt->ch[0],lfr,bt->ch[0]);}\n            bt->maintain();\n        }\n        void merge(node *&bt,node *a,node *b){\n            if(a==NULL||b==NULL){bt=(a==NULL?b:a);return;}\n            if(a->RP<b->RP){bt=a;merge(bt->ch[1],bt->ch[1],b);}\n            else{bt=b;merge(bt->ch[0],a,bt->ch[0]);}\n            bt->maintain();\n        }\n    public:\n        treap(){root=NULL;}\n        void insert(int x){\n            node *a=NULL,*b=NULL,*c=new node(x);\n            split(x,root,a,b);\n            merge(a,a,c);\n            merge(root,a,b);\n        }\n        void remove(int x){\n            node *a=NULL,*b=NULL,*c=NULL;\n            split(x,root,a,b);\n            split(x-1,a,a,c);\n            merge(c,c->ch[0],c->ch[1]);\n            merge(a,a,c);\n            merge(root,a,b);\n        }\n        int rank(int x){\n            node *a=NULL,*b=NULL;\n            split(x-1,root,a,b);\n            int ans=(a==NULL?1:a->siz+1);\n            merge(root,a,b);\n            return ans;\n        }\n        int kth(int x,node *bt=root){\n            while(true){\n                if(bt==NULL)return 0;\n                int s=0;\n                if(bt->ch[0]!=NULL)s+=bt->ch[0]->siz;\n                if(s+1==x)break;\n                if(s>=x)bt=bt->ch[0];\n                else{x-=s+1;bt=bt->ch[1];}\n            }\n            return bt->data;\n        }\n        int minmax(int x){\n            node *a=NULL,*b=NULL;\n            split(x-1,root,a,b);\n            int ans=kth(a->siz,a);\n            merge(root,a,b);\n            return ans;\n        }\n        int maxmin(int x){\n            node *a=NULL,*b=NULL;\n            split(x,root,a,b);\n            int ans=kth(1,b);\n            merge(root,a,b);\n            return ans;\n        }\n};\ntreap tr;\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n        int opt,x;\n        scanf(\"%d%d\",&opt,&x);\n        if(opt==1)tr.insert(x);\n        else if(opt==2)tr.remove(x);\n        else if(opt==3)printf(\"%d\\n\",tr.rank(x));\n        else if(opt==4)printf(\"%d\\n\",tr.kth(x));\n        else if(opt==5)printf(\"%d\\n\",tr.minmax(x));\n        else if(opt==6)printf(\"%d\\n\",tr.maxmin(x));\n    }\n}\n```",
        "postTime": 1507456488,
        "uid": 52102,
        "name": "wycissilly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\n\n\n\n\n\n    \n    \n    \n\n    \n    \n\n    \n\n\n\n    \n\n    \n```cpp\n//\u8fd9\u662f\u5e73\u8861\u6811\u5165\u95e8\u840c\u65b0\u521a\u521a\u5b66\u4f1a\u7684\u666e\u901aTreap~QwQ\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\n#include<cmath>\n#include<string>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<map>\n#include<algorithm>\nusing namespace std;\nstruct node{\n    int key,yx;  //\u952e\u503c\uff0c\u4f18\u5148\u7ea7\uff08\u5c0f\u6839\u5806\uff09\n    int size,num;  //\u5b50\u6811\u5143\u7d20\u603b\u6570\uff0c\u5f53\u524d\u8282\u70b9\u5143\u7d20\u603b\u6570\n    node *ch[2];  //\u5de6\u53f3\u5b50\u6811\u6307\u9488\n};\nvoid rotate(node* &,bool);  //\u65cb\u8f6c\nvoid insert(node* &,int);  //\u63d2\u5165\nvoid del(node* &,int);  //\u5220\u9664\nint kth(node *,int);  //\u6c42\u7b2ck\u5927\u5143\u7d20\nint rank(node *,int);  //\u6c42\u5143\u7d20\u6392\u540d\nvoid pre(node *,int);  //\u6c42\u524d\u9a71\nvoid succ(node *,int);  //\u6c42\u540e\u7ee7\nnode *root=NULL;\nint ans;\nint n;\nint f,x;\nint main(){\n    srand(time(0));\n    scanf(\"%d\",&n);\n    while(n--){\n        scanf(\"%d%d\",&f,&x);\n        switch(f){\n            case 1:insert(root,x);break;\n            case 2:del(root,x);break;\n            case 3:printf(\"%d\\n\",rank(root,x));break;\n            case 4:printf(\"%d\\n\",kth(root,x));break;\n            case 5:{\n                pre(root,x);\n                printf(\"%d\\n\",ans);\n                break;\n            }\n            case 6:{\n                succ(root,x);\n                printf(\"%d\\n\",ans);\n                break;\n            }    \n        }\n    }\n    return 0;\n}\nvoid rotate(node* &p,bool f){\n    node *t=p->ch[f^1];\n    p->ch[f^1]=t->ch[f];  //\u6539\u53d8t\u7684\u5b50\u6811\u7684\u4f4d\u7f6e\n    t->ch[f]=p;  //\u5c06t\u65cb\u8f6c\u81f3p\u4e0a\u65b9\n    p->size=p->num;\n    if(p->ch[0]!=NULL)p->size+=p->ch[0]->size;\n    if(p->ch[1]!=NULL)p->size+=p->ch[1]->size;\n    t->size=t->num;\n    if(t->ch[0]!=NULL)t->size+=t->ch[0]->size;\n    if(t->ch[1]!=NULL)t->size+=t->ch[1]->size;  //\u7ef4\u62a4\u8282\u70b9\u4fe1\u606f\uff0c\u81ea\u5e95\u5411\u4e0a\u5148\u7b97p\u518d\u7b97t\uff0cVery important~\n    p=t;  //\u5c06\u65cb\u8f6c\u4e0a\u53bb\u7684t\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u5b50\u6811\u65b0\u7684\u6839\u8282\u70b9\uff0c\u4f7f\u7528\u5f15\u7528\u65b9\u5f0f\u4f20\u9012\n}\nvoid insert(node* &p,int x){\n    if(p==NULL){\n        p=(node *)malloc(sizeof(node));\n        p->key=x;\n        p->yx=rand();\n        p->size=p->num=1;\n        p->ch[0]=p->ch[1]=NULL;\n        return;\n    }  //\u65b0\u5efa\u8282\u70b9\uff0c\u840c\u65b0\u4e0d\u77e5\u6784\u9020\u51fd\u6570\u4e3a\u4f55\u7269\uff0c\u53ea\u597d\u9171\u7d2b\u4e86\u3002\u3002\u3002\n    if(p->key==x){\n        p->size++;\n        p->num++;\n        return;\n    }  //\u91cd\u590d\u5143\u7d20\u76f4\u63a5\u5728\u76f8\u5e94\u8282\u70b9\u7d2f\u52a0\u5143\u7d20\u4e2a\u6570\n    if(x<p->key){\n        insert(p->ch[0],x);  //\u9012\u5f52\u63d2\u5165\u5de6\u5b50\u6811\n        if(p->ch[0]->yx<p->yx)rotate(p,1);  //\u82e5\u63d2\u5165\u7684\u8282\u70b9\u4f18\u5148\u7ea7\u5c0f\u4e8e\u5f53\u524d\u5b50\u6811\u7684\u6839\u8282\u70b9\u5219\u5c06\u5176\u65cb\u8f6c\u81f3\u6839\u8282\u70b9\u4e0a\u65b9\n        else p->size++;  //\u8fd9\u6837\u5199\u7684\u6b63\u786e\u6027\u8bc1\u660e\uff1a1.\u5982\u679c\u9700\u8981\u65cb\u8f6c\uff0c\u5219\u5f53\u524d\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u4fe1\u606f\u90fd\u5df2\u7ef4\u62a4\u5b8c\u6210\uff1b2.\u5982\u679c\u4e0d\u9700\u65cb\u8f6c\uff0c\u90a3\u4e48\u5728\u5c06\u5143\u7d20\u9012\u5f52\u63d2\u5165\u5b50\u6811\u540e\uff0c\u53ea\u6709\u5f53\u524d\u5b50\u6811\u7684\u6839\u8282\u70b9\u7684\u4fe1\u606f\u8fd8\u672a\u66f4\u65b0\uff0c\u90a3\u4e48\u5c31\u5c06\u5176\u66f4\u65b0\u5373\u53ef\n    }\n    else{\n        insert(p->ch[1],x);\n        if(p->ch[1]->yx<p->yx)rotate(p,0);\n        else p->size++;\n    }  //\u540c\u7406\n}\nvoid del(node* &p,int x){\n    if(p==NULL)return;  //\u672c\u9898\u7684\u6570\u636e\u4fdd\u8bc1\u4e0d\u4f1a\u5220\u5230\u7a7a\u8282\u70b9\uff0c\u4e0d\u8fc7\u5199\u4e86\u4e5f\u65e0\u6240\u8c13\n    if(x==p->key){  //\u5f53\u524d\u8282\u70b9\u662f\u8981\u5220\u9664\u7684\u5143\u7d20\n        if(p->num>1){\n            p->size--;\n            p->num--;\n            return;\n        }  //\u82e5\u5143\u7d20\u91cd\u590d\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u51cf\u5c11\u5143\u7d20\u4e2a\u6570\u5373\u53ef\n        else{  //\u9700\u8981\u5220\u9664\u8282\u70b9\n            if(p->ch[0]==NULL){\n                node *t=p;\n                p=p->ch[1];\n                free(t);\n                return;\n            }  //\u82e5\u5de6\u5b50\u6811\u4e3a\u7a7a\u5219\u76f4\u63a5\u7528\u53f3\u5b50\u6811\u66ff\u4ee3\u5f53\u524d\u8282\u70b9\n            else if(p->ch[1]==NULL){\n                node *t=p;\n                p=p->ch[0];\n                free(t);\n                return;\n            }  //\u82e5\u53f3\u5b50\u6811\u4e3a\u7a7a\u5219\u76f4\u63a5\u7528\u5de6\u5b50\u6811\u66ff\u4ee3\u5f53\u524d\u8282\u70b9\n            else{  //\u5de6\u53f3\u5b50\u6811\u5747\u975e\u7a7a\uff0c\u5219\u5c06\u5f53\u524d\u8282\u70b9\u5411\u4e0b\u65cb\u8f6c\uff0c\u5e76\u9012\u5f52\u5728\u5b50\u6811\u4e2d\u5220\u9664\uff08\u540c\u65f6\u7ef4\u62a4\u5c0f\u6839\u5806\u7684\u6027\u8d28\uff09\n                if(p->ch[0]->yx<p->ch[1]->yx){  //\u5de6\u5b50\u6811\u4f18\u5148\u7ea7\u5c0f\u4e8e\u53f3\u5b50\u6811\u4f18\u5148\u7ea7\n                    rotate(p,1);  //\u5c06\u5de6\u5b50\u6811\u5411\u4e0a\u65cb\u8f6c\uff0c\u4f5c\u4e3a\u5f53\u524d\u6811\u65b0\u7684\u6839\u8282\u70b9\n                    del(p->ch[1],x);  //\u9012\u5f52\u5728\u53f3\u5b50\u6811\u4e2d\u5220\u9664\n                }\n                else{\n                    rotate(p,0);\n                    del(p->ch[0],x);\n                }  //\u540c\u7406\n                p->size--;  //\u9012\u5f52\u5220\u9664\u5b8c\u6210\u540e\uff0c\u8fd8\u5269\u5f53\u524d\u6839\u8282\u70b9\u7684\u4fe1\u606f\u672a\u66f4\u65b0\uff0c\u5219\u5c06\u5176\u66f4\u65b0\u5373\u53ef\n            }\n        }\n    }\n    else{  //\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u8981\u5220\u9664\u7684\u5143\u7d20\n        if(x<p->key)del(p->ch[0],x);  //\u9012\u5f52\u5728\u5de6\u5b50\u6811\u4e2d\u5220\u9664\n        else del(p->ch[1],x);  //\u9012\u5f52\u5728\u53f3\u5b50\u6811\u4e2d\u5220\u9664\n        p->size--;  //\u9012\u5f52\u5220\u9664\u5b8c\u6210\u540e\uff0c\u8fd8\u5269\u5f53\u524d\u6839\u8282\u70b9\u7684\u4fe1\u606f\u672a\u66f4\u65b0\uff0c\u5219\u5c06\u5176\u66f4\u65b0\u5373\u53ef\n    }\n}\nint kth(node *p,int x){\n    int s=0;  //\u8bb0\u5f55\u5de6\u5b50\u6811\u8282\u70b9\u6570\u91cf\n    if(p->ch[0]!=NULL)s=p->ch[0]->size;  //\u8fd9\u6837\u5199\u4ee5\u9632RE\n    if(x<=s)return kth(p->ch[0],x);  //\u67e5\u8be2\u8282\u70b9\u4f4d\u4e8e\u5de6\u5b50\u6811\u5185\uff0c\u5219\u5176\u5728\u5de6\u5b50\u6811\u7684\u6392\u540d\u5373\u662f\u5728\u5f53\u524d\u6811\u7684\u6392\u540d\n    else if(x<=s+p->num)return p->key;  //\u5f53\u524d\u8282\u70b9\u5373\u4e3a\u6240\u6c42\n    else return kth(p->ch[1],x-s-p->num);  //\u67e5\u8be2\u8282\u70b9\u4f4d\u4e8e\u53f3\u5b50\u6811\u5185\uff0c\u5219\u5176\u5728\u53f3\u5b50\u6811\u7684\u6392\u540d\uff1a\u5f53\u524d\u6811\u6392\u540d-\u5de6\u5b50\u6811\u5143\u7d20\u6570-\u5f53\u524d\u6811\u6839\u8282\u70b9\u5143\u7d20\u6570\n}\nint rank(node *p,int x){\n    int s=0;\n    if(p->ch[0]!=NULL)s=p->ch[0]->size;  //\u540c\u7406\n    if(x<p->key)return rank(p->ch[0],x);  //\u67e5\u8be2\u8282\u70b9\u4f4d\u4e8e\u5de6\u5b50\u6811\u5185\uff0c\u5219\u5176\u5728\u5f53\u524d\u6811\u7684\u6392\u540d\u5373\u662f\u5728\u5de6\u5b50\u6811\u7684\u6392\u540d\n    else if(x==p->key)return s+1;  //\u627e\u5230\u5f85\u67e5\u8be2\u8282\u70b9\uff0c\u5219\u5176\u5728\u5f53\u524d\u6811\u7684\u6392\u540d\u4e3a\uff1a\u5de6\u5b50\u6811\u5143\u7d20\u6570+1\n    else return s+p->num+rank(p->ch[1],x);  //\u67e5\u8be2\u8282\u70b9\u4f4d\u4e8e\u53f3\u5b50\u6811\u5185\uff0c\u5219\u5176\u5728\u5f53\u524d\u6811\u7684\u6392\u540d\u4e3a\uff1a\u5de6\u5b50\u6811\u5143\u7d20\u6570+\u5f53\u524d\u6811\u6839\u8282\u70b9\u5143\u7d20\u6570+\u5176\u5728\u53f3\u5b50\u6811\u7684\u6392\u540d\n}\nvoid pre(node *p,int x){\n    if(p==NULL)return;  //\u9012\u5f52\u8fb9\u754c\u9632\u6b62RE\n    if(p->key<x){  //\u5f53\u524d\u8282\u70b9\u952e\u503c\u4e3a\u53ef\u884c\u89e3\n        ans=p->key;  //\u4fdd\u5b58\u53ef\u884c\u89e3\n        pre(p->ch[1],x);  //\u5c1d\u8bd5\u5bfb\u627e\u66f4\u4f18\u89e3\n    }\n    else pre(p->ch[0],x);  //\u5f53\u524d\u8282\u70b9\u952e\u503c\u4e0d\u662f\u53ef\u884c\u89e3\u5219\u56de\u9000\n}\nvoid succ(node *p,int x){\n    if(p==NULL)return;\n    if(p->key>x){\n        ans=p->key;\n        succ(p->ch[0],x);\n    }\n    else succ(p->ch[1],x);\n}  //\u4e0epre\u540c\u7406\n```",
        "postTime": 1498024288,
        "uid": 22630,
        "name": "Running_Coder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    },
    {
        "content": "\u697c\u4e0b12\u7bc7\u9898\u89e3\u63d0\u5230\u4e86Treap\uff0c\u4f46\u90fd\u6ca1\u6709\u4ee3\u7801\u7684\u5b9e\u73b0\uff0c\n\n\u6211\u53d1\u4e00\u4e2a\u6b63\u5b97\u7684Treap\uff08\u6b63\u5b97\u7684\u6709\u65cb\u8f6c\u7684\uff09\uff1b\n\n\u521a\u5199\u5e73\u8861\u6811\u7684\u540c\u5b66\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u53c2\u8003\u54e6\uff01\n\n\n\u9996\u5148\u8981\u7406\u89e3Treap\uff0c\u5fc5\u987b\u8981\u6709\u5806\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u8fd9\u662fTreap\u7684\u6838\u5fc3\uff0c\n\n\u5c06Heap\u548cTree\u7ed3\u5408\u8d77\u6765\uff0c\u540c\u65f6\u6ee1\u8db3Heap\u548cBST\u7684\u6027\u8d28\uff1b\n\n\n\u5373\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff08E\uff0cF\uff09\uff0c\u5176\u4e2dE\u6ee1\u8db3BST\uff08\u4e8c\u53c9\u641c\u7d22\u6811\uff09\uff0c\n\nF\u6ee1\u8db3\u5806\u7684\u6027\u8d28\u3002\u5728\u751f\u6210Treap\u662f\uff0c\u6bcf\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u968f\u673a\u751f\u6210\u4e00\u4e2aF\uff0c\n\n\u5c06\u8be5\u8282\u70b9\u5148\u6309\u7167BST\u7684\u5e38\u89c4\u65b9\u6cd5\u63d2\u5165\u5230\u53f6\u8282\u70b9\uff0c\u5728\u6309\u7167\u5806\u7684\u5e38\u89c4\u65b9\u6cd5\uff0c\n\n\u52a0\u5165\u8fdd\u53cd\u7684\u5806\u7684\u6027\u8d28\u5c31\u4e0a\u6d6e\uff0c\u76f4\u5230\u5408\u7406\u4e3a\u6b62\uff1b\n\n\u7531\u4e8eF\u662f\u968f\u673a\u751f\u6210\u7684\uff0c\u6240\u4ee5\u8be5\u7b97\u6cd5\u7684\u671f\u671b\u590d\u6742\u5ea6\u662fO(NlogN)\uff1b\n\n\n\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\uff0c\u76f8\u5bf9\u4e8esplay\u7684\u4ee3\u7801\u5e94\u8be5\u7b80\u6d01\u5f88\u591a\u4e86\u5427\uff1a\n\n\uff08\u56e0\u4e3aTreap\u9664\u4e86\u5f88\u591a\u6811\u90fd\u6709\u7684\u65cb\u8f6c\u64cd\u4f5c\u4e4b\u5916\uff0c\u5c31\u6ca1\u6709\u7279\u6b8a\u7684\u64cd\u4f5c\u4e86\uff09\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\nusing namespace std;\n\nstruct TREAP{\n    int l,r,val,sz,recy,rd;\n    //sz\u8868\u793a\u6811\u7684\u8282\u70b9\u6570\uff0crecy\u8bb0\u5f55\u81ea\u5df1\u88ab\u91cd\u590d\u4e86\u51e0\u6b21\n    //rd\u8868\u793a\u8be5\u8282\u70b9\u7684\u4f18\u5148\u7ea7 \n}t[1000000];\n\nint m,size,root,ans;\n\n\nvoid update(int k){\n    t[k].sz=t[t[k].l].sz+t[t[k].r].sz+t[k].recy;\n    //\u66f4\u65b0\u7ef4\u62a4 \n}\n\nvoid left_rotate(int &k){\n    int y=t[k].r;t[k].r=t[y].l;t[y].l=k;\n    t[y].sz=t[k].sz;update(k);k=y;\n    //\u5de6\u65cb\uff0c\u81f3\u4e8e\u8fd9\u91cc\u7684k=y\uff0c\u7531\u4e8e\u4e0b\u9762\u7684\u9012\u5f52\u8c03\u7528\uff0c\n    //\u5b83\u4f1a\u4e00\u76f4\u8fed\u4ee3\uff0c\u6240\u4ee5\u65e0\u9700\u62c5\u5fc3\u4f1a\u6709\u4ec0\u4e48\u9519\u8bef \n}\nvoid right_rotate(int &k){\n    int y=t[k].l;t[k].l=t[y].r;t[y].r=k;\n    t[y].sz=t[k].sz;update(k);k=y;\n    //\u53f3\u65cb \n}\n\n\n//\u4ee5\u4e0b\u51fd\u6570\u7684\u8c03\u7528\u4e2d(int k)\u8868\u793a\u5728\u6839\u4e3ak\u7684\u5b50\u6811\u4e2d\n\nvoid insert(int &k,int x){//\u63d2\u5165\u64cd\u4f5c \n    if (k==0){//\u65e0\u8282\u70b9\u65f6\u7279\u5224\uff0c\n              //\u6216\u662f\u9012\u5f52\u7684\u8fb9\u754c\uff0c\u5373\u63d2\u5165\u53f6\u8282\u70b9 \n        ++size;k=size;t[k].sz=t[k].recy=1;\n        t[k].val=x;t[k].rd=rand();return ;\n        //rand()\u751f\u6210\u968f\u673a\u7684\u4f18\u5148\u7ea7\uff0c\u4fdd\u8bc1\u4e86\u671f\u671b\u590d\u6742\u5ea6 \n    }\n    ++t[k].sz;//\u6bcf\u6b21\u5411\u4e0b\u627e\u540c\u65f6\u589e\u52a0\u8be5\u8282\u70b91\u4e2a\u8282\u70b9\u6570\n    if (t[k].val==x) ++t[k].recy;\n              //\u5982\u679c\u662f\u76f8\u540c\u6570\u5b57\uff0c\u53ea\u9700++recy\u5373\u53ef \n    else if (x>t[k].val){\n        insert(t[k].r,x);\n        if (t[t[k].r].rd<t[k].rd) left_rotate(k);\n              //\u63d2\u5165\u540e\u5982\u679c\u8fdd\u53cd\u5806\u6027\u8d28\uff0c\u5c31\u8fdb\u884c\u4e0a\u6d6e \n    }else{\n        insert(t[k].l,x);\n        if (t[t[k].l].rd<t[k].rd) right_rotate(k);\n    }\n}\n\n\nvoid del(int &k,int x){\n    if (k==0) return ;//\u65e0\u8282\u70b9\u5c31\u8df3\u51fa \n    if (t[k].val==x){\n        if (t[k].recy>1){\n            --t[k].recy;--t[k].sz;return ;\n            //\u5982\u679c\u91cd\u590d\u4e86\uff0c\u53ea\u9700--recy\u5373\u53ef \n        }\n        if (t[k].l*t[k].r==0) k=t[k].l+t[k].r;\n            //\u5982\u679c\u5de6\u53f3\u513f\u5b50\u6709\u4e3a\u7a7a\u7684\u60c5\u51b5\n            //\u6216\u5c06\u5176\u53d8\u4e3a\u5176\u513f\u5b50\u8282\u70b9\uff0c\u6216\u5c06\u5176\u5220\u9664 \n        else if (t[t[k].l].rd<t[t[k].r].rd) \n                    right_rotate(k),del(k,x);\n            //\u5982\u679c\u5176\u5de6\u53f3\u513f\u5b50\u90fd\u6709\uff0c\u9009\u62e9\u4f18\u5148\u7ea7\u8f83\u5927\u7684\uff0c\n            //\u4fdd\u6301\u4ee5\u540e\u7684\u5806\u6027\u8d28\uff0c\u540c\u65f6\u5c06k\u8282\u70b9\u4e0b\u6c89 \n               else left_rotate(k),del(k,x);\n    }\n    else if (x>t[k].val)\n                --t[k].sz,del(t[k].r,x);\n            //\u5982\u679c\u5173\u952e\u503c\u4e0d\u540c\uff0c\u7ee7\u7eed\u5411\u4e0b\u627e \n           else --t[k].sz,del(t[k].l,x);\n}\n\n\nint atrank(int k,int x){//\u5bfb\u627e\u503c\u4e3ax\u7684\u6570\u7684\u6392\u540d \n    if (k==0) return 0;\n    if (t[k].val==x) return t[t[k].l].sz+1;\n        //\u5982\u679c\u627e\u7684\u5173\u952e\u5b57\uff0c\u6839\u636eBST\u7684\u6027\u8d28\uff0c\n        //\u5219\u5176\u6392\u540d\u4e3a\u5de6\u5b50\u6811\u7684\u5927\u5c0f+1 \n    else if (x>t[k].val)\n            return t[t[k].l].sz+t[k].recy+atrank(t[k].r,x);\n        //\u52a0\u4e0a\u524d\u9762\u6240\u6709\u6bd4\u5b83\u5c0f\u7684\u6570\uff0c\u5728\u53f3\u5b50\u6811\u4e2d\u627e \n       else return atrank(t[k].l,x);\n       //\u5982\u679c\u5728\u5de6\u5b50\u6811\u4e2d\u627e\u7684\u8bdd\u5c31\u4e0d\u7528\u52a0\u4e86 \n}\n\n\nint rerank(int k,int x){//\u5bfb\u627e\u6392\u540d\u4e3ax\u7684\u6570\u503c \n    if (k==0) return 0;\n    if (x<=t[t[k].l].sz) return rerank(t[k].l,x);\n        //\u5982\u679cx\u5c0f\u4e8e\u4e86\u5de6\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u90a3\u89e3\u4e00\u5b9a\u5728\u5de6\u5b50\u6811\u4e2d \n    else if (x>t[t[k].l].sz+t[k].recy)\n            return rerank(t[k].r,x-t[k].recy-t[t[k].l].sz);\n        //\u5982\u679cx\u5927\u4e8e\u7684\u5de6\u5b50\u6811\u7684\u5927\u5c0f+k\u7684\u91cd\u590d\u6b21\u6570\uff0c\n        //\u90a3\u5c31\u5728\u53f3\u5b50\u6811\u4e2d\u627e \n       else return t[k].val;\n        //\u5426\u5219\u5c31\u662f\u627e\u5230\u89e3\u4e86(\u5305\u542b\u4e86\u91cd\u590d\u6570\u5b57\u4e2d) \n}\n\n\nvoid pred(int k,int x){//\u627e\u524d\u7f00 \n    if (k==0) return ;\n    if (t[k].val<x){\n        ans=k;pred(t[k].r,x);\n        //\u627e\u5230\u4e86\u66f4\u4f18\u7684\u89e3\uff0c\u5c31\u66ff\u6362\u4e4b\n        //\u800c\u4e14\u5728\u5176\u53f3\u5b50\u6811\u4e2d\u4e0d\u53ef\u80fd\u518d\u6709\u66f4\u4f18\u7684\u4e86\n        //\u6545\u5411\u5176\u5de6\u5b50\u6811\u4e2d\u627e\n    }else pred(t[k].l,x);\n        //\u5426\u5219\u5c31\u5f80\u53f3\u5b50\u6811\u4e2d\u627e \n}\n\n\nvoid succ(int k,int x){//\u627e\u540e\u7f00 \n    if (k==0) return ;\n    if (t[k].val>x){\n        ans=k;succ(t[k].l,x);\n    }else succ(t[k].r,x);\n}\n\n\nint main(){\n    int f,x;\n    scanf(\"%d\",&m);\n    for (int i=1;i<=m;++i){\n        scanf(\"%d%d\",&f,&x);ans=0;\n        if (f==1) insert(root,x);\n        if (f==2) del(root,x);\n        if (f==3) printf(\"%d\\n\",atrank(root,x));\n        if (f==4) printf(\"%d\\n\",rerank(root,x));\n        if (f==5) {pred(root,x);printf(\"%d\\n\",t[ans].val);}\n        if (f==6) {succ(root,x);printf(\"%d\\n\",t[ans].val);}\n    }\n    return 0;\n}\n```",
        "postTime": 1494995706,
        "uid": 20360,
        "name": "zj\u4f59\u80fd",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3369 \u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff08Treap/SBT\uff09\u3011"
    }
]