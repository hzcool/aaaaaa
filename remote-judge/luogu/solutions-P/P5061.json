[
    {
        "content": "\u5bf9\u4e8e\u7b2c $(1)(2)$ \u95ee\uff0c\u53ef\u4ee5\u6c42\u8865\u56fe\u518d\u4e8c\u5206\u56fe\u5339\u914d ~~(\u4e0d\u8fc7\u51fa\u9898\u4eba\u4e0d\u4f1a\u56e0\u6b64\u4e0d\u8bb2\u8fd9\u4e2a)~~\n\n\u52a0\u5165\u7b2c $(3)$ \u95ee\u5c31\u662f\u4e3a\u4e86\u5361\u6389\u4e0a\u9762\u7684\u89e3\u6cd5\uff0c\u5176\u662f\u672c\u849f\u84bb\u4e5f\u4e0d\u77e5\u9053\u662f\u5426\u53ef\u884c\n\n\u51fa\u9898\u4eba\u7684\u89e3\u6cd5\u6709\u70b9\u975e\u5e38\u89c4\uff0c\u4e0d\u4fdd\u8bc1\u6ca1\u6709\u5176\u4ed6\u89e3\u6cd5\uff1a\n\n\u56e0\u4e3a\u53ea\u5206\u4e24\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u7b2c\u4e00\u6b21\u6c42\u89e3\uff0c\u5148\u628a\u4e00\u4e2a\u4eba\u653e\u5230\u7b2c\u4e00\u7ec4\uff0c\u7b2c\u4e8c\u7ec4\u4e3a\u7a7a\uff0c\u7136\u540e\u91cd\u590d\u8fed\u4ee3\u5bf9\u5269\u4e0b\u7684\u4eba\u8fdb\u884c\u653e\u7f6e\uff0c\u76f4\u5230\u8fdb\u884c\u4e86\u4e00\u6b21\u8fed\u4ee3\u5374\u4e00\u4e2a\u4eba\u4e5f\u6ca1\u6709\u653e\u7f6e(\u4ec5\u653e\u7f6e\u65b9\u6848\u552f\u4e00\u7684\u4eba\uff0c\u82e5\u4e24\u7ec4\u90fd\u53ef\u4ee5\u653e\uff0c\u90a3\u4e48\u5c31\u5148\u4fdd\u7559)\n\n\u4e8e\u662f\u6211\u4eec\u4fdd\u7559\u4e0b\u6765\u4e86\u4e00\u4e9b\u4eba\uff0c\u4e5f\u77e5\u9053\u4e86\u76ee\u524d\u5728\u7b2c\u4e00\u7ec4\u7684\u4eba\u5fc5\u987b\u4e0e\u7b2c\u4e8c\u7ec4\u7684\u4eba\u5206\u5f00\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u4fdd\u7559\u4e0b\u6765\u7684\u4eba\u7ee7\u7eed\u5904\u7406\uff0c\u8fdb\u884c\u7b2c\u4e8c/\u4e09/\u56db......\u6b21\u6c42\u89e3\uff0c\u5148\u628a\u4e00\u4e2a\u4eba\u653e\u5230\u7b2c\u4e00\u7ec4......\n\n\u6700\u540e\u6211\u4eec\u628a\u6240\u6709\u7684\u4eba\u90fd\u653e\u5b8c\uff0c\u5f97\u5230\u4e00\u4e9b\u5173\u7cfb\uff0c\u5373\u540c\u4e00\u6b21\u6c42\u89e3\u4e2d\u5f97\u5230\u7684\u4e24\u7ec4\u4eba\u5fc5\u987b\u5206\u5f00\uff0c\u4e0d\u540c\u6b21\u6c42\u89e3\u5f97\u5230\u7684\u5c0f\u7ec4\u53ef\u4ee5\u968f\u610f\u6df7\u5408(\u5728\u4e0a\u8ff0\u524d\u63d0\u4e0b)\u3002\n\n\u53ef\u4ee5\u8fd9\u6837\u63cf\u8ff0\uff1a\n\n\u6709 $A$ \uff0c$B$ \u4e24\u4e2a\u7b49\u957f\u65e0\u8d1f\u503c\u7684\u5e8f\u5217\n\n\u73b0\u5728\u628a$A$ \uff0c$B$ \u4e2d\u7684\u503c\u5206\u6210\u4e24\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u7684\u6743\u503c\u548c\u4ee3\u8868\u7684\u5c31\u662f\u4eba\u6570\uff0c $A[i]$ \u548c $B[i]$ \u4e0d\u80fd\u5b58\u5728\u4e8e\u540c\u4e00\u7ec4\uff0c\u6c42\u80fd\u5f97\u5230\u7684\u65e0\u5e8f\u6743\u503c\u4e8c\u5143\u7ec4\u4e0d\u540c\u7684\u5206\u7ec4\u65b9\u6848\u6570\u548c\u4e24\u7ec4\u6743\u503c\u6700\u63a5\u8fd1\u7684\u4e00\u79cd\u65b9\u6848\u3002\n\n\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u5373\u53ef\u6c42\u89e3\u7b2c $(1)(2)$ \u95ee\n\n\u5bf9\u4e8e\u7b2c\u4e09\u95ee\uff0c\u5229\u7528\u521a\u521a\u63d0\u5230\u7684\uff1a\n\n**\u540c\u4e00\u6b21\u6c42\u89e3\u4e2d\u5f97\u5230\u7684\u4e24\u7ec4\u4eba\u5fc5\u987b\u5206\u5f00\uff0c\u4e0d\u540c\u6b21\u6c42\u89e3\u5f97\u5230\u7684\u5c0f\u7ec4\u53ef\u4ee5\u968f\u610f\u6df7\u5408(\u5728\u4e0a\u8ff0\u524d\u63d0\u4e0b)\u3002**\n\n\u5c31\u5f88\u5bb9\u6613\u6c42\u89e3\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u6807\u8bb0\u6bcf\u4e00\u4e2a\u4eba\u5c5e\u4e8e\u7b2c\u51e0\u6b21\u6c42\u89e3\u7b2c\u51e0\u7ec4\uff0c\u53ea\u8981\u4e0d\u5728\u540c\u4e00\u6b21\u6c42\u89e3\u7684\u76f8\u53cd\u7ec4\u5c31\u6709\u53ef\u80fd\u5206\u5728\u540c\u4e00\u7ec4\u3002\n\n\n\n~~\u8fd9\u4e2a\u601d\u60f3\u4e0d\u662f\u5f88\u597d\u8bb2\uff0c\u6211\u5df2\u7ecf\u5c3d\u529b\u4e86~~\n\n\u8003\u8651\u5b9e\u73b0\u8fd9\u4e2a\u601d\u60f3\uff0c\u6211\u4eec\u4f7f\u7528 $dfs$\uff0c\u4e00\u6b21$dfs$\u8d1f\u8d23\u540c\u4e00\u6b21\u6c42\u89e3\u7684\u8fed\u4ee3\uff0c\u4e00\u4e2a$dfs$\u5b9e\u73b0\u53cd\u590d\u6c42\u89e3\u77e5\u9053\u6240\u6709\u4eba\u90fd\u6709\u4e86\u5f52\u5c5e\uff0c\u56e0\u6b64\u6700\u540e\u662f\u4e24\u4e2a $dfs $ \u4e92\u76f8\u8c03\u7528......\u8fd9\u5bf9\u4ee3\u7801\u5b9e\u73b0\u80fd\u529b\u6709\u4e00\u5b9a\u8981\u6c42\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1f\u4e00\u6b21\u6c42\u89e3\u81f3\u5c11\u5206\u914d\u4e00\u4e2a\u4eba\uff0c\u6c42\u89e3\u8c03\u7528\u7684 $dfs$ \u8fdb\u884c\u4e00\u6b21\u4e5f\u4e00\u5b9a\u5206\u914d\u81f3\u5c11\u4e00\u4e2a\u4eba\uff0c\u5426\u5219\u5c31\u4f1a\u56de\u5230\u6c42\u89e3\u8fc7\u7a0b\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(N^2)$\n\n$Code:$\n```\n\n#include<iostream>\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\n#define maxx(a,b) (a>b)?a:b\n#define minx(a,b) (a<b)?a:b\n#define mod 1000000007\ninline int read()\n{\n    int q=0;\n    char c=getchar();\n    while(!isdigit(c))\n        c=getchar();\n    while(isdigit(c))\n        q=q*10+c-'0',c=getchar();\n    return q;\n}\nint matrix[2510][2510],s1[2510][2510],s2[2510][2510],tmp[2510],tmp1[2510][2510],tmp2[2510][2510],f[2510][2510],mem[710][2],data[2510*2500][2];\nint n,m,pos,statistic,u,v,top,ans,max_ans;\nvoid divide(int,int);\nvoid solve(int[]);\nvoid solve(int q[])\n{\n    if(!q[0])\n        return;\n    top++;\n    s1[top][1]=q[1],s1[top][0]=1;\n    mem[q[1]][0]=top,mem[q[1]][1]=1;\n    for(register int i=2;i<=q[0];i++)\n        tmp1[top][i-1]=q[i];\n    tmp1[top][0]=q[0]-1;\n    divide(top,2);\n}\n\nvoid divide(int x,int r)//x\u9636,\u653e\u5230\u54ea \n{\n    if(r==2)\n    {\n        bool flag=false;\n        tmp2[x][0]=0;\n        for(int i=1;i<=tmp1[x][0];i++)\n        {\n            pos=1;\n            for(int j=1;j<=s1[x][0];j++)\n                if(!matrix[tmp1[x][i]][s1[x][j]])\n                {\n                    pos=2;\n                    flag=true;\n                    break;\n                }\n            if(pos==2)\t\n            {\n                for(int j=1;j<=s2[x][0];j++)\n                    if(!matrix[tmp1[x][i]][s2[x][j]])\n                    {\n                        printf(\"-1\\n%d\",m);\n                        exit(0);\n                    }\n                s2[x][++s2[x][0]]=tmp1[x][i],mem[s2[x][s2[x][0]]][0]=x,mem[s2[x][s2[x][0]]][1]=r;\n            }\n            else\n                tmp2[x][++tmp2[x][0]]=tmp1[x][i];\n        }\n        if(flag)\n            divide(x,1);\n        else\n            solve(tmp1[x]);\n    }\n    else\n    {\n        bool flag=false;\n        tmp1[x][0]=0;\n        for(int i=1;i<=tmp2[x][0];i++)\n        {\n            pos=2;\n            for(int j=1;j<=s2[x][0];j++)\n                if(!matrix[tmp2[x][i]][s2[x][j]])\n                {\n                    pos=1;\n                    flag=true;\n                    break;\n                }\n            if(pos==1)\t\n            {\n                for(int j=1;j<=s1[x][0];j++)\n                    if(!matrix[tmp2[x][i]][s1[x][j]])\n                    {\n                        printf(\"-1\\n%d\",m);\n                        exit(0);\n                    }\n                s1[x][++s1[x][0]]=tmp2[x][i],mem[s1[x][s1[x][0]]][0]=x,mem[s1[x][s1[x][0]]][1]=r;\n            }\n            else\n                tmp1[x][++tmp1[x][0]]=tmp2[x][i];\n        }\n        if(flag)\n            divide(x,2);\n        else\n            solve(tmp2[x]);\n    }\n}\n\ninline long long pow(int b,int p)\n{\n    long long g=1,base=b;\n    while(p)\n    {\n        if(p&1)\n            g*=base,g%=mod;\n        p=p>>1,base*=base,base%=mod;\n    }\n    return g;\n}\n\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n    {\n        u=read(),v=read();\n        data[i][0]=u,data[i][1]=v;\n        matrix[u][v]=matrix[v][u]=1;\n    }\n    for(int i=1;i<=n;i++)\n        tmp[i]=i;\n    tmp[0]=n;\n    solve(tmp);\n    f[0][0]=1;\n    for(int i=1;i<=top;i++)//\u52a8\u6001\u89c4\u5212\u8fc7\u7a0b\n        for(int j=n;j>=0;j--)\n            f[i][j]|=(f[i-1][j-s1[i][0]]|f[i-1][j-s2[i][0]]);\n    for(int i=n/2;i>=0;i--)\n        if(f[top][i])\n        {\n            if(!max_ans)\n                max_ans=i;\n            ans++;\n        }\n   for(register int i=1;i<=m;i++)\n    \tif(mem[data[i][0]][0]==mem[data[i][1]][0]&&mem[data[i][0]][1]!=mem[data[i][1]][1])\n    \t\tstatistic++;\n    printf(\"%d %lld\\n%d\",ans,(pow(2,n-max_ans)-pow(2,max_ans)+mod)%mod,statistic);\n    return 0;\n} \n\n```",
        "postTime": 1543676331,
        "uid": 68975,
        "name": "\u5b66\u65e0\u6b62\u5883",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5061 \u3010\u79d8\u5bc6\u4efb\u52a1\u3011"
    },
    {
        "content": "$stO$ \u51fa\u9898\u4eba\uff0c\u9ad8\u8d28\u91cf\u7684\u4e00\u9053\u9898\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u505a\u6cd5\n\n$Q1$:\u539f\u56fe\u4e2d\u7ed9\u51fa\u7684\u8fb9\u662f\u53ef\u4ee5\u5728\u540c\u4e00\u7ec4\uff0c\u90a3\u4e48\u539f\u56fe\u7684\u8865\u56fe\u7684\u8fb9\u5c31\u662f\u4e0d\u518d\u540c\u4e00\u7ec4\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u8fdb\u884c\u4e8c\u5206\u56fe\u67d3\u8272\uff0c\u81f3\u6b64\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u5408\u6cd5\uff0c\u5bf9\u4e8e\u65b9\u6848\u6570\uff0c\u7531\u4e8e\u8981\u6c42\u5206\u7ec4\u4eba\u6570\u4e0d\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5728\u4e8c\u5206\u56fe\u67d3\u8272\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u8054\u901a\u5757\u9ed1\u767d\u70b9\u4e2a\u6570\uff0c\u8fdb\u884c\u52a8\u6001\u89c4\u5212,$num$\u4e3a\u8054\u901a\u5757\u4e2a\u6570\u3002\n\n$f[i][j]|=f[i-1][j-a[i][0]]|f[i-1][j-a[i][1]]$\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u90a3\u4e9b\u5206\u7ec4\u65b9\u6848\u5408\u6cd5\uff1a\u53ea\u8981$f[num][i]$\u4e3a$true$\u5373\u53ef\uff08\u56e0\u4e3a\u5982\u679c\u539f\u4e8c\u5206\u56fe\u5408\u6cd5\u4e14$f[num][i]$\u5408\u6cd5\u90a3\u4e48$f[num][n-i]$\u4e00\u5b9a\u5408\u6cd5\u3002\n\n$Q2$:\u5bf9\u4e8e\u6700\u5c0f\u5dee\u503c\u65b9\u6848\uff0c\u5c31\u662f$max_{i=0}^{n/2}$ $i$ $[f[num][i]==1]$\u548c$n-i$\n\n$Q3$:\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u770b\u5230\u5176\u4ed6\u9898\u89e3\u90fd\u662f\u66b4\u529b\u679a\u4e3e$i$,$j$\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u505a\u6cd5\uff0c\u8003\u8651\u5bb9\u65a5\u539f\u7406\uff1a\u6240\u6709\u4e0d\u80fd\u5728\u4e00\u8d77\u7684\u5bf9\u6570$-$\u914d\u5408**\u4e0d**\u9ed8\u5951\u4e0d\u80fd\u5728\u4e00\u8d77\u7684\u5bf9\u6570\n\n\u5c31\u662f$\\sum_{i=1}^{num}$ $a[i][0]*a[i][1]-cnt$($cnt$\u4e3a\u8865\u56fe\u7684\u8fb9\u6570\uff0c\u4e5f\u5c31\u662f\u914d\u5408\u4e0d\u9ed8\u5951\u4e0d\u80fd\u5728\u4e00\u8d77\u7684\u6709\u591a\u5c11\u5bf9\uff09\n\n\u4ee3\u7801\u3002\u3002\u3002(\u4e0d\u538b\u7ef4\uff0c\u4e0d\u5361\u5e38\u3002\u3002\u3002\u61d2\u60f0)\n\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\n#define il inline\n#define LL long long\n\nconst int N=2505;\nconst LL mod=1e9+7;\n\nstruct EDGE\n{\n\tint to,nxt;\n};\n\nint n,m,cnt=1,num;\nLL ans,sigma=0;\nint col[N],head[N],idx[N],f[N][N],a[N][2];\nbool vis[N][N],hav[N*N*2];\nqueue<int>q;\nEDGE e[N*N];\n\nil void add(int x,int y)\n{\n\te[++cnt].to=y;\n\te[cnt].nxt=head[x];\n\thead[x]=cnt;\n}\nil void bfs()\n{\n\tmemset(col,-1,sizeof(col));\n\tfor(int k=1;k<=n;++k)\n\t{\n\t\tif(col[k]!=-1) continue;\n\t\tq.push(k),col[k]=0,num++;\n\t\tint cnt1=0,cnt2=0;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint x=q.front();\n\t\t\tif(col[x]) cnt2++;\n\t\t\telse cnt1++;\n\t\t\tq.pop();\n\t\t\tfor(int i=head[x];i;i=e[i].nxt)\n\t\t\t{\n\t\t\t\tif(hav[i]) continue;\n\t\t\t\tif(col[e[i].to]==col[x]) {ans=-1;return;}\n\t\t\t\tif(col[e[i].to]==-1) q.push(e[i].to);\n\t\t\t\tcol[e[i].to]=col[x]^1;\n\t\t\t}\n\t\t}\n\t\ta[num][0]=cnt1,a[num][1]=cnt2;\n\t\tsigma+=a[num][0]*a[num][1];\n\t}\n}\nil LL qpow(LL x,LL y)\n{\n\tLL ggg=1;\n\twhile(y)\n\t{\n\t\tif(y&1) ggg=x*ggg%mod;\n\t\tx=x*x%mod;\n\t\ty>>=1;\n\t}\n\treturn ggg%mod;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x,y;i<=m;++i) scanf(\"%d%d\",&x,&y),vis[x][y]=1,vis[y][x]=1;\n\tfor(int i=1;i<=n;++i) for(int j=i+1;j<=n;++j) if(!vis[i][j]) add(i,j),add(j,i),idx[i]++,idx[j]++;\n\tbfs();\n\tif(ans==-1) {printf(\"%lld\\n%d\\n\",ans,m);return 0;}\n\tf[0][0]=1;\n\tfor(int i=1;i<=num;++i)\n\t{\n\t\tfor(int j=0;j<=n;++j)\n\t\t{\n\t\t\tif(j>=a[i][0]) f[i][j]|=f[i-1][j-a[i][0]];\n\t\t\tif(j>=a[i][1]) f[i][j]|=f[i-1][j-a[i][1]];\n\t\t}\n\t}\n\tint pos;\n\tfor(int i=0;i<=n/2;++i) if(f[num][i]) ans++,pos=i;\n\tprintf(\"%lld \",ans);\n\tprintf(\"%lld\\n\",(qpow(2ll,(n-pos)*1ll)-qpow(2ll,pos*1ll)+mod)%mod);\n\tprintf(\"%lld\\n\",sigma-cnt/2);\n\treturn 0;\n}\n```",
        "postTime": 1570723524,
        "uid": 208081,
        "name": "MikukuOvO",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5061 \u3010\u79d8\u5bc6\u4efb\u52a1\u3011"
    },
    {
        "content": "## \u89e3\u9898\u601d\u8def\n\u3000\u3000$orz$\u51fa\u9898\u4eba\u7684\u795e\u4ed9\u505a\u6cd5\u3002\u672c\u849f\u84bb\u770b\u4e0d\u61c2\uff0c\u5c31\u6c34\u4e2a\u6c42\u8865\u56fe\u518d\u4e8c\u5206\u56fe\u67d3\u8272\u7684\u65b9\u6cd5\u6765$%1%$\u51fa\u9898\u4eba\u3002\n\u3000\u3000\n  \n\u3000\u3000\u9996\u5148\u6211\u4eec\u5bf9\u56fe\u4e2d$m$\u4e2a\u5173\u7cfb\u8fde\u8fb9\uff0c\u53d1\u73b0\u8fd9\u6837\u662f\u6ca1\u6cd5\u505a\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6700\u540e\u8981\u5173\u6ce8\u7684\u662f\u8c01\u548c\u8c01\u4e0d\u80fd\u5728\u4e00\u8d77\uff0c\u8fd9\u4e2a\u9650\u5236\u662f\u6bd4\u8f83\u5927\u7684\u3002\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5efa\u4e00\u4e2a\u8865\u56fe\uff0c\u5c31\u662f\u628a\u539f\u6765\u6ca1\u6709\u7684\u8fb9\u52a0\u8fb9\uff0c\u539f\u6765\u5b58\u5728\u7684\u8fb9\u65ad\u6389\u3002\u8fd9\u6837$a$\u548c$b$\u4e4b\u95f4\u6709\u8fb9\u5c31\u4ee3\u8868$a$\u4e0e$b$\u4e0d\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u8fd9\u6837\u5c31\u53ef\u80fd\u5f62\u6210\u4e86\u82e5\u5e72\u4e2a\u56fe\u3002\u9996\u5148\u8003\u8651\u5224\u5408\u6cd5\uff0c\u56e0\u4e3a\u4e00\u5171\u53ea\u6709\u4e24\u4e2a\u96c6\u5408\uff0c\u800c\u6bcf\u4e2a\u4eba\u90fd\u5fc5\u987b\u653e\u5230\u96c6\u5408\u91cc\uff0c\u5173\u7cfb\u8fd8\u53ef\u4ee5\u62bd\u8c61\u6210\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\u4e8c\u5206\u56fe\u67d3\u8272\u4e86\u3002\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u7136\u540e\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\u5224\u662f\u5426\u5408\u6cd5\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u8054\u901a\u5757\u4e0d\u5408\u6cd5\uff0c\u90a3\u4e48\u4e5f\u5c31$GG$\u4e86\u3002\n  \n\u3000\u3000\u7136\u540e\u8003\u8651\u7b97\u7b54\u6848\uff0c\u5224\u5b8c\u5408\u6cd5\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u4e86\u8054\u901a\u5757\u4e2d\u9ed1\u8272\u548c\u767d\u8272\u7684\u4e0d\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u5269\u4e0b\u7684\u53ef\u4ee5\u4efb\u610f\u642d\u914d\uff0c\u6240\u4ee5\u505a\u4e00\u4e2a\u80cc\u5305\u5c31\u884c\u4e86\uff0c\u628a\u6bcf\u4e2a\u8054\u901a\u5757\u9ed1\u8272\u767d\u8272\u7684\u4e2a\u6570\u8bb0\u4e0b\u6765\u3002\u8bbe$f[i]$\u8868\u793a\u4e00\u4e2a\u96c6\u5408\u6709$i$\u4e2a\u4eba\u662f\u5426\u6210\u7acb\uff0c\u8f6c\u79fb\u7684\u65f6\u5019\u5c31\u6a21\u4eff$0/1$\u80cc\u5305\uff0c\u5c31\u662f\u770b\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u662f\u9009\u9ed1\u8272\u8fdb\u53bb\u8fd8\u662f\u9009\u767d\u8272\u8fdb\u53bb\u3002\u505a\u5b8c\u80cc\u5305\u540e\u4e00\u4e2a\u4eba\u6570\u5408\u6cd5\u4ec5\u5f53$f[i]=f[n-i]=true$\u3002\u8fd9\u6837\u7b2c\u4e00\u95ee\u548c\u7b2c\u4e8c\u95ee\u7684\u7b54\u6848\u5c31\u7edf\u8ba1\u51fa\u6765\u4e86\uff0c\u5bf9\u4e8e\u7b2c\u4e09\u95ee\u7684\u7b54\u6848\uff0c\u7136\u540e$n^2$\u679a\u4e3e\u4e00\u4e0b\u6bcf\u5bf9\uff0c\u5982\u679c\u4e24\u4e2a\u4eba\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8054\u901a\u5757\u4f46\u989c\u8272\u4e0d\u76f8\u540c\uff0c\u5e76\u4e14\u4e24\u4e2a\u4eba\u5728\u8865\u56fe\u91cc\u6ca1\u8fb9\uff0c\u5c31\u4f7f$ans3++$\uff0c\u8fd9\u4e2a\u4e5f\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u3002\n\u3000\u3000\n  \n\u3000\u3000~~[\u6253\u6ce2\u5e7f\u544a](https://www.cnblogs.com/sdfzsyq/)~~\n  \n  \n## \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n\nusing namespace std;\nconst int MAXN = 2505;\nconst int MOD = 1e9+7;\ntypedef long long LL;\n\ninline int rd(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)) f=ch=='-'?0:1,ch=getchar();\n\twhile(isdigit(ch)) x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n\treturn f?x:-x;\n}\n\nint n,m,a[MAXN][MAXN],tot,num,cnt1,cnt2,ans1,ans2,ans3;\nint w[MAXN][2],f[MAXN],now[MAXN],col[MAXN],Min;\nbool flag;\n\nvoid dfs(int x,int c){\n\tcol[x]=c;now[++tot]=x;if(c==1) cnt1++;else cnt2++;\n\tfor(int i=1;i<=n;i++)\n\t\tif(a[i][x]){\n\t\t\tif(col[i]==col[x]) {flag=1;return;}\n\t\t\tif(!col[i]) dfs(i,3-c); \n\t\t}\n}\n\ninline int fast_pow(int x,int y){\n\tint ret=1;\n\tfor(;y;y>>=1){\n\t\tif(y&1) ret=(LL)ret*x%MOD;\n\t\tx=(LL)x*x%MOD;\n\t}\n\treturn ret;\n}\n\nint main(){\n\tint x,y;n=rd(),m=rd();\n\tfor(int i=1;i<=m;i++){\n\t\tx=rd(),y=rd();\n\t\ta[x][y]=a[y][x]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\t\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(i!=j) a[i][j]^=1;\n\tfor(int i=1;i<=n;i++) if(!col[i]){\n\t\tcnt1=cnt2=tot=0;memset(now,0,sizeof(now));\n\t\tdfs(i,1);if(flag) break;\n\t\tfor(int j=1;j<=tot;j++)\n\t\t\tfor(int k=j+1;k<=tot;k++)\n\t\t\t\tif(col[now[j]]!=col[now[k]] && !a[now[j]][now[k]]) ans3++; \n\t\tw[++num][0]=cnt1;w[num][1]=cnt2;\n\t}f[0]=1;\n\tfor(int i=1;i<=num;i++){\n\t\tMin=min(w[i][0],w[i][1]);\n\t\tfor(int j=n;j>=Min;j--){\n\t\t\tif(j>=w[i][0]) f[j]|=f[j-w[i][0]];\n\t\t\tif(j>=w[i][1]) f[j]|=f[j-w[i][1]];\t\n\t\t}\t\n\t}\n\tfor(int i=0;i<=n/2;i++){\n\t\tif(!f[i] || !f[n-i]) continue;\n\t\tans1++;ans2=i;\n\t}\n\tif(flag) puts(\"-1\"),ans3=m; //\u6ce8\u610f\u4e00\u4e0b\u8fd9\u91cc\uff0c\u5982\u679c\u6ca1\u6709\u65b9\u6848\u7684\u8bdd\u81ea\u7136$m$\u5bf9\u53ef\u4ee5\u5408\u4f5c\u7684\u4eba\u90fd\u65e0\u6cd5\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\n\telse printf(\"%d %d\\n\",ans1,(fast_pow(2,n-ans2)-fast_pow(2,ans2)+MOD)%MOD);\n\tprintf(\"%d\\n\",ans3);\n\treturn 0;\n} \n```\n  ",
        "postTime": 1544141549,
        "uid": 52394,
        "name": "Monster_Qi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5061 \u3010\u79d8\u5bc6\u4efb\u52a1\u3011"
    },
    {
        "content": "# \u9898\u89e3 P5061 \u3010\u79d8\u5bc6\u4efb\u52a1\u3011\n\u5bf9\u4e8e\u7b2c (1)(2)(1)(2) \u95ee\uff0c\u53ef\u4ee5\u6c42\u8865\u56fe\u518d\u4e8c\u5206\u56fe\u5339\u914d (\u4e0d\u8fc7\u51fa\u9898\u4eba\u4e0d\u4f1a\u56e0\u6b64\u4e0d\u8bb2\u8fd9\u4e2a)\n\n\u52a0\u5165\u7b2c (3)(3) \u95ee\u5c31\u662f\u4e3a\u4e86\u5361\u6389\u4e0a\u9762\u7684\u89e3\u6cd5\uff0c\u5176\u662f\u672c\u849f\u84bb\u4e5f\u4e0d\u77e5\u9053\u662f\u5426\u53ef\u884c\n\n## \u51fa\u9898\u4eba\u7684\u89e3\u6cd5\u6709\u70b9\u975e\u5e38\u89c4\uff0c\u4e0d\u4fdd\u8bc1\u6ca1\u6709\u5176\u4ed6\u89e3\u6cd5\uff1a\n\n\u56e0\u4e3a\u53ea\u5206\u4e24\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u7b2c\u4e00\u6b21\u6c42\u89e3\uff0c\u5148\u628a\u4e00\u4e2a\u4eba\u653e\u5230\u7b2c\u4e00\u7ec4\uff0c\u7b2c\u4e8c\u7ec4\u4e3a\u7a7a\uff0c\u7136\u540e\u91cd\u590d\u8fed\u4ee3\u5bf9\u5269\u4e0b\u7684\u4eba\u8fdb\u884c\u653e\u7f6e\uff0c\u76f4\u5230\u8fdb\u884c\u4e86\u4e00\u6b21\u8fed\u4ee3\u5374\u4e00\u4e2a\u4eba\u4e5f\u6ca1\u6709\u653e\u7f6e(\u4ec5\u653e\u7f6e\u65b9\u6848\u552f\u4e00\u7684\u4eba\uff0c\u82e5\u4e24\u7ec4\u90fd\u53ef\u4ee5\u653e\uff0c\u90a3\u4e48\u5c31\u5148\u4fdd\u7559)\n\n#### \u4e8e\u662f\u6211\u4eec\u4fdd\u7559\u4e0b\u6765\u4e86\u4e00\u4e9b\u4eba\uff0c\u4e5f\u77e5\u9053\u4e86\u76ee\u524d\u5728\u7b2c\u4e00\u7ec4\u7684\u4eba\u5fc5\u987b\u4e0e\u7b2c\u4e8c\u7ec4\u7684\u4eba\u5206\u5f00\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u4fdd\u7559\u4e0b\u6765\u7684\u4eba\u7ee7\u7eed\u5904\u7406\uff0c\u8fdb\u884c\u7b2c\u4e8c/\u4e09/\u56db......\u6b21\u6c42\u89e3\uff0c\u5148\u628a\u4e00\u4e2a\u4eba\u653e\u5230\u7b2c\u4e00\u7ec4......\n\n\u6700\u540e\u6211\u4eec\u628a\u6240\u6709\u7684\u4eba\u90fd\u653e\u5b8c\uff0c\u5f97\u5230\u4e00\u4e9b\u5173\u7cfb\uff0c\u5373\u540c\u4e00\u6b21\u6c42\u89e3\u4e2d\u5f97\u5230\u7684\u4e24\u7ec4\u4eba\u5fc5\u987b\u5206\u5f00\uff0c\u4e0d\u540c\u6b21\u6c42\u89e3\u5f97\u5230\u7684\u5c0f\u7ec4\u53ef\u4ee5\u968f\u610f\u6df7\u5408(\u5728\u4e0a\u8ff0\u524d\u63d0\u4e0b)\u3002\n\n### \u53ef\u4ee5\u8fd9\u6837\u63cf\u8ff0\uff1a\n\n\u6709 AA \uff0c BB \u4e24\u4e2a\u7b49\u957f\u65e0\u8d1f\u503c\u7684\u5e8f\u5217\n\n\u73b0\u5728\u628a AA \uff0c BB \u4e2d\u7684\u503c\u5206\u6210\u4e24\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u7684\u6743\u503c\u548c\u4ee3\u8868\u7684\u5c31\u662f\u4eba\u6570\uff0c A[i]A[i] \u548c B[i]B[i] \u4e0d\u80fd\u5b58\u5728\u4e8e\u540c\u4e00\u7ec4\uff0c\u6c42\u80fd\u5f97\u5230\u7684\u65e0\u5e8f\u6743\u503c\u4e8c\u5143\u7ec4\u4e0d\u540c\u7684\u5206\u7ec4\u65b9\u6848\u6570\u548c\u4e24\u7ec4\u6743\u503c\u6700\u63a5\u8fd1\u7684\u4e00\u79cd\u65b9\u6848\u3002\n\n### \u8fdb\u884c\u52a8\u6001\u89c4\u5212\u5373\u53ef\u6c42\u89e3\u7b2c (1)(2)(1)(2) \u95ee\n\n\u5bf9\u4e8e\u7b2c\u4e09\u95ee\uff0c\u5229\u7528\u521a\u521a\u63d0\u5230\u7684\uff1a\n\n\u540c\u4e00\u6b21\u6c42\u89e3\u4e2d\u5f97\u5230\u7684\u4e24\u7ec4\u4eba\u5fc5\u987b\u5206\u5f00\uff0c\u4e0d\u540c\u6b21\u6c42\u89e3\u5f97\u5230\u7684\u5c0f\u7ec4\u53ef\u4ee5\u968f\u610f\u6df7\u5408(\u5728\u4e0a\u8ff0\u524d\u63d0\u4e0b)\u3002\n\n\u5c31\u5f88\u5bb9\u6613\u6c42\u89e3\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u6807\u8bb0\u6bcf\u4e00\u4e2a\u4eba\u5c5e\u4e8e\u7b2c\u51e0\u6b21\u6c42\u89e3\u7b2c\u51e0\u7ec4\uff0c\u53ea\u8981\u4e0d\u5728\u540c\u4e00\u6b21\u6c42\u89e3\u7684\u76f8\u53cd\u7ec4\u5c31\u6709\u53ef\u80fd\u5206\u5728\u540c\u4e00\u7ec4\u3002\n\n\u8fd9\u4e2a\u601d\u60f3\u4e0d\u662f\u5f88\u597d\u8bb2\uff0c\u6211\u5df2\u7ecf\u5c3d\u529b\u4e86\n\n\u8003\u8651\u5b9e\u73b0\u8fd9\u4e2a\u601d\u60f3\uff0c\u6211\u4eec\u4f7f\u7528 dfsdfs\uff0c\u4e00\u6b21 dfsdfs\u8d1f\u8d23\u540c\u4e00\u6b21\u6c42\u89e3\u7684\u8fed\u4ee3\uff0c\u4e00\u4e2a dfsdfs\u5b9e\u73b0\u53cd\u590d\u6c42\u89e3\u77e5\u9053\u6240\u6709\u4eba\u90fd\u6709\u4e86\u5f52\u5c5e\uff0c\u56e0\u6b64\u6700\u540e\u662f\u4e24\u4e2a dfsdfs \u4e92\u76f8\u8c03\u7528......\u8fd9\u5bf9\u4ee3\u7801\u5b9e\u73b0\u80fd\u529b\u6709\u4e00\u5b9a\u8981\u6c42\u3002\n\n## \u65f6\u95f4\u590d\u6742\u5ea6\uff1f\u4e00\u6b21\u6c42\u89e3\u81f3\u5c11\u5206\u914d\u4e00\u4e2a\u4eba\uff0c\u6c42\u89e3\u8c03\u7528\u7684 dfsdfs \u8fdb\u884c\u4e00\u6b21\u4e5f\u4e00\u5b9a\u5206\u914d\u81f3\u5c11\u4e00\u4e2a\u4eba\uff0c\u5426\u5219\u5c31\u4f1a\u56de\u5230\u6c42\u89e3\u8fc7\u7a0b\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N^2)O(N\uff09\n\n\n\u5e9f\u8bdd\u4e0d\u591a\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\uff08c++\u89e3\u6cd5\uff09\u3001\n\n```c\n#include<iostream>\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\n#define maxx(a,b) (a>b)?a:b\n#define minx(a,b) (a<b)?a:b\n#define mod 1000000007\ninline int read()\n{\n    int q=0;\n    char c=getchar();\n    while(!isdigit(c))\n        c=getchar();\n    while(isdigit(c))\n        q=q*10+c-'0',c=getchar();\n    return q;\n}\nint matrix[2510][2510],s1[2510][2510],s2[2510][2510],tmp[2510],tmp1[2510][2510],tmp2[2510][2510],f[2510][2510],mem[710][2],data[2510*2500][2];\nint n,m,pos,statistic,u,v,top,ans,max_ans;\nvoid divide(int,int);\nvoid solve(int[]);\nvoid solve(int q[])\n{\n    if(!q[0])\n        return;\n    top++;\n    s1[top][1]=q[1],s1[top][0]=1;\n    mem[q[1]][0]=top,mem[q[1]][1]=1;\n    for(register int i=2;i<=q[0];i++)\n        tmp1[top][i-1]=q[i];\n    tmp1[top][0]=q[0]-1;\n    divide(top,2);\n}\n\nvoid divide(int x,int r)//x\u9636,\u653e\u5230\u54ea \n{\n    if(r==2)\n    {\n        bool flag=false;\n        tmp2[x][0]=0;\n        for(int i=1;i<=tmp1[x][0];i++)\n        {\n            pos=1;\n            for(int j=1;j<=s1[x][0];j++)\n                if(!matrix[tmp1[x][i]][s1[x][j]])\n                {\n                    pos=2;\n                    flag=true;\n                    break;\n                }\n            if(pos==2)  \n            {\n                for(int j=1;j<=s2[x][0];j++)\n                    if(!matrix[tmp1[x][i]][s2[x][j]])\n                    {\n                        printf(\"-1\\n%d\",m);\n                        exit(0);\n                    }\n                s2[x][++s2[x][0]]=tmp1[x][i],mem[s2[x][s2[x][0]]][0]=x,mem[s2[x][s2[x][0]]][1]=r;\n            }\n            else\n                tmp2[x][++tmp2[x][0]]=tmp1[x][i];\n        }\n        if(flag)\n            divide(x,1);\n        else\n            solve(tmp1[x]);\n    }\n    else\n    {\n        bool flag=false;\n        tmp1[x][0]=0;\n        for(int i=1;i<=tmp2[x][0];i++)\n        {\n            pos=2;\n            for(int j=1;j<=s2[x][0];j++)\n                if(!matrix[tmp2[x][i]][s2[x][j]])\n                {\n                    pos=1;\n                    flag=true;\n                    break;\n                }\n            if(pos==1)  \n            {\n                for(int j=1;j<=s1[x][0];j++)\n                    if(!matrix[tmp2[x][i]][s1[x][j]])\n                    {\n                        printf(\"-1\\n%d\",m);\n                        exit(0);\n                    }\n                s1[x][++s1[x][0]]=tmp2[x][i],mem[s1[x][s1[x][0]]][0]=x,mem[s1[x][s1[x][0]]][1]=r;\n            }\n            else\n                tmp1[x][++tmp1[x][0]]=tmp2[x][i];\n        }\n        if(flag)\n            divide(x,2);\n        else\n            solve(tmp2[x]);\n    }\n}\n\ninline long long pow(int b,int p)\n{\n    long long g=1,base=b;\n    while(p)\n    {\n        if(p&1)\n            g*=base,g%=mod;\n        p=p>>1,base*=base,base%=mod;\n    }\n    return g;\n}\n\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n    {\n        u=read(),v=read();\n        data[i][0]=u,data[i][1]=v;\n        matrix[u][v]=matrix[v][u]=1;\n    }\n    for(int i=1;i<=n;i++)\n        tmp[i]=i;\n    tmp[0]=n;\n    solve(tmp);\n    f[0][0]=1;\n    for(int i=1;i<=top;i++)//\u52a8\u6001\u89c4\u5212\u8fc7\u7a0b\n        for(int j=n;j>=0;j--)\n            f[i][j]|=(f[i-1][j-s1[i][0]]|f[i-1][j-s2[i][0]]);\n    for(int i=n/2;i>=0;i--)\n        if(f[top][i])\n        {\n            if(!max_ans)\n                max_ans=i;\n            ans++;\n        }\n   for(register int i=1;i<=m;i++)\n        if(mem[data[i][0]][0]==mem[data[i][1]][0]&&mem[data[i][0]][1]!=mem[data[i][1]][1])\n            statistic++;\n    printf(\"%d %lld\\n%d\",ans,(pow(2,n-max_ans)-pow(2,max_ans)+mod)%mod,statistic);\n    return 0;\n} \n\n```\n\n\n\u5b8c\u7ed3\u6492\u82b1\uff01\uff01\n\n\u672c\u84bb\u849f\u7684\u7b2c2\u7bc7\u9898\u89e3\uff0c\u8bf7\u5404\u4f4d\u5927\u4f6c\u591a\u591a\u5305\u5bb9\u3002\n\n\n\n\n ",
        "postTime": 1601017360,
        "uid": 161444,
        "name": "AC\u57fa\u5fb7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5061 \u3010\u79d8\u5bc6\u4efb\u52a1\u3011"
    }
]