[
    {
        "content": "\u9996\u5148\u5f88\u5bb9\u6613\u60f3\u5230\u7f29\u70b9\uff0c\u8bb0c[i]\u4e3ai\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u540d\uff0cp[c[i]]\u4e3ai\u70b9\u6240\u5728\u5f3a\u8054\u901a\u5206\u91cf\u80fd\u76f8\u4e92\u901a\u8fbe\u7684\u70b9\u6570\n\n\u7136\u540e\u7528\u662fspfa\u8dd1\u4e00\u6b21\u4ee51\u4e3a\u8d77\u70b9\u7684\u6700\u957f\u8def\uff0c\u8bb0\u4e3adis1[i]\n\n\u4ee5\u53ca\u4ee51\u4e3a\u7ec8\u70b9\u7684\u6700\u957f\u8def\uff08\u53ef\u4ee5\u7528\u5efa\u53cd\u56fe\u5b9e\u73b0\uff09\uff0c\u8bb0\u505adis2[i]\n\n\u6700\u540e\u679a\u4e3ei,\u7b54\u6848\u5c31\u4e3amax{dis1[c[i]]+dis2[v]-p[c[1]]} \uff08v->i\u8fde\u901a\u4e14dis1[c[i]]\n,dis2[v]\u90fd\u4e0d\u4e3a0\uff09\n\n\u8fd8\u6709\u6ce8\u610fans\u521d\u59cb\u5316\u4e3ap[c[1]],\u56e0\u4e3a\u6709\u53ef\u80fd\u51fa\u4e0d\u53bb\uff08\u5c31\u662f\u53cd\u8f6c\u8fb9\u6ca1\u6709\u7528\u7684\u60c5\u51b5\uff09\n\n\u4e3a\u4ec0\u4e48dis1[c[i]]\u548cdis2[v]\u4e0d\u4f1a\u6709\u91cd\u70b9\u5462\uff0c\u56e0\u4e3a\u5982\u679c\u6709\u91cd\u70b9\u7684\u8bdd\u5c31\u4f1a\u5728\u7f29\u70b9\u7684\u65f6\u5019\u88ab\u7f29\u6389\u4e86\n\n\u60f3\u4e0d\u660e\u767d\u53ef\u4ee5\u81ea\u5df1\u753b\u4e00\u753b\n\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<queue>\nusing namespace std;\nconst int N=1e5+5,M=1e5+5;\nint h[N],nxt[M],r[M],sum=1;\nint h1[N],nxt1[M],r1[M],sum1=1;\nint h2[N],nxt2[M],r2[M],sum2=1;\nint t,c[N],dfn[N],low[N],s[N],top,color,num,start,gass[N];\nint p,q,n,m;\nint dis1[N],dis2[N];\nbool use[N];\nvoid add(int a,int b){sum++;nxt[sum]=h[a],r[sum]=b;h[a]=sum;}\nvoid add1(int a,int b){sum1++;nxt1[sum1]=h1[a],r1[sum1]=b;h1[a]=sum1;}\nvoid add2(int a,int b){sum2++;nxt2[sum2]=h2[a],r2[sum2]=b;h2[a]=sum2;}\nvoid found(int k)\n{\ndfn[k]=low[k]=++num,s[++top]=k,use[k]=1;\nfor(int i=h[k];i;i=nxt[i])\n{\n\tint v=r[i];\n\tif(!dfn[v])found(v),low[k]=min(low[k],low[v]);\n\telse if(use[v])low[k]=min(low[k],low[v]);\n}\t\nif(low[k]==dfn[k])\n{\n\tc[k]=++color,use[k]=0;\n\tgass[color]=1;\n\twhile(s[top]!=k){gass[color]++,use[s[top]]=0;c[s[top--]]=c[k];}\n\t\ttop--;\n}\n}\nvoid spfa1(int k)\n{\n\tdis1[k]=gass[k];\n\tqueue<int> Q;\n\tQ.push(k);\n\twhile(!Q.empty()){\n\t\tint now=Q.front();Q.pop();\n\t\tfor(int i=h1[now];i;i=nxt1[i]){\n\t\t\tint v=r1[i];\n\t\t\tif(dis1[v]<dis1[now]+gass[v]){\n\t\t\t\tdis1[v]=dis1[now]+gass[v];\n\t\t\t\tif(!use[v])Q.push(v),use[v]=1;\n\t\t\t}\n\t\t}\n\t\t\t\tuse[now]=0;\n\t}\n}\nvoid spfa2(int k)\n{ \n    dis2[k]=gass[k];\n\tqueue<int> Q;\n\tQ.push(k);\n\twhile(!Q.empty()){\n\t\tint now=Q.front();Q.pop();\n\t\tfor(int i=h2[now];i;i=nxt2[i]){\n\t\t\tint v=r2[i];\n\t\t\tif(dis2[v]<dis2[now]+gass[v]){\n\t\t\t\tdis2[v]=dis2[now]+gass[v];\n\t\t\t\tif(!use[v])Q.push(v),use[v]=1;\n\t\t\t}\n\t\t}\n\t\tuse[now]=0;\n\t}\n}\nint main()\n{\nscanf(\"%d%d\",&n,&m);\nwhile(m--)\n{\nscanf(\"%d%d\",&q,&p);\nadd(q,p);\n}\nfor(int i=1;i<=n;i++)if(!dfn[i])found(i);\nstart=c[1];\nfor(int i=1;i<=n;i++)\nfor(int u=h[i];u;u=nxt[u])\nif(c[i]!=c[r[u]])add1(c[i],c[r[u]]),add2(c[r[u]],c[i]);\nspfa1(start),spfa2(start);\nint ans=gass[start];\nfor(int i=1;i<=n;i++)\n\tif(!use[c[i]]&&dis1[c[i]]){\n\tint now=c[i];\n\tuse[now]=1;\n\tfor(int u=h2[now];u;u=nxt2[u]){\n\t\tint v=r2[u];\n\t\tif(!dis2[v])continue;\n\t\tans=max(ans,dis1[now]+dis2[v]-gass[start]);\n\t}\n\t\t\n\t}\n\tcout<<ans;\nreturn 0;\n}\n\n\n```",
        "postTime": 1535873121,
        "uid": 78965,
        "name": "block_joker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "**\u6b64\u9898\u96be\u5728\u5efa\u6a21\u3002**\n\n\u770b\u5230\u8fd9\u9053\u9898\uff0c\u9996\u5148\u60f3\u5230\u7684\u662f$Tarjan$\u7f29\u70b9\uff0c\u5c06\u56fe\u4e0a\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u4efb\u610f\u4e24\u70b9\u76f8\u4e92\u53ef\u8fbe\uff09\u7f29\u6210\u70b9\uff0c\u5f62\u6210\u4e00\u4e2a\u65b0\u56fe\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u65b0\u56fe\u4e0a\u65e0\u73af\uff08\u56e0\u4e3a\u5982\u679c\u6709\u73af\u5219\u73af\u4e00\u5b9a\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff09\uff0c\u7136\u540e\u518d\u8003\u8651\u63a5\u4e0b\u6765\u7684\u6b65\u9aa4\u3002\n\n\u7b80\u5355\u6982\u8ff0\u4e00\u4e0b$Tarjan$\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u7528$DFS$\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5728$DFS$\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u8282\u70b9\u6709\u4e00\u4e2a\u8bbf\u95ee\u5e8f\u53f7\uff0c\u8bb0\u4e3a$dfn_i$\u3002\u7136\u540e\uff0c\u5bf9\u4e8e\u8282\u70b9$i$\uff0c\u6211\u4eec\u5b9a\u4e49\u5176\u5728$DFS$\u6811\u4e0a\uff0c\u4e2d\u95f4\u8282\u70b9\u5728\u8282\u70b9$i$\u7684\u5b50\u6811\u4e2d\u4e14\u4e0d\u7ecf\u8fc7\u8282\u70b9$i$\u5230\u5176$DFS$\u6811\u4e0a\u7684\u7236\u4eb2\u8282\u70b9$fa$\u7684\u8fb9$(i,fa)$\uff08\u5982\u679c\u6709\u91cd\u8fb9\u5219\u53ef\u4ee5\u7ecf\u8fc7\uff09\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u7684\u65f6\u95f4\u6233\uff0c\u5373$low_i=min~dfn_a$\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9$i$\uff0c\u5982\u679c$low_i=dfn_i$\uff0c\u90a3\u4e48\u80af\u5b9a\u6709\u4e00\u4e2a\u5305\u542b\u8282\u70b9$i$\u7684\u65b0\u5f3a\u8054\u901a\u5206\u91cf\u3002\u5982\u4f55\u8ba1\u7b97\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u7684\u8282\u70b9\u5462\uff1f\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6808\uff08$STL~stack$\uff09\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u5c06\u8be5\u8282\u70b9\u52a0\u5165\u6808\uff1b\u5bf9\u4e00\u4e2a\u8282\u70b9\u7684$DFS$\u8fc7\u7a0b\u7ed3\u675f\u65f6\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2a\u65b0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\uff0c\u4f9d\u6b21\u5c06\u6808\u4e2d\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u5f39\u51fa\u7684\u5143\u7d20\u662f\u5f53\u524d\u8282\u70b9\u4e3a\u6b62\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a$DFS$\u8fc7\u7a0b\u9700\u8981\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u6240\u6709\u7684\u51fa\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u90bb\u63a5\u94fe\u8868\u5b58\u8fb9\uff08$vector$\u6216\u94fe\u5f0f\u524d\u5411\u661f\uff09\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(N+M)$\u3002\n\n\u7136\u540e\u4fbf\u662f\u5728$DAG$\u4e0a\u8fdb\u884c\u64cd\u4f5c\u7684\u95ee\u9898\u4e86\u3002\u770b\u4e86\u4e0b\u5176\u4ed6\u5927\u4f6c\u7684\u9898\u89e3\uff0c\u90fd\u662f\u5206\u7c7b\uff0c\u679a\u4e3e\u3002\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\u5206\u5c42\u56fe\u7684\u65b9\u6cd5\u3002\n\n\u8003\u8651\u4e00\u5f20\u56fe\uff0c\u5c06\u8fd9\u4e2a\u56fe\u590d\u5236\u4e00\u4efd\uff0c\u70b9\u7684\u7f16\u53f7\u4ece$1$~$N$\u5230$(N+1)$~$(N+N)$\u3002\u7136\u540e\u5728\u4e24\u5c42\u56fe\u4e2d\u8fde\u8fb9\u3002\u5bf9\u4e8e\u539f\u56fe\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c**\u4ece\u539f\u56fe\u7684\u6307\u5411\u70b9\u5230\u65b0\u56fe\u7684\u8d77\u59cb\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e0e\u539f\u8fb9\u76f8\u540c\uff0c\u4ee3\u8868\u9006\u5411\u8d70\u4e00\u6761\u8fb9**\u3002\u9006\u5411\u8d70\u4e86\u4e00\u6761\u8fb9\uff0c\u5c31\u4e0d\u80fd\u518d\u9006\u5411\u8d70\u4e86\uff0c\u6240\u4ee5\u4ece\u4e0a\u9762\u7684\u4e00\u5c42\uff08\u65b0\u56fe\uff09\u65e0\u6cd5\u56de\u5230\u4e0b\u9762\u7684\u4e00\u5c42\u3002\u6700\u540e\u8dd1\u4e00\u904d$SPFA$\uff0c\u8282\u70b9$1$\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\uff0c\u5230\u8282\u70b9$1$\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7+$N$\u4e0a\u7684\u6700\u957f\u8def\uff0c\u5c31\u662f\u6700\u540e\u7684\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\nusing namespace std;\nconst int maxn=100010;\nconst int inf=2e9;\nvector<int>G[maxn];\nvector<int>G1[maxn*2];\nint n,m,u,v,op,index_,dfn[maxn],low[maxn],bcc[maxn],siz[maxn*2],cnt,dist[maxn*2];\nbool tf[maxn*2];\nstack<int>st;\nqueue<int>q;\nvoid dfs(int cur)\n{\n    dfn[cur]=low[cur]=++index_;\n    tf[cur]=true;\n    st.push(cur);\n    for(int i=0;i<G[cur].size();i++)\n    {\n        if(!dfn[G[cur][i]])\n        {\n            dfs(G[cur][i]);\n            low[cur]=min(low[cur],low[G[cur][i]]);\n        }\n        else if(tf[G[cur][i]])low[cur]=min(low[cur],dfn[G[cur][i]]);\n    }\n    if(dfn[cur]==low[cur])\n    {\n        cnt++;\n        while(st.top()!=cur)\n        {\n            bcc[st.top()]=cnt;\n            tf[st.top()]=false;\n            siz[cnt]++;\n            st.pop();\n        }\n        bcc[st.top()]=cnt;\n        tf[st.top()]=false;\n        siz[cnt]++;\n        st.pop();\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    while(m--)\n    {\n        scanf(\"%d%d\",&u,&v);\n        G[u].push_back(v);\n    }\n    for(int i=1;i<=n;i++)if(!dfn[i])dfs(i);\n    for(int i=1;i<=cnt;i++)siz[cnt+i]=siz[i];\n    for(int i=1;i<=n;i++)for(int j=0;j<G[i].size();j++)if(bcc[i]!=bcc[G[i][j]])\n    {\n        G1[bcc[i]].push_back(bcc[G[i][j]]);\n        G1[bcc[G[i][j]]].push_back(bcc[i]+cnt);\n        G1[bcc[i]+cnt].push_back(bcc[G[i][j]]+cnt);\n    }\n    tf[bcc[1]]=true;q.push(bcc[1]);\n    while(!q.empty())\n    {\n        int x=q.front();\n        for(int i=0;i<G1[x].size();i++)if(dist[G1[x][i]]<dist[x]+siz[x])\n        {\n            dist[G1[x][i]]=dist[x]+siz[x];\n            if(!tf[G1[x][i]])tf[G1[x][i]]=true,q.push(G1[x][i]);\n        }\n        q.pop();tf[x]=false;\n    }\n    printf(\"%d\\n\",dist[bcc[1]+cnt]);\n    return 0;\n}\n```\n\u7528\u8fd9\u6837\u7684\u601d\u60f3\uff0c\u8fd8\u53ef\u4ee5\u89e3\u51b3\u4e00\u9053\u8fd9\u6837\u7684\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe$G$\uff0c\u6709$m$\u5f20\u4f18\u60e0\u5238\uff0c\u53ef\u4ee5\u628a\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u6539\u6210\u4e00\u4e2a\u56fa\u5b9a\u503c$k$\uff0c\u6c42\u8282\u70b9$s$\u5230\u8282\u70b9$t$\u4e4b\u95f4\u6700\u77ed\u8def\u7684\u957f\u5ea6\u548c\u65b9\u6848\u6570\u3002\u65b9\u6cd5\u662f\u5efa\u7acb\u4e00\u4e2a$m+1$\u5c42\u7684\u591a\u5c42\u56fe\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u7684\u8fb9\u7684\u6743\u503c\u90fd\u4e3a$k$\uff0c\u7136\u540e\u8dd1\u6700\u77ed\u8def\u3002\u7531\u4e8e\u7528\u4e86\u4f18\u60e0\u5238\u4e0d\u4e00\u5b9a\u80fd\u8fbe\u5230\u4f18\u5316\u7684\u76ee\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a$min(t,t+n,t+n+n,...)$\u3002\u65b9\u6848\u6570\u4e5f\u53ef\u5982\u6b64\u505a\u3002\n\n----------------------------------\n\n\u611f\u8c22[\u5b9e\u54e5](https://www.luogu.org/space/show?uid=54153)\u5927\u4f6c\u63d0\u4f9b\u7684$hack$\u6570\u636e\uff0c\u672c\u7bc7\u9898\u89e3\u5176\u5b9e\u6709\u4e00\u4e2a\u7455\u75b5\uff0c\u4f46\u7531\u4e8e\u6570\u636e\u6c34\u6ca1\u6709\u6d4b\u51fa\u6765\u3002\n\n\u5982\u679c\u6574\u4e2a\u56fe\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u8f6c\u6362\u6210\u65b0\u56fe\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u52a0\u8fb9\uff0c\u6240\u4ee5\u6700\u540e\u8282\u70b9\u7684\u6700\u957f\u8def\u662f\u9519\u8bef\u7684\u3002\n\n\u89e3\u51b3\u65b9\u6cd5\u4e5f\u663e\u800c\u6613\u89c1\uff0c\u5c31\u662f\u5efa\u65b0\u56fe\u7684\u65f6\u5019\u4ece\u8d77\u70b9\u76f4\u63a5\u5f80\u7ec8\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a\u8d77\u70b9\u4ee3\u8868\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\u7684\u8fb9\u3002\n\n~~\u4e0d\u8d34\u4ee3\u7801\u4e86\uff08\u5176\u5b9e\u53ea\u7528\u6539\u4e00\u884c\uff09~~",
        "postTime": 1524019982,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u9053\u9898\u601d\u8def\n\n\u9996\u5148tarjan\u5c06\u5df2\u7ecf\u5b58\u5728\u7684\u73af\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u70b9\u6743\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u70b9\u7684\u4e2a\u6570\uff0c\u63a5\u4e0b\u6765\u518d\u4ece\u65b0\u5efa\u56fe\uff0c\u5982\u679c\u539f\u56fe\u4e2d\u70b9u\u6709\u4e00\u6761\u6307\u5411\u70b9t\u7684\u8fb9\u4e14u\u548ct\u4e0d\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u90a3\u4e48\u5c31\u4ece\u70b9u\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u5411\u70b9t\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a\u70b9t\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u5305\u542b\u70b9\u7684\u6570\u91cf\u3002\n\n\u6211\u4eec\u79f0\u4e00\u53f7\u70b9\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u5728\u65b0\u56fe\u4e2d\u4e3a\u539f\u70b9\uff0c\u79f0\u8fd9\u4e2a\u65b0\u56fe\u4e3a\u201c\u5206\u91cf\u56fe\u201d\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u65b0\u56fe\u4e0a\u4ece\u539f\u70b9\u505aspfa\uff0c\u5c06\u6bcf\u4e00\u4e2a\u70b9\u4e0e\u539f\u70b9\u8bb0\u5f55\u5728dis1[i]\u4e2d\uff0cdis1[i]\u4e5f\u5c31\u662f\u4ee5\u539f\u70b9\u4e3a\u5934\uff0ci\u53f7\u70b9\u4e3a\u7ed3\u5c3e\u7684\u94fe\u7684\u6700\u957f\u957f\u5ea6\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u5efa\u4e00\u4e2a\u65b0\u56fe\uff0c\u56fe\u4e2d\u6bcf\u4e00\u6761\u8fb9\u90fd\u4e3a\u5206\u91cf\u56fe\u4e2d\u539f\u8fb9\u7684\u53cd\u5411\u8fb9\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u518d\u5728\u8fd9\u4e2a\u70b9\u7684\u539f\u70b9\u4e0a\u505a\u4e00\u904dspfa\u5c31\u53ef\u6c42\u51fa\u4ee5i\u4e3a\u5934\uff0c\u539f\u70b9\u4e3a\u7ed3\u5c3e\u7684\u94fe\u6700\u957f\u7684\u957f\u5ea6\uff0c\u8bb0\u5f55\u5728dis2[i]\u4e2d\u3002\n\n\u5047\u5982\u70b9u\u6709\u4e00\u6761\u6307\u5411\u70b9v\u7684\u8fb9\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u7684\u4e3b\u89d2\u5728u->v\u7684\u8def\u5f84\u4e0a\u9006\u884c\uff0c\u5979\u5c06\u7ecf\u8fc7(dis1[v]+dis2[u]+\u539f\u70b9\u70b9\u6743) \u4e2a\u8349\u573a\u3002\u6240\u4ee5\u5f88\u5bb9\u6613\u6c42\u5f97\uff0cans=max(dis1[v]+dis2[u]+\u539f\u70b9\u70b9\u6743\uff0cans)\n\nu\u904d\u5386\u6240\u6709\u5206\u91cf\u56fe\u4e2d\u7684\u70b9\uff0cv\u904d\u5386\u6240\u6709\u5206\u91cf\u56fe\u4e2du\u6307\u5411\u70b9\u3002\n\n\n------------\n\n\u4ee3\u7801\u732e\u4e0a\n```cpp\n#include<iostream>\n#include<stack>\n#include<vector>\n#include<cstring>\n#include<queue>\n\nusing namespace std;\nint low[100010], pre[100010], sccno[100010], cnt[100010];\nint m, n, dfs_time, c;\nint dis[100010], dis2[100010], weight[100010];\nbool visited[100010];\nstruct Node{\n\tint from;\n\tint to;\n\tint wei;\n};\nvector<Node> edges[100010];\nvector<Node> edges2[100010];\nstack<int> s;\nqueue<int> q;\n\nvoid tarjan(int u){\n\tpre[u]=low[u]=++dfs_time;\n\ts.push(u);\n\tfor(int i=0;i<edges[u].size();i++){\n\t\tint a=edges[u][i].to;\n\t\tif(pre[a]==0){\n\t\t\ttarjan(a);\n\t\t\tlow[u]=min(low[u], low[a]);\n\t\t}\n\t\telse if(sccno[a]==0){\n\t\t\tlow[u]=min(low[u], pre[a]);\n\t\t}\n\t}\n\tif(low[u]==pre[u]){\n\t\tc++;\n\t\twhile(!s.empty()){\n\t\t\tint front=s.top(); s.pop();\n\t\t\tsccno[front]=c;\n\t\t\tif(front==u) break;\n\t\t}\n\t}\n\treturn;\n}\n\nvoid spfa(){\n\tvisited[sccno[1]]=true;\n\tdis[sccno[1]]=weight[sccno[1]];\n\tq.push(sccno[1]);\n\twhile(!q.empty()){\n\t\tint top=q.front(); q.pop();\n\t\tvisited[top]=false;\n\t\tfor(int i=0;i<edges2[top].size();i++){\n\t\t\tint t=edges2[top][i].to;\n\t\t\tint w=edges2[top][i].wei;\n\t\t\tif(dis[t]<dis[top]+w){\n\t\t\t\tdis[t]=dis[top]+w;\n\t\t\t\tif(!visited[t]){\n\t\t\t\t\tq.push(t);\n\t\t\t\t\tvisited[t]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\n\nvoid spfa2(){\n\tvisited[sccno[1]]=true;\n\tdis2[sccno[1]]=0;\n\tq.push(sccno[1]);\n\twhile(!q.empty()){\n\t\tint top=q.front(); q.pop();\n\t\tvisited[top]=false;\n\t\tfor(int i=0;i<edges[top].size();i++){\n\t\t\tint t=edges[top][i].to;\n\t\t\tint w=edges[top][i].wei;\n//\t\t\tcout << w << \" \";\n\t\t\tif(dis2[t]<dis2[top]+w){\n\t\t\t\tdis2[t]=dis2[top]+w;\n\t\t\t\tif(!visited[t]){\n\t\t\t\t\tq.push(t);\n\t\t\t\t\tvisited[t]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n//\t\tcout << endl;\n\t}\n\treturn;\n}\n\nint main(){\n\tcin >> n >> m;\n\tfor(int i=0;i<m;i++){\n\t\tNode a;\n\t\tcin >> a.from >> a.to;\n\t\tedges[a.from].push_back(a);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(pre[i]==0) tarjan(i);\n\t}\n//\tcout << \"c=\" << c << endl;\n//\tfor(int i=1;i<=n;i++) cout << i << \": \" << sccno[i] << endl;\n\tfor(int i=1;i<=n;i++){\n\t\tweight[sccno[i]]++;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=0;j<edges[i].size();j++){\n\t\t\tint t=edges[i][j].to;\n\t\t\tint f=edges[i][j].from;\n\t\t\tif(sccno[f]==sccno[t]) continue;\n\t\t\tNode a;\n\t\t\ta.from=sccno[f]; a.to=sccno[t]; a.wei=weight[sccno[t]];\n\t\t\tedges2[a.from].push_back(a);\n\t\t}\n\t}\n//\tfor(int i=1;i<=c;i++){\n//\t\tfor(int j=0;j<edges2[i].size();j++){\n//\t\t\tcout << i << \" \" << edges2[i][j].to << \" \" << edges2[i][j].wei << endl;\n//\t\t}\n//\t}\n\tspfa();\n//\tcout << \"\\n\\n\\n\\n\";\n//\tfor(int i=1;i<=c;i++) cout << i << \": \" << dis[i] << endl;\n//\tcout << \"\\n\\n\\n\\n\";\n\tfor(int i=1;i<=c;i++){\n\t\tedges[i].clear();\n\t}\n\tfor(int i=1;i<=c;i++){\n\t\tfor(int j=0;j<edges2[i].size();j++){\n\t\t\tNode a=edges2[i][j];\n\t\t\tswap(a.from, a.to);\n\t\t\ta.wei=weight[a.to];\n\t\t\tedges[a.from].push_back(a);\n\t\t}\n\t}\n//\tcout << endl;\n//\tfor(int i=1;i<=c;i++){\n//\t\tfor(int j=0;j<edges[i].size();j++){\n//\t\t\tcout << i << \" \" << edges[i][j].to << \" \" << edges[i][j].wei << endl;\n//\t\t}\n//\t}\n\tmemset(visited, 0, sizeof(visited));\n\tspfa2();\n//\tcout << \"\\n\\n\\n\\n\";\n//\tfor(int i=1;i<=c;i++) cout << i << \": \" << dis2[i] << endl;\n//\tcout << \"\\n\\n\\n\\n\";\n\tint ans=weight[sccno[1]];\n\tfor(int i=1;i<=c;i++){\n\t\tfor(int j=0;j<edges[i].size();j++){\n\t\t\tint t=edges[i][j].to;\n\t\t\tans=max(ans, dis[i]+dis2[t]);\n\t\t}\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1550670545,
        "uid": 42479,
        "name": "\u738b\u5955\u970f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "### \u7f29\u70b9\u53d8DAG\uff0c\u5206\u5c42\u56fe+spfa\u8dd1\u4e00\u904d\u5373\u53ef\u51fa\u89e3\n\n**\u6b63\u6587:**\n\n1. \u7f29\u70b9\uff1a\u53ef\u4ee5\u5f53\u505a\u8dd1spfa\u7684\u4f18\u5316\u5427,\u867d\u7136\u5fc5\u8981\u6027\u8fd8\u662f\u5f88\u5927\uff1a\u53d8DAG\u540e\u4fdd\u8bc1\u7b2c\u4e8c\u5c42\u56fe\uff0c\u4e0d\u518d\u91cd\u590d\u7b2c\u4e00\u5c42\u56fe\u7ecf\u8fc7\u70b9\n\n2. \u5206\u5c42\u56fe\uff1a\n\t```cpp\n\t1. \u5c06\u539f\u56fe\u5199\u505a2\u4e2a\uff08n\u4e3a\u70b9\u7684\u4e2a\u6570\uff09\n\t2. First\u56fe\uff1au-->v\n\t   Second\u56fe\uff1au+n-->v+n\n\t   Fir->Sec\u56fe\uff1av-->u+n(\u8fd9\u6837\u5c31\u5c06\u7b2c\u4e00\u3001\u4e8c\u5c42\u56fe\u8054\u7cfb\u8d77\u6765\u4e86\uff0c\u7531\u4e8eDAG\uff0c\u5728Sec\u56fe\u65f6\u4e0d\u4f1a\u91cd\u590d\u52a0Fir\u56fe\u7ecf\u8fc7\u70b9\u7684\u70b9\u6743)\n       \n    PS\uff1aSec\u56fe\u540c\u6837\u6709\u70b9\u6743\n\t```\n3. spfa:~~\u5b83\u6b7b\u4e86~~ \u6ce8\u610f\u8d77\u70b9\u53d8\u4e3a\u7f29\u70b9\u540e1\u7684\u6240\u5728\u70b9\n\n**Code:**\n```cpp\n#include<bits/stdc++.h>//\u5206\u5c42\u56fe \nusing namespace std;\nconst int maxn=2e5+5;\nint low[maxn],dfn[maxn],x[maxn],y[maxn],head[maxn<<1],sz[maxn],col[maxn],dis[maxn<<1],n,m,dfs_clock,size,tot;\nbool vis[maxn<<1];\nstruct node{\n\tint u,v,nxt;\n}e[maxn<<1];\n\nint read(){\n\tint x=0;char a=getchar();\n\twhile(!isdigit(a)) a=getchar();\n\twhile(isdigit(a)) {x=x*10+a-'0';a=getchar();}\n\treturn x;\n}\n\nvoid add(int u,int v){\n\te[++size].u=u;\n\te[size].v=v;\n\te[size].nxt=head[u];\n\thead[u]=size;\n}\n\nstack<int>s;\nvoid tarjan(int u){\n\ts.push(u);\n\tdfn[u]=low[u]=++dfs_clock;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(!col[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif(dfn[u]==low[u]){\n\t\t++tot;int k;\n\t\tdo{\n\t\t\tk=s.top();s.pop();\n\t\t\tcol[k]=tot;\n\t\t\tsz[tot]++;//\u7f29\u70b9\u5185\u539f\u70b9\u6570\u91cf\uff0c\u5373\uff1a\u70b9\u6743\n\t\t}while(k!=u);\n\t}\n}\n\nqueue<int>q;\nvoid spfa(){\n\tq.push(col[1]);//\u8d77\u70b9\n\tfor(int i=1;i<=2*tot;++i) dis[i]=0;\n\tdis[col[1]]=0;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();vis[u]=0;\n\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].v,w=sz[u];//\u7531\u4e8e\u53d6\u4e861\u53f7\u70b9\uff0c\u5728\u56de\u5230col[1]+tot\u70b9\u65f6\uff0c\u4e0d\u518d\u53bb\uff1b\u6240\u4ee5\uff1a\u6bcf\u6b21\u52a0\u4e0au\u7684\u70b9\u6743\n\t\t\tif(dis[v]<dis[u]+w){\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tif(!vis[v]) vis[v],q.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid clear(){\n\tsize=0;\n\tmemset(e,0,sizeof(e));\n\tmemset(head,0,sizeof(head));\n}\n\nvoid readda(){\n\tfor(int i=1;i<=m;++i){\n\t\tint u=col[x[i]],v=col[y[i]];//\u65b0\u56fe\n\t\tif(u!=v){\n\t\t\tadd(u,v);\n\t\t\tadd(u+tot,v+tot);\n\t\t\tadd(v,u+tot);\n\t\t}\n\t}\n\tfor(int i=1;i<=tot;++i) sz[i+tot]=sz[i];//Sec\u56fe\u4e5f\u6709\u70b9\u6743\n}\n\nint main(){\n\tn=read();m=read();\n\tfor(int i=1,a,b;i<=m;++i){\n\t\tx[i]=read();y[i]=read();\n\t\tadd(x[i],y[i]);\n\t}\n\tfor(int i=1;i<=n;++i) if(!dfn[i]) tarjan(i);//\u7f29\u5b8c\u70b9\u540e\uff0ctot\u6210\u4e3a\u65b0\u7684\u603b\u70b9\u6570\n\tclear();\n\treadda();\n\tspfa();\n\tprintf(\"%d\",dis[col[1]+tot]);//\u5728Sec\u56fe\u4e0a\u56de\u52301\n\treturn 0;\n}\n```\n\n\nrp++",
        "postTime": 1566445998,
        "uid": 109381,
        "name": "Mosher",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u770b\u4e86\u4e00\u4e2a\u4e0a\u5348\u6240\u6709\u9700\u8981\u7684\u76f8\u5173\u77e5\u8bc6\u70b9\u7684\u89c6\u9891\uff0c\u7136\u540e\u82b1\u4e86\u597d\u4e45\u624d\u6253\u51fa\u6765\uff0c\u679c\u7136\u662f\u6c34\u5e73\u4e0d\u591f\u554a\u3002\u3002\u3002\u3002\n\n\n\u4e3a\u4e86\u4ee5\u540e\u8fd8\u80fd\u770b\u61c2\u5e76\u8bb0\u4f4f\u8fd9\u4e9b\u77e5\u8bc6\u70b9\uff0c\u7279\u610f\u5199\u7bc7\u535a\u5ba2\u6765\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n\n\u4f18\u79c0\u9898\u89e3\u535a\u5ba2\uff1a<http://blog.csdn.net/popoqqq/article/details/44081279>\n\n\u4e0a\u9762\u8fd9\u7bc7\u535a\u5ba2\u5199\u4e86\u597d\u591a\u6211\u6ca1\u89c1\u8fc7\u7684\u8bed\u6cd5\uff0c\u770b\u4e0a\u53bb\u597d\u5389\u5bb3\u3002\u3002\u3002\u3002\n\n\n\u9996\u5148\uff0c\u5199\u8fd9\u9053\u9898\u65f6\uff0c\u5148\u8981\u5b66\u4f1a\u4ee5\u4e0b\u77e5\u8bc6\u70b9\uff1a\n\n\n1.\u4e86\u89e3\u5982\u4f55\u5bfb\u627e\u5f3a\u8fde\u901a\u5206\u91cf\u5e76\u8fdb\u884c\u7f29\u70b9\n\n\n2.\u5982\u4f55\u5728DAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\u4e2d\u7528\u62d3\u6251\u627e\u6700\u77ed\u8def\n\n\n3.\u5982\u4f55\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\uff08\u4f1a\u7528vector\u7684\u8bdd\u53ef\u4ee5\u81ea\u52a8\u5ffd\u7565\u8fd9\u4e00\u70b9\uff09\n\n\n\u9898\u76ee\u94fe\u63a5\uff1a<http://www.lydsy.com/JudgeOnline/problem.php?id=3887>\n\n\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u6211\u4eec\u8d70\u5230\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u4e3a\u4e86\u6709\u5c3d\u53ef\u80fd\u591a\u7684\u70b9\uff0c\u6211\u4eec\u4f1a\u628a\u5b83\u5168\u90fd\u8d70\u4e00\u904d\u518d\u51b3\u5b9a\u4ece\u5206\u91cf\u4e2d\u7684\u54ea\u4e2a\u70b9\u8d70\u51fa\u3002\n\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u8fdb\u884c\u7f29\u70b9 \uff0c\u7f29\u70b9\u540e\u7684\u70b9\u6743\u4e3a\u70b9\u6240\u4ee3\u8868\u7684\u539f\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u70b9\u7684\u4e2a\u6570\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u5b83\u53d8\u6210\u4e86\u66f4\u597d\u5904\u7406\u7684DAG\u3002\u5904\u7406\u540e\u7684\u6240\u6709\u70b9\u603b\u5171\u80fd\u5206\u6210\u4e09\u7c7b\uff1a\n\n\n1.\u80fd\u5230\u8fbe\u70b91\u7684\n\n\n2.\u4ece\u70b91\u51fa\u53d1\u80fd\u5230\u8fbe\u7684\n\n\n3.\u548c\u70b91\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\n\n\n\u5f88\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u7b2c\u4e09\u7c7b\u70b9\uff0c\u56e0\u4e3a\u5c31\u7b97\u600e\u4e48\u7ffb\u8f6c\u8def\u5f84\uff0c\u7b2c\u4e09\u7c7b\u7684\u70b9\u90fd\u548c\u7b54\u6848\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\u800c\u6211\u4eec\u6700\u7ec8\u8981\u53cd\u8f6c\u7684\u8fb9\u5728\u4e00\u5f00\u59cb\u4e00\u5b9a\u662f\u4e00\u6761\u4ece\u7b2c\u4e8c\u7c7b\u70b9\u5230\u7b2c\u4e00\u7c7b\u70b9\u7684\u8fb9\uff0c\u6211\u4eec\u628a\u8fd9\u6837\u7684\u8fb9\u5168\u90e8\u53cd\u8f6c\uff0c\u628a\u80fd\u8fbe\u5230\u70b91\u7684\u8def\u5f84\u7edf\u7edf\u6539\u6210\u5230\u8fbe\u70b9n+1\uff0c\u8fd9\u6837\u95ee\u9898\u5c31\u7b80\u5316\u6210\u4e86\u5728DAG\u4e2d\u627e\u4e00\u6761\u4ece\u70b91\u5230\u70b9n+1\u7684\u70b9\u6743\u548c\u6700\u5927\u7684\u8def\u5f84\uff0c\u5f88\u660e\u663e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u62d3\u6251+dp\u89e3\u51b3\u4e86\uff1b\n\n\n\u53ef\u80fd\u6709\u4eba\u4f1a\u548c\u6211\u521a\u5f00\u59cb\u4e00\u6837\u89c9\u5f97\u4e07\u4e00\u6211\u4eec\u6700\u540e\u627e\u5230\u7684\u8def\u5f84\u4e2d\u6709\u4e24\u6761\u8fb9\u88ab\u53cd\u8f6c\u8fc7\uff0c\u600e\u4e48\u529e\uff1f\u5176\u5b9e\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u6709\uff0c\u90a3\u4e48\u90a3\u4e24\u6761\u88ab\u53cd\u8f6c\u7684\u8fb9\u7684\u4e2d\u95f4\u7684\u8def\u5f84\u4e00\u5b9a\u7b26\u5408\u5b83\u4eec\u672a\u53cd\u8f6c\u4e4b\u524d\u5c31\u65e2\u80fd\u5230\u8fbe\u70b91\uff0c\u4e5f\u80fd\u88ab\u70b91\uff0c\u53ef\u662f\u8fd9\u662fDAG\uff0c\u7edd\u4e0d\u4f1a\u5b58\u5728\u73af\u3002\n\n\n\u5514\uff0c\u8fd9\u662f\u5927\u6982\u601d\u8def\uff0c\u4e0b\u9762\u7684\u7a0b\u5e8f\u5b9e\u73b0\u4e0e\u8fd9\u4e2a\u601d\u8def\u5b58\u5728\u4e00\u70b9\u5c0f\u5c0f\u7684\u5dee\u5f02\uff0c\u5177\u4f53\u7a0b\u5e8f\u6ce8\u91ca\u4e2d\u8bb2\u5427\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<stack>\nusing namespace std;\nstruct point{\n    int to,next;\n}edge[200000],edge1[200000][3];\nint cnt,n,m,ans,t,tot;\nint head[200000],head1[200000][3],d[200000][3],dfn[200000],low[200000],v[200000];\nint node[200000],f[200000][3],size[200000],q[200000];\nstack<int>s;\nvoid add(int u,int v)\n{\n  edge[++cnt].to=v;\n  edge[cnt].next=head[u];\n  head[u]=cnt;\n}\nvoid add1(int u,int v,int ch)\n//ch\u4e3a1\u7684\u65f6\u5019\u8868\u793a\u539f\u672c\u7684\u7f29\u70b9\u540e\u7684\u56fe\uff0c2\u7684\u65f6\u5019\u8868\u793a\u6240\u6709\u8fb9\u90fd\u5df2\u53cd\u5411\u8fc7\u7684\u56fe\n{\n   if (ch==1) cnt++;\n   d[v][ch]++; \n   edge1[cnt][ch].to=v;\n   edge1[cnt][ch].next=head1[u][ch];\n   head1[u][ch]=cnt;\n}\nvoid tarjan(int u)\n{\n  dfn[u]=low[u]=++t;//\u8d4b\u521d\u503c\n  s.push(u);//\u653e\u5165\u6808\u4e2d\n  for (int i=head[u];i;i=edge[i].next)\n      if (dfn[edge[i].to]==0)\n//\u5982\u679c\u8bf4\u8fd9\u4e2a\u70b9\u7684dfn\u4e3a0\u7684\u8bdd\u5c31\u8868\u793a\u8fd9\u4e2a\u70b9\u8fd8\u672a\u88ab\u641c\u7d22\u5230\u8fc7\n      {\n        tarjan(edge[i].to);\n        low[u]=min(low[u],low[edge[i].to]);\n    }\n    else if (!v[edge[i].to])\n//\u8fd9\u4e2a\u70b9\u6ca1\u6709\u51fa\u6808\u7684\u8bdd\n     low[u]=min(low[u],dfn[edge[i].to]);\n   if (dfn[u]==low[u])//\u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u7684\u8bdd\n   {\n        tot++;//\u5f3a\u8fde\u901a\u5206\u91cf\u6570\u91cf\u52a01\uff0c\u53ca\u7f29\u70b9\u540e\u7684\u70b9\u6570\u52a01\n        int now=0;\n        while (now!=u)\n        {\n          now=s.top();//\u5f39\u51fa\u6808\n          s.pop();\n       v[now]=true;//\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u51fa\u6808\u4e86\n       node[now]=tot;//\u8fd9\u4e2a\u70b9\u5c5e\u4e8e\u54ea\u4e00\u5757\u5f3a\u8fde\u901a\u5206\u91cf\n       size[tot]++;    //\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\u52a01\n     }\n   }\n}\nvoid find(int ch)\n{\n  f[node[1]][ch]=size[node[1]];\n//ch\u4f9d\u65e7\u8868\u793a\u8def\u662f\u5426\u88ab\u53cd\u5411\n//f[i][ch]\u6570\u7ec4\u5219\u8868\u793a\u5728\u5f53\u524d\u7684\u56fe\uff0c1\u5230\u8fbe[i]\u7684\u8def\u5f84\u4e0a\u70b9\u6743\u548c\u6700\u5927\u4e3a\u591a\u5c11\n  int ta=0; \n//\u5f53\u524d\u961f\u5217\u7684\u5c3e\u5df4\n  for (int i=1;i<=tot;i++) \n  if (d[i][ch]==0) q[++ta]=i;//\u5982\u679c\u8bf4\u5165\u5ea6\u4e3a0\uff0c\u52a0\u5165\u961f\u5217\n  while  (ta>0)//\u62d3\u6251+dp\u5c31\u4e0d\u8be6\u7ec6\u89e3\u91ca\u4e86\n  {\n      int p=q[ta--];\n      for (int i=head1[p][ch];i;i=edge1[i][ch].next)\n      {\n        f[edge1[i][ch].to][ch]=max(f[edge1[i][ch].to][ch],f[p][ch]+size[edge1[i][ch].to]);\n      if (--d[edge1[i][ch].to][ch]==0) q[++ta]=edge1[i][ch].to;\n    }\n  }\n}\nint main()\n{\n  int x,y;\n  scanf(\"%d%d\",&n,&m);\n  for (int i=1;i<=m;i++)    \n  {\n      scanf(\"%d%d\",&x,&y);\n      add(x,y);//\u8fde\u63a5\u672a\u7f29\u70b9\u4e4b\u524d\u7684\u8fb9\n  }\n  t=0;\n  for (int i=1;i<=n;i++) if (!v[i]) tarjan(i);\n//\u7528tarjan\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u5e76\u8fdb\u884c\u7f29\u70b9\n//v[i]\u8868\u793a\u8fd9\u4e2a\u70b9\u6709\u65e0\u51fa\u6808\uff0c\u5982\u679c\u4e3afalse\u7684\u8bdd\uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u8fd8\u672a\u88ab\u8bbf\u95ee\u6216\u8005\u8bf4\u8fd8\u5728\u6808\u4e2d\n cnt=0; \n  for (int i=1;i<=n;i++)\n   for (int j=head[i];j;j=edge[j].next)\n    if (node[i]!=node[edge[j].to])//\u6b64\u8bed\u53e5\u907f\u514d\u81ea\u73af\n    {\n      add1(node[i],node[edge[j].to],1);//\u8fde\u8fb9\uff0c\u4e4b\u540e\u641c\u7d22\u51fa\u7684\u662f1\u80fd\u5230\u8fbe\u7684\u70b9\n      add1(node[edge[j].to],node[i],2);//\u6211\u4eec\u53cd\u5411\u6240\u6709\u7684\u8fb9\uff0c\u8fd9\u6837\u641c\u7d22\u51fa\u67651\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u5176\u5b9e\u662f\u80fd\u5230\u8fbe1\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u6784\u9020n+1\u8fd9\u4e2a\u70b9\n    }\n  memset(f,0xef,sizeof f);//\u6e05\u7a7a\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u8d1f\u6570\n  find(1);find(2);//\u641c\u7d22\n  ans=size[node[1]];//\u5f00\u59cb\u7b54\u6848\u7684\u5927\u5c0f\u4e3a1\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\n  for (int i=1;i<=n;i++)\n   for (int j=head[i];j;j=edge[j].next)\n//\u8fd9\u91cc\u6211\u4eec\u679a\u4e3e\u6240\u6709\u672a\u7f29\u70b9\u524d\u7684\u8fb9\uff08\u5f53\u7136\u8fd9\u4e2a\u53d6\u51b3\u4e8e\u4f60\u81ea\u5df1\uff09\n//\u8fb9\u7684\u65b9\u5411\u672c\u6765\u662fnode[i]\u2014\u2014>node[edge[j].to]\n//\u6211\u4eec\u628a\u5b83\u4eec\u53cd\u5411\uff0cf[node[edge[j].to]][1]\u8868\u793a\u4ece\u70b91\u5230node[edge[j].to]\uff0c\u6700\u5927\u70b9\u6743\u548c\u4e3a\u591a\u5c11\n//f[node[i]][2]\u8868\u793a\u4ecenode[i]\u5230\u70b91\u6700\u5927\u70b9\u6743\u548c\u4e3a\u591a\u5c11\n//\u8fd9\u6837\u8fb9\u53cd\u5411\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6210\u529f\u7684\u6784\u5efa\u4e00\u6761\n//\u4e0d\u8fc7\u56e0\u4e3af[node[edge[j].to]][1]\u548cf[node[i]][2]\u90fd\u5305\u542b\u4e861\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u6743\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u51cf\u53bb\u4e00\u4e2asize[node[1]]\u3002\n//1\u2014\u2014>node[edge[j].to]\u2014\u2014>node[i]\u2014\u2014>1\u7684\u8def\u5f84\u4e86\n    if (node[i]!=node[edge[j].to])\n    ans=max(ans,f[node[edge[j].to]][1]+f[node[i]][2]-size[node[1]]);\n   printf(\"%d\\n\",ans);\n   return 0;   \n} \n```\n\u770b\u5b8c\u8fd9\u9053\u9898\u597d\u50cf\u6536\u83b7\u4e86\u4e0d\u5c11\u3002\u3002\u3002",
        "postTime": 1487743349,
        "uid": 21621,
        "name": "nihanchu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "****\n\n\u8fd9\u9053\u9898\u663e\u7136\u8981\u5148 Tarjan \u7f29\u70b9\u9884\u5904\u7406\uff1b\n\n\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\uff1b\n\n\u4e4b\u540e\u7684\u70b9\u90fd\u662f\u7f29\u70b9\u4e4b\u540e\u70b9\u96c6\uff1b\n\n\n\u6211\u4eec\u8003\u8651\u4e24\u79cd\u70b9\uff1a\n\n> <1> \u4ee5 1 \u4e3a\u8d77\u70b9\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\u7684\uff1b \n\u6211\u4eec\u8fd9\u91cc\u53eb\u5b83\u4e00\u7c7b\u70b9\uff1b\n\n<2> \u4ee5\u8be5\u70b9\u4e3a\u8d77\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe 1 \u7684\uff1b\n\n\u6211\u4eec\u8fd9\u91cc\u53eb\u5b83\u4e8c\u7c7b\u70b9\uff1b\n\n\n\u6240\u4ee5\u6211\u4eec\u5148\u7528 spfa \u5904\u7406\u51fa\u6765\u4ece 1 \u5230\u8fd9\u4e24\u79cd\u70b9\u7684\u70b9\u6743\u503c\uff1b\n\n\u7edf\u8ba1 ans \u7528\uff1b\n\n\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u4e2a\u4e00\u7c7b\u70b9\uff1b\n\n\u7531\u4e8e\u6211\u4eec\u53ea\u80fd\u8d70\u4e00\u6b21\u53cd\u8fb9\uff1b\n\n\u6240\u4ee5\u6211\u4eec\u6240\u8981\u7684\u53cd\u8fb9\u4e00\u5b9a\u4e0e\u4e00\u7c7b\u70b9\u548c\u4e8c\u7c7b\u70b9\u76f8\u8fde\uff1b\n\n\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u786e\u4fdd\u4ece 1 \u51fa\u53d1\uff0c\u518d\u56de\u5230 1 \uff1b\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u4e00\u7c7b\u70b9\u548c\u4e8c\u7c7b\u70b9\u76f8\u8fde\u7684\u8fb9\u4e00\u5b9a\u6ee1\u8db3\uff1b\n\n\u90a3\u4e48\u6211\u4eec\u679a\u4e3e\u8fd9\u4e9b\u8fb9\uff1b\n\n\u7136\u540e\u7edf\u8ba1\u6240\u8fde\u4e24\u70b9\u7684\u70b9\u6743\u548c\uff1b\n\n\u66f4\u65b0 ans \uff1b\n\n\u4f46\u662f\u7531\u4e8e\u5728\u4e00\u5f00\u59cb spfa \u5904\u7406\u65f6\uff1b\n\n1 \u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u8ba1\u7b97\u4e86\u4e24\u904d\uff1b\n\n\u6240\u4ee5\u6700\u540e\u8981\u51cf\u6389\uff1b\n\n\n***\n\n```cpp\n#include \"iostream\"\n#include \"stdio.h\"\n#include \"algorithm\"\n#include \"vector\"\n#include \"map\"\n#include \"queue\"\n#define II int\n#define R register\n#define I 123546\nusing namespace std;\n\n\nstruct node {\n    II to,up;\n} aa[I], aa_1[I];\n\nII head[I], DFN[I], LOW[I], is[I], stack[I], vis[I], belong[I], nu[I];\n\nII inq[I], in_just[I], dis_back[I], in_back[I], dis_just[I], head_1[I], dis[I];\n\nII _tot,n,m,_top,_num,bit,ans,_tot_1;\n\nvector <II> just[I], back[I];\n\nqueue <II> Q;\n\nvoid add(R II x,R II y)\n{\n    aa[++_tot].to=y;\n    aa[_tot].up=head[x];\n    head[x]=_tot;\n}\n\nvoid  add_1(R II x,R II y)\n{\n    aa_1[++_tot_1].to=y;\n    aa_1[_tot_1].up=head_1[x];\n    head_1[x]=_tot_1;\n}\n\n\nvoid Tarjan(R II x)\n{\n    DFN[x]=LOW[x]=++_num;\n    stack[++_top]=x; vis[x]=1;\n    for(R II i=head[x];i;i=aa[i].up) \n    {\n        R II go=aa[i].to;\n        if(!DFN[go]) {\n            Tarjan(go);\n            LOW[x]=min(LOW[x],LOW[go]);\n        } else if(vis[go]) LOW[x]=min(LOW[x],DFN[go]);\n    }\n    \n    if(LOW[x]==DFN[x]) {\n        bit++;\n        do {\n            R II o=stack[_top--];\n            vis[o]=0;\n            belong[o]=bit;\n            nu[bit]++;\n        } while (stack[_top+1]!=x) ;\n    }\n}\n\n\nvoid dfs_just(R II x)\n{\n    in_just[x]=1;\n    for(R II i=0;i<just[x].size();i++)\n    {\n        R II go=just[x][i];\n        if(!in_just[go]) {\n            dfs_just(go);\n        }\n    }\n}\n\n\nvoid dfs_back(R II x)\n{\n    in_back[x]=1;\n    for(R II i=0;i<back[x].size();i++)\n    {\n        R II go=back[x][i];\n        if(!in_back[go]) {\n            dfs_back(go);\n        }\n    }\n}\n\n\nvoid spfa_just()\n{\n    for(R II i=1;i<=bit;i++) dis_just[i]=-1e9;\n    Q.push(belong[1]); inq[belong[1]]=1;\n    dis_just[belong[1]]=nu[belong[1]];\n    \n    while (!Q.empty()) {\n        R II x=Q.front(); Q.pop(); inq[x]=0;\n        for(R II i=0;i<just[x].size();i++)\n        {\n            R II go=just[x][i];\n            if(dis_just[go]<dis_just[x]+nu[go]) {\n                dis_just[go]=dis_just[x]+nu[go];\n                if(!inq[go]) {\n                    Q.push(go);\n                    inq[go]=1;\n                }\n            }\n        }\n    }\n}\n\n\nvoid spfa_back()\n{\n    for(R II i=1;i<=bit;i++) dis_back[i]=-1e9;\n    Q.push(belong[1]); inq[belong[1]]=1;\n    dis_back[belong[1]]=nu[belong[1]];\n    \n    while (!Q.empty()) {\n        R II x=Q.front(); Q.pop(); inq[x]=0;\n        for(R II i=0;i<back[x].size();i++)\n        {\n            R II go=back[x][i];\n            if(dis_back[go]<dis_back[x]+nu[go]) {\n                dis_back[go]=dis_back[x]+nu[go];\n                if(!inq[go]) {\n                    Q.push(go);\n                    inq[go]=1;\n                }\n            }\n        }\n    }\n}\n\n\nint main()\n{\n//    freopen(\"1.in\",\"r\",stdin);\n    \n    scanf(\"%d%d\",&n,&m);\n    for(R II i=1;i<=m;i++)\n    {\n        R II x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n    }\n    \n    for(R II i=1;i<=n;i++)\n    {\n        if(!DFN[i]) {\n            Tarjan(i);\n        }\n    }\n    // \u7f29\u70b9; \n    \n    for(R II i=1;i<=n;i++)\n    {\n        for(R II j=head[i];j;j=aa[j].up)\n        {\n            R II go=aa[j].to;\n            if(belong[go]!=belong[i]) {\n                just[belong[i]].push_back(belong[go]);\n                back[belong[go]].push_back(belong[i]);\n            }\n        }\n    }\n    // \u5efa\u6b63\u53cd\u8fb9; \n\n    dfs_just(belong[1]);\n    dfs_back(belong[1]);\n    // \u8bb0\u5f55\u4e00\u3001\u4e8c\u7c7b\u70b9; \n\n    spfa_just();\n    spfa_back();\n    // \u8ba1\u7b97\u6743\u503c; \n    \n    for(R II i=1;i<=bit;i++)\n    {\n        if(in_just[i]) {\n            for(R II j=0;j<back[i].size();j++)\n            {\n                R II go=back[i][j];\n                if(in_back[go]) {\n                    ans=max(ans,dis_just[i]+dis_back[go]);\n                }\n            }\n        }\n    }\n    // \u679a\u4e3e\u5408\u6cd5\u7684\u8fb9; \n        \n    printf(\"%d\\n\",ans-nu[belong[1]]);\n    // \u51cf\u53bb 1 \u591a\u7b97\u7684\u7684\u6743\u503c; \n    exit(0);\n}\n```\n\u8fd9\u4e2a\u9898\u7684\u96be\u70b9\u4e0d\u5728\u4e8e\u601d\u8def\uff0c\u800c\u662f\u4ee3\u7801\u5b9e\u73b0\uff1b\n\n***",
        "postTime": 1509277615,
        "uid": 36716,
        "name": "wuzhoupei",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u5404\u4f4d`dalao`\u90fd\u662f\u7528`SPFA`\u505a\u51fa\u6765\u7684\u3002\u867d\u7136\u8fd9\u9898`SPFA`\u8dd1`DAG`\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u66f4\u52a3\uff0c\u4f46\u662f\u5374\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4e0d\u7528`SPFA`\u6765\u505a\u3002\u56e0\u4e3a\u7f29\u70b9\u540e\u56fe\u53d8\u6210\u4e86\u4e00\u5f20`DAG`\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528`DAG DP`\u6c42\u6700\u957f\u8def\u3002\n\n\u5177\u4f53\u6d41\u7a0b\u662f\uff0c\u5efa\u56fe\u7684\u540c\u65f6\u5efa\u53cd\u56fe\u3002\u7531\u4e8e\u5f3a\u8fde\u901a\u5206\u91cf\u5728\u53cd\u56fe\u4e2d\u4e0d\u53d8\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u6c42\u4e00\u6b21\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u7136\u540e\uff0c`c[x]`\u8868\u793a`x`\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u4ece`c[1]`\u5f00\u59cb\uff0c\u53cd\u5411\u8dd1\u4e00\u904d`dp`\uff0c\u6c42\u51fa\u4ece`i`\u8d70\u5230`c[1]`\u7684\u6700\u957f\u8def\u5f84\uff0c\u7136\u540e\u518d\u4ece`c[1]`\u5f00\u59cb\u6b63\u5411\u8dd1\u4e00\u904d`dp`\uff0c\u6c42\u51fa\u53e6\u4e00\u4e2a\u65b9\u5411\u7684\u6700\u957f\u8def\u5f84\u7684\u540c\u65f6\u6c42\u51fa\u7b54\u6848\u3002\n\n\u7b54\u6848\u662f\uff0c\u5728\u6c42\u53e6\u4e00\u4e2a\u65b9\u5411\u7684\u6700\u957f\u8def\u5f84\u7684\u540c\u65f6\uff0c\u679a\u4e3e\u4e00\u4e0b\u5165\u8fb9\u3002\u5982\u679c\u5b58\u5728\u4e00\u6761\u8fb9`<r,l>`\uff0c`r`\u662f\u53cd\u5411\u7684\uff0c`l`\u662f\u6b63\u5411\u7684\uff0c\u5219\u66f4\u65b0\u7b54\u6848`ans`\u4e3a`max(ans,dp[r]+dp[l])`\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a$\\Theta(n+m)$\u3002\n\n\u9644AC\u4ee3\u7801\uff1a\n\n```cpp\n#include <queue>\n#include <cstdio>\nusing namespace std;\n\ninline void chkmax(int& a,int b)\n{\n\tif(a<b)\n\t{\n\t\ta = b;\n\t}\n}\n\ninline void chkmin(int& a,int b)\n{\n\tif(b<a)\n\t{\n\t\ta = b;\n\t}\n}\n\nint beg[100005];\nint rbeg[100005];\nint cbeg[100005];\nint rcbeg[100005];\nint ed[400005];\nint nxt[400005];\nint top;\n\nvoid addedge(int* beg,int a,int b)\n{\n\t++top;\n\ted[top] = b;\n\tnxt[top] = beg[a];\n\tbeg[a] = top;\n}\n\nint lvis[100005];\nint rvis[100005];\n\nvoid lvvs(int x)\n{\n\tlvis[x] = 1;\n\tfor(int p=beg[x]; p; p=nxt[p])\n\t{\n\t\tif(!lvis[ed[p]])\n\t\t{\n\t\t\tlvvs(ed[p]);\n\t\t}\n\t}\n}\n\nvoid rvvs(int x)\n{\n\trvis[x] = 1;\n\tfor(int p=rbeg[x]; p; p=nxt[p])\n\t{\n\t\tif(!rvis[ed[p]])\n\t\t{\n\t\t\trvvs(ed[p]);\n\t\t}\n\t}\n}\n\nint ci[100005];\nint dfn[100005];\nint low[100005];\nint stk[100005];\nint ins[100005];\nint stktop;\nint dfntop;\nint ctop;\n\nvoid tarjan(int x)\n{\n\t++stktop;\n\t++dfntop;\n\tlow[x] = dfn[x] = dfntop;\n\tstk[stktop] = x;\n\tins[x] = 1;\n\t\n\tfor(int p=beg[x]; p; p=nxt[p])\n\t{\n\t\tif(!dfn[ed[p]])\n\t\t{\n\t\t\ttarjan(ed[p]);\n\t\t\tchkmin(low[x],low[ed[p]]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(ins[ed[p]])\n\t\t\t{\n\t\t\t\tchkmin(low[x],low[ed[p]]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(low[x]==dfn[x])\n\t{\n\t\t++ctop;\n\t\twhile(stk[stktop]!=x)\n\t\t{\n\t\t\tci[stk[stktop]] = ctop;\n\t\t\tins[stk[stktop]] = 0;\n\t\t\t--stktop;\n\t\t}\n\t\tci[x] = ctop;\n\t\tins[x] = 0;\n\t\t--stktop;\n\t}\n}\n\nint mi[100005];\nint ind[100005];\nint rind[100005];\nint dp[100005];\n\nint clvis[100005];\nint crvis[100005];\n\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\taddedge(beg,a,b);\n\t\taddedge(rbeg,b,a); \n\t}\n\t\n\tlvvs(1);\n\trvvs(1);\n\t\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tif(!dfn[i])\n\t\t{\n\t\t\ttarjan(i);\n\t\t}\n\t}\n\t\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\t++mi[ci[i]];\n\t\tclvis[ci[i]] = clvis[ci[i]]||lvis[i];\n\t\tcrvis[ci[i]] = crvis[ci[i]]||rvis[i];\n\t}\n\t\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tfor(int p=rbeg[i]; p; p=nxt[p])\n\t\t{\n\t\t\tif(ci[ed[p]]!=ci[i])\n\t\t\t{\n\t\t\t\taddedge(rcbeg,ci[i],ci[ed[p]]);\n\t\t\t\t\n\t\t\t\tif(rvis[i])\n\t\t\t\t{\n\t\t\t\t\t++rind[ci[ed[p]]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int p=beg[i]; p; p=nxt[p])\n\t\t{\n\t\t\tif(ci[ed[p]]!=ci[i])\n\t\t\t{\n\t\t\t\taddedge(cbeg,ci[i],ci[ed[p]]);\n\t\t\t\t\n\t\t\t\tif(lvis[i])\n\t\t\t\t{\n\t\t\t\t\t++ind[ci[ed[p]]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tqueue<int> q;\n\tq.push(ci[1]);\n\t\n\twhile(!q.empty())\n\t{\n\t\tint th = q.front();\n\t\tq.pop();\n\t\t\n\t\tdp[th] += mi[th];\n\t\t\n\t\tfor(int p=rcbeg[th]; p; p=nxt[p])\n\t\t{\n\t\t\tif(crvis[ed[p]])\n\t\t\t{\n\t\t\t\t--rind[ed[p]];\n\t\t\t\tchkmax(dp[ed[p]],dp[th]);\n\t\t\t\n\t\t\t\tif(!rind[ed[p]])\n\t\t\t\t{\n\t\t\t\t\tq.push(ed[p]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tq.push(ci[1]);\n\tdp[ci[1]] -= mi[ci[1]]; //\u9632\u6b62\u8d77\u70b9\u88ab\u91cd\u590d\u7b97\n\t\n\tint ans = mi[ci[1]]<<1;\n\twhile(!q.empty())\n\t{\n\t\tint th = q.front();\n\t\tq.pop();\n\t\t\n\t\tdp[th] += mi[th];\n\t\t\n\t\tfor(int p=rcbeg[th]; p; p=nxt[p])\n\t\t{\n\t\t\tif(crvis[ed[p]] && dp[ed[p]])\n\t\t\t{\n\t\t\t\tchkmax(ans,dp[ed[p]]+dp[th]);\n\t\t\t}\n\t\t}\n\t\tfor(int p=cbeg[th]; p; p=nxt[p])\n\t\t{\n\t\t\tif(clvis[ed[p]])\n\t\t\t{\n\t\t\t\t--ind[ed[p]];\n\t\t\t\tchkmax(dp[ed[p]],dp[th]);\n\t\t\t\n\t\t\t\tif(!ind[ed[p]])\n\t\t\t\t{\n\t\t\t\t\tq.push(ed[p]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprintf(\"%d\\n\",ans-mi[ci[1]]); //\u8d77\u70b9\u88ab\u91cd\u590d\u7b97\u4e86\u6240\u4ee5\u8981\u51cf\u53bb\n}\n```",
        "postTime": 1569581708,
        "uid": 49458,
        "name": "\u6728\u6728\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u849f\u84bb\u535a\u5ba2\u4f20\u9001\u95e8\uff1a[QAQ](https://www.cnblogs.com/GoldenPotato/p/9168356.html)\n\n\n\n------------\n\n\n### Solution\n\n\n\u8fd9\u9898\u663e\u7136\u8981\u5148\u628a\u7f29\u70b9\u505a\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u5982\u4f55\u5904\u7406\u8d70\u53cd\u5411\u8fb9\u7684\u95ee\u9898\u3002\n\n\u50cf\u6211\u8fd9\u6837\u7684\u849f\u84bb\uff0c\u5f53\u7136\u662f\u4f7f\u7528\u641c\u7d22\uff0c\u5e26\u8bb0\u5fc6\u5316\u7684\u90a3\u79cd\uff08\u6ed1\u7a3d\uff09\u3002\n\n .\n \n .\n \n\n**\u8003\u8651\u8bbef(i,j)\u8868\u793a\u5230\u8fbe\u7b2ci\u4e2a\u70b9\uff0c\u8fd8\u80fd\u8d70j\u6b21\u53cd\u5411\u8fb9\uff0c\u6240\u80fd\u5230\u8fbe\u7684\u6700\u591a\u7684\u70b9\u7684\u6570\u91cf\u3002**\n\n\u8f6c\u79fb\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a\n\n![QAQ](https://cdn.luogu.com.cn/upload/pic/20957.png)\n\n**\u5982\u679cx\u80fd\u5230\u8fbe1\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6216max\u51fa\u6765\u7684\u503c\u4e0d\u4e3a0\uff0c\u8bf4\u660e\u5f53\u524d\u72b6\u6001\u53ef\u884c\uff0c\u5426\u5219\u4e0d\u53ef\u884c\u3002**\n\n.\n\n.\n\n \n\n\u7136\u540e\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u8868\u8fbe\u51fa\u6765\u5c31OK\u4e86\n\n\n------------\n### Solution\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<stack>\n#include<cstring>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int N=100000+100;\nstruct road\n{\n    int to,IsBack;\n    road (int A,int B)\n    {\n        to=A,IsBack=B;\n    }\n};\nvector <int> e[N];\nvector <road> e2[N];\nint belong[N],nd_tot,nd_to,low[N],dfn[N],InStack[N],cnt[N];\nstack <int> st;\nvoid Tarjan(int now)\n{\n    low[now]=dfn[now]=++nd_to;\n    InStack[now]=true;\n    st.push(now);\n    for(int i=0;i<int(e[now].size());i++)\n        if(dfn[e[now][i]]==0)\n        {\n            Tarjan(e[now][i]);\n            low[now]=min(low[now],low[e[now][i]]);\n        }\n        else if(InStack[e[now][i]]==true)\n            low[now]=min(low[now],low[e[now][i]]);\n    if(low[now]==dfn[now])\n    {\n        nd_tot++;\n        while(st.empty()==false)\n        {\n            int temp=st.top();\n            st.pop();\n            belong[temp]=nd_tot;\n            InStack[temp]=false;\n            cnt[nd_tot]++;\n            if(temp==now)\n                break;\n        }\n    }\n}\nint n,m,S,f[N][2];\nint dfs(int now,int back)\n{\n    if(f[now][back]>=0) return f[now][back];\n    int t_ans=0;\n    bool OK=false;\n    for(int i=0;i<int(e2[now].size());i++)\n        if(e2[now][i].to!=S and back-e2[now][i].IsBack>=0)\n            t_ans=max(t_ans,dfs(e2[now][i].to,back-e2[now][i].IsBack));\n        else if(back>=e2[now][i].IsBack)\n            OK=true;\n    if(t_ans!=0 or OK==true)\n        return f[now][back]=t_ans+cnt[now];\n    else\n        return f[now][back]=0;\n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=n;i++)\n        e[i].reserve(4),\n        e2[i].reserve(4);\n    for(int i=1;i<=m;i++)\n    {\n        int s=read(),t=read();\n        e[s].push_back(t);\n    }\n    \n    for(int i=1;i<=n;i++)\n        if(dfn[i]==0)\n            Tarjan(i);\n    S=belong[1];\n    for(int i=1;i<=n;i++)\n        for(int j=0;j<int(e[i].size());j++)\n            if(belong[i]!=belong[e[i][j]])\n            {\n                e2[belong[i]].push_back(road(belong[e[i][j]],0));\n                e2[belong[e[i][j]]].push_back(road(belong[i],1));\n            }\n    \n    memset(f,0x80,sizeof f);\n    int ans=0;\n    for(int i=0;i<int(e2[S].size());i++)\n        ans=max(ans,dfs(e2[S][i].to,1-e2[S][i].IsBack));\n    \n    printf(\"%d\",ans+cnt[S]);\n    return 0;\n}\n\n```",
        "postTime": 1528711286,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u5207\u7d2b\u9898\u7a0d\u5fae\u6709\u4e9b\u6fc0\u52a8\uff0c\u7136\u540e\u770b\u5230\u9898\u89e3\u6e05\u4e00\u8272\u7684~~\u5df2\u7ecf\u6b7b\u4e86\u7684~~SPFA\uff0c\u51b3\u5b9a\u81ea\u5df1\u5199\u4e00\u7bc7\u7528\u7f29\u70b9+\u62d3\u6251\u7684\u9898\u89e3\u3002\n#### \u601d\u8def\n\u770b\u5230\u9898\u9762\u4e2d\u7684\u201c\u53ea\u5403\u4e00\u6b21\u201d\u548c\u201c\u6709\u5411\u56fe\u201d\uff0c\u81ea\u7136\u4e0d\u96be\u60f3\u5230\u7f29\u70b9\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u8dd1\u5b8c\u4e00\u904dtarjan\u4e86\uff0c\u8bbe\u8349\u576a $1$ \u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e3a $s$\u3002\u81f3\u591a\u9006\u884c\u4e00\u6b21\u7684\u53ef\u80fd\u60c5\u51b5\u4ec5\u6709\u4e24\u79cd\uff1a\n\n* 1.\u4e0d\u9006\u884c\uff0c\u8fd9\u6837\u5c31\u53ea\u80fd\u5728 $s$ \u91cc\u9762\u8d70\uff0c\u4e0d\u7136\u5c31\u56de\u4e0d\u6765\u4e86\u3002\n* 2.\u4ece $s$ \u5f80\u4e0b\u8d70\uff0c\u8d70\u5230\u5206\u91cf $u$\uff0c\u540c\u65f6\u6709\u4e00\u4e2a \u80fd\u5230\u8fbe $s$ \u7684\u5206\u91cf $v$\u6709\u4e00\u6761\u6307\u5411 $u$ \u7684\u8fb9\uff0c\u4ece $u$ \u9006\u884c\u5230 $v$\uff0c\u518d\u8d70\u5230 $s$\u3002\n\n\u7b2c\u4e00\u70b9\u8fc7\u4e8e\u7b80\u5355\uff0c\u6211\u4eec\u4e3b\u8981\u626f\u626f\u7b2c\u4e8c\u70b9\u3002\n\n\u5173\u4e8e\u7b2c\u4e8c\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5728\u539fDAG\u56fe\u548c\u5176\u53cd\u56fe\u4e0a\u4ee5 $s$ \u4e3a\u8d77\u70b9\u5404\u8dd1\u4e00\u904d\u6700\u957f\u8def\uff0c\u8bbe\u70b9 $i$ \u5728\u4e24\u4e2a\u56fe\u4e0a\u7684\u6700\u957f\u8def\u5206\u522b\u662f $f[1][i],f[1][i]$\u3002\u7b54\u6848\u5c31\u662f $max(f[1][u]+f[0][v]-w[s])$\uff0c\u5176\u4e2d $u,v$ \u662f\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c$w[i]$ \u662f\u5206\u91cf $i$ \u7684\u8282\u70b9\u6570\u3002\n\n\u5173\u4e8e\u5982\u4f55\u8dd1\u6700\u957f\u8def\uff0c\u5927\u591a\u6570\u9898\u89e3\u9009\u62e9\u7684\u662fSPFA\uff0c\u4f46\u662f\u8fd9\u73a9\u610f\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u4e8e\u4e0d\u7a33\u5b9a\uff08\u53ef\u80fd\u4f1a\u88ab\u5361\u6210 $O(NM)$\uff0c\u867d\u7136\u6211\u4e0d\u77e5\u9053DAG\u56fe\u505a\u4e0d\u505a\u5f97\u5230\uff09\uff0c\u800c\u4e14\u5728DAG\u56fe\u4e2d\uff0c\u7528 __\u62d3\u6251__ \u6c42\u6700\u957f\u8def\u663e\u7136\u66f4\u52a0\u65b9\u4fbf\uff0c\u800c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a\u5728 $O(N)$\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u901a\u8fc7\u8dd1\u4e24\u6b21\u62d3\u6251\u6765\u627e\u6700\u957f\u8def\u3002\n\n#### \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\nconst int N = 100005;\nint n, m, ans;\n\nint x[N], y[N];\nint edge[N], next[N], head[N], tot;\n\nint dfn[N], low[N], tt, st[N], top;\nbool ins[N];\n\nint col[N], cnt, w[N];\n// col\u8868\u793a\u8282\u70b9\u6240\u5c5e\u7684\u5206\u91cf\u7f16\u53f7\uff0ccnt\u8868\u793a\u5206\u91cf\u6570\u91cf\uff0cw\u8868\u793a\u5206\u91cf\u5927\u5c0f \nint f[2][N], d[N];\n// f\u7684\u542b\u4e49\u89c1\u4e0a\u6587\uff0cd\u8868\u793a\u6bcf\u4e2a\u5206\u91cf\u7684\u5165\u5ea6 \nbool vis[2][N];\n// vis[0/1][i] \u8868\u793ai\u8282\u70b9\u5728\u6b63/\u53cdDAG\u56fe\u4e0a\u662f\u5426\u80fd\u4eces\u8d70\u5230 \ninline void add(int f, int t)//\u94fe\u5f0f\u524d\u5411\u661f \n{\n\tedge[++tot] = t, next[tot] = head[f], head[f] = tot;\n\treturn;\n}\nvoid tarjan(int x)//\u7528tarjan\u7f29\u70b9 \n{\n\tdfn[x] = low[x] = ++tt;\n\tins[x] = 1, st[++top] = x;\n\tfor(int i = head[x];i;i = next[i])\n\t{\n\t\tint y = edge[i];\n\t\tif(!dfn[y])\n\t\t\ttarjan(y), low[x] = std::min(low[x], low[y]);\n\t\telse if(ins[y])\n\t\t\tlow[x] = std::min(low[x], dfn[y]);\n\t}\n\tif(dfn[x] == low[x])\n\t{\n\t\t++cnt;\n\t\tint tmp = -1;\n\t\twhile(tmp != x)\n\t\t{\n\t\t\ttmp = st[top--];\n\t\t\t++w[cnt], col[tmp] = cnt, ins[tmp] = 0;\n\t\t}\n\t}\n\treturn;\n}\nvoid topo(const int typ)//\u62d3\u6251\u6392\u5e8f\uff0c\u53c2\u6570typ\u7684\u503c0/1\u8868\u793a\u73b0\u5728\u662f\u6b63/\u53cd\u56fe \n{\n\tstd::queue<int> que;\n\tfor(int i = 1;i <= cnt;++i)\n\t\tif(!d[i])//\u5982\u679c\u5165\u5ea6\u4e3a0\uff0c\u538b\u5165\u961f\u5217 \n\t\t\tque.push(i);\n\twhile(!que.empty())\n\t{\n\t\tint x = que.front();\n\t\tf[typ][x] += w[x]; \n\t\tque.pop();\n\t\tfor(int i = head[x];i;i = next[i])\n\t\t{\n\t\t\tint y = edge[i];\n\t\t\t--d[y];\n\t\t\tif(vis[typ][x])\n\t\t\t\tvis[typ][y] = 1, f[typ][y] = std::max(f[typ][x], f[typ][y]);\n\t\t\t//\u5982\u679cs\u80fd\u8d70\u5230x\uff0c\u90a3\u4e48\u4e5f\u80fd\u8d70\u5230y\uff0c\u66f4\u65b0vis\u548cf\u7684\u503c \n\t\t\tif(!d[y])//\u5982\u679c\u5165\u8bfb\u4e3a0\uff0c\u538b\u5165\u961f\u5217 \n\t\t\t\tque.push(y);\n\t\t}\n\t}\n\treturn;\n}\nint main(void)\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1;i <= m;++i)\n\t\tscanf(\"%d%d\", x+i, y+i), add(x[i], y[i]);\n\t//\u7f29\u70b9 \n\tfor(int i = 1;i <= n;++i)\n\t\tif(!dfn[i])\n\t\t\ttarjan(i); \n\tfor(int i = 1;i <= m;++i)\n\t\tx[i] = col[x[i]], y[i] = col[y[i]];\n\tint s = col[1];\n\tvis[0][s] = vis[1][s] = 1;//\u8282\u70b9s\u65e0\u8bba\u5728\u6b63\u53cd\u56fe\u4e0a\u90fd\u80fd\u8d70\u5230\u81ea\u5df1 \n\tmemset(head, 0, sizeof(head)), tot = 0;\n\tmemset(d, 0, sizeof(d));\n\t//\u8dd1\u62d3\u6251\u4e4b\u524d\u8bb0\u5f97memest \n\tfor(int i = 1;i <= m;++i)\n\t\tif(x[i] != y[i])\n\t\t\tadd(x[i], y[i]), ++d[y[i]];\n\ttopo(0);\n\tmemset(head, 0, sizeof(head)), tot = 0;\n\tmemset(d, 0, sizeof(d));\n\t//\u7b2c\u4e8c\u6b21\u4e5f\u4e0d\u8981\u5fd8\u8bb0 \n\tfor(int i = 1;i <= m;++i)\n\t\tif(x[i] != y[i])\n\t\t\tadd(y[i], x[i]), ++d[x[i]];//\u8fd9\u6b21\u662f\u53cd\u56fe \n\ttopo(1);\n\tans = w[s];//\u5bf9\u5e94\u4e0a\u6587\u7b2c\u4e00\u79cd\u60c5\u51b5 \n\tfor(int i = 1;i <= m;++i)\n\t\tif(vis[1][x[i]] && vis[0][y[i]])//\u5bf9\u5e94\u4e0a\u6587\u7b2c\u4e8c\u79cd\u60c5\u51b5 \n\t\t\tans = std::max(ans, f[1][x[i]]+f[0][y[i]]-w[s]);\n\tprintf(\"%d\", ans);//\u8f93\u51fa\u7b54\u6848 \n\treturn 0;\n}\n```",
        "postTime": 1594311985,
        "uid": 244204,
        "name": "namelessgugugu",
        "ccfLevel": 9,
        "title": "P3119 [USACO15JAN]Grass Cownoisseur G \u9898\u89e3"
    },
    {
        "content": "[${\\color{orange}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.org/blog/wzc-wwwwd/)\n\n[P3119 \u3010\\[USACO15JAN\\]\u8349\u9274\u5b9aGrass Cownoisseur\u3011](https://www.luogu.org/problem/P3119)\n\n### \u6b64\u9898\u7b97\u6cd5:tarjan\u7f29\u70b9+\u56fe\u8bba(?)\n\n\u5927\u81f4\u601d\u8def:\n\n>1.$ $\u8f93\u5165\u6709\u5411\u8fb9\u5e76\u5b58\u56fe\u3002tarjan\u7f29\u70b9\u3002\n\n```cpp\nstruct graph{\n\tedge e[N];\n\tint g[N],top,dis[N];\n\tvoid add(int x,int y){\n\t\te[++top]=(edge){\n\t\t\ty,g[x]\n\t\t}; g[x]=top;\n\t} \n} ori,tos,opp;\n```\n    \u4e0a\u4ee3\u7801\u4e2d\u4e09\u4e2a\u56fe\u5206\u522b\u8868\u793a\u539f\u56fe(ori)\uff0c\u7f29\u56fe(tos)\uff0c\u7f29\u56fe\u7684\u53cd\u56fe(opp)\n\n>2.$ $\u5efa\u7f29\u56fe\u53ca\u7f29\u56fe\u7684\u53cd\u56fe\u3002\u5206\u522bspfa\u5c31\u53ef\u4ee5\u5f97\u51fa\u4ee5\u8282\u70b9$1$\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e3a\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u6700\u957f\u8def\u3002\n\n\n(\u6837\u4f8b by mspaint)\n![](https://s2.ax1x.com/2019/10/06/u6dYmF.jpg)\n\n>3.$ $ \u5c06\u7b54\u6848$ans$\u7684\u521d\u59cb\u503c\u7f6e\u4e3a\u8282\u70b9$1$\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u6570\u3002\n\n>4.$ $\u8ba9$ans$\u7b49\u4e8e\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf$i$\u548c\u4e0e\u5b83\u8fde\u7740\u7684\u5f3a\u8fde\u901a\u5206\u91cf$to$\u7684${tos.dis[i]+opp.dis[to]}$\u7684\u6700\u5927\u503c$-$\u8282\u70b9$1$\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u6570($i$\u548c$to$\u4e4b\u95f4\u7684\u90a3\u6761\u8fb9\u5c31\u662f\u53cd\u8fb9)\u3002\n\n>5.$ $\u6700\u540e$ans$\u5c31\u662f\u9898\u76ee\u7684\u7b54\u6848\u3002\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801+\u6ce8\u91ca\n\n```cpp\n//Libra\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e5;\nint n,m,ans;\nstruct edge{\n\tint adj,nex;\n};\nstruct graph{\n\tedge e[N];\n\tint g[N],top,dis[N];\n\tvoid add(int x,int y){\n\t\te[++top]=(edge){\n\t\t\ty,g[x]\n\t\t}; g[x]=top;\n\t} //\u590d\u6742\u4f46\u6e05\u6670\u7684\u5efa\u56fe\n} ori,tos,opp;\nint ind,dfn[N],low[N];\nint cnt,col[N],sum[N];\nbool in[N],use[N];\nstack<int> st;\nvoid tarjan(int x){ //\u7f29\u70b9\u7684\u4ee3\u7801\n\tdfn[x]=low[x]=++ind;\n\tst.push(x); in[x]=1;\n\tfor(int i=ori.g[x];i;i=ori.e[i].nex){ //\u5982\u679ctarjan\u6b7b\u5faa\u73af\u4e86\uff0c\u8fd9\u91cc\u7684e[i].nex\u5f88\u53ef\u80fd\u5199\u6210e[x].nex\u4e86\n\t\tint to=ori.e[i].adj;\n\t\tif(!dfn[to]){\n\t\t\ttarjan(to);\n\t\t\tlow[x]=min(low[x],low[to]);\n\t\t} else if(in[to])\n\t\t\tlow[x]=min(low[x],dfn[to]);\n\t} if(dfn[x]==low[x]){\n\t\tint tmp=0; cnt++;\n\t\twhile(tmp!=x){\n\t\t\ttmp=st.top(); st.pop();\n\t\t\tcol[tmp]=cnt;\n\t\t\tin[tmp]=0;\n\t\t\tsum[cnt]++;\n\t\t}\n\t}\n} void spfa(int set,graph &gr){ //spfa\uff0c\u522b\u5fd8\u4e86\u628agr\u7684\u5730\u5740\u5e26\u8fdb\u53bb\n\tgr.dis[set]=sum[set];\n\tqueue<int> q; q.push(set);\n\twhile(!q.empty()){\n\t\tint now=q.front(); q.pop();\n\t\tfor(int i=gr.g[now];\n\t\ti;i=gr.e[i].nex){\n\t\t\tint to=gr.e[i].adj;\n\t\t\tif(gr.dis[to]<gr.\n\t\t\tdis[now]+sum[to]){\n\t\t\t\tgr.dis[to]=gr.\n\t\t\t\tdis[now]+sum[to];\n\t\t\t\tif(!use[to]){\n\t\t\t\t\tq.push(to);\n\t\t\t\t\tuse[to]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t} use[now]=0;\n\t}\n} int main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tori.add(a,b);\n\t} for(int i=1;i<=n;i++)\n\t\tif(!dfn[i])\n\t\t\ttarjan(i);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=ori.g[i];\n\t\tj;j=ori.e[j].nex){\n\t\t\tint to=ori.e[j].adj;\n\t\t\tif(col[i]!=col[to]){\n\t\t\t\ttos.add(col[i],col[to]); //\u7f29\u56fe\n\t\t\t\topp.add(col[to],col[i]); //\u2191\u7684\u53cd\u56fe\n\t\t\t}\n\t\t}\n\tspfa(col[1],tos); spfa(col[1],opp); //\u4e00\u4e2aspfa\u89e3\u51b3\u4fe9\n\tans=sum[col[1]]; //ans\u7684\u521d\u59cb\u503c\n\tfor(int i=1;i<=cnt;i++){\n\t\tif(!use[i]&&tos.dis[i]){\n\t\t\tuse[i]=1;\n\t\t\tfor(int j=opp.g[i];\n\t\t\tj;j=opp.e[j].nex){\n\t\t\t\tint to=opp.e[j].adj;\n\t\t\t\tif(!opp.dis[to])\n\t\t\t\t\tcontinue;\n\t\t\t\tans=max(ans,tos.dis[i]\n\t\t\t\t+opp.dis[to]-sum[col[1]]); //\u6c42\u6700\u5927ans\n\t\t\t}\n\t\t}\n\t} printf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n\u4e0d\u770bspfa\u548ctarjan\u4ee3\u7801\u8fd8\u633a\u77ed\u3002\n\n\u8c22\u8c22\u5927\u5bb6! !\n\n\n",
        "postTime": 1570326949,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "$\\texttt{\u5f3a\u8fde\u901a\u5206\u91cf + \u6700\u77ed\u8def\u7684\u88f8\u9898}$\n\n\u5bf9\u4e8e\u8fd9\u4e00\u9898 \u7b80\u5316\u4e00\u4e0b\u6a21\u578b:\u4ece 1 \u5904\u51fa\u53d1 \u7136\u540e\u53bb\u5403\u8349 \u6700\u540e\u56de\u52301 \u95ee\u4f60\u6700\u591a\u80fd\u5403\u591a\u5c11\u8349\n\n~~\u5bf9\u4e8e\u9006\u884c\u5565\u73a9\u610f\u5148\u4e0d\u7ba1 \u653e\u8fd9\u513f~~\n\n\u663e\u800c\u6613\u89c1\u8fd9\u662f\u4e2a\u7f29\u70b9\u5c31\u53ef\u4ee5\u505a\u5230\u7684\u4e1c\u897f \n\n\u7f29\u70b9\u4e4b\u540e\u91cd\u6784\u4e00\u4e2a\u56fe \u5bf9\u4e8e\u6700\u77ed\u8def\u51fa\u53d1\u518d\u56de\u6765\u7684\u65b9\u6cd5\u662f\u5efa\u53cd\u5411\u8fb9\n\n\n\n\u8fd9\u9898\u5176\u5b9e\u6c42\u7684\u662f\u6700\u957f\u8def \u6211\u4eec\u53ef\u4ee5\u50cf\u6811\u5256\u4e00\u6837\u628a\u70b9\u8f6c\u6210\u8fb9 \u7136\u540e\u518d\u641e\u6389\u4e00\u4e2a\u70b9\u7684\u8d21\u732e\n\n~~~\ninline void Tarjan(int u) {\n\tdfn[u] = low[u] = ++ tot ;//\u65f6\u95f4\u6233\n\ts[++ top] = u , used[u] = 1 ;\n\tfor(register int i = _head[u] ; i ; i = _e[i].nxt) {\n\t\tint v = _e[i].v ;\n\t\tif(! dfn[v]) {\n\t\t\tTarjan(v) ;\n\t\t\tlow[u] = min(low[u] , low[v]) ;\n\t\t}\n\t\telse if(used[v]) low[u] = min(low[u] , dfn[v]) ;\n\t}\n\tif(low[u] == dfn[u]) {\n\t\tt[co[u] = ++ num] ++ ;//num\u8868\u793a\u7684\u662f\u7b2c\u51e0\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n\t\tused[u] = 0 ;\n\t\twhile(s[top] ^ u) {// ^ \u76f8\u5f53\u4e8e !=\n\t\t\tused[s[top]] = 0 ;//\u6253\u6d88\u6807\u8bb0\n\t\t\tt[co[s[top --]] = num] ++ ;//t\u662f\u5f53\u524d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u6709\u51e0\u4e2a\u70b9\n\t\t}\n\t\ttop -- ;// \u5bf9\u4e8e u \u8fd9\u4e2a\u8282\u70b9\u4e5f\u9700\u8981\u653e\u8fdb\u53bb \u56e0\u4e3a u \u4e5f\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e00\u90e8\u5206\n\t}\n}\n~~~\n\n\n~~~\nfor(register int i = 1 ; i <= n ; i ++) \n\t\tfor(register int j = _head[i] ; j ; j = _e[j].nxt) {\n\t\t\tint v = _e[j].v ;\n\t\t\tif(co[i] ^ co[v]) {\n\t\t\t\tFrom.Add(co[i] , co[v]) ;\n\t\t\t\tBack.Add(co[v] , co[i]) ;\n\t\t\t}\n\t\t}\n~~~\n\n\u5efa\u56fe\u7684\u529e\u6cd5 \u7531\u4e8e\u6211\u592a\u61d2\u4e86\u61d2\u5f97\u5199\u4e24\u4e2aAdd\u4e24\u4e2aSpfa ~~\u5176\u5b9e\u662f\u6211\u61d2\u5f97\u590d\u5236\u7c98\u8d34\u800c\u4e14\u8fd8\u53ef\u80fd\u51fa\u9505~~\n\n\u7136\u540e\u8dd1$Spfa$\u5c31\u53ef\u4ee5\u4e86\n\n\n\u5bf9\u4e8e\u9006\u884c\u3002\u3002 \u4f60\u53ea\u9700\u8981\u9009\u5012\u7740\u7684\u8fb9 \u4e5f\u5c31\u662f\u53cd\u5411\u8fb9 \u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u9006\u884c~~\u6076\u610f\u9006\u884c\u7f5a\u6b3e200~~\n\n~~~\nfor(register int i = 1 ; i <= n ; i ++) \n\t\tif(! used[co[i]] && From.dis[co[i]]) {\n\t\t\tint u = co[i] ;\n\t\t\tused[u] = 1 ;\n\t\t\tfor(register int j = Back.head[u] ; j ; j = Back.e[j].nxt) {\n\t\t\t\tint v = Back.e[j].v ;\n\t\t\t\tif(! Back.dis[v]) continue ;\n\t\t\t\tans = max(ans , From.dis[u] + Back.dis[v] - t[start]) ;\n//\t\t\t\tcout << From.dis[u] + Back.dis[v] - t[start] << endl ;\n\t\t\t}\n\t\t}\n~~~\n\n\n$\\mathcal Code$\n\n\n```cpp\n//Isaunoya\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std ;\ninline int read() {\n\tregister int x = 0 ;\n\tregister int f = 1 ;\n\tregister char c = getchar() ;\n\tfor( ; ! isdigit(c) ; c = getchar()) if(c == '-') f = -1 ;\n\tfor( ; isdigit(c) ; c = getchar()) x = (x << 1) + (x << 3) + (c & 15) ;\n\treturn x * f ;\n}\nint st[105] ;\ntemplate < typename T > inline void write(T x , char c = '\\n') {\n\tint tp = 0 ;\n\tif(x == 0) return (void) puts(\"0\") ;\n\tif(x < 0) putchar('-') , x = -x ;\n\tfor( ; x ; x /= 10) st[++ tp] = x % 10 ;\n\tfor( ; tp ; tp --) putchar(st[tp] + '0') ;\n\tputchar(c) ;\n}\n//#define Online_Judge\n\nint n , m ;\nconst int N = 1e5 + 5 ;\nstruct Edge {\n\tint v , nxt ;\n};\nEdge _e[N << 1] ;\nint _head[N] ;\nint _cnt = 0 ;\ninline void Add(int u , int v) {\n\t_e[ ++ _cnt ].v = v ;\n\t_e[ _cnt ].nxt = _head[u] ;\n\t_head[u] = _cnt ;\n\treturn ;\n}\nint dfn[N] , low[N] , tot = 0 , num = 0 , s[N] ;\nint top = 0 ; int co[N] ;\nint t[N] ; int used[N] ;\ninline void Tarjan(int u) {\n\tdfn[u] = low[u] = ++ tot ;\n\ts[++ top] = u , used[u] = 1 ;\n\tfor(register int i = _head[u] ; i ; i = _e[i].nxt) {\n\t\tint v = _e[i].v ;\n\t\tif(! dfn[v]) {\n\t\t\tTarjan(v) ;\n\t\t\tlow[u] = min(low[u] , low[v]) ;\n\t\t}\n\t\telse if(used[v]) low[u] = min(low[u] , dfn[v]) ;\n\t}\n\tif(low[u] == dfn[u]) {\n\t\tt[co[u] = ++ num] ++ ;\n\t\tused[u] = 0 ;\n\t\twhile(s[top] ^ u) {\n\t\t\tused[s[top]] = 0 ;\n\t\t\tt[co[s[top --]] = num] ++ ;\n\t\t}\n\t\ttop -- ;\n\t}\n}\nclass T {\n\tpublic :\n\t\tstruct node {\n\t\t\tint v , nxt ;\n\t\t};\n\t\tint cnt = 0 ;\n\t\tnode e[N << 1] ;\n\t\tint head[N] ;\n\t\tinline void Add(int u , int v) {\n\t\t\te[ ++ cnt ].v = v ;\n\t\t\te[ cnt ].nxt = head[u] ;\n\t\t\thead[u] = cnt ;\n\t\t\treturn ;\n\t\t}\n\t\tint dis[N] ;\n\t\tbool vis[N] ;\n\t\tinline void Spfa(int s) {\n\t\t\tqueue < int > q ;\n\t\t\tdis[s] = t[s] ;\n\t\t\tq.push(s) ;\n\t\t\twhile(q.size()) {\n\t\t\t\tint u = q.front() ;\n\t\t\t\tvis[u] = 0 , q.pop() ;\n\t\t\t\tfor(register int i = head[u] ; i ; i = e[i].nxt) {\n\t\t\t\t\tint v = e[i].v ;\n\t\t\t\t\tif(dis[u] + t[v] > dis[v]) {\n\t\t\t\t\t\tdis[v] = dis[u] + t[v] ;\n\t\t\t\t\t\tif(! vis[v]) {\n\t\t\t\t\t\t\tvis[v] = 1 ;\n\t\t\t\t\t\t\tq.push(v) ;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n} From , Back ;\nsigned main() {\n#ifdef Online_Judge\n\tfreopen(\"testdata.in\" , \"r\" , stdin) ;\n\tfreopen(\"testdata2.out\" , \"w\" , stdout) ;\n#endif\n\tn = read() ;\n\tm = read() ;\n\tfor(register int  i = 1 ; i <= m  ; i ++) {\n\t\tint u = read() , v = read() ;\n\t\tAdd(u , v) ;\n\t}\n\tfor(register int i = 1 ; i <= n ; i ++) \n\t\tif(! dfn[i]) Tarjan(i) ;\n\tfor(register int i = 1 ; i <= n ; i ++) \n\t\tfor(register int j = _head[i] ; j ; j = _e[j].nxt) {\n\t\t\tint v = _e[j].v ;\n\t\t\tif(co[i] ^ co[v]) {\n\t\t\t\tFrom.Add(co[i] , co[v]) ;\n\t\t\t\tBack.Add(co[v] , co[i]) ;\n\t\t\t}\n\t\t}\n\tint start = co[1] ;\n\tFrom.Spfa(start) , Back.Spfa(start) ;\n\tint ans = t[start] ;\n\tfor(register int i = 1 ; i <= n ; i ++) \n\t\tif(! used[co[i]] && From.dis[co[i]]) {\n\t\t\tint u = co[i] ;\n\t\t\tused[u] = 1 ;\n\t\t\tfor(register int j = Back.head[u] ; j ; j = Back.e[j].nxt) {\n\t\t\t\tint v = Back.e[j].v ;\n\t\t\t\tif(! Back.dis[v]) continue ;\n\t\t\t\tans = max(ans , From.dis[u] + Back.dis[v] - t[start]) ;\n//\t\t\t\tcout << From.dis[u] + Back.dis[v] - t[start] << endl ;\n\t\t\t}\n\t\t}\n\twrite(ans) ;\n\treturn 0 ;\n}\n```",
        "postTime": 1568968642,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "[\u672c\u849f\u84bb\u7684Blog(\u6233\u8fd9\u513f\u5440QwQ)](https://www.chnxuzhiyuan.cn/2019/01/14/%E3%80%8CUSACO2015JAN%E3%80%8D%E8%8D%89%E9%89%B4%E5%AE%9AGrass-Cownoisseur%20-Solution/)\n### \u9898\u89e3\n\n\u5355\u5411\u9053\u8def\uff1f\u6c42\u4e00\u6b21\u80fd\u904d\u5386\u5230\u7684\u6700\u5927\u70b9\u7684\u6570\u91cf\uff1f\u4e8c\u8bdd\u4e0d\u8bf4\u5148\u4e0a\u4e2aTarjan\u7f29\u4e2a\u70b9\u538b\u538b\u60capoi\u3002\n\n\u5982\u679c\u6ca1\u6709\u9006\u884c\u8fd9\u79cd\u64cd\u4f5c\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u8d77\u70b9\u6240\u5728\u5f3a\u8054\u901a\u5206\u91cf\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u7b54\u6848\u3002\n\n~~\u53ef\u662fBessie\u5c31\u662fBessie\uff0c\u603b\u8981\u641e\u70b9\u4e8b\u60c5\u51fa\u6765\u624d\u7b26\u5408\u5979\u7684\u6027\u683c\u3002~~\n\n\u4e8e\u662f\u4e4e\u6211\u4eec\u7f29\u70b9\u4e4b\u540e\u6b63\u53cd\u5efa\u56fe\uff0c\u5237\u4e24\u8d9fSPFA\u6c42\u6bcf\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u6700\u957f\u8def\u3002\n\n\u7136\u540e\u679a\u4e3e\u7f29\u5b8c\u70b9\u7684\u56fe\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u7528\u6765~~\u641e\u4e8b\u60c5~~\u9006\u884c\u3002\u8bbe\u5f53\u524d\u679a\u4e3e\u5230\u7684\u8fb9\u4e3a$(u,v)$\uff0c\u90a3\u4e48$u$\u5728\u6b63\u5efa\u7684\u56fe\u4e0a\u5230\u8d77\u70b9\u7684\u6700\u957f\u8def\u52a0\u4e0a$v$\u5728\u53cd\u5efa\u56fe\u4e0a\u5230\u8d77\u70b9\u7684\u6700\u957f\u8def\u5c31\u662f\u9006\u884c\u8fd9\u6761\u8fb9\u65f6\u7684\u6700\u4f18\u89e3\u3002\u5728\u6240\u6709\u8fb9\u91cc\u5237\u4e2a\u6700\u5927\u503c\u5c31\u884c\u4e86\u5462poi\u3002\n\n\u6709\u51e0\u4e2a\u5751\uff1a\n\n1. \u5728\u6700\u540e\u8ba1\u7b97\u7b54\u6848\u65f6\u8d77\u70b9\u7684\u6743\u503c\u4f1a\u88ab\u7b97\u4e24\u6b21\uff0c\u8bb0\u5f97\u51cf\u53bb\u4e00\u4e2a\u3002\n2. \u679a\u4e3e\u7528\u4e8e\u9006\u884c\u7684\u8fb9\u65f6\u9700\u8981\u786e\u4fdd\u53ef\u4ee5\u8d70\u5230\u8fd9\u6761\u8fb9\u5e76\u4e14\u8d70\u5230\u8fd9\u6761\u8fb9\u540e\u53ef\u4ee5\u8d70\u56de\u8d77\u70b9\u3002\n3. \u7531\u4e8e\u9700\u8981\u5efa\u4e09\u5957\u56fe(\u6ca1\u7f29\u8fc7\u70b9\u7684\u4e00\u5957\u6b63\u5efa\u56fe\u4e00\u5957\u53cd\u5efa\u56fe\u4e00\u5957)\uff0c\u4e0d\u8981\u628a\u6570\u7ec4\u540d\u641e\u6df7\u4e86\u3002\u6b64\u65f6\u5c01\u88c5\u53ef\u80fd\u662f\u4e2a\u597d\u529e\u6cd5\uff08\u4f46\u662f\u4f1a\u957f\u4e00\u4e9b\uff0c\u6240\u4ee5\u6211\u6ca1\u5c01\u88c5\uff09\u3002\n\n\u5176\u5b9e\u603b\u4f53\u4e0a\u8bb2\u8fd9\u9898\u7684\u60f3\u6cd5\u5e76\u4e0d\u96be\uff0c\u4f46\u662f\u4ee3\u7801\u6709\u70b9\u96be\u7801QwQ\u3002\n\n\u4e8e\u662f\u4e4e\u8fd9\u9898\u5c31\u89e3\u5b8c\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta(n)$\u3002\n\n### \u4ee3\u7801\n\n~~\u6211\u89c9\u5f97\u6211\u5199\u7684\u633a\u7b80\u6d01\u7684poi\u3002~~\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int maxn=100005;\nint n,m,tot[3],lnk[3][maxn],son[3][maxn],nxt[3][maxn],w[maxn],idx,dfn[maxn],low[maxn],top,stack[maxn],cnt,id[maxn],dist[3][maxn],que[maxn],ans;bool vis[maxn];\ninline int read()\n{\n\tint ret=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){ret=ret*10+ch-'0';ch=getchar();}\n\treturn ret*f;\n}\ninline void add_e(int x,int y,int id){tot[id]++;son[id][tot[id]]=y;nxt[id][tot[id]]=lnk[id][x];lnk[id][x]=tot[id];}\nvoid Tarjan(int now)   //Tarjan\u7f29\u70b9\u5927\u6cd5\u597d\n{\n\tidx++;top++;vis[now]=true;\n\tdfn[now]=low[now]=idx;stack[top]=now;\n\tfor(int i=lnk[0][now];i;i=nxt[0][i])\n\t{\n\t\tif(!dfn[son[0][i]])\n\t\t{\n\t\t\tTarjan(son[0][i]);\n\t\t\tif(low[son[0][i]]<low[now]) low[now]=low[son[0][i]];\n\t\t}\n\t\telse if(vis[son[0][i]]&&dfn[son[0][i]]<low[now]) low[now]=dfn[son[0][i]];\n\t}\n\tif(dfn[now]==low[now])\n\t{\n\t\tcnt++;\n\t\tdo\n\t\t{\n\t\t\tid[stack[top]]=cnt;w[cnt]++;\n\t\t\tvis[stack[top]]=false;top--;\n\t\t}while(stack[top+1]!=now);\n\t}\n}\ninline void SPFA(int id) //SPFA\u6c42\u6700\u957f\u8def\n{\n\tmemset(vis,false,sizeof(vis));\n\tint hed=0,til=1;\n\tque[1]=::id[1];vis[que[1]]=true;dist[id][que[1]]=w[que[1]];\n\twhile(hed!=til)\n\t{\n\t\thed=(hed+1)%maxn;vis[que[hed]]=false;\n\t\tfor(int j=lnk[id][que[hed]];j;j=nxt[id][j])\n\t\t{\n\t\t\tif(dist[id][que[hed]]+w[son[id][j]]>dist[id][son[id][j]])\n\t\t\t{\n\t\t\t\tdist[id][son[id][j]]=dist[id][que[hed]]+w[son[id][j]];\n\t\t\t\tif(!vis[son[id][j]])\n\t\t\t\t{\n\t\t\t\t\tvis[son[id][j]]=true;\n\t\t\t\t\ttil=(til+1)%maxn;\n\t\t\t\t\tque[til]=son[id][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++)                  //\u5efa\u521d\u59cb\u56fe\n\t{\n\t\tint a=read(),b=read();\n\t\tadd_e(a,b,0);\n\t}\n\tfor(int i=1;i<=n;i++) if(!dfn[i]) Tarjan(i);    //\u7f29\u70b9\n\tfor(int i=1;i<=n;i++)                //\u7f29\u5b8c\u70b9\u540e\u6b63\u53cd\u5efa\u56fe\n\t{\n\t\tfor(int j=lnk[0][i];j;j=nxt[0][j])\n\t\t{\n\t\t\tif(id[i]!=id[son[0][j]])\n\t\t\t{\n\t\t\t\tadd_e(id[i],id[son[0][j]],1);\n\t\t\t\tadd_e(id[son[0][j]],id[i],2);\n\t\t\t}\n\t\t}\n\t}\n\tSPFA(1);SPFA(2);\n\tfor(int i=1;i<=cnt;i++)               //\u679a\u4e3e\u9006\u884c\u8fb9\uff0c\u8ba1\u7b97\u7b54\u6848\n\t\tfor(int j=lnk[2][i];j;j=nxt[2][j])\n\t\t\tif(dist[1][i]&&dist[2][son[2][j]]&&dist[1][i]+dist[2][son[2][j]]-w[id[1]]>ans)\n\t\t\t\tans=dist[1][i]+dist[2][son[2][j]]-w[id[1]];\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1548292959,
        "uid": 42392,
        "name": "\u5f90\u81f4\u8fdc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "**tarjan+DFS+\u679a\u4e3e**\n\ntarjan\u4e0e\u6700\u77ed\u8def\u7d2f\u95ee\u9898\u7684\u96c6\u5408\u6b63\u5411\u641c\u56fe\u548c\u53cd\u5411\u641c\u56fe\u5e76\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\u6c42D[y]\u4e0eB[x]\u7684\u6700\u5927\u503c\n\n```cpp\n#include<cstdio>\n#include<stack>\n#include<memory.h>\n#include<cmath>\n#define MAXN 100005\n#define MAXM 500005\nusing namespace std;\nstruct edge\n{\n    int x,y;\n} E[MAXM];\nint head[MAXN];\nint next[MAXM];\nint DFN[MAXN];\nint COL[MAXN];\nint LOW[MAXM];\nint tm=0;\nint id=0;\nint tot;\nint cnt[MAXN];\nint b[MAXN],d[MAXN];\nstack<int> S;\nint V[MAXN];\nint ans=-21474836;\nint n,m;\nvoid init()//\u91cd\u7f6e\u6570\u7ec4\n{\n    memset(d,0,sizeof(d));\n    memset(head,0,sizeof(head));\n    memset(next,0,sizeof(next));\n    id=0;\n}\nvoid ADD(int a,int b)//\u94fe\u5f0f\u524d\u5411\u661f\n{\n    id++;\n    E[id].x=a;\n    E[id].y=b;\n    next[id]=head[a];\n    head[a]=id;\n}\nvoid SCAN()\n{\n    int i;\n    scanf(\"%d %d\",&n,&m);\n    init();\n    for(i=1; i<=m; i++)\n    {\n        int a,b;\n        scanf(\"%d %d\",&a,&b);\n        ADD(a,b);\n    }\n}\nvoid TJ(int x)//tarjan\u7f29\u70b9\u6d82\u8272\u5e76\u8bb0\u5f55\u8272\u5757\u70b9\u6570\n{\n    DFN[x]=LOW[x]=++tm;\n    S.push(x);\n    V[x]=true;\n    int i;\n    for(i=head[x]; i; i=next[i])\n    {\n        int y=E[i].y;\n        if(!DFN[y])\n        {\n            TJ(y);\n            LOW[x]=min(LOW[x],LOW[y]);\n        }\n        else if(V[y])\n        {\n            LOW[x]=min(LOW[x],LOW[y]);\n        }\n    }\n    if(LOW[x]==DFN[x])\n    {\n        tot++;\n        int y=0;\n        while(y!=x)\n        {\n            y=S.top();\n            S.pop();\n            V[y]=false;\n            COL[y]=tot;\n            cnt[tot]++;\n        }\n    }\n}\nvoid DFS(int x)//\u6df1\u641c\u66f4\u65b0d\u6570\u7ec4\u4e0eb\u6570\u7ec4\n{\n    int i;\n    for(i=head[x]; i; i=next[i])\n    {\n        int y=E[i].y;\n        if(d[x]+cnt[y]>d[y])\n            d[y]=d[x]+cnt[y];\n        DFS(y);\n    }\n}//\u62d3\u6251\u6392\u5e8f\u7ea7SPFA\u6548\u7387\u7565\u9ad8\nint main()\n{\n    SCAN();\n    int i;\n    for(i=1; i<=n; i++)\n        if(!DFN[i])\n            TJ(i);\n    init();\n    for(i=1; i<=m; i++)\n    {\n        int x=E[i].x,y=E[i].y;\n        if(COL[x]!=COL[y])ADD(COL[x],COL[y]);\n    }\n    n=tot;\n    m=id;\n    int s=COL[1];\n    d[s]=cnt[s];\n    DFS(s);\n    memcpy(b,d,sizeof(b));\n    init();\n    for(i=1; i<=m; i++)\n        ADD(E[i].y,E[i].x);\n    d[s]=cnt[s];\n    DFS(s);\n    for(i=1; i<=m; i++)\n    {\n        if(d[E[i].y]&&b[E[i].x])\n            ans=max(ans,d[E[i].y]+b[E[i].x]-cnt[s]);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1527591795,
        "uid": 63345,
        "name": "llllllQ",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u5168\u5f53\u7eaa\u5ff5\u4e0b \uff0c\n\n------------\n\n\u8003\u8651\u5f53\u4e0d\u80fd\u53cd\u8f6c\u4e00\u6761\u8fb9\u65f6 \uff0c \u5976\u725b\u6700\u591a\u80fd\u5230\u8fbe\u7684\u70b9\u5c31\u662f\u5b83\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\u5927\u5c0f \uff0c \u90a3\u4e48\u53cd\u8f6c\u4e00\u6761\u8fb9\u540e \uff0c \u6211\u4eec\u5c31\u6709**\u4e00\u6b21\u673a\u4f1a\u8d70\u51fa\u5b83\u672c\u8eab\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7136\u540e\u901a\u8fc7\u53cd\u8f6c\u67d0\u6761\u8fb9\u56de\u6765** \uff0c \n\n\u7136\u540e\u505a\u6cd5\u6bd4\u8f83\u663e\u7136 \uff0c\u7f29\u70b9\u540e\u679a\u4e3e\u6bcf\u6761\u8fb9 \uff0c \u5982\u679c\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e00\u4e2a\u662f**\u53ef\u4ee5\u5230\u8fbe 1\u53f7\u70b9**\uff08\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\uff09 \u7684 \uff0c \u4e00\u4e2a\u662f\u53ef\u4ee5**\u88ab 1 \u53f7\u70b9\uff08\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\uff09\u5230\u8fbe\u7684** \uff0c \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u53cd\u8f6c\u8fd9\u6761\u8fb9\u8ba9\u5976\u725b\u4ece 1 \u53f7\u70b9\u7136\u540e\u8d70\u56de\u5230 1 \u53f7\u70b9\n\n------------\n\u9884\u5904\u7406\u51fa\u54ea\u4e9b\u70b9 \u53ef\u4ee5\u5230\u8fbe1 \uff0c \u548c\u54ea\u4e9b\u70b9\u53ef\u4ee5\u88ab1 \u5230\u8fbe \uff0c \u548c\u5230\u8fbe\u7684\u6700\u8fdc\u8ddd\u79bb\n\n\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(m)$ \n\n\u7edf\u8ba1\u7b54\u6848 $O(m)$ \u679a\u4e3e\u8fb9\u5373\u53ef\n\n\u9884\u5904\u7406\u7684\u65f6\u5019\u7ec6\u8282\u8fd8\u662f\u8981\u6ce8\u610f\u4e0b\uff0c\u6bd4\u5982\u8bf4\u8981\u53d6\u4e2amax\n\n\u7edf\u8ba1\u7b54\u6848\u65f6\u6ce8\u610f\u80fd\u5230\u8fbe\u548c\u4e0d\u80fd\u5230\u8fbe\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7684\u6807\u8bb0\u65b9\u6cd5 \uff0c \u6069\u8c03\u4e86\u5f88\u957f\u65f6\u95f4\u53d1\u73b0\u81ea\u5df1\u8fd9\u4e2a\u5730\u65b9\u51fa\u73b0\u4e86\u6f0f\u6d1eQAQ\n\n```\n// luogu-judger-enable-o2\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <stack>\n\nusing namespace std;\n\n#define re register\n#define Rep(i,l,r) for(re int i=l;i<=r;++i)\n#define N 100005\n\nstruct node{\n    int v,nxt;\n}e[N] , E[N][2];\nint n,m,ans=-1;\nint head[N] , tot;\ninline void add(int u,int v){\n    e[++tot]=(node){v,head[u]};\n    head[u]=tot;\n}\nint Head[N][2] , Tot[2];\ninline void Add(int u,int v,int i){\n    E[++Tot[i]][i]=(node){v,Head[u][i]};\n    Head[u][i]=Tot[i];\n}\n\nint dfn[N] , low[N] , col[N] , val[N] , vis[N];\nint ColNum , DfsNum;\nstack <int> s;\ninline void paint (int u){\n    vis[u]=0 , s.pop();\n    col[u]=ColNum;\n    val[ColNum]++;\n}\nvoid Tarjan(int u){\n    low[u]=dfn[u]=++DfsNum;\n    vis[u]=1 , s.push(u);\n    for(re int i=head[u];i;i=e[i].nxt){\n        int v=e[i].v;\n        if(!dfn[v]) Tarjan(v) , low[u]=min(low[v] , low[u]);\n        else if(vis[v]) low[u]=min(low[u] , dfn[v]);\n    }\n    if(low[u]==dfn[u]) {\n        ColNum++;\n        while(s.top()!=u)\n            paint(s.top());\n        paint(u);\n    }\n}\nint mark[N] , f[N][2];\nvoid dfs(int u,int x){\n    for(re int i=Head[u][x];i;i=E[i][x].nxt){\n        int v=E[i][x].v;\n        f[v][x]=max(f[v][x] , f[u][x]+val[v]);\n        dfs(v,x);\n        mark[v]=x+1;\n    }\n}\nint main() {\n    //freopen(\"read.in\",\"r\",stdin);\n    //freopen(\"WA.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    Rep(i,1,m){\n        re int u,v;\n        scanf(\"%d%d\",&u,&v);\n        add(u,v);\n    }\n    Rep(i,1,n) if(!dfn[i]) Tarjan(i);\n    Rep(u,1,n)\n        for(re int i=head[u];i;i=e[i].nxt)\n            if(col[u]!=col[e[i].v])\n                Add(col[u] , col[e[i].v],0) , Add(col[e[i].v] , col[u] , 1);\n    f[col[1]][0]=f[col[1]][1]=val[col[1]] , dfs(col[1],0) , dfs(col[1],1) , ans=val[col[1]];\n    Rep(u,1,ColNum)\n        for(re int i=Head[u][1];i;i=E[i][1].nxt)\n        \tif( f[u][0] && f[E[i][1].v][1] )\n       \t\t\tans=max(ans,f[u][0]+f[E[i][1].v][1]-val[col[1]]);\n    cout<<ans;\n    return 0;\n}\n```\n$mark$ \u6570\u7ec4\u5e76\u4e0d\u597d\u7528QAQ",
        "postTime": 1540969461,
        "uid": 65987,
        "name": "SuperGoodGame",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u5148tarjan\u52a0\u7f29\u70b9\u4e0d\u89e3\u91ca  \n\uff08\u5148\u653e\u4e0a\u7f29\u70b9\u6a21\u677fP3387\u7684\u4ee3\u7801\uff09  \n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct line\n{\n    int from;\n    int to;\n    int next;\n};\nline que[100001];\nint headers[100001],cnt,dfn[100001],st[100001],low[100001],siz[100001],color[100001],tot,book[100001],value[100001],f[100001],num,index;\nvoid add(int from,int to)\n{\n    cnt++;\n    que[cnt].from=from;\n    que[cnt].to=to;\n    que[cnt].next=headers[from];\n    headers[from]=cnt;\n}\nvoid tarjan(int u)\n{\n    dfn[u]=low[u]=++index;\n    st[++tot]=u;\n\tbook[u]=1;\n    for(int i=headers[u];i;i=que[i].next)\n        if(!dfn[que[i].to])\n        {\n            tarjan(que[i].to);\n            low[u]=min(low[u],low[que[i].to]);\n        }\n        else\n            if(book[que[i].to])\n                low[u]=min(dfn[que[i].to],low[u]);\n    if(low[u]==dfn[u])\n    {\n        num++;\n        while(st[tot+1]!=u)\n        {\n            color[st[tot]]=num;\n            siz[num]+=value[st[tot]];\n            book[st[tot]]=0;\n            tot--;\n        }\n    }\n}\nvoid search(int x)\n{\n    if(f[x])\n\t\treturn;\n    f[x]=siz[x];\n    int maxsum=0;\n    for(int i=headers[x];i;i=que[i].next)\n\t{\n        if(!f[que[i].to])\n\t\t\tsearch(que[i].to);\n        maxsum=max(maxsum,f[que[i].to]);\n    }\n    f[x]+=maxsum;\n}\nint main()\n{\n    int n,m,a,b;\n    scanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&value[i]);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n    }\n    for(int i=1;i<=n;i++)\n        if(!dfn[i])\n            tarjan(i);\n    for(int i=1;i<=cnt;i++)\n        que[i].next=0;\n    for(int i=1;i<=n;i++)\n        headers[i]=0;\n    int used=cnt;\n    cnt=1;\n    for(int i=1;i<=used;i++)\n        if(color[que[i].from]!=color[que[i].to])\n        {\n            que[cnt].from=color[que[i].from];\n            que[cnt].to=color[que[i].to];\n            que[cnt].next=headers[color[que[i].from]];\n            headers[color[que[i].from]]=cnt;\n            cnt++;\n        }\n        else\n            que[i].from=que[i].to=0;\n\tcnt--;\n\tint ans=0;\n\tfor(int i=1;i<=num;i++)\n        if(!f[i])\n\t\t{\n            search(i);\n            ans=max(ans,f[i]);\n        }\n\tprintf(\"%d\",ans);\n    return 0;\n}\n\n```  \n\u7f29\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7528\u7f29\u70b9\u540e\u539f\u56fe\u8dd1\u4e00\u904dbfs\u7136\u540e\u518d\u5efa\u53cd\u56fe\u518d\u8dd1\u4e00\u904dbfs\uff0c\u6765\u627e\u51fa1\u6240\u5728\u8054\u901a\u5757\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8054\u901a\u5757\uff0c\u548c\u80fd\u5230\u8fbe1\u6240\u5728\u7684\u8054\u901a\u5757\u7684\u6240\u6709\u8054\u901a\u5757\u3002  \n\u73b0\u5728\u6765\u8bc1\u660e\u4e00\u4e0b\uff1a  \n&emsp;&emsp;\u6211\u4eec\u8003\u8651\u4e00\u4e0bDAG\u4e2d\u7684\u4e00\u4e2a\u57fa\u672c\u5355\u5143\uff0c\u6709\u4e09\u6761\u8fb9\uff0c1->u,1->v,u->v  \n&emsp;&emsp;\u56e0\u4e3a\u53ea\u80fd\u8d70\u4e00\u6b21\u53cd\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u8fb9u->v\u53cd\u8d70\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u6cbf\u77401->v->u->1\u56de\u52301\uff08\u5f53\u7136\u5176\u5b9e\u6bcf\u4e00\u6761\u8fb9\u53cd\u8d70\u90fd\u884c\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5c31\u8fd9\u6837\u8d70\uff09  \n\u6240\u4ee5\u6211\u4eec\u4f7f\u7528bfs\u6211\u4eec\u5c31\u53ef\u4ee5\u627e\u5230\u6211\u4eec\u53ef\u4e0d\u8d70\u53cd\u8fb9\u5c31\u7ecf\u8fc7\u7684\u70b9\u96c6\u5408$u$\u548c\u5176\u6700\u957f\u8def\uff0c\u5efa\u53cd\u56fe\u627e\u5230\u4e0d\u8d70\u53cd\u8fb9\u7ecf\u8fc7\u6700\u591a\u70b9\u56de\u52301\u7684\u70b9\u96c6\u5408$v$\u548c\u5176\u6700\u957f\u8def\u3002\u800c\u7b54\u6848\u5c31\u662f$max(dis[u][1],dis[v][2])$(\u4ee4$dis[i][1]$\u662f1\u5230$i$\u7684\u6700\u957f\u8def\uff0c$dis[i][2]$\u662f$i$\u52301\u7684\u6700\u957f\u8def)  \n\u4ee3\u7801\u5165\u4e0b  \n```cpp\n#include <cstdio>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nstruct line\n{\n    int from;\n    int to;\n    int next;\n};\nline que[100001];//\u5c31\u662f\u4f60\u4eec\u4e60\u60ef\u7684edge\uff0c\u5f53\u5e74\u4e60\u60ef\u6ca1\u517b\u597d\nint headers[100001],cnt,dfn[100001],st[100001],low[100001],siz[100001],color[100001],tot,book[100001],num,index;//color\uff1a\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u6240\u5728\u8054\u901a\u5757\u3002siz\uff1a\u8bb0\u5f55\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u5927\u5c0f\u3002num:\u8bb0\u5f55\u8054\u901a\u5757\u7684\u7f16\u53f7\nint reach[100001][3];\nvoid add(int from,int to)\n{\n    cnt++;\n    que[cnt].from=from;\n    que[cnt].to=to;\n    que[cnt].next=headers[from];\n    headers[from]=cnt;\n}\nvoid tarjan(int u)\n{\n    dfn[u]=low[u]=++index;\n    st[++tot]=u;\n    book[u]=1;\n    for(int i=headers[u];i;i=que[i].next)\n        if(!dfn[que[i].to])\n        {\n            tarjan(que[i].to);\n            low[u]=min(low[u],low[que[i].to]);\n        }\n        else\n            if(book[que[i].to])\n                low[u]=min(dfn[que[i].to],low[u]);\n    if(low[u]==dfn[u])\n    {\n        num++;\n        while(st[tot+1]!=u)\n        {\n            color[st[tot]]=num;\n            siz[num]++;\n            book[st[tot]]=0;\n            tot--;\n        }\n    }\n}\nvoid bfs(int s,int times)//times\u5c31\u662f\u5224\u5b9a\u6b63\u5411\u8fd8\u662f\u53cd\u5411\n{\n    queue<int>q;\n    q.push(s);\n    reach[s][times]=0;\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        for(int i=headers[t];i;i=que[i].next)\n            if(reach[que[i].to][times]<reach[t][times]+siz[que[i].to])//\u4ece100\u5206\u53d8\u62107\u5206\u7684\u539f\u56e0\u3002\u540c\u65f6\u9644\u4e0a\u4e00\u7ec4hack\u6570\u636e\uff1a6 8 1 2 2 5 5 6 6 2 1 3 2 4 3 4 1 4 \u7b54\u6848\uff1a5\n            {\n                reach[que[i].to][times]=reach[t][times]+siz[que[i].to];//reach[i][1]\u5c31\u662fdis[i][1],reach[i][2]\u540c\u7406\n                q.push(que[i].to);\n            }\n    }\n}\nint main()\n{\n    int n,m,a,b;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n    }\n    for(int i=1;i<=n;i++)\n        if(!dfn[i])\n            tarjan(i);\n    for(int i=1;i<=cnt;i++)\n        que[i].next=0;\n    for(int i=1;i<=n;i++)\n        headers[i]=0;\n    int used=cnt;\n    cnt=0;\n    for(int i=1;i<=used;i++)\n        if(color[que[i].from]!=color[que[i].to])\n        {\n            cnt++;\n            que[cnt].from=color[que[i].from];\n            que[cnt].to=color[que[i].to];\n            que[cnt].next=headers[que[cnt].from];\n            headers[que[cnt].from]=cnt;\n        }\n        else\n            que[i].from=que[i].to=0;//\u4ee5\u4e0a\u90fd\u662ftarjan\u52a0\u7f29\u70b9\n    bfs(color[1],1);//\u7b2c\u4e00\u6b21bfs\uff0c\u627e\u5230u\u96c6\u5408\n\t//\u5efa\u53cd\u56fe\uff0c\u5373\u628a\u6bcf\u6761\u8fb9\u53cd\u8fc7\u6765\n    for(int i=1;i<=cnt;i++)\n        que[i].next=0;\n    for(int i=1;i<=n;i++)\n        headers[i]=0;\n    for(int i=1;i<=cnt;i++)\n    {\n        swap(que[i].from,que[i].to);\n        que[i].next=headers[que[i].from];\n        headers[que[i].from]=i;\n    }\n    bfs(color[1],2);\t//\u7b2c\u4e8c\u6b21bfs\uff0c\u627e\u5230v\u96c6\u5408\n    int ans=0;\n    for(int i=1;i<=cnt;i++)\n        if((reach[que[i].from][1] || que[i].from==color[1]) && (reach[que[i].to][2] || que[i].to==color[1]))//\u8fd9\u4e2a\u5730\u65b9\u53cd\u8fc7\u6765\u7684\u539f\u56e0\uff1a\u73b0\u6709\u7684\u56fe\u662f\u53cd\u56fe\uff0c\u6240\u4ee5\u8fb9\u7684\u5165\u548c\u51fa\u4e5f\u8981\u53cd\u8fc7\u6765\n            ans=max(ans,reach[que[i].from][1]+reach[que[i].to][2]);\n    printf(\"%d\",ans+siz[color[1]]);\n    return 0;\n}\n\n```",
        "postTime": 1540025759,
        "uid": 80026,
        "name": "walk_alone",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "# \u9898\u76ee\n[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P3119)\n# \u89e3\u8bf4\n\u5237$Tarjan$\u9898\u7684\u65f6\u5019\u770b\u5230\u7684\u9898\u76ee\uff0c\u7b2c\u4e00\u6b21\u89c1\u5230\u628a\u5206\u5c42\u56fe\u548c$Tarjan$\u7ed3\u5408\u7684\u9898\u76ee\uff0c\u89c9\u5f97\u8fd9\u6837\u7684\u601d\u8def\u5f88\u6709\u8da3\uff0c\u5199\u535a\u5ba2\u4ee5\u8bb0\u4e4b\u3002\n\n**\u603b\u601d\u8def\uff1a\u5efa\u53cc\u5c42\u56fe->Tarjan\u7f29\u70b9->\u6700\u957f\u8def**\n\n\u9996\u5148\u770b\u5230\u9898\u76ee\u4e2d\u201c\u53ea\u80fd\u8d70\u4e00\u6b21\u7684\u9006\u5411\u8fb9\u201d\u8fd9\u6837\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u4f1a\u5f88\u81ea\u7136\u5730\u60f3\u5230\u5efa\u4e00\u4e2a\u5206\u5c42\u56fe\u3002\u6bcf\u4e00\u4e2a\u70b9$i$\u5728\u7b2c\u4e8c\u5c42\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u7f16\u53f7\u4e3a$i+n$\u7684\u5bf9\u5e94\u70b9\u3002\u7b2c\u4e8c\u5c42\u5efa\u8fb9\u57fa\u672c\u662f\u7b2c\u4e00\u5c42\u7684\u8fd8\u539f\uff0c\u540c\u65f6\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9$x$\u5230$y$\u8fd8\u8981\u5efa\u4e00\u6761$y$\u5230$x+n$\u8fde\u63a5\u4e00\u4e8c\u5c42\uff0c\u7531\u4e8e\u662f\u5355\u5411\u8fb9\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4e0a\u4e86\u4e8c\u5c42\u5c31\u6ca1\u529e\u6cd5\u518d\u4e0b\u6765\uff0c\u5373\u4fdd\u8bc1\u4e86\u9006\u5411\u8fb9\u53ea\u8d70\u4e00\u6b21\u3002\n\n\u56fe\u5efa\u597d\u4e4b\u540e\u5f88\u81ea\u7136\u5730\u8dd1$Tarjan$\u5f3a\u8054\u901a\u5206\u91cf\u7684\u677f\u5b50\u518d\u7f29\u70b9\u3002\u8fd9\u65f6\u5019\u65b0\u5efa\u7684\u8fb9\u7684\u6743\u503c\u5e94\u8be5\u4e3a\u76ee\u7684\u5730\u5f3a\u8054\u901a\u5206\u91cf\u7684\u5927\u5c0f\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u8d70\u8fc7\u8fd9\u6761\u8fb9\u5c31\u53ef\u4ee5\u83b7\u5f97\u53bb\u70b9\u7684\u7b54\u6848\uff0c\u540c\u65f6\u56e0\u4e3a\u7f29\u70b9\u4e4b\u540e\u7684\u56fe\u662f\u6709\u5411\u65e0\u73af\u56fe\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u4e2a\u8fb9\u8dd1\u6700\u957f\u8def\u65f6\u53ea\u8d70\u4e00\u6b21\uff0c\u5373\u4fdd\u8bc1\u4e86\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u53ea\u53d6\u4e86\u4e00\u6b21\u3002\n\n\u6700\u540e\u8f93\u51fa\u7b54\u6848\u65f6\u8bb0\u5f97\u5e94\u8be5\u53d6$max(dis[belong[1]],dis[belong[1+n]])$\uff0c\u56e0\u4e3a\u7b54\u6848\u53ef\u80fd\u5728\u7b2c\u4e00\u5c42\u7684\u7ec8\u70b9\u53d6\u5f97\u4e5f\u53ef\u80fd\u5728\u7b2c\u4e8c\u5c42\u7684\u7ec8\u70b9\u53d6\u5f97\u3002\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100000+3,maxe=100000+3;\nint head[2*maxn],tot,dfn[2*maxn],low[2*maxn],dfn_clock,scc_cnt,size[2*maxn],n,m,stk[2*maxn],top,belong[2*maxn],cnt,h[2*maxn],dis[2*maxn];\n//\u8bb0\u5f97\u5f00\u4e8c\u500d\n//\u8bdd\u8bf4\u7528\u5230\u7684\u6570\u7ec4\u771f\u591a\u2026\u2026\nbool vis[2*maxn];\nstruct edge{//\u539f\u8fb9\n\tint to,next;\n}e[3*maxe];//\u8bb0\u5f97\u5f00\u4e09\u500d\nstruct edge2{//\u7f29\u70b9\u4e4b\u540e\u7684\u8fb9\n\tint to,next,w;\n}ed[3*maxe];//\u8bb0\u5f97\u5f00\u4e09\u500d\nvoid add(int a,int b){\n\te[++tot].to=b;\n\te[tot].next=head[a];\n\thead[a]=tot;\n}\nvoid insert(int a,int b,int w){\n\ted[++cnt].to=b;\n\ted[cnt].w=w;\n\ted[cnt].next=h[a];\n\th[a]=cnt;\n}\nvoid tarjan(int u){//\u6c42\u5f3a\u8054\u901a\u5206\u91cf\u7684\u677f\u5b50\n\tdfn[u]=low[u]=++dfn_clock;\n\tstk[++top]=u;\n\tfor(int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].to;\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}else if(!belong[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u]){\n\t\tscc_cnt++;\n\t\twhile(1){\n\t\t\tint tmp=stk[top--];\n\t\t\tbelong[tmp]=scc_cnt;\n\t\t\tsize[scc_cnt]++;\n\t\t\tif(tmp==u) break;\n\t\t}\n\t}\n}\nvoid spfa(int s){//\u8dd1\u6700\u77ed\u8def\n\tdeque<int> q;\n\tq.push_back(s);\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop_front();\n\t\tvis[u]=0;\n\t\tfor(int i=h[u];i;i=ed[i].next){\n\t\t\tint v=ed[i].to,w=ed[i].w;\n\t\t\tif(dis[u]+w>dis[v]){\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t\tif(!q.empty()&&dis[v]>dis[q.front()]) q.push_front(v);\n\t\t\t\t\telse q.push_back(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(x+n,y+n);\n\t\tadd(y,x+n);//\u5206\u5c42\u56fe\u6838\u5fc3\u52a0\u8fb9\n\t}\n\tfor(int i=1;i<=2*n;i++) if(!dfn[i]) tarjan(i);\n\tfor(int i=1;i<=2*n;i++){//\u7f29\u70b9\n\t\tfor(int j=head[i];j;j=e[j].next){\n\t\t\tint x=belong[i],y=belong[e[j].to];\n\t\t\tif(x!=y) insert(x,y,size[y]);\n\t\t}\n\t}\n\tspfa(belong[1]);\n\tprintf(\"%d\\n\",max(dis[belong[1]],dis[belong[1+n]]));\n\treturn 0;\n}\n```\n\n\u5e78\u751a\u81f3\u54c9\uff0c\u6b4c\u4ee5\u548f\u5fd7\u3002",
        "postTime": 1595920906,
        "uid": 239287,
        "name": "DarthVictor",
        "ccfLevel": 6,
        "title": "[USACO15JAN]Grass Cownoisseur G"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u8c03\u4e86\u4e00\u5929\u3002\u3002\n\n\u8bfb\u5b8c\u9898\u76ee\u4e4b\u540e\u6211\u4eec\u4e0d\u96be\u60f3\u51fa\u8fd9\u4e2a\u9898\u662f\u4e2a$tarjan$\u7f29\u70b9\u95ee\u9898\uff0c\u56e0\u4e3a\u5c3d\u91cf\u591a\u7684\u7ecf\u8fc7\u8349\u573a\uff0c\u6240\u4ee5\u4e00\u53f7\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u5de6\u53f3\u7684\u70b9\u90fd\u662f\u4e0d\u9700\u8981\u5728\u8fdb\u884c\u8d70\u9006\u5411\u8fb9\uff0c\u6240\u80fd\u5230\u8fbe\u7684\u3002\n\n\u7136\u540e\u95ee\u9898\u5c31\u843d\u5728\u600e\u4e48\u5904\u7406\u6211\u4eec\u8d70\u8fd9\u4e00\u6b21\u9006\u5411\u8fb9\u4e0a\u3002\n\n\u4ed4\u7ec6\u770b\u9898\u76ee\u8981\u6c42\uff0c\u9898\u76ee\u8981\u6c42\u6211\u4eec\u5fc5\u987b\u4ece\u4e00\u53f7\u70b9\u51fa\u53d1\uff0c\u6700\u540e\u56de\u5230\u4e00\u53f7\u70b9\u3002\u6240\u4ee5\u6211\u60f3\u5230\u4e86\u5efa\u4e00\u4e2a\u9006\u5411\u7684\u56fe\uff0c\u865a\u62df\u51fa$cnt + 1 , cnt+2,cnt+3.....n+cnt$\u53f7\u70b9\uff0c\u5efa\u4e00\u4e2a\u9006\u5411\u56fe\uff08\u7528\u8fdb\u884c\u7f29\u70b9\u4e4b\u540e\u7684\u70b9\u96c6\u91cd\u65b0\u6784\u9020\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u6c42\u51fa\u8fdb\u8fc7\u8349\u573a\u6700\u591a\u662f\u591a\u5c11\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u6709\u591a\u5c11\u4e2a\u70b9\u5728\u7f29\u70b9\u4e2d\u8bb0\u5f55\u4e0b\u6765\uff08$num[i]$\uff1a\u8868\u793a\u7b2c$i$\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u6709\u591a\u5c11\u4e2a\u70b9\uff09\uff0c\u5c06\u5b83\u4f5c\u4e3a\u8fb9\u6743\u3002\n\n\u6700\u540e\u6211\u4eec\u53ea\u8981\u4ece$1$\u53f7\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5f00\u59cb\uff0c\u8dd1\u4e00\u8fb9\u6700\u957f\u8def\u5c31\u597d\u4e86\uff0c\u6700\u540e\u8f93\u51fa\u4ece$1$\u53f7\u70b9\u5230\u6211\u4eec\u865a\u62df\u51fa\u6765\u7684$1 + cnt$\u53f7\u70b9\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nconst int maxn = 2e5 + 5;\n\ninline int read(){\n\tchar ch = getchar();\n\tint f = 1 , x = 0;\n\twhile(ch > '9' || ch < '0'){if(ch == '-')f = -1;ch = getchar();}\n\twhile(ch >= '0' && ch <= '9'){x = (x << 1) + (x << 3) + ch - '0';ch = getchar();}\n\treturn x * f;\n}\n\nint n,m,x,y;\nint head[maxn],tot,head2[maxn],tot2;\nint ans;\n\nstruct Edge{\n\tint from,to,next;\n}edge[maxn << 1],edge2[maxn << 1]; \n\nvoid add(int u,int v){\n\tedge[++tot].from = u;\n\tedge[tot].to = v;\n\tedge[tot].next = head[u];\n\thead[u] = tot;\n}\n\nvoid add_edge(int u,int v){\n\tedge2[++tot2].from = u;\n\tedge2[tot2].to = v;\n\tedge2[tot2].next = head2[u];\n\thead2[u] = tot2;\n}\n\nint dfn[maxn],low[maxn],ind;\nint belong[maxn],num[maxn],cnt,stack[maxn],top;\nbool ins[maxn];\n\nvoid tarjan(int x){\n    low[x] = dfn[x] = ++ind;\n    ins[x] = true;\n    stack[++top] = x;\n    for(int i=head[x];i;i=edge[i].next){\n        int v = edge[i].to;\n        if(ins[v])  low[x] = min(low[x] , dfn[v]);\n        if(!dfn[v]) {\n            tarjan(v);\n            low[x] = min(low[x] , low[v]);\n        } \n    }\n    int k = 0;\n    if(dfn[x] == low[x]){\n        cnt++;\n        do{\n            k = stack[top];\n            num[cnt]++;\n            top--;\n            ins[k] = false;\n            belong[k] = cnt;\n        }  while(k != x);\n    }\n}\n\nint dis[maxn];\nbool vis[maxn];\n\nvoid spfa(int s){\n\tqueue<int> q;\n\tq.push(s);\n\tdis[s] = 0;\n\tvis[s] = true;\n\twhile(!q.empty()){\n\t\tint cur = q.front();\n\t\tq.pop();  vis[cur] = false;\n\t\tfor(int i=head2[cur];i;i=edge2[i].next){\n\t\t\tint v = edge2[i].to;\n\t\t\tif(dis[v] < dis[cur] + num[cur]){\n\t\t\t\tdis[v] = dis[cur] + num[cur];\n\t\t\t\tif(vis[v] == 0){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\t\t\nint main(){\n\tn = read(); m = read();\n\tfor(int i=1;i<=m;i++){\n\t\tx = read(); y =read();\n\t\tadd(x , y);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t   if(!dfn[i])  tarjan(i);\n\tfor(int i=1;i<=n;i++)\n\t   num[i + cnt] = num[i];\n\tfor(int i=1;i<=m;i++)\n\t    if(belong[edge[i].from] != belong[edge[i].to]){\n\t   \t    add_edge(belong[edge[i].from] , belong[edge[i].to]);\n\t   \t    add_edge(belong[edge[i].to] , belong[edge[i].from] + cnt);\n\t   \t    add_edge(belong[edge[i].from] + cnt , belong[edge[i].to] + cnt);\n\t    }\n\tspfa(belong[1]);\n\tprintf(\"%d\\n\",dis[belong[1] + cnt]);\n\treturn 0;\n}\n```",
        "postTime": 1540521491,
        "uid": 54635,
        "name": "Kevin_F",
        "ccfLevel": 0,
        "title": "\u8349\u9274\u5b9a"
    },
    {
        "content": "### \u611f\u89c9\u9898\u89e3\u4e2d\u6ca1\u6709\u4ec0\u4e48\u7528\u5206\u5c42\u56fe\u6700\u77ed\u8def\u7684\u89e3\u6cd5\uff0c\u90a3\u6211\u5c31\u6765\u5206\u4eab\u4e00\u4e0b\u6211\u7684\u505a\u6cd5\u5427\u3002\u9996\u5148\u8fd9\u9053\u9898\u8981\u7f29\u70b9\uff0c\u5e94\u8be5\u662f\u626b\u4e00\u773c\u6837\u4f8b\u5c31\u80fd\u770b\u51fa\u6765\u7684\u3002\u5982\u679c\u7f29\u70b9\u4e0d\u4f1a\u8bf7\u51fa\u95e8\u5de6\u8f6c\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5404\u79cd\u4f8b\u9898\uff0c\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5c31\u5728\u5982\u4f55\u5904\u7406\u90a3\u4e00\u6b21\u9006\u884c\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u60f3\u5230\u4e86\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff08\u8fd9\u4e2a\u4e0d\u4f1a\u7684\u8bdd\u53ef\u4ee5\u51fa\u95e8P4568\u98de\u884c\u7ebf\u8def\uff09\u6211\u53ef\u4ee5\u7528dis[i][use_time]\u8bb0\u5f55\u5230i\u70b9\u5e76\u7528\u4e86use_time\u6b21\u9006\u884c\u7684\u6700\u5927\u7ecf\u8fc7\u70b9\u6570\u3002\u63a5\u4e0b\u6765\u8fd8\u662f\u5728\u4ee3\u7801\u4e2d\u89e3\u91ca\u5427\n## \uff084.17k\u4ee3\u7801\u9884\u8b66\uff09\n```\n#include<bits/stdc++.h>\n#include<stack>\n#include<queue>\nusing namespace std;\ninline int read(){\n    int w=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        w=(w<<3)+(w<<1)+ch-48;\n        ch=getchar();\n    }\n    return w*f;\n} \nint dfn[100010],low[100010],size[100010],col[100010],color,cnt,head[1000010],n,m,tim,head1[1000010],cntt,dis[100010][2];\nbool vis[100010],debug;\n//edge1\u7528\u6765\u8bb0\u5f55\u4e00\u5f00\u59cb\u7684\u8fb9\nstruct Edge1{\n    int from,to,next;\n}edge1[1000010];\ninline void addedge1(int u,int v){\n    cnt++;\n    edge1[cnt].from=u;\n    edge1[cnt].to=v;\n    edge1[cnt].next=head[u];\n    head[u]=cnt;\n}\nstack<int> s;\ninline void paint(int u){\n    s.pop();\n    vis[u]=false;\n    col[u]=color;\n    size[color]++;\n}\ninline void tarjan(int u){\n    int v,i,j,k;\n    tim++;\n    dfn[u]=low[u]=tim;\n    s.push(u);\n    vis[u]=true;\n    for(i=head[u];i;i=edge1[i].next){\n        v=edge1[i].to;\n        if(!dfn[v]){\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n        }\n        else if(vis[v]) low[u]=min(low[u],low[v]);\n    }\n    if(low[u]==dfn[u]){\n        color++;\n        while(s.top()!=u){\n            paint(s.top());\n        }\n        paint(u);\n    }\n    return;\n}//\u5230\u8fd9\u90fd\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u677f\u5b50\uff0c\u6beb\u65e0\u4eae\u70b9\n//edge2\u7528\u6765\u8bb0\u5f55\u7f29\u70b9\u5b8c\u7684\u6b63\u5411\u8fb9\uff0cedge3\u7528\u6765\u8bb0\u5f55\u7f29\u70b9\u5b8c\u7684\u53cd\u5411\u8fb9\nstruct Edge2{\n    int from,to,dis,next;\n}edge2[1000010];\nstruct Edge3{\n    int from,to,dis,next;\n}edge3[1000010];\ninline void addedge2(int u,int v){\n    cnt++;\n    edge2[cnt].from=u;\n    edge2[cnt].to=v;\n    edge2[cnt].dis=size[v];\n    edge2[cnt].next=head[u];\n    head[u]=cnt;\n}\ninline void addedge3(int u,int v){\n    cntt++;\n    edge3[cntt].from=u;\n    edge3[cntt].to=v;\n    edge3[cntt].dis=size[v];\n    edge3[cntt].next=head1[u];\n    head1[u]=cntt;\n}\nstruct node{\n    int num,dis,use_time;//\u73b0\u5728\u70b9\u7684\u7f16\u53f7\uff0c\u5230\u76ee\u524d\u70b9\u7684\u8ddd\u79bb\uff0c\u662f\u5426\u7528\u8fc7\u9006\u5411\n    friend bool operator < (node a,node b){\n        return a.dis>b.dis;\n    }\n};\npriority_queue<node> q;//\u8fd9\u4e2a\u9898\u5728\u7f29\u70b9\u540e\u53ef\u4ee5\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6c42dag\u4e0a\u6700\u957f\u8def\u7684\u95ee\u9898\ninline void dij(int s){\n    int u,v,w,i,j,k,use_tim;\n    q.push((node){s,0,0});\n    while(!q.empty()){\n        node front=q.top();\n        q.pop();\n        u=front.num;\n        use_tim=front.use_time;\n        if(front.dis>dis[u][front.use_time]) continue;\n        for(i=head[u];i;i=edge2[i].next){//\u8fd9\u4e2a\u662f\u6b63\u5411\u8fb9\u7684\n            v=edge2[i].to;\n            w=edge2[i].dis;\n            if(debug) cout<<u<<\" \"<<v<<\" \"<<w<<endl;\n            if(dis[v][use_tim]<dis[u][use_tim]+w){\n                dis[v][use_tim]=dis[u][use_tim]+w;\n                q.push((node){v,dis[v][use_tim],use_tim});\n            }\n        }\n        if(!use_tim){//\u5982\u679c\u6211\u8fd8\u6ca1\u9006\u5411\u8d70\u8fc7\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u6216\u4e0d\u7528\n            for(i=head1[u];i;i=edge3[i].next){\n                v=edge3[i].to;\n                w=edge3[i].dis;\n                if(dis[v][1]<dis[u][0]+w){\n                    dis[v][1]=dis[u][0]+w;\n                    q.push((node){v,dis[v][1],1});\n                }\n            }\n        }\n    }\n}\nint main(){\n    n=read();\n    m=read();\n    int i,j,k;\n    for(i=1;i<=m;i++){\n        int x,y;\n        x=read();\n        y=read();\n        addedge1(x,y);\n    }\n    for(i=1;i<=n;i++){\n        if(!dfn[i]) tarjan(i);\n    }\n    //debug=true;\n    if(debug){\n        for(i=1;i<=n;i++){\n            cout<<col[i]<<\" \";\n        }\n        cout<<endl;\n    }\n    cnt=0;\n    memset(head,0,sizeof(head));\n    int u,v,w;\n    for(i=1;i<=m;i++){\n        u=edge1[i].from;\n        v=edge1[i].to;\n        if(col[u]==col[v]) continue;\n        addedge2(col[u],col[v]);\n        addedge3(col[v],col[u]);\n    }\n    //debug=true;\n    if(debug){\n        for(i=1;i<=cnt;i++){\n            cout<<edge2[i].from<<\" \"<<edge2[i].to<<\" \"<<edge2[i].dis<<endl;\n        }\n        cout<<endl<<endl;\n        for(i=1;i<=cnt;i++){\n            cout<<edge3[i].from<<\" \"<<edge3[i].to<<\" \"<<edge3[i].dis<<endl;\n        }\n    }\n    //debug=true;\n    if(debug){\n        u=1;\n        for(i=head1[u];i;i=edge3[i].next){\n            v=edge3[i].to;\n            w=edge3[i].dis;\n            cout<<u<<\" \"<<v<<\" \"<<w<<endl;\n        }\n        cout<<endl<<endl;\n    }\n    dij(col[1]);\n    //debug=true;\n    if(debug){\n        for(i=1;i<=color;i++){\n            cout<<dis[i][0]<<endl;\n        }\n    }\n    int ans=max(dis[col[1]][1],dis[col[1]][0]);//\u6700\u540e\u5f97\u51fa\u7b54\u6848\n    cout<<ans<<endl;//\u8f7b\u677eac\uff08\u9003\n    return 0;\n}\n```\n### \u8fd9\u4e2a\u9898\u7684\u601d\u8def\u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e86\uff0c\u53ef\u80fd\u9700\u8981\u5f3a\u8fde\u901a\u5206\u91cf\u548c\u5206\u5c42\u56fe\u6700\u77ed\u8def\u7684\u524d\u7f6e\u6280\u80fd\u70b9\uff0c\u795d\u5927\u5bb6\u987a\u5229AC!!!(\u9003",
        "postTime": 1539259610,
        "uid": 106035,
        "name": "\u6e29\u8bcd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "https://www.luogu.org/problemnew/show/P3119\n\n~~\u7c97\u66b4\u7684~~Tarjan\u5f3a\u8fde\u901a\u5206\u91cf+\u6700\u77ed\u8defDijkstra\n\n\n\u672c\u9898\u4ee3\u7801==\u7f29\u70b9\u6a21\u677f\u5957\u4e0a\u5806\u4f18\u5316Dj ~~\u7c97\u66b4\u5f97\u4e0d\u7528\u8003\u8651\u5176\u4ed6\u4e71\u4e03\u516b\u7cdf\u7684\u60c5\u51b5~~\n\n\u81f3\u4e8e\u9006\u5411\u8d70\u7684\u95ee\u9898\uff0c\u5728\u6700\u77ed\u8def\u4e2d\u52a0\u4e0a\u5224\u65ad\u60c5\u51b5\u5c31\u884c\n\n\u4f18\u5148\u961f\u5217\u7684\u987a\u5e8f\u4e00\u5b9a\u8981\u5199\u5bf9\uff01\u6548\u7387\u5929\u5dee\u5730\u522b\n- \u5bf9\u4e8e\u6700\u77ed\u8def\u4e2d\u7684d\u6570\u7ec4\uff1ad[br][u]\u8868\u793a \u8d70\u5230u\u70b9\u65f6\u5df2\u8fdb\u884cbr\u6b21\u9006\u5411\u8fb9\u64cd\u4f5c\u7684\u6700\u4f18\u503c \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<vector>\n#include<cstring>\n#include<cctype>\nusing namespace std;\nconst int min(int a,int b) {return a<b ? a:b;}\nconst int maxn=100003;\nstruct data{\n    int d,u,br; //d:\u6743\u503c u:\u70b9\u7f16\u53f7 br:\u662f\u5426\u5df2\u8fdb\u884c\u4e86\u9006\u5411\u8fb9\u64cd\u4f5c\n    bool operator < (const data &tmp) const{\n        return d>tmp.d;\n    } //\u53c8\u4e00\u6b21\u7b26\u53f7\u5199\u53cd\u5bfc\u81f4\u8d85\u65f6\n};\npriority_queue <data> h;\nvector <int> g1[maxn],g2[maxn],g3[maxn]; //g1:\u5b58\u539f\u56fe\uff1bg2:\u5b58\u65b0\u56fe g3:\u5b58\u65b0\u56fe\u7684\u53cd\u5411\u8fb9\nint dfn[maxn],low[maxn],st[maxn],be[maxn],d[2][maxn],tot[maxn];\nint dfs_clock,cnt,top,n,m;\ninline int getint() //\u5feb\u8bfb\n{\n\tchar c=getchar(); int x=0;\n\twhile(!isdigit(c)) c=getchar();\n\twhile(isdigit(c))\n\t{\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x;\n}\nvoid tarjan(int x) //\u88f8\u7684\u7f29\u70b9\u6a21\u677f\n{\n    dfn[x]=low[x]=++dfs_clock;\n    st[++top]=x;\n    int len=g1[x].size();\n    for(int i=0;i<len;i++)\n    {\n        int to=g1[x][i];\n        if(!dfn[to])\n        {\n            tarjan(to);\n            low[x]=min(low[x],low[to]);\n        }else if(!be[to]) low[x]=min(low[x],dfn[to]);\n    }\n    if(dfn[x]==low[x])\n    {\n        be[x]=++cnt; tot[cnt]++;\n        while(st[top]!=x)\n        {\n            be[st[top--]]=cnt; tot[cnt]++;\n        }\n        top--;\n    }\n}\nint main()\n{\n\tfreopen(\"P3119.in\",\"r\",stdin);\n    n=getint(); m=getint();\n    int q1,q2;\n    for(int i=1;i<=m;i++)\n    {\n    \tq1=getint(); q2=getint();\n        g1[q1].push_back(q2);\n    }\n    for(int i=1;i<=n;i++)\n        if(!dfn[i])\n            tarjan(i);\n    for(int i=1;i<=n;i++) //\u5efa\u65b0\u56fe\n    {\n        int len=g1[i].size();\n        for(int j=0;j<len;j++)\n        {\n            int to=g1[i][j];\n            if(be[i]!=be[to])\n            {\n                g2[be[i]].push_back(be[to]);\n                g3[be[to]].push_back(be[i]);\n            }\n        }\n    }\n//------\u4ee5\u4e0a\u662f\u88f8\u7684tarjan------------\n//\u6700\u77ed\u8def\u90e8\u5206\uff08\u52a0\u4e86\u5806\u4f18\u5316\uff09\n    h.push((data){0,be[1],0});  //\u6ce8\u610f\u662f\u8dd1\u7f29\u70b9\u540e\u7684\u56fe\uff0c\u6240\u4ee5\u4ece\u70b91\u6240\u5c5e\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5f00\u59cb\u8dd1\n    while(!h.empty())\n    {\n        data x=h.top(); h.pop();\n        if(x.d!=d[x.br][x.u]) continue;\n        int u=x.u,len=g2[u].size();\n        for(int i=0;i<len;i++)\n        {\n            int to=g2[u][i];\n            if(d[x.br][to]<d[x.br][u]+tot[to])\n            {\n                d[x.br][to]=d[x.br][u]+tot[to];\n                h.push((data){d[x.br][to],to,x.br});\n            }\n        }\n        if(x.br==0) //\u9006\u5411\u8fb9\u64cd\u4f5c\uff08\u53bb\u6389\u8fd9\u5757\u5c31\u662f\u88f8\u7684Dj\u7b97\u6cd5\u4e86\uff09\n        {\n            len=g3[u].size();\n            for(int i=0;i<len;i++)\n            {\n                int to=g3[u][i];\n                if(d[1][to]<d[0][u]+tot[to])\n                {\n                    d[1][to]=d[0][u]+tot[to];\n                    h.push((data){d[1][to],to,1});\n                }\n            }\n        }\n    }\n    printf(\"%d\",max(d[0][be[1]],d[1][be[1]])); //\u7ec8\u70b9\u7684\u6700\u5927\u503c\n    return 0;\n}\n```",
        "postTime": 1530769437,
        "uid": 21679,
        "name": "\u9999\u98ce\u667a\u4e43",
        "ccfLevel": 7,
        "title": "P3119 [USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur"
    },
    {
        "content": "[\u535a\u5ba2](https://www.cnblogs.com/tqr06/p/11654536.html)\u89c2\u770b\u6548\u679c\u66f4\u4f73\n\n\n```\n\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6709\u4e00\u6b21\u9006\u884c\u673a\u4f1a\n\u4ece\u4e00\u53f7\u70b9\u5f00\u59cb\u56de\u5230\u4e00\u53f7\u70b9\n\u6700\u591a\u53ef\u4ee5\u901a\u8fc7\u591a\u5c11\u4e2a\u70b9\n```\n\n\u663e\u7136\u5148tarjan\u7f29\u70b9\uff0c\u67d3\u8272\u540e\u5efa\u4e00\u5f20\u65b0\u56fe\n\n\u5bf9\u4e8e\u4e00\u6b21\u9006\u884c\u673a\u4f1a\u7684\u5904\u7406\uff0c\u6211\u4eec\u5c31\u518d\u5efa\u4e00\u5f20\u4e00\u6a21\u4e00\u6837\u7684\u56fe\uff08\u7b2c\u4e8c\u5c42\uff09\n\n\u5bf9\u4e8e\u6bcf\u6761\u7ed9\u5b9a\u7684\u6709\u5411\u8fb9$(u,v)$\uff0c\u5efa\u4e00\u6761\u4ece\u7b2c\u4e00\u5c42\u5411\u7b2c\u4e8c\u5c42\u7684\u53cd\u8fb9$(v,u+n)$\n\n\u6709\u4e00\u4e2a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff0c\u5efa\u4e86\u5206\u5c42\u56fe\u4e4b\u540e\uff0c\u4e00\u5b9a\u8981\u628a\u7b2c\u4e00\u5c42\u7684\u7f29\u70b9\u7684\u5927\u5c0f\u8d4b\u7ed9\u7b2c\u4e8c\u5c42\n\n\u7136\u540e\u518d\u5728\u5206\u5c42\u56fe\u4e0a\u8dd1\u4ece$color[1]$\u8282\u70b9\u5230\u5176\u5b83\u70b9\u7684\u6700\u957f\u8def\n\n\u5bf9\u4e8e\u8f93\u51fa\u7684\u7b54\u6848\uff0c\u9700\u8981\u6ce8\u610f\u662f$max(dis[color[1]],dis[color[1+n]])$\n\n\u56e0\u4e3a\u6709\u53ef\u80fd\u4e0d\u53cd\u6094\u5c31\u662f\u6700\u4f18\u89e3\u4e86\n\n\u5bf9\u4e8e\u5206\u5c42\u56fe\uff0c\u7a7a\u95f4\u4e00\u5b9a\u8981\u5f00\u591f\uff08\u81f3\u5c11\u662f\u666e\u901a\u56fe\u7684\u5c42\u6570\u500d\uff09\n\n\u987a\u4fbf\u63a8\u8350\u4e00\u9053\u5206\u5c42\u56fe\u597d\u9898\uff1a[[JLOI2011]\u98de\u884c\u8def\u7ebf](https://www.luogu.org/problem/P4568)\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define N 200005\nusing namespace std;\n\nint n,m,u[N],v[N];\n\nstruct Edge\n{\n\tint next,to;\n}edge[N<<1];\nint cnt=0,head[N];\n\ninline void add_edge(int from,int to)\n{\n\tedge[++cnt].next=head[from];\n\tedge[cnt].to=to;\n\thead[from]=cnt;\n}\n\ntemplate<class T>inline void read(T &res)\n{\n\tchar c;T flag=1;\n\twhile((c=getchar())<'0'||c>'9')if(c=='-')flag=-1;res=c-'0';\n\twhile((c=getchar())>='0'&&c<='9')res=res*10+c-'0';res*=flag;\n}\n\nint tms=0,low[N],dfn[N];\nint co[N],sum[N],col=0;\nstack<int> sta;\nvoid tarjan(int u)\n{\n\tlow[u]=dfn[u]=++tms;\n\tsta.push(u);\n\tfor(register int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(!co[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u])\n\t{\n\t\tco[u]=++col;\n\t\tsum[col]++;\n\t\twhile(sta.top()!=u)\n\t\t{\n\t\t\tco[sta.top()]=col;\n\t\t\tsum[col]++;\n\t\t\tsta.pop();\n\t\t}\n\t\tsta.pop();\n\t}\n}\n\nint bc;\nint dis[N],vis[N];\nqueue<int> q;\nvoid spfa()\n{\n\tmemset(dis,-100,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tq.push(bc); dis[bc]=0; vis[bc]=1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=0;\n\t\tfor(register int i=head[u];i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif(dis[v]<dis[u]+sum[u])\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+sum[u];\n\t\t\t\tif(!vis[v])\n\t\t\t\t{\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tread(n);read(m);\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tread(u[i]);read(v[i]);\n\t\tadd_edge(u[i],v[i]);\n\t}\n\tfor(register int i=1;i<=n;++i) if(!dfn[i]) tarjan(i);\n\tbc=co[1];\n\tcnt=0;\n\tmemset(head,0,sizeof(head));\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tif(co[u[i]]==co[v[i]]) continue;\n\t\tadd_edge(co[u[i]],co[v[i]]);//\u5efa\u7f29\u70b9\u8fb9\n\t\tadd_edge(co[u[i]]+n,co[v[i]]+n);//\u5efa\u4e0b\u4e00\u5c42\n\t\tadd_edge(co[v[i]],co[u[i]]+n);//\u53cd\u8fb9 \n\t}\n\tfor(int i=1;i<=col;++i) sum[i+n]=sum[i];\n\tspfa();\n\tprintf(\"%d\\n\",max(dis[bc+n],dis[bc]));\n\treturn 0;\n}\n/*\n7 10 \n1 2 \n3 1 \n2 5 \n2 4 \n3 7 \n3 5 \n3 6 \n6 5 \n7 2 \n4 7 \n*/\n\n```",
        "postTime": 1570779342,
        "uid": 117842,
        "name": "\u65e0\u610f\u8bc6\u8eba\u67aa\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u6211\u4eec\u5e94\u8be5\u7528$Tarjan$\u7f29\u70b9\uff0c\u5c06\u539f\u56fe\u53d8\u4e3a$GAD$\u56fe\uff0c\u540c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u8bb0\u4e3a$num[i]$\u3002\n\n\u56e0\u4e3a\u8d77\u70b9\u7ec8\u70b9\u90fd\u662f1\uff0c\u6240\u4ee5\u8def\u5f84\u4e00\u5b9a\u662f\u4e00\u4e2a\u73af\u3002\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u51fa1\u5230\u6240\u6709\u70b9\u7684\u8ddd\u79bb\uff0c\u5b58\u5728$dis1$\u4e2d\uff08\u8dd1\u6b63\u56fe\uff09\u548c\u6240\u6709\u70b9\u52301\u7684\u8ddd\u79bb\u5b58\u5728$dis2$\u4e2d\uff08\u8dd1\u53cd\u56fe\uff09\u3002\u6ce8\u610f\uff0c\u5982\u679c\u8d70\u4e0d\u5230\u5c31\u8bbe\u4e3a\u6781\u5c0f\u503c\u3002\u6700\u77ed\u8def\u8dd1\u7684\u662f\u70b9\u6743\uff0c\u5176\u5b9e\u548c\u8fb9\u6743\u5dee\u4e0d\u591a\u3002\n\n\u9898\u76ee\u8bf4\u53ef\u4ee5\u9006\u5411\u8d70\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u6211\u4eec\u8bbe\u8be5\u8fb9\u8d77\u70b9\u4e3a$u$\uff0c\u7ec8\u70b9\u4e3a$v$\uff0c\u90a3\u4e48\uff0c\u7b54\u6848\u5c31\u5e94\u4e3a$num[belong[1]]+max(dis1[v]+dis2[u])$\u3002\n\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <stack>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n\nconst int MAXN = 100000;\nint n,m,x,y;\nvector< int > Graph[ MAXN + 5 ];\nstack< int > s;\n\nint dfn[ MAXN + 5 ] , low[ MAXN + 5 ] , depth , cnt;\nint belong[ MAXN + 5 ] , num[ MAXN + 5 ];\nbool is[ MAXN + 5 ];\n\nvoid Tarjan( int u ) {\n    dfn[ u ] = low[ u ] = ++ depth;\n    is[ u ] = 1 , s.push( u );\n    \n    int v;\n    for( int i = 0 ; i < Graph[ u ].size( ) ; i ++ ) {\n        v = Graph[ u ][ i ];\n        if( !dfn[ v ] ) {\n            Tarjan( v );\n            low[ u ] = min( low[ u ] , low[ v ] );\n        }\n        else if( is[ v ] )\n            low[ u ] = min( low[ u ] , dfn[ v ] );\n    }\n    if( dfn[ u ] == low[ u ] ) {\n        cnt ++;\n        do{\n            v = s.top();\n            is[ v ] = 0 , s.pop();\n            belong[ v ] = cnt;\n            num[ cnt ] ++;\n        }while( u != v );\n    }\n}\n\nstruct node{\n    int v,w;\n    node(){}\n    node( int V , int W ) {\n        v = V;\n        w = W;\n    }\n    bool operator < ( const node &x ) const {\n        return w < x.w;\n    }\n};\nvector< int > lit_Graph1[ MAXN + 5 ];\nvector< int > lit_Graph2[ MAXN + 5 ]; \nint dis1[ MAXN + 5 ],dis2[ MAXN + 5 ];\nbool vis[ MAXN + 5 ];\nvoid Spfa1( int s ) {\n    queue< int > Q;\n    while( !Q.empty() ) Q.pop();\n    for( int i = 1 ; i <= n ; i ++ ) dis1[ i ] = -0x3f3f3f3f;\n    memset( vis , 0 , sizeof( vis ) );\n    dis1[ s ] = 0 , vis[ s ] = 1;\n    \n    Q.push( s );\n    while ( !Q.empty() ) {\n        int u = Q.front();\n        Q.pop() , vis[ u ] = 0;\n\n        for ( int i = 0 ; i < lit_Graph1[ u ].size() ; i ++ ) {\n            int v = lit_Graph1[ u ][ i ];\n            if ( dis1[ v ] < dis1[ u ] + num[ v ] ) {\n                dis1[ v ] = dis1[ u ] + num[ v ];\n                if ( !vis[ v ] ) {\n                    vis[ v ] = 1;\n                    Q.push( v );\n                }\n            }\n        }\n    }\n}\n\nvoid Spfa2( int s ) {\n    queue< int > Q;\n    while( !Q.empty() ) Q.pop();\n    for( int i = 1 ; i <= n ; i ++ ) dis2[ i ] = -0x3f3f3f3f;\n    memset( vis , 0 , sizeof( vis ) );\n    dis2[ s ] = 0 , vis[ s ] = 1;\n    \n    Q.push( s );\n    while ( !Q.empty() ) {\n        int u = Q.front();\n        Q.pop() , vis[ u ] = 0;\n\n        for ( int i = 0 ; i < lit_Graph2[ u ].size() ; i ++ ) {\n            int v = lit_Graph2[ u ][ i ];\n            if ( dis2[ v ] < dis2[ u ] + num[ v ] ) {\n                dis2[ v ] = dis2[ u ] + num[ v ];\n                if ( !vis[ v ] ) {\n                    vis[ v ] = 1;\n                    Q.push( v );\n                }\n            }\n        }\n    }\n}\n\n\nint main( ) {\n    scanf(\"%d %d\",&n,&m);\n    for( int i = 1 ; i <= m ; i ++ ) {\n        scanf(\"%d %d\",&x,&y);\n        Graph[ x ].push_back( y );\n    }\n    for( int i = 1 ; i <= n ; i ++ )\n        if( !dfn[ i ] ) Tarjan( i );\n    for( int i = 1 ; i <= n ; i ++ )\n    {\n        for( int j = 0 ; j < Graph[ i ].size( ) ; j ++ ) {\n            int u = belong[ i ] , v = belong[ Graph[ i ][ j ] ];\n            if( u != v ) {\n                lit_Graph1[ u ].push_back( v );\n                lit_Graph2[ v ].push_back( u );\n            }\n        }\n    }\n    \n    \n    Spfa1( belong[ 1 ] );\n    Spfa2( belong[ 1 ] );\n    \n    int Ans = num[ belong[ 1 ] ];\n    for( int i = 1 ; i <= cnt ; i ++ ) {\n        for( int j = 0 ; j < lit_Graph1[ i ].size( ) ; j ++ ) {\n            int u = i , v = lit_Graph1[ i ][ j ];\n            Ans = max( Ans , dis1[ v ] + dis2[ u ] + num[ belong[ 1 ] ] );\n        }\n    }\n    printf(\"%d\\n\",Ans);\n    return 0;\n}\n```\n",
        "postTime": 1563716803,
        "uid": 123802,
        "name": "chihik",
        "ccfLevel": 0,
        "title": "P3119 Grass Cownoisseur \u9898\u89e3"
    },
    {
        "content": "\u672c\u6587\u4e3b\u8981\u662f\u5bf9**\u4e3a\u4ec0\u4e48**\u679a\u4e3e\u53cd\u5411\u8fb9\u540e\u7684\u8def\u5f84**\u4e0d\u4f1a\u6709\u91cd\u590d\u70b9**\u8fdb\u884c\u4e00\u4e2a\u8bf4\u660e\n\n\u9996\u5148\u8003\u8651\u4e0d\u80fd\u8d70\u53cd\u5411\u8fb9\u7684\u7b54\u6848\uff0c\u663e\u793a\u5c31\u662f1\u53f7\u70b9\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\uff0c\u5982\u679c\u53ef\u4ee5\u8d70\u4e00\u6b21\u53cd\u5411\u8fb9\u5462\uff1f\u8003\u8651\u7f29\u70b9\uff0c\u663e\u7136\u6211\u4eec\u7684\u6700\u7ec8\u7b54\u6848\u4e00\u5b9a\u662f\u901a\u8fc7\u539f\u6709\u7684\u8fb9\u8d70\u5230\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf$x$\uff0c\u7136\u540e\u5f00\u59cb\u679a\u4e3e\u4e0e$x$\u76f8\u8fde\u7684\u53cd\u5411\u8fb9\u7684\u7aef\u70b9$y$\uff0c\u5e76\u4e14\u80fd\u4fdd\u8bc1\u4ece$y$\u51fa\u53d1\u80fd\u591f\u53ea\u7ecf\u8fc7\u539f\u6709\u7684\u8fb9\u53ef\u4ee5\u5230\u8fbe1\u53f7\u70b9\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\u3002![](https://cdn.luogu.com.cn/upload/pic/59338.png)\n\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u4f1a\u6709\u8dd1\u5230\u91cd\u70b9\u5462\uff1f \u5982\u4e0a\u56fe \u5982\u679c$y$\u5230$1$\u7684\u8def\u5f84\u4e0e$1$\u5230$x$\u7684\u8def\u5f84\u6709\u91cd\u70b9\uff0c\u5047\u8bbe\u8fd9\u4e2a\u91cd\u70b9\u4e3a$s$\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ece$s$\u51fa\u53d1\u80fd\u5230\u8fbe\u5230$1$\uff0c**\u4e5f\u5c31\u662f$1$\u4e0e$s$\u5904\u4e8e\u540c\u4e00\u6765\u8fde\u901a\u5206\u91cf\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe**\u3002\n\n\u4e8e\u662f$Tarjan$\u7f29\u70b9\u8fde\u8fb9\uff0c\u8dd1\u539f\u8fb9\u548c\u53cd\u5411\u8fb9\u5206\u522b\u8dd1\u4e00\u6b21\u6700\u957f\u8def\uff0c\u518d\u679a\u4e3e\u7b54\u6848\u5373\u53ef\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1e5 + 5, MAXM = 3e5 + 5, BOUND = 2e5, MOD = 1e9 + 7, INF = 0x3f3f3f3f;\n#define rep(i,a,b) for(int i=(a);i<=(b);++i)\nstruct Edge {\n\tint v, next;\n}e[MAXM];\nint n, m, u, v, cnt, head[MAXN], head2[MAXN], head3[MAXN];\nint dfn[MAXN], d[2][MAXN], st[MAXN], top, tot, low[MAXN], sz[MAXN], col[MAXN], color, out[MAXN], root, in[MAXN];\nbool vis[MAXN];\ninline void addEdge(int *head, int u, int v) {\n\te[++cnt].v = v; e[cnt].next = head[u]; head[u] = cnt;\n}\nvoid tarjan(int u) {\n\tdfn[u] = low[u] = ++tot;\n\tvis[u] = 1; st[++top] = u;\n\tfor (int i = head[u]; i; i = e[i].next) {\n\t\tint v = e[i].v;\n\t\tif (!dfn[v]) {\n\t\t\ttarjan(v);\n\t\t\tlow[u] = min(low[u], low[v]);\n\t\t}\n\t\telse if (vis[v]) low[u] = min(low[u], dfn[v]);\n\t}\n\tif (low[u] == dfn[u]) {\n\t\tcolor++; int v;\n\t\tdo {\n\t\t\tv = st[top--]; vis[v] = 0;\n\t\t\tcol[v] = color, sz[color]++;\n\t\t} while (u != v);\n\t}\n}\nvoid spfa(int *head, int f) {\n\tmemset(vis, 0, sizeof(vis));\n\tqueue<int> q;\n\tq.push(col[1]);\n\td[f][col[1]] = sz[col[1]]; vis[col[1]] = 1;\n\twhile (q.size()) {\n\t\tint u = q.front(); q.pop();\n\t\tvis[u] = 0;\n\t\tfor (int i = head[u]; i; i = e[i].next) {\n\t\t\tint v = e[i].v;\n\t\t\tif (d[f][v] < d[f][u] + sz[v]) {\n\t\t\t\td[f][v] = d[f][u] + sz[v];\n\t\t\t\tif (!vis[v]) {\n\t\t\t\t\tvis[v] = 1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\nint main() {\n\tios::sync_with_stdio(false); cin.tie(0);\n\tcin >> n >> m;\n\trep(i, 1, m) {\n\t\tcin >> u >> v;\n\t\taddEdge(head, u, v);\n\t}\n\trep(i, 1, n) {\n\t\tif (!dfn[i])tarjan(i);\n\t}\n\trep(u, 1, n) {\n\t\tint v;\n\t\tfor (int i = head[u]; i; i = e[i].next) {\n\t\t\tv = e[i].v;\n\t\t\tif (col[v] != col[u])addEdge(head2, col[v], col[u]), addEdge(head3, col[u], col[v]);\n\t\t}\n\t}\n\tspfa(head2, 0); spfa(head3, 1);\n\tint ans = sz[col[1]], v;\n\trep(u, 1, color) {\n\t\tif (!d[1][u])continue;\n\t\tfor (int i = head2[u]; i; i = e[i].next) {\n\t\t\tv = e[i].v;\n\t\t\tif (d[0][v]) {\n\t\t\t\tans = max(ans, d[1][u] + d[0][v] - sz[col[1]]);\n\t\t\t}\n\t\t}\n\t}\n\tcout << ans << '\\n';\n\treturn 0;\n}\n```\n",
        "postTime": 1558669853,
        "uid": 116372,
        "name": "luoxin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "tarjan+spfa\n\n\u9996\u5148\u9898\u76ee\u4e2d\u8bf4\u201cBessie\u5728\u901a\u4e00\u4e2a\u8349\u573a\u53ea\u5403\u4e00\u6b21\u8349\uff0c\u6240\u4ee5\u4e00\u4e2a\u8349\u573a\u53ef\u4ee5\u7ecf\u8fc7\u591a\u6b21\u201d\uff0c\u90a3\u4e48\u5982\u679cBessie\u8fdb\u5165\u4e86\u4e00\u4e2a\u73af\uff0c\u80af\u5b9a\u662f\u5403\u5b8c\u4e86\u73af\u91cc\u7684\u8349\u518d\u8d70\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7528tarjan\u7f29\u70b9\n\n\u7136\u540e\u4ee51\u4e3a\u8d77\u70b9\u548c\u7ec8\u70b9\u5404\u8dd1\u4e00\u904dspfa\uff08\u7ec8\u70b9\u90a3\u7ec4\u7528\u5efa\u53cd\u56fe\u5b9e\u73b0\uff09\n\n\u518d\u679a\u4e3eBessie\u6700\u540e\u5230\u7684\u70b9\uff0c\u76f4\u63a5\u7edf\u8ba1\n\n\u6ce8\u610f\u4e24\u6761\u7ebf\u8def\u53ea\u4f1a\u5728\u8d77\u70b9\u548c\u7ec8\u70b9\u6709\u4ea4\u70b9\n\n\u8bc1\u660e\uff08\u91cd\u70b9\uff09\uff1a\n\n\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u8d77\u70b9\u4e3aS\uff0c\u7ec8\u70b9\u4e3aT\uff0c\u4ea4\u70b9\u4e3aO\u3002\n\n\u90a3\u4e48S-O-T\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\n\n\u4f17\u6240\u5468\u77e5\uff0ctarjan\u7f29\u70b9\u4e4b\u540e\u5f97\u5230\u7684\u56fe\u662f\u4e00\u4e2aDAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u5b58\u5728\u73af\uff0c\u77db\u76fe\n\n\u6545\u4e24\u6761\u7ebf\u8def\u53ea\u4f1a\u5728\u8d77\u70b9\u548c\u7ec8\u70b9\u6709\u4ea4\u70b9\n\n\u6ce8\u610f\u8fd9\u91cc\u8981\u51cf\u6389\u8d77\u70b9\u6240\u5728\u73af\u7684\u503c\uff0c\u8fd9\u91cc\u91cd\u590d\u4e86\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nbool v[100010];\nll n,m,color,deep,ans;\nll dfn[100010],low[100010],colour[100010],sum[100010];\n//colour[i]\u8868\u793ai\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u73af\uff0csum[i]\u8868\u793a\u73afi\u4e2d\u6709\u51e0\u4e2a\u70b9\nll _d[100010],_d_[100010];\nll ver[200010],Next[200010],head[100010],tot;//\u539f\u56fe\nll _ver[200010],_Next[200010],_head[100010],_tot;//\u7f29\u70b9\u540e\u7684\u6b63\u5411\u56fe\nll _ver_[200010],_Next_[200010],_head_[100010],_tot_;//\u7f29\u70b9\u540e\u7684\u53cd\u5411\u56fe\nstack<ll> st;\nqueue<ll> q;\n\ninline ll read(){\n\tll x=0,tmp=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-') tmp=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=(x<<3)+(x<<1)+ch-48;\n\t\tch=getchar();\n\t}\n\treturn tmp*x;\n}\n\ninline void addEdge(ll x,ll y){//\u539f\u56fe\u52a0\u8fb9\n\tver[++tot]=y;\n\tNext[tot]=head[x];\n\thead[x]=tot;\n}\n\ninline void _addEdge(ll x,ll y){//\u7f29\u70b9\u540e\u7684\u6b63\u5411\u56fe\u52a0\u8fb9\n\t_ver[++_tot]=y;\n\t_Next[_tot]=_head[x];\n\t_head[x]=_tot;\n}\n\ninline void _addEdge_(ll x,ll y){//\u7f29\u70b9\u540e\u7684\u53cd\u5411\u56fe\u52a0\u8fb9\n\t_ver_[++_tot_]=y;\n\t_Next_[_tot_]=_head_[x];\n\t_head_[x]=_tot_;\n}\n\ninline void _spfa(ll s){//\u7f29\u70b9\u540e\u7684\u6b63\u5411\u56fe\u8dd1spfa\uff0c\u5c31\u662f\u4ee51\u4e3a\u8d77\u70b9\u7684spfa\n\tmemset(_d,0,sizeof(_d));\n\tmemset(v,0,sizeof(v));\n\t_d[s]=sum[s]; v[s]=1;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tll x=q.front(); q.pop();\n\t\tfor(ll i=_head[x]; i; i=_Next[i]){\n\t\t\tll y=_ver[i];\n\t\t\tif(_d[y]<_d[x]+sum[y]){\n\t\t\t\t_d[y]=_d[x]+sum[y];\n\t\t\t\tif(!v[y]){\n\t\t\t\t\tq.push(y);\n\t\t\t\t\tv[y]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tv[x]=0;\n\t}\n}\n\ninline void _spfa_(ll s){//\u7f29\u70b9\u540e\u7684\u53cd\u5411\u56fe\u8dd1spfa\uff0c\u5c31\u662f\u4ee51\u4e3a\u7ec8\u70b9\u7684spfa\n\tmemset(_d_,0,sizeof(_d_));\n\tmemset(v,0,sizeof(v));\n\t_d_[s]=sum[s]; v[s]=1;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tll x=q.front(); q.pop();\n\t\tfor(ll i=_head_[x]; i; i=_Next_[i]){\n\t\t\tll y=_ver_[i];\n\t\t\tif(_d_[y]<_d_[x]+sum[y]){\n\t\t\t\t_d_[y]=_d_[x]+sum[y];\n\t\t\t\tif(!v[y]){\n\t\t\t\t\tq.push(y);\n\t\t\t\t\tv[y]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tv[x]=0;\n\t}\n}\n\nvoid tarjan(ll x){//\u7f29\u70b9\n\tdfn[x]=low[x]=++deep;\n\tv[x]=1; st.push(x);\n\tfor(ll i=head[x]; i; i=Next[i]){\n\t\tll y=ver[i];\n\t\tif(!dfn[y]){\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse{\n\t\t\tif(v[y]) low[x]=min(low[x],low[y]);\n\t\t}\n\t}\n\t\n\tif(dfn[x]==low[x]){\n\t\tcolour[x]=++color;\n\t\tv[x]=0;\n\t\tsum[color]=1;\n\t\twhile(st.top()!=x){\n\t\t\tsum[color]++;\n\t\t\tcolour[st.top()]=color;\n\t\t\tv[st.top()]=0;\n\t\t\tst.pop();\n\t\t}\n\t\tst.pop();\n\t}\n}\n\nint main(){\n\tn=read(); m=read();\n\twhile(m--) addEdge(read(),read());\n\tfor(ll i=1; i<=n; i++){\n\t\tif(!dfn[i]) tarjan(i);\n\t}\n\tfor(ll x=1; x<=n; x++){\n\t\tfor(ll i=head[x]; i; i=Next[i]){\n\t\t\tll y=ver[i];\n\t\t\tif(colour[x]!=colour[y]){//\u4e0d\u8fde\u51fa\u81ea\u73af\n\t\t\t\t_addEdge(colour[x],colour[y]);\n\t\t\t\t_addEdge_(colour[y],colour[x]);\n\t\t\t}\n\t\t}\n\t}\n\t_spfa(colour[1]); _spfa_(colour[1]);\n\tans=sum[colour[1]];\n\tfor(ll i=1; i<=n; i++){\n\t\tif(!v[colour[i]]&&_d[colour[i]]){//\u8fd9\u4e2a\u73af\u6ca1\u6709\u88ab\u8bbf\u95ee\u4e14\u80fd\u4ece1\u53f7\u70b9\u8d70\u5230\n\t\t\tll x=colour[i]; v[x]=1;\n\t\t\tfor(ll i=_head_[x]; i; i=_Next_[i]){\n\t\t\t\tll y=_ver_[i];\n\t\t\t\tif(!_d_[y]) continue;\n\t\t\t\tans=max(ans,_d[x]+_d_[y]-sum[colour[1]]);//\u9006\u5411\u8fb9\u7684\u4f7f\u7528\n\t\t\t}\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1557966406,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u4e4b\u524d\u505a\u7684\u4e00\u9053\u9898,\u4eca\u5929\u60f3\u8d77\u6765\u597d\u50cf\u6ca1\u5728\u6d1b\u8c37\u4ea4,\u4e8e\u662f\u8dd1\u56de\u6765\u4ea4\u987a\u4fbf\u5199\u7bc7\u9898\u89e3.\n\n~~\u4e3b\u8981\u662f\u770b\u5230\u5df2\u6709\u7684\u9898\u89e3\u597d\u50cf\u6709\u4e00\u5b9a\u9519\u8bef~~\n\n------------\n\u8fd9\u9053\u9898\u8bf4\u5b9e\u8bdd,\u8d8a\u770b\u9898\u89e3\u8d8a\u4f1a\u611f\u89c9\u9b3c\u755c,\u89c9\u5f97\u5404\u79cd\"\u5efa\u56fe\u9b3c\u755c\",\"\u601d\u7ef4\u9b3c\u755c\",\u8bf8\u5982\u6b64\u7c7b.\u5b9e\u9645\u4e0a,\u8fd9\u9053\u9898\u7684\u601d\u8def\u8fd8\u662f\u5f88\u6e05\u6670\u7684,\u4e0b\u9762\u5206\u4eab\u4e00\u6ce2\u89e3\u9898\u8fc7\u7a0b(\uff3e0\uff3e)\u251b;\n\n\n\u62ff\u5230\u9898\u76ee\u4e00\u770b\u5230\u5355\u5411\u8fb9,\u5f88\u81ea\u7136\u5c31\u4f1a\u60f3\u5230\u662f\u5426\u4f1a\u7528$Tarjan$\u7f29\u70b9,\u5982\u679c\u7528\u7684\u8bdd\u80fd\u5426\u771f\u6b63\u5728\u672c\u9898\u4e2d\u8d77\u5230\u4f5c\u7528;\u5206\u6790\u4e00\u4e0b\u4e4b\u540e,\u5bb9\u6613\u5f97\u51fa,\u7f29\u70b9\u4e4b\u540e\u7684\u4e00\u56e2\u7684\u6743\u503c\u5c31\u662f\u4e4b\u524d\u5230\u8fd9\u51e0\u4e2a\u70b9\u5f97\u5230\u7684\u70b9\u6743\u4e4b\u548c(\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u4efb\u610f\u4e24\u70b9\u4e92\u76f8\u53ef\u8fbe),\u6240\u4ee5\u8981\u7528$,,,$\u7136\u540e\u56fe\u5c31\u5efa\u597d\u4e86$......$\n\n\n\u7136\u540e\u6211\u4eec~~\u8fd9\u65f6\u5019~~\u5f00\u59cb\u601d\u8003\u9898\u76ee\u8981\u6211\u4eec\u89e3\u51b3\u7684\u95ee\u9898,\u663e\u7136\u8fd9\u4e2a\u9006\u884c\u4e00\u6b21\u662f\u7565\u6709\u70b9\u6076\u5fc3\u7684.\u5148\u4e0d\u8003\u8651\u8fd9\u4e2a\u6076\u5fc3\u7684\u9009\u62e9\u7684\u8bdd,\u6211\u4eec\u53ea\u8003\u8651\u4ece\u8d77\u70b9\u5982\u679c**\u4e0d\u9006\u884c**\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927$Ans$.\u663e\u7136\u8fd9\u4e2a\u7b54\u6848\u53ef\u4ee5\u5728\u6211\u4eec\u65b0\u56fe\u4e0a\u6b63\u4e00\u8fb9\u6700\u957f\u8def\u5373\u53ef.\n\n\n\u4f46\u63a5\u4e0b\u6765\u6211\u4eec\u4ecd\u9700\u5904\u7406\u8fd9\u4e00\u6b21\u9006\u884c\u7684\u95ee\u9898.\u6211\u4eec\u8003\u8651,\u6211\u4eec\u73b0\u5728\u6b63\u7ad9\u5728\u4e3e\u4f8b\u8d77\u70b9\u6700\u8fdc\u7684\u70b9,\u6211\u4eec\u53ef\u4ee5\u9006\u884c\u4e00\u6761\u8def\u56de\u5230\u8d77\u70b9,\u8fd9\u53ef\u548b\u6574?\n\n\u9009\u62e9\u4e0e\u5f53\u524d\u70b9\u76f8\u8fde\u7684\u5e76\u4e14\u53ef\u4ee5\u4e00\u8def\u56de\u5230\u8d77\u70b9\u7684\u90a3\u6761\u8fb9\u5c31\u884c\u5566!\n\n$ans=max(ans,(ll)(dis[i][1]+dis[p][0]))$\n\n\n\u753b\u4e2a\u56fe\u8fd9\u79cd\u601d\u8def\u8fd8\u662f\u5f88\u663e\u7136\u7684\u5566!\n\n\u987a\u4fbf\u8bf4\u4e00\u53e5,$ans$\u7684\u521d\u503c\u4e00\u5b9a\u8981\u8d4b\u503c\u4e3a\u8d77\u70b9\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6743\u503c,\u5426\u5219\u5f53\u8fd9\u4e2a\u56fe\u6574\u4e2a\u5c31\u662f\u4e2a\u73af,\u4f60\u7684\u7b54\u6848\u5c31\u662f\u4e00\u4e2a\u83ab\u540d\u5176\u5999\u7684\u503c\u5566!\n\n~~\u81ea\u5df1\u8bd5\u8bd5\u53bb\u5361\u5176\u4ed6\u9898\u89e3\u5427~~\n\n$code:$\n```c++\n#include<stdio.h>\n#include<string.h>\n#include<stack>\n#include<algorithm>\n#include<ctype.h>\n#include<vector>\n#include<queue>\n#define ll long long\n#define inf 1e9+9\nusing namespace std;\n\nchar buf[1<<20],*p1,*p2;\ninline char gc() {\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<20,stdin))==p1?0:*p1++;\n}\n\ntemplate<typename T>\ninline void read(T &x) {\n    char tt;\n    bool flag=0;\n    while(!isdigit(tt=gc())&&tt!='-');\n    tt=='-'?(flag=1,x=0):(x=tt-'0');\n    while(isdigit(tt=gc())) x=x*10+tt-'0';\n    flag?x=-x:x=x;\n}\n\nstruct node {\n    int x,len;\n    inline node(int a=0,int b=0) {\n        x=a;\n        len=b;\n    }\n    bool operator<(node a)const {\n        return len<a.len;\n    }\n};\n\nint n,m,tot,scc,belong[100005],sz[100005];\nll dis[100005][2];\nbool instack[100005];\nvector<int>G[100005];\nvector<node>g[100005][2];\nstack<int>s;\nint low[100005],dfn[100005];\npriority_queue<node>q;\n\nvoid djs(int start,int t) {\n    for(int i=1; i<=scc; i++) dis[i][t]=-inf;\n    dis[start][t]=(t==1)?sz[start]:0;\n    q.push(node(start,dis[start][t]));\n    while(!q.empty()) {\n        int x=q.top().x;\n        int len=q.top().len;\n        q.pop();\n\n        if(len!=dis[x][t]) continue;\n        for(int i=g[x][t].size()-1; i>=0; i--) {\n            int p=g[x][t][i].x;\n            len=g[x][t][i].len;\n            if(dis[p][t]>=dis[x][t]+len) continue;\n            dis[p][t]=(ll)dis[x][t]+len;\n            q.push(node(p,dis[p][t]));\n        }\n    }\n}\n\nvoid dfs(int x) {\n    low[x]=dfn[x]=++tot;\n    s.push(x),instack[x]=1;\n    int p;\n    for(int i=G[x].size()-1; i>=0; i--) {\n        int p=G[x][i];\n        if(!dfn[p]) {\n            dfs(p);\n            low[x]=min(low[x],low[p]);\n        } else if(dfn[p]&&instack[p]) {\n            low[x]=min(low[x],low[p]);\n        }\n    }\n    if(low[x]==dfn[x]) {\n        scc++;\n        do {\n            p=s.top();\n            s.pop();\n            instack[p]=0;\n            belong[p]=scc;\n            sz[scc]++;\n        } while(x!=p);\n    }\n}\n\nll ans;\nint main() {\n    read(n),read(m);\n    for(int i=1; i<=m; i++) {\n        int x,y;\n        read(x),read(y);\n        G[x].push_back(y);\n    }\n    for(int i=1; i<=n; i++) if(!dfn[i]) dfs(i);\n    for(int i=1; i<=n; i++)\n        for(int j=G[i].size()-1; j>=0; j--) {\n            int p=G[i][j];\n            if(belong[i]==belong[p]) continue;\n            g[belong[i]][1].push_back(node(belong[p],sz[belong[p]]));\n            g[belong[p]][0].push_back(node(belong[i],sz[belong[i]]));\n        }\n\n    djs(belong[1],0);\n    djs(belong[1],1);\n    \n    ans=sz[belong[1]];\n    int start=belong[1];\n    for(int i=1; i<=scc; i++) {\n        for(int j=g[i][0].size()-1; j>=0; j--) {\n            int p=g[i][0][j].x;\n            ans=max(ans,(ll)(dis[i][1]+dis[p][0]));\n        }\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1538490651,
        "uid": 83839,
        "name": "Katoumegumi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u8fd9\u5927\u6982\u662f\u6211\u5199\u8fc7\u7684\u9664\u4e86\u6811\u5256\u4ee5\u5916\u6700\u957f\u7684\u4ee3\u7801\u4e86\u5427\n\n\u9996\u5148\u770b\u5230\u6709\u5411\u56fe\u548c\u91cd\u590d\u7ecf\u8fc7\u7b49\u654f\u611f\u8bcd\u5e94\u8be5\u80fd\u60f3\u5230\u5148tarjan\u540e\u7f29\u70b9\u4e86\u5427\n\n\u9996\u5148\u6709\u4e00\u4e2anaive\u7684\u60f3\u6cd5\uff0c\u65e2\u7136\u6211\u4eec\u8981\u6c42\u53ea\u80fd\u8d70\u4e00\u6b21\u8fd4\u56de\u539f\u70b9\uff0c\u90a3\u6211\u4eec\u5c31\u6b63\u7740\u53cd\u7740\u5efa\u4e24\u904d\u56fe\uff0c\u5206\u522b\u5904\u7406\u51fa1\u5230\u5176\u4ed6\u70b9\u7684\u6240\u80fd\u7ecf\u8fc7\u7684\u6700\u591a\u70b9\u6570\u548c\u5176\u4ed6\u70b9\u52301\u7ecf\u8fc7\u7684\u6700\u5927\u70b9\u6570\uff0c\u4e4b\u540e\u627e\u5230\u90a3\u4e9b\u548c1\u6709\u6b63\u8fb9\u6216\u53cd\u8fb9\u76f8\u8fde\u7684\u70b9\uff0c\u4e4b\u540e\u9006\u884c\u8fd9\u4e00\u6761\u8fb9\uff0c\u53d6\u4e00\u4e2amax\u5c31\u597d\u4e86\n\n\u4e8e\u662f\u6d0b\u6d0b\u6d12\u6d12\u5199\u4e86100\u591a\u884c\u53d1\u73b0\u8fde\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\n\n\u672c\u7740\u4ea4\u4e00\u4ea4\u8bd5\u8bd5\u770b\u7684\u5fc3\u6001\u4ea4\u4e86\u4e0a\u53bb\uff0c\u53d1\u73b0\u8fd8\u80fd\u8fc7\u56db\u4e2a\u70b9\n\n\u4e8e\u662f\u5c31\u53bb\u624b\u753b\u4e86\u4e00\u904d\u6837\u4f8b\uff0c\u53d1\u73b0\u81ea\u5df1\u771f\u7684\u662f\u975e\u5e38naive\n\n\u6837\u4f8b\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\n\n![\u6837\u4f8b](https://cdn.luogu.com.cn/upload/pic/21842.png)\n\n\u5c3d\u7ba1\u5f88\u4e11\uff0c\u4f46\u5c31\u52c9\u5f3a\u770b\u770b\u5427\n\n\u6211\u4eec\u53d1\u73b0\u6309\u7167\u521a\u624d\u90a3\u4e2a\u601d\u8def\u6211\u4eec\u663e\u7136\u662f\u8981\u6302\u7684\n\n\u56e0\u4e3a\u6309\u7167\u90a3\u6837\u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u662f4\uff0c\u4f46\u8fd9\u91cc\u7684\u6700\u4f73\u65b9\u6848\u5e94\u8be5\u662f\u4ece1\u5230\u90a3\u4e2a\u7f29\u597d\u7684\u70b9\u518d\u52305\uff0c\u4e4b\u540e\u9006\u884c\u4e00\u6b21\u8d70\u52303\uff0c\u4e4b\u540e\u8d70\u56de1\n\n\u8fd9\u6837\u6211\u4eec\u5982\u679c\u53ea\u8003\u8651\u80fd\u5230\u52301\u7684\u6216\u53ea\u8003\u8651\u80fd\u88ab1\u5230\u8fbe\u7684\uff0c\u663e\u7136\u662f\u4e0d\u884c\u7684\n\n\u8fd9\u6837\u4e0d\u884c\u600e\u4e48\u529e\uff0c\u6211\u4eec\u653e\u5230\u4e00\u8d77\u8003\u8651\u5c31\u597d\u4e86\n\n\u5982\u679c\u4e00\u4e2a\u80fd\u88ab1\u5230\u8fbe\u7684\u70b9\uff08\u6bd4\u5982\u8bf4\u6837\u4f8b\u91cc\u76845\uff09\u6709\u4e00\u6761\u8fb9\uff08\u5f53\u7136\u8fd9\u662f\u4e00\u6761\u53cd\u8fb9\uff09\u80fd\u5230\u8fbe\u4e00\u4e2a\u80fd\u5230\u8fbe1\u7684\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e00\u8d77\u8003\u8651\n\n\u540c\u7406\u4e00\u4e2a\u80fd\u5230\u8fbe1\u7684\u70b9\u6709\u4e00\u6761\u8fb9\uff08\u81ea\u7136\u8fd9\u662f\u4e00\u6761\u6b63\u8fb9\uff09\u548c\u4e00\u4e2a\u80fd\u88ab1\u5230\u8fbe\u7684\u70b9\u76f8\u8fde\uff0c\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e5f\u53ef\u4ee5\u4e00\u8d77\u8003\u8651\n\n\u6240\u4ee5\u5c31\u662f\u4ee3\u7801\u4e86\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<bitset>\n#define re register\n#define maxn 100001\nusing namespace std;\nstruct node\n{\n\tint v,nxt;\n}e[maxn],e1[maxn],e2[maxn];\nint head[maxn],head1[maxn],head2[maxn];\nint dfn[maxn],low[maxn],st[maxn],belong[maxn],dp1[maxn],d[maxn],dp2[maxn];\nint f1[maxn],f2[maxn];\nint q[maxn],r[maxn],c[maxn];\nbitset<maxn> f;//\u95f2\u7684\u6ca1\u4e8b\u5e72\u5f00\u4e86bitset\nint n,m,top,k,p,num,num1,num2,mid;\ninline void add_edge(int x,int y)\n{\n\te[++num].v=y;\n\te[num].nxt=head[x];\n\thead[x]=num;\n}//\u539f\u56fe\ninline void add_edge_1(int x,int y)\n{\n\te1[++num1].v=y;\n\te1[num1].nxt=head1[x];\n\thead1[x]=num1;\n}//\u7f29\u70b9\u540e\u65b0\u56fe\u5efa\u6b63\u8fb9\ninline void add_edge_2(int x,int y)\n{\n\te2[++num2].v=y;\n\te2[num2].nxt=head2[x];\n\thead2[x]=num2;\n}//\u7f29\u70b9\u540e\u65b0\u56fe\u5efa\u53cd\u8fb9\ninline int read()\n{\n\tchar c=getchar();\n\tint x=0;\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9')\n\t  x=(x<<3)+(x<<1)+c-48,c=getchar();\n\treturn x;\n}\nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=++k;\n\tf[x]=1;\n\tst[++top]=x;\n\tfor(re int i=head[x];i;i=e[i].nxt)\n\tif(!dfn[e[i].v]) tarjan(e[i].v),low[x]=min(low[x],low[e[i].v]);\n\telse if(f[e[i].v]) low[x]=min(low[x],dfn[e[i].v]);\n\tif(dfn[x]==low[x])\n\t{\n\t\tp++;\n\t\tdo\n\t\t{\n\t\t\tmid=st[top--];\n\t\t\tf[mid]=0;\n\t\t\td[p]++;//\u8bb0\u5f55\u65b0\u70b9\u70b9\u6743\n\t\t\tbelong[mid]=p;//\u8bb0\u5f55\u597d\u6bcf\u4e00\u4e2a\u70b9\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u7f29\u5b8c\u70b9\u540e\u7684\u65b0\u70b9\n\t\t}while(x!=mid);\n\t}\n}\nint main()\n{\n\tn=read();\n\tm=read();\n\tint x,y;\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tx=read();\n\t\ty=read();\n\t\tadd_edge(x,y);\n\t}\n\tfor(re int i=1;i<=n;i++)\n\tif(!dfn[i]) tarjan(i);//\u7f29\u70b9\uff01\n\tfor(re int i=1;i<=n;i++)\n\tfor(re int j=head[i];j;j=e[j].nxt)\n\tif(belong[i]!=belong[e[j].v]) \n\t{\n\t\tr[belong[e[j].v]]++,add_edge_1(belong[i],belong[e[j].v]);//\u5efa\u6b63\u56fe\n\t\tc[belong[i]]++,add_edge_2(belong[e[j].v],belong[i]);//\u5efa\u53cd\u56fe\n\t}\n\tf[belong[1]]=1;//\u6211\u4eec\u5f00\u4e00\u4e2a\u6807\u8bb0\u6570\u7ec4,\u6807\u8bb0\u90a3\u4e9b\u70b9\u53ef\u4ee5\u88ab1\u5230\u8fbe,\u62d3\u6251\u6392\u5e8f\u7684\u65f6\u5019\u53ea\u6709\u8fd9\u4e9b\u70b9\u624d\u8fdb\u884c\u52a8\u89c4,\u5176\u4f59\u7684\u70b9\u53ea\u505a\u5220\u8fb9\u64cd\u4f5c\n\tdp1[belong[1]]=d[belong[1]];\n\tint tot=0;\n\tfor(re int i=1;i<=p;i++)\n\tif(!r[i]) q[++tot]=i;\n\tfor(re int i=1;i<=tot;i++)\n\t{\n\t\tfor(re int j=head1[q[i]];j;j=e1[j].nxt)\n\t\t{\n\t\t\tr[e1[j].v]--;\n\t\t\tif(f[q[i]])\n\t\t\t{\n\t\t\t\tf[e1[j].v]=1;\n\t\t\t\tdp1[e1[j].v]=max(dp1[e1[j].v],dp1[q[i]]+d[e1[j].v]);\n                //dp1[i]\u8868\u793a\u4ece1\u5230i\u5f62\u6210\u7684\u6700\u5927\u70b9\u6743\n\t\t\t}\n\t\t\tif(!r[e1[j].v]) q[++tot]=e1[j].v;\n\t\t}\n\t}\n\tint ans=0;\n\tfor(re int i=head1[belong[1]];i;i=e1[i].nxt)\n\t\tans=max(ans,dp1[e1[i].v]);\n\tfor(re int i=1;i<=p;i++)\n\t\tf1[i]=f[i];//\u8bb0\u5f55\u90a3\u4e9b\u70b9\u53ef\u4ee5\u88ab1\u5230\u8fbe\n\ttot=0;\n\tmemset(q,0,sizeof(q));\n\tf.reset();//bitset\u6e05\u96f6\n\tf[belong[1]]=1;//\u6807\u8bb0\u540c\u7406\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe1\n\tdp2[belong[1]]=d[belong[1]];\n\tfor(re int i=1;i<=p;i++)\n\tif(!c[i]) q[++tot]=i;\n\tfor(re int i=1;i<=tot;i++)\n\t{\n\t\tfor(re int j=head2[q[i]];j;j=e2[j].nxt)\n\t\t{\n\t\t\tc[e2[j].v]--;\n\t\t\tif(f[q[i]])\n\t\t\t{\n\t\t\t\tf[e2[j].v]=1;\n\t\t\t\tdp2[e2[j].v]=max(dp2[e2[j].v],dp2[q[i]]+d[e2[j].v]);\n                //dp2[i]\u8868\u793ai\u8fd9\u4e2a\u70b9\u52301\u5f62\u6210\u7684\u6700\u5927\u70b9\u6743\n\t\t\t}\n\t\t\tif(!c[e2[j].v]) q[++tot]=e2[j].v;\n\t\t}\n\t}\n\tfor(re int i=head2[belong[1]];i;i=e2[i].nxt)\n\t\tans=max(ans,dp2[e2[i].v]);\n\tfor(re int i=1;i<=p;i++)\n\t\tf2[i]=f[i];//\u8bb0\u5f55\u90a3\u4e9b\u70b9\u53ef\u4ee5\u5230\u8fbe1\n\tfor(re int i=1;i<=p;i++)\n\tif(f1[i])//\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u88ab1\u5230\u8fbe\n\t{\n\t\tfor(re int j=head2[i];j;j=e2[j].nxt)//\u9006\u884c\u4e00\u6b21\n\t\tif(f2[e2[j].v]) ans=max(ans,dp1[i]+dp2[e2[j].v]-d[belong[1]]);//\u7531\u4e8e\u4e24\u6b21dp\u90fd\u628a1\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7684\u70b9\u6743\u7b97\u4e86\u8fdb\u53bb\uff0c\u6240\u4ee5\u8981\u51cf\u53bb\u4e00\u4e2a1\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7684\u70b9\u6743\n\t}\n\tfor(re int i=1;i<=p;i++)\n\tif(f2[i])\n\t{\n\t\tfor(re int j=head1[i];j;j=e1[j].nxt)\n\t\tif(f1[e1[j].v]) ans=max(ans,dp2[i]+dp1[e1[j].v]-d[belong[1]]);\n\t}//\u540c\u7406\n\tans=max(d[belong[1]],ans);//\u5982\u679c\u4e00\u8c01\u90fd\u5230\u8fbe\u4e0d\u4e86\uff0c\u8c01\u4e5f\u5230\u4e0d\u4e86\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f1\u7684\u70b9\u6743\u4e86\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1530252952,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e00\u5f00\u59cb\u4e00\u76f4\u4ee5\u4e3a\u7f29\u70b9\u4ee5\u540e\u662f\u6811\uff0c\u5c31\u60f3\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u8d2a\u5fc3\u3002\u6240\u4ee5\u770b\u9898\u60f3\u9898\u8fd8\u662f\u8981\u628a\u7ec6\u8282\u90fd\u60f3\u5168\u3002\n\nsolution\uff1a\u8fd9\u9898\u7684\u7f29\u70b9\u8fd8\u662f\u633a\u663e\u7136\u7684\u3002\u8003\u8651\u7f29\u70b9\u4ee5\u540e\u7684dag\u3002\u4f60\u53ef\u4ee5\u53d1\u73b0\uff1a\u6700\u7ec8\u7684\u4e00\u6761\u8def\u5f84\u4e00\u5b9a\u662f\u7531\u3002 1\u53f7\u70b9\u6240\u5728\u8054\u901a\u5757->k\u53f7\u70b9\u6240\u5728\u8054\u901a\u5757->\u7ecf\u8fc7\u4e00\u6761\u53cd\u5411\u8fb9->1\u53f7\u70b9\u6240\u5728\u8054\u901a\u5757\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9884\u5904\u7406\u51fa\u6765\u539f\u56fe\u548c\u53cd\u56fe\u7684\u6700\u957f\u8def\uff08\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u5927\u5c0f\u4f5c\u4e3a\u70b9\u6743\uff09\u3002\u6700\u540e\u679a\u4e3e\u53cd\u5411\u7684\u8fb9\uff0c\u8ba1\u7b97\u51fa\u8d21\u732e\u3002\n\ntip:\u7b97\u8d21\u732e\u7684\u65f6\u5019\u6ce8\u610f\u53bb\u6389\u91cd\u590d\u7684\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int maxn=100005;\nstruct edge{\n\tint link,next;\n}e[maxn],E[maxn];\nint n,m,head[maxn],H[maxn],tot;\ninline int read(){int x=0,f=1,ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void add_edge(int u,int v){\n\te[++tot]=(edge){v,head[u]}; head[u]=tot;\n}\ninline void init(){\n\tn=read(); m=read();\n\tfor (int i=1;i<=m;i++){\n\t\tint u,v;\n\t\tu=read(); v=read();\n\t\tadd_edge(u,v);\n\t}\n}\nbool instack[maxn];\nint size[maxn],belong[maxn],dfn[maxn],tim,scc,low[maxn],top,stack[maxn];\ninline void pop(){\n\tsize[scc]++; belong[stack[top]]=scc; instack[stack[top--]]=0;\n}\nvoid tarjan(int u){\n\tdfn[u]=low[u]=++tim; stack[++top]=u; instack[u]=1;\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}else{\n\t\t\tif (instack[v]) low[u]=min(low[u],dfn[v]);\n\t\t}\n\t}\n\tif (low[u]==dfn[u]){\n\t\tscc++;\n\t\twhile (stack[top]!=u) pop();\n\t\tpop();\n\t}\n}\ninline void Add(int u,int v){\n\tE[++tot]=(edge){v,H[u]}; H[u]=tot;\n}\ninline void build(){\n\ttot=0;\n\tfor (int u=1;u<=n;u++){\n\t\tfor (int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].link;\n\t\t\tif (belong[u]!=belong[v]){\n\t\t\t\tAdd(belong[u],belong[v]);\n\t\t\t}\n\t\t}\n\t}\n}\nint q[maxn],h,t,dis1[maxn],dis2[maxn],vis[maxn];\ninline void spfa(int *dis){\n\tmemset(dis,0,sizeof(dis)); \n\tmemset(vis,0,sizeof(vis));\n\tdis[belong[1]]=size[belong[1]];\n\tvis[belong[1]]=1; q[1]=belong[1]; h=0; t=1;\n\twhile (h<t){\n\t\tint u=q[++h];\n\t\tfor (int i=H[u];i;i=E[i].next){\n\t\t\tint v=E[i].link;\n\t\t\tif (dis[v]<dis[u]+size[v]){\n\t\t\t\tdis[v]=dis[u]+size[v];\n\t\t\t\tif (!vis[v]){\n\t\t\t\t\tq[++t]=v;\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[u]=0;\n\t}\n}\ninline void rebuild(){\n\ttot=0;\n\tmemset(H,0,sizeof(H));\n\tfor (int u=1;u<=n;u++){\n\t\tfor (int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].link;\n\t\t\tif (belong[u]!=belong[v]){\n\t\t\t\tAdd(belong[v],belong[u]);\n\t\t\t} \n\t\t}\n\t}\n}\nint ans;\ninline void solve(){\n\tfor (int i=1;i<=n;i++){\n\t\tif (!dfn[i]){\n\t\t\ttarjan(i);\n\t\t}\n\t}\n\tbuild();\n\tspfa(dis1);\n\trebuild();\n\tspfa(dis2);\n\tfor (int u=1;u<=n;u++){\n\t\tfor (int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].link;\n\t\t\tif (dis2[belong[u]]&&dis1[belong[v]]){\n\t\t\t\tans=max(ans,dis2[belong[u]]+dis1[belong[v]]-size[belong[1]]);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n}\nint main(){\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```\n",
        "postTime": 1522657961,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u53cd\u5e94\uff0c\u5148tarjan\u7f29\u70b9\u3002\u4e4b\u540e\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u6ca1\u6709\u73af\u7684\u65b0\u56fe\u3002\n \n\u5982\u679c\u4e0d\u8d70\u9006\u5411\u8fb9\uff0c\u90a3\u4e48\u4ece1\u51fa\u53d1\u56de\u52301\uff0c\u65b0\u56fe\u6ca1\u6709\u73af\uff0c\u8d70\u8fc7\u7684\u70b9\u6570\u5c31\u662f\u539f\u56fe1\u6240\u5728\u7684\u73af\u70b9\u7684\u6570\u76ee\n \n\u4f46\u662f\u6211\u4eec\u53c8\u4e00\u6b21\u8d70\u9006\u5411\u8fb9\u7684\u673a\u4f1a\uff0c\u6240\u4ee5\u5728\u6ca1\u6709\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3b\u52a8\u5236\u9020\u4e00\u4e2a\u73af\n \n \n \n\u8003\u8651\u5982\u4f55\u5236\u9020\u4e00\u4e2a\u73af\uff1f\n \n\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u8d70\u53cd\u5411\u8fb9\uff0c\u5047\u8bbe\u5bf9\u4e8e\u8fb9j\u53cd\u5411\u5f97\u5230\u4e86\u4e00\u4e2a\u73af\u3002\n \n\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u5728\u8fd9\u91cc\u7531\u73af\u65ad\u4e3a\u4e24\u6761\u94fe \n \n\u94fe\u4e2d\u5b58\u5728\u4e24\u79cd\u70b9 \uff1a\u4e00\u4e2a\u662f1\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9 \uff0c \u53e6\u4e00\u79cd\u662f\u53ef\u4ee5\u5230\u8fbe1\u7684\u70b9\n \n\u5bf9\u4e8e\u8fd9\u4e2a\u53ef\u4ee5\u7528\u62d3\u6251\u6392\u5e8f\u5904\u7406\u51fa\u6765\uff08\u9884\u5904\u7406\u65f6\u8981\u6ce8\u610f\u7ec6\u8282\uff0c\u8be6\u89c1\u4ee3\u7801\uff09\n \n \n \n\u8003\u8651\u600e\u6837\u5f97\u5230\u7b54\u6848\uff1a\n \n\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u67d0\u4e00\u6761\u8fb9\uff0c\u628a\u5b83\u53cd\u5411\uff0c\n \nans=\u4ece1\u5230\u6b64\u8fb9\u4e00\u70b9\u7684\u6570\u76ee+\u53e6\u4e00\u70b9\u52301\u7684\u70b9\u7684\u6570\u76ee-1\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u70b9\u7684\u6570\u76ee(\u56e0\u4e3a\u8fd9\u4e2a\u73af\u88ab\u52a0\u4e86\u4e24\u6b21)\n\u4ee3\u7801\u89c1\u535a\u5ba2\n[\u5b89\u7136\u6d41\u9999](http://www.cnblogs.com/adelalove/p/8490391.html)\n",
        "postTime": 1519907830,
        "uid": 36397,
        "name": "\u6c89\u8fb0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3119 \u3010[USACO15JAN]\u8349\u9274\u5b9aGrass Cownoisseur\u3011"
    }
]