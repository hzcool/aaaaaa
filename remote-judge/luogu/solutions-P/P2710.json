[
    {
        "content": "## \u3010\u9898\u610f\u3011\n\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\n\n\u652f\u6301\u63d2\u5165\u3001\u5220\u9664\u3001\u7ffb\u8f6c\u3001\u8986\u76d6\u3001\u6c42\u548c\u3001\u6c42\u6700\u5927\u5b50\u6bb5\u548c\u64cd\u4f5c\n## \u3010\u5206\u6790\u3011\n\u7ecf\u5178\u6570\u636e\u7ed3\u6784\u9898\n\n\u6ca1\u4ec0\u4e48\u601d\u7ef4\u96be\u5ea6\uff0c\u76f4\u63a5\u4e0a$fhq-treap$\u5427\n\n### \u660e\u786e\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\n\n\u7ffb\u8f6c\u548c\u8986\u76d6\uff0c\u9700\u8981\u6253\u4e24\u4e2a\u61d2\u6807\u8bb0\n\n\u6c42\u548c\u9700\u8981\u533a\u95f4\u548c\n\n\u6c42\u6700\u5927\u5b50\u6bb5\u548c\u9700\u8981\u533a\u95f4\u6700\u5927\u524d\u7f00\u3001\u6700\u5927\u540e\u7f00\u4e0e\u6700\u5927\u5b50\u6bb5\u548c\n\n\u8fd8\u6709\u968f\u673a\u952e\u503c\u3001\u533a\u95f4\u5927\u5c0f\u3001\u5de6\u53f3\u5b50\u6811\n\n```cpp\nstruct fhq_treap{\n\tint rand,siz,rev,cov,son[2],val;\n\tLL max,s,l,r;\n}t[maxt];\n\n```\n\n### \u4e0a\u4f20\u4fe1\u606f\u3001\u4e0b\u53d1\u6807\u8bb0\n\n\u7ebf\u6bb5\u6811\u548c\u5e73\u8861\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u6bd4\u8f83\u5957\u8def\n\n```cpp\nIN void pushup(RE int k){\n\tt[k].siz=t[ls].siz+t[rs].siz+1;\n\tt[k].s=t[ls].s+t[rs].s+t[k].val;\n\tt[k].l=max(t[ls].l,max(0ll,t[ls].s+t[k].val+t[rs].l));\n\tt[k].r=max(t[rs].r,max(0ll,t[rs].s+t[k].val+t[ls].r));\n\tt[k].max=max((LL)t[k].val,t[ls].r+t[k].val+t[rs].l);\n\tif(ls) t[k].max=max(t[k].max,t[ls].max);\n\tif(rs) t[k].max=max(t[k].max,t[rs].max);\n}\n```\n```cpp\nIN void pushdown(RE int k){\n\tif(t[k].cov!=INF){\n\t\tLL c=t[k].cov;\n\t\tif(ls) cov(ls,c);\n\t\tif(rs) cov(rs,c);\n\t\tt[k].cov=INF;\n\t}\n\tif(t[k].rev){\n\t\tif(ls) rev(ls);\n\t\tif(rs) rev(rs);\n\t\tt[k].rev=0;\n\t}\n}\n```\n### fhq-treap\u5408\u5e76\u3001\u5206\u88c2\u677f\u5b50\n```cpp\nint merge(RE int x,RE int y){\n\tif(!x||!y) return x+y;\n\tif(t[x].rand<t[y].rand){\n\t\tpushdown(x);\n\t\tt[x].son[1]=merge(t[x].son[1],y);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n\telse{\n\t\tpushdown(y);\n\t\tt[y].son[0]=merge(x,t[y].son[0]);\n\t\tpushup(y);\n\t\treturn y;\n\t}\n}\n```\n```cpp\nvoid splits(RE int now,RE int k,RE int &x,RE int &y){\n\tif(!now){\n\t\tx=y=0;\n\t\treturn;\n\t}\n\tpushdown(now);\n\tif(k<=t[t[now].son[0]].siz){\n\t\ty=now;\n\t\tsplits(t[y].son[0],k,x,t[y].son[0]);\n\t\tpushup(y);\n\t}\n\telse{\n\t\tx=now;\n\t\tsplits(t[x].son[1],k-t[t[x].son[0]].siz-1,t[x].son[1],y);\n\t\tpushup(x);\n\t}\n\tpushup(now);\n}\n```\n### \u63d2\u5165\u4e0e\u5220\u9664\n\n\u63d2\u5165\u4eff\u7167\u7ebf\u6bb5\u6811\u5efa\u6811\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u9010\u4e2a\u63d2\u5165\uff0c\u53ef\u4ee5\u66f4\u5e73\u8861\n\n\u5220\u70b9\u65f6\u628a\u6ca1\u7528\u7684\u70b9\u5b58\u5165\u6808\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\n```cpp\nIN int build(RE int k){\n\tRE int now=top?stk[top--]:++cnt;\n\tt[now].rand=rand();\n\tt[now].cov=INF;\n\tt[now].rev=0;\n\tt[now].son[0]=t[now].son[1]=0;\n\tt[now].max=t[now].s=t[now].val=k;\n\tt[now].l=t[now].r=max(k,0);\n\tt[now].siz=1;\n\treturn now;\n}\nint build(RE int l,RE int r){\n\tif(l==r) return build(read());\n\tint x=build(l,mid),y=build(mid+1,r);\n\treturn merge(x,y);\n}\n```\n```cpp\nvoid del(RE int k){\n\tif(ls) del(ls);\n\tif(rs) del(rs);\n\tstk[++top]=k;\n}\nIN void del(RE int l,RE int r){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\tdel(y);\n\trt=merge(x,z);\n}\n```\n### \u8986\u76d6\u4e0e\u7ffb\u8f6c\n\n\u5206\u79bb\u51fa\u5f85\u64cd\u4f5c\u533a\u95f4\uff0c\u7136\u540e\u6253\u4e0a\u6807\u8bb0\uff0c\u987a\u4fbf\u66f4\u65b0\u4fe1\u606f\n```cpp\nIN void cov(RE int k,RE int c){\n\tt[k].cov=t[k].val=c;\n\tt[k].s=(LL)t[k].siz*c;\n\tt[k].l=t[k].r=max(0ll,t[k].s);\n\tt[k].max=max((LL)c,t[k].s);\n}\n\nIN void cover(RE int l,RE int r,RE int c){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\tcov(y,c);\n\trt=merge(merge(x,y),z);\n}\n```\n```cpp\nIN void rev(RE int k){\n\tif(!k) return;\n\tswap(t[k].l,t[k].r);\n\tswap(t[k].son[0],t[k].son[1]);\n\tt[k].rev^=1;\n}\nIN void reverse(RE int l,RE int r){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\trev(y);\n\trt=merge(merge(x,y),z);\n}\n```\n### \u8be2\u95ee\n\n\u5206\u79bb\u51fa\u533a\u95f4\u8f93\u51fa\u5373\u53ef\n```cpp\nIN LL query(RE int l,RE int r){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\tRE LL ret=t[y].s;\n\trt=merge(merge(x,y),z);\n\treturn ret;\n}\n```\n```cpp\nIN LL maxs(RE int l,RE int r){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\tLL ret=t[y].max;\n\trt=merge(merge(x,y),z);\n\treturn ret;\n}\n```\n## \u7b97\u6cd5\nfhq-treap\n## \u63d0\u9192\n\u7ec6\u8282\u591a\uff0c\u4ee3\u7801\u957f\n\n\u4ee5\u4e0b\u51e0\u4e2a\u5730\u65b9\u503c\u5f97\u6ce8\u610f\n\n> \u7ffb\u8f6c\u65f6\u8981\u4ea4\u6362\u6700\u5927\u524d\u7f00\u548c\u6700\u5927\u540e\u7f00\n\n\n> \u4e0b\u4f20\u6807\u8bb0\u65f6\uff0c\u5148\u8986\u76d6\u518d\u7ffb\u8f6c\n\n\n> \u5efa\u6811\u65f6\uff0c\u5148\u63d0\u53d6\u51fa\u5b50\u6811\u518d\u5408\u5e76\uff0c\u4e0d\u80fd\u5199\u6210\u8fd9\u6837\uff0c\u5426\u5219\u4f1a\u6709\u610f\u60f3\u4e0d\u5230\u7684\u9519\u8bef\n```cpp\nmerge(build(l,mid),build(mid+1,r))\n```\n\n\n> \u82e5\u6ca1\u6709\u8986\u76d6\u6807\u8bb0\u65f6\uff0c\u61d2\u6807\u8bb0\u5e94\u8be5\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\u503c\uff0c\u8bbe\u6210-1,0\u4e4b\u7c7b\u7684\u5c31\u5b8c\u4e86\n\n\n> \u8bb0\u5f97\u5f00longlong\n\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\n#define ls t[k].son[0]\n#define rs t[k].son[1]\n#define mid (l+r>>1)\n#define IN inline\n#define RE register\nusing namespace std;\nconst int maxt=5e5+5,INF=1<<30;\nint n,m;\nint top,stk[maxt];\nint cnt,rt;\nchar z[15];\nstruct fhq_treap{\n\tint rand,siz,rev,cov,son[2],val;\n\tLL max,s,l,r;\n}t[maxt];\nIN int read(){\n\tRE int ret=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\nIN void rev(RE int k){\n\tif(!k) return;\n\tswap(t[k].l,t[k].r);\n\tswap(t[k].son[0],t[k].son[1]);\n\tt[k].rev^=1;\n}\nIN void cov(RE int k,RE int c){\n\tt[k].cov=t[k].val=c;\n\tt[k].s=(LL)t[k].siz*c;\n\tt[k].l=t[k].r=max(0ll,t[k].s);\n\tt[k].max=max((LL)c,t[k].s);\n}\nIN void pushup(RE int k){\n\tt[k].siz=t[ls].siz+t[rs].siz+1;\n\tt[k].s=t[ls].s+t[rs].s+t[k].val;\n\tt[k].l=max(t[ls].l,max(0ll,t[ls].s+t[k].val+t[rs].l));\n\tt[k].r=max(t[rs].r,max(0ll,t[rs].s+t[k].val+t[ls].r));\n\tt[k].max=max((LL)t[k].val,t[ls].r+t[k].val+t[rs].l);\n\tif(ls) t[k].max=max(t[k].max,t[ls].max);\n\tif(rs) t[k].max=max(t[k].max,t[rs].max);\n}\nIN void pushdown(RE int k){\n\tif(t[k].cov!=INF){\n\t\tLL c=t[k].cov;\n\t\tif(ls) cov(ls,c);\n\t\tif(rs) cov(rs,c);\n\t\tt[k].cov=INF;\n\t}\n\tif(t[k].rev){\n\t\tif(ls) rev(ls);\n\t\tif(rs) rev(rs);\n\t\tt[k].rev=0;\n\t}\n}\nvoid splits(RE int now,RE int k,RE int &x,RE int &y){\n\tif(!now){\n\t\tx=y=0;\n\t\treturn;\n\t}\n\tpushdown(now);\n\tif(k<=t[t[now].son[0]].siz){\n\t\ty=now;\n\t\tsplits(t[y].son[0],k,x,t[y].son[0]);\n\t\tpushup(y);\n\t}\n\telse{\n\t\tx=now;\n\t\tsplits(t[x].son[1],k-t[t[x].son[0]].siz-1,t[x].son[1],y);\n\t\tpushup(x);\n\t}\n\tpushup(now);\n}\nint merge(RE int x,RE int y){\n\tif(!x||!y) return x+y;\n\tif(t[x].rand<t[y].rand){\n\t\tpushdown(x);\n\t\tt[x].son[1]=merge(t[x].son[1],y);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n\telse{\n\t\tpushdown(y);\n\t\tt[y].son[0]=merge(x,t[y].son[0]);\n\t\tpushup(y);\n\t\treturn y;\n\t}\n}\nIN int build(RE int k){\n\tRE int now=top?stk[top--]:++cnt;\n\tt[now].rand=rand();\n\tt[now].cov=INF;\n\tt[now].rev=0;\n\tt[now].son[0]=t[now].son[1]=0;\n\tt[now].max=t[now].s=t[now].val=k;\n\tt[now].l=t[now].r=max(k,0);\n\tt[now].siz=1;\n\treturn now;\n}\nvoid del(RE int k){\n\tif(ls) del(ls);\n\tif(rs) del(rs);\n\tstk[++top]=k;\n}\nint build(RE int l,RE int r){\n\tif(l==r) return build(read());\n\tint x=build(l,mid),y=build(mid+1,r);\n\treturn merge(x,y);\n}\nIN void del(RE int l,RE int r){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\tdel(y);\n\trt=merge(x,z);\n}\nIN void cover(RE int l,RE int r,RE int c){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\tcov(y,c);\n\trt=merge(merge(x,y),z);\n}\nIN void reverse(RE int l,RE int r){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\trev(y);\n\trt=merge(merge(x,y),z);\n}\nIN LL query(RE int l,RE int r){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\tRE LL ret=t[y].s;\n\trt=merge(merge(x,y),z);\n\treturn ret;\n}\nIN LL maxs(RE int l,RE int r){\n\tRE int x,y,z;\n\tsplits(rt,r,x,z);\n\tsplits(x,l-1,x,y);\n\tLL ret=t[y].max;\n\trt=merge(merge(x,y),z);\n\treturn ret;\n}\nint main(){\n\tfreopen(\"P2710.in\",\"r\",stdin);\n\tfreopen(\"P2710.out\",\"w\",stdout);\n\tn=read(),m=read();\n\trt=build(1,n);\n\tfor(RE int i=1;i<=m;i++){\n\t\tscanf(\"%s\",z);\n\t\tif(z[0]=='I'){\n\t\t\tRE int pos=read(),tot=read();\n\t\t\tRE int x,y;\n\t\t\tsplits(rt,pos,x,y);\n\t\t\trt=merge(merge(x,build(pos,pos+tot-1)),y);\n\t\t}else\n\t\tif(z[0]=='D'){\n\t\t\tRE int pos=read(),tot=read();\n\t\t\tdel(pos,pos+tot-1);\n\t\t}else\n\t\tif(z[0]=='R'){\n\t\t\tRE int pos=read(),tot=read();\n\t\t\treverse(pos,pos+tot-1);\n\t\t}else\n\t\tif(z[2]=='K'){\n\t\t\tRE int pos=read(),tot=read(),c=read();\n\t\t\tcover(pos,pos+tot-1,c);\n\t\t}else\n\t\tif(z[1]=='A'){\n\t\t\tRE int pos=read(),tot=read();\n\t\t\tprintf(\"%lld\\n\",maxs(pos,pos+tot-1));\n\t\t}else\n\t\tif(strlen(z)>4){\n\t\t\tRE int pos=read(),tot=read();\n\t\t\tprintf(\"%lld\\n\",query(pos,pos+tot-1));\n\t\t}\n\t\telse{\n \t\t\tRE int pos=read();\n\t\t\tprintf(\"%lld\\n\",query(pos,pos));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u6700\u540e\n\n# \u4fdd\u6301\u4e00\u4e2a\u5e73\u548c\u7684\u5fc3\u6001",
        "postTime": 1603689998,
        "uid": 116251,
        "name": "\u7834\u5fc6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2710 \u3010\u6570\u5217\u3011"
    },
    {
        "content": "\u849f\u84bb\u7684\u7b2c\u4e00\u9053$Splay$\u9ed1\u9898\uff0c\u5199\u4e00\u904d\u9898\u89e3\u6765\u590d\u4e60\u4e0b\u3002\n\n[R_h](https://www.cnblogs.com/h-lka/p/11516445.html)\n\n\u9898\u610f\u5f88\u660e\u663e\uff0c\u8981\u7ef4\u62a4\u8bb8\u591a\u533a\u95f4\u6709\u5173\u7684\u64cd\u4f5c\u3002\u5728$splay$\u4e2d\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u65b9\u6cd5\u4e5f\u662f\u548c\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a\uff0c\u53ef\u4ee5\u7ef4\u62a4\u6807\u8bb0\u7684\u3002\u8fd9\u91cc\u63d0\u4e00\u4e0b\uff1a\n\n\u5bf9\u4e8e\u533a\u95f4$[l,r]$\uff0c\u6211\u4eec\u8981\u5bf9\u5b83\u4eec\u8fdb\u884c\u64cd\u4f5c\uff0c\u9996\u5148\u662f\u8981\u5f97\u5230\u5b83\u4eec\uff08\u7aef\u70b9\uff09\u5728$splay$\u6811\u4e0a\u7684\u4f4d\u7f6e\uff0c\u5373\u4ee3\u7801\u4e2d\u7684$Kth$\u51fd\u6570\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u628a$l-1$\u8f6c\u5230\u6839\uff0c\n$r+1$\u8f6c\u5230\u6839\u7684\u53f3\u513f\u5b50\uff0c\u8fd9\u6837$r+1$\u7684\u5de6\u513f\u5b50\u5c31\u662f\u6211\u4eec\u8981\u8fdb\u884c\u64cd\u4f5c\u7684\u533a\u95f4\u4e86\u3002\n\n\u628a\u5b83\u4eec\u8f6c\u5316\u4e00\u4e0b\uff0c\u6211\u4eec\u8981\u65cb\u8f6c\u7684\u533a\u95f4\u5c31\u53d8\u6210\u4e86$[l,r+2]$.\n\n\u90a3\u4e00\u4e2a\u4e00\u4e2a\u64cd\u4f5c\u6765\u5427\u3002\n\n$Insert$\n\n\u55ef\uff0c\u7b14\u8005\u76f4\u63a5\u66b4\u529b\u4f9d\u6b21\u63d2\u5165\u7684\u3002\u5176\u5b9e\u8fd8\u6709\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u7b14\u8005\u5b66\u4e60\u4e2d\uff0c\u6709\u65f6\u95f4\u4f1a\u8865\u3002\u628a\u6bcf\u4e00\u4e2a\u8282\u70b9\u63d2\u5165\u5230$x+1$\u7684\u4f4d\u7f6e\u5c31\u597d\u4e86\u3002\n\n$Delete$\n\n\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u628a\u4e0a\u9762\u7684\u64cd\u4f5c\u533a\u95f4\uff08\u6ce8\u610f\u662f\u6211\u4eec\u7684\u64cd\u4f5c\u533a\u95f4\u800c\u4e0d\u662f\u9898\u76ee\u7ed9\u7684\u7f16\u53f7\uff09\u548c\u4e0a\u9762\u4e00\u6837\u64cd\u4f5c\uff0c\u4e4b\u540e\u628a$R$\u7684\u5de6\u5b50\u6811\u5220\u6389\u5c31\u884c\u4e86\u3002\n\n\u4e0b\u9762\uff0c\u5747\u4ee5$L=Kth(l),R=Kth(r+2)$\n\n$Reverse$\n\n$Splay$\u57fa\u672c\u64cd\u4f5c\uff0c\u76f4\u63a5\u5bf9\u8981\u4fee\u6539\u7684\u533a\u95f4\u6253\u4e0a\u6807\u8bb0\uff0c\u7ef4\u62a4\u4e00\u4e0b$pushup$\u548c$pushdown$\u5373\u53ef\u3002\u672c\u9898\u7ef4\u62a4\u7684\u6807\u8bb0\u5f88\u591a\uff0c\u6ce8\u610f\u4e00\u4e0b\u3002\n\n\u8fd9\u91cc\u4fee\u6539\u7684\u533a\u95f4\u4e5f\u50cf\u4e0a\u9762\u4e00\u6837\uff0c\u8f6c\u5230\u6839\u5728\u6253\u6807\u8bb0\u3002\n\n$MAKE-SAME$\n\n\u533a\u95f4\u8986\u76d6\uff0c\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\uff0c\u6ce8\u610f\u8fd9\u4e2a\u6807\u8bb0\u7684\u4f18\u5148\u7ea7\u6bd4$rev$\u9ad8\uff0c\u56e0\u4e3a\u533a\u95f4\u90fd\u8986\u76d6\u4e86\uff0c\u503c\u90fd\u4e00\u6837\u5c31\u6ca1\u5fc5\u8981\u7ffb\u8f6c\u4e86\u3002\n\n$GET-SUM$\n\n\u6811\u4e0a\u7ef4\u62a4\u533a\u95f4\u548c$sum$\u5373\u53ef\u3002\n\n$GET$\n\n\u5355\u70b9\u67e5\u8be2\uff0c\u76f4\u63a5\u8f93\u51fa$tr[Kth(x+1)].val$\u5373\u53ef\u3002\n\n$MAX-SUM$\n\n\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5e26\u4fee\u6539\uff0c\u672c\u9898\u96be\u70b9\u3002\n\n\u8fd9\u91cc\u5b66\u4e60\u4e00\u4e0b$nlogn$\u7684\u65b9\u6cd5\u3002\n\n\u6811\u4e0a\u7ef4\u62a4$ls,rs,ms$,\u5206\u522b\u8868\u793a\u524d\u7f00\u6700\u5927\u6bb5\u548c\uff0c\u540e\u7f00\u6700\u5927\u6bb5\u548c\u4ee5\u53ca\u672c\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5b83\u4eec\u4e86\u3002\u5177\u4f53\u770b\u4ee3\u7801\u5427\u3002\u5728$pushup$\u90e8\u5206\u3002\n\n$Code:$\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<string>\nusing namespace std;\nconst int inf=2147483647;\nint n,m,id,rt;\ninline int read(){\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-')w=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\ts=(s<<1)+(s<<3)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn s*w;\n}\nchar opt[20];\nstruct node{\n\tint ch[2],val,sum,rev;\n\tint tag,fa,ls,ms,rs,siz;\n}tr[500010];\ninline void swap(int &x,int &y){x^=y^=x^=y;}\ninline void pushup(int x){\n\tint lc=tr[x].ch[0],rc=tr[x].ch[1];\n\ttr[x].sum=tr[x].val+tr[lc].sum+tr[rc].sum;\n\ttr[x].siz=tr[lc].siz+tr[rc].siz+1;\n\ttr[x].ls=max(tr[lc].ls,tr[lc].sum+tr[x].val+tr[rc].ls);//\u6ce8\u610f\u5b50\u6bb5\u548c\u7684\u7ef4\u62a4 \n\ttr[x].rs=max(tr[rc].rs,tr[lc].rs+tr[rc].sum+tr[x].val);//\u53ef\u4ee5\u81ea\u5df1\u7406\u89e3\u4e00\u4e0b\uff0c\u6bd4\u8f83\u96be\u63cf\u8ff0 \n\ttr[x].ms=max(tr[lc].ms,max(tr[rc].ms,tr[lc].rs+tr[x].val+tr[rc].ls));\n\t//\u524d\u7f00\u5c31\u7b49\u4e8e\u5de6\u5b69\u5b50\u7684\u524d\u7f00 \u548c\u5de6\u5b69\u5b50\u7684\u5168\u90e8\u52a0\u4e0ax\u7684\u503c\u52a0\u4e0a\u53f3\u5b69\u5b50\u7684\u524d\u7f00\u7684max \n\t//\u540e\u7f00\u5c31\u7b49\u4e8e\u53f3\u5b69\u5b50\u7684\u540e\u7f00 \u548c\u5de6\u5b69\u5b50\u7684\u540e\u7f00\u52a0\u4e0ax\u7684\u503c\u52a0\u4e0a\u53f3\u5b69\u5b50\u7684\u5168\u90e8\u7684max\n\t//\u4e0a\u9762\u7684\u5168\u90e8\u5373sum\n\t//\u90a3\u4e48\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u5c31\u662f\u4ee3\u7801\u4e0a\u6240\u8bf4\u7684\n\t//\u7b49\u4e8e\u5de6\u5b69\u5b50\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u53f3\u5b69\u5b50\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5de6\u5b69\u5b50\u540e\u7f00\u52a0x\u7684\u503c\u52a0\u53f3\u5b69\u5b50\u524d\u7f00\u7684\u6700\u5927\u503c\u3002 \n} \ninline void pushdown(int x){\n\tint lc=tr[x].ch[0],rc=tr[x].ch[1];\n\tif(tr[x].tag!=-inf){\n\t\tint p=tr[x].tag;\n\t\tif(lc){\n\t\t\ttr[lc].val=tr[lc].tag=p;\n\t\t\ttr[lc].sum=p*tr[lc].siz;\n\t\t\tif(p>=0)tr[lc].ls=tr[lc].rs=tr[lc].ms=tr[lc].sum;\n\t\t\telse tr[lc].ls=tr[lc].rs=0,tr[lc].ms=p;\n\t\t}\n\t\tif(rc){\n\t\t\ttr[rc].val=tr[rc].tag=p;\n\t\t\ttr[rc].sum=p*tr[rc].siz;\n\t\t\tif(p>=0)tr[rc].ls=tr[rc].rs=tr[rc].ms=tr[rc].sum;\n\t\t\telse tr[rc].ls=tr[rc].rs=0,tr[rc].ms=p;\n\t\t}\n\t\ttr[x].tag=-inf,tr[x].rev=0;\n\t}\n\tif(tr[x].rev){\n\t\ttr[x].rev=0;\n\t\ttr[lc].rev^=1;\n\t\ttr[rc].rev^=1;\n\t\tswap(tr[lc].ls,tr[lc].rs);\n\t\tswap(tr[rc].ls,tr[rc].rs);\n\t\tswap(tr[lc].ch[0],tr[lc].ch[1]);\n\t\tswap(tr[rc].ch[0],tr[rc].ch[1]);\n\t}\n}\ninline void rotate(int x){\n\tint y=tr[x].fa,z=tr[y].fa,k=tr[y].ch[1]==x;\n\ttr[z].ch[tr[z].ch[1]==y]=x;tr[x].fa=z;\n\ttr[y].ch[k]=tr[x].ch[k^1];tr[tr[x].ch[k^1]].fa=y;\n\ttr[x].ch[k^1]=y;tr[y].fa=x;pushup(y);pushup(x);\n}\ninline void splay(int x,int g){\n\twhile(tr[x].fa!=g){\n\t\tint y=tr[x].fa,z=tr[y].fa;\n\t\tif(z!=g)\n\t\t\t(tr[y].ch[0]==x)^(tr[z].ch[0]==y)?rotate(x):rotate(y);\n\t\trotate(x);\n\t}\n\tif(!g)rt=x;\n}\ninline int Kth(int x){\n\tint u=rt;\n\tif(!x)return 0;\n\twhile(u){\n\t\tpushdown(u);\n\t\tint y=tr[u].ch[0];\n\t\tif(tr[y].siz>=x)u=y;\n\t\telse{\n\t\t\tx-=tr[y].siz+1;\n\t\t\tif(!x)return u;\n\t\t\tu=tr[u].ch[1];\n\t\t}\n\t}\n\treturn 0;\n}\ninline void Ins(int x,int val){\n\tint F=Kth(x);splay(F,0);\n\tint p=++id;\n\ttr[p].siz=1;tr[p].val=tr[p].sum=val;\n\ttr[p].ms=val;tr[p].rev=0;tr[p].tag=-inf;\n\ttr[p].fa=F;tr[p].siz=1;\n\tif(val>=0)tr[p].ls=tr[p].rs=val;\n\tif(F){\n\t\ttr[p].ch[1]=tr[F].ch[1];\n\t\ttr[tr[F].ch[1]].fa=p;\n\t\ttr[F].ch[1]=p;pushup(p);\n\t\tpushup(F);\n\t}\n\tsplay(p,0);\n}\ninline void change(int x,int y){\n\tint L=Kth(x),R=Kth(y+2);\n\tsplay(L,0);splay(R,L);\n\tint g=tr[R].ch[0];\n\tif(tr[g].tag==-inf){\n\t\ttr[g].rev^=1;\n\t\tswap(tr[g].ls,tr[g].rs);\n\t\tswap(tr[g].ch[0],tr[g].ch[1]);\n\t}\n\tpushup(R);pushup(L);\n}\ninline int Get(int x,int y){\n\tint L=Kth(x),R=Kth(y+2);\n\tsplay(L,0);splay(R,L);\n\treturn tr[tr[R].ch[0]].sum;\n}\ninline void Del(int x,int y){\n\tint L=Kth(x),R=Kth(y+2);\n\tsplay(L,0);splay(R,L);\n\ttr[R].ch[0]=0;\n\tpushup(R);pushup(L);\n}\ninline void Make(int x,int y,int z){\n\tint L=Kth(x),R=Kth(y+2);\n\tsplay(L,0);splay(R,L);\n\tint g=tr[R].ch[0];\n\ttr[g].val=z;tr[g].tag=z;\n\ttr[g].sum=tr[g].siz*z;\n\tif(z>=0)tr[g].ls=tr[g].rs=tr[g].ms=tr[g].sum;\n\telse tr[g].ls=tr[g].rs=0,tr[g].ms=z;\n\tpushup(R);pushup(L);\n}\ninline int Get_pos(int x){\n\treturn tr[Kth(x+1)].val;\n}\nint main(){\n\ttr[0].ms=-99999999;\n\tn=read(),m=read();\n\tIns(0,-99999999);\n\tfor(int i=1,x;i<=n;++i){\n\t\tscanf(\"%d\",&x);\n\t\tIns(i,x);\n\t}\n\tint x,y,l,r,tot;\n\tIns(n+1,-99999999);\n\twhile(m--){\n\t\tcin>>opt;\n\t\tif(opt[0]=='I'){\n\t\t\tx=read(),tot=read();\n\t\t\tfor(int i=1;i<=tot;++i){\n\t\t\t\tx++;\n\t\t\t\ty=read();\n\t\t\t\tIns(x,y);\n\t\t\t}\n\t\t}\n\t\telse if(opt[0]=='R'){\n\t\t\tl=read(),r=read();\n\t\t\tr=l+r-1;\n\t\t\tchange(l,r);\n\t\t}\n\t\telse if(opt[0]=='G'){\n\t\t\tif(strlen(opt)>4){\n\t\t\t\tl=read(),r=read();\n\t\t\t\tr=l+r-1;\n\t\t\t\tif(r<l){\n\t\t\t\t\tprintf(\"0\\n\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse printf(\"%d\\n\",Get(l,r));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=read();\n\t\t\t\tprintf(\"%d\\n\",Get_pos(x));\n\t\t\t}\n\t\t}\n\t\telse if(opt[0]=='D'){\n\t\t\tl=read(),r=read();\n\t\t\tr=l+r-1;\n\t\t\tDel(l,r);\n\t\t}\n\t\telse if(opt[0]=='M'){\n\t\t\tif(opt[2]=='K'){\n\t\t\t\tl=read(),r=read(),x=read();\n\t\t\t\tr=l+r-1;\n\t\t\t\tMake(l,r,x);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tl=read(),r=read();\n\t\t\t\tr=l+r-1;\n\t\t\t\tint L=Kth(l),R=Kth(r+2);\n\t\t\t\tsplay(L,0);splay(R,L);\n\t\t\t\tcout<<tr[tr[R].ch[0]].ms<<endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u7b14\u8005\u5bf9\u4e8e$Splay$\u7684\u8ba4\u8bc6\u4e5f\u4e0d\u591f\u5230\u4f4d\uff0c\u82e5\u6709\u9519\u8bef\u6216\u95ee\u9898\u8bf7\u8bc4\u8bba\u6307\u51fa\uff0c\u4e0d\u80dc\u611f\u6fc0\u3002",
        "postTime": 1568351205,
        "uid": 128591,
        "name": "Refined_heart",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2710 \u3010\u6570\u5217\u3011"
    },
    {
        "content": "\uff08\u8fd9\u662f\u4e2a[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P2042)\u5440\uff01\n### \u9898\u76ee\u63cf\u8ff0\n\u7ef4\u62a4\u4e00\u4e2a\u53ef\u4ee5\u652f\u6301\u63d2\u5165\u3001\u5220\u9664\u3001\u7ffb\u8f6c\u3001\u533a\u95f4\u8d4b\u503c\u3001\u6c42\u548c\u3001\u6c42\u503c\u548c\u6c42\u6700\u5927\u5b50\u6bb5\u548c\u64cd\u4f5c\u7684\u5e8f\u5217\u3002\uff08\u771f\u00b7\u7b80\u6d01\uff09\n\n### solution\n\u57fa\u672c\u4e0d\u7528\u4ec0\u4e48\u795e\u5947\u64cd\u4f5c\uff0c\u5e73\u8861\u6811\u786c\u4e0a\u5c31\u884c\u3002\uff08\u6211\u7528\u7684 Splay \uff09\n\n\u4e0d\u592a\u4e00\u6837\u7684\u662f\u5efa\u6811\u53ef\u4ee5\u6a21\u4eff\u7ebf\u6bb5\u6811\u5efa\u6cd5\uff08\u636e\u8bf4\u4f1a\u5feb\u4e00\u70b9\uff09\n\n------------\n\n\u5176\u4e2d\uff0c\n\n1.\u7ffb\u8f6c\uff0c\u533a\u95f4\u8d4b\u503c\u6765\u6253\u4e24\u79cd\u6807\u8bb0\u3002\n\n2.\u6c42\u6700\u5927\u5b50\u6bb5\u548c\u8981\u8bbe\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u6700\u5927\u524d\u7f00\u548c\u6700\u5927\u540e\u7f00\u4e09\u79cd\u53d8\u91cf\u3002\uff08\u4e0d\u592a\u6e05\u695a\u7684\u53ef\u4ee5\u5148\u53bb\u505a\u505a[\u5c0f\u9ca6\u901b\u516c\u56ed](https://www.luogu.com.cn/problem/P4513)\uff09\n\n------------\n\n\u518d\u6ce8\u610f\u4e00\u4e0b\uff0c\n\n1.\u4e0b\u4f20\u6807\u8bb0\u65f6\uff0c\u5148\u533a\u95f4\u8d4b\u503c\u518d\u7ffb\u8f6c\u3002\n\n\uff08\u56e0\u4e3a\u533a\u95f4\u8d4b\u503c\u6539\u53d8 $val$ \uff0c\u7ffb\u8f6c\u6539\u53d8 $id$ \uff0c $id$ \u8981\u5f71\u54cd $val$ \uff09\n\n2.\u7ffb\u8f6c\u65f6\uff0c\u6700\u5927\u524d\u7f00\u548c\u6700\u5927\u540e\u7f00\u8981\u4ea4\u6362\u3002\n\n\uff08\u56e0\u4e3a\u7ffb\u8f6c\u540e\uff0c\u540e\u9762\u7684\u5230\u4e86\u524d\u9762\uff0c\u524d\u9762\u7684\u5230\u4e86\u540e\u9762\uff0c\u987a\u5e8f\u6539\u53d8\u4e86\uff09\n\n3.\u5e73\u65f6\u8bb2\u7684\u628a\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u62c9\u51fa\u6765\u662f\u901a\u8fc7\u628a\u533a\u95f4\u5916\u524d\u9762\u7684\u7b2c\u4e00\u4e2a\u70b9\u62c9\u5230\u6839\u540e\u518d\u5c06\u533a\u95f4\u5916\u540e\u9762\u7684\u7b2c\u4e00\u4e2a\u70b9\u62c9\u5230\u6839\u53f3\u5b69\u5b50\u6811\u7684\u6839\u4e0a\u3002\n\n\u5b9e\u9645\u64cd\u4f5c\u65f6\u4e0b\u6807\u8981\u96c6\u4f53\u53f3\u79fb\u4e00\u4f4d\uff0c\u56e0\u4e3a\u5982\u679c\u533a\u95f4\u4e3a\u6574\u4e2a\u6570\u7ec4\u65f6\u8981\u628a $0$ \u62c9\u5230\u6839\u4e0a\u53bb\uff0c\u90a3\u4e0d\u5c31\u4e71\u4e86\u5417\uff01\n\n\u5176\u5b9e\u4e0a\u8ff0\u60c5\u51b5\u6253[\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3391)\u7684\u65f6\u5019\u5c31\u6709\u4e86\uff0c\u4f46\u518d\u6b21\u6ce8\u610f\u7684\u662f\u8fd9\u9898\u8f93\u5165\u7684 $posi$ \u548c $tot$ \u4e5f\u8981\u5728\u8868\u793a\u533a\u95f4\u7684\u65f6\u5019\u8fdb\u884c\u4e0b\u6807\u7684\u8f6c\u5316\u3002\n\n------------\n\n\u5177\u4f53\u7684\u770b\u770b\u4ee3\u7801\u5427\uff08\u9a6c\u8702\u53ef\u770b\uff0c\u6bd4\u8f83\u6e05\u5947\uff0c\u4f46\u662f\u957f\u6b7b\u4e86\uff0c\u6709\u70b9\u70e6\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define ls(i) spl[i].ch[0]//\u5de6\u5b69\u5b50\n#define rs(i) spl[i].ch[1]//\u53f3\u5b69\u5b50\n#define fa(i) spl[i].fa//\u7c91\u7c91\n#define val(i) spl[i].val//\u70b9\u6743\u503c\n#define num(i) spl[i].num//\u5b50\u6811\u6743\u503c\u548c\n#define siz(i) spl[i].siz//\u5b57\u6570\u5927\u5c0f\n#define lzy(i) spl[i].lzy//\u7ffb\u8f6c\u6807\u8bb0\n#define mdf(i) spl[i].mdf//\u533a\u95f4\u8d4b\u503c\u6807\u8bb0\n#define mx(i) spl[i].mx//\u6700\u5927\u5b50\u6bb5\u548c\n#define lmx(i) spl[i].lmx//\u6700\u5927\u524d\u7f00\n#define rmx(i) spl[i].rmx//\u6700\u5927\u540e\u7f00\n//\u770b\u628a\u5b69\u5b50\u903c\u7684\n#define reg register\nusing namespace std;\ntypedef long long ll;\nconst int N=1e6+10;\nconst int INF=0x3f3f3f3f;\nint n,m,root,cnt,a[N],id[N];\nchar s[24];\nqueue<int> que;\nstruct Splay{int ch[2],fa,val,num,siz,lzy,mdf,mx,lmx,rmx;}spl[N];\ninline int imax(int a,int b){return a>b?a:b;}\ninline int read(){\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n\treturn s*w;\n}\ninline void pushup(int now){\n\tsiz(now)=siz(ls(now))+siz(rs(now))+1;\n\tnum(now)=num(ls(now))+num(rs(now))+val(now);\n\tint plu=rmx(ls(now))+lmx(rs(now))+val(now);\n\tmx(now)=imax(imax(mx(ls(now)),mx(rs(now))),plu);\n\tlmx(now)=imax(lmx(ls(now)),lmx(rs(now))+num(ls(now))+val(now));\n\trmx(now)=imax(rmx(rs(now)),rmx(ls(now))+num(rs(now))+val(now));\n}\ninline void pushdown(int now){\n\tif(mdf(now)){\n\t\tmdf(now)=lzy(now)=0;\n\t\tif(ls(now)){\n\t\t\tmdf(ls(now))=1;val(ls(now))=val(now);\n\t\t\tnum(ls(now))=siz(ls(now))*val(ls(now));\n\t\t}\n\t\tif(rs(now)){\n\t\t\tmdf(rs(now))=1;val(rs(now))=val(now);\n\t\t\tnum(rs(now))=siz(rs(now))*val(rs(now));\n\t\t}\n\t\tif(val(now)>0){\n\t\t\tif(ls(now))mx(ls(now))=lmx(ls(now))=rmx(ls(now))=num(ls(now));\n\t\t\tif(rs(now))mx(rs(now))=lmx(rs(now))=rmx(rs(now))=num(rs(now));\n\t\t}\n\t\telse {\n\t\t\tif(ls(now))mx(ls(now))=val(ls(now)),lmx(ls(now))=rmx(ls(now))=0;\n\t\t\tif(rs(now))mx(rs(now))=val(rs(now)),lmx(rs(now))=rmx(rs(now))=0;\n\t\t}\n\t}\n\tif(lzy(now)){\n\t\tlzy(ls(now))^=1;lzy(rs(now))^=1;lzy(now)^=1;\n\t\tswap(ls(ls(now)),rs(ls(now)));\n\t\tswap(ls(rs(now)),rs(rs(now)));\n\t\tswap(lmx(ls(now)),rmx(ls(now)));\n\t\tswap(lmx(rs(now)),rmx(rs(now)));\n\t}\n}\ninline void rotate(int now){\n\tint nxt=fa(now),nnt=fa(nxt);\n\tint k1=rs(nxt)==now,k2=rs(nnt)==nxt;\n\tint pre=spl[now].ch[k1^1];\n\tspl[nnt].ch[k2]=now;\tfa(now)=nnt;\n\tspl[nxt].ch[k1]=pre;\tfa(pre)=nxt;\n\tspl[now].ch[k1^1]=nxt;\tfa(nxt)=now;\n\tpushup(nxt);pushup(now);\n}//\u867d\u7136\u80af\u5b9a\u4f1a\u8dd1\u5f97\u6162\uff0c\u4f46\u771ftm\u597d\u770b\ninline void splay(int now,int S){\n\twhile(fa(now)!=S){\n\t\tint nxt=fa(now),nnt=fa(nxt);\n\t\tint k1=rs(nxt)==now,k2=rs(nnt)==nxt;\n\t\tif(nnt!=S)(k1^k2)?rotate(now):rotate(nxt);\n\t\trotate(now);\n\t}\n\tif(!S)root=now;\n}\ninline void build(int lt,int rt,int mi){\n\tif(lt>rt)return ;\n\tint mid=(lt+rt)>>1,now=id[mid],pre=id[mi];\n\tif(lt==rt){\n\t\tsiz(now)=1;\n\t\tif(a[lt]>0)mx(now)=lmx(now)=rmx(now)=a[lt];\n\t\telse mx(now)=a[lt],lmx(now)=rmx(now)=0;\n\t}\n\telse {\n\t\tbuild(lt,mid-1,mid);\n\t\tbuild(mid+1,rt,mid);\n\t}\n\tval(now)=a[mid];fa(now)=pre;\n\tpushup(now);\n\tspl[pre].ch[mid>=mi]=now;\n}\ninline int find(int now,int siz){\n\tpushdown(now);\n\tint sizz=siz(ls(now));\n\tif(siz<=sizz)return find(ls(now),siz);\n\telse if(siz==sizz+1)return now;\n\telse return find(rs(now),siz-sizz-1);\n}\ninline void insert(int now,int sum){\n\tfor(int i=1;i<=sum;++i){\n\t\ta[i]=read();\n\t\tif(!que.empty()){\n\t\t\tid[i]=que.front();\n\t\t\tque.pop();\n\t\t}\n\t\telse {\n\t\t\tid[i]=++cnt;\n\t\t}\n\t}\n\tbuild(1,sum,0);\n\tint mid=(1+sum)>>1,it=id[mid];\n\tint lt=find(root,now+1);\n\tint rt=find(root,now+2);\n\tsplay(lt,0);splay(rt,lt);\n\tls(rt)=it;fa(it)=rt;\n\tpushup(rt);pushup(root);\n}\ninline void split(int now){\n\tif(!now)return ;\n\tsplit(ls(now));split(rs(now));\n\tque.push(now);\n\tls(now)=rs(now)=val(now)=num(now)=siz(now)=0;\n\tlzy(now)=mdf(now)=mx(now)=lmx(now)=rmx(now)=0;\n}\ninline int divid(int lt,int rt){\n\tlt=find(root,lt);rt=find(root,rt);\n\t//\u4e00\u5b9a\u8981\u8fd4\u56de\u53bb\u770b\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5750\u6807\u662f\u63d0\u524d\u5bf9\u5e94\u597d\u7684\n\tsplay(lt,0);splay(rt,lt);\n\treturn ls(rt);\n}\ninline void delet(int lt,int rt){\n\tint now=divid(lt,rt),nxt=fa(now);\n\tsplit(now);\n\tls(nxt)=0;\n\tpushup(nxt);pushup(root);\n}\ninline void modify(int lt,int rt,int val){\n\tint now=divid(lt,rt),nxt=fa(now);\n\tmdf(now)=1;val(now)=val;\n\tnum(now)=siz(now)*val(now);\n\tif(val>0)mx(now)=lmx(now)=rmx(now)=num(now);\n\telse mx(now)=val,lmx(now)=rmx(now)=0;\n\tpushup(nxt);pushup(root);\n}\ninline void reverse(int lt,int rt){\n\tint now=divid(lt,rt),nxt=fa(now);\n\tif(!mdf(now)){\n\t\tlzy(now)^=1;\n\t\tswap(ls(now),rs(now));\n\t\tswap(lmx(now),rmx(now));\n\t\tpushup(nxt);pushup(root);\n\t}\n}\ninline int getsum(int lt,int rt){\n\tint now=divid(lt,rt);\n\treturn num(now);\n}\ninline int getmxs(int lt,int rt){\n\tlt=find(root,lt);rt=find(root,rt);\n\t//\u4e00\u5b9a\u8981\u8fd4\u56de\u53bb\u770b\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5750\u6807\u662f\u63d0\u524d\u5bf9\u5e94\u597d\u7684\n\tsplay(lt,0);splay(rt,lt);\n\treturn mx(ls(rt));\n}\ninline int getnum(int lt){\n\tlt=find(root,lt+1);\n\treturn val(lt);\n}\nint main(){\n\tn=read();m=read();\n\tfor(int i=2;i<=n+1;++i){\n\t\ta[i]=read();id[i]=i;\n\t}\n\tmx(0)=a[1]=a[n+2]=-INF;id[1]=1;id[n+2]=n+2;\n\t//\u56e0\u4e3a\u4e0d\u80fd\u5b580\uff0c\u6240\u4ee5\u96c6\u4f53\u53f3\u79fb\u4e00\u4f4d\u4e86\n\tbuild(1,n+2,0);cnt=n+2;root=(cnt+1)>>1;\n\twhile(m--){\n\t\tscanf(\"%s\",s);\n\t\tif(s[0]=='I'){\n\t\t\tint posi=read(),tot=read();\n\t\t\tinsert(posi,tot);\n\t\t}\n\t\telse if(s[0]=='D'){\n\t\t\tint posi=read(),tot=read();\n\t\t\tdelet(posi,posi+tot+1);\n\t\t}\n\t\telse if(s[2]=='K'){\n\t\t\tint posi=read(),tot=read(),c=read();\n\t\t\tmodify(posi,posi+tot+1,c);\n\t\t}\n\t\telse if(s[0]=='R'){\n\t\t\tint posi=read(),tot=read();\n\t\t\treverse(posi,posi+tot+1);\n\t\t}\n\t\telse if(s[0]=='G'&&s[3]=='-'){\n\t\t\tint posi=read(),tot=read();\n\t\t\tprintf(\"%d\\n\",getsum(posi,posi+tot+1));\n\t\t}\n\t\telse if(s[0]=='M'&&s[3]=='-'){\n\t\t\tint posi=read(),tot=read();\n\t\t\tprintf(\"%d\\n\",getmxs(posi,posi+tot+1));\n\t\t}\n\t\telse {\n\t\t\tint posi=read();\n\t\t\tprintf(\"%d\\n\",getnum(posi));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n### \u5fe0\u544a\uff1a\u505a\u8fd9\u9898\u7684\u65f6\u5019\uff0c\u4f5b\u7cfb\u4e00\u70b9\u603b\u4e0d\u4f1a\u9519\uff08\u4e3a\u4ec0\u4e48\u653e\u6700\u540e\u5440\u3002\u3002\uff09",
        "postTime": 1625615802,
        "uid": 206024,
        "name": "Illusory_dimes",
        "ccfLevel": 7,
        "title": "P2710 \u6570\u5217 \u9898\u89e3"
    },
    {
        "content": "\u5e73\u8861\u6811\u3002\u770b\u4e86\u4e00\u4e0b\uff0c\u4e00\u5171 $3$ \u7bc7\u9898\u89e3\uff0c\u4e24\u7bc7\u5199\u7684\u662f $\\text{Splay}$\uff0c\u53ea\u6709\u4e00\u7bc7\u662f $\\text{FHQ Treap}$\uff0c\u800c\u4e14\u7528\u7684\u8fd8\u662f\u4e07\u6076\u7684**\u6307\u9488**\uff0c\u6211\u8fd9\u79cd\u5b8c\u5168\u4e0d\u4f1a\u6307\u9488\u7684\u5c31\u8d85\u7ea7\u61f5\u903c\u4e86\u3002\u4e07\u5e78\u7684\u662f\u53ca\u65f6\u53d1\u73b0\u8fd9\u9053\u9898\u548c [`P2042 [NOI2005]\u7ef4\u62a4\u6570\u5217`](https://www.luogu.org/problemnew/show/P2042) \u662f\u57fa\u672c\u4e00\u6837\u7684\uff08\u5176\u5b9e\u521a\u5f00\u59cb\u770b\u9898\u9762\u5c31\u53d1\u73b0\u4e86\uff09\uff0c\u53ea\u662f\u8981\u628a $\\text{MAX-SUM}$ \u8fd9\u4e2a\u64cd\u4f5c\u7a0d\u5fae\u6539\u4e00\u4e0b\uff0c\u7136\u540e\u52a0\u4e00\u4e2a\u5f88\u65e0\u8111\u7684 $\\text{GET}$ \u64cd\u4f5c\u5c31\u884c\u4e86\u3002\n\n\u6ce8\u610f\u70b9\uff1a\n\n 1. \u5199\u4e00\u4e2a\u5783\u573e\u6876\u9632\u6b62\u7206\u5185\u5b58\n 2. \u7528\u5feb\u8bfb\n 3. $\\text{Split}$ \u7684\u65f6\u5019\u6309\u7167 $siz$ \u6765 $\\text{Split}$\n \n\u5176\u4ed6\u5c31\u6ca1\u4ec0\u4e48\u4e86\uff0c\u5c31\u662f\u4e0b\u4f20\u6807\u8bb0\u7684\u65f6\u5019\u6bd4\u8f83\u591a\uff0c\u522b\u7684\u5c31\u662f\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 500005\n#define inf 2e9\nusing namespace std;\nstruct FHQTreap\n{\n\tint son[2],siz,val,maxn,lmax,rmax,rev,sum,cov,key;\n}t[MAXN];\nqueue <int> q;\nint n,m,root,a[MAXN],siz,stk[MAXN],top;\ntemplate <typename T> void Read(T &x)\n{\n    int fu=1;\n    x=0;\n    char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) if(ch=='-') fu=-1;\n    for(;isdigit(ch);ch=getchar()) x=(x<<3)+(x<<1)+(ch-48);\n    x*=fu;\n}\nint NewNode(int val)\n{\n\tint x;\n\tif(!q.empty())\n\t{\n\t\tx=q.front();\n\t\tq.pop();\n\t}\n\telse x=++siz;\n\tt[x].son[0]=t[x].son[1]=t[x].rev=0;\n\tt[x].cov=inf;\n\tt[x].key=rand();\n\tt[x].siz=1;\n\tt[x].val=t[x].sum=t[x].maxn=val;\n\tt[x].lmax=t[x].rmax=max(val,0);\n\treturn x;\n}\nvoid Update(int x)\n{\n\tif(t[x].son[0] && t[x].son[1])\n\t{\n\t\tt[x].siz=t[t[x].son[0]].siz+t[t[x].son[1]].siz+1;\n\t\tt[x].sum=t[t[x].son[0]].sum+t[t[x].son[1]].sum+t[x].val;\n\t\tt[x].maxn=max(t[t[x].son[0]].maxn,t[t[x].son[1]].maxn);\n\t\tt[x].maxn=max(t[x].maxn,t[t[x].son[0]].rmax+t[t[x].son[1]].lmax+t[x].val);\t\n\t\tt[x].lmax=max(t[t[x].son[0]].lmax,t[t[x].son[0]].sum+t[t[x].son[1]].lmax+t[x].val);\n\t\tt[x].rmax=max(t[t[x].son[1]].rmax,t[t[x].son[1]].sum+t[t[x].son[0]].rmax+t[x].val);\n\t}\n\telse if(t[x].son[0])\n\t{\n\t\tt[x].siz=t[t[x].son[0]].siz+1;\n\t\tt[x].sum=t[t[x].son[0]].sum+t[x].val;\n\t\tt[x].maxn=max(t[t[x].son[0]].maxn,t[t[x].son[0]].rmax+t[x].val);\n\t\tt[x].lmax=max(t[t[x].son[0]].lmax,t[t[x].son[0]].sum+t[x].val);\n\t\tt[x].lmax=max(t[x].lmax,0);\n\t\tt[x].rmax=max(t[t[x].son[0]].rmax+t[x].val,0);\n\t}\n\telse if(t[x].son[1])\n\t{\n\t\tt[x].siz=t[t[x].son[1]].siz+1;\n\t\tt[x].sum=t[t[x].son[1]].sum+t[x].val;\n\t\tt[x].maxn=max(t[t[x].son[1]].maxn,t[t[x].son[1]].lmax+t[x].val);\n\t\tt[x].rmax=max(t[t[x].son[1]].rmax,t[t[x].son[1]].sum+t[x].val);\n\t\tt[x].rmax=max(t[x].rmax,0);\n\t\tt[x].lmax=max(t[t[x].son[1]].lmax+t[x].val,0);\n\t}\n\telse\n\t{\n\t\tt[x].siz=1;\n\t\tt[x].sum=t[x].maxn=t[x].val;\n\t\tt[x].lmax=t[x].rmax=max(t[x].val,0);\n\t}\n}\nvoid reverse(int x)\n{\n\tswap(t[x].son[0],t[x].son[1]);\n\tswap(t[x].lmax,t[x].rmax);\n\tt[x].rev^=1;\n}\nvoid Change(int x,int val)\n{\n\tt[x].val=val;\n\tt[x].sum=t[x].siz*val;\n\tt[x].lmax=t[x].rmax=max(t[x].sum,0);\n\tt[x].maxn=max(t[x].sum,t[x].val);\n\tt[x].cov=val;\n}\nvoid PushDown(int x)\n{\n\tif(t[x].rev)\n\t{\n\t\tif(t[x].son[0]) reverse(t[x].son[0]);\n\t\tif(t[x].son[1]) reverse(t[x].son[1]);\n\t}\n\tif(t[x].cov!=inf)\n\t{\n\t\tif(t[x].son[0]) Change(t[x].son[0],t[x].cov);\n\t\tif(t[x].son[1]) Change(t[x].son[1],t[x].cov);\n\t}\n\tt[x].rev=0;\n\tt[x].cov=inf;\n}\nint BuildFHQTreap(int sum)\n{\n\tmemset(stk,0,sizeof(stk));\n\ttop=0;\n\tint x,lat;\n\tfor(int i=1;i<=sum;i++)\n\t{\n\t\tx=NewNode(a[i]);\n\t\tlat=0;\n\t\twhile(top && t[stk[top]].key>t[x].key)\n\t\t{\n\t\t\tUpdate(stk[top]);\n\t\t\tlat=stk[top];\n\t\t\tstk[top--]=0;\n\t\t}\n\t\tif(top) t[stk[top]].son[1]=x;\n\t\tt[x].son[0]=lat;\n\t\tstk[++top]=x;\n\t}\n\twhile(top) Update(stk[top--]);\n\treturn stk[1];\n}\nint Merge(int x,int y)\n{\n\tif(x) PushDown(x);\n\tif(y) PushDown(y);\n\tif(!x || !y) return x+y;\n\tif(t[x].key<t[y].key)\n\t{\n\t\tt[x].son[1]=Merge(t[x].son[1],y);\n\t\tUpdate(x);\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tt[y].son[0]=Merge(x,t[y].son[0]);\n\t\tUpdate(y);\n\t\treturn y;\n\t}\n}\nvoid Split(int rt,int pos,int &x,int &y)\n{\n\tif(!rt) x=y=0;\n\telse\n\t{\n\t\tPushDown(rt);\n\t\tif(t[t[rt].son[0]].siz>=pos)\n\t\t{\n\t\t\ty=rt;\n\t\t\tSplit(t[rt].son[0],pos,x,t[rt].son[0]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=rt;\n\t\t\tSplit(t[rt].son[1],pos-t[t[rt].son[0]].siz-1,t[rt].son[1],y);\n\t\t}\n\t\tUpdate(rt);\n\t}\n}\nvoid Recycle(int x)\n{\n\tif(!x) return;\n\tq.push(x);\n\tRecycle(t[x].son[0]);\n\tRecycle(t[x].son[1]);\n}\nvoid Insert()\n{\n\tint pos,sum,x,y;\n\tRead(pos);\n\tRead(sum);\n\tfor(int i=1;i<=sum;i++) scanf(\"%d\",&a[i]);\n\tint rt=BuildFHQTreap(sum);\n\tSplit(root,pos,x,y);\n\troot=Merge(Merge(x,rt),y);\n}\nvoid Delete()\n{\n\tint pos,sum,ax,ay,bx,by;\n\tRead(pos);\n\tRead(sum);\n\tSplit(root,pos-1,ax,bx);\n\tSplit(bx,sum,ay,by);\n\troot=Merge(ax,by);\n\tRecycle(ay);\n}\nvoid Modify()\n{\n\tint pos,sum,val,ax,ay,bx,by;\n\tRead(pos);\n\tRead(sum);\n\tRead(val);\n\tSplit(root,pos-1,ax,bx);\n\tSplit(bx,sum,ay,by);\n\tChange(ay,val);\n\troot=Merge(ax,Merge(ay,by));\n}\nvoid Reverse()\n{\n\tint pos,sum,ax,ay,bx,by;\n\tRead(pos);\n\tRead(sum);\n\tSplit(root,pos-1,ax,bx);\n\tSplit(bx,sum,ay,by);\n\treverse(ay);\n\troot=Merge(ax,Merge(ay,by));\n}\nvoid GetSum()\n{\n\tint pos,sum,ax,ay,bx,by;\n\tRead(pos);\n\tRead(sum);\n\tSplit(root,pos-1,ax,bx);\n\tSplit(bx,sum,ay,by);\n\tprintf(\"%d\\n\",t[ay].sum);\n\troot=Merge(ax,Merge(ay,by));\n}\nvoid GetPoint()\n{\n\tint pos,x,y,z;\n\tRead(pos);\n\tSplit(root,pos,x,z);\n\tSplit(x,pos-1,x,y);\n\tprintf(\"%d\\n\",t[y].val);\n\troot=Merge(Merge(x,y),z);\n}\nvoid GetMax()\n{\n\tint pos,sum,ax,ay,bx,by;\n\tRead(pos);\n\tRead(sum);\n\tSplit(root,pos-1,ax,bx);\n\tSplit(bx,sum,ay,by);\n\tprintf(\"%d\\n\",t[ay].maxn);\n\troot=Merge(ax,Merge(ay,by));\n}\nint main()\n{\n\tRead(n);\n\tRead(m);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\troot=BuildFHQTreap(n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tstring s;\n\t\tcin>>s;\n\t\tif(s==\"INSERT\") Insert();\n\t\telse if(s==\"DELETE\") Delete();\n\t\telse if(s==\"MAKE-SAME\") Modify();\n\t\telse if(s==\"REVERSE\") Reverse();\n\t\telse if(s==\"GET-SUM\") GetSum();\n\t\telse if(s==\"GET\") GetPoint();\n\t\telse if(s==\"MAX-SUM\") GetMax();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1546956756,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2710 \u3010\u6570\u5217\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4efd\u4ee5\u6307\u9488\u5b9e\u73b0\u7684Splay\u9898\u89e3\u3002\n\n\u9898\u610f\uff1a\u9700\u8981\u7ef4\u62a4\u7ef4\u62a47\u79cd\u64cd\u4f5c\uff1a\u63d2\u5165\u4e00\u4e2a\u533a\u95f4\uff0c\u533a\u95f4\u5220\u9664\uff0c\u533a\u95f4\u53cd\u8f6c\uff0c\u533a\u95f4\u8d4b\u503c\uff0c\u533a\u95f4\u6c42\u548c\uff0c\u5355\u70b9\u6c42\u548c\uff0c\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n\u6211\u4eec\u4e00\u4e2a\u4e00\u4e2a\u7814\u7a76\u3002\n\n\u9996\u5148\uff0c**\u63d2\u5165\u4e00\u4e2a\u533a\u95f4**\u3002\u8981\u662f\u771f\u5c31\u4e00\u4e2a\u4e00\u4e2a\u5f80\u91cc\u9762\u585e\uff0c\u65e2\u4e0d\u4f18\u96c5\u4e5f\u4e0d\u4f18\u79c0\uff0c\u6050\u6015\u8981\u539f\u5730\u5347\u5929\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8981\u63d2\u5165\u7684\u533a\u95f4\u5148\u5efa\u6210\u4e00\u9897Splay\uff0c\u518d\u628a\u65b0\u5efa\u7684Splay\u7684\u6839\u7ed3\u70b9\u585e\u5230\u5b83\u8be5\u53bb\u7684\u5730\u65b9\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u4e0b\u6765\u4e86\u3002\n\n\u5177\u4f53\u7684\uff0c\u91c7\u7528\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\uff0c **\u4e8c\u5206\u5efa\u6811** \uff0c$O(n)$\u5f97\u5230\u4e00\u9897**\u5b8c\u7f8e**\u7684Splay\u3002\n\n\u63a5\u7740\u5c06\u76ee\u6807\u7ed3\u70b9 $pos$ \u4f38\u5c55\u81f3\u6839\uff0c\u5c06 $pos+1$ \u4f38\u5c55\u81f3\u6839\u7684\u53f3\u513f\u5b50\u3002\n\n\u7136\u540e\u5c06\u5f97\u5230\u7684\u5b8c\u7f8eSplay\u7684\u6839\u7ed3\u70b9\uff0c\u585e\u5230 $pos+1$ \u7684\u5de6\u513f\u5b50\u5904\uff0c\u89e3\u51b3\u3002\n\n**\u5220\u9664\u4e00\u4e2a\u533a\u95f4\uff1a** \u6b63\u5e38\u6765\u8bf4\uff0c\u82e5\u76ee\u6807\u533a\u95f4\u4e3a$(l,r)$\uff0c\u53ea\u9700\u8981\u628a$(l-1)$\u4f38\u5c55\u81f3\u6839\uff0c\u518d\u5c06$(r+1)$\u4f38\u5c55\u81f3\u6839\u7684\u53f3\u513f\u5b50\uff0c\u518d\u628a$(r+1)$\u7684\u5de6\u513f\u5b50\u6807\u7a7a\u5373\u53ef\u3002\u4f46\u5982\u679c\u53ea\u662f\u8fd9\u6837\uff0c\u6709\u53ef\u80fd\u4f1a\u70b8\u7a7a\u95f4\u3002\u6bd5\u7adf\u6ca1\u6709\u56de\u6536\u5220\u6389\u7684\u70b9\uff0c\u82e5\u51fa\u73b0\u591a\u6b21\u5927\u8303\u56f4\u63d2\u5165\u548c\u5220\u9664\uff0c\u7a7a\u95f4\u5927\u6982\u5c31\u70b8\u4e86\u3002\n\n\u56e0\u6b64\uff0c\u8fd8\u9700\u8981\u4e00\u6b21\u6df1\u641c\u6765\u56de\u6536\u5229\u7528\u533a\u95f4$(l,r)$\u5185\u7684\u70b9\u3002\u5982\u679c\u4f60\u662f\u975e\u6307\u9488\u9009\u624b\uff0c\u53ef\u4ee5\u5f00\u4e00\u4e2a\u5783\u573e\u6876\u6570\u7ec4\u6765\u56de\u6536\u5229\u7528\u8fd9\u4e9b\u70b9\u7684\u7f16\u53f7\uff0c\u65b0\u5efa\u70b9\u65f6\u4f18\u5148\u5c06\u5783\u573e\u6876\u5185\u70b9\u7684\u7f16\u53f7\u8d4b\u7ed9\u70b9\u3002\u800c\u5bf9\u4e8e\u6307\u9488\u9009\u624b\u6765\u8bf4\uff0c\u76f4\u63a5```delete now;```\u7cfb\u7edf\u5c31\u4f1a\u8ba4\u4e3a\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528\u8be5\u7a7a\u95f4\u3002\n\n\u901a\u8fc7\u4e0a\u8ff0\u7684\u65f6\u95f4\u6362\u7a7a\u95f4\uff0c\u89e3\u51b3\u3002\n\n**\u533a\u95f4\u53cd\u8f6c\uff1a** \u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6807\u8bb0\uff08\u5728\u6211\u7684\u4ee3\u7801\u4e2d\u88ab\u79f0\u4f5cCrimson\uff09\uff0c\u610f\u4e3a\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u5b50\u7ed3\u70b9\u90fd\u9700\u8981\u53cd\u8f6c\uff0c\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u88ab\u6807\u8bb0\u7684\u70b9\u65f6\uff0c\u5148\u4e0b\u4f20\u6807\u8bb0\uff08\u5373\u5c06\u5176\u5de6\u53f3\u5b69\u5b50Crimson\u53d6\u53cd\uff0c\u56e0\u4e3a\u53cd\u8f6c\u4e24\u6b21\u7b49\u4e8e\u6ca1\u53cd\u8f6c\uff0c\u540c\u65f6\u5206\u522b\u4ea4\u6362\u5b83\u5de6\u53f3\u5b69\u5b50\u7684\u5de6\u53f3\u5b69\u5b50\uff09\n\n\u5177\u4f53\u5b9e\u73b0\u5c31\u662f\u901a\u8fc7\u4f38\u5c55$(l-1)$,$(r+1)$\u6765\u5f97\u5230\u76ee\u6807\u533a\u95f4\u7684\u5b50\u6811\uff0c\u5e76\u7ed9\u76ee\u6807\u533a\u95f4\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u6253\u4e0a\u6807\u8bb0\u4e14\u4ea4\u6362\u5176\u5de6\u53f3\u5b69\u5b50\u3002\u89e3\u51b3\u3002\n\n**\u533a\u95f4\u8d4b\u503c\uff1a** \u5927\u81f4\u4e0e\u533a\u95f4\u53cd\u8f6c\u76f8\u540c\uff0c\u4e5f\u662f\u901a\u8fc7\u7ef4\u62a4\u6807\u8bb0\u7684\u65b9\u5f0f\u8fdb\u884c\u3002\u4e0d\u8fc7\u4e0b\u4f20\u6807\u8bb0\u65f6\u5176\u4f18\u5148\u7ea7\u9ad8\u4e8e\u53cd\u8f6c\uff0c\u56e0\u4e3a\u90fd\u53d8\u6210\u4e00\u6837\u7684\u4e86\uff0c\u8fd8\u9700\u8981\u4ec0\u4e48\u53cd\u8f6c\u5462\uff1f\u5f53\u7136\u8981\u7ffb\u4e5f\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u6ca1\u6709\u610f\u4e49\u3002\n\n\u5f97\u5230\u76ee\u6807\u533a\u95f4\u7684\u5b50\u6811\u540e\u5c06\u5176\u6839\u7ed3\u70b9\u7684\u6743\u503c\u6539\u6389\uff0c\u5e76\u7ed9\u5b83\u6253\u4e0a\u6807\u8bb0\uff0c\u610f\u4e3a\u5176\u4e0b\u9762\u6240\u6709\u70b9\u90fd\u5e94\u8be5\u88ab\u6539\u6389\u3002\u89e3\u51b3\u3002\n\n**\u533a\u95f4\u6c42\u548c\uff1a** \u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4ee5\u5176\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6743\u503c\u548c\u3002\u901a\u8fc7\u4f38\u5c55\u5f97\u5230\u76ee\u6807\u533a\u95f4\u540e\u8f93\u51fa\u4ee3\u8868\u76ee\u6807\u533a\u95f4\u7684\u5b50\u6811\u7684\u6743\u503c\u548c\u3002\u89e3\u51b3\u3002\u5355\u70b9\u6c42\u548c\u540c\u7406\u3002\n\n**\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff1a** \u7528\u5206\u6cbb\u7684\u601d\u60f3\u3002\n\n\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9now,\u5176\u4ee3\u8868\u7684\u533a\u95f4\u662f\u7531\u4ed6\u81ea\u5df1\uff0c\u4ed6\u5de6\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4\uff0c\u4ed6\u53f3\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4\u7ec4\u6210\u7684\u3002\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4e00\u4e0b\u4e09\u4e2a\u503c\uff1a$prel,prer,res$\n\n$prel$\uff1a\u4ece\u8be5\u7ed3\u70b9\u4ee3\u8868\u533a\u95f4\u7684\u6700\u5de6\u8fb9\u5f00\u59cb\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\u3002\n\n$prer$: \u4ece\u8be5\u7ed3\u70b9\u4ee3\u8868\u533a\u95f4\u7684\u6700\u53f3\u8fb9\u5f00\u59cb\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\u3002\n\n$res:$ \u5728\u8be5\u7ed3\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u4e2d\u7684\u6700\u5927\u8fde\u7eed\u5b57\u6bb5\u548c\u3002\n\n\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9\u6765\u8bf4\uff0c\u5176$res$\u6709\u4e09\u79cd\u53ef\u80fd\uff1a\u5de6\u5b69\u5b50\u7684$res$\uff0c\u53f3\u5b69\u5b50\u7684$res$\uff0c\u5de6\u5b69\u5b50\u7684$prer$\u52a0\u4e0a\u53f3\u5b69\u5b50\u7684$prel$\u52a0\u4e0a\u8be5\u7ed3\u70b9\u672c\u8eab\u7684\u4ef7\u503c\u3002\n\n\u800c\u5bf9\u4e8e$prel$\u6709```prel=max(prel,now->l->sum+now->val+r->prel);```\n\n$prer$\u7c7b\u4f3c\u3002\u6309\u7167\u4e0a\u8ff0\u601d\u8def\u53bb\u7ef4\u62a4$prel$\uff0c$prer$\uff0c$res$\uff0c\u6700\u7ec8\u7b54\u6848\u4e3a\u76ee\u6807\u533a\u95f4\u6839\u7ed3\u70b9\u7684$res$\u3002\n\n**\u8981\u6ce8\u610f\u533a\u95f4\u53cd\u8f6c\u4f1a\u5bfc\u81f4$prel,prer$\u4ea4\u6362\u3002**\n\n\u9898\u76ee\u672a\u6307\u660e\u5176\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u662f\u5426\u80fd\u4e3a\u7a7a\uff0c\u6211\u9ed8\u8ba4\u4e0d\u80fd\u3002\u4ee3\u7801\u80fd\u591f\u901a\u8fc7\u6b64\u9898\u3002\u5b9e\u6d4b\u82e5\u80fd\u4e3a\u7a7a\u4f1aWA\u3002\n\n\u8fd9\u9053\u9898\u5c31\u662f\u4e0a\u8ff0\u6240\u6709\u64cd\u4f5c\u7684\u5927\u6742\u70e9\uff0c\u5199\u8d77\u6765\u7ec6\u8282\u7e41\u6742\u7410\u788e\uff0c\u7740\u5b9e\u4e0d\u5bb9\u6613\u3002\u82e5\u80fd\u901a\u8fc7\u6b64\u9898\uff0c\u76f8\u4fe1\u5bf9\u5e73\u8861\u6811\u7684\u719f\u7ec3\u5ea6\u4f1a\u6709\u5f88\u5927\u63d0\u5347\u3002\n\n\u53e6\u5916\uff0c\u8fd9\u9053\u9898\u6570\u636e\u6bd4\u8f83\u5584\u826f\uff0c\u4e0d\u4f1a\u51fa\u73b0$n=0$\u8fd9\u79cd\u4e27\u5fc3\u75c5\u72c2\u7684\u60c5\u51b5\u3002\u8bf7\u653e\u5fc3\u3002\u800c\u4ed6\u7684\u5144\u5f1fP2042\u7ef4\u62a4\u6570\u5217\uff0c\u5c31\u662f\u53e6\u5916\u4e00\u4e2a\u6545\u4e8b\u4e86......\n\n$\\text{Talk is cheap,show me your code.}$\n```\n#include <cstdio>\n\nconst int maxn=2e5+5,inf=1e9+7;\n#define null 0\n\nstruct IO{\n\tIO(){};char c;\n\tinline char gc(){\n\t\tstatic char buf[maxn],*p1=buf,*p2=buf;\n\t\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,maxn,stdin),p1==p2)?EOF:*p1++;\n\t}\n\tinline IO&operator>>(int &_){\n\t\t_=0;bool f=1;c=gc();while(c<'0'||c>'9'){if(c=='-') f=0; c=gc();}\n\t\twhile(c>='0'&&c<='9'){_=_*10+c-48;c=gc();}if(!f) _=-_;return *this;\n\t}\n\tinline IO&operator<<(int x){\n\t\tif(!x){putchar(48);putchar('\\n');return *this;}\n\t\tstatic int wt[40],len;len=0;if(x<0){putchar('-');x=-x;}\n\t\tfor(;x;x/=10){wt[++len]=x%10;}\n\t\twhile(len){putchar(wt[len--]+48);}\n\t\tputchar('\\n');return *this;\n\t}\n\tinline IO&operator>>(char s[]){\n\t\tc=gc();int len=0;while(c==' '||c=='\\n'||c=='\\r') c=gc();\n\t\twhile(c!=' '&&c!='\\n'&&c!='\\r'&&c!='\\0'){s[++len]=c;c=gc();}\n\t\ts[++len]='\\0';return *this;\n\t}\n\tinline IO&operator<<(char s[]){\n\t\tfor(int i=1;s[i]!='\\0';i++) putchar(s[i]);\n\t\tputchar('\\n');return *this;\n\t}\n}io;\n\ninline int max(int a,int b){\n\treturn a>b?a:b;\n}\n\ntemplate<typename T> inline void swap(T &a,T &b){\n\tT tmp=a;a=b;b=tmp;\n}\n\nstruct node{\n\tnode *son[2],*fa;\n\tint val,size;\n\tbool Crimson,tag;int res,pre_l,pre_r,sum;//Crimson\u610f\u4e3a\u5176\u5b69\u5b50\u662f\u5426\u9700\u8981\u53cd\u8f6c\uff0ctag\u610f\u4e3a\u5176\u5b69\u5b50\u662f\u5426\u9700\u8981\u8d4b\u503c\n\tnode(int _val=0){\n\t\tson[0]=son[1]=fa;\n\t\tval=_val;size=1;\n\t\tCrimson=tag=res=pre_l=pre_r=0;\n\t}\n\tinline node* &lc(){return son[0];}\n\tinline node* &rc(){return son[1];}\n\tbool which(){return fa->rc()==this;}\n\tvoid push_down(){\n\t\tnode *now=this;\n\t\tif(now==null) return;\n\t\tif(now->tag){//\u5176\u5b69\u5b50\u9700\u8981\u8d4b\u503c\n\t\t\tif(now->lc()){\n\t\t\t\tnow->lc()->tag=1,now->lc()->val=now->val,now->lc()->sum=now->lc()->size*now->val;\n\t\t\t\tif(val>=0) lc()->pre_l=lc()->pre_r=lc()->res=lc()->sum;\n\t\t\t\telse lc()->pre_l=lc()->pre_r=0,lc()->res=val;//\u672c\u9898\u89e3\u9ed8\u8ba4\u4e0d\u80fd\u53d6\u7a7a\n\t\t\t}//\u4e0b\u4f20\u6807\u8bb0\n\t\t\tif(now->rc()){\n\t\t\t\tnow->rc()->tag=1,now->rc()->val=now->val,now->rc()->sum=now->rc()->size*now->val;\n\t\t\t\tif(val>=0) rc()->pre_l=rc()->pre_r=rc()->res=rc()->sum;\n\t\t\t\telse rc()->pre_l=rc()->pre_r=0,rc()->res=val;\n\t\t\t}//\u4e0b\u4f20\u6807\u8bb0\n\t\t\tnow->tag=now->Crimson=0;//\u4e0d\u518d\u9700\u8981\u53cd\u8f6c\n\t\t}\n\t\tif(now->Crimson){\n\t\t\tif(now->lc()) now->lc()->Crimson^=1;\n\t\t\tif(now->rc()) now->rc()->Crimson^=1;//\u4e0b\u4f20\n\t\t\tif(lc()) swap(lc()->lc(),lc()->rc()),swap(lc()->pre_l,lc()->pre_r);\n\t\t\tif(rc()) swap(rc()->lc(),rc()->rc()),swap(rc()->pre_l,rc()->pre_r);//\u6ce8\u610f\uff01\uff01\u53cd\u8f6c\u540epre_l,pre_r\u9700\u4ea4\u6362\uff01\uff01\n\t\t\tnow->Crimson=0;\n\t\t}\n\t}\n\tvoid update(){\n\t\tsize=(lc()?lc()->size:0)+(rc()?rc()->size:0)+1;//\u66f4\u65b0\u5927\u5c0f\n\t\tsum=(lc()?lc()->sum:0)+(rc()?rc()->sum:0)+val;//\u66f4\u65b0\u6743\u503c\u548c\n\t\tpre_l=max(lc()?lc()->pre_l:0,(lc()?lc()->sum:0)+val+(rc()?rc()->pre_l:0));\n\t\tpre_r=max(rc()?rc()->pre_r:0,(rc()?rc()->sum:0)+val+(lc()?lc()->pre_r:0));//\u66f4\u65b0pre_l,pre_r\n\t\tres=val+(lc()?lc()->pre_r:0)+(rc()?rc()->pre_l:0);\n\t\tres=max(max((lc()?lc()->res:-inf),(rc()?rc()->res:-inf)),res);//\u6ce8\u610f\uff01\uff01\u6ca1\u6709\u513f\u5b50\u65f6\u5176res\u5e94\u88ab\u89c6\u4f5c-inf\u800c\u4e0d\u662f0\uff01\u6bd5\u7adf\u4e0d\u80fd\u4e3a\u7a7a\u3002\n\t}\n\tvoid init(){\n\t\tson[0]=son[1]=fa=null;\n\t\tsize=1;Crimson=tag=res=pre_l=pre_r=sum=0;\n\t}\n};\n\nint n,m,a[maxn];\n\nstruct Splay{\n\tnode *rt;\n\tSplay():rt(null){}\n\tnode *build(int l,int r,node *FA){\n\t\tif(l>r) return null;\n\t\tint mid=(l+r)>>1;\n\t\tnode *now=new node;now->init();now->val=a[mid];now->fa=FA;now->res=now->val;\n\t\tnow->lc()=build(l,mid-1,now);\n\t\tnow->rc()=build(mid+1,r,now);\n\t\treturn now->update(),now;\n\t}//\u7ebf\u6bb5\u6811\u5f0f\u5efa\u6811\n\tvoid rotate(node *now){\n\t\tnode *FA=now->fa;bool pos=!now->which();\n\t\tFA->push_down(),now->push_down();\n\t\tFA->son[!pos]=now->son[pos];if(now->son[pos]) now->son[pos]->fa=FA;\n\t\tnow->fa=FA->fa;if(now->fa) now->fa->son[FA->which()]=now;\n\t\tFA->fa=now;now->son[pos]=FA;\n\t\tFA->update(),now->update();if(now->fa==null) rt=now;\n\t}\n\tvoid splay(node *now,node *to=null){\n\t\tfor(node *FA=now->fa;(FA=now->fa)!=to;rotate(now))\n\t\tif(FA->fa!=to) rotate(FA->which()==now->which()?FA:now);\n\t}//Splay\u57fa\u64cd\n\tnode* find(int key){//\u627e\u5230\u4e0b\u6807\u4e3a\u7b2ckey\u5927\u7684\u7ed3\u70b9\n\t\tnode *now=rt;\n\t\twhile(1){\n\t\t\tnow->push_down();\n\t\t\tint ls=(now->lc()?now->lc()->size:0);\n\t\t\tif(ls+1==key){splay(now);return now;}\n\t\t\tif(key<=ls) now=now->lc();\n\t\t\telse key-=ls+1,now=now->rc();\n\t\t}\n\t}\n\tnode* split(int l,int r){//\u5f97\u5230\u533a\u95f4l\uff0cr\u7684\u6839\n\t\tnode *L=find(l-1),*R=find(r+1);\n\t\tsplay(L,null),splay(R,L);\n\t\treturn R->lc();\n\t}\n\tvoid recycle(node *now){\n\t\tif(now==null) return;\n\t\trecycle(now->lc()),recycle(now->rc());\n\t\tdelete now;//\u56de\u6536\n\t}\n\tvoid del(int l,int r){\n\t\tnode *now=split(l,r);node *FA=now->fa;\n\t\trecycle(now);FA->lc()=null;//\u6ce8\u610f\u522b\u5199\u53cd\uff0c\u8981\u662f\u5148\u6807null\u5728\u56de\u6536\u5c31\u51fa\u4e8b\u4e86\n\t\tFA->update();FA->fa->update();\n\t}\n\tvoid modify(int l,int r,int key){//\u533a\u95f4\u8d4b\u503c\n\t\tnode *now=split(l,r);\n\t\tnow->val=key,now->tag=1,now->sum=key*now->size;\n\t\tif(key>=0) now->pre_l=now->pre_r=now->res=now->sum;\n\t\telse now->pre_l=now->pre_r=0,now->res=key;//\u9ed8\u8ba4\u4e0d\u4e3a\u7a7a\n\t\tnow->fa->update();rt->update();\n\t}\n\tvoid reserve(int l,int r){//\u533a\u95f4\u53cd\u8f6c\n\t\tnode *now=split(l,r);\n\t\tif(now->tag==0){//\u8981\u662f\u533a\u95f4\u8d4b\u503c\u8fc7\uff0c\u90a3\u4e48\u53cd\u8f6c\u6ca1\u6709\u610f\u4e49\n\t\t\tnow->Crimson^=1;\n\t\t\tswap(now->pre_l,now->pre_r);\n\t\t\tswap(now->lc(),now->rc());\n\t\t\tnow->fa->update();rt->update();\n\t\t}\n\t}\n\tint query_sum(int l,int r){\n\t\tnode *now=split(l,r);\n\t\treturn now->sum;\n\t}\n\tint query_maxx(int l,int r){\n\t\tnode *now=split(l,r);\n\t\treturn now->res;\n\t}\n}s;\n\nvoid insert(Splay &goal,int l,int r){\n\tnode *L=goal.find(l),*R=goal.find(l+1);\n\tgoal.splay(L,null),goal.splay(R,L);\n\tSplay tmp;\n\tR->lc()=tmp.build(l,r,R);//\u5c06tmp\u5efa\u6210\u4e00\u9897\u5b8c\u7f8eSplay\u5e76\u63d2\u5165l,l+1\u4e4b\u95f4\n\tR->lc()->update();goal.splay(R);\n}\n\nint main(){\n\tio>>n>>m;\n\tfor(int i=2;i<=n+1;i++) io>>a[i];a[1]=-inf,a[n+2]=-inf;//\u8fd9\u91cc\u8981\u662f-inf\uff01\uff01\u56e0\u4e3a\u5b50\u6bb5\u4e0d\u4e3a\u7a7a\n\ts.rt=s.build(1,n+2,null);//\u6ce8\u610f\uff0c\u8981\u5728\u7b2c\u4e00\u4e2a\u5143\u7d20\u524d\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u5404\u52a0\u4e00\u4e2a\u5143\u7d20\n\t//\u4e0d\u7136\u5728\u5904\u7406\u533a\u95f4(1,..)\u6216(..,n)\u65f6\u4f1a\u53bb\u65cb\u8f6c\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff0c\u4ece\u800c\u559c\u63d0RE\n\tfor(int i=1;i<=m;i++){\n\t\tchar opt[50];io>>opt;\n\t\tint l,r;\n\t\tif(opt[1]=='I'){\n\t\t\tio>>l>>r;r+=l-1;\n\t\t\tfor(int i=l+1;i<=r+1;i++) io>>a[i];\n\t\t\tinsert(s,l+1,r+1);\n\t\t}\n\t\tif(opt[1]=='D'){\n\t\t\tio>>l>>r;r+=l-1;\n\t\t\ts.del(l+1,r+1);\n\t\t}\n\t\tif(opt[1]=='M'&&opt[3]=='K'){\n\t\t\tio>>l>>r;r+=l-1;\n\t\t\tint x;io>>x;\n\t\t\ts.modify(l+1,r+1,x);\n\t\t}\n\t\tif(opt[1]=='R'){\n\t\t\tio>>l>>r;r+=l-1;\n\t\t\ts.reserve(l+1,r+1);\n\t\t}\n\t\tif(opt[1]=='G'){\n\t\t\tif(opt[4]){\n\t\t\t\tio>>l>>r;r+=l-1;\n\t\t\t\tio<<s.query_sum(l+1,r+1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tio>>l;\n\t\t\t\tio<<s.query_sum(l+1,l+1);\n\t\t\t}\n\t\t}\n\t\tif(opt[1]=='M'&&opt[3]=='X'){\n\t\t\tio>>l>>r;r+=l-1;\n\t\t\tio<<s.query_maxx(l+1,r+1);\n\t\t}\n\t}\n\treturn 0;\n}//\u5e0c\u671b\u80fd\u591f\u5e2e\u5230\u60a8\u3002\n```",
        "postTime": 1597901024,
        "uid": 101984,
        "name": "Rui_R",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2710 \u3010\u6570\u5217\u3011"
    },
    {
        "content": "# \u5e7f\u544a\n\n[\u849f\u84bb\u7684blog](https://www.luogu.com.cn/blog/111990/)\n\n# \u6b63\u6587\n\n# \u4f20\u8bf4\u4e2d\u7684Splay\n\n\u53cc\u500d\u7ecf\u9a8c\uff1a[[NOI2005]\u7ef4\u62a4\u6570\u5217](https://www.luogu.org/problem/P2042)\n\n# \u524d\u7f6e\u829d\u58eb\uff1a\n\n## 0\u3001\u53d8\u91cf\uff1a\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#define L(x) tree[x].ch[0]\n#define R(x) tree[x].ch[1]\n#define V(x) tree[x].val\n#define S(x) tree[x].sum\n#define F(x) tree[x].fa\n#define inf 10000001\n#define N 1000000\n\nstruct node{\n\tint ch[2],//\u5de6\u53f3\u513f\u5b50\n   fa,//\u7236\u4eb2\n   sum,//\u5b50\u6811\u548c\n   size,//\u5b50\u6811\u8282\u70b9\u6570\n   val,//\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\n   lmax,//\u524d\u7f00\u6700\u5927\u5b50\u6bb5\u548c\n   rmax,//\u540e\u7f00\u6700\u5927\u5b50\u6bb5\u548c\n   zmax,//\u603b\u6700\u5927\u5b50\u6bb5\u548c\n   lazy_rev,//\u65cb\u8f6c\u61d2\u6807\u8bb0\n   lazy_cov;//\u8986\u76d6\u61d2\u6807\u8bb0\n\tinline void clear(){ch[0]=ch[1]=fa=lazy_rev=0;lazy_cov=inf;}//\u6e05\u7a7a\u51fd\u6570\n}tree[N+10];\n```\n\n\n\u9996\u5148\uff0c\u5bf9\u4e8esplay\u7684\u57fa\u672c\u64cd\u4f5c\uff1a\n\n## 1\u3001splay\uff08\u4f38\u5c55\u64cd\u4f5c\uff09\n\n\u5176\u5b9e\u8bf4\u767d\u4e86\u5c31\u662f\u628a\u67d0\u4e00\u4e2a\u8282\u70b9\u8f6c\u5230\u6839\u8282\u70b9\u800c\u5df2\uff0c\u91cd\u70b9\u662frotate\u51fd\u6570\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\ninline void splay(int x,int goal)\n{\n\tint y,z;\n\twhile(F(x)!=goal)\n\t{\n\t\ty=F(x),z=F(y);\n\t\tif(z!=goal)(R(z)==y)^(R(y)==x)?rotate(x):rotate(y);\n\t\trotate(x);\n\t}\n\tup(x);\n\tif(!goal)root=x;//\u8fd9\u91cc\u4e00\u5b9a\u4e0d\u8981\u5fd8\u4e86\u66f4\u65b0root\n}\n```\n\n## 2\u3001rotate\u51fd\u6570\n\n\u542b\u4e49\uff1a\u628ax\u8282\u70b9\u53d8\u6210\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u4ed6\u539f\u6765\u7684\u7236\u4eb2\u8282\u70b9\u53d8\u6210\u4ed6\u7684\u513f\u5b50\u3002\n\n\uff08\u5373\u65cb\u8f6c\u64cd\u4f5c\uff09\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\ninline void rotate(int x)\n{\n\tint y=F(x),z=F(y),k=R(y)==x,w=tree[x].ch[k^1];\n\tdown(y),down(x);//\u6ce8\u610f\u61d2\u6807\u8bb0\n\tif(z)tree[z].ch[R(z)==y]=x;\n\ttree[x].ch[k^1]=y;tree[y].ch[k]=w;\n\tif(w)F(w)=y;F(y)=x;F(x)=z;\n\tup(y);up(x);\n}\n```\n~~\uff08\u7801\u98ce\u8fc7\u4e8e\u4e11\u964b\uff09~~\n\n## 3\u3001kth\u67e5\u8be2\u64cd\u4f5c\n\n\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67e5\u8be2\u6392\u540d\u7684\u51fd\u6570\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\ninline int kth(int t,int k)\n{\n\tdown(t);//\u6ce8\u610f\u61d2\u6807\u8bb0\n\tif(tree[L(t)].size>=k)return kth(L(t),k);\n\telse if(tree[L(t)].size+1==k)return t;\n\telse return kth(R(t),k-tree[L(t)].size-1);\n}\n```\n\n## 4\u3001\u56de\u6536\u7a7a\u95f4\n\n\u56e0\u4e3a\u8fd9\u9053\u9898\u63d2\u5165\u7684\u6570\u6709\u5f88\u591a\uff0c\u800c\u6211\u4eec\u6709\u7a7a\u95f4\u9650\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u56de\u6536\u7a7a\u95f4\u3002\uff08\u5373\u628a\u6bcf\u4e00\u4e2aDelete\u64cd\u4f5c\u5220\u9664\u7684\u8282\u70b9\u56de\u6536\u5229\u7528\u8d77\u6765\uff09\n\n```cpp\nint rub[N+10],top=0;//\u88c5\u88ab\u5220\u9664\u7684\u8282\u70b9\n\ninline int rubbish(){return top?rub[top--]:++tot;}\n```\n\n## 5\u3001split\u5206\u79bb\u533a\u95f4\n\n\u5176\u5b9e\u539f\u7406\u975e\u5e38\u7b80\u5355\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/ve7qf30x.png)\n\u7136\u540e\u6211\u4eec\u5c31\u6210\u529f\u5730\u628a[3,4]\u533a\u95f4\u7528\u4e00\u4e2a\u5b50\u6811\u8868\u793a\u51fa\u6765\u4e86\u3002\n\n```cpp\ninline int split(int k,int len)\n{\n\tint x=kth(root,k),y=kth(root,k+len+1);\n   //\u56e0\u4e3a\u6211\u7684splay\u5728\u6700\u5f00\u59cb\u5904\u7406\u8fb9\u754c\u7684\u65f6\u5019\u5728\u5f00\u5934\u63d2\u5165\u4e86\u4e00\u4e2a-inf\uff0c\u6240\u4ee5\u6574\u4e2a\u6570\u7ec4\u90fd\u5411\u540e\u79fb\u52a8\u4e86\u4e00\u683c\n\tsplay(x,0);splay(y,x);\n\treturn L(y);//\u8fd4\u56de\u503c\u4e3a\u533a\u95f4\u6240\u8868\u793a\u5b50\u6811\u7684\u6839\u8282\u70b9\n}\n```\n\n## 6\u3001pushup\n\n\u5c31\u662f\u6211\u4eecsplay\u91cc\u9762\u66f4\u65b0\u7236\u4eb2\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u8fd9\u91cc\u7ef4\u62a4\u7684\u4fe1\u606f\u8f83\u591a\uff0c\u6240\u4ee5\u5355\u72ec\u62c9\u51fa\u6765\u8bf4\u4e00\u4e0b\u3002\n\n```cpp\ninline void up(int t)\n{\n\tint l=L(t),r=R(t);\n\tS(t)=S(l)+V(t)+S(r);//\u66f4\u65b0\u5b50\u6811\u548c\n\ttree[t].size=tree[l].size+tree[r].size+1;//\u66f4\u65b0\u5b50\u6811\u8282\u70b9\u6570\n\ttree[t].lmax=max(tree[l].lmax,S(l)+V(t)+tree[r].lmax);//\u66f4\u65b0\n\ttree[t].rmax=max(tree[r].rmax,S(r)+V(t)+tree[l].rmax);\n\ttree[t].zmax=max(max(tree[l].zmax,tree[r].zmax),tree[l].rmax+V(t)+tree[r].lmax);\n\tF(l)=F(r)=t;\n}\n```\n\n\n\n\u4e0a\u9762\u662f\u57fa\u672c\u64cd\u4f5c\u3002\n\n\u63a5\u4e0b\u6765\u662f\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u3002\n\n# \u6b63\u6587\uff1a\n\n## 1\u3001insert\n\n\u5176\u5b9e\u8fd9\u4e2a\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u66b4\u529b\u5408\u5e76\uff0c\u4f46\u662f\u8fd9\u4e2a\u6837\u5b50\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n*logn)\uff0c\u4f1a\u70b8\u6389\u3002\uff08\u56e0\u4e3a\u67094000000\u4e2a\u6570\uff09\n\n\u6240\u4ee5\u6211\u4eec\u8981\u628a\u63d2\u5165\u53d8\u6210O(n)\u7684\u3002\uff08\u5373\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u63d2\u5165\u6570\u7684\u4e2a\u6570\uff09\n\n\u600e\u4e48\u53d8\u5462\uff1f\uff1f\uff1f\u6211\u4eec\u5c31\u628a\u63d2\u5165\u7684\u6570O(n)\u5730\u53d8\u6210\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u7136\u540e\u76f4\u63a5\u63a5\u5230\u539f\u6765\u7684splay\u91cc\u9762\u3002\n\n```cpp\ninline void build(int l,int r,int fa)\n{\n\tint mid=l+r>>1,now=id[mid],pre=id[fa];tree[now].clear();\n\tif(l==r)\n\t{\n\t\tV(now)=S(now)=tree[now].zmax=a[mid];\n\t\ttree[now].size=1;\n\t\ttree[now].lmax=tree[now].rmax=max(a[mid],0);\n\t}\n\tV(now)=a[mid];\n\tif(l<mid)build(l,mid-1,mid);\n\tif(mid<r)build(mid+1,r,mid);\n\tup(now);\n\ttree[pre].ch[mid>=fa]=now;\n}\n\ninline void insert(int k,int len)\n{\n\tfor(re int i=1;i<=len;++i)scanf(\"%d\",&a[i]);//\u8bfb\u5165\n\tfor(re int i=1;i<=len;++i)id[i]=rubbish();//\u4ece\u56de\u6536\u7ad9\u91cc\u9762\u627e\u4e00\u4e2a\u6ca1\u7528\u7684\u70b9\u6765\u4f5c\u4e3a\u8fd9\u4e2a\u70b9\u7684id\n\tbuild(1,len,0);int z=id[(1+len)>>1];\n\tint x=kth(root,k+1),y=kth(root,k+2);\n\tsplay(x,0);splay(y,x);\n\ttree[y].ch[0]=z;up(y);up(x);\n}\n```\n\n## 2\u3001delete\n\n\u5220\u9664\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u5148split\u51fa\u8fd9\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u533a\u95f4\u56de\u6536\u6389\uff0c\u518d\u66f4\u65b0\u7236\u4eb2\u8282\u70b9\u3002\n\n```cpp\ninline void remove(int t)\n{\n\tif(L(t))remove(L(t));\n\tif(R(t))remove(R(t));\n\ttree[t].clear();rub[++top]=t;//\u6e05\u7a7a+\u56de\u6536\n}\n\ninline void erase(int k,int len)\n{\n\tint x=split(k,len),y=F(x);\n\tremove(x);tree[y].ch[0]=0;//\u628a\u8fd9\u4e2a\u70b9\u6e05\u9664\u6389\n   \tup(y);up(F(y));\n}\n```\n\n## 3\u3001reverse\n\n\u7ffb\u8f6c\uff0c\u6211\u4eec\u5c31split\u51fa\u6765\uff0c\u7136\u540e\u7ffb\u8f6c\u5c31\u884c\u4e86\u3002\n\n```cpp\ninline void rev(int t)\n{\n\tswap(tree[t].ch[0],tree[t].ch[1]);swap(tree[t].lmax,tree[t].rmax);tree[t].lazy_rev^=1;\n}\n\ninline void reverse(int k,int len)\n{\n\tint x=split(k,len),y=F(x);\n\trev(x);up(y);up(F(y));\n}\n```\n\n## 4\u3001make-same\n\n\u8fd9\u4e2a\u5c31\u662f\u6211\u4eeccover\u8986\u76d6\u64cd\u4f5c\uff0c\u8fd8\u662f\u4e00\u6837\uff0csplit\u51fa\u6765\u7136\u540e\u8986\u76d6\u3002\n\n```cpp\ninline void cov(int t,int x)\n{\n\tif(!t)return;\n\tV(t)=tree[t].lazy_cov=x;\n\tS(t)=tree[t].size*x;\n\ttree[t].lmax=tree[t].rmax=max(0,S(t));\n\ttree[t].zmax=max(x,S(t));\n}\n\ninline void cover(int k,int len,int val)\n{\n\tint x=split(k,len),y=F(x);\n\tcov(x,val);up(y);up(F(y));\n}\n```\n\n\n## 5\u3001get-sum\n\n\u8fd9\u4e2a\u5c31\u662f\u4e00\u4e2a\u67e5\u8be2\u533a\u95f4\u548c\u7684\u64cd\u4f5c\uff0c\u8fd8\u662f\u4e00\u6837\uff0c\u76f4\u63a5split+printf\n\n```cpp\ninline void query(int k,int len)\n{\n\tint x=split(k,len);\n\tprintf(\"%d\\n\",tree[x].sum);\n}\n```\n\n# \u5c3e\u58f0\n\n\u6700\u540e\u4e0a\u603b\u4ee3\u7801\uff1a\n\n## code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\n#define re register\n#define ll long long\n#define inf 10000002\n#define L(x) tree[x].ch[0]\n#define R(x) tree[x].ch[1]\n#define V(x) tree[x].val\n#define S(x) tree[x].sum\n#define F(x) tree[x].fa\n#define N 1000000\n\nstruct node{\n\tint ch[2],fa,sum,size,val,lmax,rmax,zmax,lazy_rev,lazy_cov;\n\tinline void clear(){ch[0]=ch[1]=fa=lazy_rev=0;lazy_cov=inf;}\n}tree[N+10];int tot,root;\n\nint rub[N+10],top=0;\n\ninline int rubbish(){return top?rub[top--]:++tot;}\n\ninline void rev(int t)\n{\n\tswap(tree[t].ch[0],tree[t].ch[1]);swap(tree[t].lmax,tree[t].rmax);tree[t].lazy_rev^=1;\n}\n\ninline void cov(int t,int x)\n{\n\tif(!t)return;\n\tV(t)=tree[t].lazy_cov=x;\n\tS(t)=tree[t].size*x;\n\ttree[t].lmax=tree[t].rmax=max(0,S(t));\n\ttree[t].zmax=max(x,S(t));\n}\n\ninline void down(int t)\n{\n\tif(tree[t].lazy_rev)\n\t{\n\t\trev(tree[t].ch[0]);rev(tree[t].ch[1]);\n\t\ttree[t].lazy_rev=0;\n\t}\n\tif(tree[t].lazy_cov!=inf)\n\t{\n\t\tcov(tree[t].ch[0],tree[t].lazy_cov);cov(tree[t].ch[1],tree[t].lazy_cov);\n\t\ttree[t].lazy_cov=inf;\n\t}\n}\n\ninline void up(int t)\n{\n\tint l=L(t),r=R(t);\n\tS(t)=S(l)+V(t)+S(r);\n\ttree[t].size=tree[l].size+tree[r].size+1;\n\ttree[t].lmax=max(tree[l].lmax,S(l)+V(t)+tree[r].lmax);\n\ttree[t].rmax=max(tree[r].rmax,S(r)+V(t)+tree[l].rmax);\n\ttree[t].zmax=max(max(tree[l].zmax,tree[r].zmax),tree[l].rmax+V(t)+tree[r].lmax);\n\tF(l)=F(r)=t;\n}\n\ninline void rotate(int x)\n{\n\tint y=F(x),z=F(y),k=R(y)==x,w=tree[x].ch[k^1];\n\tdown(y),down(x);\n\tif(z)tree[z].ch[R(z)==y]=x;\n\ttree[x].ch[k^1]=y;tree[y].ch[k]=w;\n\tif(w)F(w)=y;F(y)=x;F(x)=z;\n\tup(y);up(x);\n}\n\ninline void splay(int x,int goal)\n{\n\tint y,z;\n\twhile(F(x)!=goal)\n\t{\n\t\ty=F(x),z=F(y);\n\t\tif(z!=goal)(R(z)==y)^(R(y)==x)?rotate(x):rotate(y);\n\t\trotate(x);\n\t}\n\tup(x);\n\tif(!goal)root=x;\n}\n\ninline int kth(int t,int k)\n{\n\tdown(t);\n\tif(tree[L(t)].size>=k)return kth(L(t),k);\n\telse if(tree[L(t)].size+1==k)return t;\n\telse return kth(R(t),k-tree[L(t)].size-1);\n}\n\ninline int split(int k,int len)\n{\n\tint x=kth(root,k),y=kth(root,k+len+1);\n\tsplay(x,0);splay(y,x);\n\treturn L(y);\n}\n\nint a[N+10],id[N+10];\n\ninline void build(int l,int r,int fa)\n{\n\tint mid=l+r>>1,now=id[mid],pre=id[fa];tree[now].clear();\n\tif(l==r)\n\t{\n\t\tV(now)=S(now)=tree[now].zmax=a[mid];\n\t\ttree[now].size=1;\n\t\ttree[now].lmax=tree[now].rmax=max(a[mid],0);\n\t}\n\tV(now)=a[mid];\n\tif(l<mid)build(l,mid-1,mid);\n\tif(mid<r)build(mid+1,r,mid);\n\tup(now);\n\ttree[pre].ch[mid>=fa]=now;\n}\n\ninline void insert(int k,int len)\n{\n\tfor(re int i=1;i<=len;++i)scanf(\"%d\",&a[i]);\n\tfor(re int i=1;i<=len;++i)id[i]=rubbish();\n\tbuild(1,len,0);int z=id[(1+len)>>1];\n\tint x=kth(root,k+1),y=kth(root,k+2);\n\tsplay(x,0);splay(y,x);\n\ttree[y].ch[0]=z;up(y);up(x);\n}\n\ninline void remove(int t)\n{\n\tif(L(t))remove(L(t));\n\tif(R(t))remove(R(t));\n\ttree[t].clear();rub[++top]=t;\n}\n\ninline void erase(int k,int len)\n{\n\tint x=split(k,len),y=F(x);\n\tremove(x);tree[y].ch[0]=0;up(y);up(F(y));\n}\n\ninline void cover(int k,int len,int val)\n{\n\tint x=split(k,len),y=F(x);\n\tcov(x,val);up(y);up(F(y));\n}\n\ninline void reverse(int k,int len)\n{\n\tint x=split(k,len),y=F(x);\n\trev(x);up(y);up(F(y));\n}\n\ninline void query(int k,int len)\n{\n\tint x=split(k,len);\n\tprintf(\"%d\\n\",tree[x].sum);\n}\n\nint n,m;\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\ttree[0].zmax=-inf;a[1]=a[n+2]=-inf;\n\tfor(re int i=1;i<=n;++i)scanf(\"%d\",&a[i+1]);\n\tfor(re int i=1;i<=n+2;++i)id[i]=rubbish();\n\tbuild(1,n+2,0);root=id[(n+3)>>1];\n\tchar opt[10];int x,len,y;\n\tfor(re int i=1;i<=m;++i)\n\t{\n\t\tscanf(\" %s\",opt);\n\t\tif(opt[0]=='M'&&opt[2]=='X')\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&len);\n\t\t\tint t=split(x,len);\n\t\t\tprintf(\"%d\\n\",tree[t].zmax);\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt[0]=='G'&&strlen(opt)==3)\n\t\t{\n\t\t\tscanf(\"%d\",&x);\n\t\t\tquery(x,1);\n\t\t\tcontinue;\n\t\t}\n\t\tscanf(\"%d%d\",&x,&len);\n\t\tif(opt[0]=='I')insert(x,len);\n\t\telse if(opt[0]=='D')erase(x,len);\n\t\telse if(opt[0]=='M'&&opt[2]=='K')scanf(\"%d\",&y),cover(x,len,y);\n\t\telse if(opt[0]=='R')reverse(x,len);\n\t\telse if(opt[0]=='G'&&opt[3]=='-')query(x,len);\n\t\telse if(opt[0]=='G')query(x,1);\n\t}\n\treturn 0;\n}\n```\n\n\n# \u540e\u8bb0\n\n\u4ee5\u540e\u50cf\u8fd9\u79cd\u5f88\u88f8\u7684\u5e73\u8861\u6811\u7684\u9898\u4e00\u5b9a\u8981\u5c0f\u5fc3\u5361\u5185\u5b58\u548c\u4ee3\u7801\u7ec6\u8282~~\uff08\u56e0\u4e3a\u8fd9\u79cd\u4e00\u822c\u7801\u91cf\u5c31\u662f200\u884c\u5de6\u53f3\u5427\uff0c\u5982\u679c\u54ea\u4e2a\u5730\u65b9\u5199\u9519\u4e86\u7684\u8bdd\uff0cdebug\u3002\u3002\u3002\uff09~~\n\nBingo~~",
        "postTime": 1569380116,
        "uid": 111990,
        "name": "\u849f\u84bb\u521d\u97f3\u30df\u30af",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2710 \u3010\u6570\u5217\u3011"
    },
    {
        "content": ">\u533a\u95f4\u64cd\u4f5c\u96c6\u5927\u6210\u8005\u2026\u2026\uff1f\n\n>\u53ef\u80fd\u5427\u2026\u2026\n\nby\u67d0\u4f4d\u4e0d\u613f\u610f\u900f\u9732\u59d3\u540d\u7684\u5de8\u5b66\n***\n\u672c\u9898\u9700\u8981\u5b9e\u73b0\uff1a\n- INSERT\n- DELETE\n- REVERSE\n- MAKE-SAME\n- GET-SUM\n- GET\n- MAX-SUM\n\n\u5171\u4e03\u4e2a\u64cd\u4f5c\n\n\u5168\u90e8\u64cd\u4f5c\u90fd\u6d89\u53ca\u5230\u5e8f\u5217\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4f7f\u7528splay\u6216\u8005FHQ-treap\u5b9e\u73b0\n\n\u8fd9\u91cc\u4f7f\u7528FHQ-treap\n***\n\u524d\u7f6e\u829d\u58eb\n- FHQ-treap\n\n\u86e4\uff1f\u4e0d\u4f1a\uff1f\u5de6\u8f6c\u5ea6\u5a18/\u5fc5\u5e94\u5a18/\u8c37\u6b4c\u5a18\n\n- \u533a\u95f4\u7ffb\u8f6c\n\n\u5de6\u8f6cP3391\u9898\u89e3\u533a\uff0c\u5305\u6559\u5305\u4f1a\uff0c\u4e0d\u4f1a\u4e0d\u8981\u94b1~~\u672c\u6765\u5c31\u4e0d\u8981\u94b1\u5427~~\n\n- \u6700\u5927\u5b50\u6bb5\u548c\n\n\u5de6\u8f6cP4513\n***\n\u975e\u5fc5\u8981\n- \u7b1b\u5361\u5c14\u6811\u5efa\u6811\n\n\u5b9e\u9645\u4e0a\u4e0d\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7528\u66b4\u529b\u63d2\u5165\u4e5f\u80fd\u8fc7\uff0c\u4f46\u53ef\u80fd\u9700\u8981\u5361\u5361\u5e38\n\n- \u5361\u5e38\u6280\u5de7\n***\n0.\u521d\u59cb\u5b9a\u4e49\n```cpp\nstruct note {\n\tint val;//\u8282\u70b9\u6743\u503c\n\tint rd;//\u4f18\u5148\u503c\n\tint siz;//\u5b50\u6811\u5927\u5c0f\n\tint ch[2];//\u5de6\u53f3\u513f\u5b50\n\tint tag;//\u7ffb\u8f6c\u6807\u8bb0\n\tint cvr;//make-same\u6807\u8bb0\n\tint sum;//\u533a\u95f4\u548c\n\tint lmax,rmax,mmax;//\u6700\u5927\u5b50\u6bb5\u548c\n\tnote() {\n\t\tch[0]=ch[1]=val=siz=sum=tag=0;\n\t\tcvr=inf;\n\t}\n\tinline void clear() {\n\t\tch[0]=ch[1]=val=siz=sum=tag=0;\n\t\tcvr=inf;\n\t}\n};\n```\n***\n-1.\u4fe1\u606f\u4e0a\u4f20\uff0c\u6807\u8bb0\u4e0b\u653e\n```cpp\ninline void up(int o) {\n\tint ls=t[o].ch[0],rs=t[o].ch[1];\n\tt[o].siz=t[ls].siz+t[rs].siz+1;\n\tt[o].sum=t[o].val+t[ls].sum+t[rs].sum;\n\tt[o].lmax=max(0,max(t[ls].lmax,t[ls].sum+t[rs].lmax+t[o].val));\n\tt[o].rmax=max(0,max(t[rs].rmax,t[rs].sum+t[ls].rmax+t[o].val));\n\tt[o].mmax=max(t[o].val,t[ls].rmax+t[rs].lmax+t[o].val);\n\tif (ls) {\n\t\tt[o].mmax=max(t[o].mmax,t[ls].mmax);\n\t}\n\tif (rs) {\n\t\tt[o].mmax=max(t[o].mmax,t[rs].mmax);\n\t}\n}\ninline void flip(int o) {\n\tswap(t[o].ch[0],t[o].ch[1]);\n\tswap(t[o].lmax,t[o].rmax);\n\tt[o].tag^=1;\n}\ninline void cvr(int o,int val) {\n\tt[o].cvr=t[o].val=val;\n\tt[o].sum=t[o].siz*val;\n\tt[o].mmax=max(t[o].val,t[o].sum);\n\tt[o].lmax=t[o].rmax=max(0,t[o].sum);\n}\ninline void down(int o) {\n\tint ls=t[o].ch[0],rs=t[o].ch[1];\n\tif (t[o].tag) {\n\t\tif (ls) {\n\t\t\tflip(ls);\n\t\t}\n\t\tif (rs) {\n\t\t\tflip(rs);\n\t\t}\n\t}\n\tif (t[o].cvr!=inf) {\n\t\tif (ls) {\n\t\t\tcvr(ls,t[o].cvr);\n\t\t}\n\t\tif (rs) {\n\t\t\tcvr(rs,t[o].cvr);\n\t\t}\n\t}\n\tt[o].tag=0;\n\tt[o].cvr=inf;\n}\n```\n***\n\n1.\u63d2\u5165\u64cd\u4f5c\n\n\u7b2c\u4e00\u4e2a\u8981\u5b9e\u73b0\u7684\u64cd\u4f5c\uff0c\u7136\u800c\u5e76\u4e0d\u662f\u6700\u7b80\u5355\u7684\n\n\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u66b4\u529b\u63d2\u5165\uff0c\u4f46\u2026\u2026\n\n\u8fd9\u6837\u5b50\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(qlogn)\u7684\uff0c\u5176\u4e2dq\u4e3a\u63d2\u5165\u5e8f\u5217\u4e2d\u6570\u7684\u4e2a\u6570\n\n\u5982\u4f55\u4f18\u5316\uff1f\n\n\u7b1b\u5361\u5c14\u6811\u5efa\u6811\uff01\n\n\u81ea\u884c\u5ea6\u5a18\u5177\u4f53\u65b9\u6cd5\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u4ee3\u7801\n```cpp\ninline int build(int len,int a[]) {\n\ttop=0;\n\tint temp=new_node(a[1]);\n\tstk[++top]=temp;\n\tfor(int i=2;i<=len;i++) {\n\t\tint last=0;\n\t\tint cur=new_node(a[i]);\n\t\twhile(top&&t[stk[top]].rd>t[cur].rd) {\n\t\t\tup(stk[top]);\n\t\t\tlast=stk[top];\n\t\t\tstk[top--]=0;\n\t\t}\n\t\tt[cur].ch[0]=last;\n\t\tup(cur);\n\t\tif (top) {\n\t\t\tt[stk[top]].ch[1]=cur;\n\t\t\tup(stk[top]);\n\t\t}\n\t\tstk[++top]=cur;\n\t}\n\twhile(top) {\n\t\tup(stk[top--]);\n\t}\n\treturn stk[1];\n}\n```\n\u8fd4\u56de\u7684\u662f\u65b0\u5efa\u6811\u7684\u6839\n\n\u6709\u4e86\u8fd9\u4e2a\u51fd\u6570\uff0cinsert\u5c31\u975e\u5e38\u597d\u5199\u4e86\n```cpp\ninline void insert(int pos,int len,int a[]) {\n\tint root1=build(len,a);\n\tint x,y;\n\tsplit(root,pos,x,y);\n\troot=merge(merge(x,root1),y);\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6O(q+logn),\u5176\u4e2dq\u4e3a\u5e8f\u5217\u4e2d\u6570\u7684\u4e2a\u6570\n***\n2.delete\u64cd\u4f5c\n\n\u628a\u8981\u5220\u9664\u7684\u533a\u95f4\u63d0\u53d6\u51fa\u6765\u76f4\u63a5\u4e2d\u5e8f\u5386\u5220\u9664\u5373\u53ef\n\n\u6ce8\u610f\u5783\u573e\u56de\u6536\n```cpp\nvoid recycle(int o) {\n\tint ls=t[o].ch[0],rs=t[o].ch[1];\n\tif (!o) {\n\t\treturn;\n\t}\n\tif (ls) {\n\t\trecycle(ls);\n\t}\n\ttrash.push(o);\n\tif (rs) {\n\t\trecycle(rs);\n\t}\n}\n\ninline void remove(int pos,int len) {\n\tint x,y,z,u;\n\tsplit(root,pos+len-1,x,y);\n\tsplit(x,pos-1,z,u);\n\trecycle(u);\n\troot=merge(z,y);\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6O(logn+q)\n***\n3.REVERSE\u64cd\u4f5c\n\n\u5de6\u8f6c\u6587\u827a\u5e73\u8861\u6811\n\n\u6ce8\u610f\u6807\u8bb0\u4e0b\u653e\n```cpp\ninline void reverse(int pos,int len) {\n\tint x,y,z,u;\n\tsplit(root,pos+len-1,x,y);\n\tsplit(x,pos-1,z,u);\n\tt[u].tag^=1;\n\tswap(t[u].lmax,t[u].rmax);\n\tswap(t[u].ch[0],t[u].ch[1]);\n\troot=merge(merge(z,u),y);\n\treturn;\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6O(logn)\n***\n4.MAKE-SAME\u64cd\u4f5c\n\n\u5168\u573a\u6700\u70e6\u64cd\u4f5c\uff08\u56e0\u4e3a\u8981\u624b\u52a8\u66f4\u65b0\n```cpp\ninline void cover(int pos,int len,int val) {\n\tint x,y,u,z;\n\tsplit(root,pos+len-1,x,y);\n\tsplit(x,pos-1,z,u);\n\tt[u].val=t[u].cvr=val;\n\tt[u].sum=val*t[u].siz;\n\tt[u].lmax=t[u].rmax=max(0,t[u].sum);\n\tt[u].mmax=max(t[u].val,t[u].sum);\n\tt[u].tag=0;\n\troot=merge(merge(z,u),y);\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6O(logn)\n***\n5.\u4e09\u5927\u8be2\u95ee\n\n\u56e0\u4e3a\u4ee3\u7801\u90fd\u5f88\u65e0\u8111\u5c31\u653e\u4e00\u8d77\u4e86\n\n```cpp\ninline int get_sum(int pos,int len) {\n\tint x,y,z,u;\n\tsplit(root,pos+len-1,x,y);\n\tsplit(x,pos-1,z,u);\n\tint ans=t[u].sum;\n\troot=merge(merge(z,u),y);\n\treturn ans;\n}\ninline int get_max_sum(int pos,int len) {\n\tint x,y,z,u;\n\tsplit(root,pos+len-1,x,y);\n\tsplit(x,pos-1,z,u);\n\tint ans=t[u].mmax;\n\troot=merge(merge(z,u),y);\n\treturn ans;\n}\ninline int ask_point(int pos) {\n\tint x,y,z,u;\n\tsplit(root,pos,x,y);\n\tsplit(x,pos-1,z,u);\n\tint ans=t[u].val;\n\troot=merge(merge(z,u),y);\n\treturn ans;\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6O(logn)\n***\n\u6700\u540e\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u6838\u5fc3\u51fd\u6570\uff1amerge\u548csplit\n```cpp\nvoid split(int x,int k,int &a,int &b) {\n\tif (!x||!k) {\n\t\ta=0;\n\t\tb=x;\n\t\treturn;\n\t}\n\tdown(x);\n\tif (k>t[t[x].ch[0]].siz) {\n\t\ta=x;\n\t\tsplit(t[x].ch[1],k-t[t[x].ch[0]].siz-1,t[x].ch[1],b);\n\t\tup(x);\n\t} else {\n\t\tb=x;\n\t\tsplit(t[x].ch[0],k,a,t[x].ch[0]);\n\t\tup(x);\n\t}\n}\nint merge(int x,int y) {\n\tif (x) {\n\t\tdown(x);\n\t}\n\tif (y) {\n\t\tdown(y);\n\t}\n\tif (!x||!y) {\n\t\treturn x^y;\n\t}\n\tif (t[x].rd<t[y].rd) {\n\t\tt[x].ch[1]=merge(t[x].ch[1],y);\n\t\tup(x);\n\t\treturn x;\n\t} else {\n\t\tt[y].ch[0]=merge(x,t[y].ch[0]);\n\t\tup(y);\n\t\treturn y;\n\t}\n}\n```\n\u9075\u5faa\u539f\u5219\uff1a\u7528\u65f6\u95f4\u6362\u5b89\u5168\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u5728\u5199\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u80fd\u4e0a\u4f20\u4e0b\u653e\u5c31\u4e0a\u4f20\u4e0b\u653e\uff0c\u4fdd\u969c\u5b89\u5168\n***\n\u6700\u540e\u7684\u6700\u540e\uff0c\u4e00\u70b9\u4e2a\u4eba\u611f\u60f3\n\n\u524d\u524d\u540e\u540e\u8c03\u4e86\u534a\u4e2a\u5bd2\u5047\uff0c\u8fd8\u662f\u5f88\u6709\u6536\u83b7\u7684\n\nup,down,merge,split\u56db\u4e2a\u6838\u5fc3\u51fd\u6570\u4e00\u5b9a\u8981\u597d\u597d\u7406\u89e3\uff0c\u4e0d\u7136\u4e00\u51fabug\u5c31\u2026\u2026\n\n\u653e\u603b\u4f53\u4ee3\u7801 ~~\u6211\u77e5\u9053\u4f60\u4eec\u53ea\u60f3\u770b\u8fd9\u4e2a~~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstdlib>\n#include <ctime>\n#include <queue>\n#include <string>\nusing namespace std;\n\ninline int Random() {\n\treturn (rand()<<15)|rand();\n}\n\ninline void read(int &x) {\n\tx=0;\n\tint f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') {\n\t\tif (ch=='-') {\n\t\t\tf=-1;\n\t\t}\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=(x<<3)+(x<<1)+ch-'0';\n\t\tch=getchar();\n\t}\n\tx*=f;\n}\n\nqueue<int> trash;//????????\nint root;//???????\nconst int inf=2e9;\n\nstruct note {\n\tint val;//??\n\tint rd;//???????\n\tint siz;//?????\n\tint ch[2];//???????\n\tint tag;//????????\n\tint cvr;//????????\n\tint sum;//???\n\tint lmax,rmax,mmax;//??????\n\tnote() {\n\t\tch[0]=ch[1]=val=siz=sum=tag=0;\n\t\tcvr=inf;\n\t}\n\tinline void clear() {\n\t\tch[0]=ch[1]=val=siz=sum=tag=0;\n\t\tcvr=inf;\n\t}\n};\n\nint stk[500010],top;\n\nstruct fhq_treap {\n\tnote t[200010];\n\tint cnt;\n\t//??????\n\tinline int q_malloc() {\n\t\tint x;\n\t\treturn (!trash.empty()) ? (x=trash.front(),t[x].clear() , trash.pop() , x) : (++cnt);\n\t}\n\t//??????\n\tinline int new_node(int val) {\n\t\tint x=q_malloc();\n\t\tt[x].val=t[x].sum=t[x].mmax=val;\n\t\tt[x].lmax=t[x].rmax=max(0,val);\n\t\tt[x].rd=Random();\n\t\tt[x].siz=1;\n\t\treturn x;\n\t}\n\t//?????\n\tinline void up(int o) {\n\t\tint ls=t[o].ch[0],rs=t[o].ch[1];\n\t\tt[o].siz=t[ls].siz+t[rs].siz+1;\n\t\tt[o].sum=t[o].val+t[ls].sum+t[rs].sum;\n\t\tt[o].lmax=max(0,max(t[ls].lmax,t[ls].sum+t[rs].lmax+t[o].val));\n\t\tt[o].rmax=max(0,max(t[rs].rmax,t[rs].sum+t[ls].rmax+t[o].val));\n\t\tt[o].mmax=max(t[o].val,t[ls].rmax+t[rs].lmax+t[o].val);\n\t\tif (ls) {\n\t\t\tt[o].mmax=max(t[o].mmax,t[ls].mmax);\n\t\t}\n\t\tif (rs) {\n\t\t\tt[o].mmax=max(t[o].mmax,t[rs].mmax);\n\t\t}\n\t}\n\t//????\n\tinline void flip(int o) {\n\t\tswap(t[o].ch[0],t[o].ch[1]);\n\t\tswap(t[o].lmax,t[o].rmax);\n\t\tt[o].tag^=1;\n\t}\n\t//????????????\n\tinline void cvr(int o,int val) {\n\t\tt[o].cvr=t[o].val=val;\n\t\tt[o].sum=t[o].siz*val;\n\t\tt[o].mmax=max(t[o].val,t[o].sum);\n\t\tt[o].lmax=t[o].rmax=max(0,t[o].sum);\n\t}\n\t//?????\n\tinline void down(int o) {\n\t\tint ls=t[o].ch[0],rs=t[o].ch[1];\n\t\tif (t[o].tag) {\n\t\t\tif (ls) {\n\t\t\t\tflip(ls);\n\t\t\t}\n\t\t\tif (rs) {\n\t\t\t\tflip(rs);\n\t\t\t}\n\t\t}\n\t\tif (t[o].cvr!=inf) {\n\t\t\tif (ls) {\n\t\t\t\tcvr(ls,t[o].cvr);\n\t\t\t}\n\t\t\tif (rs) {\n\t\t\t\tcvr(rs,t[o].cvr);\n\t\t\t}\n\t\t}\n\t\tt[o].tag=0;\n\t\tt[o].cvr=inf;\n\t}\n\t//???\n\t//len:??????a[]:?????????\n\t//?????????\n\tinline int build(int len,int a[]) {\n\t\ttop=0;\n\t\tint temp=new_node(a[1]);\n\t\tstk[++top]=temp;\n\t\tfor(int i=2;i<=len;i++) {\n\t\t\tint last=0;\n\t\t\tint cur=new_node(a[i]);\n\t\t\twhile(top&&t[stk[top]].rd>t[cur].rd) {\n\t\t\t\tup(stk[top]);\n\t\t\t\tlast=stk[top];\n\t\t\t\tstk[top--]=0;\n\t\t\t}\n\t\t\tt[cur].ch[0]=last;\n\t\t\tup(cur);\n\t\t\tif (top) {\n\t\t\t\tt[stk[top]].ch[1]=cur;\n\t\t\t\tup(stk[top]);\n\t\t\t}\n\t\t\tstk[++top]=cur;\n\t\t}\n\t\twhile(top) {\n\t\t\tup(stk[top--]);\n\t\t}\n\t\treturn stk[1];\n\t}\n\t//??????\n\t//a???????\n\t//b???????\n\t//x???????????\n\t//k??????????\n\tvoid split(int x,int k,int &a,int &b) {\n\t\tif (!x||!k) {\n\t\t\ta=0;\n\t\t\tb=x;\n\t\t\treturn;\n\t\t}\n\t\tdown(x);\n\t\tif (k>t[t[x].ch[0]].siz) {\n\t\t\ta=x;\n\t\t\tsplit(t[x].ch[1],k-t[t[x].ch[0]].siz-1,t[x].ch[1],b);\n\t\t\tup(x);\n\t\t} else {\n\t\t\tb=x;\n\t\t\tsplit(t[x].ch[0],k,a,t[x].ch[0]);\n\t\t\tup(x);\n\t\t}\n\t}\n\t//??????\n\t//x??????????\n\t//y??????????\n\tint merge(int x,int y) {\n\t\tif (x) {\n\t\t\tdown(x);\n\t\t}\n\t\tif (y) {\n\t\t\tdown(y);\n\t\t}\n\t\tif (!x||!y) {\n\t\t\treturn x^y;\n\t\t}\n\t\tif (t[x].rd<t[y].rd) {\n\t\t\tt[x].ch[1]=merge(t[x].ch[1],y);\n\t\t\tup(x);\n\t\t\treturn x;\n\t\t} else {\n\t\t\tt[y].ch[0]=merge(x,t[y].ch[0]);\n\t\t\tup(y);\n\t\t\treturn y;\n\t\t}\n\t}\n\t//?????\n\tvoid recycle(int o) {\n\t\tint ls=t[o].ch[0],rs=t[o].ch[1];\n\t\tif (!o) {\n\t\t\treturn;\n\t\t}\n\t\tif (ls) {\n\t\t\trecycle(ls);\n\t\t}\n\t\ttrash.push(o);\n\t\tif (rs) {\n\t\t\trecycle(rs);\n\t\t}\n\t}\n\t//?????\n\t//pos??????\n\t//len????????\n\t//a[]???\n\tinline void insert(int pos,int len,int a[]) {\n\t\tint root1=build(len,a);\n\t\tint x,y;\n\t\tsplit(root,pos,x,y);\n\t\troot=merge(merge(x,root1),y);\n\t}\n\t//??????\n\t//pos???????????\n\t//len????????\n\tinline void remove(int pos,int len) {\n\t\tint x,y,z,u;\n\t\tsplit(root,pos+len-1,x,y);\n\t\tsplit(x,pos-1,z,u);\n\t\trecycle(u);\n\t\troot=merge(z,y);\n\t}\n\t//??????\n\t//pos???????????\n\t//len????????\n\tinline void reverse(int pos,int len) {\n\t\tint x,y,z,u;\n\t\tsplit(root,pos+len-1,x,y);\n\t\tsplit(x,pos-1,z,u);\n\t\tt[u].tag^=1;\n\t\tswap(t[u].lmax,t[u].rmax);\n\t\tswap(t[u].ch[0],t[u].ch[1]);\n\t\troot=merge(merge(z,u),y);\n\t\treturn;\n\t}\n\t//?????\n\t//pos??????????\n\t//len???????\n\t//val?????\n\tinline void cover(int pos,int len,int val) {\n\t\tint x,y,u,z;\n\t\tsplit(root,pos+len-1,x,y);\n\t\tsplit(x,pos-1,z,u);\n\t\tt[u].val=t[u].cvr=val;\n\t\tt[u].sum=val*t[u].siz;\n\t\tt[u].lmax=t[u].rmax=max(0,t[u].sum);\n\t\tt[u].mmax=max(t[u].val,t[u].sum);\n\t\tt[u].tag=0;\n\t\troot=merge(merge(z,u),y);\n\t}\n\tinline int get_sum(int pos,int len) {\n\t\tint x,y,z,u;\n\t\tsplit(root,pos+len-1,x,y);\n\t\tsplit(x,pos-1,z,u);\n\t\tint ans=t[u].sum;\n\t\troot=merge(merge(z,u),y);\n\t\treturn ans;\n\t}\n\tinline int get_max_sum(int pos,int len) {\n\t\tint x,y,z,u;\n\t\tsplit(root,pos+len-1,x,y);\n\t\tsplit(x,pos-1,z,u);\n\t\tint ans=t[u].mmax;\n\t\troot=merge(merge(z,u),y);\n\t\treturn ans;\n\t}\n\tinline int ask_point(int pos) {\n\t\tint x,y,z,u;\n\t\tsplit(root,pos,x,y);\n\t\tsplit(x,pos-1,z,u);\n\t\tint ans=t[u].val;\n\t\troot=merge(merge(z,u),y);\n\t\treturn ans;\n\t}\n};\n\nfhq_treap ft;\nint n,m;\n\ninline void read_str(char p[]) {\n\tchar ch=getchar();\n\tint len=0;\n\twhile(!isalpha(ch)&&ch!='-') {\n\t\tch=getchar();\n\t}\n\twhile(isalpha(ch)||ch=='-') {\n\t\tp[len++]=ch;\n\t\tch=getchar();\n\t}\n}\n\nint a[4000010];\n\nint main() {\n\tsrand((unsigned)time(0));\n\tread(n),read(m);\n\tfor(int i=1;i<=n;i++) {\n\t\tread(a[i]);\n\t}\n\troot=ft.build(n,a);\n\tint pos,len,val;\n\tstring s;\n\tfor(int i=1;i<=m;i++) {\n\t\tcin>>s;\n\t\tif (s==\"INSERT\") {\n\t\t\tread(pos),read(len);\n\t\t\tfor(int i=1;i<=len;i++) {\n\t\t\t\tread(a[i]);\n\t\t\t}\n\t\t\tft.insert(pos,len,a);\n\t\t} else if(s==\"DELETE\") {\n\t\t\tread(pos),read(len);\n\t\t\tft.remove(pos,len);\n\t\t} else if (s==\"REVERSE\") {\n\t\t\tread(pos),read(len);\n\t\t\tft.reverse(pos,len);\n\t\t} else if (s==\"MAKE-SAME\") {\n\t\t\tread(pos),read(len),read(val);\n\t\t\tft.cover(pos,len,val);\n\t\t} else if (s==\"MAX-SUM\"){\n\t\t\tread(pos),read(len);\n\t\t\tprintf(\"%d\\n\",ft.get_max_sum(pos,len));\n\t\t} else if (s==\"GET-SUM\") {\n\t\t\tread(pos),read(len);\n\t\t\tprintf(\"%d\\n\",ft.get_sum(pos,len));\n\t\t} else {\n\t\t\tread(pos);\n\t\t\tprintf(\"%d\\n\",ft.ask_point(pos));\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n```",
        "postTime": 1559878476,
        "uid": 186535,
        "name": "that_lemon",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P2710 \u6570\u5217"
    },
    {
        "content": "~~Leafy Tree\u7ec8\u4e8e\u7ffb\u8eab\u4e86!~~\n\n## Leafy Tree\u5927\u6cd5\u543c\uff01\n\nLeafy Tree\u5728\u6211\u7684\u5370\u8c61\u4e2d\uff0c\u4e00\u76f4\u662f\u4e00\u4e2a\u6bd4\u8f83\u51b7\u95e8\u7684\u4e1c\u897f\u3002\n\n\u6211\u4e0eLeafy Tree\u7684\u6545\u4e8b\uff1a[Link](https://www.luogu.org/paste/r6ljp3iv)(Link\u91cc\u9762\u7684\u6587\u7ae0\u53ef\u80fd\u6709\u52a9\u4e8e\u7406\u89e3\u672c\u6587)\n\n\u6211\u51e0\u4e4e\u6ca1\u6709\u770b\u5230\u6709\u5927\u4f6c\u62ffLeafy Tree\u6765\u505a\u533a\u95f4\u6811\u7684\u9898\u3002\n\n~~\u6211\u7684Leafy Tree\u9898\u89e3\u4e5f\u603b\u662f\u5495\u5495~~\n\n\u4e0d\u8fc7\u8fd9\u9053\u9898\u6709\u4e00\u53e5\u8bdd\uff1a\u201c\u6570\u636e\u968f\u673a\u751f\u6210\u201d\n\n\u8fd9\u5c31\u5f88\u5999\u4e86\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u8bc1\u660e$SLT$\u5728\u968f\u673a\u6570\u636e\u4e0b\u662f$O(mlogn)$\u7684\u3002\n\n\u8fd9\u4e1c\u897f\u548c\u7ebf\u6bb5\u6811\u6709\u6781\u5927\u7684\u76f8\u4f3c\u6027\uff0cpushup\u548cladd\u90fd\u76f8\u5f53\u7684\u597d\u5199\uff01\n\n\u4ee3\u7801\u8d85\u77ed\u7684\uff01\n\n\u8dd1\u7684\u8d85\u5feb\u7684\uff08\u867d\u7136\u81ea\u5e262\u7684\u5927\u5e38\u6570\uff0c\u800c\u4e14\u6ca1\u5feb\u8bfb\uff09\uff01\n\n(\u7801\u98ce\u6781\u7aef\u4e0d\u826f\uff0c\u4ec5\u7528\u4e8e\u4f5cLeafy Tree\u7814\u7a76\u7684\u53c2\u8003)\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#define Maxn 500500\nusing namespace std;\nint n,m;\nstruct Node{\n  int l,r,c,x,ls,rs,s;\n  //c:\u5927\u5c0f\u57df; x:\u533a\u95f4\u548c; \n  //ls:\u5de6\u8fb9\u5f00\u59cb\u7684\u6700\u5927\u5b50\u533a\u95f4\u548c;\n  //rs:\u53f3\u8fb9\u5f00\u59cb\u7684\u6700\u5927\u5b50\u533a\u95f4\u548c; \n  //s:\u6700\u5927\u5b50\u533a\u95f4\u548c;\n  bool tag,fi;int fill;\n  //tag:\u662f\u5426\u53cd\u8f6c;\n  //fi:\u662f\u5426\u8986\u76d6;\n  inline void ladd()\n  {\n    swap(ls,rs);\n    swap(l,r);\n    tag^=1;\n    //\u8f85\u52a9\u63a8\u7ffb\u8f6c\u61d2\u6807\u8bb0\n  }\n  inline void _fill(int num)\n  {\n    x=c*num;\n    if (num>0)\n      ls=rs=s=c*num;\n    else ls=rs=s=num;\n    fill=num;\n    fi=1;\n    //\u8f85\u52a9\u63a8\u8986\u76d6\u61d2\u6807\u8bb0\n  }\n}a[Maxn<<1];\nint wfc,wfl,wfr,tn,root;\nint top,rubbish[Maxn<<1];\ninline int create()\n{\n  if (!top)return ++tn;\n  int pos=rubbish[top--];\n  a[pos].l=a[pos].r=a[pos].c=a[pos].fill=0;\n  a[pos].x=a[pos].s=a[pos].ls=a[pos].rs=0;\n  a[pos].fi=a[pos].tag=0;\n  return pos;\n  //\u542b\u6709\u5783\u573e\u56de\u6536\n}\n//pushup\ninline void up(int num)\n{\n  int l=a[num].l,r=a[num].r;\n  a[num].c=a[l].c+a[r].c;\n  a[num].x=a[l].x+a[r].x;\n  a[num].ls=max(a[l].x+a[r].ls,a[l].ls);\n  a[num].rs=max(a[r].x+a[l].rs,a[r].rs);\n  a[num].s=max(a[l].s,max(a[r].s,a[l].rs+a[r].ls));\n}\n//\u4e0b\u63a8\u61d2\u6807\u8bb0\ninline void ladd(int num)\n{\n  if (a[num].fi){\n  \ta[num].fi=a[num].tag=0;\n    a[a[num].l]._fill(a[num].fill);\n    a[a[num].r]._fill(a[num].fill);\n  }\n  if (a[num].tag){\n    a[num].tag=0;\n    a[a[num].l].ladd();\n    a[a[num].r].ladd();\n  }\n}\nint tl,tr,tm,left[2550],middle[2550],right[2550];\n//\u628a\u6811\u5206\u88c2\u6210\u4e09\u4e2a\u68ee\u6797\nvoid spilt(int l,int r,int num)\n{\n  if (r<wfl)left[++tl]=num;\n  else if (wfl<=l&&r<=wfr)middle[++tm]=num;\n  else if (wfr<l)right[++tr]=num;\n  else {\n  \tladd(num);\n    int mid=l+a[a[num].l].c-1;\n    spilt(l,mid,a[num].l);\n    spilt(mid+1,r,a[num].r);\n    rubbish[++top]=num;\n  }\n}\nint _marge(int x,int y)\n{\n  if (!x||!y)return x+y;\n  int num=create();\n  a[num].l=x;a[num].r=y;\n  up(num);\n  return num;\n}\nint t[10500],ttn;\n//\u4e09\u4e2a\u68ee\u6797\u5408\u6210\u4e00\u68f5\u6811\nvoid marge()\n{\n  ttn=0;\n  for (int i=1;i<=tl;i++)t[ttn++]=left[i];\n  for (int i=1;i<=tm;i++)t[ttn++]=middle[i];\n  for (int i=1;i<=tr;i++)t[ttn++]=right[i];\n  while(ttn>1){\n    for (int i=0;i<((ttn+1)>>1);i++)\n     t[i]=_marge(t[i<<1],t[i<<1|1]);\n    for (int i=(ttn+1)>>1;i<=ttn;i++)t[i]=0;\n    ttn=(ttn+1)>>1;\n  }root=t[0];\n}\nint xx[Maxn];\n//\u5efa\u7acb\u5e73\u8861\u4e8c\u53c9\u6811\nvoid build(int l,int r,int num)\n{\n  //printf(\"%d %d %d\\n\",l,r,num);\n  if (l==r){\n    a[num].ls=a[num].rs=a[num].s=a[num].x=xx[l];\n    a[num].c=1;\n    return ;\n  }int mid=(l+r)>>1;\n  build(l,mid,a[num].l=create());\n  build(mid+1,r,a[num].r=create());\n  up(num);\n}\nNode ans[2550];\nint tans;\n//\u628a\u533a\u95f4\u7684\u5bf9\u5e94\u70b9COPY\u51fa\u6765\nvoid query(int l,int r,int num)\n{\n  ladd(num);\n  if (wfl<=l&&r<=wfr){\n    ans[++tans]=a[num];\n    return ;\n  }int mid=l+a[a[num].l].c-1;\n  if (wfl<=mid)query(l,mid,a[num].l);\n  if (wfr>mid)query(mid+1,r,a[num].r);\n}\n//\u56de\u6536\u67d0\u68f5\u5b50\u6811\nvoid del(int num)\n{\n  if (!num)return ;\n  rubbish[++top]=num;\n  del(a[num].l);\n  del(a[num].r);\n}\nchar ord[10];\nint main()\n{\n  scanf(\"%d%d\",&n,&m);\n  for (int i=1;i<=n;i++)scanf(\"%d\",&xx[i]);\n  build(1,n,root=tn=1);\n  for (int i=1;i<=m;i++){\n    scanf(\"%s%d\",ord,&wfl);\n\n    //GET\n    if (ord[0]=='G'&&ord[3]==0){\n      wfr=wfl;tans=0;\n      query(1,a[root].c,root);\n      printf(\"%d\\n\",ans[1].x);\n\n    }else if (ord[0]=='I'){\n      //INSERT\n      scanf(\"%d\",&wfr);\n      for (int i=1;i<=wfr;i++)\n        scanf(\"%d\",&xx[i]);\n      int rt=create();\n      build(1,wfr,rt);\n\n      wfr=wfl;\n      tl=tr=tm=0;\n      spilt(1,a[root].c,root);\n      middle[++tm]=rt;\n      marge();\n \n    }else if (ord[0]=='D'||ord[0]=='R'||(ord[0]=='M'&&ord[2]=='K')){\n \n      scanf(\"%d\",&wfr);\n      wfr=wfl+wfr-1;\n      tl=tr=tm=0;\n      spilt(1,a[root].c,root);\n      if (ord[0]=='D'){\n\t    for (int i=1;i<=tm;i++)del(middle[i]);\n\t    tm=0;//DEL\n      }else if (ord[0]=='R'){\n      \tfor (int i=1;i<=tm;i++)xx[i]=middle[i];\n        for (int i=1;i<=tm;i++){\n          middle[i]=xx[tm-i+1];\n          a[middle[i]].ladd();\n        }//REVERSE\n      }else if (ord[0]=='M'&&ord[2]=='K'){\n        int tmp;\n        scanf(\"%d\",&tmp);\n        for (int i=1;i<=tm;i++)\n         a[middle[i]]._fill(tmp);\n        //MAKE-SAME\n      }marge();\n\n    }else if ((ord[0]=='M'&&ord[2]=='X')||(ord[0]=='G'&&ord[3]!=0)){\n      //MAX-SUM & GET-SUM\n      scanf(\"%d\",&wfr);\n      wfr=wfl+wfr-1;\n      tans=0;\n      query(1,a[root].c,root);\n      for (int i=2;i<=tans;i++){\n        int l=i-1,r=i,num=i;\n        ans[num].s=max(ans[l].s,max(ans[r].s,ans[l].rs+ans[r].ls));\n        ans[num].ls=max(ans[l].x+ans[r].ls,ans[l].ls);\n        ans[num].rs=max(ans[r].x+ans[l].rs,ans[r].rs);\n        ans[num].x=ans[l].x+ans[r].x;\n      }if (ord[0]=='M'&&ord[2]=='X')printf(\"%d\\n\",ans[tans].s);\n      else printf(\"%d\\n\",ans[tans].x);\n    }\n  }return 0;\n}\n```\n\n\u4e00\u5f00\u59cb\u5783\u573e\u6876\u5f00\u5c0f\u4e86\u8c03\u4e86\u4e00\u5e74\u2026\u2026\n\n[AC\u8bb0\u5f55](https://www.luogu.org/recordnew/show/17381916)",
        "postTime": 1552988241,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2710 \u3010\u6570\u5217\u3011"
    },
    {
        "content": "\u8fd9\u79cd\u7801\u519c\u9898\n\n\u8981\u7684\u662f\u53ef\u8bfb\u6027\n\n\u6ca1\u505a\u8fc7[\u7ef4\u62a4\u6570\u5217](https://www.luogu.org/problemnew/show/P2042#sub)\u7684\u5c31\u5148\u4e0d\u8981\u505a\u8fd9\u4e2a\u9898\u4e86\n\n\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\uff1f\n\n\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\n\n**\u7528\u7684fhq**\n\n\u9ed8\u8ba4\u4f1a\u4e86\u7684\u4eba\u6765\u770b\n\n\u7785\u4e00\u7785\u64cd\u4f5c\u600e\u4e48\u5199\u5c31\u597d\u4e86\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <complex>\n#include <algorithm>\n#include <climits>\n#include <queue>\n#include <map>\n#include <ctime>\n#include <set>\n#include <vector>\n#include <iomanip>\n#define A 1000010\n#define B 2010\n#define SIZ(x) (x ? x->siz : 0)\n#define SUM(x) (x ? x->sum : 0)\n#define LX(x) (x ? x->lx : -A)\n#define RX(x) (x ? x->rx : -A)\n#define MX(x) (x ? x->mx : -A)\n\nusing namespace std;\ntypedef long long ll;\nint n, m, opt, xx, yy, zz, top;\n\nstruct TreapNode {\n\tTreapNode *lc, *rc;\n\tTreapNode() {}\n\tint siz, cv, val, rev, tag, lx, rx, mx, sum;\n\tTreapNode *update() {\n\t\tsiz = SIZ(lc) + SIZ(rc) + 1;\n\t\tsum = SUM(lc) + SUM(rc) + val;\n\t\tlx = max(LX(lc), SUM(lc) + max(0, LX(rc)) + val);\n\t\trx = max(RX(rc), SUM(rc) + max(0, RX(lc)) + val);\n\t\tmx = max(0, LX(rc)) + max(0, RX(lc)) + val;\n\t\tmx = max(mx, max(MX(lc), MX(rc)));\n\t\treturn this;\n\t}\n\tvoid reverse() {\n\t\tswap(lc, rc);\n\t\tswap(lx, rx);\n\t\trev ^= 1;\n\t}\n\tvoid cover(int x) {\n\t\tval = x;\n\t\tsum = x * siz;\n\t\tlx = rx = mx = max(sum, x);\n\t\ttag = x;\n\t}\n\tvoid down() {\n\t\tif (rev) {\n\t\t\tif (lc) lc->reverse();\n\t\t\tif (rc) rc->reverse();\n\t\t\trev = 0;\n\t\t}\n\t\tif (tag != 2014) {\n\t\t\tif (lc) lc->cover(tag);\n\t\t\tif (rc) rc->cover(tag);\n\t\t\ttag = 2014;\n\t\t}\n\t}\n}pool[A], *root, *tail = pool, *rec[A];\ntypedef TreapNode* Tr;\nvoid recycle(Tr x) {\n\trec[++top] = x;\n}\nvoid clear(Tr x) {\n\tif (x->lc) clear(x->lc);\n\tif (x->rc) clear(x->rc);\n\trecycle(x);\n}\nTr newnode(int k) {\n\tTr x;\n\tif (top) x = rec[top--];\n\telse x = tail++;\n\tx->cv = rand();\n\tx->val = x->sum = x->lx = x->rx = x->mx = k;\n\tx->siz = 1;\n\tx->lc = x->rc = NULL;\n\tx->rev = 0;\n\tx->tag = 2014;\n\treturn x;\n}\nTr merge(Tr x, Tr y) {\n\tif (!x) return y;\n\tif (!y) return x;\n\tif (x->cv < y->cv) {\n\t\tx->down();\n\t\tx->rc = merge(x->rc, y);\n\t\tx->update();\n\t\treturn x;\n\t}\n\telse {\n\t\ty->down();\n\t\ty->lc = merge(x, y->lc);\n\t\ty->update();\n\t\treturn y;\n\t}\n}\nvoid split(Tr now, int k, Tr &x, Tr &y) {\n\tif (!now) {\n\t\tx = y = NULL;\n\t\treturn;\n\t}\n\tnow->down();\n\tif (SIZ(now->lc) < k) {\n\t\tsplit(now->rc, k - SIZ(now->lc) - 1, x, y);\n\t\tnow->rc = NULL;\n\t\tnow->update();\n\t\tx = merge(now, x);\n\t}\n\telse {\n\t\tsplit(now->lc, k, x, y);\n\t\tnow->lc = NULL;\n\t\tnow->update();\n\t\ty = merge(y, now);\n\t}\n}\nTr build(int a[], int lenth) {\n\tstatic Tr sta[A], pre, x;\n\tint cnt = 0;\n\tfor (int i = 1; i <= lenth; i++) {\n\t\tx = newnode(a[i]);\n\t\tpre = NULL;\n\t\twhile (cnt and sta[cnt]->cv > x->cv) {\n\t\t\tpre = sta[cnt]->update();\n\t\t\tsta[cnt--] = NULL;\n\t\t}\n\t\tif (cnt) sta[cnt]->rc = x;\n\t\tx->lc = pre;\n\t\tsta[++cnt] = x;\n\t}\n\twhile (cnt) sta[cnt--]->update();\n\treturn sta[1];\n}\nint tmp[A], a[A];\nTr insert(int pos, int lenth) {\n\tTr x, y, tmpp;\n\tsplit(root, pos, x, y);\n\tfor (int i = 1; i <= lenth; i++) scanf(\"%d\", &tmp[i]);\n\ttmpp = build(tmp, lenth);\n\treturn merge(merge(x, tmpp), y);\n}\nTr dele(int l, int r) {\n\tTr x, y, p, q;\n\tsplit(root, l - 1, x, y);\n\tsplit(y, r - l + 1, p, q);\n\tif (p) clear(p);\n\treturn merge(x, q);\n}\nTr mss(int l, int r, int val) {\n\tTr x, y, p, q;\n\tsplit(root, l - 1, x, y);\n\tsplit(y, r - l + 1, p, q);\n\tif (p) p->cover(val);\n\treturn merge(x, merge(p, q));\n}\nvoid asksum(int l, int r) {\n\tTr x, y, p, q;\n\tsplit(root, l - 1, x, y);\n\tsplit(y, r - l + 1, p, q);\n\tint ans = 0;\n\tif (p) ans = SUM(p);\n\troot = merge(x, merge(p, q));\n\tprintf(\"%d\\n\", ans);\n}\nTr rever(int l, int r) {\n\tTr x, y, p, q;\n\tsplit(root, l - 1, x, y);\n\tsplit(y, r - l + 1, p, q);\n\tif (p) p->reverse();\n\treturn merge(x, merge(p, q));\n}\nvoid askmax(int l, int r) {\n\tTr x, y, p, q;\n\tsplit(root, l - 1, x, y);\n\tsplit(y, r - l + 1, p, q);\n\tint ans = 0;\n\tif (p) ans = MX(p);\n\troot = merge(x, merge(p, q));\n\tprintf(\"%d\\n\", ans);\n}\nvoid askpoint(int pos) {\n\tTr x, y, z;\n\tsplit(root, pos, x, z);\n\tsplit(x, pos - 1, x, y);\n\troot = merge(merge(x, y), z);\n\tprintf(\"%d\\n\", y->val);\n}\nint check(string a) {\n\tif (a == \"INSERT\") return 1;\n\tif (a == \"DELETE\") return 2;\n\tif (a == \"REVERSE\") return 3;\n\tif (a == \"MAKE-SAME\") return 4;\n\tif (a == \"GET-SUM\") return 5;\n\tif (a == \"GET\") return 6;\n\tif (a == \"MAX-SUM\") return 7;\n\treturn 0;\n}\n\nint main() {\n\tsrand(time(0));\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n\troot = build(a, n);\n\twhile (m--) {\n\t\tstring c;\n\t\tcin >> c;\n\t\tswitch(check(c)) {\n\t\t\tcase 0 : ;\n\t\t\tcase 1 : scanf(\"%d%d\", &xx, &yy); root = insert(xx, yy); break;\n\t\t\tcase 2 : scanf(\"%d%d\", &xx, &yy); root = dele(xx, xx + yy - 1); break;\n\t\t\tcase 3 : scanf(\"%d%d\", &xx, &yy); root = rever(xx, xx + yy - 1); break;\n\t\t\tcase 4 : scanf(\"%d%d%d\", &xx, &yy, &zz); root = mss(xx, xx + yy - 1, zz); break;\n\t\t\tcase 5 : scanf(\"%d%d\", &xx, &yy); asksum(xx, xx + yy - 1); break;\n\t\t\tcase 6 : scanf(\"%d\", &xx); askpoint(xx); break;\n\t\t\tcase 7 : scanf(\"%d%d\", &xx, &yy); askmax(xx, xx + yy - 1); break;\n\t\t\tdefault : break;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1545357512,
        "uid": 78064,
        "name": "\u826f\u6708\u6faa\u4e8c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2710 \u3010\u6570\u5217\u3011"
    },
    {
        "content": "\u8fd9\u9898\u770b\u4e0a\u53bb\u5f88\u773c\u719f\u3002\u3002\u3002\n\n\u6ca1\u9519\u5c31\u662f\u2014\u2014[P2042[NOI2005]\u7ef4\u62a4\u6570\u5217](https://www.luogu.org/problemnew/show/P2042)\n\n~~\u4e8e\u662f\u5982\u679c\u505a\u5b8c\u4e86\u6b64\u9898\uff0c\u53ef\u4ee5\u7a0d\u7a0d\u4fee\u6539\u4e00\u4e0b\u4ee3\u7801\u53bbAC\u90a3\u9898\u3002~~\n\n\u597d\uff0c\u6b65\u5165\u6b63\u9898\uff1a\n\n\u9996\u5148\uff0c\u8981\u4f1a\u4e00\u4e2a\u5f88\u725b\u7684\u9ed1\u79d1\u6280\u2014\u2014splay\n\n\u53ef\u4ee5\u5148\u505a [P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369) \u548c [P3391 \u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3391) \n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u4f60\u5df2\u7ecf\u4f1a\u4e86\u6b64\u9898\u7684\u6838\u5fc3\u3002\u3002\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u539f\u5e8f\u5217\uff0c\u6211\u4eec\u5982\u679c\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u5165\uff0c\u7136\u540e\u63d2\u5165\uff0c\u90a3\u4e48\u6548\u7387\u5c31\u662fO(nlogn),\u800csplay\u7684\u5e38\u6570\u672c\u8eab\u5c31\u5f88\u5927\uff0c\u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u4f18\u5316\uff0c\u5c31\u662f\u628a\u539f\u5e8f\u5217\u4e00\u6b21\u6027\u8bfb\u5165\u540e\uff0c\u76f4\u63a5\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684build\uff0c\u641e\u4e00\u4e2a\u6574\u4f53\u5efa\u6811\uff0c\u5373\u4e0d\u65ad\u7684\u5c06\u5f53\u524d\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u8fdb\u884c\u4e8c\u5206\uff0c\u5230\u8fbe\u5355\u5143\u7d20\u533a\u95f4\u540e\uff0c\u5c31\u628a\u5bf9\u5e94\u7684\u5e8f\u5217\u503c\u63d2\u5165\u8fdb\u53bb\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u4e00\u5f00\u59cb\u5efa\u7684\u6811\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u5e73\u8861\u7684\u6811\uff0c\u53ef\u4ee5\u4f7f\u540e\u7eed\u64cd\u4f5c\u7684\u5e38\u6570\u66f4\u5c0f\uff0c\u5e76\u4e14\u5efa\u6811\u6574\u4e2a\u590d\u6742\u5ea6\u53ea\u662fO(2n)\u7684\u3002\n\n\u7ec6\u8282\u5904\u7406\uff1a\n\n\u7531\u4e8e\u672c\u9898\u6570\u636e\u7a7a\u95f4\u5361\u7684\u975e\u5e38\u7d27\uff0c\u6211\u4eec\u5c31\u9700\u8981\u7528\u65f6\u95f4\u6362\u7a7a\u95f4\uff0c\u76f4\u63a5\u5f004000000 * logm\u7684\u6570\u636e\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u4f46\u662f\u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1\u4e86\u540c\u4e00\u65f6\u95f4\u5728\u5e8f\u5217\u4e2d\u7684\u6570\u5b57\u7684\u4e2a\u6570\u6700\u591a\u662f500000\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u56de\u6536\u673a\u5236\uff0c\u628a\u7528\u8fc7\u4f46\u662f\u5df2\u7ecf\u5220\u6389\u7684\u8282\u70b9\u7f16\u53f7\u8bb0\u5f55\u5230\u4e00\u4e2a\u961f\u5217\u6216\u6808\u4e2d\uff0c\u5728\u65b0\u5efa\u8282\u70b9\u65f6\u76f4\u63a5\u628a\u961f\u5217\u4e2d\u7684\u5197\u4f59\u7f16\u53f7\u641e\u8fc7\u6765\u5c31\u597d\u4e86\u3002\n\n\u5269\u4e0b\u7684\u4e0d\u4f1a\u53ef\u4ee5\u770b\u770b\u6211\u7684CSDN\u535a\u5ba2\uff08\u6211\u628a\u4e24\u9898\u7684\u6838\u5fc3\u7b97\u6cd5\u90fd\u5199\u5728\u4e86\u4e00\u7bc7\u535a\u5ba2\u91cc\uff09\uff1a\n\n[\u6d1b\u8c37P2042 [NOI2005]\u7ef4\u62a4\u6570\u5217](http://blog.csdn.net/yangrui2002/article/details/79568863)\n\n[\u5b89\u5229\u4e00\u4e0b\u4e2a\u4eba\u535a\u5ba2\u3002](https://www.luogu.org/blog/49998/)\n\n\u9644\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<queue>\n#define MAXN 500010//\u5176\u5b9e2*10^5\u5df2\u7ecf\u591f\u4e86\uff0c\u53ea\u662f\u60f3\u5f00\u5927\u4e00\u70b9\n#define MAX 999999999\nusing namespace std;\nqueue<int> q;//\u5faa\u73af\u4f7f\u7528\nint n,m,size=1,root,val[MAXN];\nstruct node{//\u8fd9\u5c31\u662f splay\n    int f,s,flag,set,son[2];\n    int v,w,sum,suml,sumr;\n}a[MAXN];\ninline int read(){//\u8bfb\u4f18\n    int date=0,w=1;char c=0;\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n    return date*w;\n}\ninline void clean(int rt){//\u6e05\u7a7a\n    a[rt].son[0]=a[rt].son[1]=a[rt].f=a[rt].s=a[rt].flag=a[rt].v=a[rt].w=0;\n    a[rt].sum=a[rt].suml=a[rt].sumr=-MAX;\n}\ninline void pushup(int rt){//\u4e0a\u4f20\n    if(!rt)return;\n    a[rt].s=a[a[rt].son[0]].s+a[a[rt].son[1]].s+1;\n    a[rt].w=a[a[rt].son[0]].w+a[a[rt].son[1]].w+a[rt].v;\n    a[rt].suml=max(a[a[rt].son[0]].suml,a[a[rt].son[0]].w+a[rt].v+max(0,a[a[rt].son[1]].suml));\n    a[rt].sumr=max(a[a[rt].son[1]].sumr,a[a[rt].son[1]].w+a[rt].v+max(0,a[a[rt].son[0]].sumr));\n    a[rt].sum=max(a[rt].v+max(0,a[a[rt].son[0]].sumr)+max(0,a[a[rt].son[1]].suml),max(a[a[rt].son[0]].sum,a[a[rt].son[1]].sum));\n}\ninline void pushdown(int rt){//\u4e0b\u4f20\n    if(!rt)return;\n    if(a[rt].set!=-MAX){\n        if(a[rt].son[0]){\n            a[a[rt].son[0]].set=a[a[rt].son[0]].v=a[rt].set;\n            a[a[rt].son[0]].w=a[rt].set*a[a[rt].son[0]].s;\n            a[a[rt].son[0]].suml=a[a[rt].son[0]].sumr=a[a[rt].son[0]].sum=max(a[a[rt].son[0]].set,a[a[rt].son[0]].w);\n        }\n        if(a[rt].son[1]){\n            a[a[rt].son[1]].set=a[a[rt].son[1]].v=a[rt].set;\n            a[a[rt].son[1]].w=a[rt].set*a[a[rt].son[1]].s;\n            a[a[rt].son[1]].suml=a[a[rt].son[1]].sumr=a[a[rt].son[1]].sum=max(a[a[rt].son[1]].set,a[a[rt].son[1]].w);\n        }\n        a[rt].set=-MAX;\n        a[rt].flag=0;//\u6709\u4e86\u5168\u90e8\u4fee\u6539\u6807\u8bb0\u5c31\u4e0d\u7528\u7ffb\u8f6c\n    }\n    if(a[rt].flag){\n        if(a[rt].son[0]){\n            a[a[rt].son[0]].flag^=1;\n        \tswap(a[a[rt].son[0]].suml,a[a[rt].son[0]].sumr);\n            swap(a[a[rt].son[0]].son[0],a[a[rt].son[0]].son[1]);\n        }\n        if(a[rt].son[1]){\n            a[a[rt].son[1]].flag^=1;\n        \tswap(a[a[rt].son[1]].suml,a[a[rt].son[1]].sumr);\n            swap(a[a[rt].son[1]].son[0],a[a[rt].son[1]].son[1]);\n        }\n        a[rt].flag^=1;\n    }\n}\ninline int newnode(int x){//\u5efa\u7acb\u65b0\u8282\u70b9\n    int rt;\n    if(q.empty())rt=size++;\n    else{//\u5faa\u73af\u4f7f\u7528\n        rt=q.front();\n        q.pop();\n    }\n    a[rt].v=x;\n    a[rt].suml=a[rt].sumr=a[rt].sum=-MAX;\n    a[rt].flag=0;a[rt].set=-MAX;\n    return rt;\n}\ninline void turn(int rt,int k){//\u65cb\u8f6c\n    int x=a[rt].f,y=a[x].f;\n    pushdown(x);pushdown(rt);\n    a[x].son[k^1]=a[rt].son[k];\n    if(a[rt].son[k])a[a[rt].son[k]].f=x;\n    a[rt].f=y;\n    if(y)a[y].son[a[y].son[1]==x]=rt;\n    a[x].f=rt;\n    a[rt].son[k]=x;\n    pushup(x);pushup(rt);\n}\nvoid splay(int rt,int ancestry){//\u4f38\u5c55\n    while(a[rt].f!=ancestry){\n        int x=a[rt].f,y=a[x].f;\n        if(y==ancestry)turn(rt,a[x].son[0]==rt);\n        else{\n            int k=a[y].son[0]==x?1:0;\n            if(a[x].son[k]==rt){turn(rt,k^1);turn(rt,k);}\n            else{turn(x,k);turn(rt,k);}\n        }\n    }\n    if(ancestry==0)root=rt;\n}\nint kth(int rt,int k){//\u627e\u7b2ck\u5927\u503c\n    if(a[rt].s<k)return 0;\n    while(1){\n        pushdown(rt);//\u6807\u8bb0\u4e0b\u4f20\n        int y=a[rt].son[0];\n        if(k>a[y].s+1){\n            rt=a[rt].son[1];\n            k-=a[y].s+1;\n        }\n        else if(k<=a[y].s)rt=y;\n        else return rt;\n    }\n}\nint buildtree(int l,int r){//\u5efa\u6811\n    if(l>r)return 0;\n    int rt,mid=l+r>>1,lson=0,rson=0;\n    lson=buildtree(l,mid-1);\n    rt=newnode(val[mid]);\n    rson=buildtree(mid+1,r);\n    a[rt].son[0]=lson;\n    a[rt].son[1]=rson;\n    if(lson)a[lson].f=rt;\n    if(rson)a[rson].f=rt;\n    pushup(rt);\n    return rt;\n}\ninline void split(int front,int next){//\u53d6\u51fa\u533a\u95f4\n    splay(front,0);splay(next,front);\n}\ninline void insert(int rt,int x,int y){//\u63d2\u5165\n    int front=kth(rt,x+1),next=kth(rt,x+2);\n    split(front,next);\n    int k=a[next].son[0];\n    rt=buildtree(1,y);\n    a[next].son[0]=rt;a[rt].f=next;\n    pushup(next);pushup(front);\n}\nvoid delete_x(int rt){//\u9012\u5f52\u5220\u9664\n    if(!rt)return;\n    q.push(rt);//\u4e0d\u8981\u5fd8\u4e86\n    if(a[rt].son[0])delete_x(a[rt].son[0]);\n    if(a[rt].son[1])delete_x(a[rt].son[1]);\n    clean(rt);//\u4e00\u5b9a\u662f\u6700\u540e\uff01\uff01\uff01\n}\ninline void remove(int rt,int l,int r){//\u5220\u9664\n    int front=kth(rt,l),next=kth(rt,r+2);\n    split(front,next);\n    int k=a[next].son[0];\n    if(k)delete_x(k);\n    a[next].son[0]=0;\n    pushup(next);pushup(front);\n}\nvoid reverge(int rt,int l,int r){//\u7ffb\u8f6c\n    int front=kth(rt,l),next=kth(rt,r+2);\n    split(front,next);\n    int k=a[next].son[0];\n    if(!k)return;\n    a[k].flag^=1;\n    swap(a[k].son[0],a[k].son[1]);\n    swap(a[k].suml,a[k].sumr);\n    pushup(next);pushup(front);\n}\nvoid same(int rt,int l,int r,int x){//\u5168\u90e8\u4fee\u6539\n    int front=kth(rt,l),next=kth(rt,r+2);\n    split(front,next);\n    int k=a[next].son[0];\n    if(!k)return;\n    a[k].set=a[k].v=x;\n    a[k].w=x*a[k].s;\n    a[k].suml=a[k].sumr=a[k].sum=max(x,a[k].w);\n    pushup(next);pushup(front);\n}\nint main(){\n    int x,y,k;\n    char ch[20];\n    n=read();m=read();\n    for(int i=1;i<=n;i++)val[i]=read();\n    val[0]=val[n+1]=0;\n    clean(0);clean(n+1);\n    root=buildtree(0,n+1);//\u591a\u52a0\u4e86\u4e24\u4e2a\u54e8\u5175\u8282\u70b9\n    while(m--){//\u4ee5\u4e0b\u5c31\u662f\u5904\u7406\u90e8\u5206\uff0c\u6bd4\u8f83\u57fa\u7840\n        scanf(\"%s\",ch);x=read();\n        switch(ch[0]){\n            case 'I':{\n                y=read();\n                for(int i=1;i<=y;i++)val[i]=read();\n                insert(root,x,y);\n                break;\n            }\n            case 'D':y=read();remove(root,x,x+y-1);break;\n            case 'R':y=read();reverge(root,x,x+y-1);break;\n            case 'G':{\n                if(ch[3]=='-'){\n                    y=read();\n    \t\t\t\tint front=kth(root,x),next=kth(root,x+y+1);\n                    split(front,next);\n                    int k=a[next].son[0];\n                    printf(\"%d\\n\",a[k].w);\n                }\n                else printf(\"%d\\n\",a[kth(root,x+1)].v);\n                break;\n            }\n            case 'M':{\n                y=read();\n                if(ch[4]=='-'){\n                \tk=read();\n                \tsame(root,x,x+y-1,k);\n                }\n                else{\n    \t\t\t\tint front=kth(root,x),next=kth(root,x+y+1);\n                    split(front,next);\n                    int k=a[next].son[0];\n                    printf(\"%d\\n\",a[k].sum);\n                }\n                break;\n            }\n        }\n    }\n    return 0;\n}//\u7ec8\u4e8e\u6572\u5b8c\u4e86\uff08215\u884c\uff0c\u7d2f\u6b7b\u6211\u4e86\u3002\u3002\u3002\uff09\n\n```",
        "postTime": 1521101163,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2710 \u3010\u6570\u5217\u3011"
    },
    {
        "content": "\u4e00\u9053\u590d\u6742\u7684\u4e8c\u53c9\u5e73\u8861\u6811\uff0c\u56e0\u4e3a\u6709\u533a\u95f4\u64cd\u4f5c\uff0c\u6240\u4ee5\u7528splay\u5199\uff0c\u6ce8\u610f\u7ec6\u8282\u3002\n\n\u7ffb\u8f6c\u64cd\u4f5c\u5e76\u4e0d\u662f\u5c06\u4ed6\u66b4\u529b\u7ffb\u8f6c\uff0c\u53ea\u662f\u5f00\u4e00\u4e2abool\u53d8\u91cf\u6807\u8bb0\u3002\n\n(debug\u51fd\u6570\u8bf7\u5ffd\u7565\u3002\u3002\u3002\u3002\u3002\u3002\u3002)\n\n\u00b7\u00b7\u00b7cpp\n\n   \n \n   \n   \n   \n      \n   \n   \n   \n   \n   \n  \n   \n \n   \n \n   \n```cpp\n#include<iostream>\n#include<iomanip>\n#include<stack>\n#include<queue>\n#include<list>\n#include<vector>\n#include<map>\n#include<set>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#define ull unsigned long long\n#define ll long long\n#define inf 200009\n#define INF 2147483647\nusing namespace std;\nstruct Splay{\n    int val;//\u503c \n    int siz,son[2],fa;//\u513f\u5b50\u5927\u5c0f \u513f\u5b50\u8282\u70b9 \u7236\u8282\u70b9 \n    int maxsub,maxl,maxr,sumv;//\u6700\u5927\u5b50\u5e8f\u5217\u7ef4\u62a4 \u5de6\u513f\u5b50\u6700\u5927\u5e8f\u5217 \u53f3\u513f\u5b50\u6700\u5927\u5e8f\u5217  \u548c\u7ef4\u62a4 (\u7c7b\u4f3c\u7ebf\u6bb5\u6811) \n    int p,set;//\u7ffb\u8f6c\u6807\u8bb0 makesame\u64cd\u4f5c\u6807\u8bb0 \n}t[inf];\nint arr[inf];\nint len,root;\nqueue <int> q;//\u5faa\u73af\u4f7f\u7528\u88abdel\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u9632\u6b62mle \nvoid debug(){\n    printf(\"\\nDEBUG\\n\");\n    for (int i=0;i<=len;i++){\n        printf(\"%d: fa=%d son[0]=%d son[1]=%d l=%d r=%d max=%d sum=%d p=%d set=%d\\n\",i,t[i].fa,t[i].son[0],t[i].son[1],t[i].maxl,t[i].maxr,t[i].maxsub,t[i].sumv,t[i].p,t[i].set);\n    } \n} \nvoid pushup(int u){//\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684pushup\u3001pushdown \n    if (!u){\n        return;\n    }\n    t[u].maxl=max(t[t[u].son[0]].maxl,t[t[u].son[0]].sumv+t[u].val+max(0,t[t[u].son[1]].maxl));\n    t[u].maxr=max(t[t[u].son[1]].maxr,t[t[u].son[1]].sumv+t[u].val+max(0,t[t[u].son[0]].maxr));\n    t[u].maxsub=max(t[u].val+max(0,t[t[u].son[0]].maxr)+max(0,t[t[u].son[1]].maxl),max(t[t[u].son[0]].maxsub,t[t[u].son[1]].maxsub));\n    //\u6700\u5927\u5b50\u5e8f\u5217\u7ef4\u62a4\u516c\u5f0f \n    t[u].sumv=t[t[u].son[0]].sumv+t[t[u].son[1]].sumv+t[u].val;\n    t[u].siz=t[t[u].son[0]].siz+t[t[u].son[1]].siz+1;\n    return;\n}\nvoid pushdown(int u){\n    if (!u){\n        return;\n    }\n    if (t[u].p){\n        int revu=t[u].son[0];\n        if (revu){\n            swap(t[revu].son[0],t[revu].son[1]);\n            swap(t[revu].maxl,t[revu].maxr);\n            t[revu].p^=1;\n        }\n        revu=t[u].son[1];\n        if (revu){\n            swap(t[revu].son[0],t[revu].son[1]);\n            swap(t[revu].maxl,t[revu].maxr);\n            t[revu].p^=1;\n        }\n        t[u].p=0;\n    }\n    if (t[u].set!=-INF){\n        int covu=t[u].son[0];\n        if (covu){\n            t[covu].set=t[covu].val=t[u].set;\n            t[covu].sumv=t[covu].set*t[covu].siz;\n            t[covu].maxl=t[covu].maxr=t[covu].maxsub=max(t[covu].set,t[covu].sumv);\n        }\n        covu=t[u].son[1];\n        if (covu){\n            t[covu].set=t[covu].val=t[u].set;\n            t[covu].sumv=t[covu].set*t[covu].siz;\n            t[covu].maxl=t[covu].maxr=t[covu].maxsub=max(t[covu].set,t[covu].sumv);\n        }\n        t[u].set=-INF;\n    }\n    return;\n}\nvoid rotate(int u,int p){//splay\u7684\u65cb\u8f6c\uff0c\u5177\u4f53\u64cd\u4f5c\u8bf7\u770b\u535a\u5ba2 \n    int v=t[u].fa;\n    t[v].son[!p]=t[u].son[p];\n    t[t[v].son[!p]].fa=v;\n    t[u].son[p]=v;\n    t[u].fa=t[v].fa;\n    t[t[v].fa].son[t[t[v].fa].son[1]==v]=u;\n    t[v].fa=u;\n    pushup(v);\n    pushup(u);\n    return;\n}\nvoid splay(int u,int to){\n    while(t[u].fa!=to){\n       // debug();\n        if (t[t[u].fa].fa==to){\n            rotate(u,t[t[u].fa].son[0]==u);\n        }\n        else{\n            int f=t[u].fa,grandf=t[f].fa;\n            int p=(t[grandf].son[0]==f);\n            if (t[f].son[p]==u){\n                rotate(u,!p);\n                rotate(u,p);\n            }\n            else{\n                rotate(f,p);\n                rotate(u,p);\n            }\n        }\n        pushup(u);\n//        debug();\n    }\n    if (to==0){\n        root=u;\n    }\n    return;\n}\nint newtree(int v){// \u5faa\u73af\u4f7f\u7528\u88abdel\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u9632\u6b62mle \n    int u;\n    if (q.empty()){\n        len++;\n        u=len;\n    }\n    else{\n        u=q.front();\n        q.pop();\n    }\n    t[u].val=v;\n    t[u].maxl=t[u].maxr=t[u].maxsub=-INF;\n    t[u].p=0;\n    t[u].set=-INF;\n    return u;\n}\nint build(int l,int r){//\u5efa\u6811 \n    if (l>r){\n        return 0;\n    }\n    int mid=(l+r)/2,lson=0,rson=0;\n    lson=build(l,mid-1);\n    int u=newtree(arr[mid]);\n    rson=build(mid+1,r);\n    if (lson){\n        t[u].son[0]=lson;\n        t[lson].fa=u;\n    }\n    if (rson){\n        t[u].son[1]=rson;\n        t[rson].fa=u;\n    }\n    pushup(u);\n//    debug();\n    return u;\n}\nint getnum(int k){//\u627e\u7b2ck\u4e2a\u6570 \n    int u=root;\n    while(1){\n        pushdown(u);\n        if (k==t[t[u].son[0]].siz+1){\n            break;\n        }\n        else if (k<=t[t[u].son[0]].siz){\n            u=t[u].son[0];\n        }\n        else{\n            k=k-t[t[u].son[0]].siz-1;\n            u=t[u].son[1];\n        }\n    }\n    return u;\n}\nvoid reverse(int l,int r){//\u65cb\u8f6c\u64cd\u4f5c \n    l=getnum(l);\n    r=getnum(r+2);\n    splay(l,0);\n    splay(r,l);\n    int revu=t[r].son[0];\n    if (!revu){\n        return;\n    }\n    swap(t[revu].son[0],t[revu].son[1]);\n    swap(t[revu].maxl,t[revu].maxr);\n    t[revu].p^=1;\n    pushup(r);\n    pushup(l);\n    return;\n}\nvoid insert(int k,int l,int r){//\u63d2\u5165\u64cd\u4f5c \n    splay(getnum(k+2),0);\n    splay(getnum(k+1),root);\n    int u=build(l,r);\n    t[t[root].son[0]].son[1]=u;\n    t[u].fa=t[root].son[0];\n    pushup(t[root].son[0]);\n    pushup(root);\n    return;\n}\nvoid del(int &u){ \n    if (!u){\n        return;\n    }\n    q.push(u);\n    t[u].fa=0;\n    del(t[u].son[0]);\n    del(t[u].son[1]);\n    t[u].maxsub=t[u].maxl=t[u].maxr=-INF;\n    u=0;\n    return; \n}\nvoid find_del(int l,int r){//\u5220\u9664\u64cd\u4f5c\n    l=getnum(l);\n    r=getnum(r+2);\n    splay(l,0);\n    splay(r,root);\n    del(t[r].son[0]);\n    pushup(r);\n    pushup(l);\n    return;\n}\nvoid setnum(int l,int r,int v){//makesame\u64cd\u4f5c \n    l=getnum(l);\n    r=getnum(r+2);\n    splay(l,0);\n    splay(r,l);\n    int covu=t[r].son[0];\n    if (!covu){\n        return;\n    }\n    t[covu].set=t[covu].val=v;\n    t[covu].sumv=v*t[covu].siz;\n    t[covu].maxl=t[covu].maxr=t[covu].maxsub=max(v,t[covu].sumv);\n    pushup(r);\n    pushup(l);\n    return;\n}\nint querymax(int l,int r){//\u4e24\u4e2a\u8be2\u95ee\u64cd\u4f5c \n    l=getnum(l);\n    r=getnum(r+2);\n    splay(l,0);\n    splay(r,root);\n    return t[t[r].son[0]].maxsub;\n}\nint querysum(int l,int r){\n    l=getnum(l);\n    r=getnum(r+2);\n    splay(l,0);\n    splay(r,root);\n    return t[t[r].son[0]].sumv;\n}\nint main(){\n    int n,m,x,y,z;\n    char s[15];\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    arr[0]=arr[n+1]=0;\n    t[0].maxl=t[0].maxr=t[0].maxsub=-INF;\n    root=build(0,n+1);\n//  debug();\n    for (int i=0;i<m;i++){\n        scanf(\"%s\",&s);\n        if (s[0]=='I'){\n            scanf(\"%d%d\",&x,&y);\n            for (int i=1;i<=y;i++){\n                scanf(\"%d\",&arr[i]);\n            }\n            insert(x,1,y);\n        }\n        else if (s[0]=='D'){\n            scanf(\"%d%d\",&x,&y);\n            find_del(x,x+y-1);\n        }\n        else if (s[0]=='M' && s[2]=='K'){\n            scanf(\"%d%d%d\",&x,&y,&z);\n            setnum(x,x+y-1,z);\n        }\n        else if (s[0]=='R'){\n            scanf(\"%d%d\",&x,&y);\n            reverse(x,x+y-1);\n        }\n        else if (s[0]=='G' && s[3]=='-'){\n            scanf(\"%d%d\",&x,&y);\n            printf(\"%d\\n\",querysum(x,x+y-1));\n        }\n        else if (s[0]=='G'){\n            scanf(\"%d\",&x);\n            printf(\"%d\\n\",t[getnum(x+1)].val);\n        }\n        else{\n            scanf(\"%d%d\",&x,&y);\n            printf(\"%d\\n\",querymax(x,x+y-1));\n        }\n//      debug();\n    }\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1508658657,
        "uid": 30541,
        "name": "ezoixx118",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2710 \u3010\u6570\u5217\u3011"
    }
]