[
    {
        "content": "#### \u4e00\u4e2a\u6bd4\u8f83\u96be\u60f3\u7684\u6811\u5f62\u5206\u7ec4dp\uff0c\u6211\u4eec\u8003\u8651\u8bbedp[u][k]\u8868\u793a\u5728\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u5171\u5206\u6210k\u4e2a\u8054\u901a\u5757\u80fd\u591f\u7684\u5230\u7684\u6700\u5927\u5206\u6570\uff0c\u53ef\u662f\u8fd9\u4e2a\u95ee\u9898\u4f3c\u4e4e\u6709\u70b9\u540e\u6548\u6027\uff0c\u540c\u65f6\u4e5f\u4e0d\u597d\u8f6c\u79fb\uff0c\u90a3\u6211\u4eec\u5e72\u8106\u8bbe\u7684\u66f4\u660e\u786e\u4e00\u70b9\uff0c\u8bbedp[u][k]\u8868\u793a\u5728u\u7684\u5b50\u6811\u4e2d\uff0c\u548cu\u8fde\u5728\u4e00\u8d77\u7684\u70b9\u7684\u4e2a\u6570\uff08\u5373u\u6240\u5728\u7684\u8054\u901a\u5757\u5927\u5c0f\uff09\u4e3ak\u65f6\u80fd\u5f97\u5230\u7684\u6700\u5927\u5206\u6570\u3002\u7279\u6b8a\u7684\uff0c\u6211\u4eec\u7528dp[u][0]\u8868\u793a\u5728\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u80fd\u5f97\u5230\u7684\u6700\u5927\u5206\u6570\uff0c\n\n#### \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u8f6c\u79fb\uff1adp[u][j]=max(dp[u][k]/k\\*dp[v][j-k]/(j-k)\\*j)\n\n#### \u7531\u4e8e\u9898\u76ee\u6570\u636e\u6709\u70b9sang\uff0cxin\uff0cbing\uff0ckuang\uff0c\u5728\u5e38\u89c4\u505a\u6cd5\u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u4e00\u4e2a\u9ad8\u7cbe\u5ea6\uff0c\u800c\u5199\u4e00\u4e2a\u9ad8\u7cbe\u9664\u4f4e\u7cbe\uff0c\u8fd8\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u8003\u8651\u5982\u4f55\u628a\u8fd9\u4e2a\u9664\u6cd5\u5f04\u6389\u3002\n\n#### \u6211\u4eec\u91cd\u65b0\u8bbedp[u][k]\u8868\u793a\u5728u\u7684\u5b50\u6811\u4e2d\uff0cu\u6240\u5728\u7684\u8054\u901a\u5757\u7684\u5927\u5c0f\u4e3ak\u65f6\uff0c\u5f97\u5230\u7684\u6700\u5927\u5206\u6570\u4e0d\u4e58\u4ee5k\u65f6\u7684\u5927\u5c0f\u3002\u90a3\u4e48\u8f6c\u79fb\u5c31\u5f88\u597d\u5199\u4e86\u3002\n\n#### dp[u][j]=max(dp[u][k]\\*dp[v][j-k])\uff0c\u90a3\u4e48\u6211\u4eec\u4e4b\u524d\u8bf4\u7684dp[u][0]\u5c31\u53ef\u4ee5\u8d77\u5230\u4f5c\u7528\u4e86\uff0c\u8fd9\u65f6\u7279\u6b8a\u7684\uff0cdp[u][0]=max(dp[u][j]\\*j)\uff0c\u8fd9\u4e2a\u65b9\u7a0b\u7684\u6b63\u786e\u6027\u8fd8\u662f\u6bd4\u8f83\u597d\u8bc1\u660e\u7684\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662fdp[1][0]\u3002\n\n#### \u5269\u4e0b\u7684\u5c31\u662f\u4e00\u4e2a\u9ad8\u7cbe\u5ea6\u4e86\u3002\n\n\n#### \u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\nint dfs(int u,int fa){\n    sz[u]=1;dp[u][0]=1;dp[u][1]=1;\n    for (int p=a[u];p;p=e[p].next){\n        int v=e[p].to;\n        if (v!=fa){\n            dfs(v,u);\n            sz[u]+=sz[v];\n            for (int j=sz[u];j>=0;j--)\n                for (int k=min(j,sz[u]-sz[v]);k>=max(1,j-sz[v]);k--)//\u8fd9\u4e2a\u5206\u7ec4\u80cc\u5305\u6709\u5f88\u591a\u79cd\u5199\u6cd5\n                    ChkMax(dp[u][j],dp[u][k]*dp[v][j-k]);\n        }\n    }\n    for (int i=1;i<=sz[u];i++)\n        ChkMax(dp[u][0],dp[u][i]*i);\n}\n```\n\n\n\n\u6700\u540eOrz\u697c\u4e0bdalao\n",
        "postTime": 1505040555,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1411 \u3010\u6811\u3011"
    },
    {
        "content": "### \u6ce8\u610f\uff1a\u6211\u8ba4\u4e3a\u9898\u89e3\u5bf9dp[u][j]\u7406\u89e3\u6709\u8bef\n\n------------\n\n\n \u82e5dp[u][j]\u8868\u793a\u4ee5U\u4e3a\u6839\u8054\u901a\u5757\u5927\u5c0f\u4e3aj\u7684\u6700\u5927\u8d21\u732e\u7684\u8bdd\uff0c\n \n \u6700\u540edp[u][0]\u4e3a\u4f55\u53c8\u8981\u4e58\u4ee5i\u5462\uff08\u5df2\u7ecf\u662f\u6700\u5927\u8d21\u732e\u4e86\u518d\u4e58\u4ee5\u8be5\u8054\u901a\u5757\u5927\u5c0f\uff09\n\n------------\n\n\n \u82e5dp[u][j]\u8868\u793a\u4ee5U\u4e3a\u6839\u8054\u901a\u5757\u5927\u5c0f\u4e3aj\u7684\u6700\u5927\u8d21\u732e/j\u7684\u8bdd\uff0c\n \n \u6700\u540e\u4e00\u4e2a\u65b9\u7a0b\u8bf4\u901a\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u65b9\u7a0bdp[u][j]=max(dp[u][k]*dp[v][j-k])\u53c8\u600e\u4e48\u89e3\u91ca\u5462\uff0c\n \n \u8fd8\u6709\u6700\u5927\u8d21\u732e/\u8054\u901a\u5757\u5927\u5c0f\u7684\u6570\u5b66\u610f\u4e49\u6709\u662f\u4ec0\u4e48\uff1f\n \n \u6bcf\u4e2a\u70b9\u7684\u5e73\u5747\u8d21\u732e\u5417\uff1f\n \n \u90a3\u4e48\u5427\u4e24\u4e2a\u8054\u901a\u5757\u5e73\u5747\u503c\u4e58\u8d77\u6765\u5c31\u80fd\u5f97\u5230\u603b\u8054\u901a\u5757\u7684\u5e73\u5747\u70b9\u8d21\u732e\u5417\uff1f\n\n\n------------\n\n## \u6211\u8ba4\u4e3a\uff0cdp[u][j]\u8868\u793a\u4ee5u\u4e3a\u6839\u8282\u70b9\uff0c\u9664\u4e86\u5305\u542bu\u7684\u5927\u5c0f\u4e3aj\u7684\u8054\u901a\u5757\u4e4b\u5916\u7684\u5176\u4ed6\u8054\u901a\u5757\u7684\u6700\u5927\u8d21\u732e\n\n------------\n\n\ndp[u][j]=max(dp[u][k]*dp[v][j-k])\u8868\u793a\uff0c\n\n\u5728\u4ee5u\u4e3a\u6839\u8282\u70b9\u7684\u6811\u4e0a\u9009\u8d70k\u4e2a\u540e\u5269\u4f59\u8054\u901a\u5757\u7684\u8d21\u732e\n\n------------\ndp[u][0]=max(dp[u][j]*j) \u5e76\u4e0d\u662f\u8868\u793a\u53d60\u4e2a\uff0c\n\n\u53ea\u4e0d\u8fc70\u8fd9\u4e00\u7ef4\u4ee3\u66ff\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4\u3002 \u5b83\u8868\u793a\u6574\u4e2au\u6811\u7684\u6700\u5927\u8d21\u732e\uff0c\n\n\u56e0\u4e3a\u524d\u9762\u672a\u5c06dp[u][j]\u7b97\u5165\uff0c\u5219\u4e58\u4e0a\u5b83\u7684\u8d21\u732e!\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/87ba40kg.png)\n\n\u4f8b\u5b50\uff1a\u5408\u5e76\u8054\u901a\u5757\uff08A\u5230G\uff0c\u4e0b\u9762\u7b80\u79f0A\uff09\u548c\u8054\u901a\u5757\uff08c\u5230E\uff0c\u7b80\u79f0C\uff09\uff0c\u56e0\u4e3a\u662fdfs\u904d\u5386dp\uff0c\u5219\u5728\u6b64\u65f6dp[A][4]\u53ea\u66f4\u65b0\u7684\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u8fd8\u672a\u66f4\u65b0\uff0c\u53cadp[A][4]\u8868\u793aH\u7684\u8d21\u732e\u53ca\u4e3a1\uff0cdp[C][2]\u540c\u7406\u4e3aI\u548cF\u7684\u8d21\u732e\u4e3a1\uff0c\u5219dp[A][6]\u4e3aH\uff0cF\uff0cI\u603b\u8d21\u732e1\uff0c\u6700\u540eA\u6811\u7684\u8d21\u732e\u4e3adp[A][6]*6(\u5408\u5e76\u540eG\u5230E\u7684\u8d21\u732e\u4e3a\u5176\u8054\u901a\u5757\u5927\u5c0f)\n\n### \u6700\u540e\u518d\u6ce8\u610f\uff1a\u9ad8\u7cbe\u9700\u5f00short\uff0c\u5426\u5219\u4f1aMLE\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#define N 700\nusing namespace std;\nint n, eid;\nshort sz[N+5], head[N+5];\nstruct Edge \n{\n    int next, to;\n}e[2*N+5];\nstruct bign\n{\n    static const int maxn = 120;\n    short d[maxn+5];\n    short len;\n    void clean() { while(len > 1 && !d[len-1]) len--; }\n    bign() { memset(d, 0, sizeof(d)); len = 1; }\n    bign(int num) { *this = num; } \n    bign(char* num) { *this = num; }\n    bign operator = (const char* num) {\n        memset(d, 0, sizeof(d)); len = strlen(num);\n        for(int i = 0; i < len; i++) d[i] = num[len-1-i] - '0';\n        clean();\n        return *this;\n    }\n    bign operator = (int num)\n    {\n        char s[20]; sprintf(s, \"%d\", num);\n        *this = s;\n        return *this;\n    }\n    bign operator + (const bign& b)\n    {\n        bign c = *this; int i;\n        for(i = 0; i < b.len; i++)\n\t    {\n            c.d[i] += b.d[i];\n            if (c.d[i] > 9) c.d[i] %= 10, c.d[i+1]++;\n        }\n        while (c.d[i] > 9) c.d[i++] %= 10, c.d[i]++;\n        c.len = max(len, b.len);\n        if (c.d[i] && c.len <= i) c.len = i+1;\n        return c;\n    }\n    bign operator - (const bign& b)\n\t{\n        bign c = *this; int i;\n        for(i = 0; i < b.len; i++)\n\t\t{\n            c.d[i] -= b.d[i];\n            if (c.d[i] < 0) c.d[i] += 10, c.d[i+1]--;\n        }\n        while (c.d[i] < 0) c.d[i++] += 10, c.d[i]--;\n        c.clean();\n        return c;\n    }\n    bign operator * (const bign& b) const\n\t{\n        int i, j; bign c; c.len = len + b.len; \n        for(j = 0; j < b.len; j++)\n            for(i = 0; i < len; i++) \n                c.d[i+j] += d[i]*b.d[j];\n        for(i = 0; i < c.len-1; i++) c.d[i+1] += c.d[i]/10, c.d[i] %= 10;\n        c.clean();\n        return c;\n    }\n    bign operator / (const bign& b)\n\t{\n        int i, j;\n        bign c = *this, a = 0;\n        for(i = len - 1; i >= 0; i--)\n\t\t{\n            a = a*10 + d[i];\n            for (j = 0; j < 10; j++) \n                if (a < b*(j+1)) break;\n            c.d[i] = j;\n            a = a - b*j;\n        }\n        c.clean();\n        return c;\n    }\n    bign operator % (const bign& b)\n\t{\n        int i, j;\n        bign a = 0;\n        for(i = len - 1; i >= 0; i--) {\n            a = a*10+d[i];\n            for(j = 0; j < 10; j++) if (a < b*(j+1)) break;\n            a = a-b*j;\n        }\n        return a;\n    }\n    bign operator += (const bign& b)\n\t{\n        *this = *this+b;\n        return *this;\n    }\n    bool operator <(const bign& b) const\n\t{\n        if(len != b.len) return len < b.len;\n        for(int i = len-1; i >= 0; i--)\n            if(d[i] != b.d[i]) return d[i] < b.d[i];\n        return false;\n    }\n    bool operator >(const bign& b) const { return b < *this; }\n    bool operator <= (const bign& b) const { return !(b < *this); }\n    bool operator >= (const bign& b) const { return !(*this < b); }\n    bool operator != (const bign& b) const { return b < *this || *this < b; }\n    bool operator == (const bign& b) const { return !(b < *this) && !(b > *this); }\n    string str() const {\n        char s[maxn] = {};\n        for(int i = 0; i < len; i++) s[len-1-i] = d[i]+'0';\n        return s;\n    }\n}f[N+5][N+5];\nistream& operator >> (istream& in, bign& x)\n{\n    string s;\n    in >> s;\n    x = s.c_str();\n    return in;\n}\nostream& operator << (ostream& out, const bign& x)\n{\n    out << x.str();\n    return out;\n}\nvoid addEdge(int u, int v) \n{\n    e[++eid].next = head[u];\n    e[eid].to = v;\n    head[u] = eid;\n}\nvoid dp(int u, int fa) \n{\n    sz[u] = 1, f[u][0] = f[u][1] = 1;\n    for(int i = head[u]; i; i = e[i].next)\n\t{\n        int v = e[i].to;\n        if(v == fa) continue;\n        dp(v, u);\n        sz[u] += sz[v];\n        for(int j = sz[u]; j >= 1; --j) \n\t\t{\n            for(int k = min(j, sz[u]-sz[v]); k >= max(1, j-sz[v]); --k)\n\t\t\t{\n                f[u][j] = max(f[u][j], f[u][k]*f[v][j-k]);\n            }\n        }\n    }\n    for(int i = 1; i <= sz[u]; ++i) f[u][0] = max(f[u][0], f[u][i]*i);\n}\nint main() \n{\n\tscanf(\"%d\",&n);\n    for(int i = 1, x, y; i <= n-1; ++i)\n\t{\n\t\tscanf(\"%d %d\",&x,&y);\n\t\taddEdge(x, y);\n\t\taddEdge(y, x);\n\t} \n    dp(1, 0);\n    cout << f[1][0] << endl;\n    return 0;\n}\n```\n",
        "postTime": 1574735722,
        "uid": 228395,
        "name": "\u5b64\u53f6\u6b8b\u5f71",
        "ccfLevel": 4,
        "title": "\u6811"
    },
    {
        "content": "\u4e00\u5f00\u59cb\u60f3\u4e86\u4e2a\u8d2a\u5fc3\u3002\n\n\n\u5c31\u662f\u6bcf\u6b21\u679a\u4e3e\u53f6\u5b50\uff0c\n\n\n\u5982\u679c\u5927\u5c0f\u4e3a1\u6216\u8005\u5408\u5e76\u540e\u5927\u5c0f<=3,\u5c31\u628a\u76f8\u8fde\u7684\u70b9\u7684\u5927\u5c0f+=\u5b83\u7684\u5927\u5c0f\uff0c\n\n\n\u5426\u5219\u5c31\u628a\u7b54\u6848\\*=\u5b83\u7684\u5927\u5c0f\uff1b\n\n\n\u5220\u6389\u8fd9\u4e2a\u70b9\uff1b\n\n\n\u91cd\u590d\u64cd\u4f5c\u3002\n\n\n\u4f46\u8fd9\u662f\u9519\u7684(\u8fd8\u80fd\u62ff65)\u3002\n\n\n\u4e8e\u662f\u6211\u5c31\u6253\u4e86\u4e2adp\uff0c\n\n\nf[x][j]\u8868\u793a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\uff0cx\u6240\u5c5e\u7684\u8054\u901a\u5757\u5927\u5c0f\u4e3aj\uff0c\u7684\u6700\u5927\u4e58\u79ef\u3002\n\n\n\u679a\u4e3e\u513f\u5b50y\uff0c\u4e4b\u540e\u518d\u679a\u4e3e\u6bcf\u4e2aj\uff0ck f[x][j]=max{f[x][k]\\*f[y][j-k]}\n\n\n\u6ce8\u610f\u8fd9\u65f6\u4e0d\u8981\u8ba9j,k=0,\u4f46j-k\u53ef\u4ee5\u662f0\u3002\n\n\n\u56e0\u4e3a\u5982\u679c\u8054\u901a\u5757\u4e0d\u4e3a0\uff0c\u90a3\u4e48x\u5fc5\u987b\u9009\u62e9\u3002\n\n\n\u4e4b\u540e\u518d\u679a\u4e3ek,f[x][0]=max{f[x][k]\\*k}\n\n\n\u8fd9\u4e2adp\u8981\u9ad8\u7cbe\\*\u9ad8\u7cbe\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u633a\u9ad8\u7684\uff0c\u7ea6O(n^3\\*l^2) l\u662f\u7b54\u6848\u957f\u5ea6\n\n\n(\u4f46\u9ad8\u7cbe\u5ea6\u538b\u4f4d\u540e\u7a7a\u95f4\u6b63\u597d\u80fd\u8fc7\uff0c\u65f6\u95f4\u7684\u8bdd\u6700\u6162\u7684\u70b90.1s+...\u5e94\u8be5\u662f\u6570\u636e\u6c34\u5427)\n\n\n(\u6839\u636e\u65f6\u7a7a\u6765\u770b\u5176\u4ed6\u8fc7\u7684\u4eba\u662f\u8fd9\u4e2a\u65b9\u6cd5)\n\n\n\u5176\u5b9e\u6bd4\u8f83\u4e58\u79ef\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6bd4\u8f83log(\u4e58\u79ef)\n\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5O(n^3)dp\u4e86\n\n\n\u8bb0\u5f55\u4e00\u4e0b\u4ece\u54ea\u91cc\u8f6c\u79fb\u8fc7\u6765\u7684\n\n\n\u6700\u540e\u518d\u7edf\u8ba1\u4e00\u4e0b\u7b54\u6848\n\n\n\u53ea\u7528\u505an\u6b21\u4f4e\u7cbe\u4e58\u9ad8\u7cbe\n\n\n\u603b\u65f6\u95f4O(n^3)\n\n\nupd:\n\u505a\u4e86http://codeforces.com/contest/815/problem/C\n\n\u53d1\u73b0\u8fd9\u4e2adp\u590d\u6742\u5ea6\u5176\u5b9e\u662fO(n^2)\n\n\u6bcf\u6b21\u8f6c\u79fb\u662f\u590d\u6742\u5ea6\u662f x\u4e4b\u524d\u7684\u5b50\u6811\u7684sz\\*\u5f53\u524d\u5b50\u6811\u7684sz\n\n\u76f8\u5f53\u4e8e\u4e4b\u524d\u5b50\u6811\u6240\u6709\u70b9\u548c\u5f53\u524d\u5b50\u6811\u7684\u70b9\u7ec4\u6210\u7684\u70b9\u5bf9\u6570\n\n\u800c\u6bcf\u4e2a\u70b9\u5bf9\u53ea\u4f1a\u5728lca\u5904\u88ab\u8ba1\u7b97\u4e00\u6b21\n\n\u6240\u4ee5\u590d\u6742\u5ea6O(n^2)\n",
        "postTime": 1498291827,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1411 \u3010\u6811\u3011"
    },
    {
        "content": "\u8003\u8651\u8d2a\u5fc3\uff0c\u624b\u73a9\u6570\u636e\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u8981\u5c06\u82e5\u5e72\u4e2a\u8054\u901a\u5757\u5206\u7684\u5c3d\u91cf\u5c0f\u4f46\u5927\u5c0f\u8981\u5927\u4e8e2\uff0c\u56e0\u4e3a\u663e\u7136\u5927\u5c0f\u4e3a1\u7684\u8054\u901a\u5757\u5bf9\u7b54\u6848\u65e0\u8d21\u732e\n\n\u8d2a\u5fc3\u4e0d\u80fd\u5f88\u597d\u89e3\u51b3\u5927\u5c0f\u4e3a1\u7684\u8054\u901a\u5757\u76f8\u4e92\u5408\u5e76\u7684\u95ee\u9898\uff0c\u8003\u8651dp\uff0c\u9996\u5148\u770b\u5230\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u8fd8\u662f\u6bd4\u8f83\u53cb\u597d\u7684$n \\leq 700$\uff0c\u8003\u8651\u5230\u9ad8\u7cbe\u5ea6\u7684\u95ee\u9898\u5927\u6982\u53ef\u4ee5\u5199\u4e00\u4e2a$O(n^2)$\u7684\u7b97\u6cd5\n\n\u82e5\u5207\u5272\u70b9$u$\u4e0e\u5176\u7236\u4eb2\u8282\u70b9\u7684\u8fde\u8fb9\uff0c\u82e5\u8981\u4f7f\u8d21\u732e\u5c3d\u91cf\u5927\uff0c\u5219\u8981\u4f7f\u4ee5$u$\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5f97\u5230\u7684\u8d21\u732e\u5c3d\u91cf\u5927\u548c\u539f\u6811\u5254\u9664\u8be5\u5b50\u6811\u7684\u8d21\u732e\u5c3d\u91cf\u5927\uff0c\u662f\u4e0d\u91cd\u5408\u7684\u95ee\u9898\n\n\u56e0\u6b64\u601d\u8003\uff0c\u8bbe\u8ba1\u72b6\u6001$f(u, i)$\u8868\u793a\u5f53\u524d\u5728$u$\u8282\u70b9\uff0c$i$\u8282\u70b9\u5411\u4e0b\u7684\u8054\u901a\u5757\u5927\u5c0f\u4e3a$i$\u65f6\u7684\u6700\u5927\u8d21\u732e\uff0c\u6211\u4eec\u7ee7\u7eed\u624b\u73a9\u6570\u636e\uff0c\u53d1\u73b0\u6bcf\u6b21\u6dfb\u52a0\u4e00\u9897\u5b50\u6811\uff0c\u5b9e\u8d28\u4e0a\u662f\u505a\u4e00\u4e2a\u7c7b\u4f3c\u6811\u4e0a\u80cc\u5305\u7684\u4e1c\u897f\n\n$f(u,i)=\\max\\{f(u,i),\\ f(e,j)* f(u,i-j)\\}$\n\n\u7279\u522b\u7684\uff0c\u5bf9\u4e8e$f(u,0)$\u8868\u793a\u5207\u65ad\u8be5\u8282\u70b9\u4e0e\u7236\u4eb2\u8282\u70b9\u8fde\u8fb9\u6700\u5927\u8d21\u732e\n\n$f(u,0)=\\max\\{f(u,i)* i\\}$\n\n\u8003\u8651\u6781\u9650\u6570\u636e\uff0c\u6700\u7ec8\u7b54\u6848\u6700\u5927\u503c\u4e3a$2^{350}$,\u56e0\u6b64\u9ad8\u9759\u6570\u7ec4\u4fdd\u8bc1\u80fd\u5b58\u4e24\u767e\u4e2a\u6570\u4f4d\u5c31ok\u4e86...\u81f3\u4e8e\u538b\u4f4d\u9ad8\u7cbe\u7684\u5199\u6cd5\u8fd8\u8bf7\u5404\u663e\u795e\u901a...\n\n```\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n\nusing namespace std;\nnamespace tools {\n\tbool digit (int ch) { return (ch <= '9' and ch >= '0');}\n\tinline int in () {\n\t\tint x = 0, ch = getchar(), base = 1;\n\t\twhile (!digit(ch)) { base = (ch == '-')? -1: 1; ch = getchar();}\n\t\twhile (digit(ch)) { x = x*10+ch-'0'; ch = getchar();}\n\t\treturn x*base;\n\t}\n\ttemplate <class T> inline void smax (T& x, T y) { x = max(x, y);}\n\ttemplate <class T> inline void smin (T& x, T y) { x = min(x, y);}\n\tinline void print (int x) { printf(\"debug:%d\\n\", x);}\n}\nusing namespace tools;\n\nconst int N = 710, M = 45;\nstruct Big {\n\tint l, t[M];\n} Zero;\nint n, root = 1;\nint sz[N], ac[N][N]; \nlong long tag[M];\nBig f[N][N];\nint nxt[N<<1], to[N<<1], head[N], index_edge;\ninline void add (int u, int v) {\n\tint i = ++index_edge;\n\tnxt[i] = head[u]; to[i] = v; head[u] = i;\n}\n\nint Mod (int x) {\n\treturn (x-1000*(x/1000));\n}\nvoid printBig (Big x) {\n\tfor (int i = x.l; i; --i) {\n\t\tif (i == x.l) printf(\"%d\", x.t[i]);\n\t\telse printf(\"%d%d%d\", x.t[i]/100, (x.t[i]/10)%10, x.t[i]%10);\n\t}\n\tputs(\"\");\n}\n\nvoid Spread (Big& x) {\n\tfor (int i = 1; i <= x.l; ++i) {\n\t\tx.t[i] = Mod(tag[i]);\n\t\ttag[i+1] += tag[i]/1000;\n\t\tif (i == x.l and tag[i+1]) x.l++;\n\t}\n}\nBig MBig (Big x, Big y) {\n\tmemset(tag, 0, sizeof(tag));\n\tint Maxl = 0;\n\tfor (int j = 1; j <= y.l; ++j) {\n\t\tfor (int i = 1; i <= x.l; ++i) {\n\t\t\tint tmp = y.t[j]*x.t[i];\n\t\t\tint l = i+j-1;\n\t\t\twhile (tmp) {\n\t\t\t\ttag[l] += Mod(tmp);\n\t\t\t\ttmp /= 1000;\n\t\t\t\tsmax(Maxl, l); l++;\n\t\t\t}\n\t\t}\n\t}\n\tx.l = Maxl;\n\tSpread(x); return x;\n}\nBig Max (Big x, Big y) {\n\tif (x.l != y.l) return (x.l > y.l)? x: y;\n\tfor (int i = x.l; i; --i) {\n\t\tif (x.t[i] == y.t[i]) continue;\n\t\treturn (x.t[i] > y.t[i])? x: y;\n\t}\n\treturn x;\n}\nvoid GetAns (int x, int fa) {\n\tsz[x]++;\n\tf[x][0] = f[x][1] = Zero;\n\tac[x][0] = ac[x][1] = true;\n\n\tfor (int i = head[x]; i; i = nxt[i]) {\n\t\tint e = to[i];\n\t\tif (e == fa) continue;\n\t\tGetAns(e, x);\n\t\tsz[x] += sz[e];\n\t\tfor (int l = sz[x]; l; --l) {\n\t\t\tfor (int k = 0; k <= sz[e]; ++k) {\n\t\t\t\tif (l-k <= 0) break;\n\t\t\t\tif (!ac[x][l-k] or !ac[e][k]) continue;\n\t\t\t\tf[x][l] = Max(f[x][l], MBig(f[x][l-k], f[e][k]));\n\t\t\t\tac[x][l] = true;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= sz[x]; ++i) {\n\t\tif (!ac[x][i]) continue;\n\t\tBig New = Zero; New.t[1] = i;\n\t\tf[x][0] = Max(f[x][0], MBig(f[x][i], New));\n\t}\n}\nvoid work () {\n\tGetAns(root, 0);\n\tprintBig(f[root][0]);\n}\nvoid prepare () {\n\tZero.l = 1; Zero.t[1] = 1;\n\tn = in();\n\tfor (int i = 1; i < n; ++i) {\n\t\tint u = in(), v = in();\n\t\tadd(u, v); add(v, u);\n\t}\n\twork();\n}\n\nint main () {\n\tprepare();\n}\n```\n",
        "postTime": 1573226473,
        "uid": 114643,
        "name": "RikoHere",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011 P1411 \u6811"
    },
    {
        "content": "## [\u535a\u5ba2\u5185\u67e5\u770b](https://www.cnblogs.com/A2484337545/p/14596173.html)\n\n\u4e00\u9053\u6bd2\u7624\u6811\u578bDP,\u4e3b\u8981\u662f\u56e0\u4e3a\u8981\u7528\u9ad8\u7cbe.\n\n\u9996\u5148\u5b9a\u4e49\u72b6\u6001 $f_{i,j}$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811,\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $j$,\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u8bb0\u5f55\u7684\u662f\u4ec0\u4e48? \u5b83\u8868\u793a\u9664\u53bb $i$ \u6240\u5728\u7684\u8fde\u901a\u5757\u7684\u8d21\u732e\u7b54\u6848\u7684\u6700\u5927\u503c,\u53ea\u9700\u8981\u5728\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u518d\u52a0\u56de\u53bb.\n\n\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n\n$$f_{u,j}=\\max_{v \\in u,1 \\le k \\le j}^{1\\le j\\le size(u)}(f_{u,k}+f_{v,j-k})$$\n\n$$f_{u,0}=\\max_{1 \\le j \\le size(u)}f_{u,j}\\times j$$\n\n\u7136\u540e\u518d\u52a0\u4e0a\u4e00\u4e2a\u9ad8\u7cbe\u5c31\u884c\u4e86\n\n\u90e8\u5206\u4ee3\u7801\n```\nvoid dfs(int u, int fa)\n{\n    siz[u] = 1, f[u][0] = f[u][1] = 1;\n    for (int i = head[u]; i; i = net[i])\n    {\n        int v = ver[i];\n        if (v == fa)\n            continue;\n        dfs(v, u);\n        siz[u] += siz[v];\n        for (int j = siz[u]; j >= 1; j--)\n            for (int k = min(siz[u] - siz[v], j); k >= max(1, j - siz[v]); k--)//\u6ce8\u610f\u679a\u4e3e\u987a\u5e8f\n                f[u][j] = max(f[u][j], f[u][k] * f[v][j - k]);                \n    }\n    for (int i = 0; i <= siz[u]; i++)\n        f[u][0] = max(f[u][i] * i, f[u][0]);\n}\n\n```",
        "postTime": 1617076756,
        "uid": 277863,
        "name": "BzhH",
        "ccfLevel": 6,
        "title": "\u9898\u89e3P1411 \u6811"
    }
]