[
    {
        "content": "\u6765\u4e00\u4efd\u9898\u89e3\uff0c\u55ef\u3002\u3002\u771f\u597d\u5403\u3002\n\n\u65b0\u624b\u521a\u5b66spfa\uff08\u592a\u83dc\u4e86\uff09\uff0c\u7b2c\u4e00\u6b21\u81ea\u5df1\u5199\u8fc7\uff0c\u5728\u6b64\u53d1\u8868\u9898\u89e3\u7559\u5ff5\uff0c\u8fd8\u671b\u5404\u4f4d\u5de8\u4f6c\u53ca\u5927\u795e\u6307\u70b9\u6279\u8bc4\u3002\n\n\u597d\uff0c\u8a00\u5f52\u6b63\u4f20\u3002\u672c\u9898\u6839\u636e\u6570\u636e\u8fb9\u6570m<=500000\uff0c\u90bb\u63a5\u77e9\u9635\u5b58\u4e0d\u4e0b\uff0c\u53ea\u80fd\u4f7f\u7528\u9759\u6001\u90bb\u63a5\u8868\u5b58\u50a8\u3002\u7136\u540e\u89c1\u697c\u4e0b\u6709\u5199dijkstra+\u5806\u4f18\u5316\u7684\uff0c\u6709floyd\u4f18\u5316\u7684\uff0c\u6709\u5404\u79cd\u725bX\u65b9\u6cd5\uff0c\u672c\u4eba\u592a\u83dc\uff0c\u53ea\u4f1a\u5957\u6a21\u677f\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4efd\u6559\u79d1\u4e66\u5f0f\u7684\u90bb\u63a5\u8868+spfa\u7684\u89e3\u51b3\u65b9\u6cd5\u5171\u5927\u5bb6\u53c2\u8003\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nconst long long inf=2147483647;\nconst int maxn=10005;\nconst int maxm=500005;\nusing namespace std;\nint n,m,s,num_edge=0;\nint dis[maxn],vis[maxn],head[maxm];\nstruct Edge\n{\n  int next,to,dis;\n}edge[maxm]; //\u7ed3\u6784\u4f53\u8868\u793a\u9759\u6001\u90bb\u63a5\u8868\nvoid addedge(int from,int to,int dis) //\u90bb\u63a5\u8868\u5efa\u56fe\n{ //\u4ee5\u4e0b\u662f\u6570\u636e\u7ed3\u6784\u4e66\u4e0a\u7684\u6807\u51c6\u4ee3\u7801\uff0c\u4e0d\u61c2\u7ffb\u4e66\u770b\u89e3\u91ca\n  edge[++num_edge].next=head[from]; //\u94fe\u5f0f\u5b58\u50a8\u4e0b\u4e00\u6761\u51fa\u8fb9\n  edge[num_edge].to=to; //\u5f53\u524d\u8282\u70b9\u7f16\u53f7\n  edge[num_edge].dis=dis; //\u672c\u6761\u8fb9\u7684\u8ddd\u79bb\n  head[from]=num_edge; //\u8bb0\u5f55\u4e0b\u4e00\u6b21\u7684\u51fa\u8fb9\u60c5\u51b5\n}\nvoid spfa()\n{\n  queue<int> q; //spfa\u7528\u961f\u5217\uff0c\u8fd9\u91cc\u7528\u4e86STL\u7684\u6807\u51c6\u961f\u5217\n  for(int i=1; i<=n; i++) \n  {\n    dis[i]=inf; //\u5e26\u6743\u56fe\u521d\u59cb\u5316\n    vis[i]=0; //\u8bb0\u5f55\u70b9i\u662f\u5426\u5728\u961f\u5217\u4e2d\uff0c\u540cdijkstra\u7b97\u6cd5\u4e2d\u7684visited\u6570\u7ec4\n  }\n  q.push(s); dis[s]=0; vis[s]=1; //\u7b2c\u4e00\u4e2a\u9876\u70b9\u5165\u961f\uff0c\u8fdb\u884c\u6807\u8bb0\n  while(!q.empty())\n  {\n    int u=q.front(); //\u53d6\u51fa\u961f\u9996\n    q.pop(); vis[u]=0; //\u51fa\u961f\u6807\u8bb0\n    for(int i=head[u]; i; i=edge[i].next) //\u90bb\u63a5\u8868\u904d\u5386\uff0c\u4e0d\u591a\u89e3\u91ca\u4e86\uff08\u4e5f\u53ef\u7528vector\u4ee3\u66ff\uff09\n    {\n      int v=edge[i].to; \n      if(dis[v]>dis[u]+edge[i].dis) //\u5982\u679c\u6709\u6700\u77ed\u8def\u5c31\u66f4\u6539\n      {\n        dis[v]=dis[u]+edge[i].dis;\n        if(vis[v]==0) //\u672a\u5165\u961f\u5219\u5165\u961f\n        {\n          vis[v]=1; //\u6807\u8bb0\u5165\u961f\n          q.push(v);\n        }\n      }\n    }\n  }\n}\nint main()\n{\n  cin>>n>>m>>s;\n  for(int i=1; i<=m; i++)\n  {\n    int f,g,w;\n    cin>>f>>g>>w; \n    addedge(f,g,w); //\u5efa\u56fe\uff0c\u6709\u5411\u56fe\u8fde\u4e00\u6b21\u8fb9\u5c31\u53ef\u4ee5\u4e86\n  }\n  spfa(); //\u5f00\u59cb\u8dd1spfa\n  for(int i=1; i<=n; i++)\n    if(s==i) cout<<0<<\" \"; //\u5982\u679c\u662f\u56de\u5230\u81ea\u5df1\uff0c\u76f4\u63a5\u8f93\u51fa0\n      else cout<<dis[i]<<\" \"; //\u5426\u5219\u6253\u5370\u6700\u77ed\u8ddd\u79bb\n  return 0;\n} //\u7ed3\u675f\n\u5e94\u8be5\u8bb2\u5f97\u975e\u5e38\u6e05\u695a\u4e86\uff0c\u518d\u4e0d\u61c2\u5c31\u7ffb\u4e66\u5427\u3002\uff08\u867d\u7136\u6211\u66fe\u7ecf\u4e5f\u4e0d\u61c2\uff09\n```",
        "postTime": 1510319432,
        "uid": 9156,
        "name": "\u5fae\u96e8\u71d5\u53cc\u98de",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "[\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10363284.html)\n\n\u8fd9\u91cc\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e09\u79cd\u6700\u77ed\u8def\u5e38\u7528\u7b97\u6cd5\uff1a\n\nfloyd(O(n^3))\u3001dijkstra(O(nlogn))\u3001SPFA(O(KE))\n\n\u5176\u5b9e\u8fd8\u6709\u4e00\u4e2aBellman-Ford\uff08O(nm)\uff09\u7b97\u6cd5\uff0c\u4f46\u7531\u4e8e\u4e0d\u5e38\u7528\u800c\u4e14SPFA\u662f\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6539\u8fdb\u7248\u672c\uff0c\u5728\u8fd9\u91cc\u5c31\u4e0d\u5217\u4e3e\u4e86\n\n# floyd\uff1a\u6548\u7387\u8f83\u4f4e\uff0c\u53ea\u670970\u5206\n\n\u5177\u4f53\u601d\u8def\uff1a\u5c06\u6240\u6709\u8282\u70b9\u7684\u8ddd\u79bb\u90fd\u5b58\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u7531\u4e8e\u8981\u679a\u4e3e\u6240\u6709\u7684\u4e24\u4e24\u7ec4\u5408\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u7ec4\u5408\u7684\u201c\u4e2d\u8f6c\u70b9\u201d\uff0c\u518d\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\n\n\u5728\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u65f6\u5019\u5c31\u4f1a\u6d6a\u8d39\u8bb8\u591a\u7a7a\u95f4\uff0c\u4f46\u5728\u6c42\u591a\u6e90\u6700\u77ed\u8def\u65f6\uff0c\u590d\u6742\u5ea6\u4ecd\u662fO(n^3)\u4f7f\u7528\u5f88\u5e7f\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define inf 1234567890\n#define maxn 10005\ninline int read()\n{\n    int x=0,k=1; char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')k=-1;c=getchar();}\n    while(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*k;\n}//\u5feb\u8bfb\nint a[maxn][maxn],n,m,s;\ninline void floyd()\n{\n    for(int k=1;k<=n;k++)\n    //\u8fd9\u91cc\u8981\u5148\u679a\u4e3ek\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e2d\u8f6c\u70b9\uff09\n\t{\n        for(int i=1;i<=n;i++)\n\t\t{\n            if(i==k||a[i][k]==inf)\n            {\n                continue;\n\t\t\t}\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t{\n                a[i][j]=min(a[i][j],a[i][k]+a[k][j]);\n                //\u677e\u5f1b\u64cd\u4f5c\uff0c\u5373\u66f4\u65b0\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n                //\u677e\u5f1b\u64cd\u4f5c\u6709\u4e09\u89d2\u5f62\u7684\u4e09\u8fb9\u5173\u7cfb\u63a8\u51fa\n                //\u5373\u4e24\u8fb9\u4e4b\u548c\u5927\u4e8e\u7b2c\u4e09\u8fb9\n            }\n        }\n    }\n}\nint main()\n{\n    n=read(),m=read(),s=read();\n    for(int i=1;i<=n;i++)\n\t{\n        for(int j=1;j<=n;j++)\n\t\t{\n            a[i][j]=inf;\n        }\n    }\n\t//\u521d\u59cb\u5316\uff0c\u76f8\u5f53\u4e8ememset(a,inf,sizeof(a))\n    for(int i=1,u,v,w;i<=m;i++)\n\t{\n        u=read(),v=read(),w=read();\n        a[u][v]=min(a[u][v],w);\n        //\u53d6min\u53ef\u4ee5\u5bf9\u4ed8\u91cd\u8fb9\n    }\n    floyd();\n    a[s][s]=0;\n    for(int i=1;i<=n;i++)\n    {\n        printf(\"%d \",a[s][i]);\n    }\n    return 0;\n}\n```\n# dijkstra\uff1a\u5bf9\u4e8e\u65e0\u8d1f\u8fb9\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fbe\u5230O(nlogn)\u4e14\u5f88\u96be\u88ab\u5361\n\u5177\u4f53\u601d\u8def\uff1aDijkstra\u662f\u57fa\u4e8e\u4e00\u79cd\u8d2a\u5fc3\u7684\u7b56\u7565\uff0c\u9996\u5148\u7528\u6570\u7ec4dis\u8bb0\u5f55\u8d77\u70b9\u5230\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u518d\u7528\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58\u5df2\u7ecf\u627e\u5230\u6700\u77ed\u8def\u5f84\u7684\u70b9\n\n\u7136\u540e\uff0c\u4ecedis\u6570\u7ec4\u9009\u62e9\u6700\u5c0f\u503c\uff0c\u5219\u8be5\u503c\u5c31\u662f\u6e90\u70b9s\u5230\u8be5\u503c\u5bf9\u5e94\u7684\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u628a\u8be5\u70b9\u8bb0\u4e3a\u5df2\u7ecf\u627e\u5230\u6700\u77ed\u8def\n\n\u6b64\u65f6\u5b8c\u6210\u4e00\u4e2a\u9876\u70b9\uff0c\u518d\u770b\u8fd9\u4e2a\u70b9\u80fd\u5426\u5230\u8fbe\u5176\u5b83\u70b9\uff08\u8bb0\u4e3av\uff09\uff0c\u5c06dis[v]\u7684\u503c\u8fdb\u884c\u66f4\u65b0\n\n\u4e0d\u65ad\u91cd\u590d\u4e0a\u8ff0\u52a8\u4f5c\uff0c\u5c06\u6240\u6709\u7684\u70b9\u90fd\u66f4\u65b0\u5230\u6700\u77ed\u8def\u5f84\n\n\u8fd9\u79cd\u7b97\u6cd5\u5b9e\u9645\u4e0a\u662fO(n^2)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u5728dis\u6570\u7ec4\u4e2d\u9009\u62e9\u6700\u5c0f\u503c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u8fdb\u884c\u4f18\u5316\u3002~~\u7ebf\u6bb5\u6811\uff1f\u5e73\u8861\u6811\uff1f~~\n\n\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u7528STL\u91cc\u7684\u5806\u6765\u8fdb\u884c\u4f18\u5316\uff0c\u5806\u76f8\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4ee5\u53ca\u5e73\u8861\u6811\u6709\u7740\u5e38\u6570\u5c0f\uff0c\u7801\u91cf\u5c0f\u7b49\u4f18\u70b9\uff0c\u5e76\u4e14\u5806\u7684\u4e00\u4e2a\u5999\u5999\u7684\u6027\u8d28\u5c31\u662f\u53ef\u4ee5\u5728nlogn\u7684\u65f6\u9650\u5185\u6ee1\u8db3\u5806\u9876\u662f\u5806\u5185\u5143\u7d20\u7684\u6700\u5927\uff08\u5c0f\uff09\u503c\uff0c\u4e4b\u4e0d\u6b63\u662f\u6211\u4eec\u8981\u7684\u561b\uff1f\n\n```\n\u4ee5\u4e0b\u662f\u7528\u5806\u4f18\u5316dijkstra\u4ee3\u7801\uff1a\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 10005\n#define maxm 500005\n#define INF  1234567890\ninline int read()\n{\n    int x=0,k=1; char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')k=-1;c=getchar();}\n    while(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*k;\n}\nstruct Edge\n{\n    int u,v,w,next;\n}e[maxm];\nint head[maxn],cnt,n,m,s,vis[maxn],dis[maxn];\nstruct node\n{\n    int w,now;\n    inline bool operator <(const node &x)const\n    //\u91cd\u8f7d\u8fd0\u7b97\u7b26\u628a\u6700\u5c0f\u7684\u5143\u7d20\u653e\u5728\u5806\u9876\uff08\u5927\u6839\u5806\uff09\n    {\n        return w>x.w;//\u8fd9\u91cc\u6ce8\u610f\u7b26\u53f7\u8981\u4e3a'>'\n    }\n};\npriority_queue<node>q;\n//\u4f18\u5148\u961f\u5217\uff0c\u5176\u5b9e\u8fd9\u91cc\u4e00\u822c\u4f7f\u7528\u4e00\u4e2apair\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u6240\u4ee5\u7528\u7684\u7ed3\u6784\u4f53\ninline void add(int u,int v,int w)\n{\n    e[++cnt].u=u;\n    //\u8fd9\u53e5\u8bdd\u5bf9\u4e8e\u6b64\u9898\u4e0d\u9700\u8981\uff0c\u4f46\u5728\u7f29\u70b9\u4e4b\u7c7b\u7684\u95ee\u9898\u8fd8\u662f\u6709\u7528\u7684\n    e[cnt].v=v;\n    e[cnt].w=w;\n    e[cnt].next=head[u];\n    //\u5b58\u50a8\u8be5\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\n    head[u]=cnt;\n    //\u66f4\u65b0\u76ee\u524d\u8be5\u70b9\u7684\u6700\u540e\u4e00\u6761\u8fb9\uff08\u5c31\u662f\u8fd9\u4e00\u6761\u8fb9\uff09\n}\n//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\nvoid dijkstra()\n{\n    for(int i=1;i<=n;i++)\n    {\n        dis[i]=INF;\n    }\n    dis[s]=0;\n    //\u8d4b\u521d\u503c\n    q.push((node){0,s});\n    while(!q.empty())\n    //\u5806\u4e3a\u7a7a\u5373\u4e3a\u6240\u6709\u70b9\u90fd\u66f4\u65b0\n    {\n        node x=q.top();\n        q.pop();\n        int u=x.now;\n        //\u8bb0\u5f55\u5806\u9876\uff08\u5806\u5185\u6700\u5c0f\u7684\u8fb9\uff09\u5e76\u5c06\u5176\u5f39\u51fa\n        if(vis[u]) continue; \n        //\u6ca1\u6709\u904d\u5386\u8fc7\u624d\u9700\u8981\u904d\u5386\n        vis[u]=1;\n        for(int i=head[u];i;i=e[i].next)\n        //\u641c\u7d22\u5806\u9876\u6240\u6709\u8fde\u8fb9\n        {\n            int v=e[i].v;\n            if(dis[v]>dis[u]+e[i].w)\n            {\n            \tdis[v]=dis[u]+e[i].w;\n            \t//\u677e\u5f1b\u64cd\u4f5c\n            \tq.push((node){dis[v],v});\n            \t//\u628a\u65b0\u904d\u5386\u5230\u7684\u70b9\u52a0\u5165\u5806\u4e2d\n            }\n        }\n    }\n}\nint main()\n{\n    n=read(),m=read(),s=read();\n    for(int i=1,x,y,z;i<=m;i++)\n    {\n        x=read(),y=read(),z=read();\n        add(x,y,z);\n    }\n    dijkstra();\n    for(int i=1;i<=n;i++)\n    {\n        printf(\"%d \",dis[i]);\n    }\n    return 0;\n}\n```\n# SPFA\uff1a\u8003\u573a\u614e\u7528\uff0c\u5728\u6bd2\u7624\u6570\u636e\u9762\u524d\u53ef\u80fd\u9000\u5316\u5230O(nm)\n\u5177\u4f53\u601d\u8def\uff1a\u8fd9\u91cc\u7528\u7684\u662fSTL\u961f\u5217\uff0c\u9996\u5148\u7528\u6570\u7ec4dis\u8bb0\u5f55\u8d77\u70b9\u5230\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u7528\u90bb\u63a5\u8868\u6765\u5b58\u50a8\u56fe\uff0c\u7528vis\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u662f\u5426\u5728\u961f\u5217\u4e2d\n\n\u5177\u4f53\u64cd\u4f5c\u4e3a\uff1a\u7528\u961f\u5217\u6765\u4fdd\u5b58\u5f85\u4f18\u5316\u7684\u7ed3\u70b9\uff08\u7c7b\u4f3c\u4e8eBFS\uff09\uff0c\u4f18\u5316\u65f6\u6bcf\u6b21\u53d6\u51fa\u961f\u9996\u7ed3\u70b9\uff0c\u5e76\u4e14\u7528\u961f\u624b\u8282\u70b9\u6765\u5bf9\u6700\u77ed\u8def\u5f84\u8fdb\u884c\u66f4\u65b0\u5e76\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\n\n\u5982\u679c\u8981\u5bf9\u6240\u8fde\u70b9\u7684\u6700\u77ed\u8def\u5f84\u9700\u8981\u66f4\u65b0\uff0c\u4e14\u6539\u70b9\u4e0d\u5728\u5f53\u524d\u7684\u961f\u5217\u4e2d\uff0c\u5c31\u5c06\u6539\u70b9\u52a0\u5165\u961f\u5217\n\n\u7136\u540e\u4e0d\u65ad\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u76f4\u81f3\u961f\u5217\u7a7a\u4e3a\u6b62\u3002\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n    int x=0,k=1; char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')k=-1;c=getchar();}\n    while(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*k;\n}\n#define maxn 10005\n#define maxm 500005\n#define inf 1234567890\nint n,m,s,tot,dis[maxn],head[maxn];\nbool vis[maxn];\nstruct Edge\n{\n      int next,to,w;\n}h[maxm];\nvoid add(int u,int v,int w)\n{\n    h[++tot].next=head[u];\n    h[tot].to=v;\n    h[tot].w=w;\n    head[u]=tot;\n}\n//\u4e0a\u9762\u548cdijkstra\u7b97\u6cd5\u57fa\u672c\u4e0a\u4e00\u6837\nqueue<int> q;\n//\u961f\u5217\u4f18\u5316\ninline void spfa()\n{\n    for(int i=1; i<=n; i++)\n    {\n        dis[i]=inf;\n        //\u8d4b\u521d\u503c\n    }\n    int u,v;\n    q.push(s);\n    dis[s]=0;\n    //\u5c06\u8d77\u70b9\u7684\u503c\u8d1f\u4e3a0\n    vis[s]=1;//\u8fd9\u53e5\u8bdd\u53ef\u52a0\u53ef\u4e0d\u52a0\uff0c\u56e0\u4e3a\u5faa\u73af\u7684\u65f6\u5019vis[s]\u53c8\u4f1a\u88ab\u8d4b\u4e3a0\n    while(!q.empty())\n    //\u5f53\u961f\u5217\u91cc\u6ca1\u6709\u5143\u7d20\u7684\u65f6\u5019\uff0c\u90a3\u5c31\u5df2\u7ecf\u66f4\u65b0\u4e86\u6240\u6709\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\n\t{\n        u=q.front();\n        //\u5c06\u961f\u624b\u8282\u70b9\u8bb0\u5f55\u5e76\u5f39\u51fa\u961f\u9996\u8282\u70b9\n        q.pop();\n        vis[u]=0;\n        for(int i=head[u];i;i=h[i].next)\n        //\u5bfb\u627e\u4e0eu\u76f8\u8fde\u7684\u8fb9\n\t\t{\n            v=h[i].to;\n            if(dis[v]>dis[u]+h[i].w)\n\t\t\t{\n                dis[v]=dis[u]+h[i].w;\n                //\u677e\u5f1b\u64cd\u4f5c\uff0c\u548cfloyd\u6bd4\u8f83\u76f8\u4f3c\n                if(!vis[v])\n\t\t\t\t{\n                //\u5df2\u7ecf\u5728\u961f\u5217\u91cc\u7684\u70b9\u5c31\u4e0d\u7528\u518d\u8fdb\u5165\u4e86\n                      vis[v]=1;\n                      q.push(v);\n                }\n            }\n        }\n    }\n}\nint main(){\n    n=read(),m=read(),s=read();\n    for(int i=1,u,v,w;i<=m;i++)\n\t{\n        u=read(),v=read(),w=read();\n        add(u,v,w);\n    }\n    spfa();\n    for(int i=1; i<=n; i++)\n    {\n        printf(\"%d \",dis[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1513581212,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u6d45\u8c08\u5355\u6e90\u6700\u77ed\u8def\u5f84"
    },
    {
        "content": "\n\n# \u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\u2014\u2014Dijkstra\n\n\n------------\n\n## \u5b9e\u73b0\u65b9\u6cd5\uff1a\n**1.**\u5b9a\u4e49ans[100000]\uff0cans[i]\u4ee3\u8868\u5230\u8fbei\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\n\n**2.**\u5b9a\u4e49bool\u6570\u7ec4visit\uff0c\u4ee3\u8868\u662f\u5426\u6765\u8fc7\u8fd9\u91cc\n\n- \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u8bbf\u95ee\u8fc7\uff0c\u662f\u6307\u201c\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u4e2d\u5fc3\u8ba1\u7b97\u8fc7\u201d\uff0c\u800c\u4e0d\u662fans\u503c\u88ab\u66f4\u65b0\u8fc7\n\n**2.**ans[\u8d77\u70b9]=0,\u5176\u4f59\u7684\u8d4b\u503c\u4e3ainf\n\n**3.**\u5b9a\u4e49\u4e00\u4e2acurr\u53d8\u91cf\uff0cvisit[current]=1\uff08\u8bbf\u95ee\u8fc7\uff09\uff0c\u4ee3\u8868\u73b0\u5728\u7684\u4f4d\u7f6e\uff0c\u521d\u59cb\u503c\u4e3a\u8d77\u70b9\u3002\n\n**4.**\u5217\u4e3e\u6240\u6709\u4e0ecurr\u76f8\u8054\u901a\u7684\u7684\u70b9\uff0c\u5c06\u8fd9\u4e9b\u70b9(i)\u7684ans\u503c\u66f4\u65b0\uff1a\n\n$ ans[i]=min(ans[i],ans[curr]+ $\u5230\u8fd9\u4e9b\u70b9\u9700\u8981\u7684\u82b1\u8d39 $)$\n\n**5.** \u5217\u4e3e\u6240\u6709\u6ca1\u6709\u8fc7\u7684\u7684\u70b9\uff0c\u627e\u5230ans\u503c\u6700\u5c0f\u7684\u70b9\uff0c\u8d4b\u503c\u7ed9curr\uff0cvisit[current]=1\uff08\u8bbf\u95ee\u8fc7\uff09\n\n**6** \u6240\u6709\u70b9\u90fd\u8bbf\u95ee\u8fc7\uff08visit[i]\u90fd==1\uff09\uff0c\u7a0b\u5e8f\u7ed3\u675f\u3002\u6b64\u65f6\uff0cans[i]\u4ee3\u8868\u4ece\u8d77\u70b9\u5230i\u7684\u6700\u77ed\u8def\u5f84\n\n\n------------\n\n## \u4f2a\u4ee3\u7801\n```cpp\nbool vis[1000000];//\u662f\u5426\u8bbf\u95ee\u8fc7\nint ans[1000000];\nint curr=\u8d77\u70b9;\nmemset(ans,0x7fffffff,sizeof(ans))\nwhile(vis[curr]==0)\n{\n\tvis[curr]=1;\n\tfor(int i;\u5217\u4e3e\u6240\u6709curr\u8fde\u901a\u7684\u70b9\uff09\n    {\n    \tans[i]=min(ans[i],ans[curr]+k)//k\u4ee3\u8868\u4ececurr\u70b9\u5230i\u70b9\u7684\u6700\u77ed\u8def\n    }\n    int minn=2147483647;\n    for(int i=1;i<=m;i++)//\u5217\u4e3e\u6240\u6709\u70b9\n    {\n    \tif(vis[i]==0&&ans[i]<minn)//\u6ca1\u8bbf\u95ee\u8fc7\u4e14\u5c0f\n        {\n        \tminn=ans[i];//\u66f4\u65b0\u6700\u5c0f\u503c\n            curr=i;//\u66f4\u65b0\u4e0b\u4e00\u4e2a\u70b9\n        }\n    }\n}\n\n```\n\n\n------------\n\n## \u5b58\u56fe\u65b9\u5f0f\n\u94fe\u5f0f\u524d\u5411\u661f\n**\u4ee5\u4e0b\u662f\u5173\u4e8e\u94fe\u5f0f\u524d\u5411\u661f\u7684\u4ecb\u7ecd \uff0c\u4f1a\u7684\u53ef\u4ee5\u8df3\u8fc7\uff1a**\n \n\n\n## \u8fb9\u7684\u5b58\u50a8\n\n\u8fd9\u79cd\u5b58\u56fe\u65b9\u5f0f\u53ea\u9700\u8981\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u70b9\u5f15\u51fa\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u5b58\u50a8\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\u7684\u6bcf\u6761\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u4e0d\u91cd\u4e0d\u6f0f\u3002\n\n\n\u5728\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff1a\n```\nstruct EDGE \n{\n    int next;\n    int to;\n}edge[1000000];\n```\n\u548c\u4e00\u4e2a\u6570\u7ec4\uff1a\n```\nint head[1000000];\n```\n\u548c\u4e00\u4e2a\u53d8\u91cf\uff1a\n```\nint cnt=0;//\u6307\u9488\n```\n\u4f60\u4f1a\u53d1\u73b0\u7adf\u7136\u6ca1\u5b58\u8d77\u70b9\uff01\uff01\u5176\u5b9e\u8d77\u70b9\u662f\u7528$head$\u5b58\u7684\n ### \u4e3e\u4f8b\uff1a\n ![](https://cdn.luogu.com.cn/upload/pic/43957.png   )\n\n\n\u5982\u56fe\uff1a\u8fd9\u6837\u7684\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8f93\u5165\u662f\uff1a\n\n```\n1 2\n1 3\n1 4\n2 3\n```\n\n### \u9010\u6b65\u5206\u6790\uff1a\n\n#### 1.\u8f93\u51651 2\uff0c\u4ee3\u88681\u8fde\u54112\u3002\n```\ncnt++;//\u4f5c\u4e3a\u7ed3\u6784\u4f53\u4e0b\u6807\uff0c\u6ca1\u6709\u610f\u4e49\nhead[1]=cnt;//\u7ed3\u70b91\u7684\u7b2c\u4e00\u4e2a\u513f\u5b50\u5b58\u5728\u4e86edge[cnt]\u91cc\u9762\nedge[cnt].to=2;\u7ed3\u70b91\u7684\u513f\u5b50\u662f2\n```\n\u6b64\u65f6\uff1a\n$cnt=1$\n\n| $edge$| $cnt=1$ | $cnt=2$ |$ cnt=3$ |$cnt=4$  |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| $to $| $2$ |  $0$| $ 0$| $0$ |\n|  $next$|$ 0 $|$0 $ | $0$ | $0$|\n\n| $head $| \u4e0b\u6807$=1 $| \u4e0b\u6807$=2$ |\u4e0b\u6807$=3 $ | \u4e0b\u6807$=4 $|\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n|  \u503c| $1 $|$ 0 $|$ 0 $|$ 0 $|\n\n\n\n#### 2.\u8f93\u51651 3\uff0c\u4ee3\u88681\u8fde\u54113\u3002\n```\ncnt++;\nhead[1]=cnt;\nedge[cnt].to=3;\u7ed3\u70b91\u7684\u513f\u5b50\u662f3\n//\u8fd9\u65f6,3\u6210\u4e3a\u4e86\u7ed3\u70b91\u7684\u513f\u5b50\uff0c\u4e0d\u8fc72\u88ab\u6324\u4e86\u4e0b\u53bb...\n//\u6240\u4ee5\u8981\u5f15\u5165\u7ed3\u6784\u4f53\u4e2dnext\u5143\u7d20\uff0c\u8bb0\u5f55\uff1a3\u8fd8\u6709\u4e2a\u5144\u5f1f\uff08next\uff09\u662f2\n//\u6240\u4ee5\u4ee3\u7801\u8981\u6362\u6210\uff1a\ncnt++;\nedge[cnt].to=3;//\u7ed3\u70b91\u8fde\u54113\nedge[cnt].next=head[1];//3\u7684\u5144\u5f1f\u662f2\nhead[1]=cnt;//\u66f4\u65b0head\n```\n\n\u6b64\u65f6\uff1a\n$cnt=2$\n\n| $edge$| $cnt=1$ | $cnt=2$ |$ cnt=3$ |$cnt=4$  |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| $to $| $2$ |  $3$| $ 0$| $0$ |\n|  $next$|$ 0 $|$1 $ | $0$ | $0$|\n\n| $head $| \u4e0b\u6807$=1 $| \u4e0b\u6807$=2$ |\u4e0b\u6807$=3 $ | \u4e0b\u6807$=4 $|\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n|  \u503c| $2 $|$ 0 $|$ 0 $|$ 0 $|\n\n\n\n#### 3.\u8f93\u51651 4\uff0c\u4ee3\u88681\u8fde\u54114\u3002\n\n\u6b64\u65f6\uff1a\n$cnt=3$\n\n\n\n| $edge$| $cnt=1$ | $cnt=2$ |$ cnt=3$ |$cnt=4$  |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| $to $| $2$ |  $3$| $ 4$| $0$ |\n|  $next$|$ 0 $|$1 $ | $2$ | $0$|\n\n| $head $| \u4e0b\u6807$=1 $| \u4e0b\u6807$=2$ |\u4e0b\u6807$=3 $ | \u4e0b\u6807$=4 $|\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n|  \u503c| $3 $|$ 0 $|$ 0 $|$ 0 $|\n\n\n#### 4.\u8f93\u51652 3\uff0c\u4ee3\u88682\u8fde\u54113\u3002\n\n\u6b64\u65f6\uff1a\n$cnt=4$\n\n| $edge$| $cnt=1$ | $cnt=2$ |$ cnt=3$ |$cnt=4$  |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| $to $| $2$ |  $3$| $ 4$| $3$ |\n|  $next$|$ 0 $|$1 $ | $2$ | $0$|\n\n| $head $| \u4e0b\u6807$=1 $| \u4e0b\u6807$=2$ |\u4e0b\u6807$=3 $ | \u4e0b\u6807$=4 $|\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n|  \u503c| $3 $|$ 4 $|$ 0 $|$ 0 $|\n\n\n\n### \u6ce8\u610f\uff1a$edge[cnt].next$ \u548c$head[1]$\u5b58\u8d2e\u7684\u90fd\u662f\u7ed3\u6784\u4f53\u4e0b\u6807\uff08\u5373$cnt$\u7684\u503c\uff09\u82e5\u8981\u8bbf\u95ee\u6307\u5411\u7684\u8fb9\u7684\u7f16\u53f7\uff0c\u5206\u522b\u7528$edge[edge[cnt].next].to$\uff0c$edge[head[1]].to$\n\n\n#### \u82e5\u9700\u8981\u8bb0\u5f55\u6743\u503c\uff0c\u5728\u7ed3\u6784\u4f53\u4e2d\u52a0\u5165\u4e00\u4e2a\u5143\u7d20\u5373\u53ef\n\n\u4ee3\u7801\uff1a(\u5e26\u6743\u503c\uff09\n```\n#include<iostream>\nusing namespace std;\nstruct edge \n{ \n    int next;\n    int to;\n    int wei;\n}edge[MAXM];\nint head[MAXN];//head[i]\u4e3ai\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9\nint cnt=0;\nvoid addedge(int u,int v,int w) //\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u6743\u503c \n{\n    edge[++cnt].next=head[u];//\u66f4\u65b0cnt\n    edge[cnt].to=v;\n    edge[cnt].w=w;\n    head[u]=cnt;\n}\nint main()\n{\n\tint n;\n    for(int i=1;i<=n;i++)\n    {\n    \tint a,b,wei;\n        addedge(a,b,wei);\n        //\u5982\u679c\u662f\u65e0\u5411\u56fe\uff0c\u8fd8\u8981addedge(b,a,wei);\n    }\n}\n```\n \n#### \u6ce8\u610f\uff1a\n \n \u8fd9\u91cc\u7684next\u6307\u7684\u662f\u904d\u5386\u65f6\u7684\u4e0b\u4e00\u6761\u8fb9\uff0chead\u6307\u7684\u662f\u904d\u5386\u65f6\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u800c\u5b58\u8fb9\u65f6\u76f8\u5f53\u4e8e\u53cd\u8fc7\u6765\u64cd\u4f5c\uff0c\u6240\u4ee5next\u8bb0\u5f55\u4e0a\u4e00\u6761\u8fb9\uff0c\u800chead\u8bb0\u5f55\u6700\u540e\u4e00\u6761\u8fb9\u3002\n\n\n\n------------\n\n## \u8fb9\u7684\u904d\u5386\n\n\u5728\u904d\u5386\u4ee5x\u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8fb9\u65f6\uff0c\u53ea\u9700\u8981\u8fd9\u6837\u5c31\u884c\n\n\t\tfor(int i=head[x];i!=0;i=edge[i].next)\n\n\u8fd9\u4e2a\u5faa\u73af\u7684\u7ed3\u675f\u6761\u4ef6\u662fi\u7b49\u4e8e0\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u5b58\u8fb9\u65f6\u7b2c\u4e00\u6761\u8fb9\uff0c\u5728\u628ahead\u503c\u5b58\u8fdbnext\u65f6\uff0chead\u8fd8\u6ca1\u6709\u66f4\u65b0\u8fc7\uff0c\u4e5f\u5c31\u662f0\u3002\u6240\u4ee5\u5f53next\u8fd4\u56de0\u65f6\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e9b\u8fb9\u904d\u5386\u5b8c\u6bd5\u4e86\u3002\n\n\n\n\n------------\n\n## \u4f18\u52bf\u4e0e\u7279\u70b9\n\n\n\u65e2\u53ef\u4ee5\u5b58\u56fe\uff0c\u4e5f\u53ef\u4ee5\u5b58\u6811\uff0c\u6bd4\u8d77\u90bb\u63a5\u77e9\u9635\uff0c\u94fe\u5f0f\u524d\u5411\u661f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO\uff08n\uff09\uff0c\u5927\u5927\u8282\u7701\u4e86\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6309\u8fb9\u5b58\u50a8\u7701\u6389\u4e86\u5f88\u591a\u4e24\u70b9\u65e0\u8fb9\u7684\u7a7a\u95f4\u3002\u5e76\u4e14\u5728\u904d\u5386\u7684\u65f6\u5019\uff0c\u90a3\u4e9b\u4e0e\u8d77\u70b9\u65e0\u8fb9\u76f8\u8fde\u7684\u70b9\u4e5f\u4e0d\u9700\u8981\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u4ee5\u8bf4\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u5360\u4f18\u52bf\uff0c\u8fd9\u5c31\u662f\u88abOIer\u4eec\u5e7f\u6cdb\u4f7f\u7528\u7684\u539f\u56e0\u3002\n\n \n\n------------\n\n## \u4ee3\u7801\n```\n#include<iostream>\nusing namespace std;\nint head[100000],cnt;\nlong long ans[1000000];\nbool vis[1000000];\nint m,n,s;\nstruct edge\n{\n\tint to;\n\tint nextt;\n\tint wei;\n}edge[1000000];\nvoid addedge(int x,int y,int z)\n{\n\tedge[++cnt].to=y;\n\tedge[cnt].wei=z;\n\tedge[cnt].nextt=head[x];\n\thead[x]=cnt;\n}\nint main()\n{\n\tcin>>m>>n>>s;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tans[i]=2147483647;\n\t}\n\tans[s]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\taddedge(a,b,c);\n\t}\n\tint pos=s;\n\twhile(vis[pos]==0)\n\t{\n\t\tlong long minn=2147483647;\n\t\tvis[pos]=1;\n\t\tfor(int i=head[pos];i!=0;i=edge[i].nextt)\n\t\t{\n\t\t\tif(!vis[edge[i].to]&&ans[edge[i].to]>ans[pos]+edge[i].wei)\n\t\t\t{\n\t\t\t\tans[edge[i].to]=ans[pos]+edge[i].wei;\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tif(ans[i]<minn&&vis[i]==0)\n\t\t\t{\n\t\t\t\tminn=ans[i];\n\t\t\t\tpos=i;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcout<<ans[i]<<' ';\n\t}\n}\n```",
        "postTime": 1547280975,
        "uid": 113401,
        "name": "2018\u4e00\u7ef4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "\u770b\u5230\u5404\u4f4d\u5927\u4f6c\u90fd\u4e0a\u4e86\u5404\u79cd\u5404\u6837\u7684SPFA\uff0c\u672c\u849f\u84bb\u53ea\u597d\u5f31\u5f31\u5730\u4e0a\u4e00\u4e2adijstra\uff08\u4e0d\u7528\u5806\u4f18\u5316\uff09\u3002\n\ndijstra\u7684\u601d\u8def\u5f88\u7b80\u5355\uff0c\u57fa\u672c\u4e0a\u5c31\u53ef\u4ee5\u7b97\u662f\u4e00\u4e2aDP\uff0c\u5c31\u662f\u627e\u5230\u4e0e\u8d77\u70b9\u8ddd\u79bb\u6700\u77ed\u8ddd\u79bb\u4e00\u5b9a\u7684\u70b9\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u5916\u62d3\u5c55\uff0c\u66f4\u65b0\u5176\u5b83\u70b9\u5bf9\u4e8e\u8d77\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u6ce8\u610f\uff1a\u5728\u6240\u6709\u5df2\u77e5\u8ddd\u79bb\u8d77\u70b9\u7684\u8ddd\u79bb\u4e2d\uff0c\u6700\u77ed\u7684\u90a3\u4e2a\u5c31\u662f\u65b0\u7684\u8d77\u70b9\uff08\u56e0\u4e3a\u5b83\u8ddd\u79bb\u8d77\u70b9\u7684\u8ddd\u79bb\u4e0d\u80fd\u518d\u77ed\u4e86\uff09\u3002\u5c06\u6574\u5f20\u56fe\u641c\u5b8c\uff0c\u5c31\u5927\u529f\u544a\u6210\u4e86\u3002\n\n\u672c\u4eba\u8fd8\u52a0\u4e86\u4e00\u4e2a\u524d\u5411\u661f\u5b58\u8fb9\u4f18\u5316\uff08\u5f00\u59cb\u76f4\u63a5\u66b4\u641c\uff0c\u4e8c\u7ef4\u5b58\u8fb9\uff0c\u53ea\u5f97\u4e8610\u5206......\uff09\uff08\u524d\u5411\u661f\u662f\u4ec0\u4e48\u4e1c\u897f\uff1f\u770b\u672c\u4eba\u4ee5\u524d\u7684\u9898\u89e3\u6216\u7f51\u4e0a\u53bb\u67e5\u4e00\u4e0b\u5c31\u884c\u4e86\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\uff0c\u76f4\u8fbeAC\uff01\n\n\u4e0b\u4e3a\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<string>\nusing namespace std;\nstruct Edge//\u524d\u5411\u661f\u5b58\u8fb9\n{\n    int z;//\u6b64\u8fb9\u7684\u5b50\u8282\u70b9\n    int val;//\u6b64\u8fb9\u7684\u6743\u503c\n    int nexty;//\u4e0e\u5b83\u6700\u8fd1\u7684\u7236\u8282\u70b9\u4e00\u6837\u7684\u8fb9\u7684\u7f16\u53f7\n}edge[1000000];\nint head[20000];//\u4ee5\u67d0\u70b9\u4e3a\u7236\u8282\u70b9\u5f15\u51fa\u7684\u6700\u540e\u4e00\u6761\u8fb9\nint cnt=0;//\u8fb9\u7f16\u53f7\ninline void add(int a,int b,int c)//\u5b58\u8fb9\n{\n    cnt++;\n    edge[cnt].z=b;\n    edge[cnt].val=c;\n    edge[cnt].nexty=head[a];\n    head[a]=cnt;//\u66f4\u65b0head\n}\nint main()\n{\n    bool visit[20000]={0};//\u662f\u5426\u4f5c\u4e3a\u8fc7\u8d77\u70b9\n    long long dis[20000];//\u8ddd\u79bb\n    int n,m,s;\n    int a,b,c;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<=n;i++)dis[i]=2147483647;\n    for(int i=0;i<m;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n    }\n    int curr=s;\n    dis[s]=0;\n    long long minn;\n    while(!visit[curr])//\u5373\u641c\u5b8c\u6574\u5f20\u56fe\n    {\n        visit[curr]=true;//\u5df2\u505a\u4e3a\u8fc7\u8d77\u70b9\n        for(int i=head[curr];i!=0;i=edge[i].nexty)//\u94fe\u5f0f\u524d\u5411\u661f\u641c\u8fb9\n        {\n            if(!visit[edge[i].z]&&dis[edge[i].z]>dis[curr]+edge[i].val)\n            dis[edge[i].z]=dis[curr]+edge[i].val;//\u66f4\u65b0\u64cd\u4f5c\n        }\n        minn=2147483647;\n        for(int i=1;i<=n;i++)\n        {\n            if(!visit[i]&&minn>dis[i])//\u53d6\u65b0\u7684\u6700\u5c0f\u503c\n            {\n                minn=dis[i];\n                curr=i;\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)printf(\"%lld \",dis[i]);\n    return 0;\n}\n```",
        "postTime": 1504157885,
        "uid": 32275,
        "name": "KesdiaelKen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "## \u8be6\u89e3dijsktra\u7684\u5806\u4f18\u5316\ndijkstra\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(N^2)$(\u57fa\u4e8e\u90bb\u63a5\u77e9\u9635)\u3001$O((N+M)logN)$(\u57fa\u4e8e\u90bb\u63a5\u8868\u6216\u94fe\u5f0f\u524d\u5411\u661f)\u3002$N^2 $\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5f88\u9ad8\u7684\u3002\u800c\u5bf9\u4e8e\u7a20\u5bc6\u56fe\u6765\u8bf4\uff0c$(N+M)logN$\u6bd4$N^2$\u8fd8\u8981\u6162\u3002\u90a3\u4e48\u5e94\u8be5\u600e\u4e48\u505a\uff1f\n\n\u6211\u4eec\u77e5\u9053\u8fd9\u4e00\u9898\u7528\u57fa\u4e8e\u90bb\u63a5\u77e9\u9635\u7684dijkstra\u662f\u4f1a\u70b8\u7684\u3002\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u57fa\u4e8e\u94fe\u5f0f\u524d\u5411\u661f\u7684dijkstra\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0cdijkstra\u6bcf\u6b21\u8fdb\u884c\u9009\u62e9\u8ddd\u79bb\u8d77\u70b9\u6700\u8fd1\u7684\u9876\u70b9\u9700\u8981$O(N)$\u7684\u65f6\u95f4\uff0c\u8fd9\u6837\u6bcf\u6b21\u90fd\u9700\u8981\u8017\u8d39\u5f88\u957f\u65f6\u95f4\u9009\u62e9\u3002\u6211\u4eec\u53ef\u4ee5\u91c7\u7528**\u5806**\u7684\u65b9\u5f0f\u8fdb\u884c\u4f18\u5316\uff0c\u4f7f\u6bcf\u6b21\u9009\u62e9\u65f6\u95f4\u964d\u81f3$O(logN)$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff0c\u6ce8\u89e3\u6bd4\u8f83\u8be6\u7ec6\u3002\n```\n#include<bits/stdc++.h>\n#include<cmath>\nusing namespace std;\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;//STL\u4f18\u5148\u961f\u5217\uff08\u4f7f\u7528pair\u7684\u60c5\u51b5\u4e0b\uff09\u7684\u5b9a\u4e49\u65b9\u6cd5\u3002\u7531\u4e8e\u8981\u91c7\u7528\u5c0f\u6839\u5806\uff0c\u6240\u4ee5\u9700\u8981\u8fd9\u6837\u5b9a\u4e49\u3002\u6ce8* \nint fir[500001],to[500001],val[500001],nex[500001],n,m,s,u,v,w,cnt;\nconst int inf=2147483647;\nlong long dis[10001];//\u4e3a\u4e86\u907f\u514d\u5224\u5b9a\u76f8\u52a0\u65f6\u7206\u6389int\u6210\u8d1f\u6570\uff0c\u6b64\u5904\u91c7\u7528long long\u3002\u6ce81* \nbool book[100001];\nvoid add_edge(int a,int b,int c)//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\uff0c\u4e0d\u61c2\u7684\u53ef\u4ee5\u95ee\u5ea6\u5a18 \n{\n\tto[++cnt]=b;\n\tval[cnt]=c;\n\tnex[cnt]=fir[a];\n\tfir[a]=cnt;\n}\nint main()\n{\n\tcin>>n>>m>>s;\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tcin>>u>>v>>w;\n\t\tadd_edge(u,v,w); \n\t}\n\tfor(int i=1; i<=n; i++)\n\t\tdis[i]=inf;\n\tdis[s]=0;//\u521d\u59cb\u5316dis\u6570\u7ec4 \n\tq.push(make_pair(0,s));//\u8fd9\u91cc\u91c7\u7528C++\u81ea\u5e26\u4e8c\u5143\u7ec4\u7f16\u5199\u3002\u6ce82* \n\twhile(q.size())//\u5f53\u5806\u4e2d\u8fd8\u6709\u5143\u7d20 \n\t{\n\t\tint x=q.top().second;//q.top()\u53d6\u51fa\u5806\u9876\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u8ddd\u79bb\u8d77\u70b9\u6700\u8fd1\u7684\u70b9\u3002 \n\t\tq.pop();//\u53d6\u5b8c\u5c31\u5220 \n\t\tif(book[x]) continue;//\u5982\u679c\u8fd9\u4e2a\u5b9a\u70b9\u6807\u8bb0\u8fc7\u4e86\uff0c\u5c31\u4e0d\u7528\u3002\u6ce83* \n\t\tbook[x]=1;//\u6807\u8bb0\u4e00\u4e0b \n\t\tfor(int i=fir[x]; i; i=nex[i])\n\t\t{\n\t\t\tif(dis[to[i]]>dis[x]+val[i])//dijkstra\u7b97\u6cd5\u6838\u5fc3\u8bed\u53e5 \n\t\t\t{\n\t\t\t\tdis[to[i]]=dis[x]+val[i];\n\t\t\t\tq.push(make_pair(dis[to[i]],to[i]));//\u6bcf\u6b21\u677e\u5f1b\u6210\u529f\uff0c\u628a\u5173\u4e8e\u5f53\u524d\u70b9\u7684\u4fe1\u606f\u538b\u5165\u5806\u3002 \n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tcout<<dis[i]<<\" \"; \n\treturn 0;\n}\n/*\n\u6ce8\uff1apriority_queue<(\u6570\u636e\u7c7b\u578b)>\u7684\u5b9a\u4e49\u65b9\u6cd5\u9ed8\u8ba4\u662f\u5927\u6839\u5806\u3002\u53ea\u6709priority_queue<(\u6570\u636e\u7c7b\u578b),vector<(\u6570\u636e\u7c7b\u578b)>,greater<(\u6570\u636e\u7c7b\u578b)> >\u7684\u65b9\u6cd5\u624d\u80fd\u5b9a\u4e49\u5c0f\u6839\u5806\u3002\u53e6\u5916\uff0c\u5e94\u8be5\u7528\u7a7a\u683c\u5206\u5f00\u4e24\u4e2a\u8fde\u5728\u4e00\u8d77\u7684\u5c16\u62ec\u53f7(<<\u6216>>)\uff0c\u5426\u5219\u7f16\u8bd1\u5668\u4f1a\u628a\u5b83\u8bc6\u522b\u6210\u6d41\u8bfb\u53d6\u8fd0\u7b97\u7b26\u3002\n \t\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u4e0d\u8fc7\u6211\u89c9\u5f97\u8fd9\u6837\u66f4\u597d\u4e9b\u3002\u6bd5\u7adf\u4e0d\u5c11\u4eba\u4e0d\u4f1a\u91cd\u8f7d\u3002\n \t\u53e6\u5916\uff0c\u4f18\u5148\u961f\u5217\u867d\u7136\u7b49\u4ef7\u4e8e\u5806\uff0c\u4f46\u662f\u5185\u90e8\u539f\u7406\u662f\u901a\u8fc7\u7ed9\u4e88\u53d8\u91cf\u4e00\u4e2a\u4f18\u5148\u503c\u6765\u5b9e\u73b0\u7684\uff0c\u4e0e\u5806\u4e0d\u540c\u3002 \n\u6ce81\uff1aC++\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u662f\u4ee5\u4e24\u4e2a\u53d8\u91cf\u4e2d\u6700\u9ad8\u7684\u6570\u636e\u7c7b\u578b\u5b58\u50a8\u7684\uff0c\u4e0e\u7ed3\u679c\u4fdd\u5b58\u53d8\u91cf\u65e0\u5173\u3002\u4e24\u4e2aint\u76f8\u52a0\u4fdd\u5b58\u5728\u4e00\u4e2along long\u53d8\u91cf\u91cc\uff0c\u5982\u679c\u7ed3\u679c\u8d85\u51faint\uff0c\u8fd8\u662f\u4f1a\u70b8\u7684\u3002\n\u6ce82\uff1aC++\u81ea\u5e26\u7684\u4e8c\u5143\u7ec4pair,\u5b9a\u4e49\u65b9\u6cd5\u662fpair<(\u6570\u636e\u7c7b\u578b1),(\u6570\u636e\u7c7b\u578b2)>(\u540d\u79f0)\u3002\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u53d8\u91cf\u7684\u7ed3\u6784\u4f53\u3002pair\u4e2d\u7684\u4e24\u4e2a\u6210\u5458\u4f7f\u7528.first\u548c.second\u8fdb\u884c\u8bbf\u95ee\u3002\u5728\u4f18\u5148\u961f\u5217\u91cc\uff0cpair\u662f\u4ee5first\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u4ee5second\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u7684\u3002\u5411pair\u4e2d\u63d2\u5165\u5143\u7d20\u53ef\u4ee5\u76f4\u63a5\u50cf\u7ed3\u6784\u4f53\u4e00\u6837\u8d4b\u503c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528make_pair()\u63d2\u5165\u3002 \n\u6ce83\uff1a\u8fd9\u91cc\u91c7\u7528\u7684\u662f\u61d2\u60f0\u5220\u9664\u7684\u601d\u60f3\u3002\u56e0\u4e3aSTL\u7684\u4f18\u5148\u961f\u5217\u4e0d\u652f\u6301\u5bf9\u5185\u90e8\u5143\u7d20\u7684\u968f\u673a\u5220\u9664\uff0c\u6240\u4ee5\u91c7\u7528\u4e00\u4e2a\u6807\u8bb0\u3002\u5982\u679c\u66fe\u7ecf\u4f7f\u7528\u8fc7\uff0c\u90a3\u4e48\u5728\u5b83\u5230\u5806\u9876\u7684\u65f6\u5019\u5c31\u4e0d\u4f7f\u7528\u5b83\u3002\u76f8\u5f53\u4e8e\u628a\u5220\u9664\u64cd\u4f5c\u5ef6\u8fdf\u5230\u5806\u9876\u8fdb\u884c\u3002 \n*/\n```\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5806\u4f18\u5316\u3002\u5f53\u7136\uff0c\u8fd9\u9898\u4f7f\u7528SPFA\u4e5f\u662f\u53ef\u4ee5\u8fc7\u7684\u3002\u4f46\u662f\u8003\u8bd5\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u51fa\u6bd2\u7624\u6570\u636e\u5361\u6b7b\u4f60\u3002\n\n\u6700\u540e\uff1a\n## \u5173\u4e8eSPFA:\u5b83\u6b7b\u4e86",
        "postTime": 1544619700,
        "uid": 79011,
        "name": "Ophelia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "### \u524d\u8a00\uff1a\n\n------------\n\n### \u7b2c\u4e00\u6b21\u63a5\u89e6\u94fe\u5f0f\u524d\u5411\u661f\u5c31\u77e5\u9053\u8fd9\u4e0d\u662f\u4e2a\u5bb9\u6613\u61c2\u7684\u4e1c\u897f\n\n#### \u597d\u4e0d\u5bb9\u6613\u628aCHW\u5927\u4f6c\u95ee\u751f\u6c14\u540e\u7ec8\u4e8e\u61c2\u4e86\n\n\u8fd9\u662f\u4e00\u7bc7~~\u5199\u7ed9\u81ea\u5df1\u770b\u7684~~\u9898\u89e3\uff1a[P3371 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09](https://www.luogu.org/problemnew/show/P3371)\uff0c\u4e00\u9053\u6a21\u677f\u9898\u3002\n\n\n\u6c42\u5e26\u6743\u6709\u5411\u56fe\u4e0a\u4e00\u4e2a\u6e90\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\n\n\u5982\u679c\u6ca1\u6709\u975e\u8d1f\u8fb9\u6743\uff0c\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u60f3\u5230Dijkstra\u3002\u4f46\u662f\u5982\u679c\u6709\u8d1f\u8fb9\u6743\u5462\uff1f\u8fd9\u65f6\u5019\u5c31\u8981\u7528SPFA\u7b97\u6cd5\u6c42\u89e3\u3002\n\n\u9898\u610f\u6ca1\u6709\u4ec0\u4e48\u597d\u8bb2\u7684\uff0c\u53ea\u662f\u4ee3\u7801\u5b9e\u73b0\u95ee\u9898~~\n\n\u4ee3\u7801\u91cc\u9762\u6709\u5f88\u591a\u6ce8\u91ca\uff0c\u6253\u4e86\u6211\u534a\u5929\u5462\uff01\n\n\n------------\n\n## Code\n```\n//SPFA \n#include<cstdio> \nusing namespace std; \nint dis[500010],n,m,f,g,w,t=1,s,q[200000],h,st[500010],tot;\nbool vis[100010];\n/*\nst[i]\u8868\u793a\u5230\u8fbei\u70b9\u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff1b \ndis[i]\u8868\u793a\u4ece\u8d77\u70b9\u5230i\u70b9\u76ee\u524d\u4e3a\u6b62\u7684\u6700\u77ed\u8ddd\u79bb\uff1b \nvis[i]=true\u8868\u793a\u70b9i\u5728\u961f\u5217\u91cc\uff1b \nvis[i]=false\u8868\u793a\u70b9i\u4e0d\u5728\u961f\u5217\u91cc\uff1b \n\u6570\u7ec4q\u662f\u961f\u5217\uff1b \nh\u662f\u6307\u961f\u5217\u7684\u5934\u6307\u9488\uff0ct\u662f\u6307\u961f\u5217\u7684\u5c3e\u6307\u9488\uff1b \n*/\nstruct node //\u4e0d\u5f00\u7ed3\u6784\u4f53\uff0c\u53d8\u91cf\u6709\u70b9\u4e71\uff0c\u6240\u4ee5\u5f00\u7ed3\u6784\u4f53\uff1b \n{ \n    int to;//\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u7ec8\u70b9\uff1b \n    int v;//\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\uff1b \n    int last;//\u524d\u4e00\u6761\u8fb9\uff1b \n}e[500010]; \nvoid add(int from,int to,int val)\n/*\nval\u8868\u793a\u4f20\u5165\u7684\u8fd9\u6761\u8fb9\u7684\u6743\u503c\uff1b \nfrom\u8868\u793a\u4f20\u5165\u7684\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\uff1b \nto\u8868\u793a\u4f20\u5165\u7684\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\uff1b \n*/\n{     \n    tot++;//\u8868\u793a\u5f53\u524d\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\uff1b \n    e[tot].to=to;//\u66f4\u65b0\u5f53\u524d\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\uff1b \n    e[tot].v=val;//\u66f4\u65b0\u5f53\u524d\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\uff08\u6743\uff09\uff1b \n    e[tot].last=st[from];\n/*\n    e[tot].last\u8868\u793a\u7684\u662f\u5f53\u524d\u8bfb\u5165\u7684\u8fd9\u6761\u8fb9\u7684\u4e0a\u4e00\u6761\u8fb9\uff1b \n    st[from]\u8868\u793a\u7684\u662f \u5230\u5f53\u524d\u8bfb\u5165\u7684\u8fb9\u4e3a\u6b62\uff08\u4e0d\u5305\u62ec\u8fd9\u6761\u8fb9\uff09 \u7684\u4e0a\u4e00\u6761\u8fb9\u7684\u5e8f\u53f7\uff1b \n*/\n    st[from]=tot;//\u66f4\u65b0\u4e3a \u5f53\u524d\u8bfb\u5165\u7684\u8fb9\u4e3a\u6b62\uff08\u5305\u62ec\u8fd9\u6761\u8fb9\uff09 \u7684\u4e0a\u4e00\u6761\u8fb9\u7684\u5e8f\u53f7\uff1b\n} \nvoid SPFA()//\u6838\u5fc3\u6700\u77ed\u8def\uff1b\n{\n    while(h<=t)//\u961f\u5217\u4e0d\u4e3a\u7a7a\uff1b \n    {\n        h++; \n        int u=q[h];//\u53d6\u51fa\u961f\u9996\n        vis[u]=0;//\u961f\u9996\u51fa\u961f\n        for(int i=st[u]; i!=0; i=e[i].last)\n/*\nst[u]\u662f\u6307\u53ef\u4ee5\u5230\u8fbe\u70b9u\u7684\u4e0a\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u5b58\u5728st[u]\uff08\u4e5f\u5c31\u662fst[u]\u4e0d\u4e3a0\uff0c\u56e0\u4e3a0\u662f\u521d\u59cb\u503c\uff09\uff0c\n\u8bf4\u660e\u6709\u4e00\u6761\u8fb9\u53ef\u4ee5\u5230\u8fbe\u70b9u\u3002\u6240\u4ee5i\u53d8\u6210st[u]\u3002e[i].last\u662f\u6307\u53ef\u4ee5\u5230\u8fbest[u]\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\n*/\n        {\n            int v=e[i].to;\n            if(dis[v]>dis[u]+e[i].v)\n/*\n\u5982\u679c\u4ece\u8d77\u70b9\u5230v\u7684\u8ddd\u79bb\u5927\u4e8e\u4ece\u8d77\u70b9\u5230\u70b9i\uff0c\u518d\u4ece\u70b9i\u5230\u70b9u\uff0c\u518d\u4ece\u70b9u\u5230\u70b9v\u7684\u8ddd\u79bb\uff0c\u66f4\u65b0\u4ece\u8d77\u70b9\n\u5230\u70b9v\u7684\u6700\u77ed\u8def\uff1b \n*/\n            {\n                dis[v]=dis[u]+e[i].v;\n                if(vis[v]==0)//\u6ca1\u6709\u5165\u8fc7\u961f\u5c31\u5165\u961f\uff1b \n                {\n                    vis[v]=1;//\u6807\u5fd7\u6539\u4e3a1\uff0c\u8868\u793a\u5df2\u7ecf\u5165\u961f\uff1b \n                    t++;\n                    q[t]=v; \n                }\n            }\n        }\n    } \n}  \nint main() //\u4e3b\u7a0b\u5e8f\uff1b \n{  \n    scanf(\"%d %d %d\",&n,&m,&s); \n    for(int i=1;i<=m;i++) \n    { \n        scanf(\"%d %d %d\",&f,&g,&w);//\u8f93\u5165\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9f\uff0c\u7ec8\u70b9g\u548c\u957f\u5ea6w;  \n        add(f,g,w);//\u5efa\u56fe;\n    } \n    for(int i=1;i<=n;i++)//\u56e0\u4e3a\u9898\u76ee\u8981\u6211\u4eec\u6c42\u4e00\u4e2a\u70b9\u5230\u5176\u4f59\u70b9\u7684\u6700\u77ed\u8def; \n        dis[i]=2147483647;//\u6240\u4ee5\u521d\u59cb\u5316\u5168\u90e8\u8d4b\u4e3aint\u7684\u6700\u5927\u503c; \n    dis[s]=0;//\u8d77\u70b9\u5230\u672c\u8eab\u7684\u7684\u8ddd\u79bb\u4e3a0;\n    q[t]=s;//\u8d77\u70b9\u5165\u961f\uff1b \n    vis[s]=true;//\u6807\u5fd7\u6539\u4e3atrue\u8868\u793a\u8d77\u70b9\u5df2\u5165\u961f\uff1b \n    SPFA(); //\u8fd0\u884c\u6700\u77ed\u8def\uff1b \n    for(int i=1;i<=n;i++)//\u5faa\u73af\u8f93\u51fa\u7b54\u6848\uff1b \n        printf(\"%d \",dis[i]);\n    return 0; \n}",
        "postTime": 1558502549,
        "uid": 110623,
        "name": "2018\u674e\u6cfd\u660e",
        "ccfLevel": 0,
        "title": "SPFA\u548c\u94fe\u5f0f\u524d\u5411\u661f"
    },
    {
        "content": "\u4f17\u6240\u5468\u77e5\uff0c\u8fd9\u662f\u4e00\u9053\u6700\u77ed\u8def\u7684\u6a21\u677f\n\n\u76ee\u5f55:\n\n1.\u677e\u5f1b\u64cd\u4f5c\n\n2.Floyd\uff0870\u5206\uff09(n^3)\n\n3.Dijkstra+\u4f18\u5148\u961f\u5217(\u4e0d\u80fd\u7528\u4e8e\u6709\u8d1f\u8fb9\u6743\u7684\u60c5\u51b5)(AC)(m log n)\n\n4.SPFA(\u5df2\u6b7b)(AC)(Km)(\u5728\u67d0\u4e9b\u56fe\uff08\u4f8b\u5982\u83ca\u82b1\u56fe\uff09\u53ef\u80fd\u4f1a\u9000\u5316\u5230nm)\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u8bb2\u4e00\u4e0b\u677e\u5f1b\u64cd\u4f5c:\n\n\u5b83\u662f\u7531\u4e09\u89d2\u5f62\u7684\uff08\u4e24\u8fb9\u4e4b\u548c\u5927\u4e8e\u7b2c\u4e09\u8fb9\uff09\u63a8\u51fa\u7684:\n\n\u4ee3\u7801\u5982\u4e0b:\n```\nfor(int k=1;k<=n;k++)//\u521d\u5b66\u8005\u5bb9\u6613\u5199\u6210i,j,k\uff0c\u8981\u6ce8\u610f\uff01\n    {\n        for(int i=1;i<=n;i++)\n        {\n            if(i==k||a[i][k]==inf)\n            {\n                continue;\n            }\n            for(int j=1;j<=n;j++)\n            {\n                a[i][j]=min(a[i][j],a[i][k]+a[k][j]);//\u677e\u5f1b\u64cd\u4f5c\n            }\n        }\n    }\n```\n\u5b66\u4e60\u4e86\u57fa\u7840\u7684\u677e\u5f1b\u64cd\u4f5c\u540e\uff0c\u6211\u4eec\u6765\u5b66\u4e60\u6700\u6734\u7d20\u7684Floyd\u7b97\u6cd5:\n\n\u4ee3\u7801\u5982\u4e0b:\n```\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\n#define inf 2147483647//inf\n#define maxn 7005\nusing namespace std;\nlong long  a[maxn][maxn],s,n,m,u,v,d;\nint main()\n{\n\tcin>>n>>m>>s;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\ta[i][j]=inf;\n\t\t}\n\t}//\u628a\u90bb\u63a5\u77e9\u9635\u6570\u7ec4\u91cd\u7f6e\u4e3ainf\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>u>>v>>d;\n\t\ta[u][v]=min(a[u][v],d);\n\t}//\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\n\tfor(int k=1;k<=n;k++)\n    {\n        for(int i=1;i<=n;i++)\n        {\n            if(i==k||a[i][k]==inf)\n            {\n                continue;\n            }\n            for(int j=1;j<=n;j++)\n            {\n                a[i][j]=min(a[i][j],a[i][k]+a[k][j]);\n            }\n        }\n     }//\u677e\u5f1b\u64cd\u4f5c\n    a[s][s]=0;//\u8d77\u70b9\u6807\u8bb0\u4e3a0\n    for(int i=1;i<=n;i++)\n    {\n    \tprintf(\"%d \",a[s][i]);//\u8f93\u51fa\n\t}\n\treturn 0;\n}\n```\n\u63a5\u4e0b\u6765\uff0c\u662fDijkstra\n\n\u4ee3\u7801\u5982\u4e0b:\n```\n#include<bits/stdc++.h>\n#define inf 2147483647\nusing namespace std;\nint n,m,x,y,z,tot=0,s;\nint d[100001],v[1000001],hea[1000001];\npriority_queue< pair<int,int> > q;//\u5927\u6839\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\uff0c\u7b2c\u4e00\u7ef4\u4e3ad\u7684\u76f8\u53cd\u6570\uff08\u53d8\u6210\u5c0f\u6839\u5806\uff09\uff0c\u7b2c\u4e8c\u7ef4\u4e3a\u8282\u70b9\u7f16\u53f7\nstruct Edge{\n\tint next,to,dis;\n}edge[1000001];//\u90bb\u63a5\u8868\u5b58\u50a8\nvoid add(int x,int y,int z)\n{\n\tedge[++tot].next=hea[x];\n\tedge[tot].to=y;\n\tedge[tot].dis=z;\n\thea[x]=tot;\n}//\u5b58\u4e0b\u4e00\u6761(x,y)\uff0c\u6743\u503c\u4e3az\u7684\u8fb9\uff08\u7b97\u6cd5\u4e66\u4e0a\u90fd\u6709\uff09\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t}//\u90bb\u63a5\u8868\u5b58\u8fb9\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\td[i]=inf;v[i]=0;\n\t}//\u91cd\u7f6e\n\td[s]=0;q.push(make_pair(0,s));//\u8d77\u70b9\u6700\u77ed\u8def\u4e3a0\uff0c\u5165\u961f\n\twhile(!q.empty())//\u961f\u5217\u975e\u7a7a\n\t{\n\t\tint x=q.top().second;q.pop();//\u53d6\u51fa\u5806\u9876\n\t\tif(v[x]) continue;\n\t\tv[x]=1;\n\t\tfor(int i=hea[x];i;i=edge[i].next)//\u626b\u63cf\u6240\u6709\u51fa\u8fb9\n\t\t{\n\t\t\tint y=edge[i].to;\n\t\t\tif(d[y]>d[x]+edge[i].dis)\n\t\t\t{\n\t\t\t\td[y]=d[x]+edge[i].dis;\n\t\t\t\tq.push(make_pair(-d[y],y));\n\t\t\t}//\u677e\u5f1b\u64cd\u4f5c\uff0c\u63d2\u5165\u5806\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcout<<d[i]<<' ';\n\t}\n\treturn 0;\n}\n```\n\u6700\u540e\u7684SPFA\n\n\u4ee3\u7801\u5982\u4e0b:\n```\n#include<bits/stdc++.h>\n#define inf 2147483647\nusing namespace std;\nint d[100001];\nint v[1000001];\nint hea[1000001];\nint m,n,x,y,z,tot=0,s;\nstruct Edge{\n\tint next,to,dis;\n}edge[1000001];//\u4ecd\u7136\u662f\u90bb\u63a5\u8868\nvoid add(int x,int y,int z)\n{\n\tedge[++tot].next=hea[x];\n\tedge[tot].dis=z;\n\tedge[tot].to=y;\n\thea[x]=tot;\n}\nint main()\n{\n\tqueue<int> q;//\u961f\u5217\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\td[i]=inf;v[i]=0;\n\t}//\u524d\u9762\u90fd\u4e00\u6837\n\tq.push(s);d[s]=0;v[s]=1;//\u8d77\u70b9\u5165\u961f\u5e76\u91cd\u7f6e\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();v[x]=0;//\u53d6\u51fa\u961f\u9996\u5e76\u91cd\u7f6e\n\t\tfor(int i=hea[x];i;i=edge[i].next)//\u626b\u63cf\u6240\u6709\u51fa\u8fb9\n\t\t{\n\t\t\tint y=edge[i].to;\n\t\t\tif(d[y]>d[x]+edge[i].dis)\n\t\t\t{\n\t\t\t\td[y]=d[x]+edge[i].dis;//\u677e\u5f1b\u64cd\u4f5c\n\t\t\t\tif(v[y]==0)//\u5982\u679c\u6ca1\u6709\u8d70\u8fc7\n\t\t\t{\n\t\t\t\tv[y]=1;//\u8bbe\u6210\u5df2\u8d70\u8fc7\n\t\t\t\tq.push(y);//\u5165\u961f\n\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcout<<d[i]<<' ';\n\t}\n\treturn 0;\n}\n```\n\u7ecf\u8fc73\u79cd\u6700\u77ed\u8def\u7684\u8bb2\u89e3\uff0c\u5927\u5bb6\u60f3\u5fc5\u90fd\u6709\u4e9b\u4e86\u89e3\u4e86\u5427\uff0c\u6700\u77ed\u8def\u662f\u56fe\u8bba\u4e2d\u4e00\u79cd\u7075\u6d3b\u7684\u9898\u76ee\uff0c\u5927\u5bb6\u4e00\u5b9a\u8981\u5b66\u597d\uff01\n\n\u6700\u540e\uff0c\u5e0c\u671b\u7ba1\u7406\u5458\u5927\u5927\u80fd\u901a\u8fc7\u8fd9\u7bc7\u9898\u89e3\uff01",
        "postTime": 1569335336,
        "uid": 118300,
        "name": "\u626c\u76932006",
        "ccfLevel": 0,
        "title": "P3371 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u9898\u89e3"
    },
    {
        "content": "\u65e2\u7136\u697c\u4e0b\u5927\u4f6c\u90fd\u628a\u7b97\u6cd5\u8bb2\u6e05\u695a\u4e86\uff0c\u90a3\u6211\u5c31\u84bb\u84bb\u5730\u4e0a\u4e00\u4e2a \u5806\u4f18\u5316\u7684dijkstra...\n\n\u6709\u4e9b\u5806\u4f18\u5316\u7684\u4ee3\u7801\u5bf9\u4e8e\u65b0\u4eba\u4e0d\u662f\u5f88\u53cb\u597d\uff0c\u6bd4\u5982\uff1a\n```cpp\nstruct cmp\n{\n    bool operator()(int a,int b)\n    {\n        return dis[a]>dis[b];\n    }\n};\npriority_queue<int,vector<int>,cmp> q;\n```\n\u8fd8\u6709\uff1a\n```cpp\nstruct Node\n{\n    int dis,nodeid;\n    bool operator < (const Node &a) const\n    {\n        return dis>a.dis;\n    }\n};\npriority_queue<Node> q;\n```\n~~\u6211\u4e0a\u8fd9\u4e24\u6bb5\u4ee3\u7801\u4e0d\u662f\u7ed9\u5927\u725b\u770b\u7684~~\n\n\u597d\u5427\uff0c\u63a5\u4e0b\u6765\u6211\u4ecb\u7ecd\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff1a`pair`\u3002\n\n\u8fd9\u4e2a\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u5c06\u4e24\u4e2a\u6570\u636e\u8fdb\u884c\u6253\u5305\uff0c\u6bd4\u5982\n```cpp\npair<int,int>\n```\n\u5c31\u662f\u5c06\u4e24\u4e2aint\u578b\u8fdb\u884c\u6253\u5305\u3002\n\n\u800c\u4e14\u4f7f\u7528\u4f18\u5148\u961f\u5217\u65f6\uff0c\u4f18\u5148\u961f\u5217\u4f1a\u6839\u636e\u4f60\u6253\u5305\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u600e\u4e48\u5c06\u4ed6\u4eec\u6253\u5305\u5462\uff1f\n\n\u6709\u4e2a\u51fd\u6570\u53eb\u505amake_pair()\u3002\n\n\u4f7f\u7528\u65f6\uff1a\n```cpp\nmake_pair(0,1);\n```\n\u5373\u628a 0,1 \u6253\u5305\u3002\n\n\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\n```\npriority_queue<int,vector<pair<int,int> >,greater<pair<int,int> > >q;\n```\n\u5c31\u53ef\u4ee5\u7701\u53bb\u5199\u6392\u5e8f\u51fd\u6570\u4e86\u3002\n\n\u5176\u4e2dpair\u7684\u7b2c\u4e00\u4e2a\u6570\u5b58\u957f\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b58\u8282\u70b9\u7f16\u53f7\u3002\n\n\u4e0b\u9762\u662fAC\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n,m,s;\n\nstruct node\n{\n    int next,to,len;\n}edge[500005];\n\nint cnt;\nint head[100005];\nbool visit[100005];\nint dis[100005];\n\npriority_queue<int,vector<pair<int,int> >,greater<pair<int,int> > >q;\n\nvoid Add(int a,int b,int c)\n{\n    cnt++;\n    edge[cnt]=(node){head[a],b,c};\n    head[a]=cnt;\n}\n\nint main()\n{\n    for(int i=0;i<100005;i++) head[i]=0;\n    for(int i=0;i<100005;i++) dis[i]=INT_MAX;\n    cin>>n>>m>>s;\n    for(int i=1;i<=m;i++)\n    {\n        int a,b,c;\n        cin>>a>>b>>c;\n        Add(a,b,c);\n    }\n    dis[s]=0;\n    q.push(make_pair(0,s));      //\u5c06\u6e90\u70b9\u5165\u961f\n    while(!q.empty())\n    {\n    \tint now=q.top().second;     //\u53d6\u8282\u70b9\u7f16\u53f7\n    \tq.pop();    //\u5f39\u51fa\n    \tif(visit[now]) continue;    //\u5df2\u7ecf\u904d\u5386\u8fc7\n        visit[now]=true;\n        for(int i=head[now];i;i=edge[i].next) if(!visit[edge[i].to] && dis[edge[i].to]>dis[now]+edge[i].len)     //\u6807\u51c6\u524d\u5411\u661f\u904d\u5386\n        {\n            dis[edge[i].to]=dis[now]+edge[i].len;\n            q.push(make_pair(dis[edge[i].to],edge[i].to));    //\u5165\u961f\n        }\n    }\n    for(int i=1;i<=n;i++) cout<<dis[i]<<' ';\n    return 0;\n}\n```\n\u540c\u65f6\uff0c\u6b64\u4ee3\u7801\u4e5f\u53ef\u901a\u8fc7 [P4779](https://www.luogu.org/problem/show?pid=P4779)\u3002\n\n\u795d\u5927\u5bb6\u5237\u9898\u6109\u5feb\u3002",
        "postTime": 1538990842,
        "uid": 51229,
        "name": "fanhy",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u7ebf\u6bb5\u6811\u4f18\u5316Dijkstar\u3002\n\nDijkstra\u8981\u67e5\u8be2\u5f53\u524d\u70b9\u4e2ddis\u7684\u6700\u5c0f\u503c\u53ef\u4ee5\u7528\u5806\u4f18\u5316\uff0c\u4f3c\u4e4e\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u3002\n\n\u7ebf\u6bb5\u6811\u50a8\u5b58\u70b9\u7684\u7f16\u53f7\uff0c\u6bcf\u53d6\u4e00\u4e2a\u70b9\uff0c\u628a\u5b83\u7684\u503c\u6539\u6210INF\u8868\u793a\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u5176\u4ed6\u7684\u70b9\u76f4\u63a5\u5728\u6811\u4e0a\u4fee\u6539\u5c31\u597d\uff0c\u6bcf\u6b21\u67e5\u8be2\u6574\u4e2a\u7ebf\u6bb5\u6811\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\u590d\u6742\u5ea6nlog(n),\u7528zkw\u7ebf\u6bb5\u6811\uff0c\u5e38\u6570\u4e5f\u4e0d\u7b97\u5927\uff0c\u5199\u7684\u6bd4\u8f83\u4e11240ms\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm> \nusing namespace std;\nconst int maxn =10007;\nconst int maxm = 500007;\nconst int INF = 0x7fffffff;\nint n,m;\ninline int read() {\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9') \n        c=getchar();\n    while(c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x;\n}\nstruct node{\n    int v,next,w;\n}edge[maxm];\nint num=0,head[maxn];\ninline void add_edge(int a,int b,int c) {\n    edge[++num].v=b;edge[num].w=c;edge[num].next=head[a];head[a]=num;\n} \nint dis[maxn],ans[maxn],s,t;\nint tree[maxn<<2],leaf;\ninline int check(int i,int j) {\n    return dis[i]<dis[j]?i:j;\n } \ninline void build() {\n    std::memset(dis,0x3f,sizeof dis);// for(int i=0;i<=n+1;i++) dis[i]=INF;\n    for(leaf=1;leaf<=n;leaf<<=1);--leaf;\n    for(int i=1;i<=n;++i)tree[leaf+i]=i;\n}\ninline void modify(int x,int y) {\n    dis[x]=y,x+=leaf,x>>=1;\n    while(x) tree[x]=check(tree[x<<1],tree[x<<1|1]),x=x>>1;\n}\nvoid dijkstra(int s) {\n    build();\n    dis[s]=0;\n    int u=s;\n    for(int i=1;i<=n;++i) {\n        ans[u]=dis[u];\n        const int disu=dis[u];\n        modify(u,INF); \n        for(int j=head[u];j;j=edge[j].next){\n              int v=edge[j].v;\n              if(dis[v]<INF&&dis[v]>disu+edge[j].w)\n                modify(v,disu+edge[j].w);\n        }\n        u=tree[1];\n      }\n}\ninline void put(int x)\n{\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);   \n}\n\nint main() {\n    int k;\n    n=read(),m=read(),k=read();\n    for(int a,b,c,i=1;i<=m;++i) {\n        a=read(),b=read(),c=read();\n        add_edge(a,b,c);\n    }\n    dijkstra(k);\n    for(int i=1;i<=n;++i) {\n        if(dis[i]==0x3f3f3f3f)ans[i]=INF;\n       // put(ans[i]), putchar(' ');\n        printf(\"%d \",ans[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1510987259,
        "uid": 38871,
        "name": "Niko",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u4f53\u9a8c\uff1ahttp://www.cnblogs.com/ljc20020730/p/7622200.html\n\n\u5343\u5e74\u4e0d\u8fc7\u7684\u4e0d\u7528\u6307\u9488\u7684spfa\uff1b\n\n\u539f\u6765\u5404\u4f4ddalao\u662f\u9a97\u6211\u7684\uff01\n\n\u6839\u672c\u4e0d\u7528ff\u6570\u7ec4\u6765\u5224\u91cd\uff01\n\n\u52a0\u4e0a\u8fd9\u9898\u76eepas\u9898\u89e3\u6bd4\u8f83\u5c11\u5c31\u6765\u8c08\u8c085\u79cdAC\u7684\u601d\u8def\uff08\u987a\u4fbf\u603b\u7ed3\u4e00\u4e0b\uff09\uff1b\n\n\u2460floyd\u7b97\u6cd5 \u65f6\u95f4\uff1aO(n^3)\uff1b\u7a7a\u95f4\uff1aO\uff08n^2\uff09;\n\n\u5bf9\u4e8e20%\u7684\u6570\u636e\uff1aN<=5\uff0cM<=15\n\n\u5bf9\u4e8e40%\u7684\u6570\u636e\uff1aN<=100\uff0cM<=10000\n\n\u2461dijkstra\u7b97\u6cd5\n\n\u65f6\u95f4\uff1a O(n^2); \u7a7a\u95f4\uff1aO\uff08n^2\uff09;\n\n\u5bf9\u4e8e70%\u7684\u6570\u636e\uff1aN<=1000\uff0cM<=100000\n\n```cpp\nuses math; \nconst maxn=5000;\nvar g:array[1..maxn,1..maxn] of longint;\n    d:array[1..maxn] of longint; //pre[i]\u6307\u6700\u77ed\u8def\u5f84\u4e0aI\u7684\u524d\u9a71\u7ed3\u70b9\n    n,m,s,x,y,w,i,j:longint;\nprocedure dijkstra(v0:longint);\n var u:array[1..maxn] of boolean;\n     i,j,k:longint; min:longint;\nbegin\n  fillchar(u,sizeof(u),false);\n  for i:=1 to n do d[i]:=g[v0,i];\n  d[v0]:=0;\n  u[v0]:=true;\n  for i:=1 to n-1 do begin   //\u6bcf\u5faa\u73af\u4e00\u6b21\u52a0\u5165\u4e00\u4e2a\u79bb1\u96c6\u5408\u6700\u8fd1\u7684\u7ed3\u70b9\u5e76\u8c03\u6574\u5176\u4ed6\u7ed3\u70b9\u7684\u53c2\u6570\n    min:=2147483647; k:=0; //k\u8bb0\u5f55\u79bb1\u96c6\u5408\u6700\u8fd1\u7684\u7ed3\u70b9\n    for j:=1 to n do\n      if (not u[j]) and (d[j]<min) then begin\n        k:=j; min:=d[j];\n    end;\n    if k=0 then break;\n    u[k]:=true;\n    for j:=1 to n do\n      if (not u[j]) and (g[k,j]+d[k]<d[j]) then d[j]:=g[k,j]+d[k];\n  end;\nend;\nbegin\n  readln(n,m,s);\n  for i:=1 to n do\n    for j:=1 to n do if i=j then g[i,j]:=0 else g[i,j]:=2147483647;\n  for i:=1 to m do begin\n    readln(x,y,w);\n    g[x,y]:=min(w,g[x,y]);\n  end;\n  dijkstra(s);      //\u627e\u51fa\u6700\u77ed\u8def\u5f84\n  for i:=1 to n do write(d[i],' ');\n  writeln;\nend.\n```\n\u2462dijkstra+\u524d\u5411\u661f\u7a7a\u95f4\u4f18\u5316+\u5806\u4f18\u5316\n\u65f6\u95f4\uff1a O(n log n); \u7a7a\u95f4\uff1aO\uff08kn\uff09;\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff1aN<=10000\uff0cM<=500000\n\n\n\n```cpp\ntype rec=record\n pre,en,w:longint;\nend;\nrec2=record\n id,val:longint;\nend;\nconst inf=233333333;\n      maxm=500000;\n      maxn=10000;\nvar i,j,n,m,s,x,y,z,tot,nd:longint;\n    d,head:array[-maxn..maxn]of longint;\n    a:array[-maxm..maxm]of rec;\n    dui:array[0..4*maxm]of rec2;\nprocedure swap(var a,b:rec2);\nvar t:rec2;\nbegin\n t:=a; a:=b; b:=t;\nend;\nprocedure adde(u,v,w:longint);\nbegin\n inc(tot); a[tot].en:=v;\n a[tot].pre:=head[u];\n head[u]:=tot;\n a[tot].w:=w;\nend;\nprocedure swap(var a,b:longint);\nvar t:longint;\nbegin t:=a;a:=b;b:=t;end;\nprocedure up(x:longint);//\u5c06\u4e00\u4e2a\u7ed3\u70b9\u201c\u4e0a\u6d6e\u201d\nbegin\n  while x>1 do begin //\u6ca1\u6709\u4e0a\u6d6e\u5230\u6700\u9876\u5c42\n    if dui[x].val>dui[x div 2].val then break;//\u5982\u679c\u4e0a\u65b9\u7684\u7ed3\u70b9\u5c0f\u4e8e\u6b64\u8282\u70b9\uff0c\u5219\u6682\u505c\u4e0a\u6d6e\n    swap(dui[x],dui[x div 2]);//\u4ea4\u6362\u4e0a\u65b9\u7ed3\u70b9\u4e0e\u6b64\u7ed3\u70b9\n    x:=x div 2;\n  end;\nend;\nprocedure down(x:longint);//\u5c06\u4e00\u4e2a\u8282\u70b9\u201c\u4e0b\u6c89\u201d\n  var y:longint;\nbegin\n  while x<nd do begin\n    y:=x+x;//y\u662fx\u7684\u5de6\u513f\u5b50\n    if y>nd then break;//x\u5df2\u7ecf\u6c89\u5230\u5e95\u90e8\n    if (y<nd)and(dui[y+1].val<dui[y].val) then inc(y);//\u5982\u679cx\u5b58\u5728\u53f3\u513f\u5b50\uff0c\u4e14\u53f3\u513f\u5b50\u6bd4\u5de6\u513f\u5b50\u5c0f\uff0c\u5219\u5c06y\u8d4b\u503c\u5230\u53f3\u513f\u5b50\n    if dui[x].val<=dui[y].val then break;//\u82e5\u4e24\u4e2a\u513f\u5b50\u4e2d\u7684\u8f83\u5c0f\u503c\u4ecd\u7136\u6bd4x\u5927\uff0c\u5219\u505c\u6b62\u4e0b\u6c89\n    swap(dui[x],dui[y]);//\u4e0b\u6c89\n    x:=y;\n  end;\nend;\nfunction pop():longint;\nbegin\n  pop:=dui[1].id;\n  swap(dui[1],dui[nd]);//\u5c06\u6700\u540e\u7684\u7ed3\u70b9\uff08\u4fdd\u8bc1\u5176\u6ca1\u6709\u513f\u5b50\uff09\u4e0e\u6700\u9876\u7aef\u4ea4\u6362\n  dec(nd);\n  down(1);//\u4e0b\u6c89\u9876\u7aef\nend;\nprocedure dijkstra(v0:longint);\nvar i,j,k,minn,u,v,p:longint;\n    vis:array[-maxn..maxn]of boolean;\nbegin\n fillchar(vis,sizeof(vis),false);\n for i:=1 to n do d[i]:=inf;\n d[v0]:=0;\n dui[1].val:=0;\n dui[1].id:=v0;\n nd:=1;\n for i:=1 to n do begin\n  u:=pop();\n  while vis[u] and (nd>0) do u:=pop();\n  vis[u]:=true;\n  p:=head[u];\n  while p>0 do begin\n   v:=a[p].en;\n   if (not vis[v]) and(d[u]+a[p].w<d[v]) then begin\n    d[v]:=d[u]+a[p].w;\n    inc(nd);\n    dui[nd].id:=v;\n    dui[nd].val:=d[v];\n    up(nd);\n   end;\n   p:=a[p].pre;\n  end;\n end;\nend;\nbegin\n readln(n,m,s);\n for i:=1 to m do begin\n  readln(x,y,z);\n  adde(x,y,z);\n end;\n dijkstra(s);\n for i:=1 to n do\n if d[i]=inf then write(2147483647,' ')else write(d[i],' ');\n writeln;\n```\n\u2463 spfa\u961f\u5217\u4f18\u5316+\u6307\u9488\u90bb\u63a5\u8868\u7a7a\u95f4\u4f18\u5316\n\u65f6\u95f4\uff1a O(KE); \u7a7a\u95f4\uff1aO\uff08KE\uff09;\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff1aN<=10000\uff0cM<=500000\uff1b\n\n\n\n\n```cpp\ntype pp=^node;\n      node=record\n      en,w:longint;\n      pre:pp;\n      end;\nconst maxn=50040;\nvar dis:array[0..maxn]of longint;\n    a:array[0..maxn]of pp;\n    n,m,b,u,v,x,y,i,j,l,w,s:longint;\nprocedure adde(u,v,w:longint);\nvar p:pp;\nbegin\n new(p);\n p^.pre:=a[u]^.pre;\n p^.en:=v; p^.w:=w;\n a[u]^.pre:=p;\nend;\nprocedure spfa;\nvar f:array[0..maxn]of boolean;\n    q:array[0..4*maxn]of longint;\n    p:pp;\n    head,tail,u,v:longint;\nbegin\n q[1]:=s; dis[s]:=0;\n head:=0; tail:=1;\n fillchar(f,sizeof(f),false);\n while head<tail do begin\n  inc(head); u:=q[head]; p:=a[u];\n  while p^.pre<>nil do begin\n   p:=p^.pre; v:=p^.en; w:=p^.w;\n   if dis[v]>dis[u]+w then begin\n    dis[v]:=dis[u]+w;\n    if not f[v] then begin\n     f[v]:=true;\n     inc(tail); q[tail]:=v;\n    end;\n   end;\n  end;\n  f[u]:=false;\n end;\nend;\nbegin\n readln(n,m,s);\n for i:=1 to n do begin\n  new(a[i]);\n  a[i]^.pre:=nil;\n end;\n for i:=1 to m do begin\n  readln(u,v,w);\n  adde(u,v,w);\n end;\n  for i:=1 to n do\n  dis[i]:=maxlongint div 3;\n spfa;\n// writeln;\n for i:=1 to n do\n  if dis[i]=maxlongint div 3 then write('2147483647 ')\n  else write(dis[i],' ');\n close(input);\n close(output);\nend.\n```\n\u2464 spfa\u961f\u5217\u4f18\u5316+\u94fe\u5f0f\u524d\u5411\u661f\u7a7a\u95f4\u4f18\u5316\n\u65f6\u95f4\uff1a O(KE); \u7a7a\u95f4\uff1aO\uff08KE\uff09;\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff1aN<=10000\uff0cM<=500000\n\n\n```cpp\ntype rec=record\n w,en,pre:longint;\nend;\nvar n,m,s,x,y,z,tot,i:longint;\n    head,q,d:array[1..1000000]of longint;\n    a:array[1..1000000]of rec;\nprocedure adde(u,v,w:longint);\nbegin\n inc(tot);\n a[tot].en:=v;\n a[tot].pre:=head[u];\n a[tot].w:=w;\n head[u]:=tot;\nend;\nprocedure spfa;\nvar h,t,i,v,u:longint;\nbegin\n for i:=1 to n do d[i]:=maxlongint;\n q[1]:=s; d[s]:=0;\n h:=0; t:=1;\n while h<t do begin\n  inc(h);\n  u:=q[h];\n  i:=head[u];\n  while i>0 do begin\n   v:=a[i].en;\n   if d[v]=maxlongint then begin\n    d[v]:=d[u]+a[i].w;\n    inc(t);q[t]:=v;\n   end else\n   if d[v]-d[u]>a[i].w then begin\n    inc(t);q[t]:=v;\n    d[v]:=a[i].w+d[u];\n   end;\n   i:=a[i].pre;\n  end;\n end;\nend;\nbegin\n readln(n,m,s);\n for i:=1 to m do begin\n  readln(x,y,z);\n  adde(x,y,z);\n end;\n spfa;\n for i:=1 to n do\n  if d[i]=maxlongint then write('2147483647 ')\n  else write(d[i],' ');\nend.\n```",
        "postTime": 1506946071,
        "uid": 16456,
        "name": "ljc20020730",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u672c\u610f\u662f\u6700\u77ed\u8def\u7684\u5165\u95e8\u9898\uff0c\u9898\u89e3\u5f88\u591a\uff0c\u90fd\u662fspfa\u5c45\u591a\uff0c\u6709\u4eba\u7528dijkstra+\u4f18\u5148\u961f\u5217\u6c42\u89e3\uff0c\u672c\u4eba\u611f\u89c9\u7eaf\u7684dijkstra\u4e5f\u5e94\u8be5\u80fd\u8fc7\uff0c\u53ea\u8981\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u5c31\u884c\uff0c\u672c\u4eba\u4e60\u60ef\u4f7f\u7528STL\uff0c\u679c\u65ad\u91c7\u7528vector\u5efa\u7acb\u90bb\u63a5\u8868\uff0c\u7136\u540e\u5c06\u7ed3\u6784\u4f53\u538b\u5165\u5373\u53ef\u3002\u81f3\u4e8edijkstra\u7684\u57fa\u672c\u539f\u7406\uff0c\u968f\u610f\u627e\u4e2a\u5e16\u5b50\u770b\u770b\u5c31\u884c\uff0c\u672c\u9898\u672c\u4eba\u7528\u4e86\u56db\u79cd\u65b9\u6cd5\u90fdAC \u4e86\uff08\u7eafdijkstra,dijkstra+\u4f18\u5148\u961f\u5217\uff0cspfa+vector\uff0cspfa+\u94fe\u5f0f\u524d\u5411\u661f\uff09\uff0c\u7efc\u5408\u6bd4\u8f83\uff0cspfa\u6bd4\u8f83\u597d\u5199\uff0c\u5bb9\u6613\u4e0a\u624b\uff01\u4e0b\u9762\u53d1\u4e00\u4e0b\u7eafdijkstra\u7684\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\nstruct edge{int to;int cost;};\nvector<edge>g[50005];\nint d[50005];\nint vis[50005];\nint n;\nconst int inf=2147483647;\nint djs(int s)\n{   int min1,k;\n    for(int i=1;i<=n;i++) d[i]=inf;\n       \n        d[s]=0;\n        for(int i=1;i<n;i++)\n        {\n           min1=inf;k=s;\n\n\n            for(int j=1;j<=n;j++)\n            if (!vis[j]&&min1>d[j])\n                {min1=d[j];k=j;}\n               \n            vis[k]=1;\n            //cout<<\"k=\"<<k<<endl;\n            for(int j=0;j<g[k].size();j++)\n            {  int tm=g[k][j].to;\n                if(!vis[tm]&& min1+g[k][j].cost<d[tm])\n                    d[tm]=min1+g[k][j].cost;\n\n            }\n\n\n        }\n     return 0;\n\n}\n\nint main()\n{   ios::sync_with_stdio(false);\n    int m,s,x;\n    cin>>n>>m>>s;\n    edge tmp;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>x>>tmp.to>>tmp.cost;\n        g[x].push_back(tmp);\n    }\n    \n    djs(s);\n    for(int i=1;i<=n;i++)\n        cout<<d[i]<<\" \";\n\n\n    return 0;\n}\n```",
        "postTime": 1530593733,
        "uid": 65643,
        "name": "\u5174\u5b89\u9ed1\u718a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u521d\u4e09\u51c6\u5907\u4e2d\u8003 \u597d\u4e45\u597d\u4e45\u597d\u4e45~\u90fd\u6ca1\u6709\u6765\u6d1b\u8c37\u5237\u9898\u4e86\n\n\u4e2d\u8003\u8d85\u5e38\u53d1\u6325\u4e0a\u91cd\u70b9\u4e2d\u5b66 \u5199\u7bc7\u6a21\u677f\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\n\n\u4eca\u5929\u8dddNOIP\u8fd8\u6709100\u5929 \u4e00\u8d77\u52a0\u6cb9\u5427\n\n\u9898\u89e3\u5982\u4e0b\uff1a\n```cpp\n#include<iostream>\n#include<queue>\n#include<vector>\n#include<cstring> \n#define N 500001\nusing namespace std;\nstruct kind{\n\tint to; //\u6b64\u8fb9\u7684\u76ee\u7684\u5730 \n\tint w; //\u6b64\u8fb9\u7684\u957f\u5ea6 \n}e; //e\u8868\u793a\u8fb9 \nvector <kind> map[N]; //\u90bb\u63a5\u77e9\u9635 \nqueue <int> q; \nint visit[N],n,m,s; //visit\u7528\u6765\u8bb0\u5f55\u8fd9\u4e2a\u7ed3\u70b9\u6709\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\nlong long cost[N]; //cost \u8bb0\u5f55\u8d77\u59cb\u70b9\u5230i\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6 \nvoid spfa()  //\u4e2a\u4eba\u6700\u719f\u6089SPFA \n{\n\tmemset(visit,0,sizeof(visit)); //\u4e00\u5f00\u59cb\u5565\u7ed3\u70b9\u4e5f\u6ca1\u8bbf\u95ee\u8fc7 \n\tq.push(s);  //s\u7ed3\u70b9\u5165\u961f \n\tvisit[s]=1; //\u8bbf\u95ees\u7ed3\u70b9\u505a\u6807\u8bb0 \n\tcost[s]=0; //s\u70b9\u5230s\u70b9\u7684\u6700\u77ed\u8def\u4e3a0 \n\twhile (!q.empty())  //\u961f\u5217\u975e\u7a7a\uff0c\u5982\u679c\u7a7a\u4e86\u8bf4\u660e\u5168\u90e8\u7ed3\u70b9\u8bbf\u95ee\u5b8c\u6bd5 \n\t{\n\t\tint t=q.front(); visit[t]=1; //\u5165\u961f\uff0c\u505a\u6807\u8bb0 \n\t\tfor (int i=0;i<map[t].size();i++) //\u4e00\u4e2a\u4e2a\u5730\u8bbf\u95eet\u7ed3\u70b9\u8fde\u7740\u7684\u7ed3\u70b9 \n\t\t{\n\t\t\tint to=map[t][i].to; //to\u8868\u793at\u70b9\u7684\u76ee\u6807\u70b9 \n\t\t\tif (cost[to]>cost[t]+map[t][i].w) //\u5982\u679c\u53ef\u88ab\u677e\u5f1b \n\t\t\t{\n\t\t\t\tcost[to]=cost[t]+map[t][i].w; //\u677e\u5f1b \n\t\t\t\tif (!visit[to]) //\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\u5165\u961f \n\t\t\t\t{\n\t\t\t\t\tq.push(to);\n\t\t\t\t\tvisit[to]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvisit[t]=0;\n\t\tq.pop(); //\u51fa\u961f \n\t}\n}\nint main()\n{\n\tcin>>n>>m>>s;\n\tfor (int i=1;i<=m;i++) \n\t{\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\te.to=b; e.w=c;\n\t\tmap[a].push_back(e); //\u5efa\u56fe \n\t\tcost[i]=2147483647; //\u521d\u59cb\u5316 \n\t}\n\tspfa(); //\u53bb\u5427SPFA \n\tfor (int i=1;i<=n;i++) cout<<cost[i]<<\" \";\n\treturn 0;\n}\n```\n\n",
        "postTime": 1564575809,
        "uid": 78568,
        "name": "\u8521\u4fca\u9ee0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "### Dijkstra+zkw\u7ebf\u6bb5\u6811\u9898\u89e3\n\n\u697c\u4e0b\u8c8c\u4f3c\u4e5f\u6709zkw\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\u4e0d\u8fc7\u6ca1\u6709\u7ec6\u8bb2\uff0c\u6211\u7ed9\u5927\u5bb6\u5b89\u5229\u4e00\u6ce2\n\n\u4e8b\u5b9e\u4e0a\u6709\u4eba\u62ffstl\u4ee5\u53capb_ds\u5e93\u91cc\u7684\u5404\u79cdpriority_queue\u505a\u8fc7Dijkstra\u6d4b\u8bd5\uff0c\u5b9e\u8df5\u8bc1\u660e\u7ebf\u6bb5\u6811\u5f3a\u65e0\u654c!(\u987a\u4fbf\u518d\u5b89\u5229\u4e00\u6ce2pb_ds\u5e93\uff0c\u5e26\u652f\u6301\u67e5\u8be2\u6392\u540dBST\u548c\u7684\u53ef\u5e76\u5806)\n\n![](https://cdn.luogu.com.cn/upload/pic/18381.png)\n\nzkw\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u975e\u9012\u5f52\u7684\u7ebf\u6bb5\u6811\uff0c\u51fa\u5904\uff1a\u6e05\u534e\u5927\u5b66 \u5f20\u6606\u73ae(zkw) - ppt \u300a\u7edf\u8ba1\u7684\u529b\u91cf\u300b\u6240\u4ee5\u88ab\u5e7f\u5927\u7f51\u53cb\u5d07\u4e3azkw\u7ebf\u6bb5\u6811\n\n\u7531\u4e8e\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u7f16\u53f7\u975e\u5e38\u660e\u786e\uff0c\u4e25\u683c\u6ee1\u8db3\u5de6\u513f\u5b50=\u7236\u4eb2*2\uff0c\u53f3\u513f\u5b50=\u7236\u4eb2*2+1\uff0c\u6240\u4ee5\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u7f16\u53f7\u662f\u65e2\u77e5\u7684\uff0c\u6bcf\u6b21\u66f4\u65b0\u76f4\u63a5\u4ece\u53f6\u5b50\u5f00\u59cb\u5373\u53ef\n\nzkw\u7ebf\u6bb5\u6811\u5bf9\u4e8e\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u975e\u5e38\u65b9\u4fbf\uff08\u533a\u95f4\u4fee\u6539\u7565\u9ebb\u70e6\uff0c\u601d\u8def\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u5177\u4f53\u53ef\u4ee5\u767e\u5ea6\uff09\uff0c\u7531\u4e8e\u5927\u91cf\u4f4d\u8fd0\u7b97\u6240\u4ee5\u901f\u5ea6\u6781\u5feb\uff0c\u4ee3\u7801\u6781\u77ed\uff08\u4e0d\u8d85\u8fc73\u884c\uff09\u3002\u6bcf\u6b21\u53ea\u9700\u4ece\u53f6\u5b50\u66f4\u65b0\u5230\u6839\uff0c\u5373\u53ef\u3002\n\n\u7528\u7ebf\u6bb5\u6811\u4f18\u5316Dijkstra\u7684\u65b9\u5f0f\u5f88\u7b80\u5355\uff0c\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5bf9\u5e94\u4e00\u4e2a\u56fe\u4e0a\u7684\u70b9\uff0c\u901a\u8fc7\u533a\u95f4\u6700\u5c0f\u503c\u67e5\u8be2d\u6700\u5c0f\u7684\u70b9\uff0c\u5bf9\u4e8e\u5df2\u5b8c\u6210\u548c\u4e0d\u8fde\u901a\u7684\u70b9\u53ea\u9700\u5c06\u5176d\u8bbe\u4e3a\u6781\u5927\u5373\u53ef\n\n\u9644\u4e0a\u4e11\u964b\u7684\u4ee3\u7801\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define lc minv[i << 1]\n#define rc minv[i << 1 | 1]\n#define N 10010\n#define M 500010\n#define INF 0x7fffffff\nint n, m, s, L, minv[N << 2], d[N];\nint to[M], nxt[M], v[M], head[N], ecnt;\ninline void init() {//\u521d\u59cb\u5316\u7ebf\u6bb5\u6811\uff0c L\u6240\u8bb0\u5f55\u7684\u662f\u53f6\u5b50\u7ed3\u70b9\u5c42\u7684\u5f00\u59cb\u4e0b\u6807\n\tfor (L = 1; L < n; L <<= 1);\n\tfor (int i = 1; i <= n; i++) minv[i + L - 1] = i;\n\tfor (int i = L - 1; i; i--) minv[i] = d[lc] < d[rc] ? lc : rc;//\u5411\u4e0a\u66f4\u65b0\u6700\u5c0f\u503c\n}\ninline void update(int x) {//\u66f4\u65b0\u67d0\u7ed3\u70b9\u5230\u6839\n\tfor (int i = x + L - 1 >> 1; i; i >>= 1) minv[i] = d[lc] < d[rc] ? lc : rc;\n}\ninline void addedge(int& x, int& y, int& z) {\n\tto[++ecnt] = y;\n\tv[ecnt] = z;\n\tnxt[ecnt] = head[x];\n\thead[x] = ecnt;\n}\nvoid dijkstra() {\n\tbool done[N];\n\tmemset(done, 0, sizeof(done));\n\tfor (int i = 0; i <= n; i++) d[i] = INF;\n\td[s] = 0;\n\tinit();\n\tfor(int i = 1; i <= n; i++) {\n\t\tint x = minv[1];//minv[]\u5b58\u7684\u662fd\u6700\u5c0f\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u51fa\u961f\u6700\u5c0f\u8282\u70b9\n\t\tdone[x] = 1;\n\t\tminv[x + L - 1] = 0;//\u9ed8\u8ba40\u53f7\u8282\u70b9d\u4e3a\u65e0\u7a77\u5927\uff0c\u76f8\u5f53\u4e8e\u51fa\u961fx\n\t\tupdate(x);\n\t\tfor (int i = head[x]; i; i = nxt[i]) {\n\t\t\tint& u = to[i];\n\t\t\tif (!done[u] && d[x] + v[i] < d[u]) {\n\t\t\t\td[u] = d[x] + v[i];\n\t\t\t\tupdate(u);\n\t\t\t}\n\t\t}\n\t}\n}\nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &s);\n\twhile (m--) {\n\t\tint x, y, z;\n\t\tscanf(\"%d%d%d\", &x, &y, &z);\n\t\taddedge(x, y, z);\n\t}\n\tdijkstra();\n\tfor (int i = 1; i <= n; i++) printf(\"%d \", d[i]);\n\treturn 0;\n}\n```",
        "postTime": 1525152812,
        "uid": 28642,
        "name": "C2H6O",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "# spfa \u5165\u95e8\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=10000+10;//\u8282\u70b9\u6700\u5927\u503c\nconst int inf=1000000000;//\u8fb9\u6743\u6700\u5927\u503c\nstruct node{\n    int nxt,val;//\u4e0b\u4e00\u6761\u8fb9\u7f16\u53f7\uff0c\u8fd9\u6761\u8fb9\u7684\u503c\n};\nint n,m,s;//\u8282\u70b9\u6570\uff0c\u8fb9\u6570\uff0c\u6e90\u70b9\nint p[maxn],d[maxn];//\u7ecf\u8fc7\u6807\u8bb0\uff0c\u957f\u5ea6\nvector<node>e[maxn];//vector\u4ee3\u66ff\u90bb\u63a5\u8868\nqueue<int>q;//queue\u4f18\u5316\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<=m;i++){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        node tmp;tmp.nxt=y;tmp.val=z;\n        //\u65b0\u5efa\u8fb9\uff0c\u8fb9\u6743\u4e3az\uff0c\u8fb9\u7f16\u53f7\u4e3ay\n        e[x].push_back(tmp);\n        //\u52a0\u5165x\u7684vector\n    }\n    for(int i=1;i<=n;i++)\n        d[i]=inf;\n    //\u5168\u4f53\u521d\u59cb\u6700\u5927\u5316\n    d[s]=0;q.push(s);p[s]=1;\n    //\u521d\u59cb\u5316\u6e90\u70b9\n    while(!q.empty()){//\u76f4\u5230\u961f\u5217\u4e0d\u4e3a\u7a7a\n        int x=q.front();//\u53d6\u961f\u5934\n        q.pop();//\u5bf9\u5934\u51fa\u961f\n        for(int i=0;i<e[x].size();i++){\n            //\u5faa\u73afvector[e[x]]\u7684\u6bcf\u4e00\u6761\u8fb9\n            int u=e[x][i].nxt,v=e[x][i].val;\n            //u\u4e3ae[x][i]\u7684\u7f16\u53f7\uff0cv\u4e3ae[x][i]\u7684\u6743\u503c\n            if(d[u]>d[x]+v){\n                d[u]=d[x]+v;//\u5982\u679cd[u]\u4e0d\u5982d[x]+v\u77ed\uff0c\u5219\u66f4\u6539d[u]\u7684\u6743\n                if(!p[u]){\n                    q.push(u);//u\u5165\u961f\n                    p[u]=1;//\u6807\u8bb0u\u88ab\u7ecf\u8fc7\n                }\t\t\t\n            }\t\t\n        }\n        p[x]=0;//\u6807\u8bb0p[x]\u91cd\u7f6e\u4e3a0\n    }\n    for(int i=1;i<=n;i++)\n        if(d[i]<inf)\n            printf(\"%d \",d[i]);\n        else \n            printf(\"2147483647 \");\n    //\u8f93\u51fa\n    return 0;\n}\n```",
        "postTime": 1542443272,
        "uid": 39993,
        "name": "\u5143\u5915",
        "ccfLevel": 0,
        "title": "spfa"
    },
    {
        "content": "# **P3371**\n\n----\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P3371)\n                  \t\t\t\t\t\t\t     \n                                                   \n(\u56e0\u4e3a\u6211\u592a\u5f31\u4e86,\u6240\u4ee5\u5927\u4f6c\u8fd8\u662f\u4e0d\u8981\u5410\u69fd\u4e86 : ),\u8c22\u8c22)--\u5927\u4f6c\u5e2d------>\n\n----\n# \u7b97\u6cd5\n\n----\n\u6211\u4eec\u7528\u4e00\u79cd\u975e\u5e38\u817b\u5bb3\u7684\u7b97\u6cd5\u2014\u2014$SPFA$\n\n# \u5148\u6765\u4e00\u7ec4\u6837\u4f8b:\n\n![](https://cdn.luogu.com.cn/upload/pic/21990.png)\n# \uff08\u8d77\u70b9\u4e3a1\uff09\n\u7528\u4e00\u4e2a\u961f\u5217\u7ef4\u62a4\u641c\u7d22\u7684\u4f9d\u6b21\u987a\u5e8f\uff0c\u518d\u7528\u4e00\u4e2a\u6570\u7ec4\u7ef4\u62a4**\u76ee\u524d\u4ece1\u53f7\u70b9\u5230i\u53f7\u70b9\u7684\u6700\u77ed\u957f\u5ea6(\u6743\u503c)**\uff0c\u7136\u540e\u547d\u540d\u4e3avis\u3002\u5f53\u76ee\u524d\u4e0d\u53ef\u4ee5\u5230\u8fbe\u65f6\uff0c\u5148\u8c03\u6574\u4e3aINF\u3002\u5f53\u8f93\u51fa\u65f6\u5224\u65ad:\u5f53\u6700\u77ed\u8ddd\u79bb==INF\uff0c\u8f93\u51fa2147483647\u3002\n\n\u5bf9\u4e86\uff0c\u8981\u8bb0\u5f97\n```cpp\nvis[1]=0;\n```\n\u7136\u540e\u53ef\u4ee5\u5f00\u59cb\u641c\u4e86!\n\n(\u76ee\u524d\u5728\u961f\u5217\u4e2d\u7684\u70b9: $1$)\n\n----\n## \u5f00\u59cb\u641c\u7d22\u70b91:\n\n**\u56e0\u4e3a\u4ece1\u53f7\u70b9\u53ef\u4ee5\u5230\u8fbe\u70b92\uff0c\u4e14\u4ece\u70b91\u5230\u8fbe\u70b92\u7684\u8ddd\u79bb $1+0$ \u5c0f\u4e8e\u539f\u672c\u7684\u8ddd\u79bb $INF$\u3002\u6240\u4ee5\u6211\u4eec\u66f4\u65b0vis[2]\uff0c\u5e76\u628a\u70b92\u52a0\u5165\u961f\u5217\u3002**\n\n\u540c\u7406\uff0c\u8c03\u6574vis[5]\uff0c\u628a\u70b95\u52a0\u5165\u961f\u5217\u3002\n![](https://cdn.luogu.com.cn/upload/pic/21989.png)\n\n(\u76ee\u524d\u5728\u961f\u5217\u4e2d\u7684\u70b9: $2$,$5$)\n\n----\n## \u5f00\u59cb\u641c\u7d22\u70b92:\n\n**\u56e0\u4e3a\u4ece2\u53f7\u70b9\u53ef\u4ee5\u5230\u8fbe\u70b93\uff0c\u4e14\u4ece\u70b91\u5230\u8fbe\u70b93\u7684\u8ddd\u79bb $4+1$ \u5c0f\u4e8e\u539f\u672c\u7684\u8ddd\u79bb $INF$\u3002\u6240\u4ee5\u6211\u4eec\u66f4\u65b0vis[3]\uff0c\u5e76\u628a\u70b93\u52a0\u5165\u961f\u5217\u3002**\n\n\u540c\u7406\uff0c\u8c03\u6574vis[4]\uff0c\u628a\u70b94\u52a0\u5165\u961f\u5217\u3002\n![](https://cdn.luogu.com.cn/upload/pic/21992.png )\n\n(\u76ee\u524d\u5728\u961f\u5217\u4e2d\u7684\u70b9: $5$,$3$,$4$)\n\n----\n## \u5f00\u59cb\u641c\u7d22\u70b95:\n\n**\u56e0\u4e3a\u4ece5\u53f7\u70b9\u53ef\u4ee5\u5230\u8fbe\u70b93\uff0c\u4e14\u4ece\u70b91\u5230\u8fbe\u70b93\u7684\u8ddd\u79bb $1+2$ \u5c0f\u4e8e\u539f\u672c\u7684\u8ddd\u79bb $4$\u3002\u6240\u4ee5\u6211\u4eec\u66f4\u65b0vis[3]\uff0c\u53c8\u56e0\u4e3a\u70b93\u5df2\u7ecf\u52a0\u5165\u4e86\u961f\u5217\uff0c\u6240\u4ee5\u4e0d\u7528\u91cd\u590d\u52a0\u5165\u3002**\n\n![](https://cdn.luogu.com.cn/upload/pic/21993.png )\n\n(\u76ee\u524d\u5728\u961f\u5217\u4e2d\u7684\u70b9: $3$,$4$)\n\n----\n## \u5f00\u59cb\u641c\u7d22\u70b93:\n\n**\u56e0\u4e3a\u4ece3\u53f7\u70b9~~\u53ef\u4ee5\u5230\u8fbe\u5e7b\u60f3\u4e61~~\u4ec0\u4e48\u4e5f\u4e0d\u80fd\u5230\u8fbe\uff0c\u6240\u4ee5\u4ec0\u4e48\u4e5f\u6ca1\u6709\u53d1\u751fQWQ\u3002**\n\n![](https://cdn.luogu.com.cn/upload/pic/21993.png )\n\n(\u76ee\u524d\u5728\u961f\u5217\u4e2d\u7684\u70b9: $4$)\n\n----\n## \u5f00\u59cb\u641c\u7d22\u70b94:\n\n**\u867d\u7136\u4ece4\u53f7\u70b9\u53ef\u4ee5\u5230\u8fbe\u70b95\uff0c\u4f46\u4ece\u70b94\u5230\u8fbe\u70b93\u7684\u8ddd\u79bb $1+4$ \u5927\u4e8e\u539f\u672c\u7684\u8ddd\u79bb $2$\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u66f4\u65b0vis[3]\u3002**\n\n![](https://cdn.luogu.com.cn/upload/pic/21993.png )\n\n(\u76ee\u524d\u5728\u961f\u5217\u4e2d\u7684\u70b9:\u65e0)\n\n----\n\u4e8e\u662f\u8f93\u51fa:\n```\n0 1 3 4 2\n```\n## \u7b97\u6cd5\u90e8\u5206\u5b8c\u6bd5\uff01\n\n----\n# \u5efa\u56fe\n\n----\n\u89c2\u5bdf\u6570\u636e\u89c4\u6a21:\n\n**\u5bf9\u4e8e100%\u7684\u6570\u636e\uff1aN<=10000\uff0cM<=500000**\n\nQWQ......\n\n\u8003\u8651\u4f7f\u7528\u90bb\u63a5\u77e9\u9635...\n```cpp\nint a[10010][10010];\n```\n\n~~\u70b9\u4e00\u4e0b\u6709\u60ca\u559c~~\n\n[![](https://cdn.luogu.com.cn/upload/pic/21996.png )](https://www.luogu.org/recordnew/show/8094663)\n\nQWQ......\n\n\u597d\u5427\uff0c\u4e0d\u8bf4\u4e86\uff0c\u52a0\u5165\u6b63\u9898\uff1a\n\n# \u65b0\u7684\u5efa\u56fe\u65b9\u6cd5\u2014\u2014\u94fe\u5f0f\u524d\u5411\u661f\uff01\uff01\uff01\n\n~~\u5df2\u7ecf\u4f1a\u4e86\u7684dalao\u4eec\u5c31\u8df3\u8fc7\u5427QWQ~~\n\n----\n\n\u7a9d\u4e0d\u60f3\u8bb2\u5417~~~(\u6342\u8138)\u4eba\u5bb6\u4e0d\u60f3\u8bb2\u5417\n\n[\u6233\u4e00\u4e0b](http://baidu.apphb.com/?q=%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F)\n\n(\u7a9d\u8fd8\u662f\u63d0\u4f9b\u4e00\u4efd\u94fe\u5f0f\u524d\u5411\u661f\u7684\u4ee3\u7801\u5427~~~)\n\n```cpp\nint head[maxn];//\u4ecei\u70b9\u51fa\u53d1\u7684\u7b2c\u4e00\u6761\u8fb9\nstruct egde{\n\tint to,next_,w;//\u5206\u522b\u4ee3\u8868\u6bcf\u6761\u7ebf\u76ee\u7684\u5730,\u4e0b\u4e00\u6761\u7ebf\u7684\u4e0b\u6807\u548c\u6743\u503c\n}a[maxm]\n//\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u4e0b\u5217\u4ee3\u7801\u6765\u4f9d\u6b21\u628a\u4ecenow\u70b9\u51fa\u53d1\u7684\u8fb9\u904d\u5386\nfor(i=head[now];i;i=a[i].next_)\n//\u662f\u4e0d\u662f\u5f88\u795e\u5947\u554a!\n//\u540e\u9762\u7684\u662f\u52a0\u5165\u4e00\u6761\u8fb9\u7684\nvoid add(int u,int y,int o){\n\t//\u5efa\u56fe\n    len++;\n    c[len].next_=head[u];\n    c[len].to=y;\n    c[len].dis=o;\n    head[u]=len;\n}\n```\n\n----\n\n## \u6211\u518d\u653e\u4e0a\u4ee3\u7801\u5427\uff01\n\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x3f3f3f3f\nusing namespace std;\nint i,j,k,n,m,s,len;\nint vis[10010];\nint dis[10010];//\u5224\u65ad\u662f\u5426\u8fdb\u961f\nint head[500010];\nint dl[500010],l,r;\nstruct stu{\n    int next_,to,w;\n}c[500010];\nvoid add(int u,int y,int o){\n    //\u5efa\u56fe\n    len++;\n    c[len].next_=head[u];\n    c[len].to=y;\n    c[len].w=o;\n    head[u]=len;\n}\nvoid SPFA(){\n    //\u521d\u59cb\u5316\n    for(i=1;i<=n;i++){\n        vis[i]=INF;\n    }\n    vis[s]=0;\n    l=0;r=1;dl[r]=s;dis[s]=1;\n    //\u8bbe\u7f6e\u961f\u5217\n    while(l^r/*\u6ca1\u7528\u7684\u4f4d\u8fd0\u7b97,\u4e5f\u5c31\u662fj!=r*/){\n        l++;\n        int u=dl[l];\n        dis[u]=0;\n        for(i=head[u];i;i=c[i].next_){//\u904d\u5386\u6bcf\u6761\u4ecei\u70b9\u51fa\u53d1\u7684\u8fb9\n            int v=c[i].to;\n            if(vis[v]>vis[u]+c[i].w){//\u5982\u679c\u8def\u5f84\u957f\u5ea6\u5c0f\u4e8e\u539f\u957f\u5ea6\n                vis[v]=vis[u]+c[i].w;//\u8c03\u6574\n                if(!dis[v]){\n                    //\u5165\u961f\n                    dis[v]=1;\n                    r++;\n                    dl[r]=v;\n                }\n            }\n        }\n    }\n}\nint main(){\n    cin>>n>>m>>s;\n    //\u8f93\u5165\n    for(i=1;i<=m;i++){\n        int u,y,o;\n        scanf(\"%d%d%d\",&u,&y,&o);\n        add(u,y,o);\n    }\n    SPFA();\n    //\u8f93\u51fa\n    for(i=1;i<=n;i++)\n        if(vis[i]==INF)cout<<2147483647<<\" \";\n        else cout<<vis[i]<<\" \";\n    return 0;\n}\n```",
        "postTime": 1530448210,
        "uid": 35891,
        "name": "huangzirui",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 \u5355\u6e90\u6700\u77ed\u8def\u5f84 \uff08SPFA\uff09"
    },
    {
        "content": "[\u4e8c\u500d\u7ecf\u9a8c](https://www.luogu.org/problem/P4779) P4779\n\n~~\u8bdd\u8bf4\u8fd9\u9898\u5c31\u662f\u4e00\u9053Dij\u677f\u5b50~~\n\n\u8fd9\u4e2a\u5f31\u5316\u7248\u7684\u6570\u636e\u8f83\u5f31\uff0c\u666e\u901aDij\u4e5f\u80fd\u8fc7\uff0c\u4f46[P4779](https://www.luogu.org/problem/P4779)\u5c31\u5f88\u6bd2\u7624\uff0c\u8981\u7528\u5806\u4f18\u5316...\n\n\u4f7f\u7528c++STL\u4f18\u5148\u961f\u5217\uff0c\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\n\n\u4f7f\u7528Dijkstra\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5b83\u662f\u4e00\u79cd\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5...\n\n\u4ee3\u7801\uff1a\uff08\u5806\u4f18\u5316dij\uff09\n\n```\n#include <bits/stdc++.h>\n\n#define INF 0x3f3f\n\nusing namespace std;\n\nint n,m,s,tot;\nlong long dis[1000010<<1],h[2000010<<1];\nbool used[2000010<<1];\n\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;//pair\u7684\u4f18\u5148\u961f\u5217\n//\u4e00\u5b9a\u8981\u52a0\u7a7a\u683c\uff0c\u8981\u4e0d\u7136\u5728\u7f16\u8bd1\u5668\u773c\u91cc\u7b49\u4ef7\u4e0e\u53f3\u79fb\n\nstruct Node {\n\tlong long to,w,next;\n}e[2000010<<1];\n\nvoid add_edge(long long x,long long y,long long z) {\n\t++tot;\n\te[tot].to=y;\n\te[tot].next=h[x];\n\te[tot].w=z;\n\th[x]=tot;\n}\n\nvoid input() {\n\tlong long u,v,w;\n\tcin>>n>>m>>s;\n\tfor(long long i=1;i<=m;i++) {\n\t\tcin>>u>>v>>w;\n\t\tadd_edge(u,v,w);//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\n\t}\n}\n\nvoid Dijkstra() {\n\twhile(q.size()) {\n\t\tlong long u=q.top().second;\n\t\tq.pop();\n\t\tif(used[u]) continue;\n\t\tused[u]=1;\n\t\tfor(int i=h[u];i;i=e[i].next) {\n\t\t\tlong long v=e[i].to;\n\t\t\tif(dis[v]>dis[u]+e[i].w) {//\u677e\u5f1b\uff0c\u66f4\u6362\u6700\u77ed\u8def\u5f84\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tq.push(make_pair(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid output() {\n\tfor(int i=1;i<=n;i++) {\n\t\tcout<<dis[i]<<\" \";\n\t}\n}\n\nint main() {\n\tinput();\n\tfor(int i=1;i<=n;i++) {\n\t\tdis[i]=2147483647;\n\t}\n\tdis[s]=0;\n\tq.push(make_pair(0,s));\n\tDijkstra();\n\toutput();\n}\n```",
        "postTime": 1566178895,
        "uid": 99430,
        "name": "Leaved_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u6807\u51c6\u7684SPFA\u677f\u5b50\u9898;\n\n### \u6ce8\u610f\n\u8fd9\u9053\u9898\u7684n\u6bd4\u8f83\u5927\uff0c\u4e0d\u80fd\u7528\u8fde\u63a5\u77e9\u9635\u5b58\u50a8\u3002\n\n\u6b64\u65f6\uff0c\u5e94\u5f53\u9009\u7528\u8fde\u63a5\u8868\u3002\u6211\u5728\u7528\u8fde\u63a5\u8868\u7684\u65f6\u5019\u52a0\u4e0a\u4e86\u4e8c\u5206\u6765\u4f18\u5316\uff08\u6548\u679c\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u4f46\u8fd8\u662f\u6709\u7684\u3002\uff09\n\n## \u90a3\u4e48\u4ec0\u4e48\u662fSPFA\uff1f\n```\n\u82e5\u7ed9\u5b9a\u7684\u56fe\u5b58\u5728\u8d1f\u6743\u8fb9\uff0c\u7c7b\u4f3cDijkstra\u7b97\u6cd5\u7b49\u7b97\u6cd5\u4fbf\u6ca1\u6709\u4e86\u7528\u6b66\u4e4b\u5730\uff0c\nSPFA\u7b97\u6cd5\u4fbf\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\n\u7b80\u6d01\u8d77\u89c1\uff0c\u6211\u4eec\u7ea6\u5b9a\u52a0\u6743\u6709\u5411\u56feG\u4e0d\u5b58\u5728\u8d1f\u6743\u56de\u8def\uff0c\u5373\u6700\u77ed\u8def\u5f84\u4e00\u5b9a\u5b58\u5728\u3002\n\u7528\u6570\u7ec4d\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u503c\uff0c\u800c\u4e14\u7528\u90bb\u63a5\u8868\u6765\u5b58\u50a8\u56feG\u3002\n\u6211\u4eec\u91c7\u53d6\u7684\u65b9\u6cd5\u662f\u52a8\u6001\u903c\u8fd1\u6cd5\uff1a\u8bbe\u7acb\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u961f\u5217\u7528\u6765\u4fdd\u5b58\u5f85\u4f18\u5316\u7684\u7ed3\u70b9\uff0c\n\u4f18\u5316\u65f6\u6bcf\u6b21\u53d6\u51fa\u961f\u9996\u7ed3\u70b9u\uff0c\u5e76\u4e14\u7528u\u70b9\u5f53\u524d\u7684\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u503c\u5bf9\u79bb\u5f00u\u70b9\u6240\u6307\u5411\u7684\u7ed3\u70b9v\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\n\u5982\u679cv\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u503c\u6709\u6240\u8c03\u6574\uff0c\u4e14v\u70b9\u4e0d\u5728\u5f53\u524d\u7684\u961f\u5217\u4e2d\uff0c\u5c31\u5c06v\u70b9\u653e\u5165\u961f\u5c3e\u3002\n\u8fd9\u6837\u4e0d\u65ad\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u7ed3\u70b9\u6765\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u76f4\u81f3\u961f\u5217\u7a7a\u4e3a\u6b62\u3002\n\n\u5b9a\u7406\uff1a\u53ea\u8981\u6700\u77ed\u8def\u5f84\u5b58\u5728\uff0c\u4e0a\u8ff0SPFA\u7b97\u6cd5\u5fc5\u5b9a\u80fd\u6c42\u51fa\u6700\u5c0f\u503c\u3002\n\u8bc1\u660e\uff1a\u6bcf\u6b21\u5c06\u70b9\u653e\u5165\u961f\u5c3e\uff0c\u90fd\u662f\u7ecf\u8fc7\u677e\u5f1b\u64cd\u4f5c\u8fbe\u5230\u7684\u3002\n\u6362\u8a00\u4e4b\uff0c\u6bcf\u6b21\u7684\u4f18\u5316\u5c06\u4f1a\u6709\u67d0\u4e2a\u70b9v\u7684\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u503cd[v]\u53d8\u5c0f\u3002\n\u6240\u4ee5\u7b97\u6cd5\u7684\u6267\u884c\u4f1a\u4f7fd\u8d8a\u6765\u8d8a\u5c0f\u3002\n\u7531\u4e8e\u6211\u4eec\u5047\u5b9a\u56fe\u4e2d\u4e0d\u5b58\u5728\u8d1f\u6743\u56de\u8def\uff0c\u6240\u4ee5\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u6700\u77ed\u8def\u5f84\u503c\u3002\n\u56e0\u6b64\uff0c\u7b97\u6cd5\u4e0d\u4f1a\u65e0\u9650\u6267\u884c\u4e0b\u53bb\uff0c\u968f\u7740d\u503c\u7684\u9010\u6e10\u53d8\u5c0f\uff0c\n\u76f4\u5230\u5230\u8fbe\u6700\u77ed\u8def\u5f84\u503c\u65f6\uff0c\u7b97\u6cd5\u7ed3\u675f\uff0c\u8fd9\u65f6\u7684\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u503c\u5c31\u662f\u5bf9\u5e94\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84\u503c\u3002\n```\n\u6b64\u89e3\u91ca\u6765\u6e90\u4e8e\u7f51\u7edc\u3002\n\n\u6765\u4e2a\u56fe\u89e3\uff1a\uff08\u8fd8\u662f\u6587\u672c\u7248\u7684\u56fe\u8868\uff09\n\n\u9996\u5148\uff0c\u6211\u4eec\u8d4b\u503c\u4e00\u4e2a\u8ddd\u79bb\u6570\u7ec4Dis\uff0cDis[i]\u5b83\u8868\u793a\u4eces\u5230i\u7684\u8ddd\u79bb\uff0c\u5148\u5c06s\u5165\u961f\uff0c\u7136\u540e\u4f9d\u6b21\u6269\u5f20\uff08\u7c7b\u4f3c\u4e8eBFS\uff09\uff0c\u6bcf\u6b21\u53d6\u51fa\u540e\u53c8\u653e\u5165\u6269\u5f20\u51fa\u6765\u7684\u8282\u70b9\uff0c\u4e0d\u5b58\u5728\u8d1f\u73af\u65f6\uff0c\u4e00\u6761\u8def\u5f84\u6700\u591a\u7ecf\u8fc7n\u4e2a\u8282\u70b9\u3002\u800c\u7528\u8fde\u63a5\u8868\uff0c\u6211\u5c06\u8fb9\u5148\u6309\u8d77\u70b9\u6392\u5e8f\uff08\u56e0\u4e3a\u5b83\u662f\u6709\u5411\u7684\uff09\uff0c\u7136\u540e\u6211\u53d6\u51fa\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5c06\u5b83\u4f5c\u4e3a\u8d77\u70b9\uff0c\u6269\u5f20\uff0c\u6b64\u65f6\u4e8c\u5206\u5c31\u8d77\u4e86\u4f5c\u7528\uff0c\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u8d77\u70b9\u4e3a\u6b64\u8282\u70b9\u7684\u8def\u5f84\uff0c\u6ca1\u9519\uff0cEZ\u5566\n\n\u6240\u4ee5SPFA\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(KE),\u5c31\u662f\u9171\u7d2b.\n\n# CODE\n```\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,s;\nstruct node{\n\tint s,t,v;\n}R[500000+5];\nint book[10000+5];\nint find( int x ){//\u4e8c\u5206\u67e5\u627e\u4f18\u5316SPFA\n\tint l=1,r=m,mid=(l+r)>>1;\n\twhile( l < r ){\n\t\tif(R[mid].s>x)r=mid-1;\n\t\tif(R[mid].s<x)l=mid+1;\n\t\tif(R[mid].s==x)return mid;\n\t\tmid=(l+r)>>1;\n\t}\n\treturn (l+r)>>1;\n}\nint SPFA( int x ){//\u4eba\u755c\u65e0\u5bb3\u7684SPFA\n\tint i,q[100000+5],vis[10000+5],dis[10000+5],v,k,head=0,tail=1;\n\tq[1]=s,vis[s]=1;\n\tfor ( i = 1 ; i <= n; i ++)dis[i]=2147483647;\n\tdis[s]=0;\n\twhile(head < tail){\n\t\thead++;v=q[head],vis[v]=0;\n\t\tif(book[v]!=0){\t\n\t\t\ti=find(v);\n\t\t\tfor( ;i >= 1 ; i --)if(R[i].s!=v)break;//\u4e8c\u5206\u6b8b\u7559\u7684BUG\u4fee\u6539\uff0c\u6211\u592a\u5f31\u4e86\n\t\t\ti++;//\u4e8c\u5206\u6b8b\u7559\u7684BUG\u4fee\u6539\n\t\t\tfor ( ; i <= m ; i ++){\n\t\t\t\tif(R[i].s!=v)break;//\u7ec8\u6b62\u5faa\u73af\n\t\t\t\t\telse if(dis[v] + R[i].v< dis[R[i].t]){//\u677e\u5f1b\u64cd\u4f5c\n\t\t\t\t\t\tdis[R[i].t]=dis[v] + R[i].v;\n\t\t\t\t\t\tif(vis[R[i].t]!=1)tail++,q[tail]=R[i].t,vis[R[i].t]=1;//\u5165\u961f\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor ( i = 1 ; i <= n; i ++)cout<<dis[i]<<\" \";//out\n\treturn 0;\n}\nint cmp( node a , node b){return a.s<b.s;}\nint main(){\n\tint i,j,k;\n\tcin>>n>>m>>s;\n\tfor ( i = 1 ; i <= m; i ++)cin>>R[i].s>>R[i].t>>R[i].v,book[R[i].s]=1;\n\tsort( R +1 , R +1+ m,cmp);\n\tSPFA(s);\n\treturn 0;\n}\n```\n\u6709\u70b9\u5c0f\u4e11\uff0c\u4e0d\u559c\u65e0\u55b7\uff0c\u8c22\u8c22\u3002",
        "postTime": 1563162192,
        "uid": 67817,
        "name": "MuYC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "\u5355\u6e90\u6700\u77ed\u8def\uff0c\u8d81\u7740\u8fd9\u9898\u590d\u4e60\u4e00\u6ce2Dijkstra\u3002\n\n0) \u9009\u5b9a\u8d77\u70b9\uff0c\u5c06\u5176\u52a0\u5165\u961f\u5217\u3010\u961f\u5217\u4e2d\u4e3a\u5f85\u8bbf\u95ee\u7684\u70b9\u3011\uff1b\n\nwhile (\u961f\u5217\u4e0d\u4e3a\u7a7a)\n\n1) \u628a\u961f\u5217\u4e2d\u79bb\u8d77\u70b9\u6700\u77ed\u7684\u70b9\u63d0\u51fa\u6765\uff08\u7528\u4f18\u5148\u961f\u5217\u5b9e\u73b0\uff09\uff1b\n\n2) \u67e5\u770b\u6240\u6709\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u8d77\u70b9\u7684\u8fb9\uff0c\u66f4\u65b0\u8ddd\u79bb\u76ee\u6807\u70b9\u7684\u6700\u77ed\u8ddd\u79bb( dis[\u76ee\u6807\u70b9] > dis[\u5f53\u524d\u70b9] + w[\u5f53\u524d\u8fb9] \u7684\u8bdd )\u3002\u4e00\u65e6\u66f4\u65b0\uff0c\u5c31\u628a\u76ee\u6807\u70b9\u4e22\u5230\u961f\u5217\u91cc\u53bb\u3002\n\n\n\u7136\u540edis[k]\u5c31\u662f\u8d77\u70b9\u5230\u76ee\u6807\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u4e86\u3002\n\n\n```cpp\n/* P3371\n * Au: SJoshua\n */\n#include <cstdio>\n#include <cstring>\n#include <queue> \n#include <vector>\n\nusing namespace std;\n\nstruct edge {\n    int u, v, w;\n} edges[500001];\n\nstruct node {\n    int u, d;\n    bool operator < (const node &n) const {\n        return d > n.d;\n    }\n} temp;\n\nvector <int> map[10001];\npriority_queue <node> q; \nint dis[10001]; \nbool visited[10001];\n\nint main(void) {\n    int n, m, s;\n    scanf(\"%d %d %d\", &n, &m, &s);\n    for (int k = 1; k <= m; k++) {\n        scanf(\"%d %d %d\", &edges[k].u, &edges[k].v, &edges[k].w);\n        map[edges[k].u].push_back(k); \n    } \n    memset(dis, 0x3f, sizeof(dis));\n    dis[s] = 0;\n    temp.u = s;\n    q.push(temp);\n    while (!q.empty()) {\n        node tmp = q.top();\n        q.pop();\n        if (visited[tmp.u]) {\n            continue; \n        } \n        visited[tmp.u] = true;\n        for (unsigned int k = 0; k < map[tmp.u].size(); k++) {\n            edge &e = edges[map[tmp.u][k]];\n            if (dis[e.v] > dis[e.u] + e.w) {\n                temp.d = dis[temp.u = e.v] = dis[e.u] + e.w;\n                q.push(temp);\n            }\n        }\n    }\n    for (int k = 1; k <= n; k++) {\n        printf(\"%d \", dis[k] == 0x3f3f3f3f ? 2147483647 : dis[k]); \n    } \n    return 0;\n} \n```",
        "postTime": 1474622917,
        "uid": 790,
        "name": "\u7ea6\u4fee\u4e9a_RK",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "## $\\text{spfa}$ \n> --\u961f\u5217\u4f18\u5316\u7684[$\\text{bellman-ford}$\u7b97\u6cd5](https://www.luogu.com.cn/blog/ThereMust/textbellman-ford)\n\n$\\text{spfa}$\u7b97\u6cd5\uff0c\u5373\u961f\u5217\u4f18\u5316\u7684$\\text{bellman-ford}$\u7b97\u6cd5,\u6709$O(|e|\\times|v|)$\u7684\u590d\u6742\u5ea6\u4e0a\u754c,\u5728\u758f\u677e\u56fe\u4e2d\u5f80\u5f80\u662f$O(k\\times|e|)$\u7ea7\u522b\u7684\u590d\u6742\u5ea6,\u5176\u4e2d$k$\u662f\u5e38\u6570\n\n\u89c2\u5bdf$\\text{bellman-ford}$\u7684\u8fd0\u884c\uff08\u4ece\u6211bf\u7b97\u6cd5\u7684\u535a\u5ba2\u6458\u6765\u7684\uff09:\n\n![1](https://cdn.luogu.com.cn/upload/image_hosting/13n2qds1.png)\n![2](https://cdn.luogu.com.cn/upload/image_hosting/3q0urgnd.png)\n![3](https://cdn.luogu.com.cn/upload/image_hosting/vj61p32p.png)\n![4](https://cdn.luogu.com.cn/upload/image_hosting/1vdhugzy.png)\n\n\u53d1\u73b0\u6709\u4e9b\u70b9,\u4f60\u4ece\u524d$i$\u4e2a\u70b9\u6839\u672c\u677e\u5f1b\u4e0d\u5230,\u4e8e\u662f\u6211\u4eec\u91c7\u7528\u5e7f\u641c\u7684\u65b9\u5f0f(\u5373\u7528\u961f\u5217)\u5bf9\u56fe\u8fdb\u884c\u904d\u5386,\u907f\u514d\u65f6\u95f4\u7684\u6d6a\u8d39\uff0c\u4f46\u662f\u666e\u901a\u7684\u5e7f\u641c\u5728\u5bfb\u627e\u6700\u77ed\u8def\u7684\u65f6\u5019\u65e0\u6cd5\u4fdd\u8bc1\u5f53\u524d\u7684\u8282\u70b9\u662f\u6700\u4f18\u7684\uff0c\u770b\u5f20\u56fe\uff1a\n![bfs-wrong](https://cdn.luogu.com.cn/upload/image_hosting/7ok8n82u.png)\n\u8981\u662f\u4e4b\u524d\u7684\u67d0\u4e2a\u70b9\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u540e\u8fb9\u641c\u5230\u7684\u70b9\u4e5f\u65e0\u6cd5\u4fdd\u8bc1\u6700\u4f18\n\n\u4e8e\u662f\u6211\u4eec\u7684$\\text{spfa}$\u7b97\u6cd5\u975e\u5e38\u806a\u660e\u5730\u907f\u514d\u4e86\u8fd9\u4e00\u60c5\u51b5\uff0c\u5c06\u9700\u8981\u66f4\u65b0\u7684\u8282\u70b9\u91cd\u65b0\u5165\u961f\uff08\u5982\u679c\u5b83\u4e0d\u5728\u961f\u5217\u4e2d\uff09\uff0c\u4ee5\u4fdd\u8bc1\u540e\u8fb9\u641c\u5230\u7684\u70b9\u7684\u6743\u503c\u6700\u4f18\uff08~~\u5927\u4e0d\u4e86\u91cd\u65b0\u641c\u4e00\u904d\u540e\u8fb9\u7684\u70b9\u5417~~\uff09\n\n\u4ee5\u4e0a\u8fb9\u7684\u56fe\u4e3a\u4f8b\uff0c\u5728\u70b93\u677e\u5f1b\u5b8c\u70b92\u65f6\uff0c\u91cd\u65b0\u5165\u961f\u70b92\uff0c\u4e8e\u662f\n\n![right](https://cdn.luogu.com.cn/upload/image_hosting/4p4fx51g.png)\n\n\u4f46\u4e5f\u662f\u8fd9\u6761\u7ed9\u4e86\u6bd2\u7624\u51fa\u9898\u4eba\u5361$\\text{spfa}$\u7b97\u6cd5\u7684\u7a7a\u95f4\uff0c\u5373\u8ba9\u5143\u7d20\u4e00\u904d\u4e00\u904d\u5730\u91cd\u65b0\u5165\u961f\uff0c\u5df2\u8fbe\u5230\u65f6\u95f4\u9000\u5316\u7684\u6548\u679c\n\n\u7efc\u4e0a\uff0c$\\text{spfa}=\\text{bfs}(\\text{queue})+\\text{bellman-ford}$\n\n[$\\text{spfa}$\u5224\u8d1f\u73af](https://www.luogu.com.cn/blog/ThereMust/)\uff08~~\u5495\u5495\u5495\u5495~~\uff09\n\ncode:[$\\text{spfa}$\u6a21\u677f](https://www.luogu.com.cn/problem/P3371)\n```cpp\n#include <iostream>\n#include <fstream>\n#include <queue>\n#include <cstdlib>\n\nusing namespace std;\n\nconst int MAXN = 5e5 + 5;\n\nint head[MAXN], next[MAXN], to[MAXN], weight[MAXN];\nint tot = 0;\n\nint n, m, s;\nint dis[MAXN], vis[MAXN];\nbool inQueue[MAXN];\nqueue<int> q;\n\nvoid AddEdge(int u, int v, int w) {\n  next[++tot] = head[u];\n  to[tot] = v;\n  weight[tot] = w;\n  head[u] = tot;\n}\n\nbool Relax(int u, int v, int w) {\n  if(dis[v] > dis[u] + w) {\n    dis[v] = dis[u] + w;\n    return true;\n  }\n  return false;\n}\n\nvoid Error() {\n  cout << \"negetive loop!\" << endl;\n  exit(0);\n}\n\nvoid Spfa(int start) {\n  for(int i = 0; i < MAXN; i++) {\n    dis[i] = 2147483647;\n  }\n  q.push(start);\n  inQueue[start] = true;\n  dis[start] = 0;\n  vis[start] = 1;\n  while(!q.empty()) {\n    int u = q.front();\n    q.pop();\n    vis[u]++;\n    inQueue[u] = false;\n    if(vis[u] > n) { //\u5224\u8d1f\u73af \n      Error();\n    }\n    for(int i = head[u]; i; i = next[i]) {\n      int v = to[i];\n      int w = weight[i];\n      if(Relax(u, v, w) && !inQueue[v]) {\n\tq.push(v);\n        inQueue[v] = false;\n      }\n    }\n  }\n}\n\nint main() {\n  ifstream inFile(\"spfa.in\");\n  cin >> n >> m >> s;\n  for(int i = 0; i < m; i++) {\n    int u, v, w;\n    cin >> u >> v >> w;\n    AddEdge(u, v, w);\n  }\n  Spfa(s);\n  for(int i = 1; i < n + 1; i++) {\n    cout << dis[i] << ' ';\n  }\n  cout << endl;\n  return 0;\n}\n```",
        "postTime": 1574594152,
        "uid": 95103,
        "name": "KellyFrog",
        "ccfLevel": 9,
        "title": "spfa"
    },
    {
        "content": "## \u961f\u5217\u4f18\u5316\u7684Bellman\n\n~~\u54ed\u5527\u5527\uff0c\u5927\u5bb6\u90fd\u628aBellman\u5fd8\u4e86~~\n\n### \u5176\u5b9eSPFA\u5c31\u662f\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6539\u8fdb\u7248\n\n~~\u4e0d\u5e78\u7684\u662f\u5b83\u5df2\u7ecfdie\u6389\u4e86~~\n![](https://cdn.luogu.com.cn/upload/pic/25108.png)\n\n### \u7b97\u6cd5\u5177\u4f53\u601d\u8def\u5c31\u662f\u4e0d\u65ad\u5c1d\u8bd5\u5bf9\u8fb9\u8fdb\u884c\u677e\u5f1b\uff0c\u82e5\u677e\u5f1b\u6210\u529f\u5c31\u5c06\u70b9\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff0c\u4e4b\u540e\u7684\u677e\u5f1b\u64cd\u4f5c\u5c31\u53ea\u5bf9\u961f\u5217\u4e2d\u7684\u70b9\u8fdb\u884c\uff0c\u4f18\u5316\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\n\n\n------------\n\n\n## \u90a3\u4e48\u5982\u4f55\u5224\u65ad\u8d1f\u6743\u56de\u8def\u5462~\n\n\n### \u5982\u679c\u4e00\u4e2a\u9876\u70b9\u88ab\u52a0\u5165\u5230\u961f\u5217\u4e2d\u7684\u6b21\u6570\u8d85\u8fc7n\u6b21\uff0c\u8bf4\u660e\u7ecf\u8fc7n\u8f6e\u677e\u5f1b\u64cd\u4f5c\u540e\u4ecd\u5b58\u5728\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u6b64\u56fe\u4e00\u5b9a\u5b58\u5728\u8d1f\u6743\u56de\u8def\n\n~~\uff08\u4f46\u662f\u8fd9\u9053\u9898\u5e76\u6ca1\u6709\u5e26\u8d1f\u73af\u7684\u6570\u636e\uff09~~\n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\u5927\u5bb6\u81ea\u5df1\u7814\u7a76\u5427  ~^0^~\n\n```cpp\n#include<iostream>\n#include<queue>//\u7528\u5230\u961f\u5217 \n\nusing namespace std;\n\n#define loop1 for(int t=first[q.front()];t!=-1;t=nxt[t])//\u88c5\u903c\u4e13\u7528 \n\nconst int max_n=100005;//n\u7684\u6700\u5927\u503c \nconst int max_m=500005;//m\u7684\u6700\u5927\u503c \nconst int inf=2147483647;//\u6b63\u65e0\u7a77 \n\nqueue<int> q;//\u7ef4\u62a4\u5df2\u677e\u5f1b\u7684\u9876\u70b9 \n\nint u[max_m]/*\u59cb\u8fb9 */,v[max_m]/*\u7ec8\u8fb9 */,w[max_m]/*\u6743\u503c */,n,m,a/*\u8be2\u95ee\u7684\u59cb\u8fb9 */;\nint first[max_n]/*\u6bcf\u4e2a\u9876\u70b9\u7b2c\u4e00\u6761\u8fb9\u7684\u7f16\u53f7 */,nxt[max_m]/*\u5f53\u524d\u8fb9\u4e0b\u4e00\u6761\u8fb9\u7684\u7f16\u53f7 */;\nint dis[max_n];//\u5b58\u50a8\u677e\u5f1b\u7ed3\u679c \nint sum[max_n];//\u5224\u65ad\u8d1f\u6743\u56de\u8def \nbool vis[max_n]/*\u6807\u8bb0\u9876\u70b9\u662f\u5426\u5728\u961f\u5217\u4e2d*/,flag/*\u5224\u65ad\u8d1f\u6743\u56de\u8def */;\n\nvoid init()//\u521d\u59cb\u5316 \n{\n\tfor(int i=1;i<=n;i++)\n\t\tdis[i]=inf;\n\tdis[a]=0;\n\tfor(int i=1;i<=n;i++)\n\t\tfirst[i]=-1;\n\treturn;\n}\n\nvoid read()//\u8f93\u5165 \n{\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>u[i]>>v[i]>>w[i];\n\t\tnxt[i]=first[u[i]];//\u66f4\u65b0\u4e0b\u4e00\u6761\u8fb9 \n\t\tfirst[u[i]]=i;/*\u66f4\u65b0\u5f53\u524d\u9876\u70b9\u6240\u5bf9\u7684\u7b2c\u4e00\u6761\u8fb9*/ \n\t}\t\n\treturn;\n}\n\nvoid write()//\u8f93\u51fa \n{\n\tfor(int i=1;i<=n;i++)\n\t\tcout<<dis[i]<<\" \";\n\treturn;\n}\n\nint main()\n{\n\tcin>>n>>m>>a;\n\tinit();\n\tread();\n\tq.push(a);//\u5165\u961f \n\tvis[a]=true;//\u6807\u8bb0a\u5df2\u5165\u961f \n\twhile(!q.empty())//\u961f\u5217\u4e0d\u4e3a\u7a7a\u65f6\u5faa\u73af \n\t{\n\t\tloop1//\u904d\u5386\uff0c\u8be6\u89c1\u6700\u4e0a\u65b9\u7684\u88c5\u903c\u4ee3\u7801\n\t\t{\n\t\t\tif(dis[v[t]]>dis[u[t]]+w[t])/*\u5982\u679c\u677e\u5f1b\u6210\u529f*/ \n\t\t\t{\n\t\t\t\tdis[v[t]]=dis[u[t]]+w[t];/*\u5b58\u50a8\u677e\u5f1b\u540e\u7684\u503c */\n\t\t\t\tif(!vis[v[t]])//\u5982\u679c\u4e0d\u5728\u961f\u5217\u4e2d \n\t\t\t\t{\n\t\t\t\t\tq.push(v[t]);//\u5165\u961f \n\t\t\t\t\tvis[v[t]]=true;//\u6807\u8bb0 \n\t\t\t\t\tsum[v[t]]++;//\u8bb0\u5f55\u5165\u961f\u6b21\u6570 \n\t\t\t\t\t\u6613\u592b(sum[v[t]]>n)/*\u5982\u679c\u5165\u961f\u6b21\u6570\u5927\u4e8en,\u8bf4\u660e\u5b58\u5728\u8d1f\u6743\u56de\u8def */\n\t\t\t\t\t{\n\t\t\t\t\t\tflag=true;/*\u6807\u8bb0\u8d1f\u6743\u56de\u8def */\n\t\t\t\t\t\tbreak;/*\u4e0d\u5b58\u5728\u6700\u77ed\u8def\uff0c\u76f4\u63a5\u9000\u51fa */\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag) break;/*\u4e0d\u5b58\u5728\u6700\u77ed\u8def\uff0c\u76f4\u63a5\u9000\u51fa */\n\t\tvis[q.front()]=false;//\u53d6\u6d88\u961f\u9996\u7684\u6807\u8bb0 \n\t\tq.pop();//\u51fa\u961f\n\t}\n\tif(flag) cout<<\"-1\";/*\u6709\u8d1f\u6743\u56de\u8def\u5219\u8f93\u51fa-1(\u867d\u7136\u9898\u76ee\u6570\u636e\u4e2d\u6ca1\u6709) */\n\telse write();//\u8f93\u51fa\u677e\u5f1b\u540e\u7684dis\u6570\u7ec4 \n\tcout<<endl;\n\treturn \u96f6;\n}\n\n//\u9001\u4e0a\u6570\u636e\u4e00\u6ce2~ ^0^ \n\n/*\u4e00\u822c\u6570\u636e  \ninput:\n\n5 7 1\n\n1 2 2\n1 5 10\n2 3 3\n2 5 7\n3 4 4\n4 5 5\n5 3 6\n\noutput:0 2 5 9 9\n\n*/\n/*\u8d1f\u6743\u56de\u8def\u6784\u9020\u68c0\u6d4b  \ninput: \n\n6 6 1\n\n1 2 1\n2 3 -2\n3 4 -2\n4 5 -2\n5 2 -2\n4 6 1\n\noutput:-1\n \n*/\n```\n#### \u6ce8\uff1a\u4ee3\u7801\u601d\u8def\u6765\u81ea\u4e8e\u300a\u554a\u54c8\uff01\u7b97\u6cd5\u300b\u4e00\u4e66\uff0c\u4f5c\u8005  \u554a\u54c8\u78ca",
        "postTime": 1572582033,
        "uid": 241530,
        "name": "zhouyanyu321",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "\u6a21\u677f\n\u5355\u5143\u6700\u77ed\u8def\u4e00\u822c\u6709\u4e24\u79cd\u5199\u6cd5\n\nSPFA\u548cdijkstra\n\n\u4e2a\u4eba\u559c\u6b22\u540e\u8005\uff08\u867d\u7136\u597d\u50cf\u5199\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e0d\u600e\u4e48\u4f18\uff09\u3002\n\n\n\u4e00\u5f00\u59cb\u6211\u6ca1\u770b\u6570\u636e\uff0c\u88f8\u7684dij\u5c31\u62cd\u4e0a\u53bb\u4e86\u3002\n\n\u5d29\n70\ndijkstra\u9700\u8981\u5806\u4f18\u5316\n\n\u8fd9\u91cc\u4f7f\u7528STL\u4e00\u4e2a\u53ebpriority\\_queue\u7684\u795e(zhe)\u5947(xue)\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u91cc\u9762\u8dd1\u7684\u5c31\u662f\u4e00\u4e2a\u5806\u3002\n\n\u5b83\u652f\u6301\u7528struct\u4fee\u6539\u6392\u5e8f\u89c4\u5219\u3002\n\n\u8be6\u7ec6\u770b\u4ee3\u7801\u3002\n\n\n\u4e0b\u976270\u5206\u4ee3\u7801\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int inf=2147483647;\nstruct edge{\n    int to,next,s;\n}e[500005];\nint n,m,sta,mn;\nint head[10005];\nint dis[10005];\nbool vis[10005];\nvoid dijkstra(int sta){\n    for(int i=1;i<=n;i++){\n        dis[i]=inf;\n    }\n    dis[sta]=0;\n    int now;\n    for(int k=1;k<n;k++){\n        mn=inf;\n        for(int i=1;i<=n;i++){\n            if(!vis[i]&&dis[i]<mn){\n                now=i;\n                mn=dis[i];\n            }\n        }\n        vis[now]=1;\n        int c=head[now];\n        while(c){\n            int mu=e[c].to;\n            if(dis[mu]>dis[now]+e[c].s)dis[mu]=dis[now]+e[c].s;\n            c=e[c].next;\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&sta);\n    int u,v,c;\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&u,&v,&c);\n        e[i].to=v;\n        e[i].next=head[u];\n        e[i].s=c;\n        head[u]=i;\n    }\n//    dijkstra(sta);\n    for(int i=1;i<=n;i++){\n        printf(\"%d \",dis[i]);\n    }\n    return 0;\n}\n```\n\u5806\u4f18\u5316\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int inf=2147483647;\nstruct edge{\n    int to,next,s;\n}e[500005];\nstruct point{\n    int na,s;\n}dis[10005];\nstruct cmp1{\n    bool operator ()(point &a,point &b){\n        return a.s>b.s;\n    }\n};\npriority_queue<point,vector<point>,cmp1> q;\nint n,m,sta,mn;\nint head[10005];\nbool vis[10005];\nvoid dijkstra(int sta){\n    for(int i=1;i<=n;i++){\n        dis[i].na=i;\n        dis[i].s=inf;\n    }\n    dis[sta].s=0;\n    int now=0;\n    vis[0]=1;\n    q.push(dis[sta]);\n    for(int k=1;k<n;k++){\n        while(vis[now]){\n            now=q.top().na;\n            q.pop();\n        }\n        vis[now]=1;\n        int c=head[now];\n        while(c){\n            int mu=e[c].to;\n            if(dis[mu].s>dis[now].s+e[c].s){\n                dis[mu].s=dis[now].s+e[c].s;\n                q.push(dis[mu]);\n            }\n            c=e[c].next;\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&sta);\n    int u,v,c;\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&u,&v,&c);\n        e[i].to=v;\n        e[i].next=head[u];\n        e[i].s=c;\n        head[u]=i;\n    }\n//    dijkstra(sta);\n    for(int i=1;i<=n;i++){\n        printf(\"%d \",dis[i].s);\n    }\n    return 0;\n}\n```\nSPFA\u611f\u89c9\u975e\u5e38\u7b80\u5355\u53c8\u597d\u61c2\n\u5f00\u4e00\u4e2a\u961f\u5217\uff0c\u5148\u5165\u5148\u51fa\uff0c\u4e0d\u65ad\u62ff\u961f\u5934\u7684\u5143\u7d20\u677e\u5f1b\uff0c\u677e\u5f1b\u6210\u529f\u7684\u8bdd\u628a\u5bf9\u8c61\u4e22\u8fdb\u961f\u5217\uff08\u5728\u961f\u91cc\u5c31\u7701\u7565\u8fdb\u961f\u64cd\u4f5c\uff09\n\n\u6548\u7387\u8ff7\u4e4b\u9ad8\n\n\n100\u5206\u4ee3\u7801\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#define inf 2147483647\nusing namespace std;\nstruct edge{\n    int to,next,s;\n}e[500005];\nint h[10005],tot;\nint n,m,st;\nint dis[10005];\nint q[10000005],tail,head;\nbool inq[10005];\nvoid add(int u,int v,int s){\n    e[++tot].to=v;\n    e[tot].next=h[u];\n    e[tot].s=s;\n    h[u]=tot;\n}\nvoid SPFA(){\n    for(int i=1;i<=n;i++){\n        dis[i]=inf;\n    }\n    dis[st]=0;\n    q[tail++]=st;\n    inq[st]=1;\n    while(head<tail){\n        int u=q[head++];\n        inq[u]=0;\n        for(int c=h[u];c;c=e[c].next){\n            int v=e[c].to;\n            if(dis[u]+e[c].s<dis[v]){\n                dis[v]=dis[u]+e[c].s;\n                if(!inq[v]){\n                    q[tail++]=v;\n                    inq[v]=1;\n                }\n            }\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&st);\n    for(int i=1;i<=m;i++){\n        int u,v,s;\n        scanf(\"%d%d%d\",&u,&v,&s);\n        add(u,v,s);\n    }\n//    SPFA();\n    for(int i=1;i<=n;i++){\n        printf(\"%d \",dis[i]);\n    }\n    return 0;\n}\n```\n\u987a\u4fbf\nSPFA\u771f\u8ff7\u2026\u2026\n",
        "postTime": 1494507732,
        "uid": 22023,
        "name": "litangxingxing",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "##\u4ec0\u4e48\u662f\u524d\u5411\u661f\n\n\u524d\u5411\u661f\u662f\u4e00\u79cd\u6548\u7387\u9ad8\uff0c\u4f7f\u7528\u7b80\u4fbf\u7684\u5b58\u56fe\u65b9\u5f0f\uff0c\u548c\u5176\u4ed6\u5927\u90e8\u5206\u65b9\u5f0f\u6bd4\uff0c\u6709\u7740\u5f88\u5927\u7684\u4f18\u52bf\uff1a\n\n\u25cf \u5bf9\u4e8e\u52a8\u6001\u6570\u7ec4\uff0c\u4e0d\u7528\u4f7f\u7528\u9ebb\u70e6\u7684STL\u548c\u961f\u5217\n\n\u25cf \u5bf9\u4e8e\u90bb\u63a5\u94fe\u8868\uff0c\u4e0d\u7528\u64cd\u4f5c\u6307\u9488\n\n\u25cf \u5bf9\u4e8e\u90bb\u63a5\u77e9\u9635\uff0c\u6548\u7387\u5f88\u9ad8\n\n\n##\u57fa\u672c\u5b9e\u73b0\n\n\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u91cc\u9762\u7684\u6210\u5458\u53ef\u4ee5\u5b58\u50a8\u8d77\u70b9\uff0c\u7ec8\u70b9\u548c\u6743\u503c\uff0c\u8981\u6709\u4e00\u4e2a\u6570\u7ec4\u7ef4\u62a4\u6bcf\u70b9\u8fde\u51fa\u53bb\u7684\u8fb9\u7684\u8d77\u70b9\u3002\n\n\n##\u94fe\u5f0f\u524d\u5411\u661f\n\n\n#\u6784\u9020\n\n\u4e0a\u9762\u7684\u524d\u5411\u661f\u662f\u9700\u8981\u6392\u5e8f\u7684\uff0c\u4e8b\u5b9e\u4e0a\u5927\u90e8\u5206\u65f6\u95f4\u6211\u4eec\u4f7f\u7528\u7684\u90fd\u662f\u94fe\u5f0f\u524d\u5411\u661f\u3002\u94fe\u5f0f\u524d\u5411\u661f\u5c31\u662f\u6570\u7ec4\u6a21\u62df\u94fe\u8868\uff0c\u5176\u57fa\u672c\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```cpp\nstruct edge\n{\n     int next;//\u8bbei\u4e3a\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\uff0c\u5b83\u6307\u5411\u4ee5\u8fd9\u6761\u8fb9\u4e3a\u8d77\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\n     int to;//\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\n     int w;//\u6743\u503c\n};\n```\n\u8fd8\u6709\u4e00\u4e2ahead\u6570\u7ec4\u7528\u6765\u7ef4\u62a4\u4ee5i\u4e3a\u8d77\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u91cc\u9762\u521d\u59cb\u5316\u4e3a\u5168\u8d1f\u4e00\u3002\n\n\n#\u52a0\u8fb9\n\n\u524d\u5411\u661f\uff0c\u987e\u540d\u601d\u4e49\uff0c\u6211\u4eec\u5e94\u8be5\u8ba9\u540e\u9762\u7684\u8fb9\u6307\u5411\u524d\u4e00\u6761\u8fb9\uff0c\u8fd9\u53ef\u80fd\u6709\u70b9\u4e0d\u76f4\u89c2\u3002\u4e8b\u5b9e\u4e0a\uff0c\u524d\u5411\u661f\u5b58\u8fb9\u662f\u5012\u7740\u5b58\u7684\u3002\u5f53\u52a0\u5165\u65b0\u7684\u8fb9\uff0c\u8fd9\u6761\u8fb9\u5c31\u662f\u7b2c\u4e00\u6761\u8fb9\uff0c\u540c\u65f6\u94fe\u63a5\u5230\u4e4b\u524d\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u56e0\u6b64\u904d\u5386\u65f6\u5b9e\u9645\u4e0a\u662f\u5012\u7740\u904d\u5386\u7684\u3002\n\n```cpp\nvoid add(int from;int to;int w)\n{\nedge[cut].w=w;\nedge[cut].to=to;\nedge[cut].next=head[from];\nhead[from]=cut;\ncut++;\n};\n```\n\n#\u904d\u5386\n\n\u4ece\u7b2c\u4e00\u6761\u8fb9\u5f00\u59cb\uff0ce[k].[next]\u4e2d\u5373\u4e3a\u4e0b\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u4ece\u800c\u904d\u5386\u4ee5sp\u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8fb9\uff0c\u5f53\u8fb9\u7684\u7f16\u53f7\u4e3a-1\u65f6\u5373\u8df3\u51fa\u5faa\u73af\u3002\n\n```cpp\nfor(k=head[sp];k!=-1;k=e[k].next)//\u6e90\u70b9\u4e3asp\n```\n\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#define MAXN 10005\n#define MAXM 500005\n#define MAXI 2147483647\n\nusing namespace std;\n\nstruct edge{\n    int from;//\u4ece\u54ea\u6761\u8fb9\u51fa\u53d1\n    int to;//\u5230\u54ea\u6761\u8fb9\n    int next;//\u4e0a\u4e00\u6761\u540c\u8d77\u70b9\u7684\u8fb9\n    int w;//\u6743\u503c\n};\n\nvoid add(int u,int v,int w);\nvoid spfa();\n\nedge e[MAXM];\nint head[MAXM];\nint n,m,s,fi,gi,wi,i,cut=0;\nint map[MAXN][MAXN];\nint dis[MAXN];\nint v[MAXN];\nint push[500005];\n\nint main(){\n    cin>>n>>m>>s;\n    \n    for(i=1;i<=m;i++)\n        head[i]=-1;\n    \n    for(i=1;i<=m;i++){\n        cin>>fi>>wi>>gi;\n        add(fi,wi,gi);       \n    }\n    \n    for(i=1;i<=n;i++){\n        dis[i]=MAXI;    \n    }\n       \n    dis[s]=0;\n    \n    spfa();\n    \n    for(i=1;i<=n;i++){\n        cout<<dis[i]<<' ';\n    }\n    return 0;\n}\n\nvoid spfa(){\n    int k,j,h,t,sp;\n\n    t=1;\n    h=0;\n    v[s]=1;\n    push[1]=s;\n    \n    while(h<t){\n        h++;\n        sp=push[h];\n        v[sp]=0;\n        \n        for(k=head[sp];k!=-1;k=e[k].next){//\u524d\u5411\u661f\u904d\u5386\uff0ce[k].to\u7b49\u4ef7\u4e8e\u90bb\u63a5\u77e9\u9635\u7684map[sp][k]\n            if(dis[e[k].to]>e[k].w+dis[sp]){\n                dis[e[k].to]=e[k].w+dis[sp];\n                if(v[e[k].to]==0){\n                    t++;\n                    v[e[k].to]=1;\n                    push[t]=e[k].to;\n                }\n            }        \n        }\n    }\n}\nvoid add(int u,int v,int w){\n    e[cut].w=w;\n    e[cut].from=u;\n    e[cut].to=v;\n    e[cut].next=head[u];//\u4e0a\u4e00\u6761\u8fb9\u662f\u7b2c\u4e00\u6761\u8fb9\n    head[u]=cut;//\u628a\u8fd9\u6761\u8fb9\u53d8\u6210\u7b2c\u4e00\u6761\u8fb9\n    cut++;\n}\n```",
        "postTime": 1505456910,
        "uid": 7201,
        "name": "median_dxz",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u56e0\u4e3ac++\u6709\u4eba\u4ea4\u4e86\u9898\u89e3\u6240\u4ee5\u8f6c\u6210pas\u7ed9pas\u515a\u5e26\u70b9\u798f\u5229\n\n\u8fd9\u4e48\u88f8\u7684\u6a21\u677fsa\n\n```cpp\n        for i:=1 to v do\n                first[i]:=-1;          //\u521d\u59cb\u5316\nfor i:=1 to e do\n        begin\n                read(s[i],d[i],w[i]);\n                next[i]:=first[s[i]];              //\u8fd9\u91cc\u6211\u7528\u7684\u662f\u90bb\u63a5\u8868\uff0c\u56e0\u4e3a\u90bb\u63a5\u77e9\u9635\u4f1a\u7206QAQ\n                first[s[i]]:=i;\n        end;\n        for i:=0 to v do\n                dis[i]:=maxlongint;                  //\u6211\u5927pa\u597d\u54c9\uff0cmaxlongint\u5c31\u662f2147\u4ec0\u4e48\u6765\u7740\n        q[1]:=ss;           //\u961f\u5217\u521d\u59cb\u5316\n        h:=1;\n        t:=1;\n        book[ss]:=1;     dis[ss]:=0;        \n        inc(t);\n        while (h<t) do\n        begin\n                tmp:=q[h];         //\u961f\u5217\u91cc\u5b58\u7684\u662f\u8282\u70b9\u7f16\u53f7\n                k:=first[tmp];\n                while (k<>-1) do\n                begin\n                        if (dis[d[k]]>dis[s[k]]+w[k]) then           //\u628atmp\u7684\u6240\u6709\u51fa\u8fb9\u904d\u5386\u6389\n                        begin\n                                dis[d[k]]:=dis[s[k]]+w[k];         //\u66f4\u8feddis\u7684\u503c\n                                if book[d[k]]=0 then\n                                begin\n                                        q[t]:=d[k];\n                                        inc(t);                     //\u5165\u961f\n                                        book[d[k]]:=1;           //\u6807\u8bb0\n                                end;\n                        end;\n                        k:=next[k];              //\u627e\u4e0b\u6761\u8fb9\n                end;\n                inc(h);          //\u51fa\u961f\n                book[tmp]:=0;        \n        end;\n//\u6838\u5fc3\u4ee3\u780123\n```",
        "postTime": 1476276470,
        "uid": 9087,
        "name": "fl_334",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7528 python \u7565\u5751\uff0ccpp \u7528 Dijkstra \u5c31\u53ef\u4ee5\uff0cpython \u5199 Dijkstra \u5c31\u5f97\u7528\u5806\u4f18\u5316\u3002\r\n\r\n\u5f53\u7136\uff0c\u5199\u5b8c\u4e86 P4779 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fc7\uff0c\u4e0d\u4e8f~\r\n\r\n\u540c\u65f6\uff0c\u8bfb\u5165\u4e5f\u9700\u8981\u7528 `sys.stdin.readline()` \u6765\u52a0\u901f\u8bfb\u5165\uff0c\u5927\u6982\u80fd\u52a0\u901f 30% - 60%\u3002\r\n\r\n\u53e6\u5916\u8fd8\u6709\u4e2a\u4f18\u5316\u65b9\u6cd5\u662f\u4f7f\u7528 pypy3\uff0c\u8fd9\u9053\u9898\u5dee\u522b\u4e0d\u5927\uff0c\u6709\u7684\u9898\u5199\u4e0d\u51fa\u6765\u53ef\u4ee5\u8bd5\u8bd5\uff0c\u901f\u5ea6\u5927\u6982\u80fd\u52a0\u901f 30% - 60%\u3002\r\n\r\n\r\n```python\r\n\"\"\"\r\n\u8fd9\u9898\u4e0d\u8981\u6c42\u8def\u7ebf, \u6240\u4ee5\u4e0d\u9700\u8981\u5b58\u50a8\u524d\u9a71\u7ed3\u70b9, \u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u4f7f\u7528\u4e8c\u7ef4\u5217\u8868, \u5e76\u4e14\u4f7f\u7528\u5806\u6392\u5e8f\u4f18\u5316, \u9700\u8981\u5c06\u8ddd\u79bb\u653e\u524d\u8fb9\r\n\"\"\"\r\n\r\nimport heapq\r\nimport sys\r\nimport time\r\n\r\n# t = time.time()\r\n# inf = float('inf')\r\ninf = 2 ** 31 - 1  # \u9898\u76ee\u89c4\u5b9a\u4e86\u5177\u4f53\u6570\u503c, \u4e0d\u80fd\u7528\u4e0a\u65b9\u65e0\u7a77\u5927\r\n\r\ndef dijkstra(start, g):  # 1, {1: [(2, 10), (4, 8)], 2: [(5, 5), ], ...}\r\n    \"\"\"\r\n    \u7ed9\u5b9a\u8d77\u59cb\u70b9 start \u548c\u56fe g, \u6c42\u8be5\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\r\n    return: 0 6 4 1\r\n    \"\"\"\r\n\r\n    # \u9700\u8981\u4fdd\u5b58\u7684\u4fe1\u606f\u53ca\u7ed3\u6784: [0, \u8ddd\u79bbs->1, \u8ddd\u79bbs->2, ...]\r\n    dis = [inf] * 10010\r\n    dis[0], dis[start] = 0, 0\r\n\r\n    visited = [False] * 10010  # \u7f16\u53f7\u57fa\u672c\u8fde\u7eed, \u7528bool\u5217\u8868\u6bd4set\u8fd8\u5feb20%\r\n    visited[0] = True\r\n\r\n    q = []\r\n    heapq.heappush(q, [0, start])\r\n\r\n    # bfs \u5f00\u59cb\r\n    while q:\r\n        # \u5728**routes\u4e2d\u6240\u6709\u672a\u8bbf\u95ee\u8fc7\u7684\u70b9**\u4e2d\u627e\u6700\u5c0f\u503c, \u51b3\u5b9a\u4e0b\u4e00\u4e2a\u70b9, \u53ef\u4ee5\u7528\u5806\u4f18\u5316\r\n        min_weight, current = heapq.heappop(q)\r\n        if visited[current]:\r\n            continue\r\n\r\n        visited[current] = True\r\n\r\n        # \u627e\u5230\u90bb\u63a5\u9876\u70b9\r\n        adj = g[current]  # adj = g[1] = [(3, 10), (5, 30), (6, 100)]\r\n\r\n        # \u6839\u636e\u5f53\u524d\u70b9\u5230\u90bb\u63a5\u70b9\u7684\u8ddd\u79bb, \u66f4\u65b0\u8def\u5f84\u5217\u8868\r\n        for vertex, weight in adj:\r\n            min_weight_from_start = dis[current] + weight\r\n            if min_weight_from_start < dis[vertex]:     # dijkstra \u6838\u5fc3\r\n                dis[vertex] = min_weight_from_start  # 3: 10\r\n\r\n                # \u5982\u679c vertex \u6ca1\u6709\u8bbf\u95ee\u8fc7, \u5c31\u628a\u5f53\u524d\u6700\u5c0f\u6743\u503c\u548c\u4f4d\u7f6e\u52a0\u8fdb q\r\n                if not visited[vertex]:\r\n                    heapq.heappush(q, [min_weight_from_start, vertex])\r\n\r\n    return dis\r\n\r\n\r\nn, m, s = map(int, sys.stdin.readline().split())\r\ng = {i: [] for i in range(1, n+1)}\r\nfor i in range(m):\r\n    u, v, w = map(int, sys.stdin.readline().split())\r\n    g[u].append((v, w))\r\n\r\nroutes = dijkstra(s, g)\r\n\r\nprint(*routes[1:n+1])  # \u7528*\u53ef\u5c06\u5e8f\u5217\u89e3\u5305, \u5143\u7d20\u4e4b\u95f4\u81ea\u52a8\u52a0\u7a7a\u683c\r\n```",
        "postTime": 1634297126,
        "uid": 252245,
        "name": "bowen404",
        "ccfLevel": 0,
        "title": "P3371 \u7684 python\u89e3\u6cd5"
    },
    {
        "content": "## \u53d1\u73b0\u9898\u89e3\u4e2d\u7adf\u7136\u6ca1\u6709SPFA\u7684SLF\u4f18\u5316\n\n## \u6211\u5c31\u6765\u5199\u4e00\u4e2a\n\n## SPFA\u7b97\u6cd5\u6709\u4e24\u4e2a\u5c0f\u4f18\u5316\uff0c\u867d\u7136\u6548\u7387\u63d0\u5347\u4e0d\u591a\uff0c\u4f46\u8fd8\u662f\u6709\u7684\n\n## \u4e00\u79cd\u53ebSLF \u53e6\u4e00\u79cd\u53ebLLL\n\n## \u4e0d\u8fc7\u6211\u66f4\u559c\u6b22SLF\u4e00\u70b9 ~~\uff08SLF\u597d\u5199\uff09~~\n\n### \u5173\u4e8eSLF + LLL \u4f18\u5316\u7248\u672c\n\n## [\u63d0\u4ea4\u8bb0\u5f55(\u5438\u4e86\u6240\u6709\u6c27\u6c14)](https://www.luogu.org/record/22890685)\n\n## \u597d\u4e86\u8a00\u5f52\u6b63\u4f20\n\n## SLF\uff08Small Label First\uff09\u4f18\u5316\n\n## \u601d\u8def:\u7528deque\uff0c\u5bf9\u4e00\u4e2a\u8981\u52a0\u5165\u961f\u5217\u7684\u70b9u\uff0c\u5982\u679cdis[u] < dis[v]\uff0c\u90a3\u4e48\u5c31\u52a0\u5165\u5230\u961f\u9996\u5143\u7d20\uff0c\u5426\u5219\u52a0\u5165\u5230\u961f\u5c3e\u3002\n\n```\n#include <bits/stdc++.h>\n#define maxn 100001\nusing namespace std;\nint cnt,head[maxn],n,m,dis[maxn],s;\nbool vis[maxn];\nstruct node{\n\tint v,c,nxt;\n}e[maxn];\ninline void add_edge(int u,int v,int c){\n\te[++cnt].v = v;\n\te[cnt].c = c;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\nvoid SpfaSLF(){\n\tdeque <int> q;\n\tfor (int i = 1;i <= n;++i)dis[i] = INT_MAX;\n    q.push_back(s);vis[s] = true;dis[s] = 0;\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop_front();\n        vis[u] = false;\n        for (int i = head[u]; i; i = e[i].nxt) {\n        \tint v = e[i].v;\n            if (dis[v] > dis[u] + e[i].c) {\n                dis[v] = dis[u] + e[i].c;\n                if (!vis[v]) {\n                    if (dis[v] <= dis[u]) q.push_front(v);\n                    else q.push_back(v);\n                    vis[v] = true;\n                }\n            }\n        }\n    }\t\n}\nint main()\n{\n    cin >> n >> m >> s;;\n    for (int i = 1;i <= m;++i){\n    \tint u,v,c;\n    \tcin >> u >> v >> c;\n    \tadd_edge(u,v,c);\n    }\n   \tSpfaSLF();\n   \tfor (int i = 1;i <= n;++i)\n    cout << dis[i]<<\" \";\n}\n```",
        "postTime": 1566003766,
        "uid": 99716,
        "name": "_Grey",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3371 \u3010\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "# \u4e00\u4e2astory\uff1a\n2018.10.3\uff0c\u665a\u4e0a\uff0c\u5728\u4e0e\u6211\u6821\u662f\u7ade\u4e89\u5173\u7cfb\u7684\u5b66\u6821\u7684\u673a\u623f\uff08\u53bb\u4e00\u8d77\u96c6\u8bad\uff09\u8bad\u7ec3\u3002\n\n\n\u6211\uff1a\uff08\u9893\uff09\n\n\u5bf9\u65b9\u6559\u7ec3\uff1a\uff08\u8d70\u8fc7\u6765\uff09\n\n\u6211\uff1a\uff08\u8d76\u5feb\u5f00\u59cb\u5047\u88c5\u7814\u7a76SPFA\uff09\n\n\u5bf9\u65b9\u6559\u7ec3\uff1a\u8fd9\u662f\uff1f\u6700\u77ed\u8def\uff1f\n\n\u6211\uff1a\u662f\u554a\u662f\u554a\uff08\u75af\u72c2\u63a9\u9970\u5c34\u5c2c\uff09\n\n\u5bf9\u65b9\uff1a\u8fd9\u662fSPFA?\n\n\u6211\uff1a\u662f\u554a\u662f\u554a\uff08\u75af\u72c2\u63a9\u9970\u5c34\u5c2c\uff09\n\n\u5bf9\u65b9\uff1a\u55ef\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5199dijstra\uff1f\n\n\u6211\uff1a\u56e0\u4e3a.\u55ef...\u8fd9\u4e2a\uff0c\u56e0\u4e3a...SPFA\u597d\u5199\uff01~~\uff08\u96fe\uff09~~\n\n\u5bf9\u65b9\uff1adijkstra\u4e5f\u5f88\u597d\u5199\u554a\n\n\u6211\uff1a\u8fd9\u4e2a..\u56e0\u4e3a......SPFA\u597d\u7528\u554a\uff0c\u554a\u5475\u5475\u5475\u5475~~~~\n\n\u5bf9\u65b9\uff1a\u55ef?\u53ef\u662f\u5b83\u4f1a\u88ab\u5361\u554a\uff0c\u6211\u4ece\u6765\u53ea\u5199dijkstra\u3002\n\n\u6211\uff1a\u554a\u54c8\u54c8\u6216\u6216\u54c8\u54c8\u54c8\uff0c\u597d\u5427\n\n#### \u4e8e\u662f\u6211\u7814\u7a76\u4e86\u4e00\u4e0bdijkstra\uff0c\u54e6\u54e6\u54e6\uff0c\u9664\u4e86\u4e0d\u80fd\u5904\u7406\u8d1f\u6743\uff0c\u8fd8\u662f\u5f88\u597d\u7528\u7684\uff0c~~\u6559\u7ec3\u6ca1\u6709\u5751\u6211~~\n##### \u5728\u8fd9\u91cc\u53d1\u4e00\u4e0bSTL\u5806\u4f18\u5316\u7684dijkstra\uff0c\u56e0\u4e3a\u7528\u8d1f\u503c\u5904\u7406\uff0c\u6240\u4ee5\u751a\u81f3\u4e0d\u7528\u5199\u6bd4\u8f83\u51fd\u6570\uff0c\u4ee3\u7801\u81ea\u7136\u6bd4\u4e00\u822cSTL\u8fd8\u8981\u7b80\u6d01\uff0c666\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#include<stack>\n#include<set>\n#include<map>\n#include<cmath>\n#include<list>\n#include<cstring>\n#include <climits>//bei\nusing namespace std;\npriority_queue< pair<int,int> > q;\nlong long cnt=0,dis[1000000],vis[1000000],hand[1000000],n,m,g;\nstruct aa//\u9759\u6001\u90bb\u63a5\u8868\uff0c\u597d\u5199\u53c8\u4e0d\u5360\u592a\u591a\u7a7a\u95f4\uff0c\u62b1\u8d70\u4e86\n{\n\tint to,next,w;\n};\naa xx[10000000];\ninline void djstl()\n{\n\tfor(int i=1;i<=n;i++)\n\t  dis[i]=2147483647;\n\tq.push(make_pair(0,g));dis[g]=0;\n\twhile(!q.empty())\n\t{\n\t\tint now=q.top().second;\n\t\tq.pop();\n\t\tif(vis[now]==1) continue;\n\t\tvis[now]=1;\n\t\tfor(int i=hand[now];i;i=xx[i].next)\n\t\t{\n\t\t\tint v=xx[i].to;\n\t\t\tif(dis[v]>dis[now]+xx[i].w)\n\t\t\t{\n\t\t\t\tdis[v]=dis[now]+xx[i].w;\n\t\t\t\tq.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n\t\n}\nint main()\n{\n\tcin>>n>>m>>g;\n\tfor(int i=1;i<=m;i++)//\u5904\u7406\u8fb9\uff0c\u8bfb\u5165\u9759\u6001\u90bb\u63a5\u8868\n\t{\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\txx[++cnt].to=b;\n\t\txx[cnt].next=hand[a];//\u5b58\u7684\u662f\u4e0a\u4e00\u6761\u8fb9\n\t\txx[cnt].w=c;\n\t\thand[a]=cnt;\n\t}\n\tdjstl();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(g==i) cout<<0<<\" \";\n\t\telse cout<<dis[i]<<\" \";\n\t}\n\tcout<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1540267242,
        "uid": 29384,
        "name": "KING__Arthur",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "emm\u6307\u9488\u8fd9\u4e48\u597d\u7528\u4e3a\u4ec0\u4e48\u6ca1\u6709\u4eba\u7528\u5462\uff08\u6ed1\u7a3d\n\n\u6307\u9488\u90bb\u63a5\u94fe\u8868+\u5806\u4f18\u5316Dijkstra\u53ea\u8dd1\u4e86180ms\n\n\u90a3\u6211\u5c31\u6765\u8865\u4e00\u7bc7**\u6307\u9488\u90bb\u63a5\u94fe\u8868+\u5806\u4f18\u5316Dijkstra+IO\u4f18\u5316**\u7684\u9898\u89e3\u5427\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n/*IO\u4f18\u5316*/ \n#include <cctype>\n#define rc register char\n#define ri register int\nchar ss[1<<17],*A=ss,*B=ss;\ninline char gc() { return A==B&&(B=(A=ss)+fread(ss,1,1<<17,stdin),A==B)?EOF:*A++; }\ntemplate<class T>inline void read(T& x) {\n    rc c;ri y=1;while(c=gc(),!isdigit(c))if(c=='-')y=-1;x=c^48;\n    while(c=gc(),isdigit(c))x=x*10+(c^48);x*=y;\n}\nchar sr[1<<20],z[20];int C=-1,Z;\ntemplate<class T>inline void wer(T x){\n    ri y=0;if(x<0)y=1,x=-x;\n    while(z[++Z]=x%10+'0',x/=10);if(y)z[++Z]='-';\n    while(sr[++C]=z[Z],--Z);sr[++C]=' ';\n}\n/*\u7ed3\u675f*/\nusing namespace std;\nconst int maxn = 1e4 + 10;\nconst int inf = 0x6ffffff;\nstruct node {\n    int v,w;\n    node* next;\n    node(int to,int dist,node* n): v(to),w(dist),next(n) {}\n}*adj[maxn];//\u90bb\u63a5\u94fe\u8868\u5b58\u56fe\nstruct po {\n    int d,u;\n    po(int a,int b): d(a),u(b) {}\n    int operator < (const po& rhs) const {\n        return d>rhs.d;\n    }\n};\nint vis[maxn],d[maxn];\n\nint main() {\n    int n,m,s;\n    int u,v,w;\n    read(n);read(m);read(s);\n    for(int i=0;i<m;++i) {\n        read(u);read(v);read(w);\n        adj[u]=new node(v,w,adj[u]);\n    }\n    /*\u4e3b\u7b97\u6cd5*/\n    for(int i=1;i<=n;++i) d[i]=inf;\n    d[s]=0;\n    priority_queue<po> q;//\u4f18\u5148\u961f\u5217\n    q.push(po(0,s));\n    while(!q.empty()) {\n        po buf=q.top();q.pop();\n        if(vis[buf.u]) continue;\n        vis[buf.u]=1;\n        for(node* i=adj[buf.u];i!=NULL;i=i->next) {\n            if(d[i->v]>d[buf.u]+i->w) {\n                d[i->v]=d[buf.u]+i->w;\n                q.push(po(d[i->v],i->v));\n            }\n        }\n    }\n    /*\u7ed3\u675f*/\n    for(int i=1;i<=n;++i) {\n        if(d[i]!=inf) wer(d[i]);\n        else wer(2147483647);\n    }\n    fwrite(sr,1,C+1,stdout);\n    return 0;\n}\n```\n~~\u54c7IO\u4f18\u5316\u597d\u50cf\u5199\u7684\u6bd4\u4e3b\u7b97\u6cd5\u90fd\u957f\u8bf6~~\n\n\u4e0d\u7ba1\u4e86\u53ea\u8981\u6211\u4eec\u8fc7\u4e86\u5c31\u597d",
        "postTime": 1522392390,
        "uid": 47055,
        "name": "ikka",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "SPFA!!\n\u7528\u4e8c\u7ef4\u6570\u7ec4\u4f1a\u7206\uff01\uff01\uff01\u6570\u636e\u592a\u5927\u4e86\uff0c\u53ef\u4ee5\u7528\u52a8\u6001\u6570\u7ec4+\u7ed3\u6784\u4f53\u3002\n\n            \n```cpp\n#include<cstdio>\n#include<vector>\nusing namespace std;\n//int pre[19999];\nint v,u;\nbool flag[19999];//\u84dd\u767d\u70b9\nint du[19990009];//\u961f\u5217\nstruct turr{\n    int to;//\u90bb\u63a5\u70b9\n    int cost;//\u8fb9\u6743\n};\nvector <turr> w[10009];\nint dis[19999];\nint n;\nint m;\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    scanf(\"%d\",&v);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n            turr e1;\n            e1.to=y;\n            e1.cost=z;\n            w[x].push_back(e1);//\u653e\u5165\u52a8\u6001\u6570\u7ec4\n    }\n    flag[v]=1;\n    for(int i=1;i<=n;i++)\n      dis[i]=2147483647;\n    du[1]=v;dis[v]=0;\n    int head=0,tail=1;//\u521d\u59cb\u5316\n    do\n    {\n        head++;\n        int o=du[head];\n        flag[o]=0;\n        for(int i=0;i<w[o].size();i++)\n        {\n            int t=w[o][i].to;\n            if(dis[t]>dis[o]+w[o][i].cost)\n            {\n                dis[t]=dis[o]+w[o][i].cost;\n//                pre[t]=o;\n                if(!flag[t])\n                {\n                    flag[t]=1;\n                    du[++tail]=t;\n                }\n            }\n        }\n    }\n    while(head<tail);//spfa\u7b97\u6cd5\n    for(int i=1;i<=n;i++)\n    printf(\"%d \",dis[i]);\n    return 0;\n}\n```",
        "postTime": 1483154649,
        "uid": 18371,
        "name": "alpq010815",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u554a\u2122\u662f\u6709\u5411\u56fe\u554a\u3002\n\n2\u79cd\u65b9\u6cd5\u3002\n\n\u5177\u4f53\u89c1\u6ce8\u91ca\n\nSPFA\uff1a\n\n```cpp\n/*\nID: ylx14271\nPROG: spfa\nLANG: C++     \n*/\n#include<set>  \n#include<map>  \n#include<list>  \n#include<queue>  \n#include<stack>  \n#include<string>  \n#include<math.h>  \n#include<time.h>  \n#include<vector>  \n#include<bitset>  \n#include<memory>  \n#include<utility>  \n#include<stdio.h>  \n#include<sstream>  \n#include<iostream>  \n#include<stdlib.h>  \n#include<string.h>  \n#include<algorithm> \n#define LL unsigned long long   \nusing namespace std;\nint n,m,p,i;//p:\u51fa\u53d1\u70b9\u5e8f\u53f7 \nint xx,yy,zz;\nvector<int> f[10001];//\u5b58\u7f16\u53f7 \nvector<int> fs[10001];//\u5b58\u957f\u5ea6 \nint fl[10001];\nint q[500100];\nint l,r,s; \nint d[10001];\nint flag[10001];\nvoid in(int xxx,int yyy,int zzz)//\u90bb\u63a5\u8868 \n{\n    fl[xxx]++;\n    f[xxx].push_back(yyy);\n    fs[xxx].push_back(zzz);\n    return;\n}\nint main() \n{\n    freopen(\"1.in\",\"r\",stdin);\n    freopen(\"1.out\",\"w\",stdout); \n    scanf(\"%d%d%d\",&n,&m,&s);\n    for (i=1;i<=m;i++)//\u8bfb\u8fb9 \n    {\n        scanf(\"%d%d%d\",&xx,&yy,&zz); \n        in(xx,yy,zz);//\u63d2\u5165\u8fb9 \n    }\n    l=0;r=1;//\u70b9s\u5165\u961f \n    q[1]=s;\n    flag[s]=1;\n    for (i=1;i<=n;i++)//\u8d4b\u521d\u503c \n    {\n        d[i]=2000003647;\n    }\n    d[s]=0;\n    while (l!=r)\n    {\n        l=l%10000+1;//\u51fa\u961f\u3002 \n        flag[q[l]]=0;//\u53bb\u6807\u8bb0\uff08flag\u6570\u7ec4\u6807\u8bb0\u8be5\u70b9\u662f\u5426\u5728\u961f\u5217\u4e2d \n        for (i=0;i<fl[q[l]];i++)\n        {\n            if (d[q[l]]+fs[q[l]][i]<d[f[q[l]][i]]||(d[f[q[l]][i]]==2000003647))//\u677e\u5f1b\u64cd\u4f5c \n            {\n                if (flag[f[q[l]][i]]==0)//\u6ca1\u5728\u961f\u5217\u4e2d \n                {\n                    r=r%10000+1;//\u5165\u961f\n                    q[r]=f[q[l]][i];\n                    flag[f[q[l]][i]]=1;\n                }\n                d[f[q[l]][i]]=d[q[l]]+fs[q[l]][i];//\u677e\u5f1b\u64cd\u4f5c \n            }\n        }\n    } \n    for (i=1;i<=n;i++)//\u8f93\u51fa \n    if (d[i]==2000003647) printf(\"2147483647 \"); else \n    printf(\"%d \",d[i]);\n    return 0;\n}\n```\nDijkstra\u8fea\u6770\u65af\u7279\u62c9+\u5806\u4f18\u5316\n\n```cpp\n#include<vector>\n#include<map>\n#include<queue>\n#include<algorithm>\n#include<set>\n#include<iostream>\n#include<cstdio>\n#include<list>\n#include<string>\n#include<cmath>\n#include<cstring>\n#include<stack>\nusing namespace std;\nstruct ha//\u5c0f\u6839\u5806\n{\n    int x; \n    int d;//\u8282\u70b9\u7f16\u53f7 \n    bool operator < (const ha &a) const \n    {\n        return x>a.x;\n    }\n}; \nstruct haha//\u5c0f\u6839\u5806\n{\n    int x; \n    int d;//\u8282\u70b9\u7f16\u53f7 \n}; \nha e;\nhaha ee;\nint d[1000010];\npriority_queue <ha> q;\nint n,m,s,xx,yy,zz,i;\nvector<haha> a[1000000];\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);\n    freopen(\"1.out\",\"w\",stdout);\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for (i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&xx,&yy,&zz);\n        ee.d=yy;\n        ee.x=zz;\n        a[xx].push_back(ee);\n    }\n    for (i=1;i<=n;i++) d[i]=2000003647;\n    e.d=s;\n    e.x=0; \n    d[s]=0;\n    q.push(e);//\u5165\u961f \n    while (!q.empty())//\u961f\u5217\u975e\u7a7a \n    {\n        e=q.top();q.pop();//\u51fa\u961f \n        int v=e.d;//\u53d6\u51fa\u8282\u70b9\u7f16\u53f7 \n        int d1=e.x;\n        if (d[v]<d1) continue;//\u8bf4\u660e\u5728\u8fd9\u4e2a\u70b9\u518d\u6b64\u4e4b\u540e\u53c8\u5165\u961f\u4e86\n        //\u6b64\u6b21\u51fa\u961f\u7684\u5e76\u4e0d\u662fs\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\n        //\u6240\u4ee5\u5728\u8fd9\u6b21\u66f4\u65b0\u524d\u70b9v\u6240\u8fde\u7684\u70b9\u5df2\u7ecf\u66f4\u8fc7\u4e00\u6b21\u4e86 \n        //\u6240\u4ee5\u540e\u9762\u4e5f\u4e0d\u4f1a\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c \n        int len=a[v].size(); \n        for (i=0;i<len;i++)\n        {\n            haha g=a[v][i];\n            if ((d[v]+g.x<d[g.d])||(d[g.d]==-233))//\u677e\u5f1b\u64cd\u4f5c \n            {\n                d[g.d]=d[v]+g.x;\n                e.d=g.d;\n                e.x=d[g.d];\n                q.push(e);\n            }\n        }\n    }\n    for (i=1;i<=n;i++) //\u8f93\u51fa \n    if (d[i]==2000003647)cout<<2147483647<<\" \"; else cout<<d[i]<<\" \";\n    return 0;\n}\n```",
        "postTime": 1477977197,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u7ec3\u7ec3\u5806\u4f18dij\n\npas \u798f\u5229\uff08\u6ca1\u6709STL\u771f\u4f24\u611f\uff09\n\n\n\n\n\n\n\n```cpp\nprogram dij;\ntype\n    rec=record\n          n,t,d:longint;\n        end;\n    rec2=record\n          num,data:longint;\n         end;\nvar n,m,s,cnt:longint;\n    w:array[0..500000] of rec;\n    h,d,pl:array[0..10000] of longint;\n    v:array[0..10000] of boolean;\n    small:array[0..100000] of rec2;\nprocedure init;\nvar i,tot:longint;\n    x,y,z:longint;\nbegin                                             //\u8bfb\u5165\uff0c\u6a21\u62df\u90bb\u63a5\u8868\u5b58\u56fe\n  readln(n,m,s); tot:=0;\n  for i:=1 to m do\n  begin\n    readln(x,y,z);\n    inc(tot);\n    w[tot].n:=h[x]; h[x]:=tot; w[tot].t:=y; w[tot].d:=z;\n  end;\n  for i:=1 to n do d[i]:=maxlongint;\n  d[s]:=0; cnt:=0;\n  fillchar(small,sizeof(small),127);\n  small[0].data:=0;\nend;\nprocedure swap(a,b:longint);      //\u4ea4\u6362\u4f4d\u7f6e\nvar p:rec2; q:longint;\nbegin\n  q:=pl[small[a].num]; pl[small[a].num]:=pl[small[b].num]; pl[small[b].num]:=q;\n  p:=small[a]; small[a]:=small[b]; small[b]:=p;\nend;\nprocedure put(x:longint);            //\u5806\u7684\u52a0\u5165\u64cd\u4f5c\nvar k:longint;\nbegin\n  if pl[x]=0 then                        //\u5224\u65ad\u662f\u5426\u5728\u5806\u4e2d\u5df2\u7ecf\u5b58\u5728\uff08pl\u6570\u7ec4\u6807\u8bb0\u5143\u7d20\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\uff09\n  begin\n    inc(cnt);\n    pl[x]:=cnt;\n    small[cnt].num:=x;\n    small[cnt].data:=d[x];\n    k:=cnt;\n  end\n  else\n  begin\n    small[pl[x]].data:=d[x];          //\u5982\u679c\u5df2\u7ecf\u5b58\u5728\uff0c\u76f4\u63a5\u4fee\u6539\n    k:=pl[x];\n  end;\n  while small[k].data<small[k div 2].data do   //\u7ef4\u62a4\u5806\u7684\u6027\u8d28\n  begin\n    swap(k,k div 2);\n    k:=k div 2;\n  end;\nend;\nfunction get:longint;                               //\u5806\u7684\u53d6\u51fa\u64cd\u4f5c\nvar k:longint;\nbegin\n  get:=small[1].num;\n  pl[small[cnt].num]:=1;                          //\u7ef4\u62a4\u5806\u7684\u6027\u8d28\n  small[1]:=small[cnt];\n  small[cnt].data:=maxlongint;\n  k:=1;  dec(cnt);\n  if cnt>0 then\n  while (small[k].data>small[k*2].data) or (small[k].data>small[k*2+1].data) do\n  begin\n    if small[k*2].data<small[k*2+1].data then\n    begin\n      swap(k,k*2);\n      k:=k*2;\n    end\n    else\n    begin\n      swap(k,k*2+1);\n      k:=(k*2+1);\n    end;\n  end;\nend;\nprocedure find(x:longint);                       //\u62d3\u5c55\u67d0\u4e00\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff08\u5f53\u7136\u662f\u6ca1\u8d70\u8fc7\u7684\uff09\nvar k:longint;\nbegin\n  k:=h[x];\n  while k>0 do\n  begin\n    if not v[w[k].t] then\n      if w[k].d+d[x]<d[w[k].t] then\n      begin\n        d[w[k].t]:=w[k].d+d[x];\n        put(w[k].t);\n      end;\n    k:=w[k].n;\n  end;\nend;\nprocedure dijkstra(x:longint);                  //dijkstra\nvar i:longint;\n    p,min:longint;\nbegin\n  v[x]:=true;\n  find(x);\n  for i:=1 to n-1 do\n  begin\n    if cnt>0 then\n     p:=get                                               //\u8fd9\u91cc\u5c06\u5faa\u73af\u53d6\u5f97\u6700\u5c0f\u503c\u6539\u4e3a\u5728\u5806\u4e2d\u5224\u65ad\u6700\u5c0f\u503c\n    else\n     break;\n    v[p]:=true;\n    find(p);\n  end;\nend;\nprocedure print;\nvar i:longint;\nbegin\n  for i:=1 to n do\n   write(d[i],' ');\nend;\nbegin\n  init;\n  dijkstra(s);\n  print;\nend.\n```",
        "postTime": 1477450883,
        "uid": 9525,
        "name": "fengjunjie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\nconst int INF=0x3f;\nconst int maxn=500000+100;\nint d[maxn];\nbool vis[maxn];\nvector <int> G[10001];\nint n,m,s;\nstruct Edge{\n    int u,v,w;\n}edges[maxn];\nstruct HeapNode{\n    int d,u;\n    bool operator < (const HeapNode& rhs)const{\n        return d>rhs.d;\n    } \n};\nvoid dijkstra(int s){\n    priority_queue<HeapNode> Q;//d\u503c\u5c0f\u7684\u4f18\u5148\u51fa\u961f \n    memset(d,INF,sizeof(d));\n    d[s]=0;\n    Q.push((HeapNode){0,s});//\u7d2b\u4e66\u4e0a\u7684\u9ad8\u7ea7\u7528\u6cd5 \n    while(!Q.empty()){\n        HeapNode x=Q.top();Q.pop();\n        int u=x.u;\n        if(vis[u])continue;//\u9632\u6b62\u8282\u70b9\u7684\u91cd\u590d\u6269\u5c55 \n        vis[u]=true;\n        for(int i=0;i<G[u].size();i++){\n            Edge& e=edges[G[u][i]];\n            if(d[e.v]>d[u]+e.w){//\u677e\u5f1b \n                d[e.v]=d[u]+e.w;//\u6ce8\u610f\uff1a\u4e0d\u80fd\u5c06\u53d8\u91cf\u540d\u641e\u6df7\u4e86 \n                Q.push((HeapNode){d[e.v],e.v}); //\u677e\u5f1b\u6210\u529f\u540e\u9700\u6539\u53d8e.v\u7684\u4f18\u5148\u7ea7 \n            }\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&edges[i].u,&edges[i].v,&edges[i].w);\n        G[edges[i].u].push_back(i);\n    }\n    dijkstra(s);\n    for(int i=1;i<=n;i++){\n        printf(\"%d \",d[i]==0x3f3f3f3f?2147483647:d[i]);//\u8fd9\u4e2a\u5730\u65b9\u9700\u8981\u6ce8\u610f\u4e86\uff0c\u8bdd\u8bf4\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e480x3f3f3f3f\u6539\u6210INF\u4f1awa \n    }        \n    return 0;\n}\n//\u4e0a\u7f51\u641c\u4e86\u4e00\u4e0b\uff1a\n//0x3f3f3f3f\u8fd8\u80fd\u7ed9\u6211\u4eec\u5e26\u6765\u4e00\u4e2a\u610f\u60f3\u4e0d\u5230\u7684\u989d\u5916\u597d\u5904\uff1a\u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06\u67d0\u4e2a\u6570\u7ec4\u6e05\u96f6\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528memset(a,0,sizeof(a))\u8fd9\u6837\u7684\u4ee3\u7801\u6765\u5b9e\u73b0\uff08\u65b9\u4fbf\u800c\u9ad8\u6548\uff09\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u60f3\u5c06\u67d0\u4e2a\u6570\u7ec4\u5168\u90e8\u8d4b\u503c\u4e3a\u65e0\u7a77\u5927\u65f6\uff08\u4f8b\u5982\u89e3\u51b3\u56fe\u8bba\u95ee\u9898\u65f6\u90bb\u63a5\u77e9\u9635\u7684\u521d\u59cb\u5316\uff09\uff0c\u5c31\n//\u4e0d\u80fd\u4f7f\u7528memset\u51fd\u6570\u800c\u5f97\u81ea\u5df1\u5199\u5faa\u73af\u4e86\uff08\u5199\u8fd9\u4e9b\u4e0d\u91cd\u8981\u7684\u4ee3\u7801\u771f\u7684\u5f88\u75db\u82e6\uff09\uff0c\n//\u6211\u4eec\u77e5\u9053\u8fd9\u662f\u56e0\u4e3amemset\u662f\u6309\u5b57\u8282\u64cd\u4f5c\u7684\uff0c\u5b83\u80fd\u591f\u5bf9\u6570\u7ec4\u6e05\u96f6\u662f\u56e0\u4e3a0\u7684\u6bcf\u4e2a\u5b57\u8282\u90fd\u662f0\uff0c\n//\u73b0\u5728\u597d\u4e86\uff0c\u5982\u679c\u6211\u4eec\u5c06\u65e0\u7a77\u5927\u8bbe\u4e3a0x3f3f3f3f\uff0c\u90a3\u4e48\u5947\u8ff9\u5c31\u53d1\u751f\u4e86\uff0c0x3f3f3f3f\u7684\u6bcf\u4e2a\u5b57\u8282\u90fd\u662f0x3f\uff01\n//\u6240\u4ee5\u8981\u628a\u4e00\u6bb5\u5185\u5b58\u5168\u90e8\u7f6e\u4e3a\u65e0\u7a77\u5927\uff0c\u6211\u4eec\u53ea\u9700\u8981memset(a,0x3f,sizeof(a))\u3002\n//http://blog.csdn.net/u011394362/article/details/39135107\n```",
        "postTime": 1474814237,
        "uid": 20301,
        "name": "WLQ567",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "###### \u8fd9\u9053\u9898\u662f\u4e00\u9053\u6a21\u677f\u9898\uff0c\u4f46\u6211\u8fd8\u662f\u505a\u5f97\u590d\u6742\u4e00\u4e9b\uff0c\u4f5c\u4e3a\u4e00\u9053\u4f18\u5316\u7b97\u6cd5\u7684\u6a21\u677f\n###### \u7b97\u6cd5\uff1aSPFA+\u94fe\u5f0f\u524d\u5411\u661f+SLF\u548cLLL\u4f18\u5316\n###### SLF\u4f18\u5316\uff1a\u5982\u679c\u73b0\u5728\u7684\u8fd9\u4e00\u4e2a\u8981\u52a0\u5165\u961f\u5217\u7684\u70b9\uff0c\u4e5f\u5c31\u662fnow\uff0c\u4e0e\u961f\u9996\u5143\u7d20\u76f8\u5224\u65ad\uff0c\u5982\u679c\u5c0f\u4e8e\u5219\u63d2\u5165\u5934\u9996\uff0c\u5927\u4e8e\u5219\u52a0\u8fdb\u5934\u5c3e\uff0c\u5728\u8fd9\u91cc\u6211\u7528\u4e86\u4e00\u4e2a\u53cc\u5411\u961f\u5217\u6765\u8868\u793a\uff0c\u8f83\u4e3a\u5bb9\u6613\n###### LLL\u4f18\u5316\uff1a\u4e2d\u9014\u7b97\u4e00\u4e2a\u961f\u5217\u7684\u5e73\u5747\u503ctotal\uff0c\u7136\u540e\u5934\u9996\u5143\u7d20\u7684dis\u4e0e\u5176\u76f8\u6bd4\u8f83\u3002\n###### \u94fe\u5f0f\u524d\u5411\u661f\u3002\u3002\u3002\u8fd9\u91cc\u5c31\u4e0d\u505a\u8be6\u7ec6\u89e3\u91ca\u4e86\uff0c\u4e0a\u7f51\u641c\n```cpp\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint n,m,begin;\nstruct pel//\u94fe\u5f0f\u524d\u5411\u661f\n{\n    int to;//\u8fd9\u4e00\u6761\u8fb9\u7684\u7ec8\u70b9\n    int next;//\u4e0b\u4e00\u4e2a\u50a8\u5b58\u4f4d\u7f6e\n    int dis;//\u8fd9\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\n};\npel a[500001];\nint num=0;\nint dis[500001];\nint h[500001];\ndeque<int> q;\nvoid add(int x,int y,int z)\n{\n    num++;\n    a[num]=(pel){y,h[x],z};\n    h[x]=num;\n}\nvoid SPFA()\n{\n    int i;\n    dis[begin]=0;\n    q.push_front(begin);\n    int total=0,cnt=0;//total\u662f\u5e73\u5747\u503c\uff0ccnt\u662f\u961f\u5217\u6240\u62e5\u6709\u7684\u5143\u7d20\u603b\u6570\n    while(!q.empty())\n     {\n        int past=q.front();\n        while(dis[past]*cnt>total){//\u5f00\u5934lll\uff0c\u4e0e\u5176\u5224\u65ad\n        \tq.pop_front();\n        \tq.push_back(past);\n        \tpast=q.front();\n\t\t}\n        q.pop_front();\n        total-=dis[past];//\u4e0d\u8981\u5fd8\u4e86\u51cf\u53bb\n        cnt--;\n        for(i=h[past];i;i=a[i].next)\n         {\n         \tint now=a[i].to;//\u5176\u6307\u5411\u8def\u5f84\n         \tif(dis[now]>dis[past]+a[i].dis)\n         \t {\n         \t  dis[now]=dis[past]+a[i].dis;\n              if(!q.empty()&&dis[now]<dis[q.front()])//SLF\u4f18\u5316\n         \t \tq.push_front(now);\n         \t \t else q.push_back(now);\n         \t \t total+=dis[now];\n         \t \t cnt++;//\u7b97\u5e73\u5747\u503c\n         \t }\t\n         }\n     }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&begin);\n    int i;\n    int x,y,z;\n    for(i=1;i<=m;i++)\n     {\n     \tscanf(\"%d%d%d\",&x,&y,&z);\n     \tadd(x,y,z);//\u6784\u5efa\u8def\u5f84\uff0c\u5982\u679c\u662f\u53cc\u5411\u4e0b\u9762\u518d\u52a0\u4e0a\u4e00\u53e5add(y\uff0cx\uff0cz)\uff1b\n     }\n     for(i=1;i<=m;i++)//\u521d\u59cb\u5316\u8def\u5f84\n      dis[i]=2147483647;\n     SPFA();\n     for(i=1;i<=n-1;i++)\n     printf(\"%d \",dis[i]);\n     printf(\"%d\",dis[n]);\n}",
        "postTime": 1566135524,
        "uid": 40562,
        "name": "q2368126021",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6b63\u89e3\u662f$SPFA$\uff0c$dij$\u4ec0\u4e48\u7684\u90fd\u662f\u79c0  \n\u4ee5\u4e0a\u778e\u626f\uff0c\u4e0d\u7528\u7ba1\u3002  \n\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b$SPFA$\uff1a\u5148\u628a\u6240\u6709\u70b9\u7684\u503c\u8d4b\u4e3aINF\uff0c\u7136\u540e\u627e\u5230\u8d77\u70b9\uff0c\u6807\u4f4d\u96f6\uff0c\u5c06\u5176\u538b\u5165\u961f\u5217\uff08\u90fd\u5230\u8fd9\u91cc\u4e86\uff0c\u5e94\u8be5\u6ca1\u4eba\u4e0d\u4f1a\u961f\u5217\u4e86\u5427\u2026\uff09\uff0c\u4e0b\u9762\u7684\u6b65\u9aa4\u8981\u5faa\u73af\u7ecf\u884c\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u3002\u627e\u5230\u5ef6\u751f\u51fa\u6765\u7684\u8282\u70b9\uff0c\u5982\u679c\u8282\u70b9\u7684\u503c\u5927\u4e8e\u5f53\u524d\u7684\u70b9\u7684\u503c\u52a0\u8fb9\u7684\u957f\u5ea6\uff08\u8bbe\u5f53\u524d\u8282\u70b9\u7684\u503c\u662f$v_i$\uff0c\u5ef6\u4f38\u51fa\u6765\u7684\u70b9\u7684\u503c\u662f$v_j$\uff0c\u8fb9\u7684\u957f\u5ea6\u662f$d_i$\uff0c\u5219\u4e0a\u9762\u90a3\u53e5\u8bdd\u7684\u610f\u601d\u662f\u5982\u679c$v_i$+$d_i$>$v_j$\uff09\uff0c\u5c31\u66f4\u65b0\u5e76\u52a0\u5165\u961f\u5217\u3002  \n\u5177\u4f53\u5b9e\u73b0\u5c31\u662f\u8fd9\u4e2a\u4e9a\u5b50\uff1a  \n![](https://cdn.luogu.com.cn/upload/pic/71246.png)  \n\u770b\u5230\u7b2c\u4e09\u5e45\u56fe\u7684\u90a3\u4e2a\u7bad\u5934\u4e86\u5417\uff1f\u90a3\u91cc\u662f\u4e0d\u80fd\u52a0\u5165\u961f\u5217\u7684\uff0c\u56e0\u4e3a\u961f\u5217\u91cc\u5df2\u7ecf\u67094\u53f7\u70b9\u4e86\uff0c\u8fd9\u662f$SPFA$\u6700\u5bb9\u6613\u6253\u9519\u7684\u5730\u65b9\u3002  \n![](https://cdn.luogu.com.cn/upload/pic/71248.png)  \n\uff08\u56fe\u7247\u6765\u6e90\u4e0e\u6d1b\u8c372019\u590f\u4ee4\u8425\u7684\u8bfe\u4ef6\uff09  \n\u8fd9\u91cc\u518d\u8bf4\u4e00\u4e0b\u6709\u5173$SPFA$\u7684\u5176\u4ed6\u7684\u4e1c\u897f\uff1a\n\n1. \u4e0a\u9762\u66f4\u65b0\u70b9\u7684\u6700\u77ed\u8def\u7684\u64cd\u4f5c\u79f0\u4e3a\u677e\u5f1b\u64cd\u4f5c\n2. $SPFA$\u53ef\u4ee5\u6709\u8d1f\u6743\u8fb9\uff0c\u4f46$dij$\u4e0d\u884c\n3. $SPFA$\u4e5f\u53ef\u4ee5\u5224\u8d1f\u6743\u73af\uff0c\u5c31\u662f\u4e00\u4e2a\u70b9\u88ab\u677e\u5f1b\u4e86n\u6b21\uff0c\u8be5\u9898\u6ca1\u6709\u8d1f\u6743\u73af\uff0c\u56e0\u4e3a\u8d1f\u6743\u73af\u4f1a\u4f7f\u6700\u77ed\u8def\u65e0\u9650\u5c0f\uff0c\u800c\u9898\u9762\u6ca1\u6709\u7ed9\u51fa\u5904\u7406\u65b9\u6cd5\n\n\u63a5\u4e0b\u6765\u662f\u6700\u6fc0\u52a8\u4eba\u5fc3\u7684\u65f6\u523b\uff1a**\u4e0a\u4ee3\u7801\uff01\uff01\uff01**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,s;\nqueue<int>q;//\u7cfb\u7edf\u81ea\u5e26\u961f\u5217\uff0c\u4e0d\u61c2\u7684\u770b\u5e95\u4e0b\nvector<int>g[200005];//\u540c\u4e0a\nvector<int>dis[200005];\nbool f[100005];//\u7528\u4e8e\u6807\u8bb0\u662f\u5426\u52a0\u5165\u961f\u5217\nint v[100005];//\u6bcf\u4e2a\u70b9\u79bb\u8d77\u70b9\u7684\u6700\u77ed\u8def\u5f84\nint main()\n{\n\tcin>>n>>m>>s;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint ff,tt,dd;\n\t\tcin>>ff>>tt>>dd;\n\t\tg[ff].push_back(tt);\n\t\tdis[ff].push_back(dd);//\u5efa\u56fe\n\t}\n\tfor(int i=1;i<=n;++i) v[i]=1e10;//\u521d\u59cb\u5316\uff0cSPFA\u7684\u521d\u59cb\u5316\u5fc5\u987b\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u503c\uff0c\u56e0\u4e3a\u5b83\u8981\u5904\u7406\u8d1f\u6743\u8fb9\n\tv[s]=0;\n\tf[s]=true;\n\tq.push(s);//\u538b\u5165\u8d77\u70b9\n\twhile(!q.empty())//\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u4e3a\u6b62\n\t{\n\t\tint xx=q.front();q.pop();//\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5143\u7d20\u5e76\u5f39\u51fa\n\t\tf[xx]=false;//\u6807\u8bb0\u4e3a\u6ca1\u6709\u52a0\u5165\u961f\u5217\n\t\tfor(register int i=0;i<g[xx].size();i++)//\u8be5\u8282\u70b9\u5ef6\u4f38\u51fa\u6765\u7684\u70b9\n\t\t if(v[g[xx][i]]>v[xx]+dis[xx][i])//\u677e\u5f1b\u64cd\u4f5c\n\t\t {\n\t \t\t if(!f[g[xx][i]]) q.push(g[xx][i]),f[g[xx][i]]=true;//\u52a0\u5165\u961f\u5217\n\t\t\t v[g[xx][i]]=v[xx]+dis[xx][i];//\u66f4\u65b0\n\t\t }\n\t}\n\tfor(register int i=1;i<=n;i++)\n\t if(v[i]!=1e10) cout<<v[i]<<' ';\n\t else cout<<\"2147483647\"<<' ';\n\treturn 0;\n}\n```\n\u9644\uff1a[$queue$](https://www.luogu.org/blog/yhdhg1395754790/solution-p1540) [$vector$](https://www.luogu.org/blog/yhdhg1395754790/vector-jian-jie) \u4ee5\u53ca [\u672c\u849f\u84bb\u7684\u535a\u5ba2](https://www.luogu.org/blog/yhdhg1395754790/)",
        "postTime": 1565517230,
        "uid": 195331,
        "name": "Mine_King",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7528\u7684Dj\u6765\u5199\u7684\u4f46\u662f\u5b83\u662f\u5f3a\u5316\u7248\u7684\n\n~~\uff08\u5bf9\u4e8e\u6211\u4eec\u8fd9\u79cd\u849f\u84bb\u6765\u8bf4\uff09~~\n\n\u4f46\u4e5f\u6ca1\u6709\u592a\u5f3a\uff08\u81f3\u5c11\u6a21\u7248\u662f\u8fc7\u4e0d\u4e86\u7684\uff09\u60f3\u8fd9\u9898\u7684\u6b63\u5e38\n\n\u7248[p4779](https://www.luogu.org/problemnew/show/P4779)\n\n\u9700\u8981\u7528\u5230dj\u52a0\u5806\u4f18\u5316~~\uff08\u6240\u4ee5\u6211\u4eec\u8fd9\u79cd\u849f\u84bb\u6765\u8bf4\u662f\u8fc7\u4e0d\u4e86\u7684\uff09~~\n\n\n\n------------\u5f3a\u884c\u62c9\u56de\u4e3b\u9898------------\n\n\u6211\u7528\u4e86vector\u6765\u8282\u7701\u7a7a\u95f4\u6765\u907f\u514dRE\uff1b\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u6570\u7ec4\n\n1\uff1adis[100];//\u7b54\u6848\u6570\u7ec4\n\n2\uff1avis[100];//\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u7528\u8fc7\uff08\u6539\u8fc7\u6700\u5c0f\u503c\uff09\n\n\u5176\u6b21\u7ed3\u6784\u4f53\u4e5f\u662f\u4e0d\u53ef\u5c11\u7684\n\n\n\n------------\n```cpp\nstruct node\n{\n\tint ed/*\u7ec8\u70b9*/,w/*\u6743\u503c*/;\t\n};\n```\n\n------------\n\n\u5f00\u59cb\u4e3b\u51fd\u6570\n\n\n------------\n```cpp\nfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tstruct node now;\n\t\tnow.ed=y;//y\u653e\u5165\u7ed3\u6784\u4f53\u7684ed\u91cc\n\t\tnow.w=z;//\u540c\u4e0a\n\t\tvt[x].push_back(now);/*\u8fd9\u662f\u91cd\u70b9\u4e3a\u4ec0\u4e48\u628ax\u4f5c\u4e3a\u4e0b\u6807\u6765\u5b58\u56e0\u4e3avt\u8fd9\u4e2avector\u662f\u5b58\u7684\u4ee5x\u4e3a\u5f00\u5934\u7684\u7ebf\u53c8\u56e0\u4e3a\u8fd9\u662f\u5355\u5411\u56fe\u6240\u4ee5\u662f\u8fd9\u6837*/\n        dj();//\u8fdb\u5165dj\uff1b\n        \n\t}\n```\n\u4e00\u4e2a\u6b63\u5e38\u7684\u8f93\u5165~~\uff08\u867d\u7136\u521a\u5f00\u59cb\u7684\u65f6\u5019\u66f4\u672c\u4e0d\u4f1a\uff09\uff08\u73b0\u5728\u4e5f\u5dee\u4e0d\u591a\uff09~~\n\n\u4e0b\u9762\u4e0adj\u7684\u4ee3\u7801\n------------\n```cpp\nvoid dj()\n{\n\tmemset(vis,false,sizeof(vis));//\u521d\u59cb\u5316\n\tmemset(dis,INF,sizeof(dis));//\u521d\u59cb\u5316INF\u4e0a\u5b9a\u4e49\u4e3a\u4e860x3f3f3f3f(\u4e00\u4e2a\u8d85\u5927\u503c)\n\tfor(int i=0;i<vt[s].size()/*\u4ee5s\u5f00\u5934\u7684vector\u7684\u5927\u5c0f*/;i++)\n\t{\n\t\tdis[vt[s][i].ed]=min(dis[vt[s][i].ed],vt[s][i].w);//\u628a\u4e8e\u8d77\u70b9\u76f8\u8fde\u7684\u70b9\u5148\u521d\u59cb\u5316\n\t}\n\tdis[s]=0;//\u7b54\u6848\u4e3a0\n\tvis[s]=true;//\u6807\u8bb0\u7f6e\u4e3atrue\n\t\n\tfor(int i=1;i<=n;i++)//\u5faa\u73af\u6a21\u62df\n\t{\n\t\tint mis=INF,pos=0;//\u521d\u59cb\u5316mis\u7528\u6765\u627e\u6700\u5c0f\u503c pos\u7528\u6765\u627e\u4e0b\u6807\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(!vis[j]&&dis[j]<mis)//\u5982\u679c\u6ca1\u6709\u88ab\u7528\u8fc7\u4e14\u8fd9\u4e2a\u70b9\u5c0f\u4e8emis\n\t\t\tmis=dis[j],pos=j;//\u66f4\u65b0\n\t\t}\n\t\tvis[pos]=true;//\u7f6e\u4e3atrue\n\t\tfor(int j=0;j<vt[pos].size()/*\u4ee5pos\u5f00\u5934\u7684vector\u7684\u5927\u5c0f*/;j++)\n\t\t{\n\t\t\tif(!vis[vt[pos][j].ed]/*vt[pos][j].ed\u662f\u6307\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u7b2cj\u4e2a\u6570*/&&dis[vt[pos][j].ed]/*\u8bb0\u7b54\u6848\u7684\u503c*/>dis[pos]/*\u672c\u751f\u8fd9\u4e2apos\u70b9\u7684\u503c*/+vt[pos][j].w/*\u6743\u503c*/)\n\t\t\tdis[vt[pos][j].ed]=dis[pos]+vt[pos][j].w;//\u66f4\u65b0\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(dis[i]==INF)//\u5982\u679c\u6ca1\u6709\u66f4\u6539\u503c\u5c31\u6539\u4e3a2147483647\n\t\tdis[i]=2147483647;\n\t\tcout<<dis[i]<<\" \";//\u8f93\u51fa\n\t}\n}\n```\n\n\n\u6700\u540e\u9644\u4e0a\u5b8c\u6574\u4ee3\u7801\n------------\n\n```cpp\n#include<iostream>\n#include<vector>\n#include<cstring>\nusing namespace std;\nint n,m,s;\nint dis[10201];\nbool vis[10201];\nstruct node\n{\n\tint ed,w;\t\n};\nvector<struct node> vt[10200];\nint INF=0x3f3f3f3f;\nvoid dj()\n{\n\tmemset(vis,false,sizeof(vis));\n\tmemset(dis,INF,sizeof(dis));\n\t\n\tfor(int i=0;i<vt[s].size();i++)\n\t{\n\t\tdis[vt[s][i].ed]=min(dis[vt[s][i].ed],vt[s][i].w);\n\t}\n\tdis[s]=0;\n\tvis[s]=true;\n\t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint mis=INF,pos=0;\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(!vis[j]&&dis[j]<mis)\n\t\t\tmis=dis[j],pos=j;\n\t\t}\n\t\tvis[pos]=true;\n\t\tfor(int j=0;j<vt[pos].size();j++)\n\t\t{\n\t\t\tif(!vis[vt[pos][j].ed]&&dis[vt[pos][j].ed]>dis[pos]+vt[pos][j].w)\n\t\t\tdis[vt[pos][j].ed]=dis[pos]+vt[pos][j].w;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(dis[i]==INF)\n\t\tdis[i]=2147483647;\n\t\tcout<<dis[i]<<\" \";\n\t}\n}\n\nint main()\n{\n\tcin>>n>>m>>s;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tstruct node now;\n\t\tnow.ed=y;\n\t\tnow.w=z;\n\t\tvt[x].push_back(now);\n\t}\n\tdj();\n    return 0;\n}\n```\n------------\n\n\u5b8c\u4e8b\uff01\n\n\n\n",
        "postTime": 1533819681,
        "uid": 107689,
        "name": "Miss_dijkstra",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u3011"
    },
    {
        "content": "\u4e71\u5199\u7684SPFA\uff0c\u81ea\u8ba4\u4e3a\u633a\u597d\u7406\u89e3\u7684\u9002\u5408\u65b0\u624b\u4f7f\u7528 \u4ec0\u4e48\u4f18\u5316\u90fd\u6ca1\u52a0\uff08\u5dee\u70b9ML\u800c\u4e14E\u8981\u662f\u6709\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u628a\u6240\u6709\u8fb9\u90fd\u8fde\u5230\u540c\u4e00\u4e2a\u70b9\u4e0a\u5c31201\u4e86\uff09\n\n```pascal\nuses math; //\u597d\u50cf\u5e76\u4e0d\u9700\u8981\u4f46\u662f\u4e60\u60ef\u6027\u7684\u52a0\u8fd9\u4e2a\uff08\u5c31\u4e0d\u7528\u5199min\u51fd\u6570\u548cmax\u51fd\u6570\u4e86\u8fd8\u53ef\u4ee5\u4e58\u65b9\u548c\u6c42log\uff09\uff1b\nvar q:array[0..200001]of longint;//\u961f\u5217\n    t,f:array[0..10001]of longint;//t:\u4ee5\u67d0\u9876\u70b9\u4e3a\u8d77\u70b9\u7684\u8fb9\u6570 f:\u6700\u7ec8\u8d77\u70b9\u5230\u67d0\u70b9\u7684\u6700\u77ed\u8def\u5f84\u503c\n    vis:array[0..10001]of boolean;//\u662f\u5426\u5728\u961f\u4e2d\n    w,aim:array[0..10001,0..2001]of longint;//w:\u67d0\u8fb9\u6743\u503c aim:\u67d0\u8fb9\u7ec8\u70b9\uff08p.s.\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u4e86\u9632\u5751\u5f00\u52301000\u672c\u9898150\u5c31\u80fdA\uff09\n    n,m,s,x,y,z,i,j,head,tail:longint; \nbegin\n  readln(n,m,s);\n  for i:=1 to m do\n    begin\n      readln(x,y,z);\n      inc(t[x]);//\u7edf\u8ba1\u4ee5x\u4e3a\u8d77\u70b9\u7684\u8fb9\u6570\n      aim[x,t[x]]:=y;//\u8bb0\u5f55\u4ee5x\u4e3a\u8d77\u70b9\u7684\u6700\u65b0\u4e00\u6761\u8fb9\u7ec8\u70b9\u4e3ay\uff0c\u6743\u503c\u4e3az\n      w[x,t[x]]:=z;\n    end;//\u8bfb\u5165\u5b8c\u6bd5\n  for i:=1 to n do f[i]:=maxlongint; f[s]:=0;//\u7ffb\u8bd1\uff1a\u521d\u59cb\u5316\u6240\u6709\u9876\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\u4e3a\u9898\u76ee\u8981\u6c42\u7684\u90a3\u4e2a\u6570\uff08maxlongint\uff09\u5e76\u4e14\u8d77\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\u4e3a0\uff08\u4e0d\u8981\u5fd8\u8bb0\uff01\uff09\n  q[1]:=s; head:=0; tail:=1; vis[s]:=true;// \u7ffb\u8bd1\uff1a\u961f\u5217\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u8d77\u70b9\uff1b\u521d\u59cb\u5316\u961f\u5217\uff1b \u6807\u8bb0\u8d77\u70b9\u5df2\u5728\u961f\u5217\u4e2d\n  while head<=tail do\n    begin\n      inc(head);//\u7ffb\u8bd1\uff1a\u961f\u9996\u51fa\u961f\n      vis[q[head]]:=false;//\u7ffb\u8bd1\uff1a\u6807\u8bb0\u961f\u5217\u5934\u7684\u5143\u7d20\u5df2\u4e0d\u5728\u961f\u5217\u4e2d\n        for i:=1 to t[q[head]] do//\u7ffb\u8bd1\uff1a\u4ece1\u5230\u4ee5\u961f\u5217\u5934\u4e3a\u8d77\u70b9\u7684\u603b\u8fb9\u6570\u4e0e\u679a\u4e3e\u6240\u6709\u8fb9\n          if f[aim[q[head],i]]>f[q[head]]+w[q[head],i] then//\u7ffb\u8bd1\uff1a\u5982\u679c\u8d77\u70b9\u5230\u961f\u5217\u5934\u7684\u5143\u7d20\u7684\u7b2ci\u6761\u8fb9\u7684\u7ec8\u70b9\u7684\u8ddd\u79bb\u5927\u4e8e\u8d77\u70b9\u5230\u961f\u5217\u5934\u7684\u5143\u7d20\u7684\u8ddd\u79bb\u52a0\u4e0a\u961f\u5217\u5934\u7684\u7b2ci\u6761\u8fb9\u7684\u6743\u503c\n            begin\n              f[aim[q[head],i]]:=f[q[head]]+w[q[head],i];//\u66f4\u65b0\u8d77\u70b9\u5230\u961f\u5217\u5934\u7684\u5143\u7d20\u7684\u7b2ci\u6761\u8fb9\u7684\u7ec8\u70b9\u7684\u8ddd\u79bb\u4e3a\u8d77\u70b9\u5230\u961f\u5217\u5934\u7684\u5143\u7d20\u7684\u8ddd\u79bb\u52a0\u4e0a\u961f\u5217\u5934\u7684\u7b2ci\u6761\u8fb9\u7684\u6743\u503c\n              if not vis[aim[q[head],i]] then//\u5982\u679c\u4e0d\u5728\u961f\u5217\u4e2d\u5219\u5165\u961f\n                begin\n                  inc(tail); q[tail]:=aim[q[head],i];//\u5165\u961f\u64cd\u4f5c\n                  vis[aim[q[head],i]]:=true;//\u6807\u8bb0\n                end;\n            end;\n    end;\n  for i:=1 to n do write(f[i],' ');//\u8f93\u51fa\u7b54\u6848\nend.\n```\n\u672c\u9898\u89e3\u6709\u4ee5\u4e0b\u597d\u5904\uff1a\n\n1. \u4ee3\u7801\u6ce8\u91ca\u8be6\u7ec6\n\n2. \u6613\u7406\u89e3\n\n3. \u60f3\u80cc\u4ee3\u7801\u80cc\u4e0d\u4e0b\u6765\u7684\u540c\u5b66\u53ef\u4ee5\u80cc\u4e2d\u6587\u7136\u540e\u8003\u8bd5\u7684\u65f6\u5019\u5b9e\u73b0\u5c31\u53ef\u4ee5\u4e86\n",
        "postTime": 1510367769,
        "uid": 26762,
        "name": "HarryHu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "SPFA\u6a21\u677f\u9898\uff0c\u624b\u6253queue\u8f7b\u677e\u8fc7\u3002\n\n\u56e0\u4e3aSTL\u91cc\u7684\u961f\u5217\u6bd4\u8f83\u6162\uff0c\u6240\u4ee5\u624b\u6253\u3002\n\n\u5927\u4f53\u601d\u8def\u662f\u5148\u4f7f\u7528\u4e00\u4e2a\u961f\u5217\uff0c\u5728\u5f00\u59cb\u7684\u65f6\u5019\u4ece\u8d77\u59cb\u70b9\u5f00\u59cb\u5224\u65ad\uff0c\u5982\u679c\u4e0e\u5f53\u524d\u6240\u8fde\u7684\u8fb9\u80fd\u66f4\u65b0\u6743\u503c\uff0c\u90a3\u5c31\u5c06\u5176\u653e\u5165\u961f\u5217\uff0c\u4e0d\u65ad\u5730\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u3002\n\nSPFA\u6700\u91cd\u8981\u7684\u6709\u51e0\u70b9\uff1a\n\n1.\u7528\u90bb\u63a5\u94fe\u8868\u5b58\u56fe\u3002\n\n2.\u961f\u5217\u521d\u59cb\u5316\u3002\n\n3.\u961f\u5217\u66f4\u65b0\u64cd\u4f5c\u3002\n\n4.\u5982\u679c\u8fb9\u6743\u592a\u591a\u600e\u4e48\u529e\uff1f\u666e\u901a\u7684SPFA\u4f1a\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u63d0\u9ad8\u5230O\uff08n^2\uff09.\u6240\u4ee5\u6211\u4eec\u8981\u7528\u4e00\u4e2avis\u6570\u7ec4\u6765\u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u961f\u5217\u4e2d\u3002\u5982\u679c\u5728\uff0c\u66f4\u65b0\u65f6\u5c31\u4e0d\u5fc5\u518d\u653e\u8fdb\u53bb\u3002\u8fd9\u6837\u4f1a\u5927\u5927\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u867d\u7136SPFA\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u76f4\u90fd\u662f\u7384\u5b66orz\uff09\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,m,s;\nstruct pan\n{\n    int to,next,val;\n}run[510000];//\u90bb\u63a5\u94fe\u8868\u5b58\u56fe\uff0c\u6765\u8282\u7701\u7a7a\u95f4 \nint head[500100],vis[510000],dis[510000],queue[510000];\nint node=0;\nvoid init()\n{\n    memset(dis,0x3f,sizeof(dis));\n    for(int i=1;i<=m;i++)\n    {\n        head[i]=-1;\n    }\n}\nvoid add(int u,int v,int w)\n{\n    run[++node].to=v;\n    run[node].val=w;\n    run[node].next=head[u];\n    head[u]=node;\n}\nvoid spfa()\n{\n    int u,l=0;\n    int r=1;\n    queue[1]=s;\n    vis[s]=1;\n    dis[s]=0;//\u4e0a\u9762\u51e0\u6b65\u4e3aSPFA\u7684\u521d\u59cb\u5316 \n    while(l<r)\n    {\n        u=queue[++l];//\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u51fa\u5217\uff0c\u7136\u540e\u627e\u8be5\u5143\u7d20\u76f8\u8fde\u7684\u5176\u5b83\u70b9 \n        vis[u]=0;//\u51fa\u5217\u64cd\u4f5c \n        for(int i=head[u];i!=-1;i=run[i].next)\n        {\n            if(dis[run[i].to]>dis[u]+run[i].val)//\u5982\u679c\u65b0\u7684\u8fb9\u6bd4\u539f\u5148\u7684\u77ed\uff0c\u90a3\u5c31\u66f4\u65b0\u6743\u503c \n            {\n                dis[run[i].to]=dis[u]+run[i].val;\n                if(vis[run[i].to]==0)//\u5982\u679c\u88ab\u66f4\u65b0\u7684\u70b9\u539f\u5148\u4e0d\u5728\u961f\u5217\u91cc\uff0c\u5c31\u628a\u5b83\u52a0\u8fdb\u6765\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u907f\u514d\u4e86\u6bcf\u4e00\u4e2a\u70b9\u7684\u91cd\u590d\u8be2\u95ee\uff0c\u964d\u4f4e\u4e86\u65f6\u95f4\u590d\u6742\u5ea6 \n                {\n                    vis[run[i].to]=1;\n                    queue[++r]=run[i].to;//\u88ab\u66f4\u65b0\u7684\u70b9\u52a0\u5165\u961f\u5217 \n                }\n            }\n        }\n    }\n}\nint main()\n{\n    int u,v,w;\n    cin>>n>>m>>s;\n    init();\n    for(int i=1;i<=m;i++)\n    {\n        cin>>u>>v>>w;\n        add(u,v,w);\n    }\n    spfa();//SPFA\u4e3b\u4f53 \n    for(int i=1;i<=n;i++)\n    {\n        if(i==s) cout<<0<<\" \";\n        else\n        {\n            if(dis[i]==0x3f3f3f3f) cout<<2147483647<<\" \";//\u5982\u679c\u6ca1\u6709\u88ab\u8fde\uff0c\u90a3\u5c31\u8f93\u51fa2147483647 \n            else cout<<dis[i]<<\" \";\n        }    \n    }\nreturn 0;\n```",
        "postTime": 1508450936,
        "uid": 35353,
        "name": "\u4e91\u96fe\u7e41\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u56f0\u60d1\u6211\u8bb8\u4e45\u7684\u94fe\u8868\u7ec8\u4e8e\u6709\u4e00\u70b9\u6539\u5584\u4e86\uff0c\u8fd9\u9053\u9898\u663e\u7136\u4e0d\u80fd\u7528Floyd\uff0c\u4f1a\u70b8\n\n\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u529e\u5462\uff1f\uff08\u628a\u5927\u5bb6\u5f53\u50bb\u74dc\u7684\u8bf4\uff09\uff0c\u90a3\u4e48\u8bf7\u89c1\u4e0b\u56fe\uff1a\n\n ![](https://cdn.luogu.com.cn/upload/pic/8456.png) \n\n\u7b80\u5355\u6765\u8bf4\u5c31\u662f~~\uff1a\n\na.\u521d\u59cb\u65f6\uff0cS\u53ea\u5305\u542b\u6e90\u70b9\uff0c\u5373S\uff1d{v}\uff0cv\u7684\u8ddd\u79bb\u4e3a0\u3002U\u5305\u542b\u9664v\u5916\u7684\u5176\u4ed6\u9876\u70b9\uff0c\u5373:U={\u5176\u4f59\u9876\u70b9}\uff0c\u82e5v\u4e0eU\u4e2d\u9876\u70b9u\u6709\u8fb9\uff0c\u5219<u,v>\u6b63\u5e38\u6709\u6743\u503c\uff0c\u82e5u\u4e0d\u662fv\u7684\u51fa\u8fb9\u90bb\u63a5\u70b9\uff0c\u5219<u,v>\u6743\u503c\u4e3a\u221e\u3002\n\n\nb.\u4eceU\u4e2d\u9009\u53d6\u4e00\u4e2a\u8ddd\u79bbv\u6700\u5c0f\u7684\u9876\u70b9k\uff0c\u628ak\uff0c\u52a0\u5165S\u4e2d\uff08\u8be5\u9009\u5b9a\u7684\u8ddd\u79bb\u5c31\u662fv\u5230k\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff09\u3002\n\n\nc.\u4ee5k\u4e3a\u65b0\u8003\u8651\u7684\u4e2d\u95f4\u70b9\uff0c\u4fee\u6539U\u4e2d\u5404\u9876\u70b9\u7684\u8ddd\u79bb\uff1b\u82e5\u4ece\u6e90\u70b9v\u5230\u9876\u70b9u\u7684\u8ddd\u79bb\uff08\u7ecf\u8fc7\u9876\u70b9k\uff09\u6bd4\u539f\u6765\u8ddd\u79bb\uff08\u4e0d\u7ecf\u8fc7\u9876\u70b9k\uff09\u77ed\uff0c\u5219\u4fee\u6539\u9876\u70b9u\u7684\u8ddd\u79bb\u503c\uff0c\u4fee\u6539\u540e\u7684\u8ddd\u79bb\u503c\u7684\u9876\u70b9k\u7684\u8ddd\u79bb\u52a0\u4e0a\u8fb9\u4e0a\u7684\u6743\u3002\n\n\nd.\u91cd\u590d\u6b65\u9aa4b\u548cc\u76f4\u5230\u6240\u6709\u9876\u70b9\u90fd\u5305\u542b\u5728S\u4e2d\u3002\n\n\u5b9e\u5728\u6ca1\u6709\u770b\u61c2\u7684\u8bdd\u53ef\u4ee5\u53bb\u770b\u4e00\u4e2a\u5f88\u8d5e\u7684\u535a\u5ba2\uff1a \u6700\u77ed\u8def\u5f84\u2014Dijkstra\u7b97\u6cd5\u548cFloyd\u7b97\u6cd5 - as\\_ - \u535a\u5ba2\u56ed\uff08\u8bf7\u53eb\u6211\u96f7\u950b\uff09\n\n\u4ee3\u7801\u5949\u4e0a\uff1a\n\n\n\n\n\n        \n        \n         \n\n    \n    \n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<climits>\n#define MAX 2147483647\n#define maxn 50001\nusing namespace std;\nstruct node\n{\n    int to,next=0,w;\n}edge[maxn];\nint head[maxn];\nint dis[maxn],n,m,k,t;    //struct\u5b58\u8fb9 \uff0cdis\u5b58\u8ddd\u79bb\uff0cvis\u5224\u65ad\u904d\u5386\u6761\u4ef6\uff1b                         \nvoid dj(int k)\n{\n    bool vis[maxn]={false};\n    for(int i=1;i<=n;i++)\n    {    \n        int mi=MAX,t=-1;                    //\u5b9a\u4e49\u5224\u65ad\u6761\u4ef6\uff1b \n        for(int j=1;j<=n;j++)                //\u904d\u5386\u6bcf\u4e2a\u70b9\uff1b \n        {\n            if(!vis[j] && dis[j]<mi)        //\u672a\u904d\u5386\u8fc7\u4e14\u8fde\u63a5\u6709\u8fb9 \uff1b \n            {\n                mi=dis[j];\n                t=j;                        //\u5b58\u8fb9\uff0c\u5b58\u6700\u5c0f\u503c \uff1b \n            } \n        }    \n        if(t==-1 || mi==MAX)                //MAX\u5c31\u662f\u65e0\u9650\u5927\uff0c\u4e5f\u5c31\u7406\u89e3\u4e3a\u6ca1\u6709\u8fb9\uff1b \n        break;\n        vis[t]=true;                        //\u5373\u7b2cj\u4e2a\u70b9\u5df2\u7ecf\u904d\u5386\u8fc7\u4e86\uff1b \n        //\u63a5\u4e0b\u6765\u662f\u672c\u7fb8\u5f31\u6700\u4e0d\u80fd\u7406\u89e3\u7684\u5730\u65b9\uff08\u94fe\u8868\u6ca1\u5b66\u597d ~ \u2014o \u2014~ \uff09\uff1b \n        for(int j=head[t];j;j=edge[j].next)    //\u4ecehead\u5934\u627e\u8d77\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8fde\u4e0a\u627e\uff1b \n        {\n                                            //\u5982\u679c\u8be5\u70b9\u6ca1\u6709\u627e\u8fc7\uff0c\u5e76\u4e14\u6e90\u70b9\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u66f4\u5c0f\uff1b\n            if(!vis[edge[j].to] && dis[edge[j].to]>(edge[j].w+dis[t]))\n            dis[edge[j].to]=edge[j].w+dis[t];\n                                            //\u90a3\u4e48\u66f4\u65b0\uff1b\n        }\n    }\n}\nint main()\n{\n    cin>>n>>m>>k;\n    for(int i=1;i<=m;i++)                    //\u521d\u59cb\u5316\u6240\u6709\u7684\u70b9\u90fd\u4e0d\u8fde\u63a5\uff1b \n    dis[i]=MAX;                                 \n    dis[k]=0;                                //\u5230\u5f00\u59cb\u7684\u70b9\u7684\u8ddd\u79bb\u4e3a0 \uff1b \n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);            //\u7b80\u5316\u8f93\u5165\uff0c\u5e94\u8be5\u90fd\u61c2\u5427\uff08\u5982\u679c\u4e0d\u61c2\u8bf7\u89c1\u300a\u554a\u54c8\uff0c\u7b97\u6cd5\u300b\uff09\uff1b \n        edge[i].to=y;\n        edge[i].w=z;\n        edge[i].next=head[x];\n        head[x]=i; \n    }    \n    dj(n);//\u5f00\u59cb\u67e5\u8be2\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01                                    \n    for(int i=1;i<=n;i++)\n        printf(\"%d \",dis[i]);\n    //\u5b8c\u7f8e\u8f93\u51fa \n    return 0;\n}\n```\n/\\*\ninput:\n4 6 1\n1 2 2\n2 3 2\n2 4 1\n1 3 5\n3 4 3\n1 4 4\n\noutput:\n\n0 2 4 3\n\n\n\\*/\n\u5982\u679c\u8fd8\u4e0d\u61c2\uff0c\u90a3\u4f60\u5f88\u68d2\u68d2\uff1b\n\n\u6211\u65e0\u80fd\u4e3a\u529b\u4e86\u3002\n\n\u770b\u770b\u522b\u7684\u5927\u4f6c\u5199\u7684\u4ee3\u7801\u5427\n",
        "postTime": 1506951696,
        "uid": 47442,
        "name": "lxyhhhhhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "dalao\u4eec\u90fd\u8bf4\u6734\u7d20Dijkstra\u4e0d\u884c\uff0c\u5f88\u591a\u8fd8\u8bf4Dijkstra\u5373\u4f7f\u52a0\u4f18\u5316\u4e5f\u4e0d\u884c\u2026\u2026\n\n\u672c\u849f\u84bb\u56e0\u4e3a\u4e0d\u4f1a\u5199SPFA \u53ea\u597d\u5199Dijkstra \u7136\u540e\u63d0\u4ea4\u65e0\u6570\u6b21\u5931\u8d25 \u65e0\u6570\u6b21\u8c03\u8bd5\u540e \u5806\u4f18\u8fea\u6770\u548c\u6734\u7d20\u8fea\u6770\u90fd\u8fc7\u4e86\u3002\n\n\u56e0\u4e3a\u5df2\u7ecf\u6709\u7528\u5806\u4f18\u8fea\u6770\u7684\u9898\u89e3\u4e86\uff0c\u8fd9\u91cc\u53ea\u8d34\u4e0a\u81ea\u5df1\u7684\u4ee3\u7801\u7528\u4e8e\u5bf9\u6bd4\uff0c\uff08\u5f88\u597d\u5947\u4e3a\u4ec0\u4e48\u6211\u7684\u6734\u7d20\u4e0d\u4f1aTLE 233\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#define MAXN 10021\n#define INF 0x7fffffff\nusing namespace std;\n\nstruct Edge {\n    int succ, value, next;\n};\n\nint n, m, s, t, flag;\nint h[MAXN], vis[MAXN], dist[MAXN];\n\nEdge graph[1000021];\n\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &s);//\u8bfb\u5165\uff0cn\u4e3a\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0cs\u4e3a\u8d77\u70b9 \n    flag = n;//\u7528\u4e8e\u8bb0\u5f55\u6269\u5c55\u6b21\u6570\u7684\u53d8\u91cf \n    for (int i=1; i<=m; i++) {\n        int a, b, c;\n        scanf(\"%d%d%d\", &a, &b, &c);\n        graph[++t] = {b, c, h[a]};\n        h[a] = t;\n    } //\u8bfb\u56fe \n    fill(dist+1, dist+n+1, INF);//\u8d4b\u5404\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\u4e3a\u65e0\u7a77\u5927 \n    dist[s] = 0;\n    while (flag--) {\n        int mini = INF, num = 0;\n        for (int i=1; i<=n; i++)\n            if (!vis[i]) {\n                num = dist[i] < mini ? i : num;\n                mini = min(mini, dist[i]);\n            }//\u627e\u5230\u8fd8\u6ca1\u88ab\u8bbf\u95ee\u7684\u4e0es\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9num \n        vis[num] = 1;//\u5c06num\u6269\u5c55\u8fdb\u96c6\u5408 \n        for (int i=h[num]; i; i=graph[i].next)\n            dist[graph[i].succ] = min(dist[graph[i].succ], dist[num] + graph[i].value);\n    }//\u5bf9num\u7684\u6240\u6709\u90bb\u5c45\u66f4\u65b0dist \n    for (int i=1; i<=n; i++)\n        printf(\"%d \", dist[i]);//\u8f93\u51fa \n    puts(\"\");//\u4e2a\u4eba\u4e60\u60ef\uff0c\u8f93\u51fa\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u4e0d\u5199\u4e00\u6837 \n    return 0;\n}\n```\n\u8fd8\u6709\u4e00\u4e2a\u503c\u5f97\u8ba8\u8bba\u7684\u5730\u65b9 \u6211\u7684\u8d4b\u521d\u503c\u653e\u5728while\u5185\u4e4b\u540eAC\uff0c\u4f46\u662f\u653e\u5728while\u5185\u4f1aWA\u4e09\u4e2a\u70b9\uff0c\u597d\u5947\u3002\n\n\u203b\u6ce8:flag\u53d8\u91cf\u7684\u4f7f\u7528\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5c11\u4e00\u4e2a\u5faa\u73af\u53d8\u91cf\uff0c\u7528for\u6548\u679c\u4e00\u6837\n",
        "postTime": 1506433607,
        "uid": 30848,
        "name": "zcyaya",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u4e00\u4e2a\u76f8\u5bf9\u8f83\u5feb\u7684SPFA\u6a21\u677f(\u4e0d\u5230400ms)\n\n\u603b\u800c\u8a00\u4e4b\uff0cSPFA\u7684\u5173\u952e\u8fd8\u662f\u961f\u5217\u4f18\u5316\uff0c\u8fd9\u70b9\u5199\u987a\u4e86BFS\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u89c9\u5f97\u6bd4\u8f83\u76f8\u4f3c\n\n\u90bb\u63a5\u8868\u8fd8\u662f\u6bd4\u8f83\u597d\u7528\u7684\uff0c\u5f53\u521d\u7406\u89e3\u4e5f\u82b1\u4e86\u633a\u4e45\u3002\u3002\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,j,n) for(int i=j;i<=n;i++) \nusing namespace std;\nconst int N=10010,M=500010;\ninline int read(){  //\u8bfb\u5165\u4f18\u5316\n    int x; char ch; \n    while(ch=getchar(),ch>'9'||ch<'0') ; x=ch-'0';\n    while(ch=getchar(),ch>='0'&&ch<='9') x=(x<<1)+(x<<3)+ch-'0';     return x;\n}\nint head[N],dis[N],n,m,s,x,y,w,cnt;  //head[x]\u4e3a\u70b9x\u8fde\u63a5\u7684\u7b2c\u4e00\u6761\u8fb9\uff0cdis[i]\u4e3a\u6240\u6c42\u8ddd\u79bb\uff0ccnt\u4e3a\u8fb9\u603b\u6570\nstruct edge{  //\u90bb\u63a5\u8868\u63d2\u8fb9\n    int next,to,w;  //next\u4e3a\u8fb9e[i]\u7684\u4e0b\u4e00\u6761\u8fb9 , to\u4e3a\u8fb9e[i]\u7684\u7ec8\u70b9\n}e[M];\ninline void ins(int x, int y, int v) { \n    cnt++; e[cnt]=edge{head[x],y,v} ; head[x]=cnt;\n}\nqueue<int> q;\nbool inq[N];  //\u662f\u5426\u5728\u961f\u4e2d\nint main(){\n    n=read() ; m=read() ; s=read();\n    rep(i,1,m) {\n        x=read() ; y=read() ; w=read();\n        ins(x,y,w);}\n    rep(i,1,n) dis[i]=2147483647;  //\u522b\u7684\u9898\u8fd9\u91cc\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\uff0c\u6700\u597d\u7ed3\u5408\u5b9e\u9645\u9009\u62e9\n    dis[s]=0;    \n    q.push(s); dis[s]=0; inq[s]=true;  //\u6e90\u70b9\u5165\u961f\n    while(!q.empty()) {\n        int x=q.front() ; q.pop(); inq[x]=false;\n        for(int i=head[x]; i; i=e[i].next){   //\u904d\u5386\u961f\u9996\u8fde\u51fa\u7684\u6240\u6709\u8fb9\n            int v=e[i].to;\n            if( dis[v]>dis[x]+e[i].w) {  //\u677e\u9a70\n                dis[v]=dis[x]+e[i].w;\n                if(!inq[v]) inq[v]=true,q.push(v); //\u65b0\u70b9\u5165\u961f\n            }\n        }\n    }\n    rep(i,1,n) printf(\"%d \",dis[i]) ;\n    return 0;\n}\n```",
        "postTime": 1503747173,
        "uid": 27276,
        "name": "\u738b\u5c06\u98de\u626cCliffly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u4e00\u9053\u5f88\u7384\u5b66\u7684\u9898\uff0c\u6570\u636e\u5927\u5230\u5c45\u7136cin\u548ccout\u90fd\u4f1a\u8d85\u65f6\uff0c\u4e8e\u662f\u4e4e\u53ea\u597d\u7528\u4e86scanf\u548cprintf\uff0c\u771f\u7684\u662f\u5f88\u5751\u554a\u3002\n\n\n\u56de\u5230\u6b63\u9898\uff0c\u4e00\u9053\u5f88\u6c34\u7684\u6700\u77ed\u8def\u3002\n\n\n\u770b\u5230\u6570\u636e\u90a3\u4e48\u5927\uff0c\u5f88\u81ea\u7136\u7684\u5c31\u7528\u5230\u4e86SPFA.\n\n\n\u4e00\u4e2a\u88f8\u5730SPFA\u7684\u6a21\u677f\u3002\n\n\n\u5176\u5b9e\u8fd9\u662f\u6211\u7684\u7b2c\u4e8c\u6b21\u63d0\u4ea4\u4e86\uff0c\u7b2c\u4e00\u6b21\u5c45\u7136\u6ca1\u8fc7\uff0c\u5f88\u60ca\u8bb6\u3002\n\n\n\u9996\u5148\u5f00\u4e00\u4e2a\u961f\u5217\uff0c\u8d77\u70b9\u5165\u961f\u5217\uff0c\u7136\u540e\u4e0d\u65ad\u627e\u4e0e\u4ed6\u76f8\u90bb\u7684\u8fb9\uff0c\u518d\u5165\u961f\u5217\uff0c\u5f53\u53d1\u73b0\u901a\u8fc7\u8fd9\u4e2a\u70b9\u7684\u8fdb\u5165\u65f6\uff0c\u6709\u5176\u4ed6\u7684\u8def\u7ebf\u53d8\u77ed\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u5728\u961f\u5217\u91cc\uff0c\u90a3\u4e48\u518d\u6b21\u5165\u961f\u5217\uff0c\u5982\u679c\u5165\u8fc7\u4e86\u5c31\u66f4\u65b0\u5b83\u7684\u503c\u3002\n\n\n\u4ee5\u4e0a\u5c31\u662fSPFA\u7684\u539f\u7406\u3002\n\n\n\u5177\u4f53\u89e3\u91ca\u770b\u4ee3\u7801\u3002\n\n\nPS\uff1a\u5176\u5b9e\u66b4\u529bDFS\u4e5f\u662f\u53ef\u4ee5\u9a97\u5206\u7684\u3002\n\n\n\u5f53\u7136\u5730\u6cfd\u65af\u7279\u62c9\u548c\u8d1d\u5c14\u66fc\u798f\u5fb7\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u8d85\u65f6\u2018\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>//\u5934\u6587\u4ef6\n#define maxn 100100\n#define maxm 5000100\n#define inf 2147483647//\u65e0\u8111define\nusing namespace std;\nint n,m,p,i,s,t;\nint h[maxm],v[maxm],w[maxm],next[maxm];\nint q[maxn*5],d[maxm];\nbool f[maxn];\nvoid spfa(int start)//\u4ee3\u7801\u5f00\u59cb\n{\n    int head=0,tail=1;\n    q[1]=start;\n    f[start]=true;//\u5165\u961f\u5217\n    while(head<tail)//\u64cd\u4f5c\u961f\u5217\n      {\n          head++;\n          i=q[head];//\u51fa\u961f\u5217\n          f[i]=false;//\u6ce8\u610f\u4e00\u5b9a\u8981\u66f4\u6539\u503c\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u91cd\u590d\u5165\u961f\u5217\n          p=h[i];//\u4e0b\u4e00\u6761\u8fb9\n          while(p>0)\n            {\n                if(d[i]+w[p]<d[v[p]])//\u677e\u5f1b\u64cd\u4f5c\n                  {\n                      d[v[p]]=d[i]+w[p];\n                      if(f[v[p]]==false)//\u5982\u679c\u6ca1\u7528\u8fc7\u5c31\u518d\u6b21\u5165\u961f\u5217\n                        {\n                            tail++;\n                            q[tail]=v[p];\n                            f[v[p]]=true;\n                        }\n                  }\n                p=next[p];//\u4e0b\u4e00\u6761\u8fb9\n            }\n      }\n}\nvoid add(int i,int j,int k)//\u90bb\u63a5\u8868\u5b58\u56fe\n{\n    p++;\n    w[p]=k;\n    v[p]=j;\n    next[p]=h[i];\n    h[i]=p;\n}\nint main()\n{\n    int x,y,z;\n    cin>>n>>m>>s;//\u8f93\u5165\n    for(int i=1;i<=n;i++)//\u4e5f\u53ef\u4ee5\u7528memset\n      d[i]=inf;\n    d[s]=0;//\u8d77\u70b9\u96440\n    for(int i=1;i<=m;i++)\n      {\n       scanf(\"%d%d%d\",&x,&y,&z);\n       add(x,y,z);\n      }\n    spfa(s);\n    for(int i=1;i<=n;i++)\n      {\n          printf(\"%d \",d[i]);//\u8f93\u51fa\n      }\n    return 0;//\u7ed3\u675f\n}\n```",
        "postTime": 1502788851,
        "uid": 16864,
        "name": "\u4e52\u4e53\u9ad8\u624b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u867d\u8bf4\u662fdijkstra\u7684\u6a21\u677f\uff0c\u4f46\u5355\u7eaf\u7684dijkstra\u662f\u8fc7\u4e0d\u4e86\u7684\uff0c\u8fd9\u91cc\u9700\u8981\u7528\u7684STL\u7684\u4f18\u5148\u961f\u5217\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u5806\u4f18\u5316\u7684dijkstra\uff0c\u867d\u8bf4\u770b\u5230\u697c\u4e0b\u5df2\u6709\u5927\u795e\u7528\u4e86\u8fd9\u79cd\u4f18\u5316\uff0c\u4f46\u5e76\u4e0d\u662f\u8bf4\u7684\u5f88\u660e\u767d\uff0c\u6240\u4ee5\u6211\u6765\u8865\u5145\u4e0b\u5bf9\u5806\u4f18\u5316\u7684dijkstra\u7b97\u6cd5\u7684\u8bf4\u660e\u3002\n\n\n\u9996\u5148\u662f\u9700\u8981\u4e00\u4e2apair\uff0c\u7528\u6765\u653e\u4ece\u6e90\u70b9\u5230\u6307\u5b9a\u70b9\u7684\u8ddd\u79bb\u548c\u6307\u5b9a\u70b9\uff0c\u7136\u540e\u89c1\u4e00\u4e2apair\u7c7b\u578b\u7684\u4f18\u5148\u961f\u5217\uff08\u6700\u5c0f\u5806\uff09\uff0c\u957f\u5ea6\u77ed\u7684\u5c31\u5728\u961f\u9996\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u6709\u70b9\u50cf\u7528\u961f\u5217\u4f18\u5316spfa\uff0c\u5f53\u961f\u5217\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u4f9d\u6b21\u53d6\u51fa\u6ca1\u6709\u786e\u5b9a\u7684\u70b9\uff0c\u901a\u8fc7\u8be5\u70b9\u8fdb\u884c\u677e\u5f1b\uff0c\u8fd9\u5c31\u662fdijkstra\u4e86\u3002\u5927\u4f53\u4e0a\u5c31\u662f\u8fd9\u4e2a\u601d\u60f3\u3002\n\n\u9644\u4e0aAC\u4ee3\u7801\uff0c\u4e5f\u662f\u4e00\u4e2a\u5f88\u5e38\u7528\u7684\u6a21\u677f\u3002\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int MAX_E = 500010, MAX_P = 10010, INF = 2147483647;\ntypedef pair<int, int> pii;\npriority_queue<pii, vector<pii>, greater<pii> > q;\nstruct edge {\n    int v, w, next;\n} e[MAX_E];\nint head[MAX_P], dis[MAX_P], tot, n, m, s;\nbool vis[MAX_P];\nvoid add(int a, int b, int c) {\n    e[++tot].v = b;\n    e[tot].w = c;\n    e[tot].next = head[a];\n    head[a] = tot;\n}\nvoid init() {\n    int i;\n    for (i = 1; i <= n; i++) {\n        head[i] = -1;\n        dis[i] = INF;\n    }\n} \nvoid  dijkstra(int s) {\n    int i;\n    dis[s] = 0;\n    q.push(make_pair(dis[s], s));\n    while (!q.empty()) {\n        pii tmp = q.top();\n        q.pop();\n        int x = tmp.second;\n        if(vis[x]) continue;\n        else {\n            vis[x] = true;\n            for(i = head[x]; i + 1; i = e[i].next) {//i+1\u5c31\u662fi\uff01=-1\uff0c\u56e0\u4e3ahead\u6570\u7ec4\u521d\u59cb\u5316\u4e3a-1\n                if(dis[e[i].v] > dis[x] + e[i].w) {\n                    dis[e[i].v] = dis[x] + e[i].w;\n                    q.push(make_pair(dis[e[i].v], e[i].v));    \n                }\n            }\n        }\n    }\n}\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &s);\n    int i, f, g, w;\n    init();\n    for (i = 1; i <= m; i++) {\n        scanf(\"%d%d%d\", &f, &g, &w);\n        add(f, g, w);\n        //add(g, f, w);\u53cc\u5411\u56fe\u65f6\u7528\u7684\n    }\n    dijkstra(s);\n    for (i = 1; i <= n; i++) \n        printf(\"%d \", dis[i]);\n    return 0;\n}\n```",
        "postTime": 1494580857,
        "uid": 16215,
        "name": "\u516c\u5143\u67d0\u5e74\u7684\u732b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u4e2a\u6a21\u677f\u9898\uff0c\u5f88\u663e\u7136\u5e94\u8be5\u5199\u666e\u9002\u6027\u7684\u6a21\u677f\u3002\n\n\u540c\u65f6\u5305\u542b\u4e86\u5206\u652f\u9650\u754c\uff0cDijkstra \u4ee5\u53ca Bellman Ford \u7b97\u6cd5\u3002\n\n\u53e6\u5916\uff0cDij\u6734\u7d2040\uff0cBmF \u4e0d\u5224\u65ad\u677e\u5f1b\u5b8c\u6bd5\u7684\u8bdd70\uff0c\u8fd9\u4f53\u73b0\u4e86\u7b97\u6cd5\u590d\u6742\u5ea6\u76f8\u7b49\uff08\u76f8\u4f3c\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u538b\u4f4e\u5e38\u6570\u7684\u91cd\u8981\u6027\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff0c\u4e3a\u4e86\u63d0\u9ad8\u666e\u9002\u6027\uff0c\u5927\u91cf\u4f7f\u7528\u4e86\u9884\u5904\u7406\u547d\u4ee4\uff08\u4ee3\u7801\u8bf4\u660e\u89c1\u4ee3\u7801\u6ce8\u91ca\uff09\n\nCPP\uff08\u57fa\u672c\u4e0a\u662f C \u7684\u67b6\u6784\uff09\n\n\n    \n    \n\n\n    \n    \n\n    \n    \n\n    \n    \n    \n    \n    \n\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#define min(a,b) (((a)<(b))?(a):(b)) // \u5b9a\u4e49min\n//#define USING_DIJ // \u662f\u5426\u7f16\u8bd1 Dijkstra \u7b97\u6cd5\n#define USING_BMF // \u662f\u5426\u7f16\u8bd1 Bellman Ford \u7b97\u6cd5\n//#define USING_BAB // \u662f\u5426\u7f16\u8bd1 \u5206\u652f\u9650\u754c \u7b97\u6cd5\n#ifdef USING_BAB // \u5982\u679c\u4f7f\u7528\u5206\u652f\u9650\u754c\n#define tagBRANCH_DEF // \u662f\u5426\u7f16\u8bd1 \u5206\u652f\u7ed3\u6784 \u7ed3\u6784\u4f53\n#endif\ntypedef struct tagLINK // \u8fb9\n{\n    int F;\n    int G;\n    int W;\n}LINK;\ntypedef LINK* PLINK ;\n#ifdef tagBRANCH_DEF\ntypedef struct tagBRANCH // \u5206\u652f\n{\n    int dis;\n    int s;\n}BRANCH;\ntypedef BRANCH* PBRANCH;\n#endif\ntypedef int* PINT ;\ntypedef bool* PBOOL ;\n#ifdef USING_DIJ\nPINT Dijkstra(const int N,const int M,const int Start,PLINK links); // 40 \n// \u7528\u6cd5\u662f \u521b\u5efa\u4e00\u4e2a int\u578b\u7684\u6307\u9488 \uff0c \u4ee4\u5176\u7b49\u4e8e Dijkstra(const int N,const int M,const int Start,PLINK links) \n// \u53c2\u6570\u5206\u522b\u4e3a N \uff1a \u70b9\u7684\u6570\u91cf \uff0c M\uff1a\u8fb9\u7684\u6570\u91cf\uff0cStart\uff1a\u5f00\u59cb\u8282\u70b9\uff0clinks\uff1a\u6240\u6709\u8fb9\u6784\u6210\u7684\u6570\u7ec4\n#endif\n#ifdef USING_BMF\nPINT BellmanFord(const int N,const int M,const int Start,PLINK links); // 70 \n// \u7528\u6cd5 \u540cDij \uff0c \u53ea\u662f\u51fd\u6570\u540d\u4e0d\u540c\n#endif\n#ifdef USING_BAB\nPINT Branch_and_Bound(const int N,const int M,const int Start,PLINK links); // 40 \n// \u7528\u6cd5 \u540cDij \uff0c \u53ea\u662f\u51fd\u6570\u540d\u4e0d\u540c\nvoid BAB_EnQuene( PBRANCH& quene , BRANCH state , int& begin , int& end , int& size );//BAB\u8f85\u52a9\u51fd\u6570\nBRANCH BAB_DeQuene( PBRANCH quene , int& begin , int& end  , int& size );// BAB\u8f85\u52a9\u51fd\u6570\n#endif\nint link_cmp(const void* A,const void* B){PLINK a=(PLINK)A,b=(PLINK)B;return a->W - b->W;} // \u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\nint main()\n{\n    int N,M,S;\n    scanf(\"%d%d%d\",&N,&M,&S);\n    S -- ; // \u5c06 S \u4ece 1~N \u91cd\u7f6e\u4e3a 0 ~ N-1\n    PLINK links = (PLINK)calloc(M,sizeof(LINK));\n    for(int i=0;i<M;i++)\n    {\n        scanf(\"%d%d%d\",&links[i].F,&links[i].G,&links[i].W); // \u8bfb\u5165\u8fb9\n        links[i].F -- ;// \u5c06 \u8d77\u70b9 \u4ece 1~N \u91cd\u7f6e\u4e3a 0 ~ N-1\n        links[i].G -- ;// \u5c06 \u7ec8\u70b9 \u4ece 1~N \u91cd\u7f6e\u4e3a 0 ~ N-1\n    }\n    qsort(links,M,sizeof(LINK),link_cmp); // \u6743\u91cd\u5347\u5e8f \n    PINT ans = BellmanFord(N,M,S,links); // \u8c03\u7528BMF \u751f\u6210\u7b54\u6848\u6570\u7ec4 \uff08\u5982\u679c\u4f7f\u7528\u5176\u5b83\u7b97\u6cd5\uff0c\u8bf7\u66f4\u6539\u8c03\u7528\u51fd\u6570\u7684\u51fd\u6570\u540d\uff09\n    for(int i=0;i<N;i++)printf(\"%d%c\",ans[i],((i<N-1)?0x20:0x0A)); // \u8f93\u51fa\u7ed3\u679c\n    free(ans); // \u91ca\u653e\u5185\u5b58\n}\n#ifdef USING_DIJ\nPINT Dijkstra(const int N,const int M,const int Start,PLINK links) // dij \u7b97\u6cd5\n{\n    PINT Distance = (PINT)calloc(N,sizeof(int)); // \u521d\u59cb\u5316\u6700\u77ed\u8ddd\u79bb\u6570\u7ec4\n    PINT dis = Distance ; // \u521b\u5efa\u6700\u77ed\u8ddd\u79bb\u6570\u7ec4\u7684\u522b\u540d dis\n    for(int i=0;i<N;i++)dis[i] = 0x7FFFFFFF; // \u521d\u59cb\u5316\u4e3a INT_MAX\n    dis[Start] = 0 ;\n    PBOOL vis = (PBOOL)calloc(N,sizeof(bool));\n    vis[Start] = true ;\n    for( int SizeofS = 1 ; SizeofS < N ; SizeofS ++ ) // \u6700\u591aN-1\u6b21\n    {\n        int best = 0 , MinL = 0x7FFFFFFF ;  // \u6700\u4f73\u9009\u62e9\u548c\u6700\u77ed\u8def\u957f\u5ea6\n        for(int i=0;i<M;i++)\n        {\n            if( vis[links[i].F] == true && vis[links[i].G] == false )\n            {\n                if( MinL > links[i].W + dis[links[i].F] )\n                {\n                    best = links[i].G ;\n                    MinL = links[i].W + dis[links[i].F] ;\n                }\n            }\n        }\n        if( vis[best] )continue ;\n        vis[best] = true ;\n        dis[best] = MinL ;\n    }\n    free(vis);\n    return Distance;\n}\n#endif\n#ifdef USING_BMF\nPINT BellmanFord(const int N,const int M,const int Start,PLINK links)\n{\n    // \u521d\u59cb\u5316\u90e8\u5206\u540c\u7406\n    PINT Distance = (PINT)calloc(N,sizeof(int));\n    PINT dis = Distance ;\n    for(int i=0;i<N;i++)dis[i] = 0x7FFFFFFF;\n    dis[Start] = 0 ;\n    for(int i=0;i<N;i++)\n    {\n        bool changed = false ; // \u672c\u8f6e\u64cd\u4f5c\u6709\u610f\u4e49\n        for(int j=0;j<M;j++)\n        {\n            if( dis[links[j].F] < 0x7FFFFFFF && dis[links[j].G] > dis[links[j].F] + links[j].W ) // \u82e5\u8d77\u70b9\u88ab\u8bbf\u95ee\u4e14\u53ef\u4ee5\u6709\u66f4\u77ed\u7684\u8def\u5f84\n            {\n                dis[links[j].G] = dis[links[j].F] + links[j].W; // \u66f4\u65b0\u6700\u77ed\u8ddd\u79bb\n                changed = true ; \n            }\n        }\n        if( changed == false )break ; //  \u5224\u65ad\u662f\u5426\u884c\u4e3a\u6709\u610f\u4e49\u3002\u4e0d\u52a0\u8fd9\u53e570 \uff0c \u52a0\u4e0a AC  \u3002\n    }\n    return Distance;\n}\n#endif\n#ifdef USING_BAB\nPINT Branch_and_Bound(const int N,const int M,const int Start,PLINK links) // \u5206\u652f\u9650\u754c \uff08\u81ea\u5df1\u597d\u50cf\u6ca1\u6709\u7406\u89e3\u5176\u7cbe\u9ad3\uff0c\u5199\u7684\u7c7b\u4f3c\u4e8eBFS\uff09\n{\n    // \u521d\u59cb\u5316\u90e8\u5206\u540c\u7406\n    PINT Distance = (PINT)calloc(N,sizeof(int));\n    PINT dis = Distance ;\n    for(int i=0;i<N;i++)dis[i] = 0x7FFFFFFF;\n    dis[Start] = 0 ;\n    PINT chart_width = (PINT)calloc(N,sizeof(int)); // \u90bb\u63a5\u94fe\u8868\u7684\u5bbd\u5ea6\n    PLINK** chart = (PLINK**)calloc(N,sizeof(PLINK*)); // \u90bb\u63a5\u94fe\u8868\n    for(int i=0;i<N;i++)chart[i] = (PLINK*)calloc(M,sizeof(PLINK)); // \u5206\u914d\u90bb\u63a5\u94fe\u8868\u7a7a\u95f4\n    for(int i=0;i<M;i++)\n    {\n        chart[links[i].F][chart_width[links[i].F]] = links + i ;\n        chart_width[links[i].F] ++ ;\n    }\n    PBRANCH quene = (PBRANCH)calloc( N*N ,sizeof(BRANCH));\n    int quene_begin = 0 , quene_end = 0 , quene_size = N*N ;\n    for(int i=0;i<chart_width[Start];i++)BAB_EnQuene( quene , (BRANCH){chart[Start][i]->W,chart[Start][i]->G} , quene_begin , quene_end , quene_size );\n    while( quene_begin != quene_end ) // \u5f53\u961f\u5217\u4e2d\u6709\u5143\u7d20\n    {\n        BRANCH state = BAB_DeQuene( quene , quene_begin , quene_end , quene_size ); // \u51fa\u961f\n        if( state.dis <  dis[state.s] ) // \u5982\u679c\u5c0f\u4e8e\u5f53\u524d\u6700\u77ed\u8ddd\u79bb\n        {\n            dis[state.s] = state.dis ;\n            for(int i=0;i<chart_width[state.s];i++)\n            {\n                if( state.dis + chart[state.s][i]->W < dis[chart[state.s][i]->G] )\n                {\n                    BRANCH temp = { state.dis + chart[state.s][i]->W , chart[state.s][i]->G };\n                    BAB_EnQuene( quene , temp , quene_begin , quene_end  , quene_size );\n                }\n            }\n        }\n    }\n    for(int i=0;i<N;i++)free(chart[i]); // \u91ca\u653e\u6240\u6709\u7a7a\u95f4\n    free(chart);    free(chart_width);\n    free(quene);\n    return dis ;\n}\nvoid BAB_EnQuene( PBRANCH& quene , BRANCH state , int& begin , int& end , int& size ) // \u5165\u961f\n{\n    quene[end] = state ;\n    end = (end+1) % size ;\n    return ;\n}\nBRANCH BAB_DeQuene( PBRANCH quene , int& begin , int& end  , int& size ) // \u51fa\u961f\n{\n    BRANCH temp = quene[begin];\n    begin = (begin+1)% size ;\n    return temp;\n}\n#endif\n```",
        "postTime": 1493284865,
        "uid": 30310,
        "name": "RedContritio",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "###**STL\u7248Dijkstra**\n\n**\u82b1\u4e86\u597d\u957f\u65f6\u95f4\u624dAC\u4e86\uff0c\u4e0d\u5bb9\u6613\u554aTAT**\n\n**\u8fd9\u6b21\u7684\u9898\u89e3\u4f7f\u7528\u4e86\u4e00\u4e9b\u6bd4\u8f83\u597d\u7528\u7684\u6a21\u677f\uff0c\u521d\u5b66STL\u7684\u540c\u5b66\u53ef\u4ee5\u62ff\u6765\u7ec3\u7ec3\u624b\uff1a**\n\n1. priority\\_queue\n\n2. vector\n\n3. pair(\u4e00\u4e2a\u5947\u602a\u7684\u4e1c\u897f\u3002\u3002\u3002\n\n**\u7b97\u6cd5\u539f\u7406\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u4e0b\u9762\u8d34\u4ee3\u7801**\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<utility>\n#include<queue>\n#include<vector>\n#define Heap pair<int,int>\n#define Inf 2147483647\nusing namespace std;\nstruct data {\n    int from,to;\n    int w;    \n}edge[500005];\nvector<int> poin[10005];\nint s,n,m;\nint v[10005];\nint main()\n{\n    int i,j;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(i=1;i<=m;i++) {\n        scanf(\"%d%d%d\",&edge[i].from,&edge[i].to,&edge[i].w);\n        poin[edge[i].from].push_back(i);\n    }\n    //start\n    for(i=1;i<=n;i++) v[i]=Inf;\n    priority_queue< Heap,vector<Heap>,greater<Heap> > Q;\n    v[s]=0;\n    Q.push(make_pair(0,s));\n    while(!Q.empty()) {\n        Heap N=Q.top();\n        Q.pop();\n        int u=N.second;\n        if(v[u]!=N.first) continue;\n        for(int i=0;i<poin[u].size();++i) {\n            data e=edge[poin[u][i]];\n            if(v[e.to]>v[u]+e.w){\n                v[e.to]=v[u]+e.w;\n                Q.push(make_pair(v[e.to],e.to));\n            }\n        }\n    }\n    for(i=1;i<=n;i++) printf(\"%d \",v[i]);\n    return 0;\n}\n```",
        "postTime": 1489655872,
        "uid": 15157,
        "name": "\u53f8\u5f92\u51b0\u96e8",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u5206\u6790\uff1a\n\n\n\u5355\u6e90\u6700\u77ed\u8def\uff0c\u770b\u4e86\u770b\u6570\u636eN<=10000\uff0cM<=500000\u7528bellman\u2014\u2014ford\u4f1a\u8d85\u65f6\uff0c\u5355\u7eaf\u7684\u7528dijkstra\u4e5f\u8981\u8d85\u65f6\uff0c\u5148\u8bb2\u4e00\u4e0bdijkstra\u7b97\u6cd5\u7684\u601d\u60f3\uff1bdijkstra\u7b97\u6cd5\u5305\u62ec\u4e24\u4e2a\u6b65\u9aa4\uff1a1\u627e\u5230\u6700\u77ed\u8ddd\u79bb\u5df2\u7ecf\u786e\u5b9a\u7684\u70b9\u30022\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u786e\u5b9a\u76f8\u90bb\u7684\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u5728\u6700\u5f00\u59cb\u53ea\u6709s\u2014\u2014s\u7684\u6700\u77ed\u8def\u5f84\u662f\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u5148\u4eces\u5f00\u59cb\uff0c\u90a3\u4e48\u5982\u679c\u6a21\u62df\u51fa\u6765\uff0c\u5b9a\u4e49d[i]\u8868\u793a\u4eces\u5230i\u53f7\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\n\u4ee3\u7801\uff1a\n\n\n\u590d\u5236\u4ee3\u7801\n\n\n \n\n```cpp\n#include<cstdio>\n#include<iostream>\n#define ll long long \n#define INF 2147483647\nusing namespace std;\nint n,m,s;\nll cost[10010][10010];\nll d[10010]; \nbool used[10010];\nvoid dijkstra(int s){\n    fill(d,d+n+1,INF);\n    fill(used,used+n+1,false);\n    d[s]=0;\n    while(1){\n        int v=-1;\n        for(int u=1;u<=n;u++)\n            if(!used[u]&&(v==-1||d[u]<d[v])) v=u;\n        if(v==-1) break;\n        used[v]=true;\n        for(int u=1;u<=n;u++)\n            d[u]=min(d[u],d[v]+cost[v][u]);\n    }\n}\nint main(){\n    for(int i=0;i<=10001;i++)\n        for(int j=0;j<=10001;j++) if(i!=j) cost[i][j]=INF;\n    cin>>n>>m>>s;\n    for(int i=1;i<=m;i++){\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        cost[u][v]=w;\n    }\n    dijkstra(s);\n    for(int i=1;i<=n;i++) printf(\"%lld \",d[i]);\n    cout<<endl;\n    return 0;\n}\n```\n\u590d\u5236\u4ee3\u7801\n\u8fd9\u4e2a\u7a0b\u5e8f\u590d\u6742\u5ea6\u662fv\\*v\u7684\u5f88\u660e\u663e\u5bf9\u4e8e\u9898\u76ee\u4e2d\u7684\u6570\u636e\u8303\u56f4\u8981\u8d85\u65f6\u7684\uff0c\u60f3\u60f3\u600e\u4e48\u4f18\u5316\uff0c\u53d6\u51fa\u6700\u5c0f\u503c\u3002\u3002\u3002\u3002\u60f3\u5230\u4ec0\u4e48\u4e86\uff0c\u5c0f\u9876\u5806\uff0c\u5bf9\uff0c\u53ef\u4ee5\u7528\u5c0f\u9876\u5806\u7ef4\u62a4\u6700\u77ed\u8def\u5f84\uff0c\u7528\u90bb\u63a5\u8868\u6765\u7ef4\u62a4\u8fb9\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86ElogV\uff0c\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u7b80\u5355\u6613\u61c2\uff1b\n\n\n\u4f18\u5316\u7248\n\n\n\u590d\u5236\u4ee3\u7801\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#define ll long long \n#define INF 2147483647\nusing namespace std;\nint n,m,s,head[50010],ecnt;\nll d[10010]; \nbool used[10010];\nstruct edge{\n    int to,next,w;\n}es[500010];\nvoid addedge(int u,int v,int w){\n    es[ecnt].to=v;\n    es[ecnt].next=head[u];\n    es[ecnt].w=w;\n    head[u]=ecnt++;\n```\n}//\u90bb\u63a5\u8868\u5b58\u8fb9\u3002\n```cpp\ntypedef pair<int,int> P;//\u7528\u4e8e\u5b58\u5230\u8fbe\u70b9\u7684\u6700\u77ed\u8def\u5f84\nvoid dijkstra(int s){\n    priority_queue<P,vector<P>,greater<P> > q;//\u6309\u7167P\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u53d6\u51fa\u7684\u961f\u5217\n    fill(d,d+n+1,INF);\n    fill(used,used+n+1,false);\n    d[s]=0;\n    q.push(P(0,s));\n    while(!q.empty()){\n        P p=q.top();q.pop();\n        int u=p.second;\n        if(used[u]) continue;\n        used[u]=true;\n        int pp=head[u];\n        while(pp!=-1){\n            int v=es[pp].to;\n            if(!used[v]&&d[v]>d[u]+es[pp].w){\n                d[v]=d[u]+es[pp].w;\n                q.push(P(d[v],v));\n            }\n            pp=es[pp].next;\n        }\n    }\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    cin>>n>>m>>s;\n    for(int i=1;i<=m;i++){\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        addedge(u,v,w);\n    }\n    dijkstra(s);\n    for(int i=1;i<=n;i++) printf(\"%lld \",d[i]);\n    putchar('\\n');\n    return 0;\n}\n```\n\u590d\u5236\u4ee3\u7801\n\u603b\u7ed3\uff1a\u6ca1\u4ec0\u4e48\u603b\u7ed3\u7684\uff0c\u8fd9\u4e2a\u662fdijkstra\u7b97\u6cd5\u7684\u6a21\u677f\u3002\n\n[\u70b9\u6211\u8fdb\u535a\u5ba2](http://www.cnblogs.com/zzozz/p/6378526.html)\n",
        "postTime": 1487821932,
        "uid": 23195,
        "name": "zzozz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "#SPFA\u7b97\u6cd5\n\n##\u6709\u4e00\u4e9b\u4eba\u8bf4SPFA\u66b4\u6b7bTLE\uff0c\u4f46\u6211\u5168AC\u4e86\u5440...\n\n#SPFA\u539f\u7406\n\n\u8bbe\u7acb\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u961f\u5217\u7528\u6765\u4fdd\u5b58\u5f85\u4f18\u5316\u7684\u7ed3\u70b9\uff0c\u4f18\u5316\u65f6\u6bcf\u6b21\u53d6\u51fa\u961f\u9996\u7ed3\u70b9u\uff0c\u5e76\u4e14\u7528u\u70b9\u5f53\u524d\u7684\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u503c\u5bf9\u79bb\u5f00u\u70b9\u6240\u6307\u5411\u7684\u7ed3\u70b9v\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u5982\u679cv\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u503c\u6709\u6240\u8c03\u6574\uff0c\u4e14v\u70b9\u4e0d\u5728\u5f53\u524d\u7684\u961f\u5217\u4e2d\uff0c\u5c31\u5c06v\u70b9\u653e\u5165\u961f\u5c3e\u3002\u8fd9\u6837\u4e0d\u65ad\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u7ed3\u70b9\u6765\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u76f4\u81f3\u961f\u5217\u7a7a\u4e3a\u6b62\u3002\n\n#\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <string.h>\nusing namespace std;\n#define uint unsigned int\n#define ll long long\n#define ull unsigned ll\n#define pii pair<int,int>\n#define pb push\\_back\n#define mp make\\_pair\n#define INF 2147483647\n#define LINF 9999999999\n#define ms(l) memset(l,0,sizeof(l))\n\nuint n,m,spoint;\nuint dis[10001];\nclass Edge{\npublic:\n    uint to,cost;\n};\nvector<Edge> data[10000];\n\nvoid addedge(uint fr,uint to,uint co){\n    Edge e1;\n    e1.to = to; e1.cost = co;\n    data[fr].pb(e1);\n}\n\nvoid spfa(void){\n    queue<uint> q;        bool at[10001];\n    q.push(spoint);        ms(at);\n    for(uint i = 1;i <= n;i++)\n        dis[i] = INF;\n    dis[spoint] = 0;    at[spoint] = 1;\n    while(!q.empty()){\n        uint u;\n        u = q.front();\n        q.pop();            at[u] = 0;\n        for(uint i = 0;i < data[u].size();i++)\n            if(dis[u]+data[u][i].cost < dis[data[u][i].to]){\n                dis[data[u][i].to] = dis[u]+data[u][i].cost;\n                if(!at[data[u][i].to]){\n                    at[data[u][i].to] = 1;\n                    q.push(data[u][i].to);\n                }\n            }\n    }\n}\nint main(){\n    //freopen(\"i.txt\",\"r\",stdin);\n    cin >> n >> m >> spoint;\n    for(uint i = 1;i <= m;i++){\n        uint f,t,c;\n        cin >> f >> t >> c;\n        addedge(f,t,c);\n    }\n    spfa();\n    for(uint i = 1;i <= n;i++)\n        cout << dis[i] << ' ';\n    cout << endl;\n    return 0;\n}",
        "postTime": 1479469048,
        "uid": 25630,
        "name": "interestingLSY",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u9644\u5e26\u6b64\u9898\u6211\u7528\u5404\u79cd\u65b9\u6cd5\u7684\u603b\u65f6\u95f4\uff1a\n\nSPFA\uff1a689ms\n\nSPFA\u53cc\u4f18\u5316\uff1a627ms\n\ndijkstra\u5806\u4f18\u5316\uff1a617ms\n\n\u88f8dijkstra\uff1a2194ms\uff08\u7b80\u76f4\u4e86\uff09\n\n\u4ee5\u4e0b\u6211\u5c31\u7ed9\u51faSPFA\u7684\u53cc\u4f18\u5316\u4ee5\u53caDijkstra\u7684\u5806\u4f18\u5316\u4e24\u79cd\u65b9\u6cd5\u5427\n\n\n\n\u53cc\u4f18\u5316\u7248SPFA\u2014\u2014PASCAL\u515a\u7684\u798f\u5229\uff1a\u4f17\u6240\u5468\u77e5SPFA\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u7a33\u5b9a\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u8457\u540d\u7684\u4f18\u5316\uff1aSLF\u548cLLL\n\n\nSLF\u4f18\u5316\uff1a\u5c06\u65b0\u52a0\u5165\u7684\u7ed3\u70b9\u4e0e\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u961f\u9996\u66f4\u4f18\u5219\u52a0\u5165\u961f\u9996\uff0c\u5426\u5219\u52a0\u5165\u961f\u5c3e\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u5c3d\u53ef\u80fd\u7684\u628a\u6bcf\u6b21\u677e\u5f1b\u53d8\u5f97\u66f4\u6709\u6548\n\n\nLLL\u4f18\u5316\uff1a\u961f\u9996h\u51fa\u961f\u65f6\uff0c\u5047\u8bbe\u5168\u961f\u7684\u8ddd\u79bb\u5e73\u5747\u503c\u4e3aaver\uff0c\u5982\u679cd[q[h]]>aver\u5219\u628a\u5f53\u524d\u961f\u9996\u653e\u5230\u961f\u5c3e\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a<=aver\u7684\u518d\u8fdb\u884c\u677e\u5f1b\n\n\n\u636e\u7f51\u4e0a\u67d0\u4e00\u5927\u795e\u6240\u8bf4\uff0cSLF\u80fd\u4f18\u531610%-20%\uff0c\u53cc\u4f18\u5316\u80fd\u5feb\u51e0\u4e4e50%\u3002\n\n\n\u4e0d\u77e5\u4e3a\u4f55\u6b64\u9898\u6211\u52a0\u4e0a\u4f18\u5316\u540e\u867d\u7136\u786e\u5b9e\u5feb\u4e86\u4e00\u4e9b\uff0c\u4f46\u662f\u6548\u679c\u5e76\u975e\u90a3\u4e48\u660e\u663e\uff0c\u53ef\u80fd\u662f\u6b64\u9898\u7684\u6570\u636e\u4e0d\u662f\u5f88\u6b8b\u66b4\u5427\u3002\u4f46\u662f\u8fd9\u4e24\u79cd\u4f18\u5316\u7684\u65b9\u6cd5\u8fd8\u662f\u503c\u5f97\u63a8\u8350\u7684\n\n\n\n\n```cpp\nconst max=2147483647;\nvar d,f,last:array[0..10000] of longint;\n    e,next,w:Array[1..600000] of longint;\n    q:array[-10000..5000000] of longint;//\u6ce8\u610f\u5bf9\u4e8e\u6211\u7684\u4ee3\u7801\u6765\u8bf4\uff0c\u961f\u5217\u8981\u5f00\u5230\u8d1f\u6570\uff0c\u4e0d\u7136\u4f1aRE\uff0c\u5177\u4f53\u539f\u56e0\u5f80\u4e0b\u770b\u5c31\u77e5\u9053\u4e86\n    x,y,z,i,j,k,m,n,s,h,t,p,po,poo,tot,now:longint;aver:double;\nbegin\n    assign(input,'P3371.in');reset(input);\n    readln(n,m,s);\n    for i:=1 to m do\n    begin\n        readln(x,y,z);\n        e[i]:=y;w[i]:=z;next[i]:=last[x];last[x]:=i;\n    end;\n    h:=0;t:=1;\n    for i:=0 to n do\n      d[i]:=max;\n    d[s]:=0;f[s]:=1;q[1]:=s;aver:=0;tot:=0;\n    while h<t do\n    begin\n        inc(h);\n        while d[q[h]]>aver do//LLL\u4f18\u5316\u7684\u6bd4\u8f83\u64cd\u4f5c\n        begin\n            inc(t);\n            q[t]:=q[h];\n            inc(h);\n        end;\n        dec(tot,d[q[h]]);\n        if t=h then aver:=tot else aver:=tot/(t-h);//\u5982\u679ch=t\u90a3\u4e48\u961f\u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0caver=tot/1\n        p:=last[q[h]];\n        while p<>0 do\n        begin\n            po:=e[p];\n            if d[q[h]]+w[p]<d[po] then\n            begin\n                d[po]:=d[q[h]]+w[p];\n                if f[po]=0 then\n                begin\n                    f[po]:=1;\n                    if (d[po]<=d[q[h+1]])and(h+1<t) then//SLF\u4f18\u5316\u64cd\u4f5c\n                    begin\n                        poo:=q[h];\n                        q[h]:=po;now:=h;\n                        dec(h);//\u4e00\u4e0d\u5c0f\u5fc3\u53ef\u80fdh\u5c31\u5c0f\u4e8e0\u4e86\n                        q[h]:=poo;\n                    end else\n                    begin\n                        inc(t);\n                        q[t]:=po;now:=t;\n                    end;\n                    inc(tot,d[q[now]]);\n                    aver:=tot/(t-h);\n                end;\n            end;\n            p:=next[p];\n        end;\n        f[q[h]]:=0;\n    end;\n    for i:=1 to n do\n      write(d[i],' ');\nend.\n```\n\u7ee7\u7eedpascal\u798f\u5229\uff1a\u5199\u4e86\u4e00\u904d\u5806\u4f18\u5316\u7684dijkstra\u7b97\u6cd5\uff0c\u6bd5\u7adf\u662f\u6a21\u677f\u9898\u5c31\u5f53\u7ec3\u7ec3\u5404\u79cd\u65b9\u6cd5\u4e86\u5427\uff0c\u4e0b\u9762\u4e5f\u6709\u67d0\u4e9b\u795e\u7287\u7684\u5806\u4f18\u5316\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u89c9\u5f97\u6ce8\u91ca\u5199\u5c3d\u91cf\u591a\u4e00\u70b9\u5427....\n\u6211\u4eec\u77e5\u9053dijkstra\u7b97\u6cd5\u6700\u91cd\u8981\u7684\u4e00\u70b9\u5c31\u662f\u6bcf\u6b21\u67e5\u627e\u672a\u67d3\u8272\u7684\u70b9\u4e2d\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\uff0c\u6bcf\u6b21\u90fd\u8981\u679a\u4e3e\u7684\u8bdd\u663e\u7136\u975e\u5e38\u803d\u8bef\u65f6\u95f4\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u88f8\u7684dijkstra\u7b97\u6cd5\u662fO\uff08n^2\uff09\uff0c\u6570\u636e\u5927\u4e00\u70b9\u5c31\u5b8c\u86cb\u3002\u7531\u4e8e\u662f\u6bcf\u6b21\u90fd\u53ea\u6c42\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u8003\u8651\u7528\u5806\u6765\u4f18\u5316\uff08\u6bd5\u7adfpascal\u6ca1\u6709\u4f18\u5148\u961f\u5217\u8fd9\u73a9\u610f\u513f\uff09\u3002\u5806\u6700\u5927\u7684\u4f18\u70b9\u5728\u4e8e\u6bcf\u6b21\u6c42\u6700\u5c0f\u503c\u7684\u65f6\u5019\u90fd\u662flog\u7ea7\u522b\u7684\uff0c\u5c31\u8981\u5feb\u5f88\u591a\uff0c\u6240\u4ee5\u4f18\u5316\u540e\u7684dijkstra\u7b97\u6cd5\u590d\u6742\u5ea6\u57fa\u672c\u4fdd\u6301\u5728O\uff08nlogn\uff09\uff0c\u6bd4\u8d77SPFA\u90fd\u8981\u7a33\u5b9a\u5f88\u591a\n\n```cpp\nconst max=2147483647;\ntype node=record\n     data,num:longint;//data\u5b58\u8ddd\u79bb\u6570\u503c\uff0cnum\u5b58\u6b64\u7ed3\u70b9\u7684\u7f16\u53f7\n     end;\nvar last,f,d:Array[1..10000] of longint;\n    e,next,w:array[1..500000] of longint;\n    dui:Array[0..2000000] of node;//\u5806\u6570\u7ec4\n    i,j,k,m,n,nd,x,y,z,p,t,u,s,po:longint;\nprocedure down(pos:longint);//\u5806\u6709\u8457\u540d\u7684\u4e0a\u4f20\u4e0b\u653e\u8fc7\u7a0b\uff0c\u4e0d\u61c2\u7684\u8fd8\u662f\u5148\u5b66\u4e00\u4e0b\u5806\u7ed3\u6784\u5427\uff0c\u4e5f\u4e0d\u662f\u7279\u522b\u96be\nvar i:longint;k:node;\nbegin\n    i:=pos;k:=dui[pos];\n    if (2*pos<=nd)and(k.data>dui[2*pos].data) then//nd\u4e3a\u5806\u7684\u7ed3\u70b9\u6570\u91cf\n    begin\n        i:=2*pos;\n        k:=dui[2*pos];\n    end;\n    if (2*pos+1<=nd)and(k.data>dui[2*pos+1].data) then\n    begin\n        i:=2*pos+1;\n        k:=dui[2*pos+1];\n    end;\n    if i<>pos then\n    begin\n        dui[i]:=dui[pos];\n        dui[pos]:=k;\n        down(i);\n    end;\nend;\nprocedure up(pos:longint);\nvar i:longint;k:node;\nbegin\n    if pos=1 then exit;\n    if dui[pos].data<dui[pos div 2].data then\n    begin\n        k:=dui[pos];\n        dui[pos]:=dui[pos div 2];\n        dui[pos div 2]:=k;\n        up(pos div 2);\n    end;\nend;\nfunction pop:longint;//\u5f39\u51fa\u5806\u9876\uff0c\u7136\u540e\u518d\u66f4\u65b0\u4e00\u904d\u5806\nbegin\n    pop:=dui[1].num;\n    dui[1]:=dui[nd];\n    dec(nd);\n    if nd<=1 then exit;\n    down(1);\nend;\nbegin\n    assign(input,'P3371.in');reset(input);\n    readln(n,m,s);\n    for i:=1 to m do\n    begin\n        readln(x,y,z);\n        e[i]:=y;\n        next[i]:=last[x];\n        last[x]:=i;\n        w[i]:=z;\n    end;\n    for i:=1 to n do\n      d[i]:=max;\n    d[s]:=0;dui[1].data:=0;dui[1].num:=s;nd:=1;\n    for i:=1 to n do\n    begin\n        u:=pop;\n        while (f[u]=1)and(nd>0) do u:=pop;//\u9ed8\u9ed8\u5730\u5f39\u51fa\u6211\u4eec\u9700\u8981\u7684\u7ed3\u70b9\n        f[u]:=1;\n        p:=last[u];\n        while p<>0 do\n        begin\n            po:=e[p];\n            if (d[u]+w[p]<d[po])and(f[po]=0) then\n            begin\n                d[po]:=d[u]+w[p];\n                inc(nd);\n                dui[nd].num:=po;dui[nd].data:=d[po];\n                up(nd);//\u677e\u5f1b\u540e\u5165\u5806\n            end;\n            p:=next[p];\n        end;\n    end;\n    for i:=1 to n do\n      write(d[i],' ');\nend.\n```",
        "postTime": 1478061982,
        "uid": 14130,
        "name": "The_Dark_Knight",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\nSSSP(\u5355\u6e90\u6700\u77ed\u8def) Summary\n\nSSSP(\u5355\u6e90\u6700\u77ed\u8def)\u7684\u5e38\u89c1\u7b97\u6cd5\u6709\u4e24\u79cd:Dijkstra,SPFA;\n\n\u4e0b\u9762\u7ed9\u51fa\u6709/\u65e0\u4f18\u5316\u7684Dijkstra,SPFA;\n\n\nDijkstra(\u65e0\u4f18\u5316):\n\n\u5b9e\u6d4b2164ms,\u8017\u65f6\u4e3b\u8981\u539f\u56e0\u662f\u67e5\u627e\u6700\u8fd1\u70b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8;\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int INF=2147483647;\nconst int maxn=10000+10;\nconst int maxm=500000+10;\nint n,m,s;\nint fir[maxn],nxt[maxm],to[maxm],val[maxm],cnt;\nvoid add_edge(int u,int v,int w)\n{\n    nxt[++cnt]=fir[u];fir[u]=cnt;to[cnt]=v;val[cnt]=w;\n}\nint dis[maxn],vis[maxn];//vis[i]\u6307i\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\nvoid Dijkstra(int s)\n{\n    for(int i=1;i<=n;i++) dis[i]=INF; dis[s]=0;\n    for(int i=1;i<=n;i++) {\n        int pos,mn=INF;\n        for(int j=1;j<=n;j++) if(!vis[j]&&dis[j]<mn) mn=dis[pos=j];//\u66f4\u65b0\u70b9\u5230\u6e90\u70b9dis\n        vis[pos]=1;\n        for(int e=fir[pos];e;e=nxt[e]) {\n            int v=to[e],w=val[e];\n            if(!vis[v]&&mn+w<dis[v]) dis[v]=mn+w;\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int u,v,w,i=0;i<m;i++) {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add_edge(u,v,w);\n    }\n    Dijkstra(s);\n    for(int i=1;i<=n;i++) printf(\"%d \",dis[i]);\n    return 0;\n}\n```\n\nDijkstra(\u5806\u4f18\u5316):\n\n\u5b9e\u6d4b516ms;\n\n\u5806\u4f18\u5316\u662f\u6307\u5728\u5bfb\u627e\u6700\u8fd1\u70b9\u65f6,\u7528\u5806log\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u70b9,\u7528priority\\_queue(\u5806/\u4f18\u5148\u961f\u5217)\u5b9e\u73b0;\n\n\u8f83\u6734\u7d20\u7b97\u6cd5,\u5229\u7528\u4e86\u5806,\u80fd\u66f4\u5feb\u53d6\u5f97\u6700\u8fd1\u70b9;\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int INF=2147483647;\nconst int maxn=10000+10;\nconst int maxm=500000+10;\nint n,m,s;\nint fir[maxn],nxt[maxm],to[maxm],val[maxm],cnt;\nvoid add_edge(int u,int v,int w)\n{\n    nxt[++cnt]=fir[u];fir[u]=cnt;to[cnt]=v;val[cnt]=w;\n}\nstruct Node {\n    int d,id;\n    Node(){}\n    Node(int d,int id):d(d),id(id){}\n    bool operator < (const Node& rhs) const {\n        return d>rhs.d;//\u91cd\u8f7d<,\u65b9\u4fbf\u5806\n    }\n};\nint dis[maxn],vis[maxn];\nvoid Dijkstra(int s)\n{\n    for(int i=1;i<=n;i++) dis[i]=INF; dis[s]=0;\n    priority_queue<Node>Q;\n    Q.push(Node(0,s));\n    while(!Q.empty()) {\n        Node u=Q.top(); Q.pop();\n        if(vis[u.id]) continue;//\u82e5\u67d0\u4e2a\u70b9\u5df2\u7ecf\u88ab\u66f4\u65b0\u5230\u6700\u4f18,\u5c31\u4e0d\u7528\u518d\u6b21\u66f4\u65b0\u5176\u4ed6\u70b9\n        vis[u.id]=1;\n        for(int e=fir[u.id];e;e=nxt[e]) {\n            int v=to[e],w=val[e];\n            if(u.d+w<dis[v]) {\n                dis[v]=u.d+w;\n                Q.push(Node(dis[v],v));\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int u,v,w,i=0;i<m;i++) {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add_edge(u,v,w);\n    }\n    Dijkstra(s);\n    for(int i=1;i<=n;i++) printf(\"%d \",dis[i]);\n    return 0;\n}\n```\nSPFA(\u65e0\u4f18\u5316):\n\n766ms;\n\u8017\u65f6\u4e3b\u8981\u539f\u56e0\u662f\u53ef\u80fd\u67d0\u4e2a\u80fd\u5c06\u66f4\u591a\u70b9\u5c3d\u53ef\u80fd\u4f18\u5316\u7684,\u5374\u653e\u8fdb\u4e86\u961f\u5c3e;\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int INF=2147483647;\nconst int maxn=10000+10;\nconst int maxm=500000+10;\nint n,m,s;\nint fir[maxn],nxt[maxm],to[maxm],val[maxm],cnt;\nvoid add_edge(int u,int v,int w)\n{\n    nxt[++cnt]=fir[u];fir[u]=cnt;to[cnt]=v;val[cnt]=w;\n}\nint dis[maxn],inq[maxn];\nvoid SPFA(int s)\n{\n    for(int i=1;i<=n;i++) dis[i]=INF; dis[s]=0;\n    queue<int>Q;Q.push(s);\n    while(!Q.empty()) {\n        int u=Q.front(); Q.pop();\n        for(int e=fir[u];e;e=nxt[e]) {\n            int v=to[e],w=val[e];\n            if(dis[u]+w<dis[v]) {\n                dis[v]=dis[u]+w;\n                if(!inq[v]) Q.push(v);\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int u,v,w,i=0;i<m;i++) {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add_edge(u,v,w);\n    }\n    SPFA(s);\n    for(int i=1;i<=n;i++) printf(\"%d \",dis[i]);\n    return 0;\n}\n\n```\nSPFA(SLF\u4f18\u5316):\n\n\u5b9e\u6d4b497ms;\n\nSLF\u4f18\u5316\u662f\u6307,\u5f53\u524d\u8fdb\u961f\u7684dis\u503c\u4e0e\u961f\u9996\u7684dis\u503c\u6bd4\u8f83,\u82e5<=\u8fdb\u961f\u9996,\u5426\u5219\u8fdb\u961f\u5c3e,\u7528deque(\u53cc\u5411\u961f\u5217)\u5b9e\u73b0;\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int INF=2147483647;\nconst int maxn=10000+10;\nconst int maxm=500000+10;\nint n,m,s;\nint fir[maxn],nxt[maxm],to[maxm],val[maxm],cnt;\nvoid add_edge(int u,int v,int w)\n{\n    nxt[++cnt]=fir[u];fir[u]=cnt;to[cnt]=v;val[cnt]=w;\n}\nint dis[maxn],inq[maxn];\nvoid SPFA(int s)\n{\n    for(int i=1;i<=n;i++) dis[i]=INF; dis[s]=0;\n    deque<int>Q;\n    Q.push_front(s);\n    while(!Q.empty()) {\n        int u=Q.front(); Q.pop_front(); inq[u]=0;\n        for(int e=fir[u];e;e=nxt[e]) {\n            int v=to[e],w=val[e];\n            if(dis[u]+w<dis[v]) {\n                dis[v]=dis[u]+w;\n                if(!inq[v]) {\n                    if(Q.empty()||dis[v]<=dis[Q.front()]) Q.push_front(v);\n                    else Q.push_back(v);\n                    inq[v]=1;\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int u,v,w,i=0;i<m;i++) {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add_edge(u,v,w);\n    }\n    SPFA(s);\n    for(int i=1;i<=n;i++) printf(\"%d \",dis[i]);\n    return 0;\n}\n```\n\u603b\u7ed3:\n\n\u5bf9\u4e8e\u6b64\u9898\u800c\u8a00,\u65f6\u95f4\u6548\u7387:SPFA(ELF\u4f18\u5316)>Dijkstra(\u5806\u4f18)>SPFA>Dijkstra;\n\n\u5b9e\u9645\u4e0aSPFA\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u591f\u7a33\u5b9a,\u6709\u4e9b\u65f6\u5019\u6613\u88ab\u51fa\u9898\u4eba\u5361,\u5efa\u8bae\u4f7f\u7528\u66f4\u7a33\u5b9a\u7684Dijkstra;\n",
        "postTime": 1478011289,
        "uid": 13239,
        "name": "Continue",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "C++\u5b66\u8005\u8bc1\u660e\u4e86\u4e0d\u7528STL\u5e93\u7684SPFA\n\n\u4f46\u662f\u8fd9\u4e2a\u9898\u4e00\u5b9a\u8981\u7528\u90bb\u63a5\u8868\u5440\uff0c\u4e0d\u7136\u8fc7\u4e0d\u4e86\u7684\n\n\u3010\u7f9e\u803b\u7684\u6a21\u677f\u9898\u3011\u6570\u7ec4\u6a21\u62df\u961f\u5217\u4e5f\u662f\u53ef\u4ee5\u7684\uff01\uff01\uff01\n\n```cpp\n#include <cstdio>\n#include<iostream> \n#include <cstring>\nusing namespace std;\nint front[100050],que[500050],dis[100050];bool c[100050]; \nint zs=0;\nstruct hh\n{\n    int to,next,dis;\n}edge[500050];\nvoid cs(int from,int to,int dis)\n{\n    edge[++zs].next=front[from];\n    edge[zs].to=to;\n    front[from]=zs;\n    edge[zs].dis=dis;\n}\nint main()\n{\n    int i,j,n,p,cc;\n    scanf(\"%d%d%d\",&n,&p,&cc);\n    for (i=1;i<=p;i++)\n      {\n          int x,y,diss;\n          scanf(\"%d%d%d\",&x,&y,&diss);\n          cs(x,y,diss);\n      }\n    int minn=2139062143;\n    int mi=0;\n    memset(c,0,sizeof(c));\n    memset(que,0,sizeof(que));\n    memset(dis,0x7f,sizeof(dis));\n    int head=0,tail=1;\n    que[1]=cc;c[cc]=true;dis[cc]=0;\n    do{\n        head++;\n        int x=que[head];\n        c[x]=false;//\u5343\u4e07\u4e0d\u8981\u5fd8\u4e86\u53bb\u6807\u8bb0\u3002 \n        for (i=front[x];i!=0;i=edge[i].next)\n          if (edge[i].dis+dis[x]<dis[edge[i].to])\n          {\n              dis[edge[i].to]=edge[i].dis+dis[x];\n             if (!c[edge[i].to])\n              {\n                  tail++;\n                  que[tail]=edge[i].to;\n                  c[edge[i].to]=true;\n            } \n         }\n        }while (head<tail);\n    for (i=1;i<=n;i++)\n      if (dis[i]==2139062143) printf(\"2147483647 \");\n      else printf(\"%d \",dis[i]);\n}\n```",
        "postTime": 1477743328,
        "uid": 17774,
        "name": "wwyx2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def\u6709\u4e24\u79cd\u6bd4\u8f83\u5feb\u901f\u7684\u601d\u8def\uff0c\u4e00\u662f\u5806\u4f18\u5316dij\uff0c\u4e00\u662fspfa\n\n1\u3001\u5806\u4f18\u5316dij\n\n\u6548\u7387 O\uff08v\\*lgn\uff09\n\n\u6d41\u7a0b\n\u5047\u8bbe\u5b58\u5728G=<V,E>\uff0c\u6e90\u9876\u70b9\u4e3aV0\uff0cU={V0},dist[i]\u8bb0\u5f55V0\u5230i\u7684\u6700\u77ed\u8ddd\u79bb\uff0cpath[i]\u8bb0\u5f55\u4eceV0\u5230i\u8def\u5f84\u4e0a\u7684i\u524d\u9762\u7684\u4e00\u4e2a\u9876\u70b9\u3002\n\n1.\u4eceV-U\u4e2d\u9009\u62e9\u4f7fdist[i]\u503c\u6700\u5c0f\u7684\u9876\u70b9i\uff0c\u5c06i\u52a0\u5165\u5230U\u4e2d\uff1b\n\n2.\u66f4\u65b0\u4e0ei\u76f4\u63a5\u76f8\u90bb\u9876\u70b9\u7684dist\u503c\u3002(dist[j]=min{dist[j],dist[i]+matrix[i][j]})\n\n3.\u76f4\u5230U=V\uff0c\u505c\u6b62\u3002\n\ndij\u53ef\u4ee5\u7528\u5806\u4f18\u5316\u3002\u5c31\u662f\u5f53\u628a\u70b9\u653e\u5165\u6700\u77ed\u8def\u5f84\u96c6\u5408\u7684\u65f6\u5019\uff0c\u628a\u8fb9\u538b\u5165\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u66f4\u65b0\u7684\u65f6\u5019\u76f4\u63a5\u5f39\u51fa\u6765\u3002\u3002\u3002\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#define MAXN 10010\nusing namespace std;\ntypedef pair<int,int>Pair;\nstruct node\n{\n    int u,w,v,next;\n}e[500010];\nint dis[MAXN],st[MAXN];\nbool flag[MAXN];\nint tot,start,n,m,x,y,z;\nvoid add(int x,int y,int z)\n{\n    e[++tot].u=x;\n    e[tot].v=y;\n    e[tot].w=z;\n    e[tot].next=st[x];\n    st[x]=tot;\n}\nint dijsktra(int start)\n{\n    memset(dis,127,sizeof dis);\n    memset(flag,0,sizeof flag);\n    dis[start]=0;\n    priority_queue< Pair,vector<Pair>,greater<Pair> >que;\n    que.push(make_pair(dis[start],start));\n    while (!que.empty())\n    {\n        Pair now=que.top();\n        que.pop();\n        if (flag[now.second]) continue;\n        flag[now.second]=1;\n        for (int i=st[now.second];i;i=e[i].next)\n            if (dis[now.second]+e[i].w<dis[e[i].v])\n            {\n                dis[e[i].v]=dis[now.second]+e[i].w;\n                if (!flag[e[i].v]) que.push(make_pair(dis[e[i].v],e[i].v));\n            }\n    }\n    for (int i=1;i<=n;i++)\n    {\n        if (dis[i]==2139062143)\n            dis[i]=2147483647;\n        printf(\"%d \",dis[i]);\n    }\n}\nmain()\n{\n    scanf(\"%d%d%d\",&n,&m,&start);\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);\n        //add(y,x,z);//\u6709\u5411\u56fe \n    }\n    dijsktra(start);\n}\n```\n2.spfa\u7b97\u6cd5\n\u6d41\u7a0b\n\u521d\u59cb\u5316\uff1a d\u6570\u7ec4\u5168\u90e8\u8d4b\u503c\u4e3aINF\uff08\u65e0\u7a77\u5927\uff09\uff1bp\u6570\u7ec4\u5168\u90e8\u8d4b\u503c\u4e3as\uff08\u5373\u6e90\u70b9\uff09\uff0c\u6216\u8005\u8d4b\u503c\u4e3a-1\uff0c\u8868\u793a\u8fd8\u6ca1\u6709\u77e5\u9053\u524d\u9a71\n\n\u7136\u540ed[s]=0; \u00a0\u8868\u793a\u6e90\u70b9\u4e0d\u7528\u6c42\u6700\u77ed\u8def\u5f84\uff0c\u6216\u8005\u8bf4\u6700\u77ed\u8def\u5c31\u662f0\u3002\u5c06\u6e90\u70b9\u5165\u961f\uff1b\n\n\uff08\u53e6\u5916\u8bb0\u4f4f\u5728\u6574\u4e2a\u7b97\u6cd5\u4e2d\u6709\u9876\u70b9\u5165\u961f\u4e86\u8981\u8bb0\u5f97\u6807\u8bb0vis\u6570\u7ec4\uff0c\u6709\u9876\u70b9\u51fa\u961f\u4e86\u8bb0\u5f97\u6d88\u9664\u90a3\u4e2a\u6807\u8bb0\uff09\n\n\u961f\u5217+\u677e\u5f1b\u64cd\u4f5c\n\n\u8bfb\u53d6\u961f\u5934\u9876\u70b9u\uff0c\u5e76\u5c06\u961f\u5934\u9876\u70b9u\u51fa\u961f\uff08\u8bb0\u5f97\u6d88\u9664\u6807\u8bb0\uff09\uff1b\u5c06\u4e0e\u70b9u\u76f8\u8fde\u7684\u6240\u6709\u70b9v\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u5982\u679c\u80fd\u66f4\u65b0\u4f30\u8ba1\u503c\uff08\u5373\u4ee4d[v]\u53d8\u5c0f\uff09\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0\uff0c\u53e6\u5916\uff0c\u5982\u679c\u70b9v\u6ca1\u6709\u5728\u961f\u5217\u4e2d\uff0c\u90a3\u4e48\u8981\u5c06\u70b9v\u5165\u961f\uff08\u8bb0\u5f97\u6807\u8bb0\uff09\uff0c\u5982\u679c\u5df2\u7ecf\u5728\u961f\u5217\u4e2d\u4e86\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u5165\u961f\n\n\u4ee5\u6b64\u5faa\u73af\uff0c\u76f4\u5230\u961f\u7a7a\u4e3a\u6b62\u5c31\u5b8c\u6210\u4e86\u5355\u6e90\u6700\u77ed\u8def\u7684\u6c42\u89e3\n\n\n\u4ee3\u7801\n\n                \n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\nusing namespace std;\nstruct node\n{\n    int v,l,next;\n}e[500010];\nint vis[10010],dis[10010],st[10010];\nint en,t,c,s,end,start,x,y,z;\nint add(int x,int y,int z)\n{\n    en++;\n    int i=en;\n    e[i].l=y;\n    e[i].v=z;\n    e[i].next=st[x];\n    st[x]=i;\n}\nmain()\n{\n    memset(dis,127,sizeof dis);\n    //memset(st,0,sizeof st);\n    scanf(\"%d%d%d\",&t,&c,&s);\n    for (int i=1;i<=c;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);\n        //add(y,x,z);\n    }\n    start=s;\n    vis[start]=1;\n    dis[start]=0;\n    queue<int>que;\n    que.push(start);\n    while (!que.empty())\n    {\n        int now=que.front();\n        que.pop();\n        int t=st[now];\n        vis[now]=0;\n        while (t!=0)\n        {\n            if (dis[e[t].l]>dis[now]+e[t].v)\n            {\n                dis[e[t].l]=dis[now]+e[t].v;\n                if (vis[e[t].l]==0)\n                {\n                    vis[e[t].l]=1;\n                    que.push(e[t].l);\n                }\n            }\n            t=e[t].next;\n        }\n    }\n    for (int i=1;i<=t;i++)\n    {\n        if (dis[i]==2139062143)\n            dis[i]=2147483647;\n        printf(\"%d \",dis[i]);\n    }\n}\n```",
        "postTime": 1474759035,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u9605\u8bfb\u672c\u6587\u60a8\u9700\u8981\u4e86\u89e3\uff1a\n\n1. \u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe\n2. \u56fe\u7684BFS\u904d\u5386\n3. stl\u4f18\u5148\u961f\u5217\u7684\u4f7f\u7528\n\n\u53ef\u53c2\u8003\uff1a\n[\u56fe\u8bba\u2014\u5efa\u56fe\u4e0e\u904d\u5386](https://www.luogu.org/blog/iceselen/graph-build)\n\n# \u56fe\u8bba\u7b97\u6cd5 - \u6700\u77ed\u8def\n\n## Dijkstra\n\n### \u7b80\u5355\u4ecb\u7ecd\n\nDijkstra\uff08\u8fea\u6770\u65af\u7279\u62c9\uff09\u53ef\u4ee5\u89e3\u51b3\u5355\u6e90\u70b9\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\u3002\u5728\u4e0d\u5e26\u8d1f\u6743\u7684\u56fe\u4e2d\uff0c\u8fd9\u662f\u5df2\u77e5\u7684\u6700\u5feb\u7b97\u6cd5\u3002\n\n- \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO\uff08n^2\uff0c\u4f7f\u7528\u5806\u4f18\u5316\u53ef\u8fbe\u5230O\uff08nlogn)\n\n- \u4f7f\u7528\u8981\u6c42\uff1a\u56fe\u4e2d\u4e0d\u5b58\u5728\u8d1f\u8fb9\u6743\u3002\n\n### \u539f\u7406\n\nDijkstra\u7b97\u6cd5\u91c7\u7528\u7684\u662f\u4e00\u79cd\u8d2a\u5fc3\u7684\u7b56\u7565.\n\n\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4dis\u6765\u4fdd\u5b58\u6e90\u70b9\u5230\u5404\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u548c\u4e00\u4e2a\u4fdd\u5b58\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u7684\u96c6\u5408T\u3002\n\n\u521d\u59cb\u65f6\uff0c\u539f\u70b9 s \u7684\u8def\u5f84\u6743\u91cd\u88ab\u8d4b\u4e3a 0 \uff08dis[s] = 0\uff09\u3002\n\n\u82e5\u5bf9\u4e8e\u9876\u70b9 s \u5b58\u5728\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u8fb9\uff08s,m\uff09\uff0c\u5219\u628adis[m]\u8bbe\u4e3aw\uff08s, m\uff09,\u540c\u65f6\u628a\u6240\u6709\u5176\u4ed6\uff08s\u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\uff09\u9876\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u8bbe\u4e3a\u65e0\u7a77\u5927\u3002\u521d\u59cb\u65f6\uff0c\u96c6\u5408T\u53ea\u6709\u9876\u70b9s\u7136\u540e\uff0c\u4ecedis\u6570\u7ec4\u9009\u62e9\u6700\u5c0f\u503c\uff0c\u5219\u8be5\u503c\u5c31\u662f\u6e90\u70b9s\u5230\u8be5\u503c\u5bf9\u5e94\u7684\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u628a\u8be5\u70b9\u52a0\u5165\u5230T\u4e2d\uff0cOK\uff0c\u6b64\u65f6\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u9876\u70b9\u3002\n\n\u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u770b\u770b\u65b0\u52a0\u5165\u7684\u9876\u70b9\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u9876\u70b9\u5e76\u4e14\u770b\u770b\u901a\u8fc7\u8be5\u9876\u70b9\u5230\u8fbe\u5176\u4ed6\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u662f\u5426\u6bd4\u6e90\u70b9\u76f4\u63a5\u5230\u8fbe\u77ed\u3002\n\n\u5982\u679c\u662f\uff0c\u90a3\u4e48\u5c31\u66ff\u6362\u8fd9\u4e9b\u9876\u70b9\u5728dis\u4e2d\u7684\u503c\u3002\n\n\u7136\u540e\uff0c\u53c8\u4ecedis\u4e2d\u627e\u51fa\u6700\u5c0f\u503c\uff0c\u91cd\u590d\u4e0a\u8ff0\u52a8\u4f5c\uff0c\u76f4\u5230T\u4e2d\u5305\u542b\u4e86\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002\n\n\u7528\u4f2a\u4ee3\u7801\u63cf\u8ff0\u5c31\u662f:\n\n``` cpp\n//G\u4e3a\u56fe\uff1b\u6570\u7ec4d\u4e3a\u6e90\u70b9\u5230\u8fbe\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0cs\u4e3a\u8d77\u70b9\nDijkstra(G, d[], s)\n{\n     \u521d\u59cb\u5316;\n     for(\u5faa\u73afn\u6b21)\n     {\n          u = \u4f7fd[u]\u6700\u5c0f\u7684\u8fd8\u672a\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\u7684\u6807\u53f7;\n          \u8bb0u\u5df2\u88ab\u8bbf\u95ee;\n          for(\u4eceu\u51fa\u53d1\u80fd\u5230\u8fbe\u7684\u6240\u6709\u9876\u70b9v)\n          {\n               if(v\u672a\u88ab\u8bbf\u95ee && \u4ee5u\u4e3a\u4e2d\u4ecb\u70b9\u4f7fs\u5230\u9876\u70b9v\u7684\u6700\u77ed\u8ddd\u79bbd[v]\u66f4\u4f18)\n               {\n                    \u4f18\u5316d[v];\n               }\n          }\n     }\n}\n```\n\n### \u4ee3\u7801\n\nDijksatra\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528\u5806\u4f18\u5316\uff0c\u4f20\u8bf4\u4e2d\u7684\u4f18\u5148\u961f\u5217\u5185\u90e8\u5c31\u662f\u7528\u6839\u5b9e\u73b0\u7684\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u8fd1\u4f3c\u7684\u53d8\u6210\u4e86O\uff08nlogn)\u3002\n\n\u4f18\u5148\u961f\u5217\u561b\uff0c\u624b\u5199\u662f\u4e0d\u53ef\u80fd\u624b\u5199\u7684\uff0c\u4e5f\u5c31\u7528\u7528stl\u8fd9\u6837\u5b50\u3002\n\n- \u94fe\u5f0f\u524d\u5411\u661f\u5efa\u7acb\u8fb9 + \u4f18\u5148\u961f\u5217Dijkstra\u6c42\u6700\u77ed\u8def\u5b8c\u6574\u4ee3\u7801\n\n``` cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n\nstruct Edge{\n    int to, nxt;\n    int value;\n    Edge(int a = 0, int b = 0, int c = 0)\n    :to(a),nxt(b),value(c){}\n    //\u521d\u59cb\u5316\u7ed3\u6784\u4f53\n    inline bool operator < (const Edge &tmp) const{\n        return tmp.value < value;\n    }\n    //\u91cd\u8f7d\u5c0f\u4e8e\u7b26\u4ee5\u8ba9\u4f18\u5148\u961f\u5217\u4f7f\u7528\n};\n\nconst int maxn = 1000;\nconst int maxm = 1000;\nconst int INF = 0x3f3f3f3f;\n\nstruct Edge edge[maxm];\nstruct Edge nowedge;\nstruct Edge nextedge;\n\nint head[maxm];\nint dis[maxn];\nbool vis[maxm];\nint n = 0, m = 0, cnt = 1;\n\nstd::priority_queue<Edge> que;\n\nvoid init();\nvoid add(int u, int v, int w);\nvoid dijkstra(int startnode);\n\nint main()\n{\n    init();\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&m);\n    for(register int i = 0; i < m; ++ i){\n        int u = 0, v = 0, w = 0;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add(u, v, w);\n        add(v, u, w);\n    }\n\n    dijkstra(1);\n    return 0;\n}\n\nvoid init()\n{\n    memset(head, -1, sizeof(head));\n    memset(dis, INF, sizeof(dis));\n    memset(vis, 0, sizeof(vis));\n    return;\n}\n\nvoid add(int u, int v, int w)\n{\n    edge[cnt].to = v;\n    edge[cnt].value = w;\n    edge[cnt].nxt = head[u];\n    head[u] = cnt;\n    ++ cnt;\n    return;\n}\n\nvoid dijkstra(int x)\n{\n    dis[x] = 0;//\u628a\u8d77\u70b9\u7684\u521d\u59cb\u503c\u8bbe\u5b9a\u4e3a0;\n    nowedge.to = x;\n    que.push(nowedge);//\u628a\u7b2c\u4e00\u6761\u8fb9\u538b\u5165\u961f\u5217;\n\n    while(! que.empty()){\n        nowedge = que.top();\n        que.pop();\n\n        if(vis[nowedge.to]){\n            continue;\n            //\u5982\u679c\u5f53\u524d\u8fb9\u7684\u4e0b\u4e00\u6761\u8fb9\u5df2\u7ecf\u8d70\u8fc7\uff0c\u8df3\u8fc7\u8fdb\u5165\u4e0b\u4e00\u8f6e\n        }\n\n        vis[nowedge.to] = 1;//\u628a\u8fd9\u6761\u8fb9\u6807\u8bb0\u4e3a\u8d70\u8fc7\n\n        for(int i = head[nowedge.to]; ~ i; i = edge[i].nxt){\n\n            int u = edge[i].to;\n\n            if(! vis[u] && dis[u] > dis[nowedge.to] + edge[i].value){\n                dis[u] = dis[nowedge.to] + edge[i].value;\n                //\u6bd4\u8f83\u5f53\u524d\u904d\u5386\u7684\u8def\u5f84\u548c\u50a8\u5b58\u7684\u8def\u5f84\uff0c\u5982\u679c\u5f53\u524d\u8def\u5f84\u77ed\uff0c\u5c31\u66f4\u65b0\u3002\n                nextedge.to = u;\n                nextedge.value = dis[u];\n                que.push(nextedge);\n                //\u628a\u66f4\u65b0\u540e\u7684\u8def\u5f84\u538b\u5165\u961f\u5217\n            }\n        }\n    }\n    printf(\"%d\\n\",dis[n]);\n    //\u8f93\u51fa\u4ece1\u5230n\u7684\u6700\u77ed\u8def\n    return;\n}\n```\n\n### \u53c2\u8003\u9898\u76ee\n\nluogu P3371 AC\u4ee3\u7801\n\n``` cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n\ninline int read()\n{\n    int a = 0;\n    char x = getchar();\n    bool f = 0;\n    while((x < '0' || x > '9') && x != '-'){\n        x = getchar();\n    }\n    if(x == '-'){\n        f = 1,x = getchar();\n    }\n    while(x >= '0' && x <= '9'){\n        a = a * 10 + x -'0';\n        x = getchar();\n    }\n    return f ? -a : a;\n}\n\nstruct EDGE{\n    int star,to,nxt;\n    int value;\n};\n\nstruct NODE{\n    int w,nownum;\n    inline bool operator < (const NODE &tmp)const{\n        return w > tmp.w;\n    }\n};\n\nconst int maxn = 10200;\nconst int maxm = 500200;\nconst int INF = 2147483647;\n\nstruct EDGE edge[maxm];\nint head[maxn], dis[maxn];\nbool vis[maxn];\nint n = 0, m = 0, cnt = 0;\nint thestart = 0;\n\nstd::priority_queue<NODE> que;\nstruct NODE nownode;\nstruct NODE nextnode;\nvoid init();\nvoid add(int u, int v, int w);\nvoid dijkstra(int thestart);\n\nint main()\n{\n    n = read(); m = read();\n    thestart = read();\n    init();\n\n    for(register int i = 1; i <= m; ++ i){\n        int u = read(); int v = read();\n        int w = read();\n        add(u, v, w);\n    }\n\n    dijkstra(thestart);\n\n    for(int i = 1; i <= n; ++ i){\n        printf(\"%d \",dis[i]);\n    }\n\n    return 0;\n}\n\ninline void init()\n{\n    memset(head, -1, sizeof(head));\n    memset(vis, 0, sizeof(vis));\n    for(register int i = 1; i <= n; ++ i){\n        dis[i] = INF;\n    }\n    return;\n}\n\ninline void add(int u, int v, int w)\n{\n    edge[++ cnt].star = u;\n    edge[cnt].to = v;\n    edge[cnt].value = w;\n    edge[cnt].nxt = head[u];\n    head[u] = cnt;\n    return;\n}\n\nvoid dijkstra(int thestart)\n{\n    dis[thestart] = 0;\n    que.push((NODE){0 , thestart});\n\n    while(! que.empty()){\n        nownode = que.top();\n        que.pop();\n        int topedge = nownode.nownum;\n        if(vis[topedge]) continue;\n        vis[topedge] = 1;\n        for(register int i = head[topedge]; ~ i; i = edge[i].nxt){\n            int nextedge = edge[i].to;\n            if(dis[nextedge] > dis[topedge] + edge[i].value){\n                dis[nextedge] = dis[topedge] + edge[i].value;\n                nextnode.w = dis[nextedge];\n                nextnode.nownum = nextedge;\n                que.push(nextnode);\n            }\n        }\n    }\n\n    return;\n}\n```",
        "postTime": 1567064459,
        "uid": 126411,
        "name": "iceselen",
        "ccfLevel": 0,
        "title": "\u6700\u77ed\u8def\u7b97\u6cd5\u2014\u2014Dijkstra"
    },
    {
        "content": "\u6211\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u662f\u5bf9SPFA\u91c7\u7528SLF\u548cLLL\u8d2a\u5fc3\u4f18\u5316\uff0c\u5177\u4f53\u89e3\u91ca\u8be6\u89c1\u4ee3\u7801\uff1a[\u539f\u6587](http://www.cnblogs.com/vongang/archive/2012/03/05/2380127.html)\n```cpp\n#include<cstdio>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=10005;\nconst int maxm=500005;\nconst ll oo=2147483647;\nstruct char_reader\n{\n\tFILE* f;\n\tchar *buf,*p1,*p2;\n\tint size;\n\tchar_reader(FILE* fin,int bufsize=65536)\n\t{\n\t\tf=fin;\n\t\tsize=bufsize;\n\t\tp1=p2=0;\n\t\tbuf=new char[bufsize];\n\t}\n\tinline int operator()()\n\t{\n\t\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,size,f),p1==p2)?EOF:*p1++;\n\t}\n};\nstruct char_writer\n{\n\tFILE* f;\n\tchar *buf,*p,*end;\n\tchar_writer(FILE* fout,int bufsize=65536)\n\t{\n\t\tf=fout;\n\t\tbuf=new char[bufsize];\n\t\tp=buf;\n\t\tend=buf+bufsize;\n\t}\n\t~char_writer()\n\t{\n\t\tfwrite(buf,p-buf,1,f);\n\t}\n\tinline char operator()(char ch)\n\t{\n\t\treturn end==p&&(fwrite(buf,end-buf,1,f),p=buf),*p++=ch;\n\t}\n};\nchar_reader gch(stdin);\nchar_writer wch(stdout);\ninline void read(int &x)\n{\n\tbool f=true;int ch;\n\tx=0;\n\twhile(ch=gch(),!(ch=='-'||ch>='0'&&ch<='9'));\n\tif(ch=='-') f=false,ch=gch();\n\tx=ch-'0';\n\twhile(ch=gch(),ch>='0'&&ch<='9') x=x*10+ch-'0';\n\tif(!f) x=-x;\n}\ninline int write(ll x)\n{\n\tif(x==0) return wch('0');\n\tif(x<0) wch('-'),x=-x;\n\tstatic char buf[20],top;\n\ttop=0;\n\twhile(x>0) buf[top++]=x%10+'0',x/=10;\n\twhile(top>0) wch(buf[--top]);\n}//\u5feb\u8bfb\nstruct Edge\n{\n\tint to;\n\tll dist;\n\tEdge *next;\n};\nll d[maxn];\nbool vis[maxn];\nEdge *e[maxn],mem[maxm],*ecnt=mem;\nint n,m,s;\ninline void AddEdge(int from,int to,ll dist)\n{//\u94fe\u5f0f\u5411\u524d\u661f\n\tecnt->to=to; ecnt->dist=dist; ecnt->next=e[from];\n\te[from]=ecnt++;\n}\nclass deque\n{//\u53cc\u7aef\u961f\u5217\uff0c\u7528\u4e8e\u5b9e\u73b0SLF\u548cLLL\u8d2a\u5fc3\u4f18\u5316\uff08STL\u6709\u70b9\u513f\u6162\uff09\n\tprivate:\n\t\tint Size;\n\t\tint Q[maxn];\n\t\tint head,tail;\n\tpublic:\n\t\tinline int size() { return Size; }\n\t\tinline int front() { return Q[head]; }\n\t\tinline void pop_front()\n\t\t{\n\t\t\tSize--;\n\t\t\thead=(head+1)%maxn;\n\t\t}\n\t\tinline void push_front(int v)\n\t\t{\n\t\t\tSize++;\n\t\t\thead=(head-1+maxn)%maxn;\n\t\t\tQ[head]=v;\n\t\t}\n\t\tinline void push_back(int v)\n\t\t{\n\t\t\tSize++;\n\t\t\tQ[tail]=v;\n\t\t\ttail=(tail+1)%maxn;\n\t\t}\n\tdeque() { Size=head=tail=0; }\n};\nint main()\n{\n#ifdef local\n\tfreopen(\"pro.in\",\"r\",stdin);\n#endif\n//\tscanf(\"%d%d%d\",&n,&m,&s);\n\tread(n);read(m);read(s);\n\tfor(int i=1;i<=n;i++) d[i]=oo;\n\td[s]=0;\n\tint f,t,dist;\n\tll sum=0;\n\tfor(int i=0;i<m;i++)\n\t{\n//\t\tscanf(\"%d%d%lld\",&f,&t,&dist);\n\t\tread(f);read(t);read(dist);\n\t\tAddEdge(f,t,dist);\n\t}\n\tdeque Q;\n\tQ.push_back(s);\n\tvis[s]=true;\n\twhile(Q.size())\n\t{\n\t\tint u;\n\t\twhile(true)\n\t\t{\n\t\t\tu=Q.front();Q.pop_front();\n\t\t\tif(d[u]*Q.size()<=sum) break;\n\t\t\tQ.push_back(u);\n\t\t}\n/*\nLLL\uff1aLarge Label Last \u7b56\u7565\uff0c\u8bbe\u961f\u9996\u5143\u7d20\u4e3ai\uff0c\u961f\u5217\u4e2d\u6240\u6709dist\u503c\u7684\u5e73\u5747\u503c\u4e3ax\uff0c\n\u82e5dist(i)>x\u5219\u5c06i\u63d2\u5165\u5230\u961f\u5c3e\uff0c\u67e5\u627e\u4e0b\u4e00\u5143\u7d20\uff0c\u76f4\u5230\u627e\u5230\u67d0\u4e00i\u4f7f\u5f97dist(i)<=x\uff0c\u5219\u5c06i\u51fa\u5bf9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u3002\n*/\n\t\tvis[u]=false;\n\t\tsum-=d[u];\n\t\tfor(Edge *it=e[u];it;it=it->next)\n\t\t\tif(d[it->to]>d[u]+it->dist)\n\t\t\t{\n\t\t\t\tif(!vis[it->to])\n\t\t\t\t{\n\t\t\t\t\td[it->to]=d[u]+it->dist;\n\t\t\t\t\tif(Q.size()>0&&d[Q.front()]>d[it->to]) Q.push_front(it->to);\n\t\t\t\t\telse Q.push_back(it->to);\n//SLF\uff1aSmall Label First \u7b56\u7565\uff0c\u8bbe\u8981\u52a0\u5165\u7684\u8282\u70b9\u662fj\uff0c\u961f\u9996\u5143\u7d20\u4e3ai\uff0c\u82e5dist(j)<dist(i)\uff0c\u5219\u5c06j\u63d2\u5165\u961f\u9996\uff0c\u5426\u5219\u63d2\u5165\u961f\u5c3e\u3002\n\t\t\t\t\tvis[it->to]=true;\n\t\t\t\t\tsum+=d[it->to];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsum-=d[it->to];\n\t\t\t\t\td[it->to]=d[u]+it->dist;\n\t\t\t\t\tsum+=d[it->to];\n\t\t\t\t}\n\t\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\twrite(d[i]),wch(' ');\n\twch('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1529992026,
        "uid": 87248,
        "name": "happyZYM",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "Dijkstra\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3aO(ElgV)\n\n<del>\u4f17\u6240\u5468\u77e5</del>Dijkstra\u7b97\u6cd5\u53ef\u4ee5\u7528\u6590\u6ce2\u90a3\u5951\u5806\u8fdb\u884c\u4f18\u5316\uff0c\u590d\u6742\u5ea6\u53d8\u6210O(E+VlgV)\n\n<del>\u5f53\u7136\u4e86\u5982\u6b64\u9ad8\u5927\u4e0a\u7684\u7b97\u6cd5\u5e38\u6570\u4e00\u5b9a\u5f88\u5927\u5566</del>\n\n\u4e0d\u5f00O2 288ms\uff0c\u5f00O2 380ms \u6ca1\u6307\u671b\u6bd4\u666e\u901aDijkstra\u5feb\uff0c\u4f46\u662f\u4f18\u5316\u540e\u53d8\u6162\u4e86\u662fsmg???????\n\n\u4e00\u5b9a\u662f\u6211\u7684\u7b97\u6cd5\u5199\u7684\u592a\u597d\u4e86\uff0c\u7f16\u8bd1\u5668\u6839\u672c\u6ca1\u6cd5\u4f18\u5316\uff0c\u4e0d\u63a5\u53d7\u53cd\u9a73\n\n\n\u6211\u7684\u7a0b\u5e8f\u662f\u4ece\u6211\u5199\u7684\u62bd\u8c61\u7684\u6570\u636e\u7ed3\u6784\u91cc\u9762\u6252\u51fa\u6765\u7684\uff0c\u6240\u4ee5\u5168\u90fd\u662f\u6a21\u677f\uff0c\u770b\u8d77\u6765\u53ef\u80fd\u6bd4\u8f83\u8d39\u52b2\uff0c\u4e0d\u8fc7\u5dee\u4e0d\u591a\u662f\u90a3\u4e2a\u610f\u601d\u5566\n\n\n\u597d\u4e86\u8bf4\u6b63\u7ecf\u7684\uff0c\u6590\u6ce2\u90a3\u5951\u5806\u662f\u4e00\u7ec4\u6811\u7684\u96c6\u5408\uff0c\u6bcf\u7ec4\u6811\u90fd\u6ee1\u8db3\u5c0f\u6839\u5806\u7684\u6027\u8d28\n\n\u6811\u95f4\u7528\u5faa\u73af\u94fe\u8868\u7ec4\u7ec7\uff0c\u8282\u70b9\u7684\u5b69\u5b50\u4e5f\u7528\u5faa\u73af\u94fe\u8868\u7ec4\u7ec7\uff0c\u5bf9\u5e94\u4ee3\u7801\n\n1.Container<Node \\*> roots; //Container\u662fFibHeap\u6a21\u677f\u53c2\u6570\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4f1a\u7ed9\u5b83\u4f20list\n\n2.\nstruct Node\n\n{\nprivate:\n\n```cpp\n    K key;\n    Node *p = nullptr;\n    typename Container<Node *>::iterator self; //\u4e3a\u4e86\u5feb\u901f\u5220\u9664\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58\u81ea\u5df1\u5728\u94fe\u8868\u4e2d\u7684\u8fed\u4ee3\u5668\n    Container<Node*> childs;\n    bool marked = false; //FibHeap\u7b97\u6cd5\u7684\u4e00\u90e8\u5206\n    explicit Node(const K & key) :key(key) {}\n```\npublic:\n\n```cpp\n    friend FibHeap;\n    int degree()const { return childs.size(); } //\u8fd4\u56de\u300c\u5b69\u5b50\u8282\u70b9\u7684\u6570\u76ee\u300d(\u79f0\u4e3a\u5ea6\u6570)\n    const K& getKey() const { return key; }\n};\n```\n\u4fdd\u5b58\u4e00\u4e2amin\u6307\u9488\uff0c\u6bcf\u6b21\u63d2\u8282\u70b9\u76f4\u63a5\u5f80\u6839\u94fe\u8868\u63d2\uff0c\u5e76\u4e14\u6bd4\u8f83\u4e00\u4e0bmin\u548c\u65b0\u8282\u70b9\uff0c\u590d\u6742\u5ea6O(1)\n\n\u7136\u540e\u662f\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u64cd\u4f5c\uff1a\u5f39\u51fa\u6700\u5c0f\u5143\u7d20\u548c\u8282\u70b9\u51cf\u503c\uff0cO(1)\u7684\u5408\u5e76\u4e5f\u5f88\u70ab\u4f46\u662f\u8fd9\u91cc\u6ca1\u7528\u5230\uff0c\u5c31\u4e0d\u8bb2\u4e86\n\n1.\u5f39\u51fa\u6700\u5c0f\u5143\u7d20 \u5747\u644aO(lgn)\n\n```cpp\nvoid pop()\n{\n    for (auto it : min->childs)\n        it->p = nullptr;\n    roots.splice(roots.end(), min->childs);\n    roots.erase(min->self);\n    popFix();\n}\n```\n\u603b\u800c\u8a00\u4e4b\uff0c\u628amin\u6307\u9488\u7684\u5b69\u5b50\u5168\u90e8\u52a0\u5165\u6839\u94fe\u8868\uff0c\u4ece\u6839\u94fe\u8868\u5220\u9664min\uff0c\u7136\u540e\u8c03\u7528popFix()\n\n```cpp\nNode *aux[32];\nvoid popFix()\n{\n    memset(aux, 0, sizeof(aux));\n    for (auto it = roots.begin(); it != roots.end();)\n    {\n        Node *x = *it;\n        ++it; //it\u4e0eit.next\u7684\u8fde\u63a5\u53ef\u80fd\u88ab\u4e0b\u9762\u7684link\u6539\u53d8\uff0c\u6240\u4ee5\u63d0\u524d++\n        while (Node *y = aux[x->degree()])\n        {\n            aux[x->degree()] = nullptr;\n            if (y->key < x->key)\n                link(y, x), x = y;\n            else\n                link(x, y);\n        }\n        aux[x->degree()] = x;\n    }\n    //-----------------------------------\u4ee5\u4e0a\u662f\u524d\u534a\u6bb5\n    //-----------------------------------\u4ee5\u4e0b\u662f\u540e\u534a\u6bb5\n    roots.clear();\n    min = nullptr;\n    for (int i = 0; i < 32; ++i)\n        if (aux[i])\n        {\n            iterator it = roots.insert(roots.end(), aux[i]);\n            aux[i]->self = it;\n            if (!min || aux[i]->key < min->key)\n                min = aux[i];\n        }\n}\n```\npopMin\u51fd\u6570\u6bd4\u8f83\u957f\uff0c\u5206\u524d\u540e\u4e24\u6bb5\u8bb2\n\u524d\u534a\u6bb5\u7684\u76ee\u7684\u662f\u5c3d\u53ef\u80fd\u5408\u5e76\u6839\u94fe\u8868\u4e2d\u7684\u8282\u70b9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u7684\u300c\u5b69\u5b50\u8282\u70b9\u7684\u6570\u76ee\u300d(\u79f0\u4e3a\u5ea6\u6570)\u90fd\u4e0d\u76f8\u540c\uff0c\u4ece\u800c\u51cf\u5c0f\u6811\u7684\u6570\u76ee\n\n\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u7ef4\u6301\u5747\u644aO(lgn)\u7684pop\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u5c31\u9700\u8981\u4e00\u70b9\u6570\u5b66\u8bc1\u660e\uff0c<del>\u6211\u4e0d\u4f1a</del>\n\n\n\u73b0\u5728\u6765\u770b\u5b83\u662f\u600e\u4e48\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u90fd\u4e0d\u76f8\u540c\u7684\n\nwhile (Node \\*y = aux[x->degree()]) \u65e2\u505a\u8d4b\u503c\u4e5f\u505a\u5224\u65ad\uff0c\u5224\u65ad\u8fd9\u4e2a\u5ea6\u6570\u4e4b\u524d\u6709\u6ca1\u6709\u586b\u8fc7\n\n\u6ca1\u6709\u586b\u8fc7\u7684\u8bdd\u8df3\u51fa\u5faa\u73af\uff0c\u628ax\u586b\u5230\u90a3\u91cc\u53bb\n\n\u586b\u8fc7\u7684\u8bdd\uff0c\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u628a\u539f\u6765\u90a3\u4e2a\u548cx\u5408\u5e76\u6210\u4e00\u9897\u6811\uff0c\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5224\u65ad\u4ee5\u4e0b\u8c01\u5927\uff0c\u7136\u540e\u628a\u5927\u7684\u53d8\u6210\u5c0f\u7684\u5b69\u5b50\u5c31\u884c\u4e86\n\n\u8fd9\u662flink\u51fd\u6570\n\nvoid link(Node \\*x, Node \\*y) //\u628ay\u4ece\u6839\u94fe\u8868\u4e2d\u79fb\u9664\u5e76\u4e14\u52a0\u5165x\u7684\u5b69\u5b50\n\n\n```cpp\n{\n    y->marked = false; //\u8282\u70b9\u51cf\u503c\u4e2d\u7684case2\n    y->p = x;\n    x->childs.splice(x->childs.end(), roots, y->self);\n}\n```\n\u540e\u534a\u6bb5\u5f88\u7b80\u5355\uff0c\u6e05\u7a7a\u6839\u94fe\u8868\uff0c\u7136\u540e\u628a\u586b\u597d\u7684\u90a3\u4e9b\u65b0\u6811\u586b\u56de\u6839\u94fe\u8868\uff0c\u5e76\u4e14\u7ef4\u62a4\u4e00\u4e0bmin\n<del>\u6211\u771f\u7684\u5f88\u96be\u76f8\u4fe1\u8fd9\u4e48\u590d\u6742\u7684\u64cd\u4f5c\u5c45\u7136\u662f\u5747\u644aO(lgn)\u7684</del>\n\n\n2.\u8282\u70b9\u51cf\u503c:\u5747\u644aO(1)\n\nmark\u5c5e\u6027\u7684\u542b\u4e49\u662f:\u8be5node\u300c\u5df2\u7ecf\u7ecf\u5386\u4e86\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u7684\u54ea\u4e00\u6b65\u300d\n\n\n```cpp\n-case1:node\u53d8\u6210\u4e86\u6839 -> mark = false\n//\u4f46\u662f\u5b9e\u9645\u4e0a\u524d\u9762\u67d0\u4e00\u6b65\"\u628amin\u7684\u5b69\u5b50\"\u52a0\u5165\u6839\u7684\u65f6\u5019\u5e76\u6ca1\u6709mark\uff0c\u662f\u56e0\u4e3a\u5b9e\u9645\u4e0a\u6839\u7684mark\u5e76\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002\u5206\u6790\u4e00\u4e0b\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\u3002\n-case2:node\u53d8\u6210\u4e86\u522b\u4eba\u7684\u5b69\u5b50 -> mark = false\n-case3:node\u5931\u53bb\u4e86\u4e00\u4e2a\u5b69\u5b50 && mark == false -> mark = true\n-case4:node\u5931\u53bb\u4e86\u4e00\u4e2a\u5b69\u5b50 && mark == true -> mark = false\uff0c\u5e76\u5bf9node\u6267\u884c\u64cd\u4f5c\nvoid decreaseKey(Node *x, const K &key)\n{\n    x->key = key; //\u8bf7\u81ea\u89c9\u4fdd\u8bc1x->key >= key\n    Node *y = x->p;\n    if (y && x->key < y->key)\n    {\n        cut(x);\n        cascadingCut(y);\n    }\n    if (x->key < min->key)\n        min = x;\n}\n```\ndecreaseKey\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u51cf\u503c\uff0c\u8c03\u7528\u4e24\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e0bmin\n\n```cpp\nvoid cut(Node *x) //x\u88ab\u5207\u6389\u5e76\u653e\u5230\u6839\n{\n    roots.splice(roots.end(), x->p->childs, x->self);\n    x->p = nullptr;\n    x->marked = false; //case 1 \u4e2a\u4eba\u611f\u89c9\u53ef\u4ee5\u53bb\u6389\u8fd9\u53e5\u8bdd\uff0c\u4f46\u662f\u7b97\u6cd5\u5bfc\u8bba\u4e0a\u6709\n}\n```\ncut\u4e5f\u5f88\u7b80\u5355\uff0c\u628ax\u5207\u6389\u5e76\u653e\u5230\u6839\u5e76\u4e14\u505a\u9002\u5f53\u7684\u6807\u8bb0\n\n```cpp\nvoid cascadingCut(Node *y)\n{\n    while (y->p) //y\u4e0d\u662f\u6839\n    {\n        if (!y->marked) //\u8282\u70b9\u51cf\u503c\u5728cut(x)\u4e4b\u540e\u7d27\u63a5\u4e00\u6b65cascadingCut(x->p),\u6240\u4ee5\u662fcase3\n        {\n            y->marked = true;\n            break;\n        }\n        Node *tmp = y->p; //cut\u628ay->p\u7f6e\u4e3anullptr\u4e86\uff0c\u6240\u4ee5\u8bb0\u5f55\u4e00\u4e0by->p\n        cut(y); //case4\n        y = tmp;\n    }\n}\n```\n\u6240\u4ee5case4\u4e2d\u7684\"\u64cd\u4f5c\"\u6307\u7684\u662f\u628anode\u5207\u6389\u5e76\u4e14\u653e\u5230\u6839\n\n\u8fd9\u4e9b\u64cd\u4f5c\u548c\u6807\u8bb0\u90fd\u662f\u4e3a\u4e86\u7ef4\u6301\u8282\u70b9\u51cf\u503c\u7684\u5747\u644aO(1)\u590d\u6742\u5ea6\uff0c\u6211\u4e5f\u5f88\u5e0c\u671b\u6211\u80fd\u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u80cc\u540e\u7684\u6570\u5b66\u539f\u7406\uff0c\u4f46\u662f\u5b9e\u5728\u662f\u624d\u758f\u5b66\u6d45\uff0c\u6ca1\u529e\u6cd5\u5b8c\u5168\u7406\u89e3\n\n\n\u6700\u540e\u9644\u4e0a\u5b8c\u6574\u4ee3\u7801\n\n\u6211\u4e4b\u524d\u8fd8\u5199\u8fc7\u4e00\u4e2a\u624b\u5199\u94fe\u8868\u7684\u7248\u672c\uff0c\u53ea\u662fbug\u592a\u591a\u600e\u4e48\u8c03\u4e5f\u8c03\u4e0d\u51fa\u6765\uff0c\u5c31\u5f03\u4e86....\n\n#include <bits/stdc++.h>\n\ntemplate<typename K, template <typename T, typename = std::allocator<T>> class Container>//\u6d1b\u8c37\u7684\u7f16\u8bd1\u5668\u628aclass\u6539\u6210typename\u4f1a\u62a5\u9519,vs\u5c31\u80fd\u7f16\u8bd1\n\nclass FibHeap\n\n{\npublic:\n\n    struct Node\n\n    {\nprivate:\n\n```cpp\n        K key;\n        Node *p = nullptr;\n        typename Container<Node *>::iterator self;\n        Container<Node*> childs;\n        bool marked = false;\n        explicit Node(const K & key) :key(key) {}\n```\npublic:\n```cpp\n        friend FibHeap;\n        int degree()const { return childs.size(); }\n        const K& getKey() const { return key; }\n    };\n    typedef typename Container<Node *>::iterator iterator;\n    Node* push(const K &key)\n    {\n        Node *x = new Node(key);\n        iterator it = roots.insert(roots.end(), x);\n        x->self = it; //\u4e0d\u5199\u5728\u4e00\u884c\uff0c\u56e0\u4e3ax\u65e2\u88ab\u4fee\u6539\u4e5f\u88ab\u53d6\u7528\uff0c\u672a\u5b9a\u4e49\u884c\u4e3a\n        if (!min || key < min->key)\n            min = x;\n        return x;\n    }\n    void decreaseKey(Node *x, const K &key)\n    {\n        x->key = key;\n        Node *y = x->p;\n        if (y && x->key < y->key)\n        {\n            cut(x);\n            cascadingCut(y);\n        }\n        if (x->key < min->key)\n            min = x;\n    }\n    void delNode(Node *x)\n    {\n        decreaseKey(x, 1 << 31);\n        pop();\n    }\n    const K &top() const { return min->getKey(); }\n    void pop()\n    {\n        for (auto it : min->childs)\n            it->p = nullptr;\n        roots.splice(roots.end(), min->childs);\n        roots.erase(min->self);\n        popFix();\n    }\n    void merge(FibHeap &src)\n    {\n        roots.splice(roots.end(), src.roots);\n        if (!min || (src.min&&src.min->key < min->key))\n            min = src.min;\n        src.min = nullptr;\n    }\n    bool empty()const { return roots.empty(); }\n```\nprivate:\n\n\n\n\n\n\n\n```cpp\n    Node *min = nullptr;\n    Container<Node *> roots;\n    void cut(Node *x) //x\u88ab\u5207\u6389\u5e76\u653e\u5230\u6839\n    {\n        roots.splice(roots.end(), x->p->childs, x->self);\n        x->p = nullptr;\n        x->marked = false;\n    }\n    void cascadingCut(Node *y)\n    {\n        while (y->p)\n        {\n            if (!y->marked) //\u8282\u70b9\u51cf\u503c\u5728cut(x)\u4e4b\u540e\u7d27\u63a5\u4e00\u6b65cascadingCut(x->p)\uff0c\u5982\u679cx->\u6ca1\u6709\u6807\u8bb0\u90a3\u4e48\u8fd9\u91cc\u6807\u8bb0\u4e0a\n            {\n                y->marked = true;\n                break;\n            }\n            Node *tmp = y->p;\n            cut(y); //cur\u628ay->p\u7f6e\u4e3anullptr\n            y = tmp;\n        }\n    }\n    Node *aux[32];\n    void popFix()\n    {\n        memset(aux, 0, sizeof(aux));\n        for (auto it = roots.begin(); it != roots.end();)\n        {\n            Node *x = *it;\n            ++it;\n            while (Node *y = aux[x->degree()])\n            {\n                aux[x->degree()] = nullptr;\n                if (y->key < x->key)\n                    link(y, x), x = y;\n                else\n                    link(x, y);\n            }\n            aux[x->degree()] = x;\n        }\n        roots.clear();\n        min = nullptr;\n        for (int i = 0; i < 32; ++i)\n            if (aux[i])\n            {\n                iterator it = roots.insert(roots.end(), aux[i]);\n                aux[i]->self = it;\n                if (!min || aux[i]->key < min->key)\n                    min = aux[i];\n            }\n    }\n    void link(Node *x, Node *y) //\u628ay\u4ece\u6839\u94fe\u8868\u4e2d\u79fb\u9664\u5e76\u4e14\u52a0\u5165x\u7684\u5b69\u5b50\n    {\n        y->marked = false;\n        y->p = x;\n        x->childs.splice(x->childs.end(), roots, y->self);\n    }\n};\ntypedef std::vector<int> vi;\ntypedef std::pair<int, int> pii;\nconst int inf = 0x3f3f3f3f;\nconst int maxn = 1e4 + 10;\nint d[maxn];\nint vCnt, eCnt;\nstruct Edge\n{\n    int to, w;\n    Edge(int _to, double _w) : to(_to), w(_w) {}\n};\ntypedef std::vector<Edge> ve;\nve edges[maxn];\ntypedef typename FibHeap<pii, std::list>::Node Node;\nNode *nodes[maxn];\nvoid dijkstra(int s)\n{\n    memset(d, 0x3f, sizeof(d));\n    FibHeap<pii, std::list> fib;\n    for (int i = 1; i <= vCnt; ++i) //O(1)*V\n        if (i != s)\n            nodes[i] = fib.push({ inf ,i });\n        else\n            nodes[i] = fib.push({ 0,i });\n    d[s] = 0;\n    while (!fib.empty())\n    {\n        pii cur = fib.top();\n        fib.pop(); //O(lgV)*V\n        int v = cur.second, dis = cur.first;\n        d[v] = dis;\n        ve &e = edges[v];\n        for (int i = 0; i < e.size(); ++i)\n        {\n            int to = e[i].to;\n            if (d[v] + e[i].w < d[to]) //O(1)*E\n            {\n                d[to] = d[v] + e[i].w;\n                fib.decreaseKey(nodes[to], { d[to],to });\n            }\n        }\n    }\n}\ninline int read()\n{\n    static char ch;\n    bool sgn = false;\n    while ((ch = getchar()) < '0' || ch > '9')\n        if (ch == '-')\n            sgn = true;\n    int res = ch - 48;\n    while ((ch = getchar()) >= '0' && ch <= '9')\n        res = res * 10 + ch - 48;\n    return sgn ? -res : res;\n}\nint main()\n{\n    vCnt = read(), eCnt = read();\n    int s = read();\n    while (eCnt--)\n    {\n        int from = read(), to = read(), w = read();\n        edges[from].push_back(Edge(to, w));\n    }\n    dijkstra(s);\n    for (int i = 1; i <= vCnt; ++i)\n        printf(\"%d \", d[i] == inf ? 2147483647 : d[i]);\n    return 0;\n}\n\n```",
        "postTime": 1516462514,
        "uid": 68618,
        "name": "MashPlant",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u4e00\u9053\u9002\u5408\u5728noip\u4e4b\u524d\u5237\u7684\u6a21\u677f\u9898\uff0c\u6709\u4e00\u4e9b\u7ec6\u8282\u8981\u6ce8\u610f\uff1a\n\n1\u3001\u672c\u9898\u4e3a\u65e0\u5411\u56fe\uff08\u56e0\u4e3a\u770b\u6210\u65e0\u5411\u56fe\u800c\u72060\u7684\u849f\u84bb\uff09\n\n2\u3001N<=10000\uff0cM<=500000\u8bf4\u660e\u53ea\u80fd\u7528\u90bb\u63a5\u8868\u800c\u975e\u90bb\u63a5\u77e9\u9635\n\n\u5269\u4e0b\u7684\u5c31\u53ea\u662f\u6807\u51c6\u7684spfa\u4e86\n\n```cpp\n#include<iostream>\n#include<string>\n#include<string.h>\n#include<stdio.h>\n#include<algorithm> \nusing namespace std;\nstruct node{\n    int a,b,w;\n}sq[1000500];\n```\nint visit[500500],dist[500500],n,m,s,\ninde[500500],team[500500];//inde\u5b58\u7684\u662f\u6bcf\u4e2a\u70b9\u5728\u56fe\u4e2d\u6709\u51e0\u6761\u8fde\u5411\u5176\u4ed6\u70b9\u7684\u8fb9\uff0c\u597d\u50cf\u4e0d\u80fd\u7528index\u505a\u6570\u7ec4\u540d\n\nbool cmp(node x,node y)\n\n{\n    return ((x.a<y.a) || ((x.a==y.a) && (x.b<y.b)));\n\n}//\u5bf9sq\u6392\u5e8f\uff0c\u65b9\u4fbf\u5728spfa\u65f6\u5faa\u73af\n\n\n\n\n```cpp\nvoid spfa()\n{\n    int i,j,f=0,r=1;\n    memset(visit,0,sizeof(visit));\n    for (i=1;i<=n;i++) dist[i]=21474836;\n    dist[s]=0;team[r]=s;visit[s]=1;\n    while (f<r)\n    {\n        f++;i=team[f];\n        for (j=inde[i-1]+1;j<=inde[i];j++)\n        {\n            if (dist[i]+sq[j].w<dist[sq[j].b])\n            {\n              dist[sq[j].b]=dist[i]+sq[j].w;\n              if (!visit[sq[j].b])\n              {r++;visit[sq[j].b]=1;team[r]=sq[j].b;}\n            }\n        }\n        visit[i]=0;\n    }\n}\nvoid out()\n{\n    int i;\n    for (i=1;i<=m;i++)\n      cout << sq[i].a << ' ' << sq[i].b << ' ' << sq[i].w << endl;\n     for (i=1;i<=n;i++)\n       cout << inde[i] << ' ';\n      cout  << endl; \n}\nint main()\n{\n    int i;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    memset(inde,0,sizeof(inde)); \n    for (i=1;i<=m;i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        sq[i].a=x;sq[i].b=y;sq[i].w=z;\n        inde[x]++;\n    }\n    sort(sq+1,sq+1+m,cmp);\n    for (i=1;i<n;i++) inde[i+1]+=inde[i];//\u50a8\u5b58\u524d\u7f00\u548c\uff0c\u65b9\u4fbf\u5faa\u73af\n    //out();\n    spfa();\n    for (i=1;i<=n;i++)\n      if (dist[i]==21474836) printf(\"2147483647 \"); \n      else printf(\"%d \",dist[i]);\n    return 0;\n}\n```",
        "postTime": 1510241942,
        "uid": 11622,
        "name": "EncodeTalker",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def\u7684\u7b97\u6cd5\u697c\u4e0b\u5df2\u7ecf\u4ecb\u7ecd\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cdDijkstra\u7684\u5947\u5f02\u4f18\u5316\u3002\n\n\u697c\u4e0b\u4f3c\u4e4e\u5df2\u7ecf\u662f\u6709\u4e86\u5806\u4f18\u5316\u4e86\u5427\uff0c\u800c\u5bf9\u4e8eDijkstra\uff0c\u65e2\u7136\u8981\u67e5\u8be2\u5f53\u524d\u70b9\u4e2ddis\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4f55\u4e0d\u91c7\u7528\u7ebf\u6bb5\u6811\u5462\uff1f\n\n\u6bcf\u53d6\u4e00\u4e2a\u70b9\uff0c\u628a\u5b83\u7684\u503c\u6539\u6210max\\_int\u8868\u793a\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u5176\u4ed6\u7684\u70b9\u7684\u503c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\uff0c\u6bcf\u6b21\u67e5\u8be2\u6574\u4e2a\u7ebf\u6bb5\u6811\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u7136\u540e\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff0c\u6bd4\u5982\u8bf4\u7ebf\u6bb5\u6811\u5b58\u4e0b\u7684\u662f\u70b9\u7684\u7f16\u53f7\uff0c\u8fd9\u6837\u4f1a\u597d\u5199\u4e00\u70b9\u5427\u3002\n\n\n\u5927\u6982\u590d\u6742\u5ea6\u4e5f\u662fmlogn\u5427\uff0c\u4f46\u5e38\u6570\u5927\u6982\u4f1a\u6bd4priority\\_queue\u5c0f\u4e00\u70b9\u5427\uff0c\u8fd8\u8dd1\u7684\u633a\u5feb\u7684 192ms\u3002\n\n\n\u5177\u4f53\u770b\u4ee3\u7801\u5427\u3002\n\n\n```cpp\n#ifndef X_CPP\n#define X_CPP\n#include<cstdio>\n#include<cstring>\n#define Files \"work\"\nusing namespace std;\n#undef read\n#undef write\n#ifdef Files\n#undef redir\n#define redir(name) freopen(name\".in\",\"r\",stdin),freopen(name\".out\",\"w\",stdout)\nextern inline char gc(){\n    static char buf[1<<17],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<17,stdin),p1==p2)?EOF:*p1++;\n}\n#else\n#undef gc\n#define gc getchar\n#endif\ntemplate <class T>\nextern inline void read(T&n){\n    int sign=1;register char ch=gc();\n    for(n=0;(ch<'0'||ch>'9')&&ch!='-';ch=gc());\n    for(ch=='-'?ch=gc(),sign=-1:0;ch>='0'&&ch<='9';ch=gc()) n=(n<<1)+(n<<3)+ch-'0';\n    n*=sign;\n}\n#ifdef Files\nnamespace out {\n    char buf[1<<17],*p1=buf,*p2=buf+(1<<17);\n}\nusing namespace out;\nextern inline void pc(register char ch) {\n    *(p1++)=ch,p1==p2?fwrite(buf,1,p1-buf,stdout),p1=buf:0;\n}\n#else\n#undef pc\n#define pc putchar\n#endif\ntemplate <class T>\nextern inline void write(T val) {\n    if(val<0) pc('-'),val=-val;\n    if(!val) pc('0');\n    register int num=0;\n    char ch[24];\n    while(val) ch[++num]=val%10+'0',val/=10;\n    while(num) pc(ch[num--]);\n}\n#ifndef _STL_ALGOBASE_H\n#undef max\n#undef min\ntemplate <class T> inline T max(const T a,const T b){return a>b?a:b;}\ntemplate <class T> inline T min(const T a,const T b){return a<b?a:b;}\n#endif\ntemplate <class T> inline void ckmax(T&a,const T b){a<b?a=b:0;}\ntemplate <class T> inline void ckmin(T&a,const T b){a>b?a=b:0;}\nconst int N=10010,M=500010;\nint pre[N],nx[M],to[M],w[M],cnt;\ninline void add(int u,int v,int c){\n    nx[++cnt]=pre[u],pre[u]=cnt,to[cnt]=v,w[cnt]=c;\n}\nint tree[N<<2];\nint dis[N],n,m,s;\nint leaf;\ninline void build(){\n    leaf=1; memset(dis,0x3f,sizeof(dis));\n    while(leaf<=n) leaf=leaf<<1;--leaf;\n    for(register int i=1;i<=n;++i) tree[i+leaf]=i;\n}\ninline int ck(unsigned short i,unsigned short j){\n    return dis[i]<dis[j]?i:j;\n}\ninline void change(int x,int y){\n    dis[x]=y,x+=leaf,x=x>>1;\n    while(x) tree[x]=ck(tree[x<<1],tree[x<<1|1]),x=x>>1;\n}\nint ans[N];\ninline void dj(){\n    build();\n    register unsigned short u=s,tot=0;;\n    dis[s]=0;\n    while(tot<=n){\n        ++tot,ans[u]=dis[u];\n        const int disu=dis[u];change(u,0x7fffffff);\n        for(register int e=pre[u];e;e=nx[e])\n            if(dis[to[e]]<0x7fffffff&&dis[to[e]]>disu+w[e]) change(to[e],disu+w[e]);\n        u=tree[1];\n    }\n}\nint main(){\n#ifdef Files\n    if(fopen(Files\".in\",\"r\")) redir(Files);\n#endif\n    read(n),read(m),read(s);\n    for(register int i=1,u,v,c;i<=m;++i) read(u),read(v),read(c),add(u,v,c);\n    dj();\n    for(register int i=1;i<=n;++i) write(ans[i]==0x3f3f3f3f?2147483647:ans[i]),pc(' ');\n#ifdef Files\n    fwrite(buf,1,p1-buf,stdout);\n#endif\n    return 0;\n}\n#endif\n```",
        "postTime": 1507816997,
        "uid": 31511,
        "name": "dormantbs",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u6211\u6765\u5199\u4e00\u4e2aC++\u7248\u6307\u9488\u90bb\u63a5\u8868\u7684\u9898\u89e3.\u8fd9\u4e2a\u9898\u76ee\u5df2\u7ecf\u6709\u4e0d\u5c11\u9898\u89e3,\u5199\u8fd9\u4e2a\u9898\u89e3\u7684\u539f\u56e0\u662f\u5927\u5bb6\u5927\u591a\u6570\u4ecb\u7ecd\u7684\u662f\u524d\u5411\u661f\u4e4b\u7c7b\u7684\u7b97\u6cd5,\u6ca1\u6709\u6307\u9488\u90bb\u63a5\u8868,\u7136\u800c\u76f8\u4fe1\u5199\u6307\u9488\u90bb\u63a5\u8868\u7684\u540c\u5b66\u4e5f\u4e0d\u5c11.\n\n\u601d\u8def:Bellman-Ford\u7b97\u6cd5,\u5916\u52a0SPFA\n\n\u5148\u8ddf\u5927\u5bb6\u8bf4\u4e00\u8bf4\u4e3a\u4ec0\u4e48\u9009BF\u7b97\u6cd5\u5427.\u6700\u77ed\u8def\u4e3b\u8981\u6709\u4e09\u79cd\u7b97\u6cd5,Floyd,Dijkstra\u548cBellman-Ford.\n\n\u9996\u5148\u770b\u65f6\u95f4\u590d\u6742\u5ea6 Floyd\u662fO(N^3) (\u6307N\u7684\u4e09\u6b21\u65b9,\u4e0b\u540c,\u4e0d\u662f\u4f4d\u8fd0\u7b97),Dijkstra\u662fO(MlogN+NlogN),Bellman-Ford\u662fO(NM)\n\n\u4e8e\u662fFloyd\u5c31\u9996\u5148\u88ab\u6392\u9664\u6389\u4e86.\n\n\u7a7a\u95f4\u590d\u6742\u5ea6 Floyd O(N^2) \u5269\u4e0b\u4e24\u79cd\u90fd\u662fO(M) \u6ca1\u6709\u95ee\u9898\n\n\u9002\u7528\u60c5\u51b5,dijkstra\u548cFloyd\u90fd\u6bd4\u8f83\u9002\u5408\u7a20\u5bc6\u56fe,\u56e0\u4e3a\u5b83\u4eec\u90fd\u548c\u9876\u70b9\u5bc6\u5207\u76f8\u5173,\u800cBellman-Ford\u8f83\u9002\u7528\u7a00\u758f\u56fe,\u56e0\u4e3a\u8ddf\u8fb9\u5bc6\u5207\u76f8\u5173.\n\n\u800c\u9898\u4e2dm\u8fdc\u5c0f\u4e8en^2,\u6240\u4ee5\u7528Bellman-Ford\n\n\u4ee3\u7801\u89e3\u91ca\u89c1\u6ce8\u91ca\n\n\n\n```cpp\n#include <iostream>\nusing namespace std;\nconst int maxn=10005,maxm=500005;    //\u5927\u5bb6\u52a1\u5fc5\u6ce8\u610f\u6570\u636e\u8303\u56f4\nconst int inf=2147483647;    //\u56e0\u4e3a\u9898\u76ee\u5982\u679c\u4e0d\u8054\u901a\u5c31\u8f93\u51fa2147483647,\u6240\u4ee5inf\u8bbe\u6210\u8fd9\u4e2a\u6570\nstruct Node\n{\n    int v,c;\n    Node *next;\n}*h[maxn],pool[maxm];    //\u6807\u51c6\u6307\u9488\u90bb\u63a5\u8868\nint n,m,i,j,k;\nint dis[maxn],vis[maxn];  //dis[x]\u6307\u8d77\u59cb\u70b9\u79bbx\u7684\u6700\u77ed\u8ddd\u79bb,vis\u8868\u793a\u662f\u5426\u5728\u961f\u5217\u91cc\nint q[maxm],head=1,tail=1;    //spfa\u7684\u961f\u5217\nint tot=0;\nint root;\nvoid addEdge(int u, int v, int c)    //\u52a0\u8fb9\n{\n    Node *p=&pool[++tot];\n    p->v=v;\n    p->c=c;\n    p->next=h[u];\n    h[u]=p;\n}\nint main()\n{\n    cin>>n>>m>>root;\n    for(int i=1;i<=n;i++) dis[i]=inf;    //\u521d\u59cb\u5316\n    dis[root]=0;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;\n        addEdge(x,y,z);\n    }\n    q[tail]=root;\n    tail++;\n    vis[root]=1;     //\u8d77\u59cb\u70b9\u5165\u961f\n    while(head<tail)\n    {\n        k=q[head];\n        for(Node *p=h[k];p;p=p->next)   //\u904d\u5386k\u8fde\u7740\u7684\u6240\u6709\u70b9.\u7b2c\u4e8c\u4e2a\u5206\u53f7\u91cc\u7684p\u5b9e\u9645\u4e0a\u662fp!=NULL\u7684\u7b80\u5199\n        {\n            if(dis[p->v]>dis[k]+p->c)    //Bellman-Ford\u6838\u5fc3\u8bed\u53e5,\u677e\u5f1b\n            {\n                dis[p->v]=dis[k]+p->c;\n                if(vis[p->v]==0)\n                {\n                    q[tail]=p->v;    //\u5165\u961f\n                    tail++;\n                    vis[p->v]=1;\n                }\n            }\n        }\n        vis[q[head]]=0;    //\u51fa\u961f\n        head++;\n    }\n    for(int i=1;i<=n;i++) \n    {\n        cout<<dis[i]<<' ';\n    }\n    return 0; \n}\n\n```",
        "postTime": 1507205000,
        "uid": 38212,
        "name": "mydiplomacy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u5355\u6e90\u6700\u77ed\u8def\u5f84\u6700\u5feb\u7684\u7528\u8d1d\u5c14\u66fc\u798f\u7279\u7b97\u6cd5\n\n\u7a0d\u5fae\u4f18\u5316\u4e86\u4e00\u4e0b\n\n\u5927\u6982\u601d\u8def\u5c31\u662f\n\n\u5148\u628a\u6240\u6709\u70b9\u5230\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u5b9a\u4e3a\u65e0\u7a77\u5927\n\n\u5982\u679c\u6709\u76f4\u63a5\u5230\u7684\u5c31\u9644\u521d\u503c\n\n\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u70b9\u770b\u80fd\u5426\u901a\u8fc7\u8fd9\u4e2a\u70b9\u4f7f\u5176\u4ed6\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u51cf\u77ed\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nstruct note\n{\n    int start;\n    int end;\n    int length;\n};\nint cmp(const note &a,const note &b)\n{\n    if(a.start<b.start)\n        return 1;\n    if(a.start>b.start)\n        return 0;\n    if(a.end<b.end)\n        return 1;\n    return 0;\n}\nstruct note que[500005];\nint main()\n{\n    int i,k,n,m,s;\n    int con[10005]={0},dis[10005];\n    int dui[50010],book[10005];\n    int head=1,tail=2;\n    scanf(\"%d %d %d\",&n,&m,&s);\n    for(i=1;i<=n;i++)\n        dis[i]=9999999;    \n    dis[s]=0;\n    for(i=1;i<=m;i++)\n        scanf(\"%d %d %d\",&que[i].start,&que[i].end,&que[i].length);\n    sort(que+1,que+1+m,cmp);\n    for(i=1;i<=m;i++)\n        if(que[i].start!=que[i-1].start)\n            con[que[i].start]=i;\n    dui[1]=s;\n    book[s]=1;\n    while(tail>head)\n    {\n        if(con[dui[head]]==0)\n        {\n            head++;\n            continue;\n        }\n        i=con[dui[head]];        \n        while(que[i].start==dui[head])\n        {\n            if(dis[que[i].end]>dis[que[i].start]+que[i].length)\n            {\n                dis[que[i].end]=dis[que[i].start]+que[i].length;\n                if(book[que[i].end]==0)\n                {\n                    dui[tail]=que[i].end;\n                    book[dui[tail]]=1;\n                    tail++;\n                }\n            }\n            i++;\n        }\n        book[dui[head]]=0;\n        head++;\n    }\n    for(i=1;i<=n;i++)\n        if(dis[i]==9999999)\n            printf(\"2147483647 \");\n        else\n            printf(\"%d \",dis[i]);\n    return 0;\n}\n\n```",
        "postTime": 1506441094,
        "uid": 50748,
        "name": "chenzijie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u5f31\u9e21\u82b1\u4e86\u597d\u4e45\u3002\u3002\n\n\u8fd9\u4e2a\u662f\u4e2adijkstra\u7684\u4f18\u5148\u961f\u5217\u4f18\u5316\uff0c\u7528\u7684vector \u5b58\u50a8\u8fb9\n\n\u4e4b\u524d\u6570\u7ec4\u5f0010000\u5c31SE\u4e86 \u5f00\u5927\u679c\u7136\u597d\u4e86\u3002\u3002\n\n\u8fd8\u6709STL\u5927\u6cd5\u597d 233\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<utility>\n#include<vector>\n#include<queue>\n#define MAXN 20000\n#define INF 2147483647\nusing namespace std;\ntypedef pair<int,int> pii;\npriority_queue<pii,vector<pii>,greater<pii> > pq;\nstruct edge\n{\n    int to;\n    int cost;\n};\nvector<edge> G[MAXN];//g[i]--i to g[i].to cost cost\nint n,m,s;\nint dis[MAXN];\nvoid dijk(int s)\n{\n    for(int i=1;i<=n;i++)\n        dis[i]=INF;\n    dis[s]=0;\n    pq.push(make_pair(0,s));\n   // cout<<dis[s]<<endl;\n    while(!pq.empty())\n    {\n        pii u = pq.top();\n        pq.pop();\n        int x = u.second; // bian hao\n        //cout<<x<<endl;\n        for(int i=0;i<G[x].size();i++)\n        {\n            edge e=G[x][i];\n            if(dis[e.to]>dis[x]+e.cost)\n            {\n                dis[e.to]=dis[x]+e.cost;\n                pq.push(make_pair(dis[e.to],e.to));\n               // cout<<dis[e.to]<<endl;\n            }\n        }\n    }\n}\nint main()\n{\n    cin>>n>>m>>s;\n    int from,to,cost;\n    edge in;\n    for(int i=0;i<m;i++)\n    {\n        scanf(\"%d%d%d\",&from,&to,&cost);\n        in.to=to; in.cost=cost;\n        G[from].push_back(in);\n    }\n   // cout<<endl;\n    dijk(s);\n    for(int i=1;i<=n;i++)\n        printf(\"%d \",dis[i]);\n    return 0;\n}\n\n```",
        "postTime": 1505028216,
        "uid": 47468,
        "name": "MadCreeper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u9053\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u9898\uff08\u6a21\u677f\uff09\uff0c\u5e94\u8be5\u662f\u9700\u8981\u7528\u5230Dijstra\u6216\u8005Bellman\u2014Ford,\u672c\u849f\u84bb\u7528\u7684\u662fBellman\u2014Ford\uff08\u6ca1\u6709\u7528\u961f\u5217\u6765\u4f18\u5316\uff0c\u4f46\u662f\u8fd8\u662f\u52a0\u4e86\u4f18\u5316\uff09\uff0c\u7528Bellman\u2014Ford\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO\uff08NM\uff09\uff0c\u52a0\u4e0a\u4f18\u5316\uff0c\u4e5f\u5e94\u8be5\u4e0d\u4f1aTLE\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint u[500001],v[500001],w[500001];//u\u5b58\u50a8\u7b2ci\u6761\u4fe1\u606f\u4e2d\u7684\u51fa\u53d1\u70b9\uff0c\u540c\u7406-----\nlong long dis[500001];//\u70b9 s \u5230\u7b2ci\u70b9\u7684\u8ddd\u79bb\nint n,m,s;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout.tie(NULL);//\u8fd9\u91cc\u52a0\u4e86\u52a0\u901fcin,cout\u9632\u6b62TLE\n   cin>>n>>m>>s;\n   for(int i=1;i<=n;i++)\n       dis[i]=2147483647;\u628a\u6bcf\u6761\u8fb9\u5148\u9644\u6210\u8fd9\u4e2a\u503c\uff0c\u65b9\u4fbf\u8f93\u51fa\n       dis[s]=0;//s\u5230s\u663e\u7136\u662f0\n   for(int i=1;i<=m;i++)\n   {\n       cin>>u[i]>>v[i]>>w[i];//\u8f93\u5165\u7b2ci\u6761\u4fe1\u606f\n   }\n   for(int i=1;i<=n-1;i++)//\u6807\u51c6Bellman_ford\n   {\n          int ch=0;//\u5224\u65ad\u5728\u677e\u5f1b\u4e2d\u662f\u5426\u8fd8\u4f1a\u66f4\u65b0\n          for(int j=1;j<=m;j++)\n          {\n              if(dis[v[j]]>dis[u[j]]+w[j]) \n              {\n                  ch=1;//\u66f4\u65b0\u4e86\n                   dis[v[j]]=dis[u[j]]+w[j];\u56e0\u4e3av[j]\u662f\u4e00\u4e2a\u70b9\u7684\u7f16\u53f7\uff0c\u800cn<=10000\u6240\u4ee5\u6570\u7ec4\u4e0d\u4f1a\u7206\n              }\n          }\n          if(ch==0) break;//\u518d\u4e5f\u66f4\u65b0\u4e0d\u4e86\u4e86\n   }\n   for(int i=1;i<=n;i++) cout<<dis[i]<<\" \";\n    return 0;\n}\n\n```",
        "postTime": 1503241438,
        "uid": 37408,
        "name": "Randyhoads",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "###SPFA+SLF\u4f18\u5316\n\n\u672c\u9898\u662f\u4e2a\u6a21\u677f\u9898\uff0c\u5177\u4f53\u8bf4\u660e\u5c31\u653e\u5728\u4ee3\u7801\u4e2d\u4e86QWQ\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<deque>\nusing namespace std;\nstruct arr{\n    int nd,nx;\n    long long co;\n}bot[1000000];\nint head[11000];\nlong long dis[11000];\nint f[11000];\nint n,m,s,cnt;\ndeque<int>q;//\u5b9a\u4e49\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\ninline void add(int u,int v,int w){bot[++cnt].nd=v;bot[cnt].co=w;bot[cnt].nx=head[u];head[u]=cnt;}\n//\u8fd9\u91cc\u662f\u7528\u90bb\u63a5\u94fe\u8868\u5b58\u50a8\u8fb9\ninline void SPFA(int s){\n    for(int i=1;i<=n;i++) dis[i]=2147483647;\n    dis[s]=0;f[s]=1;\n    q.push_back(s);\n    while(!q.empty()){\n        int now=q.front();\n        q.pop_front();\n        f[now]=0;\n        for(int i=head[now];i;i=bot[i].nx){\n            int v=bot[i].nd;\n            if(dis[v]>dis[now]+bot[i].co){\n                dis[v]=dis[now]+bot[i].co;\n                if(!f[v]){\n                    f[v]=1;\n                    if(q.empty()||dis[v]>dis[q.front()]) q.push_back(v);\n                    else q.push_front(v);//SLF\u4f18\u5316\uff0c\u4e0d\u61c2\u7684\u53ef\u4ee5\u53bb\u8fd9\u91cc[SPFA\u7684\u4f18\u5316](http://tzdyy.lofter.com/post/1e3cd119_10c05810)\n                }\n            }\n        }\n    }\n}\ninline int read(){//\u8bfb\u5165\u4f18\u5316\n    int x=0,w=1;char ch=0;\n    while(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n    if(ch=='-') w=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-48,ch=getchar();\n    return x*w;\n}\nint main(){\n    n=read();m=read();s=read();\n    int x,y,w;\n    for(int i=1;i<=m;i++) x=read(),y=read(),w=read(),add(x,y,w);\n    SPFA(s);\n    for(int i=1;i<=n;i++)\n     if(dis[i]!=2147483647) printf(\"%d \",dis[i]);\n     else printf(\"2147483647 \");//\u8f93\u51fa\n}\n```",
        "postTime": 1502961665,
        "uid": 17995,
        "name": "\u98ce\u7075\u65e0\u754fYY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u5f88\u591adalao\u7528\u7684SPFA\u3002\u3002\u8fd9\u513f\u8d34\u4e0a\u7528\u6734\u7d20\u7684queue\u6765\u5b9e\u73b0**SPFA**\uff1b\n\nstl\u4e2d\u7684deque,priority\u7b49\u7b49\u4e5f\u80fd\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u81ea\u5df1\u5199\u961f\u5217\u6765\u8bf4\uff0c\u8fd8\u8981\u9632\u6b62\u961f\u5217\u7684\u7a7a\u95f4\u5047\u6b7b\u3002\u3002\n\n\u7528queue\u6765\u505a\uff0c\u4e00\u822c\u4e0d\u4f1a\u8d85\u65f6\u3002\u3002\u3002\u3002\u7136\u800c\u8fd9\u9053\u9898\u76ee\u6ca1\u6709\u5361SPFA\u7684\u5e38\u6570\u3002\u3002\u3002\u7528dji\u6765\u505a\u7684\u8bdd\uff0c\u6734\u7d20\u7684\u53ea\u80fd\u62ff\u523040-60\u5427\u3002\n\n\u5f53\u7136\u4e5f\u53ef\u4ee5\u5355\u8c03\u961f\u5217\u4f18\u5316\u3002\u3002\u3002\u3002\n\n\n\u8003\u8651\u5230\u8fd9\u662f\u4e00\u4e2a###\u6a21\u677f\u9898\uff0c\u76f4\u63a5queue\u8d2a\u5fc3\u4e86\u3002\u3002\u3002\uff08\u8c8c\u4f3c\u4e5f\u4e0d\u662f\u8d2a\u5fc3\u3002\u3002\u3002\uff09\n\n\u53e6\u5916\u8fd9\u4e2a\u4e0d\u80fd\u7528\u90bb\u63a5\u77e9\u9635\u3002\u3002\u3002\u3002\u4e0d\u7136\u3002\u3002\u3002\u3002\u3002\u7a7a\u95f4BOOM\u3002\u3002\n\n\u7528vector\u6216\u8005list\u90fd\u53ef\u4ee5\uff0c\uff0c\uff0c\uff0c\u8c8c\u4f3clist\u7684push\u901f\u5ea6\u6bd4vector\u5728\u67d0\u4e9b\u8303\u56f4\u5185\u8ddf\u5feb\u3002\u3002\u3002\u3002\u3002\n\n\n\u90a3\u5c31\u7528queue\u5427\u3002\u3002\u3002\u3002\u521d\u59cb\u5316\u7684\u65f6\u5019  dis\u5168\u90e8\u662f2147483647\uff0c\u800c\u662fdis[s]=0\uff1b\u8fd9\u4e2a\u5728\u8f93\u51fa\u7684\u65f6\u5019\u6709\u7528\u3002\u3002\n\n\n\n\n\n```cpp\n // P3371### \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84.cpp :\n//SPFA\n#include<vector>\n#include<iostream>\n#include<algorithm>\n#include<queue>\n#include<cmath>\n#include<list>\nusing namespace std;\nconst int maxn = 500000+10;\nstruct nodes {\n    int u, to, w ;\n};//\u8c8c\u4f3cedge\u6765\u547d\u540d\u6bd4\u8f83\u597d\uff0c\uff0c\u8fd9\u4e2a\u662f\u6bcf\u6761\u8fb9\u7684\u7ed3\u6784\u4f53\u3002\u3002\u3002\u5176\u5b9e\u4e0d\u9700\u8981u\u3002\u3002\u3002\uff08to\u8868\u793a\u672b\u70b9\uff0cw\u8868\u793a\u957f\u5ea6\uff09\nint dis[10000 + 20];\ntypedef struct nodes node;//\u65b9\u4fbf\u540e\u9762\u7684\u5b9a\u4e49\u3002\u3002\nlist<node> v[10000+20];//\u8fb9\u96c6\uff0clist\u548cvector\u90fd\u53ef\u4ee5\u3002\u3002\nint n, m, s;\nint inq[10000 + 20]; //\u7528inq\u6765\u8868\u793a\u70b9\u662f\u5426\u5728queue\u4e2d\uff0c\u5224\u91cd\u548c\u8bb0\u5fc6\u3002\u3002\nqueue<int> q;//\u4e0d\u89e3\u91ca\u4e86\u3001\u3001\nint main()\n{    \n    cin >> n >> m >> s;\n    for (int i = 0; i < m; i++) {\n        int x, y, z;\n        cin >> x >> y >> z;\n        v[x].push_back({ x,y,z });    //\u7528list\u6765\u8bfb\u5165\u8fb9\u96c6\n    }\n    for (int i = 0; i < 10000 + 20; i++) dis[i] = 2147483647; //\u521d\u59cb\u5316\u7684\u65f6\u5019  dis\u5168\u90e8\u662f2147483647\uff0c\u800c\u662fdis[s]=0\uff1b\u8fd9\u4e2a\u5728\u8f93\u51fa\u7684\u65f6\u5019\u6709\u7528\u3002\u3002\n    dis[s] = 0;\n    q.push(s);\n    inq[s] = 1;    //\u7528\u6765\u5224\u65ad\u70b9\u662f\u5426\u5728\u961f\u5217\u91cc\u9762\uff0c\uff0c\u7c7b\u4f3c\u8bb0\u5fc6\u3002\u3002\n    while (!q.empty()) {\n        int cur = q.front(); q.pop();//\u53d6\u51fa\u5f85\u677e\u5f1b\u7684\u8fb9\n        inq[cur] = 0;\n        for (list<node>::iterator it = v[cur].begin(); it!=v[cur].end(); it++) {//\u904d\u5386\n            if (dis[cur] + it->w < dis[it->to]) {//\u8fd9\u4e2a\u662f\u677e\u5f1b\u64cd\u4f5c\u7684\u6838\u5fc3\u3002\u3002\u5982\u679c\u8fc7\u4e00\u70b9\u7684\u8ddd\u79bb+\u8be5\u70b9\u957f\u5ea6\u5c0f\u4e8e\u672b\u70b9\u7684dis\u503c\uff0c\u5c31\u66f4\u65b0\u672b\u70b9\u7684dis\n                dis[it->to] = dis[cur] + it->w;\n                if (!inq[it->to]) {//\u5224\u65ad\u662f\u5426in queue\n                    q.push(it->to);//\u677e\u5f1b\u4e4b\u540e\uff0c\u52a0\u5165queue\uff0c\u7b49\u5f85\u63a5\u4e0b\u6765\u7684\u677e\u5f1b\u3002\u3002\n                }\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n            cout << dis[i] << \" \";\n    }\n    system(\"pause\");\n    return 0;\n}\n```\n\u5176\u4e2d\uff0ccin\u6ca1\u6709\u8bfb\u5165\u4f18\u5316\u8fc7\uff0c\u60f3\u8981AC\u4e0d\u8d85\u65f6\uff0c\uff0c\u628acin\u6539\u6210scanf\u5c31\u53ef\u4ee5\u4e86\u3002\u3002\u3002\u3002\n\u7406\u89e3\u601d\u60f3\uff0c\uff0c\u624d\u662f\u91cd\u70b9\uff01\uff01\uff01\n",
        "postTime": 1502004904,
        "uid": 49337,
        "name": "pcy190",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "C++STL\u662f\u4e00\u4e2a\u795e\u4e00\u822c\u7684\u5b58\u5728\uff0c\u5728SPFA\u7684\u5b9e\u73b0\u4e0a\u53ef\u4ee5\u4f53\u73b0\u8fd9\u4e00\u70b9\uff1a\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<string>\n#include<vector>\n#include<queue>\nusing namespace std;\nstruct node\n{\n    int id,e;\n};\nconst int maxint=2147483647;\nvector<node> g[10001];\nint n,m,s,dist[10001];\nbool f[10001];\nvoid init()\n{\n    scanf(\"%d%d%d\",&n,&m,&s);\n    int i,a,b,w;\n    node p;\n    for(i=1;i<=n;i++)\n    {\n        if(i==s)dist[i]=0;\n        else dist[i]=maxint;\n        f[i]=true;\n    }\n    for(i=0;i<m;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&w);\n        p.e=w;p.id=b;\n        g[a].push_back(p);//vector\u5b9e\u73b0\u7684\u90bb\u63a5\u8868\uff0c\u4ee3\u7801\u76f8\u5bf9\u7b80\u77ed\n    }\n}\nbool relax(int u,int v)\n{\n    if(dist[g[u][v].id]>dist[u]+g[u][v].e)\n    {\n        dist[g[u][v].id]=dist[u]+g[u][v].e;\n        return true;\n    }\n    else return false;\n}\nvoid SPFA()\n{\n    queue<int> q;q.push(0);//\u961f\u5217\uff0c\u8fd9\u4e2a\u7684\u5e94\u7528\u66f4\u666e\u904d\n    int v,i;\n    q.push(s);f[s]=false;\n    while(!q.empty())\n    {\n        q.pop();if(q.empty())break;\n        v=q.front();\n        f[v]=true;\n        for(i=0;i<g[v].size();i++)\n        if((relax(v,i))&&(f[g[v][i].id]))\n        {\n            q.push(g[v][i].id);\n            f[g[v][i].id]=false;\n        }\n    }\n    for(i=1;i<=n;i++)printf(\"%d \",dist[i]);\n}\nint main()\n{\n    init();\n    SPFA();\n    return 0;\n}\n\u4e24\u4e2aSTL\u5e94\u7528\u4f7f\u4ee3\u7801\u7b80\u77ed\u4e86\u5f88\u591a\u3002\u7136\u800c\u8fd8\u662f\u90a3\u53e5\u8bdd\uff0c\u5929\u4e0a\u4e0d\u4f1a\u6389\u9985\u997c\uff0c\u7a0b\u5e8f\u7684\u6548\u7387\u8fd8\u662f\u6709\u6240\u4e0b\u964d\u7684\u3002\u7136\u800c\uff0c\u6548\u7387\u4e0d\u662f\u5168\u90e8\uff0c\u4eba\u4eec\u5b81\u53ef\u727a\u7272\u4e09\u500d\u6548\u7387\u7528Java\u800c\u4e0d\u7528C\u8bed\u8a00\u5c31\u662f\u6700\u597d\u7684\u4f8b\u5b50\uff08from_Charles E Leiserson_\uff09\uff0c\u5177\u4f53\u53d6\u820d\u8981\u770b\u60c5\u51b5\u3002\n```",
        "postTime": 1501660507,
        "uid": 2248,
        "name": "\u6c47\u6587\u5ba2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "#Dijkstra+\u4f18\u5148\u961f\u5217\n\n\u5b58\u56fe\u7528\u7684\u662f\u6570\u7ec4\u6a21\u62df\u90bb\u63a5\u8868\n\n\u7531\u4e8e\u4f18\u5148\u961f\u5217\u4e0d\u505a\u5176\u5b83\u5b9a\u4e49\u7684\u8bdd top() \u8fd4\u56de\u662f\u961f\u5217\u91cc\u6700\u5927\u7684\u6570\n\n\u6211\u4eec\u5e0c\u671b\u8d8a\u5c0f\u7684\u6570\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u8fd9\u91cc\u5b9a\u4e49\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff1a\n\n\n\nbool operator < (const node&pd) const{\n\n        return d>pd.d;\n\n}\n##\u6263\u4e0a\u7cbe(rong)\u7f8e(chang)\u7684\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#define For(x) for (int i=1;i<=x;i++) \n#define bl(x) for (int h=head[x],o=v[h];h;o=v[h=to[h]])//\u904d\u5386\u64cd\u4f5c \nusing namespace std;\nconst long long N=500000+10;\nconst long long INF=~0u>>1;//\u5c0632\u4f4d\u76840\u53d6\u53cd\u540e\u53f3\u79fb\u4e00\u4f4d,\u53732147483647\nlong long head[N],to[N],v[N],w[N],num,dis[N],vis[N],n,m,s,ans;\nstruct node\n{\n    long long d,pos;\n    bool operator < (const node&pd) const{\n        return d>pd.d;//\u5c0f\u7684\u4f18\u5148\u7ea7\u9ad8 \n    }\n}tmp;\nvoid get_node(){\n    long long U,V,W;\n    scanf(\"%lld%lld%lld\",&U,&V,&W);\n    to[++num]=head[U],head[U]=num,v[num]=V,w[num]=W;\n}\npriority_queue <node> q; \nint main(){\n    scanf(\"%lld%lld%lld\",&n,&m,&s);\n       for(long long i=0;i<m;i++) dis[i]=INF;//\u521d\u59cb\u5316 \n    For(m) get_node();dis[s]=0;\n    q.push((node){0,s});\n    while (!q.empty()){\n        tmp=q.top();q.pop();\n        long long uu=tmp.pos;\n        if (vis[uu]) continue;\n        bl(tmp.pos){\n            if (dis[o]>dis[uu]+w[h]){\n                dis[o]=dis[uu]+w[h];\n                q.push((node){dis[o],o});\n            }\n        }\n        vis[uu]=1;\n    }\n    For(n) printf(\"%lld \",dis[i]);\n}\n```",
        "postTime": 1501298322,
        "uid": 40976,
        "name": "\u60a0\u732b\u4e36\u6708\u8d30",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "#\u53c8\u66b4\u529b\uff0c\u53c8\u8d64\u88f8\u7684***\u7b97\u6cd5\n\n##\u840c\u65b0\u5411\n\n\uff08\u6211\u5df2\u7ecf\u4e0d\u77e5\u9053\u81ea\u5df1\u5728\u5e72\u4ec0\u4e48\u4e86\uff09\n\n\u770b\u770b\u5927\u795e\u4eec\u7684\u6559\u7a0b\uff0c\u4ec0\u4e48\u4f18\u5316\uff0c\u6211\u5b8c\u5168\u4e0d\u4f1a\u554a\uff0c\u6240\u4ee5\u5c31\u5148\u5199\u4e86\u4e2a\u7eaf\u7cb9\u7684\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u53ef\u80fd\u662fSPFA\uff08\u6211\u81ea\u521b\u7684\u4f60\u4fe1\u5417\uff09\u3002\u556a\u4e00\u4ea4\u8fc7\u4e86\uff0c\u5f00\u5fc3\u3002\n\n**STL\u7528\u7684\u8f83\u591a\uff0c\u90a3\u4e9b\u559c\u6b22\u7eaf\u7cb9\u7684\u4ee3\u7801\u7684\u540c\u5b66\u5bf9\u4e0d\u4f4f\u4e86\u3002**\n\n\u6211\u7528\u4e00\u4e2a\u7c7b\u4f3c\u94fe\u8868\u7684\u4e1c\u897f\u5b58\u50a8\u56fe\u3002\u9996\u5148\u5f04\u4e2a\u70b9\u96c6\uff08\u6309\u7f16\u53f7\u6709\u5e8f\uff09\uff0c\u6bcf\u4e2a\u70b9\u5b58\u50a8\u7740\u4e00\u4e2a\u8fb9\u7684\u5e8f\u5217\uff0c\u5bf9\u4e8e\u8fb9\u6211\u8bb0\u8f7d\u4e86\u4ed6\u7684\u76ee\u6807\u70b9\u548c\u957f\u5ea6\u3002\n\n\u53ef\u4ee5\u7528\u6570\u7ec4\u5b9e\u73b0\u70b9\u96c6\uff08\u6bd5\u7adf\u4e0b\u6807\u7684\u65b9\u4fbf\uff09\uff0c\u7528 vector \u5b9e\u73b0\u8fb9\u7684\u5e8f\u5217\uff08\u9632\u70b8\uff0c\u5982\u679c\u5f0010005\u7684\u6570\u7ec4\u7684\u8bddBOOM\uff01\uff09\uff0c\u7528 pair \u8bb0\u5f55\u8fb9\u3002\n\n\u90a3\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a\n\n```cpp\ntypedef pair<int, int> mp;\nvector<mp> graph[10005];\n```\n\u8fd9\u6837\u505a\u4f1a\u907f\u514d\u90bb\u63a5\u8868\u548c\u90bb\u63a5\u77e9\u9635\u5e26\u6765\u7684\u590d\u6742\u5ea6\u589e\u52a0\uff0c\u800c\u4e14\u65b9\u4fbf\u3002\n\n\u63a5\u4e0b\u6765\u5e7f\u641c\u8fd9\u5f20\u56fe\uff01\n\n\u5148\u628a dis \u6570\u7ec4\uff08\u8bb0\u5f55\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\uff09\u5168\u90e8\u521d\u59cb\u5316\u4e3a INF\u3002\n\n\u677e\u5f1b\u5c31\u662f\uff1a\u5982\u679c\u6211\u73b0\u5728\u4ece\u8fd9\u6761\u8fb9\u8d70\u5230\u4f60\u90a3\u91cc\u6bd4\u4f60\u73b0\u5728\u5728 dis \u6570\u7ec4\u91cc\u7684\u503c\u8981\u77ed\uff0c\u90a3\u4e48\u5c31\u628a\u4f60 dis \u7684\u503c\u6539\u6389\u3002\n\n\u4ece\u70b9 S \u5f00\u59cb\u4f7f\u7528\u6240\u6709 S \u7684\u8fb9\u677e\u5f1b\u70b9 S \u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u3002\u8fd9\u4e00\u6b65\u505a\u5b8c\u540e\uff0c\u6309\u540c\u6837\u7684\u65b9\u6cd5\u5904\u7406\u7531\u70b9 S \u677e\u5f1b\u8fc7\u7684\u70b9\uff0c\u76f4\u5230\u6ca1\u6709\u70b9\u53ef\u4ee5\u5904\u7406\u3002\n\n\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f\uff01\u63a5\u4e0b\u6765\u6252\u51fa~~\u8d85\u7ea7\u7f8e\u7684~~\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <utility> // for std::pair\nusing namespace std;\n\nconst int INF(2147483647);\ntypedef pair<int, int> mp;\nvector<mp> graph[10005];\nint dis[10005], N, M ,S;\n\nint main()\n{\n    scanf(\"%d%d%d\", &N, &M, &S);\n    for (int i(0); i < M; ++i)\n    {\n        int st, en, len;\n        scanf(\"%d%d%d\", &st, &en, &len);\n        graph[st].push_back(mp(en, len)); // mp(int, int) \u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u4ed6\u6784\u9020\u4e86\u4e00\u4e2a\u4e34\u65f6\u5bb9\u5668\uff0c\u53ef\u4ee5\u628a\u5b83\u63a8\u8fdbvector\n    }\n    for (int i(1); i <= N; ++i) dis[i] = INF;\n    dis[S] = 0; // \u81ea\u5df1\u5230\u81ea\u5df1\u5f53\u7136\u662f0\n    queue<int> nbs; // \u961f\u5217\uff0c\u5e7f\u641c\u6709\u7528\uff0c\u5e94\u8be5\u89c1\u602a\u4e0d\u602a\u4e86\u5427\n    nbs.push(S);\n    while (!nbs.empty()) // \u7b80\u76f4\u5e7f\u641c\n    {\n        int now(nbs.front());\n        for (mp x : graph[now]) // \u9a9a\u64cd\u4f5c\uff0cc++11 \u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af\uff0c\u904d\u5386\u5bb9\u5668\u5341\u5206\u65b9\u4fbf\n        {\n            if (dis[now] + x.second < dis[x.first]) // \u677e\u5f1b\n            {\n                dis[x.first] = dis[now] + x.second;\n                nbs.push(x.first);\n            }\n        }\n        nbs.pop();\n    }\n    for (int i(1); i <= N; ++i)\n    {\n        printf(\"%d \", dis[i]);\n    }\n    return 0;\n}\n```\n\u770b\u6211\u5199\u4ee3\u7801\u90a3\u4e48\u94fa\u5f20\u6d6a\u8d39\uff0c\u662f\u4e0d\u662f\u8fd8\u5f88\u77ed\u554a\uff1a\uff09\n\n~~\u5f97\u610f\u5fd8\u5f62~~\n",
        "postTime": 1498136533,
        "uid": 32647,
        "name": "JamesHen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "#SPFA\u7684\u4f18\u5316\n\nSPFA\u5b58\u5728\u4e24\u79cd\u4f18\u5316\u65b9\u5f0f\uff0c\u4e00\u79cd\u662fSLF(Small Label First)\u4f18\u5316\uff0c\u53e6\u5916\u4e00\u79cd\u4e3aLLL(Large Label Last)\u4f18\u5316\u3002\u4e2a\u4eba\u611f\u89c9SLF\u597d\u7406\u89e3\u4e00\u4e9b\uff1b\n\n##SLF\u5177\u4f53\u64cd\u4f5c\n\n\u8bbe\u961f\u9996\u5143\u7d20\u4e3a i\uff0c\u961f\u5217\u4e2d\u8981\u52a0\u5165\u8282\u70b9 j\uff0c\u5728 dj<=di \u65f6\u52a0\u5230\u961f\u9996\u800c\u4e0d\u662f\u961f\u5c3e\uff0c\u5426\u5219\u548c\u666e\u901a\u7684 SPFA \u4e00\u6837\u52a0\u5230\u961f\u5c3e\u3002\n\n##\u901f\u5ea6\n\n\u5728\u672c\u8eab\u6709\u8bfb\u5165\u4f18\u5316\u7684\u524d\u63d0\u4e0b\uff0c\u7531677ms\u4f18\u5316\u4e3a406ms\n\n##\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <limits.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int maxne = 600001;\nconst int maxnn = 20001;\nconst unsigned long long int inf = 6000000000;\nint n,e,s,t,cnt;\nint last[maxne],q[maxne],check[maxnn];\nlong long dis[maxnn];\nbool is[maxnn],fuhuan;\nint read()\n{\n    int x=0,f=1; char ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-') f=-1; ch=getchar();}\n    while(ch>='0'&&ch<='9') {x=x*10+ch-'0'; ch=getchar();} return x*f;\n}\nstruct line {int to,next,v;}l[maxne];\nvoid add(int u,int v,int w) { l[++cnt].to=v; l[cnt].next=last[u]; last[u]=cnt; l[cnt].v=w; }\nvoid spfa(int a)\n{\n    for(int i=1;i<=n;i++) dis[i]=inf;\n    dis[a]=0; is[a]=1; q[0]=a; check[a]++;\n    int head=0,tail=1;\n    while(head!=tail)\n    {\n        int now=q[head++];\n        if(head==n+1) head=0;\n        for(int i=last[now];i;i=l[i].next)\n        {\n            if( dis[now]+l[i].v<dis[l[i].to] && dis[now]!=inf)\n            {\n                dis[l[i].to]=dis[now]+l[i].v;\n                if(!is[l[i].to])\n                {\n                    is[l[i].to]=1;\n                    if(dis[l[i].to]<dis[q[head]])\n                    {\n                        head--; if(head==-1) head=n;\n                        q[head]=l[i].to;\n                        check[l[i].to]++;\n                        if(check[l[i].to]==n) { fuhuan=1; return;}\n                    }\n                    else\n                    {\n                        q[tail++]=l[i].to;\n                        if(check[l[i].to]==n) { fuhuan=1; return;}\n                        if(tail==n+1) tail=0;\n                    }\n                }\n            }\n        }\n        is[now]=0;\n    } \n}\nint main()\n{\n    int u,v,w;\n    n=read();e=read(); \n    s=read();\n    for(int i=1;i<=e;i++)\n    {\n        u=read();v=read(); w=read();\n        add(u,v,w);\n    }\n    spfa(s);\n    for(int i=1;i<=n;i++)\n    {\n        if(dis[i]==inf) cout<<\"2147483647 \";\n        else cout<<dis[i]<<\" \"; \n    }\n    return 0;\n}\n```",
        "postTime": 1479461909,
        "uid": 12617,
        "name": "xueyangkai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "pascal\u7684\u9898\u89e3\u4e0d\u662f\u5f88\u591a \u8d21\u732e\u4e00\u4e2a \u6ce8\u610f \u66f4\u65b0\u8ddd\u79bb\u662f\u4e0d\u7528\u7406\u4f1a\u8282\u70b9\u662f\u5426\u5728\u961f\u5217\u91cc\u9762 \u662f\u5426\u5165\u961f\u662f\u8981\u5224\u65ad\u662f\u5426\u5728\u961f\u5217\u91cc\u9762 \u3002\u3002\u4e0d\u7136\u53ea\u6709\u5341\u5206\n\n```cpp\nprogram spfa;\n type s1=record\n  go,next,w:longint;\n  end;\n var\n  head:array[1..10000] of longint; //head:=-1\n  edge:array[1..500000] of s1;\n  dis:array[1..10000] of longint;\n  dl:array[1..1000000] of longint;\n  ju:array[1..10000] of boolean;\n  n,m,s,cnt,fi,gi,wi,loop:longint;\n procedure add(f,t,we:longint);\n  begin\n   edge[cnt].go:=t;             //cnt:=1\n   edge[cnt].w:=we;\n   edge[cnt].next:=head[f];\n   head[f]:=cnt;\n   inc(cnt);\n  end;\n procedure spfa(h:longint);\n  var\n   f,t,loop,visit,cur:longint;\n  begin\n   f:=1;\n   t:=1;\n   ju[h]:=true;\n   dl[1]:=h;\n   dis[h]:=0;\n   while f<=t do\n    begin\n     visit:=head[dl[f]];\n     while visit<>-1 do\n      begin\n       cur:=edge[visit].go;\n     ** ### if  ((dis[dl[f]]+edge[visit].w)<dis[cur]) then** \u6ce8\u610f\u6b64\u5904 \u4e0d\u7528 ju\u6570\u7ec4\u5224\u65ad\n        begin\n         dis[cur]:=dis[dl[f]]+edge[visit].w;\n        ### if not ju[cur] then \u8fd9\u91cc\u8981 \n         begin\n           inc(t);\n         dl[t]:=cur;\n         ju[cur]:=true;\n         end;\n        end;\n       visit:=edge[visit].next;\n      end;\n     ju[dl[f]]:=false;\n     inc(f);\n    end;\n  end;\n begin\n  readln(n,m,s);\n  fillchar(ju,sizeof(ju),false);\n  for loop:=1 to n do\n   head[loop]:=-1;\n  for loop:=1 to n do\n   dis[loop]:=2147483647;\n   cnt:=1;\n  for loop:=1 to m do\n   begin\n    read(fi,gi,wi);\n    add(fi,gi,wi);\n   end;\n  spfa(s);\n  for loop:=1 to n do\n   write(dis[loop],' ');\nend.\n```",
        "postTime": 1479433516,
        "uid": 14025,
        "name": "\u9ad8\u624b\u5bc2\u5bde",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "\u611f\u89c9\u5199\u4e86\u4e00\u4e2a\u5e74\u5ea6\u6700\u4e11\u7684 SPFA\u7b97\u6cd5\n\n\u7528\u90bb\u63a5\u8868\u5b58\u50a8\u8fb9\uff0c\u5197\u4f59\u7a0d\u5927\uff0c\u4f46\u611f\u89c9\u8fd8\u662f\u4e0d\u9519\u7684\u2026\u2026\u5427\n\n\u7b2c\u4e00\u6b21\u63d0\u4ea4\u961f\u5217\u5f00\u5c0f\u4e86\uff0c\u8fd8\u6302\u4e86\u4e09\u4e2a\u70b9-.-\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\nusing namespace std;\nconst int Infinity = 2147483647;\nstruct Side{\n    int src;\n    int des;\n    int dist;\n    Side *next;\n};\nint n,m,st;\nint dist[11111];    //\u5149\u68cd\u8282\uff0c\u591a\u6765\u51e0\u4e2a1\nSide* s[51111];     //\u540c\u4e0a\nint queue[111111];\nint qs,qt;\nint main()\n{\n    cin >> n >> m >> st;\n    int i;\n    for (i = 1; i <= n; i++){\n        s[i] = new Side;\n        s[i]->src = s[i]->des = i;\n        s[i]->dist = 0;\n        s[i]->next = NULL;\n        dist[i] = Infinity;\n    }\n    dist[st] = 0;\n    int src,des,dis;\n    Side *tmp;\n    for (i = 0; i < m; i++){ //\u6709\u5411\u8fb9\n        cin >> src >> des >> dis;\n        tmp = new Side;\n        tmp->src = src;\n        tmp->des = des;\n        tmp->dist = dis;\n        //if (s[src]->next != NULL)\n            tmp->next = s[src]->next;\n        //else\n            //tmp->next = NULL;\n        s[src]->next = tmp;\n    }\n    queue[qs] = st;\n    Side *side;\n    while (qs <= qt){\n        src = queue[qs++];\n        side = s[src]->next;\n        while (side != NULL){\n            if (dist[side->des] > dist[src]+side->dist){\n                dist[side->des] = dist[src]+side->dist;\n                qt++;\n                queue[qt] = side->des;\n            }\n            side = side->next;\n        }\n    }\n    for (i = 1; i <= n; i++)\n        cout << dist[i] << \" \";\n    return 0;\n}\n\n```",
        "postTime": 1478871875,
        "uid": 23634,
        "name": "\u66ae\u5149",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    },
    {
        "content": "#\u7528\u7684\u662fSPFA \u8fd8\u6709\u7b97\u6cd5\u6838\u5fc3 \uff08\u6ca1\u9519 \u5c31\u662f\u6015\u4f60\u4eec\u6284==\u5176\u5b9e\u662f\u6211\u61d2\u5f97\u52a0\u4e86\uff09\n\n#1 \u7b97\u6cd5\u7b80\u4ecb\n\nSPFA(Shortest Path Faster Algorithm)\u662fBellman-Ford\u7b97\u6cd5\u7684\u4e00\u79cd\u961f\u5217\u5b9e\u73b0\uff0c\u51cf\u5c11\u4e86\u4e0d\u5fc5\u8981\u7684\u5197\u4f59\u8ba1\u7b97\u3002\u4e5f\u6709\u4eba\u8bf4SPFA\u672c\u6765\u5c31\u662fBellman-Ford\u7b97\u6cd5\uff0c\u73b0\u5728\u5e7f\u4e3a\u6d41\u4f20\u7684Bellman-Ford\u7b97\u6cd5\u5b9e\u9645\u4e0a\u662f\u5c71\u5be8\u7248\u3002\n\n\n#2 \u7b97\u6cd5\u6d41\u7a0b\n\nSPFA\u7b97\u6cd5\u91c7\u7528\u4e86\u4e00\u4e2a\u961f\u5217\u6765\u8fdb\u884c\u7ef4\u62a4\u548c\u5b9e\u73b0\uff1a\n\n\uff081\uff09\u521d\u59cb\u65f6\uff0c\u5c06\u6e90\u70b9\u52a0\u5165\u961f\u5217\u3002\n\n\uff082\uff09\u6bcf\u6b21\u4ece\u961f\u5217\u4e2d\uff08\u961f\u9996\uff09\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u5bf9\u6240\u6709\u4e0e\u8be5\u961f\u9996\u9876\u70b9\u76f8\u90bb\u7684\u70b9\u8fdb\u884c\u677e\u5f1b\uff08\u201c\u677e\u9a70\u201d\u7684\u542b\u4e49\u4e0e\u4e0a\u9762Bellman-Ford\u7b97\u6cd5\u4e2d\u63cf\u8ff0\u7684\u4e00\u6837\uff09\u3002\u82e5\u67d0\u4e2a\u76f8\u90bb\u7684\u70b9\u677e\u5f1b\u6210\u529f\uff0c\u5219\u5c06\u5176\u5165\u961f\uff08\u52a0\u5165\u961f\u5c3e\uff09\u3002\n\n\uff083\uff09\u4e00\u76f4\u5bf9\u961f\u5217\u8fdb\u884c\u64cd\u4f5c\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u65f6\u7b97\u6cd5\u7ed3\u675f\u3002\n\n\n\u7b80\u5355\u5730\u8bf4\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662f\u5229\u7528\u961f\u5217\u4f18\u5316\u8fc7\u7684Bellman-Ford\u7b97\u6cd5\uff0c\u662f\u5229\u7528\u4e86\u6bcf\u4e2a\u70b9\u7684\u66f4\u65b0\u6b21\u6570\u4e0d\u4f1a\u592a\u591a\u8fd9\u4e00\u7279\u70b9\u800c\u53d1\u660e\u7684\u7b97\u6cd5\u3002\n\nSPFA\u53ef\u4ee5\u5728O(kE)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\uff0c\u6c42\u51fa\u6e90\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u53ef\u4ee5\u5904\u7406\u8d1f\u8fb9\u3002\n\nSPFA\u7684\u5b9e\u73b0\u751a\u81f3\u6bd4Dijkstra\u6216\u8005Bellman-Ford\u8fd8\u8981\u7b80\u5355\uff1a\n\n\u8bbeDist[i]\u4ee3\u8868\u6e90\u70b9S\u5230\u4efb\u4e00\u9876\u70b9 i \u7684\u5f53\u524d\u6700\u77ed\u8ddd\u79bb\uff0cFa\u4ee3\u8868S\u5230 i \u7684\u5f53\u524d\u6700\u77ed\u8def\u5f84\u4e2d\uff0ci \u70b9\u4e4b\u524d\u7684\u4e00\u4e2a\u70b9\u7684\u7f16\u53f7\u3002\u5f00\u59cb\u65f6\uff0cDist\u5168\u90e8\u4e3a+\u221e\uff0c\u53ea\u6709Dist[S]=0\uff0cFa\u5168\u90e8\u4e3a0\u3002\n\n\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u91cc\u9762\u5b58\u653e\u6240\u6709\u9700\u8981\u8fdb\u884c\u8fed\u4ee3\u7684\u70b9\u3002\u521d\u59cb\u65f6\uff0c\u961f\u5217\u4e2d\u53ea\u6709\u4e00\u4e2a\u70b9S\u3002\u6b64\u5916\uff0c\u518d\u7528\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5f53\u524d\u662f\u5426\u5728\u961f\u5217\u4e2d\u3002\n\n\u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u53d6\u51fa\u961f\u9996\u7684\u70b9v\uff0c\u4f9d\u6b21\u679a\u4e3e\u4ecev\u51fa\u53d1\u7684\u8fb9v->u\uff1a\u8bbe\u8be5\u8fb9\u7684\u957f\u5ea6\u4e3alen\uff0c\u5224\u65adDist[v] + len\u662f\u5426\u5c0f\u4e8eDist[u]\uff0c\u82e5\u5c0f\u4e8e\u5219\u6539\u8fdbDist[u]\uff08\u5373\u677e\u5f1b\u6210\u529f\uff09\uff0c\u5c06Fa[u]\u8bb0\u4e3av\uff08\u5373v\u662fu\u7684\u7236\u4eb2\u6216\u524d\u8d8b\uff09\u3002\n\n\u8fdb\u4e00\u6b65\u5730\uff0c\u7531\u4e8eS\u5230u\u7684\u6700\u77ed\u8ddd\u79bb\u53d8\u5c0f\u4e86\uff0c\u8fdb\u800c\u6709\u53ef\u80fd\u901a\u8fc7u\u6765\u6539\u8fdb\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6240\u4ee5\u82e5u\u4e0d\u5728\u961f\u5217\u4e2d\uff0c\u5c31\u5c06\u5b83\u653e\u5165\u961f\u5c3e\u3002\n\n\u8fd9\u6837\u4e00\u76f4\u8fed\u4ee3\u4e0b\u53bb\uff0c\u76f4\u5230\u961f\u5217\u53d8\u7a7a\uff0c\u4e5f\u5c31\u662fS\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u90fd\u786e\u5b9a\u4e0b\u6765\u65f6\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002\n\n\u82e5\u4e00\u4e2a\u70b9\u7684\u5165\u961f\u6b21\u6570\u8d85\u8fc7\u4e86n(??)\uff0c\u5219\u8bf4\u660e\u56fe\u4e2d\u6709\u8d1f\u6743\u7684\u73af\uff08\u56de\u8def\uff09{ Why\uff1f}\u3002\n\nSPFA \u5728\u5f62\u5f0f\u4e0a\u548c\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u975e\u5e38\u7c7b\u4f3c\uff0c\u4e0d\u540c\u7684\u662f\uff1a\n\n\uf06c\u5728\u5bbd\u641c\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e2a\u70b9\u51fa\u4e86\u961f\u5217\u540e\u5c31\u4e0d\u53ef\u80fd\u518d\u91cd\u65b0\u8fdb\u5165\u961f\u5217\u4e86\uff1b\n\n\uf06c\u76f8\u53cd\u5730\uff0c\u5728SPFA\u4e2d\uff0c\u4e00\u4e2a\u70b9\u53ef\u80fd\u5728\u51fa\u961f\u4e4b\u540e\u518d\u6b21\u88ab\u653e\u5165\u961f\u5217\u3002\n\n\uf06c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u70b9\u6539\u8fdb\u8fc7\u5176\u4ed6\u7684\u70b9\u4e4b\u540e\uff0c\u8fc7\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u53ef\u80fd\u8be5\u70b9\u672c\u8eab\u53c8\u88ab\u6539\u8fdb\u4e86\uff0c\u4e8e\u662f\uff0c\u5b83\u53c8\u88ab\u518d\u6b21\u7528\u6765\u6539\u8fdb\u5176\u4ed6\u7684\u70b9\uff0c\u5c31\u8fd9\u6837\u53cd\u590d\u8fed\u4ee3\u4e0b\u53bb\u3002\n\n\n\u8bbe\u4e00\u4e2a\u70b9\u7528\u6765\u4f5c\u4e3a\u8fed\u4ee3\u70b9\u5bf9\u5176\u4ed6\u70b9\u8fdb\u884c\u6539\u8fdb\u7684\u5e73\u5747\u6b21\u6570\u4e3ak\uff0c\u6709\u529e\u6cd5\u8bc1\u660e\u5bf9\u4e8e\u901a\u5e38\u7684\u60c5\u51b5\uff0ck\u57282\u5de6\u53f3\u3002\n\n\n2.3 SPFA\u7684\u5b9e\u73b0\u4ee3\u7801\n\n\u3010C++\u7248\u3011\n\n\n```cpp\nvoid spfa()\n{\nmemset(que, 0, sizeof(que));\nhead = 0;  tail = 0;\nmemset(inque ,false, sizeof(inque));\n // inque[i] \u7528\u4e8e\u5224\u65ad\u70b9 i \u5f53\u524d\u662f\u5426\u5728\u961f\u5217\u4e2d\nfor (i=1; i<=n; i++)\n dist[i] = MAXINT;  // \u521d\u59cb\u5316\n```\n\u00a0\n```cpp\ntail++;\n que[tail] = 1;\ninque[1] = true;\ndist[1] = 0;   // \u8fd9\u91cc\u628a\u9876\u70b91\u4f5c\u4e3a\u6e90\u70b9\n```\n\u00a0\n\n```cpp\nwhile (head != tail) {\n        head++;\nx = que[head];\ninque[x] = false;    // \u961f\u9996\u5143\u7d20\u51fa\u961f\u4e86\n     for (i=1; i<=n; i++)    // \u627e\u76f8\u90bb\u7684\u3001\u53ef\u6539\u8fdb\u7684\u70b9\n           if ( weight[x][i]>0 && dist[x]+weight[x][i]<dist[i]) {\n              // \u6b64\u6761\u4ef6\u5408\u7406\u5426\uff1f\n              dist[i] = dist[x] + weight[x][i];\n              if (! inque[i]) {\n                  tail++;\n que[tail] = i;\ninque[i] = true;\n              }\n          }\n}\n}\n```\n\u3010\u7b97\u6cd5\u4f2a\u4ee3\u7801\u3011{\u52a0\u5165\u201c\u67d0\u4e00\u4e2a\u70b9\u5165\u961f\u6b21\u6570\u8fben-1\u5373\u505c\u6b62\u201d}\n   \n```cpp\nprocedure SPFA;\nbegin\n   initialize-single-source(G, s);\n   initialize-queue(Q);\n   enqueue(Q, s);\nwhile not empty(Q) do\n begin\n       u := dequeue(Q);\n       for each v \u2208 adj[u] do\nbegin\n           old := dist[v];\n           relax(u, v);\n           if ( old <> dist[v] ) and (not v in Q) then\n enqueue(Q,v);\n       end;\n   end;\nend;\n```\n\u3010\u6216\u8005\u3011\n```cpp\nprocedure spfa;\nbegin\nfillchar(que, sizeof(que), 0);\nhead := 0;  tail := 0;\nfillchar(inque ,sizeof(inque), false);\n     // inque[i]\u7528\u4e8e\u5224\u65ad\u70b9i\u5f53\u524d\u662f\u5426\u5728\u961f\u5217\u4e2d\nfor i:=1 to n do\n dist[i] := maxint;  // \u521d\u59cb\u5316\n```\n\u00a0\n```cpp\ninc(tail);\n que[tail] := 1;\ninque[1] := true;\ndist[1] := 0;   // \u8fd9\u91cc\u628a\u9876\u70b91\u4f5c\u4e3a\u6e90\u70b9\n```\n\u00a0\n```cpp\nwhile head <> tail do\nbegin\n        head := (head mod n) + 1;\nx := que[head];\ninque[x] := false;    // \u961f\u9996\u5143\u7d20\u51fa\u961f\u4e86\n     for i := 1 to n do    // \u627e\u76f8\u90bb\u7684\u3001\u53ef\u6539\u8fdb\u7684\u70b9\n          if (weight[x,i]>0) and    // \u6b64\u6761\u4ef6\u5408\u7406\u5426\uff1f\n(dist[x] + weight[x,i] < dist[i]) then\n          begin\n              dist[i] := dist[x] + weight[x,i];\n              if not(inque[i]) then\n              begin\n                  tail := (tail mod n)+1;\n que[tail] := i;\ninque[i] := true;\n              end;\n          end;\nend;\n```",
        "postTime": 1478179900,
        "uid": 23845,
        "name": "Red_w1nE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3371 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3011"
    }
]