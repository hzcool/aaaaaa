[
    {
        "content": "\u4e3b\u5e2d\u6811\u6a21\u677f\u5c45\u7136\u9898\u89e3\u8fd9\u4e48\u5c11~\u6211\u6765\u5199\u4e00\u53d1qwq\n\n\u4e3b\u5e2d\u6811\u601d\u60f3\u662f\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u662f\u503c\u7684\u8303\u56f4\uff0c\u7136\u540e\u7b2ci\u4e2a\u7ebf\u6bb5\u6811\u4e2d\u67d0\u4e2a\u533a\u95f4[x, y]\u7ef4\u62a4\u7684\u662f\uff0c1-i\u4e2d\u6570\u5b57\u5728[x, y]\u8303\u56f4\u5185\u7684\u4e2a\u6570\u3002\u8fd9\u91cc\u5229\u7528\u5230\u4e86\u524d\u7f00\u548c\u7684\u601d\u60f3\u3002\n\n\u8be6\u7ec6\u7684\u9898\u89e3\u89c1\u6211\u7684blog\uff1a[\u94fe\u63a5](http://blog.csdn.net/bestFy/article/details/78650360)\n\n\u6ce8\u610fblog\u91cc\u9762\u7684\u662fhdu2665\uff0c\u8303\u56f4\u6709\u4e00\u4e9b\u4e0d\u4e00\u6837\u7684\u3002\n\n\u7136\u540e\u653e\u4e00\u4e0b\u8fd9\u9053\u9898\u6211\u7684ac\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define mid (l+r)/2\nusing namespace std;\n\nconst int N = 200010;\nint n, q, m, cnt = 0;\nint a[N], b[N], T[N];\nint sum[N<<5], L[N<<5], R[N<<5];\n\ninline int build(int l, int r)\n{\n    int rt = ++ cnt;\n    sum[rt] = 0;\n    if (l < r){\n        L[rt] = build(l, mid);\n        R[rt] = build(mid+1, r);\n    }\n    return rt;\n}\n\ninline int update(int pre, int l, int r, int x)\n{\n    int rt = ++ cnt;\n    L[rt] = L[pre]; R[rt] = R[pre]; sum[rt] = sum[pre]+1;\n    if (l < r){\n        if (x <= mid) L[rt] = update(L[pre], l, mid, x);\n        else R[rt] = update(R[pre], mid+1, r, x);\n    }\n    return rt;\n}\n\ninline int query(int u, int v, int l, int r, int k)\n{\n    if (l >= r) return l;\n    int x = sum[L[v]] - sum[L[u]];\n    if (x >= k) return query(L[u], L[v], l, mid, k);\n    else return query(R[u], R[v], mid+1, r, k-x);\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &q);\n    for (int i = 1; i <= n; i ++){\n        scanf(\"%d\", &a[i]);\n        b[i] = a[i];\n    }\n    sort(b+1, b+1+n);\n    m = unique(b+1, b+1+n)-b-1;\n    T[0] = build(1, m);\n    for (int i = 1; i <= n; i ++){\n        int t = lower_bound(b+1, b+1+m, a[i])-b;\n        T[i] = update(T[i-1], 1, m, t);\n    }\n    while (q --){\n        int x, y, z;\n        scanf(\"%d%d%d\", &x, &y, &z);\n        int t = query(T[x-1], T[y], 1, m, z);\n        printf(\"%d\\n\", b[t]);\n    }\n    return 0;\n}\n```",
        "postTime": 1512145168,
        "uid": 19722,
        "name": "fy0123",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "**\u5b66\u4e60\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e4b\u524d\u4e00\u5b9a\u8981\u5b66\u61c2\u7ebf\u6bb5\u6811\uff0c\u5927\u5bb6\u53ef\u4ee5\u770b\u770b\u6211\u8f6c\u8f7d\u7684\u4e00\u7bc7\u535a\u5ba2\uff08http://blog.csdn.net/a1351937368/article/details/78884465\uff09**\n\n\u5b66\u4e60\u4e3b\u5e2d\u6811\u7684\u65f6\u5019\u5168\u662f\u770b\u7684\u5176\u4ed6\u4eba\u7684\u535a\u5ba2\u5b66\u7684\uff0c\u4f46\u662f\u89c9\u5f97\u597d\u591a\u4eba\u5199\u7684\u535a\u5ba2\u5f88\u4e71\uff0c\u770b\u535a\u5ba2\u7684\u65f6\u5019\u611f\u89c9\u6ca1\u4ec0\u4e48\u5934\u7eea\uff0c\u73b0\u5728\u7ec8\u4e8e\u641e\u61c2\u4e86\u4e3b\u5e2d\u6811\uff0c\u60f3\u81ea\u5df1\u5199\u4e00\u4e9b\u4e1c\u897f\u8ba9\u5176\u4ed6\u4eba\u80fd\u5f88\u8f7b\u677e\u7684\u770b\u61c2\u4e3b\u5e2d\u6811\u5230\u5e95\u662f\u4ec0\u4e48\n\n**\u4e3b\u8981\u601d\u60f3**\uff1a\u4e3b\u5e2d\u6811\u662f\u5229\u7528\u51fd\u6570\u5f0f\u7684\u7f16\u7a0b\u601d\u60f3\u4f7f\u5f97\u7ebf\u6bb5\u6811\u652f\u6301\u67e5\u8be2\u5386\u53f2\u7248\u672c\uff0c\u540c\u65f6\u5145\u5206\u5229\u7528\u4ed6\u4eec\u4e4b\u95f4\u7684\u5171\u540c\u6570\u636e\u6765\u51cf\u5c11\u65f6\u95f4\u548c\u5185\u5b58\u6d88\u8017\u7684\u6570\u636e\u7ed3\u6784\uff08\u8fd9\u4e9b\u4e1c\u897f\u4e0d\u7406\u89e3\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u5230\u6700\u540e\u6162\u6162\u5c31\u61c2\u4e86\uff09\u4e00\u68f5\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u4fe1\u606f\uff0c\u82e5\u6bcf\u6b21\u533a\u95f4\u4e0d\u540c\u5219\u5904\u7406\u8f83\u4e3a\u56f0\u96be\uff0c\uff0c\u4f8b\u5982\u9891\u7e41\u7684\u8be2\u95ee\u533a\u95f4\u7b2cK\u5927\u5143\u7d20\uff08\u8f83\u4e3a\u7b80\u5355\u7684\u601d\u60f3\u662f\u6839\u636e\u5f52\u5e76\u6392\u5e8f\u601d\u60f3\u5b9e\u73b0\u7684\u5f52\u5e76\u6811\uff0c\u4f46\u662f\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u8f83\u9ad8\uff09\n\n**\u7b2c\u4e00\u90e8\u5206.\u9759\u6001\u4e3b\u5e2d\u6811**\n\n\u53d1\u660e\u8005\u7684\u539f\u8bdd\uff1a\u201c\u5bf9\u4e8e\u539f\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00[1\u00b7\u00b7\u00b7i]\u5efa\u7acb\u51fa\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u503c\u57df\u4e0a\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5219\u5176\u6811\u662f\u53ef\u51cf\u7684\u201d\n\n\u53ef\u4ee5\u52a0\u51cf\u7684\u7406\u7531\uff1a\u4e3b\u5e2d\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58\u7684\u662f\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u7684\u533a\u95f4\u4fe1\u606f\uff0c\u7ed3\u6784\u76f8\u540c\uff0c\u56e0\u6b64\u5177\u6709\u53ef\u52a0\u51cf\u6027\uff08**\u5173\u952e**\uff09\n\n\u9996\u5148\u5f00\u4e00\u4e2a\u6570\u7ec4t[n]\uff0c\u5b58\u50a8\u5185\u5bb9\u4e3aa\u4e2d\u6392\u5e8f\u5e76\u53bb\u91cd\u7684\u503c\uff08\u7c7b\u4f3c\u4e8e\u79bb\u6563\u5316\uff09\uff0c\u6bcf\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u5185\u5bb9\u662fa1...ai\u6b64\u533a\u95f4\u4e2d\u7684\u6811\u5728t[n]\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\n\n**\u4e3e\u4e2a\u6817\u5b50**\n\nan\uff1a4 1 1 2 8 9 4 4 3\n\n\u5c06\u5e8f\u5217\u6392\u5e8f\u5e76\u53bb\u91cd\u540e\u5f97\u5230t[n]\uff1a\n\ntn\uff1a1 2 3 4 8 9\n\n\u5bf9\u524d\u7f00a[1...9]\u5efa\u6811\uff0c1\\*2\uff0c2\\*1\uff0c3\\*1\uff0c4\\*3\uff0c8\\*1\uff0c9\\*1\uff0c\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\u5373\u4e3a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c\uff0c\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u8868\u793at[i,j],\u4e2d\u7684\u6570\u5b57\u5728a[1...9]\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\n\n\u5efa\u6811\uff1a\n\n![\u6b64\u6811\u4e3aa[1...9]\u4e3a\u524d\u7f00\u5373\u6574\u4e2a\u5bf9\u5e8f\u5217\u4fe1\u606f\u6240\u5efa\u7acb\u7684\u6811](http://img.blog.csdn.net/20171231111359520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**\u601d\u8003**\u5982\u4f55\u6c42\u51fa\u533a\u95f4\u7b2cK\u5927\u503c\uff0c\u4f8b\u5982\u6c42a[1,9],\u4e2d\u7b2c\u516d\u5927\u7684\u6570\n\n\u6839\u8282\u70b9\u5de6\u513f\u5b50\u6709\u56db\u4e2a\u5143\u7d20\uff0c\u5219\u7b2c\u516d\u5927\u7684\u5143\u7d20\u4e00\u5b9a\u5728\u53f3\u513f\u5b50\u4e2d\uff0c\u5229\u7528\u9012\u5f52\u7684\u601d\u60f3\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u533a\u95f4a[1,9]\u4e2d\u53bb\u9664t[1],t[2],t[3],\u540e\u7684\u7b2c\u4e8c\u5927\u6570\uff0c\u6b64\u65f6\u5176\u5de6\u513f\u5b50\u5373\u533a\u95f4[4.5]\u4e2d\u6709\u56db\u4e2a\u5143\u7d20\uff0c4>2\uff0c\u6240\u4ee5\u7b2c\u4e8c\u5927\u6570\u4e00\u5b9a\u5728\u5de6\u513f\u5b50\u4e2d\uff0c\u9012\u5f52\u8fdb\u5165\u5de6\u513f\u5b50\u4e2d\u6240\u4ee5\u6240\u6c42\u7684\u6570\u5c31\u662f\u9664\u53bbt[1],t[2],t[3],t[6],\u540e\u7684\u7b2c\u4e8c\u5927\u6570\uff0c\u6700\u540e\u533a\u95f4[4,4]\u4e2d\u6709\u4e09\u4e2a\u5143\u7d20\uff0c3>2\uff0c\u6240\u4ee5\u533a\u95f4\u7b2c\u4e8c\u5927\u6570\u4e00\u5b9a\u5728\u533a\u95f4[4,4]\u4e2d\u5373t[4]=4,\u6240\u4ee5\u6c42\u5f97\u7684a[1,9]\u7684\u7b2c\u516d\u5927\u503c\u3002\n\n\u82e5\u9700\u8981\u6c42\u533a\u95f4[L,R]\u4e2d\u7684\u7b2cK\u5927\u503c\n\n\u5bf9\u4e8e\u4efb\u610f\u7684i\uff0ca[1,i]\u90fd\u6709\u4e00\u9897\u6811\uff0c\u5219\u533a\u95f4[L,R]\u4e2d\u7b2cK\u5927\u503c\u4e0e\u6c42a[1,R]\u7c7b\u4f3c\uff0c\u7531\u4e8e\u5176\u5177\u6709\u53ef\u51cf\u6027\uff0c\u53ea\u8981\u5728\u9012\u5f52\u7ed3\u675f\u65f6\u51cf\u53bba[1,L-1]\u6240\u5728\u7684\u6811\u5bf9\u5e94\u7684\u90e8\u5206\u5373\u53ef\uff0c\u4f8b\u5982a[L,R]\uff0c\u5c0f\u4e8et[mid]\u7684\u6570\u6709\u516d\u4e2a(mid=(L+R)/2)\u5728a[1,L-1]\u5c0f\u4e8et[mid]\u7684\u6570\u6709\u4e24\u4e2a\uff0c\u5219\u5728a[L,R]\u5c0f\u4e8et[mid]\u7684\u6570\u67096-2=4\u4e2a\uff0c\u9012\u5f52\u8fc7\u7a0b\u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff08\u601d\u60f3\u7c7b\u4f3c\u4e00\u7ef4\u524d\u7f00\u548c\uff09\n\n\u4f46\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u524d\u7f00\u5206\u522b\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u6781\u9ad8\uff0c\u4f1aMLE\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6211\u4eec\u5148\u753b\u51faa[1,5],a[1,6],a[1,7],a[1,8]\u56db\u4e2a\u524d\u7f00\u7684\u7ebf\u6bb5\u6811\uff0c\u5982\u4e0b\uff1a\n\n![[1,5]](http://img.blog.csdn.net/20180104123950066?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)[1,5]\n\n![[1,6]](http://img.blog.csdn.net/20180104124542853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)[1,6]\n\n![[1,7]](http://img.blog.csdn.net/20180104124829000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)[1,7]\n\n![[1,8]](http://img.blog.csdn.net/20180104125108139?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)[1,8]\n\n\u89c2\u5bdf[1,8]\u548c[1,9]\u6211\u4eec\u53d1\u73b0\u4f8b\u5982[1,8],[1,9]\u6709\u8bb8\u591a\u5730\u65b9\u4fe1\u606f\u76f8\u540c\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5927\u91cf\u91cd\u590d\u4fe1\u606f\uff0c\u5360\u7528\u4e86\u591a\u4f59\u7684\u7a7a\u964d\uff0c\u5982\u4f55\u907f\u514d\u7a7a\u95f4\u7684\u6d6a\u8d39\u5462\uff1f\u4f8b\u5982[1,8].[1,9]\u5728\u5efaa[1,9]\u65f6\u6839\u8282\u70b9\u76f4\u63a5\u5411a[1,8]\u7684\u53f3\u5b50\u6811\u8fde\u4e00\u6761\u8fb9\uff0c\u540c\u7406\u5bf9\u4e8e\u5176\u5de6\u513f\u5b50\u8282\u70b9\uff0c\u5b83\u7684\u5de6\u5b50\u6811\u90e8\u5206\u4e5f\u662f\u76f8\u540c\u7684\uff08\u6b64\u65f6\u89c6[1,3]\u4e3a\u6839\u8282\u70b9\uff09\u56e0\u6b64\u8fde\u63a5\u4e00\u6761\u8fb9\u5373\u53ef\uff0c\u5982\u6b64\u6211\u4eec\u53ea\u589e\u52a0\u4e86\u4e09\u4e2a\u8282\u70b9\u5c31\u4fdd\u5b58\u4e86\u4e24\u68f5\u6811\u7684\u5168\u90e8\u4fe1\u606f\u3002\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180105225123866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180105225134358?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u56e0\u6b64\u5728\u4e4b\u524d\u57fa\u7840\u4e0a\u5efa\u6811\u53ea\u9700\u5f00\u4e00\u4e2a\u6570\u7ec4\u50a8\u5b58\u4e24\u4e2a\u7bad\u5934\u6240\u6307\u7684\u4f4d\u7f6e\uff0c\u63a5\u7740\u5411\u4e0b\u904d\u5386\u5c31\u662f\u4e00\u68f5\u5b8c\u6574\u7684\u7ebf\u6bb5\u6811\u589e\u52a0\u8282\u70b9\u4e3a[9],[1],[4]\u4e09\u4e2a\u8282\u70b9\u3002\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180105225226292?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**\u9759\u6001\u4e3b\u5e2d\u6811\u7684\u4e00\u4e9b\u70b9**\n\n1. \u5efa\u6811\u65f6\u9996\u5148\u9700\u8981\u5efa\u4e00\u68f5\u7a7a\u7684\u7ebf\u6bb5\u6811\uff0c\u5373\u6700\u539f\u59cb\u7684\u4e3b\u5e2d\u6811\uff0c\u6b64\u65f6\u4e3b\u5e2d\u6811\u53ea\u542b\u6709\u4e00\u4e2a\u7a7a\u7684\u8282\u70b9\uff0c\u4e4b\u540e\u4f9d\u6b21\u5bf9\u539f\u5e8f\u5217\u6309\u67d0\u79cd\u987a\u5e8f\u66f4\u65b0\uff0c\u5c31\u662f\u5c06\u539f\u5e8f\u5217\u52a0\u5165\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\n\n2.\u4e3b\u5e2d\u6811\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7ebf\u6bb5\u6811\u96c6\uff0c\u5b83\u5305\u542b\u4e86\u6240\u6709\u7ebf\u6bb5\u6811\u7684\u4f18\u52bf\uff0c\u5e76\u4e14\u53ef\u4ee5\u4fdd\u5b58\u5386\u53f2\u72b6\u6001\uff0c\u4e3b\u5e2d\u6811\u67e5\u627e\u548c\u66f4\u65b0\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u4e3aO(nlogn)\u4e14\u603b\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogn+nlogn)\u524d\u8005\u4e3a\u7a7a\u6811\u7684\u590d\u6742\u5ea6\uff0c\u540e\u8005\u4e3a\u66f4\u65b0n\u6b21\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u7f3a\u70b9\u662f\u7a7a\u95f4\u635f\u8017\u5de8\u5927\n\n3.\u4e3b\u5e2d\u6811\u53ef\u4ee5\u5904\u7406\u533a\u95f4[L,R]\u4e2d\u4ecb\u4e8e[x,y]\u7684\u503c\u7684\u95ee\u9898\n\n4.\u82e5\u589e\u52a0\u7a7a\u95f4\u5783\u573e\u56de\u6536\u5219\u53ef\u4ee5\u4f7f\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u4e00\u4e2alog\n\n**\u4f8b\u9898**\n\n[POI]2014 KUR-Couriers(https://www.luogu.org/problemnew/show/3567)\n\n\u7ed9\u5b9a\u957f\u4e3aN\u7684\u5e8f\u5217\uff0cm\u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4[l,r]\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u6570\u5728[l,r]\u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e(l-r+1)/2\uff0c\u82e5\u5b58\u5728\u8f93\u51fa\u8fd9\u4e2a\u6570\uff0c\u5426\u5219\u8f93\u51fa0(n,m<=500000)\n\n**\u9898\u89e3**\n\n\u88f8\u7684\u7ebf\u6bb5\u6811\u6a21\u677f\uff0c\u76f4\u63a5\u628a\u8bfb\u5165\u7684\u6570\u5b57\u63d2\u5165\u5230\u4e3b\u5e2d\u6811\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee[i,j]\u5728[1,n]\u4e2d\u770b\u5c0f\u4e8emid(mid=(i+j)/2)\u7684\u6570\u5b57\u6709\u591a\u5c11\u4e2a\uff0c\u82e5\u6bcf\u4e2a\u6570\u7684\u4e8c\u500d\u4e0d\u5927\u4e8ej-i+1\u5219[L,mid]\u4e2d\u5c31\u4e0d\u5b58\u5728\uff0c\u4e0d\u7136\u518d\u53bb\u770b\u5927\u4e8emid\u7684\u6570\u5b57\u6709\u591a\u5c11\u4e2a\uff0c\u82e5\u4e24\u4e2a\u5747\u4e0d\u884c\u8f93\u51fa0.\n\n\u4e3e\u4e2a\u6817\u5b50\uff1a1 1 3 2 3 4 3 \u67e5\u8be2\u533a\u95f4[1,7]\n\n\u9996\u5148\u533a\u95f4\u4e8c\u5206\uff1a\u91cd\u70b9a[mid]=2 \u5c0f\u4e8e-> 4<7-1+1 \u5927\u4e8e-> 8<7-1+1\n\n\u533a\u95f4\u53f3\u79fb\uff0c\u5982\u6b64\u53cd\u590d\uff0c\u6700\u540e\u533a\u95f4\u4e8c\u5206\u52301 1 3 [2 3 4 3]\n\n\u5c0f\u4e8e-> 2<7-4+1 \u5927\u4e8e-> 2<7-4+1\n\n\u5747\u4e0d\u6ee1\u8db3\uff0c\u8f93\u51fa0\n\n**\u7b2c\u4e8c\u90e8\u5206\u00b7\u52a8\u6001\u4e3b\u5e2d\u6811**\n\n\u52a8\u6001\u4e3b\u5e2d\u6811\u5c31\u662f\u5728\u9759\u6001\u4e3b\u5e2d\u6811\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u6279\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u7ebf\u6bb5\u6811\n\n**\u4e3e\u4e2a\u6817\u5b50**\n\n5 3\n3 2 1 4 7\n\nQ 1 4 3 \u8be2\u95ee\u533a\u95f4[1,4]\u7684\u7b2c\u4e09\u5c0f\u6570\n\nC 2 6 \u5c06\u7b2c\u4e8c\u4e2a\u6570\u53d8\u4e3a6\n\nQ 2 5 3\n\nn\u662f\u539f\u5e8f\u5217\u4e2a\u6570\n\nT[i]\u8868\u793a\u7b2ci\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\n\nS[i]\u8868\u793a\u6811\u72b6\u6570\u7ec4\u601d\u7ef4\u5efa\u7684\u7b2ci\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\n\nL[i]\u8868\u793a\u8282\u70b9i\u7684\u5de6\u5b50\u8282\u70b9\u7f16\u53f7\n\nR[i]\u8868\u793a\u8282\u70b9i\u7684\u53f3\u5b50\u8282\u70b9\u7f16\u53f7\n\nsum[i]\u8868\u793a\u8282\u70b9i\u5bf9\u5e94\u533a\u95f4\u4e2d\u6570\u7684\u4e2a\u6570\u3002\n\n\u8fd9\u91cc\u79bb\u6563\u5316\u5efa\u6811\u8fc7\u7a0b\u548c\u9759\u6001\u4e3b\u5e2d\u6811\u6709\u4e00\u70b9\u4e0d\u540c\uff0c\u6211\u4eec\u5fc5\u987b\u628a\u6240\u6709\u8be2\u95ee\u5148\u5b58\u8d77\u6765\u5e76\u4e14\u628a\u6539\u53d8\u7684\u6570\u4e5f\u52a0\u5165\u5230\u539f\u5e8f\u5217\u4e2d\u518d\u79bb\u6563\u5316\u5efa\u6811\uff0c\u4f1a\u5bfc\u81f4\u7a7a\u95f4\u590d\u6742\u5ea6\u548c\u9759\u6001\u6709\u6240\u533a\u522b\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u79bb\u6563\u5316\u540e\u5e8f\u5217\u4e3a3 2 1 4 6 5\u5206\u522b\u5bf9\u5e94\u539f\u5e8f\u5217\u76843 2 1 4 7\u548c\u6539\u53d8\u540e\u76846\u3002\n\n\u4e4b\u540e\u540c\u9759\u6001\u4e00\u6837\u5efa\u7a7a\u6811\uff0c\u6309\u539f\u5e8f\u5217\u524d\u7f00\u5efa\u6811\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u91cd\u70b9\u4e86\uff0c\u5bf9\u4e8e\u9898\u76ee\u7ed9\u51fa\u7684\u4fee\u6539\u64cd\u4f5c\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u6279\u7ebf\u6bb5\u6811\u6765\u8bb0\u5f55\u66f4\u65b0\uff0c\u8fd9\u4e9b\u7ebf\u6bb5\u6811\u4ee5\u6811\u72b6\u6570\u7ec4\u7684\u601d\u7ef4\u6765\u7ef4\u62a4\u3002\n\n\u4e00\u5f00\u59cb\uff0cS[0]\u3001S[1]\u3001S[2]\u3001S[3]\u3001S[4]\u3001S[5] \uff08\u6ce8\u610f\u4e00\u5171\u6709n+1\u4e2a \u5373 0\u5230n\uff09(\u6811\u72b6\u6570\u7ec4\u7684\u6bcf\u4e2a\u8282\u70b9)\u8fd9\u4e9b\u90fd\u4e0eT[0]\u76f8\u540c(\u4e5f\u5c31\u662f\u6bcf\u4e2a\u8282\u70b9\u5efa\u4e86\u4e00\u68f5\u7a7a\u6811)\u3002\n\n\u5bf9\u4e8eC 2 6 \u8fd9\u4e2a\u64cd\u4f5c\uff0c \u6211\u4eec\u53ea\u9700\u8981\u51cf\u53bb\u4e00\u4e2a2\uff0c\u52a0\u4e0a\u4e00\u4e2a5\uff08\u5bf9\u5e94\u6539\u53d8\u540e\u76846\uff09\u5373\u53ef\u3002  \u8fd9\u4e2a\u66f4\u65b0\u6211\u4eec\u6309\u6811\u72b6\u6570\u7ec4\u7684\u601d\u60f3\u66f4\u65b0\uff0c\u6bd4\u5982\u8fd9\u91cc\u7684\u51cf2\uff0c\u6211\u4eec\u8981\u4ecei=2\uff08\u539f\u5e8f\u5217\u4e2d\u7b2c2\u4e2a\u65702\u5728\u79bb\u6563\u5316\u540e\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff09\u5373S[2]\u5f00\u59cb\u66f4\u65b0\uff0c\u5e76\u5f80\u4e0alowbit(i)\u76f4\u5230\u5927\u4e8e5\uff0c\u8fd9\u91cc\u6211\u4eec\u4f1a\u66f4\u65b0S[2]\u548cS[4]\u3002 \u8fb9\u770b\u56fe\u8fb9\u7406\u89e3\uff08\u8fd9\u4e2a\u56fe\u6700\u540e\u5e94\u8be5\u662f\u5728\u8282\u70b95\u90a3\u91cc\u51cf1\uff09\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180105225821415?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u5bf9\u4e8e\u52a05\u540c\u6837\u662f\u4eceS[2]\u5f00\u59cb\u66f4\u65b0\n\n\uff08\u8fd9\u4e2a\u56fe\u6700\u540e\u5e94\u8be5\u662f\u5728\u8282\u70b910\u90a3\u91cc\u52a01\uff09\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180105225926253?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEzNTE5MzczNjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u8fd9\u6837\u6211\u4eec\u67e5\u8be2\u7684\u65f6\u5019T[]\u548c\u9759\u6001\u4e00\u6837\uff0c\u518d\u6309\u6811\u72b6\u6570\u7ec4\u7684\u601d\u7ef4\u52a0\u4e0aS[]\u5c31\u53ef\u7b97\u51fa\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u4e2d\u6570\u7684\u4e2a\u6570\uff0c\u518d\u6309\u9759\u6001\u7684\u601d\u60f3\u67e5\u8be2\u5373\u53ef\u3002\n\n**\u4f8b\u9898**\n\nLuogu P3168 [CQOI]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\n\n(https://www.luogu.org/problemnew/show/3168)\n\n\u6709n\u4e2a\u4efb\u52a1\u5206\u522b\u6301\u7eedm\u79d2\uff0c\u6bcf\u4e2a\u4efb\u52a1\u4ecesi\u79d2\u5f00\u59cb\u5230ei\u79d2\u7ed3\u675f\u4e14\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7pi\n\n\u6709m\u4e2a\u8be2\u95ee\u9700\u8981\u56de\u7b54\u7b2cxi\u79d2\u65f6\u6b63\u5728\u6267\u884c\u4efb\u52a1\u4e2d\u4f18\u5148\u7ea7\u524dki\u5c0f\u7684\u548c\uff0c\u5e76\u4e14\u5f3a\u5236\u5728\u7ebf\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u6b63\u6574\u6570mn\uff0c\u8868\u793a\u4efb\u52a1\u603b\u6570\u548c\u65f6\u95f4\u8303\u56f4\uff0c\u4e4b\u540em\u884c \u6bcf\u884c\u4e09\u4e2a\u6570si\uff0cei\uff0cpi\uff0c\u63cf\u8ff0\u4e00\u4e2a\u4efb\u52a1\uff0c\u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884c\u56db\u4e2a\u6570xi\uff0cAi\uff0cBi\uff0cCi\u67e5\u8be2\u53c2\u6570Ki\u7531\u516c\u5f0fki=1+(Ai+Pre+Bi)modCi\u5f97\u5230\uff0c\u5176\u4e2dpre\u8868\u793a\u4e0a\u4e00\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\uff0cpre\u521d\u59cb\u503c\u4e3a1\n\npi<=1e7\n\n**\u9898\u89e3**\n\n\u7531\u4e8e\u65f6\u95f4\u5728\u53d8\u5316\uff0c\u4efb\u52a1\u4f1a\u5f00\u59cb\u6216\u7ed3\u675f\uff0c\u7531\u4e8e\u60f3\u77e5\u9053\u4efb\u610f\u65f6\u523b\u4efb\u52a1\u6267\u884c\u60c5\u51b5\uff0c\u9700\u8981\u7528\u5230\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u4e3b\u5e2d\u6811\n\n\u5148\u5728\u7b2c0s\u521b\u5efa\u4e00\u4e2a\u7a7a\u7248\u672c\uff0c\u5c06\u6bcf\u4e00\u4e2a\u4efb\u52a1\u5206\u4e3a\u4e24\u6b65\u64cd\u4f5c\n\n1\u4efb\u52a1\u5728si\u79d2\u63d2\u5165\n\n2\u4efb\u52a1\u5728ei+1\u79d2\u5220\u9664\n\n\u5728\u63d2\u5165\u5220\u9664\u65f6\u8981\u65b0\u5efa\u8282\u70b9\n\n\u7531\u4e8e\u6743\u503c\u592a\u5927\uff0c\u9700\u8981\u5bf9\u6570\u636e\u79bb\u6563\u5316\n\n\n\n\n\n\n\n",
        "postTime": 1515164636,
        "uid": 32121,
        "name": "Lpy_Now",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "### [\u5b89\u5229\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/LonecharmRiver/articles/9087536.html)\n\n# \u629b\u51fa\u95ee\u9898\n\n\u7ed9\u5b9a$N$\u4e2a\u6570\uff08$int$\u8303\u56f4\u5185\uff09\uff0c\u4e00\u5171$M$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u90fd\u8981\u8be2\u95ee\u533a\u95f4$[l,r]$\u7684\u7b2c$k$\u5927\u7684\u6570\u3002\n\u5176\u4e2d$N,M,l,r$\u5747\u4e0d\u8d85\u8fc7$2\\times 10^5$\uff0c\u4fdd\u8bc1\u8be2\u95ee\u6709\u7b54\u6848\u3002\n\n# \u89e3\u51b3\u95ee\u9898\n\n## \u66b4\u529b\u6cd5\n\n\u663e\u800c\u6613\u89c1\uff0c\u6700\u66b4\u529b\u7684\u529e\u6cd5\u5c31\u662f\u533a\u95f4\u6392\u5e8f\u7136\u540e\u8f93\u51fa\u6392\u5e8f\u540e\u7b2c$k$\u4e2a\u6570\u3002\u6700\u574f\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nm\\lg n)$\uff0c\u4e0d\u8d85\u65f6\u624d\u602a\u3002\n\n## \u4e3b\u5e2d\u6811\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff09\u6cd5\n\n\u4e8e\u662f\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u65b0\u7684\u6570\u636e\u7ed3\u6784\u8bde\u751f\u4e86\uff0c\u4e5f\u5c31\u662f\u4e3b\u5e2d\u6811\u3002\n\n\u4e3b\u5e2d\u6811\u672c\u540d\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3b\u5e2d\u6811\u662f\u57fa\u4e8e\u7ebf\u6bb5\u6811\u53d1\u5c55\u800c\u6765\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u5176\u524d\u7f00\"\u53ef\u6301\u4e45\u5316\"\u610f\u5728\u7ed9\u7ebf\u6bb5\u6811\u589e\u52a0\u4e00\u4e9b\u5386\u53f2\u70b9\u6765\u7ef4\u62a4\u5386\u53f2\u6570\u636e\uff0c\u4f7f\u5f97\u6211\u4eec\u80fd\u5728\u8f83\u77ed\u65f6\u95f4\u5185\u67e5\u8be2\u5386\u53f2\u6570\u636e\uff0c\u56fe\u793a\u5982\u4e0b\u3002\n\n![\u4e3b\u5e2d\u6811\u4e00\u89c8](https://cdn.luogu.com.cn/upload/pic/20234.png)\n\n\u56fe\u4e2d\u7684\u6a59\u8272\u8282\u70b9\u4e3a\u5386\u53f2\u8282\u70b9\uff0c\u5176\u53f3\u8fb9\u591a\u51fa\u6765\u7684\u8282\u70b9\u662f\u65b0\u8282\u70b9\uff08\u4fee\u6539\u8282\u70b9\uff09\u3002\n\n\u4e0b\u9762\u6211\u4eec\u6765\u8bb2\u600e\u4e48\u6784\u5efa\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u3002\n\n## \u4e3b\u5e2d\u6811\u6559\u7a0b\n\n- \u8981\u6c42\uff1a\u638c\u63e1\u7ebf\u6bb5\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u3002\n- \u6ce8\u610f\uff1a\u4e00\u822c\u4e3b\u5e2d\u6811\u4e00\u7c7b\u7684\u9898\u76ee\uff0c\u96be\u7684\u4e0d\u662f\u5199\u4e3b\u5e2d\u6811\uff0c\u800c\u662f\u4e3b\u5e2d\u6811\u7684\u8fd0\u7528\u3002\n\n### \u4e3b\u5e2d\u6811\u7684\u70b9\u4fee\u6539\n\n\u4e0d\u540c\u4e8e\u666e\u901a\u7ebf\u6bb5\u6811\u7684\u662f\u4e3b\u5e2d\u6811\u7684\u5de6\u53f3\u5b50\u6811\u8282\u70b9\u7f16\u53f7\u5e76\u4e0d\u80fd\u591f\u7528\u8ba1\u7b97\u5f97\u5230\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4e0b\u6765\uff0c\u4f46\u662f\u5bf9\u5e94\u7684\u533a\u95f4\u8fd8\u662f\u6ca1\u95ee\u9898\u7684\u3002\n```cpp\n//\u8282\u70b9o\u8868\u793a\u533a\u95f4[l,r]\uff0c\u4fee\u6539\u70b9\u4e3ap\uff0c\u4fee\u6539\u503c\u6839\u636e\u9898\u610f\u8bbe\u5b9a\uff08\u6b64\u5904\u6211\u4eec\u5148\u4e0d\u8c08\u9898\u76ee\uff0c\u53ea\u8c08\u6570\u636e\u7ed3\u6784\uff09\nint modify(int o, int l, int r, int p)\n{\n    int oo = ++node_cnt;\n    lc[oo] = lc[o]; rc[oo] = rc[o]; sum[oo] = sum[o] + 1;//\u65b0\u8282\u70b9\uff0c\u8fd9\u91cc\u662f\u6839\u636e\u6a21\u677f\u9898\u6765\u7684\n    if(l == r)//\u9012\u5f52\u5e95\u5c42\u8fd4\u56de\u65b0\u8282\u70b9\u7f16\u53f7\uff0c\u4fee\u6539\u7236\u8282\u70b9\u7684\u513f\u5b50\u6307\u5411\n    {\n        //sum[oo] = t;\u5982\u679c\u9898\u76ee\u8981\u6c42sum\u662f\u52a0t\u7684\u518d\u8fd9\u6837\u5f04\uff0c\u7136\u540e\u4e0a\u9762\u7684+1\u5c31\u53bb\u6389\n        return oo;\n    }\n    int mid = (l + r) >> 1;\n    if(p <= mid) lc[oo] = modify(lc[oo], l, mid);\n    else rc[oo] = modify(rc[oo], mid+1, r);\n    //sum[oo] = sum[lc[oo]] + sum[rc[oo]];\u5728\u8be5\u9898\u4e2d\uff0c\u4e0d\u9700\u8981\u8fd9\u6837\u505a\uff0c\u4f46\u662f\u5f88\u591a\u60c5\u51b5\u4e0b\u662f\u8981\u8fd9\u6837\u66f4\u65b0\u7684\n    return oo;\n}\n```\n\u81f3\u4e8e\u4e3b\u5e2d\u6811\u7684\u533a\u95f4\u4fee\u6539\uff0c\u5176\u5b9e\u4e5f\u4e0d\u96be\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u6709\u70b9\u9ad8\uff0c\u7b80\u5355\u70b9\u7684\u9898\u76ee\u4e00\u822c\u53ea\u6709\u70b9\u4fee\u6539\uff0c\u6709\u65f6\u5019\u533a\u95f4\u4fee\u6539\u53ef\u4ee5\u8f6c\u5316\u4e3a\u70b9\u4fee\u6539\uff08\u6bd4\u5982NOIP2012\u501f\u6559\u5ba4\uff0c\u6709\u533a\u95f4\u4fee\u6539\u7684\u89e3\u6cd5\u4e5f\u6709\u70b9\u4fee\u6539\u7684\u89e3\u6cd5\uff09\u3002\n\n### \u4e3b\u5e2d\u6811\u7684\u8be2\u95ee\uff08\u5386\u53f2\u533a\u95f4\u548c\uff09\n```cpp\nint ql, qr;//\u67e5\u8be2\u533a\u95f4[l,r]\nint query(int o, int l, int r)//\u8282\u70b9o\u4ee3\u8868\u533a\u95f4[l,r]\n{\n    int ans = 0, mid = ((l + r) >> 1);\n    if(!o) return 0;//\u4e0d\u5b58\u5728\u7684\u5b50\u6811\n    if(ql <= l && r <= qr) return sum[o];//\u533a\u95f4\u5305\u542b\u8fd4\u56de\u533a\u95f4\u503c\n    //\u90fd\u662f\u7ebf\u6bb5\u6811\u6807\u51c6\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u662f\u5de6\u53f3\u5b50\u6811\u591a\u4e86\u4e00\u4e2a\u8bb0\u5f55\u800c\u5df2\n    if(ql <= mid) ans += query(lc[o], l, mid);\n    if(qr > mid) ans += query(rc[o], mid+1, r);\n    return ans;\n    //\u70b9\u64cd\u4f5c\u5c31\u4e0d\u7528\u8bf4\u4e86\n}\n```\n\n### \u4e3b\u5e2d\u6811\u590d\u6742\u5ea6\u5206\u6790\n\n\u5982\u679c\u53ea\u6309\u7167\u4e0a\u8ff0\u505a\u6cd5\u53bb\u505a\u7684\u8bdd\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(\\lg n)$\uff0c\u6bcf\u6b21\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u4e5f\u662f$O(\\lg n)$\u3002\n\n## \u6a21\u677f\u9898\u6559\u7a0b\n\n\u6a21\u677f\u9898\u5c31\u662f\u4e3b\u5e2d\u6811\u7684\u5178\u578b\u4f8b\u9898\uff0c\u8be2\u95ee\u533a\u95f4\u7b2c$k$\u5927\u3002\u5148\u4e0d\u8bf4\u533a\u95f4$[l,r]$\u5427\uff0c\u5c31\u8bf4\u8bf4$[1,r]$\u600e\u4e48\u505a\u3002\n\n### \u6a21\u677f\u9898\u7684[1,r]\u60c5\u51b5\n\n\u7531\u9898\u610f\u77e5\u9053\u6211\u4eec\u80af\u5b9a\u8981\u5bf9\u533a\u95f4\u8fdb\u884c\u6392\u5e8f\uff0c\u4f46\u662f\u6211\u4eec\u7684\u6392\u5e8f\u4e0d\u662f\u6bcf\u6b21\u8be2\u95ee\u624d\u6392\u5e8f\uff0c\u662f\u521d\u59cb\u5316\u5c31\u6392\u5e8f\u5e76\u79bb\u6563\u5316\u2014\u2014\u9488\u5bf9\u6570\u5b57\u8f83\u5927\u4f46\u6570\u636e\u4e0d\u5927\u7684\u60c5\u51b5\u4e0b\uff08\u5177\u4f53\u89c1\u65b9\u6cd5\uff09\u3002\u6392\u5e8f\u79bb\u6563\u5316\u5b8c\u6bd5\u540e\uff0c\u4ee5\u79bb\u6563\u5316\u6570\u7ec4\u5efa\u4e3b\u5e2d\u6811\uff0c\u8bbe$i$\u5c5e\u4e8e\u533a\u95f4$[1,n]$\uff0c\u5bf9\u539f\u6570\u7ec4\u7684$[1,i]$\u533a\u95f4\u7684\u6570\u505a**\u7edf\u8ba1**\uff08\u4f8b\u5982\u4e0b\u56fe\uff0c\u533a\u95f4\u4e2d\u6309\u79bb\u6563\u5316\u6570\u7ec4\u987a\u5e8f\u7edf\u8ba1$1$\u7684\u4e2a\u6570\u3001$2$\u7684\u4e2a\u6570\u3001$3$\u7684\u4e2a\u6570\u3001$4$\u7684\u4e2a\u6570\u3001$8$\u7684\u4e2a\u6570\u3001$9$\u7684\u4e2a\u6570\uff09\uff0c\u6709\u5e8f\u5730\u63d2\u5165\u8282\u70b9\u5230\u79bb\u6563\u5316\u6570\u7ec4\u7684\u4e3b\u5e2d\u6811\u4e2d\uff0c\u8bb0\u5f55\u597d\u539f\u6570\u7ec4\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u8d77\u70b9\uff0c\u9488\u5bf9\u6837\u4f8b\u6709\u51e0\u4e2a\u793a\u610f\u56fe\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u6a59\u8272\u8282\u70b9\u662f\u65b0\u8282\u70b9\uff0c\u4e0e\u4e4b\u524d\u51fa\u73b0\u7684\u90a3\u4e2a\u56fe\u4e0d\u4e00\u6837\u3002\n\n- $[1,1]$\u7684\u60c5\u51b5\n![\u56fe\u793a1](https://cdn.luogu.com.cn/upload/pic/20235.png)\n\n- $[1,4]$\u7684\u60c5\u51b5\n![\u56fe\u793a2](https://cdn.luogu.com.cn/upload/pic/20236.png)\n\n\u60c5\u51b5\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u6211\u4eec\u6309\u7167\u4e0a\u9762\u7684\u505a\u6cd5\u6784\u5efa\u7684\u4e3b\u5e2d\u6811\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u67e5\u627e\u7b2c$k$\u5c0f\u503c\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u4ee5\u79bb\u6563\u6570\u7ec4\u6784\u5efa\u7684\u4e3b\u5e2d\u6811\uff0c\u90a3\u4e48\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u5de6\u5b50\u6811\u90e8\u5206\u7684\u6570\u5fc5\u5b9a\u4e0d\u5927\u4e8e\u53f3\u5b50\u6811\u90e8\u5206\u7684\u6570\u3002\u4e8e\u662f\u5c31\u53ef\u4ee5\u5c06\u5de6\u513f\u5b50\u7684\u8282\u70b9\u4e2a\u6570$x$\u4e0e$k$\u505a\u6bd4\u8f83\uff0c\u82e5$k\\leq x$\uff0c\u5219\u7b2c$k$\u5c0f\u503c\u4e00\u5b9a\u5728\u5de6\u5b50\u6811\u91cc\u9762\uff0c\u82e5$x\\leq k$\uff0c\u5219\u7b2c$k$\u5c0f\u503c\u4e00\u5b9a\u5728\u53f3\u5b50\u6811\u91cc\u9762\uff0c\u7136\u540e\u9012\u5f52\u5f80\u4e0b\u8d70\uff0c\u7f29\u5c0f\u8303\u56f4\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u524d\u8005\u9012\u5f52\u65f6\uff0c$k$\u76f4\u63a5\u4f20\u4e0b\u53bb\u5373\u53ef\uff0c\u540e\u8005\u9012\u5f52\u65f6\uff0c\u9700\u8981\u5c06$k$\u51cf\u53bb\u5de6\u5b50\u6811\u7684\u6570\u7684\u4e2a\u6570\u518d\u4f20\u9012\u8fd9\u4e2a$k$\u503c\u3002\n\n\u4f8b\u5982\u6211\u4eec\u67e5\u627e$[1,4]$\u4e2d\u7b2c$2$\u5c0f\u7684\u503c\uff0c\u56fe\u793a\u5982\u4e0b\uff0c\u7eff\u8272\u8282\u70b9\u4e3a\u8be5\u503c\u5b58\u5728\u7684\u533a\u95f4\u4f4d\u7f6e\u3002\n\n![\u56fe\u793a3](https://cdn.luogu.com.cn/upload/pic/20237.png)\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7b2c\u4e8c\u4e2a\u7eff\u8272\u8282\u70b9\u624d\u662f\u7eff\u8272\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u56e0\u4e3a**\u5de6\u5b50\u6811\u8868\u793a\u7684\u533a\u95f4\u662f\u9760\u524d\u7684\u90a3\u4e00\u534a**\u3002\n\n\u65b9\u6cd5\u603b\u7ed3\u5982\u4e0b\uff1a\n1. \u5c06\u539f\u59cb\u6570\u7ec4\u590d\u5236\u4e00\u4efd\uff0c\u7136\u540e\u6392\u5e8f\u597d\uff0c\u7136\u540e\u53bb\u6389\u591a\u4f59\u7684\u6570\uff0c\u5373\u5c06\u6570\u636e\u79bb\u6563\u5316\u3002\u63a8\u8350\u4f7f\u7528C++\u7684STL\u4e2d\u7684`unique`\u51fd\u6570\uff1b\n2. \u4ee5**\u79bb\u6563\u5316\u6570\u7ec4**\u4e3a\u57fa\u7840\uff0c\u5efa\u4e00\u4e2a\u5168$0$\u7684\u7ebf\u6bb5\u6811\uff0c\u79f0\u4f5c\u57fa\u7840\u4e3b\u5e2d\u6811\uff1b\n3. \u5bf9\u539f\u6570\u636e\u4e2d\u6bcf\u4e00\u4e2a$[1,i]$\u533a\u95f4\u7edf\u8ba1\uff0c\u6709\u5e8f\u5730\u63d2\u5165\u65b0\u8282\u70b9\uff08\u9898\u76ee\u4e2d$i$\u6bcf\u589e\u52a0$1$\u5c31\u4f1a\u591a\u4e00\u4e2a\u6570\uff0c\u4ec5\u9700\u5bf9\u4e3b\u5e2d\u6811\u5bf9\u5e94\u7684\u8282\u70b9\u589e\u52a0$1$\u5373\u53ef\uff09\uff1b\n4. \u5bf9\u4e8e\u67e5\u8be2$[1,r]$\u4e2d\u7b2c$k$\u5c0f\u503c\u7684\u64cd\u4f5c\uff0c\u627e\u5230$[1,r]$\u5bf9\u5e94\u7684\u6839\u8282\u70b9\uff0c\u6211\u4eec\u6309\u7167\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\u64cd\u4f5c\u5373\u53ef\uff08\u8fd9\u4e2a\u6839\u8282\u70b9\u53ca\u5176\u5b50\u5b59\u6784\u6210\u7684\u5fc5\u5b9a\u662f\u4e00\u9897\u7ebf\u6bb5\u6811\uff09\u3002\n\n### \u6a21\u677f\u9898\u7684\u89e3\u51b3\n\n\u73b0\u5728\u6211\u4eec\u771f\u6b63\u6765\u89e3\u51b3\u533a\u95f4\u8be2\u95ee$[l,r]$\u7684\u95ee\u9898\u3002\n\n\u6784\u5efa\u4e3b\u5e2d\u6811\u7684\u65b9\u6cd5\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u95ee\u9898\u6b63\u5728\u4e8e\u533a\u95f4\u8be2\u95ee\u600e\u4e48\u5199\u3002\u5176\u5b9e\uff0c\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u5c06\u4e3b\u5e2d\u6811$[1,r]$\u51cf\u53bb\u4e3b\u5e2d\u6811$[1,l-1]$\u5c31\u884c\u4e86\u3002\u5176\u5b9e\u8fd9\u4e2a\u539f\u56e0\u5e76\u4e0d\u96be\u60f3\uff0c\u9996\u5148\u770b\u5230\u4e3b\u5e2d\u6811\u7684\u5e95\u5c42\uff0c\u5168\u90e8\u662f\u5bf9\u6570\u7684\u7edf\u8ba1\u3002\u5f53\u4e3b\u5e2d\u6811$[1,r]$\u51cf\u53bb\u4e3b\u5e2d\u6811$[1,l-1]$\u65f6\uff0c\u7edf\u8ba1\u4e5f\u8ddf\u7740\u51cf\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u73b0\u5728\u7edf\u8ba1\u8bb0\u5f55\u7684\u662f$[l,r]$\u533a\u95f4\u3002\n\n\u800c\u6211\u4eec\u4e0d\u9700\u8981\u5355\u72ec\u51cf\uff0c\u53ea\u9700\u8981\u8fb9\u9012\u5f52\u67e5\u8be2\u8fb9\u51cf\uff0c\u5177\u4f53\u89c1\u67e5\u8be2\u90e8\u5206\u4ee3\u7801\u3002\n```cpp\n//\u521d\u59cb\u7684u\u548cv\u5206\u522b\u4ee3\u8868\u7684\u662f\u70b9l-1\u548c\u70b9r\uff0cl\u548cr\u5206\u522b\u8868\u793a\u7ebf\u6bb5\u6811\u70b9\u4ee3\u8868\u7684\u533a\u95f4\uff0c\u521d\u59cb\u7684k\u5982\u9898\nint query(int u, int v, int l, int r, int k)\n{\n    int ans, mid = ((l + r) >> 1), x = sum[lc[v]] - sum[lc[u]];\n    //\u56e0\u4e3a\u4e3b\u5e2d\u6811\u662f\u533a\u95f4\u7edf\u8ba1\u597d\u4e86\u7684\uff0c\u53ea\u8981\u51cf\u4e00\u4e0b\u5373\u53ef\uff0c\u65e0\u9700\u9012\u5f52\u5230\u53f6\u5b50\u518d\u5904\u7406\n    if(l == r)//\u627e\u5230\u76ee\u6807\u4f4d\u7f6e\n        return l;\n    if(x >= k) ans = query(lc[u], lc[v], l, mid, k);\n    else ans = query(rc[u], rc[v], mid+1, r, k-x);//\u53f3\u5b50\u6811\u8bb0\u5f97\u6539\u53d8k\u7684\u503c\n    return ans;\n}\n```\n\n### \u6a21\u677f\u9898\u5b8c\u6574\u4ee3\u7801\n\n\u81f3\u6b64\uff0c\u6a21\u677f\u9898\u4e5f\u5c31\u89e3\u51b3\u4e86\uff0c\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\u3002\u6ce8\u610f\uff0c\u4fee\u6539\u70b9\u5b9a\u4e49\u4e3a\u4e86\u5168\u5c40\u53d8\u91cf\u3002\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define M 200010\n\nusing namespace std;\n\nint node_cnt, n, m;\nint sum[M<<5], rt[M], lc[M<<5], rc[M<<5];//\u7ebf\u6bb5\u6811\u76f8\u5173\nint a[M], b[M];//\u539f\u5e8f\u5217\u548c\u79bb\u6563\u5e8f\u5217\nint p;//\u4fee\u6539\u70b9\n\nvoid build(int &t, int l, int r)\n{\n    t = ++node_cnt;\n    if(l == r)\n        return;\n    int mid = (l + r) >> 1;\n    build(lc[t], l, mid);\n    build(rc[t], mid+1, r);\n}\n\nint modify(int o, int l, int r)\n{\n    int oo = ++node_cnt;\n    lc[oo] = lc[o]; rc[oo] = rc[o]; sum[oo] = sum[o] + 1;\n    if(l == r)\n        return oo;\n    int mid = (l + r) >> 1;\n    if(p <= mid) lc[oo] = modify(lc[oo], l, mid);\n    else rc[oo] = modify(rc[oo], mid+1, r);\n    return oo;\n}\n\nint query(int u, int v, int l, int r, int k)\n{\n    int ans, mid = ((l + r) >> 1), x = sum[lc[v]] - sum[lc[u]];\n    if(l == r)\n        return l;\n    if(x >= k) ans = query(lc[u], lc[v], l, mid, k);\n    else ans = query(rc[u], rc[v], mid+1, r, k-x);\n    return ans;\n}\n\nint main()\n{\n    int l, r, k, q, ans;\n    scanf(\"%d%d\", &n, &m);\n    for(register int i = 1; i <= n; i += 1)\n        scanf(\"%d\", &a[i]), b[i] = a[i];\n    sort(b+1, b+n+1);\n    q = unique(b+1, b+n+1) - b - 1;\n    build(rt[0], 1, q);\n    for(register int i = 1; i <= n; i += 1)\n    {\n        p = lower_bound(b+1, b+q+1, a[i])-b;//\u53ef\u4ee5\u89c6\u4e3a\u67e5\u627e\u6700\u5c0f\u4e0b\u6807\u7684\u5339\u914d\u503c\uff0c\u6838\u5fc3\u7b97\u6cd5\u662f\u4e8c\u5206\u67e5\u627e\n        rt[i] = modify(rt[i-1], 1, q);\n    }\n    while(m--)\n    {\n        scanf(\"%d%d%d\", &l, &r, &k);\n        ans = query(rt[l-1], rt[r], 1, q, k);\n        printf(\"%d\\n\", b[ans]);\n    }\n    return 0;\n}\n```\n\n### \u9898\u76ee\u590d\u6742\u5ea6\u5206\u6790\n\n\u9898\u76ee\u4e00\u5f00\u59cb\u7684\u79bb\u6563\u5316\u590d\u6742\u5ea6\u4e3a$O(n\\lg n)$\uff0c\u6784\u5efa\u57fa\u7840\u4e3b\u5e2d\u6811\u590d\u6742\u5ea6\u4e3a$O(n\\lg n)$\uff0c\u7edf\u8ba1\u5e76\u63d2\u5165\u7684\u590d\u6742\u5ea6\u662f$O(n\\lg n + n\\lg n)=O(n\\lg n)$\uff0c\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u662f$O(m\\lg n)$\u3002\u590d\u6742\u5ea6\u603b\u548c\u5c31\u662f$O((m+n)\\lg n)$\u3002\n\n# \u5c3e\u6ce8\n\n~~\u81f3\u4eca\u8fd8\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u53eb\u4e3b\u5e2d\u6811\u3002\u3002\u3002~~\n\n\u8fd9\u9053\u9898\u76ee\u662f\u79bb\u7ebf\u7684\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u7684\u9759\u6001\u4e3b\u5e2d\u6811\u3002\u5728\u7ebf\u4fee\u6539\u7684\u4e00\u7c7b\u9898\u76ee\u4e5f\u4e0d\u96be\uff0c\u5728\u6b64\u4e0d\u4f5c\u8bb2\u89e3\uff0c\u4f46\u662f\u4ee5\u540e\u53ef\u80fd\u4f1a\u53e6\u5199\u535a\u5ba2\u3002\n\u4e3b\u5e2d\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u8fd8\u662f\u975e\u5e38\u68d2\u7684\uff0c\u8fd9\u4e5f\u63d0\u9192\u6211\u4eec\u5e94\u8be5\u5b66\u4f1a\u521b\u9020\u6027\u601d\u7ef4\u3002\n- \u611f\u8c22LMH\u5927\u4f6c\u7684\u5e2e\u52a9\uff1b\n- \u611f\u8c22\u6d1b\u8c37\u5e73\u53f0\u7684\u5e2e\u52a9\uff1b\n- \u611f\u8c22\u90a3\u4e9b\u5199\u9898\u89e3\u7684\u5927\u4f6c\u7684\u5e2e\u52a9\u3002\n\n# \u5199\u5728\u6700\u540e\n\n\u611f\u8c22\u5927\u5bb6\u7684\u5173\u6ce8\u548c\u9605\u8bfb\u3002\n\n\u672c\u6587\u7ae0\u501f\u9274\u4e86\u5c11\u8bb8\u601d\u8def\uff0c\u6700\u540e\u7ecf\u8fc7\u672c\u4eba\u601d\u8003\u72ec\u7acb\u64b0\u5199\u6b64\u6587\u7ae0\uff0c\u5982\u9700\u8f6c\u8f7d\uff0c\u8bf7\u6ce8\u660e\u51fa\u5904\u3002",
        "postTime": 1527431833,
        "uid": 50871,
        "name": "Euler_Pursuer",
        "ccfLevel": 6,
        "title": "\u4e3b\u5e2d\u6811"
    },
    {
        "content": "\u672c\u7bc7\u9898\u89e3\u53d1\u5e03\u8005\u4e5f\u662f\u521a\u5b66\u7684\u4e3b\u5e2d\u6811,\u6c34\u5e73\u53c8low,\u8fd8\u662f\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3 \n\n\u52a0\u4e0a\u662f\u5148\u5728\u4ee3\u7801\u4e0a\u5199\u4e86\u6ce8\u91ca\u624d\u5199\u7684\u9898\u89e3,\u6240\u4ee5\u6574\u4e2a\u6587\u7ae0\u53ef\u80fd\u4f1a\u6709\u70b9\u91cd\u590d\u5570\u55e6,\u6709\u57fa\u7840\u7684\u53ef\u4ee5\u76f4\u63a5\u770b\u4ee3\u7801 \u5728\u770b\u7684\u8fc7\u7a0b\u4e2d\u6709\u4ec0\u4e48\u64cd\u4f5c\u4e0d\u61c2\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u770b\n\n\u5982\u679c\u6709\u4ec0\u4e48\u4e0d\u5bf9\u7684\u5730\u65b9\u8fd8\u8bf7\u5927\u5bb6\u591a\u591a\u5305\u6db5\u2026\u2026\n\n\u524d\u7f6e\u8981\u6c42: **\u7ebf\u6bb5\u6811** \u79bb\u6563\u5316 \u524d\u7f00\u548c\n\t\n\u53ef\u80fd\u6bd4\u8f83\u597d\u7684\u89c2\u770b\u4f53\u9a8c: https://www.luogu.org/blog/0-1s/solution-p3834 (\u81f3\u5c11\u6211\u770b\u7740\u8fd8\u884c)\n\n-----------------------------------------------\n## \u601d\u8def\n\n\n  \u770b\u5230\u9898\u76ee \u6211\u4eec\u9996\u5148\u8003\u8651\u4e2a0\u5206\u5199\u6cd5 \u5bf9\u6bcf\u4e2a[l,r]sort\u4e00\u904d\u6c42\u51fa\u7b54\u6848 \n  \n  \u7136\u540e\u89c9\u5f97\u4e0d\u884c \u8003\u8651\u6570\u636e\u7ed3\u6784 \u6709\u4e00\u6bb5\u6570\u7ec4 \u8fd8\u6709\u533a\u95f4\u8be2\u95ee \u90a3\u5c31\u770b\u770b\u7ebf\u6bb5\u6811\n  \n  \u9898\u76ee\u662f\u6c42\u7b2ck\u5c0f \u6240\u4ee5**\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f[l,r]\u5185\u6570\u7684\u51fa\u73b0\u6b21\u6570**\n  \n  \u770b\u6570\u636e\u8303\u56f4 2*10^5\u4e2a\u6570 \u6570\u7684\u8303\u56f4\u662f\u00b110^9 \u56e0\u6b64\u7528\u79bb\u6563\u5316\n  \n  \u5f00\u4e2ax[200010]\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6570\u7ec4 x[i]\u5b58\u7b2ci\u5c0f\u7684\u6570 \u518d\u5f00\u4e2a\u7ebf\u6bb5\u6811\u7684\u6570\u7ec4\u5b58\u533a\u95f4\u5185\u6570\u7684\u51fa\u73b0\u6b21\u6570 \u5927\u6982\u662f\u8fd9\u6837\u5b50 \u2026\u2026\u5b8c\u4e86 \u6211\u597d\u50cf\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u4e86......\n  \n  \u518d\u770b\u9898\u76ee \u53d1\u73b0\u8fd9\u6837\u5b50\u505a\u7684\u8bdd\u6bcf\u4e2a\u8be2\u95ee\u9700\u8981\u7528[l,r]\u533a\u95f4\u5185\u7684\u6570\u7684\u4e2a\u6570\u6765\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811 \u6700\u591a\u5c31\u67092*10^5\u68f5\u7ebf\u6bb5\u6811 \u65f6\u95f4\u7a7a\u95f4\u90fd\u7206\u4e86 \u597d\u4e86 GG\n\n\n------------------------------------------------\n\n\u6211\u4eec\u6362\u4e2a\u601d\u8def\u770b \u5177\u4f53\u662f\u4ec0\u4e48\u601d\u8def\u6211\u4e5f\u4e0d\u61c2\n\n\u5148\u4ece\u7b80\u5355\u5165\u624b \u5148\u6c42[1,r]\u7684\u7b2ck\u5c0f\n\n\u5bf9\u4e8e[1,i]\u6811\u4e0e[1,i+1]\u6811 **\u540e\u8005\u53ea\u662f\u591a\u4e86a[i+1]\u7684\u63d2\u5165\u6240\u5e26\u6765\u7684\u5f71\u54cd**\n\n\u5982\u56fe\uff1a\n\n[![PBnMRg.md.jpg](https://s1.ax1x.com/2018/08/03/PBnMRg.md.jpg)](https://imgchr.com/i/PBnMRg)\n\n\u6211\u4eec\u968f\u4fbf\u7f16\u4e00\u4e2a\u6570\u636e \u9884\u5904\u7406\u5982\u56fe(\u56fe\u4e11 \u8f7b\u55b7)\n\n[![PBnui8.md.jpg](https://s1.ax1x.com/2018/08/03/PBnui8.md.jpg)](https://imgchr.com/i/PBnui8)\n\n**\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811 \u6211\u4eec\u53ef\u4ee5\u5728\u65e7\u7684\u7ebf\u6bb5\u6811\u7684\u57fa\u7840\u4e0a\u901a\u8fc7 \u589e\u52a0\u65b0\u7684\u8282\u70b9 \u6765\u6784\u5efa\u8fd9\u9897\u6811** \u8282\u7701\u4e86\u5927\u91cf\u7684\u7a7a\u95f4\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2aT[i]\u8bb0\u5f55(1~i)\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9(\u5bb9\u6613\u770b\u51fa\u6839\u8282\u70b9\u662f\u4e00\u5b9a\u662f\u4e0d\u540c\u7684)\n\n\u8fd9\u6837\u7b97\u5b8c\u4e86\u4e4b\u540e \u6211\u4eec\u5c31\u53ef\u4ee5**\u901a\u8fc7T[i]\u6765\u8be2\u95ee(1~i)\u7ebf\u6bb5\u6811** \n\n\u65b0\u7684\u95ee\u9898\u51fa\u73b0\u4e86 \u90a3\u5982\u4f55\u89e3\u51b3\u533a\u95f4\u95ee\u9898\u5462 \u6211\u4eec\u80fd\u6c42[1,i]\u7684\u7b2ck\u5c0f(\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u5e94\u7528) \u4f46\u662f\u5982\u4f55\u6c42[l,r]\u7684\u7b2ck\u5c0f\u5462\n\n\n\u60f3\u4e00\u4e0b\n\n\t\t[1,l]\u7ebf\u6bb5\u6811\u662f\u7531\u63d2\u5165 a[1]\u5230a[l]\u7684\u5f71\u54cd \u6784\u6210\u7684\n    \n    \t[1,r]\u7ebf\u6bb5\u6811\u662f\u7531\u63d2\u5165 a[1]\u5230a[r]\u7684\u5f71\u54cd \u6784\u6210\u7684\n    \n    \n\u662f\u4e0d\u662f\u6709\u70b9\u524d\u7f00\u548c\u7684\u611f\u89c9\n\n\n\u90a3\u4e48\n\n\t\t[l,r]\u7ebf\u6bb5\u6811\u662f\u7531\u63d2\u5165 a[l]\u5230a[r]\u7684\u5f71\u54cd \u6784\u6210\u7684\n    \n    \n\u5c31\u7b49\u4e8e \n\n\t\ta[1]\u5230a[r]\u7684\u5f71\u54cd\u51cf\u53bba[1]\u5230a[l-1]\u7684\u5f71\u54cd\n\n\n\u6240\u4ee5\n\n\t\t[l,r]\u7ebf\u6bb5\u6811 = [1,r]\u7ebf\u6bb5\u6811 - [1,l-1]\u7ebf\u6bb5\u6811\n\n\u662f\u4e0d\u662f\u611f\u89c9\u5f88\u6709\u9053\u7406\n\n\n\u90a3\u5177\u4f53\u600e\u4e48\u51cf\u5462\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u662f\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u5185\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \u90a3\u4e48\u53ea\u8981**\u5728(r)\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u51cf\u53bb(l-1)\u7ebf\u6bb5\u6811\u4e0a\u7684\u76f8\u540c\u4f4d\u7f6e\u7684\u8282\u70b9\u7684\u503c** \u5c31\u884c\u4e86\n\n[![PBnQzQ.md.jpg](https://s1.ax1x.com/2018/08/03/PBnQzQ.md.jpg)](https://imgchr.com/i/PBnQzQ)\n\n\u6837\u4f8b\u6709\u70b9\u7b80\u5355 \u4f46\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\t\t\t\t\t\t\n   \n\n\n------------\n\n## \u6a21\u62df\u4ee3\u7801\u89e3\u9898\u8fc7\u7a0b\n\n\u4e0b\u9762\u5728\u7ed9\u51fa\u9898\u9762\u6837\u4f8b\u7684\u6a21\u62df\u8fc7\u7a0b\n\n[![PBnmIf.md.jpg](https://s1.ax1x.com/2018/08/03/PBnmIf.md.jpg)](https://imgchr.com/i/PBnmIf)\n\n\u9884\u5904\u7406\n\n[![PBnKJS.md.jpg](https://s1.ax1x.com/2018/08/03/PBnKJS.md.jpg)](https://imgchr.com/i/PBnKJS)\n\n\u66f4\u65b0\u63d2\u5165\u7684\u6570\u5e26\u6765\u7684\u65b0\u7ebf\u6bb5\u6811\n\n[![PBn1Mj.md.jpg](https://s1.ax1x.com/2018/08/03/PBn1Mj.md.jpg)](https://imgchr.com/i/PBn1Mj)\n\n\u6839\u636e\u4e0a\u9762\u7684\u65b9\u6cd5\u6765\u5f97\u5230\u8be2\u95ee\u9700\u8981\u7684\u7ebf\u6bb5\u6811 \u7136\u540e\u5c31\u8be2\u95ee\u5c31\u5b8c\u4e8b\u4e86\n\n\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801 \u6ce8\u91ca\u53ef\u80fd\u6709\u70b9\u5570\u55e6 \u51d1\u5408\u7740\u770b\u5427\u2026\u2026(\u4ee3\u7801\u65c1\u8fb9\u7684\u5b57\u7b26\u662f\u65e0\u804a\u778e\u5199\u7684 \u65e0\u89c6\u5373\u53ef)\n\n\n\n\n------------\n\n```cpp\n#include <bits/stdc++.h>\n#define MAX 200010\n\nusing namespace std;\n\nint nodeNum;\n//\u6240\u6709\u8282\u70b9\u7684\u6570\u91cf                                           //.............8888.........  //\nint L[MAX<<5],R[MAX<<5],sum[MAX<<5];                     //..............;888........  //\n//L[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u7f16\u53f7                       //...........888..888.......  //\n//sum[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u5185\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570         //........888888..;....88...  //\nint a[MAX],Hash[MAX];                                     //.......888.888.......888..  //\n//a[i]\u4e3a\u539f\u6570\u7ec4 Hash[i]\u4e3a\u6392\u5e8f\u540e\u6570\u7ec4                         //.......888.888.......!888   //\nint T[MAX];                                               //.......88$.888........888.  //\n//T[i]\u4e3a\u63d2\u5165i\u4e2a\u70b9\u540e\u7684\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7                         //......888..888.....888....  //\n                                                         //...........888.....888....  //\nint read()                                               //...........8888888888o....  //\n{                                                         //............&8888888......  //\n\tint ans=0,flag=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') flag=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {ans=(ans<<3)+(ans<<1)+ch-'0';ch=getchar();}\n\treturn ans*flag;\n}\nint build(int l,int r) //\u5efa\u4e00\u4e2a\u7a7a\u6811(\u6240\u6709sum[i]\u90fd\u4e3a0) \n{\n\tint num=++nodeNum; //num\u4e3a\u5f53\u524d\u8282\u70b9\u7f16\u53f7 \n\tif(l!=r)\n\t{\n\t\tint m=(l+r)>>1;\n\t\tL[num]=build(l,m);\n\t\tR[num]=build(m+1,r);\n\t}\n\treturn num; //\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7 \n}\n\nint update(int pre,int l,int r,int x) //pre\u4e3a\u65e7\u6811\u8be5\u4f4d\u7f6e\u8282\u70b9\u7684\u7f16\u53f7\n{\n\tint num=++nodeNum; //\u65b0\u5efa\u8282\u70b9\u7684\u7f16\u53f7 \n\tL[num]=L[pre];R[num]=R[pre];sum[num]=sum[pre]+1;\n\t//\u8be5\u8282\u70b9\u5de6\u53f3\u513f\u5b50\u521d\u59cb\u5316\u4e3a\u65e7\u6811\u8be5\u4f4d\u7f6e\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\n\t//\u56e0\u4e3a\u63d2\u5165\u7684a[i](\u6216Hash[x])\u5728\u8be5\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u4e2d \u6240\u4ee5sum++ \n\tif(l!=r)\n\t{\n\t\tint m=(l+r)>>1;\n\t\tif(x<=m) L[num]=update(L[pre],l,m,x);\n\t\t//x\u51fa\u73b0\u5728\u5de6\u5b50\u6811 \u56e0\u6b64\u53f3\u5b50\u6811\u4fdd\u6301\u4e0e\u65e7\u6811\u76f8\u540c \u4fee\u6539\u5de6\u5b50\u6811 \n\t\telse R[num]=update(R[pre],m+1,r,x);\n\t}\n\treturn num;\n}\n\nint query(int u,int v,int l,int r,int k) //\u7b2ck\u5c0f \n{\n\tif(l==r) return Hash[l]; //\u627e\u5230\u7b2ck\u5c0f l\u662f\u8282\u70b9\u7f16\u53f7 \u6240\u4ee5\u7b54\u6848\u662fHash[l] \n\tint m=(l+r)>>1;\n\tint num=sum[L[v]]-sum[L[u]];\n\t//\u7528\u7b2c\u4e00\u6b21\u6a21\u62df \u8fd9\u6837\u6bd4\u8f83\u5bb9\u6613\u770b\u5f97\u61c2 \u6b64\u65f6u=l-1 v=r \n\t//\u5219num= (1~r)\u6811\u7684\u5de6\u8282\u70b9\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 - (1~(l-1))\u6811\u7684\u5de6\u8282\u70b9\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \n\t//\u5373num\u7b49\u4e8e([l,r])\u6811\u5de6\u513f\u5b50\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \n\tif(num>=k) return query(L[u],L[v],l,m,k);\n\t//\u5f53 \u5de6\u513f\u5b50\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8e\u7b49\u4e8ek \u65f6 \u610f\u5473\u7740 \u7b2ck\u5c0f\u7684\u6570\u5b57\u5728\u5de6\u5b50\u6811\u5904 \n\telse return query(R[u],R[v],m+1,r,k-num);\n\t//\u5426\u5219\u53bb\u53f3\u5b50\u6811\u5904\u627e\u7b2ck-num\u5c0f\u7684\u6570\u5b57 \n}\n\nint main()\n{\n\tint n=read(),m=read();\n\tfor(int i=1;i<=n;i++) {a[i]=read();Hash[i]=a[i];}\n\tsort(Hash+1,Hash+1+n); \n\tint size=unique(Hash+1,Hash+1+n)-Hash-1; \n    //size\u4e3a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6570\u7ec4\u7684\u5927\u5c0f==Hash\u6570\u7ec4\u4e2d\u4e0d\u91cd\u590d\u7684\u6570\u5b57\u7684\u4e2a\u6570\n\tT[0]=build(1,size); //\u521d\u59cb\u5316 \u5efa\u7acb\u4e00\u9897\u7a7a\u6811 \u5e76\u628a\u8be5\u6811\u7684\u6839\u8282\u70b9\u7684\u7f16\u53f7\u8d4b\u503c\u7ed9T[0]\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x=lower_bound(Hash+1,Hash+1+size,a[i])-Hash;\n\t\t//\u5728Hash\u7684 [1,size+1)--->[1,size] \u4e2d\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\n\t\t// \u5927\u4e8e\u7b49\u4e8e(\u5728\u8fd9\u91cc\u53ef\u4ee5\u770b\u6210\u7b49\u4e8e) a[i]\u7684Hash[x]\n\t\tT[i]=update(T[i-1],1,size,x);\n\t\t//\u66f4\u65b0a[i]\u5e26\u6765\u7684\u5f71\u54cd \n\t\t//\u5e76\u5c06\u65b0\u6811\u7684\u6839\u8282\u70b9\u7684\u7f16\u53f7\u8d4b\u503c\u7ed9T[i] \n\t}\n\twhile(m--)\n\t{\n\t\tint l=read(),r=read(),k=read();\n\t\tprintf(\"%d\\n\",query(T[l-1],T[r],1,size,k)); //\u56e0\u4e3aa[l]\u6709\u5f71\u54cd \u6240\u4ee5\u662fT[l-1] \n\t}\n\treturn 0;\n}\n```",
        "postTime": 1533198726,
        "uid": 64288,
        "name": "\u65cb\u8f6c\u5361\u58f3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "# \u5927\u5bb6\u597d\uff0c\u6211\u662f\u4e2a\u6bd2\u7624\uff0c\u6211\u975e\u5e38\u559c\u6b22\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u4e8e\u662f\u6211\u5c31\u7528\u83ab\u961f+\u5206\u5757\u8fc7\u4e86\u8fd9\u4e2a\u9898\uff0c\u800c\u4e14\u8dd1\u7684\u8d3c\u5feb\uff0c\u751a\u81f3\u8dd1\u5230\u4e86\u6700\u4f18\u89e3\u7684\u7b2c\u4e8c\u9875\n\n## Solution\n\n\u53d1\u73b0\u8fd9\u4e2a\u9898\u9759\u6001\u67e5\u8be2\u8d44\u74f7\u79bb\u7ebf\uff0c\u4e8e\u662f\u8003\u8651\u83ab\u961f\u3002\n\n\u5728\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u83ab\u961f\uff1a\n\n\u5c06\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\u540e\uff0c\u5bf9\u539f\u5e8f\u5217\u5206\u5757\u3002\u6309\u7167\u5de6\u7aef\u70b9\u6240\u5728\u5757\u5355\u8c03\u4e0d\u964d\u6392\u5e8f\u3002\u5f53\u5de6\u7aef\u70b9\u6240\u5728\u5757\u76f8\u540c\u65f6\uff0c\u6309\u7167\u53f3\u7aef\u70b9\u5355\u8c03\u6392\u5e8f\u3002\n\n\u7136\u540e\u7528\u5934\u5c3e\u6307\u9488\u6307\u5411\u5f53\u524d\u7684\u533a\u95f4\uff0c\u7ef4\u62a4\u533a\u95f4\u5185\u7684\u4fe1\u606f\u3002\u6bcf\u4e24\u4e2a\u67e5\u8be2\u95f4\u66b4\u529b\u79fb\u52a8\u6307\u9488\u3002\u79fb\u52a8\u6307\u9488\u65f6\u6bcf\u79fb\u52a8\u4e00\u4e0b\u5c31\u7ef4\u62a4\u4e00\u6b21\u7b54\u6848\u3002\n\n\u8003\u8651\u8fd9\u4e48\u505a\u7684\u590d\u6742\u5ea6\uff1a\u4e00\u5171\u6709 $O(\\sqrt{n})$\u4e2a\u5757\uff0c\u6bcf\u4e2a\u5757\u5185\u53f3\u7aef\u70b9\u5355\u8c03\uff0c\u6240\u4ee5\u4e00\u4e2a\u5757\u5185\u53f3\u7aef\u70b9\u6700\u591a\u79fb\u79fb\u52a8 $O(n)$ \u4e2a\u4f4d\u7f6e\uff0c\u4e8e\u662f\u53f3\u7aef\u70b9\u79fb\u52a8 $O(n~\\sqrt{n})$\u4e2a\u4f4d\u7f6e\u3002\u540c\u7406\uff0c\u5de6\u7aef\u70b9\u5728\u4e00\u4e2a\u5757\u5185\u6700\u591a\u79fb\u52a8 $O(\\sqrt{n})$ \u6b21\uff0c\u6bcf\u6b21\u6700\u591a\u79fb\u52a8 $O(\\sqrt{n})$ \u4e2a\u4f4d\u7f6e\uff0c\u5757\u5185\u79fb\u52a8\u6b21\u6570\u662f $O(n)$ \u3002\u4e00\u5171\u6709 $O(\\sqrt{n})$ \u4e2a\u5757\uff0c\u4e8e\u662f\u5de6\u7aef\u70b9\u79fb\u52a8 $O(n~\\sqrt{n})$ \u4e2a\u4f4d\u7f6e\u3002\u4e8e\u662f\u83ab\u961f\u4e0d\u8ba1\u4fee\u6539\u548c\u67e5\u8be2\u7684\u603b\u590d\u6742\u5ea6\u4e3a $O(n~\\sqrt{n})$\u3002\n\n\u7ef4\u62a4\u7b54\u6848\u65f6\uff0c\u6700\u663e\u7136\u7684\u60f3\u6cd5\u662f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\u8fd9\u6837\u5355\u6b21\u4fee\u6539\u590d\u6742\u5ea6 $O(\\log n)$ \uff0c\u67e5\u8be2\u65f6\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u4e8c\u5206\uff0c\u590d\u6742\u5ea6 $O(\\log n)$ \u3002\u4fee\u6539\u603b\u590d\u6742\u5ea6 $O(n~\\sqrt{n}~\\log n)$ \uff0c\u67e5\u8be2\u7684\u603b\u590d\u6742\u5ea6 $O(m~\\log n)$ \u3002\u4e8e\u662f\u53d1\u73b0\u4fee\u6539\u7684\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u5b8c\u5168\u4e0d\u9700\u8981\u8fd9\u4e48\u4f4e\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u5206\u5757\u5c06\u4fee\u6539\u590d\u6742\u5ea6\u5c06\u81f3 $O(1)$ \uff0c\u67e5\u8be2\u590d\u6742\u5ea6\u5347\u9ad8\u81f3 $O(\\sqrt{n})$ \u3002\u5177\u4f53\u7684\uff0c\u79bb\u6563\u5316\u540e\u6309\u7167\u6743\u503c\u5206\u5757\uff0c\u6bcf\u4e2a\u5757\u7ef4\u62a4\u5757\u5185\u5143\u7d20\u51fa\u73b0\u603b\u6b21\u6570\u3002\u67e5\u8be2\u65f6\u66b4\u529b\u4ece\u7b2c\u4e00\u4e2a\u5757\u5f00\u59cb\u626b\uff0c\u7d2f\u52a0\u5143\u7d20\u51fa\u73b0\u603b\u6b21\u6570\uff0c\u5f53\u52a0\u5165\u4e00\u4e2a\u5757\u603b\u6b21\u6570\u5927\u4e8e $k$ \u65f6\u5728\u5757\u5185\u66b4\u529b\u627e\u4f4d\u7f6e\uff0c\u603b\u590d\u6742\u5ea6 $O(n~\\sqrt n)$\u3002\u53ea\u5f00O2\u6700\u6162\u7684\u70b9250ms\n\n## Code\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n#define rg register\n#define ci const int\n#define cl const long long\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 10000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n}\n\ntemplate <typename T>\ninline void ReadDb(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch = IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = x * 10 + (ch ^ 48), ch = IPT::GetChar();\n\tif (ch == '.') {\n\t\tch = IPT::GetChar();\n\t\tdouble base = 1;\n\t\twhile ((ch >= '0') && (ch <= '9')) x += (ch ^ 48) * ((base *= 0.1)), ch = IPT::GetChar();\n\t}\n\tif (lst == '-') x = -x;\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\trg int top=0;\n\tdo {OPT::buf[++top] = x % 10 + '0';} while ( x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 200010;\n\nint n, m;\nint belong[maxn], MU[maxn], temp[maxn], bk[maxn], block[maxn], rmp[maxn], lc[maxn];\n\nstruct Ask {\n\tint l, r, id, ans, k;\n\tinline bool operator<(const Ask &_others) const {\n\t\tif (belong[this->l] != belong[_others.l]) return this->l < _others.l;\n\t\tif (belong[this->l] & 1) return this->r < _others.r;\n\t\treturn this->r > _others.r;\n\t}\n};\nAsk ask[maxn];\n\nvoid init_hash();\nvoid add(ci&);\nvoid dlt(ci&);\n\ninline bool cmp(const Ask &_a,const Ask &_b) {\n\treturn _a.id < _b.id;\n}\n\nint main() {\n\tfreopen(\"1.in\", \"r\", stdin) ;\n\tqr(n); qr(m);\n\tfor (rg int i = 1, sn = sqrt(n); i <= n; ++i) if((belong[i] = i / sn) != belong[i-1]) lc[belong[i]] = i;\n\tfor (rg int i = 1; i <= n; ++i) qr(MU[i]);\n\tinit_hash();\n\tfor (rg int i = 1; i <= m; ++i) {\n\t\tqr(ask[i].l); qr(ask[i].r); qr(ask[i].k); ask[i].id = i;\n\t}\n\tstd::sort(ask + 1, ask + 1 + m);\n\tint prel = ask[1].l, prer = prel - 1;\n\tfor (rg int i = 1; i <= m; ++i) {\n\t\tint l = ask[i].l, r = ask[i].r;\n\t\twhile (prel < l) dlt(prel++);\n\t\twhile (prel > l) add(--prel);\n\t\twhile (prer > r) dlt(prer--);\n\t\twhile (prer < r) add(++prer);\n\t\tint _cnt = 0, cur = 0;\n\t\twhile (_cnt + block[cur] < ask[i].k) _cnt+=block[cur++];\n\t\tfor (rg int j = lc[cur]; ; ++j) if((_cnt += bk[j]) >= ask[i].k) {\n\t\t\task[i].ans = j; break;\n\t\t}\n\t}\n\tstd::sort(ask + 1, ask + 1 + m, cmp);\n\tfor (rg int i = 1; i <= m; ++i) qw(rmp[ask[i].ans], '\\n', true);\n\treturn 0;\n}\n\nvoid init_hash() {\n\tfor (rg int i = 1; i <= n; ++i) temp[i] = MU[i];\n\tstd::sort(temp + 1, temp + 1 + n);\n\tint *ed = std::unique(temp + 1, temp + 1 + n);\n\tfor (rg int i = 1; i <= n; ++i) {\n\t\tint k = MU[i];\n\t\trmp[MU[i] = std::lower_bound(temp + 1, ed, MU[i]) - temp] = k;\n\t}\n}\n\ninline void dlt(ci &k) {\n\t--bk[MU[k]];\n\t--block[belong[MU[k]]];\n}\n\ninline void add(ci &k) {\n\t++bk[MU[k]];\n\t++block[belong[MU[k]]];\n}\n```\n\n\u5bf9\u4e86\u987a\u4fbf\u628a\u4e3b\u5e2d\u6811\u4ee3\u7801\u653e\u4e0a\u9632\u6b62\u6709\u4eba\u55b7\u6211\u4e0d\u81ea\u89c9\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n#define rg register\n#define ci const int\n#define cl const long long\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 1000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n}\n\ntemplate <typename T>\ninline void ReadDb(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch = IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = x * 10 + (ch ^ 48), ch = IPT::GetChar();\n\tif (ch == '.') {\n\t\tch = IPT::GetChar();\n\t\tdouble base = 1;\n\t\twhile ((ch >= '0') && (ch <= '9')) x += (ch ^ 48) * ((base *= 0.1)), ch = IPT::GetChar();\n\t}\n\tif (lst == '-') x = -x;\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\trg int top=0;\n\tdo {OPT::buf[++top] = x % 10 + '0';} while ( x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 200010;\nconst int maxt = 4000010;\n\nint n, m, sz;\nint MU[maxn], temp[maxn], rmp[maxn];\n\nstruct Tree {\n\tTree *ls, *rs;\n\tint l, r, v, k;\n\tinline void update() {\n\t\tthis->v = 0;\n\t\tif(this->ls) this->v = this->ls->v;\n\t\tif(this->rs) this->v += this->rs->v;\n\t}\n};\nTree *pool[maxt], qwq[maxt], *rot[maxn];\nint pltp;\n\nvoid init_hash();\nvoid buildpool();\nvoid buildzero(Tree*, ci, ci);\nvoid build(Tree*, Tree*, ci, ci, ci);\nint ask(Tree*, Tree*, ci);\n\nint main() {\n\tfreopen(\"1.in\", \"r\", stdin);\n\tqr(n); qr(m);\n\tfor (rg int i = 1; i <= n; ++i) qr(MU[i]);\n\tinit_hash();\n\tbuildpool();\n\trot[0] = pool[pltp--];\n\tbuildzero(rot[0], 1, sz);\n\tfor (rg int i = 1; i <= n; ++i) {\n\t\trot[i] = pool[pltp--];\n\t\tbuild(rot[i-1], rot[i], 1, sz, MU[i]);\n\t}\n\t\n\tint a, b, c;\n\twhile(m--) {\n\t\ta = b = c = 0;\n\t\tqr(a); qr(b); qr(c);\n\t\tqw(rmp[ask(rot[a-1], rot[b], c)], '\\n', true);\n\t}\n\treturn 0;\n}\n\nvoid init_hash() {\n\tfor (rg int i = 1; i <= n; ++i) temp[i] = MU[i];\n\tstd::sort(temp + 1, temp + 1 + n);\n\tint *ed = std::unique(temp + 1, temp + 1 + n);\n\tfor (rg int i = 1; i <= n; ++i) {\n\t\tint _tp = MU[i];\n\t\trmp[MU[i] = std::lower_bound(temp + 1, ed, MU[i]) - temp] = _tp;\n\t}\n\tsz = ed - temp - 1;\n}\n\nvoid buildpool() {\n\tfor (rg int i = 0; i < maxt; ++i) pool[i] = qwq + i;\n\tpltp = maxt - 1;\n}\n\nvoid buildzero(Tree *u, ci l, ci r) {\n\tu->l = l; u->r = r;\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tif (l <= mid) {\n\t\tu->ls = pool[pltp--];\n\t\tbuildzero(u->ls, l, mid);\n\t}\n\tif (mid < r) {\n\t\tu->rs = pool[pltp--];\n\t\tbuildzero(u->rs, mid+1, r);\n\t}\n}\n\nvoid build(Tree *pre, Tree *u, ci l, ci r, ci v) {\n\tu->l = l; u->r = r;\n\tif (l == r) {u->v = pre->v + 1;return;}\n\tint mid = (l + r) >> 1;\n\tif (v <= mid) {\n\t\tu->rs = pre->rs;\n\t\tu->ls = pool[pltp--];\n\t\tbuild(pre->ls, u->ls, l, mid, v);\n\t} else {\n\t\tu->ls = pre->ls;\n\t\tu->rs = pool[pltp--];\n\t\tbuild(pre->rs, u->rs, mid + 1, r, v);\n\t}\n\tu->update();\n}\n\nint ask(Tree *pre, Tree *u, ci k) {\n\tif(u->l == u->r) return u->l;\n\tint _v = u->ls ? u->ls->v - pre->ls->v : 0;\n\treturn _v < k ? ask(pre->rs, u->rs, k - _v) : ask(pre->ls, u->ls, k);\n}\n```\n\n## Summary\n\n### \u6211\u7231\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff01",
        "postTime": 1543581491,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u5173\u4e8e\u4e00\u4e2a\u5f88\u5f3a\u7684\u64cd\u4f5c\uff0c\u6574\u4f53\u4e8c\u5206\n\n\u6700\u57fa\u672c\u7684\u8fd0\u7528\u5c31\u662f\u6d1b\u8c37\u7684\u4e3b\u5e2d\u6811\u6a21\u677f\u2014\u2014\u9759\u6001\u533a\u95f4\u7684k\u5927\n\n\u4e0b\u9762\u8bf4\u4e00\u8bf4\u601d\u8def\n\n\u6240\u8c13\u6574\u4f53\uff0c\u5c31\u662f\u6240\u6709\u7684\u8be2\u95ee\u5168\u90e8\u4e00\u8d77\u5904\u7406\uff0c\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u5355\u4e2a\u5355\u4e2a\u4e8c\u5206\u7684\u8bdd\u65e0\u7591\u4f1a\u8d85\u65f6\u3002\u90a3\u4e48\u5982\u4f55\u53ef\u4ee5\u505a\u5230\u8fd9\u70b9\u5462\uff1f\u9996\u5148\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u539f\u6765\u7684\u6570\u548c\u8be2\u95ee\uff0c\u628a\u5b83\u4eec\u5c01\u88c5\u5728\u540c\u6837\u7684\u7ed3\u6784\u4f53\u91cc\u3002\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5305\u62ecx,y,k,id,type\n\n\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u539f\u6765\u7684\u6570\uff0c\u901a\u8fc7\u89c2\u5bdf\u7a0b\u5e8f\u53ef\u4ee5\u53d1\u73b0y,k\u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u7684\u3002x\u4ee3\u8868\u7684\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570\u7684\u5927\u5c0f\uff0cid\u8868\u793a\u6570\u7684\u4f4d\u7f6e\uff0ctype\u662f\u5b83\u7684\u7c7b\u578b\uff08\u4e0d\u662f\u8be2\u95ee\uff09\n\n\u5bf9\u4e8e\u8be2\u95ee\uff0cx\uff0cy\uff0ck\u8868\u793a\u5728\u533a\u95f4x~y\u4e2d\u67e5\u8be2\u7b2ck\u5c0f\u7684\u6570\uff0cid\u8868\u793a\u7684\u662f\u8be2\u95ee\u7684\u7f16\u53f7\uff0ctype\u662f\u5b83\u7684\u7c7b\u578b\uff08\u8be2\u95ee\uff09\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u5bf9\u8fd9\u4e9b\u5c01\u88c5\u597d\u7684\u4ec0\u4e48\u4ec0\u4e48\u4e1c\u897f\u4e00\u8d77\u4e8c\u5206\uff0c\u8fd9\u4e9b\u4e1c\u897f\u6211\u4eec\u5b58\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u63cf\u8ff0\u4e2d\u6211\u4eec\u7ba1\u5b83\u53eb\u961f\u5217\n\n\u5728solve\u51fd\u6570\u4e2d\uff0cql,ql\u5206\u522b\u8868\u793a\u5f53\u524d\u5904\u7406\u7684\u961f\u5217\u7684\u5b50\u5217\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u3002l\uff0cr\u5c31\u662f\u6211\u4eec\u4e8c\u5206\u7684\u6743\u503c\u3002\u9996\u5148\u5224\u65ad\uff0c\u82e5\u662fql>qr\u5c31\u76f4\u63a5return\u3002\u4e4b\u540e\u5224\u65adl\u662f\u4e0d\u662f\u4e0er\u76f8\u7b49\uff0c\u82e5\u662f\u76f8\u7b49\u8bf4\u660e\u627e\u5230\u4e86\uff0c\u6b64\u65f6\u5bf9\u4e8e\u76ee\u524d\u5904\u7406\u7684\u961f\u5217\u4e2d\u6240\u6709\u8be2\u95ee\u800c\u8a00\u7ed3\u679c\u90fd\u662fl\uff08\u6216r\uff09\u3002\n\n\u5982\u679c\u4ee5\u4e0a\u90fd\u6ca1\u6709\u6ee1\u8db3\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u9700\u8981\u7ee7\u7eed\u4e8c\u5206\u4e0b\u53bb\u3002mid=(l+r)>>1\uff0c\u90a3\u4e48\u8003\u8651\u7b97\u51fa\u5f53\u524d\u7ef4\u62a4\u7684\u961f\u5217\u4e2d\u6240\u6709type==1\u7684\u7c7b\u578b\u7684x\u503c\u5c0f\u4e8e\u7b49\u4e8emid\u7684\u5212\u5206\u5230\u5de6\u8fb9\uff0c\u540c\u65f6\u7edf\u8ba1\u4e2a\u6570\u3002\u800c\u5982\u679c\u5927\u4e8emid\u5c31\u5212\u5206\u5230\u53f3\u8fb9\u3002\u600e\u4e48\u7edf\u8ba1\u4e2a\u6570\u5462\uff1f\u6211\u4eec\u6bcf\u6b21\u9012\u5f52\u662f\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u800c\u6bcf\u6b21\u7ed3\u675f\u65f6\u53c8\u628a\u5b83\u7ed9\u6e05\u7a7a\uff0c\uff08\u5982\u679c\u8fd9\u91cc\u53ef\u4ee5\u79bb\u6563\u5316\u7684\u8bdd\u597d\u50cf\u4f1a\u5f88\u5b8c\u7f8e\uff0c\u4f46\u53ef\u4e0d\u53ef\u4ee5\u6211\u6ca1\u6709\u53bb\u60f3\u3002\u3002\u3002\u56e0\u4e3a\u8fd9\u9053\u9898\u786e\u5b9e\u53ea\u662f\u5165\u95e8\u9898\u3002\u5f53\u7136\u4e3b\u8981\u662f\u56e0\u4e3a\u6211\u662f\u849f\u84bb\u7684\u7f18\u6545\uff09\u3002\u5bf9\u4e8etype==2\u7684\u5143\u7d20\u800c\u8a00\uff0c\u76f4\u63a5\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1x\uff0cy\u4e4b\u95f4\u7684\u6bd4mid\u5c0f\u7684\u6570\u7684\u4e2a\u6570\uff0c\u7136\u540e\u548ck\u6bd4\u4e2a\u5927\u5c0f\uff0c\u540c\u6837\u628a\u5b83\u5212\u5206\u6210\u5de6\u53f3\u4e24\u8fb9\n\n\u76f8\u4fe1\u6ca1\u5b66\u8fc7\u7684\u4eba\u6709\u7591\u95ee\u4e86\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5212\u5206\u6210\u5de6\u53f3\u4e24\u8fb9\u5462\uff1f\u9996\u5148\u6211\u4eec\u6bcf\u6b21\u9012\u5f52\u5904\u7406\u7684\u662f\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u5212\u5206\u662f\u5904\u7406\u5b50\u95ee\u9898\u7684\u4e00\u4e2a\u5927\u524d\u63d0\u3002\u5176\u6b21\uff0c\u6211\u4eec\u5f97\u77e5\u5212\u5206\u5230\u53f3\u8fb9\u7684\u65e0\u8bba\u5982\u4f55\u4e0d\u4f1a\u5f71\u54cd\u5de6\u8fb9\u7684\u5904\u7406\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u5de6\u8fb9\u4e0d\u5b58\u5728\u8d21\u732e\u3002\n\n\u9012\u5f52\u7684\u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u4fee\u6539\u961f\u5217\u5206\u51fa\u5de6\u53f3\u5c31\u597d\u4e86\n\n\u503c\u5f97\u518d\u6b21\u63d0\u9192\u7684\u662f\uff0cl\uff0cr\uff0cmid\u4f7f\u6211\u4eec\u4e8c\u5206\u7684\u6570\u503c\uff0c\u8bf7\u4e0d\u8981\u548cql\uff0cqr\u7684\u542b\u4e49\u5f04\u6df7\n\n\u4e0b\u9762\u9644\u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int oo=1e9+7;\nconst int maxn=2e5+15;\nint n,m,cnt;\nint ans[maxn],tree[maxn]; \nstruct NODE\n{\n\tint x;int y;int k;\n\tint id;int type;\n}q[maxn<<1],q1[maxn<<1],q2[maxn<<1];\nvoid add(int x,int y)\n{\n\twhile (x<=n)\n\t{\n\t\ttree[x]+=y;\n\t\tx+=x&(-x);\n\t}\n}\nint sum(int x)\n{\n\tint ans=0;\n\twhile (x)\n\t{\n\t\tans+=tree[x];\n\t\tx-=x&(-x);\n\t}\n\treturn ans;\n}\nvoid solve(int ql,int qr,int l,int r)\n{\n\tif (ql>qr) return;\n\tif (l==r){\n\t\tfor (int i=ql;i<=qr;i++)\n\t\tif (q[i].type==2) ans[q[i].id]=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tint p1=0,p2=0;\n\tfor (int i=ql;i<=qr;i++)\n    if (q[i].type==1){\n    \tif (q[i].x<=mid){\n    \t\tadd(q[i].id,1);\n    \t\tq1[++p1]=q[i];\n\t\t}\n\t\telse q2[++p2]=q[i];\n\t}\n\telse {\n\t\tint res=sum(q[i].y)-sum(q[i].x-1);\n\t\tif (res>=q[i].k) q1[++p1]=q[i];\n\t\telse {\n\t\t\tq[i].k-=res;\n\t\t\tq2[++p2]=q[i];\n\t\t}\n\t}\n\tfor (int i=1;i<=p1;i++) if (q1[i].type==1) add(q1[i].id,-1);\n\tfor (int i=1;i<=p1;i++)\n\tq[i+ql-1]=q1[i];\n\tfor (int i=1;i<=p2;i++)\n\tq[i+ql+p1-1]=q2[i];\n\tsolve(ql,ql+p1-1,l,mid);\n\tsolve(ql+p1,qr,mid+1,r);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tq[++cnt]=(NODE){x,1,oo,i,1};\n\t}\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint x,y,k;\n\t\tscanf(\"%d%d%d\",&x,&y,&k);\n\t\tq[++cnt]=(NODE){x,y,k,i,2};\n\t}\n\tsolve(1,cnt,-oo,oo);\n\tfor (int i=1;i<=m;i++)\n\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1528373593,
        "uid": 63019,
        "name": "\u661f\u661f\u4e4b\u706b",
        "ccfLevel": 0,
        "title": "\u6574\u4f53\u4e8c\u5206"
    },
    {
        "content": "\u8fd9\u9898\u8fd8\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u505a\uff0c\u7136\u800c\u5e76\u6ca1\u6709\u9898\u89e3\uff0c\u4e8e\u662f\u6765\u5199\u4e00\u7bc7\u5427\u3002\n\n\n\u7ebf\u6bb5\u6811\u5408\u5e76 \u4e0e \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5176\u5b9e\u7528\u5230\u4e86\u7c7b\u4f3c\u7684\u601d\u60f3\uff0c\u5c31\u662f\u591a\u4e2a\u7ebf\u6bb5\u6811\u5171\u7528\uff0c\u964d\u4f4e\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\n\n\u8fd9\u91cc\u6240\u8c13\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u5c31\u662f\u628a\u4e24\u4e2a\u7ebf\u6bb5\u6811\u5bf9\u5e94\u8282\u70b9\u7684\u4fe1\u606f\u5408\u5e76\uff0c\u5e76\u8fd4\u56de\u65b0\u7ebf\u6bb5\u6811\u7684\u6839\uff08\u4e3a\u4e86\u9632\u6b62\u4e00\u4e9b\u5947\u602a\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8981\u65b0\u5efa\u8282\u70b9\uff09\u3002\u800c\u4e14\u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u822c\u7528\u4e8e\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u4e5f\u5c31\u662f\u7c7b\u4f3c\u6b64\u9898\u7684\u60c5\u51b5\uff09\uff0c\u53ef\u4ee5\u8bc1\u660e\u6bcf\u6b21\u5408\u5e76\u5747\u644a $\\text O(\\log n)$\u3002\n\n\u90a3\u4e48\u6765\u8003\u8651\u4e00\u4e0b\u600e\u4e48\u5408\u5e76\u4e24\u4e2a\u7ebf\u6bb5\u6811\uff1a  \n\n- \u5982\u679c\u5408\u5e76\u7684\u4e24\u68f5\u7ebf\u6bb5\u6811\uff08\u6709\u53ef\u80fd\u662f\u5b50\u6811\uff09\u6709\u4e00\u4e2a\u6839\u4e3a\u7a7a\uff0c\u663e\u7136\u4e0d\u9700\u8981\u7ee7\u7eed\u5408\u5e76\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u7684\u6839  \n\n- \u5982\u679c\u4e24\u68f5\u7ebf\u6bb5\u6811\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u4fe1\u606f\u4e3a\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u5408\u5e76\uff0c\u7136\u540e\u9012\u5f52\u5408\u5e76\u5de6\u53f3\u5b50\u6811  \n\n\u5199\u6210\u4ee3\u7801\uff0c\u5c31\u662f\u8fd9\u6837\u7684\uff1a  \n\u5176\u4e2d `ls` \u548c `rs` \u5206\u522b\u8868\u793a\u5de6\u53f3\u513f\u5b50\u3002\n```cpp\nint merge(int u,int v){\n    if(!u||!v) return u|v;\n    int x = ++cnt;\n    sum[x] = sum[u]+sum[v];\n    ls[x] = merge(ls[u],ls[v]);\n    rs[x] = merge(rs[u],rs[v]);\n    return x;\n}\n\n```\n\u90a3\u4e48\u53ea\u9700\u8981\u5f00 $n$ \u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u7528\u524d\u7f00\u548c\u7684\u65b9\u6cd5\uff0c\u628a $[1,i]$ \u7684\u4fe1\u606f\u5408\u5e76\u5230\u7b2c $i$ \u68f5\u7ebf\u6bb5\u6811\u4e0a\u3002\n\n\u8981\u67e5\u8be2 $[l,r]$ \u7684\u7b2c $k$ \u5927\uff0c\u7528\u7b2c $r$ \u68f5\u5bf9\u5e94\u51cf\u53bb\u7b2c $l-1$ \u68f5\u5f97\u5230\u7684\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta((n+q)\\log n)$\u3002\n\n\u4ee3\u7801\uff1a  \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#define reg register\n#define ll long long\n#define N 200003\n#define M 7000003\n#define mid ((l+r)>>1)\nusing namespace std;\n\nint rt[N],a[N],b[N];\nint ls[M],rs[M],sum[M];\nint n,m,q,cnt;\n\nvoid insert(int &u,int l,int r,int pos){\n    if(!u) u = ++cnt;\n    sum[u]++;\n    if(l==r) return;\n    if(pos<=mid) insert(ls[u],l,mid,pos);\n    else insert(rs[u],mid+1,r,pos);\n}\n\nint merge(int u,int v){\n    if(!u||!v) return u|v;\n    int x = ++cnt;\n    sum[x] = sum[u]+sum[v];\n    ls[x] = merge(ls[u],ls[v]);\n    rs[x] = merge(rs[u],rs[v]);\n    return x;\n}\n\nint query(int u,int v,int l,int r,int k){\n    if(l==r) return l;\n    int s = sum[ls[v]]-sum[ls[u]];\n    if(k<=s) return query(ls[u],ls[v],l,mid,k);\n    return query(rs[u],rs[v],mid+1,r,k-s);\n}\n\nint main(){\n    int l,r,k,x;\n    scanf(\"%d%d\",&n,&q);\n    for(reg int i=1;i<=n;++i){\n        scanf(\"%d\",&a[i]);\n        b[i] = a[i];\n    }\n    sort(b+1,b+1+n);\n    m = unique(b+1,b+1+n)-b-1;\n    for(reg int i=1;i<=n;++i) insert(rt[i],1,m,lower_bound(b+1,b+1+m,a[i])-b);\n    for(reg int i=2;i<=n;++i) rt[i] = merge(rt[i],rt[i-1]);\n    while(q--){\n        scanf(\"%d%d%d\",&l,&r,&k);\n        x = query(rt[l-1],rt[r],1,m,k);\n        printf(\"%d\\n\",b[x]);\n    }\n    return 0;\n}\n```",
        "postTime": 1574260210,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "**\u8fd9\u91cc\u63d0\u4f9b\u4e24\u4e2a\u975e\u4e3b\u5e2d\u6811\uff0c\u6ca1\u6709\u5176\u4ed6\u9898\u89e3\u63d0\u5230\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u6b63\u786e\uff0c\u6216\u8bb8\u6bd4\u4e3b\u5e2d\u6811\u5199\u8d77\u6765\u66f4\u5bb9\u6613\u7684\u505a\u6cd5**\n\n## \u4ece\u539f\u7406\u5f00\u59cb\n\n\u6211\u4eec\u60f3\u8981\u6c42\u533a\u95f4\u7b2c$k$\u5c0f\uff0c\u9700\u8981\u7528\u4e00\u79cd\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff0c\u7248\u672c$i$\u7ef4\u62a4\u4ece$a_1$\u5230$a_i$\u6240\u6709\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u8fd9\u6837\u6765\u6c42\u51fa\u533a\u95f4\u7b2c$k$\u5c0f\u3002\u90a3\u4e48\uff0c\u201c\u8fd9\u79cd\u201d\u6570\u636e\u7ed3\u6784\u9700\u8981\u6ee1\u8db3\u54ea\u4e9b\u6027\u8d28\uff1f\n\n1. \u8d44\u74f7\u53ef\u6301\u4e45\u5316\uff08\u5e9f\u8bdd\uff0c\u9898\u76ee\u5728\u90a3\uff09\n\n2. \u8d44\u74f7\u67e5\u8be2\u5168\u5c40\u7b2c$k$\u5c0f\uff08\u663e\u7136\uff09\n\n3. **\u4e0d\u540c\u7248\u672c\u6811\u7684\u5f62\u6001\u76f8\u4f3c**\uff08\u4e3a\u6027\u8d28$4$\u63d0\u4f9b\u6761\u4ef6\uff09\n\n4. **\u53ef\u4ee5\u4ece\u4e24\u4e2a\u7248\u672c\u7684\u6811\u6839\u5f00\u59cb\u540c\u65f6\u5728\u6811\u4e0a\u8d70\u8def\uff0c\u5e76\u5728\u201c\u76f8\u540c\u5730\u4f4d\u201d\u7684\u8282\u70b9\u4e0a\u5bf9$size$\u8fdb\u884c\u4f5c\u5dee\uff0c\u6765\u5f97\u5230\u6307\u5b9a\u533a\u95f4\u5185\u7684\u4fe1\u606f\u3002**\uff08\u91cd\u70b9\uff01\uff09\n\n\u90a3\u4e48\uff0c\u6211\u4eec~~\u5f88\u5bb9\u6613~~\u6839\u636e\u4ee5\u4e0a\u6027\u8d28\u60f3\u5230\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\n\n* \u503c\u57df\u7ebf\u6bb5\u6811\uff08\u6807\u51c6\u4e3b\u5e2d\u6811\u505a\u6cd5\uff09\n\n* \u4e8c\u53c9\u641c\u7d22\u6811\uff08\u53ef\u4ee5\u770b\u666e\u901a\u5e73\u8861\u6811P3369\uff09\n\n* 0-1\u5b57\u5178\u6811\uff08\u666e\u901a\u5e73\u8861\u6811P3369\u4e2d\u6709\u51e0\u7bc7\u9898\u89e3\uff09\n\n* Leafy Search Tree\uff08\u4e5f\u6709\u4eba\u53eb\u5b83Finger Tree\uff0c\u4f46\u597d\u50cf\u662f\u4e2a~~\u7f8e\u4e3d\u7684~~\u8bef\u4f1a\uff0c\u6309\u7167\u539f\u7406\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\uff0c\u4f46\u662f\u6211\u592a\u83dc\u6ca1\u5199\u660e\u767d\uff09\n\n## \u672c\u9898\u89e3\u6cd5\n\n\u53ef\u6301\u4e45\u5316\u503c\u57df\u7ebf\u6bb5\u6811\uff08\u4e3b\u5e2d\u6811\uff09\u505a\u6cd5\u5f88\u591a\u9898\u89e3\u90fd\u5199\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u591a\u8bb2\u3002\u91cd\u70b9\u8bb2\u4e0b\u9762\u7684\u4e24\u79cd\u505a\u6cd5\u3002\n\n### \u53ef\u6301\u4e45\u5316\u4e8c\u53c9\u641c\u7d22\u6811\n\n\u56e0\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u6ee1\u8db3**\u4e2d\u5e8f\u904d\u5386\u5373\u6709\u5e8f\u5e8f\u5217**\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53ef\u6301\u4e45\u5316BST\u6765\u89e3\u51b3\u9759\u6001\u533a\u95f4\u7b2c$k$\u5c0f\u7684\u95ee\u9898\uff0c\u53ea\u9700\u8981\u5728\u9012\u5f52\u4e0d\u540c\u7248\u672c\u7684\u201c\u76f8\u540c\u5730\u4f4d\u201d\u8282\u70b9\u65f6\uff0c\u5bf9\u4e24\u4e2a$size$\u4f5c\u5dee\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n\nusing std::cin;\nusing std::cout;\n\nconst int MAXN = 2e5 + 5;\n\nint n, m;\nint a[MAXN];\n\nstruct Node{\n    int val, cnt, siz;\n    Node *ch[2];\n\n    Node() {}\n\n    Node(int val) : val(val) {\n        cnt = 1;\n        siz = 1;\n        ch[0] = ch[1] = NULL;\n    }\n}pool[MAXN << 5];\n\nint ncnt = 0;\n\nNode *NewNode(int val) {\n    pool[ncnt] = Node(val);\n    return &pool[ncnt++];\n}\n\nNode *NewNode(void) {\n    return &pool[ncnt++];\n}\n\nNode *rt[MAXN];\n\nvoid Update(Node *now) {\n    now->siz = now->cnt + (now->ch[0] ? now->ch[0]->siz : 0) + (now->ch[1] ? now->ch[1]->siz : 0);\n}\n\nNode *Copy(Node *now) {\n    Node *ret = NewNode();\n    *ret = *now;\n    return ret;\n}\n\nvoid Insert(Node *&now, int k) {\n    if (!now) {\n        now = NewNode(k);\n        return;\n    }\n    now = Copy(now);\n    if (k < now->val) Insert(now->ch[0], k);\n    else if (k == now->val) now->cnt++;\n    else Insert(now->ch[1], k);\n    Update(now);\n}\n\nint Kth(Node *now1, Node *now2, int k) {\n    int ls1 = ((now1 && now1->ch[0]) ? now1->ch[0]->siz : 0);\n    int ls2 = ((now2 && now2->ch[0]) ? now2->ch[0]->siz : 0);\n    int ls = ls2 - ls1;\n    int ncnt = (now2 ? now2->cnt : 0) - (now1 ? now1->cnt : 0);\n    if (k <= ls) return Kth((now1 ? now1->ch[0] : NULL), (now2 ? now2->ch[0] : NULL), k);\n    else if (k <= ls + ncnt) return now2->val;\n    else return Kth((now1 ? now1->ch[1] : NULL), (now2 ? now2->ch[1] : NULL), k - ls - ncnt);\n}\n\nvoid Init() {\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++) cin >> a[i];\n}\n\nvoid Work() {\n    for (int i = 1; i <= n; i++) {\n        rt[i] = rt[i - 1];\n        Insert(rt[i], a[i]);\n    }\n    int x, y, k;\n    for (int i = 1; i <= m; i++) {\n        cin >> x >> y >> k;\n        cout << Kth(rt[x - 1], rt[y], k) << \"\\n\";\n    }\n}\n\nint main() {\n    std::ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n    Init();\n    Work();\n    return 0;\n}\n```\n\n\u867d\u7136\u8fd9\u4efd\u4ee3\u7801\u53ef\u4ee5\u5207\u6389\u672c\u9898\uff0c~~\u5e76\u4e14\u8dd1\u7684\u6bd4\u5f88\u591a\u4e3b\u5e2d\u6811\u8981\u5feb\u5f97\u591a~~\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6ee1\u8db3\u6027\u8d28$3$\uff0c\u65e0\u6cd5\u5bf9BST\u505a\u51fa\u5e73\u8861\u63aa\u65bd\uff0c\u6240\u4ee5**\u51fa\u9898\u4eba\u53ef\u4ee5\u901a\u8fc7\u6076\u610f\u6784\u9020\u5355\u8c03\u589e/\u51cf\u7684\u5e8f\u5217\u628a\u53ef\u6301\u4e45\u5316BST\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5361\u6210$n^2$**\u3002\n\n\u7136\u800c\uff0c\u4ecb\u4e8e\u7edd\u5927\u591a\u6570\u4eba\u6c42\u9759\u6001\u533a\u95f4\u7b2c$k$\u5c0f\u90fd\u7528\u4e3b\u5e2d\u6811\uff0c\u51fa\u9898\u4eba\u5f88\u96be\u60f3\u5230\u5361BST\uff0c\u6240\u4ee5\u6211\u5230\u73b0\u5728\u6ca1\u56e0\u4e3a\u4f7f\u7528BST\u4ee3\u66ff\u4e3b\u5e2d\u6811\u7ffb\u8f66\u8fc7\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5355\u6b21\u67e5\u8be2$O(log(n))$\uff0c\u9884\u5904\u7406$O(nlog(n))$\uff08\u975e\u6076\u610f\u6570\u636e\uff09\n\n### \u53ef\u6301\u4e45\u53160-1\u5b57\u5178\u6811\n\n0-1\u5b57\u5178\u6811\uff0c\u987e\u540d\u601d\u4e49\uff0c\u628a\u4e8c\u8fdb\u5236\u6570\u5f53\u505a\u5b57\u7b26\u4e32\u5b58\u5165\u5b57\u5178\u6811\u4e2d\uff0c\u8fd9\u6837\u901a\u8fc7\u7ef4\u62a4\u8282\u70b9\u7684$size$\uff0c\u53ef\u4ee5\u6c42\u51fa\u5168\u5c40\u7b2c$k$\u5c0f\uff0c**\u5e76\u4e14\u8dd1\u7684\u6bd4\u7edd\u5927\u591a\u6570\u5e73\u8861\u6811\u90fd\u8981\u5feb**\u3002\u8fd9\u6837\uff0c\u6027\u8d28\u5df2\u7ecf\u6ee1\u8db3\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53ef\u6301\u4e45\u5316\u6765\u6c42\u51fa\u533a\u95f4\u7b2c$k$\u5c0f\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n// luogu-judger-enable-o2\n#include <iostream>\n\nusing std::cin;\nusing std::cout;\ntypedef unsigned int U;\n\nconst int MAXN = 2e5 + 5;\n\nint n, m;\nint a[MAXN];\n\nstruct Node{\n    int siz;\n    Node *ch[2];\n}pool[MAXN << 6];\n\nNode *NewNode() {\n    static int cnt = 0;\n    pool[cnt].siz = 0;\n    pool[cnt].ch[0] = NULL;\n    pool[cnt].ch[1] = NULL;\n    return &pool[cnt++];\n}\n\nNode *rt[MAXN];\n\nvoid Update(Node *now) {\n    now->siz = (now->ch[0] ? now->ch[0]->siz : 0) + (now->ch[1] ? now->ch[1]->siz : 0);\n}\n\nNode *Copy(Node *now) {\n    Node *ret = NewNode();\n    *ret = *now;\n    return ret;\n}\n\nvoid Insert(Node *&now, U num, int base) {//base\u4e3a\u7236\u8fb9\u7684\u6570\u4f4d\n    if (!now) now = NewNode();\n    else now = Copy(now);\n    if (base == 0) {\n        now->siz++;\n        return;\n    }\n    int f = (num & (1U << base - 1)) ? 1 : 0;\n    Insert(now->ch[f], num, base - 1);\n    Update(now);\n}\n\nU Kth(Node *now1, Node *now2, int k, U num, int base) {//num\u4e3a\u6536\u96c6\u4e0b\u6765\u7684\u6570\u5b57\n    if (base == 0) return num;\n    int ls1 = ((now1 && now1->ch[0]) ? now1->ch[0]->siz : 0);\n    int ls2 = ((now2 && now2->ch[0]) ? now2->ch[0]->siz : 0);\n    int ls = ls2 - ls1;\n    if (k <= ls) return Kth(now1 ? now1->ch[0] : NULL, now2 ? now2->ch[0] : NULL, k, num, base - 1);\n    else return Kth(now1 ? now1->ch[1] : NULL, now2 ? now2->ch[1] : NULL, k - ls, num + (1U << base - 1), base - 1);\n}\n\nvoid Init() {\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++) cin >> a[i];\n}\n\nvoid Work() {\n    rt[0] = new Node();\n    for (int i = 1; i <= n; i++) {\n        rt[i] = rt[i - 1];\n        Insert(rt[i], a[i], 32);\n    }\n    int x, y, k;\n    for (int i = 1; i <= m; i++) {\n        cin >> x >> y >> k;\n        cout << Kth(rt[x - 1], rt[y], k, 0, 32) << \"\\n\";\n    }\n}\n\nint main() {\n    std::ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n    Init();\n    Work();\n    return 0;\n}\n```\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a\u6bcf\u6b21$O(log(maxnum))$\uff0c\u9884\u5904\u7406$O(nlog(maxnum))$\n\n\u8fd9\u91cc\u6211\u6bd4\u8f83\u63a8\u8350\u5229\u7528\u53ef\u6301\u4e45\u5316Trie\u6765\u89e3\u51b3\u9759\u6001\u533a\u95f4\u7b2c$k$\u5c0f\u4ee5\u53ca\u7c7b\u4f3c\u95ee\u9898\uff0c\u56e0\u4e3aTrie\u7684\u590d\u6742\u5ea6\u6700\u4f18\uff0c\u5e76\u4e14\u53ef\u4ee5\u89e3\u51b3\u6700\u5927\u5f02\u6216\u548c\u7b49\u5176\u4ed6\u95ee\u9898\u3002",
        "postTime": 1566113839,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u66f4\u591a\u7684\u5185\u5bb9\u5728[\u6211\u7684\u535a\u5ba2](http://www.cnblogs.com/flashhu/)\n\n\n\u5148\u4e0d\u8003\u8651\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684\u60c5\u51b5\uff0c\u4ece\u6700\u7b80\u5355\u7684\u67e5\u8be2\u6574\u4e2a\u533a\u95f4$[1,r]$\u7684\u60c5\u51b5\u5f00\u59cb\u3002\n\n\n\u5bf9\u6570\u636e\u79bb\u6563\u5316\u540e\uff0c\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5bf9\u5e94\u79bb\u6563\u5316\u540e\u503c\u533a\u95f4\u7684\u6570\u7684\u603b\u4e2a\u6570$size$\u3002\u81ea\u4e0a\u81f3\u4e0b\u8fdb\u884c\u8be2\u95ee\u64cd\u4f5c\u65f6\uff0c\u5224\u65ad\u5f53\u524d\u70b9\u5de6\u5b50\u6811\u7684$size$\u4e0e\u8981\u67e5\u8be2\u7684\u6392\u540d$k$\u7684\u5927\u5c0f\u5173\u7cfb\u3002\u5982\u679c\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u5c31\u5230\u5de6\u5b50\u6811\u4e2d\u627e\uff0c$k$\u4e0d\u53d8\u3002\u5426\u5219\u5230\u53f3\u5b50\u6811\u4e2d\u627e\u6392\u540d$k-size$\u7684\u503c\u3002\u8fd9\u4e0e\u5e73\u8861\u6811(Splay,Treap)\u7b49\u67e5\u8be2\u7ed9\u5b9a\u6392\u540d\u6570\u7684\u65b9\u6cd5\u662f\u57fa\u672c\u4e00\u6837\u7684\u3002\n\n\n\u90a3\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u533a\u95f4\uff0c\u53c8\u8be5\u600e\u6837\u7ef4\u62a4\u5462\uff1f\u6211\u4eec\u5176\u5b9e\u53ea\u8981$N$\u4e2a\u7ebf\u6bb5\u6811\u5c31\u597d\u4e86\uff0c\u7b2c$i$\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4$[1,i]$\u7684\u60c5\u51b5\u3002\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u4e86\u524d\u7f00\u548c\u7684\u6027\u8d28\u3002\u67e5\u8be2$[l,r]$\u5c31\u7b49\u4e8e\u67e5\u8be2$[1,r]$\u51cf\u53bb$[1,l-1]$\u7684\u5bf9\u5e94\u7684$size$\u6ca1\u9519\u5427\u3002\u56e0\u4e3a\u7ebf\u6bb5\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5177\u6709\u7ed3\u6784\u7a33\u5b9a\u7684\u6027\u8d28\uff0c\u6240\u4ee5$N$\u4e2a\u7ebf\u6bb5\u6811\u957f\u5f97\u662f\u4e00\u6837\u7684\uff0c\u5bf9\u5e94\u533a\u95f4\u76f8\u51cf\u662f\u53ef\u884c\u7684\u3002\n\n\n\u7136\u800c\u66b4\u529b\u5f00$N$\u4e2a\u7a7a\u95f4\u4fdd\u51c6\u70b8\u6389\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u56de\u5934\u770b\u770b\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u662f\u600e\u4e48\u505a\u7684\u3002\u6ca1\u9519\uff0c\u4ece$[1,i-1]$\u5230$[1,i]$\u4e5f\u53ea\u53d8\u4e86\u4e00\u4e2a\u503c\uff01\u4e8e\u662f\u540c\u6837\u53ea\u8981\u65b0\u5f00$log$\u4e2a\u8282\u70b9\uff0c\u4fdd\u5b58$root_i$\u5230$i$\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u5c31OK\u4e86\u3002\n\n\n\u62ff\u6d1b\u8c37\u9898\u76ee\u91cc\u7684\u6837\u4f8b\u6765\u51e0\u5f20\u56fe\u5427\uff0c\u597d\u7406\u89e3\u4e9b\u3002\n\n\n\u9996\u5148\u662f\u79bb\u6563\u5316\u540e\u7684\u5e8f\u5217\u3002\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180117194204240-714306710.png)\n\n\n\n\u6211\u4eec\u4e00\u5f00\u59cb\u8981\u5efa\u4e00\u68f5\u7a7a\u7ebf\u6bb5\u6811\uff0c\u9664\u4e86\u6709\u4e2a\u7ed3\u6784\uff0c\u6240\u6709\u7684$size$\u5747\u4e3a$0$\u3002\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u7684\u6dfb\u52a0\u7ebf\u6bb5\u6811\u3002\u52a0\u5165$[1,1]$\u7684\u7ebf\u6bb5\u6811\u540e\u4f1a\u662f\u8fd9\u6837\uff1a\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180117194009396-744425697.png)\n\n\u518d\u52a0\u5165$[1,2]$\uff1a\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180117194033053-172157202.png)\n\n\n\u540e\u9762\u7684\u624b\u63a8\u4e00\u4e0b\u5427\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n\u81f3\u6b64\uff0c$N$\u68f5\u6811\u5c31\u5efa\u597d\u4e86\uff0c\u5e76\u4e14\u53ea\u7528\u4e86$N \\log N$\u7684\u7a7a\u95f4\u3002\n\n\n\u67e5\u8be2\u7684\u65f6\u5019\u5b58\u4e24\u4e2a\u70b9\uff0c\u4e00\u5f00\u59cb\u4e3a$root_r$\u548c$root_{l-1}$\uff0c\u4e24\u4e2a$size$\u7684\u5dee\u4e0e$k$\u6765\u6bd4\u5927\u5c0f\uff0c\u4e24\u4e2a\u70b9\u8981\u540c\u65f6\u5f80\u5de6/\u53f3\u8df3\u3002\n\n\u66f4\u591a\u7ec6\u8282\u5c31\u770b\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define R register int\nconst int N=200009,M=5000009;\nint P,a[N],b[N],rt[N],lc[M],rc[M],s[M];\n#define G c=getchar()\ninline void in(R&z)\n{\n    register bool f=0;\n    register char G;\n    while(c<'-')G;\n    if(c=='-')f=1,G;\n    z=c&15;G;\n    while(c>'-')z=(z<<3)+(z<<1)+(c&15),G;\n    if(f)z=-z;\n}//\u5feb\u8bfb\nvoid build(R&t,R l,R r)\n{\n    t=++P;\n    if(l!=r)\n    {\n        R m=(l+r)>>1;\n        build(lc[t],l,m);\n        build(rc[t],m+1,r);\n    }\n}//\u7ebf\u6bb5\u6811\u64cd\u4f5c\uff0c\u5efa\u4e00\u4e2a\u7a7a\u7ebf\u6bb5\u6811\ninline void insert(R*t,R u,R l,R r,R v)\n{\n    while(l!=r)\n    {\n        s[*t=++P]=s[u]+1;//\u6ce8\u610f\u8fd9\u91cc\u8981+1\n        R m=(l+r)>>1;\n        if(v<=m)r=m,rc[*t]=rc[u],t=&lc[*t],u=lc[u];\n        else  l=m+1,lc[*t]=lc[u],t=&rc[*t],u=rc[u];\n    }\n    s[*t=++P]=s[u]+1;\n}//\u63d2\u5165\u64cd\u4f5c\u5728\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u603b\u7ed3\u91cc\u9762\u6709\u66f4\u8be6\u7ec6\u7684\u4ecb\u7ecd\ninline int ask(R t,R u,R l,R r,R k)\n{\n    while(l!=r)\n    {\n        R m=(l+r)>>1,v=s[lc[u]]-s[lc[t]];//\u4f5c\u5dee\n        if(k<=v)r=m,t=lc[t],u=lc[u];//\u4e24\u4e2a\u70b9\u4e00\u8d77\u8df3\n        else  l=m+1,t=rc[t],u=rc[u],k-=v;\n    }\n    return b[l];\n}\nint main()\n{\n    R n,m,i,l,r,sz;\n    in(n);in(m);\n    for(i=1;i<=n;++i)\n        in(a[i]),b[i]=a[i];\n    sort(b+1,b+n+1);\n    sz=unique(b+1,b+n+1)-b-1;//\u79bb\u6563\u5316\uff0c\u6392\u5e8f\u53bb\u91cd\n    build(rt[0],1,sz);\n    for(i=1;i<=n;++i)\n        insert(&rt[i],rt[i-1],1,sz,lower_bound(b+1,b+sz+1,a[i])-b);//\u76f4\u63a5\u7528STL\u7684\u4e8c\u5206\u627e\u5bf9\u5e94\u503c\u4e86\n    while(m--)\n    {\n        in(l);in(r);in(i);\n        printf(\"%d\\n\",ask(rt[l-1],rt[r],1,sz,i));\n    }\n    return 0;\n}\n```",
        "postTime": 1516252243,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "## [\u66f4\u591a\u4e3b\u5e2d\u6811\u5185\u5bb9\u53ef\u89c1\u539f\u6587](https://www.cnblogs.com/bcoier/p/10293521.html)\n\nPS\uff1a\u7531\u4e8e\u7bc7\u5e45\u8f83\u957f\uff0c\u53ea\u7ed9\u51fa\u6a21\u677f\u9898\u4ee3\u7801\uff0c\u5176\u4ed6\u4ee3\u7801\u8be6\u89c1\u4e0a\u8ff0\u8fde\u63a5\n\n\u4e3b\u5e2d\u6811\uff0c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u80fd\u8bbf\u95ee\u5230\u5386\u53f2\u7248\u672c\u7684\u6570\u636e\uff0c\u5e38\u7528\u4e8e\u53ef\u6301\u4e45\u5316\u548c\u533a\u95f4k\u5927\u503c\uff0c\u662f\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u5347\u7ea7\u7248\u3002\n\n## \u53ef\u6301\u4e45\u5316\n\n\u53ef\u6301\u4e45\u5316\u7684\u610f\u601d\u662f\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u7248\u672c\u7684\u6570\u636e\uff0c\u4e00\u773c\u60f3\u5230\u7684\u66b4\u529b\u505a\u6cd5\u5c31\u662f\u5f00n\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u53d6\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u4f18\u5316\u3002\u82e5\u53ea\u6709\u5355\u70b9\u4fee\u6539\uff0c\u4e0d\u96be\u53d1\u73b0\u6bcf\u4e24\u4e2a\u7248\u672c\u7684\u5dee\u522b\u6700\u591a\u4e3a1\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u53ea\u66f4\u6539\u53ea\u4e00\u4e2a\u6570\u5462\uff1f\n\n~~\u663e\u7136\u662f\u53ef\u4ee5\u7684\u3002~~\u5728\u7ebf\u6bb5\u6811\u4e0a\uff0c\u6211\u4eec\u6bcf\u8bbf\u95ee\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u8be5\u8282\u70b9\u6ca1\u6709\u88ab\u4fee\u6539\uff0c\u76f4\u63a5\u7528\u6307\u9488\u6307\u60f3\u8be5\u8282\u70b9\u5373\u53ef\uff08\u548c\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7c7b\u4f3c\uff09\n\n\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u50cf\u4ee5\u524d\u4e00\u6837\u7528$k*2$\u8868\u793a\u5de6\u513f\u5b50\uff0c$k*2+1$\u8868\u793a\u53f3\u513f\u5b50\u4e86\uff08\u5982\u679c\u4f60\u7528\u52a8\u6001\u5f00\u70b9\u5c31\u5f53\u6211\u6ca1\u8bf4\uff09\uff0c\u800c\u662f\u8981\u7528\u6307\u9488\u6765\u8bbf\u95ee\u5de6\u53f3\u513f\u5b50\u3002\n\n\u90a3\u6211\u4eec\u600e\u4e48\u8bbf\u95ee\u6bcf\u4e00\u4e2a\u7248\u672c\u5462\uff1f\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6bcf\u4e00\u4e2a\u7248\u672c\u5b58\u50a8\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u8bbf\u95ee\u5c31\u884c\u4e86\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u597d\u7684\u6765\u5904\u7406\u53ef\u6301\u4e45\u5316\u7684\u95ee\u9898\u4e86\u3002\n\n## [\u4f8b\u98981-\u53ef\u6301\u4e45\u5316\u6570\u7ec4](https://www.luogu.org/problemnew/show/P3919)\n\n\u76f4\u63a5\u91c7\u7528\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u7248\u672c\u7684root\u5373\u53ef\n\n\u6709\u4e86\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u64cd\u4f5c\u5176\u4ed6\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff0c\u5982\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\n\n## [\u4f8b\u98982-\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6](https://www.luogu.org/problemnew/show/P3402)\n\n\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u7248\u672c\u7684fa\u6570\u7ec4\u8bb0\u5f55\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u5f88\u597d\u7684\u67e5\u8be2\u5386\u53f2\u7248\u672c\u4e86\u3002\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u6b21\u5408\u5e76\uff0cfa\u6570\u7ec4\u53ea\u4f1a\u4fee\u6539\u4e00\u4e2a\uff08\u4e0d\u80fd\u7528\u8def\u5f84\u538b\u7f29\uff0c\u56e0\u4e3a\u8def\u5f84\u538b\u7f29\u4e00\u6b21\u4f1a\u4fee\u6539\u5f88\u591a\u503c\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u7528\u4e0a\u8ff0\u65b9\u6cd5\u505a\u5c31\u884c\u4e86\u3002\n\n\u5982\u679c\u76f4\u63a5\u4fee\u6539\uff0c\u90a3\u4e48\u5355\u6b21\u590d\u6742\u5ea6\u53ef\u80fd\u9000\u5316\u6210O(n)\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u6216\u6309\u79e9\u5408\u5e76\n\n## \u533a\u95f4k\u5927\n\n~~\u6211\u4eec\u77e5\u9053~~\uff0c[\u6743\u503c\u7ebf\u6bb5\u6811](https://www.cnblogs.com/zmyzmy/p/9529234.html)\u662f\u53ef\u4ee5\u6c42\u5168\u5c40k\u5927\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u5b9e\u73b0\u533a\u95f4k\u5927\u5462\uff1f\n\n~~\u663e\u7136\u662f\u53ef\u4ee5\u7684\u3002~~\u6211\u4eec\u53ef\u4ee5\u5148\u8003\u86511~l\u533a\u95f4\u7684k\u5927\u3002\n\n\u6211\u4eec\u7ed9\u6bcf\u4e00\u4e2a\u70b9\u5f00\u4e00\u9897\u524d\u7f00\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u5f88\u5bb9\u6613\u7684\u6c42\u51fa1~l\u7684\u7b2ck\u5927\u503c\u4e86\u3002\u4f46\u662f\u5e38\u89c4\u505a\u6cd5\u663e\u7136\u4f1a\u70b8\u7a7a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u91c7\u7528\u53ef\u6301\u4e45\u5316\u7684\u65b9\u6cd5\u6765\u52a8\u6001\u5f00\u70b9\n\n\u90a3\u4e48\u533a\u95f4k\u5927\u600e\u4e48\u505a\u5462\uff1f\n\n\u8fd9\u5c31\u8981\u7528\u5230\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u53ef\u51cf\u6027\u3002\uff08\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u4e2a\u6570\uff0c\u8fd9\u663e\u7136\u662f\u53ef\u51cf\u7684\uff09\n\n\u4e8e\u662f\u5bf9\u4e8e\u6bb5\u533a\u95f4\uff0c\u6211\u4eec\u770b\u6210\u8fde\u6bb5\u533a\u95f4\u76f8\u51cf\u5c31\u884c\u4e86\u3002\n\n## [\u4f8b\u98982-\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811](https://www.luogu.org/problemnew/show/P3834)\n\n\u4ee3\u7801\u5982\u4e0b\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register\n#define il inline\nil int read()\n{\n    re int x=0,f=1;re char c=getchar();\n    while(c<'0'||c>'9') {if(c=='-') f=-1;c=getchar();}\n    while(c>='0'&&c<='9') x=x*10+c-48,c=getchar();\n    return x*f;\n}\n#define maxn 200005\nstruct node\n{\n    int l,r,val;\n}e[maxn*20];\nint n,m,root[maxn],cnt,b[maxn],a[maxn],co;\nil void build(int &k,int l,int r)\n{\n    k=++cnt;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    build(e[k].l,l,mid),build(e[k].r,mid+1,r);\n}\nil void change(int &k,int kk,int l,int r,int ll)\n{\n    k=++cnt; e[k]=e[kk]; e[k].val++;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(ll<=mid) change(e[k].l,e[kk].l,l,mid,ll);\n    else change(e[k].r,e[kk].r,mid+1,r,ll);\n}\nil int query(int ll,int rr,int l,int r,int k)\n{\n    int x=e[e[rr].l].val-e[e[ll].l].val;\n    if(l==r) return b[l];\n    int mid=(l+r)>>1;\n    if(x>=k) return query(e[ll].l,e[rr].l,l,mid,k);\n    return query(e[ll].r,e[rr].r,mid+1,r,k-x);\n}\nint main()\n{\n    n=read(),m=read();\n    for(re int i=1;i<=n;++i) a[i]=b[i]=read();\n    sort(b+1,b+n+1);//\u6392\u5e8f\n    co=unique(b+1,b+n+1)-b-1;//\u53bb\u91cd\n    build(root[0],1,co);\n    for(re int i=1;i<=n;++i)\n    {\n        int now=lower_bound(b+1,b+co+1,a[i])-b;//\u610f\u601d\u662f\u627e\u5230\u548ca[i]\u76f8\u7b49\u7684b\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4fdd\u8bc1\u6240\u6709\u7684\u76f8\u7b49\u7684\u5168\u503c\u90fd\u80fd\u4fdd\u8bc1\u88ab\u5206\u5230\u4e00\u4e2a\u4e0b\u6807\n        change(root[i],root[i-1],1,co,now);//\u56e0\u4e3a\u662f\u524d\u7f00\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u5728\u524d\u4e00\u523b\u5b50\u6811\u7684\u57fa\u7840\u4e0a\u4fee\u6539\n    }\n    while(m--)\n    {\n        int l=read(),r=read(),k=read();\n        printf(\"%d\\n\",query(root[l-1],root[r],1,co,k));\n    }\n    return 0;\n}\n```\n\n## [\u4e0d\u90a3\u4e48\u6a21\u677f\u7684\u6a21\u677f\u9898](https://www.luogu.org/problemnew/show/P2633)\n\n\u8fd9\u9898\u662f\u5f3a\u5236\u5728\u7ebf\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u6574\u4f53\u4e8c\u5206\u7b49\u79bb\u7ebf\u505a\u6cd5\u6c34\u8fc7\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e3b\u5e2d\u6811\u3002\n\n\u62d3\u5c55\u5230\u4e86\u6811\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fdb\u884cdfs\uff0c\u628a\u4e0a\u4e00\u9898\u7684\u5efa\u6811\u8fc7\u7a0b\u6539\u6210change(root[i],root[fa[i]],1,co,now)\u5373\u53ef\n\n\u6700\u540e\u7edf\u8ba1\u7b54\u6848\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u7528r\u7684\u6743\u503c\u7ebf\u6bb5\u6811-l\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u800c\u4f7f\u7528l+r-lca(l,r)-fa[lca(l,r)]\uff08\u8fd9\u91cc\u8868\u793a\u6743\u503c\u7ebf\u6bb5\u6811\uff09\uff0c\u6b63\u786e\u6027\u7c7b\u4f3c\u4e8e\u6811\u4e0a\u5dee\u5206\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u7531\u4e8e\u8981\u6c42LCA\uff0c\u4e14\u8981\u7528dfs\uff0c\u6240\u4ee5\u6211\u76f4\u63a5\u7528\u6811\u5256\u6765\u6c42lca\uff0c\u5c06\u6811\u5256\u7684dfs1\u548c\u8981\u6c42\u7684dfs\u5408\u5e76\u5728\u4e00\u8d77\u5c31\u884c\u4e86\u3002",
        "postTime": 1548420357,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09"
    },
    {
        "content": "# ~~\u4e13\u95e8\u641e\u7834\u574f~~\n---\n\u4f5c\u4e3a\u4e00\u540d\u65b0\u521d\u4e00\u7684\u5b69\u5b50\uff0c\u6211\u8fd8\u4e0d\u4f1a\u4e3b\u5e2d\u6811\uff0c\u53ea\u80fd\u7528\u5212\u5206\u6811\u3002\n\n\u5212\u5206\u6811\u9002\u7528\u4e8e\u9759\u6001\u67e5\u8be2\u533a\u95f4\u7b2cK\u5927\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff08M*logN\uff09\uff0c\u7a7a\u95f4\u6bd4\u4e3b\u5e2d\u6811\u597d\u4e00\u70b9\u3002\n\n---\n# \u5212\u5206\u6811\n\u5212\u5206\u6811\uff0c\u7c7b\u4f3c\u7ebf\u6bb5\u6811\uff0c\u4e3b\u8981\u7528\u4e8e\u6c42\u89e3\u67d0\u4e2a\u533a\u95f4\u7684\u7b2ck \u5927\u5143\u7d20\uff08\u65f6\u95f4\u590d\u6742\u5ea6log(n)\uff09\uff0c\u5feb\u6392\u672c\u4e5f\u53ef\u4ee5\u5feb\u901f\u627e\u51fa\uff0c\u4f46\u5feb\u6392\u4f1a\u6539\u53d8\u539f\u5e8f\u5217\uff0c\u6240\u4ee5\u6bcf\u6c42\u4e00\u6b21\u90fd\u5f97\u6062\u590d\u5e8f\u5217\u3002\n\n\u3000\u5212\u5206\u6811\uff0c\u987e\u540d\u601d\u4e49\u662f\u5c06n \u4e2a\u6570\u7684\u5e8f\u5217\u4e0d\u65ad\u5212\u5206\uff0c\u6839\u7ed3\u70b9\u5c31\u662f\u539f\u5e8f\u5217\uff0c\u5de6\u5b69\u5b50\u4fdd\u5b58\u7236\u7ed3\u70b9\u6240\u6709\u5143\u7d20\u6392\u5e8f\u540e\u7684\u4e00\u534a\uff0c\u53f3\u5b69\u5b50\u4e5f\u5b58\u4e00\u534a\uff0c\u4e5f\u5c31\u662f\u8bf4\u6392\u540d1 -> mid\u7684\u5b58\u5728\u5de6\u8fb9\uff0c\u6392\u540d(mid+1) -> r \u7684\u5b58\u5728\u53f3\u8fb9\uff0c\u540c\u4e00\u7ed3\u70b9\u4e0a\u6bcf\u4e2a\u5143\u7d20\u4fdd\u6301\u539f\u5e8f\u5217\u4e2d\u76f8\u5bf9\u7684\u987a\u5e8f\u3002\n \n \u5f53\u7136\uff0c\u4e00\u822c\u4e0d\u4f1a\u8bf4\u6bcf\u4e2a\u7ed3\u70b9\u5f00\u4e2a\u6570\u7ec4\u5b58\u6570\uff0c\u7ecf\u89c2\u5bdf\uff0c\u6bcf\u4e00\u5c42\u90fd\u5305\u542b\u539f\u672c\u7684n \u4e2a\u6570\uff0c\u53ea\u662f\u987a\u5e8f\u4e0d\u540c\u800c\u5df2\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00val[20][N]\u6765\u4fdd\u5b58\uff0c\u4e5f\u5c31\u662f\u8bf4\u517120\u5c42\uff0c\u6bcf\u4e00\u5c42N\u4e2a\u6570\u3002\n\n\u3000\u3000\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4num\uff0cnum[i]\u8868\u793ai \u524d\u9762\u6709\u591a\u5c11\u6570\u8fdb\u5165\u5de6\u5b69\u5b50\uff08i \u548ci \u524d\u9762\u53ef\u4ee5\u5f04\u6210\u672c\u7ed3\u70b9\u5185\u4e5f\u53ef\u4ee5\u662f\u6240\u6709\uff0c\u4e24\u79cd\u98ce\u683c\u4e0d\u540c\u800c\u5df2\uff0c\u4e0b\u9762\u91c7\u53d6\u7684\u662f\u672c\u7ed3\u70b9\u5185\uff09\uff0c\u548cval\u4e00\u6837\uff0cnum\u4e5f\u5f00\u6210num[20][N]\uff0c\u6765\u8868\u793a\u6bcf\u4e00\u5c42\uff0ci \u548ci \u524d\u9762\uff08\u672c\u7ed3\u70b9\uff09\u6709\u591a\u5c11\u8fdb\u5165\u5de6\u5b69\u5b50\u3002\n\n\u3000\u3000\u7b2c\u4e00\u5c42\uff1a1 \u8fdb\u5165\u5de6\u5b69\u5b50\uff0cnum[1]=1\uff0c5 \u8fdb\u5165\u53f3\u5b69\u5b50\uff0cnum[2]=1\uff0c...\uff0cnum[8]=4\u3002\n\n\u3000\u3000\u7b2c\u4e8c\u5c42\uff1a5 \u8fdb\u5165\u5de6\u5b69\u5b50\uff0cnum[5]=1\uff0c6 \u8fdb\u5165\u53f3\u5b69\u5b50\uff0cnum[6]=1\uff0c...\uff0cnum[8]=2\u3002\n\n\u3000\u3000\u5efa\u56fe\u65f6\u5c31\u662f\u7ef4\u62a4\u6bcf\u4e00\u5c42val[]\u548cnum[]\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n  \u4ee5\u4e0a\u6458\u6284\u4e8e\u6b64[blog](https://www.cnblogs.com/hchlqlz-oj-mrj/p/5744308.html)\n  \n---\n# \u4ee3\u7801\uff1a\n---\n```\n#include<stdio.h>\n#include<string.h>\n#include<algorithm>\nusing namespace std;\nlong long a[200010];       \nlong long sorted[200010]; \nlong long num[50][200010];\nlong long val[50][200010];\nvoid build(long long l,long long r,long long ceng) {\n  if(l==r) return ;\n long long mid=(l+r)/2,isame=mid-l+1;\n   for(long long i=l;i<=r;i++) if(val[ceng][i]<sorted[mid]) isame--;\n  long long ln=l,rn=mid+1; \n for(long long i=l;i<=r;i++)\n   {\n     if(i==l) num[ceng][i]=0;\n     else num[ceng][i]=num[ceng][i-1];\n     if(val[ceng][i]<sorted[mid] || val[ceng][i]==sorted[mid]&&isame>0)\n     {\n       val[ceng+1][ln++]=val[ceng][i];\n       num[ceng][i]++;\n       if(val[ceng][i]==sorted[mid]) isame--;\n     }\n     else\n     {\n       val[ceng+1][rn++]=val[ceng][i];\n }\n   }\n   build(l,mid,ceng+1);\n   build(mid+1,r,ceng+1);\n }\n \n \n long long look(long long ceng,long long sl,long long sr,long long l,long long r,long long k)\n {\n   if(sl==sr) return val[ceng][sl];\n   long long ly; \n   if(l==sl) ly=0;\n  else ly=num[ceng][l-1];\n   long long tolef=num[ceng][r]-ly;\n  if(tolef>=k)\n   {\n     return look(ceng+1,sl,(sl+sr)/2,sl+ly,sl+num[ceng][r]-1,k);\n   }\n   else\n   {\n     long long lr = (sl+sr)/2 + 1 + (l-sl-ly);\n     return look(ceng+1,(sl+sr)/2+1,sr,lr,lr+r-l+1-tolef-1,k-tolef);\n\t}\n}\nint main()\n{\n   \tlong long n,m,l,r,k;\n   \tscanf(\"%lld%lld\",&n,&m);\n\tfor(long long i=1;i<=n;i++)\n    {\n       scanf(\"%lld\",&val[0][i]);\n       sorted[i]=val[0][i];\n    }\n    sort(sorted+1,sorted+n+1);\n    build(1,n,0);\n    while(m--)\n    {\n    \tscanf(\"%lld%lld%lld\",&l,&r,&k);\n    \tprintf(\"%lld\\n\",look(0,1,n,l,r,k));\n   \t}\n  return 0;\n}\n```\n---",
        "postTime": 1564969378,
        "uid": 58363,
        "name": "Bronya19C",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "### \u524d\u7f6e\u77e5\u8bc6\n\n1. \u7ebf\u6bb5\u6811\uff08\u4e0d\u4f1a\u7684\u5148\u8fc7[\u3010\u7ebf\u6bb5\u68111\u3011](https://www.luogu.org/problemnew/show/P3372) & [\u3010\u7ebf\u6bb5\u68112\u3011](https://www.luogu.org/problemnew/show/P3373)\uff09\n2. \u77e5\u9053\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\n\n### \u4e3b\u5e2d\u6811\n\n\u662f\u4e00\u79cd\u7528\u6765\u67e5\u8be2\u533a\u95f4\u9759\u6001\u7b2c $k$ \u5c0f\u7684\u6570\u636e\u7ed3\u6784\n\n\u539f\u578b\u4e3a\u7ebf\u6bb5\u6811\uff0c\u7b80\u5355\u7684\u6765\u8bb2\u5c31\u662f\u5f00 $n$ \u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u533a\u95f4\u67e5\u8be2\u65f6\u53ea\u8981\u67e5\u8be2\u7b2c $l-1$ \u68f5\u548c\u7b2c $r$ \u68f5\u505a\u524d\u7f00\u548c\u505a\u5dee\u5c31\u884c\u4e86\n\n\u4f46\u662f\u5f00 $n$ \u68f5\u7ebf\u6bb5\u6811\u7a7a\u95f4\u590d\u6742\u5ea6\u592a\u5927\n\n\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u6ca1\u52a0\u5165\u4e00\u4e2a\u6570\uff0c\u53ea\u4f1a\u5728\u4e00\u6761\u8def\u5f84\u4e0a\u66f4\u6539\uff0c\u5982\u679c\u5f00 $n$ \u68f5\u7ebf\u6bb5\u6811\u4f1a\u6709\u5f88\u591a\u5197\u4f59\u8282\u70b9\uff08\u5373\u91cd\u590d\u8282\u70b9\uff09\uff0c\u6240\u4ee5\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u591a\u5f00 $\\log n$ \u4e2a\u8282\u70b9\uff08\u5373\u8def\u5f84\u957f\u5ea6\uff09\u5c31\u884c\u4e86\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2 n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\n\n### 1. \u5efa\u7a7a\u6811\uff08$build$\uff09\n\n\u9996\u5148\u8981\u5efa\u4e00\u68f5\u7a7a\u6811\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u67e5\u627e\uff0c\u6240\u4ee5\u5728 $tree[0]$ \u7684\u4f4d\u7f6e\u662f\u4e00\u68f5\u7a7a\u6811\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid build(int &t,int l,int r)  \\\\t\u662f\u5f53\u524d\u8282\u70b9\u7f16\u53f7\n{\n\tint mid=(l+r)>>1;\n\tt=++cnt;\n\tif (l==r) return;\n\tbuild(ls[t],l,mid);\n\tbuild(rs[t],mid+1,r);\n}\n```\n\n### 2. \u63d2\u5165\u6570\u5b57\uff08modify\uff09\n\n\u5728\u63d2\u5165\u6570\u5b57\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8981\u5bf9\u5176\u8fdb\u884c\u79bb\u6563\uff0c\u7136\u540e\u63d2\u5165\u5176\u7f16\u53f7\n\n\u5982\n\n> 123 54 78 92 193\n\n\u5bf9\u5176\u8fdb\u884c\u79bb\u6563\u540e\u4e3a\n\n> 4 1 2 3 5\n\n**\u7a7a\u6811\uff1a**\n\n![](https://cdn.luogu.com.cn/upload/pic/59655.png)\n\n**\u63d2\u5165 4\uff1a**\n\n![](https://cdn.luogu.com.cn/upload/pic/59657.png)\n\n**\u63d2\u5165 1\uff1a**\n\n![](https://cdn.luogu.com.cn/upload/pic/59658.png)\n\n**\u63d2\u5165 2\uff1a**\n\n![](https://cdn.luogu.com.cn/upload/pic/59659.png)\n\n**\u63d2\u5165 3\uff1a**\n\n![](https://cdn.luogu.com.cn/upload/pic/59661.png)\n\n**\u63d2\u5165 5\uff1a**\n\n![](https://cdn.luogu.com.cn/upload/pic/59662.png)\n\n\u6bcf\u6b21\u4fee\u6539\u65f6\u904d\u5386\u4fee\u6539\u7684\u8def\u5f84\uff0c\u5224\u65ad\u5176\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\u6709\u53d8\u5316\uff0c\u5c06\u6ca1\u53d8\u5316\u7684\u513f\u5b50\u5e8f\u53f7\u8bbe\u4e3a\u4e0a\u4e00\u68f5\u6811\u5bf9\u5e94\u8282\u70b9\u7684\u5bf9\u5e94\u513f\u5b50\uff0c\u53d8\u5316\u513f\u5b50\u7684\u5e8f\u53f7\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u7ee7\u7eed\u904d\u5386\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\nint modify(int X,int l,int r)\n{\n\tint mid=(l+r)>>1,XX=++cnt;\n\tls[XX]=ls[X],rs[XX]=rs[X],sum[XX]=sum[X]+1;\n\tif (l==r) return XX;\n\tif (x<=mid) ls[XX]=modify(ls[XX],l,mid);\n\telse rs[XX]=modify(rs[XX],mid+1,r);\n\treturn XX;\n}\n```\n\n### 3. \u67e5\u8be2\u533a\u95f4\u7b2c $k$ \u5927\uff08$query$\uff09\n\n\u5bf9\u4e8e\u67e5\u8be2\u533a\u95f4 $l$ \u5230 $r$ \u7684\u7b2c $k$ \u5c0f\n\n\u6211\u4eec\u540c\u65f6\u904d\u5386\u7b2c $l-1$ \u68f5\u7ebf\u6bb5\u6811\u548c\u7b2c $r$ \u68f5\u7ebf\u6bb5\u6811\n\n\u5b9a\u4e49 $xx=sum[num2]-sum[num1]$ \uff08$num2$ \u4e3a\u7b2c $r$ \u68f5\u7ebf\u6bb5\u6811\u5f53\u524d\u7684\u8282\u70b9\uff0c$num1$ \u8868\u793a\u7b2c $l-1$ \u68f5\u7ebf\u6bb5\u6811\u5f53\u524d\u5bf9\u5e94\u8282\u70b9\uff0c$sum$ \u8868\u793a\u5176\u6570\u5b57\u4e2a\u6570\u4e4b\u5dee\uff09\n\n\u5f53 $k\\le xx$ \u65f6\uff0c\u76f4\u63a5\u5411\u5de6\u8d70\n\n\u5f53 $k> xx$ \u65f6\uff0c\u5411\u53f3\u8d70\uff0c\u540c\u65f6 $k-=xx$\n\n\u4ee3\u7801\uff1a\n```cpp\nint query(int num1,int num2,int l,int r,int k)\n{\n\tint mid=(l+r)>>1,xx=sum[ls[num2]]-sum[ls[num1]];\n\tif (l==r) return l;\n\tif (k<=xx) return query(ls[num1],ls[num2],l,mid,k);\n\telse return query(rs[num1],rs[num2],mid+1,r,k-xx);\n}\n```\n### \u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define N 5000010\n\nusing namespace std;\n\nint n,m,len,cnt,sum[N],x,l,r,k,ans;\nint a[N],b[N],ls[N],rs[N],tree[N];\n\ninline int read()\n{\n\tint x=0,tag=1;\n\tchar c=getchar();\n\tfor (;c<'0' || c>'9';c=getchar()) if (c=='-') tag=-1;\n\tfor (;c>='0' && c<='9';c=getchar()) x=(x<<1)+(x<<3)+c-'0';\n\treturn x*tag;\n}\n\nvoid build(int &t,int l,int r)\n{\n\tt=++cnt;\n\tif (l==r) return;\n\tint mid=(l+r)>>1;\n\tbuild(ls[t],l,mid);\n\tbuild(rs[t],mid+1,r);\n}\n\nint modify(int x,int l,int r,int k)\n{\n\tint mid=(l+r)>>1,xx=++cnt;\n\tls[xx]=ls[x],rs[xx]=rs[x],sum[xx]=sum[x]+1;\n\tif (l==r) return xx;\n\tif (k<=mid) ls[xx]=modify(ls[xx],l,mid,k);\n\telse rs[xx]=modify(rs[xx],mid+1,r,k);\n\treturn xx;\n}\n\nint query(int n1,int n2,int l,int r,int k)\n{\n\tint mid=(l+r)>>1,xx=sum[ls[n2]]-sum[ls[n1]];\n\tif (l==r) return l;\n\tif (k<=xx) return query(ls[n1],ls[n2],l,mid,k);\n\telse return query(rs[n1],rs[n2],mid+1,r,k-xx);\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tfor (int i=1;i<=n;i++)\n\t\ta[i]=b[i]=read();\n\tsort(b+1,b+n+1);\n\tlen=unique(b+1,b+n+1)-b-1;\n\tbuild(tree[0],1,len);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tx=lower_bound(b+1,b+len+1,a[i])-b;\n\t\ttree[i]=modify(tree[i-1],1,len,x);\n\t}\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tl=read(),r=read(),k=read();\n\t\tprintf(\"%d\\n\",b[query(tree[l-1],tree[r],1,len,k)]);\n\t}\n\treturn 0;\n}\n```\n\n### \u53e6\u4e00\u9053\u6a21\u677f\u9898\n\n[\u53ef\u6301\u4e45\u5316\u6570\u7ec4](https://www.luogu.org/problemnew/show/P3919)\n\n\u4e0d\u7528\u79bb\u6563\uff0c\u6539\u6210\u6bcf\u4e2a\u8282\u70b9\u5b58\u6570\u5b57\u5c31\u884c\u4e86\n\n\u67e5\u8be2\u65f6\u53ea\u8981\u50cf\u7ebf\u6bb5\u6811\u67e5\u8be2\u4e00\u6837\uff0c\u4e0d\u9700\u8981\u7528\u524d\u7f00\u548c\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define N 50000010\nusing namespace std;\nint n,m,cnt,opt,loc,k,val;\nint tree[N],num[N],ls[N],rs[N];\nvoid build(int &t,int l,int r)\n{\n    int mid=(l+r)>>1;\n    t=++cnt;\n    if (l==r)\n    {\n        scanf(\"%d\",&num[t]);\n        return;\n    }\n    build(ls[t],l,mid);\n    build(rs[t],mid+1,r);\n}\n\nint modify(int X,int l,int r)\n{\n    int mid=(l+r)>>1,XX=++cnt;\n    ls[XX]=ls[X],rs[XX]=rs[X];\n    if (l==r)\n    {\n        num[XX]=val;return XX;\n    }\n    if (k<=mid) ls[XX]=modify(ls[XX],l,mid);\n    else rs[XX]=modify(rs[XX],mid+1,r);\n    return XX;\n}\n\nint query(int i,int l,int r,int k)\n{\n    int mid=(l+r)>>1;\n    if (l==r) return num[i];\n    if (k<=mid) return query(ls[i],l,mid,k);\n    else return query(rs[i],mid+1,r,k);\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    build(tree[0],1,n);\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&loc,&opt);\n        if (opt==1)\n        {\n            scanf(\"%d%d\",&k,&val);\n            tree[i]=modify(tree[loc],1,n);\n        }\n        else\n        {\n            scanf(\"%d\",&k);\n            printf(\"%d\\n\",query(tree[loc],1,n,k));\n            tree[i]=tree[loc];\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1559038349,
        "uid": 67718,
        "name": "G\u6211\u5c31\u662f\u83dcG",
        "ccfLevel": 6,
        "title": "\u3010\u5b66\u4e60\u7b14\u8bb0\u3011\u4e3b\u5e2d\u6811"
    },
    {
        "content": "`\u4e3b\u5e2d\u6811`(\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u82b1\u4e86\u6211\u4e00\u5929\u7684\u65f6\u95f4\u6574\u7406)    \n \n> \u4e3b\u5e2d\u6811\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u5982\u4e0b\u95ee\u9898\uff1a\u201c\u7ed9\u51fa\u4e00\u5217\u6570,a1,a2\u2026an,\u6bcf\u6b21\u8be2\u95ee\u5176\u4e2d\u8fde\u7eed\u7684\u4e00\u6bb5\u533a\u95f4ai\u5230aj\u5176\u4e2d\u7684\u7b2cK\u5c0f\u7684\u6570\u662f\u591a\u5c11\uff1f\u201d(\u8be2\u95ee\u6b21\u6570\u4e3a5000,\u5e8f\u5217\u957f\u5ea6\u22642e5)    \n\u6211\u4eec\u5e94\u5982\u4f55\u505a\u5462.    \n\u6bcf\u6b21\u8be2\u95ee\u6392\u5e8f??\u663e\u7136\u590d\u6742\u5ea6\u662f\u5de8\u5927\u7684  \n\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u5b66\u4e60\u4e3b\u5e2d\u6811(\u4e00\u4e2a\u53ef\u6301\u7eed\u5316\u6570\u636e\u7ed3\u6784)   \n`\u53ef\u6301\u7eed\u5316:\u80fd\u591f\u67e5\u8be2\u5386\u53f2\u7248\u672c.`   \n> \u4f55\u8c13\u67e5\u8be2\u5386\u53f2\u7248\u672c: \u4f8b\u5982\u6211\u4eec\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c:   \n> \u4f60\u8fd8\u5269\u4e0b1,1,1,2,2\u8fd9\u4e9b\u724c.\u5047\u8bbe\u4f60\u6253\u51fa\u4e86\u5bf9\u4e8c(\u5f53\u7136,\u73b0\u5b9e\u751f\u6d3b\u4e2d\u662f\u4e0d\u4f1a\u6709\u4eba\u8fd9\u6837\u51fa\u7684)\u7136\u540e\u4f60\u53d1\u73b0\u4f60\u624b\u91cc\u6709\u4e09\u5f20\u4e00\u6837\u7684\u724c,\u7136\u540e\u4f60\u60f3\u64a4\u9500\u4ee5\u524d\u7684\u64cd\u4f5c,\u7136\u540e\u4f60\u5c31\u56de\u5230\u521a\u5f00\u59cb\u7684\u65f6\u5019.\u8fd9\u5728\u6211\u4eec\u7f16\u7a0b\u91cc\u600e\u6837\u4f53\u73b0\u5462.\u5c31\u662f\u5b58\u8d77\u4ee5\u524d\u7684\u72b6\u6001.\u7136\u540e\u8fdb\u884c\u4e00\u4e9b\u64a4\u9500\u64cd\u4f5c\u4e4b\u7c7b\u7684.\u8fd9\u5c31\u662f\u67e5\u8be2\u5386\u53f2\u7248\u672c.    \n> \u60f3\u8981\u5b66\u4f1a\u4e3b\u5e2d\u6811.\u6211\u4eec\u8fd8\u8981\u5b66\u4f1a  \n> * \u6743\u503c\u7ebf\u6bb5\u6811 :  \n> \u524d\u7f00\u548c.   \n  \n`\u6743\u503c\u7ebf\u6bb5\u6811`    \n> \u6765\u4e86\u89e3\u4e00\u4e0b\u6743\u503c\u7ebf\u6bb5\u6811\u5427.   \n> \u4e0e\u7ebf\u6bb5\u6811\u76f8\u5dee\u65e0\u51e0,\u552f\u4e00\u7684\u4e0d\u540c\u4e4b\u5904\u5c31\u662f\u4ed6\u7684(\u6570\u7ec4)\u4e0b\u6807\u4e3ax\u7684\u6570\u7ec4\u6240\u5b58\u7684\u503c\u662f\u6570\u7ec4\u4e2d\u6709\u5f53\u524d\u503c\u7684\u6570\u7684\u4e2a\u6570   \n\u4f8b\u5982\u6211\u4eec\u6709\u8fd9\u4e48\u4e00\u4e9b\u6570: 1.2.3.4.4.3.2.1   \n\u5047\u8bbe\u6211\u4eec\u8981 \u6c42\u51fa5 ~ 8\u8fd9\u4e2a\u533a\u95f4\u7684\u7b2c\u4e09\u5927\u6570.   \n\u6211\u4eec\u5c31\u4f1a\u6784\u9020\u8fd9\u4e48\u4e24\u4e2a\u56fe   \n![1 ~ 4](https://i.loli.net/2018/07/08/5b413cbddff2f.bmp)\n\n![5 ~ 8](https://i.loli.net/2018/07/08/5b413ef5b7c08.bmp)\n\u73b0\u5728\u6211\u4eec\u6765\u6a21\u62df\u4e00\u4e0b\u5982\u4f55\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u67e5\u8be2[5,8]\u7b2c\u4e09\u5927\u6570.  \n> \u9996\u5148\u6211\u4eec\u5bf9\u6bd4\u4e00\u4e0b\u6839\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u7684\u4e2a\u6570,\u6211\u4eec\u4f1a\u53d1\u73b04 - 2 = 2 ,2 < 3,\u6240\u4ee5\u76f8\u6bd4\u4ee5\u524d\u7684\u7248\u672c\u591a\u51fa\u4e86\u4e24\u4e2a\u5143\u7d20,\u56e0\u4e3a\u6211\u4eec\u8981\u627e\u7b2c\u4e09\u5927.\u6240\u4ee5\u6211\u4eec\u53bb\u53f3\u5b69\u5b50\u53bb\u627e\u7b2ck\u5927\u5143\u7d20,\u76f4\u5230\u6839\u8282\u70b9\u4e3a\u6b62.    \n> \u8fd9\u5c31\u662f\u524d\u7f00\u548c\u7684\u601d\u60f3.\u4f46\u662f\u6211\u4eec\u8981\u627e\u8fd9\u4e48\u591a\u533a\u95f4.\u6bcf\u4e00\u6b21\u90fd\u8981\u9020\u4e00\u4e2a[1,i] (i\u4e0d\u786e\u5b9a)\u7684\u533a\u95f4.\u7136\u540e\u53bb\u67e5\u8be2,\u663e\u7136\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u5de8\u5927\u7684.   \n> \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u5f00\u59cb\u6b63\u5f0f\u5b66\u4e60\u4e3b\u5e2d\u6811\u5566.  \n\n\u7a7a\u95f4\u5de8\u5927\u600e\u4e48\u529e,\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4ed6\u4eec\u7684\u4e00\u4e9b\u5171\u540c\u4fe1\u606f.  \n> \u5f53\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9\u7684\u65f6\u5019,\u53ea\u6709\u4e00\u6761\u94fe\u4e0a\u53d1\u751f\u6539\u53d8.  \n\n\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u5e8f\u5217.  \n\u957f\u5ea6\u4e3a7,\u8be2\u95ee\u6570\u4e3a1.  \n1  5 2 6 3 7 4  \n2 5 3  \n`ps`\u5148\u79bb\u6563\u5316,\u5b58\u7684\u662f\u6570\u7ec4\u4e0b\u6807.   \n\u7136\u540e\u6211\u4eec\u5efa\u7acb\u8fd9\u6837\u4e00\u9897\u7a7a\u6811(\u7ebf\u6bb5\u6811)  \n`ps`\u8fde\u7ebf\u753b\u6b6a\u4e86,\u6ce8\u610fqwq.  \n![](https://i.loli.net/2018/07/13/5b47e4aad3923.jpg)\n\u5f53\u7136,\u70b9\u503c\u90fd\u4e3a0.  \n\u6211\u4eec\u63d2\u51651.  \n![\u672a\u547d\u540d\u6587\u4ef6 (1).jpg](https://i.loli.net/2018/07/12/5b46a1f05b11f.jpg)\n\u7136\u540e\u8fd9\u6837\u63d2\u5165\u63d2\u5165.\u5f62\u6210\u4e86\u8fd9\u9897\u6811(\u6ca1\u6709\u8fde\u8fb9,\u6ce8\u610f.)  \n![](https://i.loli.net/2018/07/12/5b46a2bbecb6a.jpg)\n\u7136\u540e\u6211\u4eec\u62ff\u51fal - 1\u9897\u6811\u548c\u7b2cr\u9897\u6811\u4e5f\u5c31\u662f1\u548c5\u8fd9\u9897.  \n\u5229\u7528\u6211\u4eec\u521a\u624d\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u6240\u5b66\u7684\u77e5\u8bc6\u76f8\u51cf\u5373\u53ef.  \n\u4f46\u6211\u4eec\u8fd8\u6ca1\u6709\u6b65\u5165\u6b63\u9898.\u5982\u4f55\u5171\u7528\u4e00\u4e9b\u516c\u5171\u8282\u70b9.    \n\u5047\u8bbe\u6211\u4eec\u6784\u9020\u597d\u4e86[1,4]\u8fd9\u4e2a\u533a\u95f4,\u7136\u540e\u6211\u4eec\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u6570\u5b57\n\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684\u4f8b\u5b50.    \n\u6784\u9020\u597d\u4e86\u7684[1,4]\u533a\u95f4\u662f\u8fd9\u4e2a\u6837\u5b50\u7684.  \n![\u672a\u547d\u540d\u6587\u4ef6.jpg](https://i.loli.net/2018/07/13/5b47e5c0488f1.jpg)\n\u6b64\u65f6\u6211\u4eec\u6dfb\u52a0\u7b2c5\u4e2a\u5143\u7d20,\u4e5f\u5c31\u662f3.  \n![](https://i.loli.net/2018/07/12/5b46a67335402.jpg)\n\u8fd9\u6761\u8def\u5f84\u662f\u6211\u4eec\u8981\u4fee\u6539\u7684\u8def\u5f84.  \n\u5f53\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u6811\u7684\u5de6\u5b50\u6811\u65f6,\u5b83\u7684\u53f3\u5b50\u6811\u662f\u4e0d\u53d8\u7684,\u6211\u4eec\u53ef\u4ee5\u501f\u7528\u5b83.  \n![](https://i.loli.net/2018/07/12/5b46a74fde8f7.jpg)\n\u5f53\u6211\u4eec\u66f4\u65b0\u5230next\u70b9\u7684\u65f6\u5019,\u6211\u4eec\u5c31\u4f1a\u5229\u7528\u4e0a\u56fe\u7684\u8fd9\u4e2a.\u4ee5\u524d\u7684\u90a3\u4e2a\u5c31\u6210\u4e86\u5386\u53f2\u7248\u672c\u4e86.   \n\u51c6\u5907\u4e00\u5929\u7684\u4e3b\u5e2d\u6811\u7ec8\u4e8e\u6572\u5b8c\u4e86  \n[luogu P3834 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811](https://www.luogu.org/problemnew/show/P3834)\n#### code  \n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\nconst int maxN = 2e5 + 7;\nusing namespace std;\n\nint root[maxN],cnt,s[maxN],a[maxN];\nstruct Node {int lc,rc,w;}tree[maxN * 20];\n\ninline int read() {\n    int x = 0,f = 1;char c = getchar();\n    while(c < '0' || c > '9') {if(c == '-')f = -1;c = getchar();}\n    while(c >= '0' && c <= '9') {x = x * 10 + c - '0';c = getchar();}\n    return x * f;\n}\n\nvoid add(int &now,int last,int l,int r,int x) {\n    now = ++cnt;\n    tree[now].w = tree[last].w + 1; \n    tree[now].lc = tree[last].lc;tree[now].rc = tree[last].rc;\n    if(l == r)return;\n    int mid = (l + r) >> 1;\n    if(x <= mid) add(tree[now].lc,tree[last].lc,l,mid,x);\n    else add(tree[now].rc,tree[last].rc,mid + 1,r,x);\n    return;\n}\n\nint query(int L,int R,int l,int r,int x) {\n    if(l == r)return l;\n    int mid = (l + r) >> 1;\n    int p = tree[tree[R].lc].w - tree[tree[L].lc].w;\n    if(p < x) return query(tree[L].rc,tree[R].rc,mid + 1,r,x - p);\n    else return query(tree[L].lc,tree[R].lc,l,mid,x);\n}\n\nint main() {\n    int n,m;\n    n = read();m = read();\n    for(int i = 1;i <= n;++ i) {s[i] = a[i] = read();}\n    sort(s + 1,s + n + 1); \n    for(int i = 1;i <= n;++ i ){\n        int p = lower_bound(s + 1,s + n + 1,a[i]) - s;\n        add(root[i],root[i - 1],1,n,p);}\n    int l,r,x;\n    while(m -- ) {\n        l = read();r = read();x = read();\n        int y = query(root[l - 1],root[r],1,n,x);\n        printf(\"%d\\n\",s[y]);\n    } \n    return 0;\n} \n```\nqwq.\u6709\u4e0d\u7406\u89e3\u6216\u8005\u672c\u6587\u6709\u9519\u8bef\u7684.\u6b22\u8fce\u9a9a\u6270.QQnum:3361879051.",
        "postTime": 1531476207,
        "uid": 97385,
        "name": "\u5411noip\u51b2\u523a",
        "ccfLevel": 0,
        "title": "something about hjt tree (\u4e3b\u5e2d\u6811)"
    },
    {
        "content": "**\u4e3b\u5e2d\u6811**\uff0c\u5c31\u662f\u901a\u8fc7\u67e5\u8be2\u7ebf\u6bb5\u6811\u7684\u5386\u53f2\u7248\u672c\u8fd4\u56de\u4fe1\u606f\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3002\u53ef\u4ee5\u5229\u7528\u4e4b\u524d\u5df2\u7ecf\u6709\u7684\u6570\u636e\u6765\u51cf\u5c11\u65f6\u7a7a\u5f00\u9500\u3002\n\n\u6211\u662f\u7528\u6307\u9488\u5199\u7684\uff0c\u8fd9\u6837\u7701\u53bb\u4e86\u6570\u7ec4\u4e0b\u6807\u5b58\u50a8\u7684\u7a7a\u95f4\uff08\u4f46\u662f$64$\u4f4d\uff09\u548c\u4e0b\u6807\u8c03\u7528\u8bbf\u95ee\u65f6\u6d6a\u8d39\u7684\u4e00\u70b9\u70b9\u65f6\u95f4\u3002\n\n\u672c\u9898\u6709$n$\u4e2a\u6570\uff0c$m$\u4e2a\u8be2\u95ee\uff0c\u76f8\u5f53\u4e8e$n$\u6b21\u63d2\u5165\u65b0\u7ed3\u70b9,\u6709$n+1$\u4e2a\u5386\u53f2\u7248\u672c\uff08\u56e0\u4e3a\u8fd8\u6709\u521d\u59cb\u7248\u672c\u7684\u7a7a\u6811\uff09\u3002\n\n\u56e0\u6b64\u8fd9\u4e2a\u9898\u76ee\u53ef\u4ee5\u8f6c\u5316\u4e3a\u7b2c$l-1$\u4e2a\u7248\u672c\u4e0e\u7b2c$r$\u4e2a\u7248\u672c\u4e4b\u95f4\u7684\u7ebf\u6bb5\u6811\u201c\u5dee\u201d\u4e0a\u6c42\u7b2c$k$\u503c\u7684\u95ee\u9898\uff0c\u4e0b\u9762\u4f1a\u89e3\u91ca\u3002\n\n\u800c\u4e3b\u5e2d\u6811\u56e0\u4e3a\u6bcf\u6b21\u6539\u53d8\u65f6\u53ea\u4f1a\u6539\u53d8\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u6bcf\u4e2a\u7ed3\u70b9\u7684\u53e6\u4e00\u6761\u94fe\u5c31\u662f\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u540c\u4e00\u6761\u94fe\uff0c\u8fd9\u6837\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u5efa\u6811\u7684\u65f6\u95f4\u4e0a\u7684\u5f00\u9500\u4ee5\u53ca\u4e00\u5927\u5806\u6307\u9488\u7684\u7a7a\u95f4\u4e0a\u7684\u5f00\u9500\u3002\u4ece\u7b2c$0$\u9897\u6811\uff0c\u4e5f\u5c31\u662f\u7a7a\u6811\u5f00\u59cb\uff0c\u6bcf\u4e2a\u7248\u672c\u4e0d\u7528\u591a\u5f00\u7ed3\u70b9\uff0c\u76f4\u63a5\u5c06\u6307\u9488\u6307\u5411\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u7ebf\u6bb5\u6811\u638c\u63e1\u7684\u4e0d\u9519\u7684\u8bdd\uff0c\u90a3\u4e48\u4e3b\u5e2d\u6811\u7684\u5efa\u7acb\u4e5f\u5c31\u4e0d\u5728\u8bdd\u4e0b\u4e86\u3002\n\n**\u4e0a\u9762\u63d0\u5230\u7684\u7ebf\u6bb5\u6811\u4e4b\u5dee\uff0c\u5176\u5b9e\u662f\u50cf\u524d\u7f00\u548c\u4e00\u6837\uff0c\u7528$r$\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u5c06\u524d\u9762$l-1$\u7248\u672c\u7684\u6811\u4e0a\u7684\u6570\u636e\u51cf\u53bb\uff0c\u800c\u4e14\u53ea\u51cf\u53bb\u6709\u5f71\u54cd\u7684\uff0c\u5373\u66f4\u65b0\u8fc7\u7684\uff0c\u56e0\u6b64\u5728\u67e5\u8be2\u65f6\u5224\u65ad\u5e76\u66f4\u65b0\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u4e24\u4e2a\u5b8c\u6574\u7684\u6811\u76f8\u51cf\uff0c\u56e0\u4e3a\u4e24\u4e2a\u6811\u76f8\u51cf\u7ed3\u679c\u4e00\u5b9a\u662f$r-l+1$\uff0c\u8981\u8ba9\u5b83\u4eec\u7684\u5de6\u5b69\u5b50\u76f8\u51cf\uff0c\u5982\u679c\u5de6\u5b69\u5b50\u4e4b\u5dee$\\geq k$,\u8bf4\u660e$l$\u5230$r$\u4e4b\u95f4\u7b2c$k$\u5c0f\u503c\u5728\u6839\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50\u91cc\uff0c\u5426\u5219\u5728\u53f3\u5b69\u5b50\u91cc\u3002**\n\n\u53e6\u5916\u8fd8\u6709\u4e00\u70b9\uff0c\u8fd9\u4e2a\u9898\u76ee\u7684$a_i$\u8303\u56f4\u662f$[-10^9,10^9]$\uff0c\u800c\u6570\u636e\u603b\u5171\u53ea\u6709$200,000$\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6839\u636e\u5927\u5c0f\u79bb\u6563\u5316\u6570\u636e\u3002\u4e0d\u9700\u8981$hash$\uff0c\u53ea\u9700\u8981\u5c06\u5176\u6309\u5927\u5c0f\u987a\u5e8f\u8d4b\u4e88\u4e00\u4e2a\u6620\u5c04\u51fd\u6570\u5c31\u53ef\u4ee5\u4e86\u3002$\\qquad$\u6709\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u4e00\u662f\u4ee3\u7801\u4e2d\u7684\u7ed3\u6784\u4f53$gg$,\u9700\u8981\u7528\u5230\u4e24\u6b21\u6392\u5e8f\uff0c\u53ef\u80fd\u6162\u4e00\u70b9\uff1b\u4e8c\u662f\u8f93\u5165\u65f6\u4f7f\u7528\u4e24\u4e2a\u76f8\u540c\u7684\u6570\u7ec4\uff0c\u53ea\u6392\u4e00\u4e2a\u5e8f\uff0c\u50cf\u8fd9\u6837\n\n```cpp\n\tfor(int i=1;i<=n;i++)\n\t{\n\t    scanf(\"%d\\n\",a[i].v);\n \t   a[i].t=i;//\u8f93\u5165\u65f6\u95f4\n\t}\n    std::sort(a+1,a+1+n);\n    for(int i=1;i<=n;i++)\n        b[a[i].t]=i;//\u5c06\u5177\u4f53\u6570\u503c\u6309\u8f93\u5165\u65f6\u95f4\u7684\u5bfc\u5165\u65b0\u7f16\u6392\u7684\u4f4d\u7f6e\n\n```\n\n# Code\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define mid ((l+r)>>1)\nconst int N=2e5+5;//200000\u4e2a\u70b9\nstruct node\n{\n    int v,l,r;//v\u5b58\u7684\u662f\u5f53\u524d\u72b6\u6001\u4e0b[l,r]\u8303\u56f4\u5185\u6709\u591a\u5c11\u4e2a\u70b9\n    node *ls,*rs;\n    node()\n    {\n        v=0;\n        ls=NULL;//\u56e0\u4e3a\u8fd9\u91cc\u7f6e\u4e3aNULL\uff0c\u6240\u4ee5\u8c03\u7528\u65f6\u8981\u4e3a\u5176\u7533\u8bf7\u7a7a\u95f4\u6216\u8d4b\u503c\n        rs=NULL;\n    }\n}*root[N];//\u6709n\u4e2a\u6811\u6839\uff0c\u7533\u8bf7n\u4e2a\u6839\u7ed3\u70b9\nstruct gg\n{//\u9898\u89e3\u6b63\u6587\u63d0\u5230\u7684gg\u7ed3\u6784\u4f53\n    int num,o,v;//num\u5b58\u672c\u6765\u7684\u6570\uff0corder(o)\u5b58\u8f93\u5165\u987a\u5e8f\uff0cv\u5b58\u79bb\u6563\u5316\u7684\u987a\u5e8f\n}d[N];\nbool cmp1(gg a,gg b)//\u7ed9\u5404\u4e2a\u70b9\u8d4b\u4e88\u5b83\u7684\u79bb\u6563\u5316\u987a\u5e8f\n{\n    return a.num<b.num;\n}\nbool cmp2(gg a,gg b)//\u5c06\u5404\u4e2a\u70b9\u6062\u590d\u6210\u8f93\u5165\u987a\u5e8f\n{\n    return a.o<b.o;\n}\nint n,m;\nint q[N];//q[i]\u5b58\u7684\u662f\u79bb\u6563\u70b9i\u7684\u539f\u672c\u503c\uff08\u76f8\u5f53\u4e8egg\u7684\u53cd\u51fd\u6570\uff09\nvoid Build(node *root,int l,int r)//\u5efa\u7acb\u7a7a\u6811\u65f6\u6ca1\u6709\u524d\u8f66\u4e4b\u9274\uff0c\u6240\u4ee5\u7279\u6b8a\u5efa\u6811\uff0c\u65e0\u8bba\u80fd\u4e0d\u80fd\u6ee1\uff0c\u628a\u8fd9\u68f5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u8986\u76d6\u5230\u4f4d\n{\n    root->l=l;\n    root->r=r;\n    if(l==r)\n        return;//\u53f6\u5b50\u8282\u70b9\n    root->ls=new node();//\u7ed9NULL\u7533\u8bf7\u65b0\u7684\u7a7a\u95f4\n    root->rs=new node();\n    Build(root->ls,l,mid);//\u9012\u5f52\u5efa\u6811\n    Build(root->rs,mid+1,r);\n}\nvoid build(node *prer,node *root,int l,int r,int x)//preroot\u5e26\u7684\u662f\u524d\u4e00\u68f5\u6811\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f9d\u9644\u5b83\uff0c\u5e76\u5c06\u5b83\u7684\u5de6\u53f3\u5b69\u5b50\u4e00\u540c\u5e26\u5165\u5404\u4e2a\u51fd\u6570\uff0croot\u662f\u8981\u5efa\u7684\u6811\uff0cx\u662f\u8981\u6dfb\u52a0\u7684\u503c\n{\n    root->l=l;\n    root->r=r;\n    if(l==r)\n    {\n        root->v++;//\u627e\u5230\u4e86\u8981\u6dfb\u52a0\u7684\u503c\uff0c\u53ef\u4ee5\u8fd4\u56de\n        return;\n    }\n    if(x>mid)//\u5176\u4ed6\u60c5\u51b5\u4e00\u76f4\u5bfb\u627e\u77e5\u9053\u627e\u5230\u8981\u6dfb\u52a0\u7684\u503c\n    {\n        root->rs=new node();\n        root->ls=prer->ls;\n        build(prer->rs,root->rs,mid+1,r,x);\n        root->v=root->ls->v+root->rs->v;//\u4ece\u4e24\u4e2a\u5b69\u5b50\u7ed3\u70b9\u56de\u6eaf\u4e0a\u6765\uff0c\u4e0d\u4e00\u5b9a\u662f\u53ea\u589e\u52a0\u4e861\uff0c\u56e0\u4e3a\u8fd8\u4f1a\u4ece\u5176\u4ed6\u5b69\u5b50\u7ed3\u70b9\u66f4\u65b0\n        return;\n    }\n    else\n    {\n        root->ls=new node();\n        root->rs=prer->rs;\n        build(prer->ls,root->ls,l,mid,x);\n        root->v=root->ls->v+root->rs->v;\n        return;\n    }\n}\nint ask(node *prer,node *root,int k)//\u627e\u7b2ck\u5c0f\u503c\u5e76\u8fd4\u56deq\u4e2d\u4e0b\u6807\n{\n    if(root->l==root->r)\n        return root->l;\n    int del=root->ls->v-prer->ls->v;//\u8fd9\u91cc\u662f\u91cd\u70b9\uff0c\u5220\u6811\u7684\u8fc7\u7a0b\uff0c\u8fd9\u91cc\u8bb0\u5f55\u7684\u662f\u5de6\u5b69\u5b50\u4e4b\u95f4\u76f8\u5dee\u591a\u5c11\uff0c\u8bb0\u5dee\u503c\u4e3adelta\n    if(del<k)//\u5982\u679c\u76f8\u5dee\u5c0f\u4e8ek\uff0c\u90a3\u4e48\u7b2ck\u5c0f\u503c\u5c31\u5728\u53f3\u5b69\u5b50\u5904\uff0c\u5e76\u4e14\u8981\u5728\u53f3\u5b69\u5b50\u5904\u627e\u5230\u7b2c\uff08k-del\uff09\u5c0f\u503c\n        return ask(prer->rs,root->rs,k-del);\n    return ask(prer->ls,root->ls,k);//\u5728\u5de6\u8fb9\u8fd8\u662f\u627e\u7b2ck\u5c0f\u503c\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    int u;\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&u);\n        d[i].o=i;//\u8bb0\u5f55\u8f93\u5165\u987a\u5e8f\n        d[i].num=u;//\u539f\u672c\u6570\u636e\n        root[i]=new node();\n    }\n    root[0]=new node();\n    std::sort(d+1,d+n+1,cmp1);\n    for(int i=1;i<=n;i++)\n    {\n        d[i].v=i;//\u8bb0\u5f55\u6392\u5e8f\u540e\u7684\u987a\u5e8f\n        q[i]=d[i].num;//\u8bb0\u5f55\u987a\u5e8f\u5bf9\u5e94\u7684\u539f\u6570\u636e\n    }\n    std::sort(d+1,d+n+1,cmp2);//\u6ca1\u6709\u53bb\u91cd\uff0c\u53ef\u4ee5\u53bb\u91cd\u4f18\u5316\u5c11\u91cf\u65f6\u95f4\u590d\u6742\u5ea6\n    Build(root[0],1,n);//\u5efa\u7a7a\u6811\n    for(int i=1;i<=n;i++)\n        build(root[i-1],root[i],1,n,d[i].v);//\u6bcf\u4e00\u4e2a\u90fd\u8981\u5efa\u6811\uff0c\u5e76\u4e14\u4f20\u5165d[i].v\u4f5c\u4e3a\u65b0\u6dfb\u52a0\u7684\u53f6\u5b50\u8282\u70b9\n    int l,r,k;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&l,&r,&k);\n        printf(\"%d\\n\",q[ask(root[l-1],root[r],k)]);//\u67e5\u8be2\u5e76\u8f93\u51fa\n    }\n    return 0;\n}\n```",
        "postTime": 1523786153,
        "uid": 63539,
        "name": "wjyyy",
        "ccfLevel": 9,
        "title": "P3834 \u4e3b\u5e2d\u6811 \u6a21\u677f \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u8fd9\u4e24\u5929\u5b66\u4e60\u4e86\u4e3b\u5e2d\u6811\uff0c\u57fa\u672c\u4e0a\u641e\u61c2\u4e86\u4e3b\u5e2d\u6811\u662f\u600e\u4e48\u64cd\u4f5c\u7684\n\n---\n\n\u4e3b\u5e2d\u6811\uff0c\u662f\u4e00\u79cd\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3002\u6700\u7b80\u5355\u7684\u64cd\u4f5c\u5c31\u662f\u7ef4\u62a4\u9759\u6001\u533a\u95f4\u7b2c $k$ \u5c0f\n\n\u4e3b\u5e2d\u6811\u901a\u8fc7\u7ef4\u62a4\u5386\u53f2\u7248\u672c\uff0c\u5b9e\u73b0\u67e5\u8be2\u533a\u95f4\u7684\u6709\u5173\u64cd\u4f5c\n\n---\n\n## \u4e3b\u5e2d\u6811\u7684\u539f\u7406\n\n\u5047\u8bbe\u73b0\u5728\u6709\u8fd9\u4e48\u4e00\u4e2a\u5e8f\u5217\uff1a$4, 1, 3, 5, 2$\n\n\u95ee\u5982\u4f55\u6c42\u51fa\u533a\u95f4 $[1,3]$ \u5185\u5927\u5c0f\u4e3a\u7b2c\u4e8c\u7684\u6570\uff1f\n\n~~\u5229\u7528\u5927\u773c\u89c2\u5bdf\u6cd5\uff0c\u5f88\u663e\u7136\u662f3~~\n\n\u90a3\u4e48\u8ba9\u8ba1\u7b97\u673a\u53bb\u600e\u4e48\u5b9e\u73b0\u5462\uff1f~~\u5b83\u53c8\u6ca1\u6709\u773c\u775b~~\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5efa\u4e00\u9897\u7a7a\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u547d\u540d\u4e3a\u201c\u6811 $0$ \u201d\uff08\u65b9\u4fbf\u540e\u9762\u7684\u4f7f\u7528\uff09\uff0c\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gey4wrz8.png)\n\n\u522b\u544a\u8bc9\u6211\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u81ea\u5df1\u53bb\u767e\u5ea6\uff1b\n\n\u73b0\u5728\u5e8f\u5217\u91cc\u9762\u7b2c\u4e00\u4e2a\u6570\u662f $4$\uff0c\u6211\u4eec\u5f80\u6811\u91cc\u9762\u63d2\u5165\u4e00\u4e2a $4$ \uff0c\u56e0\u4e3a\u8981\u4fdd\u7559\u5386\u53f2\u7248\u672c\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9 $4$ \u8fd9\u4e2a\u6570\u65b0\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u547d\u540d\u4e3a\u201c\u6811 $1$ \u201d\uff0c\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/e239h0xp.png)\n\n\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u5462\uff1f\n\n$1\\le 4 \\le5$\uff0c\u6545\u533a\u95f4 $[1,5]++$;\n\n$4\\le 4 \\le5$\uff0c\u6545\u533a\u95f4 $[4,5]++$;\n\n$4\\le 4 \\le4$\uff0c\u6545\u533a\u95f4 $[4,4]++$;\n\n\u5176\u4ed6\u7684\u8fd8\u662f $0$ ;\n\n\u61c2\u4e86\u6ca1\u6709\u3002\u3002\u3002\n\n\u7ee7\u7eed\u63d2\u5165\u7b2c\u4e8c\u4e2a\u6570 $1$ \uff0c\u5efa\u6210\u201c\u6811 $2$ \u201d \uff0c\u8fd9\u91cc\u4e0d\u89e3\u91ca\u4e86\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/89dyw9pb.png)\n\n\u518d\u63d2\u5165\u7b2c\u4e09\u4e2a\u6570 $3$\uff0c\u5efa\u6210\u201c\u6811 $3$ \u201d\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ejwbdazy.png)\n\n\n\nOK\uff01\u73b0\u5728\u6211\u4eec\u5c31\u5df2\u7ecf\u53ef\u4ee5\u6c42\u51fa $[1,3]$ \u5185\u7684\u5927\u5c0f\u4e3a\u7b2c\u4e8c\u5927\u7684\u6570\u4e86\n\n\u9012\u5f52\u64cd\u4f5c\u67e5\u8be2\u6392\u540d\u5e94\u8be5\u90fd\u4f1a\u5427\uff1f\n\n\u4e0d\u4f1a\u7684\u770b\u8fd9\u91cc\uff1a\n\n - \u8fdb\u5165 $[1,5]$ \u8282\u70b9\uff0c\u6211\u4eec\u53d1\u73b0\u4ed6\u7684\u5de6\u513f\u5b50\u7684\u5b50\u6811\u4e2a\u6570\u4e3a$2$ \uff0c $2\\le k $ $(k=2)$\uff0c\u4e8e\u662f\u8fdb\u5165$[1,3]$\u8282\u70b9;\n\n - \u7136\u540e\u6211\u4eec\u53d1\u73b0 $[1,3]$ \u8282\u70b9\u7684\u5de6\u513f\u5b50\u5b50\u6811\u4e2a\u6570$1 < k$ $(k=2)$\uff0c\u4e8e\u662f\u8fdb\u5165 $[3,3]$ \u8282\u70b9\uff1b\n\n - \u6b64\u65f6\u6211\u4eec\u628a $k$ \u66f4\u65b0\u4e3a $1$ ($2-1=1$);\n\n - \u8d70\u5230\u5934\u4e86\uff0c\u4e8e\u662f\u5c31\u8fd4\u56de $3$ \uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f $3$ \uff0c\u4e5f\u5c31\u662f\u539f\u6765\u7684\u5e8f\u5217\u533a\u95f4 $[1,3]$ \u7684\u7b2c $2$ \u5c0f\u5c31\u662f $3$\n\n\u73b0\u5728\u4f60\u660e\u767d\u4e86\u4e3b\u5e2d\u6811\u662f\u600e\u4e48\u64cd\u4f5c\u4e86\u7684\u5427\uff1f\n\n---\n\n## \u7591\u95ee\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u4e0a\u9762\u6211\u4eec\u6c42\u7684\u662f\u533a\u95f4$[1,r]$\u7684\u7b2c $k$ \u5927\u7684\u6570\n\n\u540c\u7406\uff0c\u533a\u95f4 $[1,r]$ ($r\\in$ $[1,n]$ , $r \\in N$)\u7684\u7b2c $k$ \u5927\u6570\u6211\u4eec\u4e5f\u5c31\u4f1a\u6c42\u4e86\n\n\u90a3\u600e\u4e48\u6c42\u533a\u95f4 $[l,r]$ \u7684\u7b2c $k$ \u5927\u6570\u5462\uff1f\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6c42\u533a\u95f4$[2,3]$\u7684\u7b2c $k$ \u5927\u6570\n\n\u6211\u4eec\u62ff\u5efa\u51fa\u6765\u7684\u201c\u6811 $3$ \u201d\u51cf\u6389\u201c\u6811 $1$ \u201d\u540e\uff0c\u518d\u8fdb\u884c\u5982\u4e0a\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4e86\n\n\u8fd9\u4e5f\u5c31\u662f\u524d\u7f00\u548c\u601d\u60f3\n\n\u6240\u4ee5\u5bf9\u4e8e\u533a\u95f4$[l,r]$ \u6211\u4eec\u62ff\u201c\u6811 $r$ \u201d\u51cf\u53bb\u201c\u6811 $(l-1)$ \u201d\uff0c\u518dquery\u4e00\u4e0b\u5c31\u53ef\u4ee5\u6c42\u5f97\u7b54\u6848\u4e86\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u6bcf\u4e2a\u6570\u90fd\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6765\u5b58\uff0c\u7a7a\u95f4\u4e0d\u4f1a\u70b8\u6389\u5417\uff1f\n\n\u6240\u4ee5\u4e3b\u5e2d\u6811\u662f\u8fd9\u6837\u64cd\u4f5c\u7684\uff1a\n\n - \u6bcf\u63d2\u5165\u4e00\u4e2a\u6570 $x$ \uff0c\u53ea\u6709 $[x,x]$ \u5230 $[1,n]$ \u4e00\u6761\u94fe\u4e0a\u7684\u70b9\u4f1a\u66f4\u65b0\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5171\u7528\u4e00\u4e9b\u70b9\uff0c\u5c31OK\u4e86\uff0c\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ym4n9hnp.png)\n\n---\n\n## \u4f8b\u9898\u4e0e\u4ee3\u7801\n\n\u90a3\u4e48\u4e3b\u5e2d\u6811\u5c31\u4ecb\u7ecd\u5b8c\u4e86\uff0c\u5177\u4f53\u5b9e\u73b0\u7ed9\u4e2a\u4f8b\u9898\u8ba9\u5927\u5bb6\u770b\u770b\uff0c\u8fd8\u6709\u4e0d\u61c2\u5f97\u53ef\u4ee5\u518d\u53c2\u8003\u4e00\u4e0b\u4ed6\u4eba\u7684\u535a\u5ba2\n\n[\u4f8b\u9898:\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u68111(\u4e3b\u5e2d\u6811)](https://www.luogu.com.cn/problem/P3834)\n\n```cpp\n#include <bits/stdc++.h>\n#define N (200000+5)\n#define ls ch[rt][0]\n#define rs ch[rt][1]\n#define vl ch[vs][0]\n#define vr ch[vs][1]\nusing namespace std;\nint n,m,q;\nint rt[N],ch[N<<5][2],tot,val[N<<5];//rt:\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u7684\u6839\uff0cch\uff1a\u5de6\u53f3\u513f\u5b50\uff0ctot\uff1a\u7f16\u53f7\u603b\u6570\uff0cval\uff1a\u6743\u503c\nint a[N],b[N];//a\uff1a\u539f\u6570\u7ec4\uff0cb\uff1a\u79bb\u6563\u5316\u6570\u7ec4\ninline int query(int x){//\u79bb\u6563\u5316\n\treturn lower_bound(b+1,b+m+1,x)-b;//\u79bb\u6563\u5316\n}\ninline void update(int &rt,int vs,int l,int r,int k){//\u66f4\u65b0\uff0c\u65b0\u5efa\u4e00\u68f5\u6811\n\trt=++tot;//\u65b0\u6811\u7684\u6839\u8282\u70b9\u4e3atot++\n\tls=vl,rs=vr;//\u5de6\u53f3\u513f\u5b50\u90fd\u662f\u5386\u53f2\u7248\u672c\u7684\u5de6\u53f3\u513f\u5b50\n\tval[rt]=val[vs]+1;//\u65b0\u52a0\u5165\u4e00\u4e2a\u6570\uff0crt\u7684\u6743\u503c++\n\tif(l==r) return;//\u53f6\u5b50\u8282\u70b9\uff0creturn\n\tint mid=(l+r)>>1;//mid\u4e3a\u5206\u5272\u533a\u95f4\u7684\u4e2d\u70b9\n\tif(k<=mid) update(ls,vl,l,mid,k);//k<=mid\uff0ck\u5728\u5de6\u513f\u5b50\n\telse update(rs,vr,mid+1,r,k);//\u5426\u5219k\u5728\u53f3\u513f\u5b50\n}\ninline int query(int rt,int vs,int l,int r,int k){//\u8be2\u95ee\u7b2ck\u5927\n\tif(l==r) return l;//\u627e\u5230\u4e86\uff08\u5728\u53f6\u5b50\u8282\u70b9\uff09\uff0creturn\n\tint mid=(l+r)>>1;\n\tint v=val[vl]-val[ls];\n        //\u8fd9\u91cc\u53ea\u7528\u7b97\u4e00\u4e0bk\u5728\u4e0d\u5728\u5de6\u513f\u5b50\u5c31\u884c\u4e86\uff0c\u4e0d\u518d\u5de6\u513f\u5b50\u5c31\u80af\u5b9a\u5728\u53f3\u513f\u5b50\n\t//\u8fd9\u91cc\u7528\u5f53\u524d\u7248\u672c\u51cf\u53bb\u5386\u53f2\u7248\u672c\u5c31\u662f\u7c7b\u4f3c\u201c\u524d\u7f00\u548c\u201d\u64cd\u4f5c\n\tif(k<=v) return query(ls,vl,l,mid,k);//\u5728\u5de6\u513f\u5b50\uff0c\u7ee7\u7eed\u627e\n\telse return query(rs,vr,mid+1,r,k-v);//\u4e0d\u5728\u5de6\u513f\u5b50\uff0c\u627e\u53f3\u513f\u5b50\uff0c\u5e76\u628ak\u51cf\u53bb\u5de6\u8fb9\u6240\u6709\u7684\u4e2a\u6570\n}\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]),b[i]=a[i];//\u8bfb\u5165\n\tsort(b+1,b+n+1);//\u79bb\u6563\u5316\u6570\u7ec4\u5148\u6392\u5e8f\n\tm=unique(b+1,b+n+1)-b-1;//\u79bb\u6563\u5316\n\tfor(int i=1;i<=n;i++){\n\t\tupdate(rt[i],rt[i-1],1,n,query(a[i]));\n        //\u4e00\u4e2a\u8282\u70b9\u4e00\u4e2a\u8282\u70b9\u7684\u63d2\u5165\uff1b\n\t//\u8fd9\u91cc\u5bf9rt\u8fdb\u884c\u5f15\u7528\uff08&\uff09\uff0c\u76f8\u5f53\u4e8ert[i]=update(rt[i],rt[i-1],1,n,query(a[i]));\n\t}\n\twhile(q--){\n\t\tint l,r,k;\n\t\tscanf(\"%d%d%d\",&l,&r,&k);\n\t\tprintf(\"%d\\n\",b[query(rt[l-1],rt[r],1,n,k)]);//\u6c42\u89e3\u9759\u6001\u533a\u95f4\u7b2ck\u5c0f\uff0c\u6ce8\u610f\u662fl-1\u548cr\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1579330772,
        "uid": 218449,
        "name": "Xx_queue",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u4e3b\u5e2d\u6811\uff0c\u4e00\u79cd\u652f\u6301\u8be2\u95ee\u5386\u53f2\u7248\u672c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e38\u5e38\u7528\u4e8e\u8be2\u95ee\u5386\u53f2\u7248\u672c\u3002\n\n#### \u53ef\u6301\u4e45\u5316\n\n\u652f\u6301\u8be2\u95ee\u5386\u53f2\u7248\u672c\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8be2\u95ee\u7248\u672c$k$\u7684\u72b6\u6001\u3002\u3002\u3002\n\n\u8003\u8651\u7528\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u5c31\u8981\u52a8\u6001\u5f00\u70b9\u3002\n\n\u5982\u679c\u4fee\u6539\u64cd\u4f5c\u662f\u5355\u70b9\u4fee\u6539\uff0c\u90a3\u4e48\u6ce8\u610f\u5230\u4fee\u6539\u70b9$x$\uff0c\u53ea\u4f1a\u5f71\u54cd\u5230\u6cbf\u9014$logN$\u4e2a\u8282\u70b9\u3002\u3002\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u6bcf\u6b21\u589e\u52a0$logN$\u7684\u8282\u70b9\uff0c\u8bb0\u5f55\u7248\u672c\u3002\n\n\u8fd9\u4e2a\u5c31\u662f\u4e3b\u5e2d\u6811\u8fa3\u3002\n\n**\u6a21\u677f:**\n\n[\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811](https://www.luogu.org/problemnew/show/P3834)\n\n\u505a\u6cd5\uff1a\n\n\u9996\u5148\u56e0\u4e3a\u6211\u8981\u6c42\u7684\u662f\u533a\u95f4$k$\u5927\uff0c\u90a3\u4e48\u6211\u80af\u5b9a\u8981\u5efa\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n\u7136\u540e\u6ce8\u610f\u5230\u7ebf\u6bb5\u6811\u5177\u6709\u53ef\u52a0\u51cf\u6027\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n\u6bd4\u5982\u6211\u5efa\u7acb\u4e86\u4e00\u9897\u533a\u95f4$1-5$\u7684\u6743\u503c\u7ebf\u6bb5\u68111\u3002\u5047\u8bbe\u533a\u95f4$1-5$\u7684\u6743\u503c\u5206\u522b\u4e3a\uff1a\n\n$1, 2, 3, 3, 4$\n\n\u7136\u540e\u6211\u53c8\u5efa\u7acb\u4e86\u4e00\u9897\u533a\u95f4$1-8$\u7684\u6743\u503c\u7ebf\u6bb5\u68112\u3002\u5047\u8bbe\u533a\u95f4$1-8$\u7684\u6743\u503c\u5206\u522b\u4e3a\uff1a\n\n$1, 2, 3, 3, 4, 1, 2, 3$\n\n\u90a3\u4e48\u5bf9\u4e8e\u6743\u503c\u533a\u95f4$1-3$\uff0c\u6211\u6709\u7ebf\u6bb5\u6811$1$\u4e2d\uff0c\u51fa\u73b0\u4e86$4$\u4e2a\uff0c\u7ebf\u6bb5\u6811$2$\u4e2d\u51fa\u73b0\u4e86$7$\u4e2a\u3002\n\n\u90a3\u4e48\u5982\u679c\u6211\u7528\u7ebf\u6bb5\u6811$2$\u51cf\u53bb\u7ebf\u6bb5\u6811$1$\uff0c\u90a3\u4e48\u6211\u5c31\u53ef\u4ee5\u5f97\u51fa\uff0c\u533a\u95f4:\n\n$$[1, 8] - [ 1, 5 ] = [ 6, 8]$$\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u533a\u95f4$6-8$\u4e2d\uff0c\u6743\u503c\u4e3a$1-3$\u533a\u95f4\u7684\u70b9\u771f\u6709$7-4 = 3$\u4e2a$...$\n\n\u6240\u4ee5\u6211\u5bf9\u6bcf\u4e2a\u70b9\u5f00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811$i$\u8bb0\u5f55\u4e86$1-i$\u533a\u95f4\u4fe1\u606f\u3002\n\n\u7136\u540e\u6c42\u533a\u95f4$l-r$\u7684\u4fe1\u606f\u5c31\u662f\u6c42$[1-r] - [1 -(l-1)]$\u7684\u7ebf\u6bb5\u6811\u3002\u3002\u3002\n\n\u7136\u540e\u6ce8\u610f\u5230\u6211\u4ece$1$\u53f7\u70b9\u5f00\u59cb\uff0c\u5047\u8bbe\u6211\u5df2\u7ecf\u5efa\u51fa\u4e86$1-x$\u7684\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u5982\u679c\u6211\u8981\u5efa$1-(x+1)$\u7684\u7ebf\u6bb5\u6811\uff0c\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u66b4\u529b\u5efa\u6811\uff0c\u4f46\u5b9e\u9645\u4e0a\u6ce8\u610f\u5230\u5176\u5b9e$1-x+1$\u7684\u7ebf\u6bb5\u6811\u53ea\u662f\u5728$1-x$\u7684\u7ebf\u6bb5\u6811\u4e2d\u52a0\u5165\u4e86\u4e00\u4e2a\u5143\u7d20$[x+1]$\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21\u5efa\u6811\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u63d2\u5165\u5143\u7d20\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6309\u7167\u4e4b\u524d\u8bb2\u7684\u53ef\u6301\u4e45\u5316\u7684\u601d\u60f3\u5f04\uff0c\u989d\u5916\u5efa\u51fa$logN$\u4e2a\u8282\u70b9\u5373\u53ef\u3002\n\n\u7136\u540e\u5229\u7528\u7ebf\u6bb5\u6811\u7684\u53ef\u51cf\u6027\u5904\u7406\u8be2\u95ee\u3002\n\n**\u9644\u4ee3\u7801\uff1a**\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){\n    char cc = getchar(); int cn = 0, flus = 1;\n    while(cc < '0' || cc > '9'){\n    \tif(cc == '-') flus = -flus;\n        cc = getchar();\n    }\n    while(cc >= '0' && cc <= '9')\n        cn = cn * 10 + cc - '0', cc = getchar();\n    return cn * flus;\n}\nconst int N = 2e5 + 10;\nint n, m, cnt;\nint rot[N], v[N], top;\nstruct Tree{\n    int l, r, val;\n}t[35 * N];\nstruct Node{\n    int v, id;\n    bool operator < (const Node& x) const{\n        return v < x.v;\n    }\n}q[N];\nvoid build(int &root, int ll, int rr){\n    int mid = (ll + rr) / 2;\n    root = ++cnt;\n    if(ll == rr)\n        return ;\n    build(t[root].l, ll, mid);\n    build(t[root].r, mid + 1, rr);\n}\nvoid insert(int &root, int ll, int rr, int x){\n    int now = root;\n    int lkid = t[now].l, rkid = t[now].r, mid = (ll + rr) / 2;\n    int ctt = ++cnt;\n    if(ll == rr && ll == x){\n        t[ctt].val++, root = ctt;\n        return ;\n    }\n    if(mid >= x)\n        t[ctt].l = t[now].l, insert(t[ctt].l, ll, mid, x), t[ctt].r = t[now].r;\n    else\n        t[ctt].r = t[now].r, insert(t[ctt].r, mid + 1, rr, x), t[ctt].l = t[now].l;\n    root = ctt;\n    t[ctt].val = t[t[ctt].l].val + t[t[ctt].r].val;\n}\nvoid init(){\n    sort(q + 1, q + n + 1);\n    for(int i = 1; i <= n; i++)\t\n        v[q[i].id] = i;\n    build(rot[0], 1, n);\n    for(int i = 1; i <= n; i++){\n    \trot[i] = rot[i - 1];\n        insert(rot[i], 1, n, v[i]);  \n    }\n}\nint query(int a, int b, int k, int ll, int rr){\n    int lkid = t[t[b].l].val - t[t[a].l].val;\n    int mid = (ll + rr) / 2;\n    if(ll == rr && k != 0)  return ll;\n    if(lkid < k)\n        return query(t[a].r, t[b].r, k - lkid, mid + 1, rr);\n    else\n        return query(t[a].l, t[b].l, k, ll, mid);\n}\nvoid input(){\n    n = read(); m = read();\n    for(int i = 1; i <= n; i++) q[i].v = read(), v[i] = q[i].v, q[i].id = i;\n    init();\n    int opt, l, r;\n    for(int i = 1; i <= m; i++){\n        l = read(); r = read(); opt = read();\n        int wh = query(rot[l - 1], rot[r], opt, 1, n);\n        printf(\"%d\\n\", q[wh].v);\n    }\n    return ;\n}\nsigned main()\n{\n    input();\n    return 0;\n}\n```",
        "postTime": 1548684453,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u4e3b\u5e2d\u6811\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "\u8fd9\u9898\u53ef\u4ee5\u7528\u6574\u4f53\u4e8c\u5206\u8fc7\u6389\u3002\n\n\u9996\u5148\u8003\u8651\u4e00\u6b21\u8be2\u95ee\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u901a\u8fc7\u9a8c\u8bc1\u6bd4\u7b54\u6848\u5927\u7684\u6570\u6709\u591a\u5c11\u4e2a\u6765\u4e0d\u65ad\u5730\u7f29\u5c0f\u7b54\u6848\u8303\u56f4\u76f4\u81f3\u5f97\u5230\u4e00\u4e2a\u51c6\u786e\u7684\u7b54\u6848\u3002\u800c\u5bf9\u4e8e\u591a\u4e2a\u8be2\u95ee\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u8fd9\u4e48\u505a\uff0c\u53ea\u4e0d\u8fc7\u5bf9\u6bcf\u4e00\u4e2a\u8be2\u95ee\u6211\u4eec\u90fd\u9700\u8981\u5224\u5b9a\u4e00\u4e0b\uff0c\u4ee5\u51b3\u5b9a\u5b83\u88ab\u5212\u5206\u5230\u54ea\u4e00\u4e2a\u7b54\u6848\u7684\u533a\u95f4\u91cc\u3002\u8fd9\u4e2a\u5224\u5b9a\u8fc7\u7a0b\u5c31\u662f\u901a\u8fc7\u6bd4\u8f83\u6bd4mid\u5927\u7684\u6570\u7684\u4e2a\u6570\u548ck\u3002\u540c\u65f6\u5982\u679c\u6bd4\u4e8c\u5206\u7684mid\u5927\u7684\u6570\u7684\u4e2a\u6570\u5c0f\u4e8ek\u4e86\uff0c\u6211\u4eec\u662f\u8981\u53bb\u5bfb\u627e\u5c0f\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6bd4mid\u5927\u7684\u6570\u5728\u4ee5\u540e\u7684\u9012\u5f52\u91cc\u59cb\u7ec8\u4f1a\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u5fc5\u8981\u53bb\u505a\u91cd\u590d\u7684\u5de5\u4f5c\uff0c\u53ea\u9700\u8981\u628a\u8fd9\u4e9b\u6570\u7684\u4e2a\u6570\u7d2f\u79ef\u5230\u8d21\u732e\u91cc\uff0c\u4ee5\u540e\u9012\u5f52\u7684\u65f6\u5019\u5c31\u4e0d\u7528\u8003\u8651\u8fd9\u4e9b\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u6570\u5217\u91cc\u7684\u6570\u4e5f\u548c\u8be2\u95ee\u4e00\u8d77\u9012\u5f52\uff0c\u8fd9\u6837\u8fd9\u4e9b\u6570\u4e5f\u4f1a\u88ab\u5206\u5230\u5c5e\u4e8e\u7684\u7b54\u6848\u533a\u95f4\u91cc\uff0c\u5e76\u4e14\u53ea\u5bf9\u76f8\u5e94\u533a\u95f4\u91cc\u7684\u8be2\u95ee\u6709\u5f71\u54cd\u3002\n\n\u6574\u4f53\u4e8c\u5206\u7684\u8fc7\u7a0b\u5b9e\u8d28\u4e0a\u662f\u4e2a\u6309\u7167\u6570\u503c\u6765\u5212\u5206\u64cd\u4f5c\u5e8f\u5217\u7684\u8fc7\u7a0b\uff0c\u4e8e\u662f\u590d\u6742\u5ea6\u4e5f\u5c31\u548c\u64cd\u4f5c\u5e8f\u5217\u7684\u957f\u5ea6\u7ebf\u6027\u76f8\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u4e2d\u95f4\u7ef4\u62a4\u4e00\u4e9b\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u5c31\u4e00\u5b9a\u4e0d\u80fd\u6709\u548c\u6570\u5217\u957f\u7ebf\u6027\u76f8\u5173\u7684\u4e1c\u897f\uff0c\u5426\u5219\u4f1a\u7834\u574f\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u5177\u4f53\u7684\u590d\u6742\u5ea6\u8bc1\u660e\u8bf7\u89c12013\u5e74\u96c6\u8bad\u961fXHR\u8bba\u6587\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define lowbit(x) (x&(-x))\n#define INF 0x3f3f3f3f\n#define N 200005\n#define M 200005\nusing namespace std;\nint n,m,pos;\nint Max=-INF,Min=INF;\nint id[N],ans[N],tmp[N];\nbool mark[N];\nstruct DATA{\n    int x,v;\n    bool operator < (const DATA&r)const{return v<r.v;}\n}data[N];\nstruct Ques{\n    int l,r,k;\n}q[M];\nint tree[N];\ninline void add(int x,int num){\n    while(x<=n){\n        tree[x]+=num;\n        x+=lowbit(x);\n    }\n}\ninline int search(int x){\n    int re=0;\n    while(x){\n        re+=tree[x];\n        x-=lowbit(x);\n    }\n    return re;\n}\nvoid solve(int l,int r,int L,int R){\n    if(l>r || L==R)     return;\n    int mid=(L+R)>>1;\n    while(data[pos+1].v<=mid && pos<n){\n        add(data[pos+1].x,1);\n        ++pos;\n    }\n    while(data[pos].v>mid){\n        add(data[pos].x,-1);\n        --pos;\n    }\n    int cnt=0;\n    for(int i=l;i<=r;++i){\n        if(search(q[id[i]].r)-search(q[id[i]].l-1)>q[id[i]].k-1){\n            ans[id[i]]=mid;\n            mark[i]=1;\n            ++cnt;\n        }\n        else    mark[i]=0;\n    }\n    int l1=l,l2=l+cnt;\n    for(int i=l;i<=r;++i){\n        if(mark[i])     tmp[l1++]=id[i];\n        else            tmp[l2++]=id[i];\n    }\n    for(int i=l;i<=r;++i)       id[i]=tmp[i];\n    solve(l,l1-1,L,mid);\n    solve(l1,l2-1,mid+1,R);\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i){\n        scanf(\"%d\",&data[i].v);\n        data[i].x=i;\n        Max=max(Max,data[i].v);\n        Min=min(Min,data[i].v);\n    }\n    sort(data+1,data+n+1);\n    for(int i=1;i<=m;++i)       scanf(\"%d%d%d\",&q[i].l,&q[i].r,&q[i].k);\n    for(int i=1;i<=m;++i)       id[i]=i;\n    solve(1,m,Min,Max+1);\n    for(int i=1;i<=m;++i)       printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1512518371,
        "uid": 29470,
        "name": "qzp666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u65e9\u5c31\u60f3\u53d1\u4e00\u7bc7\u7eaf\u5206\u5757\u7684\u9898\u89e3\u4e86\uff0c \u56e0\u4e3a\u5404\u79cd\u4e8b\u60c5\u803d\u8bef\u4e86\u51e0\u4e2a\u6708...... \n\n\u6240\u4ee5\u849f\u84bb\u4e5f\u5c31\u4e0d\u591a\u5e9f\u8bdd\u4e86\uff0c \u76f4\u63a5\u8fdb\u5165\u6b63\u9898\uff1a\n\n**\u503c\u57df\u5206\u5757\u5728n sqrt(n)\u7684\u65f6\u95f4\u5185\u89e3\u51b3\u8be5\u95ee\u9898**\n\n\u90a3\u4e48\u6211\u4eec\u8be5\u600e\u6837\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462qwq\uff1f  \n\n\u6211\u4eec\u5148\u628a\u6570\u5217\u5206\u5757\uff0c \u518d\u628a\u503c\u57df\u5206\u5757\uff0c \u7136\u540e\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4cnt1\uff0c cnt2, cnt1(i, j)\u8868\u793a\u524di\u4e2a\u6570\u5217\u5757\u4e2d\u7b2cj\u4e2a\u503c\u57df\u5757\u7684\u6570\u503c\u51fa\u73b0\u7684\u6b21\u6570\u548c\uff0c cnt2\uff08i, j)\u8868\u793a\u524di\u4e2a\u5757\u4e2dj\u8fd9\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u8fd9\u4e24\u4e2a\u6570\u7ec4\u663e\u7136\u53ef\u4ee5\u5728n sqrt(n)\u7684\u65f6\u95f4\u5185\u5904\u7406\u5b8c\u6210\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u5f53\u6211\u4eec\u6c42l r \u533a\u95f4\u7684\u7b2ck\u5927\u7684\u65f6\u5019\uff0c \u5bf9\u4e8e\u6563\u5757\uff0c \u6211\u4eec\u7528\u4e24\u4e2a\u4e34\u65f6\u6570\u7ec4san\uff0c san2 \u6765\u8bb0\u5f55\u548ccnt1 cnt2\u4e00\u6837\u7684\u4e1c\u897f\uff08\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u8bb0\u5f55\u7684\u662f\u6563\u5757\u4e2d\u7684\u4fe1\u606f\uff0c \u800c\u4e0d\u662f\u524d\u7f00\u548c\uff09\uff0c \u7136\u540e\u5bf9\u4e8e\u6574\u5757\uff0c \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u51fa\u4e86\u524d\u7f00\u548c\uff0c \u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4ece\u5934\u5f00\u59cb\u626b\u503c\u57df\u5757\uff0c \u7d2f\u52a0cnt1+san \uff0c \u76f4\u5230\u8fd9\u4e2a\u6570\u91cf\u5927\u4e8e\u6211\u4eec\u8981\u67e5\u8be2\u7684k\uff0c \u8fd9\u65f6\u5019\u5c31\u80fd\u786e\u5b9a\u6211\u4eec\u8981\u67e5\u8be2\u7684\u6570\u503c\u518d\u54ea\u4e00\u4e2a\u503c\u57df\u5757\u4e2d\u4e86\u3002 \u4e0b\u9762\u53ea\u8981\u5728\u626b\u4e00\u904d\u8fd9\u4e2a\u503c\u57df\u5757\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\uff0c \u901a\u8fc7cnt2\u548csan2 \u5c31\u80fd\u77e5\u9053\u5177\u4f53\u8981\u67e5\u8be2\u7684\u662f\u54ea\u4e2a\u6570\u4e86qwqwq\u3002\n\n\u90a3\u4e48\u5c31\u6ca1\u5565\u4e86\u554aqwqwq \u5982\u679c\u6709\u4ec0\u4e48\u95ee\u9898\u7684\u8bdd\u79c1\u4fe1\u5c0f\u849f\u84bb\u5c31\u597d\u5566qwqwq\n\n**\u90a3\u4e48\u4ee3\u7801\u5982\u4e0b**\n\n```\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <cstdio> \n#define maxn 200010\n#define re register\n#define FOR(i, l, r) for(re int i = l; i <= r; ++i)\nusing namespace std;\n\nint n, m, c, r, t, x, y, k;\nint sq, sq2;\nint nw[maxn], a[maxn], b1[maxn], b2[maxn], cnt1[500][500], cnt2[480][maxn], q[maxn][4], z[maxn];\nint san[500], san2[maxn];\n\ninline void in(re int &x){\n    x=0;int bl = 1;char c=getchar();\n    while(c<'0'||c>'9'){\n    \tif(c == '-')\n    \t  bl = -1;\n        c=getchar();\n    }\n    while(c<='9'&&c>='0'){\n        x=(x<<1)+(x<<3)+(c^'0');\n        c=getchar();\n    }\n    x *= bl;\n}\n\nvoid out(re int a){\n    if(a < 0) {\n        putchar('-');\n        a = -a;\n    }\n    if(a>=10)out(a/10);\n    putchar(a%10+'0');\n}\n\nint get_val(int x, int y, int k) {\n    int res = 0, pd = 0;\n    FOR(i, x, min(y, b1[x]*sq))\n      ++san[b2[nw[i]]], ++san2[nw[i]];\n    if(b1[x] != b1[y])\n      FOR(i, (b1[y]-1)*sq+1, y)\n        ++san[b2[nw[i]]], ++san2[nw[i]];\n    FOR(i, 1, b2[z[0]]) {\n    \tint ld = cnt1[b1[y]-1][i]-cnt1[b1[x]][i];\n    \tif(ld < 0) ld = 0;\n        if(res+(ld+san[i]) < k) { \n        \tres += san[i];\n        \tif(cnt1[b1[y]-1][i]-cnt1[b1[x]][i] > 0)\n        \t  res += cnt1[b1[y]-1][i]-cnt1[b1[x]][i];\n        }\n        else {\n        \tpd = i;\t\n        \tbreak;\n        }\n    }\n    int anss = -1;\n    FOR(i, (pd-1)*sq2+1, pd*sq2) {\n    \tres += san2[i];\n    \tif(cnt2[b1[y]-1][i]-cnt2[b1[x]][i] > 0)\n    \t  res += cnt2[b1[y]-1][i]-cnt2[b1[x]][i];\n        if(res >= k) {\n        \tanss = z[i];\n        \tbreak;\n        }\n    }\n    FOR(i, x, min(y, b1[x]*sq))\n      --san[b2[nw[i]]], --san2[nw[i]];\n    if(b1[x] != b1[y])\n      FOR(i, (b1[y]-1)*sq+1, y)\n        --san[b2[nw[i]]], --san2[nw[i]];\n    return anss;\n}\n\nint main() {\n    in(n), in(m);\n    sq = sqrt(n);\n    FOR(i, 1, n)\n      in(a[i]), b1[i] = (i-1)/sq+1, z[++z[0]] = a[i];\n    FOR(i, 1, m) {\n        in(q[i][1]),\n        in(q[i][2]),\n        in(q[i][3]);\n    }\n    sort(z+1, z+z[0]+1);\n    z[0] = unique(z+1, z+z[0]+1)-z-1;\n    sq2 = sqrt(z[0]);\n    FOR(i, 1, z[0])\n      b2[i] = (i-1)/sq2+1;\n    FOR(i, 1, n) {\n        nw[i] = lower_bound(z+1, z+z[0]+1, a[i])-z; //nw\u4e3aa\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\uff0c\u5904\u7406cnt1\uff0c cnt2 \n        ++cnt1[b1[i]][b2[nw[i]]];\n        ++cnt2[b1[i]][nw[i]];\n    }\n    FOR(i, 1, b1[n]) { //\u5904\u7406\u524d\u7f00\u548c \n        FOR(j, 1, b2[z[0]]) \n          cnt1[i][j] += cnt1[i-1][j];\n        FOR(j, 1, z[0])\n          cnt2[i][j] += cnt2[i-1][j];\n    }\n    FOR(i, 1, m) {\n        out(get_val(q[i][1], q[i][2], q[i][3]));\n        putchar(10);\n    }\n}\n```",
        "postTime": 1552658611,
        "uid": 66965,
        "name": "Juan_feng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "#By Bartholomew\n-------\n###\u524d\u7f6e\u77e5\u8bc6:\n\n1.\u6811\u72b6\u6570\u7ec4\n\n2.\u7ebf\u6bb5\u6811\n#\u4e3b\u5e2d\u6811\n**\u6a21\u677f\u662f\u5e72\u4ec0\u4e48\u7684,\u5176\u5b9e\u5c31\u662f\u8be2\u95ee\u533a\u95f4\u7b2ck\u5927**\n\n\u4e0d\u652f\u6301\u4fee\u6539:\n\u590d\u6742\u5ea6$O(nlog_n)$\n\n\u5e26\u4fee:\n\u590d\u6742\u5ea6$O(n * (log_n)^2)$\n##\u5206\u6790:\n\n**\u8bf7\u5927\u5bb6\u8010\u5fc3\u770b\u5b8c\u4e0b\u9762\u4e00\u9053\u9898\u76ee\u7684\u505a\u6cd5,\u56e0\u4e3a\u8ddf\u4e3b\u5e2d\u6811\u7684\u5173\u7cfb\u5f88\u5927**\n###\u5f15\u9898\n\u6211\u4eec\u5176\u5b9e\u6709\u4e00\u9053\u9898\u76ee(~~\u73b0\u7f16~~),\u5c31\u662f\u6c42\u4e00\u4e2a\u6bcf\u6b21**\u6dfb\u52a0\u5143\u7d20**\u81f3\u672b\u5c3e\u7684\u5e8f\u5217\u7684**\u4e2d\u4f4d\u6570**\u7684\u5927\u5c0f\u7684\u9898\u76ee\n\n\u5c31\u76f8\u5f53\u4e8e\u7ed9\u4f60\u6700\u540e\u7684\u6570\u7ec4,\u8ba9\u4f60\u8fd8\u539f\u6bcf\u4e00\u6b21\u7684\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u4f4d\u6570\u5e76\u4f9d\u6b21\u8f93\u51fa.\n~~(\u5148\u5ffd\u89c6\u6389\u6570\u636e\u8303\u56f4)~~\n\u5982(\u6837\u4f8b):\n>**input:**\n\n>5\n\n>4 2 7 3 1\n\n>**output:**\n\n>4 (4 \u5e8f\u5217\u7684\u4e2d\u4f4d\u6570)\n\n>3 (4 2 \u7684\u6392\u5e8f\u540e\u4e2d\u4f4d\u6570)\n\n>4 (4 2 7 \u6392\u5e8f\u540e\u7684\u4e2d\u4f4d\u6570,\u4ee5\u6b64\u7c7b\u63a8)\n\n>3.5\n\n>3\n\n\u5176\u4e2d\u6709\u4e00\u4e2a\u505a\u6cd5\u5c31\u662f\u5efa\u7acb\u4e00\u9897 **\u7ebf\u6bb5\u6811**\n\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u95f4$[i,j]$ \u610f\u5473\u7740\u79bb\u6563\u5316\u540e\u7684\u6570\u5b57\u5927\u5c0f\u4e3a $i $~ $j$ \u7684\u6570\u5b57\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\n\n\u5728\u6211\u4eec\u7684\u6837\u4f8b\u4e4b\u4e2d,\u79bb\u6563\u5316\u4e4b\u540e\u8fd8\u662f\u53ea\u6709 5 \u4e2a\u6570\u5b57,\u6240\u4ee5\u662f\u5efa\u7acbsiz = 5 \u7684\u6811\n\u90a3\u4e48\u5f88\u5bb9\u6613\u63a8\u51fa\u8fd9\u68f5\u6811\u7684\u6a21\u6837:\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdn.net/20180413205329517?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODA5NjY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u5f53 \u5143\u7d20 $a[1]=4$ (\u79bb\u6563\u5316\u540e\u4e3a4) \u52a0\u5165\u5230\u8fd9\u9897\u6811\u540e\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5f71\u54cd\u4e3a\u4ee5\u4e0b:\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdn.net/20180413205856510?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODA5NjY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u5c31\u662f\u77e5\u9053\u662f\u600e\u4e48\u52a0\u5165\u5143\u7d20\u4e86\n\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898,\u5c31\u662f\u6c42 $kth$\u600e\u4e48\u529e?\n\n\u7b54: \u6211\u4eec\u53ef\u4ee5\u770b$root(\u6307\u7684\u662f\u5f53\u524d\u8282\u70b9)$\u7684\u5de6\u8282\u70b9,\u8bbe\u5b83\u7684\u503c\u4e3ax\n\n**\u5982\u679c $x >= k $, \u90a3\u4e48\u5c31\u662f\u5f80\u4e0b\u641c\u7d22 \u7b2c $k$\u5927**\n\n**\u5982\u679c $x < k$, \u90a3\u4e48\u5c31\u662f\u5f80\u5de6\u641c\u7d22 \u7b2c $k - x$ \u5927**\n\n\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u7a0b\u5e8f,\u5177\u4f53\u7ec6\u8282\u60f3\u5fc5\u5927\u5bb6\u90fd\u77e5\u9053\u7684,\u4e0d\u5fc5\u7ec6\u8bb2!\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u5207\u5165\u6b63\u9898\u4e86!\n###\u89e3\u51b3\n\u6211\u4eec\u8003\u8651\u6700\u66b4\u529b\u7684\u601d\u60f3:\n\n**\u5c31\u662f\u5efa\u7acb n \u68f5\u50cf\u4e0a\u9762\u8bf4\u7684\u90a3\u6837\u7684\u6811, \u7b2c $i$ \u68f5\u6811$T_i$\u7ef4\u62a4\u7684\u662f \u533a\u95f4 [1,i]\u7684\u5e8f\u5217\u4fe1\u606f**\n\n**\u53ef\u4ee5\u53d1\u73b0,\u8fd9\u79cd\u6811\u662f\u4e0d\u662f\u6709\u533a\u95f4\u76f8\u51cf\u7684\u6027\u8d28? **\n\n**\u4e3e\u4e2a\u6817\u5b50: [3,4] \u533a\u95f4\u7684 \u79bb\u6563\u5316\u5927\u5c0f\u4e3a [1,3]\u7684\u6570\u6709\u591a\u5c11\u4e2a? \u4e0d\u5c31\u662f\u5c06T[4] \u7684 \u8868\u793a [1,3]\u533a\u95f4\u7684\u8282\u70b9\u7684\u6743\u503c\u51cf\u53bbT[2]\u7684\u8282\u70b9\u8868\u793a[1,3] \u533a\u95f4\u7684\u8282\u70b9\u7684\u6743\u503c\u5c31\u662f [3,4]\u533a\u95f4\u7684\u79bb\u6563\u5927\u5c0f\u4e3a[1,3]\u7684\u6570\u7684\u4e2a\u6570\u4e86\u5417(\u524d\u7f00\u601d\u60f3) **\n\n\u90a3\u4e48\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u662f\u5728 $nlog_n$ \u91cc\u4e86,\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0,\u6bcf\u4e00\u9897\u7ef4\u62a4\u533a\u95f4\u7684\u6811\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u4e0d\u662f$O(n)$\u7684,\u90a3\u4e48\u968f\u4fbf\u8ba1\u7b97\u4e00\u4e0b\u53d1\u73b0\u6211\u4eec\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(n^2)$\u7684\u4e86,\u975e\u5e38\u7684\u4e0d\u723d,\u600e\u4e48\u529e?\n\n\u4f46\u662f\u6211\u4eec\u53ea\u8981\u89c2\u5bdf\u4e00\u4e0b,\u662f\u4e0d\u662f\u6bcf\u4e00\u6b21\u90fd\u662f\u53ea\u4f1a\u6709 \u4e00\u6761 $O(log_n)$\u7684\u8def\u5f84\u662f\u88ab\u4fee\u6539\u7684,\u800c\u522b\u7684\u4fe1\u606f\u662f\u4e0d\u662f\u4e0d\u53d8\u7684,\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u6bcf\u4e00\u6b21\u53ea\u662f\u5efa\u7acb log \u4e2a\u8282\u70b9,\u8ba9\u8fd9\u4e9b\u6811\u5171\u7528\u4e00\u4e9b\u90e8\u5206\n\u6211\u4eec\u7ffb\u4e00\u4e0b\u6837\u4f8b:\n\u6bd4\u5982\u5c31\u662f\u4e00\u5f00\u59cb\u6211\u4eec\u8bf4\u7684\u6837\u4f8b\u597d\u4e86,\u5047\u8bbe\u6211\u4eec\u5efa\u5b8c\u4e86T[3] \u8fd9\u68f5\u6811,\u6211\u4eec\u52a0\u5165\u7b2c 4 \u4e2a\u5143\u7d20:\n![ll](https://img-blog.csdn.net/2018041407325379?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODA5NjY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdn.net/20180414073345633?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODA5NjY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u90a3\u4e48\u6211\u4eec\u5c31\u8fd9\u6837\u81ea\u5efa\u7acb\uff1a\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdn.net/20180414073603794?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODA5NjY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u53ef\u4ee5\u4fdd\u8bc1\u662f\u6ca1\u6709\u95ee\u9898,\u800c\u4e14\u65f6\u95f4\u4e0e\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u7a33\u5b9a\u7684\u6811\u4e86\n##\u4ee3\u7801:\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdn.net/20180414082052231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODA5NjY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n```\n#pragma GCC optimize(3)\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#define N 200005\n#define M 4000005\n#define R register\nusing namespace std;\n\nint n, Q, m, cnt, a[N], b[N], x, y, k;\nint T[N], ls[M], rs[M], sum[M];\n\ninline int read()\n{\n    int x = 0;\n    char c = getchar();\n    bool flag = 0;\n    while(c < '0' || c > '9'){if(c == '-')flag = 1;c = getchar();}\n    while(c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + (c ^ 48);c = getchar();}\n    return flag ? -x : x;\n}\n\nint Build(int l, int r)\n{\n    int now = ++cnt;\n    if(l < r)\n    {\n        int mid = (l + r) >> 1;\n        ls[now] = Build(l, mid);\n        rs[now] = Build(mid + 1, r);\n    }\n    return now;\n}\n\ninline void Build_new(int mark, int loc)\n{\n    T[mark] = ++cnt;\n    sum[cnt] = sum[T[mark - 1]] + 1;\n    int l =  1, r = m, now = cnt, still = T[mark - 1];\n    for(; ls[still] || rs[still];)\n    {\n        int mid = (l + r) >> 1;\n        // l ~ mid --- left    mid + 1 ~ r --- right\n        if(loc > mid)\n        {\n            ls[now] = ls[still];rs[now] = ++cnt;\n            sum[ rs[now] ] = sum[ rs[still] ] + 1;\n            now = rs[now];\n            still = rs[still];\n            l = mid + 1;\n        }\n        else\n        {\n            rs[now] = rs[still];ls[now] = ++cnt;\n            sum[ ls[now] ] = sum[ ls[still] ] + 1;\n            now = ls[now];\n            still = ls[still];\n            r = mid;\n        }\n    }\n}\n\ninline int query(int a, int b, int l, int r, int k)\n{\n    if(l == r) return l;\n    int lm = sum[ls[b]] - sum[ls[a]];\n    int mid = (l + r) >> 1;\n    if(k <= lm) return query(ls[a], ls[b], l, mid, k);\n    return query(rs[a], rs[b], mid + 1, r, k - lm);\n}\n\nsigned main()\n{\n    n = read(), Q = read();\n    for(R int i = 1; i <= n; i++) a[i] = read(), b[i] = a[i];\n    sort(b + 1, b + 1 + n);\n    m = unique(b + 1, b + 1 + n) - b - 1;\n    T[0] = Build(1, m);\n    for(R int i = 1; i <= n; i++)\n    {\n        int loc = lower_bound(b + 1, b + 1 + m, a[i]) - b;\n        Build_new(i, loc);\n    }\n    for(R int i = 1; i <= Q; i++)\n    {\n        x =read(), y=read(), k=read();\n        printf(\"%d\\n\", b[query(T[x - 1], T[y], 1, m, k)]);\n    }\n    return 0;\n}\n```\n##\u5f85\u4fee\u4e3b\u5e2d\u6811\n\u6211\u4eec\u73b0\u5728\u6765\u601d\u8003\u5f85\u4fee\u6539\u7684\u4e3b\u5e2d\u6811\n\n\u6bd4\u5982\u8fd9\u4e2a\u6837\u4f8b\n>intput:\n5 3\n3 2 1 4 7\nQ 1 4 3\nC 2 6\nQ 2 5 3\noutput:\n3\n6\n\nQ \u8868\u793a\u8be2\u95ee [x,y] \u533a\u95f4 \u7b2c k \u5927 C \u8868\u793a\u5c06\u7b2c x \u4f4d\u7684\u6570\u5b57\u4fee\u6539\u6210\u4e3a y\n\n\u6211\u4eec\u4e0d\u59a8\u60f3\u4e00\u60f3\u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u4fee\u6539\u662f\u600e\u4e48\u4fee\u6539\u7684\n\u5982\u679c\u6211\u4eec\u66b4\u529b\u7684\u8bdd,\u5176\u5b9e\u5c31\u662f\u5bf9\u4e8e \u8fd9 T[2] \u4e4b\u540e\u7684\u6240\u6709\u6811\u91cd\u65b0\u6784\u5efa\u4e00\u904d,\u4f46\u662f\u663e\u7136\u662f\u4e0d\u884c\u7684\u5bf9\u5427!\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u53ea\u662f\u5bf9\u4e8e\u67d0\u4e00\u4e9b\u6811\u8fdb\u884c\u4fee\u6539\n\n\u5bf9\u4e8e\u66f4\u65b0\uff0c \u6211\u4eec**\u4e0d\u6539\u53d8\u8fd9\u4e9b\u5df2\u7ecf\u5efa\u597d\u7684\u6811**\uff0c \u800c\u662f**\u53e6\u5efa\u4e00\u6279\u6811S**\uff0c\u7528\u6765\u8bb0\u5f55\u66f4\u65b0\uff0c\u800c\u8fd9\u6279\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\n\n\u4e5f\u5c31\u662f**\u6811\u72b6\u6570\u7ec4\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u9897\u7ebf\u6bb5\u6811**\n\u4e00\u5f00\u59cb\uff0cS[0]\u3001S[1]\u3001S[2]\u3001S[3]\u3001S[4]\u3001S[5] (\u5efa\u4e86\u4e00\u68f5\u7a7a\u6811)\n\n\u5c31\u5229\u7528\u6811\u72b6\u6570\u7ec4\u7684 lowbit \u7684\u6027\u8d28\n\u5c06 T[2] \u4ee5\u53ca T[2+lowbit(2)] \u7684\u4e4b\u540e\u7684\u6240\u6709\u7684\u6811\u90fd\u8fdb\u884c\u91cd\u6784 \u90a3\u4e48 \u590d\u6742\u5ea6\u5c31\u662f $O(n * (log_n)^2)$\u5f97\u5230\u4e86\u4fdd\u8bc1,\u4f46\u662f\u5927\u5bb6\u53ef\u80fd\u4f1a\u6709\u4e00\u70b9\u7591\u60d1,\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u5462?\n\n\u8bf7\u5927\u5bb6\u8bb0\u4f4f\u6211\u8bf4\u8fc7\u7684\u8bdd,\u518d\u91cd\u590d\u4e00\u904d:\n**\u6811\u72b6\u6570\u7ec4\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u9897\u7ebf\u6bb5\u6811,\u53ea\u4e0d\u8fc7\u6bcf\u4e2a\u70b9\u4fee\u6539\u90fd\u662f $O(log_n)$\u7684\u590d\u6742\u5ea6**\n\u56e0\u4e3a\u6bcf\u9897\u8282\u70b9\u5c31\u662f\u4e00\u68f5\u6811,\u81ea\u7136\u4fee\u6539\u5c31\u662f log \u7684\u590d\u6742\u5ea6\u7684!\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdn.net/20180414082037548?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODA5NjY0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u5176\u5b9e\u6211\u4eec\u539f\u6765\u7684\u6811\u72b6\u6570\u7ec4\u4ee3\u7801\u5c31\u662f\u8fd9\u6837\u7684\n\n```\n\ninline void init()\n{\n    for(int i=1;i<=n;i++)\n        for(int j=i;j<=n;j+=lowbit(j))\n            c[j]+=a[i];\n}\ninline long long get(int x)\n{\n    int ans=0;\n    for(int i=x;i>=1;i-=lowbit(i))\n        ans+=c[i];\n    return ans;\n}\n\n```\n\u90a3\u4e48\u6211\u4eec\u4e0d\u8981\u628a\u6811\u72b6\u6570\u7ec4\u60f3\u7684\u8fd9\u4e48\u96be\n\u5c31\u662f\u76f8\u5f53\u4e8e\u662f\u6211\u4eec\u5728\u8be2\u95ee \u67d0\u68f5\u6811 T[x] \u7684 \u67d0\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8282\u70b9 k \u7684\u771f\u5b9e\u503c\u7f62\u4e86\n\n\u5c31\u662f **\u539f\u6765\u7684$sum$ + \u4fee\u6539\u7684$sum$**\n\n\u90a3\u4e48 \u4fee\u6539\u7684$sum$ \u5c31\u662f$S$\u6811\u6211\u4eec\u5176\u5b9e\u5c31\u662f\u8981\u770b $x , x - lowbit(x) $...... \u8fd9\u4e9b\u6811\u7684\u540c\u6837\u662f $k$ \u7684\u4f4d\u7f6e\u7684\u503c\u76f8\u52a0\u5c31\u597d\u4e86\n\n\u56e0\u4e3a\u5176\u5b9e\u6211\u4eec\u628a**\u6811\u770b\u505a\u4e00\u4e2a\"\u70b9\"** ,\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u5c31\u662f\u95ee **T[x] \u7684\"\u771f\u5b9e\u7684\u6837\u5b50\"**,\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u8bbf\u95ee$lowbit$\u7684 \"\u70b9\" (\u5c31\u662fS \u6811) \u628a\u6240\u6709\u7684S\u6811**\u5c42\u5c42\u53e0\u52a0**\u5f97\u5230\u7684\u6811\u5c31\u662f T[x] \u7684\"\u771f\u5b9e\u7684\u6837\u5b50\"\n\n\u5047\u516c\u5f0f:\n\n$$T_{x,real}=T_x+\\sum_{i=x}^{i-= lowbit(i)}S[i] $$**\u628a\u5b83\u4eec\u5f53\u505a\u70b9\u6765\u770b**\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u4e0d\u9700\u8981\u95ee \u4e00\u6574\u9897\u6811,\u800c\u662f\u67d0\u4e00\u4e2a\u8282\u70b9,\u90a3\u4e48\u6211\u4eec\u53ea\u8981 \u6293\u4f4f \u4f4d\u7f6e\u4e3a\u8be2\u95ee\u7684\u8282\u70b9\u7684\u70b9\u7684$sum$\u503c\n\u5e76\u628a\u5b83\u4eec\u76f8\u52a0\u5c31\u662f\u7b54\u6848\u4e86! \u5bf9\u5427!\n##\u4ee3\u7801\n\n```\n#pragma GCC optimize(3)\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\n#define N 60005\n#define M 2000005\n#define R register\nusing namespace std;\n\nint n, Q, m, cnt, a[N], b[N], x, y, k;\nint T[N], S[N], ls[M], rs[M], sum[M];\nint cntE, use[3][N];\n\nstruct ques\n{\n    char s[1];\n    int l, r, kth;\n}q[N >> 2];\ninline int read()\n{\n    int x = 0;\n    char c = getchar();\n    bool flag = 0;\n    while(c < '0' || c > '9'){if(c == '-')flag = 1;c = getchar();}\n    while(c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + (c ^ 48);c = getchar();}\n    return flag ? -x : x;\n}\n\nint Build(int l, int r)\n{\n    int now = ++cnt;\n    if(l < r)\n    {\n        int mid = (l + r) >> 1;\n        ls[now] = Build(l, mid);\n        rs[now] = Build(mid + 1, r);\n    }\n    return now;\n}\n\ninline int Build_new(int flag, int mark, int loc, int val)\n{\n    int rt = ++cnt; \n    int before;\n    if(mark == 1) before = T[0];\n    else before = flag ? T[mark - 1] : S[mark - 1];\n    if(!flag && val) before = S[mark];\n\tsum[rt] = sum[before] + val;\n    int l =  1, r = m, now = rt, still = before;\n    for(; ls[still] || rs[still];)\n    {\n        int mid = (l + r) >> 1;\n        // l ~ mid --- left    mid + 1 ~ r --- right\n        if(loc > mid)\n        {\n            ls[now] = ls[still];\n            rs[now] = ++cnt, sum[ rs[now] ] = sum[ rs[still] ] + val;\n            now = rs[now];\n            still = rs[still];\n            l = mid + 1;\n        }\n        else\n        {\n            rs[now] = rs[still];\n            ls[now] = ++cnt, sum[ ls[now] ] = sum[ ls[still] ] + val;\n            now = ls[now];\n            still = ls[still];\n            r = mid;\n        }\n    }\n    return rt;\n}\n\ninline int lowbit(int x) { return x & (-x); }\ninline int Sum(int y, int x)\n{\n    int res = 0;\n    for(R int i = x; i >= 1; i -= lowbit(i))\n        res += sum[ls[use[y][i]]];\n    return res;\n}\ninline int query(int u, int v, int a, int b, int l, int r, int k)\n{\n    if(l == r) return l;\n    int lm = Sum(2, v) + sum[ls[b]] - sum[ls[a]] - Sum(1, u);\n    int mid = (l + r) >> 1;\n    if(k <= lm) \n    {\n        for(R int i = u; i >= 1; i -= lowbit(i))\n            use[1][i] = ls[use[1][i]];\n        for(R int i = v; i >= 1; i -= lowbit(i))\n            use[2][i] = ls[use[2][i]];\n        return query(u, v, ls[a], ls[b], l, mid, k);\n    }\n    for(R int i = u; i >= 1; i -= lowbit(i))\n            use[1][i] = rs[use[1][i]];\n    for(R int i = v; i >= 1; i -= lowbit(i))\n            use[2][i] = rs[use[2][i]];\n    return query(u, v, rs[a], rs[b], mid + 1, r, k - lm);\n    return 0;\n}\n\ninline void update(int loc,int num)\n{\n    int where;\n    where = lower_bound(b + 1, b + 1 + m, a[loc]) - b;\n    for(R int i = loc; i <= n; i += lowbit(i))\n        S[i] = Build_new(0, i, where, -1);\n    where = lower_bound(b + 1, b + 1 + m, num) - b;\n    for(R int i = loc; i <= n; i +=lowbit(i))\n        S[i] = Build_new(0, i, where, 1);\n    a[loc] = num;\n}\n\nsigned main()\n{\n    n = read(), Q = read();\n    for(R int i = 1; i <= n; i++) a[i] = read(), b[i] = a[i];\n    cntE = n;\n    for(R int i = 1; i <= Q; i++)\n    {\n        scanf(\"%s%d%d\", q[i].s, &q[i].l, &q[i].r);\n        if(q[i].s[0] == 'Q')\n            scanf(\"%d\", &q[i].kth);\n        else \n            b[++cntE] = q[i].r;\n    }\n    sort(b + 1, b + 1 + cntE);\n    m = unique(b + 1, b + 1 + cntE) - b - 1;\n    T[0] = Build(1, m);\n    for(R int i = 1; i <= n; i++)\n    {\n        int loc = lower_bound(b + 1, b + 1 + m, a[i]) - b;\n        T[i] = Build_new(1, i, loc, 1);\n    }\n    for(R int i = 1; i <= n; i++)\n        S[i] = Build_new(0, i, 1, 0);\n    for(R int i = 1; i <= Q; ++i)\n    {\n        if(q[i].s[0] == 'Q')\n        {\n            int x = q[i].l, y = q[i].r;\n            for(R int j = x - 1; j >= 1; j -= lowbit(j))\n                use[1][j] = S[j];\n            for(R int j = y; j >= 1; j -= lowbit(j))\n                use[2][j] = S[j];\n            printf(\"%d\\n\", b[query(x - 1, y, T[x - 1], T[y], 1, m, q[i].kth)]);\n        }\n        else\n            update(q[i].l, q[i].r);\n    }\n    return 0;\n}\n```\n\u5b89\u5229\u4e2a\u4eba\u535a\u5ba2:\n[\u4e3b\u5e2d\u6811](https://blog.csdn.net/qq_39809664/article/details/79934516)",
        "postTime": 1523665748,
        "uid": 50047,
        "name": "Bartholomew",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u4e3b\u5e2d\u6811\u6a21\u677f\u9898\u3002       \n\u9996\u5148\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u662f\u4ec0\u4e48\u5f88\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u5bf9\u7ebf\u6bb5\u6811\u638c\u63e1\u7684\u5f88\u719f\u7ec3\u7684\u8bdd\u5e94\u8be5\u4e0d\u96be\u7406\u89e3\u4e3b\u5e2d\u6811\u3002\n### \u6b63\u6587\u90e8\u5206\uff1a                     \n\u4e3b\u5e2d\u6811\u4e00\u822c\u7528\u6765\u89e3\u51b3\u9759\u6001\u533a\u95f4\u7684\u7b2c$k$\u5c0f\u95ee\u9898\u3002       \n#### \u539f\u7406\uff1a   \n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5728\u7eb8\u4e0a\u753b\u4e00\u5f20\u7a7a\u7684\u7ebf\u6bb5\u6811\u3002\u7136\u540e\u6211\u4eec\u52a0\u5165\u67d0\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u4f60\u4eec\u5c31\u5728\u7eb8\u4e0a\u4e0e\u8fd9\u4e2a\u8282\u70b9\u6240\u76f8\u5173\u7684\u8282\u70b9\u7684\u503c\u5c31\u52a0$1$\u3002       \n\u6bd4\u5982\u6211\u4eec\u52a0\u5165\u4e86\u503c$1$,\u90a3\u4e48\u53d7\u5230\u5f71\u54cd\u7684\u533a\u95f4\u5c31\u6709:$[1,7],[1,4],[1,2],[1,1]$                       \n\u597d\uff0c\u5f53\u6211\u4eec\u628a\u6240\u6709\u7684\u70b9\u90fd\u52a0\u5b8c\u4e86\u4e4b\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u8981\u89e3\u51b3\u7b2c$k$\u5c0f\u7684\u95ee\u9898\u3002    \n\u5148\u5047\u8bbe\u6211\u4eec\u67e5\u7684\u533a\u95f4\u4e3a$[l,r]$\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u7b2c$l$\u9897\u7ebf\u6bb5\u6811\u4e0e\u7b2c$r$\u9897\u7ebf\u6bb5\u6811\u76f8\u51cf\u3002\u5176\u4e2d\u6240\u6709\u8282\u70b9\u6240\u5f97\u7684\u5dee\u5c31\u662f\u67d0\u6bb5\u533a\u95f4\u91cc\u7684\u503c\u5f97\u4e2a\u6570\u3002         \n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u4e86\u3002\u5982\u679c\u67d0\u6bb5\u533a\u95f4\u4e2d\u7684\u503c\u5f97\u4e2a\u6570\u5927\u4e8e$k$,\u6211\u4eec\u5c31\u5f80\u5de6\u5b50\u6811\u8d70\uff0c\u5426\u5219\u5c31\u51cf\u6389\u5de6\u5b50\u6811\uff0c\u7136\u540e\u5f80\u53f3\u5b50\u6811\u8d70\u3002   \n### My Code:\n```cpp\n#include <bits/stdc++.h>\n#define il inline\nconst int MAXN = 2e5 + 10;\nusing namespace std;   \nint n,m,i,j,k,cnt;\nint a[MAXN],lsh[MAXN];\nint num[MAXN << 5],l[MAXN << 5],r[MAXN << 5],sum[MAXN << 5];\ntemplate<typename T> il void read(T& res) {\n    res = 0;char c;bool sign = 0;\n    for(c = getchar();!isdigit(c);c = getchar()) sign |= c == '-';\n    for(;isdigit(c);c = getchar()) res = (res << 1) + (res << 3) + (c ^ 48);\n    (sign) && (res = -res);\n    return;\n}\nint build(int l,int r) {\n    cnt++;int num = cnt;\n    if(l < r) {\n        int mid = l + r >> 1;\n        ::l[num] = build(l,mid);\n        ::r[num] = build(mid + 1,r);\n    }\n    return num;\n}\nint modify(int pre,int l,int r,int mn) {\n    cnt++;int num = cnt;\n    ::l[num] = ::l[pre];::r[num] = ::r[pre];::sum[num] = ::sum[pre] + 1;\n    if(l < r) {\n        int mid = l + r >> 1;\n        if(mn <= mid) ::l[num] = modify(::l[pre],l,mid,mn);\n        else ::r[num] = modify(::r[pre],mid + 1,r,mn);\n    }\n    return num;\n}\nint query(int x,int y,int l,int r,int k) {\n    if(l >= r) return l;\n    int tmp = ::sum[::l[y]] - ::sum[::l[x]];\n    int mid = l + r >> 1;\n    if(tmp >= k) return query(::l[x],::l[y],l,mid,k);\n    else return query(::r[x],::r[y],mid + 1,r,k - tmp);\n}\nint main() {\n    read(n);read(m);\n    for(int i = 1;i <= n;i++) {\n        read(a[i]);lsh[i] = a[i];\n    }\t\n    sort(lsh + 1,lsh + n + 1);int _n = unique(lsh + 1,lsh + n + 1) - lsh - 1;\n    num[0] = build(1,_n);\n    for(int i = 1;i <= n;i++) {\n        int tmp = lower_bound(lsh + 1,lsh + _n + 1,a[i]) - lsh;\n        num[i] = modify(num[i - 1],1,_n,tmp);\n    }\n//\tfor(int i = 0;i <= n;i++) cout << num[i] << ' ';cout << endl;\n    for(int i = 1;i <= m;i++) {\n        int l,r,k;read(l);read(r);read(k);\n        int tmp = query(num[l - 1],num[r],1,_n,k);        \n        printf(\"%d\\n\",lsh[tmp]);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1549431182,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u770b\u5927\u5bb6\u90fd\u662f\u7528`\u4e3b\u5e2d\u6811`\u505a\u7684\uff0c\u8fd9\u91cc\u8d34\u4e00\u7bc7`\u53ef\u6301\u4e45\u53160/1 trie`\u7684\u9898\u89e3\u3002\n\n`0/1 trie`\u5c31\u662f\u7c7b\u4f3c\u4e8e\u6211\u4eec\u505a[\u6700\u957f\u5f02\u6216\u8def\u5f84](https://www.luogu.org/problem/P4551)\u7684\u65f6\u5019\u7528\u7684\u90a3\u4e2a\u4e1c\u897f\uff0c\u5c06\u6570\u5b57\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u63d2\u5230`trie`\u91cc\u9762\u3002\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e0b\u6570\u91cf\uff0c\u63d2\u5165\u65f6\u53ef\u6301\u4e45\u5316\uff0c\u5c31\u80fdAC\u6b64\u9898\u3002\n\n\u672c\u8d28\u4e0a\u5c31\u662f\u53ef\u6301\u4e45\u5316\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6$\\Theta(n\\log x)$\uff0c\u5176\u4e2d$x$\u4e3a\u503c\u57df\u3002\n\n\u9644AC\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\nusing namespace std;\n\nint readint()\n{\n\tchar ch;\n\twhile((ch=getchar())<'0' || ch>'9')\n\t{\n\t\t;\n\t}\n\tint x = ch^'0';\n\twhile((ch=getchar())>='0' && ch<='9')\n\t{\n\t\tx = (x*10)+(ch^'0');\n\t}\n\treturn x;\n}\n\nint rt[200005];\nint ch[2][8000005];\nint num[8000005];\nint top;\n\nvoid ins(int pre,int v,int nxt)\n{\n\t++top;\n\trt[nxt] = top;\n\tint nxtx = top;\n\tint prex = rt[pre];\n\tfor(int p=1<<30; p; p>>=1)\n\t{\n\t\t++top;\n\t\tint chn = !!(v&p);\n\t\tch[chn][nxtx] = top;\n\t\tch[!chn][nxtx] = ch[!chn][prex];\n\t\tnum[ch[chn][nxtx]] = num[ch[chn][prex]]+1;\n\t\tnxtx = ch[chn][nxtx];\n\t\tprex = ch[chn][prex];\n\t}\n}\n\nint query(int l,int r,int k)\n{\n\tint res = 0;\n\tint nowx = rt[r];\n\tint prex = rt[l-1];\n\tfor(int p=1<<30; p; p>>=1)\n\t{\n\t\tif(num[ch[0][nowx]]-num[ch[0][prex]] < k)\n\t\t{\n\t\t\tk -= num[ch[0][nowx]]-num[ch[0][prex]];\n\t\t\tnowx = ch[1][nowx];\n\t\t\tprex = ch[1][prex];\n\t\t\tres += p;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnowx = ch[0][nowx];\n\t\t\tprex = ch[0][prex];\n\t\t}\n\t}\n\treturn res;\n}\n\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tins(i-1,x,i);\n\t}\n\t\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tint l,r,k;\n\t\tscanf(\"%d%d%d\",&l,&r,&k);\n\t\tprintf(\"%d\\n\",query(l,r,k));\n\t}\n}\n```",
        "postTime": 1567249615,
        "uid": 49458,
        "name": "\u6728\u6728\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "# \u4e3b\u5e2d\u6811  \n\u4e0d\u5e26\u4fee\u6539\uff0c\u9759\u6001\u67e5\u8be2\u533a\u95f4\u7b2c$\\;k\\;$\u5c0f\u3002\n\n## \u524d\u7f6e\u829d\u58eb\uff1a\u6743\u503c\u7ebf\u6bb5\u6811   \n&emsp;&emsp;\u6743\u503c\u7ebf\u6bb5\u6811\u662f\u7ef4\u62a4\u4e00\u6bb5\u503c\u57df\u4e0a\u6570\u7684\u4e2a\u6570\u7684\u7ebf\u6bb5\u6811\u3002\u6bcf\u4e2a\u8282\u70b9\u7684$\\;l\\;$\u548c$\\;r\\;$\u8868\u793a~~\u4e00\u4e2a\u533a\u95f4~~\u4e00\u6bb5\u503c\u57df\uff0c\u8282\u70b9\u6743\u503c$\\;sum\\;$\u8868\u793a\u6574\u4e2a\u5e8f\u5217\u4e2d\u843d\u5728\u503c\u57df$\\;[l, r]\\;$\u4e0a\u7684\u6570\u7684\u603b\u4e2a\u6570\u3002  \n&emsp;&emsp;\u4f8b\u5982\uff0c\u6709\u4e00\u4e2a\u5e8f\u5217$\\;\\{1,1,2,3,3,3,4,4\\}\\;$\uff0c\u4e0b\u56fe\u5373\u4e3a\u8fd9\u4e2a\u5e8f\u5217\u5bf9\u5e94\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u3002   \n   \n![](https://i.loli.net/2019/08/10/nkszbqlFRfpjtIw.png)\n \n&emsp;&emsp;\u6839\u8282\u70b9\u8868\u793a\u5e8f\u5217\u4e2d\u503c\u4ecb\u4e8e$\\;1\\sim4\\;$\u4e4b\u95f4\u5171\u6709$\\;8\\;$\u4e2a\u6570\u3002\u6839\u8282\u70b9\u5de6\u5b69\u5b50\u8868\u793a\u5e8f\u5217\u4e2d\u503c\u4ecb\u4e8e$\\;1\\sim2\\;$\u4e4b\u95f4\u5171\u6709$\\;3\\;$\u4e2a\u6570\uff0c\u5176\u4f59\u8282\u70b9\u542b\u4e49\u7c7b\u4f3c\u3002\n\n## \u6b63\u5f0f\u5f00\u59cb  \n  \n### \u8282\u70b9\u5b9a\u4e49\n\u8282\u70b9\u5e26\u4e09\u4e2a\u4fe1\u606f\uff0c$\\;l\\;$\u4e3a\u503c\u57df\u5de6\u7aef\u70b9\uff0c$\\;r\\;$\u4e3a\u503c\u57df\u53f3\u7aef\u70b9\uff0c$\\;sum\\;$\u4e3a\u503c\u57df\u4e0a\u6570\u7684\u4e2a\u6570\u3002$\\;root[\\;]\\;$\u4e3a\u6bcf\u4e2a\u5386\u53f2\u7248\u672c\u7684\u6839\u8282\u70b9\u4e0b\u6807\u3002$\\;a[\\;]\\;$\u4e3a\u539f\u5e8f\u5217\u3002\u5168\u5c40$\\;cnt\\;$\u4e3a\u8282\u70b9\u603b\u4e2a\u6570\u3002\n```cpp\n#define sum(p) t[p].sum\n#define l(p) t[p].l\n#define r(p) t[p].r\n\nusing namespace std;\n\nconst int N = 200000 + 10;\n\nint cnt;\n\nstruct SegmentTree\n{\n\tint l, r, sum;\n};\n\nSegmentTree t[N * 40];\nint a[N];\nint root[N];\n```\n### \u63d2\u5165\u65b0\u6570  \n$\\;l, r\\;$\u4e3a\u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7ef4\u62a4\u7684\u503c\u57df\u5de6\u53f3\u7aef\u70b9\uff0c$\\;pre\\;$\u4e3a\u63d2\u5165\u524d\u4e0a\u4e00\u7248\u672c\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u4e0b\u6807\u3002$\\;now\\;$\u4e3a\u5f53\u524d\uff08\u65b0\u7684\u5f85\u63d2\u5165\uff09\u8282\u70b9\u4e0b\u6807\uff0c$\\;v\\;$\u4e3a\u5f85\u63d2\u5165\u503c\u3002\u6bcf\u6b21\u63d2\u5165\uff0c\u5148\u5c06\u4e0a\u4e00\u7248\u672c\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u62f7\u8d1d\u8fc7\u6765\uff0c\u4e4b\u540e\u518d\u4fee\u6539\u53d1\u751f\u53d8\u5316\u7684\u4fe1\u606f\uff08\u5373$\\;sum\\;$\u503c\uff09\u3002\u7136\u540e\u6839\u636e$\\;v\\;$\u51b3\u5b9a\u5411\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\u9012\u5f52\u4fee\u6539\u3002\u8be6\u89c1\u6ce8\u91ca\u3002\u9644\u56fe\u662f\u5728\u521a\u521a\u7684\u4f8b\u5b50\u4e2d\u65b0\u63d2\u5165$\\;4\\;$\u540e\u7684\u60c5\u51b5\uff0c\u84dd\u8272\u90e8\u5206\u548c\u4e0a\u4e00\u7248\u672c\u672a\u66f4\u6539\u90e8\u5206\u6784\u6210\u65b0\u7248\u672c\u7ebf\u6bb5\u6811\u3002\n![1.png](https://i.loli.net/2019/08/10/vCB6MYbyFg1L9t4.png)\n```cpp\nvoid Insert(int l, int r, int pre, int& now, int v)\n{\n    //\u62f7\u8d1d\u4e0a\u4e00\u7248\u672c\n\tt[++cnt] = t[pre];\n\t//\u4fee\u6539\u5f53\u524dnow\u4e3a\u5df2\u7ecf\u5206\u914d\u5230\u7684cnt\n\tnow = cnt;\n\t//\u7531\u4e8e\u4ece\u4e0a\u5c42\u9012\u5f52\u6765\u7684\uff0cv\u4e00\u5b9a\u5c5e\u4e8e\u5f53\u524d\u8282\u70b9\u63a7\u5236\u7684\u533a\u95f4\uff0csum++\n\tsum(now)++;\n\t//\u8bbf\u95ee\u5230\u4e86\u53f6\u5b50\u8282\u70b9\n\tif (l == r)\n\t{\n\t\treturn;\n\t}\n\t//\u6839\u636e\u503c\u5f52\u5c5e\u5de6\u534a\u533a\u95f4\u8fd8\u662f\u53f3\u534a\u533a\u95f4\u9012\u5f52\u4fee\u6539\n\tint mid = (l + r) >> 1;\n\tif (v <= mid)\n\t{\n\t\tInsert(l, mid, l(pre), l(now), v);\n\t}\n\telse\n\t{\n\t\tInsert(mid + 1, r, r(pre), r(now), v);\n\t}\n}\n```\n\u5bf9\u5e94\u7684\u4e3b\u51fd\u6570\u4e2d\uff1a\n```cpp\n//\u7531\u4e8e\u6743\u503c\u503c\u57df\u592a\u5927\u96be\u4ee5\u7ef4\u62a4\uff0c\u5148\u79bb\u6563\u5316\n//v\u4e3avector<int>\nfor (int i = 1; i <= n; i++)\n{\n\tcin >> a[i];\n\tv.push_back(a[i]);\n}\nsort(v.begin(), v.end());\n//\u53bb\u91cd\uff0c\u5e76\u5220\u53bb\u591a\u4f59\uff0c\u52a0\u5feb\u4e8c\u5206\nv.erase(unique(v.begin(), v.end()), v.end());\n\n//\u4f9d\u6b21\u63d2\u5165\nfor (int i = 1; i <= n; i++)\n{\n\tInsert(1, n, root[i - 1], root[i], GetId(a[i]));\n}\n```\n\u5176\u4e2d$\\;GetId\\;$\u51fd\u6570\u8fd4\u56de\u79bb\u6563\u5316\u540e\u7684\u503c\uff1a\n```cpp\ninline int GetId(int x)\n{\n\treturn lower_bound(v.begin(), v.end(), x) - v.begin() + 1;\n}\n```\n### \u67e5\u8be2  \n$\\;l, r\\;$\u4e3a\u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7ef4\u62a4\u7684\u503c\u57df\u5de6\u53f3\u7aef\u70b9\uff0c$\\;L, R\\;$\u4e3a\u7ebf\u6bb5\u6811\u5386\u53f2\u7248\u672c\u5bf9\u5e94\u7684\u6839\u8282\u70b9\u3002$\\;k\\;$\u4e3a\u9700\u8981\u67e5\u8be2\u6392\u7b2c$\\;k\\;$\u7684\u5143\u7d20\u3002\n```cpp\nint Ask(int l, int r, int L, int R, int k)\n{\n    //\u533a\u95f4\u957f\u5ea6\u6536\u7f29\u62101\uff0c\u7b54\u6848\u627e\u5230\n\tif (l == r)\n\t{\n\t\treturn l;\n\t}\n\tint mid = (l + r) >> 1;\n\t//\u9884\u5148\u770b\u4e00\u773c\u6839\u8282\u70b9\u5de6\u5b50\u6811\u5728\u4e24\u4e2a\u7248\u672c\u4e4b\u95f4\u5dee\u4e86\u591a\u5c11\u4e2a\n\t//l_size\u5373\u4e3a\u539f\u5e8f\u5217\u5f85\u67e5\u8be2\u533a\u95f4\u4e2d\u503c\u4ecb\u4e8e[l(R),r(R)]\u4e4b\u95f4\u7684\u6570\u4e2a\u6570\n\t//\u7c7b\u4f3c\u4e8e\u524d\u7f00\u548c\n\tint l_size = sum(l(R)) - sum(l(L));\n    //\u5de6\u5b50\u6811\u8fc7\u5927\n\tif (k <= l_size)\n\t{\n\t    //\u5f80\u5de6\u5b50\u6811\u6536\u7f29\u533a\u95f4\u7ee7\u7eed\u67e5\u8be2\uff0c\u53c2\u6570l(L), l(R)\u4fdd\u8bc1\u4e86\u540c\u6b65\u8bbf\u95ee\u4e24\u4e2a\u5386\u53f2\u7248\u672c\u7ebf\u6bb5\u6811\n\t    //\u5373\u6bcf\u6b21\u53c2\u6570L\u548cR\u90fd\u7ef4\u62a4\u7740\u540c\u4e00\u6bb5\u503c\u57df\n\t\treturn Ask(l, mid, l(L), l(R), k);\n\t}\n\t//\u5de6\u5b50\u6811\u4e0d\u591f\n\telse\n\t{\n\t    //\u540c\u7406\uff0c\u5f80\u53f3\u5b50\u6811\u6536\u7f29\u67e5\u8be2\u8303\u56f4\n\t\treturn Ask(mid + 1, r, r(L), r(R), k - l_size);\n\t}\n}\n```\n\u5bf9\u5e94\u7684\u4e3b\u51fd\u6570\uff1a\n```cpp\nfor (int i = 1; i <= m; i++)\n{\n\tint l, r, k;\n\tcin >> l >> r >> k;\n\t//\u7c7b\u4f3c\u4e8e\u524d\u7f00\u548c\u7684\u505a\u6cd5\uff0c\u4f20\u5165\u7b2cl-1\u7248\u548c\u7b2cr\u7248\u7684\u6839\u8282\u70b9\u4f5c\u4e3aL\u548cR\u7684\u5b9e\u53c2\n\tcout << v[Ask(1, n, root[l - 1], root[r], k) - 1] << endl;\n}\n```\n## \u505a\u6cd5\u6982\u8ff0 \n&emsp;&emsp;\u5efa\u4e00\u68f5\u7a7a\u6811\uff0c\u626b\u63cf\u5e8f\u5217\uff0c\u6bcf\u6b21\u52a8\u6001\u5f00\u70b9\uff0c\u63d2\u5165\u626b\u63cf\u5230\u7684\u65b0\u6570\uff0c\u540c\u65f6\u4fdd\u7559\u63d2\u5165\u524d\u5386\u53f2\u7248\u672c\u4fe1\u606f\u3002    \n&emsp;&emsp;\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u627e\u5230\u533a\u95f4\u5bf9\u5e94\u7684\u4e24\u4e2a\u5386\u53f2\u7248\u672c\u7ebf\u6bb5\u6811\uff0c\u540c\u6b65\u5730\u8bbf\u95ee\u4e24\u68f5\u6811\u7684\u8282\u70b9\uff0c\u6839\u636e\u8282\u70b9\u4fdd\u5b58\u7684$\\;sum\\;$\u503c\uff08\u5373\u5bf9\u5e94\u503c\u57df\u4e0a\u6570\u4e2a\u6570\uff09\u5411\u4e0b\u5c42\u9012\u5f52\u67e5\u627e\u3002\n\n\u9644\u9001~~\u9ad8\u6e05\u65e0\u7801~~AC\u7a0b\u5e8f\u3002\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\n#define sum(p) t[p].sum\n#define l(p) t[p].l\n#define r(p) t[p].r\n\nusing namespace std;\n\nconst int N = 200000 + 10;\n\nint cnt;\n\nstruct SegmentTree\n{\n\tint l, r, sum;\n};\n\nSegmentTree t[N * 40];\nint a[N];\nint root[N];\n\nvoid Insert(int l, int r, int pre, int& now, int v)\n{\n\tt[++cnt] = t[pre];\n\tnow = cnt;\n\tsum(now)++;\n\tif (l == r)\n\t{\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (v <= mid)\n\t{\n\t\tInsert(l, mid, l(pre), l(now), v);\n\t}\n\telse\n\t{\n\t\tInsert(mid + 1, r, r(pre), r(now), v);\n\t}\n}\n\nint Ask(int l, int r, int L, int R, int k)\n{\n\tif (l == r)\n\t{\n\t\treturn l;\n\t}\n\tint mid = (l + r) >> 1;\n\tint l_size = sum(l(R)) - sum(l(L));\n\n\tif (k <= l_size)\n\t{\n\t\treturn Ask(l, mid, l(L), l(R), k);\n\t}\n\telse\n\t{\n\t\treturn Ask(mid + 1, r, r(L), r(R), k - l_size);\n\t}\n}\n\nvector<int> v;\n\ninline int GetId(int x)\n{\n\treturn lower_bound(v.begin(), v.end(), x) - v.begin() + 1;\n}\n\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\n\tint n, m;\n\tcin >> n >> m;\n\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tcin >> a[i];\n\t\tv.push_back(a[i]);\n\t}\n\tsort(v.begin(), v.end());\n\tv.erase(unique(v.begin(), v.end()), v.end());\n\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tInsert(1, n, root[i - 1], root[i], GetId(a[i]));\n\t}\n\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tint l, r, k;\n\t\tcin >> l >> r >> k;\n\t\tcout << v[Ask(1, n, root[l - 1], root[r], k) - 1] << endl;\n\t}\n}\n```",
        "postTime": 1565433723,
        "uid": 159730,
        "name": "Sophon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u4ee5[1..i]\u7684\u524d\u7f00\u5efa\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u8bf4\u6cd5\u53ca\u5176\u4e0d\u51c6\u786e\uff0c\u4e5f\u8bb8\u6709\u5f88\u591a\u521d\u5b66\u8005\u5c31\u5728\u8fd9\u91cc\u61f5\u6389\u4e86\u3002\u5e94\u8be5\u8bf4\u662f\u4ee5\u524di\u4e2a\u6570\u5728[1..n]\u4e2d\u91cd\u65b0\u5efa\u7acb\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6743\u503c\u4fdd\u5b58\u7684\u662f\u5927\u5c0f\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u7684\u4e2a\u6570\uff0c\u7136\u540e\u6c42\u7b2ck\u5c0f\u5c31\u662f\u5e73\u8861\u6811\u6c42\u7b2ck\u7684\u64cd\u4f5c\u4e86\u3002\u56e0\u4e3a\u76f4\u63a5\u5efan\u4e2a\u7ebf\u6bb5\u6811\u7edd\u5bf9MLE\uff0c\u6240\u4ee5\u8981\u53ef\u6301\u4e45\u5316\u4e00\u4e0b\uff0c\u5c31\u662f\u628a\u6743\u503c\u76f8\u540c\u7684\u540c\u4e00\u4e2a\u533a\u95f4\u76f4\u63a5\u7528\u6307\u9488\u4f20\u9012\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\n\u60f3\u66f4\u8be6\u7ec6\u5b66\u4e60\u4e00\u4e0b\u4e3b\u5e2d\u6811\u53ca\u5176\u62d3\u5c55\u7684\u53ef\u4ee5\u53c2\u89c1\u6211\u7684\u535a\u5ba2\uff1ahttp://blog.csdn.net/no1\\_terminator/article/category/6229193\n\n\n\u5176\u4e2d\u5c06\u4e3b\u5e2d\u6811\u7684\u57fa\u7840\u90e8\u5206\u5206\u6210\u4e24\u5757\u3002\u81ea\u6211\u611f\u89c9\u603b\u7ed3\u7684\u8fd8\u597d\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff08\u63d0\u4ea4\u4ee3\u7801\u65f6\u52a1\u5fc5\u5c06\u8bed\u8a00\u8c03\u6210C++\uff0c\u800cC++11\u4f1a\u7f16\u8bd1\u9519\u8bef\uff09\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=210000;\nint n,m,T_cnt;\nstruct Node{\n    int l,r,sum;\n}T[N*60];\nint rank[N],root[N];\nstruct A{\n    int x,idx;\n    bool operator < (const A &rhs) const {\n        return x<rhs.x;\n    }\n}a[N];\nvoid insert(int &num,int &x,int l,int r){\n    T[T_cnt++]=T[x];x=T_cnt-1;\n    ++T[x].sum;\n    if (l==r)return;\n    int mid=(l+r)>>1;\n    if (num<=mid)insert(num,T[x].l,l,mid);\n    else insert(num,T[x].r,mid+1,r);\n}\nint query(int i,int j,int k,int l,int r){\n    if (l==r)return l;\n    int t=T[T[j].l].sum-T[T[i].l].sum;\n    int mid=(l+r)>>1;\n    if (k<=t)return query(T[i].l,T[j].l,k,l,mid);\n    else return query(T[i].r,T[j].r,k-t,mid+1,r);\n}\nint main(){\n    T[0].l=T[0].r=T[0].sum=0;\n    root[0]=0;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++){\n        scanf(\"%d\",&a[i].x);\n        a[i].idx=i;\n    }\n    sort(a+1,a+n+1);\n    for (int i=1;i<=n;i++)rank[a[i].idx]=i;\n    T_cnt=1;\n    for (int i=1;i<=n;i++){\n        root[i]=root[i-1];\n        insert(rank[i],root[i],1,n);\n    }\n    while (m--){\n        int i,j,k;\n        scanf(\"%d%d%d\",&i,&j,&k);\n        printf(\"%d\\n\",a[query(root[i-1],root[j],k,1,n)].x);\n    }\n    return 0;\n}\n```",
        "postTime": 1503819733,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u60f3\u8981\u66f4\u4e30\u5bcc\u7684\u5c55\u793a\uff0c\u8bf7\u70b9\u51fb[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/nth-element/p/11785026.html)\n\n***\n\n\u82e5\u60f3\u8981\u6df1\u5165\u5b66\u4e60\u4e3b\u5e2d\u6811\uff0c[\u4f20\u9001\u95e8]( https://www.cnblogs.com/nth-element/p/11755820.html )\u3002\n\n***\n\n**Description**:\n\n\u7ed9\u5b9a\u6570\u5217 $\\{a_n\\}$ ,\u6c42\u95ed\u533a\u95f4 $[l,r]$ \u7684\u7b2c $k$ \u5c0f\u7684\u6570\u3002\n\n**Method**:\n\n\u5148\u5bf9\u6570\u636e\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u7136\u540e\u6309\u7167\u6743\u503c\u5efa\u7acb\u7ebf\u6bb5\u6811\u3002\n\n\u82e5\u8981\u5bfb\u627e $[1,p]$ \u7684\u7b2c $k$  \u5c0f\uff0c\u5219\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5904\u7406\u3002\u5b9a\u4e49$Son_{left}$ \u8868\u793a\u5de6\u513f\u5b50\u7684\u96c6\u5408\uff0c$Son_{right}$ \u8868\u793a\u53f3\u513f\u5b50\u7684\u96c6\u5408\u3002\u82e5 $|Son_{left}|\\ge k$ \u65f6\uff0c\u8bf4\u660e\u7b2c$k$\u5c0f\u7684\u6570\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u4ee5\u5de6\u513f\u5b50\u4e3a\u65b0\u7684\u6839\u5411\u4e0b\u9012\u5f52\u66f4\u65b0\uff0c\u5bfb\u627e\u5de6\u5b50\u6811\u4e2d\u7b2c $k$ \u5c0f\u7684\u6570\uff1b\u53cd\u4e4b\uff0c\u8bf4\u660e\u7b2c$k$\u5c0f\u7684\u6570\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u4ee5\u5de6\u513f\u5b50\u4e3a\u65b0\u7684\u6839\u5411\u4e0b\u9012\u5f52\u66f4\u65b0\uff0c\u5bfb\u627e\u5de6\u5b50\u6811\u4e2d\u7b2c $k-|Son_{left}|$ \u5c0f\u7684\u6570\u3002\n\n\u62d3\u5c55\u4e00\u4e0b\uff0c\u6211\u4eec\u5148\u9884\u5904\u7406\u5efa\u6811\uff0c\u5f97\u5230 $n+1$ \u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff08\u5305\u62ec\u521d\u59cb\u7684\u7ebf\u6bb5\u6811\uff09\uff0c\u7f16\u53f7\u4e3a $0 \\sim n$ \u3002\n\n\u524d\u6587\u63d0\u5230\u8fc7\uff0c\u4e3b\u5e2d\u6811\u6ee1\u8db3\u524d\u7f00\u548c\u67e5\u8be2\u7684\u601d\u60f3\uff0c\u6545\u6211\u4eec\u8981\u6c42 $[l,r]$ \u7684\u7b2c $k$ \u5c0f\u503c\uff0c\u5373\u53ef\u7528`sum[r]-sum[l-1]`\u3002\n\n**Code**:\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long \n#define Maxn 200010\nusing namespace std;\ninline void read(int &x)\n{\n    int f=1;x=0;char s=getchar();\n    while(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n    while(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n    x*=f;\n}\nint n,m;\nstruct Segtree\n{\n    int ls,rs,sum;\n}tree[Maxn<<5];\nint rt[Maxn];\nint a[Maxn],ins[Maxn]; \nint len,tot=0;\ninline void Init(){tot=0;}\ninline int getid(const int &x)\n{\n    return lower_bound(ins+1,ins+len+1,x)-ins;\n}\ninline void pushup(int rt)\n{\n    tree[rt].sum=tree[tree[rt].ls].sum+tree[tree[rt].rs].sum;\n}\ninline int build(int l,int r)\n{\n    int rt=++tot;\n    if(l==r) \n    {\n        tree[rt].sum=0;\n        return rt;\n    }\n    int mid=(l+r)/2;\n    tree[rt].ls=build(l,mid);\n    tree[rt].rs=build(mid+1,r);\n    pushup(rt);\n    return rt;\n}\nint update(int k,int l,int r,int root,int val)\n{\n    int rt=++tot;\n    tree[rt]=tree[root];\n    if(l==k&&r==k)\n    {\n        tree[rt].sum+=val;\n        return rt;\n    }\n    int mid=(l+r)/2;\n    if(k<=mid) tree[rt].ls=update(k,l,mid,tree[rt].ls,val);\n    else tree[rt].rs=update(k,mid+1,r,tree[rt].rs,val);\n    pushup(rt);\n    return rt;\n}\nint query(int u,int v,int l,int r,int k)\n{\n    if(l==r) return l;\n    int mid=(l+r)/2,x=tree[tree[v].ls].sum-tree[tree[u].ls].sum;\n    if(k<=x) return query(tree[u].ls,tree[v].ls,l,mid,k);\n    else return query(tree[u].rs,tree[v].rs,mid+1,r,k-x);\n}\nsigned main()\n{\n    Init();\n    read(n),read(m);\n    for(int i=1;i<=n;i++)\n    {\n        read(a[i]);\n    }\n    memcpy(ins,a,sizeof(ins));\n    sort(ins+1,ins+n+1);\n    len=unique(ins+1,ins+n+1)-ins-1;\n    rt[0]=build(1,len);\n    for(int i=1;i<=n;i++)\n    {\n        rt[i]=update(getid(a[i]),1,len,rt[i-1],1);\n    }\n    while(m--)\n    {\n        int l,r,k;\n        read(l),read(r),read(k);\n        printf(\"%lld\\n\",ins[query(rt[l-1],rt[r],1,len,k)]);\n    }\n    return 0;\n}\n```\n\n**Warning**:\n\n   - `ls[]`,`rs[]`,`sum[]`\u7b49\u6570\u7ec4\u90fd\u8981\u4e58\u4e0a $2^5$ \u3002\n   - \u79bb\u6563\u5316\u53d6`lower_bound`\u65f6\uff0c\u662f\u6700\u540e\u51cf\u53bb0\u5f00\u5934\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f1\u5f00\u5934\u7684\u5730\u5740\u3002\uff08\u5373\u662f`lower_bound(ins+1,ins+n+1,x)-ins`\uff0c\u800c\u4e0d\u662f`lower_bound(ins+1,ins+n+1,x)-ins-1`\uff09\n   - \u67e5\u8be2\u65f6\u9012\u5f52\u53f3\u5b50\u6811\u65f6\u67e5\u627e\u7b2c $k-|Son_{left}|$ \u5c0f\uff0c\u800c\u4e0d\u662f $k$ \u5c0f\u3002\n\n",
        "postTime": 1572717923,
        "uid": 77131,
        "name": "nth_element",
        "ccfLevel": 5,
        "title": "P3834\u9898\u89e3"
    },
    {
        "content": "# \u524d\u8a00\uff1a\n\u4e3b\u5e2d\u6811\u5148\u51b3\u6761\u4ef6\uff1a\u7ebf\u6bb5\u6811\n\n# \u524d\u8a00\u548c\u6b63\u9898\u4e4b\u95f4\u7684~~BB~~\u9898\u5916\u8bdd\uff1a\n\u4e00\u76f4\u542c\u95fb\u4e3b\u5e2d\u6811\u7684\u5927\u540d\uff0c\u4f46\u7531\u4e8eLZ\u592a\u83dc\uff0c\u4e0d\u6562\u53bb\u5b66\u3002\n\n\u5927\u524d\u5929\u665a\u4e0a\u5b9b\u82e5\u62bd\u98ce\u822c\u5730\u7761\u4e0d\u7740\uff0c\u4e8e\u662f\u722c\u8d77\u6765\u5b66\u4e3b\u5e2d\u6811\uff0c\u7ed3\u679c\u770b\u7f51\u4e0a\u7684\u8fa3\u9e21\u9898\u89e3\uff0c\u521a\u5230\u51cc\u66684\u70b9\u4e5f\u6ca1\u770b\u61c2\n\n\u540e\u6765\u76f4\u63a5\u770b\u4e86\u4ee3\u7801\u5c31\u61c2\u4e86~~WTF~~\n\n# \u6b63\u9898\uff1a~~WOC\uff0c\u7adf\u7136\u624d\u5f00\u59cb\u6b63\u9898~~\n\n\u53ef\u6301\u4e45\u5316\u662f\u6307\u5179\u78c1\u67e5\u8be2\u5386\u53f2\u7248\u672c\u3002\n\n\u7ebf\u6bb5\u6811\u9700\u8981\u67e5\u8be2\u5386\u53f2\u7248\u672c\uff0c\u6700\u7b80\u5355\u7684\u601d\u8def\u5c31\u662f\u5efa\u591a\u9897\u7ebf\u6bb5\u6811\uff0c\u4f46\u592a\u6d6a\u8d39\u7a7a\u95f4~~\u4e00\u9897\u5c31\u662f4\u500d\u7a7a\u95f4\u4f60\u4ee5\u4e3a\u662f\u5047\u7684\u5417~~\n\n\u4e8e\u662f\u7ecf\u8fc7\u89c2\u5bdf\uff0c\u4e0d\u96be\u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u65f6\uff0c\u53ea\u4f1a\u6539\u53d8\u70b9\u5230\u6839\u8282\u70b9\u4e0a\u4e00\u6761\u94fe\u7684\u6570\u636e\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u65b0\u5efa\u4e00\u6761\u94fe\u4e0a\u7684\u70b9\uff0c\u5c06\u8fd9\u4e9b\u70b9\u8fde\u5230\u6811\u4e0a\u3002\n\n\u4e5f\u5c31\u662f\u601d\u8def\u53d8\u6210\u4e86\u8fd9\u6837\uff1a\n![1.PNG](https://i.loli.net/2018/08/27/5b83938b21d7c.png)\n\n\u6709\u70b9\u61f5\uff1f\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5c06\u4e24\u9897\u7ebf\u6bb5\u6811\u503c\u76f8\u540c\u7684\u8282\u70b9\u5408\u5e76\u4e86\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230O(logn)\u4fee\u6539\u548c\u67e5\u8be2\u4e86\n\n----------------\n\n\u533a\u95f4\u7b2cK\u5927\u662f\u4e2a\u7ecf\u5178\u7684\u4e3b\u5e2d\u6811\u4f8b\u9898\u3002\n\n\u89e3\u9898\u601d\u8def\uff1a\n- \u5c06\u539f\u672ca\u6570\u7ec4\u4e2d\u7684\u503c\u79bb\u6563\u5316\u5230b\u6570\u7ec4\u4e2d\n- \u5efa\u7248\u672c0\u7684\u7a7a\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u5f53\u524d\u7248\u672c\u4e2db[l]~b[r]\u4e2d\u6709\u51e0\u4e2a\u6570\n- \u5efai\u4e2a\u7248\u672c\uff0c\u82e5a[i]\u5bf9\u5e94b[j]\uff0c\u6bcf\u4e2a\u7248\u672c\u4fee\u6539\u4e3b\u5e2d\u6811\u4e2d\u8868\u793ab[j]~b[j]\u7684\u70b9~~\u6709\u70b9\u62bd\u8c61~~\n\n```cpp\ninline int xg(int pre,int l,int r,int zone)\n{\n\tint bj=++tot;\n\ttree[bj].l=tree[pre].l;\n\ttree[bj].r=tree[pre].r; //\u521d\u59cb\u5316\u4e3a\u4e0d\u9700\u8981\u65b0\u5efa\n\ttree[bj].value=tree[pre].value+1; \n\tint mid=(l+r)/2;\n\tif(l<r)\n\t\tif(zone<=mid)\n\t\t\ttree[bj].l=xg(tree[pre].l,l,mid,zone); //\u5de6\u513f\u5b50\u9700\u8981\u65b0\u5efa\n\t\telse\n\t\t\ttree[bj].r=xg(tree[pre].r,mid+1,r,zone); //\u7c7b\u4f3c\n\treturn bj;\n}\n```\n- \u67e5\u8be2\u65f6\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u76f8\u51cf\u5c31\u80fd\u5f97\u51fa\u533a\u95f4\u5185\u5728b\u6570\u7ec4\u533a\u95f4\u5185\u7684\u4e2a\u6570\n\n```cpp\ninline int cx(int from,int to,int l,int r,int k)\n{\n\tif(l==r)\n\t\treturn l;\n\tint x=tree[tree[to].l].value-tree[tree[from].l].value; //\u76f8\u51cf\u5f97\u5230a\u6570\u7ec4\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u7684\u6570\u6709\u51e0\u4e2a\u5728b[l]~b[r]\u4e4b\u95f4\n\tint mid=(l+r)/2;\n\tif(x>=k)    //\u56e0\u4e3a\u8981\u6c42\u7b2ck\u5c0f\uff0c\u6240\u4ee5\u5224\u65ad\u5de6\u513f\u5b50\u4e0ek\u7684\u5927\u5c0f\u5173\u7cfb\n\t\treturn cx(tree[from].l,tree[to].l,l,mid,k);\n\telse\n\t\treturn cx(tree[from].r,tree[to].r,mid+1,r,k-x);\n}\n```\n\n\u4e0b\u9762\u7ed9\u51faAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<iomanip>\n#include<cstring>\n#include<algorithm>\n#include<ctime>\n#define ll long long\nusing namespace std;\ninline ll read()\n{\n\tll kkk=0;\n\tint x=1;\n\tchar c=getchar();\n\twhile(c<'0' || c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tx=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0' && c<='9')\n\t\tkkk=(kkk<<3)+(kkk<<1)+(c-'0'),c=getchar();\n\treturn kkk*x;\n}\nint n,q,m,T[200001],tot,a[200001],b[200001];\nstruct sb\n{\n\tint l,r,value;\n}tree[8000001];\ninline int build(int l,int r)\n{\n\tint bj=++tot;\n\ttree[bj].value=0;\n\tint mid=(l+r)/2;\n\tif(l<r)\n\t{\n\t\ttree[bj].l=build(l,mid);\n\t\ttree[bj].r=build(mid+1,r);\n\t}\n\treturn bj;\n}\ninline int xg(int pre,int l,int r,int zone)\n{\n\tint bj=++tot;\n\ttree[bj].l=tree[pre].l;\n\ttree[bj].r=tree[pre].r;\n\ttree[bj].value=tree[pre].value+1;\n\tint mid=(l+r)/2;\n\tif(l<r)\n\t\tif(zone<=mid)\n\t\t\ttree[bj].l=xg(tree[pre].l,l,mid,zone);\n\t\telse\n\t\t\ttree[bj].r=xg(tree[pre].r,mid+1,r,zone);\n\treturn bj;\n}\ninline int cx(int from,int to,int l,int r,int k)\n{\n\tif(l==r)\n\t\treturn l;\n\tint x=tree[tree[to].l].value-tree[tree[from].l].value;\n\tint mid=(l+r)/2;\n\tif(x>=k)\n\t\treturn cx(tree[from].l,tree[to].l,l,mid,k);\n\telse\n\t\treturn cx(tree[from].r,tree[to].r,mid+1,r,k-x);\n}\nint main()\n{\n\tn=read(),q=read();\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\ta[i]=read();\n\t\tb[i]=a[i];\n\t}\n\tsort(b+1,b+n+1);\n\tm=unique(b+1,b+n+1)-b-1;\n\tT[0]=build(1,m);\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tint t=lower_bound(b+1,b+1+m,a[i])-b;\n\t\tT[i]=xg(T[i-1],1,m,t);\n\t}\n\tfor(register int i=1;i<=q;++i)\n\t{\n\t\tint l=read(),r=read(),k=read();\n\t\tint t=cx(T[l-1],T[r],1,m,k);\n\t\tprintf(\"%d\\n\",b[t]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1535208472,
        "uid": 36933,
        "name": "zhy12138",
        "ccfLevel": 9,
        "title": "\u4e3b\u5e2d\u6811"
    },
    {
        "content": "## \u6709\u6ce8\u91ca\u7684\u4ee3\u7801 by zkj\n\n```\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#define il inline\n#define rg register\n#define ll long long\n#define N 500010\n#define inf 2147483647\nusing namespace std;\n\nint n,m,cnt;\nint u,v,k;\nint rank[N];\nstruct Num{\n\tint val,idx;\n}num[N];\nstruct Tre{\n\tint ls,rs,val;\n}te[N*20];\n//\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b69\u5b50\uff0c\u53f3\u5b69\u5b50\n//\u4ee5\u53ca\u5728\u5f53\u524d\u533a\u95f4\u7684\u6570\u4e2a\u6570\nint root[N];//\u8868\u793a\u6839\u7684\u7f16\u53f7\nil void re(rg int &x);\nint Cmp(const Num &x,const Num &y);\nvoid update(rg int le,rg int ri,rg int p,rg int &now){\n//\u8868\u793a\u9700\u8981\u65b0\u5efa\u8282\u70b9\u7684le \u65b0\u5efa\u8282\u70b9\u7684ri \u65b0\u5efa\u8282\u70b9\u8981\u52a0\u5165\u7684\u6570p\n//\u5f53\u524d\u6240\u5728\u8282\u70b9\u4f4d\u7f6enow\n//now\u662f\u8981\u968f\u7740\u51fd\u6570\u6539\u53d8\u7684 \u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5728\u9012\u5f52\u4e2d\u6539\u53d8\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\n    te[++cnt]=te[now];\n\t//\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u5c06\u4e0a\u4e00\u7248\u672c\u7684\u6839\u8282\u70b9kuai\u8fc7\u6765\n\tnow=cnt;\n\tte[now].val++;\n\tif(le==ri)return;\n\trg int mid=((le+ri)>>1);\n\tif(p<=mid)update(le,mid,p,te[now].ls);\n\telse update(mid+1,ri,p,te[now].rs);\n\t//\u540c\u6837\u7684 \u6211\u4eec\u5728\u63a5\u4e0b\u6765\u7684\u8c03\u7528\u4e2d\u4e5f\u8981\u6539\u53d8\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u53f3\u5b69\u5b50\n\t//\u4e5f\u5c31\u662f\u52a8\u6001\u5f00\u70b9\n}\n//\u5728update\u51fd\u6570\u4e2d \u6bcf\u6b21\u5728main\u51fd\u6570\u91cc\u8c03\u7528\u6211\u4eec\u4f1a\u53d1\u73b0\n//\u5f00\u70b9\u7684\u6b21\u6570\u4e3alogn\uff0c\u56e0\u4e3a\u5728\u7ebf\u6bb5\u6811\u91cc\u7684\u5355\u70b9\u4fee\u6539\u90fd\u53ea\u4f1a\n//\u7ecf\u5386\u4e00\u6b21\u4ece\u4e0a\u5230\u4e0b\u7684\u8def\u7a0b\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u65b0\u5f00\u7ebf\u6bb5\u6811\u4e5f\u5c31\u53ea\u6709\u4e00\u6761\u94fe\n//\u4ed4\u7ec6\u60f3\u60f3\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5982\u679c\u6211\u4eec\u65b0\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u5de6\u53f3\u5b69\u5b50\u90fd\u4f1a\n//\u7ee7\u627f\u4e0a\u4e00\u9897\u7ebf\u6bb5\u6811\u7684\u4f4d\u7f6e\uff08te[++cnt]=te[now]\uff09\n//\u800c\u6b64\u65f6\u6211\u4eec\u52a0\u5165p\u4e4b\u540e\uff0c\u5047\u8bbe\u9012\u5f52\u7684\u662f\u5de6\u5b69\u5b50\uff0c\u90a3\u4e48\u53ea\u6709\u5de6\u5b69\u5b50\u7684\n//\u503c\u4f1a\u88ab\u6539\u52a8\uff0c\u800c\u53f3\u5b69\u5b50\u4ecd\u7136\u7ee7\u627f\u7684\u662f\u4e0a\u4e00\u9897\u7ebf\u6bb5\u6811\u7684\u503c\n//\u8fd9\u6837 \u7a7a\u95f4\u590d\u6742\u5ea6\u505a\u5230\u4e86nlogn\nint query(rg int le,rg int ri,rg int i,rg int j,rg int k){\n//i\u548cj\u90fd\u662f\u4e24\u9897\u7ebf\u6bb5\u6811\u7684\u7f16\u53f7\uff0c\u7248\u672c\u4e0d\u540c\u800c\u5df2\n//\u4f46\u662f\u4e24\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684le\u548cri\u662f\u76f8\u540c\u7684\n\tif(le==ri)return le;\n\trg int F=te[te[j].ls].val-te[te[i].ls].val;\n\trg int mid=((le+ri)>>1);\n\t//F\u8868\u6b7bj\u5de6\u5b69\u5b50\u7684\u503c\u4e0ei\u5de6\u5b69\u5b50\u7684\u503c\u7684\u5dee\n\t//\u8981\u77e5\u9053 ij\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u540c\uff0c\u8fd9\u91cc\u7528\u5230\u7684\u662f\u524d\u7f00\u548c\u7684\u601d\u60f3\n\t//\u5982\u679c\u5de6\u5b69\u5b50\u7684\u4e2a\u6570\u5dee\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8ek\u4e86\uff0c\u662f\u4e0d\u662f\u7b2ck\u5927\u5c31\u4e00\u5b9a\u5728\u5de6\u5b69\u5b50\u4e2d\uff1f\n\tif(k<=F)return query(le,mid,te[i].ls,te[j].ls,k);\n\telse return query(mid+1,ri,te[i].rs,te[j].rs,k-F);\n\t//\u8fd9\u91cc\u8981\u7b97\u4e0aF\u7684\u8d21\u732e\n}\nint main(){\n\tfreopen(\"s.in\",\"r\",stdin);\n\tre(n),re(m);\n\tfor(rg int i=1;i<=n;++i)\n\t\tre(num[i].val),num[i].idx=i;\n\tsort(num+1,num+n+1,Cmp);\n\tfor(rg int i=1;i<=n;++i)\n\t\trank[num[i].idx]=i;\n\t//\u503c\u57df\u7ebf\u6bb5\u6811\u7684\u79bb\u6563\u5316\n\t//rank[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u6570\u7684\u6392\u540d\u5927\u5c0f\n\t//\u4e5f\u5c31\u662f\u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c\n\tfor(rg int i=1;i<=n;++i){\n\t\troot[i]=root[i-1];\n\t\t//\u5c06\u4e0a\u4e00\u9897\u6811\u7684\u8282\u70b9\u7f16\u53f7\u6682\u65f6\u8d4b\u503c\u8fc7\u6765\n\t\tupdate(1,n,rank[i],root[i]);\n\t\t//\u65b0\u5efa\u4e00\u9897\u4ece1\u5230n\u7684\u7ebf\u6bb5\u6811\n\t\t//\u6211\u4eec\u8981\u52a0\u5165\u7684\u503c\u4e3a\u6807\u53f7i\u7684\u79bb\u6563\u5316\u540e\u7684\u503c\n\t\t//\u4eceroot[i]\u5f00\u59cb\u52a0\u5165\n\t}\n\tfor(rg int i=1;i<=m;++i){\n\t\tre(u),re(v),re(k);\n\t\tprintf(\"%d\\n\",num[query(1,n,root[u-1],root[v],k)].val);\n\t}\n\t//\u5bf9\u4e0e\u5de6\u53f3\u7aef\u70b9u\u548cv\u7684\u533a\u95f4\u67e5\u8be2\u7b2ck\u5927\n\t//\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u77e5\u9053\u5b83\u79bb\u6563\u5316\u8fc7\u540e\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\n\t//\u6ce8\u610fnum\u662f\u5df2\u7ecfsort\u8fc7\u540e\u7684 \u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528num[p]\u4ee3\u8868\u6392\u540d\u4e3ap\u7684\u503c\n\t//\u6211\u4eec\u8981\u627eu\u5230v\u7684\u533a\u95f4\uff0c\u662f\u4e0d\u662f\u5c31\u662f1\u5230(u-1)\u548c1\u5230v\u6240\u65b0\u589e\u7684\u6570\u4e2d\u6392\u540d\u4e3ap\u7684\u6570\uff1f\n\treturn 0;\n}\n\nil void re(rg int &x){\n    rg int res=0;rg int w=1;char c=getchar();\n    while((c<'0'||c>'9')&&c!='-')c=getchar();\n    if(c=='-')w=-1,c=getchar();\n    while(c>='0'&&c<='9')res=(res<<3)+(res<<1)+c-'0',c=getchar();\n    x=w*res;\n}\nint Cmp(const Num &x,const Num &y){\n\treturn x.val<y.val;\n}\n\n```",
        "postTime": 1522824493,
        "uid": 66915,
        "name": "Tyher",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\u8fd9\u7bc7\u6587\u7ae0\u8be6\u7ec6\u5730\u4ecb\u7ecd\u4e86\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u90e8\u5206\u56fe\u7247\u5c3a\u5bf8\u8fc7\u5927\uff0c\u5efa\u8bae\u5355\u51fb\u56fe\u7247\u653e\u5927\u89c2\u770b\u3002\u8f6c\u8f7d\u6b64\u6587\u7ae0\u7684\u4efb\u4f55\u90e8\u5206\u5747\u9700\u6ce8\u660e\u51fa\u5904\u3002\n\n## 1 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\n### 1.1 \u95ee\u9898\u5f15\u5165\n\u60a8\u9700\u8981\u5199\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6570\u5217 $a[1...N]$\uff0c\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u8f93\u5165 `l r k`\uff08$l\\leq r,k\\leq r-l+1$\uff09\uff0c\u6c42 $a[l...r]$ \u4e2d\u7b2c $k$ \u5c0f\u7684\u6570\u3002\n\n\u8fd9\u5c31\u662f\u7ecf\u5178\u7684 \u201c\u9759\u6001\u533a\u95f4\u7b2c k \u5c0f\u201d \u95ee\u9898\u3002\n\n**\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811**\uff08Persistent Segment Tree\uff09\u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5728\u5b66\u4e60\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u65f6\uff0c\u6211\u4eec\u9996\u5148\u8981\u4e86\u89e3\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n### 1.2 \u6743\u503c\u7ebf\u6bb5\u6811\n\u6743\u503c\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u7ef4\u62a4\u503c\u800c\u975e\u4e0b\u6807\u7684\u7ebf\u6bb5\u6811\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\uff0c\u6709\u65f6\u4e5f\u88ab\u79f0\u4f5c \u201c\u503c\u57df\u7ebf\u6bb5\u6811\u201d\u3002\n\n\u8bbe $x$ \u662f\u4e00\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u5b83\u7ef4\u62a4\u7684\u533a\u95f4\u662f $[x.l,x.r]$\uff0c\u6570\u636e\u662f $x.d$\uff0c\u5219\u5b83\u8868\u793a\u7684\u610f\u601d\u662f\uff1a\u539f\u6570\u7ec4\u4e2d\uff0c\u503c\u5728\u533a\u95f4 $[x.l,x.r]$ \u5185\u7684\u6570\u4e00\u5171\u6709 $x.d$ \u4e2a\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\u3002\u6709\u4e00\u4e2a\u6570\u7ec4 $a[]=\\{1,5,3,8\\}$\uff0c\u5219\u5b83\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u662f\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191101151343422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdIYW81,size_16,color_FFFFFF,t_70)\n\u6743\u503c\u7ebf\u6bb5\u6811\u53ef\u4ee5\u89e3\u51b3\u6574\u4e2a\u533a\u95f4\u7684\u67e5\u8be2\u95ee\u9898\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53 $l=1,r=N$ \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u6c42\u89e3\u4e86\u3002\n\n\u90a3\u5982\u679c $l\\neq1$ \u6216 $r\\neq N$\uff0c\u6211\u4eec\u53c8\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u4e00\u79cd\u5f88\u663e\u7136\u7684\u60f3\u6cd5\u5c31\u662f\uff0c\u6211\u5efa $\\frac {N(N+1)}2$ \u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c$\\forall 1\\leq l\\leq r\\leq N$\uff0c\u6211\u90fd\u5efa\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4 $a[l...r]$\u3002\u8fd9\u6837\u505a\u7684\u8bdd\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $T(N^3)$\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002\u800c\u4e14\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5149\u662f\u5efa\u6811\u5c31\u4f1a\u5bfc\u81f4\u8d85\u65f6\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u662f\u53ef\u52a0\u51cf\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u53ef\u4ee5\u53ea\u5f00 $N$ \u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7b2c $i$ \u68f5\u7ef4\u62a4 $a[1...i]$ \u8303\u56f4\u7684\u6570\uff08\u8fd9\u91cc\u7528\u4e86\u524d\u7f00\u548c\u601d\u60f3\uff09\u3002\u5982\u679c\u67e5\u8be2 $[l,r]$ \u533a\u95f4\uff0c\u5c31\u7528\u7b2c $r$ \u68f5\u6811\u51cf\u53bb\u7b2c $l-1$ \u68f5\u6811\u5373\u53ef\u3002\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191101154442137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdIYW81,size_16,color_FFFFFF,t_70)\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(N^2+M\\log N)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $T(N^2)$\uff0c\u4ecd\u7136\u4e0d\u591f\u4f18\u79c0\u3002\n\n\n### 1.3 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\n\u89c2\u5bdf\u4e0a\u9762\u7684\u56db\u68f5\u6811\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u7b2c $i$ \u68f5\u6811\u4e0e\u7b2c $i-1$ \u68f5\u6811\u53ea\u6709\u4e00\u6761\u94fe\u4e0d\u4e00\u6837\uff0c\u5176\u4f59\u90e8\u5206\u5b8c\u5168\u76f8\u540c\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u80fd\u4e0d\u80fd\u5728\u8fd9\u91cc\u505a\u70b9\u6587\u7ae0\uff0c\u538b\u7f29\u65f6\u95f4\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u5462\uff1f\n\n\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u6211\u4eec\u6bcf\u6b21\u5efa\u6811\u65f6\uff0c\u4e0d\u9700\u8981\u65b0\u5efa\u4e00\u68f5\u5b8c\u6574\u7684\u6811\uff0c\u53ea\u9700\u8981\u5728\u539f\u6765\u7684\u6811\u4e0a\u52a0\u4e00\u6761\u94fe\u5c31\u884c\u4e86\u3002\n\n\u8fd8\u662f\u4ee5 $a[]=\\{1,5,3,8\\}$ \u4e3a\u4f8b\uff0c\u753b\u51fa\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff1a\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191101192935162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdIYW81,size_16,color_FFFFFF,t_70)\n\u6700\u540e\u4e00\u68f5\u5c31\u662f\u6700\u7ec8\u5f62\u6001\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e86\u3002\n\n\u81f3\u6b64\uff0c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u5185\u5bb9\u5df2\u7ecf\u8bb2\u89e3\u5b8c\u6bd5\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u89e3\u51b3\u6587\u9996\u63d0\u51fa\u7684\u95ee\u9898\u4e86\u3002\n### 1.4 \u4f8b\u9898\n[\u9759\u6001\u533a\u95f4\u7b2c k \u5c0f\u95ee\u9898](https://www.luogu.org/problem/P3834) \u5982\u9898\uff0c\u7ed9\u5b9a $N$ \u4e2a\u6574\u6570\u6784\u6210\u7684\u5e8f\u5217\uff0c\u5c06\u5bf9\u4e8e\u6307\u5b9a\u7684\u95ed\u533a\u95f4\u67e5\u8be2\u5176\u533a\u95f4\u5185\u7684\u7b2c $K$ \u5c0f\u503c\u3002\n\n**\u89e3** \u5c06\u4e24\u68f5\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u76f8\u51cf\u3002\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5f80\u4e0b\u904d\u5386\uff0c\u82e5\u5de6\u5b50\u6811\u7ef4\u62a4\u533a\u95f4\u7684\u6570\u7684\u4e2a\u6570 $d<K$\uff0c\u5219\u8d70\u5411\u5de6\u513f\u5b50\uff0c\u5426\u5219\u8d70\u5411\u53f3\u513f\u5b50\uff1b\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u76f4\u5230\u8d70\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u7684\u4e0b\u6807\u5373\u4e3a\u7b54\u6848\u3002\n\n**\u53c2\u8003\u4ee3\u7801**\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int MAXN=200010;\n\nint n,m;\nstruct index{\n\tint x,y;\n\tfriend bool operator<(const index a,const index b){\n\t\treturn a.y<b.y;\n\t}\n}a[MAXN];\nint b[MAXN];\nint mp[MAXN];\nint sx,sy,sd;\n\ninline int read(){\n\tint x=0; char c;\n\tdo c=getchar(); while(c<'0'||c>'9');\n\twhile(c>='0'&&c<='9')\n\t\tx=x*10+c-48,c=getchar();\n\treturn x;\n}\nstruct PreSegTree{\n\tstruct index{\n\t\tint l,r,ls,rs,d;\n\t\tindex(){\n\t\t\tl=r=ls=rs=d=0;\n\t\t}\n\t}e[MAXN*4];\n\tint len;\n\tint root[MAXN];\n\tPreSegTree(){\n\t\tlen=0;root[0]=1;\n\t}\n\tvoid buildtree(int l,int r){\n\t\tint me=++len;\n\t\te[me].l=l;e[me].r=r;\n\t\tif(l==r) return;\n\t\tint mid=(l+r)/2;\n\t\te[me].ls=len+1;buildtree(l,mid);\n\t\te[me].rs=len+1;buildtree(mid+1,r);\n\t}\n\tvoid grow(int rt,int x){\n\t\tint l=e[rt].l,r=e[rt].r,me=++len;\n\t\te[me].l=l;e[me].r=r;\n\t\tif(l==r){\n\t\t\te[me].d=e[rt].d+1;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)/2;\n\t\tif(x<=mid){\n\t\t\te[me].ls=len+1;e[me].rs=e[rt].rs;\n\t\t\tgrow(e[rt].ls,x);\n\t\t}else{\n\t\t\te[me].ls=e[rt].ls;e[me].rs=len+1;\n\t\t\tgrow(e[rt].rs,x);\n\t\t}\n\t\te[me].d=e[e[me].ls].d+e[e[me].rs].d;\n\t}\n\tvoid insert(int x,int d){\n\t\troot[x]=len+1;\n\t\tgrow(root[x-1],d);\n\t}\n\tint query(int rootl,int rootr,int k){\n\t\tint LS=e[rootl].ls,RS=e[rootr].ls;\n\t\tint D=e[RS].d-e[LS].d;\n\t\tif(e[rootl].l==e[rootl].r) return e[rootl].r;\n\t\tif(k<=D) return query(LS,RS,k);\n\t\telse return query(e[rootl].rs,e[rootr].rs,k-D);\n\t}\n}T;\nint main(){\n\tn=read();m=read();\n\tT.buildtree(1,n);\n\tfor(int i=1;i<=n;++i)\n\t\ta[i].x=i,a[i].y=read();\n\tsort(a+1,a+n+1);\n\tint tmp=0,last=-0x3f3f3f3f;\n\tfor(int i=1;i<=n;++i){\n\t\tif(a[i].y!=last){\n\t\t\t++tmp;\n\t\t\tmp[tmp]=a[i].y;\n\t\t}\n\t\tb[a[i].x]=tmp;\n\t\tlast=a[i].y;\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tT.insert(i,b[i]);\n\tfor(int i=1;i<=m;++i){\n\t\tsx=read();sy=read();sd=read();\n\t\tprintf(\"%d\\n\",mp[T.query(T.root[sx-1],T.root[sy],sd)]);\n\t}\n}\n```",
        "postTime": 1572612910,
        "uid": 29502,
        "name": "YangHao",
        "ccfLevel": 0,
        "title": "\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "## \u6a21\u677f\u4ecb\u7ecd\n\n### \u57fa\u7840\u8981\u6c42\n\n- \u7ebf\u6bb5\u6811\n\n- \u80fd\u7075\u6d3b\u8fd0\u7528 \u7ebf\u6bb5\u6811\n\n- \u524d\u7f00\u548c,\u5dee\u5206\n\n### \u6982\u5ff5\n\n- \u53ef\u6301\u4e45\u5316:\u5728\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u66f4\u6539\uff1b\u67e5\u8be2\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u7684\u503c\n\n### \u5f15\u5165\n\n[\u6d1b\u8c37P3919 \u53ef\u6301\u4e45\u5316\u6570\u7ec4](https://www.luogu.org/problem/P3919)\n\n\u8fd9\u9053\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u9898 \u5927\u6982\u5c31\u662f\u5355\u70b9\u4fee\u6539&\u5355\u70b9\u67e5\u8be2\n\n\u4ee3\u7801\u5927\u81f4\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u7684\u57fa\u7840\u4e0a\u6539\u53d8\u5979\u5b58\u70b9\u7684\u65b9\u5f0f\n\n\n\u4ee5\u524d\n```cpp\ntree[k].l == k << 1\n\ntree[k].r == k << 1 | 1\n```\n\n\u5bf9\u4e8e\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\n\n```cpp\ntree[k].l != k << 1\n\ntree[k].r != k << 1 | 1\n```\n\n```cpp\ninline int tree_build(int k,int l,int r)\n{\n\tk = ++cnt;\n    \n   \u6bcf\u6b21\u8fd9\u6837\u6765\u5b58\u70b9 \u4f46l\u548cr\u4ecd\u7136\u4fdd\u7559 \u8868\u793a\u4e00\u4e2a\u9012\u5f52\u548c\u539f\u5e8f\u5217\u4f4d\u7f6e\u7684\u8fc7\u7a0b\n\tif(l == r)\n\t{\n\t\ttree[k].val = seq[l];\n\t\treturn k;\n\t}\n\tint mid = l + r >> 1;\n\ttree[k].l = tree_build(tree[k].l,l,mid);\n\ttree[k].r = tree_build(tree[k].r,mid + 1,r);\n\treturn k;\n}\n```\n\n\u5927\u6982\u9171\u7d2b\n```cpp\n#include <map>\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n#define reg register int\n#define isdigit(x) ('0' <= (x)&&(x) <= '9')\ntemplate<typename T>\ninline T Read(T Type)\n{\n\tT x = 0,f = 1;\n\tchar a = getchar();\n\twhile(!isdigit(a)) {if(a == '-') f = -1;a = getchar();}\n\twhile(isdigit(a)) {x = (x << 1) + (x << 3) + (a ^ '0');a = getchar();}\n\treturn x * f;\n}\nconst int MAXN = 1e6 + 10;\nint seq[MAXN],root[MAXN],cnt,tot;\nstruct node\n{\n\tint l,r,val;\n}tree[MAXN * 13];\ninline int tree_build(int k,int l,int r)\n{\n\tk = ++cnt;\n\tif(l == r)\n\t{\n\t\ttree[k].val = seq[l];\n\t\treturn k;\n\t}\n\tint mid = l + r >> 1;\n\ttree[k].l = tree_build(tree[k].l,l,mid);\n\ttree[k].r = tree_build(tree[k].r,mid + 1,r);\n\treturn k;\n}\ninline int update(int k,int l,int r,int pos,int v)\n{\n\ttree[++cnt] = tree[k];\n\tk = cnt;\n\tif(l == r)\n\t{\n\t\ttree[k].val = v;\n\t\treturn k;\n\t}\n\tint mid = l + r >> 1;\n\tif(pos <= mid) tree[k].l = update(tree[k].l,l,mid,pos,v);\n\telse tree[k].r = update(tree[k].r,mid + 1,r,pos,v);\n\treturn k;\n}\ninline int query(int k,int pos,int l,int r)\n{\n\tif(l == r) return tree[k].val;\n\tint mid = l + r >> 1;\n\tif(pos <= mid) return query(tree[k].l,pos,l,mid);\n\treturn query(tree[k].r,pos,mid + 1,r);\n}\nint main()\n{\n\tint n = Read(1),m = Read(1);\n\tfor(reg i = 1;i <= n;i++)\n\t\tseq[i] = Read(1);\n\troot[tot] = tree_build(1,1,n);\n\twhile(m--)\n\t{\n\t\tint v = Read(1),sit = Read(1),loc = Read(1);\n\t\tif(sit & 1)\n\t\t{\n\t\t\tint value = Read(1);\n\t\t\troot[++tot] = update(root[v],1,n,loc,value);\n\t\t} else {\n\t\t\tint ans = query(root[v],loc,1,n);\n\t\t\troot[++tot] = root[v];\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n    return 0;\n}\n```\n\n### \u771f\u6b63\u7684\u677f\u5b50\u9898\n\n\u9488\u5bf9\u4f1a\u4e3b\u5e2d\u6811\u7684\u540c\u5b66\n\n\u770b\u770b\u6211\u5199\u7684\u601d\u8def \u5e94\u8be5\u5c31\u53ef\u4ee5\u79d2\u61c2\u4e86\n\n\n[P3834 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1](https://www.luogu.org/problem/P3834)\n\n\u5efa\u6743\u503c\u7ebf\u6bb5\u6811\n\n![](https://s2.ax1x.com/2019/10/15/K9OfJJ.png)\n\n\u5982\u56fe \u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u4e3a$[a,b]$\u7684\u6570\u503c\u4e2a\u6570\n\n\u6837\u4f8b\u8f93\u5165\n```cpp\n5 5\n25957 6405 15770 26287 26465 \n2 2 1\n3 4 1\n4 5 1\n1 2 2\n4 4 1\n```\n\n\u6570\u636e\u5f88\u5927 (\u2212$10^9$\u2264$a_i$\u2264$10^9$)\u60f3\u5230\u79bb\u6563\u5316\n\n```cpp\nint len = unique(seq + 1,seq + 1 + n) - seq - 1;\n\tfor(reg i = 1;i <= n;i++)\n\t\tint it = lower_bound(seq + 1,seq + 1 + len,past_a[i]) - seq;\n```\n#### $Firstly$\n\n\u67e5\u8be2\u601d\u8def\n\n\u5f88\u5bb9\u6613\u7406\u89e3 \u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee$[a,b]$\n\n\u6211\u4eec\u5148\u6c42$[1,b]$\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u503c\n\n\u518d\u6c42$[1,a - 1]$\u4e2d\u7684\u6570\u503c\u4e2a\u6570\n\n\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u5bf9\u5e94\u76f8\u51cf\n\n\u5f97\u5230\u7684\u5c31\u662f$[a,b]$\u4e2d\u7684\u6570\u503c\u4e2a\u6570\n\n\n\u56e0\u4e3a\u6211\u4eec\u5efa\u7acb\u7684\u662f\u6743\u503c\u7ebf\u6bb5\u6811\n\n\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9$*p$ \n\n\u5982\u679c$k$\uff08\u7b2c$k$\u5c0f\u503c\uff09\u2264 $*p->val$\n\n\u5411\u5de6\u5b50\u6811\u67e5\u627e\n\n\u53cd\u4e4b\u5411\u53f3\n\n\u76f4\u5230$l == r$\n\n\u627e\u5230\u4e86\u7b2c$k$\u5c0f\u503c$hash$(\u79bb\u6563\u5316)\u540e\u7684\u503c\n\n\u79bb\u6563\u5316\u65f6 \u7528\u4e00\u4e2a\u4e0b\u6807(\u79bb\u6563\u5316)\u540e\u7684\u503c\u5bf9\u5e94 \u539f\u503c\u7684\u6570\u7ec4\n\n\u5c31\u53ef\u4ee5\u8f93\u51fa\u4e86\n\n#### $Secondly$\n\n\u67e5\u8be2\u8981\u70b9\n\n\u6211\u4eec\u5148\u6c42$[1,b]$\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u503c\n\n\u518d\u6c42$[1,a - 1]$\u4e2d\u7684\u6570\u503c\u4e2a\u6570\n\n\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u5bf9\u5e94\u76f8\u51cf\n\n\u8fd9\u4e2a\u64cd\u4f5c\u660e\u663e\u590d\u6742\u4e14\u96be\u4ee5\u5b9e\u73b0 \u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u80fd\u4fdd\u8bc1\n\n\u6211\u4eec\u4fbf\u8003\u8651\u6bcf\u6b21$query$\u65f6\u4f20\u4e24\u4e2a\uff08\u540c\u65f6\u505a\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\uff09\n\n```cpp\ninline int query(int a,int b,int k,int l,int r)\n{\n\tif(l == r) return l;\n\tint x = tree[tree[a].l].val - tree[tree[b].l].val;\n\tint mid = l + r >> 1;\n\tif(k <= x) return query(tree[a].l,tree[b].l,k,l,mid);\n\treturn query(tree[a].r,tree[b].r,k - x,mid + 1,r);\n}\n```\n\n#### $Thirdly$\n\n\u4fee\u6539\n\n\u6700\u5f00\u59cb\u662f\u7a7a\u6811\n\n\u6bcf\u6b21\u6dfb\u70b9\u65f6\u628a\u5979\u5f53\u505a\u4e00\u79cd\u65b0\u7684\u5386\u53f2\u72b6\u6001\n\n\u76f4\u63a5\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\n\n#### $Code$\n\n```cpp\n#include <map>\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#define reg register int\n#define isdigit(x) ('0' <= (x)&&(x) <= '9')\ntemplate<typename T>\ninline T Read(T Type)\n{\n\tT x = 0,f = 1;\n\tchar a = getchar();\n\twhile(!isdigit(a)) {if(a == '-') f = -1;a = getchar();}\n\twhile(isdigit(a)) {x = (x << 1) + (x << 3) + (a ^ '0');a = getchar();}\n\treturn x * f;\n}\nconst int MAXN = 2e5 + 10;\nint seq[MAXN],root[MAXN << 5],past_a[MAXN],cnt,tot;\nstruct node\n{\n\tint l,r,val;\n}tree[MAXN << 5];\ninline int tree_build(int k,int l,int r)\n{\n\tk = ++cnt;\n\tif(l == r) return k;\n\tint mid = l + r >> 1;\n\ttree[k].l = tree_build(tree[k].l,l,mid);\n\ttree[k].r = tree_build(tree[k].r,mid + 1,r);\n\treturn k;\n}\ninline int update(int k,int l,int r,int pos)\n{\n\ttree[++cnt] = tree[k];\n\tk = cnt;\n\ttree[k].val++;\n\tif(l == r) return k;\n\tint mid = l + r >> 1;\n\tif(pos <= mid) tree[k].l = update(tree[k].l,l,mid,pos);\n\telse tree[k].r = update(tree[k].r,mid + 1,r,pos);\n\treturn k;\n}\ninline int query(int a,int b,int k,int l,int r)\n{\n\tif(l == r) return l;\n\tint x = tree[tree[a].l].val - tree[tree[b].l].val;\n\tint mid = l + r >> 1;\n\tif(k <= x) return query(tree[a].l,tree[b].l,k,l,mid);\n\treturn query(tree[a].r,tree[b].r,k - x,mid + 1,r);\n}\nint main()\n{\n\tint n = Read(1),m = Read(1);\n\tfor(reg i = 1;i <= n;i++)\n\t\tpast_a[i] = seq[i] = Read(1);\n\tsort(seq + 1,seq + 1 + n);\n\tint len = unique(seq + 1,seq + 1 + n) - seq - 1;\n\troot[tot] = tree_build(1,1,len);\n\tfor(reg i = 1;i <= n;i++)\n\t{\n\t\tint it = lower_bound(seq + 1,seq + 1 + len,past_a[i]) - seq;\n\t\troot[i] = update(root[i - 1],1,len,it);\n\t}\n\twhile(m--)\n\t{\n\t\tint l = Read(1),r = Read(1),k = Read(1);\n\t\tint ans = query(root[r],root[l - 1],k,1,len);\n\t\tprintf(\"%d\\n\",seq[ans]);\n\t}\n    return 0;\n}\n```\n\n### \u4e60\u9898\n\n[$SP11470 TTM - To the moon$](https://www.luogu.org/problem/SP11470)\n\n$Code$\n\n```cpp\n#include <map>\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n#define reg register int\n#define isdigit(x) ('0' <= (x)&&(x) <= '9')\ntemplate<typename T>\ninline T Read(T Type)\n{\n\tT x = 0,f = 1;\n\tchar a = getchar();\n\twhile(!isdigit(a)) {if(a == '-') f = -1;a = getchar();}\n\twhile(isdigit(a)) {x = (x << 1) + (x << 3) + (a ^ '0');a = getchar();}\n\treturn x * f;\n}\nconst int MAXN = 1e5 + 10;\nint seq[MAXN],root[MAXN],cnt,tot;\ntypedef long long ll;\nstruct node\n{\n\tint l,r;\n\tll val,tag;\n}tree[MAXN << 6];\ninline int tree_build(int k,int l,int r)\n{\n\tk = ++cnt,tree[k].tag = 0;\n\tif(l == r) {tree[k].val = seq[l];return k;}\n\tint mid = l + r >> 1;\n\ttree[k].l = tree_build(tree[k].l,l,mid);\n\ttree[k].r = tree_build(tree[k].r,mid + 1,r);\n\ttree[k].val = tree[tree[k].l].val + tree[tree[k].r].val;\n\treturn k;\n}\ninline int update(int k,int l,int r,int L,int R,ll v)\n{\n\ttree[++cnt] = tree[k],k = cnt;\n\ttree[k].val += (R - L + 1) * v;\n\tif(L == l&&r == R) {tree[k].tag += v;return k;}\n\tint mid = l + r >> 1;\n\tif(R <= mid) tree[k].l = update(tree[k].l,l,mid,L,R,v);\n\telse if(mid < L) tree[k].r = update(tree[k].r,mid + 1,r,L,R,v);\n\telse tree[k].l = update(tree[k].l,l,mid,L,mid,v),tree[k].r = update(tree[k].r,mid + 1,r,mid + 1,R,v);\n\treturn k;\n}\ninline ll query(int k,int l,int r,int L,int R,ll tot)\n{\n\tif(l == L&&r == R) return tree[k].val + (r - l + 1) * tot;\n\tint mid = l + r >> 1;\n\tif(R <= mid) return query(tree[k].l,l,mid,L,R,tot + tree[k].tag);\n\tif(mid < L) return query(tree[k].r,mid + 1,r,L,R,tot + tree[k].tag);\n\tll k1 = query(tree[k].l,l,mid,L,mid,tot + tree[k].tag),k2 = query(tree[k].r,mid + 1,r,mid + 1,R,tot + tree[k].tag);\n\treturn k1 + k2;\n}\nint main()\n{\n\tint n = Read(1),m = Read(1),pre = 0;\n\tfor(reg i = 1;i <= n;i++)\n\t\tseq[i] = Read(1);\n\troot[tot] = tree_build(1,1,n);\n\twhile(m--)\n\t{\n\t\tchar sit = getchar();\n\t\twhile(sit != 'C'&&sit != 'H'&&sit != 'B'&&sit != 'Q') sit = getchar();\n\t\tif(sit == 'C')\n\t\t{\n\t\t\tint l = Read(1),r = Read(1),d = Read(1);\n\t\t\troot[pre + 1] = update(root[pre],1,n,l,r,d * 1ll);\n\t\t\tpre++;\n\t\t} \n\t\tif(sit == 'Q')\n\t\t{\n\t\t\tint l = Read(1),r = Read(1);\n\t\t\tll ans = query(root[pre],1,n,l,r,0ll);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t\tif(sit == 'H')\n\t\t{\n\t\t\tint l = Read(1),r = Read(1),t = Read(1);\n\t\t\tll ans = query(root[t],1,n,l,r,0ll);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t\tif(sit == 'B') pre = Read(1);\n\t}\n    return 0;\n}\n```",
        "postTime": 1571031431,
        "uid": 73992,
        "name": "resftlmuttmotw",
        "ccfLevel": 0,
        "title": "\u4e3b\u5e2d\u6811\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff09"
    },
    {
        "content": "**upload on 2019.12.11\uff1a\u6211\u592a\u5e74\u8f7b\u4e86\uff0c\u8fd9\u4e2a\u89e3\u6cd5\u633a\u7ecf\u5178\u4e14\u5e7f\u4e3a\u4eba\u77e5\u7684**\n\n**\u672c\u9898\u89e3\u4e0d\u662f\u4e3b\u5e2d\u6811\u6559\u7a0b\uff0c\u800c\u662f\u90aa\u6559\u5206\u5757**\n\n* \u4e00\u4e2a\u66b4\u529b\u89e3\u6cd5\n\n\u8fd9\u9898\u6211\u9996\u5148\u662f\u8fd9\u6837\u60f3\u7684\uff1a\n\n\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u627e\u5230\u7b2ck\u4e2a\u7b26\u5408\u533a\u95f4\u8981\u6c42\u7684\u6570\uff0c\u5c31\u662f\u7b2ck\u5c0f\u3002\n\n\u7b80\u660e\u6613\u61c2\uff0c\u6b63\u786e\u6027\u4e5f\u53ef\u4ee5\u8bc1\u660e\uff0c\u53ef\u60dc\u590d\u6742\u5ea6O(n)\uff0c\u80fd\u4e0d\u80fd\u4f18\u5316\u4e00\u4e0b\uff1f\u53ef\u4ee5\uff0c\u5206\u5757\u3002\uff08\u8fd9\u91cc\u9ed8\u8ba4\u5757\u957f$\\sqrt{n}$\uff09\n\n* \u6b63\u89e3\uff08\u53cd\u6b63\u80fdAC\u8fd9\u9898\uff09\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5757\u8bb0\u5f55\u4e00\u4e2a$total[i][j]$\uff0c\u8868\u793a\u7b2ci\u4e2a\u5757\u4e2d\u7684\u6570\u5b57\uff0c\u5728**\u539f\u6570\u7ec4**\u4e0b\u8868\u5c0f\u4e8e\u7b49\u4e8ej\u7684\u6570\u91cf\u3002\n\n\u8fd9\u4e2a\u663e\u7136\u53ef\u4ee5\u524d\u7f00\u548c\u89e3\u51b3\uff0c\u590d\u6742\u5ea6$O(n \\sqrt{n})$\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u4ece\u57571\u5f00\u59cb\u8bbf\u95ee\uff0c\u6bcf\u6b21\u8bb0\u5f55\u7b26\u5408\u533a\u95f4\u8981\u6c42\u7684\u6570\u7684\u4e2a\u6570\uff0c\u76f4\u63a5\u52a0\u4e0a$total[i][y] - total[i][x - 1]$\u5c31\u884c\u4e86\u3002\u5982\u679c\u7b26\u5408\u533a\u95f4\u9650\u5236\u7684\u6570\u5df2\u7ecf>=k\u4e86\uff0c\u90a3\u4e48\u66b4\u529b\u626b\u4e00\u904d\u8fd9\u4e2a\u5757\uff0c\u7edf\u8ba1\u51fa\u7b54\u6848\u3002\n\n\u8fd9\u6837\u6bcf\u4e2a\u64cd\u4f5c\u6700\u591a\u8bbf\u95ee$ \\sqrt{n}$\u4e2a\u5757\uff0c\u6bcf\u4e2a\u5757\u6700\u591a\u8bbf\u95ee$ \\sqrt{n}$\u4e2a\u6570\uff0c\u90a3\u4e48\u8fd8\u662f$ \\sqrt{n}$\u590d\u6742\u5ea6\u7684\u3002\n\n\u53ef\u60dc\u5f00\u4e0d\u4e0b447 * 200000\u7684\u6570\u7ec4\uff0c\u6240\u4ee5\u6211\u5757\u957f\u53d6\u4e86$n ^ {0.6}$\uff0c\u5361\u7740\u65f6\u9650AC\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nint n,m,len;\nint total[150][200005];\n\nint x,y,k;\n\nstruct node{\n\tint val,id;\n}p[200005];\n\ninline int from(int x){\n    if(x % len == 0){\n    \treturn x / len;\n    }\n    return x / len + 1;\n}\n\ninline int L(int x){\n\treturn (x - 1) * len + 1;\n}\n\ninline int R(int x){\n\treturn x * len;\n}\n\nbool cmp(node a,node b){\n\treturn a.val < b.val;\n}\n\nvoid slove(){\n\tint cnt = 0,i;\n    for(i = 1;i <= from(n);i++){\n        if(cnt + total[i][y] - total[i][x - 1] >= k){\n        \tbreak;\n        }\n        cnt += total[i][y] - total[i][x - 1];\n    }\n    for(int j = L(i);j <= R(i);j++){\n    \tif(p[j].id >= x && p[j].id <= y){\n    \t\tcnt++;\n    \t}\n    \tif(cnt == k){\n    \t\tprintf(\"%d\\n\",p[j].val);\n    \t\treturn;\n    \t}\n    }\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i = 1;i <= n;i++){\n    \tscanf(\"%d\",&p[i].val);\n    \tp[i].id = i;\n    }\n    sort(p+1,p+n+1,cmp);\n    len = pow(n,0.6);\n    for(int i = 1;i <= n;i++){\n        total[from(i)][p[i].id]++;\n    }\n    for(int i = 1;i <= from(n);i++){\n    \tfor(int j = 1;j <= n;j++){\n    \t\ttotal[i][j] += total[i][j - 1];\n    \t}\n    }\n    for(int i = 1;i <= m;i++){\n    \tscanf(\"%d%d%d\",&x,&y,&k);\n    \tslove();\n    }\n\treturn 0;\n}\n```\n\n\u987a\u5e26\u4e00\u63d0\uff0c\u8fd9\u4e2a\u601d\u8def\u8fd8\u53ef\u4ee5\u505aP3380\uff0c\u800c\u4e14\u5355\u6b21\u590d\u6742\u5ea6\u4e5f\u662f$ \\sqrt{n}$\uff0c\u53ef\u4ee5\u770b[\u8fd9\u4e2a\u5927\u4f6c\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/ShadowassIIXVIIIIV/solution-p3380)",
        "postTime": 1569757714,
        "uid": 49776,
        "name": "chenxinyang2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u4e3b\u5e2d\u6811\n\n\u7b80\u8981\u7684\u8bf4\uff0c\u5148\u505a\u4e00\u6ce2\u79bb\u6563\u5316\uff0c\u7136\u540e\u5bf9\u4e8e\u4e3b\u5e2d\u6811\u91cc\u6bcf\u4e00\u4e2a\u4f4d\u7f6e$p$,\u6211\u4eec\u7ef4\u62a4\u4e86\u503c\u7684\u8303\u56f4\u3002\u7136\u540e\u7b2ci\u4e2a\u7ebf\u6bb5\u6811\u4e2d\u533a\u95f4$[l,r]$\u8868\u793a\u79bb\u6563\u5316\u540e\u6570\u5b57$1-i$\u5728\u533a\u95f4$[l,r]$\u8303\u56f4\u5185\u7684\u4e2a\u6570\n\n\u4e3a\u4e86\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\uff0c\u6211\u6a21\u62df\u4e00\u4e0b\u6837\u4f8b\n\n\n### PART 1 \u5efa\u6811\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/pm87uj0i.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n### PART 2 \u52a0\u6570\n\n\u5c06\u6bcf\u4e2a\u6570\u5b57\u79bb\u6563\u5316\u540e\u7684\u7f16\u53f7\u63d2\u5165\u5230\u5b83\u7684\u4f4d\u5b50\u4e0a\uff0c\u7136\u540e\u5e76\u628a\u6240\u6709\u5305\u62ec\u5b83\u7684\u533a\u95f4\u7684sum\u90fd++\u3002\n\n\u63d2\u516525927\uff08\u79bb\u6563\u5316\u540e\u662f3\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5zmag9to.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u63d2\u51656405\uff08\u79bb\u6563\u5316\u540e\u662f1\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/djpvwjdr.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u6700\u7ec8\u7ed3\u679c\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/rtiuo3r8.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u540c\u65f6\uff0c\u6211\u4eec\u7528\u6570\u7ec4$sum$\u8868\u793a\u5728\u533a\u95f4$[l,r]$\u6570\u5b57\u603b\u548c\u3002\n\n### PRAT 3 \u67e5\u8be2\n\n\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4$[l,r]$\uff0c\u6211\u4eec\u627e\u5230$[1,l]$\u548c$[1,r]$\u4e24\u68f5\u6811\uff0c\u6bcf\u6b21\u7b97\u51fa\u5728$[l,mid]$\u8303\u56f4\u5185\u7684\u6570\uff0c\u5982\u679c\u6570\u91cf$ \\geq rank$\uff0c\u5c31\u5f80\u5de6\u5b50\u6811\u8d70\uff0c\u5426\u5219\u5c31\u5f80\u53f3\u5b50\u6811\u8d70\u3002\n\n\u8fd9\u8fd8\u662f\u633a\u597d\u7406\u89e3\u7684\n\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nconst ll N=200010;\nll n,m,len,cnt,a[N],b[N],sum[N];\nstruct SegmentTree{\n    ll lson,rson,sum;\n}tree[N<<5];\n\ninline ll read(){\n    ll x=0,tmp=1;\n    char ch=getchar();\n    while(!isdigit(ch)){\n        if(ch=='-') tmp=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch)){\n        x=(x<<3)+(x<<1)+(ch^48);\n        ch=getchar();\n    }\n    return tmp*x;\n}\n\ninline void write(ll x){\n    if(x<0){\n        putchar('-');\n        x=-x;\n    }\n    ll y=10,len=1;\n    while(y<=x){\n        y=(y<<3)+(y<<1);\n        len++;\n    }\n    while(len--){\n        y/=10;\n        putchar(x/y+48);\n        x%=y;\n    }\n}\n\nll build(ll l,ll r){\n    ll p=++cnt;\n    if(l==r) return p;\n    ll mid=(l+r)>>1;\n    tree[p].lson=build(l,mid);\n    tree[p].rson=build(mid+1,r);\n    return p;\n}\n\nll update(ll pre,ll l,ll r,ll val){\n    ll p=++cnt;\n    tree[p]=tree[pre]; tree[p].sum++;\n    if(l==r) return p;\n    ll mid=(l+r)>>1;\n    if(val<=mid) tree[p].lson=update(tree[pre].lson,l,mid,val);\n    if(val>mid) tree[p].rson=update(tree[pre].rson,mid+1,r,val);\n    return p;\n}\n\nll query(ll x,ll y,ll l,ll r,ll rank){\n    if(l==r) return b[l];\n    ll mid=(l+r)>>1,ans=tree[tree[y].lson].sum-tree[tree[x].lson].sum;\n    return ans>=rank?query(tree[x].lson,tree[y].lson,l,mid,rank):query(tree[x].rson,tree[y].rson,mid+1,r,rank-ans);\n}\n\nint main(){\n    n=read(); m=read();\n    for(ll i=1; i<=n; i++) b[i]=a[i]=read();\n    sort(b+1,b+1+n);\n    len=unique(b+1,b+1+n)-b-1;\n    for(ll i=1; i<=n; i++) a[i]=lower_bound(b+1,b+1+len,a[i])-b;\n    sum[0]=build(1,n);\n    for(ll i=1; i<=n; i++) sum[i]=update(sum[i-1],1,len,a[i]);\n    while(m--){\n        ll l=read(),r=read(),rank=read();\n        write(query(sum[l-1],sum[r],1,len,rank)); putchar('\\n');\n    }\n    return 0;\n}\n```",
        "postTime": 1569637410,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "### \u524d\u7f6e\u6280\u80fd :\n- \u7ebf\u6bb5\u6811\n- \u524d\u7f00\u548c\n- \u6811\u72b6\u6570\u7ec4\n- ~~\u4e00\u53cc\u6253\u4e0a\u767e\u884c\u4ee3\u7801\u4e0d\u6296\u7684\u624b~~\n\n>\u5bf9\u4e00\u4e9b\u540d\u8bcd\u7684\u89e3\u91ca\uff1a\n\n>\u6743\u503c\u7ebf\u6bb5\u6811 : \u4e00\u79cd\u7ebf\u6bb5\u6811,\u5176\u53f6\u5b50\u8282\u70b9\u4ee3\u8868\u4e86\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u6743\u503c.\n\n>\u4e3b\u5e2d\u6811&\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811 : \u5173\u4e8e\u540d\u79f0\u7684\u95ee\u9898\u8be6\u89c1[\u300c\u4e3b\u5e2d\u6811\u300d\u548c\u300c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u300d\u6709\u4ec0\u4e48\u533a\u522b\uff1f](https://www.zhihu.com/question/59195374). ~~\u987e\u540d\u601d\u4e49~~\u849f\u84bb\u770b\u6765 , \u8fd9\u662f\u4e00\u79cd\u53ef\u4ee5\u652f\u6301\u8bbf\u95ee\u6743\u503c\u7ebf\u6bb5\u6811\u5386\u53f2\u7248\u672c\u7684\u6570\u636e\u7ed3\u6784 , \u5176\u4e2d\u6bcf\u4e00\u4e2a\u5386\u53f2\u7248\u672c\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u90fd\u662f\u4e00\u68f5**\u5b8c\u6574\u7684\u6743\u503c\u7ebf\u6bb5\u6811** . \u6bcf\u4e00\u4e2a\u5386\u53f2\u7248\u672c\u7684\u533a\u522b\u5728\u4e8e\u4e00\u4e9b\u6743\u503c(\u53f6\u5b50\u8282\u70b9)\u6240\u5728\u7684\u8def\u5f84\u4e0a\u7684\u4e00\u4e9b\u6570\u636e\u53ef\u80fd\u6539\u53d8.\n\n## \u4f8b 1[Luogu P3834 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 \uff08\u4e3b\u5e2d\u6811\uff09](https://www.luogu.org/problemnew/show/P3834):\n\n>\u9898\u76ee\u5927\u610f : \u7ed9\u5b9aN\u4e2a\u6574\u6570\u6784\u6210\u7684\u5e8f\u5217 , \u5c06\u5bf9\u4e8e\u6307\u5b9a\u7684M\u4e2a\u95ed\u533a\u95f4\u67e5\u8be2\u5176\u533a\u95f4\u5185\u7684\u7b2cK\u5c0f\u503c\u3002\u67e5\u8be2\u4ee5(l,r,k)\u7684\u5f62\u5f0f\u7ed9\u51fa , \u5176\u610f\u4e49\u662f**\u95ed\u533a\u95f4**`[l,r]`\u7684\u7b2ck\u5927\u7684\u6743\u503c . \u6240\u7ed9\u7684\u5e8f\u5217\u53ef\u80fd\u91cd\u590d , a\u2208`[-1e9,1e9]`.n,m<=2e5.\n\n### \u53d8\u91cf\u9884\u8b66:\n - tot : \u8868\u793a\u65b0\u5efa\u7684\u70b9\u7684\u5e8f\u53f7(\u907f\u514d\u91cd\u590d)\n - T[i] : \u8868\u793a\u7b2ci\u4e2a\u7248\u672c\u7684**\u6839\u8282\u70b9**\u7684\u70b9\u5e8f\u53f7(\u4fbf\u4e8e\u5b58\u50a8,\u53ea\u5b58T[i]\u4e00\u4e2a\u503c\u5c31\u53ef\u4ee5\u4ece\u6574\u68f5\u6811\u4e0a\u641c\u7d22)\n - ls[i]/rs[i] : \u8868\u793ai\u53f7\u70b9\u7684\u5de6/\u53f3\u513f\u5b50(**Warning** : \u53f6\u5b50\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u65e0\u610f\u4e49)\n - sum[i] : \u8868\u793a\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7684\u5b50\u6811\u6743\u503c\u548c.(\u4fbf\u4e8e\u8be2\u95ee\u65f6\u51b3\u5b9a\u53bb\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811)\n - a[i] : \u521d\u59cb\u5e8f\u5217\u6570\u7ec4\n - b[i] : \u79bb\u6563&\u53bb\u91cd\u540e\u7684\u6570\u7ec4\n - po : b\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570[1,po]\n \n\u8fd9\u662f\u4e00\u9053\u7ecf\u5178\u7684\u4e3b\u5e2d\u6811\u677f\u5b50\u9898(\u9759\u6001\u533a\u95f4\u7b2ck\u5c0f) , \u901a\u5e38\u7684\u505a\u6cd5\u662f\u5148\u5c06\u6240\u7ed9\u5e8f\u5217\u8fdb\u884c\u79bb\u6563\u540e\u5efa\u6743\u503c\u7ebf\u6bb5\u6811 . \u56e0\u4e3a\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u6570\u4e00\u822c\u662f\u79bb\u6563\u5316\u540e\u7684\u503c\u57df , \u6240\u4ee5\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fbe\u5230n . \n\n\u5728\u79bb\u6563\u4e4b\u540e , \u4ece1\u5230n\u904d\u5386 , **\u628aa[i]\u5728\u79bb\u6563&\u53bb\u91cd \u6570\u7ec4b\u4e2d\u7684\u4f4d\u7f6e`pos`\u7b97\u51fa\u6765** , \u6b64\u65f6\u7684`pos`\u5c31\u5bf9\u5e94\u4e86\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9 . \u5229\u7528\u7ebf\u6bb5\u6811\u7684\u4e8c\u5206\u6027 , \u5373\u7531\u4e8e\u6709`pos`\u7684\u9650\u5236 , \u5f53\u524d\u8282\u70b9\u7684\u53ea\u9700\u8981\u65b0\u5efa\u5de6\u53f3\u513f\u5b50\u4e2d\u7684\u4e00\u4e2a , \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728 **O(log n)** \u7684\u65f6\u95f4\u5185\u5230\u8fbe\u76ee\u6807\u4f4d\u7f6e**\u5e76\u5728\u5176\u8def\u5f84\u4e0a**\u8fdb\u884c\u4fee\u6539 . \u4fee\u6539\u65f6\u8981\u628a\u6240\u6709`sum[\u5f53\u524d\u8282\u70b9]`\u6539\u4e3a`sum[\u4e0a\u4e00\u7248\u672c\u76f8\u540c\u4f4d\u7f6e]+1` , \u8fd9\u91cc`sum[i]`\u7684\u610f\u4e49\u662f\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f(\u6743\u503c\u548c).\n\n\u73b0\u5728\u7684\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u5efa\u6811/\u4fee\u6539 , \u4ee5\u8fbe\u5230\u8282\u7701\u7a7a\u95f4\u3001\u65f6\u95f4\u7684\u76ee\u7684 ? \u611f\u6027\u5730\u601d\u8003 , \u6211\u4eec\u53ef\u4ee5\u628a(1->n)\u6240\u6709\u7684T[i]\u4ece\u7a7a\u6811\u4e0a\u8fdb\u884c\u4fee\u6539 , \u8fd9\u6837\u6211\u4eec\u53ea\u9700\u8981\u65b0\u5f00\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a **O(log n)** \u7684\u7a7a\u95f4 , \u7a7a\u95f4\u5927\u5927\u5bbd\u88d5 ,\u4e0d\u5fc5\u62c5\u5fc3\u7206\u7a7a\u95f4\u7684\u73b0\u8c61 . \u7136\u800c , \u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c , \u6211\u4eec\u9700\u8981\u5c06`[l,r]`\u4e2d\u7684T[i]\u4ee3\u8868\u7684\u6811\u4e2d\u7684sum\u5168\u90e8\u76f8\u52a0\u624d\u80fd\u5f97\u5230\u5176\u5bf9\u5e94\u7684sum\u72b6\u6001 , \u800c\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u662f **O(n log n)** \u7684 , \u5bfc\u81f4\u603b\u65f6\u95f4\u590d\u6742\u5ea6 **O(n^2 log n)** \u7206\u4e86\u65f6\u9650.\n\n\u6362\u4e00\u79cd\u65b9\u6cd5 , \u6211\u4eec\u53ef\u4ee5\u5c06T[i]\u5728T[i-1]\u7684\u57fa\u7840\u4e0a\u65b0\u5efa , \u800cT[i]\u4ee3\u8868\u7684\u8fd9\u4e00\u68f5\u6811\u5728T[i-1]\u4e0a\u7684\u53d8\u52a8\u4e5f\u4ec5\u4ec5\u662f\u5728\u641c\u7d22 pos \u7684\u4e00\u6574\u6761\u8def\u5f84\u4e0a , \u5c31\u50cf\u4e0a\u9762\u4e00\u6837\u53ea\u9700\u8981\u65b0\u5f00 \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a **O(log n)** \u7684\u7a7a\u95f4 . \u4e0d\u540c\u7684\u662f\u6b64\u65f6\u6211\u4eec\u5efa\u6210\u4e86\u4e00\u4e2a**\u524d\u7f00\u548c**\u7684\u7ed3\u6784 , \u53ea\u9700\u8981\u7528`T[r]-T[l-1]`\u5c31\u53ef\u4ee5\u8868\u793a\u51fa`[l,r]`\u7684`sum`\u72b6\u6001.\n\n\u5bf9\u4e8e\u67e5\u8be2 , \u6211\u4eec\u53ef\u4ee5\u4eceT[r]\u548cT[l-1]\u5f00\u59cb(\u5bf9\u4e8e\u7248\u672c\u7684\u5b9a\u4e49,T[i]\u6240\u4ee3\u8868\u7684\u662f**\u7248\u672ci\u7684\u6811\u7684\u6811\u6839**) , \u8ba1\u7b97\u5f53\u524d\u540c\u6b65\u4e0b\u4f20\u7684\u8282\u70b9\u7684**\u5de6\u5b50\u6811**\u7684`sum`\u5dee\u503cx , \u6bcf\u6b21\u6bd4\u8f83 x \u548c k , \u51b3\u5b9a\u5411\u5de6\u5b50\u6811\u8d70\u8fd8\u662f\u53f3\u5b50\u6811\u8d70.\n\n## \u8be6\u7ec6Code\u89e3\u91ca:\n### \u5173\u4e8e\u5efa\u6811:\n```cpp\nint build(int l,int r)\n{\n    int now=++tot,mid=(l+r)>>1;\n    if(l^r)//\u5982\u679c\u5f53\u524d\u7684\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u4e0d\u540c\n    {\n        lc[now]=build(l,mid);\n        rc[now]=build(mid+1,r);\n    }\n    return now;//\u672c\u4eba\u559c\u6b22\u8fd9\u79cd\u8fd4\u56de\u503c\u7684\u6d41\u6d3e,\u4e0d\u8fc7\u4e5f\u6709\u5f15\u7528\u7684\u5199\u6cd5.\n}\nT[0]=build(1,n1);\n```\n\n### \u5173\u4e8e\u4fee\u6539:\n```cpp\nint modify(int root,int l,int r)\n{\n    int now=++tot,mid=(l+r)>>1;\n    lc[now]=lc[root];rc[now]=rc[root];sum[now]=sum[root]+1;\n    //\u4e3a\u4e86\u538b\u884c,\u5148\u884c\u7ed9lc\u548crc\u8d4b\u503c,\u907f\u514d\u7e41\u7410\u7684if \n    if(!(l^r))return now;//\u5982\u679cl==r,\"\u5efa\"\u597d\u5c31\u6536 \n    if(pos<=mid)lc[now]=modify(lc[root],l,mid);\n    //pos\u53ea\u4f1a\u5411\u4e00\u8fb9\u8d70,\u4fdd\u8bc1\u4e86\u65f6\u95f4&\u7a7a\u95f4\u590d\u6742\u5ea6 \n    /*\n\t\u6ce8\u610f:\u5728\u8fd9\u91cc\u6709dalao\u5199\"lc[now]=modify(lc[now],l,mid)\",\n\t\t\u4e24\u79cd\u5199\u6cd5\u7684\u7ed3\u679c\u76f8\u540c,\u4f46\u4ece\u672c\u8d28\u51fa\u53d1,\u6211\u89c9\u5f97\u8fd8\u662f\u6211\u7684\n\t\t\u7b26\u5408\u5b9a\u4e49. \n\t*/ \n    else rc[now]=modify(rc[root],mid+1,r);\n    return now;\n}\n\nfor(int i=1;i<=n;++i)\n{\n    pos=lower_bound(b+1,b+po+1,a[i])-b;\n    //\u8fd9\u4e00\u53e5\u8bdd\u7684\u610f\u601d\u662f\u627e\u5230a[i]\u5728b\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n    T[i]=modify(T[i-1],1,po);\n    //\u4ee5T[i-1]\u4e3a\u84dd\u672c\u4fee\u6539T[i]\n}\n```\n\u4e0d\u61c2`lower_bound`\u7684\u6765\u8fd9\u91cc:[\u5173\u4e8elower_bound( )](https://blog.csdn.net/qq_40160605/article/details/80150252)\n\n### \u5173\u4e8e\u67e5\u8be2:\n```cpp\nint query(int u,int v,int l,int r,int k)\n{\n    int mid=(l+r)>>1,x=sum[lc[v]]-sum[lc[u]];\n    //x\u8868\u793a\u5f53\u524d\u4e24\u8282\u70b9\u5de6\u5b50\u6811\u7684sum\u5dee \n    if(!(l^r))return l;//\u5982\u679cl==r\u8bf4\u660e\u5df2\u7ecf\u641c\u5230\u4e86\u7ed3\u679c \n    if(k<=x)return query(lc[u],lc[v],l,mid,k);\n    //\u7528x\u7684\u503c\u786e\u5b9ak\u8d70\u7684\u65b9\u5411 \n    else return query(rc[u],rc[v],mid+1,r,k-x);\n    //\u6ce8\u610f:\u8fd9\u91cc\u5e94\u8be5\u662f\"k-x\",\u610f\u601d\u662f\u5982\u679c\u5728\u5de6\u8fb9\u627e\u4e0d\u5230, \n\t//\u5c31\u5728\u53f3\u8fb9\u627e k-x\u5c0f\u7684\u6570\n}\n```\n### \u603b\u590d\u6742\u5ea6\u5206\u6790 : \n- \u67e5\u8be2: \u7a7a\u95f4    `--`      \u65f6\u95f4 `O(log n)`\n- \u4fee\u6539: \u7a7a\u95f4 `O(log n)`   \u65f6\u95f4 `O(log n)`\n- \u5efa\u6811: \u7a7a\u95f4 `O(n*log n)` \u65f6\u95f4 `O(n*log n)`\n- \u603b\u65f6\u95f4 : `O((n+m)*log n)`\n- \u603b\u7a7a\u95f4 : `O((n+m)*log n)`\n\n## \u4f8b 2[Luogu P2617 Dynamic Rankings](https://www.luogu.org/problemnew/show/P2617):\n\n>\u9898\u76ee\u5927\u610f : \u7ed9\u5b9aN\u4e2a\u6574\u6570\u6784\u6210\u7684\u5e8f\u5217 , \u5c06\u7ed9\u51faM\u4e2a\u64cd\u4f5c,\u64cd\u4f5c1: \u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u7b2cK\u5c0f\u503c\u3002\u67e5\u8be2\u4ee5(l,r,k)\u7684\u5f62\u5f0f\u7ed9\u51fa , \u5176\u610f\u4e49\u662f**\u95ed\u533a\u95f4**`[l,r]`\u7684\u7b2ck\u5927\u7684\u6743\u503c . \u64cd\u4f5c2: \u5c06 a[i]\u66ff\u6362\u6210\u53e6\u4e00\u4e2a\u503c . \u6240\u7ed9\u7684\u5e8f\u5217\u53ef\u80fd\u91cd\u590d , a\u2208`[-1e9,1e9]`.n,m<=1e5.\n\n\u89c2\u5bdf\u9898\u610f , \u6211\u4eec\u53d1\u73b0\u8fd9\u5c31\u662f\u8981\u6211\u4eec\u6253\u4e00\u4e2a\u53ef\u4ee5\u652f\u6301\u4fee\u6539\u7684\u4e3b\u5e2d\u6811(\u52a8\u6001\u533a\u95f4\u7b2ck\u5927) . \u540c\u4e0a\u6240\u8ff0 , \u6211\u4eec\u9759\u6001\u533a\u95f4\u4fdd\u8bc1 \u65f6&\u7a7a\u590d\u6742\u5ea6 \u7528\u4e86\u4e00\u79cd **\u524d\u7f00\u548c** \u7684\u65b9\u5f0f , \u5373\u5c06`T[i]`\u6240\u4ee3\u8868\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u89c6\u4e3a\u4e00\u79cd**\u533a\u95f4\u88c5\u6001** , \u7528\u5904\u7406\u6570\u7ec4\u7684\u529e\u6cd5\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c. \u6211\u4eec\u5b66\u4e60\u8fc7 **\u524d\u7f00\u548c** , \u6240\u4ee5\u660e\u767d\u6734\u7d20\u7684\u524d\u7f00\u548c\u662f\u4e00\u4e2a **\u67e5\u8be2O(1),\u4fee\u6539O(n)** \u7684\u64cd\u4f5c , \u5728\u9759\u6001\u533a\u95f4\u7b2ck\u5927\u4e2d\u8868\u73b0\u826f\u597d , \u4f46\u5bf9\u4e8e\u4e00\u6b21\u4fee\u6539 , \u6211\u4eec\u9700\u8981\u5c06\u5176\u540e\u7684\u6240\u6709\u7248\u672c\u5168\u90e8\u4fee\u6539\u4e00\u904d , \u9020\u6210\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230 `O(n*log n)` , \u5bf9\u4e8em\u6b21\u7684\u4fee\u6539 , \u8fd9\u4e00\u590d\u6742\u5ea6\u53ef\u80fd\u8fbe\u5230 `O(n*m*log n)` \u7684\u7ea7\u522b . \u6b64\u65f6 , \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u8fd9\u79cd\u72b6\u6001\u5e8f\u5217 : **\u6811\u72b6\u6570\u7ec4** . \u6734\u7d20\u7684\u6811\u72b6\u6570\u7ec4\u6709 **\u67e5\u8be2O(log n),\u4fee\u6539O(log n)** \u7684\u826f\u597d\u6027\u8d28 , \u5728\u5e94\u7528\u6811\u72b6\u6570\u7ec4\u5904\u7406\u72b6\u6001\u65f6\u53ef\u4ee5\u628a\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u7684\u7a0b\u5ea6.\n### \u603b\u590d\u6742\u5ea6\u5206\u6790 : `O(n*log n*log n)`",
        "postTime": 1550197296,
        "uid": 50215,
        "name": "maomao",
        "ccfLevel": 6,
        "title": "\u4e3b\u5e2d\u6811&\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u4e34\u8fd1NOIP2018\uff0c\u5728\u590d\u4e60\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\uff0c\u6211\u7ed9\u6211\u4ee5\u524d\u5199\u8fc7\u7684\u4ee3\u7801\u5199\u4e00\u904d\u6ce8\u91ca\uff0c\u91cd\u65b0\u601d\u8003\u4e00\u4e0b\u4ed6\u4eec\u5728\u4ee3\u7801\u4e0a\u5b9e\u73b0\u539f\u7406\u3002\n\n\u504f\u91cd\u4e8e\u7801\u7684\u5b9e\u73b0\u3002\u81f3\u4e8e\u6570\u5b66\u539f\u7406\u5176\u4ed6\u5927\u4f6c\u7684\u9898\u89e3\u5c31\u8bb2\u7684\u5f88\u6e05\u695a\u3002\u800c\u6211\u7684\u9898\u89e3\u53ef\u4ee5\u4e0e\u5927\u5bb6\u4e00\u8d77\u5199\u4e00\u68f5\u4e3b\u5e2d\u6811\u3002\u6bcf\u4e00\u53e5\u8bdd\u6211\u90fd\u6709\u6ce8\u91ca\u3002\u4e0d\u4f1a\u5b58\u5728\u4efb\u4f55\u65b9\u9762\u7684\u4e0d\u7406\u89e3~\n\n\u5efa\u8bae\u9605\u8bfb\u987a\u5e8f\uff1a\u6570\u7ec4\u548c\u53d8\u91cf\u7684\u5b9a\u4e49-->\u4e3b\u51fd\u6570-->\u529f\u80fd\u51fd\u6570\u3002\n```\n#include<bits/stdc++.h>\n#define mid (l+r)/2//\u4f7f\u7528define\u5b9a\u4e49mid\uff0c\u51cf\u5c11\u4ee3\u7801\u91cf\u3002\nusing namespace std;\nint n,m,cnt,L[20200000],R[20200000],sum[20200000],a[200100],b[200100],T[2000100],lon;\n//L,R\uff1a\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u5de6\u6216\u53f3\u8282\u70b9\u662f\u591a\u5c11\u3002sum\uff1a\u5f53\u524d\u8282\u70b9\u638c\u63e1\u533a\u95f4\u7684\u5143\u7d20\u603b\u91cf\n//a\uff1a\u539f\u6570\u7ec4\uff0cb\uff1a\u7528\u6765\u4e71\u641e\u7684\u5907\u4efd\u539f\u6570\u7ec4\uff0cT\uff1a\u7b2ci\u6b21\u63d2\u5165\u540e\u6574\u533a\u95f4\u7684\u7f16\u53f7 \n//cnt:\u76ee\u524d\u7684\u8282\u70b9\u603b\u4e2a\u6570 \nint build(int l,int r){\n    int rt=++cnt;//\u6bcf\u6b21\u8981\u5efa\u7acb\u4e00\u4e2a\u65b0\u8282\u70b9\u7684\u65f6\u5019\uff0c\u8ba9rt=++cnt\u5373\u53ef \n    sum[rt]=0;//\u5f53\u524d\u8fd8\u672a\u52a0\u5165\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\uff0csum\u503c\u5168\u90e8\u521d\u59cb\u5316\u4e3a0 \n    if(l<r){\n        L[rt]=build(l,mid);//\u9012\u5f52\u5730\u53bb\u5904\u7406\u5de6\u53f3\u513f\u5b50\uff0c\u4e3a\u4ed6\u4eec\u8d4b\u8282\u70b9\u7f16\u53f7\u3002 \n        R[rt]=build(mid+1,r);\n    }\n    return rt;//\u8fd4\u56de\u7684\u662f\u8282\u70b9\u7f16\u53f7\uff0c\u53ef\u80fd\u4f1a\u7528\u6765\u8d4b\u503cL,R,T\u6570\u7ec4\u3002 \n} \nint updata(int pre,int l,int r,int x){//\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u7684\u64cd\u4f5c \n    int rt=++cnt; //\u540c\u7406\uff0c\u53ea\u8981\u5efa\u7acb\u65b0\u8282\u70b9\uff0c\u5c31\u505a\u8fd9\u6837\u7684\u64cd\u4f5c\u3002 \n    L[rt]=L[pre],R[rt]=R[pre],sum[rt]=sum[pre]+1;//\u8be5\u70b9\u5c3d\u91cf\u591a\u5730\u4f7f\u7528\u4ed6\u5386\u53f2\u8282\u70b9\u7684\u4fe1\u606f\u3002\n\t//\u65b9\u6cd5\u662f\u76f4\u63a5\u5c06\u5386\u53f2\u8282\u70b9\u7684\u6307\u9488\u7528\u6765\u8d4b\u503c\u65b0\u70b9\u6307\u9488\u3002sum+1\u7684\u539f\u56e0\u662f\u63d2\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u5fc5\u7136\u4f1a++\u3002 \n    if(l<r)if(x>mid)R[rt]=updata(R[pre],mid+1,r,x);//\u6709\u4e9bL\uff0cR\u7684\u5386\u53f2\u4fe1\u606f\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u6bd5\u7adf\u5728\u524d\u9762\u6709\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u4e86\u561b\u3002 \n    else L[rt]=updata(L[pre],l,mid,x);\n    //\u6240\u4ee5\u6211\u4eec\u9012\u5f52\u5730\u53bb\u5904\u7406\u53ef\u80fd\u6709\u53d8\u5316\u7684\u5386\u53f2\u8282\u70b9\uff0c\u65b9\u6848\u662f\u5efa\u7acb\u4e00\u4e32\u65b0\u7684\u8282\u70b9\uff0c\u4ed6\u4eec\u7684sum\u90fd\u662f\u539f\u6765\u52a01\uff0c\u540c\u6837\u8981\u628a\u4e4b\u524d\u76f4\u63a5\u8d4b\u503c\u7684\u6307\u9488\u6539\u6210\u6b63\u786e\u7684\u6307\u9488\u3002 \n\t//\u4e00\u5b9a\u662f\u4e00\u4e32\u8282\u70b9\u3002\u8003\u8651\u7ebf\u6bb5\u6811\u7684\u5f62\u6001\u3002\u63d2\u5165\u4e00\u4e2a\u70b9\u7684\u8bdd\uff0c\u4f1a\u6709logN\u4e2a\u8282\u70b9\u53d7\u5f71\u54cd\u3002 \n    return rt;//\u8fd4\u56de\u7684\u662f\u5f53\u524d\u533a\u95f4\u7684\u7f16\u53f7\uff0c\u53ef\u80fd\u7528\u6765\u66f4\u65b0L,R,T\u3002 \n}\nint query(int u,int v,int l,int r,int k){//\u8fd9\u4e2a\u64cd\u4f5c\u662f\u7528\u6765\u6c42\u7b2ck\u5927\u5143\u7d20\u5728b\u6570\u7ec4\u4e2d\u4e0b\u6807\u7684~\n    if(l==r)return l;//\u8fd9\u4e2a\u64cd\u4f5c\u7684\u5b9e\u73b0\u8fc7\u7a0b\u662f\u4e0d\u65ad\u5730\u7f29\u5c0f\u7b2ck\u5927\u53ef\u80fd\u5b58\u5728\u7684\u8303\u56f4\u3002\u5f53\u8303\u56f4\u7f29\u5c0f\u5230l=r\u4e5f\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u5e97\u4e00\u5b9a\u662f\u7b2ck\u5927 \n    int x=sum[L[v]]-sum[L[u]];//\u5982\u4f55\u6765\u7f29\u5c0f\u8303\u56f4\uff1a \u8003\u8651\u5f53\u5f53\u524d\u533a\u95f4\u7684\u524d\u4e00\u534a\u533a\u95f4\u7684\u5143\u7d20\u4e2a\u6570\u7684\u5dee\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8ek\u4e86\uff0c\u90a3\u4e48\u7b2ck\u5927\u4e00\u5b9a\u5728\u524d\u9762\u4e00\u534a\u533a\u95f4\u5185 \n    if(x>=k)return query(L[u],L[v],l,mid,k);//\u4e8e\u662f\u53ef\u4ee5\u518d\u628a\u533a\u95f4\u53d8\u6210\u524d\u4e00\u534a\u533a\u95f4\uff0c\u9012\u5f52\u8c03\u7528 \n    else return query(R[u],R[v],mid+1,r,k-x);//\u53cd\u4e4b\uff0c\u5982\u679ck\u6bd4x\u8981\u5927\uff0c\u5c31\u4e00\u5b9a\u5728\u540e\u4e00\u534a\u533a\u95f4\u91cc\u9762\u60f9\uff0c\u90a3\u4e48\u6211\u4eec\u53bb\u627e\u540e\u4e00\u534a\u533a\u95f4\u7684\u7b2ck-x\u5927\u5143\u7d20\u5c31\u597d\u4e86\u3002 \n}\n/*\n\t  \u9996\u5148\uff0c\u9700\u8981\u660e\u786e\uff0c\u4e3b\u5e2d\u6811\u662f\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u6bcf\u4e00\u6bb5\u533a\u95f4[l,r]\u7684\u6c42\u548c\u4ee3\u8868[l,r]\u7684\u6570\u4e00\u5171\u51fa\u73b0\u4e86\u51e0\u6b21\u3002 \n*/\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)cin>>a[i];\n    for(int i=1;i<=n;i++)b[i]=a[i];//\u62f7\u8d1d\u4e00\u4efd\u65b0\u6570\u7ec4\u3002\u56e0\u4e3aa\u8fd8\u8981\u5728\u4e0b\u9762\u7528\u6765\u67e5\u8be2rank\u3002 \n    sort(b+1,b+n+1);\n    lon=unique(b+1,b+n+1)-b-1;//lon\u662fb\u4e2d\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u3002\u8fd9\u4e00\u6b65\u5c06b\u6570\u7ec4\u53bb\u91cd\u4e86\u3002\u6ce8\u610f\u8fd9\u91cc\u8981\u51cf\u53bbb\u7684\u5730\u5740\u8fd8\u8981\u51cf1. \n    T[0]=build(1,lon);//T[0]\u5c31\u662f\u521d\u59cb\u6574\u533a\u95f4\u7f16\u53f7\u3002T[i]\u4ee3\u8868\u63d2\u5165i\u4e2a\u5143\u7d20\u540e\u7684\u6574\u533a\u95f4\u7f16\u53f7\u3002 \n    for(int i=1;i<=n;i++){\n        int t=lower_bound(b+1,b+lon+1,a[i])-b;//\u7c7b\u79bb\u6563\u5316\u5730\u5b58\u4e3b\u5e2d\u6811\uff0ct\uff1ab\u7684rank \n        T[i]=updata(T[i-1],1,lon,t);//\u4e00\u4e2a\u6570\u4e00\u4e2a\u6570\u5730\u52a0\u5165\u4e3b\u5e2d\u6811\u3002 \n    }\n    for(int i=1;i<=m;i++){\n        int x,y,z;\n        cin>>x>>y>>z;\n        cout<<b[query(T[x-1],T[y],1,lon,z)]<<endl;//\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\u5c31\u597d\u5566\u3002 \n    }\n}\n```",
        "postTime": 1540995167,
        "uid": 38055,
        "name": "Npse_D",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u524d\u7f6e\u77e5\u8bc6\u662f\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u4f60\u4e0d\u5b66\u4e5f\u6ca1\u6709\u592a\u5927\u7684\u5173\u7cfb\u56e0\u4e3a\u601d\u60f3\u4e0d\u662f\u5f88\u96be\u7406\u89e3\u3002\n\n------------\n\n\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u652f\u6301\u5386\u53f2\u8bb0\u5f55\u67e5\u8be2\uff0c\u8fd9\u662f\u5b83\u8d56\u4ee5\u89e3\u9898\u7684\u65b9\u6cd5\u3002\n\n\u5728\u672c\u9898\u4e2d\u601d\u8def\u662f\u5efa\u7acbn\u9897\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u8003\u8651\u5176\u4e2d\u4e24\u9897\uff1a\u7531\u4e8e\u8fd9n\u9897\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u90fd\u4e00\u6837\uff0c\u800c\u4e14\u533a\u95f4\u662f\u53ef\u4ee5\u52a0\u51cf\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5b83\u4eec\u76f8\u51cf\uff0c\u518d\u641c\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\u7b2cK\u5927\u4e86\u3002\n\n------------\n\n\u6211\u4eec\u6bcf\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u7684\u662f\u5143\u7d20\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u5047\u5982\u76f4\u63a5\u5efan\u9897\u6811\uff0c\u7a7a\u95f4\u4e0d\u80fd\u63a5\u53d7\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7b80\u5316\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e9b\u533a\u95f4\u90fd\u662f[1,i]\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u5de6\u534a\u90e8\u5206\u4e8b\u5b9e\u4e0a\u90fd\u662f\u76f8\u540c\u7684\uff0c\u6bcf\u4e00\u6b21\u5efa\u7acb\u65b0\u7684\u6811\u6211\u4eec\u53ea\u7528\u53f3\u534a\u90e8\u5206\u65b0\u5efa\uff0c\u91cd\u590d\u5229\u7528\u5de6\u534a\u90e8\u5206\u5373\u53ef\uff0c\u8fd9\u6837\u7684\u8bdd\u7a7a\u95f4\u5c31\u53ef\u4ee5\u63a5\u53d7\u4e86\u3002\n\n------------\n\n### \u91cd\u8981\u53d8\u91cf\n\n```cpp\nint a[N],b[N],T[N];\nint sum[N*DEPTH],L[N*DEPTH],R[N*DEPTH];\n```\n\na\u6570\u7ec4\u662f\u9898\u76ee\u7ed9\u51fa\u7684\u6570\u7ec4\u3002\n\nb\u6570\u7ec4\u662f\u7ecf\u8fc7\u6392\u5e8f\u53bb\u91cd\u4e4b\u540e\u7684\u6570\u7ec4\u3002\n\nT\u6570\u7ec4\u50a8\u5b58\u6bcf\u4e00\u9897\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\uff08\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u4e0d\u4e00\u6837\uff0c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u5efa\u6811\u548c\u66f4\u65b0\u90fd\u6709\u8fd4\u56de\u503c\uff09\u3002\n\nsum\u6570\u7ec4\u5c31\u662f\u533a\u95f4\u4e2d\u6570\u7684\u4e2a\u6570\u3002\n\nL\u548cR\u8868\u793a\u5de6\u513f\u5b50\u4e0e\u53f3\u513f\u5b50\u3002\n\n------------\n\n### \u5efa\u6811\n\n```cpp\ninline int build(int l,int r){\n\tint pos=tot++,mid=(l+r)>>1;\n\tif(l<r){\n\t\tbuild(l,mid),build(mid+1,r);\n\t}\n\treturn pos;\n}\n```\n\n\u9996\u5148\u5148\u65b0\u5efa\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u5efa\u6811\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\u3002\n\n\u6ce8\u610f\u51fd\u6570\u672b\u5c3e\u8fd4\u56de\u65b0\u5efa\u8282\u70b9\u7684\u7f16\u53f7\uff08\u7528\u4e8eT\u6570\u7ec4\u7684\u8d4b\u503c\uff09\u3002\n\n------------\n\n### \u66f4\u65b0\n\n```cpp\ninline int update(int l,int r,int v,int pre){\n\tint pos=tot++,mid=(l+r)>>1;\n\tL[pos]=L[pre],R[pos]=R[pre],sum[pos]=sum[pre]+1;\n\tif(l<r){\n\t\tif(v<=mid)L[pos]=update(l,mid,v,L[pre]);\n\t\telse R[pos]=update(mid+1,r,v,R[pre]);\n\t}\n\treturn pos;\n}\n```\n\n\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u7684\u66f4\u65b0\u76f8\u6bd4\uff0c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u5c11\u4e86\u4e00\u4e2apos\u8868\u793a\u5f53\u524d\u4f4d\u7f6e\uff0c\u591a\u4e86\u4e00\u4e2apre\u8868\u793a\u4e4b\u524d\u7684\u3002\n\n\u9996\u5148\u8fd8\u662f\u5148\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff08\u6bd5\u7adf\u6211\u4eec\u53ef\u6301\u4e45\u5316\u5c31\u662f\u4e00\u9897\u9897\u6811\uff09\uff0c\u7136\u540e\u65b0\u7684\u8fd9\u4e00\u4e2a\u90e8\u5206\u5148\u8fde\u5411\u4e4b\u524d\u90a3\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u518d\u6839\u636e\u66f4\u65b0\u7684\u503c\u53bb\u91cd\u65b0\u786e\u5b9a\u65b0\u7684\u5de6\u53f3\u513f\u5b50\u3002\n\n\u7136\u540e\u6700\u540e\u8fd4\u56de\u8282\u70b9\u7f16\u53f7\uff08\u4e3a\u4e86\u9876\u4e0a\u7684\u786e\u5b9a\u6d41\u7a0b\uff09\u3002\n\n------------\n\n### \u67e5\u8be2\n\n```cpp\ninline int query(int phase1,int phase2,int l,int r,int k){\n\tint t=sum[L[phase2]]-sum[L[phase1]],mid=(l+r)>>1;\n\tif(l<r){\n\t\tif(k<=t)return query(L[phase1],L[phase2],l,mid,k);\n\t\treturn query(R[phase1],R[phase2],mid+1,r,k-t);\n\t}\n}\n```\n\n\u67e5\u8be2\u64cd\u4f5c\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u6709\u70b9\u50cf\u5dee\u5206\u3002\n\n\u5c31\u662f\u6211\u4eec\u6709\u4e24\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u62ff\u4ed6\u4eec\u76f8\u51cf\uff0c\u4e00\u8def\u5f80\u4e0b\u627e\uff0c\u6700\u540e\u62ff\u5230\u7b54\u6848\u5373\u53ef\u3002\n\n------------\n\n\u7136\u540e\u5c31\u5199\u5b8c\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std; \nnamespace ElderTree{\n\tconst qwq N=200200,DEPTH=23;\n\tinline qwq read(){\n\t\tqwq x=0,f=1;char c=getchar();\n\t\tfor(;c<'0'||c>'9';c=getchar())if(c=='-')f=-1;\n\t\tfor(;c>='0'&&c<='9';c=getchar())x=x*10+c-'0';\n\t\treturn x*f;\n\t}\n\tqwq n,m,q,tot;\n\tqwq a[N],b[N],T[N];\n\tqwq sum[N*DEPTH],L[N*DEPTH],R[N*DEPTH];\n\tinline qwq build(qwq l,qwq r){\n\t\tqwq pos=tot++,mid=(l+r)>>1;\n\t\tif(l<r){\n\t\t\tbuild(l,mid),build(mid+1,r);\n\t\t}\n\t\treturn pos;\n\t}\n\tinline qwq update(qwq l,qwq r,qwq v,qwq pre){\n\t\tqwq pos=tot++,mid=(l+r)>>1;\n\t\tL[pos]=L[pre],R[pos]=R[pre],sum[pos]=sum[pre]+1;\n\t\tif(l<r){\n\t\t\tif(v<=mid)L[pos]=update(l,mid,v,L[pre]);\n\t\t\telse R[pos]=update(mid+1,r,v,R[pre]);\n\t\t}\n\t\treturn pos;\n\t}\n\tinline qwq query(qwq phase1,qwq phase2,qwq l,qwq r,qwq k){\n\t\tqwq t=sum[L[phase2]]-sum[L[phase1]],mid=(l+r)>>1;\n\t\tif(l<r){\n\t\t\tif(k<=t)return query(L[phase1],L[phase2],l,mid,k);\n\t\t\treturn query(R[phase1],R[phase2],mid+1,r,k-t);\n\t\t}\n\t}\n}\nusing namespace ElderTree;\nqwq main(){\n    n=read(),q=read();\n    for(qwq i=1;i<=n;++i)a[i]=read(),b[i]=a[i];\n    sort(b+1,b+n+1),m=unique(b+1,b+n+1)-1-b,T[0]=build(1,m);\n    for(qwq i=1;i<=n;++i){\n        qwq t=lower_bound(b+1,b+m+1,a[i])-b;\n        T[i]=update(1,m,t,T[i-1]);\n    }\n    while(q--){\n        qwq x,y,z;\n        x=read(),y=read(),z=read();\n        cout<<b[query(T[x-1],T[y],1,m,z)]<<endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1535978178,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u610f\u601d\u662f\u53ef\u4ee5\u67e5\u8be2\u5386\u53f2\u8bb0\u5f55\u7684\u7ebf\u6bb5\u6811\u3002\u53c8\u53eb\u4e3b\u5e2d\u6811\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bb0\u5f55\u4e0d\u540c\u7684\u6839\u8282\u70b9\uff0c\u5e76\u5728\u6bcf\u4e00\u4e2a\u66f4\u65b0\u5230\u7684\u8282\u70b9\u5904\u65b0\u5efa\u5fc5\u8981\u7684\u8282\u70b9\u3002\u8be2\u95ee\u4e0d\u540c\u7248\u672c\u7684\u4e3b\u5e2d\u6811\uff0c\u53ea\u9700\u8981\u8fdb\u5165\u4e0d\u540c\u7684\u6839\u8282\u70b9\u5373\u53ef\u3002\n\n\u4f8b\u9898\uff1a\n\n\u7ed9\u5b9an,m,\u8f93\u5165n\u4e2a\u6570\u7ec4\u6210\u7684\u6570\u5217\uff0c\u6709m\u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95eel,r\u8fd9\u4e2a\u533a\u95f4\u4e2d\uff0c\u7b2ck\u5c0f\u7684\u6570\u7684\u503c\u3002\n\n\u5206\u6790\uff1a\n\n\u8fd9\u4e2a\u9898\u53ef\u4ee5\u5de7\u5999\u8fd0\u7528\u4e3b\u5e2d\u6811\u6765\u89e3\u9898\u3002\n\n\u9996\u5148\u5bf9\u6570\u5217\u8fdb\u884c\u79bb\u6563\u5316\u3002\n\n\u6211\u4eec\u4ee4\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u4ee3\u8868\u6392\u540d\u4e3a[i,j]\u533a\u95f4\u5185\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u5047\u5982\u6211\u4eec\u6bcf\u52a0\u5165\u4e00\u4e2a\u6570\uff0c\u5c31\u65b0\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u8fd9\u4e00\u523b\u7ebf\u6bb5\u6811\u5927\u90e8\u5206\u4fe1\u606f\u4e0e\u524d\u4e00\u68f5\u4e00\u81f4\uff0c\u53ea\u662f\u65b0\u52a0\u5165\u7684\u4e00\u4e2a\u6570\u76f8\u5173\u7684\u4f4d\u7f6e\u7684\u4fe1\u606f\u53d1\u751f\u4e86\u6539\u53d8\u3002\u76f8\u5f53\u4e8e\u7b2ci\u68f5\u7ebf\u6bb5\u6811\uff0c\u90fd\u7ef4\u62a4\u7684\u662f[1,i]\u524di\u4e2a\u6570\u7684\u4fe1\u606f\u3002\n\n\u53d1\u73b0\u5bf9\u4e8e\u533a\u95f4\u67e5\u8be2[l,r]\u6765\u8bf4\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u6392\u540d\u4f4d\u7f6e\u4e0a\u7684\u6570\uff0c\u5b83\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5c31\u662f\u7b2cr\u68f5\u7ebf\u6bb5\u6811\u4e0a\u51fa\u73b0\u7684\u6b21\u6570\u51cf\u53bb\u7b2cl-1\u68f5\u7ebf\u6bb5\u6811\u4e0a\u51fa\u73b0\u7684\u6b21\u6570\u3002\u540c\u7406\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u524d\u7f00\u548c\u601d\u60f3\u7b97\u51fa\u6765\u5f53\u8be2\u95ee[l,r]\u65f6\uff0c\u67d0\u4e2a\u6392\u540d\u533a\u95f4[i,j]\u91cc\uff0c\u6240\u6709\u7684\u6570\u51fa\u73b0\u7684\u603b\u6b21\u6570\u3002\uff08\u53ea\u9700\u8981\u8ba9\u4e24\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u4e2d\u7684\u5bf9\u5e94\u533a\u95f4\u7684sum\u503c\u76f8\u51cf\u5373\u53ef\u3002\uff09\n\n\u8fd9\u6837\u6211\u4eec\u5c06\u6570\u5217\u4ece1\u5230n\u626b\u4e00\u904d\uff0c\u6bcf\u4e00\u6b21\u90fd\u5c06a[i]\u5bf9\u5df2\u7ecf\u7684\u79bb\u6563\u5316\u7684\u503c\uff08\u5373\u6392\u540d\uff09\u7684\u4f4d\u7f6e\u52a0\u4e0a1\uff0c\uff08\u5e38\u89c4\u7ebf\u6bb5\u6811\u64cd\u4f5c\uff09\u4f46\u662f\u6bcf\u6b21\u65b0\u5efa\u4e00\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u4f1a\u4f7f\u65f6\u7a7a\u590d\u6742\u5ea6\u7206\u70b8\u3002\n\n\u7136\u800c\u6211\u4eec\u53d1\u73b0\uff0c\u76f8\u90bb\u4e24\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u4e4b\u95f4\u8bb0\u5f55\u7684\u4fe1\u606f\u57fa\u672c\u76f8\u5dee\u65e0\u51e0\uff0c\u91cd\u65b0\u590d\u5236\u4e00\u904d\u5b9e\u5728\u662f\u6d6a\u8d39\u3002\n\n\u6240\u4ee5\u91c7\u7528\u4e3b\u5e2d\u6811\u64cd\u4f5c\uff0c\u5c31\u662f\u4ec5\u6539\u53d8logn\u4e2a\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u65b0\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u5177\u4f53\u7684\u64cd\u4f5c\u662f\uff1a\n\n1.\u5e38\u89c4add\u64cd\u4f5c\u4e2d\uff0c\u6bcf\u65b0\u5230\u4e00\u4e2a\u65e7\u8282\u70b9\uff0c\u5c31\u65b0\u5efa\u4e00\u4e2a\u540c\u6837\u7684\u8282\u70b9\uff0clson\uff0crson\u90fd\u4e0d\u53d8\uff0c\u53ea\u662f\u8fd9\u4e2a\u533a\u95f4\u5185\u7ef4\u62a4\u7684sum\uff08\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff09\u8981\u6bd4\u4e4b\u524d\u591a\u4e00\u4e2a\u3002\n\n2.\u4e4b\u540e\uff0c\u518d\u6839\u636e\u5f85\u52a0\u5165\u70b9\u4e0emid\u7684\u5173\u7cfb\uff0c\u66f4\u65b0\u65b0\u8282\u70b9\u5de6\u4e8c\u5b50\u6216\u8005\u53f3\u513f\u5b50\u3002\n\n\u5f62\u8c61\u7684\u7406\u89e3\u4e00\u4e0b\uff0c\u5c31\u662f\u5728\u539f\u59cb\u7ebf\u6bb5\u6811\u4e0a\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u6cbf\u7740\u52a0\u5165\u8fd9\u4e2a\u6570\u7684\u8def\u5f84\u4e0a\u65b0\u5efa\u4e86\u4e00\u6761\u7ebf\u3002\u597d\u50cf\u8d34\u4e86\u4e00\u5c42\u76ae\u3002\n\n\u67e5\u8be2\u64cd\u4f5c\u662f\uff1a\n\n1.\u540c\u65f6\u5904\u7406\u8bbf\u95ee\u4e24\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u76f4\u63a5\u5904\u7406sum\u7684\u5dee\u503cx\u3002\n\n2.\u5982\u679c\u8fd9\u4e2a\u5dee\u503c\u8981\u5927\u4e8e\u7b49\u4e8ek\uff0c\u5219\u7b2ck\u5927\u7684\u6570\u4e00\u5b9a\u5728\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u4e8c\u5b50\u7ef4\u62a4\u7684\u4f4d\u7f6e\u91cc\uff1b\u53cd\u4e4b\uff0c\u8be2\u95ee\u53f3\u513f\u5b50\u4e2d\u7b2ck-x\u5927\u7684\u6570\u5373\u53ef\u3002\n\n\u8be6\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+10;\nint cnt;\nint n,m;\nint id,root[N];\nint a[N],b[N];\nint li(int x)\n{\n\tint k=lower_bound(a+1,a+cnt+1,x)-a;\n\treturn k;\n}\nstruct node{\n\tint ls,rs;\n\tint sum;\n\t#define ls(x) t[x].ls\n\t#define rs(x) t[x].rs\n\t#define s(x) t[x].sum\n}t[18*N];\nvoid pushup(int x)\n{\n\ts(x)=s(rs(x))+s(ls(x));\n}\nvoid build(int x,int l,int r)\n{\n\t//cout<<\" build \"<<l<<\" \"<<r<<\" \"<<x<<endl;\n\tif(l==r)\n\t{\n\t\tls(x)=rs(x)=-1;\n\t\ts(x)=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;ls(x)=++id;rs(x)=++id;\n\tbuild(ls(x),l,mid);\n\tbuild(rs(x),mid+1,r);\n}\nint add(int x,int l,int r,int to)\n{\n\t//cout<<\" add \"<<l<<\" \"<<r<<\" \"<<x<<endl;\n\tint now=++id;\n\tls(now)=ls(x),rs(now)=rs(x),s(now)=s(x)+1;\n\tif(l<r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(to<=mid) ls(now)=add(ls(x),l,mid,to);\n\t\telse rs(now)=add(rs(x),mid+1,r,to);\n\t}\n\treturn now;\n}\nint query(int u,int v,int l,int r,int k)\n{\n\t//cout<<\" query \"<<l<<\" \"<<r<<\" old: \"<<u<<\" new: \"<<v<<endl;\n\tif(l==r) return l;\n\tint x=s(ls(v))-s(ls(u));\n\tint mid=(l+r)>>1;\n\tif(x<k) return query(rs(u),rs(v),mid+1,r,k-x);\n\telse return query(ls(u),ls(v),l,mid,k);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]),b[i]=a[i];\n\tsort(a+1,a+n+1);\n\tcnt=unique(a+1,a+n+1)-a-1;\n\t\n\tbuild(++id,1,cnt);\n\troot[0]=1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\troot[i]=add(root[i-1],1,cnt,li(b[i]));\n\t}\n\tint l,r,z;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&l,&r,&z);\n\t\tint p=query(root[l-1],root[r],1,cnt,z);\n\t\tprintf(\"%d\\n\",a[p]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1525947427,
        "uid": 56672,
        "name": "\u67ab\u6797\u665a",
        "ccfLevel": 9,
        "title": "\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u5199\u9898\u89e3\u62a2\u4e00\u8840.\n\n\u6240\u8c13\u4e3b\u5e2d\u6811\u6c42\u533a\u95f4\u7b2ck\u5c0f,\u5c31\u662f\u7ed9\u7b2c1~i(0<=i<=n)\u4e2a\u5143\u7d20\u5404\u5efa\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811.\u4f46\u662f\u5982\u679c\u76f4\u63a5\u5efa\u80af\u5b9a\u4f1aMLE,\u4f46\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u5efa1~i\u4e2a\u5143\u7d20\u7684\u7ebf\u6bb5\u6811\u65f6,\u53ea\u7528\u4ece1~(i-1)\u4e2a\u5143\u7d20\u7684\u7ebf\u6bb5\u6811\u4fee\u6539logn\u4e2a\u8282\u70b9\u5f97\u6765,\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u53ea\u9700\u65b0\u5efalogn\u4e2a\u8282\u70b9.\n\n\u628a\u8fd9\u4e9b\u6811\u5efa\u51fa\u6765\u540e,\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u7ebf\u6bb5\u6811\u662f\u53ef\u4ee5\u51cf\u7684,\u5373l~r\u7684\u7ebf\u6bb5\u6811\u53ef\u4ee5\u4ece1~r\u7684\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u51cf\u53bb1~(l-1)\u7684\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5f97\u5230,\u8fd9\u6837\u6211\u4eec\u6c42\u7b2ck\u5c0f\u65f6\u53ef\u4ee5\u5728\u6811\u4e0a\u4e8c\u5206\u5f97\u5230\u7ed3\u679c.\n\n\u5f53\u7136\u5982\u679c\u8981\u5efa\u6743\u503c\u7ebf\u6bb5\u6811,\u9700\u8981\u5148\u79bb\u6563\u6570\u636e.\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=100010;\nint a[N],s[N],rt[N],ls[N*20],rs[N*20],val[N*20],sz,cnt;\nvoid build_tree(int &p,int L,int R){//\u5efa\u4e00\u68f5\u7a7a\u7ebf\u6bb5\u6811\n    p=++cnt; \n    if(L!=R){\n        int mid=(L+R)/2; build_tree(ls[p],L,mid);\n        build_tree(rs[p],mid+1,R);\n    }\n}\nvoid insert(int &p,int cmp,int x,int L,int R){//\u4ece\u7b2ci-1\u4e2a\u7ebf\u6bb5\u6811\u5f97\u5230\u7b2ci\u4e2a\u7ebf\u6bb5\u6811\n    p=++cnt; ls[p]=ls[cmp]; rs[p]=rs[cmp]; val[p]=val[cmp]+1;\n    if(L!=R){\n        int mid=(L+R)/2;\n        if(x<=mid) insert(ls[p],ls[cmp],x,L,mid);\n        else insert(rs[p],rs[cmp],x,mid+1,R);\n    }\n}\nint query_kth(int l,int r,int L,int R,int k){//\u67e5\u8be2\u533a\u95f4\u7b2ck\u5c0f\n    if(L==R) return L; int num=val[ls[r]]-val[ls[l]],mid=(L+R)/2;\n    if(k<=num) return query_kth(ls[l],ls[r],L,mid,k);\n    else return query_kth(rs[l],rs[r],mid+1,R,k-num);\n}\nint main(){\n    int n,m; scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i){\n        scanf(\"%d\",&a[i]); s[i]=a[i];\n    }\n    sort(s+1,s+n+1); sz=unique(s+1,s+n+1)-s-1;//\u79bb\u6563\u6570\u636e\n    build_tree(rt[0],1,sz);\n    for(int i=1;i<=n;++i) insert(rt[i],rt[i-1],lower_bound(s+1,s+sz+1,a[i])-s,1,sz);\n    for(int i=1;i<=m;++i){\n        int l,r,k; scanf(\"%d%d%d\",&l,&r,&k);\n        printf(\"%d\\n\",s[query_kth(rt[l-1],rt[r],1,sz,k)]);\n    }\n    return 0;\n}\n```",
        "postTime": 1501502562,
        "uid": 27986,
        "name": "jxcakak",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "[\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09](https://www.luogu.org/problem/P3834)\n\n\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u7ed9\u4e00\u6bb5\u533a\u95f4\uff0c\u6c42\u533a\u95f4$k$\u5c0f\u503c\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u89e3\u6cd5\uff0c\u6bd4\u5982\u8bf4~~\u66b4\u529b~~\u6811\u5957\u6811\u4e4b\u7c7b\u7684\u3002\u4e0d\u8fc7\u6211\u5f88\u4e45\u4ee5\u524d\u5199\u7684\u6811\u5957\u6811~~\u5df2\u7ecf\u5fd8\u4e86~~\u4e00\u76f4$\\text{A}$\u4e0d\u4e86\uff0c\u6240\u4ee5\u5c31\u6765\u5b66\u4e3b\u5e2d\u6811\u4e86\u3002\n\n\u4e3b\u5e2d\u6811\uff0c\u53c8\u540d\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u7531\u53d1\u660e\u8005HJT\u800c\u6709\u201c\u4e3b\u5e2d\u6811\u201d\u4e4b\u540d~~\u662f\u8c01\u4e0d\u7528\u8bf4\u4e86\u5427\uff1f~~\n\n\u90a3\u6211\u4eec\u8be5\u600e\u4e48\u628a\u4e00\u9897\u7ebf\u6bb5\u6811\u53ef\u6301\u4e45\u5316\u5462\uff1f\u5957\u7528\u53ef\u6301\u4e45\u5316$\\text{Trie}$\u7684\u601d\u8def\uff0c\u6211\u4eec\u9700\u8981\u2014\u2014\u52a8\u6001\u5f00\u70b9\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u4e4b\u540e\u7684\u7406\u89e3\uff0c\u5148\u628a\u4e3b\u51fd\u6570\u653e\u4e0a\u6765\n\n```cpp\n\\\\T\u662f\u6211\u5c01\u88c5\u4e86\u7684\u4e3b\u5e2d\u6811\n\nint a[Maxn], b[Maxn];\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++)\n        cin >> a[i], b[i] = a[i];\n    sort(b + 1, b + n + 1);\n    //\n    int size = unique(b + 1, b + n + 1) - b - 1;\n    //\u79bb\u6563\u5316\u5e76\u53bb\u91cd\n    T.build(T.root[0], 1, size);//\u5efa\u7acb\u4e00\u68f5\u7a7a\u7684\u7ebf\u6bb5\u6811\n    for (int i = 1; i <= n; i++)\n        T.change(T.root[i], T.root[i - 1], 1, size,\n                 (lower_bound(b + 1, b + size + 1, a[i]) - b));\n    while (m --> 0) {\n        int x, y, k;\n        cin >> x >> y >> k;\n        cout << b[T.query(T.root[x - 1], T.root[y], 1, size, k)] << endl;\n    }\n    return 0;\n}\n```\n\n\u4ee5\u53ca$\\text{T}$\u91cc\u9762\u7684\u4e3b\u5e2d\u6811\u7684\u8282\u70b9\u7684\u5b9a\u4e49\n\n```cpp\nstruct Node {\n        int l, r, sum;//\u56e0\u4e3a\u65e0\u6cd5\u627e\u51fa\u8282\u70b9\u6240\u4ee3\u8868\u7684l\u548cr\uff0c\u6240\u4ee5\u8981\u989d\u5916\u50a8\u5b58\n        //sum\u4fdd\u5b58l~r\u5185\u7ed3\u70b9\u4e2a\u6570\n    } node[Maxn << 5];\nint cnt;//\u50a8\u5b58\u52a8\u6001\u52a0\u70b9\u7684\u8282\u70b9\u7f16\u53f7\n```\n\n\u51fa\u73b0\u5728\u4e3b\u51fd\u6570\u91cc\u9762\u7684\u4e00\u5171\u6709\u4e09\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u4e00\u4e2a\u4e2a\u6765\u8bb2\u3002\n\n\n\n------------\n\n\n## build(int& p, int l, int r)\n\n\n\u8fd9\u4e2a\u64cd\u4f5c\u662f\u4e3a\u4e86\u5efa\u7acb\u4e00\u68f5\u7a7a\u6811\uff0c\u548c\u4e00\u822c\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a\u3002\n\n```cpp\nvoid build(int& p, int l, int r) {\n        p = ++cnt;\n        if (l == r)\n            return;\n        int mid = (l + r) / 2;\n        build(node[p].l, l, mid);\n        build(node[p].r, mid + 1, r);\n    }\n```\n\n\u4f46\u4e00\u5b9a\u8981\u6ce8\u610f\u7684\u662f\uff1a**\u6211\u4eec\u4f20\u5165\u7684$p$\u662f\u5f15\u7528\u7684**\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u8981\u52a8\u6001\u52a0\u70b9\u7684\uff0c\u8fd9\u5c31\u6d89\u53ca\u5230\u65b0\u5efa\u8282\u70b9\u7684\u7f16\u53f7\u8981\u8d4b\u503c\u56de\u5b83\u7684\u7236\u8282\u70b9\u7684\u64cd\u4f5c\u4e86\u3002\u6240\u4ee5\u8bf4\u6d89\u53ca\u8981\u52a8\u6001\u52a0\u70b9\u7684\u5730\u65b9\uff0c\u5c31\u4e00\u5b9a\u8981\u7528\u5f15\u7528\u4e86\u3002\n\n\n\n------------\n\n\n## change(int& p, int q, int l, int r, int x)\n\n\u8fd9\u4e2a\u5c31\u6bd4\u8f83\u590d\u6742\u4e86\u3002\n\n```cpp\nvoid change(int& p, int q, int l, int r, int x) {\n        p = ++cnt;\n        node[p] = node[q];\n        node[p].sum += 1;\n        if (l == r)\n            return;\n        int mid = (l + r) / 2;\n        if (x <= mid)\n            change(node[p].l, node[q].l, l, mid, x);\n        else\n            change(node[p].r, node[q].r, mid + 1, r, x);\n    }\n```\n\n\u9996\u5148\uff0c$x$\u4f20\u5165\u7684\u662f\u5728\u533a\u95f4\u4e2d\u7684\u6392\u540d\u3002\u6211\u4eec\u8981\u7ed9\u5b83\u63d2\u5165\u5230\u6392\u540d\u4e3a$x$\u7684\u5730\u65b9\u3002\u56e0\u4e3a\u5df2\u7ecf\u79bb\u6563\u5316\u4e86\uff0c\u6240\u4ee5$l$\u5230$r$\u4e5f\u8868\u793a\u6392\u540d\u3002\u56e0\u6b64\u6211\u4eec\u76f4\u63a5\u628a$x$\u63d2\u5165\u5230$x$\u7684\u5730\u65b9\u5c31\u884c\u4e86\uff08\u50cf\u666e\u901a\u7ebf\u6bb5\u6811\u4e00\u6837\uff09\n\n\u5bf9\u4e8e\u4f20\u8fdb\u6765\u7684\uff0c\u6211\u4eec\u5148\u8981\u7ed9\u4ed6**\u52a8\u6001\u52a0\u70b9**\uff0c\u7136\u540e\u628a\u539f\u6765\u7ed3\u70b9\u7684\u4e1c\u897f\u7ed9\u8d4b\u56de\u53bb\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u4e00\u4e2a\u4e2a\u6743\u503c\u63d2\u5165\u7684\uff0c\u6545$node[p].sum$\u8981\u52a0\u4e00\n\n\n\n------------\n\n\n## query(int p, int q, int l, int r, int k)\n\n\u8fd9\u4e2a\u4e0d\u7528\u4fee\u6539\u8282\u70b9\u4fe1\u606f\uff0c\u6240\u4ee5\u5c31\u4e0d\u7528\u5f15\u7528\u4e86\uff08\u5f15\u7528\u4e86\u4e5f\u6ca1\u5173\u7cfb\uff09\u3002\n\n```cpp\nint query(int p, int q, int l, int r, int k) {\n        if (l == r)\n            return l;\n        int mid = (l + r) / 2;\n        int tmp = node[node[q].l].sum - node[node[p].l].sum;\n        if (tmp >= k)\n            return query(node[p].l, node[q].l, l, mid, k);\n        else\n            return query(node[p].r, node[q].r, mid + 1, r, k - tmp);\n    }\n```\n\n\u8fd9\u91cc\u7684\u91cd\u70b9\u662f$\\text{tmp}$\u8fd9\u4e2a\u53d8\u91cf\u3002\n\n\u5bf9\u4e0e$p$\u548c$q$\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4f20\u5165\u7684\u662f$1$ ~ $(l-1)$\u548c$1$ ~ $r$\u3002\u56e0\u4e3a\u6bcf\u68f5\u4e3b\u5e2d\u6811\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u5b83\u662f\u53ef\u51cf\u7684\u3002\u6240\u4ee5\u8bf4$node[node[q].l].sum - node[node[p].l].sum$\uff0c\u4e5f\u5c31\u662f$\\text{tmp}$\uff0c\u4ee3\u8868\u7684\u662f$p$~$q$\u4e4b\u95f4\u7684\u5de6\u8fb9\u7684~~\u8bcd\u7a77~~\u6570\u7684\u4e2a\u6570\u3002\u4e8e\u662f\u5c31\u6709\u4e86\u4e0a\u9762\u90a3\u5806\u4ee3\u7801\u3002\u540e\u9762\u7684$\\text{return l}$\uff0c\u5176\u5b9e\u662f\u8fd4\u56de\u7684\u79bb\u6563\u5316\u540e\u7684\u503c\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\nconst int Maxn = 210001;\nusing namespace std;\n\nclass HJTTree {\n    struct Node {\n        int l, r, sum;\n    } node[Maxn << 5];\n    int cnt;\n\n   public:\n    int root[Maxn];\n    void build(int& p, int l, int r) {\n        p = ++cnt;\n        if (l == r)\n            return;\n        int mid = (l + r) / 2;\n        build(node[p].l, l, mid);\n        build(node[p].r, mid + 1, r);\n    }\n    void change(int& p, int q, int l, int r, int x) {\n        p = ++cnt;\n        node[p] = node[q];\n        node[p].sum += 1;\n        if (l == r)\n            return;\n        int mid = (l + r) / 2;\n        if (x <= mid)\n            change(node[p].l, node[q].l, l, mid, x);\n        else\n            change(node[p].r, node[q].r, mid + 1, r, x);\n    }\n    int query(int p, int q, int l, int r, int k) {\n        if (l == r)\n            return l;\n        int mid = (l + r) / 2;\n        int tmp = node[node[q].l].sum - node[node[p].l].sum;\n        if (tmp >= k)\n            return query(node[p].l, node[q].l, l, mid, k);\n        else\n            return query(node[p].r, node[q].r, mid + 1, r, k - tmp);\n    }\n} T;\n\nint a[Maxn], b[Maxn];\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++)\n        cin >> a[i], b[i] = a[i];\n    sort(b + 1, b + n + 1);\n    int size = unique(b + 1, b + n + 1) - b - 1;\n    T.build(T.root[0], 1, size);\n    for (int i = 1; i <= n; i++)\n        T.change(T.root[i], T.root[i - 1], 1, size,\n                 (lower_bound(b + 1, b + size + 1, a[i]) - b));\n    while (m --> 0) {\n        int x, y, k;\n        cin >> x >> y >> k;\n        cout << b[T.query(T.root[x - 1], T.root[y], 1, size, k)] << endl;\n    }\n    return 0;\n}\n```\n\n\n\u5b8c\u7ed3\u6492\u82b1~~ $\\space \\space \\space \\space \\space$(* \"\uff65\u2200\uff65)\uff89\u2015\u2015\u25ce\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1573552135,
        "uid": 84788,
        "name": "Jeblqr",
        "ccfLevel": 5,
        "title": "\u4e3b\u5e2d\u6811"
    },
    {
        "content": "\u6700\u8fd1\u521a\u5b66\u7684\u4e3b\u5e2d\u6811  \n\u6765\u6574\u7406\u4e00\u53d1\u601d\u8def  \n\u9996\u5148\u4e3b\u5e2d\u6811\u662f\u91c7\u7528\u4e00\u79cd\u516c\u7528\u9876\u70b9\u7684\u601d\u60f3\u4e0d\u540c\u8282\u70b9\u76f4\u63a5\u5206\u5f00\u5b58  \n\u9996\u5148\u4e8b\u5148\u5efa\u597d\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u79bb\u6563\u5316\u8fd9\u5c31\u4e0d\u7528\u8bf4\u4e86\u5427\uff09  \n\u7136\u540e\u6211\u4eec\u77e5\u9053\u5355\u70b9\u4fee\u6539\u53ea\u4f1a\u6539\u53d8logn\u7684\u8282\u70b9\u90a3\u4e48\u5c31\u65b0\u5efa\u4e00\u4e2a\u6839  \n\u5728\u5148\u524d\u90a3\u4e2a\u6839\u7684\u57fa\u7840\u4e0a\u5c06\u4fee\u6539\u540e\u7684\u8282\u70b9\u5b58\u8d77\u6765  \n\u53ef\u80fd\u4f1a\u95ee  \u90a3\u6ca1\u4fee\u6539\u7684\u4f1a\u8d70\u4e0d\u5230\u554a\u5176\u5b9e\u5728\u4e00\u8fdbchange\u51fd\u6570\u7684\u65f6\u5019\u65b0\u5efa\u7684\u6811\u6839\u5df2\u7ecf\u628a\u539f\u6811\u6839\u7684\u5de6\u53f3\u513f\u5b50\u5df2\u7ecf\u8bb0\u4e0b\u6765\u4e86  \n\u9700\u8981\u4fee\u6539\u5c31\u8d70\u4e0b\u53bb  \u4e0d\u9700\u8981\u4fee\u6539\u5176\u5b9e\u5c31\u53ea\u4f1a\u8d70\u539f\u6765\u90a3\u68f5\u6811  \n\n\u6c42\u901a\u8fc7\uff01\n\n\u5bf9\u4e8e\u8fd9\u9898\uff0c\u6839\u636e\u5e8f\u5217\u7684\u987a\u5e8f\u5efa\u7acb\u4e00\u68f5\u4e3b\u5e2d\u6811\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5927\u5c0f\u5728 L,R \u7684\u6570\u5b57\u603b\u548c\uff0c\u5bf9\u4e8e\u8be2\u95ee\u7684\u533a\u95f4 s,t \u5176\u5b9e\u5c31\u662f\u4ee4\u4e24\u68f5\u7ebf\u6bb5\u6811rt t - rt s-1\uff08\u4e24\u68f5\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u76f8\u51cf\uff09\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u7ebf\u6bb5\u6811x\uff0c\u5176\u5b9e\u5c31\u662f\u5728x\u4e2d\u627e\u7b2ck\u5c0f\u800c\u5df2\uff0c\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u95ee\u9898\u3002\u5f53\u7136\uff0c\u8fd9\u91cc\u6bcf\u4e2a\u8282\u70b9\u90fd\u76f8\u51cf\u53ea\u662f\u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981logn\u7684\u8282\u70b9\u9700\u8981\u76f8\u51cf\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u5b9e\u73b0\uff1a\n```cpp\n#include<bits/stdc++.h>  \n#define int long long  \n#define mid (ll+rr)>>1  \nusing namespace std;  \nint T[4010000],tot,n,Q,s[4001000],b1[4010000],L[4010000],R[4010000],sum[4010000];  \nint build(int ll,int rr)  \n{  \n\tint rt=++tot;  \n\tif(ll<rr)  \n\t{   \n\t\tL[rt]=build(ll,mid);  \n\t\tR[rt]=build(mid+1,rr);  \n\t}  \n\treturn rt;  \n}  \nint change(int pre,int ll,int rr,int x)  \n{  \n\tint rt=++tot;  \n\tL[rt]=L[pre];R[rt]=R[pre];sum[rt]=sum[pre]+1;\n\tif(ll<rr)  \n\t{  \n\t\tif(x<=mid)   L[rt]=change(L[pre],ll,mid,x);  \n\t\telse R[rt]=change(R[pre],mid+1,rr,x);  \n\t}  \n\treturn rt;  \n}  \nint ask(int u,int v,int ll,int rr,int k)  \n{  \n\tif(ll==rr) return ll;  \n\tint x=sum[L[v]]-sum[L[u]];  \n\tif(x>=k) ask(L[u],L[v],ll,mid,k);  \n\telse ask(R[u],R[v],mid+1,rr,k-x);  \n}  \nsigned main()  \n{\t  \n\tscanf(\"%lld%lld\",&n,&Q);  \n\tfor(int i=1;i<=n;i++)     \n        scanf(\"%lld\",&s[i]),b1[i]=s[i];  \n\tsort(b1+1,b1+1+n);  \n\tint m=unique(b1+1,b1+1+n)-b1-1;  \n\tT[0]=build(1,m);  \n\tfor(int i=1;i<=n;i++)   \n        s[i]=lower_bound(b1+1,b1+1+m,s[i])-b1,  \n        T[i]=change(T[i-1],1,m,s[i]);  \n\twhile(Q--)  \n\t{  \n\t\tint a,b,k;  \n\t\tscanf(\"%lld%lld%lld\",&a,&b,&k);  \n\t\tint p=ask(T[a-1],T[b],1,m,k);  \n\t\tprintf(\"%lld\\n\",b1[p]);  \n\t}  \n\treturn 0;  \n}  \n```\n",
        "postTime": 1571533524,
        "uid": 130842,
        "name": "Grind_1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n## \u4e3b\u5e2d\u6811\n\u6240\u8c13\u4e3b\u5e2d\u6811\uff0c\u5c31\u662f\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n\u518d\u770b\u9898\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u5f00\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u7ed3\u6784\u76f8\u540c\uff0c\u6240\u4ee5\u5177\u6709\u533a\u95f4\u53ef\u51cf\u6027\u3002\u4e5f\u5c31\u662f\u7528$~r~$\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u51cf\u53bb$~l-1~$\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u5f97\u5230\u7684\u5c31\u662f\u90a3\u6bb5\u533a\u95f4\uff08\u53ef\u80fd\u8bf4\u7684\u6709\u4e9b\u7455\u75b5\uff09\u3002\u4e5f\u5c31\u662f\u4e00\u4e2a\u524d\u7f00\u548c\u601d\u60f3\uff0c\n\n\u4f46\u662f\u6211\u4eec\u5982\u679c\u771f\u7684\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u5f00\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u90a3\u7a7a\u95f4\u5c82\u4e0d\u77ac\u95f4\u7206\u70b8~~\u9001\u4ed6\u5347\u5929~~\u3002\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\u5e94\u8fd0\u800c\u751f\u3002\u4ed6\u7684\u601d\u60f3\u662f\u4ec0\u4e48\u5462\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4ed6\u8ddf\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u53ea\u6709$~logn~$\u4e2a\u8282\u70b9\u4e0d\u540c\uff0c\u90a3\u4e48\u6211\u662f\u4e0d\u662f\u53ef\u4ee5\u5efa\u7acb\u5728\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u5462\uff1f\n\n\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u4e5f\u5c31\u662f\u6211\u4eec\u8bf4\u7684\u4e3b\u5e2d\u6811\uff0c\u4ed6\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f$~O(nlogn)~$\u3002\u53ef\u6d77\u661f\u3002\n\n\u5b9e\u73b0\u7684\u8bdd\u770b\u4ee3\u7801\u5427\u3002~~\u6307\u9488\u7684\u54e6\uff01\uff01\uff01~~\n\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int N = 200005;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m;\nint a[N] , b[N];\nstruct Persident_Tree\n{\n\t#define mid ((p -> l + p -> r) >> 1)\n\tstruct node\n\t{\n\t\tnode *ls , *rs;\n\t\tint l , r , size;\n\t\tnode(int l = 0,int r = 0) : l(l) , r(r) {ls = rs = NULL;size = 0;}\n\t}*root[N];\n\tvoid build(node *&p,int l,int r)\n\t{\n\t\tp = new node(l,r);\n\t\tif(p -> l == p -> r) return;\n\t\tbuild(p -> ls,l,mid); build(p -> rs,mid+1,r);\n\t}\n\tvoid insert(node *&p,node *o,int x)\n\t{\n\t\tp = new node(); *p = *o; p -> size ++;\n\t\tif(p -> l == p -> r) return;\n\t\tif(x <= mid) insert(p -> ls,o -> ls,x);\n\t\telse insert(p -> rs,o -> rs,x);\n\t}\n\tint query(node *p,node *o,int k)\n\t{\n\t\tif(p -> l == p -> r) return b[p -> l];\n\t\tif(k <= p -> ls -> size - o -> ls -> size) return query(p -> ls,o -> ls,k);\n\t\telse return query(p -> rs,o -> rs,k - p -> ls -> size + o -> ls -> size);\n\t}\n\tinline void League_of_Legends()\n\t{\n\t\tn = read(); m = read();\n\t\tfor(int i = 1;i <= n;i ++) b[i] = a[i] = read();\n\t\tsort(b+1,b+1+n); \n\t\tbuild(root[0],1,n);\n\t\tfor(int i = 1;i <= n;i ++)\n\t\t{\n\t\t\tint tmp = lower_bound(b+1,b+1+n,a[i]) - b;\n\t\t\tinsert(root[i],root[i-1],tmp);\n\t\t}\n\t\tfor(int i = 1 , l , r , k;i <= m;i ++)\n\t\t{\n\t\t\tl = read(); r = read(); k = read();\n\t\t\tprintf(\"%d\\n\",query(root[r],root[l-1],k));\n\t\t}\n\t}\n}Dungeon_Fighter;\nint main()\n{\n\tDungeon_Fighter.League_of_Legends();\n\treturn 0;\n}\n```\n",
        "postTime": 1569627714,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u79bb\u6563\u5316\uff0c\u76f4\u63a5\u4e0a\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4$\\lbrack-1e9,1e9\\rbrack$\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$((n+m)log 2e9)$\u3002\u6ce8\u610f\u6bcf\u6b21\u53d6$mid$\u53ea\u80fd\u53f3\u79fb\uff0c\u76f4\u63a5\u9664\u4ee5$2$\u662f\u5411$0$\u53d6\u6574\uff0c$(-1,0)$\u533a\u95f4\u4f1a\u6b7b\u5faa\u73af\uff0c\u800c\u4e14\u7ef4\u62a4\u8d1f\u503c\u4e5f\u4e0d\u5bf9\uff0c\u53f3\u79fb\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u53ef\u4ee5\u7ef4\u62a4\u8d1f\u503c\u3002\n\n\u7ebf\u6bb5\u6811\u6709\u4e2a\u64cd\u4f5c\u53eb\u505a**\u7ebf\u6bb5\u6811\u5408\u5e76**\uff0c\u6bcf\u6b21\u5408\u5e76\u4e00\u4e0b$i$\u548c$i-1$\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f\uff0c\u53ea\u4e0d\u8fc7\u4e3b\u5e2d\u6811\u628a\u5b83\u5199\u5728update\u4e2d\u4e86\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u5b66\u3002\n\n\u6743\u503c\u7ebf\u6bb5\u6811\u76f4\u63a5\u7ef4\u62a4\u6743\u503c\uff0c\u53ef\u4ee5\u652f\u6301\u5728\u7ebf\u4fee\u6539\u64cd\u4f5c$($\u5f53\u7136\u4e5f\u8981\u6811\u5957\u6811\u7ef4\u62a4$)$\uff0c\u5728\u7ebf\u64cd\u4f5c\u603b\u4e0d\u80fd\u79bb\u6563\u5316\u5427\uff1f\u4ee5\u4e0b\u662f\u4ee3\u7801\u3002\n```\n#include<bits/stdc++.h>\n#define ll long long int\nusing namespace std;\n\nconst int maxn=2e5+7;\nconst int maxm=1e7+7;\nconst int inf=1e9;\n\nint n,m,tot=0,rt[maxn];\nchar s[3];\nstruct node{int ls,rs,siz;}t[maxm];\n\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (ch<'0'||ch>'9') {if (ch=='-') f=-1;ch=getchar();}\n\twhile (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn x*f;\n}\n\ninline void writ(int x)\n{\n\tif (x<0) putchar('-'),x=-x;\n\tif (x>9) writ(x/10);\n\tputchar(x%10+'0');\n}\ninline void writt(int x){writ(x),putchar(' ');}\ninline void write(int x){writ(x),putchar('\\n');}\n\ninline void ins(int &o,int l,int r,int k)\n{\n\tif (!o) o=++tot;++t[o].siz;\n\tif (l==r) return ;\n\tint mid=l+r>>1;\n\tk<=mid?ins(t[o].ls,l,mid,k):ins(t[o].rs,mid+1,r,k);\n}\n\ninline int query(int x,int y,int l,int r,int k)\n{\n\tif (l==r) return l;\n\tint mid=l+r>>1,tmp=t[t[y].ls].siz-t[t[x].ls].siz;\n\treturn k<=tmp?query(t[x].ls,t[y].ls,l,mid,k):query(t[x].rs,t[y].rs,mid+1,r,k-tmp);\n}\n\ninline void merge(int &x,int y)\n{\n\tif (!x||!y) {x+=y;return ;}\n\tt[x].siz+=t[y].siz;\n\tmerge(t[x].ls,t[y].ls),merge(t[x].rs,t[y].rs);\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tfor (int i=1;i<=n;++i) ins(rt[i],-inf,inf,read());\n\tfor (int i=2;i<=n;++i) merge(rt[i],rt[i-1]);\n\twhile (m--)\n\t{\n\t\tint x=read(),y=read(),k=read();\n\t\twrite(query(rt[x-1],rt[y],-inf,inf,k));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1540510781,
        "uid": 33543,
        "name": "ynyuje",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "#### \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u53c8\u53eb\u4e3b\u5e2d\u6811\uff0c\u5728\u5bf9\u7ebf\u6bb5\u6811\u505a\u4e86\u4e00\u5b9a\u4fee\u6539\u4ee5\u540e\uff0c\u8fd8\u53ef\u4ee5\u540c\u65f6\u4fdd\u7559\u4fee\u6539\u524d\u7684\u7ebf\u6bb5\u6811\u7684\u6a21\u6837\u3002\u662f\u7528\u6765\u7ef4\u62a4\u533a\u95f4\u7b2cK\u5c0f\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\n![PwY3b4.png](https://s1.ax1x.com/2018/08/01/PwY3b4.png)\n**\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u601d\u60f3**\n\n------------\n#### 0.0 \u79bb\u6563\u5316\uff08\u4e00\u4f1a\u518d\u8bb2\uff0c\u4e0e\u601d\u60f3\u65e0\u5173\uff09\n**1.1 \u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5177\u4f53\u800c\u8a00\u5c31\u662f\u5c06\u4e00\u4e2a\u8fde\u7eed\u7684\uff081~m\uff09\u533a\u95f4\u4e0d\u65ad\u4e8c\u5206\uff0c\u6700\u7ec8\u6bcf\u4e00\u4e2a\u6570\u4ee3\u8868\u4e00\u4e2a\u8282\u70b9\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u68f5\u6811\u4e0a\u627e\u7684\u533a\u95f4\u5185\u7684\u6bcf\u4e00\u4e2a\u6570\uff09\u3002**\n**1.2 \u8fd9\u6837\u5c31\u5f88\u597d\u529e\u4e86\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u6211\u4eec\u90fd\u53ef\u4ee5\u7ef4\u62a4\u4ee5\u4ed6\u4e3a\u6839\u7684\u5b50\u6811\u7684sum\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u5df2\u6709\u591a\u5c11\u6570\uff0c\u8fd9\u6837\u518d\u5c06\u7ed9\u5b9a\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u70b9\u52a0\u5165\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5e76\u5728\u7ebf\u6bb5\u6811\u7684\u76f8\u5e94\u53f6\u5b50\u70b9sum+1 *\uff08\u6709\u70b9\u50cf\u8ba1\u6570\u6392\u5e8f\uff09\u3002* \u7136\u540eupdate\uff08\uff09\u4e00\u4e0b\u5c06\u6bcf\u4e2asum\u6c42\u51fa\u6765\uff0c\u8868\u793a\u5728\u6bcf\u4e2a\u4e8c\u5206\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u6570\u3002**\n![PwYTaj.png](https://s1.ax1x.com/2018/08/01/PwYTaj.png)\n\n------------\n\n\n### QAQ\n#### Q\uff1a\n**1 \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u770b\u4f3c\u975e\u5e38nb\u7684\u7ebf\u6bb5\u6811\uff0c\u53ef\u5b83\u8be5\u600e\u4e48\u7528\uff0c\u548c\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f^\uff1f\n2 \u60f3\u4e00\u60f3\u73b0\u5728\u5efa\u8d77\u7684\u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a1~m\u7684\uff0c\u53ef\u8be5\u600e\u4e48\u6c42\u51fal~r\u7684\u5462\uff1f\uff1f\uff1f**\n#### A\uff1a\n**1.\u5148\u4e0d\u8003\u8651lr\u533a\u95f4\u65f6\uff0c\u6211\u4eec\u8981\u6c421~m\u7684\u7b2cK\u5c0f\uff0c\u800c\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u62e5\u6709\u4f18\u79c0\u7684\u5355\u8c03\u6027\uff0c\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u6570\uff0c\u90a3\u4ece\u4ece\u5de6\u5f80\u53f3\u627e\u5230\u7b2cK\u4e2a\u4e0d\u5c31\u884c\u4e86\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u627e1~m\u7b2c2\u5c0f\uff0c1~mid\u7684sum=3\uff0cmid+1~m\u7684sum=7\uff0c\u7531\u5355\u8c03\u6027\u53ef\u77e5\uff0c\u7b2c2\u5c0f\u7684\u4e00\u5b9a\u5728\u5de6\u513f\u5b50\u533a\u95f4\u5185\uff0c\u7136\u540e\u518d\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b\u76f4\u5230\u627e\u5230\u6811\u4e0a\u6807\u53f7\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8981\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u539f\u56e0\u3002\uff1a\uff09**\n**2.\u8003\u8651\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u5f53\u6211\u4eec\u6c42l~r\u533a\u95f4\u65f6\uff0c\u4e0d\u8fc7\u662f\u5c06l~r\u533a\u95f4\u7684\u6570\u52a0\u8fdb\u6211\u4eec\u521a\u521a\u7684\u7ebf\u6bb5\u6811\uff0c\u90a3\u5c82\u4e0d\u662f\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u6b21\u8be2\u95ee\u90fd\u5efa\u4e00\u4e2a\u521a\u521a\u7684\u6811\u52a0\u5165\u533a\u95f4\u5185\u7684\u6570\u3002\u53ef\u662f\u2026\u2026\u2026\u2026\u8fd9\u4e5f\u592a\u66b4\u529b\u4e86\uff0c\u751a\u81f3\u4e0d\u5982sort\u4e00\u4e0b\u5feb\u3002\u60f3\u4e00\u60f3\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u4e00\u4e9b\u6027\u8d28\uff0c\u52a0\u5165\u4e00\u4e2a\u70b9\u540e\u53ea\u662f\u5728\u90e8\u5206\u4e0asum+1\u3002\u90a3\u5229\u7528\u4e00\u4e0b *\u524d!\u7f00!\u548c!* \u7684\u601d\u60f3\uff0cl~r\u533a\u95f4\u4e0d\u8fc7\u662f1~r\u7684\u6811\u51cf\u53bb1~l-1\u7684\u6811\uff08\u8fd9\u91cc\u7684\u51cf\u662f\u6307\u5404\u4e2a\u8282\u70b9sum\u503c\u76f8\u51cf\uff0c\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\uff09\u3002**\n\n------------\n\n\n#### \u81f3\u6b64\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u5927\u534a\uff0c\u4f46\u8fd9\u548c\u53ef\u6301\u4e45\u5316\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\n**2.1 \u8003\u8651\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u8981\u5efam\u4e2a\u7ebf\u6bb5\u6811\uff08\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u5148\u5efa\u7a7a\u6811\uff0c\u5728\u9700\u8981\u65f6\u5728\u7ee7\u7eed\u5efa\uff09\uff0c\u96be\u9053\u6bcf\u6b21\u5efa\u6811\u90fd\u9700\u8981\u91cd\u65b0for\u4e00\u904d\u5417\uff1f\u7b2c1\u4e2a\u6811\u548c\u7b2c2\u4e2a\u6811\u53ea\u662f\u591a\u4e86\u4e00\u4e2a\u6570\uff0c\u76f8\u5f53\u4e8e\u505a\u4e86\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\uff0c\u800c\u539f\u6811\u548c\u65b0\u6811\u6709\u5f88\u5927\u4e00\u90e8\u5206\u5b8c\u5168\u4e00\u6837\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u6301\u4e45\u5316\u5c31\u767b\u573a\u4e86o(*\u2267\u25bd\u2266)\u30c4**\n**2.2 \u5728\u5efa\u65b0\u6811\u662f\u53ef\u4ee5\u4ece\u539f\u6811\u7684\u57fa\u7840\u4e0a\u5efa\uff0c\u8fd9\u6837\u5c31\u6781\u5927\u7684\u51cf\u5c0f\u4e86\u91cd\u590d\u7684\u8fd0\u7b97\u3002\u5efa\u6811\u8fc7\u7a0b\u5982\u4e0b\u56fe**\n![PwYGVJ.png](https://s1.ax1x.com/2018/08/01/PwYGVJ.png)\n#### \u590d\u6742\u5ea6O(nlogn)\n\n------------\n\n\n#### 0.0  \u79bb\u6563\u5316\u4ecb\u7ecd\n> #### \u79bb\u6563\u5316\uff0c\u5c31\u662f\u628a\u65e0\u9650\u7a7a\u95f4\u4e2d\u6709\u9650\u7684\u4e2a\u4f53\u6620\u5c04\u5230\u6709\u9650\u7684\u7a7a\u95f4\u4e2d\u53bb\uff0c\u4ee5\u6b64\u63d0\u9ad8\u7b97\u6cd5\u7684\u65f6\u7a7a\u6548\u7387\u3002\n\n>**\u9996\u5148\u5c06\u6570\u5b57\u6392\u5e8f\uff1a32434234\uff0c32434234\uff0c43324556\uff0c8384733\uff0c98998988\n\u53bb\u91cd\u540e\u7ed9\u4e88\u5176\u5bf9\u5e94\u7684\u7d22\u5f15\uff1a0,0,1,2,3\u5206\u522b\u5bf9\u5e94\u6bcf\u4e2a\u6570\uff0c\u5c31\u53ef\u4ee5\u7b80\u5316\u5f88\u591a\u64cd\u4f5c\uff0c\u51cf\u5c11\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u8d44\u6e90\u5f00\u9500\u3002\n\u9664\u4e86\u5bf9\u4e8e\u8f83\u5927\u6574\u6570\u9700\u8981\u4f7f\u7528\u79bb\u6563\u5316\u4e4b\u5916\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u9700\u8981\u4f7f\u7528\u6574\u578b\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u7ed9\u51fa\u7684\u6570\u636e\u5374\u662f\u5c0f\u6570\u7684\u4e5f\u53ef\u4ee5\u4f7f\u7528\u79bb\u6563\u5316\uff0c\u5c06\u5176\u7d22\u5f15\u4e3a\u6574\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\u90a3\u4e48\u53ef\u4ee5\u603b\u7ed3\u51fa\u79bb\u6563\u5316\u7684\u6b65\u9aa4\uff1a\n1\u3001\u6392\u5e8f\n2\u3001\u53bb\u91cd\n3\u3001\u7d22\u5f15\n\u4e3a\u4e86\u7b80\u5316\u4ee3\u7801\uff0c\u6211\u4eec\u91c7\u7528STL\u7b97\u6cd5\u79bb\u6563\u5316\uff1a**\n```cpp\nint a[n], b[n], sub[n]; //a[n]\u662f\u5373\u5c06\u88ab\u79bb\u6563\u5316\u7684\u6570\u7ec4\uff0cb[n]\u662fa[n]\u7684\u526f\u672c\uff0csub\u7528\u4e8e\u6392\u5e8f\u53bb\u91cd\u540e\u63d0\u4f9b\u79bb\u6563\u5316\u540e\u7684\u503c\nsort(sub, sub + n);\nint size = unique(sub, sub + n) - sub;\nfor(int i = 0; i < n; i++)\n    a[i] = lower_bound(sub, sub + size, a[i]) - sub; //\u5373a[i]\u4e3ab[i]\u79bb\u6563\u5316\u540e\u5bf9\u5e94\u7684\u503c\n```\n##### \u8f6c\u81ea\n[http://www.cnblogs.com/kevince/p/3893531.html ](http://www.cnblogs.com/kevince/p/3893531.html )\n\u2014\u2014By Kevince\u3002\n###### 0.1\n**\u5728\u7ef4\u62a4\u4e3b\u5e2d\u6811\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\uff0c\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u5efa\u6700\u5927\u503c\u4e2a\uff0c\u901a\u8fc7\u79bb\u6563\u5316\uff0c\u53ef\u4ee5\u5c06\u6570\u91cf\u5927\u5927\u7f29\u5c0f\uff0c\u53ea\u7528\u7ef4\u62a41~\u53bb\u91cd\u540e\u7684\u70b9\u6570 \u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8f93\u5165\u6570\u7ec4\u91cc\u7684\u6bcf\u4e00\u4e2a\u6570\u90fd\u901a\u8fc7\u6392\u5e8f\u6620\u5c04\u5230\u4e00\u4e2a\u8f83\u5c0f\u7684\u5e8f\u5217\u4e0a\uff0c\u6bd4\u5982\u5f15\u7528\u4e2d\u4e3e\u7684\u4f8b\u5b5032434234\uff0c32434234\uff0c43324556\uff0c8384733\uff0c98998988\uff0c\u53bb\u91cd\u540e\u7ed9\u4e88\u5176\u5bf9\u5e94\u7684\u7d22\u5f15\uff1a0,0,1,2,3\u5206\u522b\u5bf9\u5e94\u6bcf\u4e2a\u6570\u3002**\n**\u901a\u8fc7\u79bb\u6563\u5316\u6211\u4eec\u5728query\uff08\uff09\u662f\u627e\u5230\u7b2cK\u5c0f\u7684\u70b9\u65f6\uff0c\u53ef\u4ee5\u8fd4\u56de\u5728\u533a\u95f4\u7684\u90a3\u4e00\u4e2a\u70b9\u4e0a\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u70b9\u5c31\u662f\u5728\u6392\u5e8f\u540e\u7684\u539f\u5e8f\u5217\u91cc\u3002**\n\n------------\n\n\n\n\n~~\u7ed3\u7a3f\u4e8e2018-08-01 10:57.~~\n# \uff1a\uff09\n#### \u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff1a \u8c22\u8c22\n[http://tch.drifts.ml/%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/195/](http://tch.drifts.ml/%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/195/) \u2014\u2014[tch\u5b66\u4e60\u7b14\u8bb0]\n",
        "postTime": 1533094491,
        "uid": 59032,
        "name": "\u8f7b\u5c18",
        "ccfLevel": 0,
        "title": "\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff08\u4e3b\u5e2d\u6811\uff09\u5165\u95e8\u6559\u7a0bQWQ"
    },
    {
        "content": "\u5148\u6253\u4e2a\u5e7f\u544a\uff1a[blog](https://www.cnblogs.com/bztMinamoto/p/9398329.html)\uff0c\u6709\u5165\u95e8\u6709\u63d0\u9ad8\u4e5f\u6709\u9898\u5355\n\n 1.\u524d\u8a00\n\n\u636e\u8bf4\u4e3b\u5e2d\u6811\u8fd9\u4e2a\u540d\u5b57\u7684\u7531\u6765\u5462\uff0c\u662f\u56e0\u4e3a\u521b\u59cb\u4eba\u7684\u540d\u5b57\u7f29\u5199hjt\u4e0e\u67d0\u4f4d\u76f8\u540c\uff0c\u7136\u540e\u4ed6\u56e0\u4e3a\u4e0d\u4f1a\u5212\u5206\u6811\u4e8e\u662f\u81ea\u521b\u4e86\u8fd9\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u597d\u5f3a\u554aorz\n\n \n\n\u4e3b\u5e2d\u6811\u80fd\u5b9e\u73b0\u4ec0\u4e48\u64cd\u4f5c\u5462\uff1f\u6700\u7ecf\u5178\u7684\u5c31\u662f\u67e5\u8be2\u533a\u95f4\u7b2ck\u5c0f\u4e86\uff0c\u5176\u4ed6\u7684\u8fd8\u6709\u8bf8\u5982\u6811\u4e0a\u8def\u5f84\u7b2ck\u5c0f\u5566\uff0c\u5e26\u4fee\u6539\u7b2ck\u5c0f\u5566\u4e4b\u7c7b\u7684\u3002\u4ee5\u9759\u6001\u533a\u95f4\u7b2ck\u5c0f\u4e3a\u4f8b\n\n 2.\u5b9a\u4e49\n\n\u5148\u8d34\u4e00\u4e0b\u67d0\u795e\u7287\u5bf9\u4e3b\u5e2d\u6811\u7684\u7406\u89e3\uff1a\u6240\u8c13\u4e3b\u5e2d\u6811\u5462\uff0c\u5c31\u662f\u5bf9\u539f\u6765\u7684\u6570\u5217[1..n]\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00[1..i]\uff081\u2264i\u2264n\uff09\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5b58\u67d0\u4e2a\u524d\u7f00[1..i]\u4e2d\u5c5e\u4e8e\u533a\u95f4[L..R]\u7684\u6570\u4e00\u5171\u6709\u591a\u5c11\u4e2a\uff08\u6bd4\u5982\u6839\u8282\u70b9\u662f[1..n]\uff0c\u4e00\u5171i\u4e2a\u6570\uff0csum[root] = i\uff1b\u6839\u8282\u70b9\u7684\u5de6\u513f\u5b50\u662f[1..(L+R)/2]\uff0c\u82e5\u4e0d\u5927\u4e8e(L+R)/2\u7684\u6570\u6709x\u4e2a\uff0c\u90a3\u4e48sum[root.left] = x\uff09\u3002\u82e5\u8981\u67e5\u627e[i..j]\u4e2d\u7b2ck\u5927\u6570\u65f6\uff0c\u8bbe\u67d0\u7ed3\u70b9x\uff0c\u90a3\u4e48x.sum[j] - x.sum[i - 1]\u5c31\u662f[i..j]\u4e2d\u5728\u7ed3\u70b9x\u5185\u7684\u6570\u5b57\u603b\u6570\u3002\u800c\u5bf9\u6bcf\u4e00\u4e2a\u524d\u7f00\u90fd\u5efa\u4e00\u68f5\u6811\uff0c\u4f1aMLE\uff0c\u89c2\u5bdf\u5230\u6bcf\u4e2a[1..i]\u548c[1..i-1]\u53ea\u6709\u4e00\u6761\u8def\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u5176\u4ed6\u7684\u7ed3\u70b9\u53ea\u8981\u7528\u56de\u524d\u4e00\u68f5\u6811\u7684\u7ed3\u70b9\u5373\u53ef\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6\u4e3aO(nlogn)\u3002\n\n \n\n\u7136\u800c\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u56e0\u4e3a\u611f\u89c9\u6839\u672c\u6ca1\u770b\u61c2\n\n \n\n\u7136\u540e\u6765\u8bf4\u8bf4\u6211\u81ea\u5df1\u7684\u7406\u89e3\u5427\u3002\u5982\u4f55\u6c42\u51fa\u4e00\u4e2a\u533a\u95f4\u5185\u7b2ck\u5c0f\u5462\uff1f\u76f4\u63a5sort\u5f53\u7136\u53ef\u4ee5\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u7206\u8868\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u4e2a\u601d\u8def\uff0c\u80fd\u5426\u5c06$[l,r]$\u4e4b\u95f4\u51fa\u73b0\u8fc7\u7684\u6570\u90fd\u5efa\u6210\u7ebf\u6bb5\u6811\u5462\uff1f\u8bbe\u8282\u70b9\u4e3a$p$\uff0c\u533a\u95f4\u4e3a$[l,r]$\uff0c\u5de6\u513f\u5b50\u662f$[l,mid]$\uff0c\u53f3\u513f\u5b50\u662f$[mid+1,r]$\n\n\u8981\u67e5\u627e\u7b2ck\u5927\u7684\u8bdd\uff0c\u5148\u770b\u5de6\u513f\u5b50\u91cc\u6709\u591a\u5c11\u4e2a\u6570\uff08\u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e$mid$\u7684\u6570\u7684\u4e2a\u6570\uff09\uff0c\u5982\u679c\u5927\u4e8e$k$\uff0c\u8fdb\u5de6\u5b50\u6811\u627e\uff0c\u5426\u5219\u4ee4$k-=\u5de6\u513f\u5b50\u6570\u7684\u4e2a\u6570$\uff0c\u8fdb\u53f3\u5b50\u6811\u627e\n\n\u5148\u6765\u8003\u8651\u4e00\u4e2a\u5e8f\u5217\uff1a3,2,1,4\n\n\u5efa\u5b8c\u6811\u4e4b\u540e\u662f\u8fd9\u6837\u7684\n\n![](https://cdn.luogu.com.cn/upload/pic/26124.png)\n\n\u7136\u540e\u8981\u67e5\u7b2c2\u5927\uff0c\u4e00\u4e0b\u5b50\u5c31\u80fd\u53d1\u73b0\u662f2\u4e86\n\n\uff08\u4e0a\u9762\u753b\u7684\u53ef\u80fd\u4e0d\u662f\u5f88\u4e25\u8c28\uff0c\u5927\u5bb6\u5c06\u5c31\u4e0b\uff09\n\n\u4f46\u6211\u4eec\u4e0d\u53ef\u80fd\u5bf9\u6bcf\u4e00\u4e2a\u533a\u95f4\u90fd\u5efa\u4e00\u68f5\u6811\uff0c\u90a3\u6837\u7684\u8bdd\u7a7a\u95f4\u590d\u6742\u5ea6\u7edd\u5bf9\u7206\u70b8\n\n\u7136\u540e\u53ef\u4ee5\u8f6c\u5316\u4e00\u4e0b\u601d\u8def\uff1a\u524d\u7f00\u548c\n\n\u533a\u95f4$[l,r]$\u4e2d\u5c0f\u4e8e\u7b49\u4e8e$mid$\u7684\u6570\u7684\u4e2a\u6570\uff0c\u53ef\u4ee5\u8f6c\u6362\u4e3a$[1,r]$\u4e2d\u5c0f\u4e8e\u7b49\u4e8e$mid$\u7684\u6570\u7684\u4e2a\u6570\u51cf\u53bb$[1,l-1]$\u4e2d\u5c0f\u4e8e\u7b49\u4e8e$mid$\u7684\u6570\u7684\u4e2a\u6570\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u5bf9\u6bcf\u4e00\u4e2a\u524d\u7f00\u5efa\u4e00\u68f5\u6811\u5373\u53ef\n\n\u7136\u540e\u7a7a\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u7206\u70b8\n\n\u7136\u800c\u6211\u4eec\u53c8\u53d1\u73b0\uff0c\u533a\u95f4$[1,l-1]$\u7684\u6811\u548c\u533a\u95f4$[1,l]$\u7684\u6811\u6700\u591a\u53ea\u4f1a\u6709$log n$\u4e2a\u8282\u70b9\u4e0d\u540c\uff08\u56e0\u4e3a\u6bcf\u6b21\u65b0\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u4f1a\u66f4\u65b0$log n$\u4e2a\u8282\u70b9\uff09\uff0c\u6709\u8bb8\u591a\u7a7a\u95f4\u662f\u53ef\u4ee5\u91cd\u590d\u5229\u7528\u7684\n\n\u53ea\u8981\u80fd\u5c06\u8fd9\u4e9b\u7a7a\u95f4\u91cd\u590d\u5229\u7528\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u7a7a\u95f4\u7684\u95ee\u9898\u4e86\n\n\u8fd8\u662f\u4e0a\u9762\u90a3\u4e2a\u5e8f\u5217\uff1a3\uff0c2,1,4\n\n\u4e00\u5f00\u59cb\u5148\u5efa\u4e00\u68f5\u7a7a\u6811\uff0c\u7136\u540e\u4e00\u4e2a\u4e2a\u628a\u6bcf\u4e00\u4e2a\u8282\u70b9\u52a0\u8fdb\u53bb\n\n\u5982\u679c\u8981\u770b\u56fe\u7684\u8bdd\u53ef\u4ee5\u70b9[\u8fd9\u91cc](https://www.cnblogs.com/zyf0163/p/4749042.html)\n\n \n\n\u8fd9\u4e2a\u65f6\u5019\u6709\u4eba\u5c31\u8981\u95ee\u4e86\uff0c\u4e07\u4e00\u5e8f\u5217\u7684\u6570\u5b57\u7279\u522b\u5927\u5462\uff1f\n\n\u5f53\u7136\u662f\u79bb\u6563\u5316\n\n\u5c06\u8fd9\u4e9b\u6240\u6709\u503c\u79bb\u6563\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u6570\u5728$1~n$\u4e4b\u95f4\n\n\u7136\u800c\u611f\u89c9\u8bb2\u592a\u591a\u4e5f\u6ca1\u5565\u7528\u2026\u2026\u4e0a\u4ee3\u7801\u597d\u4e86\uff0c\u6709\u8be6\u7ec6\u7684\u6ce8\u91ca\n\n\u8be6\u7ec6\u7684\u4e1c\u897f\u592a\u591a\u8fd9\u91cc\u653e\u4e0d\u4e0b\uff0c\u8fd8\u662f\u53bb\u6211\u7684blog\u91cc\u770b\u5427\n```\n//minamoto\n#include<bits/stdc++.h>\n#define N 200005\nusing namespace std;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getchar()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getchar());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nint sum[N<<5],L[N<<5],R[N<<5];\nint a[N],b[N],t[N];\nint n,q,m,cnt=0;\nint build(int l,int r){\n    int rt=++cnt;\n    //\u5efa\u6811 \n    sum[rt]=0;\n    if(l<r){\n        int mid=(l+r)>>1;\n        L[rt]=build(l,mid);\n        R[rt]=build(mid+1,r);\n    }\n    return rt;\n}\nint update(int last,int l,int r,int x){\n    int rt=++cnt;\n    L[rt]=L[last],R[rt]=R[last],sum[rt]=sum[last]+1;\n    //\u5148\u7ee7\u627f\u4e0a\u4e00\u6b21\u7684\u4fe1\u606f \n    //L\u662f\u5de6\u8282\u70b9\uff0cR\u662f\u53f3\u8282\u70b9\uff0csum\u662f\u8282\u70b9\u5185\u6570\u7684\u4e2a\u6570 \n    if(l<r){\n        int mid=(l+r)>>1;\n        if(x<=mid) L[rt]=update(L[last],l,mid,x);\n        else R[rt]=update(R[last],mid+1,r,x);\n        //\u5982\u679c\u6709\u9700\u8981\u66f4\u65b0\u7684\u4fe1\u606f\uff0c\u66f4\u65b0\n        //\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u6b21\u66f4\u65b0\u7684\u8282\u70b9\u6700\u591a\u53ea\u6709log n\u4e2a \n    }\n    return rt;\n}\nint query(int u,int v,int l,int r,int k){\n    if(l>=r) return l;\n    int x=sum[L[v]]-sum[L[u]];\n    //\u67e5\u8be2\u64cd\u4f5c \n    int mid=(l+r)>>1;\n    if(x>=k) return query(L[u],L[v],l,mid,k);\n    else return query(R[u],R[v],mid+1,r,k-x);\n    //\u5982\u679c\u5de6\u8282\u70b9\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8ek\uff0c\u8fdb\u5de6\u5b50\u6811\u627e\u7b2ck\u5c0f\n    //\u5426\u5219\u8fdb\u53f3\u5b50\u6811 \n}\nint main(){\n    //freopen(\"testdata.in\",\"r\",stdin);\n    n=read(),q=read();\n    for(int i=1;i<=n;++i)\n    b[i]=a[i]=read();\n    sort(b+1,b+1+n);\n    m=unique(b+1,b+1+n)-b-1;\n    t[0]=build(1,m);\n    //\u5148\u5efa\u4e00\u68f5\u7a7a\u6811 \n    for(int i=1;i<=n;++i){\n        int k=lower_bound(b+1,b+1+m,a[i])-b;\n        //\u79bb\u6563 \n        t[i]=update(t[i-1],1,m,k);\n        //\u7136\u540e\u6bcf\u6b21\u5728\u4e0a\u4e00\u6b21\u7684\u57fa\u7840\u4e0a\u5efa\u6811 \n    }\n    while(q--){\n        int x,y,z;\n        x=read(),y=read(),z=read();\n        int k=query(t[x-1],t[y],1,m,z);\n        printf(\"%d\\n\",b[k]);\n    }\n    return 0;\n}\n```",
        "postTime": 1533092455,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\t\u88f8\u4e3b\u5e2d\u6811(\u5212\u5206\u6811\u6a21\u677f),\u4e0d\u4f1a\u5212\u5206\u6811,\u76f4\u63a5\u4e0a\u7684\u4e3b\u5e2d\u6811\n\t\u4e3b\u5e2d\u6811\u53c8\u540d\u51fd\u6570\u5f0f\u7ebf\u6bb5\u6811,\u4e4b\u6240\u4ee5\u53eb\u4e3b\u5e2d\u6811\u662f\u56e0\u4e3a\u8fd9\u4e1c\u897f\u662ffotile\u4e3b\u5e2d\u521b\u5efa\u51fa\u6765\u7684\u3002\n\t\u4e3b\u5e2d\u6811\u652f\u6301\u67e5\u8be2\u5386\u53f2\u7248\u672c,\u540c\u65f6\u5145\u5206\u5229\u7528\u4e24\u4e2a\u7248\u672c\u7684\u76f8\u540c\u6027,\u6765\u589e\u5f3a\u65f6\u95f4\u548c\u7a7a\u95f4\u6548\u7387\u3002\n  \u5bf9\u4e8e\u6b64\u9898,\u5982\u679c\u5bf91-i\u8fd9\u4e2a\u533a\u95f4\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u90a3\u4e48l-r\u8fd9\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u901a\u8fc71-r\u8fd9\u68f5\u7ebf\u6bb5\u6811\u548c1-l-1\u8fd9\u68f5\u7ebf\u6bb5\u6811\u6765\u5f97\u5230,\u4f46\u662f\u76f4\u63a5\u5efan\u68f5\u7ebf\u6bb5\u6811\u7a7a\u95f4\u4e0a\u548c\u65f6\u95f4\u4e0a\u90fd\u662f\u4e0d\u5141\u8bb8\u7684,\u6211\u4eec\u901a\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\u7b2ci\u68f5\u7ebf\u6bb5\u6811\u548c\u7b2ci-1\u68f5\u7ebf\u6bb5\u6811\u6700\u591a\u53ea\u6709\u4e00\u6761\u94fe\u4e0d\u540c,\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ea\u9700\u8981\u65b0\u5efa\u8fd9\u4e00\u6761\u4e0d\u540c\u7684\u94fe\u4e0a\u7684\u8282\u70b9\u5c31\u597d\u4e86,\u5176\u4ed6\u7684\u76f4\u63a5\u6307\u8fc7\u53bb\u5c31ok\n```c\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#define rep(i,x,y) for(register int i=x;i<=y;++i)\n#define repd(i,x,y) for(register int i=x;i>=y;--i)\n#define ll long long\nusing namespace std;\nconst int N=2e5+7;\ntypedef pair<int,int> s;\nint rt[N<<5],lson[N<<5],rson[N<<5],root[N],rk[N],n,m,cnt=1;\ns nm[N];\ninline void update(int &o,int l,int r,int num){\n\trt[cnt]=rt[o];lson[cnt]=lson[o];rson[cnt++]=rson[o];o=cnt-1;\n\trt[o]++;\n\tif(l==r)return ;\n\tint mid=l+r>>1;\n\tif(num<=mid)update(lson[o],l,mid,num);\n\telse update(rson[o],mid+1,r,num);\n}\ninline int query(int i,int j,int l,int r,int k){\n\tif(l==r)return l;\n\tint t=rt[lson[j]]-rt[lson[i]],mid=l+r>>1;\n\tif(k<=t)return query(lson[i],lson[j],l,mid,k);\n\treturn query(rson[i],rson[j],mid+1,r,k-t);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,1,n){int a;scanf(\"%d\",&a);nm[i]=s(a,i);}\n\tsort(nm+1,nm+n+1);\n\trep(i,1,n)rk[nm[i].second]=i;\n\trep(i,1,n){root[i]=root[i-1];update(root[i],1,n,rk[i]);}\n\twhile(m--){\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tprintf(\"%d\\n\",nm[query(root[a-1],root[b],1,n,c)].first);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1524214626,
        "uid": 46982,
        "name": "Angora",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u849f\u84bb\u4eca\u5929\u6765\u8ddf\u5927\u5bb6\u8c08\u8c08\u4e3b\u5e2d\u6811\uff08\u849f\u84bb\u7684\u4e3b\u5e2d\u6811\u662f\u7528\u6570\u7ec4\u6765\u5199\u7684\uff0c\u56e0\u4e3a\u849f\u84bb\u4e0d\u4f1a\u6307\u9488\u554a\uff09\n\u5728\u8fdb\u5165\u6b63\u9898\u4e4b\u524d\u8fd8\u662f\u5148\u4e0a\u4e00\u9053\u9898\uff08\u6d1b\u8c37P3834\uff09\n\u9898\u76ee\u80cc\u666f\n\n\u8fd9\u662f\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u4e3b\u5e2d\u6811\u5165\u95e8\u9898\u2014\u2014\u9759\u6001\u533a\u95f4\u7b2cK\u5c0f\n\u9898\u76ee\u63cf\u8ff0\n\n\u5982\u9898\uff0c\u7ed9\u5b9aN\u4e2a\u6b63\u6574\u6570\u6784\u6210\u7684\u5e8f\u5217\uff0c\u5c06\u5bf9\u4e8e\u6307\u5b9a\u7684\u95ed\u533a\u95f4\u67e5\u8be2\u5176\u533a\u95f4\u5185\u7684\u7b2cK\u5c0f\u503c\u3002\n\u4e00\u9053\u7ecf\u5178\u7684\u8001\u9898\uff08\u5927\u4f6c\u52ff\u55b7\uff09\u90a3\u6211\u4eec\u5c31\u6765\u8c08\u8c08\u8fd9\u9898\u600e\u4e48\u505a\uff1b\n\u7b2ck\u5c0f\u7684\u6570\u600e\u4e48\u6c42\u4e86\uff0c\u5e76\u4e14\u8981\u6c42\u6ca1\u6b64\u67e5\u8be2logn\u7684\u7b97\u6cd5\uff0c\u5c31\u53ea\u6709\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u90a3\u4e48\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4ec0\u4e48\u4e86\uff1b\n\u4e8e\u662f\u6211\u4eec\u5c31\u5f00\u4e00\u4e2a\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u5b58\u6539\u8282\u70b9\u5728\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u4e2a\u6570\uff0c\u90a3\u6211\u4eec\u5c31\u8981\u5f00\u5f88\u591a\u7684\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u524d1\u5230r\uff08r\u5c5e\u4e8e1\uff0cn\uff09\u90a3\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u6211\u4eec\u8981\u67e5l\u5230\nr\u7b2ck\u5c0f\u6570\u7684\u53ea\u9700\u8981tr(r)\u5230tr(l-1)\u7b2ck\u5c0f\u7684\u6570\u5373\u53ef\uff0c\u4f46\u4e00\u68f5\u68f5\u7ebf\u6bb5\u6811\u7684\u5f00\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u662fnmlogn\u7684\u80af\u5b9a\u4e0d\u884c\uff0c\u4e8e\u662f\u6211\u4eec\u4fbf\u91c7\u7528\u4e3b\u5e2d\u7ebf\u6bb5\u6811\uff1b\n\u90a3\u4e3b\u5e2d\u6811\u5177\u4f53\u600e\u4e48\u64cd\u4f5c\u7684\uff1a\n\u4e3b\u5e2d\u6811\u7684\u5177\u4f53\u64cd\u4f5c\u5c31\u662f\u5c06\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u4e9b\u8282\u70b9\uff0c\u8ba9\u5176\u5177\u6709\u53ef\u6301\u7eed\u5316\u7684\u529f\u80fd\uff0c\u5982\u56fe\u4e0a4\u548c9\u8282\u70b9\u5c31\u662f\u5728\u539f\u6765\u7684\u6811\u4e0a\u8fdb\u884c\u7684\u4fee\u6539\uff0c\u90a3\u600e\u4e48\u4fee\u6539\u4e86\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\u5c31\u662f\u6ca1\u6709\u5173\u7cfb\u7684\u5c31\u4e0d\u8981\u52a8\uff0c\u6709\u5173\u7cfb\u7684\u5c31\u4e0d\u53d8\uff0c\u6709\u5173\u7cfb\u7684\u5c31\u5f00\u65b0\u8282\u70b9\uff1b\n\u8c08\u5b8c\u7406\u8bba\u77e5\u8bc6\u90a3\u4e48\u6211\u4eec\u4e0a\u4ee3\u7801\u5427\uff1b\n```cpp\nstruct node\n{\n    long long l,r,ls,rs,c;//l\u662f\u5de6\u533a\u95f4\uff0cr\u662f\u53f3\u533a\u95f4\uff0cls\u662f\u5de6\u8282\u70b9\u7684\u7f16\u53f7\uff0crs\u662f\u53f3\u8282\u70b9\uff0cc\u662fdata\n}tr[maxn];\nlong long t,hyx[maxn];\nlong long nw(long long l,long long r)\n{\n    tr[++t]={l,r,0,0,0};\n    return t;\n}//\u65b0\u5efa\u8282\u70b9\uff0c\u8fd4\u56de\u8282\u70b9\u53f7\nvoid xg(long long o,long long w,long long p)\n{\n    if(tr[o].l==tr[o].r)//\u5230\u8fbe\u53f6\u8282\u70b9\u503c\u57df\u52a0\u4e00\n    {\n        tr[o].c=tr[w].c+1;\n        return;\n    }\n    long long mid=(tr[o].l+tr[o].r)>>1;\n    if(p<=mid)//p\u5728\u5de6\u513f\u5b50\n    {\n        tr[o].ls?tr[o].ls=tr[o].ls:tr[o].ls=nw(tr[o].l,mid);//\u52a8\u6001\u5f00\u8282\u70b9\n        tr[o].rs=tr[w].rs;//\u6ca1\u6709\u52a8\u5c31\u4e0d\u53d8\n        xg(tr[o].ls,tr[w].ls,p);//\u7ee7\u7eed\u9012\u5f52\u4e0b\u53bb\n    }\n    else\n    {\n        tr[o].rs?tr[o].rs=tr[o].rs:tr[o].rs=nw(mid+1,tr[o].r);\n        tr[o].ls=tr[w].ls;\n        xg(tr[o].rs,tr[w].rs,p);\n    }\n    tr[o].c=tr[tr[o].ls].c+tr[tr[o].rs].c;//\u7238\u7238\u7684data\u5c31\u662f\u513f\u5b50\u7684data\u76f8\u52a0\n}\nlong long cx(long long o,long long w,long long k)\n{\n    if(tr[w].l==tr[w].r)//\u5230\u8fbe\u53f6\u8282\u70b9\u8fd4\u56de\u53f6\u7684\u8282\u70b9\u533a\u95f4\n    {\n        return tr[w].l;\n    }\n    long long hh=tr[tr[w].ls].c-tr[tr[o].ls].c;//\u524d\u7f00\u548c\u601d\u60f3\n    if(k<=hh)//\u5728\u5de6\u8fb9\u5c31\u7ee7\u7eed\u9012\u5f52\u4e0b\u53bb\n    {\n        return cx(tr[o].ls,tr[w].ls,k);\n    }\n    else//\u5c06\u503c\u51cf\u53bb\u5de6\u8fb9\u7684\u5927\u5c0f\u7ee7\u7eed\u9012\u5f52\u4e0b\u53bb\n    {\n        return cx(tr[o].rs,tr[w].rs,k-hh);\n    }\n}\n```\n\u6838\u5fc3\u8bed\u6cd5\u90fd\u5b66\u5b8c\u4e86\uff0c\u4ece\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u8f7b\u6613\u7684\u770b\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\u662flog\u7684\uff0c\u7a7a\u95f4\u662fnlog^2n\u7684\uff0c\u8fd9\u4e0b\u5c31\u80fd\u8f7b\u8f7b\u677e\u677ea\u6389\u8fd9\u9898\u4e86\uff0c\u90a3\u4e0b\u9762\u6211\u4e0a\u5b8c\u6574\u7684\u4ee3\u7801\u4e86\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn = 10000005;\nstruct node\n{\n    long long l,r,ls,rs,c;\n}tr[maxn];\nlong long t,hyx[maxn];\nlong long nw(long long l,long long r)\n{\n    tr[++t]={l,r,0,0,0};\n    return t;\n}\nvoid xg(long long o,long long w,long long p)\n{\n    if(tr[o].l==tr[o].r)\n    {\n        tr[o].c=tr[w].c+1;\n        return;\n    }\n    long long mid=(tr[o].l+tr[o].r)>>1;\n    if(p<=mid)\n    {\n        tr[o].ls?tr[o].ls=tr[o].ls:tr[o].ls=nw(tr[o].l,mid);\n        tr[o].rs=tr[w].rs;\n        xg(tr[o].ls,tr[w].ls,p);\n    }\n    else\n    {\n        tr[o].rs?tr[o].rs=tr[o].rs:tr[o].rs=nw(mid+1,tr[o].r);\n        tr[o].ls=tr[w].ls;\n        xg(tr[o].rs,tr[w].rs,p);\n    }\n    tr[o].c=tr[tr[o].ls].c+tr[tr[o].rs].c;\n}\nlong long cx(long long o,long long w,long long k)\n{\n    if(tr[w].l==tr[w].r)\n    {\n        return tr[w].l;\n    }\n    long long hh=tr[tr[w].ls].c-tr[tr[o].ls].c;\n    if(k<=hh)\n    {\n        return cx(tr[o].ls,tr[w].ls,k);\n    }\n    else\n    {\n        return cx(tr[o].rs,tr[w].rs,k-hh);\n    }\n}\nint main()\n{\n    long long n,m;\n    scanf(\"%lld%lld\",&n,&m);\n    hyx[0]=nw(-1e9+1,1e9+1);\n    tr[0].c=0;\n    long long a,l,r;\n    for(long long i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",&a);\n        xg(hyx[i]=nw(-1e9+1,1e9+1),hyx[i-1],a);\n    }\n    for(long long i=1;i<=m;++i)\n    {\n        scanf(\"%lld%lld%lld\",&l,&r,&a);\n        printf(\"%lld\\n\",cx(hyx[l-1],hyx[r],a));\n    }\n    return 0;\n}\n```",
        "postTime": 1522904042,
        "uid": 60867,
        "name": "heyongxin",
        "ccfLevel": 6,
        "title": "\u4e3b\u5e2d\u6811"
    },
    {
        "content": "\u5199\u9898\u89e3\u63a8\u5e7f[blog](http://www.vh13853128.icoc.me/nd.jsp?id=12)\u3002\n\n\u535a\u5ba2\u4e2d\u6709\u5173\u4e8e\u4e3b\u5e2d\u6811\u7684\u8be6\u7ec6\u89e3\u91ca\uff0c\u914dPPT\u81ea\u753b\u70c2\u56fe\u3002\n\n\u7ed9\u539f\u533a\u95f4\u4e2d\u6bcf\u4e2a\u524d\u7f00\u30101~i\u3011\u5efa\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u4e2d\u7684\u8282\u70b9\u8868\u793a\u8be5\u524d\u7f00\u4e2d\u3010L~R\u3011\u7684\u6570\u7684\u4e2a\u6570\uff0croot\u3010i\u3011\u4e3a\u7b2ci\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u3002\n\n\u8fd0\u7528\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff0c\u591a\u68f5\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5171\u4eab\u8282\u70b9\u3002\n\n\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\n#define mid ((l+r)>>1)\nusing namespace std;\ninline long long read(){\n    long long num=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch)){\n        if(ch=='-')    f=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch)){\n        num=num\\*10+ch-'0';\n        ch=getchar();\n    }\n    return num\\*f;\n}\n\nlong long \\*que;\nlong long \\*f;\nlong long \\*rt;\nlong long \\*ls;\nlong long \\*rs;\nlong long \\*sum;\nlong long tot;\n\nvoid build(long long int &o,int l,int r){\n    o=++tot;\n    sum[o]=0;\n    if(l==r)    return;\n    build(ls[o],l,mid);\n    build(rs[o],mid+1,r);\n}\n\nvoid update(long long &o,int l,int r,int last,long long p){\n    o=++tot;\n    ls[o]=ls[last];\n    rs[o]=rs[last];\n    sum[o]=sum[last]+1;\n    if(l==r)    return;\n    if(p<=mid)    update(ls[o],l,mid,ls[last],p);\n    else         update(rs[o],mid+1,r,rs[last],p);\n}\n\nlong long query(int from,int to,int l,int r,long long k){\n    if(l==r)    return l;\n    long long cnt=sum[ls[to]]-sum[ls[from]];\n    if(k<=cnt)    return query(ls[from],ls[to],l,mid,k);\n    else         return query(rs[from],rs[to],mid+1,r,k-cnt);\n}\n\nint main(){\n    int n=read(),m=read();\n    que=new long long[n+10];\n    f=new long long[n+10];\n    rt=new long long [n\\*20];\n    ls=new long long [n\\*20];\n    rs=new long long [n\\*20];\n    sum=new long long [n\\*20];\n    for(int i=1;i<=n;++i){\n        que[i]=read();\n        f[i]=que[i];\n    }\n    sort(f+1,f+n+1);\n    int size=unique(f+1,f+n+1)-(f+1);\n    build(rt[0],1,size);\n    for(int i=1;i<=n;++i)    que[i]=lower\\_bound(f+1,f+size+1,que[i])-f;\n    for(int i=1;i<=n;++i)    update(rt[i],1,size,rt[i-1],que[i]);\n    int from,to,num;\n    for(int i=1;i<=m;++i){\n        from=read();to=read();num=read();\n        int ans=query(rt[from-1],rt[to],1,size,num);\n        printf(\"%lld\\n\",f[ans]);\n    }\n    return 0;\n}",
        "postTime": 1501984465,
        "uid": 25815,
        "name": "\u5c01\u766b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    },
    {
        "content": "\u7adf\u7136\u6ca1\u6709\u4eba\u7528\u6307\u9488\u5199\uff1f\uff1f \u8fd9\u6211\u5c31\u4e0d\u670d\u4e86\u3002\u65e2\u7136\u662f\u6a21\u677f\uff0c\u8fd8\u662f\u8bb2\u4e00\u4e0b\u601d\u8def\u3002\u9996\u5148\u5982\u679c\u8bf4\u4e0d\u77e5\u9053\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u3002\u3002\u8bf7\u4f60\u5148\u767e\u5ea6\uff0c\u6216\u8005\u53bb\u505a\u505a\u9006\u5e8f\u5bf9\u8fd9\u9053\u9898\u3002\u9996\u5148\u6211\u5148\u58f0\u660e\u4e00\u53e5\uff0c\u4e3b\u5e2d\u6811\u8ddf\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u662f\u5305\u542b\u7684\uff0c\u4e3b\u5e2d\u6811\u88ab\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5305\u542b\uff0c\u800c\u4e0d\u662f\u5565\u4e3b\u5e2d\u6811\u5c31\u662f\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u778e\u6bd4\u6bd4\u5462\u3002\u4e3b\u5e2d\u6811\u51c6\u786e\u6765\u8bf4\u662f\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u8fd9\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u5b9e\u9645\u4e0a\u662f\u76f8\u5f53\u4e8e\u4e00\u9897\u5e73\u8861\u6811\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u770b\u770bNOIP2017\u5217\u961f\uff0c\u90a3\u9053\u9898\u662f\u5178\u578b\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n\u5e9f\u8bdd\u4e86\u8fd9\u4e48\u4e45\u5c31\u5927\u6982\u8bb2\u8bb2\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5427\uff0c\u5176\u5b9e\u539f\u7406\u975e\u5e38\u7b80\u5355\uff0c\u9996\u5148\u6211\u4eec\u8003\u8651\u6709\u65e0\u9650\u7a7a\u95f4\uff0c\u600e\u4e48\u53ef\u6301\u4e45\u5316\uff1f \u7b54\u6848\uff0c\u6bcf\u6b21\u590d\u5236\u4e00\u904d\u7ebf\u6bb5\u6811\u518d\u6539\u5c31\u5b8c\u4e86\u3002\u4f46\u662f\u54ea\u6709\u90a3\u4e48\u591a\u7a7a\u95f4\u3002\u3002\u4e8e\u662f\u6211\u4eec\u7814\u7a76\u4e4b\u540e\uff0c\u53d1\u73b0\u53ea\u4fee\u6539\u6700\u591alogn\u4e2a\u70b9\uff0c\u4e3a\u5565\uff1f\u4f60\u81ea\u5df1\u60f3\u60f3\u7ebf\u6bb5\u6811\u7684\u66f4\u65b0\u65b9\u5f0f\u3002\u90a3\u5176\u4ed6\u7684\u8282\u70b9\u663e\u7136\u6ca1\u6709\u4efb\u4f55\u5fc5\u8981\u53bb\u590d\u5236\uff0c\u90a3\u5c31\u76f4\u63a5\u628a\u65b0\u7684\u8fd9\u68f5\u6811\u7684\u76f8\u5e94\u8282\u70b9\u7528\u4e2a\u6307\u9488\u63a5\u5230\u54ea\u91cc\u5c31\u5b8c\u4e86\uff0c\u9887\u6709\u91cd\u590d\u5229\u7528\u7684\u5473\u9053\uff0c\u5f00\u8282\u70b9\u6c60\u52a8\u6001\u5f00\u70b9\uff0c\u6570\u7ec4\u5f002n+mlogn\u4e2a\u70b9\uff0c\u518d\u5355\u72ec\u5f00\u4e2a\u6839\u6570\u7ec4\u3002\n\n\u90a3\u8fd9\u9053\u9898\uff0c\u76f4\u63a5\u6bcf\u52a0\u4e00\u4e2a\u70b9\u5c31\u590d\u5236\u4e00\u904d\u5f53\u4e2a\u5386\u53f2\u7248\u672c\uff0c\u76f8\u5f53\u4e8e\u524d\u7f00\u548c\u4e86\uff0c\u6bcf\u6b21\u7ed9\u4e2a\u533a\u95f4\u8303\u56f4\u5c31\u4e4b\u5c31\u7528\u7b2cr\u4e2a\u6811\u51cf\u53bb\u4e0e\u7b2cl-1\u4e2a\u6811\u91cd\u590d\u7684\u8282\u70b9\uff0c\u7136\u540e\u3002\u3002\u5c31\u5b8c\u4e86\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=210000;\nstruct node{\n    int sum;\n    node *ls,*rs;\n    node() : sum(0),ls(NULL),rs(NULL) {};\n}pool[N*20];\ninline int read(){\n    int f = 1;int x = 0;char ch = getchar();\n    while(ch>'9' || ch < '0'){\n        if(ch == '-')f = -1;\n        ch = getchar();\n    }\t\n    while(ch >= '0' && ch <= '9'){\n        x = x*10 + ch-'0';\n        ch = getchar();\n    }\n    return x*f;\n}\nnode *root[N];\nnode *NewNode(){\n    static int cnt = 0;\n    return &pool[cnt++];\n}\nnode *build(int l,int r){\n    node *rt = NewNode();int mid = (l+r)>>1;\n    if(l < r){\n        rt->ls = build(l,mid);\n        rt->rs = build(mid+1,r);\t\n    }\t\n    return rt;\n}\nvoid update(node *rt,node *pre,int l,int r,int x){\n\trt->sum = pre->sum + 1;\n    if(l < r){\n        int mid = (l + r) >> 1;\n        if(mid >= x){\n            rt->ls = NewNode();\n            rt->rs = pre->rs;\n            update(rt->ls,pre->ls,l,mid,x);\n        }\n        else{\n            rt->ls = pre->ls;\n            rt->rs = NewNode();\n            update(rt->rs,pre->rs,mid+1,r,x);\n        }\n    }\n    else\n    {\n    \treturn ;\n    }\n}\nint query(node *pre,node *rt,int l,int r,int x){\n    if(l < r){\n        int mid = (l + r) >> 1;\n        int s = rt->ls->sum - pre->ls->sum;\n        if(x <= s){\n            return query(pre->ls,rt->ls,l,mid,x);\n        }\n        else{\n            return query(pre->rs,rt->rs,mid+1,r,x-s);\n        }\n    }\n    return l;\n}\nint n,q;\nint num[N],num2[N];\nint main()\n{\n    scanf(\"%d %d\",&n,&q);\n    for(int i = 1; i <= n; i++){\n        num[i] = read();\n        num2[i] = num[i];\n    }\n    sort(num2+1,num2+1+n);\n    int size = unique(num2+1,num2+n+1)-(num2+1);\n    root[0] = build(1,size);\n    for(int i = 1; i <= n; i++){\n        int t = lower_bound(num2+1,num2+1+size,num[i]) - num2;\n        root[i] = NewNode();\n        update(root[i],root[i-1],1,size,t);\n    }\n    for(int i = 1; i <= q; i++){\n        int x,y,z;\n        x = read();y = read(),z = read();\n        printf(\"%d\\n\",num2[query(root[x-1],root[y],1,size,z)]);\n    }\n}\n```",
        "postTime": 1519825312,
        "uid": 52576,
        "name": "moye\u5230\u7897\u91cc\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3834 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09\u3011"
    }
]