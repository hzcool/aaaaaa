[
    {
        "content": ">\u7ed9\u5b9a\u4e00\u4e2a $n$ \u70b9 $m$ \u8fb9\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u521d\u59cb\u989c\u8272\uff0c\u591a\u6b21\u4fee\u6539\u4e00\u4e2a\u70b9\u989c\u8272\uff0c\u52a8\u6001\u56de\u7b54\u6240\u6709\u5f02\u8272\u70b9\u5bf9\u95f4\u6700\u77ed\u8ddd\u79bb\n\n\u9996\u5148\u53d1\u73b0\u4e00\u4ef6\u4e8b\u60c5\uff0c\u6211\u4eec\u9009\u62e9\u7684\u4e00\u5b9a\u662f**\u4e00\u6761\u8fb9**,\u8003\u8651\u4e00\u6761\u8def\u5f84\u9996\u5c3e\u5f02\u8272\uff0c\u671f\u95f4\u4e00\u5b9a\u6709\u81f3\u5c11\u4e00\u5bf9\u76f8\u90bb\u7684\u70b9\u5f02\u8272\uff0c\u6240\u4ee5\u76f4\u63a5\u53d6\u8fd9\u4e9b\u8fb9\u66f4\u4f18\n\n\u5176\u6b21\u6211\u4eec\u9009\u62e9\u7684\u6765\u6e90\u4e00\u5b9a\u662f**\u4efb\u4f55\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9**,\u8bc1\u660e\u57fa\u4e8e\u6d88\u5708\u5b9a\u5f8b\uff0c\u8003\u8651\u4e00\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u8fb9\n\n- \u82e5\u662f\u540c\u8272\uff0c\u5220\u6389\u65e0\u5f71\u54cd\n- \u82e5\u662f\u5f02\u8272\uff0c\u5220\u6389\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u4e00\u5b9a\u6709\u4e24\u4e2a\u76f8\u90bb\u70b9\u5f02\u8272\u5e76\u4e14\u6743\u503c\u4e0d\u4f1a\u66f4\u5927(\u663e\u7136)\n\n\u751f\u6210\u6811\u5f62\u6001\u5df2\u5b9a\n\n\u95ee\u9898\u53ef\u4ee5\u7b80\u5355\u8f6c\u5316\u4e3a\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u4e0d\u540c\u8272\u513f\u5b50\u4e2d\u7684\u6700\u5c0f\u8ddd\u79bb\n\n\u6211\u4eec\u53ef\u4ee5\u5f00$n$\u68f5\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4e0b\u6807\u4e3a\u989c\u8272\uff0c\u5728\u53f6\u5b50\u5904\u63d2\u5165\u8fd9\u79cd\u989c\u8272\u8fb9\u6743\uff0c\u7ef4\u62a4\u989c\u8272\u533a\u95f4\u7684\u6700\u503c\uff0c\u7136\u540e\u524d\u540e\u7f00($[1,x)+(x,K]$)\u62fc\u51d1\u4e0d\u540c\u8272\u4e2d\u7684\u6700\u503c\n\n\u6bcf\u6b21\u66f4\u6539\u53ea\u4f1a\u5f71\u54cd\u81ea\u5df1\u548c\u7236\u4eb2\u7684\u7b54\u6848\uff0c\u53ea\u4f1a\u52a8\u7236\u4eb2\u7684\u7ebf\u6bb5\u6811\n\n\n```cpp\n#include<bits/stdc++.h>\n#define N 200001\n#define INF 0x3f3f3f3f\n#define M N*32\n#define ls(a) *son[a]\n#define rs(a) son[a][1]\ntypedef long long ll;\nusing namespace std;\ninline int read(void){int x;scanf(\"%d\",&x);return x;}\nstruct Edge{int x,y,v;inline char operator<(Edge a)const{return v<a.v;}}e[N]; \nstruct edge{int to,v;};\nmultiset<int>s[N<<1],ans;\nint n,m,K,q,tot,son[M][2],mi[M],num[M],last[N],a[N],sign,fa[N],len[N],rt[N];\nvector<edge>g[N];\ninline int getf(int x){return x==fa[x]?x:fa[x]=getf(fa[x]);}\ninline void pushup(int x){mi[x]=min(mi[ls(x)],mi[rs(x)]);}\ninline void Insert(int&pos,int l,int r,int x,int v){\n\tif(!pos)pos=++tot;int mid=(l+r)>>1;\n\tif(l==r){if(!num[pos])num[pos]=++sign;s[num[pos]].insert(v);mi[pos]=*s[num[pos]].begin();return ;}\n\t(x<=mid)?Insert(ls(pos),l,mid,x,v):Insert(rs(pos),mid+1,r,x,v);pushup(pos);\n}\ninline void Delete(int&pos,int l,int r,int x,int v){\n\tint mid=(l+r)>>1;\n\tif(l==r){s[num[pos]].erase(s[num[pos]].find(v));mi[pos]=s[num[pos]].size()?*s[num[pos]].begin():INF;return ;}\n\t(x<=mid)?Delete(ls(pos),l,mid,x,v):Delete(rs(pos),mid+1,r,x,v);pushup(pos);\n}\ninline int Query(int pos,int l,int r,int ql,int qr){\n\tif(!pos||ql>qr)return INF;\n\tint mid=(l+r)>>1,res=INF;\n\tif(ql<=l&&r<=qr)return mi[pos];\n\tif(ql<=mid)res=min(res,Query(ls(pos),l,mid,ql,qr));\n\tif(qr>mid)res=min(res,Query(rs(pos),mid+1,r,ql,qr));\n\treturn res;\n}\ninline int Ask(int x){return min(Query(rt[x],1,K,1,a[x]-1),Query(rt[x],1,K,a[x]+1,K));}\ninline void dfs(int x,int prt){int y;fa[x]=prt;for(auto t:g[x])if((y=t.to)^prt)len[y]=t.v,dfs(y,x),Insert(rt[x],1,K,a[y],len[y]);ans.insert(last[x]=Ask(x));/*printf(\"%d :%d %d\\n\",x,last[x],len[x]);*/}\nsigned main(void){\n\tint i,x,y,v,fx,fy;*mi=INF;\n\tn=read(),m=read(),K=read(),q=read();\n\tfor(i=1;i<=n;++i)fa[i]=i;\n\tfor(i=1;i<=m;++i)e[i]={read(),read(),read()};\n\tfor(i=1;i<=n;++i)a[i]=read();\n\tsort(e+1,e+m+1);\n\tfor(i=1;i<=m;++i){x=e[i].x,y=e[i].y;if((fx=getf(x))^(fy=getf(y)))fa[fx]=fy,g[x].push_back({y,e[i].v}),g[y].push_back({x,e[i].v});}\n\tdfs(1,0);\n\twhile(q--){\n\t\ty=fa[x=read()],v=read();\n\t\tans.erase(ans.find(last[x]));if(y)ans.erase(ans.find(last[y])),Delete(rt[y],1,K,a[x],len[x]);a[x]=v;\n\t\tans.insert(last[x]=Ask(x));if(y)Insert(rt[y],1,K,a[x],len[x]),ans.insert(last[y]=Ask(y));\n\t\tprintf(\"%d\\n\",*ans.begin());\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605272346,
        "uid": 40629,
        "name": "zzw4257",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3665 \u3010[USACO17OPEN]Switch Grass P\u3011"
    },
    {
        "content": "#\u9898\u76ee\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u5f20$n,m(n,m\\le200,000)$\u5e26\u6743(\u6743\u4e3a\u6b63)\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u989c\u8272$k(k\\le n)$\uff0c\u6bcf\u6b21\u6539\u53d8\u4e00\u4e2a\u70b9\u7684\u989c\u8272\uff0c\u8981\u6c42\u4f60\u5728\u64cd\u4f5c\u540e\u8f93\u51fa\u8fd9\u4e2a\u56fe\u4e2d\u6700\u8fd1\u5f02\u8272\u70b9\u5bf9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u6700\u8fd1\u5f02\u8272\u70b9\u5bf9\u5b9a\u4e49\u4e3a\uff1a\u4e00\u5bf9\u70b9\u989c\u8272\u4e0d\u540c\uff0c\u4e14\u8ddd\u79bb\u6700\u5c0f.\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P3665)\n\n#\u89e3\u9898\u62a5\u544a\n\n\u4e00\u9053\u975e\u5e38**\u6e05\u65b0\u8131\u4fd7**\u7684US open\u9898\u3002\n\n##Part1\n\n\u9996\u5148\u56e0\u4e3a\u8fb9\u6743\u4e3a\u6b63\uff0c\u663e\u7136\u53ef\u4ee5\u60f3\u5230\u7b54\u6848\u4e00\u5b9a\u662f\u67d0\u4e00\u6761\u8fb9\u7684\u6743\u503c\u3002\n\n\u8fdb\u4e00\u6b65\u53ef\u4ee5\u731c\u60f3\u7b54\u6848\u4e00\u5b9a\u662f\u5728\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\n\n\u7ed9\u51fa\u4e00\u4e2a\u8bc1\u660e\uff1a\n\n\u8003\u8651``Kruskal``\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u5148\u628a\u8fb9\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u6211\u4eec\u4e0d\u65ad\u628a\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u96c6\u5408\u3002\n\n\u82e5\u67d0\u6761\u8fde\u63a5$u,v$\u7684\u8fb9\u4e0d\u80fd\u88ab\u52a0\u5165\u96c6\u5408\uff08\u79f0\u4e3a\u6211\u4eec\u653e\u5f03\u7684\u8fb9\uff09\uff0c\u5219\u8fd9\u6761\u8fb9\u4e00\u5b9a\u548c\u67d0\u4e00\u6761\u8fde\u63a5$u,v$\u7684\u8def\u5f84**\u5f62\u6210\u73af**\u3002\u4e14\u73af\u4e0a**\u6240\u6709\u8fb9\u6743**\u90fd\u6bd4\u8fd9\u4e00\u6761\u8fb9\u5c0f\u3002\n\n\u82e5$u,v$\u4e24\u7aef\u989c\u8272\u76f8\u540c\uff0c\u5219\u8fd9\u4e00\u6761\u8fb9**\u4e00\u5b9a**\u6ca1\u6709\u8d21\u732e\n\n\u5426\u5219$u,v$\u989c\u8272\u4e0d\u540c\uff0c\u5728\u539f\u6709\u7684$u,v$\u8def\u5f84\u4e2d\uff0c\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u7aef\u989c\u8272\u4e5f\u4e0d\u540c\uff0c\u4e14\u90a3\u6761\u8fb9\u8fb9\u6743\u6bd4\u6211\u4eec\u653e\u5f03\u7684\u8fb9\u8fb9\u6743\u66f4\u5c0f\uff0c\u663e\u7136\u66f4\u4f18\u3002\n\n##Part 2\n\n\u8003\u8651\u7ef4\u62a4\u8fd9\u9897\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u6211\u4eec\u5148\u628a\u5b83\u53d8\u6210\u4e00\u9897\u6709\u6839\u6811\uff0c\u7136\u540e\u8003\u8651\u6bcf\u4e2a\u70b9  **\u5b83\u7684\u6240\u6709\u513f\u5b50 \u4e0e\u4ed6\u7684\u8fde\u8fb9\u7684\u8d21\u732e**\n\nUSACO\u5b98\u65b9\u9898\u89e3\u7ed9\u51fa\u4e86\u4e00\u79cd\u975e\u5e38\u4f18\u7f8e\u7684\u89e3\u6cd5\uff08\u867d\u7136\u5199\u8d77\u6765\u53c8\u81ed\u53c8\u957f\uff09\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9($u$)\u7684\u6240\u6709**\u513f\u5b50\u7684\u989c\u8272**\u90fd\u5f00\u4e00\u4e2a``multiset``,\n\n\u6211\u4eec\u79f0\u5176\u4e3a$CLS_{u,c}(c\u4e3a\u989c\u8272)$\uff0c\u5b58\u50a8\u5b83\u548c\u6240\u6709\u989c\u8272\u4e3a$c$\u7684\u513f\u5b50\u7684\u8fb9\u957f\n\n\u663e\u7136\u6bcf\u4e00\u6761\u8fb9\u53ea\u6709\u53ef\u80fd\u5728\u4e00\u4e2a``multiset``\u91cc\uff0c\u603b\u7684\u8282\u70b9\u6570\u53ea\u6709$n-1$,\u4e0d\u4f1a\u70b8\u7a7a\u95f4\u3002\uff08\u4e0b\u9762\u6709\u5177\u4f53\u5b9e\u73b0\uff09\n\n\u518d\u4e3a\u6bcf\u4e00\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a``multiset``\uff0c\u79f0\u5176\u4e3a$best_u$\uff0c\u50a8\u5b58\u6240\u6709\u7684$\uff08min\\{CLS_{u,c} \\}\uff09_{C \\in all colors }$\n\n\u6211\u4eec\u518d\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u79f0\u5176\u4e3a$SGT$\uff0c\u50a8\u5b58\u6bcf\u4e2a\u8282\u70b9\u548c\u4ed6\u513f\u5b50\u7684\u6700\u8fd1\u5f02\u8272\u70b9\u5bf9\u957f\u5ea6\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9$u$,\u4ed6\u7684\u7b54\u6848\u4e0d\u662f``*(best[u]).begin()``\u5c31\u662f``*((best_u).begin()++)``\n\n\u56e0\u4e3a$best_u$\u4e2d\u6bcf\u79cd\u989c\u8272\u663e\u7136\u53ea\u6709\u4e00\u4e2a\uff0c\u82e5\u7b2c\u4e00\u4e2a\u662f\u540c\u8272\uff0c\u90a3\u7b2c\u4e8c\u4e2a\u4e00\u5b9a\u662f\u5f02\u8272\uff08\u6216\u8005\u6ca1\u6709\u7b2c\u4e8c\u4e2a\uff09\u3002\n\n\u90a3\u6211\u4eec\u5982\u4f55\u7ef4\u62a4\u5462\uff1f\n\n\u9996\u5148\uff0c\u5f53\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u7684\u989c\u8272(\u4ece$c$\u6539\u4e3a$c'$)\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u6211\u4eec\u8981\u4fee\u6539\u4e24\u4e2a\u90e8\u5206\u3002\n\n1. \u8003\u8651\u5b83\u548c\u5b83\u7236\u4eb2\u4e4b\u95f4\u7684\u5f71\u54cd\u3002\n\n    \u6211\u4eec\u5148\u8981\u628a\u5b83\u4ece\u539f\u6765\u5728\u7684$CLS_{fa[u],c}$\u53d6\u51fa\u6765\uff0c\u653e\u8fdb$CLS_{fa[u],c'}$\u4e2d\uff0c\u8fd9\u65f6$min\\{CLS_{fa[u],c}\\}$\u548c\n\n$min\\{CLS_{fa[u],c'}\\}$\u90fd\u4f1a\u6539\u53d8,\u6211\u4eec\u8fd8\u8981\u4fee\u6539$best_u$\u4e2d\u7684\u8fd9\u4e24\u9879\u3002\n\n2. \u8003\u8651\u6539\u8fc7\u989c\u8272\u540e\uff0c\u5b83\u548c\u5b83\u513f\u5b50\u7684\u7b54\u6848\u53ef\u80fd\u7531``*(best[u]).begin()``\u53d8\u4e3a``*((best_u).begin()++)``\n\n\u6216``*((best_u).begin()++)``\u53d8\u4e3a``*(best[u]).begin()``\uff0c\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n\nusing namespace std;\n\ntypedef map<int,multiset<int> >::iterator MSIT;\ntypedef set<pair<int,int > >::iterator SPIT;\n\n\nconst int INF=0x3f3f3f3f, maxn=200007;\nint n,m,q,k;\nstruct edge{\n\tint to,nxt,val;\n}e[maxn<<1];\nint head[maxn];\nint tot;\nvoid addedge(int u,int v,int val){\n\te[++tot].to=v;\n\te[tot].nxt=head[u];\n\te[tot].val=val;\n\thead[u]=tot;\n}//\u6811\u8fb9\n\nnamespace MST{\n\tstruct edge1{\n\t\tint x,y,val;\t\n\t\tfriend bool operator <(const edge1 &a,const edge1 &b){\n\t\t\treturn a.val<b.val;\t\n\t\t}\n\t}G[maxn];\n\tint fa[maxn];\n\tint find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\n\tvoid init(){for(int i=1;i<=n;i++)fa[i]=i;}\n\tvoid GMST(){\n\t\tinit();\n\t\tsort(G+1,G+m+1);\n\t\tint cnt=0;\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tint u=G[i].x,v=G[i].y;\n\t\t\tint fu=find(u),fv=find(v);\n\t\t\tif(fu==fv)continue;\n\t\t\tcnt++,fa[fu]=fv;\n\t\t\taddedge(u,v,G[i].val);\n\t\t\taddedge(v,u,G[i].val);\n\t\t}\n\t}\n}//\u6c42\u6700\u5c0f\u751f\u6210\u6811\nusing namespace MST;\n\nstruct SGT{\n\tint t[maxn<<2];\n\n\tvoid pushup(int x){\n\t\tt[x]=min(t[x<<1],t[x<<1|1]);\n\t}\n\tvoid build(int x,int l,int r){\n\t\tif(l==r){\n\t\t\tt[x]=INF;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(x<<1,l,mid);\n\t\tbuild(x<<1|1,mid+1,r);\n\t\tpushup(x);\n\t}\n\tvoid update(int id,int l,int r,int pos,int val ){\n\t\tif(l==r){\n\t\t\tt[id]=val;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(pos<=mid)update(id<<1,l,mid,pos,val);\n\t\telse update(id<<1|1,mid+1,r,pos,val);\n\t\tpushup(id);\n\t}\n}T;//\u7ebf\u6bb5\u6811\nmultiset<pair<int,int > > best[maxn];\nmap<int,multiset<int > > cls[maxn];\nint cl[maxn];\nint f[maxn];\nint w[maxn];\n\nvoid dfs(int u,int ff){\n\tf[u]=ff;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==ff)continue;\n\t\tw[v]=e[i].val;\n\t\tcls[u][cl[v]].insert(w[v]);\n\t\tdfs(v,u);\n\t}\n\tfor(MSIT it=cls[u].begin();it!=cls[u].end();it++){\n\t\tbest[u].insert(mp(*(*it).se.begin(),(*it).fi));//\u521d\u59cb\u5316best\u6570\u7ec4\n\t}\n\t//\u521d\u59cb\u5316\u7ebf\u6bb5\u6811\n\tif(!best[u].empty()){\n\t\tSPIT it=best[u].begin();\n\t\tif(cl[u]!=(*it).se)T.update(1,1,n,u,(*it).fi);\n\t\telse{\n\t\t\tit++;\n\t\t\tif(it==best[u].end())T.update(1,1,n,u,INF);\n\t\t\telse T.update(1,1,n,u,(*it).fi);\n\t\t}\n\t}\n\t\t\n}\n\nint main(){\n\n\tscanf(\"%d%d%d%d\",&n,&m,&k,&q);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,val;\n\t\tscanf(\"%d%d%d\",&u,&v,&val);\n\t\tG[i]=(edge1){u,v,val};\n\t}\t\n\tGMST();\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&cl[i]);\n\tT.build(1,1,n);\n\tdfs(1,0);\n\twhile(q--){\n\t\tint u,c2;\n\t\tscanf(\"%d%d\",&u,&c2);//\u6bcf\u4e00\u6b21\u66f4\u6539\n\t\tif(f[u]){\n\t\t\tint c1=cl[u];\n\t\t\tbest[f[u]].erase(best[f[u]].find(mp(*cls[f[u]][c1].begin(),c1)));\n\t\t\tcls[f[u]][c1].erase(cls[f[u]][c1].find(w[u]));\n\t\t\tif(cls[f[u]][c1].empty())cls[f[u]][c1].insert(INF);\n\t\t\tbest[f[u]].insert(mp(*cls[f[u]][c1].begin(),c1));\n\t\t\t//\u6211\u4eec\u5148\u628au\u4ececl[u]\u62b9\u53bb\n\t\t\tif(!cls[f[u]][c2].empty())\n\t\t\t\tbest[f[u]].erase(best[f[u]].find(mp(*cls[f[u]][c2].begin(),c2)));\n\t\t\tcls[f[u]][c2].insert(w[u]);\n\t\t\tbest[f[u]].insert(mp(*cls[f[u]][c2].begin(),c2));\n\t\t\t//\u518d\u52a0\u5165\u65b0\u7684\u96c6\u5408\u4e2d\n\t\t\tSPIT it=best[f[u]].begin();\n\t\t\tif(cl[f[u]]!=(*it).se)T.update(1,1,n,f[u],(*it).fi);\n\t\t\telse{\n\t\t\t\tit++;\n\t\t\t\tif(it==best[f[u]].end())T.update(1,1,n,f[u],INF);\n\t\t\t\telse T.update(1,1,n,f[u],(*it).fi);\n\t\t\t}\n\t\t}\n\t\tif(!best[u].empty()){\n\t\t\tSPIT it=best[u].begin();\n\t\t\tif(c2!=(*it).se)T.update(1,1,n,u,(*it).fi);\n\t\t\telse{\n\t\t\t\tit++;\n\t\t\t\tif(it==best[u].end())T.update(1,1,n,u,INF);\n\t\t\t\telse T.update(1,1,n,u,(*it).fi);\n\t\t\t}\n\t\t}\n\t\tcl[u]=c2;\n\t\tprintf(\"%d\\n\",T.t[1]);\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n\n\n",
        "postTime": 1569427215,
        "uid": 58532,
        "name": "pmt2018",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3665 \u3010[USACO17OPEN]Switch Grass \u5207\u6362\u7267\u8349\u3011"
    },
    {
        "content": "\u4e24\u4e2a\u91cd\u8981\u7ed3\u8bba\uff1a\n\n1. \u7b54\u6848\u4e00\u5b9a\u662f\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\u3002\n2. \u7b54\u6848\u4e00\u5b9a\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\n\n\u8bfb\u8005\u5bb9\u6613\u81ea\u5df1\u8bc1\u660e\u4e0a\u8ff0\u7ed3\u8bba\u3002\n\n\u8fd9\u4e24\u4e2a\u7ed3\u8bba\u7684\u610f\u4e49\u5728\u4e8e\uff0c\u7b2c\u4e00\u6761\u8ba9\u6211\u4eec\u628a\u96be\u4ee5\u7ef4\u62a4\u7684\u201c\u56fe\u4e0a\u8def\u5f84\u201d\u53d8\u4e3a\u4e86\u6613\u4e8e\u7ef4\u62a4\u7684\u6743\u503c\uff1b\u7b2c\u4e8c\u6761\u4f7f\u5f97\u7528 STL set \u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u51fa\u8fb9\u53d8\u5f97\u53ef\u884c\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u5f71\u54cd $O(1)$ \u4e2a set\uff08\u81ea\u5df1\u7684\uff0c\u7236\u4eb2\u7684\uff09\u3002\n\n\u8003\u8651\u5177\u4f53\u5982\u4f55\u7528 set \u7ef4\u62a4\u3002\u5148\u5efa\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff1a\n\n1. \u5bf9\u6bcf\u4e2a\u70b9 `x`\uff0c\u7ef4\u62a4 $O(son)$\uff08\u513f\u5b50\u4e2a\u6570\uff09\u4e2a set\uff08\u5176\u5b9e\u662f multiset\uff0c\u4ee5\u4e0b\u4e0d\u533a\u5206\uff0c\u9700\u8981\u6ce8\u610f multiset \u7684\u5220\u9664\u6b63\u786e\u5199\u6cd5\u5e94\u662f `s.erase(s.find(x))`\uff09`mxc[x][col]`\uff0c\u8868\u793a $x$ \u7684\u513f\u5b50\u4e2d\u6240\u6709\u6743\u503c\u4e3a $col$ \u7684\u4e0e $x$ \u7684\u8fde\u8fb9\u7684\u8fb9\u6743\u96c6\u5408\uff1b\n2. \u5bf9\u6bcf\u4e2a\u70b9 $x$ \u7ef4\u62a4 `mx[x]`\uff0c\u91cc\u9762\u5b58\u653e\u6240\u6709 `mxc[x][...]` \u4e2d\u7684\u6700\u5c0f\u503c\uff08\u663e\u7136 $x$ \u5bf9\u7b54\u6848\u7684\u8d21\u732e\u53ea\u53ef\u80fd\u6765\u6e90\u4e8e `mx` \u4e2d\u6700\u5c0f\u503c\u6216\u8005\u6b21\u5c0f\u503c\uff09\uff1b\n3. \u5168\u5c40\u4e0a\u7ef4\u62a4 `ans` \u8868\u793a\u6240\u6709\u70b9\u7684 `mx` \u4e2d\u6700\u5c0f\u503c\u6216\u8005\u6b21\u5c0f\u503c\uff08\u513f\u5b50\u6700\u5c0f\u503c\u7684\u989c\u8272\u4e0e\u81ea\u5df1\u76f8\u540c\u65f6\uff09\u7684\u6700\u5c0f\u503c\uff0c\u663e\u7136 `ans.begin()` \u5c31\u662f\u7b54\u6848\u3002\n\n\u4fee\u6539\u65f6\uff0c\u5206\u4e24\u6b65\uff1a\n\n- \u4fee\u6539 $x$ \u7684\u513f\u5b50\u5bf9 $x$ \u7684\u8d21\u732e\u3002\u5b9e\u73b0\u4e0a\u5373\u662f\u4fee\u6539 `mx[x]` \u5bf9 `ans` \u7684\u8d21\u732e\u3002\n- \u4ee4 $fa_x=p$\uff0c\u4fee\u6539 $x$ \u5bf9 $p$ \u7684\u8d21\u732e\u3002\u8fd9\u91cc\u7a0d\u6709\u9ebb\u70e6\uff0c\u9700\u8981\u5148\u4fee\u6539 `mxc[p][a[x]]` \u548c `mxc[p][y]`\uff0c\u518d\u4fee\u6539 `mx[p]` \u53ca `ans`\u3002\n\n\u603b\u590d\u6742\u5ea6\u662f $O((n+q)\\log n+m\\log m)$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define mp make_pair\nusing namespace std;\nstruct Edge{\n\tint x,y,z;\n}e[200005];\nstruct E{\n\tint to,val;\n};\nvector<E> g[200005];\nint n,m,K,q,a[200005],f[200005],fa[200005],v[200005],len[200005];\nmap<int,multiset<int> > mxc[200005];\nmultiset<int> ans;\nmultiset<pair<int,int> > mx[200005];\nint gf(int x){\n\treturn f[x]==x?x:f[x]=gf(f[x]);\n}\nvoid dfs(int x,int f){\n\tfa[x]=f,v[x]=1;\n\tfor(E i:g[x]){\n\t\tint y=i.to;\n\t\tif(y==f)continue;\n\t\tlen[y]=i.val,dfs(y,x),mxc[x][a[y]].insert(i.val);\n\t}\n\tif(!mxc[x].size())return ;\n\tfor(auto i:mxc[x])mx[x].insert(mp(*i.second.begin(),i.first));\n\tauto it=mx[x].begin();\n\tif(it->second^a[x])ans.insert(it->first);\n\telse if((++it)!=mx[x].end())ans.insert(it->first);\n}\nvoid Upd1(int x,int y){\n\tif(a[x]==y||!mx[x].size())return ;\n\tauto it=mx[x].begin();\n\tif(it->second^a[x])ans.erase(ans.find(it->first));\n\telse if((++it)!=mx[x].end())ans.erase(ans.find(it->first));\n\tit=mx[x].begin();\n\tif(it->second^y)ans.insert(it->first);\n\telse if((++it)!=mx[x].end())ans.insert(it->first);\n}\nvoid Upd2(int x,int y){\n\tint p=fa[x];\n\tif(a[x]==y||!p)return ;\n\tauto it=mx[p].begin();\n\tif(it->second^a[p])ans.erase(ans.find(it->first));\n\telse if((++it)!=mx[p].end())ans.erase(ans.find(it->first));\n\tmx[p].erase(mx[p].find(mp(*mxc[p][a[x]].begin(),a[x])));\n\tmxc[p][a[x]].erase(mxc[p][a[x]].find(len[x]));\n\tif(mxc[p].count(y))mx[p].erase(mx[p].find(mp(*mxc[p][y].begin(),y)));\n\tmxc[p][y].insert(len[x]);\n\tmx[p].insert(mp(*mxc[p][y].begin(),y));\n\tif(!mxc[p][a[x]].size())mxc[p].erase(a[x]);\n\telse mx[p].insert(mp(*mxc[p][a[x]].begin(),a[x]));\n\tit=mx[p].begin();\n\tif(it->second^a[p])ans.insert(it->first);\n\telse if((++it)!=mx[p].end())ans.insert(it->first);\n}\nint main(){\n\tscanf(\"%d%d%d%d\",&n,&m,&K,&q);\n\tfor(int i=1,x,y,z;i<=m;i++)scanf(\"%d%d%d\",&x,&y,&z),e[i]={x,y,z};\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]),f[i]=i;\n\tsort(e+1,e+m+1,[](Edge i,Edge j){return i.z<j.z;});\n\tfor(int i=1;i<=m;i++){\n\t\tint x=e[i].x,y=e[i].y,z=e[i].z,fx=gf(x),fy=gf(y);\n\t\tif(fx==fy)continue;\n\t\tf[fx]=fy,g[x].push_back({y,z}),g[y].push_back({x,z});\n\t}\n\tfor(int i=1;i<=n;i++)if(!v[i])dfs(i,0);\n\twhile(q--){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y),Upd1(x,y),Upd2(x,y),a[x]=y,printf(\"%d\\n\",*ans.begin());\n\t}\n}\n```",
        "postTime": 1605272491,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3665 \u3010[USACO17OPEN]Switch Grass P\u3011"
    },
    {
        "content": "\u7ed9\u4e00\u79cd\u8dd1\u5f97\u98de\u5feb\u800c\u4e14\u8fd8\u597d\u5199\u7684\u505a\u6cd5\uff0c\u53d1\u5e03\u7684\u65f6\u5019 994ms \u6700\u4f18\u89e3\u3002\u611f\u8c22 @[chenxinyang2006](/user/49776) \u548c @[I_am_Accepted](/user/101868) \u4e24\u4f4d\u795e\u4ed9\u7684\u6307\u70b9\u3002\n\n\u9996\u5148\u6ce8\u610f\u5230\u6700\u77ed\u7684\u8def\u5f84\u4e00\u5b9a\u53ea\u6709\u4e00\u6761\u8fb9\uff0c\u4e14\u4ec5\u4fdd\u7559\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b54\u6848\u4e0d\u53d8\u3002\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u6761\u8fb9\u6743\u66f4\u5927\u7684\u8fb9\uff0c\u5982\u679c\u65e0\u6cd5\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5219\u5fc5\u7136\u5728\u4e24\u70b9\u4e4b\u95f4\u6709\u4e00\u6761\u66f4\u77ed\u7684\u8fb9\u4f5c\u4e3a\u7b54\u6848\u3002\n\n\u8003\u8651\u539f\u56fe\u7684 Kruskal \u91cd\u6784\u6811\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u865a\u70b9\uff0c\u5176\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u7684\u6761\u4ef6\u4e3a\uff1a\n\n- \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5185\u7684\u7c7b\u578b\u90fd\u76f8\u540c\uff0c\u5426\u5219\u513f\u5b50\u4f5c\u4e3a\u7b54\u6848\u80af\u5b9a\u4e0d\u52a3\uff1b\n- \u4e24\u8fb9\u5b50\u6811\u5185\u5b58\u5728\u7c7b\u578b\u4e0d\u540c\u7684\u70b9\u3002\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u4e00\u68f5\u5b50\u6811\uff0c\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u53ef\u4ee5\u4ee3\u8868\u8fd9\u68f5\u5b50\u6811\u7684\u989c\u8272\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u91cd\u6784\u8fd9\u5f20\u56fe\u4e3a\u4e00\u6761\u94fe\uff0c\u4f7f\u5176\u7b54\u6848\u76f8\u540c\u4e14\u53ef\u4ee5\u66b4\u529b\u5904\u7406\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n- \u521d\u59cb\u6bcf\u4e2a\u70b9\u4e3a\u81ea\u8eab\uff1b\n- Kruskal \u5408\u5e76\u65f6\uff0c\u5c06\u5de6\u5b50\u6811\u7684\u94fe\u5c3e\u548c\u53f3\u5b50\u6811\u7684\u94fe\u9996\u8fde\u8fb9\uff0c\u6743\u503c\u4e3a\u5bf9\u5e94\u7684\u56fe\u4e0a\u7684\u8fb9\u3002\n\n\u6ce8\u610f\u5230\u5bf9\u4e8e\u8fd9\u5f20\u56fe\uff0c\u539f\u56fe\u4e2d\u7684\u7b54\u6848\u4e00\u5b9a\u4f1a\u7b97\u4e0a\uff0c\u4e14\u4f18\u4e8e\u7b54\u6848\u7684\u90e8\u5206\u4e00\u5b9a\u4e0d\u4f1a\u7b97\u4e0a\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u6c42\u89e3\u3002\u590d\u6742\u5ea6 $\\mathcal{O}((n+q)\\log n)$\u3002\n\n\u5b9e\u73b0\u65f6\uff0c\u53ef\u4ee5\u7528\u4e24\u4e2a\u5806\u6765\u4ee3\u66ff set \u4ece\u800c\u51cf\u5c0f\u5e38\u6570\u3002\n\n```cpp\n/* name: P3665\n * author: 5ab\n * created at: 2023-02-03\n */\n#include <iostream>\n#include <algorithm>\n#include <numeric>\n#include <queue>\nusing namespace std;\n\ntypedef long long ll;\nconst int max_n = 200000, max_m = 300000;\n\nstruct edge\n{\n\tint u, v, w;\n}\ne[max_m];\nint dsu[max_n], c[max_n], l[max_n], r[max_n];\nint hd[max_n], des[max_n * 2], val[max_n * 2], nxt[max_n * 2], e_cnt = 0;\npriority_queue<int, vector<int>, greater<int>> pq, del;\n\nint fnd(int x) { return x == dsu[x] ? x : (dsu[x] = fnd(dsu[x])); }\nvoid add(int s, int t, int v)\n{\n\tdes[e_cnt] = t;\n\tval[e_cnt] = v;\n\tnxt[e_cnt] = hd[s];\n\thd[s] = e_cnt++;\n}\n\nsigned main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\t\n\tint n, m, lim, q;\n\t\n\tcin >> n >> m >> lim >> q;\n\tfill(hd, hd + n, -1);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tauto& [u, v, w] = e[i];\n\t\tcin >> u >> v >> w;\n\t\tu--, v--;\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tcin >> c[i];\n\tsort(e, e + m, [](const edge& lhs, const edge& rhs) {\n\t\treturn lhs.w < rhs.w;\n\t});\n\t\n\tiota(dsu, dsu + n, 0);\n\tiota(l, l + n, 0);\n\tiota(r, r + n, 0);\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tauto [u, v, w] = e[i];\n\t\tu = fnd(u), v = fnd(v);\n\t\tif (u != v)\n\t\t{\n\t\t\tadd(r[u], l[v], w);\n\t\t\tadd(l[v], r[u], w);\n\t\t\tdsu[v] = u;\n\t\t\tr[u] = r[v];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int p = hd[i], dst; p != -1; p = nxt[p])\n\t\t{\n\t\t\tdst = des[p];\n\t\t\tif (c[i] != c[dst] && i < dst)\n\t\t\t\tpq.push(val[p]);\n\t\t}\n\t\n\tint x, v;\n\twhile (q--)\n\t{\n\t\tcin >> x >> v, x--;\n\t\tfor (int p = hd[x], dst; p != -1; p = nxt[p])\n\t\t{\n\t\t\tdst = des[p];\n\t\t\tif (c[x] != c[dst])\n\t\t\t\tdel.push(val[p]);\n\t\t\tif (v != c[dst])\n\t\t\t\tpq.push(val[p]);\n\t\t}\n\t\tc[x] = v;\n\t\t\n\t\twhile (!pq.empty() && !del.empty() && pq.top() == del.top())\n\t\t\tpq.pop(), del.pop();\n\t\tcout << pq.top() << \"\\n\";\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1675393669,
        "uid": 119491,
        "name": "5ab_juruo",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P3665 [USACO17OPEN]Switch Grass P"
    },
    {
        "content": "\u975e\u5e38\u597d\u7684\u7ebf\u6bb5\u6811\u9898\n\n\u9996\u5148\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\u7b54\u6848\u5728 MST \u4e0a\uff0c\u5426\u5219\u4e00\u5b9a\u4e0d\u662f\u6700\u4f18\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u8fde\u51fa\u53bb\u989c\u8272\u7684\u4fe1\u606f\u3002\n\n\u5177\u4f53\u7684\uff0c\u6211\u4eec\u7528\u4e00\u4e2a map \u8bb0\u5f55\u6bcf\u79cd\u513f\u5b50\u6bcf\u4e2a\u989c\u8272\u7684\u7f16\u53f7\uff0c\u7528 multiset \u8bb0\u5f55\u5176\u4e00\u79cd\u989c\u8272\u513f\u5b50\u7684\u8fb9\u7684\u957f\u5ea6\uff0c\u628a\u6700\u77ed\u7684\u653e\u5165\u7ebf\u6bb5\u6811\u4e2d\u7ef4\u62a4\uff0c\u7b54\u6848\u5373\u4e3a $ [1,col[x]),(col[x],n]$ \u8fd9\u4e24\u6bb5\u533a\u95f4\u6700\u5c0f\u503c\u3002\u7edf\u8ba1\u7b54\u6848\u65f6\u53ea\u8981\u7528 multiset \u7ef4\u62a4\u6bcf\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u8f93\u51fa\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u5bf9\u5176\u7236\u4eb2\u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u4fee\u6539\uff0c\u8981\u6ce8\u610f\u5728 multiset \u4e2d\u5220\u9664\u70b9\u3002\u7136\u540e\u91cd\u65b0\u7edf\u8ba1\u5176\u7236\u4eb2\u4e0e\u5176\u672c\u8eab\u7b54\u6848\u3002\u6700\u540e\u518d\u4fee\u6539\u7ef4\u62a4\u6bcf\u70b9\u7b54\u6848\u7684 multiset \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\n\n\n\n------------\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//static char buf[1000000],*p1=buf,*p2=buf;\n//#define getchar() p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++\n#define pi pair<int,int>\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define mid (l+r>>1)\n#define lowbit (x&-x)\nconst int maxn=4e5+5,M=8e6+5;\ninline int read()\n{\n\tchar ch=getchar();bool f=0;int x=0;\n\tfor(;!isdigit(ch);ch=getchar())if(ch=='-')f=1;\n\tfor(;isdigit(ch);ch=getchar())x=(x<<1)+(x<<3)+(ch^48);\n\tif(f==1)x=-x;return x;\n}\ninline void print(int x)\n{\n    static int a[55];int top=0;\n    if(x<0) putchar('-'),x=-x;\n    do{a[top++]=x%10,x/=10;}while(x);\n    while(top) putchar(a[--top]+48);\n}\nint n,m,ls[M],rs[M],rt[maxn],k,q,Min[M],b[maxn],f[maxn],ans[maxn],tot,cnt,fa[maxn],g[maxn],x,y;\nmultiset<int>s[maxn],Ans;\nmap<int,int>id[maxn];\nvector<pi>e[maxn];\nstruct node{int u,v,w;}a[maxn];\nbool cmp(node a,node b){return a.w<b.w;}\nint getf(int x){if(fa[x]==x)return x;return fa[x]=getf(fa[x]);}\nvoid change(int &rt,int l,int r,int x,int num)\n{\n\tif(l>x||r<x)return;\n\tif(!rt)rt=++tot;//cout<<rt<<\" \"<<l<<\" \"<<r<<endl;\n\tif(l==x&&r==x){Min[rt]=num;return;}\n\tchange(ls[rt],l,mid,x,num);change(rs[rt],mid+1,r,x,num);\n\tMin[rt]=1e9;\n\tif(ls[rt])Min[rt]=min(Min[rt],Min[ls[rt]]);\n\tif(rs[rt])Min[rt]=min(Min[rt],Min[rs[rt]]);\n}\nint query(int rt,int l,int r,int L,int R)\n{\n\tif(!rt)return 1e9;\n\tif(l>R||r<L)return 1e9;\n\tif(l>=L&&r<=R)return Min[rt];\n\treturn min(query(ls[rt],l,mid,L,R),query(rs[rt],mid+1,r,L,R)); \n}\nvoid dfs(int x,int fa)\n{\n\t//cout<<x<<endl;\n\tf[x]=fa;\n\tfor(auto i:e[x])\n\t\tif(i.fi^fa)\n\t\t{\n\t\t\tdfs(i.fi,x);g[i.fi]=i.se;\n\t\t\tif(!id[x][b[i.fi]])id[x][b[i.fi]]=++cnt;\n\t\t\ts[id[x][b[i.fi]]].insert(i.se);\t\t\n\t\t\tchange(rt[x],1,n,b[i.fi],*s[id[x][b[i.fi]]].begin());\n\t\t}\n\tans[x]=min(query(rt[x],1,n,1,b[x]-1),query(rt[x],1,n,b[x]+1,n));\n\tAns.insert(ans[x]);\n}\nsigned main()\n{\n\t//freopen(\"P3665_2.in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read(),m=read();k=read(),q=read();\n\tfor(int i=1;i<=m;i++)\n\t\ta[i].u=read(),a[i].v=read(),a[i].w=read();\n\tsort(a+1,a+m+1,cmp);\n\tfor(int i=1;i<=n;i++)fa[i]=i,b[i]=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=getf(a[i].u),y=getf(a[i].v);\n\t\tif(x==y)continue;\n\t\te[a[i].u].pb(mp(a[i].v,a[i].w)),e[a[i].v].pb(mp(a[i].u,a[i].w));\n\t\tfa[x]=y;\n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tx=read(),y=read();Ans.erase(Ans.find(ans[x]));\n\t//\tcout<<x<<\" \"<<y<<endl;\n\t\tif(x!=1)\n\t\t{\n\t\t\tint t=id[f[x]][b[x]];//cout<<t<<endl;\n\t\t\ts[t].erase(s[t].find(g[x]));//cout<<\"A\";\n\t\t\tAns.erase(Ans.find(ans[f[x]]));\n\t\t\tif(s[t].empty())change(rt[f[x]],1,n,b[x],1e9);\n\t\t\telse change(rt[f[x]],1,n,b[x],*s[t].begin());\n\t\t\tb[x]=y;\n\t\t\tif(!id[f[x]][b[x]])id[f[x]][b[x]]=++cnt;\n\t\t\tt=id[f[x]][b[x]];s[t].insert(g[x]);change(rt[f[x]],1,n,b[x],*s[t].begin());\n\t\t\tans[f[x]]=min(query(rt[f[x]],1,n,1,b[f[x]]-1),query(rt[f[x]],1,n,b[f[x]]+1,n));\n\t\t\tAns.insert(ans[f[x]]);\n\t\t}\n\t\tb[x]=y;\n\t\tans[x]=min(query(rt[x],1,n,1,b[x]-1),query(rt[x],1,n,b[x]+1,n));\n\t\tAns.insert(ans[x]),printf(\"%d\\n\",*Ans.begin());\n\t}\n \treturn 0;\n}\n\n\n/*********************************************************************\n    \u4f5c\u8005:louhao088\n    \u65e5\u671f: 2022-01-24 13:45\n*********************************************************************/\n\n```\n",
        "postTime": 1643270677,
        "uid": 343748,
        "name": "louhao088",
        "ccfLevel": 9,
        "title": "\u9898\u89e3P3665 [USACO17OPEN]Switch Grass P"
    },
    {
        "content": "\u4e0d\u592a\u4e00\u6837\u7684\u5b9e\u73b0\u65b9\u6cd5\u3002\n\n\u5148\u627e\u6027\u8d28\uff1a\n\n- \u7b54\u6848\u4e00\u5b9a\u662f\u4e00\u6761\u8fb9\u3002\n\n\t\u8003\u8651\u53cd\u8bc1\u6cd5\u3002\u5982\u679c\u7b54\u6848\u662f $\\{x\\rightarrow y\\}$ \u7684\u8def\u5f84\uff0c\u90a3\u4e48 $x,y$ \u5f02\u8272\uff0c\u8def\u5f84\u4e0a\u7684\u70b9 $z$ \u4e0d\u53ef\u80fd\u540c\u65f6\u548c $x,y$ \u540c\u8272\u3002\u6240\u4ee5 $\\{x\\rightarrow z\\},\\{z\\rightarrow y\\}$ \u80af\u5b9a\u6709\u4e00\u4e2a\u53ef\u53d6\u4e14\u66f4\u4f18\u3002\n    \n- \u7b54\u6848\u4e00\u5b9a\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\n\n\t\u8bc1\u660e\u7c7b\u4f3c\u3002\u5047\u8bbe\u7b54\u6848\u4e3a\u4e0d\u5728MST\u4e0a\u7684\u8fb9 $(u,v)$\u3002\u6839\u636eMST\u7684\u5b9a\u4e49\uff0c$\\{u\\rightarrow v\\}$ \u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u90fd\u5c0f\u4e8e\u7b49\u4e8e $(u,v)$ \u7684\u8fb9\u6743\uff0c\u663e\u7136\u9009MST $\\{u \\rightarrow v\\}$ \u8def\u5f84\u4e0a\u7684\u8fb9\u4e0d\u52a3\u3002\n    \n    \n\u6240\u4ee5\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u6811\u4e0a\u6700\u5c0f\u7684\u8fb9\u6743\uff0c\u6ee1\u8db3\u4e24\u4e2a\u7aef\u70b9\u7684\u989c\u8272\u4e0d\u540c\u3002\n\n\u4ece\u56fe\u8f6c\u5316\u4e3a\u6811\uff0c\u80af\u5b9a\u8981\u5229\u7528\u6811\u552f\u4e00\u524d\u9a71\u7684\u6027\u8d28\u3002\u8003\u8651\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5176\u8fde\u5411\u5b50\u8282\u70b9\u7684\u8fb9\uff0c\u8fd9\u6837\u6bcf\u6b21\u4fee\u6539\u53ea\u9700\u8981\u6539\u53d8\u7236\u8282\u70b9\u7684\u4fe1\u606f\u3002\n\n\u5bf9\u4e8e\u70b9 $x$\uff0c\u5176\u5b50\u8282\u70b9 $u$ \u7684\u6709\u6548\u4fe1\u606f\u4e3a $(col_u,u)$\n\u3002$col_u$ \u662f\u4e3a\u4e86\u67e5\u8be2\u54ea\u4e9b\u5b50\u8282\u70b9\u4e0e $x$ \u989c\u8272\u4e0d\u540c\uff0c$u$ (\u7f16\u53f7) \u662f\u4e3a\u4e86\u5b9a\u4f4d\u4fee\u6539\u7684\u4f4d\u7f6e\u3002\n\n\u7531\u4e8e\u662f\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6309\u7167 $col$ \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u5efa\u4e00\u68f5 $n\\times k$ \u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u4fee\u6539\u64cd\u4f5c\u53d8\u6210\u4e24\u6b21\u5355\u70b9\u4fee\u6539\uff08$(col_x,x)$ \u53d8\u4e3a $0$\uff0c$(col'_x,x)$ \u53d8\u4e3a\u8fb9\u6743\uff09\uff0c\u5f53\u524d\u8282\u70b9\u7684\u7b54\u6848\u53d8\u6210\u6316\u6389 $col_x$ \u7684 $n$ \u4e2a\u6570\u540e\u7684\u6700\u503c\u3002\n\n\u7136\u540e\u6700\u540e\u518d\u62ff\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u7684\u6700\u503c\u5c31\u597d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n^2)$\u3002\n\n~~\u51b7\u77e5\u8bc6\uff1a\u6700\u503c\u7ef4\u62a4\u6210\u6700\u5927\u503c\u670990\u5206~~\n \n \n ```cpp\n #include<bits/stdc++.h>\n#define ll long long\n#define mp make_pair\n#define il inline\nusing namespace std;\nconst int maxn=200010;\nconst int maxN=maxn*70;\nil int read(){\n\tint x=0;\n\tchar c=getchar();\n\tfor(;!(c>='0'&&c<='9');c=getchar());\n\tfor(;c>='0'&&c<='9';c=getchar())\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\treturn x; \n}\nstruct Edge{\n\tint u,v,w;\n}E[maxn];\nil bool cmp(Edge a,Edge b){return a.w<b.w;}\nstruct edge{\n\tint v,w,to;\n}e[maxn<<1];\nint head[maxn],ecnt=1;\nvoid addedge(int u,int v,int w){\n\te[++ecnt].v=v,e[ecnt].w=w;\n\te[ecnt].to=head[u],head[u]=ecnt;\n}\nint lw[maxn];\nint ans[maxn<<2],fa[maxn];\nint rt[maxn],data[maxN],ls[maxN],rs[maxN];\nint n,m,k,q,cnt,N;\nint col[maxn],f[maxn];\nint sz[maxn],Son[maxn];\nint Find(int x){return f[x]==x?x:f[x]=Find(f[x]);} \nvoid Kruscal(int cn=1){\n\tfor(int i=1;cn<n;i++)\n\t\tif(Find(E[i].u)^Find(E[i].v)){\n\t\t\tsz[E[i].u]++,sz[E[i].v]++;\n\t\t\taddedge(E[i].u,E[i].v,E[i].w);\n\t\t\taddedge(E[i].v,E[i].u,E[i].w);\n\t\t\tf[Find(E[i].u)]=Find(E[i].v),cn++;\n\t\t}\n\tfor(int i=2;i<=n;i++) sz[i]--;\n} \nil int Min(int x,int y){if(!x) return y;if(!y) return x;return min(x,y);} \nvoid Modify1(int &i,ll l,ll r,ll x,int k){\n//\tprintf(\"%d,%d\\n\",l,r);\n\tif(!i) i=++cnt;\n\tif(l==x&&r==x){\n\t\tdata[i]=k;\n\t\treturn ;\n\t}ll mid=l+r>>1;\n\tif(x<=mid) Modify1(ls[i],l,mid,x,k);\n\telse Modify1(rs[i],mid+1,r,x,k);\n\tdata[i]=Min(data[ls[i]],data[rs[i]]);\n}\nint Query1(int i,ll l,ll r,ll L,ll R){\n\tif(l>=L&&r<=R) return data[i];\n\tif(l>R||r<L||!i) return 0;\n\tll mid=l+r>>1;\n\treturn Min(Query1(ls[i],l,mid,L,R),Query1(rs[i],mid+1,r,L,R));\n}\nvoid Modify2(int i,int l,int r,int x,int k){\n\tif(l==x&&r==x){\n\t\tans[i]=k;\n\t\treturn ;\n\t}int mid=l+r>>1;\n\tif(x<=mid) Modify2(i<<1,l,mid,x,k);\n\telse Modify2(i<<1|1,mid+1,r,x,k);\n\tans[i]=Min(ans[i<<1],ans[i<<1|1]);\n}\nvoid dfs(int fath,int x,int llw=0){\n\tint cn=0;fa[x]=fath,lw[x]=llw;\n\tfor(int i=head[x];i;i=e[i].to)\n\t\tif(e[i].v^fath){\n\t\t\tSon[e[i].v]=++cn;\n\t\t\tModify1(rt[x],1,sz[x]*1ll*k,(col[e[i].v]-1ll)*sz[x]+Son[e[i].v],e[i].w);\n\t\t\tdfs(x,e[i].v,e[i].w);\n\t\t}\n\tModify2(1,1,n,x,Min(Query1(rt[x],1,sz[x]*1ll*k,1,(col[x]-1ll)*sz[x]),\n\t\t\t\t\t\tQuery1(rt[x],1,sz[x]*1ll*k,col[x]*1ll*sz[x]+1,sz[x]*1ll*k)));\n}\nint main(){\n\tint x,y,z;\n\tn=read(),m=read(),k=read(),q=read();\n\tfor(int i=1;i<=m;i++)\n\t\tE[i].u=read(),E[i].v=read(),E[i].w=read(); \n\tfor(int i=1;i<=n;i++) f[i]=i,col[i]=read(); \n\tsort(E+1,E+1+m,cmp),Kruscal(),dfs(0,1);\n\twhile(q--){\n\t\tx=read(),y=fa[x],z=read();\n\t\tif(y){\n\t\t\tModify1(rt[y],1,sz[y]*1ll*k,(col[x]-1ll)*sz[y]+Son[x],0);\n\t\t\tModify1(rt[y],1,sz[y]*1ll*k,(z-1ll)*sz[y]+Son[x],lw[x]);\n\t\t\tModify2(1,1,n,y,Min(Query1(rt[y],1,sz[y]*1ll*k,1,(col[y]-1ll)*sz[y]),\n\t\t\t\t\t\t\t\tQuery1(rt[y],1,sz[y]*1ll*k,col[y]*1ll*sz[y]+1,sz[y]*1ll*k)));\n\t\t}col[x]=z;\n\t\tModify2(1,1,n,x,Min(Query1(rt[x],1,sz[x]*1ll*k,1,(col[x]-1ll)*sz[x]),\n\t\t\t\t\t\t\tQuery1(rt[x],1,sz[x]*1ll*k,col[x]*1ll*sz[x]+1,sz[x]*1ll*k)));\n\t\tprintf(\"%d\\n\",ans[1]);\n\t}\n\treturn 0;\n} \n ```",
        "postTime": 1667724439,
        "uid": 288716,
        "name": "lzqy_",
        "ccfLevel": 7,
        "title": "P3665 [USACO17OPEN]Switch Grass P \u9898\u89e3"
    },
    {
        "content": "\u4e24\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\n\n**1.\u7b54\u6848\u4e00\u5b9a\u662f\u76f8\u90bb\u4e24\u8fb9**\n\n\u8bc1\u660e:\u5982\u679c\u76f8\u90bb\u4e24\u70b9 $x \\to y$ \u540c\u8272\uff0c$x \\to z$ \u4e0d\u540c\u8272\uff0c\u6ca1\u5fc5\u8981\u9009 $y \\to z$\u3002\n\n**2.\u7b54\u6848\u4e00\u5b9a\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a**\n\n\u8bc1\u660e:\u7ed3\u5408\u7b2c\u4e00\u4e2a\u7ed3\u8bba\uff0c\u53d1\u73b0\u8fd9\u4e2a\u662f\u5bf9\u7684\u3002\n\n\u7136\u540e\u5c31\u662f\u7b80\u5355\u6570\u636e\u7ed3\u6784\u7684\u4e8b\u60c5\u4e86\u3002\n\n\u4ee3\u7801\u662f\u5565\uff0c\u8fd9\u8f88\u5b50\u90fd\u4e0d\u4f1a\u5199\u7684\u3002",
        "postTime": 1606304527,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3665 \u3010[USACO17OPEN]Switch Grass P\u3011"
    }
]