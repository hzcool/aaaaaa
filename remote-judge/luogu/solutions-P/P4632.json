[
    {
        "content": "\u6570\u636e\u7ed3\u6784\u795e\u9898\u2026\u2026\n\n\u4e24\u4e2alog\u8dd1\u4e862000ms\u6211\u4e5f\u662f\u9189\u4e86(\u4eba\u50bb\u5e38\u6570\u5927)\n\n________________________\n\n# \u672c\u9898\u9898\u89e3\n\n\u9898\u610f\u8fd8\u662f\u6bd4\u8f83\u6e05\u695a\u7684\uff0c\u6570\u8f74\u4e0a\u6709\u4e00\u5806\u4e0d\u540c\u989c\u8272\u7684\u70b9\uff0c\u6bcf\u4e2a\u70b9\u4f1a\u5728\u4e00\u5b9a\u65f6\u95f4\u51fa\u73b0\u5728\u53e6\u4e00\u4e9b\u65f6\u95f4\u6d88\u5931\uff0c\u6bcf\u6b21\u8be2\u95ee\u5728\u67d0\u4e00\u4e2a\u65f6\u95f4\u4ece\u67d0\u4e00\u4e2a\u70b9\u51fa\u53d1\u9700\u8981\u7ecf\u8fc7\u591a\u957f\u8ddd\u79bb\u624d\u80fd\u7ecf\u8fc7\u6240\u6709\u989c\u8272\u81f3\u5c11\u4e00\u6b21\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u8fd9\u9053\u9898\u7684\u601d\u8def\u57fa\u672c\u4e0a\u5c31\u662f\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u53ea\u662f\u4f7f\u7528\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u52a0\u901f\u6211\u4eec\u7684\u6a21\u62df\n\n### \u626b\u63cf\u7ebf\n\n\u9996\u5148\u6211\u4eec\u5148\u5bf9\u65f6\u95f4\u8f74\u8fdb\u884c\u7c7b\u4f3c\u4e8e\u626b\u63cf\u7ebf\u7684\u5904\u7406\uff0c\u628a\u4e00\u4e2a\u5546\u5e97\u62c6\u6210\u4e00\u4e2aa\u65f6\u95f4\u63d2\u5165\u64cd\u4f5c\u548c\u4e00\u4e2ab\u65f6\u95f4\u5220\u9664\u64cd\u4f5c\n\n\u6240\u4ee5\u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\uff0c\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u989c\u8272\u5e8f\u5217\uff0c\u652f\u6301\u5728\u67d0\u4e2a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u989c\u8272\u548c\u5220\u9664\u4e00\u4e2a\u989c\u8272\n\n\u95ee\u9898\u6765\u4e86\u6211\u4eec\u8981\u652f\u6301\u4ec0\u4e48\u8be2\u95ee\u5462\uff1f\n\n### \u4e8c\u5206\u7b54\u6848\n\n\u7136\u540e\u6211\u4eec\u6765\u770b\u8be2\u95ee\u662f\u8be2\u95ee\u5728\u67d0\u4e00\u4e2a\u65f6\u95f4\uff0c\u4e00\u4e2a\u4eba\u4ece\u67d0\u4e00\u4f4d\u7f6e\u51fa\u53d1\u540c\u65f6\u5411\u4e24\u8fb9\u8d70\uff0c\u81f3\u5c11\u8d70\u591a\u8fdc\u624d\u80fd\u7ecf\u8fc7\u6240\u6709\u7684\u989c\u8272\u5404\u4e00\u6b21\n\n\u5f53\u7136\u53ef\u4ee5\u8fc5\u901f\u7684\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u4e86\u2026\u2026\n\n\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848mid\uff0c\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u6210\u4e86\uff0c\u6211\u8d70mid\u6b65\u53ef\u4e0d\u53ef\u4ee5\u7ecf\u8fc7\u6240\u6709\u7684\u989c\u8272\n\n\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u9700\u8981\u5f3a\u5236\u5728\u7ebf\u7684\u652f\u6301\u533a\u95f4\u67e5\u662f\u5426\u6709\u6240\u6709\u7684\u989c\u8272\n\n\u90a3\u4e48\u533a\u95f4\u6570\u989c\u8272\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\u4e00\u4e2a\u5957\u8def\uff0c\u5957\u8def\u7684\u540d\u5b57\u53eb\u53ea\u6570\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u70b9\n\n#### \u533a\u95f4\u6570\u989c\u8272\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u989c\u8272\u8bb0$pre_{i}$\u4e3a\u8fd9\u4e2a\u989c\u8272\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u548c\u5b83\u540c\u8272\u70b9\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u70b9\u662f\u533a\u95f4$[l,r]$\u4e2d\u672c\u989c\u8272\u7684\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u70b9\u5f53\u4e14\u4ec5\u5f53$pre_{i}<l$(\u53ef\u4ee5\u753b\u4e00\u4e2a\u56fe\u52a0\u6df1\u7406\u89e3)\u90a3\u4e48\u6211\u4eec\u5982\u679c\u8981\u6570\u533a\u95f4\u91cc\u6709\u591a\u5c11\u989c\u8272\u53ea\u9700\u67e5\u8be2$[l,r]$\u4e2d\u7684\u70b9\u6709\u591a\u5c11\u4e2a\u70b9\u7684$pre$\u503c\u5c0f\u4e8el\u5373\u53ef\u2026\u2026\n\n\u7136\u540e\u4f60\u5f53\u7136\u53ef\u4ee5\u628a\u4e8c\u5206\u7684\u5224\u5b9a\u95ee\u9898\u8f6c\u5316\u4e3a\u533a\u95f4\u4e2d\u7684\u989c\u8272\u4e2a\u6570\u662f\u5426\u7b49\u4e8ek\u8fd9\u4e2a\u95ee\u9898\n\n\u4e8e\u662f\u4f60\u7528\u7ebf\u6bb5\u6811\u5957\u7ebf\u6bb5\u6811\u53bb\u6570\u533a\u95f4\u7684\u989c\u8272\u4e86\u2026\u2026\n\n\u53e6\u5916\u4f60\u9700\u8981\u6ce8\u610f\u7684\u662f\u540c\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u51fa\u73b0\u591a\u4e2apre\u503c\u4e0d\u540c\u7684\u70b9\uff0c\u6b64\u65f6\u4f60\u7684\u79bb\u6563\u5316\u4f1a\u53d8\u7684\u6781\u5176\u6076\u5fc3\u540c\u65f6\u8fb9\u754c\u95ee\u9898\u57fa\u672c\u8ba8\u8bba\u4e0d\u6e05\u695a\n\n\u5e76\u4e14\u6b64\u65f6\u7684\u4f60\u7684\u590d\u6742\u5ea6\u662f$O(nlog^3n)$\u5728$n=3\u00d710^5$\u7684\u65f6\u5019\u8fd9\u4e2a\u6570\u5b57\u751a\u81f3\u6bd4$O(n\\sqrt{n})$\u8fd8\u8981\u5927\u2026\u2026\u663e\u7136\u662f\u8981T\u98de\u7684\u2026\u2026\n\n______________\n\n#### \u67e5\u627e\u662f\u5426\u5b58\u5728\u6240\u6709\u7684\u989c\u8272\n\n$O(nlog^3n)$\u7684\u4f18\u79c0\u590d\u6742\u5ea6\u8ba9\u6211\u4eec\u4e0d\u7981\u6000\u7591\u6211\u4eec\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u51fa\u4e86\u504f\u5dee\u2026\u2026\n\n\u6240\u4ee5\u8ba9\u6211\u4eec\u56de\u5230\u95ee\u9898\u7684\u539f\u70b9\u2014\u2014\u67e5\u627e\u533a\u95f4\u4e2d\u662f\u5426\u5b58\u5728\u6240\u6709\u7684\u989c\u8272\n\n\u6709\u8c01\u544a\u8bc9\u4f60\u6211\u4eec\u975e\u8981\u77e5\u9053\u533a\u95f4\u91cc\u6709**\u591a\u5c11\u79cd**\u989c\u8272\u5417\uff1f\n\n\u6211\u4eec\u53ea\u662f\u9700\u8981\u77e5\u9053\u533a\u95f4\u91cc**\u662f\u5426**\u6709\u6240\u6709\u7684\u989c\u8272\u800c\u5df2\n\n\u4ed4\u7ec6\u89c2\u5bdfpre\u7684\u542b\u4e49\u2014\u2014\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u548c\u8fd9\u4e2a\u70b9\u540c\u8272\u70b9\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0$pre$\u503c\u8fd8\u544a\u8bc9\u6211\u4eec\u53e6\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u4fe1\u606f\n\n**$i$\u5230$pre_{i}$\u4e4b\u95f4\u4e0d\u5b58\u5728i\u8fd9\u79cd\u989c\u8272**\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e$[r+1,n]$\u7684$pre$\u7684\u533a\u95f4\u6700\u5c0f\u503c$k$\n\n\u8fd9\u6837\u7684\u8bdd\u6839\u636epre\u503c\u7684\u6027\u8d28,\u9664\u975e\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5c0f\u4e8ek\uff0c\u5426\u5219\u6211\u4eec\u4ecer\u51fa\u53d1\u4e00\u5b9a\u78b0\u4e0d\u5230\u6240\u6709\u7684\u989c\u8272\uff0c\u76f4\u63a5\u8bf4\u53ef\u80fd\u4e0d\u662f\u5f88\u597d\u7406\u89e3\uff0c\u5efa\u8bae\u8fd9\u91cc\u81ea\u5df1\u753b\u56fe\n\n\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u67e5\u627e$[r+1,n]$\u7684\u533a\u95f4pre\u6700\u5c0f\u503c\uff0c\u7136\u540e\u548c$l$\u8fdb\u884c\u6bd4\u8f83\u5373\u53ef\u786e\u8ba4\u533a\u95f4\u4e2d\u662f\u5426\u6709\u6240\u6709\u7684\u989c\u8272\u4e86\n\n\u8fd9\u4e2a\u4e1c\u897f\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\n\n\u5f53\u7136\u6211\u4eec\u4f1a\u53d1\u73b0\u6211\u4eec\u843d\u4e0b\u4e86\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u6bcf\u4e2a\u989c\u8272\u7684\u6700\u53f3\u70b9\u4e0d\u4f1a\u88ab\u7b97\u4e0a\n\n\u5355\u5f00\u4e00\u4e2aset\u5b58\u4e0b\u6240\u6709\u989c\u8272\u7684\u6700\u53f3\u70b9\u5750\u6807\uff0c\u7136\u540e\u6bcf\u6b21\u53d6set\u91cc\u7684\u6700\u5c0f\u503c\u548c\u533a\u95f4\u6700\u5c0f\u503c\u6bd4\u8f83\u53d6\u4e8c\u8005\u66f4\u5c0f\u7684\u5373\u53ef\n\n\u90a3\u4e48\u63d2\u5165\u548c\u5220\u9664\u67d0\u4e00\u4e2a\u989c\u8272\u7684\u65f6\u5019\u5b83\u7684\u540e\u7ee7\u7684pre\u503c\u5c06\u4f1a\u53d8\u5316\u4e3a\u4ed6\u7684\u524d\u9a71\u6216\u8005\u5b83\u81ea\u5df1\uff0c\u67e5\u627e\u540c\u8272\u524d\u9a71\u540e\u7ee7\u7684\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u5f00k\u4e2aset\u66b4\u529b\u5b9e\u73b0\n\n### \u91cd\u590d\u503c\n\n\u8fd9\u624d\u662f\u8fd9\u9053\u9898\u6700\u6076\u5fc3\u7684\u5730\u65b9\uff0c\u6211\u4eec\u5c06\u8981\u5904\u7406\u4e00\u5927\u5806\u91cd\u590d\u503c\n\n\u6ce8\u610f\u4e00\u4ef6\u4e8b\u60c5\u662f\u7ebf\u6bb5\u6811\u4e0a\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u91cc\u53ef\u80fd\u5b58\u7740\u4e00\u5806pre\u503c\u4e0d\u540c\u7684\u70b9\uff0c\u5f53\u7136\u751a\u81f3\u53ef\u80fdpre\u503c\u90fd\u76f8\u540c\n\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u7b80\u5355\u7684\u8d4b\u503c\u64cd\u4f5c\u6765\u5b8c\u6210\u66ff\u6362\uff0c\u6211\u4eec\u9700\u8981\u5728\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u4e0a\u5355\u5f00\u4e00\u4e2amultiset\u6765\u5904\u7406\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u4fee\u6539\u67d0\u4e00\u4f4d\u7f6e\u7684pre\u503c\u7684\u65f6\u5019\u628amultiset\u62c9\u51fa\u6765\u505a\u63d2\u5165\u5220\u9664\u7136\u540e\u91cd\u65b0\u66f4\u6539\u4e00\u4e0b\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u6700\u5c0f\u503c\n\n\u53e6\u5916\u5c31\u662f\u4f60\u7684\u79bb\u6563\u5316\u4f1a\u975e\u5e38\u6076\u5fc3\u2026\u2026\n\n\u56e0\u4e3a\u4f60\u4e8c\u5206\u7684\u662f\u5b9e\u9645\u8ddd\u79bb\u4f46\u662f\u7ebf\u6bb5\u6811\u4e0a\u7684\u503c\u57df\u5c31\u662f$(0,n)$\n\n\u8fd9\u5bfc\u81f4\u4e86\u4f60\u9700\u8981\u628a\u5b9e\u9645\u8ddd\u79bb\u8f6c\u6210\u7ebf\u6bb5\u6811\u4e0a\u7684\u503c\u57df\n\n\u53e6\u5916\u4f60\u67e5\u51faset\u7684\u524d\u9a71\u540e\u7ee7\u67e5\u51fa\u6765\u7684\u90fd\u662f\u5b9e\u9645\u8ddd\u79bb\u4f46\u662f\u4f60\u8fd8\u8981\u8f6c\u6210\u7ebf\u6bb5\u6811\u7684\u503c\u57df\n\n\u4e00\u79cd\u505a\u6cd5\u5c31\u662f\u6211\\*\\*\u4e0d\u5199\u79bb\u6563\u5316\u4e86\uff0c\u628a\u7ebf\u6bb5\u6811\u6362\u6210splay\n\n\u53e6\u4e00\u79cd\u5c31\u662f\u4e0d\u8981\u62d8\u6ce5\u4e8e\u5e73\u5e38\u7684\u79bb\u6563\u5316\u5199\u6cd5\u76f4\u63a5\u4f7f\u7528\u54c8\u5e0c\u8868\u6765\u66b4\u529b\u5b58\u4e0b\u79bb\u6563\u5316\u6570\u7ec4\n\n\u5bf9\u4e8e\u4e8c\u5206\u51fa\u7684\u8ddd\u79bb\u8f6c\u7ebf\u6bb5\u6811\u7684\u503c\u57df\u53ef\u4ee5\u76f4\u63a5\u66b4\u529blower_bound\u7136\u540e\u67e5\u54c8\u5e0c\u8868\u4e2d\u7684\u503c\n\n\u53e6\u5916\u4e00\u4e2a\u5751\u5c31\u662fmultiset\u7684erase\u4f1aerase\u5168\u90e8\u7684\u503c\uff0c\u53eaerase\u4e00\u4e2a\u503c\u7684\u6b63\u786e\u505a\u6cd5\u662f\u5148find\u51fa\u4e00\u4e2a\u8fed\u4ee3\u5668\u7136\u540eerase\u8fd9\u4e2a\u8fed\u4ee3\u5668\n\n\u7136\u540e\u5c31\u662f\u6109\u5feb\u7684\u8c03\u8bd5\u73af\u8282\u4e86\uff0c\u795d\u5404\u4f4d\u8c03\u8bd5\u6109\u5feb~\n\n\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003,\u5c0f\u538b\u4e86\u4e00\u4e0b\u884c\uff0c121\u884c\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#pragma GCC optimize(2)\n#include<cstdio>\n#include<algorithm>\n#include<set>\nusing namespace std;const int N=3*1e5+10;const int Md=(1<<25)-1;int ans[N];int n;int m;int q;\nstruct hsh_map//\u7528\u6765\u79bb\u6563\u5316\u7684\u54c8\u5e0c\u8868 \n{\n\tint f[N];int x[N];int v[N];int ct;int al[Md];int lsh[N];int hd;int rk[N];\n\tinline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\n\tinline int& operator[](int va)//\u91cd\u8f7d\u5bfb\u5740\u8fd0\u7b97\u7b26 \n\t{for(int i=al[va&Md];i;i=x[i])if(v[i]==va){return f[i];}add(va&Md,va);return f[ct];} \n\tinline int find(int x)//\u4e8c\u5206 \n\t{int* p=lower_bound(lsh+1,lsh+hd+1,x);if(p!=lsh+hd+1)return this->operator [](*p);return n+1;}\n\tinline void ins(int x){lsh[++hd]=x;}\n\tinline void build()//\u66b4\u529b\u79bb\u6563\u5316 \n\t{\n\t\tsort(lsh+1,lsh+hd+1);\n\t\trk[1]=1;for(int i=1;i<=hd;i++)rk[i]=lsh[i]==lsh[i-1]?rk[i-1]:i;\n\t\tfor(int i=1;i<=hd;i++)this->operator [](lsh[i])=rk[i];\n\t}\n}mp;\ninline void ers(multiset <int>& s,const int& val)//multiset\u7684erase \n{multiset <int>::iterator it=s.find(val);if(it!=s.end())s.erase(it);}\nstruct opt//\u626b\u63cf\u7ebf \n{\n\tint ti;int tp;int k;int pos;\n\tfriend bool operator <(opt a,opt b){return (a.ti==b.ti)?(a.tp<b.tp):(a.ti<b.ti);}\n}op[3*N];int hd;\nstruct linetree\n{\n\tmultiset <int> s[4*N];int v[4*N];multiset <int> til;\n\tinline void build(int p,int l,int r)\n\t{\n\t\tint mid=(l+r)/2;v[p]=0x3f3f3f3f;if(r-l==1)return;\n\t\tbuild(p<<1,l,mid);build(p<<1|1,mid,r);\n\t}\n\tinline void ins(int p,int l,int r,const int& pos,const int& val)//\u63d2\u5165 \n\t{\n\t\tif(r-l==1){s[p].insert(val);v[p]=*(s[p].begin());return;}int mid=(l+r)/2;\n\t\tif(pos<=mid)ins(p<<1,l,mid,pos,val);else ins(p<<1|1,mid,r,pos,val);\n\t\tv[p]=min(v[p<<1],v[p<<1|1]);\n\t}\n\tinline void del(int p,int l,int r,const int& pos,const int& val)//\u5220\u9664 \n\t{\n\t\tif(r-l==1){ers(s[p],val);v[p]=s[p].empty()?0x3f3f3f3f:*(s[p].begin());return;}int mid=(l+r)/2;\n\t\tif(pos<=mid)del(p<<1,l,mid,pos,val);else del(p<<1|1,mid,r,pos,val);\n\t\tv[p]=min(v[p<<1],v[p<<1|1]);\n\t}\n\tinline void modify(int p,int l,int r,const int& pos,const int& val1,const int& val2)//\u4fee\u6539 \n\t{\n\t\tif(r-l==1){ers(s[p],val1);s[p].insert(val2);v[p]=*(s[p].begin());return;}int mid=(l+r)/2;\n\t\tif(pos<=mid)modify(p<<1,l,mid,pos,val1,val2);\n\t\telse modify(p<<1|1,mid,r,pos,val1,val2);v[p]=min(v[p<<1],v[p<<1|1]);\n\t}\n\tinline int query(int p,int l,int r,int dl,int dr)//\u533a\u95f4\u6700\u5c0f\u503c \n\t{\n\t\tif(dl==l&&dr==r){return v[p];}int ret=0x3f3f3f3f;int mid=(l+r)/2;\n\t\tif(dl<mid)ret=min(ret,query(p<<1,l,mid,dl,min(dr,mid)));\n\t\tif(mid<dr)ret=min(ret,query(p<<1|1,mid,r,max(dl,mid),dr));\n\t\treturn ret;\n\t}\n\tinline void imd(const int& v){til.insert(v);}//\u5355\u5f00\u7684set\u7684\u64cd\u4f5c \n\tinline void pmd(const int& v){ers(til,v);}\n\tinline int cquery(int r){if(r==n+1)return *(til.begin());//\u5224\u4e00\u4e0b\u662f\u5426\u8d8a\u754c \n\treturn min(*(til.begin()),query(1,0,n,r-1,n));}\n}lt;multiset <int> col[N];int cnt;\ninline void ins(int pos,int k)//\u66f4\u6539pre\u503c\u7684\u63d2\u5165\uff0c\u52064\u79cd\u60c5\u51b5\u8ba8\u8bba\u6709\u65e0\u524d\u9a71\u540e\u7ee7 \n{\n\tmultiset <int>::iterator it,it1,it2;if(col[k].empty())cnt++;it=col[k].insert(pos);\n\tif(it!=--col[k].end()) \n\t{\n\t\tint pre=-0x3f3f3f3f;it2=it;++it2;if(it!=col[k].begin()){it1=it;--it1;pre=*it1;}\n\t\tlt.modify(1,0,n,mp[*it2],pre,*it);lt.ins(1,0,n,mp[*it],pre);\n\t}else \n\t{\n\t\tint pre=-0x3f3f3f3f;if(it!=col[k].begin()){it1=it;--it1;pre=*it1;}\n\t\tlt.ins(1,0,n,mp[*it],pre);lt.pmd(pre);lt.imd(*it);\n\t}\n}\ninline void del(int pos,int k)//\u540c\u7406\u5220\u9664\u7684\u65f6\u5019\uff0c\u52064\u79cd\u60c5\u51b5\u8ba8\u8bba\u6709\u65e0\u524d\u9a71\u540e\u7ee7 \n{\n\tmultiset <int>::iterator it,it1,it2;it=col[k].find(pos);\n\tif(it!=--col[k].end())\n\t{\n\t\tint pre=-0x3f3f3f3f;it2=it;++it2;if(it!=col[k].begin()){it1=it;--it1;pre=*it1;}\n\t\tlt.modify(1,0,n,mp[*it2],*it,pre);lt.del(1,0,n,mp[*it],pre);\n\t}else \n\t{\n\t\tint pre=-0x3f3f3f3f;if(it!=col[k].begin()){it1=it;--it1;pre=*it1;}\n\t\tlt.del(1,0,n,mp[*it],pre);lt.pmd(*it);lt.imd(pre);\n\t}ers(col[k],pos);if(col[k].empty())cnt--;\n}\ninline int query(int pos)//\u4e8c\u5206\u7b54\u6848 \n{\n\tif(cnt!=m)return -1;int l=0;int r=1e8+10;\n\twhile(l!=r)\n\t{\n\t\tint mid=(l+r)/2;int mi=lt.cquery(mp.find(pos+mid+1));\n\t\tif(mi<pos-mid)l=mid+1;else r=mid;\n\t}return l;\n}\nint main()\n{ \n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(int i=1,ti1,ti3,pos,col;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d%d%d\",&pos,&col,&ti1,&ti3);mp.ins(pos);\n\t\top[++hd]=(opt){ti1,1,col,pos};op[++hd]=(opt){ti3,3,col,pos};\n\t}mp.build();\n\tfor(int i=1,ti,pos;i<=q;i++){scanf(\"%d%d\",&pos,&ti);op[++hd]=(opt){ti,2,i,pos};}\n\tsort(op+1,op+hd+1);lt.build(1,0,n);\n\tfor(int i=1;i<=hd;i++)\n\t{\n\t\tswitch(op[i].tp)\n\t\t{\n\t\t\tcase 1:{ins(op[i].pos,op[i].k);break;}\n\t\t\tcase 2:{ans[op[i].k]=query(op[i].pos);break;}\n\t\t\tcase 3:{del(op[i].pos,op[i].k);break;}\n\t\t}\n\t}for(int i=1;i<=q;i++)printf(\"%d\\n\",ans[i]);return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n\n\n\n\n\n\n\n",
        "postTime": 1528764492,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4632 \u3010[APIO2018] New Home \u65b0\u5bb6\u3011"
    },
    {
        "content": "\u9996\u5148\u8003\u8651\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\u6765\u89e3\u51b3\u8be2\u95ee\uff0c\u53ef\u4ee5\u4e8c\u5206\u4e00\u4e2a\u957f\u5ea6$len$\uff0c\u82e5\u5728\u533a\u95f4$[x-len,x+len]$\u5185\u5305\u542b\u4e86\u6240\u6709$k$\u79cd\u7684\u5546\u5e97\uff0c\u90a3\u4e48\u8fd9\u4e2a$len$\u5c31\u662f\u5408\u6cd5\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6765\u6c42\u5176\u6700\u5c0f\u503c\u3002\n\n\u5bf9\u6bcf\u4e2a\u5546\u5e97\u7684\u5b58\u5728\u65f6\u95f4\u8f6c\u5316\u4e3a\u5728$a$\u65f6\u523b\u51fa\u73b0\uff0c\u5728$b+1$\u65f6\u523b\u6d88\u5931\uff0c\u7136\u540e\u548c\u8be2\u95ee\u4e00\u8d77\u79bb\u7ebf\u6309\u65f6\u95f4\u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u65f6\u95f4\u8fd9\u4e00\u7ef4\u7684\u9650\u5236\u4e86\u3002\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u5feb\u901f\u67e5\u8be2\u533a\u95f4\u5185\u662f\u5426\u5305\u542b\u6240\u6709\u7684\u5546\u5e97\uff0c\u548c\u652f\u6301\u7ef4\u62a4\u5546\u5e97\u7684\u51fa\u73b0\u6d88\u5931\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u533a\u95f4\u6570\u989c\u8272\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u4e0e\u5176\u5546\u5e97\u7c7b\u578b\u76f8\u540c\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e$pre$\uff0c\u53d1\u73b0\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u5546\u5e97\uff0c\u90a3\u4e48\u8fd9\u91cc\u7684$pre$\u6539\u4e3a\u8bb0\u5f55\u8fd9\u4e9b\u5546\u5e97\u7684\u5230\u5176\u5404\u81ea\u5546\u5e97\u7c7b\u578b\u76f8\u540c\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u3002\n\n$pre$\u662f\u8bb0\u5f55\u8be5\u4f4d\u7f6e\u5546\u5e97\u7c7b\u578b\u76f8\u540c\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5bf9\u4e8e\u533a\u95f4$[l,r]$\uff0c\u5982\u679c\u4ece$r+1$\u5f80\u540e\u7684\u6240\u6709\u4f4d\u7f6e\u7684$pre$\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e$l$\uff0c\u90a3\u4e48\u8bf4\u660e\u81f3\u5c11\u6709\u4e00\u79cd\u5546\u5e97\u6ca1\u5728\u8be5\u533a\u95f4\u51fa\u73b0\u3002\u4f46\u662f$r+1$\u5f80\u540e\u53ef\u80fd\u5e76\u4e0d\u4f1a\u5305\u542b\u6240\u6709$k$\u79cd\u5546\u5e97\uff0c\u56e0\u6b64\u52a0\u5165\u54e8\u5175\u5546\u5e97\u6765\u907f\u514d\u8ba8\u8bba\uff0c\u5206\u522b\u5728\u6700\u524d\u9762\u548c\u6700\u540e\u9762\u52a0\u5165\u6bcf\u79cd\u5546\u5e97\u5404\u4e00\u4e2a\u3002\n\n\u7136\u540e\u5c31\u662f\u5982\u4f55\u652f\u6301\u7ef4\u62a4$pre$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u5f00\u4e00\u4e2a$multiset$\u7ef4\u62a4\u8be5\u4f4d\u7f6e\u6240\u6709\u5546\u5e97\u7684\u5bf9\u5e94\u5176\u5546\u5e97\u7c7b\u578b\u7684\u524d\u9a71\uff0c$multiset$\u4e2d\u7684\u6700\u5c0f\u503c\u5373\u4e3a\u8be5\u4f4d\u7f6e\u7684$pre$\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\u6765\u7ef4\u62a4\u533a\u95f4$pre$\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u5f00\u4e86\u4e00\u4e2a$multiset$\u6765\u7ef4\u62a4\u4fe1\u606f\u3002\n\n\u5bf9\u4e8e\u5546\u5e97\u7684\u51fa\u73b0\u6d88\u5931\u7ef4\u62a4\uff0c\u5bf9\u6bcf\u79cd\u5546\u5e97\u7c7b\u578b\u5f00\u4e00\u4e2a$multiset$\uff0c\u7ef4\u62a4\u8be5\u7c7b\u578b\u6240\u6709\u5546\u5e97\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u7136\u540e\u51fa\u73b0\u548c\u6d88\u5931\u53ea\u7528\u89e3\u51b3\u5bf9\u4e8e\u8be5\u4f4d\u7f6e\u540c\u7c7b\u578b\u7684\u524d\u9a71\u548c\u540e\u7ee7\u7684\u5f71\u54cd\u5c31\u884c\uff0c\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\u5373\u53ef\u5b9e\u73b0\u3002\n\n\u82e5\u7528\u7ebf\u6bb5\u6811\u67e5\u8be2\u6700\u5c0f\u503c\u6765\u5224\u5b9a\u4e8c\u5206\uff0c\u590d\u6742\u5ea6\u662f$O(n\\ log^2\\ n)$\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u4f4d\u7f6e\uff0c\u590d\u6742\u5ea6\u5c31\u662f$O(n\\ log\\ n)$\u7684\u4e86\u3002\n\n\u7ec6\u8282\u633a\u591a\uff0c\u5177\u4f53\u5b9e\u73b0\u5c31\u770b\u4ee3\u7801\u5427\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 900010\n#define all 200000000\n#define mid ((l+r)>>1)\nusing namespace std;\ntypedef multiset<int>::iterator muli;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,k,q,tot,root,tree_cnt,num;\nint mi[maxn*20],ls[maxn*20],rs[maxn*20],ans[maxn];\nmultiset<int> p[maxn],s[maxn*20];\nstruct node\n{\n    int pos,tim,id,opt;\n}t[maxn];\nbool cmp(const node &a,const node &b)\n{\n    if(a.tim==b.tim) return a.opt<b.opt;\n    return a.tim<b.tim;\n}\nvoid modify(int l,int r,int pos,int v,int type,int &cur)\n{\n    if(!cur) cur=++tree_cnt;\n    if(l==r)\n    {\n        if(type) s[cur].insert(v);\n        else s[cur].erase(s[cur].find(v));\n        if(!s[cur].empty()) mi[cur]=*s[cur].begin();\n        else mi[cur]=all;\n        return;\n    }\n    if(pos<=mid) modify(l,mid,pos,v,type,ls[cur]);\n    else modify(mid+1,r,pos,v,type,rs[cur]);\n    mi[cur]=min(mi[ls[cur]],mi[rs[cur]]);\n}\nint query(int pos)\n{\n    if(num<k) return -1;\n    int l=1,r=all,cur=root,midmi,rmi=all;\n    while(l<r)\n    {\n        midmi=min(rmi,mi[rs[cur]]);\n        if(pos>mid||midmi<2*pos-mid) cur=rs[cur],l=mid+1;\n        else rmi=midmi,cur=ls[cur],r=mid;\n    }\n    return l-pos;\n}\nint main()\n{\n    read(n),read(k),read(q),mi[0]=all;\n    for(int i=1;i<=k;++i)\n    {\n        p[i].insert(-all),p[i].insert(all);\n        modify(1,all,all,-all,1,root);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        int x,id,a,b;\n        read(x),read(id),read(a),read(b);\n        t[++tot]=(node){x,a,id,1};\n        t[++tot]=(node){x,b+1,id,0};\n    }\n    for(int i=1;i<=q;++i)\n    {\n        int pos,tim;\n        read(pos),read(tim);\n        t[++tot]=(node){pos,tim,i,2};\n    }\n    sort(t+1,t+tot+1,cmp);\n    for(int i=1;i<=tot;++i)\n    {\n        int opt=t[i].opt,id=t[i].id,pos=t[i].pos;\n        muli a,b;\n        if(opt==0)\n        {\n            a=b=p[id].lower_bound(pos),a--,b++;\n            modify(1,all,*b,pos,0,root);\n            modify(1,all,*b,*a,1,root);\n            modify(1,all,pos,*a,0,root);\n            if(p[id].size()==3) num--;\n            p[id].erase(p[id].find(pos));\n        }\n        if(opt==1)\n        {\n            a=b=p[id].lower_bound(pos),a--;\n            modify(1,all,*b,pos,1,root);\n            modify(1,all,*b,*a,0,root);\n            modify(1,all,pos,*a,1,root);\n            if(p[id].size()==2) num++;\n            p[id].insert(pos);\n        }\n        if(opt==2) ans[id]=query(pos);\n    }\n    for(int i=1;i<=q;++i) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n",
        "postTime": 1588263157,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4632 \u3010[APIO2018] New Home \u65b0\u5bb6\u3011"
    },
    {
        "content": "**\u9898\u610f\u7b80\u8ff0**\n\n-  \u6570\u8f74\u4e0a\u6709 $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u5176\u4f4d\u7f6e $x_i$ \u548c\u989c\u8272 $t_i$\uff0c\u4e14\u5728\u65f6\u95f4\u6bb5 $[a_i,b_i]$ \u4e2d\u51fa\u73b0\u3002\u603b\u5171\u6709 $K$ \u79cd\u989c\u8272\u3002\n- \u6709 $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u5728 $y_i$ \u65f6\u523b\u6240\u6709\u989c\u8272\u4e2d\u8ddd\u79bb\u4f4d\u7f6e $l_i$ \u6700\u8fdc\u7684\u989c\u8272\u3002\u67d0\u4e2a\u65f6\u523b\u4e0b\u4f4d\u7f6e $l_i$ \u548c\u989c\u8272 $c_j$ \u7684\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u5f53\u65f6\u5b58\u5728\u7684\u6240\u6709\u989c\u8272\u4e3a $ c_j$ \u7684\u70b9\u4e0e $l_i$ \u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u3002\n- $n,q,K\\le3\\times10^5;x_i,t_i,a_i,b_i,l_i,y_i\\le10^8$\u3002\n\n**\u5206\u6790**\n\n\u200b\t\u79bb\u6563\u5316+\u7ebf\u6bb5\u6811\u4e8c\u5206\u3002\n\n\u200b\t\u9996\u5148\uff0c\u8be2\u95ee\u548c\u64cd\u4f5c\u662f\u79bb\u7ebf\u7684\u3002\u5bb9\u6613\u60f3\u5230\u628a\u6240\u6709\u4e8b\u4ef6\uff08\u70b9\u7684\u51fa\u73b0\uff0c\u70b9\u7684\u6d88\u5931\uff0c\u8be2\u95ee\uff09\u6309\u65f6\u95f4\u6392\u5e8f\u540e\u4ece\u5c0f\u5f80\u5927\u5904\u7406\u3002\n\n\u200b\t\u5148\u4e0d\u8003\u8651 $x_i$ \u7684\u8303\u56f4\uff0c\u5c31\u5047\u8bbe\u6240\u6709\u7684\u4f4d\u7f6e\u7ec4\u6210\u4e00\u4e2a\u6392\u5217\u597d\u4e86\u3002\n\n\u200b\t\u201c\u6700\u5c0f\u503c\u201d\u7684\u201c\u6700\u5927\u503c\u201d\uff0c\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u200b\t\u987a\u7740\u8fd9\u4e2a\u601d\u8def\u60f3\u4e0b\u53bb\uff0c\u5bb9\u6613\u60f3\u5230\uff1a\u6bcf\u6b21\u8be2\u95ee\u65f6\u4e8c\u5206\u7b54\u6848\uff0c\u5047\u8bbe\u5f53\u524d\u4e8c\u5206\u7684\u7b54\u6848\u4e3a $X$\uff0c\u5982\u679c\u6240\u6709\u989c\u8272\u90fd\u6709\u81f3\u5c11\u4e00\u4e2a\u70b9\u51fa\u73b0\u5728\u4e86\u533a\u95f4 $[l_i-X,l_i+X]$ \u4e2d\uff0c\u5219\u8bf4\u660e\u6240\u6709\u989c\u8272\u4e0e $l_i$ \u8ddd\u79bb\u90fd\u5c0f\u4e8e\u7b49\u4e8e $X$\uff0c\u8fdb\u800c\u610f\u5473\u7740\u8be5\u7b54\u6848\u53ef\u884c\u3002\n\n\u200b\t\u5982\u4f55\u67e5\u8be2\u6240\u6709\u989c\u8272\u90fd\u51fa\u73b0\u5728\u4e86\u5f53\u524d\u533a\u95f4\u4e2d\uff1f\n\n\u200b\t\u533a\u95f4\u6570\u989c\u8272\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8bb0\u5f55\u548c\u5b83\u540c\u989c\u8272\u7684\u70b9\u4e2d\u5728\u5b83\u524d\u9762\u79bb\u5b83\u6700\u8fd1\u7684\u70b9\uff08\u4e0d\u59a8\u79f0\u4e3a\u5b83\u7684\u524d\u9a71\uff09\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u8be5\u70b9\u662f\u8be5\u989c\u8272\u7684\u7b2c\u4e00\u4e2a\u70b9\uff0c\u628a\u524d\u9a71\u8bbe\u4e3a $-1$ \u3002\u7279\u522b\u5730\uff0c\u6211\u4eec\u5728\u6700\u540e\u9762\u65b0\u52a0\u4e00\u6392 $K$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u987a\u6b21\u5bf9\u5e94\u4e00\u79cd\u989c\u8272\uff0c\u4e14\u628a\u5b83\u7684\u524d\u9a71\u8bbe\u4e3a\u8be5\u989c\u8272\u51fa\u73b0\u7684\u6700\u540e\u4f4d\u7f6e\u3002\uff08\u53c2\u7167\u4e0b\u56fe\u7406\u89e3\uff1a\u6211\u4eec\u7528\u7bad\u5934\u8868\u793a\u524d\u9a71\uff0c\u6700\u540e\u4e09\u4e2a\u683c\u5b50\u662f\u65b0\u52a0\u7684\u4e09\u4e2a\u70b9\uff09\n\n\u200b\t\u6211\u4eec\u628a\u6240\u6709\u70b9\u7684\u524d\u9a71\u4f4d\u7f6e\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\u3002\n\n\u200b\t\u73b0\u8bbe\u5f53\u524d\u6211\u4eec\u60f3\u77e5\u9053\u533a\u95f4 $[l,r]$ \u4e2d\u662f\u5426\u51fa\u73b0\u4e86\u6240\u6709\u989c\u8272\u3002\u6211\u4eec\u67e5\u8be2\u533a\u95f4 $[r+1,n+K]$\u7684\u6700\u5c0f\u503c\uff0c\u5982\u679c\u8be5\u6700\u5c0f\u503c\u5927\u4e8e\u7b49\u4e8e $l$ \uff0c\u5219\u8be5\u533a\u95f4\u51fa\u73b0\u4e86\u6240\u6709\u989c\u8272\u3002\u8fd9\u6837\u505a\u7684\u6b63\u786e\u6027\u662f\u663e\u7136\uff08\uff1f\uff09\u7684\uff1a\u6700\u5c0f\u503c\u5927\u4e8e $l$ \u610f\u5473\u7740\u6240\u6709\u540e\u9762\u7684\u70b9\u7684\u524d\u9a71\u90fd\u5728 $l$ \u4e4b\u540e\uff0c\u800c\u521a\u521a\u65b0\u52a0\u7684\u4e00\u6392\u70b9\u4fdd\u8bc1\u4e86\u6240\u6709\u989c\u8272\u90fd\u5728 $r$ \u540e\u9762\u51fa\u73b0\u4e86\uff0c\u4e8e\u662f\u5728 $[l,r]$ \u4e2d\u95f4\u5fc5\u5b9a\u51fa\u73b0\u4e86\u6240\u6709\u989c\u8272\uff1b\u53cd\u4e4b\uff0c\u82e5\u6700\u5c0f\u503c\u5c0f\u4e8e $l$\uff0c\u5219\u5fc5\u5b9a\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/r88xv75v.png)\n\n\u200b\t\u53d1\u73b0\uff0c\u84dd\u8272\u7684\u524d\u9a71\u201c\u8de8\u8fc7\u4e86\u201d\u8be5\u533a\u95f4\uff0c\u4e8e\u662f\u84dd\u8272\u672a\u51fa\u73b0\u5728\u5176\u4e2d\u3002\n\n\u200b\t\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u200b\t\u56de\u5230\u539f\u95ee\u9898\uff0c\u53d1\u73b0\u5957\u4e0a\u4e8c\u5206\u7b54\u6848\u540e\uff0c\u6211\u4eec\u53ef\u4ee5 $O(log^2n)$ \u4e00\u6b21\u8be2\u95ee\u3002\u8003\u8651\u52a0\u5165/\u5220\u9664\u70b9\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u4f7f\u7528 set \u7ef4\u62a4\uff08\u6bcf\u79cd\u989c\u8272\u5f00\u4e00\u4e2a set\uff0c\u67e5\u8be2\u524d\u9a71\u540e\u7ee7\uff09\u7136\u540e\u7ebf\u6bb5\u6811\u4e24\u6b21\u5355\u70b9\u4fee\u6539\u3002\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e00\u4e2a $O(Q\\log^2n+n \\log n)$ \u7684\u505a\u6cd5\u3002\n\n\u200b\t\u8003\u8651\u4f18\u5316\u3002\u521a\u521a\u662f\u4e8c\u5206\u7b54\u6848+\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u53d8\u6210\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff1a\u6bcf\u6b21\u4e8c\u5206\u7684\u7b54\u6848\u7684\u53f3\u7aef\u70b9\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u7684\u4e2d\u70b9\u3002\u8fd9\u6837\u53ef\u4ee5\u628a\u8be2\u95ee\u964d\u4e00\u4e2a log \uff0c\u4e8e\u662f\u7528 $O(Q\\log n+n \\log n)$ \u7684\u590d\u6742\u5ea6\u901a\u8fc7\u4e86\u672c\u9898......\u5417\uff1f\n\n\u200b\t\u539f\u95ee\u9898 $x_i$ \u7684\u8303\u56f4\u5f88\u5927\u3002\u6211\u4eec\u4f7f\u7528\u79bb\u6563\u5316\uff0c\u6ce8\u610f\u79bb\u6563\u5316\u540e\u4e0d\u8981\u53bb\u91cd\u3002\u4fdd\u5b58\u79bb\u6563\u5316\u540e\u4e24\u76f8\u90bb\u70b9\u7684\u8ddd\u79bb\u3002\u6ce8\u610f**\u4e00\u70b9\u70b9**\u7ec6\u8282\uff1a\u65b0\u52a0\u7684\u4e00\u6392\u70b9\u4f4d\u7f6e\u4e3a $+inf$ \uff0c\u6bcf\u79cd\u989c\u8272\u7684\u7b2c\u4e00\u4e2a\u70b9\u524d\u9a71 $-inf$ \uff0c\u7ebf\u6bb5\u6811\u4e8c\u5206\u7684\u65f6\u5019\u7b97\u771f\u5b9e\u8ddd\u79bb\u800c\u4e0d\u662f\u79bb\u6563\u5316\u540e\u7684\u4f4d\u7f6e\u4e4b\u5dee\uff0c\u628a set \u6362\u6210 multiset \u5e76\u4e14\u6bcf\u6b21\u53ea\u5220\u4e00\u4e2a\u3002\n\n\u200b\t**\u636e\u8bf4\u6211\u7801\u98ce\u5947\u5f02**\uff1a\n\n```\n#include<bits/stdc++.h>\n#include<algorithm>\n#include<set>\n#define mid (l+r)/2\n#define inf 999999999\nusing namespace std;\nint n,K,Q,m,pb;\nint dic[1000001],pdic,stdans[1000001],nu[1000001],ncl;\nint seg[4000001],aans[1000001];\nmultiset<int> se[300001];\nstruct eve{\n\tint x,k,l,r;\n}a[300001];\nstruct que{\n\tint x,t,bh;\n}q0[300001];\nstruct thi{\n\tint ty,nx,t;\n\tconst bool operator <(thi y)const{if(this->t==y.t)return this->ty<y.ty;return this->t<y.t;}\n}b[1000001];\nint qread(){int nans=0;char c=getchar();while(c<'0'||c>'9')c=getchar();while(c>='0'&&c<='9')nans=nans*10+c-'0',c=getchar();return nans;}\nvoid putin(){\n\tn=qread(),K=qread(),Q=qread();\n\tfor(int i=1;i<=n;i++)a[i].x=qread(),a[i].k=qread(),a[i].l=qread(),a[i].r=qread();\n\tfor(int i=1;i<=Q;i++)q0[i].x=qread(),q0[i].t=qread(),q0[i].bh=i;\n}\nvoid caldic(){\n\tfor(int i=1;i<=n;i++)dic[++pdic]=a[i].x,b[++pb]=(thi){1,i,a[i].l},b[++pb]=(thi){1,i,a[i].r+1};\n\tfor(int i=1;i<=Q;i++)dic[++pdic]=q0[i].x,b[++pb]=(thi){2,i,q0[i].t};\n\tsort(dic+1,dic+pdic+1);\n\tm=pdic+K;sort(b+1,b+pb+1);\n\tfor(int i=1;i<=n;i++){\n\t\tint np=lower_bound(dic+1,dic+pdic+1,a[i].x)-dic;\n\t\ta[i].x=np+(nu[np]++);\n\t}\n\tfor(int i=1;i<=Q;i++){\n\t\tint np=lower_bound(dic+1,dic+pdic+1,q0[i].x)-dic;\n\t\tq0[i].x=np+(nu[np]++);\n\t}\n}\nvoid segbuild(int u,int l,int r){\n\tif(l==r){\n\t\tif(l>pdic)seg[u]=-1;\n\t\telse seg[u]=inf;\n\t}else{\n\t\tsegbuild(u<<1,l,mid);\n\t\tsegbuild(u<<1|1,mid+1,r);\n\t\tseg[u]=min(seg[u<<1],seg[u<<1|1]);\n\t}\n}\nvoid segadd(int u,int l,int r,int np,int nx){\n\tif(l==r)seg[u]=nx;\n\telse{\n\t\tif(np<=mid)segadd(u<<1,l,mid,np,nx);\n\t\telse segadd(u<<1|1,mid+1,r,np,nx);\n\t\tseg[u]=min(seg[u<<1],seg[u<<1|1]);\n\t}\n}\nint segreq(int u,int l,int r,int nl,int nr){\n\tif(l>nr||r<nl)return inf;\n\telse if(l>=nl&&r<=nr)return seg[u];\n\telse return min(segreq(u<<1,l,mid,nl,nr),segreq(u<<1|1,mid+1,r,nl,nr));\n}\nint segef(int u,int l,int r,int nx,int nm){\n\tif(l==r)return max(dic[l]-nx,nx-dic[nm]);int ng=min(nm,seg[u<<1|1]);\n\tif(ng!=-1&&(ng==inf||dic[ng]>=max(0,nx-(dic[mid+1]-1-nx))))return segef(u<<1,l,mid,nx,ng);\n\telse return segef(u<<1|1,mid+1,r,nx,nm);\n}\nsigned main(){\n\tputin();\n\tcaldic();\n\tsegbuild(1,1,m);\n\tfor(int i=1;i<=K;i++)se[i].insert(pdic+i),dic[pdic+i]=inf;\n\tfor(int i=1;i<=pb;i++){\n\t\tif(b[i].ty==1){\n\t\t\tint ni=b[i].nx;\n\t\t\tif(b[i].t>a[ni].r)se[a[ni].k].erase(se[a[ni].k].find(a[ni].x));\n\t\t\tmultiset<int>::iterator ii=se[a[ni].k].lower_bound(a[ni].x);\n\t\t\tint np,nq;\n\t\t\tnp=*ii;\n\t\t\tif(ii!=se[a[ni].k].begin())nq=*(--ii);else nq=-1;\n\t\t\tif(b[i].t>a[ni].r)segadd(1,1,m,np,nq),segadd(1,1,m,a[ni].x,inf);\n\t\t\telse segadd(1,1,m,np,a[ni].x),segadd(1,1,m,a[ni].x,nq),se[a[ni].k].insert(a[ni].x);\n\t\t}else{\n\t\t\tif(segreq(1,1,m,pdic+1,m)==-1)aans[q0[b[i].nx].bh]=-1;\n\t\t\telse{\n\t\t\t\taans[q0[b[i].nx].bh]=segef(1,1,m,dic[q0[b[i].nx].x],inf);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=Q;i++)printf(\"%d\\n\",aans[i]);\n\treturn 0;\n}\n```\n\n\u200b\t",
        "postTime": 1604147931,
        "uid": 259028,
        "name": "Aly_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4632 \u3010[APIO2018] New Home \u65b0\u5bb6\u3011"
    },
    {
        "content": "\u6211\u7684\u505a\u6cd5\u662f\u6309\u65f6\u95f4\u79bb\u7ebf\u540e\uff0c\u7528\u4e00\u9897\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u79cd\u73b0\u5728\u5b58\u5728\u7684\u540c\u79cd\u7c7b\u578b\u7684\u5546\u5e97\u7684\u524d\u9a71\uff0c\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee\u5728\u4f4d\u7f6e$x$\uff0c\u7136\u540e\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u51fa\u67d0\u4e2a\u4f4d\u7f6e$\\text [i,+\\infty)$\u3002\u4f7f\u5f97\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u524d\u9a71\u7684\u6700\u5c0f\u503c$mn<2x-i$\n\n\n\u601d\u8def\u5c31\u662f\u540ckcz\u5927\u4f6c\uff1ahttps://loj.ac/article/523\u3002\n\n\u5728\u8fd9\u91cc\u6211\u5c31\u4e0d\u9610\u8ff0\u7b97\u6cd5\u601d\u8def\uff0c\u800c\u662f\u91cd\u70b9\u9610\u8ff0\u6211\u7684\u5b9e\u73b0\u4e0e\u6211\u5199\u4ee3\u7801\u65f6\u7684\u7ec6\u8282\u95ee\u9898\u3002\n\n\u5148\u628a\u6bcf\u4e00\u4e2a\u5546\u5e97\u770b\u6210\u5728$a$\u65f6\u95f4\u70b9\u6dfb\u52a0\u8fdb\u6765\uff0c\u5728$b+1$\u65f6\u95f4\u70b9\u5220\u9664\u3002\u7136\u540e\u53ea\u5bf9\u5546\u5e97\u7684\u4f4d\u7f6e\u79bb\u6563\u5316\uff0c\u7528\u4e00\u4e2a$pos[i]$\u6570\u7ec4\u8868\u793a\u79bb\u6563\u5316\u540e\u7684$i$\u539f\u5148\u5bf9\u5e94\u5728\u6570\u8f74\u4e0a\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u4e4b\u540e\u7ebf\u6bb5\u6811\u3001multiset\u7684\u5143\u7d20\u90fd\u662f\u4ee5\u79bb\u6563\u5316\u540e\u7684\u8fd9\u4e2a\u503c\u6765\u8fd0\u7b97\u7684\u3002\n\n\u7136\u540e\u5c06\u79bb\u6563\u5316\u540e\u7684\u5546\u5e97\u4e0e\u8be2\u95ee\u4e00\u8d77\u6309\u7167\u65f6\u95f4\u6392\u5e8f\uff0c\u8fd9\u91cc\u6211\u7528\u7ed3\u6784\u4f53$store$\u5b58\u50a8\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5176\u4e2d\u5982\u679c\u662f\u5546\u5e97\uff0c\u90a3\u4e48$idx$\u662f$-1$\u548c$-2$,\u5206\u522b\u4ee3\u8868\u63d2\u5165\u4e0e\u5220\u9664\uff0c\u5982\u679c\u662f\u8be2\u95ee\u5219$idx>0$\uff0c\u4ee3\u8868\u5bf9\u5e94\u7740\u539f\u6765\u662f\u7b2c\u51e0\u4e2a\u8be2\u95ee,\u5e76\u4e14\u8be2\u95ee\u7684$x$\u6ca1\u6709\u79bb\u6563\u5316\uff0c\u662f\u539f\u6765\u7684\u503c\u3002\n\n\u7528$N$\u4e2a$multiset$\u7ef4\u62a4\u6bcf\u79cd\u5143\u7d20\u7684\u524d\u9a71\u3002\u4e3a\u4e86\u9632\u6b62\u5728\u67d0\u6b21\u67e5\u8be2$[i,+\\infty)$\u4e2d\u6ca1\u6709\u51fa\u73b0\u67d0\u4e00\u79cd\u989c\u8272\u7684\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5728$multiset$\u91cc\u9884\u5148\u63d2\u5165\u4e00\u4e2a$+\\infty$\u3002\u5176\u5b9e\u66f4\u597d\u5730\u529e\u6cd5\u662f\u63d2\u5165$+\\infty$\uff0c$-\\infty$\u4e24\u4e2a\u5143\u7d20\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u7279\u5224\u6ca1\u6709\u524d\u9a71/\u540e\u7ee7\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u8fd9\u79cd\u5199\u6cd5\u5bf9\u540e\u9762\u4e8c\u5206\u65f6\u7684\u7ec6\u8282\u4e5f\u6709\u628a\u63a7\u4f5c\u7528\uff0c\u7a0d\u540e\u518d\u8bf4\u3002\u56e0\u4e3a\u6211\u53ea\u63d2\u4e86$+\\infty$\uff0c\u5e76\u4e14\u5982\u679c\u524d\u9762\u6ca1\u6709\u5143\u7d20\uff0c\u6211\u8fd8\u8981\u6c42\u8fd9\u65f6\u7684\u524d\u9a71\u5e94\u8be5\u662f0\u3002\u6240\u4ee5\u6211\u7279\u5224\u4e86\u524d\u9762\u6ca1\u6709\u5143\u7d20\u7684\u60c5\u51b5\u3002\n\n\u7528\u4e00\u4e2a$all$\u53d8\u91cf\u7ef4\u62a4\u5f53\u524d\u51fa\u73b0\u4e86\u591a\u5c11\u79cd\u5546\u5e97\uff0c\u914d\u5408$multiset$\u7684$size$\u6765\u4fee\u6539\u8fd9\u4e2a\u53d8\u91cf\u3002\u5229\u7528all\u5148\u628a\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u5224\u51fa\u6765\u3002\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u79bb\u6563\u5316\u540e\u7684\u81f3\u591a$2n+1$\u4e2a\u4f4d\u7f6e\uff08\u591a\u4e00\u4e2a$+\\infty$\uff09\u7684\u524d\u9a71\u7684\u4fe1\u606f\u3002\u53f6\u5b50\u4e0a\u662f\u4e00\u4e2a\u53ef\u5220\u5806\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u73b0\u4e0d\u540c\u7c7b\u578b\u7684\u5546\u5e97\u3002\u7ebf\u6bb5\u6811\u533a\u95f4\u8282\u70b9\u4e0a\u7ef4\u62a4\u524d\u9a71\u7684min\u3002\n\n\u7136\u540e\u662f\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u4e8c\u5206\u627e\u51fa\u5750\u6807$>x$\u7684\u7b2c\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u7684\u4f4d\u7f6ep\uff08\u5373\u79bb\u6563\u5316\u540e\u7684\u70b9\uff09\uff0c\u4f7f\u5f97\u67e5\u8be2\u4f4d\u7f6e$x$\u6ee1\u8db3\u533a\u95f4$[x-p,x+p]$\u51fa\u73b0\u4e86\u6240\u6709\u7684\u989c\u8272\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u662f\u9996\u5148\u4fdd\u8bc1\u4f4d\u7f6e\u5927\u4e8e$x$\uff0c\u6240\u4ee5\u5982\u679c$x$\u5927\u4e8e$mid$\u4ee3\u8868\u7684\u4f4d\u7f6e(\u5373$pos[mid]$)\uff0c\u90a3\u4e48\u5c31\u5f80\u53f3\u8d70\u3002\u7b2c\u4e8c\u6b65\u5c31\u5224\u65ad\u5f53\u524d$mid$\u80fd\u4e0d\u80fd\u4f7f$x$\u5408\u6cd5\uff0c\u5982\u679c$mid$\u5408\u6cd5\uff0c\u90a3\u4e48\u5927\u4e8e$mid$\u7684\u70b9\u4e5f\u4e00\u5b9a\u5408\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5224\u65ad$[2x-pos[mid],pos[mid]]$\u8fd9\u4e2a\u533a\u95f4\u662f\u5426\u51fa\u73b0\u8fc7\u6240\u6709\u5143\u7d20\u3002\u67e5\u8fd9\u4e2a\u6211\u5c31\u8981\u67e5$mid+1$\u5230$+\\infty$\u7684\u6240\u6709\u70b9\u7684\u524d\u9a71\u7684$min$\u662f\u5426\u5c0f\u4e8e$2x-pos[mid]$\uff0c\u5c0f\u4e8e\u5219\u4e0d\u5408\u6cd5\u3002\u7528\u4e00\u4e2a$now$\u53d8\u91cf\u7ef4\u62a4\u6bcf\u6b21\u5411\u5de6\u8d70\uff0c\u53f3\u513f\u5b50\u533a\u95f4\u7684\u524d\u9a71\u7684$min$\u3002\n\n\u5728\u6211\u7684\u5199\u6cd5\u4e2d\u8fd9\u6837\u4e8c\u5206\u8981\u5224\u65ad\u4e00\u4e2a\u60c5\u51b5\uff0c\u662f\u5982\u679c\u51fa\u73b0\u4e00\u4e2a\u70b9\u7684\u524d\u9a71\u662f$0$\uff08\u5373\u8fd9\u4e2a\u5143\u7d20\u524d\u9762\u518d\u4e5f\u6ca1\u51fa\u73b0\u8fc7\u8fd9\u79cd\u5143\u7d20\uff09\uff0c\u6211\u4f1a\u8bbf\u95ee$pos[0]$\u3002\u4f46\u6211\u4eec\u5e0c\u671b\u5982\u679c\u51fa\u73b0\u6211\u67e5\u5230\u7684\u524d\u9a71\u7684$min$\u662f$0$\uff0c\u90a3\u4e48\u8fd9\u4e2a$mid$\u5c31\u4e0d\u5408\u6cd5\uff0c\u6240\u4ee5\u6211\u8bbe\u7f6e$pos[0]=-\\infty$\uff0c\u8fd9\u4e5f\u662f\u6211\u524d\u9762\u8bf4\u4e3a\u4ec0\u4e48\u5728$multiset$\u4e2d\u6dfb\u52a0\u4e00\u4e2a$-\\infty$\u4f1a\u597d\u4e00\u4e9b\u3002\n\n\u518d\u8bf4\u4e00\u4e0b\u627e\u5230\u4e86\u7ebf\u6bb5\u6811\u4e0a\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u7a76\u7adf\u7b54\u6848\u662f\u4ec0\u4e48\uff1f\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u70b9\u7684\u6700\u4f18\u89e3\u4e2d\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u7aef\u70b9\u4e0a\u4f1a\u662f\u4e00\u4e2a\u5546\u5e97\uff0c\u4f46\u662f\u6211\u4eec\u7684\u4e8c\u5206\u53ea\u4fdd\u8bc1\u4e86\u53f3\u7aef\u70b9\u662f\u5546\u5e97\uff0c\u6240\u4ee5\u53ef\u80fd\u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u6240\u4ee5\u7b54\u6848\u8fd8\u53ef\u80fd\u662f$x-$\u524d\u9a71\u3002\u6240\u4ee5\u6211\u4eec\u5bf9\u8fd9\u4e24\u79cd\u60c5\u51b5\u53d6min\u5c31\u884c\u3002\u7136\u540e\u53c8\u56e0\u4e3a\u53ef\u80fd\u4e8c\u5206\u5230\u7ebf\u6bb5\u6811\u4e0a\u7684\u4f4d\u7f6e\u662f$+\\infty$\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u8bbe\u7f6e$pos[+\\infty]=+\\infty$\uff0c\u4ee5\u514d\u5bf9\u53d6min\u4ea7\u751f\u5f71\u54cd\u3002\n\n\u8be5\u8bf4\u7684\u90fd\u8bf4\u4e86\u2026\u2026\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<set>\n#include<queue>\n#include<vector>\n#include<cstring>\nusing namespace std;\n#define N 300100\n#define INF 0x3f3f3f3f\n#define ls i<<1\n#define rs i<<1|1\nstruct store{\n\tint x,y,t,idx;\n\tbool operator < (const store &B) const {return t==B.t?idx<B.idx:t<B.t;}\n}sr[N<<2];\nbool cmp(const store &A,const store &B) {return A.x<B.x;}\nint ans[N],pos[N<<2],minm[N<<3],n,tot;\nstruct Heap{\n\tpriority_queue<int,vector<int>,greater<int> > I,D;int sz;\n\tvoid pop(int x) {D.push(x);--sz;}\n\tvoid push(int x) {I.push(x);++sz;}\n\tvoid update() {while(D.size()&&I.top()==D.top()) D.pop(),I.pop();}\n\tint top() {update();return sz?I.top():INF;}\n}H[N<<2];\nmultiset<int> S[N];\nmultiset<int>::iterator it;\nvoid insert(int i,int l,int r,int p,int pre,int d)\n{\n\tif (l==r)\n\t{\n\t\tif (d==1) H[l].push(pre);else H[l].pop(pre);\n\t\tminm[i]=H[l].top();\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif (p<=mid) insert(ls,l,mid,p,pre,d);\n\telse insert(rs,mid+1,r,p,pre,d);\n\tminm[i]=min(minm[ls],minm[rs]);\n}\nint query(int x)\n{\n\tint l=1,r=tot,i=1,mid,now=INF;\n\twhile(l<r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif (x>pos[mid]) {i=rs;l=mid+1;continue;}\n\t\tif (2*x<=pos[mid]+pos[min(now,minm[rs])])//\u524d\u9a71\u4e0d\u80fd\u4e3a0\uff0c\u8bbe\u7f6epos[0]=-INF\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 \n\t\t{\n\t\t\tnow=min(now,minm[rs]);\n\t\t\ti=ls;r=mid;\n\t\t}else i=rs,l=mid+1;\n\t}\n\treturn min(pos[l]-x,x-pos[min(now,minm[i])]);\n}\ninline int read(){\n\tint n=0;char a;bool z=false;\n\twhile(a=getchar())\n\t{\n\t\tif (a>'9'||a<'0')\n\t\t\tif (z) break;\n\t\t\telse continue;\n\t\tif (!z) z=true;\n\t\tn=(n<<1)+(n<<3)+(a^48);\n\t}\n\treturn n;\n}\nint main()\n{\n\tmemset(minm,0x3f,sizeof(minm));\n\tn=read();int k=read(),Q=read(),x,y,all=0,t=0;bool Z;\n\tfor (int i=1;i<=n;++i)\n\t{\n\t\tx=read();y=read();\n\t\tsr[i]=(store){x,y,read(),-1};\n\t\tsr[i+n]=(store){x,y,read()+1,-2};\n\t}\n\tfor (int i=1;i<=Q;++i) sr[n+n+i]=(store){read(),0,read(),i};\n\tsort(sr+1,sr+1+n+n,cmp);\n\tfor (int i=1;i<=n<<1;++i)\n\t{\n\t\tif (i==1||sr[i].x^pos[sr[i-1].x]) pos[++tot]=sr[i].x;\n\t\tsr[i].x=tot;\n\t}++tot;\n\tsort(sr+1,sr+1+n+n+Q);pos[0]=-INF;pos[tot]=2*INF;\n\tfor (int i=1;i<=k;++i) S[i].insert(tot),insert(1,1,tot,tot,0,1);\n\tfor (int i=1;i<=n+n+Q;++i)\n\t{\n\t\tstore u=sr[i];\n\t\tswitch(u.idx)\n\t\t{\n\t\t\tcase -1:\n\t\t\t\tif (S[u.y].find(u.x)==S[u.y].end())\n\t\t\t\t{\n\t\t\t\t\tall+=S[u.y].size()==1;\n\t\t\t\t\tit=S[u.y].insert(u.x);y=0;\n\t\t\t\t\tif (it!=S[u.y].begin())\n\t\t\t\t\t{\n\t\t\t\t\t\t--it;\n\t\t\t\t\t\tinsert(1,1,tot,u.x,y=*it,1);\n\t\t\t\t\t\t++it;\n\t\t\t\t\t}else insert(1,1,tot,u.x,0,1);\n\t\t\t\t\t++it;\n\t\t\t\t\tinsert(1,1,tot,*it,y,-1);\n\t\t\t\t\tinsert(1,1,tot,*it,u.x,1);\n\t\t\t\t}else S[u.y].insert(u.x);break;\n\t\t\tcase -2:\n\t\t\t\tit=S[u.y].find(u.x);\n\t\t\t\tZ=it==S[u.y].begin();\n\t\t\t\tS[u.y].erase(it--);\n\t\t\t\tif (S[u.y].find(u.x)==S[u.y].end())\n\t\t\t\t{\n\t\t\t\t\ty=0;\n\t\t\t\t\tinsert(1,1,tot,u.x,y=(Z?0:*it++),-1);\n\t\t\t\t\tif (Z) it=S[u.y].begin();\n\t\t\t\t\tinsert(1,1,tot,*it,u.x,-1);\n\t\t\t\t\tinsert(1,1,tot,*it,y,1);\n\t\t\t\t\tall-=S[u.y].size()==1;\n\t\t\t\t}break;\n\t\t\tdefault:\n\t\t\t\tif (all^k) {ans[u.idx]=-1;break;}\n\t\t\t\tans[u.idx]=query(u.x);break;\n\t\t}\n\t}\n\tfor (int i=1;i<=Q;++i) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\n//by qlwpc\n```",
        "postTime": 1547084785,
        "uid": 45876,
        "name": "\u51c4\u9b49",
        "ccfLevel": 9,
        "title": "APIO2018\u65b0\u5bb6"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\u7684\u5176\u5b9e\u662f\u6700\u5c0f\u7684 $r$ \u6ee1\u8db3 $[l-r+1,l+r-1]$ \u62e5\u6709\u6240\u6709\u7c7b\u578b\u7684\u5546\u5e97\u3002\u4f46\u662f\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u4e0d\u7528\u4e8c\u5206\u3002\n\n\u5173\u4e8e\u533a\u95f4\u989c\u8272\u6709\u5173\u7684\u67e5\u8be2\uff0c\u4e00\u79cd\u7ecf\u5178\u7684\u5957\u8def\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u5f00\u4e2a set \u7136\u540e\u4e8c\u7ef4\u6570\u70b9\uff0c\u56e0\u4e3a\u4e00\u4e2a\u533a\u95f4 $[L,R]$ \u53ef\u4ee5\u770b\u4f5c\u662f\u5e73\u9762\u4e0a\u7684\u70b9 $(L,R)$\u3002\n\n$[L,R]$ \u4e0d\u5305\u542b\u67d0\u4e2a\u989c\u8272\u7b49\u4ef7\u4e8e $[L,R]$ \u88ab\u5939\u5728\u4e86\u8fd9\u4e2a\u989c\u8272\u7684\u67d0\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5982\u679c\u8fd9\u4e2a\u989c\u8272\u7684\u4f4d\u7f6e\u5e8f\u5217\u4e3a $\\{x_i\\}$ \u6ee1\u8db3 $x_i<x_{i+1}$\uff0c\u90a3\u4e48\u5982\u679c\u5b58\u5728 $i$ \u4f7f\u5f97 $x_i<L\\leq R<x_{i+1}$\uff0c$[L,R]$ \u6ca1\u6709\u8fd9\u4e2a\u989c\u8272\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u6240\u6709\u8fd9\u6837\u7684\u70b9 $(x_i,x_{i+1})$ \u653e\u5230\u5e73\u9762\u4e0a\uff0c\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4 $[L,R]$ \u5408\u4e0d\u5408\u6cd5\u5c31\u76f8\u5f53\u4e8e\u5224\u65ad\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d $(L,R)$ \u5de6\u4e0a\u65b9\u6709\u6ca1\u6709\u70b9\u3002\n\n\u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u67e5\u8be2 $l$\uff0c\u5982\u679c\u91c7\u7528\u4e8c\u5206\uff0c$L,R$ \u5176\u5b9e\u4e0d\u662f\u6ca1\u6709\u89c4\u5f8b\u7684\uff0c\u800c\u662f\u6ee1\u8db3 $\\frac{L+R}{2}=l$\uff0c\u4e5f\u5c31\u662f\u8bf4 $(L,R)$ \u6c38\u8fdc\u5728\u76f4\u7ebf $y=-x+2l$ \u4e0a\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981 $r$ \u6700\u5c0f\uff0c\u5c31\u5f97\u627e\u51fa $y=-x+2l$ \u4e0a\u6700\u53f3\u7684\u3001\u5de6\u4e0a\u65b9\u6ca1\u6709 $(x_i,x_{i+1})$ \u7684\u70b9\u3002\u7b54\u6848\u53d6\u5230\u7684\u70b9\u8981\u4e48\u88ab\u76f4\u7ebf\u4e0b\u7684 $y$ \u5750\u6807\u6700\u5927\u7684\u70b9\u5361\u4f4f\uff0c\u8981\u4e48\u88ab\u76f4\u7ebf\u4e0a $x$ \u5750\u6807\u6700\u5c0f\u7684\u70b9\u5361\u4f4f\u3002\u5224\u65ad\u662f\u5426\u5728\u76f4\u7ebf\u4e0a\u3001\u4e0b\u9700\u8981\u5224\u65ad $x+y$ \u4e0e $2l$ \u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u70b9 $(x,y)$ \u63d2\u5165\u7ebf\u6bb5\u6811\u4e2d\u7684\u4f4d\u7f6e $x+y$\uff0c\u7136\u540e\u7ef4\u62a4\u4e2a $y$ \u7684\u524d\u7f00\u6700\u5927\u503c\u548c $x$ \u7684\u540e\u7f00\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $O((n+q)\\log (n+q)+k)$\uff0c\u4ee3\u7801\u5077\u61d2\u76f4\u63a5\u52a8\u6001\u5f00\u70b9\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define Lson(x) node[x].Son[0]\n#define Rson(x) node[x].Son[1] \nusing namespace std;\n\ntypedef pair<int,int> pr;\ntypedef multiset<int>::iterator mit;\ntypedef multiset<pr>::iterator qit;\n\nconst int MAXN=3e5,MAXV=1e8,LOGV=30;\n\ninline int Read()\n{\n\tint res;char c;\n\twhile(1) {c=getchar();if('0'<=c && c<='9') {res=c-'0';break;}}\n\twhile(1) {c=getchar();if('0'<=c && c<='9') res=res*10+c-'0';else break;}\n\treturn res;\n}\n\ninline int ABS(int x) {return x>0 ? x : -x;}\n\nstruct msg\n{\n\tint l,y,t;//\u4f4d\u7f6e\uff0c\u65f6\u95f4\uff0ct>0 \u63d2\u5165\u5546\u5e97\uff0ct<0 \u5220\u9664\u5546\u5e97\n\tint ID;\n\tinline void Print()\n\t{\n\t\tif(t>0) printf(\"Insert %d %d\\n\",l,t);\n\t\telse if(t<0) printf(\"Delete %d %d\\n\",l,-t);\n\t\telse printf(\"Ask %d\\n\",l); \n\t} \n}qry[3*MAXN+5];int tot;\nbool cmp(msg a,msg b) {return (a.y==b.y ? a.t>b.t : a.y<b.y);}\n\nint n,K,q;\nmultiset<int> mapn[MAXN+5];int cnt;//\u4e0d\u7a7a\u7684\u4e2a\u6570 \nint ans[MAXN+5];\n\nstruct SegTree//<=2l max y >=2l min x\n{\n\tstruct SegNode {int Son[2],maxn,minn;}node[MAXN*LOGV+5];int Tail;\n\tinline void Build()\n\t{\n\t\tTail=1;\n\t\tnode[Tail].minn=node[0].minn=MAXV+2;\n\t}\n\tinline void New(int now,bool t)\n\t{\n\t\tif(node[now].Son[t]) return;\n\t\tnode[now].Son[t]=++Tail;\n\t\tnode[Tail].minn=MAXV+2;\n\t}\n\tvoid Changey(int now,int L,int R,int x,int v)\n\t{\n\t\tif(L==R) {node[now].maxn=v;return;}\n\t\tint mid=L+((R-L)>>1);\n\t\tif(x<=mid) New(now,0),Changey(Lson(now),L,mid,x,v);\n\t\telse New(now,1),Changey(Rson(now),mid+1,R,x,v);\n\t\tnode[now].maxn=max(node[Lson(now)].maxn,node[Rson(now)].maxn);\n\t}\n\tvoid Changex(int now,int L,int R,int x,int v)\n\t{\n\t\tif(L==R) {node[now].minn=v;return;}\n\t\tint mid=L+((R-L)>>1);\n\t\tif(x<=mid) New(now,0),Changex(Lson(now),L,mid,x,v);\n\t\telse New(now,1),Changex(Rson(now),mid+1,R,x,v);\n\t\tnode[now].minn=min(node[Lson(now)].minn,node[Rson(now)].minn);\n\t}\n\tint AskMax(int now,int L,int R,int x)\n\t{\n\t\tif(x<L || !now) return 0;\n\t\tif(R<=x) return node[now].maxn;\n\t\tint mid=L+((R-L)>>1);\n\t\treturn max(AskMax(Lson(now),L,mid,x),AskMax(Rson(now),mid+1,R,x));\n\t}\n\tint AskMin(int now,int L,int R,int x)\n\t{\n\t\tif(R<x || !now) return MAXV+2;\n\t\tif(x<=L) return node[now].minn;\n\t\tint mid=L+((R-L)>>1);\n\t\treturn min(AskMin(Lson(now),L,mid,x),AskMin(Rson(now),mid+1,R,x));\n\t}\n\tinline void Modifyy(int x,int v) {Changey(1,-MAXV,3*MAXV,x,v);}\n\tinline void Modifyx(int x,int v) {Changex(1,-MAXV,3*MAXV,x,v);}\n\tinline int GetMax(int x) {return AskMax(1,-MAXV,3*MAXV,x);}\n\tinline int GetMin(int x) {return AskMin(1,-MAXV,3*MAXV,x);}\n}po;\n\nmultiset<pr> Qx,Qy;\ninline void Insert(int x,int y)//\u5e73\u9762\u4e0a\u63d2\u5165\u4e00\u4e2a\u70b9\n{\n\tQy.insert(make_pair(x+y,y));\n\tQx.insert(make_pair(x+y,x));\n\tqit now=--Qy.lower_bound(make_pair(x+y+1,0));\n\tpo.Modifyy(x+y,(*now).second);\n\tnow=Qx.lower_bound(make_pair(x+y,0));\n\tpo.Modifyx(x+y,(*now).second);\n}\ninline void Delete(int x,int y)//\u5e73\u9762\u4e0a\u5220\u9664\u4e00\u4e2a\u70b9\n{\n\tQy.erase(Qy.lower_bound(make_pair(x+y,y)));\n\tQx.erase(Qx.lower_bound(make_pair(x+y,x)));\n\tqit now=Qy.lower_bound(make_pair(x+y+1,0));\n\tif(now==Qy.begin()) po.Modifyy(x+y,0);\n\telse\n\t{\n\t\t--now;\n\t\tif((*now).first!=x+y) po.Modifyy(x+y,0);\n\t\telse po.Modifyy(x+y,(*now).second);\n\t}\n\tnow=Qx.lower_bound(make_pair(x+y,0));\n\tif(now==Qx.end()) po.Modifyx(x+y,MAXV+2);\n\telse if((*now).first!=x+y) po.Modifyx(x+y,MAXV+2);\n\telse po.Modifyx(x+y,(*now).second);\n}\n\nint main()\n{\n\tn=Read(),K=Read(),q=Read();\n\tfor(int i=1,x,t,a,b;i<=n;i++)\n\t{\n\t\tx=Read(),t=Read(),a=Read(),b=Read();\n\t\tqry[++tot]=msg{x,a,t,0};\n\t\tqry[++tot]=msg{x,b,-t,0};\n\t}\n\tfor(int i=1,l,y;i<=q;i++)\n\t{\n\t\tl=Read(),y=Read();\n\t\tqry[++tot]=msg{l,y,0,i};\n\t}\n\tsort(qry+1,qry+tot+1,cmp);\n\tpo.Build();\n\tfor(int i=1;i<=K;i++)\n\t{\n\t\tmapn[i].insert(-MAXV),mapn[i].insert(2*MAXV);\n\t\tInsert(-MAXV,2*MAXV);\n\t}\n\tfor(int i=1,t,l;i<=tot;i++)\n\t{\n\t\tt=qry[i].t,l=qry[i].l;\n\t\tif(t>0)\n\t\t{\n\t\t\tif(mapn[t].size()==2) ++cnt;\n\t\t\tmit now=mapn[t].lower_bound(l);\n\t\t\tif((*now)!=l)\n\t\t\t{\n\t\t\t\tint R=(*now),L=(*--now);\n\t\t\t\tDelete(L,R);\n\t\t\t\tInsert(L,l),Insert(l,R);\n\t\t\t}\n\t\t\tmapn[t].insert(l);\n\t\t}\n\t\telse if(t<0)\n\t\t{\n\t\t\tt*=-1;\n\t\t\tmapn[t].erase(mapn[t].lower_bound(l));\n\t\t\tmit now=mapn[t].lower_bound(l);\n\t\t\tif((*now)!=l)\n\t\t\t{\n\t\t\t\tint R=(*now),L=(*--now);\n\t\t\t\tDelete(L,l),Delete(l,R);\n\t\t\t\tInsert(L,R);\n\t\t\t}\n\t\t\tif(mapn[t].size()==2) --cnt;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(cnt<K) {ans[qry[i].ID]=-1;continue;}\n\t\t\tint L=po.GetMin(2*l),R=po.GetMax(2*l);\n\t\t\tans[qry[i].ID]=max(max(l-L,R-l),0);\n\t\t}\n\t}\n\tfor(int i=1;i<=q;i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1668752485,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "[APIO2018] \u65b0\u5bb6 \u7684\u9898\u89e3"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.org/problemnew/show/P4632)\n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u6216\u8005\u7ebf\u6bb5\u6811+\u5806\n\n\u5148\u8bf4\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u505a\u6cd5\u3002\n\n\u57fa\u672c\u5957\u8def\u4e86\u5427\u3002\u6bcf\u4e2a\u7ed3\u70b9\u5f00\u4e24\u4e2avector\uff0c\u4fee\u6539\u548c\u8be2\u95ee\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u5c31\u884c\u4e86\u3002\u4e0d\u505a\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u662f\u5e26\u4e24\u4e2alog\u7684\uff0c\u4e8b\u5b9e\u4e0a\u4e5f\u53ef\u4ee5\u8fc7\u8fd9\u9053\u9898\uff0c\u4f46\u8dd1\u7684\u6bd4\u8f83\u6162\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u5916\u9762\u5148\u6392\u5e8f\uff0c\u8fd9\u6837\u5b50\u6254\u8fdb\u7ebf\u6bb5\u6811vector\u7684\u987a\u5e8f\u5c31\u662f\u6ee1\u8db3\u5355\u8c03\u6027\u7684\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u626b\u63cf\u4e00\u904d\uff0c\u8fd9\u6837\u53ef\u4ee5\u5c11\u6389\u4e00\u4e2alog\u3002\n\n\u4f46\uff0c\u8fd9\u6837\u5199\u5e38\u6570\u5927\uff0c\u800c\u4e14\u4e0d\u597d\u73a9\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u7ebf\u6bb5\u6811+\u5806\u7684\u5199\u6cd5\u3002\n\n\u8fd9\u91cc\u76f4\u63a5\u8d34kcz\u5946\u4f6c\u7684\u505a\u6cd5\u4e86\uff1a[\u505a\u6cd5](https://loj.ac/article/523)\n\n\u8fd9\u6837\u4e5f\u662f\u4e00\u4e2alog\u7684\uff0c\u800c\u4e14\u597d\u5199\u3002\uff08\u4e8b\u5b9e\u4e0a\u6211\u5c31\u662f\u8fd9\u6837\u5199\u7684\uff09\n\n\u5176\u5b9e\u8fd8\u6709\u4e00\u79cd\u5728\u7ebf\u4e14\u4e00\u4e2alog\u7684\u505a\u6cd5\u3002\uff08\u951f\u7237\u8bb2\u7684\u505a\u6cd5\uff09\n\n\u9996\u5148\u8981\u628a\u539f\u95ee\u9898\u8f6c\u6362\u3002\u5982\u679c\u6211\u4eec\u628a\u6240\u6709\u70b9\u5230\u6bcf\u4e00\u79cd\u7c7b\u578b\u7684\u5546\u5e97\u7684\u6700\u8fd1\u70b9\u8ddd\u79bb\u753b\u51fa\u6765\uff0c\u5176\u5b9e\u662f\u4e00\u6761\u659c\u7387\u4e3a1\u6216-1\u7684\u5206\u6bb5\u4e00\u6b21\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u8fd8\u6709\u4e00\u4e2a\u7279\u5f81\uff0c\u5c31\u662f\u53ea\u4f1a\u5728x\u8f74\u4e0a\u62d0\u70b9\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u628a-1\u548c1\u5206\u5f00\u6765\u8ba8\u8bba\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u7528set\u548c\u5806\u7ef4\u62a4\u4e00\u4e0b\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u53f3\u7aef\u70b9\u5927\u4e8e\u8fd9\u4e2a\u8be2\u95ee\u70b9\u7684\u4e00\u6b21\u51fd\u6570\u7684\u5de6\u7aef\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u51fa\u6765\u4e86\u3002\uff08\u4e8b\u5b9e\u4e0a\uff0c\u6211\u61d2\u5f97\u5199\uff0c\u611f\u89c9\u597d\u5f3a\uff09\n\ncode:\n```\n//2018.8.9 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register LL\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline LL read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline LL _abs(const res &x){\n    return x>0?x:-x;\n}\ninline LL _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline LL _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst LL N=3e5+10,Q=3e5+10,K=3e5+10; \nLL n,k,q,sz;\nLL a[N]; \ninline LL lisan_get(res x){\n\treturn lower_bound(a+1,a+1+sz,x)-a;\n}\nstruct HEAP{\n\tpriority_queue<LL,vector<LL>,greater<LL> >Q1,Q2;\n    inline void push(res x){\n\t    Q1.push(x); \n\t}\n    inline void erase(res x){\n\t    Q2.push(x); \n\t}\n    inline LL top(){\n\t    while(!Q2.empty()&&Q1.top()==Q2.top())Q1.pop(),Q2.pop();\n\t\treturn Q1.top();\n\t}\n}QQ[N];\nLL siz,d;\nstruct zkw{\n\tLL mn,mx;\n}tr[N<<4];\ninline void build(){\n\tsiz=sz+1;\n\tfor(d=1;d<siz;d<<=1);\n\td--;\n\tfor(res i=siz+d+1;i>=1;i--)tr[i].mn=inf;\n\tfor(res i=1;i<=siz;i++)QQ[i].push(inf);\n\tfor(res i=1;i<=k;i++)QQ[siz].push(-inf);\n\tfor(res i=siz+d;i;i>>=1)tr[i].mn=-inf;\n\tfor(res i=1;i<=sz;i++)tr[d+i].mx=a[i];\n\ttr[d+siz].mx=(inf<<1);\n\tfor(res i=d;i>=1;i--)tr[i].mx=_max(tr[i<<1].mx,tr[i<<1|1].mx);\n}\ninline LL solve(res x){\n\tif(tr[siz+d].mn==-inf)return -1;\n\tres i=1,now=inf;\n\twhile(i<=d){\n\t\tif(x>tr[i<<1].mx){i=(i<<1|1);continue;}\n\t\tif(tr[i<<1].mx+1+_min(tr[i<<1|1].mn,now)<=(x<<1))i=(i<<1|1);\n\t\telse now=_min(tr[i<<1|1].mn,now),i<<=1;\n\t}\n\treturn _min((x<<1)-_min(now,tr[i].mn),tr[i].mx)-x;\n}\ninline void update(res i){\n\ttr[i+d].mn=QQ[i].top();\n\ti+=d;\n\twhile(i>>=1){\n\t\tif(tr[i].mn==_min(tr[i<<1].mn,tr[i<<1|1].mn))break;\n\t\ttr[i].mn=_min(tr[i<<1].mn,tr[i<<1|1].mn);\n\t}\n}\ninline void ADD(res i,res x){\n\tQQ[i].push(x);\n\tupdate(i);\n}\ninline void DEL(res i,res x){\n\tQQ[i].erase(x);\n\tupdate(i);\n}\ninline void MOD(res i,res x,res y){\n\tQQ[i].erase(x);\n\tQQ[i].push(y);\n\tupdate(i);\n}\ninline void insert(multiset<LL>&S,res x){\n\tmultiset<LL>::iterator it1,it2;\n\tit2=it1=S.insert(x);\n\tit1--,it2++;\n\tADD(lisan_get(x),*it1);\n\tMOD(lisan_get(*it2),*it1,x);\n}\ninline void remove(multiset<LL>&S,res x){\n\tmultiset<LL>::iterator it,it1,it2;\n\tit=it1=it2=S.find(x);\n\tit1--,it2++;\n\tDEL(lisan_get(x),*it1);\n\tMOD(lisan_get(*it2),x,*it1);\n\tS.erase(it);\n}\nmultiset<LL> S[K];\nstruct MAR{\n\tLL x,t,p;\n\tMAR() {}\n\tMAR(res x,res t,res p):x(x),t(t),p(p) {}\n\tinline bool operator < (const MAR &b) const {\n\t\treturn p<b.p;\n\t}\n\tinline void add(){\n\t\tinsert(S[t],x);\n\t}\n\tinline void del(){\n\t\tremove(S[t],x);\n\t}\n}pa[N],pb[N];\nstruct QUE{\n\tLL id,l,y;\n\tQUE() {}\n\tQUE(res id,res l,res y):id(id),l(l),y(y) {}\n\tinline bool operator < (const QUE &b) const {\n\t\treturn y<b.y;\n\t}\n}que[Q];\nLL ans[Q];\nint main(){\n\tn=read(),k=read(),q=read();\n\tfor(res i=1;i<=n;i++){\n\t\tres x=read(),t=read(),A=read(),B=read();\n\t\tpa[i]=MAR(x,t,A);\n\t\tpb[i]=MAR(x,t,B);\n\t\ta[i]=x;\n\t}\n\tsort(a+1,a+n+1);\n\tsz=unique(a+1,a+n+1)-a-1;\n\tbuild();\n//\tfor(res i=1;i<=d+siz;i++)printf(\"%d %d\\n\",tr[i].mn,tr[i].mx);\n\tfor(res i=1;i<=q;i++){\n\t\tres l=read(),y=read();\n\t    que[i]=QUE(i,l,y);\n\t}\n\tsort(pa+1,pa+n+1);\n\tsort(pb+1,pb+n+1);\n\tsort(que+1,que+q+1);\n//\tfor(res i=1;i<=n;i++)printf(\"%d %d %d\\n\",pa[i].x,pa[i].t,pa[i].p);\n//\tfor(res i=1;i<=n;i++)printf(\"%d %d %d\\n\",pb[i].x,pb[i].t,pb[i].p);\n//  for(res i=1;i<=q;i++)printf(\"%d %d %d\\n\",que[i].id,que[i].l,que[i].y);\n\tfor(res i=1;i<=k;i++)S[i].insert(-inf),S[i].insert(inf);\n\tfor(res i=1,A=1,B=1;i<=q;i++){\n\t\twhile(A<=n&&pa[A].p<=que[i].y)pa[A++].add();\n\t\twhile(B<=n&&pb[B].p<que[i].y)pb[B++].del();\n\t\tans[que[i].id]=solve(que[i].l);\n\t}\n\tfor(res i=1;i<=q;i++)printf(\"%Ld\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1533801436,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010APIO2018\u3011\u65b0\u5bb6"
    },
    {
        "content": "\u5b89\u5229\u53ef\u7231\u7684\u5e73\u8861\u6811\u89e3\u6cd5\u3002\n\n------------\n\n\u9996\u5148\u5148\u8bf4\u6b63\u89e3\u3002\n\n\u5e94\u8be5\u5f88\u5bb9\u6613\u60f3\u5230\u53ef\u4ee5\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\u8dd1\u626b\u63cf\u7ebf\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u7ef4\u62a4\u4e86\u6b64\u65f6\u6240\u6709\u5c1a\u5728\u5f00\u4e1a\u7684\u5546\u5e97\u7684\u7c7b\u578b\u53ca\u4f4d\u7f6e\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u662f\u5426\u6709\u65b9\u6cd5\u6c42\u51fa\u6240\u6709\u989c\u8272\u79bb\u5f53\u524d\u4f4d\u7f6e\u6700\u8fd1\u7684\u5546\u5e97\u4e2d\u6700\u8fdc\u7684\u4e00\u4e2a\u5462\uff1f\n\n\u201c\u6700\u8fd1\u7684\u6700\u8fdc\u201d\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u3002\u4e8e\u662f\u6211\u4eec\u4e8c\u5206\u533a\u95f4\u957f\u5ea6\u3002\u5219\u95ee\u9898\u8f6c\u6362\u4e3a\u80fd\u5426\u5224\u65ad\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u4e2d\u662f\u5426\u5b58\u5728\u6240\u6709\u989c\u8272\u3002\n\n\u8fd9\u662f\u7ecf\u5178\u4e3b\u5e2d\u6811\u95ee\u9898\uff0c\u601d\u60f3\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u5546\u5e97 $i$\uff0c\u7ef4\u62a4\u5176\u5de6\u65b9\u7b2c\u4e00\u4e2a\u5c1a\u5728\u5f00\u4e1a\u7684\u540c\u8272\u5546\u5e97 $pre_i$\uff08\u4e0d\u5b58\u5728\u5219\u7f6e\u4e3a $0$\uff09\uff0c\u968f\u540e\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 $pre_i<l$ \u7684\u6240\u6709\u5546\u5e97\uff0c\u5373\u533a\u95f4\u4e2d\u6bcf\u79cd\u989c\u8272\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n\n\u4f46\u662f\u5982\u679c\u4f7f\u7528\u4e3b\u5e2d\u6811\u590d\u6742\u5ea6\u662f\u975e\u5e38\u4e0d\u53ef\u7231\u7684 $O(n\\log^3n)$\u3002\u5f53\u7136\uff0c\u5982\u679c\u628a\u5916\u5c42\u7684\u4e8c\u5206\u6362\u6210\u76f4\u63a5\u5728\u4e3b\u5e2d\u6811\u4e0a\u4e8c\u5206\u4e5f\u80fd\u628a\u590d\u6742\u5ea6\u4f18\u5316\u5230 $O(n\\log^2n)$\uff0c\u8fd8\u662f\u6709\u8dd1\u8fc7\u53bb\u7684\u5e0c\u671b\u7684\u3002\u4f46\u662f\u6211\u4eec\u8fd8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8981\u6c42\u7684\u4e0d\u662f**\u533a\u95f4\u4e2d\u4e0d\u540c\u989c\u8272\u7684\u6570\u76ee**\uff0c\u800c\u662f**\u533a\u95f4\u4e2d\u6709\u65e0\u51fa\u73b0\u6240\u6709\u7684\u989c\u8272**\uff0c\u662f\u4e00\u4e2a\u5b58\u5728\u6027\u95ee\u9898\u800c\u975e\u8ba1\u6570\u95ee\u9898\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u4e00\u4e9b\u4fe1\u606f\u3002\n\n\u6211\u4eec\u4ecd\u7136\u8003\u8651\u4e0a\u8ff0\u89e3\u6cd5\u3002\u53ea\u4e0d\u8fc7\uff0c\u6211\u4eec\u8fd9\u65f6\u627e\u51fa\u6240\u6709 $i\\in(r,+\\infty)$ \u7684\u5546\u5e97\u4e2d\uff0c$pre_i$ \u7684\u6700\u5c0f\u503c\u3002\u660e\u663e\uff0c\u5982\u679c\u6b64\u65f6\u6709 $\\min<l$\uff0c\u5219 $\\min$ \u6240\u5c5e\u7684\u6b64\u79cd\u989c\u8272\u5e76\u6ca1\u6709\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\uff0c\u4e5f\u5c31\u65e0\u6cd5\u8fbe\u6210\u6240\u6709\u989c\u8272\u5168\u6570\u51fa\u73b0\u7684\u8981\u6c42\u4e86\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e0a\u8ff0\u89e3\u6cd5\u4e2d\u6bcf\u79cd\u989c\u8272\u6700\u53f3\u7aef\u7684\u5546\u5e97\u90fd\u4e0d\u4f1a\u88ab\u8003\u8651\u5230\u3002\u4e8e\u662f\u6211\u4eec\u53e6\u5916\u7528\u70b9\u4ec0\u4e48\u4e1c\u897f\u7ef4\u62a4\u6bcf\u79cd\u989c\u8272\u6700\u53f3\u7aef\u7684\u5546\u5e97\uff0c\u7136\u540e\u5c06\u4e0a\u8ff0\u7684 $\\min$ \u4e0e\u8fd9\u91cc\u6700\u53f3\u7aef\u7684\u5546\u5e97\u4e2d\u6700\u5de6\u7aef\u7684\u54ea\u4e00\u4e2a\u518d\u53d6 $\\min$\uff0c\u5373\u53ef\u627e\u5230\u4e0a\u8ff0\u4f4d\u7f6e\uff0c\u7136\u540e\u76f4\u63a5\u4e0e $l$ \u6bd4\u8f83\u5373\u53ef\u3002\n\n------------\n\n\u660e\u663e\u8fd9\u4e00\u5207\u90fd\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5b83\u6709\u4e24\u4e2a\u7f3a\u9677\uff1a\n\n1. \u7ebf\u6bb5\u6811\u5fc5\u987b\u79bb\u6563\u5316\uff0c\u4f46\u79bb\u6563\u5316\u540e\u5c31\u4e0d\u597d\u4e8c\u5206\u4e86\u3002\n\n2. \u7ebf\u6bb5\u6811\u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u90fd\u53ef\u80fd\u6709\u4e0d\u6b62\u4e00\u5bb6\u5546\u5e97\uff0c\u6240\u4ee5\u5fc5\u987b\u5728\u91cc\u9762\u518d\u5957\u4e00\u4e2a```multiset```\u52a0\u4ee5\u7ef4\u62a4\u3002\n\n\u867d\u7136\u8fd9\u4e24\u4e2a\u95ee\u9898\u90fd\u662f\u53ef\u4ee5\u88ab\u5904\u7406\u6389\u7684\uff0c\u4f46\u662f\u6211\u4e0d\u60f3\u70e6\u90a3\u4e48\u591a\u4e86\uff0c\u5c31\u7b80\u5355\u5199\u4e86\u68f5\u5e73\u8861\u6811\u7ef4\u62a4\u3002\u660e\u663e\u6b64\u65f6\u5c31\u53ef\u4ee5\u4e0d\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u5f00```multiset```\uff08\u5e73\u8861\u6811\u652f\u6301\u952e\u503c\u76f8\u540c\u7684\u6570\u5b58\u5728\uff09\uff0c\u4e5f\u4e0d\u5fc5\u79bb\u6563\u5316\u4e86\u3002\n\n\u7136\u540e\uff0c\u65e0\u8bba\u662f\u7ebf\u6bb5\u6811\u8fd8\u662f\u5e73\u8861\u6811\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u5728\u4e0a\u9762\u76f4\u63a5\u4e8c\u5206\u6765\u89c4\u907f\u6389\u5916\u5c42\u7684\u90a3\u4e2a\u4e8c\u5206\uff0c\u4ece\u800c\u5c06\u590d\u6742\u5ea6\u4f18\u5316\u5230 $O(n\\log n)$\u3002\n\n\u4f46\u662f\u53cd\u6b63\u6211\u5916\u5c42\u5957\u4e86\u4e8c\u5206\u4e5f\u8fc7\u53bb\u4e86\uff08\u5e76\u4e14\u751a\u81f3\u8dd1\u8fdb\u4e861s\u4ee5\u5185\uff09\uff0c\u4e5f\u5c31\u61d2\u5f97\u518d\u6539\u6210\u5e73\u8861\u6811\u4e0a\u4e8c\u5206\u4e86\u3002\u6240\u4ee5\u6b64\u5904\u4ee3\u7801\u662f $O(n\\log^2n)$ \u7684\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,q;\nint SHO;\nstruct Shops{\n\tint tim,pos,tp;\n\tShops(int u=0,int v=0,int w=0){tim=u,pos=v,tp=w;}\n\tfriend bool operator<(const Shops &x,const Shops &y){return x.tim<y.tim;}\n}sho[600100];\nstruct Queries{\n\tint tim,pos,id;\n\tfriend bool operator<(const Queries &x,const Queries &y){return x.tim<y.tim;}\n}que[300100];\nint res[300100];\n#define lson t[x].ch[0]\n#define rson t[x].ch[1]\nint cnt,rt;\nstruct Treap{\n\tint ch[2],rd,pos,pre,mn,sz;\n}t[1000100];\nvoid pushup(int x){\n\tt[x].mn=t[x].pre,t[x].sz=1;\n\tif(lson)t[x].mn=min(t[lson].mn,t[x].mn),t[x].sz+=t[lson].sz;\n\tif(rson)t[x].mn=min(t[rson].mn,t[x].mn),t[x].sz+=t[rson].sz;\n}\nint newnode(int pos,int pre){\n\tint x=++cnt;\n\tt[x].rd=rand()*rand();\n\tt[x].pos=pos;\n\tt[x].pre=pre;\n\tpushup(x);\n\treturn x;\n}\nint merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(t[x].rd>t[y].rd){t[x].ch[1]=merge(t[x].ch[1],y),pushup(x);return x;}\n\telse{t[y].ch[0]=merge(x,t[y].ch[0]),pushup(y);return y;}\n}\nvoid splitbyval(int x,int pos,int pre,int &u,int &v){\n\tif(!x){u=v=0;return;}\n\tif(t[x].pos<pos||t[x].pos==pos&&t[x].pre<pre)u=x,splitbyval(rson,pos,pre,rson,v);\n\telse v=x,splitbyval(lson,pos,pre,u,lson);\n\tpushup(x);\n}\nvoid splitbysize(int x,int k,int &u,int &v){\n\tif(!x){u=v=0;return;}\n\tif(t[lson].sz>=k)v=x,splitbysize(lson,k,u,lson);\n\telse u=x,splitbysize(rson,k-t[lson].sz-1,rson,v);\n\tpushup(x);\n}\nvoid Insert(int pos,int pre){\n\tint a,b;\n\tsplitbyval(rt,pos,pre,a,b);\n\trt=merge(merge(a,newnode(pos,pre)),b);\n}\nvoid Delete(int pos,int pre){\n\tint a,b,c;\n\tsplitbyval(rt,pos,pre,a,b);\n\tsplitbysize(b,1,b,c);\n\trt=merge(a,c);\n}\nmultiset<int>typ[300100],all;\n#define ERASE(x,y) x.erase(x.find(y))\nvoid Ins(int col,int pos){\n\tauto it=typ[col].lower_bound(pos),ti=it;\n\tint pre=*--it;\n\tInsert(pos,pre);\n\tif(ti!=typ[col].end()){\n\t\tint nex=*ti;\n\t\tDelete(nex,pre);\n\t\tInsert(nex,pos);\n\t}\n\tERASE(all,*typ[col].rbegin());\n\ttyp[col].insert(pos);\n\tall.insert(*typ[col].rbegin());\n}\nvoid Del(int col,int pos){\n\tERASE(all,*typ[col].rbegin());\n\tERASE(typ[col],pos);\n\tall.insert(*typ[col].rbegin());\n\tauto it=typ[col].lower_bound(pos),ti=it;\n\tint pre=*--it;\n\tDelete(pos,pre);\n\tif(ti!=typ[col].end()){\n\t\tint nex=*ti;\n\t\tDelete(nex,pos);\n\t\tInsert(nex,pre);\n\t}\n}\nbool che(int l,int r){\n\tl=max(l,1);\n\tint a,b;\n\tsplitbyval(rt,r,0x3f3f3f3f,a,b);\n\tbool ret=t[b].mn>=l;\n\trt=merge(a,b);\n\treturn ret;\n}\nint Query(int pos){\n\tif(*all.begin()==0)return -1;\n\tint l=max(pos-*all.begin(),0),r=max(l,*all.rbegin()-pos);\n\twhile(l<r){\n\t\tint mid=(l+r)>>1;\n\t\tif(che(pos-mid,pos+mid))r=mid;\n\t\telse l=mid+1;\n\t}\n\treturn r;\n}\nvoid Iterate(int x){if(x)Iterate(lson),printf(\"(%d,%d)\",t[x].pos,t[x].pre),Iterate(rson);}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&q),t[0].mn=0x3f3f3f3f;\n\tfor(int i=1;i<=m;i++)typ[i].insert(0),all.insert(0);\n\tfor(int i=1,a,b,c,d;i<=n;i++)scanf(\"%d%d%d%d\",&a,&b,&c,&d),sho[++SHO]=Shops(c,a,b),sho[++SHO]=Shops(d+1,a,-b);\n\tsort(sho+1,sho+SHO+1);\n\tfor(int i=1;i<=q;i++)scanf(\"%d%d\",&que[i].pos,&que[i].tim),que[i].id=i;\n\tsort(que+1,que+q+1);\n\tfor(int i=1,j=1;i<=q;i++){\n\t\twhile(j<=SHO&&sho[j].tim<=que[i].tim){\n\t\t\tif(sho[j].tp>0)Ins(sho[j].tp,sho[j].pos);\n\t\t\telse Del(-sho[j].tp,sho[j].pos);\n\t\t\tj++;\n\t\t}\n//\t\tfor(int k=1;k<=m;k++,puts(\"\"))for(auto it:typ[k])printf(\"%d \",it);Iterate(rt),puts(\"\");\n\t\tres[que[i].id]=Query(que[i].pos);\n\t}\n\tfor(int i=1;i<=q;i++)printf(\"%d\\n\",res[i]);\n\treturn 0;\n}\n```",
        "postTime": 1606559708,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4632 \u3010[APIO2018] New Home \u65b0\u5bb6\u3011"
    },
    {
        "content": "\u50cf\u8fd9\u79cd\u67092\u4e2a\u9650\u5236\u6761\u4ef6\u7684\u4e00\u822c\u90fd\u8981\u7528\u6392\u5e8f\u89e3\u51b3\u5176\u4e2d\u4e00\u4e2a\u9650\u5236\n\n1\u3001\u6309\u4f4d\u7f6e\u6392\uff1f\u6216\u8bb8\u53ef\u4ee5\u5427\u3002\u3002\u53ef\u80fd\u8981\u53ef\u6301\u4e45\u5316\n\n2\u3001\u6309\u65f6\u95f4\u6392\uff1f\u53d1\u73b0\u6bcf\u4e2a\u5546\u5e97\u53ef\u4ee5\u62c6\u9664\u63d2\u5165\u548c\u5220\u9664\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u600e\u4e48\u5feb\u901f\u67e5\u8be2\u7b54\u6848\u5462\uff1f\n\n\u4e4d\u4e00\u770b\u4e0d\u4f1a\u3002\u3002\u4e0d\u5982\u60f3\u60f3\u4e8c\u5206\n\n\u5047\u8bbe\u7b54\u6848\u4e3ax,\u90a3\u4e48\u5c31\u8bf4\u660epos+x\u4f4d\u7f6e\u4e4b\u540e\u6ca1\u6709\u4eba\u7684\u524d\u7ee7\u5728pos-x\u524d\u9762\n\n\u90a3\u4e48\u53ea\u8981\u67e5\u8be2pos+x\u540e\u9762\u6240\u6709\u4eba\u524d\u7ee7\u7684\u6700\u5c0f\u503c\u5c31\u597d\u4e86\n\n\u53d1\u73b0\u590d\u6742\u5ea6O(nlog^2n\uff09\n\n\u7136\u800c\u50cf\u6211\u8fd9\u79cd\u7528FHQ-Treap\u4ee3\u66ff\u79bb\u6563\u5316+\u7ebf\u6bb5\u6811\u7684zz\u5e38\u6570\u5de8\u5927\u96be\u4ee5\u63a5\u53d7\n\n~~\u9884\u5b9a100 UOJ47 \u6d1b\u8c3760~~\n\n\u90a3\u4e48\u600e\u4e48\u4f18\u5316\u7b97\u6cd5\u5462\uff1f\n\n\u5176\u5b9e\u4f60\u4f1a\u53d1\u73b0\u4f60\u53ea\u8981\u5728Treap\u4e0a\u627e\u5c31\u597d\u4e86\u5c31\u597d\u4e86\uff0c\u76f8\u5f53\u4e8e\u627e\u6700\u5c0f\u7684x-k\u4f7f\u5f97 min>=k-(x-k)\n\n\uff08x\u4e3a\u4f4d\u7f6e\uff0ck\u662f\u8be2\u95ee\u7684\u4f4d\u7f6e\uff0cnow_min\u4e3a\u6b64\u65f6x\u53f3\u8fb9\u6700\u5c0f\u7684\u524d\u7ee7\uff0c~~\u53ef\u4ee5\u81ea\u5df1yy\u4e00\u4e0b~~\uff09\n\n~~\u7136\u800c\u56e0\u4e3a\u539f\u672c\u7684FHQ-Treap\u4e0d\u4fdd\u8bc1\u5de6\u5b50\u6811\u4e25\u683c\u5c0f\u4e8ex\uff0c\u53f3\u5b50\u6811\u4e25\u683c\u5927\u4e8ex\uff0c\u5bb3\u7684\u6211\u53c8\u52a0\u4e86\u4e2amultiset,\u65e9\u77e5\u9053\u5c31\u4e56\u4e56\u5199\u7ebf\u6bb5\u6811\u4e86~~\n\n\n\u73b0\u5728\u7b97\u6cd5\u590d\u6742\u5ea6\u6210\u529f\u4f18\u5316\u5230O(nlogn)\u4e86\uff0c\u7136\u800c\u4e00\u4ea4\u53d1\u73b0\u8fd8\u662fT\u4e86~~\u6d1b\u8c3796-98 , UOJ 57\u2026\u2026mmp~~\n\n\u518d\u60f3\u4e00\u60f3\u8fd8\u6709\u4ec0\u4e48\u53ef\u4ee5\u4f18\u5316\u3002\u3002\n\nTreap\uff01\uff01\n\n\u6211\u628a\u539f\u672c\u7684srand((int)time(0))\u6362\u6210srand(233)\u5728UOJ\u5c31\u8fc7\u4e86\uff1f\uff1f\uff1f\n\n~~\u7136\u800c\u5728\u6d1b\u8c37\u4e0a\u8fd8\u662f96~~\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u2026\u2026\u4e11\u964b\u8bf7\u89c1\u8c05\n\n\n\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<ctime>\n#include<cstdio>\n#include<set>\n#include<queue>\n#include<algorithm>\n#define RE  register\n#define For(i,a,b) for( int i=a;i<=b;i++)\n#define Lc(x) (s[x].lc)\n#define Rc(x) (s[x].rc)\nconst int N=3e5+1000,INF=0x3f3f3f3f;\nvoid read(int &x)\n{\n\tint t=0,opt=1;\n\tchar c=getchar();\n\twhile (c<'0'||c>'9') (c=='-'?opt=-1:0),c=getchar();\n\twhile ('0'<=c&&c<='9')\n\t{\n\t\tt=t*10+c-'0';\n\t\tc=getchar();\n\t}\n\tx=t*opt;return ;\n}\nint n,type,q,Pre[N],Next[N],ans[N];\nstruct Query\n{\n\tint pos,t,num;\n\tbool operator <(const Query &other) const{return t<other.t;}\n} Q[N];\nstruct DATA\n{\n\tint a,b,pos,type;\n\tbool operator <(const DATA &other) const{return a<other.a;}\n} data[N];int now=1;\nstd::priority_queue<std::pair<int,int> > H;\nstd::set<std::pair<int,int> > S[N];\nstd::set<std::pair<int,int> > ::iterator it1,it2;\nnamespace Treap\n{\n\tstd::multiset<int>  S[N*10];\n\tstruct DATA\n\t{\n\t\tint x,min,lc,rc,weigh;\n\t}s[N*10];int cnt=0,root=0;\n\tint New( int x, int y)\n\t{\n\t\ts[++cnt]=(DATA){x,y,0,0,rand()};\n\t\tS[cnt].insert(y);\n\t\treturn cnt;\n\t}\n\tvoid Push_up( int x)\n\t{\n\t\ts[x].min=*S[x].begin();\n\t\tif (Lc(x)) s[x].min=std::min(s[x].min,s[Lc(x)].min);\n\t\tif (Rc(x)) s[x].min=std::min(s[x].min,s[Rc(x)].min);\t\n\t}\n\tint Merge( int x, int y)\n\t{\n\t\tif (!x||!y) return x+y;\n\t\tif (s[x].weigh<s[y].weigh) {Rc(x)=Merge(Rc(x),y);Push_up(x);return x;}\n\t\telse{Lc(y)=Merge(x,Lc(y));Push_up(y);return y;}\n\t}\n\tvoid Split(int &x,int &y, int now, int k)\n\t{\n\t\tif (!now) x=y=0;\n\t\telse\n\t\t{\n\t\t\tif (k<=s[now].x) y=now,Split(x,Lc(y),Lc(now),k);\n\t\t\telse x=now,Split(Rc(x),y,Rc(now),k);\n\t\t\tPush_up(now);\n\t\t}\n\t}\n\tvoid Insert( int x, int y)\n\t{\n\t\t int A,B,C;\n\t\tSplit(A,B,root,x);Split(B,C,B,x+1);\n\t\tif (B) S[B].insert(y),Push_up(B);else  B=New(x,y);\n\t\troot=Merge(A,Merge(B,C));\n\t}\n\tvoid Erase(int x,int y)\n\t{\n\t\t int A,B,C;\n\t\tSplit(A,B,root,x);Split(B,C,B,x+1);\n\t\tS[B].erase(S[B].find(y));\n\t\tif (!S[B].size()) B=0; else Push_up(B);\n\t\troot=Merge(A,Merge(B,C));\n\t}\n\tint Query(int x)\n\t{\n\t\t int A,B,ans;\n\t\tSplit(A,B,root,x);\n\t\tans=s[B].min;root=Merge(A,B);\n\t\treturn ans;\n\t}\n\tint Find(int now,int l,int r,int k,int min) //\u5bfb\u627e\u6700\u5c0f\u7684x-k   now_min>=k-(x-k)\n\t{\n//\t\tprintf(\"!!! %d %d %d %d %d %d %d %d %d\\n\",now,Lc(now),Rc(now),s[now].x,*S[now].begin(),l,r,k,min);\n\t\tif (!now) return std::max(l-k,k-min);\n\t\tif (s[now].x<k) return Find(Rc(now),l,r,k,min);\n\t\telse\n\t\t{\n\t\t\tint now_min=std::min(min,s[Rc(now)].min);\n\t\t\tif (now_min>=k-(s[now].x-k)) return std::min(s[now].x-k,Find(Lc(now),l,s[now].x-1,k,  std::min(now_min,*S[now].begin())  ));\n\t\t\telse return Find(Rc(now),s[now].x+1,r,k,min);\n\t\t}\n\t}\n}\nint main()\n{\n//\tfreopen(\"xx.in\",\"r\",stdin);\n\t//srand((int)time(0));\n\tsrand(233);\n\tTreap::s[0].min=INF;\n\tread(n);read(type);read(q);\n\tFor(i,1,n) read(data[i].pos),read(data[i].type),read(data[i].a),read(data[i].b);\n\tFor(i,1,q) read(Q[i].pos),read(Q[i].t),Q[i].num=i;\n\tstd::sort(data+1,data+1+n);std::sort(Q+1,Q+1+q);\n\tFor(i,1,type) S[i].insert(std::make_pair(-INF,0)),S[i].insert(std::make_pair(INF,n+1));\n\tFor(i,1,type) Treap::Insert(INF,-INF);data[0].pos=-INF;data[n+1].pos=INF;\n\tFor(i,1,q)\n\t{\n\t\twhile (now<=n&&data[now].a<=Q[i].t) \n\t\t{\n\t\t\tit1=it2=S[data[now].type].lower_bound(std::make_pair(data[now].pos,now));it1--;\n\t\t\tNext[now]=it2->second;Pre[now]=it1->second;\n\t\t\tTreap::Erase(data[Next[now]].pos,it1->first);\n\t\t\tif (Next[now]!=n+1) Pre[Next[now]]=now;\n\t\t\tif (Pre[now]!=0) Next[Pre[now]]=now;\n\t\t\tTreap::Insert(data[Next[now]].pos,data[now].pos);\n\t\t\tTreap::Insert(data[now].pos,data[Pre[now]].pos);\n\t\t\tS[data[now]\n\t\t\t.type].insert(std::make_pair(data[now].pos,now));\n\t\t\tH.push(std::make_pair(-data[now].b,now));\n\t\t\tnow++;\n\t\t}\n\t\twhile (!H.empty()&&-H.top().first<Q[i].t)\n\t\t{\n\t\t\tint now=H.top().second;H.pop();\n\t\t\tTreap::Erase(data[now].pos,data[Pre[now]].pos);\n\t\t\tTreap::Erase(data[Next[now]].pos,data[now].pos);\n\t\t\tif (Next[now]!=n+1) Pre[Next[now]]=Pre[now];\n\t\t\tif (Pre[now]!=0) Next[Pre[now]]=Next[now];\n\t\t\tTreap::Insert(data[Next[now]].pos,data[Pre[now]].pos);\n\t\t\tS[data[now].type].erase(std::make_pair(data[now].pos,now));\n\t\t}\n\t\tint Ans=Treap::Find(Treap::root,Q[i].pos,INF,Q[i].pos,INF);\n\t\tif (Ans>(int)1e8) Ans=-1;\n\t\tans[Q[i].num]=Ans;\n\t}\n\tFor(i,1,q) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1557844013,
        "uid": 87510,
        "name": "\u54af\u54af\u54af",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4632 \u3010[APIO2018] New Home \u65b0\u5bb6\u3011"
    },
    {
        "content": "\u4e00\u4e2a $\\log$ \u7684\u505a\u6cd5\uff1a\n\n\u9996\u5148\u5bf9\u65f6\u95f4\u626b\u63cf\u7ebf\uff0c\u7136\u540e\u5c06\u6700\u4f18\u6027\u95ee\u9898\u8f6c\u5316\u4e3a\u4e8c\u5206 $+$ \u5224\u5b9a\u6027\u95ee\u9898\uff08\u4e5f\u5c31\u662f\u4e8c\u5206\u7b54\u6848\uff09\u3002\n\n\u518d\u6765\u770b\u540c\u4e00\u65f6\u523b\u7684\u8be2\u95ee\uff0c\u8fd9\u65f6\u5df2\u7ecf\u53bb\u6389\u65f6\u95f4\u7684\u9650\u5236\uff0c\u6240\u4ee5\u518d\u6309\u5750\u6807\u8fdb\u884c\u626b\u63cf\u7ebf\u3002\n\n\u7136\u540e\u770b\u5982\u4f55\u5feb\u901f\u67e5\u8be2\u533a\u95f4\u5185\u662f\u5426\u5305\u542b\u6240\u6709\u7684\u5e97\uff0c\u548c\u652f\u6301\u7ef4\u62a4\u5e97\u7684\u51fa\u73b0\u6d88\u5931\u3002\n\n $[x,y]$ \u662f\u5426\u5305\u542b\u6240\u6709\u5e97\uff1a\n \n\u4e5f\u5c31\u662f\u6709\u4e00\u79cd\u5e97\u5728 $[x,y]$ \u5185\u6ca1\u5f00\uff0c\u7b49\u4ef7\u4e8e\u5728 $y$ \u4e4b\u540e\uff0c\u6709\u5546\u5e97\u7684\u524d\u9a71 $\\le x$\u3002\n\n\u4f7f\u7528\u4e4b\u524d\u7684\u7b54\u6848\u6765\u8fdb\u884c\u66f4\u65b0\uff0c\u53ef\u4ee5\u4f7f\u7528\u5806\u7ef4\u62a4\u6700\u8fdc\u7b54\u6848\uff0c\u53ef\u4ee5\u5c06\u5806\u6362\u6210\u7ebf\u6bb5\u6811\u3002\n\n\u5bf9\u6bcf\u79cd\u5e97\u5f00\u4e2a set \u4ee5\u53ca\u5168\u5c40\u5f00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u524d\u9a71\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u7ebf\u6bb5\u6811\u548c\u4e8c\u5206\u90fd\u662f\u7ef4\u62a4\u8ddd\u79bb\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u53d8\u6210\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u8fd9\u6837\u5c31\u53ea\u6709\u4e00\u4e2a $\\log$ \u4e86\u3002\n\n\u8fd9\u91cc\u4f7f\u7528\u4e86\u5e38\u6570\u8f83\u5c0f\u7684 zkw \u7ebf\u6bb5\u6811\uff0c\u53ef\u4ee5\u6362\u6210\u9012\u5f52\u7248\u7ebf\u6bb5\u6811\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#include <ext/pb_ds/priority_queue.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\nusing ll = long long;\nnamespace Main {\n\tconst int N = 3e5 + 5, T = (1 << 19) + N, inf = 1e8 + 5;\n\tint n, k, Q;\n\tint tot;\n\tint a[N];\n\tvoid init(int sz) {\n\t\tsort(a + 1, a + 1 + sz);\n\t\ttot = unique(a + 1, a + 1 + sz) - a - 1;\n\t}\n\tint get(int x) {\n\t\treturn lower_bound(a + 1, a + 1 + tot, x) - a;\n\t}\n\tstruct Heap {\n\t\t__gnu_pbds :: priority_queue<int, greater<int> > a, b;\n\t\tvoid push(int x) {\n\t\t\ta.push(x);\n\t\t}\n\t\tvoid del(int x) {\n\t\t\tb.push(x);\n\t\t}\n\t\tint top() {\n\t\t\twhile (!b.empty() && a.top() == b.top()) {\n\t\t\t\ta.pop();\n\t\t\t\tb.pop();\n\t\t\t}\n\t\t\treturn a.top();\n\t\t}\n\t};\n\tnamespace segmenttree {\n\t\tint n, M;\n\t\tHeap q[N];\n\t\tstruct tree {\n\t\t\tint maxx, minn;\n\t\t} t[T];\n\t\tvoid init(int sz, int k) {\n\t\t\tn = sz;\n\t\t\tfor (M = 1; M < n; M <<= 1);\n\t\t\t--M;\n\t\t\tfor (int i = n + M + 1; i >= 1; --i) t[i].minn = inf;\n\t\t\tfor (int i = 1; i <= n; ++i) q[i].push(inf);\n\t\t\tfor (int i = 1; i <= k; ++i) q[n].push(-inf);\n\t\t\tfor (int i = n + M; i; i >>= 1) {\n\t\t\t\tt[i].minn = -inf;\n\t\t\t}\n\t\t\tfor (int i = 1; i < n; ++i) {\n\t\t\t\tt[i + M].maxx = a[i];\n\t\t\t}\n\t\t\tt[M + n].maxx = inf * 2;\n\t\t\tfor (int i = M; i >= 1; --i) {\n\t\t\t\tt[i].maxx = max(t[i << 1].maxx, t[i << 1 | 1].maxx);\n\t\t\t}\n\t\t}\n\t\tint query(int x) {\n\t\t\tif (t[n + M].minn == -inf) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tint i = 1, now = inf;\n\t\t\twhile (i <= M) {\n\t\t\t\tif (x > t[i << 1].maxx) {\n\t\t\t\t\ti = i << 1 | 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (t[i << 1].maxx + 1 + min(t[i << 1 | 1].minn, now) <= 2 * x) {\n\t\t\t\t\ti = i << 1 | 1;\n\t\t\t\t} else {\n\t\t\t\t\tnow = min(t[i << 1 | 1].minn, now);\n\t\t\t\t\ti = i << 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn min(2 * x - min(now, t[i].minn), t[i].maxx) - x;\n\t\t}\n\t\tvoid update(int i) {\n\t\t\tt[i + M].minn = q[i].top();\n\t\t\ti += M;\n\t\t\twhile (i >>= 1) {\n\t\t\t\tif (t[i].minn == min(t[i << 1].minn, t[i << 1 | 1].minn)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tt[i].minn = min(t[i << 1].minn, t[i << 1 | 1].minn);\n\t\t\t}\n\t\t}\n\t\tvoid add(int i, int x) {\n\t\t\tq[i].push(x);\n\t\t\tupdate(i);\n\t\t}\n\t\tvoid del(int i, int x) {\n\t\t\tq[i].del(x);\n\t\t\tupdate(i);\n\t\t}\n\t\tvoid add_del(int i, int x0, int x) {\n\t\t\tq[i].del(x0);\n\t\t\tq[i].push(x);\n\t\t\tupdate(i);\n\t\t}\n\t}\n\tmultiset<int> S[N];\n\tvoid add(multiset<int> &s, int x) {\n\t\tmultiset<int> :: iterator it1 = s.insert(x), it2 = it1;\n\t\t--it1;\n\t\t++it2;\n\t\tsegmenttree :: add(get(x), *it1);\n\t\tsegmenttree :: add_del(get(*it2), *it1, x);\n\t}\n\tvoid del(multiset<int> &s, int x) {\n\t\tmultiset<int> :: iterator it = s.lower_bound(x), it1 = it, it2 = it1;\n\t\t--it1;\n\t\t++it2;\n\t\tsegmenttree :: del(get(x), *it1);\n\t\tsegmenttree :: add_del(get(*it2), x, *it1);\n\t\ts.erase(it);\n\t}\n\tstruct node {\n\t\tint x, t, a;\n\t\tvoid add() {\n\t\t\tMain :: add(S[t], x);\n\t\t}\n\t\tvoid del() {\n\t\t\tMain :: del(S[t], x);\n\t\t}\n\t\tbool operator < (const node &it) const {\n\t\t\treturn a < it.a;\n\t\t}\n\t} qa[N], qb[N], query[N];\n\tint Ans[N];\n\tint main() {\n\t\tios::sync_with_stdio(false);\n\t\tcin.tie(0), cout.tie(0);\n\t\tcin >> n >> k >> Q;\n\t\tfor (int i = 1, x, t, a, b; i <= n; ++i) {\n\t\t\tcin >> x >> t >> a >> b;\n\t\t\tqa[i] = {x, t, a};\n\t\t\tqb[i] = {x, t, b};\n\t\t\tMain :: a[i] = x;\n\t\t}\n\t\tinit(n);\n\t\tsegmenttree::init(tot + 1, k);\n\t\tfor (int i = 1, x, a; i <= Q; ++i) {\n\t\t\tcin >> x >> a;\n\t\t\tquery[i] = {x, i, a};\n\t\t}\n\t\tsort(qa+1, qa+1+n);\n\t\tsort(qb+1, qb+1+n);\n\t\tsort(query + 1, query+Q+1);\n\t\tfor (int i=1; i<=k; ++i) {\n\t\t\tS[i].insert(-inf);\n\t\t\tS[i].insert(inf);\n\t\t}\n\t\tfor (int i=1, cura=1, curb=1; i<=Q; ++i) {\n\t\t\twhile (cura <=n && qa[cura].a<= query[i].a) {\n\t\t\t\tqa[cura++].add();\n\t\t\t}\n\t\t\twhile (curb <= n &&qb[curb].a < query[i].a) {\n\t\t\t\tqb[curb++].del();\n\t\t\t}\n\t\t\tAns[query[i].t] = segmenttree :: query(query[i].x);\n\t\t}\n\t\tfor (int i = 1; i <= Q; ++i) {\n\t\t\tcout<< Ans[i] <<'\\n';\n\t\t}\n\t\treturn 0;\n\t}\n}\nint main() {\n\tMain :: main();\n\treturn 0;\n}\n```",
        "postTime": 1684751614,
        "uid": 533915,
        "name": "_sublimetext_",
        "ccfLevel": 0,
        "title": "P4632"
    }
]