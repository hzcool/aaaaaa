[
    {
        "content": "- **\u5206\u6790**\n\n  \u8003\u8651**\u6700\u5c0f\u5272**\u3002\n  \n  \u53ef\u4ee5\u7528**\u603b\u548c\u51cf\u53bb\u6700\u5c0f\u6263\u9664\u5206\u6570**\u6765\u7b97\u7b54\u6848\u3002\n  \n  \u5bf9\u4e8e\u6bcf\u4e2a\u57ce\u5e02\uff0c\u53ef\u4ee5\u5206\u7ed9A\u6216\u8005B\u3002\u6240\u4ee5\u4e0d\u59a8\u8bbe\u7f6e\u4e00\u4e2a\u6e90\u70b9 $s$ \uff0c\u6c47\u70b9 $t$ \u3002**\u6e90\u70b9\u4ee3\u8868A\uff0c\u6c47\u70b9\u4ee3\u8868B\u3002**\n  \n  \u5373\u8fde\u8fb9 $(s,i,va_i)$ \u548c $(i,t,vb_i)$ \u3002\u518d\u8003\u8651\u57ce\u5e02\u4e0e\u57ce\u5e02\u4e4b\u95f4\u7684\u8fde\u8fb9\u3002\n  \n  \u4f46\u662f\u57ce\u5e02\u4e4b\u95f4\u7684\u8fde\u8fb9\u4f1a\u88ab\u4e24\u4e2a\u57ce\u5e02\u6240\u5c5eA\u6216B\u7684\u5f71\u54cd\u3002\n  \n  \u6240\u4ee5\u53ef\u4ee5\u5c06\u4e00\u4e9b\u8fb9\u6743\u9664\u4ee5 $2$ \uff0c\u5177\u4f53\u8fde\u8fb9\u5982\u4e0b\uff1a\n  \n  \u5bf9\u4e8e2\u4e2a\u57ce\u5e02\u5148\u5efa\u7acb**\u53cc\u5411\u8fb9**\uff1a$(u,v,\\frac{ea}{2}+\\frac{eb}{2}+ec)$ \u3002\n  \n  \u7136\u540e\u518d\u8fde\u8fb9\uff1a$(s,u,\\frac{ea}{2})(s,v,\\frac{ea}{2})(u,t,\\frac{eb}{2})(v,t,\\frac{eb}{2})$ \u3002\n  \n  \u8fd9\u6837\u5c31\u53ef\u4ee5\u5de7\u5999\u7684\u89e3\u51b3\u8fd9\u4e2a\u6240\u5c5eA\uff0cB\u7684\u60c5\u51b5\u4e86\u3002\n  \n  \u56e0\u4e3a\u6570\u636e\u53ef\u80fd**\u6709\u5947\u6570**\uff0c\u6240\u4ee5\u5f00\u59cb\u5148**\u5168\u90e8\u4e58\u4e8c**\u3002\n\n------------\n\n- **\u4ee3\u7801**\n\n  ``` cpp\n  #include<iostream>\n  #include<cstdio>\n  #include<cmath>\n  #include<queue>\n  #include<cstring>\n  using namespace std;\n  const int Maxn=100005,Maxm=800005;\n  const int inf=1e9;\n  struct edge{\n      int v,w,nx;\n  }e[Maxm];\n  int n,m,ne=-1,f[Maxn],deep[Maxn];\n  int cur[Maxn];\n  queue<int>q;\n  void read(int u,int v,int w)\n  {\te[++ne].v=v;\n      e[ne].w=w;\n      e[ne].nx=f[u];\n      f[u]=ne;\n  }\n  bool bfs(int s,int t)\n  {\tmemset(deep,0x7f,sizeof(deep));\n      while(!q.empty())q.pop();\n      for(int i=0;i<=n;i++)cur[i]=f[i];\n      deep[s]=0;\n      q.push(s);\n      while(!q.empty())\n      {\tint now=q.front();\n          q.pop();\n          for(int k=f[now];k!=-1;k=e[k].nx)\n              if(deep[e[k].v]>inf&&e[k].w)\n              {\tdeep[e[k].v]=deep[now]+1;\n                  q.push(e[k].v);\n              }\n      }\n      if(deep[t]<inf)return 1;\n      return 0;\n  }\n  int dfs(int now,int t,int limit)\n  {\tif(!limit||now==t)return limit;\n      int flow=0,x;\n      for(int i=cur[now];i!=-1;i=e[i].nx)\n      {\tcur[now]=i;\n          if(deep[e[i].v]==deep[now]+1)\n          {\tx=dfs(e[i].v,t,min(limit,e[i].w));\n              if(!x)continue;\n              flow+=x;\n              limit-=x;\n              e[i].w-=x;\n              e[i^1].w+=x;\n              if(!limit)break;\n          }\n      }\n      return flow;\n  }\n  int dinic(int s,int t)\n  {\tint maxflow=0;\n      while(bfs(s,t))maxflow+=dfs(s,t,inf);\n      return maxflow;\n  }\n  int main()\n  {\tint s,t,sum=0;\n      scanf(\"%d%d\",&n,&m);\n      for(int i=0;i<=n+1;i++)f[i]=-1;\n      s=0;t=n+1;\n      read(s,1,inf);\n      read(n,t,inf);\n      for(int i=2;i<=n-1;i++)\n      {\tint x;\n          scanf(\"%d\",&x);\n          x*=2;\n          sum+=x;\n          read(s,i,x);read(i,s,0);\n      }\n      for(int i=2;i<=n-1;i++)\n      {\tint x;\n          scanf(\"%d\",&x);\n          x*=2;\n          sum+=x;\n          read(i,t,x);read(t,i,0);\n      }\n      for(int i=1;i<=m;i++)\n      {\tint u,v,x1,x2,x3;\n          scanf(\"%d%d%d%d%d\",&u,&v,&x1,&x2,&x3);\n          x1*=2;x2*=2;x3*=2;\n          sum+=x1+x2;\n          read(u,v,(x1/2+x2/2+x3));\n          read(v,u,(x1/2+x2/2+x3));\n          read(s,u,x1/2);read(u,s,0);\n          read(s,v,x1/2);read(v,s,0);\n          read(u,t,x2/2);read(t,u,0);\n          read(v,t,x2/2);read(t,v,0);\n      }\n      n++;\n      printf(\"%d\\n\",(sum-dinic(s,t))/2);\n      return 0;\n  }\n  ```",
        "postTime": 1589469394,
        "uid": 39408,
        "name": "Rainy7",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4210 \u3010\u571f\u5730\u5212\u5206\u3011"
    },
    {
        "content": "\u5148\u6a21\u4e00\u4e0b\u697c\u4e0b\u5927\u4f6c\uff0c~~\u6ca1\u6709\u4ed6\u7684\u9898\u89e3\u6211\u90fd\u4e0d\u4f1a\u505a~~\n\n\u6211\u8fd9\u91cc\u6574\u4f53\u601d\u8def\u8ddf\u697c\u4e0b\u5927\u4f6c\u4e00\u6837\uff0c\u4e0d\u8fc7\u52a0\u5165\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u4f18\u5316\uff0c\u5c31\u662f\u5408\u5e76\u91cd\u8fb9\n\n\u6ce8\u610f\u5728\u5904\u7406\u70b9\u548c\u8fb9\u7684\u65f6\u5019\u90fd\u4ece\u6e90\u70b9\u5411\u67d0\u70b9\u8fde\u8fb9\uff0c\u4e5f\u4ece\u67d0\u70b9\u5230\u6c47\u70b9\u8fde\u8fb9\uff0c\u5982\u679c\u5206\u522b\u8fde\u8fb9\uff0c\n\u8fb9\u7684\u6570\u91cf\u662f2N+5M\uff0c\u4f46\u662f\u5408\u5e76\u4e0b\u518d\u8fde\uff0c\u8fb9\u7684\u6570\u91cf\u5c31\u964d\u5230\u4e862N+M,\u8dd1\u8d77\u6765\u98de\u5feb\n\n\n```cpp\n#include<stdio.h>\n#include<string.h>\ntypedef struct Es\n{\n    int v,d;\n    Es*f,*n;\n}Es;\nconst int S=10000;\nconst int T=10001;\nEs e[200000],*E=e;\nEs*lin[10002];\nint dep[10002];\nint queue[10002];\nint sud[10000];\nint utd[10000];\nvoid insert1(int u,int v,int d)\n{\n    *E=(Es){v,d,E+1,lin[u]};\n    lin[u]=E++;\n    *E=(Es){u,0,E-1,lin[v]};\n    lin[v]=E++;\n}\nvoid insert2(int u,int v,int d)\n{\n    *E=(Es){v,d,E+1,lin[u]};\n    lin[u]=E++;\n    *E=(Es){u,d,E-1,lin[v]};\n    lin[v]=E++;\n}\n\nbool bfs()\n{\n    memset(dep,-1,sizeof dep);\n    int h=0,t=1,tqf;\n    dep[queue[0]=S]=1;\n    while(h!=t)\n    {\n        tqf=queue[h++];\n        for(Es*p=lin[tqf];p;p=p->n)\n        if(p->d&&dep[p->v]==-1)\n        {\n            dep[p->v]=dep[tqf]+1;\n            queue[t++]=p->v;\n        }\n    }\n    return dep[T]!=-1;\n}\nint dfs(int tu,int min)\n{\n    if(tu==T)return min;\n    int ans=0,t;\n    for(Es*p=lin[tu];p&&min;p=p->n)\n    if(p->d&&dep[p->v]==dep[tu]+1)\n    {\n        ans+=t=dfs(p->v,min<p->d?min:p->d);\n        min-=t;\n        p->d-=t;\n        p->f->d+=t;\n    }\n    if(!ans)dep[tu]=-1;\n    return ans;\n}\nint match()\n{\n    int ans=0;\n    while(bfs())ans+=dfs(S,2000000000);\n    return ans;\n}\nint main()\n{\n    int N,M,i,tu,tv,Va,Vb,Ea,Eb,Ec,sum=0;\n    scanf(\"%d%d\",&N,&M);\n    for(i=1;i<N-1;i++)\n    {\n        scanf(\"%d\",&Va);\n        sum+=Va<<=1;\n        sud[i]+=Va;\n    }\n    for(i=1;i<N-1;i++)\n    {\n        scanf(\"%d\",&Vb);\n        sum+=Vb<<=1;\n        utd[i]+=Vb;\n    }\n    while(M--)\n    {\n        scanf(\"%d%d%d%d%d\",&tu,&tv,&Ea,&Eb,&Ec);\n        tu--;tv--;sum+=(Ea<<1)+(Eb<<1);\n        sud[tu]+=Ea;sud[tv]+=Ea;\n        utd[tu]+=Eb;utd[tv]+=Eb;\n        insert2(tu,tv,Ea+Eb+(Ec<<1));\n    }\n    sud[0]=2000000000;\n    utd[N-1]=2000000000;\n    for(i=0;i<N;i++)\n    {\n        insert1(S,i,sud[i]);\n        insert1(i,T,utd[i]);\n    }\n    printf(\"%d\",sum-match()>>1);\n}\n```\n\n\u6ca1\u5438\u6c27\u4e5f\u6ca1\u52a0\u5feb\u8bfb\uff0c\u4e5f\u6ca1\u6709inline\uff0cregister\u4ec0\u4e48\u7684\uff0c\u603b\u65f6\u95f4\u4ec5284ms\uff0c\u5408\u5e76\u8fb9\u4e4b\u540e\u786e\u5b9e\u795e\u901f",
        "postTime": 1524316152,
        "uid": 58279,
        "name": "cuking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4210 \u3010\u571f\u5730\u5212\u5206\u3011"
    },
    {
        "content": "\u4e00\u9053\u597d\u9898\uff0c\u4e3b\u8981\u96be\u70b9\u5c31\u662f\u6c42**\u4e0d\u540c\u5206\u7ec4\u7684\u8d1f\u8d21\u732e**\u3002\n\n\u5982\u679c\u5148\u4e0d\u8003\u8651\u4e24\u4e2a\u8282\u70b9\u4e0d\u540c\u96c6\u5408\u5e26\u6765\u7684\u8d1f\u8d21\u732e\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u662f\u5206\u7ec4\u95ee\u9898\u7684\u6a21\u677f\u3002\u5bf9\u4e8e\u4e24\u4e2a\u76f8\u540c\u96c6\u5408\u7684\u70b9\uff0c\u5efa\u7acb\u865a\u70b9 $x'$\uff0c\u4f7f\u5f97 $s \\to x'$ \u8fb9\u6743 $EA$\uff0c\u7136\u540e $x' \\to u$\uff0c$x' \\to v$ \u8fb9\u6743 $inf$\uff0c\u8fde\u5230 $t$ \u540c\u7406\u3002\n\n\u7136\u540e\u8003\u8651\u5c06\u8fd9\u4e2a\u8d1f\u8d21\u732e\u52a0\u8fdb\u6765\uff0c\u56e0\u4e3a\u4e0d\u80fd\u76f4\u63a5\u8868\u73b0\uff0c\u6240\u4ee5\u8981\u5c06\u5176\u8f6c\u5316\u4e3a\u76f8\u540c\u5206\u7ec4\u7684\u8d21\u732e\u3002\u56e0\u4e3a\u6700\u540e\u7684\u7b54\u6848\u662f $sum - mincut$\uff0c\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230**\u5728\u8fd9\u4e2a\u6700\u5c0f\u5272\u4e2d\u5c06\u8d21\u732e\u8f6c\u4e3a\u6b63\uff0c\u7136\u540e\u5728\u6743\u503c\u548c\u4e2d\u4e0d\u52a0\u4e0a\u5b83\uff0c\u6700\u540e\u7684\u8d21\u732e\u5c31\u662f\u8d1f\u7684\u4e86**\uff08\u76f8\u5f53\u4e8e $sum - (mincut + EC)=sum - mincut - EC$\uff09\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u601d\u8def\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u5c31\u5f88\u597d\u7406\u89e3\u4e86\u3002\u5c06\u4e24\u4e2a\u865a\u70b9 $x',y'$ \u4e0e\u6e90\u70b9\u6216\u6c47\u70b9\u7684 $s \\to x'$\uff0c$y' \\to t$ \u4e2d\u7684\u8fb9\u6743\u90fd\u52a0\u4e0a $EC$\uff0c\u7136\u540e\u5728 $sum$ \u4e2d\u52a0\u4e0a**\u4e00\u4e2a** $EC$\u3002\u6b64\u65f6\uff0c\u82e5\u8fd9\u4e24\u4e2a\u8282\u70b9\u5728\u540c\u4e00\u96c6\u5408\uff0c\u90a3\u4e48 $mincut$ \u4e2d\u4f1a\u6709\u4e00\u4e2a $EC$\uff0c$sum$ \u4e2d\u591a\u52a0\u7684\u4e00\u4e2a $EC$ \u548c\u5b83\u6b63\u597d\u62b5\u6d88\u4e86\u3002\u82e5\u5b83\u4eec\u4e0d\u5728\u540c\u4e00\u96c6\u5408\uff0c\u90a3\u4e48 $mincut$ \u4e2d\u4f1a\u6709\u4e24\u4e2a $EC$\uff0c\u6b64\u65f6\u7684\u8d21\u732e\u6b63\u597d\u591a\u4e86\u4e2a $-EC$\uff0c\u5de7\u5999\u5730\u5c06\u5b83\u7684\u8d1f\u8d21\u732e\u8868\u793a\u51fa\u6765\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define _rep(i, x, y) for(int i = x; i <= y; ++i)\n#define _req(i, x, y) for(int i = x; i >= y; --i)\n#define _rev(i, u) for(int i = head[u]; i; i = e[i].nxt)\n#define pb(x) push_back(x)\n#define mst(f, i) memset(f, i, sizeof f)\nusing namespace std;\n#ifdef ONLINE_JUDGE\n#define debug(...) 0\n#else\n#define debug(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)\n#endif\nnamespace fastio{\n    template<typename T> inline void read(T &t){\n        T x = 0, f = 1;\n        char c = getchar();\n        while(!isdigit(c)){\n            if(c == '-') f = -f;\n            c = getchar();\n        }\n        while(isdigit(c)) x = x * 10 + c - '0', c = getchar();\n        t = x * f;\n    }\n    template<typename T, typename ... Args> inline void read(T &t, Args&... args){\n        read(t);\n        read(args...);\n    }\n    template<typename T> void write(T t){\n        if(t < 0) putchar('-'), t = -t;\n        if(t >= 10) write(t / 10);\n        putchar(t % 10 + '0');\n    }\n    template<typename T, typename ... Args> void write(T t, Args... args){\n        write(t), putchar(' '), write(args...);\n    }\n    template<typename T> void writeln(T t){\n        write(t);\n        puts(\"\");\n    }\n    template<typename T> void writes(T t){\n        write(t), putchar(' ');\n    }\n};\nusing namespace fastio;\ntypedef long long ll;\ntypedef pair<int, int> PII;\nconst int N = 1e6 + 5, inf = 2e9, M = 105;\nint n, m, k, s, t;\nint ecnt = 1, head[N];\nstruct edge{\n\tint v, w, nxt;\n}e[N << 1];\nint in[N];\nvoid add(int u, int v, int w){\n\te[++ecnt] = edge{v, w, head[u]}, head[u] = ecnt;\n\te[++ecnt] = edge{u, 0, head[v]}, head[v] = ecnt;\n}\nint cur[N], num[N];\nbool bfs(int s, int t){\n\tmst(num, 0);\n\tqueue<int> q;\n\tnum[s] = 1, cur[s] = head[s], q.push(s);\n\twhile(q.size()){\n\t\tint u = q.front(); q.pop();\n\t\t_rev(i, u){\n\t\t\tint v = e[i].v;\n\t\t\tif(e[i].w && !num[v]){\n\t\t\t\tnum[v] = num[u] + 1;\n\t\t\t\tcur[v] = head[v];\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn num[t];\n}\nint dfs(int u, int in){\n\tint out = 0;\n\tif(u == t) return in;\n\tfor(int i = cur[u]; i && in; i = e[i].nxt){\n\t\tint v = e[i].v;\n\t\tcur[u] = i;\n\t\tif(e[i].w && num[v] == num[u] + 1){\n\t\t\tint d = dfs(v, min(in, e[i].w));\n\t\t\tin -= d, out += d;\n\t\t\te[i].w -= d, e[i ^ 1].w += d;\n\t\t}\n\t}\n\tif(!out) num[u] = 0;\n\treturn out;\n}\nint Dinic(){\n\tint Flow = 0;\n\twhile(bfs(s, t)) Flow += dfs(s, inf);\n\treturn Flow;\n}\nint sum, cnt;\nint main(){\n\tread(n, m), s = 0, t = n + m * 2 + 1;\n\tadd(s, 1, inf), add(n, t, inf);\n\t_rep(i, 2, n - 1){\n\t\tint x; read(x), sum += x;\n\t\tadd(s, i, x);\n\t}\n\t_rep(i, 2, n - 1){\n\t\tint x; read(x), sum += x;\n\t\tadd(i, t, x);\n\t}\n\tcnt = n;\n\t_rep(i, 1, m){\n\t\tint x, y, a, b, c; read(x, y, a, b, c), sum += a + b + c;\n\t\tint cur1 = ++cnt, cur2 = ++cnt;\n\t\tadd(s, cur1, a + c), add(cur2, t, b + c);\n\t\tadd(cur1, x, inf), add(cur1, y, inf), add(x, cur2, inf), add(y, cur2, inf);\n\t}\n\twriteln(sum - Dinic());\n    return 0;\n}\n```",
        "postTime": 1679195901,
        "uid": 573341,
        "name": "MiniLong",
        "ccfLevel": 0,
        "title": "P4210 \u571f\u5730\u5212\u5206"
    },
    {
        "content": "\u9898\u5916\u8bdd\uff1a\u8fd9\u5176\u5b9e\u662f\u4e00\u9053\u633a\u597d\u7684\u9898\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u505a\u7684\u4eba\u8fd9\u4e48\u5c11 ~~\uff08\u4e00\u9898\u591a\u89e3\u5e94\u8be5\u5c31\u7b97\u597d\u9898\u4e86\u5427\uff09~~\n\n\u6211\u6765\u63d0\u4f9b\u4e00\u79cd\u65b0\u7684\u601d\u8def\uff0c\u4e0e\u73b0\u6709\u7684\u9898\u89e3\u5904\u7406\u65b9\u5f0f\u90fd\u4e0d\u600e\u4e48\u4e00\u6837\u3002\n\n\u9996\u5148\uff0c\u7ed9\u57ce\u5e02\u5212\u5206\u7684\u5efa\u8fb9\u90fd\u662f\u4e00\u6837\u7684\uff1a\u5bf9\u4e8e$ \\forall i \\in [2,n-1] $\uff0c\u5efa\u8fb9$s \\to i $\u53ca $i \\to t$ \uff0c\u8fb9\u6743\u5206\u522b\u4e3a $VA_i$,$VB_i$\u3002\u7136\u540e\u5bf9\u4e8e$1$,$n$,\u5efa\u8fb9$s \\to 1 $\u548c$n \\to t $\uff0c\u8fb9\u6743\u5747\u4e3a $+\\infty$\uff0c\u9632\u6b62\u5176\u88ab\u5272\u6389\n\n\u6700\u6838\u5fc3\u7684\u601d\u8def\u662f\u5173\u4e8e\u8fb9\u8be5\u600e\u4e48\u5904\u7406\uff0c\u8fd9\u91cc\u6211\u4eff\u9020\u4e86[P1361](https://www.luogu.com.cn/problem/P1361)\u7684\u5efa\u8fb9\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u5efa\u4e00\u4e2a\u865a\u62df\u70b9\uff0c\u5f80\u5176\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u90fd\u7531\u865a\u62df\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a$+\\infty$\u7684\u8fb9\uff0c\u540c\u6837\u9632\u6b62\u5176\u88ab\u5272\u6389\n\n\u7136\u540e\u5c31\u662f\u5bf9\u4e8e$EC_i$\u7684\u5904\u7406\u4e86\uff0c\u5176\u503c\u4e3a\u8d1f\u6570\uff0c\u65e0\u6cd5\u6700\u5c0f\u5272\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u79cd\u601d\u8def\uff0c\u5c31\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u6700\u5148\u5c31\u628a\u5b83\u7684\u8d21\u732e\u51cf\u53bb$EC_i$\uff0c\u7136\u540e\u518d\u628a$EA_i$\u548c$EB_i$\u5206\u522b\u52a0\u4e0a$EC_i$\uff0c\u7136\u540e\u4f60\u5c31\u4f1a\u53d1\u73b0\uff0c\u5047\u5982\u8fd9\u6761\u8fb9\u6ca1\u6709\u8d21\u732e\uff0c\u4ed6\u7684$EC_i$\u5df2\u7ecf\u88ab\u51cf\u6389\u4e86\uff0c\u4e0d\u7528\u7ba1\u5b83\uff0c\u7136\u540e\u5047\u5982\u6709\u8d21\u732e\uff0c\u4e00\u5b9a\u662f$EA_i$\u548c$EB_i$\u4e8c\u8005\u5176\u4e00\u3002\u6211\u4eec\u5df2\u7ecf\u9884\u5148\u52a0\u4e0a\u4e86$EC_i$\uff0c\u4e24\u8005\u6b63\u597d\u76f8\u62b5\u6d88\uff0c\u76f8\u5f53\u4e8e$EC_i$\u7684\u5f71\u54cd\u88ab\u6d88\u9664\u4e86\u3002\n\n\u5230\u8fd9\u91cc\uff0c\u601d\u8def\u4e5f\u5c31\u6e05\u6670\u4e86\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u9996\u5148\u628a\u5b83\u7684\u8d21\u732e\u4ece\u7b54\u6848\u4e2d\u51cf\u53bb$EC_i$\uff0c\u7136\u540e\u628a$EA_i$\u548c$EB_i$\u5206\u522b\u52a0\u4e0a$EC_i$\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u7c7b\u6bd4P1361\u7684\u5efa\u56fe\u4e86\uff1a\u6bcf\u6761\u8fb9\u5efa\u4e24\u4e2a\u865a\u62df\u70b9\uff0c\u5206\u522b\u4ee3\u8868\u4e24\u4e2a\u70b9\u90fd\u5728A\u96c6\u5408\u6216B\u96c6\u5408\u3002\u7136\u540e\u5206\u522b\u5f80\u5bf9\u5e94\u70b9\u8fde\u6b63\u65e0\u7a77\u7684\u8fb9\uff08\u4e24\u4e2a\u865a\u62df\u70b9\u65b9\u5411\u76f8\u53cd\uff09\uff0c\u6e90\u6c47\u70b9\u5206\u522b\u5f80\u865a\u62df\u70b9\u8fde\u8d21\u732e\u5927\u5c0f\u7684\u8fb9\u3002\u6700\u540e\u8bbe$sum=\\sum_{i=2}^{n-1}VA_i+VB_i $,\u5219$sum-\\sum EC_i-Maxflow()$\u5373\u4e3a\u7b54\u6848\n\n\u8fd9\u65b9\u6cd5\u590d\u6742\u5ea6\u597d\u50cf\u6ca1\u6709\u5176\u4ed6\u9898\u89e3\u9664\u4ee52\u7684\u601d\u8def\u4f18\uff0c\u7a0d\u5fae\u5361\u5361\u5e38\u53ea\u80fd\u5230940ms\uff0c\u4f46\u591a\u4e00\u79cd\u601d\u8def\u8fd8\u662f\u4e0d\u9519\u7684\u3002\n\n\u4ee3\u7801\u6709\u70b9\u4e11\uff0c\u5c31\u4e0a\u4e00\u6bb5\u5173\u952e\u4ee3\u7801\uff08\u5904\u7406\u8fb9\u90a3\u91cc\uff09\u5c31\u884c\u4e86\n\n```cpp\nfor(int i=1;i<=m;i++)\n{\n\tint a=read(),b=read(),x=read(),y=read(),z=read();//\u6570\u636e\u8bfb\u5165\n    \n\tx+=z,y+=z;\n\tans+=x+y-z;//\u4e0a\u9762\u63d0\u5230\u7684\u5904\u7406\n    \n\tadd(n+i*2-1,a,inf);\n\tadd(n+i*2-1,b,inf);\n\tadd(s,n+i*2-1,x);//\u7b2c\u4e00\u4e2a\u865a\u62df\u70b9\uff08\u540c\u5c5eA\u96c6\u5408\uff09\u7684\u5efa\u8fb9\n    \n\tadd(a,n+i*2,inf);\n\tadd(b,n+i*2,inf);\n\tadd(n+i*2,t,y);//\u7b2c\u4e8c\u4e2a\u865a\u62df\u70b9\uff08\u540c\u5c5eB\u96c6\u5408\uff09\u7684\u5efa\u8fb9\n}\n```\n",
        "postTime": 1609160431,
        "uid": 203743,
        "name": "\u6ed1\u5927\u7a3d",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4210 \u3010\u571f\u5730\u5212\u5206\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u660e\u5929\u5c31\u8981 CSP \u4e86\uff0c\u5e0c\u671b\u6da8\u70b9 RP\u3002  \n[\u5982\u679c\u4f60\u8981\u770b\u9898\uff0c\u8bf7\u70b9\u51fb\u8fd9\u91cc](https://www.luogu.com.cn/problem/P4210)\uff0c\u6216\u8005\u770b\u4e0b\u9762\u3002\n\n## \u9898\u76ee\u63cf\u8ff0\n\u5bf9\u4e8e\u4e00\u4e9b\u70b9\uff0c\u5c06\u4ed6\u4eec\u5212\u5206\u5230\u4e24\u4e2a\u96c6\u5408\uff0c\u5212\u5206\u5230\u67d0\u4e2a\u96c6\u5408\u4f1a\u6709\u7279\u5b9a\u7684\u6536\u76ca\uff0c\u67d0\u4e24\u4e2a\u70b9\u5212\u5206\u5230\u540c\u4e00\u96c6\u5408\u4f1a\u6709\u989d\u5916\u6536\u76ca\uff0c\u4f46\u662f\u5206\u5728\u4e0d\u540c\u7684\u96c6\u5408\u4f1a\u989d\u5916\u7684\u4ee3\u4ef7\uff08\u51cf\u5206\u9879\uff09\u3002\u8be2\u95ee\u6700\u5927\u6536\u76ca\u3002\n\n## \u89e3\u9898\u601d\u8def\n\u770b\u5230\u9898\u76ee\u7684\u7b2c\u4e00\u773c\u2026\u2026\u8fd9\u4e0d [\u6587\u7406\u5206\u79d1](https://www.luogu.com.cn/problem/P4313) \u5417\u3002  \n\u8003\u8651\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\uff0c\u5148\u5c06\u6240\u6709\u6536\u76ca\u52a0\u8d77\u6765\uff0c\u5c06\u5272\u6389\u4e00\u8fb9\u8868\u793a\u4e0d\u9009\u8fd9\u4e2a\u6761\u4ef6\u7684\u4ee3\u4ef7 \u6216 \u989d\u5916\u4ee3\u4ef7 $(Ec)$\uff0c\u603b\u6743\u503c\u548c\u51cf\u53bb\u6700\u5c0f\u7684\u4ee3\u4ef7\u5c31\u662f\u6700\u5927\u6536\u76ca\u3002\n\n\u4e0b\u9762\u8003\u8651\u5efa\u56fe\uff1a  \n\u5bf9\u4e8e $Ea$ \u548c $Eb$\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u6587\u7406\u5206\u79d1\u4e00\u6837\uff0c\u5bf9\u6bcf\u4e00\u5bf9\u70b9\u5efa\u4e00\u4e2a\u989d\u5916\u7684\u70b9\uff0c\u7136\u540e\u8fd9\u4e2a\u989d\u5916\u7684\u70b9\u4e0e\u8fd9\u4e00\u5bf9\u70b9\u8fde\u4e0a $inf$ \u7684\u8fb9\uff0c\u9632\u6b62\u9694\u65ad\uff0c\u628a $Ea$ \u548c $Eb$ \u5206\u522b\u4f5c\u4e3a\u4e0e $S$ \u548c $T$ \u8fde\u8fb9\u7684\u6d41\u91cf\uff0c\u5272\u6389\u5b83\u5c31\u4ee3\u8868\u6211\u4e0d\u6253\u7b97\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u3002  \n\u5bf9\u4e8e $Ec$ \u6765\u8bf4\uff0c\u6211\u4eec\u5c31\u5728\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $Ec$ \u7684\uff0c\u5f53\u8fd9\u4e00\u5bf9\u70b9\u4e00\u4e2a\u5f52\u5728\u4e86 $S$\uff0c\u53e6\u4e00\u4e2a\u5f52\u5728\u4e86 $T$\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u4f1a\u88ab\u9694\u65ad\uff0c\u8868\u793a\u989d\u5916\u4ee3\u4ef7\u3002  \n\u56fe\u5efa\u51fa\u6765\u662f\u8fd9\u6837\u7684\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/rneq5gj7.png)  \n\u4e24\u4e2a\u70b9\u90fd\u88ab\u5206\u5230\u4e86 $S$:\n![](https://cdn.luogu.com.cn/upload/image_hosting/qsc45t7r.png)  \n\u4e24\u4e2a\u70b9\u90fd\u88ab\u5206\u5230\u4e86 $T$:\n![](https://cdn.luogu.com.cn/upload/image_hosting/egrk4r8s.png)  \n\u4e24\u4e2a\u70b9\u4e00\u4e2a\u5206\u5230\u4e86 $S$\uff0c\u4e00\u4e2a\u5206\u5230\u4e86 $T$:\n![](https://cdn.luogu.com.cn/upload/image_hosting/yimjsouv.png)  \n\u7136\u540e\u5c31\u662f\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09\u7684\u677f\u5b50\u4e86\u3002\n\n### Code\n```cpp\n#define Aniciry\tMeteorshower_Y\n#include<iostream>\n#include<cstring>\n#include<climits>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int N = 1e4+10;\nconst int M = 4e4+10;\nconst int inf = 0x3f3f3f3f;\nnamespace Netflow\n{\n    struct edge{\n        int from, to;\n        int flow, next;\n    }a[(N+M*8)<<2];\n    int head[N+M*3], cnt = 1;\n    int vis[M*3], s, t, tot;\n    auto solve() -> int;\n    auto bfs(int s, int t) -> int;\n    auto dinic(int x, int flow) -> int;\n    auto add_edge(int from, int to, int flow) -> void;\n    auto Add_edge(int from, int to, int flow) -> void;\n}\nusing namespace Netflow;\nint n, m, all, va[N], vb[N];\nint x, y, EA, EB, EC;\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    Netflow::s = n+1; Netflow::t = s+1; Netflow::tot = t;\n    for(int i = 2; i < n; i += 1) scanf(\"%d\", &va[i]);\n    for(int i = 2; i < n; i += 1) scanf(\"%d\", &vb[i]);\n    for(int i = 2; i < n; i += 1) all += va[i] + vb[i];\n    for(int i = 2; i < n; i += 1) add_edge(s, i, va[i]);\n    for(int i = 2; i < n; i += 1) add_edge(i, t, vb[i]);\n    for(int i = 1; i <= m; i += 1)\n    {\n        scanf(\"%d%d\", &x, &y);\n        scanf(\"%d%d%d\", &EA, &EB, &EC);\n        all += EA + EB;   \n        \n        tot += 1; add_edge(s, tot, EA);\n        add_edge(tot, x, inf); add_edge(tot, y, inf);\n        \n        tot += 1; add_edge(tot, t, EB);\n        add_edge(x, tot, inf); add_edge(y, tot, inf);\n        \n        add_edge(x, y, EC); add_edge(y, x, EC);\n    }\n    add_edge(s, 1, inf); add_edge(n, t, inf);\n    printf(\"%d\", all-solve());\n    return 0;\n}\nnamespace Netflow\n{\n    auto solve() -> int\n    {\n        int maxflow = 0, nowflow;\n        while(bfs(s, t) == true)\n            while((nowflow = dinic(s, inf)))\n                maxflow += nowflow;\n        return maxflow;\n    }\n    auto bfs(int s, int t) -> int\n    {\n        memset(vis, 0, sizeof(vis));\n        queue<int> q; q.push(s);\n        vis[s] = 1; int x, y;\n        while(!q.empty())\n        {\n            x = q.front(); q.pop();\n            for(int i = head[x]; i; i = a[i].next)\n            {\n                y = a[i].to;\n                if(!vis[y] and a[i].flow)\n                {\n                    vis[y] = vis[x]+1;\n                    if(y == t) return true;\n                    q.push(y);\n                }\n            }\n        }\n        return false;\n    }\n    auto dinic(int x, int flow) -> int\n    {\n        if(x == t) return flow;\n        int rest = flow, y, k;\n        for(int i = head[x]; i; i = a[i].next)\n        {\n            y = a[i].to;\n            if(vis[y] == vis[x]+1 and a[i].flow)\n            {\n                k = dinic(y, min(rest, a[i].flow));\n                if(!k) vis[y] = 0;\n                a[i].flow -= k;\n                a[i^1].flow += k;\n                if(!(rest -= k)) break;\n            }\n        }\n        return flow-rest;\n    }\n    auto add_edge(int from, int to, int flow) -> void\n    {\n        Add_edge(from, to, flow);\n        Add_edge(to, from, 0);\n    }\n    auto Add_edge(int from, int to, int flow) -> void\n    {\n        cnt += 1;\n        a[cnt].from = from;\n        a[cnt].to = to;\n        a[cnt].flow = flow;\n        a[cnt].next = head[from];\n        head[from] = cnt;\n    }\n}\n```\n\n### \u7ed3\u8bed\n\u6700\u540e\u5728\u8fd9\u91cc\u795d\u5929\u4e0b OIer CSP RP++  \n\\\u5b8c\u7ed3\u6492\u82b1/",
        "postTime": 1666924094,
        "uid": 239164,
        "name": "Meteorshower_Y",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4210 \u571f\u5730\u5212\u5206"
    },
    {
        "content": "## \u5206\u6790\n\n\u9898\u76ee\u76f8\u5f53\u4e8e\u7ed9\u6bcf\u4e2a\u70b9\u5212\u5206\u6240\u5c5e\u96c6\u5408\uff0c\u5e76\u6c42\u51fa\u6240\u6709\u5212\u5206\u65b9\u6848\u4e2d\u7684\u6700\u5927\u4ef7\u503c\u3002\n\n\u8fd9\u662f\u4e00\u7c7b\u6bd4\u8f83\u7ecf\u5178\u7684\u6700\u5c0f\u5272\u6a21\u578b\uff0c\u4e8e\u662f\u8003\u8651\u6700\u5c0f\u5272\uff0c\u5373\u5c06\u7b54\u6848\u8f6c\u5316\u4e3a\u6240\u6709\u7684\u5f97\u5206\u51cf\u53bb\u6700\u5c11\u7684\u53d1\u751f\u51b2\u7a81\u7684\u5f97\u5206\u3002\n\n\u4ee5\u4e0b\u8bbe $S$ \u96c6\u5408\u4e3a\u9898\u76ee\u4e2d\u88ab\u5212\u5206\u5230 $A$ \u4e2d\u7684\u70b9, $T$ \u96c6\u5408\u4e3a\u9898\u76ee\u4e2d\u88ab\u5212\u5206\u5230 $B$ \u4e2d\u7684\u70b9\u3002\n\n\u9996\u5148\u6bcf\u4e2a\u70b9 $i$ \u88ab\u5212\u5206\u5230 $S$ \u5177\u6709 $va_i$ \u7684\u4ef7\u503c\uff0c\u6211\u4eec\u5c31\u8fde\u4e00\u6761 $S \\stackrel{va_i}{\\longrightarrow} i$ \u7684\u8fb9\uff0c\u4ee3\u8868\u5c06 $i$ \u5272\u79bb $S$ \u7684\u4ee3\u4ef7\u4e3a $va_i$, $T$ \u540c\u7406\u3002\n\n\u7136\u540e\u5c31\u662f\u6bcf\u6761\u8fb9\u7684\u9650\u5236\uff0c\u8fd9\u91cc\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u96c6\u5408\u5185\u5c31\u6709\u4ef7\u503c\u7684\u9650\u5236\u975e\u5e38\u7c7b\u4f3c\u4e8e [P4313 \u6587\u7406\u5206\u79d1](https://www.luogu.com.cn/problem/P4313)\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u9053\u9898\u7684\u601d\u8def\u5957\u8fc7\u6765: \u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u65b0\u5efa\u4e24\u4e2a\u8282\u70b9 $e, e'$\uff0c\u5206\u522b\u7528\u6765\u8868\u793a $x,y$ \u540c\u65f6\u5212\u5206\u5728 $S$ \u548c $T$ \u7684\u8d21\u732e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fde $S \\stackrel{ea}{\\longrightarrow} e, e \\stackrel{\\inf}{\\longrightarrow} x, e \\stackrel{\\inf}{\\longrightarrow} y$ \u4e09\u6761\u8fb9\u4ee3\u8868\u5982\u679c $x,y$ \u5176\u4e2d\u4e00\u4e2a\u6ca1\u5212\u5206\u5728 $S$ \u4e2d\uff0c\u5c31\u9700\u8981\u82b1\u8d39 $ea$ \u7684\u4ee3\u4ef7\uff1b$T$ \u8fd9\u8fb9\u540c\u7406: $x \\stackrel{\\inf}{\\longrightarrow} e', y \\stackrel{\\inf}{\\longrightarrow} e', e' \\stackrel{eb}{\\longrightarrow} T$\u3002\n\n\u6700\u6709\u8fd8\u6709\u4e2a\u9650\u5236\u662f\u5982\u679c $x,y$ \u5904\u5728\u4e0d\u540c\u96c6\u5408\u5185\u9700\u8981\u989d\u5916\u7684 $ec$ \u7684\u4ee3\u4ef7\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u8fde\u4e0a $x \\stackrel{ec}{\\longleftrightarrow} y$ \u7684\u8fb9\u8fbe\u5230\u9650\u5236\u3002\n\n\u6700\u540e\u8dd1\u4e00\u4e2a\u6700\u5c0f\u5272\u5373\u53ef\u5f97\u51fa\u7b54\u6848\uff0c\u6b64\u505a\u6cd5\u4e0e\u8fb9\u6743\u7684\u5947\u5076\u6027\u65e0\u5173\uff0c\u4e14\u4e0d\u9700\u8981\u591a\u4f59\u7684\u8f6c\u5316\uff0c\u4f46\u662f\u8fde\u8fb9\u6570\u8f83\u591a\uff0c\u5c5e\u4e8e\u5957\u8def\u578b\u505a\u6cd5\u7f62\u3002\n\n## Code\n\n```c++\n#include <climits>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\nusing namespace std;\n\nconst int N = 1e4+5;\nconst int M = 4e4+10;\nconst int INF = 0x3f3f3f3f;\n\nnamespace netflow {\n    struct edge { \n        int to, next;\n        int flow;\n    } e[(N*2+M*8)*2];\n    int head[N+M*2], ecnt = 1;\n    int dis[N+M*2], cur[N+M*2];\n    int S, T;\n    int dinic();\n    void add_edge(int a, int b, int f);\n}\nusing namespace netflow;\n\nint n, m; int ans;\n\nint main()\n{\n    cin >> n >> m;\n    S = n+m*2+1, T = n+m*2+2;\n    add_edge(S, 1, INF);\n    add_edge(n, T, INF);\n    for(int i = 2; i <= n-1; i++)\n    {\n        int va; cin >> va;\n        add_edge(S, i, va);\n        ans += va;\n    }\n    for(int i = 2; i <= n-1; i++)\n    {\n        int vb; cin >> vb;\n        add_edge(i, T, vb);\n        ans += vb;\n    }\n    for(int i = 1; i <= m; i++)\n    {\n        int a, b; int ea, eb, ec;\n        cin >> a >> b >> ea >> eb >> ec;\n        add_edge(S, n+i, ea);\n        add_edge(n+i, a, INF);\n        add_edge(n+i, b, INF);\n        \n        add_edge(a, n+m+i, INF);\n        add_edge(b, n+m+i, INF);\n        add_edge(n+m+i, T, eb);\n        \n        add_edge(a, b, ec);\n        add_edge(b, a, ec);\n        ans += ea+eb;\n    }\n    ans -= dinic();\n    cout << ans << \"\\n\";\n}\n\nnamespace netflow {\n    bool bfs(int S, int T)\n    {\n        memcpy(cur, head, sizeof(cur));\n        memset(dis, 0, sizeof(dis));\n        queue<int> q; int x;\n        q.push(S); dis[S] = 1;\n        while(!q.empty())\n        {\n            x = q.front(); q.pop();\n            for(int i = head[x]; i; i = e[i].next)\n            {\n                if(e[i].flow and !dis[e[i].to])\n                {\n                    dis[e[i].to] = dis[x]+1;\n                    q.push(e[i].to);\n                }\n            }\n        }\n        return dis[T];\n    }\n    int dfs(int x, int flow)\n    {\n        if(x == T) return flow;\n        int rest = flow; int i;\n        for(i = cur[x]; i; i = e[i].next)\n        {\n            if(e[i].flow and dis[e[i].to] == dis[x]+1)\n            {\n                int k = dfs(e[i].to, min(rest, e[i].flow));\n                if(!k) dis[e[i].to] = 0;\n                e[i].flow -= k, e[i^1].flow += k;\n                if(!(rest -= k)) break;\n            }\n        }\n        return cur[x] = i, flow-rest;\n    }\n    int dinic()\n    {\n        int maxflow = 0;\n        while(bfs(S, T))\n            maxflow += dfs(S, INF);\n        return maxflow;\n    }\n    void add_edge(int a, int b, int f)\n    {\n        e[++ecnt] = {b, head[a], f}; head[a] = ecnt;\n        e[++ecnt] = {a, head[b], 0}; head[b] = ecnt;\n    }\n}\n```\n",
        "postTime": 1666881092,
        "uid": 239167,
        "name": "Ptilopsis_w",
        "ccfLevel": 7,
        "title": "P4210 \u571f\u5730\u5212\u5206 \u9898\u89e3"
    },
    {
        "content": "## \u89e3\u9898\u601d\u8def\uff1a\n\u4e8c\u8005\u5fc5\u53d6\u5176\u4e00\uff0c\u8fd9\u4e2a\u5f88\u6709\u6700\u5c0f\u5272\u7684\u610f\u601d\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u5c06A\u56fd\u662f\u6e90\u70b9\uff0cB\u56fd\u4e3a\u6c47\u70b9\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9$P_i$\uff0c\u8bbe\u5176\u5206\u5230A\u56fd\u7684\u4ef7\u503c\u4e3a$V_{ai}$\uff0c\u5206\u5230B\u56fd\u7684\u4ef7\u503c\u4e3a$V_{bi}$\u3002\n\n\u53d6A\u5219\u65e0\u6cd5\u53d6B\uff0c\u8fd9\u5c31\u662f\u6700\u5c0f\u5272\u6a21\u578b\u4e86\u3002\n\n\u90a3\u4e48\u4ece\u6e90\u70b9\u8fde\u5411$P_{i}$\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u5bb9\u91cf\u4e3a$V_{ai}$\uff0c\u90a3\u4e48\u4ece$P_i$\u5411\u6c47\u70b9\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u5bb9\u91cf\u4e3a$V_{bi}$\uff0c\n\n\u8fd9\u6837\u70b9\u7684\u4e8c\u9009\u4e00\u5c31\u5b9e\u73b0\u4e86\uff0c\u53ea\u9700\u8981\u7528$\\sum{V_{ai}+V_{bi}}$\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u53ef\u4ee5\u5566\u3002\n\n\u4e0b\u9762\u662f\u8fb9\u7684\u4e09\u9009\u4e00\uff1a(\u8bbe\u4e00\u6761\u8fb9\u8fdeA\u56fd\u57ce\u5e02\u8d21\u732e\u4e3a$C_{ai}$,\u8fdeB\u56fd\u57ce\u5e02\u8d21\u732e\u4e3a$C_{bi}$\uff0c\u8fde\u63a5\u4e24\u4e2a\u56fd\u5bb6\u70b9\u60e9\u7f5a\u4e3a$C_{ci}$\uff09\n\n\u4e24\u4e2a\u70b9\u82e5\u90fd\u9009A\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5272\u53bb\u8fd9\u6761\u8fb9\u8fde\u63a5B\u56fd\u4e24\u4e2a\u57ce\u5e02\u70b9\u8d21\u732e\u3002\n\n\u9009A\u76f8\u5f53\u4e8e\u5272\u53bb\u57ce\u5e02\u9009B\u56fd\u70b9\u8d21\u732e\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u5728\u6c47\u70b9\u7aef\u53d6\u6d88\u4e86\u6d41\u91cf\u3002\n\n\u90a3\u4e48\u73b0\u5728\u9650\u5236\u4e00\u4e0b\uff0c\u8981\u6c42\u5176\u53d6\u6d88\u6c47\u70b9\u7aef\u6d41\u91cf\u5219\u5fc5\u987b\u53d6\u6d88\u8fd9\u6761\u8fb9\u6d41\u91cf\u3002\n\n\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u5728\u539f\u6765\u4e24\u4e2a\u57ce\u5e02\u5411\u6c47\u70b9\u8fde\u8fb9\u5904\u5411\u6c47\u70b9\u91cd\u65b0\u8fde\u8fb9\u3002\n\n\u7531\u4e8e\u4e24\u4e2a\u70b9\u90fd\u5fc5\u987b\u9650\u5236\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u5728\u4e24\u4e2a\u70b9\u90fd\u5411\u6c47\u70b9\u8fde$\\frac{C_{bi}}{2}$\u7684\u8fb9\u3002\n\n\u540c\u7406\u4ece\u6e90\u70b9\u8fde\u5411\u8fb9\u7684\u4e24\u7aef\u70b9$\\frac{C_{ai}}{2}$\u7684\u8fb9\u3002\n\n\u6240\u4ee5\u5728\u7b54\u6848\u4e0a\u52a0\u4e0a$\\sum{C_{ai}+C_{bi}}$\u6700\u540e\u51cf\u53bb\u6700\u5c0f\u5272\u3002\n\n\u8003\u8651\u60e9\u7f5a\u6761\u4ef6\u3002\n\n\u6b64\u65f6\u4e3a\u8fb9\u7684\u4e24\u7aef\u4e00\u4e2a\u5272\u6e90\uff0c\u4e00\u4e2a\u5272\u6c47\u3002\n\n\u6b64\u65f6\u4e3a\u4e86\u4fdd\u8bc1\u51fa\u73b0\u5272\uff0c\u4fdd\u7559\u4e0e\u6c47\u70b9\u8fde\u8fb9\u7aef\u5fc5\u987b\u65ad\u5f00\u6240\u6709\u4e0e\u6e90\u70b9\u8fde\u8fb9\u3002\n\n\u6240\u4ee5\u6b64\u65f6\u6700\u5c0f\u5272\u4e2d\u4e00\u5b9a\u5b58\u5728$\\frac{C_{ai}}{2}$\uff0c\u4e5f\u5c31\u662f\u8fd9\u6761\u8fb9\u5b58\u5728\u65f6\u4e0e\u6e90\u70b9\u7684\u9644\u52a0\u8fb9\u3002\n\n\u540c\u7406\uff0c\u6700\u5c0f\u5272\u4e2d\u4e5f\u5b58\u5728$\\frac{C_{bi}}{2}$\uff0c\u8fd9\u6837\u5272\u4e0b\u6765\u7684\u4ee3\u4ef7\u4e3a$\\frac{C_{bi}}{2}+\\frac{C_{ai}}{2}$\n\n\u4f46\u662f\u6211\u4eec\u671f\u671b\u5176\u6263\u9664\u7684\u4ee3\u4ef7\u4e3a$C_{ai}+C_{bi}+C_{ci}$\uff0c\u8fd9\u5c31\u8981\u6c42\u6211\u4eec\u540c\u65f6\u8981\u5272\u4e0b\u4e00\u6761\u4ee3\u4ef7\u4e3a$\\frac{C_{bi}}{2}+\\frac{C_{ai}}{2}+C_{ci}$\u7684\u8fb9\u3002\n\n\u53ef\u662f\u8fd9\u6761\u8fb9\u5e94\u8be5\u52a0\u5728\u54ea\u91cc\u5462\u3002\n\n\u8003\u8651\u4ec0\u4e48\u6837\u7684\u8fb9\u4e00\u5b9a\u88ab\u5272\u6389\uff0c\u4e00\u5b9a\u662f\u5f53\u524d\u5b58\u5728\u7684\u4e0e\u6e90\u70b9\u8fde\u8fb9\u7684\u70b9\u8fde\u5411\u4e00\u4e2a\u4e0e\u6c47\u70b9\u6709\u6d41\u91cf\u7684\u70b9\u3002\n\n\u90a3\u4e48\u5c31\u662f\u5728\u5f53\u524d\u8fb9\u4e24\u7aef\u5bf9\u5e94\u7684\u70b9\u95f4\u52a0\u4e00\u53cc\u5411\u8fb9\uff0c\u8fb9\u6743\u4e3a$\\frac{C_{bi}}{2}+\\frac{C_{ai}}{2}+C_{ci}$\u3002\n\n\u8bc1\u660e\u8fd9\u6837\u505a\u7684\u53ef\u884c\u6027\u3002\n\n\u56e0\u4e3a\u5f53\u4e24\u7aef\u9009\u540c\u4e00\u4e2a\u56fd\u5bb6\u65f6\uff0c\u4e2d\u95f4\u7684\u6d41\u91cf\u4e0d\u4f1a\u6d41\u5411\u6c47\u6216\u4e0d\u4f1a\u4e0e\u6e90\u6709\u6d41\u91cf\u3002\n\n\u6240\u4ee5\u8fd9\u6761\u9644\u52a0\u8fb9\u5728\u4e24\u7aef\u9009\u540c\u4e00\u56fd\u5bb6\u65f6\u662f\u4e0d\u4f1a\u5b58\u5728\u6d41\u91cf\u7684\uff0c\u66f4\u4e0d\u4f1a\u88ab\u5272\u53bb\u3002\n\n\u6240\u4ee5\u5efa\u56fe\u5c31\u662f\u8fd9\u6837\u4e86\u3002\n\n\u56e0\u4e3a\u6709\u7cfb\u6570$\\frac{1}{2}$\u7684\u5b58\u5728\uff0c\u5c06\u6240\u6709\u8fb9\u6743\\*2\uff0c\u6700\u540e/2\uff0c\u53ef\u4ee5\u8bc1\u660e\u6700\u540e\u4e00\u5b9a\u662f\u6574\u9664\u7684\uff0c\u6ca1\u6709\u5fc5\u8981\u62c5\u5fc3\u3002\n\n\u5168\u56fe\u6700\u5c0f\u5272\u5c31\u597d\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int oo=0x3f3f3f3f;\nstruct pnt {\n\tint hd;\n\tint lyr;\n\tint now;\n} p[100000];\nstruct ent {\n\tint twd;\n\tint lst;\n\tint vls;\n} e[1000000];\nint cnt,n,m,s,t;\nqueue<int>Q;\nvoid ade(int f,int t,int v) {\n\tcnt++;\n\te[cnt].twd=t;\n\te[cnt].vls=v;\n\te[cnt].lst=p[f].hd;\n\tp[f].hd=cnt;\n\treturn ;\n}\nbool Bfs(void) {\n\twhile(!Q.empty())Q.pop();\n\tfor(int i=1; i<=t; i++)p[i].lyr=0;\n\tp[s].lyr=1;\n\tQ.push(s);\n\twhile(!Q.empty()) {\n\t\tint x=Q.front();\n\t\tQ.pop();\n\t\tfor(int i=p[x].hd; i; i=e[i].lst) {\n\t\t\tint to=e[i].twd;\n\t\t\tif(p[to].lyr==0&&e[i].vls>0) {\n\t\t\t\tp[to].lyr=p[x].lyr+1;\n\t\t\t\tif(to==t)return true;\n\t\t\t\tQ.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint Dfs(int x,int fll) {\n\tif(x==t)return fll;\n\tfor(int& i=p[x].now; i; i=e[i].lst) {\n\t\tint to=e[i].twd;\n\t\tif(p[to].lyr==p[x].lyr+1&&e[i].vls>0) {\n\t\t\tint ans=Dfs(to,std::min(fll,e[i].vls));\n\t\t\tif(ans>0) {\n\t\t\t\te[i].vls-=ans;\n\t\t\t\te[((i-1)^1)+1].vls+=ans;\n\t\t\t\treturn ans;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint Dinic(void) {\n\tint ans=0;\n\twhile(Bfs()) {\n\t\tfor(int i=1; i<=t; i++)p[i].now=p[i].hd;\n\t\tint dlt;\n\t\twhile(dlt=Dfs(s,oo))ans+=dlt;\n\t}\n\treturn ans;\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\ts=n+1;\n\tt=s+1;\n\tint ans=0;\n\tade(s,1,oo);\n\tade(1,s,0);\n\tade(n,t,oo);\n\tade(t,n,0);\n\tfor(int i=2; i<=n-1; i++) {\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tx<<=1;\n\t\tade(s,i,x);\n\t\tade(i,s,0);\n\t\tans+=x;\n\t}\n\tfor(int i=2; i<=n-1; i++) {\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tx<<=1;\n\t\tade(i,t,x);\n\t\tade(t,i,0);\n\t\tans+=x;\n\t}\n\tfor(int i=1; i<=m; i++) {\n\t\tint x,y,a,b,c;\n\t\tscanf(\"%d%d%d%d%d\",&x,&y,&a,&b,&c);\n\t\tans+=a+b+a+b;\n\t\tade(s,x,a);\n\t\tade(x,s,0);\n\t\tade(s,y,a);\n\t\tade(y,s,0);\n\t\tade(x,t,b);\n\t\tade(t,x,0);\n\t\tade(y,t,b);\n\t\tade(t,y,0);\n\t\tade(x,y,a+b+c+c);\n\t\tade(y,x,a+b+c+c);\n\t}\n\tans=(ans-Dinic())>>1;\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1611748579,
        "uid": 306255,
        "name": "\u65e5\u5fa1\u8353\u7ff3",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4210 \u3010\u571f\u5730\u5212\u5206\u3011"
    },
    {
        "content": "#### \u603b\u4f53\u601d\u8def\uff1a\n\u5efa\u7acb\u6700\u5c0f\u5272\u6a21\u578b\uff0c\u4f7f A \u96c6\u5408\u7684\u70b9\u4e0eS \u8fde\u901a\uff0c B \u96c6\u5408\u7684\u70b9\u4e0eT \u8fde\u901a\u3002\n\n#### \u5177\u4f53\u64cd\u4f5c\uff1a\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 u\uff0c\u8fde\u8fb9 (S->u)=VA_u\uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u8868\u793a\u5b83\u4e0d\u88ab\u653e\u5728 A \u96c6\u5408\u4e2d\uff1b\u8fde\u8fb9 (u->T)=VB_u \uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u8868\u793a\u5b83\u4e0d\u88ab\u653e\u5728 B \u96c6\u5408\u4e2d\u3002       \n\n\u5bf9\u4e8e\u5df2\u7ecf\u786e\u5b9a\u7684\u70b9 1 \u548c\u70b9n \uff0c\u8fde\u4e24\u6761\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\u7684\u8fb9 (S->1)=inf \u548c (n->T)=inf \uff0c\u8fd9\u4e24\u6761\u8fb9\u90fd\u4e0d\u4f1a\u88ab\u5272\u6389\u3002\n\n\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u5bb9\u91cf\u4e3a EA_i/2+EB_i/2+EC_i\u7684\u53cc\u5411\u8fb9\uff0c\u5e76\u5bf9\u4e8e\u4e24\u4e2a\u7aef\u70b9\uff0c\u8fde\u63a5(S,u)=EA_i/2,(u,T)=EB_i/2 \u3002     \n\n\u5982\u679c\u4e24\u4e2a\u7aef\u70b9\u90fd\u5728 A \u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u5bb9\u91cf\u4e3a EB_i \u7684\u8fb9\u4f1a\u88ab\u5272\u6389\uff0c\u5982\u679c\u4e24\u4e2a\u7aef\u70b9\u90fd\u5728 B \u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u5bb9\u91cf\u4e3aEA_i \u7684\u8fb9\u4f1a\u88ab\u5272\u6389\uff0c\u5426\u5219\u4f1a\u5272\u6389\u5bb9\u91cfEA_i+EB_i+EC_i \u7684\u8fb9\u3002             \n\n\u6c42\u51fa\u6700\u5c0f\u5272\u5373\u4e3a\u635f\u5931\uff0c \u51cf\u53bb\u635f\u5931\u5373\u4e3a\u7b54\u6848\u3002                  \n\n\u8f93\u5165\u7684\u6570\u5b57\u53ef\u80fd\u6709\u5947\u6570\uff0c\u53ef\u4ee5\u628a\u6240\u6709\u6570\u5b57\u4e58\u4ee5\u4e8c\u518d\u8fdb\u884c\u5904\u7406\u3002    \n```\n#include<bits/stdc++.h>\nconst int MAXN = 10000;\nconst int MAXM = 40000;\nstruct Node;\nstruct Edge;\nstruct Node {\n\tEdge *e, *c;\n\tint l;\n} N[MAXN + 2];\nstruct Edge {\n\tNode *s, *t;\n\tint f, c;\n\tEdge *next, *r;\n\tEdge(Node *s, Node *t, const int c) : s(s), t(t), f(0), c(c), next(s->e) {}\n};\ntemplate <typename T, size_t SIZE>\nstruct MemoryPool {\n\tchar buf[SIZE * sizeof(T)], *cur;\n\tMemoryPool() : cur(buf) {}\n\tT *alloc() {\n\t\tif (cur == buf + SIZE * sizeof(T)) return (T *)malloc(sizeof(T));\n\t\telse {\n\t\t\tT *p = (T *)cur;\n\t\t\tcur += sizeof(T);\n\t\t\treturn p;\n\t\t}\n\t}\n};\nint n, m;\nMemoryPool<Edge, MAXM * 5 * 2 + MAXN * 2 * 2> pool;\nstruct Dinic {\n\tbool makeLevelGraph(Node *s, Node *t, const int n) {\n\t\tfor (int i = 0; i < n; i++) N[i].l = 0, N[i].c = N[i].e;\n\t\tstd::queue<Node *> q;\n\t\tq.push(s);\n\t\ts->l = 1;\n\t\twhile (!q.empty()) {\n\t\t\tNode *v = q.front();\n\t\t\tq.pop();\n\t\t\tfor (Edge *e = v->e; e; e = e->next) if (e->t->l == 0 && e->f < e->c) {\n\t\t\t\te->t->l = v->l + 1;\n\t\t\t\tif (e->t == t) return true;\n\t\t\t\telse q.push(e->t);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tint findPath(Node *s, Node *t, int limit = INT_MAX) {\n\t\tif (s == t) return limit;\n\t\tfor (Edge *&e = s->c; e; e = e->next) {\n\t\t\tif (e->t->l == s->l + 1 && e->f < e->c) {\n\t\t\t\tint f = findPath(e->t, t, std::min(limit, e->c - e->f));\n\t\t\t\tif (f > 0) {\n\t\t\t\t\te->f += f, e->r->f -= f;\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tint operator()(const int s, const int t, const int n) {\n\t\tint ans = 0;\n\t\twhile (makeLevelGraph(&N[s], &N[t], n)) {\n\t\t\tint f;\n\t\t\twhile ((f = findPath(&N[s], &N[t])) > 0) ans += f;\n\t\t}\n\t\treturn ans;\n\t}\n} dinic;\ninline void addEdge(const int s, const int t, const int c, const int rc = 0) {\n\tN[s].e = &(*(pool.alloc()) = Edge(&N[s], &N[t], c));\n\tN[t].e = &(*(pool.alloc()) = Edge(&N[t], &N[s], rc));\n\tN[s].e->r = N[t].e, N[t].e->r = N[s].e;\n}\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\tint sum = 0;\n\tconst int s = 0, t = n + 1;\n\taddEdge(s, 1, INT_MAX), addEdge(n, t, INT_MAX);\n\tfor (int i = 2; i <= n - 1; i++) {\n\t\tint va;\n\t\tscanf(\"%d\", &va), va *= 2;\n\t\tsum += va;\n\t\taddEdge(s, i, va);\n\t}\n\tfor (int i = 2; i <= n - 1; i++) {\n\t\tint vb;\n\t\tscanf(\"%d\", &vb), vb *= 2;\n\t\tsum += vb;\n\t\taddEdge(i, t, vb);\n\t}\n\tfor (int i = 0; i < m; i++) {\n\t\tint u, v, ea, eb, ec;\n\t\tscanf(\"%d %d %d %d %d\", &u, &v, &ea, &eb, &ec);\n\t\tea *= 2, eb *= 2, ec *= 2;\n\t\tsum += ea, sum += eb;\n\t\tint c = (ea / 2 + eb / 2 + ec);\n\t\taddEdge(u, v, c, c);\n\t\taddEdge(s, u, ea / 2), addEdge(s, v, ea / 2);\n\t\taddEdge(u, t, eb / 2), addEdge(v, t, eb / 2);\n\t}\n\tint minCut = dinic(s, t, n + 2);\n\tprintf(\"%d\\n\", (sum - minCut) / 2);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1592035612,
        "uid": 324858,
        "name": "\u26a1114514_zzm\u26a1",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P4210 \u3010\u571f\u5730\u5212\u5206\u3011"
    }
]