[
    {
        "content": "# \u5199\u5728\u524d\u9762\n\n**\u63d0\u4f9b\u4e00\u79cd\u5728\u7ebf\u505a\u6cd5\u3002**\n\n\u8fd9\u672c\u6765\u662f\u4e00\u9053\u7eff\u9898\uff0c\u4f46\u662f\u6211\u8003\u8bd5\u7684\u65f6\u5019\u8111\u62bd\u4e86\uff0c\u4e00\u5ea6\u8ba4\u4e3a\u662f\u7d2b\u9898\u5f80\u4e0a\uff0c\u56e0\u4e3a\u6211\u719f\u6089\u7684\u7ebf\u6bb5\u6811 fail \u4e86\u6211 \u0ca5_\u0ca5\u3002\u540e\u6765\u4e00\u770b\u624d\u53d1\u73b0\u662f\u5fd8\u4e86\u6bcf\u6b21\u90fd\u8f93\u51fa\u4e86\uff0c\u8003\u8bd5\u5b8c\u604d\u7136\u5927\u609f\uff0c\u4e00\u4ea4\u5c31\u8fc7\u4e86\uff0c\u6240\u4ee5\u8fd8\u662f\u5199\u4e00\u4e0b\uff0c\u6bd5\u7adf\u6298\u78e8\u4e86\u6211\u4e00\u4e2a\u591a\u5c0f\u65f6\u3002\n\n## \u524d\u7f6e\u77e5\u8bc6\n- \u7ebf\u6bb5\u6811\n- \u6a21\u62df\u3001\u8d2a\u5fc3\n\n## \u9898\u76ee\u63cf\u8ff0\uff08\u6233\u8fd9\u91cc[\u67e5\u770b\u539f\u9898](https://www.luogu.com.cn/problem/P8473)\uff09\n\n\u6570\u8f74\u4e0a\u6709\u4e00\u4e9b\u9ed1\u767d\u70b9\uff08\u7279\u6b8a\u6574\u70b9\uff09\uff0c\u5b9a\u4e49\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u5c06\u533a\u95f4 $[l,r]$ \u4e2d\u6240\u6709\u7279\u6b8a\u6574\u70b9\u4e24\u4e24\u7ec4\u6210\u7684\u7ebf\u6bb5\u52a0\u5165\u4e00\u4e2a**\u53ef\u91cd**\u96c6\u5408 $S$ \u4e2d\u3002\n2. \u64a4\u9500\u67d0\u6b21\u64cd\u4f5c\u3002\u4fdd\u8bc1\u64a4\u9500\u7684\u64cd\u4f5c\u7c7b\u578b\u4e3a 1\u3002\n\n\u6bcf\u6b21\u64cd\u4f5c\u540e\u53ef\u4ee5\u4efb\u610f\u6b21\u5c06 $S$ \u4e2d\u7531**\u4e24\u4e2a\u9ed1\u8272\u70b9**\u7ec4\u6210\u7684\u7ebf\u6bb5\u4e2d\u95f4\u7684\u6240\u6709\u70b9**\u67d3\u9ed1**\u3002\u8be2\u95ee\u6bcf\u6b21\u64cd\u4f5c\u540e\u662f\u5426\u53ef\u4ee5\u5c06\u539f\u6570\u8f74\u4e0a\u6240\u6709\u70b9\u67d3\u9ed1\uff1f\n\n# \u6b63\u6587\n\n\u6211\u8fd9\u9053\u9898\u662f\u4e00\u773c\u7784\u51fa\u6765\u7684\uff0c\u56e0\u4e3a\u6628\u5929\u7684 REOI \u4e5f\u8003\u4e86\u4e00\u9053\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u7684\u9898\uff0c\u6240\u4ee5\u6709\u610f\u5f80\u8fd9\u65b9\u5411\u60f3\uff0c\u4e0d\u8fc7\u6211\u4eec\u8fd8\u662f\u4ed4\u7ec6\u770b\u770b\u8fd9\u9898\u8fd8\u6709\u4ec0\u4e48\u53ef\u4ee5\u63d0\u793a\u6211\u4eec\u7684\u3002\n\n\u9898\u76ee\u91cc\u8bf4\u5404\u7ec4\u8be2\u95ee\u4e92\u76f8\u72ec\u7acb\uff0c\u4f46\u5176\u5b9e\u6a21\u62df\u4e00\u4e0b\u4f1a\u53d1\u73b0\u53ea\u8981\u987a\u7740\u6309\u6700\u4f18\u65b9\u6cd5\u6a21\u62df\uff0c\u8be2\u95ee\u95f4\u5c31\u4e0d\u4f1a\u6709\u5f71\u54cd\u3002\u53ef\u4ee5\u5728\u7ebf\u3002\n\n## \u5206\u6790\n\n\u5176\u5b9e\u9898\u76ee\u91cc\u8bf4\u7684\u5f88\u9690\u6666\uff0c\u4f3c\u4e4e\u6bcf\u6b21\u6dfb\u52a0\u7684\u7ebf\u6bb5\u5f88\u591a\uff0c\u7136\u800c\uff0c\u771f\u6b63\u6709\u7528\u7684\u7ebf\u6bb5\u53ea\u548c\u80fd\u5426\u8fdb\u884c\u64cd\u4f5c\u6709\u5173\u3002\u56e0\u6b64\uff0c**\u5bf9\u8be2\u95ee\u548c\u4fee\u6539\u6709\u7528\u7684\u7ebf\u6bb5\u53ea\u6709\u4e24\u7aef\u90fd\u662f\u9ed1\u70b9\u7684\u7ebf\u6bb5\u3002**\n\n\u518d\u5f80\u6df1\u5904\u60f3\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c 1\uff0c\u8fd9\u6bb5\u533a\u95f4\u4e2d\u6700\u957f\u7684\u201c\u4e24\u7aef\u9ed1\u7ebf\u6bb5\u201d\u6240\u8d77\u7684\u4f5c\u7528\u4e00\u5b9a\u80fd\u5305\u62ec\u5185\u90e8\u6240\u6709\u201c\u4e24\u7aef\u9ed1\u7ebf\u6bb5\u201d\u8d77\u7684\u4f5c\u7528\uff08**\u5927\u533a\u95f4\u4e00\u5b9a\u8986\u76d6\u5c0f\u533a\u95f4**\uff09\u3002\u56e0\u6b64\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6211\u4eec**\u53ea\u7528\u8003\u8651\u4e00\u4e2a\u5b9e\u9645\u7ebf\u6bb5\u3002**\n\n\u5bf9\u4e8e\u4e00\u6bb5\u533a\u95f4\u4e2d\u6700\u957f\u7684\u201c\u4e24\u7aef\u9ed1\u7ebf\u6bb5\u201d\uff0c\u6211\u4eec\u5728\u6dfb\u52a0\u8fd9\u4e2a\u7ebf\u6bb5\u540e\u628a\u5176\u80fd\u8986\u76d6\u7684\u6240\u6709\u767d\u8272\u70b9\u5168\u90e8\u53d8\u6210\u9ed1\u8272\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u4e0d\u7528\u53d7\u5176\u4ed6\u64cd\u4f5c\u5f71\u54cd\u3002\u8fd9\u5c31\u6307\u5411\u4e86\u533a\u95f4\u4fee\u6539\uff0c\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u8003\u8651\u4ece**\u7ebf\u6bb5\u6811**\u7684\u89d2\u5ea6\u5165\u624b\u8fd9\u9053\u9898\u3002\n\n## \u5b9e\u73b0\n\n\u9996\u5148\u6765\u8003\u8651\u533a\u95f4\u7ef4\u62a4\u3002\u9996\u5148\uff0c\u6574\u4e2a\u6570\u8f74\u7684\u8303\u56f4\u662f $10^9$ \u7ea7\u522b\u7684\uff0c\u80af\u5b9a\u4e0d\u884c\u3002\u800c\u5bf9\u6211\u4eec\u6709\u7528\u7684\u6574\u6570\u70b9\u5728 $5\\times 10^5$ \u7ea7\u522b\u5185\uff0c\u56e0\u6b64\u6211\u4eec\u7ebf\u6bb5\u6811\u53ea\u7ef4\u62a4\u8fd9\u4e9b\u6574\u6570\u70b9\u5c31\u53ef\u4ee5\u3002\n\n\u8be2\u95ee\u7684\u95ee\u9898\u662f\u6240\u6709\u6574\u70b9\u6709\u6ca1\u6709\u767d\u8272\uff0c\u56e0\u6b64\u67e5\u8be2\u7ebf\u6bb5\u6811\u5c31\u67e5\u8be2\u7ebf\u6bb5\u91cc\u6709\u6ca1\u6709\u767d\u8272\u5c31\u597d\u3002\u76f4\u63a5\u6309\u9898\u76ee\u8f93\u5165\u5b9a\u4e49\u3002\u5f62\u8c61\u5316\u4e00\u70b9\uff0c\u5c31\u50cf\u5728\u5927\u7ebf\u6bb5\u4e0a\u4e0b\u96ea\uff0c\u4e00\u6b21\u201c\u4e24\u7aef\u9ed1\u7ebf\u6bb5\u201d\u64cd\u4f5c\u5c31\u5728\u5bf9\u5e94\u7684\u533a\u95f4\u8986\u76d6\u4e00\u5c42\u96ea\uff0c\u521d\u59cb\u65f6\u9ed1\u70b9\u4e0b\u4e00\u5c42\u96ea\uff0c\u767d\u70b9\u6ca1\u6709\u3002\u56e0\u6b64\u4e4b\u540e\u6211\u4eec\u67e5\u627e\u539a\u5ea6\u5373\u53ef\uff0c\u4e00\u5c42\u6ca1\u6709\u5c31\u662f\u767d\u70b9\u3002\uff08\u611f\u89c9\u6492\u7164\u7c89\u66f4\u5408\u7406 doge\uff09\n\n\u6211\u4eec\u5b9a\u4e49\u4e00\u6bb5\u7ebf\u6bb5\u7684\u6700\u5c0f\u503c $v$\uff1a\n- $v \u2264 0$\uff1a\u5b58\u5728\u767d\u8272\u3002\n- $v \u2265 1$\uff1a\u5168\u90e8\u662f\u9ed1\u8272\u3002\n\n\u8fd9\u6837\u5b9a\u4e49\u5176\u5b9e\u4e5f\u5f88\u65b9\u4fbf\u64cd\u4f5c\u3002\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u4e00\u6b21\u201c\u4e24\u7aef\u9ed1\u7ebf\u6bb5\u201d\u64cd\u4f5c\u53ea\u9700\u8981\u533a\u95f4\u52a0 $1$ \u5c31\u597d\u3002\u8be2\u95ee\u53ea\u7528\u5224\u65ad\u6574\u4e2a\u7ebf\u6bb5\u7684\u6700\u5c0f\u503c\u662f\u4e0d\u662f $0$ \u5373\u53ef\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5982\u4f55\u627e\u5230\u64cd\u4f5c\u533a\u95f4 $[l,r]$ \u7684\u6700\u957f\u201c\u4e24\u7aef\u9ed1\u7ebf\u6bb5\u201d\uff1f   \n\u6211\u4eec\u901a\u8fc7 C ++ \u5185\u7f6e\u51fd\u6570\u89e3\u51b3\u3002\n\n- \u5bf9\u4e8e $l$\uff0c\u6211\u4eec\u8981\u627e\u5230\u6700\u9760\u8fd1 $l$ \u7684\u9ed1\u70b9 $i$\uff0c\u5219\u6709 $p[i] \u2265 l$ \u4e14 $p[i]$ \u6700\u5c0f\u3002\u4e5f\u5c31\u662f\u627e\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u6bd4 $l$ \u5927\u7684\u70b9\u3002\u7528 ```lower_bound``` \u89e3\u51b3\u3002\n\n- $r$ \u540c\u7406\u3002\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e\u7684\uff0c\u7528 ```upper_bound``` \u627e\u5230\u4e25\u683c\u5927\u4e8e\u7684\u6700\u5c0f\u503c\u540e $-1$ \u5c31\u662f\u5c0f\u4e8e\u7b49\u4e8e\u4e86\u3002\n\n\u6700\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$\u3002\n\n## \u4e00\u4e9b\u7ec6\u8282\n\n1. \u5bf9\u4e8e\u521a\u624d\u90a3\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5728 $p$ \u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u56e0\u4e3a**\u91cc\u9762\u8fd8\u6709\u767d\u8272\u70b9\u4f4d\u7f6e**\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u53e6\u5916\u5f00\u4e00\u4e2a\u6570\u7ec4\uff08\u6ce8\u610f\u4fdd\u8bc1\u5355\u8c03\u6027\uff09\u3002\n\n2. \u6211\u4eec\u9700\u4e0d\u9700\u8981\u8003\u8651\u53d8\u6210\u9ed1\u8272\u70b9\u7684\u767d\u8272\u70b9\uff1f\n\t\n   \u5176\u5b9e\u4e0d\u7528\u3002\u5982\u4e0b\u56fe\uff1a\n   \n   ![](https://cdn.luogu.com.cn/upload/image_hosting/u4n4esg8.png)\n   \n   \u5982\u679c\u9009\u5b9a\u533a\u95f4\u80fd\u5305\u62ec\u4ece\u767d\u8272\u53d8\u6210\u9ed1\u8272\u7684\u70b9\uff0c\u90a3\u4e00\u5b9a\u6709\uff1a\n   - \u4e0d\u5305\u62ec\u201c\u4e24\u7aef\u9ed1\u7ebf\u6bb5\u201d\u7aef\u70b9\u3002\u5219\u6574\u4e2a\u533a\u95f4\u5728\u8fd9\u6761\u7ebf\u6bb5\u91cc\uff0c\u4e00\u5b9a\u90fd\u662f\u9ed1\u7684\uff0c\u6ca1\u6709\u64cd\u4f5c\u5fc5\u8981\uff0c\u4e0d\u7528\u7ba1\u3002\n   - \u5305\u62ec\u201c\u4e24\u7aef\u9ed1\u7ebf\u6bb5\u201d\u7aef\u70b9\uff0c\u5219\u8fd9\u4e2a\u7531\u767d\u53d8\u9ed1\u7684\u70b9\u5230\u7aef\u70b9\u4e4b\u95f4\u4e5f\u4e00\u5b9a\u5168\u662f\u9ed1\u70b9\uff0c\u56e0\u6b64\u64cd\u4f5c\u65f6\u8003\u8651\u53d8\u5316\u70b9\u548c\u76f4\u63a5\u8003\u8651\u539f\u6765\u7684\u9ed1\u70b9\u7684\u6548\u679c\u662f\u7b49\u4ef7\u7684\u3002\uff08\u5f53\u65f6\u6211\u6ca1\u60f3\u660e\u767d\uff0c\u4e00\u5ea6\u8ba4\u4e3a\u662f\u7d2b\u9898\uff09\n \n\n3. \u5982\u679c\u6211\u4eec\u5728\u533a\u95f4 $[l,r]$ \u91cc\u627e\u4e0d\u5230\u4e24\u4e2a\u9ed1\u70b9\u600e\u4e48\u529e\uff1f\n   \n   \u5176\u5b9e\u8fd9\u79cd\u60c5\u51b5\u5c31\u662f\u4e00\u5b9a\u6ca1\u6709\u80fd\u529b\u4f7f\u533a\u95f4\u4e2d\u7684\u767d\u70b9\u53d8\u9ed1\u7684\uff0c\u5177\u4f53\u8bc1\u660e\u53ef\u4ee5\u8054\u60f3 2\u3002\u6240\u4ee5\u76f4\u63a5\u5ffd\u7565\u5c31\u597d\u3002\n   \n   **\u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u6bcf\u6b21\u8f93\u51fa\u4e00\u6b21\u8be2\u95ee\uff0c\u4e0d\u8981\u4e00\u4e0d\u5408\u6cd5\u5c31\u76f4\u63a5 ```continue;```\u3002**\n   \n4. \u64cd\u4f5c 2 \u5982\u4f55\u5904\u7406\uff1f\n   \n   \u628a\u6bcf\u4e2a\u64cd\u4f5c 1 \u8bb0\u5f55\u4e0b\u6765\uff0c\u6bcf\u6b21\u5220\u9664\u65f6\u53ea\u9700\u8981\u627e\u51fa\u64cd\u4f5c 1 \u65f6\u8986\u76d6\u7684\u201c\u4e24\u7aef\u9ed1\u7ebf\u6bb5\u201d\uff0c\u201c\u94f2\u4e00\u5c42\u96ea\u201d\u5c31\u53ef\u4ee5\uff0c\u4e5f\u5c31\u662f\u8be5\u533a\u95f4\u6574\u4f53 $-1$\u3002\n   \n# \u4ee3\u7801\n\n\u53d8\u91cf\u540d\u89c1\u6ce8\u91ca\u3002\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define ls (id << 1)\n#define rs (id << 1 | 1)\n#define mid ((l + r) >> 1)\n\nusing namespace std;\ntypedef pair<int, int> pii;\nconst int maxn = 500005;\n\nint a[maxn], p[maxn];\nint blk[maxn], len;//\u53ea\u8bb0\u5f55\u9ed1\u70b9\u4f4d\u7f6e\uff08black\uff09\nint id[maxn];//\u8bb0\u5f55\u9ed1\u70b9\u7f16\u53f7\u5bf9\u5e94\u539f\u6570\u8f74\u7684\u7f16\u53f7\nint n, q;\npii opts[maxn]; //\u8bb0\u5f55\u6240\u6709\u64cd\u4f5c 1\nstruct SegmentTree{\n\tint mn;//\u533a\u95f4\u6700\u5c0f\u503c\u3002\u7528\u4e8e\u627e\u767d\u70b9\u3002\n\tint lazy;\n}tr[maxn << 2];\n\nvoid pushup(int id){\n\ttr[id].mn = min(tr[ls].mn, tr[rs].mn);\n}\n\nvoid build(int id, int l, int r){\n\tif (l == r){\n\t\ttr[id].mn = a[l];\n\t\treturn;\n\t}\n\tbuild(ls, l, mid),\n\tbuild(rs, mid+1, r);\n\tpushup(id);\n}\n\nvoid pushdown(int id){\n\tif (tr[id].lazy){\n\t\ttr[ls].lazy += tr[id].lazy;\n\t\ttr[rs].lazy += tr[id].lazy;\n\t\ttr[ls].mn += tr[id].lazy;\n\t\ttr[rs].mn += tr[id].lazy;\n\t\ttr[id].lazy = 0;\n\t}\n}\n\nvoid update(int id, int l, int r, int a, int b, int v){\n\tif (a <= l && r <= b){\n\t\ttr[id].mn += v;\n\t\ttr[id].lazy += v;\n\t\treturn;\n\t}\n\tpushdown(id);\n\tif (a <= mid) update(ls, l, mid, a, b, v);\n\tif (b > mid) update(rs, mid+1, r, a, b, v);\n\tpushup(id);\n}\n\nint query(int id, int l, int r, int a, int b){\n\tif (a <= l && r <= b){\n\t\treturn tr[id].mn;\n\t}\n\tpushdown(id);\n\tint res = 1e9;\n\tif (a <= mid) res = min(res, query(ls, l, mid, a, b));\n\tif (b > mid) res = min(res, query(rs, mid+1, r, a, b));\n\treturn res;\n}\n\nint findL(int x){//\u627e\u6700\u5de6\u7684\u9ed1\u70b9\n\treturn id[lower_bound(blk+1, blk+1+len, x)-blk];\n}\n\nint findR(int x){//\u627e\u6700\u53f3\u7684\u9ed1\u70b9\n\treturn id[upper_bound(blk+1, blk+1+len, x)-blk-1];\n}\n\nvoid check(){//\u6bcf\u6b21\u7684\u8be2\u95ee\n\tif (query(1, 1, n, 1, n) <= 0) cout << \"No\" << endl;\n\telse cout << \"Yes\" << endl;\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n\n\tcin >> n >> q;\n\tfor (int i = 1; i <= n; i ++){\n\t\tcin >> p[i];\n\t}\n\tfor (int i = 1; i <= n; i ++){\n\t\tcin >> a[i];\n\t\tif (a[i]){\n\t\t\tblk[++len] = p[i];\n\t\t\tid[len] = i;\n\t\t}\n\t}\n\tbuild(1, 1, n);\n\n\tfor (int k = 1; k <= q; k ++){\n        check();//\u6ce8\u610f\uff01\n\t\tint op;\n\t\tcin >> op;\n\t\tif (op & 1){//1\n\t\t\tint L, R;\n\t\t\tcin >> L >> R;\n\t\t\tint l = findL(L), r = findR(R);\n\t\t\tif (l > r) continue;\n\t\t\tif (!l || !r) continue;\n\t\t\tupdate(1, 1, n, l, r, 1);\n\t\t\topts[k] = make_pair(L, R);\n\t\t}\n\t\telse{//2\n\t\t\tint x;\n\t\t\tcin >> x;\n\t\t\tint l = findL(opts[x].first), r = findR(opts[x].second);\n\t\t\tif (l > r) continue;\n\t\t\tif (!l || !r) continue;\n\t\t\tupdate(1, 1, n, l, r, -1);\n\t\t}\n\t}\n    check();//\u6ce8\u610f\uff01\n\n\treturn 0;\n}\n```\n\n# \u603b\u7ed3\n\n\u4ee5\u524d\u9519\u8bef\u7684\u89c9\u5f97\u60f3\u8981\u63d0\u5347\u5c31\u8981\u7ec3\u84dd\u7d2b\u9898\uff0c\u672c\u6765\u8fd9\u573a Div.3 \u90fd\u61d2\u5f97\u53c2\u52a0\uff0c\u4f46\u662f\u540e\u6765\u53c2\u52a0\u4e86\u624d\u53d1\u73b0\u81ea\u5df1\u751a\u81f3\u8fd8\u6709\u8bb8\u591a\u57fa\u7840\u6ca1\u641e\u660e\u767d\uff0c\u6240\u8c13\u5730\u57fa\u8981\u7262\u56fa\uff0c\u591a\u8865\u4e60\u57fa\u7840\u77e5\u8bc6\u624d\u662f\u6b63\u9053\u3002\n\n\u8fd9\u9053\u9898\u4e2d\u7ebf\u6bb5\u6811\u7684\u7528\u6cd5\u5f88\u7ecf\u5178\uff0c\u5c31\u662f\u533a\u95f4\u8986\u76d6\u89e3\u51b3\u4e00\u4e9b\u95ee\u9898\uff0c\u63a8\u8350\u51e0\u4e2a\u9898\u76ee[P8463 \u300cREOI-1\u300d\u6df1\u6f5c\u7684\u7b2c\u516d\u517d](https://www.luogu.com.cn/problem/P8463)\u3001[P1442 \u94c1\u7403\u843d\u5730](https://www.luogu.com.cn/problem/P1442)\u3002\n\n\u8c22\u8c22\u89c2\u770b\uff01\n",
        "postTime": 1659866092,
        "uid": 528114,
        "name": "jjsnam",
        "ccfLevel": 6,
        "title": "P8473\u9898\u89e3"
    },
    {
        "content": "# \u7834\u788e\u7684\u5386\u53f2\r\n\r\n\u9996\u5148\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u975e\u7279\u6b8a\u70b9\u90fd\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\r\n\r\n\u5982\u679c\u6700\u5de6\u4fa7\u6216\u6700\u53f3\u4fa7\u7684\u7279\u6b8a\u70b9\u4e0d\u662f\u9ed1\u70b9\uff0c\u90a3\u4e48\u5fc5\u7136\u4e0d\u5b58\u5728\u65b9\u6848\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u5fc5\u7136\u5b58\u5728\u6700\u5de6\u4fa7\u6216\u8005\u6700\u53f3\u4fa7\u7684\u70b9\u65e0\u6cd5\u88ab\u67d3\u9ed1\u3002\u5373\u53ea\u6709\u5f53\u6700\u5de6\u4fa7\u548c\u6700\u53f3\u4fa7\u7684\u7279\u6b8a\u70b9\u90fd\u662f\u9ed1\u8272\u70b9\u624d\u53ef\u80fd\u6709\u89e3\u3002\r\n\r\n\u5bf9\u4e8e\u4e00\u7c07\u88ab\u52a0\u5165\u5230\u7ebf\u6bb5\u96c6\u5408 $S$ \u7684\u7ebf\u6bb5\uff0c\u5176\u4e2d\u5b9e\u9645\u6709\u7528\u7684\u7ebf\u6bb5\u662f\u5176\u4e2d\u7684\u4e24\u7aef\u70b9\u4e3a\u9ed1\u8272\u70b9\u7684\u7ebf\u6bb5\u3002\u5c06\u6240\u6709\u7684\u8fd9\u4e9b\u7ebf\u6bb5\u53d6\u5e76\u96c6\uff0c\u5219\u53ef\u77e5\u52a0\u5165\u4e00\u7c07\u7ebf\u6bb5 $[l,r]$\uff0c\u7b49\u4ef7\u4e8e\u52a0\u5165\u5176\u4e2d\u957f\u5ea6\u6700\u957f\u7684\u9ed1\u8272\u70b9\u5bf9\u533a\u95f4 $[l',r']$\u3002\r\n\r\n\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u65e0\u6cd5\u6ee1\u8db3\u5b58\u5728\u81f3\u5c11\u4e00\u79cd\u5408\u6cd5\u67d3\u8272\u65b9\u5f0f\u4f7f\u5f97\u6b63\u534a\u8f74\u4e0a\u7684\u6240\u6709\u7279\u6b8a\u6574\u70b9\u5747\u88ab\u67d3\u9ed1\u5462\uff1f\u53ea\u8981\u5b58\u5728\u767d\u8272\u7684\u7279\u6b8a\u70b9\u6ca1\u6709\u88ab\u4e00\u4e2a $[l',r']$ \u8986\u76d6\uff0c\u5219\u65e0\u6cd5\u627e\u5230\u4e00\u79cd\u65b9\u6848\u3002\uff08\u5982\u679c\u5b58\u5728\u4e00\u4e2a $[l',r']$ \u8986\u76d6\u4e86\u767d\u8272\u70b9\uff0c\u5c31\u53ef\u4ee5\u9009\u62e9\u8fd9\u4e2a $[l',r']$ \u5c06\u5176\u533a\u95f4\u67d3\u9ed1\uff0c\u5982\u679c\u6240\u6709\u7684\u767d\u8272\u70b9\u90fd\u5b58\u5728\u4e00\u4e2a $[l',r']$ \u5c06\u5176\u8986\u76d6\uff0c\u5219\u6240\u6709\u7684\u767d\u8272\u70b9\u90fd\u80fd\u88ab\u67d3\u9ed1\u3002\uff09\r\n\r\n\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u6b21 $1$ \u64cd\u4f5c\u62bd\u8c61\u4e3a\u5bf9 $[l',r']$ \u8fd9\u4e2a\u533a\u95f4\u4e2d $+1$\uff0c\u64a4\u56de\u64cd\u4f5c\u5c31\u662f\u5bf9 $[l',r']$ \u8fd9\u4e2a\u533a\u95f4 $-1$\uff0c\u800c\u6700\u540e\u8981\u67e5\u8be2\u7684\u662f\u6240\u6709\u767d\u8272\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5c06\u9ed1\u8272\u70b9\u9884\u5904\u7406\u4e3a\u4e00\u4e2a\u5927\u503c\u540e\u67e5\u8be2\u5168\u5c40\u6700\u5c0f\u503c\u4ee3\u66ff\u3002\u4f7f\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u5373\u53ef\u7ef4\u62a4\u3002\u800c\u81f3\u4e8e\u627e\u5230\u957f\u5ea6\u6700\u957f\u7684\u9ed1\u8272\u70b9\u5bf9\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e8c\u5206\u67e5\u8be2\uff0c\u9a8c\u9898\u4eba\u5c0f\u6ce2\u5199\u4e86\u500d\u589e\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u540c\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <algorithm>\r\nusing namespace std;\r\nint n,q,pos[500050],col[500050],cnt,L[500050],R[500050];\r\nstruct point\r\n{\r\n    int pos,id;\r\n    bool operator < (const point &rhs) const\r\n    {\r\n        return pos<rhs.pos;\r\n    }\r\n}pt[500050];\r\nstruct SegTree\r\n{\r\n    int l,r,val,tag;\r\n}t[2000050];\r\ninline void Push_Up(int id)\r\n{\r\n    t[id].val=min(t[id<<1].val,t[id<<1|1].val);\r\n}\r\ninline void Push_Down(int id)\r\n{\r\n    if (t[id].tag)\r\n    {\r\n        t[id<<1].val+=t[id].tag;\r\n        t[id<<1|1].val+=t[id].tag;\r\n        t[id<<1].tag+=t[id].tag;\r\n        t[id<<1|1].tag+=t[id].tag;\r\n        t[id].tag=0;\r\n    }\r\n}\r\ninline void Build(int id,int l,int r)\r\n{\r\n    t[id].l=l;\r\n    t[id].r=r;\r\n    if (l==r)\r\n    {\r\n        t[id].val=(col[l]?1<<30:0);\r\n        return;\r\n    }\r\n    int mid=(l+r)>>1;\r\n    Build(id<<1,l,mid);\r\n    Build(id<<1|1,mid+1,r);\r\n    Push_Up(id);\r\n}\r\ninline void Change(int id,int l,int r,int val)\r\n{\r\n    if (l<=t[id].l && t[id].r<=r)\r\n    {\r\n        t[id].tag+=val;\r\n        t[id].val+=val;\r\n        return;\r\n    }\r\n    Push_Down(id);\r\n    int mid=(t[id].l+t[id].r)>>1;\r\n    if (r<=mid)\r\n        Change(id<<1,l,r,val);\r\n    else if (l>mid)\r\n        Change(id<<1|1,l,r,val);\r\n    else\r\n    {\r\n        Change(id<<1,l,mid,val);\r\n        Change(id<<1|1,mid+1,r,val);\r\n    }\r\n    Push_Up(id);\r\n}\r\ninline int Query()\r\n{\r\n    return t[1].val;\r\n}\r\nint main()\r\n{\r\n    cin >> n >> q;\r\n    for (int i=1;i<=n;i++)\r\n        cin >> pos[i];\r\n    pt[0]=(point){-1<<30,0};\r\n    for (int i=1;i<=n;i++)\r\n    {\r\n        cin >> col[i];\r\n        if (col[i]==1)\r\n            pt[++cnt]=(point){pos[i],i};\r\n    }\r\n    pt[cnt+1]=(point){1<<30,n+1};\r\n    col[0]=col[n+1]=true;\r\n    Build(1,0,n+1);\r\n    puts(Query()>=1?\"YES\":\"NO\");\r\n    for (int i=1;i<=q;i++)\r\n    {\r\n        int op;\r\n        cin >> op;\r\n        if (op==1)\r\n        {\r\n            cin >> L[i] >> R[i];\r\n            int x=lower_bound(pt,pt+cnt+2,(point){L[i],0})-pt;\r\n            int y=upper_bound(pt,pt+cnt+2,(point){R[i],0})-pt-1;\r\n            x=pt[x].id,y=pt[y].id;\r\n            if (x<=y)\r\n                Change(1,x,y,1);\r\n        }\r\n        else\r\n        {\r\n            int id;\r\n            cin >> id;\r\n            int x=lower_bound(pt,pt+cnt+2,(point){L[id],0})-pt;\r\n            int y=upper_bound(pt,pt+cnt+2,(point){R[id],0})-pt-1;\r\n            x=pt[x].id,y=pt[y].id;\r\n            if (x<=y)\r\n                Change(1,x,y,-1);\r\n        }\r\n        puts(Query()>=1?\"YES\":\"NO\");\r\n    }\r\n    return 0;\r\n}\r\n```",
        "postTime": 1659864138,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u7834\u788e\u7684\u5386\u53f2"
    },
    {
        "content": "## $\\texttt{Description}$\n\n\u7ed9\u5b9a\u6570\u8f74\u4e0a\u82e5\u5e72\u4e2a\u975e\u9ed1\u5373\u767d\u7684\u7279\u6b8a\u70b9\uff0c\u8be2\u95ee\u521d\u59cb\u65f6\u4ee5\u53ca\u6bcf\u6b21\u64cd\u4f5c\u540e\u662f\u5426\u53ef\u4ee5\u5c06\u6574\u4e2a\u7ebf\u6bb5\u67d3\u9ed1\u3002\u7ed9\u5b9a\u4e00\u4e9b\u7ebf\u6bb5\uff0c\u82e5\u7ebf\u6bb5\u7684\u5de6\u53f3\u65ad\u70b9\u90fd\u662f\u9ed1\u8272\u70b9\u5373\u53ef\u5c06\u6570\u8f74\u4e0a\u8fd9\u4e00\u6bb5\u67d3\u9ed1\uff08\u521d\u59cb\u65f6\u6ca1\u6709\u4efb\u4f55\u7ebf\u6bb5\uff09\u3002\u8981\u6c42\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n- \u5bf9\u4e8e $l \\le x \\le y \\le r$\uff0c\u82e5 $x$ \u548c $y$ \u90fd\u662f\u767d\u70b9\u6216\u9ed1\u70b9\uff0c\u5219\u6dfb\u52a0\u4e00\u6761\u4ee5 $x$ \u548c $y$ \u4e3a\u7aef\u70b9\u7684\u7ebf\u6bb5\u3002\n- \u64a4\u53bb\u7b2c $x$ \u52a0\u5165\u7684\u6240\u6709\u7ebf\u6bb5\u3002\n\n## $\\texttt{Solution}$\n\n\u9996\u5148\uff0c\u666e\u901a\u70b9\u5728\u9898\u76ee\u4e2d\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u666e\u901a\u70b9\u5168\u90e8\u5ffd\u89c6\uff0c\u90a3\u4e48\u53ea\u5269\u4e0b\u4e86\u767d\u70b9\u548c\u9ed1\u70b9\u3002\u540c\u65f6\uff0c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5bf9\u4e8e\u7aef\u70b9\u4e3a\u767d\u8272\u7684\u65f6\u5019\u4e5f\u6ca1\u6709\u7528\uff0c\u56e0\u4e3a\u65e0\u6cd5\u5c06\u8fd9\u6761\u7ebf\u6bb5\u67d3\u9ed1\u3002\n\n\u5728\u5f53\u524d\u9636\u6bb5\uff0c\u82e5\u70b9 $x$ \u53ef\u4ee5\u88ab\u67d3\u9ed1\uff0c\u90a3\u4e48\u5c31\u4ee4 $t_x$ \u4e0a\u52a0 $1$\uff0c\u5426\u5219\u4e3a $0$\u3002\u82e5\u5bf9\u4e8e\u4efb\u610f\u6574\u6570 $1 \\le i \\le n$ \uff0c\u90fd\u6709 $t_x > 0$\uff0c\u5219\u8f93\u51fa `Yes`\uff0c\u5426\u5219\u8f93\u51fa `No`\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u64cd\u4f5c\uff0c\u867d\u7136\u770b\u4e0a\u53bb\u52a0\u5165\u4e86\u5f88\u591a\u6761\u7ebf\u6bb5\uff0c\u5176\u5b9e\u771f\u6b63\u6709\u7528\u7684\u53ea\u6709\u4e00\u6761\u3002\u82e5 $x$ \u4e3a\u5927\u4e8e\u7b49\u4e8e $l$ \u7684\u6700\u5c0f\u6574\u6570\uff0c$y$ \u4e3a\u5c0f\u4e8e\u7b49\u4e8e $r$ \u7684\u6700\u5927\u6574\u6570\uff0c\u4e14 $x$ \u548c $y$ \u90fd\u662f\u9ed1\u70b9\uff0c\u5219\u4ee5 $x$ \u548c $y$ \u4e3a\u65ad\u70b9\u7684\u8fd9\u6761\u7ebf\u6bb5\u662f\u552f\u4e00\u6709\u7528\u7684\u3002\u56e0\u4e3a\u540c\u4e00\u64cd\u4f5c\u4e2d\uff0c\u80fd\u67d3\u9ed1\u6570\u8f74\u7684\u7ebf\u6bb5\uff0c\u4e00\u5b9a\u88ab\u8fd9\u6761\u7ebf\u6bb5\u5305\u542b\u4e86\u3002\u5176\u4e2d\uff0c$x'$ \u548c $y'$ \u53ef\u4ee5\u4e8c\u5206\u67e5\u8be2\u3002\n\n\u5bf9\u4e8e\u64a4\u9500\u64cd\u4f5c\uff0c\u540c\u6837\uff0c\u64a4\u9500\u6389\u7b2c $x$ \u6b21\u64cd\u4f5c\u6700\u6709\u7528\u7684\u7ebf\u6bb5\u5373\u53ef\u3002\n\n\u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u975e\u5e38\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6240\u6709\u7684\u7279\u6b8a\u70b9\uff0c\u82e5\u52a0\u5165\u4e00\u6761\u4ee5 $x$ \u548c $y$ \u4e3a\u7aef\u70b9\u7684\u7ebf\u6bb5\uff0c\u5219\u4ee4 $x'$ \u548c $y'$ \u5206\u522b\u4e3a $x$ \u548c $y$ \u5728\u6240\u6709\u7279\u6b8a\u70b9\u7684\u4f4d\u7f6e\uff08\u7b2c\u51e0\u4e2a\uff09\uff0c\u7136\u540e\u5728\u533a\u95f4 $[x', y']$ \u52a0\u4e0a $1$\uff0c\u540c\u65f6\u8bb0\u5f55 $x'$ \u548c $y'$\u3002\u64a4\u9500\u64cd\u4f5c\u65f6\uff0c\u5728\u533a\u95f4 $[x', y']$ \u51cf\u53bb $1$ \u5373\u53ef\u3002\u6bcf\u6b21\u64cd\u4f5c\u7ed3\u675f\u540e\uff0c\u67e5\u8be2\u6240\u6709\u533a\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u82e5\u5927\u4e8e $0$\uff0c\u5219\u8bf4\u660e\u6240\u6709\u7684\u70b9\u90fd\u53ef\u4ee5\u88ab\u6d82\u6210\u9ed1\u8272\uff0c\u53cd\u4e4b\u4e0d\u884c\u3002\n\n\u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316\uff0c\u82e5\u5f00\u59cb\u7684\u65f6\u5019\u662f\u9ed1\u8272\u8282\u70b9\uff0c\u8d4b\u503c\u4e3a\u975e $0$\u3002\n\n$color_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u7279\u6b8a\u8282\u70b9\u662f\u5426\u4e3a\u9ed1\u8272\uff0c$points_i$ \u8bb0\u5f55\u4e86\u7b2c $i$ \u4e2a\u9ed1\u8272\u8282\u70b9\u5728\u6570\u8f74\u4e2d\u7684\u4f4d\u7f6e\u4ee5\u53ca\u8fd9\u662f\u7b2c\u51e0\u4e2a\u9ed1\u8272\u8282\u70b9\u3002\n\n```cpp\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int N = 6e5;\nconst int INF = 1e9 + 10;\n\nint n, q;\nint cnt = 0;\nint a[N], color[N];\nint L[N], R[N];\n\nstruct coord {\n    int num;//num \u5b58\u50a8\u7684\u662f\u5728\u6570\u8f74\u4e2d\u7684\u4f4d\u7f6e\n    int id;//id \u5b58\u50a8\u7684\u662f\u8fd9\u4e2a\u9ed1\u70b9\u662f\u4ece\u5de6\u5230\u53f3\u7684\u7b2c\u51e0\u4e2a\u9ed1\u70b9\n    bool operator < (const coord &x) const {\n        return num < x.num;\n    }//\u91cd\u8f7d\u5c0f\u4e8e\u53f7\uff0c\u4e3a\u4e86\u540e\u9762\u7684\u4e8c\u5206\n} points[N];\n\nstruct SegmentTree {\n    int l, r;\n    int dat, add;\n} t[N * 4];\n\nvoid push_up(SegmentTree &fa, SegmentTree ls, SegmentTree rs) {\n    fa.dat = min(ls.dat, rs.dat);\n} \n\nvoid build(int p, int l, int r) {\n    t[p].l = l, t[p].r = r;\n    if (l == r) { t[p].dat = (color[l] ? INF : 0); return; }\n    int mid = (t[p].l + t[p].r) >> 1;\n    build(p << 1, l, mid), build((p << 1) | 1, mid + 1, r);\n    push_up(t[p], t[p << 1], t[(p << 1) | 1]);\n}\n\nvoid spread(int p) {\n    if (t[p].add) {\n        t[p << 1].dat += t[p].add;\n        t[(p << 1) | 1].dat += t[p].add;\n        t[p << 1].add += t[p].add, t[(p << 1) | 1].add += t[p].add;\n        t[p].add = 0;\n    }\n}\n\nvoid change(int p, int l, int r, int v) {\n    if (l <= t[p].l && r >= t[p].r) {\n        t[p].dat += v;\n        t[p].add += v;\n        return;\n    }\n    spread(p);\n    int mid = (t[p].l + t[p].r) >> 1;\n    if (l <= mid) change(p << 1, l, r, v);\n    if (r > mid) change((p << 1) | 1, l, r, v);\n    push_up(t[p], t[p << 1], t[(p << 1) | 1]);\n}\n\nint ask() {\n    return t[1].dat;\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &q);\n    for (int i = 1; i <= n; i++) scanf(\"%d\", a + i);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", color + i);\n        if (color[i]) points[++cnt] = (coord){a[i], i};\n    }\n    build(1, 1, n);\n    if (ask()) printf(\"Yes\\n\");\n    else printf(\"No\\n\");\n    for (int i = 1; i <= q; i++) {\n        int op;\n        cin >> op;\n        if (op == 1) {\n            cin >> L[i] >> R[i];\n            int x = lower_bound(points + 1, points + 1 + cnt, (coord){L[i], 1}) - points;//\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e l \u7684\u9ed1\u70b9\u5728 color \u4e2d\u7684\u4e0b\u6807\n            int y = upper_bound(points + 1, points + 1 + cnt, (coord){R[i], 1}) - points - 1;//\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5927\u4e8e r \u7684\u9ed1\u70b9\u7684\u524d\u9762\u4e00\u4e2a\uff0c\u5373\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e y \u7684\u9ed1\u70b9\u5728 color \u7684\u4e0b\u6807\n            x = points[x].id, y = points[y].id;//\u8d4b\u503c\u4e3a\u7b2c\u51e0\u4e2a\u7279\u6b8a\u70b9\uff0c\u5373\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e0b\u6807\n            L[i] = x, R[i] = y;//\u8bb0\u5f55 x', y'\uff0c\u4fbf\u4e8e\u64a4\u9500\u64cd\u4f5c\n            if (x != -1 && y != -1 && x <= y) change(1, x, y, 1);\n        }\n        else {  \n            int id; cin >> id;\n            int x = L[id], y = R[id];\n            if (x != -1 && y != -1 && x <= y) change(1, x, y, -1);\n        }\n        if (ask()) printf(\"Yes\\n\");\n        else printf(\"No\\n\");\n    }\n    return 0;\n}\n\n```\n\n\n\n",
        "postTime": 1659944234,
        "uid": 574944,
        "name": "Micnation_AFO",
        "ccfLevel": 4,
        "title": "P8473 [Aya Round 1 H] \u7834\u788e\u7684\u5386\u53f2 \u9898\u89e3"
    }
]