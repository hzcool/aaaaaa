[
    {
        "content": "### **\u6700\u8fd1\u6bd4\u8f83\u61d2\u60f0\uff0c\u7136\u540e\u5b66\u4e86\u4e00\u6ce2pb_ds\u3002\u4e8e\u662f\uff0c\u672c\u9898\u5c31\u53ef\u4ee5\u7528pb_ds\u4e2d\u7684rb_tree\u505a\u4e86\uff0c\u666e\u901a\u5e73\u8861\u6811\u90a3\u9898\u4e5f\u7528pb_ds\u6c34\u4e86\u4e00\u6ce2ac\u3002\uff08noi\u8d5b\u5236\u4e0bpb_ds\u662f\u53ef\u4ee5\u7528\u7684\uff0c\u8054\u8d5b\u8c8c\u4f3c\u4e0d\u884c\u4e0d\u8fc7\u7528\u6765\u5bf9\u62cd\u662f\u86ee\u4e0d\u9519\u7684\u9009\u62e9\uff0csplay\u8fd8\u662f\u5f97\u638c\u63e1\u7684\u3002\uff09** \n## \u6240\u9700\u58f0\u660e\u53ca\u5934\u6587\u4ef6\uff1a\n```cpp\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\nusing namespace __gnu_pbds;\ntypedef tree<pt,null_type,less< pt >,rb_tree_tag,tree_order_statistics_node_update> rbtree;\n```\n## \u89e3\u91ca\u53ca\u7528\u9014\uff1a\n### int \u5173\u952e\u5b57\u7c7b\u578b\n### null_type\u65e0\u6620\u5c04(\u4f4e\u7248\u672cg++\u4e3anull_mapped_type)\n### less<int>\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n### rb_tree_tag \u7ea2\u9ed1\u6811\uff08splay_tree_tag\uff09\n### tree_order_statistics_node_update\u7ed3\u70b9\u66f4\u65b0\n### \u63d2\u5165t.insert();\n### \u5220\u9664t.erase();\n### Rank:t.order_of_key();\n### \u7b2cK\u503c:t.find_by_order();\n### \u524d\u9a71:t.lower_bound();\n### \u540e\u7ee7t.upper_bound();\n### a.join(b)b\u5e76\u5165a \u524d\u63d0\u662f\u4e24\u68f5\u6811\u7684key\u7684\u53d6\u503c\u8303\u56f4\u4e0d\u76f8\u4ea4\n### a.split(v,b)key\u5c0f\u4e8e\u7b49\u4e8ev\u7684\u5143\u7d20\u5c5e\u4e8ea\uff0c\u5176\u4f59\u7684\u5c5e\u4e8eb\n### T.lower_bound(x)   >=x\u7684min\u7684\u8fed\u4ee3\u5668\n### T.upper_bound((x)  >x\u7684min\u7684\u8fed\u4ee3\u5668\n### T.find_by_order(k) \u6709k\u4e2a\u6570\u6bd4\u5b83\u5c0f\u7684\u6570\n## \u4ee3\u7801\uff1a\n ```\n#include<cstdio>  \n#include<iostream>  \n#include<ext/pb_ds/assoc_container.hpp>  \n#include<ext/pb_ds/tree_policy.hpp>  \nusing namespace __gnu_pbds;  \nusing namespace std;  \nstruct node{  \n    int v,id;  \n    node(int a,int b){v=a;id=b;}  \n    bool operator >(node b) const  \n    {return v==b.v?id>b.id:v>b.v;}  \n};  \ntree<node,null_type,greater<node>,rb_tree_tag,tree_order_statistics_node_update> T,TE;  \nint main(){  \n    int n,m,k,s=0,q,ans=0;  \n    char c[10];  \n    scanf(\"%d%d\",&n,&m);  \n    while(n--){  \n        cin>>c[0];scanf(\"%d\",&k);  \n        if(*c=='I') {k+=s;if(k>=m) T.insert(node(k,n));}  \n        else if(*c=='A') m-=k,s-=k;  \n        else if(*c=='S'){  \n            m+=k,s+=k;  \n            T.split(node(m,-1),TE);  \n            ans+=TE.size();  \n        }  \n        else if(*c=='F')      \n            printf(k>T.size()?\"-1\\n\":\"%d\\n\",T.find_by_order(k-1)->v-s);  \n    }  \n    printf(\"%d\\n\",ans);  \n    return 0;  \n}  \n```",
        "postTime": 1520930045,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u849f\u84bb\u4e0d\u4f1aTreap,\u4e8e\u662f\u6709\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5199\u6cd5\u3002\n\n\u9996\u5148\u5efa\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u91cc\u9762\u7ef4\u62a4\u6bcf\u4e2a\u5de5\u8d44\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7528\u6765\u6c42\u7b2ck\u5927\u3002\n\n\u5bf9\u4e8e\u4fee\u6539\u5de5\u8d44\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u7528\u4fee\u6539min\u7684\u503c\u6765\u4ee3\u66ff\n\n\u5728\u7528\u4e00\u4e2a\u53d8\u91cfb\u8868\u793a\u5df2\u7ecf\u4fee\u6539\u7684\u5de5\u8d44\u7684\u603b\u91cf\uff0c\u6bcf\u6b21\u52a0\u5165\u5458\u5de5\u65f6\u5c06k\u51cf\u53bbb\n\n\u4e3a\u4e86\u9632\u6b62\u51cf\u5230\u8d1f\u6570\uff0c\u4e8e\u662f\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u503c\u90fd\u52a0\u4e0alen\n\n\u6ce8\u610f\uff1a\u5982\u679c\u67d0\u4e2a\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\u4f4e\u4e8e\u6700\u4f4e\u5de5\u8d44\u6807\u51c6,\u90a3\u4e48\u5c06\u4e0d\u8ba1\u5165\u6700\u540e\u7684\u7b54\u6848\u5185\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define N 400001\n#define len 200000\nusing namespace std;\n\nint n, m, la, mi, b, ans, lm;\nint a[N], tree[N << 2], tag[N << 2];\nchar s[10];\n\nvoid pushup(int rt)\n{\n    tree[rt] = tree[rt << 1] + tree[rt << 1 | 1];\n}\n\nvoid change(int rt, int l, int r, int x, int y)//\u5355\u70b9\u4fee\u6539\n{\n    if(l == r)\n    {\n        tree[rt] += y;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if(x <= mid) change(rt << 1, l, mid, x, y);\n    else change(rt << 1 | 1, mid + 1, r, x, y);\n    pushup(rt);\n}\n\nint query(int rt, int l, int r, int x, int y)//\u6c42\u503c\u57df\u5185\u7684\u6570\u91cf\n{\n    if(x <= l && r <= y) return tree[rt];\n    int mid = (l + r) >> 1, res = 0;\n    if(x <= mid) res += query(rt << 1, l, mid, x, y);\n    if(y > mid) res += query(rt << 1 | 1, mid + 1, r, x, y);\n    return res;\n}\n\nint js(int rt, int l, int r, int x)//\u6c42\u7b2ck\u5927\n{\n    if(l == r) return l;\n    int mid = (l + r) >> 1, l1 = -1, r1 = -1;\n    if(mi < l) l1 = tree[rt << 1];\n    else if(l <= mi && mi <= mid) l1 = query(rt << 1, l, mid, mi, mid);\n    else if(mid < mi && mi <= r) r1 = query(rt << 1 | 1, mid + 1, r, mi, r);\n    else r1 = tree[rt << 1 | 1];\n    //\u5de6\u8fb9\u6570\u91cf\u4e0e\u53f3\u8fb9\u6570\u91cf\n    if(r1 == -1) r1 = tree[rt] - l1;\n    l1 = tree[rt] - r1;\n    if(r1 >= x) return js(rt << 1 | 1, mid + 1, r, x);\n    else return js(rt << 1, l, mid, x - r1);\n}\n\nvoid ql(int rt, int l, int r, int x, int y)//\u6e05\u96f6\u64cd\u4f5c\n{\n    if(l == r)\n    {\n        tree[rt] = 0;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if(x <= mid && tree[rt << 1]) ql(rt << 1, l, mid, x, y);\n    if(y > mid && tree[rt << 1 | 1]) ql(rt << 1 | 1, mid + 1, r, x, y);\n    pushup(rt);\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m), lm = m, m += len;\n    for(int i = 1; i <= n; i++)\n    {\n        int x;\n        scanf(\"%s%d\", s, &x);\n        if(s[0] == 'I')\n        {\n            if(x < lm) continue;\n            change(1, 0, N - 1, x - b + len, 1);//\u52a0\u5165\u5458\u5de5\n        }\n        else if(s[0] == 'A') m -= x, b += x;//\u589e\u52a0\u5de5\u8d44\n        else if(s[0] == 'S')\n        {\n            m += x, b -= x;\n            if(m >= 1 && query(1, 0, N - 1, 0, m - 1) > 0) ans += query(1, 0, N - 1, 0, m - 1), ql(1, 0, N - 1, 0, m - 1);//\u8e22\u51fa\u5458\u5de5\n        }\n        else\n        {\n            if(x > query(1, 1, N - 1, m, N - 1)) puts(\"-1\");//\u5de5\u8d44\u5927\u4e8ek\u7684\u6570\u91cf\n            else printf(\"%d\\n\", js(1, 0, N - 1, x) + b - len);\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1562414593,
        "uid": 98468,
        "name": "abs001",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9[\u8fd9\u91cc](https://blog.csdn.net/A_Comme_Amour/article/details/79718898)\n\u9898\u76ee\n-\n\n[\u4f20\u9001\u95e8](http://www.lydsy.com/JudgeOnline/problem.php?id=1503)\n\n\u9898\u89e3\n-\n\n\u8fd9\u9053\u9898\u8fd8\u662f\u6bd4\u8f83\u597d\u7684\n\n\u5e73\u8861\u6811\u7b2c\u4e00\u9898\uff0c\u6240\u4ee5\u4ee3\u7801\u6253\u7684\u5e76\u4e0d\u719f\u7ec3\n\n\u9898\u76ee\u8981\u6c42\u4f7f\u7528\u4e00\u79cd\u652f\u6301\u70b9\u7684\u63d2\u5165\u3001\u5220\u9664\uff0c\u6c42\u540d\u6b21\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e73\u8861\u6811\u5f53\u7136\u662f\u9996\u9009\n\u9898\u76ee\u4e2d\u7684\u52a0\u51cf\u64cd\u4f5c\u90fd\u662f\u5bf9\u4e8e\u6240\u6709\u5458\u5de5\u7684\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u5bf9\u6240\u6709\u7684\u70b9\u8fdb\u884c\u4fee\u6539\uff0c\u4e8e\u662f\u6211\u4eec\u5728\u5f00\u4e00\u4e2a\u53d8\u91cf**delta**\uff0c\u7528\u6765\u8bb0\u5f55\u6240\u6709\u7684\u5458\u5de5\u7684\u5de5\u8d44\u7684\u53d8\u5316\u91cf\uff0c\u90a3\u4e48\u67d0\u4e2a\u5458\u5de5\u7684\u5b9e\u9645\u5de5\u8d44\u5c31\u662fx+delta\uff1b\n\n\u7136\u800c\u6211\u4eec\u8003\u8651\u65b0\u52a0\u5165\u7684\u5458\u5de5\uff0c\u5bf9\u5979\u52a0\u4e0a\u5386\u53f2\u7684delta\u663e\u7136\u662f\u4e0d\u5408\u9002\u7684\uff1b\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5904\u7406\uff1a\n\n\u5728\u5e73\u8861\u6811\u63d0\u524d\u63d2\u5165inf\u548c-inf\n\n**I\u547d\u4ee4\uff1a\u52a0\u5165\u4e00\u4e2a\u5458\u5de5** \u6211\u4eec\u5728\u5e73\u8861\u6811\u4e2d\u52a0\u5165k-minn\n\n**A\u547d\u4ee4\uff1a\u628a\u6bcf\u4f4d\u5458\u5de5\u7684\u5de5\u8d44\u52a0\u4e0ak** delta\u52a0k\u5373\u53ef\n\n**S\u547d\u4ee4\uff1a\u628a\u6bcf\u4f4d\u5458\u5de5\u7684\u5de5\u8d44\u6263\u9664k**  \u6b64\u65f6\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u4f1a\u4e0d\u4f1a\u5bfc\u81f4\u4e00\u5927\u6279\u5458\u5de5\u79bb\u5f00\uff1b\u6211\u4eec\u63d2\u5165minn-delta\uff0c\u7136\u540e\u4f7f\u5c0f\u4e8eminn-delta\u7684\u70b9\u4e00\u8d77\u79fb\u52a8\u5230\u6839\u7684\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\uff0c\u4e00\u4e3e\u6d88\u706d\uff1b\n\n**F\u547d\u4ee4\uff1a\u67e5\u8be2\u7b2ck\u591a\u7684\u5de5\u8d44** \u6ce8\u610f\u662f\u7b2ck\u591a\uff0cSplay\u64cd\u4f5c\uff1b\n\u8fd8\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff0c+2-2\u7b49\u7b49\uff1b\n\n\u4ee3\u7801\n-\n\n```\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int maxn=1000001;\nconst int inf=1e9;\n\nint n,minn,delta,f[maxn],ch[maxn][2],cnt[maxn],size[maxn],key[maxn],rt,sz;\n\nint read()\n{\n\tchar ch=getchar(); int now=0,f=1;\n\twhile (ch<'0' || ch>'9') {if (ch=='-') f=-1; ch=getchar();}\n\twhile (ch>='0' && ch<='9')\n\t{\n\t\tnow=(now<<1)+(now<<3)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn now*f;\n}\n\nvoid clear(int x)\n{\n\tf[x]=ch[x][0]=ch[x][1]=cnt[x]=key[x]=size[x]=0;\n}\nbool get(int x) {return ch[f[x]][1]==x;}\n\nvoid pushup(int x)\n{\n\tif (!x) return;\n\tsize[x]=cnt[x];\n\tif (ch[x][0]) size[x]+=size[ch[x][0]];\n\tif (ch[x][1]) size[x]+=size[ch[x][1]];\n}\n\nvoid rotate(int x)\n{\n\tint old=f[x],oldf=f[old],which=get(x);\n\tch[old][which]=ch[x][which^1]; f[ch[x][which^1]]=old;\n\tch[x][which^1]=old; f[old]=x;\n\tf[x]=oldf;\n\tif (oldf) ch[oldf][ch[oldf][1]==old] = x;\n\tpushup(x); pushup(old);\n}\n\nvoid splay(int x,int goal)\n{\n\tfor (int fa; (fa=f[x])!=goal; rotate(x))//\u8fd9\u91cc\u662f\u4e0d\u7b49\u4e8e \n\t\tif (f[fa]!=goal)\n\t\t\trotate(get(x)==get(fa)?fa:x);\n\tif (goal==0) rt=x;\n}\n\nvoid insert(int x)\n{\n\tif (rt==0)\n\t{\n\t\tsz++; key[sz]=x; rt=sz;\n\t\tcnt[rt]=size[rt]=1;\n\t\tf[rt]=ch[rt][0]=ch[rt][1]=0;\n\t\treturn;\n\t}\n\tint now=rt,fa=0;\n\twhile (1)\n\t{\n\t\tif (x==key[now])\n\t\t{\n\t\t\tcnt[now]++; pushup(fa); pushup(now); splay(now,0); return;\n\t\t}\n\t\tfa=now; now=ch[now][x>key[now]];\n\t\tif (now==0)\n\t\t{\n\t\t\tsz++; key[sz]=x;\n\t\t\tsize[sz]=cnt[sz]=1;\n\t\t\tf[sz]=fa;\n\t\t\tch[sz][0]=ch[sz][1]=0;\n\t\t\tch[fa][x>key[fa]]=sz;\n\t\t\tpushup(fa); splay(sz,0); return;//\u8fd9\u91cc\u9519\u4e86 \n\t\t}\n\t}\n}\n\nint id(int x)//\u67e5\u8be2x\u7684\u7f16\u53f7 \n{\n\tint now=rt;\n\twhile (1)\n\t{\n\t\tif (x==key[now]) return now;\n\t\telse\n\t\t{\n\t\t\tif (x<key[now]) now=ch[now][0];\n\t\t\telse now=ch[now][1];\n\t\t}\n\t}\n}\n\nint rnk(int x)//\u67e5\u8be2x\u7684\u6392\u540d\n{\n\tint now=rt,ans=0;\n\twhile (1)\n\t{\n\t\tif (x<key[now]) now=ch[now][0];\n\t\telse\n\t\t{\n\t\t\tans+=size[ch[now][0]];\n\t\t\tif (x==key[now])\n\t\t\t{\n\t\t\t\tsplay(now,0); return ans+1;//\u627e\u51fax\u7684\u6392\u540d\u5e76\u5c06\u5176\u65cb\u8f6c\u5230\u6839\n\t\t\t}\n\t\t\tans+=cnt[now];\n\t\t\tnow=ch[now][1];\n\t\t}\n\t}\n}\n\nint kth(int x)//\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570\n{\n\tint now=rt;\n\twhile (1)\n\t{\n\t\tif (ch[now][0] && x<=size[ch[now][0]])\n\t\t\tnow=ch[now][0];\n\t\telse\n\t\t{\n\t\t\tint tmp=size[ch[now][0]]+cnt[now];\n\t\t\tif (x<=tmp) return key[now];\n\t\t\tx-=tmp; now=ch[now][1];\n\t\t}\n\t}\n}\n\nint pre()\n{\n\tint now=ch[rt][0];\n\twhile (ch[now][1]) now=ch[now][1];\n\treturn now;\n}\nint next()\n{\n\tint now=ch[rt][1];\n\twhile (ch[now][0]) now=ch[now][0];\n\treturn now;\n}\n\nvoid del(int x)\n{\n\trnk(x);//\u5c06x\u65cb\u8f6c\u5230\u6839\n\tif (cnt[rt]>1) {cnt[rt]--; pushup(rt); return;}//\n\tif (!ch[rt][0] && !ch[rt][1]) {clear(rt); rt=0; return;}//\u8fd9\u91cc\u7684rt\u548cx\u5199\u6df7\u4e86\uff0c\u6709\u6d6a\u8d39\u65f6\u95f4 \n\tif (!ch[rt][0]) {\n\t\tint oldrt=rt; rt=ch[rt][1]; f[rt]=0; clear(oldrt); return;\n\t}\n\tif (!ch[rt][1]) {\n\t\tint oldrt=rt; rt=ch[rt][0]; f[rt]=0; clear(oldrt); return;\n\t}\n\tint oldrt=rt; int leftbig=pre();\n\tsplay(leftbig,0);\n\tch[rt][1]=ch[oldrt][1];\n\tf[ch[oldrt][1]]=rt;\n\tclear(oldrt);\n\tpushup(rt);\n}\n\nint main()\n{\n \tn=read(); minn=read();\n\tint totadd=0,totnow=0,ans=0;\n \tchar opt[10]; int k;\n\tinsert(inf); insert(-inf);\n \tfor (int i=1; i<=n; i++)\n \t{\n \t\tscanf(\"%s%d\",opt,&k);\n \t\tif (opt[0]=='I')\n\t\t{\n\t\t\tif (k<minn) continue;\n\t\t\tinsert(k-delta);\n\t\t\ttotadd++;\n\t\t} \n \t\tif (opt[0]=='A') delta+=k;\n\t\tif (opt[0]=='S')\n\t\t{\n\t\t\tdelta-=k;\n\t\t\tinsert(minn-delta);\n\t\t\tint a=id(-inf); int b=id(minn-delta);\n\t\t\tsplay(a,0);\n\t\t\tsplay(b,a);\n\t\t\tch[ ch[rt][1] ][0]=0;\n\t\t\tdel(minn-delta);\n\t\t}\n\t\tif (opt[0]=='F')\n\t\t{\n\t\t\ttotnow=rnk(inf)-2;\n\t\t\tif (totnow<k) {printf(\"-1\\n\"); continue;}\n\t\t\tint ans=kth(totnow+2-k);\n\t\t\tprintf(\"%d\\n\",ans+delta);//\u6700\u540e\u518d\u52a0\u4e0a\u7d2f\u52a0\u503cdelta\n\t\t}\n\t}\n\ttotnow=rnk(inf)-2;\n\tans=totadd-totnow;\n\tprintf(\"%d\",ans);\n \treturn 0;\n}\n```\n\n\u603b\u7ed3\n-\n\n\u79ef\u7d2fSplay\u7684\u64cd\u4f5c\uff1a\u67e5\u8be2\u533a\u95f4\u5185\u5c0f\u4e8e\u67d0\u4e2a\u6570\u7684\u70b9\u4e00\u8d77\u5220\u6389\uff1b\n\u52a0\u5165+-inf\u4f5c\u4e3a\u6839\u4e5f\u53ef\u4ee5\u67e5\u8be2\u5e73\u8861\u6811\u4e2d\u5143\u7d20\u4e2a\u6570\u7684\u601d\u60f3\uff1b\n\n\u201c\u7ebf\u4e0b\u201d\u7ef4\u62a4\u5dee\u503c\u7684\u601d\u60f3\uff1b",
        "postTime": 1522154443,
        "uid": 48036,
        "name": "\u79cb\u65e5\u79c1\u8bed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "**\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u5927\u6982\u662f\u4e00\u9898$treap$\u6a21\u677f**\n\n**\u4eba\u8bdd\u9898\u610f\uff1a**\n\n\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570\uff1a$n$\u548c$min$\n\n\u4f60\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u7ef4\u62a4\u4ee5\u4e0b$n$\u4e2a\u64cd\u4f5c$(k$\u5df2\u7ed9\u51fa$)$\uff1a\n\n$(I$\u547d\u4ee4$)1.$\u8f93\u5165$k,$ \u82e5$k>=min,$ \u5219\u63d2\u5165$k.$\n\n$(A$\u547d\u4ee4$)2.$\u5c06\u6bcf\u4e2a\u6570\u52a0\u4e0a$k.$\n\n$(S$\u547d\u4ee4$)3.$\u5c06\u6bcf\u4e2a\u6570\u51cf\u53bb$k,$\u5e76\u5220\u9664\u6240\u6709$<min$\u7684\u6570$.$\n\n$(F$\u547d\u4ee4$)4.$\u67e5\u8be2\u7b2c$k$\u5927\u7684\u6570$($\u6ce8\u610f\u4e0d\u662f\u7b2c$k$\u5c0f$)$\n\n\u6700\u540e\u8f93\u51fa\u6709\u51e0\u4e2a\u6570\u88ab\u5220\u9664\u4e86$($\u8981\u52a0\u4e0a$I$\u547d\u4ee4\u4e2d\u6ca1\u6709\u63d2\u5165\u7684\u6570$)$\n\n\u5f88\u663e\u7136\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f$treap$\u53ef\u4ee5\u7ef4\u62a4\u7684$,$ \u63a5\u4e0b\u6765\u6211\u4eec\u9010\u4e2a\u64cd\u4f5c\u6765\u5206\u6790$:$\n\n\u9996\u5148\uff0c\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a$sum$\u53d8\u91cf\u6765\u7edf\u8ba1\u6570\u5b57\u7684\u52a0\u51cf\u5e45\u5ea6\uff0c\u4f5c\u7528\u89c1\u4e0b$.$\n\n$I$\u547d\u4ee4$:$\u5e38\u89c4$insert$\u64cd\u4f5c\n\n$A$\u547d\u4ee4$:$\u5c06$min$\u51cf\u53bb$k,$ \u5c06$sum$\u52a0\u4e0a$k,$ \u56e0\u4e3a\u6bcf\u4e2a\u6570\u90fd\u52a0$k$\uff0c\u800c\u6211\u4eec\u901a\u8fc7\u6bcf\u4e2a\u6570\u8981\u6c42\u7684\u662f\u7b2c$k$\u5927\n\n\uff08\u4e0d\u5f71\u54cd\uff09\u4ee5\u53ca\u662f\u5426$<min,$ \u6240\u4ee5\u5982\u6b64\u64cd\u4f5c\n\n$S$\u547d\u4ee4$:$\u5c06$min$\u52a0\u4e0a$k,$ \u5c06$sum$\u51cf\u53bb$k($\u7406\u7531\u4e0e$A$\u547d\u4ee4\u76f8\u540c$),$ \u7136\u540e\u8fdb\u884c\u4e00\u904d$while$\u5faa\u73af$,$ \u53ea\n\n\u8981\u5f53\u524d\u6709\u5c0f\u4e8e$min$\u7684\u6570\u5b57\uff0c\u5c31\u5220\u6389$(pre$\u548c$delete$\u64cd\u4f5c$)$\n\n$ps: pre$ \u64cd\u4f5c\u8981\u8003\u8651\u7b49\u4e8e$min$\u7684\u6570\u4e5f\u8981\u5220\u9664\u7684\u60c5\u51b5 \n\n$F$\u547d\u4ee4$:$\u5e38\u89c4$find-rank$\u64cd\u4f5c\n\n\u4e0a\u4ee3\u7801\u4e4b\u524d\u51e0\u70b9\u63d0\u9192$:$\n\n$1.$ \u6700\u540e\u4e00\u884c\u8f93\u51fa\u8df3\u69fd\u7684\u4eba\u7684\u4e2a\u6570\u800c\u4e0d\u662f\u5269\u4e0b\u4eba\u7684\u4e2a\u6570\n\n$2.$ \u6709\u4eba\u521d\u59cb\u5de5\u8d44\u76f8\u540c\uff0c\u6240\u4ee5\u8981\u6539\u52a8$pre$\u51fd\u6570\n\n$3. F$ \u64cd\u4f5c\u662f\u6c42\u7b2c$k$\u5927\u7684\u6570\u4e0d\u662f\u7b2c$k$\u5c0f\n\n\u4ee3\u7801$:$\n```\n#include <cstdlib>\n#include <iostream>\nusing namespace std;\nint n,minn,x,tot,root,INF=0x7fffffff,num,sum,s;\n//n,minn\u4e3a\u8f93\u5165\uff0copt\u4e3a\u64cd\u4f5c\u79cd\u7c7b\uff0cx=\u9898\u9762\u4e2d\u7684k\n//tot\u4e3a\u63d2\u5165\u4e2d\u7528\u5230\u7684,root=\u6811\u6839(-INF)\n//s=\u8fdb\u5165\u516c\u53f8\u7684\u603b\u4eba\u6570,num=\u6700\u540e\u7559\u5728\u516c\u53f8\u7684\u4eba\u6570 \nchar opt;\nstruct treap\n{\n\tint l,r,cnt,siz,val,dat;\n}a[100001];\nvoid update(int p)\n{\n\ta[p].siz=a[p].cnt+a[a[p].l].siz+a[a[p].r].siz;\n}\nint New(int val)\n{\n\ta[++tot].val=val;\n\ta[tot].dat=rand();\n\ta[tot].cnt=a[tot].siz=1;\n\treturn tot;\n}\nvoid build()\n{\n\tNew(-INF);New(INF);\n\troot=1;a[1].r=2;\n\tupdate(root);\n}\nvoid zig(int &p)\n{\n\tint q=a[p].l;\n\ta[p].l=a[q].r;\n\ta[q].r=p;p=q;\n\tupdate(a[p].r);update(p);\n}//right rotate\nvoid zag(int &p)\n{\n\tint q=a[p].r;\n\ta[p].r=a[q].l;\n\ta[q].l=p;p=q;\n\tupdate(a[p].l);update(p);\n}//left rotate\nvoid ins(int &p,int val)\n{\n\tif(p==0)\n\t{\n\t\tp=New(val);\n\t\tupdate(p);\n\t\treturn;\n\t}\n\tif(val==a[p].val)\n\t{\n\t\ta[p].cnt++;\n\t\tupdate(p);\n\t\treturn;\n\t}\n\tif(val<a[p].val)\n\t{\n\t\tins(a[p].l,val);\n\t\tif(a[p].dat<a[a[p].l].dat)zig(p);//right rotate\n\t}\n\tif(val>a[p].val)\n\t{\n\t\tins(a[p].r,val);\n\t\tif(a[p].dat<a[a[p].r].dat)zag(p);//left rotate \n\t}\n\tupdate(p);\n}//\u63d2\u5165\u64cd\u4f5c \nvoid del(int &p,int val)\n{\n\tif(p==0)return;\n\tif(a[p].val==val)\n\t{\n\t\tif(a[p].cnt>1){a[p].cnt--;update(p);return;}\n\t\tif(a[p].l!=0||a[p].r!=0)\n\t\t{\n\t\t\tif(a[p].r==0||a[a[p].l].dat>a[a[p].r].dat){zig(p);del(a[p].r,val);}\n\t\t\telse{zag(p);del(a[p].l,val);}\n\t\t\tupdate(p);\n\t\t}\n\t\telse p=0;\n\t\treturn;\n\t}\n\tif(val<a[p].val)del(a[p].l,val);\n\telse del(a[p].r,val);\n\tupdate(p);\n}//\u5220\u9664\u64cd\u4f5c \nint find_rank(int p,int val)\n{\n\tif(p==0)return -1;\n\tif(a[a[p].l].siz>=val)return find_rank(a[p].l,val);\n\tif(a[a[p].l].siz+a[p].cnt>=val)return a[p].val;\n\treturn find_rank(a[p].r,val-a[p].cnt-a[a[p].l].siz);\n}//\u67e5\u627e\u64cd\u4f5c \nint pre(int val)\n{\n    int p=root,ans=1;\n    while(p!=0)\n    {\n    \tif(a[p].val==val)\n    \t{\n\t\t\tans=p;\n    \t\tbreak;\n    \t}\n    \tif(a[p].val<val&&a[p].val>a[ans].val)ans=p;\n    \tif(a[p].val<val)p=a[p].r;\n    \telse p=a[p].l;\n    }\n    return a[ans].val;\n}//\u6c42\u524d\u9a71 \nint main()\n{\n\tcin>>n>>minn;build();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>opt>>x;\n\t\tif(opt=='I')if(x-sum>=minn)ins(root,x-sum),num++,s++;\n\t\tif(opt=='F')\n\t\t{\n\t\t\tif(num<x)cout<<-1<<endl;\n\t\t\telse cout<<find_rank(root,num-x+2)+sum<<endl;\n\t\t}\n\t\tif(opt=='A')minn-=x,sum+=x;\n\t\tif(opt=='S')\n\t\t{\n\t\t\tminn+=x;sum-=x;\n\t\t\tint a1=minn-1,a2;\n\t\t\twhile(pre(a1)!=-INF)\n\t\t\t{\n\t\t\t\ta2=a1;a1=pre(a1);\n\t\t\t\tdel(root,pre(a2));\n\t\t\t\tnum--;\n\t\t\t}\n\t\t}\n\t}\n\tcout<<s-num<<endl;\n} \n```",
        "postTime": 1532941187,
        "uid": 14559,
        "name": "AFOier",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053\u6bd4\u8f83\u68d2\u7684treap\u6a21\u7248\u9898,\u4e8e\u662f\u6211\u5c31\u7528fhq-treap A\u4e86\u3002\u2299\ufe4f\u2299b\u6c57\n\n\u601d\u8def\uff1a\n1, I \u64cd\u4f5c\uff0c\u5355\u70b9\u63d2\u5165\uff0c\u4e0d\u8fc7\u8981\u5224\u65ad\u80fd\u5426\u52a0\u5165\uff0c\u4f4e\u4e8e\u5de5\u8d44\u7684\u6700\u4f4e\u503c\u65f6\uff0c\u76f4\u63a5\u6dd8\u6c70\u6389\u3002  \n  \n2,\u8fd9\u91cc\u6211\u4eec\u628a A,S,F \u64cd\u4f5c\u4e00\u8d77\u8bb2;  \n  \n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2adelta\u628a\u5de5\u8d44\u7684\u8c03\u6574\u8bb0\u5f55\u4e0b\u6765\u3002  \n  \n\u90a3\u4e48\u5f53\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u65b0\u8282\u70b9\u65f6\u6dfb\u52a0\u7684\u5c31\u4e0d\u662fx,\u800c\u662fx-delta\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5229\u7528delta\u8fdb\u884cS\u64cd\u4f5c\u4e86\u3002\n  \nS\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u8c03\u6574delta\u540e\uff0c\u6211\u4eec\u5c31\u8981\u628a\u5c0f\u4e8eminn-delta\u7684\u5458\u5de5\u5168\u90e8\u5220\u6389\uff0c\u6211\u4eec\u628a\u6811\u5206\u88c2\u540e\u76f4\u63a5\u5220\u6389\u5de6\u5b50\u6811\u5373\u53ef\u3002   \n  \nF\u64cd\u4f5c\u8981\u6ce8\u610f\u7684\u53ea\u6709\u67e5\u8be2\u540e\u8981\u8f93\u51faval[x]+delta\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u8f93\u51fa\u73b0\u5728\u7684\u503c  \n  \n\u4e0b\u9762\u6211\u4eec\u653e\u4e00\u4e0b\u4ee3\u7801\uff08\u542b\u6ce8\u91ca\uff09\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#define maxn 110000\nusing namespace std;\nint ch[maxn][2];//\u5de6\u53f3\u513f\u5b50 \nint val[maxn];//\u539f\u672c\u7684\u503c \nint pri[maxn];//\u968f\u673a\u503c \nint size[maxn];//\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u8ddf\u7684\u6811\u7684\u5927\u5c0f \nint sz;//\u6ca1\u592a\u5927\u5375\u7528\uff0c\u53ea\u662f\u4e3a\u4e86\u65b0\u5efa\u8282\u70b9\u4e0d\u91cd\u590d\u800c\u5df2 \nvoid update(int x){size[x]=1+size[ch[x][0]]+size[ch[x][1]];}//\u66f4\u65b0 \nint new_node(int v)//\u65b0\u5efa\u8282\u70b9 \n{\n    size[++sz]=1;\n    val[sz]=v;\n    pri[sz]=rand();\n    return sz;\n}\nint merge(int x,int y)//\u5408\u5e76 \n{\n    if(!x||!y)return x+y;\n    if(pri[x]<pri[y])\n    {\n        ch[x][1]=merge(ch[x][1],y);\n        update(x);\n        return x;\n    }\n    else\n    {\n        ch[y][0]=merge(x,ch[y][0]);\n        update(y);\n        return y;\n    }\n}\nvoid split(int now,int k,int&x,int&y)//\u5206\u88c2 \n{\n    if(!now)x=y=0;\n    else\n    {\n        if(val[now]<=k)\n            x=now,split(ch[now][1],k,ch[now][1],y);\n        else\n            y=now,split(ch[now][0],k,x,ch[now][0]);\n        update(now);\n    }\n}\nint kth(int now,int k)//\u627e\u7b2ck\u540d \n{\n    while(1)\n    {\n        if(k<=size[ch[now][0]])\n            now=ch[now][0];\n        else if(k==size[ch[now][0]]+1)\n            return now;\n        else k-=size[ch[now][0]]+1,now=ch[now][1];\n    }\n}\nint main()\n{\n    srand(99);\n    int n,minn;scanf(\"%d%d\",&n,&minn);\n    int root=0,x,y,z;\n    int delta=0,leave=0;\n    for(int i=1;i<=n;i++)\n    {\n        char st[2];scanf(\"%s\",st);\n        int a;scanf(\"%d\",&a);\n        if(st[0]=='I')\n        {\n        \tif(a>=minn)//\u6ca1\u6709\u5230\u8fbe\u5de5\u8d44\u5e95\u7ebf\u7684\u76f4\u63a5\u53eb\u4ed6\u8d70\u5f00\uff0c\u4ee5\u514d\u5f71\u54cd\u7684leave\u7684\u7b54\u6848 \n        \t{\n        \t\ta-=delta;//\u8981\u51cf\u53bbdelta\uff0c\u8fd9\u6837\u624d\u80fd\u65b9\u4fbf\u4ee5\u540e\u7684\u67e5\u8be2 \n        \t\tsplit(root,a,x,y);\n        \t\troot=merge(x,merge(new_node(a),y));\n\t\t\t}\n\t\t}\n\t\telse if(st[0]=='A')delta+=a;\n\t\telse if(st[0]=='S')\n\t\t{\n\t\t\tdelta-=a;\n\t\t\tsplit(root,minn-delta-1,x,y);//minn-delta-1\u4ee3\u8868\u5c0f\u4e8eminn-delta\u7684\u6570 \n\t\t\troot=y;//\u76f4\u63a5\u820d\u5f03\u5de6\u5b50\u6811 \n\t\t\tleave+=size[x];//\u52a0\u4e0a\u88ab\u5220\u53bb\u7684\u8282\u70b9\u6570\u91cf \n\t\t}\n        else if(st[0]=='F')\n        {\n        \tif(size[root]<a)printf(\"-1\\n\");//\u5982\u679c\u8282\u70b9\u603b\u6570\u6bd4a\u8fd8\u5c0f\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u8f93\u51fa-1 \n        \telse printf(\"%d\\n\",val[kth(root,size[root]-a+1)]+delta);\n\t\t\t//\u8bb0\u5f97\u52a0\u4e0adelta\uff0c\u4e0d\u7136\u5c31\u4e0d\u662f\u4fee\u6539\u4e4b\u540e\u7684\u503c\u4e86 \n\t\t\t//\u7b2ck\u5927\u5c31\u662f\u627e\u6392\u540d\u7b2csize[root]-a+1(\u603b\u6570-a+1)\u7684\u6570 \n\t\t}\n    }\n    printf(\"%d\\n\",leave);\n}\n```",
        "postTime": 1537757588,
        "uid": 58164,
        "name": "lijianyangyf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "### \u8fd9\u9053\u9898\u8981\u6c42\u80fd\u591f\u652f\u6301\u63d2\u5165\u3001\u4fee\u6539\u3001\u6c42\u7b2cK\u5927\u7684\u6570\u636e\u7ed3\u6784\uff0c\u9996\u9009\u7684\u6570\u636e\u7ed3\u6784\u5f53\u7136\u662f\u5e73\u8861\u6811.\n\n### \u672c\u849f\u84bb\u662f\u7528Splay\u505a\u7684\uff0c\u4f46\u6211\u7684\u601d\u8def\u4f3c\u4e4e\u548c\u697c\u4e0b\u7684\u51e0\u4f4ddalao\u4e0d\u4e00\u6837\u3002\n\n## \u5bf9\u4e8e\u4e0b\u5217\u51e0\u4e2a\u64cd\u4f5c\uff1a\n\n#### 1. I\u547d\u4ee4 I_k \u65b0\u5efa\u4e00\u4e2a\u5de5\u8d44\u6863\u6848\uff0c\u521d\u59cb\u5de5\u8d44\u4e3ak\u3002\u5982\u679c\u67d0\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\u4f4e\u4e8e\u5de5\u8d44\u4e0b\u754c\uff0c\u4ed6\u5c06\u7acb\u523b\u79bb\u5f00\u516c\u53f8\u3002\n\n\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662fSplay\u4e2d\u666e\u901a\u7684\u63d2\u5165\uff08Insert\uff09\n    ```\n    void Insert(int x)\n    {\n        if(x < m) return ;//\u5982\u679c\u63d2\u5165\u7684\u8282\u70b9\u7684\u6743\u503c\u5c0f\u4e8e\u4e0b\u754c\uff0c\u5219\u4e0d\u7528\u63d2\u5165\n        int rt = root, p = 0;\n        while(t[rt].val != x && rt) p = rt , rt = t[rt].ch[x > t[rt].val];//\u4e0d\u505c\u5730\u5f80\u4e0b\u627e\uff0cp\u4e3a\u7236\u4eb2\u8282\u70b9\n        if(rt) t[rt].cnt ++;//\u5982\u679c\u5df2\u7ecf\u6709\u8fd9\u4e2a\u6570\uff0c\u5219\u526f\u672c\u6570\uff0b1\n        else//\u5426\u5219\u65b0\u5efa\u8282\u70b9\n        {\n            rt = ++ tot;\n            if(p) t[p].ch[x > t[p].val] = rt;\n            t[rt].par = p;\n            t[rt].ch[0] = t[rt].ch[1] = 0;\n            t[rt].size = t[rt].cnt = 1;\n            t[rt].val = x; \n        }\n        Splay(rt);\n    }\n    ```\n\n#### 2.A\u547d\u4ee4 A_k \u628a\u6bcf\u4f4d\u5458\u5de5\u7684\u5de5\u8d44\u52a0\u4e0ak \n\n\u6b64\u64cd\u4f5c\u53ea\u9700\u8981\u66b4\u529b\u5730\u4fee\u6539\u6811\u4e2d\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\uff08val\uff09\n    \n   ```\n    void add(int x) {for(int i = 1 ; i <= tot ; i ++) t[i].val += x;}\n    \n    ```\n \n    \n#### 3.S\u547d\u4ee4 S_k \u628a\u6bcf\u4f4d\u5458\u5de5\u7684\u5de5\u8d44\u6263\u9664k\n\t\n\u5bf9\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u6263\u5de5\u8d44\u540e\u8fbe\u5230\u5de5\u8d44\u4e0b\u754c\u7684\u4eba\uff0c\u5c06\u4ed6Splay\u5230\u6839\u8282\u70b9\uff0c\u5220\u9664\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5373\u53ef\u3002\u6700\u540e\u522b\u5fd8\u4e86\u51cf\u53bb\u6bcf\u4e2a\u8282\u70b9\u7684val\u3002\uff08\u4ee3\u7801\u4e2d\u7684m\u4e3a\u5de5\u8d44\u4e0b\u754c\uff09\n    \n   ##### \u8fd9\u91cc\u8fd8\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\uff1a\u6709\u53ef\u80fd\u6263\u5de5\u8d44\u540e\u6240\u6709\u4eba\u90fd\u8981\u79bb\u5f00\u516c\u53f8\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u8981\u63d2\u5165\u4e00\u4e2a\u5de5\u8d44\u4e3a\u65e0\u7a77\u5927\u7684\u8282\u70b9\n   ```\n        void find(int x)//\u67e5\u627e\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u8282\u70b9\u5e76\u65cb\u8f6c\u5230\u6839\n        {\n            int rt = root;\n            while(x != t[rt].val && t[rt].ch[x > t[rt].val]) rt = t[rt].ch[x > t[rt].val];\n            Splay(rt);\n        }\n        void sub(int x) //\u6263\u6bcf\u4e2a\u4eba\u7684\u5de5\u8d44\n        {\n            for(int i = 1 ; i <= tot ; i ++) t[i].val -= x;\n        }\n        int get_next(int x)//\u67e5\u627e\u6700\u5c0f\u7684\u5927\u4e8e\u7b49\u4e8ex\u7684\u6570\n        {\n            find(x);\n            if(t[root].val >= x) return root;\n            int rt = t[root].ch[1];\n            while(t[rt].ch[0]) rt = t[rt].ch[0];\n            return rt;\n        }\n       \tvoid Remove(int x)\n        {\n            int rt = get_next(x + m);\n            Splay(rt);\n            ans += t[t[rt].ch[0]].size;//\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u5373\u4e3a\u5220\u9664\u7684\u4eba\u6570\n            t[rt].ch[0] = 0;//\u5220\u9664\u5de6\u5b50\u6811\n            pushup(rt);//\u66f4\u65b0rt\u7684\u5927\u5c0f\n            sub(x);\n        }\n        \n        ```\n        \n#### 4.F\u547d\u4ee4 F_k \u67e5\u8be2\u7b2ck\u591a\u7684\u5de5\u8d44\n\n  \u666e\u901a\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u6ce8\u610f\u56e0\u4e3a\u5148\u524d\u63d2\u5165\u7684\u65e0\u7a77\u5927\u8282\u70b9\uff0c\u6240\u4ee5\u8981\u67e5\u8be2\u7b2ck+1\u5927\u7684\u8282\u70b9\n  ```\n        \n    int Kth(int k)\n    {\n        if(k >= t[root].size) return -1;\n        k++;//\u56e0\u4e3a\u5148\u524d\u63d2\u5165\u7684\u65e0\u7a77\u5927\u8282\u70b9\uff0c\u6240\u4ee5\u8981\u67e5\u8be2\u7b2ck+1\u5927\u7684\u8282\u70b9\n        int rt = root;\n        while(1)\n        {\n            if(t[rt].ch[1] && k <= t[t[rt].ch[1]].size) rt = t[rt].ch[1];\n            else if(k > t[t[rt].ch[1]].size + t[rt].cnt)\n            {\n                k = k - t[t[rt].ch[1]].size - t[rt].cnt;\n                rt = t[rt].ch[0];\n            }\n            else return t[rt].val;\n        }\n    }\n    ```\n    \n#### \u6700\u540e\u9644\u4e0aAC\u4ee3\u7801\n#####   \u5f00O2 : 302ms\n#####    \u4e0d\u5f00O2\uff1a570ms\n##### \u4f60\u53ef\u4ee5\u5728\u6700\u4f18\u89e3\u7b2c8\u9875\u4e2d\u627e\u5230\u6211\n\n    ```\n    \n    #include<bits/stdc++.h>\n    using namespace std;\n    const int N = 1000009 , INF = 1547483647;//INF\u4e0d\u80fd\u592a\u5927\uff0c\u5426\u5219\u7206int\n    struct Splay{int ch[2] , par , cnt , size , val;} t[N];\n    /*ch[2]\u5206\u522b\u8868\u793a\u5de6\u53f3\u513f\u5b50\n      par\u8868\u793a\u7236\u4eb2\n      cnt\u4e3a\u526f\u672c\u6570\n      size\u4e3a\u6811\u7684\u5927\u5c0f\n      val\u4e3a\u8282\u70b9\u6743\u503c\uff08\u6bcf\u4e2a\u4eba\u7684\u5de5\u8d44\uff09\n    */\n    int n  , m , tot = 0 , root , ans = 0 ;\n    //m\u4e3a\u5de5\u8d44\u4e0b\u754c\uff0croot\u4e3a\u6839\u8282\u70b9\u7f16\u53f7\uff0cans\u4e3a\u79bb\u5f00\u516c\u53f8\u7684\u4eba\u6570\n    int read()//\u5feb\u8bfb\u4e0d\u89e3\u91ca\n    {\n        int s = 0 , w = 1;char ch = getchar();\n        while(ch <'0' || ch > '9'){if(ch == '-') w = -1; ch = getchar();}\n        while(ch >= '0' && ch <= '9'){s = (s << 1) + (s << 3) + (ch ^ 48);ch = getchar();}\n        return s * w;\n    } \n    char read_char()\n    {\n        char ch = getchar();\n        while(ch != 'I' && ch != 'S' && ch != 'F' && ch != 'A') ch = getchar();\n        return ch;\n    }\n    bool chk(int rt){return t[t[rt].par].ch[1] == rt;} //\u5224\u65adrt\u662f\u7236\u4eb2\u7684\u90a3\u4e2a\u513f\u5b50\n    void pushup(int rt){ t[rt].size = t[t[rt].ch[0]].size + t[t[rt].ch[1]].size + t[rt].cnt;}\n    //\u66f4\u65b0\u64cd\u4f5c\n    void rotate(int rt)//\u65cb\u8f6c\u64cd\u4f5c\n    {\n        int f = t[rt].par , gf = t[f].par , d = chk(rt) , son = t[rt].ch[d ^ 1];\n        t[f].ch[d] = son; t[son].par = f;\n        t[gf].ch[chk(f)] = rt; t[rt].par = gf;\n        t[rt].ch[d ^ 1] = f; t[f].par = rt;\n        pushup(f) , pushup(rt); \n    }\n    void Splay(int rt , int goal = 0)//\u5c06rt\u65cb\u8f6c\u5230\u6307\u5b9a\u8282\u70b9\u7684\u513f\u5b50\uff0c\u82e5\u8c03\u7528\u65f6\u4e0d\u8f93\u5165goal\uff0c\u5219\u9ed8\u8ba4\u4e3a0\uff08\u5373\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff09\n    {\n        while(t[rt].par != goal)\n        {\n            int f = t[rt].par ;int  gf = t[f].par;\n            if(gf != goal)\n            {\n                if(chk(rt) == chk(f)) rotate(f);\n                else rotate(rt);\n            }\n            rotate(rt);\n        }\n        if(!goal) root = rt;\n    }\n    void Insert(int x)//\u63d2\u5165\n    {\n        if(x < m) return ;\n        int rt = root, p = 0;\n        while(t[rt].val != x && rt) p = rt , rt = t[rt].ch[x > t[rt].val];\n        if(rt) t[rt].cnt ++;\n        else\n        {\n            rt = ++ tot;\n            if(p) t[p].ch[x > t[p].val] = rt;\n            t[rt].par = p;\n            t[rt].ch[0] = t[rt].ch[1] = 0;\n            t[rt].size = t[rt].cnt = 1;\n            t[rt].val = x; \n        }\n        Splay(rt);\n    }\n    void find(int x)//\u67e5\u627e\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u8282\u70b9\u5e76\u65cb\u8f6c\u5230\u6839\n    {\n        int rt = root;\n        while(x != t[rt].val && t[rt].ch[x > t[rt].val]) rt = t[rt].ch[x > t[rt].val];\n        Splay(rt);\n    }\n    void add(int x) {for(int i = 1 ; i <= tot ; i ++) t[i].val += x;}//\uff0b\u6bcf\u4e2a\u4eba\u7684\u5de5\u8d44\n\n    void sub(int x) {for(int i = 1 ; i <= tot ; i ++) t[i].val -= x;} //\u6263\u6bcf\u4e2a\u4eba\u7684\u5de5\u8d44\n\n    int get_next(int x)//\u67e5\u627e\u6700\u5c0f\u7684\u5927\u4e8e\u7b49\u4e8ex\u7684\u6570\n    {\n        find(x);\n        if(t[root].val >= x) return root;\n        int rt = t[root].ch[1];\n        while(t[rt].ch[0]) rt = t[rt].ch[0];\n        return rt;\n    }\n    void Remove(int x)//\u8ba9\u5de5\u8d44\u4f4e\u4e8e\u4e0b\u754c\u7684\u4eba\u79bb\u5f00\n    {\n        int rt = get_next(x + m);\n        Splay(rt);\n        ans += t[t[rt].ch[0]].size;\n        t[rt].ch[0] = 0;\n        pushup(rt);\n        sub(x);\n    }\n\n    int Kth(int k)//\u6c42\u7b2ck\u5927\n    {\n        if(k >= t[root].size) return -1; k++;\n        int rt = root;\n        while(1)\n        {\n            if(t[rt].ch[1] && k <= t[t[rt].ch[1]].size) rt = t[rt].ch[1];\n            else if(k > t[t[rt].ch[1]].size + t[rt].cnt)\n            {\n                k = k - t[t[rt].ch[1]].size - t[rt].cnt;\n                rt = t[rt].ch[0];\n            }\n            else return t[rt].val;\n        }\n    }\n\n    int main()\n    {\n        n = read(); m = read();Insert(INF);\n        while(n --)\n        {\n            char opt = read_char();\n            int x = read();\n            if(opt == 'I') Insert(x);\n            if(opt == 'A') add(x);\n            if(opt == 'S') Remove(x);\n            if(opt == 'F') printf(\"%d\\n\",Kth(x));\n        }\n        cout << ans << endl;\n        return 0;\n}\n\n```\n\n#### \u672c\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u6c42\u7ba1\u7406\u5458\u5927\u5927\u7ed9\u8fc7\u3002\n\n\t\n",
        "postTime": 1546139650,
        "uid": 80852,
        "name": "\u7a0b\u5c31\u672a\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u7ed9\u51fa\u5927\u725b\u4e0a\u76ee\u524d\u8dd1\u7684\u6700\u5feb(180ms)\u7684\u4ee3\u7801\u4ee5\u53ca\u6761\u5e73\u8861\u6811\u7684\u53cd\u601d\u3002\n\n\u9996\u5148\u8fd9\u91cc\u4f7f\u7528\u4e86\u5e26\u65cb\u8f6c\u7684Treap\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u73a9\u610f\u771f\u597d\u7528\u3002\n\n\u7136\u540e\u8fd9\u9053\u9898\u53ea\u8c03\u4e86\u534a\u4e2a\u5c0f\u65f6\u5de6\u53f3\u5427\uff0c\u4e8e\u662f\u5341\u5206\u9ad8\u5174\uff0c\u603b\u7ed3\u4e86\u5199\u548c\u8c03\u5e73\u8861\u6811\u849f\u84bb\u7684\u7ecf\u9a8c\uff1a\n\n1. \u5bf9\u4e8e\u5e73\u8861\u6811\uff0c\u5e73\u5e38\u7684\u5bf9\u62cd\u6240\u5199\u7684\u7684\u66b4\u529b\u5c31\u53ea\u80fd\u68c0\u67e5\u4e00\u4e0b\u6570\u636e\u7684\u7b54\u6848\uff0c\u5982\u679c\u66f4\u597d\u7684\u4e5f\u53ef\u4ee5\u7528\u66b4\u529b\u68c0\u67e5\u6bcf\u4e00\u6b65\u7684\u7b54\u6848\uff08\u7136\u800c\u4e0d\u662f\u6240\u6709\u9898\u90fd\u80fd\u505a\u5f97\u5230\uff09\n\n2. \u7136\u540e\u5728\u5199\u5e73\u8861\u6811\u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e9b\u64cd\u4f5c\u5e76\u4e0d\u9700\u8981\u5f3a\u884c\u628a\u57fa\u7840\u64cd\u4f5c\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5426\u5219\u5e38\u6570\u4f1a\u975e\u5e38\u5927\u3002\u4f8b\u5982\u67d0\u4efd\u4ee3\u7801\u5728\u8fdb\u884cS\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u628a\u6240\u6709\u70b9\u90fd\u904d\u5386\u4e86\u4e00\u904d\uff0c\u7136\u540e\u4e2d\u95f4\u8fd8\u6709\u4e24\u6b21\u590d\u6742\u5ea6\u9ad8log\u7684\u64cd\u4f5c\uff0c\u4e8e\u662f\u6700\u574f\u590d\u6742\u5ea6nlogn\uff0c\u8fd8\u597d\u64cd\u4f5c\u6b21\u6570\u5c11\u3002\u4e8e\u662f\u6211\u4eec\u6709\u4f18\u5316\uff1a\n\n```cpp\n    inline void Delete_Lower_Bound(int tar, int &node){\n            if(!node) return ;\n            if(num[node] < tar){\n                Delete_Tree(lc);//\u5220\u9664\u5b50\u6811\n                Delete_Lower_Bound(tar, rc);//\u4effSTL\n                Delete(num[node], node);//\u5220\u9664\u8282\u70b9\n            } else if(num[node] >= tar) Delete_Lower_Bound(tar, lc);\n            Updata(node);\n        }\n```\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u5220\u9664\u5b50\u6811\u7684\u65f6\u5019\u53ea\u8981\u66f4\u6539\u503c\uff0c\u6240\u4ee5\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5O(1)\u7684\u65ad\u5f00\u94fe\u63a5\u5373\u53ef\uff08\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u8fd8\u662f\u9012\u5f52\uff09\uff0c\u7136\u540eLower\\_Bound\u64cd\u4f5clog\u7684\uff0cDelete\u7531\u4e8e\u5df2\u7ecf\u786e\u5b9a\u4e86num[node]\uff0c\u800c\u4e14\u5de6\u513f\u5b50\u5df2\u7ecf\u5220\u5b8c\u4e86\uff0c\u6240\u4ee5\u64cd\u4f5c\u90fd\u662fO(1)\u7684\uff0c\u603b\u590d\u6742\u5ea6O(log)\u3002\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n    \n    \n    \n    \n    \n    \n```cpp\n    #include <cstdio>\n    #include <cctype>\n    using namespace std;\n    #define LL long long\n    #define MAXN 2000005\n    #define INF 0x3f3f3f3f\n    const LL MODS = 5371321, PRI = 832211;\n    inline char get_char(){\n        static char buf[5000001], *p1 = buf, *p2 = buf;\n        return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 5000000, stdin), p1 == p2) ? EOF : *p1 ++;\n    }\n    inline int read(){\n        int num = 0;\n        char c;\n        while (isspace(c = get_char()));\n        while (num = num * 10 + c - 48, isdigit(c = get_char()));\n        return num;\n    }\n    inline char get_ch(){\n        char c;\n        while(isspace(c = get_char()));\n        return c;\n    }\n    inline void upmax(int &a, const int &b){\n        if(a < b) a = b;\n    }\n    int m, min_m, loc, ans;\n    int cnt, tot;\n    int tree[MAXN][2], size[MAXN], wv[MAXN], num[MAXN];\n    #define lc tree[node][0]\n    #define rc tree[node][1]\n    inline int rand(){\n        static int sed = 15;\n        return sed = (LL)(sed * PRI) % MODS;\n    }\n    namespace Treap{\n        inline void Updata(int node){\n            if(node) size[node] = size[tree[node][0]] + size[tree[node][1]] + 1;\n        }\n        inline void Rotate(int &node, int son){\n            int tmp = tree[node][son];\n            tree[node][son] = tree[tmp][!son], tree[tmp][!son] = node;\n            Updata(node), Updata(tmp);\n            node = tmp;\n        }\n        inline void Insert(int tar, int &node){\n            if(!node) node = ++cnt, size[node] = 1, wv[node] = rand(), num[node] = tar;\n            else {\n                size[node]++;\n                if(tar <= num[node]){\n                    Insert(tar, lc);\n                    if(wv[lc] < wv[node]) Rotate(node, 0);\n                } else {\n                    Insert(tar, rc);\n                    if(wv[rc] < wv[node]) Rotate(node, 1);\n                }\n            }\n        }\n        inline void Delete(int tar, int &node){\n            if(num[node] == tar){\n                ans++;\n                if(!(lc * rc)){\n                    node = lc | rc;\n                    return ;\n                }\n                if(num[lc] > num[rc]) Rotate(node, 1), Delete(tar, lc);\n                else Rotate(node, 0), Delete(tar, rc);\n            } else {\n                if(num[node] > tar) Delete(tar, lc); else Delete(tar, rc);\n            }\n            Updata(node);\n        }\n        inline void Delete_Tree(int &node){\n            if(!node) return;\n            if(lc) Delete_Tree(lc);\n            if(rc) Delete_Tree(rc);\n            Updata(node);\n            node = 0, ans++;\n        }\n        inline void Delete_Lower_Bound(int tar, int &node){\n            if(!node) return ;\n            if(num[node] < tar){\n                Delete_Tree(lc);\n                Delete_Lower_Bound(tar, rc);\n                Delete(num[node], node);\n            } else if(num[node] >= tar) Delete_Lower_Bound(tar, lc);\n            Updata(node);\n        }\n        inline int Get_Kth(int k, int node){\n            if(size[lc] == k - 1) return num[node];\n            if(size[lc] >= k) return Get_Kth(k, lc);\n            return Get_Kth(k - size[lc] - 1, rc);\n        }\n    }\n    int main(){\n        m = read(), min_m = read();\n        for(int i = 1; i <= m; i++){\n            char cons = get_ch();\n            int tar = read();\n            if(cons == 'I'){\n                if(tar >= min_m) Treap::Insert(tar - loc, tot);\n            }\n            else if(cons == 'A') loc += tar;\n            else if(cons == 'S'){\n                loc -= tar;\n                int tmp = loc - min_m;\n                Treap::Delete_Lower_Bound(-tmp, tot);\n            } else {\n                printf(\"%d\\n\", size[tot] >= tar ? Treap::Get_Kth(size[tot] - tar + 1, tot) + loc : -1);\n            }\n        }\n        printf(\"%d\", ans);\n        return 0;\n    }\n\uff08\u53ef\u80fdluogu\u683c\u5f0f\u4f1a\u62bd\uff09......\n```",
        "postTime": 1513391548,
        "uid": 43464,
        "name": "Creeper_LKF",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1486 \u3010\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u5708\uff0c\u8fd9\u4e2a\u9898\u8fd8\u6ca1\u6709\u7528stl\u5212\u6c34\u7684\u9898\u89e3\uff0c\u90a3\u849f\u84bb\u5c31\u6765\u5206\u4eab\u4e00\u4e0b\u6211\u7684\u505a\u6cd5\u3002\n\nstl\u91cc\u7684vector\u672c\u8eab\u5c31\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\u64cd\u4f5c\u3002\u7ed3\u5408lower_bound()\u53ef\u4ee5\u5728\u63d2\u5165\u65f6\u505a\u5230\u6bcf\u4e00\u6b21\u63d2\u5165\u7684\u5143\u7d20\u90fd\u6709\u5e8f\u6392\u5217\u3002\u7531\u4e8e\u8fd9\u4e2a\u9898\u76ee\u5bf9\u5143\u7d20\u7684\u52a0\u51cf\u662f\u9488\u5bf9\u6574\u4e2a\u6570\u5217\u7684\uff0c\u6240\u4ee5\u5728\u6574\u4f53\u51cf\u8fc7\u4ee5\u540e\u6570\u5217\u7684\u6709\u5e8f\u6027\u4e0d\u53d8\uff0c\u4e5f\u5c31\u51cf\u5c11\u4e86\u5f88\u591a\u7ef4\u62a4\u7684\u5de5\u4f5c\u91cf\u3002~~\u4e5f\u4f7f\u5f97vector\u53ef\u4ee5\u5361\u5361\u5e38\u5c31\u6c34\u8fc7\u53bb\u3002~~\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int>v;\ninline int read()\n{\n\tchar ch=getchar();\n\tint x=0,f=1;\n\tfor(;!isdigit(ch);ch=getchar())\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\tfor(;isdigit(ch);ch=getchar())\n\t\tx=x*10+ch-'0';\n\treturn x*f;\n}\nint main()\n{\n\tregister int n,minn=0,tot=0;\n\tn=read(),minn=read();\n\tv.reserve(1000010);\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tchar ch;\n\t\tcin>>ch;\n\t\tregister int k=read();\n\t\tif(ch=='I')\n\t\t{\n\t\t\tif(k<minn)\n\t\t\t\tcontinue;\n\t\t\tv.insert(lower_bound(v.begin(),v.end(),k),k); \n\t\t}\n\t\tif(ch=='A')\n\t\t{\n\t\t\tregister int s=v.size();\n\t\t\tfor(register int i=0;i<s;i++)\n\t\t\t\tv[i]+=k;\n\t\t}\n\t\tif(ch=='S')\n\t\t{\n\t\t\tregister int s=v.size();\n\t\t\tfor(register int i=0;i<s;i++)\n\t\t\t{\n\t\t\t\tv[i]-=k;\n\t\t\t\tif(v[i]<minn)\n\t\t\t\t\tv.erase(lower_bound(v.begin(),v.end(),v[i])),i--,tot++,s--;\n\t\t\t}\n\t\t}\n\t\tif(ch=='F')\n\t\t{\n\t\t\tregister int s=v.size();\n\t\t\tif(k>s)\n\t\t\t\tcout<<-1<<\"\\n\";\n\t\t\telse\n\t\t\t\tcout<<v[s-k]<<\"\\n\";\n\t\t}\n\t}\n\tcout<<tot;\n\treturn 0;\n}\n```",
        "postTime": 1533785448,
        "uid": 39862,
        "name": "qwqqqq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u90fd\u662f\u5e73\u8861\u6811\uff0c\u4f46\u662f\u6211\u5374\u60f3\u5230\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff08~~\u6211\u4e0d\u4f1a\u5e73\u8861\u6811~~\uff09\u3002\n\n\u533a\u95f4k\u5c0f\u8ba9\u6211\u60f3\u5230\u7684\u4e3b\u5e2d\u6811\uff08\u867d\u7136\u4e3b\u5e2d\u6811\u597d\u50cf\u4e0d\u53ef\u505a\uff09\uff0c\u5bf9\u4e8e\u53f6\u5b50\u8282\u70b9\uff0ct[p].l\u4ee3\u8868\u6570\u503c\uff0ct[p].sum\u4ee3\u8868\u6570\u503c\u4e3at[p].l\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u96be\u70b9\u5728\u4e8e\u5982\u679c\u6bcf\u4e2a\u4eba\u7684\u5de5\u8d44\u90fd\u52a0\u6216\u51cf\uff0c\u6574\u4e2a\u7ebf\u6bb5\u6811\u5c31\u8981\u5e73\u79fb\uff0c\u600e\u4e48\u79fb\uff1f\n\n\uff08~~\u6211\u5f53\u7136\u4e0d\u4f1a\u5e73\u79fb\u5566~~\uff09\n\n\u5bf9\u4e8e\u6bcf\u6b21\u6da8\u5de5\u8d44\uff0c\u76f4\u63a5\u62c6\u6389\u7ebf\u6bb5\u6811\u91cd\u5efa\u3002\uff08\u662f\u7684\uff0c\u4e0d\u4f1a\u7206\u65f6\u95f4\uff0c\u4ee5\u4e3aA\u548cS\u64cd\u4f5c\u90fd\u6bd4\u8f83\u5c0f\uff0c\u800c\u4e14\u6bcf\u4e2a\u4eba\u7684\u5de5\u8d44\u5fc5\u5b9a\u4e0d\u4f1a\u8d85\u8fc72e5\uff0c\u6240\u4ee5\u4e58\u8d77\u6765\u4e0d\u4f1a\u7206\u6389\uff09\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int N=1e6+10;\nstruct rec{\n\tint l,r,sum;\n}t[N*4];\nint n,m,size,sum,k;\nint a[N];\nchar s[2];\n\ninline void build(int p,int l,int r){\n\tt[p].l=l,t[p].r=r;\n\tif(l==r){\n\t\tt[p].sum=a[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tt[p].sum=t[p<<1].sum+t[p<<1|1].sum;\n}\n\ninline void set(int p){\n\tif(t[p].l==t[p].r){\n\t\tif(t[p].l+k>=m){\n\t\t\ta[t[p].l+k]=t[p].sum;\n\t\t}\n\t\telse{\n\t\t\tsum+=t[p].sum;\n\t\t}\n\t\tt[p].sum=0;\t\n\t\treturn;\n\t}\n\tset(p<<1);set(p<<1|1);\n}\n\ninline void insert(int p,int v){\n\tif(t[p].l==t[p].r){\n\t\tt[p].sum++;\n\t\treturn;\n\t}\n\tint mid=(t[p].l+t[p].r)>>1;\n\tif(v<=mid)insert(p<<1,v);\n\telse insert(p<<1|1,v);\n\tt[p].sum=t[p<<1].sum+t[p<<1|1].sum;\n}\n\ninline int query(int p,int k){\n\tif(t[p].sum<k)return -1;\n\tif(t[p].l==t[p].r){\n\t\treturn t[p].l;\n\t}\n\tint lc=p<<1,rc=lc+1;\n\tif(t[lc].sum>=k)return query(lc,k);\n\telse return query(rc,k-t[lc].sum);\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tbuild(1,m,2e5);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s%d\",s+1,&k);\n\t\tif(s[1]=='I'){\n\t\t\tif(k<m){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tinsert(1,k);\n\t\t\tsize++;\n\t\t}\n\t\tif(s[1]=='A'||s[1]=='S'){\n\t\t\tif(s[1]=='S')k=-k;\n\t\t\tmemset(a,0,sizeof(a));\n\t\t\tset(1);\n\t\t\tbuild(1,m,2e5);\n\t\t}\n\t\tif(s[1]=='F'){\n\t\t\tif(k>size-sum)printf(\"-1\\n\");\n\t\t\telse printf(\"%d\\n\",query(1,size-sum-k+1));\n\t\t}\n\t}\n\tprintf(\"%d\\n\",sum);\n\treturn 0;\n}\n```\n",
        "postTime": 1570799081,
        "uid": 169137,
        "name": "k\uff0c\u706b\u9b42",
        "ccfLevel": 0,
        "title": "P1486 [NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458"
    },
    {
        "content": "### \u65e2\u7136\u8fd9\u662f\u4e00\u9053\u5e73\u8861\u6811\u88f8\u9898\uff0c\u90a3\u4e48\u6211\u4eec\u6253\u5b8c\u5e73\u8861\u6811\u4e4b\u540e\uff0c\u4e0d\u59a8\u8003\u8651\u4e00\u4e0b\u80fd\u4e0d\u80fd\u5927\u529b\u7ebf\u6bb5\u6811\u3002\u4e8b\u5b9e\u544a\u8bc9\u6211\u4eec\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u662f\u8d44\u74f7\u7684\u3002\n\u9996\u5148\uff0c\u5bf9\u4e8e\u52a0\u5de5\u8d44\u548c\u51cf\u5de5\u8d44\u64cd\u4f5c\uff0c\u663e\u7136\u79fb\u52a8\u533a\u95f4\u5e76\u4e0d\u662f\u90a3\u4e48\u79d1\u5b66\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u504f\u79fb\u91cf\u3002\u5373\u5c06\u6bcf\u4e00\u6b21\u52a0/\u51cf\u7684\u5de5\u8d44\u8bb0\u5f55\u4e0b\u6765\uff0c\u9ed8\u8ba4\u6211\u4eec\u6570\u636e\u7ed3\u6784\u4e2d\u5b58\u50a8\u7684\u4eba\u7684\u5de5\u8d44\u662f\u6ca1\u6709\u88ab\u6240\u6709\u52a0/\u51cf\u64cd\u4f5c\u5f71\u54cd\u4e4b\u524d\u7684\u503c\u3002\u6ce8\u610f\u5bf9\u4e8e\u4e00\u4e2a\u540e\u63d2\u5165\u7684\u4eba\uff0c\u5728\u4ed6\u4e4b\u524d\u7684\u52a0\u51cf\u4e5f\u4f1a\u5bf9\u4ed6\u9020\u6210\u5f71\u54cd\u3002\n\n\n\u4f8b\u5982\u6211\u4eec\u8fdb\u884c\u4e09\u4e2a\u64cd\u4f5c\uff0c\u63d2\u5165\u5de5\u8d44\u4e3a20\u7684\u4eba\uff0c\u52a0\u5de5\u8d4450\uff0c\u63d2\u5165\u5de5\u8d44\u4e3a60\u7684\u4eba\u3002\u5177\u4f53\u6267\u884c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u73b0\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u63d2\u5165\u4e00\u4e2a20\uff0c\u7136\u540e\u5c06\u504f\u79fb\u91cf+50\uff0c\u7136\u540e\u518d\u63d2\u5165\u4e00\u4e2a60-\u504f\u79fb\u91cf\uff0c\u65e2\u63d2\u516510\u3002\n\n\u8003\u8651\u52a0\u5de5\u8d44\u4e0d\u4f1a\u5bf9\u4eba\u6570\u4ea7\u751f\u5f71\u54cd\uff0c\u6211\u4eec\u76f4\u63a5\u7ef4\u62a4\u504f\u79fb\u91cf\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6263\u5de5\u8d44\u64cd\u4f5c\uff0c\u7531\u4e8e\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u8ba9\u4e00\u6bb5\u5de5\u8d44\u533a\u95f4\u5185\u7684\u4eba\u96c6\u4f53\u8f9e\u804c\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u5220\u9664\u6807\u8bb0\u3002\u5e38\u89c4\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u603b\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u5bf9\u4e8e\u5de5\u8d44\u5efa\u7acb\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u5220\u9664\u6807\u8bb0\u3001\u533a\u95f4\u5143\u7d20\u4e2a\u6570\uff0c\u9700\u8981\u652f\u6301\u5355\u70b9\u63d2\u5165\uff0c\u533a\u95f4\u5220\u9664\u3002\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u504f\u79fb\u91cf\uff0c\u5bf9\u4e8e\u65b0\u63d2\u5165\u7684\u4eba\u8fdb\u884c\u504f\u79fb\u540e\u63d2\u5165\u81f3\u7ebf\u6bb5\u6811\u4e2d\u5373\u53ef\u3002\u7531\u4e8e\u6743\u503c\u8303\u56f4\u8f83\u5927\uff0c\u6545\u8003\u8651\u79bb\u6563\u5316\u6216\u8005\u52a8\u6001\u5f00\u70b9\u3002\u5728\u8fd9\u91cc\u6211\u91c7\u7528\u7684\u662f\u540e\u8005\u3002\n\n\u8be6\u89c1\u4ee3\u7801\u3002\n\n``` c++\n#include<bits/stdc++.h>\n#define ls(k) a[k].ch[0]\n#define rs(k) a[k].ch[1]\nusing namespace std;\nstruct node { \n\tint l,r,ch[2];\n\tint cnt;\n\tbool del;\n}; node a[640000];\n\nconst int L=-150000000,R=150000000;\nint cnt=1;\nint n,lim,delta;\nchar ch[2];int val;\nint out,num,num2;\n\ninline void make(int k) { \n\tint l=a[k].l,r=a[k].r,mid=l+r>>1;\n\tls(k)=++cnt,a[cnt].l=l,a[cnt].r=mid;\n\trs(k)=++cnt,a[cnt].l=mid+1,a[cnt].r=r;\n} \n\ninline void update(int k) { \n\ta[k].cnt=a[ls(k)].cnt+a[rs(k)].cnt;\n} \n\ninline void pushdown(int k) { \n\tif(a[k].del) { \n\t\tif(1ll*ls(k)*rs(k)!=0) { \n\t\t\ta[ls(k)].del=a[rs(k)].del=1;\n\t\t\ta[ls(k)].cnt=a[rs(k)].cnt=0;\n\t\t} \n\t\ta[k].del=0;\n\t} \n} \n\nvoid ins(int k,int val) { \n\tif(a[k].l==a[k].r) return a[k].cnt++,void();\n\tif(1ll*ls(k)*rs(k)==0) make(k);\n\tpushdown(k);\n\tint mid=a[k].l+a[k].r>>1;\n\tif(val<=mid) ins(ls(k),val);\n\telse ins(rs(k),val);\n\tupdate(k);\n} \n\nvoid del(int k,int l,int r) { \n\tif(k==0) return;\n\tif(a[k].l==l&&a[k].r==r) return a[k].del=1,a[k].cnt=0,void();\n\tint mid=a[k].l+a[k].r>>1;\n\tpushdown(k);\n\tif(r<=mid) del(ls(k),l,r);\n\telse if(l>mid) del(rs(k),l,r);\n\telse del(ls(k),l,mid),del(rs(k),mid+1,r);\n\tupdate(k);\n} \n\nint query(int k,int val) { \n\tif(a[k].l==a[k].r) return a[k].l;\n\tpushdown(k);\n\tint lsi=a[ls(k)].cnt;\n\tif(val<=lsi) return query(ls(k),val);\n\telse return query(rs(k),val-lsi);\n} \n\ninline void prit(int k) { \n\tprintf(\"%2d %2d %2d %2d %2d %2d %2d\\n\",k,ls(k),rs(k),a[k].l,a[k].r,a[k].cnt,a[k].del);\n\tif(ls(k)) prit(ls(k));\n\tif(rs(k)) prit(rs(k));\n} \n\nint main() { \n\tscanf(\"%d%d\",&n,&lim);\n\ta[1].l=L,a[1].r=R;\n\tfor(int i=1;i<=n;++i) { \n\t\tscanf(\"%s%d\",ch,&val);\n\t\tif(ch[0]=='I') { \n\t\t\tval-=delta;\n\t\t\tif(val<lim) out++,num++,num2++;\n\t\t\telse ins(1,val),num++;\n\t\t} \n\t\tif(ch[0]=='A') { \n\t\t\tdelta+=val;\n\t\t\tlim-=val;\n\t\t} \n\t\tif(ch[0]=='S') { \n\t\t\tint nw=a[1].cnt;\n\t\t\tdelta-=val,lim+=val;\n\t\t\tdel(1,L,lim-1);\n\t\t\tout+=nw-a[1].cnt;\n\t\t} \n\t\tif(ch[0]=='F') { \n\t\t\tif(val>(num-out)) printf(\"-1\\n\");\n\t\t\telse printf(\"%d\\n\",query(1,(num-out)-val+1)+delta);\n\t\t} \n\t} \n\tprintf(\"%d\",out-num2);\n\treturn 0;\n} \n```",
        "postTime": 1528034172,
        "uid": 47981,
        "name": "liangs333",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u5b9e\u73b0\u65b9\u5f0f\u77ed+\u538b\u884c\u7684\u7092\u597d\u80cc $fhq \\space treap$\n\n\u672c\u9898\u53ea\u8981\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\n\n\u6240\u4ee5\u96be\u5ea6\u4e0a\u5e94\u8be5\u6bd4\u5e73\u8861\u6811\u6a21\u677f\u8981\u4f4e\n\n\u5173\u952e\u5728\u4e8e\u7075\u6d3b\u8fd0\u7528\u4e00\u4e2atag\u53d8\u91cf\u5904\u7406\u52a0\u51cf\u5de5\u8d44\u7684\u95ee\u9898\n\n\u52a0\u4e86\u5de5\u8d44\u5c31\u76f4\u63a5\u52a0\u5230tag\u4e0a\n\n\u51cf\u4e86\u5de5\u8d44\u5728tag\u4e0a\u51cf\u53bb\uff0c\u7136\u540e\u4f9d\u636e\u9898\u610f\u5220\u9664\u5de5\u8d44\u4f4e\u4e8e\u4e0b\u9650\u7684\u5458\u5de5\u7684\u6863\u6848\n\n\u5173\u4e8e\u8fd9\u4e2a\u5220\u9664\u6211\u4eec\u8981\u627e\u7684\u662f\u90a3\u4e9b\u6ee1\u8db3\n\n$$ k+tag<min $$\n\u7684\u5458\u5de5\uff0c\u7a0d\u4f5c\u79fb\u9879\u4fbf\u53ef\u5f97\u5230\u53ea\u4e0e\u5458\u5de5\u521d\u59cb\u5de5\u8d44$k$\u6709\u5173\u7684\u4e0d\u7b49\u5f0f\uff1a\n$$k<min-tag$$\n\u7531\u4e8e\u5728\u6811\u4e2d\u70b9\u7684\u6743\u503c\u5c31\u662f\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\uff0c\u7ed3\u5408$fhq\\space treap$\u7684\u6309\u6743\u503c\u5206\u88c2\u64cd\u4f5c\uff0c\u8f7b\u677e\u5730\u628a\u6574\u68f5\u6811\u5212\u5206\u6210\u6743\u503c\u5c0f\u4e8e $min-tag$\u548c\u6743\u503c\u5927\u4e8e\u7b49\u4e8e $min-tag$\u7684\u4e24\u90e8\u5206\uff0c\u628a\u5c0f\u4e8e\u7684\u90a3\u90e8\u5206\u7684\u8282\u70b9\u6570\u76ee\u7edf\u8ba1\u5165\u7b54\u6848\uff0c\u4e4b\u540e\u6211\u4eec\u53ea\u8981\u4fdd\u7559\u5927\u4e8e\u7b49\u4e8e\u7684\u90a3\u90e8\u5206\u5373\u53ef\n\n\u5bf9\u4e8e\u67e5\u8be2\u7b2ck\u5927\uff0c\u5c31\u662f\u5e73\u8861\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u55bd~~  \u4f46\u662f\u6211\u5199\u7684\u65f6\u5019\u8111\u5b50\u4e00\u62bd\uff0c\u5199\u6210\u4e86\u67e5\u7b2ck\u5c0f......\u7a0d\u5fae\u4e00\u60f3\u53d1\u73b0\u95ee\u9898\u4e0d\u5927\uff0c\u663e\u7136\u7684\u662f\uff0c\u4e00\u4e2a\u6570\u5728n\u4e2a\u6570\u4e2d\u6392\u7b2ck\u5927\uff0c\u90a3\u5b83\u4e00\u5b9a\u4e5f\u662f\u7b2c$n-k+1$\u5c0f\u55bd~~\n\n\u53e6\u5916\u4e00\u70b9\u7ec6\u8282\uff0c\u52a0\u5165\u65b0\u7684\u5458\u5de5\u65f6\uff0c\u7531\u4e8e\u4e4b\u524d\u7684\u5de5\u8d44\u52a0\u51cf\u4e0d\u6d89\u53ca\u8fd9\u540d\u65b0\u5458\u5de5\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u4ed6\u7684\u521d\u59cb\u5de5\u8d44\u51cf\u53bbtag\u518d\u63d2\u5165\u5373\u53ef\u3002\u8f93\u51fa\u7b2ck\u5927\u65f6\u4e00\u5b9a\u4e0d\u8981\u5fd8\u4e86\u518d\u52a0\u4e0atag\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <ctime>\n#include <cstdlib>\n#include <iostream>\n\n#define N 100100\n#define L(n) node[(n)].l\n#define R(n) node[(n)].r\n\nint n, minn;\n\nint root, cnt, tag;\n\nstruct Node\n{\n\tint k, rd, size;\n\tint l, r;\n\tNode(int k = 0) : k(k), rd(rand()), size(1), l(0), r(0){}\n} node[N];\n\ninline void update(int n)\n{\n\tnode[n].size = (L(n) ? node[L(n)].size : 0) + (R(n) ? node[R(n)].size : 0) + 1;\n}\n\nvoid split(int n, int k, int &x, int &y)\n{\n\tif(!n)x = y = 0;\n\telse if(node[n].k >= k)split(L(n), k, x, y), L(n) = y, update(y = n);\n\telse split(R(n), k, x, y), R(n) = x, update(x = n);\n}\n\nint merge(int x, int y)\n{\n\tif(!x || !y)return x + y;\n\tif(node[x].rd <= node[y].rd)return R(x) = merge(R(x), y), update(x), x;\n\telse return L(y) = merge(x, L(y)), update(y), y;\n}\n\ninline void insert(int k)\n{\n\tint x, y;\n\tsplit(root, k, x, y);\n\tnode[++ cnt] = Node(k);\n\troot = merge(merge(x, cnt), y);\n}\n\ninline int search(int n, int r)\n{\n\tint rank = (L(n) ? node[L(n)].size : 0) + 1; \n\tif(r == rank)return node[n].k;\n\telse if(r < rank)return search(L(n), r);\n\telse return search(R(n), r - rank);\n}\n\nint ln;\n\nint leave()\n{\n\tint x, y;\n\tsplit(root, minn - tag, x, y);\n\tln += node[x].size;\n\troot = y;\n}\n\nint main()\n{\n\tnode[0].size = 0;\n\t\n\tscanf(\"%d %d\", &n, &minn);\n\t\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\tchar c[3]; int k;\n\t\tscanf(\"%s%d\", c, &k);\n\t\tif(c[0] == 'I' && k >= minn)insert(k - tag);\n\t\telse if(c[0] == 'A')tag += k;\n\t\telse if(c[0] == 'S')tag -= k, leave();\n\t\telse if(c[0] == 'F')\n\t\t{\n\t\t\tif(k > node[root].size)puts(\"-1\");\n\t\t\telse printf(\"%d\\n\", search(root, node[root].size - k + 1) + tag);\n\t\t}\n\t}\n\t\n\tprintf(\"%d\", ln);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1532005558,
        "uid": 82814,
        "name": "Wei_taming",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "```cpp\n//\u8ba9\u8fd9\u9053\u677f\u5b50\u9898\u96be\u6b7b\u6211\u3002\u3002\u3002\u8c03\u4e86\u4e00\u5929\u4e86 \n//\u6362\u4e86\u6709\u56db\u4e94\u79cd\u601d\u8def\uff0c\u6700\u540e\u53d1\u73b0\u6211\u5e76\u6ca1\u6709\u60f3\u9519\uff0c\u5c31\u662f\u8fd9\u4e48\u5199 \n//\u72af\u4e86\u4e00\u4e2a\u5f88sb\u7684\u9519\u8bef\uff0c\u539f\u56e0\u662f\u60f3\u7684\u65b9\u6cd5\u592a\u591a\u4e86\uff0c\u6ca1\u6539\u8fc7\u6765\uff0c\u4fdd\u6301\u4e86\u4e0a\u4e00\u79cd\u5199\u6cd5\u7684\u6837\u5b50 \n//\u4f46\u662f\u6211\u611f\u89c9\u8c8c\u4f3c\u5e76\u6ca1\u5f71\u54cd\u554a\u3002\u3002\u3002\u4f46\u662f\u5b83\u5c31\u662fWA\u4e86 \n//\u4e00\u4e2a\u9057\u6f0f\u7684\u5c0f\u7ec6\u8282\uff0c\u6d6a\u8d39\u4e86\u4e00\u4e0b\u5348\u7684\u65f6\u95f4 \n//\u4f46\u662f   \u56e0\u4e3a\u7ede\u5c3d\u8111\u6c41\u5730A\u6389\u8fd9\u9053\u9898\uff0c\u6240\u4ee5\u6211\u53c8\u5b66\u4f1a\u4e86\u4e00\u4e9b\u9a9a\u64cd\u4f5c\n// \u4f46\u662f\u4f9d\u7136\u611f\u89c9\u5f88\u4e8f\u554a    \u597d\u597d\u7684\u65f6\u95f4\uff0c\u5c31\u8fd9\u4e48\u6d41\u8d70\u4e86\n\n//    \u601d\u8def\uff1a\n//\u6b63\u5e38\u7684treap\u64cd\u4f5c\uff0c\u5220\u9664\u7684\u65f6\u5019\u66b4\u529b\u679a\u4e3e\u5220\u9664(/\u6ed1\u7a3d)\uff0c\u4e0d\u7528\u62c5\u5fc3TLE\n//\u672c\u6765\u60f3\u52a0\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u5220\u9664\u64cd\u4f5c\uff0c\u4f46\u662f\u505a\u51fa\u8fd9\u9053\u9898\u6765\u4e4b\u540e\u5df2\u7ecf\u5b8c\u5168\u6ca1\u5fc3\u60c5\u4e86\n//\u5982\u679c\u4e00\u4e2a\u4eba\u8df3\u69fd\u4e86\uff0c\u5c31\u7ed9\u4ed6\u6253\u4e2a\u6807\u8bb0\uff0c\u4e0b\u6b21\u6da8\u5de5\u8d44\u6216\u8005\u51cf\u5de5\u8d44\u7684\u65f6\u5019\u5c31continue\u6389\n//\u522b\u7684\u5c31\u548c\u677f\u5b50\u4e00\u4e2a\u6837\u4e86\n\n//\u6211\u72af\u7684\u51e0\u4e2azz\u9519\u8bef\uff1a\n//1\u3001\u6ce8\u610f\u9898\u76ee\u4e2d\u8bf4\u4e00\u5f00\u59cb\u5de5\u8d44\u4e0d\u591f\u79bb\u5f00\u7684\u4e0d\u52a0\u5165\u7b54\u6848 \uff08\u6211\u5e76\u6ca1\u72af\u8fd9\u4e2a\u9519\u8bef\uff09\n//2\u3001\u8be2\u95ee\u7684\u662f\u5de5\u8d44\u7b2ck\u5927\u7684\u4eba\u7684\u5de5\u8d44\u662f\u591a\u5c11\uff0c\u4e0d\u662f\u95ee\u7b2ck\u5927\u7684\u5de5\u8d44\u662f\u591a\u5c11\uff01\uff01\uff01\u2014\u2014>\u8fd9\u4e2a\u5f88\u91cd\u70b9\uff0c\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e2a\uff0c\u6211\u6362\u4e86\u4e00\u79cd\u601d\u8def\u5199\u7684\u4ee3\u7801\n//3\u3001\u5982\u679c\u4f60\u5199\u7684\u662f\u5de6\u513f\u5b50\u6bd4\u53f3\u513f\u5b50\u5927\u7684treap\uff0c\u90a3\u4e48\u67e5\u627e\u7684\u65f6\u5019\u627e\u7684\u662f(\u5728\u804c\u4eba\u6570-x+1)\uff0c\u56e0\u4e3a\u4f60\u7684\u67e5\u8be2\u67e5\u8be2\u7684\u662f\u7b2ck\u5c0f\n//\t\t\u5982\u679c\u662f\u53f3\u513f\u5b50\u6bd4\u5de6\u513f\u5b50\u5c0f\u7684\uff0c\u76f4\u63a5\u67e5\u627ex\u5c31\u884c\u4e86\u3002 \n//5\u3001\u5220\u9664\u7684\u65f6\u5019\u8981\u8ba9root->size-=\u5220\u9664\u7684\u90a3\u4e2a\u5de5\u8d44\u7684\u4eba\u6570\uff0c\u4e0d\u662f --root->size \n//4\u3001\u53ef\u80fd\u4f1a\u6709\u804c\u5de5\u7684\u5de5\u8d44\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u8981\u8bb0\u5f55\u76f8\u540c\u5de5\u8d44\u7684\u4eba\u6570\u3002 ->\u7b2c2\u6761\u548c\u7b2c5\u6761\u7684\u539f\u56e0\n\n//\u5fe0\u544a\uff1a\u614e\u7528\u6307\u9488\uff01  \u867d\u7136\u529f\u80fd\u5f3a\u5927\uff0c\u4f46\u662f\u592a\u96be\u8c03\u8bd5\uff0c\u800c\u4e14\u4e00\u4e9b\u64cd\u4f5c\u5e76\u4e0d\u80fd\u50cf\u6570\u7ec4\u4e00\u6837\u90a3\u4e48\u7075\u6d3b\u7684\u53bb\u6267\u884c\u3002\n//\t\t\u672c\u4eba\u4e0d\u4f1a\u7528\u6307\u9488    \u5982\u679c\u662f\u6307\u9488\u5927\u4f6c\u3002\u5c31\u5f53\u6211\u6ca1\u8bf4\u3002 \n\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int N=1e5+5;\nconst int INF=599518803;\n\nint n,minn;\nint opt,x;\nint tim,sum_peo,leave_peo;\nint add[N],sub[N];\nstruct Node\n{\n    Node *son[2];\t//\u5de6\u53f3\u513f\u5b50\uff0cson[0]\u662f\u5de6\u513f\u5b50\uff0cson[1]\u662f\u53f3\u513f\u5b50 \n    int key;\t//\u6743\u503c \n    int heap_key;\t//\u7ef4\u62a4\u5806\u7684\u6743\u503c \n    int key_cnt;\t//\u8282\u70b9\u7684\u91cd\u91cf \n    int size;\t//\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570 \n    int tim;\t//\u8fdb\u516c\u53f8\u7684\u65f6\u95f4 \n    bool flag;\t//\u662f\u5426\u8df3\u69fd \n}node[N];\n\ntypedef Node* Tree;\nTree now_node,root,null;\n\nint read()\n{\n    char c=getchar();int num=0,f=1;\n    for(;!isdigit(c);c=getchar())\n        switch(c)\n        {\n            case 'I':return 1;\n            case 'A':return 2;\n            case 'S':return 3;\n            case 'F':return 4;\n            case '-':f=-1;\n            default:\n                break;\n        }\n    for(;isdigit(c);c=getchar())\n        num=num*10+c-'0';\n    return num*f;\n}\n\nvoid init()\n{\n    srand(INF);\t\t//\u968f\u673a\u79cd\u5b50 \n    tim=1;\n    node->flag=1;\n    node->son[0]=node->son[1]=node;\t\t//null\u7684\u5de6\u53f3\u513f\u5b50\u6307\u5411null \n    now_node=root=null=node;\n}\n\nTree newNode(int key)\t//\u7533\u8bf7\u65b0\u8282\u70b9 \n{\n    //++sum_peo;\n    ++now_node;\n    now_node->key=key;\n    now_node->key_cnt=1;\n    now_node->heap_key=rand();\n    now_node->size=1;\n    now_node->flag=0;\n    now_node->son[0]=now_node->son[1]=null;\n    now_node->tim=tim;\n    return now_node;\n}\n\nvoid rotate(Tree &root,bool flag)\t//\u65cb\u8f6c\uff0cflag==0\u662f\u5de6\u65cb\uff0c==1\u662f\u53f3\u65cb \n{\n    Tree tmp=root->son[!flag];\n    root->son[!flag]=tmp->son[flag];\n    tmp->son[flag]=root;\n    root->size=root->son[0]->size+root->son[1]->size+root->key_cnt;\n    tmp->size=tmp->son[0]->size+tmp->son[1]->size+tmp->key_cnt;\n    root=tmp;\n}\n\nvoid insert(Tree &root,int key)\n{\n    if(root==null)\t\t//\u5f00\u65b0\u7684\u5de5\u8d44\u6863\u6848 \n        root=newNode(key);\n    else if(key==root->key)\t\t//\u76f8\u540c\u5de5\u8d44\u4eba\u6570++ \n    {\n        ++root->key_cnt,++root->size;\n    }\n    else\n    {\n        bool flag=key<root->key;\n        insert(root->son[flag],key);\n        ++root->size;\n        if(root->heap_key<root->son[flag]->heap_key)\n            rotate(root,!flag);\n    }\n}\n\nvoid erase(Tree &root,int key,int num)\t\t//num\u4e2a\u5458\u5de5\u8df3\u69fd \n{\n    if(root==null)\n        return;\n    if(key!=root->key)\n    {\n        bool flag=key<root->key;\n        erase(root->son[flag],key,num);\n        root->size-=num;\n    }\n    else\n    {\n        if(root->son[0]==null)\n        {\n            //change=root;\n            //printf(\"A:  change:%d  root:%d\\n\",change,root);\n            root=root->son[1];\n            //printf(\"B:  change:%d  root:%d\\n\",change,root);\n        }\n        else if(root->son[1]==null)\n        {\n            //change=root;\n            root=root->son[0];\n        }\n        else\n        {\n            bool flag=root->son[0]->heap_key>root->son[1]->heap_key;\n            rotate(root,flag);\n            erase(root->son[flag],key,num);\n            root->size-=num;\n        }\n    }\n}\n\nint query_num(Tree root,int k)\t\t//\u8be2\u95ee\u7b2ck\u5927 \n{\n    if(root==null)\n        return 0;\n    if(k<=root->son[0]->size)\n        return query_num(root->son[0],k);\n    if(k>root->son[0]->size+root->key_cnt)\n        return query_num(root->son[1],k-root->son[0]->size-root->key_cnt);\n    return root->key;\n}\n//\n//Tree find(Tree x)\n//{\n//\treturn x->fa==x?x:x->fa=find(x->fa);\n//}\n\nint main()\n{\n    //freopen(\"233.in\",\"r\",stdin);\n    //freopen(\"233.out\",\"w\",stdout);\n    init();\t\t//\u522b\u5fd8\u8c03\u7528\u521d\u59cb\u5316\u51fd\u6570 \n    n=read(),minn=read();\n    while(n--)\n    {\n        opt=read(),x=read();\n        switch(opt)\n        {\n            case 1:\n                if(x>=minn)\n                    ++sum_peo,\t\t//\u5728\u804c\u5458\u5de5\u4eba\u6570++ \n                    insert(root,x);\n                break;\n            case 2:\n                for(Tree i=node+1;i<=now_node;++i)\n                {\n                    if(i->flag==1)\t//\u8df3\u69fd\u4e86 \n                        continue;\n                    i->key+=x;\t\t//\u6da8\u5de5\u8d44 \n                }\n                break;\n            case 3:\n                //printf(\"be:  %d\\n\",sum_peo);\n                for(Tree i=node+1;i<=now_node;++i)\n                {\n                    if(i->flag==1)\t\t//\u5df2\u7ecf\u8df3\u69fd\u4e86 \n                        continue;\n                    i->key-=x;\t//\u6263\u5de5\u8d44 \n                    if(i->key<minn)\n                    {\n                        //Tree change=null;\n                        //printf(\"C: change: %d\\n\",change);\n                        erase(root,i->key,i->key_cnt);\n                        sum_peo-=i->key_cnt;\t//\u51cf\u53bb\u8fd9\u4e2a\u5de5\u8d44\u7684\u4eba\u6570 \n                        leave_peo+=i->key_cnt;\t//\u8df3\u69fd\u4eba\u6570 \n                        i->flag=1;\t//\u6807\u8bb0\u4e00\u4e0b\u5df2\u7ecf\u8df3\u69fd \n                        //printf(\"D: change: %d\\n\",change);\n                        //change=null;\n                        //printf(\"E: change: %d\\n\",change);\n                    }\n                }\n                //printf(\"af:  %d\\n\",sum_peo);\n                break;\n            default:\n                //printf(\"peo: %d\\n\",sum_peo);\n                if(x>sum_peo)\n                    printf(\"-1\\n\");\n                else printf(\"%d\\n\",query_num(root,x));\n        }\n    }\n    printf(\"%d\",leave_peo);\n    return 0;\n}\n```",
        "postTime": 1519298001,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P1486)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd1\u4e4e\u5e73\u8861\u6811\u7684\u6a21\u677f\u9898\uff0c\u4e0d\u8fc7\u8fd9\u9053\u9898\u6709\u4e00\u4e9b\u5904\u7406\u7684\u5c0f\u6280\u5de7\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e\u6240\u6709\u5458\u5de5\u540c\u65f6\u52a0\u5de5\u8d44\u6216\u8005\u51cf\u5de5\u8d44\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u53d8\u91cf$\\Delta$\u5b58\u50a8\u6574\u4f53\u7684\u53d8\u5316\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5047\u5982\u6700\u5f00\u59cb\u4e00\u4e2a\u4eba\u5728\u6863\u6848\u91cc\u9762\u5de5\u8d44\u4e3a$k$\uff0c\u90a3\u4e48\u4ed6\u7684\u771f\u5b9e\u5de5\u8d44\u5c31\u662f$k$\uff1b\u4f46\u73b0\u5728\uff0c\u4ed6\u7684\u771f\u5b9e\u5de5\u8d44\u4e3a$\\Delta+k$\u3002\u53cd\u8fc7\u6765\u4e5f\u662f\uff0c\u771f\u5b9e\u5de5\u8d44\u662f$k$\uff0c\u90a3\u4e48\u6863\u6848\u5de5\u8d44\u5c31\u662f$k-\\Delta$\u3002\u4e0d\u96be\u53d1\u73b0\uff0c$\\Delta$\u6700\u521d\u5e94\u8be5\u662f$0$\u3002   \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u6b64\u65f6\u7684\u6700\u4f4e\u5de5\u8d44\u6807\u51c6\u5c31\u53d8\u6210\u4e86$min+\\Delta$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6240\u4ee5\uff0c\u6bcf\u6b21$S$\u64cd\u4f5c\uff0c\u5148\u5bf9$\\Delta$\u8fdb\u884c\u4fee\u6539\u3002\u7136\u540e\u6240\u6709$<\\Delta+min$\u7684\u4eba\u90fd\u4f1a\u79bb\u5f00\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u64cd\u4f5c\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd8\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\u3002\u6bd4\u5982$F$\u6c42\u7684\u662f**\u7b2c$k$\u5927**\u800c\u4e0d\u662f\u7b2c$k$\u5c0f\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7528\u7684\u662f\u975e\u65cb$Treap$\u3002\n# \u9898\u76ee\n```cpp\n#include <cstdio>\n#include <cstdlib>\n\n#define random myRandom\n\nconst int MAXN = 100005;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s < '0' || '9' < s ){ if( s == '-' ) f = -1; s = getchar(); }\n\twhile( '0' <= s && s <= '9' ){ x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar(); }\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ), x = -x; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\nint ch[MAXN][2], val[MAXN], aux[MAXN], siz[MAXN], cnt[MAXN];\nint N, rt, base, mn, nsiz;\n\nvoid srd() { int a, *aa = &a; srand( ( unsigned long long ) aa ); }\nint random() { return rand() * rand(); }\nint newNode( const int nVal ) { val[++ nsiz] = nVal, aux[nsiz] = random(), siz[nsiz] = cnt[nsiz] = 1; return nsiz; }\n\nvoid upt( const int u ) { siz[u] = siz[ch[u][0]] + siz[ch[u][1]] + cnt[u]; }\n\nvoid splitVal( const int u, const int k, int &x, int & y )\n{\n\tif( ! u ) { x = y = 0; return ; }\n\tif( val[u] <= k ) x = u, splitVal( ch[u][1], k, ch[u][1], y );\n\telse y = u, splitVal( ch[u][0], k, x, ch[u][0] );\n\tupt( u );\n}\n\nint merg( const int u, const int v )\n{\n\tif( ! u || ! v ) return u + v;\n\tif( aux[u] < aux[v] ) { ch[u][1] = merg( ch[u][1], v ), upt( u ); return u; }\n\telse { ch[v][0] = merg( u, ch[v][0] ), upt( v ); return v; } \n}\n\nvoid insert( const int nVal )\n{\n\tint x, y, z;\n\tsplitVal( rt, nVal - 1, x, y ), splitVal( y, nVal, z, y );\n\tif( z ) ++ cnt[z], upt( z ); else z = newNode( nVal );\n\trt = merg( merg( x, z ), y );\n}\n\nint Kth( int k )\n{\n\tfor( int u = rt ; ; )\n\t{\n\t\tif( k <= siz[ch[u][0]] ) u = ch[u][0];\n\t\telse if( k <= siz[ch[u][0]] + cnt[u] ) return val[u];\n\t\telse k -= siz[ch[u][0]] + cnt[u], u = ch[u][1];\n\t}\n}\n\nint main()\n{\n\tchar op[5]; int x, left = 0, icnt = 0, u, v;\n\tread( N ), read( mn );\n\twhile( N -- )\n\t{\n\t\tscanf( \"%s%d\", op, &x );\n\t\tif( op[0] == 'I' ) \n\t\t{\n\t\t\tif( x < mn ) { continue; }\n\t\t\ticnt ++, insert( x - base );\n\t\t}\n\t\tif( op[0] == 'A' ) base += x;\n\t\tif( op[0] == 'S' )\n\t\t{\n\t\t\tbase -= x;\n\t\t\tsplitVal( rt, mn - base - 1, u, v );\n\t\t\trt = v, left += siz[u]; \n\t\t}\n\t\tif( op[0] == 'F' ) write( icnt - left < x ? -1 : ( Kth( icnt - left - x + 1 ) + base ) ), putchar( '\\n' );\n\t}\n\twrite( left ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1575612143,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458"
    },
    {
        "content": "```\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=401000;\nint n,m,s=0,base=200020,add=0;\nstruct node{\n       int l,r,sum,v;\n}a[4*maxn];\nvoid create(int rt,int x,int y)\n{\n     a[rt].l=x;\n     a[rt].r=y;\n     a[rt].sum=0;\n     a[rt].v=0;\n     if(x==y)\n       return;\n     int mid=(x+y)>>1;\n     create(2*rt,x,mid);\n     create(2*rt+1,mid+1,y);\n}\n//\u5efa\u6811\uff0c sum\u8868\u793a\u5de5\u8d44\u4ece a[rt].l\u5230 a[rt].r\u8fd9\u4e2a\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u4eba\n//v\u4e3a\u61d2\u60f0\u6807\u8bb0\uff0c\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u5df2\u7ecf\u88ab\u6e05\u96f6\uff0c\u4f46\u6ca1\u6709\u505a\u5b83\u7684\u5b50\u8282\u70b9 \nvoid pushd(int p)\n{\n     if(a[p].v==0) \n       return;\n     else{\n\t\ta[p].v=0;\n\t\ta[p*2].v=1,a[p*2+1].v=1;\n\t\ta[p*2].sum=a[p*2+1].sum=0;\n\t }\n}\n//\u628a\u81ea\u5df1\u61d2\u60f0\u6807\u8bb0\u53d6\u6d88\uff0c\u6807\u8bb0\u5de6\u53f3\u5b50\uff0c\u6e05\u7a7a\u5de6\u53f3\u5b50 \nvoid pushup(int rt)\n{\n     a[rt].sum=a[2*rt].sum+a[2*rt+1].sum;\n}\n//\u628a\u81ea\u5df1\u7684\u4e2a\u6570\u8d4b\u4e3a\u5de6\u53f3\u5b50\u4e2a\u6570\u4e4b\u548c \nvoid ins(int rt,int x)\n{\n      if(a[rt].l==a[rt].r)\n      {\n        if(a[rt].l==x)\n          a[rt].sum++;\n        //\u53ea\u628a\u53f6\u8282\u70b9\u7684\u5458\u5de5\u6570\u589e\u52a0 \n        return;\n      }\n      pushd(rt);\n      int mid=(a[rt].l+a[rt].r)>>1;\n      if(x<=mid) \n        ins(2*rt,x);\n      else\n        ins(2*rt+1,x);\n      pushup(rt);\n}\nint dfs(int rt,int x) //\u67e5\u627e\u7b2cx\u5c0f\u7684\u5458\u5de5\u5de5\u8d44\u662f\u591a\u5c11 \n{\n     if(a[rt].l==a[rt].r)\n       return a[rt].l;\n     //\u5982\u679c\u505a\u5230\u53f6\u8282\u70b9,\u5c31\u8fd4\u56de\u53f6\u8282\u70b9\u7684\u5458\u5de5\u6570 \n     pushd(rt);\n     if(a[2*rt].sum<x)\n       return dfs(2*rt+1,x-a[2*rt].sum);\n       //\u5982\u679c\u5de6\u5b50\u8282\u70b9\u7684\u5458\u5de5\u6570\u4e4b\u548c\u5c0f\u4e8e\u4f60\u8981\u67e5\u8be2\u7684\u7b2cx\u5c0f\n       //\u90a3\u4f60\u8981\u5bfb\u627e\u7684\u7b2cx\u5c0f\u5728\u53f3\u5b50\u7ed3\u70b9 \n     return dfs(2*rt,x);\n}\nvoid change(int rt,int x) //\u6211\u6765\u8e22\u4eba\u4e86 \n{\n     if(a[rt].r<x)\n     {\n       //\u5982\u679c\u8be5\u7ed3\u70b9\u7684\u5de5\u8d44\u53f3\u754c\u90fd\u4f4e\u4e8ex   \u8d70\u4eba+\u61d2\u60f0\u6807\u8bb0 \n       a[rt].sum=0;\n       a[rt].v=1;\n       return;\n     }\n     if(a[rt].l==a[rt].r)\n     {\n\t\tif(a[rt].r<x) \n          a[rt].sum=0;\n          //\u5982\u679c\u53f6\u7ed3\u70b9\u7684\u5de5\u8d44\u4f4e\u4e8ex   \u8d70\u4eba\n\t\treturn;\n\t }\n\t int mid=(a[rt].l+a[rt].r)>>1;\n\t //mid\u4e3a\u533a\u95f4\u5de5\u8d44\u5e73\u5747\u503c\uff0c\u4e5f\u662f\u5de6\u53f3\u5b50\u7684\u5206\u5272\u70b9 \n\t pushd(rt);\n\t if(x<=mid) \n        change(rt*2,x);\n\t else\n     {\n\t\tchange(rt*2,x);\n\t\tchange(rt*2+1,x);\n\t\t//\u5982\u679cmid<=x \u65e2\u8981\u8e22\u5de6\u8fb9\u7684\u6240\u6709\u4eba\u53c8\u8981\u8e22\u53f3\u8fb9\u7684\u4e00\u90e8\u5206\u4eba \n\t } \n     pushup(rt);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    create(1,0,400100);\n    for(int i=1;i<=n;i++)\n    {\n      char ch;\n      int x;\n      cin>>ch;\n      scanf(\"%d\",&x);\n      if(ch=='I')\n      {\n        \n        if(x<m)\n          continue;\n        s++;\n        ins(1,x-add+base);\n        //add\u4e3a\u5386\u53f2\u589e\u91cf\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e2d\u50a8\u5b58\u7684\u90fd\u662f\u53bb\u6389\u589e\u91cf\u7684\u5de5\u8d44\uff0c\u4e3a\u9632\u6b62\u51fa\u73b0\u8d1f\u6570\n        //\u7ed9\u6bcf\u4e2a\u6570\u589e\u52a0base\n      }\n      if(ch=='A')\n        add+=x;\n      if(ch=='S')\n      {\n        add-=x;\n        change(1,m-add+base);\n        //\u5c06\u5de5\u8d44\u4f4e\u4e8e\u4e0b\u9650m\u7684\u5458\u5de5\u88c1\u6389;\n      }\n      if(ch=='F')\n      {\n        //a[1].sum\u4e3a\u7b2c\u4e00\u4e2a\u7ed3\u70b9\uff08\u6574\u4e2a\u533a\u95f4\uff09 \u7684\u5458\u5de5\u6570\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u516c\u53f8\u7684\u5458\u5de5\u6570 \n        if(x>a[1].sum)\n          printf(\"-1\\n\");\n        else\n          printf(\"%d\\n\",dfs(1,a[1].sum-x+1)+add-base);\n          //\u67e5\u627e\u7b2cx\u5927\u7684\u5458\u5de5\u5de5\u8d44\u662f\u591a\u5c11\n          //\u76f8\u5f53\u4e8e\u67e5\u627e\u7b2ca[1].sum-x+1\u5c0f\u7684\u5458\u5de5\u5de5\u8d44\u662f\u591a\u5c11\n          //\u53c8\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e2d\u50a8\u5b58\u7684\u90fd\u662f\u53bb\u6389\u589e\u91cf\u7684\u5de5\u8d44\uff0c\u52a0\u4e0a\u589e\u91cf\u518d\u51cf\u53bbbase\u5373\u4e3a\u6b64\u65f6\u5b9e\u9645\u5de5\u8d44 \n      }\n    }\n    printf(\"%d\\n\",s-a[1].sum);\n    system(\"pause\");\n    return 0;\n}\n\n```\n",
        "postTime": 1565072115,
        "uid": 148757,
        "name": "wanxiang_zx",
        "ccfLevel": 0,
        "title": "P1486\u7ebf\u6bb5\u6811\u89e3"
    },
    {
        "content": "\u4e3b\u8981\u7528\u5230Treap\u3002\u5efa\u8bae\u4e00\u4e9b\u521a\u521a\u5b66Treap\u7684\u540c\u5b66\u6765\u505a\u4e00\u4e0b\u8fd9\u9053\u9898\uff0c\u8fd8\u662f\u86ee\u7ecf\u5178\u7684\u3002\n\n\u5728\u6b64\u63a8\u9500\u4e00\u4e0b\u81ea\u5df1\u7684Treap\u5b66\u4e60\u7b14\u8bb0\uff1a[\u8fd9\u91cc](https://www.luogu.org/blog/xiezihan123456789/treap-xue-xi-bi-ji)\n\n\u8fd9\u9053\u9898\u5982\u4f55\u7528Treap\u5462\uff1f\n\n### \u64cd\u4f5c1\uff1a\u65b0\u5efa\u4e00\u4e2a\u6863\u6848\u3002\n\n\u8fd9\u4e2a\u64cd\u4f5c\u5e94\u8be5\u8bf4\u662f\u548c\u6a21\u677f\u4e00\u6837\u7684\u3002\u6ce8\u610f\u63d2\u5165\u7684\u65f6\u5019\u8981\u5c06\u63d2\u5165\u503c\u51cf\u53bbincrease\uff08\u8fd9\u4e2a\u53d8\u91cf\u7684\u610f\u601d\u89c1\u4e0b\uff09\uff0c\u590d\u6742\u5ea6$O(logN)$\n\n### \u64cd\u4f5c2\uff1a\u6240\u6709\u5458\u5de5\u52a0\u5de5\u8d44\u3002\n\n\u7528\u4e00\u4e2a\u53d8\u91cfincrease\u6765\u8bb0\u5f55\u8fd9\u4e2a\u503c\uff0c\u8fd9\u91cc\u76f4\u63a5increase +k\u5c31\u53ef\u4ee5\u4e86\u3002\u590d\u6742\u5ea6$O(1)$\u3002\n\n### \u64cd\u4f5c3\uff1a\u6240\u6709\u5458\u5de5\u51cf\u5de5\u8d44\u3002\n\n\u8fd8\u662f\u8981\u66f4\u65b0increase\uff0c\u7136\u540e\u5728Treap\u4e0a\u904d\u5386\uff1a\n\n\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684$val+increase-k<$\u6700\u4f4e\u5de5\u8d44\uff0c\u5219\u5c06\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u548c\u8fd9\u4e2a\u8282\u70b9\u6574\u4f53\u5220\u9664\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u8282\u70b9\u7684\u6307\u9488\u76f4\u63a5\u6307\u5bfc\u53f3\u5b50\u6811\u4e0a\u9762\uff0c\u7136\u540e\u5728\u53f3\u5b50\u6811\u4e0a\u9012\u5f52\u3002\n\n\u5426\u5219\uff0c\u5728\u5de6\u5b50\u6811\u4e0a\u548c\u53f3\u5b50\u6811\u4e0a\u9012\u5f52\u3002\u6ce8\u610f\u53c2\u6570\u8981\u7528\u5f15\u7528\u4f20\u9012\u548c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9700\u8981\u6267\u884c\u7684\u65cb\u8f6c\u3002\u590d\u6742\u5ea6$O(logN)$\u3002\n\n### \u64cd\u4f5c4\uff1a\u67e5\u8be2\u3002\n\n\u9996\u5148\u5224\u65ad-1\uff1a\u5982\u679c\u8981\u67e5\u8be2\u7684x\u5927\u4e8etreap\u5f53\u524d\u7684\u5927\u5c0f\uff0c\u76f4\u63a5\u8f93\u51fa-1\u3002\n\n\u5426\u5219\uff0c\u5728Treap\u4e0a\u7528\u6a21\u677f\u7684\u65b9\u6cd5\u8fdb\u884c\u67e5\u8be2\uff0c\u6ce8\u610f\u6700\u540e\u67e5\u8be2\u51fa\u7684\u7ed3\u679c\u8981\u52a0\u4e0aincrease\u3002\u590d\u6742\u5ea6$O(logN)$\u3002\n\n\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <ctime>\n#include <algorithm>\nusing namespace std;\n\nint leave, increase, minSal;\nstruct Node {\n    int val, cnt, siz, pro, l, r;\n    Node() {\n        val = cnt = siz = pro = l = r = 0;\n    }\n};\nstruct Treap {\n    Node nd[400005];\n    int top, _root;\n\n    inline void Update(int &idx) {\n        if (idx == 0) {\n            return;\n        }\n        nd[idx].siz = nd[idx].cnt + nd[nd[idx].l].siz + nd[nd[idx].r].siz;\n    }\n\n    inline int New(int val) {\n        nd[++top].val = val;\n        nd[top].cnt = nd[top].siz = 1;\n        nd[top].pro = rand();\n        return top;\n    }\n\n    Treap() {\n        top = 0;\n        _root = New(0x3f3f3f3f);\n    }\n\n    void RotateR(int &idx) {\n        if (idx == 0 || nd[idx].l == 0) {\n            return;\n        }\n        int q = nd[idx].l;\n        nd[idx].l = nd[q].r;\n        nd[q].r = idx;\n        idx = q;\n        Update(nd[idx].r);\n        Update(idx);\n    }\n\n    void RotateL(int &idx) {\n        if (idx == 0 || nd[idx].r == 0) {\n            return;\n        }\n        int q = nd[idx].r;\n        nd[idx].r = nd[q].l;\n        nd[q].l = idx;\n        idx = q;\n        Update(nd[idx].l);\n        Update(idx);\n    }\n\n    void Insert(int &idx, int val) {\n        if (idx == 0) {\n            idx = New(val);\n            return;\n        }\n        if (nd[idx].val == val) {\n            nd[idx].cnt++;\n            Update(idx);\n            return;\n        }\n        if (nd[idx].val > val) {\n            Insert(nd[idx].l, val);\n            if (nd[idx].pro < nd[nd[idx].l].pro) {\n                RotateR(idx);\n            }\n        } else {\n            Insert(nd[idx].r, val);\n            if (nd[idx].pro < nd[nd[idx].r].pro) {\n                RotateL(idx);\n            }\n        }\n        Update(idx);\n    }\n\n    void Decrease(int &idx, int k) {\n    \tif (idx == 0) {\n    \t\treturn;\n    \t}\n        if (nd[idx].val + increase - k < minSal) {\n            leave += nd[nd[idx].l].siz + nd[idx].cnt;\n            idx = nd[idx].r;\n            Decrease(idx, k);\n        } else {\n            Decrease(nd[idx].l, k);\n            if (nd[idx].pro < nd[nd[idx].l].pro) {\n                RotateR(idx);\n            } else if (nd[idx].pro < nd[nd[idx].r].pro) {\n                RotateL(idx);\n            }\n            Decrease(nd[idx].r, k);\n            if (nd[idx].pro < nd[nd[idx].l].pro) {\n                RotateR(idx);\n            } else if (nd[idx].pro < nd[nd[idx].r].pro) {\n                RotateL(idx);\n            }\n        }\n        Update(idx);\n    }\n\n    int GetValByRank(int idx, int rnk) {\n        if (nd[nd[idx].l].siz >= rnk) {\n            return GetValByRank(nd[idx].l, rnk);\n        } else if (nd[nd[idx].l].siz + nd[idx].cnt >= rnk) {\n            return nd[idx].val;\n        } else {\n            return GetValByRank(nd[idx].r, rnk - nd[nd[idx].l].siz - nd[idx].cnt);\n        }\n    }\n};\n\nTreap tr;\n\ninline char ReadChar() {\n\tchar c = getchar();\n\twhile (c < 'A' || c > 'Z') {\n\t\tc = getchar();\n\t}\n\treturn c;\n}\n\ninline int ReadInt() {\n\tchar c = getchar();\n\tint x = 0;\n\twhile (c < '0' || c > '9') {\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = x * 10 + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x;\n}\n\nvoid Solve() {\n\tsrand(unsigned(time(NULL)));\n\tint q = ReadInt();\n\tminSal = ReadInt();\n\tfor (int i = 1;i <= q;i++) {\n\t\tchar opt = ReadChar();\n\t\tint x = ReadInt();\n\t\tswitch (opt) {\n\t\t\tcase 'I':\n\t\t\t\tif (x < minSal) {\n\t\t\t\t\t//leave++;\n\t\t\t\t} else {\n\t\t\t\t\ttr.Insert(tr._root, x - increase);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\tincrease += x;\n\t\t\t\tbreak;\n\t\t\tcase 'S':\n\t\t\t\ttr.Decrease(tr._root, x);\n\t\t\t\tincrease -= x;\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\t//printf(\"siz=%d\\n\", tr.nd[tr._root].siz);\n\t\t\t\tif (tr.nd[tr._root].siz - 1 < x) {\n\t\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tint tmp = tr.GetValByRank(tr._root, tr.nd[tr._root].siz - x);\n\t\t\t\tif (tmp < 0x3f3f3f3f && tmp > -0x3f3f3f3f) {\n\t\t\t\t\tprintf(\"%d\\n\", tmp + increase);\n\t\t\t\t} else {\n\t\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tprintf(\"%d\", leave);\n}\n\nint main() {\n\tSolve();\n    return 0;\n}\n```\n\u4ee3\u7801\uff1a`189line,4.2K\u3002`\n\u6d4b\u8bc4\uff1a`Accepted 100 862ms 10240KB`",
        "postTime": 1554700062,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5751\u6b7b\u6211\u4e86\u3002\n\n**\u6700\u540e\u4e00\u53e5\u8bdd\u7684\u610f\u601d\u662f\u5de5\u8d44\u4e0d\u591f\u76f4\u63a5\u9000\u3002**\n\n\u81ea\u6211\u611f\u89c9\u4ee3\u7801\u548c\u522b\u4eba\u7684\u4e0d\u592a\u4e00\u6837\u3002\n\n    #include<ctime>\n    #include<cstdio>\n    #include<cstdlib>\n    #include<algorithm>\n    using namespace std;\n    #define N 100050\n    int n,m,rt,tot;\n    char ch[2];\n    struct Treap\n    {\n        int ls,rs;\n        int vl,rnd,siz,w;\n    }tr[N];\n    void update(int u)\n    {\n        tr[u].siz = tr[tr[u].ls].siz+tr[tr[u].rs].siz+tr[u].w;\n    }\n    void lturn(int &x)\n    {\n        int y = tr[x].rs;\n        tr[x].rs=tr[y].ls;\n        tr[y].ls=x;\n        tr[y].siz=tr[x].siz;\n        update(x);\n        x = y;\n    }\n    void rturn(int &x)\n    {\n        int y = tr[x].ls;\n        tr[x].ls =tr[y].rs;\n        tr[y].rs = x;\n        tr[y].siz = tr[x].siz;\n        update(x);\n        x = y;\n    }\n    void insert(int &k,int x)\n    {\n        if(!k)\n        {\n            k=++tot;\n            tr[k].vl = x;\n            tr[k].rnd = rand();\n            tr[k].siz = tr[k].w = 1;\n            return ;\n        }\n        tr[k].siz++;\n        if(tr[k].vl==x)\n        {\n            tr[k].w++;\n        }else if(x>tr[k].vl)\n        {\n            insert(tr[k].rs,x);\n            if(tr[tr[k].rs].rnd<tr[k].rnd)lturn(k);\n        }else\n        {\n            insert(tr[k].ls,x);\n            if(tr[tr[k].ls].rnd<tr[k].rnd)rturn(k);\n        }\n    }\n    int cnt;\n    void deal(int &k)//\u7279\u6b8a\u64cd\u4f5c\uff0c\u975e\u666e\u901a\u5220\u9664\n    {\n        if(!k)return ;\n        if(tr[k].vl>=m)//\u82e5\u5f53\u524d\u70b9\u6743\u503c\u4e0d\u5c0f\u4e8em\u5219\u627e\u5de6\u5b50\u6811\n        {\n            deal(tr[k].ls);\n            update(k);\n            return ;\n        }\n        cnt+=(tr[tr[k].ls].siz+tr[k].w);//\u5148\u5220\u5de6\u5b50\u6811\u548c\u5f53\u524d\u70b9\n        k = tr[k].rs;//\u5c06\u5176\u7236\u4eb2\u7684\u513f\u5b50k\u6539\u4e3ak\u7684\u53f3\u513f\u5b50\n        deal(k);\n        update(k);\n    }\n    int query(int u,int k)\n    {\n        int t = tr[tr[u].rs].siz;\n        if(t>=k)return  query(tr[u].rs,k);\n        else if(k<=t+tr[u].w)return tr[u].vl;\n        else return query(tr[u].ls,k-t-tr[u].w);\n    }\n    int main()\n    {\n        srand(time(NULL));\n        scanf(\"%d%d\",&n,&m);\n        int m0  = m;\n        for(int x,i=1;i<=n;i++)\n        {\n            scanf(\"%s%d\",ch,&x);\n            if(ch[0]=='I')\n            {\n                if(x<m0)continue;\n                insert(rt,x+m-m0);\n            }else if(ch[0]=='A')//\u8fd9\u91cc\u7684A\u548cS\u662f\u53cd\u5411\u64cd\u4f5c\n            {\n                m-=x;\n            }else if(ch[0]=='S')\n            {\n                m+=x;\n                deal(rt);\n            }else if(ch[0]=='F')\n            {\n                if(tr[rt].siz<x)\n                {\n                    printf(\"-1\\n\");\n                    continue;\n                }\n                printf(\"%d\\n\",query(rt,x)+(m0-m));\n            }\n        }\n        printf(\"%d\\n\",cnt);\n        return 0;\n    }\n",
        "postTime": 1536168202,
        "uid": 68655,
        "name": "LiGuanlin1124",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "## \u7b97\u6cd5\uff1a \u5e73\u8861\u6811\n\n------------\n\n\u4e00\u68f5\u5de6\u513f\u5b50\u5927\uff0c\u53f3\u513f\u5b50\u5c0f\u7684\u5e73\u8861\u6811\n\n\u5177\u4f53\u6bd4\u8f83\u9ebb\u70e6\u7684\u64cd\u4f5c\u662f\u964d\u5de5\u8d44\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u8df3\u69fd\u95ee\u9898\n\n\u5148\u8bb2\u4e00\u4e0b\u5de5\u8d44\u7684\u5904\u7406\u65b9\u5f0f\uff1a\n\n\u5927\u6982\u5c31\u662f\u5f04\u4e00\u4e2a\u91cf\u8bb0\u5f55\u5de5\u8d44\u7684\u53d8\u5316\u91cf\n\n\u56e0\u4e3a\u65b0\u8fdb\u516c\u53f8\u7684\u4eba\u524d\u9762\u5de5\u8d44\u52a0\u51cf\u4e0e\u4ed6\u65e0\u5173\uff0c\u8fdb\u5e73\u8861\u6811\u65f6\u51cf\u53bb\u516c\u53f8\u5df2\u6709\u7684\u5de5\u8d44\u53d8\u5316\u91cf\u5373\u53ef\n\n\u7136\u540e\u5c31\u662f\u7565\u9ebb\u70e6\u7684\u964d\u5de5\u8d44\u64cd\u4f5c\n\n\u5176\u5b9e\u86ee\u597d\u60f3\u5230\u7684 \u52a0\u4e00\u4e2a\u5de5\u8d44\u6807\u51c6\u7684\u8282\u70b9\n\n\u6839\u636eSplay\u7684\u6027\u8d28\u6bcf\u6b21\u64cd\u4f5c\u7684\u8282\u70b9\u4f1a\u53d8\u6210\u6839\u8282\u70b9\n\n\u81ea\u7136\u5f62\u6210\u6839\u7684\u5de6\u5b50\u6811\u5927\u4e8e\u5de5\u8d44\u6807\u51c6\uff0c\u53f3\u5b50\u6811\u5c0f\u4e8e\u5de5\u8d44\u6807\u51c6\n\n\u628a\u53f3\u5b50\u6811\u5220\u6389\u5c31\u884c\n\n~~\uff08\u679c\u7136\u8fd8\u662f\u592a\u83dc\u4e86\uff09~~\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define reg register\nconst int N = 300000 + 5, inf=0x3f3f3f3f;\n\nint n, val[N], cnt[N], ch[N][2], size[N], f[N], rt, tot;\n\nvoid clear(int x) {\n    val[x]=cnt[x]=size[x]=f[x]=ch[x][0]=ch[x][1]=0;\n}\n\nint get(int x) {\n    return ch[f[x]][1]==x;\n}\n\nvoid pushup(int x) {\n    if (x) {\n        size[x]=cnt[x];\n        if (ch[x][0]) size[x]+=size[ch[x][0]];\n        if (ch[x][1]) size[x]+=size[ch[x][1]];\n    }\n}\n\nvoid rotate(int x) {\n    int fa=f[x], gfa=f[fa], k=get(x);\n    ch[fa][k]=ch[x][k^1]; f[ch[fa][k]]=fa;\n    ch[x][k^1]=fa; f[fa]=x; f[x]=gfa;\n    if (gfa) ch[gfa][ch[gfa][1]==fa]=x;\n    pushup(fa); pushup(x); \n}\n\nvoid splay(int x, int goal=0) {\n    for (int fa; (fa=f[x])!=goal; rotate(x))\n        if (f[fa]!=goal) rotate(get(x)==get(fa)?fa:x);\n    if (!goal) rt=x;\n}\n\nvoid insert(int x) {\n    if (!rt) { rt=++tot; val[tot]=x; cnt[tot]=size[tot]=1; f[tot]=ch[tot][0]=ch[tot][1]=0; return; }\n    int p=rt, fa=0;\n    while (1) {\n        if (x==val[p]) { ++cnt[p], pushup(p), pushup(fa), splay(p); return; }\n        fa=p; p=ch[p][x<val[p]];\n        if (!p) { ++tot; val[tot]=x; cnt[tot]=size[tot]=1; f[tot]=fa; ch[tot][0]=ch[tot][1]=0; ch[fa][x<val[fa]]=tot; pushup(fa); splay(tot); return; }\n    }\n}\n\nint rank(int x) {\n    int p=rt, ans=0;\n    while (1) {\n        if (x>val[p]) p=ch[p][0];\n        else {\n             ans+=size[ch[p][0]];\n             if (x==val[p]) { splay(p); return ans+1; }\n             ans+=cnt[p]; p=ch[p][1];\n        }\n    }\n}\n\nint kth(int x) {\n    int p=rt;\n    while (1) {\n        if (ch[p][0] && x<=size[ch[p][0]]) p=ch[p][0];\n        else {\n            int t=size[ch[p][0]]+cnt[p];\n            if (x<=t) return val[p];\n            x-=t; p=ch[p][1];\n        }\n    }\n}\n\nint pre() { int p=ch[rt][0]; while (ch[p][1]) p=ch[p][1]; return p; } \nint nxt() { int p=ch[rt][1]; while (ch[p][0]) p=ch[p][0]; return p; }\n\nvoid del(int x) {\n    rank(x);\n    if (cnt[rt]>1) { --cnt[rt]; pushup(rt); return; }\n    if (!ch[rt][0] && !ch[rt][1]) { clear(rt); rt=0; return; }\n    if (!ch[rt][0]) { int ort=rt; rt=ch[rt][1]; f[rt]=0; clear(ort); return; }\n    else if (!ch[rt][1]) { int ort=rt; rt=ch[rt][0]; f[rt]=0; clear(ort); return; }\n    int ort=rt; int nrt=pre();\n    splay(nrt);\n    ch[rt][1]=ch[ort][1]; f[ch[rt][1]]=rt; clear(ort);\n    pushup(rt);\n}\n\nint delta, low, leftnum; char opt[2];\n\nint main() {\n    scanf(\"%d%d\", &n, &low);\n    for (reg int i=1; i<=n; ++i) {\n        int k;\n        scanf(\"%s %d\", opt, &k);\n        if (opt[0]=='I') {\n            if (k<low) continue;\n            insert(k-delta); continue;\n        }\n        if (opt[0]=='A') { delta+=k; continue; }\n        if (opt[0]=='S') {\n            delta-=k;\n            int x=low-delta;\n            insert(x); leftnum+=size[ch[rt][1]];\n            ch[rt][1]=0;\n            pushup(rt);\n            del(x); continue;\n        }\n        if (opt[0]=='F') {\n            int x=size[rt];\n            if (x<k) { printf(\"-1\\n\"); continue; }\n            printf(\"%d\\n\", kth(k)+delta); continue;\n        }\n    }\n    printf(\"%d\\n\", leftnum);\n    return 0;\n}\n\n```\n\n\u8fd9\u9898\u5982\u679c\u4f1aFHQ\u2014Treap\u7684\u8bdd\u63a8\u8350\u7528FHQ-Treap\u6765\u5199\uff0c\u56e0\u4e3aFHQ-Treap\u5b9e\u73b0\u5220\u5b50\u6811\u7684\u64cd\u4f5c\u662f\u76f8\u5f53\u76f4\u89c2\u7684\n\n\u5982\u679c\u4f1apb_ds\u7684\u5927\u4f6c\u7528pb_ds\u4ee3\u7801\u66f4\u7b80\u6d01\u4e86\u3002\u521d\u5b66\u8005\u4e0d\u5efa\u8bae\u7528\u8fd9\u79cd\u4e1c\u897f\u5077\u61d2\uff0c\u6bd5\u7adf\u5b66\u4f1a\u7b97\u6cd5\u6bd4AC\u66f4\u91cd\u8981\n",
        "postTime": 1554345793,
        "uid": 26023,
        "name": "_Atyou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "## \u58f0\u660e\n\n\n\u521a\u5f00\u59cb\u5b66\u5e73\u8861\u6811\uff0c~~\u5e76\u4e0d\u4f1a\u5199~~\u3002\u800c\u4e14\u8fd9\u9898\u53ef\u4ee5\u7528`pb\\_ds`\u901a\u8fc7\uff0c\u8fd9\u91cc\u7ed9\u51fa\u8fd9\u79cd\u7248\u672c\u3002\n\n\n## \u4ee3\u7801\n\n\n```cpp\n#include<bits/stdc++.h>\n#include<bits/extc++.h>\n//extc++.h\u4e0estdc++.h\u7c7b\u4f3c\uff0c\u540e\u8005\u5305\u542b\u6807\u51c6C++\u7684\u5934\u6587\u4ef6\uff0c\u800c\u524d\u8005\u63d0\u4f9b\u6269\u5c55\nusing namespace std;\nusing namespace __gnu_pbds;\n//pb_ds\u6240\u9700\u7684namespace\nconst int M=100005;\ntypedef pair<int,int> pii;\n//first\u5b58\u5de5\u8d44\uff0csecond\u5b58id\uff08\u53ef\u80fd\u6709\u91cd\u590d\u7684\u5de5\u8d44\uff0c\u9700\u8981\u533a\u5206\uff09\ntypedef tree<pii,null_type,greater<pii>,rb_tree_tag,tree_order_statistics_node_update> tree_t;\n//\u4f7f\u7528tree_order_statistics_node_update\u6765\u83b7\u53d6find_by_order\u65b9\u6cd5\ntree_t T,TE;\n//TE\u4e3a\u65e0\u7528\u7684\u6811\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    int delta=0,ans=0,id=0;\n      //delta\u4fdd\u5b58\u5168\u5c40\u5de5\u8d44\u504f\u79fb\n    while(n--)\n    {\n        char opt;\n        for(opt=getchar();isspace(opt);opt=getchar());\n          //\u8df3\u8fc7\u7a7a\u767d\n        int x;\n        scanf(\"%d\",&x);\n        switch(opt)\n        {\n            case 'I':\n                if(x>=m)\n                    T.insert(make_pair(x-delta,++id));\n                    //\u63d2\u5165\u65f6\u9700\u8003\u8651\u504f\u79fb\n                break;\n            case 'A':\n                delta+=x;\n                break;\n            case 'S':\n                delta-=x;\n                T.split(make_pair(m-delta,0),TE);\n                //\u6e05\u7a7aTE\uff0c\u5e76\u628aT\u4e2d\u5de5\u8d44\u5c0f\u4e8e\u6700\u4f4e\u6807\u51c6\u7684\u79fb\u52a8\u5230TE\u4e2d\n                ans+=TE.size();\n                break;\n            case 'F':\n                tree_t::iterator i=T.find_by_order(x-1);\n                //\u6ce8\u610ffind_by_order\u662f\u4ece0\u5f00\u59cb\u7684\n                if(i==T.end())\n                    puts(\"-1\");\n                else\n                    printf(\"%d\\n\",i->first+delta);\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\n## \u5947\u602a\u7684I/O\u95ee\u9898\n\n\n\u7528`cin/cout`\u4f1a\u8d85\u65f6\uff0c\u8fd9\u5f88\u6b63\u5e38\uff1b\u4f46\u662f\u5f53\u6211\u8bd5\u56fe\u7528\n\n\n```cpp\nscanf(\"%1s%d\",&opt,&x);\n```\n\n\u8f93\u5165`opt`\u65f6\u51fa\u73b0\u4e86\u95ee\u9898\uff1a\u4e3b\u7ad940\u5206\uff0c\u5927\u725b0\u5206\uff0c\u7528`%s`\u4e5f\u4e0d\u884c\u3002\u4e5f\u8bb8\u662f\u8fd9\u6837\u6709\u95ee\u9898\uff0c\u6b22\u8fce\u53cd\u9988\u3002\n\n\n> \u4fee\u6b63\uff1a\u4f7f\u7528`scanf()`\u8f93\u5165\u5b57\u7b26\u4e32\u6570\u7ec4\u5927\u5c0f\u81f3\u5c11\u4e3astrlen+1\u3002\n>\n> \u6b63\u786e\u65b9\u6cd5\uff1a\n>\n> ```c\n> char opt[2];\n> scanf(\"%1s\",opt);\n> ```\n\n\n## \u603b\u7ed3\n\n\n\u5408\u7406\u4f7f\u7528`pb\\_ds`\u80fd\u7b80\u5316\u4ee3\u7801\uff0c\u4f46`pb\\_ds`\u4e5f\u6709\u5f88\u591a\u7f3a\u70b9\uff1a\n\n\n- \u5e38\u6570\u5927\uff08\u867d\u7136\u6bd4`STL`\u5c0f\uff09\n\n\n- \u76f8\u6bd4\u624b\u5199\u6570\u636e\u7ed3\u6784\u5c40\u9650\n\n\n- \u5728\u6bd4\u8d5b\u4e2d\u7528\u4e0d\u5b89\u5168\uff1f\n\n\n- \u4e0d\u540c\u7248\u672c\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u5982`null\\_type`\u548c`null\\_mapped\\_type`\uff08\u65e7\u7248\uff09\n\n\n- ~~\u8c03\u8bd5\u4e0d\u65b9\u4fbf~~\n\n\n\u5f53\u6211\u8bd5\u56fe`(gdb)print`\u4e00\u4e2a`tree`\u65f6\uff0c\u51fa\u73b0\u4e00\u5806\u4e71\u4e03\u516b\u7cdf\u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u7684\u8c03\u8bd5\u65b9\u6cd5\uff1a\n\n\n```cpp\nvoid debug(const tree_t& T)\n{\n    for(tree_t::iterator i=T.begin();i!=T.end();i++)\n        cout<<i->first<<' '<<i->second<<endl;\n}\n```\n\n\u6216\u8005`C++11`\n\n\n```cpp\nvoid debug(const tree_t& T)\n{\n    for(auto i:T)\n        cout<<i.first<<' '<<i.second<<endl;\n}\n```\n\n\u8fd9\u6837\u53ea\u8981\u6267\u884c\u7c7b\u4f3c`(gdb)p debug(T)`\u5c31\u80fd\u6253\u5370\u51fa\u6765\n",
        "postTime": 1502851974,
        "uid": 9406,
        "name": "zhzh2001",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1486 \u3010\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u6211\u653e\u4e00\u4e2aSplay\u7684\u3002\n\n\u5e73\u8861\u6811\u88f8\u9898\u3002\n\n\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u8868\u793a\u5458\u5de5\u5de5\u8d44\u6539\u53d8\u91cf\uff0c\u63d2\u5165\u65f6\u6ce8\u610f\u4fee\u6539\u65b0\u5458\u5de5\u5de5\u8d44\u4f7f\u5176\u540c\u6837\u5177\u6709\u6b64\u6539\u53d8\u91cf\u3002\n\n\u5220\u9664\u65f6\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u4e0d\u88ab\u5220\u9664\u7684\u6700\u4f4e\u5de5\u8d44\u5458\u5de5\uff0c\u8f6c\u5230\u6839\uff0c\u5220\u9664\u5de6\u5b50\u6811\u3002\n\n\u627e\u7b2cK\u5927\u548c\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5f53\u524d\u70b9\u662f\u7b2c\u51e0\u5927\uff0c\u7136\u540e\u5411\u5de6/\u53f3\u4e0b\u964d\uff0c\u4e5f\u662f\u7ecf\u5178\u64cd\u4f5c\u3002\n\n\u5bf9\u4e8e\u91cd\u590d\u5de5\u8d44\u5458\u5de5\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8282\u70b9\u4e0a\u8bb0\u5f55\u4e00\u4e2atime\u8868\u793a\u51fa\u73b0\u6b21\u6570\u3002\n\n\u6ce8\u610f\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u6811\u7684size\uff0c\u65cb\u8f6c\u65f6\u89c1\u673a\u800c\u884c\u66f4\u65b0\u5176\u503c\u3002\n\n\u867d\u7136\u8dd1\u5f97\u4e0d\u5feb\u4f46\u662f\u6bd4\u8f83\u597d\u5199!\n\n```cpp\n#include<cstdio>\n#define maxn 100009\nusing namespace std;\nstruct splay{\n    int l, r, fa, size, v, time;\n}node[maxn];\nint root = 0, cnt = 0, change = 0, p = 0, n, small;\ninline void update(int x){node[x].size = node[node[x].l].size + node[node[x].r].size + node[x].time;}\nvoid zig(int x){\n    int F = node[x].fa, G = node[F].fa;\n    if (G){\n        if (node[G].l == F) node[G].l = x;\n        else node[G].r = x;\n    }\n    node[x].fa = G;\n    node[F].l = node[x].r;\n    if (node[x].r) node[node[x].r].fa = F;\n    node[F].fa = x;\n    node[x].r = F;\n}\nvoid zag(int x){\n    int F = node[x].fa, G = node[F].fa;\n    if (G){\n        if (node[G].l == F) node[G].l = x;\n        else node[G].r = x;\n    }\n    node[x].fa = G;\n    node[F].r = node[x].l;\n    if (node[x].l) node[node[x].l].fa = F;\n    node[F].fa = x;\n    node[x].l = F;\n}\nvoid Splay(int x, int s = 0){\n    while (node[x].fa != s){\n        int F = node[x].fa, G = node[F].fa;\n        if (G == s){\n            if (node[F].l == x) zig(x); else zag(x);\n            update(F);\n            break;\n        }\n        else{\n            if (node[F].l == x){\n                if (node[G].l == F){zig(F); zig(x);}\n                else{zig(x);zag(x);}\n            }\n            else{\n                if (node[G].r == F){zag(F); zag(x);}\n                else{zag(x); zig(x);}\n            }\n            update(G);\n            update(F);\n        }\n    }\n    update(x);\n    if (!s) root = x;\n}\nint find(int x){\n    int p = root;\n    while (p && node[p].v != x){\n    if (x > node[p].v) p = node[p].r; else p = node[p].l;\n    }\n    if (p) Splay(p);\n    return p;\n}\nvoid insert(int x){\n    if (!root){node[++cnt] = (splay){0, 0, 0, 1, x, 1}; root = cnt; return;}\n    int p = root, p2;\n    while (p){\n        if (x == node[p].v) {++node[p].time;update(p); Splay(p);break;}\n        else if (x > node[p].v) p2 = node[p].r;\n        else p2 = node[p].l;\n        if (!p2){\n            node[++cnt] = (splay){0, 0, p, 1, x, 1};\n            if (x > node[p].v) node[p].r = cnt;\n            else node[p].l = cnt;\n            update(p);\n            Splay(cnt);\n            break;\n        }\n        p = p2;\n    }\n}\nint getKth(int k){\n    int p = root;\n    while (k){\n        int size = node[node[p].l].size, time = node[p].time;\n        if (size + time < k) {p = node[p].r; k -= size + time;}\n        else if (size >= k) p =  node[p].l;\n        else return node[p].v;\n    }\n}\nvoid del(){\n    int p = root, p2 = root, ch = small - change;\n    while(p){\n        if (node[p].v < ch) p = node[p].r;\n        else{p2 = p; p = node[p].l;}\n    }\n    if (node[p2].v < ch) {root = 0;return;}\n    Splay(p2);\n    node[p2].l = 0;\n    update(p2);\n}\nint read(){\n    char c;\n    while (c = getchar(), c < '0' || c > '9');\n    int x = c - '0';\n    while (c = getchar(), c >= '0' && c <= '9') x = x * 10 + c - '0';\n    return x;\n}\nint main(){\n    char c; int x;\n    node[0] = (splay){0, 0, 0, 0, 0, 0};\n    n = read(); small = read();\n    while(n--){\n        while (c = getchar(), !(c >= 'A' && c <= 'Z'));\n        x = read();\n        switch(c){\n            case 'I':if (x >= small) {++p;insert(x - change);};break;\n            case 'A':change += x;break;\n            case 'S':change -= x; del();break;\n            case 'F':if (x > node[root].size) printf(\"-1\\n\");\n            else printf(\"%d\\n\", getKth(node[root].size - x + 1) + change);break;\n        }\n    }\n    printf(\"%d\\n\", p - node[root].size);\n    return 0;\n}\n```",
        "postTime": 1462184875,
        "uid": 6553,
        "name": "why_always_china",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u5229\u7528\u6700\u8fd1\u5b66\u7684\u6570\u636e\u7ed3\u6784SBT\u8fc7\u4e86\u6b64\u9898\uff0c\u6545\u6765\u8bb2\u8bb2\u8282\u70b9\u5927\u5c0f\u5e73\u8861\u6811\u7684\u505a\u6cd5\u3002[[\u6233\u6211\u4e86\u89e3Size-Balanced-Tree](https://www.luogu.org/blog/firstfan/size-balanced-tree)]\n\n\u8fd9\u9053\u9898\u8003\u5bdf\u4e86\u5927\u90e8\u5206\u5e73\u8861\u6811\u7684\u64cd\u4f5c\uff0c\u5982\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u7b2ck\u5927\u5143\u7d20\u7b49\uff0c\u6240\u4ee5\u53ef\u4ee5\u89c6\u4e3a\u5f31\u5316\u7248\u7684\u6a21\u677f\u3002\n\n\u6b64\u9898\u7279\u522b\u7684\u4e00\u70b9\u5c31\u662f\u8981\u7528\u4e00\u4e2a\u53d8\u91cf\u7edf\u8ba1\u4e00\u4e0b\u6240\u6709\u6210\u5458\u7684\u5de5\u8d44\uff0c\u4e00\u4e2a\u6bd4\u8f83\u5999\u7684\u64cd\u4f5c\u662f\uff1a\u5728\u5458\u5de5\u52a0\u5165\u540e\u76f4\u63a5\u5b58\u50a8\u4ed6\u4e0e\u6700\u4f4e\u5de5\u8d44\u7684\u5dee\u503c\u5373\u53ef\n\n\u7b80\u6790\u4e00\u4e0b\u56db\u79cd\u64cd\u4f5c\u600e\u4e48\u5904\u7406\uff1a\n\n```cpp\n1.\u63d2\u5165\u6743\u503c\u4e3ak-min\u7684\u7ed3\u70b9\n\n2.\u628aSBT\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u52a0k\n\n3.\u628aSBT\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u51cfk\uff0c\u51cf\u5b8c\u540e\u628a\u4f4e\u4e8emin\u7684\u7ed3\u70b9\u5220\u9664\u3002\n\n4.\u67e5\u8be2SBT\u7b2ck\u5927\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3aSBT\u7b2c(siz-k)\u5c0f\u3002\u5982\u679c\u8303\u56f4\u8d8a\u6811\u5c3a\u5bf8\u8f93\u51fa-1\u5c31\u597d\u3002\n```\n\n\u6700\u540e\uff0c\u8bf7\u6ce8\u610f\u4e00\u4e2a**\u5751\u70b9**\uff1a\u5728\u52a0\u5165\u65b0\u6210\u5458\u7684\u65f6\u5019\uff0c\u8981\u6ce8\u610f\u5982\u679c\u4ed6\u4e00\u6765\u5c31\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u5c31\u76f4\u63a5~~\u529d\u9000~~\u4e0dinsert\u5373\u53ef\u3002\n\n\u6b64\u5904\u672a\u5bf9SBT\u8fdb\u884c\u5c01\u88c5\uff0c\u7b80\u6d01\u660e\u4e86\uff0c\u4fbf\u4e8e\u7406\u89e3\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ri register int\n#define ll long long\nusing namespace std;\n\nint read()\n{\n\tint num=0;\n\tint flg=1;\n\tchar c=getchar();\n\twhile(!isdigit(c))\n\t{\n\t\tif(c=='-')\n\t\t{\n\t\t\tflg=-1;\n\t\t}\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\n\t{\n\t\tnum=(num<<1)+(num<<3)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn num*flg;\n}\n\nconst int maxn=1e6+7;\n\n#define ls(x) (t[x].l)\n#define rs(x) (t[x].r)\nstruct SBT\n{\n\tint val;\n\tint l;\n\tint r;\n\tint siz;\n} t[maxn];\n\nint rt=0;\nint cnt=0;\n\nvoid lrot(int &x)\n{\n\tint y=rs(x);\n\trs(x)=ls(y);\n\tls(y)=x;\n\tt[y].siz=t[x].siz;\n\tt[x].siz=t[ls(x)].siz+t[rs(x)].siz+1;\n\tx=y;\n}\n\nvoid rrot(int &x)\n{\n\tint y=ls(x);\n\tls(x)=rs(y);\n\trs(y)=x;\n\tt[y].siz=t[x].siz;\n\tt[x].siz=t[ls(x)].siz+t[rs(x)].siz+1;\n\tx=y;\n}\n\nvoid maintain(int &x,bool lr)\n{\n\tif(!lr)\n\t{\n\t\tif(t[ls(ls(x))].siz>t[rs(x)].siz)\n\t\t{\n\t\t\trrot(x);\n\t\t}\n\t\telse if(t[rs(ls(x))].siz>t[rs(x)].siz)\n\t\t{\n\t\t\tlrot(ls(x));\n\t\t\trrot(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn ;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(t[rs(rs(x))].siz>t[ls(x)].siz)\n\t\t{\n\t\t\tlrot(x);\n\t\t}\n\t\telse if(t[ls(rs(x))].siz>t[ls(x)].siz)\n\t\t{\n\t\t\trrot(rs(x));\n\t\t\tlrot(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn ;\n\t\t}\n\t}\n\tmaintain(ls(x),0);\n\tmaintain(rs(x),1);\n\tmaintain(x,1);\n\tmaintain(x,0);\n}\n\nvoid insert(int &x,int val)\n{\n\tif(!x)\n\t{\n\t\tx=++cnt;\n\t\tt[x].val=val;\n\t\tt[x].siz=1;\n\t\treturn ;\n\t}\n\tt[x].siz++;\n\tif(val<t[x].val)\n\t{\n\t\tinsert(ls(x),val);\n\t}\n\telse\n\t{\n\t\tinsert(rs(x),val);\n\t}\n\tmaintain(x,val>=t[x].val);\n}\n\nint del(int &x,int val)\n{\n\tt[x].siz--;\n\tint res=0;\n\tif(val==t[x].val||(val<t[x].val&&!ls(x))||(val>t[x].val&&!rs(x)))\n\t{\n\t\tres=t[x].val;\n\t\tif(!ls(x)||!rs(x))\n\t\t{\n\t\t\tx=ls(x)+rs(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt[x].val=del(ls(x),t[x].val+1);\n\t\t}\n\t\treturn res;\n\t}\n\tif(val<t[x].val)\n\t{\n\t\tres=del(ls(x),val);\n\t}\n\telse\n\t{\n\t\tres=del(rs(x),val);\n\t}\n\treturn res;\n}\n\nint kth(int &x,int val)\n{\n\tif(val==t[ls(x)].siz+1)\n\t{\n\t\treturn t[x].val;\n\t}\n\telse if(val<=t[ls(x)].siz)\n\t{\n\t\treturn kth(ls(x),val);\n\t}\n\telse\n\t{\n\t\treturn kth(rs(x),val-t[ls(x)].siz-1);\n\t}\n}\n\nint main()\n{\n\tint n=read();\n\tint lim=read();\n\tint ans=0;\n\tint tot=0;\n\tint add=0;\n\trt=0;\n\tint tt=0;\n\tt[0].siz=0;\n\tfor(ri i=1; i<=n; i++)\n\t{\n\t\tstring s;\n\t\tcin>>s;\n\t\tint k=read();\n\t\tif(s[0]=='I'&&k>=lim)\n\t\t{\n\t\t\tinsert(rt,k-add);\n\t\t\t++tot;\n\t\t}\n\t\tif(s[0]=='A')\n\t\t{\n\t\t\tadd+=k;\n\t\t}\n\t\tif(s[0]=='S')\n\t\t{\n\t\t\tint j;\n\t\t\tadd-=k;\n\t\t\twhile(tot&&(j=kth(rt,1))+add<lim)\n\t\t\t{\n\t\t\t\tdel(rt,j);\n\t\t\t\t--tot;\n\t\t\t\t++ans;\n\t\t\t}\n\t\t}\n\t\tif(s[0]=='F')\n\t\t{\n\t\t\tif(k>tot)\n\t\t\t{\n\t\t\t\tputs(\"-1\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprintf(\"%d\\n\",kth(rt,tot-k+1)+add);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1571673601,
        "uid": 126484,
        "name": "first_fan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "## \u672c\u9898 $FHQ\\;Treap$ \u5199\u6cd5\n\n\u9898\u9762\u5f88\u88f8\uff0c\u5c31\u662f\u56db\u4e2a\u64cd\u4f5c\n\n1. \u63d2\u5165\u4e00\u4e2a\u6570\uff08\u5982\u679c\u4f4e\u4e8e\u4e0b\u9650\u5c31\u4e0d\u63d2\u5165\uff09\n1. \u5f53\u524d\u5b58\u5728\u7684\u6240\u6709\u6570\u52a0\u4e0a\u4e00\u4e2a\u503c\n3. \u5f53\u524d\u5b58\u5728\u7684\u6570\u51cf\u53bb\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u6709\u4f4e\u4e8e\u4e0b\u9650\u503c\u5f97\u6570\u5219\u5220\u9664\n4. \u67e5\u8be2\u5f53\u524d**\u7b2c $k$ \u5927**\u7684\u6570\uff08\u6ce8\u610f\u662f**\u7b2c $k$ \u5927**\uff09\n\n\u6700\u540e\u8fd8\u8981\u8f93\u51fa\u5220\u9664\u4e86\u591a\u5c11\u6570\n\n\u6211\u4eec\u53d1\u73b0 $1,4$ \u64cd\u4f5c\u5e73\u8861\u6811\u90fd\u80fd\u5728 $\\log$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e2d\u89e3\u51b3\n\n\u81f3\u4e8e $2,3$ \u64cd\u4f5c\uff0c\u6211\u4eec\u7528\u4e00\u822c\u65b9\u6cd5\u505a\u8981\u904d\u5386\u6240\u6709\u6570\u5b57\uff0c\u590d\u6742\u5ea6\u4e3a $O(n)$\n\n**\u601d\u8003\uff1a\u662f\u5426\u80fd\u8fd0\u7528 $lazytag$ \u7684\u601d\u60f3**\n\n\u7528\u4e00\u4e2a $delta$ \u53d8\u91cf\u50a8\u5b58\u5176\u53d8\u5316\u91cf\uff0c\u63d2\u5165\u6570\u5b57\u65f6\u5224\u65ad\u662f\u5426\u4f4e\u4e8e\u4e0b\u9650\uff0c\u5982\u679c\u4f4e\u4e8e\u5219\u4e0d\u63d2\u5165\uff0c\u5426\u5219\u63d2\u5165 $x-delta$\n\n\u5224\u65ad\u65f6\u4e0e $min-delta$ \u6bd4\u8f83\u5927\u5c0f\uff0c\u540c\u65f6\u6211\u4eec\u53d1\u73b0 $t[x]<min-delta$ \u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u9664 $son[x][0]$\uff08\u8282\u70b9 $x$ \u7684\u5de6\u5b50\u6811\uff09\uff0c$ans$ \u52a0\u4e0a $size[son[x][0]]+1$\n\n\u67e5\u627e\u65f6\u627e $size[root]-x$ \u5c31\u884c\u4e86\uff08\u7531\u4e8e\u4e00\u5f00\u59cb\u63d2\u5165\u4e86\u4e00\u4e2a $INT\\_MAX$\uff0c\u6240\u4ee5\u67e5\u627e\u7684\u662f $size[root]-x-1+1$\uff09\n\n\u5176\u4f59\u7684\u7528\u5e73\u8861\u6811\u641e\u5c31\u884c\u4e86\n\n### \u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <bits/stdc++.h>\n#define random(x) rand()*rand()%x\n#define INF random(30000010)+10000010\n#define N 4000010\nusing namespace std;\n\nint size[N],t[N],heap[N],son[N][2];\nint n,x,cnt,root,ans,_min,delta;\nchar c;\n\nvoid add(int val){t[++cnt]=val;size[cnt]=1;heap[cnt]=random(INF);}\n\nvoid update(int x)\n{\n    size[x]=size[son[x][0]]+size[son[x][1]]+1;\n}\n\nvoid split(int now,int &a,int &b,int val)\n{\n    if (!now) {a=0,b=0;return;}\n    if (t[now]<=val) a=now,split(son[now][1],son[a][1],b,val);\n    else b=now,split(son[now][0],a,son[b][0],val);\n    update(now);\n}\n\nvoid merge(int &now,int a,int b)\n{\n    if (a==0 || b==0) {now=a+b;return;}\n    if (heap[a]<heap[b]) now=a,merge(son[now][1],son[a][1],b);\n    else now=b,merge(son[now][0],a,son[b][0]);\n    update(now);\n}\n\nvoid insert(int val)\n{\n    int x=0,y=0;\n    split(root,x,y,val);\n    add(val);\n    int o=cnt;\n    merge(x,x,o);merge(root,x,y);\n}\n\nint findnum(int now,int x)\n{\n    if (size[son[now][0]]+1==x) return t[now];\n    if (size[son[now][0]]>=x) return findnum(son[now][0],x);\n    else return findnum(son[now][1],x-size[son[now][0]]-1);\n}\n\nvoid check()\n{\n    int x=0,y=0;\n    split(root,x,y,_min-delta-1);  //\u76f4\u63a5\u5c06\u6811\u6309 min-delta-1 \u5288\u6210\u4e24\u68f5\uff0c\u5c06\u4ee5 x \u4e3a\u6839\u7684\u6811\u76f4\u63a5\u5220\u9664\n    ans+=size[x];\n    root=y;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&_min);\n    add(INT_MAX);root=1;heap[root]=-INT_MAX;\n    for (int i=1;i<=n;i++)\n    {\n        c=getchar();\n        while (c<'A' || c>'Z') c=getchar();\n        scanf(\"%d\",&x);\n        if (c=='I') if (x>=_min) insert(x-delta);\n        if (c=='A') delta+=x;\n        if (c=='S') delta-=x,check();\n        if (c=='F') if (size[root]<=x) printf(\"-1\\n\");\n                    else printf(\"%d\\n\",findnum(root,size[root]-x)+delta);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}    \\\\\u4ee3\u7801\u5176\u4ed6\u90e8\u5206\u4e0a\u9762\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u4e0d\u505a\u8d58\u8ff0\n```",
        "postTime": 1559817809,
        "uid": 67718,
        "name": "G\u6211\u5c31\u662f\u83dcG",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011P1486 [NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458"
    },
    {
        "content": "\u53d1\u4e00\u7bc7splay\u7684\u9898\u89e3\u597d\u4e86\n\n\u56db\u4e2a\u64cd\u4f5c\n\n\u5bf9\u4e8eA\u548cS\u64cd\u4f5c\uff0c\u5982\u679c\u4e00\u4e2a\u4e2a\u66f4\u6539\u5de5\u8d44\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662fO\uff08n\uff09\u7684\uff0c\u7edd\u5bf9T\u3002\u6211\u4eec\u53ef\u4ee5\u6362\u4e2a\u601d\u8def\uff0c\u4e0e\u5176\u66f4\u6539\u5de5\u8d44\uff0c\u4e0d\u5982\u66f4\u6539\u6700\u4f4e\u5de5\u8d44\u4e0b\u9650\u3002\u8bb0\u4e00\u4e2a\u539f\u5de5\u8d44\u4e0b\u9650\u548c\u73b0\u5de5\u8d44\u4e0b\u9650\uff0c\u53ea\u8981\u4fdd\u8bc1\u66f4\u6539\u540e\u5de5\u8d44-\u539f\u5de5\u8d44\u4e0b\u9650=\u539f\u5de5\u8d44-\u73b0\u5de5\u8d44\u4e0b\u9650\u5c31\u53ef\u4ee5\u4e86\uff08\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\uff09\n\n\u53e6\u5916\uff0c\u964d\u5de5\u8d44\u7684\u65f6\u5019\uff0c\u8bb0\u5f97\u628a\u5de5\u8d44\u4f4e\u4e8e\u4e0b\u9650\u7684\u5220\u9664\uff08\u53cd\u6b63\u603b\u5171\u5c31n\u4e2a\u8282\u70b9\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5220\u4e5f\u4e0d\u4f1aT\uff09\n\n\u63d2\u5165\u65b0\u5458\u5de5\u7684\u65f6\u5019\uff0c\u8bb0\u5f97\u628a\u65b0\u5458\u5de5\u5de5\u8d44\u5e26\u8fdb\u4e0a\u9762\u7684\u5f0f\u5b50\uff0c\u4fbf\u4e8e\u5b58\u50a8\n\n\u8be2\u95ee\u65f6\uff0c\u6839\u636e\u4e0a\u9762\u5f0f\u5b50\uff0c\u73b0\u5de5\u8d44=\u539f\u5de5\u8d44-\u73b0\u5de5\u8d44\u4e0b\u9650+\u539f\u5de5\u8d44\u4e0b\u9650\uff0c\u627e\u4e00\u627e\u518d\u7b97\u4e00\u7b97\n\nps\uff1a\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u628a\u5e73\u8861\u6811\u8c03\u6210\u5de6\u5927\u53f3\u5c0f\u7684\u7ed3\u6784\uff0c\u56e0\u4e3a\u67e5\u627e\u7684\u662f\u7b2ck\u5927\uff0c\u5373\u964d\u5e8f\u6392\u5217\u540e\u7684\u7b2ck\u4e2a\n\npps\uff1a\u6211\u4e4b\u524d\u5de6\u5c0f\u53f3\u5927\u7684\u65f6\u5019\u4e00\u5806\u7384\u5b66\u9519\u8bef\u2026\u2026\u4e0b\u8f7d\u4e86\u6570\u636e\u53d1\u73b0\u548c\u7b54\u6848\u6b7b\u90fd\u5bf9\u4e0d\u4e0a\u2026\u2026\u62ff\u4e86\u4e2a\u9898\u89e3\u62cd\u4e86\u4e00\u4e0b\u53d1\u73b0\u4e0b\u8f7d\u7684\u6570\u636e\u90fd\u662f\u9519\u7684\u2026\u2026\n\n\u4e0a\u4ee3\u7801\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cctype>\nusing namespace std;\nconst int N=100050,inf=0x3f3f3f3f;\n#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<15,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<15],*p1=buf,*p2=buf;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getc()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getc());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nint n,mn,k,ans;\nstruct Splay{\n    struct node{\n        int v,father,ch[2];\n        int sum,recy;\n    } e[N];\n    int cnt,root;\n    void pushup(int x){\n        e[x].sum=e[e[x].ch[0]].sum+e[e[x].ch[1]].sum+e[x].recy;\n    }\n    int identify(int x){\n        return e[e[x].father].ch[1]==x;\n    }\n    void connect(int x,int f,int son){\n        e[x].father=f,e[f].ch[son]=x;\n    }\n    void rotate(int x){\n        int y=e[x].father,z=e[y].father;\n        int yson=identify(x),zson=identify(y);\n        int b=e[x].ch[yson^1];\n        connect(b,y,yson),connect(y,x,(yson^1)),connect(x,z,zson);\n        pushup(y),pushup(x);\n    }\n    void splay(int x,int goal){\n        while(e[x].father!=goal){\n            int y=e[x].father,z=e[y].father;\n            if(z!=goal)\n            (identify(x)^identify(y))?rotate(x):rotate(y);\n            rotate(x);\n        }\n        if(goal==0) root=x;\n    }\n    void push(int v){\n        int now=root,f=0;\n        while(now&&e[now].v!=v){\n            f=now;\n            now=e[now].ch[v<e[now].v];\n        }\n        if(now) e[now].recy++;\n        else{\n            now=++cnt;\n            if(f) e[f].ch[v<e[f].v]=now;\n            e[cnt].ch[0]=e[cnt].ch[1]=0;\n            e[cnt].father=f,e[cnt].v=v;\n            e[cnt].recy=e[cnt].sum=1;\n        }\n        splay(now,0);\n    }\n    void find(int v){\n        int now=root;\n        if(!now) return;\n        while(e[now].ch[v<e[now].v]&&v!=e[now].v)\n        now=e[now].ch[v<e[now].v];\n        splay(now,0);\n    }\n    int Next(int v,int f){\n        find(v);\n        int now=root;\n        if((e[now].v<v&&f)||(e[now].v>v&&!f)) return now;\n        now=e[now].ch[f];\n        while(e[now].ch[f^1]) now=e[now].ch[f^1];\n        return now;\n    }\n    void pop(int v){\n        int lower=Next(v,1);\n        int upper=Next(v,0);\n        splay(upper,0),splay(lower,upper);\n        e[lower].ch[0]=0;\n        pushup(lower),pushup(upper);\n    }\n    int get(int v){\n        int now=root;\n        while(true){\n            int y=e[now].ch[0];\n            if(v>e[y].sum+e[now].recy){\n                v-=e[y].sum+e[now].recy;\n                now=e[now].ch[1];\n            }\n            else if(e[y].sum>=v) now=y;\n            else return e[now].v;\n        }\n    }\n    void insert(int v){\n    \tif(v<mn) return;\n    \tv+=k-mn;\n    \tpush(v);\n\t}\n\tvoid add(int v){\n\t\tk-=v;\n\t}\n\tvoid sub(int v){\n\t\tk+=v;\n\t\tint lower;\n\t\twhile(e[(lower=Next(k,1))].v!=-inf)\n\t\tans+=e[lower].recy,pop(e[lower].v);\n\t}\n\tvoid query(int v){\n\t\t++v;\n\t\tif(v>=e[root].sum) puts(\"-1\");\n\t\telse{\n\t\t\tprintf(\"%d\\n\",get(v)-k+mn);\n\t\t}\n\t}\n    void init(){\n    \tcnt=root=0,push(inf),push(-inf);\n    }\n}F;\nint main(){\n    //freopen(\"testdata.in\",\"r\",stdin);\n    //freopen(\"testdata.out\",\"w\",stdout);\n    n=read(),mn=k=read(),F.init();\n    while(n--){\n    \tchar c;int v;\n    \twhile(!isupper(c=getc()));\n    \tv=read();\n    \tswitch(c){\n    \t\tcase 'I':F.insert(v);break;\n    \t\tcase 'A':F.add(v);break;\n    \t\tcase 'S':F.sub(v);break;\n    \t\tcase 'F':F.query(v);break;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1531442123,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "# Luogu1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011\u9898\u89e3\n\n---\n\n## 0.\u524d\u8a00\n\n\u611f\u89c9\u5199\u66ff\u7f6a\u7f8a\u6811\u7684\u4eba\u597d\u5c11\u554a\uff08\u96be\u9053dalao\u5168\u90e8\u53bb\u5199\u671d\u9c9c\u6811\u4e86\u5417\uff1f[\u6ed1\u7a3d]\uff09\u2026\u2026\n\n\u4e8e\u662f\u849f\u84bb\u6253\u7b97\u6765\u5199\u4e00\u6ce2\u66ff\u7f6a\u7f8a\u6811\u7684\u9898\u89e3\n\n## 1.\u89e3\u9898\u601d\u8def\n\n\u8fd9\u9898\u76ee\u4e00\u770b\u5c31\u77e5\u9053\u662f\u5e73\u8861\u6811\uff08\uff1f\uff1f\uff1f\uff09\uff0c\u63d2\u5165\u64cd\u4f5c\u3001\u5220\u9664\u64cd\u4f5c\u4ee5\u53ca\u67e5\u8be2\u7b2cK\u5927\u5143\u7d20\u90fd\u5e94\u8be5\u662f\u5e73\u8861\u6811\u7684\u62ff\u624b\u597d\u620f\u3002\n\n**\u5de5\u8d44\u53d8\u52a8**\uff1a\u5de5\u8d44\u53d8\u52a8\u5176\u5b9e\u5341\u5206\u7b80\u5355\uff0c\u7b28\u86cb\u7684\u60f3\u6cd5\u5c31\u662f\u6bcf\u6b21\u5de5\u8d44\u53d8\u52a8\u540e\uff0c\u628a\u6bcf\u4e2a\u8282\u70b9\u5168\u90e8\u52a0\u4e0a\u6216\u51cf\u53bb\u53d8\u52a8\u7684\u503c\u3002\u4f46\u662f\u5462\uff0c\u6211\u4eec\u5176\u5b9e\u4ed4\u7ec6\u601d\u8003\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e\u53ea\u9700\u8981\u7528\u4e00\u4e2a\u53d8\u91cf\u6765\u8bb0\u4e00\u4e0b\u5de5\u8d44\u53d8\u52a8\u603b\u91cf\u5c31\u884c\u4e86\uff0c\u5230\u65f6\u5019\u8f93\u51fa\u7684\u65f6\u5019\u5c31\u52a0\u4e0a\u76f8\u5e94\u7684\u53d8\u52a8\u603b\u91cf\u5c31\u884c\u4e86\u3002\n\n**\u63d2\u5165\u64cd\u4f5c**\uff1a\u63d2\u5165\u64cd\u4f5c\u5176\u5b9e\u6bd4\u8f83\u7b80\u5355\uff0c\u4ee4*money*\u4e3a\u5f53\u524d\u603b\u7684\u5de5\u8d44\u53d8\u52a8\u91cf\uff0c*x*\u4e3a\u5f53\u524d\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5411\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u503c\u4e3a*x-money*\u7684\u8282\u70b9\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6211\u4eec\u5728\u63d2\u5165\u8fd9\u4e2a\u5de5\u8d44\u4e4b\u524d\u5df2\u7ecf\u6709*money*\u7684\u5de5\u8d44\u603b\u91cf\u4e86\uff0c\u5982\u679c\u540e\u9762\u8981\u8f93\u51fa\u8fd9\u4e2a\u5458\u5de5\u7684\u5de5\u8d44\u5c31\u8981\u8f93\u51fa*\u8be5\u5458\u5de5\u7684\u5de5\u8d44+money*\uff0c\u90a3\u4e48\u4e3a\u4e86\u51fa\u53bb\u4e4b\u524d\u7684money\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u4e8b\u5148\u8981\u7ed9\u8fd9\u4e2a\u5458\u5de5\u7684\u5de5\u8d44\u51cf\u53bb*money*\uff0c\u8fd9\u6837\u8f93\u51fa\u7684\u65f6\u5019\u5c31\u662f\u771f\u6b63\u7684\u8fd9\u4e2a\u5458\u5de5\u7684\u76ee\u524d\u7684\u5de5\u8d44\u4e86\uff08\u5b9e\u5728\u65e0\u6cd5\u7406\u89e3\u7684\u60f3\u60f3\u5bb9\u65a5\u5427\uff09\u3002\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u8fd9\u4e2a\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\u5c0f\u4e8e\u6700\u5c0f\u5de5\u8d44\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5**continue**\u3002\n\n**\u5220\u9664\u64cd\u4f5c**\uff1a\u5220\u9664\u64cd\u4f5c\u4f9d\u7136\u5341\u5206\u7b80\u5355\u2026\u2026\u76f4\u63a5\u4ece\u6839\u5f00\u59cb\u904d\u5386\uff0c\u628a\u6811\u4e0a\u7684\u5de5\u8d44\u5c0f\u4e8e\u6700\u4f4e\u5de5\u8d44\u7684\u5458\u5de5\u76f4\u63a5\u5220\u4e86\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u6211\u6bcf\u6b21\u5b9e\u5728*S x*\u8fd9\u4e2a\u64cd\u4f5c\u540e\u5f00\u59cb\u5220\u9664\u7684\uff0c\u800c*S x*\u8fd9\u4e2a\u64cd\u4f5c\u53c8\u5341\u5206\u5c11\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u8d85\u65f6\u3002\u5f53\u7136\u5462\uff0c\u5176\u5b9e\u8fd8\u6709\u4e00\u79cd\u66f4\u5feb\u7684\u505a\u6cd5\uff0c\u90a3\u5c31\u662f\u76f4\u63a5\u5220\u4e86\u67d0\u4e00\u4e2a\u5c0f\u4e8e\u6700\u4f4e\u5de5\u8d44\u7684\u5458\u5de5\u5de6\u5b50\u6811\u7684\u6839\u548c\u8fd9\u4e2a\u5458\u5de5\u5c31\u884c\u4e86\u3002\n\n**\u67e5\u8be2\u64cd\u4f5c**\uff1a\u5982\u679c\u6709\u4e0d\u4f1a\u7684\u8bf7\u5de6\u8f6c\u81f3Luogu3369\u505a\u4e00\u4e0b\u5e73\u8861\u6811\u7684\u6a21\u677f\u9898\u2026\u2026\n\n## 2.\u4ee3\u7801\n\n```\n#include<cstdio>\n#define alpha 0.75\n#define qmid(L,R) L+((R-L)>>1)\n#define INF 0x7fffffff\nusing namespace std;\ninline int read(){\n\tint ret=0,flg=1;char ch=getchar();\n\twhile (ch<'0'||ch>'9'){if (ch=='-')flg=-1;ch=getchar();}\n\twhile (ch>='0'&&ch<='9')ret=ret*10+ch-48,ch=getchar();\n\treturn ret*flg;\n}\nstruct ypc{\n\tint val,fa,son[2];\n\tdouble size;\n}t[100010];\nint n,sum,cur[100010],tot,root,min,money,tot_leave;\ninline bool balance(int id){\n\treturn t[t[id].son[0]].size<=t[id].size*alpha&&t[t[id].son[1]].size<=t[id].size*alpha;\n}\ninline void dfs(int id){\n\tif (!id)return;\n\tdfs(t[id].son[0]);\n\tcur[++sum]=id;\n\tdfs(t[id].son[1]);\n}\ninline int build(int L,int R){\n\tif (L>R)return 0;\n\tint mid=qmid(L,R),id=cur[mid],ls=build(L,mid-1),rs=build(mid+1,R);\n\tt[id].son[0]=ls,t[id].son[1]=rs;\n\tt[ls].fa=id,t[rs].fa=id;\n\tt[id].size=t[ls].size+t[rs].size+1;\n\treturn id;\n}\ninline bool get_lr(int id){\n\treturn t[t[id].fa].son[1]==id;\n}\ninline void rebuild(int id){\n\tsum=0,dfs(id);\n\tint fa=t[id].fa,opt=get_lr(id),new_son=build(1,sum);\n\tt[fa].son[opt]=new_son,t[new_son].fa=fa;\n\tif (root==id)root=new_son;\n}\ninline void insert(int x){\n\tif (!root){if (!tot)tot=1;root=tot,t[root].val=x,t[root].size=1,t[root].fa=0;return;}\n\tint tmp=root;\n\twhile (tmp){\n\t\tt[tmp].size++;\n\t\tint fa=tmp,opt=(x>=t[tmp].val);tmp=t[tmp].son[opt];\n\t\tif (!tmp){\n\t\t\tt[fa].son[opt]=++tot,t[tot].fa=fa,t[tot].val=x,t[tot].size=1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tint flg=0;\n\tfor (int i=tot;i;i=t[i].fa)if (!balance(i))flg=i;\n\tif (flg)rebuild(flg);\n}\ninline void erase(int id){\n\tif (t[id].son[1]&&t[id].son[0]){\n\t\tint tmp=t[id].son[0];\n\t\twhile (t[tmp].son[1])tmp=t[tmp].son[1];\n\t\tt[id].val=t[tmp].val,id=tmp;\n\t}\n\tint fa=t[id].fa,son=t[id].son[0]?t[id].son[0]:t[id].son[1],opt=get_lr(id);\n\tt[son].fa=fa,t[fa].son[opt]=son;\n\tfor (int i=fa;i;i=t[i].fa)t[i].size--;\n\tif (root==id)root=son;\n}\ninline int erase_val(int x){\n//\tprintf(\"---------\\n\");\n\tint tmp=root;\n\twhile (tmp){\n//\t\tprintf(\"%d %d\\n\",tmp,t[tmp].val+money);\n\t\tif (x>t[tmp].val+money){\n\t\t\tsum=0,dfs(t[tmp].son[0]),cur[++sum]=tmp;\n\t\t\ttot_leave+=sum;\n\t\t\tfor (int i=1;i<=sum;i++)erase(cur[i]);\n\t\t\ttmp=t[tmp].son[1];\n\t\t}else tmp=t[tmp].son[0];\n\t}\n//\tprintf(\"---------\\n\");\n}\ninline int get_xth(int x){\n\tint tmp=root;\n\twhile (tmp){\n\t\tif (t[t[tmp].son[0]].size==x-1)return t[tmp].val+money;\n\t\tif (t[t[tmp].son[0]].size>=x)tmp=t[tmp].son[0];else x-=t[t[tmp].son[0]].size+1,tmp=t[tmp].son[1];\n\t}\n}\nint main(){\n// \tfreopen(\"Luogu1486.in\",\"r\",stdin);\n// \tfreopen(\"Luogu1486.out\",\"w\",stdout);\n\tn=read(),min=read();\n\troot=0;\n\tfor (int i=1;i<=n;i++){\n\t\tchar tpe[2];\n\t\tscanf(\"%s\",tpe);\n\t\tint x=read();\n\t\tif (tpe[0]=='I'&&x>=min)insert(x-money);\n\t\tif (tpe[0]=='A')money+=x;\n\t\tif (tpe[0]=='S')money-=x,erase_val(min)/*,printf(\"tot_leave=%d\\n\",tot_leave)*/;\n\t\tif (tpe[0]=='F')printf(\"%d\\n\",t[root].size>=x?get_xth(t[root].size-x+1):-1);\n\t}\n\tprintf(\"%d\\n\",tot_leave);\n\treturn 0;\n}\n```",
        "postTime": 1524014022,
        "uid": 36909,
        "name": "_YPC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "-------------\n\n\n\u5728\u4e0b\u4f7f\u7528\u7684\u662fsplay\uff0cnamespace\u4e2d\u9664\u4e86delete\u90fd\u662f\u677f\u5b50\n\n\n---------------\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u4e00\u4e2asplay\u7684\u677f\u5b50\u9898\uff0c\u9002\u5408\u4e8e\u5e73\u8861\u6811\u7684\u65b0\u624b\u7ec3\u4e60\u3002\n\n\u6211\u4eec\u6ce8\u610f\u5230\u4e00\u4e2a\u7279\u6027\uff1a\u6807\u8bb0\u90fd\u662f\u5168\u5c40\u7684\u3002\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5168\u5c40\u6807\u8bb0\u6253\u5728splay\u7684\u5916\u9762\uff0csplay\u4e2d\u5c31\u4e0d\u7528\u6253\u6807\u8bb0\u4e86\uff01~~\uff08\u4e8f\u6211\u5199\u4e86\u534a\u5929\u6253\u6807\u8bb0\u7684splay\uff09~~\n\n\u90a3min\u7684\u9650\u5236\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u6211\u4eec\u5728\u63d2\u5165\u65f6\u53ef\u4ee5\u5148\u5224\u4e00\u4e0b\uff0c\u5168\u5c40\u51cf\u65f6\u5c06\u7d2f\u52a0\u4e0a\u5168\u5c40\u6807\u8bb0\u5c0f\u4e8emin\u7684\u6240\u6709\u70b9\u90fd\u5220\u6389\u3002\n\n\u6811\u5916-\u6807\u8bb0=\u6811\u5185\uff0c\u6811\u5185+\u6807\u8bb0=\u6811\u5916\uff0c\u7531\u4e8e\u6211\u4e8b\u5148\u63d2\u4e86+inf\u4e0e-inf\uff0c\u6240\u4ee5\u6d89\u53casize\u662f\u4f1a\u6709\u4e9b\u53d8\u5316\u7684\u3002\n\n**PS\uff1a\u5982\u679c\u67d0\u4e2a\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\u4f4e\u4e8e\u6700\u4f4e\u5de5\u8d44\u6807\u51c6,\u90a3\u4e48\u5c06\u4e0d\u8ba1\u5165\u6700\u540e\u7684\u7b54\u6848\u5185\uff01\uff01\uff01**\n\n**PS\uff1a\u5982\u679c\u67d0\u4e2a\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\u4f4e\u4e8e\u6700\u4f4e\u5de5\u8d44\u6807\u51c6,\u90a3\u4e48\u5c06\u4e0d\u8ba1\u5165\u6700\u540e\u7684\u7b54\u6848\u5185\uff01\uff01\uff01**\n\n**PS\uff1a\u5982\u679c\u67d0\u4e2a\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\u4f4e\u4e8e\u6700\u4f4e\u5de5\u8d44\u6807\u51c6,\u90a3\u4e48\u5c06\u4e0d\u8ba1\u5165\u6700\u540e\u7684\u7b54\u6848\u5185\uff01\uff01\uff01**\n\n\nDelete\u8be6\u89e3\uff1a\n\n```cpp\n//\u7531\u4e8e\u6211\u4eec\u662f\u8981\u5220\u9664\u4e00\u6bb5\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u533a\u95f4\u6700\u5c0f\u503c\u7684\u524d\u9a71\u65cb\u81f3\u6839\uff0c\u6b64\u65f6\u53f3\u5b50\u6811\u6052\u5927\u4e8e\u533a\u95f4\u6700\u5c0f\u503c\u7684\u524d\u9a71\uff0c\u6211\u4eec\u518d\u5c06\u533a\u95f4\u6700\u5927\u503c\u7684\u540e\u7ee7\u65cb\u81f3\u53f3\u5b50\u6811\u6839\uff0c\u6b64\u65f6\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u6052\u5c0f\u4e8e\u533a\u95f4\u6700\u5927\u503c\u7684\u540e\u7ee7\uff0c\u6b64\u65f6\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u5168\u90fd\u662f\u6211\u4eec\u8981\u5220\u7684\u70b9\uff0c\u7136\u540e\u65ad\u5f00\u6307\u9488\u8fde\u63a5\u5c31\u884c\u4e86\u3002\ninline void Del(int x)\n{\n    Nex(x,1);/*\u540e\u7ee7*/R int p=pos;\n    Fin(-1e9);/*\u524d\u9a71*/Spl(p,rt);\n    sum+=p[son][0][siz];\n    son[p][0]=0;\n    PU(p);PU(rt);/*\u66f4\u65b0size*/\n}\n```\n\u603b\u4ee3\u7801\uff1a\n\n```cpp\n//\u58f0\u660e\uff1aa[b]\u7b49\u540c\u4e8eb[a],\u672c\u6587\u4e2d\u6709\u5f88\u591a\u7c7b\u4f3c\u5199\u6cd5,\u67e5\u8be2\u7684\u7b54\u6848\u90fd\u4e3apos\u6307\u5411\u7684\u70b9;\n//\u5982siz[son[son[rt][0]][1]]->rt[son][0][son][1][siz];\n#include<cstdio>\n#define N 500100\nnamespace Splay\n{\n    #define R register\n    static int son[N][2],fat[N],key[N],val[N],siz[N],rt,tot,pos,sum;\n    inline void PU(int x){siz[x]=son[x][0][siz]+son[x][1][siz]+val[x];}\n    inline void Rot(int x)\n    {\n        R int y=fat[x],z=fat[y],k=son[y][0]==x;\n        son[z][son[z][1]==y]=x;fat[x]=z;\n        son[y][!k]=son[x][k];son[x][k][fat]=y;\n        son[x][k]=y;fat[y]=x;PU(y);\n    }\n    inline void Spl(int x,int goal)\n    {\n        for(;fat[x]!=goal;Rot(x))\n        {\n            R int y=fat[x],z=fat[y];\n            if(z!=goal)(son[y][0]==x)^(son[z][0]==y)?Rot(x):Rot(y);\n        }PU(x);if(!goal)rt=x;\n    }\n    inline void Fin(int x)\n    {for(pos=rt;son[pos][x>key[pos]]&&x!=key[pos];pos=son[pos][x>key[pos]]);Spl(pos,0);}\n    inline void Nex(int x,int k)\n    {\n        Fin(x);if(!(key[pos]>x&&k||key[pos]<x&&!k))\n        for(pos=son[pos][k];son[pos][!k];pos=son[pos][!k]);\n    }\n    inline void Ins(int x)\n    {\n        R int fa=0;\n        for(pos=rt;pos&&key[pos]!=x;pos=son[pos][x>key[pos]])fa=pos;\n        if(pos)++val[pos];else\n        {\n            pos=++tot;\n            son[fa][x>key[fa]]=pos;\n            son[pos][0]=son[pos][1]=0;\n            fat[pos]=fa;key[pos]=x;val[pos]=siz[pos]=1;\n        }Spl(pos,0);\n    }\n    inline void Del(int x)\n    {\n        Nex(x,1);R int p=pos;\n        Fin(-1e9);Spl(p,rt);\n        sum+=p[son][0][siz];\n        son[p][0]=0;\n        PU(p);PU(rt);\n    }\n    inline int Kth(int k)\n    {\n        if(k<2||k+1>siz[rt])return 0;//\u65e0\u89e3;\n        for(pos=rt;;)\n        {\n            R int y=son[pos][0];\n            if(k>siz[y]+val[pos])\n            {\n                k-=siz[y]+val[pos];\n                pos=son[pos][1];\n            }else\n            if(siz[y]<k)return 1;\n            else pos=y;\n        }\n    }\n}using namespace Splay;\ninline int read(){int x=0,f=0;register char ch=getchar();for(;ch<48||ch>57;ch=getchar())f|=ch=='-';for(;ch>47&&ch<58;ch=getchar())x=(x<<1)+(x<<3)+(ch^48);return f?-x:x;}\nint main()\n{\n    char s[5];int now=0;\n    Ins(-1e9);Ins(+1e9);\n    int n=read(),minn=read();\n    for(int i=0;i<n;++i)\n    {\n        scanf(\"%s\",s);int k=read();\n        switch(s[0])\n        {\n            case 'I':if(k>=minn)Ins(k-now);break;\n            case 'A':now+=k;break;\n            case 'S':now-=k;Del(minn-now-1);break;\n            case 'F':printf(\"%d\\n\",Kth(siz[rt]-k)?key[pos]+now:-1);break;\n        }\n    }printf(\"%d\\n\",sum);\n}\n```",
        "postTime": 1513991348,
        "uid": 27029,
        "name": "Hades18",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u4e0d\u4f1a\u5199\u5e73\u8861\u6811\uff0c\u8fd9\u9898\u7528\u7ebf\u6bb5\u6811\u6253\u8fc7\u7684orz\u770b\u5230\u6ca1\u6709\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\u5c31\u6765\u8d21\u732e\u4e00\u6ce2\u3002\n\n\u6ce8\u610f\u5230\u5458\u5de5\u5de5\u8d44\u6700\u591a200000\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a[-200000,200000]\u7684\u533a\u95f4\uff0c\u6bcf\u4e2a\u6570\u770b\u6210\u4e00\u4e2a\u6876\uff0c\u4e00\u4e2a\u5de5\u8d44\u4e3ai\u7684\u5458\u5de5\u6254\u5230\u4e00\u4e2a\u4e0b\u6807\u4e3ai\u7684\u6876\u91cc\uff0c\u67e5\u8be2[min,200000]\u7684\u533a\u95f4\uff0c\u5f53\u5de5\u8d44\u589e\u7684\u65f6\u5019\uff0c\u76f8\u5f53\u4e8e\u628a\u67e5\u8be2\u7684\u533a\u95f4\u6574\u4f53\u5de6\u79fb\uff0c\u51cf\u7684\u65f6\u5019\u540c\u7406\uff0c\u4f46\u8981\u6ce8\u610f\u628a[-200000,min-p]\u6e05\u7a7a\uff08p\u662f\u504f\u79fb\u91cf\uff09\uff0c\u7edf\u8ba1\u6e05\u9664\u4eba\u6570\u3002\u6ce8\u610f\u7684\u662f\u521d\u59cb\u5de5\u8d44\u4f4e\u4e8emin\u76f4\u63a5\u8d70\u6389\u7684\u4eba\u4e0d\u8ba1\u5165\u7b54\u6848\u2026\u2026\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u2026\u2026\n\n```cpp\n#include<cstdio>\nint tag[1600005],n,p,ans,tot,min,s,t,L=-200005,R=200000,f[1600005],k;\nchar c[3];\nvoid modify(int l,int r,int id)\n{\n    f[id]++;\n    if(l==r)return;\n    if(tag[id])\n     tag[id<<1]=tag[id<<1|1]=1,tag[id]=0,\n     f[id<<1]=f[id<<1|1]=0;\n    int mid=(l+r)>>1;\n    if(s<=mid)modify(l,mid,id<<1);else modify(mid+1,r,id<<1|1);\n}\nvoid modify1(int l,int r,int id)\n{\n    if(s<=l&&r<=t){ans+=f[id];f[id]=0;tag[id]=1;return;}\n    if(tag[id])\n     tag[id<<1]=tag[id<<1|1]=1,tag[id]=0,\n     f[id<<1]=f[id<<1|1]=0;\n    int mid=(l+r)>>1;\n    if(s<=mid)modify1(l,mid,id<<1);\n    if(t>mid)modify1(mid+1,r,id<<1|1);\n    f[id]=f[id<<1]+f[id<<1|1];\n}\nint query(int l,int r,int id)\n{\n    if(f[id]<k)return -1;\n    if(l==r)return l+p;\n    if(tag[id])\n     tag[id<<1]=tag[id<<1|1]=1,tag[id]=0,\n     f[id<<1]=f[id<<1|1]=0;\n    int mid=(l+r)>>1;\n    if(k<=f[id<<1|1])return query(mid+1,r,id<<1|1);\n    k-=f[id<<1|1];return query(l,mid,id<<1);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&min);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s%d\",c,&k);\n        if(c[0]=='I'&&k>=min)s=k-p,modify(L,R,1);else\n        if(c[0]=='A')p+=k;else\n        if(c[0]=='S')p-=k,s=L,t=min-p-1,modify1(L,R,1);else\n        if(c[0]=='F')printf(\"%d\\n\",query(L,R,1));\n    }\n    printf(\"%d\\n\",ans);\n} \n```",
        "postTime": 1508380006,
        "uid": 13183,
        "name": "\u58a8\u5c14",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "### \u9898\u610f\uff1a\r\n\r\n\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u521d\u59cb\u4e3a\u7a7a\u7684\u96c6\u5408\uff0c\u7ed9\u51fa\u4e00\u4e2a\u4e0b\u754c $min$\uff0c\u652f\u6301\u56db\u79cd\u64cd\u4f5c\uff1a\r\n\r\n- \u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u82e5\u5c0f\u4e8e\u4e0b\u754c\u5219\u4e0d\u63d2\u5165\r\n- \u628a\u96c6\u5408\u4e2d\u6240\u6709\u7684\u6570\u90fd\u52a0\u4e0a\u540c\u4e00\u4e2a\u6570\r\n- \u628a\u96c6\u5408\u4e2d\u6240\u6709\u7684\u6570\u90fd\u51cf\u53bb\u540c\u4e00\u4e2a\u6570\uff0c\u5e76\u5220\u9664\u6240\u6709\u64cd\u4f5c\u540e\u5c0f\u4e8e\u4e0b\u754c\u7684\u6570\r\n- \u67e5\u8be2\u96c6\u5408\u4e2d\u7b2c $k$ \u5927\u7684\u6570\r\n\r\n### \u601d\u8def\uff1a\r\n\r\n\u8fd9\u79cd\u4e0d\u5e26\u533a\u95f4\u7ffb\u8f6c\u7684\u6574\u4f53\u7b2c $k$ \u5927/\u5c0f\u901a\u5e38\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u4ee3\u66ff\u5e73\u8861\u6811\u6765\u5b8c\u6210\u3002\r\n\r\n\u63d2\u5165\u67e5\u8be2\u90fd\u5f88\u597d\u529e\uff0c\u4f46\u662f\u5982\u679c\u8fd8\u8981\u5168\u5c40\u52a0\u51cf\u5c31\u4e0d\u592a\u597d\u641e\uff0c\u8003\u8651\u8f6c\u6362\u601d\u8def\u4e3a\uff1a\u5168\u5c40\u52a0\u5c31\u662f\u964d\u4f4e\u4e0b\u754c\uff0c\u5168\u5c40\u51cf\u5c31\u662f\u589e\u9ad8\u4e0b\u754c\uff0c\u8bb0\u4f1a\u88ab\u4fee\u6539\u7684\u4e0b\u754c\u4e3a $nowmin$\uff0c\u90a3\u4e48\u63d2\u5165\u65f6\u5c31\u63d2\u5165 $k-min+nowmin$\uff0c\u67e5\u8be2\u65f6\u5c31\u8f93\u51fa $ans-nowmin+min$\u3002\r\n\r\n\u6709\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u95ee\u9898\u5c31\u662f\u589e\u9ad8\u4e0b\u754c\u65f6\u9700\u8981\u5220\u9664\u4e00\u4e9b\u5143\u7d20\uff0c\u6211\u4eec\u77e5\u9053\u7406\u8bba\u4e0a\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u88ab\u5220\u9664\u4e00\u6b21\uff0c\u53ea\u8981\u80fd\u591f\u6bcf\u6b21\u5feb\u901f\u7684\u627e\u5230\u9700\u8981\u5220\u9664\u7684\u5143\u7d20\u5373\u53ef\u505a\u5230\u5220\u9664\u7684\u6574\u4f53 $O(n\\times \\text{\u5355\u6b21\u5220\u9664\u590d\u6742\u5ea6})$\u3002\u4e3a\u4e86\u8fbe\u6210\u4e0a\u9762\u7684\u6761\u4ef6\uff0c\u8003\u8651\u4f7f\u7528\u4f18\u5148\u961f\u5217\u5b8c\u6210\uff0c\u4f18\u5148\u961f\u5217\u91cc\u5b58\u50a8\u5f53\u524d\u5728\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u7684\u7f16\u53f7\uff0c\u6bcf\u6b21\u589e\u9ad8\u4e0b\u754c\u65f6\uff0c\u4e0d\u505c\u63d0\u53d6\u51fa\u961f\u5934\u5220\u9664\u76f4\u5230\u961f\u5934\u5bf9\u5e94\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8e\u4e0b\u754c\u3002\u8fd9\u79cd\u65b9\u6cd5\u8fd8\u53ef\u4ee5\u987a\u5229\u89e3\u51b3\u7b2c\u4e8c\u95ee\u3002\r\n\r\n\u73b0\u5728\u6211\u4eec\u628a\u95ee\u9898\u8f6c\u6362\u4e3a\u4e86\u63d2\u5165\uff0c\u5220\u9664\uff0c\u67e5\u8be2\u7b2c $k$ \u5927\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u4f7f\u7528 BIT \u5b8c\u6210\uff0c\u505a\u6cd5\u5982\u4e0b\uff1a\r\n\r\n\u9996\u5148\u770b\u5230\u6570\u636e\u8303\u56f4\u4e0d\u5c0f\u4e14\u652f\u6301\u79bb\u7ebf\uff0c\u4e8e\u662f sort+unique+map \u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u5efa\u7acb\u4e00\u68f5\u6743\u503c BIT\uff0c\u7ef4\u62a4\u96c6\u5408\u4e2d\u67d0\u6570\u5b57\uff08\u5176\u5b9e\u662f\u79bb\u6563\u5316\u540e\u7684\u7f16\u53f7\uff09\u7684\u4e2a\u6570\uff0c\u63d2\u5165\u548c\u5220\u9664\u76f4\u63a5\u53ef\u4ee5\u7167\u7740\u666e\u901a BIT \u5b8c\u6210\uff0c\u67e5\u8be2\u7b2c $k$ \u5927\u91c7\u7528\u7c7b\u4f3c\u500d\u589e\u7684\u601d\u60f3\u5b9e\u73b0\uff0c\u8fd9\u91cc\u8d34\u4e0b\u90e8\u5206\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\nint findkth(int k)\r\n{\r\n\tint res=0,ans=0;//ans\u5b58\u50a8\u5f53\u524dres\u4e0b\u6709\u591a\u5c11\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e\u5b83\r\n\tfor(int i=20;i>=0;i--)\r\n\t{\r\n\t\tres+=(1<<i);\r\n\t\tif(res>cnt||ans+c[res]>=k) res-=(1<<i);\r\n\t\telse ans+=c[res];//c\u5373BIT\r\n\t}\r\n\tres++;\r\n\treturn res;\r\n}\r\n```\r\n\r\n\u4e09\u4e2a\u64cd\u4f5c\u90fd\u662f\u5355\u6b21 $O(\\log n)$\u3002\r\n\r\n\u5206\u6790\u4e0b\u590d\u6742\u5ea6\uff1a\u4f18\u5148\u961f\u5217\u6700\u591a\u5bf9\u6bcf\u4e2a\u6570\u5b57\u64cd\u4f5c\u4e24\u6b21\uff0c\u4e3a $O(n \\log n)$\uff0c\u79bb\u6563\u5316 $O(n \\log n)$\uff0c\u5220\u9664\u521a\u624d\u5206\u6790\u8fc7\u662f $O(n \\log n)$\uff0c\u5176\u4ed6 BIT \u64cd\u4f5c\u662f $O(n \\log n)$\uff0c\u4e8e\u662f\u603b\u4f53\u8fd8\u662f $O(n\\log n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4f9d\u8d56\u589e\u9ad8\u548c\u964d\u4f4e\u4e0b\u754c\u7684\u7279\u6b8a\u6570\u636e\u8303\u56f4\u3002\r\n\r\n\u81f3\u6b64\u57fa\u672c\u5b8c\u6210\u4e86\u8be5\u9898\uff0c\u82e5\u8fd8\u662f\u6ca1\u6709\u660e\u767d\u6743\u503c BIT \u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u5230[\u8fd9\u91cc](https://www.luogu.com.cn/blog/Chanis/super-BIT2)\u6765\u67e5\u770b\u3002\r\n\r\n\u53ef\u80fd\u8bf4\u7684\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u4e5f\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u67e5\u770b\uff1a\r\n\r\n```cpp\r\n#include <cstdio>\r\n#include <iostream>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <string>\r\n#include <cstring>\r\n#include <queue>\r\n#include <map>\r\nusing namespace std;\r\ntypedef long long ll;\r\nint m;\r\nll lk,nowk;//\u6ce8\uff1a\u8fd9\u91cclk\u5b58\u7684\u662fmin\uff0cnowk\u5b58\u7684\u662fnowmin\r\nint cnt,tmpcnt;//cnt\u5b58\u79bb\u6563\u5316\u540e\u6709\u591a\u5c11\u4e0d\u540c\u7684\u5143\u7d20\uff0ctmpcnt\u5b58\u5f53\u524d\u96c6\u5408\u4e2d\u6709\u591a\u5c11\u5143\u7d20\uff0c\u67e5\u7b2ck\u5927\u65f6\u8981\u7528\r\nstruct ask\r\n{\r\n\tstring opt;\r\n\tll k;\r\n}que[300005];\r\nll peo[300005],b[300005];//\u79bb\u6563\u5316\u7528\uff08\u5176\u5b9e\u53ef\u4ee5\u7701\u6389peo\uff0c\u5b83\u6ca1\u6709\u4ec0\u4e48\u7528\uff09\r\nmap<ll,int> mp;\r\npriority_queue<int> q;\r\nint c[300005],ansl;//ansl\u5b58\u7b2c\u4e8c\u95ee\u7b54\u6848\r\nbool cmp(ll qaq,ll qwq)\r\n{\r\n\treturn qaq>qwq;\r\n}\r\nint lowbit(int x)\r\n{\r\n\treturn x&-x;\r\n}\r\nvoid addd(int x,int k)//\u63d2\u5165\u5220\u9664\r\n{\r\n\twhile(x<=cnt)\r\n\t{\r\n\t\tc[x]+=k;\r\n\t\tx+=lowbit(x);\r\n\t}\r\n\treturn;\r\n}\r\nint findkth(int k)//\u67e5\u8be2\u7b2ck\u5c0f\u7684\u7f16\u53f7\uff08\u79bb\u6563\u5316\u65f6\u5927\u6570\u5728\u524d\u9762\uff09\r\n{\r\n\tint res=0,ans=0;\r\n\tfor(int i=20;i>=0;i--)\r\n\t{\r\n\t\tres+=(1<<i);\r\n\t\tif(res>cnt||ans+c[res]>=k) res-=(1<<i);\r\n\t\telse ans+=c[res];\r\n\t}\r\n\tres++;\r\n\treturn res;\r\n}\r\nint main()\r\n{\r\n\tcin>>m>>lk;\r\n    nowk=lk;\r\n\tfor(int i=1;i<=m;i++)\r\n\t{\r\n\t\tcin>>que[i].opt>>que[i].k;\r\n\t\tif(que[i].opt==\"I\"&&que[i].k>=lk)\r\n\t\t{\r\n\t\t\tcnt++;\r\n\t\t\tpeo[cnt]=que[i].k-lk+nowk;\r\n\t\t}\r\n\t\tif(que[i].opt==\"A\")\r\n\t\t{\r\n\t\t\tnowk-=que[i].k;\r\n\t\t}\r\n\t\tif(que[i].opt==\"S\")\r\n\t\t{\r\n\t\t\tnowk+=que[i].k;\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=cnt;i++)\r\n\t{\r\n\t\tb[i]=peo[i];\r\n\t}\r\n\tnowk=lk;\r\n\tsort(b+1,b+cnt+1,cmp);\r\n\tcnt=unique(b+1,b+cnt+1)-b;\r\n    cnt--;\r\n    for(int i=1;i<=cnt;i++)\r\n    {\r\n    \tmp[b[i]]=i;\r\n\t}\r\n\tfor(int i=1;i<=m;i++)\r\n\t{\r\n\t\tif(que[i].opt==\"I\")\r\n\t\t{\r\n\t\t\tif(que[i].k<lk) continue;\r\n\t\t\taddd(mp[que[i].k-lk+nowk],1);//\u63d2\u5165\r\n\t\t\ttmpcnt++;\r\n\t\t\tq.push(mp[que[i].k-lk+nowk]); //push\u8fdb\u4f18\u5148\u961f\u5217\r\n\t\t}\r\n\t\tif(que[i].opt==\"A\")\r\n\t\t{\r\n\t\t\tnowk-=que[i].k;\r\n\t\t}\r\n\t\tif(que[i].opt==\"F\")\r\n\t\t{\r\n\t\t\tif(tmpcnt<que[i].k)\r\n\t\t\t{\r\n\t\t\t\tcout<<\"-1\"<<endl;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tcout<<b[findkth(que[i].k)]-nowk+lk<<endl;\r\n\t\t}\r\n\t\tif(que[i].opt==\"S\")\r\n\t\t{\r\n\t\t\tnowk+=que[i].k;\r\n\t\t\twhile(!q.empty())\r\n\t\t\t{\r\n\t\t\t\tint tmp=q.top();\r\n\t\t\t\tif(b[tmp]<nowk)//\u9700\u8981\u5220\u9664\uff0c\u8fdb\u884c\u64cd\u4f5c\r\n\t\t\t\t{\r\n\t\t\t\t\taddd(tmp,-1);//\u5220\u9664\r\n\t\t\t\t\tq.pop();//\u4ece\u961f\u5217\u91cc\u5220\u9664\r\n                    tmpcnt--;\r\n                    ansl++;\r\n\t\t\t\t}\r\n\t\t\t\telse//\u5927\u4e8e\u7b49\u4e8enowmin\uff0c\u76f4\u63a5break\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    cout<<ansl<<endl;\r\n\treturn 0;\r\n}\r\n```",
        "postTime": 1603508146,
        "uid": 191868,
        "name": "monstersqwq",
        "ccfLevel": 8,
        "title": "P1486 \u90c1\u95f7\u7684\u51fa\u7eb3\u5458 \u9898\u89e3"
    },
    {
        "content": "\u672c\u9898\u7684\u4e3b\u8981\u90e8\u5206\u4e3a\u6574\u4f53 $k$ \u5c0f\u503c\u7684\u67e5\u8be2\u548c\u5bf9\u6240\u6709\u73b0\u6709\u503c\u7684\u53d8\u52a8\u3002  \n\u6574\u4f53 $k$ \u5c0f\u503c\u7684\u89e3\u6cd5\u8fd8\u662f\u5f88\u591a\u7684,\u50cf\u5e73\u8861\u6811\u4ec0\u4e48\u7684\u90fd\u53ef\u4ee5\u7f62\u3002\u7a9d\u6253\u4e86\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811,\u8fd9\u6837\u5b50\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5b9e\u73b0\u5728\u6263\u94b1\u7684\u65f6\u5019\u79bb\u5f00\u516c\u53f8\u7684\u64cd\u4f5c,\u7528\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\u5c31\u597d\u4e86\u3002  \n\u5bf9\u4e8e\u6574\u4f53\u7684\u52a0\u51cf,\u8fd9\u91cc\u5f53\u7136\u662f\u7528\u61d2\u60f0\u6cd5\u3002\u7528\u4e00\u4e2a\u6807\u8bb0\u8bb0\u5f55\u4e0b\u6811\u4e2d\u6240\u6709\u5143\u7d20\u7684\u4fee\u6539\u91cf\u3002\u76f8\u5e94\u5730, $min$ \u503c\u4e5f\u53d1\u751f\u6539\u53d8\u3002\u65b0\u63d2\u5165\u5143\u7d20\u65f6\u7531\u4e8e\u6ca1\u6709\u7ecf\u5386\u8fc7\u8fd9\u4e9b\u4fee\u6539\u6240\u4ee5\u8981\u5728\u63d2\u5165\u524d\u6263\u6389\u8fd9\u4e2a\u4fee\u6539\u91cf\u3002  \n\u4e3a\u4e86\u9632\u6b62\u7ebf\u6bb5\u6811\u4e0b\u6807\u4e3a\u8d1f,\u6211\u4eec\u5bf9\u521d\u59cb\u7684\u6811\u505a\u4e00\u6b21\"\u6263\u94b1\"\u64cd\u4f5c,\u503c\u4e3a\u53ef\u80fd\u51fa\u73b0\u7684\u6263\u94b1\u7684\u6700\u5c0f\u503c\u7684\u7edd\u5bf9\u503c\u3002\u8be5\u64cd\u4f5c\u6ca1\u6709\u73b0\u5b9e\u610f\u4e49,\u53ea\u662f\u4e3a\u4e86\u9632\u6b62\u7ebf\u6bb5\u6811\u662f\u4e0b\u6807\u4e3a\u8d1f\u3002(\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u6240\u6709\u94b1\u7684\u503c\u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570)  \n```cpp\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int SUM = 123456, SU = 110000;\n\nint dat[SUM<<3], tag[SUM << 3];\ninline void update(int p) {\n\tdat[p] = dat[p<<1] + dat[p<<1|1];\n}\ninline void spread(int p) {\n\tdat[p<<1] = dat[p<<1|1] = tag[p<<1] = tag[p<<1|1] = 0;\n\ttag[p] = -1;\n}\nvoid insert(int p, int lp, int rp, int x) {\n\tif(lp == rp) {\n\t\t++dat[p];\n\t\treturn ;\n\t}\n\tint mid = (lp + rp) >> 1;\n\tif(~tag[p]) spread(p);\n\tif(x <= mid) insert(p<<1, lp, mid, x);\n\telse insert(p<<1|1, mid + 1, rp, x);\n\tupdate(p);\n}\nvoid modify(int p, int lp, int rp, int l, int r) {\n\tif(l <= lp && rp <= r) {\n\t\ttag[p] = 0; dat[p] = 0;\n\t\treturn ;\n\t}\n\tif(~tag[p]) spread(p);\n\tint mid = (lp + rp) >> 1;\n\tif(l <= mid) modify(p<<1, lp, mid, l, r);\n\tif(r > mid) modify(p<<1|1, mid + 1, rp, l, r);\n\tupdate(p); \n}\nint qry(int p, int lp, int rp, int l, int r) {\n\tif(l <= lp && rp <= r) return dat[p];\n\tint mid=  (lp + rp) >> 1, ans = 0;\n\tif(~tag[p]) spread(p);\n\tif(l <= mid) ans = qry(p<<1, lp, mid, l, r);\n\tif(r > mid) ans += qry(p<<1|1, mid + 1, rp, l, r);\n\treturn ans;\n}\nint findkth(int p, int lp, int rp, int k) {\n\tif(lp == rp) return lp;\n\tint mid = (lp + rp) >> 1;\n\tif(~tag[p]) spread(p);\n\tif(dat[p<<1] >= k) return findkth(p<<1, lp, mid, k);\n\treturn findkth(p<<1|1, mid + 1, rp, k - dat[p<<1]);\n}\n\nint main() {\n\tmemset(tag, -1, sizeof(tag));\n\tconst int n = (SU<<1) + 10;\n\tint q, mini, tmp, dlt = 0, cnt = 0;\n\tscanf(\"%d %d\", &q, &mini);\n\tchar ch[2];\n\tdlt -= SU; mini += SU;\n\twhile(q--) {\n\t\tscanf(\"%s %d\", ch, &tmp);\n\t\tif(ch[0] == 'I') {\n\t\t\ttmp -= dlt;\n\t\t\tif(tmp >= mini) insert(1, 1, n, tmp);\n\t\t} else if(ch[0] == 'F') {\n\t\t\tif(tmp > dat[1]) printf(\"-1\\n\");\n\t\t\telse printf(\"%d\\n\", findkth(1, 1, n, dat[1] - tmp + 1) + dlt);\n\t\t} else if(ch[0] == 'S') {\n\t\t\tdlt -= tmp; mini += tmp;\n\t\t\t\tcnt += qry(1, 1, n, 1, mini - 1);\n\t\t\t\tmodify(1, 1, n, 1, mini - 1);\n\t\t} else if(ch[0] == 'A') {\n\t\t\tdlt += tmp; mini -= tmp;\n\t\t}\n\t}\n\tprintf(\"%d\\n\", cnt);\n\treturn 0;\n}\n```",
        "postTime": 1575734032,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "## \u6a21\u62df\u8d5b\u88ab\u7206\u8650\uff0c\u53ea\u80fd\u6765\u5199\u6c34\u9898\u627e\u81ea\u4fe1\n\n\u8bf4\u56de\u8fd9\u9053\u9898\uff0c\u6b64\u9898\u770b\u9898\u9762\uff0c\u8981\u652f\u6301\u52a0\u70b9\u5220\u70b9\uff0c\u67e5\u627e\u7b2cK\u5927\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u5e73\u8861\u6811\uff0c\u7136\u540e\u770b\u770b\u8fd9\u4e2a\u533a\u95f4\u52a0\u533a\u95f4\u51cf\uff0c\u611f\u89c9\u7528\u5e73\u8861\u6811\u4e0d\u597d\u529e\u3002\n\n\u4e00\u770b\u6570\u636e\u8303\u56f4\n\n### I\u547d\u4ee4\u7684\u6761\u6570\u4e0d\u8d85\u8fc7100000 \n### A\u547d\u4ee4\u548cS\u547d\u4ee4\u7684\u603b\u6761\u6570\u4e0d\u8d85\u8fc7100\n\n\u54c8\u54c8 \u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u5458\u5de5\u4e0d\u5c31\u5b8c\u4e86\u561b\n\n\u7136\u540e\u518d\u5224\u65ad\u4e00\u4e0b\u6bcf\u4e2a\u4eba\u662f\u5426\u51cf\u5b8c\u5c0f\u4e8e\u4e0b\u9650\uff0c\u5982\u679c\u5c0f\u4e8e\u5c31\u5220\u70b9\uff0c\u5e76\u4e14\u6253\u4e0a\u6807\u8bb0\uff08\u907f\u514d\u4e0b\u6b21\u518d\u5220\uff09\n\n\u6240\u4ee5\u8fd9\u4e0b\u7528\u5e73\u8861\u6811\u5c31\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u4e86\uff0c\u968f\u4fbf\u6253\u6253\u534a\u5c0f\u65f6\u5185\u5f88\u8f7b\u677e\u5c31\u641e\u5b9a\uff0c\u7528\u4ec0\u4e48\u5e73\u8861\u6811\u56e0\u4eba\u800c\u5f02\uff0c\u6211\u7528\u7684FHQ-Treap\uff08\u592a\u597d\u7528\u4e86\uff0c\u9999\u9999\u9999\uff09\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n```\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nint n,m;\nint x,y,z;\nint val[100050];\nint son[100050][2];\nint siz[100050];\nint cnt;\nint rnd[100050];\nint root;\nbool bj[100050];\nint sum;\ninline void update(int now)\n{\n\tsiz[now]=siz[son[now][0]]+siz[son[now][1]]+1;\n}\ninline int newnode(int w)\n{\n\tcnt++;\n\tval[cnt]=w;\n\trnd[cnt]=rand();\n\tsiz[cnt]=1;\n\treturn cnt;\n}\ninline void split(int now,int k,int &x,int &y)\n{\n\tif(!now)\n\t{\n\t\tx=y=0;\n\t\treturn;\n\t}\n\tif(val[now]<=k)\n\t{\n\t\tx=now;\n\t\tsplit(son[now][1],k,son[now][1],y);\n\t}\n\telse\n\t{\n\t\ty=now;\n\t\tsplit(son[now][0],k,x,son[now][0]);\n\t}\n\tupdate(now);\n}\ninline int merge(int a,int b)\n{\n\tif(!a||!b) return a+b;\n\tif(rnd[a]<rnd[b])\n\t{\n\t\tson[a][1]=merge(son[a][1],b);\n\t\tupdate(a);\n\t\treturn a;\n\t}\n\telse\n\t{\n\t\tson[b][0]=merge(a,son[b][0]);\n\t\tupdate(b);\n\t\treturn b;\n\t}\n}\ninline int findk(int now,int k)\n{\n\tif(!now) return -1;\n\tif(k<=siz[son[now][0]])\n\t{\n\t\treturn findk(son[now][0],k);\n\t}\n\telse if(k==siz[son[now][0]]+1) return now;\n\telse\n\t{\n\t\treturn findk(son[now][1],k-siz[son[now][0]]-1);\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\twhile(n--)\n\t{\n\t\tchar type;\n\t\tcin>>type;\n\t\tif(type=='I')\n\t\t{\n\t\t\tint k;\n\t\t\tscanf(\"%d\",&k);\n\t\t\tif(k<m) continue;\n\t\t\tsplit(root,k-1,x,y);\n\t\t\troot=merge(x,merge(newnode(k),y));\n\t\t}\n\t\telse if(type=='A')\n\t\t{\n\t\t\tint k;\n\t\t\tscanf(\"%d\",&k);\n\t\t\tfor(int i=1;i<=cnt;i++)\n\t\t\t{\n\t\t\t\tval[i]+=k;\n\t\t\t}\n\t\t}\n\t\telse if(type=='S')\n\t\t{\n\t\t\tint k;\n\t\t\tscanf(\"%d\",&k);\n\t\t\tfor(int i=1;i<=cnt;i++)\n\t\t\t{\n\t\t\t\tif(val[i]-k<m&&!bj[i])\n\t\t\t\t{\n\t\t\t\t\tbj[i]=1;\n\t\t\t\t\tsplit(root,val[i],x,y);\n\t\t\t\t\tsplit(x,val[i]-1,x,z);\n\t\t\t\t\tz=merge(son[z][0],son[z][1]);\n\t\t\t\t\troot=merge(merge(x,z),y);\n\t\t\t\t\tsum++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=1;i<=cnt;i++)\n\t\t\t{\n\t\t\t\tval[i]-=k;\n\t\t\t}\n\t\t}\n\t\telse if(type=='F')\n\t\t{\n\t\t\tint k;\n\t\t\tscanf(\"%d\",&k);\n\t\t\tk=siz[root]-k+1;\n\t\t\tint ans=findk(root,k);\n\t\t\tif(ans==-1)\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t\telse\n\t\t\t{\n\t\t\t\tans=val[ans];\n\t\t\t\tprintf(\"%d\\n\",ans);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",sum);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1572620309,
        "uid": 182738,
        "name": "ZBHRuaRua",
        "ccfLevel": 6,
        "title": "NOI2004 \u90c1\u95f7\u7684\u51fa\u7eb3\u5458"
    },
    {
        "content": "# \u6743\u503c\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\n\n\u5176\u5b9e\u8fd9\u9898\u9898\u89e3\u91cc\u7ebf\u6bb5\u6811\u5df2\u7ecf\u6cdb\u6ee5\u4e86......\u6211\u4e5f\u662f\u51b2\u7740\u7ec3\u7ebf\u6bb5\u6811\u6765\u7684\n\n\u7136\u540e\u5199\u4e86\u4e09\u4e2a\u5c0f\u65f6 ~~\u6211\u592a\u5f31\u4e86~~\n\n\u7ebf\u6bb5\u6811\u7684\u601d\u8def\u60f3\u5fc5\u5927\u5bb6\u90fd\u4f1a\u4e86\n\n\u8fd9\u91cc\u5c31\u7ed9\u5927\u5bb6\u8bb2\u4e00\u4e9b\u6076\u5fc3\u7684\u7ec6\u8282\uff1a\n\n1. $\\color{red}\\text{\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\u4e0d\u80fd\u6253\u9519}$ \uff08\u849f\u84bb\u8fb9\u754c\u6761\u4ef6\u5199\u9519\u5dee\u70b9\u53bb\u4e16\uff09\n\n2. \u521a\u8fdb\u6765\u5c31\u8d70\u7684\u4eba\u662f\u4e0d\u7b97\u5728\u79bb\u5f00\u7684\u4eba\u7684\u91cc\u9762\u7684\uff01\uff0840pts\u7684\u7ebf\u6bb5\u6811\u515a\u6ce8\u610f\u4e86\uff09\n```\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\u5982\u679c\u67d0\u4e2a\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\u4f4e\u4e8e\u6700\u4f4e\u5de5\u8d44\u6807\u51c6,\u90a3\u4e48\u5c06\u4e0d\u8ba1\u5165\u6700\u540e\u7684\u7b54\u6848\u5185\n```\n3. \u7ebf\u6bb5\u6811\u5927\u5c0f\u5f00\u516b\u500d\uff08\u6743\u503c\u6709\u6b63\u8d1f\uff0c\u503c\u57df\u8981\u5f00\u6b63\u8d1fmaxn\uff09\n\n4. \u8fdb\u6765\u51fa\u53bb\u7684\u8fb9\u754c\u6761\u4ef6\u975e\u5e38\u6076\u5fc3\u4e0d\u8981\u5199\u9519\uff01\n\n\u7136\u540e\u5c31\u53ef\u4ee5\n\n$\\color{green}\\text{AC}$\n\n~~markdown\u989c\u8272\u597d\u4e11\u7684\u8bf4~~\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1600010;//\u516b\u500d\nconst int maxN=150010;//\u867d\u7136\u7406\u8bba\u662f200000\u4f46\u5b9e\u6d4b150000\u53ef\u4ee5\u8fc7\nint c[N],lson[N],rson[N],cnt=0,root;\nint n,bnd,delta=0;\ninline void upd(int x)\n{\n\tc[x]=c[lson[x]]+c[rson[x]];\n}\ninline void ins(int &x,int p,int add,int l,int r)\n{\n\tif(!x)\n\t\tx=++cnt;\n\tif(l==r)\n\t{\n\t\tc[x]+=add;\n\t\treturn; \n\t}\n\tint mid=(l+r)>>1;\n\tif(p<=mid)\n\t\tins(lson[x],p,add,l,mid);\n\telse\n\t\tins(rson[x],p,add,mid+1,r);\n\tupd(x);\n}\ninline int ask(int x,int p,int l,int r)\n{\n\tif(r<bnd)\n\t\treturn -1;\n\tif(l==r)\n\t\treturn l;\n\tint mid=(l+r)>>1;\n\tif(c[rson[x]]>=p)\n\t\treturn ask(rson[x],p,mid+1,r);\n\telse\n\t\treturn ask(lson[x],p-c[rson[x]],l,mid);\n}\ninline void mod(int x,int l1,int r1,int l,int r)\n{\n\tif(!x)return;\n\tif(l>r1||r<l1)return; //\u8fb9\u754c\u6761\u4ef6\u4e0d\u8981\u5199\u9519\n\tif(l==r)\n\t{\n\t\tc[x]=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tmod(lson[x],l1,r1,l,mid);\n\tmod(rson[x],l1,r1,mid+1,r);\n\tupd(x);\n}\ninline int query(int x,int l1,int r1,int l,int r)\n{\n\tif(!x)return 0;\n\tif(l>r1||r<l1)\n\t\treturn 0;\n\tif(l>=l1&&r<=r1)\n\t\treturn c[x];\n\tint mid=(l+r)>>1;\n\treturn query(lson[x],l1,r1,l,mid)+query(rson[x],l1,r1,mid+1,r);\t\n} \nint main()\n{\t\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n//\tfreopen(\"testdata2.out\",\"w\",stdout);\n\tmemset(c,0,sizeof(c));\n\tmemset(lson,0,sizeof(lson));\n\tmemset(rson,0,sizeof(rson)); \n\tint t1,ans=0;\n\tchar ch;\n\tscanf(\"%d%d\",&n,&bnd);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\" %c\",&ch);\n\t\tscanf(\"%d\",&t1); \n\t\tswitch(ch)\n\t\t{\n\t\t\tcase'I':\n\t\t\tif(t1-delta>=bnd)\n\t\t\t\tins(root,t1-delta,1,-maxN,maxN);\n//\t\t\telse\n//\t\t\t\tans++;//\u52a0\u4e86\u5c31\u4f1a\u53bb\u4e16\n\t\t\tbreak;\n\t\t\tcase'A':delta+=t1;\n\t\t\tbnd-=t1;\n\t\t\tbreak;\n\t\t\tcase'S':delta-=t1;bnd+=t1;\n\t\t\tans+=query(root,bnd-t1,bnd-1,-maxN,maxN);\n\t\t\tmod(root,bnd-t1,bnd-1,-maxN,maxN);\n\t\t\tbreak;\n\t\t\tcase'F':int temp=ask(root,t1,-maxN,maxN);\n\t\t\tprintf(\"%d\\n\",temp==-1?-1:(temp+delta));//\u7279\u5224-1\n\t\t\tbreak;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n} \n```\n",
        "postTime": 1572357584,
        "uid": 145026,
        "name": "noiplao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u770b\u89c1\u6ca1\u6709WeightBalancedLeafyTree\u7684\u9898\u89e3\uff0c\u8d76\u7d27\u6c34\u4e00\u53d1\u3002\n\n\u672c\u9898\u6838\u5fc3\u601d\u60f3\u53c2\u8003\u5176\u4ed6\u9898\u89e3\u3002\n\n\u5173\u4e8eWBLT\uff0c\u6b22\u8fce\u6765\u5230[OI wiki](https://oi-wiki.org/ds/wblt/)\u6216luogu\u65e5\u62a5\u5b66\u4e60\u3002\u4e5f\u53ef\u4ee5\u53c2\u8003\u539f\u8bba\u6587\uff0c\u53ef\u4ee5\u5728[\u6b64\u5904](https://github.com/enkerewpo/OI-Public-Library/tree/master/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F%E8%AE%BA%E6%96%871999-2019)\u627e\u5230\u3002\n\n\u7b80\u5355\u5730\u4ecb\u7ecd\u4e00\u4e0b\uff1a\n\n\u5bf9\u4e8e$n$\u4e2a\u6570\uff0cWBLT \u4f1a\u5efa\u7acb$2n$\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4e3a\u5176\u53f3\u513f\u5b50\u7684\u6743\u503c\uff0c\u4e14\u53f3\u513f\u5b50\u7684\u6743\u503c\u5927\u4e8e\u7b49\u4e8e\u5de6\u513f\u5b50\u3002\n\n\u63d2\u5165\u65f6\uff0c\u9010\u6b21\u5411\u4e0b\u4ea4\u6362\u5e76\u5411\u4e0a$pushup$\u66f4\u65b0\u5373\u53ef\uff0c\u5220\u9664\u4e5f\u662f\u540c\u7406\u3002\n\n\u7136\u540e\u8fd9\u6837\u663e\u7136\u4f1a\u9000\u5316\u3002\u6211\u4eec\u53ef\u4ee5\u7528$maintain$\u64cd\u4f5c\uff08\u52a0\u6743\u5e73\u8861\uff09\uff0c\u5982\u679c\u4e00\u4e2a\u513f\u5b50\u6bd4\u53e6\u4e00\u4e2a\u513f\u5b50\u7684\u5927\u5c0f\u5927\u5f88\u591a\uff08\u5927\u67d0\u4e2a\u5e38\u6570\u500d\uff09\uff0c\u90a3\u4e48\u5c06\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u5408\u5e76\u5230\u53f3\u513f\u5b50\u53bb\u3002\u91c7\u7528\u8fd9\u79cd\u7b56\u7565\u7684LeafyTree\u79f0\u4e3aWBLT\u3002\n\n\u5176\u4ed6\u64cd\u4f5c\u8fd8\u662f\u5f88\u597d\u7406\u89e3\u7684\uff0c\u53c2\u89c1\u4ee3\u7801\u3002\n\n\u5783\u573e\u56de\u6536\u7ec6\u8282\u7565\u591a\u3002\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\n#define IOSIZE 1000000\nextern \"C\"{\nnamespace io{\n\tstatic char in[IOSIZE],*p=in,*pp=in,out[IOSIZE],*q=out,ch[20],*t=ch;\n\tinline char gc(){return p==pp&&(pp=(p=in)+fread(in,1,IOSIZE,stdin),p==pp)?EOF:*p++;}\n\tinline int read(){\n\t\treg int x=0;reg char ch,f=0;\n\t\twhile(!isdigit(ch=gc()))f|=ch=='-';\n\t\twhile(isdigit(ch))x=(x<<1)+(x<<3)+(ch^48),ch=gc();\n\t\treturn f?-x:x;\n\t}\n\tinline void write(int x){\n\t\t!x&&(*q++=48),x<0&&(*q++='-',x=-x);\n\t\twhile(x)*t++=x%10+48,x/=10;\n\t\twhile(t!=ch)*q++=*--t;\n\t\t*q++='\\n';\n\t}\n\tinline char Gc(){reg char ch;while(isspace(ch=gc()));return ch;}\n\tinline void flush(){fwrite(out,1,q-out,stdout);}\n}}\n#define rd io::read\n#define wt io::write\nconst int rat=4,maxn=100001;\nstatic int n,tot,inf=2147483647,ent,kep,minn,delta;\nstatic struct Node{\n\tint siz,val;\n\tNode *ls,*rs;\n\tNode(){}\n\tNode(int siz,int val,Node *ls,Node *rs):siz(siz),val(val),ls(ls),rs(rs){}\n}*null,*root,tr[maxn<<1],*pl[maxn<<1];\n#define newNode(a,b,c,d) (&(*pl[tot++]=Node(a,b,c,d)))\ninline void pushup(Node *cur){\n\tcur->ls->siz&&(cur->siz=cur->ls->siz+cur->rs->siz,cur->val=cur->rs->val);\n}\ninline Node *merge(Node *a,Node *b){return newNode(a->siz+b->siz,b->val,a,b);}\ninline void maintain(Node *cur){\n\tcur->ls->siz>cur->rs->siz*rat&&(\n\t\tcur->rs=merge(cur->ls->rs,cur->rs),pl[--tot]=cur->ls,cur->ls=cur->ls->ls\n\t),\n\tcur->rs->siz>cur->ls->siz*rat&&(\n\t\tcur->ls=merge(cur->ls,cur->rs->ls),pl[--tot]=cur->rs,cur->rs=cur->rs->rs\n\t);\n}\nvoid ins(Node *cur,int val){\n\tcur->siz==1?\n\t\tcur->ls=newNode(1,min(val,cur->val),null,null),\n\t\tcur->rs=newNode(1,max(val,cur->val),null,null),0\n\t:(ins(val>cur->ls->val?cur->rs:cur->ls,val),0);\n\tpushup(cur),maintain(cur);\n}\nvoid del(Node *cur,int val){\n\tcur->ls->siz==1&&cur->ls->val==val?\n\t\t--kep,pl[--tot]=cur->ls,pl[--tot]=cur->rs,*cur=*cur->rs,0\n\t:cur->rs->siz==1&&cur->rs->val==val?\n\t\t--kep,pl[--tot]=cur->rs,pl[--tot]=cur->ls,*cur=*cur->ls,0\n\t:(del(val>cur->ls->val?cur->rs:cur->ls,val),0);\n\tpushup(cur),maintain(cur);\n}\nint Find(Node *cur,int k){\n\treturn cur->siz==1?cur->val:\n\tk>cur->ls->siz?Find(cur->rs,k-cur->ls->siz):Find(cur->ls,k);\n}\nint Rank(Node *cur,int val){\n\treturn cur->siz==1?1:\n\tval>cur->ls->val?cur->ls->siz+Rank(cur->rs,val):Rank(cur->ls,val);\n}\ninline int Pre(int val){return Find(root,Rank(root,val)-1);}\nint main(){\n\tn=rd(),minn=rd();\n\tnull=new Node(0,0,NULL,NULL);\n\troot=new Node(1,inf,null,null);\n\tfor(reg int i=0;i<(maxn<<1);++i)pl[i]=&tr[i];\n\tins(root,-inf);\n\tfor(reg int x,i=0;i<n;++i){\n\t\tchar c=io::Gc();x=rd();\n\t\tint val,tmp,pr;\n\t\tswitch(c){\n\t\t\tcase 'I':\n\t\t\t\tx>=minn&&(ins(root,x-delta),++ent,++kep);\n\t\t\t\tbreak;\n\t\t\tcase 'A':delta+=x;break;\n\t\t\tcase 'S':\n\t\t\t\tdelta-=x;\n\t\t\t\tval=minn-delta;\n\t\t\t\twhile(pr=Pre(val),pr!=-inf){\n\t\t\t\t\ttmp=val,val=pr;\n\t\t\t\t\tdo del(root,pr);while(Find(root,Rank(root,pr))==pr);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\twt(kep<x?-1:Find(root,kep-x+2)+delta);\n\t\t\t\tbreak;\n\t\t}\n\t}wt(ent-kep);\n\tio::flush();\n\treturn 0;\n}\n```",
        "postTime": 1569509307,
        "uid": 75765,
        "name": "Starlight237",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \u5e73\u8861\u6811\uff08Splay\uff09\n\u8fd9\u91cc\u6211\u7528\u4e86Splay\uff0c\u597d\u50cfFHQ\uff08\u9632\u706b\u5899\uff09\u66f4\u65b9\u4fbf\u3002\u4f46\u662f\u6211\u80fd\u63d2\u5165inf\u8282\u70b9\u554a\u554a\n\n\u8fd9\u91cc\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u5168\u90e8\u52a0\u4e0a\u6216\u51cf\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u5f00\u4e00\u4e2adelta\u53d8\u91cf\u6765\u8bb0\u5f55\u6574\u4f53\u60c5\u51b5\u3002\n\n\u624b\u73a9\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053\u63d2\u5165\u4e00\u4e2a\u65b0\u8282\u70b9\u5e94\u8be5\u52a0delta\u8fd8\u662f\u51cfdelta\u4e86\n\n\u8fd9\u91cc\u67e5\u8be2\u7684\u662f\u7b2cK\u5927\uff08\u5927\u5927\u5927\uff09\uff0c\u4e0d\u662f\u7b2cK\u5c0f\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u603b\u7684\u51cf\u53bbk\uff0c\u5f97\u5230\u4ed6\u662f\u7b2c\u51e0\u5c0f\u3002\u5c31\u53ef\u4ee5\u7528\u4e86\u3002\u3002\u3002\n\n\u8003\u8651\uff0c\u53ea\u6709\u51cf\u5de5\u8d44\u65f6\u4f1a\u6709\u4eba\u79bb\u5f00\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u65ad\u627e\u6700\u4f4e\u5de5\u8d44\u7684\u524d\u9a71\uff0c\u5220\u9664\uff0c\u91cd\u590d\u3002\n\n\u6307\u9488\u5927\u6cd5\u543c\u554a\uff01\uff01\uff01\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nconst int inf = 2147483647;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m , delta , sum = 1;\nstruct Splay\n{\n\tstruct node\n\t{\n\t\tnode *ch[2] , *fa;\n\t\tint val , size;\n\t\tnode(node *fa = NULL,int val = 0) : fa(fa) , val(val) {ch[0] = ch[1] = NULL;size = 1;}\n\t\tinline bool isr() {return this == fa -> ch[1];}\n\t\tinline int rk() {return 1 + (ch[0] ? ch[0] -> size : 0);}\n\t\tinline void up() {size = 1 + (ch[0] ? ch[0] -> size : 0) + (ch[1] ? ch[1] -> size : 0);}\n\t}*root;\n\tSplay() {root = NULL;}\n\tinline void rot(node *x)\n\t{\n\t\tbool k = x -> isr();\n\t\tnode *y = x -> fa , *z = y -> fa , *w = x -> ch[!k];\n\t\tif(y == root) root = x;\n\t\telse z -> ch[y -> isr()] = x;\n\t\tx -> fa = z; y -> fa = x;\n\t\tx -> ch[!k] = y; y -> ch[k] = w;\n\t\tif(w) w -> fa = y;\n\t\ty -> up(); x -> up();\n\t}\n\tinline void splay(node *x)\n\t{\n\t\twhile(x != root)\n\t\t{\n\t\t\tif(x -> fa != root) rot(x -> isr() ^ x -> fa -> isr() ? x : x -> fa);\n\t\t\trot(x);\n\t\t}\n\t}\n\tnode* merge(node *x,node *y,node *fa)\n\t{\n\t\tif(x) x -> fa = fa;\n\t\tif(y) y -> fa = fa;\n\t\tif(!x || !y) return x ? x : y;\n\t\treturn x -> ch[1] = merge(x -> ch[1],y,x) , x -> up() , x;\n\t}\n\tinline void insert(int val)\n\t{\n\t\tif(!root) return (void)(root = new node(NULL,val));\n\t\tnode *p = root , *fa = NULL;\n\t\twhile(p)\n\t\t{\n\t\t\tfa = p;\n\t\t\tp = p -> ch[val > p -> val];\n\t\t}\n\t\tp = new node(fa,val);\n\t\tfa -> ch[val > fa -> val] = p;\n\t\tsplay(p);\n\t}\n\tinline void del(int val)\n\t{\n\t\tnode *p = root;\n\t\twhile(p && val != p -> val) p = p -> ch[val > p -> val];\n\t\tif(!p) return;\n\t\tsplay(p); root = merge(p -> ch[0],p -> ch[1],NULL);\n\t}\n\tinline int rank(int val)\n\t{\n\t\tnode *p = root , *lst = NULL; int res = 0;\n\t\twhile(p)\n\t\t{\n\t\t\tlst = p;\n\t\t\tif(val <= p -> val)\tp = p -> ch[0];\n\t\t\telse res += p -> rk() , p = p -> ch[1];\n\t\t}\n\t\tsplay(lst);\n\t\treturn res + 1;\n\t}\n\tinline int kth(int k)\n\t{\n\t\tnode *p = root;\n\t\twhile(p && p -> rk() != k)\n\t\t{\n\t\t\tif(k <= p -> rk()) p = p -> ch[0];\n\t\t\telse k -= p -> rk() , p = p -> ch[1];\n\t\t}\n\t\tsplay(p);\n\t\treturn p -> val;\n\t}\n\tinline int pre(int val)\n\t{\n\t\tnode *p = root , *lst = NULL;\n\t\twhile(p)\n\t\t{\n\t\t\tif(val > p -> val) lst = p , p = p -> ch[1];\n\t\t\telse p = p -> ch[0];\n\t\t}\n\t\tif(lst) return splay(lst) , lst -> val;\n\t\treturn -2147483647;\n\t}\n\tinline void LOL()\n\t{\n\t\tn = read(); m = read();\n\t\tinsert(inf);\n\t\tfor(int i = 1 , k;i <= n;i ++)\n\t\t{\n\t\t\tchar ch; cin >> ch; k = read();\n\t\t\tif(ch == 'I') if(k >= m) insert(k - delta) , sum ++;\n\t\t\tif(ch == 'A') delta += k;\n\t\t\tif(ch == 'S') {delta -= k;while(pre(m - delta) != -inf) del(pre(m - delta));}\n\t\t\tif(ch == 'F')\n\t\t\t{\n\t\t\t\tif(k > rank(inf) - 1) printf(\"-1\\n\");\n\t\t\t\telse printf(\"%d\\n\",kth(rank(inf) - k) + delta);\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",sum - rank(inf));\n\t}\n}DNF;\nint main()\n{\n\tDNF.LOL();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1569365528,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u6734\u5b9e\u65e0\u534e\u7684\u5e73\u8861\u6811~~(\u5176\u5b9e\u662f\u4f5c\u4e3a\u849f\u84bb\u7684\u6211\u8fd8\u6ca1\u5b66splay\u548ctreap)~~\n\n## \u8fd9\u91cc\u6700\u91cd\u8981\u7684\u662f\u8bb0\u5f55\u4e00\u4e2aS\u4e0eA\u7684\u603b\u503c~~\uff08\u6211\u8bbe\u4e3atotal\uff09~~\uff0c\u800c\u4e0d\u7528\u4e00\u4e2a\u4e00\u4e2a\u6570\u4fee\u6539\n\n\u8c03\u8bd5\u4e86n\u904d\u7684\u6211\uff0c**\u53d1\u73b0I\u64cd\u4f5c\u4e2dk-total\u6709\u53ef\u80fd\u8981\u63d2\u5165\u5230\u5c0f\u4e8e0\u7684\u4f4d\u7f6e**\uff0c\u800c\u6211\u8bbe\u7f6e\u7684\u5de6\u8fb9\u754c\u4e3a1,\u6545\u53ea\u5f97\u4e8640\u5206\uff0c\u4e2a\u4f4d\u521d\u5b66\u5e73\u8861\u6811\u7684\u5927\u4f6c\u4e00\u5b9a\u8981\u6ce8\u610f\u5566\uff01\uff01\uff01\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\nusing namespace std;\nlong long n,mini,a[20000001],total=-100000,al[20000001],ar[20000001],an=1,ans;\n/*\na\u8868\u793a\u533a\u95f4\u5185\u5458\u5de5\u7684\u603b\u6570,a[1]\u7684\u5de6\u8fb9\u754c\u4e3a1,\u53f3\u8fb9\u754c\u4e3a300000,\u6709\u6548\u9632\u6b62k-total\u8d85\u51fa\u8fb9\u754c\ntotal\u8868\u793a\u52a0\u51cf\u5de5\u8d44\u7684\u603b\u503c,total\u5f00\u59cb\u65f6\u5b9a\u4e3a-100000\u662f\u4e3a\u4e86\u9632\u6b62k-total\u4e3a\u8d1f\u6570\u5bfc\u81f4\u6784\u9020\u5e73\u8861\u6811\u65f6\u51fa\u9519\nal\u8868\u793a\u5de6\u5b50\u6811\u5728a\u4e2d\u7684\u4f4d\u7f6e,\u5982\u679c\u6ca1\u6709\u5de6\u5b50\u6811\u5219\u6307\u54110\nar\u8868\u793a\u53f3\u5b50\u6811\u5728a\u4e2d\u7684\u4f4d\u7f6e,\u5982\u679c\u6ca1\u6709\u53f3\u5b50\u6811\u5219\u6307\u54110\nan\u8868\u793aa\u73b0\u5728\u7684\u4e2a\u6570\nans\u4ee3\u8868\u79bb\u5f00\u516c\u53f8\u7684\u4eba\u6570\n*/\nvoid pushup(int k){\n\ta[k]=a[al[k]]+a[ar[k]];//\u6bcf\u6b21a\u533a\u95f4\u5185\u6709\u5458\u5de5\u7684\u53d8\u52a8\uff0c\u4fbf\u91cd\u65b0\u8ba1\u7b97\n}\nvoid pushdown(int k){//\u5c06\u533a\u95f4\u53ca\u5de6\u53f3\u5b50\u6811\u5185\u7684\u5458\u5de5\u5168\u90e8\u7092\u9c7f\u9c7c\n\tif(a[al[k]])//\u5c0f\u5c0f\u7684\u526a\u679d,\u5de6\u5b50\u6811\u4e2d\u6709\u5458\u5de5\u624d\u5411\u4e0b\u8d70\n\t\tpushdown(al[k]);\n\tif(a[ar[k]])\n\t\tpushdown(ar[k]);\n\ta[k]=0;\n}\nvoid add(int l,int r,int k,int m){//\u6784\u9020\u5e73\u8861\u6811\n\tif(l==r)//\u6ce8\u610f\u662f++\uff0c\u540c\u4e00\u5de5\u8d44\u7684\u5458\u5de5\u6709\u53ef\u80fd\u4e0d\u53ea\u4e00\u4e2a\u4eba\n\t\ta[k]++;\n\telse{\n\t\tint mid=(l+r)>>1;\n\t\tif(mid>=m){\n\t\t\tif(!al[k])//\u5982\u679c\u8fd8\u6ca1\u6709\u5de6\u5b50\u6811,\u5206\u914d\u4e00\u4e2a\u4f4d\u7f6e\uff08\u7a7a\u95f4\u4e0a\u6bd4\u76f4\u63a5\u5f80k*2\u548ck*2+1\u8d70\u4f1a\u7565\u5fae\u4f18\u5316\uff09\n\t\t\t\tal[k]=++an;\n\t\t\tadd(l,mid,al[k],m);\n\t\t}\n\t\telse{\n\t\t\tif(!ar[k])\n\t\t\t\tar[k]=++an;\n\t\t\tadd(mid+1,r,ar[k],m);\n\t\t}\n\t\tpushup(k);//\u66f4\u65b0\u73b0\u5728\u533a\u95f4\u5185\u5458\u5de5\u4e2a\u6570\n\t}\n}\nvoid query(int l,int r,int k,int m){\n\tif(l==r)\n\t\tcout<<l+total<<endl;//\u8f93\u51fa\u73b0\u5728\u7684\u5de5\u8d44\n\telse{\n\t\tint mid=(l+r)>>1;\n\t\tif(a[ar[k]]>=m)//\u5982\u679c\u7b2cm\u4e2a\u5728\u53f3\u5b50\u6811\u4e2d\n\t\t\tquery(mid+1,r,ar[k],m);\n\t\telse\n\t\t\tquery(l,mid,al[k],m-a[ar[k]]);//\u6ce8\u610f\uff0cm\u8981\u51cfa[ar[k]]\n            \t\t\t\t\t      //\u4e3e\u4e2a\u6817\u5b50:\u5de6\u53f3\u5b50\u6811\u5404\u67091\u4e2a\u6570\uff0c\u73b0\u5728\u67e5\u627e\u7b2c2\u5927\u7684\u6570,\u5219\u5411\u5de6\u8d70\u65f6\u5e94\u67e5\u627e\u5de6\u5b50\u6811\u4e2d\u7b2c1\u5927\u7684\u6570\n\t}\n}\nvoid check(int l,int r,int k){\n\tif(r+total<mini){//\u5982\u679c\u6574\u4e2a\u533a\u95f4\u7684\u5de5\u8d44\u90fd\u5c0f\u4e8emini\n\t\tif(a[k]){\n\t\t\tans+=a[k];//\u6ce8\u610f\uff1a\u53ea\u9700\u52a0\u4e00\u6b21\uff0ca[k]\u5305\u62ec\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u6240\u6709\u5458\u5de5\u7684\u4e2a\u6570\n\t\t\tpushdown(k);\n\t\t}\n\t}\n\telse{\n\t\tint mid=(l+r)>>1;\n\t\tif(l+total<mini&&a[al[k]])//\u5de6\u8fb9\u754c\u5c0f\u4e8emini,\u4e14\u5de6\u5b50\u6811\u4e2d\u6709\u5458\u5de5\n\t\t\tcheck(l,mid,al[k]);\n\t\tif(mid+1+total<mini&&a[ar[k]])//\u6ce8\u610f\u53f3\u5b50\u6811\u662f\u4ecemid+1\u5f00\u59cb,\u4e0d\u662fmid\n\t\t\tcheck(mid+1,r,ar[k]);\n\t\tpushup(k);\n\t}\n}\nint main(){\n\tint i,j,k;\n\tchar c;\n\tcin>>n>>mini;\n\twhile(n--){\n\t\tcin>>c>>k;\n\t\tswitch(c){\n\t\t\tcase 'A':\n\t\t\t\ttotal+=k;//\u5de5\u8d44\u52a0k\uff0c\u8bb0\u5f55\u5728total\u4e2d\n\t\t\t\tbreak;\n\t\t\tcase 'S':\n\t\t\t\ttotal-=k;\n\t\t\t\tcheck(1,300000,1);\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tif(k>a[1])//a[1]\u53ef\u4ee5\u76f4\u63a5\u8868\u793a\u6574\u4e2a\u533a\u95f4\u5185\u6240\u6709\u5458\u5de5\u4e2a\u6570\n\t\t\t\t\tcout<<-1<<endl;\n\t\t\t\telse\n\t\t\t\t\tquery(1,300000,1,k);\n\t\t\t\tbreak;\n\t\t\tcase 'I':\n\t\t\t\tif(k>=mini)//k<mini\u65f6\u4e0d\u7528\u8bb0\u5f55\u5728\u79bb\u5f00\u516c\u53f8\u7684\u4eba\u6570\u4e2d\n\t\t\t\t\tadd(1,300000,1,k-total);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\u5728\u6b64\uff0c\u5bf9\u4f7f\u7528\u591a\u6b21\u8bc4\u6d4b\u8d44\u6e90\u8868\u793a\u62b1\u6b49~~\uff08\u6c57~~\n\n\u6b64\u9898\u611f\u6168\u8f83\u6df1,\u671b\u7ba1\u7406\u5927\u5927\u8fc7\u4e86",
        "postTime": 1566318045,
        "uid": 93538,
        "name": "\u03b1nonymous",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "#### \u7b2c\u4e00\u6b21\u88ab\u7384\u5b66\u6015\u4e86\uff0c\u8c03\u4e86\u51e0\u5929\uff0cQAQ\n\n**\u6b63\u6587\uff1a**\n1. \u76ee\u6d4b\uff1a\u4e0d\u96be\u770b\u51fa\u662f\u4e00\u9053\u5e73\u8861\u6811\u7684\u9898\uff0c\u4e8e\u662f\u6211\u5c31\u7801\u4e0a\u4e86Splay\uff08\u5bf9\u4e8e\u8fd9\u9053\u9898\u7b80\u5355\uff0c\u4f46\u96be\u8c03\uff0c\u56e0\u4e3a\u4e0d\u4f1aTreap\uff09\n\n2. \u601d\u8def\uff1a\u63d2\u5165\u4e00\u4e2adelta\u53d8\u91cf\uff0c\u6811\u4e2d\u7684\u6570\u7686\u4e3a\u76f8\u5bf9delta\u7684\u503c\uff0c\u5f53\u7136\u52a0\u5165\u8fb9\u754cINT_MAX\uff0c\u9632\u51fa\u9519\n\n   \u5373\uff1a\n```cpp\n\tI\u547d\u4ee4\uff1a\u63d2\u5165x-delta\n\tA\u547d\u4ee4\uff1adelta+x\n\tS\u547d\u4ee4\uff1adelta-x\uff0c\u5e76\u4e14\u4f4e\u4e8e\u4e0b\u9650mini\u7684\u8e22\u51fa\uff0c\u5bf9\u4e8e\u6b64\u53ef\u4ee5\u63d2\u5165\u4e00\u4e2amini-delta\uff0c\u4e00\u4e3e\u5904\u7406\u5b8c\uff0c\u4f46\u4e0d\u8981\u5fd8\u8bb0\u53ca\u65f6\u66f4\u65b0\n\tF\u547d\u4ee4\uff1a\u6b63\u5e38\u67e5\u8be2\uff0c\u4f46\u6ce8\u610f+1\uff0c-1\u4e4b\u7c7b\u7684\n```\n3. \u4ee3\u7801\u4e0d\u957f\u4f46\u4e5f\u8bf7\u7ec6\u81f4\u7406\u89e3\uff08\u6211\u4f1a\u5c06\u4e0d\u540c\u8c03\u8bd5\uff0c\u4fee\u6539\u7684\u4ee3\u7801\u53d1\u4e0a\u94fe\u63a5\uff0c\u4f60\u4eec\u53ef\u4ee5\u6bd4\u8f83AC\u4e0e90\u300180\u7684\u4e0d\u540c\uff09\n\nPS\uff1a[80](https://www.luogu.org/paste/fiulpphe)\uff0c[90](https://www.luogu.org/paste/8a9n4l2y)\uff08\u5f53\u7136\u611f\u8c22[\u4eb2\u7231\u7684\u540c\u684c\uff1a\u79e6\u5cad\u79cb\u98ce\u5927\u4f6c](https://www.luogu.org/space/show?uid=109396)\uff0c\u5e2e\u6211\u8c03\u4e8680,90\u7684\u7801\uff0c\u867d\u7136\u8c03\u523090\u8dd1\u4e86\uff0c\u6700\u540e\u8fd8\u662f\u7b2c\u4e8c\u5929\uff0c\u6211\u53c8\u6539\u6539\uff0c\u91cd\u5199\uff0c\u624dAC\u7684\uff0cQAQ\uff09\n\n**Code\uff08AC\uff09\uff1a**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\nconst int maxn=1e5+5;\nint delta,n,mini,ncnt,tot,retot,rt;\nint cnt[maxn],sz[maxn],val[maxn],son[maxn][2],f[maxn],tot_now;\n\nil int read(){\n\tint x=0,f=1;char a=getchar();\n\twhile(!isdigit(a)) {if(a=='-') f=-1;a=getchar();}\n\twhile(isdigit(a)) {x=x*10+a-'0';a=getchar();}\n\treturn x*f;\n}\n\nil bool chk(int x){\n\treturn son[f[x]][1]==x;\n}\n\nil void pushup(int x){\n\tsz[x]=sz[son[x][0]]+sz[son[x][1]]+cnt[x];\n}\n\nil void rotate(int x){\n\tint y=f[x],z=f[y],k=chk(x),w=son[x][k^1];\n\tson[y][k]=w;f[w]=y;\n\tson[z][chk(y)]=x;f[x]=z;\n\tson[x][k^1]=y;f[y]=x;\n\tpushup(y);pushup(x);\n}\n\nil void splay(int x,int goal=0){\n\twhile(f[x]!=goal){\n\t\tint y=f[x],z=f[y];\n\t\tif(z!=goal){\n\t\t\tif(chk(x)==chk(y)) rotate(y);\n\t\t\telse rotate(x);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(!goal) rt=x;\n}\n\nil void find(int x){\n\tint cur=rt;\n\twhile(son[cur][x>val[cur]]&&x!=val[cur]) cur=son[cur][x>val[cur]];\n\tsplay(cur);\n}\n\nil void insert(int x){\n\tint cur=rt,p=0;\n\twhile(cur&&x!=val[cur]){\n\t\tp=cur;\n\t\tcur=son[cur][x>val[cur]];\n\t}\n\tif(cur) cnt[cur]++;\n\telse{\n\t\tcur=++ncnt;\n\t\tif(p) son[p][x>val[p]]=cur;\n\t\tson[cur][0]=son[cur][1]=0;\n\t\tf[cur]=p;val[cur]=x;\n\t\tcnt[cur]=sz[cur]=1;\n\t}\n\tsplay(cur);\n}\n\nil int kth(int k){\n\tint cur=rt;\n\twhile(1){\n\t\tif(k<=sz[son[cur][0]]) cur=son[cur][0];\n\t\telse if(k>sz[son[cur][0]]+cnt[cur]) k-=sz[son[cur][0]]+cnt[cur],cur=son[cur][1];\n\t\telse return cur;\n\t}\n}\n\nchar op[3];\nint main(){\n\t//freopen(\"in.txt\",\"r\",stdin);\n\tn=read();mini=read();\n\tinsert(INT_MAX);//\u8fb9\u754c\n\tfor(int i=1,x;i<=n;++i){\n\t\tscanf(\"%s\",op);\n\t\tif(op[0]=='I'){\n\t\t\tx=read();\n\t\t\tif(x<mini)continue;\n\t\t\tinsert(x-delta);tot++;\n\t\t}\n\t\tif(op[0]=='A'){\n\t\t\tx=read();delta+=x;\n\t\t}\n\t\tif(op[0]=='S'){\n\t\t\tx=read();\n\t\t\tdelta-=x;\n\t\t\tfind(mini-delta);//find\u7684\u6700\u540e\u51fa\u6765\u7684\u53ef\u80fd\u662f\u524d\u9a71\uff0c\u540e\u7ee7\n\t\t\tif(val[rt]<mini-delta) cnt[rt]=0;//\u82e5\u672c\u8eab\u662f\u524d\u9a71\uff0c\u81ea\u7136\u4e5f\u8981\u8e22\u51fa\n\t\t\tsz[son[rt][0]]=0;\n\t\t\tson[rt][0]=0;\n\t\t\tpushup(rt);//\u4ee5\u4e0a3\u884c\u4fdd\u8bc1\u7ef4\u62a4\u7684\u53ca\u65f6\u4ee5\u53ca\u6b63\u786e\n\t\t}\n\t\tif(op[0]=='F'){\n\t\t\tx=read();\n\t\t\tfind(INT_MAX);//\u4fdd\u8bc1\u6b63\u786e\uff0c\u4ee5\u514d\u6709\u5730\u65b9\u66f4\u65b0\u6709\u8bef\uff0c\u6216\u4e0d\u53ca\u65f6\n\t\t\ttot_now=sz[rt]-1;//\u6709\u4e2a\u4e0d\u7b97\u7684INT_MAX\n\t\t\tif(x>tot_now) {puts(\"-1\");continue;}\n\t\t\telse printf(\"%d\\n\",val[kth(tot_now-x+1)]+delta);\n\t\t}\n\t}\n\ttot_now=sz[rt]-1;//\u4e0a\u65b9\u5f71\u54cd\u7684\u5730\u65b9\u5df2\u4fee\u6b63\uff0c\u8fd9\u91cc\u4e0d\u5fc5\u518dfind\u6d6a\u8d39\u65f6\u95f4\n\tprintf(\"%d\",tot-tot_now);\n\treturn 0;\n}\n```\n\n**\u5199\u5e73\u8861\u6811\u7684\u9898\u4e00\u5b9a\u8981\u6ce8\u610f\u51c6\u786e\u6027\u4ee5\u53ca\u4e25\u8c28\u6027\uff08\u6572\u9ed1\u677f\uff09\uff0c\u4e0d\u7136\u7384\u5b66\u52a0\u8eab\uff0c\u9677\u5165\u4e07\u52ab\u4e0d\u590d\u4e4b\u5730\uff08\u96fe\uff09**\n\nrp++",
        "postTime": 1566264469,
        "uid": 109381,
        "name": "Mosher",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "**\u505a\u6cd5\uff1a\u6743\u503c\u7ebf\u6bb5\u6811**\t~~\u6709\u70b9\u6162\uff0cdalao\u53ef\u80fd\u770b\u4e0d\u4e0a~~\n\n\u9898\u9762\u6709\u5751\uff01\uff01\uff01\u65b0\u5458\u5de5\u7acb\u5373\u79bb\u5f00\u516c\u53f8\u4e0d\u88ab\u8ba1\u7b97\uff01\uff01\n\n\u6743\u503c\u7ebf\u6bb5\u6811\u957f\u5ea6L~R\u7ef4\u62a4L~R\u7684\u5de5\u8d44\n\n\u8c03\u6574\u5de5\u8d44\u65f6\uff0c\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u6574\u4f53\u79fb\u52a8\u6570\u503c\u663e\u7136\u4e0d\u73b0\u5b9e\uff0c\u6240\u4ee5\u5f97\u53e6\u8f9f\u8e4a\u5f84\uff1a\n\n\u7531\u4e8e\u8c03\u6574\u5de5\u8d44\u662f\u6574\u4f53\u8c03\u6574\uff0c\u800c\u4e14\u6bcf\u6b21\u64cd\u4f5c\u540e\u90fd\u53ea\u7528\u5220\u9664\u5de5\u8d44\u4f4e\u4e8e\u4e0b\u754c\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u8003\u8651\u628a\u4e0b\u754cmin\u503c\u8fdb\u884c\u53cd\u5411\u8c03\u6574\uff0c\u7528\u4e00\u4e2a\u53d8\u91cfshf\u8bb0\u5f55\u5de5\u8d44\u7684\u6b63\u5411\u8c03\u6574\u503c\u7684\u548c\uff0c\u5728\u8f93\u51fa\u7684\u65f6\u5019\u628a\u67e5\u8be2\u7684\u53cd\u56de\u503c\u52a0\u4e0ashf\u5373\u53ef\u3002\n\n\u4e3a\u9632\u6b62\u6ea2\u51fa\uff0c\u6211\u4eec\u5c06\u641c\u7d22\u4e0b\u5c4aMIN\u4e0e\u4e0a\u754cMAX\u8bbe\u4e3a-0x7fffffff/2\u4e0e0x7fffffff/2\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int MAX=0x7fffffff/2,MIN=-0x7fffffff/2;\nint n,imin,shf;\nstruct node\n{\n\tnode *lc,*rc;\n\tint cnt;\n\tnode(){\n\t\tlc=rc=NULL;\n\t\tcnt=0;\n\t}\n};\nstruct Segtree\n{\n\tnode *root;\n\tint tot;\n\tSegtree()\n\t{\n\t\troot=NULL;\n\t\ttot=0;\n\t}\n\tvoid ins(node *&k,int l,int r,int key)\n\t{\n\t\tif(k==NULL)\tk=new node;\n\t\tif(l==r){\n\t\t\tk->cnt++;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(key<=mid)\tins(k->lc,l,mid,key);\n\t\telse\tins(k->rc,mid+1,r,key);\n\t\tk->cnt=0;\n\t\tif(k->lc)\tk->cnt+=k->lc->cnt;\n\t\tif(k->rc)\tk->cnt+=k->rc->cnt;\n\t}\n\tvoid del(node *&k,int l,int r)\n\t{\n\t\tif(!k)\treturn;\n\t\tint mid=(l+r)>>1;\n\t\tif(imin>mid)\n\t\t{\n\t\t\tif(k->lc)\n\t\t\t{\n\t\t\t\ttot+=k->lc->cnt;\n\t\t\t\tk->lc->cnt=0;\n\t\t\t\tk->lc=NULL;\n\t\t\t}\n\t\t\tif(imin>mid+1) del(k->rc,mid+1,r);\n\t\t}\n\t\telse del(k->lc,l,mid);\n\t\tk->cnt=0;\n\t\tif(k->lc)\tk->cnt+=k->lc->cnt;\n\t\tif(k->rc)\tk->cnt+=k->rc->cnt;\n\t}\n\tint ser(node *&k,int l,int r,int key)\n\t{\n\t\tif(!k||key>k->cnt)\treturn MIN;\n\t\tif(l==r)\treturn l;\n\t\tint mid=(l+r)>>1;\n\t\tif(k->rc)\n\t\t{\n\t\t\tif(k->rc->cnt>=key)\treturn ser(k->rc,mid+1,r,key);\n\t\t\telse\treturn ser(k->lc,l,mid,key-k->rc->cnt);\n\t\t}\n\t\telse\treturn ser(k->lc,l,mid,key);\n\t}\n}T;\nint main()\n{\n//\tfreopen(\"pay.in\",\"r\",stdin);\n//\tfreopen(\"pay.out\",\"w\",stdout);\n\tT=Segtree();\n\tcin>>n>>imin;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar op;\n\t\tint key;\n\t\tcin>>op>>key;\n\t\tif(op=='I')\n\t\t{\n\t\t\tif(key-shf>=imin)T.ins(T.root,MIN,MAX,key-shf);\n\t\t}\n\t\tif(op=='A')\tshf+=key,imin-=key;\n\t\tif(op=='S')\tshf-=key,imin+=key;\n\t\tif(op=='F')\t\n\t\t{\n\t\t\tint x=T.ser(T.root,MIN,MAX,key);\n\t\t\tif(x!=MIN)\tcout<<x+shf<<endl;\n\t\t\telse\tcout<<-1<<endl;\n\t\t}\n\t\tT.del(T.root,MIN,MAX);\n\t}\n\tcout<<T.tot<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1565444492,
        "uid": 167365,
        "name": "chtomede",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "# P1486 [NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\n[\u539f\u9898\u5730\u5740](https://www.luogu.org/problemnew/show/P1486)\n\n[GitHub\u9898\u89e3](https://github.com/jerrykcode/luogu)\n\n## \u601d\u8def\n\n\u4f7f\u7528\u901a\u8fc7size\u7ef4\u62a4\u5e73\u8861\u7684SBT\u6811\u3002\u7528\u5de5\u8d44\u4f5c\u4e3a\u641c\u7d22\u6811\u6392\u5e8f\u7684\u4f9d\u636e\u3002\n\n\u5bf9\u4e8e4\u79cd\u547d\u4ee4\uff1a\n\n* I k  \u63d2\u5165\u65b0\u7ed3\u70b9\n* A k  \u904d\u5386SBT\uff0c\u628a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de5\u8d44\u52a0\u4e0ak\n* S k  \u904d\u5386SBT\uff0c\u628a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de5\u8d44\u51cf\u5c11k\uff0c\u82e5\u4f4e\u4e8emin\uff0c\u5219\u5c06\u5176\u4eceSBT\u4e2d\u5220\u9664\n* F k  \u8bbeSBT\u7684\u7ed3\u70b9\u6570\u91cf\u4e3asize\uff0c\u67e5\u8be2\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6709(size - k)\u4e2a\u7ed3\u70b9\u7684\u5de5\u8d44\u5c0f\u4e8e\u8be5\u7ed3\u70b9\u7684\u5de5\u8d44\uff0c\u8f93\u51fa\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5de5\u8d44\u3002size < k \u5219\u8f93\u51fa-1\n\n\u8be6\u7ec6\u89c1\u4ee3\u7801\u6ce8\u91ca\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nclass Cashier {\npublic:\n\n\tCashier(int min);\n\t~Cashier();\n\n\tvoid insert(int salary); //I\n\tvoid increase(int salary_increment); //A \n\tvoid decrease(int salary_decrement); //S\n\tint select(int k); //F\n\nprivate:\n\t//SBT\u6811\n\ttypedef struct TNode {\n\t\tint key; //BST\u6309key\u503c\u6392\u5e8f\uff0c\u5728\u6b64\u9898\u4e2dkey\u4e3a\u5de5\u8d44\n\t\tstruct TNode * left;\n\t\tstruct TNode * right;\n\t\tsize_t size; //\u7ed3\u70b9\u6570\u91cf\uff0cSBT\u6839\u636esize\u7ef4\u62a4\u5e73\u8861\n\t\tTNode(int key) : key(key), left(NULL), right(NULL), size(1) {}\n\t} *Tree;\n\n\tsize_t getSize(Tree tree) {\n\t\treturn tree ? tree->size : 0;\n\t}\n\n\tTree leftRotate(Tree tree); //\u5de6\u65cb\n\tTree rightRotate(Tree tree); //\u53f3\u65cb\n\n\tTree maintain(Tree tree); //\u7ef4\u62a4\u5e73\u8861\n\tTree maintainLeft(Tree tree); //\u7ef4\u62a4\u5e73\u8861--\u5de6\u5b50\u6811\u7684\u5b69\u5b50\u7684size\u5927\u4e8e\u53f3\u5b50\u6811\u7684size\n\tTree maintainRight(Tree tree); //\u7ef4\u62a4\u5e73\u8861--\u53f3\u5b50\u6811\u7684\u5b69\u5b50\u7684size\u5927\u4e8e\u5de6\u5b50\u6811\u7684size\n\n\tTree insert(Tree tree, int key); //\u63d2\u5165\n\tint select(Tree tree, int rank); //\u5728tree\u4e2d\u627e\u5230\u6392\u540drank\u7684\u7ed3\u70b9\uff0c\u5373\u6709rank\u4e2a\u7ed3\u70b9\u7684key\u5c0f\u4e8e\u8be5\u7ed3\u70b9\u7684key\uff0c\u8fd4\u56de\u8be5\u7ed3\u70b9\u7684key\n\tTree remove(Tree tree, int key); //\u5220\u9664\u7ed3\u70b9\n\n\tvoid deleteTree(Tree tree); //\u5220\u9664\u6811\n\nprivate:\n\tTree tree; //\u5e73\u8861\u6811\n\tsize_t remove_num; //\u79bb\u5f00\u7684\u5458\u5de5\u6570\uff0c\u5373tree\u4e2d\u5220\u9664\u7684\u7ed3\u70b9\u6570\n\tint min; //\u6700\u5c0f\u5de5\u8d44\n\tqueue<Tree> q; //\u961f\u5217\n};\n\nCashier::Cashier(int min) : tree(NULL), remove_num(0), min(min) {\n\n}\n\nCashier::~Cashier() {\n\tdeleteTree(tree);\n\tqueue<Tree>().swap(q);\n\tprintf(\"%d\\n\", remove_num); //\u8f93\u51fa\u79bb\u5f00\u7684\u5458\u5de5\u6570\n}\n\nvoid Cashier::insert(int salary) {\n\tif (salary >= min) \n\t\ttree = insert(tree, salary);\n\t//else remove_num++; // \"\u5982\u679c\u67d0\u4e2a\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\u4f4e\u4e8e\u6700\u4f4e\u5de5\u8d44\u6807\u51c6,\u90a3\u4e48\u5c06\u4e0d\u8ba1\u5165\u6700\u540e\u7684\u7b54\u6848\u5185\"\n}\n\nvoid Cashier::increase(int salary_increment) {\n\t//\u904d\u5386tree\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u589e\u52a0\u5de5\u8d44\n\tif (tree == NULL) return;\n\tq.push(tree);\n\twhile (!q.empty()) {\n\t\tTree t = q.front();\n\t\tq.pop();\n\t\tt->key += salary_increment;\n\t\tif (t->left) q.push(t->left);\n\t\tif (t->right) q.push(t->right);\n\t}\n}\n\nvoid Cashier::decrease(int salary_decrement) {\n\t//\u904d\u5386tree\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u51cf\u5c11\u5de5\u8d44\uff0c\u82e5\u51cf\u5c11\u540e\u7684\u5de5\u8d44\u4f4e\u4e8emin\uff0c\u5219\u7528vector\u8bb0\u5f55\uff0c\u5e76\u5728\u6700\u540e\u5220\u9664\n\tif (tree == NULL) return;\n\tvector<int> v;\n\tq.push(tree);\n\twhile (!q.empty()) {\n\t\tTree t = q.front();\n\t\tq.pop();\n\t\tt->key -= salary_decrement;\n\t\tif (t->key < min) {\n\t\t\tv.push_back(t->key);\n\t\t}\n\t\tif (t->left) q.push(t->left);\n\t\tif (t->right) q.push(t->right);\n\t}\n\tfor (int key : v) {\n\t\ttree = remove(tree, key); //\u5220\u9664\u7ed3\u70b9\n\t}\n\tremove_num += v.size(); //\u79bb\u5f00\u5458\u5de5\u6570\u91cf\u589e\u52a0\n\tv.clear();\n}\n\nint Cashier::select(int k) {\n\t//\u67e5\u8be2\u7b2ck\u591a\n\tif (tree == NULL) return -1;\n\tif (tree->size >= k)\n\t\treturn select(tree, tree->size - k); //\u67e5\u8be2\u6709(tree->size - k)\u4e2a\u7ed3\u70b9\u6bd4\u5b83\u5c0f\u7684\u7ed3\u70b9\n\telse return -1;\n}\n\n/*-------------------------SBT\u6811-------------------------*/\n\nCashier::Tree Cashier::leftRotate(Tree tree) {\n\tTree k = tree->right;\n\ttree->right = k->left;\n\tk->left = tree;\n\ttree->size = getSize(tree->left) + getSize(tree->right) + 1;\n\tk->size =tree->size + getSize(k->right) + 1;\n\treturn k;\n}\n\nCashier::Tree Cashier::rightRotate(Tree tree) {\n\tTree k = tree->left;\n\ttree->left = k->right;\n\tk->right = tree;\n\ttree->size = getSize(tree->left) + getSize(tree->right) + 1;\n\tk->size = getSize(k->left)+ tree->size + 1;\n\treturn k;\n}\n\nCashier::Tree Cashier::maintain(Tree tree) {\n\ttree = maintainLeft(tree);\n\treturn maintainRight(tree);\n}\n\nCashier::Tree Cashier::maintainLeft(Tree tree) {\n\tif (tree == NULL || tree->left == NULL) return tree;\n\tif (tree->left->left && tree->left->left->size > getSize(tree->right)) {\n\t\t//\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u7684size\u5927\u4e8e\u53f3\u5b50\u6811\u7684size\n\t\ttree = rightRotate(tree);\n\t\ttree->right = maintain(tree->right);\n\t\ttree = maintain(tree);\n\t}\n\telse if (tree->left->right && tree->left->right->size > getSize(tree->right)) {\n\t\t//\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u7684size\u5927\u4e8e\u53f3\u5b50\u6811\u7684size\n\t\ttree->left = leftRotate(tree->left);\n\t\ttree = rightRotate(tree);\n\t\ttree->left = maintain(tree->left);\n\t\ttree->right = maintain(tree->right);\n\t\ttree = maintain(tree);\n\t}\n\treturn tree;\n}\n\nCashier::Tree Cashier::maintainRight(Tree tree) {\n\tif (tree == NULL || tree->right == NULL) return tree;\n\tif (tree->right->right && tree->right->right->size > getSize(tree->left)) {\n\t\t//\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u7684size\u5927\u4e8e\u5de6\u5b50\u6811\u7684size\n\t\ttree = leftRotate(tree);\n\t\ttree->left = maintain(tree->left);\n\t\ttree = maintain(tree);\n\t}\n\telse if (tree->right->left && tree->right->left->size > getSize(tree->left)) {\n\t\t//\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u7684size\u5927\u4e8e\u5de6\u5b50\u6811\u7684size\n\t\ttree->right = rightRotate(tree->right);\n\t\ttree = leftRotate(tree);\n\t\ttree->left = maintain(tree->left);\n\t\ttree->right = maintain(tree->right);\n\t\ttree = maintain(tree);\n\t}\n\treturn tree;\n}\n\nCashier::Tree Cashier::insert(Tree tree, int key) {\n\tif (tree == NULL) {\n\t\treturn new TNode(key);\n\t}\n\ttree->size++;\n\tif (key < tree->key) {\n\t\ttree->left = insert(tree->left, key);\n\t\ttree = maintainLeft(tree); //\u63d2\u5165\u5de6\u5b50\u6811\u540e\uff0c\u9700\u8981\u5224\u65ad\u5de6\u5b50\u6811\u7684\u5b69\u5b50\u7684size\u662f\u5426\u5927\u4e8e\u53f3\u5b50\u6811\u7684size\n\t}\n\telse {\n\t\ttree->right = insert(tree->right, key);\n\t\ttree = maintainRight(tree); //\u63d2\u5165\u53f3\u5b50\u6811\u540e\uff0c\u9700\u8981\u5224\u65ad\u53f3\u5b50\u6811\u7684\u5b69\u5b50\u7684size\u662f\u5426\u5927\u4e8e\u5de6\u5b50\u6811\u7684size\n\t}\n\treturn tree;\n}\n\nint Cashier::select(Tree tree, int rank) {\n\tif (tree == NULL) return 0;\n\tsize_t left_size = getSize(tree->left);\n\tif (rank == left_size) {\n\t\treturn tree->key;\n\t}\n\telse if (rank < left_size) {\n\t\treturn select(tree->left, rank);\n\t}\n\telse {\n\t\treturn select(tree->right, rank - left_size - 1);\n\t}\n}\n\nCashier::Tree Cashier::remove(Tree tree, int key) {\n\tif (tree == NULL) return NULL;\n\ttree->size--;\n\tif (key == tree->key) {\n\t\tif (tree->left && tree->right) { //\u5de6\u53f3\u5b50\u6811\u90fd\u4e0d\u4e3aNULL\n\t\t\t//\u7528\u5de6\u5b50\u6811\u79cd\u6700\u5927\u7684\u4ee3\u66fftree\n\t\t\tTree left_max = tree->left;\n\t\t\twhile (left_max->right) left_max = left_max->right;\n\t\t\ttree->key = left_max->key;\n\t\t\ttree->left = remove(tree->left, left_max->key);\n\t\t\ttree = maintainRight(tree); //\u5728\u5de6\u5b50\u6811\u4e2d\u5220\u9664\u7ed3\u70b9\u540e\uff0c\u9700\u8981\u5224\u65ad\u53f3\u5b50\u6811\u7684\u5b69\u5b50\u7684size\u662f\u5426\u5927\u4e8e\u5de6\u5b50\u6811\u7684size\n\t\t}\n\t\telse {\n\t\t\tTree tmp = tree;\n\t\t\ttree = tree->left ? tree->left : tree->right;\n\t\t\tdelete tmp;\n\t\t}\n\t}\n\telse if (key < tree->key) {\n\t\ttree->left = remove(tree->left, key);\n\t\ttree = maintainRight(tree); //\u5728\u5de6\u5b50\u6811\u4e2d\u5220\u9664\u7ed3\u70b9\u540e\uff0c\u9700\u8981\u5224\u65ad\u53f3\u5b50\u6811\u7684\u5b69\u5b50\u7684size\u662f\u5426\u5927\u4e8e\u5de6\u5b50\u6811\u7684size\n\t}\n\telse {\n\t\ttree->right = remove(tree->right, key);\n\t\ttree = maintainLeft(tree); //\u5728\u53f3\u5b50\u6811\u4e2d\u5220\u9664\u7ed3\u70b9\u540e\uff0c\u9700\u8981\u5224\u65ad\u5de6\u5b50\u6811\u7684\u5b69\u5b50\u7684size\u662f\u5426\u5927\u4e8e\u53f3\u5b50\u6811\u7684size\n\t}\n\treturn tree;\n}\n\nvoid Cashier::deleteTree(Tree tree) {\n\tif (tree == NULL) return;\n\t//\u9012\u5f52\u5220\u9664\n\tdeleteTree(tree->left);\n\tdeleteTree(tree->right);\n\tdelete tree;\n}\n\nint main() {\n\tint n, min;\n\tscanf(\"%d %d\", &n, &min);\n\tCashier cashier(min);\n\tchar cmd; int k;\n\tfor (int i = 0; i < n * 2; i++) { //\u5faa\u73afn*2\u6b21\u624d\u80fd\u8f93\u5165\u6240\u6709\u6570\u636e\n\t\tscanf(\"%c\", &cmd);\n\t\tscanf(\"%d\", &k);\n\t\tswitch (cmd) {\n\t\tcase 'I' : cashier.insert(k); break;\n\t\tcase 'A': cashier.increase(k); break;\n\t\tcase 'S': cashier.decrease(k); break;\n\t\tcase 'F': {\n\t\t\tint salary = cashier.select(k);\n\t\t\tprintf(\"%d\\n\", salary);\n\t\t\tbreak;\n\t\t}\n\t\tdefault: break;\n\t\t}\n\t}\n\t//\u5728\u6790\u6784\u51fd\u6570\u91cc\u8f93\u51fa\u79bb\u5f00\u7684\u5458\u5de5\u6570\u91cf\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1562468075,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "[$\\texttt{ARFA cnblogs}$](https://www.cnblogs.com/FibonacciHeap/articles/10599600.html)\n\n$\\texttt{NOI2004}$ \u8001\u8d3c\u4e27\u5929\u826f!!!!\n\n\u5148\u8bf4\u4e00\u4e0b\u601d\u8def\u3002\u9996\u5148\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2a $money$ \u4ee3\u8868\u6211\u4eec\u73b0\u5728\u7684\u5de5\u8d44\u8d77\u4f0f\u72b6\u51b5 (\u5f88\u663e\u7136\u662f\u4e00\u4e2a\u5168\u5c40\u7684\u6807\u8bb0)\u3002\u6211\u4eec\u8981\u77e5\u9053,\u524d\u9762\u7684\u5458\u5de5\u7684\u5de5\u8d44\u88ab\u51cf\u4e86,\u540e\u9762\u7684\u662f\u4e0d\u4f1a\u51cf\u7684,\u6240\u4ee5\u6211\u4eec\u63d2\u5165\u7684\u65f6\u5019\u63d2\u5165\u4e00\u4e2a $val-money$,\u63d0\u53d6\u7684\u65f6\u5019\u7528 $tree_x+money$ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5199\u7684\u662f $\\texttt{FHQTreap}$,\u6240\u4ee5\u5220\u9664\u7684\u65f6\u5019\u76f4\u63a5\u628a\u5c0f\u4e8e\u5e95\u7ebf\u7684\u5b50\u6811\u629b\u5f03\u3002\n\n\u60a8\u9700\u8981\u6ce8\u610f\u7684\u662f :\n\n- ``if (tree[now]+money)<val then`` \u60a8\u662f\u5426\u5199\u6210\u4e86 ``<=``\n- ``Insert`` \u4e2d\u7684 ``Split(root,x,y,val+money);`` \u60a8\u662f\u5426\u5199\u6210\u4e86 ``Split(root,x,y,val);`` (\u5982\u679c\u662f,\u4f60\u53ef\u80fd\u4f1a\u770b\u5230 $7$ \u7684\u5de6\u53f3\u513f\u5b50\u90fd\u662f $6$ \u7684\u795e\u5947\u60c5\u51b5)\n- ``Delete`` \u4e2d\u7684 ``Split(root,x,y,val);`` \u60a8\u662f\u5426\u5199\u6210\u4e86 ``Split(root,x,y,val-1);``\u3002\n- `` if k>=border then Insert(k-money); `` \u60a8\u662f\u5426\u5199\u6210\u4e86 `` if k<border then inc(outsize) else Insert(k-money); ``,\u8bf7\u8ba4\u771f\u9605\u8bfb\u6700\u540e\u4e00\u53e5\u8bdd\u3002\n- ``Query`` \u4e2d\u7684 ``if k<=0 then exit(-1);`` \u52a0\u4e86\u6ca1\u6709\u3002\n\n(\u8fd9\u4e1c\u897f\u662f\u663e\u7136\u53ef\u4ee5 [$\\texttt{AYH}$](https://www.luogu.org/blog/acking/guan-yu-pu-tong-ping-heng-shu-di-jun-tan-fu-za-du-di-you-hua) \u4f18\u5316\u7684,\u90a3\u4f4d\u8bf4\u81ea\u5df1\u8dd1\u5f97\u98de\u5feb\u7684\u540c\u5b66\u8981\u6ce8\u610f\u4e86)\n\n```pascal\n// luogu-judger-enable-o2\n// FHQ Treap\n\nUses math;\n\nConst\n    total=100010 << 1;\n    RP=23333;\n\nvar\n    size,tree,heap:array[-1..total] of longint;\n    son:array[-1..total,-1..2] of longint;\n    i,j,m,n,k,root,money,border,outside:longint;\n    order:char;\n\nprocedure Add(val:longint); begin inc(n); size[n]:=1; tree[n]:=val; heap[n]:=random(RP); end;\n\nprocedure Split(now:longint;var a,b:longint;val:longint);\nbegin\n    if now=0 then begin a:=0; b:=0; exit; end;\n    if (tree[now]+money)<val then\n    begin a:=now; Split(son[now,1],son[a,1],b,val); end\n    else begin b:=now; Split(son[now,0],a,son[b,0],val); end;\n    size[now]:=size[son[now,0]]+size[son[now,1]]+1;\nend;\n\nprocedure Merge(var now:longint;a,b:longint);\nbegin\n    if (a=0)or(b=0) then begin now:=a+b; exit; end;\n    if (heap[a]<heap[b]) then\n    begin now:=a; Merge(son[now,1],son[a,1],b); end\n    else begin now:=b; Merge(son[now,0],a,son[b,0]); end;\n    size[now]:=size[son[now,0]]+size[son[now,1]]+1;\nend;\n\nprocedure Insert(val:longint);\nvar x,y,o:longint;\nbegin\n    x:=0; y:=0; Add(val); o:=n;\n    Split(root,x,y,val+money); Merge(x,x,o); Merge(root,x,y);\nend;\n\nprocedure Delete(val:longint);\nvar x,y:longint;\nbegin\n    x:=0; y:=0; Split(root,x,y,val);\n    inc(outside,size[x]); root:=y;\nend;\n\nfunction Query(now,k:longint):longint;\nbegin\n    if k<=0 then exit(-1); Query:=0;\n    if size[son[now,0]]+1=k then exit(tree[now]+money);\n    if size[son[now,0]]>=k then Query:=Query(son[now,0],k) else\n    Query:=Query(son[now,1],k-size[son[now,0]]-1);\nend;\n\nbegin\n    randomize; root:=1; Add(maxlongint div 843); heap[root]:=-maxlongint;\n    readln(m,border); money:=0;\n    for i:=1 to m do\n    begin\n        readln(order,k);\n        if (order='I') then if k>=border then Insert(k-money); \n        if (order='A') then inc(money,k);\n        if (order='S') then begin dec(money,k); Delete(border); end;\n        if (order='F') then writeln(Query(root,size[root]-k));\n    end;\n    writeln(outside);\nend.\n```",
        "postTime": 1553578253,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "# \u8fd9\u662f\u4e00\u7bc7\u4e0d\u9700\u8981\u5e73\u8861\u6811\u7684\u9898\u89e3\n### \u4f17\u6240\u5468\u77e5vector+\u4e8c\u5206\u53ef\u4ee5\u53d6\u4ee3\u8bb8\u591a\u64cd\u4f5c\uff0c\u4e0b\u9762\u5f00\u59cb\u6b63\u9898\n\u6b64\u9898\u96be\u70b9\u5728\u4e8e\u5f53A,S\u64cd\u4f5c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5bf9\u6240\u6709\u5b58\u6d3b\u7684\u4eba\u90fd\u64cd\u4f5c\u4e00\u904d\u4e8e\u662f\u6211\u4eec\u8054\u60f3\u5230\u86af\u8693\u90a3\u9898\uff0c\u7ef4\u62a4\u4e00\u4e2ad\uff0c\u4fdd\u8bc1v[x]+d=real[x]\n\nv\u662f\u6211\u4eec\u7ef4\u62a4\u7684\uff0c\u79fb\u9879\u5f97v[x]=real[x]-d,\u6bcf\u6b21\u6765\u65b0\u4eba\u63d2\u5165real-d,\u8981\u52a0\u51cf\u5de5\u8d44\u76f4\u63a5\u5728d\u4e0a\u52a0\u51cf\uff0c\u8fd9\u6837\u5c31\u6210\u529f\u5c06a,s\u64cd\u4f5c\u53d8\u6210O(1)\u4e86\u3002\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u5220\u9664<min\u7684\u548c\u6c42\u7b2ck\u5927\n\n\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1v\u662f\u5355\u8c03\u9012\u589e\u7684\u5373\u53ef \u6bcf\u6b21\u63d2\u5165\u65f6\uff0c\u4e8c\u5206\u4e00\u4e2a\u6700\u5927\u7684\u5c0f\u4e8ereal-d\u7684\u4f4d\u7f6e\uff0c\u7136\u540einsert, \u5220\u9664\u540c\u7406\uff0c\u56e0\u4e3amin\u4e5f\u662f\u771f\u5b9e\u503c\uff0c\u6240\u4ee5\u5728v\u6570\u7ec4\u4e2d\u5c31\u662fmin-d,\u4e8c\u5206\u4e00\u4e2a\u6700\u9760\u540e\u7684\u4f4d\u7f6e\uff0c\u628a\u524d\u9762\u7684\u6570\u90fd\u5220\u6389\uff0cerase\u7684\u590d\u6742\u5ea6\u662fO(\u5220\u9664\u957f\u5ea6),\u6bcf\u4e2a\u6570\u53ea\u4f1a\u88ab\u5220\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u5f88\u4f18\u8d8a\u3002\n\n\u5177\u4f53\u8fc7\u7a0b\u53ef\u4ee5\u624b\u819c\u6837\u4f8b\uff0c\u4f53\u4f1a\u4e00\u4e0bd\u7684\u5999\u5904\n\nCode\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector <int> v;\nint n,T,mi,d=0,ans=0;\nint read()\n{\n\tchar ch=getchar();\n\tint s=0,f=1;\n\twhile (ch<'0' || ch>'9') {if (ch=='-') f=-1;ch=getchar();}\n\twhile (ch>='0' && ch<='9') s=s*10+ch-48,ch=getchar();\n\treturn s*f;\n}\n\nint cha(int x) // \u67e5\u627e\u6700\u9760\u540e\u7684\u5c0f\u4e8ex\u7684\u4f4d\u7f6e \n{\n\tif (v.size()==0 || v[0]>=x) return -1;//\u5982\u679c\u4e0d\u5224\u7a7a\u4f1a\u975e\u6cd5\u8bbf\u95ee\n\tint l=0,r=v.size()-1;\n\twhile (l<r) \n\t{\n\t\tint mid=(l+r+1)>>1;//\u52a01\u9632\u6b62\u6b7b\u5faa\u73af\uff0c\u6bd4\u5982l=4,r=5\n\t\tif (v[mid]<x) l=mid;\n\t\t\telse r=mid-1;\n\t}\n\treturn r;\n}\n//\u56e0\u4e3avector \u4e0b\u6807\u4ece0\u5f00\u59cb\uff0cinsert\u548cerase\u6700\u597d\u6d4b\u8bd5\u4e00\u4e0b\u4ece\u7b2c\u51e0\u4e2a\u6570\u5f00\u59cb\u5220\u9664\u6216\u52a0\u5165\uff0c\u8981\u4e0d\u8981+1\uff0c-1\u4ec0\u4e48\u7684\nint main()\n{\n\tT=read();mi=read();\n\twhile (T--)\n\t{\n\t\tchar ch=getchar();\n\t\twhile (ch!='I' && ch!='A' && ch!='F' && ch!='S') ch=getchar();\n\t\tint x=read();\n\t\tif (ch=='I') {\n\t\t\tint p=cha(x-d);\n\t\t\tif (x>=mi) v.insert(v.begin()+p+1,x-d);\n\t\t}\n\t\telse {\n\t\t\tif (ch=='A') d+=x;\n\t\t\tif (ch=='S') {\n\t\t\t\td-=x;\n\t\t\t\tint p=cha(mi-d);\n\t\t\t\tif (p==-1) continue;\n\t\t\t\tv.erase(v.begin(),v.begin()+p+1);\n\t\t\t\tans+=p+1;\n\t\t\t}\n\t\t\tif (ch=='F') {\n\t\t\t\tif (x>v.size()) printf(\"-1\\n\");\n\t\t\t\t\telse printf(\"%d\\n\",v[v.size()-x]+d);//\u8fd9\u91cc\u662f\u7b2ck\u5c0f\u3002\u3002\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1551001017,
        "uid": 5912,
        "name": "laduiw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "### Description\n\u7ed9\u51fa\u4e00\u4e2a\u4e0b\u9650 $m$ \uff0c\u8981\u6c42\u7ef4\u62a4\u4ee5\u4e0b\u64cd\u4f5c\n1.  \u63d2\u5165\u4e00\u4e2a\u6570\uff08\u5982\u679c\u5c0f\u4e8e\u4e0b\u9650\u5c31\u4e0d\u52a0\uff09\n2.  \u7ed9\u6bcf\u4e2a\u6570\u52a0\u4e0a\u4e00\u4e2a\u6570\n3.  \u7ed9\u6bcf\u4e2a\u6570\u51cf\u53bb\u4e00\u4e2a\u6570\uff0c\u5e76\u4e14\u5220\u9664\u6389 $< m$ \u7684\u6240\u6709\u6570\n4.  \u6c42\u76ee\u524d\u7b2c $k$ \u5927\u7684\u6570\uff08\u6ce8\u610f\u662f\u7b2c $k$ \u5927\uff01**\u4ece\u5927\u5230\u5c0f**\u6392\u5e8f\u540e\u7b2c $k$ \u4e2a\uff09\n\n\u6700\u540e\u8fd8\u8981\u8f93\u51fa\u6240\u6709 3 \u64cd\u4f5c\u4e00\u5171\u5220\u6389\u4e86\u591a\u5c11\u4e2a\u6570\n$n \\leq 10^5$\n### Solution\nfhqtreap\u5927\u6cd5\u543c\uff01\n\n\u7531\u4e8e\u4fee\u6539\u64cd\u4f5c\u662f\u5168\u4f53\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a $delta$ \u8bb0\u5f55\u4fee\u6539\u603b\u91cf\n\n\u5bf9\u4e8e 1 \u64cd\u4f5c\u63d2\u5165\u6743\u503c $x - delta$\uff08\u5982\u679c x <= m \u5c31\u7b97\u4e86\n\n\u5bf9\u4e8e 2 \u64cd\u4f5c\u76f4\u63a5\u628a $delta += x$ \n\n\u5bf9\u4e8e 3 \u64cd\u4f5c\uff0c\u5148\u628a $delta -= x$ \uff0c\u7136\u540e\u628a\u5c0f\u4e8e $m - delta$ \u7684\u5168\u90e8\u5220\u6389\n\n\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5 split \u51fa\u6765\u4e24\u4e2a\u5b50\u6811\uff0c\u7136\u540e\u76f4\u63a5\u8ba9 root = \u53f3\u5b50\u6811\uff0c\u6700\u540e\u8981\u8f93\u51fa\u7684 ans += \u5de6\u5b50\u6811\u7684 siz\n\n\u5bf9\u4e8e 4 \u64cd\u4f5c\uff0csplit\u4e00\u4e0b\u5c31\u884c\u4e86\n\n### Code\n\n[\u770b\u4ee3\u7801\u6233\u8fd9\u91cc](https://www.cnblogs.com/acfunction/p/10196800.html)",
        "postTime": 1546093686,
        "uid": 54745,
        "name": "Gypsophila",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1486 \u3010[NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u5f88\u4e45\u6ca1\u5199\u9898\u89e3\u4e86\u3002\u505a\u5b8c\u540e\u770b\u9898\u89e3\u53d1\u73b0\u5927\u5bb6\u90fd\u5199\u4e86\u5404\u79cd\u5e73\u8861\u6811\uff0c\u7ebf\u6bb5\u6811\uff0c\u4ee3\u7801\u5f88\u957f\u3002\n\n\u5bf9\u4e8e\u540c\u4e00\u9053\u9898\uff0c\u4ee3\u7801\u8d8a\u957f\u8d8a\u5bb9\u6613\u5199\u9519\uff0c\u4e14\u8c03\u8bd5\u8d77\u6765\u66f4\u56f0\u96be\uff0c\u8003\u573a\u4e0a\u7684\u65f6\u95f4\u4e5f\u5f88\u6709\u9650\u3002\u6240\u4ee5\u4e3a\u4ec0\u4e48\u4e0d\u7528\u867d\u7136\u6709\u70b9\u6162\u4f46\u662f\u590d\u6742\u5ea6\u6b63\u786e\u4e14\u80fd\u8fc7\u7684\u65b9\u6cd5\u5462\uff1f\n\n\u90a3\u5c31\u662f\uff1a$STL$\uff01\n\n\u53ef\u4ee5\u7528$vector$\u7ef4\u62a4\u5355\u8c03\u7684\u5de5\u8d44\u5e8f\u5217\uff0c\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a\u63d2\u5165\uff0c\u5220\u9664\uff0c\u4fee\u6539\u3002\n\n\u63d2\u5165\uff1a\u7528`upper_bound`\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(\\log n)$\u3002\n\n\u5220\u9664\uff1a\u5728\u964d\u4f4e\u5de5\u8d44\u540e\uff0c\u7528`erase`\u628a\u4f4e\u4e8e\u6700\u4f4e\u5de5\u8d44\u7684\u90e8\u5206\u5220\u9664\uff0c\u7d2f\u52a0\u8ba1\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(n)$\u3002\n\n\u4fee\u6539\uff1a\u66b4\u529b\u4fee\u6539\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(n)$\u3002\u4f46\u6ce8\u610f\u5230\u4fee\u6539\u6b21\u6570\u4e0d\u8d85\u8fc7**100**\u6b21\uff0c\u662f\u80fd\u591f\u901a\u8fc7\u7684\u3002\n\n\u6709\u51e0\u4e2a\u503c\u5f97\u6ce8\u610f\u4e4b\u5904\uff0c\u5728\u4ee3\u7801\u4e2d\u6807\u6ce8\u4e86\u3002\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\nvector<int> a;\nchar c;\nint k, n, mn, cur = 0, sum = 0;\n\nint main()\n{\n    scanf(\"%d%d\", &n, &mn);\n    while (n--)\n    {\n        while (!isalpha(c = getchar())); //\u76f4\u63a5\u7528scanf\u8f93\u5165\u4f1a\u628a\u6362\u884c\u7b26\u4e5f\u8bfb\u8fdb\u53bb\n        scanf(\"%d\", &k);\n        if (c == 'I')\n        {\n            if (k >= mn) //\u5982\u679c\u67d0\u4e2a\u5458\u5de5\u7684\u521d\u59cb\u5de5\u8d44\u4f4e\u4e8e\u6700\u4f4e\u5de5\u8d44\u6807\u51c6\uff0c\u90a3\u4e48\u5c06\u4e0d\u8ba1\u5165\u6700\u540e\u7684\u7b54\u6848\u5185\uff01\n                a.insert(upper_bound(a.begin(), a.end(), k), k);\n        }\n        else if (c == 'A')\n            for (int i = 0; i < (int)a.size(); ++i)\n                a[i] += k; //\u66b4\u529b\u52a0\n        else if (c == 'S')\n        {\n            for (int i = 0; i < (int)a.size(); ++i)\n                a[i] -= k; //\u66b4\u529b\u51cf\n            for (int i = 0; i <= (int)a.size(); ++i)\n                if (a[i] >= mn || i == (int)a.size()) //\u8fd9\u6837\u5199\u53ef\u80fd\u4e0d\u592a\u4f18\u7f8e\uff0c\u56e0\u4e3a\u849f\u84bb\u6280\u827a\u4e0d\u7cbe\uff0c\u4f46\u662f\u80fd\u8fc7\n                {\n                    a.erase(a.begin(), a.begin() + i);\n                    sum += i;\n                    break;\n                }\n        }\n        else\n        {\n            if (k > (int)a.size())\n                printf(\"-1\\n\");\n            else\n                printf(\"%d\\n\", *(a.end() - k)); //\u7531\u4e8e\u6211\u7ef4\u62a4\u7684\u662f\u9012\u589e\u5e8f\u5217\uff0c\u9700\u8981\u4ece\u540e\u5411\u524d\u7684\u7b2ck\u4e2a\n        }\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}\n```",
        "postTime": 1541651040,
        "uid": 55295,
        "name": "Vozeo",
        "ccfLevel": 8,
        "title": "\u3010\u9898\u89e3\u3011\u90c1\u95f7\u7684\u51fa\u7eb3\u5458"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P1486)\n\n~~\u5bb3\u7684\u6211\u53bb\u5b66\u4e86\u4e00\u4e0bFhq treap~~\n\n\u8fd9\u9898\u9996\u5148\u4e00\u770b\u5c31\u662f\u5e73\u8861\u6811\n\n\u8fd9\u4e2a\u9898\u8981\u6c42\u5220\u9664\u6240\u6709\u503c$\\le min$\u7684\u8282\u70b9\uff0c\u5f88\u5bb9\u6613\u60f3\u5230Fhq treap\u7684split\u64cd\u4f5c\uff0c\u6bcf\u6b21\u51cf\u5de5\u8d44\u7684\u65f6\u5019split\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u5f02\u5e38\u7b80\u5355\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n\nint val[200001],ch[200001][2],size[200001],pri[200001],tag,n,min,opt,x,y,tem,root,cnt,ans;\nchar cha;\nvoid get(){cha=getchar();while(cha<'A'||cha>'Z')cha=getchar();}\nvoid pushup(int x){size[x]=size[ch[x][0]]+size[ch[x][1]]+1;}\nint New(int x){\n\tval[++cnt]=x;\n\tpri[cnt]=rand()%1000000;\n\tsize[cnt]=1;\n\treturn cnt;\n}\nint merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(pri[x]<pri[y]){\n\t\tch[x][1]=merge(ch[x][1],y);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n\telse{\n\t\tch[y][0]=merge(x,ch[y][0]);\n\t\tpushup(y);\n\t\treturn y;\n\t}\n}\nvoid split(int now,int k,int &x,int &y){\n\tif(!now)x=y=0;\n\telse{\n\t\tif(val[now]<=k)x=now,split(ch[now][1],k,ch[now][1],y);\n\t\telse y=now,split(ch[now][0],k,x,ch[now][0]);\n\t\tpushup(now);\n\t}\n}\nint findKth(int x){\n\tint u=root;\n\twhile(size[ch[u][1]]!=x-1)\n\t\tif(size[ch[u][1]]>=x)u=ch[u][1];\n\t\telse x=x-size[ch[u][1]]-1,u=ch[u][0];\n\treturn u;\n}\nint main(){\n\tsrand(43278432); \n\tscanf(\"%d%d\",&n,&min);\n\tfor(int i=1;i<=n;i++){\n\t\tget();\n\t\tscanf(\"%d\",&tem);\n\t\tif(cha=='I'){\n\t\t\tif(tem<min)continue;\n\t\t\tsplit(root,tem-tag,x,y);\n\t\t\troot=merge(merge(x,New(tem-tag)),y);\n\t\t}\n\t\telse if(cha=='A')tag+=tem;\n\t\telse if(cha=='S')tag-=tem,split(root,min-tag-1,x,y),root=y,ans+=size[x];\n\t\telse size[root]<tem ? puts(\"-1\") : printf(\"%d\\n\",val[findKth(tem)]+tag);\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1536068452,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP1486 [NOI2004]\u90c1\u95f7\u7684\u51fa\u7eb3\u5458"
    },
    {
        "content": "\u7ecf\u5178\u5e73\u8861\u6811\u95ee\u9898\uff0cTreap,Splay,\u90fd\u53ef\u4ee5\u505a\uff0c\u5be1\u4eba\u7528\u4e86Treap\u3002\u3002\u3002\n\n\u53ea\u60f3\u8bf4\u4e00\u53e5\u8bdd\uff1a\u7ed3\u6784\u4f53\u6307\u9488\u600e\u4e48\u8fd9\u4e48\u5bb9\u6613 RE \u3002\u3002\u3002\n\n\u5be1\u4eba\u8c03\u4e862\u5929 RE\uff0c\u7ec8\u4e8e\u8fc7\u4e86\uff0c\u6fc0\u52a8\u3002\u3002\u3002\n\n\u4e8e\u662f\u7ed9\u540e\u4eba\u4e00\u4e2a\u53c2\u8003\u3002\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nint n,m,ans=0;//ans\u662f\u79bb\u5f00\u516c\u53f8\u7684\u4eba\u6570\nstruct node{\n    node* son[2];//\u513f\u5b50\u8282\u70b9\n    int v,w,s,flag;\n    node(){//\u521d\u59cb\u5316\n        son[0]=son[1]=NULL;\n        w=rand();\n        v=0;\n        s=flag=1;\n    }\n};\nnode* rt;//\u6839\u8282\u70b9\ninline int read(){//\u8bfb\u4f18\n    int date=0,w=1;char c=0;\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n    return date*w;\n}\nvoid maintain(node* &u){//\u4e0a\u4f20\n    u->s=u->flag;\n    if(u->son[0]!=NULL)u->s+=u->son[0]->s;\n    if(u->son[1]!=NULL)u->s+=u->son[1]->s;\n}\nvoid turn(node* &u,int f){//\u65cb\u8f6c\uff0c\u6b63\u5e38\n    node* t=u->son[f^1];\n    u->son[f^1]=t->son[f];\n    t->son[f]=u;\n    maintain(u);\n    maintain(t);\n    u=t;\n}\nvoid insert(node* &u,int x){//\u63d2\u5165,\u6b63\u5e38\n    if(u==NULL){\n        u=new node;\n        u->v=x;\n        maintain(u);\n        return;\n    }\n    int y=x>=u->v?1:0;\n    insert(u->son[y],x);\n    if(u->son[y]->w>u->w)turn(u,y^1);\n    else maintain(u);\n}\nvoid remove(node* &u){//\u5220\u9664\uff0c\u8fd9\u662f\u6539\u8fdb\u7248\uff0c\u5efa\u8bae\u91cd\u70b9\u7406\u89e3\n    if(u==NULL)return;\n    if(u->v>=m)remove(u->son[0]);\n    else{//\u5c31\u662f\u8fd9\u3002\u3002\u3002\n        if(u->son[0]!=NULL)ans+=u->son[0]->s;\n        ans++;//\u6839\u8282\u70b9\u81ea\u5df1\u4e5f\u8981\u88ab\u5220\u9664\n        u=u->son[1];//\u8fde\u4e0a\u6765\n        remove(u);//\u9012\u5f52\u4e0b\u53bb\n    }\n    if(u!=NULL)maintain(u);\n}\nint sum(node* u,int k){//\u6c42 kth\uff0c\u4e5f\u662f\u6539\u8fdb\u7248\uff0c\u56e0\u4e3a\u6bd4\u6839\u5c0f\u7684\u503c\u5728\u5de6\n    int rsons=0;//\u53f3\u5b50\u6811\u5927\u5c0f\n    if(u->son[1]!=NULL)rsons=u->son[1]->s;\n    if(k>=rsons+1&&k<=u->flag+rsons)return u->v;\n    if(k<=rsons)return sum(u->son[1],k);\n    else return sum(u->son[0],k-u->flag-rsons);\n}\nvoid add(node* &u,int x){//\u66b4\u529b\u52a0\uff08\u56e0\u4e3a\u6211\u61d2\u5230\u4e0d\u60f3\u7528 \u61d2\u60f0\u6807\u8bb0\u3002\u3002\u3002\uff09\n    if(u==NULL)return;\n    u->v+=x;\n    if(u->son[0]!=NULL)add(u->son[0],x);\n    if(u->son[1]!=NULL)add(u->son[1],x);//\u56e0\u4e3a\u8001\u662f RE\uff0c\u4e8e\u662f\u60f3\u51fa\u4e86\u8fd9\u4e48\u4e2a\u529e(bao)\u6cd5(li)\n    return;\n}\nint main(){\n    srand(987);//\u968f\u673a\u79cd\u5b50\u522b\u5fd8\u4e86\u3002\u3002\u3002\n    char ch[2];\n    int x;\n    n=read();m=read();\n    for(int cases=1;cases<=n;cases++){\n        scanf(\"%s\",ch);x=read();\n        if(ch[0]=='I'){\n            if(x>=m)\n            insert(rt,x);\n        }\n        if(ch[0]=='A'){\n            add(rt,x);//\u6dfb\u52a0\u5c31\u76f4\u63a5\u52a0\n        }\n        if(ch[0]=='S'){\n            add(rt,-x);//\u51cf\u5c31\u53d8\u6210\u76f8\u53cd\u6570\uff0c\u518d\u5220\u9664\n            remove(rt);\n        }\n        if(ch[0]=='F'){\n            if(rt==NULL)printf(\"-1\\n\");//\u8c03\u4e86\u534a\u5929\uff0c\u53ea\u80fd\u4e71\u641e\u3002\u3002\u3002\n            else if(x>rt->s||x<=0)printf(\"-1\\n\");\n            else printf(\"%d\\n\",sum(rt,x));\n        }\n    }\n    printf(\"%d\\n\",ans);//\u8f93\u51fa\u4eba\u6570\n    return 0;\n}\n\n```",
        "postTime": 1513611583,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1486 \u3010\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u7ef4\u62a4\u5e73\u8861\u6811\u4e2d\u7684\u91cd\u590d\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u61d2\u60f0\u5220\u9664\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u51cf\u5c0f\u7a0b\u5e8f\u5e38\u6570\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u6211\u653e\u4e00\u4e2a\u6ca1\u6709\u4f7f\u7528\u61d2\u60f0\u5220\u9664\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7**\u4f20\u9012\u53c2\u6570**\u6765\u6539\u53d8\u76f8\u540c\u5143\u7d20\u5728\u5b50\u6811\u4e2d\u7684**\u76f8\u5bf9\u4f4d\u7f6e**\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u60f3\u8981\u7684\u533a\u95f4\u653e\u5728\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\uff0c\u8fd9\u6837\u5c31\u5f88\u5229\u4e8e\u64cd\u4f5c\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=1e5+5;\nvoid outint(int x){\n    if(x>=10) outint(x/10);\n    putchar(x%10+'0');\n}\nint ch[MAXN][2],key[MAXN],size[MAXN],fa[MAXN],Rt=0,cnt=0;\nvoid inline rot(int x,int p){\n    int y=fa[x];\n    fa[ch[x][!p]]=fa[x],ch[y][p]=ch[x][!p];\n    fa[x]=fa[y];if(fa[y]) ch[fa[y]][ch[fa[y]][1]==y]=x;\n    fa[y]=x,ch[x][!p]=y;\n    size[y]=size[ch[y][0]]+size[ch[y][1]]+1;\n    size[x]=size[ch[x][0]]+size[ch[x][1]]+1;\n}\nvoid inline splay(int x,int T){\n    while(fa[x]!=T){\n        if(fa[fa[x]]==T) rot(x,ch[fa[x]][1]==x);\n        else{\n            int y=fa[x],z=fa[y],p=ch[z][1]==y;\n            if(ch[y][p]==x) rot(y,p),rot(x,p);\n            else rot(x,!p),rot(x,p);\n        }\n    }\n    if(!T) Rt=x;\n}\nint getkth(int);\nvoid insert(int k,bool flag){\n    int pos=Rt,x=Rt;\n    while(pos) x=pos,pos=ch[pos][flag?k>=key[pos]:k>key[pos]];\n    fa[++cnt]=x,key[cnt]=k,size[cnt]=1,ch[x][flag?k>=key[x]:k>key[x]]=cnt;\n    splay(cnt,0);\n}\nint getkth(int k){\n    int pos=Rt;\n    while(pos&&size[ch[pos][1]]+1!=k){\n        if(size[ch[pos][1]]+1<k){\n            k-=size[ch[pos][1]]+1;\n            pos=ch[pos][0];\n        }\n        else pos=ch[pos][1];\n    }\n    splay(pos,0);\n    return key[pos];\n}\nint suc(int &x){\n    int pos=ch[x][1];\n    while(ch[pos][0]) pos=ch[pos][0];\n    return pos;\n}\nvoid delrt(){\n    int s=suc(Rt);\n    if(s){\n        int pos=fa[s];\n        while(pos) size[pos]--,pos=fa[pos];\n        if(fa[s]==Rt) fa[ch[s][1]]=Rt,ch[Rt][1]=ch[s][1];\n        else fa[ch[s][1]]=fa[s],ch[fa[s]][0]=ch[s][1];\n        key[Rt]=key[s];\n    }\n    else Rt=0;\n}\nint deltree(){\n    int pos=Rt,tot;\n    while(key[ch[pos][0]]==key[Rt]) pos=ch[pos][0];\n    tot=size[ch[pos][0]],ch[pos][0]=0;\n    while(pos) size[pos]-=tot,pos=fa[pos];\n    return tot;\n}\nint main(){\n    int n,Minpay,delta=0,ans=0;\n    scanf(\"%d%d\",&n,&Minpay);\n    for(int i=1;i<=n;i++){\n        char c;\n        int temp;\n        scanf(\"\\n%c %d\",&c,&temp);\n        if(c=='I') if(temp>=Minpay) insert(temp-delta,true);else continue;\n        else if(c=='A') delta+=temp;\n        else if(c=='S'){\n            delta-=temp;\n            insert(Minpay-delta,false);\n            size[Rt]-=size[ch[Rt][0]];\n            ans+=size[ch[Rt][0]];\n            ch[Rt][0]=0;\n            delrt();\n        }\n        else{\n            if(temp>size[Rt]) putchar('-'),putchar('1');\n            else outint(getkth(temp)+delta);\n            putchar('\\n');\n        }\n    }\n    outint(ans);\n}\n```",
        "postTime": 1481631889,
        "uid": 20903,
        "name": "halfrot",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1486 \u3010\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    },
    {
        "content": "\u4e00\u9053\u88f8\u7684\u4e8c\u53c9\u5e73\u8861\u6811\uff0c\u53ef\u7528\u5404\u7c7b\u5e73\u8861\u6811\u6c42\u89e3\uff08\u518d\u52a0\u4e0amaintain()\u5b9e\u73b0\u540d\u6b21\u6570\u4ee5\u56de\u5e94k\u8be2\u95ee\uff0c\u5f53\u7136\u4e5f\u66f4\u597d\u7edf\u8ba1\u79bb\u5f00\u4eba\u6570\uff09\u3002\u53ea\u4e0d\u8fc7\u6ce8\u610f\u51e0\u4e2a\u7ec6\u8282\uff1a1.\u5141\u8bb8\u6709\u91cd\u590d\u5143\u7d20 2.\u9047\u5230\u5c0f\u4e8em\u503c\u65f6\uff0c\u5220\u9664\u65f6\u780d\u6389\u5de6\u5b50\u6811 \u3002 3\u4fbf\u4e8e\u64cd\u4f5c\uff0c\u76f8\u540c\u8282\u70b9\u653e\u53f3\u5b50\u6811\u3002 4.\u5982\u679c\u5458\u5de5\uff0c\u8fdb\u5165\u516c\u53f8\u65f6\u5de5\u8d44\u5c0f\u4e8em\u5219\u4e0d\u7b97\u5165\u79bb\u5f00\u516c\u53f8\u4eba\u6570\uff08\u8fd9\u516c\u53f8\u6709\u75c5\u3002\u3002\u3002\uff09\u3002\u4ee5\u4e0b\u4e3atreap\u5b9e\u73b0\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\nlong n,m,count(0);\nstruct Node{\n    long cash;\n    Node *ch[2];\n    long r;\n    int size;\n    int cmp(long x)\n    {return x<cash ? 0:1;}\n    void maintain()\n    {size=1;if(ch[0]!=NULL) size+=ch[0]->size;if(ch[1]!=NULL) size+=ch[1]->size;return ;}\n};\nvoid rotate(Node* &o,int d)//rotate to right when d equals 1\n{Node *k=o->ch[1-d];o->ch[1-d]=k->ch[d];k->ch[d]=o;o->maintain();k->maintain();o=k;return ;}\nvoid insert(Node* &o,long v)\n{\n    if(o==NULL) {o=(Node *)malloc(sizeof(Node));o->cash=v;o->ch[0]=o->ch[1]=NULL;o->r=(long)(rand()*rand()%100007);o->size=1;}\n    \n   else{ int d=o->cmp(v);\n    insert(o->ch[d],v);\n   if(o->r < o->ch[d]->r)\n       rotate(o,1-d);\n    o->maintain();}\n    return ;\n}\nvoid remove(Node *&o)\n{\n    if(o==NULL)\n        return ;\n    //printf(\"%ld %ld\",o->cash,o->ch[1]->cash);\n    if(o->cash>=m) remove(o->ch[0]);\n    else{\n            if(o->ch[0])\n                count+=o->ch[0]->size;\n            count++;\n            o=o->ch[1];\n            remove(o);\n    }\n    if(o!=NULL)\n      o->maintain();\n    return;\n}\nvoid plus(Node* &o,long x)\n{\n    if(o==NULL)\n        return ;\n    o->cash+=x;\n    plus(o->ch[0],x);\n    plus(o->ch[1],x);\n    return ;\n}\nlong kth(Node *o,long k)\n{\n    long f;\n    if(o->ch[1]==NULL)\n        f=0;\n    else f=o->ch[1]->size;\n    if(f+1==k)\n        return o->cash;\n    if(f<k)\n        return kth(o->ch[0],k-f-1);\n    else return kth(o->ch[1],k);\n    return 0;\n}\nint main()\n{\n    char s;\n    long order;\n    srand(time(NULL));\n    Node *root;\n    root=NULL;\n    std::cin>>n>>m;\n    getchar();\n    for(long i=0;i<n;i++)\n    {\n        scanf(\"%c %ld\",&s,&order);\n        getchar();\n        if(s== 'I') {if(order>=m)\n            insert(root,order);}\n        else if(s== 'F'){\n            if( !root || order>root->size || order<=0)\n                printf(\"-1\\n\");\n           else printf(\"%ld\\n\",kth(root,order));\n     }\n        else if(s== 'S') {plus(root,-order);remove(root);}\n       else plus(root,order);\n    }\n    printf(\"%ld\\n\",count);\n    return 0;\n}\n\n\n```",
        "postTime": 1445010747,
        "uid": 9408,
        "name": "UIai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1486 \u3010\u90c1\u95f7\u7684\u51fa\u7eb3\u5458\u3011"
    }
]