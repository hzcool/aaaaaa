[
    {
        "content": "\u6574\u4f53\u60f3\u6cd5\u5176\u5b9e\u5f88\u76f4\u63a5\uff1a\n\n- \u73a9\u5bb6\u8bb0\u5f55\u4e0b\u6765\u81ea\u5df1\u5df2\u7ecf\u770b\u5230\u7684\u6240\u6709\u4f4d\u7f6e\u7684\u4fe1\u606f\uff0c\u7136\u540e\u5c1d\u8bd5\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u6765\u63a8\u65ad\u51fa\u81ea\u5df1\u5728\u5730\u56fe\u7684\u54ea\u4e9b\u4f4d\u7f6e\u3002\n- \u5047\u8bbe\u73a9\u5bb6\u53ef\u4ee5\u63a8\u65ad\u51fa\u81ea\u5df1\u7684\u8d77\u70b9\u662f\u6240\u6709\u8d77\u70b9\u7684\u4e00\u4e2a\u5b50\u96c6 $S$ \u91cc\u9762\u7684\u67d0\u4e00\u4e2a\u3002\n- \u73a9\u5bb6\u4e3a\u4e86\u5c1d\u8bd5\u83b7\u5f97\u66f4\u591a\u4fe1\u606f\u6765\u5177\u4f53\u63a8\u65ad\u81ea\u5df1\u7684\u8d77\u70b9\u5728 $S$ \u91cc\u9762\u7684\u54ea\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u9700\u8981\u5411\u5916\u627e\u5b89\u5168\u7684\u4f4d\u7f6e\u6269\u5c55\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u9700\u8981\u627e\u5230\u4e00\u4e2a\u683c\u5b50\u6ee1\u8db3\uff1a\n\t- \u5b83\u4e0e\u73a9\u5bb6\u5df2\u7ecf\u8d70\u5230\u8fc7\u7684\u683c\u5b50\u76f8\u90bb\uff1b\n   - \u5047\u8bbe\u8fd9\u4e2a\u683c\u5b50\u4e0e\u8d77\u70b9\u7684\u76f8\u5bf9\u4f4d\u7f6e\u662f $(x,y)$\u3002\u73a9\u5bb6\u4e3a\u4e86\u4fdd\u8bc1\u81ea\u5df1\u4e0d\u88ab\u70b8\u5230\uff0c\u9700\u8981\u4fdd\u8bc1\u5bf9\u4e8e $S$ \u91cc\u9762\u7684\u4efb\u610f\u4e00\u4e2a\u8d77\u70b9\uff0c\u5747\u6ee1\u8db3\u4e0e\u8be5\u8d77\u70b9\u7684\u76f8\u5bf9\u4f4d\u7f6e\u662f $(x,y)$ \u7684\u683c\u5b50\u662f\u5b89\u5168\u7684\u3002\u540e\u7eed\u6211\u4eec\u79f0\u8fd9\u6837\u7684\u683c\u5b50\u5bf9\u4e8e $S$ \u7edd\u5bf9\u5b89\u5168\u3002\n- \u5f53\u73a9\u5bb6\u65e0\u6cd5\u627e\u5230\u8fd9\u6837\u7684\u683c\u5b50\u65f6\uff0c\u6e38\u620f\u7ed3\u675f\uff0c\u73a9\u5bb6\u83b7\u5f97\u81ea\u5df1\u80fd\u8d70\u5230\u7684\u8303\u56f4\u5185\u7684\u6240\u6709\u91d1\u5e01\u3002\n- \u7b54\u6848\u5373\u4e3a\u6240\u6709\u6e38\u620f\u7ed3\u675f\u7684\u60c5\u51b5\u4e2d\uff0c\u73a9\u5bb6\u83b7\u5f97\u91d1\u5e01\u6570\u7684\u6700\u5c0f\u503c\u3002\n\n\u5f53\u7136\u5982\u679c\u76f4\u63a5\u5b9e\u73b0\u4e0a\u8ff0\u8fc7\u7a0b\u80af\u5b9a\u5199\u8d77\u6765\u975e\u5e38\u9634\u95f4\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u4e0d\u4e00\u5b9a\u5bf9\u3002\n\n\u56e0\u6b64\u6211\u4eec\u7b80\u5316\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u6ce8\u610f\u5230 $S$ \u4e00\u65e6\u53d8\u5316\u4e3a $S'$\uff0c\u5219\u65b0\u7684 $S'$ \u4e00\u5b9a\u5305\u542b\u4e8e $S$\u3002\u56e0\u6b64\u5bf9\u4e8e $S$ \u7edd\u5bf9\u5b89\u5168\u7684\u683c\u5b50\u5bf9\u4e8e $S'$ \u4e5f\u4e00\u5b9a\u7edd\u5bf9\u5b89\u5168\u3002\u6240\u4ee5\u53ef\u4ee5\u8ba9\u73a9\u5bb6\u5728\u6b64\u65f6\u76f4\u63a5\u4e22\u5f03\u6240\u6709\u4fe1\u606f\u91cd\u65b0\u5f00\u59cb\u6269\u5c55\uff0c\u4e5f\u53ef\u4ee5\u6c42\u5f97\u7b54\u6848\u3002\n\n\u4ece\u800c\u6211\u4eec\u5b9e\u73b0\u5982\u4e0b\u8fc7\u7a0b\uff1a\n\n- \u5047\u8bbe\u76ee\u524d\u8d77\u70b9\u96c6\u5408\u662f $S$\u3002\n- \u4ece\u8d77\u70b9\u5f00\u59cb BFS \u6269\u5c55\uff0c\u9700\u8981\u6ee1\u8db3\u6269\u5c55\u5230\u7684\u70b9\u5bf9\u4e8e $S$ \u7edd\u5bf9\u5b89\u5168\u3002\n- \u5f53\u65e0\u6cd5\u6269\u5c55\u65f6\uff0c\u679a\u4e3e\u5df2\u7ecf\u770b\u5230\u7684\u6240\u6709\u7684\u70b9\uff08\u5373\u6269\u5c55\u5230\u7684\u70b9\u548c\u5b83\u7684\u5916\u9762\u4e00\u5708\uff09\u3002\n- \u5982\u679c\u67d0\u4e00\u4e2a\u4f4d\u7f6e\uff08\u8bbe\u5176\u76f8\u5bf9\u8d77\u70b9\u7684\u4f4d\u7f6e\u662f $(x,y)$\uff09\u6ee1\u8db3\uff1a\u5b58\u5728 $s_1,s_2\\in S$\uff0c\u4f7f\u5f97\u76f8\u5bf9 $s_1$ \u7684\u4f4d\u7f6e\u662f $(x,y)$ \u7684\u4f4d\u7f6e $p_1$ \u548c\u76f8\u5bf9 $s_2$ \u7684\u4f4d\u7f6e\u662f $(x,y)$ \u7684\u4f4d\u7f6e $p_2$ \u5728\u73a9\u5bb6\u770b\u8d77\u6765\u4e0d\u76f8\u540c\uff0c\u5219\u53ef\u4ee5\u4f9d\u7167\u8fd9\u4e2a\u70b9\u7684\u89c6\u91ce\u5dee\u5f02\u5206\u88c2 $S$ \u5e76\u9012\u5f52\u8fdb\u884c\u8be5\u8fc7\u7a0b\uff0c\u5e76\u8fd4\u56de\u9012\u5f52\u7684\u4e24\u4e2a\u5206\u53c9\u7684\u8fd4\u56de\u503c\u7684\u6700\u5c0f\u503c\u3002\n- \u5982\u679c\u65e0\u6cd5\u5206\u88c2 $S$\uff0c\u7edf\u8ba1\u6269\u5c55\u5230\u591a\u5c11\u4e2a\u91d1\u5e01\uff0c\u8fd4\u56de\u8be5\u503c\u3002\n\n\u6700\u7ec8\u7ed3\u679c\u5c31\u662f\u5bf9\u6240\u6709\u8d77\u70b9\u6784\u6210\u7684\u96c6\u5408\u8fdb\u884c\u4e0a\u8ff0\u8fc7\u7a0b\u7684\u8fd4\u56de\u503c\u3002\n\n\u76f4\u63a5\u5b9e\u73b0\uff0c\u590d\u6742\u5ea6 $O(nmS^2)$\uff1a\u6bcf\u6b21 BFS \u6269\u5c55\u590d\u6742\u5ea6 $O(nmS)$\uff0c\u540c\u65f6\u96c6\u5408\u5206\u88c2 $S$ \u6b21\u3002\n\n\u8fd9\u4e2a\u590d\u6742\u5ea6\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u3002\u8003\u8651\u5230\u74f6\u9888\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u662f\uff1a\n\n1. BFS \u6269\u5c55\u65f6\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u7edd\u5bf9\u5b89\u5168\uff0c\u8fd9\u53ef\u4ee5\u538b\u4f4d\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $(x,y)$ \u4fdd\u5b58\u4e00\u4e2a 64 \u4f4d\u6574\u6570\uff0c\u7b2c $i$ \u4f4d\u5b58\u50a8\u76f8\u5bf9\u7b2c $i$ \u4e2a\u8d77\u70b9\u7684\u4f4d\u7f6e\u662f $(x,y)$ \u7684\u4f4d\u7f6e\u662f\u5426\u5b89\u5168\uff08\u201c\u5b89\u5168\u201d\u6307\u4e0d\u662f `X` \u548c `#`\uff09\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u4e00\u6b21\u4f4d\u8fd0\u7b97\u5224\u65ad\u3002\n1. \u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u53ef\u4ee5\u5206\u88c2 $S$\u3002\u8fd9\u540c\u6837\u53ef\u4ee5\u538b\u4f4d\uff1a\u4e00\u4e2a\u70b9\u6709\u4e09\u79cd\u89c6\u89c9\u6548\u679c\uff08\u969c\u788d\u3001\u7a7a\u5730\u3001\u91d1\u5e01\uff09\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $(x,y)$ \u4fdd\u5b58\u4e09\u4e2a 64 \u4f4d\u6574\u6570\uff0c\u7b2c $i$ \u4f4d\u5b58\u50a8\u76f8\u5bf9\u7b2c $i$ \u4e2a\u8d77\u70b9\u7684\u4f4d\u7f6e\u662f $(x,y)$ \u7684\u4f4d\u7f6e\u7684\u89c6\u89c9\u6548\u679c\u662f\u4e0d\u662f\u969c\u788d\uff08\u7a7a\u5730\u3001\u91d1\u5e01\uff09\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u4e09\u6b21\u4f4d\u8fd0\u7b97\u5224\u65ad\u3002\n\n\u8fdb\u884c\u5982\u4e0a\u4f18\u5316\u540e\uff0c\u4e00\u8f6e\u8fc7\u7a0b\u7684\u590d\u6742\u5ea6\u4e0b\u964d\u81f3 $O(nm)$\uff0c\u603b\u590d\u6742\u5ea6\u5373\u4e0b\u964d\u81f3 $O(nmS)$ \u5373\u53ef\u901a\u8fc7\u3002\n\n```cpp\nconst int Next[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\nconst int Sight[9][2] = {{0, 0}, {0, 1}, {1, 0}, {0, -1}, {-1, 0}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};\nchar mp[405][405], rel[60][815][815];\nint n, m, x[60], y[60], s;\nlong long saf[815][815], sig[815][815][3];\nbool vis[815][815], isg[815][815];\n\ninline void Read() {\n    cin >> n >> m;\n    for (int i = 1;i <= n;i++) {\n        for (int j = 1;j <= m;j++) {\n            cin >> mp[i][j];\n            if (mp[i][j] == 'S') {\n                x[s] = i; y[s] = j;\n                s++;\n            }\n        }\n    }\n}\n\ninline void Prefix() {\n    for (int k = 0;k < s;k++) {\n        for (int i = 1;i <= n;i++) {\n            for (int j = 1;j <= m;j++) rel[k][i - x[k] + 402][j - y[k] + 402] = mp[i][j];\n        }\n    }\n    for (int k = 0;k < s;k++) {\n        for (int i = 1;i <= 810;i++) {\n            for (int j = 1;j <= 810;j++) {\n                if (rel[k][i][j] == 'X' || rel[k][i][j] == '#') saf[i][j] |= (1ll << k);\n                if (rel[k][i][j] == 'X' || rel[k][i][j] == '.' || rel[k][i][j] == 'S') sig[i][j][0] |= (1ll << k);\n                if (rel[k][i][j] == '#') sig[i][j][1] |= (1ll << k);\n                if (rel[k][i][j] == 'o') sig[i][j][2] |= (1ll << k);\n            }\n        }\n    }\n}\n\ninline int Work(long long sta) {\n    //cout << \"work \" << sta << endl;\n    memset(vis, 0, sizeof(vis));\n    memset(isg, 0, sizeof(isg));\n    queue <pair <int, int> > que;\n    que.push(make_pair(402, 402));\n    vis[402][402] = 1;\n    while (!que.empty()) {\n        int x = que.front().first, y = que.front().second;\n        que.pop();\n        for (int k = 0;k < 4;k++) {\n            int tx = x + Next[k][0], ty = y + Next[k][1];\n            if (tx < 1 || tx > 810 || ty < 1 || ty > 810) continue;\n            if (sta & saf[tx][ty]) continue;\n            if (vis[tx][ty]) continue;\n            vis[tx][ty] = 1;\n            que.push(make_pair(tx, ty));\n        }\n    }\n    for (int i = 1;i <= 810;i++) {\n        for (int j = 1;j <= 810;j++) {\n            if (vis[i][j]) {\n                for (int k = 0;k < 9;k++) {\n                    int tx = i + Sight[k][0], ty = j + Sight[k][1];\n                    if (tx < 1 || tx > 810 || ty < 1 || ty > 810) continue;\n                    isg[tx][ty] = 1;\n                }\n            }\n        }\n    }\n    for (int i = 1;i <= 810;i++) {\n        for (int j = 1;j <= 810;j++) {\n            if (isg[i][j]) {\n                //cout << i << \" \" << j << endl;\n                for (int c = 0;c < 3;c++) {\n                    if ((sig[i][j][c] & sta) != 0 && (sig[i][j][c] & sta) != sta) {\n                        return min(Work((sig[i][j][c] & sta)), Work(sta ^ (sig[i][j][c] & sta)));\n                    }\n                }\n            }\n        }\n    }\n    int ans = 0;\n    for (int i = 1;i <= 810;i++) {\n        for (int j = 1;j <= 810;j++) {\n            if (vis[i][j] && (sig[i][j][2] & sta) == sta) ans++;\n        }\n    }\n    return ans;\n}\n\nint main() {\n    Read();\n    Prefix();\n    //cout << \"pass\" << endl;\n    cout << Work((1ll << s) - 1) << endl;\n    return 0;\n}\n```",
        "postTime": 1685539821,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P8169 [eJOI2021] Dungeons"
    }
]