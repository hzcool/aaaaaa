[
    {
        "content": "\u829d\u58eb\u63d0\u793a\uff1a\u6b64\u9898\u9700\u8981\u7528\u5230\u56fe\u8bba\u7684\u57fa\u672c\u77e5\u8bc6\uff0c\u82e5\u6ca1\u6709\u4e86\u89e3\u8bf7\u5148\u5230\u66f4\u7b80\u5355\u7684\u9898\u76ee\u5b66\u4e60\u540e\u518d\u6765\u89e3\u51b3\u6b64\u9898\u3002\n\n\u8fd9\u9053\u9898\u662f\u201c\u6700\u77ed\u6811\u201d\u7684\u4e00\u9053\u6a21\u677f\u9898\uff0c\u4e5f\u88ab\u79f0\u4f5c\u201c\u6700\u5c0f\u751f\u6210\u6811\u201d\u3002\n\n\u800c\u5bf9\u4e8e\u6c42\u89e3\u201c\u6700\u5c0f\u751f\u6210\u6811\u201d\u95ee\u9898\uff0c\u4e3b\u8981\u6709\u4e24\u79cd\u901a\u7528\u7684\u7b97\u6cd5\uff1aPrim \u7b97\u6cd5\uff08\u9002\u5408\u6c42\u89e3\u7a20\u5bc6\u56fe\uff09\u4e0e kruskal \u7b97\u6cd5\uff08\u9002\u5408\u6c42\u89e3\u7a00\u758f\u56fe\uff09\u3002\n\n\u867d\u7136\u6b64\u9898\u9002\u5408\u7528 Kruskal \u7b97\u6cd5\uff0c\u4e0d\u8fc7 Prim \u7b97\u6cd5\u4e5f\u662f\u80fd\u505a\u7684\u3002\u4e24\u8005\u90fd\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4f1a\u7ed9\u5927\u5bb6\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u7684\u539f\u7406\u4e0e\u6e90\u4ee3\u7801\uff0c\u4e0d\u8fc7\u6838\u5fc3\u601d\u60f3\u90fd\u662f\u76f8\u540c\u7684\u2014\u2014\u8d2a\u5fc3\u3002\n\n\u9996\u5148\uff0c\u95ee\u9898\u662f\u8981\u6c42\u5728\u4e00\u4e2a\u5e26\u6743\u8fde\u901a\u65e0\u5411\u56fe\u4e2d\u6c42\u51fa\u4e00\u9897\u6700\u77ed\u6811\uff08\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u6811\u7684\u6743\u503c\u548c\u6700\u5c0f\u3002\u8ba9\u4f60\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0f\u503c\u662f\u591a\u5c11\u3002\n\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd Prim \u7b97\u6cd5\uff1a\n\n### Prim \u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff1a\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fdo83vqs.png)\n\uff08\u672c\u56fe\u7247\u6765\u6e90\u4e8e\u7f51\u7edc\uff0c\u82e5\u4fb5\u6743\u8bf7\u79c1\u4fe1\u6211\uff0c\u6838\u5b9e\u7acb\u523b\u5220\u9664\uff09\n\n\u6211\u4eec\u5c31\u62ff\u4e0a\u56fe\u4e3e\u4f8b\uff08\u5728\u4e0a\u56fe\u4e2d\uff0c\u7528\u7ea2\u7ebf\u8fde\u63a5\u7684\u8fb9\u5c31\u662f\u8981\u820d\u53bb\u7684\u8fb9\uff0c\u9ed1\u7ebf\u5c31\u662f\u6700\u7ec8\u9009\u62e9\u7684\u8fb9\uff09\u3002Prim \u7b97\u6cd5\u6784\u9020\u7684\u65b9\u6cd5\u662f\u9996\u5148\u4ece\u8d77\u59cb\u70b9 $A$ \u5f00\u59cb\uff08Prim \u7b97\u6cd5\u904d\u5386\u5f00\u59cb\u7684\u8d77\u59cb\u70b9\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u70b9\uff0c**\u7ed3\u679c**\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u4e00\u822c\u6211\u4eec\u4e60\u60ef\u4ece $1$ \u6216 $A$ \u53f7\u70b9\u5f00\u59cb\uff09\uff0c\u627e\u5230\u6240\u6709\u80fd\u4e0e\u5b83\u8fde\u8fb9\u7684\u70b9\u540e\u627e\u5230\u6743\u503c\u7684\u6700\u5c0f\u503c\u5e76\u76f8\u8fde\u3002\u7136\u540e\u76f8\u8fde\u540e\u518d\u5bf9\u88ab\u76f8\u8fde\u7684\u90a3\u4e2a\u70b9\u8fdb\u884c\u8d2a\u5fc3\u8fde\u8fb9\uff08\u5728\u672c\u56fe\u4e2d\u662f\u70b9 $B$\uff09......\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u5f53\u8fde\u8fb9\u7684\u6b21\u6570\u6b63\u597d\u7b49\u4e8e\u70b9\u6570\u51cf\u4e00\u7684\u65f6\u5019\uff0c\u7ec8\u6b62\u904d\u5386\uff0c\u7ed3\u675f\u7b97\u6cd5\u3002\uff08\u6613\u8bc1\u660e\uff0c\u5f53\u8fde\u8fb9\u6b21\u6570\u6b63\u597d\u7b49\u4e8e\u70b9\u6570\u51cf\u4e00\u65f6\uff0c\u6811\u7684\u8fb9\u6743\u6700\u5c0f\uff09\n\n\u60f3\u8981\u8ba1\u7b97\u6743\u503c\u548c\u4e5f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u4e00\u65e6\u8fde\u8fb9\u540e\u4fbf\u4e0d\u4f1a\u518d\u66f4\u6539\uff0c\u6240\u4ee5\u5728\u6bcf\u4e00\u6b21\u66f4\u6539\u540e\u52a0\u4e0a\u8fde\u8fb9\u7684\u6743\u503c\u5373\u53ef\u3002\n\n\u90a3\u4e48\u7b97\u6cd5\u5df2\u7ecf\u57fa\u672c\u8bb2\u89e3\u5b8c\u6bd5\uff0c\u63a5\u4e0b\u6765\u4e0a\u4ee3\u7801\uff01\uff08Prim \u7b97\u6cd5\u4e2d\u6211\u7528\u7684\u662f\u94fe\u5f0f\u524d\u5411\u661f\u6765\u5b58\u56fe\uff0c\u91cd\u70b9\u662f\u8bb2\u89e3\u7b97\u6cd5\uff0c\u6211\u4fbf\u4e0d\u518d\u7ec6\u8bb2\uff09\n\n```cpp\n#include<bits/stdc++.h> //\u4e07\u80fd\u5934\u6587\u4ef6 \n#define ll long long\n#define INF INT_MAX  //INF\u8868\u793a\u65e0\u9650\uff0c\u6307\u4e00\u4e2a\u6781\u5927\u503c\u3002INT_MAX\u662f\u4e00\u4e2a\u8868\u793aint\u8303\u56f4\u5185\u6700\u5927\u503c\u7684\u5e38\u91cf\u3002 \n\nusing namespace std;\nconst int M = 3005;\nconst int N = 2005;\nint n, m, tot, ans;\nint head[N], dist[N], vis[N]; \nstruct node{ //\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe \n\tint to, next;\n\tint w;\n}edge[M << 1]; //\u4f4d\u8fd0\u7b97\uff0c\u540c\u7b49\u4e8eM*2 \nvoid addedge(int x, int y, int z){ //\u94fe\u5f0f\u524d\u5411\u661f\u7684\u52a0\u8fb9\u64cd\u4f5c \n\ttot++;\n\tedge[tot].to = y;\n\tedge[tot].w = z;\n\tedge[tot].next = head[x];\n\thead[x] = tot;\n\treturn ;\n}\nvoid Prim(){ //Prim\u7b97\u6cd5 \n\tfor(int i = head[1]; i; i = edge[i].next){ //\u5224\u6bb5\u662f\u5426\u6709\u91cd\u8fb9 \n\t\tdist[edge[i].to] = min(dist[edge[i].to], edge[i].w); \n\t}\n\tint u = 1; //u\u8868\u793a\u5f53\u524d\u904d\u5386\u5230\u7684\u70b9 \n\tfor(int i = 1; i < n; i++){ //\u5faa\u73afn-1\u6b21\uff0c\u4e5f\u5c31\u662f\u8fden-1\u6761\u8fb9 \n\t\tint minn = INF; //\u5148\u7ed9\u6700\u5c0f\u503c\u9644\u4e00\u4e2a\u6781\u5927\u7684\u521d\u503c\uff08\u6211\u9009\u62e9\u7684\u662fint\u7684\u4e0a\u9650\uff0c2147483647\uff0c\u5176\u5b9e1e9\u4fbf\u8db3\u77e3\uff09 \n\t\tvis[u] = true; //\u7ed9\u8fd9\u4e2a\u70b9\u7684\u8bbf\u95ee\u6807\u8bb0\u6807\u4e3a\u771f \n\t\tfor(int j = 1; j <= n; j++){ //\u904d\u5386n\u4e2a\u70b9\u627e\u5230\u6743\u503c\u6700\u5c0f\u7684\u70b9 \n\t\t\tif(!vis[j] && dist[j] < minn){ //\u5982\u679c\u5c0f\u4e8e\u5f53\u524d\u6700\u5c0f\u503c \u4e14\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7 \n\t\t\t\tu = j; //\u8bb0\u5f55\u4e0b\u6807 \n\t\t\t\tminn = dist[j]; //\u66f4\u65b0\u6700\u5c0f\u503c \n\t\t\t}\n\t\t}\n\t\tans += minn; //\u7b54\u6848\u52a0\u4e0a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743 \n\t\tfor(int k = head[u]; k; k = edge[k].next){ //\u94fe\u5f0f\u524d\u5411\u661f\u7684\u904d\u5386\u65b9\u5f0f\uff0c\u627e\u5230\u70b9u\u6240\u76f8\u8fde\u7684\u5168\u90e8\u70b9 \n\t\t\tint v = edge[k].to; \n\t\t\tif(dist[v] > edge[k].w && !vis[v]){ //\u5982\u679c\u5f53\u524d\u70b9\u6240\u8fde\u7684\u6700\u5c0f\u6743\u503c\u5927\u4e8e\u5f53\u524d\u7684\u6743\u503c\u4e14\u8fd9\u4e2a\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7 \n\t\t\t\tdist[v] = edge[k].w; //\u66f4\u65b0 \n\t\t\t}\n\t\t} \n\t}\n\treturn ;\n}\nvoid Init(){ //\u521d\u59cb\u5316 \n\tfor(int i = 1; i <= n; i++){\n\t\tdist[i] = INF; //\u521d\u59cb\u5316\u4e00\u4e2a\u6781\u5927\u503c \n\t} \n\tdist[1] = 0; //\u4f46\u70b91\u8981\u68070 \n\treturn ;\n}\nint main(){\n    cin >> n >> m;\n    while(m--){\n    \tint x, y, z;\n    \tcin >> x >> y >> z;\n    \taddedge(x, y, z); //\u7531\u4e8e\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u8981\u5b58\u4e24\u904d \n    \taddedge(y, x, z); //\u540c\u4e0a\uff0cx-->y \u4e0e y-->x \n\t}\n\tInit(); //\u521d\u59cb\u5316 \n\tPrim(); //Prim\u7b97\u6cd5\u6c42\u89e3 \n\tcout << ans << endl; //\u8f93\u51fa\u7b54\u6848 \n\treturn 0;\n} \n//B3603 by szkzyc\n```\n\n\u8017\u65f6 7 \u6beb\u79d2\u3002\n\n\n### Kruskal \u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\n\n![](https://cdn.luogu.com.cn/upload/pic/28091.png)\n\n\uff08\u6765\u6e90\u4e8e\u7f51\u7edc\uff0c\u4fb5\u79c1\u5220\uff09\n\n\u7136\u540e\u6211\u4eec\u6765\u4ecb\u7ecd Kruskal \u7b97\u6cd5\u3002\n\nKruskal\u7684\u65b9\u6cd5\u5341\u5206\u660e\u4e86\uff0c\u7b97\u6cd5\u8fc7\u7a0b\u4e2d\u8981\u8fd0\u7528\u5230 [\u5e76\u67e5\u96c6](https://www.luogu.com.cn/problem/P3367) \u4e0d\u77e5\u9053\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u8fdb\u8fd9\u4e2a\u94fe\u63a5\u770b\u4e00\u4e0b\u76f8\u5173\u7684\u4f8b\u9898\u3002\n\n\u6211\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u6bd4 Prim \u7b97\u6cd5\u66f4\u52a0\u5bb9\u6613\u61c2\u4e00\u4e9b\uff0c\u5c31\u662f\u5c06\u6240\u6709\u56fe\u4e4b\u95f4\u7684\u8fb9\u6743\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u7684\u4e00\u4e2a\u4e00\u4e2a\u8fde\u3002\n\n\u4f1a\u4e0d\u4f1a\u4f60\u8ba4\u4e3a\u8fd9\u6837\u5c31\u5b8c\u4e86\uff1f\u4e0d\uff0c\u8fd8\u8981**\u5224\u73af**\u3002\u56e0\u4e3a\u8981\u6784\u9020\u7684\u662f\u6700\u5c0f\u751f\u6210**\u6811**\uff0c\u4e0d\u80fd\u51fa\u73b0\u73af\u3002\u5982\u679c\u51fa\u73b0\u4e86\u600e\u4e48\u529e\u5462\uff1f\u7b80\u5355\uff0c\u820d\u53bb\u540e\u7ee7\u7eed\u627e\u5c31\u884c\u4e86\uff0c\u76f4\u5230\u8fde\u6210\u4e86\u603b\u70b9\u6570\u51cf\u4e00\u7684\u70b9\u5c31\u505c\u6b62\u3002\n\n\u8fb9\u6743\u6392\u5e8f\u4ece\u5c0f\u53d6\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u5224\u73af\u5c31\u9700\u8981\u7528\u5e76\u67e5\u96c6\u7b97\u6cd5\u6765\u5224\u4e86\u3002\u5047\u8bbe\u5bf9\u4e8e\u70b9 $x$ \u4e0e $y$\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u67e5\u627e\u8fd9\u4e24\u4e2a\u70b9\u7684\u7956\u5148\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u76f8\u540c\u4fbf\u6709\u73af\uff0c\u4e0d\u76f8\u540c\u5219\u65e0\u73af\u3002\n\nKruskal \u7b97\u6cd5\u7684\u57fa\u672c\u539f\u7406\u4e5f\u5df2\u7ecf\u660e\u4e86\uff0c\u4e0a\u4ee3\u7801\uff01\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define INF INT_MAX\nusing namespace std;\nconst int N = 2005;\nconst int M = 3005;\nint ans = 0, sum = 0;\nint n, m;\nint fa[N]; //\u7528\u6765\u5b58\u50a8\u8fd9\u4e2a\u70b9\u7684\u7236\u8282\u70b9 \nstruct node{\n\tint from, to, value;\n}edge[M << 1]; \nbool cmp(node x, node y){ //\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570 \n\treturn x.value < y.value;\n}\nint find(int x){ //\u5e76\u67e5\u96c6\uff0c\u627e\u5230x\u7684\u6839\u8282\u70b9 \n\tif(fa[x] != x) return fa[x] = find(fa[x]);\n\treturn x;\n}\nvoid Kruskal(){ //Kruskal \n\tint tot = 0;\n\tsort(edge + 1, edge + 1 + m, cmp); //\u5c06\u8fb9\u6743\u8fdb\u884c\u6392\u5e8f \n\tfor(int i = 1; i <= m; i++){\n\t\tint ft = find(edge[i].to);\n\t\tint ff = find(edge[i].from); //\u5206\u522b\u627e\u5230\u8fd9\u4e24\u4e2a\u70b9\u7684\u6839\u8282\u70b9 \n\t\tif(ft != ff){ //\u5982\u679c\u4e0d\u76f8\u540c\u8bc1\u660e\u76f8\u8fde\u4e0d\u4f1a\u6709\u73af \n\t\t\ttot++; //\u8ba1\u6570\u5668\u52a0\u4e00 \n\t\t\tfa[ft] = ff; //\u5c06\u8fd9\u4e24\u4e2a\u70b9\u5408\u5e76 \n\t\t\tans += edge[i].value; //\u7b54\u6848\u52a0\u4e0a\u8fd9\u4e2a\u70b9\u7684\u503c \n\t\t}\n\t\tif(tot == n) break; //\u5982\u679c\u8fdb\u884c\u4e86n\u6b21\u5408\u5e76\uff0c\u90a3\u4e48\u9000\u51fa\u5faa\u73af\uff0c\u5df2\u7ecf\u6784\u9020\u51fa\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002 \n\t}\n}\nint main(){\n    cin >> n >> m;\n    for(int i = 1; i <= n; i++) fa[i] = i; //\u6700\u5f00\u59cb\u8fd9\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u5c31\u662f\u5b83\u81ea\u5df1 \n    for(int i = 1; i <= m; i++){\n    \tcin >> edge[i].from >> edge[i].to >> edge[i].value; \n\t} \n\tKruskal(); //\u8fdb\u884cKruskal\u7b97\u6cd5\u6c42\u89e3 \n\tcout << ans << endl; //\u8f93\u51fa\u7b54\u6848 \n\treturn 0;\n}\n//B3603 by szkzyc\n\n```\n\u8017\u65f6 3 \u6beb\u79d2\u3002\uff08\u5728\u8fd9\u9053\u9898\u4e2d\u8fd8\u662f Kruskal \u7b97\u6cd5\u6709\u4f18\u52bf\uff09\n\n\u547c\uff0c\u7ec8\u4e8e\u8bb2\u5b8c\u4e86\uff0c\u6211\u4eec\u4e0b\u6b21\u518d\u89c1\u30fe(\uffe3\u25bd\uffe3)\u3002Bye bye~~",
        "postTime": 1628492717,
        "uid": 402269,
        "name": "szkzyc",
        "ccfLevel": 5,
        "title": "B3603[\u6700\u77ed\u6811\u95ee\u9898_1]\u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\n\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u9053\u7b80\u5355\u7684\u6700\u77ed\u6811\uff08\u53c8\u53eb\u6700\u5c0f\u751f\u6210\u6811\uff09\u95ee\u9898\u3002\u6700\u77ed\u6811\uff0c\u987e\u540d\u601d\u4e49\u5c31\u662f\u4ece\u4e00\u5f20\u56fe\u4e2d\u627e\u4e00\u68f5\u6811\uff08\u4f7f\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u90fd\u76f8\u8fde\u53c8\u6ca1\u6709\u73af\uff09\uff0c\u5e76\u4e14\u4f7f\u8fd9\u68f5\u6811\u7684\u8fb9\u6743\u548c\u6700\u5c0f\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/86fj2pg8.png)\n\n\u7136\u540e\u5220\u8fb9\u628a\u5b83\u53d8\u6210\u4e00\u68f5\u6811\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/r13e2574.png)\n\n\u800c\u6211\u4eec\u8981\u505a\u7684\u628a\u4e00\u5f20\u56fe\u53d8\u6210\u4e00\u68f5\u6811\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\u627e\u751f\u6210\u6811\uff0c\u800c\u8981\u4fdd\u8bc1\u8fd9\u68f5\u6811\u7684\u6240\u6709\u8fb9\u6743\u548c\u6700\u5c0f\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\n\n## \u7b97\u6cd5\n\u666e\u53ca\u7ec4\u80fd\u63a5\u89e6\u5230\u7684\u627e\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u6709\u4e24\u79cd prim \u548c        kruskal \uff0c\u8fd9\u91cc\u53ea\u4ecb\u7ecd\u4e00\u4e0b kruskal\uff08\u514b\u9c81\u65af\u5361\u5c14\uff09\n\n\u9996\u5148\uff0c\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u7684\u524d\u7f6e\u77e5\u8bc6\u6709\uff1a\u5e76\u67e5\u96c6 \uff0c \u6392\u5e8f \uff0c \u8d2a\u5fc3\n\n\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u652f\u6301\u5408\u5e76\u548c\u67e5\u627e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5f00\u59cb\u8ba9\u6bcf\u4e2a\u5143\u7d20\u4e3a\u81ea\u5df1\u7684\u201c\u4ee3\u8868\u201d\uff0c\u5408\u5e76\u64cd\u4f5c\u5c31\u662f\u628a\u4e00\u4e2a\u5143\u7d20\u7684\u4ee3\u8868\u6539\u6210\u53e6\u4e00\u4e2a\u5143\u7d20\uff0c\u67e5\u627e\u5c31\u662f\u6839\u636e\u8fd9\u4e00\u5c42\u5c42\u7684\u201c\u4ee3\u8868\u5173\u7cfb\u201d\u627e\u51fa\u4e00\u4e2a\u5143\u7d20\u7684\u4ee3\u8868\uff0c\u4ee3\u7801\u5b9e\u73b0\u662f\u8fd9\u6837\u7684\n```cpp\nint get( int x ){//\u67e5\u627e\n    if( st[x] == x ) return x;\n    else return get( st[x] );\n}\nbool uon( int a , int b ){//\u5408\u5e76\n    int x = get( a );\n    int y = get( b );\n    st[x] = y;\n}\n```\n\u4f46\u662f\u8fd9\u6837\u6709\u4e00\u4e2a\u5f0a\u7aef\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u6781\u7aef\u6570\u636e\uff0c\u8fd9\u79cd\u5e76\u67e5\u96c6\u67e5\u627e\u6240\u8017\u8d39\u7684\u65f6\u95f4\u662f\u5de8\u5927\u7684\uff0c\u6240\u4ee5\u5c31\u7528\u5230\u4e86\u8def\u5f84\u4f18\u5316\uff0c\u8def\u5f84\u4f18\u5316\u7684\u539f\u7406\u5c31\u662f\u5728\u5408\u5e76\u7684\u65f6\u5019\u76f4\u63a5\u628a\u4e00\u4e2a\u5143\u7d20\u7684\u4ee3\u8868\u76f4\u63a5\u6539\u6210\u53e6\u4e00\u4e2a\u5143\u7d20\u7684\u4ee3\u8868\uff0c\u4ee3\u7801\u5b9e\u73b0\u662f\u8fd9\u6837\u7684\n\n```cpp\nint get( int x ){\n    if( st[x] == x ) return x;\n    else return st[x] = get( st[x] );\n}\n```\n\u56de\u5f52\u6b63\u9898\u8bf4\u8bf4\u514b\u9c81\u65af\u5361\u5c14\n\n\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u8d2a\u5fc3\uff0c\u9996\u5148\u5c06\u6240\u6709\u8fb9\u6392\u5e8f\u4e00\u904d\uff0c\u7136\u540e\u6839\u636e\u6811\u7684\u6027\u8d28\uff0c\u628a\u5904\u4e8e\u4e0d\u540c\u96c6\u5408\u7684\u8fb9\u5408\u5e76\uff0c\u56e0\u4e3a\u524d\u9762\u5df2\u7ecf\u6392\u5e8f\u8fc7\u4e86\uff0c\u6240\u4ee5\u6700\u540e\u7684\u8fb9\u6743\u548c\u80af\u5b9a\u662f\u6700\u5c0f\u7684\uff0c\u76f4\u5230\u6240\u6709\u7684\u8fb9\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u56e0\u4e3a\u6811\u4e0a\u70b9\u7684\u6570\u76ee = \u8fb9\u7684\u6570\u76ee +1\uff0c\u6240\u4ee5\u8ba1\u7b97 n - 1 \u6761\u8fb9\u5c31\u53ef\u4ee5\u7ed3\u675f\u7a0b\u5e8f\u8f93\u51fa\u7b54\u6848\u4e86\u3002\n\n\u4e0b\u9762\u8fd9\u5f20\u56fe\u53ef\u80fd\u4f1a\u8ba9\u4f60\u66f4\u7406\u89e3\u8fd9\u4e2a\u8fc7\u7a0b~~\u56fe\u6765\u81ea\u7f51\u7edc~~\n\n![](https://cdn.luogu.com.cn/upload/pic/28091.png)\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define MAX 500\n#define MAXN 1010101\n#define mod 10000007\n#define ld double\n#define ll long long\n\nusing namespace std;\n\nstruct node{//\u5b58\u8fb9\n    int a,b,dis;//\u4e00\u6761\u8fb9\u7684\u8d77\u59cb\u70b9 \uff0c \u7ed3\u675f\u70b9 \uff0c \u8fb9\u6743\n}g[MAXN];\nint n , m , ans;//\u70b9\u6570\uff0c\u8fb9\u6570\uff0c\u7b54\u6848\nint st[MAXN];//\u6a21\u62df\u5e76\u67e5\u96c6\n\ninline int read()//\u5feb\u8bfb\n{\n    int x = 0 ; short w = 0 ; char ch = 0;\n    while( !isdigit(ch) ) { w|=ch=='-';ch=getchar();}\n    while( isdigit(ch) ) {x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return w ? -x : x;\n}\n\nint get( int x ){//\u5e76\u67e5\u96c6\u67e5\u627e + \u8def\u5f84\u538b\u7f29\n    if( st[x] == x ) return x;\n    else return st[x] = get( st[x] );\n}\n\nbool cmp( node x , node y ){//cmp\u4fdd\u8bc1\u6570\u636e\u5347\u5e8f\u6392\u5e8f\n    return x.dis < y.dis;\n}\n\nint main(){\n\n    n = read(); m = read();//\u8bfb\u5165\n\n    for( int i = 1; i <= n; i++ )//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\uff0c\u6bcf\u4e2a\u70b9\u7684\u4ee3\u8868\u662f\u4ed6\u81ea\u5df1\n        st[i] = i;\n\n    for( int i = 1; i <= m; i++ ){//\u5b58\u8fb9\n        g[i].a = read( );\n        g[i].b = read( );\n        g[i].dis = read( );\n    }\n\n    sort( g + 1 , g + m + 1 , cmp );//\u6392\u5e8f\n\n    for( int i = 1; i <= m; i++ ){ \n        int x = get( g[i].a );//\u627e\u4e24\u4e2a\u70b9\uff08\u4e00\u6761\u8fb9\uff09\n        int y = get( g[i].b );\n        if( x != y ){//\u5982\u679c\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\n            ans += g[i].dis;//\u7b54\u6848\u52a0\u4e0a\u8fd9\u6761\u8fb9\n            st[x] = y;//\u4e24\u4e2a\u70b9\u52a0\u5165\u540c\u4e00\u4e2a\u96c6\u5408\uff08\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u6700\u77ed\u6811\n        }\n    }\n\n    cout<<ans;//\u8f93\u51fa\u7ed3\u679c\n\n    return 0;//\u6492\u82b1\n}\n```\n\n\u672c\u9898\u89e3\u5230\u6b64\u7ed3\u675f\uff0c\u9700\u8981\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003dya\u5927\u4f6c\u5199\u7684[\u6700\u5c0f\u751f\u6210\u6811 ](https://www.luogu.com.cn/blog/Edolon/zui-xiao-sheng-cheng-shu-tan-xin-ji-yi)\n\nPS: 2021.9.27 \u6362\u6389\u4e86\u4e24\u5f20\u6781\u4e11\u65e0\u6bd4\u7684\u56fe",
        "postTime": 1626311514,
        "uid": 358795,
        "name": "Kun_9",
        "ccfLevel": 5,
        "title": "B3603\u9898\u89e3"
    },
    {
        "content": "### \u9898\u610f\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/B3603)\n\n\u7ed9\u4f60 $n$ \u548c $m$ \u4ee5\u53ca $m$ \u4e2a\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684\u8fb9\u7684\u503c\uff0c\u8ba9\u4f60\u751f\u6210\u6811\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\n### \u505a\u6cd5\n\u9898\u610f\u7b80\u5355\u660e\u4e86\uff0c\u5f88\u660e\u663e\u6700\u5c0f\u751f\u6210\u6811\u6a21\u677f\u9898\uff0c\u4e00\u822c\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u4e3a prim \u548c Kruskal\uff0c\u672c\u6587\u5219\u7528 Kruskal \u6765\u89e3\u8fd9\u9053\u9898\u3002\n### \u6d45\u8c08 Kruskal\nKruskal \u5c31\u662f\u8d2a\u5fc3\u7b97\u6cd5\u7684\u4e00\u79cd\u4f53\u73b0\uff0c\u6240\u4ee5\u6709\u8ddf\u8d2a\u5fc3\u4e00\u6837\u7684\u601d\u8def\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u6392\u5e8f\uff0c\u4e5f\u901a\u5e38\u642d\u914d [\u5e76\u67e5\u96c6](https://www.luogu.com.cn/blog/natieyes/bing-zha-ji) \u5b9e\u73b0\uff0c\u662f\u56e0\u4e3a\u4ed6\u9700\u8981\u9760\u5e76\u67e5\u96c6\u6765\u5b8c\u6210\u8d2a\u5fc3\uff08\u5373\u4e24\u4e2a\u70b9\u662f\u5426\u76f4\u63a5\u6216\u95f4\u63a5\u8054\u7cfb\u5728\u4e00\u8d77\uff09\uff0c\u81f3\u4e8e\u8bc1\u660e\uff0c\u548c\u8d2a\u5fc3\u4e00\u6837\uff0c\u6211\u8fd9\u91cc\u5c31\u4e0d\u591a\u52a0\u8d58\u8ff0\u4e86\uff08\u53ef\u89c1\u300a\u6df1\u57fa\u300b\u7b2c\u5341\u4e8c\u7ae0\uff09\u3002\n\n\u5982\u8fd8\u6709\u4e0d\u61c2\u53ef\u53c2\u8003[there](https://www.luogu.com.cn/blog/Edolon/zui-xiao-sheng-cheng-shu-tan-xin-ji-yi)\u3002\n### Code\n\u65e2\u7136\u4e3a\u6a21\u677f\u9898\uff0c\u90a3\u4e5f\u5c31\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u4e86\uff0c\u6253\u4e0a\u5e76\u67e5\u96c6\uff0c\u5b58\u56fe\uff0c\u518d\u8dd1\u4e00\u904d Kruskal\uff0c\u5373\u53ef\u51fa\u7b54\u6848\uff0c\u4e0a\u4ee3\u7801\uff08\u5e26\u6ce8\u91ca\u89e3\u91ca\uff09\uff1a\n```cpp\n//\u4ee3\u7801\u4e0b\u65b9\u8fd8\u6709\u89e3\u91ca\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\nint n,m,ans;\nint f[100001];//\u5e76\u67e5\u96c6\n\nstruct Node{//\u70b9\u548c\u8fb9\u6743\n    int x,y,val;\n}a[100001];\n\nint find(int x) {//\u67e5\n    if (f[x]==x) {\n        return x;\n    }\n    return f[x]=find(f[x]);\n}\n\nbool cmp(Node M,Node N) {//sort \u81ea\u5b9a\u4e49\u89c4\u5219\u51fd\u6570\n    return M.val<N.val;\n}\n\nint main() {\n    cin>>n>>m;\n    for (int i=1;i<=n;i++) {//\u521d\u59cb\u5316\uff08\u522b\u5fd8\u4e86\uff09\n        f[i]=i;\n    }\n    for (int i=1;i<=m;i++) {\n        cin>>a[i].x>>a[i].y>>a[i].val;\n    }\n    sort(a+1,a+m+1,cmp);//\u6392\u5e8f\n    for (int i=1;i<=m;i++) {\n        int nx=find(a[i].x);//x \u7684\u7956\u5148\n        int ny=find(a[i].y);//y \u7684\u7956\u5148\n        if (nx!=ny) {//\u5e76\n            f[nx]=ny;\n            ans+=a[i].val;\n            n--;\n        }\n        if (n==1) {//\u7279\u5224\n            break;\n        }\n    }\n    cout<<ans;\n}\n```\n\u518d\u6765\u8bf4\u4e00\u4e0b\u4ee3\u7801\u4e2d\u7684 `n==1`\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u662f\u56e0\u4e3a\uff0c\u6bcf\u5e76\u4e00\u6b21\uff0c$n$ \u5c31\u51cf\u4e00\uff0c\u800c $n$ \u6761\u8fb9\u6700\u5c11\u6709 $n-1$ \u6761\u8fb9\uff0c\u6240\u4ee5\u5230\u4e86 $1$ \u5c31\u8df3\u51fa\u3002 ",
        "postTime": 1626310227,
        "uid": 420129,
        "name": "Nt_Tsumiki",
        "ccfLevel": 5,
        "title": "B3603\u9898\u89e3"
    },
    {
        "content": "**\u524d\u60c5\u63d0\u8981**\uff1a`AC` \u6b64\u9898\uff0c\u4f60\u9700\u8981\u638c\u63e1\u5e76\u67e5\u96c6\u7b97\u6cd5\uff0c`kruskal` \u7b97\u6cd5\u6216\u8005 `prim` \u7b97\u6cd5\u3002\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u7b80\u5355\u6982\u62ec\u4e3a\u5728\u56fe\u91cc\u9762\u627e\u4e00\u9897\u6811\uff0c\u4e14\u8fd9\u9897\u6811\u7684\u8fb9\u6743\u8981\u6700\u5c0f\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\u56fe\u548c\u6811\u7684\u533a\u522b\uff1a\u56fe\u53ef\u80fd\u4f1a\u6709\u73af\uff08\u5c31\u662f\u9996\u5c3e\u76f8\u8fde\uff09\uff0c\u4f46\u662f\u6811\u4e00\u5b9a\u4e0d\u4f1a\u6709\uff0c\u5e76\u4e14\u6811\u6709\u4e2a~~\u4e00\u70b9\u4e5f\u4e0d~~\u795e\u5947\u4e4b\u5904\uff0c\u6811\u7684\u8fb9\u6570\u603b\u6bd4\u70b9\u6570\u5c11\u4e00\u3002\n\n\u8fd9\u91cc\u53ea\u7b80\u5355\u7684\u4ecb\u7ecd\u4e00\u4e0b `kruskal` \u7b97\u6cd5\u3002\n\n`kruskal` \u7b97\u6cd5\u5305\u542b\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u6bcf\u6b21\u90fd\u9009\u51fa\u4e00\u6761\u6700\u5c0f\u6743\u503c\u7684\u8fb9\uff0c\u5e76\u4e14\u4e0e\u524d\u9762\u5df2\u9009\u7684\u8fb9\u76f8\u8fde\uff0c\u5982\u679c\u8fde\u8fb9\u540e\u51fa\u73b0\u4e86\u73af\u5c31\u820d\u53bb\u8be5\u6761\u8fb9\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u8fde\u597d\u8fb9\u662f\u4e2a\u6570\u6bd4\u70b9\u6570\u5c11\u4e00\u3002\n\n\u5e76\u67e5\u96c6\u5219\u662f\u7528\u6765\u5224\u65ad\u662f\u5426\u6709\u73af\u7684\u3002\u5b58\u4e0b\u6240\u6709\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5047\u8bbe\u73b0\u5728\u5df2\u77e5\u6709\u4e24\u70b9 `x`,`y` \u4e2d\u6709\u4e00\u8fb9\uff0c\u5148\u627e\u51fa\u5b83\u4eec\u5404\u81ea\u7684\u7956\u5148\uff08\u4e00\u76f4\u627e\u7236\u8282\u70b9\uff0c\u76f4\u5230\u627e\u5230\u4e00\u70b9\u4e0d\u518d\u6709\u7236\u8282\u70b9\uff09\u3002\u5982\u679c\u7956\u5148\u4e0d\u76f8\u540c\u5c31\u8868\u793a\u5b83\u4eec\u539f\u672c\u662f\u4e0d\u76f8\u8fde\u7684\uff0c\u8ba9\u5176\u4e2d\u4efb\u610f\u4e00\u7956\u5148\u7684\u7236\u8282\u70b9\u4e3a\u53e6\u5916\u4e00\u4e2a\u7956\u5148\uff0c\u8fbe\u5230\u4f7f `x`,`y` \u4e24\u70b9\u76f8\u540c\u7684\u76ee\u7684\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e3+5;\nconst int M=3e3+5; \nint n,m,fa[N],cnt,ans;\nstruct node{\n\tint x,y,w;\n}edge[M];\nbool cmp(node a,node b){\n\treturn a.w<b.w;\n}\nint find(int x){\n\tif(fa[x]==x){\n\t\treturn x;\n\t}\n\treturn fa[x]=find(fa[x]);//\u4e00\u4e2a\u5c0f\u4f18\u5316\uff0c\u8282\u7701\u4e0b\u6b21\u627e\u7956\u5148\u7684\u65f6\u95f4\n}\nvoid unionn(int x,int y){\n\tint fx=find(x);\n\tint fy=find(y);\n\tfa[fx]=fy;\n\treturn;\n}\nvoid kruskal(){\n\tfor(int i=1;i<=n;i++){//\u5148\u5047\u8bbe\u6bcf\u4e2a\u70b9\u90fd\u6ca1\u6709\u7236\u8282\u70b9\uff0c\u5373\u6240\u6709\u70b9\u90fd\u4e0d\u4e92\u901a\n\t    fa[i]=i;\n\t}\n\tsort(edge+1,edge+m+1,cmp);//\u8fb9\u6743\u6392\u5e8f\n\tfor(int i=1;i<=m;i++){\n\t\tint x=edge[i].x;\n\t\tint y=edge[i].y;\n\t\tif(find(x)!=find(y)){//\u5982\u679c\u672c\u4e0d\u4e92\u901a\n\t\t    unionn(x,y);\n\t\t\tans+=edge[i].w;\n\t\t\tcnt++;\n\t\t}\n\t\tif(cnt==n-1){//\u5df2\u7ecf\u6ee1\u8db3\u5efa\u6811\u7684\u8981\u6c42\uff1a\u8fb9\u6570\u7b49\u4e8e\u70b9\u6570\u51cf\u4e00\n\t\t\treturn;\n\t\t}\n\t}\n\treturn;\n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n\t    cin>>edge[i].x>>edge[i].y>>edge[i].w;\n\t}\n\tkruskal();\n\tcout<<ans;\n\treturn 0;\n}//\u5b8c\u7ed3\u6492\u8349~\n```\n",
        "postTime": 1625984128,
        "uid": 248359,
        "name": "Cloote",
        "ccfLevel": 0,
        "title": "B3603\u9898\u89e3"
    },
    {
        "content": "\u6700\u77ed\u6811\uff0c\u53c8\u53eb\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u662f\u6240\u9009\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\uff0c\u6bd4\u8f83\u7b80\u5355\u7684\u7b97\u6cd5\u662f kruskal \u7b97\u6cd5\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u5f20\u65e0\u5411\u56fe\u6765\u8bf4\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b\u8fb9\u6743\u6700\u5c0f\u7684\u90a3\u6761\u8fb9\u3002\n\n\u6bd4\u5982\u6837\u4f8b\u7684\u8fd9\u5f20\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/imlbvf2h.png)\n\n\u4e00\u5b9a\u5305\u542b\u8fb9\u6743\u4e3a $0$ \u7684\u90a3\u6761\u8fb9\u3002\n\n\u6b64\u65f6\u8282\u70b9 $2,3$ \u8fde\u5728\u4e00\u8d77\u4e86\uff0c\u6211\u4eec\u5c06\u4ed6\u4eec\u5408\u5e76\uff0c\u5c06\u8282\u70b9 $2,3$ \u770b\u505a\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gbq5kw7s.png)\n\n\u6b64\u65f6 $1,3$ \u95f4\u6709\u4e24\u6761\u8fb9\uff0c\u6211\u4eec\u5f53\u7136\u9009\u62e9\u8fb9\u6743\u5c0f\u7684\u90a3\u6761\uff0c\u518d\u8fdb\u884c\u5408\u5e76\u3002\n\n\u6211\u4eec\u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4ece\u5c0f\u7684\u5f00\u59cb\u9009\uff0c\u50cf\u521a\u624d\u4e00\u6837\u4e00\u76f4\u5408\u5e76\u4e0b\u53bb\uff0c\u5f97\u5230\u7684\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002\n\n\u4f46\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u6761\u8fb9\u8fde\u5728\u5df2\u7ecf\u5408\u5e76\u5b8c\u7684\u4e24\u4e2a\u8282\u70b9\u4e2d\u600e\u4e48\u529e\u5462\uff1f\n\n\u8fd9\u63d0\u9192\u6211\u4eec\u4f7f\u7528**\u5e76\u67e5\u96c6**\u3002\n\n\u7136\u540e\u6211\u4eec\u7b97\u6cd5\u7684\u4e3b\u4f53\u5c31\u51fa\u6765\u4e86\uff1a\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u904d\u5386\u6bcf\u6761\u8fb9\uff0c\u5f53\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u6761\u8fb9\uff0c\u540c\u65f6\u4e5f\u7528\u5e76\u67e5\u96c6\u67e5\u8be2\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\u5728\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5982\u679c\u4e0d\u5728\u5c31\u8fdb\u884c\u5408\u5e76\uff0c\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(m\\log m)$\u3002\n\nCode\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint fa[5010];\nint n,m;\nstruct Edge{\n\tint u,v,value;\n\tbool operator < (const Edge rhs)const{\n\t\treturn value<rhs.value;\n\t}\n}edge[200000];\nint find_root(int x){\n\treturn x==fa[x]?x:fa[x]=find_root(fa[x]);\n}\nint main(){\n\tint sum=0;\n\tcin>>n>>m;\n\tfor(int i=0;i<m;++i)\n\t\tcin>>edge[i].u>>edge[i].v>>edge[i].value;\n\tfor(int i=0;i<=n;++i)\n\t\tfa[i]=i;\n\tsort(edge,edge+m);\n\tint cnt=n;\n\tfor(int i=0;i<=m;++i){\n\t\tint a=find_root(edge[i].u),b=find_root(edge[i].v);\n\t\tif(a!=b){\n\t\t\tfa[a]=b;\n\t\t\tcnt--;\n\t\t\tsum+=edge[i].value;\n\t\t}\n\t}\n\tcout<<sum;\n\treturn 0;\n}\n```",
        "postTime": 1625285554,
        "uid": 164302,
        "name": "endless_loop",
        "ccfLevel": 0,
        "title": "B3603 \u9898\u89e3"
    },
    {
        "content": "## \u9898\u89e3\u7d22\u5f15\n1. **\u9898\u76ee\u5927\u610f**\n2. **Solution**\n3. **AC code**\n4. **\u7c7b\u4f3c\u9898\u578b**\n\n\u4ee3\u7801\u7c7b\u578b\uff1a C++\uff08cpp\uff09\n\n\u662f\u5426\u5438\u6c27\uff1a\u5426\n\n\u4e0d\u538b\u884c\u4ee3\u7801\u957f\u5ea6\uff1a41\n\n------------\n\n\u672c\u9898\u89e3\u4f7f\u7528 Kruskal \u7b97\u6cd5\uff0c\u4e0d\u4e86\u89e3\u7684\u53ef\u4ee5 [\u6233\u8fd9\u91cc](https://www.luogu.com.cn/blog/wugu-2333/wu-gu-bo-ke-suo-yin) \uff0c\u5bfb\u627e\u6700\u5c0f\u751f\u6210\u6811\u6709\u5173\u77e5\u8bc6\u3002\n\n## \u9898\u76ee\u5927\u610f\n\u9898\u9762\uff1a [<\u4f20\u9001\u95e8>](https://www.luogu.com.cn/problem/B3603)\n\n\u9898\u610f\uff1a\u7ed9\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684 **\u65e0\u5411\u56fe** \uff0c\u6c42\u8fd9\u4e2a\u56fe\u4e0a\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\uff08\u5e76\u4e0d\u77e5\u9053\u9898\u9762\u4e2d\u7684\u201c\u6700\u5c0f\u6811\u201d\u7684\u8bf4\u6cd5\u662f\u54ea\u6765\u7684\u2026\u2026\uff09\u3002\n\n~~\u672f\u8bed\u7406\u89e3\uff1a\u6700\u5c0f\u751f\u6210\u6811\u677f\u5b50\u9898\u3002~~\n\n## Solution\n\n\u56e0\u4e3a\u662f\u7a00\u758f\u56fe\uff0c\u9009\u7528 Kruskal \u3002\n\n### Kruskal\n\n#### \u4e00\u3001\u4e2d\u5fc3\u601d\u60f3\n\n------------\n\n\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u4ece\u5927\u5230\u5c0f\u3002\n\n\u6bcf\u6761\u8fb9\u90fd\u8dd1\u4e00\u904d\uff08\u5f53\u7136\uff0c\u5982\u679c\u5f53\u524d\u5df2\u7ecf\u6709\u4e86 $n-1$ \u6761\u8fb9\u90a3\u4e48\u5c31\u8df3\u51fa\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u9996\u5148\u5224\u65ad\u5176\u8fde\u7740\u7684\u4e24\u4e2a\u70b9\u4e0e\u6b63\u5728\u6784\u6210\u7684\u6700\u5c0f\u751f\u6210\u6811\u662f\u5426\u5df2\u7ecf\u8fde\u901a\uff0c\u5982\u679c\u4e24\u4e2a\u90fd\u5df2\u7ecf\u8fde\u901a\u5219\u8df3\u8fc7\u6b64\u8fb9\uff0c\u5426\u5219\u4f7f\u6700\u5c0f\u751f\u6210\u6811\u8fde\u901a\u6b64\u8fb9\u3002\n\n------------\n\n#### \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\n\n1. \u6392\u5e8f\u90e8\u5206\u4ea4\u7ed9 `sort` \u5373\u53ef\uff0c\u5199\u4e2a\u81ea\u5b9a\u4e49\u51fd\u6570 `cmp` \u6765\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u6392\u5e8f\u65b9\u5f0f\u3002\n\n```cpp\nbool cmp(Edge a,Edge b){return a.w<b.w;}\n```\n\n\u8fb9\u6743\u662f **\u5411\u5c0f\u6392\u5e8f** \uff01\n\n2. \u94fe\u5f0f\u524d\u5411\u661f\u90e8\u5206\n\n\u56e0\u4e3a Kruskal \u4e0d\u9700\u8981\u5b58\u90bb\u8fb9\uff0c\u4f46\u9700\u8981\u5b58\u8d77\u59cb\u70b9\uff0c\u4e8e\u662f\u94fe\u5f0f\u524d\u5411\u661f\u6539\u6210\uff1a\n\n```cpp\nstruct Edge{\n    int from,to,w;\n}edge[MAXM];\n```\n\n3. Kruskal \u4e2d\u7684\u5224\u65ad\u4e00\u6761\u8fb9\u4e24\u4e2a\u7aef\u70b9\u662f\u5426 **\u90fd** \u88ab\u6700\u5c0f\u751f\u6210\u6811\u8fde\u901a\u90e8\u5206\n\n\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u6210\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u5b9e\u73b0\u3002\n\n```cpp\nint findf(int u){return f[u]==u?u:f[u]=findf(f[u]);}\n```\n\n\u81f3\u4e8e\u5408\u5e76\uff0c\u6211\u4eec\u76f4\u63a5\u624b\u5199\uff08\u5728 Kruskal \u4e2d\u624b\u5199\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u80fd\u8fd8\u8981\u8fdb\u884c\u5176\u5b83\u64cd\u4f5c\uff08\u8fd9\u9053\u9898\u7684\u7279\u6b8a\u64cd\u4f5c\u662f\u6c42\u548c\uff09\n\n4. Kruskal \u90e8\u5206\uff08\u633a\u7b80\u5355\u7684\uff0c\u81ea\u5df1\u770b\u770b\u5c31\u4f1a\u4e86\uff09\n\n```cpp\nvoid kruskal(){\n    sort(edge+1,edge+m+1,cmp);\n    int num=0;\n    for(int i=1;i<=m;i++){\n        if(num==n-1)break;\n        int from=edge[i].from,to=edge[i].to,w=edge[i].w;\n        int from_father=findf(from),to_father=findf(to);\n        if(from_father==to_father)continue;\n        f[from_father]=to_father;\n        ans+=w;\n        num++;\n    }\n}\n```\n\n5. \u5efa\u8fb9\u90e8\u5206\uff08\u7ec6\u8282\uff09\n\nQ\uff1a\u4e3a\u5565\u5efa\u5355\u5411\u8fb9\uff1f\u9898\u76ee\u4e2d\u4e0d\u662f\u8bf4\u5efa\u65e0\u5411\u8fb9\u5417\uff1f\n\nA\uff1a\u7531\u4e8e Kruskal \u6392\u5e8f\u7684\u95ee\u9898\uff0c\u7531\u4e8e\u65e0\u5411\u8fb9\u5728\u94fe\u5f0f\u524d\u5411\u661f\u4e2d\u662f\u4ee5\u4e24\u6761\u6709\u5411\u8fb9\u7684\u5f62\u5f0f\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u540c\u4e00\u6761\u8fb9\u5728 Kruskal \u7684\u6392\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u540c\u65f6\u6392\u5728\u524d\u9762\uff08\u56e0\u4e3a\u5728\u94fe\u5f0f\u524d\u5411\u661f\u4e2d\u65e0\u5411\u8fb9\u6240\u5316\u6210\u7684\u4e24\u6761\u6709\u5411\u8fb9\u7684\u8fb9\u6743\u662f\u76f8\u540c\u7684\uff09\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u539f\u672c\u9009 $n-1$ \u6761\u8fb9\uff0c\u5374\u9009\u4e86\u597d\u51e0\u6761\u4e00\u6837\u7684\u8fb9\uff0c\u662f\u80af\u5b9a\u9519\u8bef\u7684\u3002\n\nQ\uff1a\u5199\u4e2a\u53bb\u91cd\u51fd\u6570\u4e0d\u884c\u5417\uff1f\n\nA\uff1a\u8fd9\u4e2a\u95ee\u9898\u6211\u4e5f\u60f3\u8fc7\uff0c\u53ef\u6211\u6d4b\u8bd5\u7684\u65f6\u5019\u53d1\u73b0\u7ed3\u6784\u4f53\u597d\u50cf\u4e0d\u80fd\u53bb\u91cd\uff08\u53ef\u80fd\u6211\u592a\u5f31\u4e86\uff09\u3002\u5c31\u7b97\u80fd\u53bb\u91cd\uff0c\u4f60\u60f3\u60f3\uff0c\u4f60\u524d\u9762\u521a\u91cd\u590d\u52a0\u8fb9\uff0c\u540e\u9762\u63a5\u7740\u53bb\u91cd\uff0c\u8fd9\u4e0d\u662f\u591a\u6b64\u4e00\u4e3e\u5417\uff1f\n\n## AC code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<stack>\nusing namespace std;\nconst int MAXM=6e4+9,MAXN=2e3+9;\nstruct Edge{\n    int from,to,w;\n}edge[MAXM];\nint n,m;\nint num_edge=0,f[MAXN];\nvoid add_edge(int from,int to,int w){\n    edge[++num_edge]=(Edge){from,to,w};\n}long long ans=0;\nbool cmp(Edge a,Edge b){return a.w<b.w;}\nint findf(int u){return f[u]==u?u:f[u]=findf(f[u]);}\nvoid kruskal(){\n    sort(edge+1,edge+m+1,cmp);\n    int num=0;\n    for(int i=1;i<=m;i++){\n        if(num==n-1)break;\n        int from=edge[i].from,to=edge[i].to,w=edge[i].w;\n        int from_father=findf(from),to_father=findf(to);\n        if(from_father==to_father)continue;\n        f[from_father]=to_father;\n        ans+=w;\n        num++;\n    }\n}\nint main(){\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=n;i++)f[i]=i;\n    for(int i=1;i<=m;i++){\n        int u,v,w;\n        scanf(\"%d %d %d\",&u,&v,&w);\n        add_edge(u,v,w);\n    }kruskal();\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n\nAC \u8bb0\u5f55[<\u4f20\u9001\u95e8>](https://www.luogu.com.cn/record/54269237)\n\n## \u7c7b\u4f3c\u9898\u578b\n\n[P1396 \u8425\u6551](https://www.luogu.com.cn/problem/P1396)\n\n~~\u6700\u5c0f\u751f\u6210\u6811\u5b66\u4f1a\u4e86\uff0c\u6765\u5b66[\u6b21\u5c0f\u751f\u6210\u6811](https://www.luogu.com.cn/blog/wugu-2333/ci-xiao-sheng-cheng-shu)~~",
        "postTime": 1627308891,
        "uid": 359422,
        "name": "\u65e0\u5495_",
        "ccfLevel": 4,
        "title": "B3603 [\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 301] \u6700\u77ed\u6811\u95ee\u9898_1 \u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\u7b80\u8ff0\n\n\u4e0d\u77e5\u9053\u8fd9\u4e2a\u6700\u5c0f\u6811\u662f\u54ea\u91cc\u7684\u8bf4\u6cd5......\u8fd9\u9053\u9898\u5c31\u662f\u8ba9\u6211\u4eec\u627e\u6700\u5c0f\u751f\u6210\u6811\n\n## \u601d\u8def\u7b80\u6790\n\n\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5373 $n$ \u4e2a\u70b9\uff0c\u7528 $n-1$ \u6761\u8fb9\u8fde\u4e0a\u5b83\u4eec\uff08\u6ca1\u6709\u73af\uff09\uff0c\u6784\u6210\u4e00\u4e2a\u8fb9\u6743\u503c\u603b\u548c\u6700\u5c0f\u7684\u6811\u3002\n\n\u5728\u8fd9\u7bc7\u9898\u89e3\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8f83\u4e3a\u7b80\u5355\u7684 Kruskal \u7b97\u6cd5\u6765\u89e3\u8fd9\u9053\u9898\u3002\n\n## \u6b63\u9898\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n1.\u5e76\u67e5\u96c6\u3002\n\n2.\u6811\u7684\u4e00\u4e9b\u6027\u8d28\u3002\n\n3.\u8d2a\u5fc3\u3002\n\nKruskal \u7b97\u6cd5\u4f7f\u7528\u7684\u662f\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u5728\u5b58\u5165\u8fb9\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7528\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4f18\u5148\u8fde\u8fb9\u6743\u8f83\u5c0f\u7684\u8fb9\uff0c\u5177\u4f53\u8fc7\u7a0b\u5982\u4e0b\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/xmta5efq.png)\n\n\u4e0a\u8ff0\u7684\u95ee\u9898\u90fd\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u5728\u5efa\u6811\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u95ee\u9898\u3002\n \n- 1.\u5982\u4f55\u4fdd\u8bc1\u8fde\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e0d\u5728\u4e00\u4e2a\u8054\u901a\u5757\u4e0a\uff1f\uff08\u6811\u7684\u5b9a\u4e49\u4e0d\u80fd\u51fa\u73b0\u73af\uff09\n\n- 2.\u5982\u4f55\u77e5\u9053\u6811\u5df2\u7ecf\u5efa\u6210\uff1f\n\n\u6211\u4eec\u4e00 \u4e00\u56de\u7b54\u4e0a\u9762\u7684\u95ee\u9898\n\n\u9996\u5148\uff0c\u786e\u4fdd\u8fde\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e0d\u5728\u4e00\u4e2a\u8054\u901a\u5757\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u4e00\u5f00\u59cb\u6240\u6709\u7684\u70b9\u7956\u5148\u90fd\u662f\u81ea\u5df1\uff0c\u5728\u8fde\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u4e24\u4e2a\u70b9\u5e76\u5230\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u5982\u679c\u5728\u8fde\u8fb9\u7684\u65f6\u5019\uff0c\u4e24\u4e2a\u70b9\u5df2\u7ecf\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u5c31\u4e0d\u518d\u8fde\u8fb9\u3002\n\n\u63a5\u4e0b\u6765\u5982\u4f55\u77e5\u9053\u6811\u5df2\u7ecf\u5efa\u6210\uff1f\u6211\u4eec\u56de\u60f3\u4e00\u4e0b\u6811\u7684\u6027\u8d28\uff0c\u5047\u5982\u6811\u6709 $n$ \u4e2a\u70b9\uff0c\u8fb9\u4e00\u5b9a\u53ea\u6709 $n-1$ \u6761\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5efa\u8fb9\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u5373\u53ef\u3002 \n \n## \u5177\u4f53\u5b9e\u73b0\n\n\u7b2c\u4e00\u6b65\uff0c\u5b58\u6240\u6709\u7684\u6570\u636e\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u5b58\u8f93\u5165\u7684\u8fb9\u3002\n\n```cpp\nstruct node\n{\n\tint x,y,t;//x\u8868\u793a\u4e00\u4e2a\u70b9\uff0cy\u8868\u793a\u53e6\u4e00\u4e2a\u70b9\uff0ct\u8868\u793a\u8fde\u63a5\u8fd9\u6761\u8fb9\u9700\u8981\u7684\u4ef7\u503c\uff08\u4e5f\u5c31\u662f\u6743\u503c\uff09\n}k[200005];\n```\n\n\n\n------------\n\n\n```cpp\nfor(register int i=1; i<=m;i++)\n{\n\tscanf(\"%d%d%d\",&k[i].x,&k[i].y,&k[i].t);\n}\n```\n\u63a5\u4e0b\u6765\u6211\u4eec\u6392\u5e8f\u7ed3\u6784\u4f53\uff0c\u628a\u6743\u503c\u6700\u5c0f\u7684\u8fde\u8fb9\u653e\u5728\u6570\u7ec4\u7684\u524d\u9762\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u751f\u6210\u6811\u4e2d\u7684\u8fb9\u6743\u503c\u603b\u548c\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u3002\n\n```cpp\ninline bool cmp(node a,node b)\n{\t\n\treturn a.t<b.t;//\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n}\n\n\nsort(k+1,k+m+1,cmp);//\u4f7f\u7528STL\u4e2d\u7684sort\u8db3\u77e3\n```\n\n\u63a5\u4e0b\u6765\u662f\u7a0b\u5e8f\u7684\u4e3b\u4f53\uff0c\u5373\u5efa\u6811\u7684\u73af\u8282\u3002\n\n```cpp\n\ninline int find(int x)//\u8def\u5f84\u538b\u7f29\u5e76\u67e5\u96c6\u67e5\u627e\n{\n\tif(f[x]==x) return f[x]//\u5982\u679c\u7956\u5148\uff08\u7236\u4eb2\uff09\u662f\u81ea\u5df1\uff0c\u8bf4\u660e\u7956\u5148\u5df2\u7ecf\u627e\u5230;\n\treturn f[x]=find(f[x]);//\u5728\u5bfb\u627e\u7956\u5148\u7684\u65f6\u5019\u987a\u4fbf\u628a\u73b0\u5728\u67e5\u627e\u5230\u7684\u70b9\u7684\u7236\u4eb2\u76f4\u63a5\u8bbe\u6210\u7956\u5148\uff08\u8def\u5f84\u538b\u7f29\uff09\n}\n\n\n\tint now=0;//\u73b0\u5728\u6240\u5efa\u8fb9\u7684\u6743\u503c\u603b\u6570\n\tfor(register int i=1; i<=m;i++)\n\t{\n\t\tif(n==1)//\u8fd9\u91cc\u9700\u8981\u7406\u89e3\u4e00\u4e0b\uff0c\u5f53\u8054\u901a\u5757\u7684\u6570\u91cf\u964d\u4e3a1\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u5df2\u7ecf\u5efa\u597d\u4e86\u6811\uff0c\u76f4\u63a5\u8f93\u51fa\u9000\u51fa\u5373\u53ef\uff08\u81ea\u5df1\u753b\u4e2a\u6811\u8bd5\u8bd5\uff0c\u8fb9\u6570\u4e00\u5b9a\u662f\u8282\u70b9\u6570-1\uff09\n\t\t{\n\t\t\tcout<<now;\n\t\t\treturn 0;\n\t\t}\n\t\tint f1=find(k[i].x),f2=find(k[i].y);//\u770b\u8fd9\u4fe9\u8282\u70b9\u662f\u5426\u8fde\u901a\n\t\tif(f1!=f2) //\u5982\u679c\u4e0d\u8fde\u901a\n\t\t{\n\t\t\tf[f1]=f[f2];//\u8ba9\u4ed6\u4fe9\u8fde\u901a\n\t\t\tnow+=k[i].t;//\u6743\u503c++\n\t\t\tn--;//\u8fde\u901a\u5757--\n\t\t}\n\t\telse continue;\n\t}\n```\n\n## Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint f[200005];\ninline int find(int x)\n{\n\tif(f[x]==x) return f[x];\n\treturn f[x]=find(f[x]);\n}\nstruct node\n{\n\tint x,y,t;\n}k[200005];\ninline bool cmp(node a,node b)\n{\n\treturn a.t<b.t;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(register int i=1; i<=n;i++) f[i]=i;\n\tfor(register int i=1; i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&k[i].x,&k[i].y,&k[i].t);\n\t}\n\tsort(k+1,k+m+1,cmp);\n\tint now=0;\n\tfor(register int i=1; i<=m;i++)\n\t{\n\t\tif(n==1)\n\t\t{\n\t\t\tcout<<now;\n\t\t\treturn 0;\n\t\t}\n\t\tint f1=find(k[i].x),f2=find(k[i].y);\n\t\tif(f1!=f2) \n\t\t{\n\t\t\tf[f1]=f[f2];\n\t\t\tnow+=k[i].t;\n\t\t\tn--;\n\t\t}\n\t\telse continue;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1626827246,
        "uid": 358779,
        "name": "Waaifu_D",
        "ccfLevel": 4,
        "title": "B3603 [\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 301] \u6700\u77ed\u6811\u95ee\u9898_1 \u9898\u89e3"
    },
    {
        "content": "### \u9898\u610f\uff1a\n\u9898\u4e2d\u6240\u8c13\u201c\u6700\u77ed\u6811\u201d\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u6700\u5c0f\u751f\u6210\u6811\u201d\uff0c\u6307\u5728\u4e00\u5f20\u8fde\u901a\u56fe\u4e2d\u6c42\u51fa\u80fd\u591f\u8fde\u63a5\u6240\u6709\u7ed3\u70b9\u7684\u6700\u5c0f\u8fb9\u6743\u4e4b\u548c\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u6700\u5c0f\u7684\u4ee3\u4ef7\u4f7f\u8fd9\u4e2a\u56fe\u8fde\u901a\u3002\n\n\u4e00\u822c\u7528\u4e24\u79cd\u7b97\u6cd5 Kruskal \u6216\u8005 Prim \u6765\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n- Kruskal \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(E\\log E)$\uff08E \u4e3a\u56fe\u7684\u8fb9\u6570\uff09\uff0c\u9002\u5408\u6c42\u89e3\u7a00\u758f\u56fe\uff08\u8fb9\u7684\u6761\u6570 E \u8fdc\u5c0f\u4e8e\u7ed3\u70b9\u6570 V \u7684\u5e73\u65b9\uff09\u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n- Prim \u7b97\u6cd5\u4e0d\u52a0\u4f18\u5316\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(V^2)$\uff08V \u4e3a\u56fe\u7684\u9876\u70b9\u6570\uff09\uff0c\u9002\u5408\u6c42\u89e3\u7a20\u5bc6\u56fe\uff08\u8fb9\u7684\u6761\u6570 E \u63a5\u8fd1\u4e8e\u7ed3\u70b9\u6570 V \u7684\u5e73\u65b9\uff09\u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u663e\u7136\u5728\u672c\u9898\u4e2d\u66f4\u9002\u5408\u4f7f\u7528 Kruskal \u7b97\u6cd5\uff0c\u5728\u4ee3\u7801\u65b9\u9762\u4e5f\u662f Kruskal \u76f8\u5bf9\u7b80\u5355\u3002\n\n### \u601d\u8def\uff1a\n\u9996\u5148\u7b80\u5355\u8bb2\u89e3\u4e00\u4e0b\u6211\u4eec\u4f7f\u7528\u7684 Kruskal \u7b97\u6cd5\u3002\n\nKruskal \u662f\u4e00\u79cd\u57fa\u4e8e\u5e76\u67e5\u96c6\u7684\u8d2a\u5fc3\u65b9\u6cd5\u3002\n\n1. \u5c06\u8f93\u5165\u7684\u8fb9\u6743\u8fdb\u884c\u6392\u5e8f\u3002\n2. \u4ece\u5c0f\u5230\u5927\u987a\u6b21\u8fde\u63a5\u8fd9\u4e9b\u8fb9\uff0c\u5c06\u5df2\u7ecf\u8054\u901a\u7684\u7ed3\u70b9\u653e\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u5f53\u4e2d\u3002\n3. \u5982\u679c\u8fd9\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u9876\u70b9\u5df2\u7ecf\u5728\u8fd9\u4e2a\u5e76\u67e5\u96c6\u5f53\u4e2d\uff0c\u8bf4\u660e\u8fd9\u6761\u8fb9\u53ef\u4ee5\u4e0d\u8fde\uff0c\u4fbf\u8df3\u8fc7\u8fd9\u6761\u8fb9\u3002\n4. \u5f53\u6240\u6709\u7ed3\u70b9\u90fd\u8fdb\u5165\u5e76\u67e5\u96c6\u65f6\uff0c\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u5b8c\u6210\uff0c\u8df3\u51fa\u5faa\u73af\u3002\n\n--------------------\u5206\u5272\u7ebf--------------------\n\n\u9898\u4e2d\u8bf4\u8981\u5f00 `long long`\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u636e\u592a\u6c34\uff0c\u6240\u4ee5\u4e0d\u5f00\u4e5f\u53ef\u4ee5\u8fc7\u3002\n\n### \u7a0b\u5e8f\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>//\u9700\u8981\u4f7f\u7528sort\u8fdb\u884c\u6392\u5e8f\nusing namespace std;\nstruct dy{int x,y,z;}a[3001];//\u5b58\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\nint n,m,k,ans,father[2001];\nbool cmp(dy a,dy b){return a.z<b.z;}//\u6309\u7167\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f\nint find(int x){//\u7528\u6765\u67e5\u8be2\u4e24\u4e2a\u8282\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u4e2d\n    if(father[x]!=x)father[x]=find(father[x]);\n    return father[x];\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].z);\n    for(int i=1;i<=n;i++)father[i]=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n    sort(a+1,a+m+1,cmp);//\u5c06\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\n    for(int i=1;i<=m;i++){\n        int fx=find(a[i].x),fy=find(a[i].y);\n        if(fx!=fy){//\u5982\u679c\u4e24\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u4e2d\n            father[fy]=fx;//\u5c06\u5b83\u4eec\u5408\u5e76\u81f3\u540c\u4e00\u4e2a\u96c6\n            k++;//\u8fdb\u5165\u8fd9\u4e2a\u96c6\u7684\u7ed3\u70b9\u6570\u589e\u52a0\n            ans+=a[i].z;//\u751f\u6210\u6811\u7684\u5927\u5c0f\u589e\u52a0\n        }\n        if(k==n-1)break;//\u5982\u679c\u9664\u6e90\u70b9\u5916\u6240\u6709\u7ed3\u70b9\u90fd\u5df2\u7ecf\u8fdb\u5165\u5e76\u67e5\u96c6\u4e2d\uff0c\u8df3\u51fa\u5faa\u73af\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n### THE END",
        "postTime": 1626769410,
        "uid": 299883,
        "name": "HYdroKomide",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 B3603"
    },
    {
        "content": "\u6b64\u9898\u6570\u636e\u8303\u56f4 Kruskal \u53ef\u4ee5\u901a\u8fc7\uff0c\u56e0\u6b64\u53ea\u5728\u6b64\u5904\u8bb2\u89e3 Kruskal \u7b97\u6cd5\uff0c\u5982\u9700 Prim \u7b97\u6cd5\u7684\u5185\u5bb9\uff0c\u79fb\u6b65 [\u3010\u666e\u53ca\u3011\u6700\u5c0f\u751f\u6210\u6811\u7b14\u8bb0](https://www.luogu.com.cn/blog/LinearExpectation/easy-MST-note)\u3002\n\n------\n\n## \u6982\u5ff5\n\n\u6700\u5c0f\u751f\u6210\u6811\u662f\u65e0\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\uff0c\u63cf\u8ff0\u5982\u4e0b\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u53ef\u4ee5\u5220\u53bb\u4e00\u4e9b\u8fb9\uff0c\u95ee\u5e94\u8be5\u4fdd\u7559\u54ea\u4e9b\u8fb9\u80fd\u4f7f\u5f97\u56fe\u4f9d\u7136\u8fde\u901a\uff0c\u5e76\u4e14\u8fb9\u6743\u548c\u6700\u5c0f\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u751f\u6210\u51fa\u6765\u7684\u6811\uff08\u4e3a\u4ec0\u4e48\u662f\u6811\uff1f\u56e0\u4e3a\u4fdd\u7559 $n-1$ \u6761\u8fb9\u65f6\u6700\u7701\uff0c\u4f46\u51e1\u591a\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u6709\u4e00\u6761\u8fb9\u662f\u591a\u4f59\u7684\uff0c\u4ed6\u5c31\u4e0d\u6ee1\u8db3\u6700\u5c0f\u8fb9\u6743\u548c\u4e86\uff09\u79f0\u4e4b\u4e3a\u6700\u5c0f\u751f\u6210\u6811\uff08$\\small\\bm{Minimal\\ Spanning\\ Tree,MST}$\u3002\n\n## \u601d\u8def\u5f15\u5bfc\n\n\u300a\u7b97\u6cd5\u7ade\u8d5b\u4ece\u5165\u95e8\u5230\u8fdb\u9636\u300b\u4e2d\u7684\u4e00\u6bb5\u8bdd\u7279\u522b\u5177\u6709\u542f\u53d1\u6027\uff1a\n\n> \u56fe\u7684\u4e24\u4e2a\u57fa\u672c\u5143\u7d20\u662f\u70b9\u548c\u8fb9\uff0c\u4e8e\u6b64\u5bf9\u5e94\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811 $T$\u3002\u8fd9\u4e24\u79cd\u7b97\u6cd5\u90fd\u57fa\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u56e0\u4e3a MST \u95ee\u9898\u6ee1\u8db3\u8d2a\u5fc3\u6cd5\u7684\u201c\u6700\u4f18\u6027\u5b9a\u7406\u201d\uff0c\u5373\u5168\u5c40\u6700\u4f18\u5305\u542b\u5c40\u90e8\u6700\u4f18\u3002\n\n\u4e24\u79cd\u7b97\u6cd5\u662f $\\rm\\small Prim$ \u548c $\\small\\rm Kruskal$ \u7b97\u6cd5\u3002\u5176\u4e2d $\\rm\\small Prim$ \u7b97\u6cd5\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u601d\u60f3\uff1a\u201c\u6700\u8fd1\u7684\u90bb\u5c45\uff08\u8282\u70b9\uff09\u4e00\u5b9a\u5728 MST \u4e0a\u3002\u201d\uff0c\u4e8e\u6b64\u76f8\u5bf9\u5730\uff0c$\\rm\\small Kruskal$ \u7684\u57fa\u672c\u601d\u60f3\u662f\u201c\u6700\u77ed\u7684\u8fb9\u4e00\u5b9a\u5728 MST \u4e0a\u201d\u3002\n\n\u4ece\u8fd9\u91cc\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684 MST \u7b97\u6cd5\uff0c\u5f97\u5230\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e00\u6837\u561b\uff1f\u8bf4\u4e0d\u51c6\uff0c\u56e0\u4e3a MST \u5728\u6709\u4e9b\u56fe\uff08\u5f88\u591a\u56fe\uff09\u4e0a\u662f\u4e0d\u552f\u4e00\u7684\uff0c\u4e8e\u662f\u4f60\u4f1a\u5f97\u51fa\u4e24\u4e2a\uff08\u751a\u81f3\u66f4\u591a\uff09\u4e0d\u540c\u7684\uff08\u4f46\u662f\u603b\u8fb9\u6743 $\\sum w$ \u76f8\u540c\u7684\uff09\u7b54\u6848\u3002\u4f46\u662f\u6d1b\u8c37\u7684\u4f8b\u9898\u5c31\u7279\u522b\u826f\u5fc3\uff0c\u53ea\u8ba9\u4f60\u8f93\u51fa\u603b\u8fb9\u6743\uff0c\u4e8e\u662f\u4f60\u53ef\u4ee5\u9009\u62e9\u4f60\u7528\u5f97\u987a\u624b\u7684\u7b97\u6cd5\u3002\n\n\u6211\u4eec\u9996\u5148\u4ece\u6bd4\u8f83\u7b80\u5355\u7684 Kruskal \u8bb2\u5427\u3002\n\n## Kruskal \u514b\u9c81\u65af\u5361\u5c14\n\n\u6211\u4eec\u8981\u987a\u6b21\u9009\u53d6\u8fb9\u6743\u6700\u77ed\u7684\u8fb9\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u7528\u4e00\u79cd\u8f83\u4e3a\u6734\u7d20\u7684\u5b58\u8fb9\u65b9\u5f0f\uff0c\u5373\u201c\u76f4\u63a5\u5b58\u8fb9\u201d\u3002\u8fd9\u4e2a\u5b58\u8fb9\u65b9\u5f0f\u5728\u666e\u901a Bellman-Ford \u4e2d\u4e5f\u6709\u5e94\u7528\uff0c\u53ef\u4ee5\u53bb\u590d\u4e60\u4e00\u4e0b\u54e6\u3002\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u7528 $\\rm\\small STL$ \u4e2d\u7684 $\\rm\\small sort$ \u628a\u4e00\u5171\u7684 $m$ \u6761\u8fb9\u5168\u90e8\u90fd\u6392\u5e8f\u597d\u4e86\u3002\u73b0\u5728\u6211\u4eec\u9700\u8981\u52a0\u5165\u7b2c\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u52a0\u5165\u7b2c\u4e8c\u6761\u8fb9\uff0c\u7136\u540e\u52a0\u5165\u7b2c\u4e09\u6761\u8fb9\uff0c\u7136\u540e\u52a0\u5165\u2026\u2026\u7b49\u7b49\uff0c\u8fd9\u4e48\u52a0\u4e0b\u53bb\u4e0d\u662f\u6240\u6709\u8fb9\u53c8\u52a0\u56de\u6765\u4e86\u5417\uff1f\uff01\n\n\u5f53\u7136\u4e0d\u884c\uff0c\u6211\u4eec\u53ea\u8981\u52a0\u5165\u6709\u7528\u7684\u8fb9\u3002\u4ec0\u4e48\u6837\u7684\u8fb9\u662f\u6ca1\u6709\u7684\u5462\uff1f\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\u4f1a\u5f62\u6210\u5708\u7684\u8fb9\u3002\u56e0\u4e3a\u5982\u679c\u5f62\u6210\u4e86\u4e00\u4e2a\u5708\uff0c\u90a3\u4e48\u4f60\u8fde\u4e0a\u7684\u8fd9\u4e2a\u8282\u70b9\u5c31\u5fc5\u7136\u5df2\u7ecf\u662f\u8fde\u901a\u7684\uff0c\u8fd9\u6761\u8fb9\u6ca1\u6709\u8d77\u5230\u4f5c\u7528\uff0c\u6211\u4eec\u5e94\u8be5\u8981\u8df3\u8fc7\u4ed6\uff0c\u7136\u540e\u518d\u5224\u65ad\u4e0b\u4e00\u6761\u8fb9\u3002\n\n\u90a3\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u5224\u65ad\u662f\u5426\u5f62\u6210\u73af\u5462\uff1f\u7b54\u6848\u662f\u5e76\u67e5\u96c6\u3002\u201c\u5e76\u67e5\u96c6\u662f$\\rm\\small Kruskal$ \u7b97\u6cd5\u7684\u7edd\u914d\u201d\u8fd9\u53e5\u8bdd\u4e0d\u662f\u767d\u8bf4\u7684\uff0c\u6211\u4eec\u53ea\u8981\u6bcf\u6b21\u52a0\u5165\u8fb9\u7684\u65f6\u5019\uff08\u5047\u8bbe\u662f\u4e00\u6761 $u$ \u548c $v$ \u4e4b\u95f4\u7684\u8fb9\uff09\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u5e76\u67e5\u96c6\u4e2d\u7684 $v$ \u6307\u5411 $u$ \u7684\u6839\u8282\u70b9\uff0c\u5e76\u4e14\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u5373\u53ef\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u6574\u4e2a\u96c6\u5408\u7684\u7f16\u53f7\u662f\u7edf\u4e00\u7684\uff0c\u4e5f\u907f\u514d\u4e86\u4e00\u68f5\u6811\u9000\u5316\u6210\u4e00\u6761\u94fe\u3002\n\n\u53ea\u8981\u6211\u4eec\u53d1\u73b0\uff0c$v$ \u7684\u7956\u5148\u5df2\u7ecf\u662f $u$ \u7684\u7956\u5148\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4 $u$ \u548c $v$ \u662f**\u8fde\u901a\u7684**\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u8981\u8fd9\u6761\u8fb9\u2014\u2014\u4ed6\u662f\u65e0\u7528\u7684\u3002\u201c\u8fd9\u5176\u5b9e\u662f\u53d1\u73b0\u4e86\u4e00\u4e2a**\u5708**\uff0c\u5e76\u67e5\u96c6\u7684\u4f5c\u7528\u5c31\u4f53\u73b0\u5728\u8fd9\u91cc\u3002\u201d\n\n\u76f4\u5230\u7ecf\u8fc7\u4e86\u6240\u6709\u7684 $m$ \u6761\u8fb9\uff0c\u5c31\u53ef\u4ee5\u7ed3\u675f\u4e86\uff0c\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define MAXN 2000005\nusing namespace std;\nint fa[5005],n,m;\nstruct edge{\n\tint u,v,w;\n}e[MAXN];\nbool cmp(edge x,edge y){\n\treturn x.w<y.w;\n}int find(int k){//\u67e5\u8be2\u7956\u5148 \n    if(fa[k]==k)return k;\n    return fa[k]=find(fa[k]);\n}int kruskal(){\n\tint s=0;\n\tfor(int i=1;i<=n;i++)fa[i]=i;//\u521d\u59cb\u5316\u5e76\u67e5\u96c6 \n\tsort(e,e+m,cmp);\n\tfor(int i=0;i<m;i++){\n\t\tint u=find(e[i].u);\n\t\tint v=find(e[i].v);\n\t\tif(u==v)continue;//\u5982\u679c\u5df2\u7ecf\u8fde\u901a\uff0c\u5c31\u8df3\u8fc7\n\t\tfa[v]=u;s+=e[i].w;//\u52a0\u5165\u96c6\u5408\uff0c\u7b54\u6848\u7d2f\u8ba1 \n\t}return s;\n}signed main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=0;i<m;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\te[i].u=x;e[i].v=y;e[i].w=z;\n\t\te[i].u=y;e[i].v=x;e[i].w=z;\n\t}printf(\"%lld\",kruskal());\n\treturn 0;\n} \n```\n\n\u4ed6\u7684\u590d\u6742\u5ea6\u5305\u542b\u8fd9\u51e0\u4e2a\u90e8\u5206\uff1a\u5bf9\u8fb9\u8fdb\u884c\u6392\u5e8f $O(m\\log m)$\uff0c\u5e76\u67e5\u96c6\u4e0e\u904d\u5386\u6240\u6709\u8fb9 $O(m)$\uff0c\u5728\u6e10\u8fdb\u610f\u4e49\u4e0a\u662f $O(m\\log m)$\uff0c\u4f1a\u53d1\u73b0\u5728\u7a20\u5bc6\u56fe\u4e0a\u4ed6\u53d1\u6325\u5730\u4e0d\u4f1a\u90a3\u4e48\u597d\uff0c\u786e\u5b9e\uff0c\u7f16\u7801\u7b80\u5355\u7684\u7b97\u6cd5\u5f80\u5f80\u6709\u7740\u590d\u6742\u5ea6\u4e0d\u5c3d\u7406\u60f3\u7684\u95ee\u9898\uff0c\u9762\u5bf9\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5927\u7684\u9898\u76ee\uff0c\u6211\u4eec\u9700\u8981\u66f4\u4f18\uff08\u5374\u66f4\u96be\uff09\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u3002",
        "postTime": 1626279384,
        "uid": 212283,
        "name": "Aw\u987f\u987f",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011B3603 [\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 301] \u6700\u77ed\u6811\u95ee\u9898_1"
    }
]