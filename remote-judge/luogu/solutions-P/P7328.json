[
    {
        "content": "\u5148\u6062\u590d $m$\uff0c\u518d\u8ba1\u7b97\u7b54\u6848\u3002  \n\u9996\u5148\u63d2\u5165\u4e00\u4e2a $e=0,r=1$ \u5e76\u4e14\u5c06\u8f93\u5165\u7684 $e$ \u9012\u589e\u6392\u5e8f\u3002  \n\u8003\u8651\u4e24\u961f $(e_1,r_1,e_2,r_2)$ \u610f\u5473\u7740\u4ec0\u4e48\u3002  \n\n$$b^{e_1}\\equiv r_1\\pmod m\\wedge b^{e_2}\\equiv r_2\\pmod m\\implies r_1b^{e_2-e_1}-r_2=mk$$\n\n\u63d0\u53d6\u51e0\u4e2a\u6700\u5c0f\u7684 $e_2-e_1$\uff0c\u8ba1\u7b97\u51fa\u6765\u5bf9\u5e94 $mk$\uff0c\u6c42 gcd \u5373\u53ef\u6062\u590d $m$\u3002  \n$r_1b^{e_2-e_1}-r_2$ \u53ef\u4ee5\u88ab\u62bd\u8c61\u4e3a\u968f\u673a\u503c\uff1b\u4e24\u4e2a $O(n)$ \u7ea7\u522b\u7684\u968f\u673a\u6570\u7684 gcd \u63a5\u8fd1\u4e8e $O(\\log n)$\uff0c\u4e8e\u662f\u9700\u8981\u505a $O(\\log^*b^{\\frac{\\max e}{n}})$ \u6b21 gcd\uff1b\u603b\u5171\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\text{\u9ad8\u7cbe gcd}\\times\\log^*b^{\\frac{\\max e}{n}})=O(\\frac{\\max e}{n}\\log^2\\frac{\\max e}{n}\\log\\log\\frac{\\max e}{n}\\log^*\\frac{\\max e}{n})$\u3002",
        "postTime": 1611143131,
        "uid": 220037,
        "name": "w33z8kqrqk8zzzx33",
        "ccfLevel": 7,
        "title": "w33z Round 2 C"
    },
    {
        "content": "> *[P7328 \u300cMCOI-07\u300dDream and Machine Learning](https://www.luogu.com.cn/problem/P7328)*\n\n\u7ed9\u51fa\u4e00\u4e2a **\u4e0d\u4f9d\u8d56\u4e8e $b\\in \\{2, 3\\}$**\uff0c\u4e14\u4e0d\u592a\u4f9d\u8d56\u4e8e $n$ \u7684\u5927\u5c0f\u7684\u505a\u6cd5\u3002\n\n\u6ce8\u610f\u5230 $e_i$ \u968f\u673a\u7ed9\u51fa\uff0c\u6211\u4eec\u5c3d\u53ef\u80fd\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u3002\u540c\u65f6\uff0c\u6ce8\u610f\u5230\u82e5 $e_a + e_b = e_c + e_d$\uff0c\u5219 $r_ar_b\\equiv r_cr_d\\pmod m$\uff0c\u8fd9\u8bf4\u660e $r_ar_b - r_cr_d$ \u662f $m$ \u7684\u500d\u6570\u3002\n\n\u6211\u4eec\u6c42\u51fa\u82e5\u5e72\u7ec4\u8fd9\u6837\u7684 $a, b, c, d$\uff0c\u5e76\u5bf9\u6240\u6709 $|r_ar_b - r_cr_d|$ \u6c42 $\\gcd$ \u5373\u53ef\u5f97\u5230 $m$\u3002\u5269\u4e0b\u6765\u662f trivial \u7684\u3002\n\n\u7531\u4e8e $r_ar_b - r_cr_d$ \u4e3a $\\mathcal{O}(m ^ 2)$ \u7ea7\u522b\uff0c\u6240\u4ee5\u671f\u671b\u8fdb\u884c\u5f88\u5c11\u6b21 $\\gcd$ \u5373\u53ef\u5f97\u5230\u6b63\u786e\u7684 $m$\u3002\u5b9e\u9645\u6d4b\u8bd5\u4e2d\u53ea\u9700\u8981 $c = 10$ \u6b21\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u6c42\u51fa $a, b, c, d$\u3002\u5f88\u7ecf\u5178\u7684 meet-in-the-middle \u5957\u8def\u3002\u5728\u65f6\u95f4\u9650\u5236\u8303\u56f4\u5185\u5c06\u8db3\u591f\u591a\u7684 $(a, b)$ \u585e\u5165\u54c8\u5e0c\u8868\uff08\u8bbe\u4e3a $B$ \u4e2a\uff09\uff0ckey \u503c\u4e3a $e_a + e_b$\u3002\u76f4\u63a5\u679a\u4e3e $c, d$ \u5e76\u68c0\u67e5 $e_c + e_d$ \u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d\u51fa\u73b0\uff0c\u82e5\u51fa\u73b0\u4e14\u5bf9\u5e94\u7684 value $(a, b)\\neq (c, d)$\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21 gcd\u3002\u679a\u4e3e\u56db\u5143\u7ec4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u671f\u671b\u4e3a $c\\times \\dfrac {\\max e_i}{B}$\u3002\n\n\u7b14\u8005\u5b9e\u73b0\u540e\u53d1\u73b0\u65f6\u95f4\u74f6\u9888\u5728\u4e8e\u9ad8\u7cbe\u5ea6\u5feb\u901f\u5e42\uff0c\u5982\u679c\u4f7f\u7528 FFT \u4f18\u5316\u548c\u538b\u4f4d\u4f18\u5316\u5e94\u8be5\u80fd\u8dd1\u5f97\u66f4\u5feb\u3002\u6c42\u89e3 $m$ \u5e76\u4e0d\u662f\u74f6\u9888\u3002\n\n\u63a5\u4e0b\u6765\u8bf4\u8bf4\u8fd9\u4e2a\u505a\u6cd5\u76f8\u8f83\u4e8e std \u53ef\u4ee5\u6269\u5c55\u7684\u5730\u65b9\u3002\n\n\u9996\u5148\u5b83\u4e0d\u4f9d\u8d56\u4e8e $b$\uff0c\u6240\u4ee5\u8fd9\u4e2a $b$ \u53ef\u4ee5\u51fa\u5230 $\\mathcal{O}(m)$ \u7ea7\u522b\u3002\n\n\u5176\u6b21\uff0c\u5b83\u4e0d\u592a\u4f9d\u8d56\u4e8e $n$ \u7684\u7ea7\u522b\u3002\u5f53 $n$ \u53d8\u5c0f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u5c06\u8db3\u591f\u591a\u7684 $T$ \u5143\u7ec4\u6254\u8fdb\u54c8\u5e0c\u8868\uff0c\u5e76\u5728\u4e0e $n$ \u5f88\u5927\u65f6\u76f8\u540c\u7684\u590d\u6742\u5ea6\u5f97\u5230\u8db3\u591f\u591a\u7684 $2T$ \u5143\u7ec4\u6c42\u89e3 gcd\u3002\n\n\u552f\u4e00\u7684\u95ee\u9898\u5728\u4e8e\u8fd9\u4f1a\u4f7f\u5f97 $\\prod_{i\\in X} r_i - \\prod_{i\\in Y} r_i$ \u53d8\u5f97\u5f88\u5927\uff0c\u7ea7\u522b\u4e3a $\\mathcal{O}(m ^ T)$\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u5e76\u4e0d\u4e25\u91cd\uff0c\u56e0\u4e3a\u8fd9\u53ea\u7ed9\u590d\u6742\u5ea6\u4e58\u4e86\u5e38\u6570\uff0c\u6216\u8005\u8bf4\u7ed9\u6c42\u89e3 $m$ \u7684\u590d\u6742\u5ea6\u4e58\u4e0a\u4e86 $T ^ 3\\approx \\log_n ^ 3 \\max e_i$\uff08\u6c42\u89e3 $\\gcd$ \u7684\u6b21\u6570\u4e58\u4e0a $T$\uff0c\u4e58\u6cd5\u590d\u6742\u5ea6\u4e58\u4e0a $T ^ 2$\uff09\u3002\n\n\u7efc\u4e0a\uff0c\u672c\u9898\u53ef\u4ee5\u52a0\u5f3a\u81f3 $b$ \u4e3a\u4efb\u610f $m$ \u4ee5\u5185\u7684\u6570\uff0c$n = 100$\uff0c\u4e25\u683c\u4f18\u4e8e\u4f7f\u7528\u751f\u65e5\u6096\u8bba\u7684\u65b9\u6cd5\u3002\u800c\u4e14\u4e0d\u7b97\u96be\u5199\uff08\u9664\u4e86\u9ad8\u7cbe\u5ea6\u677f\u5b50\uff0c\u548c binary GCD\uff09\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 5;\nconst int L = 600;\nbool Mbe;\nstruct BigInt {\n\tint len;\n\tshort a[L];\n\tBigInt() {memset(a, 0, L << 1), len = 0;} // ADD len = 0\n\tvoid print() {if(len) for(int i = len - 1; ~i; i--) putchar(a[i] + '0'); putchar('\\n');}\n\tvoid read() {\n\t\tchar s = getchar();\n\t\twhile(!isdigit(s)) s = getchar();\n\t\twhile(isdigit(s)) a[len++] = s - '0', s = getchar();\n\t\treverse(a, a + len);\n\t}\n\tvoid flush() {\n\t\tlen += 2;\n\t\tfor(int i = 0; i < len; i++) a[i + 1] += a[i] / 10, a[i] %= 10;\n\t\twhile(len && !a[len - 1]) len--;\n\t}\n\tvoid shrink() {\n\t\tlen += 2;\n\t\tfor(int i = 0; i < len; i++) if(a[i] < 0) a[i + 1]--, a[i] += 10;\n\t\twhile(len && !a[len - 1]) len--;\n\t}\n\tbool operator < (BigInt rhs) {\n\t\tif(len != rhs.len) return len < rhs.len;\n\t\tfor(int i = len - 1; ~i; i--) if(a[i] != rhs.a[i]) return a[i] < rhs.a[i];\n\t\treturn 0;\n\t}\n\tBigInt operator + (BigInt rhs) {\n\t\tBigInt res;\n\t\tres.len = max(len, rhs.len);\n\t\tfor(int i = 0; i < res.len; i++) res.a[i] = a[i] + rhs.a[i]; // len -> res.len\n\t\tres.flush();\n\t\treturn res;\n\t}\n\tBigInt operator - (BigInt rhs) {\n\t\tBigInt res;\n\t\tres.len = max(len, rhs.len);\n\t\tfor(int i = 0; i < res.len; i++) res.a[i] = a[i] - rhs.a[i];\n\t\tres.shrink();\n\t\treturn res;\n\t}\n\tBigInt operator * (BigInt rhs) {\n\t\tBigInt res;\n\t\tres.len = len + rhs.len;\n\t\tfor(int i = 0; i < len; i++)\n\t\t\tfor(int j = 0; j < rhs.len; j++)\n\t\t\t\tres.a[i + j] += a[i] * rhs.a[j];\n\t\tres.flush();\n\t\treturn res;\n\t}\n\tBigInt operator * (int v) {\n\t\tBigInt res;\n\t\tres.len = len; // ADD THIS LINE\n\t\tfor(int i = 0; i < len; i++) res.a[i] = a[i] * v;\n\t\tres.flush();\n\t\treturn res;\n\t}\n\tBigInt operator / (int v) {\n\t\tBigInt res;\n\t\tres.len = len;\n\t\tint rem = 0;\n\t\tfor(int i = len - 1; ~i; i--) rem = rem * 10 + a[i], res.a[i] = rem / v, rem %= v;\n\t\twhile(res.len && !res.a[res.len - 1]) res.len--;\n\t\treturn res;\n\t}\n\tBigInt operator % (BigInt rhs) {\n\t\tBigInt rem;\n\t\tfor(int i = len - 1; ~i; i--) {\n\t\t\trem = rem * 10, rem.a[0] += a[i], rem.flush();\n\t\t\twhile(!(rem < rhs)) rem = rem - rhs;\n\t\t}\n\t\treturn rem;\n\t}\n} f[N], m, pw[32];\nBigInt gcd(BigInt x, BigInt y) {\n\tint pw = 0;\n\twhile(x.len && x.a[0] % 2 == 0 && y.len && y.a[0] % 2 == 0) pw++, x = x / 2, y = y / 2;\n\twhile(x.len && y.len) {\n\t\twhile(x.a[0] % 2 == 0) x = x / 2;\n\t\twhile(y.a[0] % 2 == 0) y = y / 2;\n\t\tif(x < y) swap(x, y);\n\t\tx = x - y;\n\t}\n\tif(x < y) swap(x, y);\n\twhile(pw--) x = x * 2;\n\treturn x;\n}\nint cnt = 20, b, n, q, e[N];\nmap <int, pair <int, int>> mp;\nmt19937 rnd(time(0));\nint rd(int l, int r) {return rnd() % (r - l + 1) + l;}\nBigInt ksm(int b) {\n\tBigInt s;\n\ts.len = s.a[0] = 1;\n\tint cnt = 0;\n\twhile(b) {\n\t\tif(b & 1) s = s * pw[cnt] % m;\n\t\tb >>= 1, cnt++;\n\t}\n\treturn s;\n}\nvoid solve() {\n\tpw[0].len = 1, pw[0].a[0] = b;\n\tfor(int i = 1; i < 30; i++) pw[i] = pw[i - 1] * pw[i - 1] % m;\n\twhile(q--) {\n\t\tint a;\n\t\tscanf(\"%d\", &a);\n\t\tksm(a).print();\n\t}\n\texit(0);\n}\nbool Med;\nint main() {\n\tfprintf(stderr, \"%.4lf\\n\", (&Med - &Mbe) / 1048576.0);\n\t// freopen(\"sample.in\", \"r\", stdin);\n\tcin >> b >> n >> q;\n\tfor(int i = 1; i <= n; i++) scanf(\"%d\", &e[i]), f[i].read();\n\tfor(int i = 1; i <= 1e5; i++) {\n\t\tint a = rd(1, n), b = rd(1, n);\n\t\tmp[e[a] + e[b]] = make_pair(a, b);\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= n; j++) {\n\t\t\tauto it = mp.find(e[i] + e[j]);\n\t\t\tif(it == mp.end()) continue;\n\t\t\tint a = it -> second.first, b = it -> second.second;\n\t\t\tif(a == i || b == i) continue;\n\t\t\tBigInt x = f[a] * f[b], y = f[i] * f[j];\n\t\t\tif(x < y) swap(x, y);\n\t\t\tm = gcd(m, x - y);\n\t\t\tif(!--cnt) solve();\n\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1650429831,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P7328 \u300cMCOI-07\u300dDream and Machine Learning"
    },
    {
        "content": "\u9996\u5148\u53d1\u73b0\u5173\u952e\u6027\u8d28\uff1a\u82e5 $b^{e}\\bmod m=x,b^{e+1}\\bmod m=y$\uff0c\u5219\u6709 $bx-y\\in\\{0,m,\\cdots,(b-1)m\\}$\n\n\u56e0\u4e3a $0\\leq bx-y<bm$ \u4e14 $bx\\equiv y \\pmod{m}$\uff0c\u4e0a\u9762\u7684\u5f0f\u5b50\u662f\u663e\u7136\u7684\u3002\n\n\u53c8\u56e0\u4e3a\u6570\u636e\u968f\u673a\uff0c\u4e14 $10^5>\\sqrt{10^9}$\uff08\u751f\u65e5\u6096\u8bba\u76f8\u5173\u7ed3\u8bba\uff09\uff0c\u671f\u671b\u5176\u5b9e\u662f\u53ef\u4ee5\u627e\u5230\u4e0d\u5c11 $e_i,e_j$\uff0c\u6ee1\u8db3 $e_j=e_i+1$\u3002\n\n\u800c\u53c8\u56e0\u4e3a\u6570\u636e\u968f\u673a\u4e14 $b\\leq 3$\uff0c\u7b97\u51fa\u7684 $bx-y$ \u6709\u81f3\u5c11 $1/3$ \u7684\u6982\u7387 $=m$\n\n\u7136\u540e\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 $e_j=e_i+1$ \u7684 $i,j$\uff0c\u8ba1\u7b97 $bx-y$\uff0c\u8003\u8651\u628a\u6240\u6709\u627e\u5230\u7684**\u975e\u96f6\u7684** $bx-y$ \u53d6 $\\min$ \u5c31\u6709\u5f88\u5927\u6982\u7387\u662f $m$ \u4e86\u3002\n\n\u81f3\u4e8e\u627e\u5230\u6240\u6709\u7684 $e_j=e_i+1$\uff0c\u628a\u6570\u636e\u6309 $e_i$ sort\u4e00\u4e0b\u7136\u540e\u626b\u8fc7\u53bb\u5c31\u597d\u4e86\u3002\n\n\u4f7f\u7528python\u7f16\u5199\u53ef\u4ee5\u514d\u9664\u9ad8\u7cbe\u5ea6\u7684\u5b9e\u73b0\u3002\n\n\u6b63\u786e\u7387\u4e0d\u4f1a\u5206\u6790\uff0c\u53cd\u6b63\u80fd\u8fc7\uff08\n\n```python3\nr=input().split(' ')\nb=int(r[0])\nn=int(r[1])\nq=int(r[2])\n\nw = []\nfor i in range(0,n):\n    p=input().split(' ')\n    w.append((int(p[0]),int(p[1])))\n\ndef getk(x):\n    return x[0]\nw.sort(key=getk)\n\ndef powm(a,b,m):\n    ret=1\n    while b:\n        if b&1:\n            ret=ret*a%m\n        b>>=1\n        a=a*a%m\n    return ret\nmi=-1\nfor i in range(1,n):\n    if w[i][0]-w[i-1][0]==1:\n        dif = w[i-1][1]*b-w[i][1]\n        if dif!=0:\n            if mi==-1:\n                mi=dif\n            else:\n                mi=min(mi,dif)\n\nfor i in range(0,q):\n    a=int(input())\n    print(powm(b,a,mi))\n```",
        "postTime": 1612707476,
        "uid": 62598,
        "name": "dengyaotriangle",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P7328 \u3010[w33z-2018] Dream and Machine Learning\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u4e00\u5f00\u573a\u542c\u540c\u5b66\u8bf4 C \u6bd4 A \u548c B \u90fd\u8981\u7b80\u5355\uff0c\u7136\u540e\u4ee5\u4e3a python \u7684\u9ad8\u7cbe\u53ef\u4ee5\u7b97 $2^{10^9}$ \u4e8e\u662f\u4ee5\u4e3a\u81ea\u5df1 python \u54ea\u91cc\u641e\u9519\u4e86\u2026\u2026\n\n\u679c\u7136\u6211\u662f\u50bb\u903c\u2026\u2026\n\n\u540e\u6765\u8d5b\u540e\u53d1\u73b0\u8fd8\u662f\u4e2a\u6c34\u9898\uff08\n## \u601d\u8def\n1. Naive solution\n\n\u663e\u7136 $b^e=km+r$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6240\u6709\u7684 $e$ \u5f97\u51fa\u6240\u6709\u7684 $km$\u3002\n\n\u6240\u6709\u7684 $km$ \u76f4\u63a5 $\\gcd$ \u4e00\u4e0b\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n2. Correct solution\n\n\u6211\u4eec\u53d1\u73b0 $b^e$ \u592a\u5927\u4e86\uff0c\u4f46\u662f\u7531\u4e8e\u6709 $10^5$ \u4e2a\u6570\uff0c$b^{e-e'}$ \u53ef\u80fd\u5f88\u5c0f\u3002\n\n\u4e8e\u662f\u6211\u4eec\u770b\u770b\u600e\u4e48\u5bf9\u4e8e\u76f8\u90bb\u4e24\u4e2a $e$ \u6c42\u51fa\u7b54\u6848\u3002\n\n\u663e\u7136 $b^{e}=km+r,b^{e+t}=k'm+r'$\n\n\u6211\u4eec\u968f\u4fbf\u63a8\u5bfc\u4e00\u4e0b\u3002\n\n$$b^{e+t}=b^eb^t=(km+r)b^t=k'm+r'$$\n$$(km+r)b^t=k'm+r'$$\n$$kmb^t+rb^t=k'm+r'$$\n$$rb^t-r'=(k'-kb^t)m$$\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u76f8\u90bb\u4e24\u9879\u7684\u5dee $t$ \u6c42\u51fa $(k'-kb^t)m$\n\n\u7531\u4e8e\u6570\u636e\u968f\u673a\u8fd8\u662f $\\gcd$ \u4e00\u4e0b\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n\u6ce8\u610f\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u968f\u673a\u4e0d\u51fa\u95ee\u9898\uff0c\u5982\u679c\u5728 $t$ \u5f88\u5927\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9\u8df3\u8fc7\u8fd9\u6b21\u8fd0\u7b97\u3002\n\n3. Hint\n\n\u9ad8\u7cbe\u5ea6\u53ef\u4ee5\u4f7f\u7528 Python \u7f16\u5199\u7a0b\u5e8f\u3002\n## \u4ee3\u7801\uff08Python 3\uff09\n```cpp\nimport math\ndef qsort(a,b,l,r):\n    mid=a[(l+r)//2]\n    i,j=l,r\n    while i<=j:\n        while a[i]<mid:i+=1\n        while a[j]>mid:j-=1\n        if i<=j:\n            a[i],a[j]=a[j],a[i]\n            b[i],b[j]=b[j],b[i]\n            i+=1\n            j-=1\n    if l<j:qsort(a,b,l,j)\n    if i<r:qsort(a,b,i,r)\ndef qpow(x,y,z):\n    if y==1:\n        return x\n    if y==0:\n        return 1\n    t=y//2\n    g=qpow(x*x%z,t,z)\n    if y%2==1:\n        g=g*x%z\n    return g\ns=input().split()\nbase=int(s[0])\nn=int(s[1])\nq=int(s[2])\na=[]\nb=[]\nfor i in range(0,n):\n    s=input().split()\n    a.append(int(s[0]))\n    b.append(int(s[1]))\nqsort(a,b,0,n-1)\nm=0\nif a[1]<=1000:\n    m=(base**a[1])-b[1]\nfor i in range(1,n):\n    if a[i]-a[i-1]<=1000:\n        m=math.gcd(m,b[i-1]*(base**(a[i]-a[i-1]))-b[i])\nfor i in range(0,q):\n    x=int(input())\n    print(qpow(base,x,m))\n```\n## \u540e\u8bb0\n\u8fd9\u9898\u6ca1\u6709\u7d2b\u5427\u2026\u2026",
        "postTime": 1612622742,
        "uid": 111055,
        "name": "dead_X",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P7328 \u3010[w33z-2018] Dream and Machine Learning\u3011"
    }
]