[
    {
        "content": "Upd on 2022.6.17\uff1a\u4fee\u6539\u8868\u8ff0\u3002\n\n> *IV. [P7361 \u300cJZOI-1\u300d\u62dc\u795e](https://www.luogu.com.cn/problem/P7361)\n\n\u8fd8\u7b97\u4e0d\u9519\u7684\u9898\u76ee\u3002\n\n\u5efa\u51fa $s$ \u7684\u540e\u7f00\u6570\u7ec4\uff0c\u8003\u8651\u4e00\u6b21\u8be2\u95ee\u7684\u672c\u8d28\u3002\u5bf9\u4e8e\u957f\u5ea6 $L$\uff0c\u5b83\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e24\u4e2a\u4f4d\u7f6e $p, q \\in [l, r - L + 1](p\\neq q)$\uff0c\u4f7f\u5f97 $lcp(suf_p, suf_q)\\geq L$\u3002\u6839\u636e\u5957\u8def\uff0c$p, q$ \u6ee1\u8db3\u8be5\u6761\u4ef6\u5f53\u4e14\u4ec5\u5f53\u82e5\u5c06\u6240\u6709 $\\geq L$ \u7684 $ht_i$ \u503c\u5bf9\u5e94\u7684\u4e24\u4e2a\u4f4d\u7f6e $sa_{i - 1}$ \u4e0e $sa_i$ \u4e4b\u95f4\u8fde\u8fb9\uff0c\u5219 $p, q$ \u5728\u540c\u4e00\u8fde\u901a\u5757\u3002\n\n\u663e\u7136\u7b54\u6848\u6ee1\u8db3\u53ef\u4e8c\u5206\u6027\uff0c\u56e0\u6b64\u7740\u773c\u4e8e\u5224\u65ad\u4e00\u4e2a\u957f\u5ea6 $L$ \u662f\u5426\u5408\u6cd5\u3002\u501f\u9274\u54c1\u9152\u5927\u4f1a\u7684\u6280\u5de7\uff0c\u6211\u4eec\u6c42\u51fa $ht$ \u6570\u7ec4\u540e\u4ece\u5927\u5230\u5c0f\u52a0\u5165\u5e76\u67e5\u96c6\uff0c\u76f8\u5f53\u4e8e\u6bcf\u6b21\u5408\u5e76\u4e24\u4e2a\u4f4d\u7f6e $sa_{i - 1}, sa_i$\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u957f\u5ea6 $L$\uff0c\u5728\u7ebf\u6bb5\u6811 $T_L$ \u4e0a\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e $p$ \u7684\u540e\u7ee7 $suc_p$\uff0c\u8868\u793a $suc_p$ \u662f\u5927\u4e8e $p$ \u4e14\u548c $p$ \u5728\u76f8\u540c\u8fde\u901a\u5757\u7684\u6700\u5c0f\u4f4d\u7f6e\u3002\u5224\u65ad\u5408\u6cd5\u53ea\u9700\u67e5\u8be2 $T_L$ \u4e0a $[l, r - L]$ \u7684\u533a\u95f4\u6700\u5c0f\u503c\u662f\u5426 $\\leq r - L + 1$\u3002\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4 $suc_p$\uff1a\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u4e3a\u5e76\u67e5\u96c6\u7684\u6bcf\u4e2a\u4ee3\u8868\u5143\u7ef4\u62a4\u4e00\u4e2a `set` $S_i$\uff0c\u6bcf\u6b21\u5f80 $S_i$ \u4e2d\u63d2\u5165\u4e00\u4e2a\u6570 $y$\uff0c`lower_bound` \u67e5\u8be2 $y$ \u7684\u540e\u7ee7 $su$ \u4e0e\u524d\u9a71 $pr$\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0 $suc_{pr} \\gets y$ \u4e14 $suc_y \\gets su$\u3002\u7531\u4e8e\u8981\u50a8\u5b58\u6bcf\u4e2a\u957f\u5ea6\u7684\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u53ef\u6301\u4e45\u5316\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3a\u7ebf\u6027\u5bf9\u6570\u5e73\u65b9\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nbool Mbe;\nconstexpr int N = 5e4 + 5;\nint n, q, id[N];\nchar s[N];\nint sa[N], rk[N], ork[N], buc[N], ht[N];\nbool cmp(int a, int b, int w) {return ork[a] == ork[b] && ork[a + w] == ork[b + w];}\nvoid build() {\n  int m = 1 << 7, p = 0;\n  for(int i = 1; i <= n; i++) buc[rk[i] = s[i]]++;\n  for(int i = 1; i <= m; i++) buc[i] += buc[i - 1];\n  for(int i = n; i; i--) sa[buc[rk[i]]--] = i;\n  for(int w = 1; ; w <<= 1, m = p, p = 0) {\n    for(int i = n - w + 1; i <= n; i++) id[++p] = i;\n    for(int i = 1; i <= n; i++) if(sa[i] > w) id[++p] = sa[i] - w;\n    memset(buc, 0, sizeof(buc));\n    memcpy(ork, rk, sizeof(rk));\n    p = 0;\n    for(int i = 1; i <= n; i++) buc[rk[id[i]]]++;\n    for(int i = 1; i <= m; i++) buc[i] += buc[i - 1];\n    for(int i = n; i; i--) sa[buc[rk[id[i]]]--] = id[i];\n    for(int i = 1; i <= n; i++) rk[sa[i]] = cmp(sa[i], sa[i - 1], w) ? p : ++p;\n    if(p == n) break;\n  }\n  for(int i = 1, k = 0; i <= n; i++) {\n    if(k) k--;\n    while(s[i + k] == s[sa[rk[i] - 1] + k]) k++;\n    ht[rk[i]] = k;\n  }\n}\nint node, R[N], ls[N << 8], rs[N << 8];\nunsigned short val[N << 8];\nvoid build(int l, int r, int &x) {\n  x = ++node, val[x] = -1;\n  if(l == r) return;\n  int m = l + r >> 1;\n  build(l, m, ls[x]), build(m + 1, r, rs[x]);\n}\nvector<pair<int, int>> chg; // make_pair(pos, val)\nvoid modify(int pre, int &x, int l, int r) {\n  if(chg.empty() || chg.back().first > r) return;\n  assert(l <= chg.back().first);\n  x = ++node, ls[x] = ls[pre], rs[x] = rs[pre];\n  if(l == r) {\n    val[x] = chg.back().second;\n    chg.pop_back();\n    return;\n  }\n  int m = l + r >> 1;\n  modify(ls[pre], ls[x], l, m);\n  modify(rs[pre], rs[x], m + 1, r);\n  val[x] = min(val[ls[x]], val[rs[x]]);\n}\nint query(int l, int r, int ql, int qr, int x) {\n  if(ql > qr || !x) return N;\n  if(ql <= l && r <= qr) return val[x];\n  int m = l + r >> 1, ans = N;\n  if(ql <= m) ans = query(l, m, ql, qr, ls[x]);\n  if(m < qr) ans = min(ans, query(m + 1, r, ql, qr, rs[x]));\n  return ans;\n}\n\nint fa[N], upd[N], cnt;\nset<int> S[N];\nint find(int x) {return fa[x] == x ? x : fa[x] = find(fa[x]);}\nvoid update(int pos, int val) {\n  if(!upd[pos]) id[++cnt] = pos;\n  upd[pos] = val;\n}\nvoid merge(int x, int y) {\n  x = find(x), y = find(y);\n  if(S[x].size() < S[y].size()) swap(x, y);\n  fa[y] = x;\n  for(int it : S[y]) {\n    auto pt = S[x].lower_bound(it);\n    if(pt != S[x].end()) update(it, *pt);\n    if(pt != S[x].begin()) update(*--pt, it);\n    S[x].insert(it);\n  }\n  set<int> ().swap(S[y]);\n}\n\nbool Med;\nint main() {\n  fprintf(stderr, \"%.4lf\\n\", (&Mbe - &Med) / 1048576.0);\n#ifdef ALEX_WEI\n  freopen(\"1.in\", \"r\", stdin);\n  freopen(\"1.out\", \"w\", stdout);\n#endif\n  scanf(\"%d%d%s\", &n, &q, s + 1);\n  build();\n  build(1, n, R[n]);\n  static pair<int, int> p[N];\n  for(int i = 1; i <= n; i++) fa[i] = i, S[i].insert(i);\n  for(int i = 1; i < n; i++) p[i] = {ht[i + 1], i + 1};\n  sort(p + 1, p + n);\n  for(int i = n - 1, pt = n - 1; i; i--) {\n    cnt = 0, chg.clear();\n    while(pt && p[pt].first == i) {\n      int q = p[pt].second;\n      merge(sa[q - 1], sa[q]), pt--;\n    }\n    sort(id + 1, id + cnt + 1);\n    for(int i = cnt; i; i--) chg.push_back({id[i], upd[id[i]]}), upd[id[i]] = 0;\n    if(chg.empty()) R[i] = R[i + 1];\n    else modify(R[i + 1], R[i], 1, n);\n  }\n  for(int i = 1; i <= q; i++) {\n    int ql, qr;\n    scanf(\"%d%d\", &ql, &qr);\n    int l = 0, r = qr - ql;\n    while(l < r) {\n      int m = l + r + 2 >> 1;\n      if(query(1, n, ql, qr - m, R[m]) <= qr - m + 1) l = m;\n      else r = m - 1;\n    }\n    printf(\"%d\\n\", l);\n  }\n  return 0;\n}\n/*\n2022/6/16\nstart coding at 12:36\nfinish debugging at 13:08\n*/\n```",
        "postTime": 1640748257,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P7361 \u300cJZOI-1\u300d\u62dc\u795e"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\u505a\u6cd5\u3002\n\n\u663e\u7136\u4f60\u81f3\u5c11\u8981\u5efa\u4e2a SAM \u51fa\u6765\uff0c\u7136\u540e\u518d\u8003\u8651\u600e\u4e48\u505a\u3002\n\n\u770b\u5230\u91cd\u590d\u51fa\u73b0\u7684\u4e32\uff0c\u5bb9\u6613\u8054\u60f3\u5230 $\\mathrm{endpos}$ \u96c6\u5408\uff0c\u8fd9\u662f\u53ef\u4ee5\u5728 fail \u6811\u4e0a\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u7684\u3002\n\n\u8003\u8651\u4e00\u4e2a $\\mathrm{endpos}$ \u96c6\u5408\u63d0\u4f9b\u7684\u4fe1\u606f\uff0c\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u53ea\u6709\u96c6\u5408\u4e2d\u76f8\u90bb\u7684\u4e24\u4e2a\u4f4d\u7f6e\u624d\u662f\u6709\u7528\u7684\uff0c\u7136\u540e\u8003\u8651\u76f8\u90bb\u4e24\u4e2a\u4f4d\u7f6e $l,r$ \u7684\u8d21\u732e\u3002\n\n\u5982\u679c fail \u6811\u4e0a\u5f53\u524d\u70b9 $k$ \u5bf9\u5e94\u7684\u4e32\u957f\u5ea6\u662f $len_k$\uff0c\u90a3\u4e48 $l,r$ \u76f8\u5f53\u4e8e\u5bf9\u5de6\u7aef\u70b9\u5728 $[1,l-len_k+1]$\uff0c\u53f3\u7aef\u70b9\u5728 $[r,n]$ \u4e2d\u7684\u8be2\u95ee\u6709\u8d21\u732e\uff0c\u5982\u679c\u6bcf\u4e2a\u70b9\u7684 $len$ \u90fd\u53ea\u6709\u4e00\u4e2a\u7684\u8bdd\u6211\u4eec\u53ea\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u5408\u5e76 push_up \u7684\u65f6\u5019\u628a\u5de6\u533a\u95f4\u6700\u9760\u53f3\u7684\u4f4d\u7f6e\u548c\u53f3\u533a\u95f4\u6700\u9760\u5de6\u7684\u4f4d\u7f6e\u7684\u8d21\u732e\u52a0\u5165\u5e73\u9762\u4e0a\u5373\u53ef\uff0c\u8fd9\u90e8\u5206\u5982\u679c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\u6ca1\u6709\u8fdb\u8fd9\u4e2a\u70b9\u90a3\u4e48\u4ed6\u7684\u8d21\u732e\u4e00\u5b9a\u5728\u4ed6 fail \u6811\u4e0a\u7684\u67d0\u4e2a\u5b50\u6811\u5185\u7684\u70b9\u7b97\u8fc7\u4e86\uff0c\u800c fail \u6811\u4fdd\u8bc1\u513f\u5b50\u7684 $len$ \u5927\u4e8e\u7236\u4eb2\u7684 $len$\uff0c\u6240\u4ee5\u8fd9\u91cc\u518d\u7b97\u4e00\u904d\u4e00\u5b9a\u4e0d\u4f18\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002\n\n\u6700\u540e\u79bb\u7ebf\u626b\u4e00\u904d\u7528\u7ebf\u6bb5\u6811\u5957 set \u7ef4\u62a4\u7b54\u6848\u5bb9\u6613\u505a\u5230 $O(n\\log^3n)$\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0cfail \u6811\u4e0a\u4e00\u4e2a\u70b9\u4e8b\u5b9e\u4e0a\u4ee3\u8868\u4e86\u4e32\u957f\u662f $[len_{fa_k}+1,len_k]$ \u8fd9\u6837\u4e00\u7ec4\u4e32\uff0c\u5176\u4e2d\u77ed\u7684\u4e32\u662f\u957f\u7684\u4e32\u7684\u540e\u7f00\uff0c\u8fd9\u4e2a\u65f6\u5019\u76f4\u63a5\u66b4\u529b\u627e\u51fa\u6bcf\u4e2a\u77e9\u5f62\u590d\u6742\u5ea6\u53ef\u80fd\u9000\u5316\u6210 $O(n^2\\log^2n)$\uff0c\u5c31\u5bc4\u4e86\u3002\n\n\u7ee7\u7eed\u53d1\u6398\u6027\u8d28\uff0c\u53d1\u73b0\u6b64\u65f6 $l,r$ \u7684\u8d21\u732e\u53ef\u4ee5\u62c6\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u5de6\u7aef\u70b9\u5728 $[1,l-len_k]$ \u4e2d\uff0c\u53f3\u7aef\u70b9\u5728 $[r,n]$ \u4e2d\u7684\u8be2\u95ee\uff0c\u8d21\u732e\u662f $len_k$\uff1b\u53e6\u4e00\u90e8\u5206\u662f\u5de6\u7aef\u70b9\u5728 $[l-len_k+1,l]$ \u4e2d\uff0c\u53f3\u7aef\u70b9\u5728 $[r,n]$ \u4e2d\u7684\u8be2\u95ee\uff0c\u8bb0\u5de6\u7aef\u70b9\u662f $x$\uff0c\u90a3\u4e48\u8fd9\u90e8\u5206\u7684\u8d21\u732e\u662f $l+1-x$\uff0c\u662f\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\u3002\n\n\u524d\u9762\u7684\u5e38\u51fd\u6570\u4e5f\u53ef\u4ee5\u770b\u6210\u4e00\u6b21\u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u7ebf\u6bb5\u6811\u5957 set \u6362\u6210\u674e\u8d85\u6811\uff0c\u7136\u540e\u79bb\u7ebf\u626b\u63cf\u53f3\u7aef\u70b9\uff0c\u5728\u674e\u8d85\u6811\u4e0a\u67e5\u8be2\u5de6\u7aef\u70b9\u5904\u82e5\u5e72\u4e00\u6b21\u51fd\u6570\u7684 $\\max$ \u5373\u53ef\uff0c\u7531\u4e8e\u6240\u6709\u77e9\u5f62\u7684\u53f3\u7aef\u70b9\u8303\u56f4\u90fd\u662f\u4e00\u4e2a\u540e\u7f00\uff0c\u6240\u4ee5\u674e\u8d85\u6811\u4e0d\u7528\u5220\u9664\uff0c\u590d\u6742\u5ea6\u6b63\u786e\u3002\n\n\u674e\u8d85\u6811\u8981\u652f\u6301\u533a\u95f4\u63d2\u5165\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^3 n)$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nint n,m,tot,cnt,lst,ch[100001][26],len[100001],link[100001],root[100001],ls[100001*20],rs[100001*20],ans[100001];\npair<int,int> val[100001*20];\nvector<int> v[100001];\nvector<pair<int,int> > q[100001];\nstruct func\n{\n    int a,b;\n    int operator ()(const int &x) const\n    {\n        return a*x+b;\n    }\n};\nstruct element\n{\n    int l,r;\n    func w;\n    element(int l_,int r_,func w_):\n        l(l_),r(r_),w(w_){}\n};\nvector<element> a[100005];\nstruct ds\n{\n    func f[100001<<2];\n    inline int ls(int k)\n    {\n        return k<<1;\n    }\n    inline int rs(int k)\n    {\n        return k<<1|1;\n    }\n    inline void update(int nl,int nr,int l,int r,int k,func p)\n    {\n        if(l>=nl&&r<=nr)\n        {\n            int mid=(l+r)>>1;\n            if(p(mid)>f[k](mid))\n                swap(p,f[k]);\n            if(l==r)\n                return;\n            if(p(l)>f[k](l))\n                update(nl,nr,l,mid,ls(k),p);\n            if(p(r)>f[k](r))\n                update(nl,nr,mid+1,r,rs(k),p);\n            return;\n        }\n        int mid=(l+r)>>1;\n        if(nl<=mid)\n            update(nl,nr,l,mid,ls(k),p);\n        if(nr>mid)\n            update(nl,nr,mid+1,r,rs(k),p);\n    }\n    inline int query(int node,int l,int r,int k)\n    {\n        int res=f[k](node);\n        if(l==r)\n            return res;\n        int mid=(l+r)>>1;\n        if(node<=mid)\n            res=max(res,query(node,l,mid,ls(k)));\n        else\n            res=max(res,query(node,mid+1,r,rs(k)));\n        return res;\n    }\n}T;\ninline void init()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n}\ninline int read()\n{\n    int x;\n    cin>>x;\n    return x;\n}\ninline void push_up(int k,int w)\n{\n    if(!ls[k])\n        val[k]=val[rs[k]];\n    else if(!rs[k])\n        val[k]=val[ls[k]];\n    else\n    {\n        val[k]={val[ls[k]].first,val[rs[k]].second};\n        if(val[ls[k]].second>w)\n            a[val[rs[k]].first].emplace_back(1,val[ls[k]].second-w,func{0,w});\n        a[val[rs[k]].first].emplace_back(val[ls[k]].second-w+1,val[ls[k]].second,func{-1,val[ls[k]].second+1});\n    }\n}\ninline int merge(int l,int r,int x,int y,int w)\n{\n    if(!x||!y)\n        return x|y;\n    if(l==r)\n    {\n        val[x]={l,l};\n        return x;\n    }\n    int mid=(l+r)>>1;\n    ls[x]=merge(l,mid,ls[x],ls[y],w);\n    rs[x]=merge(mid+1,r,rs[x],rs[y],w);\n    push_up(x,w);\n    return x;\n}\ninline void update(int node,int l,int r,int &k)\n{\n    if(!k)\n        k=++cnt;\n    if(l==r)\n    {\n        val[k]={l,l};\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(node<=mid)\n        update(node,l,mid,ls[k]);\n    else\n        update(node,mid+1,r,rs[k]);\n    push_up(k,0);\n}\ninline void build(int c,int id)\n{\n    int cur=++tot,p=lst;\n    len[cur]=len[lst]+1;\n    update(id,1,n,root[cur]);\n    lst=cur;\n    for(;~p;p=link[p])\n        if(!ch[p][c])\n            ch[p][c]=cur;\n        else\n            break;\n    if(p==-1)\n        return;\n    int q=ch[p][c];\n    if(len[p]+1==len[q])\n    {\n        link[cur]=q;\n        return;\n    }\n    int clone=++tot;\n    len[clone]=len[p]+1;\n    link[clone]=link[q];\n    link[cur]=link[q]=clone;\n    for(int i=0;i<26;++i)\n        ch[clone][i]=ch[q][i];\n    for(;~p;p=link[p])\n        if(ch[p][c]==q)\n            ch[p][c]=clone;\n        else\n            break;\n}\ninline void dfs(int k)\n{\n    for(int i:v[k])\n    {\n        dfs(i);\n        root[k]=merge(1,n,root[k],root[i],len[k]);\n    }\n}\nint main()\n{\n    init();\n    n=read(),m=read();\n    link[0]=-1;\n    for(int i=1;i<=n;++i)\n    {\n        char c;\n        cin>>c;\n        build(c-'a',i);\n    }\n    for(int i=1;i<=tot;++i)\n        v[link[i]].emplace_back(i);\n    dfs(0);\n    for(int i=1;i<=m;++i)\n    {\n        int l=read(),r=read();\n        q[r].emplace_back(l,i);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        for(auto j:a[i])\n            T.update(j.l,j.r,1,n,1,j.w);\n        for(auto j:q[i])\n            ans[j.second]=T.query(j.first,1,n,1);\n    }\n    for(int i=1;i<=m;++i)\n        cout<<ans[i]<<'\\n';\n    cout.flush();\n    return 0;\n}\n```",
        "postTime": 1676175925,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "P7361 \u300cJZOI-1\u300d\u62dc\u795e \u9898\u89e3"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P7361)\n\n\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u6bb5\u533a\u95f4\u4e2d\u51fa\u73b0\u4e24\u6b21\u7684\u6700\u957f\u5b50\u4e32\u957f\u5ea6\u3002\n\n\u601d\u8def\u8fd8\u8f83\u6e05\u65b0\uff0c\u5148\u5c06\u8be2\u95ee\u6309\u53f3\u7aef\u70b9 $r$ \u6392\u5e8f\uff0c\u770b\u5bf9\u6bcf\u4e2a\u8be2\u95ee $l$ \u80fd\u600e\u4e48\u65b9\u4fbf\u6c42\u51fa\u3002\n\n\u5c06\u6bcf\u4e2a $[1,r]$ \u5185\u7684\u5b50\u4e32 $p$ \uff0c\u5176\u5728 $[1,r]$ \u4e2d**\u6b21\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e**\u7684\u53f3\u7aef\u70b9\u4e0e\u5de6\u7aef\u70b9\u770b\u505a\u4e00\u6761\u7ebf\u6bb5 $[s_p,t_p]$\u3002\n\n\u90a3\u5bf9\u6bcf\u4e2a $l$ \u53ea\u9700\u67e5\u51fa $\\mathrm{Max}\\left\\{\\left(\\mathop{\\mathrm{Max}}\\limits_{s_p\\leq l\\leq t_p}t_p-l+1\\right),\\left(\\mathop{\\mathrm{Max}}\\limits_{s_p\\geq l}\\ t_p-s_p+1\\right)\\right\\}$ \n\n\u8fd9\u76f8\u5f53\u4e8e\u662f\u627e\u51fa\u8986\u76d6 $l$ \u7684\u7ebf\u6bb5\u4e2d\u7684**\u53f3\u7aef\u70b9\u6700\u5927\u503c** $-l$ \uff0c\u4e0e\u53ca\u4e0d\u8986\u76d6 $l$ \u4e14\u5728 $l$ \u53f3\u4fa7\u7684**\u7ebf\u6bb5\u957f\u5ea6**\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u7531\u4e8e\u5bf9\u4e8e $\\text{endpos}$ \u76f8\u540c\u7684\u5b50\u4e32\u53f3\u7aef\u70b9\u96c6\u5408\u76f8\u540c\uff0c\u4e14\u4e0a\u5f0f\u9700\u8981\u7684\u7ebf\u6bb5\u662f\u8d8a\u957f\u8d8a\u597d\u3002\n\n\u4e8e\u662f\u6211\u4eec\u9700\u8981\u7684\u7ebf\u6bb5\u4ec5\u4e3a $\\text{endpos}$ \u76f8\u540c\u7684\u4e32\u4e2d\u6700\u957f\u7684\u4e00\u4e2a\uff0c\u5148\u60f3\u5982\u4f55\u66f4\u65b0\u6b21\u53f3\u7aef\u70b9\u3002\n\n\u8054\u7cfb\u4e00\u4e0b[\u8fd9\u9898](https://www.luogu.com.cn/problem/P6292)\uff0c\u4e0d\u96be\u5f97\u51fa $\\text{LCT}$ \u7ef4\u62a4\u7684\u65b9\u6cd5\u3002\n\n\u5c31\u662f\u5efa\u51fa $\\text{parent tree}$ \u540e\u8bb0\u5f55\u6bcf\u4e2a\u7b49\u4ef7\u7c7b\u51fa\u73b0\u4f4d\u7f6e\u7684\u6700\u53f3\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u6b21\u53f3\u4f4d\u7f6e\u3002\n\n$r$ \u5411\u53f3\u79fb\u65f6\u5355\u6b21 $access$ \u66f4\u6539\u4e3a\u4e86\u6c42\u4e0a\u5f0f\u9700\u7ef4\u62a4\u7684\u4fe1\u606f\uff0c\u540c\u65f6\u6253\u4e0a\u5c06\u6b21\u53f3\u503c\u53d8\u6210\u6700\u53f3\u503c\uff0c\u6700\u53f3\u503c\u66f4\u65b0\u4e3a $r$ \u7684\u6807\u8bb0\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u8003\u8651\u4e0a\u5f0f\u600e\u4e48\u6c42\u51fa\u3002\n\n\u9996\u5148\u7b2c\u4e8c\u4e2a $\\mathrm{Max}$ \u6bd4\u8f83\u597d\u505a\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5b50\u4e32\u7684 $s_p$ \u5355\u8c03\u9012\u589e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06 $[1,s_p]$ \u7684\u4fe1\u606f\u4e0e $t_p-s_p+1$ \u53d6\u6700\u5927\u503c\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a $\\mathrm{Max}$ \u5148\u8003\u8651\u6ca1\u6709 $access$ \u987a\u5e26\u9700\u8981\u7684\u4fee\u6539\u8be5\u600e\u4e48\u505a\u3002\n\n\u8fd9\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5728 $[s_p,t_p]$ \u4e4b\u95f4\u7684\u70b9\uff0c\u7528 $t_p$ \u66f4\u65b0\u80fd\u8986\u76d6\u8fd9\u4e2a\u70b9\u7684\u7ebf\u6bb5\u6700\u5927\u53f3\u7aef\u70b9\u3002\n\n\u89c2\u5bdf\u5230\u6bcf\u6b21\u66f4\u6539\u6240\u5f71\u54cd\u5230\u7684\u7ebf\u6bb5\u53ef\u89c6\u4e3a**\u5411\u53f3\u5e73\u79fb\u4e00\u6bb5\u533a\u95f4**\uff0c\u4e8b\u5b9e\u4e0a\u4e4b\u524d\u7684\u533a\u95f4\u53d6\u6700\u5927\u503c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u540e\u7684\u67e5\u8be2\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\u4e4b\u540e\u67e5\u8be2\u7684 $l$ \u5982\u679c\u5728**\u539f\u5148** $t_p$ \u4e4b\u540e\uff0c\u5c31\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002\n\n\u800c\u5728**\u539f\u5148** $t_p$ \u4e4b\u524d\u7684 $l$ \u5fc5\u5b9a\u4f1a\u67e5\u5230\u53f3\u79fb\u4e4b\u540e\u7684\u7684**\u6574\u4e2a\u5b57\u7b26\u4e32**\uff0c\u6216\u8005\u4e4b\u540e\u7684\u53f3\u7aef\u70b9\u6bd4\u4e4b\u524d\u53f3\u7aef\u70b9**\u9760\u53f3**\u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u5206\u522b\u5bf9\u5e94\u53f3\u79fb\u524d\u540e\uff0c\u662f\u5426\u4e0e\u539f\u5148\u5b57\u7b26\u4e32\u91cd\u5408\u3002\u800c\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e00\u5b9a\u4f1a\u5728\u7b2c\u4e00\u3001\u4e8c\u4e2a $\\mathrm{Max}$ \u4e2d\u5f97\u51fa\u7684\u957f\u5ea6\u6bd4\u4e4b\u524d\u4f18\uff0c\u4f1a\u5c06\u4e4b\u524d\u7684\u6807\u8bb0\u8986\u76d6\u6389\u3002\n\n\u4e8e\u662f\u53ea\u9700\u8981\u4e00\u4e2a\u652f\u6301\u533a\u95f4\u53d6 $\\mathrm{Max}$ \u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u7ebf\u6bb5\u6811\u5bb9\u6613\u5b9e\u73b0\u3002\n\n\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log^2n)$ \u7684\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+10;\nint n,m,x,xx,y,tot=1,last=1,tmp,l,r;char ch;\nint rot_xx,rot_y,s_i,acs_y,a;bool rot_b;\nint mxlen[N],link[N],trans[N][26],f[N],res[N];\nint lst[N],lst_[N],son[N][2],anc[N],cov[N];\ninline void read(int &x){\n\tx=0;ch=getchar();while(ch<48||ch>57)ch=getchar();\n\twhile(ch>47&&ch<58)x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n}\nvoid write(int x){if(x>9)write(x/10);putchar(48+x%10);}\n#define ls k<<1\n#define rs k<<1|1\nstruct segment_tree{\n\tint tag[N<<2],res;//\u8fd9\u91cc\u7528\u4e86\u6807\u8bb0\u6c38\u4e45\u5316\u5b9e\u73b0\u533a\u95f4\u53d6max\uff0c\u5355\u70b9\u67e5\n\tvoid update(int k,int l,int r,int x,int y,int v){\n\t\tif(x<=l&&r<=y)tag[k]=max(tag[k],v);\n\t\telse {\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(x<=mid)update(ls,l,mid,x,y,v);\n\t\t\tif(mid<y)update(rs,mid+1,r,x,y,v);\n\t\t}\n\t}\n\tvoid inquiry(int k,int l,int r,int pos){\n\t\tres=max(res,tag[k]);\n\t\tif(l^r){\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(pos<=mid)inquiry(ls,l,mid,pos);\n\t\t\telse inquiry(rs,mid+1,r,pos);\n\t\t}\n\t}\n}S,S_;\ninline void extend(int a){\n\ttmp=++tot;y=last;mxlen[tmp]=mxlen[y]+1;\n\tfor(;y&&!trans[y][a];y=link[y])trans[y][a]=tmp;\n\tif(!y)link[tmp]=1;\n\telse {\n\t\tx=trans[y][a];\n\t\tif(mxlen[x]==mxlen[y]+1)link[tmp]=x;\n\t\telse {\n\t\t\txx=++tot;mxlen[xx]=mxlen[y]+1;link[xx]=link[x];\n\t\t\tmemcpy(trans[xx],trans[x],sizeof(trans[xx]));\n\t\t\tfor(;y&&trans[y][a]==x;y=link[y])trans[y][a]=xx;\n\t\t\tlink[tmp]=link[x]=xx;\n\t\t}\n\t}\n\tlast=tmp;\n}\ninline bool nroot(int x){return son[anc[x]][0]==x||son[anc[x]][1]==x;}\ninline bool p(int x){return son[anc[x]][1]==x;}\ninline void cov_(int x,int v){lst_[x]=lst[x];lst[x]=cov[x]=v;}\n//\u5c06\u6b21\u53f3\u53d8\u4e3a\u6700\u53f3\uff0c\u6700\u53f3\u7531\u8986\u76d6\u6807\u8bb0\u66f4\u65b0\ninline void pushdown(int x){\n\tif(cov[x]){\n\t\tif(son[x][0])cov_(son[x][0],cov[x]);\n\t\tif(son[x][1])cov_(son[x][1],cov[x]);\n\t\tcov[x]=0;\n\t}\n}\nvoid pushall(int x){if(nroot(x))pushall(anc[x]);pushdown(x);}\ninline void rotate(int x){\n\trot_y=anc[x];rot_xx=anc[rot_y];rot_b=p(x);\n\tif(nroot(rot_y))son[rot_xx][p(rot_y)]=x;\n\tanc[x]=rot_xx;\n\tanc[son[rot_y][rot_b]=son[x][!rot_b]]=rot_y;\n\tanc[son[x][!rot_b]=rot_y]=x;\n}\ninline void splay(int x){\n\tpushall(x);\n\tfor(;s_i=anc[x],nroot(x);rotate(x))if(nroot(s_i))rotate(p(x)==p(s_i)?s_i:x);\n}\ninline void access(int x,int pos){\n\tfor(y=0;x;y=x,x=anc[x]){\n\t\tsplay(x);son[x][1]=y;\n\t\tl=lst[x]-mxlen[x]+1;r=lst[x];//l,r \u4e3a\u8fd9\u4e2a\u6574\u4e2a\u5b50\u4e32\u5c06\u8981\u79fb\u52a8\u5230\u7684\u533a\u95f4\n\t\tif(lst[x]&&x^1)S.update(1,1,n,l,r,r),S_.update(1,1,n,1,l,r-l+1);\n\t}//\u8fd9\u91ccaccess\u7531\u4e8e\u6bcf\u6b21\u662f\u4e4b\u524d\u8df3\u7236\u4eb2\u6765\u7684\uff0c\u80fd\u4fdd\u8bc1x\u4e00\u5b9a\u662f\u5f53\u524dsplay\u4e2dmxlen\u6700\u5927\u7684\n\tcov_(y,pos);\n}\nint to[N],nextn[N],h[N],id[N],edg;\ninline void add(int x,int y,int i){to[++edg]=y,nextn[edg]=h[x],h[x]=edg;id[edg]=i;}\nmain(){\n\tread(n);read(m);while(ch<97)ch=getchar();\n\tregister int i,j;\n\tfor(i=1;i<=n;++i)a=ch-97,extend(a),f[i]=tmp,ch=getchar();\n\tfor(i=1;i<=tot;++i)anc[i]=link[i];\n\tfor(i=1;i<=m;++i)read(x),read(y),add(y,x,i);\n\tfor(i=1;i<=n;++i){\n\t\taccess(f[i],i);\n\t\tfor(j=h[i];j;j=nextn[j]){\n\t\t\tS.res=S_.res=0;\n\t\t\tS.inquiry(1,1,n,to[j]);\n\t\t\tS_.inquiry(1,1,n,to[j]);\n\t\t\tres[id[j]]=max(S.res-to[j]+1,S_.res);\n\t\t}\n\t}\n\tfor(i=1;i<=m;++i)write(res[i]),putchar('\\n');\n}\n```\n",
        "postTime": 1634722301,
        "uid": 334380,
        "name": "Y_B_X",
        "ccfLevel": 7,
        "title": "\u9898\u89e3[P7361\u62dc\u795e]"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709\u4eba\u5199\u9898\u89e3\uff0c\u8fc7\u6765\u642c\u8fd0\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u3002\n\n\u6765\u81ea\uff1a[alpha1022](https://www.luogu.com.cn/paste/4qn38il5)\u3002\n\n\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u53f3\u7aef\u70b9\u4f5c\u626b\u63cf\u7ebf\uff0c\u540c\u65f6\u8003\u8651\u7ef4\u62a4 $f(s)$ \u8868\u793a\u5b50\u4e32 $s$ \u76ee\u524d\u4e3a\u6b62\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u53f3\u7aef\u70b9\u3002  \n\u8003\u8651\u4e00\u4e2a\u76ee\u524d\u4f4d\u7f6e\u65b0\u51fa\u73b0\u7684\u5b50\u4e32 $t$ \u7684\u8d21\u732e\uff0c\u5728\u66f4\u65b0 $f(t)$ \u4e4b\u524d\uff0c\u4f1a\u53d1\u73b0\u65b0\u589e\u52a0\u4e00\u4e2a $t$ \u4f7f\u5f97\u5de6\u7aef\u70b9\u5728 $f(t)-|t|+1$ \u4e4b\u524d\u7684\u8be2\u95ee\u90fd\u4f1a\u5c06 $t$ \u8ba1\u5165\u7b54\u6848\u3002\u4e8e\u662f\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u652f\u6301\u524d\u7f00\u548c $|t|$ \u53d6 max\uff0c\u5355\u70b9\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\uff1b\u53ef\u4ee5\u663e\u7136\u5730\u8f6c\u5316\u4e3a\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u524d\u7f00 max\uff0c\u5bb9\u6613\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u5b8c\u6210\u3002\n\n\u4e0d\u8fc7\u5230\u6b64\u4e3a\u6b62\u8be5\u505a\u6cd5\u4ecd\u7136\u975e\u5e38\u6734\u7d20\uff0c\u8003\u8651\u4f7f\u7528 LCT \u7ef4\u62a4\u53cd\u4e32\u540e\u7f00\u6811\uff0c\u5728\u6bcf\u4e2a\u72b6\u6001\u4e0a\u7ef4\u62a4 $f$ \u503c\u3002\u65b0\u52a0\u5165\u53f3\u7aef\u70b9\u7c7b\u4f3c\u4e8e LCT \u7684 access \u64cd\u4f5c\uff0c\u5bb9\u6613\u7ef4\u62a4\u3002  \n\u65b0\u51fa\u73b0\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\u540e\u7f00\u6811\u7684\u72b6\u6001\u5305\u542b\u4e86\u4e0d\u6b62\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u60f3\u5fc5\u7cbe\u901a\u540e\u7f00\u6811 / \u540e\u7f00\u81ea\u52a8\u673a\u7684\u60a8\u4e00\u5b9a\u770b\u51fa\u6765\u4e86\uff0c\u8fd9\u65f6\u6211\u4eec\u7684\u6570\u636e\u7ed3\u6784\u5c31\u9700\u8981\u53e6\u5916\u652f\u6301\u533a\u95f4\u548c\u516c\u5dee\u4e3a $1$ \u7684\u7b49\u5dee\u6570\u5217\u53d6 max\u3002  \n\u5bf9\u4e8e general \u7684\u516c\u5dee\u4e0d\u56fa\u5b9a\u7684\u95ee\u9898\uff0c~~\u6839\u636e EI \u9e3d\u9e3d\u7684\u6559\u8bf2~~\u4f7f\u7528\u4e8c\u8fdb\u5236\u5206\u7ec4 + cascading \u53ef\u4ee5\u505a\u5230 $O(n \\log n \\alpha(n))$\uff0c\u4e0d\u8fc7\u8fd9\u662f\u9898\u5916\u8bdd\u4e86\u3002  \n\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u628a\u64cd\u4f5c\u5316\u4e3a\u8fd9\u6837\u7684\u5f62\u5f0f\uff1a\u5bf9\u4e8e $l \\le i \\le r$\uff0c\u4ee4 $a_i = \\max(a_i,x-i)$\u3002\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a $b_i = a_i - i$\uff0c\u90a3\u4e48\u64cd\u4f5c\u5c31\u53d8\u6210\u4e86 $b_i = \\max(b_i,x)$ \u5e76\u5355\u70b9\u67e5\u8be2\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u3002",
        "postTime": 1614410082,
        "uid": 157857,
        "name": "ImmortalWatcher",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P7361 \u3010\u300cJZOI-1\u300d\u62dc\u795e\u3011"
    }
]