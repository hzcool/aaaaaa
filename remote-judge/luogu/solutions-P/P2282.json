[
    {
        "content": "\u622a\u81f32018.12.2 A\u6389\u8fd9\u9898\u7684\u9664\u4e86\u6211\u90fd\u662f\u6284\u7684@_Ressed_ dalao\u7684...\u771f\u4e0d\u77e5\u9053\u6284\u9898\u89e3\u6709\u4ec0\u4e48\u610f\u601d\n\n\u795e\u4ed9\u9898 \u849f\u84bb\u7b2c\u4e00\u6b21\u63a5\u89e6\u5230hash\u5224\u5b57\u7b26\u4e32\u5927\u5c0f\u3001\u7ebf\u6bb5\u6811\u4f18\u5316dp\n\n\u5f31\u5316\u7248\u7684[P1415 \u62c6\u5206\u6570\u5217](https://www.luogu.org/problemnew/show/P1415)\u662f\u4e00\u9053\u53ef\u4ee5\u5728$O(n^3)$\u65f6\u95f4\u5185\u901a\u8fc7\u7684\u9898\uff0c\u7136\u540e\u8fd9\u9898\u76f4\u63a5\u53d8\u6210$O(nlogn)$\uff0c\u60f9\u4e0d\u8d77\n\n\u5206\u4e24\u8d9fdp\uff0c\u7b2c\u4e00\u8d9f\u6b63\u7740\u628a\u6700\u5c0f\u7684\u6700\u540e\u4e00\u4e2a\u6570\u7b97\u51fa\u6765\uff0c\u7136\u540e\u518d\u5012\u7740\u628a\u5b57\u5178\u5e8f\u6700\u5927\u7684\u7b97\u51fa\u6765\uff0c\u5dee\u4e0d\u591a\u7684\uff0c\u53ea\u4ee5\u7b2c\u4e00\u8d9f\u4e3a\u4f8b\u8bf4\u660e\n\n\u5148\u5199\u539f\u9898\u7684dp\u5f0f\u5b50,\u8bbe$f[i]$\u8868\u793a\u628a\u524d$i$\u4e2a\u6570\u5b57\u62c6\u6210\u5355\u589e\u5e8f\u5217\u4e14\u6700\u540e\u4e00\u4e2a\u6570\u6700\u5c0f\u65f6\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u7684\u8d77\u59cb\u6570\u5b57\u4e0b\u6807(\u4e5f\u5c31\u662f\u5728\u7b2c$f[i]$\u4e2a\u6570\u5b57\u524d\u9762\u52a0\u6700\u540e\u4e00\u4e2a\u9017\u53f7)\n\n\u8fd9\u6837\u5c31\u6709$f[i]=max\\{j+1|num(f[j],j)<num(j+1,i),1\\leq j<i\\}$\uff0c\u5176\u4e2d$num(i,j)$\u8868\u793a\u4ece\u7b2c$i$\u5230\u7b2c$j$\u4e2a\u6570\u5b57\u6240\u7ec4\u6210\u7684\u6570\n\n\u8fd9\u4e2a\u65f6\u5019\u7684\u590d\u6742\u5ea6\u662f$O(n^3)$\n\n\u8003\u8651\u964d\u4e00\u6b21\n\n\u5b57\u7b26\u4e32\u6bd4\u8f83\u90a3\u4e00\u4e2a\u5730\u65b9\u7684\u590d\u6742\u5ea6\u662f$O(n)$\u7684\uff0c\u4f18\u5316\u5b83\n\n\u6734\u7d20\u505a\u6cd5\uff1a\u627e\u5230\u6700\u957f\u7684\u516c\u5171\u524d\u7f00\uff0c\u7136\u540e\u6bd4\u4e0b\u4e00\u4f4d\n\n$hash$\u9884\u5904\u7406\uff0c\u4e8c\u5206\u51fa\u516c\u5171\u524d\u7f00\u5373\u53ef\u505a\u5230$O(logn)$\n\n\u964d\u81f3$O(n^2\\log n)$\n\n\u7136\u540e\u849f\u84bb~~\u6253\u5f00\u4e86\u9898\u89e3~~\u4ed4\u7ec6\u601d\u8003\u4e86\u4e00\u756a\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u8f6c\u79fb\uff01\n\n\u6211\u4eec\u5148\u6539\u53d8\u4e00\u4e0bdp\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u4ece\u586b\u8868\u6539\u4e3a\u5237\u8868\uff0c\u5373\u7531\u4e00\u4e2a$i$\u53bb\u66f4\u65b0\u5176\u4ed6\u70b9\n\n\u5982\u679c\u4e0d\u8003\u8651$0$\u7684\u8bdd\uff0c$i$\u8fd9\u4e2a\u70b9\u80fd\u66f4\u65b0\u7684$j$\u4e00\u5b9a\u6ee1\u8db3$j-i\\geq i-f[i]+1$\uff0c\u5c31\u662f$num(i+1,j)$\u7684\u4f4d\u6570\u5927\u4e8e\u7b49\u4e8e$num(f[i],i)$\u7684\u4f4d\u6570\n\n\u4f46\u8fd9\u662f\u4e2a\u5fc5\u8981\u6761\u4ef6\uff0c\u8fd8\u9700\u8981\u5728\u4f4d\u6570\u76f8\u540c\u7684\u65f6\u5019\u6bd4\u8f83\u4e00\u4e0b\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u627e\u5230$i$\u80fd\u66f4\u65b0\u7684\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c$j$\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u66f4\u65b0$[j,n]$\u7684$f$\u503c(\u548c$i+1$\u53d6$max$)\n\n\u8fd8\u8981\u53d6\u51fa$i$\u8fd9\u4e00\u70b9\u7684$f$\u503c\uff0c\u5355\u70b9\u67e5\u8be2\u5373\u53ef\n\n\u8fd9\u6837\u6211\u4eec\u5728\u6ca1\u6709$0$\u7684\u60c5\u51b5\u4e0b\u505a\u5230\u4e86$O(n\\log n)$(\u5b57\u7b26\u4e32\u6bd4\u8f83\u3001\u67e5\u8be2\u548c\u4fee\u6539\u662f\u5e76\u5217\u7684$\\log n$)\n\n\u7136\u540e\u5c31\u662f\u4e07\u6076\u7684$0$\uff0c\u53ca\u5176\u96be\u4ee5\u5904\u7406\n\n\u5f15\u5165$l[i]$\u8868\u793a$i$\u5de6\u8fb9(\u542b$i$)\u7684\u7b2c\u4e00\u4e2a\u975e$0$\u4f4d\u7f6e\uff0c$r[i]$\u8868\u793a$i$\u53f3\u8fb9(\u542b$i$)\u7684\u7b2c\u4e00\u4e2a\u975e$0$\u4f4d\u7f6e\n\n$l,r$\u53ef\u4ee5$O(n)$\u9884\u5904\u7406\u51fa\u6765\n\n\u5982\u679c\u7b2c$i$\u4f4d\u662f$0$\u90a3\u4e48$l[i]=l[i-1],r[i]=r[i+1]$\uff0c\u5426\u5219$l[i]=r[i]=i$\uff0c\u4e24\u7aef\u7279\u5224\n\n\u90a3\u4e48\u73b0\u5728\u66f4\u65b0\u7684$j$\u6ee1\u8db3\u7684\u6761\u4ef6\u53d8\u4e3a$j-r[i+1]+1\\geq i-r[f[i]]+1$\uff0c\u518d\u5224\u4e00\u4e0b\u6709\u6ca1\u6709\u7b49\u53f7\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u628a\u6b63\u7740\u7684\u505a\u5b8c\u4e86\n\n\u5012\u7740\u505a\u7684\u65f6\u5019\u8981\u5b9a\u4f4f\u6700\u540e\u4e00\u4e2a\u6570\u4e0d\u52a8\uff0c\u5e76\u4e14\u6700\u540e\u4e00\u4e2a\u6570\u7684\u524d\u5bfc\u96f6\u7684$f$\u4e00\u5f00\u59cb\u5168\u90fd\u8981\u6307\u5411$n$\n\n\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u975e\u5e38\u591a\u7684\u7ec6\u8282\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u5427qwq\n\n$O(Tn\\log n)$\u5199\u5f97\u6781\u5176\u4e11\uff0c\u4e0d\u5438\u6c27\u8dd1\u4e0d\u8fc7\u53bbqwq\n\n```cpp\n// luogu-judger-enable-o2 \u53ef\u7231\u7684\u6d1b\u5495\u6c27\u6c14\u7f50\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nunsigned int h[500000],pow[500000];\nchar st[500000];\nint f[500000],n,l0[500000],r0[500000];\nvoid hs_make(char st[],unsigned int h[])\n{\n    pow[0]=1;\n    for(int i=1;i<=strlen(st);i++)h[i]=h[i-1]*233+st[i-1]-48,pow[i]=pow[i-1]*233;\n}\nunsigned int hs(int l,int r){return h[r]-h[l-1]*pow[r-l+1];}\nint xy(int l1,int r1,int l2,int r2)\n{\n    if(r1-l1+1<r2-l2+1)return 1;\n    if(r1-l1+1>r2-l2+1)return 0;\n    int l=0,r=r1-l1+1,mid;\n    while(l<r)\n    {\n        mid=(l+r+1)>>1;\n        if(hs(l1,l1+mid-1)==hs(l2,l2+mid-1))l=mid;\n        else r=mid-1;\n    }\n    return l!=r1-l1+1&&st[l1+l-1]<st[l2+l-1];//\u6ce8\u610f\u5982\u679c\u524d\u7f00\u5c31\u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u8981\u7279\u5224\n}\nstruct Segment_tree\n{\n    int a[200000],tag[200000];\n    void build(int rot,int lt,int rt)\n    {\n        tag[rot]=a[rot]=0;\n        if(lt==rt)return;\n        int mid=(lt+rt)>>1;\n        build(rot<<1,lt,mid),build(rot<<1|1,mid+1,rt);\n    }\n    void pushdown(int rot,int lt,int rt)\n    {\n        if(tag[rot])\n        {\n            int t=tag[rot];tag[rot]=0;\n            tag[rot<<1]=max(t,tag[rot<<1]),tag[rot<<1|1]=max(t,tag[rot<<1|1]);\n            a[rot<<1]=max(t,a[rot<<1]),a[rot<<1|1]=max(t,a[rot<<1|1]);\n        }\n    }\n    int query(int rot,int lt,int rt,int q)\n    {\n        if(lt==rt)return a[rot];\n        int mid=(lt+rt)>>1;\n        pushdown(rot,lt,rt);\n        if(q<=mid)return query(rot<<1,lt,mid,q);\n        else return query(rot<<1|1,mid+1,rt,q);\n    }\n    void update(int rot,int lt,int rt,int lq,int rq,int w)\n    {\n        if(lt>rq||rt<lq)return;\n        if(lt>=lq&&rt<=rq)\n        {\n            a[rot]=max(a[rot],w),tag[rot]=max(tag[rot],w);\n            return;\n        }\n        int mid=(lt+rt)>>1;\n        pushdown(rot,lt,rt);\n        update(rot<<1,lt,mid,lq,rq,w),update(rot<<1|1,mid+1,rt,lq,rq,w);\n        a[rot]=max(a[rot<<1],a[rot<<1|1]);\n    }\n}seg;//\u7ebf\u6bb5\u6811\nint main()\n{\n    while(scanf(\"%s\",st)==1)\n    {\n        hs_make(st,h);n=strlen(st);\n        for(int i=1;i<=n;i++)if(st[i-1]=='0')l0[i]=l0[i-1];else l0[i]=i;r0[n+1]=n+1;//\u7aef\u70b9\u7279\u5224\n        for(int i=n;i>=1;i--)if(st[i-1]=='0')r0[i]=r0[i+1];else r0[i]=i;\n//\t\tfor(int i=1;i<=n;i++)cout<<l0[i]<<\" \"<<r0[i]<<endl;\n        seg.build(1,0,n);\n        for(int i=0;i<n;i++)\n        {\n            int fi=seg.query(1,0,n,i);\n            int t=r0[i+1]+i-r0[fi];\n            if(!xy(r0[fi],i,r0[i+1],t))t++;\n//\t\t\tcout<<i<<\" \"<<fi<<\" \"<<t<<endl;\n            if(t<=n)seg.update(1,0,n,t,n,i+1);\n        }\n//\t\tfor(int i=1;i<=n;i++)cout<<f[i]<<\" \";cout<<endl;\n        int fn=seg.query(1,0,n,n);\n        seg.build(1,0,n);//\u6e05\u6811\n        seg.update(1,0,n,l0[fn-1]+1,n,n);//\u5148\u628a\u524d\u5bfc\u96f6\u5168\u90fd\u6307\u5411n\n        for(int i=fn;i>1;i--)\n        {\n            int fi=seg.query(1,0,n,i);\n            int t=l0[max(i-1+r0[i]-fi-1,0)]+1;//\u4e0d\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u7279\u5224\n            if(!xy(r0[t],i-1,r0[i],fi))t=r0[t]+1;\n//\t\t\tcout<<i<<\" \"<<f[i]<<\" \"<<t<<endl;\n            seg.update(1,0,n,t,i-1,i-1);\n        }\n        int pos=seg.query(1,0,n,1);\n        for(int i=1;i<=n;i++)\n        {\n            putchar(st[i-1]);//\u666e\u901a\u7684\u8f93\u51fa\n            if(i==pos&&i!=n)putchar(','),pos=seg.query(1,0,n,i+1);\n        }\n        putchar(10);\n    }\n}\n```",
        "postTime": 1543743103,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2282 \u3010[HNOI2003]\u5386\u53f2\u5e74\u4efd\u3011"
    },
    {
        "content": "# \u5199\u5728\u524d\u9762\n\n\u5509\uff0c\u8fd9\u9898\u771f\u7684\u662f\uff0c\u4e0d\u6127\u662f\u9ed1\u9898\u554a\uff01\u6574\u6574\u8017\u8d39\u6211\u4e86\u4e24\u5929\u8fde\u60f3\u5e26\u8c03\u7ec8\u4e8e\u505a\u5b8c\u4e86\uff0c\u4e5f\u7b97\u662f\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u9053\u9ed1\u9898\uff08\u4e4b\u524d\u7684\u90fd\u6389\u7d2b\u4e86\uff09\u3002\n\n\u5199\u7740\u9898\u7684\u65f6\u5019\uff0cDay 1 \u505a\u4e86\u8fd9\u9053\u9898\u7684\u5f31\u5316\u7248\uff0c\u7136\u540e\u71ac\u7740\u628a\u8fd9\u9053\u9898\u7684\u601d\u8def\u634b\u6e05\u4e86\u3002Day 2 \u6ca1\u8d77\u6765\uff0c\u4e0a\u8bfe\u8fdf\u5230\uff0c\u56de\u5bb6\u540e\u5f00\u59cb\u5199\u4ee3\u7801\uff0c\u5199\u51fa\u6765\u4e4b\u540e\u5c31\u662f\u8c03\uff0c\u8c03\u4e86\u6574\u6574\u4e00\u4e0b\u5348\uff0c\u4e0d\u77e5\u9053\u662f\u54ea\u6709\u95ee\u9898\uff0c\u53c8\u8ddf\u9898\u89e3\u5bf9\u4e86\u5bf9\uff0c\u8fd8\u662f\u6ca1\u53d1\u73b0\uff0c\u5f53\u65f6\u771f\u7684\u662f\u5fc3\u6001\u70b8\u4e86\uff0c\u6700\u540e\u53d1\u73b0\u5c31\u662f\u6570\u7ec4\u6ca1\u521d\u59cb\u5316\uff0c\u771f\u7684\u7cca\u4e86\uff01\n\n\u6240\u4ee5\u6211\u5c31\u60f3\u5199\u8fd9\u7bc7\u9898\u89e3\uff0c\u601d\u8def\u662f\u4e00\u6837\u7684\uff0c\u7136\u540e\u589e\u52a0\u4e00\u4e9b\u6211\u7684\u7406\u89e3\u3002\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n- DP\uff08**\u8bf7\u5148\u5b8c\u6210\u5f31\u5316\u7248 [P1415 \u62c6\u5206\u6570\u5217](https://www.luogu.com.cn/problem/P1415)**\uff09\n- \u5b57\u7b26\u4e32\u54c8\u5e0c\uff08\u6216\u8005\u524d\u7f00\u548c\u601d\u60f3\uff09\n- \u7ebf\u6bb5\u6811\n\n### \u9898\u76ee\u63cf\u8ff0\uff08\u6233\u8fd9\u91cc[\u67e5\u770b\u539f\u9898](https://www.luogu.com.cn/problem/P2282)\uff09\n\n\u7ed9\u5b9a\u4e00\u4e2a**\u53ea\u6709\u6570\u5b57**\u7684\u5b57\u7b26\u4e32\uff0c\u8981\u6c42\u901a\u8fc7\u6dfb\u52a0\u4efb\u610f\u591a\u4e2a\u9017\u53f7\uff08\u53ef\u4ee5\u4e3a $0$\uff09\uff0c\u5c06\u539f\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u4e00\u4e2a**\u4e25\u683c\u5355\u8c03\u9012\u589e**\u7684\u6570\u5217\u3002\u591a\u89e3\u60c5\u51b5\u4e0b\u4f7f\u6570\u5217\u6700\u540e\u4e00\u9879\u6700\u5c0f\uff0c\u7b2c\u4e00\u9879\u7684\u5b57\u5178\u5e8f\u6700\u5927\uff08\u76f8\u540c\u60c5\u51b5\u4e0b\u6ee1\u8db3\u7b2c\u4e8c\u9879\u5b57\u5178\u5e8f\u6700\u5927\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff09\u3002\n\n\u6d4b\u8bd5\u6570\u636e\u6709\u591a\u7ec4\u3002\n\n# \u6b63\u6587\n\n\u6839\u636e\u5f31\u5316\u7248 [P1415 \u62c6\u5206\u6570\u5217](https://www.luogu.com.cn/problem/P1415)\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u4e00\u4e2a $O(n^3)$ \u7684\u7b97\u6cd5\u3002\u8fd9\u91cc\u7b80\u5355\u6982\u8ff0\u4e00\u4e0b\u3002\n\n\u6211\u4eec\u5b9a\u4e49\uff1a\n- $f[i]$ \u8868\u793a**\u6b63\u5e8f**\u8003\u8651\u5230\u5b57\u7b26\u4e32\u7b2c $i$ \u4f4d\uff0c\u6ee1\u8db3 $i$ **\u53ca\u5176\u4e4b\u524d**\u5df2\u7ecf\u62c6\u5206\u6210\u4e25\u683c\u5355\u8c03\u9012\u589e\u6570\u5217\u65f6\uff0c\u4ee5 $i$ \u4e3a**\u53f3**\u7aef\u70b9\u7684\u6700\u5927**\u5de6**\u7aef\u70b9\u3002\uff08\u6ee1\u8db3\u4e86\u4f7f $f[n]$ \u6700\u5927\uff0c\u6c42\u5f97\u6700\u5c0f\u7684\u6700\u540e\u4e00\u9879\uff09\n- $g[i]$ \u8868\u793a**\u5012\u5e8f**\u8003\u8651\u5230\u5b57\u7b26\u4e32\u7b2c $i$ \u4f4d\uff0c\u6ee1\u8db3 $i$ **\u53ca\u5176\u4e4b\u540e**\u5df2\u7ecf\u62c6\u5206\u6210\u4e25\u683c\u5355\u8c03\u9012\u589e\u6570\u5217\u65f6\uff0c\u4ee5 $i$ \u4e3a**\u5de6**\u7aef\u70b9\u7684\u6700\u5927**\u53f3**\u7aef\u70b9\u3002\uff08\u6ee1\u8db3\u4f7f $g[i]$ \u5c3d\u53ef\u80fd\u5927\uff0c\u4e5f\u5c31\u662f\u5b57\u5178\u5e8f\u5c3d\u91cf\u5927\uff09\n\n\u5bf9\u4e8e\u4e24\u4e2a\u6570\u7ec4\u6709\u5982\u4e0b\u8f6c\u79fb\u65b9\u7a0b\uff1a    \n(\u5b9a\u4e49 $Num(i, j)$ \u8868\u793a\u5b57\u7b26\u4e32\u4e2d\u533a\u95f4 $[i, j]$ \u8868\u793a\u7684\u6570\u5b57)\n- $f[i] = \\max(j)$\uff0c$j$ \u6ee1\u8db3 $Num(f[j-1], j-1) < Num(j, i) \\ \\ (1\u2264j\u2264i)$\uff1b\n- $g[i] = \\max(j)$\uff0c$j$ \u6ee1\u8db3 $Num(i, j) < Num(j+1, g[j+1]) \\ \\ (i\u2264j\u2264n)$\uff1b\n\n\u8fd9\u91cc\u6ce8\u610f\u3002\u5728\u6b63\u5411 DP \u5b8c $f$ \u6570\u7ec4\u540e\uff0c\u8981\u5c06 $f[n]$ \u6570\u7ec4\u7684\u524d\u5bfc\u96f6\u52a0\u4e0a\uff0c\u5bf9\u4e8e $[f[n],n]$ \u5185\u7684 $g$ \u6570\u7ec4\u8981\u8d4b\u503c\u4e3a $n$\u3002\u4e4b\u540e\u518d\u8fdb\u884c $g$ \u6570\u7ec4\u7684\u53cd\u5411 DP\u3002\n\n### \u786e\u5b9a\u4f18\u5316\u65b9\u5411\n\n\u8003\u8651\u4f18\u5316\u3002\u6b63\u5411\u77aa\u773c\u6cd5\u5982\u679c\u6ca1\u6709\u7528\uff0c\u6211\u4eec\u5c1d\u8bd5\u201c\u9762\u5411\u6570\u636e\u7f16\u7a0b\u201d\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7\u6211\u4eec\u7684\u7ecf\u9a8c\uff0c\u6839\u636e\u9898\u76ee\u4e2d\u7684\u6570\u636e\u63a8\u51fa\u6211\u4eec\u5e94\u8be5\u62e5\u6709\u7684\u590d\u6742\u5ea6\u3002\n\n\u9996\u5148\uff0c\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e $O(T)$ \u4e0d\u53ef\u907f\u514d\u3002\u5176\u6b21\uff0c\u6bcf\u6b21 DP \u65f6\u4e00\u5b9a\u8981\u628a $[1,n]$ \u5168\u90e8\u904d\u5386\u4e00\u904d\uff0c\u6839\u636e\u7ecf\u9a8c\u8fd9\u5757\u5730\u65b9\u4e5f\u4e0d\u5bb9\u6613\u4f18\u5316\uff0c\u4e58\u4e0a $O(n)$\u3002\u73b0\u5728\u7684 $O(Tn)$ \u590d\u6742\u5ea6\u5df2\u7ecf\u5230\u8fbe $2\\times10^6$ \u7ea7\u522b\u4e86\u3002\u6839\u636e\u5408\u7406\u590d\u6742\u5ea6\u5728 $10^8$ \u4ee5\u4e0b\uff0c\u6700\u591a\u53ea\u80fd\u5e26 $\\log$ \u6216\u8005 $\\log^2$\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6700\u7ec8\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5927\u7ea6\u662f $O(Tn\\log n)$\u3002\n\n\u56e0\u6b64\uff0c\u80fd\u7ed9\u6211\u4eec\u4f18\u5316\u7684\u65e0\u975e\u4e24\u4e2a\u5730\u65b9\uff0c**\u5b57\u7b26\u4e32\u6bd4\u8f83\u548c DP \u65f6\u679a\u4e3e $j$ \u7684\u8f6c\u79fb**\u3002\n\n### \u4f18\u5316\u5b57\u7b26\u4e32\u6bd4\u8f83\n\n\u5728\u6211\u4eec naive \u7684\u505a\u6cd5\u91cc\uff0c\u5b57\u7b26\u4e32\u6bd4\u8f83\u5927\u5c0f\u662f $O(n)$ \u7684\uff0c\u663e\u7136\u53ef\u4ee5\u4f18\u5316\uff0c\u6211\u4eec\u6765\u601d\u8003\u6211\u4eec\u7684\u6bd4\u8f83\u6b65\u9aa4\u3002\n\n\u9996\u5148\uff0c\u5728\u6bd4\u8f83\u5927\u5c0f\u7684\u8fc7\u7a0b\u4e2d\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u524d\u5bfc\u96f6\u90fd\u662f\u8981\u9664\u53bb\u7684\u3002\u5355\u8fd9\u4e00\u6b65\u5c31\u80fd\u628a\u6211\u4eec\u5361\u5230 $O(n)$\u3002\u5b57\u7b26\u4e32\u4e00\u76f4\u662f\u4e0d\u53d8\u7684\uff0c\u4f55\u4e0d\u628a\u6bcf\u4e2a\u4f4d\u7f6e\u53bb\u6389\u524d\u5bfc\u96f6\u540e\u7684\u4f4d\u7f6e\u8bb0\u5f55\u4e0b\u6765\u5462\uff1f\n\n\u56e0\u6b64\u6211\u4eec\u5b9a\u4e49 $l[i]$\u3001$r[i]$ \u4e3a\u5b57\u7b26\u4e32\u4e2d $i$ \u4f4d\u7f6e\u5411\u5de6/\u53f3\u7b2c\u4e00\u4e2a\u4e0d\u662f $0$ \u7684\u4f4d\u7f6e\u3002\u53ef\u4ee5\u901a\u8fc7 $O(n)$ \u9884\u5904\u7406\u5f97\u51fa\uff0c\u67e5\u8be2\u662f $O(1)$ \u7684\u3002\n\n\u5bf9\u4e8e\u4f4d\u7f6e $i$\uff0c\u5982\u679c\u5b83\u5bf9\u5e94\u7684\u503c\u662f ```'0'```\uff0c\u90a3\u4e48\u5c31\u6709 $l[i] = l[i-1]$\u3001$r[i] = r[i+1]$\uff1b\u5426\u5219\u90fd\u662f $i$\u3002\n\n\n------------\n\u56de\u5f52\u5b57\u7b26\u4e32\u3002\u6211\u89c9\u5f97\u6240\u6709\u4eba\u6700\u521d\u7684\u60f3\u6cd5\u5e94\u8be5\u90fd\u662f\u548c\u524d\u7f00\u548c\u6709\u5173\u3002\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u6570\u5b57\u4e32\uff1a\n\n```\"1145141919810\"```\n\n\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728 $O(1)$ \u77e5\u9053\u4e00\u6bb5\u533a\u95f4\u8868\u793a\u7684\u6570\u5b57\u3002\u56e0\u800c\u7531\u7c7b\u4f3c\u524d\u7f00\u548c\u601d\u60f3\u5b9a\u4e49 $Sum[i]$ \u8868\u793a\u4ece\u5934\u5230 $i$ \u8868\u793a\u7684\u6570\u5b57\uff0c\u6bd4\u5982 $Sum[6] = 114514$\u3002\n\n\u56e0\u800c $Sum[i] = Sum[i-1] \\times 10 + str[i]$\u3002\uff08$str[i]$ \u8868\u793a $i$ \u4f4d\u7f6e\u5b57\u7b26\u4e32\u8868\u793a\u7684\u6570\u5b57\uff09\n\n\u6240\u4ee5\u5bf9\u4e8e\u533a\u95f4 $[i,j]$ \u8868\u793a\u7684\u6570\u5b57\u6709 $Num(i,j) = Sum[j] - Sum[i-1]\\times 10^{j-i+1}$\u3002\uff08\u4f8b\u5982  $Num(3,6) = Sum[6] - Sum[2] \\times 10^4 = 114514 - 11\\times 10000 = 4514$\uff09\n\n\u4f3c\u4e4e\u67f3\u6697\u82b1\u660e\u4e86\uff1f\u751a\u81f3\u8fde\u524d\u5bfc\u96f6\u90fd\u6ca1\u5fc5\u8981\u8003\u8651\u4e86\uff0c\u592a\u597d\u4e86\u5427\uff1f\u5176\u5b9e\u4e0d\u7136\u3002\u6ce8\u610f\u5230 ```unsigned long long``` \u4e5f\u53ea\u80fd\u8868\u793a\u5927\u6982 $18$ \u4f4d\u6570\u5b57\uff0c\u800c\u6211\u4eec\u5f88\u6709\u53ef\u80fd\u62c6\u5206\u6570\u5217\u7684\u4f4d\u6570\u8fbe\u5230\u51e0\u5341\u6216\u4e0a\u767e\uff0c\u56e0\u6b64\u8d85\u51fa\u7684\u4f4d\u6570\u5f88\u5bb9\u6613\u88ab\u5361\u6389\uff0c**\u76f4\u63a5\u6bd4\u8f83\u5927\u5c0f\u662f\u4e0d\u884c\u7684**\u3002\n\n\n------------\n\u89c2\u5bdf\u4e0a\u9762\u7684\u5f0f\u5b50\uff0c\u4f3c\u4e4e\u5f88\u50cf**\u54c8\u5e0c**\u5427\uff1f\u53ef\u4ee5\u81ea\u5df1\u8bd5\u4e00\u8bd5\uff0c\u867d\u7136\u4e0d\u80fd\u76f4\u63a5\u6bd4\u8f83\u5927\u5c0f\uff0c\u4f46\u662f\u53ef\u4ee5\u5224\u65ad\u4e24\u6570\u662f\u5426\u76f8\u7b49\u3002\uff08\u6b64\u65f6\u6ce8\u610f\u5c06 ```base``` \u503c\u6539\u6210\u8d28\u6570\uff0c$10$ \u4f1a\u88ab\u5361\uff09\n\n\u5bf9\u4e8e\u4e24\u4e2a\u5b57\u7b26\u4e32\uff08\u5df2\u7ecf\u53bb\u9664\u524d\u5bfc\u96f6\uff09\uff0c\u5982\u679c\u5b83\u4eec\u957f\u5ea6\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7\u6bd4\u8f83\u957f\u5ea6\u5224\u65ad\u5927\u5c0f\u5173\u7cfb\u3002\u5982\u679c\u5b83\u4eec\u957f\u5ea6\u76f8\u7b49\uff0c\u8003\u8651 naive \u505a\u6cd5\uff0c\u6211\u4eec\u627e\u5230\u7b2c\u4e00\u4e2a\u540c\u4e00\u4f4d\u4f46\u662f\u6570\u5b57\u4e0d\u76f8\u7b49\u7684\u5c31\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\u4e86\uff08\u4e5f\u5c31\u662f\u4e4b\u524d\u7684\u6570\u5b57\u90fd\u76f8\u7b49\uff09\uff0c\u6b64\u65f6\u662f $O(n)$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5c31\u662f\u8981\u627e\u5230\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\uff0c\u7136\u540e\u6bd4\u8f83\u4e0b\u4e00\u4f4d\u7684\u5927\u5c0f\u5373\u53ef\u3002\u6211\u4eec\u521a\u624d\u6f14\u53d8\u51fa\u7684\u201c\u54c8\u5e0c\u201d\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86 $O(1)$ \u5224\u65ad\u5b57\u7b26\u4e32\u76f8\u7b49\u7684\u529f\u80fd\u3002\u8fdb\u800c\u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u662f\u6ee1\u8db3\u5355\u8c03\u6027\u7684\uff0c\u5373\u5982\u679c\u957f\u5ea6 $l$ \u4e0d\u76f8\u7b49\uff0c\u5219\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6\u4e00\u5b9a\u6bd4 $l$ \u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e8c\u5206\u3002\n\n\u8fdb\u800c\uff0c\u6211\u4eec\u53d1\u73b0\u53bb\u9664\u524d\u5bfc\u96f6\u662f $O(1)$\uff0c\u67e5\u627e\u6700\u957f\u516c\u5171\u524d\u7f00\u662f $O(\\log n)$\uff0c\u6bd4\u8f83\u540e\u4e00\u4f4d\u5927\u5c0f\u662f $O(1)$\u3002\u56e0\u6b64\u6211\u4eec\u6bd4\u8f83\u5b57\u7b26\u4e32\u51fd\u6570\u7684\u590d\u6742\u5ea6\u6210\u529f\u4ece $O(n)$ \u4f18\u5316\u5230\u4e86 $O(\\log n)$\u3002\n\n\n------------\n#### \u6df1\u5165\u7814\u7a76\n\u8fd8\u8bb0\u5f97\u6211\u4eec\u6700\u521d\u5206\u6790\u65f6\u5b9a\u4e49\u7684 $l[i]$\u3001$r[i]$ \u5417\uff1f\u6211\u4eec\u53ef\u4ee5\u518d\u6df1\u5165\u63a2\u7a76\u4e00\u4e0b\u5b83\u4eec\u7684\u6027\u8d28\uff0c\u56e0\u4e3a\u540e\u9762\u6709\u7528\uff08\u5f53\u7136\u53ef\u4ee5\u5148\u770b\u540e\u9762\u518d\u6765\u8fd9\u91cc\u5bf9\u7167\uff09\u3002\n\n\u5148\u4e3e\u4e2a\u4f8b\u5b50\uff1a     \n```\"114000000514\"```   \n\u5bb9\u6613\u77e5\u9053 $r[4] = 10$\u3001$l[9] = 3$ \u7b49\u7b49\u3002\n\n\u6211\u4eec\u63a2\u7a76\u5982\u4e0b\u6027\u8d28\uff1a\n\n1. \u5bf9\u4e8e\u4f4d\u7f6e $p$\uff0c\u6211\u4eec\u60f3\u8ba9 $p$ \u80fd\u5305\u62ec\u5b83\u4e4b\u524d\u7684\u6240\u6709\u524d\u5bfc\u96f6\u3002\u90a3\u4e48\u6b64\u65f6 $p$ \u7684\u4f4d\u7f6e\u53d8\u4e3a $q$\u3002\u5982\u4f55\u901a\u8fc7\u4e24\u4e2a\u6570\u7ec4\u8868\u793a $q$\uff1f    \n\t\u5bf9\u6b64\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\u3002\n    - \u82e5 $p$ \u524d\u6709\u524d\u5bfc\u96f6\uff0c\u5219 $p-1$ \u7684\u4f4d\u7f6e\u4e00\u5b9a\u662f $0$\uff0c\u8981\u627e\u5230\u6700\u524d\u7684\u4f4d\u7f6e\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u627e\u5230\u8fd9\u4e00\u4e32 $0$ \u524d\u7b2c\u4e00\u4e2a\u4e0d\u662f $0$ \u7684\u4f4d\u7f6e\uff0c\u5411\u53f3 $+1$ \u5373\u53ef\u3002     \n    \u6211\u4eec\u63a8\u5f97\u6709 $q = l[p-1]+1$\u3002\n    - \u82e5 $p$ \u524d\u6ca1\u6709\u524d\u5bfc\u96f6\uff0c\u5219 $q = p$\u3002\u4f46\u4e3a\u4e86\u8ba9\u5b83\u7684\u6027\u8d28\u666e\u904d\uff0c\u6211\u4eec\u9a8c\u8bc1\u4e0a\u4e00\u79cd\u60c5\u51b5\u7684\u516c\u5f0f\u662f\u5426\u9002\u7528\u3002\u6709\u6211\u4eec\u8bbe\u5b9a\u7684\u60c5\u51b5\uff0c$l[p-1] = p-1$\u3002  \n    \u56e0\u800c\u4ecd\u6ee1\u8db3 $q = l[p-1]+1 = p$\u3002\n    \n2. \u5bf9\u4e8e\u4f4d\u7f6e $p$\uff0c\u5b83\u6240\u8868\u793a\u7684\u4e0d\u786e\u5b9a\u662f\u5426 $0$\u3002\u6211\u4eec\u5df2\u7ecf\u6c42\u5f97 $r[p] = R_0$\uff0c\u73b0\u5728\u8981\u9006\u63a8\u51fa\u53ef\u80fd\u7684\u6700\u9760\u524d $p$ \u7684\u4f4d\u7f6e $q$\u3002\uff08\u5373\u4f7f $q$ \u80fd\u5305\u542b $p$ \u7684\u6240\u6709\u524d\u5bfc\u96f6\uff09  \n\u6211\u4eec\u901a\u8fc7\u6027\u8d28 1 \u4e3e\u4e00\u53cd\u4e09\u3002\n\t- \u82e5 $p$ \u8868\u793a $0$\u3002\u5219\u53ef\u4ee5\u786e\u5b9a $R_0-1$ \u4e00\u5b9a\u8868\u793a $0$\uff0c\u4e14 $[p,R_0-1]$ \u662f\u4e00\u4e2a\u96f6\u4e32\u3002\u6211\u4eec\u60f3\u8ba9 $p$ \u5305\u542b\u5b83\u524d\u9762\u6240\u6709\u524d\u5bfc\u96f6\uff0c    \n    \u6839\u636e\u6027\u8d28 1 \u6211\u4eec\u5f97\u51fa $q = l[R_0-1]+1$\u3002\n    - \u82e5 $p$ \u4e0d\u8868\u793a $0$\u3002\u5219 $r[p] = R_0 = p$\u3002\u540c\u6837\u901a\u8fc7\u6027\u8d28 1\uff0c\u6709 $q = l[R_0-1]+1$\u3002\n    \n\u6709\u4e86\u8fd9\u4e9b\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u601d\u8003\u4e86\u3002\n\n### \u4f18\u5316 DP \u8f6c\u79fb\n\n\u8003\u8651\u4e4b\u524d\u7684\u8f6c\u79fb\u65b9\u6cd5\uff0c\u586b\u8868\u6cd5\u67e5\u4e4b\u524d\u7684\u72b6\u6001\u518d\u4e00\u4e2a\u4e00\u4e2a\u6bd4\u5bf9\u662f\u5426\u5408\u6cd5\u66f4\u65b0\u7b54\u6848\u3002DP \u7684\u8f6c\u79fb\u65b9\u6cd5\u6709\u65f6\u5019\u4f1a\u6210\u4e3a\u4f18\u5316\u7684\u5173\u952e\u3002\n\n\u67e5\u4e4b\u524d\u7684\u72b6\u6001\u56e0\u4e3a\u8981\u4e00\u6b21\u6b21\u6bd4\u5bf9\uff0c\u8d21\u732e\u53ef\u80fd\u4e0d\u8fde\u7eed\uff0c\u6240\u4ee5\u4e0d\u80fd\u901a\u8fc7\u8bf8\u5982\u5355\u8c03\u961f\u5217\u7b49\u65b9\u6cd5\u4f18\u5316\u3002\u6211\u4eec\u4e0d\u59a8\u6539\u53d8\u4e00\u4e0b\u8f6c\u79fb\u65b9\u6cd5\uff0c\u7528\u524d\u9762\u66f4\u65b0\u540e\u9762\uff08\u5c31\u662f\u6240\u8c13\u7684\u5237\u8868\u6cd5\uff09\uff0c\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u770b\u770b\u524d\u9762\u5bf9\u540e\u9762\u6709\u8d21\u732e\u7684\u533a\u95f4\u662f\u5426\u6ee1\u8db3\u8fde\u7eed\u6027\uff0c\u8fde\u7eed\u7684\u8bdd\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u65b9\u6cd5\u4f18\u5316\u4e86\u3002\n\n\u4ee5 $f$ \u4e3a\u4f8b\u3002\u8054\u60f3\u4e4b\u524d\u7684\u8f6c\u79fb\u65b9\u7a0b\u3002$j$ \u5bf9 $f[i]$ \u6709\u8d21\u732e\u5f53\u4e14\u4ec5\u5f53 $Num(f[j],j)<Num(j+1,i)$\u3002\u6240\u4ee5\u5bf9\u4e8e $j$\uff0c\u5b83\u80fd\u6709\u8d21\u732e\u7684 $i$ \u6709\u54ea\u4e9b\uff1f\n\n\u56de\u60f3\u6bd4\u8f83\u51fd\u6570\uff0c\u53ea\u8981 $Num(j+1,i)$ \u957f\u5ea6\u66f4\u5927\uff0c\u5219 $j$ \u4e00\u5b9a\u80fd\u66f4\u65b0 $i$\u3002\u66f4\u5c0f\u4e00\u5b9a\u4e0d\u53ef\u4ee5\uff0c\u76f8\u7b49\u5219\u9700\u8981\u8dd1\u4e00\u904d\u6bd4\u8f83\u51fd\u6570\u3002\u56e0\u800c\u6ee1\u8db3 $i-(j+1)+1\u2265j-f[j]+1$\u3002\u6ce8\u610f\u8003\u8651\u524d\u5bfc\u96f6\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u4e25\u8c28\u5199\u51fa\u4e0d\u7b49\u5f0f\u4e3a $i-r[j+1]+1\u2265j-r[f[j]]+1$\u3002     \n\u6574\u7406\u5f97\uff1a$i\u2265j-r[f[j]]+r[j+1]$\u3002\uff08\u7b49\u53f7\u9700\u8981\u7279\u5224\uff09\n\n\u56e0\u6b64\uff0c$j$ \u6240\u80fd\u6709\u8d21\u732e\u7684\u8303\u56f4\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u8303\u56f4\uff08\u6700\u5927\u5230 $n$\uff09\u3002\u6700\u540e\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u7b54\u6848\u662f\u4e4b\u524d\u6709\u8d21\u732e\u7684\u6700\u5927\u503c\uff0c\u90a3\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u53ef\u4ee5\u533a\u95f4\u8d4b\u503c\u7684\u6700\u5927\u503c\u95ee\u9898\u3002\u53ef\u4ee5\u901a\u8fc7**\u7ebf\u6bb5\u6811\u4f18\u5316**\u3002\n\n\u8fdb\u800c\uff0c\u6211\u4eec\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u5c31\u4ece $O(n^2)$ \u53d8\u6210\u4e86 $O(n\\log n)$\u3002\n\n\u8f6c\u79fb $g$ \u65f6\u7565\u663e\u7e41\u7410\uff0c\u9700\u8981\u7528\u5230\u6211\u4eec\u63a2\u7a76\u7684\u6027\u8d28\u3002\u6839\u636e\u521a\u624d\u7684\u601d\u8def $j$ \u80fd\u5bf9 $g[i]$ \u6709\u8d21\u732e\u5f53\u4e14\u4ec5\u5f53 $(j-1)-r[i]+1 \u2264 g[j] - r[j]+1$\uff0c\u6574\u7406\u5f97 $r[i] \u2265 j-1-g[j]+r[j]$\u3002\n\n\u4e0d\u592a\u5999\u3002\u6211\u4eec\u786e\u5b9a\u4e86 $r[i]$ \u7684\u8303\u56f4\uff0c\u5374\u65e0\u6cd5\u786e\u5b9a $i$\u3002\u5f88\u663e\u7136\uff0c$i$ \u524d\u9762\u6709\u591a\u5c11\u524d\u5bfc\u96f6\u5bf9 $r[i]$ \u65e0\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u8ba9 $i$ \u5c3d\u53ef\u80fd\u7684\u5c0f\u3002\u8fd9\u4e0d\u5c31\u662f\u6211\u4eec\u7684**\u6027\u8d28 2** \u5417\uff1f\u56e0\u6b64\u6211\u4eec\u786e\u5b9a\u4e86\u6700\u5de6\u7aef $i \u2265 l[j-1-g[j]+r[j]-1]+1$\u3002\u7b49\u53f7\u9700\u8981\u7279\u5224\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5219\u539f\u6765\u7684 $r[i] = r[i]+1$\u3002\u56e0\u800c\u6c42\u5f97\u7684 $i = r[i]+1$\u3002\u6ce8\u610f\u6b64\u65f6\u8d21\u732e\u7684\u8303\u56f4\u662f $[i,j-1]$\u3002\n\n\uff08\u6211\u5199\u9898\u89e3\u7684\u65f6\u5019\u8111\u62bd\u4e86\u4e00\u4e2a\u60f3\u6cd5\uff0c\u4e3a\u4ec0\u4e48\u66f4\u65b0 $f$ \u7684\u65f6\u5019\u4e0d\u7528 $l[i-1]+1$\uff1f\u6ce8\u610f\u5230\u53f3\u7aef\u70b9\u662f\u4e0d\u914d\u62e5\u6709\u524d\u5bfc\u96f6\u7684\u3002\n\n### \u65f6\u95f4\u590d\u6742\u5ea6\n\n\u8fd9\u91cc\u4e3b\u8981\u662f\u533a\u5206\u5b57\u7b26\u4e32\u6bd4\u8f83\u548c\u7ebf\u6bb5\u6811\u7684\u4e24\u4e2a $\\log n$ \u662f\u4e58\u6cd5\u8fd8\u662f\u52a0\u6cd5\u3002\u6ce8\u610f\u4e0d\u662f\u5728\u7ebf\u6bb5\u6811\u64cd\u4f5c\u65f6\u8fdb\u884c\u6bd4\u8f83\u51fd\u6570\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e58\u6cd5\u539f\u7406\uff0c\u4e24\u8005\u662f\u5e76\u884c\u7684\uff0c\u6240\u4ee5\u6700\u7ec8\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(Tn\\log n)-O(n)$\u3002\n\n# \u4ee3\u7801\n\n### \u6ce8\u610f\u4e8b\u9879\n\u56e0\u4e3a\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u591a\u521d\u59cb\u5316\uff0c\u5acc\u9ebb\u70e6\u7684\u6216\u8005\u60f3\u4e0d\u51fa\u6765\u65e0\u8111 ```memset``` \u5c31\u5b8c\u4e8b\u3002\u5426\u5219\u7684\u8bdd\u7262\u8bb0\uff0c\u6bd4\u8f83\u51fd\u6570\u4e8c\u5206\u7684\u7b54\u6848\u8981\u521d\u59cb\u5316\u4e3a $0$\uff0c\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u8981\u5c06\u61d2\u6807\u8bb0\u8d4b\u503c\u4e3a $0$\u3002    \n\u5269\u4e0b\u7684\u770b\u770b\u4ee3\u7801\u7ec6\u8282\u5c31\u597d\u4e86\uff0c\u4e3b\u8981\u662f\u4e0d\u592a\u597d\u8c03\u3002\n\n```cpp\n/* DP + Hash + SegTree */\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define ls (id << 1)\n#define rs (id << 1 | 1)\n#define mid ((l + r) >> 1)\n\nusing namespace std;\ntypedef unsigned long long ull;\nconst int maxn = 2006;\nconst int base = 131;\n\null Pow[maxn];\null Hash[maxn];\nchar str[maxn];\nint n;\nint l[maxn], r[maxn];\nint f[maxn], g[maxn];\nstruct SegmentTree{\n    int mx, lazy;\n}tr[maxn << 2];\n\nvoid init(){//\u521d\u59cb\u5316\n    Pow[0] = 1;\n    for (int i = 1; i < maxn; i ++){\n        Pow[i] = Pow[i-1] * base;\n    }\n}\n\nvoid preTreat(){//\u6bcf\u6b21\u9884\u5904\u7406\n    for (int i = 1; i <= n; i ++){\n        Hash[i] = Hash[i-1] * base + (str[i] - '0');\n    }\n\n    r[n+1] = n+1;\n    for (int i = 1, j = n; i <= n; i ++, j --){\n        l[i] = str[i] == '0' ? l[i-1] : i, \n        r[j] = str[j] == '0' ? r[j+1] : j;\n    }\n}\n\null getHash(int l, int r){\n    return Hash[r] - Hash[l-1] * Pow[r-l+1];\n}\n\nbool is_greater(int l1, int r1, int l2, int r2){//[l1,r1] > [l2,r2] ?\n    l1 = r[l1], l2 = r[l2]; //\u53bb\u9664\u524d\u5bfc\u96f6\n    int len1 = r1 - l1 + 1, len2 = r2 - l2 + 1;\n    if (len1 > len2) return true;\n    if (len1 < len2) return false;\n\n    int L = 0, R = len1, Mid = 0, ans = 0;\n    while (L <= R){\n        Mid = (L + R) >> 1;\n        if (getHash(l1, l1+Mid-1) == getHash(l2, l2+Mid-1)){\n            ans = Mid;\n            L = Mid + 1;\n        }\n        else{\n            R = Mid - 1;\n        }\n    }\n    if (ans == len1) return false; //\u5b8c\u5168\u4e00\u6837\n    int p1 = l1 + ans, p2 = l2 + ans;\n    return str[p1] > str[p2];\n}\n\nvoid pushup(int id){\n    tr[id].mx = max(tr[ls].mx, tr[rs].mx);\n}\n\nvoid build(int id, int l, int r, int v){\n    /* \u4e00\u5b9a\u8bb0\u5f97\u6e05\u7a7a\u61d2\u6807\u8bb0\uff01 */\n    tr[id].lazy = 0;\n    if (l == r){\n        tr[id].mx = v;\n        return;\n    }\n    build(ls, l, mid, v);\n    build(rs, mid + 1, r, v);\n    pushup(id);\n}\n\nvoid pushdown(int id){\n    if (tr[id].lazy){\n        int temp = tr[id].lazy;\n        tr[ls].mx = max(tr[ls].mx, temp);\n        tr[rs].mx = max(tr[rs].mx, temp);\n        tr[ls].lazy = max(tr[ls].lazy, temp);\n        tr[rs].lazy = max(tr[rs].lazy, temp);\n        tr[id].lazy = 0;\n    }\n}\n\nvoid update(int id, int l, int r, int a, int b, int v){\n    if (a <= l && r <= b){\n        tr[id].mx = max(tr[id].mx, v);\n        tr[id].lazy = max(tr[id].lazy, v);\n        return;\n    }\n    pushdown(id);\n    if (a <= mid) update(ls, l, mid, a, b, v);\n    if (b > mid) update(rs, mid+1, r, a, b, v);\n    pushup(id);\n}\n\nint query(int id, int l, int r, int p){\n    if (l == r){\n        return tr[id].mx;\n    }\n    pushdown(id);\n    if (p <= mid) return query(ls, l, mid, p);\n    else return query(rs, mid+1, r, p);\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    init();\n\n    while (cin >> (str + 1)){\n        n = strlen(str + 1);\n        preTreat();\n        /* \u6b63\u5411DP */\n        build(1, 1, n, 1);\n        for (int i = 1; i <= n; i ++){\n            f[i] = query(1, 1, n, i);\n            int p = i - r[f[i]] + r[i+1];\n            if (!is_greater(r[i+1], p, r[f[i]], i)){\n                p ++;\n            }\n            if (p <= n) update(1, 1, n, p, n, i+1);\n        }\n        \n        /* \u53cd\u5411DP */\n        build(1, 1, n, 0);\n        update(1, 1, n, l[f[n]-1]+1, n, n);\n        for (int i = f[n]; i > 0; i --){\n            g[i] = query(1, 1, n, i);\n            int p = l[max(i-1-g[i]+r[i]-1, 0)] + 1;\n            if (!is_greater(i, g[i], p, i-1)){\n                p = r[p] + 1;\n            }\n            if (p <= i-1) update(1, 1, n, p, i-1, i-1);\n        }\n\n        /* \u8f93\u51fa */\n        for (int i = 1; i <= n; i = g[i] + 1){\n            for (int j = i; j <= g[i]; j ++){\n                cout << str[j];\n            }\n            if (g[i] != n) cout << ',';\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n```\n\n\n------------\n\n\n# \u603b\u7ed3\n\u53cd\u6b63\u8fd9\u9053\u9898\u786e\u5b9e\u6709\u6c34\u5e73\uff0c\u672c\u849f\u84bb\u5199\u8fd9\u9053\u9898\u8fd8\u6709\u5b83\u7684\u9898\u89e3\u4e5f\u6536\u83b7\u4e86\u5f88\u591a\uff0c\u53ef\u80fd\u8bdd\u591a\u6bd4\u8f83\u7e41\u7410\uff0c\u4f46\u6211\u89c9\u5f97\u5e94\u8be5\u80fd\u8bb2\u5f97\u5f88\u6e05\u695a\u3002\n\u611f\u8c22\u89c2\u770b\uff01\n",
        "postTime": 1658537395,
        "uid": 528114,
        "name": "jjsnam",
        "ccfLevel": 6,
        "title": "P2282\u9898\u89e3"
    },
    {
        "content": "P1415 \u62c6\u5206\u6570\u5217\u7684\u52a0\u5f3a\u7248\n\n\u5148\u8003\u8651\u5f31\u5316\u7248\u600e\u4e48\u505a\n\n\u8bbef[i]\u8868\u793a\u67d0\u4e00\u4e32\u6570\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u7684\u53f3\u7aef\u70b9\u662fi\u65f6\uff0c\u5b83\u7684\u5de6\u7aef\u70b9\u7684\u6700\u5927\u503c\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e00\u4e32\u6570\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5c3d\u91cf\u5c0f\uff09\n\n\u90a3\u4e48\u6709$f[j]=max\\{i+1|num[i+1,j]>num[f[i],i]\\}$\n\n\u8fd9\u6837\u63a8\u4e0b\u53bb\uff0cf[N]\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u6570\u7684\u6700\u5c0f\u503c\n\n\u7136\u540e\u6211\u4eec\u628a\u5b83\u94a6\u5b9a\u4f4f\uff0c\u518d\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u63a8\u56de\u6765\uff0c\u7b97\u51fa\u6765\u6700\u524d\u9762\u6570\u7684\u6700\u5927\u503c\n\n\u76f4\u63a5\u505a\u7684\u8bdd\uff0c\u8f6c\u79fb$O(n)$\uff0c\u5224\u65ad\u4e24\u6570\u662f\u5426\u76f8\u7b49$O(n)$\uff0c\u6240\u4ee5\u603b\u5171\u662f$O(n^3)$\u7684\n\n\u663e\u7136\u8fc7\u4e0d\u4e86\u8fd9\u9053\u9898\uff0c\u8003\u8651\u5982\u4f55\u4f18\u5316\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8f6c\u79fb\u5176\u5b9e\u662f\u56fa\u5b9a\u5de6\u7aef\u70b9\uff0c\u627e\u5230\u4e00\u4e9b\u53f3\u7aef\u70b9\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u6570\u6bd4\u5f53\u524d\u7684\u6570\u5927\uff0c\u90a3\u4e48\u53ea\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u53f3\u7aef\u70b9\uff0c\u540e\u9762\u7684\u5c31\u90fd\u6bd4\u5b83\u5927\n\n\u800c\u4e14\u5982\u679c\u4e0d\u8003\u8651\u524d\u7f000\u7684\u8bdd\uff0c\u6070\u597d\u6bd4\u5b83\u5927\u7684\u90a3\u4e2a\u5b50\u4e32\uff0c\u957f\u5ea6\u5c31\u8981\u4e48\u548c\u5b83\u76f8\u7b49\u3001\u8981\u4e48\u662f\u5b83\u7684+1\n\n\u6240\u4ee5\u53ea\u9700\u8981\u627e\u51fa\u6765\u90a3\u4e2a\u957f\u5ea6\u548c\u5b83\u76f8\u7b49\u7684\u5b50\u4e32\uff0c\u6bd4\u8f83\u4ed6\u4fe9\u7684\u5927\u5c0f\uff0c\u8981\u662f\u6bd4\u5b83\u5c0f\u5c31\u52a0\u4e2a1\uff0c\u7136\u540e\u628a\u540e\u9762\u7684\u90fd\u66f4\u65b0\u6389\n\n\u76f4\u63a5\u5224\u5b9a\u662f$O(n)$\u7684\uff0c\u4f46\u7528hash\u5148$O(n)$\u9884\u5904\u7406\uff0c\u5c31\u53ef\u4ee5\u505a\u5230$O(logn)$\uff0c\u5177\u4f53\u505a\u6cd5\u662f\u4e8c\u5206\u627e\u51fa\u4e24\u4e2a\u5b50\u4e32\u7684LCP\uff0c\u518d\u5224\u65adLCP+1\u7684\u5927\u5c0f\n\n\u7136\u540e\u66f4\u65b0\u7684\u65f6\u5019\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u53d6max\u3001\u5355\u70b9\u67e5\u8be2\uff0c\u4e5f\u53ef\u4ee5\u505a\u5230$O(logn)$\n\n\u6240\u4ee5\u590d\u6742\u5ea6$O(Tnlogn)$\n\n\u7136\u800c\u8fd8\u6709\u524d\u7f000\u7684\u95ee\u9898\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u76f4\u63a5\u627e\u548c\u4ed6\u957f\u5ea6\u76f8\u7b49\u7684\u5b50\u4e32\uff0c\u800c\u662f\u8981\u627e\u53bb\u6389\u524d\u7f000\u4ee5\u540e\u548c\u5b83\u53bb\u6389\u524d\u7f000\u4ee5\u540e\u957f\u5ea6\u76f8\u7b49\u7684\u5b50\u4e32\n\n\u53ef\u4ee5\u8bb0\u4e00\u4e2ann0[i]\u8868\u793ai\u4f4d\u7f6e\u540e\u9762\u7684\u7b2c\u4e00\u4e2a\u4e0d\u662f0\u7684\u4f4d\u7f6e,pn0[i]\u8868\u793ai\u4f4d\u7f6e\u524d\u9762\u7684\u7b2c\u4e00\u4e2a\u4e0d\u662f0\u7684\u4f4d\u7f6e\u7136\u540e\u4e71\u641e\n\n\u5012\u7740\u505a\u56de\u6765\u7684\u65f6\u5019\u90fd\u7c7b\u4f3c\uff0c\u7136\u540e\u6211\u5b9a\u4e49\u7684g[i]\u662f\u8868\u793a\u4ee5i\u4e3a\u5de6\u7aef\u70b9\u7684\u6700\u5927\u53f3\u7aef\u70b9\uff0c\u4e5f\u9700\u8981\u5f88\u6ce8\u610f\u524d\u7f000\u7684\u95ee\u9898\n\n\uff08\u6709\u53ef\u80fd\u6211\u53d1\u73b0\u957f\u5ea6\u76f8\u7b49\u7684\u90a3\u4e2a\u6bd4\u5b83\u5c0f\uff0c\u7136\u540e\u60f3\u5f80\u524d\u9876\u4e00\u4e2a\uff0c\u8fd9\u65f6\u5019\u5e94\u8be5\u9876\u5230\u524d\u9762\u7684\u7b2c\u4e00\u4e2a\u4e0d\u4e3a0\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u52a0\u4e00\u4e2a\u524d\u7f000\u8fd8\u662f\u6bd4\u5b83\u5c0f\uff09\n\n\u6ce8\u610fg\u7684\u521d\u503c\u5e94\u8be5\u662fg[pn0[f[N]]+1~f[N]]=N\uff0c\u56e0\u4e3a\u4f60\u627e\u5230\u7684\u90a3\u4e2a\u6700\u5c0f\u503c \u52a0\u4e0a\u4e00\u4e9b\u524d\u7f000\u8fd8\u662f\u6700\u5c0f\u503c\uff0c\u8fd9\u4e9b\u90fd\u662f\u5408\u6cd5\u7684\n\n\u9700\u8981(?)\u7279\u5224\u5168\u90fd\u662f0\u7684\u60c5\u51b5\n\n\u4ee3\u7801\u6539\u6765\u6539\u53bb\u7684\u5199\u7684\u5f88\u4e11\uff0c\u6709\u5f88\u591a\u7ec6\u8282\u5199\u7684\u4e5f\u5f88\u522b\u626d\n\n\uff08\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u5f00O2\u7b2c\u4e00\u4e2a\u70b9\u4f1aOLE\uff09\n\n\uff08\u672c\u6765\u60f3\u7528SA\u6765\u5224\u65ad\u5b50\u4e32\u5927\u5c0f\uff0c\u7136\u540e\u5e38\u6570\u592a\u5927T\u4e86\uff09\n\n\n```cpp\n#include<bits/stdc++.h>\n#define pa pair<int,int>\n#define CLR(a,x) memset(a,x,sizeof(a))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\nconst int maxn=2020,P=131;\n\ninline ll rd(){\n    ll x=0;char c=getchar();int neg=1;\n    while(c<'0'||c>'9'){if(c=='-') neg=-1;c=getchar();}\n    while(c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x*neg;\n}\n\nchar num[maxn];\nint N,M,f[maxn],nn0[maxn],pn0[maxn];\nint laz[maxn<<2],ma[maxn<<2];\null hsh[maxn],bin[maxn];\n\ninline bool bigger(int x1,int x2,int l){\n    int a=1,b=l,k=0;\n    while(a<=b){\n    \tint m=a+b>>1;\n    \tif(hsh[x1+m-1]-hsh[x1-1]*bin[m]==hsh[x2+m-1]-hsh[x2-1]*bin[m]) a=m+1,k=m;\n    \telse b=m-1;\n    }\n    if(k>=l) return 0;\n    else return num[x1+k]>num[x2+k];\n    return 0;\n}\n\ninline void pushdown(int p){\n    if(!laz[p]) return;\n    int a=p<<1,b=p<<1|1;\n    ma[a]=max(laz[p],ma[a]),ma[b]=max(laz[p],ma[b]);\n    laz[a]=max(laz[a],laz[p]),laz[b]=max(laz[b],laz[p]);\n    laz[p]=0;\n}\n\ninline void change(int p,int l,int r,int x,int y,int z){\n    ma[p]=max(ma[p],z);\n    if(x<=l&&r<=y){\n        laz[p]=max(laz[p],z);\n    }else{\n        pushdown(p);\n        int m=l+r>>1;\n        if(x<=m) change(p<<1,l,m,x,y,z);\n        if(y>=m+1) change(p<<1|1,m+1,r,x,y,z);\n    }\n}\n\ninline int query(int p,int l,int r,int x){\n    if(l==r) return ma[p];\n    int m=l+r>>1;\n    pushdown(p);\n    if(x<=m) return query(p<<1,l,m,x);\n    else return query(p<<1|1,m+1,r,x);\n}\n\nint main(){\n    //freopen(\".in\",\"r\",stdin);\n    int i,j,k;\n    bin[0]=1;for(i=1;i<=2000;i++) bin[i]=bin[i-1]*P;\n    while(~scanf(\"%s\",num+1)){\n        N=strlen(num+1);\n        for(i=1;i<=N;i++)\n        \thsh[i]=hsh[i-1]*P+num[i];\n        CLR(ma,0);CLR(laz,0);\n        nn0[N+1]=N+1;\n        for(i=N;i>=0;i--)\n            nn0[i]=(num[i+1]!='0')?i+1:nn0[i+1];\n        for(i=1;i<=N;i++)\n            pn0[i]=(num[i-1]!='0')?i-1:pn0[i-1];\n        change(1,1,N,1,N,1);\n        for(i=1;i<=N;i++){\n            f[i]=query(1,1,N,i);\n            int y=nn0[i],nxt=y+i-nn0[f[i]-1]+1;\n            if(bigger(y,nn0[f[i]-1],i-nn0[f[i]-1]+1)) nxt--;\n            if(nxt<=N) change(1,1,N,nxt,N,i+1);\n        }\n        M=f[N];\n        CLR(f,0);CLR(ma,0);CLR(laz,0);\n        change(1,1,N,pn0[M]+1,M,N);\n        for(i=M;i;i--){\n            f[i]=query(1,1,N,i);\n            int y=nn0[i-(f[i]-nn0[i-1]+1)-1],nxt;\n            if(i-y<f[i]-nn0[i-1]+1||(i-y==f[i]-nn0[i-1]+1&&bigger(nn0[i-1],y,f[i]-nn0[i-1]+1))) nxt=pn0[y]+1;\n            else nxt=y+1;\n            if(nxt<=i-1) change(1,1,N,nxt,i-1,i-1);\n        }\n        if(N<nn0[0]) printf(\"%s\",num+1); \n        else{\n            for(i=1;i<=N;i=f[i]+1){\n                for(j=i;j<=f[i];j++)\n                    putchar(num[j]);\n                if(f[i]!=N) putchar(',');\n            }\t\n        }printf(\"\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1540780030,
        "uid": 57266,
        "name": "__Ressed__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2282 \u3010[HNOI2003]\u5386\u53f2\u5e74\u4efd\u3011"
    },
    {
        "content": "\u6b22\u8fce\u6765[\u6211\u7684\u535a\u5ba2](https://www.luogu.com.cn/blog/Conless/post-xie-ti-bao-gao-p2282-li-shi-nian-fen-p1415-chai-fen-shuo-lie)\u67e5\u770b\n\n\u5f3a\u5316\u7248 [[HNOI2003]\u5386\u53f2\u5e74\u4efd](https://www.luogu.com.cn/problem/P2282) & \u5f31\u5316\u7248 [\u62c6\u5206\u6570\u5217](https://www.luogu.com.cn/problem/P1415)\n\n\u6211\u4eec\u5148\u6765\u8003\u8651\u5f31\u5316\u7248\uff1a\n\n\u9996\u5148\u8fdb\u884c\u6b63\u5411 $dp$\uff1a\n\n\u8bbe $f_i$ \u8868\u793a\u4ee5 $i$ \u4e3a\u7ed3\u5c3e\u7684\u6700\u5927\u524d\u7f00\u7684\u8d77\u70b9\u4e0b\u6807\uff0c$num_{i,j}$ \u4e3a\u4e0b\u6807 $i-j$ \u6784\u6210\u7684\u6570\u5b57\u3002\u663e\u7136\uff0c\u8fd9\u4e2a\u4e0b\u6807\u8d8a\u5927\uff08\u63a5\u8fd1 $i$\uff09\uff0c\u524d\u7f00\u8d8a\u5c0f\uff0c\u5f97\u5230\u7684\u7b54\u6848\u5c31\u8d8a\u4f18\uff0c\u6240\u4ee5\uff1a\n\n$f_i=max\\{j\\}, j\\in [1,i] \\& \\quad num_{f_{j-1},j-1}<num_{j,i}$\n\n```cpp\n    f1[1] = 1;\n    for (int i = 2; i <= n; i++)\n    {\n        f1[i] = 1;\n        for (int j = i; j >= 1; j--)\n            if (comp(f1[j - 1], j, i))\n            {\n                f1[i] = j;\n                break;\n            }\n    }\n```\n\n$comp()$\u7684\u6734\u7d20\u5b9e\u73b0\u65b9\u5f0f\uff1a\n```cpp\nbool comp(int l, int m, int r)\n{\n    int len1 = m - l, len2 = r - m + 1;\n    int st1 = l, ed1 = m - 1;\n    int st2 = m, ed2 = r;\n    if (len1 < len2)\n    {\n        while (st2 - m + 1 <= len2 - len1)\n        {\n            if (str[st2] != '0')\n                return 1;\n            st2++;\n        }\n    }\n    if (len1 > len2)\n    {\n        while (st1 - l + 1 <= len1 - len2)\n        {\n            if (str[st1] != '0')\n                return 0;\n            st1++;\n        }\n    }\n    len1 = len2 = min(len1, len2);\n    for (int i = 0; i < len1; i++)\n        if (str[st1 + i] != str[st2 + i])\n            return str[st2 + i] > str[st1 + i];\n    return 0;\n}\n```\n\n\u518d\u8003\u8651\u53cd\u5411 $dp$\uff1a\n\n\u8bbe $f_i$ \u8868\u793a\u4ee5 $i$ \u4e3a\u8d77\u70b9\u7684\u6700\u5927\u540e\u7f00\u7684\u7ec8\u70b9\u4e0b\u6807\uff0c\u663e\u7136\uff0c\u8fd9\u4e2a\u4e0b\u6807\u8d8a\u5927\uff08\u63a5\u8fd1 $n$\uff09\uff0c\u540e\u7f00\u8d8a\u5927\uff0c\u5f97\u5230\u7684\u7b54\u6848\u5c31\u8d8a\u4f18\uff0c\u6240\u4ee5\uff1a\n\n$f_i=max\\{j\\}, j\\in [i,j] \\& \\quad num_{i,j}<num_{j+1,f_{j+1}}$\n\n\u4f46\u662f\u6211\u4eec\u5fc5\u987b\u8003\u8651\u5230\u524d\u5bfc\u96f6\u5bf9\u4e00\u4e2a\u6570\u5b57\u7684\u5927\u5c0f\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u90a3\u4e48\u5bf9\u4e8e\u7b2c\u4e00\u904d\u6b63\u5411 $dp$ \u5f97\u51fa\u7684\u6700\u5927\u7684\u6700\u540e\u4e00\u4e2a\u6570\uff0c\u53ef\u4ee5\u5728\u5176\u524d\u9762\u52a0\u4e0a\u82e5\u5e72\u4e2a\u524d\u5bfc\u96f6\uff0c\u8fd9\u4e9b\u524d\u5bfc\u96f6\u5728 $f$ \u6570\u7ec4\u4e2d\u6307\u5411\u7684\u4e0b\u6807\u5e94\u8be5\u90fd\u4e3a $n$\n```cpp\n    int las = n;\n    while (las >= f1[n] || str[las] == '0')\n    {\n        f2[las] = n;\n        las--;\n    }\n    for (int i = las; i >= 1; i--)\n    {\n        f2[i] = i;\n        for (int j = n - 1; j > i; j--)\n            if (comp(i, j + 1, f2[j + 1]))\n            {\n                f2[i] = j;\n                break;\n            }\n    }\n```\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u5b8c\u6210\u5f31\u5316\u7248\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n\n$DP: O(n^2)$\n\n\u6bcf\u6b21\u6bd4\u8f83\uff1a$O(n)$\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^3)$\n\n\u5f53\u7136\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u5e76\u4e0d\u80fd\u5e2e\u52a9\u6211\u4eec\u901a\u8fc7\u5176\u5f3a\u5316\u7248\uff1a\n\n$T=1000, n=2000$\uff0c\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6$O(Tn)-O(Tnlogn)$\n\n\u5bf9\u4e8e\u539f\u7b97\u6cd5\u8003\u8651\u8fdb\u884c\u4f18\u5316\uff1a\n1. \u5bf9\u4e8e\u7b2c\u4e00\u904d $dp$\uff0c\u8003\u8651\u5c06\u6bcf\u4e00\u4e2a\u786e\u5b9a\u7684 $f_j$ \u76f4\u63a5\u5f80\u540e\u66f4\u65b0\uff0c\u51e1\u662f\u6ee1\u8db3 $num_{f[j], j} < num_{j+1, i}$ \u7684 $f_i$\uff0c\u5747\u53ef\u4ee5\u88ab $j$ \u66f4\u65b0\uff0c\u5f88\u663e\u7136\uff0c\u6bcf\u4e00\u6b21\u5747\u53ef\u66f4\u65b0\u4e00\u4e2a\u533a\u95f4 $[i_{min}, n]$\n\n2. \u5bf9\u4e8e\u7b2c\u4e8c\u904d $dp$\uff0c\u8003\u8651\u5c06\u6bcf\u4e00\u4e2a\u786e\u5b9a\u7684 $f_j$ \u76f4\u63a5\u5f80\u524d\u66f4\u65b0\uff0c\u51e1\u662f\u6ee1\u8db3 $num_{i, j} < num_{j+1, f_{j+1}}$ \u7684 $f_i$\uff0c\u5747\u53ef\u4ee5\u88ab $j$ \u66f4\u65b0\uff0c\u5f88\u663e\u7136\uff0c\u6bcf\u4e00\u6b21\u5747\u53ef\u66f4\u65b0\u4e00\u4e2a\u533a\u95f4 $[i_{max}, j]$\n\n\u4ee5\u4e0a\u4e24\u6b65\uff0c\u5747\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u5c06 $DP$ \u5c06\u586b\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u81f3 $O(nlogn)$\n\n\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u65e0\u6cd5\u5feb\u901f\u5f97\u5230\u4e24\u6b21 $DP$ \u7684 $i_{min}, i_{max}$\uff0c\u6b64\u65f6\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7528\u4f4d\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u7528\u7b2c\u4e00\u6b21DP\u8fdb\u884c\u4e3e\u4f8b\uff1a\n\n$\\because num_{f_{j-1},j-1}<num_{j,i}$\n\n$\\therefore (j-1)-f_{j-1}+1 \\le i-j+1$\uff08\u4e0d\u8003\u8651\u524d\u5bfc\u96f6\uff09\n\n$\\therefore i \\ge 2j-f_{j-1}-1$\n\n\u82e5\u8003\u8651\u524d\u5bfc\u96f6\uff0c\u53ef\u4ee5\u9884\u5904\u7406\u5c06 $i$ \u5de6\u8fb9\u4e0e\u53f3\u8fb9\uff08\u5305\u62ec $i$\uff09\u7684\u7b2c\u4e00\u4e2a\u975e\u96f6\u6570\u5b57\u6c42\u51fa\u6765\uff0c\u8868\u793a\u4e3a $lasn_i$ \u4e0e $nexn_i$\uff0c\u90a3\u4e48\u4e0a\u5f0f\u5c06\u53d8\u4e3a\uff1a\n\n$i_{min} = nexn_i + (i - nexn_{f_{i - 1}}) - 1$\n\n\u6ce8\u610f\u5230\u63a8\u5bfc\u7684\u524d\u4e24\u4f4d\u5e76\u975e\u7b49\u4ef7\u8f6c\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u518d\u8fdb\u884c\u4e00\u6b21 $comp(f_{j-1}, j, i_{max})$\uff0c\u82e5\u4e0d\u5408\u6cd5\u518d\u5f80\u540e\u8df3\u4e00\u4f4d\u5373\u53ef\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u7684\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u964d\u5230\u4e86 $O(Tn^2)$\uff0c\u5f53\u7136\u5b9e\u9645\u4e0a\u6bd4\u8f83\u51fd\u6570\u662f\u5b8c\u5168\u8dd1\u4e0d\u6ee1\u7684\uff0c\u518d\u5957\u4e00\u4e2a $O2$ \u53ef\u80fd\u80fd\u5361\u8fc7\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u518d\u6765\u8003\u8651\u6bcf\u4e00\u6b21 $comp$ \u51fd\u6570\u7684\u4f18\u5316\uff0c\u4e4b\u524d\u8003\u8651\u7684\u662f\u6734\u7d20\u6bd4\u8f83\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u53ea\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u7531\u6570\u5b57\u6784\u6210\u7684\u5b57\u4e32\u7684\u5927\u5c0f\uff0c\u4e0d\u59a8\u8003\u8651\u54c8\u5e0c\u7b97\u6cd5\uff1a\n\n```cpp\nvoid pre_hash()\n{\n    num[0] = 0;\n    for (int i = 1; i <= n; i++)\n        num[i] = (1LL * num[i - 1] * 10 + str[i] - '0') % MOD;\n}\n\ninline bool equal(int st1, int st2, int len) \n{\n    int ed1 = st1 + len - 1, ed2 = st2 + len - 1;\n    return (num[ed1] - fac[len] * num[st1 - 1] % MOD + MOD) % MOD == (num[ed2] - fac[len] * num[st2 - 1] % MOD + MOD) % MOD;\n}\n```\n\n\u4f46\u662f\uff0c\u4ed6\u5047\u4e86\uff01\uff01\uff01\n![](https://cdn.luogu.com.cn/upload/image_hosting/yg0q5u4j.png)\n\n\u53ef\u80fd\u662f\u6211\u7684\u6a21\u6570\u6216\u8fdb\u5236\u5199\u7684\u592a\u5f31\u4e86\uff0c\u6240\u4ee5\u5355\u54c8\u5e0c\u5c31\u8fd9\u6837\u88ab\u5361\u4e86\uff0c\u4e8e\u662f\u6700\u540e\u6539\u4e86\u4e2a\u53cc\u54c8\u5e0c\u7ec8\u4e8e\u52c9\u5f3a\u8fc7\u4e86\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN = 2e3 + 5;\nconst ll MOD1 = 1e9 + 7, MOD2 = 19260817;\n\nint T, n;\nchar str[MAXN];\nll num1[MAXN], num2[MAXN], fac1[MAXN], fac2[MAXN];\nint f1[MAXN], f2[MAXN];\nint nexn[MAXN], lasn[MAXN];\n\nclass SegmentTree\n{\n\n#define sn segTree[node]\n\n    struct TreeNode {\n        int l, r;\n        int lson, rson;\n        int data;\n    } segTree[MAXN << 2];\n\n    void pushdown(int node)\n    {\n        if (sn.data)\n        {\n            segTree[sn.lson].data = max(segTree[sn.lson].data, sn.data);\n            segTree[sn.rson].data = max(segTree[sn.rson].data, sn.data);\n            sn.data = 0;\n        }\n    }\n\npublic:\n\n    void build(int node, int l, int r)\n    {\n        sn.l = l;\n        sn.r = r;\n        sn.data = 0;\n        if (l != r)\n        {\n            sn.lson = node << 1;\n            sn.rson = node << 1 | 1;\n            int mid = (l + r) >> 1;\n            build(sn.lson, l, mid);\n            build(sn.rson, mid + 1, r);\n        }\n    }\n\n    int ask(int node, int pos)\n    {\n        if (sn.l == sn.r)\n            return sn.data;\n        pushdown(node);\n        int mid = (sn.l + sn.r) >> 1;\n        if (pos <= mid)\n            return ask(sn.lson, pos);\n        else return ask(sn.rson, pos);\n    }\n\n    void change(int node, int l, int r, int val)\n    {\n        if (l > sn.r || r < sn.l)\n            return;\n        if (l <= sn.l && r >= sn.r)\n            sn.data = max(sn.data, val);\n        else {\n            pushdown(node);\n            change(sn.lson, l, r, val);\n            change(sn.rson, l, r, val);\n        }\n    }\n} stree;\n\ninline bool equal(int st1, int st2, int len) \n{\n    int ed1 = st1 + len - 1, ed2 = st2 + len - 1;\n    bool res1 = (num1[ed1] - fac1[len] * num1[st1 - 1] % MOD1 + MOD1) % MOD1\n             == (num1[ed2] - fac1[len] * num1[st2 - 1] % MOD1 + MOD1) % MOD1;\n    bool res2 = (num2[ed1] - fac2[len] * num2[st1 - 1] % MOD2 + MOD2) % MOD2\n             == (num2[ed2] - fac2[len] * num2[st2 - 1] % MOD2 + MOD2) % MOD2;\n    return res1 & res2;\n}\n\nbool comp(int l, int m, int r)\n{\n    int st1 = l, ed1 = m - 1;\n    int st2 = m, ed2 = r;\n    st1 = nexn[st1];\n    st2 = nexn[st2];\n    int len1 = ed1 - st1 + 1, len2 = ed2 - st2 + 1;\n    if (len2 <= 0)\n        return 0;\n    if (len1 <= 0)\n        return 1;\n    if (len1 != len2)\n        return len1 < len2;\n    int le = 0, ri = len1 - 1, res = -1;\n    while (le <= ri)\n    {\n        int mid = (le + ri) >> 1;\n        if (equal(st1, st2, mid))\n        {\n            res = mid;\n            le = mid + 1;\n        }\n        else ri = mid - 1;\n    }\n    return str[st1 + res] < str[st2 + res];\n}\n\nvoid pre_pow()\n{\n    fac1[0] = 1LL;\n    for (int i = 1; i <= 2000; i++)\n        fac1[i] = 1LL * fac1[i - 1] * 10 % MOD1;\n    fac2[0] = 1LL;\n    for (int i = 1; i <= 2000; i++)\n        fac2[i] = 1LL * fac2[i - 1] * 11 % MOD2;\n}\n\nvoid pre_hash()\n{\n    num1[0] = 0;\n    for (int i = 1; i <= n; i++)\n        num1[i] = (1LL * num1[i - 1] * 10 + str[i] - '0') % MOD1;\n    num2[0] = 0;\n    for (int i = 1; i <= n; i++)\n        num2[i] = (1LL * num2[i - 1] * 11 + str[i] - '0') % MOD2;\n}\n\nvoid deal_zero()\n{\n    for (int i = n, j = n + 1; i >= 1; i--)\n    {\n        if (str[i] != '0')\n            j = i;\n        nexn[i] = j;\n    }\n    for (int i = 1, j = 0; i <= n; i++)\n    {\n        if (str[i] != '0')\n            j = i;\n        lasn[i] = j;\n    }\n}\n\nint main()\n{\n    pre_pow();\n    while (scanf(\"%s\", str + 1) != EOF)\n    {\n        n = strlen(str + 1);\n        pre_hash();\n        deal_zero();\n        stree.build(1, 1, n);\n        stree.change(1, 1, n, 1);\n        f1[1] = 1;\n        for (int i = 2; i <= n; i++)\n        {\n            int nex = nexn[i] + (i - nexn[f1[i - 1]]) - 1;\n            if (!comp(f1[i - 1], i, nex))\n                nex++;\n            stree.change(1, nex, n, i);\n            f1[i] = stree.ask(1, i);\n        }\n        int las = lasn[f1[n] - 1];\n        stree.build(1, 1, n);\n        stree.change(1, las + 1, n, n);\n        f2[n] = n;\n        for (int i = n - 1; i >= 1; i--)\n        {\n            f2[i] = max(i, stree.ask(1, i));\n            int fir = i - (f2[i + 1] - nexn[i + 1]);\n            if (!comp(fir, i + 1, f2[i + 1]))\n                fir++;\n            fir = lasn[fir - 1] + 1;\n            if (fir < 1) fir = 1;\n            stree.change(1, fir, i - 1, i);\n        }\n        \n        for (int i = 1; i <= n; i++)\n        {\n            int j = i;\n            while (j <= f2[i] && j <= n)\n                putchar(str[j++]);\n            i = j - 1;\n            if (i != n) putchar(',');\n        }\n        putchar('\\n');\n    }\n    return 0;\n}\n```",
        "postTime": 1606480784,
        "uid": 58826,
        "name": "Conless",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2282 \u3010[HNOI2003]\u5386\u53f2\u5e74\u4efd\u3011"
    }
]