[
    {
        "content": "\u770b\u5230\u9898\u76ee\uff0c\u53ef\u4ee5\u60f3\u5230\u62d3\u6251\u6392\u5e8f\u3002\u4f46\u662f\u5982\u679c\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\uff0c\u90a3\u5c31\u9519\u4e86\u3002\n\n\u53ef\u4ee5\u4e3e\u51fa\u53cd\u4f8b\uff1a$4$\u79cd\u83dc\u80b4\uff0c\u9650\u5236\u4e3a$<2,4><3,1>$\uff0c\n\n\u90a3\u4e48\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u662f$2,3,1,4$\uff0c\u4f46\u9898\u76ee\u8981\u6c42\u7684\u6700\u4f18\u89e3\u662f$3,1,2,4$\u3002\n\n\u7ee7\u7eed\u8003\u8651\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u5728\u5408\u6cd5\u8303\u56f4\u5185\u5c3d\u53ef\u80fd\u5927\uff0c\u90a3\u4e48\u8fd9\u6837\u662f\u7edd\u5bf9\u6709\u5229\u7684\u3002\n\n\u56e0\u4e3a\u5982\u679c\u8bbe\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f$x$\uff0c\u90a3\u4e48\u9664\u4e86$x$\u4e4b\u5916\u7684\u6240\u6709\u6570\u90fd\u4e0d\u4f1a\u88ab\u653e\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\u800c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u524d\u9762\u6240\u6709\u5c0f\u4e8e$x$\u7684\u6570\u90fd\u5c3d\u91cf\u9760\u524d\uff08\u5927\u4e8e$x$\u7684\u6570\uff0c\u867d\u7136\u4e5f\u80fd\u9760\u524d\uff0c\u4f46\u7531\u4e8e$x$\u7684\u4f4d\u7f6e\u5df2\u7ecf\u56fa\u5b9a\uff0c\u56e0\u6b64\u6ca1\u6709\u7528\uff09\uff0c\u8fbe\u5230\u9898\u76ee\u7684\u76ee\u6807\u3002\n\n\u56e0\u6b64\uff0c\u6700\u4f18\u89e3\u5c31\u662f\u7b26\u5408\u6761\u4ef6\u7684\u6392\u5217\u4e2d\uff0c**\u53cd\u5e8f\u5217**\u7684\u5b57\u5178\u5e8f**\u6700\u5927**\u7684\u6392\u5217\u3002\n\n\u6240\u4ee5\uff0c\u5728\u53cd\u56fe\u4e0a\u8dd1\u62d3\u6251\u6392\u5e8f\uff0c\u6c42\u6700\u5927\u5b57\u5178\u5e8f\u3002\u5728\u5b9e\u73b0\u4e0a\uff0c\u7531\u4e8e\u9700\u8981\u591a\u6b21\u627e\u51fa\u961f\u5217\u4e2d\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u7528\u5806\u4ee3\u66ff\u961f\u5217\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\nconst int N = 3e5 + 5;\npriority_queue<int> Hea;\nint n, m, ecnt, nxt[N], adj[N], go[N], cnt[N], ans[N];\nvoid add_edge(int u, int v) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v; cnt[v]++;\n}\nvoid work() {\n    int i, x, y, tot = 0; ecnt = 0; memset(adj, 0, sizeof(adj));\n    memset(cnt, 0, sizeof(cnt)); n = read(); m = read(); bool flag = 0;\n    for (i = 1; i <= m; i++) {\n        x = read(); y = read();\n        add_edge(y, x); if (x == y) flag = 1;\n    }\n    if (flag) return (void) puts(\"Impossible!\");\n    for (i = 1; i <= n; i++) if (!cnt[i]) Hea.push(i);\n    while (!Hea.empty()) {\n        int u = Hea.top(); Hea.pop(); ans[++tot] = u;\n        for (int e = adj[u], v; e; e = nxt[e])\n            if (!(--cnt[v = go[e]])) Hea.push(v);\n    }\n    if (tot < n) return (void) puts(\"Impossible!\");\n    for (i = n; i; i--) printf(\"%d \", ans[i]);\n    printf(\"\\n\");\n}\nint main() {\n    int T = read();\n    while (T--) work();\n    return 0;\n}\n```",
        "postTime": 1511875609,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "# [HNOI2015]\u83dc\u80b4\u5236\u4f5c\u8d2a\u5fc3\u7684\u8bc1\u660e\n\n[\u5e7f\u544a](https://www.cnblogs.com/cj-chd/p/11780098.html)\n\n\u5148\u5410\u69fd\u4e00\u53e5\u4e3a\u4ec0\u4e48\u7f51\u4e0a\u90fd\u6ca1\u4eba\u8bc1\u8fd9\u4e2a\u4e1c\u897f\uff0c\u6211\u89c9\u5f97\u4e00\u70b9\u4e5f\u4e0d\u663e\u7136\u554a\u3002\u3002\u3002\n\n\u5224\u73af\u4e0d\u7528\u8bf4\u4e86\uff0c\u73b0\u5728\u5904\u7406\u4e00\u4e2aDAG\u3002\u8003\u8651\u6309\u9898\u610f\u6a21\u62df\uff1a\u5efa\u53cd\u56fe\uff08\u8fb9\u4ece\u540e\u9009\u7684\u70b9\u8fde\u5411\u5148\u9009\u7684\u70b9\uff09\uff0c\u6bcf\u6b21\u627e\u5168\u5c40\u6700\u5c0f\u7684\u70b9\uff0c\u5e76\u628a\u5019\u9009\u96c6\u5408\u7f29\u5c0f\u4e3a\u8fd9\u4e2a\u70b9\u5728\u56fe\u4e0a\u7684\u6240\u6709\u540e\u7ee7\uff0c\u518d\u5728\u5f53\u524d\u5019\u9009\u96c6\u5408\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u70b9\u5e76\u628a\u5019\u9009\u96c6\u5408\u66f4\u65b0\u4e3a\u5b83\u7684\u540e\u7ee7\uff0c\u4e0d\u65ad\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u81f3\u5019\u9009\u96c6\u5408\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u5c31\u628a\u8fd9\u4e2a\u70b9\u4ece\u56fe\u4e0a\u5220\u9664\u5e76\u653e\u5230\u7b54\u6848\u5e8f\u5217\u7684\u672b\u5c3e\u3002\u8fd9\u79cd\u505a\u6cd5\u6700\u540e\u5f97\u5230\u7684\u7b54\u6848\u5e8f\u5217\u7684\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\u3002\n\n\u89c2\u5bdf\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u53d1\u73b0\u76f4\u63a5\u6a21\u62df\u4e0d\u592a\u80fd\u505a\u3002\u8003\u8651\u6bcf\u6b21\u9009\u4e86\u5168\u5c40\u6700\u5c0f\u70b9\uff0c\u8fd9\u4e2a\u70b9\u548c\u5b83\u7684\u540e\u7ee7\u5728\u7b54\u6848\u5e8f\u5217\u4e0a\u4e00\u5b9a\u4f1a\u5360\u636e\u4e00\u6bb5\u524d\u7f00\uff0c\u5e76\u4e14\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u5728\u8fd9\u6bb5\u524d\u7f00\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u56e0\u6b64\u628a\u8fd9\u4e9b\u70b9\u5728\u56fe\u4e0a\u5220\u6389\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5176\u5b83\u70b9\u7684\u51b3\u7b56\uff0c\u800c\u4e14\u5904\u7406\u8fd9\u4e2a\u70b9\u7684\u540e\u7ee7\u5c31\u662f\u4e00\u4e2a\u5b50\u95ee\u9898\u3002\u6211\u4eec\u6bcf\u6b21\u90fd\u53d6\u5f53\u524d\u7684\u5168\u5c40\u6700\u5c0f\u70b9\u5e76\u628a\u5b83\u548c\u5b83\u7684\u540e\u7ee7\u5728\u56fe\u4e0a\u5220\u9664\uff0c\u6700\u540e\u5220\u6389\u7684\u70b9\u4e00\u5b9a\u662f\u5f53\u524d\u6ca1\u6709\u5165\u5ea6\u7684\u6700\u5927\u7684\u70b9\uff0c\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u4f1a\u88ab\u653e\u5728\u7b54\u6848\u5e8f\u5217\u7684\u672b\u5c3e\uff0c\u5982\u679c\u628a\u8fd9\u4e2a\u70b9\u5220\u9664\uff0c\u5269\u4e0b\u7684\u6240\u6709\u70b9\u53c8\u6210\u4e3a\u4e86\u4e00\u4e2a\u5b50\u95ee\u9898\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6b63\u786e\u7684\u51b3\u7b56\uff1a\u6bcf\u6b21\u53d6\u5f53\u524d\u6ca1\u6709\u5165\u5ea6\u7684\u6700\u5927\u7684\u70b9\u5220\u9664\u5e76\u653e\u5230\u7b54\u6848\u5e8f\u5217\u7684\u672b\u5c3e\u3002\u5b9e\u9645\u4e0a\u5c31\u662f\u5230\u5904\u8bf4\u7684\u62ff\u5927\u6839\u5806\u62d3\u6251\u6392\u5e8f\u7684\u62d3\u6251\u53cd\u5e8f\u3002\n\n",
        "postTime": 1572656143,
        "uid": 91933,
        "name": "newbiechd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "### \u8fd9\u9053\u9898\u76ee\u662f\u7ec3\u624b\u62d3\u6251\u7684\u597d\u9898\u4e4b\u4e00\u3002\n\n\u5c0f\u7f16\u7684[\u62d3\u6251\u6559\u7a0b](https://80049.blog.luogu.org/kuai-su-ru-shou-ta-pu-pai-xu)\uff0c\u6b22\u8fce\u6765\u770b\u3002~~\u6b64\u9898\u8bc4\u4e3a\u7d2b\u9898\u4f1a\u4e0d\u4f1a\u504f\u9ad8\uff1f~~\n\n\n------------\n\n### \u601d\u8def\uff1a\n\n$1)$\u5148\u8003\u8651$Impossible$\u7684\u60c5\u51b5\u3002\u5f88\u660e\u663e\uff0c\u7531\u4e8e\u8fd9\u662f\u4e2a\u6709\u5411\u56fe\uff0c\u800c\u505a\u83dc\u54c1\u5fc5\u5b9a\u6709\u4e00\u4e2a\u662f\u53ef\u4ee5**\u76f4\u63a5**\u52a8\u624b\u505a\u7684\uff0c\u8fd9\u4e5f\u610f\u5473\uff0c\u5982\u679c\u6ca1\u6709\u70b9\u5165\u5ea6\u4e3a$0$\uff0c\u5373\u51fa\u73b0\u4e86**\u95ed\u73af**\uff0c\u90a3\u4e48\u5c31\u4e0d\u7b26\u9898\u610f\u3002\n\n> \u5224\u65ad\u73af\u5f88\u7b80\u5355\uff0c\u5728\u62d3\u6251\u5b8c\u4e86\u7684\u65f6\u5019 \u770b\u770b\u7b54\u6848\u6570\u7ec4\u6709\u6ca1\u6709$n$\u4e2a\uff0c\u6ca1\u6709\u8bc1\u660e\u6709\u70b9\u5165\u4e0d\u4e86\u961f\uff0c\u5373\u6ca1\u6709\u70b9\u5165\u5ea6\u4e3a$0$,\u51fa\u73b0\u73af\u3002\n\n$2)$\u53ef\u662f\u8be5\u600e\u4e48\u62d3\u6251\u5462\uff1f\u4e0d\u59a8\u8bbe\u7f16\u53f7\u5c0f\u7684\u83dc\u4e3a$a$\uff0c\u7f16\u53f7\u5927\u7684\u83dc\u4e3a$b$\u3002\u6211\u4eec\u60f3\u8981$a$\u5c3d\u91cf\u5f80\u524d\u9760\uff0c\u53ef\u662f\u8d2a\u5fc3\u5f88\u5bb9\u6613\u4e3e\u51fa\u53cd\u4f8b\uff08\u770b\u5176\u4ed6\u4eba\u9898\u89e3\u6709\uff09\uff0c\u8fd9\u6837\u505a\u4e0d\u597d\u3002\u90a3\u4e48\u6362\u79cd\u65b9\u5411\uff0c\u6211\u4eec\u8ba9$b$\u5c3d\u91cf\u5f80\u540e\u9760\uff0c**\u4e0d\u8bba$b$\u5177\u4f53\u5728\u54ea\uff0c\u6211\u4eec\u90fd\u80fd\u4fdd\u8bc1$a$\u5728\u524d\u9762\uff0c\u56e0\u6b64\u5c31\u9700\u8981\u53cd\u5411\u8dd1\u62d3\u6251\u3002\u8ba9$b$\u8fde\u5411$a$\uff0c\u8dd1\u53cd\u56fe\u7684\u62d3\u6251\u3002**\n\n> \u6ce8\u610f\uff1a\u6211\u4eec\u8ba9\u7f16\u53f7\u8d8a\u5927\uff0c\u8d8a\u5f80\u540e\u9760\uff0c\u6240\u4ee5\u8981\u6bcf\u6b21\u961f\u5217\u90fd\u53d6\u6700\u5927\u503c\uff0c\u56e0\u6b64\u5c31\u7528\u5927\u6839\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\u7ef4\u62a4\u3002\n\n$3)$\u8bf4\u8bf4\u5751\u70b9~~\uff08\u5bb3\u6211\u8c03\u8bd5\u90a3\u4e48\u4e45\u4e86\uff09~~\uff1a\n\n> \u7531\u4e8e\u6709\u591a\u7ec4\u6570\u636e\uff0c\u56e0\u6b64\u522b\u5fd8\u8bb0\u6bcf\u6b21\u505a\u5b8c\u8981\u6e05\u7a7a\u6570\u7ec4\u3002\u5305\u62ec\u7b54\u6848\u6570\u7ec4\u548c\u4e0b\u6807\uff0c\u5165\u5ea6\u6570\u7ec4\uff0c\u90bb\u63a5\u94fe\u8868\uff0c\u5806\u7b49\u3002\n\n> \u7531\u4e8e\u6211\u4eec\u53cd\u56fe\u8dd1\u62d3\u6251\uff0c\u56e0\u6b64\u7b54\u6848\u6570\u7ec4\u5b58\u50a8\u4e5f\u662f\u53cd\u7684\uff0c\u8f93\u51fa\u7684\u65f6\u5019\u8bb0\u5f97\u5012\u5e8f\u3002\n\n> \u8003\u8651\u5230\u5185\u5b58\u4e0e\u65f6\u95f4\u95ee\u9898\uff0c\u4e0d\u8981\u7528\u90bb\u63a5\u77e9\u9635\u5efa\u56fe\u3002\u90bb\u63a5\u94fe\u8868\u5b9e\u73b0\u6b64\u9898\u7528$vector$\u4f1a\u66f4\u7b80\u5355\uff08\u5177\u4f53\u5b9e\u73b0\u770b\u7a0b\u5e8f\u5927\u5bb6\u5c31\u80fd\u61c2\uff09\uff01\n\n\n------------\n\n \u4e00\u4e2a\u7f16\u7a0b\u65f6\u7684\u8bed\u6cd5\u95ee\u9898\uff1a\n \n`const int tmp=q.top();`\u4e0e`const int& tmp=q.top();`\u76f8\u6bd4\uff0c**\u540e\u8005**\u4f1a\u5bfc\u81f4\u4e00\u4e9b**\u4e0d\u53ef\u9884\u6599\u7684\u9519\u8bef**\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\uff09\u3002\u6240\u4ee5\u5f15\u7528\u7b26&\uff0c\u8fd8\u662f\u522b\u4e71\u7528\u3002\n\n~~\u6c42\u597d\u5fc3\u4eba\u544a\u8bc9\u4f5c\u8005\u4e3a\u4ec0\u4e48\u3002~~\n\n------------\n\u7a0b\u5e8f\u5982\u4e0b\uff0c\u8bf7\u770b\u6ce8\u91ca\uff1a~~\uff08\u4f5c\u8005\u81ea\u8ba4\u4e3a\u7801\u98ce\u5f88\u597dQWQ\uff09~~\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include<vector>\nusing namespace std;\n\nconst int MAXN=100005;\nint n,m,cnt;//cnt\u662f\u7b54\u6848\u6570\u7ec4\u7684\u4e0b\u6807\nint indeg[MAXN],ans[MAXN];\nvector <int> edge[MAXN];//vector\u5efa\u56fe\u5c31\u662f\u65b9\u4fbf\uff01\n \nvoid input(void)\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        cin>>x>>y;\n        edge[y].push_back(x);//\u53cd\u5411\u5efa\u56fe\n        indeg[x]++;\n    }\n}\n\nvoid topo_sort(void)\n{\n    priority_queue <int> q;//\u5927\u6839\u5806\uff0c\u6bcf\u6b21\u53d6\u6700\u5927\u503c\n    for(int i=1;i<=n;i++)\n      if(!indeg[i])\n       q.push(i);//\u521d\u59cb\u5316\u4e00\u4e0b\u961f\u5217\n    while(!q.empty())\n    {\n        const int tmp=q.top();//\u4e0d\u8981\u52a0\u5f15\u7528\u7b26&\uff01\uff01\uff01\n        q.pop();\n        ans[++cnt]=tmp;\n        for(vector<int>::iterator it=edge[tmp].begin();it!=edge[tmp].end();it++)//\u904d\u5386\u8fb9\n        {\n            indeg[*it]--;//\u62d3\u6251\u6392\u5e8f\n            if(!indeg[*it])\n             q.push(*it);\n         } \n    }\n}\n\nvoid output(void)\n{\n    if(cnt<n)//\u7b54\u6848\u6570\u7ec4\u957f\u5ea6\u4e0d\u8db3\uff0c\u6709\u95ed\u73af\uff0c\u4e0d\u7b26\u9898\u610f\n    {\n        puts(\"Impossible!\");\n        return;\n    }\n    for(int i=n;i>=1;i--)//\u8bb0\u5f97\u5012\u5e8f\u8f93\u51faQVQ\n     cout<<ans[i]<<' ';\n    cout<<endl;\n}\n\nvoid clear(void)\n{\n    cnt=0;\n    memset(ans,0,sizeof(ans));\n    memset(indeg,0,sizeof(indeg));\n    for(int i=1;i<=n;i++)\n     edge[i].clear();\n}\n\nint main()\n{\n    int T;\n    cin>>T;\n    while(T--)\n    {\n        clear();//\u6e05\u7a7a\u5f88\u91cd\u8981\n        input();\n        topo_sort();\n        output();\n    }\n    return 0;\n}\n```",
        "postTime": 1548689580,
        "uid": 80049,
        "name": "Hexarhy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "[\u67e5\u770b\u539f\u9898\u8bf7\u6233\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P3243)\n# \u4e00\u9053\u660e\u76ee\u5f20\u80c6\u7684\u62d3\u6251\u6392\u5e8f\u7684\u9898\u76ee\n\u9996\u5148\uff0c\u7531\u4e8e\u9898\u76ee\u7ed9\u51fa`\u201c\u67d0\u4e9b\u83dc\u80b4\u5fc5\u987b\u5728\u53e6\u4e00\u4e9b\u83dc\u80b4\u4e4b\u524d\u5236\u4f5c\u201d`\u8fd9\u4e00\u6761\u4ef6\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u62d3\u6251\u53bb\u505a\u3002  \n\u5176\u6b21\uff0c\u6839\u636e\u9898\u76ee\u7ed9\u51fa\u7684\u201c\u6700\u4f18\u7684\u83dc\u80b4\u5236\u4f5c\u987a\u5e8f\u201d\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u81ea\u7136\u800c\u7136\u7684\u60f3\u5230\u9898\u76ee\u662f\u8ba9\u6211\u4eec\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u62d3\u6251\u5e8f\u3002\n### \u7136\u800c\uff0c\u8fd9\u6837\u505a\u4e8b\u9519\u8bef\u7684\u3002\n\u51fa\u9898\u4eba\u53ef\u4ee5\u8f7b\u677e\u628a\u4f60\u5361\u6389\uff0c\u6bd4\u5982\u6837\u4f8b\u7684\u7b2c\u4e09\u7ec4\u6570\u636e\uff0c\u7b54\u6848\u662f`1 5 2 4 3`\uff0c\u4f46\u662f\u5982\u679c\u4f60\u662f\u6c42\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u62d3\u6251\u5e8f\uff0c\u90a3\u4e48\u4f60\u6c42\u51fa\u7684\u7ed3\u679c\u5c06\u4f1a\u662f`1 4 3 5 2`\u3002\u5f88\u663e\u7136\uff0c2\u7684\u4f4d\u7f6e\u9760\u540e\u4e86\u3002\n## \u65e2\u7136\u6c42\u6700\u5c0f\u7684\u5b57\u5178\u5e8f\u884c\u4e0d\u901a\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u53cd\u8fc7\u6765\u60f3\u5462\uff1f\n\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u4f60\u628a\u5c0f\u7684\u6570\u5c3d\u91cf\u5f80\u524d\u653e\uff0c\u6240\u4ee5\u7b54\u6848\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u5b57\u5178\u5e8f\u3002\u4f46\u662f\uff0c\u628a\u5c0f\u7684\u6570\u5c3d\u91cf\u5f80\u524d\u65b9\uff0c\u90a3\u4e48\u5927\u7684\u6570\u81ea\u7136\u4f1a\u5c3d\u91cf\u5f80\u540e\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u5982\u679c\u628a\u62d3\u6251\u5e8f\u53cd\u8fc7\u6765\uff0c\u90a3\u4e48\u5b57\u5178\u5e8f\u6700\u5927\u7684\u53cd\u62d3\u6251\u5e8f\u5c31\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u8fd4\u56fe\u53bb\u6c42\u5b57\u5178\u5e8f\u6700\u5927\u7684\u62d3\u6251\u5e8f\uff0c\u6700\u540e\u518d\u5012\u5e8f\u8f93\u51fa\u3002\ntip\uff1a\u4e3a\u4e86\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5806\u53bb\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u3002\n\u9644\u4e00\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define ll long long\n#define INF 0x7fffffff\n\nusing namespace std;\n\npriority_queue<int>que;\n\nint t,n,m,x,cnt,d[100005],k[100005],ans[100005];\n\nstruct Edge{\n\tint to,next;\n}edge[100005];\n\nstruct node{\n\tint x,y;\n}u[100005];\n\nvoid add(int x,int y)\n{\n\tedge[++cnt].to = y;\n\tedge[cnt].next = d[x];\n\td[x] = cnt;\n\tk[y] ++;\n}\n\nint mysort(node a,node b) {return a.y < b.y;}\n\nvoid clean()\n{\n\twhile(!que.empty()) que.pop();\n}\n\nvoid work()\n{\n\tfor(register int i = 1; i <= n; i++) if(k[i] == 0) que.push(i);\n\twhile(!que.empty())\n\t{\n\t\tx = que.top();\n\t\tans[++cnt] = x;\n\t\tque.pop();\n\t\tfor(register int i = d[x]; edge[i].to != 0; i = edge[i].next)\n\t\t{\n\t\t\tk[edge[i].to] --;\n\t\t\tif(k[edge[i].to] == 0) que.push(edge[i].to);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\",&t);\n\tfor(register int a = 1; a <= t; a++)\n\t{\n\t\tcnt = 0;\n\t\tmemset(d,0,sizeof(d));\n\t\tmemset(k,0,sizeof(k));\n\t\tclean();\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(register int i = 1; i <= m; i++) scanf(\"%d%d\",&u[i].x,&u[i].y);\n\t\tfor(register int i = 1; i <= m; i++) add(u[i].y,u[i].x);\n\t\tcnt = 0;\n\t\twork();\n\t\tif(cnt < n) printf(\"Impossible!\");\n\t\telse\n\t\tfor(register int i = n; i >= 1; i--) printf(\"%d \",ans[i]);\n\t\tprintf(\"\\n\");\n\t}\n    return 0;\n}\n```",
        "postTime": 1550926002,
        "uid": 150821,
        "name": "Azuree",
        "ccfLevel": 6,
        "title": "\u83dc\u80b4\u5236\u4f5c-\u9898\u89e3"
    },
    {
        "content": "$SDSC$\u8bb2\u8fc7\u7684\u9898\uff0c\u590d\u4e60\u4e00\u4e0b\n\n\u5982\u679c\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\u6765\u7ef4\u62a4\u62d3\u6251\u7684\u8bdd\u663e\u7136\u662f\u4f1a\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u6c42\u51fa\u6765\u7684\u662f**\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u62d3\u6251\u5e8f\uff0c\u5e76\u4e0d\u4e00\u5b9a\u662f1\u5c3d\u53ef\u80fd\u5728\u524d**\n\n\u56e0\u4e3a\u5b57\u5178\u5e8f\u662f\u8d2a\u5fc3\u7684\uff0c\u5982\u679c\u524d\u9762\u7684\u4e00\u4f4d\u80fd\u5c0f\u5c31\u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u5e76\u4e0d\u4fdd\u8bc11\u51fa\u73b0\u5c3d\u91cf\u9760\u524d\n\n\u4f46\u662f\u5982\u679c\u5efa\u4e00\u4e2a\u53cd\u56fe\uff0c\u6c42\u4e00\u4e2a\u53cd\u5411\u5b57\u5178\u5e8f\u6700\u5927\u7684\u62d3\u6251\u5e8f\u5462\n\n\u90a3\u4e48\u5c31\u4f1a\u6709\u5927\u7684\u6570\u5c3d\u91cf\u9760\u524d\u7684\u60c5\u51b5\u51fa\u73b0\uff0c\u4e8e\u662f\u4ea4\u5c0f\u7684\u6570\u5c3d\u91cf\u9760\u540e\uff0c\u4e8e\u662f\u53cd\u8fc7\u6765\u5c31\u662f\u5c0f\u7684\u6570\u5c3d\u91cf\u9760\u524d\u4e86\n\n\u4e8e\u662f\u53cd\u7740\u5efa\u56fe+\u4e00\u4e2a\u5927\u6839\u5806\u7ef4\u62a4\u5c31\u597d\u4e86\n\n```cpp\n#include<queue>\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define re register\n#define maxn 100005\nstruct node\n{\n\tint v,nxt;\n}e[maxn<<1];\nint n,m,T;\nint r[maxn],tot,head[maxn],ans[maxn];\nint num=0;\ninline void add_edge(int x,int y)\n{\n\te[++num].v=y;\n\te[num].nxt=head[x];\n\thead[x]=num;\n}\ninline int read()\n{\n    char c=getchar();\n    int x=0;\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9')\n      x=(x<<3)+(x<<1)+c-48,c=getchar();\n    return x;\n}\nint main()\n{\n\tT=read();\n\twhile(T--)\n\t{\n\t\tn=read();\n\t\tm=read();\n\t\tstd::priority_queue<int> q;\n\t\tmemset(head,0,sizeof(head));\n\t\tnum=0;\n\t\tmemset(r,0,sizeof(r));\n\t\tint x,y;\n\t\tfor(re int i=1;i<=m;i++)\n\t\t{\n\t\t\tx=read();\n\t\t\ty=read();\n\t\t\tr[x]++;\n\t\t\tadd_edge(y,x);\n\t\t}\n\t\tfor(re int i=1;i<=n;i++)\n\t\tif(!r[i]) q.push(i),tot++;\n\t\tint t=0;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint k=q.top();\n\t\t\tq.pop();\n\t\t\tans[++t]=k;\n\t\t\tfor(re int i=head[k];i;i=e[i].nxt)\n\t\t\t{\n\t\t\t\tr[e[i].v]--;\n\t\t\t\tif(!r[e[i].v]) q.push(e[i].v),tot++;\n\t\t\t}\n\t\t}\n\t\tif(t<n) puts(\"Impossible!\");\n\t\telse \n\t\t{\n\t\t\tfor(re int i=n;i>=1;i--) printf(\"%d \",ans[i]);\n\t\t\tputs(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1533778415,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "\u770b\u9898\uff0c\u53d1\u73b0\u662f\u88f8\u7684\u62d3\u6251\u6392\u5e8f\u9898\uff0c\u5c0f\u6839\u5806\u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\u3002\u5f00\u5fc3\u7684\u6253\u5b8c\u53d1\u73b0\u4e0d\u884c\u3002\n\n\u540e\u9762[\u673a\u623f\u5927\u4f6c](https://www.luogu.com.cn/user/181506)\u544a\u8bc9\u6211\u4eec:\u5b57\u5178\u5e8f\u6392\u5e8f\u4e0d\u4fdd\u8bc1$1$\u5728\u6700\u524d\uff0c\u800c\u662f\u5b57\u5178\u5e8f\u5c0f\u7684\u6700\u524d\u3002\n\n\u4f46\u662f\u5982\u679c\u4ece\u5927\u5230\u5c0f\u6392\u5b57\u5178\u5e8f\uff0c\u5c31\u4e00\u5b9a\u662f\u6700\u5927\u7684\u90a3\u4e2a\u5728\u6700\u524d\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53cd\u5411\u5efa\u8fb9\uff0c\u7528\u5927\u6839\u5806\u5b58\uff0c\u5012\u5e8f\u8f93\u51fa\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u6a21\u677f\u4e86\u3002\n\n\n\n------------\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint T, n, m, x, y, ans[100005];\nint head[100005], to[100005], nex[100005], cnt, du[100005];\npriority_queue<int> q;\ninline void adde(int f, int t)\n{\n    to[++cnt] = t;\n    nex[cnt] = head[f];\n    head[f] = cnt;\n}\nint main()\n{\n    scanf(\"%d\", &T);\n    while (T--)\n    {\n        scanf(\"%d%d\", &n, &m);\n        memset(head, 0, sizeof(head));\n        memset(du, 0, sizeof(du));\n        cnt = 0;\n        for (int i = 1; i <= m; ++i)\n        {\n            scanf(\"%d%d\", &x, &y);\n            adde(y, x);\n            ++du[x];\n        }\n        cnt = 0;\n        for (int i = 1; i <= n; ++i)\n            if (!du[i])\n                q.push(i);\n        while (!q.empty())\n        {\n            int u = q.top();\n            q.pop();\n            ans[++cnt] = u;\n            for (int i = head[u], v; i; i = nex[i])\n            {\n                v = to[i];\n                --du[v];\n                if (!du[v])\n                    q.push(v);\n            }\n        }\n        if (cnt != n)\n            printf(\"Impossible!\\n\");\n        else\n        {\n            for (int i = n; i; --i)\n                printf(\"%d%c\", ans[i], \" \\n\"[i == 1]);\n        }\n    }\n    return 0;\n}\n```\n~~\u5b66\u6821\u6a21\u62df\u8d5b\u7684\u9898\uff0c\u6211\u7206\u7834\u4e86\u54e6~~",
        "postTime": 1592121254,
        "uid": 115855,
        "name": "Yyxxxxx",
        "ccfLevel": 4,
        "title": "P3243 [HNOI2015]\u83dc\u80b4\u5236\u4f5c \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\u770b\u5230\u201cx\u5fc5\u987b\u8981\u4f18\u4e8ey\u201d\u8fd9\u79cd\u8bdd\u5c31\u81ea\u7136\u7684\u60f3\u5230\u62d3\u6251\u6392\u5e8f\u3002\n\n\u7136\u800c\u8fd9\u9053\u9898\u6bd4\u8f83\u96be\u7684\u4e00\u70b9\u662f\uff0c\u5982\u4f55\u6b63\u786e\u5730\u62d3\u6251~~\uff08\u5e9f\u8bdd\uff09~~\n\n\u9898\u76ee\u4e2d\u7528\u4e86\u4e94\u53e5\u8bdd\u6765\u544a\uff08mi\uff09\u8bc9\uff08huo\uff09\u4f60\u662f\u8981\u6309\u7167\u5b57\u5178\u5e8f\u5c0f\u6765\u62d3\u6251\u3002\n\n\u5982\u679c\u4f60\u8fd9\u6837\u60f3\uff0c\u90a3\u5c31\u9519\u4e86\u3002\uff08\u968f\u4fbf\u4e3e\u53cd\u4f8b\uff09\n\n**\u518d\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\uff0c\u5982\u679c\u628a\u8d8a\u5927\u7684\u6570\u653e\u5728\u540e\u9762\uff0c\u90a3\u4e48\u524d\u9762\u7684\u5c0f\u6570\u90fd\u80fd\u591f\u5c3d\u91cf\u9760\u524d\u3002**\n\n\u8fd9\u6837\u53ef\u4ee5\u6ee1\u8db3\u9898\u76ee\u6240\u8bf4\u7684\n> \u4f7f\u5f97\u5c0fA\u80fd\u5c3d\u91cf\u5148\u5403\u5230\u8d28\u91cf\u9ad8\u7684\u83dc\u80b4\u3002\n\n\u505a\u6cd5\u4e5f\u5c31\u663e\u7136\u4e86\uff1a\u6c42\u51fa\u539f\u56fe\u7684\u53cd\u5411\u56fe\u7684\u62d3\u6251\u6392\u5e8f\u65e2\u662f\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdlib>\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <cstring>\nusing namespace std;\n\nconst int MAXN = 100100\uff1b\nint T\uff1b\nint N, M, cnt, ind[MAXN], tot, topo[MAXN]\uff1b\npriority_queue <int> Q\uff1b\nstruct edge {\n    int v\uff1b\n    edge *next\uff1b\n}pool[MAXN * 2], *head[MAXN]\uff1b\ninline void addedge(int u, int v) {\n    edge *p = &pool[++cnt]\uff1b\n    p->v = v, p->next = head[u], head[u] = p\uff1b\n}\nint main()\n{\n    scanf(\"%d\", &T)\uff1b\n    while(T--) {\n    \tscanf(\"%d%d\", &N, &M);\n    \tmemset(topo, 0, sizeof(topo)); memset(ind, 0, sizeof(ind));\n        cnt = 0; tot = N\uff1b\n        for(int i = 1\uff1b i <= N\uff1b i++) head[i] = NULL\uff1b\n        while(!Q.empty()) Q.pop()\uff1b\n        for(int i = 1\uff1b i <= M\uff1b i++) {\n        \tint u, v; scanf(\"%d%d\", &u, &v)\uff1b\n        \taddedge(v, u); ind[u]++\uff1b\n        }\n        for(int i = 1\uff1b i <= N; i++)\n            if(!ind[i]) \n                Q.push(i)\uff1b\n        while(!Q.empty()) {\n            int u = Q.top(); Q.pop();\n            topo[tot--] = u;\n            for(edge *p = head[u]; p; p = p->next) {\n                int v = p->v; ind[v]--;\n                if(ind[v] == 0) Q.push(v);\n            }\n        }\n        if(tot) printf(\"Impossible!\");\n        else for(int i = 1; i <= N; i++) printf(\"%d \", topo[i]);\n        putchar('\\n');\n \t}\n \treturn 0\uff1b\n}\n\n```\n\n\u4e0d\u8981\u8bd5\u56fe\u590d\u5236\u6211\u7684\u4ee3\u7801\uff0c\u4f60\u4f1a\u56e0\u4e3a\u4e00\u4e9b\u5947\u602a\u7684\u6807\u70b9RE\u7684\u3002\n\n\n\n",
        "postTime": 1530539615,
        "uid": 54745,
        "name": "Gypsophila",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "Upd\uff1a\u4fee\u6539\u4e86\u90e8\u5206\u516c\u5f0f\u7684\u5199\u6cd5\n\n> \u6700\u4f18\u89e3\u5c31\u662f\u7b26\u5408\u6761\u4ef6\u7684\u6392\u5217\u4e2d\uff0c\u53cd\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u6700\u5927\u7684\u6392\u5217\u3002\n\n\u8fd9\u662f\u6700\u9ad8\u8d5e\u9898\u89e3\u7684\u7ed3\u8bba\u3002\u7136\u800c\uff0c\u6ca1\u4eba\u8bc1\u660e\u8fd9\u73a9\u610f\u513f\u3002\n\n\uff08\u672c\u6587\u4ec5\u63d0\u4f9b\u8bc1\u660e\u3002\u5982\u4f55\u6c42\u5b57\u5178\u5e8f\u6700\u5927\u7684\u8bf7\u5de6\u8f6c\uff09\u3002\n\n\u5b9a\u4e49\u4e24\u4e2a\u62d3\u6251\u5e8f\u4e2d\u66f4\u4f18\u7684\u4e00\u4e2a\u4e3a\u201c\u6700\u5c0f\u5e8f\u201d\u66f4\u5c0f\u7684\u62d3\u6251\u5e8f\u3002\n\n\u6c42\u8bc1\uff1a\u4e00\u4e2a DAG \u7684\u62d3\u6251\u5e8f\u4e2d\u201c\u6700\u5c0f\u5e8f\u201d\u6700\u5c0f\u7684\u7684\u4e00\u4e2a\u62d3\u6251\u5e8f\uff0c\u662f\u53cd\u5411\u5b57\u5178\u5e8f\u6700\u5927\u7684\u4e00\u4e2a\u3002\n\n\u8bc1\u660e\uff1a\n\n\u9996\u5148\uff0c\u5f53 $|V|=1$ \u65f6\u7ed3\u8bba\u663e\u7136\u3002\n\n\u5176\u6b21\uff0c\u5047\u8bbe\u7ed3\u8bba\u5bf9\u4e8e $|V|<n$ \u5747\u6210\u7acb\u3002\u8bbe\u56fe $G=(V,E)$ \u4e2d\u6700\u5c0f\u70b9\u7f16\u53f7\u4e3a $x$\uff0c\u5176\u4e2d $|V|=n$\uff0c\u5219\u6574\u4e2a\u70b9\u96c6\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\n\n- $S=\\{z\\ |$ \u5b58\u5728\u4e00\u6761\u8def\u5f84 $z\\to x\\}$\n- $T=V-S$\n\n\u7279\u522b\u5730\uff0c\u6709 $x\\in S$\u3002\n\n---\n\nLemma 1\uff1a\u4ee4 $m:=|S|$\u3002\u5219\u6700\u5c0f\u5e8f\u6700\u5c0f\u7684\u62d3\u6251\u5e8f $a$ \u4e00\u5b9a\u6ee1\u8db3 $\\{a_x|1\\leq x\\leq m\\} = S$ \u4e14 $a_m=x$\u3002\n\n\u8bc1\u660e\uff1a\u7531\u4e8e $x$ \u5728\u62d3\u6251\u5e8f\u4e0a\u7684\u4f4d\u7f6e\u8d8a\u5c0f\uff0c\u6700\u5c0f\u5e8f\u5c31\u8d8a\u5c0f\uff0c\u6240\u4ee5 $x$ \u5c3d\u53ef\u80fd\u9760\u524d\u66f4\u4f18\u3002\u7531\u62d3\u6251\u5e8f\u7684\u5b9a\u4e49\uff0c$S - \\{x\\}$ \u4e2d\u7684\u6240\u6709\u70b9\u5728\u62d3\u6251\u5e8f\u4e0a\u4e00\u5b9a\u6392\u5728 $x$ \u4e4b\u524d\u3002\n\n\u6240\u4ee5 $a_p=x$ \u662f $p\\geq m$ \u7684\u5145\u5206\u6761\u4ef6\u3002\u4e8e\u662f\u6700\u5c0f\u7684\u6700\u5c0f\u5e8f\u6ee1\u8db3 $p=m$\u3002\n\n---\n\n\u73b0\u5c06\u6574\u4e2a\u56fe\u53ef\u4ee5\u5206\u6210\u4e09\u4e2a\u5b50\u56fe\uff0c\u5176\u70b9\u96c6\u5206\u522b\u4e3a $S-\\{x\\}$\u3001$\\{x\\}$ \u548c $T$\u3002\n\n\u7531\u4e8e $|S| + |T| = n$\uff0c\u6240\u4ee5 $|S-\\{x\\}|,|T| < n$\uff0c\u7531\u5047\u8bbe\u5f97\u5176\u7ed3\u8bba\u6210\u7acb\u3002\n\n\u56e0\u4e3a $x$ \u662f\u7f16\u53f7\u6700\u5c0f\u7684\uff0c\u5c06 $x$ \u5411\u540e\u79fb\u4e0d\u80fd\u83b7\u5f97\u66f4\u5927\u7684\u53cd\u5411\u5b57\u5178\u5e8f\u3002\u800c $S-\\{x\\},T$ \u7684\u7ed3\u8bba\u5df2\u8bc1\u3002\u4e8e\u662f\u5bf9\u4e8e\u56fe $G$ \u7ed3\u8bba\u6210\u7acb\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u4efb\u610f\u7684 DAG\uff0c\u7531\u6570\u5b66\u5f52\u7eb3\u6cd5\u5f97\u7ed3\u8bba\u5747\u6210\u7acb\u3002\n\n\u8bc1\u6bd5\u3002",
        "postTime": 1667885405,
        "uid": 374433,
        "name": "ppip",
        "ccfLevel": 7,
        "title": "P3243 [HNOI2015]\u83dc\u80b4\u5236\u4f5c \u9898\u89e3"
    },
    {
        "content": "\u840c\u65b0\u4eca\u5929\u521a\u521a\u63a5\u89e6\u62d3\u6251\u6392\u5e8f\uff0c\u627e\u5230\u4e86\u4e00\u4e9b\u9898\uff0c\u7136\u540e\u5c31\u6765\u505a\u8fd9\u9053\u9898\u7d2b\u9898\u4e86(\u96fe)\n\n\u8fd8\u662f\u4e0d\u8981\u88ab\u9898\u76ee\u7684\u96be\u5ea6\u5413\u5230\u5427\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u633a\u6a21\u677f\u7684\uff0c\u601d\u8def\u611f\u89c9\u4e5f\u6bd4\u8f83\u597d\u60f3\uff0c\u4f46\u662f\u5173\u4e8e\u8bc1\u660e\u8fd9\u4e9b\uff0c\u6211\u592a\u83dc\uff0c\u5e76\u4e0d\u4f1a\u3002\u662f\u4e00\u9053\u975e\u5e38\u597d\u7684\u5165\u624b\u62d3\u6251\u6392\u5e8f\u7684\u9898\uff0c\u4e0d\u50cf\u5176\u4ed6\u9898\u76ee\u90a3\u6837\u96be\u60f3\n\n\u5bf9\u4e8e\u4e00\u4e2a\u9650\u5236$<i,j>$\uff0c\u5176\u5b9e\u8868\u793a\u7684\u5c31\u662f $i$ \u5fc5\u987b\u5728 $j$ \u4e4b\u524d\u5b8c\u6210\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u6761\u4ef6\u8f6c\u5316\u6210\u56fe\u7684\u5f62\u5f0f\u5c31\u662f $i$ \u5230 $j$ \u6709\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8bd5\u7740\u5f80\u62d3\u6251\u6392\u5e8f\u7684\u65b9\u5411\u601d\u8003\u4e86\n\n\u62d3\u6251\u6392\u5e8f\u6700\u57fa\u7840\u7684\u5e94\u7528\u662f\u4ec0\u4e48\uff0c\u53ef\u4ee5\u628a\u5b83\u5f53\u505a\u5b66\u4e60\u4e00\u4e2a\u4e1c\u897f\uff08\u6bd4\u5982\u8bed\u6587\u5427\uff09\uff0c\u4f60\u8981\u5b66\u4e60\u4e00\u7bc7\u6587\u7ae0\uff0c\u4f60\u603b\u5f97\u5148\u5b66\u4f1a\u8ba4\u5b57\u5427\uff0c\u5b66\u4f1a\u8ba4\u5b57\u80af\u5b9a\u5c31\u8981\u5b66\u4f1a\u62fc\u97f3\uff0c\u90a3\u4e48\u4f60\u8981\u63d0\u524d\u5b66\u4e60\u7684\u4e1c\u897f\u5c31\u662f\u524d\u7f6e\u77e5\u8bc6\uff0c\u5c31\u76f8\u5f53\u4e8e\u4ee5\u4e0a\u63d0\u5230\u7684 $j$ \uff08\u4f60\u8981\u5b8c\u6210 $j$ \uff0c\u4f60\u5fc5\u987b\u5148\u5b66\u4f1a $i$ \uff09\u3002\u90a3\u8fd9\u4e48\u4e00\u770b\uff0c\u88f8\u88f8\u7684\u62d3\u6251\u6392\u5e8f\n\n\u4f46\u662f\u6709\u4e00\u70b9\u53d8\u5316\u7684\u662f\u4ec0\u4e48\u5462\uff1f\u9898\u76ee\u4e2d\u7684\u7f16\u53f7\u8d8a\u5c0f\uff0c\u8868\u793a\u5b83\u7684\u9884\u4f30\u8d28\u91cf\u8d8a\u9ad8\uff08\u663e\u800c\u6613\u89c1\uff0c\u8fd9\u91cc\u6307\u7684\u4e0d\u662f\u5b57\u5178\u5e8f\uff09\uff0c\u6240\u4ee5\u5bf9\u4e8e\u7f16\u53f7\u5c0f\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u5728\u524d\u9762\uff0c\u800c\u7f16\u53f7\u7684\u5c31\u5f80\u540e\u9762\u653e\n\n\u56e0\u4e3a\u5982\u679c\u6b63\u5e8f\u6309\u9898\u76ee\u5efa\u8fb9\u7684\u8bdd\uff0c\u5047\u59821\u53f7\u70b9\u7684\u5165\u5ea6\u4e0d\u4e3a1\uff0c\u800c2\u7684\u5165\u5ea6\u4e3a0\uff0c\u6211\u4eec\u5e94\u8be5\u5148\u628a\u9650\u52361\u7684\u70b9\u5168\u90e8\u5220\u6389\uff0c\u518d\u628a1\u5f04\u51fa\u6765\uff0c\u518d\u53bb\u52202\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6700\u4f18\uff0c\u4f46\u662f\u6b63\u5e8f\u76f4\u63a5\u5efa\u7acb\u7684\u8bdd\u6211\u4eec\u4f1a\u628a2\u76f4\u63a5\u5220\u53bb\n\n\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5012\u5e8f\u5efa\u7acb\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5927\u6839\u5806\u6765\u5b9e\u73b0\u628a\u7f16\u53f7\u8d8a\u5927\u7684\u8d8a\u5148\u5904\u7406\uff0c\u7136\u540e\u518d\u5012\u5e8f\u8f93\u51fa\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u5148\u628a\u4ef7\u503c\u4f4e\u7684\u5b58\u50a8\u4e0b\u6765\uff0c\u4ef7\u503c\u9ad8\u7684\u5c31\u5728\u540e\u9762\uff0c\u8fd9\u4e2a\u65f6\u5019\u5012\u5e8f\u8f93\u51fa\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4ef7\u503c\u8d8a\u9ad8\u7684\u8d8a\u5148\u505a\uff09\n\n\u7136\u540e\u5269\u4e0b\u4e86\u4e00\u4e2a $Impossible$ \uff0c\u8fd9\u4e2a\u4e5f\u5f88\u7b80\u5355\uff0c\u62d3\u6251\u6392\u5e8f\u7684\u53e6\u5916\u4e00\u79cd\u5e94\u7528\uff0c\u5224\u65ad\u662f\u5426\u6709\u73af\u5b58\u5728\u5c31\u53ef\u4ee5\u4e86\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=500000;\nint d;\nint n,m;\nint head[MAXN],tot;\nstruct node{\n\tint net,to;\n}e[MAXN];\nvoid add(int x,int y){\n\te[++tot].to=y;\n\te[tot].net=head[x];\n\thead[x]=tot;\n} //\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8\u8fb9\uff0c\u90bb\u63a5\u77e9\u9635\u4e00\u822c\u6765\u8bf4\u4f1a\u6162\u4e00\u70b9 \nint ru[MAXN]; //\u5165\u5ea6 \nint ans[MAXN],now; //\u5b58\u50a8\u7b54\u6848 \nbool toop(){  //\u76f4\u63a5\u5199\u6210bool\u7c7b\u578b\u5bb9\u6613\u5224\u65ad\u4e00\u4e9b \n\tpriority_queue<int>q; //\u5806(\u4f18\u5148\u961f\u5217) STL\u786e\u5b9e\u5f88\u65b9\u4fbf \n\tfor(register int i=1;i<=n;i++){\n\t\tif(ru[i]==0) q.push(i); //\u5165\u5ea6\u4e3a0\u7684\u52a0\u5165\u5806 \n\t}\n\twhile(!q.empty()){\n\t\tint x=q.top();\n\t\tq.pop();\n\t\tans[++now]=x; //\u5b58\u50a8\u7b54\u6848 \n\t\tfor(register int i=head[x];i;i=e[i].net){\n\t\t\tru[e[i].to]--; //\u8fd9\u4e2a\u70b9\u5220\u53bb\u4e86\uff0c\u5b83\u80fd\u5230\u7684\u70b9\u7684\u5165\u5ea6\u5c31\u8981-- \n\t\t\tif(ru[e[i].to]==0){ //\u5165\u5ea6\u4e3a0\u7684\u52a0\u5165\u5806\u4e2d \n\t\t\t\tq.push(e[i].to);\n\t\t\t} \n\t\t}\n\t}\n\tif(now==n) return true; //\u5982\u679c\u521a\u597d\u5904\u7406\u4e86n\u4e2a\uff0c\u8bf4\u660e\u6ca1\u6709\u73af \n\treturn false; //\u5426\u5219\u6709\u73af\uff0c\u51fa\u9519 \n}\nint main(){\n\tscanf(\"%d\",&d);\n\twhile(d--){\n\t\tnow=0,tot=0;\n\t\tfor(register int i=1;i<=n;i++) ru[i]=0,ans[i]=0;\n\t\tmemset(e,0,sizeof e);\n\t\tmemset(head,0,sizeof head); //\u6ce8\u610f\u6e05\u7a7a\u6570\u7ec4\uff0c\u5efa\u8bae\u5927\u5bb6\u81ea\u5df1\u5982\u679c\u80fd\u624b\u52a8\u6e05\u7a7a\u5c31\u522b\u7528memset \n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(register int i=1;i<=m;i++){\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tadd(y,x);\n\t\t\tru[x]++; //\u7075\u9b42\u7684\u53cd\u5411\u5efa\u8fb9 \n\t\t}\n\t\t//bool k=toop(); \n\t\t//\u8fd9\u4e2a\u5730\u65b9\u633a\u7384\u5b66\u7684\u5427\uff0c\u6211\u6700\u5f00\u59cb\u58f0\u660e\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf\u5224\u65ad\u662f\u5426\u6709\u73af\uff08\u5982\u4e0a\uff09 \n\t\t//\u7136\u540e\u5b83\u5c31\u8d85\u65f6\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u5199\u6210toop()\u76f4\u63a5\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86 \n\t\tif(toop()==false) puts(\"Impossible!\"); //\u5982\u679c\u6709\u73af\u5c31\u4e0d\u53ef\u80fd \n\t\telse{\n\t\t\tfor(register int i=now;i>=1;i--) printf(\"%d \",ans[i]); //\u5012\u5e8f\u8f93\u51fa\u7b54\u6848 \n\t\t\tputs(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\u5173\u4e8e\u62d3\u6251\u6392\u5e8f\u7684\u4e00\u4e9b\u5177\u4f53\u4ecb\u7ecd\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u770b\u770b [\u6d1b\u8c37\u65e5\u62a5 \u5feb\u901f\u5165\u624b\u62d3\u6251\u6392\u5e8f](http://www.360doc.com/content/19/0429/09/5315_832222437.shtml) \uff08~~\u8fd9\u4e0d\u4f1a\u88ab\u7b97\u4f5c\u6284\u88ad\u5427~~\uff09 \uff0c\u7136\u540e\u5ba3\u4f20\u4e00\u4e0b[\u81ea\u5df1](https://www.cnblogs.com/Poetic-Rain/)\u548c[\u540c\u684c](https://www.cnblogs.com/Eleven-Qian-Shan/)\u7684\u535a\u5ba2",
        "postTime": 1593518568,
        "uid": 113537,
        "name": "Poetic_Rain",
        "ccfLevel": 0,
        "title": "P3243 [HNOI2015]\u83dc\u80b4\u5236\u4f5c"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u9999](https://www.luogu.com.cn/blog/hcblog/#)\n\n\u4e00\u9053\u5f88\u88f8\u7684 _**\u62d3\u6251\u6392\u5e8f**_ \u7ec3\u624b\u9898\uff0c~~\u4e0d\u77e5\u9053\u662f\u600e\u4e48\u7d2b\u7684~~\u3002\n\n### \u6b63\u6587\uff1a\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u6309\u7167\u505a\u83dc\u987a\u5e8f\u5efa\u8fb9\u62d3\u6251\uff0c\u6bcf\u4e00\u4e2a\u987a\u5e8f\u9650\u5236\u5c31\u662f\u4e00\u4e2a\u6709\u5411\u8fb9\u3002\n\n\u4f46\u662f\u806a\u660e\u7684\u4f60\u4e5f\u4e00\u5b9a\u4f1a\u53d1\u73b0\u9898\u76ee\u4e2d\u6709\u8fd9\u6837\u7684\u51e0\u53e5\u8bdd\uff1a\n\n(1)\u5728\u6ee1\u8db3\u6240\u6709\u9650\u5236\u7684\u524d\u63d0\u4e0b\uff0c1 \u53f7\u83dc\u80b4\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u5236\u4f5c\uff1b\n\n(2)\u5728\u6ee1\u8db3\u6240\u6709\u9650\u5236\uff0c**1\u53f7\u83dc\u80b4\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u5236\u4f5c\u7684\u524d\u63d0\u4e0b**\uff0c2\u53f7\u83dc\u80b4\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u5236\u4f5c\uff1b\n\n(3)\u5728\u6ee1\u8db3\u6240\u6709\u9650\u5236\uff0c**1\u53f7\u548c2\u53f7\u83dc\u80b4\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u7684\u524d\u63d0\u4e0b**\uff0c3\u53f7\u83dc\u80b4\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u5236\u4f5c\uff1b\n\n(4)\u5728\u6ee1\u8db3\u6240\u6709\u9650\u5236\uff0c**1 \u53f7\u548c 2 \u53f7\u548c 3 \u53f7\u83dc\u80b4\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u7684\u524d\u63d0\u4e0b**\uff0c4\u53f7\u83dc\u80b4\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u5236\u4f5c\uff1b\n\n(5)\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u53cd\u4f8b\uff1a\n\nn = 5, m = 3;\n\n2 4\n\n3 1\n\n4 5\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/rvbrby0b.png)\n\n\u6309\u7167\u8fd9\u4e2a\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e0a\u9762\u8fd9\u4e2a\u56fe\uff0c\u62d3\u6251\u5e8f\u5217\u662f\uff1a2 3 1 4 5\n\n\u4f46\u662f\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u9009\u62e92\u7684**\u524d\u63d0\u662f\u5df2\u7ecf\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u9009\u62e91\u4e86**\uff0c\u6b63\u786e\u7b54\u6848\u5e94\u8be5\u662f3 1 2 4 5\n\n\u65e2\u7136\u8ba9\u7f16\u53f7\u5c0f\u7684\u70b9\u9760\u524d\u7684\u601d\u8def\u662f\u9519\u8bef\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u8ba9\u7f16\u53f7\u5927\u7684\u70b9\u9760\u540e\u3002\n\n\u53ef\u4ee5\u5efa\u4e00\u4e2a\u53cd\u5411\u8fb9\uff0c\u5728\u6ee1\u8db3\u53cd\u5411\u9650\u5236\u6761\u4ef6\u4e0b\u4f18\u5148\u5220\u9664\u7f16\u53f7\u5927\u7684\u70b9\uff0c\u6700\u540e\u9006\u5e8f\u8f93\u51fa\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u662f\u6b63\u786e\u7684\uff1f\u56e0\u4e3a\u6211\u4eec\u628a\u7f16\u53f7\u5927\u7684\u8282\u70b9\u5f80\u540e\u6392\uff0c\u4e00\u6b65\u4e00\u6b65\u201c\u89e3\u9501\u201d\u5165\u5ea6\u5927\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u9009\u62e91\u540e\u518d\u201c\u5c3d\u91cf\u201d\u4f18\u5148\u9009\u62e92\u7684\u5173\u7cfb\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vhfmhlb9.png)\n\n\u5982\u56fe\u6240\u793a\uff0c\u5f97\u5230\u62d3\u6251\u5e8f\u540e\u9006\u5e8f\u8f93\u51fa\u4e3a3 1 2 4 5\n\n\u9898\u76ee\u4e2d\u8fd8\u8981\u6c42\u5728\u65e0\u89e3\u65f6\u8f93\u51faImpossible!~~\uff08\u6211\u592a\u83dc\u4e86\uff0c\u56e0\u4e3a\u9996\u5b57\u6bcd\u5927\u5199\u548c\u611f\u53f9\u53f7\u800cWA\u4e86\u4e24\u6b21/kk~~\n\n\u4ec0\u4e48\u65f6\u5019\u4f1a\u51fa\u73b0\u65e0\u89e3\u7684\u60c5\u51b5\u5462\uff1f\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u83dc\u80b4\u5236\u4f5c\u7684\u524d\u63d0\u662f\u987a\u5e8f\u5728\u5b83\u524d\u9762\u7684\u83dc\u80b4\u90fd\u5df2\u7ecf\u5236\u4f5c\u5b8c\u6210\u4e86\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u5165\u5ea6\u4e3a0\uff0c\u5982\u679c\u5728\u8fd9\u4e2a\u56fe\u4e2d\u5b58\u5728\u4e00\u4e2a\u73af\uff0c\u90a3\u5c31\u4e0d\u53ef\u80fd\u5236\u4f5c\u83dc\u80b4\u4e86\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/my63tddz.png)\n\n\u4e0a\u56fe\u4e2d1 -> 4 -> 2 -> 6\u662f\u4e00\u4e2a\u73af\u3002\u5f53\u6211\u4eec\u5c065\u5220\u53bb\u540e\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/p5c8ctc8.png)\n\n\u8fd9\u4e2a\u56fe\u5c31\u4e0d\u5b58\u5728\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\u4e86\u3002\n\u6b64\u65f6\u4f18\u5148\u961f\u5217\u4e3a\u7a7a\uff0c\u9000\u51fa\u62d3\u6251\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u73af\u7684\u5224\u5b9a\u6211\u4eec\u53ea\u9700\u8981~~\u6570\u4e00\u6570~~\u8fd9\u4e2a\u7b54\u6848\u5e8f\u5217\u662f\u5426\u6709n\u4e2a\u6570\u5c31\u884c\u4e86\u3002\n\n\u56e0\u4e3a\u6709\u591a\u7ec4\u6570\u636e\u8f93\u5165\uff0c\u6bcf\u6b21\u8f93\u51fa\u540e\u522b\u5fd8\u4e86**\u6e05\u7a7a\u5fc5\u8981\u7684\u6570\u7ec4**\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include <queue> \n#include <stdio.h>\n#include <iostream>\nusing namespace std;\n#define MAX 100005\n\nstruct Edge{\n    int to, next;\n}edge[MAX];\nint n, m, len, cnt = 1;\nint head[MAX], indegree[MAX], ans[MAX];\n\ninline int read()\n{\n    int x = 0, f = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9'){if(ch == '-') f = -1; ch = getchar();}\n    while('0' <= ch && ch <='9'){x = (x << 3) + (x << 1) + (ch ^ 48), ch = getchar();}\n    return x * f;\n}\n\ninline void add(int u, int v)\n{\n    edge[cnt].to = v;\n    edge[cnt].next = head[u];\n    head[u] = cnt++;\n}\n\ninline void TopSort()\n{\n    priority_queue<int> pq;\n    for(register int i = 1;i <= n;i++)\n    {\n        if(!indegree[i]) pq.push(i);\n    }\n    while(!pq.empty())\n    {\n        int u = pq.top(); pq.pop();\n        ans[++len] = u;\n        for(register int i = head[u];i != 0;i = edge[i].next)\n        {\n            int v = edge[i].to;\n            indegree[v]--;\n            if(!indegree[v])\n            {\n                pq.push(v);\n            }\n        }\n    }\n}\n\ninline void clean()\n{\n    for(register int i = 1;i <= n;i++) indegree[i] = 0, head[i] = 0, ans[i] = 0;\n    for(register int i = 1;i <= cnt;i++) edge[i].to = 0, edge[i].next = 0;\n    cnt = 1, len = 0;\n}\n\nint main()\n{\n    int D = read();\n    while(D--)\n    {\n        n = read(), m = read();\n        for(register int i = 1;i <= m;i++)\n        {\n            int x = read(), y = read();\n            add(y, x); indegree[x]++;\n        }\n        TopSort();\n        if(len < n) printf(\"Impossible!\\n\");\n        else\n        {\n            for(register int i = len;i > 0;i--)\n            {\n                printf(\"%d \", ans[i]);\n            }\n            printf(\"\\n\");\n        }\n        clean();\n    }\n    return 0;\n}\n```\n",
        "postTime": 1587516415,
        "uid": 140515,
        "name": "\u95f2\u9c7c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "#  \u8fd9\u662f\u4e00\u9053\u975e\u5e38\u88f8\u7684\u62d3\u6251\u6392\u5e8f\n  \u5f00\u59cb\u6b63\u6587\uff1a\u8981\u6ce8\u610f\u662f\u53cd\u5411\u5efa\u8fb9\uff0c\u5176\u4f59\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u672c\u4eba\u4e00\u5f00\u59cb\u6ca1\u6709\u53cd\u5411\u5efa\u8fb9\u5bfc\u81f4\u53ea\u8fc7\u4e00\u4e2a\u70b9\uff0c\u540e\u6765\u624d\u60f3\u5230\u5b57\u5178\u5e8f\u4e0d\u80fd\u786e\u5b9a\u5219\u7528\u53cd\u5411\u5efa\u8fb9\uff0c\u5e0c\u671b\u6b63\u5728\u505a\u8fd9\u9053\u9898\u7684\u670b\u53cb\u4ed4\u6ce8\u610f\u4e00\u4e0b\uff0c\u597d\u4e86\u4e0a\u4ee3\u7801\uff1a\nAC\u4ee3\u7801\uff08\u9644\u4e0a\u6ce8\u91ca\uff09:\n``\n\n------------\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<iomanip>\n#include<queue>\n#include<vector>\n#include<algorithm>\nusing namespace std;\npriority_queue<int> q;\nint const maxn=100000+10;\nint d,n,m,a,b,Indeg[maxn],ok,xb,s[maxn];\nstruct Edge{\n\tint to,next;\n}edge[maxn];\nint head[maxn];\nint num;\nvoid add_edge(int from ,int to)//\u5efa\u8fb9 \n{\n\tnum++;\n\tedge[num].to=to;\n\tedge[num].next=head[from];\n\thead[from]=num;\n}\nvoid Topo_Sort()//\u62d3\u6251\u6392\u5e8f\u6a21\u677f \n{\n\tfor(int i=1;i<=n;++i)\n\t    if(Indeg[i]==0) q.push(i);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top();\n\t    s[++xb]=u;\n\t    q.pop();\n\t    for(int i=head[u];i;i=edge[i].next)\n\t    {\n\t    \tint to=edge[i].to;\n\t    \tIndeg[to]--;\n\t    \tif(Indeg[to]==0)\n\t    \t   q.push(to);\n\t    }\n\t}\n\treturn ;\n}\nint main()\n{\n\tscanf(\"%d\",&d);\n\tfor(int i=1;i<=d;i++)\n\t{\n\t    scanf(\"%d%d\",&n,&m);\n\t\tnum=0;ok=0;xb=0;\n\t\tfor(int j=1;j<=n;j++)\n\t\t    Indeg[j]=0,s[j]=0,head[j]=0;//\u521d\u59cb\u5316\uff0c\u975e\u5e38\u91cd\u8981 \n\t\twhile(!q.empty()) q.pop();\n\t\tfor(int j=1;j<=m;j++) \n\t\t{\n\t\t\tscanf(\"%d%d\",&a,&b);\n\t\t\tIndeg[a]++;\n\t\t\tadd_edge(b,a);//\u53cd\u5411\u5efa\u8fb9 \n\t\t}\n\t\tTopo_Sort();//\u5224\u65ad\n\t\tfor(int j=1;j<=n;j++)\n\t\t   if(Indeg[j]!=0)\n\t\t   {\n\t\t   \tok=1;\n\t\t   \tbreak;\n\t\t   }\n\t\tif(ok==1) cout<<\"Impossible!\"<<endl;//\u6709\u73af \n\t\telse \n\t    {\n\t    \tfor(int j=xb;j>=1;j--) \n\t\t\t{\n\t\t\t\tprintf(\"%d\",s[j]);//\u6109\u5feb\u8f93\u51fa \n\t\t\t\tcout<<\" \";\n\t\t\t}\n\t    \tcout<<endl;//\u6362\u884c\uff0c\u4e5f\u5f88\u91cd\u8981 \n\t    } \n\t}\n\treturn 0;\n}\n```\n\u8fd9\u662f\u672c\u4eba\u7b2c\u4e00\u904d\u9898\u89e3\uff0c\u671b\u901a\u8fc7\uff0c\u8bf7\u5927\u4f6c\u4eec\u591a\u591a\u6307\u70b9\n",
        "postTime": 1566530549,
        "uid": 173239,
        "name": "\u9ec4\u6c5d\u9e4f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u76f8\u5f53\u6807\u51c6\u7684\u62d3\u6251\u6a21\u677f\u9898\uff0c\u6ce8\u610f\u4e0d\u80fd\u7528\u4e34\u754c\u77e9\u9635\u5b58\u56fe\uff0c\u9700\u8981\u4f7f\u7528\u4f18\u5148\u961f\u5217\ncode\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define p 2001\n#define h 981461\nusing namespace std;\n// \u5934\u6587\u4ef6\u4e0e\u5b8f\u5b9a\u4e49 \ninline void adds(int u,int v);\nstruct node\n{\n\tint next;\n\tint to;\n}\ne[h];\nint head[h];\nint in[h];\nint tt[h];\nint cnt;\npriority_queue<int> q;\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u5b9a\u4e49 \nint n,m,x,y;\nstring c;\nsigned main()\n{\n\tint d,t;\n\tcin>>d;\n\tint num=0;\n\tfor(int i=1;i<=d;i++)\n\t{\n\t\tcin>>n>>m;\n\t\t//\u8f93\u5165 \n\t\tcnt=0;\n\t\tnum=0;\n\t\tc=\"kingxbz is very handsome!\";\n\t\tmemset(in,0,sizeof(in));\n\t\tmemset(head,0,sizeof(head));\n\t\tmemset(tt,0,sizeof(tt));\n\t\twhile(!q.empty()) \n\t\tq.pop();\n\t\t//\u521d\u59cb\u5316 \n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\tcin>>x>>y;\n\t\tin[x]++;\n\t\tadds(y,x);\n\t}\n\t//\u8f93\u5165\u5e76\u53cd\u5411\u5efa\u8fb9\uff0c\u50a8\u5b58\u5165\u5ea6 \n\t//\u62d3\u6251\u6392\u5e8f\uff1a\uff1a \n\tfor(int l=1;l<=n;l++)\n\tif(in[l]==0)\n\tq.push(l);\n\t//\u5165\u5ea6\u4e3a0\u7684\u8fdb\u6808 \n\twhile(!q.empty())\n\t{\n\t\tint fro=q.top();\n\t\ttt[++num]=fro;\n\t\tq.pop();\n\t\t//\u8bb0\u5f55\u5806\u9876\u5143\u7d20\uff0c\u5e76\u51fa\u961f \n\t\tfor(int k=head[fro];k;k=e[k].next)\n\t\t{\n\t\t\tint w=e[k].to;\n\t\t\tin[w]--;\n\t\t\tif(in[w]==0)\n\t\t\tq.push(w);\n\t\t}\n\t\t//\u51cf\u5c11\u76f8\u8fde\u8fb9\u5165\u5ea6\uff0c\u5e76\u76f8\u5e94\u5165\u961f \n\t}\n\t//\u62d3\u6251\u6392\u5e8f\u7ed3\u675f \n\tfor(int z=1;z<=n;z++)\n\tif(in[z]!=0)\n\t{\n\t\tc=\"Impossible!\";\n\t\tcout<<c;\n\t\tbreak;\n\t}\n\t//\u5224\u73af \n\tif(c!=\"Impossible!\")\n\tfor(int i=num;i>=1;i--)\n\tcout<<tt[i]<<\" \";\n\tcout<<endl;\n\t//\u8f93\u5165\u6392\u5217 \n} \nreturn 0;\n}\ninline void adds(int u,int v)\n{\n\te[++cnt].to=v;\n\te[cnt].next=head[u];\n\thead[u]=cnt;\n}\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8 \n```cpp",
        "postTime": 1576841177,
        "uid": 244059,
        "name": "king_xbz",
        "ccfLevel": 0,
        "title": "\u849f\u84bb\u7684\u7b2c\u4e00\u9053\u7d2b\u9898\uff1a[HNOI2015]\u83dc\u80b4\u5236\u4f5c"
    },
    {
        "content": "## \u666e\u901a\u7684\u62d3\u6251\u6392\u5e8f\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nconst int N=1e5;\nint n, m, in[N];\nvector<int> g[N], ans;\nqueue<int> q;\n\nint main() {\n  cin>>n>>m;\n  for(int i=1; i<=m; i++) {\n    int x, y;\n    cin>>x>>y;\n    g[x].push_back(y);\n    in[y]++;//\u5165\u5ea6\n  }\n  \n  for(int i=1; i<=n; i++)\n    if(in[i]==0)\n      q.push(i);\n  \n  while(!q.empty()) {//\u5faa\u73af\u7ed3\u6784\n    int x = q.front();//1. \u62ff\u51fa\n    q.pop();\n\n    ans.push_back(x);//2. \u7b54\u6848\n    \n    //3.\u5904\u7406\u540e\u7eed\n    for(int i=0; i<g[x].size(); i++) {\n\t\t\tint y = g[x][i];\n      in[y]--;//\u5165\u5ea6\u51cf1\n      if(in[y] == 0)\n        q.push(y);\n    }\n  }\n  if(ans.size() != n) {//\u627e\u5230\u7684\u5e8f\u5217\u5e94\u8be5\u662fn\u4e2a\uff0c\u5426\u5219\u5c31\u6709\u73af\n    cout<<\"\u6709\u73af\"<<endl;\n    return 0;\n  }\n  for(int i=0; i<ans.size(); i++)\n    cout<<ans[i]<<\" \";\n  cout<<endl;\n  \n  return 0;\n}\n```\n### \u5b57\u5178\u5e8f(\u5c0f\u7684\u5728\u524d)\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nconst int N=1e5;\nint n, m, in[N];\nvector<int> g[N], ans;\n//queue<int> q;//\u6539\u6210\u4f18\u5148\u961f\u5217\npriority_queue<int, vector<int>, greater<int> > q;\n\nint main() {\n  cin>>n>>m;\n  for(int i=1; i<=m; i++) {\n    int x, y;\n    cin>>x>>y;\n    g[x].push_back(y);\n    in[y]++;//\u5165\u5ea6\n  }\n  \n  for(int i=1; i<=n; i++)\n    if(in[i]==0)\n      q.push(i);\n  \n  while(!q.empty()) {//\u5faa\u73af\u7ed3\u6784\n    int x = q.top();//1. \u62ff\u51fa\n    q.pop();\n\n    ans.push_back(x);//2. \u7b54\u6848\n    \n    //3.\u5904\u7406\u540e\u7eed\n    for(int i=0; i<g[x].size(); i++) {\n\t\t\tint y = g[x][i];\n      in[y]--;//\u5165\u5ea6\u51cf1\n      if(in[y] == 0)\n        q.push(y);\n    }\n  }\n  if(ans.size() != n) {//\u627e\u5230\u7684\u5e8f\u5217\u5e94\u8be5\u662fn\u4e2a\uff0c\u5426\u5219\u5c31\u6709\u73af\n    cout<<\"\u6709\u73af\"<<endl;\n    return 0;\n  }\n  for(int i=0; i<ans.size(); i++)\n    cout<<ans[i]<<\" \";\n  cout<<endl;\n  \n  return 0;\n}\n\n\n\n```\n\n## \u4f8b\u9898 \u83dc\u80b4\u5236\u4f5c\n![](https://cdn.luogu.com.cn/upload/image_hosting/lqpo6caj.png)\n![](https://cdn.luogu.com.cn/upload/image_hosting/ls5de8a8.png)\n* \u601d\u8def\uff1a\u4f18\u5148\u961f\u5217\u3001\u53cd\u5411\u5efa\u8fb9\u3001\u53cd\u5411\u8f93\u51fa\n```cpp\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst int N = 1e5 + 5;\nint n, m, t, in[N];\nvector<int> g[N];\nint main() {\n\tcin >> t;\n\twhile(t--) {\n\t\tvector<int> ans;\n\t\tpriority_queue<int> q;\n\t\tfor(int i = 0; i <= n; i++)\n\t\t\tg[i].clear();\n\t\tmemset(in, 0, sizeof(in));\n\t\tcin >> n >> m;\n\t\tfor(int i = 1; i <= m; i++) {\n\t\t\tint x, y;\n\t\t\tcin >> x >> y;\n\t\t\tg[y].push_back(x);\n\t\t\tin[x]++;\n\t\t}\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tif(in[i] == 0)\n\t\t\t\tq.push(i);\n\t\twhile(!q.empty()) {\n\t\t\tint x = q.top();\n\t\t\tq.pop();\n\t\t\tans.push_back(x);\n\t\t\tfor(int i = 0; i < g[x].size(); i++) {\n\t\t\t\tint y = g[x][i];\n\t\t\t\tin[y]--;\n\t\t\t\tif(in[y] == 0)\n\t\t\t\t\tq.push(y);\n\t\t\t}\n\t\t}\n\t\tif(ans.size() != n) {\n\t\t\tcout << \"Impossible!\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tfor(int i = ans.size() - 1; i >= 0; i--)\n\t\t\tcout << ans[i] << \" \";\n\t\tcout << endl;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1570948485,
        "uid": 179983,
        "name": "59percent",
        "ccfLevel": 0,
        "title": "\u62d3\u6251\u6392\u5e8f"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0\n\n\u77e5\u540d\u7f8e\u98df\u5bb6\u5c0f A\u88ab\u9080\u8bf7\u81f3ATM \u5927\u9152\u5e97\uff0c\u4e3a\u5176\u54c1\u8bc4\u83dc\u80b4\u3002 ATM \u9152\u5e97\u4e3a\u5c0f A \u51c6\u5907\u4e86 N \u9053\u83dc\u80b4\uff0c\u9152\u5e97\u6309\u7167\u4e3a\u83dc\u80b4\u9884\u4f30\u7684\u8d28\u91cf\u4ece\u9ad8\u5230\u4f4e\u7ed9\u4e881\u5230N\u7684\u987a\u5e8f\u7f16\u53f7\uff0c\u9884\u4f30\u8d28\u91cf\u6700\u9ad8\u7684\u83dc\u80b4\u7f16\u53f7\u4e3a1\u3002\n\n\u7531\u4e8e\u83dc\u80b4\u4e4b\u95f4\u53e3\u5473\u642d\u914d\u7684\u95ee\u9898\uff0c\u67d0\u4e9b\u83dc\u80b4\u5fc5\u987b\u5728\u53e6\u4e00\u4e9b\u83dc\u80b4\u4e4b\u524d\u5236\u4f5c\uff0c\u5177\u4f53\u7684\uff0c\u4e00\u5171\u6709 M \u6761\u5f62\u5982\u201di \u53f7\u83dc\u80b4'\u5fc5\u987b'\u5148\u4e8e j \u53f7\u83dc\u80b4\u5236\u4f5c\u201c\u7684\u9650\u5236\uff0c\u6211\u4eec\u5c06\u8fd9\u6837\u7684\u9650\u5236\u7b80\u5199\u4e3a<i,j>\u3002\n\n\u73b0\u5728\uff0c\u9152\u5e97\u5e0c\u671b\u80fd\u6c42\u51fa\u4e00\u4e2a\u6700\u4f18\u7684\u83dc\u80b4\u7684\u5236\u4f5c\u987a\u5e8f\uff0c\u4f7f\u5f97\u5c0f A\u80fd\u5c3d\u91cf\u5148\u5403\u5230\u8d28\u91cf\u9ad8\u7684\u83dc\u80b4\uff1a\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\n\n(1)\u5728\u6ee1\u8db3\u6240\u6709\u9650\u5236\u7684\u524d\u63d0\u4e0b\uff0c1 \u53f7\u83dc\u80b4\u201d\u5c3d\u91cf\u201c\u4f18\u5148\u5236\u4f5c\uff1b\n\n(2)\u5728\u6ee1\u8db3\u6240\u6709\u9650\u5236\uff0c1\u53f7\u83dc\u80b4\u201d\u5c3d\u91cf\u201c\u4f18\u5148\u5236\u4f5c\u7684\u524d\u63d0\u4e0b\uff0c2\u53f7\u83dc\u80b4\u201d\u5c3d\u91cf\u201c\u4f18\u5148\u5236\u4f5c\uff1b\n\n(3)\u5728\u6ee1\u8db3\u6240\u6709\u9650\u5236\uff0c1\u53f7\u548c2\u53f7\u83dc\u80b4\u201d\u5c3d\u91cf\u201c\u4f18\u5148\u7684\u524d\u63d0\u4e0b\uff0c3\u53f7\u83dc\u80b4\u201d\u5c3d\u91cf\u201c\u4f18\u5148\u5236\u4f5c\n\n\uff1b(4)\u5728\u6ee1\u8db3\u6240\u6709\u9650\u5236\uff0c1 \u53f7\u548c 2 \u53f7\u548c 3 \u53f7\u83dc\u80b4\u201d\u5c3d\u91cf\u201c\u4f18\u5148\u7684\u524d\u63d0\u4e0b\uff0c4 \u53f7\u83dc\u80b4\u201d\u5c3d\u91cf\u201c\u4f18\u5148\u5236\u4f5c\uff1b\n\n(5)\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u4f8b1\uff1a\u51714 \u9053\u83dc\u80b4\uff0c\u4e24\u6761\u9650\u5236<3,1>\u3001<4,1>\uff0c\u90a3\u4e48\u5236\u4f5c\u987a\u5e8f\u662f 3,4,1,2\u3002\n\n\u4f8b2\uff1a\u51715\u9053\u83dc\u80b4\uff0c\u4e24\u6761\u9650\u5236<5,2>\u3001 <4,3>\uff0c\u90a3\u4e48\u5236\u4f5c\u987a\u5e8f\u662f 1,5,2,4,3\u3002\n\n\u4f8b1\u91cc\uff0c\u9996\u5148\u8003\u8651  1\uff0c\u56e0\u4e3a\u6709\u9650\u5236<3,1>\u548c<4,1>\uff0c\u6240\u4ee5\u53ea\u6709\u5236\u4f5c\u5b8c 3 \u548c 4 \u540e\u624d\u80fd\u5236\u4f5c 1\uff0c\u800c\u6839\u636e(3)\uff0c3 \u53f7\u53c8\u5e94\u201d\u5c3d\u91cf\u201c\u6bd4 4  \u53f7\u4f18\u5148\uff0c\u6240\u4ee5\u5f53\u524d\u53ef\u786e\u5b9a\u524d\u4e09\u9053\u83dc\u7684\u5236\u4f5c\u987a\u5e8f\u662f 3,4,1\uff1b\u63a5\u4e0b\u6765\u8003\u86512\uff0c\u786e\u5b9a\u6700\u7ec8\u7684\u5236\u4f5c\u987a\u5e8f\u662f 3,4,1,2\u3002\n\n\u4f8b 2\u91cc\uff0c\u9996\u5148\u5236\u4f5c 1\u662f\u4e0d\u8fdd\u80cc\u9650\u5236\u7684\uff1b\u63a5\u4e0b\u6765\u8003\u8651 2  \u65f6\u6709<5,2>\u7684\u9650\u5236\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u5148\u5236\u4f5c 5 \u518d\u5236\u4f5c 2\uff1b\u63a5\u4e0b\u6765\u8003\u8651 3 \u65f6\u6709<4,3>\u7684\u9650\u5236\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u5148\u5236\u4f5c 4\u518d\u5236\u4f5c  3\uff0c\u4ece\u800c\u6700\u7ec8\u7684\u987a\u5e8f\u662f 1,5,2,4,3\u3002 \u73b0\u5728\u4f60\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u6700\u4f18\u7684\u83dc\u80b4\u5236\u4f5c\u987a\u5e8f\u3002\u65e0\u89e3\u8f93\u51fa\u201dImpossible!\u201c  \uff08\u4e0d\u542b\u5f15\u53f7\uff0c\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4f59\u5b57\u6bcd\u5c0f\u5199\uff09\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570D\uff0c\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002 \u63a5\u4e0b\u6765\u662fD\u7ec4\u6570\u636e\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff1a  \u7b2c\u4e00\u884c\u4e24\u4e2a\u7528\u7a7a\u683c\u5206\u5f00\u7684\u6b63\u6574\u6570N\u548cM\uff0c\u5206\u522b\u8868\u793a\u83dc\u80b4\u6570\u76ee\u548c\u5236\u4f5c\u987a\u5e8f\u9650\u5236\u7684\u6761\u76ee\u6570\u3002  \u63a5\u4e0b\u6765M\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570x,y\uff0c\u8868\u793a\u201dx\u53f7\u83dc\u80b4\u5fc5\u987b\u5148\u4e8ey\u53f7\u83dc\u80b4\u5236\u4f5c\u201c\u7684\u9650\u5236\u3002\uff08\u6ce8\u610f\uff1aM\u6761\u9650\u5236\u4e2d\u53ef\u80fd\u5b58\u5728\u5b8c\u5168\u76f8\u540c\u7684\u9650\u5236\uff09\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u6587\u4ef6\u4ec5\u5305\u542b D \u884c\uff0c\u6bcf\u884c N \u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u4f18\u7684\u83dc\u80b4\u5236\u4f5c\u987a\u5e8f\uff0c\u6216\u8005\u201cImpossible!\u201c\u8868\u793a\u65e0\u89e3\uff08\u4e0d\u542b\u5f15\u53f7\uff09\u3002\n\n**\u8f93\u5165** \n\n```\n3\n5 4\n5 4\n5 3\n4 2\n3 2\n3 3\n1 2\n2 3\n3 1\n5 2\n5 2\n4 3\n```\n\n**\u8f93\u51fa** \n\n```\n1 5 3 4 2 \nImpossible! \n1 5 2 4 3\n```\n\n### \u8bf4\u660e/\u63d0\u793a\n\n\u3010\u6837\u4f8b\u89e3\u91ca\u3011\n\n\u7b2c\u4e8c\u7ec4\u6570\u636e\u540c\u65f6\u8981\u6c42\u83dc\u80b41\u5148\u4e8e\u83dc\u80b42\u5236\u4f5c\uff0c\u83dc\u80b42\u5148\u4e8e\u83dc\u80b43\u5236\u4f5c\uff0c\u83dc\u80b43\u5148\u4e8e\n\n\u83dc\u80b41\u5236\u4f5c\uff0c\u800c\u8fd9\u662f\u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u53ef\u80fd\u6ee1\u8db3\u7684\uff0c\u4ece\u800c\u5bfc\u81f4\u65e0\u89e3\u3002\n\n100%\u7684\u6570\u636e\u6ee1\u8db3N,M<=100000,D<=3\u3002\n\n**\u9898\u89e3\uff1a**\n\n\u2460Impossible\u7684\u60c5\u51b5\uff1a\u5f53\u4e14\u4ec5\u5f53\u51fa\u73b0\u95ed\u73af\u65f6\u3002\n\n\u2461\u8bbe\u7f16\u53f7\u5c0f\u7684\u83dc\u4e3a\uff0c\u7f16\u53f7\u5927\u7684\u83dc\u4e3ab\u3002\u6211\u4eec\u60f3\u8981a\u5c3d\u91cf\u5f80\u524d\u9760\uff0c\u8d2a\u5fc3\u5f88\u5bb9\u6613\u4e3e\u51fa\u53cd\u4f8b\n\n\u3000\u3000\u5982\uff1a4\u79cd\u83dc\u80b4\uff0c\u9650\u5236\u4e3a<2,4><3,1>\uff0c\u90a3\u4e48\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u662f2,3,1,4\uff0c\u4f46\u9898\u76ee\u8981\u6c42\u7684\u6700\u4f18\u89e3\u662f3,1,2,4\u3002\n\n\u2462\u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u5728\u5408\u6cd5\u8303\u56f4\u5185\u5c3d\u53ef\u80fd\u5927\uff0c\u90a3\u4e48\u8fd9\u6837\u662f\u7edd\u5bf9\u6709\u5229\u7684\u3002\n\n\u56e0\u4e3a\u5982\u679c\u8bbe\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662fx\uff0c\u90a3\u4e48\u9664\u4e86x\u4e4b\u5916\u7684\u6240\u6709\u6570\u90fd\u4e0d\u4f1a\u88ab\u653e\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\u3000\u3000\u56e0\u6b64,\u6700\u4f18\u89e3\u5c31\u662f\u7b26\u5408\u6761\u4ef6\u7684\u6392\u5217\u4e2d\uff0c**\u53cd\u5e8f\u5217**\u7684\u5b57\u5178\u5e8f**\u6700\u5927**\u7684\u6392\u5217\u3002\n\n\u53cd\u5411\u8dd1\u62d3\u6251\u3002\u8ba9b\u8fde\u5411a\uff0c\u8dd1\u53cd\u56fe\u7684\u62d3\u6251\u3002\u5229\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u3002\n\n \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include<vector>\nusing namespace std;\nconst int N = 1e5 + 5;\nint n, m, cnt, T, indeg[N], ans[N];\nvector <int> edge[N];\nvoid input() {\n    cin >> n >> m;\n    for(int i = 1, x, y;i <= m;i ++) {\n        cin >> x >> y;\n        edge[y].push_back(x); indeg[x] ++;\n    }\n}\nvoid topsort() {\n    priority_queue <int> q;\n    for(int i = 1;i <= n;i ++)\n    if(! indeg[i]) q.push(i);\n    while(! q.empty()) {\n        int tmp=q.top(); q.pop();\n        ans[++ cnt] = tmp;\n//       for(vector<int>::iterator it = edge[tmp].begin();it != edge[tmp].end();it ++) {\n//           indeg[*it]--;                            //\u8fed\u4ee3\u5668\u5927\u6cd5\u597d\u554a\uff01\uff01 \n//           if(! indeg[*it]) q.push(*it);\n//        }\n        for(int i = 0;i < edge[tmp].size();i ++) {\n            int it = edge[tmp][i]; indeg[it] --;\n            if(! indeg[it]) q.push(it);\n        }\n    }\n}\nvoid output() {\n    if(cnt < n) { puts(\"Impossible!\"); return; }\n    for(int i = n; i ;i --) cout << ans[i] << \" \"; cout << endl;\n}\nvoid clear() {\n    cnt = 0;\n    memset(ans, 0, sizeof(ans));\n    memset(indeg, 0, sizeof(indeg));\n    for(int i = 1;i <= n;i ++) edge[i].clear();\n}\nint main() {\n    cin >> T;\n    while(T --> 0) clear(), input(), topsort(), output();\n    //\u4e00\u65f6\u538b\u884c\u4e00\u65f6\u723d\uff0c\u4e00\u76f4\u538b\u884c\u4e00\u76f4\u723d~~~ \n    return 0;\n}\n```",
        "postTime": 1565574034,
        "uid": 151852,
        "name": "Paranoid\u4e36\u79bb\u6b87",
        "ccfLevel": 6,
        "title": "P3243 [HNOI2015]\u83dc\u80b4\u5236\u4f5c \u62d3\u6251\u6392\u5e8f"
    },
    {
        "content": "\u5bf9\u4e8e\u6b64\u9898\uff0c\u6709\u4e24\u79cd\u601d\u8def\n\n\u4e00\u662f\u6b63\u7740\u627e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u62d3\u6251\u5e8f\n\n\u4e8c\u662f\u53cd\u7740\u627e\u5b57\u5178\u5e8f\u6700\u5927\u7684\u62d3\u6251\u5e8f\n\n\u6211\u4eec\u6240\u8981\u6c42\u7684\u662f\u4e00\u4e2a\u00b7\u83dc\u505a\u51fa\u65f6\u95f4\u6700\u5c0f\u7684\u62d3\u6251\u5e8f\n\n\u5bf9\u4e8e\u4f8b\u5b50 4->1    ,2  , 3\n\n\u6700\u4f18\u89e3\u5e94\u4e3a4 1 2 3\n\n\u6b64\u65f6\u6620\u5c04\u6570\u7ec4\u4e3a   2 3 4 1 \uff08\u7b2ci\u9053\u83dc\u88ab\u7b2c\u51e0\u6b21\u9009\u4e2d\uff09\n\n\u5982\u679c\u5148\u9009\u5c0f\u7684\uff0c\u90a3\u4e48\u53ef\u80fd\u89e3\u7684\u524d\u4e00\u4f4d\u88ab\u522b\u7684\u4f4d\u7f6e\u5e72\u6270\u800c\u65e0\u6cd5\u6700\u4f18\n\n\u5982\u679c\u5148\u9009\u5927\u7684\u5219\u53ef\u4fdd\u8bc1\u6bcf\u4e00\u4f4d\u90fd\u8ba9\u5927\u7684\u90fd\u80fd\u6700\u9760\u540e\n\n\u8fd9\u662f\u4ee3\u7801\n\n    \n    \n    \n    \n    \n            \n         \n         \n         \n         \n    \n    \n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef pair<int,int> p;\npriority_queue < p,vector <p> >q;\nint last[110000],other[110000],pre[110000],num[110000];\nbool vis[100001];\nint a[100005];\nvoid add(int x,int y,int cnt)\n{\n     last[cnt]=pre[x];\n     other[cnt]=y;\n     pre[x]=cnt;\n     num[y]++;\n}\nint main()\n{\n    int t;\n    int cnt=0;\n    int n,m;\n    cin>>t;\n    for(int u=1;u<=t;u++)\n    {\n     memset(vis,0,sizeof(vis));\n         memset(a,0,sizeof(a));\n            memset(num,0,sizeof num);\n            memset(pre,0,sizeof pre);\n    cnt=0;\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n            int x,y;\n            cin>>x>>y;\n            add(y,x,++cnt);\n    }\n    int sum=0;\n    for(int i=1;i<=n;i++)\n    {\n            if(num[i]==0)\n            q.push(p(i,0));\n    }\n    int cnt=0;\n    while(!q.empty())\n    {\n         p pp=q.top();\n         q.pop();\n         int u=pp.first;\n         if(vis[u])continue;\n         vis[u]=1;\n         a[++cnt]=u;\n         for(int i=pre[u];i;i=last[i])\n         {\n                 int y=other[i];\n                 num[y]--;\n                 if(num[y]==0)\n                 q.push(p(y,0));\n         }\n    }\n    if(cnt!=n)printf(\"Impossible!\\n\");\n    else\n    {\n             for(int i=1;i<=n;i++)\n            cout<<a[n-i+1]<<\" \";\n            cout<<endl;\n    }\n    }\n    system(\"pause\");\n    return 0;\n}\n```",
        "postTime": 1495201937,
        "uid": 25438,
        "name": "\u5927\u5955\u54e5",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u770b\u8d77\u6765\u5c31\u662f\u4e2a\u88f8\u7684\u62d3\u6251\u6392\u5e8f\uff0c\u6284\u4e0a\u6a21\u677f\u5c31\u80fdAC\u3002\n\n\u4e0a\u9762\u8fd9\u79cd\u60f3\u6cd5\u4e00\u770b\u5c31\u4e0d\u73b0\u5b9e\uff0c\u7136\u9e45\u6211\u7b2c\u4e00\u6b21\u8fd8\u771f\u5c31\u8fd9\u4e48\u5199\u4e86\uff0c\u7136\u540e\u88ab\u968f\u610fhack\u3002\n\n------------\n\n\u6211\u4eec\u9700\u8981\u6ce8\u610f\u4e00\u53e5\u8bdd\uff1a\n\n`\u73b0\u5728\uff0c\u9152\u5e97\u5e0c\u671b\u80fd\u6c42\u51fa\u4e00\u4e2a\u6700\u4f18\u7684\u83dc\u80b4\u7684\u5236\u4f5c\u987a\u5e8f\uff0c\u4f7f\u5f97\u5c0f A\u80fd\u5c3d\u91cf\u5148\u5403\u5230\u8d28\u91cf\u9ad8\u7684\u83dc\u80b4\uff1a`\n\n\u8fd9\u53e5\u8bdd\u4ec0\u4e48\u610f\u601d\u5462\uff1f\n\n\u770b\u4e0a\u53bb\u5b83\u662f\u8bf4\u60f3\u8981\u4e00\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u9898\u76ee\u5e76\u4e0d\u662f\u5f3a\u6c42\u8d28\u91cf\u9ad8\u4e00\u5b9a\u5148\uff0c\u800c\u662f\u6709\u4e00\u4e2a\u5bbd\u9650\u8303\u56f4\uff08\u53ef\u80fd\u6211\u8bb2\u7684\u6bd4\u8f83\u7384\u5b66\uff09\u3002\n\n\u89e3\u51b3\u65b9\u6848\u662f\u8d2a\u5fc3\u5730\u628a\u5927\u7684\u653e\u5728\u672b\u5c3e\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8dd1\u4e00\u4e2a\u5b57\u5178\u5e8f\u6700\u5927\u7684\u62d3\u6251\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5b57\u5178\u5e8f\u6700\u5927\u5c31\u662f\u53cd\u7740\u8dd1\u4e00\u904d\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\n\n------------\n\nAC\u4ee3\u7801\u5982\u4e0b\uff1a\n\n`820ms 133668kb`\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nnamespace StandardIO {\n\n\ttemplate<typename T>inline void read (T &x) {\n\t\tx=0;T f=1;char c=getchar();\n\t\tfor (; c<'0'||c>'9'; c=getchar()) if (c=='-') f=-1;\n\t\tfor (; c>='0'&&c<='9'; c=getchar()) x=x*10+c-'0';\n\t\tx*=f;\n\t}\n\n\ttemplate<typename T>inline void write (T x) {\n\t\tif (x<0) putchar('-'),x*=-1;\n\t\tif (x>=10) write(x/10);\n\t\tputchar(x%10+'0');\n\t}\n\n}\n\nusing namespace StandardIO;\n\nnamespace Solve {\n\t\t\n\tconst int N=300300;\n\t\n\tint T,n,m,cnt;\n\tint indeg[N],ans[N];\n\tvector<int>graph[N];\n\t\n\tinline void toposort () {\n\t\tint temp[N];\n\t\tpriority_queue<int>q;\n\t\tmemcpy(temp,indeg,sizeof(indeg));\n\t\twhile(!q.empty())q.pop();\n\t\tfor (register int i=1; i<=n; ++i) {\n\t\t\tif (temp[i]==0) q.push(i);\n\t\t}\n\t\twhile (!q.empty()) {\n\t\t\tint v=q.top();q.pop();\n\t\t\tans[++cnt]=v;\n\t\t\tfor (register int i=0; i<graph[v].size(); ++i) {\n\t\t\t\tint to=graph[v][i];\n\t\t\t\ttemp[to]--;\n\t\t\t\tif (temp[to]==0) q.push(to);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tinline void solve () {\n\t\tread(T);\n\t\twhile (T--) {\n\t\t\tread(n),read(m);\n\t\t\tcnt=0,memset(indeg,0,sizeof(indeg));\n\t\t\tfor (register int i=1; i<=n; ++i) {\n\t\t\t\tgraph[i].clear();\n\t\t\t}\n\t\t\tfor (register int i=1; i<=m; ++i) {\n\t\t\t\tint x,y;\n\t\t\t\tread(x),read(y);\n\t\t\t\tindeg[x]++;\n\t\t\t\tgraph[y].push_back(x);\n\t\t\t}\n\t\t\ttoposort();\n\t\t\tif (cnt!=n) puts(\"Impossible!\");\n\t\t\telse {\n\t\t\t\tfor (register int i=n; i>=1; --i) write(ans[i]),putchar(' ');\n\t\t\t\tputchar('\\n');\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n\nusing namespace Solve;\n\nint main () {\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tsolve();\n}\n\n```",
        "postTime": 1539527341,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "\u7c7b\u578b\uff1a\u62d3\u8865\u6392\u5e8f\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u8fd9\u662f\u4e00\u9053\u62d3\u8865\u6392\u5e8f\u7684\u9898\u3002\u4f46\u662f\u5728\u5b89\u6392\u987a\u5e8f\u4e0a\u5f88\u6709\u8bb2\u7a76\u3002\u770b\u4e0a\u53bb\u6709\u70b9\u50cf\u5b57\u5178\u5e8f\u5c3d\u53ef\u80fd\u5c0f\u3002\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u80fd\u8fd9\u6837\u3002\u5f88\u5bb9\u6613\u4fbf\u80fd\u4e3e\u4f8b\u51fa\u53cd\u4f8b\u3002\u4f46\u662f\u6211\u4eec\u518d\u770b\uff0c\u5982\u679c\u6570\u5927\u7684\u5c3d\u53ef\u80fd\u653e\u5728\u540e\u9762\u662f\u6709\u5229\u4e8e\u6211\u4eec\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5c061\u653e\u5728\u540e\u9762\u8003\u8651\uff08\u4f4d\u6570\u8003\u8651\u5148\u4e8e\u5b50\u5178\u5e8f\u8003\u8651\uff09\u3002\n\n\u56e0\u6b64\uff0c\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u5c31\u662f\u5b58\u53cd\u56fe\u52a0\u5927\u6839\u5806\u62d3\u8865\u6392\u5e8f\uff0c\u8ba9\u5927\u7684\u6570\u5c3d\u53ef\u80fd\u4f4d\u6570\u9760\u540e\uff0c\u540c\u65f6\u4e5f\u4fdd\u8bc1\u4e86\u5b50\u5178\u5e8f\u3002\n\n\n    #include<bits/stdc++.h>\n\t#define maxn 100005\n\tusing namespace std;\n\tint n,m;\n\tpriority_queue<int>q;\n\tint tot,nt[maxn],la[maxn],en[maxn];\n\tint sx[maxn],rd[maxn],nnn;\n\tvoid dodo()\n\t{\n\tint i,x,y;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tif(!rd[i]) q.push(i);\n\t}\n\twhile(q.size())\n\t{\n\t\tx=q.top();\n\t\tsx[nnn--]=x;\n\t\tq.pop();\n\t\tfor(i=la[x];i;i=nt[i])\n\t\t{\n\t\t\tif(rd[en[i]]) \n\t\t\t{\n\t\t\trd[en[i]]--;\n\t\t\tif(!rd[en[i]]) { q.push(en[i]); }\n\t\t\t}\n\t\t}\n\t}\n\t}\n\n\tint main()\n\t{\n\tint d,i,x,y;\n\tscanf(\"%d\",&d);\n\twhile(d--)\n\t{\n\t\tmemset(nt,0,sizeof(nt)); \n\t\tmemset(la,0,sizeof(la));\n\t\tmemset(nt,0,sizeof(nt));\n\t\tmemset(rd,0,sizeof(rd));\n\t\tmemset(sx,0,sizeof(sx));\n\t\ttot=0;\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(i=1;i<=m;i++)\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\ten[++tot]=x; nt[tot]=la[y]; la[y]=tot;//ft\n\t\t\trd[x]++;\n\t\t}\n\t\tnnn=n;\n\t\tdodo();\n\t\tif(nnn==0)\n\t\t{\n\t\t\tfor(i=1;i<=n;i++) printf(\"%d \",sx[i]);\n\t\t}\n\t\telse printf(\"Impossible!\");\n\t\tprintf(\"\\n\");\n\t}\n\t}\t ",
        "postTime": 1518336447,
        "uid": 55343,
        "name": "Newuser",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    },
    {
        "content": "\u8868\u793a\u849f\u84bb\u7684\u505a\u6cd5\u548c\u5927\u591a\u6570\u4eba\u7684\u7b97\u6cd5\u7565\u6709\u51fa\u5165\uff0c\u4f46\u662f\u601d\u8def\u8fc7\u7a0b\u5e94\u8be5\u66f4\u201c\u63a5\u5730\u6c14\u201d\u4e00\u70b9\uff08\u56e0\u4e3a\u849f\u84bb\u5b9e\u5728\u592a\u8fa3\u9e21\u5566\uff01\uff09\n\n\u9996\u5148\u8fd9\u4e2a\u9898\u5b57\u5178\u5e8f\u6700\u5c0f\u662f\u4e0d\u5bf9\u7684QwQ\n\n\u7136\u540e\u5e76\u6ca1\u6709\u770b\u61c2\u4e3a\u4ec0\u4e48\u53cd\u56fe\u7684\u5b57\u5178\u5e8f\u6700\u5927\u7684\u5e8f\u5217\u7684\u53cd\u5e8f\u5217\u5c31\u662f\u5bf9\u7684\u3002\n\n\u4e8b\u5b9e\u4e0a60%\u7684\u5206\u5c31\u662f\u66b4\u529b\uff0c\u6211\u7684\u60f3\u6cd5\u5c31\u662f\u7528\u4e00\u4e9b\u5747\u644a\u590d\u6742\u5ea6\u7684\u6280\u5de7\u6765\u4f18\u5316\u3002\n\n\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a\n\n\u5bf9\u4e8e\u7b2c\u4e00\u9053\u83dc\uff0c\u770b\u80fd\u4e0d\u80fd\u76f4\u63a5\u505a\uff0c\u80fd\u5c31\u505a\u5e76\u6807\u8bb0\u4e3a\u201c\u5df2\u505a\u201d\u3002\n\n\u5426\u5219\u628a\u9700\u8981\u505a\u7684\uff0c\u5e76\u4e14\u8fd8\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u5df2\u505a\u7684\u83dc\u505a\u4e86\uff0c\u8fd9\u4e2a\u6b63\u65b9\u5411\u5e8f\u5217\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u90a3\u4e48\u5c31\u662f\u53cd\u56fe\u4e2d\u53cd\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u6700\u5927\u53ef\u4ee5\u7528\u5806\u7ef4\u62a4\u3002\n\n\u6ce8\u610f\u5230\u4e00\u9053\u83dc\u505a\u4e86\u610f\u5473\u7740\u505a\u8fd9\u9053\u83dc\u9700\u8981\u5148\u505a\u7684\u83dc\u5df2\u7ecf\u505a\u4e86\uff0c\u56e0\u6b64\u5f53\u524d\u8fd9\u4e2a\u5df2\u7ecf\u505a\u4e86\u7684\u83dc\u6240\u4f9d\u8d56\u7684\u83dc\u5c31\u4e0d\u7528\u904d\u5386\u8003\u8651\u4e86\u3002\n\n\u56e0\u6b64\u6bcf\u6b21\u62d3\u6251\u6392\u5e8f\u4e4b\u524d\u5148bfs\u4e00\u904d\u627e\u5230\u90a3\u4e9b\u83dc\u662f\u8fd9\u6b21\u9700\u8981\u505a\u7684\uff0c\u7136\u540e\u62d3\u6392\u5373\u53ef\u3002\n\n\u7531\u4e8e\u62d3\u6392\u9700\u8981\u7528\u5806\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u70b9\u53ea\u5165\u5806\u51fa\u5806\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662fO(nlgn)\u7684\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#define MAXN 100010\nusing namespace std;\nvector<int> g[MAXN];\nint tlist[MAXN],ans[MAXN];\nint d[MAXN],vis[MAXN],tcnt;\npriority_queue<int> q;\nstack<int> s;queue<int> bq;\nint bfs(int s)\n{\n    while(!bq.empty()) bq.pop();\n    bq.push(s);vis[s]=true;\n    while(!bq.empty())\n    {\n        int x=bq.front();bq.pop();\n        for(int i=g[x].size()-1;i>=0;i--)\n        {\n            if(!vis[g[x][i]])\n            {\n                bq.push(g[x][i]);\n                vis[g[x][i]]=s;\n            }\n            if(vis[g[x][i]]==s) d[g[x][i]]++;\n        }\n    }\n    return 0;\n}\nint toposort(int s)\n{\n    while(!q.empty()) q.pop();q.push(s);\n    while(!q.empty())\n    {\n        int x=q.top();q.pop();tlist[++tcnt]=x;\n        for(int i=g[x].size()-1;i>=0;i--)\n            if(vis[g[x][i]]==s)\n            {\n                d[g[x][i]]--;\n                if(!d[g[x][i]]) q.push(g[x][i]);\n            }\n    }\n    return 0;\n}\nint main()\n{\n    int tests;scanf(\"%d\",&tests);\n    while(tests--)\n    {\n        int n,m;scanf(\"%d%d\",&n,&m);\n        memset(d,0,sizeof(d));\n        for(int i=1;i<=n;i++) g[i].clear();\n        memset(vis,false,sizeof(vis));\n        while(!s.empty()) s.pop();\n        while(m--)\n        {\n            int u,v;scanf(\"%d%d\",&u,&v);\n            g[v].push_back(u);d[u]++;\n        }\n        for(int i=1;i<=n;i++)\n            if(!d[i]) s.push(i);\n        int cnt=0;\n        while(!s.empty())\n        {\n            int x=s.top();s.pop();cnt++;\n            for(int i=g[x].size()-1;i>=0;i--)\n            {\n                d[g[x][i]]--;\n                if(!d[g[x][i]]) s.push(g[x][i]);\n            }\n        }\n        if(cnt<n)\n        {\n            printf(\"Impossible!\\n\");\n            continue;\n        }\n        cnt=0;\n        memset(d,0,sizeof(d));\n        for(int i=1;i<=n;i++)\n            if(!vis[i])\n            {\n                bfs(i);tcnt=0;toposort(i);\n                for(int j=1;j<=tcnt;j++)\n                    ans[++cnt]=tlist[tcnt-j+1];\n            }\n        for(int i=1;i<=n;i++)\n            printf(\"%d \",ans[i]);\n        printf(\"\\n\");\n    }\n    return 0;       \n}\n```",
        "postTime": 1497327526,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3243 \u3010[HNOI2015]\u83dc\u80b4\u5236\u4f5c\u3011"
    }
]