[
    {
        "content": "\u7531\u9898\u610f\u53ef\u77e5\uff0c\u6700\u7ec8\u8c03\u5ea6\u65b9\u6848\u91cc\uff0c\u5bf9\u4e8e\u540c\u4e00\u90e8\u95e8\u7684\u5458\u5de5\uff0c\u53ea\u9700\u8981\u4fdd\u7559\u80fd\u529b\u503c\u6700\u5927\u7684\uff0c\u5176\u4f59\u5458\u5de5\u4e0d\u4f1a\u4ea7\u751f\u8d21\u732e\uff0c\u6211\u4eec\u89c6\u4e3a\u4ed6\u4eec\u88ab\u6dd8\u6c70\u4e86\u3002\u90a3\u4e48\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u8d2a\u5fc3\uff1a\u50cf\u6811\u5f62 dp \u90a3\u6837\u81ea\u5e95\u5411\u4e0a\u7ef4\u62a4\u6bcf\u68f5\u5b50\u6811\u7684\u6700\u4f18\u8c03\u5ea6\u7b56\u7565\u3002\u5bf9\u4e8e\u53f6\u8282\u70b9\uff0c\u6700\u4f18\u7b56\u7565\u5c31\u662f\u4fdd\u7559\u8fd9\u4e2a\u7ed3\u70b9\u4e0a\u80fd\u529b\u503c\u6700\u5927\u7684\u90a3\u4f4d\u5458\u5de5\u3002\u5bf9\u4e8e\u4e00\u4e2a\u975e\u53f6\u7ed3\u70b9 $x$\uff0c\u6211\u4eec\u5148\u6c42\u51fa\u5b83\u7684\u6240\u6709\u513f\u5b50\u5bf9\u5e94\u5b50\u6811\u7684\u6700\u4f18\u7b56\u7565\uff0c\u7136\u540e\u6328\u4e2a\u8003\u5bdf\u521d\u59cb\u4f4d\u7f6e\u5728 $x$ \u4e0a\u7684\u6240\u6709\u5458\u5de5 $i$\uff0c\u5982\u679c $x$ \u7684\u6574\u68f5\u5b50\u6811\u91cc\u8fd8\u6709\u7ed3\u70b9\u7a7a\u95f2\u7740\uff0c\u90a3\u5c31\u628a\u5458\u5de5 $i$ \u8c03\u5ea6\u5230\u8fd9\u4e2a\u7a7a\u95f2\u7684\u7ed3\u70b9\u4e0a\u3002\u5426\u5219\uff0c\u627e\u51fa\u76ee\u524d $x$ \u5b50\u6811\u4e2d\u80fd\u529b\u503c\u6700\u5c0f\u7684\u90a3\u4f4d\u5458\u5de5\uff0c\u6bd4\u8f83\u4ed6\u4e0e\u5458\u5de5 $i$ \u7684\u80fd\u529b\u503c\uff0c\u5982\u679c\u5458\u5de5 $i$ \u7684\u80fd\u529b\u503c\u66f4\u5927\u5c31\u6dd8\u6c70\u6389\u8fd9\u4f4d\u5458\u5de5\uff0c\u817e\u51fa\u4f4d\u7f6e\uff0c\u628a\u5458\u5de5 $i$ \u8c03\u5ea6\u8fc7\u53bb\u3002\u8fd9\u4e2a\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u663e\u7136\u3002\r\n\r\n\u6ce8\u610f\u5230\u7531\u4e8e\u662f\u81ea\u5e95\u5411\u4e0a\u8fdb\u884c\u7684\uff0c\u6211\u4eec\u5176\u5b9e\u5e76\u4e0d\u5173\u5fc3\u6bcf\u4e2a\u5458\u5de5\u7a76\u7adf\u8c03\u5ea6\u5230\u4e86\u54ea\u4e2a\u7ed3\u70b9\uff0c\u53ea\u9700\u8981\u5173\u5fc3\u5f53\u524d\u5b50\u6811\u4e2d\u6709\u54ea\u4e9b\u5458\u5de5\u5e78\u5b58\u4e86\u4e0b\u6765\u3002\u66f4\u8fdb\u4e00\u6b65\u5730\uff0c\u6211\u4eec\u5176\u5b9e\u662f\u5bf9\u6bcf\u4e2a\u7ed3\u70b9 $x$ \u7ef4\u62a4\u4e86\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u628a $x$ \u6240\u6709\u513f\u5b50\u7684\u5e8f\u5217\u5408\u5e76\u8d77\u6765\u518d\u52a0\u4e0a\u521d\u59cb\u65f6\u4f4d\u7f6e\u5728 $x$ \u7684\u6240\u6709\u5458\u5de5\u5f97\u5230\u5e8f\u5217 $a$\uff0c\u4ee4 $c$ \u4e3a $a$ \u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u628a $a$ \u6309\u80fd\u529b\u503c\u964d\u5e8f\u6392\u5217\u540e\u6dd8\u6c70\u6389\u672b\u5c3e\u7684 $\\max(0,c-s_x)$ \u4e2a\u5458\u5de5\u5c31\u5f97\u5230\u4e86 $x$ \u5bf9\u5e94\u7684\u5e8f\u5217\uff08$s_x$ \u4e3a $x$ \u7684\u5b50\u6811\u5927\u5c0f\uff09\uff0c\u6dd8\u6c70 $\\max(0,c-s_x)$ \u4e2a\u5458\u5de5\u662f\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1\u5e78\u5b58\u7684\u5458\u5de5\u6570\u91cf\u4e0d\u8d85\u8fc7\u5b50\u6811\u5927\u5c0f\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u663e\u7136\u53ef\u4ee5\u7528\u53ef\u5e76\u5806\u6765\u5b9e\u73b0\uff0c\u4ee4\u5458\u5de5\u6570\u4e3a $k$\uff0c\u5355\u6b21\u590d\u6742\u5ea6\u4e3a $O(n+k\\log k)$\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O(mn+mk\\log k)$\uff0c\u53ef\u4ee5\u83b7\u5f97 48 \u5206\uff0c[\u8fd9\u91cc](https://www.luogu.com.cn/paste/opv0hfhw)\u7ed9\u51fa\u4e86\u4ee3\u7801\u5b9e\u73b0\uff08\u91c7\u7528\u7684\u662f pb_ds \u5e93\u7684\u914d\u5bf9\u5806\uff09\u3002\r\n\r\n\u63a5\u4e0b\u6765\u7684\u65b9\u5411\u662f\u60f3\u529e\u6cd5\u5feb\u901f\u7ef4\u62a4\u8fd9\u4e2a\u5408\u5e76\u7684\u8fc7\u7a0b\u3002\u5148\u6765\u770b\u770b\u53ea\u52a0\u70b9\u600e\u4e48\u505a\uff0c\u6b64\u65f6\uff0c\u5bf9\u4e8e\u4e00\u4f4d\u5728\u4e4b\u524d\u7684\u5408\u5e76\u8fc7\u7a0b\u4e2d\u88ab\u6dd8\u6c70\u7684\u5458\u5de5\uff0c\u4ed6\u4e4b\u540e\u80af\u5b9a\u4e5f\u6ca1\u6709\u673a\u4f1a\u590d\u6d3b\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u7ef4\u62a4\u90a3\u4e9b\u5f53\u524d\u8fd8\u6ca1\u88ab\u6dd8\u6c70\u7684\u5458\u5de5\u3002\u6362\u8a00\u4e4b\uff0c\u8fb9\u52a0\u70b9\uff0c\u8fb9\u7ef4\u62a4\u6bcf\u4e2a\u7ed3\u70b9 $x$ \u7684\u5e8f\u5217\u3002\u6211\u4eec\u79f0\u7ed3\u70b9 $x$ \u662f\u6ee1\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 $x$ \u7684\u5e8f\u5217\u5927\u5c0f\u6070\u597d\u7b49\u4e8e $s_x$\u3002\u5047\u8bbe\u73b0\u5728\u8981\u5728\u7ed3\u70b9 $x$ \u65b0\u52a0\u5165\u4e00\u4f4d\u5458\u5de5 $i$\uff0c\u8003\u8651\u4ed6\u5bf9\u4e8e $x$ \u7684\u7956\u5148\u7684\u5e8f\u5217\u7684\u5f71\u54cd\u3002\r\n\r\n\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\uff0c$x$ \u5230\u6839\u7ed3\u70b9\u7684\u94fe\u4e0a\u6ca1\u6709\u7ed3\u70b9\u662f\u6ee1\u7684\uff0c\u6b64\u65f6\u52a0\u5165\u5458\u5de5 $i$ \u540e $x$ \u7684\u7956\u5148\u7ed3\u70b9\u5728\u5408\u5e76\u5e8f\u5217\u65f6\u4e00\u5b9a\u4e0d\u4f1a\u53d1\u751f\u8d85\u8f7d\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u5458\u5de5\u88ab\u6dd8\u6c70\u3002\u90a3\u4e48\u5458\u5de5 $i$ \u5bf9\u7956\u5148\u7684\u5f71\u54cd\u4ec5\u4ec5\u662f\u5728\u5bf9\u5e94\u5e8f\u5217\u4e2d\u591a\u52a0\u4e86\u4e00\u4f4d\u5458\u5de5\u3002\r\n\r\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\uff0c$x$ \u5230\u6839\u7ed3\u70b9\u7684\u94fe\u4e0a\u5b58\u5728\u4e00\u4e9b\u7ed3\u70b9\u662f\u6ee1\u7684\uff0c\u90a3\u5458\u5de5 $i$ \u7684\u52a0\u5165\u52bf\u5fc5\u4f1a\u5f15\u8d77\u6dd8\u6c70\u7684\u53d1\u751f\u3002\u5047\u88c5\u6a21\u62df\u8fd9\u4e2a\u5411\u4e0a\u5408\u5e76\u7684\u8fc7\u7a0b\uff0c\u663e\u7136\u7b2c\u4e00\u6b21\u6dd8\u6c70\u4f1a\u53d1\u751f\u5728 $x$ \u7684\u7956\u5148\u4e2d\u8ddd\u79bb $x$ \u6700\u8fd1\u7684\u90a3\u4e2a\u6ee1\u7684\u7ed3\u70b9\uff0c\u8bb0\u4e3a $y$\u3002$y$ \u7684\u5e8f\u5217\u7684\u5927\u5c0f\u6070\u4e3a $s_x$\uff0c\u6211\u4eec\u627e\u51fa\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u6700\u672b\u5c3e\u7684\u5458\u5de5 $j$\uff08\u4e5f\u5c31\u662f\u80fd\u529b\u503c\u6700\u5c0f\u7684\uff09\uff0c\u5982\u679c\u5458\u5de5 $i$ \u7684\u80fd\u529b\u503c\u6bd4\u5458\u5de5 $j$ \u90fd\u8981\u5c0f\uff0c\u90a3\u4ed6\u7684\u65c5\u9014\u5230\u8fd9\u5c31\u621b\u7136\u800c\u6b62\u4e86\uff0c$j$ \u4f1a\u628a $i$ \u6dd8\u6c70\u6389\u3002\u800c\u5982\u679c\u5458\u5de5 $i$ \u7684\u80fd\u529b\u503c\u5927\u4e8e\u7b49\u4e8e\u5458\u5de5 $j$\uff0c\u90a3\u4e48\u628a\u5458\u5de5 $j$ \u66ff\u6362\u6210\u5458\u5de5 $i$ \u80af\u5b9a\u66f4\u4f18\uff0c\u800c\u4e14\u6839\u636e\u5355\u8c03\u6027\uff0c\u5458\u5de5 $j$ \u6ca1\u6709\u5728\u4e4b\u540e\u7684\u5408\u5e76\u8fc7\u7a0b\u4e2d\u88ab\u6dd8\u6c70\uff0c\u6240\u4ee5\u7528 $i$ \u6362\u6389 $j$ \u540e $i$ \u4e5f\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u6dd8\u6c70\uff0c\u6240\u4ee5\u6211\u4eec\u6839\u672c\u4e0d\u7528\u518d\u8003\u8651\u540e\u9762\u7684\u8fc7\u7a0b\u4e86\u3002\r\n\r\n\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u53d8\u6210\u4e86\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2 $x$ \u7956\u5148\u4e2d\u8ddd\u79bb $x$ \u6700\u8fd1\u7684\u6ee1\u7684\u7ed3\u70b9\uff0c\u67e5\u8be2\u5b50\u6811\u6700\u5c0f\u503c\u3002\u518d\u8f6c\u5316\u4e00\u4e0b\uff0c\u521d\u59cb\u65f6\u6bcf\u4e2a\u7ed3\u70b9 $x$ \u6709\u4e00\u4e2a\u6743\u503c $v_x=s_x$\uff0c\u7136\u540e\u6bcf\u5728 $x$ \u7ed3\u70b9\u52a0\u4e00\u4e2a\u65b0\u5458\u5de5\u5c31\u4f1a\u628a $x$ \u5230\u6839\u7684\u94fe\u4e0a\u7684\u7ed3\u70b9\u7684\u6743\u503c $-1$\uff0c\u95ee\u7956\u5148\u4e2d\u6700\u8fd1\u7684\u6743\u503c\u7b49\u4e8e $0$ \u7684\u70b9\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u94fe\u52a0\u94fe $\\min$\uff0c\u6811\u5256\u4e00\u4e0b\uff0c\u590d\u6742\u5ea6\u662f $O((k+m)\\log^2 n)$\u3002\r\n\r\n\u73b0\u5728\u6211\u4eec\u641e\u51fa\u4e86\u53ea\u52a0\u70b9\u65f6\u7684\u505a\u6cd5\uff0c\u7531\u4e8e\u8be2\u95ee\u5e76\u4e0d\u5f3a\u5236\u5728\u7ebf\uff0c\u5957\u4e00\u5c42\u7ebf\u6bb5\u6811\u5206\u6cbb\u5373\u53ef\u53d8\u5220\u9664\u4e3a\u64a4\u9500\uff0c\u89c6 $n,m,k$ \u540c\u9636\u7684\u8bdd\u5219\u590d\u6742\u5ea6\u4e3a $O(n\\log^3 n)$\uff0c\u5982\u679c\u5c06\u94fe\u52a0\u94fe $\\min$ \u6539\u7528\u9759\u6001 LCT \u5b9e\u73b0\u5373\u53ef\u53d8\u4e3a $O(n\\log^2 n)$\u3002\u4e0d\u8fc7\u6811\u5256\u7684\u5e38\u6570\u8fd8\u662f\u86ee\u5c0f\u7684\uff0c\u5b8c\u5168\u53ef\u8fc7\u3002\r\n\r\n\u4ee3\u7801\u5982\u4e0b\uff1a\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\nnamespace vectorwyx{\r\n#define pii pair<int,int>\r\n#define fi first\r\n#define se second\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define mk make_pair\r\n#define sml(x,y) (x=min(x,y))\r\n#define big(x,y) (x=max(x,y))\r\n#define ll long long\r\n#define uint unsigned\r\n#define ull unsigned long long\r\n#define umap unordered_map\r\n#define db double\r\n#define fo(i,x,y) for(int i=(x);i<=(y);++i)\r\n#define go(i,x,y) for(int i=(x);i>=(y);--i)\r\n#define ptc putchar\r\n#define gc getchar\r\n#define emp emplace\r\n#define re return\r\n#define co continue\r\n#define brk break\r\n#define HH (ptc('\\n'))\r\n#define bctz __builtin_ctz\r\n#define bclz __builtin_clz\r\n#define bppc __builtin_popcount\r\nusing namespace std;\r\nll seed=chrono::system_clock::now().time_since_epoch().count();\r\nmt19937 rnd(seed);\r\ninline int rm(int x,int y){return (int)(rnd()%(y-x+1ll)+x);}\r\ninline int read(){signed ch=getchar();int x=0,f=1;while(!isdigit(ch)){if(ch==(int)('-'))f=-1;ch=getchar();}while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}return x*f;}\r\ntemplate<typename T> void out(T *a,int l,int r){fo(i,l,r) cout<<*(a+i)<<' ';puts(\"\");}\r\n\r\nconst int N=1e5+5,inf=1e9;\r\nstruct People{\r\n\tint x,v;\r\n\tPeople(){x=0,v=inf;}\r\n\tbool operator<(const People &y)const{re v<y.v;}\r\n\tbool operator>(const People &y)const{re v>y.v;}\r\n}a[N<<1];\r\nvector<int> e[N];\r\nint n,m,k,dfn[N],rk[N],ti,siz[N],son[N],Tid,top[N],lst[N<<1],fa[N];\r\n\r\nvoid dfs1(int x){\r\n\tsiz[x]=1;\r\n\tint mx=0;\r\n\tfor(int i:e[x]){\r\n\t\tdfs1(i);\r\n\t\tsiz[x]+=siz[i];\r\n\t\tif(siz[i]>mx) mx=siz[i],son[x]=i;\r\n\t}\r\n}\r\n\r\nvoid dfs2(int x,int t){\r\n\ttop[x]=t;\r\n\tdfn[x]=++ti;rk[ti]=x;\r\n\tif(son[x]) dfs2(son[x],t);\r\n\tfor(int i:e[x]) if(i!=son[x]) dfs2(i,i);\r\n}\r\n\r\n#define ls (x<<1)\r\n#define rs (x<<1|1)\r\n#define mid ((l+r)>>1)\r\nnamespace DS1{//\u7ef4\u62a4\u5b50\u6811\u6700\u5c0f\u503c\r\n//auto cmp=[](int x,int y){re a[x]<a[y];};\r\n//priority_queue<int,vector<int>,decltype(cmp)> pq[N];\r\nstruct qwq{\r\n\tint id;\r\n\tqwq(){id=0;}\r\n\tqwq(int o){id=o;}\r\n\tbool operator<(const qwq &x)const{\r\n\t\tif(a[id].v!=a[x.id].v) re a[id]<a[x.id];\r\n\t\tre id<x.id;\r\n\t}\r\n};\r\nset<qwq> pq[N];\r\nint tr[N<<2];\r\nvoid ps(int x){\r\n\tif(a[tr[ls]]<a[tr[rs]]) tr[x]=tr[ls];\r\n\telse tr[x]=tr[rs];\r\n}\r\nvoid upd(int x,int l,int r,int aim,int k){\r\n\tif(l==r){\r\n\t\ttr[x]=k;\r\n\t\tre;\r\n\t}\r\n\tif(aim<=mid) upd(ls,l,mid,aim,k);\r\n\telse upd(rs,mid+1,r,aim,k);\r\n\tps(x);\r\n}\r\n\r\nint ask(int x,int l,int r,int L,int R){\r\n\tif(l>=L&&r<=R) re tr[x];\r\n\tif(R<=mid) re ask(ls,l,mid,L,R);\r\n\tif(L>mid) re ask(rs,mid+1,r,L,R);\r\n\tint wl=ask(ls,l,mid,L,R);\r\n\tint wr=ask(rs,mid+1,r,L,R);\r\n\tif(a[wl]>a[wr]) re wr;\r\n\tre wl;\r\n}\r\n\r\nvoid ins(int id){\r\n\tint x=a[id].x;\r\n\tpq[x].insert(qwq(id));\r\n\tupd(1,1,n,dfn[x],(*pq[x].begin()).id);\r\n}\r\nvoid del(int id){\r\n\tint x=a[id].x;\r\n//\tassert(id==pq[x].top().id);\r\n\tpq[x].erase(qwq(id));\r\n\tif(pq[x].empty()) upd(1,1,n,dfn[x],0);\r\n\telse upd(1,1,n,dfn[x],(*pq[x].begin()).id);\r\n}\r\n}\r\n\r\nnamespace DS2{\r\n\t\r\nnamespace Sgt{\r\nstruct Node{\r\n\tint tag,mn;\r\n\tNode(){tag=0;mn=inf;}\r\n\tvoid upd(int x){tag+=x,mn+=x;}\r\n}tr[N<<2];\r\n\r\nvoid ps(int x){tr[x].mn=min(tr[ls].mn,tr[rs].mn);}\r\nvoid pd(int x){\r\n\tint &k=tr[x].tag;\r\n\tif(!k) re;\r\n\ttr[ls].upd(k);\r\n\ttr[rs].upd(k);\r\n\tk=0;\r\n}\r\n\r\nvoid build(int x,int l,int r){\r\n\tif(l==r){\r\n\t\ttr[x].mn=siz[rk[l]];\r\n\t\tre;\r\n\t}\r\n\tbuild(ls,l,mid);\r\n\tbuild(rs,mid+1,r);\r\n\tps(x);\r\n}\r\n\r\nvoid upd(int x,int l,int r,int L,int R,int k){\r\n//\tif(x==1) printf(\"upd(%d,%d,%d,%d,%d,%d)\\n\",x,l,r,L,R,k);\r\n\tif(l>=L&&r<=R){\r\n\t\ttr[x].upd(k);\r\n\t\tre;\r\n\t}\r\n\tpd(x);\r\n\tif(L<=mid) upd(ls,l,mid,L,R,k);\r\n\tif(R>mid) upd(rs,mid+1,r,L,R,k);\r\n\tps(x);\r\n}\r\n\r\nint ask(int x,int l,int r,int L,int R){\r\n//\tif(x==1) printf(\"Sgt::ask(%d,%d,%d,%d,%d)\\n\",x,l,r,L,R);\r\n\tif(l>=L&&r<=R) re tr[x].mn;\r\n\tpd(x);\r\n\tif(R<=mid) re ask(ls,l,mid,L,R);\r\n\tif(L>mid) re ask(rs,mid+1,r,L,R);\r\n\tre min(ask(ls,l,mid,L,R),ask(rs,mid+1,r,L,R));\r\n}\r\n\r\nint get(int x,int l,int r,int L,int R){\r\n//\tprintf(\"get(%d,%d,%d,%d,%d)\\n\",x,l,r,L,R);\r\n\tif(l>=L&&r<=R){\r\n\t\tif(tr[x].mn>0) re 0;\r\n\t\twhile(l<r){\r\n\t\t\tpd(x);\r\n\t\t\tif(tr[rs].mn==0) x=rs,l=mid+1;\r\n\t\t\telse x=ls,r=mid;\r\n\t\t}\r\n\t\tre rk[l];\r\n\t}\r\n\tpd(x);\r\n\tif(R<=mid) re get(ls,l,mid,L,R);\r\n\tif(L>mid) re get(rs,mid+1,r,L,R);\r\n\tint w=get(rs,mid+1,r,L,R);\r\n\tif(w) re w;\r\n\tre get(ls,l,mid,L,R);\r\n}\r\n}\r\n\r\n\r\nvoid build(){\r\n\tSgt::build(1,1,n);\r\n}\r\n\r\nvoid upd(int x,int k){\r\n\twhile(x){\r\n\t\tint y=top[x];\r\n\t\tSgt::upd(1,1,n,dfn[y],dfn[x],k);\r\n\t\tx=fa[y];\r\n\t}\r\n}\r\nint ask(int x){\r\n\twhile(x){\r\n\t\tint y=top[x];\r\n\t\tif(Sgt::ask(1,1,n,dfn[y],dfn[x])>0){\r\n\t\t\tx=fa[y];\r\n\t\t\tco;\r\n\t\t}\r\n\t\tre Sgt::get(1,1,n,dfn[y],dfn[x]);\r\n\t}\r\n\tre 0;\r\n}\r\n} \r\n\r\nnamespace Company{\r\nstruct Roll{\r\n\tint id,loser;\r\n}stk[N<<1];\r\nint top;\r\nll ans;\r\n\r\nvoid hello_world(int id){//\u6b63\u5f0f\u6b65\u5165\u804c\u4e1a\u751f\u6daf \r\n\t//Hello, world!\r\n//\tprintf(\"hello_world(%d)!\\n\",id);\r\n\tans+=a[id].v;\r\n\tDS1::ins(id);\r\n\tDS2::upd(a[id].x,-1);\r\n}\r\n\r\nvoid say_goodbye(int id){\r\n//\tprintf(\"say_goodbye(%d)!\\n\",id);\r\n\tans-=a[id].v;\r\n\tDS1::del(id);\r\n\tDS2::upd(a[id].x,1);\r\n}\r\n\r\nbool gao(int id){//\u628a\u5458\u5de5 id \u52a0\u8fdb\u6765 \r\n//\tprintf(\"gao(%d)\\n\",id);\r\n\tint t=DS2::ask(a[id].x);\r\n\tif(!t){\r\n\t\t++top;\r\n\t\tstk[top].id=id,stk[top].loser=0;//\u5c97\u4f4d\u5145\u8db3\uff0c\u6ca1\u6709\u4ea7\u751f\u4e0b\u5c97\u5458\u5de5 \r\n\t\thello_world(id);\r\n\t\tre 1;\r\n\t}\r\n\t//\u5f88\u9057\u61be\uff0c\u96f6\u548c\u535a\u5f08\uff0c\u5fc5\u5b9a\u6709\u8f93\u5bb6\r\n\tint me=DS1::ask(1,1,n,dfn[t],dfn[t]+siz[t]-1);//\u672b\u4f4d\u6dd8\u6c70\r\n\tif(a[me]<a[id]){//\u5185\u5377\u6597\u517d\u573a \r\n\t\t++top;\r\n\t\tstk[top].id=id,stk[top].loser=me;\r\n\t\thello_world(id);\r\n\t\tsay_goodbye(me);\r\n\t\tre 1;\r\n\t}\r\n\tre 0;\r\n}\r\nvoid roll(){\r\n//\tputs(\"roll_back\");\r\n\tint x=stk[top].id,y=stk[top].loser;top--;\r\n\tsay_goodbye(x);\r\n\tif(y) hello_world(y);\r\n}\r\n}\r\n\r\nll ans[N];\r\nnamespace DS3{//\u65f6\u95f4\u7ebf\u6bb5\u6811\r\nvector<int> tr[N<<2];\r\nvoid push(int x,int l,int r,int L,int R,int id){\r\n//\tprintf(\"push(%d,%d,%d,%d,%d,%d)\\n\",x,l,r,L,R,id);\r\n\tif(l>=L&&r<=R){\r\n\t\ttr[x].pb(id);\r\n\t\tre;\r\n\t}\r\n\tif(L<=mid) push(ls,l,mid,L,R,id);\r\n\tif(R>mid) push(rs,mid+1,r,L,R,id);\t\r\n}\r\nvoid dfs(int x,int l,int r){\r\n//\tprintf(\"dfs(%d,%d,%d)\\n\",x,l,r);\r\n\tint ct=0;\r\n\tfor(int i:tr[x]) ct+=Company::gao(i);\r\n\tif(l==r) ans[l]=Company::ans;\r\n\telse dfs(ls,l,mid),dfs(rs,mid+1,r);\r\n\twhile(ct--) Company::roll();\r\n}\r\n}\r\n\r\nvoid file(){\r\n\tfreopen(\"transfer.in\",\"r\",stdin);\r\n\tfreopen(\"transfer.out\",\"w\",stdout);\r\n}\r\n\r\nsigned main(){\r\n//\tfile();\r\n\tcin>>Tid;\r\n\tcin>>n>>k>>m;\r\n\tfo(i,2,n) fa[i]=read(),e[fa[i]].pb(i);\r\n\tdfs1(1);\r\n\tdfs2(1,1);\r\n//\tcout<<\"son:\";out(son,1,n);\r\n//\tcout<<\"dfn:\";out(dfn,1,n);\r\n//\tcout<<\"top:\";out(top,1,n);\r\n\tDS2::build();\r\n\tfo(i,1,k) a[i].x=read(),a[i].v=read();\r\n\tfo(i,1,m){\r\n\t\tint o=read(),x=read();\r\n\t\tif(o==1){\r\n\t\t\ta[++k].x=x;\r\n\t\t\tlst[k]=i;\r\n\t\t\ta[k].v=read();\r\n\t\t}else DS3::push(1,0,m,lst[x],i-1,x),lst[x]=-1;\r\n\t}\r\n\tfo(i,1,k) if(lst[i]>-1) DS3::push(1,0,m,lst[i],m,i);\r\n\tDS3::dfs(1,0,m);\r\n\tout(ans,0,m);\r\n\treturn 0;\r\n}\r\n}\r\n/*\r\n-------------------------------------------------\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nsigned main(){re vectorwyx::main();}\r\n```\r\n\r\n",
        "postTime": 1681181144,
        "uid": 238408,
        "name": "vectorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P9168 [\u7701\u9009\u8054\u8003 2023] \u4eba\u5458\u8c03\u5ea6"
    },
    {
        "content": "\u5148\u5728\u65f6\u95f4\u8f74\u4e0a\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u628a\u52a0\u4eba\u5220\u4eba\u53d8\u6210\u52a0\u4eba\u64a4\u9500\u3002\n\n\u4e0b\u6587\u4e2d\uff0c\u7528\u4e8c\u5143\u7ec4 $(x,v)$ \u8868\u793a\u521d\u59cb\u90e8\u95e8\u4e3a $x$\uff0c\u80fd\u529b\u503c\u4e3a $v$ \u7684\u4eba\uff0c\u4e14\u53ea\u8003\u8651\u88ab\u8282\u70b9\u9009\u4e2d\u7684\u4eba\u548c\u65b0\u52a0\u7684\u4eba\u3002\n\n\u6211\u4eec\u5148\u5047\u8bbe\u6bcf\u4e2a\u8282\u70b9 $u(1\\leq u\\leq n)$ \u4e00\u5f00\u59cb\u9009\u4e86 $(u,0)$\u3002\n\n\u8bbe $\\operatorname{size}(x)$ \u8868\u793a $x$ \u7684\u5b50\u6811\u5927\u5c0f\uff0c $s(x)$ \u8868\u793a\u521d\u59cb\u90e8\u95e8\u5728 $x$ \u7684\u5b50\u6811\u5185\u7684\u4eba\u7684\u6570\u91cf\u3002\n\n\u6709 $s(x)\\leq\\operatorname{size}(x)$\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4eba\u4e00\u5b9a\u5728 $x$ \u7684\u5b50\u6811\u5185\u3002\n\n\u8fd9\u6837\u6bcf\u6b21\u52a0 $(x,v)$ \u5c31\u5206\u4e3a\u4ee5\u4e0b\u4e24\u6b65\uff1a\n\n1. \u627e\u5230 $x$ \u7684\u7956\u5148\uff08\u5305\u62ec $x$\uff09\u4e2d\u6df1\u5ea6\u6700\u6df1\u4e14\u6ee1\u8db3 $s(u)=\\operatorname{size}(u)$ \u7684\u8282\u70b9 $u$\u3002\n2. \u7528 $(x,v)$ \u66ff\u4ee3 $u$ \u5b50\u6811\u5185\u4efb\u610f\u4e00\u4e2a\u6743\u503c\u6700\u5c0f\u7684\u8282\u70b9\uff08\u5982\u679c\u8fd9\u6837\u505a\u66f4\u4f18\u624d\u8fd9\u4e48\u505a\uff09\n\n\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\u505a\u6cd5\u7684\u6b63\u786e\u6027\uff1a\n\n\u5982\u679c $u=x$\uff0c\u663e\u7136\u662f\u6b63\u786e\u7684\u3002\n\n\u5982\u679c $u\\not=x$\uff0c\u6839\u636e $u$ \u662f\u6700\u6df1\u7684\u6ee1\u8db3 $s(u)=\\operatorname{size}(u)$ \u7684 $x$ \u7684\u7956\u5148\uff0c\u4e00\u5b9a\u6709\u81f3\u5c11\u4e24\u4e2a\u4eba\u7684\u521d\u59cb\u90e8\u95e8\u4e3a $u$\u3002\n\n\u6839\u636e $s(x)\\not=\\operatorname{size}(x)$\uff0c$x$ \u7684\u5b50\u6811\u5185\u5b58\u5728\u4e00\u4e2a\u70b9 $w$\uff0c\u5728 $w$ \u7684\u4eba $(y,z)$ \u6ee1\u8db3 $y$ \u4e3a $x$ \u7684\u7956\u5148 $(y\\not=x)$\u3002\n\n\u7531\u4e8e $s(u)=\\operatorname{size}(u)$\uff0c$y$ \u4e00\u5b9a\u5728 $u$ \u7684\u5b50\u6811\u5185\u3002\n\n\u65b0\u4eba $(x,v)$ \u653e\u5728\u8282\u70b9 $w$\uff0c\u6b64\u65f6 $x$ \u5b50\u6811\u5185\u4fbf\u591a\u4e86\u4e00\u4e2a\u8282\u70b9\u5728\u4f4d\u7f6e $w$\u3002\n\n\u6240\u4ee5 $(y,z)$ \u5c31\u9700\u8981\u53bb $y$ \u5b50\u6811\u5185\u518d\u9009\u4e00\u4e2a\u4f4d\u7f6e\u5360\uff0c\u6216\u8005\u76f4\u63a5\u5220\u53bb $(y,z)$\u3002\n\n\u5982\u679c\u9009\u62e9\u518d\u5360\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48 $y$ \u5b50\u6811\u5185\u5c31\u4f1a\u591a\u4e00\u4e2a\u4eba\u3002\n\n\u4e0d\u65ad\u9012\u5f52\uff0c\u56e0\u4e3a $u$ \u662f\u6700\u6df1\u7684\u6ee1\u8db3 $s(u)=\\operatorname{size}(u)$ \u7684 $x$ \u7684\u7956\u5148\uff0c\u6240\u4ee5\u4e00\u5b9a\u80fd\u9012\u5f52\u5230 $u$\u3002\n\n\u56e0\u4e3a $s(u)=\\operatorname{size}(u)$\uff0c\u6240\u4ee5\u6ca1\u6709\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u51fa\u53bb $u$ \u7684\u5b50\u6811\uff0c\u6b64\u65f6 $u$ \u5b50\u6811\u5185\u4e00\u5b9a\u8981\u5220\u53bb\u4e00\u4e2a\u3002\n\n\u56e0\u4e3a\u4e00\u5b9a\u6709\u81f3\u5c11\u4e24\u4e2a\u4eba\u7684\u521d\u59cb\u90e8\u95e8\u4e3a $u$\uff0c\u6240\u4ee5\u5220\u6389\u4efb\u610f\u4e00\u4eba\u90fd\u53ef\u4ee5\u7528\u8fd9\u4e24\u4e2a\u4eba\u7684\u5176\u4e2d\u4e00\u4e2a\u4ee3\u66ff\u3002\n\n\u56fe\u4f8b\u8bf4\u660e\u4e00\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/wmopzd18.png)\n\n\u5982\u4e0a\u56fe\uff0c\u56fe $1$ \u662f\u6ca1\u52a0\u5165 $(4,9)$ \u4e4b\u524d\u7684\u65b9\u6848\uff0c\u6839\u636e\u4e0a\u8ff0\u5b9a\u4e49\u5f97 $x=4,s=1,w=5,(y,z)=(2,8)$\u3002\n\n\u52a0\u5165 $(4,9)$\uff0c$(4,9)$ \u5360 $w$ \u7684\u4f4d\u7f6e\uff0c $(y,z)$ \u53bb\u5360 $y$ \u5b50\u6811\u5185\u4efb\u610f\u4e00\u70b9\u3002\u56e0\u4e3a $(1,5)$ \u7684\u521d\u59cb\u8282\u70b9\u4e0d\u5728 $y$ \u5b50\u6811\u5185\uff0c\u6240\u4ee5\u6b64\u5904\u9009\u7684\u662f\u70b9 $3$\uff0c\u4e8e\u662f\u53d8\u6210\u56fe $2$ \u7684\u60c5\u51b5\u3002\n\n\u7136\u540e $y$ \u5b50\u6811\u53c8\u591a\u4e00\u4e2a\u4eba\uff0c\u4e8e\u662f\u9012\u5f52 $y$\uff0c\u5c31\u628a\u591a\u51fa\u7684 $(1,5)$ \u53bb\u5360 $1$ \u5b50\u6811\u5185\u4efb\u610f\u4e00\u70b9\u3002\u7531\u4e8e $s=1$\uff0c\u76f4\u63a5\u5360\u5728 $s$ \u5373\u53ef\uff0c\u4e8e\u662f\u53d8\u6210\u56fe $3$ \u7684\u60c5\u51b5 \u3002\n\n\u6700\u540e\uff0c\u9012\u5f52\u5230 $s$ \u4e86\uff0c\u5c31\u8ba9 $s$ \u5904\u4e24\u4e2a\u4eba\u7684\u4efb\u610f\u4e00\u4e2a\u4ee3\u66ff\u5b50\u6811\u4e2d\u70b9\u6743\u6700\u5c0f\u7684\u5373\u53ef\uff0c\u56fe\u4e2d $(1,5)$ \u4ee3\u66ff\u4e86 $(2,4)$\uff0c\u5373\u4e3a\u56fe $4$ \u7684\u60c5\u51b5\u3002\n\n\u4ece\u9009\u7684\u4eba\u7684\u96c6\u5408\u770b\uff0c\u5c31\u662f\u52a0\u5165 $(x,v)$\uff0c\u5220\u53bb $u$ \u5b50\u6811\u5185\u4efb\u610f\u4e00\u4eba\u3002\n\n\u4ee5\u4e0a\u4e3a\u8bc1\u660e\uff0c\u4ee5\u4e0b\u4e3a\u7ef4\u62a4\u65b9\u6cd5\u3002\n\n\u7528\u6811\u94fe\u5256\u5206\u5957\u7ebf\u6bb5\u6811\u52a8\u6001\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684 $u$ \u7684\uff1a$\\operatorname{size}(u)-s(u)$\u3001\u9009\u7684 $(u,v)$ \u7684 $-v$ \u7684\u6700\u5927\u503c\u3002\n\n\u4e3a\u4e86\u52a8\u6001\u7ef4\u62a4\u5355\u70b9 $-v$ \u6700\u5927\u503c\uff0c\u7528 `multiset` \u5b58\u50a8 $-v$ \u7684\u6240\u6709\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log ^3 n)$\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int MAXN=400005;\nvector<int>ve[MAXN];\nint fa[MAXN],n,k,m,X[MAXN],val[MAXN],lst[MAXN],son[MAXN],dep[MAXN],siz[MAXN],top[MAXN],tcnt,dfn[MAXN],pid[MAXN];\nvector<int>vec[MAXN];\nll ans[MAXN];\nvoid dfs1(int u) {\n\tsiz[u]=1;\n\tfor(int v:ve[u]) {\n\t\tdep[v]=dep[u]+1;\n\t\tdfs1(v);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\n\t}\n}\nvoid dfs2(int u,int tp) {\n\ttop[u]=tp,dfn[u]=++tcnt,pid[tcnt]=u;\n\tif(son[u]) dfs2(son[u],tp);\n\tfor(int v:ve[u])\n\t\tif(v^son[u])\n\t\t\tdfs2(v,v);\n}\nstruct Tree {\n\tint l,r,mn,lt;//mn:[l,r]\u4e2dsize(u)-s(u)\u6700\u5c0f\u503c\uff0clt\uff1a\u61d2\u6807\u8bb0\n\tpair<int,int>mx;//mx:[l,r]\u4e2d\u7684\u4eba(u,v)\u7684-v\u7684\u6700\u5927\u503c\u548c\u521d\u59cb\u8282\u70b9\n} tr[MAXN];\nmultiset<int>st[MAXN];\nvoid build(int num,int l,int r) {\n\ttr[num].l=l,tr[num].r=r,tr[num].mx=make_pair(0,r);//\u521d\u59cb\u6709\u4eba(u,0)\n\tif(l==r) return;\n\tbuild(num<<1,l,l+r>>1),build(num<<1|1,(l+r>>1)+1,r);\n}\nvoid updatemx(int num,int x,int v) {\n\tif(tr[num].l==tr[num].r) {\n\t\ttr[num].mx=make_pair(v,x);\n\t\treturn;\n\t}\n\tupdatemx(num<<1|(x>tr[num<<1].r),x,v);\n\ttr[num].mx=max(tr[num<<1].mx,tr[num<<1|1].mx);\n}\npair<int,int> querymx(int num,int l,int r) {\n\tif(l<=tr[num].l&&tr[num].r<=r) return tr[num].mx;\n\tif(r<=tr[num<<1].r) return querymx(num<<1,l,r);\n\tif(tr[num<<1|1].l<=l) return querymx(num<<1|1,l,r);\n\treturn max(querymx(num<<1,l,r),querymx(num<<1|1,l,r));\n}\ninline void upd(int num,int x) {\n\ttr[num].mn+=x,tr[num].lt+=x;\n}\ninline void push_down(int num) {\n\tif(!tr[num].lt) return;\n\tupd(num<<1,tr[num].lt),upd(num<<1|1,tr[num].lt);\n\ttr[num].lt=0;\n}\nvoid update(int num,int l,int r,int x) {\n\tif(l<=tr[num].l&&tr[num].r<=r) return upd(num,x);\n\tpush_down(num);\n\tif(l<=tr[num<<1].r) update(num<<1,l,r,x);\n\tif(tr[num<<1|1].l<=r) update(num<<1|1,l,r,x);\n\ttr[num].mn=min(tr[num<<1].mn,tr[num<<1|1].mn);\n}\nint Findz(int num) {\n\tif(tr[num].l==tr[num].r) return tr[num].l;\n\treturn push_down(num),Findz(num<<1|(!tr[num<<1|1].mn));\n}\nint query(int num,int l,int r) {\n\tif(l<=tr[num].l&&tr[num].r<=r) {\n\t\treturn tr[num].mn?-1:Findz(num);\n\t}\n\tpush_down(num);\n\tif(r<=tr[num<<1].r) return query(num<<1,l,r);\n\tif(tr[num<<1|1].l<=l) return query(num<<1|1,l,r);\n\tint res=query(num<<1|1,l,r);\n\tif(~res) return res;\n\telse return query(num<<1,l,r);\n}\ninline void upRange(int u,int v) {\n\tfor(; top[u]; u=fa[top[u]]) \n\t\tupdate(1,dfn[top[u]],dfn[u],v);\n}\nvoid Add(int num,int l,int r,int L,int R,int x) {\n\tif(L<=l&&r<=R) {\n\t\tvec[num].push_back(x);\n\t\treturn;\n\t}\n\tif(L<=(l+r>>1)) Add(num<<1,l,l+r>>1,L,R,x);\n\tif(R> (l+r>>1)) Add(num<<1|1,(l+r>>1)+1,r,L,R,x);\n}\nint qry(int u) {\n\tint res=query(1,dfn[top[u]],dfn[u]);\n\treturn ~res?pid[res]:qry(fa[top[u]]);\n}\ninline void add(int u,int v) {//\u7b54\u6848\u96c6\u5408\u52a0\u5165\u4eba(u,v)\n\tst[u].insert(v);\n\tupdatemx(1,dfn[u],*st[u].rbegin());\n\tupRange(u,-1);\n}\ninline void del(int u,int v) {//\u7b54\u6848\u96c6\u5408\u5220\u53bb\u4eba(u,v)\n\tst[u].erase(st[u].lower_bound(v));\n\tupdatemx(1,dfn[u],st[u].empty()?-0x3f3f3f3f:*st[u].rbegin());\n\tupRange(u,1);\n}\nstruct node {\n\tint x,xv,y,yv;\n};\nll res;\nvoid solve(int num,int l,int r) {\n\tvector<node>vt;\n\tfor(int v:vec[num]) {\n\t\tint u=qry(X[v]);\n\t\tpair<int,int>tmp=querymx(1,dfn[u],dfn[u]+siz[u]-1);\n\t\tif(tmp.first+val[v]>0) {\n\t\t\tvt.push_back(node{X[v],val[v],tmp.second,tmp.first});\n\t\t\tres+=tmp.first+val[v];\n\t\t\tdel(pid[tmp.second],tmp.first);\n\t\t\tadd(X[v],-val[v]);\n\t\t}\n\t}\n\tif(l==r) ans[l]=res;\n\telse {\n\t\tint mid=l+r>>1;\n\t\tsolve(num<<1,l,mid),solve(num<<1|1,mid+1,r);\n\t}\n\tfor(node z; !vt.empty(); vt.pop_back()) {\n\t\tz=vt.back();\n\t\tres-=z.xv+z.yv;\n\t\tdel(z.x,-z.xv),add(pid[z.y],z.yv);\n\t}\n}\nint main() {\n\tscanf(\"%*d%d%d%d\",&n,&k,&m);\n\tfor(int i=1; i<=n; ++i)st[i].insert(0); //\u521d\u59cb\u6709\u4eba(u,0)\n\tfor(int i=2; i<=n; ++i)scanf(\"%d\",&fa[i]),ve[fa[i]].push_back(i);\n\tfor(int i=1; i<=k; ++i) scanf(\"%d%d\",&X[i],&val[i]);\n\tfor(int i=1,op=0,x=0; i<=m; ++i) {\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1) {\n\t\t\t++k,lst[k]=i,scanf(\"%d%d\",&X[k],&val[k]);\n\t\t} else {\n\t\t\tscanf(\"%d\",&x),Add(1,0,m,lst[x],i-1,x),lst[x]=m+1;\n\t\t}\n\t}\n\tfor(int i=1; i<=k; ++i)\n\t\tif(lst[i]<=m)\n\t\t\tAdd(1,0,m,lst[i],m,i);\n\tdfs1(1),dfs2(1,1),build(1,1,n);\n\tsolve(1,0,m);\n\tfor(int i=0; i<=m; ++i) printf(\"%lld \",ans[i]);\n\treturn 0;\n} \n```",
        "postTime": 1680786273,
        "uid": 279646,
        "name": "mod998244353",
        "ccfLevel": 7,
        "title": "P9168 [\u7701\u9009\u8054\u8003 2023] \u4eba\u5458\u8c03\u5ea6 \u9898\u89e3"
    },
    {
        "content": "\u8003\u573a\u964d\u667a\u7cfb\u5217\u3002  \n\u4e0d\u964d\u667a\u4e5f\u8c03\u4e0d\u51fa\u6765\u554a\u90a3\u6ca1\u4e8b\u4e86\u3002  \n\n\u9996\u5148\uff0c\u5982\u679c\u8dd1\u4e00\u904d dfn \u5e8f\uff0c\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u3002  \n\u6709\u82e5\u5e72\u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u53ef\u4ee5\u5728\u533a\u95f4 $[l_i, r_i]$ \u91cc\u9009\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u80fd\u5bb9\u7eb3\u4e00\u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u6709\u4e2a\u6743\u503c\u3002  \n\u6c42\u6700\u5927\u603b\u6743\u503c\u3002  \n\n\u663e\u7136\u662f\u8d2a\u5fc3\uff0c\u4f46\u662f\u8fd8\u662f\u4e25\u8c28\u8bc1\u660e\u4e00\u4e0b\u3002  \n\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u8fd9\u662f\u4e2a\u62df\u9635\u3002  \n\u9057\u4f20\u6027\u663e\u7136\uff0c\u8003\u8651\u4ea4\u6362\u6027\u3002  \n\u8bbe\u73b0\u5728\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u65b9\u6848 $A, B$\uff0c\u6ee1\u8db3 $A$ \u4e2d\u9009\u7684\u4eba\u7684\u6570\u91cf\u5c0f\u4e8e $B$\u3002  \n\u9996\u5148\u628a $A, B$ \u7684\u4ea4\u96c6\u6263\u6389\u3002  \n\u90a3\u4e48\u6211\u4eec\u53bb\u5c1d\u8bd5\u628a $A$ \u4e2d\u6709\uff0c$B$ \u4e2d\u6ca1\u6709\u7684\u4eba\u63d2\u5165\u5230 $A$ \u4e2d\u53bb\u3002  \n\u7531\u4e8e\u6bcf\u4e2a\u4eba\u53ea\u5360\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6240\u4ee5\u63d2\u5165\u7684\u65f6\u5019\u6709\u4e24\u79cd\u60c5\u51b5\uff1a  \n\n1. \u6ca1\u6709\u7a7a\u4f4d\u65e0\u6cd5\u63d2\u5165\u3002\u6b64\u65f6\u8e22\u6389\u4e00\u4e2a\u533a\u95f4\u91cc $B$ \u4e2d\u6709\u4f46 $A$ \u4e2d\u6ca1\u6709\u7684\u4eba\uff0c\u518d\u63d2\u5165\u3002  \n\u7531\u4e8e $A$ \u662f\u5408\u6cd5\u7684\uff0c\u5bb9\u6613\u53d1\u73b0\u603b\u662f\u80fd\u8e22\u6389\u4e00\u4e2a\u3002  \n2. \u6709\u7a7a\u4f4d\u3002\u76f4\u63a5\u63d2\u5165\u3002  \n\n\u7531\u4e8e $B$ \u4e2d\u521d\u59cb\u4eba\u6570\u4e25\u683c\u5927\u4e8e $A$\uff0c\u6bcf\u6b21\u63d2\u5165\u603b\u4eba\u6570\u5355\u8c03\u4e0d\u964d\uff0c\u6240\u4ee5\u6700\u540e\u81f3\u5c11\u4f1a\u5269\u4f59\u4e00\u4e2a $B$ \u4e2d\u6709\u800c $A$ \u4e2d\u6ca1\u6709\u7684\u4eba\u3002  \n\u4ea4\u6362\u6027\u5f97\u8bc1\u3002  \n\n\u56e0\u6b64\u8fd9\u662f\u4e2a\u53ef\u8d2a\u5fc3\u7684\u95ee\u9898\u3002  \n\u7531\u4e8e\u662f\u4e8c\u5206\u56fe\uff0c\u5224\u5b9a\u5408\u6cd5\u53ef\u4ee5\u7528 Hall \u5b9a\u7406\u3002  \n\n\u5728\u5e8f\u5217\u4e0a\u7ef4\u62a4\u6709\u70b9\u56f0\u96be\uff0c\u8fd8\u662f\u56de\u5f52\u5230\u6811\u4e0a\u3002  \n\u6839\u636e Hall \u5b9a\u7406\uff0c\u5f53\u6811\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u90e8\u7684\u5458\u5de5\u7684\u6570\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u8282\u70b9\u4e2a\u6570\u7684\u65f6\u5019\u6709\u89e3\u3002  \n\n\u6811\u94fe\u5256\u5206\uff0c\u8bbe $size_u$ \u8868\u793a $u$ \u7684\u5b50\u6811\u5927\u5c0f\uff0c$f_u$\u8868\u793a $u$ \u5b50\u6811\u5185\u7684\u5458\u5de5\u4e2a\u6570\u3002  \n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u7ef4\u62a4 $w_u = size_u - f_u$\u3002  \n\n\u5f53\u6211\u4eec\u4e71\u5e8f\u63d2\u5165\u5458\u5de5\u5230\u8282\u70b9 $v$ \u7684\u65f6\u5019\uff0c\u9996\u5148\u904d\u5386\u5176\u6811\u4e0a\u7684\u7236\u94fe\u3002  \n\u5982\u679c\u7236\u94fe\u4e0a\u7684\u70b9\u7684 $w$ \u503c\u90fd\u4e3a\u6b63\u90a3\u5c31\u76f4\u63a5\u63d2\u5165\u3002  \n\u5426\u5219\u627e\u5230\u79bb $v$ \u6700\u8fd1\u7684 $w_u = 0$ \u7684\u70b9 $u$\uff0c\u627e\u5230\u5176\u5b50\u6811\u5185\u6743\u503c\u6700\u5c0f\u7684\u5458\u5de5 $s$\u3002  \n\u82e5 $s$ \u7684\u6743\u503c\u5c0f\u4e8e\u6211\u4eec\u8981\u63d2\u5165\u7684\u5458\u5de5\uff0c\u5c31\u628a $s$ \u5220\u4e86\u3002  \n\u5426\u5219\u8fd9\u4e2a\u5458\u5de5\u5c31\u6ca1\u5fc5\u8981\u63d2\u5165\u4e86\u3002  \n\n\u63d2\u5165\u5458\u5de5\u5f88\u5bb9\u6613\uff0c\u4f46\u662f\u64a4\u9500\u6709\u4e9b\u9ebb\u70e6\u3002  \n\u6240\u4ee5\u6574\u4f53\u8fd8\u9700\u8981\u5957\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002  \n\u7ef4\u62a4\u5458\u5de5\u7684\u65f6\u5019\u8003\u8651\u5230\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u5458\u5de5\uff0c\u7528 `multiset` \u7ef4\u62a4\u4e00\u4e0b\u3002  \n~~\u5982\u679c\u4f60 WA 98pts \u8c03\u4e86\u4e24\u5929\u8c03\u4e0d\u51fa\u6765\u53ef\u80fd\u662f\u56e0\u4e3a\u7528\u4e86 set\u3002~~  \n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log^3 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\uff0c\u4e0d\u8fc7\u5e38\u6570\u4e0d\u7b97\u5927\uff08\u6709\u4e00\u4e2a $\\log$ \u662f\u6811\u5256\u8d21\u732e\u7684\uff09\uff0c5s \u53ef\u4ee5\u7a33\u8fc7\u3002  \n\n\u4e3a\u4e86\u65b9\u4fbf\u8d77\u53d8\u91cf\u540d\uff0c\u7801\u98ce\u6709\u70b9\u602a\u3002  \n\u8d34\u5728\u4e0b\u9762~  \n\n```cpp\n#include <set>\n#include <vector>\n#include <stdio.h>\nusing namespace std;\n#define sz 100005\nconst int inf = 1e8;\nstruct site\n{\n\tint poi, val, tim;\n};\nsite num[sz << 1];\nstruct md\n{\n\tint kid, poi, val;\n};\nmd bin[sz << 4];\nint n, k, m, top;\nlong long ans;\nnamespace tr\n{\n\textern int now;\n\textern int fsl[sz], dld[sz], big[sz], dfn[sz], fa[sz], col[sz];\n\tint dfs(int a);\n\tvoid redfs(int a, int c);\n\tvoid prodfs(int a);\n\tvoid load();\n\tvoid sol(int poi, int val);\n}\nint read()\n{\n\tint x = 0;\n\tchar c = getchar();\n\twhile (c < '0') c = getchar();\n\tdo {\n\t\tx = x * 10 + (c & 15);\n\t\tc = getchar();\n\t}while (c >= '0');\n\treturn x;\n}\nnamespace sug\n{\n\tstruct node\n\t{\n\t\tint mn, poi;\n\t};\n\tnode tree[sz << 1];\n\tmultiset<int> ins[sz];\n\tnode merge(node a, node b)\n\t{\n\t\tif (a.mn < b.mn)\n\t\t\treturn a;\n\t\treturn b;\n\t}\n\tvoid build(int a, int lf, int rt)\n\t{\n\t\tfor (int i = 0; i <= (n << 1 | 1); ++i)\n\t\t{\n\t\t\ttree[i].mn = inf;\n\t\t\ttree[i].poi = i + 1 >> 1;\n\t\t}\n\t}\n\tvoid fix(int a, int lf, int rt, int w, int b)\n\t{\n\t\tif (lf == rt)\n\t\t{\n\t\t\ttree[a].mn = b;\n\t\t\ttree[a].poi = w;\n\t\t\treturn;\n\t\t}\n\t\tint mid = lf + rt >> 1;\n\t\tif (w <= mid)\n\t\t\tfix(mid << 1, lf, mid, w, b);\n\t\telse\n\t\t\tfix(mid << 1 | 1, mid + 1, rt, w, b);\n\t\ttree[a] = merge(tree[mid << 1], tree[mid << 1 | 1]);\n\t}\n\tnode serch(int a, int lf, int rt, int wa, int wb)\n\t{\n\t\tif (lf == wa && rt == wb)\n\t\t\treturn tree[a];\n\t\tint mid = lf + rt >> 1;\n\t\tif (wb <= mid)\n\t\t\treturn serch(mid << 1, lf, mid, wa, wb);\n\t\tif (wa > mid)\n\t\t\treturn serch(mid << 1 | 1, mid + 1, rt, wa, wb);\n\t\treturn merge(serch(mid << 1, lf, mid, wa, mid), serch(mid << 1 | 1, mid + 1, rt, mid + 1, wb));\n\t}\n}\nnamespace sag\n{\n\tstruct site\n\t{\n\t\tint val, poi;\n\t};\n\tsite merge(site a, site b)\n\t{\n\t\tif (a.val < b.val)\n\t\t\treturn a;\n\t\treturn b;\n\t}\n\tstruct node\n\t{\n\t\tsite mn;\n\t\tint laz;\n\t};\n\tnode tree[sz << 1];\n\tvoid build(int a, int lf, int rt)\n\t{\n\t\ttree[a].laz = 0;\n\t\tif (lf == rt)\n\t\t{\n\t\t\ttree[a].mn.val = tr::big[lf];\n\t\t\ttree[a].mn.poi = lf;\n\t\t\treturn;\n\t\t}\n\t\tint mid = lf + rt >> 1;\n\t\tbuild(mid << 1, lf, mid);\n\t\tbuild(mid << 1 | 1, mid + 1, rt);\n\t\ttree[a].mn = merge(tree[mid << 1].mn, tree[mid << 1 | 1].mn);\n\t}\n\tvoid fix(int a, int lf, int rt, int wa, int wb, int b)\n\t{\n\t\tif (lf == wa && rt == wb)\n\t\t{\n\t\t\ttree[a].mn.val += b;\n\t\t\ttree[a].laz += b;\n\t\t\treturn;\n\t\t}\n\t\tint mid = lf + rt >> 1;\n\t\tif (wb <= mid)\n\t\t\tfix(mid << 1, lf, mid, wa, wb, b);\n\t\telse if (wa > mid)\n\t\t\tfix(mid << 1 | 1, mid + 1, rt, wa, wb, b);\n\t\telse\n\t\t{\n\t\t\tfix(mid << 1, lf, mid, wa, mid, b);\n\t\t\tfix(mid << 1 | 1, mid + 1, rt, mid + 1, wb, b);\n\t\t}\n\t\ttree[a].mn = merge(tree[mid << 1].mn, tree[mid << 1 | 1].mn);\n\t\ttree[a].mn.val += tree[a].laz;\n\t}\n\tsite serch(int a, int lf, int rt, int wa, int wb)\n\t{\n\t\tif (lf == wa && rt == wb)\n\t\t\treturn tree[a].mn;\n\t\tint mid = lf + rt >> 1;\n\t\tsite ret;\n\t\tif (wb <= mid)\n\t\t\tret = serch(mid << 1, lf, mid, wa, wb);\n\t\telse if (wa > mid)\n\t\t\tret = serch(mid << 1 | 1, mid + 1, rt, wa, wb);\n\t\telse\n\t\t\tret = merge(serch(mid << 1, lf, mid, wa, mid), serch(mid << 1 | 1, mid + 1, rt, mid + 1, wb));\n\t\tret.val += tree[a].laz;\n\t\treturn ret;\n\t}\n}\nnamespace tr\n{\n\tint now = 0;\n\tint fsl[sz], dld[sz], ed[sz], big[sz], dfn[sz], fa[sz], col[sz];\n\tint dfs(int a)\n\t{\n\t\tint mx = 0, tmp;\n\t\tfor (int i = fsl[a]; i; i = dld[i])\n\t\t{\n\t\t\ttmp = dfs(i);\n\t\t\tif (mx < tmp)\n\t\t\t{\n\t\t\t\tmx = tmp;\n\t\t\t\tbig[a] = i;\n\t\t\t}\n\t\t}\n\t\treturn mx + 1;\n\t}\n\tvoid redfs(int a, int b)\n\t{\n\t\tdfn[a] = ++now;\n\t\tcol[now] = b;\n\t\tif (big[a])\n\t\t{\n\t\t\tfa[now + 1] = now;\n\t\t\tredfs(big[a], b);\n\t\t\tfor (int i = fsl[a]; i; i = dld[i])\n\t\t\t\tif (!dfn[i])\n\t\t\t\t{\n\t\t\t\t\tfa[now + 1] = dfn[a];\n\t\t\t\t\tredfs(i, now + 1);\n\t\t\t\t}\n\t\t}\n\t\ted[dfn[a]] = now;\n\t}\n\tvoid prodfs(int a)\n\t{\n\t\tfor (int i = fsl[a]; i; i = dld[i])\n\t\t{\n\t\t\tprodfs(i);\n\t\t\tbig[dfn[a]] += big[dfn[i]];\n\t\t}\n\t}\n\tvoid load()\n\t{\n\t\tint x;\n\t\tfor (int i = 2; i <= n; ++i)\n\t\t{\n\t\t\tx = read();\n\t\t\tdld[i] = fsl[x];\n\t\t\tfsl[x] = i;\n\t\t}\n\t\tdfs(1); redfs(1, 1);\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tbig[i] = 1;\n\t\tprodfs(1);\n\t}\n\tvoid sol(int poi, int val)\n\t{\n\t\tint x = poi;\n\t\twhile (x)\n\t\t{\n\t\t\tauto a = sag::serch(0, 1, n, col[x], x);\n\t\t\tif (a.val == 0)\n\t\t\t{\n\t\t\t\tauto b = sug::serch(0, 1, n, a.poi, ed[a.poi]);\n\t\t\t\tif (b.mn >= val)\n\t\t\t\t\treturn;\n\t\t\t\tans -= b.mn;\n\t\t\t\tbin[++top].kid = 0;\n\t\t\t\tbin[top].poi = b.poi;\n\t\t\t\tbin[top].val = b.mn;\n\t\t\t\tsug::ins[b.poi].erase(sug::ins[b.poi].find(b.mn));\n\t\t\t\tif (sug::ins[b.poi].empty())\n\t\t\t\t\tsug::fix(0, 1, n, b.poi, inf);\n\t\t\t\telse\n\t\t\t\t\tsug::fix(0, 1, n, b.poi, *(sug::ins[b.poi].begin()));\n\t\t\t\tx = b.poi;\n\t\t\t\twhile (x)\n\t\t\t\t{\n\t\t\t\t\tsag::fix(0, 1, n, col[x], x, 1);\n\t\t\t\t\tx = fa[col[x]];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx = fa[col[x]];\n\t\t}\n\t\tans += val;\n\t\tbin[++top].kid = 1;\n\t\tbin[top].poi = poi;\n\t\tbin[top].val = val;\n\t\tsug::ins[poi].emplace(val);\n\t\tsug::fix(0, 1, n, poi, *(sug::ins[poi].begin()));\n\t\tx = poi;\n\t\twhile (x)\n\t\t{\n\t\t\tsag::fix(0, 1, n, col[x], x, -1);\n\t\t\tx = fa[col[x]];\n\t\t}\n\t}\n}\nnamespace seg\n{\n\tstruct site\n\t{\n\t\tint poi, val;\n\t\tsite(){}\n\t\tsite(int a, int b)\n\t\t{\n\t\t\tpoi = a; val = b;\n\t\t}\n\t};\n\tvector<site> tree[sz << 1];\n\tvoid insert(int a, int lf, int rt, int wa, int wb, int poi, int val)\n\t{\n\t\tif (lf == wa && rt == wb)\n\t\t{\n\t\t\ttree[a].emplace_back(poi, val);\n\t\t\treturn;\n\t\t}\n\t\tint mid = lf + rt >> 1;\n\t\tif (wb <= mid)\n\t\t\tinsert(mid << 1, lf, mid, wa, wb, poi, val);\n\t\telse if (wa > mid)\n\t\t\tinsert(mid << 1 | 1, mid + 1, rt, wa, wb, poi, val);\n\t\telse\n\t\t{\n\t\t\tinsert(mid << 1, lf, mid, wa, mid, poi, val);\n\t\t\tinsert(mid << 1 | 1, mid + 1, rt, mid + 1, wb, poi, val);\n\t\t}\n\t}\n\tvoid load()\n\t{\n\t\tint x;\n\t\tfor (int i = 1; i <= k; ++i)\n\t\t{\n\t\t\tnum[i].poi = read();\n\t\t\tnum[i].val = read();\n\t\t\tnum[i].tim = 1;\n\t\t}\n\t\tfor (int i = 2; i <= m; ++i)\n\t\t\tif (read() == 1)\n\t\t\t{\n\t\t\t\tnum[++k].poi = read();\n\t\t\t\tnum[k].val = read();\n\t\t\t\tnum[k].tim = i;\n\t\t\t}else\n\t\t\t{\n\t\t\t\tx = read();\n\t\t\t\tinsert(0, 1, m, num[x].tim, i - 1, num[x].poi, num[x].val);\n\t\t\t\tnum[x].tim = 0;\n\t\t\t}\n\t\tfor (int i = 1; i <= k; ++i)\n\t\t\tif (num[i].tim)\n\t\t\t\tinsert(0, 1, m, num[i].tim, m, num[i].poi, num[i].val);\n\t}\n\tvoid bak(int sav, long long savans)\n\t{\n\t\tans = savans;\n\t\twhile (top > sav)\n\t\t{\n\t\t\tif (bin[top].kid)\n\t\t\t{\n\t\t\t\tsug::ins[bin[top].poi].erase(sug::ins[bin[top].poi].find(bin[top].val));\n\t\t\t\tif (sug::ins[bin[top].poi].size())\n\t\t\t\t\tsug::fix(0, 1, n, bin[top].poi, *(sug::ins[bin[top].poi].begin()));\n\t\t\t\telse\n\t\t\t\t\tsug::fix(0, 1, n, bin[top].poi, inf);\n\t\t\t\tbin[top].kid = 1;\n\t\t\t}else\n\t\t\t{\n\t\t\t\tsug::ins[bin[top].poi].emplace(bin[top].val);\n\t\t\t\tsug::fix(0, 1, n, bin[top].poi, *(sug::ins[bin[top].poi].begin()));\n\t\t\t\tbin[top].kid = -1;\n\t\t\t}\n\t\t\tint x = bin[top].poi;\n\t\t\twhile (x)\n\t\t\t{\n\t\t\t\tsag::fix(0, 1, n, tr::col[x], x, bin[top].kid);\n\t\t\t\tx = tr::fa[tr::col[x]];\n\t\t\t}\n\t\t\t--top;\n\t\t}\n\t}\n\tvoid dfs(int a, int lf, int rt)\n\t{\n\t\tlong long savans = ans;\n\t\tint sav = top;\n\t\tfor (site i : tree[a])\n\t\t\ttr::sol(tr::dfn[i.poi], i.val);\n\t\tif (lf == rt)\n\t\t{\n\t\t\tprintf (\"%lld \", ans);\n\t\t\tbak(sav, savans);\n\t\t\treturn;\n\t\t}\n\t\tint mid = lf + rt >> 1;\n\t\tdfs(mid << 1, lf, mid);\n\t\tdfs(mid << 1 | 1, mid + 1, rt);\n\t\tbak(sav, savans);\n\t}\n}\nint main()\n{\n\tint x, y;\n\tread();\n\tn = read(); k = read(); m = read() + 1;\n\ttr::load(); seg::load();\n\tsag::build(0, 1, n); sug::build(0, 1, n);\n\tseg::dfs(0, 1, m);\n\treturn 0;\n}\n```\n",
        "postTime": 1681297321,
        "uid": 663405,
        "name": "H_Kaguya",
        "ccfLevel": 0,
        "title": "P9168 \u4eba\u5458\u8c03\u5ea6 \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u8d39\u7528\u6d41\u6a21\u578b\uff1a\n\n\u6e90\u70b9\u8fde\u6bcf\u4e2a\u5458\u5de5\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $v_i$\uff08\u8bb0\u4e3a\u4e00\u7c7b\u8fb9\uff09\u3002\n\n\u6bcf\u4e2a\u5458\u5de5\u8fde\u5bf9\u5e94\u7684\u6811\u4e0a\u8282\u70b9\uff0c\u6d41\u91cf\u4e3a\u6b63\u65e0\u7a77\uff0c\u8d39\u7528\u4e3a $0$\u3002\n\n\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u8fde\u5411\u81ea\u5df1\u7684\u513f\u5b50\uff0c\u6d41\u91cf\u4e3a\u6b63\u65e0\u7a77\uff0c\u8d39\u7528\u4e3a $0$\u3002\n\n\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$\uff08\u8bb0\u4e3a\u4e8c\u7c7b\u8fb9\uff09\u3002\n\n\u5220\u9664\u53ef\u4ee5\u4e00\u4e2a $\\log$ \u7ebf\u6bb5\u6811\u5206\u6cbb\u6389\uff0c\u6545\u53ea\u9700\u8003\u8651\u63d2\u5165\u4e00\u4e2a\u5458\u5de5 $i$ \u7684\u5f71\u54cd\u3002\n\n\u4e0d\u59a8\u8bb0 $a_i,b_i$ \u8868\u793a $x_i$ \u5b50\u6811\u4e2d\u6ee1\u6d41\u7684\u4e00\u7c7b\u8fb9\u4e0e\u4e8c\u7c7b\u8fb9\u7684\u6570\u91cf\uff0c\u5c06\u4e00\u6761\u6e90\u70b9 $\\rightarrow$ \u4e00\u7c7b\u8fb9 $\\rightarrow$ \u4e8c\u7c7b\u8fb9 $\\rightarrow$ \u6c47\u70b9\u7684\u6d41\u91cf\u8def\u5f84\u8bb0\u4f5c\u4e00\u4e2a\u5339\u914d\u3002\n\n$1.$ \u82e5 $b_i < size_{x_i}$\uff0c\u5219\u5458\u5de5 $i$ \u6240\u5bf9\u5e94\u7684\u4e00\u7c7b\u8fb9\u53ef\u4ee5\u76f4\u63a5\u4e0e\u5b50\u6811\u4e2d\u672a\u6ee1\u6d41\u7684\u4e8c\u7c7b\u8fb9\u5339\u914d\u3002\n\n$2.$ \u82e5 $b_i = size_{x_i}$ \u4e14 $a_i = size_{x_i}$\uff0c\u5219\u9000\u6d41\u5b50\u6811\u5185\u4e00\u6761\u4e00\u7c7b\u8fb9\u6743\u503c\u6700\u5c0f\u7684\u8def\u5f84\u540e\uff0c\u5c06\u5458\u5de5 $i$ \u5bf9\u5e94\u7684\u4e00\u7c7b\u8fb9\u4e0e\u8be5\u4e8c\u7c7b\u8fb9\u5339\u914d\u3002\n\n$3.$ \u82e5 $b_i = size_{x_i}$ \u4e14 $a_i < size_{x_i}$\uff0c\u8fd9\u610f\u5473\u7740 $x_i$ \u81f3\u5c11\u6709\u4e00\u4e2a\u7956\u5148\u7684\u4e00\u7c7b\u8fb9\u4e0e $x_i$ \u5b50\u6811\u4e2d\u67d0\u70b9\u7684\u4e8c\u7c7b\u8fb9\u5339\u914d\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5b58\u5728\u4e00\u6761 $x_i$ \u5230 $x_i$ \u7236\u4eb2\u7684\u53cd\u5411\u8fb9\uff0c\u4e0d\u65ad\u5730\u6cbf\u7740\u6b64\u7c7b\u8fb9\u5411\u4e0a\u8d70\u76f4\u5230 $a_i = size_{x_i}$ \u540e\u4ee5 $2.$ \u4e2d\u7684\u65b9\u5f0f\u5904\u7406\u5373\u53ef\u3002\n\n\u8003\u8651\u7528\u6811\u5256\u6a21\u62df\u4e0a\u8ff0\u8fc7\u7a0b\u3002\u82e5 $x_i$ \u7684\u6240\u6709\u7956\u5148 $size_u - a_u$ \u90fd\u4e0d\u4e3a $0$\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u65b9\u6848\u4f7f\u5f97 $b_i < size_{x_i}$\uff0c\u6545\u76f4\u63a5\u5c06\u5458\u5de5 $i$ \u63d2\u5165\u5373\u53ef\u3002\u5426\u5219\u4ee4 $u$ \u4e3a\u79bb $x_i$ \u6700\u8fd1\u7684\u6ee1\u8db3 $size_u - a_u = 0$ \u7684\u7956\u5148\uff08\u5305\u62ec $x_i$ \uff09\uff0c\u7528\u5458\u5de5 $i$ \u5bf9\u5e94\u7684\u4e00\u7c7b\u8fb9\u66ff\u6362\u6389 $u$ \u5b50\u6811\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u4e00\u7c7b\u8fb9\u5373\u53ef\u3002\u4ee5\u4e0a\u64cd\u4f5c\u5747\u53ef\u7528 $multiset$ \u4e0e\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u603b\u590d\u6742\u5ea6 $n \\log^3 n$\u3002\n\n",
        "postTime": 1682332043,
        "uid": 242901,
        "name": "expect",
        "ccfLevel": 7,
        "title": "P9168 [\u7701\u9009\u8054\u8003 2023] \u4eba\u5458\u8c03\u5ea6"
    },
    {
        "content": "> Extracted from [\u8054\u5408\u7701\u9009\u8bb0\u5f55](https://www.luogu.com.cn/blog/90706/li-nian-xing-xuan-ji-lu)\n\n- ### [P9168 [\u7701\u9009\u8054\u8003 2023] \u4eba\u5458\u8c03\u5ea6](https://www.luogu.com.cn/problem/P9168)\n\n\u6211\u548c\u8d2a\u5fc3\u52bf\u4e0d\u4e24\u7acb\uff01\n\n\u5220\u9664\u64cd\u4f5c\u5f88\u6076\u5fc3\uff0c\u5148\u4e0d\u7ba1\u3002\u6211\u4eec\u5148\u6765\u770b\u4e0d\u5e26\u5220\u9664\u600e\u4e48\u505a\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u5458\u5de5\u4e3a $(u,x)$ \u8868\u793a\u521d\u59cb\u90e8\u95e8\u662f $u$\uff0c\u80fd\u529b\u503c\u662f $x$\u3002\n\n\u8003\u8651\u5bf9\u6bcf\u4e2a\u70b9 $u$ \u7ef4\u62a4\u4e00\u4e2a\u5458\u5de5\u96c6\u5408 $S_u$\uff0c\u6ee1\u8db3 $\\forall u$\uff0c$S_u$\u662f\u521d\u59cb\u90e8\u95e8\u662f $u$ \u7684\u5458\u5de5\u96c6\u5408\u7684\u5b50\u96c6\u3002\u5e76\u4e14\uff0c\u5c06\u6240\u6709\u5458\u5de5 $(U,x)$ \u4e0e\u5176\u521d\u59cb\u90e8\u95e8 $U$ \u7684\u5b50\u6811\u4e2d\u6240\u6709\u7684\u70b9\u8fde\u8fb9\uff0c\u5f62\u6210\u4e00\u5f20\u5458\u5de5\u5230\u70b9\u7684\u4e8c\u5206\u56fe\uff0c\u6ee1\u8db3\u8be5\u4e8c\u5206\u56fe\u5b58\u5728\u5458\u5de5\u7684\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u8fd9\u6837\u5c31\u6ee1\u8db3\u4e86\u5b58\u5728\u4e00\u79cd\u9898\u76ee\u4e2d\u7684\u5206\u914d\uff08\u4e0b\u653e\uff09\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6240\u6709\u70b9\u4e0a\u7684\u5458\u5de5\u6570 $\\leq 1$\u3002\n\n\u76f8\u5f53\u4e8e\u4e0d\u8003\u8651\u4e00\u4e2a\u65b9\u6848\u4e2d\u6ca1\u6709\u8d21\u732e\u7684\u70b9\uff0c\u800c\u6839\u636e\u6700\u4f18\u6027\uff0c\u9898\u76ee\u7684\u4e00\u4e2a\u6700\u4f18\u65b9\u6848\u4e00\u5b9a\u80fd\u548c\u4e00\u7ec4 $S_u$ \u4e00\u4e00\u5bf9\u5e94\u3002\n\n\u8bbe $size_u$ \u662f $u$ \u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n\u6839\u636e Hall \u5b9a\u7406\uff0c\u4e00\u4e2a\u65b9\u6848\u6ee1\u8db3\u6761\u4ef6\u7684\u5145\u8981\u6761\u4ef6\u662f $\\forall u,\\sum_{v\\in u\\text{ \u7684\u5b50\u6811 }}|S_v|\\leq size_u$\uff0c\u5373\u5b50\u6811\u5185\u4fdd\u7559\u7684\u5458\u5de5\u4e2a\u6570\u4e0d\u8d85\u8fc7\u5b50\u6811\u5927\u5c0f\u3002\n\n\u8bc1\u660e\u611f\u6027\u7406\u89e3\uff0c\u5927\u6982\u662f\u6bcf\u4e2a\u5458\u5de5\u5b50\u96c6\u90fd\u62c6\u6210\u4e0d\u76f8\u4ea4\u5b50\u6811\uff0c\u7136\u540e\u5728\u4e00\u4e2a\u5b50\u6811\u5185\u9650\u5236\u5c3d\u91cf\u7d27\uff0c\u4e8e\u662f\u628a\u5b50\u6811\u5185\u6240\u6709\u7684\u5458\u5de5\u7b97\u4e0a\u4e5f\u8981\u6ee1\u8db3\u3002\u5177\u4f53\u4e0d\u8bc1\u4e86\uff08\u8981\u7684\u8bdd\u8bc4\u8bba\u52a0\u4e00\u4e0b\uff09\u3002\n\n\u8bb0 $left_u=size_u-\\sum_{v\\in u \\text{ \u7684\u5b50\u6811 }}|S_v|$\uff0c\u5373 $u$ \u7684\u5b50\u6811\u5185\u8fd8\u80fd\u653e\u591a\u5c11\u4e2a\u5458\u5de5\u3002\u4e8e\u662f\u65b9\u6848\u5408\u6cd5\u7b49\u4ef7\u4e8e $\\forall u,left_u\\geq 0$\u3002\n\n\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u5458\u5de5 $(u,x)$ \u7684\u5f71\u54cd\u3002\n\n\u5982\u679c\u76f4\u63a5\u52a0\u5165\u8fd9\u4e2a\u5458\u5de5\u5408\u6cd5\uff0c\u90a3\u4e48\u7531\u4e8e\u52a0\u5165\u5b83\u4f1a\u4f7f $u$ \u53ca\u5176\u7956\u5148\u5b50\u6811\u4e2d\u7684\u7a7a\u4f4d\u90fd\u51cf\u5c11 1\uff0c\u6240\u4ee5\u8981\u6ee1\u8db3 **$u$ \u53ca\u5176\u7956\u5148\u7684 $left$ \u5747\u4e0d\u4e3a 0**\u3002\u6b64\u65f6\u76f4\u63a5\u5728 $u$ \u52a0\u5165\u8fd9\u4e2a\u5458\u5de5\u662f\u5408\u6cd5\u7684\u3002\u90a3\u4e48\u5c31\u679c\u65ad\u52a0\u5165\u3002\n\n\u4f46\u662f\u5982\u679c **$u$ \u53ca\u5176\u7956\u5148\u7684 $left$ \u5b58\u5728\u4e00\u4e2a\u70b9\u4e3a 0** \u5462\uff1f\n\n\u90a3\u6211\u4eec\u5982\u679c\u8981\u52a0\u5165\u8fd9\u4e2a\u5458\u5de5\uff0c\u5fc5\u5b9a\u8981\u8e22\u6389\u4e00\u4e2a\u3002\u6211\u4eec\u627e\u5230 $u$ \u53ca\u5176\u7956\u5148\u4e2d\uff0c\u6df1\u5ea6\u6700\u6df1\u4e14 $left=0$ \u7684\u70b9\uff0c\u8bb0\u4e3a $v$\u3002\u7531\u4e0a\u9762\u7684\u5145\u8981\u6761\u4ef6\u5f97\uff0c\u8fd9\u4e2a\u65f6\u5019\u5fc5\u987b\u5728 $v$ \u7684\u5b50\u6811\u5185\u8e22\u6389\u4e00\u4e2a\u3002\n\n\u4e8e\u662f\u6211\u4eec\u67e5\u8be2 $v$ \u7684\u5b50\u6811\u5185\u4fdd\u7559\u7684\u5458\u5de5\u7684\u6700\u5c0f\u503c\u3002\u82e5\u7528\u73b0\u5728\u8fd9\u4e2a\u5458\u5de5\u66ff\u6362\u4ed6\u66f4\u4f18\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8e22\u6389\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u5e76\u52a0\u5165\u5f53\u524d\u5458\u5de5 $(u,x)$\u3002\n\n\u81f3\u6b64\uff0c\u4e0d\u5e26\u5220\u7684\u4e1c\u897f\u505a\u5b8c\u4e86\u3002\n\n\u81f3\u4e8e\u5177\u4f53\u5b9e\u73b0\uff0c\u6211\u4eec\u6811\u5256\u7ef4\u62a4 $left$\uff0c\u64cd\u4f5c\u6709\u94fe\u4e0a $\\pm 1$ \u548c\u67e5\u8be2\u94fe\u4e0a\u6700\u5c0f\u503c\uff08\u53ca\u5176\u6700\u6df1\u7684\u4f4d\u7f6e\uff09\uff1b\u800c\u5bf9\u4e8e\u5458\u5de5\u96c6\u5408 $S_u$\uff0c\u6211\u4eec\u7ed9\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a `multiset`\uff0c\u8bb0\u5f55\u5458\u5de5\u7684\u80fd\u529b\u503c\u96c6\u5408\u3002\u5373 $w_u$ \u4e3a $u$ \u7684 `multiset` \u4e2d\u7684\u6700\u5c0f\u503c\uff08\u5c31\u662f\u5458\u5de5\u6700\u5c0f\u80fd\u529b\u503c\uff09\uff0c\u67e5\u8be2\u5b50\u6811\u5185\u5458\u5de5\u6700\u5c0f\u503c\u5373\u4e3a\u67e5\u8be2\u533a\u95f4\u5185 $w$ \u7684\u6700\u5c0f\u503c\uff0c\u540c\u6837\u53ef\u4ee5\u6811\u5256\u3002\u800c\u52a0\u5165\u6216\u8e22\u6389\u5458\u5de5\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728 `multiset` \u4e0a\u52a0\u6570\u6216\u5220\u6570\uff0c\u6b64\u65f6\u5355\u4e2a\u70b9\u7684 $w$ \u53ef\u80fd\u4f1a\u53d8\u5316\uff0c\u90a3\u4e48\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\u5373\u53ef\u3002\n\n\u73b0\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\n\n\u597d\u597d\u597d\uff0c\u5e26\u5220\u600e\u4e48\u529e\uff1f\n\n\u79bb\u7ebf\u540e\u53d1\u73b0\u6bcf\u4e2a\u5458\u5de5\u7684\u5b58\u5728\u65f6\u95f4\u90fd\u662f\u4e00\u6bb5\u533a\u95f4\uff0c\u679c\u65ad\u65f6\u95f4\u8f74\u4e0a\u5206\u6cbb\uff0c\u5c31\u53ef\u4ee5\u5c06\u5220\u9664\u6539\u4e3a\u64a4\u9500\u3002\u540c\u65f6\u6211\u4eec\u5728\u6811\u5256\u4e0a\u7684\u64cd\u4f5c\u6b63\u597d\u90fd\u662f\u53ef\u64a4\u9500\u7684\uff08\u52a0 / \u51cf\u548c\u52a0\u5165 / \u5220\u9664\uff09\uff0c\u56e0\u6b64\u5b8c\u7f8e\u9002\u914d\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5728 $O(n\\log^3n)$ \u7684\u590d\u6742\u5ea6\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff01\n\ncode:\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define f(i,a,b) for(ll i=a;i<=b;i++)\ninline ll rd(){\n    ll x=0,f=1;char c=getchar();\n    while(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n    while(isdigit(c))x=x*10+c-'0',c=getchar();\n    return x*f;\n}\n#define d rd()\nll Sid;\nll n,m,k;\n//\u6811\u5256\nll dfn[100010],sz[100010],son[100010];\nll de[100010],fa[100010],top[100010],rk[100010];\nvector<ll>e[100010];\nvoid dfs1(ll u,ll f){\n    de[u]=de[f]+1,fa[u]=f;sz[u]=1;\n    for(int i=0;i<e[u].size();i++){\n        ll v=e[u][i];if(v==f)continue;\n        dfs1(v,u);sz[u]+=sz[v];\n        if(sz[v]>sz[son[u]])son[u]=v;\n    }\n}ll TIm;\nvoid dfs2(ll u,ll tp){\n    top[u]=tp;dfn[u]=++TIm;rk[TIm]=u;\n    if(son[u])dfs2(son[u],tp);\n    for(int i=0;i<e[u].size();i++){\n        ll v=e[u][i];if(v==fa[u]||v==son[u])continue;\n        dfs2(v,v);\n    }\n}\n#define ls(p) (p<<1)\n#define rs(p) (p<<1|1)\nll t[100010<<2];//min(size-ssum of empolees)\nll tid[100010<<2];//id of min\nll tg[100010<<2];//tag of t\nmultiset<ll>st[100010];\nll w[100010<<2];//min value of employees\nll wid[100010<<2];//id of min w\nvoid upd(ll p){\n    if(t[rs(p)]<=t[ls(p)])t[p]=t[rs(p)],tid[p]=tid[rs(p)];\n    else t[p]=t[ls(p)],tid[p]=tid[ls(p)];\n    if(w[rs(p)]<=w[ls(p)])w[p]=w[rs(p)],wid[p]=wid[rs(p)];\n    else w[p]=w[ls(p)],wid[p]=wid[ls(p)];\n}\nvoid build(ll l,ll r,ll p){\n    if(l==r){t[p]=sz[rk[l]];w[p]=0x3f3f3f3f3f3f3f3f;tid[p]=wid[p]=l;return;}\n    ll mid=l+r>>1;\n    build(l,mid,ls(p));\n    build(mid+1,r,rs(p));\n    upd(p);\n}\nvoid pd(ll p){\n    if(!tg[p])return;\n    t[ls(p)]+=tg[p],t[rs(p)]+=tg[p];\n    tg[ls(p)]+=tg[p],tg[rs(p)]+=tg[p];\n    tg[p]=0;\n}\nvoid add(ll l,ll r,ll p,ll L,ll R,ll k){\n    if(L<=l&&r<=R){t[p]+=k,tg[p]+=k;return;}\n    pd(p);ll mid=l+r>>1;\n    if(mid>=L)add(l,mid,ls(p),L,R,k);\n    if(mid<R)add(mid+1,r,rs(p),L,R,k);\n    upd(p);\n}\nvoid ch(ll l,ll r,ll p,ll pos,ll k,ll o){\n    if(l==r){\n        if(o==0)st[l].insert(k);\n        else st[l].erase(st[l].find(k));\n        if(st[l].size())w[p]=*st[l].begin();\n        else w[p]=0x3f3f3f3f3f3f3f3f;return;\n    }pd(p);ll mid=l+r>>1;\n    if(mid>=pos)ch(l,mid,ls(p),pos,k,o);\n    if(mid<pos)ch(mid+1,r,rs(p),pos,k,o);\n    upd(p);\n}inline pair<ll,ll> Min(pair<ll,ll> a,pair<ll,ll>b){\n    if(a.first!=b.first)return min(a,b);\n    if(a.second>b.second)return a;return b;\n}\npair<ll,ll> mnt(ll l,ll r,ll p,ll L,ll R){\n    if(L<=l&&r<=R)return {t[p],tid[p]};\n    pd(p);ll mid=l+r>>1;pair<ll,ll>ans={0x3f3f3f3f,0x3f3f3f3f};\n    if(mid>=L)ans=Min(ans,mnt(l,mid,ls(p),L,R));\n    if(mid<R)ans=Min(ans,mnt(mid+1,r,rs(p),L,R));\n    return ans;\n}pair<ll,ll> mnw(ll l,ll r,ll p,ll L,ll R){\n    if(L<=l&&r<=R)return {w[p],wid[p]};\n    pd(p);ll mid=l+r>>1;pair<ll,ll>ans={0x3f3f3f3f,0x3f3f3f3f};\n    if(mid>=L)ans=Min(ans,mnw(l,mid,ls(p),L,R));\n    if(mid<R)ans=Min(ans,mnw(mid+1,r,rs(p),L,R));\n    return ans;\n}\n\nvoid addch(ll u,ll v,ll k){\n    while(top[u]!=top[v]){\n        if(de[top[u]]<de[top[v]])swap(u,v);\n        add(1,n,1,dfn[top[u]],dfn[u],k);\n        u=fa[top[u]];\n    }if(dfn[u]>dfn[v])swap(u,v);\n    add(1,n,1,dfn[u],dfn[v],k);\n}\npair<ll,ll> chmnt(ll u,ll v){\n    pair<ll,ll>ans={0x3f3f3f3f,0x3f3f3f3f};\n    while(top[u]!=top[v]){\n        if(de[top[u]]<de[top[v]])swap(u,v);\n        ans=Min(ans,mnt(1,n,1,dfn[top[u]],dfn[u]));\n        u=fa[top[u]];\n    }if(dfn[u]>dfn[v])swap(u,v);\n    ans=Min(ans,mnt(1,n,1,dfn[u],dfn[v]));\n    return ans;\n}\npair<ll,ll> mnw(ll u){\n    return mnw(1,n,1,dfn[u],dfn[u]+sz[u]-1);\n}ll SUM;\n\nstruct node{\n    ll u,x;\n    ll isf,iss;\n    ll pos;\n    ll delf,dels;\n};\n//\u52a0\u5165\u5458\u5de5\nvoid addemp(node &p,ll u,ll x){\n    p.u=u,p.x=x;\n    // cout<<\"----------------\\nadd (\"<<u<<\",\"<<x<<\")\\n\";\n    pair<ll,ll>is=chmnt(1,u);\n    p.isf=is.first,p.iss=is.second;\n    if(is.first!=0){\n        // cout<<\"all ancectors are unfull.\\n\";\n        SUM+=x;ch(1,n,1,dfn[u],x,0);addch(1,u,-1);\n        return;\n    }ll pos=rk[is.second];p.pos=pos;\n    // cout<<\"nearst full ancestor is \"<<pos<<endl;\n\n    pair<ll,ll>del=mnw(pos);\n    p.delf=del.first,p.dels=del.second;\n    if(del.first>x)return;\n    // cout<<\"min value of emploees: (\"<<rk[del.second]<<\",\"<<del.first<<\")\\n\";\n    if(del.first)addch(1,rk[del.second],1),ch(1,n,1,del.second,del.first,1);\n    SUM-=del.first;SUM+=x;ch(1,n,1,dfn[u],x,0);\n    addch(1,u,-1);\n}\nll U[200010],X[200010];\nstruct ask{ll o,x,y;}q[100010];\n//\u7ebf\u6bb5\u6811\u5206\u6cbb\nvector<ll>tr[100010<<2];\nll Ol[200010],Or[200010];\nvoid ADD(ll l,ll r,ll p,ll L,ll R,ll o){\n    if(L<=l&&r<=R){tr[p].push_back(o);return;}\n    ll mid=l+r>>1;if(mid>=L)ADD(l,mid,ls(p),L,R,o);\n    if(mid<R)ADD(mid+1,r,rs(p),L,R,o);\n}\n\nvoid get(ll l,ll r,ll p){\n    vector<node>del;del.clear();\n    for(int j=0;j<tr[p].size();j++){\n        // cout<<l<<\" \"<<r<<\" \"<<p<<\" \";\n        ll i=tr[p][j];ll u=U[i],x=X[i];\n        // cout<<\"(\"<<u<<\",\"<<x<<\")\\n\";\n        node o={0,0,0,0,0,0,0};addemp(o,u,x);\n        del.push_back(o);\n    }\n    if(l==r)printf(\"%lld \",SUM);\n    ll mid=l+r>>1;if(l!=r)get(l,mid,ls(p)),get(mid+1,r,rs(p));\n    for(int i=del.size()-1;i>=0;i--){\n        node o=del[i];ll u=o.u,x=o.x;\n        if(o.isf!=0){\n            addch(1,u,1);ch(1,n,1,dfn[u],x,1);SUM-=x;\n        }else if(o.delf>x)continue;\n        else{\n            addch(1,u,1);\n            SUM+=o.delf;SUM-=x;ch(1,n,1,dfn[u],x,1);   \n            if(o.delf)addch(1,rk[o.dels],-1),ch(1,n,1,o.dels,o.delf,0);\n        }\n    }\n}\nint main(){\n    // freopen(\"transfer15.in\",\"r\",stdin);\n    // freopen(\"transfer.out\",\"w\",stdout);\n    Sid=d;n=d,k=d,m=d+1;\n    f(i,2,n)e[d].push_back(i);\n    dfs1(1,0),dfs2(1,1);build(1,n,1);\n    f(i,1,k)Ol[i]=1,Or[i]=m,U[i]=d,X[i]=d;\n    f(i,2,m){\n        ll o=d;if(o==1){\n            ll u=d,x=d;q[i]={o,u,x};k++;\n            U[k]=u,X[k]=x,Ol[k]=i,Or[k]=m;\n        }else{\n            ll x=d;q[i]={o,x,0};\n            Or[x]=i-1;\n        }\n    }\n    f(i,1,k)ADD(1,m,1,Ol[i],Or[i],i);\n    get(1,m,1);\n    return 0;\n}\n```",
        "postTime": 1682606300,
        "uid": 90706,
        "name": "_jimmywang_",
        "ccfLevel": 0,
        "title": "P9168 [\u7701\u9009\u8054\u8003 2023] \u4eba\u5458\u8c03\u5ea6"
    },
    {
        "content": "\u770b\u9898\u76ee\uff0c\u5982\u679c\u6ca1\u6709\u4fee\u6539\u7684\u8bdd\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u8d2a\u5fc3\uff1a\u628a\u5458\u5de5\u6309\u7167\u80fd\u529b\u503c\u6392\u5e8f\uff0c\u5982\u679c\u5b50\u6811\u5185\u8fd8\u6709\u7a7a\u95f4\u5c31\u653e\u8fdb\u53bb\uff0c\u800c\u4e3a\u4e86\u907f\u514d\u5b89\u6392\u5458\u5de5\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u628a\u8fd9\u91cc\u7684\u201c\u653e\u201d\u5f53\u505a\u628a\u5f53\u524d\u8282\u70b9\u50a8\u5b58\u7684\u5458\u5de5\u52a0\u4e00\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u67e5\u8be2\u5b50\u6811\u5185\u7684\u603b\u5458\u5de5\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u7684\u64cd\u4f5c\u662f\u6b63\u786e\u7684\uff0c\u53ea\u8981\u662f\u7531\u8fd9\u79cd\u64cd\u4f5c\u6784\u9020\u7684\u89e3\u6cd5\u4e00\u5b9a\u6709\u4e00\u79cd\u5b89\u6392\u65b9\u6cd5\uff0c\u800c\u4e00\u79cd\u5408\u6cd5\u7684\u5b89\u6392\u65b9\u6cd5\u4e5f\u4e00\u5b9a\u53ef\u4ee5\u4ee5\u8fd9\u79cd\u5f62\u5f0f\u8868\u793a\uff0c\u800c\u6392\u5e8f\u64cd\u4f5c\u4fdd\u8bc1\u4e86\u6700\u4f18\u6027\uff0c\u56e0\u4e3a\u6ca1\u653e\u8fdb\u6765\u7684\u80af\u5b9a\u6574\u4e2a\u5b50\u6811\u6240\u6709\u6570\u7684\u80fd\u529b\u503c\u90fd\u6bd4\u4ed6\u9ad8\u3002\n\n\u90a3\u5e26\u4fee\u6539\u4e86\u600e\u4e48\u529e\u5462\uff0c\u591a\u6b21\u4fee\u6539\u518d\u91c7\u53d6\u8fd9\u4e2a\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(nq)$ \u7684\uff0c\u53d1\u73b0\u6392\u5e8f\u548c\u91cd\u65b0\u64cd\u4f5c\u662f\u6211\u4eec\u7684\u6700\u5927\u969c\u788d\uff0c\u6211\u4eec\u5f97\u8003\u8651\u629b\u79bb\u4e86\u6392\u5e8f\u600e\u4e48\u505a\uff0c\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u5458\u5de5\u4f1a\u5bf9\u6574\u9897\u6811\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\uff0c\u7c7b\u4f3c\u4e0a\u4e00\u6b65\uff0c\u53ea\u8981\u5b50\u6811\u5185\u6709\u7a7a\u95f4\u65e0\u8111\u653e\uff0c\u6ca1\u7a7a\u95f4\u5c31\u627e\u5b50\u6811\u5185\u6700\u5c0f\u7684\u6254\u51fa\u6765\u518d\u628a\u5b83\u653e\u8fdb\u53bb\u3002\n\n\u53c8\u53d1\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u6211\u4eec\u521a\u597d\u53ef\u4ee5\u901a\u8fc7\u6811\u94fe\u5256\u5206\u52a0\u4e0a\u7ebf\u6bb5\u6811\u5b9e\u73b0\uff0c\u90a3\u5269\u4e0b\u7684\u5c31\u53ea\u5269\u5220\u9664\u64cd\u4f5c\u4e86\uff0c\u53d1\u73b0\u6bcf\u4e2a\u5458\u5de5\u6709\u56fa\u5b9a\u7684\u51fa\u73b0\u65f6\u95f4\u6bb5\uff0c\u76f4\u63a5\u5957\u8def\u8f6c\u6210\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^3 n)$\u3002",
        "postTime": 1681969455,
        "uid": 421265,
        "name": "eastcloud",
        "ccfLevel": 4,
        "title": "P9168 [\u7701\u9009\u8054\u8003 2023] \u4eba\u5458\u8c03\u5ea6 \u9898\u89e3"
    },
    {
        "content": "\u8d85\u7ea7\u65e0\u654c\u70ab\u9177\u539f\u795e\u5927\u738b\u9898\u76ee\u3002\n\n\u5148\u8003\u5bdf\u5bf9\u4e8e\u4e00\u4e9b\u5458\u5de5\uff0c\u5b83\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u4e0d\u91cd\u590d\u7684\u653e\u5230\u8fd9\u68f5\u6811\u91cc\u3002\n\n\u62bd\u8c61\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\u6a21\u578b\uff0c\u5c06\u6bcf\u4e2a\u5458\u5de5\u4e0e\u6240\u5728\u5b50\u6811\u7684\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u6240\u6709\u5458\u5de5\u90fd\u80fd\u653e\u4e0b\u7b49\u4ef7\u4e8e\u6b64\u4e8c\u5206\u56fe\u6709\u5b8c\u7f8e\u5339\u914d\uff0c\u7531 hall \u5b9a\u7406\uff0c\u7b49\u4ef7\u4e8e\u4efb\u610f\u4e00\u4e2a\u5458\u5de5\u7684\u5b50\u96c6 $S$ \u90fd\u80fd\u5339\u914d\u5230\u81f3\u5c11 $|S|$ \u4e2a\u9876\u70b9\u3002\u628a $S$ \u4e2d\u7684\u5458\u5de5\u6240\u5728\u7684\u5b50\u6811\u5206\u6210\u4e00\u5806\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u6811\uff0c\u5bb9\u6613\u53d1\u73b0\u6761\u4ef6\u7b49\u4ef7\u4e8e\u6bcf\u4e2a\u8fd9\u6837\u7684\u5b50\u6811\u90fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e3a\u4e86\u8ba9\u6761\u4ef6\u5c3d\u91cf\u7d27\uff0c\u5e94\u8be5\u628a\u6240\u6709\u8be5\u5b50\u6811\u5185\u7684\u5458\u5de5\u90fd\u9009\u4e0a\u3002\n\n\u7efc\u4e0a\uff0c\u4e00\u4e2a\u5458\u5de5\u96c6\u5408\u53ef\u4ee5\u653e\u5230\u6811\u91cc\u7b49\u4ef7\u4e8e\u5bf9\u4e8e\u4efb\u4f55\u4e00\u68f5\u5b50\u6811\uff0c\u8be5\u5b50\u6811\u5185\u7684\u5458\u5de5\u6811\u90fd\u4e0d\u8d85\u8fc7\u8be5\u5b50\u6811\u5927\u5c0f\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651 $m=0$ \u600e\u4e48\u505a\u3002\n\n\u76f4\u63a5\u5c06\u5458\u5de5\u6309\u7167 $v$ \u4ece\u5927\u5230\u5c0f\u52a0\u5165\uff0c\u5982\u679c\u80fd\u653e\u8fdb\u53bb\u5c31\u653e\uff0c\u653e\u4e0d\u8fdb\u53bb\u5c31\u4e0d\u7ba1\u4ed6\uff0c\u52a8\u6001\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u6811\u5185\u8fd8\u80fd\u653e\u591a\u5c11\u5458\u5de5\uff0c\u53ef\u4ee5\u901a\u8fc7\u6811\u5256\u505a\u5230 $O(n\\log^2 n)$ \u7684\u590d\u6742\u5ea6\u3002\n\n\u4f46\u662f\u539f\u95ee\u9898\u770b\u8d77\u6765\u5f88\u4e0d\u80fd\u4ece\u5927\u5230\u5c0f\u52a0\u5165\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u652f\u6301\u968f\u673a\u52a0\u5165\u7684\u7b97\u6cd5\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u52a0\u5165\u8be5\u5458\u5de5\u540e\u5f53\u524d\u5458\u5de5\u96c6\u5408\u4ecd\u7136\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u80af\u5b9a\u662f\u76f4\u63a5\u52a0\u8fdb\u53bb\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u8bf4\u660e\u8be5\u5458\u5de5\u6240\u5728\u8282\u70b9 $u$ \u6709\u4e00\u4e2a\u7956\u5148\u5bf9\u5e94\u7684\u5b50\u6811\u5df2\u7ecf\u653e\u6ee1\u4e86\uff0c\u90a3\u6211\u4eec\u627e\u5230\u9650\u5236\u6700\u7d27\u7684\u5b50\u6811 $v$\uff0c\u5373\u6700\u6df1\u7684\u653e\u6ee1\u7684\u7956\u5148\uff0c\u770b\u770b\u8fd9\u4e2a\u5b50\u6811\u5185\u90fd\u653e\u4e86\u54ea\u4e9b\u5458\u5de5\uff0c\u5e76\u628a\u5176\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u5458\u5de5\u62ff\u51fa\u6765\uff0c\u5982\u679c\u5f53\u524d\u5458\u5de5\u66ff\u6362\u6389\u8fd9\u4e2a\u5458\u5de5\u66f4\u4f18\u79c0\uff0c\u90a3\u4e48\u5c31\u66ff\u6362\u6389\uff0c\u5426\u5219\u4fdd\u6301\u4e0d\u53d8\u3002\u5bb9\u6613\u53d1\u73b0\u88ab\u66ff\u6362\u7684\u8fd9\u4e2a\u5458\u5de5\u4e0d\u53ef\u80fd\u518d\u66ff\u6362\u6389\u5176\u5b83\u5458\u5de5\uff0c\u56e0\u6b64\u8fd9\u4e2a\u8d2a\u5fc3\u7b56\u7565\u662f\u6b63\u786e\u7684\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5b50\u6811\u5185\u5f53\u524d\u6743\u503c\u6700\u5c0f\u7684\u5458\u5de5\uff0c\u590d\u6742\u5ea6\u4ecd\u4e3a\u5355\u6b21 $O(\\log^2 n)$\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u5e26\u5220\u9664\u7684\u539f\u95ee\u9898\uff0c\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u89c4\u907f\u6389\u5220\u9664\u5458\u5de5\u8fd9\u4e00\u64cd\u4f5c\uff0c\u4ee3\u4ef7\u662f\u590d\u6742\u5ea6\u4e0a\u591a\u4e00\u4e2a $\\log$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n\\log^3 n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\uff0c\u4f7f\u7528\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u7ef4\u62a4\u94fe\u52a0\u94fe $\\min$ \u53ef\u4ee5\u505a\u5230 $O(n\\log^2 n)$\uff0c\u610f\u4e49\u4e0d\u5927\u3002",
        "postTime": 1681483304,
        "uid": 339136,
        "name": "blackname",
        "ccfLevel": 0,
        "title": "P9168 \u4eba\u5458\u8c03\u5ea6"
    }
]