[
    {
        "content": "\u7ebf\u6bb5\u6811\u795e\u9898\u2026\u2026\u6ca1\u60f3\u5230\u7ebf\u6bb5\u6811\u8fd8\u6709\u8fd9\u79cd\u73a9\u6cd5\u2026\u2026\n\n\u6253\u51fa\u8fd9\u9053\u9898\u5bf9\u7ebf\u6bb5\u6811\u7684\u7406\u89e3\u548c\u8fd0\u7528\u4e00\u5b9a\u6709\u5de8\u5927\u5e2e\u52a9\u3002\n\n---\n\u8fd9\u9898\u4e00\u770b\u50cf\u662fLCT\u7684\u6837\u5b50\uff0c\u7136\u800cLCT\u8fd8\u5f97\u652f\u6301\u5404\u79cd\u5947\u602a\u7684\u4e1c\u897f\uff0c\u8fd8\u6709\u5de8\u5927\u5e38\u6570\u2026\u2026\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u4f1a\u6302\u3002\n\n\u8003\u8651\u7ebf\u6bb5\u6811\u3002~~\u548b\u5565\u90fd\u80fd\u8003\u8651~~\n\n\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4 $[l,r]$ \u533a\u95f4\u7684\u8054\u901a\u60c5\u51b5\u3002\uff08\u4e0d\u8003\u8651 $[l,r]$ \u5916\u7684\u9053\u8def\uff0c\u4e0d\u7136\u4f1a\u5199\u6b7b\u4eba\uff09\n\n\uff08u,d,l,r,p,q\u90fd\u662fbool\u3002\u4e0b\u56fe\u4e2d\u6709\u4e2a\u9519\u522b\u5b57\uff0c\u61d2\u5f97\u6539\u4e86\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/48693.png)\n\n\u5bf9\u4e8e\u53f6\u5b50\u8282\u70b9\uff0c\u5f88\u660e\u663e\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/48696.png)\n\n---\n\n\u672c\u9898\u6700\u6076\u5fc3\u4e5f\u662f\u6700\u5389\u5bb3\u7684\u5730\u65b9\u6765\u4e86\uff1apushup\u3002\n\n\u5148\u770b\u770bl\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/48695.png )\n\nr\u540c\u7406\u3002\u8fd9\u4e00\u90e8\u5206\u8fd9\u6837\u5199\uff1a\n\n```cpp\n//conn[x][0]\u8868\u793a(1,x)\u548c(1,x+1)\u662f\u5426\u8054\u901a\n//conn[x][1]\u8868\u793a(2,x)\u548c(2,x+1)\u662f\u5426\u8054\u901a\nx.l=l.l|(l.u&conn[l.rig][0]&r.l&conn[l.rig][1]&l.d);\n//\u5de6\u8fb9\u80fd\u76f4\u63a5\u8d70\u4e0b\u53bb\n//\u5de6\u8fb9\u80fd\u8d70\u4e0a\u9762\uff0c\u4e2d\u4e0a\u8054\u901a\uff0c\u518d\u901a\u8fc7\u53f3\u8fb9\u8d70\u5230\u4e0b\u9762\uff0c\u4e2d\u4e0b\u8054\u901a\uff0c\u518d\u901a\u8fc7\u5de6\u8fb9\u8d70\u4e0b\u9762\u7ed5\u56de\u6765\nx.r=r.r|(r.u&conn[l.rig][0]&l.r&conn[l.rig][1]&r.d);\n//\u540c\u7406\n```\n\n\u518d\u770b\u770bu\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/48694.png)\n\nd\u540c\u7406\u3002\u8fd9\u4e00\u90e8\u5206\u8fd9\u6837\u5199\uff1a\n\n```cpp\nx.u=(l.u&conn[l.rig][0]&r.u)|(l.p&conn[l.rig][1]&r.q);\n//\u5de6\u8fb9\u80fd\u8d70\u4e0a\u9762\uff0c\u4e2d\u4e0a\u8054\u901a\uff0c\u53f3\u8fb9\u80fd\u8d70\u4e0a\u9762\n//\u5de6\u8fb9\u80fd\u8d70\u4e3b\u5bf9\u89d2\u7ebf\uff0c\u4e2d\u4e0b\u8054\u901a\uff0c\u53f3\u8fb9\u80fd\u8d70\u526f\u5bf9\u89d2\u7ebf\nx.d=(l.d&conn[l.rig][1]&r.d)|(l.q&conn[l.rig][0]&r.p);\n//\u540c\u7406\n```\n\n\u6700\u540e\u8fd8\u6709p\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/48697.png)\n\nq\u540c\u7406\u3002\u6700\u540e\u653e\u51fa\u6574\u4e2apushup\u4ee3\u7801\uff1a\n\n```cpp\n//pushup\u8fd9\u6837\u4f20\u53c2\u7684\u539f\u56e0\u5f85\u4f1a\u4f1a\u8bf4\nvoid pushup(node &x,node l,node r){\n\tx.lft=l.lft;\t//x\u7684\u5de6\u8fb9\u754c\uff0c\u56e0\u4e3aconn\u8981\u7528\u5230\u6240\u4ee5\u4e5f\u8981pushup\n\tx.rig=r.rig;\t//x\u7684\u53f3\u8fb9\u754c\n\tx.l=l.l|(l.u&conn[l.rig][0]&r.l&conn[l.rig][1]&l.d);\n\tx.r=r.r|(r.u&conn[l.rig][0]&l.r&conn[l.rig][1]&r.d);\n\tx.u=(l.u&conn[l.rig][0]&r.u)|(l.p&conn[l.rig][1]&r.q);\n\tx.d=(l.d&conn[l.rig][1]&r.d)|(l.q&conn[l.rig][0]&r.p);\n\tx.p=(l.u&conn[l.rig][0]&r.p)|(l.p&conn[l.rig][1]&r.d);\n\tx.q=(l.d&conn[l.rig][1]&r.q)|(l.q&conn[l.rig][0]&r.u);\n}\n```\n---\n\u73b0\u5728\u6765\u5199\u4fee\u6539\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5728\u540c\u4e00\u884c\u548c\u4e0d\u5728\u540c\u4e00\u884c\u6709\u5f88\u591a\u533a\u522b\uff08\u8981\u6539\u7684\u4e1c\u897f\u4e0d\u4e00\u6837\uff09\uff0c\u90a3\u5c31\u5206\u5f00\u8ba8\u8bba\u3002\n\n\u5148\u770b\u4e0d\u5728\u540c\u4e00\u884c\uff1a\uff08\u5373\u540c\u4e00\u5217\uff09\n\n\u5bf9\u4e8e\u8fd9\u4e00\u5217\u4ee3\u8868\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e0a\u9762\u548c\u4e0b\u9762\u7684\u8fde\u901a\u6027\u53d1\u751f\u4e86\u53d8\u5316\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/48700.png)\n\n\u7136\u540e\u6cbf\u9014pushup\u5c31\u884c\u4e86\u3002\n\n\u5728\u540c\u4e00\u884c\u7684\u4f1a\u6bd4\u8f83\u96be\u61c2\u3002\u6211\u4e5f\u662f\u770b\u4e86\u522b\u7684\u9898\u89e3\u624d\u660e\u767d\u2026\u2026\n\n\u53d1\u73b0\u5bf9\u4e8e $[x,x+1]$ \u8fd9\u4e24\u4e2a\u70b9\u6240\u5728\u7684\u5217\uff0c\u76f4\u63a5\u627e\u5230 $x$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u53f6\u5b50\u4e0d\u592a\u597d\u4fee\u6539\u3002\u600e\u4e48\u5f04\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4fee\u6539 $[x,x+1]$ \u8fd9\u4e24\u5217\uff0c\u4f1a\u5f71\u54cd\u5230\u7684\u6700\u5c0f\u7ebf\u6bb5\u6811\u8282\u70b9\u662f $[l,r]$\uff0c\u5176\u4e2d $x=(l+r)/2=mid$\u3002\u5373 $x$ \u4f5c\u4e3a\u7ebf\u6bb5\u6811\u8282\u70b9\u4e2d\u70b9\u7684\u8282\u70b9\u3002\n\n\u4f1a\u600e\u4e48\u5f71\u54cd\u5462\uff1f\u5176\u5b9e\u5c31\u662fconn\u4f1a\u53d8\uff0c\u7136\u540e\u5c31\u4f1a\u5f71\u54cd\u6574\u4e2a\u8282\u70b9\u7684\u8054\u901a\u6027\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/48702.png)\n\n\u90a3\u4e48\u4fee\u6539\u5b8cconn\u4e4b\u540e\uff0c\u5bf9\u8fd9\u4e2a\u8282\u70b9\u91cd\u65b0pushup\u4e00\u904d\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u91cc\u8d34\u4e2a\u4ee3\u7801\uff1a\n\n```cpp\n//o\uff1a\u8282\u70b9\u7f16\u53f7\uff0cl\uff1a\u5de6\u7aef\u70b9\uff0cr\uff1a\u53f3\u7aef\u70b9\n//p,row\uff1a\u8868\u793a\u4fee\u6539(row+1,p)\u548c(row+1,p+1)\uff0c\u56e0\u4e3a\u7b2c\u4e00\u884c\u5728conn\u662f0\uff0c\u7b2c\u4e8c\u884c\u662f1\n//val\uff1a\u5f00\u8fd8\u662f\u5173\nvoid modify1(int o,int l,int r,int p,int row,bool val){\n\tint mid=(l+r)>>1;\n\tif(mid==p){\t//\u4e2d\u70b9\u5c31\u662fp\n\t\tconn[mid][row]=val;\t//\u4fee\u6539conn\n\t\tpushup(seg[o],seg[o<<1],seg[o<<1|1]);\t//\u91cd\u65b0pushup\n\t\treturn;\n\t}\n\tif(mid>=p) modify1(lson,p,row,val);\t//\u9012\u5f52\u4fee\u6539\n\telse modify1(rson,p,row,val);\n\tpushup(seg[o],seg[o<<1],seg[o<<1|1]);\t//\u66f4\u65b0\n}\n```\n---\n\u6700\u540e\u8fd8\u6709\u8be2\u95ee\u3002\u8be2\u95ee\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u5199\u3002\n```cpp\n//\u8fd4\u56denode\u65b9\u4fbf\u5728\u9012\u5f52\u8def\u4e0a\u5408\u5e76\u5404\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\nnode query(int o,int l,int r,int ql,int qr){\n\tif(l>=ql && r<=qr) return seg[o];\t//\u76f4\u63a5\u8fd4\u56de\n\tint mid=(l+r)>>1;\n\tif(mid<ql) return query(rson,ql,qr);\t//\u4e0d\u9700\u8981\u5de6\u513f\u5b50\n\tif(mid>=qr) return query(lson,ql,qr);\t//\u4e0d\u9700\u8981\u6709\u513f\u5b50\n\tnode ans;\n\tpushup(ans,query(lson,ql,qr),query(rson,ql,qr));\t//\u5de6\u53f3\u513f\u5b50\u5408\u8d77\u6765\n\treturn ans;\n} \n```\n\u7136\u540emain\u91cc\u9762\u5927\u529b\u8ba8\u8bba\u4e00\u4e0b\u662f\u8003\u8651\u7b54\u6848u,d,l,r,p\u8fd8\u662fq\u3002\u4ea4\u4e0a\u53bb\u2026\u2026\n\nWA\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff01\uff01\uff01\uff01\uff01\uff01\n\n\u54e6\u5bf9\u4e86\uff0c\u6211\u4eec\u6765\u6d4b\u7ec4\u6570\u636e\u5427\uff1a\n```plain\n4\nOPEN 1 1 1 2\nOPEN 1 3 1 4\nOPEN 1 1 2 1\nOPEN 2 1 2 2\nOPEN 2 2 2 3\nOPEN 2 3 2 4\nOPEN 1 4 2 4\nASK 1 2 1 3 \nEXIT\n```\n\u7b54\u6848\u660e\u663e\u662fY\u3002\u4f46\u662f\u6211\u4eec\u8f93\u51fa\u4e86N\uff1f\u4e3a\u4ec0\u4e48\uff1f\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u56fe\u753b\u51fa\u6765\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/48703.png)\n\n\u539f\u6765\u5982\u6b64\u3002\u90a3\u4e48\u6c42\u51fa\u4e09\u4e2a\u533a\u95f4\u5927\u529b\u8ba8\u8bba\u4e00\u4e0b\u3002\u5199\u6cd5\u8ddfpushup\u5dee\u4e0d\u591a\uff0c\u5982\u679c\u7406\u89e3\u4e86pushup\u90a3\u4e48\u8fd9\u4e00\u5757\u4e5f\u5e94\u8be5\u4e0d\u96be\u7406\u89e3\u3002\n\n\u76f4\u63a5\u653e\u4ee3\u7801\u5427\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=444444;\n#define lson o<<1,l,mid\n#define rson o<<1|1,mid+1,r\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\n#define MEM(x,v) memset(x,v,sizeof(x))\ninline int read(){\n\tchar ch=getchar();int x=0,f=0;\n\twhile(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n\twhile(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn f?-x:x;\n}\nstruct node{\n\tint lft,rig;\n\tbool l,r,u,d,p,q;\n}seg[maxn];\t//\u8282\u70b9\nint n;\nbool conn[maxn][2];\nvoid pushup(node &x,node l,node r){\n\tx.lft=l.lft;\n\tx.rig=r.rig;\n\tx.l=l.l|(l.u&conn[l.rig][0]&r.l&conn[l.rig][1]&l.d);\n\tx.r=r.r|(r.u&conn[l.rig][0]&l.r&conn[l.rig][1]&r.d);\n\tx.u=(l.u&conn[l.rig][0]&r.u)|(l.p&conn[l.rig][1]&r.q);\n\tx.d=(l.d&conn[l.rig][1]&r.d)|(l.q&conn[l.rig][0]&r.p);\n\tx.p=(l.u&conn[l.rig][0]&r.p)|(l.p&conn[l.rig][1]&r.d);\n\tx.q=(l.d&conn[l.rig][1]&r.q)|(l.q&conn[l.rig][0]&r.u);\n}\nvoid build(int o,int l,int r){\t//\u5efa\u6811\n\tif(l==r){\n\t\tseg[o].lft=seg[o].rig=l;\t//\u53f6\u5b50\u8282\u70b9\u5de6\u53f3\u8fb9\u754c\n\t\tseg[o].u=seg[o].d=1;\t//\u5de6\u53f3\u8054\u901a\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lson);build(rson);\n\tpushup(seg[o],seg[o<<1],seg[o<<1|1]);\n}\nvoid modify1(int o,int l,int r,int p,int row,bool val){\t//\u540c\u884c\u4fee\u6539\n\tint mid=(l+r)>>1;\n\tif(mid==p){\n\t\tconn[mid][row]=val;\n\t\tpushup(seg[o],seg[o<<1],seg[o<<1|1]);\n\t\treturn;\n\t}\n\tif(mid>=p) modify1(lson,p,row,val);\n\telse modify1(rson,p,row,val);\n\tpushup(seg[o],seg[o<<1],seg[o<<1|1]);\n}\nvoid modify2(int o,int l,int r,int p,bool val){\t//\u4e0d\u540c\u884c\u4fee\u6539\uff0c\u7b2cp\u5217\n\tif(l==r){\n\t\tseg[o].l=seg[o].r=seg[o].p=seg[o].q=val;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mid>=p) modify2(lson,p,val);\n\telse modify2(rson,p,val);\n\tpushup(seg[o],seg[o<<1],seg[o<<1|1]);\n}\nnode query(int o,int l,int r,int ql,int qr){\t//\u67e5\u8be2\u533a\u95f4[ql,qr]\u7684\u8282\u70b9\n\tif(l>=ql && r<=qr) return seg[o];\n\tint mid=(l+r)>>1;\n\tif(mid<ql) return query(rson,ql,qr);\n\tif(mid>=qr) return query(lson,ql,qr);\n\tnode ans;\n\tpushup(ans,query(lson,ql,qr),query(rson,ql,qr));\n\treturn ans;\n} \nint main(){\n\tn=read();char op[10];\n\tbuild(1,1,n);\n\twhile(~scanf(\"%s\",op) && op[0]!='E'){\n\t\tint a=read(),b=read(),c=read(),d=read();\n\t\tswitch(op[0]){\n\t\t\tcase 'C':\t//\u5173\u8def\n\t\t\t\tif(a==c) modify1(1,1,n,min(b,d),a-1,0);\t//\u540c\u4e00\u884c\n\t\t\t\telse modify2(1,1,n,b,0);\t//\u4e0d\u540c\u884c\n\t\t\t\tbreak;\n\t\t\tcase 'O':\t//\u5f00\u8def\n\t\t\t\tif(a==c) modify1(1,1,n,min(b,d),a-1,1);\n\t\t\t\telse modify2(1,1,n,b,1);\n\t\t\t\tbreak;\n\t\t\tcase 'A':\t//\u8be2\u95ee\n\t\t\t\tif(b>d) swap(a,c),swap(b,d);\t//\u5217\u7f16\u53f7\u5c0f\u7684\u653e\u524d\u9762\n\t\t\t\tnode ans1=query(1,1,n,b,d),ans2=query(1,1,n,1,b),ans3=query(1,1,n,d,n);\t//\u4e09\u6bb5\n\t\t\t\tbool flag=false;\n\t\t\t\tif(a==1){\n\t\t\t\t\tif(c==1){\t//\u5de6\u4e0a\uff0c\u53f3\u4e0a\n\t\t\t\t\t\tif(ans1.u) flag=true;\t//\u76f4\u63a5\u8d70\u4e0a\u9762\n\t\t\t\t\t\tif(ans2.r&ans1.d&ans3.l) flag=true;\t//\u7ed5\u8def\u8d70\n\t\t\t\t\t}\n\t\t\t\t\telse{\t//\u5de6\u4e0a\uff0c\u53f3\u4e0b\n\t\t\t\t\t\tif(ans1.p) flag=true;\t//\u76f4\u63a5\u8d70\n\t\t\t\t\t\tif(ans2.r&ans1.d) flag=true;\t//\u4ece\u5de6\u8fb9\u7ed5\n\t\t\t\t\t\tif(ans3.l&ans1.u) flag=true;\t//\u4ece\u53f3\u8fb9\u7ed5\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(c==1){\t//\u5de6\u4e0b\uff0c\u53f3\u4e0a\n\t\t\t\t\t\tif(ans1.q) flag=true;\t//\u76f4\u63a5\u8d70\n\t\t\t\t\t\tif(ans2.r&ans1.u) flag=true;\t//\u4ece\u5de6\u8fb9\u7ed5\n\t\t\t\t\t\tif(ans3.l&ans1.d) flag=true;\t//\u4ece\u53f3\u8fb9\u7ed5\n\t\t\t\t\t}\n\t\t\t\t\telse{\t//\u5de6\u4e0b\uff0c\u53f3\u4e0b\n\t\t\t\t\t\tif(ans1.d) flag=true;\t//\u76f4\u63a5\u8d70\n\t\t\t\t\t\tif(ans2.r&ans1.u&ans3.l) flag=true;\t//\u7ed5\u8def\u8d70\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tputs(flag?\"Y\":\"N\");\n\t\t}\n\t}\n}\n```\n---\n\u8fd9\u53ef\u80fd\u662f\u6211\u5199\u8fc7\u6700\u8ba4\u771f\u7684\u4e00\u7bc7\u9898\u89e3\u4e86\u3002\n\n\u4e3b\u8981\u8fd8\u662f\u56e0\u4e3a\u8fd9\u9898\u592a\u6709\u610f\u4e49\u4e86\uff0c\u800c\u4e14\u6d1b\u8c37\u4e0a\u9898\u89e3\u6ca1\u51e0\u4e2a\u56fe\uff0c\u6709\u70b9\u96be\u61c2\u2026\u2026\n\n\u5e0c\u671b\u80fd\u5e2e\u5230\u5927\u5bb6\u3002~~\u4e24\u5f00\u82b1\uff0c\u8c22\u8c22\u652f\u6301\u3002~~",
        "postTime": 1547631224,
        "uid": 72118,
        "name": "AThousandSuns",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4246 \u3010[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\n\u53ef\u80fd\u5927\u591a\u6570\u4eba\u770b\u5230\u8fd9\u9898\u5c31\u4e00\u773c\u52a8\u6001\u56fe\u8fde\u901a\u6027\u79d2\u4e86\u3002\n\n\u4f46\u662f\u6211\u53d1\u73b0\u81ea\u5df1\u4e0d\u4f1a\u6572\u52a8\u6001\u56fe\u8fde\u901a\u6027\u2026\u2026\n\n\u4e8e\u662f\uff0c\u63d0\u4f9b\u4e00\u79cd\u79bb\u7ebf\u505a\u6cd5\u3002\n\n\u4ec0\u4e48\uff0cLCT\uff1f\n\nLCT \u591a\u96be\u6253\uff0c\u653e\u4e00\u4e2a**\u66f4\u52a0\u66b4\u529b\u800c\u7b80\u7ea6**\u7684\u79bb\u7ebf\u505a\u6cd5\u3002\n\n---\n### \u601d\u8def\n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\n\n\u8003\u8651\u5230\u6bcf\u6761\u9053\u8def\u90fd\u6709\u4e00\u4e2a**\u5bff\u547d**\uff0c\u5373\u4ece\u67d0\u65f6\u523b\u5230\u67d0\u65f6\u523b\u91cc\u5b58\u5728\uff0c\u6211\u4eec\u5177\u5907\u4e86\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u4e00\u4e2a\u5148\u51b3\u6761\u4ef6\u3002**\u7279\u522b\u7684\uff0c\u5982\u679c\u6700\u540e\u90fd\u6ca1\u6709\u6b7b\uff0c\u6211\u4eec\u6700\u540e\u6740\u6389\u5b83\u3002**\n\n\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a**\u65f6\u5149\u5e8f\u5217**\uff0c\u5373\u67d0\u65f6\u523b\u4e2d\u6709\u7684\u9053\u8def\uff0c\u90a3\u4e48\u5bf9\u6bcf\u6761\u9053\u8def\uff0c\u6211\u4eec**\u5728\u65f6\u5149\u5e8f\u5217\u7684\u67d0\u6bb5\u4e2d\u540c\u65f6\u63d2\u5165**\uff0c\u6700\u540e\u5bf9\u65f6\u5149\u5e8f\u5217\u6bcf\u4e2a\u8be2\u95ee\u70b9\u8fdb\u884c\u67e5\u8be2\u5373\u53ef\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u590d\u6742\u5ea6\u662f $O(nm\\alpha(n))$ \u7684\u3002\n\n~~\u8fd9\u4e0d\u5c31\u66b4\u529b\u5417\u3002~~\n\n\u8003\u8651\u5230\u65f6\u5149\u5e8f\u5217\u53ef\u4ee5\u5f62\u5982\u4e00\u9897 Leafy Tree\uff08\u628a\u5b9e\u9645\u4fe1\u606f\u5b58\u5728\u53f6\u5b50\u8282\u70b9\u7684\u6811\uff09\u7684\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5b83\uff0c\u63d2\u5165\u8fb9\u65f6\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u63d2\u5165\uff0c\u67e5\u8be2\u65f6 dfs \u4e00\u904d\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u4ec0\u4e48\uff0c\u4f60\u95ee\u6211 dfs \u65f6\u600e\u4e48\u7edf\u8ba1\u8d21\u732e\uff1f\n\n\u4f7f\u7528\u5e26\u64a4\u9500\u5e76\u67e5\u96c6\u5373\u53ef\u3002\n\n\u4ec0\u4e48\uff0c\u4f60\u4e0d\u4f1a\u5e26\u64a4\u9500\u5e76\u67e5\u96c6\uff1f\n\n\u5176\u5b9e\u5c31\u662f\u4e0d\u7528\u8def\u5f84\u538b\u7f29\u800c\u7528\u5176\u5b83\u4f18\u5316\uff08\u5982\u6309\u79e9\u5408\u5e76\uff09\u7684\u5e76\u67e5\u96c6\uff0c\u5f00\u6808\u8bb0\u5f55\u4e0b `merge` \u8fc7\u7a0b\uff0c\u64a4\u9500\u64cd\u4f5c\u5c31\u53d6\u6808\u9876\u56de\u9000\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $O(n+m\\log m\\log n)$\u3002\n\n---\n### Code\n\n\u5e26\u64a4\u9500\u5e76\u67e5\u96c6\u4f7f\u7528\u6309\u79e9\u5408\u5e76\u6ca1\u6709\u7cbe\u795e\uff0c\u4ee5\u4e0b\u4ee3\u7801\u5229\u7528 Treap \u7684\u601d\u60f3\uff0c\u5c01\u88c5\u4e86\u4e00\u4e2a `Heap_DSU`\u3002\n\n```cpp\n#include <algorithm>\n#include <map>\n#include <stdio.h>\n#include <vector>\ntypedef long long llt;\ntypedef unsigned uint;typedef unsigned long long ullt;\ntypedef bool bol;typedef char chr;typedef void voi;\ntypedef double dbl;\ntemplate<typename T>bol _max(T&a,T b){return(a<b)?a=b,true:false;}\ntemplate<typename T>bol _min(T&a,T b){return(b<a)?a=b,true:false;}\ntemplate<typename T>T power(T base,T index,T mod){return((index<=1)?(index?base:1):(power(base*base%mod,index>>1,mod)*power(base,index&1,mod)))%mod;}\ntemplate<typename T>T lowbit(T n){return n&-n;}\ntemplate<typename T>T gcd(T a,T b){return b?gcd(b,a%b):a;}\ntemplate<typename T>T lcm(T a,T b){return(a!=0||b!=0)?a/gcd(a,b)*b:(T)0;}\ntemplate<typename T>T exgcd(T a,T b,T&x,T&y){if(!b)return y=0,x=1,a;T ans=exgcd(b,a%b,y,x);y-=a/b*x;return ans;}\ntemplate<typename T,typename Rand>\nclass Heap_DSU\n{\n    private:\n        std::vector<T>Fath,Prior,Hty;\n        T root(T p){return(p==Fath[p])?p:root(Fath[p]);}\n    public:\n        voi build(T n,Rand rng=Rand())\n        {\n            Fath.resize(n),Prior.resize(n),Hty.clear();\n            for(T i=0;i<n;i++)Fath[i]=i,Prior[i]=rng();\n        }\n        bol connected(uint u,uint v){return root(u)==root(v);}\n        bol merge(T u,T v)\n        {\n            if((u=root(u))==(v=root(v)))return Hty.push_back(u),false;\n            if(Prior[u]<Prior[v])std::swap(u,v);\n            return Fath[u]=v,Hty.push_back(u),true;\n        }\n        bol revoke()\n        {\n            if(Hty.empty())return false;\n            T p=Hty.back();Hty.pop_back();\n            if(Fath[p]==p)return false;\n            return Fath[p]=p,true;\n        }\n};\ntypedef std::pair<uint,uint>Pair;\nstruct Seg\n{\n    std::vector<Pair>Way;uint len;Seg*L,*R;\n    voi build(uint n){if((len=n)>1)L=new Seg,R=new Seg,L->build(len>>1),R->build(len-(len>>1));}\n    voi insert(uint l,uint r,Pair p)\n    {\n        if(!l&&r==len){Way.push_back(p);return;}\n        if(l<(len>>1))\n            if(r<=(len>>1))L->insert(l,r,p);\n            else L->insert(l,len>>1,p),R->insert(0,r-(len>>1),p);\n        else R->insert(l-(len>>1),r-(len>>1),p);\n    }\n};\nullt Ra=1;const ullt Rb=10007,Rc=114513;struct rng{uint operator()(){return Ra=Ra*Rb+Rc;}};\nHeap_DSU<uint,rng>U;\nchr C[10];Pair P[114514];uint Op[114514];\nbol Ans[114514];uint t=0;\nuint hash(uint a,bol b){return a<<1|b;}\nstd::map<Pair,uint>M;Seg S;\nvoi dfs(Seg*S,uint cnt)\n{\n    uint k=0;for(auto w:S->Way)U.merge(w.first,w.second),k++;\n    if(S->len==1)\n    {\n        if(!Op[cnt])Ans[t++]=U.connected(P[cnt].first,P[cnt].second);\n    }\n    else dfs(S->L,cnt),dfs(S->R,cnt+S->L->len);\n    while(k--)U.revoke();\n}\nint main()\n{\n    uint n,m=0,r,c;scanf(\"%u%u\",&n),U.build(n<<1);\n    while(scanf(\"%s\",C)==1&&*C!='E')\n    {\n        Op[m]=*C=='A'?0:(*C=='O'?1:2);\n        scanf(\"%u%u\",&r,&c),P[m].first=hash(c-1,r-1);\n        scanf(\"%u%u\",&r,&c),P[m].second=hash(c-1,r-1);\n        if(P[m].first>P[m].second)std::swap(P[m].first,P[m].second);\n        m++;\n    }\n    S.build(m);\n    for(uint i=0;i<m;i++)if(Op[i]==1)M[P[i]]=i;else if(Op[i]==2)S.insert(M[P[i]],i,P[i]),M.erase(P[i]);\n    for(auto w:M)S.insert(w.second,m,w.first);\n    dfs(&S,0);\n    for(uint i=0;i<t;i++)puts(Ans[i]?\"Y\":\"N\");\n    return 0;\n}\n```\n\n---\n### \u4e00\u4e9b\u7ecf\u9a8c / \u975e\u7ecf\u9a8c\n\n\u53ef\u4ee5\u79bb\u7ebf\uff08\u7ecf\u9a8c\uff09\uff1a\n* [SP9576](https://www.luogu.com.cn/problem/SP9576)\n* [SP9577](https://www.luogu.com.cn/problem/SP9577)\n* [loj121](https://loj.ac/p/121)\n* [P2147](https://www.luogu.com.cn/problem/P2147)\n* [P3767](https://www.luogu.com.cn/problem/P3767)\n\n\u5f3a\u5236\u5728\u7ebf\uff08\u975e\u7ecf\u9a8c\uff09\uff1a\n* [loj122](https://loj.ac/p/122)\n* [P5247](https://www.luogu.com.cn/problem/P5247)\n",
        "postTime": 1635674778,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "4246"
    },
    {
        "content": "\u9996\u5148\u8fd9\u9898\u6211\u4eec\u7684\u91cd\u70b9\u5c31\u662f\u5982\u4f55\u5224\u65ad\u4e24\u70b9\u662f\u5426\u80fd\u4e92\u76f8\u5230\u8fbe\u3002\n\n\u5bf9\u4e8e\u4e0b\u56fe\uff0c\u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e0b\u600e\u6837\u624d\u80fd\u4f7f\u70b9\u5bf9\u4e4b\u95f4\u8054\u901a\u3002\n\n![](https://luvwgyx.com/wp-content/uploads/2018/12/\u5835\u585e\u7684\u4ea4\u901a1.png)\n\n\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u82e5\u8981\u4f7f$S_1$\u548c$S_4$\u80fd\u4e92\u76f8\u5230\u8fbe\uff0c\u4e2d\u95f4\u7684$mid-mid+1$\u5148\u4e0d\u7ba1\u5b83\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u53ea\u9700\u8981\u6ee1\u8db3$S_1->S_3$\u548c$S_3->S_4$\u80fd\u901a\u6216\u8005$S_1->S_2$\u548c$S_2->S_4$\u4e4b\u95f4\u80fd\u901a\u90a3\u4e48$S_1$\u548c$S_4$\u5c31\u662f\u80fd\u4e92\u76f8\u5230\u8fbe\u7684\u3002\u90a3\u4e48\u540c\u7406\uff0c\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u5904\u7406\u51fa\u5176\u5b83\u516d\u4e2a\u70b9\u5bf9\u4e4b\u95f4\u7684\u8054\u901a\u5173\u7cfb\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u5408\u5e76\u7684\u5904\u7406\u3002\n\n![](https://luvwgyx.com/wp-content/uploads/2018/12/\u5835\u585e\u7684\u4ea4\u901a3.png)\n\n\u5bf9\u4e8e\u4e0a\u56fe\uff0c\u6211\u4eec\u8981\u5408\u5e76$S_1 - S_4$\u548c$S_1{other} - S_4{other}$\u8fd9\u4e24\u4e2a\u77e9\u9635\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u66f4\u65b0\u8fd9\u4e2a\u5927\u7684\u77e9\u9635\u7684\u4fe1\u606f\u4e86\u3002\n\n\u540c\u6837\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u82e5\u8981\u66f4\u65b0$S_1$\u548c$S_4{other}$\u8fd9\u4e24\u4e2a\u70b9\u7684\u8054\u901a\u5173\u7cfb\uff0c\u90a3\u4e48\u540c\u6837\u6211\u6709\u5f88\u591a\u8d70\u6cd5\uff0c\u4f46\u662f\u4e0d\u7ba1\u600e\u6837\u6211\u90fd\u662f\u8981\u7ecf\u8fc7$S_2->S_1{other}$\u548c$S_4->S_3{other}$\u8fd9\u4e24\u6761\u8fb9\u4e2d\u7684\u4e00\u6761\u7684\uff0c\u800c\u8fd9\u4e9b\u8d70\u6cd5\u4e2d\u6d89\u53ca\u7684\u5176\u5b83\u7684\u8fb9\uff0c\u5728\u6211\u4eec\u5408\u5e76\u524d\u7684\u4e24\u4e2a\u5c0f\u77e9\u5f62\u6211\u4eec\u662f\u7edf\u8ba1\u8fc7\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053$S_2->S_1{other}$\u548c$S_4->S_3{other}$\u8fd9\u4e24\u6761\u8fb9\u662f\u4e0d\u662f\u758f\u901a\u7684\u5c31\u597d\u4e86\u3002\n\n\u5176\u5b9e\u4ece\u4e0a\u9762\u7684\u5206\u6790\u6765\u770b\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u7ebf\u6bb5\u6811\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u516b\u4e2a\u53c2\u6570\u5c31\u53ef\u4ee5\u4e86\uff1a\n\n- $U$\uff1a\u7b2c\u4e00\u884c$S_2->S_1{othe r}$\u662f\u5426\u8054\u901a\n- $D$\uff1a\u7b2c\u4e8c\u884c$S_4->S_3{other }$\u662f\u5426\u8054\u901a\n- $l$\uff1a$S _1$,$S_3$\u662f\u5426\u8054\u901a\n- $r$\uff1a$S_2$,$S_4$\u662f\u5426\u8054\u901a\n- $u$\uff1a$S_1$,$S_2$\u662f\u5426\u8054\u901a\n- $d$\uff1a$S_3$,$S_4$\u662f\u5426\u8054\u901a\n- $q$\uff1a$S_1$,$S_4$\u662f\u5426\u8054\u901a\n- $p$\uff1a$S_3$,$S_2$\u662f\u5426\u8054\u901a\n\n\u7136\u540e\u5408\u5e76\u5c31\u597d\u4e86\uff0c\u5177\u4f53\u7684\u770b\u4ee3\u7801\u5427\u3002\n\n**Code:**\n\n```cpp\n/*Program from Luvwgyx*/\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1e5+10;\nint c,r1,r2,c1,c2;char s[10];\nstruct node{bool U,D,l,r,u,d,p,q;}w[maxn<<2];\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid print(int x){\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)print(x/10);\n    putchar(x%10+'0');\n}\nvoid write(int x){print(x);puts(\"\");}\nstruct Segment_Tree{\n    struct tree{int l,r;}tree[maxn<<2];\n    void merge(node &k,node l,node r){\n        k.l=l.l|(l.u&k.U&r.l&k.D&l.d);\n        k.r=r.r|(r.u&k.U&l.r&k.D&r.d);\n        k.u=(l.u&k.U&r.u)|(l.q&k.D&r.p);\n        k.d=(l.d&k.D&r.d)|(l.p&k.U&r.q);\n        k.q=(l.q&k.D&r.d)|(l.u&k.U&r.q);\n        k.p=(l.p&k.U&r.u)|(l.d&k.D&r.p);\n    }\n    void build(int k,int l,int r){\n        tree[k].l=l;tree[k].r=r;\n        if(l==r){w[k].u=w[k].d=w[k].U=w[k].D=1;return ;}\n        int mid=(l+r)>>1;\n        build(k<<1,l,mid);\n        build(k<<1|1,mid+1,r);\n    }\n    void updater(int k,int x,int t,int val){\n        int l=tree[k].l,r=tree[k].r,mid=(l+r)>>1;\n        if(x==mid){\n            t==1?w[k].U=val:w[k].D=val;\n            merge(w[k],w[k<<1],w[k<<1|1]);\n            return ;\n        }\n        if(x<=mid)updater(k<<1,x,t,val);\n        else updater(k<<1|1,x,t,val);\n        merge(w[k],w[k<<1],w[k<<1|1]);\n    }\n    void updatec(int k,int x,int val){\n        int l=tree[k].l,r=tree[k].r;\n        if(l==r){w[k].l=w[k].r=w[k].p=w[k].q=val;return ;}\n        int mid=(l+r)>>1;\n        if(x<=mid)updatec(k<<1,x,val);\n        else updatec(k<<1|1,x,val);\n        merge(w[k],w[k<<1],w[k<<1|1]);\n    }\n    node find(int k,int s,int t){\n        int l=tree[k].l,r=tree[k].r,mid=(l+r)>>1;\n        if(s<=l&&r<=t)return w[k];\n        if(t<=mid)return find(k<<1,s,t);\n        else if(s>mid)return find(k<<1|1,s,t);\n        else {\n            node ret=w[k];\n            merge(ret,find(k<<1,s,t),find(k<<1|1,s,t));\n            return ret;\n        }\n    }\n}T;\nint main(){\n    c=read();T.build(1,1,c);\n    while(scanf(\"%s\",s)!=EOF){\n        if(s[0]=='E')break;int ans=0;\n        r1=read();c1=read();r2=read();c2=read();\n        if(c1>c2)swap(c1,c2),swap(r1,r2);\n        if(s[0]=='O'){r1==r2?T.updater(1,c1,r1,1):T.updatec(1,c1,1);}\n        if(s[0]=='C'){r1==r2?T.updater(1,c1,r1,0):T.updatec(1,c1,0);}\n        if(s[0]=='A'){\n            node l=T.find(1,1,c1),x=T.find(1,c1,c2),r=T.find(1,c2,c);\n            if (r1==1&&r2==1)ans=x.u|(l.r&x.p)|(x.q&r.l)|(l.r&x.d&r.l);\n            if (r1==1&&r2==2)ans=x.q|(l.r&x.d)|(x.u&r.l)|(l.r&x.p&r.l);\n            if (r1==2&&r2==1)ans=x.p|(l.r&x.u)|(x.d&r.l)|(l.r&x.q&r.l);\n            if (r1==2&&r2==2)ans=x.d|(l.r&x.q)|(x.p&r.l)|(l.r&x.u&r.l);\n            puts(ans?\"Y\":\"N\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1545662431,
        "uid": 43012,
        "name": "Luvwgyx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4246 \u3010[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a\u3011"
    },
    {
        "content": "\u5728\u6821\u7f51\u4e0a\u505a\u9898\u65f6\u53d1\u73b0\u539f\u9898QwQ\u2026\u2026  \n\n\u9898\u89e3\uff1a  \n\n\u8fd9\u5f88\u660e\u663e\u662f\u6c42\u52a8\u6001\u56fe\u7684\u8fde\u901a\u6027\u554a\uff0c\u679c\u65ad\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002  \n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u5c31\u662f\u6309\u65f6\u95f4\u8fdb\u884c\u5206\u6cbb\uff0c\u5229\u7528\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u5408\u5e76/\u5206\u79bb\u64cd\u4f5c\u7ef4\u62a4\u8fde\u901a\u6027\uff0cLOJ\u4f3c\u4e4e\u6709\u4e00\u9053\u975e\u5e38\u597d\u7684\u6a21\u677f\u9898\uff1a[\u300c\u79bb\u7ebf\u53ef\u8fc7\u300d\u52a8\u6001\u56fe\u8fde\u901a\u6027](https://loj.ac/problem/121)\u3002  \n\n\u5269\u4e0b\u7684\u5c31\u662f\u7c98\u677f\u5b50\u4e86\uff0c\u5b58\u50a8\u8fb9\u65f6\u7528map\u7ef4\u62a4\u5373\u53ef\u3002  \n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m log m)$(m\u4e3a\u64cd\u4f5c\u6570)\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m=0;\nstruct T { int l,r;vector <int> id; };T t[400010];\nstruct P { int opt,x,y; };P q[100010];\nstruct S { int x,dep; };S sta[400010];\nmap <int,int> ma[200010];\nchar s[10];\nint fa[200010],dep[200010],top=0;\n\ninline int Max(int x,int y) { return x>y?\tx:y; }\nvoid build(int u,int l,int r) {\n\tt[u].l=l,t[u].r=r; if(l>=r)\treturn ;\n\tint mid=(l+r)>>1; build(u*2,l,mid),build(u*2+1,mid+1,r);\n}\nvoid ins(int u,int l,int r,int w) {\n\tif(l==t[u].l&&r==t[u].r) { t[u].id.push_back(w);return ; }\n\tint mid=(t[u].l+t[u].r)>>1;\n\tif(r<=mid)\tins(u*2,l,r,w); else if(l>mid)\tins(u*2+1,l,r,w);\n\telse\tins(u*2,l,mid,w),ins(u*2+1,mid+1,r,w);\n}\ninline int find(int x) { return x==fa[x]?\tx:find(fa[x]); }\nvoid Union(int x,int y) {\n\tx=find(x),y=find(y); if(x==y)\treturn ;\n\tif(dep[x]<dep[y])\tx^=y,y^=x,x^=y;\n\tfa[y]=x;sta[++top]=(S){y,dep[y]},sta[++top]=(S){x,dep[x]};\n\tdep[x]=Max(dep[x],dep[y]+1);\n}\nvoid dfs(int u) {\n\tint Now=top;\n\tfor(int i=0;i<t[u].id.size();i++)\tUnion(q[t[u].id[i]].x,q[t[u].id[i]].y);\n\tif(t[u].l>=t[u].r) {\n\t\tif(q[t[u].l].opt==3)\n\t\t\tfind(q[t[u].l].x)==find(q[t[u].l].y)?\tputs(\"Y\"):puts(\"N\");\n\t\treturn ;\n\t}\n\tdfs(u*2),dfs(u*2+1);\n\twhile(top>Now)\tfa[sta[top].x]=sta[top].x,dep[sta[top].x]=sta[top].dep,--top;\n}\nint main() {\n\tscanf(\"%d\",&n),build(1,1,100000);\n\tfor(int i=1;i<=n+n;i++)\tfa[i]=i,dep[i]=1;\n\tfor(int i=1;;++i) {\n\t\tscanf(\"%s\",s); if(s[0]=='E')\tbreak;\n\t\tint a,b,c,d,x,y; ++m;\n\t\tscanf(\"%d%d%d%d\",&a,&b,&c,&d),x=(a-1)*n+b,y=(c-1)*n+d;\n\t\tif(x>y)\tx^=y,y^=x,x^=y;\n\t\tq[m].x=x,q[m].y=y;\n\t\tif(s[0]=='O')\tq[m].opt=1,ma[x][y]=i;\n\t\telse if(s[0]=='C')\n\t\t\tins(1,ma[x][y],i-1,i),ma[x].erase(ma[x].find(y)),q[m].opt=2;\n\t\telse\tq[m].opt=3;\n\t}\n\tfor(int i=1;i<=n+n;i++)\n\t\tfor(map<int,int>::iterator it=ma[i].begin();it!=ma[i].end();++it)\n\t\t\tins(1,it->second,m,it->second);\n\tdfs(1);\n\treturn 0;\n}\n```\n",
        "postTime": 1544619933,
        "uid": 41584,
        "name": "daniel14311531",
        "ccfLevel": 7,
        "title": "[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a - \u9898\u89e3"
    },
    {
        "content": "### \u63d0\u4f9b\u4e00\u4e2a\u5728\u7ebf\u7684\u4e0d\u7528\u7ebf\u6bb5\u6811\u7684 `set` \u505a\u6cd5\u3002\n\n\u6211\u5e76\u6ca1\u6709\u628a\u8fd9\u9898\u770b\u4f5c\u5e8f\u5217\u95ee\u9898\uff0c\u800c\u4e00\u76f4\u5728\u56fe\u8bba\u65b9\u9762\u601d\u8003\u8fd9\u9898\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u9898**\u53ea\u6709\u6a2a\u8fb9\u548c\u7ad6\u8fb9**\uff0c\u800c\u4e0d\u662f\u4e00\u822c\u7684\u56fe\u5462\uff1f\u80af\u5b9a\u662f\u6a2a\u8fb9\u548c\u7ad6\u8fb9\u6709\u6027\u8d28\u3002\u4e8e\u662f\u6211\u5728\u6316\u6027\u8d28\u3002\n\n\u6a2a\u8fb9\u5f88\u597d\u5904\u7406\uff0c\u96be\u641e\u7684\u5728\u7ad6\u8fb9\u3002\u4e3a\u4ec0\u4e48**\u7ad6\u8fb9\u90fd\u662f\u7ad6\u76f4\u7684**\uff0c\u800c\u6ca1\u6709\u659c\u7740\u7684\u5462\uff1f\u5f88\u7279\u6b8a\uff0c\u8bb0\u4e0b\u6765\uff0c\u540e\u9762\u6709\u7528\u3002\n\n\u8003\u8651\u56fe\u4e2d\u8fde\u901a\u7684\u4e24\u4e2a\u70b9\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8def\u5f84\u6709\u51e0\u79cd\u60c5\u51b5\u3002\n\n- \u5b83\u4eec\u5728\u540c\u4e00\u884c\u5185\uff0c\u76f4\u63a5\u4ece\u8fd9\u4e00\u884c\u8d70\u8fc7\u53bb\uff1b\n- \u5728\u5b83\u4eec\u4e4b\u95f4\uff0c\u7ecf\u8fc7\u4e00\u4e9b\u7ad6\u8fb9\uff0c\u4e0a\u4e0a\u4e0b\u4e0b\u5730\u8d70\u8fc7\u53bb\uff0c\u5982\u56fe\uff08$1\\rightarrow 10$\uff09\uff1a\n\n![](https://s2.loli.net/2022/07/30/yDPvRHgCxqXYoJt.png)\n\n- \u5176\u4e2d\u4e00\u4e2a\u6216\u4e24\u4e2a\u70b9\uff0c\u5148\u56de\u5934\u8d70\u4e00\u4e9b\uff0c\u7ecf\u8fc7\u4e00\u6761\u7ad6\u8fb9\uff0c\u518d\u5f80\u524d\u8d70\uff0c\u5982\u56fe\uff08$3\\rightarrow 8$\uff09\uff1a\n\n![](https://s2.loli.net/2022/07/30/WLVefPlAMZpxqjK.png)\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u5c06\u540c\u4e00\u884c\u5185\u7684\u4e00\u4e2a\u4e2a\u8fde\u901a\u5757\u770b\u4f5c\u4e00\u6761\u6761\u7ebf\u6bb5\uff0c\u7528\u4e24\u4e2a `set`\uff08\u4ee3\u7801\u4e2d\u53eb `seg[2]`\uff09\u5206\u522b\u7ef4\u62a4\u7b2c\u4e00\u884c\u548c\u7b2c\u4e8c\u884c\u91cc\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u8d77\u70b9\uff0c\u901a\u8fc7 `lower_bound` \u548c `upper_bound` \u5224\u65ad\u540c\u4e00\u884c\u5185\u7684\u4e24\u70b9\u662f\u5426\u5728\u4e00\u6761\u7ebf\u6bb5\u4e2d\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u6709\u4e00\u4e2a\u6027\u8d28\uff1a\u82e5\u4ece\u8d77\u70b9\u5f80\u56de\u8d70\uff0c\u90a3\u4e48**\u4e00\u5b9a\u4f1a\u5728\u7ecf\u8fc7\u7b2c\u4e00\u6761\u7ad6\u8fb9\uff08\u7684\u67d0\u4e2a\u7aef\u70b9\uff09\u65f6\u6cbf\u7740\u7ad6\u8fb9\u8d70\u4e0b\u53bb/\u8d70\u4e0a\u53bb**\u3002\u56e0\u4e3a\u5982\u679c\u8d70\u5230\u4e86\u66f4\u8fdc\u7684\u4e00\u6761\u7ad6\u8fb9\uff0c\u90a3\u4e48\u5728\u56de\u6765\u65f6\uff0c\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u66f4\u8fd1\u7684\u90a3\u6761\u7ad6\u8fb9\u7684\u53e6\u4e00\u4e2a\u7aef\u70b9\uff0c\u6ca1\u5fc5\u8981\u3002\u5982\u56fe\uff08$5\\rightarrow 10$\uff09\uff1a\n\n![](https://s2.loli.net/2022/07/30/6lNZi8pGThgPdKB.png)\n\n\u663e\u7136\u6ca1\u5fc5\u8981\u8d70\u7ea2\u8def\u5f84\u7ed5\u4e00\u5927\u5708\uff0c\u8d70\u84dd\u8def\u5f84\u5c31\u591f\u4e86\u3002\n\n\u6b64\u65f6\u7ad6\u8fb9\u4e00\u5b9a\u7ad6\u76f4\u7684\u4f5c\u7528\u5c31\u51f8\u663e\u51fa\u6765\u4e86\u3002\u53ef\u4ee5\u7528\u53e6\u4e00\u4e2a `set`\uff08\u4ee3\u7801\u4e2d\u53eb `key`\uff09\u5b58\u54ea\u4e9b\u4f4d\u7f6e\u4e0a\u6709\u7ad6\u8fb9\uff0c\u7528 `lower_bound` \u548c `upper_bound` \u627e\u5230\u79bb\u8d77\u70b9\u548c\u7ec8\u70b9\u6700\u8fd1\u7684\u4e00\u6761\u7ad6\u8fb9\u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u628a\u7ad6\u8fb9\u6240\u5728\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u4e24\u4e2a\u70b9\u770b\u4f5c\u540c\u4e00\u4e2a\u70b9\uff08\u79f0\u4f5c\u7ad6\u70b9\uff09\uff0c\u8fd9\u6837\u4e00\u6761\u4e0a\u4e0a\u4e0b\u4e0b\u7684\u8def\u5f84\u5c31\u88ab\u62c6\u5206\u4e86\u5f88\u76f4\u7684\u4e09\u90e8\u5206\uff1a\u8d77\u70b9\u5230\u5de6\u8fb9\u6216\u53f3\u8fb9\u6700\u8fd1\u7684\u7ad6\u70b9\uff1b\u8fd9\u4e2a\u7ad6\u70b9\u7ecf\u8fc7\u4e00\u4e9b\u7ad6\u70b9\uff0c\u5230\u53e6\u4e00\u4e2a\u7ad6\u70b9\uff08\u4e5f\u5fc5\u987b\u662f\u7ec8\u70b9\u5de6\u8fb9\u6216\u53f3\u8fb9\u6700\u8fd1\u7684\u7ad6\u70b9\uff09\uff1b\u53e6\u4e00\u4e2a\u7ad6\u70b9\u5230\u7ec8\u70b9\u3002\n\n\u7b2c\u4e00\u90e8\u5206\u548c\u7b2c\u4e09\u90e8\u5206\u7684\u8def\u5f84\u90fd\u5728\u540c\u4e00\u884c\u5185\uff0c\u53ef\u4ee5\u7528\u4e0a\u9762\u8bf4\u7684 `seg` \u6570\u7ec4\u5224\u65ad\uff1b\u5bf9\u4e8e\u7b2c\u4e8c\u90e8\u5206\uff0c\u5b83\u53ea\u8ddf\u7ad6\u70b9\u6709\u5173\uff0c\u4e8e\u662f\u53ef\u4ee5\u518d\u5f00\u4e00\u4e2a `set`\uff08\u4ee3\u7801\u4e2d\u53eb `cant`\uff09\u8868\u793a\u6709\u54ea\u4e9b\u7ad6\u70b9\u4e0e**\u4e0b\u4e00\u4e2a\u7ad6\u70b9\uff0c\u4e5f\u5c31\u662f\u5b83\u5728 `key` \u4e2d\u7684\u540e\u7ee7**\u4e0d\u8fde\u901a\u3002\u67e5\u8be2\u65f6\u7528 `lower_bound` \u548c `upper_bound` \u770b `cant` \u5185\u6709\u6ca1\u6709\u5728 \u8d77\u70b9\u7684\u7ad6\u70b9 \u4e0e \u7ec8\u70b9\u7684\u7ad6\u70b9 \u4e4b\u95f4\u7684\u70b9\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u52a0\u8fb9\u548c\u5220\u8fb9\uff0c\u4e0d\u96be\u53d1\u73b0\u6bcf\u6b21\u64cd\u4f5c\u53ea\u4f1a\u5bf9\u4e00\u4e2a\u7ad6\u70b9\u4ea7\u751f\u5f71\u54cd\uff0c\u4e8e\u662f\u76f4\u63a5\u7ef4\u62a4\u8fd9\u56db\u4e2a `set` \u5373\u53ef\u3002\n\n\u5728\u7ebf\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\u3002\n\n[\u4ee3\u7801](/paste/3229zo8h)\u53c8\u81ed\u53c8\u957f\uff0c\u5168\u662f\u5206\u8ba8\u548c `set` \u7684\u64cd\u4f5c\uff0c\u770b\u4e0d\u61c2\u7684\u4f30\u8ba1\u52a0\u4e86\u6ce8\u91ca\u4e5f\u6ca1\u5565\u7528\uff0c\u5c31\u4e0d\u52a0\u4e86\u3002",
        "postTime": 1659660667,
        "uid": 150522,
        "name": "b6e0_",
        "ccfLevel": 9,
        "title": "P4246 [SHOI2008]\u5835\u585e\u7684\u4ea4\u901a \u9898\u89e3"
    },
    {
        "content": "### \u9898\u89e3\n\n\u8fd9\u91cc\u63d0\u4f9b\u51e0\u79cd\u4e0d\u7528\u8111\u5b50\u7684\u7b97\u6cd5~~\uff08\u5f53\u7136\u662f\u79bb\u7ebf\u7684\uff09~~\uff1a\n\n#### $\\text{LCT}$\n\n\u8bb0\u4e0b\u6bcf\u6761\u8fb9\u7684\u5220\u9664\u65f6\u95f4\uff0c\u7528$\\text{LCT}$\u7ef4\u62a4\u6700\u5927\u751f\u6210\u6811\uff0c\u6bcf\u6b21\u52a0\u8fdb\u4e00\u6761\u8fb9\u65f6\uff0c\u8ddf\u539f\u6765\u90a3\u6761\u94fe\u4e0a\u7684\u505a\u6bd4\u8f83\uff0c\u5220\u9664\u90a3\u6761\u5220\u9664\u65f6\u95f4\u6700\u77ed\u7684\u8fb9\u5373\u53ef\u3002\n\n#### \u7ebf\u6bb5\u6811\u5206\u6cbb\n\n\u8fd9\u4e2a\u7b97\u6cd5\u5c06\u6bcf\u6761\u8fb9\u7684\u52a0\u5165\u548c\u5220\u9664\u65f6\u95f4\u52a0\u5165\u5230\u7ebf\u6bb5\u6811\u4e2d\uff0c\u6240\u4ee5\u5728\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\u65f6\uff0c\u90a3\u4e2a\u65f6\u523b\u5b58\u5728\u7684\u8fb9\u90fd\u5df2\u7ecf\u5728\u5e76\u67e5\u96c6\u4e0a\u4e86\uff0c\u4e8e\u662f\u76f4\u63a5\u5224\u65ad\u5373\u53ef\u3002\n\n\u5e76\u67e5\u96c6\u7528\u6309\u79e9\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\uff0c\u64a4\u9500\u65f6\u8bb0\u5f97\u6309\u6808\u5e8f\u64a4\u9500\u3002\n\n### \u4ee3\u7801\n\n\u8fd9\u91cc\u8d34\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#include<vector>\n#include<map>\n#define RG register\n#define clear(x, y) memset(x, y, sizeof(x))\n\ninline int read()\n{\n\tint data = 0, w = 1; char ch = getchar();\n\twhile(ch != '-' && (!isdigit(ch))) ch = getchar();\n\tif(ch == '-') w = -1, ch = getchar();\n\twhile(isdigit(ch)) data = data * 10 + (ch ^ 48), ch = getchar();\n\treturn data * w;\n}\n\nconst int maxn(200010);\nstruct edge { int from, to, beg, end; };\nstd::pair<int, int> q[maxn], stk[maxn << 2];\nstd::vector<edge> e;\nstd::map<int, int> G[maxn];\nint fa[maxn], top, q_num, n, id[2][maxn], cnt, size[maxn];\nchar s[10];\n\ninline int find(int x) { while(x ^ fa[x]) x = fa[x]; return x; }\ninline void merge(int x, int y)\n{\n\tint fx = find(x), fy = find(y);\n\tif(fx == fy) return;\n\tif(size[fx] > size[fy]) std::swap(fx, fy);\n\tfa[fx] = fy; size[fy] += size[fx]; stk[++top] = std::make_pair(fx, fy);\n}\n\ninline void undo()\n{\n\tint x = stk[top].first, y = stk[top--].second;\n\tfa[x] = x; size[y] -= size[x];\n}\n\ninline void Div(int l, int r, std::vector<edge> E)\n{\n\tstd::vector<edge> L, R;\n\tstd::vector<edge>::iterator it;\n\tint mid = (l + r) >> 1, tmp = top;\n\tfor(it = E.begin(); it != E.end(); ++it)\n\t\tif(it -> beg <= l && r <= it -> end) merge(it -> from, it -> to);\n\t\telse\n\t\t{\n\t\t\tif(it -> beg <= mid) L.push_back(*it);\n\t\t\tif(it -> end > mid)  R.push_back(*it);\n\t\t}\n\tif(l == r) printf(\"%c\\n\", find(q[l].first) == find(q[l].second) ? 'Y' : 'N');\n\telse Div(l, mid, L), Div(mid + 1, r, R);\n\twhile(top > tmp) undo();\n}\n\nint main()\n{\n\tn = read();\n\tfor(RG int i = 1; i <= n; i++)\n\t\tid[0][i] = ++cnt, id[1][i] = ++cnt;\n\tfor(RG int r1, c1, r2, c2;;)\n\t{\n\t\tscanf(\"%s\", s);\n\t\tif(s[0] == 'E') break;\n\t\tr1 = read() - 1, c1 = read(), r2 = read() - 1, c2 = read();\n\t\tif(s[0] == 'O')\n\t\t{\n\t\t\te.push_back((edge){id[r1][c1], id[r2][c2], q_num + 1, -1});\n\t\t\tG[id[r1][c1]][id[r2][c2]] = G[id[r2][c2]][id[r1][c1]] = e.size() - 1;\n\t\t}\n\t\telse if(s[0] == 'C') e[G[id[r1][c1]][id[r2][c2]]].end = q_num;\n\t\telse if(s[0] == 'A') q[++q_num] = std::make_pair(id[r1][c1], id[r2][c2]);\n\t}\n\tfor(std::vector<edge>::iterator it = e.begin(); it != e.end(); ++it)\n\t\tif(it -> end == -1) it -> end = q_num;\n\tfor(RG int i = 1; i <= n + n; i++) fa[i] = i, size[i] = 1;\n\tDiv(1, q_num, e);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1547001489,
        "uid": 46800,
        "name": "xgzc",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4246 \u3010[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u91cc\u7ebf\u6bb5\u6811\u5408\u5e76\u7ed3\u70b9\u7684\u505a\u6cd5\u90fd\u662f\n\n## \u5927\u529b\u8ba8\u8bba\u8054\u901a\u60c5\u51b5\n\n\u6211\u5c31\u5f88\u4e0d\u723d\u3002\u3002\u4e3a\u4ec0\u4e48\u4e0d\u4e0a $\\color{red}\\text{\u5e76\u67e5\u96c6}$ \u5462\uff1f\n\n\u6211\u4eec\u5728\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5f00\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u4ee3\u66ff\u90a3\u4e00\u5806\u6570\u7ec4\u548c\u53d8\u91cf\u4ec0\u4e48\u7684\u3002\n\n\u5e76\u67e5\u96c6\u505a\u6cd5\u7684\u4f18\u70b9\u5728\u4e8e\n\n1. \u4f60\u80fd\u65e0\u8111\u5408\u5e76\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u8003\u8651 $\\color{red}\\text{\u8fde\u901a\u6027\u548c\u5148\u540e\u987a\u5e8f\u4e4b\u95f4\u7684\u4e00\u5806\u5f71\u54cd}$ \uff0c\u6240\u4ee5\u8c03\u8bd5\u7684\u65f6\u5019\u6839\u672c\u4e0d\u7528\u64cd\u5fc3**\u6700\u9ebb\u70e6\u7684**\u8282\u70b9\u5408\u5e76\u90e8\u5206\n\n2. \u6700\u540e\u67e5\u7b54\u6848\u4e5f\u662f\u65e0\u8111\u5408\u5e76\u7136\u540e `Find()` \u4e00\u4e0b\u5c31\u597d\u4e86\n\n3. \u8981\u7ef4\u62a4\u7684\u53d8\u91cf\u5f88\u5c11\u3002~~\u5408\u5e76\u4ee3\u7801\u4e5f\u76f8\u5bf9\u7b80\u6d01~~ \u2190\u60c5\u51b5\u5176\u5b9e\u975e\u5e38\u591a\n\n\u4e0d\u8fc7\u4e00\u53e5\u9898\u5916\u8bdd\uff0c\u6211\u5199\u7684\u8fd8\u662f\u633a\u957f\u7684\uff0c\u4e5f\u8bb8\u662f\u6211\u53d8\u91cf\u540d\u592a\u957f\u7684\u7f18\u6545\uff1f\u6216\u8005\u5e76\u67e5\u96c6\u8fd9\u79cd\u5199\u6cd5\u8981\u8ba8\u8bba\u7684\u60c5\u51b5\u672c\u8eab\u5c31\u6bd4\u5f00\u4e00\u5806\u53d8\u91cf\u90a3\u4e2a\u8981\u591a??\n\n-----\n\n### \u5236\u8868\u7b26\u4e07\u5c81\uff01\n\n\u6211\u662f\u6309\u7167\u6a2a\u5411\u9053\u8def\u5efa\u7684\u6811\uff0c\u7ef4\u62a4\u7684\u533a\u95f4\u957f\u5ea6\u662f $n-1$ \u3002\n\n```plain\n\u250c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2510\n\u25021\u25022\u25023\u25024\u25025\u2502          n=6\n\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518\n```\n\n\n\u5bf9\u4e8e\u4e00\u4e2a`\u683c\u5b50`\uff0c\u7f16\u53f7\u5982\u4e0b:\n\n```plain\n1\u25002\n\u2502 \u2502\n3\u25004\n```\n\n\n\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u5982\u679c\u662f\u6a2a\u5411\u66f4\u65b0\uff0c\u90a3\u9700\u8981\u66f4\u65b0\u5bf9\u5e94\u7684\u4e00\u4e2a\u53f6\u5b50\u3002\u5982\u679c\u7ad6\u5411\u7684\u90a3\u9700\u8981\u66f4\u65b0\u5939\u8d77\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u53f6\u5b50\u3002\n\n```plain\n\u7ad6\u5411\u66f4\u65b0\u8981\u7167\u987e L R \u4e24\u4e2a\u53f6\u5b50\u3002\n\u250c\u2500\u252c\u2500\u2510\n\u2502L\u2502R\u2502\n\u2514\u2500\u2534\u2500\u2518\n```\n\n\u7136\u540e\u8be2\u95ee\u7684\u65f6\u5019\u8981\u5148\u770b\u5728\u504f\u5de6\u7684\u8be2\u95ee\u70b9\u80fd\u4e0d\u80fd\u901a\u8fc7`\u5411\u5de6\u8d70`\u7684\u65b9\u5f0f\u66f4\u65b0`\u7eb5\u5411`\u4e0a\u7684\u8fde\u901a\u6027\uff0c\u7136\u540e\u504f\u53f3\u7684\u8be2\u95ee\u70b9\u4e5f\u540c\u7406\uff0c\u7c7b\u4f3c\u4e8e\u8fd9\u56fe\uff1a\n\n\n```plain\nr1=1 c1=3\nr2=2 c2=5\n\n \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502     |\n \u2502 \u250c\u2500\u252c\u2500\u25cb\u2500\u252c\u2500\u252c\u2500\u2510\n \u2502 \u25021\u25022\u25023\u25024\u25025\u2502\n \u2502 \u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u25cb\u2500\u2518\n \u2502     \u2191\n \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\n```\n\n\n\u8fd8\u6709\u5c31\u662f\u5408\u5e76\u7684\u65f6\u5019\u8981\u628a\u5de6\u53f3\u4e24\u5757\u5408\u5230\u4e00\u8d77\uff0c\u8fd9\u4e2a\u65f6\u5019\u5728\u4e2d\u95f4\u8981\u679a\u4e3e\u597d\u51e0\u79cd\u8d70\u6cd5\uff0c\u7136\u540e\u5c31\u6ca1\u5565\u53ef\u8bb2\u7684\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#define ll long long\nusing namespace std;\n\nint n,m,conn[100010][4];\n\ntemplate<typename int_t>\nvoid readx(int_t& x)\n{\n\tx=0; int_t k=1; char ch=0;\n\twhile (ch<'0' || ch>'9') { ch=getchar(); if (ch=='-') k=-1; }\n\twhile (ch>='0' && ch<='9') { x=x*10+ch-'0'; ch=getchar(); }\n\tx*=k;\n}\n\nint Find(int e,int ds[])\n{\n\tif (e!=ds[e]) ds[e]=Find(ds[e],ds);\n\treturn ds[e];\n}\n\nvoid Merge(int a,int b,int ds[])\n{\n\tds[Find(b,ds)]=Find(a,ds);\n}\n\nnamespace SGT\n{\n\t#define LCH (inx<<1)\n\t#define RCH (inx<<1|1)\n\t\n\tstruct Seg_Tree\n\t{\n\t\tint l,r,mid;\n\t\tint ds[6];\n\t}tree[400010];\n\tint lx,rx;\n\t\n\tSeg_Tree Update(Seg_Tree A,Seg_Tree B)\n\t{\n\t\tSeg_Tree C;\n\t\tC.l=A.l; C.r=B.r; C.mid=(A.l+B.r)>>1;\n\t\tfor (int i=1;i<=4;i++) C.ds[i]=i;\n\t\t\n\t\tif (Find(1,A.ds)==Find(2,A.ds)) C.ds[2]=1;\n\t\tif (Find(3,B.ds)==Find(4,B.ds)) C.ds[4]=3;\n\t\t\n\t\tfor (int i=1;i<=2;i++)\n\t\t\tfor (int j=3;j<=4;j++) if (Find(i,A.ds)==Find(j,A.ds))\n\t\t\t\tfor (int k=3;k<=4;k++) if (Find(j-2,B.ds)==Find(k,B.ds))\n\t\t\t\t\tMerge(i,k,C.ds);\n\t\t\n\t\treturn C;\n\t}\n\t\n\tvoid BuildTree(int inx,int lxx,int rxx)\n\t{\n\t\ttree[inx].l=lxx; tree[inx].r=rxx;\n\t\ttree[inx].mid=(lxx+rxx)>>1;\n\t\tfor (int i=1;i<=4;i++) tree[inx].ds[i]=i;\n\t\tif (lxx==rxx) return;\n\t\tBuildTree(LCH,lxx,tree[inx].mid);\n\t\tBuildTree(RCH,tree[inx].mid+1,rxx);\n\t}\n\t\n\tvoid Upd(int inx)\n\t{\n\t\tif (tree[inx].l==lx && tree[inx].r==lx)\n\t\t{\n\t\t\tmemset(tree[inx].ds,0,sizeof(tree[inx].ds));\n\t\t\tfor (int i=1;i<=4;i++) tree[inx].ds[i]=i;\n\t\t\t\n\t\t\tif (conn[lx][1]) Merge(1,3,tree[inx].ds);\n\t\t\tif (conn[lx][2]) Merge(2,4,tree[inx].ds);\n\t\t\tif (conn[lx][3]) Merge(1,2,tree[inx].ds);\n\t\t\tif (conn[lx+1][3]) Merge(3,4,tree[inx].ds);\n\t\t\treturn;\n\t\t}\n\t\tif (lx<=tree[inx].mid) Upd(LCH);\n\t\telse Upd(RCH);\n\t\ttree[inx]=Update(tree[LCH],tree[RCH]);\n\t}\n\t\n\tSeg_Tree Qry(int inx)\n\t{\n\t\tif (tree[inx].l>=lx && tree[inx].r<=rx) return tree[inx];\n\t\tif (lx>tree[inx].mid) return Qry(RCH);\n\t\telse if (rx<=tree[inx].mid) return Qry(LCH);\n\t\telse return Update(Qry(LCH),Qry(RCH));\n\t}\n\t\n\t#undef LCH\n\t#undef RCH\n};\n\nchar cmd[110];\nint main()\n{\n\treadx(n); SGT::BuildTree(1,1,n-1);\n\t\n\tint c1,r1,c2,r2;\n\twhile (1)\n\t{\n\t\tscanf(\"%s\",cmd+1);\n\t\tif (cmd[1]=='E') return 0;\n\t\treadx(r1); readx(c1); readx(r2); readx(c2);\n\t\t\n\t\tif (cmd[1]=='A')\n\t\t{\n\t\t\tSGT::Seg_Tree tmp,tmp2;\n\t\t\tif (c1==c2) \n\t\t\t{\n\t\t\t\tif (conn[c1][3]) { printf(\"Y\\n\"); continue; }\n\t\t\t\tif (c1>1) \n\t\t\t\t{\n\t\t\t\t\tSGT::lx=1; SGT::rx=c1-1; tmp=SGT::Qry(1);\n\t\t\t\t\tif (Find(3,tmp.ds)==Find(4,tmp.ds)) { printf(\"Y\\n\"); continue; }\n\t\t\t\t}\n\t\t\t\tif (c1<n)\n\t\t\t\t{\n\t\t\t\t\tSGT::lx=c1; SGT::rx=n-1; tmp=SGT::Qry(1);\n\t\t\t\t\tif (Find(1,tmp.ds)==Find(2,tmp.ds)) { printf(\"Y\\n\"); continue; }\n\t\t\t\t}\n\t\t\t\tprintf(\"N\\n\");\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tSGT::lx=min(c1,c2); SGT::rx=max(c1,c2)-1; tmp=SGT::Qry(1);\n\t\t\t\tif (min(c1,c2)>1)\n\t\t\t\t{\n\t\t\t\t\tSGT::lx=1; SGT::rx=min(c1,c2)-1; tmp2=SGT::Qry(1);\n\t\t\t\t\tif (Find(3,tmp2.ds)==Find(4,tmp2.ds)) Merge(1,2,tmp.ds);\n\t\t\t\t}\n\t\t\t\tif (max(c1,c2)<n)\n\t\t\t\t{\n\t\t\t\t\tSGT::lx=max(c1,c2); SGT::rx=n-1; tmp2=SGT::Qry(1);\n\t\t\t\t\tif (Find(1,tmp2.ds)==Find(2,tmp2.ds)) Merge(3,4,tmp.ds);\n\t\t\t\t}\n\t\t\t\tif (c1<c2) r2+=2;\n\t\t\t\telse r1+=2;\n\t\t\t\tprintf(\"%c\\n\",(Find(r1,tmp.ds)==Find(r2,tmp.ds))?'Y':'N');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (c1==c2) \n\t\t\t{\n\t\t\t\tconn[c1][3]=(cmd[1]=='O');\n\t\t\t\tif (c1>1) { SGT::lx=c1-1; SGT::Upd(1); }\n\t\t\t\tif (c1<n) { SGT::lx=c1; SGT::Upd(1); }\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tconn[min(c1,c2)][r1]=(cmd[1]=='O');\n\t\t\t\tSGT::lx=min(c1,c2); SGT::Upd(1);\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1546742021,
        "uid": 21512,
        "name": "GNAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4246 \u3010[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a\u3011"
    },
    {
        "content": "# \u6d1b\u8c37 P4246 \u9898\u89e3\n\n\n\n[$\\text{Link}$](https://www.luogu.com.cn/problem/P4246)\n\n\n\n## \u601d\u8def\u5206\u6790 \n\n\n\n### I. \u72b6\u6001\u8bbe\u8ba1\n\n\u5927\u529b\u8ba8\u8bba\u8fde\u901a\u6027\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u7684\u56db\u4e2a\u7aef\u70b9\uff08\u5de6\u4e0a\u3001\u5de6\u4e0b\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\uff09\u7ef4\u62a4\u4e24\u4e24\u4e4b\u95f4\u662f\u5426\u8054\u901a\n\n\u5177\u4f53\u72b6\u6001\u8bbe\u8ba1\u5982\u4e0b\uff1a\n\n[![vkWf3Q.png](https://s1.ax1x.com/2022/08/01/vkWf3Q.png)](https://imgtu.com/i/vkWf3Q)\n\n\u6211\u4eec\u7528 $col_{r,c}$ \u7ef4\u62a4 $(r,c),(r,c+1)$ \u4e4b\u95f4\u7684\u8fde\u901a\u6027\uff0c$row_c$ \u7ef4\u62a4 $(1,c),(2,c)$ \u4e4b\u95f4\u7684\u8fde\u901a\u6027 \n\n\n\n---\n\n\n\n### II. \u533a\u95f4\u5408\u5e76\u7ec6\u8282\u5904\u7406\n\n\n\n#### 1. \u533a\u95f4\u5408\u5e76\u66f4\u65b0 $l,r$\n\n\u66f4\u65b0 $l$ \u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u5de6\u533a\u95f4\u76f4\u63a5\u66f4\u65b0\u6216\u8005\u7ed5\u9053\u53f3\u533a\u95f4\u66f4\u65b0\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n[![vkW9fg.png](https://s1.ax1x.com/2022/08/01/vkW9fg.png)](https://imgtu.com/i/vkW9fg)\n\n\u66f4\u65b0 $r$ \u7c7b\u4f3c\uff0c\u53f3\u533a\u95f4\u66f4\u65b0\u6216\u8005\u7ed5\u9053\u5de6\u533a\u95f4\u66f4\u65b0\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n[![vkWPpQ.png](https://s1.ax1x.com/2022/08/01/vkWPpQ.png)](https://imgtu.com/i/vkWPpQ)\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5199\u51fa $l,r$ \u7684\u5408\u5e76\u4ee3\u7801\n\n```cpp\nres.l=(x.l)||(x.u&&col[1][k]&&y.l&&col[2][k]&&x.d);\nres.r=(y.r)||(y.u&&col[1][k]&&x.r&&col[2][k]&&y.d);\n```\n\n\n\n#### 2. \u533a\u95f4\u5408\u5e76\u66f4\u65b0 $u,d$\n\n\u66f4\u65b0 $u$ \u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u4ece\u4e0a\u65b9\u76f4\u63a5\u8d70\u6216\u8005\u7ed5\u9053\u4e0b\u65b9\u8d70\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n[![vkWilj.png](https://s1.ax1x.com/2022/08/01/vkWilj.png)](https://imgtu.com/i/vkWilj)\n\n\u66f4\u65b0 $d$ \u7c7b\u4f3c\uff0c\u4e0b\u9762\u76f4\u63a5\u8d70\u6216\u8005\u7ed5\u9053\u4e0a\u65b9\u8d70\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n[![vkRjmt.png](https://s1.ax1x.com/2022/08/01/vkRjmt.png)](https://imgtu.com/i/vkRjmt)\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5199\u51fa $u,d$ \u7684\u5408\u5e76\u4ee3\u7801\n\n```cpp\nres.u=(x.u&&col[1][k]&&y.u)||(x.x&&col[2][k]&&y.y);\nres.d=(x.d&&col[2][k]&&y.d)||(x.y&&col[1][k]&&y.x);\n```\n\n\n\n#### 3. \u533a\u95f4\u5408\u5e76\u66f4\u65b0 $x,y$\n\n\u66f4\u65b0 $x$ \u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4ece\u4e0a\u65b9\u5230\u53f3\u533a\u95f4\u6216\u4ece\u4e0b\u65b9\u5230\u53f3\u533a\u95f4\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n[![vkWF6s.png](https://s1.ax1x.com/2022/08/01/vkWF6s.png)](https://imgtu.com/i/vkWF6s)\n\n\u66f4\u65b0 $y$ \u7c7b\u4f3c\uff0c\u4ece\u4e0a\u65b9\u8fc7\u6216\u4ece\u4e0b\u65b9\u8fc7\n\n[![vkWkXn.png](https://s1.ax1x.com/2022/08/01/vkWkXn.png)](https://imgtu.com/i/vkWkXn)\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5199\u51fa $x,y$ \u7684\u5408\u5e76\u4ee3\u7801\n\n```cpp\nres.x=(x.u&&col[1][k]&&y.x)||(x.x&&col[2][k]&&y.d);\nres.y=(x.d&&col[2][k]&&y.y)||(x.y&&col[1][k]&&y.u);\n```\n\n\n\n### II. \u4fee\u6539\u64cd\u4f5c\n\n\u5982\u679c\u4fee\u6539\u7684\u662f\u67d0\u4e24\u4e2a\u7eb5\u5411\u76f8\u90bb\u7684\u70b9 $(r,c),(r+1,c)$ \u7684\u8fde\u901a\u6027\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u53f6\u5b50\u8282\u70b9 $c$ \u7136\u540e\u4fee\u6539\u5373\u53ef\n\n\u5982\u679c\u4fee\u6539\u7684\u662f\u67d0\u4e24\u4e2a\u6a2a\u5411\u76f8\u90bb\u7684\u70b9 $(r,c),(r,c+1)$ \u7684\u8fde\u901a\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3 $mid=c$ \u7684\u533a\u95f4\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u533a\u95f4\u91cd\u65b0 pushup \u4e00\u904d\u5373\u53ef\uff0c\u7531\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u7684 $mid$ \u5404\u4e0d\u76f8\u540c\uff0c\u4e14\u4e0d\u5b58\u5728\u67d0\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7684 $mid=n$\uff0c\u6240\u4ee5\u53ef\u4ee5\u653e\u5fc3\u66f4\u65b0\n\n\u5f53\u7136\u4e5f\u53ef\u4ee5\u5c06\u5305\u542b $c,c+1$ \u7684\u533a\u95f4\u5168\u90e8\u66f4\u65b0\u4e00\u904d\uff0c\u4f46\u662f\u5e38\u6570\u7565\u5927\uff0c\u4e0d\u8fc7\u5bf9\u590d\u6742\u5ea6\u6ca1\u6709\u5f71\u54cd\n\n\n\n### III. \u67e5\u8be2\u64cd\u4f5c\n\n\u672c\u9898\u6700\u5927\u5751\u70b9\u5c31\u5728\u4e8e\u8fd9\u91cc\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u6ce8\u610f\u4ece $(r1,c1)$ \u5230 $(r2,c2)$ \u4e0d\u4e00\u5b9a\u53ea\u7ecf\u8fc7\u533a\u95f4 $[c1,c2]$\uff0c\u53ef\u80fd\u4ece\u4e24\u4fa7\u7684\u533a\u95f4\u8f6c\u79fb\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5bf9 $r1,r2$ \u7684\u60c5\u51b5\u5206\u7c7b\u8ba8\u8bba\uff0c\u5bf9\u4e8e\u6bcf\u79cd\u60c5\u51b5\u8ba1\u7b97\u51fa\u7ed5\u8def\u7684\u65b9\u6848\n\n\u4ee5\u4e0b\u5747\u5047\u8bbe $L=\\min(c1,c2),R=\\max(c1,c2)$\uff0c$ok$ \u8868\u793a\u7b54\u6848\n\n#### 1. \u5de6\u4e0a\u5230\u53f3\u4e0a\n\n\u53ef\u4ee5\u4e0d\u7ed5\u8def\uff0c\u4ece\u5de6\u8fb9\u7ed5\u8def\uff0c\u4ece\u53f3\u8fb9\u7ed5\u8def\uff0c\u4ece\u4e24\u8fb9\u7ed5\u8def\uff0c\u5982\u56fe\u6240\u793a\uff08\u865a\u7ebf\u8868\u793a\u4ece\u4e24\u4fa7\u533a\u95f4\u7ed5\u8def\uff09\uff1a\n\n[![vkRxTf.png](https://s1.ax1x.com/2022/08/01/vkRxTf.png)](https://imgtu.com/i/vkRxTf)\n\n\u67e5\u8be2\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nok|=tm.u;\nok|=tl.r&&tm.y;\nok|=tm.x&&tr.l;\nok|=tl.r&&tm.d&&tr.l;\n```\n\n\n\n#### 2. \u5de6\u4e0b\u5230\u53f3\u4e0b\n\n\u540c\u4e0a\uff0c\u56db\u79cd\u65b9\u6cd5\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n[![vkRv0P.png](https://s1.ax1x.com/2022/08/01/vkRv0P.png)](https://imgtu.com/i/vkRv0P)\n\n\u67e5\u8be2\u7801\u5982\u4e0b\uff1a\n\n```\nok|=tm.d;\nok|=tl.r&&tm.x;\nok|=tm.y&&tr.l;\nok|=tl.r&&tm.u&&tr.l;\n```\n\n\n\n#### 3. \u5de6\u4e0a\u5230\u53f3\u4e0b\n\n\u540c\u4e0a\uff0c\u56db\u79cd\u65b9\u6cd5\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n[![vkWSk8.png](https://s1.ax1x.com/2022/08/01/vkWSk8.png)](https://imgtu.com/i/vkWSk8)\n\n\n\n\u67e5\u8be2\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nok|=tm.x;\nok|=tl.r&&tm.d;\nok|=tm.u&&tr.l;\nok|=tl.r&&tm.y&&tr.l;\n```\n\n\n\n#### 4. \u5de6\u4e0b\u5230\u53f3\u4e0a\n\n\u540c\u4e0a\uff0c\u56db\u79cd\u65b9\u6cd5\uff0c\u56db\u79cd\u65b9\u6cd5\uff1a\n\n[![vkWptS.png](https://s1.ax1x.com/2022/08/01/vkWptS.png)](https://imgtu.com/i/vkWptS)\n\n\u67e5\u8be2\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nok|=tm.y;\nok|=tl.r&&tm.u;\nok|=tm.d&&tr.l;\nok|=tl.r&&tm.x&tr.l;\n```\n\n\n\n### IV. \u603b\u7ed3\n\n\u8bbe $Q$ \u4e3a\u64cd\u4f5c\u603b\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta((Q+C)\\log C)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $\\Theta(C)$\n\n> \u603b\u7ed3\uff1a\n>\n> \u8fd9\u9053\u9898\u597d\u50cf\u60f3\u5230\u7ebf\u6bb5\u6811\u5c31\u8fce\u5203\u800c\u89e3\u4e86\uff08\u67e5\u8be2\u7684\u65f6\u5019\u7ed5\u9053\u9664\u5916\uff09\n>\n> \u7ebf\u6bb5\u6811\u89e3\u51b3\u533a\u95f4\u95ee\u9898\u662f\u76f8\u5f53\u65b9\u4fbf\u7684\uff0c\u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u5b8c\u6574\u8be6\u7ec6\n>\n> \u672c\u9898\u66f4\u65b0\u4e24\u4e2a\u76f8\u90bb\u8282\u70b9\u4e4b\u95f4\u4fe1\u606f\u7684 trick \u503c\u5f97\u5b66\u4e60\n\n## \u4ee3\u7801\u5448\u73b0\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1e5+1;\nint n;\nbool row[MAXN],col[3][MAXN];\nstruct node {\n\tbool l,r,u,d,x,y;\n\tnode() { l=r=u=d=x=y=false; }\n};\nclass SegmentTree {\n\tprivate:\n\t\tnode tree[MAXN<<2];\n\t\tinline node merge(node x,node y,int k) {\n\t\t\tnode res;\n\t\t\tres.l=(x.l)||(x.u&&col[1][k]&&y.l&&col[2][k]&&x.d);\n\t\t\tres.r=(y.r)||(y.u&&col[1][k]&&x.r&&col[2][k]&&y.d);\n\t\t\tres.u=(x.u&&col[1][k]&&y.u)||(x.x&&col[2][k]&&y.y);\n\t\t\tres.d=(x.d&&col[2][k]&&y.d)||(x.y&&col[1][k]&&y.x);\n\t\t\tres.x=(x.u&&col[1][k]&&y.x)||(x.x&&col[2][k]&&y.d);\n\t\t\tres.y=(x.d&&col[2][k]&&y.y)||(x.y&&col[1][k]&&y.u);\n\t\t\treturn res;\n\t\t}\n\t\tinline int left(int x) {\n\t\t\treturn x<<1;\n\t\t}\n\t\tinline int right(int x) {\n\t\t\treturn x<<1|1;\n\t\t}\n\t\tinline void pushup(int pos,int mid) {\n\t\t\ttree[pos]=merge(tree[left(pos)],tree[right(pos)],mid);\n\t\t}\n\tpublic:\n\t\tinline void Build(int l=1,int r=n,int pos=1) {\n\t\t\tif(l==r) {\n\t\t\t\ttree[pos].u=tree[pos].d=true;\n\t\t\t\ttree[pos].l=tree[pos].r=false;\n\t\t\t\ttree[pos].x=tree[pos].y=false;\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tint mid=(l+r)>>1;\n\t\t\tBuild(l,mid,left(pos));\n\t\t\tBuild(mid+1,r,right(pos));\n\t\t\tpushup(pos,mid);\n\t\t}\n\t\tinline void ModifyRow(int u,int l=1,int r=n,int pos=1) {\n\t\t\tif(l==r) {\n\t\t\t\ttree[pos].u=tree[pos].d=true;\n\t\t\t\ttree[pos].l=tree[pos].r=row[u];\n\t\t\t\ttree[pos].x=tree[pos].y=row[u];\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(u<=mid) ModifyRow(u,l,mid,left(pos));\n\t\t\telse ModifyRow(u,mid+1,r,right(pos));\n\t\t\tpushup(pos,mid);\n\t\t}\n\t\tinline void ModifyCol(int u,int l=1,int r=n,int pos=1) {\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(u==mid) {\n\t\t\t\tif(l!=r) pushup(pos,mid);\n\t\t\t\treturn ;\n\t\t\t} \n\t\t\tif(u<mid) ModifyCol(u,l,mid,left(pos));\n\t\t\telse ModifyCol(u,mid+1,r,right(pos));\n\t\t\tpushup(pos,mid);\n\t\t}\n\t\tinline node Query(int ql,int qr,int l=1,int r=n,int pos=1) {\n\t\t\tif(ql<=l&&r<=qr) return tree[pos];\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(qr<=mid) return Query(ql,qr,l,mid,left(pos));\n\t\t\tif(mid<ql) return Query(ql,qr,mid+1,r,right(pos));\n\t\t\treturn merge(Query(ql,qr,l,mid,left(pos)),Query(ql,qr,mid+1,r,right(pos)),mid);\n\t\t}\n}\tS;\nsigned main() {\n\tcin>>n;\n\tS.Build();\n\twhile(true) {\n\t\tstring opt;\n\t\tcin>>opt;\n\t\tif(opt==\"Exit\") break;\n\t\tint r1,c1,r2,c2;\n\t\tcin>>r1>>c1>>r2>>c2;\n\t\tif(opt==\"Ask\") {\n\t\t\tif(c1>c2) swap(c1,c2),swap(r1,r2);\n\t\t\tauto tl=S.Query(1,c1),tm=S.Query(c1,c2),tr=S.Query(c2,n);\n\t\t\tbool ok=false;\n\t\t\tif(r1==1&&r2==1) {\n\t\t\t\tok|=tm.u;\n\t\t\t\tok|=tl.r&&tm.y;\n\t\t\t\tok|=tm.x&&tr.l;\n\t\t\t\tok|=tl.r&&tm.d&&tr.l;\n\t\t\t}\n\t\t\tif(r1==2&&r2==2) {\n\t\t\t\tok|=tm.d;\n\t\t\t\tok|=tl.r&&tm.x;\n\t\t\t\tok|=tm.y&&tr.l;\n\t\t\t\tok|=tl.r&&tm.u&&tr.l;\n\t\t\t}\n\t\t\tif(r1==1&&r2==2) {\n\t\t\t\tok|=tm.x;\n\t\t\t\tok|=tl.r&&tm.d;\n\t\t\t\tok|=tm.u&&tr.l;\n\t\t\t\tok|=tl.r&&tm.y&&tr.l;\n\t\t\t}\n\t\t\tif(r1==2&&r2==1) {\n\t\t\t\tok|=tm.y;\n\t\t\t\tok|=tl.r&&tm.u;\n\t\t\t\tok|=tm.d&&tr.l;\n\t\t\t\tok|=tl.r&&tm.x&tr.l;\n\t\t\t}\n\t\t\tif(ok) puts(\"Y\");\n\t\t\telse puts(\"N\");\n\t\t} else {\n\t\t\tbool f;\n\t\t\tif(opt==\"Close\") f=false;\n\t\t\tif(opt==\"Open\") f=true;\n\t\t\tint c=min(c1,c2);\n\t\t\tif(c1==c2) {\n\t\t\t\trow[c]=f;\n\t\t\t\tS.ModifyRow(c);\n\t\t\t} else {\n\t\t\t\tcol[r1][c]=f;\n\t\t\t\tS.ModifyCol(c);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1659355019,
        "uid": 539618,
        "name": "DaiRuiChen007",
        "ccfLevel": 6,
        "title": "\u6d1b\u8c37 P4246 \u9898\u89e3"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p4246-shoi2008%E5%A0%B5%E5%A1%9E%E7%9A%84%E4%BA%A4%E9%80%9A/)\n\n---\n# Solution\n~~\u8fd9\u9898\u7684\u786e\u662f\u6709\u7ebf\u6bb5\u6811\u4e0a\u5927\u5206\u7c7b\u8ba8\u8bba\u7684\u5728\u7ebf\u505a\u6cd5~~\uff0c\u4f46\u662f\u672c\u83dc\u9e21\u8fd8\u662f\u60f3\u4e3b\u8981\u8bb2\u4e00\u4e0b\u79bb\u7ebf\u66b4\u529b\u505a\u6cd5\u3002\n\n.\n\n\u8fd9\u9898\u6211\u4eec\u8003\u8651\u79bb\u7ebf\u4e0b\u6765\u641e\u3002\u79bb\u7ebf\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c**\u67d0\u6761\u8fb9\u4f1a\u5728\u67d0\u4e9b\u8be2\u95ee\u533a\u95f4\u4e2d\u51fa\u73b0\u3002**\n\n\u8003\u8651**\u4ee5\u8be2\u95ee\u7684\u7f16\u53f7\u4e3a\u4e0b\u6807\u5efa\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u6761\u8fb9\u51fa\u73b0\u7684\u65f6\u95f4\u6bb5\u5168\u90e8\u52a0\u5230\u7ebf\u6bb5\u6811\u91cc\u9762\u53bb\u3002**\n\n\u63a5\u4e0b\u6765\uff0c\u76f4\u63a5**\u5728\u7ebf\u6bb5\u6811\u4e0a\u8dd1dfs**,\u6bcf\u5230\u4e00\u4e2a\u533a\u95f4\uff0c\u5c31\u628a\u8fd9\u4e2a\u533a\u95f4\u91cc\u9762\u5b58\u7684\u8fb9\u901a\u901a\u5728\u5e76\u67e5\u96c6\u4e2d\u8fde\u4e0a\uff1b\u6bcf\u5b8c\u6210\u4e00\u4e2a\u533a\u95f4\uff0c\u5c31\u628a\u8fd9\u4e2a\u533a\u95f4\u8fde\u4e0a\u7684\u8fb9\u901a\u901a\u53d6\u6d88\uff08\u7c7b\u4f3c\u4e8e\u56de\u6eaf\uff09\u3002\n\n\u8fd9\u6837\u641e\uff0c\u6211\u4eec\u6bcf\u6b21\u5230\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\u4ee3\u8868\u7684\u8be2\u95ee\u4e0a\u6240\u8981\u8fde\u7684\u8fb9\u4e00\u5b9a\u5df2\u7ecf\u5168\u90e8\u8fde\u4e0a\u4e86\uff0c\u76f4\u63a5\u5728\u5e76\u67e5\u96c6\u4e2d\u67e5\u8be2\u4efb\u610f\u8282\u70b9\u7684\u7236\u4eb2\u7684$size$\u662f\u5426\u4e3a$n$\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u6709\u64a4\u9500\uff08\u56de\u6eaf\uff09\u64cd\u4f5c\uff0c\u56e0\u6b64\u5fc5\u9700\u4f7f\u7528**\u6309\u79e9\u5408\u5e76**\u7684\u5e76\u67e5\u96c6\u3002\u6211\u4eec\u53ea\u9700\u8981\u5f00\u4e00\u4e2a\u6808\uff0c\u628a\u6bcf\u6b21\u4fee\u6539\u7684fa\u7684\u8282\u70b9\u8bb0\u5f55\u4e0b\u6765\u5373\u53ef\u5b8c\u6210\u64a4\u9500\u7684\u64cd\u4f5c\u3002\n\n\u5bf9\u4e8e\u8fb9\u548c\u70b9\uff0c\u6211\u4eec\u5927\u529b\u7f16\u53f7\u4e00\u4e0b\u5373\u53efqwq\u3002\n\n.\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^2n)$ \u5417\uff1f\n\n\u95ee\u9898\u662f\u8fd9\u73a9\u610f\u80fd\u8fc7\u554a.....\n~~\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O($\u80fd\u8fc7$)$~~\n\n\u5c31\u9171\uff0c\u6211\u4eec\u53c8\u5207\u6389\u4e00\u9053\u9898\u5566\u3002(\uff89\uff9f\u2200\uff9f)\uff89 \n\n---\n# Code\n**\u6570\u636e\u751f\u6210\u5668**\n\n[\u5728\u8fd9\u91ccqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p4246-shoi2008%E5%A0%B5%E5%A1%9E%E7%9A%84%E4%BA%A4%E9%80%9A/)\n\n**\u6b63\u89e3**\n```cpp\n//Luogu P4246 [SHOI2008]\u5835\u585e\u7684\u4ea4\u901a\n//Mar,22ed,2019\n//\u7ebf\u6bb5\u6811\u5206\u6cbb\u79bb\u7ebf\u7ef4\u62a4\u52a8\u6001\u56fe\u8fde\u901a\u6027\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=100000+100;\nconst int M=N*4;\nint ans[N];\nstruct UnF\n{\t\n\tint size[N],fa[N],mstack[M],top;\n\tvoid Init(int n)\n\t{\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tsize[i]=1;\n\t}\n\tint FindFather(int x)\n\t{\n\t\tif(fa[x]==0) return x;\n\t\treturn FindFather(fa[x]);\n\t}\n\tvoid Link(int x,int y)\n\t{\n\t\tmstack[++top]=0;\n\t\tint fa_x=FindFather(x),fa_y=FindFather(y);\n\t\tif(size[fa_x]>size[fa_y]) \n\t\t\tswap(x,y),swap(fa_x,fa_y);\n\t\tif(fa_x==fa_y) return;\n\t\tmstack[top]=fa_x;\t\n\t\tfa[fa_x]=fa_y,size[fa_y]+=size[fa_x];\n\t}\n\tint Query(int x,int y)\n\t{\n\t\tif(FindFather(x)==FindFather(y))\n\t\t\treturn true; \n\t\treturn false;\n\t}\n\tvoid Undo()\n\t{\n\t\tif(mstack[top]==0)\n\t\t{\n\t\t\ttop--;\n\t\t\treturn;\n\t\t}\n\t\tsize[fa[mstack[top]]]-=size[mstack[top]];\n\t\tfa[mstack[top]]=0;\n\t\ttop--;\n\t}\n}unf;\nstruct OP\n{\n\tint s,t,id;\n}op[N],op2[M*20],e[M];\nstruct SegmentTree\n{\n\t#define mid ((now_l+now_r)>>1)\n\t#define lson (now<<1)\n\t#define rson (now<<1|1)\n\tvector <int> w[N<<2];\n\tvoid Insert(int l,int r,int x,int now,int now_l,int now_r)\n\t{\n\t\tif(now_l>=l and now_r<=r)\n\t\t{\n\t\t\tw[now].push_back(x);\n\t\t\treturn;\n\t\t}\n\t\tif(l<=mid) Insert(l,r,x,lson,now_l,mid);\n\t\tif(r>mid) Insert(l,r,x,rson,mid+1,now_r);\n\t}\n\tvoid dfs(int now,int now_l,int now_r)\n\t{\n\t\tif(now_l>now_r) return;\n\t\tfor(int i=0;i<int(w[now].size());i++)\n\t\t\tunf.Link(e[w[now][i]].s,e[w[now][i]].t);\n\t\tif(now_l==now_r)\n\t\t\tans[now_l]=unf.Query(op[now_l].s,op[now_l].t);\n\t\telse\n\t\t{\n\t\t\tdfs(lson,now_l,mid);\n\t\t\tdfs(rson,mid+1,now_r);\n\t\t}\n\t\tfor(int i=0;i<int(w[now].size());i++)\n\t\t\tunf.Undo();\n\t}\n\t#undef mid\n\t#undef lson\n\t#undef rson\n}sgt;\nint last[M],n,q,p;//q\u6b21\u8be2\u95ee,p\u4e2a\u533a\u95f4\nbool w[3][N][3];\ninline int GetID(int x,int y,int type)\n{\n\treturn ((y-1)*n+x-1)*3+type;\n}\ninline int GetID2(int x,int y)\n{\n\treturn (y-1)*n+x;\n}\nint main()\n{\n\tfreopen(\"4246.in\",\"r\",stdin);\n\tfreopen(\"4246.out\",\"w\",stdout);\n\t\n\tn=read();\n\tchar OP[10];\n\twhile(1)\n\t{\n\t\tscanf(\"%s\",OP+1);\n\t\tif(OP[1]=='E') break;\n\t\telse if(OP[1]=='O' or OP[1]=='C')\n\t\t{\n\t\t\tint y1=read(),x1=read(),y2=read(),x2=read(),type=1;\n\t\t\tif(OP[1]=='C') type=0;\n\t\t\tif(x1>x2) swap(x1,x2),swap(y1,y2);\n\t\t\tif(y1>y2) swap(x1,x2),swap(y1,y2);\n\t\t\tif(x2==x1+1)\n\t\t\t{\n\t\t\t\tif(w[y1][x1][0]==type) continue;\n\t\t\t\tw[y1][x1][0]=type;\n\t\t\t\ttype=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(w[y1][x1][2]==type) continue;\n\t\t\t\tw[y1][x1][2]=w[y2][x2][1]=type;\n\t\t\t\ttype=2;\n\t\t\t}\n\t\t\t\n\t\t\tif(OP[1]=='O')\n\t\t\t\tlast[GetID(x1,y1,type)]=q+1;\n\t\t\telse\n\t\t\t{\n\t\t\t\top2[++p].s=last[GetID(x1,y1,type)],op2[p].t=q,op2[p].id=GetID(x1,y1,type);\n\t\t\t\tlast[GetID(x1,y1,type)]=0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint y1=read(),x1=read(),y2=read(),x2=read();\n\t\t\top[++q].s=GetID2(x1,y1),op[q].t=GetID2(x2,y2);\n\t\t}\n\t}\n\tfor(int i=0;i<=6*n+100;i++)\n\t\tif(last[i]!=0)\n\t\t\top2[++p].s=last[i],op2[p].t=q,op2[p].id=i;\n\t\t\t\n\tfor(int i=1;i<=2;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tfor(int k=0;k<=2;k++)\n\t\t\t{\n\t\t\t\te[GetID(j,i,k)].s=GetID2(j,i);\n\t\t\t\tif(k==0) e[GetID(j,i,k)].t=GetID2(j+1,i);\n\t\t\t\tif(k==2) e[GetID(j,i,k)].t=GetID2(j,i+1);\n\t\t\t}\n\tunf.Init(n*2+1);\n\tfor(int i=1;i<=p;i++)\n\t\tif(op2[i].s<=op2[i].t)\n\t\t{\n\t\t\tsgt.Insert(op2[i].s,op2[i].t,op2[i].id,1,1,q);\n\t\t\tcerr<<op2[i].s<<\" \"<<op2[i].t<<\" \"<<op2[i].id<<endl;\n\t\t}\n\t\t\n\tsgt.dfs(1,1,q);\n\t\t\t\n\tfor(int i=1;i<=q;i++)\n\t\tif(ans[i]==0)\n\t\t\tprintf(\"N\\n\");\n\t\telse\n\t\t\tprintf(\"Y\\n\");\n\treturn 0;\n}\n\n```\n\n\n\n\n\n",
        "postTime": 1553228281,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4246 \u3010[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u771f\u662f\u4e00\u9053\u975e\u5e38**\u597d**\u7684\u7684\u9898\u76ee\u3002\n\n\u6211\u4eec\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fde\u901a\u6027\u3002\u5206\u522b\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u4e2d\n\n$$[l_1,r_1],[l_1,l_2],[l_1,r_2],[l_2,r_1],[l_2,r_2],[r_1,r_2]$$\n\n\u8fd9\u4e9b\u70b9\u7684\u8fde\u901a\u6027\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u5b9a\u7684\u8ba8\u8bba\u6765\u5f97\u5230 $O(1)$ \u7684\u65b9\u6cd5\u901a\u8fc7\u5b50\u6811\u66f4\u65b0\u4fe1\u606f\uff08\u6709\u4e9b\u590d\u6742\uff0c\u89c1\u4ee3\u7801\uff09\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210\u5355\u70b9\u4fee\u6539\u4e86\u3002\n\n\u8003\u8651\u8be2\u95ee\u64cd\u4f5c\u3002\u6211\u4eec\u53d1\u73b0\u4ece\u70b9 $x_c$ \u8d70\u5230 $y_c$ \u53ef\u80fd\u6709\u56db\u79cd\u60c5\u51b5\uff1a\n\n$$1:x_c\\to y_c$$\n$$2:x_c\\to x_{!c}\\to y_c$$\n$$3:x_c\\to y_{!c}\\to y_c$$\n$$4:x_c\\to x_{!c}\\to y_{!c}\\to y_c$$\n\n\u5176\u4e2d\u6211\u4eec\u4ee4 $!c$ \u8868\u793a\u540c\u4e00\u5217\u7684\u53e6\u4e00\u884c\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5206\u60c5\u51b5\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <fstream>\n#include <cstring>\n#include <cstdlib>\n#include <complex>\n#include <string>\n#include <cstdio>\n#include <vector>\n#include <bitset>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\nusing namespace std;\n\nstruct segment\n{\n\tint l;\n\tint r;\n\tint sum[2];\n\tbool e[3][2];\n};\n\nstruct return_val\n{\n\tbool e[3][2];\n\tbool operator = (const return_val &x)\n\t{\n\t\tfor (int i = 0; i < 3; ++i)\n\t\t{\n\t\t\tfor (int j = 0; j < 2; ++j)\n\t\t\t\te[i][j] = x.e[i][j];\n\t\t}\n\t}\n};\n\nconst int MAXN = 2e5 + 100;\nint n, cnt;\nbool a[MAXN][2];\nsegment tree[MAXN];\n\nvoid pushup(int p)\n{\n\tif (tree[p].l == tree[p].r)\n\t\treturn;\n\tint l = p * 2, r = p * 2 + 1, mid = (tree[p].l + tree[p].r) / 2;\n\tmemset(tree[p].e, 0, sizeof tree[p].e);\n\ttree[p].e[0][0] = (tree[l].e[0][0] && tree[r].e[0][0] && a[mid][0]) || (tree[l].e[0][1] && tree[r].e[1][0] && a[mid][1]);\n\ttree[p].e[0][1] = (tree[l].e[0][0] && tree[r].e[0][1] && a[mid][0]) || (tree[l].e[0][1] && tree[r].e[1][1] && a[mid][1]);\n\ttree[p].e[1][0] = (tree[l].e[1][0] && tree[r].e[0][0] && a[mid][0]) || (tree[l].e[1][1] && tree[r].e[1][0] && a[mid][1]);\n\ttree[p].e[1][1] = (tree[l].e[1][0] && tree[r].e[0][1] && a[mid][0]) || (tree[l].e[1][1] && tree[r].e[1][1] && a[mid][1]);\n\ttree[p].e[2][0] = tree[l].e[2][0] || (tree[p].e[0][1] && tree[p].e[1][1]) || (tree[p].e[0][0] && tree[p].e[1][0]) || (tree[p].e[0][0] && tree[p].e[1][1] && tree[r].e[2][1]) || (tree[l].e[0][0] && tree[l].e[1][1] && tree[r].e[2][0] && a[mid][0] && a[mid][1]);\n\ttree[p].e[2][1] = tree[r].e[2][1] || (tree[p].e[0][0] && tree[p].e[0][1]) || (tree[p].e[1][0] && tree[p].e[1][1]) || (tree[p].e[0][0] && tree[p].e[1][1] && tree[l].e[2][0]) || (tree[r].e[0][0] && tree[r].e[1][1] && tree[l].e[2][1] && a[mid][0] && a[mid][1]);\n}\n\nvoid add_row(int p, int x)\n{\n\tif (tree[p].l == tree[p].r && tree[p].l == x)\n\t\ttree[p].e[0][0] = tree[p].e[0][1] = tree[p].e[1][0] = tree[p].e[1][1] = tree[p].e[2][0] = tree[p].e[2][1] = true;\n\telse if (tree[p].l <= x && tree[p].r >= x)\n\t{\n\t\tint mid = (tree[p].l + tree[p].r) / 2;\n\t\tif (x > mid)\n\t\t\tadd_row(p * 2 + 1, x);\n\t\telse\n\t\t\tadd_row(p * 2, x);\n\t\tpushup(p);\n\t}\n}\n\nvoid sub_row(int p, int x)\n{\n\tif (tree[p].l == tree[p].r && tree[p].l == x)\n\t{\n\t\ttree[p].e[0][0] = tree[p].e[1][1] = true;\n\t\ttree[p].e[1][0] = tree[p].e[0][1] = false;\n\t\ttree[p].e[2][0] = tree[p].e[2][1] = false;\n\t}\n\telse if (tree[p].l <= x && tree[p].r >= x)\n\t{\n\t\tint mid = (tree[p].l + tree[p].r) / 2;\n\t\tif (x > mid)\n\t\t\tsub_row(p * 2 + 1, x);\n\t\telse\n\t\t\tsub_row(p * 2, x);\n\t\tpushup(p);\n\t}\n}\n\nvoid add_column(int p, int x, int c)\n{\n\tif (tree[p].l == tree[p].r && tree[p].l == x)\n\t\ta[x][c] = true, tree[p].sum[c] = 1;\n\telse if (tree[p].l <= x && tree[p].r >= x)\n\t{\n\t\tint mid = (tree[p].l + tree[p].r) / 2;\n\t\tif (x > mid)\n\t\t\tadd_column(p * 2 + 1, x, c);\n\t\telse\n\t\t\tadd_column(p * 2, x, c);\n\t\tpushup(p);\n\t}\n}\n\nvoid sub_column(int p, int x, int c)\n{\n\tif (tree[p].l == tree[p].r && tree[p].l == x)\n\t\ta[x][c] = false, tree[p].sum[c] = 0;\n\telse if (tree[p].l <= x && tree[p].r >= x)\n\t{\n\t\tint mid = (tree[p].l + tree[p].r) / 2;\n\t\tif (x > mid)\n\t\t\tsub_column(p * 2 + 1, x, c);\n\t\telse\n\t\t\tsub_column(p * 2, x, c);\n\t\tpushup(p);\n\t}\n}\n\nvoid open(int l1, int r1, int l2, int r2)\n{\n\tif (l1 == l2)\n\t\tadd_row(1, l1);\n\telse\n\t{\n\t\tif (l1 > l2)\n\t\t\tswap(l1, l2);\n\t\tif (!a[l1][r1])\n\t\t{\n\t\t\tadd_column(1, l1, r1);\n\t\t}\n\t}\n}\n\nvoid close(int l1, int r1, int l2, int r2)\n{\n\tif (l1 == l2)\n\t\tsub_row(1, l1);\n\telse\n\t{\n\t\tif (l1 > l2)\n\t\t\tswap(l1, l2);\n\t\tif (a[l1][r1])\n\t\t\tsub_column(1, l1, r1);\n\t}\n\t\t\n}\n\nreturn_val query_direct(int p, int l, int r)\n{\n\tif (tree[p].l == l && tree[p].r == r)\n\t\treturn (return_val){{tree[p].e[0][0], tree[p].e[0][1], tree[p].e[1][0], tree[p].e[1][1], tree[p].e[2][0], tree[p].e[2][1]}};\n\telse\n\t{\n\t\treturn_val t1, t2;\n\t\tint mid = (tree[p].l + tree[p].r) / 2;\n\t\tif (r > mid)\n\t\t\tt2 = query_direct(p * 2 + 1, max(mid + 1, l), r);\n\t\tif (l <= mid)\n\t\t\tt1 = query_direct(p * 2, l, min(mid, r));\n\t\tif (l > mid)\n\t\t\treturn t2;\n\t\telse if (r <= mid)\n\t\t\treturn t1;\n\t\telse\n\t\t{\n\t\t\treturn_val ret;\n\t\t\tret.e[0][0] = (t1.e[0][0] && t2.e[0][0] && a[mid][0]) || (t1.e[0][1] && t2.e[1][0] && a[mid][1]);\n\t\t\tret.e[0][1] = (t1.e[0][0] && t2.e[0][1] && a[mid][0]) || (t1.e[0][1] && t2.e[1][1] && a[mid][1]);\n\t\t\tret.e[1][0] = (t1.e[1][0] && t2.e[0][0] && a[mid][0]) || (t1.e[1][1] && t2.e[1][0] && a[mid][1]);\n\t\t\tret.e[1][1] = (t1.e[1][0] && t2.e[0][1] && a[mid][0]) || (t1.e[1][1] && t2.e[1][1] && a[mid][1]);\n\t\t\tret.e[2][0] = t1.e[2][0] || (ret.e[0][1] && ret.e[1][1]) || (ret.e[0][0] && ret.e[1][0]) || (ret.e[0][0] && ret.e[1][1] && t2.e[2][1]) || (t1.e[0][0] && t1.e[1][1] && t2.e[2][0] && a[mid][0] && a[mid][1]);\n\t\t\tret.e[2][1] = t2.e[2][1] || (ret.e[0][0] && ret.e[0][1]) || (ret.e[1][0] && ret.e[1][1]) || (ret.e[0][0] && ret.e[1][1] && t1.e[2][0]) || (t2.e[0][0] && t2.e[1][1] && t1.e[2][1] && a[mid][0] && a[mid][1]);\n\t\t\treturn ret;\n\t\t}\n\t\t\t\t\n\t}\n}\n\nint query_left(int l, int r, int c)\n{\n\twhile (l < r)\n\t{\n\t\tint mid = (l + r) / 2;\n\t\treturn_val j = query_direct(1, mid, r);\n\t\tif (j.e[c][c])\n\t\t\tr = mid;\n\t\telse\n\t\t\tl = mid + 1;\n\t}\n\treturn r;\n}\n\nint query_right(int l, int r, int c)\n{\n\twhile (l < r)\n\t{\n\t\tint mid = (l + r + 1) / 2;\n\t\treturn_val j = query_direct(1, l, mid);\n\t\tif (j.e[c][c])\n\t\t\tl = mid;\n\t\telse\n\t\t\tr = mid - 1;\n\t}\n\treturn l;\n}\n\nbool query(int l1, int r1, int l2, int r2)\n{\n\tif (l1 > l2)\n\t{\n\t\tswap(l1, l2);\n\t\tswap(r1, r2);\n\t}\n\treturn_val t = query_direct(1, l1, l2);\n\tif (t.e[r1][r2])\n\t\treturn true;\n\treturn_val t1 = query_direct(1, 1, l1), t2 = query_direct(1, l2, n);\n\tbool ld = t1.e[2][1], rd = t2.e[2][0];\n\tif (ld && t.e[r1 ^ 1][r2])\n\t\treturn true;\n\tif (rd && t.e[r1][r2 ^ 1])\n\t\treturn true;\n\tif (ld && rd && t.e[r1 ^ 1][r2 ^ 1])\n\t\treturn true;\n\treturn false;\n}\n\nvoid build(int p, int l, int r)\n{\n\ttree[p].l = l;\n\ttree[p].r = r;\n\tif (tree[p].l != tree[p].r)\n\t{\n\t\tint mid = (l + r) / 2;\n\t\tbuild(p * 2, l, mid);\n\t\tbuild(p * 2 + 1, mid + 1, r);\n\t}\n\telse\n\t\ttree[p].e[0][0] = tree[p].e[1][1] = true;\n}\n\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin >> n;\n\tbuild(1, 1, n);\n\twhile (true)\n\t{\n\t\tstring s;\n\t\tcin >> s;\n\t\tif (s[0] == 'E')\n\t\t\tbreak;\n\t\tint l1, c1, l2, c2;\n\t\tcin >> c1 >> l1 >> c2 >> l2;\n\t\t--c1;\n\t\t--c2;\n\t\tif (s[0] == 'O')\n\t\t\topen(l1, c1, l2, c2);\n\t\tif (s[0] == 'C')\n\t\t\tclose(l1, c1, l2, c2);\n\t\tif (s[0] == 'A')\n\t\t{\n\t\t\tif (query(l1, c1, l2, c2))\n\t\t\t\tprintf(\"Y\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"N\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1521034194,
        "uid": 25739,
        "name": "scallop",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4246 \u3010[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u67d0\u5929\u7684\u4e00\u4e2a\u8003\u8bd5\u9898\u3002\u7136\u540e\u4e0b\u6765\u770b\u9898\u89e3\uff0c\u611f\u89c9\u601d\u8def\u5927\u6982\u660e\u767d\u4ee5\u540e\u5f00\u59cb\u5199\uff0c\u7ed3\u679c\u8fd8\u662f\u5199\u4e86\u5f88\u957f\u65f6\u95f4\u3002\u3002\u3002\u6211\u89c9\u5f97\u8bc4\u6210**\u9ed1\u9898**\u5e94\u8be5\u95ee\u9898\u4e0d\u5927\n\n---\n\n### \u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58\u7684\u4fe1\u606f\n\n$l,r$:\u5de6\u3001\u53f3\u7aef\u70b9$l$\n\n$luld$:\u4ece\u5de6\u4e0a\u89d2$(l,1)$\u662f\u5426\u80fd\u8fbe\u5230\u5de6\u4e0b\u89d2$(l,2)$\n\n$rurd$:\u4ece\u53f3\u4e0a\u89d2$(r,1)$\u662f\u5426\u80fd\u8fbe\u5230\u53f3\u4e0b\u89d2$(r,2)$\n\n\u5176\u4ed6\u51e0\u4e2a\u7c7b\u4f3c\u5c31\u4e0d\u89e3\u91ca\u4e86\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u8fde\u901a\u6027\uff0c\u662f\u8003\u8651\u7684**\u5728$[l,r]$\u5185\u884c\u8d70\u662f\u5426\u8fde\u901a**\n\n### \u8282\u70b9\u4fe1\u606f\u66f4\u65b0\u7684\u95ee\u9898\n\n\u8fd9\u91cc\u62ff\u4e00\u4e2a\u4e3e\u4f8b\u5b50\uff0c$luld$\u3002\u5176\u4ed6\u7684\u65b9\u6cd5\u5927\u540c\u5c0f\u5f02\u3002\u5982\u679c\u5b9e\u5728\u60f3\u4e0d\u660e\u767d\u53ef\u4ee5\u770b\u770b\u4ee3\u7801\n\n\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u5de6\u4e0b\u89d2\u6709\u4e24\u79cd\u65b9\u6cd5\u3002\n\n1.\u76f4\u63a5\u5728\u5de6\u534a\u90e8\u5206\u8d70\u4e0b\u53bb\u3002\u6545$luld(p<<1)=true$\u53ef\u63a8\u51fa\u4ee5$luld(p)=true$\n\n2.\u7ed5\u5230\u53f3\u534a\u90e8\u5206\uff0c\u7136\u540e\u8d70\u5230\u4e0b\u9762\u53bb\u4ee5\u540e\u8d70\u56de\u6765\u3002\u8fd9\u79cd\u60c5\u51b5\u5f88\u9ebb\u70e6\uff0c\u5b83\u8981\u6c42\u8fd9\u4e9b\u8def\u662f\u8fde\u901a\u7684\n\n\uff081\uff09\u5de6\u534a\u90e8\u5206\u53ef\u4ee5\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0a\u89d2\uff0c\u5373$luru(p<<1)=true$\n\n\uff082\uff09\u4ece\u4e0a\u9762\u53ef\u4ee5\u4ece\u5de6\u534a\u90e8\u5206\u8d70\u5230\u53f3\u534a\u90e8\u5206\u3002\u7531\u4e8e\u8fd9\u53ea\u6d89\u53ca\u5230\u4e00\u6761\u8def\uff0c\u6240\u4ee5\u8fd9\u4e2a\u62ff\u4e00\u4e2a\u6570\u7ec4\u5728\u5916\u9762\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\n\n\uff083\uff09\u53f3\u534a\u90e8\u5206\u53ef\u4ee5\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0b\u89d2\uff0c\u5373$luld(p<<1|1)=true$\n\n\uff084\uff09\u4ece\u4e0b\u9762\u53ef\u4ee5\u4ece\u53f3\u534a\u90e8\u5206\u8d70\u5230\u5de6\u534a\u90e8\u5206\uff0c\u540c\uff082\uff09\n\n\uff085\uff09\u5de6\u534a\u90e8\u5206\u53ef\u4ee5\u4ece\u4e0a\u9762\u4ece\u5de6\u8d70\u5230\u53f3\uff0c\u5373$luru(p<<1)=true$\n\n\u7136\u540e\u5c31\u8fd9\u4e48\u66f4\u65b0\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u8be2\u95ee\u65f6\u7684\u64cd\u4f5c\n\n\u8fd8\u662f\u6709\u5f88\u591a\u60c5\u51b5\u3002\u6bd4\u5982\u6211\u4eec\u8be2\u95ee\u4ece$(1,y_1)$\u662f\u5426\u80fd\u8d70\u5230$(1,y_2)$\u3002\n\n\uff081\uff09\u5728$[y_1,y_2]$\u5185\u5c31\u53ef\u4ee5\u76f4\u63a5\u8d70\u8fc7\u53bb\n\n\uff082\uff09\u8981\u5148\u901a\u8fc7$[1,y_1]$\u8fd9\u4e2a\u90e8\u5206\u8d70\u5230$(2,y_1)$\uff0c\u7136\u540e\u518d\u5728$[y_1,y_2]$\u5185\u8d70\u8fc7\u53bb\n\n\uff083\uff09\u8981\u5148\u901a\u8fc7$[y_2,n]$\u8fd9\u4e2a\u90e8\u5206\u8d70\u5230$(2,y_2)$\uff0c\u7136\u540e\u518d\u5728$[y_1,y_2]$\u5185\u8d70\u8fc7\u53bb\n\n\uff084\uff09\u8981\u5148\u901a\u8fc7$[1,y_1]$\u8fd9\u4e2a\u90e8\u5206\u8d70\u5230$(2,y_1)$\uff0c\u7136\u540e\u518d\u5728$[y_1,y_2]$\u5185\u8d70\u5230$(2,y_2)$\uff0c\u6700\u540e\u901a\u8fc7$[y_2,n]$\u8fd9\u4e2a\u90e8\u5206\u8d70\u5230$(1,y_2)$\n\n\u6240\u4ee5\u67094\u4e2a\u65b9\u6cd5\u5224\u3002\u800c\u5173\u4e8e\u5728\u67d0\u4e2a\u533a\u57df\u5185\u662f\u5426\u80fd\u4ece\u4e00\u4e2a\u89d2\u8d70\u5230\u53e6\u4e00\u4e2a\u89d2\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5408\u5e76\u7ebf\u6bb5\u6811\u89e3\u51b3\u4e86\u3002\n\n### \u603b\u7ed3\n\n\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u4e2a\u9898\u7b97\u6cd5\u9996\u5148\u5c31\u5f88\u96be\u60f3\u5230\uff0c\u5373\u4f7f\u60f3\u5230\u662f\u7ebf\u6bb5\u6811\u4e5f\u6bd4\u8f83\u96be\u60f3\u5230\u7ef4\u62a46\u4e2a\u53d8\u91cf\uff0c\u6700\u540e\u5224\u65ad\u8fde\u901a\u6027\u5f88\u5bb9\u6613\u6389\u60c5\u51b5\uff1b\u7801\u91cf\u5f88\u5927\uff0c\u7136\u540e\u8fd8\u6781\u5bb9\u6613\u72af\u9519\uff08\u5751\u70b9\u5f88\u591a\uff0c\u8be6\u89c1\u4ee3\u7801\uff09\u3002\uff08\u4e3a\u4ec0\u4e48\u8fd9\u4e0d\u662f\u9ed1\u9898\u2026\u2026\uff09\n\n### AC\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nconst int maxn=100010;\nusing namespace std;\n\nint n;\nbool U[maxn],D[maxn];\nstruct SegmentTree\n{\n    int l,r;\n    bool luld,luru,lurd,ldru,ldrd,rurd;\n    #define l(a) tree[a].l\n    #define r(a) tree[a].r\n    #define m(a) ((l(a)+r(a))>>1)\n    #define luld(a) tree[a].luld\n    #define luru(a) tree[a].luru\n    #define lurd(a) tree[a].lurd\n    #define ldru(a) tree[a].ldru\n    #define ldrd(a) tree[a].ldrd\n    #define rurd(a) tree[a].rurd\n}tree[maxn<<2];\n\nvoid Update(int p) ///\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\n{\n    luld(p)=(luld(p<<1) || (luru(p<<1) && ldrd(p<<1) && luld(p<<1|1) && U[m(p)] && D[m(p)]));\n    rurd(p)=(rurd(p<<1|1) || (luru(p<<1|1) && ldrd(p<<1|1) && rurd(p<<1) && U[m(p)] && D[m(p)]));\n    lurd(p)=((luru(p<<1) && U[m(p)] && lurd(p<<1|1)) || ((lurd(p<<1) && D[m(p)] && ldrd(p<<1|1))));\n    ldru(p)=((ldru(p<<1) && U[m(p)] && luru(p<<1|1)) || ((ldrd(p<<1) && D[m(p)] && ldru(p<<1|1))));\n    luru(p)=((luru(p<<1) && U[m(p)] && luru(p<<1|1)) || ((lurd(p<<1) && D[m(p)] && ldru(p<<1|1))));\n    ldrd(p)=((ldru(p<<1) && U[m(p)] && lurd(p<<1|1)) || ((ldrd(p<<1) && D[m(p)] && ldrd(p<<1|1))));\n}\n\nvoid BuildTree(int p,int l,int r)\n{\n    l(p)=l,r(p)=r;\n    if(l==r)\n    {\n        luru(p)=ldrd(p)=true; ///\u8fd9\u662f\u4e00\u4e2a\u5c0f\u5751\n        return;\n    }\n    BuildTree(p<<1,l,m(p));\n    BuildTree(p<<1|1,m(p)+1,r);\n}\n\nvoid Change1(int p,int goal,bool ud,bool oc) ///\u4fee\u6539\u6a2a\u5411\u8fb9\u7684\u4fe1\u606f\n{\n    if(m(p)==goal)\n    {\n        if(ud) U[goal]=oc;\n        else D[goal]=oc;\n        Update(p); ///\u6ce8\u610f\u548c\u4e0b\u9762\u7684Change2\u5bf9\u6bd4\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u4e0b\u9762\u4e00\u4e2a\u4e0d\u7528Update\uff1f\n        return;\n    }\n    Change1((p<<1)+(goal>m(p)),goal,ud,oc);\n    Update(p);\n}\n\nvoid Change2(int p,int goal,bool oc)\n{\n    if(l(p)==r(p))\n    {\n        luld(p)=rurd(p)=lurd(p)=ldru(p)=oc;\n        return;\n    }\n    Change2((p<<1)+(goal>m(p)),goal,oc);\n    Update(p);\n}\n\nSegmentTree Ask(int p,int l,int r) ///\u5408\u5e76\u7ebf\u6bb5\u6811\n{\n    if(l<=l(p) && r>=r(p)) return tree[p];\n    if(r<=m(p)) return Ask(p<<1,l,r);\n    else if(l>m(p)) return Ask(p<<1|1,l,r);\n    else\n    {\n        SegmentTree TMP,x=Ask(p<<1,l,r),y=Ask(p<<1|1,l,r);\n        TMP.luld=(x.luld || (x.luru && x.ldrd && y.luld && U[m(p)] && D[m(p)]));\n        TMP.rurd=(y.rurd || (y.luru && y.ldrd && x.rurd && U[m(p)] && D[m(p)]));\n        TMP.lurd=((x.luru && U[m(p)] && y.lurd) || ((x.lurd && D[m(p)] && y.ldrd)));\n        TMP.ldru=((x.ldru && U[m(p)] && y.luru) || ((x.ldrd && D[m(p)] && y.ldru)));\n        TMP.luru=((x.luru && U[m(p)] && y.luru) || ((x.lurd && D[m(p)] && y.ldru)));\n        TMP.ldrd=((x.ldru && U[m(p)] && y.lurd) || ((x.ldrd && D[m(p)] && y.ldrd)));\n        return TMP;\n    }\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    BuildTree(1,1,n);\n    while(1)\n    {\n        string ss;cin>>ss;\n        if(ss==\"Exit\") break;\n        int ux,uy,vx,vy;\n        scanf(\"%d%d%d%d\",&ux,&uy,&vx,&vy);\n        if(uy>vy) swap(ux,vx),swap(uy,vy);\n        if(ss!=\"Ask\")\n        {\n            if(ux==vx) Change1(1,uy,ux==1,ss[0]=='O');\n            else Change2(1,uy,ss[0]=='O');\n        }\n        else\n        {\n            bool b=false;\n            SegmentTree l=Ask(1,1,uy),m=Ask(1,uy,vy),r=Ask(1,vy,n);\n            if(ux==1 && vx==1)\n            {\n                if(m.luru || (l.rurd && m.ldru) || (r.luld && m.lurd) || (l.rurd && m.ldrd && r.luld)) b=true;\n            }\n            else if(ux==1 && vx==2)\n            {\n                if(m.lurd || (l.rurd && m.ldrd) || (r.luld && m.luru) || (l.rurd && m.ldru && r.luld)) b=true;\n            }\n            else if(ux==2 && vx==1)\n            {\n                if(m.ldru || (l.rurd && m.luru) || (r.luld && m.ldrd) || (l.rurd && m.lurd && r.luld)) b=true;\n            }\n            else if(ux==2 && vx==2)\n            {\n                if(m.ldrd || (l.rurd && m.lurd) || (r.luld && m.ldru) || (l.rurd && m.luru && r.luld)) b=true;\n            }\n            printf(b? \"Y\\n\":\"N\\n\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1541068485,
        "uid": 44580,
        "name": "JMercury",
        "ccfLevel": 7,
        "title": "P4246 [SHOI2008]\u5835\u585e\u7684\u4ea4\u901a"
    },
    {
        "content": "# \u9898\u89e3\n\u672c\u9898\u9898\u89e3\u540c\u6b65\u53d1\u5e03\u4e8e\u6211\u7684\u535a\u5ba2[[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a \u9898\u89e3 | KSkun's Blog](https://ksmeow.moe/traffic_shoi08_sol/)\uff0c\u6b22\u8fce\u6765\u901b~\n## \u8bbe\u8ba1\u53ef\u5408\u5e76\u7684\u72b6\u6001\n\u672c\u9898\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fde\u901a\u6027\u7684\u9898\u76ee\uff0c\u90a3\u4e48\u5fc5\u7136\u8981\u8bbe\u8ba1\u533a\u95f4\u4fe1\u606f\u7684\u5408\u5e76\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u53ef\u5408\u5e76\u7684\u72b6\u6001\u5f88\u6709\u5fc5\u8981\u3002\u8fd9\u91cc\u6211\u7684\u8bbe\u8ba1\u662f\u5bf9\u4e8e\u533a\u95f4[l, r]\u5b58\u50a8(1, l)\u3001(2, l)\u3001(1, r)\u3001(2, r)\u56db\u4e2a\u70b9\u4e24\u4e24\u95f4\u7684\u8fde\u901a\u6027\uff0c\u603b\u5171\u67096\u79cd\uff08\u5373\u5de6\u4e0a\u5de6\u4e0b\u53f3\u4e0a\u53f3\u4e0b\uff09\u3002\u53e6\u5916\u628a\u6a2a\u5411\u9053\u8def\u653e\u5728\u7ebf\u6bb5\u6811\u5916\u9762\u7ba1\u7406\u3002\n\n\u5408\u5e76\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5206\u60c5\u51b5\u8ba8\u8bba\u3002\u4f8b\u5982\u9700\u8981\u7ef4\u62a4\u5de6\u4e0a\u53f3\u4e0b\u8fd9\u4e00\u60c5\u51b5\uff0c\u53ef\u4ee5\u8d70\u7684\u8def\u7ebf\u4e00\u5171\u4e24\u79cd\uff0c\u5982\u4e0b\u56fe\u3002\n![pic1](https://cdn.luogu.com.cn/upload/pic/14769.png)\n\u5c06\u516d\u79cd\u60c5\u51b5\u90fd\u5904\u7406\u5b8c\u6bd5\u5408\u5e76\u5c31\u5b8c\u6210\u4e86\u3002\n\n## \u4fee\u6539\n**\u7ad6\u5411\u9053\u8def\uff1a**\u627e\u5230\u5305\u542b\u8fd9\u6761\u9053\u8def\u7684\u957f\u5ea6\u4e3a1\u7684\u533a\u95f4\uff08\u5373[x, x]\uff09\uff0c\u4fee\u6539\u8be5\u533a\u95f4\u5185\u56db\u79cd\u72b6\u6001\uff08\u5de6\u4e0a\u53f3\u4e0a\u3001\u5de6\u4e0b\u53f3\u4e0b\u6c38\u8fdc\u8fde\u901a\uff09\u5373\u53ef\u3002\n\n**\u6a2a\u5411\u9053\u8def\uff1a**\u7ebf\u6bb5\u6811\u9012\u5f52\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u6709\u4e00\u4e2a\u533a\u95f4\u7684mid\u548cmid+1\u6070\u597d\u662f\u6a2a\u5411\u9053\u8def\u4e24\u7aef\u7684c\u5750\u6807\u65f6\uff0c\u5728\u5916\u90e8\u7ef4\u62a4\u7684\u6a2a\u5411\u9053\u8def\u4fee\u6539\u540e\u66f4\u65b0\u8fd9\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u6a2a\u5411\u9053\u8def\u7684\u5f71\u54cd\u662f\u4ece\u8fd9\u4e2a\u533a\u95f4\u5f00\u59cb\u4ea7\u751f\u7684\u3002\n\n## \u67e5\u8be2\n\u76f4\u63a5\u67e5[c1, c2]\uff1f\u663e\u7136\u4e0d\u884c\uff0c\u56e0\u4e3a\u6709\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff1a\n![pic2](https://cdn.luogu.com.cn/upload/pic/14770.png)\n\u4e0d\u4e00\u5b9a\u76f4\u63a5\u80fd\u5230\uff0c\u4e5f\u8bb8\u8981\u5f80\u5de6\u5f80\u53f3\u7ed5\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u5f97\u8003\u8651\u7ed5\u7684\u60c5\u51b5\u3002\u9664\u4e86[c1, c2]\u4ee5\u5916\uff0c\u8fd8\u8981\u628a[1, c1]\u3001[c2, C]\u4e24\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\u62ff\u5230\uff0c\u67e5c1\u4e0a\u4e0b\u4e24\u70b9\uff0cc2\u4e0a\u4e0b\u4e24\u70b9\uff0c\u518d\u67e5\u8fd94\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fde\u901a\u60c5\u51b5\u3002\n\n## \u603b\u7ed3\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u5f88\u65b0\u5947\u7684\u7528\u6cd5\u3002\u8fd9\u9053\u9898\u7684\u601d\u7ef4\u96be\u5ea6\u5e76\u4e0d\u5927\uff0c\u4f46\u662f\u5b9e\u73b0\u96be\u5ea6\u4e0d\u5c0f\u3002\u4e3b\u8981\u7ec6\u8282\u96c6\u4e2d\u4e8e\u5408\u5e76\u533a\u95f4\u4fe1\u606f\u4e0e\u67e5\u8be2\u7b54\u6848\u7684\u65f6\u5019\u3002\u5199\u8fd9\u4e2a\u9898\u7684\u65f6\u5019\uff0c\u7528\u522b\u4eba\u9898\u89e3\u91cc\u7684\u7a0b\u5e8f\u62cd\u4e86\u597d\u4e45\u624d\u6539\u51fa\u6765\u3002\u603b\u4e4b\u662f\u5f88\u70e6\u4eba\u7684\u5c31\u5bf9\u4e86\u3002\n\n# \u4ee3\u7801\n\u89c1\u535a\u5ba2\u5427\u2026\u592a\u957f\u4e86\u8d34\u51fa\u6765\u5360\u7248\u9762\u3002",
        "postTime": 1519379125,
        "uid": 35795,
        "name": "KSkun",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4246 \u3010[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a\u3011"
    },
    {
        "content": "upd on 2020.8.30\uff1a\u91cd\u6784\u4e86\u6574\u7bc7\u9898\u89e3\u7684\u6392\u7248\n\n------------\n\n\u6b64\u505a\u6cd5\u5e76\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u4f46\u4e5f\u662f\u4e00\u79cd\u601d\u8def\u3002\n\n------------\n\n\u56e0\u4e3a\u6574\u4e2a\u56fe\u53ea\u6709\u4e24\u884c\uff0c\u800c\u4e14\u8981\u52a8\u6001\u7ef4\u62a4\u70b9\u4e4b\u95f4\u7684\u8fde\u901a\u6027\uff0c\u4e8e\u662f\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u5185 \u5de6\u4e0a/\u5de6\u4e0b \u5230 \u53f3\u4e0a/\u53f3\u4e0b \u662f\u5426\u8fde\u901a\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u67e5\u8be2\u8fde\u901a\u6027\u5c31\u884c\u4e86\u3002\n\n\u4f46\u8fd9\u6837\u663e\u7136\u4f1a\u6f0f\u6389\u4e00\u79cd\u60c5\u51b5\uff1a\u53ef\u80fd\u8fd9\u4e24\u4e2a\u70b9\u901a\u8fc7\u533a\u95f4\u5916\u7684\u8fb9\u8fde\u901a\u4e86\uff0c\u4e5f\u5c31\u662f\u7ed5\u4e86\u4e00\u6bb5\u3002\n\n\u8003\u8651\u5148\u628a\u8981\u7ed5\u7684\u90a3\u6bb5\u8d70\u5b8c\uff0c\u4e5f\u5c31\u662f\u628a\u539f\u6765\u8981\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\u5c3d\u91cf\u5411\u4e24\u8fb9\u62d3\u5c55\uff0c\u8d70\u5230\u5c3d\u5934\u4f4d\u7f6e\uff08\u53ef\u4ee5\u53ea\u5728\u67d0\u4e00\u884c\u8d70\uff0c\u4e5f\u53ef\u4ee5\u6362\u884c\u4e00\u76f4\u8d70\u5230\u67d0\u4e2a\u70b9\u6362\u4e0d\u4e86\u4e3a\u6b62\uff09\uff0c\u67e5\u8be2\u65b0\u7684\u4e24\u4e2a\u70b9\u7684\u533a\u95f4\u5185\u662f\u5426\u8fde\u901a\u3002\u5bb9\u6613\u8bc1\u660e\u8fd9\u6837\u5f97\u5230\u7684\u7b54\u6848\u4e5f\u662f\u6b63\u786e\u7684\u3002\n\n\u8d70\u7684\u8fc7\u7a0b\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e0d\u65ad\u53bb\u8df3\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct qj{\n\tint l,r;\n\tbool lt[2][2];//lt[i][j]\u8868\u793a\u7b2ci+1\u884c\u7b2cl\u5ea7\u57ce\u5e02\u662f\u5426\u4e0e\u7b2cj+1\u884c\u7b2cr\u5ea7\u57ce\u5e02\u8fde\u901a\n};\nqj tree[400005];\nbool ro_h[2][100005],ro_l[100005];\nchar s[10];\nint c,r_1,c_1,r_2,c_2;\nvoid csh(int xh,int ll,int rr)\n{\n\ttree[xh].l=ll;tree[xh].r=rr;\n\tif(ll==rr){tree[xh].lt[0][0]=tree[xh].lt[1][1]=true;return;}\n\tint mid=(ll+rr)>>1;\n\tcsh(xh*2,ll,mid);csh(xh*2+1,mid+1,rr);\n}\nvoid xg_h(int xh,int w)\n{\n\tint mid=(tree[xh].l+tree[xh].r)>>1;\n\tif(w<mid)xg_h(xh*2,w);\n\tif(w>mid)xg_h(xh*2+1,w);\n\tfor(int i=0;i<2;i++)\n\t  for(int j=0;j<2;j++)\n\t    tree[xh].lt[i][j]=(tree[xh*2].lt[i][0]&&tree[xh*2+1].lt[0][j]&&ro_h[0][mid])||(tree[xh*2].lt[i][1]&&tree[xh*2+1].lt[1][j]&&ro_h[1][mid]);\n}\nvoid xg_l(int xh,int w)\n{\n\tif(tree[xh].l==tree[xh].r)\n\t{\n\t\ttree[xh].lt[0][1]=tree[xh].lt[1][0]=ro_l[w];\n\t\treturn;\n\t}\n\tint mid=(tree[xh].l+tree[xh].r)>>1;\n\tif(w<=mid)xg_l(xh*2,w);\n\tif(w>mid)xg_l(xh*2+1,w);\n\tfor(int i=0;i<2;i++)\n\t  for(int j=0;j<2;j++)\n\t    tree[xh].lt[i][j]=(tree[xh*2].lt[i][0]&&tree[xh*2+1].lt[0][j]&&ro_h[0][mid])||(tree[xh*2].lt[i][1]&&tree[xh*2+1].lt[1][j]&&ro_h[1][mid]);\n}\nqj ask(int xh,int ll,int rr)\n{\n\tif(ll<=tree[xh].l&&tree[xh].r<=rr)return tree[xh];\n\tint mid=(tree[xh].l+tree[xh].r)>>1;\n\tif(ll<=mid&&rr<=mid)return ask(xh*2,ll,rr);\n\tif(ll>mid&&rr>mid)return ask(xh*2+1,ll,rr);\n\tqj ans,le=ask(xh*2,ll,rr),ri=ask(xh*2+1,ll,rr);\n\tans.l=le.l;ans.r=ri.r;\n\tfor(int i=0;i<2;i++)\n\t  for(int j=0;j<2;j++)\n\t    ans.lt[i][j]=(le.lt[i][0]&&ri.lt[0][j]&&ro_h[0][mid])||(le.lt[i][1]&&ri.lt[1][j]&&ro_h[1][mid]);\n\treturn ans;\n}\nint zy(int xh,int h,int w)\n{\n\tif(w==tree[xh].r)\n\t{\n\t\tif(tree[xh].lt[h][h])\n\t\t{\n\t\t\tif(ro_h[h][tree[xh].l-1])return zy(1,h,tree[xh].l-1);//\u6b64\u65f6\u57ce\u5e02\u53ef\u4ee5\u88ab\u79fb\u5230\u7b2ch+1\u884c\u7b2ctree[xh].l-1\u5ea7\uff0c\u56e0\u4e3a\u53ef\u80fd\u8fd8\u53ef\u4ee5\u5de6\u79fb\uff0c\u6240\u4ee5\u8fdb\u884c\u9012\u5f52\n\t\t\telse return tree[xh].l;//\u6b64\u65f6\u57ce\u5e02\u53ea\u80fd\u88ab\u79fb\u5230tree[xh].l\uff0c\u65e0\u6cd5\u7ee7\u7eed\u5de6\u79fb\n\t\t}\n\t\telse return zy(xh*2+1,h,w);//\u65e0\u6cd5\u5de6\u79fb\uff0c\u9012\u5f52\u53f3\u513f\u5b50\n\t}\n\telse\n\t{\n\t\tint mid=(tree[xh].l+tree[xh].r)>>1;\n\t\tif(w<=mid)return zy(xh*2,h,w);\n\t\telse return zy(xh*2+1,h,w);\n\t}\n}\nint yy(int xh,int h,int w)//\u548c\u5de6\u79fb\u540c\u7406\n{\n\tif(w==tree[xh].l)\n\t{\n\t\tif(tree[xh].lt[h][h])\n\t\t{\n\t\t\tif(ro_h[h][tree[xh].r])return yy(1,h,tree[xh].r+1);\n\t\t\telse return tree[xh].r;\n\t\t}\n\t\telse return yy(xh*2,h,w);\n\t}\n\telse\n\t{\n\t\tint mid=(tree[xh].l+tree[xh].r)>>1;\n\t\tif(w<=mid)return yy(xh*2,h,w);\n\t\telse return yy(xh*2+1,h,w);\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&c);\n\tcsh(1,1,c);\n\tscanf(\"%s\",s);\n\twhile(s[0]!='E')\n\t{\n\t\tscanf(\"%d%d%d%d\",&r_1,&c_1,&r_2,&c_2);\n\t\t--r_1;--r_2;\n\t\tif(c_1>c_2)swap(r_1,r_2),swap(c_1,c_2);\n\t\tif(s[0]=='C')\n\t\t{\n\t\t\tif(r_1==r_2&&c_1+1==c_2)\n\t\t\t{\n\t\t\t\tro_h[r_1][c_1]=false;\n\t\t\t\txg_h(1,c_1);\n\t\t\t}\n\t\t\tif(r_1!=r_2&&c_1==c_2)\n\t\t\t{\n\t\t\t\tro_l[c_1]=false;\n\t\t\t\txg_l(1,c_1);\n\t\t\t}\n\t\t}\n\t\tif(s[0]=='O')\n\t\t{\n\t\t\tif(r_1==r_2&&c_1+1==c_2)\n\t\t\t{\n\t\t\t\tro_h[r_1][c_1]=true;\n\t\t\t\txg_h(1,c_1);\n\t\t\t}\n\t\t\tif(r_1!=r_2&&c_1==c_2)\n\t\t\t{\n\t\t\t\tro_l[c_1]=true;\n\t\t\t\txg_l(1,c_1);\n\t\t\t}\n\t\t}\n\t\tif(s[0]=='A')\n\t\t{\n\t\t\tc_1=zy(1,r_1,c_1);c_2=yy(1,r_2,c_2);\n\t\t\tqj x=ask(1,c_1,c_2);\n\t\t\tif(x.lt[r_1][r_2])printf(\"Y\\n\");\n\t\t\telse printf(\"N\\n\");\n\t\t}\n\t\tscanf(\"%s\",s);\n\t}\n}\n```\n",
        "postTime": 1561814390,
        "uid": 104581,
        "name": "kkk\u7684\u5c0f\u8214\u72d7",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4246 \u3010[SHOI2008]\u5835\u585e\u7684\u4ea4\u901a\u3011"
    }
]