[
    {
        "content": "\u89c1\u5230\u543e\u738b\u5c31\u51b2\u8fc7\u6765\u505a\u4e86\n\n\u5728\u6d1b\u8c37\u8fd9\u4e2a\u73c2\u5b66\u548c$Slay$\u6cdb\u6ee5\u7684\u5730\u65b9\uff0c\u627e\u5230$Fate$\u7684\u8e2a\u5f71\u662f\u591a\u4e48\u4e0d\u5bb9\u6613\u554a\u3010\u5927\u96fe\u3011\n\n\u505a\u6cd5\u5f88\u660e\u663e\uff0c\u5c31\u662f\u6c42\u4e8c\u5206\u56fe\u6700\u5927\u6743\u72ec\u7acb\u96c6\n\n\u54a6\uff0c\u770b\u5230\u8fd9\u4e2a\u540d\u8bcd\u662f\u4e0d\u662f\u6709\u70b9\u773c\u719f\uff1f\n\n\u6000\u7740\u8bd5\u4e00\u8bd5\u7684\u5fc3\u60c5\uff0c\u6211\u70b9\u5f00\u4e86`P2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898`\uff0c\u628a\u90a3\u8fb9\u7684\u4ee3\u7801\u590d\u5236\u4e86\u8fc7\u6765\u2026\u2026\n\n~~\u54a6\uff0c\u600e\u4e48$AC$\u4e86\uff1f~~\n\n~~\u771f\u662f\u610f\u5916\u4e4b\u559c\u554a\uff01\u3010\u9003\u3011~~\n\n\u6240\u4ee5\u8bf4\u8fd9\u9898\u7684\u65b9\u6cd5\u548c\u90a3\u9898\u662f\u4e00\u6837\u7684\u2026\u2026\n\n\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9\u4e3a$0$\uff0c\u8d85\u7ea7\u6c47\u70b9\u4e3a$n*m+1$\uff0c\u5bf9\u70b9\u8fdb\u884c\u67d3\u8272\uff0c\u5947\u6570\u70b9\u8fde\u5411\u6e90\u70b9\uff0c\u5076\u6570\u70b9\u8fde\u5411\u6c47\u70b9\uff0c\u8fb9\u6743\u4e3a$a[i][j]$\uff0c\u7136\u540e\u5947\u6570\u70b9\u5bf9\u5468\u56f4\u7684\u5076\u6570\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a$inf$\uff0c\u6c42\u51fa\u6700\u5c0f\u5272\uff0c\u518d\u7528\u6240\u6709\u70b9\u6743\u503c\u7684\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u5373\u53ef\n\n\u4e00\u5f00\u59cb\u628a\u90a3\u9053\u9898\u7684\u4ee3\u7801\u590d\u5236\u8fc7\u6765\u7136\u540e\u52a0\u5f27\u4f18\u5316$40$\u5206\uff0c\u4ee5\u4e3a\u5361$Dinic$\uff0c\u540e\u6765\u624d\u53d1\u73b0\u628a$Dfs$\u91cc\u7684$flow$\u5199\u6210\u4e86$flow-used$\uff0c\u771f\u662f\u6ca1\u6551\u4e86\u2026\u2026\n\n\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 2147400000\nusing namespace std;\nqueue <int> q;\nint cnt=1,fst[10005],nxt[80005],to[80005],w[80005],cur[10005];\nint n,m,dep[10005],S,T,ans;\nint dx[]={0,-1,0,1,0},dy[]={0,0,-1,0,1};\nvoid AddEdge(int u,int v,int c)\n{\n    to[++cnt]=v;\n    nxt[cnt]=fst[u];\n    fst[u]=cnt;\n    w[cnt]=c;\n}\nbool Bfs()\n{\n    memset(dep,0,sizeof(dep));\n    q.push(S);\n    dep[S]=1;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=fst[u];i;i=nxt[i])\n        {\n            int v=to[i];\n            if(!dep[v] && w[i])\n            {\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dep[T];\n}\nint Dfs(int u,int flow)\n{\n    if(u==T || !flow) return flow;\n    int used=0;\n    for(int i=cur[u];i;i=nxt[i])\n    {\n        cur[u]=i;\n        int v=to[i];\n        if(dep[v]==dep[u]+1 && w[i])\n        {\n            int fl=Dfs(v,min(flow,w[i]));\n            if(fl)\n            {\n                used+=fl;\n                flow-=fl;\n                w[i]-=fl;\n                w[i^1]+=fl;\n                if(!flow) break;\n            }\n        }\n    }\n    return used;\n}\nint Dinic()//\u5f27\u4f18\u5316Dinic\uff0c\u4e0d\u8c08\n{\n    int sum=0;\n    while(Bfs())\n    {\n        memcpy(cur,fst,sizeof(fst));\n        sum+=Dfs(S,inf);\n    }\n    return sum;\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    S=0;\n    T=n*m+1;//\u8bbe\u7f6e\u8d85\u7ea7\u6e90\u70b9\u548c\u6c47\u70b9\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            ans+=x;\n            if((i+j)&1)//\u9488\u5bf9\u5947\u6570\u5076\u6570\u70b9\u4e0d\u540c\u8fde\u8fb9\n            {\n                AddEdge(S,(i-1)*m+j,x);\n                AddEdge((i-1)*m+j,S,0);\n            }\n            else\n            {\n                AddEdge((i-1)*m+j,T,x);\n                AddEdge(T,(i-1)*m+j,0);\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if((i+j)&1)\n            {\n                for(int k=1;k<=4;k++)\n                {\n                    int nx=i+dx[k],ny=j+dy[k];\n                    if(nx<1 || nx>n || ny<1 || ny>m) continue;\n                    AddEdge((i-1)*m+j,(nx-1)*m+ny,inf);\n                    AddEdge((nx-1)*m+ny,(i-1)*m+j,0);//\u548c\u53ef\u5f71\u54cd\u7684\u70b9\u8fde\u8fb9\n                }\n            }\n        }\n    }\n    ans-=Dinic();//\u6c42\u6700\u5c0f\u5272\u5e76\u51cf\u53bb\n    printf(\"%d\",ans);//\u8f93\u51fa\n    return 0;\n}\n```",
        "postTime": 1542792992,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4474 \u3010\u738b\u8005\u4e4b\u5251\u3011"
    },
    {
        "content": "\u5443\uff0c\u8fd9\u9053\u9898\u8fd8\u6ca1\u6709\u9898\u89e3\uff0c\u90a3\u6211\u6765\u6c34\u4e00\u53d1\u3002\n\n\u8ba9\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\uff1a\u963f\u5c14\u6258\u5229\u4e9a\u4e00\u4f46\u9009\u62e9\u4e86\u67d0\u4e00\u683c\u4e0a\u7684\u5b9d\u77f3\uff0c\u90a3\u4e48\u5468\u56f4\u56db\u683c\u5c31\u4e0d\u80fd\u9009\u4e86\u3002\n\u60f3\u5230\u4ec0\u4e48\u6ca1\u6709\uff1f\u5bf9\u2014\u2014\u2014\u2014\n\n\n**\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u9053\u88f8\u7684\u4e8c\u5206\u56fe\u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6\u3002**\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u9ed1\u767d\u67d3\u8272\uff0c\u6309\u6a2a\u7eb5\u5750\u6807\u548c\u5947\u5076\u6027\u7ed9\u70b9\u5206\u7c7b\uff0c\u5efa\u4e2a\u4e8c\u5206\u56fe\u8dd1\u7f51\u7edc\u6d41\uff0c\n\u7136\u540e\u6c42\u51fa\u6700\u5c0f\u5272\uff0c\u518d\u7528\u603b\u6743\u503c\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u884c\u5566\uff01\n\n~~\u849f\u84bb\u8868\u793a\u4e0d\u4f1aKM\uff0c\u4e5f\u4e0d\u4f1aDinic,\u5c31\u80e1\u4e86\u4e2aEK\u4e0a\u53bb\uff0c\u76f8\u4fe1\u5404\u4f4d\u6709\u66f4\u597d\u7684\u6a21\u677f\u3002~~\n\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<queue>\n#include<cstring>\n#define re register\n#define N 10010\nusing namespace std;\nconst int INF=0x7fffffff;\nint n,m,s,t,maxflow=0,tot=1,head[N],mp[N],sum=0,x[N],y[N],Xcnt=0,Ycnt=0;\nbool vis=true,flag[N],inque[N];\nstruct Pre{ int id,last; }pre[N];\nint mx[2]={0,1};int my[2]={1,0};\nstruct Edge{ int to,next,val;}edge[N*20];\ninline int min(int a,int b){ return a<b?a:b; }\ninline void add(int u,int v,int val){\n    edge[++tot]=(Edge){v,head[u],val};head[u]=tot;\n}\ninline bool bfs(){\n    queue<int> q;\n    memset(inque,0,sizeof(inque));\n    memset(pre,-1,sizeof(pre));//\u521d\u59cb\u5316\n    inque[s]=1;q.push(s);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i;i=edge[i].next){\n            int v=edge[i].to;\n            if(!inque[v]&&edge[i].val){\n                pre[v].last=u;\n                pre[v].id=i;//\u8bb0\u5f55\u8def\u5f84\n                if(v==t) return 1;\n                inque[v]=1;\n                q.push(v);\n            }\n        }\n    }\n    return 0;\n}//bfs\u589e\u5e7f\uff08\u591a\u8def\u589e\u5e7f\u90fd\u6ca1\u5199\uff0c\u7adf\u7136\u8fc7\u4e86\uff09\ninline int EK(){\n    int ans=0;\n    while(bfs()){\n        int mi=INF;\n        for(int i=t;i!=s;i=pre[i].last){\n            mi=min(mi,edge[pre[i].id].val);\n        }\n        for(int i=t;i!=s;i=pre[i].last){\n            edge[pre[i].id].val-=mi;\n            edge[pre[i].id^1].val+=mi;\n        }\n        ans+=mi;\n    }//\u7f51\u7edc\u6d41\n    return ans;\n}//\u5783\u573eEK,\u8dd1\u7684\u8d3c\u6162\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(re int i=1;i<=n;++i){\n\t\tfor(re int j=1;j<=m;++j){\n\t\t\tint id=(i-1)*m+j;\n\t\t\tscanf(\"%d\",&mp[id]);\n\t\t\tsum+=mp[id];//\u7d2f\u52a0\u6743\u503c\n\t\t}\n\t}\n\tfor(re int i=1;i<=n;++i){\n\t\tfor(re int j=1;j<=m;++j){\n\t\t\tint uid=(i-1)*m+j;//\u7ed9\u70b9\u7f16\u53f7\n\t\t\tfor(re int k=0;k<2;++k){\n\t\t\t\tint vx=i+mx[k],vy=j+my[k],vid=(vx-1)*m+vy;\n\t\t\t\tif(vx>n||vy>m) continue;\n\t\t\t\tif((i+j)&1){\n\t\t\t\t\tadd(uid,vid,INF);add(vid,uid,0);\n\t\t\t\t\tif(!flag[uid]) x[++Xcnt]=uid,flag[uid]=true;\n\t\t\t\t\tif(!flag[vid]) y[++Ycnt]=vid,flag[vid]=true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tadd(vid,uid,INF);add(uid,vid,0);\n\t\t\t\t\tif(!flag[vid]) x[++Xcnt]=vid,flag[vid]=true;\n\t\t\t\t\tif(!flag[uid]) y[++Ycnt]=uid,flag[uid]=true;\n\t\t\t\t}//\u9ed1\u767d\u67d3\u8272\uff0c\u6309\u6a2a\u7eb5\u5750\u6807\u548c\u5947\u5076\u6027\u5206\u7c7b\n\t\t\t}\n\t\t}\n\t}//\u5efa\u4e8c\u5206\u56fe\n\ts=0;t=n*m+1;\n\tfor(re int i=1;i<=Xcnt;++i) add(s,x[i],mp[x[i]]),add(x[i],s,0);//\u8fde\u6e90\u70b9\n\tfor(re int i=1;i<=Ycnt;++i) add(y[i],t,mp[y[i]]),add(t,y[i],0);//\u8fde\u6c47\u70b9\n\tprintf(\"%d\\n\",sum-EK());//\u6c42\u6700\u5c0f\u5272\uff0c\u7edf\u8ba1\u7b54\u6848\n\treturn 0;\n}\n```\n\n\u6700\u540e\u5e0c\u671b\u6709\u4f1aDinic\u7684\u5927\u4f6c\u80fd\u5e2e\u6211\u67e5\u4e0b\u9519,\u8c22\u8c22\u4e86\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<queue>\n#define re register\n#define N 10010\nusing namespace std;\nconst int INF=0x7fffffff;\nint n,m,s,t,maxflow=0,tot=1,deep[N],cur[N],head[N],mp[N],sum=0,x[N],y[N],Xcnt=0,Ycnt=0;\nbool vis=true,flag[N],inque[N];\nint mx[2]={0,1};int my[2]={1,0};\nstruct Edge{ int to,next,val;}edge[N*20];\ninline int min(int a,int b){ return a<b?a:b; }\ninline void add(int u,int v,int val){ edge[++tot]=(Edge){v,head[u],val};head[u]=tot; }\ninline bool bfs(){\n    for(int i=s;i<=t;i++) cur[i]=head[i],deep[i]=INF,inque[i]=false;\n    queue<int> q;q.push(s);deep[s]=0;inque[s]=true;\n    while(!q.empty()){\n        int u=q.front();q.pop();inque[u]=false;\n        for(int i=head[u];i;i=edge[i].next){\n            int v=edge[i].to;\n            if(deep[v]>deep[u]+1&&edge[i].val){\n                deep[v]=deep[u]+1;\n                if(!inque[v]) q.push(v),inque[v]=true;\n            }\n        }\n    }\n    return deep[t]!=INF;\n}\nint dfs(int u,int low){\n    int rlow=0,used=0;\n    if(u==t){ maxflow+=low;vis=true;return low; }\n    for(int i=cur[u];i;i=edge[i].next){\n        cur[u]=i;int v=edge[i].to;\n        if(edge[i].val&&deep[v]==deep[u]+1){\n            if((rlow=dfs(v,min(low,edge[i].val)))){\n                used+=rlow;\n                edge[i].val-=rlow;\n                edge[i^1].val+=rlow;\n                if(used==low) break;\n            }\n        }\n    }\n    return used;\n}\ninline int Dinic(){\n    while(bfs()){ vis=true;while(vis){ vis=false;dfs(s,INF); } }\n    return maxflow;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            int id=(i-1)*m+j;\n            scanf(\"%d\",&mp[id]);\n            sum+=mp[id];\n        }\n    }\n    for(re int i=1;i<=n;++i){\n        for(re int j=1;j<=m;++j){\n            int uid=(i-1)*m+j;\n            for(re int k=0;k<2;++k){\n                int vx=i+mx[k],vy=j+my[k],vid=(vx-1)*m+vy;\n                if(vx>n||vy>m) continue;\n                if((i+j)&1){\n                    add(uid,vid,INF);add(vid,uid,0);\n                    if(!flag[uid]) x[++Xcnt]=uid,flag[uid]=true;\n                    if(!flag[vid]) y[++Ycnt]=vid,flag[vid]=true;\n                }\n                else{\n                    add(vid,uid,INF);add(uid,vid,0);\n                    if(!flag[vid]) x[++Xcnt]=vid,flag[vid]=true;\n                    if(!flag[uid]) y[++Ycnt]=uid,flag[uid]=true;\n                }\n            }\n        }\n    }\n    s=0;t=n*m+1;\n    for(int i=1;i<=Xcnt;i++) add(s,x[i],mp[x[i]]),add(x[i],s,0);\n    for(int i=1;i<=Ycnt;i++) add(y[i],t,mp[y[i]]),add(t,y[i],0);\n    printf(\"%d\\n\",sum-Dinic());\n    return 0;\n}\n\n```\n",
        "postTime": 1537498305,
        "uid": 86324,
        "name": "pkh68",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4474 \u3010\u738b\u8005\u4e4b\u5251\u3011"
    },
    {
        "content": "### \u89e3\u6790\n\n~~\u5927\u5bb6\u505a\u6cd5\u90fd\u5dee\u4e0d\u591a\u5440\uff0c\u6211\u6765\u7ed9\u4e2a\u8be6\u7ec6\u8bc1\u660e\u5427~~\n\n\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u7684\u67d0\u4e9b ~~\u663e\u7136\u7684~~ \u7279\u6b8a\u6027\u8d28\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ea\u80fd\u5728\u5076\u6570\u79d2\u62ff\u5230\u5b9d\u77f3\u3002\u5947\u6570\u79d2\u8d70\u5230\u7684\u683c\u5b50\u5df2\u7ecf\u88ab\u4e0a\u4e00\u4e2a\u5076\u6570\u79d2\u6e05\u7a7a\u4e86\u3002\n\n\u800c\u4e14\u6211\u4eec\u4e0d\u80fd\u540c\u65f6\u62ff\u5230\u76f8\u90bb\u683c\u5b50\u4e0a\u7684\u4e24\u4e2a\u5b9d\u77f3\u3002\u539f\u56e0\u540c\u4e0a\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u6709\u70b9\u72ec\u7acb\u96c6\u90a3\u5473\u4e86\u3002\u6211\u4eec\u82e5\u662f\u628a\u76f8\u90bb\u7684\u683c\u5b50\u9ed1\u767d\u67d3\u8272\u5e76\u8fde\u4e0a\u8fb9\uff0c\u90a3\u4e48\u6700\u4f18\u65b9\u6848\u9009\u51fa\u6765\u7684\u70b9\u5c31\u7ec4\u6210\u4e00\u4e2a\u72ec\u7acb\u96c6\uff0c\u8fd8\u662f\u4e8c\u5206\u56fe\u7684\u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6\u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u79cd\u5408\u6cd5\u65b9\u6848\u90fd\u53ef\u4ee5\u8f6c\u5316\u8fd9\u4e2a\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u72ec\u7acb\u96c6\u3002\n\n\u4f46\u662f\u6bcf\u4e2a\u72ec\u7acb\u96c6\u90fd\u662f\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848\u5417\uff1f\u8fd9\u53ef\u4e0d\u4e00\u5b9a\u3002\u6211\u4eec\u9700\u8981\u8bc1\u660e\u51fa\u6765\u3002\n\n\u600e\u4e48\u53bb\u8003\u8651\uff1f\u6700\u597d\u7684\u65b9\u6cd5\u662f\u5bf9\u4efb\u610f\u72ec\u7acb\u96c6\u76f4\u63a5\u6784\u9020\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848\u51fa\u6765\u3002\n\n\u6211\u4eec\u5148\u628a\u6bcf\u4e00\u884c\u770b\u505a\u4e00\u4e2a\u9636\u6bb5\uff0c\u7528 \u201cS\u201d \u5f62\u8def\u7ebf\u8bd5\u7740\u6328\u4e2a\u904d\u5386\u6bcf\u4e2a\u9636\u6bb5\u3002\u4ee5\u4e0b\u56fe\u4e00\u4e2a $6\\times 6$ \u7684\u77e9\u9635\u4e3e\u4f8b\n\n![](https://img.imgdb.cn/item/602fa5aae7e43a13c690925e.png)\n\n\u6807\u7070\u8272\u7684\u70b9\u662f\u72ec\u7acb\u96c6\u4e2d\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8981\u53d6\u5230\u7684\u70b9\u3002\n\n\u8fdb\u5165 $A2$ \u65f6\u4e00\u5b9a\u662f\u5076\u6570\u79d2\uff0c\u8fdb\u5165$A3$ \u662f\u5947\u6570\u79d2\uff0c\u8fdb\u5165 $A4$ \u662f\u5076\u6570\u79d2\uff0c\u5982\u679c\u6211\u4eec\u8981\u4fdd\u8bc1\u80fd\u62ff\u5230 $A5$ \u90a3\u6211\u4eec\u5c31\u8981\u5728 $A3$ \u505c\u987f\u4e00\u79d2\uff0c\u4f46\u662f\u6211\u4eec\u4e00\u505c\u987f\u5c31\u4f1a\u5c06\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u53d6\u7684 $B3$ \u7ed9\u70b8\u4e86\u3002\u5e76\u4e14\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u505c\u987f\u90fd\u65e0\u6cd5\u4fdd\u8bc1\u4efb\u610f\u4e00\u4e2a\u7684\u7070\u70b9\u90fd\u80fd\u591f\u88ab\u53d6\u5230\u3002\u6240\u4ee5\u8fd9\u79cd\u6784\u9020\u65b9\u5f0f\u4e0d\u53ef\u884c\u3002\n\n\u4f46\u662f\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u904d\u5386\u6240\u6709\u7684\u683c\u5b50\u3002\u6211\u4eec\u82e5\u662f\u6bcf\u4e24\u884c\u4e3a\u4e00\u4e2a\u9636\u6bb5\uff0c\u5728\u904d\u5386\u7b2c\u4e00\u884c\u65f6\u8fde\u7740\u7b2c\u4e8c\u884c\u7684\u4e00\u8d77\u53d6\u5b8c\u3002\u7136\u540e\u4e0d\u904d\u5386\u7b2c\u4e8c\u884c\u5c31\u53ef\u4ee5\u9632\u6b62\u5f71\u54cd\u4e0b\u4e2a\u9636\u6bb5\u3002\u53ef\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u6784\u9020\uff1a\n\n1. \u6309\u904d\u5386\u65b9\u5411\u987a\u5e8f\uff0c\u4f9d\u6b21\u53d6\u5b9d\u77f3\u3002 ~~(\u5e9f\u8bdd)~~\n2. \u7b2c\u4e00\u884c\u7684\u5b9d\u77f3\u5728\u5076\u6570\u79d2\u65f6\u76f4\u63a5\u8fdb\u5165\u683c\u5b50\u83b7\u53d6\u3002\n3. \u7b2c\u4e8c\u884c\u7684\u5b9d\u77f3\u6211\u4eec\u8981\u5728\u5947\u6570\u79d2\u65f6\u8fdb\u5165\u5176\u5728\u7b2c\u4e00\u884c\u7684\u5bf9\u5e94\u683c\u5b50\uff0c\u7136\u540e\u5728\u5076\u6570\u79d2\u8fdb\u5165\u683c\u5b50\u53d6\u5b9d\u77f3\uff0c\u4e4b\u540e\u7acb\u5373\u8fd4\u56de\u7b2c\u4e00\u884c\u5bf9\u5e94\u683c\u5b50\uff0c\u5947\u5076\u6027\u6ca1\u6709\u6539\u53d8\u3002\n\n\u6765\u5b9e\u9645\u64cd\u4f5c\u4e00\u4e0b\uff1a\n\n![](https://img.imgdb.cn/item/602fac8be7e43a13c693aa2d.png)\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u5230\u8fbe $A3$ \u65f6\uff0c\u6211\u4eec\u76f4\u63a5\u4e0a\u53bb\u62ff\u5230 $B3$ \uff0c\u7528\u65f6\u4e24\u79d2\uff0c\u65f6\u95f4\u5947\u5076\u6027\u6ca1\u53d8\u3002$A5$ \u8981\u6c42\u5728\u5076\u6570\u79d2\u8fdb\u5165\uff0c\u90a3\u6211\u4eec\u5c31\u5728 $A3$ \u505c\u987f\u4e00\u79d2\u3002\u7531\u4e8e $B3$ \u5df2\u7ecf\u62ff\u4e86\uff0c\u6240\u4ee5\u6ca1\u6709\u5f71\u54cd\u3002\u540c\u6837\u7684\uff0c\u6211\u4eec\u5e94\u5728\u5947\u6570\u79d2\u8fdb\u5165 $C6$ \uff0c\u4ee5\u4fbf\u53d6\u5230 $D6$ \uff0c\u53d6\u5b8c $D6$ \u56de\u5230 $C6$ \u65f6\u8fd8\u662f\u5947\u6570\u79d2\uff0c\u53ef\u4ee5\u987a\u5229\u53d6\u5230 $C5$\u3002\n\n\u8bd5\u7740\u8bc1\u5b83\u80fd\u5426\u53d6\u5230\u6240\u6709\u72ec\u7acb\u96c6\u7684\u70b9\u3002\n\n\u9996\u5148\uff0c\u9636\u6bb5\u4e4b\u95f4\u662f\u6ca1\u6709\u51b2\u7a81\u7684\u3002\u6211\u4eec\u53ea\u6709\u5728\u7b2c\u4e8c\u884c\u6709\u7070\u70b9\u65f6\u624d\u53bb\u7b2c\u4e8c\u884c\uff0c\u7531\u72ec\u7acb\u96c6\u7684\u6027\u8d28\u80fd\u77e5\u9053\u4e0b\u4e00\u9636\u6bb5\u7b2c\u4e00\u884c\u5bf9\u5e94\u4f4d\u7f6e\u662f\u6ca1\u6709\u7070\u70b9\u7684\u3002\n\n\u5176\u6b21\u6211\u4eec\u9700\u8bc1\uff0c\u5bf9\u4e8e\u9636\u6bb5\u5185\u7684\u70b9\uff0c\u5fc5\u5b9a\u6709\u4e00\u4e2a\u64cd\u4f5c\u5e8f\u5217\u80fd\u591f\u53d6\u5230\u6240\u6709\u7684\u70b9\u3002\n\n\u6211\u4eec\u5c06\u6bcf\u4e2a\u683c\u5b50\u7684\u8981\u6c42\u5e8f\u5217\u5316\u3002\u5bf9\u4e8e\u9636\u6bb5\u7684\u7b2c\u4e00\u884c\uff0c\u5c06\u7070\u70b9\u6240\u5728\u4f4d\u7f6e\u8bbe\u4e3a $0$ \uff0c\u4ee3\u8868\u8fd9\u4e2a\u70b9\u5fc5\u987b\u5076\u6570\u79d2\u8fdb\u5165\uff1b\u5c06\u7b2c\u4e8c\u884c\u6709\u5bf9\u5e94\u7070\u70b9\u7684\u4f4d\u7f6e\u8bbe\u4e3a $1$ \uff0c\u4ee3\u8868\u5fc5\u987b\u5728\u5947\u6570\u65f6\u8fdb\u5165\u8fd9\u4e2a\u70b9\uff1b\u5176\u4ed6\u7684\u70b9\u90fd\u8bbe\u4e3a $?$ \uff0c\u5047\u88c5\u6211\u4eec\u4e0d\u77e5\u9053\u3002\n\n\u5c31\u4e3e\u4e0a\u9762 $Phase\\ 1$ \u7684\u4f8b\u5b50\u3002\n\n![](https://img.imgdb.cn/item/602fb0a8e7e43a13c6958537.png)\n\n\u6784\u9020\u51fa\u6765\u4e00\u4e2a\u5e8f\u5217 $?,0,1,?,0,?$\n\n\u6839\u636e\u201c\u4e0d\u80fd\u540c\u65f6\u62ff\u5230\u76f8\u90bb\u683c\u5b50\u4e0a\u7684\u4e24\u4e2a\u5b9d\u77f3\u201d\u7684\u63a8\u8bba\uff0c\u8be5\u5e8f\u5217\u4e0d\u5e94\u8be5\u5b58\u5728\u8fde\u7eed\u7684\u4e24\u4e2a $0$ \u6216 $1$ \u5fc5\u7136\u662f $01$ \u76f8\u95f4\u7684\u5f62\u5f0f\u3002\n\n\u7531\u4e8e\u5bf9\u4e8e\u4e00\u6bb5\u8fde\u7eed\u7684 $?$ \u6211\u4eec\u5f88\u5bb9\u6613\u6784\u9020\u5e8f\u5217\u4f7f\u5176\u53ea\u6709\u5355\u4e2a $?$\uff0c\u6240\u4ee5\u95ee\u9898\u96c6\u4e2d\u4e8e\u975e $?$ \u548c $?$ \u7684\u8854\u63a5\u4e0a\u3002\n\n\u6211\u4eec\u76f4\u63a5\u5f00\u59cb\u5206\u7c7b\u8ba8\u8bba\u3002\n\n1. $0,?,0$ \u6216 $1,?,1$ \u6211\u4eec\u53ea\u9700\u8981\u4ee4 $?$ \u4e3a $1$ \u6216 $0$ \u5373\u53ef\u3002\n\n2. $1,?,0$ \uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u5728\u8fd9\u4e00\u683c\u505c\u7559\u4e00\u4e0b\uff0c\u5f97\u5230\u5e8f\u5217 $1,(0)1,0$\n\n3. $0,?,1$ \uff0c\u4ecd\u7136\u662f\u7528\u505c\u7559\u89e3\u51b3\u95ee\u9898\uff0c\u5f97\u5230\u5e8f\u5217 $0,(1)0,1$ \u3002\n\n\u7efc\u4e0a\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u72ec\u7acb\u96c6\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848\u53d6\u5230\u72ec\u7acb\u96c6\u5185\u6240\u6709\u70b9\u3002\n\n\u4f60\u5df2\u7ecf\u8bc1\u660e\u4e86\u6bcf\u4e00\u4e2a\u65b9\u6848\u4e0e\u72ec\u7acb\u96c6\u4e00\u4e00\u5bf9\u5e94\uff0c\u53ea\u9700\u8981\u653e\u5fc3\u5927\u80c6\u8dd1\u7f51\u7edc\u6d41\u5c31\u53ef\u4ee5\u4e86\uff0c~~\u5feb\u53bb\u8bd5\u4e00\u8bd5\u5427~~\n\ncode\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N=1e5+10, M=2e6+10,INF=1e8;\n\nint n,m,S,T;\nint head[N],ver[M],cc[M],nxt[M],tot=0;\nvoid add(int x,int y,int c)\n{\n\tver[tot]=y; cc[tot]=c; nxt[tot]=head[x]; head[x]=tot++;\n\tver[tot]=x; cc[tot]=0; nxt[tot]=head[y]; head[y]=tot++;\n}\nint q[N],d[N],cur[N];\nint dx[5]={0,1,0,-1};\nint dy[5]={-1,0,1,0};\n\ninline int index_(int i,int j)\t{return (i-1)*m+j;}\n\nbool bfs()\n{\n\tint hh=0,tt=0;\n\tmemset(d,-1,sizeof d);\n\tq[0]=S, d[S]=0, cur[S]=head[S];\n\twhile(hh<=tt)\n\t{\n\t\tint x=q[hh++];\n\t\tfor(int i=head[x];~i;i=nxt[i])\n\t\t{\n\t\t\tint y=ver[i];\n\t\t\tif(d[y]==-1 && cc[i])\n\t\t\t{\n\t\t\t\td[y]=d[x]+1;\n\t\t\t\tcur[y]=head[y];\n\t\t\t\tif(y==T) return 1;\n\t\t\t\tq[++tt]=y;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint find(int u,int lim)\n{\n\tif(u==T) return lim;\n\tint flow=0;\n\tfor(int i=cur[u];~i && flow<lim;i=nxt[i])\n\t{\n\t\tint y=ver[i];\n\t\tcur[u]=i;\n\t\tif(d[y]==d[u]+1 && cc[i])\n\t\t{\n\t\t\tint tmp=find(y,min(lim-flow,cc[i]));\n\t\t\tif(!tmp) d[y]=-1;\n\t\t\tcc[i]-=tmp; cc[i^1]+=tmp; flow+=tmp;\n\t\t}\n\t}\n\treturn flow;\n}\n\nint dinic()\n{\n\tint res=0,flow;\n\twhile(bfs()) while(flow=find(S,INF)) res+=flow;\n\treturn res;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tS=0,T=N-10;\n\tmemset(head,-1,sizeof head);\n\tint sum=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tsum+=x;\n\t\t\tif((i+j)&1)\n\t\t\t{\n\t\t\t\tadd(S,index_(i,j),x);\n\t\t\t\tfor(int k=0;k<4;k++)\n\t\t\t\t{\n\t\t\t\t\tint xx=i+dx[k],yy=j+dy[k];\n\t\t\t\t\tif(xx>=1&&xx<=n&&yy>=1&&yy<=m)\n\t\t\t\t\t\tadd(index_(i,j),index_(xx,yy),INF);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tadd(index_(i,j),T,x);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",sum-dinic());\n\treturn 0;\n}\n\n```\n\n### \u53c2\u8003\u6587\u732e\n\n\u80e1\u4f2f\u6d9b \u2014 \u300a\u6700\u5c0f\u5272\u6a21\u578b\u5728\u4fe1\u606f\u5b66\u5965\u8d5b\u4e2d\u7684\u5e94\u7528\u300b",
        "postTime": 1613742482,
        "uid": 278259,
        "name": "RemiliaScarlet\u25ce",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4474 \u3010\u738b\u8005\u4e4b\u5251\u3011"
    },
    {
        "content": "## \u738b\u8005\u4e4b\u5251\n### \u524d\u8a00\n\u8fd9\u9053\u9898\u76ee\u6211\u600e\u4e48\u770b\u8d77\u6765\u6709\u70b9\u773c\u719f\uff1f\uff1f\uff1f\u8fd9......\n\n### \u601d\u8def\n\n\u539f\u5148\u60f3\u76f4\u63a5\u66b4\u529b\uff0c\u76f4\u63a5\u4e0a\u5308\u7259\u5229\u7b97\u6cd5\u7684\uff0c\u4f46\u662f\u8fd9\u6bd5\u7adf\u662f\u7f51\u7edc\u6d41\u9898\u76ee\u8fd8\u662f\u4e0a\u7f51\u7edc\u6d41\u5427\u3002\uff08~~\u867d\u7136\u8001\u5a46\u997c\u91cc\u6ca1\u6709\u8001\u5a46~~\uff09\n\n\u81ea\u53e4\u4ee5\u6765\u554a\uff0c\u7f51\u7edc\u6d41\u7684\u5efa\u6a21\u5c31\u662f\u4e00\u4e2a\u6700\u96be\u7684\u5730\u65b9\uff0c\u4e5f\u662f\u6700\u4e0d\u597d\u7406\u89e3\u7684\u5730\u65b9\u3002\u8fd9\u4e00\u9053\u9898\u7684\u5efa\u6a21\u5c31\u662f\u6bd4\u8f83\u96be\u60f3\u7684\u3002\n\n\u4e0b\u9762\u91cd\u70b9\u8bb2\u89e3\u4e00\u4e0b\u5efa\u6a21\u7684\u65b9\u6cd5\n\n### \u5efa\u6a21\n\u9898\u610f\u8bf4\u8fd9\u4e2a\u5927\u4f6c\u53ef\u4ee5\u62ff\u73b0\u5728\u8fd9\u4e2a\u683c\u5b50\u7684\u4e1c\u897f\uff0c\u4f46\u5982\u679c\u62ff\u4e86\u8fd9\u4e2a\u5730\u65b9\u7684\uff0c\u90a3\u4e48\u65c1\u8fb9\u7684\u56db\u4e2a\u683c\u5b50\u5c31\u4e0d\u80fd\u62ff\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e9b\u9ed1\u767d\u70b9\uff0c\u73b0\u5728\u53d6\u4e86\u5c31\u505a\u9ed1\u70b9\uff0c\u5468\u56f4\u76844\u4e2a\u70b9\uff0c\u53ef\u4ee5\u5f53\u505a\u767d\u70b9\uff0c\u800c\u6d41\u91cf\u503c\u5c31\u662f\u73b0\u5728\u8fd9\u4e2a\u70b9\u7684\u70b9\u503c\u3002\n\n\u800c\u628a\u767d\u70b9\u8fde\u7ebf\u5230\u539f\u70b9\uff0c\u800c\u628a\u9ed1\u70b9\u8fde\u5230\u6c47\u70b9\uff0c\u4f46\u662f\u8fd9\u6837\u8dd1\u4e00\u5b9a\u7684\u4f1awa\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\uff1f\n\n\u73b0\u5728\uff0c\u8981\u5f15\u5165\u62c6\u70b9\u7684\u601d\u60f3\n\n### \u62c6\u70b9\n\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u4e00\u4e2a\u56fe\u7ed9\u51fa\u4e86\u70b9\u6743\u800c\u4e0d\u662f\u8fb9\u6743\uff0c\u6211\u4eec\u5728\u8fde\u63a5\u8fb9\u7684\u65f6\u5019\u5c31\u663e\u5f97\u5341\u5206\u4e0d\u597d\u64cd\u4f5c\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5f80\u5f80\u5c31\u4f1a\u6709\u8fd9\u6837\u4e00\u79cd\u64cd\u4f5c\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\n\n\u9898\u76ee\u7ed9\u51fa\u7684\u8fde\u8fb9\u5747\u7531\u6bcf\u4e2a\u70b9\u7684\u51fa\u70b9\u8fde\u5411\u5165\u70b9\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u7684\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u70b9\u6743\u7684\u8fb9\uff0c\u5c31\u53ef\u4ee5\u6ee1\u8db3\u70b9\u6743\u7684\u9650\u5236\u4e86\u3002\n\n\u6240\u4ee5\u8fd9\u9053\u5c31\u5f88\u5bb9\u6613\u89e3\u4e86\n\n### \u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define inf 2147483647\nusing namespace std; \nqueue<int> f;\nconst int way1[4]={0,0,1,-1},way2[4]={1,-1,0,0};\nstruct node\n{\n    int from,to,dis,next;\n}edge[20000000];\nint st[1000000],n,m,tot=-1,ans,start,ed,head[1000000],x,id;\nvoid add(int x,int y,int z)\n{\n    edge[++tot].from=x;\n    edge[tot].to=y;\n    edge[tot].dis=z;\n    edge[tot].next=st[x];\n    st[x]=tot;\n}\nbool bfs()\n{\n    memset(head,0,sizeof head);\n    head[start]=1;\n    f.push(start);\n    while(!f.empty())\n    {\n        int x=f.front();\n        for(int i=st[x];i>=0;i=edge[i].next)\n        {\n            int y=edge[i].to;\n            if(edge[i].dis>0&&head[y]==0)\n            {\n                head[y]=head[x]+1;\n                f.push(y);\n            }\n        }\n        f.pop();\n    }\n    if(head[ed]) \n        return true; \n    return false;\n}\nint dfs(int x,int f)\n{\n    int s=0,t;\n    if(x==ed) \n        return f;\n    for(int i=st[x];i>=0;i=edge[i].next)\n    {\n        int y=edge[i].to;\n        if(edge[i].dis>0&&head[y]==head[x]+1&&f>s)\n        {\n            s+=(t=(dfs(y,min(f-s,edge[i].dis))));\n            edge[i].dis-=t;\n            edge[i^1].dis+=t;\n        }\n    }\n    if(!s) \n        head[x]=0;\n    return s;\n}\nint isap()\n{\n    int sum=0;\n    while(bfs())\n        sum+=dfs(start,inf);\n    return sum;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    start=0,ed=n*m+1;\n    memset(st,-1,sizeof st);\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n        {\n            scanf(\"%d\",&x);\n            ans+=x;\n            id=(i-1)*m+j;\n            if((i+j)&1) \n            {\n            \tadd(start,id,x);\n                add(id,start,0); \n            }\n            else \n            {\n                add(id,ed,x);\n                add(ed,id,0);\n            }\n        }\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            if((i+j)&1)\n            {\n                for(int k=0;k<=3;k++)\n                {\n                    int xx=i+way1[k],yy=j+way2[k];\n                    if(xx<=0||xx>n||yy<=0||yy>m) \n                        continue;\n                    id=(i-1)*m+j;\n                    add(id,(xx-1)*m+yy,inf);\n                    add((xx-1)*m+yy,id,0);\n                }\n            }\n    printf(\"%d\",ans-isap());\n}\n```\n~~\u53cc\u500d\u7ecf\u9a8c\uff0c\u65b9\u683c\u53d6\u6570\u95ee\u9898~~",
        "postTime": 1555651089,
        "uid": 41988,
        "name": "RNG_XDD\u5c0f\u53ee\u5f53",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4474 \u3010\u738b\u8005\u4e4b\u5251\u3011"
    },
    {
        "content": "[P4474 \u738b\u8005\u4e4b\u5251](https://www.luogu.com.cn/problem/P4474)\n\n\u8bfb\u5b8c\u9898\uff0c\u975e\u5e38\u719f\u6089\u3002\n\n\u8fd9\u4e0d\u5c31\u662f\u65b9\u683c\u53d6\u6570\u95ee\u9898\u5417\uff1f\u4e8c\u5206\u56fe\u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6\u3002\n\n\n\u56db\u5468\u5b9d\u77f3\u4f1a\u6d88\u5931\u5176\u5b9e\u5c31\u662f\u4e0d\u80fd\u6709\u516c\u5171\u8fb9\u6362\u4e86\u4e00\u4e2a\u8bf4\u6cd5\u3002\n\n\u56de\u987e\u65b9\u683c\u53d6\u6570\u95ee\u9898\u600e\u4e48\u505a\uff1f\n\n\u8003\u8651\u67d3\u8272\uff0c\u9ed1\u767d\u67d3\u8272\u3002\u4f7f\u7528\u6700\u5c0f\u5272\u89e3\u51b3\u3002\n\n\u6e90\u70b9 $ \\rightarrow $ \u9ed1\u70b9\uff0c\u5bb9\u91cf\u4e3a\u5f53\u524d\u70b9\u70b9\u6743\u3002\n\n\u767d\u70b9 $ \\rightarrow $ \u6c47\u70b9\uff0c\u5bb9\u91cf\u4e3a\u5f53\u524d\u70b9\u70b9\u6743\u3002\n\n\u9ed1\u70b9 $ \\rightarrow $ \u5468\u56f4\u767d\u70b9\uff0c\u5bb9\u91cf\u4e3a $ \\infty $\uff0c\u8868\u793a\u4e0d\u53ef\u5272\uff0c\u5b9e\u9645\u9898\u4e2d\u4f53\u73b0\u4e3a\u4e0d\u80fd\u6709\u516c\u5171\u8fb9\u3002\n\n\u6700\u540e\u6700\u5c0f\u5272\u6700\u5927\u6d41\u5b9a\u7406\u8dd1\u4e00\u8fb9\u5373\u53ef\u3002\n\nCode\n\n```cpp\n# include <iostream>\n# include <cstdio>\n# include <queue>\n# include <cstring>\n\nusing namespace std;\n\nconst int N = 2e6 + 5;\nconst int M = 1e7 + 5;\nconst int inf = 0x3f3f3f3f;\nint S , T;\n\ntypedef struct {\n\tint x , y , z , next;\n} Edge;\nEdge edge[M];\n\nint E = 1 , elast[N];\nint n , m;\n\nvoid add(int x , int y , int z) {\n\tE ++;\n\tedge[E].x = x;\n\tedge[E].y = y;\n\tedge[E].z = z;\n\tedge[E].next = elast[x];\n\telast[x] = E;\n}\nint dis[N] , cnt[N];\nvoid bfs(int start) {\n\tqueue<int> q;\n\tq.push(start);\n\tdis[start] = 0;\n\tcnt[S] = 1;\n\twhile (!q.empty()) {\n\t\tint cur = q.front();\n\t\tq.pop();\n\t\tfor (int i = elast[cur] ; i ; i = edge[i].next) {\n\t\t\tint v = edge[i].y;\n\t\t\tif (dis[v] != -1) continue;\n\t\t\tdis[v] = dis[cur] + 1;\n\t\t\tq.push(v);\n\t\t\tcnt[dis[v]] ++;\n\t\t}\n\t}\n}\nint cur[N];\nint dfs(int u , int flow) {\n\tif (u == T) return flow;\n\tint temp , delta = 0;\n\tfor (int i = cur[u] ; i ; i = edge[i].next) {\n\t\tcur[u] = i;\n\t\tint v = edge[i].y;\n\t\tif (edge[i].z > 0 && dis[u] == dis[v] + 1) {\n\t\t\ttemp = dfs(v , min(flow - delta , edge[i].z));\n\t\t\tedge[i].z -= temp;\n\t\t\tedge[i ^ 1].z += temp;\n\t\t\tdelta += temp;\n\t\t\tif (delta == flow) return delta;\n\t\t}\n\t}\n\tif (dis[S] >= T) return delta;\n\tcur[u] = elast[u];\n\tif (-- cnt[dis[u]] == 0) dis[S] = T;\n\tcnt[++ dis[u]] ++;\n\treturn delta;\n}\nint Isap() {\n\tint ans = 0;\n\tmemset(cnt , 0 , sizeof cnt);\n\tmemset(dis , -1 , sizeof dis);\n\tbfs(T);\n\tfor (int i = 0 ; i <= T ; i ++) {\n\t\tcur[i] = elast[i];\n\t}\n\twhile (dis[S] < T) ans += dfs(S , inf);\n\treturn ans;\n}\nint x;\nint sum = 0;\nint main() {\n    cin >> n >> m;\n    S = 0 , T = n * m + 1;\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tfor (int j = 1 ; j <= m ; j ++) {\n\t\t\tscanf(\"%d\" , &x);\n\t\t\tsum += x;\n\t\t\tif (i & 1) {\n\t\t\t\tif (j & 1) add(S , (i - 1) * m + j , x) , add((i - 1) * m + j , S , 0);\n\t\t\t\telse add((i - 1) * m + j , T , x) , add(T , (i - 1) * m + j , 0);\n\t\t\t} else {\n\t\t\t\tif (j & 1) add((i - 1) * m + j , T , x) , add(T , (i - 1) * m + j , 0);\n\t\t\t\telse add(S , (i - 1) * m + j , x) , add((i - 1) * m + j , S , 0);\n\t\t\t}\n\t\t\tif (((i & 1) && (j & 1)) || (!(i & 1) && !(j & 1))) {\n\t\t\t\tif (i - 1 > 0) add((i - 1) * m + j , (i - 2) * m + j , inf) , add((i - 2) * m + j , (i - 1) * m + j , 0);\n\t\t\t\tif (j - 1 > 0) add((i - 1) * m + j , (i - 1) * m + j - 1 , inf) , add((i - 1) * m + j - 1 , (i - 1) * m + j , 0);\n\t\t\t\tif (i + 1 <= n) add((i - 1) * m + j , i * m + j , inf) , add(i * m + j , (i - 1) * m + j , 0);\n\t\t\t\tif (j + 1 <= m) add((i - 1) * m + j , (i - 1) * m + j + 1 , inf) , add((i - 1) * m + j + 1 , (i - 1) * m + j , 0); \n\t\t\t}\n\t\t}\n\t} \n\n\tprintf(\"%d\\n\" , sum - Isap());\n\treturn 0;\n} \n```",
        "postTime": 1629116846,
        "uid": 335477,
        "name": "ker_xyxyxyx_xxs",
        "ccfLevel": 0,
        "title": "P4474 \u738b\u8005\u4e4b\u5251"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4474)\n\n\u5076\u6570\u79d2\u7684\u65f6\u5019\u4f1a\u4f7f\u5f97\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\u4e0a\u7684\u5b9d\u77f3\u6d88\u5931\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5947\u6570\u79d2\u7684\u65f6\u5019\u4e00\u5b9a\u8d70\u5728\u7684\u662f\u7a7a\u683c\u5b50\u4e0a\uff0c\u4e8e\u662f\u53ef\u4ee5\u5f97\u5230**\u6027\u8d28 1**\uff1a\u6211\u4eec\u53ea\u80fd\u5728\u5076\u6570\u79d2\u7684\u65f6\u5019\u62ff\u5b9d\u77f3\u3002\n\n\u8fdb\u4e00\u6b65\u5730\uff0c\u53ef\u4ee5\u60f3\u5230**\u6027\u8d28 2**\uff1a\u4e0d\u80fd\u540c\u65f6\u62ff\u8d70\u76f8\u90bb\u683c\u5b50\u4e0a\u7684\u5b9d\u77f3\u3002\u6211\u4eec\u5c06\u76f8\u90bb\u7684\u683c\u5b50\u8fde\u4e00\u6761\u8fb9\uff0c\u5219\u80fd\u62ff\u7684\u5b9d\u77f3\u4e00\u5b9a\u662f\u4e00\u4e2a**\u72ec\u7acb\u96c6**\u3002\u800c\u53c8\u662f\u6c42\u6700\u5927\u503c\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u53d1\u73b0\u8fd9\u9898\u975e\u5e38\u50cf\u4e00\u4e2a**\u6700\u5927\u6743\u72ec\u7acb\u96c6\u95ee\u9898**\u3002\u8ba9\u6211\u4eec\u5c1d\u8bd5\u8bc1\u660e\u4e00\u4e0b\u3002\uff08\u8bc1\u660e\u53ef\u80fd\u7565\u6709\u67af\u71e5\uff0c\u4f46\u7b14\u8005\u8ba4\u4e3a\u53ea\u6709\u900f\u5f7b\u4e86\u8bc1\u660e\uff0c\u624d\u80fd\u4e86\u89e3\u6b64\u9898\u7684\u672c\u8d28\u3002\uff09\n\n\u6309\u7167\u6a2a\u7eb5\u5750\u6807\u548c\u7684\u5947\u5076\u6027\uff0c\u6211\u4eec\u628a\u70b9\u5206\u4e3a\u4e24\u7c7b\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u8bc1\u660e\u7684\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u65b9\u6848\uff0c\u90fd\u53ef\u4ee5\u5bf9\u5e94\u5230\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u72ec\u7acb\u96c6\u3002\n\n\u5230\u6b64\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u5c06\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848\u5bf9\u5e94\u5230\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u72ec\u7acb\u96c6\u3002\u4f46\u662f\u8fd8\u9700\u8981\u8bc1\u660e\u4e8c\u5206\u56fe\u7684\u4efb\u610f\u4e00\u4e2a\u72ec\u7acb\u96c6\u90fd\u80fd\u5bf9\u5e94\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848\u3002\u6784\u9020\u65b9\u6848\u5982\u4e0b\uff1a\n\n\u6211\u4eec\u4ece\u5de6\u4e0a\u89d2\u7684\u4e00\u4e2a\u6709\u5b9d\u77f3\u7684\u683c\u5b50\u5f00\u59cb\u8d70\uff0c\u4f9d\u6b21\u53bb\u53d6\u522b\u7684\u5b9d\u77f3\uff0c\u4e14\u6bcf\u6b21\u90fd\u53d6\u6700\u8fd1\u7684\u5b9d\u77f3\u3002\u5047\u8bbe\u73b0\u5728\u79bb\u4e0b\u4e00\u4e2a\u5b9d\u77f3\u8fd8\u5269\u5076\u6570\u6b65\uff0c\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u662f\u5947\u6570\u79d2\u8fd8\u662f\u5076\u6570\u79d2\uff0c\u5982\u679c\u662f\u5076\u6570\u79d2\u5c31\u76f4\u63a5\u8fc7\u53bb\u62ff\u5b9d\u77f3\uff1b\u5982\u679c\u662f\u5947\u6570\u79d2\u5219\u5728\u5f53\u524d\u683c\u5b50\u505c\u987f\u4e00\u4e0b\u518d\u76f4\u63a5\u8fc7\u53bb\u62ff\u5b9d\u77f3\u3002\u6309\u7167\u4ee5\u4e0a\u601d\u8def\uff0c\u8fd9\u6837\u7684\u65b9\u6848\u4e00\u5b9a\u80fd\u5c06\u6240\u6709\u72ec\u7acb\u96c6\u4e2d\u7684\u5b9d\u77f3\u62ff\u8d70\u3002\n\n\u90a3\u4e48\u6b64\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u6700\u5927\u6743\u72ec\u7acb\u96c6\u95ee\u9898\u3002\n\n\u5efa\u56fe\u65b9\u5f0f\uff1a\u4ece\u6e90\u70b9\u5411\u5de6\u90e8\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u5b9d\u77f3\u4ef7\u503c\uff1b\u4ece\u53f3\u90e8\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u5b9d\u77f3\u4ef7\u503c\u3002\u4ece\u5de6\u90e8\u70b9\u5411\u76f8\u90bb\u7684\u53f3\u90e8\u70b9\u8fde\u8fb9\u3002\u7528\u603b\u4ef7\u503c\u51cf\u53bb\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u603b\u70b9\u6570\uff1a$100 \\times 100 = 10^4$\u3002\n\u603b\u8fb9\u6570\uff1a$(10^4 \\times 2 + 10^4) \\times 2 = 6 \n\\times 10 ^ 4$\u3002(\u6bcf\u4e2a\u70b9\u5411\u53f3\u4e0b\u5206\u522b\u8fde\u4e00\u6761\u8fb9\uff0c\u6e90\u70b9\u548c\u6c47\u70b9\u548c\u6bcf\u4e2a\u70b9\u8fde\u8fb9\uff0c\u5efa\u7acb\u6b8b\u7559\u7f51\u7edc\u5f00\u4e8c\u500d\u3002)\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define rep(a, b, c) for(int (a) = (b); (a) <= (c); ++ (a))\n#define per(a, b, c) for(int (a) = (b); (a) >= (c); -- (a))\nusing namespace std;\n\nconst int N = 10010, M = 60010, inf = 2147483647;\n\nint n, m, S, T;\nint hd[N], to[M], f[M], nt[M], idx;\nint cur[N], q[N], d[N];\n\nint get(int x, int y) {\n    return (x - 1) * m + y;\n}\n\nvoid add(int u, int v, int c) {\n    to[idx] = v, f[idx] = c, nt[idx] = hd[u], hd[u] = idx ++ ;\n    to[idx] = u, f[idx] = 0, nt[idx] = hd[v], hd[v] = idx ++ ;\n}\n\nbool bfs() {\n    int hh = 0, tt = 0;\n    memset(d, -1, sizeof d);\n    d[S] = 0, q[0] = S, cur[S] = hd[S];\n    while(hh <= tt) {\n        int u = q[hh ++ ];\n        for(int i = hd[u]; ~i; i = nt[i]) {\n            int v = to[i];\n            if(f[i] && d[v] == -1) {\n                d[v] = d[u] + 1;\n                cur[v] = hd[v];\n                if(v == T) return true;\n                q[ ++ tt] = v;\n            }\n        }\n    }\n    return false;\n}\n\nint find(int u, int limit) {\n    if(u == T) return limit;\n    int flow = 0;\n    for(int i = cur[u]; ~i && flow < limit; i = nt[i]) {\n        int v = to[i];\n        cur[u] = i;\n        if(f[i] && d[v] == d[u] + 1) {\n            int t = find(v, min(f[i], limit - flow));\n            if(!t) d[v] = -1;\n            flow += t, f[i] -= t, f[i ^ 1] += t;\n        }\n    }\n    return flow;\n}\n\nint dinic() {\n    int res = 0, flow;\n    while(bfs()) while(flow = find(S, inf)) res += flow;\n    return res;\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    memset(hd, -1, sizeof hd);\n    S = 0, T = n * m + 1;\n    int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n    int tot = 0;\n    rep(i, 1, n) {\n        rep(j, 1, m) {\n            int x;\n            scanf(\"%d\", &x);\n            if(i + j & 1) {\n                add(S, get(i, j), x);\n                rep(k, 0, 3) {\n                    int a = i + dx[k], b = j + dy[k];\n                    if(a < 1 || b < 1 || a > n || b > m) continue;\n                    add(get(i, j), get(a, b), inf);\n                }\n            }\n            else add(get(i, j), T, x);\n            tot += x;\n        }\n    }\n    printf(\"%d\\n\", tot - dinic());\n    return 0;\n}\n```",
        "postTime": 1678538423,
        "uid": 477674,
        "name": "Lagerent",
        "ccfLevel": 0,
        "title": "P4744 \u738b\u8005\u4e4b\u5251 \u9898\u89e3"
    },
    {
        "content": "## P4474 \u738b\u8005\u4e4b\u5251 \u9898\u89e3\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n\u672c\u9898\u8003\u7684\u662f\u6700\u5927\u6743\u72ec\u7acb\u96c6\uff0c\u5bf9\u4e8e\u6700\u5927\u6743\u72ec\u7acb\u96c6\uff0c\u4ee4\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7684\u6743\u503c\u4e4b\u548c\u4e3a $|V|$\uff0c\u6700\u5c0f\u6743\u8986\u76d6\u96c6\u7684\u6743\u503c\u4e4b\u548c\u4e3a $|R|$\uff0c\u539f\u56fe\u603b\u6743\u503c\u4e4b\u548c\u4e3a $|W|$\uff0c\u5219\u6ee1\u8db3\u4e0b\u5217\u516c\u5f0f\uff1a\n\n$$\n|V| = |W| - |R|\n$$\n\n$|W|$ \u5f88\u597d\u6c42\uff0c\u800c $|R|$ \u7684\u503c\u5c31\u662f\u6700\u5c0f\u5272\u7684\u503c\uff0c\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u8bc1\u660e\uff0c\u7528\u53cd\u8bc1\u6cd5\u5f88\u597d\u8bc1\uff1a\n\n\u5982\u679c\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u70b9\u8986\u76d6\u96c6 $V_1$\uff0c\u90a3\u4e48\u5b83\u7684\u8865\u96c6 $V_2=V-V_1$ \u5fc5\u5b9a\u662f\u4e00\u4e2a\u72ec\u7acb\u96c6\uff0c\u5982\u679c\u6211\u4eec\u5047\u8bbe $V_2$ \u4e0d\u662f\u4e00\u4e2a\u72ec\u7acb\u96c6\uff0c\u90a3\u4e48 $V_2$ \u4e2d\u5fc5\u5b9a\u6709\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u5728 $V_2$ \u4e2d\uff0c\u56e0\u4e3a $V_1$ \u548c $V_2$ \u4e92\u8865\uff0c\u5219\u53ef\u4ee5\u63a8\u51fa $V_1$ \u4e2d\u5fc5\u5b9a\u6709\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u4e0d\u5728 $V_1$ \u4e2d\uff0c\u8fd9\u4e0e $V_1$ \u662f\u70b9\u8986\u76d6\u96c6\u77db\u76fe\uff0c\u7ed3\u8bba\u83b7\u8bc1\u3002\n\n\u540c\u7406\uff0c\u7528\u540c\u6837\u7684\u65b9\u6cd5\uff0c\u5047\u8bbe\u4e00\u4e2a\u72ec\u7acb\u96c6\u7684\u4e0d\u8865\u96c6\u4e0d\u662f\u70b9\u8986\u76d6\u96c6\uff0c\u8bc1\u660e\u8fc7\u7a0b\u6781\u5176\u76f8\u4f3c\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u5373\u53ef\u8bc1\u660e $|V| = |W| - |R|$\u3002\n\n### \u5efa\u6a21\n\n\u4ece\u9898\u76ee\u80cc\u666f\u91cc\u9762\u5e94\u5f97\u5230\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7ed3\u8bba\uff1a\n\n1. \u53ea\u80fd\u5728\u5076\u6570\u79d2\u62ff\u5b9d\u77f3\n2. \u4e0d\u53ef\u80fd\u540c\u65f6\u62ff\u8d70\u76f8\u90bb\u7684\u5b9d\u77f3\n\n\u5176\u4e2d\u7b2c 2 \u6761\u6697\u793a\u6211\u4eec\u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7684\u95ee\u9898\u3002\u5bf9\u4e8e\u4efb\u610f $n \\times m$ \u7684\u56fe\uff0c\u6211\u4eec\u5bf9\u5176\u67d3\u8272\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/g86osmqr.png)\n\n\u6bcf\u4e00\u4e2a\u6d45\u84dd\u683c\u5b50\u5411\u5468\u56f4\u56db\u4e2a\u6d45\u7c89\u683c\u5b50\u8fde\u5bb9\u91cf\u4e3a $+ \\infty$ \u7684\u8fb9\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u76f8\u90bb\u4e24\u4e2a\u683c\u5b50\u91cc\u7684\u94bb\u77f3\u4e0d\u53ef\u80fd\u540c\u65f6\u53d6\uff0c\u56e0\u4e3a\u6b63\u5e38\u7684\u6700\u5c0f\u5272\u4e0d\u53ef\u80fd\u4e3a $+ \\infty$ \u3002\n\n\u56e0\u4e3a\u53ef\u4ee5\u539f\u5730\u7b49\u5f85\uff0c\u6240\u4ee5\u539f\u95ee\u9898\u7684\u6bcf\u4e00\u79cd\u60c5\u51b5\u6211\u4eec\u90fd\u53ef\u4ee5\u901a\u8fc7\u76f8\u5f53\u7684\u65b9\u6cd5\u5728\u5efa\u7acb\u7684\u56fe\u4e2d\u627e\u5230\u5408\u6cd5\u65b9\u6848\uff1b\u6211\u4eec\u5efa\u7684\u6bcf\u4e00\u4e2a\u56fe\u4e5f\u53ef\u4ee5\u5bf9\u5e94\u6bcf\u4e00\u4e2a\u5b9e\u9645\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u5efa\u7684\u56fe\u548c\u539f\u95ee\u9898\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff08\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6211\u4eec\u5efa\u7684\u56fe\u662f\u6b63\u786e\u7684\uff09\uff0c\u6700\u540e\u76f4\u63a5\u8dd1\u4e00\u4e2a\u6700\u5927\u6d41\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n### Code\n\n```cpp\n#include <iostream>\n#include <cstring>\n\nusing namespace std;\n\nconst int N = 10010, M = 60010, INF = 1e8;\n\nint n, m, S, T;\nint h[N], e[M], f[M], ne[M], idx;\nint q[N], depth[N], cur[N];\n\nint get_idx(int x, int y)\n{\n\treturn (x - 1) * m + y;\n}\n\nvoid add(int a, int b, int c)\n{\n\te[idx] = b;\n\tf[idx] = c;\n\tne[idx] = h[a];\n\th[a] = idx ++ ;\n\t\n\te[idx] = a;\n\tf[idx] = 0;\n\tne[idx] = h[b];\n\th[b] = idx ++ ;\n\t\n\treturn;\n}\n\nbool bfs()\n{\n\tint hh = 0, tt = 0;\n\tmemset(depth, -1, sizeof depth);\n\tq[0] = S;\n\tdepth[S] = 0;\n\tcur[S] = h[S];\n\t\n\twhile (hh <= tt)\n\t{\n\t\tint t = q[hh ++ ];\n\t\tfor (int i = h[t]; ~i; i = ne[i])\n\t\t{\n\t\t\tint ver = e[i];\n\t\t\tif (depth[ver] == -1 && f[i] > 0)\n\t\t\t{\n\t\t\t\tdepth[ver] = depth[t] + 1;\n\t\t\t\tcur[ver] = h[ver];\n\t\t\t\tq[ ++ tt] = ver;\n\t\t\t\tif (ver == T) return true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\nint dfs(int u, int lmt)\n{\n\tif (u == T) return lmt;\n\tint flow = 0;\n\tfor (int i = cur[u]; ~i && flow < lmt; i = ne[i])\n\t{\n\t\tcur[u] = i;\n\t\tint ver = e[i];\n\t\tif (depth[ver] == depth[u] + 1 && f[i] > 0)\n\t\t{\n\t\t\tint t = dfs(ver, min(f[i], lmt - flow));\n\t\t\tif (!t) depth[ver] = -1;\n\t\t\tf[i] -= t;\n\t\t\tf[i ^ 1] += t;\n\t\t\tflow += t;\n\t\t}\n\t}\n\t\n\treturn flow;\n}\n\nint dinic()\n{\n\tint res = 0, flow = 0;\n\twhile (bfs())\n\t\twhile (flow = dfs(S, INF))\n\t\t\tres += flow;\n\treturn res;\n}\n\nint main()\n{\n\tcin >> n >> m;\n\tS = 0, T = n * m + 1;\n\tmemset(h, -1, sizeof h);\n\t\n\tint dx[] = {-1, 0, 1, 0};\n\tint dy[] = {0, 1, 0, -1};\n\t\n\tint tot = 0;\n\tfor (int i = 1; i <= n; i ++ )\n\t\tfor (int j = 1; j <= m; j ++ )\n\t\t{\n\t\t\tint w;\n\t\t\tcin >> w;\n\t\t\tif ((i + j) & 1)\n\t\t\t{\n\t\t\t\tadd(S, get_idx(i, j), w);\n\t\t\t\tfor (int k = 0; k < 4; k ++ )\n\t\t\t\t{\n\t\t\t\t\tint x = i + dx[k];\n\t\t\t\t\tint y = j + dy[k];\n\t\t\t\t\tif (x >= 1 && x <= n && y >= 1 && y <= m)\n\t\t\t\t\t\tadd(get_idx(i, j), get_idx(x, y), INF);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tadd(get_idx(i, j), T, w);\n\t\t\ttot += w;\n\t\t}\n\t\n\tcout << tot - dinic() << endl;\n\treturn 0;\n}\n```\n\n### \u540e\u8bed\n\n\u771f\u9053\u9898\u5efa\u6a21\u771f\u7684\u5f88\u6709\u610f\u601d\u8bf6\uff01\u8fd8\u6709\u2026\u2026 ~~\u53cc\u500d\u7ecf\u9a8cP2774~~",
        "postTime": 1657527241,
        "uid": 590755,
        "name": "LittleMoMol",
        "ccfLevel": 0,
        "title": "P4474 \u738b\u8005\u4e4b\u5251"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P4474)\n\n**\u4e8c\u5206\u56fe\u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6**\u4e86\u89e3\u4e00\u4e0b\uff1f\n\n\n**\u9898\u76ee\u5206\u6790**\uff1a\n\n\u5982\u679c\u628a\u9898\u610f\u7ffb\u8bd1\u6210~~\u4eba\u8bdd~~\uff0c\u610f\u601d\u5c31\u662f\uff1a\n\n\u5728\u7f51\u683c\u4e2d\u9009\u62e9\u683c\u70b9\uff0c\u5982\u679c\u9009\u62e9\u4e86\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u5b83\u5468\u56f4\u7684\u56db\u4e2a\u70b9\u90fd\u4e0d\u80fd\u9009\u3002 \u6c42\u6240\u6709\u65b9\u6848\u7684\u6700\u5927\u503c\u3002\n\n\u6211\u53ea\u80fd\u8bf4\uff0c\u90fd\u662f\u5957\u8def\u4e86\u3002\u3002\u3002\n\n\n**\u89e3\u9898\u6b65\u9aa4**\uff1a\n\n- \u5c06\u5750\u6807\u548c\u4e3a\u5076\u6570\u7684\u683c\u70b9\u4e0e\u6e90\u70b9\u76f8\u8fde\uff0c\u5947\u6570\u5219\u4e3a\u6c47\u70b9\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u7684\u70b9\u6743\uff1b\n\n\u539f\u56e0\uff1a\u7a0d\u5fae\u89c2\u5bdf\u5c31\u4f1a\u53d1\u73b0\uff0c\u6bcf\u4e2a\u683c\u70b9\u4e0e\u4ed6\u5468\u56f4\u7684\u56db\u4e2a\u683c\u70b9\u7684**\u5750\u6807\u548c**\u7684**\u5947\u5076\u6027**\u4e0d\u540c\uff0c\u8bf4\u660e**\u76f8\u540c**\u5947\u5076\u6027\u7684\u683c\u70b9**\u4e0d\u4f1a\u76f8\u4e92\u6392\u65a5**\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5**\u540c\u65f6\u9009**\u3002\u6240\u4ee5\u5c06\u4e0d\u540c\u5947\u5076\u6027\u8fde\u5411\u4e0d\u540c\u7aef\u70b9\u5c31\u597d\u4e86\u3002\n\n- \u5982\u679c\u5750\u6807\u548c\u4e3a\u5076\u6570\uff08\u56e0\u4e3a\u5076\u6570\u4e0e**\u6c47\u70b9**\u76f8\u8fde\uff09\uff0c\u4ece\u5f53\u524d\u70b9\u5411\u5468\u56f4\u56db\u4e2a\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u6b63\u65e0\u7a77\uff0c\u610f\u4e3a\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e0d\u80fd**\u540c\u65f6**\u9009\u62e9\u3002\n\n- \u6700\u540e\uff0c\u5c31\u662f $dinic$ \u6a21\u677f\u6c42**\u6700\u5c0f\u5272**\u3002\n\n\n**\u5b8c\u6574\u4ee3\u7801**\uff1a\n\n```pascal\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\nusing namespace std;\n#define rt register int\n#define int long long\nconst int N = 1e4 + 10, M = 1e5 + 10,inf = 2e9;\nint n,m,S,T,tot = 1,head[N],cur[N],dep[N],f[M],ans;\nint a[4][2] = {{-1,0},{0,-1},{0,1},{1,0}};\nstruct node {\n\tint to,nex;\n}e[M];\ninline void add(int x,int y,int w) {\n\te[++tot] = (node) {y,head[x]}, f[tot] = w, head[x] = tot;\n\te[++tot] = (node) {x,head[y]}, head[y] = tot;\n}\ninline void read(int &x) {\n\tx = 0;\n\tint ff = 1; char s = getchar();\n\twhile(s < '0' || s > '9') {s = getchar();}\n\twhile(s <= '9' && s >= '0') { x = x * 10 + s - '0'; s = getchar();}\n\tx *= ff;\n}\ninline bool bfs() {\n\tmemset(dep,-1,sizeof(dep));\n\tdep[S] = 0, cur[S] = head[S];\n\tqueue<int> q;\n\tq.push(S);\n\tint now,ver;\n\twhile(!q.empty()) {\n\t\tnow = q.front();\n\t\tq.pop();\n\t\tfor(rt i = head[now]; i; i = e[i].nex) {\n\t\t\tver = e[i].to;\n\t\t\tif(dep[ver] == -1 && f[i]) {\n\t\t\t\tdep[ver] = dep[now] + 1, cur[ver] = head[ver];\n\t\t\t\tif(ver == T) return 1;\n\t\t\t\tq.push(ver);\n\t\t\t}\n\t\t}\n\t} \n\treturn 0;\n}\ninline int find(int x,int limit) {\n\tif(x == T) return limit;\n\tint ver,flow = 0,tmp;\n\tfor(rt i = cur[x]; i && flow < limit; i = e[i].nex) {\n\t\tcur[x] = i, ver = e[i].to;\n\t\tif(dep[ver] == dep[x] + 1 && f[i]) {\n\t\t\ttmp = find(ver,min(limit - flow,f[i]));\n\t\t\tif(!tmp) dep[ver] = -1;\n\t\t\tf[i] -= tmp, f[i ^ 1] += tmp, flow += tmp;\n\t\t}\n\t}\n\treturn flow;\n}\ninline int dinic() {\n\tint res = 0,flow;\n\twhile(bfs()) while(flow = find(S,inf)) res += flow;\n\treturn res;\n}\ninline int pos(int x,int y) {\n\treturn (x - 1) * m + y;\n}\nsigned main() {\n\tread(n), read(m);\n\tS = n * m + 1,T = n * m + 2;\n\tint x,tx,ty;\n\tfor(rt i = 1; i <= n; i ++) {\n\t\tfor(rt j = 1; j <= m; j ++) {\n\t\t\tread(x);\n\t\t\tans += x;\n\t\t\tif((i + j) & 1) add(pos(i,j),T,x);\n\t\t\telse {\n\t\t\t\tadd(S,pos(i,j),x);\n\t\t\t\tfor(rt k = 0; k < 4; k ++) {\n\t\t\t\t\ttx = i + a[k][0], ty = j + a[k][1];\n\t\t\t\t\tif(tx >= 1 && tx <= n && ty >= 1 && ty <= m) {\n\t\t\t\t\t\tadd(pos(i,j),pos(tx,ty),inf);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\",ans - dinic());\n\treturn 0;\n}\n```\n",
        "postTime": 1609337045,
        "uid": 140643,
        "name": "crescentic",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4474 \u3010\u738b\u8005\u4e4b\u5251\u3011"
    },
    {
        "content": "# \u9996\u5148\uff0c\u770b\u5230\u8fd9\u9053\u9898\uff0c\u8981\u5148%\u4e00\u4e0b\u543e\u738b\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/sgjbqdk8.png)![](https://cdn.luogu.com.cn/upload/image_hosting/ax592kql.png)\n\n### \u543e\u738b\u5446\u6bdb\u6240\u6307\uff0c\u543e\u7b49\u5fc3\u4e4b\u6240\u5411\n\n\u8bf4\u5b9e\u8bdd\uff0c\u8fd9\u9898\u6211\u5c31\u662f\u51b2\u7740\u543e\u738b\u6765\u7684......\u5728\u8fd9\u91cc\u80fd\u770b\u89c1$Fate$\u771f\u662f\u592a\u597d\u4e86\n\n\u597d\u4e86\u597d\u4e86\uff0c\u6211\u4eec\u770b\u9898\n\n\u65e2\u7136\u5b83\u662f\u7f51\u7edc\u6d41\uff0c\u90a3\u60f3\u5fc5\u90a3\u5c31\u96be\u5728\u5efa\u56fe\u4e86\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u9009\u8fc7\u4e00\u4e2a\u70b9\u540e\uff0c\u56db\n\n\u5468\u7684\u70b9\u5c31\u4e0d\u80fd\u9009\u4e86\uff0c\u6240\u4ee5\u4f60\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\u5bf9\u4e86\uff0c\u4e8c\u5206\u56fe\u6700\u5927\u6743\u72ec\u7acb\u96c6\uff0c\u663e\u7136\n\n\u6211\u4eec\u662f\u53ef\u4ee5\u7531\u6b64\u70b9\u5411\u56db\u5468\u8fde\u8fb9\u7684\uff0c\u73b0\u5728\u5c11\u4e00\u4e2a\u6e90\u70b9\u4e0e\u6c47\u70b9\uff0c\u90a3\u6211\u4eec\u4fbf\u8bbe$S=0$\n\n$T=m*n+1$\u518d\u7531\u9ed1\u767d\u67d3\u8272\u7684\u601d\u60f3\uff0c\u5947\u70b9\u8fde$S$\uff0c\u5076\u70b9\u8fde$T$\uff0c\u5efa\u56fe\u5c31\u89e3\u51b3\u4e86\uff0c\u90a3\n\n\u4e48\u5269\u4e0b\u5c31\u597d\u529e\u4e86\uff0c\u5c31\u662f\u6c42\u4e00\u4e2a\u6700\u5c0f\u5272\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u6d41\uff0c\u90a3\u6211\u4eec\u5957\u4e00\u4e2a$Dinic$\n\n\u7684\u677f\u5b50\u5c31\u597d\u4e86\uff0c\u5f53\u524d\u5f27\u4f18\u5316\u7684\uff0c\u4e0d\u8fc7\u7531\u4e8e\u672c\u4eba\u5341\u5206\u4e2d\u4e8c\uff0c\u52a0\u4e0a\u76ee\u524d\u7279\u522b\u5174\u594b\n\n$So$\uff0c\u53d8\u91cf\u540d\u7ed9\u4e2a\u597d\u8bc4\u5457\uff08~~\u574f\u7b11~~\uff09\n\n## code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#define R register\n#define inf 1e9+7\n\nusing namespace std;\nconst int Excalibur = 10005;//N\u6216MAXN\nint n, m, S, T, cur[Excalibur], dep[Excalibur];\nstruct saber {//edge\uff0c\u6211\u7684\u738b\n\tint nxt, to, v;\n}rin[Excalibur<<3];//\u662f\u51db\u54e6\nint Lancer[Excalibur], Fate = 1, Archar;//emmm\uff0chead\u548ctot\u4ee5\u53casum\nint x[5] = {0, -1, 0, 1, 0}, y[5] = {0, 0, -1, 0, 1};\n\ninline void add(int from, int to, int v) {\n\trin[++Fate].v = v;\n\trin[Fate].to = to;\n\trin[Fate].nxt = Lancer[from];\n\tLancer[from] = Fate;\n}\n\ninline bool bfs(int s, int t) {\n\tqueue<int> Rider;//q\n\tfor(R int i = 0;i <= T;++ i) cur[i] = Lancer[i], dep[i] = 0;\n\tRider.push(s); dep[s] = 1;\n\twhile(!Rider.empty()) {\n\t\tR int vi = Rider.front();\n\t\tRider.pop();\n\t\tfor(R int i = Lancer[vi]; i ;i = rin[i].nxt) {\n\t\t\tR int vc = rin[i].to;\n\t\t\tif(!dep[vc] && rin[i].v) {\n\t\t\t\tdep[vc] = dep[vi] + 1;\n\t\t\t\tRider.push(vc);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t];\n}\n\nint dfs(int s, int t, int flow) {\n\tif(!flow || s == t) return flow;\n\tint Caster = 0, Assassin;//\u589e\u91cf\n\tfor(R int i = cur[s]; i ;i = rin[i].nxt) {\n\t\tR int vc = rin[i].to;\n\t\tcur[s] = i;\n\t\tif(dep[vc] == dep[s] + 1 && rin[i].v) {\n\t\t\tAssassin = dfs(vc, t, min(flow, rin[i].v));\n\t\t\tif(!Assassin) continue;\n\t\t\tCaster += Assassin; flow -= Assassin;\n\t\t\trin[i].v -= Assassin; rin[i ^ 1].v += Assassin;\n\t\t\tif(!flow) return Caster;\n\t\t}\n\t}\n\treturn Caster;\n}\n\nint Dinic() {\n\tint res = 0;\n\twhile(bfs(S, T)) res += dfs(S, T, inf);\n\treturn Archar - res;\n}\n\nint main() {\n\tscanf(\"%d%d\",&n, &m);\n    //\u4ee5\u4e0b\u662f\u5efa\u56fe\uff0c\u4e2d\u4e8c\u5230\u6b64\u7ed3\u675f\n\tS = 0, T = n * m + 1;\n\tfor(R int i = 1;i <= n;++ i)\n\t\tfor(R int j = 1;j <= m;++ j) {\n\t\t\tR int v; scanf(\"%d\",&v);\n\t\t\tArchar += v;\n\t\t\tR int p = (i - 1) * m + j;\n\t\t\tif((i + j) & 1) { add(S, p, v);add(p, S, 0); }\n\t\t\telse { add(p, T, v);add(T, p, 0); }\n\t\t}\n\tfor(R int i = 1;i <= n;++ i) for(R int j = 1;j <= m;++ j)\n\t\tif((i + j) & 1)\n\t\t\tfor(R int k = 1;k <= 4;++ k) {\n\t\t\t\tR int f = i + x[k], g = j + y[k];\n\t\t\t\tif(f < 1 || f > n || g < 1 || g > m) continue;\n\t\t\t\tR int u = (i - 1) * m + j, v = (f - 1) * m + g;\n\t\t\t\tadd(u, v, inf); add(v, u, 0);\n\t\t\t}\n\tprintf(\"%d\",Dinic());\n\treturn 0;\n}\n```\n",
        "postTime": 1569501130,
        "uid": 160654,
        "name": "\u707c\u773c\u7684\u590f\u5a1c",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4474 \u3010\u738b\u8005\u4e4b\u5251\u3011"
    },
    {
        "content": "\u6559\u7ec3\u7559\u7684\u7f51\u7edc\u6d41\u4f5c\u4e1a\uff0c\u6211\u770b\u89c1$Saber$\u5c31\u51b2\u8fdb\u6765\u4e86\uff0c\u80fd\u770b\u5230\u8fd9\u4e48\u4e00\u9053\u9898\u6708\u53a8\u6df1\u611f\u6b23\u6170\u3002\n\n\u7136\u540e\u770b\u9898\u3002\u8bf6\uff1f\u8ddf\u65b9\u683c\u53d6\u6570\u4e00\u6837\u7684\uff0c\u5199\u4e00\u53d1`ISAP`\u5c31\u5207\u4e86\u3002\n\n## \u5efa\u56fe\n\n- \u8bbe$0$\u4e3a\u539f\u70b9\uff0c$n \\times m + 1$\u4e3a\u6c47\u70b9\uff0c\u628a\u68cb\u76d8\u91cc\u7684\u70b9\u5168\u90e8\u6620\u5c04\u5230$[1, n \\times m]$\u7684\u8282\u70b9\n- \u5bf9\u4e8e$\\forall i \\in black$\uff0c\u4ece$0$\u5411$i$\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u8be5\u70b9\u6570\u5b57\n- \u5bf9\u4e8e$\\forall j \\in white$\uff0c\u4ece$j$\u5411$n \\times m + 1$\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u8be5\u70b9\u6570\u5b57\n- \u5bf9\u4e8e$\\forall i \\in black$\uff0c\u4ece$i$\u5411\u4e0a\u4e0b\u5de6\u53f3\u7684\u767d\u70b9\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a$\\infty$\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u7528\u6570\u5b57\u603b\u548c\u51cf\u53bb\u5b83\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n\u6307\u9488\u7248`ISAP`\uff0c\u6709\u5f53\u524d\u5f27\u4f18\u5316\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <queue>\n#include <cstring>\n\nusing namespace std;\n\nconst int MAXN = 105;\nconst int INF = 0x3f3f3f3f;\n\nint m, n;\n\nstruct Edge{\n    int to, val;\n    Edge *next, *ops;\n    Edge(int to, int val, Edge *next): to(to), val(val), next(next){}\n};\n\nEdge *head[MAXN * MAXN], *cur[MAXN * MAXN];\n\nint ID(int x, int y) {\n    return (x - 1) * n + y;\n}\n\nvoid AddEdge(int u, int v, int w) {\n    head[u] = new Edge(v, w, head[u]);\n    head[v] = new Edge(u, 0, head[v]);\n    head[u]->ops = head[v]; head[v]->ops = head[u];\n}\n\nint dep[MAXN * MAXN], gap[MAXN * MAXN];\nint s, t, res;\n\nvoid Bfs() {\n    memset(dep, -1, sizeof(dep));\n    memset(gap, 0, sizeof(gap));\n    dep[t] = 0; gap[0]++;\n    queue<int> q; q.push(t);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        for (Edge *e = head[u]; e; e = e->next) {\n            int v = e->to;\n            if (dep[v] != -1) continue;\n            q.push(v);\n            dep[v] = dep[u] + 1;\n            gap[dep[v]]++;\n        }\n    }\n}\n\nint Dfs(int u, int flow) {\n    if (u == t) {\n        res += flow;\n        return flow;\n    }\n    int used = 0;\n    for (Edge *&e = cur[u]; e; e = e->next) {\n        int v = e->to;\n        if (e->val && dep[v] == dep[u] - 1) {\n            int mi = Dfs(v, min(e->val, flow - used));\n            if (mi) {\n                e->val -= mi;\n                e->ops->val += mi;\n                used += mi;\n            }\n            if (used == flow) return used;\n        }\n    }\n    cur[u] = head[u];\n    gap[dep[u]]--;\n    if (gap[dep[u]] == 0) dep[s] = n * m + 3;\n    dep[u]++;\n    gap[dep[u]]++;\n    return used;\n}\n\nvoid Work() {\n    memcpy(cur, head, sizeof(head));\n    res = 0;\n    Bfs();\n    while (dep[s] <= n * m + 2) Dfs(s, INF);\n}\n\nint num[MAXN][MAXN];\n\nint main() {\n    ios :: sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n    cin >> m >> n;\n    s = 0; t = n * m + 1;\n    int sum = 0;\n    for (int i = 1; i <= m; i++)\n        for (int j = 1; j <= n; j++)\n            cin >> num[i][j], sum += num[i][j];\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if ((i + j) % 2 == 1) {\n                AddEdge(0, ID(i, j), num[i][j]);\n                if (i > 1) AddEdge(ID(i, j), ID(i - 1, j), INF);\n                if (i < m) AddEdge(ID(i, j), ID(i + 1, j), INF);\n                if (j > 1) AddEdge(ID(i, j), ID(i, j - 1), INF);\n                if (j < n) AddEdge(ID(i, j), ID(i, j + 1), INF);\n            } else {\n                AddEdge(ID(i, j), n * m + 1, num[i][j]);\n            }\n        }\n    }\n    Work();\n    cout << sum - res << endl;\n    return 0;\n}\n```\n\n~~\u5982\u679c\u505a\u8fc7\u65b9\u683c\u53d6\u6570\u7684\u8bdd\uff0c\u76f4\u63a5\u62f7\u8d1d\u8fdb\u6765\u5c31A\u4e86\uff0c\u6ce8\u610f\u4e0b\u6570\u7ec4\u5927\u5c0f~~",
        "postTime": 1563500512,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4474 \u3010\u738b\u8005\u4e4b\u5251\u3011"
    },
    {
        "content": "[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P2774)\n\n[\u53ef\u80fd\u6709\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/zheyuanxie/p/p4474.html)\n\n## \u7b80\u8981\u9898\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a $n\\times m$ \u7684\u7f51\u683c\uff0c\u6570\u5b57\u5728\u683c\u5b50\u91cc\uff0c\u4f60\u9700\u8981\u53d6\u51fa\u4e00\u4e9b\u683c\u5b50\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u683c\u5b50\u4e4b\u95f4\u6ca1\u6709\u516c\u5171\u8fb9\uff0c\u8f93\u51fa\u683c\u5b50\u4e2d\u7684\u6570\u5b57\u548c\u7684\u6700\u5927\u503c\u3002\n\n$1 \\le n,m \\le 100$\n\n## \u601d\u8def\n\n\u5982\u679c\u6211\u4eec\u80fd\u628a\u516c\u5171\u8fb9\u7684\u5173\u7cfb\u523b\u753b\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u5c31\u662f\u5728\u6c42\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u9996\u5148\u6211\u4eec\u5c06\u6709\u516c\u5171\u8fb9\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff0c\u4f46\u662f\u5982\u679c\u90fd\u8fde\u4e0a\u5c31\u4e0d\u662f\u4e8c\u5206\u56fe\u4e86\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u642c\u51fa\u4e8c\u5206\u56fe\u5efa\u6a21\u7684\u57fa\u672c\u601d\u8def\u2014\u2014\u9ed1\u767d\u67d3\u8272\uff01\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u7f51\u683c\u9ed1\u767d\u67d3\u8272\uff08\u5c31\u50cf\u56fd\u9645\u8c61\u68cb\u68cb\u76d8\u90a3\u6837\uff09\uff0c\u5bf9\u767d\u8272\u7684\u70b9\uff0c\u8fde\u5411\u8ddf\u5b83\u6709\u516c\u5171\u8fb9\u7684\u70b9\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u6837\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u767d\u8272\u8fde\u5411\u9ed1\u8272\uff0c\u6ee1\u8db3\u4e8c\u5206\u56fe\u5b9a\u4e49\u3002\n\n\u6700\u540e\u6211\u4eec\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9 $S$\uff0c\u8fde\u5411\u767d\u70b9\uff0c\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9 $T$\uff0c\u6240\u6709\u9ed1\u70b9\u8fde\u5411\u5b83\u3002\u8dd1\u6700\u5927\u6d41\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u662f\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff08\u4e8c\u5206\u56fe\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\uff09\uff0c\u7136\u540e\u7528\u4e8c\u5206\u56fe\u70b9\u6570\u51cf\u53bb\u5b83\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\u9644\u4e0a\u6837\u4f8b\u5efa\u7acb\u7684\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z9gibt0j.png)\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define l(i,j) ((i-1)*m+j)\n#define int long long\nusing namespace std;\nint n,m,s,t;\n\nnamespace MaxFlow{\n\tstruct edge{\n\t\tint from,to,val;\n\t}e[200001];int head[200001],cur[200001],siz=1;\n\tvoid add(int x,int y,int z){\n\t\te[++siz].to=y,e[siz].val=z;\n\t\te[siz].from=head[x],head[x]=siz;\n\t}\n\tvoid addedge(int x,int y,int z){\n\t\tadd(x,y,z);add(y,x,0);\n\t}\n\tint gap[200001];\n\tbool bfs(){\n\t\tmemset(gap,0,sizeof(gap));\n\t\tfill(gap+1,gap+1+n,0);\n\t\tqueue<int> q;\n\t\tq.push(s);\n\t\tgap[s]=1;\n\t\twhile(!q.empty()){\n\t\t\tint now=q.front();\n\t\t\tq.pop();\n\t\t\tfor(int i=head[now];i;i=e[i].from){\n\t\t\t\tint u=e[i].to;\n\t\t\t\tif(e[i].val&&!gap[u]){\n\t\t\t\t\tgap[u]=gap[now]+1;\n\t\t\t\t\tq.push(u);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (gap[t]);\n\t}\n\tint dfs(int now,int val){\n\t\tif(now==t) return val;\n\t\tfor(int &i=cur[now];i;i=e[i].from){\n\t\t\tint u=e[i].to;\n\t\t\tif(e[i].val&&gap[now]+1==gap[u]){\n\t\t\t\tint F=dfs(u,min(e[i].val,val));\n\t\t\t\tif(F){\n\t\t\t\t\te[i].val-=F;\n\t\t\t\t\te[i^1].val+=F;\n\t\t\t\t\treturn F;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tint dinic(){\n\t\tint ret=0;\n\t\twhile(bfs()){\n\t\t\tcopy(head,head+1+n,cur);\n\t\t\tint F=0;\n\t\t\twhile(F=dfs(s,10000000000000)){\n\t\t\t\tret+=F;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n}\n\nint sum;\n\nconst int delta[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};\nsigned main(){\n\tcin>>n>>m;\n\ts=0,t=m*n+1;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tint w;\n\t\t\tcin>>w;\n\t\t\tsum+=w;\n\t\t\tif((i+j)%2){\n\t\t\t\tMaxFlow::addedge(l(i,j),t,w);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tMaxFlow::addedge(s,l(i,j),w);\n\t\t\t\tfor(int k=0;k<=3;k++){\n\t\t\t\t\tint x=i+delta[k][0],y=j+delta[k][1];\n\t\t\t\t\tif((x>=1&&x<=n)&&(y>=1&&y<=m)){\n\t\t\t\t\t\tMaxFlow::addedge(l(i,j),l(x,y),LLONG_MAX);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tn=t;\n\tcout<<sum-MaxFlow::dinic()<<'\\n';\n\treturn 0;\n}\n```",
        "postTime": 1662964998,
        "uid": 413065,
        "name": "xiezheyuan",
        "ccfLevel": 5,
        "title": "\u9898\u89e3P4474 \u738b\u8005\u4e4b\u5251"
    },
    {
        "content": "**\u7b26\u53f7\u7ea6\u5b9a\uff1a**\n\n$u \\to v$ \u7ed3\u70b9 $u$ \u5230\u7ed3\u70b9 $v$ \u7684\u8fb9\u3002\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P4474)\n\n**\u9898\u76ee\u5927\u610f\uff1a** \n\n\u7ed9\u5b9a\u4e00\u4e2a $n \\times m$ \u7684\u7f51\u683c\u56fe\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e00\u4e2a\u6743\u503c $v_{x,\\,y}$\uff0c\u53ef\u9009\u62e9\u4efb\u610f\u70b9\u4f5c\u4e3a\u521d\u59cb\u70b9\u3002\n\n\u521d\u59cb\u65f6\u95f4\u4e3a $0$\uff0c\u5f53\u884c\u8fdb\u5230\u7b2c $i$ \u79d2\u7684\u65f6\u5019\uff0c\u6709\u5982\u4e0b\u60c5\u51b5\uff1a\n\n1. \u7b2c $i$ \u79d2\u5f00\u59cb\u65f6\uff0c\u5728\u4f4d\u7f6e $(x,\\,y)$ \u4e0a\uff0c\u5219\u53ef\u4ee5\u5c06\u603b\u8d21\u732e\u52a0\u4e0a $v_{x,\\,y}$\u3002\n\n2. \u5728\u5076\u6570\u79d2\uff0c\u5728\u4f4d\u7f6e $(x,\\,y)$ \u4e0a\u3002\u5219\u4ee3\u8868 $(x - 1,\\,y)$\u3001$(x + 1,\\,y)$\u3001$(x,\\,y - 1)$ \u548c $(x,\\,y + 1)$ \u7684\u7ed3\u70b9\u8d21\u732e\u6e05\u96f6\u3002\n\n3. \u82e5\u7b2c $i$ \u79d2\u4f4d\u4e8e\u4f4d\u7f6e $(x,\\,y)$ \u4e0a\uff0c\u5219\u7b2c $i + 1$ \u79d2\u53ef\u4ee5\u8f6c\u79fb\u5230\u4f4d\u7f6e $(x - 1,\\,y)$\u3001$(x + 1,\\,y)$\u3001$(x,\\,y - 1)$ \u548c $(x,\\,y + 1)$\u3002\n\n**\u89e3\u51b3\u65b9\u6cd5\uff1a**\n\n\u5047\u8bbe\u5f53\u524d\u5df2\u7ecf\u8d70\u5230 $(x,\\,y)$\uff0c\u8003\u8651\u5bf9\u65f6\u95f4\u5947\u5076\u6027\u5206\u7c7b\u8ba8\u8bba\u3002\n\n- \u5f53\u524d\u65f6\u95f4\u4e3a\u5947\u6570\uff0c\u5219\u4e0a\u4e00\u79d2\u7684\u65f6\u95f4\u5fc5\u7136\u4e3a\u5076\u6570\uff0c\u4e5f\u5c31\u662f\u5728\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u65f6\uff0c\u5f53\u524d\u7ed3\u70b9\u7684\u8d21\u732e\u5df2\u7ecf\u6e05\u96f6\uff0c\u6545\u4e0d\u80fd\u52a0\u4e0a\u5f53\u524d\u7ed3\u70b9\u7684\u8d21\u732e\u3002\n\n- \u5f53\u524d\u65f6\u95f4\u4e3a\u5076\u6570\uff0c\u5219\u4e0a\u4e00\u79d2\u7684\u65f6\u95f4\u5fc5\u7136\u4e3a\u5947\u6570\uff0c\u663e\u7136\u53ef\u4ee5\u52a0\u4e0a\u5f53\u524d\u7ed3\u70b9\u7684\u8d21\u732e\uff0c\u5f53\u4e0d\u53ef\u4ee5\u52a0\u4e0a\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u7684\u8d21\u732e\u3002\n\n\u6700\u540e\u8003\u8651\u52a0\u8fdb\u8d21\u732e\u91cc\u7684\u70b9\uff0c\u53ef\u4ee5\u53d1\u73b0**\u76f8\u90bb\u7ed3\u70b9\u5fc5\u4e0d\u53ef\u80fd\u540c\u65f6\u88ab\u52a0\u5165\u8d21\u732e\u3002**\n\n\u8bc1\u660e\u663e\u7136\uff0c\u76f8\u90bb\u7ed3\u70b9\u7684\u5947\u5076\u6027\u5fc5\u7136\u4e0d\u76f8\u540c\uff0c\u5219\u4e24\u70b9\u4e4b\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u7ed3\u70b9\u5230\u8fbe\u7684\u65f6\u95f4\u4e3a\u5076\u6570\uff0c\u5219\u53e6\u4e00\u4e2a\u70b9\u7684\u8d21\u732e\u5c31\u4f1a\u88ab\u6e05\u7a7a\uff0c\u56e0\u6b64\u76f8\u90bb\u7ed3\u70b9\u4e0d\u4f1a\u540c\u65f6\u88ab\u52a0\u5165\u8d21\u732e\u3002\n\n\u63a5\u7740\uff0c\u6211\u4eec\u8003\u8651\u4ece\u5168\u5c40\u7684\u89d2\u5ea6\u89c2\u5bdf\u6c42\u89e3\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u63a8\u65ad\uff0c\u5f53\u4ecd\u7136\u6709\u672a\u88ab\u6e05\u7a7a\u7684\u7ed3\u70b9\u65f6\uff0c\u5f53\u524d\u7ed3\u679c\u5fc5\u7136\u4e0d\u5927\u4e8e\u6700\u4f18\u89e3\uff08\u663e\u7136\uff0c\u56e0\u4e3a\u6240\u6709\u7ed3\u70b9\u7684\u8d21\u732e\u90fd\u4e0d\u4f4e\u4e8e\u96f6\uff09\n\n\u90a3\u4e48\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a**\u4ece\u56fe\u4e2d\u53d6\u6570\uff0c\u4f7f\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u6ca1\u6709\u516c\u5171\u8fb9\uff0c\u4e14\u53d6\u51fa\u7684\u6570\u7684\u603b\u548c\u6700\u5927\uff0c\u8bf7\u6c42\u51fa\u6700\u5927\u7684\u548c\u3002**\n\n\u8fd9\u5c31\u662f**\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3002**\n\n\u8001\u5957\u8def\uff0c\u9ed1\u767d\u67d3\u8272\uff0c\u5efa\u8d85\u7ea7\u6e90\u6c47\uff0c\u4ece $s$ \u5411\u6240\u6709\u9ed1\u70b9\u8fde\u5bb9\u91cf\u4e3a\u8be5\u70b9\u8d21\u732e\u7684\u8fb9\uff0c\u6240\u4ee5\u9ed1\u7ed3\u70b9\u5411\u76f8\u90bb\u767d\u7ed3\u70b9\u8fde\u5bb9\u91cf\u4e3a $+\\infty$ \u7684\u8fb9\uff0c\u6700\u540e\u6240\u6709\u767d\u70b9\u5411 $t$ \u8fde\u5bb9\u91cf\u4e3a\u8be5\u70b9\u8d21\u732e\u7684\u8fb9\uff0c\u6b64\u65f6\u8981\u4e48\u662f\u6e90\u70b9\u51fa\u53bb\u7684\u8fb9\u88ab\u5272\uff0c\u8981\u4e48\u662f\u5230\u6c47\u70b9\u7684\u8fb9\u6ca1\u5272\uff0c\u6b64\u65f6\u7684\u6700\u5c0f\u5272\u5c31\u662f\u6240\u6709\u4e0d\u88ab\u53d6\u51fa\u7684\u65b9\u683c\u7684\u603b\u8d21\u732e\u3002\n\n\u6d45\u6d45\u8bc1\u660e\u4e00\u4e0b\uff08\u5176\u5b9e\u53ef\u4ee5\u5de6\u8f6c\u65b9\u683c\u53d6\u6570\u95ee\u9898\u7684\u9898\u89e3\uff09\uff1a\n\n\u5c06**\u88ab\u5272\u6389\u7684\u8fb9\u8868\u793a\u4e3a\u4e0d\u9009\u8fd9\u4e2a\u70b9**\uff0c\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5047\u8bbe\u4e00\u4e2a\u9ed1\u70b9 $u$\uff0c$s \\to u$ \u7684\u8fd9\u6761\u8fb9\u56e0\u4e3a\u8d70\u4e86\u5176\u4ed6\u767d\u70b9\u800c\u6ee1\u6d41\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u4f1a\u9009\u62e9\u8fd9\u4e2a\u70b9 $u$\uff1b\u5982\u679c $u$ \u662f\u767d\u70b9\uff0c$u \\to t$ \u7684\u8fd9\u6761\u8fb9\u6ee1\u6d41\u4e86\uff0c\u6211\u4eec\u4e5f\u4e0d\u4f1a\u9009\u62e9\u8fd9\u4e2a\u70b9\u3002\u800c\u9ed1\u70b9\u5230\u767d\u70b9\u7684\u8fb9\u662f\u4e0d\u53ef\u80fd\u88ab\u5272\u6389\u7684\u3002\uff08\u56e0\u4e3a\u5bb9\u91cf\u4e3a  $+\\infty$\uff09\n\n\u9996\u5148\uff0c\u6211\u4eec\u8bc1\u660e\u8fd9\u4e2a\u65b9\u6848\u7684**\u5408\u6cd5\u6027**\uff0c\u8003\u8651\u53cd\u8bc1\u6cd5\uff0c\u5982\u679c\u8dd1\u5b8c\u6700\u5c0f\u5272\u4e4b\u540e\u5b58\u5728\u4e24\u4e2a\u4e92\u65a5\u7684\u7ed3\u70b9 $u$ \u548c $v$\uff0c**\u663e\u7136 $u,\\,v$ \u989c\u8272\u4e92\u5f02**\u3002\u5047\u8bbe $u$ \u4e3a\u9ed1\u70b9\uff0c$v$ \u4e3a\u767d\u70b9\uff0c\u5219 **$s \\to u$ \u8fd9\u6761\u8fb9\u4e0e $v \\to t$ \u8fd9\u6761\u8fb9\u90fd\u5b58\u5728\u4e14\u5bb9\u91cf\u4e0d\u4e3a $0$**\u3002\u6b64\u65f6\u5219\u5b58\u5728\u4e00\u4e2a\u6743\u503c\u5927\u4e8e $0$ \u7684\u589e\u5e7f\u8def $s \\to u \\to v \\to t$\uff0c\u4e0e\u6700\u5927\u6d41\u540e\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u77db\u76fe\uff0c\u56e0\u6b64 $s \\to u$ \u548c $v \\to t$ \u4e2d\u5fc5\u7136\u6709\u4e00\u6761\u8fb9\u88ab\u5272\u6389\uff08\u4e0d\u53ef\u80fd\u5272\u6389 $u \\to v$ \u8fd9\u6761\u8fb9\uff0c\u8fd8\u662f\u56e0\u4e3a\u5bb9\u91cf\u4e3a $+\\infty$\uff09\u3002\u56e0\u6b64**\u8be5\u65b9\u6848\u662f\u4e25\u683c\u6ee1\u8db3\u5408\u6cd5\u6027\u7684**\u3002\n\n\u518d\u6765\u8bc1\u660e\u8fd9\u4e2a\u65b9\u6848\u7684**\u6700\u4f18\u6027\uff1a**\n\n- **\u5f15\u7406 $1$\uff1a** \u4efb\u610f\u5272\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u9009\u53d6\u4e4b\u540e\uff0c\u5fc5\u7136\u6ee1\u8db3\u5408\u6cd5\u6027\u3002\n\n\u8bc1\u660e\u663e\u7136\uff0c\u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be\u3002\n\n- **\u5f15\u7406 $2$\uff1a** \u5f15\u7406 $1$ \u7684\u9006\u547d\u9898\uff0c\u4efb\u610f\u5408\u6cd5\u65b9\u6848\u5fc5\u5b9a\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u5272\u3002\n\n\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u5f53\u524d\u65b9\u6848\u4e0d\u4e0e\u4efb\u610f\u4e00\u4e2a\u5272\u76f8\u5bf9\u5e94\uff0c\u5219\u9009\u53d6\u4e4b\u540e\u5fc5\u7136\u6709\u76f8\u90bb\u7ed3\u70b9\u88ab\u9009\u62e9\uff0c\u624d\u80fd\u4fdd\u8bc1\u5f53\u524d\u65b9\u6848\u4e0d\u662f\u4e00\u4e2a\u5272\uff0c\u800c\u7531\u4e8e\u76f8\u90bb\u7ed3\u70b9\u4e0d\u80fd\u88ab\u9009\u53d6\uff0c\u56e0\u6b64\u8be5\u65b9\u6848\u4e0d\u6ee1\u8db3\u5408\u6cd5\u6027\uff0c\u56e0\u6b64\u4efb\u610f\u5408\u6cd5\u65b9\u6848\u5fc5\u5b9a\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u5272\u3002\n\n- **\u5f15\u7406 $3$\uff1a** \u4efb\u610f\u5408\u6cd5\u65b9\u6848\u7684\u6743\u503c\uff08**\u5373\u4e0d\u9009\u53d6\u8be5\u65b9\u6848\u7684\u7ed3\u70b9\u540e\uff0c\u5176\u4f59\u7ed3\u70b9\u7684\u6743\u503c\u548c**\uff09\u7b49\u4e8e\u603b\u6743\u503c\u51cf\u53bb\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5272\u7684\u6743\u503c\u3002\n\n\u663e\u7136\uff0c\u8be5\u5f15\u7406\u7b49\u4ef7\u4e8e\u4efb\u610f\u5408\u6cd5\u65b9\u6848\u6240\u5305\u542b\u7684\u70b9\u6743\u503c\u7b49\u4e8e\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5272\u7684\u6743\u503c\u3002\n\n\u5047\u8bbe\u5f53\u524d\u7ed3\u70b9 $u$ \u5305\u542b\u4e8e\u8be5\u65b9\u6848\u4e2d\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n1. $u$ \u4e3a\u9ed1\u70b9\uff0c\u5219\u8dd1\u5b8c\u6700\u5c0f\u5272\u540e $s \\to u$ \u5728\u6b8b\u4f59\u7f51\u7edc\u4e2d\u7684\u6743\u503c\u4e3a $0$\uff0c\u6b64\u65f6\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a\u8be5\u8fb9\u7684\u6d41\u91cf\uff0c\u4e5f\u5373\u8be5\u8fb9\u7684\u5bb9\u91cf\uff0c\u663e\u7136\u4e3a\u8be5\u7ed3\u70b9\u7684\u6743\u503c\u3002\n\n2. $u$ \u4e3a\u767d\u70b9\uff0c\u5219\u8dd1\u5b8c\u6700\u5c0f\u5272\u540e $u \\to t$ \u5728\u6b8b\u4f59\u7f51\u7edc\u4e2d\u7684\u6743\u503c\u4e3a $0$\uff0c\u6b64\u65f6\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a\u8be5\u8fb9\u7684\u6d41\u91cf\uff0c\u4e5f\u5373\u8be5\u8fb9\u7684\u5bb9\u91cf\uff0c\u663e\u7136\u4e3a\u8be5\u7ed3\u70b9\u7684\u6743\u503c\u3002\n\n\u56e0\u4e3a\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e0e\u7ed3\u70b9 $u$ \u6743\u503c\u76f8\u7b49\uff0c\u56e0\u6b64\u4efb\u610f\u5408\u6cd5\u65b9\u6848\u6240\u5305\u542b\u7684\u70b9\u6743\u503c\u7b49\u4e8e\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5272\u7684\u6743\u503c\u3002\n\n\u5f15\u7406 $3$ \u5f97\u8bc1\u3002\n\n**\u603b\u8bc1\u660e\uff1a**\n\n\u6839\u636e\u5f15\u7406 $2$\uff0c**\u4efb\u610f\u5408\u6cd5\u65b9\u6848\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u5272**\uff0c\u53c8\u6839\u636e\u5f15\u7406 $3$\uff0c**\u8be5\u5408\u6cd5\u65b9\u6848\u7684\u6743\u503c\u4e0e\u603b\u6743\u503c\u51cf\u53bb\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5272\u7684\u6743\u503c\u76f8\u7b49**\uff0c\u663e\u7136\u7ed3\u70b9\u7684\u603b\u6743\u503c $w$ \u4e3a\u4e00\u5e38\u6570\u3002\u5219\u8981\u4f7f\u5f97\u65b9\u6848\u6700\u4f18\uff0c\u5373**\u4f7f\u5f97\u8be5\u65b9\u6848\u5bf9\u5e94\u7684\u5272\u6743\u503c\u6700\u5c0f**\uff0c\u663e\u7136\u6700\u5c0f\u5272\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u53c8\u56e0\u4e3a\u5f15\u7406 $1$\uff0c**\u6700\u5c0f\u5272\u5fc5\u5b9a\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848**\uff0c\u56e0\u6b64\u8be5\u65b9\u6848\u540c\u65f6\u5177\u6709\u5408\u6cd5\u6027\u548c\u6700\u4f18\u6027\uff0c**\u8be5\u65b9\u6848\u4e3a\u4e00\u4e2a\u6700\u4f18\u65b9\u6848\u3002**\n\n$\\text{Q.E.D.}$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define inf 1000000000000000\n#define V 100010\n#define E 5000010\ntypedef long long int ll;\nstruct edge {\n\tint to, next;\n\tll capa;\n};\nint cnt = 0, head[V], n, m; edge node[E];\ninline void add(int fir, int nxt, ll w) {\n\tnode[cnt].to = nxt,\n\t\tnode[cnt].capa = w,\n\t\tnode[cnt].next = head[fir],\n\t\thead[fir] = cnt++;\n}\nint s, t, dep[V], gap[V], cur[V]; queue<int>que; ll sum = 0;\ninline void initing() {\n\tmemset(dep, -1, V * sizeof(int));\n\tmemcpy(cur, head, (t + 1) * sizeof(int));\n}\ninline void bfs() {\n\tint fro, ito;\n\tque.push(t); dep[t] = 0; ++gap[dep[t]];\n\twhile (!que.empty()) {\n\t\tfro = que.front(); que.pop();\n\t\tfor (register int i = head[fro]; i != -1; i = node[i].next) {\n\t\t\tito = node[i].to;\n\t\t\tif (dep[ito] == -1) {\n\t\t\t\tdep[ito] = dep[fro] + 1;\n\t\t\t\tque.push(ito);\n\t\t\t\t++gap[dep[ito]];\n\t\t\t}\n\t\t}\n\t}\n}\nll dfs(int u, ll flow) {\n\tif (u == t || flow == 0)return flow; ll used = 0, wei = 0;\n\tfor (register int i = cur[u]; i != -1; i = node[i].next) {\n\t\tcur[u] = i;\n\t\tif (dep[u] == dep[node[i].to] + 1 && node[i].capa) {\n\t\t\twei = dfs(node[i].to, min(flow - used, node[i].capa));\n\t\t\tif (wei) {\n\t\t\t\tnode[i].capa -= wei;\n\t\t\t\tnode[i ^ 1].capa += wei;\n\t\t\t\tused += wei;\n\t\t\t}\n\t\t}\n\t\tif (used == flow)return used;\n\t}\n\t--gap[dep[u]];\n\tif (!gap[dep[u]])dep[s] = t + 1;\n\t++gap[++dep[u]];\n\treturn used;\n}\nll ISAP() {\n\tiniting(); bfs();\n\twhile (dep[s] < t) {\n\t\tsum += dfs(s, inf);\n\t\tmemcpy(cur, head, (t + 1) * sizeof(int));\n\t}\n\treturn sum;\n}\ninline void addE(int u, int v, ll w) {\n\tadd(u, v, w);\n\tadd(v, u, 0);\n}\ninline int bh(int x, int y) { return (x - 1) * m + y; }\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(); cout.tie();\n\tmemset(head, -1, V * sizeof(int));\n\tcin >>  n >> m; s = n * m + 1, t = n * m + 2;\n\tll w, flow = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= m; j++) {\n\t\t\tcin >> w; flow += w;\n\t\t\tif ((i + j) & 1) {\n\t\t\t\taddE(s, bh(i, j), w);\n\t\t\t\tif (i - 1)addE(bh(i, j), bh(i - 1, j), inf);\n\t\t\t\tif (i + 1 <= n)addE(bh(i, j), bh(i + 1, j), inf);\n\t\t\t\tif (j - 1)addE(bh(i, j), bh(i, j - 1), inf);\n\t\t\t\tif (j + 1 <= m)addE(bh(i, j), bh(i, j + 1), inf);\n\t\t\t}\n\t\t\telse addE(bh(i, j), t, w);\n\t\t}\n\t}\n\tcout << flow - ISAP();\n\treturn 0;\n}\n```\n",
        "postTime": 1661346723,
        "uid": 551861,
        "name": "wql_cai",
        "ccfLevel": 4,
        "title": "P4474 \u9898\u89e3"
    },
    {
        "content": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**\u5206\u6790\u4e0e\u9898\u89e3\uff1a**\u5bf9\u4e8e\u8fd9\u4e2a\u77e9\u5f62\uff0c\u6211\u4eec\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u5bf9\u4e8e\u9ed1\u70b9\uff0c\u6211\u4eec\u5411$S$\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u7684\u70b9\u6743\uff1b\u5bf9\u4e8e\u767d\u70b9\uff0c\u6211\u4eec\u5411$T$\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u7684\u70b9\u6743\u3002\u5bf9\u4e8e\u4e24\u4e2a\u76f8\u90bb\u7684\u70b9\uff0c\u6211\u4eec\u5728\u4ed6\u4eec\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a$inf$\u3002\u5bf9\u4e8e\u5efa\u51fa\u6765\u7684\u56fe\u8dd1\u6700\u5c0f\u5272\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f\u6240\u6709\u70b9\u7684\u70b9\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u3002\n\n```c++\n// luogu-judger-enable-o2\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define N 50000\n#define M 5000000\n#define inf 1000000000\nint n,m,s,t,ans,dis[N],dir1[5]={0,1,-1,0,0},dir2[5]={0,0,0,-1,1};\nint cur[N],head[N],to[M<<1],val[M<<1],nxt[M<<1],idx=1;\nvoid add(int a,int b,int c)\n    {nxt[++idx]=head[a],to[idx]=b,val[idx]=c,head[a]=idx;}\nbool bfs() \n{\n    memset(dis,-1,sizeof dis);\n    queue <int> q;q.push(s),dis[s]=0;\n    while(!q.empty())\n    {\n        int p=q.front();q.pop();\n        if(p==t) return true;\n        for(int i=head[p];i;i=nxt[i])\n            if(val[i]>0&&dis[to[i]]==-1)\n                dis[to[i]]=dis[p]+1,q.push(to[i]);\n    } return false;\n}\nint dfs(int p,int flow)\n{\n    int now,temp=flow;\n    if(p==t) return flow;\n    for(int i=cur[p];i;i=nxt[i])\n        if(val[i]>0&&dis[to[i]]==dis[p]+1)\n        {\n            now=dfs(to[i],min(val[i],temp));\n            if(!now) dis[to[i]]=-1;\n            temp-=now,val[i]-=now,val[i^1]+=now;\n            if(val[i]) cur[p]=i;\n            if(!temp) break;\n        } return flow-temp;\n}\nvoid dinic() {while(bfs()) memcpy(cur,head,sizeof head),ans-=dfs(s,inf);}\nbool in(int x,int y) {return x&&x<=n&&y&&y<=m;}\nint pla(int i,int j) {return (i-1)*m+j;}\nint main()\n{\n    scanf(\"%d%d\",&n,&m),s=n*m+1,t=n*m+2;\n    for(int i=1;i<=n;i++) for(int j=1,a;j<=m;j++) { scanf(\"%d\",&a),ans+=a;\n        if((i+j)%2) add(s,pla(i,j),a),add(pla(i,j),s,0);\n        else add(pla(i,j),t,a),add(t,pla(i,j),0); }\n    for(int i=1;i<=n;i++) for(int j=1;j<=m;j++)\n        if((i+j)%2) for(int k=1;k<=4;k++) if(in(i+dir1[k],j+dir2[k]))\n            add(pla(i,j),pla(i+dir1[k],j+dir2[k]),inf),\n            add(pla(i+dir1[k],j+dir2[k]),pla(i,j),0);\n    dinic(),printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1545619481,
        "uid": 52851,
        "name": "ysy20021208",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4474 \u3010\u738b\u8005\u4e4b\u5251\u3011"
    }
]