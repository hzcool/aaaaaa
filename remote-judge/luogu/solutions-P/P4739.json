[
    {
        "content": "### \u9898\u76ee\u94fe\u63a5\n[\u6d1b\u8c37P4739](https://www.luogu.com.cn/problem/P4739)\n### \u9898\u76ee\u7ffb\u8bd1\uff1a\n\u4f60\u6b63\u5728\u6a21\u62df\u65e0\u4eba\u673a\u63a2\u7d22\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u7684\u73af\u72b6\u884c\u661f\u7684\u8fc7\u7a0b\u3002\u6280\u672f\u4e0a\u8bf4\uff0c\u65e0\u4eba\u673a\u6b63\u5728\u7a7f\u8fc7\u4e00\u4e2a\u73af\u5f62\u7f51\u683c\u2014\u2014\u2014\u4e00\u4e2a\u5728\u4e24\u7ef4\u4e0a\u90fd\u9996\u5c3e\u73af\u7ed5\u5728\u4e00\u8d77\u7684\u77e9\u5f62\u7f51\u683c\u3002\u683c\u5b50\u7684\u884c\u53f7\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u7f16\u53f7\u4e3a$1$\u5230$r$\uff0c\u5217\u53f7\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u7f16\u53f7\u4e3a$1$\u5230$c$\u3002\u6bcf\u4e2a\u683c\u5b50\u8fd8\u6709\u4e00\u4e2a\u6d77\u62d4\u2014\u2014\u8fd9\u662f\u4e2a\u6b63\u6570\u3002\n\n\u65e0\u4eba\u673a\u4e00\u5f00\u59cb\u4f4d\u4e8e\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u7684\u683c\u5b50\u3002\u6bcf\u4e00\u6b65\uff0c\u65e0\u4eba\u673a\u4f1a\u8003\u8651\u8fd9\u6837\u4e09\u4e2a\u683c\u5b50\uff1a\u53f3\u8fb9\u3001\u53f3\u4e0a\u65b9\u3001\u53f3\u4e0b\u65b9\uff08\u6ce8\u610f\u8fd9\u4e2a\u7f51\u683c\u9996\u5c3e\u76f8\u63a5\uff09\u3002\u65e0\u4eba\u673a\u4f1a\u98de\u5230\u5b83\u4eec\u4e4b\u4e2d\u6d77\u62d4\u6700\u9ad8\u7684\u4e00\u4e2a\u683c\u5b50\u3002\u6a21\u62df\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5171\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\uff1a\n\n$move$ $k$\u65e0\u4eba\u673a\u79fb\u52a8k\u6b65\n\n$change$ $a$ $b$ $e$\u7b2c$a$\u884c\u7b2c$b$\u5217\u7684\u683c\u5b50\u6d77\u62d4\u4fee\u6539\u4e3a$e$\u3002\n\n\u5728\u6bcf\u6b21$move$\u64cd\u4f5c\u540e\uff0c\u4f60\u90fd\u9700\u8981\u7acb\u523b\u627e\u5230\u65e0\u4eba\u673a\u7684\u4f4d\u7f6e\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\uff0c\u6bcf\u6b21\u79fb\u52a8\u7684\u4e09\u4e2a\u76ee\u6807\u4f4d\u7f6e\u6d77\u62d4\u4e92\u4e0d\u76f8\u540c\uff0c\u56e0\u6b64\u6bcf\u4e00\u6b65\u79fb\u52a8\u90fd\u662f\u826f\u5b9a\u4e49\u7684\u3002\n### solution\n\u6bcf\u6b21\u79fb\u52a8\u7684\u6b65\u6570$k$\u5f88\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u8054\u60f3\u5230\u500d\u589e\u8df3\u6cd5\uff0c\u5373\u6bcf\u6b21\u8df3$2^k$\u6b65\u3002\n\n\u4f46\u6b65\u6570\u4e0d\u592a\u597d\u7ef4\u62a4\uff0c\u6211\u4eec\u8003\u8651\u5c06\u79fb\u52a8$k$\u6b65\u8f6c\u5316\u4e3a\u5148\u66b4\u529b\u8df3\u5230\u7b2c\u4e00\u5217\uff0c\u518d\u4ece\u7b2c\u4e00\u5217\u51fa\u53d1\u8df3\u82e5\u5e72\u5708\uff0c\u6700\u540e\u5728\u66b4\u529b\u8df3\u5269\u4e0b\u7684\u4e0d\u5230\u4e00\u5708\u7684\u6b65\u6570\u3002\u663e\u71362\u6bb5\u66b4\u529b\u8df3\u7684\u590d\u6742\u5ea6\u4ec5\u4e3a$O(c)$\uff0c\u53ef\u4ee5\u63a5\u53d7\n\n\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u8981\u7ef4\u62a4\u4ece\u7b2c\u4e00\u5217\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u53d1\u8df3$2^k$\u5708\u540e\u6240\u5904\u7684\u4f4d\u7f6e\u3002\u672c\u9898\u5728$y$\u8f74\u4e0a\u7684\u8df3\u6cd5\u4e0d\u786e\u5b9a\uff0c\u4f46\u5728$x$\u8f74\u4e0a\u4e00\u76f4\u662f\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u4e8e\u662f\u53ef\u4ee5\u5728\u5217\u4e0a\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\uff08\u8bbe\u5bf9\u5e94\u7684\u5217\u4e3a$l,r$\uff09\u7ef4\u62a4\u7b2c$l$\u5217\u4e0a\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u8df3\u5230\u7b2c$r+1$\u5217\u540e\u6240\u5904\u7684\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\n```cpp \nt[p][i]=t[p<<1|1][t[p<<1][i]] \n```\n\u5b9e\u73b0\u8f6c\u79fb(\u5176\u4e2d$t[p][i]$\u8868\u793a\u5904\u5728\u7b2c$i$\u884c\u7684\u70b9\uff0c\u8df3\u8fc7$p$\u5bf9\u5e94\u7684\u8fd9\u6bb5\u533a\u95f4\u540e\u6240\u5904\u7684\u4f4d\u7f6e\uff0c\u5728\u4ee3\u7801\u4e2d\u662f$T[p].t[i]$)\n\n\u4e8e\u662f\u6839\u8282\u70b9\u7ef4\u62a4\u7684\u7b54\u6848\u5c31\u662f\u7b2c\u4e00\u5217\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u8df3\u4e00\u5708\u540e\u6240\u5904\u7684\u4f4d\u7f6e\uff0c\u63a5\u4e0b\u6765\u7684\u53ea\u4e0d\u8fc7\u662f\u500d\u589e\u57fa\u672c\u5957\u8def\u3002\n\n\u6bcf\u6b21\u5bf9$(x,y)$\u7684\u4fee\u6539\u53ea\u4f1a\u5f71\u54cd\u7b2c$x-1$\u5217\u7ef4\u62a4\u7684\u7b54\u6848\uff0c\u7b49\u4e8e\u662f\u7ebf\u6bb5\u6811\u4e2d\u7684\u5355\u70b9\u4fee\u6539\uff0c\u590d\u6742\u5ea6$O(rlog(c))$\n### code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5010;\nint a[N][N],ans[N][N],R,C,m,to[N][32];\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nstruct SGT{\n\tstruct tree{\n\t\tint t[N];\n\t}T[N<<2];\n\t#define lc (p<<1)\n\t#define rc (p<<1|1)\n\t#define mid (l+r>>1)\n\tinline void pushup(int p){\n\t\tfor(int i=1;i<=R;++i)\n\t\t\tT[p].t[i]=T[rc].t[T[lc].t[i]];\n\t}\n\tinline void build(int p,int l,int r){\n\t\tif(l==r){\n\t\t\tfor(int i=1;i<=R;++i) T[p].t[i]=ans[l][i];\n\t\t\treturn ;\n\t\t}\n\t\tbuild(lc,l,mid);\n\t\tbuild(rc,mid+1,r);\n\t\tpushup(p);\n\t}\n\tinline void update(int p,int l,int r,int x){\n\t\tif(l==r){\n\t\t\tfor(int i=1;i<=R;++i) T[p].t[i]=ans[l][i];\n\t\t\treturn ;\n\t\t}\n\t\tif(x<=mid) update(lc,l,mid,x);\n\t\telse update(rc,mid+1,r,x);\n\t\tpushup(p);\n\t}\n\t#undef lc \n\t#undef rc\n\t#undef mid\n}T;\ninline void work(int &x,int &y){\n\tint yy=y==C?1:y+1,x1=x>1?x-1:R,x2=x,x3=x==R?1:x+1;\n\tint ans=a[x1][yy],pos=x1;\n\tif(a[x2][yy]>ans) ans=a[x2][yy],pos=x2;\n\tif(a[x3][yy]>ans) ans=a[x3][yy],pos=x3;\n\tx=pos;y=yy;\n}\nint main(){\n\tR=read();C=read();\n\tfor(int i=1;i<=R;++i)\n\t\tfor(int j=1;j<=C;++j)\n\t\t\ta[i][j]=read();\n\tfor(int i=1;i<=R;++i){\n\t\tfor(int j=1;j<=C;++j){\n\t\t\tint x=i,y=j;work(x,y);\n\t\t\tans[j][i]=x;\n\t\t}\n\t}\n\tT.build(1,1,C);\n\tfor(int i=1;i<=R;++i) to[i][0]=T.T[1].t[i];\n\tfor(int j=1;j<=30;++j)\n\t\tfor(int i=1;i<=R;++i)\n\t\t\tto[i][j]=to[to[i][j-1]][j-1];\n\tm=read();\n\tint nx=1,ny=1;\n\twhile(m--){\n\t\tchar s[10];scanf(\"%s\",s);\n\t\tif(s[0]=='c'){\n\t\t\tint x=read(),y=read(),e=read();\n\t\t\ta[x][y]=e;y=y>1?y-1:C;\n\t\t\tfor(int i=1;i<=R;++i){\n\t\t\t\tint t1=i,t2=y;\n\t\t\t\twork(t1,t2);\n\t\t\t\tans[y][i]=t1;\n\t\t\t}\n\t\t\tT.update(1,1,C,y);\n\t\t\tfor(int i=1;i<=R;++i) to[i][0]=T.T[1].t[i];\n\t\t\tfor(int j=1;j<=30;++j)\n\t\t\t\tfor(int i=1;i<=R;++i)\n\t\t\t\t\tto[i][j]=to[to[i][j-1]][j-1];\n\t\t}\n\t\tif(s[0]=='m'){\n\t\t\tint k=read();\n\t\t\twhile(k&&ny!=1) work(nx,ny),k--;\n\t\t\tint circle=k/C;k=k%C;\n\t\t\tfor(int i=30;i>=0;--i) if(circle&(1<<i)) circle^=(1<<i),nx=to[nx][i];\n\t\t\twhile(k--) work(nx,ny);\n\t\t\tprintf(\"%d %d\\n\",nx,ny);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1603157643,
        "uid": 66831,
        "name": "T_Q_X",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4739 \u3010[CERC2017]Donut Drone\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/LaoMang-no-blog/p/16573702.html)\n\n---\n\n[**\u4f60\u8c37 link**](https://www.luogu.com.cn/problem/P4739)\n\n\u7ed9\u4e00\u79cd\u4e0d\u7528\u500d\u589e\u7684\u4e0d\u5e26 $log$ \u7684\u505a\u6cd5\u3002\n\n\u7ea6\u5b9a $\\mathrm{up}_i,\\mathrm{down}_i,\\mathrm{left}_i,\\mathrm{right}_i$ \u8868\u793a $x/y$ \u5750\u6807\u5728 $i$ \u4f4d\u7f6e\u65f6\u5411\u4e0a / \u4e0b / \u5de6 / \u53f3\u65b9\u5411**\u5faa\u73af**\u79fb\u52a8\u4e00\u6b65\u7684\u4f4d\u7f6e\u3002\n\n\u9996\u5148\u8003\u8651\u66b4\u529b\uff0c\u5373\u4ece\u8d77\u70b9\u76f4\u63a5\u6a21\u62df\u8d70 $k$ \u6b65\u5230\u8fbe\u76ee\u6807\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O\\left(\\sum k\\right)$\uff0c\u800c $k$ \u662f $10^9$ \u91cf\u7ea7\uff0c\u663e\u7136\u4e0d\u884c\u3002\n\n\u7b80\u5355\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u56fe\u4e0d\u6539\u53d8\u7684\u60c5\u51b5\u4e0b\u4ece\u56fe\u4e2d\u4efb\u610f\u4e00\u70b9\u51fa\u53d1\u7684\u60c5\u5f62\u662f\u76f8\u540c\u7684\uff0c\u800c\u56fe\u5927\u5c0f\u53ea\u6709 $r\\times c$\uff0c\u8fd9\u8bf4\u660e\u8d70\u81f3\u591a $r\\times c$ \u6b65\u4e00\u5b9a\u4f1a\u8d70\u5230\u4e00\u4e2a\u5df2\u7ecf\u7ecf\u8fc7\u7684\u70b9\uff0c\u5219\u4f1a\u5f62\u6210\u4e00\u4e2a\u5faa\u73af\u8282\uff0c\u800c\u5faa\u73af\u8282\u957f\u5ea6\u4e5f\u81f3\u591a\u662f $r\\times c$ \u7684\u3002\n\n\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u6210\u5feb\u901f\u8d70\u5b8c $r\\times c$ \u6b65\uff0c\u8003\u8651\u5728\u4e0d\u5e26\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\u600e\u4e48\u505a\uff0c\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u63a5\u53d7\u7684\u4e0a\u9650\u662f $\\mathcal O\\left(m(r+c)\\right)$\uff0c\u8fd9\u542f\u793a\u6211\u4eec\u53ef\u4ee5\u8fd0\u7528\u5206\u5757\u7684\u601d\u60f3\uff0c\u5c06 $r\\times c$ \u6b65\u5206\u6210\u82e5\u5e72\u4e2a $c$ \u6b65\u548c\u82e5\u5e72\u4e2a $1$ \u6b65\uff0c\u5373\u5206\u89e3\u6210 $pc+q$ \u7684\u5f62\u5f0f\uff0c\u7136\u540e\u6bcf\u6b21\u8df3 $c$ \u6b65\uff0c\u4e00\u4e2a\u7c97\u52a3\u7684\u60f3\u6cd5\u662f\u9884\u5904\u7406\u4e00\u4e2a $\\mathrm{skip}_{i,j}$ \u8868\u793a\u4ece\u4f4d\u7f6e $(i,j)$ \u8d70 $c$ \u6b65\u80fd\u8d70\u5230\u54ea\u91cc\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u500d\u589e\u6216\u522b\u7684\u4ec0\u4e48\u65b9\u6cd5\u9884\u5904\u7406 $\\mathrm{skip}$ \u6570\u7ec4\u548c\u5faa\u73af\u8282\uff0c\u5148\u4e0d\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7279\u522b\u662f\u5e26\u4e0a\u4fee\u6539\u4ee5\u540e\uff0c\u5b9e\u73b0\u5c31\u975e\u5e38\u56f0\u96be\u3002\n\n\u8003\u8651\u4e3a\u4ec0\u4e48\u5b9e\u73b0\u8fd9\u4e48\u56f0\u96be\uff0c\u7a76\u5176\u6839\u672c\u662f\u9700\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\u592a\u591a\u4e86\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u901a\u8fc7\u8be2\u95ee\u65f6\u7684\u4e00\u4e9b\u5e38\u6570\u5f00\u9500\u51cf\u5c11\u7ef4\u62a4\u91cf\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u53ea\u7ef4\u62a4\u7b2c\u4e00\u5217\u7684\u4fe1\u606f\uff0c\u8fd9\u5c31\u76f8\u5bf9\u597d\u7ef4\u62a4\u591a\u4e86\uff0c\u5148\u9884\u5904\u7406\u51fa $\\mathrm{step}_{i,j}$ \u8868\u793a $(i,j)$ \u8d70 $1$ \u6b65\u80fd\u8d70\u5230 $(\\mathrm{step}_{i,j},\\mathrm{right}_j)$ \uff0c$\\mathrm{skip}_i$ \u8868\u793a $(i,1)$ \u8df3 $c$ \u6b65\u540e\u4f1a\u56de\u5230 $(\\mathrm{skip}_i,1)$\uff0c\u5faa\u73af\u8282\u53ef\u4ee5\u5728\u8be2\u95ee\u65f6\u627e\uff0c\u5177\u4f53\u6bcf\u6b21\u8be2\u95ee\u65f6\u5148\u8d70\u5230\u7b2c\u4e00\u5217\uff0c\u5728\u7b2c\u4e00\u5217\u8df3\u76f4\u5230\u627e\u5230\u5faa\u73af\u8282\u6216\u8005\u9047\u5230\u4e86\u5269\u4f59\u6b65\u6570\u4e0d\u5230 $c$\uff0c\u7136\u540e\u5bf9\u5faa\u73af\u8282\u53d6\u6a21\uff0c\u7136\u540e\u518d\u8df3 $c$ \u6b65\u6700\u591a\u8df3 $r$ \u6b21\uff0c\u518d\u8d70\u6700\u591a $c$ \u6b65\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u5355\u6b21\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u538b\u5728\u4e86 $\\mathcal O\\left(r+c\\right)$\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u7684\u8be2\u95ee\u65f6\u95f4\u590d\u6742\u5ea6\u5df2\u7ecf\u975e\u5e38\u4f18\u7f8e\u4e86\uff0c\u5b9e\u73b0\u96be\u5ea6\u4e5f\u4e0d\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u4e0b\u6765\u8003\u8651\u8ba9\u4fee\u6539\u53bb\u8fce\u5408\u8be2\u95ee\u7684\u64cd\u4f5c\uff0c\u5206\u522b\u8003\u8651\u4e00\u6b21\u4fee\u6539\u5bf9 $\\mathrm{step}$ \u548c $\\mathrm{skip}$ \u7684\u5f71\u54cd\uff0c\u5148\u8003\u8651\u8f83\u4e3a\u7b80\u5355\u7684 $\\mathrm{step}$\uff0c\u7b54\u6848\u53d1\u73b0\u4fee\u6539 $(x,y)$ \u53ea\u4f1a\u5bf9 $(\\mathrm{up}_x,\\mathrm{left}_y),(x,\\mathrm{left}_y),(\\mathrm{down}_x,\\mathrm{left}_y)$\uff0c\u4e09\u4e2a\u4f4d\u7f6e\u4ea7\u751f\u5f71\u54cd\uff0c\u5c06\u8fd9\u4e09\u4e2a\u4f4d\u7f6e\u91cd\u65b0\u505a\u5c31\u597d\u4e86\uff0c\u90a3\u4e48\u518d\u8003\u8651\u5982\u679c $\\mathrm{step}_{x,y}$ \u7684\u4fee\u6539\u4f1a\u5bf9 $\\mathrm{skip}$ \u4ea7\u751f\u7684\u5f71\u54cd\uff0c\u5373\u5c06\u4f1a\u8d70\u5230 $(x,y)$ \u7684\u6bcf\u4e00\u884c\u7684 $\\mathrm{skip}$ \u90fd\u4fee\u6539\u4e3a $(x,y)$ \u8d70\u5230\u7684\u90a3\u4e2a $(p,1)$ \u7684 $p$\u3002\n\n\u60f3\u8981\u6c42\u51fa $p$ \u662f\u5f88\u7b80\u5355\u7684\uff0c\u76f4\u63a5\u8d70\u5230 $p$ \u7684\u4f4d\u7f6e\u5c31\u597d\u4e86\uff0c\u4f46\u662f\u60f3\u8981\u5904\u7406\u4f1a\u88ab\u5f71\u54cd\u7684 $\\mathrm{skip}$ \u8fd8\u662f\u6709\u4e9b\u96be\u5ea6\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff0c\u5373\u88ab\u5f71\u54cd\u7684 $\\mathrm{skip}$ \u4e00\u5b9a\u6784\u6210\u4e00\u4e2a\u533a\u95f4\uff0c\u8bc1\u660e\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6709\u4e00\u7ec4 $[l,r]$ \u6ee1\u8db3 $\\mathrm{skip}_l=p,\\mathrm{skip}_r=p$\uff0c\u4f46\u5b58\u5728\u4e00\u4e2a $t$ \u6ee1\u8db3 $t\\in(l,r),\\mathrm{skip}\\ne p$\uff0c\u5219 $t$ \u60f3\u8d70\u5411\u53e6\u4e00\u4e2a\u7ec8\u70b9\u6240\u9700\u8981\u7ecf\u8fc7\u7684\u8def\u5f84\u4e00\u5b9a\u548c $l$ \u6216 $r$ \u8d70\u5411 $p$ \u7684\u8def\u5f84\u6709\u4ea4\u6216\u4ea4\u53c9\uff0c\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u8bc1\u660e\u53ef\u4ee5\u81ea\u884c\u753b\u56fe\u624b\u6a21\u4e00\u4e0b\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6c42\u51fa\u7b54\u6848\u4e86\uff0c\u4ece $x$ \u6162\u6162\u53cd\u5411\u63a8\u5230 $1$\uff0c\u505a\u5230 $k$ \u65f6\uff0c\u7ef4\u62a4\u4e00\u7ec4 $[l,r]$ \u8868\u793a\u4ece $\\forall i\\in[l,r],\\ (i,k)\\to(p,1)$\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b65\u4e00\u6b65\u5f80\u524d\u63a8\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u770b\u4ee3\u7801\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O\\left(c\\right)$ \u7684\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u52a0\u4e0a\u9884\u5904\u7406\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $\\mathcal O\\left(rc+m(r+c)\\right)$\uff0c\u6bd4\u500d\u589e\u6cd5\u5c11\u4e00\u4e2a $log$\u3002\n\n[c++ \u4ee3\u7801](https://www.cnblogs.com/LaoMang-no-blog/p/16573702.html)",
        "postTime": 1660132136,
        "uid": 310525,
        "name": "\u8001\u83bd\u83bd\u7a7f\u4e00\u5207",
        "ccfLevel": 0,
        "title": "[CERC2017] Donut Drone \u9898\u89e3"
    },
    {
        "content": "\u6ce8\u610f\u5230\u6bcf\u6b21\u5411\u53f3\u79fb\u52a8\u4e00\u5217\u53ef\u4ee5\u5199\u6210\u4e8c\u5143\u7ec4\u7684\u5f62\u5f0f\uff1a$(x,p_x)$ \u8868\u793a\u4e4b\u524d\u5728\u7b2c $x$ \u884c\u7684\u65e0\u4eba\u673a\u4e0b\u4e00\u6b21\u4f1a\u8d70\u5230\u7b2c $p_x$ \u884c\u3002\u628a\u6240\u6709\u7684 $(x,p_x)$ \u5408\u5e76\u8d77\u6765\uff0c\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u7f6e\u6362\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u7528\u6570\u7ec4 $\\{a\\}$ \u6765\u8868\u793a\uff0c$a_i$ \u8868\u793a\u4e4b\u524d\u5728\u7b2c $i$ \u683c\u4e0b\u4e00\u6b65\u8d70\u5230\u7684\u4f4d\u7f6e\u3002\n\n\u4e24\u4e2a\u6570\u7ec4 $\\{a\\},\\{b\\}$ \u662f\u53ef\u4ee5\u5408\u5e76\u7684\u3002\u6211\u4eec\u5b9a\u4e49 $\\{a\\}+\\{b\\}=\\{c\\}$\uff0c\u5219\u6709 $c_i=b_{a_i}$\u3002\u8fd9\u79cd\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u4fe1\u606f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u5355\u6b21\u5408\u5e76\u9700\u8981 $O(n)$ \u7684\u65f6\u95f4\u3002\n\n\u6bcf\u6b21\u4fee\u6539\u81f3\u591a\u4fee\u6539\u4e00\u5217\u7684\u4fe1\u606f\uff0c\u5355\u6b21\u4fee\u6539\u590d\u6742\u5ea6 $O(n\\log m)$\u3002\u63a5\u4e0b\u6765\u662f\u67e5\u8be2\u3002\u6ce8\u610f\u5230\u9664\u5f00\u9996\u5c3e\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u5176\u5b83\u7684\u4e00\u5927\u6bb5\u90fd\u662f\u5728\u8fd9\u4e2a\u77e9\u9635\u91cc\u9762\u8f6c\u6765\u8f6c\u53bb\u3002\u8bbe $\\{a\\}^k$ \u4e3a\u4fe1\u606f $\\{a\\}$ \u5408\u5e76 $k$ \u6b21\u540e\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u6765\u52a0\u901f\u3002\u8fd9\u6837\u4e2d\u95f4\u6bb5\u7684\u8ba1\u7b97\u53ef\u4ee5\u4f18\u5316\u5230\u5355\u6b21 $O(n\\log k)$\uff0c\u9996\u5c3e\u5219\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u5373\u53ef\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(qn\\log (m+k))$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=2000;\n\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nint n,m,q,tx,ty,val[Maxn+5][Maxn+5]; char opt[10];\n\nstruct Matrix\n{\n    int f[Maxn+5];\n    inline int&operator()(int a) {return f[a];}\n} idt,t[Maxn*4+5],g[Maxn+5];\ninline Matrix operator*(Matrix a,Matrix b)\n{\n    Matrix c; For(i,1,n) c(i)=b(a(i));\n    return c;\n}\ninline Matrix Pow(Matrix x,int y)\n{\n    Matrix res=idt;\n    while(y)\n    {\n        if(y&1) res=res*x;\n        x=x*x,y>>=1;\n    }\n    return res;\n}\n\n#define pre(x) (x==1?n:x-1)\n#define nxt(x) (x==n?1:x+1)\n#define prem(x) (x==1?m:x-1)\n#define nxtm(x) (x==m?1:x+1)\n#define ls(x) (x<<1)\n#define rs(x) (x<<1|1)\ninline void push_up(int p) {t[p]=t[ls(p)]*t[rs(p)];}\ninline void ReBuild(int x,int y)\n{\n    int a=pre(x),b=x,c=nxt(x),ny=nxtm(y);\n    int va=val[a][ny],vb=val[b][ny],vc=val[c][ny];\n    if(va>vb && va>vc) g[y](x)=a;\n    if(vb>va && vb>vc) g[y](x)=b;\n    if(vc>va && vc>vb) g[y](x)=c;\n}\ninline void Build(int l,int r,int p)\n{\n    if(l==r) {t[p]=g[l]; return;}\n    int mid=(l+r)>>1;\n    Build(l,mid,ls(p)),Build(mid+1,r,rs(p)),push_up(p);\n}\ninline void Update(int l,int r,int p,int k)\n{\n    if(l==r) {t[p]=g[l]; return;}\n    int mid=(l+r)>>1;\n    if(k<=mid) Update(l,mid,ls(p),k);\n    else Update(mid+1,r,rs(p),k);\n    push_up(p);\n}\ninline Matrix Count(int nl,int nr,int l,int r,int p)\n{\n    if(l>r) return idt;\n    if(l<=nl && nr<=r) return t[p];\n    int mid=(nl+nr)>>1; Matrix res=idt;\n    if(l<=mid) res=res*Count(nl,mid,l,r,ls(p));\n    if(r>mid) res=res*Count(mid+1,nr,l,r,rs(p));\n    return res;\n}\n\nint main()\n{\n    n=read(),m=read(),tx=1,ty=1;\n    For(i,1,n) idt(i)=i;\n    For(i,1,n) For(j,1,m) val[i][j]=read();\n    For(i,1,n) For(j,1,m) ReBuild(i,j);\n    Build(1,m,1),q=read();\n    while(q--)\n    {\n        int a,b,c,pb; scanf(\"%s\",opt+1);\n        if(opt[1]=='c')\n        {\n            a=read(),b=read(),c=read(),val[a][b]=c,pb=prem(b);\n            ReBuild(pre(a),pb),ReBuild(a,pb),ReBuild(nxt(a),pb);\n            Update(1,m,1,pb);\n        }\n        else\n        {\n            Matrix now; a=read();\n            if(ty+a<=m)\n            {\n                now=Count(1,m,ty,ty+a-1,1);\n                tx=now(tx),ty+=a;\n                printf(\"%d %d\\n\",tx,ty); continue;\n            }\n            now=Count(1,m,ty,m,1),a-=(m-ty+1),ty+=(m-ty+1);\n            now=now*Pow(t[1],a/m)*Count(1,m,1,a%m,1);\n            tx=now(tx),ty=(ty+a-1)%m+1;\n            printf(\"%d %d\\n\",tx,ty);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1676036486,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4739\u3010[CERC2017]Donut Drone\u3011"
    },
    {
        "content": "#### \u4e00\u79cd\u66f4\u76f4\u63a5\u7684\u66b4\u529b\u505a\u6cd5\n\n(\u597d\u4e45\u4e4b\u524d\u7684\u9898\u89e3\u4e86)\u3002\n\n\u4e4b\u524d\u61d2\u5f97\u5199\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u5206\u4eab\u4e00\u79cd\u590d\u6742\u5ea6\u8f83\u52a3\u4f46\u5e38\u6570\u8f83\u5c0f\u7684\u505a\u6cd5\u3002\n\n\u540c\u6837\u8003\u8651\u5148\u66b4\u529b\u8d70\u5230\u7b2c\u4e00\u5217\u7136\u540e\u8df3\u82e5\u5e72\u5708\uff0c\u6700\u540e\u518d\u66b4\u529b\u8d70\u5b8c\u3002\n\n\u90a3\u4e48\u8bbe\u4f4d\u7f6e $(i,j)$ \u7684**\u76ee\u6807\u884c**\u662f\u4ece\u8be5\u4f4d\u7f6e\u5411\u53f3\u8d70\u5230\u67d0\u4e2a $(p,1)$ \u6240\u5728\u7684\u884c\uff0c\u7b2c $k$ \u884c\u7684**\u76ee\u6807\u884c**\u4e3a $(k,1)$ \u7684**\u76ee\u6807\u884c**\uff0c\u7ef4\u62a4\u6bcf\u4e00\u884c\u7684**\u76ee\u6807\u884c**\u540e\uff0c\u53ef\u4ee5\u500d\u589e\u7b97\u51fa\u8df3 $2^n$ \u5708\u540e\u5904\u4e8e\u54ea\u4e00\u884c\uff0c\u4ece\u800c\u5feb\u901f\u8ba1\u7b97\u6700\u7ec8\u5230\u8fbe\u7684\u884c\u3002\n\n\u9996\u5148\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u884c $O(rc)$ \u66b4\u529b\u627e\u51fa**\u76ee\u6807\u884c**\u3002\n\n\u73b0\u5728\u89c2\u5bdf\u4fee\u6539\u540e\u5bf9\u6bcf\u4e00\u884c\u7684\u5f71\u54cd\uff0c\u53d1\u73b0\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4fee\u6539\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u4e09\u4e2a\u4f4d\u7f6e\u7684\u8d70\u5411\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u80fd\u591f\u5230\u8fbe\u8fd9\u4e09\u4e2a\u4f4d\u7f6e\u7684\u884c\u90fd\u53ef\u80fd\u4f1a\u88ab\u5f71\u54cd\u3002\n\n\u90a3\u4e48\u8003\u8651\u66b4\u529b\u627e\u51fa\u8fd9\u4e09\u4e2a\u4f4d\u7f6e\u7684**\u76ee\u6807\u884c**\uff0c\u518d\u628a\u6240\u6709\u80fd\u591f\u4ece\u7b2c\u4e00\u5217\u5230\u8fbe\u8fd9\u4e09\u4e2a\u4f4d\u7f6e\u7684\u884c\u66f4\u65b0\u7b54\u6848\u5c31\u597d\u4e86\u3002\n\n\u90a3\u4e48\u9700\u8981\u652f\u6301\u5feb\u901f\u5224\u5b9a $(i,j)$ \u662f\u5426\u80fd\u4ece $(k,1)$ \u5230\u8fbe\uff0c\u53d1\u73b0\u53ef\u4ee5\u5728\u641c\u7d22\u7684\u65f6\u5019\u8bb0\u5f55\u8def\u5f84\u3002\n\n\u7528 ```T[k]``` \u5b58\u4ece $(k,1)$ \u5f00\u59cb\u8d70\u4e00\u5708\u7684\u8def\u5f84( ```T[k][j]``` \u5b58\u8d70\u5230\u7b2c $j$ \u5217\u65f6\u6240\u5728\u7684\u884c)\uff0c\u5219\u80fd\u8fbe\u5230\u4f4d\u7f6e $(i,j)$ \u7684\u6761\u4ef6\u4e3a ```T[k][j]==i``` \u3002\n\n\u7ef4\u62a4\u8def\u5f84\u540e\u53ef\u4ee5 $O(1)$ \u5224\u5b9a\u5e76\u4fee\u6539**\u76ee\u6807\u884c**\uff0c\u6ce8\u610f\u4fee\u6539\u540e\u53ef\u80fd\u4f1a\u6539\u53d8\u6bcf\u4e00\u884c\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u53ea\u8981\u627e\u51fa\u8fd9\u4e09\u4e2a\u4f4d\u7f6e\u4f59\u4e0b\u7684\u8def\u5f84\uff0c\u5224\u5b9a\u80fd\u591f\u62b5\u8fbe\u540e\u7528 ``memcpy`` \u8986\u76d6\u5373\u53ef\u3002\n \n\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\frac{mrc}{w})$\uff0c\u74f6\u9888\u5728 ``memcpy``\u3002\n\n#### Code:\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint k, a, b, r, c, m, ex, ey, e[2005][2005], mov[2005][2005], t[2005], T[2005][2005], to[2005][32], tot;\nint read() {\n    int x = 0;\n    char C = getchar();\n    while (C < '0' || C > '9') C = getchar();\n    while (C >= '0' && C <= '9') x = x * 10 + C - '0', C = getchar();\n    return x;\n}\nint work(int x, int y) {//\u5ad6\u6765\u7684\u51fd\u6570\uff0c\u5f88\u597d\u7528\n    int yy = y == c ? 1 : y + 1, x1 = x > 1 ? x - 1 : r, x2 = x, x3 = x == r ? 1 : x + 1;\n    int ans = e[x1][yy], pos = x1;\n    if (e[x2][yy] > ans)\n        ans = e[x2][yy], pos = x2;\n    if (e[x3][yy] > ans)\n        ans = e[x3][yy], pos = x3;\n    return pos;\n}\nvoid dfs(int x, int y) {//\u641c\u7d22\u8def\u5f84\n    t[++tot] = x;\n    if (y > c)\n        return;\n    dfs(mov[x][y], y + 1);\n}\nint main() {\n    cin >> r >> c;\n    for (int i = 1; i <= r; i++) {\n        for (int j = 1; j <= c; j++) e[i][j] = read();\n    }\n    for (int i = 1; i <= r; i++) {\n        for (int j = 1; j <= c; j++) {\n            mov[i][j] = work(i, j);\n        }\n    }\n    for (int i = 1; i <= r; i++) {\n        tot = 0;\n        dfs(i, 1);\n        memcpy(T[i] + 1, t + 1, tot * 4);\n        to[i][0] = T[i][tot];//\u8dd1\u4e00\u5708\u76ee\u6807\u884c\n    }\n    for (int j = 1; j <= 30; j++)//\u8ba1\u7b97\u500d\u589e\u6570\u7ec4\n        for (int i = 1; i <= r; i++) {\n            to[i][j] = to[to[i][j - 1]][j - 1];\n        }\n    m = read();\n    ex = ey = 1;\n    string s;\n    for (int i = 1; i <= m; i++) {\n        cin >> s;\n        if (s[0] == 'm') {\n            scanf(\"%d\", &k);\n            while (ey != 1 && k) {//\u79fb\u52a8\u5230\u7b2c\u4e00\u884c\n                ex = mov[ex][ey];\n                ey++;\n                k--;\n                if (ey > c)\n                    ey = 1;\n            }\n            int Circle = k / c;\n            k -= Circle * c;\n            for (int j = 30; j >= 0; j--) {//\u500d\u589e\u8dd1\u5708\n                if (Circle & (1 << j)) {\n                    ex = to[ex][j];\n                    Circle ^= (1 << j);\n                }\n            }\n            while (k) {//\u4f59\u4e0b\u6b65\u6570\n                ex = mov[ex][ey];\n                ey++;\n                k--;\n                if (ey > c)\n                    ey = 1;\n            }\n            cout << ex << ' ' << ey << endl;\n        } else {\n            scanf(\"%d%d%d\", &a, &b, &k);\n            e[a][b] = k;\n            if (b == 1)\n                b = c;\n            else\n                b--;\n            int a1 = (a == 1 ? r : a - 1), a2 = (a == r ? 1 : a + 1);\n            mov[a1][b] = work(a1, b);\n            mov[a][b] = work(a, b);\n            mov[a2][b] = work(a2, b);\n            tot = 0;\n            dfs(a1, b);\n            for (int i = 1; i <= r; i++) {\n                if (T[i][b] == a1) {//\u5224\u5b9a\n                    memcpy(T[i] + b, t + 1, tot * 4);//\u4fee\u6539\u8def\u5f84\n                    to[i][0] = t[tot];\n                }\n            }\n            tot = 0;\n            dfs(a, b);\n            for (int i = 1; i <= r; i++) {\n                if (T[i][b] == a) {\n                    memcpy(T[i] + b, t + 1, tot * 4);\n                    to[i][0] = t[tot];\n                }\n            }\n            tot = 0;\n            dfs(a2, b);\n            for (int i = 1; i <= r; i++) {\n                if (T[i][b] == a2) {\n                    memcpy(T[i] + b, t + 1, tot * 4);\n                    to[i][0] = t[tot];\n                }\n            }\n            for (int j = 1; j <= 30; j++)//\u91cd\u65b0\u8ba1\u7b97\n                for (int i = 1; i <= r; i++) {\n                    to[i][j] = to[to[i][j - 1]][j - 1];\n                }\n        }\n    }\n    return 0;\n}\n```\n~~\u8c8c\u4f3c\u6709\u66f4\u5feb\u7684 $O(m(r+c))$ \u505a\u6cd5\u3002~~\n",
        "postTime": 1633951752,
        "uid": 244883,
        "name": "hkhkkk",
        "ccfLevel": 0,
        "title": "P4739 [CERC2017]Donut Drone"
    }
]