[
    {
        "content": "\u663e\u7136\u8fd9\u79cd\u540e\u7f00\u81ea\u52a8\u673aduliu\u9898\u51e0\u53e5\u8bdd\u662f\u8bf4\u4e0d\u6e05\u7684\u2026\u2026\n\n\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u6765\u6162\u6162\u5206\u6790\u8fd9\u9898\u7684\u6027\u8d28\u597d\u4e86\n\n____________________\n\n### \u524d\u7f6e\u829d\u58eb:\u540e\u7f00\u81ea\u52a8\u673a(sam)\n\n\u86e4\uff1f\u505anoi\u7684\u5b57\u7b26\u4e32\u9898\u4e0d\u4f1asam,\u5efa\u8bae\u51fa\u95e8\u5de6\u8f6c\u4f60\u7ad9\u6a21\u677f\u533a\u5b66\u4e60\u4e00\u4e0b\n\n### \u524d\u7f6e\u829d\u58eb:\u7ebf\u6bb5\u6811\u5408\u5e76\n\n\u5f88\u591a\u9898\u76ee\u90fd\u662f\u540e\u7f00\u81ea\u52a8\u673a\u548c\u7ebf\u6bb5\u6811\u5408\u5e76\u5957\u5728\u4e00\u8d77\u8fdb\u884c\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u7ebf\u6bb5\u6811\u5408\u5e76\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u7ef4\u62a4\u540e\u7f00\u81ea\u52a8\u673a\u7684right\u96c6\u5408\uff0c\u5982\u679c\u4f60\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u8bdd\uff0c\u53ef\u4ee5\u7ffb\u4e00\u7ffb\u5f80\u671f\u7684\u5495\u5495\u65e5\u62a5\uff0c\u6709\u975e\u5e38\u8be6\u7ec6\u7684\u8bb2\u89e3\n\n\u4e0d\u8fc7\u503c\u5f97\u6ce8\u610f\u7684\u662f\u8fd9\u9053\u9898\u7528\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u548c\u5927\u5bb6\u60ef\u7528\u7684\u5408\u5e76\u5199\u6cd5\u4e0d\u662f\u5f88\u4e00\u81f4\uff0c\u540e\u9762\u4f1a\u5177\u4f53\u8bb2\u8fd9\u90e8\u5206\u5185\u5bb9\n\n_____________________\n\n# \u672c\u9898\u9898\u89e3\n\n\u5148\u6765\u91cd\u65b0\u63cf\u8ff0\u4e00\u4e0b\u6a21\u7cca\u4e0d\u6e05\u7684\u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6a21\u677f\u4e32$S$,\u591a\u7ec4\u8be2\u95ee,\u6bcf\u6b21\u7ed9\u51fa\u4e00\u4e2a\u8be2\u95ee\u5b57\u7b26\u4e32$T$\u548c\u4e00\u4e2a\u533a\u95f4$(l,r)$\n\n\u8981\u6c42\u4f60\u8f93\u51fa$T$\u6709\u591a\u5c11\u4e2a**\u672c\u8d28\u4e0d\u540c**\u7684\u5b50\u4e32,\u6ee1\u8db3\u8fd9\u4e2a\u5b50\u4e32\u6ca1\u6709\u5728S\u7684$(l,r)$\u8fd9\u6bb5\u533a\u95f4\u5f53\u4e2d\u51fa\u73b0\n\n\u7136\u540e\u6211\u4eec\u63a5\u7740\u8f6c\u5316\u4e00\u6ce2\u5c31\u662f\u8be2\u95ee\u4f60\u6709\u51e0\u4e2aT\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6ee1\u8db3\u8fd9\u4e2a\u5b50\u4e32\u5728$S$\u7684\u7ed9\u5b9a\u533a\u95f4\u5f53\u4e2d\u51fa\u73b0\u4e86\uff0c\u7136\u540e\u6211\u4eec\u6c42\u51fa\u8fd9\u4e2a\u4e1c\u897f\u4e4b\u540e\u62ffT\u7684\u6240\u6709\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u53bb\u51cf\u5c31\u80fd\u5f97\u5230\u7b54\u6848\u4e86(\u5982\u679c\u8fde\u6c42T\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u76ee\u8fd9\u70b9\u90fd\u4e0d\u4f1a\u7684\u5efa\u8bae\u91cd\u65b0\u5b66\u4e00\u904dsam)\n\n\u5bf9\u4e8e\u8fd9\u9898\u6765\u8bb2\u6211\u4eec\u5148\u6765\u8003\u8651\u51e0\u4e2a\u6bd4\u8f83\u7279\u6b8a\u7684\u90e8\u5206\u5206\u518d\u6765\u89e3\u51b3\u6700\u540e\u7684\u95ee\u9898\u4f1a\u6bd4\u8f83\u6709\u6548\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u4e00\u4e2a\u90e8\u5206\u5206\u4e00\u4e2a\u90e8\u5206\u5206\u7684\u89e3\u51b3\u8fd9\u9898\n\n## Case1:$l=1,r=|S|$\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u5b57\u7b26\u4e32$S$\u5efa\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u7136\u540e\u5bf9\u8be2\u95ee\u4e32$T$\u5efa\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u7531\u4e8e$T$\u7684\u603b\u957f\u4e0d\u662f\u7279\u522b\u957f\u56e0\u6b64\u6211\u4eec\u7684\u590d\u6742\u5ea6\u662f\u5bf9\u7684\n\n\u63a5\u4e0b\u6765\u4e3a\u4e86\u505a\u8fd9\u9053\u9898\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u77e5\u8bc6\uff0c\u5c31\u662f\u7ed9\u5b9a\u4e00\u4e2a\u6a21\u677f\u4e32$S$\u548c\u4e00\u4e2a\u5339\u914d\u4e32$T$\uff0c\u73b0\u5728\u6211\u4eec\u5e0c\u671b\u5bf9\u4e8e$T$\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00$(1,i)$\u6c42\u51fa\u4e00\u4e2a\u6700\u957f\u7684\u5b57\u7b26\u4e32P\uff0c\u6ee1\u8db3P\u662f$(1,i)$\u7684\u540e\u7f00\u5e76\u4e14$P$\u662fS\u7684\u5b50\u4e32\n\n\u901a\u4fd7\u70b9\u8bf4\u5c31\u662f\u628a$T$\u653e\u5230$S$\u4e0a\u53bb\u8dd1\u5339\u914d\n\n\u90a3\u4e48\u5176\u5b9e\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u5341\u5206\u7684\u7b80\u5355\uff0c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0bparent\u6811\u7684\u6027\u8d28\u5c31\u4f1a\u53d1\u73b0parent\u6811\u7684\u6027\u8d28\u548cac\u81ea\u52a8\u673a\u7684fail\u6811\u6027\u8d28\u76f8\u5f53\u7684\u50cf\uff0c\u751a\u81f3\u6211\u4eec\u53ef\u4ee5\u8bf4sam\u5176\u5b9e\u5c31\u662f\u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b50\u4e32\u62bd\u51fa\u6765\u5efa\u4e86\u4e00\u4e2aac\u81ea\u52a8\u673a\n\n\u90a3\u4e48\u6211\u4eec\u5411\u524d\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u7684\u65f6\u5019\u53ea\u9700\u8981\u770bsam\u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u51fa\u8fb9:\n\n\u5982\u679c\u6709\u5bf9\u5e94\u7684\u51fa\u8fb9\u6211\u4eec\u76f4\u63a5\u8d70\u4e0a\u53bb\u5e76\u4e14\u8ba9\u5339\u914d\u957f\u5ea6+1,\n\n\u5426\u5219\u6211\u4eec**\u4e0d\u505c\u7684\u8df3parent\u6811**\u76f4\u5230parent\u6811\u4e0a\u4e00\u4e2a\u8282\u70b9\u6709\u5bf9\u5e94\u7684\u51fa\u8fb9\u4e3a\u6b62\uff0c\u6b64\u65f6\u6211\u4eec\u628a\u5339\u914d\u957f\u5ea6\u66f4\u65b0\u4e3aparent\u6811\u4e0a\u8282\u70b9len\u503c+1\u3002\n\n\u5982\u679c\u8df3\u5230\u4e86\u6839\u4f9d\u7136\u5931\u914d\u90a3\u4e48\u6211\u4eec\u5c06\u5339\u914d\u957f\u5ea6\u66f4\u65b0\u4e3a0\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u6c42\u51fa\u4e86$T$\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00\u7684\u5339\u914d\u957f\u5ea6\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u6709\u4e86\u8fd9\u4e2a\u5339\u914d\u957f\u5ea6\u4e4b\u540e\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u6211\u4eec\u5728T\u7684\u540e\u7f00\u81ea\u52a8\u59ec\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u7ef4\u62a4\u4e00\u4e2aans\u503c\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u7684\u6700\u957f\u5408\u6cd5\u957f\u5ea6,\n\n\u89e3\u91ca\u4e00\u4e0bans\u7684\u542b\u4e49\u5c31\u662f\u8fd9\u6837\n\n\u6211\u4eec\u77e5\u9053\u7ed9\u5b9a\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u8282\u70b9\u518d\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u79cd\u672c\u8d28\u4e0d\u540c\u5b50\u4e32,\u90a3\u4e48\u4e00\u4e2a\u8282\u70b9\u7684ans\u503c\u5c31\u8868\u793a\u6240\u6709\u957f\u5ea6\u5c0f\u4e8eans\u5e76\u4e14\u4e5f\u88ab\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u5b57\u7b26\u4e32\u90fd\u662fS\u7684\u5b50\u4e32\n\n\u6211\u4eec\u5728S\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u8dd1\u5339\u914d\u7684\u540c\u65f6\u6211\u4eec\u4e5f\u5728T\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u8dd1T\u8fd9\u4e2a\u4e32,\u5e76\u4e14\u6bcf\u6b21\u5339\u914d\u4e32\u7684\u957f\u5ea6\u51cf\u5c0f\u7684\u65f6\u5019\u6211\u4eec\u5728T\u7684parent\u6811\u4e0a\u8df3\u76f4\u5230\u8fd9\u4e2a\u8282\u70b9\u7684len\u503c\u53d8\u7684\u5408\u6cd5,\u7136\u540e\u7528\u5f53\u524d\u5339\u914d\u7684\u957f\u5ea6\u53bb\u66f4\u65b0\u8fd9\u4e2a\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u8282\u70b9\u7684ans\u503c\n\n\u663e\u7136\u66b4\u529b\u8df3\u94fe\u590d\u6742\u5ea6\u662f\u5047\u7684\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5f53\u4e00\u4e2a\u70b9\u7684ans\u503c\u7b49\u4e8elen\u503c\u7684\u65f6\u5019\u8fd9\u4e2a\u8282\u70b9\u7684\u7956\u5148\u7684ans\u503c\u4e5f\u5168\u90e8\u7b49\u4e8elen\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u66b4\u529b\u8df3\u94fe\u5982\u679c\u8fd9\u4e2a\u70b9\u7684ans\u503c\u7b49\u4e8elen\u6211\u4eec\u5c31\u505c\u6b62\u8df3\u94fe\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u771f\u4e86\n\n\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f\u6240\u6709\u70b9ans\u503c-\u7236\u4eb2\u7684len\u503c\u4e4b\u548c\u4e86\uff0c\u5f53\u7136\u7531\u4e8e\u6211\u4eec\u505a\u4e86\u4e2a\u8865\u96c6\u8f6c\u5316\u8fd8\u8981\u7528\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6570\u76ee\u51cf\u53bb\u6211\u4eec\u6c42\u51fa\u7684\u6570\u624d\u80fd\u8f93\u51fa\n\n### Case2:l,r\u4efb\u610f\n\n\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u6211\u4eec\u53ea\u8981\u77e5\u9053$(l,r)$\u8fd9\u6bb5\u533a\u95f4\u7684\u540e\u7f00\u81ea\u52a8\u673a\u957f\u4ec0\u4e48\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u4e0a\u9762\u7684\u7b97\u6cd5\u4e86\uff0c\u4f46\u662f\u95ee\u9898\u662f\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u8f7b\u677e\u7684\u5f97\u77e5\u4e00\u4e2a\u533a\u95f4\u7684\u540e\u7f00\u81ea\u52a8\u673a\n\n\u4f46\u662f\u4ed4\u7ec6\u60f3\u60f3\u6211\u4eec\u4e0a\u9762\u7b97\u6cd5\u6d41\u7a0b\u771f\u7684\u9700\u8981\u540e\u7f00\u81ea\u52a8\u673a\u672c\u8eab\u5417\uff1f\n\n\u5176\u5b9e\u5e76\u4e0d\u662f\uff0c\u6211\u4eec\u53ea\u662f\u501f\u52a9S\u7684\u540e\u7f00\u81ea\u52a8\u673a\u6c42\u51fa\u4e86T\u7684\u6bcf\u4e2a\u524d\u7f00\u7684\u5339\u914d\u957f\u5ea6\n\n\u6211\u4eec\u5728$L=1,r=|S|$\u6240\u7528\u7684\u7b97\u6cd5\u4ec5\u4ec5\u5bf9S\u7684\u540e\u7f00\u81ea\u52a8\u673a\u6267\u884c\u4e86\u8fd9\u6837\u51e0\u4e2a\u64cd\u4f5c\n\n1.\u68c0\u67e5S\u7684\u4e00\u4e2a\u8282\u70b9\u662f\u5426\u6709\u67d0\u4e00\u4e2a\u5b57\u7b26\u7684\u51fa\u8fb9\uff0c\u5982\u679c\u6709\u90a3\u5c31\u8f6c\u79fb\u4e0a\u53bb\n\n2.\u8df3parent\u6811\n\n3.\u8bfb\u53d6\u4e00\u4e2a\u8282\u70b9\u7684len\u503c\n\n\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u5982\u679c\u80fd\u591f\u5b9e\u73b0\u4e0a\u9762\u51e0\u4e2a\u64cd\u4f5c\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6211\u4eec\u8bfb\u53d6\u7684len\u503c\u662f\u8fd9\u4e2a\u8282\u70b9\u5728\u4ee5$(l,r)$\u8fd9\u4e2a\u533a\u95f4\u4e3a\u6a21\u677f\u4e32\u610f\u4e49\u4e0b\u7684len,\u8f6c\u79fb\u5230\u7684\u8282\u70b9\u4e5f\u662f\u8fd9\u4e2a\u8282\u70b9\u5728$(l,r)$\u610f\u4e49\u4e0b\u7684\u51fa\u8fb9\uff0c\u6211\u4eec\u7684\u7b97\u6cd5\u5c31\u8fd8\u662f\u5bf9\u7684\n\n\u73b0\u5728\u6211\u4eec\u6765\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u8fd9\u51e0\u4e2a\u64cd\u4f5c\n\n\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u8282\u70b9\u7684right\u96c6\u5408\uff0c\u7ebf\u6bb5\u4e0a\u7ef4\u62a4\u7684\u662f\u533a\u95f4\u6700\u5927\u503c\n\n\u5f53\u6211\u4eec\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u6761\u5728$(l,r)$\u610f\u4e49\u4e0b\u6307\u5411p\u7684\u8f6c\u79fb\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u8981\u67e5\u627e\u8282\u70b9p\u7684righ\u96c6\u5408\u5728$(1,r)$\u7684\u533a\u95f4\u6700\u5927\u503c\u7136\u540e\u548cl\u8fdb\u884c\u6bd4\u8f83\u5982\u679c\u8fd9\u4e2a\u6700\u5927\u503c\u6bd4$l$\u5c0f\u5c31\u8bc1\u660e\u8fd9\u4e2a\u8f6c\u79fb\u8fb9\u5728$(l,r)$\u4f5c\u4e3a\u6a21\u677f\u4e32\u7684\u65f6\u5019\u5e76\u4e0d\u5408\u6cd5\uff0c\u4e0d\u80fd\u8fdb\u884c\u8f6c\u79fb\n\n\u540c\u6837\u7684\uff0c\u5f53\u6211\u4eec\u8bfb\u53d6\u4e00\u4e2a\u8282\u70b9\u7684len\u503c\u7684\u65f6\u5019\u6211\u4eec\u8fd8\u662f\u627e\u51fa$(1,r)$\u7684\u533a\u95f4\u6700\u5927\u503c,\u5728$(l,r)$\u4f5c\u4e3a\u6a21\u677f\u4e32\u7684\u610f\u4e49\u4e0b\uff0c\u8fd9\u4e2a\u8282\u70b9\u7684len\u503c\u5e94\u8be5\u662f$\\min(len,l-maxpos(1,r)+1)$\n\n\u81f3\u4e8e\u8df3parent\u6811\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u4ed4\u7ec6\u7814\u7a76\u4e00\u4e0bparent\u6811\u7684\u5b9a\u4e49\u5c31\u4f1a\u53d1\u73b0\u5176\u5b9e\u5728\u6574\u4e2a\u5927\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u8df3\u5c31\u80a5\u80a0\u7b26\u5408\u6211\u4eec\u7684\u9700\u8981\u4e86\uff0c\u6240\u4ee5\u8df3\u539f\u6765\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u7684parent\u6811\u5373\u53ef\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u91cc\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u548c\u6211\u4eec\u5e73\u5e38\u5199\u7684\u53ef\u80fd\u4e0d\u662f\u5f88\u4e00\u6837\uff0c\u5e73\u5e38\u6211\u4eec\u5408\u5e76\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u662f\u5c06\u67d0\u4e00\u4e2a\u7ebf\u6bb5\u6811\u63d2\u5165\u5230\u53e6\u4e00\u4e2a\u7ebf\u6bb5\u6811\u91cc\uff0c\u7136\u540e\u6211\u4eec\u4e00\u822c\u7684\u5957\u8def\u662f\u4e00\u8fb9\u5728\u6811\u4e0adfs\u4e00\u8fb9\u5408\u5e76\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5f53\u6211\u4eecdfs\u5230\u8282\u70b9u\u7684\u65f6\u5019\u6211\u4eec\u5c31get\u5230u\u5b50\u6811\u4e2d\u7684\u4fe1\u606f\n\n\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\u5f53\u6211\u4eec\u6309\u7167\u5e73\u5e38\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u7b97\u6cd5\u5408\u5e76\u4e24\u4e2a\u7ebf\u6bb5\u6811u\u548cv\u7684\u65f6\u5019\u539f\u6765\u7684\u4e24\u4e2a\u7ebf\u6bb5\u6811\u90fd\u4f1a**\u88ab\u9500\u6bc1**\n\n\u60a8\u53ef\u80fd\u4e00\u5f00\u59cb\u50cf\u6211\u4e00\u6837naive\u7684\u8ba4\u4e3a\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\u662f\u628au\u7684\u4e00\u4e9b\u5b69\u5b50\u6307\u9488\u6307\u5411\u4e86v\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u88ab\u9500\u6bc1\u7684\u53ea\u6709u\u7ebf\u6bb5\u6811\u800c\u6ca1\u6709v\u7ebf\u6bb5\u6811\n\n\u7136\u9e45\u8fd9\u79cd\u60f3\u6cd5\u662f\u76f8\u5f53\u9519\u8bef\u7684\uff0c\u5f53\u6211\u4eec\u5408\u5e76\u4e86u\u548cv\u4e4b\u540ev\u7684\u4e00\u4e9b\u8282\u70b9\u5c31\u6210\u4e3a\u4e86u\u7ebf\u6bb5\u7684\u4e00\u90e8\u5206\uff0c\u5982\u679c\u6b64\u65f6\u6211\u4eec\u628au\u548c\u53e6\u5916\u4e00\u4e2a\u7ebf\u6bb5\u6811v'\u5408\u5e76,\u90a3\u4e48\u540c\u65f6\u5c5e\u4e8eu\u548cv\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u5c31\u4f1a\u88ab\u4fee\u6539\uff0c\u6b64\u65f6v\u5c31\u76f8\u5f53\u4e8e\u88ab\u9500\u6bc1\u4e86\n\n\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u5c34\u5c2c\u7684\u60c5\u51b5\u53d1\u751f(\u663e\u7136\u5982\u679c\u51fa\u73b0\u8fd9\u4e2abug\u4f60\u4f1a\u770b\u7740\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u4ee3\u7801\u6320\u534a\u5929\u5934\u800c\u4f9d\u7136\u4e0d\u77e5\u6240\u63aa\uff0c\u5e76\u4e14\u5c0f\u6570\u636e\u4f60\u6709\u5f88\u5927\u7684\u6982\u7387wa\u4e0d\u4e86)\u6211\u4eec\u9700\u8981\u5c06\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u8fc7\u7a0b**\u53ef\u6301\u4e45\u5316**\n\n\u5177\u4f53\u6765\u8bb2\u6bcf\u6b21\u6211\u4eec\u9700\u8981\u4fee\u6539u\u8282\u70b9\u7684\u5b69\u5b50\u6307\u9488\u7684\u65f6\u5019\u6211\u4eec\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9\u7136\u540e\u628a\u8fd9\u4e2a\u8282\u70b9\u7684\u5b69\u5b50\u6307\u9488\u6307\u5411\u5408\u5e76\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ea7\u751f\u7684\u8282\u70b9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4fdd\u7559\u4e86\u6bcf\u4e00\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u7684right\u96c6\u5408\u4e86~\n\n\u4ee3\u7801\u7684\u8bdd\u4e0d\u662f\u5f88\u597d\u5199\uff0c\u7ec6\u8282\u4e5f\u6bd4\u8f83\u591a\uff0c\u8bf7\u6ce8\u610f\u5c01\u88c5\u548c\u7ec6\u8282\u7684\u5206\u7c7b\u8ba8\u8bba\n\n\u4e0a\u4ee3\u7801~\n\n```C\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\nusing namespace std;const int N=1e6+10;typedef long long ll;char mde[N];int n;int nl;int nr;int m;\nstruct suffixautomaton//\u7b80\u6613\u540e\u7f00\u81ea\u52a8\u673a\u677f\u5b50 \n{\n    int mp[N][27];int ct;int fa[N];int len[N];int n;\n    inline int& operator [](const int& x){return len[x];}\n    inline void ih(int x){n=x;for(int i=1;i<=n;i++)len[i]=i;ct=n+1;}\n    inline void clr()\n    {\n        for(int i=1;i<=ct;i++)for(int j=1;j<=26;j++)mp[i][j]=0;\n        for(int i=1;i<=ct;i++)fa[i]=0;for(int i=1;i<=ct;i++)len[i]=0;\n    }\n    inline void ins(int x,int c)\n    {\n        int p=(x==1)?n+1:x-1;for(;p&&mp[p][c]==0;p=fa[p])mp[p][c]=x;\n        if(p==0){fa[x]=n+1;return;}int q=mp[p][c];\n        if(len[q]==len[p]+1){fa[x]=q;return;}len[++ct]=len[p]+1;\n        for(int i=1;i<=26;i++)mp[ct][i]=mp[q][i];\n        for(;p&&mp[p][c]==q;p=fa[p])mp[p][c]=ct;fa[ct]=fa[q];fa[q]=fa[x]=ct;\n    }\n};\nnamespace SM\n{\n    suffixautomaton sam;int s[40*N][2];int va[40*N];int cnt;\n    int v[N];int x[N];int al[N];int ct;\n    inline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\n    # define mov(p,c) (p=sam.mp[p][c])\n    # define jup(p) (p=sam.fa[p])\n    inline void ins(int p,int l,int r,int pos) \n    {\n        va[p]=pos;if(r-l==1){return;}int mid=(l+r)/2;\n        if(pos<=mid)ins(s[p][0]=++cnt,l,mid,pos);else ins(s[p][1]=++cnt,mid,r,pos);\n    }\n    inline int mg(int p1,int p2,int isr)//\u8fd9\u91cc\u7684\u5408\u5e76\u662f\u53ef\u6301\u4e45\u5316\u7684\uff0c\u4e0d\u4f1a\u9500\u6bc1\u4efb\u610f\u4e00\u9897\u7ebf\u6bb5\u6811 \n    {\n        int nw=(isr)?p1:++cnt;\n        if(s[p1][0]&&s[p2][0])s[nw][0]=mg(s[p1][0],s[p2][0],0);\n            else s[nw][0]=(s[p2][0])?s[p2][0]:s[p1][0];\n        if(s[p1][1]&&s[p2][1])s[nw][1]=mg(s[p1][1],s[p2][1],0);\n            else s[nw][1]=(s[p2][1])?s[p2][1]:s[p1][1];\n        va[nw]=max(va[s[nw][0]],va[s[nw][1]]);return nw;\n    }\n    inline int qry(int p,int l,int r,int dl,int dr)//\u67e5\u8be2\u533a\u95f4\u6700\u5927\u503c \n    {\n        if((p==0)||(dl==l&&r==dr))return va[p];int mid=(l+r)/2;int res=0;\n        if(dl<mid)res=max(res,qry(s[p][0],l,mid,dl,min(dr,mid)));\n        if(mid<dr)res=max(res,qry(s[p][1],mid,r,max(dl,mid),dr));\n        return res;\n    }\n    inline void dfs(int u){for(int i=al[u];i;i=x[i])dfs(v[i]),mg(u,v[i],1);}\n    inline void build()\n    {\n        sam.ih(n);for(int i=1;i<=n;i++)sam.ins(i,mde[i]-'a'+1);\n        cnt=sam.ct;for(int i=1;i<=sam.ct;i++)add(sam.fa[i],i);\n        for(int i=1;i<=n;i++)ins(i,0,n,i);dfs(n+1);\n    }\n    inline void trs(int& p,const int& c,int& len)//\u66b4\u529b\u8df3fail\u6811\u8fdb\u884c\u8f6c\u79fb \n    {\n        for(;p!=n+1;jup(p),len=sam[p])\n            if(sam.mp[p][c])\n            {\n                int mle=qry(sam.mp[p][c],0,n,0,nr)-nl+1;\n                if(sam[sam.fa[p]]<mle){len=min(len+1,mle);mov(p,c);return;}\n            }\n        if(p==n+1&&(sam.mp[p][c]==0||qry(sam.mp[p][c],0,n,0,nr)<nl)){len=0;return;}\n        mov(p,c);len++;\n    }\n    # undef mov\n    # undef jup\n}\nnamespace SM2\n{\n    suffixautomaton sam;char mde[N];int le;\n    int v[N];int x[N];int al[N];int ct;int mx[N];\n    inline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\n    # define mov(p,c) (p=sam.mp[p][c])\n    # define jup(p) (p=sam.fa[p])\n    inline void build()\n    {\n        for(int i=1;i<=sam.ct;i++)al[i]=0;ct=0;sam.clr();scanf(\"%s\",mde+1);\n        scanf(\"%d%d\",&nl,&nr);le=1;for(;mde[le+1]!='\\0';le++);sam.ih(le);\n        for(int i=1;i<=le;i++)sam.ins(i,mde[i]-'a'+1);\n        for(int i=1;i<=sam.ct;i++)add(sam.fa[i],i),mx[i]=sam[sam.fa[i]];\n    }\n    inline void aju(int p,const int& lim)//\u6253\u6807\u8bb0 \n    {\n        for(;p!=le+1&&sam[sam.fa[p]]>=lim;jup(p));\n        for(;p!=le+1&&sam[p]>mx[p];jup(p))mx[p]=max(mx[p],min(sam[p],lim));\n    }\n    inline ll dfs(int u)\n    {ll ret=0;for(int i=al[u];i;i=x[i])ret+=mx[v[i]]-sam[u]+dfs(v[i]);return ret;}\n    inline ll dfs2(int u)\n    {ll ret=0;for(int i=al[u];i;i=x[i])ret+=sam[v[i]]-sam[u]+dfs2(v[i]);return ret;}\n    inline void solve(int z)\n    {\n        for(int i=1,p1=n+1,p2=le+1,nle=0;i<=le;i++)\n            mov(p2,mde[i]-'a'+1),SM::trs(p1,mde[i]-'a'+1,nle),aju(p2,nle);\n        printf(\"%lld\\n\",dfs2(le+1)-dfs(le+1));\n    }\n    # undef mov\n    # undef jup\n}\nint main()\n{\n    scanf(\"%s\",mde+1);for(n=1;mde[n+1]!='\\0';n++);SM::build();scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)SM2::build(),SM2::solve(i);return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1546171454,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1\u540e\u7f00\u6570\u7ec4\u7684~~\u5927\u5e38\u6570~~\u5199\u6cd5\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u5148\u6c42\u51fa$T$\u4e2d\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\uff0c\u7136\u540e\u51cf\u53bb\u662f$S(l,r)$\u5b50\u4e32\u7684\u3002\n\n\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\uff0c\u76f4\u63a5\u7528height\u6570\u7ec4\u7684\u6027\u8d28\u5c31\u53ef\u4ee5\u6c42\u3002\u5177\u4f53\u89c12408\u90a3\u9898\u3002\n\n\u6211\u4eec\u8003\u8651\uff0c\u5bf9\u4e8e$T$\u7684\u6bcf\u4e00\u4e2a\u540e\u7f00\uff0c\u6c42\u51fa\u5176\u6700\u957f\u7684\u524d\u7f00\u957f\u5ea6$L$\uff0c\u4f7f\u5f97\u8be5\u540e\u7f00\u957f\u5ea6\u4e3a$L$\u7684\u524d\u7f00\u662f$S(l,r)$\u7684\u5b50\u4e32\u3002\n\n\u628a$S$\u548c\u6240\u6709$T$\u8fde\u8d77\u6765\u5efa\u540e\u7f00\u6570\u7ec4\u3002\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u7528\u94fe\u8868\u7684\u65b9\u6cd5\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u5728\u540c\u4e00\u4e2a\u4e32\u4e2d\u7684\u524d\u9a71\u540e\u7ee7\u3002\n\n\u7136\u540e\u6211\u4eec**\u6309\u987a\u5e8f**\u8003\u8651$T$\u7684\u6bcf\u4e00\u4e2a\u540e\u7f00\u3002\n\n\u5982\u679c$a$\u4f4d\u7f6e\u7684\u540e\u7f00\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u957f\u524d\u7f00\u4e3a$L$,\uff0c\u5219$a+1$\u4f4d\u7f6e\u7684\u81f3\u5c11\u4e3a$L-1$\u3002\u539f\u7406\u548c\u6c42height\u6570\u7ec4\u76f8\u540c\uff0c\u4e24\u8fb9\u90fd\u540c\u65f6\u53bb\u6389\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u81f3\u5c11\u8fd8\u7559\u4e0b$L-1$\u3002\n\n\u6240\u4ee5\u8003\u8651\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u8bdd\uff0c\u7528\u53cc\u6307\u9488\u626b\u63cf\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u7136\u540e\uff0c\u5047\u5982\u6211\u4eec\u73b0\u5728\u8003\u8651\u4f4d\u7f6e$a$\u7684\u957f\u5ea6\u4e3a$L$\u7684\u524d\u7f00\u662f\u5426\u53ef\u884c\uff0c\u5c31\u662f\u76f8\u5f53\u4e8e\u5728$S$\u7684$[l,r-L+1]$\u5185\u627e\u4e00\u4e2a\u4f4d\u7f6e$b$\uff0c\u6ee1\u8db3$LCP(a,b)\\geqslant L$\u3002\n\n\u6ee1\u8db3$LCP(a,b)\\geqslant L$\u6761\u4ef6\u7684\u5728\u540e\u7f00\u6570\u7ec4\u4e0a\u7684\u533a\u95f4$[ll,rr]$\uff0c\u53ef\u4ee5\u4e8c\u5206\uff0c\u914d\u5408height\u6570\u7ec4\u7684ST\u8868\u5728$O(\\log n)$\u7684\u65f6\u95f4\u5185\u6c42\u51fa\u3002\n\n\u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\u8be2\u95ee\u5728\u540e\u7f00\u6570\u7ec4\u4e0a\u7684\u533a\u95f4$[ll,rr]$\u5185\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5728$S$\u7684$[l,r-l+1]$\u4e2d\u7684\u5b57\u7b26\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7528\u5efa\u4e3b\u5e2d\u6811\u7136\u540e\u8be2\u95ee\uff0c\u5355\u6b21\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6$O(\\log n)$\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5b83\u4e0e\u540e\u7f00\u6570\u7ec4\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u4f1a\u7b97\u91cd\uff0c\u6240\u4ee5\u8981\u51cf\u6389\u5b83\u4eec\u7684$LCP$\u3002\u7531\u4e8e\u4e24\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u4e0d\u8fde\u7eed\uff0c\u8fd9\u90e8\u5206\u4e5f\u8981\u7528ST\u8868\u6765\u67e5\u3002\n\n\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\u3002$n=|S|+\\sum|T|$\u3002\n\n\u5e38\u6570\u5de8\u5927\uff0c\u51e0\u4e4e\u5361\u7740\u65f6\u9650\u8fc7\u7684QAQ\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 500505\n#define M 1800505\n#define reg register\n#define lg2(x)(31-__builtin_clz(x))\ntypedef long long LL;\nint n,sa[M],height[M],x[M],s[M],mgk,bel[M],m,QL[N],QR[N],y[M],st[22][M],nxt[M],head[N],node=0,rt[M],pp[M],len[N];\nint ls[M*20],rs[M*20],sz[M*20];\nchar ss[N];\nbool isk;\nint _L,_R;\nvoid add(int&o,int pr,int l,int r,int pos){\n\tsz[o=++node]=sz[pr]+1;\n\tif(l<r){\n\t\tconst int mid=l+r>>1;\n\t\tif(pos<=mid)add(ls[o],ls[pr],l,mid,pos),rs[o]=rs[pr];else add(rs[o],rs[pr],mid+1,r,pos),ls[o]=ls[pr];\n\t}\n}\nvoid sort(){\n\tint m=mgk,c[M];\n\tfor(int i=1;i<=m;++i)c[i]=0;\n\tfor(int i=1;i<=n;++i)++c[x[i]=s[i]];\n\tfor(int i=1;i<=m;++i)c[i]+=c[i-1];\n\tfor(int i=n;i;--i)sa[c[x[i]]--]=i;\n\tfor(int k=1,p;k<=n;k<<=1){\n\t\tp=0;\n\t\tfor(int i=n-k+1;i<=n;++i)y[++p]=i;\n\t\tfor(reg int i=1;i<=n;++i)if(sa[i]>k)y[++p]=sa[i]-k;\n\t\tfor(reg int i=1;i<=m;++i)c[i]=0;\n\t\tfor(reg int i=1;i<=n;++i)++c[x[i]];\n\t\tfor(reg int i=1;i<=m;++i)c[i]+=c[i-1];\n\t\tfor(reg int i=n;i;--i)sa[c[x[y[i]]]--]=y[i];\n\t\tstd::swap(x,y);\n\t\tx[sa[1]]=p=1;\n\t\tfor(int i=2;i<=n;++i)\n\t\tx[sa[i]]=y[sa[i]]==y[sa[i-1]]&&y[sa[i]+k]==y[sa[i-1]+k]?p:++p;\n\t\tif(p==n)break;\n\t\tm=p;\n\t}\n\tfor(int i=1,k=0;i<=n;++i)\n\tif(x[i]>1){\n\t\tk-=!!k;\n\t\tconst int j=sa[x[i]-1];\n\t\twhile(s[i+k]==s[j+k])++k;\n\t\theight[x[i]]=k;\n\t}\n}\ninline int find(int l,int r){\n    if(l>r)return n;\n    const int lg=lg2(r-l+1);\n    return std::min(st[lg][l],st[lg][r-(1<<lg)+1]);\n}\nvoid init(){\n\tfor(reg int i=1;i<=n;++i)st[0][i]=height[i];\n    for(int i=0;i<21;++i)\n    for(reg int j=1;j<=n;++j)\n    if(j+(1<<i)<=n)st[i+1][j]=std::min(st[i][j],st[i][j+(1<<i)]);else break;\n    int pre[N];\n    memset(pre,0,sizeof pre);\n    for(int i=1;i<=n;++i)\n    if(s[sa[i]]<='z'){\n    \tif(pre[bel[sa[i]]])\n    \tnxt[pre[bel[sa[i]]]]=i,pp[i]=pre[bel[sa[i]]];else head[bel[sa[i]]]=i;\n    \tpre[bel[sa[i]]]=i;\n    }\n}\nvoid query(const int&ri,const int&le,int l,int r){\n\tif(sz[ri]==sz[le]||isk)return;\n\tif(_L<=l&&r<=_R)return(void)(isk=1);\n\tconst int mid=l+r>>1;\n\tif(_L<=mid)query(ls[ri],ls[le],l,mid);\n\tif(mid<_R&&!isk)query(rs[ri],rs[le],mid+1,r);\n}\nbool check(int pos,int len,int l,int r){\n\tint L,ll,rr;\n\tll=1,rr=pos-1;\n\twhile(ll<=rr){\n\t\tconst int mid=ll+rr>>1;\n\t\tif(find(mid+1,pos)>=len)rr=mid-1;else ll=mid+1;\n\t}\n\tL=rr;\n\tll=pos+1,rr=n;\n\twhile(ll<=rr){\n\t\tconst int mid=ll+rr>>1;\n\t\tif(find(pos+1,mid)>=len)ll=mid+1;else rr=mid-1;\n\t}\n\tisk=0;\n\t_L=l,_R=r;\n\tquery(rt[ll-1],rt[L],1,n);\n\treturn isk;\n}\nint main(){\n\tmemset(bel,-1,sizeof bel);\n\tmgk='z'+1;\n\tscanf(\"%s\",ss);\n\tfor(int i=0;ss[i];++i)\n\ts[++n]=ss[i],bel[n]=0;\n\ts[++n]=mgk++;\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%s%d%d\",ss,QL+i,QR+i);\n\t\tfor(int j=0;ss[j];++j)\n\t\ts[++n]=ss[j],bel[n]=i;\n\t\tlen[i]=n;\n\t\ts[++n]=mgk++;\n\t}\n\tsort();\n\tinit();\n\tfor(reg int i=1;i<=n;++i)\n\tif(!bel[sa[i]])add(rt[i],rt[i-1],1,n,sa[i]);else rt[i]=rt[i-1];\n\tfor(int i=1;i<=m;++i){\n\t\tLL ans=len[i]-sa[head[i]]+1;\n\t\tint mnid=sa[head[i]];\n\t\tfor(int j=nxt[head[i]];j;j=nxt[j]){\n\t\t\tans+=len[i]-sa[j]+1;\n\t\t\tans-=find(pp[j]+1,j);\n\t\t\tmnid=std::min(mnid,sa[j]);\n\t\t}\n\t\tfor(int j=mnid,L=mnid;s[j]<='z';++j){\n\t\t\tif(L<j)L=j;\n\t\t\twhile(s[L]<='z'&&check(x[j],L-j+1,QL[i],QR[i]-L+j))++L;\n\t\t\tif(x[j]!=head[i])ans-=std::max(L-j-find(pp[x[j]]+1,x[j]),0);else\n\t\t\tans-=L-j;\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1545397127,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "\u9898\u89e3\u91cc\u597d\u50cf\u90fd\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u8f6c\u5316\u4e3a\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898\u7136\u540e\u53ea\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u505a\u6cd5\n\n\u611f\u8c22**E_Space**\u5728FJ\u51ac\u4ee4\u8425\u7684\u8bb2\u89e3\n\n\u540e\u7f00\u81ea\u52a8\u673a\u7684**\u5339\u914d**\uff1a**\u627eT\u7684\u6240\u6709\u524d\u7f00\u4e2d\u6700\u957f\u7684\u662fS\u5b50\u4e32\u7684\u540e\u7f00**\n\n**\u53cc\u6307\u9488\u626b\u63cf\u6cd5**\uff1a\n\n\u201c\u6bd4\u5982\u5bf9\u4e8eT\u7684\u7b2ci\u4e2a\u524d\u7f00\uff0c\u5339\u914d\u7684\u72b6\u6001\u4e3ax\n\u8bbec\u4e3aT\u7684\u7b2ci+1\u4e2a\u5b57\u7b26\n\u5982\u679cxc\u662fS\u7684\u5b50\u4e32\uff0c\u90a3\u4e48\u663e\u7136T\u7684\u7b2ci+1\u4e2a\u524d\u7f00\u6700\u957f\u7684\uff08\u662fS\u7684\u5b50\u4e32\u7684\uff09\u540e\u7f00\u662fxc\n\u8fd9\u540c\u65f6\u610f\u5473\u7740x\u6240\u5728\u8282\u70b9\u6709\u5173\u4e8ec\u7684\u8f6c\u79fb\u8fb9\n\u4e8e\u662f\u4f60\u53ea\u9700\u8981\u5c06x\u6cbf\u7740\u8fd9\u6761\u8fb9\u8d70\u4e00\u6b65\uff0c\u518d\u5c06\u5176\u957f\u5ea6\u52a0\u4e0a1\u5373\u53ef\n\u5426\u5219\u8bf4\u660eT\u7684\u7b2ci+1\u4e2a\u524d\u7f00\u6700\u957f\u7684\uff08\u662fS\u7684\u5b50\u4e32\u7684\uff09\u540e\u7f00\u6bd4xc\u77ed\n\u8003\u8651\u4e0d\u65ad\u5220\u53bbxc\u7684\u9996\u5b57\u7b26\uff0c\u76f4\u5230\u5b83\u662fS\u7684\u5b50\u4e32\u4e3a\u6b62\n\u8fd9\u4e5f\u76f8\u5f53\u4e8e**\u4e0d\u65ad\u5220\u53bbx\u7684\u9996\u5b57\u7b26\uff0c\u76f4\u5230\u5b83\u6709c\u7684\u8f6c\u79fb\u8fb9\u4e3a\u6b62**\uff0c\u5f53\u7136\u8981\u6ce8\u610f\u7279\u5224\u5220\u5230\u7a7a\u4ee5\u540e\u4ecd\u7136\u6ca1\u6709c\u7684\u8f6c\u79fb\u8fb9\u7684\u60c5\u51b5\n\u5728\u5220\u9996\u5b57\u7b26\u7684\u65f6\u5019\u6ce8\u610f\u5224\u65ad\u662f\u5426\u8981\u8df3\u5230\u6240\u5728\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u628a\u5220\u53bb\u9996\u5b57\u7b26\u6539\u6210**\u76f4\u63a5\u8df3\u7236\u4eb2\u5e76\u4fee\u6539\u5f53\u524d\u4e32\u957f\u5ea6\u4e3a\u7236\u4eb2\u7684len**\u6765\u8282\u7701\u5e38\u6570\u201d\n\n\u2014\u2014\u6458\u81eaEspace\u8bfe\u4ef6\n\n\u5f31\u5316\u7248\u95ee\u9898\uff1a\n\n**\u6c42S\u548cT\u6709\u591a\u5c11\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u975e\u7a7a\u516c\u5171\u5b50\u4e32**\n\n\u8003\u8651\u679a\u4e3eT\u7684\u6bcf\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u8be2\u95ee\u5176\u662f\u5426\u662fS\u7684\u5b50\u4e32\n\n\u201c\u5148\u5efa\u51faT\u7684\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u7136\u540e\u8003\u8651\u6bcf\u4e2a\u8282\u70b9\u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u4e2d\u6709\u54ea\u4e9b\u662fS\u7684\u5b50\u4e32\n\n\u7531\u4e8e\u4e00\u4e2a\u8282\u70b9\u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u67d0\u4e2a\u5b50\u4e32\u7684\u540e\u7f00\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u8fd9\u4e9b\u5b57\u7b26\u4e32\u5728T\u4e2d\u7684\u4e00\u4e2a\u53f3\u7aef\u70b9\uff08\u5373\u8282\u70b9\u7684at\uff09\uff0c\u7136\u540e\u67e5\u8be2\u4e00\u4e0bT\u7684\u957f\u5ea6\u4e3aat\u7684\u524d\u7f00\u6700\u957f\u7684\uff08\u662fS\u7684\u5b50\u4e32\u7684\uff09\u540e\u7f00\u7684\u957f\u5ea6len\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053T\u7684\u4ee5at\u4e3a\u53f3\u7aef\u70b9\u7684\u5b50\u4e32\u4e2d\u957f\u5ea6\u4e0d\u8d85\u8fc7len\u7684\u90fd\u662fS\u7684\u5b50\u4e32\uff0c\u957f\u5ea6\u5927\u4e8elen\u7684\u90fd\u4e0d\u662fS\u7684\u5b50\u4e32\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u628a(0,len]\u548c\u8282\u70b9\u63a5\u53d7\u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u533a\u95f4\uff08\u5373(\u7236\u4eb2\u7684max,\u81ea\u5df1\u7684max]\uff09\u7684\u4ea4\u4e2d\u7684\u6574\u6570\u4e2a\u6570\u8ba1\u5165\u7b54\u6848\n\n\u81f3\u4e8e\u5982\u4f55\u6c42len\uff0c\u53ea\u8981\u9884\u5904\u7406\u7684\u65f6\u5019\u5efa\u51faS\u7684\u81ea\u52a8\u673a\uff0c\u7528T\u5728\u4e0a\u9762\u8dd1\u4e00\u904d\u5c31\u53ef\u4ee5\u4e86\u201d\n\n\u2014\u2014\u6458\u81eaE_Space\u8bfe\u4ef6\n\n### [NOI2018]\u4f60\u7684\u540d\u5b57\uff1a\n\n**\u7ed9\u5b9aS(Len(S)<=5e5),Q(Q<=1e5)\u6b21\u8be2\u95ee(T,l,r)\u6c42T(\u2211Len(T)<=1e6)\u548cS[l,r]\u6709\u591a\u5c11\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u975e\u7a7a\u5b50\u4e32**\n\n\u201c\u4ecd\u7136\u8003\u8651\u4e4b\u524d\u7684\u53cc\u6307\u9488\u626b\u63cf\u6cd5\uff0c\u4eceLj\u5f00\u59cb\uff0c\u4e0d\u65ad\u5220\u53bb\u5176\u9996\u5b57\u7b26\uff0c\u76f4\u5230\u5b83\u52a0\u4e0aT\u7684\u7b2cj+1\u4f4d\u662fS[li:ri]\u7684\u5b50\u4e32\n\n\u539f\u5148\u6211\u4eec\u7684\u5224\u65ad\u65b9\u6cd5\u662f\u5224\u65ad\u5f53\u524d\u72b6\u6001\u6240\u5728\u7684\u8282\u70b9\u662f\u5426\u6709T(j+1)\u7684\u8f6c\u79fb\u8fb9\n\n\u4f46\u662f\u73b0\u5728\u4e0d\u80fd\u8fd9\u4e48\u5224\u4e86\uff0c\u56e0\u4e3a**\u8f6c\u79fb\u8fb9\u6307\u5411\u7684\u72b6\u6001\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u662fS\u7684\u5b50\u4e32\u4f46\u4e0d\u4e00\u5b9a\u662fS[li:ri]\u7684\u5b50\u4e32**\n\n\u6211\u4eec\u7684\u95ee\u9898\u662f\uff0c\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u72b6\u6001x\u662f\u5426\u5728S[li:ri]\u4e2d\u51fa\u73b0\n\n\u8003\u8651x\u5728S\u4e2d\u51fa\u73b0\u7684\u6240\u6709\uff08\u53f3\u7aef\u70b9\u7684\uff09\u4f4d\u7f6e\uff0c\u5373x\u6240\u5728\u8282\u70b9\u7684Right\u96c6\u5408\n\nRight\u96c6\u5408\u4e2d\u4ec0\u4e48\u6837\u7684\u4f4d\u7f6ep\u624d\u4f1a\u8ba9x\u5728S[li:ri]\u4e2d\u51fa\u73b0\u5462\uff1f\n\nx\u5728S[li:ri]\u4e2d\u51fa\u73b0\u5f53\u4e14\u4ec5\u5f53x\u6240\u5728\u8282\u70b9\u7684Right\u96c6\u5408\u4e2d\u5b58\u5728p\u4f7f\u5f97 **p\u2264ri \u5e76\u4e14 p-len(x)+1\u2265li**\uff08\u5176\u4e2dlen(x)\u662fx\u7684\u957f\u5ea6\uff09\n\n\u90a3\u4e48\u5c31\u662f**\u5224\u65adRight\u96c6\u5408\u4e2d\u4e0d\u8d85\u8fc7ri\u7684p\u4e2d\u6700\u5927\u7684(p-len(x)+1)\u662f\u5426\u5927\u4e8e\u7b49\u4e8eli**\n\n\u5f53\u7136\uff0c(p-len(x)+1)\u6700\u5927\u5f53\u4e14\u4ec5\u5f53p\u6700\u5927\n\n\u8fd9\u662f\u4e2a\u7ecf\u5178\u7684**\u4e8c\u7ef4\u504f\u5e8f**\u95ee\u9898\n\n\u4e00\u7ef4\u662f**p\u2264ri**\uff0c\u53e6\u4e00\u7ef4\u662fat\u503c\u4e3ap\u7684\u8282\u70b9\u5fc5\u987b\u8981\u5728x\u6240\u5728\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff08\u8fd9\u6837Right\u96c6\u5408\u4e2d\u624d\u4f1a\u6709p\uff09\u201d\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7ef4\uff1a\u628a\u6240\u6709\u8be2\u95ee\u5b58\u4e0b\u6765\uff0c\u79bb\u7ebf\u5904\u7406\uff0c\u6309\u7167r\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u628aS\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u6240\u6709at<=r\u7684np\u8282\u70b9\u6fc0\u6d3b\uff0c\u63d2\u5165\u5230\u7ebf\u6bb5\u6811\u4e2d\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u7ef4\uff1a\u5efaS\u540e\u7f00\u81ea\u52a8\u673a\u540e \u6211\u4eec\u628a\u6240\u6709\u8282\u70b9\u7684fa\u548c\u5b83\u81ea\u5df1\u8fde\u8fb9\uff0c\u5f62\u6210\u4e00\u68f5\u6811,\u5229\u7528\u6811\u7684**dfs\u5e8f**\uff0c\u6211\u4eec\u80fd\u5c06\u6811\u7684\u4e00\u68f5\u5b50\u6811\u8303\u56f4\u8f6c\u5316\u6210\u4e00\u6bb5\u533a\u95f4\uff0c\u4ece\u800c\u7528\u7ebf\u6bb5\u6811\u6c42\u533a\u95f4\u6700\u5927\u503c\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(\u2211Len(T) log Len(S))\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing std::max;\nusing std::sort;\ntypedef long long ll;\nconst int LS=5e5+10,LT=1e6+10,Q=1e5+10;\ntemplate<int maxn>struct Suffix_Automaton\n{\n\tint son[maxn][26],fa[maxn],back[maxn],right[maxn],len[maxn],last,cnt;\n\tinline const void clear(int p)\n\t{\n\t\tfa[p]=right[p]=back[p]=len[p]=0;\n\t\tmemset(son[p],0,sizeof(son[p]));\n\t}\n\tinline const void insert(int c,int k)\n\t{\n\t\tint p=last,np=++cnt;clear(np);\n\t\tlen[last=np]=len[p]+1;back[right[np]=k]=np;\n\t\tfor (;p&&!son[p][c];p=fa[p])son[p][c]=np;\n\t\tif (!p)return (void)(fa[np]=1);\n\t\tint q=son[p][c];\n\t\tif (len[q]==len[p]+1)return (void)(fa[np]=q);\n\t\tint nq=++cnt;len[nq]=len[p]+1;\n\t\tmemcpy(son[nq],son[q],sizeof(son[q]));fa[nq]=fa[q];\n\t\tfa[q]=fa[np]=nq;right[nq]=k;\n\t\tfor (;p&&son[p][c]==q;p=fa[p])son[p][c]=nq;\n\t}\n\tinline const void build(char *s)\n\t{\n\t\tint n=strlen(s+1);\n\t\tfor (int i=1;i<=n;i++)insert(s[i]-97,i);\n\t}\n\tinline const void clear()\n\t{\n\t\tclear(last=cnt=1);\n\t}\n\tinline Suffix_Automaton(){last=cnt=1;}\n};\nSuffix_Automaton<LS<<1>S,T;\nint to[LS<<1],next[LS<<1],head[LS<<1],cnt;\ninline const void addedge(int u,int v)\n{\n\tnext[++cnt]=head[u];to[head[u]=cnt]=v;\n}\ninline const void build()\n{\n\tfor (int i=1;i<=S.cnt;i++)if (S.fa[i])addedge(S.fa[i],i);\n}\nint dfn[LS<<1],end[LS<<1];\ninline const void dfs(int p)\n{\n\tdfn[p]=++cnt;\n\tfor (int i=head[p];i;i=next[i])dfs(to[i]);\n\tend[p]=cnt;\n}\nclass Segment_Tree\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tint mx;\n\t\t\ttree *lson,*rson;\n\t\t\tinline const void pushup()\n\t\t\t{\n\t\t\t\tmx=max(lson->mx,rson->mx);\n\t\t\t}\n\t\t\tinline const void update(int l,int r,int pos,int key)\n\t\t\t{\n\t\t\t\tif (l==r)return (void)(mx=key);\n\t\t\t\tint mid=l+r>>1;\n\t\t\t\tif (pos<=mid)lson->update(l,mid,pos,key);\n\t\t\t\telse rson->update(mid+1,r,pos,key);\n\t\t\t\tpushup();\n\t\t\t}\n\t\t\tinline const int query(int l,int r,int L,int R)\n\t\t\t{\n\t\t\t\tif (l>R||r<L)return 0;\n\t\t\t\tif (l>=L&&r<=R)return mx;\n\t\t\t\tint mid=l+r>>1;\n\t\t\t\treturn max(lson->query(l,mid,L,R),rson->query(mid+1,r,L,R));\n\t\t\t}\n\t\t}*root,memory_pool[LS<<3],*tail;\n\t\tinline const void build(tree *&p,int l,int r)\n\t\t{\n\t\t\tp=tail++;\n\t\t\tif (l==r)return;\n\t\t\tint mid=l+r>>1;\n\t\t\tbuild(p->lson,l,mid);\n\t\t\tbuild(p->rson,mid+1,r);\n\t\t}\n\tpublic:\n\t\tinline Segment_Tree(){tail=memory_pool;}\n\t\tinline const void build(){build(root,1,S.cnt);}\n\t\tinline const void update(int pos,int key){root->update(1,S.cnt,pos,key);}\n\t\tinline const int query(int l,int r){return root->query(1,S.cnt,l,r);}\n}sgt;\nchar s[LS],t[LT],*tail=t;\nll ans[Q];\nint m;\nstruct query\n{\n\tchar *t;int l,r,len,id;\n\tinline query(char *a=0,int b=0,int c=0,int d=0,int e=0):t(a),l(b),r(c),len(d),id(e){}\n\tinline const bool operator<(const query &q)const\n\t{\n\t\treturn r<q.r;\n\t}\n}q[Q];\nint f[LT];\nint main()\n{\n\tscanf(\"%s\",s+1);S.build(s);\n\tbuild();cnt=0;dfs(1);sgt.build();\n\tscanf(\"%d\",&m);\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint l,r;\n\t\tscanf(\"%s%d%d\",tail+1,&l,&r);\n\t\tq[i]=query(tail,l,r,strlen(tail+1),i);\n\t\ttail+=q[i].len+1;\n\t}\n\tsort(q+1,q+m+1);cnt=1;\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tfor (;cnt<=q[i].r;cnt++)sgt.update(dfn[S.back[cnt]],cnt);\n\t\tT.build(q[i].t);\n\t\tint now=1,len=0;\n\t\tfor (int j=1;j<=q[i].len;j++)\n\t\t{\n\t\t\twhile (1)\n\t\t\t{\n\t\t\t\tif (!now){len=0;now=1;break;}\n\t\t\t\tint nxt=S.son[now][q[i].t[j]-97];\n\t\t\t\tif (!nxt)if (now=S.fa[now],now)len=S.len[now];else;\n\t\t\t\telse {now=nxt;len++;break;}\n\t\t\t}\n\t\t\twhile (1)\n\t\t\t{\n\t\t\t\tint mx=sgt.query(dfn[now],end[now]);\n\t\t\t\tif (mx&&mx-len+1>=q[i].l)break;\n\t\t\t\tif (mx&&mx-S.len[S.fa[now]]+1>q[i].l){len=mx-q[i].l+1;break;}\n\t\t\t\tnow=S.fa[now];len=S.len[now];\n\t\t\t}\n\t\t\tf[j]=len;\n\t\t}\n\t\tll nowans=0ll;\n\t\tfor (int j=2;j<=T.cnt;j++)\n\t\t{\n\t\t\tint right=T.right[j],len=T.len[j],flen=T.len[T.fa[j]];\n\t\t\tif (f[right]<=flen)nowans+=1ll*len-flen;\n\t\t\telse if (f[right]<len)nowans+=len-f[right];\n\t\t}\n\t\tans[q[i].id]=nowans;\n\t\tT.clear();\n\t}\n\tfor (int i=1;i<=m;i++)printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1563588112,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c->[\u8fd9\u91cc](https://www.cnblogs.com/bztMinamoto/p/9682480.html)\n\n\u6211\u6709\u79cd\u81ea\u5df1\u6839\u672c\u6ca1\u5b66\u8fc7SAM\u7684\u611f\u89c9\u2026\u2026\u6700\u540e\u8fd8\u662f\u6284\u4e86\u8001\u534a\u5929\u7684\u9898\u89e3\u2026\u2026\n\n\u9996\u5148\uff0c\u5bf9$S$\u548c\u6bcf\u4e00\u6b21\u7684$T$\u90fd\u5efa\u4e00\u4e2aSAM\n\n\u5148\u8003\u8651\u4e00\u4e0b$l=1,r=\\left| S \\right|$\u7684\u60c5\u51b5\n\n\u8bbe$lim_i$\u8868\u793a\u5b57\u7b26\u4e32$T[1..i]$\u80fd\u5728$S$\u4e2d\u5339\u914d\u5230\u7684\u6700\u957f\u540e\u7f00\uff08\u5373$T[i-lim_i+1,i]$\u662f$S$\u7684\u5b50\u4e32\u4e14$lim_i$\u6700\u5927\uff09\uff08\u6709\u53ef\u80fd\u4e0d\u5b58\u5728\u8fd9\u4e2a\u5b57\u7b26\u90a3\u4e48$lim_i=0$\uff09\n\n\u8fd9\u4e2a$lim_i$\u53ef\u4ee5\u4e0d\u65ad\u5730\u5728$S$\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u8df3\u6765\u6c42\u51fa\u3002\u5f53\u65e0\u6cd5\u5411\u4e0b\u5339\u914d\u65f6\uff0c\u4e00\u76f4\u8df3parent\u6811\u76f4\u5230\u53ef\u4ee5\u5339\u914d\u4e3a\u6b62\n\n\u6211\u4eec\u5047\u8bbe\u5bf9\u4e8e$T$\u7684\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684$endpos$\u96c6\u5408\u4e2d\u6240\u80fd\u4ee3\u8868\u7684\u6700\u957f\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a$l_i$\uff0c$tag_i$\u8868\u793a\u8be5\u96c6\u5408\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7ed3\u5c3e\u4f4d\u7f6e\uff08\u56e0\u4e3a\u96c6\u5408\u91cc\u5b57\u7b26\u4e32\u4e92\u4e3a\u540e\u7f00\u6240\u4ee5\u7ed3\u5c3e\u76f8\u540c\uff09\uff0c$fa_i$\u8868\u793aparent\u6811\u4e0a\u7684\u7236\u4eb2\uff0c$cnt$\u8868\u793a\u81ea\u52a8\u673a\u8282\u70b9\u603b\u4e2a\u6570\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662f$$ans=\\sum_{i=2}^{cnt}max(0,l_i-max(l_{fa_i},lim_{tag_i}))$$\n\nps\uff1a\u8fd9\u91cc\u7684lim\u6307\u7684\u5e76\u4e0d\u662f\u4e0a\u6587\u7684lim\u800c\u662f\u6700\u957f\u540e\u7f00\u7684\u957f\u5ea6\n\n\u4e0a\u9762\u5f0f\u5b50\u7684\u610f\u601d\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u4e0d\u5c5e\u4e8e$S$\u7684\u5b50\u4e32\u7684\u603b\u4e2a\u6570\u4e3a\u5f53\u524d\u8282\u70b9\u4ee3\u8868\u7684\u96c6\u5408\u5b57\u7b26\u4e32\u4e2a\u6570\u51cf\u53bb\u4e0e$S$\u6709\u5339\u914d\u7684\u5b50\u4e32\u4e2a\u6570\n\n\u7136\u540e\u53ea\u8981\u5728$T$\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u679a\u4e3e\u6bcf\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\n\n\u73b0\u5728\u6765\u8003\u8651$l$\u548c$r$\u4efb\u610f\u7684\u60c5\u51b5\u8be5\u600e\u4e48\u505a\n\n\u8fd9\u4e2a\u65f6\u5019\u5c31\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u540e\u7f00\u81ea\u52a8\u673a\u7684$endpos$\u96c6\u5408\u4e86\uff08\u4e0d\u660e\u767d\u8fd9\u4e2a\u600e\u4e48\u505a\u7684\u6211\u7b80\u5355\u8bf4\u4e00\u4e0b\uff0c\u5c31\u662f\u641e\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684$endpos$\u96c6\u5408\u91cc\u6709\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u5c31\u628a\u5b83\u52a0\u5165\u4ee5\u8be5\u70b9\u4e3a\u6839\u7684\u6811\u4e2d\uff0cparent\u6811\u4e0a\u7236\u4eb2\u8282\u70b9\u7684$endpos$\u96c6\u5408\u5fc5\u7136\u5305\u542b\u513f\u5b50\u7684$endpos$\u96c6\u5408\u6240\u4ee5\u5c06\u6bcf\u4e2a\u70b9\u7684$endpos$\u96c6\u5408\u4e0e\u5b83\u513f\u5b50\u7684\u5408\u5e76\u3002\u7136\u540e\u67e5\u8be2\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u6709$endpos$\u4f4d\u4e8e\u67d0\u4e2a\u533a\u95f4\u4e2d\u53ea\u8981\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u770b\u770b\u8fd9\u4e2a\u533a\u95f4\u4ee3\u8868\u7684\u8282\u70b9\u662f\u5426\u88ab\u5f00\u51fa\u6765\u8fc7\u5c31\u597d\u4e86\uff08\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u53ea\u6709\u5b58\u5728\u7684\u4f4d\u7f6e\u7684\u8282\u70b9\u88ab\u5f00\u51fa\u6765\u8fc7\uff09\uff09\n\n\u6211\u4eec\u5728\u5904\u7406$lim_i$\u96c6\u5408\u7684\u65f6\u5019\u8981\u6ce8\u610f\uff0c\u8981\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u5728$S[l..r]$\u533a\u95f4\u4e2d\u51fa\u73b0\u8fc7\u3002\u8bbe$p$\u4e3a\u5f53\u524d\u5728$S$\u7684\u81ea\u52a8\u673a\u4e0a\u8dd1\u5230\u7684\u8282\u70b9\uff0c$len$\u8868\u793a\u5339\u914d\u4e86$[i-len+1..i]$\uff0c\u56e0\u4e3a\u8981\u770b\u80fd\u5426\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u8981\u5339\u914d$[i-len,i]$\uff0c\u4e14$[l+len,r]$\u4e2d\u6709\u540e\u7ee7\u8282\u70b9\u7684$endpos$\u5b58\u5728\u624d\u884c\uff08\u53ef\u80fd\u8bf4\u7684\u70e6\u4e86\u70b9\uff0c\u4ed4\u7ec6\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff09\n\n\u5dee\u4e0d\u591a\u5c31\u8fd9\u6837\n```\n//minamoto\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nchar sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(ll x){\n    if(C>1<<20)Ot();\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]='\\n';\n}\nconst int N=1e6+5,M=2e7+5,inf=0x3f3f3f3f;\nint q,n,m,rt[N],lim[N];char S[N];ll ans;\nnamespace tree{\n\tint cnt,L[M],R[M];\n\tvoid ins(int &p,int l,int r,int x){\n\t\tif(!p) p=++cnt;\n\t\tif(l==r) return;\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid) ins(L[p],l,mid,x);\n\t\telse ins(R[p],mid+1,r,x);\n\t}\n\tint merge(int x,int y){\n\t\tif(!x||!y) return x+y;\n\t\tint p=++cnt;\n\t\tL[p]=merge(L[x],L[y]);\n\t\tR[p]=merge(R[x],R[y]);\n\t\treturn p;\n\t}\n\tbool query(int p,int l,int r,int ql,int qr){\n\t\tif(!p||ql>qr) return false;\n\t\tif(ql<=l&&qr>=r) return true;\n\t\tint mid=(l+r)>>1;\n\t\tif(ql<=mid&&query(L[p],l,mid,ql,qr)) return true;\n\t\tif(qr>mid&&query(R[p],mid+1,r,ql,qr)) return true;\n\t\treturn false;\n\t}\n}\nnamespace SAM{\n\tint cnt=1,last=1;\n\tint ch[N][26],l[N],fa[N],c[N],a[N],in[N];\n\tvoid ins(int c){\n\t\tint p=last,np=++cnt;last=np,l[np]=l[p]+1,in[np]=1;\n\t\tfor(;p&&!ch[p][c];p=fa[p]) ch[p][c]=np;\n\t\tif(!p) fa[np]=1;\n\t\telse{\n\t\t\tint q=ch[p][c];\n\t\t\tif(l[q]==l[p]+1) fa[np]=q;\n\t\t\telse{\n\t\t\t\tint nq=++cnt;l[nq]=l[p]+1;\n\t\t\t\tmemcpy(ch[nq],ch[q],sizeof(int)*(26));\n\t\t\t\tfa[nq]=fa[q],fa[q]=fa[np]=nq;\n\t\t\t\tfor(;ch[p][c]==q;p=fa[p]) ch[p][c]=nq;\n\t\t\t}\n\t\t}\n\t}\n\tinline void calc(){\n\t\tfor(int i=1;i<=n;++i) ins(S[i]-'a');\n\t\tfor(int i=1;i<=cnt;++i) ++c[l[i]];\n\t\tfor(int i=1;i<=cnt;++i) c[i]+=c[i-1];\n\t\tfor(int i=1;i<=cnt;++i) a[c[l[i]]--]=i;\n\t\tfor(int i=cnt,p;i;--i){\n\t\t\tp=a[i];\n\t\t\tif(in[p]) tree::ins(rt[p],1,n,l[p]);\n\t\t\trt[fa[p]]=tree::merge(rt[fa[p]],rt[p]);\n\t\t}\n\t}\n}\nnamespace solve{\n\tint cnt=1,last=1;\n\tint ch[N][26],l[N],fa[N],c[N],a[N],tag[N];\n\tinline void init(){\n\t\tcnt=last=1,memset(ch[1],0,sizeof(int)*(26));\n\t}\n\tinline int newnode(){\n\t\t++cnt;memset(ch[cnt],0,sizeof(int)*(26));return cnt;\n\t}\n\tvoid ins(int c){\n\t\tint p=last,np=newnode();last=np,tag[np]=l[np]=l[p]+1;\n\t\tfor(;p&&!ch[p][c];p=fa[p]) ch[p][c]=np;\n\t\tif(!p) fa[np]=1;\n\t\telse{\n\t\t\tint q=ch[p][c];\n\t\t\tif(l[q]==l[p]+1) fa[np]=q;\n\t\t\telse{\n\t\t\t\tint nq=newnode();l[nq]=l[p]+1,tag[nq]=tag[q];\n\t\t\t\tmemcpy(ch[nq],ch[q],sizeof(int)*(26));\n\t\t\t\tfa[nq]=fa[q],fa[q]=fa[np]=nq;\n\t\t\t\tfor(;ch[p][c]==q;p=fa[p]) ch[p][c]=nq;\n\t\t\t}\n\t\t}\n\t}\n\tll solve(){\n\t\tint L,R;\n\t\tscanf(\"%s%d%d\",S+1,&L,&R);\n\t\tinit();\n\t\tm=strlen(S+1);\n\t\tfor(int len=0,p=1,i=1;i<=m;++i){\n\t\t\tint c=S[i]-'a';\n\t\t\tins(c);\n\t\t\twhile(true){\n\t\t\t\tif(SAM::ch[p][c]&&tree::query(rt[SAM::ch[p][c]],1,n,L+len,R)){\n\t\t\t\t\t++len,p=SAM::ch[p][c];break;\n\t\t\t\t}\n\t\t\t\tif(len==0) break;\n\t\t\t\t--len;\n\t\t\t\tif(len==SAM::l[SAM::fa[p]]) p=SAM::fa[p];\n\t\t\t}\n\t\t\tlim[i]=len;\n\t\t}\n\t\tans=0;\n\t\tfor(int i=2;i<=cnt;++i)\n\t\tans+=max(0,l[i]-max(l[fa[i]],lim[tag[i]]));\n\t\treturn ans;\n\t}\n}\nint main(){\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n\tscanf(\"%s\",S+1);\n\tn=strlen(S+1);\n\tSAM::calc();\n\tscanf(\"%d\",&q);\n\twhile(q--) print(solve::solve());\n\tOt();\n\treturn 0;\n}\n```",
        "postTime": 1537438370,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "\uff08\u8fd9\u4e2a\u884c\u95f4\u8ddd\u6709\u70b9\u8be1\u5f02\uff0c\u63a8\u8350\u5230[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/mrclr/p/10946572.html)\u7785\u7785\uff09\n\n\u8fd9\u9898\u4ee5\u524d\u5199\u8fc7\u5f03\u6389\u4e86\uff0c\u540e\u6765\u7adf\u7136\u8fde\u81ea\u5df1\u768468\u5206\u5199\u6cd5\u90fd\u770b\u4e0d\u61c2\u4e86\u2026\u2026\n\u8fd9\u6b21\u56de\u9996\u8fd9\u9053\u9898\uff0c\u5fc3\u60f3\u600e\u4e48\u8bf4\u4e5f\u5f97\u628a\u8fd9\u9898\u5207\u4e86\uff0c~~\u54ea\u6015\u6284\u9898\u89e3\u4e5f\u884c\u3002~~\n\n\u4f46\u6ca1\u60f3\u5230\u522b\u4eba\u7684\u9898\u89e3\u81ea\u5df1\u600e\u4e48\u4e5f\u770b\u4e0d\u61c2\uff0c\u6700\u7ec8\u8fd8\u662f\u81ea\u5df1\u641e\u51fa\u6765\u4e86\uff08\u6211\u771fnb\uff09\u3002\n\n\u603b\u7528\u65f6\u524d\u4e00\u5929\u4e0b\u5348\u5230\u7b2c\u4e8c\u5929\u51cc\u66680:30+\u7b2c\u4e8c\u5929\u534a\u4e2a\u4e0a\u5348\u3002\n\n\u6211\u4eec\u5148\u6765\u56de\u987e$L = 1, R = n$\u7684\u60c5\u51b5\u3002\n\n\u5927\u4f53\u601d\u8def\u5c31\u662f\u6c42\u51fa\u672c\u8d28\u4e0d\u540c\u7684\u516c\u5171\u5b50\u4e32\u6570\u76ee\uff0c\u7136\u540e\u7528$T$\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u51cf\u53bb\u5373\u53ef\u3002\n\n$T$\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\u5927\u5bb6\u90fd\u4f1a\u6c42\uff0c\u5c31\u4e0d\u5728\u8fd9\u5520\u53e8\u4e86\u3002\u6211\u4eec\u91cd\u70b9\u770b\u524d\u9762\u7684\u600e\u4e48\u6c42\u3002\n\n\u6211\u4eec\u5728$T$\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26$t[i]$\u4e4b\u540e\uff0c\u9a6c\u4e0a\u8bb0\u5f55$t[i]$\u6240\u5728\u7ed3\u70b9\u7684\u7236\u4eb2\u7684\u957f\u5ea6\uff0c\u5373$len[link[pos[i]]]$\u3002\u8fd9\u4e2a\u662f\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f\u8bb0\u524d\u9762\u90a3\u4e2a\u503c\u4e3a$Len$\uff0c\u4ed6\u8868\u793a\u7684\u662f\u5de6\u7aef\u70b9\u4e3a$1$~$Len - 1$\uff0c\u53f3\u7aef\u70b9\u4e3a$i$\u7684\u8fd9\u4e9b\u5b50\u4e32\u7b2c\u4e00\u6b21\u7684\u51fa\u73b0\u4f4d\u7f6e\u90fd\u662f$i$\u3002\u56e0\u4e3a\u65b0\u5efa\u7684\u8fd9\u4e2a\u7ed3\u70b9\u7684endpos\u5fc5\u5b9a\u53ea\u6709\u8fd9\u4e2a$i$\uff0c\u90a3\u4e48\u5c5e\u4e8e\u8fd9\u4e2a\u7ed3\u70b9\u7684\u6240\u6709\u5b50\u4e32\u7684\u51fa\u73b0\u4f4d\u7f6e\u4e5f\u5c31\u53ea\u6709$i$\u4e86\u3002\n\n\u6ce8\u610f\uff0c\u4e00\u5b9a\u662f\u63d2\u5165\u5b8c\u540e\u9a6c\u4e0a\u7edf\u8ba1\u3002\u5982\u679c\u628a\u540e\u7f00\u81ea\u52a8\u673a\u5efa\u5b8c\u540e\u518d\u4e00\u4e2a\u4e2a\u7edf\u8ba1\u5c31\u4e0d\u5bf9\u4e86\u3002\u56e0\u4e3a\u6709\u7684\u7ed3\u70b9\u7684\u7236\u4eb2\u5df2\u7ecf\u6539\u53d8\u3002\n\u6211\u4eec\u8bb0\u4e0a\u9762\u6c42\u51fa\u7684\u8fd9\u4e2a\u6570\u7ec4\u4e3a$ha[i]$\u3002\n\n\u6c42\u51fa\u4e86\u4e0a\u9762\u8fd9\u4e2a\u4e1c\u897f\u540e\u5c31\u597d\u529e\u4e86\u3002\u6211\u4eec\u628a$T$\u653e\u5728$S$\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u8dd1\uff0c\u8bb0$T$\u5230\u4f4d\u7f6e$i$\u65f6\u7684\u5339\u914d\u957f\u5ea6\u4e3a$l$\uff0c\u90a3\u4e48\u5982\u679c$l >ha[i]$\u7684\u8bdd\uff0c\u5c31\u8868\u793a\u5728\u5728$T$\u7684\u7b2c$i$\u4e2a\u4f4d\u7f6e\uff0c\u672c\u8d28\u4e0d\u540c\u7684\u516c\u5171\u5b50\u4e32\u6570\u76ee\u589e\u52a0\u4e86$l - ha[i]$\uff0c\u628a\u4ed6\u52a0\u5230\u7b54\u6848\u91cc\u5373\u53ef\u3002\n```c++\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\n#include<vector>\n#include<stack>\n#include<queue>\nusing namespace std;\n#define enter puts(\"\") \n#define space putchar(' ')\n#define Mem(a, x) memset(a, x, sizeof(a))\n#define In inline\ntypedef long long ll;\ntypedef double db;\nconst int INF = 0x3f3f3f3f;\nconst db eps = 1e-8;\nconst int maxn = 5e5 + 5;\ninline ll read()\n{\n  ll ans = 0;\n  char ch = getchar(), last = ' ';\n  while(!isdigit(ch)) last = ch, ch = getchar();\n  while(isdigit(ch)) ans = (ans << 1) + (ans << 3) + ch - '0', ch = getchar();\n  if(last == '-') ans = -ans;\n  return ans;\n}\ninline void write(ll x)\n{\n  if(x < 0) x = -x, putchar('-');\n  if(x >= 10) write(x / 10);\n  putchar(x % 10 + '0');\n}\n\nchar s[maxn], t[maxn];\nint ha[maxn];\nstruct Sam\n{\n  int cnt, las;\n  int tra[maxn << 1][27], len[maxn << 1], link[maxn << 1];\n  In void init()\n  {\n    link[cnt = las = 0] = -1;\n    Mem(tra[0], 0);\n  }\n  In void insert(int c)\n  {\n    int now = ++cnt, p = las; Mem(tra[cnt], 0);\n    len[now] = len[las] + 1;\n    while(~p && !tra[p][c]) tra[p][c] = now, p = link[p];\n    if(p == -1) link[now] = 0;\n    else\n      {\n        int q = tra[p][c];\n        if(len[q] == len[p] + 1) link[now] = q;\n    \telse\n      \t{\n          int clo = ++cnt; Mem(tra[cnt], 0);\n          memcpy(tra[clo], tra[q], sizeof(tra[q]));\n          len[clo] = len[p] + 1;\n          link[clo] = link[q], link[q] = link[now] = clo;\n          while(~p && tra[p][c] == q) tra[p][c] = clo, p = link[p];\n        }\n      }\n    las = now;\n  }\n  int pos[maxn << 1], buc[maxn << 1];\n  In ll lcs(char* s)\n  {\n    ll ret = 0;\n    int n = strlen(s);\n    for(int i = 0, l = 0, p = 0; i < n; ++i)\n      {\n\t    int c = s[i] - 'a';\n\t    while(~p && !tra[p][c]) p = link[p], l = len[p];\n\t    if(p == -1) p = l = 0;\n\t    else ++l, p = tra[p][c];\n\t    if(l > ha[i]) ret += l - ha[i];\n      }\n    return ret;\n  }\n}S, T;\n\nIn void work0()\n{\n  int len = strlen(t);\n  ll tp = 0;\n  for(int i = 0; i < len; ++i) tp += i + 1 - ha[i];    //\u6839\u636eha[i]\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u6c42\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\n  write(tp - S.lcs(t)), enter;\n}\n\nint main()\n{\n  scanf(\"%s\", s);\n  int n = strlen(s); S.init();\n  for(int i = 0; i < n; ++i) S.insert(s[i] - 'a');\n  int m = read();\n  for(int i = 1; i <= m; ++i)\n    {\n      scanf(\"%s\", t); int len = strlen(t);\n      T.init();\n      for(int j = 0; j < len; ++j) T.insert(t[j] - 'a'), ha[j] = T.len[T.link[T.las]];\n      int L = read(), R = read();\n      if(L == 1 && R == n) {work0(); continue;}\n    }\n  return 0;\n}\n```\n\n\u5f53\u5f53\u5f53\u5f53\uff01\u4e0b\u9762\u5f00\u59cb\u8bb2\u6b63\u89e3\uff01\n\n\u73b0\u5728\u6709\u4e86$L, R$\u7684\u9650\u5236\u3002\u4e00\u4e2a\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\u6c42\u51fa\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684endpos\u96c6\u5408\u3002\u7136\u540e\u5339\u914d\u7684\u65f6\u5019\u9664\u4e86\u6ee1\u8db3\u8fd9\u4e2a\u8282\u70b9\u6709\u5b57\u7b26$c$\u7684\u8f6c\u79fb\uff0c\u8fd8\u8981\u4fdd\u8bc1\u8f6c\u79fb\u540e\u5230\u8fbe\u7684\u7ed3\u70b9\u7684endpos\u6709\u5728$[L, R]$\u91cc\u9762\u7684\u3002\n\n\u8fd9\u6837\u4e00\u76f4\u8df3\uff0c\u5982\u679c\u4ed6\u6700\u7ec8\u5728\u4f4d\u7f6e$i$\u65f6\u7684\u5339\u914d\u957f\u5ea6\u4e3a$l$\uff0c\u6211\u4eec\u8981\u8003\u8651\u4eceendpos\u5411\u524d$l$\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u8d85\u6ca1\u8d85\u51fa$L$\u7684\u9650\u5236\uff0c\u5373$endpos - l$\u662f\u5426\u5c0f\u4e8e$L$\uff0c\u5982\u679c\u5c0f\u4e8e\uff0c\u90a3\u4e48\u5339\u914d\u7684\u957f\u5ea6\u5b9e\u9645\u662f$endpos - L + 1$\u3002\u7136\u540e\u770b\u8fd9\u4e2a\u957f\u5ea6\u662f\u5426\u5927\u4e8e$ha[i]$\uff0c\u5982\u679c\u5927\u4e8e\uff0c\u5c31\u51cf\u53bb$ha[i]$\u52a0\u5230\u7b54\u6848\u91cc\u3002\n\n\u90a3\u4e48\u4e3a\u4e86\u8ba9\u5339\u914d\u7684\u957f\u5ea6\u5c3d\u91cf\u4e0d\u8d85\u8fc7\u4e0b\u754c$L$\uff0c\u6211\u4eec\u8981\u627e\u7684\u662f\u5728$[L, R]$\u533a\u95f4\u5185\u5c3d\u91cf\u9760\u53f3\u7684endpos\u3002\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u8868\u9762\u4e0a\u770b\u8fd9\u4e48\u505a\u4f3c\u4e4e\u5c31\u4e07\u4e8b\u5927\u5409\u4e86\u3002\u4f46\u5b9e\u9645\u4e0a68\u5206\u4ee5\u540e\u7167\u6837WA\u3002\n\u4e3a\u5565\u54a7\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u67e5\u627eendpos\u7684\u65f6\u5019\uff0c\u662f\u5728\u80fd\u5339\u914d\u7684\u6700\u957f\u957f\u5ea6\u7684\u7ed3\u70b9\u4e0a\u7684\u7ebf\u6bb5\u6811\u67e5\u8be2\u7684\uff0c\u957f\u5ea6\u8d8a\u957f\uff0cendpos\u5c31\u8d8a\u5c11\uff0c\u4e5f\u5c31\u8bf4\u660e\uff0c\u6211\u4eec\u5728\u8f83\u957f\u7684\u5339\u914d\u4e0a\u67e5\u5230\u7684endpos\u51cf\u53bb$l$\u540e\u4f1a\u8d85\u8fc7$L$\u7684\u9650\u5236\uff0c\u800c\u4e14\u53ef\u80fd\u8d85\u51fa\u5f88\u591a\uff0c\u5bfc\u81f4\u5269\u4e0b\u7684\u90e8\u5206\u6bd4$ha[i]$\u5c0f\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u5728\u5339\u914d\u957f\u5ea6\u8f83\u77ed\u7684\u7ebf\u6bb5\u6811\u4e0a\u67e5\u627e\u7684\u8bdd\uff0c\u53cd\u800c\u80fd\u627e\u5230\u4e00\u4e2aendpos\uff0c\u5728$L$\u7684\u9650\u5236\u4e4b\u5185\u5339\u914d\u7684\u957f\u5ea6\u6bd4$ha[i]$\u5927\uff0c\u6216\u8005\u6240\u6709\u7684\u5339\u914d\u957f\u5ea6\u5e72\u8106\u90fd\u4e0d\u4f1a\u8d85\u51fa$L$\u3002\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u628a\u8fd9\u4e9b\u957f\u5ea6\u52a0\u5230\u7b54\u6848\u91cc\u3002\n\n\u56e0\u6b64\uff0c\u5339\u914d\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u4ec5\u8981\u5728\u8fd9\u4e2a\u7ed3\u70b9\u7684\u7ebf\u6bb5\u6811\u4e0a\u67e5\u627eendpos\u8ba1\u7b97\u8d21\u732e\u3002\u8fd8\u8981\u5230\u4ed6\u7684\u7956\u5148\u7ed3\u70b9\u4e0a\u6267\u884c\u540c\u6837\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230\u5339\u914d\u957f\u5ea6\u4e0d\u53d7$L$\u7684\u9650\u5236\u518d\u9000\u51fa\u3002\u63a5\u7740\u53bb\u5339\u914d\u4e0b\u4e00\u4f4d\u3002\n\n\u81ea\u8ba4\u4e3a\u7801\u98ce\u8fd8\u662f\u5341\u5206\u5de5\u6574\u7684\u3002\n```c++\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\n#include<vector>\n#include<stack>\n#include<queue>\nusing namespace std;\n#define enter puts(\"\") \n#define space putchar(' ')\n#define Mem(a, x) memset(a, x, sizeof(a))\n#define In inline\ntypedef long long ll;\ntypedef double db;\nconst int INF = 0x3f3f3f3f;\nconst db eps = 1e-8;\nconst int maxn = 5e5 + 5;\nconst int maxt = 4e7 + 5;\ninline ll read()\n{\n  ll ans = 0;\n  char ch = getchar(), last = ' ';\n  while(!isdigit(ch)) last = ch, ch = getchar();\n  while(isdigit(ch)) ans = (ans << 1) + (ans << 3) + ch - '0', ch = getchar();\n  if(last == '-') ans = -ans;\n  return ans;\n}\ninline void write(ll x)\n{\n  if(x < 0) x = -x, putchar('-');\n  if(x >= 10) write(x / 10);\n  putchar(x % 10 + '0');\n}\nIn void MYFILE()\n{\n#ifndef mrclr\n  freopen(\"name.in\", \"r\", stdin);\n  freopen(\"name.out\", \"w\", stdout);\n#endif\n}\n\nint n, L, R;\nchar s[maxn], t[maxn];\nint ha[maxn];\n\nstruct Tree\n{\n  int ls, rs;\n  int rpos;\n}seg[maxt];\nint root[maxn << 1], cur[maxn], tcnt = 0;\n#define LS seg[now].ls\n#define RS seg[now].rs\nIn void update(int& now, int l, int r, int id)\n{\n  now = ++tcnt;\n  seg[now].rpos = -1;\n  if(l == r) {seg[now].rpos = l; return;}\n  int mid = (l + r) >> 1;\n  if(id <= mid) update(LS, l, mid, id);\n  else update(RS, mid + 1, r, id);\n  seg[now].rpos = max(seg[LS].rpos, seg[RS].rpos);\n}\nIn int merge(int x, int y, int l, int r)\n{\n  if(!x || !y) return x | y;\n  if(l == r) {seg[x].rpos |= seg[y].rpos; return x;}\n  int mid = (l + r) >> 1, z = ++tcnt;\n  seg[z].ls = merge(seg[x].ls, seg[y].ls, l, mid);\n  seg[z].rs = merge(seg[x].rs, seg[y].rs, mid + 1, r);\n  seg[z].rpos = max(seg[x].rpos, seg[y].rpos);\n  return z;\n}\nIn int query(int now, int l, int r, int L, int R)\n{\n  if(!now) return -1;\n  if(l == L && r == R) return seg[now].rpos;\n  int mid = (l + r) >> 1;\n  if(R <= mid) return query(LS, l, mid, L, R);\n  else if(L > mid) return query(RS, mid + 1, r, L, R);\n  else return max(query(LS, l, mid, L, mid), query(RS, mid + 1, r, mid + 1, R));\n}\n\nstruct Sam\n{\n  int cnt, las;\n  int tra[maxn << 1][27], len[maxn << 1], link[maxn << 1];\n  In void init()\n  {\n    link[cnt = las = 0] = -1;\n    Mem(tra[0], 0);\n  }\n  In void insert(int c, int id)\n  {\n    int now = ++cnt, p = las; Mem(tra[cnt], 0);\n    len[now] = len[las] + 1;\n    while(~p && !tra[p][c]) tra[p][c] = now, p = link[p];\n    if(p == -1) link[now] = 0;\n    else\n      {\n\t\tint q = tra[p][c];\n\t\tif(len[q] == len[p] + 1) link[now] = q;\n\t\telse\n\t\t  {\n\t\t    int clo = ++cnt; Mem(tra[cnt], 0);\n\t\t    memcpy(tra[clo], tra[q], sizeof(tra[q]));\n\t\t    len[clo] = len[p] + 1;\n\t\t    link[clo] = link[q], link[q] = link[now] = clo;\n\t\t    while(~p && tra[p][c] == q) tra[p][c] = clo, p = link[p];\n\t\t  }\n      }\n    las = now;\n    if(~id) cur[id] = now;\n  }\n  int pos[maxn << 1], buc[maxn << 1];\n  In void solve()\n  {\n    for(int i = 1; i <= cnt; ++i) ++buc[len[i]];\n    for(int i = 1; i <= cnt; ++i) buc[i] += buc[i - 1];\n    for(int i = 1; i <= cnt; ++i) pos[buc[len[i]]--] = i;\n    for(int i = cnt; i; --i)\n      {\n\t\tint now = pos[i], fa = link[now];\n\t\troot[fa] = merge(root[fa], root[now], 0, n - 1);\n      }\n  }\n  In ll calc(char* s)\n  {\n    ll ret = 0;\n    int m = strlen(s);\n    for(int i = 0, l = 0, p = 0, pos = 0; i < m; ++i)\n      {\n\t\tint c = s[i] - 'a';\n\t\twhile(~p && (!tra[p][c] || (pos = query(root[tra[p][c]], 0, n - 1, L, R)) == -1))\n\t\t  p = link[p], l = len[p];\t//\u6ca1\u6709\u8f6c\u79fb\u8fb9\u6216\u8005[L, R]\u5185\u6ca1\u6709endpos\uff0c\u5c31\u4e00\u76f4\u5931\u914d \n\t\tif(p == -1) p = l = 0;\n\t\telse\n\t\t  {\n\t\t    ++l, p = tra[p][c];\n\t\t    int tp = min(l, pos - L + 1);\n\t\t    if(tp > ha[i]) ret += tp - ha[i];\n\t\t    if(l > pos - L + 1)\t//\u5339\u914d\u957f\u5ea6\u4ecd\u53d7L\u7684\u9650\u5236 \n\t\t      {\n\t\t\t\tint tp3 = max(tp, ha[i]), q = link[p], l2 = len[q];\n\t\t\t\twhile(~q)\n\t\t\t\t  {\n\t\t\t\t    int pos2 = query(root[q], 0, n - 1, L, R), tp2 = min(l2, pos2 - L + 1);\n\t\t\t\t    if(tp2 > tp3) ret += tp2 - tp3;\n\t\t\t\t    else if(l2 <= pos2 - L + 1) break;\t//\u5339\u914d\u957f\u5ea6\u4e0d\u53d7L\u7684\u9650\u5236\u4e86\uff0c\u9000\u51fa \n\t\t\t\t    q = link[q], l2 = len[q], tp3 = max(tp2, ha[i]);\n\t\t\t\t  }\n\t\t      }\n\t\t  }\n      }\n    return ret;\n  }\n}S, T;\n\nint main()\n{\n  MYFILE();\n  scanf(\"%s\", s);\n  n = strlen(s); S.init();\n  for(int i = 0; i < n; ++i)\n    {\n      S.insert(s[i] - 'a', i);\n      update(root[cur[i]], 0, n - 1, i);\n    }\n  S.solve();\n  int m = read();\n  for(int i = 1; i <= m; ++i)\n    {\n      scanf(\"%s\", t); int len = strlen(t);\n      T.init();\n      for(int j = 0; j < len; ++j) T.insert(t[j] - 'a', -1), ha[j] = T.len[T.link[T.las]];\n      L = read() - 1, R = read() - 1;\n      ll tp = 0;\n      for(int j = 0; j < len; ++j) tp += j + 1 - ha[j];\n      write(tp - S.calc(t)), enter;\n    }\n  return 0;\n}\n```",
        "postTime": 1559141499,
        "uid": 55965,
        "name": "mrclr",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "\u9898\u610f: \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32$S$, \u6709\u5f88\u591a\u7ec4\u8be2\u95ee, \u6bcf\u6b21\u7ed9\u5b9a\u4e00\u4e2a$T$, \u6c42$T$\u4e2d\u4e0d\u5728$S[l:r]$\u4e2d\u51fa\u73b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570.\n\n$|S| \\leq 500000, \\sum{|T|} \\leq 1000000$.\n\n\u8003\u8651\u4e24\u4ef6\u4e8b.\n\n- \u5728$S$\u4e2d\u5339\u914d$T$\n- \u53bb\u91cd\n\n\u5339\u914d\u5c31\u662f\u8981\u8ba1\u7b97\u51fa\u4e00\u4e2a$p_i$, \u8868\u793a$T[1:i]$\u4e2d\u5728$S[l:r]$\u4e2d\u5b58\u5728\u7684\u6700\u957f\u540e\u7f00\u7684\u957f\u5ea6.\n\n\u6216\u8005\u8bf4, $p_i=\\max \\{x|T[i-x+1:i]\\text{\u5728}S[l:r]\\text{\u4e2d\u51fa\u73b0}\\}$.\n\n(\u5f97\u51fa$p_i$\u540e\u5982\u4f55\u53bb\u91cd\u5728\u4e0b\u9762\u53ef\u4ee5\u5148\u770b)\n\n\u5982\u679c$l = 1, r = |S|$.\n\n\u53d1\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\u7528SAM\u8dd1\u4e24\u4e2a\u5b57\u7b26\u4e32\u6700\u957f\u516c\u5171\u5b50\u4e32\u7684\u8fc7\u7a0b.\n\n\u6240\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5c31\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a$p_i$.\n\n\u5177\u4f53\u5730\u8bf4, \u5bf9$S$\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a, \u6309\u987a\u5e8f\u4ee5$T$\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u8fdb\u884c\u8f6c\u79fb.\n\n\u8bbe\u5f53\u524d\u5b57\u7b26\u4e3a$c$\uff0c \u6b63\u5728$S$\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u7684\u8282\u70b9$p$($p$\u521d\u59cb\u503c\u4e3a\u6839), \u5f53\u524d\u5339\u914d\u957f\u5ea6\u4e3a$l$.\n\n\u5982\u679c$p$\u5b58\u5728$c$\u8fd9\u4e2a\u8f6c\u79fb, \u90a3\u4e48\u76f4\u63a5\u6cbf\u8f6c\u79fb\u8fb9\u8d70, \u5e76\u5c06$l$\u52a0\u4e00.\n\n\u5426\u5219\u6cbf\u540e\u7f00\u94fe\u63a5\u5411\u4e0a\u8df3, \u5e76\u628a$l$\u7684\u503c\u66f4\u65b0\u4e3a\u540e\u7f00\u94fe\u63a5\u7684$len$(\u6700\u957f\u5b57\u7b26\u4e32\u957f\u5ea6), \u76f4\u5230\u80fd\u591f\u8f6c\u79fb\u4e3a\u6b62.\n\n\u73b0\u5728\u8003\u8651\u5bf9\u4e8e\u4e00\u822c\u7684$l, r$\u600e\u4e48\u505a.\n\n\u8f6c\u79fb\u65f6\u589e\u52a0\u4e00\u4e2a\u5224\u65ad, \u53ea\u6709\u76ee\u6807\u8282\u70b9\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u5b8c\u5168\u5305\u542b\u5728$S[l:r]$\u4e2d\u624d\u80fd\u591f\u8f6c\u79fb.\n\n\u5982\u4f55\u5224\u65ad? \u53ea\u8981\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684$right$\u96c6\u5408(\u6216\u8005\u5176\u4ed6\u540d\u5b57, \u53ea\u8981\u8868\u793a\u7684\u610f\u4e49\u76f8\u540c), \u5224\u65ad\u4e00\u4e0b$right$\u96c6\u5408\u4e2d\u662f\u5426\u6709\u533a\u95f4\u5185\u7684\u6570\u5373\u53ef.\n\n\u8003\u8651\u7ebf\u6bb5\u6811\u5408\u5e76, \u5efa\u7acb\u6743\u503c\u7ebf\u6bb5\u6811\u8868\u793a\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u5426\u5728$right$\u96c6\u5408\u4e2d\u51fa\u73b0.\n\n\u521d\u59cb\u503c\u662f\u6bcf\u6b21\u7684$last$\u7684$right$\u96c6\u5408\u5305\u542b\u5f53\u524d\u5904\u7406\u5230\u7684\u5b57\u7b26\u7684\u4e0b\u6807(\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u7684\u65f6\u5019\u4f20\u5165\u5f53\u524d\u4e0b\u6807\u7136\u540e\u7ebf\u6bb5\u6811$ins$\u4e00\u4e0b\u5373\u53ef).\n\n\u7136\u540e\u62d3\u6251\u6392\u5e8f(\u6309$len$\u6392\u5e8f)/$dfs$, \u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b69\u5b50(\u540e\u7f00\u94fe\u63a5\u6307\u5411\u5b83)\u7684\u7ebf\u6bb5\u6811\u90fd\u5408\u5e76\u5230\u5b83\u81ea\u5df1\u4e0a.\n\n\u7136\u540e\u8fd9\u4e2a\u64cd\u4f5c\u662f\u4e0d\u4f1a\u7834\u574f\u5b83\u5b69\u5b50\u7684\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u7684, \u6240\u4ee5\u5168\u90e8\u5408\u5e76\u5b8c\u4e4b\u540e\u5c31\u5f97\u5230\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684$right$\u96c6\u5408.\n\n\u56e0\u4e3a\u540e\u7f00\u81ea\u52a8\u673a\u72b6\u6001\u4e2a\u6570\u7ebf\u6027, \u62e5\u6709\u521d\u59cb\u503c\u7684\u8282\u70b9\u4e2a\u6570\u4e5f\u662f\u7ebf\u6027, \u6240\u4ee5\u590d\u6742\u5ea6\u662f\u4e00\u4e2a$\\log$\u7ea7\u522b, \u53ef\u4ee5\u627f\u53d7.\n\n\u4f46\u662f\u5982\u679c\u8fd9\u6837\u7684\u8bdd\u4e0a\u9762\u8f6c\u79fb\u9700\u8981\u6709\u4e00\u4e9b\u5c0f\u53d8\u5316.\n\n- \u67e5\u8be2\u7684\u65f6\u5019\u67e5\u8be2\u7684\u662f$right$\u96c6\u5408\u4e2d\u662f\u5426\u5b58\u5728$[L+l, R]$($L, R$\u662f\u7ed9\u5b9a\u7684\u533a\u95f4, $l$\u662f\u5f53\u524d\u5339\u914d\u957f\u5ea6).\n- \u5339\u914d\u5931\u8d25\u7684\u65f6\u5019\u4e0d\u80fd\u76f4\u63a5\u8df3\u5230\u540e\u7f00\u94fe\u63a5\u800c\u662f\u8981\u51cf\u5c0f$l$, \u8fd9\u6837\u533a\u95f4\u589e\u5927, \u53ef\u80fd\u6210\u529f\u5339\u914d(\u8fd9\u4e00\u6b65\u590d\u6742\u5ea6\u76ee\u6d4b\u53ef\u4ee5\u4f18\u5316\u4f46\u662f\u56e0\u4e3a\u590d\u6742\u5ea6\u5df2(hao)\u7ecf(xiang)\u5bf9\u4e86\u6240\u4ee5\u5c31\u6ca1\u5199)(\u4e8b\u5b9e\u4e0a\u5982\u679c\u4e0d\u5224\u65ad\u8fd9\u4e2a\u80fd\u591f\u62ff\u5230$96pts(WA\\ on\\ 21)$).\n\n\u90a3\u4e48\u73b0\u5728\u5df2\u7ecf\u6c42\u51fa\u4e86$p_i$, \u5982\u4f55\u53bb\u91cd\u5462?\n\n\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u2026\u2026\u8003\u8651\u7528SAM\u6c42.\n\n\u90a3\u4e48\u518d\u5bf9\u6bcf\u6b21\u7684$T$\u5efa\u540e\u7f00\u81ea\u52a8\u673a, \u8bbe$tot$\u662f\u8282\u70b9\u603b\u6570, $1$\u8868\u793a\u6839\u8282\u70b9.\n\n\u7b54\u6848\u5c31\u662f$\\sum\\limits_{k=2}^{tot}{\\max(len[k]-\\max(p[minr[k]], len[fa[k]]), 0)}$.\n\n$minr$\u8868\u793a$right$\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u6570, \u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\u5730\u5904\u7406\u51fa\u6765. $fa$\u8868\u793a\u540e\u7f00\u94fe\u63a5.\n\n~~\u611f\u6027~~\u7406\u89e3: \u904d\u5386\u6bcf\u4e2a\u8282\u70b9\u5c31\u662f\u904d\u5386\u4e86\u6240\u6709\u5b50\u4e32, \u5bf9\u4e8e\u67d0\u4e2a\u8282\u70b9$k$, \u957f\u5ea6\u4e0d\u6bd4$p[minr[k]]$\u5927\u7684\u4e32\u662f\u4e0d\u53ef\u884c\u7684(\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f$minr$\u4e5f\u53ef\u4ee5\u611f\u6027\u7406\u89e3, \u5224\u65ad\u540e\u9762\u7684\u5339\u914d\u957f\u5ea6\u53ef\u80fd\u51fa\u9505), \u957f\u5ea6\u4e0d\u6bd4$len[fa[k]]$\u5927\u7684\u4e32\u4e0d\u5728\u8fd9\u4e2a\u8282\u70b9\u4e2d. \u5916\u9762\u8981\u518d\u53d6\u4e00\u4e2a$\\max$\u662f\u56e0\u4e3a$p[minr[k]]$\u53ef\u80fd\u6bd4$len[k]$\u5927.\n\n~~\u8bb2\u7684\u6df7\u4e71\u4ee3\u7801\u4e5f\u4e11\u2026\u2026~~\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nnamespace Segment_Tree {\n    const int N = 1000000 * 20;\n    int rt[N], ls[N], rs[N], tot, n;\n    inline void init(const int& len) {n = len;}\n    void ins(int& h, const int& x, const int& l = 1, const int& r = n) {\n        if (!h) h = ++tot;\n        if (l == r) return;\n        int mid = (l + r) >> 1;\n        if (x <= mid) ins(ls[h], x, l, mid);\n        else ins(rs[h], x, mid + 1, r);\n    }\n    inline int add(const int& x) {int ret = ++tot; ins(tot, x); return ret;}\n    int merge(const int& x, const int& y) {\n        if (!x || !y) return x | y;\n        int h = ++tot;\n        ls[h] = merge(ls[x], ls[y]); rs[h] = merge(rs[x], rs[y]);\n        return h;\n    }\n    bool query(const int& h, const int& L, const int& R, const int& l = 1, const int& r = n) {\n        if (!h || R < l || r < L) return 0;\n        if (L <= l && r <= R) return 1;\n        int mid = (l + r) >> 1;\n        return query(ls[h], L, R, l, mid) | query(rs[h], L, R, mid + 1, r);\n    }\n}\ntemplate<int N>\nstruct Suffix_Automaton {\n    int len[N], fa[N], minr[N], ch[N][26], rt[N], tot, last;\n    void clear() {tot = last = 1; memset(ch[1], 0, sizeof(ch[1]));}\n    Suffix_Automaton() {clear();}\n    void ins(const int& c, const int& pos = 0) {\n        int p = last, np = last = ++tot; minr[np] = len[np] = len[p] + 1;\n        if (pos) rt[np] = ::Segment_Tree::add(pos);\n        memset(ch[np], 0, sizeof(ch[np]));\n        for (; p && !ch[p][c]; p = fa[p]) ch[p][c] = np;\n        if (!p) return void(fa[np] = 1);\n        int q = ch[p][c];\n        if (len[p] + 1 == len[q]) return void(fa[np] = q);\n        int nq = ++tot; len[nq] = len[p] + 1; minr[nq] = minr[q]; fa[nq] = fa[q];\n        memcpy(ch[nq], ch[q], sizeof(ch[q]));\n        fa[np] = fa[q] = nq;\n        for (; p && ch[p][c] == q; p = fa[p]) ch[p][c] = nq;\n    }\n    void find(int& p, int& l, const int& L, const int& R, const int& c) {\n        while (1) {\n            if (ch[p][c] && ::Segment_Tree::query(rt[ch[p][c]], L + l, R)) {\n                ++l; p = ch[p][c]; return;\n            }\n            if (!l) return;\n            if (--l == len[fa[p]]) p = fa[p];\n        }\n    }\n    long long calc(int p[]) {\n        long long ret = 0;\n        for (register int i = 2; i <= tot; ++i) {\n            ret += std::max(0, len[i] - std::max(len[fa[i]], p[minr[i]]));\n        }\n        return ret;\n    }\n};\nSuffix_Automaton<1000001> sam;\nSuffix_Automaton<2000001> sam2;\nchar S[500002], T[1000002];\nint p[1000002];\nint c[500002], rk[1000002];\nint main() {\n    scanf(\"%s\", S + 1);\n    int len = strlen(S + 1); Segment_Tree::init(len);\n    for (register int i = 1; i <= len; ++i) {\n        sam.ins(S[i] - 'a', i);\n    }\n    for (register int i = 1; i <= sam.tot; ++i) ++c[sam.len[i]];\n    for (register int i = 1; i <= len; ++i) c[i] += c[i - 1];\n    for (register int i = 1; i <= sam.tot; ++i) rk[--c[sam.len[i]]] = i;\n    for (register int i = sam.tot; --i; ) {\n        sam.rt[sam.fa[rk[i]]] = Segment_Tree::merge(sam.rt[sam.fa[rk[i]]], sam.rt[rk[i]]);\n    }\n    int Q;\n    for (scanf(\"%d\", &Q); Q--; ) {\n        sam2.clear();\n        int l, r;\n        scanf(\"%s%d%d\", T + 1, &l, &r);\n        int _len = strlen(T + 1), _ = 1;\n        for (register int i = 1; i <= _len; ++i) {\n            p[i] = p[i - 1];\n            sam.find(_, p[i], l, r, T[i] - 'a');\n            sam2.ins(T[i] - 'a');\n        }\n        printf(\"%lld\\n\", sam2.calc(p));\n    }\n}\n```",
        "postTime": 1545532335,
        "uid": 22132,
        "name": "little_gift",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "## [\u9898\u610f](https://www.luogu.com.cn/problem/P4770)\n\n\u4e0d\u59a8\u5148\u8003\u8651$l=1,r=|S|$\u7684\u60c5\u51b5\uff1a  \n\u8fd9\u65f6\u6211\u4eec\u8981\u6c42\u7684\u5176\u5b9e\u662f$S,T$\u7684\u672c\u8d28\u4e0d\u540c\u7684\u516c\u5171\u5b50\u4e32\u6570\u91cf\u3002\n\n\u9996\u5148\u5bf9$S$\u5efa\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u540c\u65f6\u5bf9\u4e8e\u6bcf\u4e2a$T$\uff0c\u6211\u4eec\u4e5f\u5efa\u4e00\u4e2a\u81ea\u52a8\u673a\u3002\n\n\u6839\u636e\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6027\u8d28\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6240\u6709\u8282\u70b9\u7684\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u7684\u96c6\u5408\u4ee3\u8868\u4e86$T$\u7684\u5168\u90e8\u5b50\u4e32\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651$T$\u540e\u7f00\u81ea\u52a8\u673a\u7684\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u662f\u548c$S$\u7684\u516c\u5171\u5b50\u4e32\u3002\n\n\u4e8e\u662f\u8003\u8651\u600e\u4e48\u6c42\u8fd9\u4e2a\u4e1c\u897f\uff1a  \n\u6211\u4eec\u5bf9\u4e8e$T$\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00$T[1...i]$\u6c42\u51fa$match_i$\u8868\u793a\u8fd9\u4e2a\u524d\u7f00\u7684\u540e\u7f00\u80fd\u8ddf$S$\u5339\u914d\u7684\u6700\u957f\u957f\u5ea6\uff0c\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u5728$S$\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u5339\u914d$T$\u6765\u6c42\u51fa\uff0c\u89c1[\u8fd9\u9898](https://www.luogu.com.cn/problem/SP1811)\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9$x$\uff0c\u6211\u4eec\u8bbe\u5b83\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8303\u56f4\u4e3a$[minlen_x,maxlen_x]$\uff0c$endpos$\u96c6\u5408\u7684\u7b2c\u4e00\u4e2a\u4e3a$firpos_x$\u3002\n\n\u8fd9\u65f6\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8282\u70b9\u957f\u5ea6\u5728$match_{firpos_x}+1$\u5f80\u4e0a\u7684\u5b57\u7b26\u4e32\u90fd\u4e0d\u53ef\u80fd\u548c$S$\u5339\u914d\uff0c\u56e0\u6b64\u8fd9\u4e2a\u8282\u70b9\u7684\u8d21\u732e\u4e3a$\\max(len_x-\\max(len_{fa_x},match_{firpos_x}),0)$\u3002\n\n\u73b0\u5728\u8003\u8651$[l,r]$\u7684\u9650\u5236\uff0c\u6211\u4eec\u6309\u7167\u5957\u8def\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4$S$\u7684\u540e\u7f00\u81ea\u52a8\u673a\u6bcf\u4e2a\u8282\u70b9$endpos$\u96c6\u5408\uff0c\u6c42$match$\u7684\u65f6\u5019\u53ea\u8d70\u5408\u6cd5\u7684\u70b9\u5373\u53ef\u3002\n\n\u6c42match\u65f6\u6ce8\u610f\u4e2a\u7ec6\u8282\uff0c\u5199\u5728\u6ce8\u91ca\u91cc\u4e86\u3002\n\ncode:\n```\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=1e6+10;\nint n,m,Q,tot,cnt_edge;\nint head[maxn<<1],root[maxn<<1],match[maxn];\nchar s[maxn];\nstruct edge{int to,nxt;}e[maxn<<2];\nstruct Seg\n{\n\t#define lc(p) (seg[p].lc)\n\t#define rc(p) (seg[p].rc)\n\t#define sum(p) (seg[p].sum)\n\tint lc,rc,sum;\n}seg[maxn*50];\ninline void add_edge(int u,int v)\n{\n\te[++cnt_edge].nxt=head[u];\n\thead[u]=cnt_edge;\n\te[cnt_edge].to=v;\n}\nvoid insert(int &p,int l,int r,int pos)\n{\n\tif(!p)p=++tot;\n\tsum(p)++;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)insert(lc(p),l,mid,pos);\n\telse insert(rc(p),mid+1,r,pos);\n}\nint merge(int p,int q,int l,int r)\n{\n\tif(!p||!q)return p+q;\n\tint x=++tot;sum(x)=sum(p)+sum(q);\n\tif(l==r)return x;\n\tint mid=(l+r)>>1;\n\tlc(x)=merge(lc(p),lc(q),l,mid);\n\trc(x)=merge(rc(p),rc(q),mid+1,r);\n\treturn x;\n}\nint query(int p,int l,int r,int ql,int qr)\n{\n\tif(!p)return 0;\n\tif(l>=ql&&r<=qr)return sum(p);\n\tint mid=(l+r)>>1,res=0;\n\tif(ql<=mid)res+=query(lc(p),l,mid,ql,qr);\n\tif(qr>mid)res+=query(rc(p),mid+1,r,ql,qr);\n\treturn res;\n}\nvoid dfs(int x)\n{\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t\tdfs(e[i].to),root[x]=merge(root[x],root[e[i].to],1,n);\n}\nstruct SAM\n{\n\tint tot,last;\n\tint fa[maxn<<1],len[maxn<<1],firpos[maxn<<1];\n\tint ch[maxn<<1][30];\n\tinline void clear()\n\t{\n\t\tfor(int i=1;i<=tot;i++)\n\t\t{\n\t\t\tfa[i]=len[i]=firpos[i]=0;\n\t\t\tmemset(ch[i],0,sizeof(ch[i]));\n\t\t}\n\t\tlast=tot=1;\n\t}\n\tinline void add(int c,int id)\n\t{\n\t\tint now=++tot;len[now]=len[last]+1;firpos[now]=id;\n\t\tint p=last;last=now;\n\t\twhile(p&&!ch[p][c])ch[p][c]=now,p=fa[p];\n\t\tif(!p){fa[now]=1;return;}\n\t\tint q=ch[p][c];\n\t\tif(len[q]==len[p]+1)fa[now]=q;\n\t\telse \n\t\t{\n\t\t\tint nowq=++tot;len[nowq]=len[p]+1;firpos[nowq]=firpos[q];\n\t\t\tmemcpy(ch[nowq],ch[q],sizeof(ch[q]));\n\t\t\tfa[nowq]=fa[q];fa[q]=fa[now]=nowq;\n\t\t\twhile(p&&ch[p][c]==q)ch[p][c]=nowq,p=fa[p];\n\t\t}\n\t}\n}sam1,sam2; \ninline int read()\n{\n\tchar c=getchar();int res=0,f=1;\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9')res=res*10+c-'0',c=getchar();\n\treturn res*f;\n}\ninline void getmatch(char* s,int l,int r)\n{\n\tint len=strlen(s+1),now=1,nowl=0;\n\tfor(int i=1;i<=len;i++)\n\t{\n\t\twhile(2333)\n\t\t{\n\t\t\tif(sam1.ch[now][s[i]-'a']&&query(root[sam1.ch[now][s[i]-'a']],1,n,l+nowl,r))//\u6ce8\u610f\u662fl+nowl\uff0c\u8fd9\u662fendpos\u7684\u96c6\u5408\u3002\n\t\t\t{\n\t\t\t\tnow=sam1.ch[now][s[i]-'a'],nowl++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(!nowl)break;\n\t\t\tnowl--;//\u6ce8\u610f\u4e0d\u8981\u76f4\u63a5\u8df3fa[now],\u56e0\u4e3a\u533a\u95f4\u7f29\u5c0f\u53ef\u80fd\u4ea7\u751f\u7b54\u6848\u3002\n\t\t\tif(nowl==sam1.len[sam1.fa[now]])now=sam1.fa[now];\n\t\t}\n\t\tmatch[i]=nowl;\n\t}\n}\nint main()\n{\n\tscanf(\"%s\",s+1);n=strlen(s+1);\n\tsam1.clear();\n\tfor(int i=1;i<=n;i++)sam1.add(s[i]-'a',i),insert(root[sam1.last],1,n,i);\n\tfor(int i=2;i<=sam1.tot;i++)add_edge(sam1.fa[i],i);\n\tdfs(1);\n\tQ=read();\n\twhile(Q--)\n\t{\n\t\tll ans=0;\n\t\tscanf(\"%s\",s+1);m=strlen(s+1);\n\t\tint l=read(),r=read();\n\t\tsam2.clear();\n\t\tfor(int i=1;i<=m;i++)sam2.add(s[i]-'a',i);\n\t\tgetmatch(s,l,r);\n\t\tfor(int i=2;i<=sam2.tot;i++)\n\t\t\tans+=max(0,sam2.len[i]-max(match[sam2.firpos[i]],sam2.len[sam2.fa[i]]));\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1576670658,
        "uid": 145441,
        "name": "nofind",
        "ccfLevel": 6,
        "title": "P4770 [NOI2018]\u4f60\u7684\u540d\u5b57(\u540e\u7f00\u81ea\u52a8\u673a)"
    },
    {
        "content": "# [Portal](https://www.luogu.com.cn/problem/P4770)\n\n~~\u6211\u5c45\u7136\u80fd\u72ec\u7acbAC NOI\u7684\u9ed1\u9898\uff0c\u540e\u7f00\u6570\u7ec4\u679c\u7136\u53ef\u7231~~\n\n\u6211\u4eec\u5c06\u547d\u540d\u4e32\u4e0e\u6240\u6709\u7684\u8be2\u95ee\u4e32\uff0c\u4e2d\u95f4\u63d2\u4e0a\u4ece\u672a\u51fa\u73b0\u7684\u5b57\u7b26\u7136\u540e\u653e\u5728\u4e00\u8d77\u8dd1SA\u3002\u5219\u5bf9\u4e8e\u6765\u81ea\u8be2\u95ee\u4e32\u7684\u67d0\u4e00\u6761\u540e\u7f00$i$\uff0c\u6211\u4eec\u9700\u8981\u6c42\u51fa\u4e00\u4e2a\u6570\u7ec4$res_i$\uff0c\u8868\u793a\u6240\u6709\u51fa\u73b0\u5728**\u547d\u540d\u4e32**\u4ee5\u53ca**\u8be5\u8be2\u95ee\u4e32**\u4e2d\u7684**\u540e\u7f00**\uff0c\u4e0e\u5176$\\operatorname{LCP}$\u7684\u6700\u5927\u503c\u3002\u5219\u5bf9\u4e8e\u4e00\u6761\u8be2\u95ee\u4e32$T$\uff0c\u5b83\u7684\u7b54\u6848\u5373\u4e3a$\\sum\\limits_{i\\in T}len_i-res_i$\uff0c\u5176\u4e2d$len_i$\u4e3a\u540e\u7f00$i$\u7684\u957f\u5ea6\u3002\n\n\u5219\u73b0\u5728\u95ee\u9898\u88ab\u8f6c\u6362\u4e3a\u6c42\u51fa\u6240\u6709\u7684$res_i$\u3002\u6211\u4eec\u5148\u8003\u8651\u6765\u81ea**\u547d\u540d\u4e32**\u7684\u8d21\u732e\u3002\u8bbe\u5f53\u524d\u6211\u4eec\u8ba8\u8bba\u7684\u540e\u7f00\u4e3a$suf[i]$\u3002\u5219\u6211\u4eec\u8981\u6c42\u7684\u5373\u4e3a\u533a\u95f4$[l,r]$\u5185\u6240\u6709\u540e\u7f00$suf[j]$\uff0c\u6c42$\\min\\Big(\\operatorname{LCP}(suf[i],suf[j]),r-j+1\\Big)$\u7684\u6700\u5927\u503c\u3002\n\n\u6211\u4eec\u8003\u8651\u4e8c\u5206\u8fd9\u4e2a\u6700\u5927\u503c\uff0c\u8bbe\u4e3a$mid$\u3002\u73b0\u5728\u8981\u6765\u5224\u65ad$mid$\u8fd9\u4e2a\u503c\u662f\u5426\u5408\u6cd5\u3002\u5219\u53ea\u6709\u533a\u95f4$[l,l+mid-1]$\u4e2d\u7684$\\operatorname{LCP}$\u624d\u53ef\u80fd\u8fbe\u5230\u8fd9\u4e48\u957f\uff0c\u6545\u53ea\u8981\u627e\u5230\u5176\u4e2d\u7684$\\max\\text{LCP}$\uff0c\u5982\u679c\u5176\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e$mid$\uff0c\u5219$mid$\u5408\u6cd5\u3002\n\n\u5230\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u6784\u601d\u51fa\u4e00\u4e2a$O(n\\log^2n)$\u7684\u4e8c\u5206\u5957\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u4e86\u3002\u5177\u4f53\u601d\u8def\u662f\uff0c\u56e0\u4e3a$\\max\\text{LCP}$\u4e00\u5b9a\u5728\u4e24\u4e2a\u540e\u7f00\u7684$rk$\u6700\u63a5\u8fd1\u65f6\u53d6\u5230\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5b83\u62c6\u6210\u4e24\u534a\uff0c\u4e00\u534a\u662f$rk_j\\leq rk_i$\u7684\uff0c\u4e00\u534a\u662f$rk_j\\geq rk_i$\u7684\uff0c\u5e76\u5199\u4e24\u9897\u7ebf\u6bb5\u6811\u5206\u522b\u7ef4\u62a4\u3002\n\n\u5219\u6211\u4eec\u9700\u8981\u6309\u987a\u5e8f\u5c06\u4f4d\u7f6e\u63d2\u5165\u7ebf\u6bb5\u6811\u5e76\u7edf\u8ba1\u7b54\u6848\uff0c\u5728\u524d\u4e00\u68f5\u4e2d\u67e5\u8be2\u533a\u95f4\u4e2d$rk_i$\u7684\u6700\u5927\u503c\uff0c\u540e\u4e00\u68f5\u4e2d\u67e5\u8be2$rk_i$\u7684\u6700\u5c0f\u503c\uff08\u8fd9\u91cc\u7684\u7ebf\u6bb5\u6811\u662f\u4ee5**\u539f\u4e32\u4f4d\u7f6e**\u4e3a\u4e0b\u6807\u7684\uff09\u3002\u5728\u67e5\u8be2\u5230\u8fd9\u4e2a\u6700\u5927\u503c/\u6700\u5c0f\u503c\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7ST\u8868\u6c42\u51fa$\\text{LCP}$\u4e86\u3002\u5f53\u7136\uff0c\u8fd9\u4e00\u5207\u90fd\u662f\u5efa\u7acb\u5728\u4e8c\u5206\u7684\u57fa\u7840\u4e0a\uff0c\u5373\uff0c\u6211\u4eec\u6bcf\u6b21\u8be2\u95ee\u7684\u533a\u95f4\u90fd\u662f\u4e8c\u5206\u51fa\u6765\u7684\u533a\u95f4$[l,l+mid-1]$\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5b50\u5f97\u5199\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u518d\u52a0\u4e0aST\u8868\uff0c\u592a\u96be\u53d7\u4e86\u3002\u6211\u4eec\u4e0d\u5982\u8fd9\u6837\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4$\\text{LCP}$\u957f\u5ea6\u3002\u529e\u6cd5\u5f88\u7b80\u5355\uff0c\u5f53\u65b0\u52a0\u5165\u4e00\u4e2a\u4f4d\u7f6e\u540e\uff0c\u76f4\u63a5\u5c06\u7ebf\u6bb5\u6811\u4e2d\u6240\u6709$\\text{LCP}$\u957f\u5ea6\u4e0e\u5b83\u53d6$\\min$\u5373\u53ef\u3002\u8fd9\u6837\uff0cST\u8868\u53ef\u4ee5\u7701\u6389\u4e86\uff0c\u4e24\u9897\u7ebf\u6bb5\u6811\u8981\u652f\u6301\u7684\u64cd\u4f5c\u4e5f\u4e00\u81f4\u4e86\uff08\u5168\u5c40\u53d6$\\min$\uff0c\u533a\u95f4\u6c42$\\max$\uff09\u3002\n\n\u5728\u8fd9\u6837\u5199\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u5e72\u8106\u8fde\u4e8c\u5206\u90fd\u53ef\u4ee5\u7701\u6389\u4e86\uff08\u56e0\u4e3a\u8fd9\u91cc\u7ebf\u6bb5\u6811\u7684\u5bf9\u5e94\u4f4d\u7f6e\u50a8\u5b58\u7684\u503c\u5c31\u662f**\u771f\u5b9e\u7b54\u6848**\uff0c\u6240\u4ee5\u53ef\u4ee5\u7701\u6389\uff09\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\uff08\u8fd9\u90e8\u5206\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u7684\u4ee3\u7801\u6bd4\u8f83\u795e\u5947\uff0c\u5efa\u8bae\u770b\u4e00\u4e0b\u4ee3\u7801\uff09\u3002\n\n\uff08\u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u505a\u8fc7[[HEOI2016/TJOI2016]\u5b57\u7b26\u4e32](https://www.luogu.com.cn/problem/P4094)\u8fd9\u9053\u9898\uff0c\u5b9e\u9645\u4e0a\u601d\u8def\u662f\u5dee\u4e0d\u591a\u7684\uff09\u3002\n\n\u7136\u540e\u5c31\u662f\u6765\u81ea\u8be5\u8be2\u95ee\u4e32\u5185\u90e8\u7684\u5176\u5b83\u540e\u7f00\u7684$\\operatorname{LCP}$\uff0c\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u624b\u6cd5\u5199\u51fa\u6765\u3002\n\n\u5219\u603b\u590d\u6742\u5ea6$O(n\\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=2001000;\nint n,m,q,t,id[N],res[N],len[N];\nll ans[N];\nint x[N],y[N],buc[N],sa[N],ht[N],rk[N],s[N];\nchar str[N];\nbool mat(int a,int b,int k){\n\tif(y[a]!=y[b])return false;\n\tif((a+k<n)^(b+k<n))return false;\n\tif((a+k<n)&&(b+k<n))return y[a+k]==y[b+k];\n\treturn true;\n}\nvoid SA(){\n\tfor(int i=0;i<n;i++)buc[x[i]=s[i]]++;\n\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\n\tfor(int i=n-1;i>=0;i--)sa[--buc[x[i]]]=i;\n\tfor(int k=1;k<n;k<<=1){\n\t\tint num=0;\n\t\tfor(int i=n-k;i<n;i++)y[num++]=i;\n\t\tfor(int i=0;i<n;i++)if(sa[i]>=k)y[num++]=sa[i]-k;\n\t\tfor(int i=0;i<=m;i++)buc[i]=0;\n\t\tfor(int i=0;i<n;i++)buc[x[y[i]]]++;\n\t\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\n\t\tfor(int i=n-1;i>=0;i--)sa[--buc[x[y[i]]]]=y[i];\n\t\tswap(x,y);\n\t\tx[sa[0]]=num=0;\n\t\tfor(int i=1;i<n;i++)x[sa[i]]=mat(sa[i],sa[i-1],k)?num:++num;\n\t\tif(num>=n-1)break;\n\t\tm=num;\n\t}\n\tfor(int i=0;i<n;i++)rk[sa[i]]=i;\n\tfor(int i=0,k=0;i<n;i++){\n\t\tif(!rk[i])continue;\n\t\tif(k)k--;\n\t\tint j=sa[rk[i]-1];\n\t\twhile(i+k<n&&j+k<n&&s[i+k]==s[j+k])k++;\n\t\tht[rk[i]]=k;\n\t}\n}\n#define lson x<<1\n#define rson x<<1|1\n#define mid ((l+r)>>1)\n#define change(x,y) seg[x].mn=min(seg[x].mn,y),seg[x].tag=min(seg[x].tag,y)\nstruct SegTree{\n\tint tag,mn;\n}seg[N<<2];\nvoid build(int x,int l,int r){\n\tseg[x].tag=0x3f3f3f3f,seg[x].mn=0;\n\tif(l!=r)build(lson,l,mid),build(rson,mid+1,r);\n}\nvoid pushdown(int x){\n\tchange(lson,seg[x].tag),change(rson,seg[x].tag),seg[x].tag=0x3f3f3f3f;\n}\nvoid turnon(int x,int l,int r,int P,int val){\n\tif(l>P||r<P)return;\n\tseg[x].mn=max(seg[x].mn,val);\n\tpushdown(x);\n\tif(l!=r)turnon(lson,l,mid,P,val),turnon(rson,mid+1,r,P,val);\n}\nint getans(int x,int l,int r,int L,int R){\n\tif(l==r)return min(seg[x].mn,R-r+1);\n\tpushdown(x);\n\tif(seg[lson].mn>=R-mid+1)return getans(lson,l,mid,L,R);\n\telse return max(seg[lson].mn,getans(rson,mid+1,r,L,R));\n}\nint query(int x,int l,int r,int L,int R,bool &findans){\n\tif(l>R||r<L)return -1;\n\tif(L<=l&&r<=R){\n\t\tif(seg[x].mn>=R-r+1){findans=true;return getans(x,l,r,L,R);}\n\t\treturn seg[x].mn;\n\t}\n\tpushdown(x);\n\tint tmp=query(lson,l,mid,L,R,findans);\n\tif(findans)return tmp;\n\treturn max(tmp,query(rson,mid+1,r,L,R,findans));\n}\nint pointask(int x,int l,int r,int P){\n\tif(l>P||r<P)return 0;\n\tif(l==r)return seg[x].mn;\n\tpushdown(x);\n\treturn pointask(lson,l,mid,P)+pointask(rson,mid+1,r,P);\n}\npair<int,int>p[500100];\nvoid read(int &x){\n\tx=0;\n\tchar c=getchar();\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48),c=getchar(); \n}\nint main(){\n\tscanf(\"%s\",str),t=strlen(str);for(int i=0;i<t;i++)s[n++]=str[i]-'a'+1;\n\tread(q);\n\tfor(int i=1;i<=q;i++){\n\t\tscanf(\"%s\",str),read(p[i].first),read(p[i].second),m=strlen(str),p[i].first--,p[i].second--;\n\t\tid[n]=-1,s[n]=i+26,n++;\n\t\tfor(int j=0;j<m;j++)id[n]=i,s[n]=str[j]-'a'+1,len[n]=m-j,n++;\n\t}\n\tm=q+26;\n\tSA();\n\tbool tmp;\n\tbuild(1,0,t-1);\n\tfor(int i=1;i<n;i++){\n\t\tchange(1,ht[i]);\n\t\tif(!id[sa[i-1]])turnon(1,0,t-1,sa[i-1],ht[i]);\n\t\tif(id[sa[i]]>=1)tmp=false,res[sa[i]]=max(res[sa[i]],query(1,0,t-1,p[id[sa[i]]].first,p[id[sa[i]]].second,tmp));\n\t}\n\tbuild(1,0,t-1);\n\tfor(int i=n-1;i>=0;i--){\n\t\tif(id[sa[i]]>=1)tmp=false,res[sa[i]]=max(res[sa[i]],query(1,0,t-1,p[id[sa[i]]].first,p[id[sa[i]]].second,tmp));\n\t\tchange(1,ht[i]);\n\t\tif(!id[sa[i]])turnon(1,0,t-1,sa[i],ht[i]);\n\t}\n\tbuild(1,1,q);\n\tfor(int i=1;i<n;i++){\n\t\tchange(1,ht[i]);\n\t\tif(id[sa[i-1]]>=1)turnon(1,1,q,id[sa[i-1]],ht[i]);\n\t\tif(id[sa[i]]>=1)res[sa[i]]=max(res[sa[i]],pointask(1,1,q,id[sa[i]]));\n\t}\n\tfor(int i=0;i<n;i++)if(id[i]>=1)ans[id[i]]+=len[i]-res[i];\n\tfor(int i=1;i<=q;i++)printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1596184308,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "emmm\uff0c\u8fd9\u9898\u5176\u5b9e\u4e5f\u4e0d\u662f\u7279\u522b\u96be\uff0c\u4e2a\u4eba\u611f\u89c9\u6bd4\u4e4b\u524d\u505a\u8fc7\u7684\u4e24\u9053\u7ebf\u6bb5\u6811\u5408\u5e76right\u7684\u540e\u7f00\u81ea\u52a8\u673a\u90fd\u8981\u7b80\u5355\u4e0d\u5c11\uff08\u53e6\u4e24\u9053\u90fd\u81f3\u5c11\u957f2k\u2026\u2026     \n\u9996\u5148\u8003\u8651\u4e00\u4e0b\u8be2\u95ee\u533a\u95f4\u5c31\u662f\u6574\u4e32\u7684\u60c5\u51b5     \n\u6211\u4eec\u5148\u5bf9\u957f\u4e32S\u5efaSAM     \n\u7136\u540e\u628a\u8be2\u95ee\u4e32T\u5728\u957f\u4e32\u4e0a\u8dd1\u5339\u914d\uff0c\u5047\u8bbe$1-T_i$\u80fd\u5339\u914d\u7684\u957f\u5ea6\u4e3alen\uff0c\u663e\u7136$i-len$\u4e2a\u4e32\u4e0d\u4f1a\u5728$S$\u4e2d\u51fa\u73b0\uff0c\u6211\u4eec\u628a\u7b54\u6848\u52a0\u4e0a\u5373\u53ef     \n\u4f46\u662f\u5427\uff0c\u4f60\u4ed4\u7ec6\u4e00\u770b\u9898\uff0c\u53d1\u73b0\u4ed6\u8981\u7edf\u8ba1\u7684\u662f\u4e32\u7684\u79cd\u7c7b\uff0c\u8981\u53bb\u91cd    \n\u90a3\u4e48\u7684\u8bdd\u53ef\u4ee5\u8003\u8651\u5bf9$T$\u518d\u5efa\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a    \n\u6211\u4eec\u628a\u6bcf\u4e2ai\u5bf9\u5e94\u7684$1-T_i$\u80fd\u5339\u914d\u7684\u957f\u5ea6$len$\u653e\u5230$T$\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u5bf9\u5e94\u4e32\u7684\u8282\u70b9\u4e0a\uff0c\u663e\u7136\u4e00\u4e2a\u70b9\u88ab\u8986\u76d6\u7684\u957f\u5ea6\u5c31\u662f\u4ed6\u6240\u6709\u5b50\u6811\u91cc\u6700\u957f\u7684$len$\uff0c\u8fd9\u6837\u5b50\u6211\u4eec\u628aparent\u6811\u5efa\u51fa\u6765\uff0c\u5728\u6811\u4e0a\u8dd1\u904ddfs\uff0c\u663e\u7136\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\u5c31\u662f\u8fd9\u4e2a\u70b9\u7ba1\u8f96\u7684\u5b57\u7b26\u4e32\u6570\u4e0e\u4ed6\u7684\u6700\u5927\u957f\u5ea6\u51cf\u53bb\u88ab\u8986\u76d6\u957f\u5ea6\u53d6min\uff0c\u52a0\u5230\u7b54\u6848\u4e0a\u5c31\u53ef\u4ee5\u4e86\u3002  \n \u73b0\u5728\u6765\u8003\u8651\u4e00\u4e0b\u8be2\u95ee\u7684\u662f\u7ed9\u5b9a\u533a\u95f4$l,r$\u7684\u60c5\u51b5  \n \u6211\u4eec\u8fd8\u662f\u8dd1\u5339\u914d\uff0c\u4e00\u822c\u7684\u5339\u914d\u601d\u8def\u662f\u770b\u770b\u6709\u6ca1\u6709\u8fd9\u6761\u8f6c\u79fb\u8fb9\uff0c\u6ca1\u6709\u7684\u8bdd\u8df3\u7236\u4eb2  \n \u73b0\u5728\u53ea\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u4e0bright\u96c6\u5408\uff0c\u5339\u914d\u7684\u65f6\u5019\u770b\u770b\u533a\u95f4\u91cc\u6709\u6ca1\u6709\u8fd9\u4e2a\u8f6c\u79fb\u540e\u7f00\uff0c\u6ca1\u6709\u7684\u8bdd\u628a\u540e\u7f00\u957f\u5ea6\u51cf\u4e00\u518d\u5339\u914d\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u6700\u5c0f\u957f\u5ea6\u90fd\u5339\u914d\u4e0d\u4e0a\u5c31\u8df3\u7236\u4eb2\uff0c\u8fd9\u6837\u5b50\u5c31\u505a\u5b8c\u4e86  \n\u590d\u6742\u5ea6\u4e00\u53ealog\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define lson tr[now].l\n#define rson tr[now].r\n#define N 500050\nusing namespace std;\n\nstruct SM\n{\n\tstruct point\n\t{\n\t\tint len,fa,son[26];\n\t}t[N<<1],t1[N<<1];\n\n\tstruct tree\n\t{\n\t\tint l,r,sum;\n\t}tr[N*60];\n\n\tint last=1,cnt=1,last1=1,cnt1=1,tot=0,len1,len2,rt[N<<1],pos[N],mx[N<<1];\n\tint ttt;\n\tlong long ans=0;\n\tvector<int> g[N<<1],g1[N<<1];\n\tchar s[500050],ss[500050];\n\n\tvoid push_up(int now)\n\t{\n\t\ttr[now].sum=tr[lson].sum|tr[rson].sum;\n\t}\n\n\tvoid insert(int &now,int l,int r,int pos)\n\t{\n\t\tif(!now) now=++tot;\n\t\tif(l==r)\n\t\t{\n\t\t\ttr[now].sum=1;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(pos<=mid)\n\t\t{\n\t\t\tinsert(lson,l,mid,pos);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinsert(rson,mid+1,r,pos);\n\t\t}\n\t\tpush_up(now);\n\t}\n\n\tint query(int now,int l,int r,int ll,int rr)\n\t{\n\t\tif(ll>rr) return 0;\n\t\tif(ll<=l&&r<=rr)\n\t\t{\n\t\t\treturn tr[now].sum;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(rr<=mid)\n\t\t{\n\t\t\treturn query(lson,l,mid,ll,rr);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(mid<ll)\n\t\t\t{\n\t\t\t\treturn query(rson,mid+1,r,ll,rr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn query(lson,l,mid,ll,mid)|query(rson,mid+1,r,mid+1,rr);\n\t\t\t}\n\t\t}\n\t}\n\n\tint merge(int a,int b,int l,int r)\n\t{\n\t\tif(!a) return b;\n\t\tif(!b) return a;\n\t\tint now=++tot;\n\t\tif(l==r)\n\t\t{\n\t\t\ttr[now].sum=1;\n\t\t\treturn now;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\ttr[now].l=merge(tr[a].l,tr[b].l,l,mid);\n\t\ttr[now].r=merge(tr[a].r,tr[b].r,mid+1,r);\n\t\tpush_up(now);\n\t\treturn now;\n\t}\n\n\tvoid mem()\n\t{\n\t\tfor(int i=1;i<=cnt1;i++)\n\t\t{\n\t\t\tmemset(t1[i].son,0,sizeof(t1[i].son));\n\t\t\tg1[i].clear();\n\t\t\tmx[i]=0;\n\t\t}\n\t\tcnt1=1,last1=1;\n\t}\n\n\tvoid add(int c,int pos)\n\t{\n\t\tint p=last,np=++cnt;\n\t\tt[np].len=t[p].len+1;\n\t\tinsert(rt[np],1,len1,pos);\n\t\twhile(p&&(!t[p].son[c]))\n\t\t{\n\t\t\tt[p].son[c]=np;\n\t\t\tp=t[p].fa;\n\t\t}\n\t\tif(!p) t[np].fa=1;\n\t\telse\n\t\t{\n\t\t\tint q=t[p].son[c],nq;\n\t\t\tif(t[q].len==t[p].len+1)\n\t\t\t{\n\t\t\t\tt[np].fa=q;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnq=++cnt;\n\t\t\t\tt[nq]=t[q];\n\t\t\t\tt[nq].len=t[p].len+1;\n\t\t\t\tt[np].fa=t[q].fa=nq;\n\t\t\t\twhile(p&&t[p].son[c]==q)\n\t\t\t\t{\n\t\t\t\t\tt[p].son[c]=nq;\n\t\t\t\t\tp=t[p].fa;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlast=np;\n\t}\n\n\tvoid add1(int c)\n\t{\n\t\tint p=last1,np=++cnt1;\n\t\tt1[np].len=t1[p].len+1;\n\t\twhile(p&&(!t1[p].son[c]))\n\t\t{\n\t\t\tt1[p].son[c]=np;\n\t\t\tp=t1[p].fa;\n\t\t}\n\t\tif(!p) t1[np].fa=1;\n\t\telse\n\t\t{\n\t\t\tint q=t1[p].son[c],nq;\n\t\t\tif(t1[q].len==t1[p].len+1)\n\t\t\t{\n\t\t\t\tt1[np].fa=q;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnq=++cnt1;\n\t\t\t\tt1[nq]=t1[q];\n\t\t\t\tt1[nq].len=t1[p].len+1;\n\t\t\t\tt1[np].fa=t1[q].fa=nq;\n\t\t\t\twhile(p&&t1[p].son[c]==q)\n\t\t\t\t{\n\t\t\t\t\tt1[p].son[c]=nq;\n\t\t\t\t\tp=t1[p].fa;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlast1=np;\n\t}\n\n\tvoid dfs1(int now)\n\t{\n\t\tfor(int i=0;i<g[now].size();i++)\n\t\t{\n\t\t\tdfs1(g[now][i]);\n\t\t\trt[now]=merge(rt[now],rt[g[now][i]],1,len1);\n\t\t}\n\t}\n\n\tvoid dfs2(int now,int fa)\n\t{\n\t\tfor(int i=0;i<g1[now].size();i++)\n\t\t{\n\t\t\tdfs2(g1[now][i],now);\n\t\t\tmx[now]=mx[now]<mx[g1[now][i]]?mx[g1[now][i]]:mx[now];\n\t\t}\n\t\tint len=t1[now].len-t1[t1[now].fa].len;\n\t\tint tmp=t1[now].len-mx[now];\n\t\tif(tmp<0) tmp=0;\n\t\tans+=tmp<len?tmp:len;\n\t}\n\n\tvoid solve()\n\t{\n\t\tint l,r;\n\t\tscanf(\"%s\",s+1);\n\t\tlen1=strlen(s+1);\n\t\tfor(int i=1;i<=len1;i++) add(s[i]-'a',i);\n\t\tfor(int i=1;i<=cnt;i++) g[t[i].fa].push_back(i);\n\t\tdfs1(1);\n\t\tscanf(\"%d\",&ttt);\n\t\twhile(ttt--)\n\t\t{\n\t\t\tans=0;\n\t\t\tscanf(\"%s\",ss+1);\n\t\t\tlen2=strlen(ss+1);\n\t\t\tmem();\n\t\t\tfor(int i=1;i<=len2;i++) add1(ss[i]-'a'),pos[i]=last1;\n\t\t\tfor(int i=1;i<=cnt1;i++) g1[t1[i].fa].push_back(i);\n\t\t\tscanf(\"%d %d\",&l,&r);\n\t\t\tint now=1,lenn=0;\n\t\t\tfor(int i=1;i<=len2;i++)\n\t\t\t{\n\t\t\t\tint c=ss[i]-'a';\n\t\t\t\tlenn++;\n\t\t\t\twhile(lenn)\n\t\t\t\t{\n\t\t\t\t\tif(query(rt[t[now].son[c]],1,len1,l+lenn-1,r))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlenn--;\n\t\t\t\t\tif(lenn-1<=t[t[now].fa].len) now=t[now].fa;\n\t\t\t\t}\n\t\t\t\tif(lenn) now=t[now].son[c];\n\t\t\t\telse now=1;\n\t\t\t\tmx[pos[i]]=lenn;\n\t\t\t}\n\t\t\tdfs2(1,0);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n}sam;\n\nint main()\n{\n\tsam.solve();\n}\n```",
        "postTime": 1553068120,
        "uid": 185441,
        "name": "\u30cb\u30d2\u30eb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "$NOI2018$\u7684\u4f60\u7684\u540d\u5b57\u786e\u5b9e\u6709\u70b9~~\u6bd2\u7624~~\n\n\u672c\u9898\u662f\u4e00\u9053\u51fa\u7684\u5f88\u597d\u7684\u5b57\u7b26\u4e32\u9898\uff0c\u975e\u5e38\u7b26\u5408$NOI$\u8003\u67e5\u96be\u5ea6\u3002\n\n\u8003\u67e5\u540e\u7f00\u81ea\u52a8\u673a\u548c\u7ebf\u6bb5\u6811\u5408\u5e76\u7efc\u5408\u638c\u63e1\u3002\n\n\u5bf9\u4e8e\u672c\u9898\u6c42\u51fa\u6240\u6709**\u672c\u8d28\u4e0d\u540c\u7684\u5b57\u7b26\u4e32**\u5176\u4e2d\u4ed6\u5728$T$\u4e2d\u51fa\u73b0\u8fc7\uff0c\u5728$S$\u4e2d\u672a\u51fa\u73b0\u8fc7\u3002\n\n\u5bf9\u4e8e\u6837\u4f8b\uff1a\n\n$\\texttt{sgepe}$\u76f8\u5bf9\u4e8e$\\texttt{scbamgepe}$\u5728\u6574\u4e2a\u4e32\u4e4b\u5185\uff0c\u6709$\\texttt{sg},\\texttt{sge},\\texttt{sgep},\\texttt{sgepe}$\u6ee1\u8db3\u9898\u610f\u3002\n\n\u5148\u5206\u6790\u5b50\u4efb\u52a1$l=1,r=|s|$,\u90a3\u4e48\u53ea\u9700\u8981\u5bf9$S$\u5efa\u7acb$SAM$\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee$T$\u4e5f\u5efa\u7acb$SAM$,$T$\u5728$S$\u7684\u81ea\u52a8\u673a\u90e8\u5206\u8dd1\uff0c\u8fd9\u4e2a\u505a\u6cd5\u53ef\u4ee5\u53c2\u7167[CF666E Forensic Examination](https://www.luogu.com.cn/problem/CF666E),\u5982\u679c$u$\u70b9$son[u][c]\\not=0$\u90a3\u4e48\u5c31\u76f4\u63a5\u5f80\u4e0b\u8d70\uff0c\u5426\u5219\u5f80\u4e0a\u8df3$parent$\uff0c\u77e5\u9053\u51fa\u73b0$son[u][c]\\not=0$,\u590d\u6742\u5ea6\u8bc1\u660e\u53c2\u89c1\u5efa\u7acb$SAM$\u65f6\u66b4\u529b\u5f80\u4e0a\u8df3\u7684\u590d\u6742\u5ea6\uff0c\u5747\u644a$\\Theta(n)$\u3002\n\n\u5bf9\u4e8e\u5230\u8fbe\u7684$S$\u7684\u81ea\u52a8\u673a\u7684$u$\u70b9\uff0c\u90a3\u4e48\u8bb0\u5f55$ans[last]=len[u]$ $($\u5176\u4e2d$last$\u4e3a\u63d2\u5165\u5f53\u524d\u5b57\u7b26\u540e\uff0c$T$\u7684\u81ea\u52a8\u673a\u7684$last)$\uff0c\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u5728$S$\u4e2d\u51fa\u73b0\u7684**\u6700\u957f\u7684\u540e\u7f00\u957f\u5ea6**\uff0c\u7136\u540e\u5408\u5e76\u5373\u53ef\u3002\n\n\u8fd0\u7528**\u8865\u96c6\u5173\u7cfb**\uff0c\u7b54\u6848\u4e3a$T$\u7684\u6240\u6709\u672c\u8d28\u4e0d\u540c\u5b50\u4e32$-S$\u4e2d\u6240\u5305\u542b$T$\u5b50\u4e32\u3002\n\n```cpp\nvoid dfs(int u)\n{\n\tfor(int i=p[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tdfs(v);\n\t\tans[u]=max(ans[u],ans[v]);\n\t}\n\tans[u]=min(ans[u],len[u]);\n\tres+=len[u]-len[fa[u]];\n\tres-=max(0,ans[u]-len[fa[u]]);\n}\n```\n\n\u6ce8\u610f\u6b64\u5904\u8981\u53d6$\\max$,\u56e0\u4e3a\u6709\u53ef\u80fd\u4ed6\u88ab\u4e4b\u524d\u51cf\u8fc7\u4e86\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528$\\Theta(n)$\u7684\u590d\u6742\u5ea6\u83b7\u5f97~~\u4f18\u79c0\u768468\u5206(\u539f\u59cb\u6570\u636e)~~\u3002\n\n\u5bf9\u4e8e$100\\%$\u7684\u6570\u636e\uff1a\n\n\u663e\u7136\u53ef\u4ee5\u6cbf\u7528\u4e0a\u8ff0\u601d\u8def\uff0c\u5efa\u7acb\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u4e3b\u5e2d\u6811\u5f0f\u5408\u5e76\uff0c\u7136\u540e\u67e5\u8be2\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6$\\Theta((|S|+|T|)\\log|S|)$\u3002\n\n\u6761\u4ef6\uff1a\u5f53\u524d\u5b50\u6811\u4e2d\u662f\u5426\u6709$l \\ r$\uff0c**\u4ee5\u53ca\u8be5\u5b50\u4e32\u662f\u5426\u5728$\\texttt{l r}$\u4e4b\u95f4**\u3002\n\n**\u6ce8\u610f\uff1a\u5728\u67e5\u8be2\u65f6\u6709\u53ef\u80fd\u51fa\u73b0\u5982\u4e0b\u60c5\u51b5**\n\n~~\u6211\u5728\u8fd9\u91cc\u5361\u4e86\u597d\u4e45~~\n\n$hack:$\n\n#### hack1.in\n```\nvwv\n1\nvw 2 3\n```\n#### hack1.out\n```\n1\n```\n\n\u6ce8\u610f\u8fd9\u91cc\u7b54\u6848\u662f$1$,\u4e0d\u662f$0$\u3002\n\n\u56e0\u4e3a\u5728\u67e5\u8be2\u5230\u8868\u793a$\\texttt{vw}$\u8282\u70b9\u65f6\u5b83\u5bf9\u5e94\u539f\u533a\u95f4\u4e3a$1\\ 2$\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684$ans$\u53ea\u80fd\u8bbe\u7f6e\u4e3a$1$\u3002\n\n#### hack2.in\n```\naabcabbacc\n1\nabcd 3 6\n```\n#### hack2.out\n```\n5\n```\n\n\u6ce8\u610f\u8fd9\u91cc\u7b54\u6848\u662f$5$,\u4e0d\u662f$6$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<queue>\n#include<vector>\n#define ll long long\n#define ull unsigned long long\nusing namespace std;\ninline int getint()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn (f==1)?x:-x;\n}\ninline int max(int a,int b)\n{\n\treturn a>b?a:b;\n}\ninline int min(int a,int b)\n{\n\treturn a<b?a:b;\n}\nconst int maxn=1e6+5;\nchar s[maxn],t[maxn];\nint p[maxn],sz,rt[maxn],Q,l,r,n;\nll res;\nstruct edge\n{\n\tint v,nxt;\n\tedge(){}\n\tedge(int vv,int nn)\n\t{\n\t\tv=vv,nxt=nn;\n\t}\n}e[maxn<<1];\ninline void add(int u,int v)\n{\n\te[++sz]=edge(v,p[u]);\n\tp[u]=sz;\n}\n\nstruct segmentree\n{\n\tint tot;\n\tint sum[maxn*20],ls[maxn*20],rs[maxn*20],maxv[maxn*20];\n\tinline void pushup(int u)\n\t{\n\t\tsum[u]=sum[ls[u]]+sum[rs[u]];\n\t\tmaxv[u]=max(maxv[ls[u]],maxv[rs[u]]);\n\t}\n\tinline void update(int &u,int l,int r,int x,int v)\n\t{\n\t\tif(!u)u=++tot;\n\t\tif(l==r)\n\t\t{\n\t\t\tsum[u]+=v;\n\t\t\tmaxv[u]=l;\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(x<=mid)update(ls[u],l,mid,x,v);\n\t\t\telse update(rs[u],mid+1,r,x,v);\n\t\t\tpushup(u);\n\t\t}\n\t}\n\tinline int query(int u,int l,int r,int x,int y)\n\t{\n\t\tif(x<=l&&y>=r)return sum[u];\n\t\tif(u==0||l>r)return 0;\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1,val=0;\n\t\t\tif(x<=mid)val+=query(ls[u],l,mid,x,y);\n\t\t\tif(y>mid)val+=query(rs[u],mid+1,r,x,y);\n\t\t\treturn val;\n\t\t}\n\t}\n\tinline int query2(int u,int l,int r,int x,int y)\n\t{\n\t\tif(x<=l&&y>=r)return maxv[u];\n\t\tif(u==0||l>r)return 0;\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1,val=0;\n\t\t\tif(x<=mid)val=max(val,query2(ls[u],l,mid,x,y));\n\t\t\tif(y>mid)val=max(query2(rs[u],mid+1,r,x,y),val);\n\t\t\treturn val;\n\t\t}\n\t}\n\tinline int merge(int &x,int &y,int l,int r)\n\t{\n\t\tif(!x||!y)return x+y;\n\t\tint u=++tot;\n\t\tif(l==r)\n\t\t{\n\t\t\tsum[u]=sum[x]+sum[y];\n\t\t\tmaxv[u]=l;\n\t\t\treturn u;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tls[u]=merge(ls[x],ls[y],l,mid);\n\t\t\trs[u]=merge(rs[x],rs[y],mid+1,r);\n\t\t\tpushup(u);\n\t\t}\n\t\treturn u;\n\t}\n}tree;\nnamespace SAM1\n{\n\tint fa[maxn],len[maxn],son[maxn][26],tot=1,last=1;\n\tinline void insert(int c)\n\t{\n\t\tint np=++tot,p=last;\n\t\tlen[np]=len[p]+1,last=np;\n\t\twhile(p&&!son[p][c])son[p][c]=np,p=fa[p];\n\t\tif(p==0)fa[np]=1;\n\t\telse\n\t\t{\n\t\t\tint q=son[p][c];\n\t\t\tif(len[q]==len[p]+1)fa[np]=q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint nq=++tot;\n\t\t\t\tlen[nq]=len[p]+1;\n\t\t\t\tfa[nq]=fa[q];\n\t\t\t\tfa[q]=fa[np]=nq;\n\t\t\t\tmemcpy(son[nq],son[q],sizeof(son[nq]));\n\t\t\t\twhile(p&&son[p][c]==q)son[p][c]=nq,p=fa[p];\n\t\t\t}\n\t\t}\n\t}\n\tinline void dfs(int u)\n\t{\n\t\tfor(int i=p[u];i!=-1;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tdfs(v);\n\t\t\trt[u]=tree.merge(rt[u],rt[v],1,n);\n\t\t}\n\t}\n}\nnamespace SAM2\n{\n\tint fa[maxn],len[maxn],son[maxn][26],tot=1,last=1;\n\tint ans[maxn];\n\tinline void clear()\n\t{\n\t\tfor(int i=1;i<=tot;++i)fa[i]=0,len[i]=0,ans[i]=0,p[i]=-1;\n\t\tfor(int i=1;i<=tot;++i)memset(son[i],0,sizeof(son[i]));\n\t\ttot=last=1;\n\t\tsz=0;\n\t}\n\tinline void insert(int c)\n\t{\n\t\tint np=++tot,p=last;\n\t\tlen[np]=len[p]+1,last=np;\n\t\twhile(p&&!son[p][c])son[p][c]=np,p=fa[p];\n\t\tif(p==0)fa[np]=1;\n\t\telse\n\t\t{\n\t\t\tint q=son[p][c];\n\t\t\tif(len[q]==len[p]+1)fa[np]=q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint nq=++tot;\n\t\t\t\tlen[nq]=len[p]+1;\n\t\t\t\tfa[nq]=fa[q];\n\t\t\t\tfa[q]=fa[np]=nq;\n\t\t\t\tmemcpy(son[nq],son[q],sizeof(son[nq]));\n\t\t\t\twhile(p&&son[p][c]==q)son[p][c]=nq,p=fa[p];\n\t\t\t}\n\t\t}\n\t}\n\tinline void dfs(int u)\n\t{\n\t\tfor(int i=p[u];i!=-1;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tdfs(v);\n\t\t\tans[u]=max(ans[u],ans[v]);\n\t\t}\n\t\tans[u]=min(ans[u],len[u]);\n\t\tres+=len[u]-len[fa[u]];\n\t\tres-=max(0,ans[u]-len[fa[u]]);\n\t}\n}\nint main()\n{\n//\tfreopen(\"name.in\",\"r\",stdin);\n//\tfreopen(\"name.out\",\"w\",stdout);\n\tmemset(p,-1,sizeof(p));\n\tscanf(\"%s\",s+1);\n\tn=strlen(s+1);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tSAM1::insert(s[i]-'a');\n\t\ttree.update(rt[SAM1::last],1,n,i,1);\n\t}\n\tQ=getint();\n\tfor(int i=1;i<=SAM1::tot;++i)add(SAM1::fa[i],i);\n\tSAM1::dfs(1);\n\tmemset(p,-1,sizeof(p));\n\tfor(int i=1;i<=Q;++i)\n\t{\n\t\tscanf(\"%s\",t+1);\n\t\tint len=strlen(t+1);\n\t\tl=getint(),r=getint();\n\t\tSAM2::clear();\n\t\tint pos=1,nowlen=0;\n\t\tres=0;\n\t\tfor(int j=1;j<=len;++j)\n\t\t{\n\t\t\tSAM2::insert(t[j]-'a');\n\t\t\twhile(!SAM1::son[pos][t[j]-'a']&&pos)\n\t\t\t{\n\t\t\t\tpos=SAM1::fa[pos];\n\t\t\t\tnowlen=SAM1::len[pos];\n\t\t\t}\n\t\t\tif(SAM1::son[pos][t[j]-'a'])pos=SAM1::son[pos][t[j]-'a'],nowlen++;\n\t\t\tif(pos==0)pos=1,nowlen=0;\n\t\t\twhile((!tree.query(rt[pos],1,n,l,r))&&pos)\n\t\t\t{\n\t\t\t\tpos=SAM1::fa[pos];\n\t\t\t\tnowlen=SAM1::len[pos];\n\t\t\t}\n\t\t\twhile(tree.query2(rt[pos],1,n,l,r)-(SAM1::len[SAM1::fa[pos]])+1<l&&pos)\n\t\t\t{\n\t\t\t\tpos=SAM1::fa[pos];\n\t\t\t\tnowlen=SAM1::len[pos];\n\t\t\t}\n\t\t\tif(pos==0)pos=1,nowlen=0;\n\t\t\tSAM2::ans[SAM2::last]=min(nowlen,tree.query2(rt[pos],1,n,l,r)-l+1);\n\t\t}\n\t\tfor(int j=1;j<=SAM2::tot;++j)add(SAM2::fa[j],j);\n\t\tSAM2::dfs(1);\n\t\tprintf(\"%lld\\n\",res);\n\t}\n\treturn 0;\n}\n```\n\n\u968f\u4fbf\u63d0\u4e00\u4e0b\uff1a\n\n\u6700\u597d\u5728\u5199\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\uff0c\u52a0\u4e0a\u533a\u95f4\uff0c\u5982\u679c$l=r$\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\uff0c\u4ee5\u9632\u4e0d\u5fc5\u8981\u7684\u9519\u8bef\u3002",
        "postTime": 1589554797,
        "uid": 333789,
        "name": "lory1608",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "# [NOI 2018]\u4f60\u7684\u540d\u5b57\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P4770)\n\n## \u9898\u76ee\u53d9\u8ff0\n\n\u7ed9\u4f60\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51e0\u4e2a\u5c0f\u5b57\u7b26\u4e32\uff0c\u6c42\u5927\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u533a\u95f4$[l,r]$\u4e2d\u7684\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u5c0f\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u6570\u91cf\u3002\n\n## \u4e00\u4e9b\u60f3\u6cd5\n\n\u5176\u5b9e\u53ef\u4ee5\u6bcf\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u5c0f\u5b57\u7b26\u4e32\u8fde\u8d77\u6765\uff08\u5176\u5b9e\u5c31\u662f\u4e24\u4e2a\u5408\u8d77\u6765\u5efa\u4e00\u4e2a\u5e7f\u4e49\u540e\u7f00\u6811\uff09\uff0c\u7136\u540e\u770b\u5b50\u6811\u4e2d\u65e2\u5305\u542b\u7b2c\u4e00\u4e2a\u7ed3\u5c3e\u7b26\u53c8\u5305\u542b\u7b2c\u4e8c\u4e2a\u7ed3\u5c3e\u7b26\u7684\u5b57\u7b26\u4e32\u6709\u591a\u5c11\u4e2a\u3002\u4f46\u662f\u4e0d\u77e5\u9053\u5982\u4f55\u591a\u4e2a\u8be2\u95ee\u641e\uff0c\u5e94\u8be5\u8fd9\u64a4\u9500\u4e0d\u4e86\u3002\n\n## \u9898\u89e3\n\n\u7b54\u6848\u5c31\u662f$T$\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u91cf\u51cf\u53bb\u65e2\u662f$T$\u7684\u5b50\u4e32\u53c8\u662f$S$\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u3002\n\n\u9996\u5148$T$\u7684\u672c\u8d28\u4e0d\u540c\u5b57\u4e32\u662f$T$\u7684\u540e\u7f00\u6811\u5927\u5c0f\u3002\u5bf9$S$\u548c$T$\u7684\u516c\u5171\u5b50\u4e32\u6309\u7167\u5f00\u5934\u5206\u7c7b\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u7c7b\u522b\u7edf\u8ba1\u6570\u91cf\u3002\u90a3\u4e48\u7edf\u8ba1\u7684\u5c31\u662f\u4e00\u4e2a\u4f4d\u7f6e\u5411\u540e\u591a\u5c11\u4e2a\u5728$S$\u91cc\u9762\u3002\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5728\u540e\u7f00\u6811\u4e0a\u5339\u914d\u5b8c\u6210\u3002\u5177\u4f53\u7684\uff0c\u8bbe$lim_i$\u4e3a\u4ee5$i$\u4e3a\u5f00\u5934\u6700\u591a\u5411\u540e\u5339\u914d\u591a\u5c11\u4e2a\u8fd8\u662f\u5728$S[l,r]$\u91cc\u9762\uff0c\u6211\u4eec\u77e5\u9053\u5339\u914d\u4e32\u7684\u7ed3\u5c3e$i+lim_i-1$\u662f\u5355\u8c03\u5411\u540e\u7684\uff0c\u6240\u4ee5\u6bcf\u6b21\u5339\u914d\u5230\u4e00\u4e2a\u70b9\u53ef\u4ee5\u5ef6\u7eed\u4e0a\u4e00\u4e2a\u4e32\u5339\u914d\u5230\u7684\u4f4d\u7f6e\u7ee7\u7eed\u5339\u914d\uff0c\u4f46\u5728\u6811\u4e0a\u7684\u4f4d\u7f6e\u9700\u8981\u53d8\u4e00\u53d8\uff0c\u56e0\u4e3a\u9996\u5b57\u6bcd\u5411\u540e\u79fb\u4e86\u4e00\u4e2a\uff0c\u6240\u4ee5\u5e94\u8be5\u8df3\u5230\u540e\u7f00\u94fe\u63a5\u4e0a\u7ee7\u7eed\u3002\u4f46\u662f\u7531\u4e8e\u6709\u533a\u95f4$[l,r]$\u7684\u9650\u5236\uff0c\u5728\u5339\u914d\u957f\u5ea6\u4e3a$len$\u7684\u65f6\u5019\uff0c\u6700\u7ec8\u5339\u914d\u6210\u7684\u5b57\u7b26\u4e32\uff08\u5982\u679c\u80fd\u5339\u914d\u6210\u7684\u8bdd\uff09\u7684\u5f00\u5934\u4e00\u5b9a\u5728$[l,r-len]$\u4e4b\u95f4\uff0c\u4e5f\u5c31\u662f\u770b\u5728$[l,r-len]$\u4e2d\u662f\u5426\u6709\u4e00\u4e2a\u540e\u7f00\uff0c\u5176\u524d\u7f00\u4e3a\u8be5\u5b57\u7b26\u4e32\u3002\u90a3\u4e48\u6bcf\u6b21\u5339\u914d\u5411\u4e0b\u8d70\u7684\u65f6\u5019\u8981\u770b\u5f53\u524d\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u662f\u5426\u6709\u4e00\u4e2a\u540e\u7f00\u7684\u5f00\u5934\u5c5e\u4e8e$[l,r-len]$\u3002\u8fd9\u6837$lim$\u6570\u7ec4\u5c31\u6c42\u5b8c\u4e86\u3002\n\n\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u662f\u6c42\u6240\u6709\u7684\u4e0d\u884c\u7684\u5b57\u7b26\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u91cf\u3002\u8fd9\u4e2a\u53ef\u4ee5\u653e\u5230\u540e\u7f00\u6811\u4e0a\u53bb\u8003\u8651\uff0c\u7ed9\u6bcf\u4e00\u4e2a$T$\u90fd\u641e\u4e00\u4e2a\u540e\u7f00\u6811\uff0c\u90a3\u4e48\u4e0d\u884c\u7684\u5b57\u7b26\u4e32\uff08\u5c31\u662f\u65e2\u662f$S$\u7684\u5b50\u4e32\u4e5f\u662f$T$\u7684\u5b50\u4e32\uff09\u4e00\u5b9a\u662f\u540e\u7f00\u6811\u4e0a\u7684\u524d\u9762\u4e00\u6bb5\uff08\u5927\u6982\u89e3\u91ca\u4e00\u4e0b\uff0c\u5c31\u662f\u6bcf\u4e00\u4e2a\u4e0d\u884c\u7684\u5b50\u4e32\u90fd\u662f\u540e\u7f00\u6811\u4e0a\u7684\u4ece\u6839\u5f00\u59cb\u7684\u4e00\u6bb5\uff09\uff08\u53ef\u4ee5\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\uff0c\u8bf4\u7684\u6781\u5176\u62bd\u8c61\uff09\u3002\u5269\u4e0b\u7684\u5b57\u7b26\u6570\u91cf\u5c31\u662f\u7b54\u6848\u3002\n\n## \u77e5\u8bc6\u70b9\n\n+ \u5982\u679c\u5728\u533a\u95f4$[l,r]$\u533a\u95f4\u5185\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u5229\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u5339\u914d\u3002\n+ \u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u8bb8\u591a\u5b50\u4e32\u7684\u5b50\u4e32\u5408\u8d77\u6765\u7684\u4e0d\u540c\u5b50\u4e32\u6570\u91cf\u53ef\u4ee5\u7406\u89e3\u4e3a\u540e\u7f00\u6811\u4e0a\u7684\u524d\u9762\u4e00\u6bb5\u3002\n+ \u540e\u7f00\u6811\u4e0a\u7684\u5339\u914d\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long ll;\nconst int maxLen = 5e5 + 5, maxNode = maxLen << 1, inf = 1e8;\nint len, queNum, rt[maxNode], lim[maxLen], fa[maxNode], depth[maxNode];\nll ans;\nchar str1[maxLen], str2[maxLen];\nstruct SuffixTree {\n\tint tail, curLen, now, actLen, lastLeaf;\n\tint curStr[maxLen], ch[maxNode][27], start[maxNode], len[maxNode],\n\t    link[maxNode];\n\tSuffixTree () {\n\t\tlastLeaf = now = tail = 1;\n\t\tcurLen = actLen = 0;\n\t\tlen[0] = inf;\n\t}\n\tvoid Clear() {\n\t\tlastLeaf = now = 1;\n\t\twhile (curLen) {\n\t\t\tcurStr[curLen] = 0;\n\t\t\t--curLen;\n\t\t}\n\t\tcurLen = actLen = 0;\n\t\twhile (tail != 0) { //\u8fd9\u91cc\u5fc5\u987b\u662f tail != 0\uff01\uff01\uff01\u56e0\u4e3a 1\u53f7\u8282\u70b9\u4e5f\u8981\u6e05\u7a7a\uff01\uff01\uff01\n\t\t\tmemset(ch[tail], 0, sizeof(ch[tail]));\n\t\t\tstart[tail] = len[tail] = link[tail] = 0;\n\t\t\t--tail;\n\t\t}\n\t\ttail = 1;\n\t\tlen[0] = inf;\n\t}\n\tint NewNode(int st, int le) {\n\t\tlink[++tail] = 1;\n\t\tstart[tail] = st;\n\t\tlen[tail] = le;\n\t\treturn tail;\n\t}\n\tvoid Extend(int ins) {\n\t\tcurStr[++curLen] = ins;\n\t\t++actLen;\n\t\tfor (int last = 1; actLen; ) {\n\t\t\twhile (actLen > len[ch[now][curStr[curLen - actLen + 1]]])\n\t\t\t\tactLen -= len[now = ch[now][curStr[curLen - actLen + 1]]];\n\t\t\tint &son = ch[now][curStr[curLen - actLen + 1]],\n\t\t\t     val = curStr[start[son] + actLen - 1];\n\t\t\tif (!son || val == ins) {\n\t\t\t\tlink[last] = now;\n\t\t\t\tlast = now;\n\t\t\t\tif (!son) {\n\t\t\t\t\tson = NewNode(curLen - actLen + 1, inf);\n\t\t\t\t\tlink[lastLeaf] = son;\n\t\t\t\t\tlastLeaf = son;\n\t\t\t\t} else\n\t\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tint split = NewNode(start[son], actLen - 1);\n\t\t\t\tch[split][val] = son;\n\t\t\t\tch[split][ins] = NewNode(curLen, inf);\n\t\t\t\tlink[lastLeaf] = tail;\n\t\t\t\tlastLeaf = tail;\n\t\t\t\tstart[son] += actLen - 1;\n\t\t\t\tlen[son] -= actLen - 1;\n\t\t\t\tlink[last] = son = split;\n\t\t\t\tlast = split;\n\t\t\t}\n\t\t\tif (now == 1)\n\t\t\t\t--actLen;\n\t\t\telse\n\t\t\t\tnow = link[now];\n\t\t}\n\t}\n} sft, sft2;\nstruct SegmentTree {\n\tint tail, ch[maxNode << 6][2];\n\tvoid Create(int &now) {\n\t\tch[++tail][0] = ch[now][0];\n\t\tch[tail][1] = ch[now][1];\n\t\tnow = tail;\n\t}\n\tvoid Insert(int &now, int lEP, int rEP, int pos) {\n\t\tCreate(now);\n\t\tif (lEP == rEP)\n\t\t\treturn ;\n\t\tint mid = (lEP + rEP) >> 1;\n\t\tif (pos <= mid)\n\t\t\tInsert(ch[now][0], lEP, mid, pos);\n\t\telse\n\t\t\tInsert(ch[now][1], mid + 1, rEP, pos);\n\t}\n\tint Query(int now, int lEP, int rEP, int askL, int askR) {\n\t\tif (!now)\n\t\t\treturn 0;\n\t\tif (lEP > askR || rEP < askL)\n\t\t\treturn 0;\n\t\tif (askL <= lEP && rEP <= askR)\n\t\t\treturn 1;\n\t\tint mid = (lEP + rEP) >> 1;\n\t\treturn Query(ch[now][0], lEP, mid, askL, askR) | Query(ch[now][1], mid + 1, rEP,\n\t\t        askL, askR);\n\t}\n\tvoid Merge(int &uId, int vId) {\n\t\tif (!uId || !vId) {\n\t\t\tuId |= vId;\n\t\t\treturn ;\n\t\t}\n\t\tCreate(uId);\n\t\tMerge(ch[uId][0], ch[vId][0]);\n\t\tMerge(ch[uId][1], ch[vId][1]);\n\t}\n} seg;\nvoid dfs(int now, int dep, int from) {\n\tfa[now] = from;\n\tdep += min(sft.len[now], len - sft.start[now] + 1);\n\tdepth[now] = dep;\n\tbool isLeaf = 1;\n\tfor (int ch = 0; ch <= 26; ++ch)\n\t\tif (sft.ch[now][ch]) {\n\t\t\tisLeaf = 0;\n\t\t\tif (ch == 26 && now == 1)\n\t\t\t\tcontinue;\n\t\t\tdfs(sft.ch[now][ch], dep, now);\n\t\t\tseg.Merge(rt[now], rt[sft.ch[now][ch]]);\n\t\t}\n\tif (isLeaf)\n\t\tseg.Insert(rt[now], 1, len, len - dep + 1);\n}\nint dfs2(int now, int dep, int len2) {\n\tbool flag = 1;\n\tint orig = dep, length;\n\tdep += length = min(sft2.len[now], len2 - sft2.start[now] + 1);\n\tint big = 0;\n\tbool isLeaf = 1;\n\tfor (int ch = 0; ch <= 26; ++ch)\n\t\tif (sft2.ch[now][ch]) {\n\t\t\tflag = 0;\n\t\t\tisLeaf = 0;\n\t\t\tif (now == 1 && ch == 26)\n\t\t\t\tcontinue ;\n\t\t\tbig = max(dfs2(sft2.ch[now][ch], dep, len2), big);\n\t\t}\n\tif (isLeaf)\n\t\tbig = lim[len2 - dep + 1];\n\tans += length - max(0, min(big - orig, length));\n\treturn big;\n}\n\nint main() {\n\tfreopen(\"name.in\", \"r\", stdin);\n\tfreopen(\"name.out\", \"w\", stdout);\n\tscanf(\"%s\", str1 + 1);\n\tlen = strlen(str1 + 1);\n\tfor (int pos = 1; pos <= len; ++pos)\n\t\tsft.Extend(str1[pos] - 'a');\n\tsft.Extend(26);\n\tdfs(1, 0, 0);\n\tscanf(\"%d\", &queNum);\n\tfor (int qId = 1; qId <= queNum; ++qId) {\n\t\tint lEP, rEP, len2;\n\t\tscanf(\"%s%d%d\", str2 + 1, &lEP, &rEP);\n\t\tlen2 = strlen(str2 + 1);\n\t\tfor (int pos = 1; pos <= len2; ++pos)\n\t\t\tsft2.Extend(str2[pos] - 'a');\n\t\tsft2.Extend(26);\n\t\tint now = 1, pt = 0;\n\t\tfor (int pos = 1; pos <= len2; ++pos) {\n\t\t\tpt = max(pt, pos - 1);\n#define pei (pt - pos + 1)\n\t\t\twhile (pt < len2 && pei < rEP - lEP + 1 &&\n\t\t\t        ((pei + 1 > depth[now] && sft.ch[now][str2[pt + 1] - 'a']\n\t\t\t          && seg.Query(rt[sft.ch[now][str2[pt + 1] - 'a']], 1, len, lEP, rEP - pei)) ||\n\t\t\t         (pei + 1 <= depth[now]\n\t\t\t          && str1[sft.start[now] + pei - depth[fa[now]]] ==\n\t\t\t          str2[pt + 1] //\u7b2c\u4e00\u5757\u662f str1\u800c\u4e0d\u662f str2\n\t\t\t          && seg.Query(rt[now], 1, len, lEP, rEP - pei)))) {\n\t\t\t\tif (pei + 1 > depth[now])\n\t\t\t\t\tnow = sft.ch[now][str2[pt + 1] - 'a'];\n\t\t\t\t++pt;\n\t\t\t}\n\t\t\tlim[pos] = pt - pos + 1;\n\t\t\tif (sft.link[now]) //\u9996\u5148\u8d70\u5230\u6700\u957f\u771f\u540e\u7f00\u7684\u8282\u70b9\u4e0a\n\t\t\t\tnow = sft.link[now];\n\t\t\tif (pt == pos - 1)\n\t\t\t\tnow = 1;\n\t\t\twhile (fa[now] && depth[fa[now]] >= pei - 1) //\u7136\u540e\u5411\u4e0a\u8df3\uff0c\u8df3\u5230 len - 1\u7684\u4f4d\u7f6e\n\t\t\t\tnow = fa[now];\n\t\t}\n\t\tdfs2(1, 0, len2);\n\t\tprintf(\"%lld\\n\", ans);\n\t\tsft2.Clear();\n\t\tfor (int pos = 1; pos <= len2; ++pos)\n\t\t\tlim[pos] = 0;\n\t\tans = 0;\n\t}\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n```\n\n\u6ce8\u610f\uff1a\n\n+ \u5199\u5339\u914d\u7684\u65f6\u5019\u8fd8\u662f\u8001\u8001\u5b9e\u5b9e\u7684\u6309\u7167\u6700\u9ebb\u70e6\u7684\u65b9\u6cd5\u5199\u5427\u3002\u9996\u5148\u8bb0\u5f55\u4e00\u4e2a$now$\u8868\u793a\u5f53\u524d\u8fb9\u5230\u8fbe\u7684\u90a3\u4e2a\u70b9\uff0c\u6bcf\u6b21\u5339\u914d\u7684\u65f6\u5019\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n  + \u518d\u5339\u914d\u4e00\u4e2a\u8fb9\u5c31\u51fa\u8fd9\u4e2a\u8fb9\u4e86\n  + \u518d\u5339\u914d\u4e00\u4e2a\u6ca1\u6709\u51fa\u8fd9\u4e2a\u8fb9",
        "postTime": 1580463716,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "[NOI 2018]\u4f60\u7684\u540d\u5b57\uff08\u540e\u7f00\u6811+\u7ebf\u6bb5\u6811\u5408\u5e76\uff09"
    },
    {
        "content": "### Sol\n\n\u7b54\u6848\u76f8\u5f53\u4e8e $T$ \u4e2d\u4e0d\u88ab $S_{l\\cdots r}$ \u5305\u542b\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6570\u91cf\u3002\n\n\u6c42\u51fa $T$ \u4e2d\u88ab $S_{l\\cdots r}$ \u5305\u542b\u4e86\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6570\u91cf\uff0c\u7528 $T$ \u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6570\u91cf\u51cf\u53bb\u5b83\u5c31\u662f\u7b54\u6848\u3002\u540e\u8005\u5bb9\u6613\u6c42\uff0c\u6211\u4eec\u8003\u8651\u600e\u4e48\u6c42\u524d\u8005\u3002\n\n#### \u90e8\u5206\u5206\uff1a$l=1,r=|S|$\n\n\u5bf9 $T$ \u5efa\u51fa SAM \uff0c\u7136\u540e\u5bf9 SAM \u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u8003\u8651\u8fd9\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u5b50\u4e32\u96c6\u5408\u7684\u8d21\u732e\u3002\u8fd9\u4e2a\u96c6\u5408\u5f62\u5982\u201c $T$ \u7684\u67d0\u4e2a\u5b50\u4e32 $w$ \u7684\u6240\u6709\u957f\u5ea6\u4e0d\u5c0f\u4e8e $minlen$ \u7684\u540e\u7f00\u201d\u3002\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053 $w$ \u6700\u957f\u7684\u3001\u5728 $S$ \u4e2d\u51fa\u73b0\u8fc7\u7684\u540e\u7f00\u662f\u8c01\uff0c\u5c31\u80fd\u591f\u7edf\u8ba1\u8fd9\u4e2a\u96c6\u5408\u4e2d\u6709\u591a\u5c11\u4e2a\u4e32\u5728 $S$ \u4e2d\u51fa\u73b0\u8fc7\uff08\u957f\u5ea6\u66f4\u77ed\u7684\u90fd\u51fa\u73b0\u8fc7\uff0c\u957f\u5ea6\u66f4\u957f\u7684\u90fd\u6ca1\u6709\u51fa\u73b0\u8fc7\uff09\u3002\u66f4\u8fdb\u4e00\u6b65\u89c2\u5bdf\u53d1\u73b0\uff0c\u6211\u4eec\u5176\u5b9e\u53ea\u9700\u8981\u77e5\u9053\uff0c\u4ee5 $w$ \u7ed3\u5c3e\u7684\u90a3\u4e2a\u524d\u7f00\uff0c\u5b83\u7684\u6700\u957f\u7684\u3001\u5728 $S$ \u4e2d\u51fa\u73b0\u8fc7\u7684\u540e\u7f00\u662f\u8c01\uff0c\u5c31\u53ef\u4ee5\u4e86\uff08 $w$ \u7684\u6700\u957f\u7684\u5728 $S$ \u4e2d\u51fa\u73b0\u8fc7\u7684\u540e\u7f00\u957f\u5ea6\u5c31\u662f\u90a3\u4e2a\u540e\u7f00\u7684\u957f\u5ea6\u548c $|w|$ \u7684\u8f83\u5c0f\u503c\uff09\u3002\n\n\u8fd9\u662f\u4e2a\u7ecf\u5178\u7684\u540e\u7f00\u81ea\u52a8\u673a\u95ee\u9898\u3002\u5bf9 $S$ \u5efa\u51fa SAM \uff0c\u7136\u540e\u8ba9 $T$ \u5728 $S$ \u4e0a\u9762\u8dd1\u5339\u914d\u5c31\u53ef\u4ee5\u4e86\u3002\u5177\u4f53\u5730\uff0c\u7ef4\u62a4\u4e00\u4e2a `u` \u8868\u793a\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c`len` \u8868\u793a\u5f53\u524d\u5339\u914d\u4e0a\u4e86\u7684\u957f\u5ea6\u3002\u6bcf\u6b21\u4ece `u` \u8d70\u5411 `ch[u][T[i]]` \u7684\u65f6\u5019\uff0c\u5c31\u628a\u53d8\u6210 `len+1`\uff1b\u5982\u679c\u8f6c\u79fb\u4e0d\u5b58\u5728\uff0c\u5c31\u4ece `u` \u8df3\u5230 `fail[u]` \uff0c `len` \u53d8\u6210\u73b0\u5728\u7684 `u` \u4e2d\u6700\u957f\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002\u590d\u6742\u5ea6\u5206\u6790\uff1a\u4e00\u6b21\u8df3 `fail` \u4f1a\u8ba9\u5339\u914d\u957f\u5ea6\u81f3\u5c11\u51cf\u5c11 1 \uff0c\u800c\u4e00\u6b21 `u -> ch[u][T[i]]` \u5219\u4f1a\u8ba9\u5339\u914d\u957f\u5ea6 + 1 \uff0c\u5339\u914d\u957f\u5ea6\u603b\u662f\u975e\u8d1f\u5e76\u4e14\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u5339\u914d\u7684\u957f\u5ea6\u53ea\u4f1a\u589e\u52a0 $|T|$ \u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f $O(|T|)$ \u7684\u3002\n\n#### $l,r$ \u4efb\u610f\n\n\u8003\u8651\u5bf9\u524d\u9762\u5728 SAM \u7684\u5339\u914d\u505a\u4e00\u4e9b\u4fee\u6539\uff1a\u6211\u4eec\u79f0\u4e00\u4e2a\u8282\u70b9\u201c\u5b58\u5728\u201d\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u6240\u4ee3\u8868\u7684\u5b50\u4e32\u96c6\u5408\u4e2d\uff0c\u6700\u77ed\u7684\u90a3\u4e2a\u4e32\u5728 $S_{l\\cdots r}$ \u4e2d\u51fa\u73b0\u8fc7\u3002\u90a3\u4e48\u5339\u914d\u8fc7\u7a0b\u4e2d\u6211\u4eec\u76f8\u5f53\u4e8e\u9700\u8981\u652f\u6301\uff1a\n\n- \u67e5\u8be2\u4e00\u4e2a\u70b9\u662f\u5426\u5b58\u5728\n- \u67e5\u8be2\u4e00\u4e2a\u70b9\u6240\u4ee3\u8868\u7684\u5b50\u4e32\u96c6\u5408\u4e2d\uff0c\u5728 $S_{l\\cdots r}$ \u4e2d\u51fa\u73b0\u8fc7\u7684\u3001\u6700\u957f\u7684\u4e32\n\n\u7b2c\u4e00\u95ee\uff1a\u8bbe\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u4e32\u96c6\u5408\u4e2d\u6700\u77ed\u7684\u4e32\u957f\u5ea6\u662f $minlen$ \u3002\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 endpos \u96c6\u5408\uff0c\u67e5\u8be2 $[l+minlen-1, r]$ \u8fd9\u4e2a\u533a\u95f4\u5185\u662f\u5426\u6709\u8fd9\u4e2a\u8282\u70b9\u7684 endpos \u5373\u53ef\u3002\n\n\u7b2c\u4e8c\u95ee\uff1a\u627e\u51fa $[l+minlen-1, r]$ \u4e2d\u6700\u9760\u53f3\u7684\u90a3\u4e2a endpos \uff0c\u5b83\u5230 $l$ \u7684\u8ddd\u79bb\u548c\u8fd9\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u6700\u957f\u5b50\u4e32\u957f\u5ea6\u7684\u8f83\u5c0f\u503c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\u3002\n\n#### \u9644\uff1a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\n\n\u53ef\u80fd\u6709\u9505\uff0c\u6b22\u8fce\u6307\u6b63\u3002\n\n\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a\n\n1. \u5c06 $n$ \u4e2a\u8282\u70b9\u63d2\u8fdb $n$ \u68f5\u4e0d\u540c\u7684\u6811\u3002\n2. \u5408\u5e76\u4e24\u68f5\u6811\uff0c\u5e76\u590d\u5236\u4e24\u68f5\u6811\u7684\u516c\u5171\u90e8\u5206\uff0c\u5f97\u5230\u4e00\u68f5\u65b0\u7684\u6811\u3002\n\n\u7b2c\u4e00\u90e8\u5206\u4f1a\u7528\u5230\u81f3\u591a $n\\lceil\\log_2 n\\rceil$ \u4e2a\u8282\u70b9\u3002\n\n\u7b2c\u4e8c\u90e8\u5206\u4e2d\uff0c\u8003\u8651\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\uff1a\u6bcf\u4e00\u6b21\u590d\u5236\u5b83\uff0c\u5b83\u5b50\u6811\u5185\u7684\u53f6\u5b50\u8282\u70b9\u6570\u91cf\u4e00\u5b9a\u53d8\u591a\u4e86\uff0c\u6240\u4ee5\u5b83\u88ab\u590d\u5236\u7684\u6b21\u6570\u81f3\u591a\u662f\u5b83\u5b50\u6811\u5185\u7684\u53f6\u5b50\u8282\u70b9\u6570\u91cf\u3002\u6bcf\u4e2a\u53f6\u5b50\u81f3\u591a\u5728 $\\lceil \\log_2 n\\rceil$ \u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u6240\u4ee5\u590d\u5236\u8282\u70b9\u7684\u6b21\u6570\u81f3\u591a\u662f $n\\lceil\\log_2 n\\rceil$ \u6b21\u3002\n\n### Code\n\n[link](https://loj.ac/submission/756501)",
        "postTime": 1583068232,
        "uid": 40534,
        "name": "zhongyuwei",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "\u53ef\u80fd\u662f\u4e00\u4e2a\u4e71\u641e\u505a\u6cd5\uff0c\u540c\u65f6\u4e5f\u8dea\u6c42\u6709\u4eba\u80fd\u5e2e\u6211\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\n\n\u8fd8\u662f\u5148\u6765\u770b\u6bd4\u8f83\u7b80\u5355\u7684$68pts$\uff0c\u4e5f\u5c31\u662f$l=1,r=|S|$\u7684\u60c5\u51b5\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a$S$\u4e32\u548c\u6240\u6709\u7684$T$\u4e32\u4e00\u8d77\u5efa\u4e00\u4e2a\u5e7f\u4e49$SAM$\uff0c\u7528\u4e00\u4e2a$vector$\u7ef4\u62a4\u6bcf\u4e2a$T$\u52a0\u5165$SAM$\u65f6\u65b0\u4ea7\u751f\u7684\u8282\u70b9\n\n\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6765\u8fd9\u4e9b\u65b0\u589e\u8282\u70b9\u6ca1\u6709\u5728$S$\u4e32\u51fa\u73b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\u5c31\u597d\u4e86\n\n\u6211\u4eec\u63d0\u524d\u5904\u7406\u597d\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684$endpos$\uff0c\u6807\u8bb0\u4e00\u4e0b\u5176\u662f\u5426\u5728$S$\u4e2d\u51fa\u73b0\u8fc7\n\n\u5bf9\u4e8e\u90a3\u4e9b\u65b0\u51fa\u73b0\u5728$SAM$\u4e0a\u7684\u8282\u70b9$x$\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u4e00\u4e0b\u5176\u662f\u5426\u5728$S$\u4e2d\u51fa\u73b0\u8fc7\uff0c\u7ecf\u5178\u64cd\u4f5c\u81ea\u7136\u662f$ans+=len[x]-len[fa[x]]$\n\n\u4f46\u662f\u8003\u8651\u5230$x$\u5728$parent$\u6811\u4e0a\u7684\u7956\u5148\u81ea\u7136\u4e5f\u5728\u5f53\u524d\u7684$T$\u4e2d\u51fa\u73b0\u8fc7\uff0c\u4e8e\u662f\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u8fd9\u4e9b\u8282\u70b9\u7684\u8d21\u732e\n\n\u500d\u589e\uff1f\u770b\u8d77\u6765\u597d\u50cf\u975e\u5e38\u53ef\u884c\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5224\u91cd\n\n\u663e\u7136\u5728\u5904\u7406\u4e00\u4e2a$T$\u7684\u65f6\u5019$parent$\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\u4e0d\u80fd\u88ab\u8ba1\u7b97\u4e24\u6b21\uff0c\u4e8e\u662f\u5728$parent$\u6811\u4e0a\u500d\u589e\u53c8\u4e0d\u592a\u53ef\u884c\u4e86\uff0c\u56e0\u4e3a\u4e0d\u592a\u65b9\u4fbf\u6211\u4eec\u6253\u6807\u8bb0\u6765\u5224\u91cd\n\n\u500d\u589e\u4e0d\u884c\u6211\u4eec\u5c31\u66b4\u529b\u554a\uff0c\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u8bbf\u95ee$x$\u7684\u7956\u5148\u4eec\uff0c\u4e00\u65e6\u6709\u4e00\u4e2a\u7956\u5148\u5728\u4e4b\u524d\u88ab\u8bbf\u95ee\u8fc7\u6216\u8005\u662f\u5728$S$\u4e2d\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u5728\u5f80\u4e0a\u8df3\u4e86\n\n\u81f3\u4e8e\u590d\u6742\u5ea6\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\uff0c\u6211\u751a\u81f3\u90fd\u89c9\u5f97\u8fd9\u4e2a\u6837\u5b50\u6700\u574f\u4f1a\u5bfc\u81f4\u6bcf\u6b21\u90fd\u628a$parent$\u6811\u904d\u5386\u4e00\u904d\uff0c\u6240\u4ee5\u6c42\u6709\u795e\u4ed9\u80fd\u5e2e\u5fd9\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u7384\u5b66\u7684\u590d\u6742\u5ea6\n\n$68pts$\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#define maxn 3000005\n#define re register\n#define LL long long\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\nchar S[maxn],T[maxn];\nint n,m,l,r,cnt=1,lst=1,num;\nstruct E{int v,nxt;}e[maxn];\nstd::vector<int> v[100005];\nint fa[maxn],len[maxn],endpos[maxn],son[maxn][26],head[maxn],vis[maxn];\nint top,st[maxn];\ninline void add(int x,int y) {e[++num].v=y;e[num].nxt=head[x];head[x]=num;}\ninline void ins(int c,int o)\n{\n    int p=++cnt,f=lst; lst=p;\n    len[p]=len[f]+1,endpos[p]=o;\n    if(o>1) v[o-1].push_back(p);\n    while(f&&!son[f][c]) son[f][c]=p,f=fa[f];\n    if(!f) {fa[p]=1;return;}\n    int x=son[f][c];\n    if(len[f]+1==len[x]) {fa[p]=x;return;}\n    int y=++cnt;\n    if(o>1) v[o-1].push_back(y);\n    len[y]=len[f]+1,fa[y]=fa[x],fa[x]=fa[p]=y;\n    for(re int i=0;i<26;i++) son[y][i]=son[x][i];\n    while(f&&son[f][c]==x) son[f][c]=y,f=fa[f];\n}\nvoid dfs(int x) {if(endpos[x]!=1) endpos[x]=0; for(re int i=head[x];i;i=e[i].nxt) dfs(e[i].v),endpos[x]|=endpos[e[i].v];}\nint main()\n{\n    scanf(\"%s\",S+1);n=strlen(S+1);\n    for(re int i=1;i<=n;i++) ins(S[i]-'a',1);\n    scanf(\"%d\",&m);\n    for(re int i=1;i<=m;i++)\n    {\n        scanf(\"%s\",T+1),n=strlen(T+1);\n        scanf(\"%d%d\",&l,&r);\n        lst=1;\n        for(re int j=1;j<=n;j++) \n            ins(T[j]-'a',i+1);\n    }\n    for(re int i=2;i<=cnt;i++) add(fa[i],i); dfs(1);\n    for(re int i=1;i<=m;i++)\n    {\n        LL ans=0;top=0;\n        for(re int j=0;j<v[i].size();j++)\n        {\n            int t=v[i][j];\n            if(endpos[t]||vis[t]) continue;\n            ans+=len[t];st[++top]=t;vis[t]=1;\n            while(!vis[fa[t]]&&fa[t]&&!endpos[fa[t]]) t=fa[t],vis[t]=1,st[++top]=t;\n            ans-=len[fa[t]];\n        }\n        for(re int j=1;j<=top;j++) vis[st[j]]=0;\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n\n\u518d\u6765\u770b\u770b\u5269\u4e0b\u7684\u975e\u7279\u6b8a\u60c5\u51b5\n\n\u770b\u5230$S$\u4e32\u91cc\u7684\u533a\u95f4\u6211\u4eec\u5c31\u77e5\u9053\u6211\u4eec\u4e0d\u80fd\u53ea\u662f\u7c97\u7565\u7ef4\u62a4$endpos$\u96c6\u5408\u4e86\uff0c\u6211\u4eec\u6709\u65f6\u5019\u751a\u81f3\u5f97\u5173\u5fc3$endpos$\u91cc\u5230\u5e95\u6709\u54ea\u4e9b\u5143\u7d20\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u7528\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u4e00\u4e0b$endpos$\u96c6\u5408\n\n\u8fd9\u91cc\u9009\u62e9\u7684\u662f\u4e3b\u5e2d\u6811\uff0c\u81f3\u4e8e\u505a\u6cd5\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\n\n\u6211\u4eec\u8fd8\u662f\u5bf9$SAM$\u4e0a\u65b0\u589e\u7684\u8282\u70b9\u4ee5\u53ca\u5176\u7956\u5148\u7b97\u8d21\u732e\uff0c\u6bcf\u6b21\u7528\u4e3b\u5e2d\u6811\u627e\u51fa\u5f53\u524d\u8282\u70b9$x$\u7684$endpos$\u96c6\u5408\u91cc\u5c0f\u4e8e\u7b49\u4e8e$r$\u7684\u6700\u5927\u503c$now$\n\n\u6839\u636e$now$\u548c$l$\u7684\u5173\u7cfb\u8fdb\u884c\u8ba8\u8bba\n\n1. \u5982\u679c$now-len[fa[x]]>=l$\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u5b50\u4e32\u91cc\u5df2\u7ecf\u6709\u4e00\u4e9b\u5b8c\u5168\u51fa\u73b0\u5728\u4e86$[l,r]$\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5f80\u4e0a\u8fdb\u884c\u4e86\uff0c\u5728\u8fd9\u91cc\u8ba1\u7b97\u8d21\u732e\u5c31\u597d\u4e86\uff0c\u51cf\u6389\u90a3\u4e9b\u5b8c\u5168\u51fa\u73b0\u5728$[l,r]$\u91cc\u7684\u5b50\u4e32\uff0c\u4e5f\u5c31\u662f$now-l+1$\uff0c\u4f46\u662f\u53ef\u80fd\u8fd9\u4e2a\u8282\u70b9\u6839\u672c\u4ea7\u751f\u4e0d\u4e86\u8fd9\u4e9b\u5b50\u4e32\uff0c\u4e8e\u662f\u9700\u8981\u548c$len[x]$\u53d6\u4e00\u4e2a$min$\n\n1. \u5426\u5219\u7684\u8bdd\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u5b50\u4e32\u91cc\u6ca1\u6709\u4e00\u4e2a\u5b8c\u5168\u51fa\u73b0\u5728$[l,r]$\u4e2d\uff0c\u6240\u4ee5\u8fd8\u8981\u7ee7\u7eed\u7b97\u4e0b\u53bb\n\n\u4f46\u662f\u8fd9\u6837\u6bcf\u6b21\u90fd\u9700\u8981\u5728\u4e3b\u5e2d\u6811\u91cc\u4e8c\u5206\uff0c\u53ef\u4ee5\u52a0\u4e00\u4e2a\u5c0f\u4f18\u5316\uff0c\u4e00\u65e6$endpos$\u96c6\u5408\u7684\u6700\u5927\u503c\u5c0f\u4e8e$l$\uff0c\u6216\u8005\u6700\u5c0f\u503c\u5927\u4e8e$r$\uff0c\u6211\u4eec\u5c31\u4e0d\u5728\u4e3b\u5e2d\u6811\u91cc\u4e8c\u5206\u4e86\n\n\u8fd9\u91cc\u7684\u590d\u6742\u5ea6\u548c\u4e0a\u9762\u76f8\u6bd4\u591a\u4e86\u4e00\u4e2a$log$\uff0c\u4e8e\u662f\u66f4\u52a0\u7384\u5b66\u4e86\uff0c\u5e76\u4e0d\u4fdd\u8bc1\u4ee3\u7801\u80fd\u968f\u65f6\u4e0dT\n\n\u4ea4\u4e0a\u53bb\u80fd\u83b7\u5f97\u53d6\u51b3\u4e8e\u8bc4\u6d4b\u673a\u7a33\u5b9a\u7a0b\u5ea6\u7684\u5206\u6570\u7684\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#define maxn 3000005\n#define M 10000005\n#define re register\n#define LL long long\ninline int min(int a,int b) {return (a<b)?a:b;}\ninline int max(int a,int b) {return (a>b)?a:b;}\nchar S[500005],T[500005];\nint n,m,cnt=1,lst=1,num,U,__,tot;\nstruct E{int v,nxt;}e[maxn];\nstd::vector<int> a[100005];\nint x[100005],y[100005];\nint fa[maxn],len[maxn],endpos[maxn],son[maxn][26],head[maxn];\nint rt[maxn],sz[maxn],to[maxn],_to[maxn],mx[maxn],tx[maxn];\nunsigned short vis[maxn];\nint top,st[500005];\nint l[M],r[M],d[M];\ninline void add(int x,int y) {e[++num].v=y;e[num].nxt=head[x];head[x]=num;}\ninline void ins(int c,int pos,int o)\n{\n\tint p=++cnt,f=lst; lst=p;\n\tlen[p]=len[f]+1,endpos[p]=tx[p]=mx[p]=pos;\n\tif(o) a[o].push_back(p);\n\twhile(f&&!son[f][c]) son[f][c]=p,f=fa[f];\n\tif(!f) {fa[p]=1;return;}\n\tint x=son[f][c];\n\tif(len[f]+1==len[x]) {fa[p]=x;return;}\n\tint y=++cnt;\n\tlen[y]=len[f]+1,fa[y]=fa[x],fa[x]=fa[p]=y;\n\tfor(re int i=0;i<26;i++) son[y][i]=son[x][i];\n\twhile(f&&son[f][c]==x) son[f][c]=y,f=fa[f];\n}\nvoid dfs(int x)\n{\n\tto[x]=++__;_to[__]=x;sz[x]=1;\n\tif(!tx[x]) tx[x]=U+1;\n\tfor(re int i=head[x];i;i=e[i].nxt) \n\t{\n\t\tint v=e[i].v;\n\t\tdfs(v),sz[x]+=sz[v];\n\t\tmx[x]=max(mx[v],mx[x]);\n\t\ttx[x]=min(tx[x],tx[v]);\n\t}\n}\nint change(int pre,int x,int y,int pos)\n{\n\tint root=++tot;\n\td[root]=d[pre]+1;\n\tif(x==y) return root;\n\tl[root]=l[pre],r[root]=r[pre];\n\tint mid=x+y>>1;\n\tif(pos<=mid) l[root]=change(l[pre],x,mid,pos);\n\t\telse r[root]=change(r[pre],mid+1,y,pos);\n\treturn root;\n}\nint query(int p1,int p2,int x,int y,int pos)\n{\n\tif(x==y) return d[p2]-d[p1];\n\tint mid=x+y>>1;\n\tif(pos<=mid) return query(l[p1],l[p2],x,mid,pos);\n\treturn d[l[p2]]-d[l[p1]]+query(r[p1],r[p2],mid+1,y,pos);\n}\nint ask(int p1,int p2,int x,int y,int k)\n{\n\tif(x==y) return x;\n\tint now=d[l[p2]]-d[l[p1]];\n\tint mid=x+y>>1;\n\tif(k>now) return ask(r[p1],r[p2],mid+1,y,k-now);\n\treturn ask(l[p1],l[p2],x,mid,k);\n}\ninline int find(int X,int o) \n{\n\tif(y[o]<tx[X]||x[o]>mx[X]) return -1;\n\tint Y=to[X]+sz[X]-1;\n\tX=to[X];\n\tint T=query(rt[X-1],rt[Y],1,U,y[o]);\n\tif(!T) return -1;return ask(rt[X-1],rt[Y],1,U,T);\n}\nint main()\n{\n\tscanf(\"%s\",S+1);n=strlen(S+1);U=n;\n\tfor(re int i=1;i<=n;i++) ins(S[i]-'a',i,0);\n\tscanf(\"%d\",&m);\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%s\",T+1),n=strlen(T+1);\n\t\tscanf(\"%d%d\",&x[i],&y[i]);lst=1;\n\t\tfor(re int j=1;j<=n;j++) ins(T[j]-'a',0,i);\n\t}\n\tfor(re int i=2;i<=cnt;i++) add(fa[i],i); dfs(1);\n\tfor(re int i=1;i<=cnt;i++)\n\t\tif(endpos[_to[i]]) rt[i]=change(rt[i-1],1,U,endpos[_to[i]]);else rt[i]=rt[i-1];\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tLL ans=0;top=0;int now=0;\n\t\tfor(re int j=0;j<a[i].size();j++)\n\t\t{\n\t\t\tint t=a[i][j];\n\t\t\tif(vis[t]) continue;\n\t\t\tvis[t]=1,st[++top]=t;ans+=len[t];\n\t\t\tnow=find(t,i);\n\t\t\tif(now!=-1&&now-len[fa[t]]>=x[i]) \n\t\t\t{ans-=min(len[t],now-x[i]+1);continue;}\n\t\t\twhile(1) \n\t\t\t{\n\t\t\t\tif(vis[fa[t]]||!fa[t]) {ans-=len[fa[t]];break;}\n\t\t\t\tt=fa[t],vis[t]=1,st[++top]=t;\n\t\t\t\tnow=find(t,i);\n\t\t\t\tif(now!=-1&&now-len[fa[t]]>=x[i]) {ans-=min(now-x[i]+1,len[t]);break;}\n\t\t\t}\n\t\t}\n\t\tfor(re int j=1;j<=top;j++) vis[st[j]]=0;\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1547727812,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "\u6700\u8fd1\u4e00\u76f4\u5728\u5b66\u540e\u7f00\u81ea\u52a8\u673a\u3002\u3002\u3002\u3002\n\n\u611f\u89c9\u8fd9\u9053\u9898\u5f88\u4e0d\u9519\u3002\u3002\u3002\u3002\u7136\u540e\u53d1\u73b0\u4e0d\u4f1a\u505a~~\uff08\u6342\u8138\uff09~~\n\n\u611f\u89c9\u8fd9\u4e2a\u53bb\u91cd\u7684\u65b9\u6cd5\u975e\u5e38\u7684\u5389\u5bb3\n\n\u6240\u4ee5\u6765\u5199\u4e00\u7bc7\u9898\u89e3\uff0c\u6210\u4e3a\u6211\u540e\u7f00\u81ea\u52a8\u673a\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\n\nPart1 \n\n\u9996\u5148\u8003\u8651l=1\uff0c\u5e76\u4e14r=n\u7684\u600e\u4e48\u505a\uff08\u4e0d\u8003\u8651\u53bb\u91cd\uff09\n\n\u5c31\u662f\u5bf9S\u5efa\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u8ba9T\u5bf9\u4ed6\u8dd1\u5339\u914d\n\n\u5982\u679c\u6709\u5b57\u7b26\u76f4\u63a5\u8df3\uff0c\u5e76\u8ba9l++\uff1b\u6ca1\u6709\u7684\u8bdd\u8df3parent\uff0c\u5e76\u8ba9l=maxlen\uff08l\uff09\uff0c\u5982\u679c\u4e3a0\u5c31\u91cd\u65b0\u5f00\u59cb\n\n\u8fd9\u4e2a\u53ef\u4ee5l\u8868\u793a\u5bf9\u4e8eT\u4e2d\u6bcf\u4e00\u4e2a\u524d\u7f001...i\u7684\u53ef\u4ee5\u5339\u914d\u5230\u7684\u6700\u957f\u540e\u7f00\u957f\u5ea6\n\n\u90a3\u4e48\u7528sigma\uff08i-l\uff09 \u5c31\u662f\u7b54\u6848\uff08\u5f53\u7136\u6ca1\u6709\u8003\u8651\u53bb\u91cd\uff09\n\nPart2\n\n\u8003\u8651\u5982\u679cl\uff0cr\u4efb\u610f\u7684\u8bdd\u600e\u4e48\u505a\u3002\u8fd9\u6b21\u5c31\u6ca1\u6709\u65b9\u6cd5\u76f4\u63a5\u8f6c\u79fb\u4e86\uff0c\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u4f60\u7684\u8fd9\u4e2a\u8282\u70b9\u6240\u8868\u793a\u51fa\u7684\u4e32\u662f\u4e0d\u662f\u5728l-r\u7684\u8303\u56f4\u5185\n\n\u90a3\u4e48\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709endpos\u7684\u503c\n\n\u5728\u8df3\u7684\u65f6\u5019\u5c31\u662f\u770b\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u7684\u5185\u4e2a\u5b57\u7b26\u7684endpos\u96c6\u5408\u662f\u4e0d\u662f\u6709\u5728\uff08L+l\uff0cR\uff09\u8fd9\u4e2a\u533a\u95f4\u5185\u90e8\u7684\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u8f6c\u79fb\n\n\u4f46\u662f\u5931\u914d\u4e86\u600e\u4e48\u529e\u3002\u3002\u3002\u90a3\u5c31\u8ba9l--\uff0c\u542b\u4e49\u5c31\u76f8\u5f53\u4e0e\u662f\u5728\u5df2\u7ecf\u5339\u914d\u597d\u7684\u540e\u7f00\u5220\u9664\u7b2c1\u4e2a\u5b57\u7b26\uff08\u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5\u8df3\u5230parent\u4e0a\uff0c\u56e0\u4e3a\u53ef\u80fd\u5220\u9664\u4e00\u4e2a\u5b57\u7b26endpos\u5c31\u53ef\u4ee5\u6ee1\u8db3\u4e86\uff09\uff0c\u5982\u679c\u5220\u9664\u5230\u548c\u4ed6\uff08parent\u7684len==l\uff09 \u7684\u8bdd\u5c31\u5f97\u8df3parent\u4e86\u3002\n\nPart3 \n\n\u53bb\u91cd\u3002\u3002\u3002\u3002\u8003\u8651\u5bf9T\u5efa\u81ea\u52a8\u673a\n\n\u5bf9\u90a3\u4e48\u6839\u636e\u672c\u8d28\u4e0d\u540c\u5b57\u4e32\u505a\u6cd5\u5c31\u662flen\uff08i\uff09-len\uff08fa\uff09\n\n\u4f46\u662f\u8981\u51cf\u53bb\u76f8\u540c\u7684\n\n\u5c31\u662flen\uff08i\uff09-\uff08max\uff08len\uff08fa\uff09\uff0c\u548c\u53ef\u4ee5\u4e0eS\u5339\u914d\u7684\u6700\u5927\u503c\uff09\uff09\u7684\u548c\n\n\u90a3\u4e48\u6211\u4eec\u628a\u521a\u521a\u7684\u5185\u4e2al\u653e\u5230\u8282\u70b9\u4e0a\u6211\u4eec\u663e\u7136\u4e0d\u53ef\u4ee5\u628a\u5b83\u653e\u5230\u524d\u7f00\u4e0a\u66b4\u529b\u8df3parent\uff08\u4f46\u662f\u636e\u8bf4\u590d\u6742\u5ea6\u4e5f\u662f\u5bf9\u7684\uff09\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5728\u5efa\u81ea\u52a8\u673a\u7684\u65f6\u5019\u9664\u4e86\u5206\u88c2\u51fa\u7684\u8282\u70b9\u90fd\u662f\u524d\u7f00\u3002\u3002\u3002\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u5206\u88c2\u51fa\u6765\u7684\u8282\u70b9\n\n\u6211\u4eec\u77e5\u9053\u5206\u88c2\u51fa\u6765\u7684\u8282\u70b9nq\u662fnp\u548cq\u7684parent\uff0c\u4e5f\u5c31\u662f\u4ed6\u4eec\u7684\u540e\u7f00\n\n\u6211\u4eec\u8003\u8651\u7528\u8c01\u6765\u7ee7\u627f\u53d1\u73b0\u90fd\u53ef\u4ee5\uff01\uff01\uff01\u56e0\u4e3anq\u88abq\u548cnp\u5b8c\u5168\u5305\u6db5\n\n\u6240\u4ee5\u76f4\u63a5\u7528q\u7684\u548cnp\u7684\u4efb\u610f\u4e00\u4e2a\u6765\u7ed9nq\u5c31\u53ef\u4ee5\u4e86\uff08\u4e0d\u61c2\u7684\u8981\u597d\u597d\u601d\u8003\u8fd9\u4e00\u6b65\uff09\n\n\u597d\u4e86\uff0c\u5c31\u8fd9\u4e9b\uff0c\u8fd9\u9898\u5c31\u89e3\u51b3\u4e86\u3002\u3002\u3002\uff08\u5982\u679c\u6709\u9519\u8bef\u8bf7\u6307\u51fa\uff0c\u8c22\u8c22\uff09\n\n\u4ee3\u7801\uff0c\u5b8c\u7ed3\u6492\u82b1\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,f=1;\n\tchar p=getchar();\n\twhile(!isdigit(p)){\n\t\tif(p=='-') f=-1;\n\t\tp=getchar();\n\t}\n\twhile(isdigit(p)) x=(x<<3)+(x<<1)+(p^48),p=getchar();\n\treturn x*f;\n}\n\nconst int maxn=1e6+5;\n\n#define mid ((l+r)>>1)\n\nint node_cnt,ls[maxn<<5],rs[maxn<<5],n,m;\nint siz[maxn<<5],root[maxn],A[maxn],mx[maxn];\nchar s[maxn],T[maxn];\n\nstruct xx{\n\tint las=1,tot=1,t[maxn];\n\tstruct node{\n\t\tint len,fa,ch[26];\n\t}dian[maxn];\n\tinline void modify(int c){\n\t\tint p=las,np=las=++tot;dian[np].len=dian[p].len+1;\n\t\tfor(;p&&!dian[p].ch[c];p=dian[p].fa) dian[p].ch[c]=np;\n\t\tif(!p) dian[np].fa=1;\n\t\telse{\n\t\t\tint q=dian[p].ch[c];\n\t\t\tif(dian[q].len==dian[p].len+1) dian[np].fa=q;\n\t\t\telse{\n\t\t\t\tint nq=++tot;dian[nq]=dian[q];dian[nq].len=dian[p].len+1;\n\t\t\t\tdian[q].fa=dian[np].fa=nq;\n\t\t\t\tfor(;p&&dian[p].ch[c]==q;p=dian[p].fa) dian[p].ch[c]=nq;\n\t\t\t}\n\t\t}\n\t}\n\tinline void Qsort(){\n\t\tfor(int i=1;i<=tot;i++) t[dian[i].len]++;\n\t\tfor(int i=1;i<=n;i++) t[i]+=t[i-1];\n\t\tfor(int i=tot;i>=1;i--) A[t[dian[i].len]--]=i;\n\t}\n}SA1;\n\nstruct xxx{\n\tint las=1,tot=1,tag[maxn<<1];\n\tstruct node{\n\t\tint len,fa,ch[26];\n\t}dian[maxn<<1];\n\tinline void clear(){\n\t\tfor(int i=1;i<=tot;i++){\n\t\t\tdian[i].len=dian[i].fa=0;\n\t\t\tfor(int j=0;j<26;j++) dian[i].ch[j]=0;\n\t\t\ttag[i]=0;\n\t\t}\n\t\tlas=tot=1;\n\t}\n\tinline void modify(int c,int id){\n\t\tint p=las,np=las=++tot;dian[np].len=dian[p].len+1;tag[np]=id;\n\t\tfor(;p&&!dian[p].ch[c];p=dian[p].fa) dian[p].ch[c]=np;\n\t\tif(!p) dian[np].fa=1;\n\t\telse{\n\t\t\tint q=dian[p].ch[c];\n\t\t\tif(dian[q].len==dian[p].len+1) dian[np].fa=q;\n\t\t\telse{\n\t\t\t\tint nq=++tot;dian[nq]=dian[q];dian[nq].len=dian[p].len+1;tag[nq]=tag[np];\n\t\t\t\tdian[q].fa=dian[np].fa=nq;\n                //\u5f53\u7136\u7528tag[nq]=tag[q]\u4e5f\u5bf9\u554a\n\t\t\t\tfor(;p&&dian[p].ch[c]==q;p=dian[p].fa) dian[p].ch[c]=nq;\n\t\t\t}\n\t\t}\n\t}\n}SA2;\n\ninline void insert(int &x,int l,int r,int pos){\n\tif(!x) x=++node_cnt;siz[x]++;\n\tif(l==r) return;\n\tif(pos<=mid) insert(ls[x],l,mid,pos);\n\telse insert(rs[x],mid+1,r,pos);\n}\n\ninline int merge(int x,int y){\n\tif(!x||!y) return x+y;\n\tint z=++node_cnt;siz[z]=siz[x]+siz[y];\n\tls[z]=merge(ls[x],ls[y]);\n\trs[z]=merge(rs[x],rs[y]);\n\treturn z;\n}\n\ninline int query(int x,int l,int r,int L,int R){\n\tif(L<=l&&r<=R) return siz[x];\n\tint ans=0;\n\tif(L<=mid) ans+=query(ls[x],l,mid,L,R);\n\tif(R>mid) ans+=query(rs[x],mid+1,r,L,R);\n\treturn ans;\n}\n\nint main(){\n\tscanf(\"%s\",s+1);n=strlen(s+1);\n\tfor(int i=1;i<=n;i++) SA1.modify(s[i]-'a'),insert(root[SA1.las],1,n,i);\n\tSA1.Qsort();\n\tfor(int i=SA1.tot;i>=1;i--) root[(SA1.dian[A[i]].fa)]=merge(root[(SA1.dian[A[i]].fa)],root[A[i]]);\n\tint tim=read();\n\twhile(tim--){\n\t\tSA2.clear();scanf(\"%s\",T+1);m=strlen(T+1);\n\t\tfor(int i=1;i<=m;i++) SA2.modify(T[i]-'a',i);\n\t\tfor(int i=1;i<=SA2.tot;i++) mx[i]=0;\n\t\tint cur=1,l=0;long long ans=0;\n\t\tint L=read(),R=read();\n\t\tfor(int i=1;i<=m;i++){\n\t\t\twhile(1){\n\t\t\t\tif((SA1.dian[cur].ch[T[i]-'a'])&&(query(root[SA1.dian[cur].ch[T[i]-'a']],1,n,L+l,R))){\n\t\t\t\t\tcur=SA1.dian[cur].ch[T[i]-'a'];l++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(l==0) break;\n\t\t\t\tl--;\n\t\t\t\tif(l==SA1.dian[SA1.dian[cur].fa].len) cur=SA1.dian[cur].fa;\n\t\t\t}\n\t\t\tmx[i]=l;\n\t\t}\n\t\tfor(int i=2;i<=SA2.tot;i++){\n\t\t\tans+=max(0,SA2.dian[i].len-max(SA2.dian[SA2.dian[i].fa].len,mx[SA2.tag[i]]));\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1578024839,
        "uid": 118918,
        "name": "whyl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    },
    {
        "content": "\u9898\u89e3\u4e3a\u4f55\u4e0d\u662fsa\u5c31\u662fsam+\u7ebf\u6bb5\u6811\u5408\u5e76\u554a\uff1f\u8fd9\u91cc\u662f\u4e3b\u5e2d\u6811\u505a\u6cd5\uff0c\u6838\u5fc3\u601d\u60f3\u7c7b\u4f3c\n\n\u591a\u4e32\u95ee\u9898\u7b2c\u4e00\u611f\u89c9\u662f\u8981\u628a\u6240\u6709\u7684\u4e32\u90fd\u5efa\u5728\u5e7f\u4e49sam\u91cc\u9762\uff0c\u7ed3\u679c\u53d1\u73b0\u964d\u667a\u4e86...\n\n\u9996\u5148\u6211\u4eec\u8981\u505a\u4e00\u70b9\u91cd\u8981\u7684\u8f6c\u6362\uff01\n\n\u6211\u4eec\u8bbeS\u4e32\u662f\u539f\u59cb\u4e32\uff0cT\u4e32\u662f\u8be2\u95ee\u7684\u4e32\n\n\u5c31\u662f\u6211\u4eec\u9700\u8981\u4e24\u4e2asam\uff0c\u5177\u4f53\u8fd9\u4e2a\u7b54\u6848\u7684\u6c42\u6cd5\u5c31\u662fT\u4e32\u7684par\u6811\u4e0a\u53bb\u91cd\uff0c\u5e76\u4e14\u51cf\u53bb\u6700\u957f\u7684\u5728S\u4e32\u5339\u914d\u7684\u957f\u5ea6\uff0c\u5269\u4f59\u7684\u663e\u7136\u5c31\u662f\u65b0\u7684\u4e00\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4e32\n\n\u7136\u540e\u5982\u679c68pts\uff0c\u6211\u4eec\u76f4\u63a5\u7c7b\u4f3c\u4e8eCTSC2012\u90a3\u9898\u6c42\u4e00\u4e2a\u6700\u957f\u5339\u914d\uff0c\u5e76\u4e14\u5728par\u6811\u4e0a\u51cf\u53bb\u8d21\u732e\u5373\u53ef\uff0c\u4f46\u662f100pts\uff0c\u6211\u4eec\u9700\u8981\u5bf9sam\u7684endpos\u5206\u7c7b\uff0c\u5177\u4f53\u5c31\u662f\u8981\u5224\u65ad\u5f53\u524d\u8fd9\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u957f\u5ea6\u8fd9\u4e2aendpos\u7684\u8303\u56f4\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\uff1f\n\n\u7136\u540e\u5c31\u76f8\u5f53\u4e8e\u6c42\u5b50\u6811\u91cc\u7684endpos\u96c6\u5408\u7684\u4e00\u6bb5\u533a\u95f4\u548c\uff0c\u7136\u540e\u8fd9\u662f\u4e00\u6bb5\u5f88\u88f8\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u7136\u800c\u4f5c\u8005\u5f88\u83dc\uff0c\u5c31\u628a\u4ed6\u8f6c\u6362\u6210\u4e86DFS\u5e8f+\u4e3b\u5e2d\u6811\u3002\n\n\uff08\u6709\u4e00\u70b9\u6613\u9519\u7684\u5bb9\u6613wa\uff0c\u73b0\u5728\u662f97pts\u4ee5\u524d\u662f96pts\u7684\u539f\u56e0\uff0c\u5927\u6982\u662f\u6211\u4eec\u5728\u6c42\u6700\u957f\u5339\u914dfar\u6570\u7ec4\u7684\u65f6\u5019\u8981\u4e00\u4e2a\u4e00\u4e2a\u50cf\u4f1a\u8df3\uff0c\u5c31\u662f\u957f\u5ea6-1\uff0c\u4e0d\u80fd\u76f4\u63a5\u8df3par\u6811\uff0c\u8fd9\u4e2a\u4f5c\u8005\u5927\u6982\u611f\u6027\u7406\u89e3\u4e86\u4e00\u4e0b\uff0c\u4e0d\u592a\u4f1a\u5177\u4f53\u8bf4\u660e\u539f\u56e0\uff0c\u4f1a\u8bc1\u660e\u6216\u8005\u6709\u8be6\u7ec6\u89e3\u91ca\u7684juju\u53ef\u4ee5\u5728\u8ba8\u8bba\u533a\uff0c\u6b22\u8fce\uff01\uff01\uff01\uff09\n\n\u8fd9\u590d\u6742\u5ea6\u662f\u4e00\u4e2alog\u7684\uff0c\u548c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u590d\u6742\u5ea6\u4e00\u6837\uff01\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\ninline int read() {\n\tchar c = getchar(); int x = 0, f = 1;\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\n\nconst int N = 1000005;\n\nint n, pos[N], far[N], sp[N]; char str[N];\n\nstruct SuffixAutomaton {\n\tint ch[N][26], par[N], len[N], tot, lst, root;\n\t\n\tint newnode(int l) {\n\t\tlen[tot] = l; memset(ch[tot], par[tot] = 0, sizeof(ch[tot]));\n\t\treturn tot++;\n\t}\n\tvoid extend(int c) {\n\t\tint p = lst, np = newnode(len[p] + 1);\n\t\twhile (!ch[p][c]) ch[p][c] = np, p = par[p];\n\t\tif (p == root && ch[p][c] == np) par[np] = root;\n\t\telse {\n\t\t\tint q = ch[p][c];\n\t\t\tif (len[q] == len[p] + 1) par[np] = q;\n\t\t\telse {\n\t\t\t\tint nq = newnode(len[p] + 1);\n\t\t\t\tpar[nq] = par[q], par[q] = par[np] = nq;\n\t\t\t\tmemcpy(ch[nq], ch[q], sizeof(ch[nq]));\n\t\t\t\twhile (ch[p][c] == q) ch[p][c] = nq, p = par[p];\n\t\t\t}\n\t\t}\n\t\tlst = np;\n\t}\n\tvoid init() {\n\t\ttot = 0, lst = root = newnode(0);\n\t}\n} S, T;\nstruct PersistenceTree {\n\tint rt[N], ls[N << 5], rs[N << 5], sz[N << 5], tot;\n\t\n\tvoid build(int rt, int l, int r) {\n\t\tif (l == r) return;\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(ls[rt] = ++tot, l, mid);\n\t\tbuild(rs[rt] = ++tot, mid + 1, r);\n\t}\n\tvoid insert(int rt, int pre, int l, int r, int x) {\n\t\tsz[rt] = sz[pre] + 1; if (l == r) return;\n\t\tls[rt] = ls[pre], rs[rt] = rs[pre];\n\t\tint mid = (l + r) >> 1;\n\t\tif (x <= mid) insert(ls[rt] = ++tot, ls[pre], l, mid, x);\n\t\telse insert(rs[rt] = ++tot, rs[pre], mid + 1, r, x);\n\t}\n\tint ask(int rt, int pre, int l, int r, int ql, int qr) {\n\t\tif (ql <= l && r <= qr) return sz[rt] - sz[pre];\n\t\tint mid = (l + r) >> 1, ret = 0;\n\t\tif (ql <= mid) ret += ask(ls[rt], ls[pre], l, mid, ql, qr);\n\t\tif (qr > mid) ret += ask(rs[rt], rs[pre], mid + 1, r, ql, qr);\n\t\treturn ret;\n\t}\n} pst;\n\nint lnk[N], nxt[N], fst[N], tote;\nint dl[N], dr[N], rev[N], dfc;\n\nvoid adde(int u, int v) {\n\tlnk[++tote] = v; nxt[tote] = fst[u]; fst[u] = tote;\n}\nvoid DFS(int u) {\n\tdl[u] = ++dfc, rev[dfc] = u;\n\tfor (int i = fst[u]; i; i = nxt[i]) DFS(lnk[i]);\n\tdr[u] = dfc;\n}\nbool go(int u, int l, int r, int cur) {\n\tl += cur - 1; if (l > r) return false;\n\tint rtl = pst.rt[dl[u] - 1], rtr = pst.rt[dr[u]];\n\treturn pst.ask(rtr, rtl, 1, n, l, r) > 0; \n}\nvoid solve() {\n\tscanf(\"%s\", str + 1); int l = read(), r = read();\n\tint nn = strlen(str + 1); T.init();\n\tfor (int i = 1; i <= nn; i++) T.extend(str[i] - 'a'), pos[i] = T.par[T.lst];\n\tint now = 0, cur = 0;\n\tfor (int i = 1; i <= nn; i++) {\n\t\tint c = str[i] - 'a';\n\t\twhile (true) {\n\t\t\tif (S.ch[now][c] && go(S.ch[now][c], l, r, cur + 1)) {\n\t\t\t\tnow = S.ch[now][c], cur++; break;\n\t\t\t}\n\t\t\tif (!now) break;\n\t\t\tcur--; if (cur == S.len[S.par[now]]) now = S.par[now];\n\t\t}\n\t\tfar[i] = cur;\n\t}\n\tll ans = 0;\n\tfor (int i = 1; i <= nn; i++) {\n\t\tint lstl = max(T.len[pos[i]], far[i]);\n\t\t// printf(\"%d %d %d\\n\", i, T.len[pos[i]], far[i]);\n\t\tif (lstl < i) ans += (ll)i - lstl;\n\t}\n\tprintf(\"%lld\\n\", ans);\n}\n\nint main() {\n\tscanf(\"%s\", str + 1); n = strlen(str + 1);\n\tS.init(); for (int i = 1; i <= n; i++) S.extend(str[i] - 'a'), sp[S.lst] = i;\n\tfor (int i = 1; i < S.tot; i++) adde(S.par[i], i);\n\tDFS(0), pst.build(pst.rt[0] = pst.tot = 1, 1, n);\n\tfor (int i = 1; i <= S.tot; i++)\n\t\tif (sp[rev[i]]) pst.insert(pst.rt[i] = ++pst.tot, pst.rt[i - 1], 1, n, sp[rev[i]]);\n\t\telse pst.rt[i] = pst.rt[i - 1];\n\tint qq = read(); while (qq--) solve();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1594285370,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4770 \u3010[NOI2018]\u4f60\u7684\u540d\u5b57\u3011"
    }
]