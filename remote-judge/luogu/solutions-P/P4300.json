[
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5220\u9664\u67d0\u4e9b\u8fb9\u6709\u4e00\u5b9a\u7684\u4ee3\u4ef7\uff0c\u8981\u6c42\u5220\u6389\u4f7f\u5f97\u6700\u77ed\u8def\u5f84\u51cf\u5c0f\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u9996\u5148\u8981spfa\u6c42\u51fa\u8d77\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u5bf9\u4e8e\u4e00\u6761\u6743\u503c\u4e3aw\uff0c\u8d77\u70b9\u4e3ai\uff0c\u7ec8\u70b9\u4e3aj\u7684\u8fb9\uff0c\u8bbedis[k]\u4e3a\u8d77\u70b9\u5230k\u70b9\u7684\u8ddd\u79bb\uff0c\u82e5dis[j]=dis[i]+w\uff0c\u5219\u5c06\u8be5\u8fb9\u52a0\u5165\u53e6\u4e00\u4e2a\u56fe\u91cc\uff0c\u8fb9\u7684\u5bb9\u91cf\u4e3a\u5220\u9664\u8fd9\u6761\u8fb9\u7684\u4ee3\u4ef7\uff0c\u5219\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u5927\u6d41\u5373\u4e3a\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n\nconst int inf=0x3fffffff;\nconst int Maxn=1100000;\n\nint to[Maxn],nxt[Maxn],first[Maxn],t[Maxn],c[Maxn];\nint w[Maxn],too[Maxn],nxtt[Maxn],firstt[Maxn];\nint n,m,ti,co,u,v,tot=1,e[Maxn];\nint b[Maxn],cur[Maxn],dis[Maxn];\n\ninline void add(int u,int v,int ti,int co) {\n    to[tot]=v;\n    nxt[tot]=first[u];\n    t[tot]=ti;\n    c[tot]=co;\n    first[u]=tot++;\n}\n\ninline void add(int u,int v,int wi) {\n    too[tot]=v;\n    w[tot]=wi;\n    nxtt[tot]=firstt[u];\n    firstt[u]=tot++;\n}\n\nvoid spfa() {\n    queue<int>q;\n    memset(dis,0x3f,sizeof(dis));\n    memset(e,0,sizeof(e));\n    q.push(1);\n    dis[1]=0;\n    while(!q.empty()) {\n        int now=q.front();\n        q.pop();\n        e[now]=0;\n        for(int i=first[now];i;i=nxt[i])\n            if(dis[to[i]]>dis[now]+t[i]) {\n                dis[to[i]]=dis[now]+t[i];\n                if(e[to[i]]==0) {\n                    q.push(to[i]);\n                    e[to[i]]=1;\n                }\n            }\n    }\n}\n\nbool bfs() {\n    queue<int>q;\n    q.push(1);\n    memset(b,0,sizeof(b));\n    b[1]=1;\n    while(!q.empty()) {\n        int now=q.front();\n        q.pop();\n        for(int i=firstt[now];i;i=nxtt[i])\n            if(w[i]&&b[too[i]]==0) {\n                b[too[i]]=b[now]+1;\n                q.push(too[i]);\n            }\n    }\n    return b[n];\n}\n\nint dfs(int root,int flow) {\n    if(root==n) return flow;\n    for(int &i=cur[root];i;i=nxtt[i])\n        if(b[too[i]]==b[root]+1&&w[i]) {\n            int temp=dfs(too[i],min(w[i],flow));\n            if(temp) {\n                w[i]-=temp;\n                w[i^1]+=temp;\n                return temp;\n            }\n        }\n    return 0;\n}\n\nint dinic() {\n    int ans=0,temp;\n    while(bfs()) {\n        memcpy(cur,firstt,sizeof(cur));\n        while(temp=dfs(1,inf))\n            ans+=temp;\n    }\n    return ans;\n}\n\nint main() {\n   // freopen(\"test.in\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++) {\n        scanf(\"%d%d%d%d\",&u,&v,&ti,&co);\n        add(u,v,ti,co);\n        add(v,u,ti,co);\n    }\n    spfa();\n    tot=2;\n    for(int i=1;i<=n;i++)\n        for(int j=first[i];j;j=nxt[j])\n            if(dis[to[j]]==dis[i]+t[j]) {\n                add(i,to[j],c[j]);\n                add(to[j],i,0);\n            }\n    printf(\"%d\\n%d\\n\",dis[n],dinic());\n    return 0;\n}\n```",
        "postTime": 1530265834,
        "uid": 53250,
        "name": "\u5355\u66e6\u589e",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4300 \u3010[AHOI2008]\u4e0a\u5b66\u8def\u7ebf\u3011"
    },
    {
        "content": " \u65e2\u7136\u9898\u76ee\u5df2\u7ecf\u660e\u786e\u4e86 **n==500**  \n \n \u660e\u663e\u662f\u8ba9\u6211\u4eec\u7528 **floyd** \u554a \n###  \u543c\u554a\nfloyd\u6709\u4ee5\u4e0b\u4f18\u70b9 \n\n1.\u4ee3\u7801\u7b80\u77ed\n\n2.\u4ee3\u7801\u7b80\u77ed\n\n3.\u4ee3\u7801\u7b80\u77ed\n\n\n\u4e4b\u540e\u5c31\u662f\u63d0\u53d6\u6700\u77ed\u8def\u8dd1\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09 \u539f\u7406\u697c\u4e0a\u5c06\u7684\u5f88\u6e05\u695a\u4e86\u8fd9\u91cc\u4e0d\u518d\u91cd\u590d\n\n\u4f46\u662f\u697c\u4e0a\u53ea\u8bb2\u5230\u8fc7\u5bf9\u4e8e\u6700\u77ed\u8def\u7684\u4f18\u5316  \u8fd9\u91cc\u7b80\u5355\u7684\u63d0\u4e00\u4e0b\u6700\u5927\u6d41\u7684\u4f18\u5316\n\n\uff08learn from [\u5495\u5495\u65e5\u62a5](https://www.luogu.org/blog/ONE-PIECE/jiu-ji-di-zui-tai-liu-suan-fa-isap-yu-hlpp) \uff09\n\nISAP \u53ea\u9700\u8981\u4e00\u6b21bfs\u7684\u6700\u5927\u6d41 \n\n\u8bf4\u5f97\u76f4\u63a5\u660e\u4e86 \u5c31\u662f\u8bb0\u5f55\u6bcf\u5c42\u7684\u8282\u70b9\u6570  \u6bcf\u6b21dfs\u540e\u82e5\u8fd8\u6709\u4f59\u6d41 \u5219\u4e0b\u4e00\u6b21dfs\u4e00\u5b9a\u4e0d\u4f1a\u7ecf\u8fc7\u8fd9\u91cc \u5c31\u628a\u8be5\u70b9\u548c\u513f\u5b50\u7684\u8fde\u63a5\u7ed9\u65ad\u6389 \u5177\u4f53\u64cd\u4f5c\u5c31\u662f\u4fee\u6539\u8be5\u70b9\u7684dep \u5f53\u67d0\u5c42\u6ca1\u6709\u8282\u70b9 \u5373tax [  dep [ u ] ] ==0  \u8868\u73b0\u4e3a\u8be5\u5c42**\u65ad\u5c42**   \u90a3\u4e48\u4ecest\u51fa\u53d1\u5c31\u4e00\u5b9a\u5230\u4e0d\u4e86ed \u5c31\u53ef\u4ee5\u76f4\u63a5return\u4e86 \n\n\u4ecd\u7136\u53ef\u4ee5\u52a0\u4e0a\u5f27\u4f18\u5316 \n\n\u81f3\u4e8e\u66f4\u52a0\u9ad8\u7ea7\u7684\u9884\u7559\u63a8\u8fdb\u4ee5\u53caHLPP  \u4e5f\u53ef\u4ee5\u89c1\u6b64[\u5495\u5495\u65e5\u62a5](https://www.luogu.org/blog/ONE-PIECE/jiu-ji-di-zui-tai-liu-suan-fa-isap-yu-hlpp)\n\n\u4f46\u662ffloyd\u5e38\u6570\u8fd8\u662f\u592a\u5927\u4e86\uff1f  \u4f18\u5316\u4e86\u6700\u5927\u6d41\u4e5f\u662f900\u591ams\u5361\u8fc7\u4e00\u4e2a\u70b9  \u7a33\u5c45\u6700\u4f18\u89e3\u5012\u6570**\u7b2c\u4e00**\uff01\n\n\n```cpp\n/*\n\tn=500 \u6545\u610f\u7ed9\u8fd9\u4e48\u5c0f \u5c31\u5f80floyd\u65b9\u5411\u8003\u8651\n\t\u5148\u6c42\u51fa\u6700\u77ed\u8def \u5982\u679c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\u6709 d 1,i + d i,j +d j,n == d 1,n\n\t\u53ef\u77e5 i->j\u4e00\u5b9a\u662f\u67d0\u4e00\u6700\u77ed\u8def\u4e0a\u7684\u8fb9 \n\t\u4e8e\u662f\u5427\u6240\u6709\u8fd9\u4e9b\u8fb9\u63d0\u53d6\u51fa\u6765 \u6c42\u6700\u5c0f\u5272\u5373\u53ef\uff01\n\tNOTE: \u6ce8\u610f\u8fb9\u7684\u53bb\u91cd\n*/\n#include<queue>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int N=505,M=125000;\nstruct road \n{\n\tint u,v,d,c; road(){}\n\troad(int _u,int _v,int _d,int _c)\n\t\t{u=_u,v=_v,d=_d,c=_c;}\n} r[M];\nstruct pp {int v,nxt,c;} e[M<<1];\nint head[N],dep[N],n,m,tot=1,d[N][N],st,ed,tax[N],cur[N];\ninline int min(int a,int b) {return a>b?b:a;}\ninline void add(int u,int v,int c)\n{\n\te[++tot].nxt=head[u];head[u]=tot;e[tot].v=v;e[tot].c=c;\n}\ninline void bfs()\n{\n\tqueue < int > q; q.push(ed);\n\ttax[dep[ed]=1]++;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor(int j=head[u];j;j=e[j].nxt)\n\t\t{\n\t\t\tint v=e[j].v;if(dep[v]) continue;\n\t\t\ttax[dep[v]=dep[u]+1]++; q.push(v);\n\t\t}\n\t}\n}\ninline int dfs(int u,int flow)\n{\n\tif(u==ed) return flow;\n\tint s=0,val;\n\tfor(int&j=cur[u];j;j=e[j].nxt)\n\t{\n\t\tint v=e[j].v,c=e[j].c;\n\t\tif(dep[v]+1==dep[u]&&c>0)\n\t\t{\n\t\t\ts+=(val=dfs(v,min(c,flow-s)));\n\t\t\te[j].c-=val;e[j^1].c+=val;\n\t\t\tif(s==flow) return s;\n\t\t}\n\t}\n\t--tax[dep[u]];\n\tif(tax[dep[u]]==0) dep[st]=n+1;\n\ttax[++dep[u]]++; return s;\n\t\n}\nint main()\n{\n\tmemset(d,0x3f,sizeof(d));\n\tscanf(\"%d%d\",&n,&m); st=1; ed=n;\n\tfor(int i=1;i<=n;i++) d[i][i]=0;\n\tfor(int i=1,u,v,t,c;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d%d\",&u,&v,&t,&c);\n\t\tr[i]=road(u,v,t,c);\n\t\td[u][v]=d[v][u]=min(d[u][v],t);\n\t}\n\tfor(int k=1;k<=n;k++)\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\t\td[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=r[i].u,v=r[i].v,w=r[i].d,c=r[i].c;\n\t\tif(u==v) continue;\n\t\tif(d[1][u]+w+d[v][n]==d[1][n])\n\t\t\tadd(u,v,c),add(v,u,0);\n\t\tif(d[1][v]+w+d[u][n]==d[1][n]) \n\t\t\tadd(v,u,c),add(u,v,0);\n\t} int res=0;\n\tbfs(); while(dep[st]<=n)\n\t{\n\t\tmemcpy(cur,head,sizeof(head));\n\t\tres+=dfs(st,23333333);\n\t}\n\tprintf(\"%d\\n%d\\n\",d[1][n],res);\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1551320624,
        "uid": 77807,
        "name": "\u7a1a\u540d\u771f\u767d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4300 \u3010[AHOI2008]\u4e0a\u5b66\u8def\u7ebf\u3011"
    },
    {
        "content": "\u9898\u89e3\uff1a\n\n\n\u9996\u5148\u8981spfa\u6c42\u51fa\u8d77\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u5bf9\u4e8e\u4e00\u6761\u6743\u503c\u4e3a$w$\uff0c\u8d77\u70b9\u4e3a$i$\uff0c\u7ec8\u70b9\u4e3a$j$\u7684\u8fb9\uff0c\u8bbe$dis[k]$\u4e3a\u8d77\u70b9\u5230$k$\u70b9\u7684\u8ddd\u79bb\uff0c\u82e5$dis[j]=dis[i]+w$\uff0c\u5219\u5c06\u8be5\u8fb9\u52a0\u5165\u53e6\u4e00\u4e2a\u56fe\u91cc\uff0c\u8fb9\u7684\u5bb9\u91cf\u4e3a\u5220\u9664\u8fd9\u6761\u8fb9\u7684\u4ee3\u4ef7\uff0c\u5219\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u5927\u6d41\u5373\u4e3a\u7b54\u6848\u3002\n\n\n\u8fd9\u662f\u524d\u9762\u90a3\u7247\u9898\u89e3\u7684\u4f5c\u8005\u6240\u8a00\u3002\n\n\u611f\u8c22\u8fd9\u7bc7\u9898\u89e3\uff0c\u8ba9\u6211\u4ece\u4e2d\u83b7\u5f97\u4e86\u4e00\u4e9b\u65b0\u7684\u601d\u8def\u548c\u6ce8\u610f\u5230\u4e86\u5176\u4ed6\u65b9\u9762\u7684\u70b9\uff0c\u800c\u8fd9\u4e9b\u53ef\u4ee5\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u70b9\u662f\u524d\u9762\u9898\u89e3\u6ca1\u6709\u8bf4\u5230\u7684\u3002\u90a3\u6211\u5c31\u8865\u5145\u4e00\u4e0b\u3002\n\n### \u9996\u5148\u6211\u4eec\u770b\u5230\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\uff1a\n\n$2<=n<=500$\uff0c$1<=M<=124750$\n\n$124750$\u6709\u4ec0\u4e48\u7279\u522b\u7684\u542b\u4e49\u5417\uff1f\n\n\u5bf9\uff0c$124750=500*500/2-500/2$\n\n\u610f\u601d\u5c31\u662f\u8bf4\u8fd9\u5e45\u56fe\u6709\u5f88\u5927\u53ef\u80fd\u662f\u4e2a\u7a20\u5bc6\u56fe\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6700\u597d\u7528\u4e0a$dijkstra$\u3002~~\uff08\u4f46\u6211\u8fd8\u662f\u7528\u4e86spfa\uff0c\u556a\u6253\u8138\uff09~~\n\n### \u5176\u6b21\uff0c\u5c31\u662f\u5206\u4eab\u4e00\u4e0b\u6211\u5982\u4f55\u60f3\u5230\u8fd9\u9898\u7684\u601d\u8def\u7684\u3002\n\n\u6839\u636e\u9898\u610f\uff0c\u8fd9\u9053\u9898\u6709\u4e24\u4e2a\u95ee\uff1a\n\n```cpp\n1. \u6c42\u51fa\u5bb6\u5230\u5b66\u6821\u7684\u6700\u77ed\u8ddd\u79bb\uff08\u9898\u9762\u8bf4\u7684\u662f\u6700\u77ed\u65f6\u95f4\uff0c\u4f46\u672c\u8d28\u90fd\u4e00\u6837\uff09\uff1b\n2. \u53bb\u6389\u4e00\u4e9b\u8fb9\uff0c\u4f7f\u5f97\u5bb6\u5230\u5b66\u6821\u7684\u6700\u77ed\u8ddd\u79bb\u53d8\u5927\uff0c\u5728\u6700\u77ed\u8ddd\u79bb\u53d8\u5927\u7684\u524d\u63d0\u4e0b\uff0c\u8981\u6c42\u53bb\u6389\u7684\u8fb9\u7684\u603b\u957f\u5ea6\u6700\u5c0f\u3002\n```\n\n\u6211\u4eec\u901a\u8fc7\u753b\u56fe\u6765\u627e\u51fa\u65b9\u6cd5\u3002\n\n\u8fd9\u662f\u6837\u4f8b\u7684\u90a3\u5e45\u56fe\uff1a\uff08\u6bcf\u6761\u8def\u5f84\u5de6\u8fb9\u7684\u6570\u5b57\u662f\u8ddd\u79bb\uff0c\u53f3\u8fb9\u7684\u662f\u4ee3\u4ef7\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/50510.png )\n\n\u4e0d\u96be\u5f97\u51fa\uff0c\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\u5c31\u662f2 \uff08$1->2->6$ or $1->5->6$\uff09\n\n\u7136\u540e\uff0c\u7b2c\u4e8c\u95ee\u7684\u7b54\u6848\u5c31\u662f\u628a$5->6$ \u548c$2->6$\u4e24\u6761\u8fb9\u5220\u53bb\uff0c\u8f93\u51fa$2+3=5$\n\n\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u666e\u901a\u6700\u77ed\u8def\u5f84\u6c42\u5373\u53ef\u3002Floyd\u521a\u597d\u53ef\u4ee5\u5361\u8fc7\u53bb500\uff0c\u4f46\u662f\u8003\u8651\u5230\u4e0b\u9762\u8fd8\u6709\u4e2a\u6700\u5c0f\u5272\u8981\u505a\uff0c\u5c31\u4e0d\u8981\u7528\u8fd9\u79cd\u7b97\u6cd5\u3002\n\n\u4f46\u662f\u7b2c\u4e8c\u95ee\u6709\u70b9\u9ebb\u70e6\u3002\n\n\u770b\u5230\u9898\u9762\u4e2d\u7684\n\u201c\u7136\u800c\u53ef\u53ef\u5ffd\u7136\u6709\u4e86\u4e00\u4e2a\u9b3c\u70b9\u5b50\uff0c\u4ed6\u60f3\u8d81\u5361\u5361\u4e0d\u5907\uff0c\u5728\u5361\u5361\u7684\u8f93\u5165\u6570\u636e\u4e2d\u5220\u53bb\u4e00\u4e9b\u8def\u7ebf\uff0c\u4ece\u800c\u8ba9\u5361\u5361\u7684\u7a0b\u5e8f\u5f97\u51fa\u7684\u7b54\u6848\u5927\u4e8e\u5b9e\u9645\u7684\u6700\u77ed\u65f6\u95f4\u201d\u8fd9\u53e5\u8bdd\u4e2d\u7684\u201c\u5220\u201d\uff0c\u90a3\u4e48\u4e00\u4e2a\u5728\u56fe\u4e2d\u7684\u7b97\u6cd5\u4fbf\u6d6e\u73b0\u5728\u6211\u4eec\u8111\u6d77\u91cc\uff1a\u6700\u5c0f\u5272\u3002\n\n\u6700\u5c0f\u5272\u5b9a\u4e49\uff1a\u5728\u4e00\u4e2a\u7f51\u7edc\u91cc\u9762\uff0c\u5982\u679c\u80fd\u5220\u6389\u67d0\u4e9b\u8fb9\uff0c\u4f7f\u5f97\u7f51\u7edc\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fb9\u96c6\u5c31\u53eb\u201c\u5272\u201d\u3002\u5728\u6ee1\u8db3\u201c\u4f7f\u5f97\u7f51\u7edc\u4e0d\u8fde\u901a\u201d\u7684\u524d\u63d0\u4e0b\uff0c\u5f97\u5230\u4e00\u7ec4\u4ee3\u4ef7\u6700\u5c0f\u7684\u8fb9\u96c6\uff0c\u8fd9\u4e2a\u8fb9\u96c6\u5c31\u53eb\u505a\u201c\u6700\u5c0f\u5272\u201d\u3002\n\n\u4f46\u662f\uff0c\u6700\u5c0f\u5272\u4ec5\u4ec5\u662f\u53bb\u6389\u67d0\u4e9b\u8fb9\uff0c\u548c\u9898\u76ee\u610f\u601d\u4e0d\u7b26\u3002\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u8003\u8651\u628a\u8fd9\u4e2a\u56fe\u7684\u6700\u77ed\u8def\u56fe\u6c42\u51fa\u6765\uff0c\u5728\u6700\u77ed\u8def\u56fe\u4e0a\u6c42\u6700\u5c0f\u5272\u3002\n\n\u4ec0\u4e48\u662f\u6700\u77ed\u8def\u56fe\uff1f\n\n\u662f\u7531\u8bb8\u591a\u6700\u77ed\u8def\u6784\u6210\u7684\u56fe\u554a\u3002\u3002\u3002\u4e5f\u5c31\u662f\u7701\u53bb\u4e86\u4e00\u4e9b\u6ca1\u7528\u7684\u8fb9\uff0c\u600e\u4e48\u5224\u65ad\u5462\uff1f\n\n### \u5224\u65ad\u65b9\u6cd5\n\n\u5177\u4f53\u65b9\u6cd5\u5c31\u662f\u9996\u5148\u8dd1\u4e00\u6b21spfa\n\n\u7136\u540e\u5c31\u6c42\u4e86\u51fa\u6765\u5355\u6e90\u7684\u6700\u77ed\u8def$(sssp)$\u4e86\uff0c\u7136\u540e\u6c42\u6700\u77ed\u8def\u56fe\uff1a\u5982\u679c\u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u4e00\u4e2a\u7aef\u70b9\u52301\u7684\u8ddd\u79bb+\u8fd9\u4e2a\u8fb9\u7684\u8fb9\u6743==\u53e6\u4e00\u4e2a\u7aef\u70b9\u5230$1$\u7684\u8ddd\u79bb\uff0c\u5c31\u8fde\u8fb9\u5230\u7f51\u7edc\u91cc\u9762\u3002\uff08\u53ef\u4ee5\u8054\u7cfb\u6700\u4e0a\u9762\u90a3\u4e2a\u5f0f\u5b50\uff09\n\n\u6700\u540e\uff0c\u5c31\u662f\u8981\u8bc1\u660e\u6700\u5c0f\u5272==\u6700\u5927\u6d41\u4e86\u3002\uff08\u53ef\u80fd\u5750\u5728\u7535\u8111\u524d\u7684\u795e\u4ed9\u60a8\u770b\u5230\u8fd9\u53e5\u8bdd\u9a6c\u4e0a\u5c31\u53bb\u5199\u6700\u5927\u6d41\u4e86\uff09\n\n\u849f\u84bb\u6211\u5f53\u7136\u4e0d\u4f1a\u8bc1\u660e\uff0c\u4e8e\u662f\u5c31\u8f6c\u8f7d\u4e86\u7f51\u4e0a\u4e00\u4f4d\u5199\u7684\u975e\u5e38\u597d\u7684\u4e00\u4f4d\u5927\u725b\u7684\u8bc1\u660e\u8fc7\u7a0b\uff1a\n\n### \u8bc1\u660e\u8fc7\u7a0b\uff1a\n\n\u5177\u4f53\u7684\u8bc1\u660e\u5206\u4e09\u90e8\u5206\n\n1.\u4efb\u610f\u4e00\u4e2a\u6d41\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u4efb\u610f\u4e00\u4e2a\u5272\n\n\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3 \u81ea\u6765\u6c34\u516c\u53f8\u968f\u4fbf\u7ed9\u4f60\u5bb6\u901a\u70b9\u6c34\uff0c\u6784\u6210\u4e00\u4e2a\u6d41\n\n\u6050\u6016\u5206\u5b50\u968f\u4fbf\u780d\u51e0\u5200 \u780d\u51fa\u4e00\u4e2a\u5272\n\n\u7531\u4e8e\u5bb9\u91cf\u9650\u5236\uff0c\u6bcf\u4e00\u6839\u7684\u88ab\u780d\u7684\u6c34\u7ba1\u5b50\u6d41\u51fa\u7684\u6c34\u6d41\u91cf\u90fd\u5c0f\u4e8e\u7ba1\u5b50\u7684\u5bb9\u91cf\n\n\u6bcf\u4e00\u6839\u88ab\u780d\u7684\u6c34\u7ba1\u7684\u6c34\u672c\u6765\u90fd\u8981\u5230\u4f60\u5bb6\u7684\uff0c\u73b0\u5728\u6d41\u5230\u5916\u9762 \u52a0\u8d77\u6765\u5f97\u5230\u7684\u6d41\u91cf\u8fd8\u662f\u7b49\n\u4e8e\u539f\u6765\u7684\u6d41\n\n\u7ba1\u5b50\u7684\u5bb9\u91cf\u52a0\u8d77\u6765\u5c31\u662f\u5272\uff0c\u6240\u4ee5\u6d41\u5c0f\u4e8e\u7b49\u4e8e\u5272\n\n\u7531\u4e8e\u4e0a\u9762\u7684\u6d41\u548c\u5272\u90fd\u662f\u4efb\u610f\u6784\u9020\u7684\uff0c\u6240\u4ee5\u4efb\u610f\u4e00\u4e2a\u6d41\u5c0f\u4e8e\u4efb\u610f\u4e00\u4e2a\u5272\n\n2.\u6784\u9020\u51fa\u4e00\u4e2a\u6d41\u7b49\u4e8e\u4e00\u4e2a\u5272\n\n\u5f53\u8fbe\u5230\u6700\u5927\u6d41\u65f6\uff0c\u6839\u636e\u589e\u5e7f\u8def\u5b9a\u7406\n\n\u6b8b\u7559\u7f51\u7edc\u4e2d$s$\u5230$t$\u5df2\u7ecf\u6ca1\u6709\u901a\u8def\u4e86\uff0c\u5426\u5219\u8fd8\u80fd\u7ee7\u7eed\u589e\u5e7f\n\n\u6211\u4eec\u628as\u80fd\u5230\u7684\u7684\u70b9\u96c6\u8bbe\u4e3a$S$,\u4e0d\u80fd\u5230\u7684\u70b9\u96c6\u4e3a$T$\n\n\u6784\u9020\u51fa\u4e00\u4e2a\u5272\u96c6$C[S,T]$,$S$\u5230$T$\u7684\u8fb9\u5fc5\u7136\u6ee1\u6d41 \u5426\u5219\u5c31\u80fd\u7ee7\u7eed\u589e\u5e7f\n\n\u8fd9\u4e9b\u6ee1\u6d41\u8fb9\u7684\u6d41\u91cf\u548c\u5c31\u662f\u5f53\u524d\u7684\u6d41\u5373\u6700\u5927\u6d41\n\n\u628a\u8fd9\u4e9b\u6ee1\u6d41\u8fb9\u4f5c\u4e3a\u5272\uff0c\u5c31\u6784\u9020\u51fa\u4e86\u4e00\u4e2a\u548c\u6700\u5927\u6d41\u76f8\u7b49\u7684\u5272\n\n3.\u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272\n\n\u8bbe\u76f8\u7b49\u7684\u6d41\u548c\u5272\u5206\u522b\u4e3a$Fm$\u548c$Cm$\n\n\u5219\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u6d41\u5c0f\u4e8e\u7b49\u4e8e\u4efb\u610f\u4e00\u4e2a\u5272\n\n\u4efb\u610f$F\u2264Fm=Cm\u2264$\u4efb\u610f$C$\n\n\u5b9a\u7406\u8bf4\u660e\u5b8c\u6210\uff0c\u8bc1\u660e\u5982\u4e0b\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u7f51\u7edc\u6d41\u56fe$G=(V,E)$\uff0c\u5176\u4e2d\u6709\u6e90\u70b9$s$\u548c\u6c47\u70b9$t$\uff0c\u90a3\u4e48\u4e0b\u9762\u4e09\u4e2a\u6761\u4ef6\u662f\u7b49\u4ef7\u7684\uff1a\n\n1. \u6d41f\u662f\u56feG\u7684\u6700\u5927\u6d41\n\n2. \u6b8b\u7559\u7f51\u7edcGf\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\n\n3. \u5bf9\u4e8eG\u7684\u67d0\u4e00\u4e2a\u5272(S,T)\uff0c\u6b64\u65f6f=C(S,T)\n\n\u9996\u5148\u8bc1\u660e$1 => $2\uff1a\n\n\u6211\u4eec\u5229\u7528\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u6d41$f$\u662f\u56fe$G$\u7684\u6700\u5927\u6d41\uff0c\u4f46\u662f\u6b8b\u7559\u7f51\u7edc\u4e2d\u8fd8\u5b58\u5728\u6709\u589e\u5e7f\u8def$p$\uff0c\u5176\u6d41\u91cf\u4e3a$fp$\u3002\u5219\u6211\u4eec\u6709\u6d41$f$\u2032$=f+fp>f$\u3002\u8fd9\u4e0e$f$\u662f\u6700\u5927\u6d41\u4ea7\u751f\u77db\u76fe\u3002\n\n\n\u63a5\u7740\u8bc1\u660e$2 => $3\uff1a\n\n\n\u5047\u8bbe\u6b8b\u7559\u7f51\u7edc$Gf$\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\uff0c\u6240\u4ee5\u5728\u6b8b\u7559\u7f51\u7edc$Gf$\u4e2d\u4e0d\u5b58\u5728\u8def\u5f84\u4ece$s$\u5230\u8fbe$t$\u3002\u6211\u4eec\u5b9a\u4e49$S$\u96c6\u5408\u4e3a\uff1a\u5f53\u524d\u6b8b\u7559\u7f51\u7edc\u4e2d$s$\u80fd\u591f\u5230\u8fbe\u7684\u70b9\u3002\u540c\u65f6\u5b9a\u4e49$T=V-S$\u3002\u6b64\u65f6$(S,T)$\u6784\u6210\u4e00\u4e2a\u5272$(S,T)$\u3002\u4e14\u5bf9\u4e8e\u4efb\u610f\u7684$u\u2208S$,$v\u2208T$\uff0c\u6709$f(u,v)=c(u,v)$\u3002\u82e5$f(u,v)<c(u,v)$\uff0c\u5219\u6709$Gf(u,v)>0$\uff0c$s$\u53ef\u4ee5\u5230\u8fbe$v$\uff0c\u4e0e$v$\u5c5e\u4e8e$T$\u77db\u76fe\u3002\n    \n\u56e0\u6b64\u6709$f(S,T)=\u03a3f(u,v)=\u03a3c(u,v)=C(S,T)$\u3002\n\n\n\u6700\u540e\u8bc1\u660e$3 => 1$\uff1a\n\n\n\u7531\u4e8e$f$\u7684\u4e0a\u754c\u4e3a\u6700\u5c0f\u5272\uff0c\u5f53$f$\u5230\u8fbe\u5272\u7684\u5bb9\u91cf\u65f6\uff0c\u663e\u7136\u5c31\u5df2\u7ecf\u5230\u8fbe\u6700\u5927\u503c\uff0c\u56e0\u6b64f\u4e3a\u6700\u5927\u6d41\u3002\n\n\u8fd9\u6837\u5c31\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u6240\u6c42\u5f97\u7684\u4e00\u5b9a\u662f\u6700\u5927\u6d41\u3002\n\n\u6700\u540e\uff0c\u9001\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\nusing namespace std;\n//---------------------\u4ee5\u4e0b\u4e3aSSSP-----------------------\nconst int maxn=1000010;\nconst int inf=0x3f3f3f3f;\nint to[maxn],nxt[maxn],f[maxn],t[maxn],c[maxn];\nint n,m,tot=1,edge[maxn],d[maxn];\ninline void add(int u,int v,int ti,int co)\n{\n    to[tot]=v;\n    nxt[tot]=f[u];\n    t[tot]=ti;\n    c[tot]=co;\n    f[u]=tot++;\n}\nvoid spfa()\n{\n    queue<int>q;\n    memset(d,0x3f,sizeof(d));\n    memset(edge,0,sizeof(edge));\n    q.push(1);\n    d[1]=0;\n    while(!q.empty())\n    {\n        int now=q.front();\n        q.pop();\n        edge[now]=0;\n        for (int i=f[now];i;i=nxt[i])\n        {\n        \tif (d[to[i]]>d[now]+t[i])\n            {\n                d[to[i]]=d[now]+t[i];\n                if (edge[to[i]]==0)\n                {\n                    q.push(to[i]);\n                    edge[to[i]]=1;\n                }\n            }\n\t\t}\n    }\n}\n\n//-------------------\u4ee5\u4e0a\u4e3aSSSP------------------------\n\n//-------------------\u4ee5\u4e0b\u4e3adinic-----------------------\n\nint head_dinic[maxn],edge_dinic[maxn],ver_dinic[maxn],d_dinic[maxn],nxt_dinic[maxn];\nint tot_dinic,n_dinic,m_dinic,s_dinic,t_dinic,maxflow;\nqueue<int> q_dinic;\nvoid add_dinic(int x,int y,int z)\n{\n    ver_dinic[++tot_dinic]=y,edge_dinic[tot_dinic]=z;nxt_dinic[tot_dinic]=head_dinic[x],head_dinic[x]=tot_dinic;\n    ver_dinic[++tot_dinic]=x,edge_dinic[tot_dinic]=0;nxt_dinic[tot_dinic]=head_dinic[y],head_dinic[y]=tot_dinic;\n}\n\nbool bfs()\n{\n    memset(d_dinic,0,sizeof(d_dinic));\n    while (q_dinic.size()) q_dinic.pop();\n    q_dinic.push(s_dinic);d_dinic[s_dinic]=1;\n    while (q_dinic.size())\n    {\n        int x=q_dinic.front();q_dinic.pop();\n        for (int i=head_dinic[x];i;i=nxt_dinic[i])\n        {\n            if (edge_dinic[i]&&!d_dinic[ver_dinic[i]])\n            {\n                q_dinic.push(ver_dinic[i]);\n                d_dinic[ver_dinic[i]]=d_dinic[x]+1;\n                if (ver_dinic[i]==t_dinic) return 1;\n            }\n        }\n    }\n    return 0;\n}\nint dinic(int x,int flow)\n{\n    if (x==t_dinic) return flow;\n    int rest=flow,k;\n    for (int i=head_dinic[x];i&&rest;i=nxt_dinic[i])\n    {\n        if (edge_dinic[i]&&d_dinic[ver_dinic[i]]==d_dinic[x]+1)\n        {\n            k=dinic(ver_dinic[i],min(rest,edge_dinic[i]));\n            if (!k) d_dinic[ver_dinic[i]]=0;\n            edge_dinic[i]-=k;\n            edge_dinic[i^1]+=k;\n            rest-=k;\n        }\n    }\n    return flow-rest;\n}\n\n//------------------\u4ee5\u4e0a\u4e3adinic------------------------ \nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    s_dinic=1;\n    t_dinic=n;\n    for (int i=1;i<=m;i++)\n    {\n        int x,y,z,c;\n        scanf(\"%d %d %d %d\",&x,&y,&z,&c);\n        add(x,y,z,c);\n        add(y,x,z,c);\n    }\n    spfa();\n    tot_dinic=1;\n    printf(\"%d\\n\",d[n]);\n    for (int i=1;i<=n;i++)\n        for (int j=f[i];j;j=nxt[j])\n            if(d[to[j]]==d[i]+t[j])\n            \t//printf(\"%d %d %d\\n\",i,ver[j],ca[j]),\n                add_dinic(i,to[j],c[j]);\n    int flow=0;\n    while (bfs())\n        while (flow=dinic(s_dinic,inf))\n            maxflow+=flow;\n    printf(\"%d\\n\",maxflow);\n    return 0;\n}\n```\n\n\u5176\u5b9e\u6211\u7684\u4ee3\u7801\u4e5f\u6709\u4e0d\u8db3\u4e4b\u5904\u3002spfa\u548cdinic\u53ef\u4ee5\u5f04\u6210\u4e24\u4e2anamespace\uff0c\u800c\u4e14\u8fd9\u53d8\u91cf\u540d\u4e5f\u8d77\u5f97\u975e\u5e38\u590d\u6742\u3002\n\n\u53c2\u8003\u535a\u5ba2\uff1a\n\nhttps://blog.csdn.net/qq_41357771/article/details/79416899\n\nhttps://blog.csdn.net/wbysr/article/details/22685591",
        "postTime": 1548864521,
        "uid": 114479,
        "name": "presucc",
        "ccfLevel": 6,
        "title": "[AHOI2008]\u4e0a\u5b66\u8def\u7ebf \u9898\u89e3"
    }
]