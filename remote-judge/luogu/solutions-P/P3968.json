[
    {
        "content": "$update:$ \u4fee\u6539\u4e86\u4ee3\u7801\uff0c\u4fee\u6b63\u4e86\u4ee3\u7801\u5728\u67d0\u4e9b\u6570\u636e\u4e0b\u4f1a$RE$\u7684\u60c5\u51b5\u3002\n\n\u53ea\u80fd\u8bf4$STL$\u5927\u6cd5\u543c\u554a\uff01\n\n\u5bf9\u4e8e\u63d2\u5165\u64cd\u4f5c\uff0c\u7528\u4e00\u4e2a$multiset$\uff0c\u4ee5$len$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u53f3\u7aef\u70b9$r$\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u76f4\u63a5\u53d6\u51fa$begin()$\u5373\u53ef\uff0c\u7136\u540e\u628a\u5206\u88c2\u6240\u5f97\u7684\u5de6\u53f3\u4e24\u7aef\u91cd\u65b0\u52a0\u5165\u3002\n\n\u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u7f16\u53f7\u4e0a\u4e00\u6b21\u63d2\u5165\u8fdb\u6765\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u518d\u5f00\u4e00\u4e2a\u4ee5\u5de6\u7aef\u70b9$l$\u4e3a\u5173\u952e\u5b57\u7684$multiset$\uff0c\u7136\u540e$multiset$\u5185\u4e8c\u5206\u627e\u5230\u8be5\u4f4d\u7f6e\u5de6\u53f3\u7684\u4e24\u7aef\u533a\u95f4\u7136\u540e\u5408\u5e76\uff0c\u518d\u63d2\u5165$multiset$\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u64cd\u4f5c\u4e86\u5176\u4e2d\u4e00\u4e2a$multiset$\uff0c\u53e6\u4e00\u4e2a\u4e2d\u7684\u5143\u7d20\u4e5f\u8981\u66f4\u65b0\uff0c\u65f6\u523b\u4fdd\u6301\u4e24\u4e2a$multiset$\u5185\u5143\u7d20\u76f8\u540c\u3002\u5220\u9664\u64cd\u4f5c\u76f4\u63a5\u7528$multiset$\u7684$erase$\u548c$find$\u51fd\u6570\u3002\n\n\u5bf9\u4e8e\u8f93\u51fa\u7b54\u6848\uff0c\u6211\u662f\u628a\u8be2\u95ee\u4ee5\u53ca\u64cd\u4f5c\u79bb\u7ebf\u4e0b\u6765\uff0c\u7136\u540e\u79bb\u6563\u5316\u7528\u6811\u72b6\u6570\u7ec4\u8ba1\u7b97\uff0c\u5b9e\u73b0\u4e5f\u6bd4\u8f83\u65b9\u4fbf\u3002\n\n\u4ee3\u7801\u4e2d$s1,node1$\u662f\u4e0a\u8ff0\u7b2c\u4e00\u4e2a$multiset$\uff0c$s2,node2$\u662f\u4e0a\u8ff0\u7b2c\u4e8c\u4e2a$multiset$\u3002\n\n$Code \\ Below:$\n```cpp\n#include<bits/stdc++.h>\n#define ts cout<<\"ok\"<<endl\n#define int long long\n#define hh puts(\"\")\n#define pc putchar\n#define ite multiset<node2>::iterator\n//#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n//char buf[1<<21],*p1=buf,*p2=buf;\nusing namespace std;\nconst int N=1000005;\nint n,m,q,tr[N],tot,b[N],cnt,top;\nstruct node1{\n    int l,r,len;\n    friend bool operator < (node1 A,node1 B){\n        return A.len>B.len||(A.len==B.len&&A.r>B.r);\n    }\n};\nstruct node2{\n    int l,r,len;\n    friend bool operator < (node2 A,node2 B){\n        return A.l<B.l;\n    }\n};\nstruct work{\n    int pos,v,tm;\n}a[N];\nstruct que{\n    int l,r,tm;\n}qs[N];\nmultiset<node1> s1;\nmultiset<node2> s2;\nmap<int,int> ma;\ninline int read(){\n    int ret=0,ff=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-') ff=-ff;ch=getchar();}\n    while(isdigit(ch)){ret=(ret<<3)+(ret<<1)+ch-'0';ch=getchar();}\n    return ret*ff;\n}\nvoid write(int x){if(x<0){x=-x,pc('-');}if(x>9) write(x/10);pc(x%10+48);}\nvoid writeln(int x){write(x),hh;}\nvoid writesp(int x){write(x),pc(' ');}\nint lowbit(int x){\n    return x&(-x);\n}\nvoid add(int x,int v){\n    while(x<=m){\n        tr[x]+=v;\n        x+=lowbit(x);\n    }\n}\nint query(int x){\n    int res=0;\n    while(x){\n        res+=tr[x];\n        x-=lowbit(x);\n    }\n    return res;\n}\nsigned main(){\n    n=read(),q=read();\n    s1.insert((node1){1,n,n});\n    s2.insert((node2){1,n,n});\n    for(int i=1;i<=q;i++){\n        int x=read();\n        if(x==0){\n            int l=read(),r=read();\n            b[++cnt]=l,b[++cnt]=r;\n            qs[++tot]=(que){l,r,i};\n        }\n        else{\n            if(ma[x]){\n                int pos=ma[x];\n                a[++top]=(work){pos,-1,i};\n                ma[x]=0;\n                ite R=s2.upper_bound((node2){pos,0,0});\n                ite L=--R;\n                ++R;\n                node2 LL=*L,RR=*R;\n                node2 nw=(node2){LL.l,RR.r,RR.r-LL.l+1};\n                s2.erase(R);\n                s2.erase(L);\n                s2.insert(nw);\n                s1.erase(s1.find((node1){LL.l,LL.r,LL.len}));\n                s1.erase(s1.find((node1){RR.l,RR.r,RR.len}));\n                s1.insert((node1){nw.l,nw.r,nw.len});\n            }\n            else{\n                node1 t=*s1.begin();\n                s1.erase(s1.find(t));\n                s2.erase(s2.find((node2){t.l,t.r,t.len}));\n                int l=t.l,r=t.r,mid=(l+r+1)/2;\n                ma[x]=mid;\n                b[++cnt]=mid;\n                a[++top]=(work){mid,1,i};\n                s1.insert((node1){l,mid-1,mid-l});\n                s1.insert((node1){mid+1,r,r-mid});\n                s2.insert((node2){l,mid-1,mid-l});\n                s2.insert((node2){mid+1,r,r-mid});\n            }\n        }\n    }\n    sort(b+1,b+cnt+1);\n    m=unique(b+1,b+cnt+1)-b-1;\n    int now=1;\n    for(int i=1;i<=tot;i++){\n        while(now<=top&&a[now].tm<=qs[i].tm){\n            a[now].pos=lower_bound(b+1,b+m+1,a[now].pos)-b;\n            add(a[now].pos,a[now].v);\n            now++;\n        }\n        qs[i].l=lower_bound(b+1,b+m+1,qs[i].l)-b;\n        qs[i].r=lower_bound(b+1,b+m+1,qs[i].r)-b;\n        writeln(query(qs[i].r)-query(qs[i].l-1));\n    }\n    return 0;\n}\n```\n",
        "postTime": 1566193518,
        "uid": 27858,
        "name": "ycyaw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3968 \u3010[TJOI2014]\u7535\u6e90\u63d2\u6392\u3011"
    },
    {
        "content": "\u5e73\u8861\u6811\u5927\u6cd5\u597d\uff01\n\n\u8fd9\u91cc\u6211\u4f7f\u7528\u7801\u91cf\u5c0f~~\u5199\u306e\u9999~~\u7684 Fhq_Treap.\n\n\n\n------------\n\n\n\u9898\u9762\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6bcf\u6b21\u4fee\u6539\u67d0\u4e00\u8282\u70b9\u4e0a\u7684\u72b6\u6001\uff0c\u5e76\u67e5\u8be2\u533a\u95f4\u5185\u72b6\u6001\u4e3a $1$ \u7684\u8282\u70b9\u4e2a\u6570\uff0c\u6211\u4eec\u66f0\u6b64\u72b6\u6001\u4e3a $ok$ .\n\n\u770b\u5230 $n_{max} = 10^9$\uff0c\u6211\u4eec\u4e0d\u514d\u8054\u60f3\u5230[NOIp D2 T3 \u5217\u961f](https://www.luogu.com.cn/problem/P3960) \uff0c**\u5176\u601d\u60f3\u4e5f\u6b63\u662f\u88c2\u5f00\u533a\u95f4**\u3002\u6240\u4ee5\u6211\u4eec\u4fdd\u5b58\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u4e3a $l\\_loc$ \u548c $r\\_loc$ \uff0c\u5e76\u4fdd\u5b58\u957f\u5ea6\u4e3a $len$ . \u521d\u59cb\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u5176 $l\\_loc$ \u548c $r\\_loc$ \u5206\u522b\u4e3a $1$ \u548c $n$ \u3002\u7528 $Split\\_New$ \u6765\u4f7f\u5f53\u524d\u533a\u95f4\u88c2\u4e3a\u4e24\u4e2a\u533a\u95f4-->\n\n```cpp\ninline void Split_New(int p, int now){//p\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u4f4d\u7f6e\uff0cnow\u4e3a\u76ee\u6807\u5230\u5de6\u7aef\u70b9\u7684\u8ddd\u79bb\n\tif(a[p].len <= now) return ; //\u5305\u542b\u5728\u53f3\u7aef\u70b9\u4e2d\uff0c\u76f4\u63a5\u9000\u51fa\n\tint u = a[p].l_loc + now - 1;//\u88c2\u4e4b\n\tint v = New(u + 1, a[p].r_loc );\n\ta[p].r_loc = u;\n\ta[p].len = now;\n\ta[p].mid = (a[p].l_loc + a[p].r_loc + 1) >> 1;\n\ta[p].r = Merge(v, a[p].r );\n\tupdate(p);\n}\n```\n\n\n\u89e3\u9898\u7684\u5173\u952e\u5728\u4e8e**\u5982\u4f55\u7ef4\u62a4\u4e0b\u4e00\u6b21\u5c06\u8981\u88ab\u5360\u7528\u7684\u8282\u70b9**\u3002\u770b\u5230\u8fd9\u91cc\u6211\u4eec\u4e0d\u514d\u8054\u60f3\u5230[P2042 [NOI2005]\u7ef4\u62a4\u6570\u5217](https://www.luogu.com.cn/problem/P2042)\u3002\u7528 $l\\_maxn$ \uff0c$ r\\_maxn$ \u5206\u522b\u4fdd\u5b58\u4ee5\u4e4b\u4e3a\u5176\u6839\u8282\u70b9 $ok$ \u4e3a 0 \u6700\u957f\u524d\u7f00\u957f\u5ea6\u548c\u540e\u7f00\u957f\u5ea6\uff0c $maxn$ \u4fdd\u5b58\u5176\u6700\u957f\u603b\u957f\u5ea6\uff0c**\u6bcf\u6b21\u9009\u53d6\u6700\u957f\u7684 $maxn$ \u7ee7\u627f\u6216\u66f4\u65b0\u5c06\u8981\u88ab\u5360\u7528\u7684\u8282\u70b9**\uff0c\u7528 $to\\_loc$ \u6765\u4fdd\u5b58\u3002\u540c\u65f6\u88ab\u5360\u7528\u7684\u8282\u70b9\u603b\u6570\u90fd\u53ef\u4ee5\u7528 $tot$ \u6765\u4fdd\u5b58\u3002\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u53ef\u5728 update \u4e2d\u88ab\u5b8c\u6210-->\n\n```cpp\ninline void update(int p){\n\tif(!p) return ;\n\ta[p].size = a[a[p].l ].size + a[a[p].r ].size + a[p].len ;\n\ta[p].maxn = 0;\n\ta[p].tot = a[a[p].l ].tot + a[a[p].r ].tot + a[p].ok ;\n\ta[p].l_maxn = a[a[p].l ].l_maxn ;\n\ta[p].r_maxn = a[a[p].r ].r_maxn ;\n\tif(a[p].l){\n\t\ta[p].maxn = a[a[p].l ].maxn;\n\t\ta[p].to_loc = a[a[p].l ].to_loc ;\n\t}\n\tif(!a[p].ok ){\n\t\tif(!a[a[p].l ].tot )\n\t\ta[p].l_maxn = a[a[p].l ].l_maxn + a[p].len + a[a[p].r ].l_maxn ;\n\t\tif(!a[a[p].r ].tot )\n\t\ta[p].r_maxn = a[a[p].r ].r_maxn + a[p].len + a[a[p].l ].r_maxn;\n\t\tint len = a[p].len + a[a[p].l ].r_maxn + a[a[p].r ].l_maxn ;\n\t\tif(len >= a[p].maxn ){\n\t\t\ta[p].maxn = len;\n\t\t\ta[p].to_loc = (a[p].l_loc - a[a[p].l ].r_maxn + a[p].r_loc + a[a[p].r ].l_maxn + 1 ) >> 1;\n\t\t}\n\t}\n\tif(a[a[p].r ].maxn >= a[p].maxn ){\n\t\ta[p].maxn = a[a[p].r ].maxn;\n\t\ta[p].to_loc = a[a[p].r ].to_loc ;\n\t}\n}\n```\n\n\u5176\u4f59\u5747\u7528 Fhq_Treap \u6b63\u5e38\u64cd\u4f5c\u5373\u53ef\u3002\n\ncode -->\n\n```cpp\n#include <cstdio>\n#include <map>\n#include <algorithm>\n#include <ctime>\n#include <cctype>\n#include <cstdlib>\n#define PT 520\n\nusing namespace std;\n\nstruct node{\n\tint l, r;\n\tint dat, size;\n\tint l_loc, r_loc, val, ok;\n\tint l_maxn, r_maxn, maxn;\n\tint tot, to_loc, len;\n}a[1000006];\n\nmap <int, int> ma;\n\nint n, q, rt, tot, x, y, z;\n\nint read() {        \n    int s = 0, f = 1;        \n    char ch = getchar();        \n    while(!isdigit(ch)) {        \n        if(ch == '-') f = -1;        \n        ch = getchar();        \n    }        \n    while(isdigit(ch)) {        \n        s = s * 10 + ch - '0';        \n        ch = getchar();        \n    }        \n    return s * f;        \n}        \n\ninline void update(int p){\n\tif(!p) return ;\n\ta[p].size = a[a[p].l ].size + a[a[p].r ].size + a[p].len ;\n\ta[p].maxn = 0;\n\ta[p].tot = a[a[p].l ].tot + a[a[p].r ].tot + a[p].ok ;\n\ta[p].l_maxn = a[a[p].l ].l_maxn ;\n\ta[p].r_maxn = a[a[p].r ].r_maxn ;\n\tif(a[p].l){\n\t\ta[p].maxn = a[a[p].l ].maxn;\n\t\ta[p].to_loc = a[a[p].l ].to_loc ;\n\t}\n\tif(!a[p].ok ){\n\t\tif(!a[a[p].l ].tot )\n\t\ta[p].l_maxn = a[a[p].l ].l_maxn + a[p].len + a[a[p].r ].l_maxn ;\n\t\tif(!a[a[p].r ].tot )\n\t\ta[p].r_maxn = a[a[p].r ].r_maxn + a[p].len + a[a[p].l ].r_maxn;\n\t\tint len = a[p].len + a[a[p].l ].r_maxn + a[a[p].r ].l_maxn ;\n\t\tif(len >= a[p].maxn ){\n\t\t\ta[p].maxn = len;\n\t\t\ta[p].to_loc = (a[p].l_loc - a[a[p].l ].r_maxn + a[p].r_loc + a[a[p].r ].l_maxn + 1 ) >> 1;\n\t\t}\n\t}\n\tif(a[a[p].r ].maxn >= a[p].maxn ){\n\t\ta[p].maxn = a[a[p].r ].maxn;\n\t\ta[p].to_loc = a[a[p].r ].to_loc ;\n\t}\n}\n\ninline int New(int l, int r){\n\ta[++tot].dat = rand();\n\ta[tot].l_loc = l;\n\ta[tot].r_loc = r;\n\ta[tot].ok = a[tot].tot = 0;\n\ta[tot].len = a[tot].size = r - l + 1;\n\tupdate(tot);\n\treturn tot;\n}\n\ninline int Merge(int xx, int yy){\n\tif(!xx || !yy) return xx + yy;\n\tif(a[xx].dat < a[yy].dat ){\n\t\ta[xx].r = Merge(a[xx].r , yy);\n\t\tupdate(xx);\n\t\treturn xx;\n\t}\n\ta[yy].l = Merge(xx, a[yy].l );\n\tupdate(yy);\n\treturn yy;\n}\n\ninline void Split_New(int p, int now){\n\tif(a[p].len <= now) return ;\n\tint u = a[p].l_loc + now - 1;\n\tint v = New(u + 1, a[p].r_loc  );\n\ta[p].r_loc = u;\n\ta[p].len = now;\n\ta[p].to_loc = (a[p].l_loc + a[p].r_loc + 1) >> 1;\n\ta[p].r = Merge(v, a[p].r );\n\tupdate(p);\n}\n\ninline void Split(int p, int now, int &x, int &y){\n\tif(!p) x = y = 0;\n\telse {\n\t\tif(a[a[p].l ].size >= now){\n\t\t\ty = p;\n\t\t\tSplit(a[p].l , now, x, a[p].l );\n\t\t}\n\t\telse {\n\t\t\tSplit_New(p, now - a[a[p].l ].size );\n\t\t\tx = p;\n\t\t\tSplit(a[p].r , now - a[a[p].l ].size - a[p].len , a[p].r, y);\n\t\t}\n\t\tupdate(p);\n\t}\n}\n\nint main(){\n\tsrand((unsigned)time(0));\n\tn = read(), q = read();\n\trt = New(1, n);\n\ta[rt].to_loc = (2 + n) >> 1;\n\tfor(int i = 1; i <= q; i++){\n\t\tint k;\n\t\tk = read();\n\t\tif(!k){\n\t\t\tint u, v;\n\t\t\tu = read(), v = read();\n\t\t\tSplit(rt, v, x, z);\n\t\t\tSplit(x, u - 1, x, y);\n\t\t\tprintf(\"%d\\n\",a[y].tot );\n\t\t\trt = Merge(Merge(x, y), z);\n\t\t}\n\t\telse {\n\t\t\tif(ma.count(k) ){\n\t\t\t\tint u = ma[k];\n\t\t\t\tma.erase(k); \n\t\t\t\tSplit(rt, u, x, z);\n\t\t\t\tSplit(x, u - 1, x, y);\n\t\t\t\ta[y].ok = 0;\n\t\t\t\ta[y].tot = 0;\n\t\t\t\ta[y].to_loc = u;\n\t\t\t\ta[y].maxn = a[y].l_maxn = a[y].r_maxn = a[y].len ;\n\t\t\t\trt = Merge(x, Merge(y, z));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint u = a[rt].to_loc ;\n\t\t\t\tma[k] = u;\n\t\t\t\tSplit(rt, u, x, z);\n\t\t\t\tSplit(x, u - 1, x, y);\n\t\t\t\ta[y].ok = 1;\n\t\t\t\ta[y].tot = 1;\n\t\t\t\ta[y].to_loc = a[y].maxn = a[y].l_maxn = a[y].r_maxn = 0;\n\t\t\t\trt = Merge(x, Merge(y, z));\n\t\t\t}\n\t\t}\n\t}\n} \n```\n\n\u5982\u679c~~\u6253\u5f97\u592a\u4e11\u88ab\u5361~~\uff0c\u90a3\u5c31\u5f00O2\u6216\u8005\u7528hash\u66ff\u6389map\u5427\uff01\n\n\u5b8c\u7ed3\u6492\u82b1\u273f\u273f\u30fd(\u00b0\u25bd\u00b0)\u30ce\u273f",
        "postTime": 1592105548,
        "uid": 209604,
        "name": "pikabi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3968 \u3010[TJOI2014]\u7535\u6e90\u63d2\u6392\u3011"
    },
    {
        "content": "set,\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u00bf\u00bf\u00bf \u4e3a\u4ec0\u4e48\u4e0d\u6311\u6218\u4e00\u4e0b\u52a8\u6001\u5f00\u70b9 $\\operatorname{FHQ \\ Treap}$ \u00bf\u00bf\u00bf\n\n\u8fd9\u6837\u5199\u4ee3\u7801\u96be\u5ea6\u5f88\u9ad8,\u4f46\u672a\u5c1d\u4e0d\u662f\u953b\u70bc\u4ee3\u7801\u80fd\u529b\u7684\u4e00\u79cd\u65b9\u6cd5, [\u5927\u96fe]\n~~(\u73c2\u80fd\u6211\u5199\u590d\u6742\u4e86,\u5e38\u6570\u5de8\u5927,\u5438\u6c27\u624d\u8fc7)~~\n\n\u5176\u5b9e\u8fd9\u9053\u9898csp2019\u524d\u4e00\u5929\u5c31\u5199\u4e86\u4e00\u4e0a\u5348,\u5199\u5471\u4e86,\u5fc3\u6001\u70b8\u4e86,\u671f\u672b\u8003\u8bd5\u5b8c\u4e86\u62d0\u56de\u5934\u91cd\u6784\u4ee3\u7801,\u7ec8\u4e8eA\u4e86\n\n---\n\n\u7531\u4e8e\u662f\u52a8\u6001\u5f00\u70b9\u5e73\u8861\u6811,\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e00\u4e2a\u533a\u95f4 $(l,r)$\n\n`len` \u4e3a\u8be5\u8282\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u957f\u5ea6,\u5373 $r-l+1$\n\n`siz` \u4e3a\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u6240\u6784\u6210\u7684\u533a\u95f4\u5927\u5c0f **(\u6ce8\u610f\u533a\u5206\u4e0a\u9762\u4e24\u4e2a,\u5426\u5219\u5199\u7740\u5199\u7740\u5c31\u6df7\u6dc6\u4e86)**\n\n\n### \u8be2\u95ee\u64cd\u4f5c\n\n\u597d\u529e,`val` \u8bb0\u5f55\u8be5\u8282\u70b9\u88ab\u4f7f\u7528\u7684\u63d2\u6392\u4e2a\u6570, `sum` \u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u88ab\u4f7f\u7528\u7684\u63d2\u6392\u4e2a\u6570\n\n\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\u7684\u65f6\u5019\u8fd9\u6837\u5c31\u597d\u4e86\n\n```\nt[k].siz=t[ls].siz+t[rs].siz+t[k].len;\nt[k].sum=t[ls].sum+t[rs].sum+t[k].val;\n```\n\n\u8be2\u95ee\u7684\u65f6\u5019\u628a\u533a\u95f4\u5206\u88c2\u51fa\u6765\u8f93\u51fasum\n\n---\n\n\u91cd\u70b9\u662f----\n\n### \u63d2\u5165/\u5220\u9664\u64cd\u4f5c\n\n\u8981\u627e\u5230\u957f\u5ea6\u6700\u5927\u7684\u8fde\u7eed\u4e00\u6bb5\u7a7a\u63d2\u5ea7 $(mxl,mxr)$\n\n\u9700\u8981\u7ef4\u62a4 `maxlen` \u5373 $mxr-mxl+1$\n\n\u548c\u8981\u63d2\u7684\u4f4d\u7f6e`mid` \u5373 $(mxl+mxr+1)/2$\n\n\u5982\u679c\u7ef4\u62a4\u4e86\u8fd9\u4e24\u4e2a,\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u7ef4\u62a4`mxl`\u548c`mxr`\u4e86.\n\n`lmax`\u548c`rmax`,\u5373\u6700\u5de6/\u53f3\u8fb9\u8fde\u7eed\u7a7a\u63d2\u5ea7\u7684\u4e2a\u6570\n\n\u4e3e\u4e2a\u4f8b\u5b50:\n\n\u6bd4\u5982\u4e00\u6bb5\u63d2\u5ea7\u957f\u8fd9\u6837:(1\u8868\u793a\u6709\u7535\u6e90\u63d2\u5165,0\u8868\u793a\u7a7a)\n\n`110100001000`\n\n\u90a3\u4e48lmax=0, rmax=3, maxlen=4 ,mid=(5+8+1)/2\n\n\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u5c31\u5f88\u663e\u7136\u4e86: `t[root].mid`\n\n\u8fd8\u9700\u8981\u5f00\u4e2a`map::vis`\u65b9\u4fbf\u4e0b\u4e00\u6b21\u5220\u9664\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u7ef4\u62a4:\n\n\u7ef4\u62a4`lmax`\u548c`rmax`\u5f88\u5957\u8def,\u4e0d\u8bf4\u4e86\n\n\u5206\u522b\u53d6\u5de6\u53f3\u5b50\u6811\u7684maxlen\u7684\u6700\u5927\u503c\n\n\u5f53`t[k].val==0`\u7684\u65f6\u5019\u8fd8\u8981\u7279\u6b8a\u8ba8\u8bba:\n\n\u8de8\u8282\u70b9k\u7684\u4e00\u6bb5\u7a7a\u63d2\u5ea7\u957f\u5ea6\u4e3a `t[k].len+t[ls].rmax+t[rs].lmax`\n\n\u66f4\u65b0\u4e00\u4e0b\u5c31\u597d\u4e86\u5566~\n\n```cpp\ninline void update(int k){\n\t#define ls t[k].ch[0]\n\t#define rs t[k].ch[1]\n\tt[k].siz=t[ls].siz+t[rs].siz+t[k].len;\n\tt[k].maxlen=0;\n\tt[k].sum=t[ls].sum+t[rs].sum+t[k].val;\n\tt[k].lmax=t[ls].lmax;\n\tt[k].rmax=t[rs].rmax;\n\tif(ls){//\u4ece\u5de6\u5b50\u6811\u66f4\u65b0\n\t\tt[k].maxlen=t[ls].maxlen;\n\t\tt[k].mid=t[ls].mid;\n\t}\n\tif(t[k].val==0){ //\u8de8\u5de6\u53f3\u5b50\u6811\u8ba8\u8bba\n\t\tif(t[ls].sum==0){\n\t\t\tt[k].lmax=t[ls].lmax+t[k].len+t[rs].lmax;\n\t\t}\n\t\tif(t[rs].sum==0){\n\t\t\tt[k].rmax=t[ls].rmax+t[k].len+t[rs].rmax;\n\t\t}\n\t\tint len=t[k].len+t[ls].rmax+t[rs].lmax;\n\t\tif(len>=t[k].maxlen){\n\t\t\tt[k].maxlen=len;\n\t\t\tt[k].mid=(t[k].l-t[ls].rmax+t[k].r+t[rs].lmax+1)>>1;\n\t\t}\n\t}\n\tif(t[rs].maxlen>=t[k].maxlen){ //\u4ece\u53f3\u5b50\u6811\u66f4\u65b0\n\t\tt[k].maxlen=t[rs].maxlen;\n\t\tt[k].mid=t[rs].mid;\n\t}\n\t#undef ls\n\t#undef rs\n}\n```\n\n*code:*\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<map>\n#include<cstdlib>\nusing namespace std;\n#define N 100010\ninline int read(){\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=(x<<3)+(x<<1)+c-'0';\n        c=getchar();\n    }\n    return x*f;\n}\nmap<int,int> mp,vis;\nint n,Q,root,cnt;\nstruct node{\n\tint ch[2],key,l,r,val,sum,siz,len;\n\tint mid,lmax,rmax,maxlen;\n}t[N<<3];\ninline int NewNode(int l,int r){\n\tint k=++cnt;\n\tt[k].key=rand();\n\tt[k].l=l,t[k].r=r;\n\tt[k].mid=(l+r+1)>>1;\n\tt[k].ch[0]=t[k].ch[1]=0;\n\tt[k].val=t[k].sum=0;\n\tt[k].maxlen=t[k].siz=t[k].len=t[k].lmax=t[k].rmax=r-l+1;\n\tmp[r]=k;\n\treturn k; \n}\ninline void update(int k){\n\t#define ls t[k].ch[0]\n\t#define rs t[k].ch[1]\n\tt[k].siz=t[ls].siz+t[rs].siz+t[k].len;\n\tt[k].maxlen=0;\n\tt[k].sum=t[ls].sum+t[rs].sum+t[k].val;\n\tt[k].lmax=t[ls].lmax;\n\tt[k].rmax=t[rs].rmax;\n\tif(ls){\n\t\tt[k].maxlen=t[ls].maxlen;\n\t\tt[k].mid=t[ls].mid;\n\t}\n\tif(t[k].val==0){\n\t\tif(t[ls].sum==0){\n\t\t\tt[k].lmax=t[ls].lmax+t[k].len+t[rs].lmax;\n\t\t}\n\t\tif(t[rs].sum==0){\n\t\t\tt[k].rmax=t[ls].rmax+t[k].len+t[rs].rmax;\n\t\t}\n\t\tint len=t[k].len+t[ls].rmax+t[rs].lmax;\n\t\tif(len>=t[k].maxlen){\n\t\t\tt[k].maxlen=len;\n\t\t\tt[k].mid=(t[k].l-t[ls].rmax+t[k].r+t[rs].lmax+1)>>1;\n\t\t}\n\t}\n\tif(t[rs].maxlen>=t[k].maxlen){\n\t\tt[k].maxlen=t[rs].maxlen;\n\t\tt[k].mid=t[rs].mid;\n\t}\n\t#undef ls\n\t#undef rs\n}\nint Merge(int l,int r){\n\tif(!l||!r)return l+r;\n\tif(t[l].key<t[r].key){\n\t\tt[l].ch[1]=Merge(t[l].ch[1],r);\n\t\tupdate(l);\n\t\treturn l;\n\t}\n\telse{\n\t\tt[r].ch[0]=Merge(l,t[r].ch[0]);\n\t\tupdate(r);\n\t\treturn r;\n\t}\n}\nvoid Split(int k,int data,int &l,int &r){\n\tif(!k){\n\t\tl=r=0;\n\t\treturn;\n\t}\n\tif(t[k].r<=data){\n\t\tl=k;\n\t\tSplit(t[k].ch[1],data,t[k].ch[1],r);\n\t}\n\telse{\n\t\tr=k;\n\t\tSplit(t[k].ch[0],data,l,t[k].ch[0]);\n\t}\n\tupdate(k);\n}\ninline void New(int pos){\n\tint k=mp.lower_bound(pos)->second;\n\tint x=t[k].l,y=t[k].r;\n\tif(x==y&&x==pos)return;\n\tint l,p,r;\n\tSplit(root,y,l,r);\n\tSplit(l,x-1,l,p);\n\tmp.erase(t[k].r);\n\tif(pos>x){\n\t\tl=Merge(l,NewNode(x,pos-1));\n\t}\n\tif(y>pos){\n\t\tr=Merge(NewNode(pos+1,y),r);\n\t} \n\troot=Merge(Merge(l,NewNode(pos,pos)),r);\n}\ninline int Query(int x,int y){\n\tNew(x),New(y);\n\tint l,p,r;\n\tSplit(root,y,l,r);\n\tSplit(l,x-1,l,p);\n\tint ans=t[p].sum;\n\troot=Merge(Merge(l,p),r);\n\treturn ans;\n}\ninline void Delete(int pos){\n\tint l,p,r;\n\tSplit(root,pos,l,r);\n\tSplit(l,pos-1,l,p);\n\tt[p].val=t[p].sum=0;\n\tt[p].mid=pos,t[p].maxlen=t[p].lmax=t[p].rmax=t[p].len;\n\troot=Merge(Merge(l,p),r);\n}\ninline void Change(int pos){\n\tNew(pos);\n\tint l,p,r;\n\tSplit(root,pos,l,r);\n\tSplit(l,pos-1,l,p);\n\tt[p].val=t[p].sum=1;\n\tt[p].mid=t[p].maxlen=t[p].lmax=t[p].rmax=0;\n\troot=Merge(Merge(l,p),r);\n}\nint main(){\n\tn=read(),Q=read();\n\troot=NewNode(1,n);\n\twhile(Q--){\n\t\tint x=read();\n\t\tif(x==0){\n\t\t\tint l=read(),r=read();\n\t\t\tprintf(\"%d\\n\",Query(l,r));\n\t\t}\n\t\telse{\n\t\t\tif(vis.count(x)){\n\t\t\t\tDelete(vis[x]);\n\t\t\t\tvis.erase(x);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tvis[x]=t[root].mid;\n\t\t\t\tChange(t[root].mid);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n[*Froggy's blog*](https://www.luogu.org/blog/1445353309froggy/)\n\n#### \u5471!!\n\n\n\n\n",
        "postTime": 1578455363,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3968 \u3010[TJOI2014]\u7535\u6e90\u63d2\u6392\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd**\u7ebf\u6bb5\u6811+map** \u7684\u505a\u6cd5\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f [Hotel](https://www.luogu.com.cn/problem/P2894) \u7684\u52a0\u5f3a\u7248\u3002\n\n\u90a3\u4e48\u501f\u7528 Hotel \u8fd9\u9053\u9898\u7684\u601d\u60f3\uff0c\u6b64\u9898\u6211\u4eec\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f\n- \u6700\u957f\u8fde\u7eed\u7a7a\u63d2\u6392\u6570\u91cf\n- \u4ece\u5de6\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed\u7a7a\u63d2\u6392\u6570\u91cf\n- \u4ece\u53f3\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed\u7a7a\u63d2\u6392\u6570\u91cf\n- \u6700\u957f\u8fde\u7eed\u7a7a\u63d2\u6392\u7684\u4e2d\u95f4\u4f4d\u7f6e\n- \u88ab\u4f7f\u7528\u7684\u63d2\u6392\u6570\u91cf\n\n\u524d\u4e09\u4e2a\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u662f\u8fd9\u79cd**\u6700\u957f\u8fde\u7eedxx\u5e8f\u5217**\u5f88\u5e38\u89c1\u7684\u4e00\u4e2a\u601d\u8def\u3002\n\u7c7b\u4f3c\u7684\u9898\u9664\u4e86 Hotel \u8fd8\u6709\u4e00\u4e2a [Step](https://www.luogu.com.cn/problem/P6492)\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u5148\u53bb\u505a\u4e00\u505a\u3002\n\n\u6700\u540e\u4e00\u4e2a\u4fe1\u606f\u662f\u8d64\u88f8\u88f8\u7684\u533a\u95f4\u52a0\u3002\n\n\u60df\u4e00\u7684\u96be\u70b9\u5c31\u662f\u8fd9\u4e2a**\u6700\u957f\u8fde\u7eed\u7a7a\u63d2\u6392\u7684\u4e2d\u95f4\u4f4d\u7f6e**\u4e86\u3002\u4e0d\u8fc7\u5982\u679c\u7528\u8111\u5b50\u60f3\u4e00\u60f3\uff0c\u4f3c\u4e4e\u4e5f\u4e0d\u662f\u5f88\u96be\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5de6\u533a\u95f4\u4ece\u53f3\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed\u63d2\u6392\u6570\u91cf\uff0c\u4ee5\u53ca\u53f3\u533a\u95f4\u4ece\u5de6\u5f00\u59cb\u7684\u8fde\u7eed\u63d2\u6392\u6570\u91cf\u3002\u90a3\u4e48\u753b\u4e00\u4e2a\u56fe\u5c31\u77e5\u9053\u4e86\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cgsx3omg.png)\n\n\uff08\u56fe\u4e2d $rmx$ \u8868\u793a\u4ece\u53f3\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed\u7a7a\u63d2\u6392\u6570\u91cf\uff0c $lmx$ \u8868\u793a\u4ece\u5de6\u5f00\u59cb\uff09\n\n\u653e\u4e00\u4e0b pushup \u90e8\u5206\u7684\u4ee3\u7801\uff1a\n\n```cpp\ninline void pushup(int u,int l,int r)\n{\n\tint mid=(l+r)>>1;\n\tused[u]=used[ls[u]]+used[rs[u]];\n\tlmx[u]=lmx[ls[u]];\n\tif((mid-l+1)==mx[ls[u]])\tlmx[u]+=lmx[rs[u]];\n\trmx[u]=rmx[rs[u]];\n\tif((r-mid)==mx[rs[u]])\trmx[u]+=rmx[ls[u]];\n\tmx[u]=0;\n\tif(mx[rs[u]]>mx[u])\tmx[u]=mx[rs[u]],m[u]=m[rs[u]];\n\tif(lmx[rs[u]]+rmx[ls[u]]>mx[u])\tmx[u]=lmx[rs[u]]+rmx[ls[u]],m[u]=mid-rmx[ls[u]]+1 +(mx[u]>>1);\n\tif(mx[ls[u]]>mx[u])\tmx[u]=mx[ls[u]],m[u]=m[ls[u]];\n   //m-\u6700\u957f\u8fde\u7eed\u7a7a\u63d2\u6392\u7684\u4e2d\u95f4\u4f4d\u7f6e\n   //mx-\u6700\u957f\u8fde\u7eed\u7a7a\u63d2\u6392\u6570\u91cf\n   //used-\u88ab\u4f7f\u7528\u7684\u63d2\u6392\u6570\u91cf\n}\n```\n\u90a3\u4e48 map \u7528\u5728\u54ea\u91cc\u5462\uff1f\n\n\u7528\u5728 $k$ \u90a3\u91cc\uff0c\u7528\u6765\u8bb0\u5f55 $k$ \u53f7\u5b66\u751f\u4f7f\u7528\u7684\u7535\u6e90\u63d2\u6392\u3002\n\n\u653e\u4e00\u4e0b\u6b64\u5904\u4ee3\u7801\n\n```cpp\nwhile(m--)\n{\n\tint k=read();\n\tif(!k)\n\t{\n\t\tint l=read(),r=read();\n\t\tprintf(\"%d\\n\",t.query(rt,1,n,l,r));\n\t}\n\telse\n\t{\n\t\tif(mp[k])\tt.modify(rt,1,n,mp[k],0),mp[k]=0;\n\t\telse\tmp[k]=t.m[rt],t.modify(rt,1,n,mp[k],1);\n\t}\n}\n```\n\n\u5927\u5bb6\u4e0d\u59a8\u7ed3\u5408\u4ee3\u7801\u7406\u89e3\u4e00\u4e0b\u6211\u8bf4\u7684\u4e1c\u897f\u3002\n\n[\u5b8c\u6574\u4ee3\u7801](https://www.luogu.com.cn/paste/1tw4362o)\uff0c\u53ef\u80fd\u6709\u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\uff0c\u9700\u8981\u7684\u53ef\u4ee5\u5eb7\u5eb7\u3002",
        "postTime": 1628566776,
        "uid": 181775,
        "name": "_Fontainebleau_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u300cP3968 [TJOI2014]\u7535\u6e90\u63d2\u6392\u300d"
    },
    {
        "content": "\u773c\u778e\u8c03\u4e86$40$\u5206\u949f\uff08\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u73c2\u6735\u8389\u6811\u7684\u601d\u60f3\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u8fd9\u4e2a\u6700\u957f\u7684\u533a\u95f4\uff0c\u4ee5\u533a\u95f4\u957f\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u9006\u5e8f\u6392\u5e8f\u3002\u4f46\u662f\u5982\u679c\u53ea\u7ef4\u62a4\u957f\u5ea6\u7684\u8bdd\u6211\u4eec\u5c06\u65e0\u6cd5\u5408\u5e76\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u518d\u7ef4\u62a4\u4e00\u68f5\u5e73\u8861\u6811\u6765\u8f85\u52a9\u5408\u5e76\uff0c\u4ee5\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ee5\u533a\u95f4\u957f\u5ea6\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6b63\u5e8f\u6392\u5e8f\u3002\u6bcf\u6b21\u4fee\u6539\u65f6\u9700\u8981\u5728\u8fd9\u4e24\u68f5\u5e73\u8861\u6811\u91cc\u540c\u65f6\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u3002\n\n\u5f53\u7136\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u8fd9\u4e2a\u6700\u957f\u533a\u95f4\uff0c\u4e0d\u8fc7\u6bd4\u8d77\u8fd9\u4e2a\u8981\u9ebb\u70e6\u4e00\u4e9b\u3002\n\n\u7531\u4e8e$k$\u975e\u5e38\u5927\u6240\u4ee5\u518d\u7528\u4e2a$map$\u8fdb\u884c\u6620\u5c04\u3002\n\n\u67e5\u8be2\u76f4\u63a5\u901a\u8fc7\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u505a\u5373\u53ef\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6\u4e3a$\\Theta(n\\log n)$\n\n\u5751\u70b9\uff1a\u5982\u679c\u533a\u95f4\u957f\u5ea6\u662f\u5076\u6570\uff0c\u4f1a\u9009\u62e9\u9760\u53f3\u7684\u90a3\u4e2a\u4e2d\u70b9\u3002\n\n$\\Large Code:$\n\n```cpp\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\nstruct node {\n\tint l, len;\n\tnode(int l, int len) : l(l), len(len) {}\n\tbool operator<(const node& f) const { return len == f.len ? l > f.l : len > f.len; }\n};\nstruct snode {\n\tint l, len;\n\tsnode(int l, int len) : l(l), len(len) {}\n\tbool operator<(const snode& f) const { return l == f.l ? len < f.len : l < f.l; }\n};\nset<node> s1;\nset<snode> s2;\nmap<int, int> mp;\nstruct Node {\n\tint child[2], w;\n} t[40000001];\nint cnt;\ninl void insert(int& k, int l, int r, int p, int w) {\n\tif (!k) k = ++cnt;\n\tif (l == r) return (void)(t[k].w += w);\n\tre mid = l + r >> 1;\n\tp <= mid ? insert(ls(k), l, mid, p, w) : insert(rs(k), mid + 1, r, p, w);\n\tt[k].w = t[ls(k)].w + t[rs(k)].w;\n}\ninl int query(int k, int l, int r, int x, int y) {\n\tif (l >= x && r <= y) return t[k].w;\n\tre mid = l + r >> 1, ans = 0;\n\tif (x <= mid) ans = query(ls(k), l, mid, x, y);\n\tif (y > mid) ans += query(rs(k), mid + 1, r, x, y);\n\treturn ans;\n}\nsigned main() {\n\tre n = read<int>(), m = read<int>(), k, x, y, mid, rt = 0;\n\ts1.insert(node(1, n)), s2.insert(snode(1, n));\n\twhile (m--) {\n\t\tk = read<int>();\n\t\tif (k) {\n\t\t\tif (mp.find(k) == mp.end()) {\n\t\t\t\tx = s1.begin()->l, y = x + s1.begin()->len - 1, mid = x + y >> 1;\n\t\t\t\tif (!((y - x + 1) & 1))mid++;\n\t\t\t\tinsert(rt, 1, n, mid, 1);\n\t\t\t\ts2.erase(snode(x, s1.begin()->len)), s1.erase(s1.begin()), mp[k] = mid;\n\t\t\t\tif (mid > x) s1.insert(node(x, mid - x)), s2.insert(snode(x, mid - x));\n\t\t\t\tif (mid < y) s1.insert(node(mid + 1, y - mid)), s2.insert(snode(mid + 1, y - mid));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx = mp[k], mp.erase(k), k = x;\n\t\t\t\tinsert(rt, 1, n, k, -1);\n\t\t\t\tset<snode>::iterator itr = s2.lower_bound(snode(x, 1)), itl;\n\t\t\t\tif (itr != s2.begin()) {\n\t\t\t\t\titl = prev(itr);\n\t\t\t\t\tif (itl->l + itl->len + 1 == itr->l) {\n\t\t\t\t\t\tre l = itl->l, len = itl->len + itr->len + 1;\n\t\t\t\t\t\ts1.erase(node(l, itl->len)), s1.erase(node(itr->l, itr->len)), s1.insert(node(l, len));\n\t\t\t\t\t\ts2.erase(itl), s2.erase(itr), s2.insert(snode(l, len));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ts2.insert(snode(k, 1)), s1.insert(node(k, 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (k == itr->l - 1) {\n\t\t\t\t\t\tre l = itr->l, len = itr->len + 1;\n\t\t\t\t\t\ts1.erase(node(l, len - 1)), s1.insert(node(k, len));\n\t\t\t\t\t\ts2.erase(s2.begin()), s2.insert(snode(k, len));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ts1.insert(node(k, 1)), s2.insert(snode(k, 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tx = read<int>(), y = read<int>();\n\t\t\tprintf(\"%d\\n\", query(1, 1, n, x, y));\n\t\t}\n\t}\n}\n```\n\n",
        "postTime": 1578906258,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P3968 \u7535\u6e90\u63d2\u6392"
    },
    {
        "content": "~~\u697c\u4e0a\u51e0\u4f4d\u592a\u83dc\u4e86~~ \u6211\u53ef\u4ee5\u7eaf\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n\n\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u4e00\u4e0b\u5f53\u524d\u7ed3\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u7684\n\n1. \u5de6\u9762\u6700\u957f\u8fde\u7eed\u6bb5\n\n2. \u53f3\u9762\u6700\u957f\u8fde\u7eed\u6bb5\n\n3. \u4e2d\u95f4\u6700\u957f\u8fde\u7eed\u6bb5\uff08\u6ce8\u610f\u662f\u4e25\u683c\u4e2d\u95f4\uff0c\u4e0d\u5305\u542b [1] [2]\uff09\u5e76\u4e14\u8bb0\u5f55\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u5728\u54ea\u91cc ( `lpos` , `rpos` )\n\n\u7136\u540e\u5408\u5e76\u7ed3\u70b9\u5c31\u662f\u5927\u8ba8\u8bba\n\n\u518d\u987a\u4fbf\u8bb0\u4e00\u4e0b\u8fd9\u4e2a\u7ed3\u70b9\u91cc\u9762\u6709\u591a\u5c11\u6fc0\u6d3b\u7684\u63d2\u5934\u3002\u56de\u7b54\u8981\u7528\u3002\n\n\u7136\u540e\u63d2\u5165\u7684\u65f6\u5019\u5bf9\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u7684 [1] [2] [3] \u6309\u7167\u5927\u5c0f\u518d\u6b21\u5927\u8ba8\u8bba\u5373\u53ef\u3002\n\n\u7136\u540e\u5c31\u662f\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5269\u4e0b\u6ca1\u5565\u597d\u8bb2\u7684\uff0c\u5b9e\u73b0\u4e0a\u7684\u7ec6\u8282\u6ca1\u6cd5\u7ec6\u8bb2\uff0c\u770b\u4ee3\u7801\u5427\uff08\u6342\u8138\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<map>\n#define ll long long\nusing namespace std;\n\nint n,m,opt;\nmap<int,int> show;\n\ntemplate<typename int_t>\nvoid readx(int_t& x)\n{\n\tx=0; int_t k=1; char ch=0;\n\twhile (ch<'0' || ch>'9') { ch=getchar(); if (ch=='-') k=-1; }\n\twhile (ch>='0' && ch<='9') { x=x*10+ch-'0'; ch=getchar(); }\n\tx*=k;\n}\n\nnamespace SGT\n{\n\t#define LCH tree[inx].ch[0]\n\t#define RCH tree[inx].ch[1]\n\t\n\tstruct Seg_Tree\n\t{\n\t\tint ch[2],val;\n\t\tint lsiz,rsiz,msiz;\n\t\tint lpos,rpos;\n\t\t\n\t\tSeg_Tree() { val=rsiz=msiz=lpos=rpos=ch[0]=ch[1]=0; }\n\t\t\n\t}tree[2200010];\n\tint lx,rx,_pos,_val,tsiz,root=1;\n\t\n\tSeg_Tree Empty_Node(int l,int r)\n\t{\n\t\tSeg_Tree ret;\n\t\tret.lpos=l; ret.rpos=r;\n\t\tret.lsiz=ret.rsiz=ret.msiz=(r-l+1);\n\t\treturn ret;\n\t}\n\t\n\tSeg_Tree Update(Seg_Tree A,Seg_Tree B,int al,int ar,int bl,int br)\n\t{\n\t\tSeg_Tree C;\n\t\t\n\t\tC.lsiz=A.lsiz;\n\t\tif (A.lsiz==ar-al+1) C.lsiz=A.lsiz+B.lsiz;\n\t\tC.rsiz=B.rsiz;\n\t\tif (B.rsiz==br-bl+1) C.rsiz+=A.rsiz;\n\t\t\n\t\t// Update Part\n\t\tC.msiz=A.rsiz+B.lsiz;\n\t\tC.lpos=ar-A.rsiz+1;\n\t\tC.rpos=bl+B.lsiz-1;\n\t\t// Case 2\n\t\tif (A.msiz>C.msiz)\n\t\t{\n\t\t\tC.msiz=A.msiz;\n\t\t\tC.lpos=A.lpos;\n\t\t\tC.rpos=A.rpos;\n\t\t}\n\t\t//Case 3\n\t\tif (B.msiz>=C.msiz)\n\t\t{\n\t\t\tC.msiz=B.msiz;\n\t\t\tC.lpos=B.lpos;\n\t\t\tC.rpos=B.rpos;\n\t\t}\n\t\treturn C;\n\t}\n\t\n\tvoid Init(int siz) { tree[++tsiz]=Empty_Node(1,siz); }\n\t\n\tvoid Upd(int& inx,int l,int r)\n\t{\n\t\tif (!inx) inx=++tsiz;\n\t\tif (l==_pos && l==r)\n\t\t{\n\t\t\tif (_val) tree[inx].lpos=tree[inx].rpos=-1;\n\t\t\telse tree[inx].lpos=tree[inx].rpos=l;\n\t\t\ttree[inx].lsiz=tree[inx].rsiz=tree[inx].msiz=_val^1;\n\t\t\ttree[inx].val=_val;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif (_pos<=mid) Upd(LCH,l,mid);\n\t\telse Upd(RCH,mid+1,r);\n\t\t\n\t\t// Update nodes\n\t\tint lch=LCH,rch=RCH;\n\t\ttree[inx]=Update(lch?tree[lch]:Empty_Node(l,mid),\n\t\t\t\t\t\t rch?tree[rch]:Empty_Node(mid+1,r),\n\t\t\t\t\t\t l,mid,mid+1,r);\n\t\tLCH=lch; RCH=rch;\n\t\ttree[inx].val=tree[LCH].val+tree[RCH].val;\n\t}\n\t\n\tint Qry(int& inx,int l,int r)\n\t{\n\t\tif (!inx) return 0;\n\t\tif (l>=lx && r<=rx) return tree[inx].val;\n\t\tint mid=(l+r)>>1,ret=0;\n\t\tif (lx<=mid) ret+=Qry(LCH,l,mid);\n\t\tif (rx>mid) ret+=Qry(RCH,mid+1,r);\n\t\treturn ret;\n\t}\n\t\n\t#undef LCH\n\t#undef RCH\n};\n\nint main()\n{\n\treadx(n); readx(m);\n\tSGT::Init(n);\n\t\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\treadx(opt);\n\t\tif (!opt)\n\t\t{\n\t\t\treadx(SGT::lx); readx(SGT::rx);\n\t\t\tprintf(\"%d\\n\",SGT::Qry(SGT::root,1,n));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!show[opt])\n\t\t\t{\n\t\t\t\tif (SGT::tree[1].rsiz>=max(SGT::tree[1].msiz,SGT::tree[1].lsiz)) // case 1: right\n\t\t\t\t\tSGT::_pos=(n-SGT::tree[1].rsiz+1) + SGT::tree[1].rsiz/2;\n\t\t\t\t\t\n\t\t\t\telse if (SGT::tree[1].msiz>=SGT::tree[1].lsiz) // case 2: mid\n\t\t\t\t\tSGT::_pos=SGT::tree[1].lpos + ( SGT::tree[1].rpos-SGT::tree[1].lpos+1 )/2;\n\t\t\t\t\n\t\t\t\telse // case 3: left\n\t\t\t\t\tSGT::_pos=1 + SGT::tree[1].lsiz/2;\n\t\t\t\t\n\t\t\t\tSGT::_val=1; show[opt]=SGT::_pos;\n\t\t\t\tSGT::Upd(SGT::root,1,n);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSGT::_val=0; SGT::_pos=show[opt];\n\t\t\t\tSGT::Upd(SGT::root,1,n);\n\t\t\t\tshow[opt]=0;\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1548161157,
        "uid": 21512,
        "name": "GNAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3968 \u3010[TJOI2014]\u7535\u6e90\u63d2\u6392\u3011"
    },
    {
        "content": "\u697c\u4e0a\u8bf4\uff0c\u6807\u7b97\u5e94\u8be5\u662f\u7ebf\u6bb5\u6811+```set```\u3002\u6211\u5199\u7684\u5c31\u662f```std::set```+```std::map```+\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002\n\ns1\u7ef4\u62a4\u5404\u4e2a\u7a7a\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\uff0cs2\u7ef4\u62a4\u533a\u95f4\u7684\u957f\u5ea6\u548c\u5de6\u7aef\u70b9\uff0cmap\u8bb0\u5f55\u5b66\u751f\u5bf9\u5e94\u7684\u63d2\u6392\u3002\u63d2\u5165\u65f6\uff0c\u4eces2\u4e2d\u627e\u51fa\u6700\u5927\u533a\u95f4\u957f\u5ea6\uff0c\u4fee\u6539s1\u548cs2\uff1b\u5220\u9664\u65f6\uff0c\u4eces1\u4e2d\u627e\u51fa\u4e24\u4fa7\u7684\u533a\u95f4\uff0c\u4fee\u6539s1\u548cs2\u3002\u67e5\u8be2\u65f6\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u795dNOIp2018rp++\uff01\n\n```\n#include<cstdio>\n#include<cctype>\n#include<utility>\n#include<set>\n#include<map>\n#define PII std::pair<int,int>\n#define IT std::set<PII>::iterator\n\nint Read()\n{\n\tint x=0;char c=getchar();\n\twhile(!isdigit(c))\n\t{\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\n\t{\n\t\tx=x*10+(c&15);\n\t\tc=getchar();\n\t}\n\treturn x;\n}\n\nstd::set<PII> s1;\nstd::set<PII> s2;\nstd::map<int,int> stu;\n\nint Insert()\n{\n\tint l=s2.rbegin()->second;\n\tint r=s2.rbegin()->second+s2.rbegin()->first-1;\n\tint pos=(l+r+1)>>1;//\u5751\u70b9\uff0c\u8bb0\u5f97\u8fd9\u4e2a\u52a01\n\ts2.erase(--s2.end());\n\ts1.erase(PII(l,r));\n\tif(l!=pos)\n\t{\n\t\ts1.insert(PII(l,pos-1));\n\t\ts2.insert(PII(pos-1-l+1,l));\n\t}\n\tif(r!=pos)\n\t{\n\t\ts1.insert(PII(pos+1,r));\n\t\ts2.insert(PII(r-pos,pos+1));\n\t}\n\treturn pos;\n}\n\nvoid Erase(int pos)\n{\n\tIT back=s1.lower_bound(PII(pos,pos));\n\tIT front=back;\n\t--front;\n\tint l=pos,r=pos;\n\tif(front->second==pos-1)\n\t{\n\t\tl=front->first;\n\t\ts2.erase(PII(front->second-front->first+1,front->first));\n\t\ts1.erase(front);\n\t}\n\tif(back->first==pos+1)\n\t{\n\t\tr=back->second;\n\t\ts2.erase(PII(back->second-back->first+1,back->first));\n\t\ts1.erase(back);\n\t}\n\ts1.insert(PII(l,r));\n\ts2.insert(PII(r-l+1,l));\n}\n\nstruct seg\n{\n\tint l,r,sum;\n\tint ch[2];\n} tree[3000005];\nint size=1;\n\nvoid Add(int pos,int val,int L,int R,int idx)\n{\n\tif(L==R)\n\t\ttree[idx].sum+=val;\n\telse\n\t{\n\t\tint mid=(L+R)>>1;\n\t\tif(pos<=mid)\n\t\t{\n\t\t\tif(!tree[idx].ch[0])\n\t\t\t\ttree[idx].ch[0]=++size;\n\t\t\tAdd(pos,val,L,mid,tree[idx].ch[0]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!tree[idx].ch[1])\n\t\t\t\ttree[idx].ch[1]=++size;\n\t\t\tAdd(pos,val,mid+1,R,tree[idx].ch[1]);\n\t\t}\n\t\ttree[idx].sum=tree[tree[idx].ch[0]].sum+tree[tree[idx].ch[1]].sum;\n\t}\n}\n\nint Query(int l,int r,int L,int R,int idx)\n{\n\tif(l<=L&&R<=r)\n\t\treturn tree[idx].sum;\n\telse\n\t{\n\t\tint mid=(L+R)>>1;\n\t\tint ans=0;\n\t\tif(l<=mid)\n\t\t{\n\t\t\tif(!tree[idx].ch[0])\n\t\t\t\ttree[idx].ch[0]=++size;\n\t\t\tans+=Query(l,r,L,mid,tree[idx].ch[0]);\n\t\t}\n\t\tif(r>mid)\n\t\t{\n\t\t\tif(!tree[idx].ch[1])\n\t\t\t\ttree[idx].ch[1]=++size;\n\t\t\tans+=Query(l,r,mid+1,R,tree[idx].ch[1]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n\nint main()\n{\n\tint n=Read(),q=Read();\n\ts1.insert(PII(1,n));\n\ts2.insert(PII(n,1));\n\tint k,l,r,pos;\n\twhile(q--)\n\t{\n\t\tk=Read();\n\t\tif(!k)\n\t\t{\n\t\t\tl=Read(),r=Read();\n\t\t\tprintf(\"%d\\n\",Query(l,r,1,n,1));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(stu[k]==0)\n\t\t\t{\n\t\t\t\tpos=stu[k]=Insert();\n\t\t\t\tAdd(pos,1,1,n,1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tErase(pos=stu[k]);\n\t\t\t\tAdd(pos,-1,1,n,1);\n\t\t\t\tstu[k]=0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1541574549,
        "uid": 53374,
        "name": "SuperJvRuo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3968 \u3010[TJOI2014]\u7535\u6e90\u63d2\u6392\u3011"
    },
    {
        "content": "\u4f30\u8ba1\u6807\u7b97\u662f\u7ebf\u6bb5\u6811+set\n\n\u4e00\u79cd\u771f\u7684\u4e0d\u7528\u4ed4\u7ec6\u60f3\u7684\u505a\u6cd5\u662f\uff1a\n\n\u7528\u4e00\u4e2aset\u7ef4\u62a4\u6700\u957f\u7684\u8fde\u7eed\u533a\u95f4\uff0c\u518d\u7528\u4e00\u4e2aset\u7ef4\u62a4\u5df2\u88ab\u7528\u7684\u4f4d\u7f6e\u96c6\u5408\n\n\u5bf9\u4e8e\u63d2\u5165\uff0c\u628a\u6700\u957f\u533a\u95f4\u62ff\u51fa\u6765\uff0c\u5728\u4e2d\u95f4\u63d2\u5165\uff0c\u66f4\u65b0\u4e00\u4e0b\u7b2c\u4e00\u4e2aset\n\n\u5bf9\u4e8e\u5220\u9664\uff0c\u628a\u5de6\u53f3\u5bf9\u5e94\u533a\u95f4\u62ff\u51fa\u6765\u5408\u5e76\uff0c\u5220\u9664\u539f\u533a\u95f4\n\n\u5bf9\u4e8e\u8be2\u95ee\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u628a\u5c0f\u4e8e\u7b49\u4e8er\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u5927\u4e8e\u7b49\u4e8el\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e2d\u95f4\u7684\u5143\u7d20\u4e2a\u6570\u627e\u51fa\u6765\n\n\u7136\u540e\u53d1\u73b0set\u7684\u8fed\u4ee3\u5668\u4e0d\u8d44\u74f7\u76f8\u51cfQAQ\n\n\u6240\u4ee5\u53ea\u80fd\u8001\u8001\u5b9e\u5b9e\u5730\u6253\u5e73\u8861\u6811\u4e86\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <ctime>\n#include <map>\n#include <queue>\n#include <cstdlib>\n#include <string>\n#include <climits>\n#include <set>\n#include <vector>\n#include <complex>\nusing namespace std;\ninline int read(){\n\tint k=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){k=k*10+ch-'0';ch=getchar();}\n\treturn k*f;\n}\ninline void write(int x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>9)write(x/10);putchar(x%10+'0');\n}\ninline void writeln(int x){\n\twrite(x);puts(\"\");\n}\nmap<int,int>mp;\nint n,Q,cnt=0;\nint b[100010];\nstruct ppap{int x,l;};\nbool operator <(ppap a,ppap b){return a.l==b.l?a.x>b.x:a.l>b.l;}\nset<ppap>s;\nstruct tree{int v,pri,ls,rs,s;}t[200010];\nint Cnt=0,rt=0;\ninline void pushup(int x){t[x].s=t[t[x].ls].s+t[t[x].rs].s+1;}\ninline int tnew(int v){\n\tCnt++;t[Cnt].v=v;t[Cnt].ls=t[Cnt].rs=0;t[Cnt].pri=rand();\n\tt[Cnt].s=1;return Cnt;\n}\ninline void split(int nod,int v,int &x,int &y){\n\tif(!nod)x=y=0;\n\telse{\n\t\tif(t[nod].v<=v)x=nod,split(t[nod].rs,v,t[nod].rs,y);\n\t\telse y=nod,split(t[nod].ls,v,x,t[nod].ls);\n\t\tpushup(nod);\n\t}\n}\ninline int merge(int x,int y){\n\tif(x*y==0)return x+y;\n\tif(t[x].pri<t[y].pri){\n\t\tt[x].rs=merge(t[x].rs,y);\n\t\tpushup(x);return x;\n\t}else{\n\t\tt[y].ls=merge(x,t[y].ls);\n\t\tpushup(y);return y;\n\t}\n}\ninline int smin(int x){\n\twhile(t[x].ls)x=t[x].ls;\n\treturn t[x].v;\n}\ninline int smax(int x){\n\twhile(t[x].rs)x=t[x].rs;\n\treturn t[x].v;\n}\nint main()\n{\n\tsrand(19260817);\n\tn=read();Q=read();\n\ts.insert((ppap){0,n});\n\tint p=tnew(0),q=tnew(n+1);\n\trt=merge(p,q);\n\twhile(Q--){\n\t\tint op=read();\n\t\tif(op==0){\n\t\t\tint l=read(),r=read(),x=0,y=0;\n\t\t\tsplit(rt,l-1,x,y);int ans=t[x].s;\n\t\t\trt=merge(x,y);split(rt,r,x,y);\n\t\t\tans=t[x].s-ans;rt=merge(x,y);\n\t\t\twriteln(ans);\n\t\t}else{\n\t\t\tif(!mp[op])mp[op]=++cnt;\n\t\t\top=mp[op];\n\t\t\tif(!b[op]){\n\t\t\t\tint x=0,y=0;\n\t\t\t\tppap now=*s.begin();\n\t\t\t\ts.erase(s.begin());\n\t\t\t\tb[op]=now.x+1+now.l/2;\n\t\t\t\tsplit(rt,b[op],x,y);\n\t\t\t\tint qa=smin(y);\n\t\t\t\ts.insert((ppap){now.x,b[op]-now.x-1});\n\t\t\t\ts.insert((ppap){b[op],qa-b[op]-1});\n\t\t\t\tint p=tnew(b[op]);\n\t\t\t\trt=merge(merge(x,p),y);\n\t\t\t}else{\n\t\t\t\tint x=0,k=0,y=0;\n\t\t\t\tsplit(rt,b[op],k,y);\n\t\t\t\tsplit(k,b[op]-1,x,k);\n\t\t\t\tint qa=smin(y),qb=smax(x);\n\t\t\t\trt=merge(x,y);\n\t\t\t\ts.erase((ppap){qb,b[op]-qb-1});\n\t\t\t\ts.erase((ppap){b[op],qa-b[op]-1});\n\t\t\t\ts.insert((ppap){qb,qa-qb-1});\n\t\t\t\tb[op]=0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1520984290,
        "uid": 5716,
        "name": "jzqjzq",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3968 \u3010[TJOI2014]\u7535\u6e90\u63d2\u6392\u3011"
    }
]