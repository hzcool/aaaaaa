[
    {
        "content": "\u5e94\u67d0\u540c\u5b66\u9080\u8bf7, \u505a\u4e86\u4e00\u4e0b\u6708\u8d5b\u9898. \u611f\u89c9\u8fd9\u9898\u633a\u6709\u610f\u601d, \u6765\u5199\u4e00\u7bc7\u9898\u89e3.\n\n\u95f2\u8a00\u5c11\u53d9, \u4e66\u5f52\u6b63\u4f20.\n\n# \u601d\u8def\n\n\u770b\u5230\u8fd9\u9898, \u6211\u9996\u5148\u60f3\u5230\u5206\u5757. \u5982\u679c\u628a\u6574\u4e2a\u503c\u57df\u5206\u6210\u5927\u7ea6 $\\sqrt{n}$ \u5757.\n\u8003\u8651\u4e00\u6b21\u4fee\u6539\u4e4b\u540e, \u6709\u4e00\u4e9b\u533a\u95f4\u4f1a\u5927\u5e45\u5ea6\u51cf\u5c0f, \u4ed6\u4eec\u8de8\u8fc7\u7684\u5757\u7684\u4e2a\u6570\u4f1a\u53d8\u5c11.\n\u5bf9\u4e8e\u8fd9\u6837\u7684\u533a\u95f4, \u6211\u4eec\u8bd5\u56fe\u5feb\u901f\u627e\u5230\u4ed6\u4eec, \u627e\u5230\u4e4b\u540e\u66b4\u529b\u4fee\u6539.\n\u56e0\u4e3a\u6bcf\u4e2a\u533a\u95f4\u6700\u591a\u88ab\u8fd9\u6837\u4fee\u6539\u4e0d\u8d85\u8fc7 $\\sqrt{n}$ \u6b21, \u6240\u4ee5\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f\u5bf9\u7684\n(\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u8fd9\u6837\u7684\u533a\u95f4).\n\n\u63a5\u4e0b\u6765\u8003\u8651\u54ea\u4e9b\u533a\u95f4\u53d1\u751f\u4e86\u53d8\u5316, \u4f46\u662f\u8de8\u8fc7\u7684\u5757\u7684\u4e2a\u6570\u4e0d\u4f1a\u53d8\u5c11.\n\u53ef\u4ee5\u53d1\u73b0, \u8bbe\u4fee\u6539\u7684\u5de6\u53f3\u7aef\u70b9\u662f $L, R$, \u90a3\u4e48\u53ea\u6709\u5de6\u7aef\u70b9\u548c $L$ \u540c\u5757\u7684\u533a\u95f4,\n\u6216\u8005\u53f3\u7aef\u70b9\u548c $R$ \u540c\u5757\u7684\u533a\u95f4, \u624d\u6709\u53ef\u80fd\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5.\n\n\u6211\u4eec\u5148\u8003\u8651\u4e00\u79cd\u7b80\u5355\u60c5\u51b5, \u90a3\u5c31\u662f $L, R$ \u4e0d\u5904\u4e8e\u540c\u4e00\u4e2a\u5757,\n\u5e76\u4e14\u6211\u4eec\u53ea\u8003\u8651\u6574\u4e2a\u533a\u95f4\u90fd\u5728 $L$ \u6240\u5728\u5757\u5185\u7684\u533a\u95f4.\n\u8bbe\u8fd9\u4e2a\u533a\u95f4\u662f $[l, r]$, \u90a3\u4e48\u5982\u679c $L \\in [l, r]$, \u5219 $[l, r]$ \u4f1a\u53d8\u6210 $[L, r]$.\n\u5426\u5219 $[l, r]$ \u4f1a\u4fdd\u6301\u4e0d\u53d8.\n\n\u8fd9\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u597d\u529e\u6cd5\u53bb\u7ef4\u62a4.\n\u90a3\u4e48\u66b4\u529b\u4fee\u6539\u53ef\u4e0d\u53ef\u884c\u5462?\n\u597d\u6d88\u606f\u662f\u66b4\u529b\u662f\u53ef\u884c\u7684!\n\n\u6211\u4eec\u628a\u4fee\u6539\u533a\u95f4\u770b\u6210\u5220\u9664\u540e\u91cd\u65b0\u63d2\u5165.\n\u90a3\u4e48\u5728\u8fd9\u4e00\u6b21\u4fee\u6539\u4e2d, \u6211\u4eec\u53ea\u63d2\u5165\u4e86 $O(\\sqrt{n})$ \u79cd\u533a\u95f4.\n\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u628a\u76f8\u540c\u7684\u533a\u95f4\u5408\u5e76\u5e76\u8ba1\u7b97\u4e00\u4e2a\u91cd\u6570, \u90a3\u4e48\u4e00\u5171\u53ea\u4f1a\u63d2\u5165 $O(n\\sqrt{n})$ \u79cd\u533a\u95f4. (\u4ee5\u4e0b\u5047\u8bbe\u4fee\u6539\u6b21\u6570\u4e0e $n$ \u540c\u9636.)\n\n\u56e0\u6b64\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u8981\u4fee\u6539\u7684\u533a\u95f4, \u90a3\u4e48\u8fd9\u4e00\u90e8\u5206\u4fee\u6539\u7684\u603b\u590d\u6742\u5ea6\u4e5f\u5728 $O(n\\sqrt{n})$.\n\n\u90a3\u4e48\u5982\u679c\u8003\u8651\u4efb\u610f\u7684\u5de6\u7aef\u70b9\u5728\u8fd9\u4e2a\u5757\u4e2d\u7684\u533a\u95f4 $[l, r]$, \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u6682\u4e14\u5f53\u6210 $[l, T]$ \u6765\u5904\u7406, \u5176\u4e2d $T$ \u8868\u793a\u8fd9\u4e2a\u5757\u7684\u53f3\u7aef\u70b9.\n\n\u8fd9\u6837, \u6211\u4eec\u8fd8\u6709\u4e09\u4e2a\u95ee\u9898:\n\n1. \u5757\u95f4\u4fee\u6539\u7684\u65f6\u5019, \u6211\u4eec\u600e\u4e48\u627e\u5230\u4fee\u6539\u540e\u8de8\u8fc7\u7684\u5757\u4f1a\u51cf\u5c11\u7684\u533a\u95f4\u5462?\n   \u53ef\u4ee5\u5bf9\u6bcf\u4e00\u5757\u7ef4\u62a4\u5de6\u7aef\u70b9\u5728\u8fd9\u4e00\u5757\u5185, \u53f3\u7aef\u70b9\u4e0d\u5728\u8fd9\u4e00\u5757\u5185\u7684\u6240\u6709\u533a\u95f4,\n   \u6309\u53f3\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\u7ef4\u62a4.\n   \u8fd9\u6837\u6211\u4eec\u4fee\u6539\u7684\u65f6\u5019, \u53ea\u9700\u8981\u627e $L$ \u6240\u5728\u5757\u7684\u5de6\u8fb9\u6240\u6709\u5757\u5ef6\u4f38\u51fa\u7684\u533a\u95f4\u4e2d,\n   \u53f3\u7aef\u70b9\u6bd4 $L$ \u66f4\u5927\u7684\u5373\u53ef.\n   \u5bf9\u53f3\u7aef\u70b9, \u4e5f\u53ef\u4ee5\u540c\u6837\u5904\u7406.\n2. \u5757\u5185\u4fee\u6539\u7684\u65f6\u5019, \u6211\u4eec\u600e\u4e48\u627e\u5230\u9700\u8981\u4fee\u6539\u7684\u533a\u95f4\u5462?\n   \u53ef\u4ee5\u5bf9\u6bcf\u4e2a $l$, \u628a\u5de6\u7aef\u70b9\u4e3a $l$ \u7684\u5757\u5185\u533a\u95f4\u6309\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6302\u6210\u94fe\u8868.\n   \u53ea\u9700\u8981\u679a\u4e3e $l$, \u7136\u540e\u5728\u94fe\u8868\u91cc\u6309\u53f3\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\u904d\u5386\u6240\u6709\u53d7\u5230\u5f71\u54cd\u7684\u533a\u95f4\u5373\u53ef.\n3. \u5982\u4f55\u7ef4\u62a4\u8be2\u95ee\u7684\u7b54\u6848? \u8fd9\u4e2a\u8be2\u95ee\u8fd8\u662f\u6bd4\u8f83\u597d\u5904\u7406\u7684.\n   \u5b83\u76f8\u5f53\u4e8e\u8bf4\u5bf9\u6bcf\u4e2a\u533a\u95f4, \u628a\u6574\u4e2a\u533a\u95f4 $+1$. \u7136\u540e\u67e5\u8be2\u533a\u95f4\u548c.\n   \u7531\u4e8e\u6211\u4eec\u6240\u6709\u4fee\u6539\u90fd\u662f\u66b4\u529b\u4fee\u6539, \u53ea\u9700\u8981\u6bcf\u6b21\u66b4\u529b\u4fee\u6539\u7684\u65f6\u5019\u533a\u95f4\u52a0, \u8be2\u95ee\u7684\u65f6\u5019\u533a\u95f4\u548c\u5373\u53ef. \u7531\u4e8e\u8fd9\u4e2a\u533a\u95f4\u52a0\u6b21\u6570\u8fc7\u591a, \u53ef\u4ee5\u7528\u6839\u53f7\u5e73\u8861\u6280\u5de7\u628a\u590d\u6742\u5ea6\u4f18\u5316\u5230 $O(n\\sqrt{n})$, \u4e0d\u5e26 $\\log$.\n   \n**\u7b49\u4e00\u4e0b!** \u5982\u679c\u4f60\u8bd5\u56fe\u5b9e\u73b0\u8fd9\u4e2a\u7b97\u6cd5, \u5c31\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898.\n\u7531\u4e8e\u6211\u4eec\u5728\u5757\u5185\u4fee\u6539\u7684\u65f6\u5019, \u8de8\u8fc7\u5757\u7684\u533a\u95f4\u4e5f\u4f1a\u88ab\u5408\u5e76\u8d77\u6765\u4e00\u8d77\u4fee\u6539,\n\u5728\u67d0\u4e2a\u7aef\u70b9\u88ab\u4fee\u6539\u8fc7\u540e, \u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u533a\u95f4\u8de8\u8fc7\u7684\u5757\u4f1a\u51cf\u5c11\u7684\u65f6\u5019, \u5c31\u4e0d\u77e5\u9053\u5b83\u5f53\u524d\u7684\u7aef\u70b9\u5728\u54ea\u91cc\u4e86!\n\n\u800c\u4e14\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u53d7\u5757\u5185\u5f71\u54cd\u51cf\u5c0f\u4e86, \u90a3\u4e48\u6211\u4eec\u518d\u5bfb\u627e\"\u53f3\u7aef\u70b9\u6bd4 $L$ \u66f4\u5927\u7684\u533a\u95f4\"\u6765\u786e\u5b9a\u54ea\u4e9b\u533a\u95f4\u4f1a\u88ab\u7f29\u5c0f\u7684\u65f6\u5019, \u5c31\u96be\u4ee5\u5904\u7406\u4e86.\n\n\u597d\u5728\u8fd9\u4e5f\u4e0d\u96be\u89e3\u51b3. \u6211\u4eec\u53ef\u4ee5\u7ed9\u4fee\u6539\u65f6\u65b0\u589e\u7684\u533a\u95f4\u5efa\u7acb\u4e00\u4e2a\u7ed3\u70b9, \u7136\u540e\u8ba9\u5220\u6389\u7684\u533a\u95f4\u5bf9\u5e94\u7684\u7ed3\u70b9\u6307\u5411\u5b83, \u7136\u540e\u4f7f\u7528\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u4e86. \u4e0a\u9762\u7684\u4e24\u4e2a\u95ee\u9898\u90fd\u53ef\u4ee5\u8fce\u5203\u800c\u89e3 (\u7b2c\u4e8c\u4e2a\u95ee\u9898\u53ef\u4ee5\u548c\u5757\u5185\u4fee\u6539\u4e00\u8d77\u5904\u7406: \u53ea\u9700\u8981\u628a\u5de6\u7aef\u70b9\u5728 $T$, \u53f3\u7aef\u70b9\u6bd4 $L$ \u66f4\u5927\u7684\u90a3\u4e9b\u533a\u95f4\u5bf9\u5e94\u7684\u5e76\u67e5\u96c6\u62c6\u51fa\u6765\u5c31\u5f97\u5230\u4e86).\n\n\u53e6\u4e00\u79cd\u529e\u6cd5\u662f\u5bf9\u6bcf\u4e2a\u5757, \u628a\u5904\u4e8e\u5757\u5185\u7684\u6240\u6709\u4fee\u6539\u7684\u5de6(\u53f3)\u7aef\u70b9\u6309\u65f6\u95f4\u5efa\u7acb\u5355\u8c03\u6808, \u7136\u540e\u4e8c\u5206\u5373\u53ef (\u56e0\u4e3a\u5982\u679c\u67d0\u4e2a\u533a\u95f4\u8fc7\u4e86\u5f88\u957f\u65f6\u95f4\u4e4b\u540e, \u53d1\u73b0\u4ed6\u8de8\u8fc7\u7684\u5757\u51cf\u5c11\u4e86, \u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u8003\u8651\u5b83\u73b0\u5728\u7684\u5de6\u7aef\u70b9, \u4e00\u5b9a\u662f\u4e0a\u4e00\u6b21\u8de8\u8fc7\u7684\u5757\u51cf\u5c11\u7684\u65f6\u5019\u5230\u73b0\u5728\u4e3a\u6b62, \u5b83\u7684\u5de6\u7aef\u70b9\u6240\u5728\u7684\u5757\u91cc\u6240\u6709\u4fee\u6539\u7684\u5de6\u7aef\u70b9\u7684\u6700\u5927\u503c. \u5355\u8c03\u6808\u53ef\u4ee5\u7ef4\u62a4\u65f6\u95f4\u540e\u7f00\u7684\u6700\u5927\u503c).\n\n\u800c\u5982\u679c\u4f7f\u7528\u5355\u8c03\u6808, \u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u9898, \u76f8\u5f53\u4e8e\u627e\u5230\"\u4e0a\u4e00\u6b21\u4fee\u6539\u7684\u53f3\u7aef\u70b9\u843d\u5728 $L$ \u6240\u5728\u5757\u5185\u5e76\u4e14\u6bd4 $L$ \u66f4\u9760\u5de6\"\u8fd9\u4ef6\u4e8b\u60c5\u53d1\u751f\u4e4b\u540e\u6240\u6709\u53f3\u7aef\u70b9\u88ab\u653e\u5230 $L$ \u5757\u5185\u5728 $L$ \u540e\u9762\u7684\u533a\u95f4. \u8fd9\u4ef6\u4e8b\u60c5\u7684\u53d1\u751f\u65f6\u95f4\u4ecd\u7136\u53ef\u4ee5\u4e8c\u5206\u51fa\u6765, \u7136\u540e\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u52a8\u6001\u7684\u4e09\u7ef4\u6570\u70b9 (\u52a8\u6001\u4e09\u7ef4\u6570\u70b9!), \u53ef\u4ee5\u641e\u4e2a\u4e3b\u5e2d\u6811...\u8fd9\u4e2a\u505a\u6cd5\u6211\u5e76\u6ca1\u6709\u60f3\u5230\u8db3\u591f\u597d\u7684\u4f18\u5316\u65b9\u6cd5, \u6240\u4ee5\u6ca1\u6709\u5199\u51fa\u4ee3\u7801. \u5982\u679c\u6709\u4eba\u53ef\u4ee5\u63d0\u4f9b\u4f18\u5316\u65b9\u6cd5\u53ef\u4ee5[\u8054\u7cfb\u6211](https://rqy.moe/contact.html).\n\n**\u90a3\u4e48, \u8fd9\u4e2a\u601d\u8def\u80fd\u4e0d\u80fd\u4f18\u5316\u5230 $O(n \\times \\mathrm{poly}(\\log n))$ \u5462?**\n\u7b54\u6848\u662f\u53ef\u4ee5\u7684. \u6211\u4eec\u53d1\u73b0\u4e0a\u9762\u7684\u5206\u5757\u5b8c\u5168\u53ef\u4ee5\u5d4c\u5957: \u6211\u4eec\u628a\u8de8\u8fc7\u5757\u7684\u5355\u72ec\u5904\u7406, \u5757\u5185\u7684\u9012\u5f52\u5904\u7406, \u90a3\u4e48\u8fd9\u5b8c\u5168\u53ef\u4ee5\u6539\u5230\u7ebf\u6bb5\u6811\u4e0a! \u6700\u540e\u7684\u590d\u6742\u5ea6\u5373\u4e3a $O(n \\log^2 n)$, \u56e0\u4e3a\u6bcf\u6b21\u53d8\u66f4\u533a\u95f4\u65f6\u9700\u8981 $O(\\log n)$ \u7684\u6811\u72b6\u6570\u7ec4\u4fee\u6539, \u8fd8\u9700\u8981\u7528\u5806\u7ef4\u62a4\u533a\u95f4.\n\n\u545c\u545c.\n\n# \u4ee3\u7801\n\n```cpp\n#include <algorithm>\n#include <queue>\n#include <vector>\n#include <functional>\n#include <utility>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n\ntypedef long long LL;\nconst int N = 200050;\nconst int M = 100050;\n\nint read() {\n  int ans = 0, c;\n  while (!isdigit(c = getchar()));\n  do ans = ans * 10 + c - '0';\n  while (isdigit(c = getchar()));\n  return ans;\n}\n\nnamespace UFS {\n  const int MM = M * 200;\n  int Fa[MM], cnt = 0; // \u6b63: \u7236\u4eb2; \u8d1f: \u5b50\u6811\u5927\u5c0f\n  int Ls[MM], Rb[MM], id[MM];\n  int sz[MM];\n  int pos[MM];\n\n  int Find(int x) { return Fa[x] < 0 ? x : Fa[x] = Find(Fa[x]); }\n  int Union(int x, int y) {\n    x = Find(x); y = Find(y);\n    if (Fa[x] < Fa[y]) // y \u5b50\u6811\u66f4\u5927\n      std::swap(x, y);\n    sz[x] += sz[y];\n    Fa[x] += Fa[y]; Fa[y] = x;\n    Rb[y] = Ls[x]; Ls[x] = y;\n    return x;\n  }\n\n  int corNode[M * 2];\n\n  inline int addNode(int i, int p) {\n    int o = cnt++;\n    if (cnt % 10000 == 0) fprintf(stderr, \"qwq %d\\n\", cnt);\n    if (i >= 0) {\n      id[o] = i;\n      corNode[i] = o;\n      sz[o] = 1;\n    } else {\n      id[o] = -1;\n      sz[o] = 0;\n    }\n    pos[o] = p;\n    Fa[o] = -1;\n    Ls[o] = Rb[o] = -1;\n    return o;\n  }\n\n  inline void rmNode(int i) {\n    int x = corNode[i];\n    --sz[Find(x)];\n    id[x] = -1;\n  }\n}\n\ntypedef std::pair<int, int> E;\n#define mp std::make_pair\n\nconst int NN = N * 3; // TODO\n\nstd::priority_queue<E, std::vector<E>, std::greater<E>> LE[NN];\nstd::priority_queue<E> RE[NN];\n\ninline void addA(int l, int r, LL v);\n\n// \u7ebf\u6bb5\u6811\u662f\"\u5de6\u95ed\u53f3\u5f00\"\u533a\u95f4\nvoid addE(int o, int l, int r, int k, int L, int R) {\n  int m = (l + r) / 2;\n  if (R < m) addE(o << 1, l, m, k, L, R);\n  else if (L > m) addE(o << 1 | 1, m, r, k, L, R);\n  else {\n    LE[o].push(mp(L, UFS::addNode(k << 1, L)));\n    RE[o].push(mp(R, UFS::addNode(k << 1 | 1, R)));\n  }\n}\n\nvoid reAddE(int x, int l1, int o, int l, int r, int Lq, int Rq) {\n  using namespace UFS;\n  int t = id[x];\n  if (t >= 0) {\n    int k = t >> 1, y = corNode[t ^ 1];\n    int Lp = l1, Rp = pos[Find(y)];\n    if (t & 1) std::swap(Lp, Rp);\n    rmNode(t); rmNode(t ^ 1);\n\n    int Ls = std::max(Lp, Lq), Rs = std::min(Rp, Rq);\n    if (Ls == Rs) {\n      addA(Lp, Rp, -1);\n#ifdef DEBUG\n      fprintf(stderr, \"Remove the range [%d, %d]\\n\", Lp, Rp);\n#endif\n    } else {\n#ifdef DEBUG\n      fprintf(stderr, \"Change the range [%d, %d] to [%d, %d]\\n\", Lp, Rp, Ls, Rs);\n#endif\n      if (Ls > Lp) addA(Lp, Ls, -1);\n      if (Rs < Rp) addA(Rs, Rp, -1);\n      addE(o, l, r, k, Ls, Rs);\n    }\n  }\n  for (int y = Ls[x]; y >= 0; y = Rb[y])\n    reAddE(y, l1, o, l, r, Lq, Rq);\n}\n\nvoid modify(int o, int l, int r, int Lq, int Rq) {\n  if (r - l == 1 || r < Lq || l > Rq || (l >= Lq && r <= Rq)) return;\n#ifdef DEBUG\n      fprintf(stderr, \"> %d %d %d\\n\", o, l, r);\n#endif\n  int m = (l + r) / 2;\n  if (Rq < m) {\n    while (!LE[o].empty()) {\n      E x = LE[o].top();\n      if (x.first > Rq) break;\n      LE[o].pop();\n      reAddE(x.second, x.first, o << 1, l, m, Lq, Rq);\n    }\n    modify(o << 1, l, m, Lq, Rq);\n  } else if (Lq > m) {\n    while (!RE[o].empty()) {\n      E x = RE[o].top();\n      if (x.first < Lq) break;\n      RE[o].pop();\n      reAddE(x.second, x.first, o << 1 | 1, m, r, Lq, Rq);\n    }\n    modify(o << 1 | 1, m, r, Lq, Rq);\n  } else {\n    using namespace UFS;\n    int nd = addNode(-1, Lq);\n    while (!LE[o].empty()) {\n      E x = LE[o].top();\n      if (x.first > Lq) break;\n      LE[o].pop();\n#ifdef DEBUG\n      fprintf(stderr, \"Modify the left endpoint of %d ranges from %d to %d\\n\",\n              UFS::sz[x.second], x.first, Lq);\n#endif\n      addA(x.first, Lq, -UFS::sz[x.second]);\n      nd = Union(nd, x.second);\n    }\n    pos[nd] = Lq;\n    LE[o].push(mp(Lq, nd));\n    nd = addNode(-1, Rq);\n    while (!RE[o].empty()) {\n      E x = RE[o].top();\n      if (x.first < Rq) break;\n      RE[o].pop();\n#ifdef DEBUG\n      fprintf(stderr, \"Modify the right endpoint of %d ranges from %d to %d\\n\",\n              UFS::sz[x.second], x.first, Rq);\n#endif\n      addA(Rq, x.first, -UFS::sz[x.second]);\n      nd = Union(nd, x.second);\n    }\n    pos[nd] = Rq;\n    RE[o].push(mp(Rq, nd));\n    modify(o << 1, l, m, Lq, Rq);\n    modify(o << 1 | 1, m, r, Lq, Rq);\n  }\n}\n\nLL A[N], B[N];\n\nvoid adda(LL *A, int x, LL v) {\n  for (; x < N; x += x & -x)\n    A[x] += v;\n}\n\ninline void addA(int l, int r, LL v) {\n  // \u533a\u95f4\u52a0 v\n  adda(B, r, -v); adda(B, l, v);\n  adda(A, r, v * r); adda(A, l, -v * l);\n}\n\nLL querya(LL *A, int x) {\n  LL ans = 0;\n  for (; x; x -= x & -x)\n    ans += A[x];\n  return ans;\n}\n\ninline LL queryA(int l, int r) {\n  return r * querya(B, r) + querya(A, r) - l * querya(B, l) - querya(A, l);\n}\n\nint main() {\n  int q = read(), type = read();\n  LL last = 0;\n  int t = 0;\n  while (q--) {\n    int k = read(), l = read(), r = read();\n    l = (l + type * last) % 200001;\n    r = (r + type * last) % 200001;\n    if (k == 1) {\n      if (l < r) {\n        addA(l, r, 1);\n        addE(1, 1, 200000, t++, l, r);\n      }\n    } else if (k == 2) {\n      modify(1, 1, 200000, l, r);\n    } else {\n      printf(\"%lld\\n\", last = queryA(l, r));\n    }\n  }\n}\n```",
        "postTime": 1668969195,
        "uid": 7868,
        "name": "_rqy",
        "ccfLevel": 10,
        "title": "\u6708\u8d5b\u9898 P8861 \u9898\u89e3"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e9b\u533a\u95f4\u7684\u96c6\u5408\uff0c\u6700\u5f00\u59cb\u4e3a\u7a7a\u3002\u7ed9\u51fa $q$ \u6b21\u64cd\u4f5c\uff0c\u4f1a\u7ed9\u51fa $op, l, r$\uff1a\n\n1. $op = 1$\uff1a\u5411\u96c6\u5408\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20 $[l, r]$\u3002\n2. $op = 2$\uff1a\u5bf9\u4e8e\u96c6\u5408\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u5176\u4e0e $[l, r]$ \u6709\u4ea4\uff0c\u5c31\u6539\u4e3a\u5176\u4e0e $[l, r]$ \u7684\u4ea4\u3002\n3. $op = 3$\uff1a\u67e5\u8be2\u96c6\u5408\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0e $[l, r]$ \u4ea4\u7684\u957f\u5ea6\u7684\u548c\u3002\n\n\n$[l, r]$ \u7684\u957f\u5ea6\u5b9a\u4e49\u4e3a $r - l$\u3002\u90e8\u5206\u6d4b\u8bd5\u70b9\u5f3a\u5236\u5728\u7ebf\u3002\u5047\u8bbe $op = 1, 2, 3$ \u7684\u64cd\u4f5c\u6b21\u6570\u5206\u522b\u4e3a $k_1, k_2, k_3$\uff0c\u5219\u6709 $k_1, k_2\\leq 10 ^ 5, k_3\\leq 3\\times 10 ^ 5$\uff0c$1\\leq l\\leq r\\leq 2\\times 10 ^ 5$\u3002\n\n\u8bb0\u6743\u503c\u8303\u56f4\u4e3a $m = 2\\times 10 ^ 5$\u3002\n\n### Tests 13 - 17\n\n\u9996\u5148\u6ce8\u610f\u5230\u4e2d\u95f4\u7684\u4e00\u4e9b\u6d4b\u8bd5\u70b9\uff08$13\\sim 17$\uff09\u662f $1\\leq l\\leq 10 ^ 5\\leq r\\leq 2\\times 10 ^ 5$\uff0c\u8fd9\u4e2a\u542f\u793a\u6211\u4eec\u5728 $10 ^ 5$ \u5904\u7ed9\u51fa\u4e00\u4e2a\u5206\u754c\u7ebf\uff0c\u7136\u540e\u5de6\u53f3\u5206\u522b `chkmin/chkmax`\uff0c\u7ef4\u62a4\u4fe1\u606f\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u63d2\u5165\u5e73\u51e1\uff0c\u4fee\u6539\u76f8\u5f53\u4e8e\u662f\u5bf9\u4e8e\u5168\u5c40\u5de6\u7aef\u70b9 `chkmax`\uff0c\u53f3\u7aef\u70b9 `chkmin`\u3002\n\n\u76f4\u63a5\u4f7f\u7528 jls \u7ebf\u6bb5\u6811\u5373\u53ef\uff08\u5f53\u7136\u5168\u5c40 `chkmin/chkmax` \u6709\u5176\u4ed6\u505a\u6cd5\uff09\u3002\u73b0\u5728\u95ee\u9898\u662f\u6211\u4eec\u600e\u4e48\u7ef4\u62a4\u533a\u95f4\u4ea4\u7684\u957f\u5ea6\u548c\u3002\n\n\u9996\u5148\u8003\u8651\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 $\\min(r_1, r_2) - \\max(l_1, l_2)$ \u8ba1\u7b97\u6240\u6709\u7b54\u6848\uff0c\u8fd9\u4e2a\u662f\u597d\u8ba1\u7b97\u7684\uff0c\u6211\u4eec\u4f7f\u7528\u6743\u503c\u7ebf\u6bb5\u6811 / \u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u503c\u57df\u533a\u95f4\u5185\u4e2a\u6570\u4ee5\u53ca\u503c\u57df\u533a\u95f4\u5185\u548c\u5c31\u53ef\u4ee5 $O(\\log n)$ \u67e5\u8be2\u3002\n\n\u7136\u540e\u8003\u8651\u5982\u679c $l_1 > r_2$\uff0c\u672c\u8eab\u5e94\u8be5\u662f 0\uff0c\u4f46\u662f\u6211\u4eec\u4f1a\u5f97\u5230 $r_2 - l_1$\uff0c\u6240\u4ee5\u6211\u4eec\u52a0\u56de\u6765\u7684\u8bdd\u9700\u8981\u8ba1\u7b97 $> r_2$ \u7684\u6240\u6709 $l$ \u7684\u4e2a\u6570\u548c\u548c\u3002\u53e6\u4e00\u8fb9\u540c\u7406\u3002\n\n\u636e\u4e0a\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a $O(\\log m)$ \u4fee\u6539\u67e5\u8be2\u7684\u505a\u6cd5\u3002\u6ce8\u610f\u5230\u8fd9\u4e2a\u505a\u6cd5\u53ea\u548c $l$ \u96c6\u5408\uff0c$r$ \u96c6\u5408\u76f8\u5173\uff0c\u548c\u4ed6\u4eec\u5982\u4f55\u914d\u5bf9\u7684\u65e0\u5173\u3002\u8fd9\u4e2a\u5bf9\u6211\u4eec\u4e0b\u9762\u7684\u63a8\u5bfc\u662f\u6709\u4e00\u5b9a\u4f5c\u7528\u7684\u3002\n\n### AC \u505a\u6cd5\n\n\u4e0a\u9762\u7684\u542f\u793a\u6027\u5f88\u5f3a\uff0c\u6211\u4eec\u9a6c\u4e0a\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u505a\u6cd5\uff1a\u4f7f\u7528\u7c7b\u4f3c\u732b\u6811\u7684\u4e8c\u533a\u95f4\u5206\u6cbb\u7ed3\u6784\uff0c\u5bf9\u6bcf\u4e2a\u533a\u95f4\u90fd\u4f7f\u7528\u8fd9\u4e2a\u505a\u6cd5\u3002\u4f46\u662f\u548c\u4e0a\u9762\u4e0d\u540c\u7684\u662f\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u53e6\u5916\u4e00\u4e9b\u60c5\u51b5\u3002\n\n\u5047\u8bbe\u63d2\u5165\u7684\u662f $[l', r']$\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u6ee1\u8db3 $l\\leq l'\\leq mid < r'\\leq r$ \u7684\u5206\u6cbb\u533a\u95f4 $[l, r]$ \u63d2\u5165\u8fd9\u4e2a\u533a\u95f4\u3002\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u5206\u6cbb\u533a\u95f4\u662f\u786e\u5b9a\u5e76\u4e14\u552f\u4e00\u7684\u3002\u63d2\u5165\u7531\u4e8e\u9700\u8981\u52a8\u6001\u7ef4\u62a4\u6743\u503c\u6811\u72b6\u6570\u7ec4\uff0c\u662f $O(\\log m)$ \u7684\u3002\n\n\u8003\u8651\u5982\u4f55\u4fee\u6539\u3002\u76f4\u63a5\u5728\u5206\u6cbb\u533a\u95f4\u4e0a\u4fee\u6539\uff0c\u5982\u679c $r' > mid$\uff0c\u6211\u4eec\u9700\u8981\u5411\u53f3\u533a\u95f4\u9012\u5f52\uff0c\u5f53\u524d\u5206\u6cbb\u533a\u95f4\u6240\u6709\u6ee1\u8db3 $r\\geq l'$ \u7684\u90fd\u4f1a\u88ab\u4fee\u6539\u6210 $[l', \\min(r, r')]$\u3002\u5f97\u5230\u8fd9\u4e2a\u533a\u95f4\u6211\u4eec\u76f4\u63a5\u5411\u53f3\u533a\u95f4\u63d2\u5165\u8fd9\u4e2a\u533a\u95f4\uff0c\u6ce8\u610f\u5230\u8fd9\u4e2a\u66b4\u529b\u7684\u5747\u644a\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\uff08\u6bcf\u4e2a\u533a\u95f4\u6700\u591a\u5411\u4e0b $O(\\log m)$ \u6b21\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u627e\u51fa\u6240\u6709\u53f3\u7aef\u70b9 $\\geq l'$ \u7684\u533a\u95f4\uff0c\u4e00\u4e2a\u4e00\u4e2a\u4fee\u6539\u5373\u53ef\u3002\n\n\u5982\u679c\u5f53\u524d\u5206\u6cbb\u533a\u95f4\u6ee1\u8db3 $l \\leq l'\\leq mid < r'\\leq r$\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u548c\u4e0a\u9762\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u6211\u4eec\u76f4\u63a5 jls \u7ebf\u6bb5\u6811\u5373\u53ef\u3002\u6ce8\u610f\u5230\u6b64\u65f6\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de\uff0c\u56e0\u4e3a\u4ed6\u5bf9 $[l, mid]$ \u548c $[mid + 1, r]$ \u7b49\u5206\u6cbb\u533a\u95f4\u8fd8\u6709\u8d21\u732e\u3002\u7531\u4e8e\u5b8c\u5168\u8986\u76d6\u662f\u4e0d\u5b58\u5728\u8d21\u732e\u7684\uff0c\u6240\u4ee5\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\u5206\u6790\uff0c\u6700\u591a\u53ea\u4f1a\u8bbf\u95ee $O(\\log m)$ \u4e2a\u8282\u70b9\u3002\u5355\u6b21\u4fee\u6539\u5747\u644a\u662f $O(\\log m)$ \u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6811\u72b6\u6570\u7ec4\u3002\n\n\u5206\u6790\u4ee5\u4e0a\u590d\u6742\u5ea6\uff1a\u6211\u4eec\u4e00\u5171\u6709 $O(k_1\\log m)$ \u6b21\u4fee\u6539\uff0c\u5355\u6b21\u4fee\u6539\u662f $O(\\log m)$ \u7684\uff0cjls \u7ebf\u6bb5\u6811\u4e0a\u5171\u6709 $O(k_2 \\log m)$ \u6b21\u64cd\u4f5c\uff0c\u5747\u644a\u5355\u6b21\u662f $O(\\log n + \\log m)$ \u7684\u3002\u5355\u6b21\u67e5\u8be2\u662f $O(\\log m)$ \u7684\u3002\n\n\u4e8e\u662f\u603b\u590d\u6742\u5ea6\u662f $O(k_1 \\log ^ 2 m + k_2 \\log m(\\log n + \\log m) + k_3\\log m)$ \u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u6ce8\u610f\u51e0\u4e2a\u7ec6\u8282\uff1a\n\n1. \u5176\u5b9e\u6ca1\u4eba\u5199 jls \u7ebf\u6bb5\u6811\u7684\u7f62\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u662f\u597d\u7528 dsu / \u5806 \u7ef4\u62a4\u7684\uff0c\u53ea\u662f\u6211 vp \u7684\u65f6\u5019\u53ea\u60f3\u5230\u4e86\u8fd9\u91cc /kk\u3002\u4f46\u662f\u7531\u4e8e\u7ebf\u6bb5\u6811\u7684\u5f3a\u5927\uff0c\u8fd9\u4e2a\u9898\u6709\u6ca1\u6709\u53ef\u80fd\u6269\u5c55\u5230\u7f16\u53f7\u8fc7\u540e\u533a\u95f4\u4fee\u6539\u5462\uff1f\n2. \u7ebf\u6bb5\u6811\u5927\u5c0f\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u8fd9\u91cc\u6211\u662f\u7528\u7684\u7c7b\u4f3c `std::vector` \u7684\u6269\u5bb9\u529e\u6cd5\uff0c\u6ee1\u4e86\u5c31\u589e\u52a0\u4e00\u500d\u7684\u7a7a\u95f4\u3002\n3. \u6ce8\u610f\u63d2\u5165\u65f6 $l' = r'$ \u9700\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u4e0d\u7136\u53ef\u80fd RE/WA\u3002\n\n```cpp\nstruct SegTree1 {\n    struct Node {\n        int l, r;\n        int mn, sec, cnt, lt;\n    };\n    std::vector<Node> tr;\n    int mid, L;\n\n    void pushup(int x) {\n        auto &nl = tr[x << 1], &nr = tr[x << 1 | 1], &rt = tr[x];\n        if (nl.mn < nr.mn)\n            rt.mn = nl.mn, rt.cnt = nl.cnt, rt.sec = std::min(nl.sec, nr.mn);\n        else if (nl.mn > nr.mn)\n            rt.mn = nr.mn, rt.cnt = nr.cnt, rt.sec = std::min(nr.sec, nl.mn);\n        else\n            rt.mn = nl.mn, rt.cnt = nl.cnt + nr.cnt, rt.sec = std::min(nl.sec, nr.sec);\n    }\n\n    void build(int x, int l, int r, int *a)\n    {\n        tr[x] = {l, r};\n        if (l == r) {\n            tr[x].mn = a[l], tr[x].sec = INF, tr[x].cnt = 1;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(x << 1, l, mid, a), build(x << 1 | 1, mid + 1, r, a);\n        pushup(x);\n    }\n\n    void update(int x, int c) { tr[x].mn += c, tr[x].lt += c; }\n\n    void pushdown(int x) {\n        if (!tr[x].lt) return;\n        int mnl = tr[x << 1].mn, mnr = tr[x << 1 | 1].mn;\n        if (mnl <= mnr) update(x << 1, tr[x].lt);\n        if (mnl >= mnr) update(x << 1 | 1, tr[x].lt);\n        tr[x].lt = 0;\n    }\n\n    void change(int x, int pos, int c)\n    {\n        if (tr[x].l == tr[x].r) {\n            if (c <= mid) T1[0].add(c, 1), T1[1].add(c, c);\n            return tr[x].mn = c, void();\n        }\n        pushdown(x);\n        change(x << 1 | (pos * 2 > tr[x].l + tr[x].r), pos, c);\n        pushup(x);\n    }\n\n    void modify(int x, int l, int r, int c) {\n        if (tr[x].l > r || tr[x].r < l || tr[x].mn >= c) return;\n        if (tr[x].l >= l && tr[x].r <= r && tr[x].sec > c) {\n            T1[0].add(tr[x].mn, -tr[x].cnt), T1[1].add(tr[x].mn, (LL) -tr[x].cnt * tr[x].mn);\n            T1[0].add(c, tr[x].cnt), T1[1].add(c, (LL) tr[x].cnt * c);\n            return update(x, c - tr[x].mn);\n        }\n        pushdown(x);\n        modify(x << 1, l, r, c), modify(x << 1 | 1, l, r, c);\n        pushup(x);\n    }\n\n    void dfs(int x, std::vector<int> &vec, int lim)\n    {\n        if (tr[x].mn > lim) return;\n        if (tr[x].l == tr[x].r) return vec.push_back(tr[x].l);\n        pushdown(x);\n        dfs(x << 1, vec, lim), dfs(x << 1 | 1, vec, lim);\n    }\n\n    int ask(int x, int pos) {\n        if (tr[x].l == tr[x].r) return tr[x].mn;\n        pushdown(x);\n        return ask(x << 1 | (pos * 2 > tr[x].l + tr[x].r), pos);\n    }\n\n    void rebuild(std::vector<int> a, int _l, int _m)\n    {\n        mid = _m, L = _l;\n        tr.resize(a.size() * 4);\n        build(1, 0, a.size() - 1, a.data());\n    }\n    SegTree1() : tr(2, {0, 0, INF}), mid(0), L(0) {}\n};\n\nstruct SegTree2 {\n    struct Node {\n        int l, r;\n        int mx, sec, cnt, lt;\n    };\n    std::vector<Node> tr;\n    int mid, R;\n\n    void pushup(int x) {\n        auto &nl = tr[x << 1], &nr = tr[x << 1 | 1], &rt = tr[x];\n        if (nl.mx > nr.mx)\n            rt.mx = nl.mx, rt.cnt = nl.cnt, rt.sec = std::max(nl.sec, nr.mx);\n        else if (nl.mx < nr.mx)\n            rt.mx = nr.mx, rt.cnt = nr.cnt, rt.sec = std::max(nr.sec, nl.mx);\n        else\n            rt.mx = nl.mx, rt.cnt = nl.cnt + nr.cnt, rt.sec = std::max(nl.sec, nr.sec);\n    }\n\n    void build(int x, int l, int r, int *a)\n    {\n        tr[x] = {l, r};\n        if (l == r) {\n            tr[x].mx = a[l], tr[x].sec = -INF, tr[x].cnt = 1;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(x << 1, l, mid, a), build(x << 1 | 1, mid + 1, r, a);\n        pushup(x);\n    }\n\n    void update(int x, int c) { tr[x].mx += c, tr[x].lt += c; }\n\n    void pushdown(int x) {\n        if (!tr[x].lt) return;\n        int mxl = tr[x << 1].mx, mxr = tr[x << 1 | 1].mx;\n        if (mxl >= mxr) update(x << 1, tr[x].lt);\n        if (mxl <= mxr) update(x << 1 | 1, tr[x].lt);\n        tr[x].lt = 0;\n    }\n\n    void change(int x, int pos, int c)\n    {\n        if (tr[x].l == tr[x].r) {\n            if (c > mid) T2[0].add(c, 1), T2[1].add(c, c);\n            return tr[x].mx = c, void();\n        }\n        pushdown(x);\n        change(x << 1 | (pos * 2 > tr[x].l + tr[x].r), pos, c);\n        pushup(x);\n    }\n\n    void modify(int x, int l, int r, int c) {\n        if (tr[x].l > r || tr[x].r < l || tr[x].mx <= c) return;\n        if (tr[x].l >= l && tr[x].r <= r && tr[x].sec < c) {\n            T2[0].add(tr[x].mx, -tr[x].cnt), T2[1].add(tr[x].mx, (LL) -tr[x].cnt * tr[x].mx);\n            T2[0].add(c, tr[x].cnt), T2[1].add(c, (LL) tr[x].cnt * c);\n            return update(x, c - tr[x].mx);\n        }\n        pushdown(x);\n        modify(x << 1, l, r, c), modify(x << 1 | 1, l, r, c);\n        pushup(x);\n    }\n\n    void dfs(int x, std::vector<int> &vec, int lim)\n    {\n        if (tr[x].mx < lim) return;\n        if (tr[x].l == tr[x].r) return vec.push_back(tr[x].l);\n        pushdown(x);\n        dfs(x << 1, vec, lim), dfs(x << 1 | 1, vec, lim);\n    }\n\n    int ask(int x, int pos) {\n        if (tr[x].l == tr[x].r) return tr[x].mx;\n        pushdown(x);\n        return ask(x << 1 | (pos * 2 > tr[x].l + tr[x].r), pos);\n    }\n\n    void rebuild(std::vector<int> a, int _m, int _r)\n    {\n        mid = _m, R = _r;\n        tr.resize(a.size() * 4);\n        build(1, 0, a.size() - 1, a.data());\n    }\n    SegTree2() : tr(2, {0, 0, -INF}), mid(0), R(0) {}\n};\n\nstruct Node {\n    int l, r, sz;\n    SegTree1 T1;\n    SegTree2 T2;\n} tr[N << 2];\n\nvoid build(int x, int l, int r)\n{\n    tr[x] = {l, r, 0, SegTree1(), SegTree2()};\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    build(x << 1, l, mid), build(x << 1 | 1, mid + 1, r);\n}\n\nvoid insert(int x, int l, int r)\n{\n    if (tr[x].l == tr[x].r) {\n        T1[0].add(l, 1), T1[1].add(l, l), T2[0].add(l, 1), T2[1].add(l, l);\n        return;\n    }\n    // if (l == r) std::cout << \"Insert \" << l << ' ' << r << '\\n', exit(0);\n    int mid = (tr[x].l + tr[x].r) >> 1;\n    // std::cout << \"Insert \" << x << ' ' << l << ' ' << r << ' ' << tr[x].l << ' ' << tr[x].r << std::endl;\n    if (r <= mid) return insert(x << 1, l, r);\n    if (l > mid) return insert(x << 1 | 1, l, r);\n    if (tr[x].sz & (tr[x].sz - 1)) {\n        tr[x].T1.change(1, tr[x].sz, l), tr[x].T2.change(1, tr[x].sz, r);\n        tr[x].sz ++;\n        return;\n    }\n    std::vector<int> vl(tr[x].sz), vr(tr[x].sz);\n    for (int i = 0; i < tr[x].sz; ++ i)\n        vl[i] = tr[x].T1.ask(1, i), vr[i] = tr[x].T2.ask(1, i);\n    vl.push_back(l), vr.push_back(r);\n    int bit = 0;\n    while ((1 << bit) <= tr[x].sz) bit ++;\n    vl.resize(1 << bit, INF), vr.resize(1 << bit, -INF);\n    tr[x].T1.rebuild(vl, tr[x].l, mid), tr[x].T2.rebuild(vr, mid, tr[x].r);\n    tr[x].sz ++, T1[0].add(l, 1), T1[1].add(l, l), T2[0].add(r, 1), T2[1].add(r, r);\n}\n\nvoid modify(int x, int l, int r)\n{\n    if (tr[x].l >= l && tr[x].r <= r) return;\n    // std::cout << \"Modify \" << x << ' ' << l << ' ' << r << ' ' << tr[x].l << ' ' << tr[x].r << std::endl;\n    int mid = (tr[x].l + tr[x].r) >> 1;\n    if (r <= mid) {\n        std::vector<int> vec;\n        tr[x].T1.dfs(1, vec, r);\n        for (int id : vec) {\n            int cl = tr[x].T1.ask(1, id), cr = tr[x].T2.ask(1, id);\n            tr[x].T1.change(1, id, INF), tr[x].T2.change(1, id, -INF);\n            insert(x << 1, std::max(l, cl), r);\n            T1[0].add(cl, -1), T1[1].add(cl, -cl), T2[0].add(cr, -1), T2[1].add(cr, -cr);\n        }\n        return modify(x << 1, l, r);\n    }\n    if (l > mid) {\n        std::vector<int> vec;\n        tr[x].T2.dfs(1, vec, l);\n        for (int id : vec) {\n            // std::cout << \"Check \" << id << std::endl;\n            int cl = tr[x].T1.ask(1, id), cr = tr[x].T2.ask(1, id);\n            // std::cout << cl << ' ' << cr << std::endl;\n            tr[x].T1.change(1, id, INF), tr[x].T2.change(1, id, -INF);\n            insert(x << 1 | 1, l, std::min(r, cr));\n            T1[0].add(cl, -1), T1[1].add(cl, -cl), T2[0].add(cr, -1), T2[1].add(cr, -cr);\n        }\n        return modify(x << 1 | 1, l, r);\n    }\n    tr[x].T1.modify(1, 0, tr[x].sz - 1, l), tr[x].T2.modify(1, 0, tr[x].sz - 1, r);\n    modify(x << 1, l, r), modify(x << 1 | 1, l, r);\n}\n\nLL query(int l, int r)\n{\n    LL res = T1[0].ask(l) * l + T1[1].ask(M) - T1[1].ask(l);\n    res = res * -1 + (T2[0].ask(M) - T2[0].ask(r)) * r + T2[1].ask(r);\n    res += l * T2[0].ask(l) - T2[1].ask(l);\n    res += T1[1].ask(M) - T1[1].ask(r) - r * (T1[0].ask(M) - T1[0].ask(r));\n    return res;\n}\n\nint main()\n{\n    int m, op, l, r, typ;\n    LL ls = 0;\n    read(m, typ);\n    build(1, 0, M);\n    while (m --)\n    {\n        read(op, l, r);\n        l = (l + ls * typ) % (M + 1), r = (r + ls * typ) % (M + 1);\n        if (op == 1) insert(1, l, r);\n        else if (op == 2) modify(1, l, r);\n        else printf(\"%lld\\n\", ls = query(l, r));\n        // printf(\"%lld\\n\", query(1, M));\n    }\n    return 0;\n}\n```",
        "postTime": 1669114805,
        "uid": 342891,
        "name": "mydcwfy",
        "ccfLevel": 9,
        "title": "P8861 \u9898\u89e3"
    }
]