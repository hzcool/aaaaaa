[
    {
        "content": "# \u505a\u4e86\u4e00\u4e0b\u5348\uff0c\u4e00\u6b21\u5c31 $AC$\u3002\n\n\u5148\u603b\u7ed3\u4e00\u4e0b\u5751\u70b9&$RE$\u539f\u56e0\uff1a\n\n1. \u5f00 $long\\space long$\uff0c\u4e07\u5e74\u8001\u5751\u3002\n\n2. `DIV`\u64cd\u4f5c\u4e00\u5b9a\u8981\u5224\u65ad\u9664\u6570\u662f\u5426\u4e3a $0$\u3002\n\n3. \u8f93\u5165\u7684 $x$ \u4e00\u5b9a\u8981 $push$ \u5230\u6808\u91cc~~\u5361\u4e86\u6211 $\\sout{1h}$~~\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f~~\u4e07\u6076\u7684~~\u6a21\u62df\u4e86\uff1a\n\n\u5148\u770b\u8f93\u5165\u90e8\u5206\uff1a\n\n\u53ef\u4ee5\u5c06 $step$ \u6570\u7ec4\u6765\u8bb0\u5f55\u64cd\u4f5c\u5e8f\u5217\uff0c$num$ \u6765\u8bb0\u5f55 `NUM` \u64cd\u4f5c\u4e2d\u7684 $x$\uff0c\u5f53\u7136\uff0c$cnt$ \u8981\u8bb0\u5f55\u64cd\u4f5c\u7684\u6b21\u6570\uff0c\u4e00\u76f4\u8f93\u5165\u76f4\u5230\u78b0\u5230`END`\u64cd\u4f5c\u3002\n\n\u7136\u540e\u4fbf\u662f\u51fd\u6570 $f(x)$\uff0c\u6309\u7167\u9898\u610f\u6a21\u62df\u5373\u53ef\uff0c\u4e0d\u8fc7\u5bf9\u4e8e\u6709\u52a0\u51cf\u4e58\u9664\u7684\u64cd\u4f5c\uff0c\u4e00\u5b9a\u8981\u5224\u65ad\u7ed3\u679c\u662f\u5426\u5927\u4e8e $1000000000$\uff0c\u82e5\u5927\u4e8e\uff0c\u6211\u7684\u505a\u6cd5\u662f\u5c06\u6b64\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u503c\u3002\u53e6\u5916\uff0c\u5728\u53d6\u6808\u9876\u5143\u7d20\u65f6\uff0c\u8981\u5148\u5224\u65ad\u4e00\u4e0b\u6808\u5185\u5143\u7d20\u662f\u5426\u8db3\u591f\u3002\n\n\u6700\u540e\u5c31\u662f\u4ee3\u7801\u60f9\uff1a\n\n```cpp\n#include<cstdio>\n#include<stack>\n#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<cstring>\nusing namespace std;\ntypedef long long ll;//\u5f00long long \nconst int MAXN=2010;\nstring step[MAXN];//\u64cd\u4f5c\u5e8f\u5217 \nll n,num[MAXN],x,cnt;\n//n\uff0cNUM\u64cd\u4f5c\u7684x\uff0c\u8f93\u5165\u7684x\uff0c\u64cd\u4f5c\u603b\u6570\u3002 \nstack<ll>st;//STL\u5927\u6cd5\u543c\uff01 \ninline ll read()//\u5feb\u8bfb \n{\n    ll s=0,w=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+(ch-'0'),ch=getchar();\n    return s*w;\n}\nbool check(ll x)//\u5224\u65adx\u662f\u5426\u8d85\u51fa\u8303\u56f4 \n{\n    return abs(x)>1000000000;\n}\nll error()//\u61d2\n{\n    printf(\"ERROR\\n\");\n    return 5201314;//\u8fd9\u662f\u7279\u6b8a\u503c\u3002 \n}\nll f(ll x)//f\u51fd\u6570 \n{\n    while(!st.empty()) st.pop();//\u5148\u6e05\u7a7a\u6808 \n    st.push(x);//\u4e00\u5b9a\u8981push\uff01 \n    for(register ll i=1;i<cnt;i++)//\u4ece\u5934\u5230\u5c3e(cnt-1)\u904d\u5386\u64cd\u4f5c\u5e8f\u5217 \n    {\n    \t//\u4e0b\u9762\u5c31\u4e0d\u7ec6\u8bf4\u4e86 \n        if(step[i]==\"NUM\")\n        {\n            if(check(num[i])) return error();\n            st.push(num[i]);\n        }\n        if(step[i]==\"POP\")\n\t\t{\n\t\t\tif(st.empty()) return error();\n\t\t\tst.pop();\n\t\t } \n        if(step[i]==\"INV\")\n        {\n        \tif(st.empty()) return error();\n            ll now=-st.top();\n            st.pop();\n            st.push(now);\n        }\n        if(step[i]==\"DUP\")\n        {\n        \tif(st.empty()) return error();\n            ll now=st.top();\n            st.push(now);\n        }\n        if(step[i]==\"SWP\")\n        {\n        \tif(st.size()<2) return error();\n            ll x1=st.top();\n            st.pop();\n            ll x2=st.top();\n            st.pop();\n            st.push(x1);\n            st.push(x2);\n        }\n        if(step[i]==\"ADD\")\n        {\n        \tif(st.size()<2) return error();\n            ll x1=st.top();\n            st.pop();\n            ll x2=st.top();\n            st.pop();\n            ll ans=x1+x2;\n            if(check(ans)) return error();\n            st.push(ans);\n        }\n        if(step[i]==\"SUB\")\n        {\n        \tif(st.size()<2) return error();\n            ll x1=st.top();\n            st.pop();\n            ll x2=st.top();\n            st.pop();\n            ll ans=x2-x1;\n            if(check(ans)) return error();\n            st.push(ans);\n        }\n        if(step[i]==\"MUL\")\n        {\n        \tif(st.size()<2) return error();\n            ll x1=st.top();\n            st.pop();\n            ll x2=st.top();\n            st.pop();\n            ll ans=x1*x2;\n            if(check(ans)) return error();\n            st.push(ans);\n        }\n        if(step[i]==\"DIV\")\n        {\n        \tif(st.size()<2) return error();\n            ll x1=st.top();\n            st.pop();\n            ll x2=st.top();\n            st.pop();\n            if(x1==0) return error();//\u4e00\u5b9a\u8981\u5224\u9664\u6570\uff01 \n            ll ans=x2/x1;\n            if(check(ans)) return error();\n            st.push(ans);\n        }\n        if(step[i]==\"MOD\")\n        {\n        \tif(st.size()<2) return error();\n            ll x1=st.top();\n            st.pop();\n            ll x2=st.top();\n            st.pop();\n            ll ans=x2%x1;\n            if(check(ans)) return error();\n            st.push(ans);\n        }\n    }\n    if(st.size()!=1) return error();//\u770b\u770b\u6808\u7684\u6700\u540e\u5927\u5c0f \n    else return st.top();\n}\nint main()\n{\n    for(cnt=1;;cnt++)\n    {\n        cin>>step[cnt];\n        if(step[cnt]==\"NUM\") num[cnt]=read();\n        if(step[cnt]==\"END\") break;\n    }\n    n=read();\n    for(register ll i=1;i<=n;i++)\n    {\n        x=read();\n        x=f(x);\n        if(x!=5201314) printf(\"%lld\\n\",x);//\u8f93\u51fa \n    }\n    return 0;//\u5b8c\u7ed3\u6492\u82b1~~ \n}\n\n```\n\u70b9\u4e2a\u8d5e\u518d\u8d70\u5457QAQ",
        "postTime": 1593166130,
        "uid": 342090,
        "name": "Fangfx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "##.\n\u8fd9\u662f\u6211\u968f\u673a\u8df3\u9898\u8df3\u5230\u7684\uff0c\u770b\u4e0a\u53bb\u975e\u5e38\u975e\u5e38\u590d\u6742\uff0c\u4f46\u4ed4\u7ec6\u8bfb\u4e86\u9898\u4e4b\u540e\uff0c\u53d1\u73b0\u5c31\u662f\u4e00\u4e2a~~\u6a21\u62df\u6c34\u9898~~\uff08\u6a21\u62df\u5de5\u4e1a\u9898\uff09\u4e8e\u662f\u6211\u4fbf\u7528stl\u5f00\u59cb\u4e86\u6a21\u62df\u3002\u672c\u9898\u6700\u5927\u7684\u96be\u5904\u662f\uff1a**\u5224\u65ad\u662f\u5426\u5408\u6cd5**\uff0c\u5176\u5b9e\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u5c31\u662f\u5728\u4f7f\u7528\u6808\u4e4b\u524d\u60f3\u4e00\u60f3\u9700\u8981\u51e0\u4e2a\u5143\u7d20\uff0c\u5728\u8c03\u7528**size\u51fd\u6570**\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u6253\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u8fd8\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e\u5e76\u4e0d\u662f\u592a\u9ebb\u70e6\uff0c\u8fdb\u884c\u8fd0\u7b97\u7684\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5**\u7c98\u8d34**\u540e**\u6539\u7b26\u53f7**\u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u4e0d\u8fc7\u8981\u6ce8\u610f\u5206\u6e05\u695a\u5148\u540e\u987a\u5e8f\uff09\n\nPS:\u4e5f\u5c31200\u884c\u591a\u4e00\u70b9\u7f62\u4e86\u3002\uff0823333\uff09\n\n##.\n\u4e0b\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<queue>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<stack>\nusing namespace std;\ninline void read(long long &x)\n{\n    x=0;\n    long long p=1;\n    char c=getchar();\n    while(!isdigit(c)){if(c=='-')p=-1;c=getchar();}\n    while(isdigit(c)) {x=(x<<1)+(x<<3)+(c^'0');c=getchar();}\n    x*=p;\n}\nstruct node\n{\n    string s;\n    long long x;\n}e[2100];\nint cnt;\nstring c;\nvoid fun(long long x)\n{\n    stack<long long>sta;\n    if(abs(x)>1000000000)\n    {\n        printf(\"ERROR\\n\");\n        return ;\n    }\n    sta.push(x);\n    for(int i=1;i<=cnt;i++)\n    {\n        if(e[i].s==\"NUM\")\n        {\n            if(abs(e[i].x)>1000000000)\n            {\n                printf(\"ERROR\\n\");\n                return ;\n            }\n            sta.push(e[i].x);\n        }\n        else if(e[i].s==\"POP\")\n        {\n            if(sta.empty())\n            {\n                printf(\"ERROR\\n\");\n                return ;\n            }\n            sta.pop();    \n        }\n        else if(e[i].s==\"INV\")\n        {\n            if(sta.empty())\n            {\n                printf(\"ERROR\\n\");\n                return ;\n            }\n            long long k=sta.top();\n            sta.pop();\n            sta.push(-k);\n        }\n        else if(e[i].s==\"DUP\")\n        {\n            if(sta.empty())\n            {\n                printf(\"ERROR\\n\");\n                return ;\n            }\n            sta.push(sta.top());\n        }\n        else if(e[i].s==\"SWP\")\n        {\n            if(sta.size()<2)\n            {\n                printf(\"ERROR\\n\");\n                return ;\n            }\n            long long tmp=sta.top();\n            sta.pop();\n            long long tmpp=sta.top();\n            sta.pop();\n            sta.push(tmp);sta.push(tmpp);\n        }\n        else if(e[i].s==\"ADD\")\n        {\n            if(sta.size()<2)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            long long tmp=sta.top();\n            sta.pop();\n            long long tmpp=sta.top();\n            sta.pop();\n            if(abs(tmpp+tmp)>1000000000)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            sta.push(tmp+tmpp);\n        }\n        else if(e[i].s==\"SUB\")\n        {\n            if(sta.size()<2)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            long long tmp=sta.top();\n            sta.pop();\n            long long tmpp=sta.top();\n            sta.pop();\n            if(abs(tmpp-tmp)>1000000000)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            sta.push(tmpp-tmp);\n        }\n        else if(e[i].s==\"MUL\")\n        {\n            if(sta.size()<2)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            long long tmp=sta.top();\n            sta.pop();\n            long long tmpp=sta.top();\n            sta.pop();\n            if(abs(tmpp*tmp)>1000000000)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            sta.push(tmp*tmpp);\n        }\n        else if(e[i].s==\"DIV\")\n        {\n            if(sta.size()<2)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            long long tmp=sta.top();\n            sta.pop();\n            long long tmpp=sta.top();\n            sta.pop();\n            if(tmp==0)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            if(abs(tmpp/tmp)>1000000000)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            sta.push(tmpp/tmp);\n        }\n        else if(e[i].s==\"MOD\")\n        {\n            if(sta.size()<2)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            long long tmp=sta.top();\n            sta.pop();\n            long long tmpp=sta.top();\n            sta.pop();\n            if(abs(tmpp%tmp)>1000000000)\n            {\n                printf(\"ERROR\\n\");\n                return;\n            }\n            sta.push(tmpp%tmp);\n        }\n    }\n    if(sta.size()==1)printf(\"%lld\\n\",sta.top());\n    else printf(\"ERROR\\n\");\n}\nlong long n;\nint main()\n{\n//    freopen(\".in\",\"r\",stdin);\n//    freopen(\".out\",\"w\",stdout);\n    while(cin>>c)\n    {\n        if(c[0]=='E')break;\n        cnt++;\n        e[cnt].s=c;\n        if(c==\"NUM\")\n        {\n            long long x;\n            read(x);\n            e[cnt].x=x;\n        }\n    }\n    read(n);\n    for(int i=1;i<=n;i++)\n    {\n        long long x;\n        read(x);\n        fun(x);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1508042370,
        "uid": 22016,
        "name": "pengym",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "emm,\u5f88\u591a\u4eba\u8bf4\u8fd9\u9898\u5751\uff0c\u5176\u5b9e\u4e2a\u4eba\u89c9\u5f97\u8fd8\u597d\n\n~~\u6bd5\u7adf\u5f00\u59cb\u628a\u6808\u5f53\u961f\u5217\u505a\u8fd8\u80fd\u8fc74\u4e2a\u70b9\u3010\u624b\u52a8\u6ed1\u7a3d\u3011~~\n\n\u552f\u4e00\u7684\u96be\u70b9\u5c31\u662f\u5224\u5b9a\u4ec0\u4e48\u65f6\u5019\u5c5e\u4e8e\u9519\u8bef\u7684\u8303\u7574\n\n\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n1.\u53d6\u51fa\u4e00\u4e2a\u6216\u4e24\u4e2a\u5143\u7d20\u65f6\u6808\u5185\u5143\u7d20\u4e0d\u591f\n\n2.\u9664\u548c\u819c\u7684\u65f6\u5019\u9664\u6216\u819c\u4e860\n\n3.\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u6709\u6570\u5b57\u7684\u7edd\u5bf9\u503c\u5927\u4e8e1000000000\n\n4.\u6700\u540e\u6808\u5185\u4e0d\u662f\u4e00\u4e2a\u5143\u7d20\n\n\u4ee5\u4e0b\u4ee3\u7801\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nlong long int s[5007],p,n,head,tail,mx=1000000000,a[2007],cnt;//\t\u957f\u6574\u578b\u4fbf\u4e8e\u64cd\u4f5c\u540e\u5728\u5224\u5b9a\u6570\u5b57\u662f\u5426\u5408\u6cd5\uff0c\u907f\u514d\u7206int\nstring d[2007];\nint doing(int p){\n\thead=1;tail=0;\n\ts[++tail]=p;\n\tfor(int i=1;i<cnt;i++){\n\t\tif(d[i]==\"NUM\") s[++tail]=a[i];//\u6dfb\u52a0\u5143\u7d20\n\t\tif(d[i]==\"POP\") tail--;//\u5220\u9664\u5143\u7d20\n\t\tif(d[i]==\"INV\")\ts[tail]=-s[tail];//\u7ffb\u8f6c\n\t\tif(d[i]==\"DUP\")\ts[++tail]=s[tail];//\u6dfb\u52a0\u76f8\u540c\u5143\u7d20\n\t\tif(d[i]==\"SWP\")\t{\n\t\t\tif(tail==head) return -2000000000;\n\t\t\tswap(s[tail],s[tail-1]);//\u4ea4\u6362\u5143\u7d20\n\t\t}\t\n\t\tif(d[i]==\"ADD\")\ts[tail-1]=s[tail]+s[tail-1],tail--;\t//\u52a0\u6cd5\n\t\tif(d[i]==\"SUB\")\ts[tail-1]=s[tail-1]-s[tail],tail--;//\u51cf\u6cd5\n\t\tif(d[i]==\"MUL\")\ts[tail-1]=s[tail-1]*s[tail],tail--;//\u4e58\u6cd5\n\t\tif(d[i]==\"DIV\")\t{\n\t\t\tif(s[tail]==0) return -2000000000;//\u5224\u5b9a2\n\t\t\ts[tail-1]=s[tail-1]/s[tail],tail--;\t\n\t\t}//\u9664\u6cd5\n\t\tif(d[i]==\"MOD\")\t{\n\t\t\tif(s[tail-1]==0) return -2000000000;//\u5224\u5b9a2\n\t\t\ts[tail-1]=s[tail-1]%s[tail],tail--;\t\t\n\t\t}//\u53d6\u819c\n\t\tif(head>tail||s[tail]>mx||s[tail]<-mx) return -2000000000;//\u5224\u5b9a1\uff0c3\n\t}\n\tif(head==tail) return s[head];//\u5224\u5b9a4\n\treturn -2000000000;\n}\nint main(){\n\twhile(cin>>d[++cnt]&&d[cnt]!=\"END\"){\n\t\tif(d[cnt]==\"NUM\") \n\t\t\tscanf(\"%d\",&a[cnt]);\n\t}//\u8f93\u5165\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&p);\n\t\tint r=doing(p);\n\t\tif(r==-2000000000) printf(\"ERROR\\n\");\n\t\telse printf(\"%d\\n\",r);\n\t}\n    return 0;\n}\n\n```\n\n\u7a0b\u5e8f\u552f\u4e00\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5c06\u5224\u5b9a\u4e0d\u5408\u6cd5\u653e\u5230\u4e86\u64cd\u4f5c\u540e\u9762\uff0c\u907f\u514d\u91cd\u590d\u5199\u4e00\u6837\u7684\u4ee3\u7801\u3002\n\n\u4f46\u662f\u8981\u6ce8\u610f\u4ea4\u6362\u65f6\u8981\u5224\u5b9a\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u5408\u6cd5\u5b83\u5e76\u4e0d\u4f1a\u50cf\u8fd0\u7b97\u90a3\u6837\u4f53\u73b0\u5728tail\u4e0a\u9762\n\n\u8fd8\u6709\u4e0d\u5408\u6cd5\u8fd4\u56de\u4e00\u5b9a\u4e0d\u8981\u5199-1\uff0c\u6211\u5f00\u59cb\u5c31\u662f\u8fd9\u4e48\u5199\u7684\uff0c90\u5206\u3002\n\n\u4f60\u6ca1\u731c\u9519\uff0c\u6709\u4e00\u4e2a\u70b9-1\u3010\u4fdd\u6301\u5fae\u7b11\u3011\n\n\u795d\u5927\u5bb6AC\n",
        "postTime": 1539532916,
        "uid": 50412,
        "name": "\u674e\u5c27",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc7\u4f7f\u7528 java \u8bed\u8a00\u7684\u9898\u89e3\u3002\r\n\r\n## Design\r\n\r\n### Stack\r\n\r\n#### stack-demand\r\n\r\n\u5728 stack \u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\u3001\u67e5\u8be2\u6808\u9876\u5143\u7d20\u5e76\u5220\u9664\u3001\u67e5\u8be2\u6808\u4e2d\u662f\u5426\u662f\u6700\u540e\u4e00\u4e2a\u6570\u3002\r\n\r\n#### stack-interface\r\n\r\n```java\r\ninterface MyStack {\r\n  int nul = 1000000009;\r\n\r\n  int push(long x);\r\n  int val();\r\n  int getfinal();\r\n}\r\n```\r\n\r\n#### stack-realization \r\n\r\n\u4f7f\u7528 `ArrayList<Integer>` \u6765\u5b9e\u73b0 stack\u3002\r\n\r\n\u5bf9\u4e8e `push` \u9700\u6c42\uff0c\u5148\u5224\u5b9a\u63d2\u5165\u5143\u7d20 $x$ \u662f\u5426\u5408\u6cd5\uff0c\u82e5\u4e0d\u5408\u6cd5\u8fd4\u56de\u4e0d\u5408\u6cd5\u4fe1\u606f\u3002\r\n\r\n\u5bf9\u4e8e `val` \u9700\u6c42\uff0c\u5148\u67e5\u8be2 size \u662f\u5426\u4e0d\u4e3a\u96f6\uff08\u82e5\u4e3a 0 \u5219\u8fd4\u56de\u4e0d\u5408\u6cd5\u4fe1\u606f\uff09\uff0c\u7136\u540e\u5b58\u50a8\u6808\u9876\u5143\u7d20\u7684\u503c\uff0c\u6700\u540e\u5c06\u8be5 index \u5728 ArrayList \u4e2d remove \u6389\u3002\r\n\r\n\u5bf9\u4e8e `getfinal` \u9700\u6c42\uff0c\u5148\u67e5\u8be2 size \u662f\u5426\u4e3a 1\uff0c\u82e5\u662f\u5219\u8fd4\u56de val\uff0c\u5426\u5219\u8fd4\u56de\u4e0d\u5408\u6cd5\u4fe1\u606f\u3002\r\n\r\n### Options\r\n\r\n#### options-demand\r\n\r\n\u5b9e\u73b0\u9898\u76ee\u4e2d\u7684 11 \u79cd\u64cd\u4f5c\u3002\r\n\r\n#### options-interface\r\n\r\n```java\r\ninterface OP {\r\n  int nul = 1000000009;\r\n\r\n  int NUM(long x);\r\n  int POP();\r\n  int INV();\r\n  int DUP();\r\n  int SWP();\r\n  int ADD();\r\n  int SUB();\r\n  int MUL();\r\n  int DIV();\r\n  int MOD();\r\n  int END();\r\n}\r\n```\r\n\r\n#### options-realization\r\n\r\n\u5927\u90e8\u5206\u64cd\u4f5c\u7565\u3002\r\n\r\n\u5bf9\u4e8e `ADD` \u64cd\u4f5c\uff0c\u5148\u53d6 $b$ \u5206\u522b\u4f9d\u6b21\u4e3a\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6\u5e94\u8be5\u5148\u5224\u65ad $b$ \u662f\u5426\u662f\u4e0d\u5408\u6cd5\u4fe1\u606f\uff0c\u82e5\u662f\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0d\u5408\u6cd5\u4fe1\u606f\u3002\u5176\u4f59\u53d6\u4e24\u4e2a\u6570\u7684\u64cd\u4f5c\u540c\u7406\u3002\r\n\r\n\u5bf9\u4e8e `DIV` \u548c `MOD` \u64cd\u4f5c\uff0c\u9700\u8981\u5224\u65ad\u9664\u6570\uff08\u6a21\u6570\uff09\u662f\u5426\u4e3a 0\uff0c\u82e5\u662f\u5219\u8fd4\u56de\u4e0d\u5408\u6cd5\u4fe1\u606f\u3002\r\n\r\n### Reading\r\n\r\n#### reading-demand\r\n\r\n\u8bfb\u5165\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u64cd\u4f5c\u8981\u6c42\uff0c\u5224\u5b9a\u8be5\u64cd\u4f5c\u5e94\u8be5\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff1b\u8bfb\u5165\u8be2\u95ee\u6570\uff1b\u7ed9\u51fa $f(x)$ \u4e2d $x$ \u7684\u503c\uff1b\u5bf9\u4e8e\u4e00\u6b21\u65b0\u7684\u8be2\u95ee\uff0c\u63d0\u4f9b resite \u65b9\u6cd5\u8868\u793a\u4ece\u5934\u5f00\u59cb\u626b\u63cf\u64cd\u4f5c\u5e8f\u5217\u3002\r\n\r\n#### reading-interface\r\n\r\n```java\r\ninterface Reading {\r\n  int ReadOps();\t\t// It returns the number of queries.\r\n  int NextQry();\r\n  int NextOps();\r\n  int NextAdd();\t\t// It returns the next number which should be push into the stack(NUM operation).\r\n  void resite();\r\n}\r\n```\r\n\r\n#### reading-realization\r\n\r\n\u9996\u5148\u8bfb\u5165\u64cd\u4f5c\u5e8f\u5217\uff1a\u4e0d\u65ad\u8bfb\u5165\u5b57\u7b26\u4e32 $t$\uff0c\u82e5\u5b57\u7b26\u4e32\u4e3a `NUM`\uff0c\u5219\u7d27\u63a5\u7740\u8bfb\u5165\u4e00\u4e2a Integer \u8868\u793a\u88ab\u63d2\u5165\u7684\u6570\uff08\u5e76\u63d2\u5165\u4e00\u4e2a ArrayList\uff09\uff1b\u7136\u540e\u5c06\u64cd\u4f5c\u5b57\u7b26\u4e32\u5b58\u50a8\u4e0b\u6765\u3002\u4e00\u76f4\u8bfb\u5165\u5230 $t$ \u4e3a\u6570\u5b57\uff0c\u8fd4\u56de\u6b64\u65f6\u7684 $t$ \u5373\u4e3a\u8be2\u95ee\u6570\u3002\r\n\r\n\u58f0\u660e\u5b9e\u4f8b\u53d8\u91cf pos \u548c pp\uff0c\u5206\u522b\u8868\u793a\u5f53\u524d\u5df2\u626b\u63cf\u5230\u64cd\u4f5c\u5e8f\u5217\u7684\u4f4d\u7f6e\u548c\u88ab\u63d2\u5165\u7684\u6570\u7684\u4f4d\u7f6e\u3002\u5728 resite \u65b9\u6cd5\u4e2d\uff0c\u5c06\u4e8c\u8005\u6e05\u96f6\uff1b\u5728 `NextOps` \u548c `NextAdd` \u65b9\u6cd5\u4e2d\u5206\u522b\u4ee4\u4e8c\u8005\u81ea\u589e\u5e76\u8fd4\u56de\u5bf9\u5e94 ArrarList \u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u3002\r\n\r\n\u4f7f\u7528 Map \u5c06\u64cd\u4f5c\u5b57\u7b26\u4e32\u6620\u5c04\u4e3a\u6574\u6570\uff0c\u4f5c\u4e3a `nextOps` \u7684\u8fd4\u56de\u503c\uff08\u5982\u679c\u626b\u63cf\u5b8c\u4e86\u5e8f\u5217\u8fd4\u56de -1\uff09\u3002\r\n\r\n\u5bf9\u4e8e `NexrQry` \u65b9\u6cd5\uff0c\u76f4\u63a5\u8bfb\u5165\u4e00\u4e2a\u6574\u6570\u5e76\u8fd4\u56de\u5373\u53ef\u3002\r\n\r\n### Validity Inspection(Checker)\r\n\r\n#### checker-demand\r\n\r\n\u5224\u5b9a\u67d0\u4e2a\u503c\u662f\u4e0d\u662f\u975e\u6cd5\u4fe1\u606f\u3002\r\n\r\n#### checker-realization\r\n\r\n\u56e0\u4e3a\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u503c\u5747\u4e3a\u7edd\u5bf9\u503c\u4e0d\u5927\u4e8e $10^9$ \u7684\u6570\uff0c\u6240\u4ee5\u53d6\u7edd\u5bf9\u503c\u5927\u4e8e $10^9$ \u7684\u6570\u5747\u4e3a\u975e\u6cd5\u4fe1\u606f\u5373\u53ef\u3002\r\n\r\n\u5728\u4e0a\u9762\u5404\u9700\u8981\u8fd4\u56de\u975e\u6cd5\u4fe1\u606f\u7684\u65b9\u6cd5\u4e2d\uff0c\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u4e00\u4e2a\u5927\u4e8e $10^9$ \u7684 int \u53d8\u91cf\u8868\u793a\u975e\u6cd5\u4fe1\u606f\uff0c\u4f8b\u5982 interface `MyStack` \u4e2d\u7684 `nul`\u3002\r\n\r\n### Solver\r\n\r\n#### solver-realization\r\n\r\n\u5148\u8bfb\u5165\u64cd\u4f5c\u5e8f\u5217\u3002\r\n\r\n\u7136\u540e\u8bfb\u5165\u8be2\u95ee\u6570\uff0c\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u6267\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\r\n\r\n\u521d\u59cb\u5316\u6808\u5e76\u8c03\u7528 `resite` \u65b9\u6cd5\uff0c\u7136\u540e\u63d2\u5165\u6808\u7684\u521d\u59cb\u6570\u3002\r\n\r\n\u904d\u5386\u64cd\u4f5c\u5e8f\u5217\uff0c\u6839\u636e `NextOps` \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5224\u5b9a\u8c03\u7528 Options \u4e2d\u7684\u54ea\u4e2a\u65b9\u6cd5\uff0c\u8bb0\u5f55\u8fd4\u56de\u503c\u3002\r\n\r\n\u82e5\u8fd4\u56de\u503c\u4e0d\u5408\u6cd5\uff0c\u8f93\u51fa `ERROR` \u5e76\u8fdb\u884c\u4e0b\u4e00\u6b21\u8be2\u95ee\uff1b\r\n\r\n\u82e5\u8bfb\u5165\u81f3 `END`\uff0c\u8f93\u51fa\u7ed3\u679c\u5e76\u8fdb\u884c\u4e0b\u4e00\u6b21\u8be2\u95ee\u3002\r\n\r\n### FastIO\r\n\r\n\u7565\u3002\r\n\r\n## Code\r\n\r\n```java\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Checker {\r\n  final static int lim = 1000000000;\r\n\r\n  static public boolean CheckNotLegal(long x) {\r\n    return Math.abs(x) > lim;\r\n  }\r\n}\r\n\r\ninterface MyStack {\r\n  int nul = 1000000009;\r\n\r\n  int push(long x);\r\n  int val();\r\n  int getfinal();\r\n}\r\n\r\nclass Stack implements MyStack {\r\n  ArrayList<Integer> stk;\r\n\r\n  Stack() {\r\n    stk = new ArrayList<>();\r\n  }\r\n\r\n  @Override\r\n  public int push(long x) {\r\n    if (Checker.CheckNotLegal(x)) { return nul; }\r\n    stk.add((int)x);\r\n    return 0;\r\n  }\r\n\r\n  @Override\r\n  public int val() {\r\n    if (stk.size() == 0) return nul;\r\n    int ret = stk.get(stk.size() - 1);\r\n    stk.remove(stk.size() - 1);\r\n    return ret;\r\n  }\r\n\r\n  @Override\r\n  public int getfinal() {\r\n    return (stk.size() == 1) ? val() : nul;\r\n  }\r\n}\r\n\r\ninterface OP {\r\n  int nul = 1000000009;\r\n\r\n  int NUM(long x);\r\n  int POP();\r\n  int INV();\r\n  int DUP();\r\n  int SWP();\r\n  int ADD();\r\n  int SUB();\r\n  int MUL();\r\n  int DIV();\r\n  int MOD();\r\n  int END();\r\n}\r\n\r\nclass Options implements OP {\r\n  MyStack s;\r\n\r\n  Options() { s = new Stack(); }\r\n\r\n  @Override\r\n  public int NUM(long x) {  return s.push(x);  }\r\n\r\n  @Override\r\n  public int POP() { return s.val(); }\r\n\r\n  @Override\r\n  public int INV() {\r\n    int x = s.val();\r\n    return s.push(-x);\r\n  }\r\n\r\n  @Override\r\n  public int DUP() {\r\n    int x = s.val();\r\n    s.push(x);\r\n    return s.push(x);\r\n  }\r\n\r\n  @Override\r\n  public int SWP() {\r\n    int a = s.val(), b = s.val();\r\n    s.push(a);\r\n    return s.push(b);\r\n  }\r\n\r\n  @Override\r\n  public int ADD() {\r\n    int a = s.val(), b = s.val(), x = a + b;\r\n    if (Checker.CheckNotLegal(b)) return nul;\r\n    return s.push(x);\r\n  }\r\n\r\n  @Override\r\n  public int SUB() {\r\n    int a = s.val(), b = s.val(), x = b - a;\r\n    if (Checker.CheckNotLegal(b)) return nul;\r\n    return s.push(x);\r\n  }\r\n\r\n  @Override\r\n  public int MUL() {\r\n    int a = s.val(), b = s.val(); long x = (long) a * b;\r\n    if (Checker.CheckNotLegal(b)) return nul;\r\n    return s.push(x);\r\n  }\r\n\r\n  @Override\r\n  public int DIV() {\r\n    int a = s.val(), b = s.val();\r\n    if (Checker.CheckNotLegal(b) || (a == 0)) return nul;\r\n    return s.push(b / a);\r\n  }\r\n\r\n  @Override\r\n  public int MOD() {\r\n    int a = s.val(), b = s.val();\r\n    if (Checker.CheckNotLegal(b) || (a == 0)) return nul;\r\n    return s.push(b % a);\r\n  }\r\n\r\n  @Override\r\n  public int END() {\r\n    return s.getfinal();\r\n  }\r\n}\r\n\r\ninterface Reading {\r\n  int ReadOps();\r\n  int NextQry();\r\n  int NextOps();\r\n  int NextAdd();\r\n  void resite();\r\n}\r\n\r\nclass Read implements Reading {\r\n  ArrayList<String> s;\r\n  ArrayList<Integer> PutNum;\r\n  IO io;\r\n  Map<String, Integer> mp;\r\n  int pos, pp;\r\n\r\n  Read(IO _ioo) {\r\n    s = new ArrayList<>();\r\n    io = _ioo;\r\n    PutNum = new ArrayList<>();\r\n    mp = new HashMap<>();\r\n    mp.put(\"NUM\", 1);\r\n    mp.put(\"POP\", 2);\r\n    mp.put(\"INV\", 3);\r\n    mp.put(\"DUP\", 4);\r\n    mp.put(\"SWP\", 5);\r\n    mp.put(\"ADD\", 6);\r\n    mp.put(\"SUB\", 7);\r\n    mp.put(\"MUL\", 8);\r\n    mp.put(\"DIV\", 9);\r\n    mp.put(\"MOD\", 10);\r\n    mp.put(\"END\", 11);\r\n    pos = 0;\r\n  }\r\n\r\n  @Override\r\n  public void resite() {\r\n    pos = pp = 0;\r\n  }\r\n\r\n  @Override\r\n  public int NextAdd() {\r\n    return PutNum.get(pp++);\r\n  }\r\n\r\n  boolean Check(String t) {\r\n    return (t.charAt(0) < '0') || (t.charAt(0) > '9');\r\n  }\r\n\r\n  @Override\r\n  public int ReadOps() {\r\n    String t = io.next();\r\n    while (Check(t)) {\r\n      s.add(t);\r\n      if (t.equals(\"NUM\")) PutNum.add(io.nextInt());\r\n      t = io.next();\r\n    }\r\n    return Integer.parseInt(t);\r\n  }\r\n\r\n  @Override\r\n  public int NextOps() {\r\n    if (pos == s.size()) return -1;\r\n    return mp.get(s.get(pos++));\r\n  }\r\n\r\n  @Override\r\n  public int NextQry() {\r\n    resite();\r\n    return io.nextInt();\r\n  }\r\n}\r\n\r\nclass Solver {\r\n  void solve(IO io) {\r\n    Reading rd = new Read(io);\r\n    int n = rd.ReadOps();\r\n    while (n-- != 0) {\r\n      OP ops = new Options();\r\n      ops.NUM(rd.NextQry());\r\n      for (int op = rd.NextOps(), ret = 0; op != -1; op = rd.NextOps()) {\r\n        switch (op) {\r\n          case 1: {\r\n            ret = ops.NUM(rd.NextAdd()); break;\r\n          }\r\n          case 2: {\r\n            ret = ops.POP(); break;\r\n          }\r\n          case 3: {\r\n            ret = ops.INV(); break;\r\n          }\r\n          case 4: {\r\n            ret = ops.DUP(); break;\r\n          }\r\n          case 5: {\r\n            ret = ops.SWP(); break;\r\n          }\r\n          case 6: {\r\n            ret = ops.ADD(); break;\r\n          }\r\n          case 7: {\r\n            ret = ops.SUB(); break;\r\n          }\r\n          case 8: {\r\n            ret = ops.MUL(); break;\r\n          }\r\n          case 9: {\r\n            ret = ops.DIV(); break;\r\n          }\r\n          case 10: {\r\n            ret = ops.MOD(); break;\r\n          }\r\n          case 11: {\r\n            ret = ops.END(); break;\r\n          }\r\n        }\r\n        if (Checker.CheckNotLegal(ret)) {\r\n          io.print(\"ERROR\\n\"); break;\r\n        }\r\n        if (op == 11) {\r\n          io.print(ret + \"\\n\");\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\npublic class Main {\r\n  public static void main(String[] argc) {\r\n    IO io = new FastIO(System.in, System.out);\r\n    Solver solver = new Solver();\r\n    solver.solve(io);\r\n    io.endpro();\r\n  }\r\n}\r\n\r\ninterface IO {\r\n  int nextInt();\r\n  long nextLong();\r\n  String next();\r\n  void print(long x);\r\n  void print(String s);\r\n  void endpro();\r\n}\r\n\r\nclass FastIO implements IO {\r\n  public BufferedReader reader;\r\n  public StringTokenizer tokenizer;\r\n  public PrintWriter out;\r\n\r\n  public void endpro() {\r\n    out.close();\r\n  }\r\n\r\n  public FastIO(InputStream stream, OutputStream os) {\r\n    reader = new BufferedReader(new InputStreamReader(stream), 32768);\r\n    tokenizer = null;\r\n    out = new PrintWriter(os);\r\n  }\r\n\r\n  public void print(long x) {\r\n    out.print(x);\r\n  }\r\n\r\n  public void print(String s) {\r\n    out.print(s);\r\n  }\r\n\r\n  public String next() {\r\n    while (tokenizer == null || !tokenizer.hasMoreTokens()) {\r\n      try {\r\n        tokenizer = new StringTokenizer(reader.readLine());\r\n      } catch (IOException e) {\r\n        throw new RuntimeException(e);\r\n      }\r\n    }\r\n    return tokenizer.nextToken();\r\n  }\r\n\r\n  public int nextInt() {\r\n    return Integer.parseInt(next());\r\n  }\r\n\r\n  public long nextLong() {\r\n    return Long.parseLong(next());\r\n  }\r\n\r\n}\r\n```\r\n\r\n",
        "postTime": 1635754140,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "P2186 \u5c0f Z \u7684\u6808\u51fd\u6570"
    },
    {
        "content": "## \u5751\u70b9:\n\n1.\u7b2c\u4e00\u6b21\u538b\u5165\u8981\u7279\u5224\u3002\n\n2.ADD,MUL,SUB,NUM\u8981\u5224\u65ad\u6ea2\u51fa\u3002\n\n3.DIV,MOD\u8981\u5224\u65ad\u9664\u6570\u662f\u5426\u4e3a0\u3002\n\n4.\u9664NUM\u548cEND\u5916\u7684\u64cd\u4f5c\u8981\u5224\u65ad\u6808\u4e2d\u5143\u7d20\u4e2a\u6570\u3002\n\n5.SUB,DIV,MOD\u662f\u5f39\u51fa\u7684\u7b2c\u4e8c\u4e2a\u6570op\u7b2c\u4e00\u4e2a\u6570\u3002\n\n## AC Code\n```cpp\n#include<stdio.h>\n#include<stack>\n#include<math.h>\n#define ll long long\n#define error(); printf(\"ERROR\\n\");return;\nusing namespace std;\nchar a[2020][4];\nll num[2020],cnt=1,n,x;\nstack<ll> z;\nvoid doit() {\n\tll ls1=0,ls2=0;\n\tif(abs(x)>1000000000) {\n\t\terror();\n\t}\n\tz.push(x);\n\tfor(ll i=1; i<=cnt; i++) {\n\t\tswitch(a[i][1]) {//\u5c0f\u6280\u5de7:\u53ea\u5224\u65ad\u7b2c\u4e00\u4e2a\u5b57\u7b26 \n\t\t\tcase 'N':\n\t\t\t\tif(abs(num[i])>1000000000) {\n\t\t\t\t\terror();//\u8d851000000000\u5224\u9519 \n\t\t\t\t}\n\t\t\t\tz.push(num[i]);\n\t\t\t\tbreak;//num\n\t\t\tcase 'P':\n\t\t\t\tif(z.empty()) {\n\t\t\t\t\terror();\n\t\t\t\t}//\u6808\u4e2d\u65e0\u5143\u7d20\u5224\u9519 \n\t\t\t\tz.pop();\n\t\t\t\tbreak;//pop\n\t\t\tcase 'I':\n\t\t\t\tif(z.empty()) {\n\t\t\t\t\terror();\n\t\t\t\t}//\u6808\u4e2d\u65e0\u5143\u7d20\u5224\u9519 \n\t\t\t\tls1=z.top();\n\t\t\t\tz.pop();\n\t\t\t\tz.push(-ls1);\n\t\t\t\tbreak;//inv\n\t\t\tcase 'D':\n\t\t\t\tif(a[i][1]=='U') {\n\t\t\t\t\tif(z.empty()) {\n\t\t\t\t\t\terror();//\u6808\u4e2d\u65e0\u5143\u7d20\u5224\u9519 \n\t\t\t\t\t}\n\t\t\t\t\tz.push(z.top());//dup\n\t\t\t\t} else {\n\t\t\t\t\tif(z.size()<2) {\n\t\t\t\t\t\terror();//\u6808\u4e2d\u5143\u7d20<2\u5224\u9519 \n\t\t\t\t\t}\n\t\t\t\t\tls1=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tls2=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tif(ls1==0) {\n\t\t\t\t\t\terror();\n\t\t\t\t\t}\n\t\t\t\t\tz.push(ls2/ls1);//div\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'S':\n\t\t\t\tif(a[i][1]=='U') {\n\t\t\t\t\tif(z.size()<2) {\n\t\t\t\t\t\terror();//\u6808\u4e2d\u5143\u7d20<2\u5224\u9519 \n\t\t\t\t\t}\n\t\t\t\t\tls1=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tls2=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tif(abs(ls2-ls1)>1000000000) {\n\t\t\t\t\t\terror();//\u8d851000000000\u5224\u9519 \n\t\t\t\t\t}\n\t\t\t\t\tz.push(ls2-ls1);\n\t\t\t\t\tbreak;//sub\n\t\t\t\t} else {\n\t\t\t\t\tif(z.size()<2) {\n\t\t\t\t\t\terror();//\u6808\u4e2d\u5143\u7d20<2\u5224\u9519 \n\t\t\t\t\t}\n\t\t\t\t\tls1=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tls2=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tz.push(ls1);\n\t\t\t\t\tz.push(ls2);\n\t\t\t\t\tbreak;//swp\n\t\t\t\t}\n\t\t\tcase 'A':\n\t\t\t\tif(z.size()<2) {\n\t\t\t\t\terror();//\u6808\u4e2d\u5143\u7d20<2\u5224\u9519 \n\t\t\t\t}\n\t\t\t\tls1=z.top();\n\t\t\t\tz.pop();\n\t\t\t\tls2=z.top();\n\t\t\t\tz.pop();\n\t\t\t\tif(abs(ls2+ls2)>1000000000) {\n\t\t\t\t\terror();//\u8d851000000000\u5224\u9519 \n\t\t\t\t}\n\t\t\t\tz.push(ls1+ls2);\n\t\t\t\tbreak;//add\n\t\t\tcase 'M':\n\t\t\t\tif(a[i][1]=='U') {\n\t\t\t\t\tif(z.size()<2) {\n\t\t\t\t\t\terror();//\u6808\u4e2d\u5143\u7d20<2\u5224\u9519 \n\t\t\t\t\t}\n\t\t\t\t\tls1=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tls2=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tif(abs(ls1*ls2)>1000000000) {\n\t\t\t\t\t\terror();//\u8d851000000000\u5224\u9519 \n\t\t\t\t\t}\n\t\t\t\t\tz.push(ls1*ls2);\n\t\t\t\t\tbreak;//mul\n\t\t\t\t} else {\n\t\t\t\t\tif(z.size()<2) {\n\t\t\t\t\t\terror();//\u6808\u4e2d\u5143\u7d20<2\u5224\u9519 \n\t\t\t\t\t}\n\t\t\t\t\tls1=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tls2=z.top();\n\t\t\t\t\tz.pop();\n\t\t\t\t\tif(ls1==0) {\n\t\t\t\t\t\terror();\n\t\t\t\t\t}\n\t\t\t\t\tz.push(ls2%ls1);\n\t\t\t\t\tbreak;//mod\n\t\t\t\t}\n\t\t}\n\t}\n\tif(z.size()!=1) {\n\t\terror();//\u6808\u4e2d\u5143\u7d20\u4e2a\u6570\u4e0d\u7b49\u4e8e1\u5224\u9519 \n\t}\n\tprintf(\"%lld\\n\",z.top());\n\tz.pop();\n\treturn;\n}\nint main() {\n\twhile(1) {\n\t\tscanf(\"%s\",&a[cnt]);\n\t\tif(a[cnt][0]=='E') {\n\t\t\tcnt--;\n\t\t\tbreak;\n\t\t}\n\t\tif(a[cnt][0]=='N') {\n\t\t\tscanf(\"%lld\",&num[cnt]);\n\t\t}\n\t\tcnt++;\n\t}\n\tscanf(\"%lld\",&n);\n\twhile(n--) {\n\t\tscanf(\"%lld\",&x);\n\t\tdoit();\n\t}\n\treturn 0;\n}\n```\n\u672c\u4ee3\u7801\u5df2\u7ecf\u8fc7\u53cd\u6284\u88ad\u5904\u7406",
        "postTime": 1605504956,
        "uid": 278350,
        "name": "mutable",
        "ccfLevel": 0,
        "title": "\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3"
    },
    {
        "content": "\u524d\u4e00\u6bb5\u65f6\u95f4\u6211\u6821\u5927\u4f6c\u90fd\u5728\u505a\u7684\u4e00\u9053\u6a21\u62df\u9898\u3002\u6211\u4e00\u4e2a\u849f\u84bb\u4e5f\u6765\u51d1\u4e2a\u70ed\u95f923333...\n\n\u4e3b\u8981\u7684\u96be\u70b9\u5728\u4e8e\u51fd\u6570\u592a\u591a\uff0c\u8fd8\u6709\u9644\u52a0\u7684\u9650\u5236\u6761\u4ef6\u3002\n\n\u4e3b\u8981\u7684\u5224\u9519\u6709\uff1a\n\n- \u6bcf\u6b21\u5165\u6808\u68c0\u67e5\u7edd\u5bf9\u503c\u662f\u5426\u8d85\u51fa\u9650\u5236\n\n- \u5bf9\u6808\u5185\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\u524d\u5148\u68c0\u67e5\u6808\u5185\u5143\u7d20\u7684\u6570\u91cf\n\n- \u9664\u4ee5\u96f6\u7684\u60c5\u51b5\n\n- \u8fd0\u7b97\u7ed3\u679c\u7684\u7edd\u5bf9\u503c\u662f\u5426\u8d85\u51fa\u9650\u5236\n\n- \u51fd\u6570\u6700\u540e\u6808\u5185\u5143\u7d20\u4e2a\u6570\n\n\u5728WA\u4e86\u4e00\u6b21\u540e\uff0c\u6211\u91cd\u65b0\u5199\u4e86\u4e00\u6b21\u4ee3\u7801\uff0c\u5e0c\u671b\u80fd\u5e2e\u52a9\u67e5\u9519\u800c\u5b9a\u4e49\u4e86\u4e00\u5927\u5806\u5e38\u91cf\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9\u3002\n\n\u6bd5\u7adf\u6a21\u62df\u9898\u5417\uff0c\u7ec6\u5fc3\u4e00\u70b9\u603b\u662f\u80fd\u505a\u5bf9\u7684\u3002\n\n\u6211\u7684\u601d\u8def\u6bd4\u8f83\u7cdf\u7cd5\uff0c\u6bcf\u4e00\u4e2a\u5224\u9519\u90fd\u662f\u5206\u5f00\u5199\u7684\uff0c11\u4e2a\u51fd\u6570\u4e5f\u662f\u5206\u5f00\u7684\uff0c\u8fd8\u624b\u5199\u4e86\u51e0\u4e2a\u8f85\u52a9\u51fd\u6570\u3002\u7a0b\u5e8f\u4e2d\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u7edf\u4e00\u7531EXECUTE\u51fd\u6570\u63a5\u7ba1\uff0c\u51fa\u73b0\u9519\u8bef\u5219\u4f7f\u7528HANDLE\\_ERROR\u51fd\u6570\u8fdb\u884c\u8f93\u51fa\u3002\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u6307\u4ee4\u4e0d\u80fd\u7528\u6b63\u5e38\u7684\u65b9\u5f0f\u8bfb\u5165\uff0c\u5c31\u624b\u5199\u4e86\u4e00\u4e2aread\\_instruction\u51fd\u6570\u6765\u8bfb\u5165\uff08\u679c\u7136\u8fd8\u662f\u592a\u5f31\u4e86\uff09\u3002\n\n\u8fd8\u662f\u60ef\u4f8b\uff0c\u80fd\u7528STL\u7684\u5730\u65b9\u7528\u7684\u90fd\u662fSTL\u3002\n\n\u5982\u679c\u8fd8\u4e0d\u7406\u89e3\u7684\u8bdd\u4ee3\u7801\u91cc\u6709\u6ce8\u91ca\uff1a\n\n```cpp\n#include<cstdio>\n#include<string>\n#include<stack>\nusing namespace std;\n\nstack<long long> s;                                                           //\u6808 \npair<long long,long long>ret;                                                 //GET\u51fd\u6570\u8fd4\u56de\u6808\u9876\u4e24\u4e2a\u5143\u7d20\u5f62\u6210\u7684\u4e8c\u5143\u7ec4 \nstring instruction[2000+10];                                                  //\u6307\u4ee4 \nlong long number[2000+10];                                                    //NUM\u51fd\u6570\u7684\u64cd\u4f5c\u6570 \nint cnt,n,ai;                                                                 //cnt:\u6307\u4ee4\u6570 \nbool fail;                                                                    //\u51fd\u6570\u662f\u5426\u4e2d\u9014\u5931\u8d25\u9000\u51fa \n\n//*********\u72b6\u6001\u5e38\u91cf\u8868\u5f00\u59cb**********//\n#define OVERFLOW_FAIL 1\n#define OVERFLOW_OK 2\n#define NUM_FAIL_OVERFLOW 3\n#define NUM_OK 4\n#define UNDERFLOW_FAIL 5\n#define UNDERFLOW_OK 6\n#define POP_FAIL_UNDERFLOW 7\n#define POP_OK 8\n#define INV_FAIL_UNDERFLOW 9\n#define INV_OK 10\n#define DUP_FAIL_UNDERFLOW 11\n#define DUP_OK 12\n#define GET_FAIL_UNDERFLOW 13\n#define GET_OK 14\n#define SWP_FAIL_UNDERFLOW 15\n#define SWP_OK 16\n#define ADD_FAIL_UNDERFLOW 17\n#define ADD_FAIL_OVERFLOW 18\n#define ADD_OK 19\n#define SUB_FAIL_UNDERFLOW 20\n#define SUB_FAIL_OVERFLOW 21\n#define SUB_OK 22\n#define MUL_FAIL_UNDERFLOW 23\n#define MUL_FAIL_OVERFLOW 24\n#define MUL_OK 25\n#define DIVISION_FAIL 26\n#define DIVISION_OK 27\n#define DIV_FAIL_UNDERFLOW 28\n#define DIV_FAIL_DIVISION_BY_ZERO 29\n#define DIV_FAIL_OVERFLOW 30\n#define DIV_OK 31\n#define MOD_FAIL_UNDERFLOW 32\n#define MOD_FAIL_DIVISION_BY_ZERO 33\n#define MOD_FAIL_OVERFLOW 34\n#define MOD_OK 35\n#define SIZE_ERROR 36\n//*********\u72b6\u6001\u5e38\u91cf\u8868\u7ed3\u675f**********//\n\ninline long long abs(long long val) {                                         //\u8f85\u52a9\u51fd\u6570\uff0c\u6c42\u7edd\u5bf9\u503c \n    if(val>=0)return val;\n    else return -val;\n}\ninline int OVERFLOW(long long val) {                                          //\u5224\u9519\u51fd\u6570\uff0c\u7edd\u5bf9\u503c\u8d85\u51fa\u9650\u5236 \n    if(abs(val)>1000000000ll)\n        return OVERFLOW_FAIL;\n    return OVERFLOW_OK;\n}\ninline int NUM(long long x) {\n    if(OVERFLOW_FAIL==OVERFLOW(x))\n        return NUM_FAIL_OVERFLOW;\n    s.push(x);\n    return NUM_OK;\n}\ninline int UNDERFLOW(int val) {                                               //\u5224\u9519\u51fd\u6570\uff0c\u64cd\u4f5c\u540e\u6808\u4f1a\u4e0b\u6ea2\u51fa \n    if(s.size()<val)\n        return UNDERFLOW_FAIL;\n    return UNDERFLOW_OK;\n}\ninline int POP() {\n    if(UNDERFLOW_FAIL==UNDERFLOW(1))\n        return POP_FAIL_UNDERFLOW;\n    s.pop();\n    return POP_OK;\n}\ninline int INV() {\n    if(UNDERFLOW_FAIL==UNDERFLOW(1))\n        return INV_FAIL_UNDERFLOW;\n    long long tmp=s.top();\n    s.pop();\n    s.push(-tmp);\n    return INV_OK;\n}\ninline int DUP() {\n    if(UNDERFLOW_FAIL==UNDERFLOW(1))\n        return DUP_FAIL_UNDERFLOW;\n    s.push(s.top());\n    return DUP_OK;\n}\ninline int GET() {                                                            //\u8f85\u52a9\u51fd\u6570\uff0c\u53d6\u51fa\u6808\u9876\u4e24\u4e2a\u5143\u7d20 \n    if(UNDERFLOW_FAIL==UNDERFLOW(2))\n        return GET_FAIL_UNDERFLOW;\n    ret.first=s.top(),s.pop(),ret.second=s.top(),s.pop();\n    return GET_OK;\n}\ninline int SWP() {\n    if(GET_FAIL_UNDERFLOW==GET())\n        return SWP_FAIL_UNDERFLOW;\n    s.push(ret.first),s.push(ret.second);\n    return SWP_OK;\n}\ninline int ADD() {\n    if(GET_FAIL_UNDERFLOW==GET())\n        return ADD_FAIL_UNDERFLOW;\n    long long tmp=ret.first+ret.second;\n    if(OVERFLOW_FAIL==OVERFLOW(tmp))\n        return ADD_FAIL_OVERFLOW;\n    s.push(tmp);\n    return ADD_OK;\n}\ninline int SUB() {\n    if(GET_FAIL_UNDERFLOW==GET())\n        return SUB_FAIL_UNDERFLOW;\n    long long tmp=ret.second-ret.first;\n    if(OVERFLOW_FAIL==OVERFLOW(tmp))\n        return SUB_FAIL_OVERFLOW;\n    s.push(tmp);\n    return SUB_OK;\n}\ninline int MUL() {\n    if(GET_FAIL_UNDERFLOW==GET())\n        return MUL_FAIL_UNDERFLOW;\n    long long tmp=ret.first*ret.second;\n    if(OVERFLOW_FAIL==OVERFLOW(tmp))\n        return MUL_FAIL_OVERFLOW;\n    s.push(tmp);\n    return MUL_OK;\n}\ninline int DIVISION(long long division) {                                     //\u5224\u9519\u51fd\u6570\uff0c\u88ab\u96f6\u9664 \n    if(division==0)\n        return DIVISION_FAIL;\n    return DIVISION_OK;\n}\ninline int DIV() {\n    if(GET_FAIL_UNDERFLOW==GET())\n        return DIV_FAIL_UNDERFLOW;\n    if(DIVISION_FAIL==DIVISION(ret.first))\n        return DIV_FAIL_DIVISION_BY_ZERO;\n    long long tmp=ret.second/ret.first;\n    if(OVERFLOW_FAIL==OVERFLOW(tmp))\n        return DIV_FAIL_OVERFLOW;\n    s.push(tmp);\n    return DIV_OK;\n}\ninline int MOD() {\n    if(GET_FAIL_UNDERFLOW==GET())\n        return MOD_FAIL_UNDERFLOW;\n    if(DIVISION_FAIL==DIVISION(ret.first))\n        return MOD_FAIL_DIVISION_BY_ZERO;\n    long long tmp=ret.second%ret.first;\n    if(OVERFLOW_FAIL==OVERFLOW(tmp))\n        return MOD_FAIL_OVERFLOW;\n    s.push(tmp);\n    return MOD_OK;\n}\ninline void HANDLE_ERROR(int ret) {                                           //\u8f85\u52a9\u51fd\u6570\uff0c\u4f20\u9012\u9519\u8bef\uff0c\u5982\u679c\u51fd\u6570\u6ca1\u6709\u6267\u884c\u6210\u529f\u5219\u6267\u884c \n    if(fail==false)\n        printf(\"ERROR\\n\",ret);\n    fail=true;\n    return;\n}\ninline void EXECUTE(int ret) {                                                //\u8f85\u52a9\u51fd\u6570\uff0c\u5982\u679c\u51fd\u6570\u6ca1\u6709\u6267\u884c\u6210\u529f\u5219\u4f20\u9012\u9519\u8bef \n    if(ret!=NUM_OK&&ret!=POP_OK&&ret!=INV_OK&&ret!=DUP_OK&&ret!=SWP_OK\n            &&ret!=ADD_OK&&ret!=SUB_OK&&ret!=MUL_OK&&ret!=DIV_OK&&ret!=MOD_OK)\n        HANDLE_ERROR(ret);\n}\ninline string read_instruction() {                                            //\u8f85\u52a9\u51fd\u6570\uff0c\u8bfb\u53d6\u6307\u4ee4 \n    string str=\"\";\n    char ch=getchar();\n    while(ch<'A'||ch>'Z')ch=getchar();\n    str+=ch,str+=getchar(),str+=getchar();\n    return str;\n}\nint main() {\n    while(1) {\n        instruction[cnt]=read_instruction();\n        if(instruction[cnt]==\"END\")\n            break;\n        if(instruction[cnt]==\"NUM\")\n            scanf(\"%d\",&number[cnt]);\n        cnt++;\n    }\n    scanf(\"%d\",&n);\n    for(int i=0; i<n; i++) {\n        scanf(\"%d\",&ai);\n        NUM(ai);                                                              //\u5148\u628a\u521d\u59cb\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u540c\u6837\u9700\u8981\u5224\u9519 \n        for(int i=0; i<cnt; i++) {\n            if(instruction[i]==\"NUM\")EXECUTE(NUM(number[i]));\n            if(instruction[i]==\"POP\")EXECUTE(POP());\n            if(instruction[i]==\"INV\")EXECUTE(INV());\n            if(instruction[i]==\"DUP\")EXECUTE(DUP());\n            if(instruction[i]==\"SWP\")EXECUTE(SWP());\n            if(instruction[i]==\"ADD\")EXECUTE(ADD());\n            if(instruction[i]==\"SUB\")EXECUTE(SUB());\n            if(instruction[i]==\"MUL\")EXECUTE(MUL());\n            if(instruction[i]==\"DIV\")EXECUTE(DIV());\n            if(instruction[i]==\"MOD\")EXECUTE(MOD());\n            if(fail==true)\n                break;\n        }\n        if(!fail&&s.size()==1)                                                //\u5982\u679c\u6ca1\u6709\u51fd\u6570\u6267\u884c\u5931\u8d25\u5e76\u4e14\u6808\u4e2d\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20 \n            printf(\"%d\\n\",s.top());\n        else HANDLE_ERROR(SIZE_ERROR);\n        while(!s.empty())                                                     //\u6e05\u7a7a\u6808\uff0c\u51c6\u5907\u4e0b\u4e00\u6b21\u64cd\u4f5c \n            s.pop();\n        fail=false;                                                           //\u590d\u539f\u51fd\u6570\u6267\u884c\u72b6\u6001 \n    }\n    return 0;\n}\n```",
        "postTime": 1510216669,
        "uid": 35485,
        "name": "Hatsune_Miku",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "### Part 1: \u5206\u6790\u9898\u9762&\u8f93\u5165\n------------\n\n\u6709\u70b9\u7c7b\u4f3c\u4e8e\u591a\u7ec4\u6570\u636e\uff0c\u8003\u8651\u5148\u628a\u6240\u6709\u64cd\u4f5c\u7684\u8f93\u5165\u5b58\u4e0b\u6765\u3002\n\n\u6ce8\u610f\u5982\u679c\u662f `NUM` \u64cd\u4f5c\uff0c\u8981\u591a\u8f93\u5165\u4e00\u4e2a\u6570\u3002\n\n\u6211\u540c\u65f6\u5f00 $a$ \u548c $c$ \u4e24\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u8f93\u5165\u4e3a `NUM`\uff0c\u5219\u5728 $a$ \u5bf9\u5e94\u4f4d\u7f6e\u5b58\u4e0a\u540e\u9762\u8fd9\u4e2a\u6570\u3002\n\n\u5982\u679c\u8f93\u5165\u5230 `END` \u64cd\u4f5c\uff0c\u8df3\u51fa $\\texttt{while}$ \u5faa\u73af\u3002\n\n```cpp\nwhile(cin>>c[++cnt]){\n\tif(c[cnt]==\"END\") break;\n\tif(c[cnt]==\"NUM\") scanf(\"%lld\",&x),a[cnt]=x;\n}\n```\n\n**\u8bb0\u5f97\u6e05\u6808\uff08**\n\n### Part 2: \u5206\u6790\u9519\u8bef\u60c5\u51b5\n------------\n\n- #### \u7b2c\u4e00\u79cd\uff0c`Math Error`\u3002\n\n\u5f88\u7b80\u5355\uff0c\u5982\u679c\u662f `DIV` \u6216 `MOD` \u64cd\u4f5c\uff0c\u8981\u5224\u65ad\u88ab\u9664\u6570/\u88ab\u6a21\u6570\u662f\u5426\u4e3a $0$\u3002\n\n\u5982\u679c\u4e3a $0$\uff0c\u76f4\u63a5\u8f93\u51fa `ERROR\\n`\uff0c\u5f00\u59cb\u4e0b\u4e00\u7ec4\u6570\u636e\u3002\n\n```cpp\nbool div_ERROR(ll x,ll y){\n\tif(x==0){\n\t\tprintf(\"ERROR\\n\");\n\t\treturn true;\n\t}\n\treturn false;\n}\n```\n**\u4e0d\u5224 $0$ \u5c06\u4f1a\u5bfc\u81f4 $\\texttt{RE}\\;90$ \u6216 $\\texttt{WA}\\; 90$\u3002**\n\n- #### \u7b2c\u4e8c\u79cd\uff0c`Number Error`\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5730\u65b9\u8981\u7279\u5224\uff0c\u6700\u5f00\u59cb\u5165\u6808\u7684\u90a3\u4e2a\u6570\u5982\u679c\u5b58\u5728 $\\lvert x\\rvert > 10^9$\uff0c\u76f4\u63a5\u8f93\u51fa `ERROR\\n`\uff0c\u5f00\u59cb\u4e0b\u4e00\u7ec4\u6570\u636e\u3002\n\n\u5bf9\u4e8e `NUM`\uff0c`INV`\uff0c`DUP`\uff0c`SWP`\uff0c`ADD`\uff0c`SUB`\uff0c`MUL`\uff0c`DIV`\uff0c`MOD` \u64cd\u4f5c\uff0c\u8981\u8fdb\u884c `Number Error` \u7684\u5224\u5b9a\u3002\n\n**1. `SUB`\uff0c`DIV` \u548c `MOD` \u64cd\u4f5c\uff1a**\n\n\u8bbe\u5148\u5f39\u51fa\u7684\u6570\u4e3a $x$\uff0c\u540e\u5f39\u51fa\u7684\u6570\u4e3a $y$\uff0c\u5bf9\u4e8e\u8fd9\u4e09\u79cd\u64cd\u4f5c\uff0c\u7ed3\u679c\u662f $y\\; \\texttt{op}\\;x$\u3002\n\n**2. `SWP` \u64cd\u4f5c\uff1a**\n\n\u6211\u4e0d\u662f\u5f88\u6e05\u695a\u8fd9\u91cc\u662f\u5426\u4f1a\u9519\u3002\n\n\u5982\u679c\u4f60\u662f\u8fd9\u4e48\u5199\u7684\uff1a\n\n```cpp\nif(num_ERROR(x)||num_ERROR(y)) return;\n```\n\n\u90a3\u6700\u597d\u6539\u6210\uff1a\n\n```cpp\nif(num_ERROR(y)) return;\nif(num_ERROR(x)) return;\n```\n\n**3. `Math Error` \u8981\u5728 `Number Error` \u524d\u9762\u5224\uff0c\u4e0d\u591a\u8bf4\u4e86\u3002**\n\n\n```cpp\nbool num_ERROR(ll x){\n\tif(abs(x)>inf){\n\t\tprintf(\"ERROR\\n\");\n\t\treturn true;\n\t}\n\treturn false;\n}\n```\n\n- #### \u7b2c\u4e09\u79cd\uff0c`Stack Error`\u3002\n\n\u5229\u7528 `st.size()` \u51fd\u6570\u6765\u5e2e\u52a9\u5224\u65ad\u8fd0\u7b97\u662f\u5426\u7b26\u5408\u6807\u51c6\u3002\n\n**1. `POP` \u548c `INV` \u64cd\u4f5c**\n\n\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u53ea\u9700\u8981\u5f39\u51fa\u4e00\u4e2a\u6570\u3002\n\n**2. `SWP`\uff0c`ADD`\uff0c`SUB`\uff0c`MUL`\uff0c`DIV` \u548c `MOD` \u64cd\u4f5c**\n\n\u5f39\u51fa\u4e24\u4e2a\u6570\uff0c`if(st.size()<2)` \u5c31\u597d\u4e86\u3002\n\n**3. `END` \u64cd\u4f5c**\n\n\u6839\u636e\u9898\u610f\uff0c\u5982\u679c\u6700\u540e\u6808\u5185\u4e0d\u4e3a\u4e00\u4e2a\u6570\uff0c\u5c31\u8f93\u51fa `ERROR\\n`\u3002\n\n```cpp\nbool stack_ERROR(string s){\n\tif(s==\"POP\"||s==\"INV\"){\n\t\tif(st.size()==0){\n\t\t\tprintf(\"ERROR\\n\");\n\t\t\treturn true;\n\t\t}\n\t}\n\tif(s==\"SWP\"||s==\"ADD\"||s==\"SUB\"||s==\"MUL\"||s==\"DIV\"||s==\"MOD\"){\n\t\tif(st.size()<2){\n\t\t\tprintf(\"ERROR\\n\");\n\t\t\treturn true;\n\t\t}\n\t}\n\tif(s==\"END\"){\n\t\tif(st.size()!=1){\n\t\t\tprintf(\"ERROR\\n\");\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n```\n\n### Part 3: \u64cd\u4f5c\n------------\n\n\u5b9a\u4e49\u4e00\u4e2a `work(ll x)` \u51fd\u6570\uff0c$x$ \u8868\u793a\u6808\u5185\u521d\u59cb\u503c\u3002\n\n\u6700\u5f00\u59cb\u8981\u5148\u8fdb\u884c\u7279\u5224\uff0c\u5c31\u662f\u6211\u521a\u521a\u63d0\u5230\u7684 `Number Error`\u3002\n\n\u4ee5 `ADD` \u51fd\u6570\u4e3a\u4f8b\uff1a\n\n`!Stack Error`$\\to$ \n\n`ll x=st.top();st.pop();`\uff08$y$ \u540c\u7406\uff09$\\to$ \n\n`!Number Error`$\\to$ \n\n`st.push(x+y);`\n\n```cpp\nvoid work(ll x){\n\tif(num_ERROR(x)){\n\t\tprintf(\"ERROR\\n\");\n\t\treturn;\n\t}\n\tst.push(x);\n\tfor(register int i=1;i<=cnt;i++){\n\t\tif(c[i]==\"NUM\"){\n\t\t\tif(num_ERROR(a[i])) return;\n\t\t\tst.push(a[i]);\n\t\t}\n\t\tif(c[i]==\"POP\"){\n\t\t\tif(stack_ERROR(\"POP\")) return;\n\t\t\tst.pop();\n\t\t}\n\t\tif(c[i]==\"INV\"){\n\t\t\tif(stack_ERROR(\"INV\")) return;\n\t\t\tll x=st.top();\n\t\t\tif(num_ERROR(-x)) return;\n\t\t\tst.pop();st.push(-x);\n\t\t}\n\t\tif(c[i]==\"DUP\"){\n\t\t\tll x=st.top();\n\t\t\tif(num_ERROR(x)) return;\n\t\t\tst.push(x);\n\t\t}\n\t\tif(c[i]==\"SWP\"){\n\t\t\tif(stack_ERROR(\"SWP\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(num_ERROR(y)) return;\n\t\t\tif(num_ERROR(x)) return;\n\t\t\tst.push(x),st.push(y);\n\t\t}\n\t\tif(c[i]==\"ADD\"){\n\t\t\tif(stack_ERROR(\"ADD\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(num_ERROR(x+y)) return;\n\t\t\tst.push(x+y);\n\t\t}\n\t\tif(c[i]==\"SUB\"){\n\t\t\tif(stack_ERROR(\"SUB\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(num_ERROR(y-x)) return;\n\t\t\tst.push(y-x);\n\t\t}\n\t\tif(c[i]==\"MUL\"){\n\t\t\tif(stack_ERROR(\"MUL\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(num_ERROR(x*y)) return;\n\t\t\tst.push(x*y);\n\t\t}\n\t\tif(c[i]==\"DIV\"){\n\t\t\tif(stack_ERROR(\"DIV\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(div_ERROR(x,y)) return;\n\t\t\tif(num_ERROR(y/x)) return;\n\t\t\tst.push(y/x);\n\t\t}\n\t\tif(c[i]==\"MOD\"){\n\t\t\tif(stack_ERROR(\"MOD\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(div_ERROR(x,y)) return;\n\t\t\tif(num_ERROR(y%x)) return;\n\t\t\tst.push(y%x);\n\t\t}\n\t\tif(c[i]==\"END\"){\n\t\t\tif(stack_ERROR(\"END\")) return;\n\t\t\telse{\n\t\t\t\tprintf(\"%lld\\n\",st.top());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u6240\u6709\u64cd\u4f5c\u6bcf\u4e2a\u90fd\u5904\u7406\u5b8c\uff0c\u5c31\u641e\u5b9a\u4e86\u3002\n\n### Part 4: \u603b\u4ee3\u7801\n------------\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int N=2e3+5;\nconst ll inf=1e9;\nstring c[N];\nstack<ll> st;\nll n,x,cnt=0,a[N];\nbool num_ERROR(ll x){\n\tif(abs(x)>inf){\n\t\tprintf(\"ERROR\\n\");\n\t\treturn true;\n\t}\n\treturn false;\n}\nbool div_ERROR(ll x,ll y){\n\tif(x==0){\n\t\tprintf(\"ERROR\\n\");\n\t\treturn true;\n\t}\n\treturn false;\n}\nbool stack_ERROR(string s){\n\tif(s==\"POP\"||s==\"INV\"){\n\t\tif(st.size()==0){\n\t\t\tprintf(\"ERROR\\n\");\n\t\t\treturn true;\n\t\t}\n\t}\n\tif(s==\"SWP\"||s==\"ADD\"||s==\"SUB\"||s==\"MUL\"||s==\"DIV\"||s==\"MOD\"){\n\t\tif(st.size()<2){\n\t\t\tprintf(\"ERROR\\n\");\n\t\t\treturn true;\n\t\t}\n\t}\n\tif(s==\"END\"){\n\t\tif(st.size()!=1){\n\t\t\tprintf(\"ERROR\\n\");\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nvoid work(ll x){\n\tif(num_ERROR(x)){\n\t\tprintf(\"ERROR\\n\");\n\t\treturn;\n\t}\n\tst.push(x);\n\tfor(register int i=1;i<=cnt;i++){\n\t\tif(c[i]==\"NUM\"){\n\t\t\tif(num_ERROR(a[i])) return;\n\t\t\tst.push(a[i]);\n\t\t}\n\t\tif(c[i]==\"POP\"){\n\t\t\tif(stack_ERROR(\"POP\")) return;\n\t\t\tst.pop();\n\t\t}\n\t\tif(c[i]==\"INV\"){\n\t\t\tif(stack_ERROR(\"INV\")) return;\n\t\t\tll x=st.top();\n\t\t\tif(num_ERROR(-x)) return;\n\t\t\tst.pop();st.push(-x);\n\t\t}\n\t\tif(c[i]==\"DUP\"){\n\t\t\tll x=st.top();\n\t\t\tif(num_ERROR(x)) return;\n\t\t\tst.push(x);\n\t\t}\n\t\tif(c[i]==\"SWP\"){\n\t\t\tif(stack_ERROR(\"SWP\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(num_ERROR(y)) return;\n\t\t\tif(num_ERROR(x)) return;\n\t\t\tst.push(x),st.push(y);\n\t\t}\n\t\tif(c[i]==\"ADD\"){\n\t\t\tif(stack_ERROR(\"ADD\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(num_ERROR(x+y)) return;\n\t\t\tst.push(x+y);\n\t\t}\n\t\tif(c[i]==\"SUB\"){\n\t\t\tif(stack_ERROR(\"SUB\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(num_ERROR(y-x)) return;\n\t\t\tst.push(y-x);\n\t\t}\n\t\tif(c[i]==\"MUL\"){\n\t\t\tif(stack_ERROR(\"MUL\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(num_ERROR(x*y)) return;\n\t\t\tst.push(x*y);\n\t\t}\n\t\tif(c[i]==\"DIV\"){\n\t\t\tif(stack_ERROR(\"DIV\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(div_ERROR(x,y)) return;\n\t\t\tif(num_ERROR(y/x)) return;\n\t\t\tst.push(y/x);\n\t\t}\n\t\tif(c[i]==\"MOD\"){\n\t\t\tif(stack_ERROR(\"MOD\")) return;\n\t\t\tll x=st.top();st.pop();\n\t\t\tll y=st.top();st.pop();\n\t\t\tif(div_ERROR(x,y)) return;\n\t\t\tif(num_ERROR(y%x)) return;\n\t\t\tst.push(y%x);\n\t\t}\n\t\tif(c[i]==\"END\"){\n\t\t\tif(stack_ERROR(\"END\")) return;\n\t\t\telse{\n\t\t\t\tprintf(\"%lld\\n\",st.top());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\twhile(cin>>c[++cnt]){\n\t\tif(c[cnt]==\"END\") break;\n\t\tif(c[cnt]==\"NUM\") scanf(\"%lld\",&x),a[cnt]=x;\n\t}\n\tscanf(\"%lld\",&n);\n\tfor(register ll i=1;i<=n;i++){\n\t\tll q;\n\t\tscanf(\"%lld\",&q);\n\t\twork(q);\n\t\twhile(!st.empty()) st.pop();\n\t}\n}\n```\n",
        "postTime": 1620882211,
        "uid": 380579,
        "name": "LRCAKIOI",
        "ccfLevel": 6,
        "title": "[P2186] \u5c0fZ\u7684\u6808\u51fd\u6570"
    },
    {
        "content": "~~\u597d\u5bb6\u4f19\uff0c\u53c8\u662f\u4e00\u9053\u5927\u6a21\u62df~~\n\n[\u535a\u5ba2\u98df\u7528\u5e94\u8be5\u4e0d\u4f1a\u66f4\u4f73](https://www.luogu.com.cn/blog/EXODUS/p2186-ti-xie)\n\n\u8a00\u5f52\u6b63\u4f20\u3002\n\n\u8fd9\u4e00\u9053\u9898\u7684\u4e3b\u8981\u601d\u8def\u5c31\u662f\u6a21\u62df\uff0c\u5199\u4e0a$11$\u4e2a\u51fd\u6570\u52a0$11$\u4e2a$if$\u53bb\u7ef4\u62a4\u6240\u6709\u64cd\u4f5c\uff0c\u5199\u4e86$208$\u884c\u3002\n\n\u4f60\u9700\u8981\u5224\u65ad\u7684\u9519\u8bef\u64cd\u4f5c\uff1a\n-\n>- \u51fa\u73b0\u4e86\u5f39\u4e0d\u51fa\u6765\u7684\u60c5\u51b5\uff0c\u5176\u4e2d\u7b2c$2$\u3001$3$\u3001$4$\u79cd\u60c5\u51b5\u53ea\u9700\u8981\u5224\u65ad$q.empty()$\uff0c\u7b2c$5$~$10$\u79cd\u662f$q.size()\\leq 1$\n>- \u9664\u4ee5\u6216\u6a21\u4e00\u4e2a$0$\u3002\n>- \u5230\u4e86$END$\u540e$q.size()!=1$\n>- \u5165\u6808\u65f6\u7684\u7edd\u5bf9\u503c\u9650\u5236\u3002\n\n\u6211\u7684\u4e00\u4e9b~~\u7837\u5947\u7684~~\u64cd\u4f5c\n-\n>- \u5728\u8fd9\u91cc\u6211\u5f00\u4e86$long\\ long$\uff0c\u6015\u70b8$int$\u3002\n>- \u6211\u628a\u6bcf\u4e00\u79cd\u64cd\u4f5c\u7528$map$\u6620\u5c04\u6210\u4e86\u4e00\u4e2a\u6570\u5b57\uff0c\u65b9\u4fbf\u6253$if$\u3002\n>- \u6211\u628a$ERROR$\u7684\u8fd4\u56de\u503c\u5b9a\u4e3a\u4e86$0x7ffffffff$\uff0c\u9632\u6b62\u51fa\u73b0\u5728$int$\u8303\u56f4\u5185\u6709\u91cd\u590d\u7b54\u6848\u5bfc\u81f4\u5224\u65ad\u9519\u8bef\u7684\u60c5\u51b5\u3002\n\n## \u6ca1\u4e86\uff1f\n## \u6ca1\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//typedef inline il;\ntypedef long long LL;\nLL maxn=0x7ffffffff;\nstack<LL>s;\nmap<string,int>m;\nint step[2857];\nLL will_add[2857];\nint add_cnt,add_tot,step_cnt;\ninline void NUM(LL x){\n    s.push(x);\n}\ninline void POP(){\n    s.pop();\n}\ninline void INV(){\n    LL x=s.top();\n    s.pop();\n    s.push(-x);\n}\ninline void DUP(){\n    s.push(s.top());\n}\ninline void SWP(){\n    LL x1=s.top();\n    s.pop();\n    LL x2=s.top();\n    s.pop();\n    s.push(x1);\n    s.push(x2);\n}\ninline void ADD(){\n    LL x1=s.top();\n    s.pop();\n    LL x2=s.top();\n    s.pop();\n    s.push(x2+x1);\n}\ninline void SUB(){\n    LL x1=s.top();\n    s.pop();\n    LL x2=s.top();\n    s.pop();\n    s.push(x2-x1);\n}\ninline void MUL(){\n    LL x1=s.top();\n    s.pop();\n    LL x2=s.top();\n    s.pop();\n    s.push(x2*x1);\n}\ninline void DIV(){\n    LL x1=s.top();\n    s.pop();\n    LL x2=s.top();\n    s.pop();\n    s.push(x2/x1);\n}\ninline void MOD(){\n    LL x1=s.top();\n    s.pop();\n    LL x2=s.top();\n    s.pop();\n    s.push(x2%x1);\n}\ninline bool check(int type,LL num){\n    if(type==1) if(abs(num)>1000000000) return 0;\n    if(type==2||type==3||type==4) if(s.empty()) return 0;\n    if(type==5||type==6||type==7||type==8||type==9||type==10) if(s.size()<=1) return 0;\n    if(type==9||type==10) if(s.top()==0) return 0;\n    if(type==6||type==7||type==8||type==9||type==10){\n        LL x1=s.top();\n        s.pop();\n        LL x2=s.top();\n        s.pop();\n        s.push(x2);\n        s.push(x1);\n        if(type==6&&abs(x2+x1)>1e9) return 0;\n        else if(type==7&&abs(x2-x1)>1e9) return 0;\n        else if(type==8&&abs(x2*x1)>1e9) return 0;\n        else if(type==9&&abs(x2/x1)>1e9) return 0;\n        else if(type==10&&abs(x2%x1)>1e9) return 0;\n    }\n    if(type==11) if(s.size()!=1) return 0;\n    return 1;\n}\nvoid init(){\n    m[\"NUM\"]=1;\n    m[\"POP\"]=2;\n    m[\"INV\"]=3;\n    m[\"DUP\"]=4;\n    m[\"SWP\"]=5;\n    m[\"ADD\"]=6;\n    m[\"SUB\"]=7;\n    m[\"MUL\"]=8;\n    m[\"DIV\"]=9;\n    m[\"MOD\"]=10;\n    m[\"END\"]=11;\n}\nLL move(int now){\n    if(step[now]==1){\n        add_tot++;\n        if(!check(1,will_add[add_tot])) return maxn;\n        else{\n            NUM(will_add[add_tot]);\n            return move(now+1);\n        }\n    }\n    else if(step[now]==2){\n        if(!check(2,0)) return maxn;\n        else{\n            POP();\n            return move(now+1);\n        }\n    }\n    else if(step[now]==3){\n        if(!check(3,0)) return maxn;\n        else{\n            INV();\n            return move(now+1);\n        }\n    }\n    else if(step[now]==4){\n        if(!check(4,0)) return maxn;\n        else{\n            DUP();\n            return move(now+1);\n        }\n    }\n    else if(step[now]==5){\n        if(!check(5,0)) return maxn;\n        else{\n            SWP();\n            return move(now+1);\n        }\n    }\n    else if(step[now]==6){\n        if(!check(6,0)) return maxn;\n        else{\n            ADD();\n            return move(now+1);\n        }\n    }\n    else if(step[now]==7){\n        if(!check(7,0)) return maxn;\n        else{\n            SUB();\n            return move(now+1);\n        }\n    }\n    else if(step[now]==8){\n        if(!check(8,0)) return maxn;\n        else{\n            MUL();\n            return move(now+1);\n        }\n    }\n    else if(step[now]==9){\n        if(!check(9,0)) return maxn;\n        else{\n            DIV();\n            return move(now+1);\n        }\n    }\n    else if(step[now]==10){\n        if(!check(10,0)) return maxn;\n        else{\n            MOD();\n            return move(now+1);\n        }\n    }\n    else if(step[now]==11){\n        if(!check(11,0)) return maxn;\n        else{\n            return s.top();\n        }\n    }\n}\nint n;\nstring st;\nint main(){\n\tinit();\n    while(st!=\"END\"){\n        cin>>st;\n        step[++step_cnt]=m[st];\n        if(st==\"NUM\"){\n            LL x;\n            scanf(\"%lld\",&x);\n            will_add[++add_cnt]=x;\n        }\n    }\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n        LL x;\n        scanf(\"%lld\",&x);\n        s.push(x);\n        LL ans=move(1);\n        if(ans==maxn) printf(\"ERROR\\n\");\n        else printf(\"%lld\\n\",ans);\n        while(!s.empty()){\n            s.pop();\n        }\n        add_tot=0;\n    }\n    return 0;\n}\n```\n\u6b22\u8fce\u5404\u4f4d\u5927\u4f6c\u66b4\u8e29\u3002\n\n\u6c42\u4e2a\u8d5e\uff08\u9003~~",
        "postTime": 1613475698,
        "uid": 373699,
        "name": "EXODUS",
        "ccfLevel": 0,
        "title": "P2186\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u662f\u6211\u968f\u673a\u8df3\u9898\u8df3\u5230\u7684\u4e00\u9053\u9898\uff0c\u4e00\u5f00\u59cb\u731b\u4e00\u770b\u4ee5\u4e3a\u662f\u6bd2\u7624\u6570\u636e\u7ed3\u6784\uff0c\u6ca1\u60f3\u5230\u662f\u4e2a\u6a21\u62df\u3002\n\n\u9996\u5148\u628a\u64cd\u4f5c\u5b58\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\uff0c\u6bcf\u6b21\u4f7f\u7528\u7684\u65f6\u5019\u5c31\u548c\u5408\u6cd5\u6307\u4ee4\u8868 `check_fail` \u4e2d\u7684\u6307\u4ee4\u8fdb\u884c\u6bd4\u5bf9\uff0c\u5982\u679c\u5339\u914d\u6210\u529f\u65f6\u5f53\u524d\u5339\u914d\u65f6\u7684 index \u5c31\u662f\u4f60\u9700\u8981\u64cd\u4f5c\u7684\u6307\u4ee4\u7684\u7f16\u53f7\u3002\u8fd9\u91cc\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6865\u6881\u51fd\u6570 `to_do`\uff0c \u5c06\u64cd\u4f5c\u94fe\u63a5\u81f3\u51fd\u6570\u3002\n\n\u540c\u65f6\u6211\u5bf9 `NUM` \u8fd9\u4e2a\u64cd\u4f5c\u65b0\u5efa\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c31\u662f\u6bcf\u6b21\u5e94\u8be5\u653e\u5165\u6808\u7684\u6570\u3002\n\n\u53ef\u80fd\u7684\u4e0d\u5408\u6cd5\u8f93\u5165\uff1a\n\n- \u7edd\u5bf9\u503c\u5927\u4e8e\u89c4\u5b9a\u6570\n- \u9664\u4ee5\u6216\u8005\u6a21\u4ee5 0\n- \u6ca1\u6709\u8db3\u591f\u7684\u6570\u6ee1\u8db3\u8981\u6c42\n\nCode:\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <string>\n#include <stack>\nusing namespace std;\ntypedef long long ll;\nconst int max_value = 1000000000;\nconst int min_value = -max_value;\nconst int max_operate = 2005;\nstack<ll> machine;\nstring check_fail[12] = \n{\n\t\"NUL\",\t// \u5360\u4f4d\u8bed\u53e5\n\t\"NUM\",\t// \u6808\u9876\u653e\u5165X\u3002\n\t\"POP\",\t// \u629b\u5f03\u6808\u9876\u5143\u7d20\u3002\n\t\"INV\",\t// \u5c06\u6808\u9876\u5143\u7d20\u53d6\u51fa\uff0c\u7136\u540e\u653e\u5165\u5b83\u7684\u76f8\u53cd\u6570\u3002\n\t\"DUP\",\t// \u518d\u653e\u5165\u4e00\u4e2a\u548c\u6808\u9876\u5143\u7d20\u76f8\u540c\u7684\u6570\u3002\n\t\"SWP\",\t// \u4ea4\u6362\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\u3002\n\t\"ADD\",\t// \u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u4e24\u5143\u7d20\u76f8\u52a0\uff0c\u6240\u5f97\u7ed3\u679c\u653e\u5165\u6808\u5185\u3002\n\t\"SUB\",\t// \u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u51cf\u53bb\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u5f97\u7ed3\u679c\u653e\u5165\u6808\u5185\u3002\n\t\"MUL\",\t// \u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u4e24\u5143\u7d20\u76f8\u4e58\uff0c\u6240\u5f97\u7ed3\u679c\u653e\u5165\u6808\u5185\u3002\n\t\"DIV\",\t// \u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6574\u9664\u4ee5\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u5f97\u7ed3\u679c\u653e\u5165\u6808\u5185\u3002\n\t\"MOD\",\t// \u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u53d6\u6a21\u4ee5\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u5f97\u7ed3\u679c\u653e\u5165\u6808\u5185\u3002\n\t\"END\"\t// \u7ed3\u675f\u8fd9\u4e2a\u7a0b\u5e8f\u3002\n};\nstring opertations[max_operate];\nll number_should_push_in[max_operate];\nll cnt_of_operator = 0, n, cnt_of_push = 0, situation = 0;\nbool errflg;\nvoid NUM() {\n\tmachine.push(number_should_push_in[++ situation]);\n\tif(machine.top() > max_value || machine.top() < min_value) errflg = 1;\n}\nvoid POP() {\n\tif(machine.size() > 0) machine.pop();\n\telse errflg = 1;\n}\nvoid INV() {\n\tif(machine.size() == 0) errflg = 1;\n\telse {\n\t\tint inverse = - machine.top();\n\t\tmachine.pop();\n\t\tmachine.push(inverse);\n\t}\n}\nvoid DUP() {\n\tif(machine.size() == 0) errflg = 1;\n\telse machine.push(machine.top());\n}\nvoid SWP() {\n\tif(machine.size() < 2) errflg = 1;\n\telse {\n\t\tint a = machine.top();\n\t\tmachine.pop();\n\t\tint b = machine.top();\n\t\tmachine.pop();\n\t\tmachine.push(a), machine.push(b);\n\t}\n}\nvoid ADD() {\n\tif(machine.size() < 2) errflg = 1;\n\telse {\n\t\tint a = machine.top();\n\t\tmachine.pop();\n\t\tint b = machine.top();\n\t\tmachine.pop();\n\t\tmachine.push(a + b);\n\t\tif(machine.top() > max_value || machine.top() < min_value) errflg = 1;\n\t}\n}\nvoid SUB() {\n\tif(machine.size() < 2) errflg = 1;\n\telse {\n\t\tint a = machine.top();\n\t\tmachine.pop();\n\t\tint b = machine.top();\n\t\tmachine.pop();\n\t\tmachine.push(b - a);\n\t\tif(machine.top() > max_value || machine.top() < min_value) errflg = 1;\n\t}\n}\nvoid MUL() {\n\tif(machine.size() < 2) errflg = 1;\n\telse {\n\t\tint a = machine.top();\n\t\tmachine.pop();\n\t\tint b = machine.top();\n\t\tmachine.pop();\n\t\tmachine.push(a * b);\n\t\tif(machine.top() > max_value || machine.top() < min_value) errflg = 1;\n\t}\n}\nvoid DIV() {\n\tif(machine.size() < 2) errflg = 1;\n\telse {\n\t\tint a = machine.top();\n\t\tmachine.pop();\n\t\tint b = machine.top();\n\t\tmachine.pop();\n\t\tif(a != 0) machine.push(b / a);\n\t\telse errflg = 1;\n\t\tif(machine.top() > max_value || machine.top() < min_value) errflg = 1;\n\t}\n}\nvoid MOD() {\n\tif(machine.size() < 2) errflg = 1;\n\telse {\n\t\tint a = machine.top();\n\t\tmachine.pop();\n\t\tint b = machine.top();\n\t\tmachine.pop();\n\t\tif(a != 0) machine.push(b % a);\n\t\telse errflg = 1;\n\t\tif(machine.top() > max_value || machine.top() < min_value) errflg = 1;\n\t}\n}\nvoid to_do(ll number_of_operation) {\n\tif(number_of_operation == 1) NUM();\n\telse if(number_of_operation == 2) POP();\n\telse if(number_of_operation == 3) INV();\n\telse if(number_of_operation == 4) DUP();\n\telse if(number_of_operation == 5) SWP();\n\telse if(number_of_operation == 6) ADD();\n\telse if(number_of_operation == 7) SUB();\n\telse if(number_of_operation == 8) MUL();\n\telse if(number_of_operation == 9) DIV();\n\telse if(number_of_operation == 10) MOD();\n}\nint main() {\n\twhile(1) {\n\t\tcin >> opertations[++ cnt_of_operator];\n\t\tif(opertations[cnt_of_operator] == check_fail[1]) {\n\t\t\tll number;\n\t\t\tcin >> number;\n\t\t\tnumber_should_push_in[++ cnt_of_push] = number;\n\t\t} if(opertations[cnt_of_operator] == check_fail[11]) break;\n\t} cnt_of_operator --; \n\tcin >> n;\n\tfor(int i = 1, fn; i <= n; i ++) {\n\t\tcin >> fn;\n\t\twhile(!machine.empty()) machine.pop();\n\t\tmachine.push(fn);\n\t\terrflg = 0;\n\t\tsituation = 0;\n\t\tfor(int k = 1; k <= cnt_of_operator; k ++) {\n\t\t\tfor(int v = 1; v <= 11; v ++) \n\t\t\t\tif(opertations[k] == check_fail[v]) \n\t\t\t\t\tto_do(v);\n\t\t\tif(errflg) break;\n\t\t} if(errflg) {cout << \"ERROR\" << endl; continue;}\n\t\tif(machine.size() != 1) {cout << \"ERROR\" << endl; continue;}\n\t\tcout << machine.top() << endl;\n\t}\n}\n```",
        "postTime": 1618389604,
        "uid": 294745,
        "name": "Sora1336",
        "ccfLevel": 0,
        "title": "\u5927\u6a21\u62df"
    },
    {
        "content": "### Part 0 \u524d\u8a00\n\n\u968f\u673a\u8df3\u9898\u8c03\u5230\u8fd9\u9898\u3002\u3002\u3002\n\n\u867d\u7136\u9898\u9762\u6709\u70b9\u957f\u770b\u8d77\u6765\u5413\u4eba\uff0c\n\n\u4f46\u662f\u53ea\u8981\u4f60\u4e00\u6b65\u4e00\u6b65\u6309\u7167\u9898\u9762\u6a21\u62df\uff0c\u5c31\u662f\u9053\u5927\u6c34\u9898\n\n\u611f\u89c9\u5b9e\u9645\u96be\u5ea6\u9ec4+~\u7eff\n\n## Part 1 \u9898\u610f\n\n> \u7ed9\u5b9a\u4e00\u4e2a\u6808\u548c11\u4e2a\u64cd\u4f5c\uff0c\u5f00\u59cb\u65f6\u6808\u91cc\u4ec5\u6709\u4e00\u4e2a\u6570x\uff0c\u7ecf\u8fc7\u51e0\u6b21\u64cd\u4f5c\u540e\u8f93\u51fa\u6808\u4e2d\u7684\u6570\u3002\u5982\u679c\u6700\u540e\u6808\u4e2d\u4e0d\u6b62\u4e00\u4e2a\u6570\u6216\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u9519\u8bef\u6216\u6570\u5b57\u8fc7\u5927\u6ea2\u51fa\u90fd\u5e94\u8f93\u51fa`ERROR`\n\n## Part 2 \u505a\u6cd5\n\n1. \u8bfb\u5165\uff1a\n\n   \u4e00\u76f4\u8bfb\u5165\u76f4\u5230\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u4e3a`END`\u7ed3\u675f\u3002\n\n   \u5efa\u8bae\u4f7f\u7528`cin`\u800c\u4e0d\u662f`scanf`\u3002\n\n   _\u6ce8\u610f\uff1a`NUM`\u64cd\u4f5c\u662f\u6709\u53c2\u6570\u7684\uff0c\u6240\u4ee5\u5728\u8bfb\u7684\u65f6\u5019\u8981\u7279\u5224\u5e76\u8bfb\u8fdb\u6765\u3002_\n\n   ```c++\n   \twhile(cin>>s[++tot]&&s[tot]!=\"END\")\n   \t    if(s[tot]==\"NUM\")cin>>num[tot];\n   ```\n\n2. \u64cd\u4f5c\n\n   \u4e00\u5171\u670911\u79cd\uff0c\u5206\u79cd\u7c7b\u8ba8\u8bba\u3002\n\n   \u8fd9\u91cc\u4f7f\u7528STL\u7684`stack<int>`\u5b9e\u73b0\u6808\u3002\n\n   - `NUM X`\u64cd\u4f5c\n\n     \u76f4\u63a5`push(num[i])`\u5373\u53ef\u3002\n\n   - `POP`\u64cd\u4f5c\n\n     \u540c\u6837\u7684\uff0c\u76f4\u63a5`pop()`\u5373\u53ef\u3002\n\n     _\u6ce8\u610f\uff1a\u5728\u6b64\u4e4b\u540e\u7684\u64cd\u4f5c\u90fd\u9700\u8981\u6808\u4e2d\u81f3\u5c11\u6709\u4e00\u81f3\u4e8c\u4e2a\u5143\u7d20\u3002_\n\n   - `INV`\u64cd\u4f5c\n\n     \u53d6\u51fa\u6808\u9876`int t=top()`\uff0c\u7136\u540e`pop()`\uff0c\u6700\u540e`push(-t)`\u3002\n\n   - `DUP`\u64cd\u4f5c\n\n     `push(top())`\u5373\u53ef\u3002\n\n   - `SWP,ADD,SUB,MUL,DIV,MOD`\u64cd\u4f5c\n\n     \u51fa\u6808\u4e24\u4e2a\u6570`int t1=top();pop();int t2=top()`\uff0c\n\n     \u8ba1\u7b97\u4e4b\u540e\u518d\u5165\u6808\u3002\n\n   - `END`\u64cd\u4f5c\n\n     \uff08\u7136\u800c\u5e76\u6ca1\u6709\u64cd\u4f5c\uff09\n\n3. \u5751\u70b9\n\n   \u9700\u8981\u8f93\u51fa`ERROR`\u7684\u60c5\u51b5\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a\n\n   - \u6700\u540e\u6808\u4e2d\u4e0d\u6b62\u4e00\u4e2a\u5143\u7d20\n   - \u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86\u5927\u4e8e $10^9$ \u7684\u6570\n   - \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4e0d\u5728\u6307\u4ee4\u96c6\u4e2d\u6216`NUM`\u64cd\u4f5c\u6ca1\u6709\u53c2\u6570\uff08\u4f46\u662f\u6570\u636e\u4e2d\u5e76\u6ca1\u6709\uff09\n   - \u5728\u6808\u4e2d\u7684\u6570\u636e\u4e2a\u6570\u6ca1\u6709\u8fbe\u5230\u8981\u6c42\n   - `DIV`\u64cd\u4f5c\u4e2d\u9664\u6570\u4e3a\u96f6\uff08\u5751\u4e86\u5f88\u591a\u4eba\uff09\n\n4. \u4f18\u5316\n\n   \u5199\u7684\u65f6\u5019\u4f1a\u53d1\u73b0\u4ee3\u7801\u957f\u5ea6\u5b9e\u5728\u662f\u592a\u957f\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e9b\u53ef\u7f29\u51cf\u4ee3\u7801\u91cf\u7684`macro`\uff08\u5b8f\uff09\n\n   - `ERR`\n\n     \u8f93\u51fa`ERROR`\u5e76\u7ed3\u675f\u5f53\u524d\u6b65\u9aa4\u3002\n\n     ```c++\n     #define ERR {cout<<\"ERROR\\n\";goto END;}\n     ```\n\n   - `CHK(x)`\n\n     \u5224\u65ad\u6570 x \u7684\u7edd\u5bf9\u503c\u662f\u5426\u8fc7\u5927\u3002\n\n     ```c++\n     #define CHK(x) {if(x>MAX||x<-MAX)ERR}\n     ```\n\n   - `STC(x)`\n\n     \u5224\u65ad\u6808\u4e2d\u7684\u6570\u91cf\u662f\u5426\u8fbe\u5230 x \u3002\n\n     ```c++\n     #define STC(x) {if(st.size()<x)ERR}\n     ```\n\n## Part 3 \u4ee3\u7801\n\n\u4f7f\u7528\u4e86`switch-case`\u7ed3\u6784\u8fdb\u4e00\u6b65\u7f29\u51cf\u4ee3\u7801\u3002\n\n\u4ee3\u7801\u517191\u884c\uff0c1695\u4e2a\u5b57\u8282\u3002\uff08`DEV-C++`\u7684\u6570\u636e\uff09\n\n```c++\n#include<bits/stdc++.h>\n#define ERR {cout<<\"ERROR\\n\";goto END;}\n#define CHK(x) {if(x>MAX||x<-MAX)ERR}\n#define STC(x) {if(st.size()<x)ERR}\n#define int long long\nusing namespace std;\nint const N=2333,MAX=1000000000;\nstring s[2333];\nint n,tot,x,num[2333];\nstack<int>st;\nsigned main(){\n\twhile(cin>>s[++tot]&&s[tot]!=\"END\")\n\t    if(s[tot]==\"NUM\")cin>>num[tot];\n\tcin>>n;\n\twhile(n--){\n\t\tcin>>x;\n\t\tst=stack<int>();\n\t\tst.push(x);\n\t\tCHK(x)\n\t\tfor(int i=1;i<=tot;i++){\n\t\t\tswitch(s[i][0]){\n\t\t\t\tcase'N':{\n\t\t\t\t\tCHK(num[i])\n\t\t\t\t    st.push(num[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase'P':{\n\t\t\t\t\tSTC(1)\n\t\t\t\t\tst.pop();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase'I':{\n\t\t\t\t\tSTC(1)\n\t\t\t\t\tint x=st.top();st.pop();\n\t\t\t\t\tst.push(-x);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase'D':{\n\t\t\t\t\tif(s[i]==\"DUP\"){\n\t\t\t\t\t\tSTC(1)\n\t\t\t\t\t\tst.push(st.top());\n\t\t\t\t\t}else{\n\t\t\t\t\t\tSTC(2)\n\t\t\t\t\t\tint t1=st.top();st.pop();\n\t\t\t\t\t\tint t2=st.top();st.pop();\n\t\t\t\t\t\tif(!t1)ERR\n\t\t\t\t\t\tCHK(t2/t1)\n\t\t\t\t\t\tst.push(t2/t1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase'S':{\n\t\t\t\t\tSTC(2)\n\t\t\t\t\tint t1=st.top();st.pop();\n\t\t\t\t\tint t2=st.top();st.pop();\n\t\t\t\t\tif(s[i]==\"SWP\"){\n\t\t\t\t\t\tst.push(t1);st.push(t2);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tCHK(t2-t1)\n\t\t\t\t\t\tst.push(t2-t1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase'A':{\n\t\t\t\t\tSTC(2)\n\t\t\t\t\tint t1=st.top();st.pop();\n\t\t\t\t\tint t2=st.top();st.pop();\n\t\t\t\t\tCHK(t1+t2)\n\t\t\t\t\tst.push(t1+t2);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase'M':{\n\t\t\t\t\tSTC(2)\n\t\t\t\t\tint t1=st.top();st.pop();\n\t\t\t\t\tint t2=st.top();st.pop();\n\t\t\t\t\tif(s[i]==\"MUL\"){\n\t\t\t\t\t\tCHK(t2*t1)\n\t\t\t\t\t\tst.push(t2*t1);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tCHK(t2%t1)\n\t\t\t\t\t\tst.push(t2%t1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(st.size()!=1)ERR\n\t\telse cout<<st.top()<<\"\\n\";\n\t\tEND:;\n\t}\n}\n```\n\n",
        "postTime": 1597910133,
        "uid": 159686,
        "name": "Loser_King",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u672c\u9898\u672c\u8eab\u5176\u5b9e\u5e76\u4e0d\u96be~~\u4e3b\u8981\u662f\u5751\u5f88\u591a~~\n\n\u6211\u4eec\u5148\u7528f\u6570\u7ec4\u5b58\u4e0b\u6bcf\u4e00\u6b21\u7684\u64cd\u4f5c\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8f93\u5165\u679a\u4e3ef[i]\u6765\u8fdb\u884c\u64cd\u4f5c\n\n\u5728\u64cd\u4f5c\u7684\u8fc7\u7a0b\u4e2d\u4e00\u5b9a\u8981\u6ce8\u610f\u5224\u65ad\u5f53\u524d\u5c40\u9762/\u64cd\u4f5c\u662f\u5426\u5408\u6cd5\uff01\n\n\u4f1a\u8f93\u51fa\"ERROR\"\u7684\u4e24\u79cd\u4e3b\u8981\u60c5\u51b5\uff1a\n\n\u6570\u5b57\u7edd\u5bf9\u503c\u8d85\u8fc71000000000/\u6808\u5185\u5143\u7d20\u6570\u91cf\u4e0d\u8db3\u4ee5\u652f\u6301\u67d0\u4e00\u6b65\u7684\u64cd\u4f5c\n\n\u5949\u4e0a\u849f\u84bb\u4e11\u964b\u7684\u4ee3\u7801~\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<string>\nusing namespace std;\nconst long long maxn=1000000000;\nint f[2003];\nlong long num[2003];//long long \u4fdd\u5e73\u5b89\nint n,cnt,top; \nlong long a[2003];//\u6808\nbool check(long long x){return abs(x)>maxn;}//\u5224\u65ad\u6570\u5b57\u662f\u5426\u8fc7\u5927/\u8fc7\u5c0f\nvoid func(long long x)\n{\n    memset(a,0,sizeof(a));//\u6bcf\u6b21\u8c03\u7528\u6808\u524d\u9700\u8981\u6e05\u7a7a\n    if(check(x)){puts(\"ERROR\");return;}//\u6570\u5b57\u8fc7\u5927\u5219\u76f4\u63a5return\n    a[1]=x;\n    top=1;\n    for(int i=1;i<=cnt;i++)\n    {\n        if(f[i]==1)\n        {\n            if(check(num[i])){puts(\"ERROR\");return;}\n            a[++top]=num[i];\n            continue;//\u9632\u6b62\u4e4b\u540e\u68c0\u67e5\u7684\u65f6\u5019\u5224\u65ad\u9519\u8bef\n        }\n        if(top==0){puts(\"ERROR\");return;}\n        //\u4e4b\u540e\u53ef\u80fd\u51fa\u73b0\u7684\u64cd\u4f5c\u8981\u6c42\u6808\u4e2d\u5fc5\u987b\u6709\u5143\u7d20\n        if(f[i]==2)\n        {\n            if(top==1){puts(\"ERROR\");return;}\n            top--;continue;\n        }\n        if(f[i]==3) {a[top]*=-1;continue;}\n        if(f[i]==4){a[top+1]=a[top];top++;continue;}\n        if(top<2){puts(\"ERROR\");return;}\n        //\u4e4b\u540e\u53ef\u80fd\u51fa\u73b0\u7684\u64cd\u4f5c\u8981\u6c42\u6808\u4e2d\u5fc5\u987b\u6709\u81f3\u5c11\u4e24\u4e2a\u5143\u7d20\n        if(f[i]==5) swap(a[top],a[top-1]);\n        if(f[i]==6)\n        {\n            if(check(a[top]+a[top-1])){puts(\"ERROR\");return;}\n            a[top-1]+=a[top];top--;\n            //\u53ef\u4ee5\u76f4\u63a5\u5bf9\u6808\u9876\u5f80\u4e0b\u4e00\u4f4d\u7684\u5143\u7d20\u8fdb\u884c\u8fd0\u7b97\n        }\n        if(f[i]==7)\n        {\n            if(check(a[top-1]-a[top])){puts(\"ERROR\");return;}\n            a[top-1]-=a[top];top--;\n        }\n        if(f[i]==8)\n        {\n            if(check(a[top-1]*a[top])){puts(\"ERROR\");return;}\n            a[top-1]*=a[top];top--;\n        }\n        if(f[i]==9)\n        {\n            if(a[top]==0){puts(\"ERROR\");return;}//\u4e0d\u80fd\u9664\u4ee50\n            if(check(a[top-1]/a[top])){puts(\"ERROR\");return;}\n            a[top-1]/=a[top];top--;\n        }\n        if(f[i]==10)\n        {\n            if(a[top]==0){puts(\"ERROR\");return;}//\u4e0d\u80fd\u5bf90\u53d6\u6a21\n            if(check(a[top-1]%a[top])){puts(\"ERROR\");return;}\n            a[top-1]%=a[top];top--;\n        }\n    }\n    if(top!=1){puts(\"ERROR\");return;}\n    //\u6808\u4e2d\u5982\u679c\u4e0d\u662f\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u5c31\u62a5\u9519\n    printf(\"%lld\\n\",a[top]);\n    return;\n}\nint main()\n{\n    string c;\n    while(cin>>c)\n    {\n        if(c==\"END\") break;\n        cnt++;\n        if(c==\"NUM\")\n        {\n            f[cnt]=1;\n            long long x;\n            scanf(\"%lld\",&x);\n            num[cnt]=x;//\u5b58\u4e0b\u6bcf\u6b21NUM\u64cd\u4f5c\u8981\u52a0\u7684\u6570\n        }\n        if(c==\"POP\") f[cnt]=2;\n        if(c==\"INV\") f[cnt]=3;\n        if(c==\"DUP\") f[cnt]=4;\n        if(c==\"SWP\") f[cnt]=5;\n        if(c==\"ADD\") f[cnt]=6;\n        if(c==\"SUB\") f[cnt]=7;\n        if(c==\"MUL\") f[cnt]=8;\n        if(c==\"DIV\") f[cnt]=9;\n        if(c==\"MOD\") f[cnt]=10;\n        //\u7528f\u6570\u7ec4\u5b58\u50a8\u64cd\u4f5c\n    }\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\t\n        long long x;\n        scanf(\"%lld\",&x);\n        func(x);\n    }\n    return 0;\n}\n```\n\u5982\u679c\u9898\u89e3\u6709\u8bef\u6b22\u8fce\u6307\u51fa~\n",
        "postTime": 1541505783,
        "uid": 91889,
        "name": "Dirt\u3001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u770b\u4e0a\u53bb\u8d3c\u590d\u6742\uff0811\u4e2a\u51fd\u6570\uff0c\u6570\u636e\u4e0d\u4fdd\u8bc1\u5408\u6cd5\uff0c\u96be\u5ea6\u7701\u9009-\uff09\uff0c\u5b9e\u9645\u4e0a\u53ea\u8981\u5bf9\u4e8e\u6bcf\u79cd\u51fd\u6570\u8fdb\u884c\u4e00\u6b21if\u7684\u5224\u65ad\uff0811\u4e2a\u51fd\u6570\u7b97\u4e2a\u6492\u5b50\uff09\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u5f97\u51fa\u7684\u6570\u636e\u8fdb\u884c\u4e00\u6b21if\u7684\u5224\u65ad\uff08\u6570\u636e\u4e0d\u5408\u6cd5\u7b97\u4e2a\u6492\u5b50\uff09\uff0cAC\u540e\u518d\u8bc4\u5206\u91cc\u9009\u4e2a\u5165\u95e8\u5c31OK\u4e86\uff08\u7701\u9009-\u7b97\u4e2a\u6492\u5b50~\uff09\u3002\n\n\u7136\u800c\u6211\u56e0\u4e3a\u628aINV\u62fc\u5199\u6210IVN\u63d0\u4ea4\u51e0\u6b21\u90fd\u662f50\u5206\uff0c\u6240\u4ee5\u672c\u849f\u84bb\u63d0\u9192\u5404\u4f4d\u795e\u725b  \u770b  \u6e05  \u695a  \u5355  \u8bcd  \uff01  \uff01  \uff01\n\n\u672c\u849f\u84bb\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint n,num[10001],st[10001],p;//st\u6570\u7ec4\u662f\u672c\u849f\u84bb\u624b\u5199\u7684\u4e00\u4e2a\u6570\u7ec4\u6808\uff0cp\u662f\u6808\u9876\u6307\u9488\nstring s[10001];//s\u662f\u6bcf\u4e00\u4e2a\u51fd\u6570\nbool end;\nvoid get(int x)\n{\n    cin>>s[x];//\u8bfb\u5165\u51fd\u6570\n    if(s[x]==\"END\") return ;//\u51fd\u6570\u7ed3\u675f\n    if(s[x]==\"NUM\") cin>>num[x];//\u8f93\u5165NUM\u51fd\u6570\u52a0\u5165\u7684\u6570\n    get(x+1);//\u9012\u5f52\n    return;\n}\nbool doit(string in,int x)\n{\n    if      (p<2&&in!=\"NUM\"&&in!=\"IVN\"&&in!=\"DUP\"&&in!=\"END\") return 1;//return 1\u8868\u793a\u51fa\u9519\uff0cp<2\u662f\u6808\u5185\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6\u65e0\u6cd5\u8c03\u7528\u4e24\u4e2a\u5143\u7d20\n    if    (p>1&&in==\"END\") return 1;//\u8868\u793a\u7ed3\u675f\u65f6\u6808\u5185\u6709\u591a\u4f59\u5143\u7d20\n    if    (in==\"NUM\") st[++p]=num[x];//\u5165\u6808\n    if    (in==\"POP\") p--;//\u6808\u9876\u5f39\u51fa\n    if    (in==\"INV\") st[p]=-st[p];\u6808\u9876\u53d6\u53cd\n    if    (in==\"DUP\") st[++p]=st[p-1];//\u52a0\u5165\u4e0e\u6808\u9876\u76f8\u540c\u7684\u5143\u7d20\n    if    (in==\"SWP\") swap(st[p],st[p-1]);//\u4ea4\u6362\u6808\u9876\u4e24\u4e2a\u5143\u7d20\n    if    (in==\"ADD\") st[--p]+=st[p+1];//\u6808\u9876\u4e24\u5143\u7d20\u76f8\u52a0\n    if    (in==\"SUB\") st[--p]-=st[p+1];//\u6808\u9876\u4e24\u5143\u7d20\u76f8\u51cf\uff0c\u6ce8\u610f\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u51cf\u53bb\u6808\u9876\uff0cDIV\uff0cMOD\u4e5f\u662f\u7c7b\u4f3c\n    if    (in==\"MUL\") st[--p]*=st[p+1];//\u6808\u9876\u4e24\u5143\u7d20\u76f8\u4e58\n    if    (in==\"DIV\")\n    {\n        if(st[p]==0) return 1;//\u9664\u6570\u4e3a0\u51fa\u9519\n        st[--p]/=st[p+1];\n    }\n    if    (in==\"MOD\")\n    {\n        if(st[p]==0) return 1;//\u9664\u6570\u4e3a0\u51fa\u9519\n        st[--p]%=st[p+1];\n    }\n    if    (in==\"END\") end=1;\n    if(st[p]>1000000000||st[p]<-1000000000) return 1;//\u6808\u9876\u5143\u7d20\u7edd\u5bf9\u503c>1000000000\uff0c\u51fa\u9519\n    return 0;\n}\nint main()\n{\n    get(1);//\u8bfb\u5165\u51fd\u6570\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        p=1;\n        st[p]=0;//\u6808\u9876\u6e050\n        string in;\n        cin>>in;\n        int con=0;\n        end=0;\n        for(int j=in.size()-1,k=1;j>=0;j--,k*=10)\n        {\n            if(in[j]>'9'||in[j]<'0')//\u5143\u7d20\u975e\u6570\uff0c\u51fa\u9519\n            {\n                con=1;\n                printf(\"ERROR\\n\");\n                break;\n            }\n            st[1]+=(in[j]-'0')*k;//\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\n        }\n        if(st[1]>1000000000||st[1]<-1000000000)//\u6808\u9876\u5143\u7d20\u7edd\u5bf9\u503c>1000000000\uff0c\u51fa\u9519\n        {\n            printf(\"ERROR\\n\");\n            continue;\n        }\n        for(int j=1; !end ;j++)//end\u8868\u793a\u7ed3\u675f\u51fd\u6570\uff0c\u53ea\u8981\u6ca1\u7ed3\u675f\u5c31\u5faa\u73af\u8fd0\u884c\n        {\n            if(doit(s[j],j))//\u8fd4\u56de 1\u8868\u793a\u51fa\u9519\n            {\n                printf(\"ERROR\\n\");\n                con=1;//\u8bb0\u5f55\u51fa\u9519\n                break;\n            }\n        }\n        if(!con) printf(\"%d\\n\",st[1]);//\u6ca1\u6709\u51fa\u9519\uff0c\u8f93\u51fa\u6808\u9876\n    }\n    return 0;\n}\n```",
        "postTime": 1503298375,
        "uid": 52232,
        "name": "Kewth",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u6211\u53bb\uff0c\u7ec8\u4e8e\u8fc7\u4e86~~~\n\n\u800c\u4e14\u6211\u662f\u8fd9\u9053\u9898\u7684\u9996AC\u8036\u3002\n\n\n\u672c\u9898\u7684\u601d\u8def\u662f\uff1a\n\n\u6a21\u62df\u3001\u6a21\u62df\u3001\u5f80\u6b7b\u91cc\u6a21\u62df\uff01\uff01\uff01\uff01\uff01\n\n\u6ce8\u610f\u8981\u7ec6\u5fc3\u4e00\u4e9b\u3002\n\n\n1\uff1a\u4e0d\u7528\u8bf4\uff0c\u5224\u65ad\u662f\u5426 > 10\u4ebf\u3002\n\n\n\u4f46\u662f\u53ea\u5224\u65ad\u8fd9\u4e2a\u662f\u8fdc\u8fdc\u4e0d\u591f\u6ef4\u3002\u56e0\u4e3a\u8fd8\u662f0\u5206\u3002\uff08\u6211\u73b0\u8eab\u8bf4\u6cd5\uff0110\u4e2a\u70b9\u5168\u90e8RE\uff01\uff09\n\n\u8fd9\u5c31\u5f15\u51fa\u4e86\u7b2c\u4e8c\u4e2a\uff1a\n\n\n2\uff1a\u9664\u6cd5\u7684\u9664\u6570\u8981\u5224\u65ad\u662f\u5426\u4e3a0\uff01\uff01\uff01\uff01\uff01\n\n\u8d85\u7ea7\u91cd\u8981\u7684\u4e00\u70b9\u3002\u3002\u3002\n\n\n\u672c\u9898\u6211\u7ed9\u4e2a\u8bc4\u4ef7\u5427\uff0c\u53c8\u96be\u53c8\u70e6=\\_=\n\n\u9644\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <string>\n#include <iostream>\n#include <stack>\nusing namespace std;\ntypedef struct _node{\n    string s;\n    int num;\n}Node;\nconst int size = 10005,limit = 1000000000;\nint p = 0,c[size],n;\nNode q[size];\nvoid go(){ printf(\"ERROR\\n\"); }\nint abs(int n){ return n>0?n:-n; }\nbool jud(int n){ return n > limit; }\nint main(int argc, char const *argv[]){\n    // freopen(\"stack.in\",\"r\",stdin);\n    while( true ){\n        cin >> q[p].s;\n        if(q[p].s == \"NUM\") scanf(\"%d\",&q[p].num);\n        if(q[p].s == \"END\") break;\n        else p++;\n    }\n    scanf(\"%d\",&n);\n    for(int i = 0; i < n; i++) scanf(\"%d\",&c[i]);\n    for(int i = 0; i < n; i++){\n        stack<int> z;        z.push(c[i]);\n        int flag = 1;\n        for(int j = 0; j < p; j++){\n            if(c[i] > limit){ flag = 0; break; }\n            if(q[j].s == \"NUM\"){ if(jud(q[j].num)){ flag = 0; break; } z.push(q[j].num); }\n            else if(q[j].s == \"POP\") z.pop();\n            else if(q[j].s == \"INV\"){ int y = z.top(); if(jud(-y)){ flag = 0; break; } z.pop(); z.push(-y); }\n            else if(q[j].s == \"DUP\"){ int y = z.top(); z.push(y); }\n            else if(q[j].s == \"SWP\"){\n                int x = z.top(); z.pop();\n                int y = z.top(); z.pop();\n                if(jud(x)||jud(y)){ flag = 0; break; }\n                z.push(x); z.push(y);\n            }else if(q[j].s == \"ADD\"){ \n                int x = z.top(); z.pop(); \n                int y = z.top(); z.pop(); \n                if(jud(x+y)){ flag = 0; break; }\n                z.push(x+y); \n            }else if(q[j].s == \"SUB\"){\n                int x = z.top(); z.pop();\n                int y = z.top(); z.pop();\n                if(jud(y-x)){ flag = 0; break; }\n                z.push(y-x);\n            }else if(q[j].s == \"MUL\"){\n                int x = z.top(); z.pop();\n                int y = z.top(); z.pop();\n                if(jud(x*y)){ flag = 0; break; }\n                z.push(x*y);\n            }else if(q[j].s == \"DIV\"){\n                int x = z.top(); z.pop();\n                int y = z.top(); z.pop();\n                if(!x){ flag = 0; break; }\n                if(jud(y/x)){ flag = 0; break; }\n                z.push(y/x);\n            }else if(q[j].s == \"MOD\"){\n                int x = z.top(); z.pop();\n                int y = z.top(); z.pop();\n                if(jud(y%x)){ flag = 0; break; }\n                z.push(y%x);\n            }\n        }\n        if(!flag){ go(); continue; } \n        if(z.size() != 1) go(); \n        else printf(\"%d\\n\",z.top());\n    }\n    return 0;\n}\n```",
        "postTime": 1470203122,
        "uid": 17170,
        "name": "Deny_\u5c0f\u7530",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9898\u770b\u4e0a\u53bb\u633a\u96be,\u5176\u5b9e\u5c31\u662f\u6e05\u4e00\u8272\u7684\u5927\u6a21\u62df\n\n\u4e3b\u8981\u662f**\u64cd\u4f5c\u591a**,\u4f46\u662f\u4e5f\u597d\u505a~~\u5c31\u6253\u4e00\u5806if\u5c31\u597d\u4e86~~\n\n~~\u4e3a\u4e86\u51d1\u5b57\u6570,~~ \u6211\u4eec\u4f7f\u7528\u624b\u5199\u6808\u5b58\u653e\u539f\u9898\u4e2d\u7684\u6808:\n```cpp\nlong long Stack[5001];\nint StackTop;\nvoid push(long long x){Stack[++StackTop]=x;}\nlong long pop(){return Stack[StackTop--];}\nlong long top(){return Stack[StackTop];}\n```\n\n\u63a5\u4e0b\u6765,\u6211\u4eec\u5c31\u53ef\u4ee5\u8bfb\u5165\u5e76\u4fdd\u5b58\u7a0b\u5e8f\u4e86,\u6211\u4f7f\u7528\u4e00\u4e2a `code` \u7684\u6765\u5b58\u653e\u64cd\u4f5c\u7b26,\u7528 `num` \u6765\u5b58\u653e\u64cd\u4f5c\u6570(\u4e0d\u8fc7\u5c31 NUM \u64cd\u4f5c\u9700\u8981\u64cd\u4f5c\u6570)\n\n\u81f3\u4e8e\u8fd0\u884c\u90e8\u5206,\u6211\u611f\u89c9\u9898\u76ee\u63cf\u8ff0\u4e0d\u592a\u6e05\u6670(\u6216\u8bb8\u662f\u6211\u8bed\u6587\u4e0d\u597d?),\u6211\u60f3\u4e86\u5f88\u4e45\u624d\u77e5\u9053\u539f\u6765\u662f\u6bcf\u6b21\u628a\u6808\u6e05\u7a7a\u518d\u53ea\u5f80\u6808\u4e2d\u653e\u4e00\u4e2a\u6570.\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u70b9\u662f\u6bcf\u8fd0\u884c\u4e00\u6b65\u5c31\u8981\u5224\u4e00\u904d ERROR.\n\n```cpp\nvoid Eval(long long a){\n\tStackTop=0;\n\tif(abs(a)>1000000000){\n\t\tputs(\"ERROR\");\n\t\treturn;\n\t}\n\tpush(a);\n\tchar *op=code[1];\n\tfor(int i=1;i<=cnt;++i,op=code[i]){\n\t\tif(!strcmp(op,\"NUM\")){\n\t\t\tif(abs(num[i])>1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(num[i]);\n\t\t}else if(!strcmp(op,\"POP\")){\n\t\t\tif(!StackTop){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpop();\n\t\t}else if(!strcmp(op,\"INV\")){\n\t\t\tif(!StackTop){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(-pop());\n\t\t}else if(!strcmp(op,\"DUP\")){\n\t\t\tif(!StackTop){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(top());\n\t\t}else if(!strcmp(op,\"SWP\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tpush(x);push(y);\n\t\t}else if(!strcmp(op,\"ADD\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(abs(x+y)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(x+y);\n\t\t}else if(!strcmp(op,\"SUB\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(abs(y-x)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(y-x);\n\t\t}else if(!strcmp(op,\"MUL\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(abs(x*y)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(x*y);\n\t\t}else if(!strcmp(op,\"DIV\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(x==0||abs(y/x)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(y/x);\n\t\t}else if(!strcmp(op,\"MOD\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(x==0||abs(y%x)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(y%x);\n\t\t}\n\t}\n\tif(StackTop!=1){\n\t\tputs(\"ERROR\");\n\t\treturn;\n\t}else printf(\"%lld\\n\",top());\n}\n```\n\n\u7136\u540e\u662f\u8bfb\u5165\u73af\u8282,\u4e0d\u96be\n\n```cpp\nint main(){\n\tlong long x;\n\twhile(scanf(\"%s\",code[++cnt])){\n\t\tif(!strcmp(code[cnt],\"END\"))break;\n\t\tnum[cnt]=0;\n\t\tif(!strcmp(code[cnt],\"NUM\"))\n\t\t\tscanf(\"%lld\",num+cnt);\n\t}\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%lld\",&x);\n\t\tEval(x);\n\t}\n}\n```\n\n\u6700\u540e\u653e\u5b8c\u6574\u4ee3\u7801,\u987a\u4fbf\u63a8\u8350\u4e00\u4e0b\u6211 DIY \u7684\u4e0e\u9898\u76ee\u7c7b\u4f3c\u7684 [\u6808\u5f0f\u865a\u62df\u673a](https://www.luogu.com.cn/blog/LuoguJudgerEnableO2/diy-zhan-shi-xu-ni-ji)\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nlong long Stack[5001];\nint StackTop;\nvoid push(long long x){Stack[++StackTop]=x;}\nlong long pop(){return Stack[StackTop--];}\nlong long top(){return Stack[StackTop];}\nchar code[2001][1001];\nlong long num[2001];\nint cnt=0;\nvoid Eval(long long a){\n\tStackTop=0;\n\tif(abs(a)>1000000000){\n\t\tputs(\"ERROR\");\n\t\treturn;\n\t}\n\tpush(a);\n\tchar *op=code[1];\n\tfor(int i=1;i<=cnt;++i,op=code[i]){\n\t\tif(!strcmp(op,\"NUM\")){\n\t\t\tif(abs(num[i])>1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(num[i]);\n\t\t}else if(!strcmp(op,\"POP\")){\n\t\t\tif(!StackTop){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpop();\n\t\t}else if(!strcmp(op,\"INV\")){\n\t\t\tif(!StackTop){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(-pop());\n\t\t}else if(!strcmp(op,\"DUP\")){\n\t\t\tif(!StackTop){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(top());\n\t\t}else if(!strcmp(op,\"SWP\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tpush(x);push(y);\n\t\t}else if(!strcmp(op,\"ADD\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(abs(x+y)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(x+y);\n\t\t}else if(!strcmp(op,\"SUB\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(abs(y-x)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(y-x);\n\t\t}else if(!strcmp(op,\"MUL\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(abs(x*y)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(x*y);\n\t\t}else if(!strcmp(op,\"DIV\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(x==0||abs(y/x)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(y/x);\n\t\t}else if(!strcmp(op,\"MOD\")){\n\t\t\tif(StackTop<=1){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlong long x=pop(),y=pop();\n\t\t\tif(x==0||abs(y%x)>=1000000000){\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpush(y%x);\n\t\t}\n\t}\n\tif(StackTop!=1){\n\t\tputs(\"ERROR\");\n\t\treturn;\n\t}else printf(\"%lld\\n\",top());\n}\nint main(){\n\tlong long x;\n\twhile(scanf(\"%s\",code[++cnt])){\n\t\tif(!strcmp(code[cnt],\"END\"))break;\n\t\tnum[cnt]=0;\n\t\tif(!strcmp(code[cnt],\"NUM\"))\n\t\t\tscanf(\"%lld\",num+cnt);\n\t}\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%lld\",&x);\n\t\tEval(x);\n\t}\n}\n```",
        "postTime": 1621245495,
        "uid": 228486,
        "name": "SunsetSamsara",
        "ccfLevel": 7,
        "title": "P2186 \u5c0fZ\u7684\u6808\u51fd\u6570 \u9898\u89e3"
    },
    {
        "content": "## Update\n- $\\texttt{2020.10.27}$ \u4fee\u4e86\u4e00\u4e0b\u6392\u7248\u3002\n\n## Content\n\u6709\u4e00\u79cd\u7a0b\u5e8f\u7ed9\u5b9a\u4f6011\u79cd\u64cd\u4f5c\uff1a\n\n- $\\text{NUM }x$\uff1a\u5728\u6808\u9876\u653e\u5165\u5143\u7d20 $x$\u3002  \n- $\\text{POP}$\uff1a\u6808\u9876\u5143\u7d20\u51fa\u6808\u3002  \n- $\\text{INV}$\uff1a\u6808\u9876\u5143\u7d20\u51fa\u6808\uff0c\u53d6\u5176\u76f8\u53cd\u6570\u540e\u518d\u5165\u6808\u3002\n- $\\text{DUP}$\uff1a\u5728\u6808\u9876\u653e\u5165\u548c\u6808\u9876\u5143\u7d20\u4e00\u6837\u7684\u5143\u7d20\u3002\n- $\\text{SWP}$\uff1a\u5c06\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\u4ea4\u6362\u3002\n- $\\text{ADD}$\uff1a\u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u4e24\u4e2a\u5143\u7d20\u7684\u548c\u5165\u6808\u3002\n- $\\text{SUB}$\uff1a\u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u7b2c\u4e8c\u4e2a\u5143\u7d20\u51cf\u53bb\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5dee\u5165\u6808\u3002\n- $\\text{MUL}$\uff1a\u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u4e24\u4e2a\u5143\u7d20\u7684\u79ef\u5165\u6808\u3002\n- $\\text{DIV}$\uff1a\u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u7b2c\u4e8c\u4e2a\u5143\u7d20\u9664\u4ee5\u7b2c\u4e00\u4e2a\u5143\u7d20\uff08**\u6574\u9664**\uff09\u4e4b\u540e\u7684\u7ed3\u679c\u4f5c\u4e3a\u4e00\u4e2a\u5143\u7d20\u5165\u6808\u3002\n- $\\text{MOD}$\uff1a\u53d6\u51fa\u6808\u9876\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u7b2c\u4e8c\u4e2a\u5143\u7d20\u53d6\u6a21\u4ee5\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u7ed3\u679c\u4f5c\u4e3a\u4e00\u4e2a\u5143\u7d20\u5165\u6808\u3002\n- $\\text{END}$\uff1a\u7ed3\u675f\u7a0b\u5e8f\u3002\n\n\u73b0\u7528 $m$ \u4e2a\u64cd\u4f5c\uff08\u5305\u542b\u4e0a\u9762 $11$ \u79cd\u64cd\u4f5c\uff0c\u4f46\u4e0d\u5168\u90e8\u5305\u542b\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u79cd\u64cd\u4f5c\u591a\u6b21\u4f7f\u7528\u7684\u60c5\u51b5\uff09\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 $f(x)$\uff0c\u5176\u4e2d $x$ \u4e3a\u6700\u521d\u6808\u91cc\u7684\u552f\u4e00\u4e00\u4e2a\u5143\u7d20\u3002$f(x)$ \u7684\u7ed3\u679c\u5373\u4e3a $m$ \u4e2a\u64cd\u4f5c\u5b8c\u6210\u4ee5\u540e\u6808\u91cc\u7684\u552f\u4e00\u4e00\u4e2a\u5143\u7d20\u3002\n\n\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u63a5\u53d7 $n$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa\u4e00\u4e2a\u6570 $x_i$\uff0c\u8ba9\u4f60\u6839\u636e\u5bf9\u5e94\u7684 $x_i$ \u6c42\u51fa $f(x_i)$\u3002\u6ce8\u610f\uff0c\u5982\u679c\u51fa\u73b0\u4e0b\u5217\u60c5\u51b5\u4e4b\u4e00\uff0c\u8f93\u51fa $\\texttt{ERROR}$\uff1a\n\n1. $m$ \u6b21\u64cd\u4f5c\u7ed3\u675f\u540e\u6808\u5185\u6ca1\u6709\u5143\u7d20\u6216\u8005\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u5143\u7d20\u3002\n2. \u5728 $m$ \u6b21\u64cd\u4f5c\u4e2d\uff0c\u6709\u4efb\u610f\u4e00\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u7b97\u51fa\u6765\u7684\u7ed3\u679c\u7684\u7edd\u5bf9\u503c $\\geqslant 10^9$\u3002\n3. \u8f93\u5165\u6570\u636e\u4e0d\u5408\u6cd5\uff0c\u5bfc\u81f4\u4e2d\u9014\u9000\u51fa\u3002\n\n**\u6570\u636e\u8303\u56f4\uff1a$n,m\\leqslant 2000$\u3002**\n\n## Solution\n\u5927\u6a21\u62df\u9898\uff0c\u8003\u5bdf\u7684\u662f\u6808\u7684\u57fa\u672c\u64cd\u4f5c\u548c\u5b57\u7b26\u4e32\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u4f46\u7ec6\u8282\u5f88\u591a\uff08\u8fd9\u5e94\u8be5\u662f\u5b83\u84dd\u4e86\u7684\u539f\u56e0\uff09\u3002\n\n\u5148\u518d\u9010\u4e00\u8003\u8651\u6bcf\u79cd\u64cd\u4f5c\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n- $\\texttt{NUM}$ \u64cd\u4f5c\uff1a\u76f4\u63a5\u5229\u7528 $\\texttt{push}$ \u51fd\u6570\u5373\u53ef\u3002\n- $\\texttt{POP}$ \u64cd\u4f5c\uff1a\u76f4\u63a5\u5229\u7528 $\\texttt{pop}$ \u51fd\u6570\u5373\u53ef\u3002\n- $\\texttt{INV}$ \u64cd\u4f5c\uff1a\u5c06\u6808\u9876\u5143\u7d20\u5b58\u50a8\u5230\u4e00\u4e2a\u53d8\u91cf\u4e2d\uff0c\u7136\u540e\u8fdb\u884c $\\texttt{pop}$ \u64cd\u4f5c\uff0c\u518d\u5c06\u6808\u9876\u5143\u7d20\u53d6\u76f8\u53cd\u6570\u7528 $\\texttt{push}$ \u64cd\u4f5c\u5373\u53ef\u3002\n- $\\texttt{DUP}$ \u64cd\u4f5c\uff1a\u7528\u4e00\u4e2a\u53d8\u91cf\u5b58\u50a8\u6808\u9876\u5143\u7d20\u4f46\u4e0d\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\u6808\uff0c\u7136\u540e\u76f4\u63a5\u5229\u7528 $\\texttt{push}$ \u51fd\u6570\u5373\u53ef\u3002\n- $\\texttt{SWP}$ \u64cd\u4f5c\uff1a\u8fde\u7eed\u4e24\u6b21 $\\texttt{pop}$ \u64cd\u4f5c\uff0c\u628a\u5148\u5f39\u51fa\u6765\u7684\u5143\u7d20\u5148\u5165\u6808\uff0c\u518d\u5c06\u540e\u5f39\u51fa\u6765\u7684\u5143\u7d20\u540e\u5165\u6808\u3002\u4e0d\u9700\u8981 $\\texttt{swap}$ \u51fd\u6570\u3002\n- $\\texttt{ADD}$ \u64cd\u4f5c\uff1a\u8fde\u7eed\u4e24\u6b21 $\\texttt{pop}$ \u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u5f39\u51fa\u6765\u7684\u4e24\u4e2a\u5143\u7d20\u6c42\u548c\u540e\u518d\u5c06\u6c42\u5f97\u7684\u7ed3\u679c\u5165\u6808\u3002\n- $\\texttt{SUB}$ \u64cd\u4f5c\uff1a\u8fde\u7eed\u4e24\u6b21 $\\texttt{pop}$ \u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u540e\u5f39\u51fa\u6765\u7684\u5143\u7d20\u51cf\u53bb\u5148\u5f39\u51fa\u6765\u7684\u5143\u7d20\u540e\u518d\u5c06\u6240\u5f97\u5230\u7684\u5dee\u503c\u5165\u6808\u3002\n- $\\texttt{MUL}$ \u64cd\u4f5c\uff1a\u8fde\u7eed\u4e24\u6b21 $\\texttt{pop}$ \u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u5f39\u51fa\u6765\u7684\u4e24\u4e2a\u5143\u7d20\u6c42\u79ef\u540e\u518d\u5c06\u6c42\u5f97\u7684\u7ed3\u679c\u5165\u6808\u3002\n- $\\texttt{DIV}$ \u64cd\u4f5c\uff1a\u8fde\u7eed\u4e24\u6b21 $\\texttt{pop}$ \u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u540e\u5f39\u51fa\u6765\u7684\u5143\u7d20\u6574\u9664\u4ee5\u5148\u5f39\u51fa\u6765\u7684\u5143\u7d20\u540e\u518d\u5c06\u6240\u5f97\u5230\u7684\u7ed3\u679c\u5165\u6808\u3002\n- $\\texttt{MOD}$ \u64cd\u4f5c\uff1a\u8fde\u7eed\u4e24\u6b21 $\\texttt{pop}$ \u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u540e\u5f39\u51fa\u6765\u7684\u5143\u7d20\u53d6\u6a21\u4ee5\u5148\u5f39\u51fa\u6765\u7684\u5143\u7d20\u540e\u518d\u5c06\u6240\u5f97\u5230\u7684\u7ed3\u679c\u5165\u6808\u3002\n- $\\texttt{END}$ \u64cd\u4f5c\uff1a\u53d6\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5982\u679c\u91cc\u9762\u4ecd\u4e0d\u4e3a\u7a7a\u8bf4\u660e\u524d\u9762\u7684\u64cd\u4f5c\u505a\u5b8c\u4e86\u4e4b\u540e\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u5143\u7d20\uff0c\u8f93\u51fa $\\texttt{ERROR}$\uff0c\u5426\u5219\u8f93\u51fa\u8fd9\u4e2a\u6808\u9876\u5143\u7d20\u3002\n\n\u53e6\u5916\u8fd8\u8981\u63d0\u9632\uff1a\n\n1. \u6bcf\u6b21\u64cd\u4f5c\u4e2d\u90fd\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u8fd0\u7b97\u7ed3\u679c\u7684\u7edd\u5bf9\u503c\u5927\u4e8e $10^9$ \u7684\u60c5\u51b5\u3002\n2. $\\texttt{DIV}$ \u548c $\\texttt{MOD}$ \u64cd\u4f5c\u4e2d\u9664\u6570\u6216\u6a21\u6570\u4e3a$0$\u7684\u60c5\u51b5\u3002\n3. \u51fa\u73b0\u4e86\u9664\u4e0a\u8ff0 $11$ \u79cd\u64cd\u4f5c\u4e4b\u5916\u7684\u64cd\u4f5c\u7684\u60c5\u51b5\u3002\n\n\u653e\u5fc3\uff0c\u6574\u9053\u9898\u76ee\u4ee3\u7801\u91cf\u8fd8\u4e0d\u8fc7 $200$ \u884c\uff0c\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\n\n\u603b\u4e4b\uff0c\u8fd9\u9053\u9898\u76ee\u8003\u5bdf\u601d\u7ef4\u96be\u5ea6\u8fd8\u7b97\u597d\uff0c\u5982\u679c\u6309\u601d\u7ef4\u96be\u5ea6\u8bc4\u5206\u7684\u8bdd\uff0c\u6211\u8ba4\u4e3a\u6700\u591a\u7ed9\u5b83\u8bc4\u4e2a\u6a59\u9898\u3002\n\n## Code\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <stack>\n#include <iostream>\nusing namespace std;\n\nstring move[2007];\nint n, cnt;\nlong long x, move2[2007];\n\nvoid mover(long long x) {\n\tif(abs(x) > 1e9) {\n\t\tputs(\"ERROR\");\n\t\treturn;\n\t}\n\tstack<long long> q;\n\tq.push(x);\n\tfor(int i = 1; i <= cnt; ++i) {\n//\t\tcout << move[i] << endl;\n\t\tif(move[i] == \"NUM\") {\n\t\t\tif(abs(move2[i]) > 1e9) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.push(move2[i]);\n\t\t} else if(move[i] == \"POP\") {\n\t\t\tif(abs(q.top()) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t} else if(move[i] == \"INV\") {\n\t\t\tlong long x = q.top();\n\t\t\tif(abs(x) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tq.push(-x);\n\t\t} else if(move[i] == \"DUP\") {\n\t\t\tlong long x = q.top();\n\t\t\tif(abs(x) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.push(x);\n\t\t} else if(move[i] == \"SWP\") {\n\t\t\tlong long x1 = q.top();\n\t\t\tif(abs(x1) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x2 = q.top();\n\t\t\tif(abs(x2) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tq.push(x1);\n\t\t\tq.push(x2);\n\t\t} else if(move[i] == \"ADD\") {\n\t\t\tlong long x1 = q.top();\n\t\t\tif(abs(x1) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x2 = q.top();\n\t\t\tif(abs(x2) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x = x1 + x2;\n\t\t\tif(abs(x) > 1e9) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.push(x);\n\t\t} else if(move[i] == \"SUB\") {\n\t\t\tlong long x1 = q.top();\n\t\t\tif(abs(x1) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x2 = q.top();\n\t\t\tif(abs(x2) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x = x2 - x1;\n\t\t\tif(abs(x) > 1e9) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.push(x);\n\t\t} else if(move[i] == \"MUL\") {\n\t\t\tlong long x1 = q.top();\n\t\t\tif(abs(x1) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x2 = q.top();\n\t\t\tif(abs(x2) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x = x1 * x2;\n\t\t\tif(abs(x) > 1e9) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.push(x);\n\t\t} else if(move[i] == \"DIV\") {\n\t\t\tlong long x1 = q.top();\n\t\t\tif(abs(x1) > 1e9 || q.empty() || !x1) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x2 = q.top();\n\t\t\tif(abs(x2) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x = x2 / x1;\n\t\t\tif(abs(x) > 1e9) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.push(x);\n\t\t} else if(move[i] == \"MOD\") {\n\t\t\tlong long x1 = q.top();\n\t\t\tif(abs(x1) > 1e9 || q.empty() || !x1) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x2 = q.top();\n\t\t\tif(abs(x2) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tlong long x = x2 % x1;\n\t\t\tif(abs(x) > 1e9) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.push(x);\n\t\t} else if(move[i] == \"END\") {\n\t\t\tlong long x = q.top();\n\t\t\tif(abs(x) > 1e9 || q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.pop();\n\t\t\tif(!q.empty()) {\n\t\t\t\tputs(\"ERROR\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprintf(\"%lld\\n\", x);\n\t\t} else {\n\t\t\tputs(\"ERROR\");\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nint main() {\n\twhile(cin >> move[++cnt] && move[cnt] != \"END\") {\n\t\tif(move[cnt] == \"NUM\")\n\t\t\tscanf(\"%d\", &move2[cnt]);\n\t}\n\tscanf(\"%d\", &n);\n\twhile(n--) {\n\t\tscanf(\"%lld\", &x);\n\t\tmover(x);\n\t}\n}\n```",
        "postTime": 1582946507,
        "uid": 112917,
        "name": "Eason_AC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e3a\u4ec0\u4e48\u90fd\u5199\u4e86\u4e24\u767e\u591a\u884c\uff1f\uff1f\u7a0d\u5fae\u538b\u538b\u884c\u4e0d\u4e5f\u5c31\u516b\u5341\u7684\u4e8b\u60c5\u4e48qwq\n\u5c31\u662f\u6b63\u5e38\u7684\u6a21\u62df\u5566\uff0c\uff0c\u52a0\u4e00\u70b9\u5c0f\u5c0f\u7684\u7279\u5224\uff0c~~\u4e00\u70b9\u80e1\u6912\u548c\u5b5c\u7136~~\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u6e9c\u8fc7\u53bb\u5566\u3002\n\u4e0a\u4ee3\u7801\uff0c\u7801\u98ce\u8d85\u4e11\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nchar c[6];\nlong long a[2004];\nint top=1,n,sum=1,gugu[2004],w[2004],tot,flag=1; \nint main(){\n//\tfreopen(\"1.in\",\"r\",stdin);\n    long long x;\n    while(scanf(\"%s\",c),c[0]!='E'){\n        int A=c[0],b=c[1];\n        if(A=='N'&&b=='U'){\n            cin>>x;sum++;if(x<0)x=-x;if(x>1000000000)flag=0;\n            gugu[++tot]=1;w[tot]=x;\n        } \n        if(A=='P'&&b=='O')gugu[++tot]=2,sum--;\n        if(A=='I')gugu[++tot]=3;\t\t                                     if(A=='D'&&b=='U')gugu[++tot]=4,sum++;\n        if(A=='S'&&b=='W')gugu[++tot]=5; \n        if(A=='A'&&b=='D')gugu[++tot]=6,sum--;\n        if(A=='S'&&b=='U')gugu[++tot]=7,sum--;\n        if(A=='M'&&b=='U')gugu[++tot]=8,sum--;\n        if(A=='D'&&b=='I')gugu[++tot]=9,sum--;\n        if(A=='M'&&b=='O')gugu[++tot]=10,sum--;\n    }\n    cin>>n;\n    if(sum!=1||!flag){//sum\u5c31\u662f\u6808\u5185\u6570\u636esize\u5566\n        for(int i=1;i<=n;i++)cout<<\"ERROR\"<<endl;return 0;\n    }flag=1;//\u5e9f\u7269\u5229\u7528\n    while(n--){\n        cin>>x;a[1]=x;top=1;flag=1;\n        for(int i=1;i<=tot;i++){\n            if(gugu[i]==1)a[++top]=w[i];\n            if(gugu[i]==2)top--;\n            if(gugu[i]==3)a[top]=-a[top];\n            if(gugu[i]==4)top++,a[top]=a[top-1];\n            if(gugu[i]==5)swap(a[top],a[top-1]);\n            if(gugu[i]==6){\n                x=a[top]+a[top-1];int qwq=x;\n                if(x<0)x=-x;if(x>1000000000){\n                     flag=0;goto out;\n                }\n                top--;a[top]=qwq;\n            }\n            if(gugu[i]==7){\n                x=a[top-1]-a[top];int qwq=x;\n                if(x<0)x=-x;if(x>1000000000){\n                     flag=0;goto out;\n                }\n                top--;a[top]=qwq;\n            }\n            if(gugu[i]==8){\n                x=a[top-1]*a[top];int qwq=x;\n                if(x<0)x=-x;if(x>1000000000){\n                     flag=0;goto out;\n                }\n                top--;\n                a[top]=qwq;\n            }\n            if(gugu[i]==9){\n                x=a[top-1]/a[top];int qwq=x;\n                if(x<0)x=-x;if(x>1000000000){\n                     flag=0;goto out;\n                }\n                top--;a[top]=qwq;\n            }\n            if(gugu[i]==10){\n                x=a[top-1]%a[top];int qwq=x;\n                if(x<0)x=-x;if(x>1000000000){\n                     flag=0;goto out;\n                }\n                top--;a[top]=qwq;\n            }\n        }out://\u66ff\u4ee3break\u7684\u597d\u4e1c\u897f\uff0c\u633a\u5b9e\u7528\n        if(flag)\n        cout<<a[top]<<endl;\n        else cout<<\"ERROR\"<<endl;//\u5c31\u4e0d\u7528printf\u548b\u5730\u54c8\u54c8\u54c8\u54c8\u54c8ovo\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1547990785,
        "uid": 43663,
        "name": "gigo_64",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u8fd8\u662f\u4e00\u9053\u6bd4\u8f83\u7b80\u5355~~\u6bd2\u7624~~\u7684\u9898\uff0c\u5173\u952e\u5728\u4e8e\u7279\u5224~~\u522b\u6253\u9519\u5b57~~\u3002\u6ce8\u91ca\u89c1\u4ee3\u7801\u3002\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cmath> //\u4f7f\u7528abs\nusing namespace std;\nlong long n,zp=0,x;\nlong long z[1000001],a[1000001][2];\nbool PUSH(long long p)//\u538b\u5165\u6808\n{\t\n\tif(abs(p)>1000000000)return false;//\u5224\u65ad\n\tzp+=1;\n\tz[zp]=p;\n\treturn true;\n}\nbool POP()//\u5f39\u51fa\u6808\n{\n\tif(zp<1)return false;//\u540c\u4e0a\n\tzp--;\n\treturn true;\n}\nbool INV()//\u7ffb\u8f6c\n{\n\tif(zp<1)return false;\n\tz[zp]=-z[zp];\n\treturn true;\n}\nbool DUP()//\u538b\u5165\u4e00\u4e2a\u6808\u9876\u5143\u7d20\n{\n\tif(zp<1)return false;\n\tPUSH(z[zp]);\n\treturn true;\n}\nbool SWP()//\u7ffb\u8f6c\n{\n\tif(zp<2)return false;\n\tint t=z[zp];z[zp]=z[zp-1];z[zp-1]=t;\n\treturn true;\n}\nbool ADD()//\u52a0\n{\n\tif(zp<2)return false;\n\tint t=z[zp]+z[zp-1];\n\tPOP();\n\tPOP();\n\tPUSH(t);\n\treturn true;\n}\nbool SUB()//\u51cf\n{\n\tif(zp<2)return false;\n\tint t=z[zp-1]-z[zp];\n\tPOP();\n\tPOP();\n\tPUSH(t);\n\treturn true;\n}\nbool MUL()//\u4e58\n{\n\tif(zp<2)return false;\n\tint t=z[zp]*z[zp-1];\n\tPOP();\n\tPOP();\n\tPUSH(t);\n\treturn true;\n}\nbool DIV()//\u9664\n{\n\tif(zp<2||z[zp]==0)return false;//\u9664\u6cd5\u7279\u5224\n\tint t=z[zp-1]/z[zp];\n\tPOP();\n\tPOP();\n\tPUSH(t);\n\treturn true;\n}\nbool MOD()//\u6c42\u4f59\n{\n\tif(zp<2||z[zp]==0)return false;//\u7279\u5224\n\tint t=z[zp-1]%z[zp];\n\tPOP();\n\tPOP();\n\tPUSH(t);\n\treturn true;\n}\nvoid F(int m)//\u603b\u5904\u7406\u51fd\u6570\n{\t\n\tif(!PUSH(m))cout<<\"ERROR\"<<endl;\n\tint f=true;\n\tfor(int i=1;i<=x;++i)\n\t{\n\t\tswitch(a[i][1])//switch\u5224\u65ad\n\t\t{\n\t\t\tcase 1:{if(!PUSH(a[i][2]))f=false;break;}\n\t\t\tcase 2:{if(!POP())f=false;break;}\n\t\t\tcase 3:{if(!INV())f=false;break;}\n\t\t\tcase 4:{if(!DUP())f=false;break;}\n\t\t\tcase 5:{if(!SWP())f=false;break;}\n\t\t\tcase 6:{if(!ADD())f=false;break;}\n\t\t\tcase 7:{if(!SUB())f=false;break;}\n\t\t\tcase 8:{if(!MUL())f=false;break;}\n\t\t\tcase 9:{if(!DIV())f=false;break;}\n\t\t\tcase 10:{if(!MOD())f=false;break;}\n\t\t}\n\t}\n\tif(zp!=1||f==false)cout<<\"ERROR\"<<endl;\n\telse cout<<z[zp]<<endl;\n\treturn ;\n}\nint main()\n{\t\n\tstring s;\n\twhile(cin>>s&&s!=\"END\")//\u8bfb\u5165\u8fd0\u7b97\u7b26\n\t{\n\t\t\tif(s==\"NUM\"){a[++x][1]=1;cin>>a[x][2];}\n\t\t\tif(s==\"POP\"){a[++x][1]=2;}\n\t\t\tif(s==\"INV\"){a[++x][1]=3;}\n\t\t\tif(s==\"DUP\"){a[++x][1]=4;}\n\t\t\tif(s==\"SWP\"){a[++x][1]=5;}\n\t\t\tif(s==\"ADD\"){a[++x][1]=6;}\n\t\t\tif(s==\"SUB\"){a[++x][1]=7;}\n\t\t\tif(s==\"MUL\"){a[++x][1]=8;}\n\t\t\tif(s==\"DIV\"){a[++x][1]=9;}\n\t\t\tif(s==\"MOD\"){a[++x][1]=10;}\n\n\t}\n\tcin>>n;\n\tfor(int i=1;i<=n;++i)//\u5904\u7406\n\t{\t\t\n\t\tzp=0;\n\t\tint m;\n\t\tcin>>m;\n\t\tF(m);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1547039394,
        "uid": 91918,
        "name": "\u5de8\u578b\u868a\u5b50\u7cbe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u5199\u6a21\u62df\u9898\u6700\u91cd\u8981\u7684\u5c31\u662f\u8981\u7b80\u77ed\uff0c\u5bf9\u4e8e\u8fd9\u9898\u7684\u51e0\u4e2aERROR\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u90fd\u5c01\u88c5\u8d77\u6765\uff1a\n\n1\u3001\u6570\u7684\u7edd\u5bf9\u503c\u5927\u4e8e1000000000\uff0c\u5f04\u6210error1(x)\u89c1\u4e0b\u3002\n\n2\u3001\u6808\u4e3a\u7a7a\u65f6\u8c03\u7528\"POP\"\"INV\"\"DUP\"\u64cd\u4f5c\uff0c\u5f04\u6210error2()\u3002\n\n3\u3001\u6808\u7684\u5927\u5c0f\u5c0f\u4e8e2\u65f6\uff0c\u8c03\u7528\"SWP\"\"ADD\"\"SUB\"\"MUL\"\"DIV\"\"MOD\"\uff0c\u5f04\u6210error3()\u3002\n\n4\u3001\u5176\u5b9e\u8fd8\u6709\u4e2a\u5751\u70b9\uff0c\u67d0\u4f4d\u60f9\u4e0d\u8d77\u7684\u540c\u5b66\u6389\u8fdb\u4e86\u8fd9\u4e2a\u5751\uff0c\u5c31\u662f\u96640\u662f\u8981\u5224\u65ad\uff0c\u8fd9\u91cc\u4e0d\u7528\u5c01\u88c5\uff0c\u53ea\u7528\u5728\"DIV\"\u91cc\u5224\u65ad\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u975e\u5e38\u6109\u5feb\u7684\u6a21\u62df\u4e86\uff0c\u6211\u7528\u7684\u662fSTL\u7684\u6808\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u81ea\u5df1\u7684\u624b\u5199\u6808\uff0c\u4e0d\u8fc7~~\u6211\u61d2~~\u8fd9\u9898\u4e0d\u5361\u65f6\u95f4\uff0cSTL\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\u662f\u771f\u7684\u5f88\u77ed\uff0c\u6253\u8d77\u6765\u4e5f\u5f88\u723d\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define ext() {puts(\"ERROR\");return;}\n#define error1(x) if(abs(x)>1000000000)ext()\n#define error2() if(st.empty())ext()\n#define error3() if(st.size()<2)ext()\n#define get() ll x=st.top();st.pop();ll y=st.top();st.pop();\nusing namespace std;\nstruct node{\n    string s;\n    ll x;\n} f[2100];\nint cnt;\nstring c;\nvoid fun(ll x) {\n    stack<ll>st;\n    error1(x);\n    st.push(x);\n    for(int i=1; i<=cnt; i++){\n    \tif(f[i].s==\"POP\"||f[i].s==\"INV\"||f[i].s==\"DUP\")error2()\n    \tif(f[i].s==\"SWP\"||f[i].s==\"ADD\"||f[i].s==\"SUB\"||f[i].s==\"MUL\"||f[i].s==\"DIV\"||f[i].s==\"MOD\")error3()\n        if(f[i].s==\"NUM\"){\n            error1(f[i].x)\n            st.push(f[i].x);\n        }\n\t\tif(f[i].s==\"POP\"){\n            st.pop();\n        }\n\t\tif(f[i].s==\"INV\"){\n            ll x=st.top();st.pop();\n            st.push(-x);\n        }\n\t\tif(f[i].s==\"DUP\"){\n            st.push(st.top());\n        }\n\t\tif(f[i].s==\"SWP\"){\n            get()\n            st.push(x);\n            st.push(y);\n        }\n\t\tif(f[i].s==\"ADD\"){\n            get()\n            error1(y+x)\n            st.push(x+y);\n        }\n\t\tif(f[i].s==\"SUB\"){\n            get()\n            error1(y-x)\n            st.push(y-x);\n        }\n\t\tif(f[i].s==\"MUL\"){\n            get()\n            error1(y*x)\n            st.push(x*y);\n        }\n\t\tif(f[i].s==\"DIV\"){\n            get()\n            if(x==0)ext();\n            error1(y/x)\n            st.push(y/x);\n        }\n\t\tif(f[i].s==\"MOD\"){\n            get()\n            error1(y%x)\n            st.push(y%x);\n        }\n    }\n    if(st.size()==1)printf(\"%lld\\n\",st.top());\n    else ext();\n}\nll n;\ninline ll read(){\n\tll ret=0,f=1;char c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);ret=(ret<<1)+(ret<<3)+c-'0',c=getchar());\n\treturn ret*f;\n}\nint main() {\n    while(cin>>c) {\n        if(c==\"END\")break;\n        f[++cnt].s=c;\n        if(c==\"NUM\")f[cnt].x=read();\n    }\n    cin>>n;\n    for(int i=1;i<=n;i++)fun(read());\n    return 0;\n}\n```",
        "postTime": 1540963630,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u8fd9\u5176\u5b9e\u662f\u4e00\u9053\u5f88\u6c34\u7684\u9898\u76ee\uff0c\u5c31\u76f4\u63a5\u6839\u636e\u9898\u610f\uff0c\u8fdb\u884c\u6a21\u62df\u5c31\u591f\u4e86\uff0c\u5728\u6211\u7684\u52aa\u529b\u4e0b  \u4ee3\u7801\u7f29\u77ed\u5230\u53ea\u6709100\u884c\u3002\n\nPS\uff1a\u522b\u5fd8\u4e86\u518d\u6bcf\u4e00\u884c\u5f00\u59cb\uff0c\u8bb0\u5f97\u5427\u6808\u6e05\u7a7a\uff01\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstack<long long>q;\nstruct node\n{\n\tint x;\n\tstring s;\n} a[100010];\nint cnt;\nlong long inf=1000000000;\nbool sol(long long x)\n{\n\tint i;\n\tlong long k1,k2;\n\tif(abs(x)>inf) return 0;\n\tq.push(x);\n\tfor(i=1; i<=cnt; i++)\n\t{\n\t\tif(a[i].s==\"NUM\")\n\t\t{\n\t\t\tif(abs(a[i].x)>inf) return 0;\n\t\t\tq.push(a[i].x);\n\t\t}\n\t\telse if(a[i].s==\"POP\")\n\t\t{\n\t\t\tif(q.empty()) return 0;\n\t\t\tq.pop();\n\t\t}\n\t\telse if(a[i].s==\"INV\")\n\t\t{\n\t\t\tif(q.empty()) return 0;\n\t\t\tk1=q.top();\n\t\t\tq.pop();\n\t\t\tq.push(-k1);\n\t\t}\n\t\telse if(a[i].s==\"DUP\")\n\t\t{\n\t\t\tif(q.empty()) return 0;\n\t\t\tq.push(q.top());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(q.size()<2) return 0;\n\t\t\tk1=q.top();\n\t\t\tq.pop();\n\t\t\tk2=q.top();\n\t\t\tq.pop();\n\t\t\tif(a[i].s==\"SWP\")\n\t\t\t{\n\t\t\t\tq.push(k1);\n\t\t\t\tq.push(k2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(a[i].s==\"ADD\")\n\t\t\t\t\tk1=k1+k2;\n\t\t\t\telse if(a[i].s==\"SUB\")\n\t\t\t\t\tk1=k2-k1;\n\t\t\t\telse if(a[i].s==\"MUL\")\n\t\t\t\t\tk1=k1*k2;\n\t\t\t\telse if(a[i].s==\"DIV\")\n\t\t\t\t{\n\t\t\t\t\tif(k1==0) return 0;\n\t\t\t\t\tk1=k2/k1;\n\t\t\t\t}\n\t\t\t\telse if(a[i].s==\"MOD\")\n\t\t\t\t\tk1=k2%k1;\n\t\t\t\tif(abs(k1)>inf) return 0;\n\t\t\t\tq.push(k1);\n\t\t\t}\n\t\t}\n\t}\n\tif(q.size()==1) return 1;\n\telse return 0;\n}\nint main()\n{\n\tstring s;\n\tint i,n;\n\tcnt=0;\n\tlong long x;\n\twhile(1)\n\t{\n\t\tcin>>s;\n\t\tif(s==\"END\") break;\n\t\tif(s==\"NUM\") cin>>x;\n\t\tcnt++;\n\t\ta[cnt].x=x;\n\t\ta[cnt].s=s;\n\t}\n\tscanf(\"%d\",&n);\n\twhile(n--)\n\t{\n\t\tcin>>x;\n\t\twhile(!q.empty()) q.pop(); \n\t\tif(!sol(x)) printf(\"ERROR\\n\");\n\t\telse printf(\"%lld\\n\",q.top());\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1533122711,
        "uid": 55521,
        "name": "WLHW",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "~~\u8fd9\u9898\u597d\u54c7\uff0c\u5fc5\u987b\u53d1\u6ce2\u9898\u89e3~~\n\n-----\n\n**\u9898\u76ee**\n\n[luogu P2186 \u5c0fZ\u7684\u6808\u51fd\u6570](https://www.luogu.org/problemnew/show/P2186)\n\n\u7ef4\u62a4\u6808\u7684$11$\u4e2a\u64cd\u4f5c\uff0c\u5e76\u63d0\u4f9b\u62a5\u9519\u529f\u80fd\n\n----\n\n**\u6808\u662f\u4ec0\u4e48\uff1f**\n\n\u867d\u7136\u611f\u89c9\u6ca1\u4ec0\u4e48\u5fc5\u8981\uff0c\u4f46\u8fd8\u662f\u63d0\u4e00\u4e0b\u5427$qwq$\n\n**\u6808**\u662f\u4e00\u79cdLIFO(Last In First Out)\u7684\u57fa\u7840\u6570\u636e\u7ed3\u6784\uff0c\u5176\u652f\u6301\u7684\u57fa\u7840\u64cd\u4f5c\u6709\uff1a\n\n1. $push$\uff0c\u5165\u6808\uff0c\u653e\u5165\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u6570\u5c06\u4f1a\u653e\u5728\u6808\u9876\u7684\u4e0a\u65b9\n2. $pop$\uff0c\u51fa\u6808\uff0c\u5c06\u6808\u9876\u7684\u6570\u62ff\u8d70\n3. $top$\uff0c\u8fd4\u56de\u6808\u9876\u5143\u7d20\n4. $empty$\uff0c\u8be2\u95ee\u6808\u662f\u5426\u4e3a\u7a7a\n\n\u4e3e\u4f8b\uff1a\n\n\u521d\u59cb\u72b6\u6001\uff1a5 2 3\n1. $push(1):$ 5 2 3 1\n2. $pop():$ 5 2 3\n3. $pop():$ 5 2\n\n\u5176\u57fa\u7840\u5b9e\u73b0\uff1a\n```cpp\nint stack[MAXN], l = 0;\nvoid push(int x){stack[++l] = x;}\nvoid pop(){l--;}\nint top(){return stack[l];}\nbool empty(){return l;}\n```\n\n----\n\n**\u601d\u8def**\n\n\u6574\u7406\u540e\uff0c\u8fd9\u9898\u7684\u9519\u8bef\u603b\u5171\u53ea\u4f1a\u6709\u8fd9$5$\u79cd\uff1a\n\n1. \u64cd\u4f5c\u6570$x$\u6ee1\u8db3$|x|>1000000000$\uff0c\u4e0b\u9762\u7b80\u79f0$out(x)$\n2. \u5f53\u6267\u884c\u53ea$pop$\u4e00\u4e2a\u7684\u64cd\u4f5c\u65f6$size=0$\uff0c\u4e0b\u9762\u7b80\u79f0$checklen0$\n3. \u5f53\u6267\u884c\u53ea$pop$\u4e24\u4e2a\u7684\u64cd\u4f5c\u65f6$size<=1$\uff0c\u4e0b\u9762\u7b80\u79f0$checklen1$\n4. \u5bf9\u4e8e$DIV$\u548c$MOD$\u4e24\u79cd\u64cd\u4f5c\uff0c\u8981\u5224\u65ad\u9664\u4ee5$0$\u7684\u60c5\u51b5\uff0c\u4e0b\u9762\u7b80\u79f0$div0$\n5. \u64cd\u4f5c\u5b8c\u540e\uff0c$size!=1$\uff0c\u7b80\u79f0$checklen1$\n\n\u6211\u4eec\u53ef\u4ee5\u5c06$11$\u4e2d\u64cd\u4f5c\u5206\u7c7b\uff0c\u52a0\u4ee5\u5206\u6790\uff0c\u66f4\u52a0\u6e05\u695a\n\n$(pop=0)$\n\n- NUM **\u53ea\u9700\u8981\u67e5\u9519**\uff1a$out(x)$\n\n$(pop=1)$\n\n- POP, INV, DUP **\u53ea\u9700\u8981\u67e5\u9519**\uff1a$checklen0$\n\n$(pop=2)$\n\n|  | SWP | ADD | SUB | MUL | DIV | MOD |\n| -----------: | -----------: | -----------: | -----------: | -----------: | -----------: | -----------: |\n| $checklen1$ | \u221a | \u221a | \u221a | \u221a | \u221a | \u221a |\n| $out(x)$ |  | \u221a | \u221a | \u221a | \u221a | \u221a |\n| $div0$ |  |  |  |  | \u221a | \u221a |\n\n----\n\n**\u4ee3\u7801**\n\n~~[0MS / 1.7MB](https://www.luogu.org/record/show?rid=7111667)~~\n\n```cpp\n#include <cstdio>\n#include <cstring>\n\nconst int MAXN = 2005;\nlong long stack[MAXN], p1, p2;\nint l, n, m;\nbool flag = true; //\u662f\u5426\u5408\u6cd5\uff0c\u7528\u6765\u96c6\u4e2d\u5904\u7406printf(\"ERROR\\n\");\nstruct step\n{\n\tchar data[4];\n\tint num;\n}S[MAXN]; //\u7528\u7ed3\u6784\u4f53\u5b58\u50a8\u6bcf\u4e00\u6b65\u64cd\u4f5c\n\nvoid Input(); //\u8f93\u5165\nvoid Solve(long long x); //\u6bcf\u4e00\u6b21\u7684\u5904\u7406\nbool OutNum(long long x); //\u8f85\u52a9\u51fd\u6570\uff1aout(x) \u67e5\u8be2|x|>1000000000\n\nint main()\n{\n\tInput();\n\tscanf(\"%d\", &m);\n\tint i;\n\tlong long t;\n\tfor (i = 1; i <= m; i++)\n\t{\n\t\tscanf(\"%lld\", &t);\n\t\tSolve(t);\n\t}\n\treturn 0;\n}\n\nvoid Input()\n{\n\tint i = 1;\n\tscanf(\"%s\", S[i].data);\n\twhile (strcmp(S[i].data, \"END\") != 0)\n\t{\n\t\tif (strcmp(S[i].data, \"NUM\") == 0) scanf(\"%d\", &S[i].num);\n\t\telse S[i].num = -1;\n\t\ti++;\n\t\tscanf(\"%s\", S[i].data);\n\t}\n\tn = i - 1;\n}\n\nvoid Solve(long long x)\n{\n\tint i = 1;\n\tlong long t;\n\tl = 0, flag = true;\n\tif (OutNum(x))\n\t{\n\t\tprintf(\"ERROR\\n\");\n\t\treturn;\n\t} //\u4e00\u5f00\u59cb\u5c31\u5224\u65ad\u4e00\u4e0b\uff0c\u4ee5\u514d\u6570\u636e\u6316\u5751qwq\n\tstack[++l] = x;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tif (strcmp(S[i].data, \"NUM\") == 0) //\u5c06NUM\u64cd\u4f5c\u5355\u72ec\u5904\u7406\n\t\t{\n\t\t\tif (OutNum(S[i].num)) flag = false;\n\t\t\telse stack[++l] = S[i].num;\n\t\t}\n\t\telse if ((strcmp(S[i].data, \"POP\") == 0) || (strcmp(S[i].data, \"INV\") == 0) || (strcmp(S[i].data, \"DUP\") == 0))\n\t\t{ //(pop=1)\u7684\u64cd\u4f5c\n\t\t\tif (l == 0) flag = false; //checklen0\n\t\t\telse\n\t\t\t{\n\t\t\t\tt = stack[l];\n\t\t\t\tif (strcmp(S[i].data, \"POP\") == 0) l--;\n\t\t\t\telse if (strcmp(S[i].data, \"INV\") == 0) stack[l] = -t;\n\t\t\t\telse stack[++l] = t;\n                //\u5bf9\u6bcf\u79cd\u64cd\u4f5c\u5206\u522b\u5bf9\u5f85\uff08\u6211\u4f1a\u544a\u8bc9\u4f60\u6211\u8fd9\u91ccstrcmp\u540e\u9762\u6ca1\u5199==0\u8c03\u4e86\u534a\u4e2a\u5c0f\u65f6\uff1f\uff09\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{ //(pop=2)\u7684\u64cd\u4f5c\n\t\t\tif (l <= 1) flag = false; //checklen1\n\t\t\tp1 = stack[l], p2 = stack[l - 1], l -= 2; //\u5c06\u6808\u9876\u4e24\u4e2a\u6570\u53d6\u51fa\n\t\t\tif ((strcmp(S[i].data, \"MOD\") == 0 || strcmp(S[i].data, \"DIV\") == 0) && p1 == 0) flag = false; //div0\n\t\t\telse if (strcmp(S[i].data, \"SWP\") == 0) stack[l + 1] = p1, stack[l + 2] = p2, l += 2; //SWP\u76f4\u63a5\u5728\u8fd9\u91cc\u5904\u7406\u6389\n\t\t\telse if (strcmp(S[i].data, \"ADD\") == 0) t = p2 + p1;\n\t\t\telse if (strcmp(S[i].data, \"SUB\") == 0) t = p2 - p1;\n\t\t\telse if (strcmp(S[i].data, \"MUL\") == 0) t = p2 * p1;\n\t\t\telse if (strcmp(S[i].data, \"DIV\") == 0) t = p2 / p1;\n\t\t\telse if (strcmp(S[i].data, \"MOD\") == 0) t = p2 % p1;\n\t\t\t\n\t\t\tif (strcmp(S[i].data, \"SWP\") != 0)\n\t\t\t{\n\t\t\t\tif (OutNum(t)) flag = false; //out(x)\n\t\t\t\telse stack[++l] = t; //\u653e\u5165\u5904\u7406\u597d\u7684\u6570\n\t\t\t}\n\t\t}\n\t\tif (!flag)\n\t\t{\n\t\t\tprintf(\"ERROR\\n\");\n\t\t\treturn; //\u901a\u8fc7flag\u4fe1\u53f7\u706f\u96c6\u4e2d\u5904\u7406\n\t\t}\n\t}\n\tif (l != 1) printf(\"ERROR\\n\"); //checklen1\n\telse printf(\"%d\\n\", stack[1]);\n}\n\nbool OutNum(long long x)\n{\n\treturn x < -1000000000 || x > 1000000000;\n} //\u8f85\u52a9\u51fd\u6570\n```\n\n--------\n",
        "postTime": 1525349979,
        "uid": 62308,
        "name": "Mr_Wu",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u672c\u849f\u84bb\u7b2c\u4e00\u9053\u5207\u6389\u7684\u63d0\u9ad8+/\u7701\u9009-\u7684\u9898\u76ee\uff0c\u503c\u5f97\u7eaa\u5ff5\u2026\u2026\n\n\u524d\u524d\u540e\u540e\u63d0\u4ea4\u4e8613\u6b21\uff0c\u679c\u7136\u6211\u8fd8\u662f\u592a\u84bb\u4e86\u2026\u2026\n\n\u770b\u5230\u6ca1\u6709P\u9898\u89e3\u5c31\u6765\u53d1\u4e00\u7bc7\u2026\u2026\n\n\u4e00\u9053~~zz\u5de5\u4e1a\u7801\u519c~~\u6a21\u62df\u9898\uff0c\u5b9e\u73b0\u7684\u5176\u5b9e\u53ea\u662f\u6808\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u4f46\u662f\u5224\u65ad\u5408\u6cd5\u771f\u7684\u5f88\u6076\u5fc3\u2026\u2026\n\n\u4e3b\u8981\u5224\u65ad\u6709\u8fd9\u51e0\u79cd\uff1a\n\n1.\u9000\u6808\u64cd\u4f5c\u65f6\u6808\u4e3a\u7a7a\u3002\n\n2.\u4e8c\u5143\u64cd\u4f5c\u65f6\u6808\u5185\u4e0d\u8db3\u4e8c\u5143\u3002\n\n3.\u4e00\u5143\u64cd\u4f5c\u65f6\u6808\u5185\u4e0d\u8db3\u4e00\u5143\u3002\n\n4.\u8fdb\u884c\u5165\u6808\u64cd\u4f5c\u65f6\u5165\u6808\u7684\u6570\u5927\u4e8e1e9\u3002\n\n5.\u9664\u4ee50\u6216\u6a210\n\n6.\u6240\u6709\u64cd\u4f5c\u90fd\u8fd0\u884c\u5b8c\u65f6\uff0c\u6808\u5185\u5269\u4f59\u5143\u7d20\u6570\u91cf\u5927\u4e8e\u4e00\u3002\n\n\u4e0b\u9762\u5c31\u8d34\u4ee3\u7801\u4e86\uff0c\u522b\u6015\uff0c\u4e0d\u8d85\u8fc7200\u884c\u7684\uff01\n\n~~\u5927\u90e8\u5206\u51fd\u6570\u4ee3\u7801\u662f\u53ef\u4ee5\u53cd\u590d\u5229\u7528\u7684~~\n\n```pascal\ntype Stack=record\n         x:array[1..5000]of int64;\n         top:int64;\nend;//P\u515a\u9700\u8981\u624b\u5199\u4e00\u4e2a\u6808\nvar p:Stack;\ns,s1:string;l,x,n,i:longint;\nm:array[1..5000]of string;q:array[1..5000]of int64;flag:boolean;\n\nprocedure print(k:Stack);\nbegin\n    if (k.top=2) then writeln(k.x[k.top-1])\n    else writeln('ERROR');//\u5143\u7d20\u6570\u91cf\u5224\u5b9a\uff086\uff09\nend;\n\nfunction push(var k:Stack;num:int64):boolean;\nbegin\n    if(abs(num)>1000000000) then exit(false);\n    k.x[k.top]:=num;\n    inc(k.top);\n    exit(true);\nend;\n\nfunction pop(var k:Stack):boolean;\nbegin\n    if (k.top=1) then exit(false);//\u9000\u6808\u5224\u5b9a(1)\n    dec(k.top);\n    exit(true);\nend;\n\nfunction inv(var k:Stack):boolean;\nbegin\n    if (k.top=1) then exit(false);\n    k.x[k.top-1]:=-k.x[k.top-1];\n    exit(true);\nend;\n\nfunction dup(var k:Stack):boolean;\nbegin\n    if (k.top<2) then exit(false);\n    k.x[k.top]:=k.x[k.top-1];\n    inc(k.top);\n    exit(true);\nend;\n\nfunction swp(var k:Stack):boolean;\nvar t1,t2:int64;\nbegin\n    if(k.top<=2) then exit(false);\n    t1:=k.x[k.top-1];\n    t2:=k.x[k.top-2];\n    pop(k);pop(k);\n    push(k,t1);push(k,t2);\n    exit(true);\nend;\n\nfunction add(var k:Stack):boolean;\nvar t:int64;\nbegin\n    if (k.top<=2) then exit(false);\n    t:=k.x[k.top-1]+k.x[k.top-2];\n    if (abs(t)>1000000000) then exit(false);\n    pop(k);pop(k);\n    k.x[k.top]:=t;\n    inc(k.top);\n    exit(true);\nend;\n\nfunction sub(var k:Stack):boolean;\nvar t:int64;\nbegin\n    if (k.top<=2) then exit(false);\n    t:=k.x[k.top-2]-k.x[k.top-1];\n    if (abs(t)>1000000000) then exit(false);\n    pop(k);pop(k);\n    k.x[k.top]:=t;\n    inc(k.top);\n    exit(true);\nend;\n\nfunction mul(var k:Stack):boolean;\nvar t:int64;\nbegin\n    if (k.top<=2) then exit(false);\n    t:=k.x[k.top-2]*k.x[k.top-1];\n    if (abs(t)>1000000000) then exit(false);\n    pop(k);pop(k);\n    k.x[k.top]:=t;\n    inc(k.top);\n    exit(true);\nend;\n\n\nfunction chu(var k:Stack):boolean;\nvar t:int64;\nbegin\n    if (k.top<=2) then exit(false);\n    if (k.x[k.top-1]=0) then exit(false);\n    t:=k.x[k.top-2] div k.x[k.top-1];\n    if (abs(t)>1000000000) then exit(false);\n    pop(k);pop(k);\n    k.x[k.top]:=t;\n    inc(k.top);\n    exit(true);\nend;\n\nfunction mu(var k:Stack):boolean;\nvar t:int64;\nbegin\n    if (k.top<=2) then exit(false);\n    if (k.x[k.top-1]=0) then exit(false);\n    t:=k.x[k.top-2] mod k.x[k.top-1];\n    if (abs(t)>1000000000) then exit(false);\n    pop(k);pop(k);\n    k.x[k.top]:=t;\n    inc(k.top);\n    exit(true);\nend;\nbegin\n    i:=0;\n    repeat\n        inc(i);\n        readln(m[i]);\n    until m[i]='END';\n    readln(n);\n    for i:=1 to n do readln(q[i]);\n    for l:=1 to n do\n    begin\n        flag:=true;\n        p.top:=2;\n        p.x[p.top-1]:=q[l];\n        s:=m[1];\n        i:=1;\n        while(s<>'END') do\n        begin\n            s1:=copy(s,1,3);\n            delete(s,1,4);\n            if(s1='NUM') then\n            begin\n                val(s,x);\n                if not push(p,x) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            if(s1='POP') then\n            begin\n                if not pop(p) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            if(s1='INV') then\n            begin\n                if not inv(p) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            if(s1='DUP') then\n            begin\n                if not dup(p) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            if(s1='ADD') then\n            begin\n                if not add(p) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            if(s1='SUB') then\n            begin\n                if not sub(p) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            if(s1='MUL') then\n            begin\n                if not mul(p) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            if(s1='DIV') then\n            begin\n                if not chu(p) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            if(s1='MOD') then\n            begin\n                if not mu(p) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            if(s1='SWP') then\n            begin\n                if not swp(p) then begin writeln('ERROR');flag:=false;break; end;\n            end;\n            inc(i);\n            s:=m[i];\n        end;\n        if (flag) then print(p);\n    end;\nend.\n```\n\u5199\u6a21\u62df\u624d\u662f\u771f\u6b63\u7684\u953b\u70bc\u5fc3\u6027\u554a\u2026\u2026\n",
        "postTime": 1514020508,
        "uid": 41953,
        "name": "\u5188\u5d0e\u68a6\u7f8e",
        "ccfLevel": 0,
        "title": "P2186 \u5c0fZ\u7684\u6808\u51fd\u6570"
    },
    {
        "content": "\u540c\u697c\u4e0b\u968f\u673a\u8df3\u9898233~\n\n\u60f3\u53d1\u8fd9\u4e2a\u9898\u89e3\u7684\u6700\u4e3b\u8981\u7684\u539f\u56e0\u662f\u697c\u4e0b\u7684\u51e0\u7bc7\u9898\u89e3\u6216\u591a\u6216\u5c11\u90fd\u53ef\u4ee5\u88ab\u4e00\u4e9b\u6570\u636e\u5361\u6389\uff08\u6211\u5bf9\u62cd\u65f6\u53d1\u73b0\u7684\uff09\uff0c\u4f46\u662f\u9898\u76ee\u6570\u636e\u4e0d\u5f3a\uff0c\u6ca1\u6709\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002\n\n\u4e3b\u8981\u5224ERROR\u601d\u60f3\uff1a1\u3001\u4efb\u4f55\u6570\u5165\u6808\u4e4b\u524d\u68c0\u67e5\u7edd\u5bf9\u503c\u5927\u5c0f\uff1b2\u3001\u4efb\u4f55\u5355\u5143\u64cd\u4f5c\uff08DUP\u7b49\uff09\u524d\u68c0\u67e5\u6808\u662f\u5426\u4e3a\u7a7a\uff1b3\u3001\u4efb\u4f55\u53cc\u5143\u64cd\u4f5c\uff08ADD\u7b49\uff09\u4e4b\u524d\u68c0\u67e5\u6808\u4e2d\u5143\u7d20\u662f\u5426\u6709\u4e24\u4e2a\uff1b4\u3001\u64cd\u4f5c\u7ed3\u675f\u540e\u68c0\u67e5\u6808\u4e2d\u5143\u7d20\u6570\u91cf\u3002\n\n\u4e3a\u4e86\u653e\u7f6eint\\*int\u7684\u65f6\u5019\u7206\u6389int,\u6545\u6240\u6709\u7684\u53d8\u91cf\u90fd\u5f00\u4e86long long\u3002\n\n\u6240\u6709\u7684\u51fd\u6570\u5206\u5f00\u5199\uff0c\u4f46\u662f\u7528\u4e00\u4e2awork\u51fd\u6570\u7edf\u4e00\u5904\u7406\uff0c\u6240\u6709\u51fd\u6570\u7c7b\u578b\u5747\u4e3abool\uff0c\u4e00\u65e6\u4e0d\u5408\u6cd5\u76f4\u63a5\u8fd4\u56defalse\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define MAXN 2000\n#define INF 1000000000\n#define ll long long\nusing namespace std;\nll stack[MAXN+10];\nstring cmd[MAXN+10];\nll Num[MAXN+10];\nint top=0,n,cnt=1;\nll x;\nvoid push(ll x){\n    top++;\n    stack[top]=x;\n}\nbool POP(){\n    if (top<1) return false;\n    top--;\n    return 1;\n}\nbool NUM(ll x){\n    if (abs(x)>INF) return false;\n    push(x);\n    return 1;\n}\nbool INV(){\n    ll tt=-stack[top];\n    POP();\n    push(tt);\n    return 1;\n}\nbool DUP(){\n    if (top<1) return false;\n    push(stack[top]);\n    return 1;\n}\nbool SWP(){\n    if (top<2) return false;\n    swap(stack[top],stack[top-1]);\n    return 1;\n}\nbool ADD(){\n    if (top<2) return false;\n    ll tt=stack[top]+stack[top-1];\n    if (abs(tt)>INF) return false;\n    POP();POP();\n    push(tt);\n    return 1;\n}\nbool SUB(){\n    if (top<2) return false;\n    ll tt=stack[top-1]-stack[top];\n    if (abs(tt)>INF) return false;\n    POP();POP();\n    push(tt);\n    return 1;\n}\nbool MUL(){\n    if (top<2) return false;\n    ll tt=stack[top-1]*stack[top];\n    if (abs(tt)>INF) return false;\n    POP();POP();\n    push(tt);\n    return 1;\n}\nbool DIV(){\n    if (top<2) return false;\n    if (stack[top]==0) return false;\n    ll tt=stack[top-1]/stack[top];\n    POP();POP();\n    push(tt);\n    return 1;\n}\nbool MOD(){\n    if (top<2) return false;\n    if (stack[top]==0) return false;\n    ll tt=stack[top-1] %stack[top];\n    POP();POP();\n    push(tt);\n    return 1;\n}\nbool work(string x,int cnt){ //\u7edf\u4e00\u5904\u7406\u6240\u6709\u51fd\u6570\n    if (x==\"NUM\") return NUM(Num[cnt]);\n    if (x==\"POP\") return POP();\n    if (x==\"INV\") return INV();\n    if (x==\"DUP\") return DUP();\n    if (x==\"SWP\") return SWP();\n    if (x==\"ADD\") return ADD();\n    if (x==\"SUB\") return SUB();\n    if (x==\"MUL\") return MUL();\n    if (x==\"DIV\") return DIV();\n    if (x==\"MOD\") return MOD();\n}\nint main(){\n    //freopen(\"2186.in\",\"r\",stdin);\n    //freopen(\"2186.out\",\"w\",stdout);\n    cin>>cmd[1];\n    while (cmd[cnt]!=\"END\"){\n        if (cmd[cnt]==\"NUM\") cin>>Num[cnt]; //\u5bf9NUM\u64cd\u4f5c\u7279\u522b\u8bfb\u5165\u4e00\u4e2a\u503c\n        cnt++;\n        cin>>cmd[cnt];\n    }\n    cin>>n;\n    for (int i=1;i<=n;i++){\n        top=0;\n        cin>>x;\n        if (abs(x)>INF){\n            cout<<\"ERROR\"<<endl;\n            continue;\n        }\n        push(x);\n        for (int j=1;j<=cnt;j++){\n            if (cnt==j){\n                if (top!=1) cout<<\"ERROR\"<<endl; else\n                cout<<stack[top]<<endl;\n                break;\n            }\n            if (!work(cmd[j],j)) {\n                cout<<\"ERROR\"<<endl;\n                break;\n            }\n        }\n    }\n}\n```",
        "postTime": 1508659225,
        "uid": 8876,
        "name": "hibiki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u9898\u76ee\u8ba9\u6211\u89c1\u8bc6\u5230\u4e86\u4ec0\u4e48\u53eb\u505a\u5927\u6a21\u62df\u9898\uff0c\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\u5f88\u591a\u3002\n\n\u4f46\u65e0\u975e\u5c31\u4e24\u4e2a\n\n\u6808\u603b\u7684\u6570\u8d85\u8fc71000000000\n\n\u6808\u4e3a\u7a7a\uff0c\u4f46\u662f\u8fd8\u8981\u8fdb\u884c\u53d6\u51fa\u64cd\u4f5c\u3002\n\n\u5b9e\u73b0\u6211\u5199\u70c2\u4e86\uff0c260\u591a\u884c\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\nstruct node{\n    long long num;\n    string Code;\n}Run[2005];\nstack<long long>st;\nint tot,n;\nbool flag;\nbool made;\n\n\ninline bool Can(){\n    if(st.empty()) return false;\n    else return true;\n}\n\ninline void PrintError(){\n    cout<<\"ERROR\"<<endl;\n    made=1;\n    return;\n}\n\nvoid NUM(long long x){\n    st.push(x);\n}\n\nvoid INV(){\n    if(Can()){\n        long long x = st.top();\n        st.pop();\n        st.push(-x);\n    }\n    else{\n        PrintError();\n    }\n}\n\nvoid POP(){\n    if( Can() ) st.pop();\n    else PrintError();\n}\n\nvoid DUP(){\n    if( Can() ){\n        long long x = st.top();\n        st.push(x);\n    }\n    else PrintError();\n}\n\nvoid ADD(){\n    if( Can() ){\n        //cout<<\"!!!!!\"<<st.size()<<endl;\n        long long x = st.top();\n        st.pop();\n        if( Can() ){\n            //cout<<st.size()<<endl;\n            long long y = st.top();\n            long long tot = x+y;\n            st.pop();\n            if(abs(tot)>1000000000) {\n            //cout<<\"Fuck\"<<endl;\n            PrintError();\n            return;\n            }\n            st.push(tot);\n\n        }\n        else PrintError();\n    }\n    else PrintError();\n}\n\nvoid MUL(){\n    if( Can() ){\n        long long x = st.top();\n        st.pop();\n        if( Can() ){\n            long long y = st.top();\n            long long tot = x*y;\n            st.pop();\n            if(abs(tot)>1000000000) {\n            PrintError();\n            return;\n            }\n            st.push(tot);\n        }\n        else PrintError();\n    }\n    else PrintError();\n}\n\nvoid DIV(){\n    if( Can() ){\n        long long x = st.top();\n        if(x==0){\n            PrintError();\n            return;\n        }\n        st.pop();\n        if( Can() ){\n            long long y = st.top();\n            long long tot = y/x;\n            st.pop();\n            if(abs(tot)>1000000000) {\n            PrintError();\n            return;\n            }\n            st.push(tot);\n        }\n        else PrintError();\n    }\n    else PrintError();\n}\n\nvoid MOD(){\n    if( Can() ){\n        long long x = st.top();\n        \n        if(x==0){\n            PrintError();\n            return;\n        }\n        \n        st.pop();\n        if( Can() ){\n            //cout<<st.size()<<\" \"<<\"!!!!\"<<endl;\n            long long y = st.top();\n            long long tot = y%x;\n            //cout<<tot<<\" \"<<\"!!!!\"<<endl;\n            st.pop();\n            if(abs(tot)>1000000000) {\n            PrintError();\n            return;\n            }\n            st.push(tot);\n        }\n        else PrintError();\n    }\n    else PrintError();\n}\n\nvoid SUB(){\n    if( Can() ){\n        long long x = st.top();\n        st.pop();\n        if( Can() ){\n            long long y = st.top();\n            long long tot = y-x;\n            st.pop();\n            if(abs(tot)>1000000000) {\n            PrintError();\n            return;\n            }\n            st.push(tot);\n        }\n        else PrintError();\n    }\n    else PrintError();    \n}\n\nvoid SWP(){\n    if( Can() ){\n        long long x = st.top();\n        st.pop();\n        if( Can() ){\n            long long y = st.top();\n            st.pop();\n            st.push(x);\n            st.push(y);\n        }\n        else PrintError();\n    }\n    else PrintError();\n}\n\nvoid run(){\n    for(int i=1;i<=tot;i++){\n        //cout<<Run[50].Code<<endl;\n        if(Run[i].Code==\"NUM\"){\n            NUM(Run[i].num);\n        }\n        else if(Run[i].Code==\"POP\"){\n            POP();\n        }\n        else if(Run[i].Code==\"INV\"){\n            INV();\n        }\n        else if(Run[i].Code==\"DUP\"){\n            DUP();\n        }\n        else if(Run[i].Code==\"SWP\"){\n            SWP();\n        }\n        else if(Run[i].Code==\"ADD\"){\n            ADD();\n        }\n        else if(Run[i].Code==\"SUB\"){\n            SUB();    \n        }\n        else if(Run[i].Code==\"MUL\"){\n            MUL();\n        }\n        else if(Run[i].Code==\"MOD\"){\n            MOD();\n        }\n        else if(Run[i].Code==\"DIV\"){\n            DIV();\n        }\n        if(made==1) return;\n    }\n    //cout<<st.size()<<\"!!!!!\"<<endl;\n    \n    if(st.size()==1){\n        //cout<<\"FFFFFFFFFFFFFF\"<<endl;\n        cout<<st.top()<<endl;\n    }\n    else PrintError();\n}\n\nint main(){\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n    string Start;\n    while(cin>>Start){\n        if(Start==\"END\") break;\n        \n        if(Start==\"NUM\"){\n            long long fuck;\n            cin>>fuck;\n            if(abs(fuck)>1000000000) flag=1;\n            if(!flag) Run[++tot].num = fuck;\n            Run[tot].Code = Start;\n        }\n        else{\n            Run[++tot].Code= Start;\n        }\n    }\n    //cout<<Run[51].Code<<\"!!!!\"<<endl;\n    cin>>n;\n    while(n--){\n        made=0;\n        while(!st.empty()) st.pop();\n        long long x;\n        cin>>x;\n        if(abs(x)>1000000000){\n            PrintError();\n        }\n        else {\n            //cout<<st.size()<<\"!!!!\"<<endl;\n            st.push(x);\n            run();\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1503219102,
        "uid": 22552,
        "name": "LYFer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u7ecf\u672c\u4eba\u6d4b\u8bd5\uff0c\u5efa\u8bae\u4fee\u6539\u90e8\u5206\u6570\u636e\uff0c\u5426\u5219\u4f1a\u4f7f\u5f97\u4e0d\u7b26\u5408\u6807\u51c6\u7684\u7a0b\u5e8fAC\u3002\n\n\u5982\u539f\u9898\u76ee\u8981\u6c42\uff1a\u7edd\u5bf9\u503c<100000000\u7136\u800c\u4e4b\u524d\u7684\u9898\u89e3\u4ee3\u7801\u5e76\u672a\u786e\u8ba4\u7edd\u5bf9\u503c\u60c5\u51b5\u3002\n\n\u7b2c\u4e8c\uff0c\u539f\u9898\u76ee\u7684\u4e3b\u8981\u96be\u5ea6\u4e0d\u5728\u4e8e\u6808\u64cd\u4f5c\uff0c\u800c\u662f\u5728\u4e8e\u4e0d\u5408\u6cd5\u72b6\u6001\u7684\u5224\u65ad\u3002\n\n\u5982\uff1a\u7edd\u5bf9\u503c\u60c5\u51b5\uff0c\u6808\u7a7a\u60c5\u51b5\uff0c\u9664\u96f6\u60c5\u51b5\u3002\u80fd\u641e\u6e05\u695a\u4f55\u65f6\u5224\u65ad\u662f\u96be\u70b9\u3002\n\n\u9898\u89e3\u8f83\u957f\uff0c\u6211\u6a21\u5757\u5316\u7684\u7f16\u7a0b\uff0c\u5404\u4f4d\u53ef\u4ee5\u9009\u53d6\u9700\u8981\u7684\u5730\u65b9\u3002\n\n# \u5224\u65ad\u6a21\u5757\n\n## \u6cd5\u5219Law\n\n\u4ee5\u4e0b\u7684\u4e09\u4e2alaw\u5206\u522b\u5224\u65ad\u5927\u5c0f\uff0c\u6808\u5185\u7a0b\u5ea6\uff08n\u8868\u793a\u9700\u8981\u7684\u6570\u76ee\uff0c\u82e5\u5c11\u4e8e\u6beb\u65e0\u7591\u95ee\u4f1a\u62a5\u9519\uff0c\u8fd4\u56de\u5047\u3002\uff09\n\n\u5f53\u7136\u8fd8\u6709\u9664\u96f6\u3002\n\nSizelaw\u5728\u5148\u524d\u7684\u67d0\u4e2a\u9898\u89e3\u4e2d\u6ca1\u6709\u7ecf\u5e38\u5224\u65ad\uff0c\u6211\u5bf9\u62cd\u7684\u65f6\u5019\u6807\u89e3\u603b\u662f\u5d29\u6e83\u3002\u3002\u5f53\u7136\u5982\u679c\u4f60\u8981A\u9898\u5728\u6539\u6570\u636e\u524d\u5e76\u4e0d\u9700\u8981\uff0c\u4f46\u662f\u5728\u4e0b\u8fd8\u662f\u5efa\u8bae\u7a33\u59a5\u3002\u56e0\u4e3a\u9898\u76ee\u5df2\u7ecf\u8bf4\u660e\u201c\u53ef\u80fd\u4e0d\u5408\u6cd5\u201d\u3002\n\n```cpp\nbool Biglaw(int n)                \n{\n    if(n>1000000000)\n      return false;\n    return true;\n}\nbool Sizelaw(int n)\n{\n    if(s.size()<n)\n      return false;\n    return true;\n}\nbool Divlaw(int a,int b)\n{\n    if(b==0)\n      return false;\n    return true;\n}\n```\n# \u6808\u5904\u7406\u6a21\u5757\n\u5176\u4ed6\u5904\u7406\u4e0d\u8868\uff0c\u53c2\u770b\u5c3e\u90e8\u4ee3\u7801\u3002\u91cd\u70b9\u662f\u4ee5\u4e0b\u8fd9\u4e2a\uff1a\n\n## SWP\u64cd\u4f5c\u3002\u8fd9\u4e2a\u6d89\u53ca\u4e00\u4e2a\u70b9\uff0c\u8981\u7262\u8bb0\u6808\u7684\u6027\u8d28\uff08\u6211\u548c\u67d0\u5927\u795e\u5747WA\u8fd9\u70b9\uff09\n\n\u5982\u679c\u4f60\u8981\u4ea4\u6362\u6808\u9876\u4e24\u4e2a\u5143\u7d20\u987a\u5e8f\uff08\u5f53\u7136\u6211\u4eec\u5df2\u7ecf\u7528law\u5224\u65ad\u4e86\u6808\u5185\u81f3\u5c11\u4e24\u4e2a\u5143\u7d20\uff09\n\n\u6211\u4eec\u5f39\u51fak1,k2\u4e24\u4e2a\u5143\u7d20\uff0c\u5e94\u8be5\u6309\u4ec0\u4e48\u987a\u5e8f\u63a8\u56de\u5462\uff1f\u60ef\u6027\u601d\u7ef4\u5f53\u7136\u662fk2,k1\u3002\u4f46\u662f\u6808\u662f\u4e0d\u4e00\u6837\u7684\u3002\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u4f1a\u7acb\u5373\u53d1\u73b0\uff0c\u8fd9\u6837\u63a8\u56de\u987a\u5e8f\u6839\u672c\u6ca1\u53d8\u3002\u4efb\u4f55\u4e00\u6b65\u5931\u8d25\u90fd\u4f1a\u5bfc\u81f4\u8fde\u9501\u53cd\u5e94\uff0c\u5982\u679c\u4f60\u4e00\u76f490\uff0c\u591a\u534a\u662f\u8fd9\u4e2a\u9519\u8bef\u4e86\u3002\n\npush\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u6309k1,k2push\u56de\uff0c\u6808\u7684\u6027\u8d28(\u5148\u8fdb\u5148\u51fa\uff09\u4f1a\u4f7f\u5f97\u4e24\u4e2a\u6570\u5b57\u4ea4\u6362\u7684\u3002\n\n## \u5176\u4ed6\u64cd\u4f5c\n\n\u7b80\u5355\u63d0\u4e00\u4e0b\uff0c\u6bcf\u6b65\u9700\u8981\u53d6\u51fa\u5143\u7d20\u90fd\u7528law\u5224\u65ad\u5143\u7d20\u591f\u4e0d\u591f\uff0c\u9632\u6b62\u5d29\u6e83\u3002\u4e0d\u8fc7\u67d0\u4e9b\u5730\u65b9push\u7684\u65f6\u5019\u4e0d\u7528\u7279\u5730\u5224\u65ad\u5927\u5c0f\u4e86\u3002\u6bd4\u5982INV\uff0cDUP\uff0c\u53d6\u51fa\u7684\u5fc5\u7136\u662f\u63d2\u5165\u65f6\u5224\u65ad\u8fc7\u7684\u4e86\u3002\u4f46\u662f\u6d89\u53ca\u5230\u52a0\u51cf\uff0c\u4e58\u9664\u5fc5\u987b\u5224\u65ad\u5927\u5c0f\u518dpush\uff0c\u5426\u5219\u4e00\u5f8bERROR\uff08\u5f53\u7136\u5728\u6211\u7684\u4ee3\u7801\u91cc\u8fd9\u4e2a\u6a21\u5757\u56de\u8fd4\u56de\u5047\uff09\u3002\n\n\u8fd9\u91cc\u8c03\u8bd5\u75d5\u8ff9\u592a\u591a\u3002\u3002\n\n# Control\u67a2\u7ebd\n\n\u8fd9\u91cc\u7528\u6765\u8f6c\u8fd0\u5404\u79cd\u64cd\u4f5c\uff0c\u5c31\u662f\u4e00\u4e2a\u6267\u884c\u7f62\u4e86\uff08\u8679\u6865\u673a\u573a\u300b\uff1f\uff09\n\n# \u4e3b\u7a0b\u5e8f\n\n\u5728\u7ebf\u5904\u7406\u7684\u3002\u3002\u5148\u8bfb\u5165\u64cd\u4f5c\uff0c\u6570\u5b57\u5316\u64cd\u4f5c\u5b58\u5728\u6570\u7ec4\u91cc\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u521d\u59cb\u5143\u7d20\u904d\u5386\u4e00\u904d\u64cd\u4f5c\u3002\u6bcf\u6b21\u7ed3\u675f\u540e\u5c3d\u7ba1\u4f60\u77e5\u9053\u6808\u5e94\u8be5\u662f\u7a7a\u7684\uff0c\u8fd8\u662f\u5efa\u8bae\u60a8\u5224\u65ad\u4e00\u4e0b\u6808\u7a7a\uff0c\u4e0d\u7a7a\u5c31\u5f39\u51fa\u6765\u5427\u3002\n\n\n\u6700\u540e\u4e00\u4e9b\u7ec6\u8282\uff0c\u4e00\u4e2a\u662f\u8bf8\u591a\u5224\u65ad\uff0c\u521d\u59cb\u5316\uff0c\u5224\u7a7a\uff0c\u8fd8\u6709\u6700\u7ec8\u8f93\u51fa\u7684\u65f6\u5019\u8981\u5224\u65ad\u662f\u5426\u662f\u201c\u4e00\u4e2a\u5143\u7d20\u201d\uff0c\u5426\u5219\u8fd8\u662fERROR\u3002\u6570\u636e\u867d\u7136\u4e0d\u5b8c\u5584\uff0c\u4f46\u6211\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u7ec4\u5d29\u6389\u67d0\u4e9b\u4ee3\u7801\u3002\u3002\u5f53\u7136\uff0c\u8fd8\u6709abs\u3002\n\n\n\u6700\u540e\u7684\u6700\u540e\u4e0a\u4ee3\u7801\u3002\u4ee3\u7801\u8f83\u957f\uff0c\u4f46\u662f\u8fd8\u662f\u6bd4\u8f83\u53ef\u8bfb\u7684\uff0c\u6162\u6162\u5206\u533a\u8bfb\u5427\u3002\n\n\u6700\u540e\u7684\u6700\u540e\u7684\u6700\u540e\u795d\u4f60AC\uff0c\u4e0d\u8981\u653e\u5f03\u554a\uff01\u505a\u7801\u519c\u9898\u4e5f\u4e0d\u653e\u5f03\u624d\u662f\u4e0d\u5fd8\u672c\u5fc3\u554a\uff01\uff08\u867d\u7136\u662f\u81ea\u5df1\u4f5c\u6b7b\u5566\uff09\n\n%%%%%%%%\n\n      \n    \n\n\n\n      \n    \n\n\n\n        \n      \n          \n          \n\n         \n       \n      \n    \n      \n    \n\n\n\n          \n\n\n\n\n\n\n\n\n\n\n\n          \n    \n          \n\n\n```cpp\n//\u4ee3\u7801\n#include<cstdio>\n#include<iostream>\n#include<stack>\n#include<cstring>\n#include<string>\nusing namespace std;\nstack<int>s;\nint Command[5001][2];\n//LS\nint abs(int a)\n{\n    if(a<0)return -a;\n    return a;\n}\n//Laws\nbool Biglaw(int n)\n{\n    if(abs(n)>1000000000)\n      return false;\n    return true;\n}\nbool Sizelaw(int n)\n{\n    if(s.size()<n)\n      return false;\n    return true;\n}\nbool Divlaw(int a,int b)\n{\n    if(b==0)\n      return false;\n    return true;\n}\n//Commands\nbool NUM(int n)\n{\n  if(Biglaw(n))\n    s.push(n);\n  else\n    return 0;\n  return 1;\n}\nbool POP()\n{\n  if(!s.empty())\n    s.pop();\n  else\n    return 0;\nreturn 1;\n}\nbool INV()\n{\n    int k;\n    if(!s.empty())\n      k=s.top();\n    else\n      return 0;\n    s.pop();\n    k=-k;\n    s.push(k);\nreturn 1;\n}\nbool DUP()\n{\n    if(!s.empty())\n    {\n    int k=s.top();\n    s.push(k);\n    }\n    else\n      return 0;\nreturn 1;\n}\nbool SWP()\n{\n    int k1,k2;\n    if(Sizelaw(2))\n      {  \n        k1=s.top();\n         s.pop();\n        k2=s.top();\n         s.pop();\n    s.push(k1);\n    s.push(k2);\n      }\n    else\n      return 0;\n    return 1;\n}\nbool ADD()\n{\n    if(Sizelaw(2))\n    {\n      int k1=s.top();\n      s.pop();\n      int k2=s.top();\n      s.pop();\n      if(Biglaw(k1+k2))\n        s.push(k1+k2);\n    else\n      return 0;\n    }\n    else\n      return 0;\n    return 1; \n}\nbool SUB()\n{\n    if(Sizelaw(2))\n    {\n    int k1=s.top();\n    s.pop();\n    int k2=s.top();\n    s.pop();\n    if(Biglaw(k2-k1))\n    s.push(k2-k1);\n  else\n    return 0;\n    }\n    else\n     return 0;\nreturn 1;\n}\nbool MUL()\n{\n    if(Sizelaw(2))\n    {\n    int k1=s.top();\n    s.pop();\n    int k2=s.top();\n    s.pop();\n    if(Biglaw(k1*k2))\n    s.push(k1*k2);\n   else\n     return 0;\n    }\n   else\n     return 0;\nreturn 1;\n}\nbool DIV()\n{\n    if(Sizelaw(2))\n    {\n    int k1=s.top();\n    s.pop();\n    int k2=s.top();\n    s.pop();\n    if(Divlaw(k2,k1))\n    {\n      if(Biglaw(k2/k1))\n         s.push(k2/k1);\n     }\n   else\n       return 0;\n    }\n    else\n      return 0;\nreturn 1;\n}\nbool MOD()\n{\n    if(Sizelaw(2))\n    {\n    int k1=s.top();\n    s.pop();\n    int k2=s.top();\n    s.pop();\n    if(Divlaw(k2,k1))\n    {\n    if(Biglaw(k2%k1))\n      s.push(k2%k1);\n    }\n    else\n      return 0;\n    }\n    else\n     return 0;\nreturn 1;\n}\nbool END()\n{\n    if(s.size()==1)\n    {\n      printf(\"%d\\n\",s.top());\n      s.pop();\n    }\n    else\n      return 0;\n     return 1;\n}\n//Bugs\nvoid ERROR()\n{\n    printf(\"ERROR\\n\");\n    return;\n}\n//MissionControl\nbool Control(int k,int n)\n{\n    if(k==1)\n      if(NUM(n))\n       return 1;\n      else\n        return 0;\n    if(k==2)\n      if(POP())\n        return 1;\n    else\n      return 0;\n    if(k==3)\n      if(INV())\n         return 1;\n        else\n          return 0;\n    if(k==4)\n      if(DUP())\n         return 1;\n        else\n          return 0;\n    if(k==5)\n      if(SWP())\n        return 1;\n       else\n         return 0;\n    if(k==6)\n      if(ADD())\n        return 1;\n       else\n         return 0;\n    if(k==7)\n      if(SUB())\n        return 1;\n     else\n       return 0;\n    if(k==8)\n      if(MUL())\n        return 1;\n    else\n      return 0;\n    if(k==9)\n      if(DIV())\n        return 1;\n    else\n       return 0;\n    if(k==10)\n      if(MOD())\n        return 1;\n    else\n      return 0;\n    if(k==11)\n      if(END())\n        return 1;\n    else\n      return 0;\n    return 1;\n}\nint main()\n{\n    int k;\n    memset(Command,0,sizeof Command);\n    Command[1][0]=1;\n    for(int i=2;i<=2001;++i)\n      {\n          string s;\n          cin>>s;\n          k=i;\n          if(s==\"END\")\n           {\n           Command[i][0]=11;\n             break;\n         }\n          if(s==\"NUM\")\n            {\n                int a1;\n                scanf(\"%d\",&a1);\n                Command[i][0]=1;\n                Command[i][1]=a1;\n            }\n        if(s==\"POP\")\n            Command[i][0]=2;\n        if(s==\"INV\")\n                Command[i][0]=3;\n        if(s==\"DUP\")\n                Command[i][0]=4;\n        if(s==\"SWP\")\n                Command[i][0]=5;\n        if(s==\"ADD\")\n                Command[i][0]=6;\n        if(s==\"SUB\")\n                Command[i][0]=7;\n        if(s==\"MUL\")\n                Command[i][0]=8;\n        if(s==\"DIV\")\n                Command[i][0]=9;\n        if(s==\"MOD\")\n                Command[i][0]=10;\n      }\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n      {\n          int a1;\n          scanf(\"%d\",&a1);\n          if(abs(a1)>1000000000)\n           {\n            ERROR();\n            continue;\n         }\n          Command[1][1]=a1;\n          for(int j=1;j<=k;++j)\n              if(!Control(Command[j][0],Command[j][1]))\n              {\n                ERROR();\n              Command[1][1]=0;\n                break;\n              }\n      }\n//AC by fz\n}\n\n```",
        "postTime": 1478779959,
        "uid": 17667,
        "name": "feilongz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    },
    {
        "content": "\u6b64\u9898\u662f\u5178\u578b\u7684\u6808\u64cd\u4f5c\u6709\u5173\u7684\u9898\u76ee\uff0c\u770b\u8d77\u6765\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u65b9\u6cd5\uff0c\u90a3\u53ea\u597d\u76f4\u63a5\u6a21\u62df\u4e86\u3002  \n\u65e2\u7136\u8981\u7528\u6a21\u62df\uff0cSTL\u91cc\u7684`stack<>`\u81ea\u7136\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002  \n#### \u9898\u610f\u7b80\u8ff0\n\u5176\u5b9e\u5c31\u662f\u6309\u7167\u5c0fZ\u7684\u6307\u793a\u5b8c\u6210\u8fd9\u4e9b\u884c\u4e3a\u800c\u5df2\u3002  \n#### \u9898\u76ee\u5206\u6790\n\u6b64\u9898\u7684\u96be\u70b9\u5728\u4e8e\uff1a\u54ea\u4e9b\u64cd\u4f5c\u662f\u4e0d\u5408\u6cd5\u7684\u3002  \n1. \u6808\u5185\u6570\u636e\u91cf\u5c11\u4e8e\u64cd\u4f5c\u8981\u6c42\u7684\u6700\u5c11\u6570\u636e\u91cf\u3002  \n\u4e0d\u540c\u7684\u64cd\u4f5c\u6709\u4e0d\u540c\u7684\u9700\u6c42\uff0c\u5982\u4e0b\uff1a\n\t- NUM\uff1a$0$ \n   - POP,INV,DUP: $1$ \n   - SWP,ADD,SUB,MUL,DIV,MOD\uff1a$2$\n2. \u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u4efb\u4f55\u65f6\u5019\u6570\u503c\u7edd\u5bf9\u503c\u8d85\u8fc7$1000000000(10^9)$  \n3. DIV(\u9664\u6cd5)\u8fd0\u7b97\u4e2d\u5206\u6bcd\u4e3a$0$\u3002\n4. \u64cd\u4f5c\u7ed3\u675f\u540e\u6808\u7684\u5927\u5c0f\u4e0d\u4e3a$1$  \n\n\u660e\u786e\u4e86\u4ee5\u4e0a\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002 \n#### \u4ee3\u7801\n\u521d\u59cb\u5316\uff1a\n```cpp\n#define N 2015\ntypedef long long ll;\n#define MAX 1000000000\nint len;\nll temp,a,b;\nstruct node { string s; ll k; } act[N];\nint main(){\n\tstring s;\n\tcin >> s;\n\twhile(s != \"END\")\n\t{\n\t\tact[++ len].s = s;\n\t\tif(s == \"NUM\") scanf(\"%lld\",&act[len].k);\n\t\tcin >> s;\n\t}\n\tll n;\n\tll t;\n\tscanf(\"%lld\",&n);\n\twhile(n --)\n\t{\n\t\tscanf(\"%lld\",&t);\n\t\tdeal(t);\n\t}\n\treturn 0;\n}\n```\n\u6b64\u5904$len$\u5b58\u50a8\u64cd\u4f5c\u6570\u91cf\uff0c$temp,a,b$\u5b58\u50a8\u4e00\u4e9b\u4e34\u65f6\u53d8\u91cf\uff0c$node$\u7ed3\u6784\u4f53\u5b58\u50a8\u6bcf\u6b21\u64cd\u4f5c\u7684\u5177\u4f53\u5185\u5bb9\u3002  \n\u63a5\u4e0b\u6765\u6211\u4eec\u5f00\u59cb\u5199$deal()$\u51fd\u6570\u3002  \n\u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6808\u5e76\u521d\u59cb\u5316\uff1a\n```cpp\nvoid deal(ll t)\n{\n\tif(abs(t) > MAX) { printf(\"ERROR\\n\"); return; }//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\tstack <ll> st;\n\tst.push(t);\n}\n```\n\u6ce8\u610f\u8981\u968f\u65f6\u5224\u65ad\u7b2c$2$\u6761\u4e0d\u5408\u6cd5\u64cd\u4f5c\u3002  \n\u7136\u540e\u8dd1\u4e00\u4e2a\u5faa\u73af\uff0c\u4f9d\u6b21\u64cd\u4f5c\u3002  \nNUM:\n```cpp\nif(act[i].s == \"NUM\")\n{\n\tif(abs(act[i].k) > MAX) { printf(\"ERROR\\n\"); return; }//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\tst.push(act[i].k);\n}\n```\nPOP:\n```cpp\nelse if(act[i].s == \"POP\")\n{\n\t\tif(!st.size()) { printf(\"ERROR\\n\"); return; }//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\tst.pop();\n}\n```\nINV\uff1a\n```cpp\nelse if(act[i].s == \"INV\") \n{\n\tif(!st.size()) { printf(\"ERROR\\n\"); return; }//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\ttemp = st.top();\n\tst.pop();\n\tst.push(-temp);\n}\n```\nDUP:\n```cpp\nelse if(act[i].s == \"DUP\")\n{\n\tif(!st.size()) { printf(\"ERROR\\n\"); return; }//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\tst.push(st.top());\n}\n```\nSWP:\n```cpp\nelse if(act[i].s == \"SWP\")\n{\n\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\ta = st.top();\n\tst.pop();\n\tb = st.top();\n\tst.pop();\n\tst.push(a);\n\tst.push(b);\n}\n```\n\u65f6\u523b\u7262\u8bb0$3$\u79cd\u4e0d\u5408\u6cd5\u60c5\u51b5\u3002  \n\u5f53\u7136\u6211\u4eec\u4e5f\u8981\u5b66\u4f1a\u53d8\u901a\uff0c\u6709\u4e9b\u4e0d\u5fc5\u5224\u65ad\u7684\u5730\u65b9\u4e0d\u5224\u65ad(\u6bd4\u5982INV\uff0cDUP\uff0cSWP\u4e2d\u4e0d\u5fc5\u5224\u65ad\u7b2c$2$\u79cd\u4e0d\u5408\u6cd5)  \nADD\uff1a\n```cpp\nelse if(act[i].s == \"ADD\")\n{\n\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\ta = st.top();\n\tst.pop();\n\ttemp = a + st.top();\n\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\tst.pop();\n\tst.push(temp);\n}\n```\nSUB\uff1a\n```cpp\nelse if(act[i].s == \"SUB\")\n{\n\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\ta = st.top();\n\tst.pop();\n\ttemp = st.top() - a;\n\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\tst.pop();\n\tst.push(temp);\n}\n```\nMUL\uff1a\n```cpp\nelse if(act[i].s == \"MUL\")\n{\n\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\ta = st.top();\n\tst.pop();\n\ttemp = a * st.top();\n\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\tst.pop();\n\tst.push(temp);\n}\n```\nDIV\uff1a\n```cpp\nelse if(act[i].s == \"DIV\")\n{\n\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\ta = st.top();\n\tif(!a) { printf(\"ERROR\\n\"); return; }\n\t//\u7b2c3\u79cd\u4e0d\u5408\u6cd5\n\tst.pop();\n\ttemp = st.top() / a;\n\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\tst.pop();\n\tst.push(temp);\n}\n```\nMOD\uff1a\n```cpp\nelse if(act[i].s == \"MOD\")\n{\n\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\ta = st.top();\n\tst.pop();\n\ttemp = st.top() % a;\n\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\tst.pop();\n\tst.push(temp);\n}\n```\n\u7ed3\u5c3e(\u5faa\u73af\u5916\u90e8)\uff1a\n```cpp\nif(st.size() == 1) printf(\"%lld\\n\",st.top());\n//\u7b2c4\u79cd\u4e0d\u5408\u6cd5\nelse printf(\"ERROR\\n\");\n```\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5904\u7406\u5b8c\u6210\u4e86\uff0c\u540c\u65f6\u8986\u76d6\u5230\u4e86\u6240\u6709\u7684\u4e0d\u5408\u6cd5\u73b0\u8c61\u3002  \ndeal\u51fd\u6570\u5168\u90e8\uff1a\n```cpp\nvoid deal(ll t)\n{\n\tif(abs(t) > MAX) { printf(\"ERROR\\n\"); return; }\n\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\tstack <ll> st;\n\tst.push(t);\n\tfor(int i = 1;i <= len;i ++)\n\t{\n\t\tif(act[i].s == \"NUM\")\n\t\t{\n\t\t\tif(abs(act[i].k) > MAX) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.push(act[i].k);\n\t\t}\n\t\telse if(act[i].s == \"POP\")\n\t\t{\n\t\t\tif(!st.size()) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t}\n\t\telse if(act[i].s == \"INV\") \n\t\t{\n\t\t\tif(!st.size()) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ttemp = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(-temp);\n\t\t}\n\t\telse if(act[i].s == \"DUP\")\n\t\t{\n\t\t\tif(!st.size()) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.push(st.top());\n\t\t}\n\t\telse if(act[i].s == \"SWP\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\tb = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a);\n\t\t\tst.push(b);\n\t\t}\n\t\telse if(act[i].s == \"ADD\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\ttemp = a + st.top();\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t\telse if(act[i].s == \"SUB\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\ttemp = st.top() - a;\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t\telse if(act[i].s == \"MUL\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\ttemp = a * st.top();\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t\telse if(act[i].s == \"DIV\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tif(!a) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c3\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\ttemp = st.top() / a;\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t\telse if(act[i].s == \"MOD\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\ttemp = st.top() % a;\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t}\n\tif(st.size() == 1) printf(\"%lld\\n\",st.top());\n\t//\u7b2c4\u79cd\u4e0d\u5408\u6cd5\n\telse printf(\"ERROR\\n\");\n}\n```\n\u4ee3\u7801\u786e\u5b9e\u975e\u5e38\u957f\uff08\u52a0\u4e0a\u6ce8\u91ca\u7ea6$110$\u884c\uff09\u2026\u2026  \n\u5168\u90e8\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 2015\ntypedef long long ll;\n#define MAX 1000000000\nint len;\nll temp,a,b;\nstruct node { string s; ll k; } act[N];\nvoid deal(ll t)\n{\n\tif(abs(t) > MAX) { printf(\"ERROR\\n\"); return; }\n\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\tstack <ll> st;\n\tst.push(t);\n\tfor(int i = 1;i <= len;i ++)\n\t{\n\t\tif(act[i].s == \"NUM\")\n\t\t{\n\t\t\tif(abs(act[i].k) > MAX) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.push(act[i].k);\n\t\t}\n\t\telse if(act[i].s == \"POP\")\n\t\t{\n\t\t\tif(!st.size()) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t}\n\t\telse if(act[i].s == \"INV\") \n\t\t{\n\t\t\tif(!st.size()) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ttemp = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(-temp);\n\t\t}\n\t\telse if(act[i].s == \"DUP\")\n\t\t{\n\t\t\tif(!st.size()) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.push(st.top());\n\t\t}\n\t\telse if(act[i].s == \"SWP\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\tb = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a);\n\t\t\tst.push(b);\n\t\t}\n\t\telse if(act[i].s == \"ADD\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\ttemp = a + st.top();\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t\telse if(act[i].s == \"SUB\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\ttemp = st.top() - a;\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t\telse if(act[i].s == \"MUL\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\ttemp = a * st.top();\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t\telse if(act[i].s == \"DIV\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tif(!a) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c3\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\ttemp = st.top() / a;\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t\telse if(act[i].s == \"MOD\")\n\t\t{\n\t\t\tif(st.size() <= 1) { printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c1\u79cd\u4e0d\u5408\u6cd5\n\t\t\ta = st.top();\n\t\t\tst.pop();\n\t\t\ttemp = st.top() % a;\n\t\t\tif(abs(temp) > MAX)\t{ printf(\"ERROR\\n\"); return; }\n\t\t\t//\u7b2c2\u79cd\u4e0d\u5408\u6cd5\n\t\t\tst.pop();\n\t\t\tst.push(temp);\n\t\t}\n\t}\n\tif(st.size() == 1) printf(\"%lld\\n\",st.top());\n\t//\u7b2c4\u79cd\u4e0d\u5408\u6cd5\n\telse printf(\"ERROR\\n\");\n}\nint main(){\n\tstring s;\n\tcin >> s;\n\twhile(s != \"END\")\n\t{\n\t\tact[++ len].s = s;\n\t\tif(s == \"NUM\") scanf(\"%lld\",&act[len].k);\n\t\tcin >> s;\n\t}\n\tll n;\n\tll t;\n\tscanf(\"%lld\",&n);\n\twhile(n --)\n\t{\n\t\tscanf(\"%lld\",&t);\n\t\tdeal(t);\n\t}\n\treturn 0;\n}\n```\n\u6700\u540e\u81ea\u7136\u8fd8\u662f\u8981\u8ba1\u7b97\u4e00\u4e0b\u590d\u6742\u5ea6\u3002  \n\u8bbe\u64cd\u4f5c\u6570$s$\uff0c\u67e5\u8be2\u6570$n$\uff0c\u590d\u6742\u5ea6\u7ea6\u4e3a$O(sn)$\uff0c\u800c$1\\le s,n\\le2000$\uff0c\u867d\u7136\u5e38\u6570\u975e\u5e38\u5927\uff0c\u4f46\u662f\u5b8c\u6210\u8fd9\u9053\u9898\u5df2\u7ecf\u8db3\u591f\u4e86\uff0c\u53ef\u4ee5$AC$(\u6d4b\u8bd5\u7ed3\u679c\uff1a\u6240\u6709\u6d4b\u8bd5\u70b9\u65f6\u95f4\u4e4b\u548c\u4e3a$37ms$)\u3002  \n$The$ $end.$",
        "postTime": 1590235630,
        "uid": 270791,
        "name": "WanderingTrader",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2186 \u3010\u5c0fZ\u7684\u6808\u51fd\u6570\u3011"
    }
]