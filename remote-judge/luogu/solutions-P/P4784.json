[
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u628a\u91cd\u8981\u8282\u70b9\u8054\u901a\u7684\u6700\u5c0f\u4ee3\u4ef7\uff08\u91cd\u8981\u8282\u70b9<=5\uff09\n\n\n\n------------\n\u5c06\u6307\u5b9a\u70b9\u96c6\u5408\u4e2d\u7684\u6240\u6709\u70b9\u8fde\u901a\uff0c\u4e14\u8fb9\u6743\u603b\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u79f0\u4e3a**\u6700\u5c0f\u65af\u5766\u7eb3\u6811**\uff08Minimal Steiner Tree\uff09\n\n\u5176\u5b9e\u6700\u5c0f\u751f\u6210\u6811\u662f\u6700\u5c0f\u65af\u5766\u7eb3\u6811\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u8054\u901a\u4e86\u56fe\u4e0a\u6240\u6709\u8282\u70b9\n\n\u6700\u5c0f\u65af\u5766\u7eb3\u6811\u53ef\u4ee5\u7528dp\u6c42\u89e3\n\n\u4ee4$f[i][j]$\u8868\u793a\u4ee5$i$\u4e3a\u6839\uff0c\u6307\u5b9a\u96c6\u5408\u4e2d\u70b9\u7684\u8054\u901a\u72b6\u6001\u4e3a$j$\u7684\u6700\u5c0f\u603b\u6743\u503c\n\n\u8f6c\u79fb\u5206\u4e3a\u4e24\u91cd\n\n- \u7b2c\u4e00\u91cd\uff1a\u679a\u4e3e\u5f53\u524d\u72b6\u6001\u7684\u5b50\u96c6\u8fdb\u884c\u8f6c\u79fb\n\n  \u65b9\u7a0b\u4e3a\uff1a$f[i][j]=min(f[i][j],f[i][k]+f[i][j xor k])$\n\n  \u679a\u4e3e\u5b50\u96c6\u7684\u6280\u5de7\u662f\uff1a$for (k=j\\&(j-1);k;k=j\\&(k-1))$\n\n- \u7b2c\u4e8c\u91cd\uff1a\u5728\u5f53\u524d\u72b6\u6001\u4e0b\u5bf9\u5176\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\n\n  \u65b9\u7a0b\u4e3a:$f[i][j]=min(f[i][j],f[k][j]+cost)$\n\n  \u5728\u8fd9\u4e00\u91cd\u53ea\u9700\u5bf9\u8fd9\u4e00\u79cd\u72b6\u6001\u8fdb\u884c\u677e\u5f1b\u5373\u53ef\uff0c\u56e0\u4e3a\u5176\u4ed6\u72b6\u6001\u4f1a\u901a\u8fc7\u7b2c\u4e00\u91cd\u8f6c\u79fb\u66f4\u65b0\n \n  \u677e\u5f1b\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7spfa\u5b9e\u73b0\uff08\u5982\u679cspfa\u53c8\u53cc\u53d2\u53d5\u88ab\u5361\u4e86\u8bf7\u4f7f\u7528\u5806\u4f18\u5316dijkstra\uff09\n  \n\u76f8\u5173\u9898\u76ee\uff1a[JLOI2015]\u7ba1\u9053\u8fde\u63a5   [WC2008]\u6e38\u89c8\u8ba1\u5212\n\n\u73b0\u5728\u65f6\u9650\u6269\u5927\u4e86\uff0c\u52a0\u4e0a\u70b9\u5e38\u6570\u4f18\u5316\u5c31\u53ef\u4ee5AC\u4e86orzzzzz\n\n~\u867d\u7136\u6211\u4e0d\u4f1a\u5199fread~\n\n```\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<queue>\n#include<algorithm>\n#define reg register\nusing namespace std;\ntypedef long long ll;\nconst int N=1e5+5;\nstruct node\n{\n\tint to,nxt,dis;\n}edge[N<<2];\nstruct P\n{\n\tint x; ll d;\n\tinline friend bool operator < (P a,P b) {return a.d>b.d;}\n};\nint n,m,p,num,head[N];\nll f[N][32],inf,ans=1e18;\nbool vis[N];\npriority_queue<P>q;\ninline int read()\n{\n\tint x=0,w=1;\n\tchar c=getchar();\n\twhile (!isdigit(c)&&c!='-') c=getchar();\n\tif (c=='-') c=getchar(),w=-1;\n\twhile (isdigit(c))\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*w;\n}\ninline void add_edge(int from,int to,int dis)\n{\n\tedge[++num]=(node){to,head[from],dis};\n\thead[from]=num;\n}\ninline void dijkstra(int S)\n{\n\tmemset(vis,0,sizeof(vis));\n\twhile (!q.empty())\n\t{\n\t\tint u=q.top().x; q.pop();\n\t\tif (vis[u]) continue; vis[u]=1;\n\t\tfor (reg int i=head[u];i;i=edge[i].nxt)\n\t\t{\n\t\t\tint v=edge[i].to,d=edge[i].dis;\n\t\t\tif (f[v][S]>f[u][S]+d)\n\t\t\t{\n\t\t\t\tf[v][S]=f[u][S]+d;\n\t\t\t\tq.push((P){v,f[v][S]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read(),p=read(),m=read();\n\tmemset(f,127/3,sizeof(f)); inf=f[0][0];\n\tfor (reg int i=1;i<=p;i++) f[read()][1<<(i-1)]=0;\n\tfor (reg int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\tadd_edge(x,y,z); add_edge(y,x,z);\n\t}\n\tfor (reg int i=1;i<(1<<p);i++)\n\t{\n\t\tfor (reg int k=1;k<=n;k++)\n\t\t{\n\t\t    for (reg int j=i&(i-1);j;j=i&(j-1))\n\t\t      f[k][i]=min(f[k][i],f[k][j]+f[k][i^j]);\n\t\t    if (f[k][i]<inf) q.push((P){k,f[k][i]});\n\t\t}\n\t\tdijkstra(i);\n\t}\n\tfor (reg int i=1;i<=n;i++) ans=min(ans,f[i][(1<<p)-1]);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1536148751,
        "uid": 43471,
        "name": "Captain_Paul",
        "ccfLevel": 0,
        "title": "P4784  [BalticOI2016]\u57ce\u5e02"
    },
    {
        "content": "[$\\text{Link}$](https://www.luogu.com.cn/problem/P4784)\n## \u9898\u610f\n\u7ed9\u51fa\u4e00\u5f20 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u6709\u6743\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u5176\u4e2d\u6709 $k$ \u4e2a\u70b9\u662f\u5173\u952e\u70b9\u3002\u6c42\u56fe\u7684\u4e00\u4e2a\u5b50\u56fe\uff0c\u6ee1\u8db3\u5305\u542b\u4e86\u6240\u6709 $k$ \u4e2a\u5173\u952e\u70b9\uff0c\u4f7f\u5f97\u6240\u5305\u542b\u7684\u8fb9\u96c6\u7684\u6743\u503c\u548c\u6700\u5c0f\uff0c\u6c42\u8fd9\u4e2a\u6700\u5c0f\u503c\u3002\n\n$n\\le 10^5$\uff0c$m\\le2\\times10^5$\uff0c$k\\le5$\n## \u601d\u8def\n\u4e8b\u5b9e\u4e0a\u5c31\u662f [$\\text{P6192}$](https://www.luogu.com.cn/problem/P6192) \u7684\u6570\u636e\u52a0\u5f3a\u7248\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u77e5\u9053\u7b54\u6848\u5b50\u56fe\u662f\u4e00\u9897\u6811\uff0c\u56e0\u4e3a\u5982\u679c\u5176\u4e0a\u6709\u4e2a\u73af\uff0c\u53ef\u4ee5\u65ad\u5f00\u73af\u4e0a\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u70b9\u96c6\u4e0d\u4f1a\u53d8\u5316\u4f46\u7b54\u6848\u4f1a\u53d8\u5c0f\u3002\n\n\u8003\u8651\u72b6\u538b $\\text {dp}$\uff0c\u8bbe $dp_{i,S}$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u7684\u7b54\u6848\u4e2d\u5305\u542b\u4e86\u5173\u952e\u70b9\u96c6\u5408 $S$ \u65f6\u7684\u7b54\u6848\u3002\n\n\u6709\u4e24\u79cd\u60c5\u51b5\uff1a$i$ \u7684\u5ea6\u4e3a $1$ \u6216\u5927\u4e8e $1$\u3002\n\n- \u82e5 $i$ \u7684\u5ea6\u6570\u4e3a $1$\n\n\u8003\u8651\u5176\u4e0e $j$ \u76f8\u8fde\uff0c\u5219\u6709\u8f6c\u79fb\n$$dp_{j,S}+w_{(i,j)}\\to dp_{i,S}$$\n\u518d\u8003\u8651\u7528 $j$ \u66f4\u65b0 $i$\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u7528 $dp_{j,S}$ \u66f4\u65b0\u6240\u6709 $dp_{i,S}$\uff0c\u518d\u7528\u88ab\u66f4\u65b0\u7684\u7ee7\u7eed\u66f4\u65b0\u5176\u5b83\u503c\u3002\u8fd9\u91cc\u4e0e\u677f\u5b50\u4e0d\u540c\uff0c\u5fc5\u987b\u4f7f\u7528 $\\text{Dijkstra}$ \u3002\n$$dp_{j,S}+dis_{i,j}\\to dp_{i,S}$$\n\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(2^k\\times m\\log n)$ \u7684\u3002\n\n- \u82e5 $i$ \u7684\u5ea6\u6570\u5927\u4e8e $1$\n\n\u8003\u8651 $i$ \u53ef\u4ee5\u5212\u5206\u6210\u4e24\u4e2a\u5b50\u96c6\u4e4b\u5e76\uff0c\u679a\u4e3e $S$ \u7684\u5b50\u96c6\uff0c\u7528\u5b83\u4e0e\u5176\u8865\u96c6\u7684\u7b54\u6848\u4e4b\u548c\u66f4\u65b0 $dp_{i,S}$\uff0c\u5373\n$$dp_{i,S}\\gets dp_{i,T},dp_{i,S\\backslash T}$$\n\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\u679a\u4e3e\u5b50\u96c6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n\n$$\\begin{aligned}\\sum_{S\u2286\\{1,2\\dots n\\}}2^{|S|}&=\\sum_{k=0}^n2^k\\sum_{S\u2286\\{1,2\\dots n\\}}[|S|=k]\\\\\n&=\\sum_{k=0}^n2^k\\binom{n}{k}\\\\\n&=\\sum_{k=0}^{n}2^{n-k}\\binom{n}{k}\\\\\n&=\\sum_{k=0}^{n}1^k2^{n-k}\\binom{n}{k}\\\\\n&=3^n\\\\\n\\end{aligned}$$\n\n\u6240\u4ee5\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\times 3^k)$ \u7684\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n\\times 3^k+m\\log n\\times 2^k)$ \u7684\n\n\u53e6\u5916\uff0c\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u6811\u4e3a\u65af\u5766\u7eb3\u6811\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u6784\u5efa\u51fa\u6765\u7684\u6811\u88ab\u79f0\u4e3a\u6700\u5c0f\u65af\u5766\u7eb3\u6811\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nnamespace IO{//by cyffff\n\t\n}\nconst int N=1e5+10,K=5;\nint n,m,k,p[N],up;\nint cnt,head[N];\nll dp[N][1<<K];\nstruct Edge{\n\tint to,nxt,w;\n}a[N*4];\ninline void add(int u,int v,int w){\n\tcnt++;\n\ta[cnt].to=v;\n\ta[cnt].w=w;\n\ta[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nstruct node{\n\tint p;\n\tll w;\n\tinline friend bool operator<(const node &a,const node &b){\n\t\treturn a.w==b.w?a.p<b.p:a.w>b.w;\n\t}\n};\npriority_queue<node>q;\nbool vis[N];\ninline void dijkstra(int s){\n\tmemset(vis,0,sizeof(vis));\n\twhile(!q.empty()){\n\t\tnode p=q.top();\n\t\tq.pop();\n\t\tint rt=p.p;\n\t\tif(vis[rt]) continue;\n\t\tvis[rt]=1;\n\t\tfor(int i=head[rt];i;i=a[i].nxt){\n\t\t\tint t=a[i].to;\n\t\t\tif(dp[t][s]>dp[rt][s]+a[i].w){\n\t\t\t\tdp[t][s]=dp[rt][s]+a[i].w;\n\t\t\t\t\tif(!vis[t])\n\t\t\t\t\t\tq.push({t,dp[t][s]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tmemset(dp,127/3,sizeof(dp));\n\tn=read(),k=read(),m=read();\n\tfor(int i=1;i<=k;i++){\n\t\tp[i]=read();\n\t\tdp[p[i]][1<<i-1]=0;\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint u=read(),v=read(),w=read();\n\t\tadd(u,v,w),add(v,u,w); \n\t}\n\tup=(1<<k)-1;\n\tfor(int s1=0;s1<=up;s1++){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int s2=s1&s1-1;s2;s2=s2-1&s1)\n\t\t\t\tdp[i][s1]=min(dp[i][s1],dp[i][s2]+dp[i][s1^s2]);\n\t\t\tif(dp[i][s1]<1e17)\n\t\t\t\tq.push({i,dp[i][s1]});\n\t\t}\n\t\tdijkstra(s1);\n\t} \n\twrite(dp[p[1]][up]);\n\tflush();\n}\n```\n\u518d\u89c1 qwq~",
        "postTime": 1629893178,
        "uid": 365127,
        "name": "cyffff",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4784\u3010[BalticOI 2016 Day2]\u57ce\u5e02\u3011"
    },
    {
        "content": "\u5176\u5b9e\u662f\u65af\u5766\u5229\u6811\u6a21\u677f\u9898\u3002\n\n\u6570\u636e\u8303\u56f4\u660e\u663e\u662f\u72b6\u538bdp\uff0c\u8bbe$f[i][j]$\u662f\u4ee5i\u4e3a\u6811\u6839\u4e14\u5f53\u524d\u9009\u4e2d\u96c6\u5408\u72b6\u6001\u4e3aj\u7684\u6700\u4f18\u60c5\u51b5\u3002\n\n\u5f88\u660e\u663e\u8f6c\u79fb\u65b9\u7a0b\u9700\u8981\u679a\u4e3e\u5f53\u524d\u96c6\u5408\u7684\u5b50\u96c6\u3002\n\n\u8bbe\u5f53\u524d\u72b6\u6001\u7684\u96c6\u5408j\u7684\u4e00\u4e2a\u5b50\u96c6\u4e3ak\uff0c\u7531\u5f02\u6216\u7684\u6027\u8d28\uff0cj\u7684\u72b6\u6001\u4e00\u5b9a\u662f\u7531k\u548cj^k\u8f6c\u79fb\u6765\u3002\n\n\u8f6c\u79fb\u5b8c\u4e4b\u540e\u76f4\u63a5\u8dd1\u6700\u77ed\u8def\u677e\u5f1b\u66f4\u65b0\u5c31\u597d\u4e86\u3002\u5982\u679cSPFA\u8d85\u65f6\u7684\u8bdd\u53ef\u4ee5\u8bd5\u8bd5\u5806\u4f18\u5316\u7684Dijkstra\u3002\n\n\u6700\u540e\uff0c\u8fd9\u9053\u9898\u53ca\u5176\u5361\u5e38\u3002\u8bf7\u5c3d\u91cf\u7528\u5404\u79cd\u5947\u6280\u6deb\u5de7+\u5438\u6c27\u624d\u80fdA\u3002\n\nCode:\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n\nusing namespace std;\n\n\nint n, k, m, en(0), ci[15], vis[100005];\nlong long f[100005][1 << 5], ans = 1LL * 1e17;\n\ninline int read() {\n\tregister int s = 0, f = 1;\n\tregister char ch = getchar();\n\twhile (!isdigit(ch)) { if (ch == '-') f = -1; ch = getchar();}\n\twhile (isdigit(ch)) s = ((s << 1) + (s << 3)) + (ch ^ 48), ch = getchar();\n\treturn f * s;\n}\n\nstruct Edge {\n\tint head, to, nxt, val;\n\tEdge() {\n\t\thead = to = nxt = val = 0;\n\t}\n}ed[1000005];\n\ninline void addedge(int from, int to, int v) {\n\ted[++en].to = to; ed[en].val = v; ed[en].nxt = ed[from].head;\n\ted[from].head = en;\n}\n\ninline long long min_(long long a, long long b) {\n\treturn a < b ? a : b; \n}\n\nstruct node {\n\tint st;\n    long long val;\n\tnode(int ST, long long VAL) : st(ST), val(VAL) {}\n\tinline bool operator < (const node& b) const {\n\t\treturn val < b.val;\n\t}\n\tinline bool operator > (const node& b) const {\n\t\treturn val > b.val;\n\t}\n};\n\ninline void dijkstra(int id) {\n\tpriority_queue<node, vector<node>, greater<node> >q;\n\tfor (int i = 1; i <= n; ++i) q.push(node(i, f[i][id]));\n\twhile (!q.empty()) {\n\t\tint x = q.top().st; q.pop();\n\t\tif (vis[x]) continue; vis[x] = 1;\n\t\tfor (register int l = ed[x].head; l; l = ed[l].nxt)\n\t\t\tif (f[ed[l].to][id] > f[x][id] + ed[l].val)\n\t\t\t\tf[ed[l].to][id] = f[x][id] + ed[l].val, q.push(node(ed[l].to, f[x][id] + ed[l].val));\n\t}\n}\n\nsigned main() {\n\tn = read(); k = read(); m = read();\n\tfor (int i = 1; i <= k; i++) ci[i] = read();\n\tint u, v, w;\n\twhile (m--) {\n\t\tu = read(); v = read(); w = read();\n\t\taddedge(u, v, w); addedge(v, u, w);\n\t}\n\tmemset(f, 40, sizeof(f));\n\tfor (register int i = 1; i <= k; ++i) f[ci[i]][1 << (i - 1)] = 0;\n\tfor (register int i = 1; i < (1 << k); ++i) {\n\t\tfor (register int j = 1; j <= n; ++j)\n\t\t\tfor (register int l = i & (i - 1); l; l = i & (l - 1)) f[j][i] = min_(f[j][i], f[j][l] + f[j][i ^ l]);\n\t\tmemset(vis, 0, sizeof(vis));\n\t\tdijkstra(i);\n\t}\n\tfor (register int i = 1; i <= n; ++i) ans = min_(ans, f[i][(1 << k) - 1]);\n\tprintf(\"%lld\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1572687238,
        "uid": 98096,
        "name": "Smallbasic",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4784 \u3010[BalticOI 2016 Day2]\u57ce\u5e02\u3011"
    }
]