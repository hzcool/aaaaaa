[
    {
        "content": "\u8fd9\u91cc\u662f\u5495\u4e86\u597d\u4e45\u7684\u5b98\u65b9\u9898\u89e3\u3002\r\n\r\n## P1253\r\n\r\n\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u6a21\u677f\u9898\u3002\r\n\r\n\u4f7f\u7528\u4e24\u4e2a tag\uff0ct1 \u8868\u793a\u533a\u95f4\u8d4b\u503c\uff0ct2 \u8868\u793a\u533a\u95f4\u52a0\u3002\u52a0\u6cd5\u6253\u6807\u8bb0\u65f6\u82e5\u8d4b\u503c\u6807\u8bb0\u5b58\u5728\u5219\u76f4\u63a5\u7ed9\u8d4b\u503c\u6807\u8bb0\u52a0\u4e0a\u5bf9\u5e94\u503c\uff0c\u4e0d\u4fee\u6539\u52a0\u6807\u8bb0\uff0c\u5426\u5219\u4fee\u6539\u52a0\u6807\u8bb0\uff1b\u6253\u8d4b\u503c\u6807\u8bb0\u65f6\u5148\u6e05\u7a7a\u52a0\u6807\u8bb0\u5373\u53ef\u3002\r\n\r\n\u5728\u5b9e\u73b0\u65f6\uff0c\u533a\u95f4\u8d4b\u503c\u548c\u533a\u95f4\u52a0\u7684\u4e24\u4e2a update \u51fd\u6570\u627e\u8282\u70b9\u7684\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\uff0c\u533a\u522b\u53ea\u5728 make_tag \u8fc7\u7a0b\u3002\u56e0\u6b64\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u7684 update \u51fd\u6570\u5199\u6210\u4e00\u4e2a\uff0c\u53e6\u52a0\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u64cd\u4f5c\u7c7b\u578b\u662f\u8d4b\u503c\u8fd8\u662f\u52a0\u6cd5\u5373\u53ef\u3002\r\n\r\n```cpp\r\n#include <algorithm>\r\n#include <cctype>\r\n#include <cstdio>\r\n#include <iostream>\r\n\r\ntypedef long long int ll;\r\n\r\nconst int maxn = 1000006;\r\n\r\nll nul = 1e18;\r\n\r\nint n, q;\r\nint a[maxn];\r\n\r\nstruct Node {\r\n  int l, r;\r\n  ll w, t1, t2;\r\n  Node *ls, *rs;\r\n\r\n  void make_tag1(ll x) {\r\n    w = t1 = x;\r\n    t2 = 0;\r\n  }\r\n\r\n  void make_tag2(ll x) {\r\n    w += x;\r\n    if (t1 != nul)\r\n      t1 += x;\r\n    else\r\n      t2 += x;\r\n  }\r\n\r\n  void pushdown() {\r\n    if (t1 != nul) {\r\n      ls->make_tag1(t1);\r\n      rs->make_tag1(t1);\r\n      t1 = nul;\r\n    } else if (t2) {\r\n      ls->make_tag2(t2);\r\n      rs->make_tag2(t2);\r\n      t2 = 0;\r\n    }\r\n  }\r\n\r\n  void pushup() { w = std::max(ls->w, rs->w); }\r\n\r\n  bool InRange(int L, int R) { return (L <= l) && (r <= R); }\r\n  bool OutofRange(int L, int R) { return (l > R) || (r < L); }\r\n\r\n  void upd(int L, int R, int x, int op) {\r\n    if (InRange(L, R)) {\r\n      if (op == 1)\r\n        make_tag1(x);\r\n      else\r\n        make_tag2(x);\r\n    } else if (!OutofRange(L, R)) {\r\n      pushdown();\r\n      ls->upd(L, R, x, op);\r\n      rs->upd(L, R, x, op);\r\n      pushup();\r\n    }\r\n  }\r\n\r\n  ll qry(int L, int R) {\r\n    if (InRange(L, R))\r\n      return w;\r\n    else if (!OutofRange(L, R)) {\r\n      pushdown();\r\n      return std::max(ls->qry(L, R), rs->qry(L, R));\r\n    } else\r\n      return -nul;\r\n  }\r\n};\r\n\r\nNode Mem[maxn << 1], *pool = Mem;\r\n\r\nNode* New(int L, int R) {\r\n  auto u = pool++;\r\n  u->l = L;\r\n  u->r = R;\r\n  u->t1 = nul;\r\n  u->t2 = 0;\r\n  if (L != R) {\r\n    int M = (L + R) >> 1;\r\n    u->ls = New(L, M);\r\n    u->rs = New(M + 1, R);\r\n    u->pushup();\r\n  } else {\r\n    u->w = a[L];\r\n  }\r\n  return u;\r\n}\r\n\r\nint main() {\r\n  std::ios::sync_with_stdio(false);\r\n  std::cin.tie(0);\r\n  std::cout.tie(0);\r\n  std::cin >> n >> q;\r\n  for (int i = 1; i <= n; ++i) {\r\n    std::cin >> a[i];\r\n  }\r\n  auto rot = New(1, n);\r\n  for (int op, l, r, x; q; --q) {\r\n    std::cin >> op >> l >> r;\r\n    if (op != 3) {\r\n      std::cin >> x;\r\n      rot->upd(l, r, x, op);\r\n    } else {\r\n      std::cout << rot->qry(l, r) << '\\n';\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n```\r\n\r\n",
        "postTime": 1514115738,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "P1253"
    },
    {
        "content": "update 2021.11.6\uff1a\u66f4\u65b0\u4e86\u5173\u4e8e covertag \u7684\u9519\u8bef\u3002\n\n\u7ebf\u6bb5\u6811\u57fa\u7840\u597d\u9898\uff0c\u53ef\u4ee5\u66f4\u6df1\u5165\u7684\u7406\u89e3 pushdown \u64cd\u4f5c\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u91cc\u6709\u4e24\u79cd pushdown\u3002\u5b9a\u4e49 $covertag$ \u8868\u793a\u4fee\u6539\uff08\u8986\u76d6\uff09\u64cd\u4f5c\uff0c $sumtag$ \u8868\u793a\u589e\u52a0\u64cd\u4f5c\u3002\u90a3\u4e48\u600e\u4e48\u4fee\u6539\u5462\uff1f\n\n\u5bf9\u4e8e $coverdown$ \u65f6\u6211\u4eec\u5c31\u76f4\u63a5\u62b9\u6389 $sumtag$\uff08\u4eba\u90fd\u6ca1\u4e86\u8fd8\u589e\u52a0\u4ec0\u4e48\uff09\u3002\u5bf9\u4e8e $sumdown$ \u65f6\u6211\u4eec\u5c31\u5148 $covertag$ \u4e0b\u653e\uff08\u53ea\u8981\u8dd1\u5f97\u5feb\uff0cadd \u5c31\u6c38\u8fdc\u6162\u4e00\u7ebf\uff09\u3002\n\n\u4ee3\u7801\u5c31\u662f\uff1a\n\n```cpp\ninline void coverdown(LL now)\n{\n\tif(tree[now].covertag)\n\t{\n\t\ttree[lson].sumtag=tree[rson].sumtag=0;\n\t\ttree[lson].maxn=tree[rson].maxn=tree[now].covertag;\n\t\ttree[lson].covertag=tree[rson].covertag=tree[now].covertag;\n\t\ttree[now].covertag=0;\n\t}\n}\n\ninline void sumdown(LL now)\n{\n\tif(tree[now].sumtag)\n\t{\n\t\tcoverdown(now);\n\t\ttree[lson].maxn+=tree[now].sumtag,tree[rson].maxn+=tree[now].sumtag;\n\t\ttree[lson].sumtag+=tree[now].sumtag,tree[rson].sumtag+=tree[now].sumtag;\n\t\ttree[now].sumtag=0;\n\t}\n}\n```\n\n\u5bf9\u4e8e\u5e38\u89c4\u7684 pushdown \u64cd\u4f5c\uff0c\u4e24\u4e2a\u90fd\u505a\u4e00\u6b21\u5c31\u597d\u4e86\u3002\n\n\u753b\u4e2a\u56fe\u6765\u7406\u89e3\u4e00\u4e0b\uff1a\n\n![\u4e00\u5f00\u59cb\u7684\u7ebf\u6bb5\u6811](https://cdn.luogu.com.cn/upload/image_hosting/p929588j.png)\n\n\u5bf9 $[1,5]$ \u8fdb\u884c\u8986\u76d6\u4fee\u6539\u3002\n\n![\u7ea2\u8272\u662f $cover$ ](https://cdn.luogu.com.cn/upload/image_hosting/letjuksq.png)\n\n\u6309\u7167\u61d2\u6807\u8bb0\u7684\u89c4\u5219\uff0c\u4e0d\u5904\u7406\u65f6\u5c31\u4e0d\u4f1a\u66f4\u65b0\u3002\n\n\u73b0\u5728\u518d\u5728 $[1,5]$ \u4e4b\u95f4\u8fdb\u884c\u6dfb\u52a0\u64cd\u4f5c\u3002\n\n![\u7eff\u8272\u662f $add$ ](https://cdn.luogu.com.cn/upload/image_hosting/bgoujfmv.png)\n\n\u8fd9\u91cc\u5c31\u5c06 $covertag$ \u4e0b\u653e\u4e86\uff0c\u5c31\u4e0d\u53ef\u80fd\u51fa\u73b0\u8986\u76d6\u5f71\u54cd\u4e86\u6dfb\u52a0\u7684\u60c5\u51b5\u4e86\u3002\n\n\u5982\u679c\u67e5\u8be2 $[1,2]$ \u7684 \uff0c\u5c42\u5c42\u9012\u5f52\u4e0b\u653e\u5373\u53ef\uff0c\u4e0e\u5e38\u89c4\u505a\u6cd5\u4e00\u81f4\u3002\n\n![\u9ec4\u8272\u662f\u67e5\u8be2\u533a\u95f4](https://cdn.luogu.com.cn/upload/image_hosting/l2smhjrx.png)\n\n\u8fd9\u6837\u6574\u4e2a\u9898\u5c31\u5b8c\u4e86\u3002\u5176\u5b9e\u8fd9\u4e2a\u505a\u6cd5\u7684\u4e0b\u653e\u64cd\u4f5c\u662f\u6709\u91cd\u590d\u7684\uff08\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u60f3\u4e00\u4e0b\uff09\uff0c\u4f46\u662f\u8fd9\u6837\u8bb2\u6700\u5bb9\u6613\u7406\u89e3\u4e5f\u6700\u7b26\u5408\u76f4\u89c2\u611f\u53d7\u3002\u53cd\u6b63\u4e5f\u53ea\u662f\u5e38\u6570\u7a0d\u5fae\u5927\u4e86\u4e00\u70b9\u70b9\uff08\u7ebf\u6bb5\u6811\u624d\u4e0d\u5dee\u8fd9\u70b9\u5e38\u6570\u5462\uff09\uff0c\u5c31\u4e0d\u4f18\u5316\u4e86\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u6613\u9519\u70b9\u5c31\u662f\u5173\u4e8e covertag \u5224\u65ad\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4f7f\u7528 0 \u7684\u8bdd\uff0c\u51fa\u73b0\u8986\u76d6\u503c\u4e3a 0 \u7684\u60c5\u51b5\uff0c\u5c31\u4f1a\u51fa\u9505\uff08\u6b64\u9898\u6570\u636e\u8fc7\u6c34\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u4e13\u95e8\u6784\u9020\u4e00\u4e2a\u7279\u6b8a\u503c\u6765\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u653e\u4e0a\u4ee3\u7801\u8f85\u52a9\u7406\u89e3\uff0c\u9a6c\u8702\u4e0d\u6b63\u8bf7\u89c1\u8c05\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int MX=1*1000000+10;\n#define LL long long\n#define inf 1e15\n\n#define lson now<<1\n#define rson now<<1|1\n\n#define none -1145141919180\n//\u8fd9\u4e2a\u6765\u5224\u65ad\u7a76\u7adf\u5b58\u4e0d\u5b58\u5728 covertag\n\ninline LL read()\n{\n    LL x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n    while (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n    return x*f;\n}\n\nLL n,Q;\nLL w[MX];\n\nstruct tTree\n{\n\tLL covertag;\n\tLL sumtag;\n\tLL maxn;\n}tree[MX<<2];\n\ninline void pushup(LL now)\n{\n\ttree[now].maxn=max(tree[lson].maxn,tree[rson].maxn);\n}\n\ninline void coverdown(LL now)\n{\n\tif(tree[now].covertag!=-1145141919810)\n\t{\n\t\t//printf(\"WTH\\n\");\n\t\ttree[lson].sumtag=tree[rson].sumtag=0;\n\t\ttree[lson].maxn=tree[rson].maxn=tree[now].covertag;\n\t\ttree[lson].covertag=tree[rson].covertag=tree[now].covertag;\n\t\ttree[now].covertag=-1145141919810;\n\t}\n}\n\ninline void sumdown(LL now)\n{\n\tif(tree[now].sumtag)\n\t{\n\t\tcoverdown(now);\n\t\ttree[lson].maxn+=tree[now].sumtag,tree[rson].maxn+=tree[now].sumtag;\n\t\ttree[lson].sumtag+=tree[now].sumtag,tree[rson].sumtag+=tree[now].sumtag;\n\t\ttree[now].sumtag=0;\n\t}\n}\n\ninline void pushdown(LL now)\n{\n\tcoverdown(now),sumdown(now);\n}\n\ninline void build(LL now,LL l,LL r)\n{\n\tif(l==r)\n\t{\n\t\ttree[now].maxn=w[l];\n\t\ttree[now].covertag=-1145141919810;\n\t\ttree[now].sumtag=0;\n\t\treturn ;\n\t}\n\tLL mid=(l+r)>>1;\n\tbuild(lson,l,mid),build(rson,mid+1,r);\n\tpushup(now);\n}\n\ninline void tree_add(LL now,LL l,LL r,LL nl,LL nr,LL k)\n{\n\tif(nl<=l&&nr>=r)\n\t{\n\t\tcoverdown(now);\n\t\ttree[now].maxn+=k;\n\t\ttree[now].sumtag+=k;\n\t\treturn ;\n\t}\n\tpushdown(now);\n\tLL mid=(l+r)>>1;\n\tif(nl<=mid) tree_add(lson,l,mid,nl,nr,k);\n\tif(nr>=mid+1) tree_add(rson,mid+1,r,nl,nr,k);\n\tpushup(now);\n} \n\ninline void cover_add(LL now,LL l,LL r,LL nl,LL nr,LL k)\n{\n\tif(nl<=l&&nr>=r)\n\t{\n\t\ttree[now].sumtag=0;\n\t\ttree[now].maxn=k;\n\t\ttree[now].covertag=k;\n\t\treturn ;\n\t}\n\tpushdown(now);\n\tLL mid=(l+r)>>1;\n\tif(nl<=mid) cover_add(lson,l,mid,nl,nr,k);\n\tif(nr>=mid+1) cover_add(rson,mid+1,r,nl,nr,k);\n\tpushup(now);\n}\n\ninline LL get_max(LL now,LL l,LL r,LL nl,LL nr)\n{\n\tif(nl<=l&&nr>=r)\n\t{\n\t\treturn tree[now].maxn;\n\t}\n\tpushdown(now);\n\tLL mid=(l+r)>>1;\n\tLL res=-inf;\n\tif(nl<=mid) res=max(res,get_max(lson,l,mid,nl,nr));\n\tif(nr>=mid+1) res=max(res,get_max(rson,mid+1,r,nl,nr));\n\treturn res;\n}\n\nint main(int argc, char const *argv[])\n{\n\tn=read(),Q=read();\n\tfor(LL i=1;i<=n;i++) w[i]=read();\n\tbuild(1,1,n);\n\tfor(int i=1;i<=n*4;i++) tree[i].covertag=-1145141919810;\n\twhile(Q--)\n\t{\n\t\tLL pos,l,r;\n\t\tpos=read(),l=read(),r=read();\n\t\tif(pos==1)\n\t\t{\n\t\t\tLL k=read();\n\t\t\tcover_add(1,1,n,l,r,k);\n\t\t}\n\t\telse if(pos==2)\n\t\t{\n\t\t\tLL k=read();\n\t\t\ttree_add(1,1,n,l,r,k);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%lld\\n\",get_max(1,1,n,l,r));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1635340471,
        "uid": 64976,
        "name": "hewo",
        "ccfLevel": 5,
        "title": "\u9898\u89e3\uff1aP1253"
    },
    {
        "content": "\u6211\u4e2a\u4eba\u8ba4\u4e3a\u6b64\u9898\u6bd4\u8f83\u9002\u5408\u63d0\u9ad8\u7ec4\u9009\u624b\u7ec3\u624b\uff0c\u4e3b\u8981\u9700\u8981\u60f3\u6e05\u695a\u5982\u4f55\u4e0b\u653e\u61d2\u6807\u8bb0\u3002\n\n\u5bf9\u6b64\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\uff1a\n\n1.\u7ed3\u6784\u4f53\u91cc\u8981\u5b58\u4ec0\u4e48\uff1a\n\n```cpp\nstruct SGT{\n\tLL tag1,tag2;\n\tLL max_;\n\tint l,r;\n\tbool used;\n}tree[N<<2];\n```\n\n\u6b64\u5904\u6709\u4e24\u4e2a\u6807\u8bb0\u5206\u522b\u662f\u64cd\u4f5c\u4e00\u548c\u4e8c\uff0c\u5e03\u5c14\u53d8\u91cf\u4ee3\u8868\u6709\u6ca1\u6709\u4e00\u64cd\u4f5c\u9700\u4e0b\u65b9\u3002\n\n2.\u8003\u8651\u5982\u4f55\u4e0b\u653e\u6807\u8bb0\uff1a\n\n```cpp\nvoid pushdown(int p){\n\tif(tree[p].used){\n\t\ttree[p<<1].tag1=tree[p].tag1;\n\t\ttree[p<<1|1].tag1=tree[p].tag1;\n\t\ttree[p<<1].tag2=tree[p].tag2;\n\t\ttree[p<<1|1].tag2=tree[p].tag2; \n\t\ttree[p<<1].max_=tree[p].tag1+tree[p].tag2;\n\t\ttree[p<<1|1].max_=tree[p].tag1+tree[p].tag2;\n\t\ttree[p<<1].used=tree[p<<1|1].used=1;\n\t}else{\n\t\ttree[p<<1].tag2+=tree[p].tag2;\n\t\ttree[p<<1|1].tag2+=tree[p].tag2;\n\t\ttree[p<<1].max_+=tree[p].tag2;\n\t\ttree[p<<1|1].max_+=tree[p].tag2;\n\t}\n\ttree[p].used=tree[p].tag1=tree[p].tag2=0;\n}\n```\n\n\u5982\u679c\u6709\u4e00\u6807\u8bb0\uff0c\u5219\u6b64\u65f6\u5b50\u8282\u70b9\u5176\u524d\u9762\u4fdd\u5b58\u7684\u503c\u90fd\u4f1a\u88ab\u8986\u76d6\uff1a\n\n1.\u5b50\u8282\u70b9\u539f\u672c\u7684\u4e00\uff0c\u4e8c\u6807\u8bb0\u90fd\u5220\u9664\u5e76\u88ab\u8d4b\u503c\n\n2.\u5b50\u8282\u70b9\u7684\u6700\u503c\u5e94\u4e3a\u8d4b\u503c\u6807\u8bb0+\u589e\u52a0\u6807\u8bb0\u7684\u548c\n\n3.\u8bb0\u5f97\u6807\u8bb0\u5e03\u5c14\u503c\n\n\u5426\u5219\uff0c\u6309\u533a\u95f4\u52a0\u6a21\u677f\u5b9e\u73b0\u3002\n\n\u6700\u540e\u8bb0\u5f97\u5c06\u539f\u8282\u70b9\u6e05\u7a7a\n\n\u4ee5\u4e0a\u5c31\u662f\u5bf9\u61d2\u6807\u8bb0\u4e0b\u653e\u7684\u5206\u6790\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+5;\ntypedef long long LL;\nstruct SGT{\n\tLL tag1,tag2;\n\tLL max_;\n\tint l,r;\n\tbool used;\n}tree[N<<2];\nint n,m;\nLL a[N];\nvoid pushup(int p){\n\ttree[p].max_=max(tree[p<<1].max_,tree[p<<1|1].max_);\n}\nvoid pushdown(int p){\n\tif(tree[p].used){\n\t\ttree[p<<1].tag1=tree[p].tag1;\n\t\ttree[p<<1|1].tag1=tree[p].tag1;\n\t\ttree[p<<1].tag2=tree[p].tag2;\n\t\ttree[p<<1|1].tag2=tree[p].tag2; \n\t\ttree[p<<1].max_=tree[p].tag1+tree[p].tag2;\n\t\ttree[p<<1|1].max_=tree[p].tag1+tree[p].tag2;\n\t\ttree[p<<1].used=tree[p<<1|1].used=1;\n\t}else{\n\t\ttree[p<<1].tag2+=tree[p].tag2;\n\t\ttree[p<<1|1].tag2+=tree[p].tag2;\n\t\ttree[p<<1].max_+=tree[p].tag2;\n\t\ttree[p<<1|1].max_+=tree[p].tag2;\n\t}\n\ttree[p].used=tree[p].tag1=tree[p].tag2=0;\n}\nvoid build(int p,int l,int r){\n\ttree[p].l=l,tree[p].r=r;\n\ttree[p].max_=-1e18;\n\tif(l==r){\n\t\ttree[p].max_=a[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tpushup(p);\n}\nvoid change(int p,int l,int r,LL vl){\n\tif(l<=tree[p].l&&tree[p].r<=r){\n\t\ttree[p].tag1=vl;\n\t\ttree[p].tag2=0;\n\t\ttree[p].max_=vl;\n\t\ttree[p].used=1;\n\t\treturn;\n\t}\n\tpushdown(p);\n\tint mid=(tree[p].l+tree[p].r)>>1;\n\tif(l<=mid) change(p<<1,l,r,vl);\n\tif(mid+1<=r) change(p<<1|1,l,r,vl);\n\tpushup(p);\n}\nvoid update(int p,int l,int r,LL vl){\n\tif(l<=tree[p].l&&tree[p].r<=r){\n\t\ttree[p].tag2+=vl;\n\t\ttree[p].max_+=vl;\n\t\treturn;\n\t}\n\tpushdown(p);\n\tint mid=(tree[p].l+tree[p].r)>>1;\n\tif(l<=mid) update(p<<1,l,r,vl);\n\tif(mid+1<=r) update(p<<1|1,l,r,vl);\n\tpushup(p);\n}\nLL query(int p,int l,int r){\n\tif(l<=tree[p].l&&tree[p].r<=r){\n\t\treturn tree[p].max_;\n\t}\n\tpushdown(p);\n\tint mid=(tree[p].l+tree[p].r)>>1;\n\tLL res=-1e18;\n\tif(l<=mid) res=max(res,query(p<<1,l,r));\n\tif(mid+1<=r) res=max(res,query(p<<1|1,l,r));\n\treturn res;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%lld\",&a[i]);\n\t}\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tint opt,l,r;\n\t\tLL vl;\n\t\tscanf(\"%d%d%d\",&opt,&l,&r);\n\t\tif(opt==1||opt==2) scanf(\"%lld\",&vl);\n\t\tif(opt==1){\n\t\t\tchange(1,l,r,vl);\n\t\t}else if(opt==2) update(1,l,r,vl);\n\t\telse printf(\"%lld\\n\",query(1,l,r));\n\t}\n\treturn 0;\n}\n\n```\n\n\u5982\u6709\u9519\u8bef\uff0c\u8bf7\u5728\u8bc4\u8bba\u533a\u63d0\u51fa\u6216\u79c1\u804a\u3002\n\n   \n",
        "postTime": 1635602295,
        "uid": 485993,
        "name": "Illumina",
        "ccfLevel": 6,
        "title": "P1253\u9898\u89e3"
    },
    {
        "content": "## \u300c\u601d\u8def\u7b80\u8ff0\u300d\n\n\u4e00\u9053\u6bd4\u8f83\u677f\u7684\u7ebf\u6bb5\u6811\u5427\uff0c\u6bd4\u8f83\u9002\u5408\u65b0\u624b\u62ff\u6765\u7ec3\u624b\u3002\n\n\u9898\u610f\u975e\u5e38\u6e05\u695a\u4e86\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u9700\u8981\u4e00\u79cd\u652f\u6301\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u4fee\u6539\u7684\u6570\u636e\u7ed3\u6784\uff0c\u90a3\u4e48\u5f88\u81ea\u7136\u7684\u5c31\u80fd\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u6765\u89e3\u51b3\u3002\n\n\u56e0\u4e3a\u6709\u4e24\u79cd\u533a\u95f4\u4fee\u6539\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2a Tag\uff0c\u4e0b\u4f20\u7684\u64cd\u4f5c\u548c\u6b63\u5e38\u7684\u533a\u95f4\u52a0\u6ca1\u6709\u592a\u591a\u533a\u522b\uff0c\u53ea\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u5728\u4e0b\u4f20\u65f6\uff0c\u8981\u5148\u4f20 Cover \u64cd\u4f5c\u518d\u4e0b\u4f20 Add \u64cd\u4f5c\u3002\n\n## \u300cCode\u300d\n\n\u56e0\u4e3a\u6bcf\u6b21\u64cd\u4f5c\u7684 $x \\le 10^9$\uff0c\u6240\u4ee5\u6ce8\u610f\u8981\u5f00 `long long` \u548c `INF` \u503c\u7684\u5927\u5c0f\u3002\n\n\u524d\u9762\u7684\u5b66\u957f\u63d0\u4f9b\u4e86\u6307\u9488\u7684\u5199\u6cd5\uff0c\u6211\u8fd9\u91cc\u5219\u662f\u76f8\u5bf9\u666e\u901a\u7684\u6570\u7ec4\u5199\u6cd5\u3002\n\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\n\n#define lc(x) (x<<1)\n#define rc(x) (x<<1|1)\n#define Heriko return\n#define Deltana 0\n#define Romanno 1\n#define S signed\n#define LL long long\n#define R register\n#define I inline\n#define CI const int\n#define mst(a, b) memset(a, b, sizeof(a))\n#define ON std::ios::sync_with_stdio(false);cin.tie(0)\n#define Files() freopen(\"RNMTQ.in\",\"r\",stdin);freopen(\"RNMTQ.out\",\"w\",stdout)\n\nusing namespace std;\n\ntemplate<typename J>\nI void fr(J &x)\n{\n    short f(1);x=0;char c=getchar();\n\n    while(c<'0' or c>'9')\n    {\n        if(c=='-') f=-1;\n        \n        c=getchar();\n    }\n\n    while (c>='0' and c<='9') \n    {\n        x=(x<<3)+(x<<1)+(c^=48);\n        c=getchar();\n    }\n   \n    x*=f;\n}\n\ntemplate<typename J>\nI void fw(J x,bool k)\n{\n    if(x<0) x=-x,putchar('-');\n\n    static short stak[35];short top(0);\n\n    do\n    {\n        stak[top++]=x%10;\n        x/=10;\n    }\n    while(x);\n    while(top) putchar(stak[--top]+'0');\n\n    k?puts(\"\"):putchar(' ');\n}\n\ntemplate<typename J>\nI J Hmax(const J &x,const J &y) {Heriko x>y?x:y;}\n\nconst LL MXX(1e6+1),INF(1e12);\n\nint n,q;\n\nstruct Node\n{\n    int l,r;LL mx,tg1,tg2;\n}\n\nt[MXX<<2];\n\nI void Pushup(int x) {t[x].mx=Hmax(t[lc(x)].mx,t[rc(x)].mx);}\n\nI void Pushdown(int x)\n{\n    if(t[x].tg2!=INF)\n    {\n        t[lc(x)].tg1=0;\n        t[lc(x)].tg2=t[x].tg2;\n        t[lc(x)].mx=t[x].tg2;\n        t[rc(x)].tg1=0;\n        t[rc(x)].tg2=t[x].tg2;\n        t[rc(x)].mx=t[x].tg2;\n        t[x].tg2=INF;\n    }\n\n    if(t[x].tg1)\n    {\n        t[lc(x)].tg1+=t[x].tg1;\n        t[lc(x)].mx+=t[x].tg1;\n        t[rc(x)].tg1+=t[x].tg1;\n        t[rc(x)].mx+=t[x].tg1;\n        t[x].tg1=0;\n    }\n}\n\nvoid Build(int x,int l,int r)\n{\n    t[x].l=l,t[x].r=r;t[x].mx=t[x].tg1=0;t[x].tg2=INF;\n\n    if(l==r)\n    {\n        fr(t[x].mx);\n\n        Heriko;\n    }\n\n    int mid((l+r)>>1);\n    Build(lc(x),l,mid);Build(rc(x),mid+1,r);\n    Pushup(x);\n}\n\nvoid ModifyAdd(int x,int lx,int rx,LL v)\n{\n    if(lx<=t[x].l and t[x].r<=rx)\n    {\n        t[x].tg1+=v;t[x].mx+=v;\n\n        Heriko;\n    }\n\n    Pushdown(x);\n    int mid((t[x].l+t[x].r)>>1);\n\n    if(lx<=mid) ModifyAdd(lc(x),lx,rx,v);\n    \n    if(rx>mid) ModifyAdd(rc(x),lx,rx,v);\n\n    Pushup(x);\n}\n\nvoid ModifyChange(int x,int lx,int rx,LL v)\n{\n    if(lx<=t[x].l and t[x].r<=rx)\n    {\n        t[x].tg1=0;t[x].tg2=v;t[x].mx=v;\n\n        Heriko;\n    }\n\n    Pushdown(x);\n    int mid((t[x].l+t[x].r)>>1);\n\n    if(lx<=mid) ModifyChange(lc(x),lx,rx,v);\n    \n    if(rx>mid) ModifyChange(rc(x),lx,rx,v);\n\n    Pushup(x);\n}\n\nLL Query(int x,int lx,int rx)\n{\n    if(lx<=t[x].l and t[x].r<=rx) Heriko t[x].mx;\n\n    LL res(-INF);int mid((t[x].l+t[x].r)>>1);\n\n    Pushdown(x);\n\n    if(lx<=mid) res=Hmax(Query(lc(x),lx,rx),res);\n    \n    if(rx>mid) res=Hmax(Query(rc(x),lx,rx),res);\n\n    Heriko res;\n}\n\nS main()\n{\n    fr(n),fr(q);Build(1,1,n);\n\n    while(q--)\n    {\n        int opt,l,r;LL x;\n        fr(opt),fr(l),fr(r);\n\n        if(opt==1) fr(x),ModifyChange(1,l,r,x);\n        else if(opt==2) fr(x),ModifyAdd(1,l,r,x);\n        else fw(Query(1,l,r),1);\n    }\n    \n    Heriko Deltana;\n}\n```\n\n\u5982\u6709\u9519\u8bef\u4e4b\u5904\u8bf7\u5404\u4f4d\u5927\u4f6c\u53ca\u65f6\u6307\u51fa\u3002",
        "postTime": 1635233199,
        "uid": 407417,
        "name": "HerikoDeltana",
        "ccfLevel": 4,
        "title": "P1253\u9898\u89e3"
    },
    {
        "content": "\u95ee\u9898\u6838\u5fc3\u5728\u4e8e\u5982\u4f55\u533a\u95f4\u4fee\u6539   \n\u6211\u4eec\u65b0\u5f00\u4e00\u4e2a\u61d2\u6807\u8bb0\uff0c\u8bb0\u5f55\u533a\u95f4\u4fee\u6539\u540e\u7684\u503c   \n\u628a\u8fd9\u4e2a\u61d2\u6807\u8bb0\u8bb0\u5f55\u4e3a\u4e00\u4e2a\u7279\u6b8a\u7684\u503c\uff0c\u4e0b\u4f20\u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6807\u8bb0\uff0c\u5373\u8bb0\u5f55\u7684\u503c\u4e3a\u8bbe\u5b9a\u7684\u7279\u6b8a\u503c\u65f6\uff0c\u5c31\u4e0d\u7528\u4e0b\u4f20\u4e86\uff0c\u8868\u793a\u5df2\u7ecf\u4e0b\u4f20\u8fc7\u6216\u8005\u6ca1\u6709\u6807\u8bb0\u3002   \n\u9700\u8981\u6ce8\u610f\uff0c\u5f53\u4e0b\u4f20\u65b0\u7684\u61d2\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u9700\u8981\u6e05\u7a7a\u677f\u5b50\u91cc\u8868\u793a\u589e\u52a0\u7684\u61d2\u6807\u8bb0   \n\u5177\u4f53\u5185\u5bb9\u8be6\u89c1\u6ce8\u91ca\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define lc(x) x<<1\n#define rc(x) x<<1|1\nint n,q;\nconst int inf=1145141919810;//\u7279\u6b8a\u7684\u503c \nclass xds{\n\tpublic:\n\tint a[1000005],tr[4000005],tag[4000005],mdf[4000005];//tag\u662f\u8868\u793a\u589e\u52a0\u7684\u61d2\u6807\u8bb0\uff0cmdf\u8868\u793a\u4fee\u6539\u7684\u61d2\u6807\u8bb0 \n\tvoid push_tag(int x){\n\t\ttag[lc(x)]+=tag[x],tr[lc(x)]+=tag[x];\n\t\ttag[rc(x)]+=tag[x],tr[rc(x)]+=tag[x];\n\t\ttag[x]=0;\n\t}\n\tvoid push_mdf(int x){\n\t\tif(mdf[x]!=inf){//\u5982\u679c\u6ca1\u6709\u4e0b\u4f20\u5e76\u4e14\u6709\u6807\u8bb0\uff0c\u624d\u4f1a\u4e0b\u4f20 \n\t\t\ttr[lc(x)]=mdf[lc(x)]=mdf[x],tag[lc(x)]=0;\n\t\t\ttr[rc(x)]=mdf[rc(x)]=mdf[x],tag[rc(x)]=0;\n\t\t\tmdf[x]=inf;\n\t\t}\n\t}\n\tvoid build(int x,int l,int r){\n\t\tmdf[x]=inf;\n\t\tif(l==r){\n\t\t\ttr[x]=a[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(lc(x),l,mid);build(rc(x),mid+1,r);\n\t\ttr[x]=max(tr[lc(x)],tr[rc(x)]); \n\t}\n\tvoid add(int x,int l,int r,int ql,int qr,int v){\n\t\tif(ql<=l&&qr>=r){\n\t\t\ttr[x]+=v;tag[x]+=v;\n\t\t\treturn;\n\t\t}\n\t\tpush_mdf(x);//push_down\u6b21\u5e8f\u5982\u679c\u9519\u4e86\uff0c\u5c31\u4f1a\u6e05\u7a7atag\u6570\u7ec4 \n\t\tpush_tag(x);\n\t\tint mid=(l+r)>>1;\n\t\tif(ql<=mid) add(lc(x),l,mid,ql,qr,v);\n\t\tif(qr>mid) add(rc(x),mid+1,r,ql,qr,v);\n\t\ttr[x]=max(tr[lc(x)],tr[rc(x)]);\n\t}\n\tvoid modify(int x,int l,int r,int ql,int qr,int v){\n\t\tif(ql<=l&&qr>=r){\n\t\t\ttr[x]=mdf[x]=v;\n\t\t\ttag[x]=0;\n\t\t\treturn;\n\t\t}\n\t\tpush_mdf(x);\n\t\tpush_tag(x);\n\t\tint mid=(l+r)>>1;\n\t\tif(ql<=mid) modify(lc(x),l,mid,ql,qr,v);\n\t\tif(qr>mid) modify(rc(x),mid+1,r,ql,qr,v);\n\t\ttr[x]=max(tr[lc(x)],tr[rc(x)]);\n\t}\n\tint query(int x,int l,int r,int ql,int qr){\n\t\tif(ql<=l&&qr>=r) return tr[x];\n\t\tpush_mdf(x);\n\t\tpush_tag(x);\n\t\tint mid=(l+r)>>1,sm=-inf;\n\t\tif(ql<=mid) sm=max(sm,query(lc(x),l,mid,ql,qr));\n\t\tif(qr>mid) sm=max(sm,query(rc(x),mid+1,r,ql,qr));\n\t\treturn sm;\n\t}\n}tre;\nmain(){\n\tscanf(\"%lld%lld\",&n,&q);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld\",&tre.a[i]);\n\ttre.build(1,1,n);\n\tfor(int i=1,op,l,r,x;i<=q;i++){\n\t\tscanf(\"%lld%lld%lld\",&op,&l,&r);\n\t\tif(op==1){\n\t\t\tscanf(\"%lld\",&x);\n\t\t\ttre.modify(1,1,n,l,r,x);\n\t\t}else{\n\t\t\tif(op==2){\n\t\t\t\tscanf(\"%lld\",&x);\n\t\t\t\ttre.add(1,1,n,l,r,x);\n\t\t\t}else{\n\t\t\t\tprintf(\"%lld\\n\",tre.query(1,1,n,l,r));\n\t\t\t}\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1635216840,
        "uid": 511303,
        "name": "wangzhiyuan123",
        "ccfLevel": 7,
        "title": "P1253 \u6276\u82cf\u7684\u95ee\u9898"
    },
    {
        "content": "# yLOI2018 \u6276\u82cf\u7684\u95ee\u9898\n\n\u7ebf\u6bb5\u6811\u8bad\u7ec3\u9898\n\n## \u9898\u610f\n\n\u7ef4\u62a4\u5e8f\u5217\uff0c\u8981\u6c42\u652f\u6301\u533a\u95f4\u8d4b\u503c\uff0c\u533a\u95f4\u589e\u91cf\uff0c\u67e5\u8be2\u533a\u95f4\u6700\u503c\u3002\n\n## \u7ebf\u6bb5\u6811\n\n\u524d\u7f6e\u77e5\u8bc6: [\u7ebf\u6bb5\u6811](https://www.luogu.com.cn/problem/P3372)\n\n\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u95ee\u9898\u9996\u5148\u60f3\u5230\u7ebf\u6bb5\u6811\uff0c\u53ea\u662f\u8fd9\u91cc\u7684\u7ebf\u6bb5\u6811\u548c\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u6709\u4e24\u79cd\u4fee\u6539\u3002\n\n\u6bcf\u4e2a\u8282\u70b9\u5bf9\u533a\u95f4\u8d4b\u503c\u7ef4\u62a4\u4e00\u4e2a\u6807\u8bb0 $Val$\uff0c\u5982\u679c\u5b83\u4e0d\u662f $\\infty$ \u90a3\u4e48\u5c31\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u5168\u90e8\u88ab\u8d4b\u6210 $Val$ \u4e86\u3002\n\n\u6bcf\u4e2a\u8282\u70b9\u5bf9\u533a\u95f4\u589e\u91cf\u7ef4\u62a4\u4e00\u4e2a\u6807\u8bb0 $Tag$\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u533a\u95f4\u5728\u4e0a\u4e00\u6b21\u4e0b\u4f20\u540e\u88ab\u589e\u52a0\u4e86 $Tag$\u3002\n\n\u4e24\u4e2a\u6807\u8bb0\u4f18\u5148\u7ea7\u4e0d\u540c\uff0c\u65b0\u6253\u7684 $Val$ \u53ef\u4ee5\u8986\u76d6\u6389\u4e4b\u524d\u7684 $Tag$\uff0c\u4f46\u662f\u65b0\u6253\u7684 $Tag$ \u4e0d\u80fd\u8986\u76d6\u4e4b\u524d\u7684 $Val$\uff0c\u53ea\u80fd\u53e0\u52a0\u5728 $Val$ \u4e0a\uff0c\u4f7f\u5b9e\u9645\u6743\u503c\u53d8\u6210 $Val + Tag$\u3002\n\n\u4e0a\u9762\u4e24\u4e2a\u503c\u662f\u901a\u8fc7\u6807\u8bb0\u4e0b\u4f20\u7ef4\u62a4\u7684\u3002\n\n\u63a5\u4e0b\u6765\u9700\u8981\u6709\u4e00\u4e2a\u503c $Mx$\uff0c\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u533a\u95f4\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u503c\u9700\u8981\u901a\u8fc7\u4e0a\u4f20\u7ef4\u62a4\uff0c\u4e00\u4e2a\u53f6\u8282\u70b9\u7684 $Mx$ \u5c31\u662f\u5b83\u4ee3\u8868\u5355\u70b9\u7684\u503c\uff0c\u4e00\u4e2a\u975e\u53f6\u8282\u70b9\u7684 $Mx$ \u662f\u5b83\u4e24\u4e2a\u513f\u5b50\u7684 $Mx$ \u7684\u6700\u5927\u503c\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u9012\u5f52\u65b9\u5f0f\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u5b8c\u5168\u76f8\u540c\u3002\u8fc7\u7a0b\u4e2d\u4e00\u5b9a\u8981\u6ce8\u610f\u4e24\u4e2a\u6807\u8bb0\u7684\u4f18\u5148\u987a\u5e8f\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u672c\u9898\u7684\u6570\u636e\u4e2d\uff0c$x$ \u7684\u7edd\u5bf9\u503c\u662f $10^9$ \u7684\uff0c\u64cd\u4f5c\u6570\u662f $10^6$\uff0c\u4e5f\u5c31\u662f\u8bf4\u5355\u70b9\u7684\u503c\u53ef\u80fd\u4f1a\u7206 `int`\uff0c\u6240\u4ee5\u7528 `long long` \u5b58\u50a8\u3002\n\n\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u975e\u5e38\u9002\u5408\u7528\u6307\u9488\u5199\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u4ee3\u7801\u4f7f\u7528\u4e86\u6307\u9488\uff0c\u4e0d\u8981\u6297\u62d2\u6307\u9488\uff0c\u5b66\u4f1a\u6307\u9488\u5bf9\u4e8e\u4e4b\u540e\u5b66\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u6765\u8bf4\u662f\u4e00\u52b3\u6c38\u9038\u7684\u3002\n\n\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\uff0c\u7701\u7565\u4e86\u5934\u6587\u4ef6\u548c\u5feb\u8bfb\u3002\n\n```cpp\n#define Wild_Donkey 0\n#define INF 0x3f3f3f3f3f3f3f3f\nlong long Ans(0), C, a[2000005];\nunsigned m, n, A, B, D;\nstruct Node {\n  Node* LS, * RS;\n  long long Mx, Val, Tag;\n  inline void PsDw () {\n    if(Val != INF) {\n      LS->Mx = RS->Mx = LS->Val = RS->Val = Val + Tag;\n      LS->Tag = RS->Tag = Tag = 0;\n      Val = INF;\n    } else {\n      if(Tag) {\n        LS->Mx += Tag, RS->Mx += Tag;\n        LS->Tag += Tag, RS->Tag += Tag;\n        Tag = 0;\n      }\n    }\n  }\n  inline void Chg (unsigned L, unsigned R) {\n    if((A <= L) && (R <= B)) {Tag = 0, Mx = Val = C;return;}\n    unsigned Mid((L + R) >> 1);\n    PsDw();\n    if(A <= Mid) LS->Chg(L, Mid);\n    if(B > Mid) RS->Chg(Mid + 1, R);\n    Mx = max(LS->Mx, RS->Mx);\n  }\n  inline void Inc (unsigned L, unsigned R) {\n    if((A <= L) && (R <= B)) {Mx += C, Tag += C;return;}\n    unsigned Mid((L + R) >> 1);\n    PsDw();\n    if(A <= Mid) LS->Inc(L, Mid);\n    if(B > Mid) RS->Inc(Mid + 1, R);\n    Mx = max(LS->Mx, RS->Mx);\n  }\n  inline void Qry (unsigned L, unsigned R) {\n    if((A <= L) && (R <= B)) {Ans = max(Ans, Mx);return;}\n    unsigned Mid((L + R) >> 1);\n    PsDw();\n    if(A <= Mid) LS->Qry(L, Mid);\n    if(B > Mid) RS->Qry(Mid + 1, R);\n  }\n}N[2000005], * CntN(N);\ninline void Build(Node* x, unsigned L, unsigned R) {\n  x->Val = INF, x->Tag = 0;\n  if(L == R) {x->Mx = x->Val = a[L]; return;}\n  unsigned Mid((L + R) >> 1);\n  Build(x->LS = ++CntN, L, Mid);\n  Build(x->RS = ++CntN, Mid + 1, R);\n  x->Mx = max(x->LS->Mx, x->RS->Mx);\n}\nsigned main() {\n  n = RD(), m = RD();\n  for (unsigned i(1); i <= n; ++i) a[i] = RDsg();\n  Build(N, 1, n);\n  for (unsigned i(1); i <= m; ++i) {\n    D = RD(), A = RD(), B = RD();\n    if(D ^ 3) {\n      C = RDsg();\n      if(D ^ 1) N->Inc(1, n);\n      else N->Chg(1, n);\n    } else {\n      Ans = -INF, N->Qry(1, n);\n      printf(\"%lld\\n\", Ans);\n    }\n  }\n  return Wild_Donkey;\n}\n```",
        "postTime": 1635229726,
        "uid": 143771,
        "name": "\u6bd4\u5229\u2642\u6d77\u7075\u987f",
        "ccfLevel": 8,
        "title": "yLOI2018 \u6276\u82cf\u7684\u95ee\u9898"
    },
    {
        "content": "# yLOI 2018 \u6276\u82cf\u7684\u95ee\u9898\n\n\u54cd\u5e94\u5495\u5495\u7684\u53f7\u53ec\uff0c\u6765\u53d1\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u7531\u4e8e\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u5df2\u7ecf\u7531[\u6bd4\u5229\u2642\u6d77\u7075\u987f](https://www.luogu.com.cn/blog/Wild-Donkey/yloi2018-fu-su-di-wen-ti)\u8bb2\u89e3\u8fc7\u4e86\uff0c\u6211\u6765\u8865\u5145\u4e00\u4e2a\u5e73\u8861\u6811\u7684\u9898\u89e3\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a[\u5e73\u8861\u6811](https://www.cnblogs.com/zaza-zt/p/15058882.html)\u3002\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u5199\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7ef4\u62a4\u533a\u95f4\u52a0\u3001\u533a\u95f4\u8d4b\u503c\u3001\u533a\u95f4\u6c42\u6700\u5927\u3002\n\n## \u5e73\u8861\u6811\n\n\u8fd9\u91cc\u8bf7\u5141\u8bb8\u6211\u5047\u8bbe\u8bfb\u8005\u5df2\u7ecf\u4e86\u89e3\u4e86\u4f38\u5c55\u6811\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u4f38\u5c55\u6811\u53ef\u4ee5\u65b9\u4fbf\u7684\u901a\u8fc7\u201c\u4f38\u5c55\u201d\u64cd\u4f5c\u968f\u610f\u7684\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u533a\u95f4\uff08\u5728\u6811\u4e0a\u8868\u793a\u4e3a\u4e00\u4e2a\u5b50\u6811\uff09\u3002\u4e8e\u662f\uff0c\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u662f\u5bf9\u5b50\u6811\u505a\u4fee\u6539\u4ee5\u53ca\u67e5\u8be2\u3002\n\n### \u7ef4\u62a4\u6700\u5927\u503c\n\n\u5728\u6bcf\u4e2a\u8282\u70b9\u5185\u7ef4\u62a4\u4e00\u4e2a max\uff0c\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u7684\u6700\u5927\u503c\u3002\n\n\u548c\u7ebf\u6bb5\u6811\u4e0d\u540c\u7684\u662f\uff0c\u5e73\u8861\u6811\u4e0a\u975e\u53f6\u5b50\u8282\u70b9\u4e5f\u8868\u793a\u4e86\u67d0\u4e2a\u4f4d\u7f6e\u7684\u4fe1\u606f\u3002\u5f53\u6211\u4eec\u548c\u5e76\u4e24\u4e2a\u5b50\u6811\u5185\u7684\u4fe1\u606f\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u4e86\u7edf\u8ba1\u8282\u70b9\u672c\u8eab\u7684\u4fe1\u606f\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nx->max=std::max(x->val,std::max(x->son[0]->max,x->son[1]->max));\n//\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u6700\u5927\u503c=max(\u5de6\u513f\u5b50\u6700\u5927\u503c\uff0c\u53f3\u513f\u5b50\u6700\u5927\u503c\uff0c\u672c\u8282\u70b9\u503c)\n```\n\n### \u4fee\u6539\n\n\u7c7b\u4f3c\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u5bf9\u4fee\u6539\u64cd\u4f5c\u4e5f\u9700\u8981\u6253\u4e00\u4e2a\u6807\u8bb0\uff08\u6bd5\u7adf\u6bcf\u6b21\u4e0b\u4f20\u5230\u53f6\u5b50\u8282\u70b9\u5b9e\u5728\u662f\u592a\u6162\u4e86\uff09\u3002\u8fd9\u91cc\u6709\u4e24\u79cd\u4fee\u6539\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u7ef4\u62a4\u4e24\u4e2a\u6807\u8bb0\uff1a\n\n* Add \u6807\u8bb0\n\n\t\u8fd9\u4e2a\u6807\u8bb0\u662f\u8868\u793a\u8981\u628a\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u7684\u503c\u52a0\u4e0a Add\u3002\n   \n   \u663e\u7136\u4fee\u6539\u5b8c\u4e86\u4e4b\u540e\uff0c\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u6700\u5927\u503c\u5e94\u8be5\u662f max+Add\u3002\n\n* Change \u6807\u8bb0\n\n\t\u8fd9\u4e2a\u6807\u8bb0\u662f\u8868\u793a\u8981\u628a\u8fd9\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u8d4b\u503c\u4e3a Change\u3002\n   \n   \u65e2\u7136\u6240\u6709\u503c\u90fd\u88ab\u8d4b\u503c\u4e3a Change\uff0c\u5b50\u6811\u5185\u6700\u5927\u503c\u81ea\u7136\u5c31\u662f Change\u3002\n   \n   \u6ce8\u610f\uff1a\u5982\u679c\u6211\u4eec\u7ed9\u4e00\u4e2a\u8282\u70b9\u6253\u4e0a Change \u6807\u8bb0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u7684 Add \u6807\u8bb0\u5c31\u5168\u90fd\u5931\u6548\u4e86\u3002\u56e0\u4e3a\u8fd9\u4e9b Add \u6807\u8bb0\u662f\u5728\u8fd9\u6b21\u8d4b\u503c\u4e4b\u524d\u521b\u5efa\u7684\u3002\u8d4b\u503c\u4e4b\u540e\uff0c\u4e4b\u524d\u7684 Add \u6807\u8bb0\u663e\u7136\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u548c max \u6ca1\u6709\u5f71\u54cd\u4e86\u3002\n   \n\u6709\u4e86\u6807\u8bb0\uff0c\u8fd8\u8981\u4e0b\u4f20\u8fd9\u4e9b\u6807\u8bb0\u3002\n\n\u5f53\u4e00\u4e2a\u8282\u70b9\u540c\u65f6\u62e5\u6709 Change \u6807\u8bb0 \u548c Add \u6807\u8bb0\u7684\u65f6\u5019\uff0c\u6839\u636e\u4e0a\u9762\u5728 Change \u6807\u8bb0\u4e2d\u63d0\u5230\u7684\uff0c\u8fd9\u4e9b Add \u6807\u8bb0\u4e00\u5b9a\u662f\u5728 Change \u6807\u8bb0\u4e4b\u540e\u88ab\u521b\u5efa\u7684\u3002\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u6839\u636e\u4fee\u6539\u987a\u5e8f\u4e0b\u4f20\u8fd9\u4e9b\u6807\u8bb0\uff0c\u5373\uff1a\u5148\u4e0b\u4f20 Change\uff0c\u540e\u4e0b\u4f20 Add\u3002\n\n```cpp\n//\u5bf9 x \u5b50\u6811\u6253 Change \u6807\u8bb0\ninline void ModifyValue(SplayTree *x,const int w){\n  x->max=x->val=w;\n  x->tag1=w;//\u8d4b\u503c\u6807\u8bb0\n  x->tag2=0;//\u6e05\u6389 Add \u6807\u8bb0\n}\n//\u5bf9 x \u5b50\u6811\u6253 Add \u6807\u8bb0\ninline void ModifyAdd(SplayTree *x,const int w){\n  x->max+=w;//\u4fee\u6539\u6700\u5927\u503c\n  x->val+=w;//\u7ef4\u62a4\u672c\u8282\u70b9\u7684\u4fe1\u606f\n  x->tag2+=w;//\u521b\u5efa Add \u6807\u8bb0\uff08\u591a\u4e2a Add \u6807\u8bb0\u53ef\u4ee5\u5408\u5e76\uff09\n}\ninline void PushDown(SplayTree *x){\n//\u5148 Change \uff0c\u540e Add\n  if(x->tag1!=infinity){\n    if(x->son[0]!=null) ModifyValue(x->son[0],x->tag1);\n    if(x->son[1]!=null) ModifyValue(x->son[1],x->tag1);\n    x->tag1=infinity;\n  }\n  if(x->tag2){\n    if(x->son[0]!=null) ModifyAdd(x->son[0],x->tag2);\n    if(x->son[1]!=null) ModifyAdd(x->son[1],x->tag2);\n    x->tag2=0;\n  }\n}\n```\n\n### \u6784\u5efa\u5e73\u8861\u6811\n\n\u7528\u201c\u7b1b\u5361\u5c14\u6811\u201d\u53ef\u4ee5 $O(n)$ \u521b\u5efa\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u4e0d\u8fc7\u8fd9\u91cc $O(n\\log n)$ \u8db3\u77e3\u3002\n\n\u6bcf\u6b21\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff08\u865a\u8282\u70b9\uff09\u5de6\u513f\u5b50\u63d2\u5165\u65b0\u7684\u8282\u70b9\u3002\n\n## $\\text{Talk is cheap,show you the code.}$\n\n```cpp\nconst int infinity=1e18;\nconst int maxn=1000005;\n#define int long long\n\n\nint n,q;\nstruct SplayTree{\n  int val,max,siz;\n  int tag1,tag2;\n  SplayTree *son[2],*fa;\n}node[maxn],*pool=node,*null,*root;\n\ninline void NewNode(const int w,SplayTree *fa){\n  SplayTree *p=++pool;\n  *p=(SplayTree){w,w,1,infinity,0,null,null,fa};\n  fa->son[0]=p;\n}\n//\u521b\u5efa\u65b0\u8282\u70b9\uff0c\u7236\u4eb2\u4e3a fa \uff0cfa \u7684\u5de6\u513f\u5b50\u662f\u65b0\u8282\u70b9\ninline void Update(SplayTree *x){\n  x->siz=x->son[0]->siz+x->son[1]->siz+1;\n  x->max=std::max(x->val,std::max(x->son[0]->max,x->son[1]->max));\n}\n//\u7ef4\u62a4\u5b50\u6811\u5927\u5c0f\uff0c\u7ef4\u62a4\u6700\u5927\u503c\ninline void ModifyValue(SplayTree *x,const int w){\n  x->max=x->val=w;\n  x->tag1=w;\n  x->tag2=0;\n}\ninline void ModifyAdd(SplayTree *x,const int w){\n  x->max+=w;\n  x->val+=w;\n  x->tag2+=w;\n}\ninline void PushDown(SplayTree *x){\n  if(x->tag1!=infinity){\n    if(x->son[0]!=null) ModifyValue(x->son[0],x->tag1);\n    if(x->son[1]!=null) ModifyValue(x->son[1],x->tag1);\n    x->tag1=infinity;\n  }\n  if(x->tag2){\n    if(x->son[0]!=null) ModifyAdd(x->son[0],x->tag2);\n    if(x->son[1]!=null) ModifyAdd(x->son[1],x->tag2);\n    x->tag2=0;\n  }\n}\ninline SplayTree *Find(int k){\n  SplayTree *x=root;\n  while(1){\n    PushDown(x);\n    if(x->son[0]->siz>=k)\n      x=x->son[0];\n    else{\n      k-=(x->son[0]->siz+1);\n      if(k==0) return x;\n      else x=x->son[1];\n    }\n  }\n}\n//\u627e\u5230\u7b2c k \u540d\ninline bool GetWhich(SplayTree *x){\n  return x->fa->son[1]==x;\n}\ninline void Rotate(SplayTree *x){\n  SplayTree *y=x->fa,*z=y->fa;\n  int k=GetWhich(x);\n  SplayTree *w=x->son[!k];\n  if(z!=null) z->son[GetWhich(y)]=x; x->son[!k]=y,y->son[k]=w;\n  if(w!=null) w->fa=y; y->fa=x,x->fa=z;\n  Update(y),Update(x);\n}\ninline void Splay(SplayTree *x,SplayTree *target=null){\n  while(x->fa!=target){\n    SplayTree *y=x->fa,*z=y->fa;\n    if(z!=target) Rotate(GetWhich(x)^GetWhich(y)?x:y);\n    Rotate(x);\n  }\n  if(target==null) root=x;\n}\nvoid Insert(const int k,const int w){\n  SplayTree *p=Find(k),*q=Find(k+1);\n  Splay(p),Splay(q,p);\n  //\u627e\u5230\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n  NewNode(w,q);\n}\nvoid Modify(const int L,const int R,const int w,const int mode){\n  SplayTree *p=Find(L),*q=Find(R+2);\n  Splay(p),Splay(q,p);\n  if(!mode) ModifyValue(q->son[0],w);\n  else ModifyAdd(q->son[0],w);\n}\nint Query(const int L,const int R){\n  SplayTree *p=Find(L),*q=Find(R+2);\n  Splay(p),Splay(q,p);\n  //\u53d6\u51fa\u533a\u95f4\u7684\u64cd\u4f5c\n  return q->son[0]->max;\n}\n\nvoid init(){\n  null=new SplayTree;\n  SplayTree *p=++pool,*q=++pool;\n  *null=(SplayTree){-infinity,-infinity,0,infinity,0,null,null,null};\n  *p=(SplayTree){-infinity,-infinity,1,infinity,0,null,q,null};\n  *q=(SplayTree){-infinity,-infinity,1,infinity,0,null,null,p};\n  root=p;\n  //\u521d\u59cb\u5316\uff0c\u521b\u5efa\u4e24\u4e2a\u865a\u8282\u70b9\n}\n\nsigned main(){\n  read(n),read(q);\n  init();\n  for(int i=1,x;i<=n;++i){\n    read(x);\n    Insert(i,x);\n  }\n  while(q--){\n    int opt,l,r,x;\n    read(opt),read(l),read(r);\n    if(opt==1){\n      read(x);\n      Modify(l,r,x,0);\n    }else if(opt==2){\n      read(x);\n      Modify(l,r,x,1);\n    }else write(Query(l,r)),putchar('\\n');\n  }\n  return 0;\n}\n```\n\n\u5e38\u6570\u7565\u5927\uff0c1.95s \u60ca\u9669\u901a\u8fc7\u3002",
        "postTime": 1635236619,
        "uid": 307143,
        "name": "\u4e00\u94ed\u541b\u4e00",
        "ccfLevel": 6,
        "title": "yLOI 2018 \u6276\u82cf\u7684\u95ee\u9898"
    }
]