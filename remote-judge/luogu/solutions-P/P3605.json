[
    {
        "content": "[${\\color{#aa66ee}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.com.cn/blog/Wendigo/)\n\n[P3605 \u3010\\[USACO17JAN\\]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011](https://www.luogu.com.cn/problem/P3605)\n\n### \u6b64\u9898\u7b97\u6cd5:\u6811\u72b6\u6570\u7ec4+$dfs$\n\n\u8fd9\u4ed4\u7ec6\u4e00\u60f3\u662f\u9053\u6bd4\u8f83\u7eaf\u7684\u6811\u72b6\u6570\u7ec4\u9898\n\n~~\u4f60\u770b\u4e86\u7c89\u5154\u7684\u9898\u89e3\u540e\u4f1a\u53d1\u73b0\u90a3\u4e2a$a[]$\u6570\u7ec4\u5c24\u4e3a\u9b3c\u755c~~\n\n![](https://s2.ax1x.com/2019/12/06/QYYvVA.jpg)\n\n>(\u624b\u753b\u62a8\u51fb\u7c89\u5154)\n\n**\u6211\u8fd9\u91cc\u6709\u6700\u5bb9\u6613\u7406\u89e3\u7684\u7b97\u6cd5\uff0c\u8d70\u8fc7\u8def\u8fc7\u4e0d\u8981\u9519\u8fc7**\n\n\u9996\u5148\u5c06\u62ff\u5230\u7684\u6570\u7ec4**\u79bb\u6563\u5316**(\u5982\u4e0b)\n\n```cpp\nfor(int i=1;i<=n;i++)\n\tscanf(\"%d\",p+i),b[i]=p[i];\nsort(b+1,b+n+1); //unique\u4ec0\u4e48\u7684\u771f\u7684\u6ca1\u5565\u7528\nfor(int i=1;i<=n;i++)\n\tp[i]=lower_bound(b+1,b+n+1,p[i])-b;\n```\n\u52a0\u5b8c**\u5355\u5411\u8fb9**\u540e$dfs$\uff1a\n\n\u82e5\u4ee4$ans[]$\u8868\u793a\u8282\u70b9\u7684\u6700\u7ec8\u7b54\u6848\uff0c\u5219\u6709\n\n>**$ans[x]=x$\u7684\u4e0b\u5c5e\u4e2d\u6bd4$x$\u5f3a\u7684**\n\n>**$~~~~~~~~~~~~=$\u6811\u72b6\u6570\u7ec4\u4e2d\u52a0\u4e86$x$\u4e0b\u5c5e\u540e\u6bd4$x$\u5f3a\u7684$-$\u539f\u6765\u5c31\u6bd4$x$\u5f3a\u7684**\n\n\u6240\u4ee5$dfs$\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a\n\n```cpp\nvoid dfs(int x){//x\u4e3a\u8282\u70b9\uff0cp[]\u4e3a\u79bb\u6563\u5316\u540e\u7684\u6570\u7ec4\n\t//hx\u4e3a\u503c\u57df\u6811\u72b6\u6570\u7ec4\n\tans[x]=-(hx.fsum(n)-hx.fsum(p[x]));//\u539f\u6765\u6bd4x\u5f3a\u7684\n\tfor(auto i:g[x]) dfs(i);     //\u52a0x\u7684\u4e0b\u5c5e\n\tans[x]+=(hx.fsum(n)-hx.fsum(p[x]));//\u540e\u6765\u6bd4x\u5f3a\u7684\n\thx.fix(p[x],1); //\u52a0x\u81ea\u5df1\n}\n```\n![](https://s2.ax1x.com/2019/12/06/QYUCng.jpg)\n\n\n\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801+\u6ce8\u91ca\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+10;\nint n,p[N],b[N],ans[N];\nvector<int> g[N];\nstruct hxtree{ //\u6811\u72b6\u6570\u7ec4\n\tint v[N];\n\tint flow(int x){\n\t\treturn x&-x;\n\t}\n\tvoid fix(int x,int y){\n\t\tfor(;x<=n;x+=flow(x))\n\t\t\tv[x]+=y;\n\t}\n\tint fsum(int x){\n\t\tint ret=0;\n\t\tfor(;x;x-=flow(x))\n\t\t\tret+=v[x];\n\t\treturn ret;\n\t}\n}hx;\nvoid dfs(int x){//x\u4e3a\u8282\u70b9\uff0cp[]\u4e3a\u79bb\u6563\u5316\u540e\u7684\u6570\u7ec4\n\t//hx\u4e3a\u503c\u57df\u6811\u72b6\u6570\u7ec4\n\tans[x]=-(hx.fsum(n)-hx.fsum(p[x]));//\u539f\u6765\u6bd4x\u5f3a\u7684\n\tfor(auto i:g[x]) dfs(i);     //\u52a0x\u7684\u4e0b\u5c5e\n\tans[x]+=(hx.fsum(n)-hx.fsum(p[x]));//\u540e\u6765\u6bd4x\u5f3a\u7684\n\thx.fix(p[x],1); //\u52a0x\u81ea\u5df1\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",p+i),b[i]=p[i];\n\tsort(b+1,b+n+1); //\u5bf9\u840c\u65b0\u5f88\u53cb\u597d\u7684\u4e24\u6b65\u79bb\u6563\u5316\n\tfor(int i=1;i<=n;i++)\n\t\tp[i]=lower_bound(b+1,b+n+1,p[i])-b;\n\t// for(int i=1;i<=n;i++)\n\t// \tprintf(\"%d%c\",p[i],\" \\n\"[i==n]);\n\tfor(int i=2;i<=n;i++){\n\t\tint fa;\n\t\tscanf(\"%d\",&fa);\n\t\tg[fa].push_back(i);\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d\\n\",ans[i]); //1+1=2\n\treturn 0;\n}\n```\n\n\u8fd9\u9898\u5c31\u50cf\u8eab\u8fb9\u7684\u201c\u840c\u65b0\u201d\u5411\u81ea\u5df1\u5b66\u4e60\uff0c\n\n\u7ed3\u679c\u4e0d\u4e45\u4ed6\u4eec\u5c31\u5206\u5230\u4e86\u7701\u9009\u73ed\uff0c\u800c\u81ea\u5df1\u8d8a\u6765\u8d8a\u5f31\u3002\n\n**\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u559c\u6b22\u5c31\u70b9\u4e2a\u8d5e\u5427\u3002**\n\n\u8c22\u8c22\u5927\u5bb6! !\n\n\n\n\n\n\n",
        "postTime": 1575635960,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "\u77ed\u7801\u5927\u5e08 #(\u6ed1\u7a3d)\n\n\u5148\u5bf9\u6743\u503c\u79bb\u6563\u5316\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u5b83\u7684\u5b50\u6811\u4e2d\u6bd4\u5b83\u5927\u7684\u8282\u70b9\u7684\u4e2a\u6570\u3002\n\n\u6240\u4ee5\u4e3a\u4e86\u65b9\u4fbf\u7edf\u8ba1\uff0c\u79bb\u6563\u5316\u53ef\u4ee5\u5927\u7684\u5728\u524d\u3002\n\n\u7136\u540e\u5efa\u4e00\u68f5\u6743\u503c\u6811\u72b6\u6570\u7ec4\uff0c\u5728\u9012\u5f52\u5b50\u6811\u4e4b\u524d\u5148\u628a\u7b54\u6848\u51cf\u6389\uff0c\u9012\u5f52\u5b8c\u5b50\u6811\u540e\u518d\u628a\u65b0\u7684\u7b54\u6848\u52a0\u56de\u6765\uff0c\u8fd9\u6837\u7ed3\u679c\u5c31\u662f\u6b63\u786e\u7684\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define F(i,a,b) for(int i=a;i<=b;++i)\n#define eF(i,u) for(int i=h[u];i;i=nxt[i])\nint n,q;\nint a[100001],O[100001],Ans[100001],b[100001];\ninline void I(int x){for(;x<=n;++b[x],x+=x&-x);}\ninline int Q(int x){int sum=0;for(;x;sum+=b[x],x-=x&-x);return sum;}\nint h[100001],nxt[100001],to[100001],tot;\ninline void ins(int x,int y){nxt[++tot]=h[x];to[tot]=y;h[x]=tot;}\ninline bool cmp(int p1,int p2){return a[p1]>a[p2];}\nvoid dfs(int u){\n\tAns[u]=-Q(a[u]);\n\teF(i,u) dfs(to[i]);\n\tAns[u]+=Q(a[u]);\n\tI(a[u]);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tF(i,1,n) scanf(\"%d\",a+i), O[i]=i;\n\tstd::sort(O+1,O+n+1,cmp);\n\tF(i,1,n) a[O[i]]=i;\n\tint x;\n\tF(i,2,n) scanf(\"%d\",&x), ins(x,i);\n\tdfs(1);\n\tF(i,1,n) printf(\"%d\\n\",Ans[i]);\n\treturn 0;\n}\n```\n\n\u53ef\u80fd\u96be\u7406\u89e3\uff0c\u4f46\u662f\u81f3\u5c11\u6211\u7684\u7801\u5f88\u77ed #(\u6ed1\u7a3d)",
        "postTime": 1517572964,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "~~\u597d\u50cf\u8fd9\u4e48\u4e00\u4e2a\u5947\u5947\u602a\u602a\u7684\u5199\u6cd5\u8fd8\u6ca1\u6709\u4eba\u5199\u8fc7\u5e76\u4e14\u8868\u73b0\u8fd8\u4e0d\u9519~~\n\n# \u9898\u610f\uff1a\n\n\u6c42\u67d0\u8282\u70b9\u5b50\u6811\u5185\u6bd4\u8be5\u8282\u70b9\u7684\u70b9\u6743\u5927\u7684\u70b9\u7684\u4e2a\u6570\n\n# \u5206\u6790\uff1a\n\n1.\u4e00\u6839\u94fe\u7684\u60c5\u51b5\uff1a\u6811\u72b6\u6570\u7ec4\u6c42\u9006\u5e8f\u6570\n\n\u5e8f\u5217\u9006\u5e8f\u6570\u5b9a\u4e49\uff1a$i<j$ \u4e14 $p_i>p_j$ \u7684\u70b9\u5bf9\u4e2a\u6570\n\n\u5f53 $j$ \u786e\u5b9a\u65f6\uff0c\u7edf\u8ba1\u6bd4 $p_j$ \u5927\u7684\u6570\u7684\u4e2a\u6570\uff08\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4\uff09\uff08\u987a\u5e8f\u5219\u53ef\u4ee5\u4fdd\u8bc1 $i<j$\uff09\n\t\n2.\u4e00\u68f5\u6811\u7684\u60c5\u51b5\uff1a\n\n\u6811\u4e0a\u9006\u5e8f\u6570\u5b9a\u4e49\uff1a$y$ \u5c5e\u4e8e $x$ \u7684\u5b50\u6811\uff08\u4e0d\u5305\u542b $x$ ) \u4e14 $p_y>p_x$ \u7684\u70b9\u5bf9\u4e2a\u6570\n\n$dfs$ \u5e8f\uff1a\u6bcf\u4e2a\u8282\u70b9\u5728dfs\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u4e2d\u7684\u8fdb\u51fa\u6808\u7684\u65f6\u95f4\u5e8f\u5217\u3002\n\n\u91cd\u8981\u6027\u8d28\uff1a\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u90fd\u80fd\u5316\u4e3a\u4e00\u6bb5**\u8fde\u7eed**\u7684\u533a\u95f4\n\n\u4ee4 $\\left\\{{d_n}\\right\\}$ \u4e3a\u8be5\u6811\u7684 $dfs$ \u5e8f\uff0c$dfn_i$ \u8868\u793a\u70b9 $i$ \u5728 $dfs$ \u5e8f\u4e2d\u7684\u4f4d\u7f6e\uff0c$siz_i$ \u8868\u793a $i$ \u7684\u5b50\u6811\uff08\u542b $i$ \uff09\u5927\u5c0f\n\n\u5f53 $j$ \u786e\u5b9a\u65f6\uff1a\n\n\n\u53ea\u9700\u7edf\u8ba1$i\\in\\left[{dfn_j+1,dfn_j+siz_j-1}\\right]$\uff0c\u4e14 $p_i>p_j$ \u7684\u70b9\u7684\u4e2a\u6570\n\n\u5219\u53ea\u9700\u5c06\u5404\u70b9\u4ee5\u70b9\u6743\u4e3a\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7edf\u8ba1\u5176\u5b50\u6811\u533a\u95f4\u5185\u6bd4\u5176\u5927\u7684\u70b9\u7684\u4e2a\u6570\uff1a\n\n\u4ee4 $num_i$ \u8868\u793a\u6392\u5e8f\u540e\u70b9\u6743\u7b2c $i$ \u5c0f\u7684\u70b9\uff0c $b_i$ \u8868\u793a $d_i$ \u662f\u5426\u6bd4\u5f53\u524d\u7684\u70b9\u6743\u5927\uff08\u521d\u59cb\u5316\u4e3a $1$ \uff0c\u6bcf\u4e00\u8f6e\u7edf\u8ba1\u5b8c\u5c06\u5176\u6539\u4e3a $0$ \uff0c\u56e0\u4e3a\u6709\u5e8f\u6240\u4ee5\u80fd\u4fdd\u8bc1\u6b63\u786e\uff09\n\n\u5219\u6709 $ans_{num_x}= \\sum\\limits_{i=dfn_{num_x}+1}^{dfn_{num_x}+siz_{num_x}-1}b_i $\n\n# \u5b9e\u73b0\uff1a\n\n\u53ea\u52a0\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\u7684\u5355\u5411\u8fb9\u4fbf\u4e8e $dfs$\n\n$dfs$ \u9884\u5904\u7406 $\\left\\{dfn_n\\right\\}$ \u548c $\\left\\{siz_n\\right\\}$\n\n\u6784\u9020 $b$ \u6570\u7ec4\u7684\u6811\u72b6\u6570\u7ec4 $S$\uff0c\u56e0\u5176\u521d\u59cb\u503c\u5747\u4e3a $1$\uff0c\u6545\u53ef\u4ee4 $S_i=lowbit(i)$\n\n\u6c42\u51fa $ans$ \u6570\u7ec4\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nlogn)$ \uff0c~~\u5e38\u6570\u5c0f\u6781\u4e86~~\n\n# \u4ee3\u7801\n~~\u4e11\u7206\u4e86~~\n```\n#include<bits/stdc++.h>\n#define F(a,b) for(int i=a;i<=b;++i)\n#define eF(u) for(int i=head[u],v=edge[i].to;i;i=edge[i].next,v=edge[i].to)\nusing namespace std;\nint n,dfn[100001],p[100001],faz[100001],siz[100001],head[100001],xb,cnt,b[100001],c[100001],ans[100001];\nint lowbit(int x)\n{\n\treturn x&(-x);\n}\nstruct pyh\n{\n\tint to,next;\n}edge[200001];\nstruct pyhh\n{\n\tint w,num;\n}d[100001];//d[i].num\u5373num[i]\uff0c\u6b64\u5904\u4e3a\u4e86\u6392\u5e8f\u2026\u2026\nvoid add(int st,int ed)\n{\n\tedge[++xb].to=ed;\n\tedge[xb].next=head[st];\n\thead[st]=xb;\n}\nvoid dfs(int u)\n{\n\tsiz[u]=1;\n\tdfn[u]=++cnt;\n\teF(u)\n\t{\n\t\tdfs(v);\n\t\tsiz[u]+=siz[v];\n\t}\n\treturn;\n}\nbool cmp(pyhh aa,pyhh bb)\n{\n\treturn aa.w<bb.w;\n}\nint query(int l,int r)\n{\n\tif(l>r)return 0;\n\tl--;\n\tint sum=0;\n\twhile(r>l)sum+=c[r],r-=lowbit(r);\n\twhile(l>r)sum-=c[l],l-=lowbit(l);\n\treturn sum;\n}//\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u4f18\u5316\nvoid update(int x)\n{\n\tb[x]=0;\n\twhile(x<=n)\n\t{\n\t\tc[x]--;\n\t\tx+=lowbit(x);\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tF(1,n)\n\t{\n\t\tscanf(\"%d\",&d[i].w); \n\t\td[i].num=i;\n\t\tb[i]=1;\n\t}\n\tF(2,n)\n\t{\n\t\tscanf(\"%d\",&faz[i]);\n\t\tadd(faz[i],i);\n\t}\n\tdfs(1);\n\tsort(d+1,d+n+1,cmp);\n\tF(1,n)\n\t{\n\t\tc[i]=lowbit(i);\n\t}\n\tF(1,n)\n\t{\n\t\tans[d[i].num]=query(dfn[d[i].num]+1,dfn[d[i].num]+siz[d[i].num]-1);\n\t\tupdate(dfn[d[i].num]);\n\t}\n\tF(1,n)cout<<ans[i]<<endl;\n}\n```\n\n",
        "postTime": 1598120567,
        "uid": 171430,
        "name": "AC_Panda",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting P\u3011"
    },
    {
        "content": "\u4e3b\u5e2d\u6811\u3002\u3002\u3002\n\n\u8fd9\u9898\u8bf4\u767d\u4e86\u5c31\u662f\u4e00\u9759\u6001\u533a\u95f4\u6c42\u6bd4\u6570k\u5927\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u5f88\u5bb9\u6613\u8003\u8651\u5230\u4e3b\u5e2d\u6811\u3002\n\n\u9996\u5148\u9884\u5904\u7406\uff0cdfs\u628adfs\u5e8f\u548c\u6bcf\u4e2a\u70b9\u7684size\u6c42\u51fa\u6765\u3002\n\n\u76f4\u63a5\u4e0a\u4e3b\u5e2d\u6811\u6c42\u89e3\u5373\u53ef\u3002\n\n\u4e0d\u60f3\u79bb\u6563\u5316\u53ef\u4ee5\u52a8\u6001\u5f00\u70b9\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1e5+7;\n#define mid ((l+r)>>1)\nint L[MAXN<<5],R[MAXN<<5],T[MAXN],st[MAXN<<5],n,m,cnt,at[MAXN];\nint size[MAXN],dfn[MAXN],sz;\nint a[MAXN],b[MAXN],t;\nvector<int> edge[MAXN];\ninline int update(int pre,int l,int r,int x,int k)\n{\n\tint rt=++sz;\n\tL[rt]=L[pre];R[rt]=R[pre];st[rt]=st[pre]+1;\n\tif(l==r) return rt;\n\tif(x<=mid) L[rt]=update(L[pre],l,mid,x,k);\n\telse R[rt]=update(R[pre],mid+1,r,x,k);\n\treturn rt;\n}\ninline int query(int u,int v,int l,int r,int dl,int dr)\n{\n\tint sum=0;\n\tif(dl<=l&&r<=dr) return st[v]-st[u];\n\tif(dl<=mid) sum+=query(L[u],L[v],l,mid,dl,dr);\n\tif(dr>mid) sum+=query(R[u],R[v],mid+1,r,dl,dr);\n\treturn sum;\n}\ninline void dfs(int u,int fa)\n{\n\tsize[u]=1;dfn[u]=++cnt;at[cnt]=u;\n\tfor(int i=0;i<edge[u].size();i++){\n\t\tint v=edge[u][i];\n\t\tif(v!=fa) dfs(v,u);\n\t\tsize[u]+=size[v];\n\t}\n}\ninline int read()\n{\n    int x=0,c=1;\n    char ch=' ';\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    while(ch=='-')c*=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*c;\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++) a[i]=b[i]=read();\n\tfor(int i=2;i<=n;i++){edge[read()].push_back(i);}\n\tdfs(1,0);\n\tsort(b+1,b+n+1);\n\tt=unique(b+1,b+n+1)-b-1;\n\t\n\tfor(int i=1;i<=n;i++){\n\t\tint x=at[i];\n\t\tint k=lower_bound(b+1,b+t+1,a[x])-b;\n\t\tT[i]=update(T[i-1],1,t,k,1);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint k=lower_bound(b+1,b+t+1,a[i])-b;\n\t\tif(size[i]==1) puts(\"0\");else printf(\"%d\\n\", query(T[dfn[i]],T[dfn[i]+size[i]-1],1,t,k+1,t));\n\t}\n}\n```",
        "postTime": 1547969798,
        "uid": 49223,
        "name": "Victorique",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "## \u79bb\u6563\u5316+\u7ebf\u6bb5\u6811\u5408\u5e76\uff08\u88f8\uff09\n\n\n------------\n\n### \u7ebf\u6bb5\u6811\u5408\u5e76\n#### \u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u5c31\u662f\u5c06\u5df2\u6709\u7684\u4e24\u68f5\u7ebf\u6bb5\u6811\u5408\u5e76\u4e3a\u4e00\u68f5\uff0c\u76f8\u540c\u4f4d\u7f6e\u7684\u4fe1\u606f\u6574\u5408\u5230\u4e00\u8d77\uff0c\u901a\u5e38\u662f\u6743\u503c\u7ebf\u6bb5\u6811\n#### \u6bd4\u8f83\u88f8\u7684\uff0c\u5c31\u662f\u5c06\u4e00\u68f5\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u53d6\u51fa\u6765\u63d2\u5165\u53e6\u4e00\u68f5\u4e2d\n#### \u4f46\u6bd4\u8f83\u9ad8\u6548\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u53ef\u4ee5\u53c2\u7167\u53ef\u5e76\u5806\u7684\u5408\u5e76\u65b9\u5f0f\n\n- \u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u539f\u7406\u5341\u5206\u7b80\u5355\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a\n- \u5bf9\u4e8e\u4e24\u9897\u6811\u7684\u8282\u70b9u\u548cv\n- \u2460\u5982\u679cu\u4e3a\u7a7a\uff0c\u8fd4\u56dev\n- \u2461\u5982\u679cv\u4e3a\u7a7a\uff0c\u8fd4\u56deu\n- \u2462\u5426\u5219\uff0c\u65b0\u5efa\u8282\u70b9t\uff0c\u6574\u5408u\u548cv\u7684\u4fe1\u606f\uff0c\u7136\u540e\u9012\u5f52\u5408\u5e76u\u548cv\u7684\u5de6\u53f3\u5b50\u6811\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace segment_tree_merge {\n\tint lc[3000001] = {0}, rc[3000001] = {0}, tot = 0;\n\tint v[3000001] = {0}, l[3000001], r[3000001];\n\tint root[100001];\n\tvoid push_up(int p) {\n\t\tv[p] = v[lc[p]]+v[rc[p]];\n\t}\n\tvoid build(int &p, int le, int ri, int x) {\n\t\tp = ++ tot;\n\t\tl[p] = le;\n\t\tr[p] = ri;\n\t\tif(le == ri) {\n\t\t\tv[p]=1;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (le + ri) >> 1;\n\t\tif(x <= mid)build(lc[p], le, mid, x);\n\t\telse build(rc[p], mid + 1, ri, x);\n\t\tpush_up(p);\n\t}\n\tvoid add(int p, int x) {\n\t\tif(l[p] == r[p]) {\n\t\t\tv[p] ++;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l[p] + r[p]) >> 1;\n\t\tif(x <= mid)add(lc[p], x);\n\t\telse add(rc[p], x);\n\t\tpush_up(p);\n\t}\n\tint merge(int x, int y) {\n\t\tif(!x)return y;\n\t\tif(!y)return x;\n\t\tif(l[x] == r[x])return v[x] += v[y],x;\n\t\tlc[x]=merge(lc[x], lc[y]);\n\t\trc[x]=merge(rc[x], rc[y]);\n\t\tpush_up(x);\n\t\treturn x;\n\t}\n\tint query(int p, int le, int ri) {\n\t\tif(p == 0)return 0;\n\t\tif(l[p] == le && r[p] == ri)return v[p];\n\t\tint mid = (l[p] + r[p]) >> 1;\n\t\tif(le <= mid)\n\t\t\tif(ri > mid)return query(lc[p], le, mid) + query(rc[p], mid + 1, ri);\n\t\t\telse return query(lc[p], le, ri);\n\t\treturn query(rc[p], le, ri);\n\t}\n}\n#define stm segment_tree_merge\nint n;\nint a[100001];\nint hs[100001];\nint fa[100001];\nvector<int>ver[100001];\nint ans[100001];\nvoid dfs(int x) {\n\tfor(int i = ver[x].size() - 1; i >= 0; i --) {\n\t\tdfs(ver[x][i]);\n\t\tstm::root[x] = stm::merge(stm::root[x], stm::root[ver[x][i]]);\n\t}\n\tans[x]=stm::query(stm::root[x], a[x] + 1, n + 1);\n}\nint main() {\n\tios::sync_with_stdio(0);\n\tcin>>n;\n\tfor(int i = 1; i <= n; i ++) {\n\t\t\n\t\tcin>>a[i];\n\t\ths[i] = a[i];\n\t}\n\tsort(hs + 1, hs + n + 1);\n\tfor(int i = 1; i <= n; i ++)\n\t\ta[i] = lower_bound(&hs[1], &hs[n + 1], a[i]) - hs,\n\t\tstm::build(stm::root[i], 1, n + 1, a[i]);\n\tfor(int i = 2; i <= n; i ++) {\n\t\tcin>>fa[i];\n\t\tver[fa[i]].push_back(i);\n\t}\n\tdfs(1);\n\tfor(int i = 1; i <= n; i ++)\n\t\tcout<<ans[i] <<endl;\n\treturn 0;\n}\n```\n\uff08tab\u88ab\u5403\u4e86\uff09",
        "postTime": 1538137446,
        "uid": 70310,
        "name": "wuzhaoxin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "**\u6811\u72b6\u6570\u7ec4+\u79bb\u6563\u5316**\n\n**\u5728\u6811\u4e0a\u6c42\u4e00\u4e0b\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570**\n\n**\u5728\u6c42\u53f3\u513f\u5b50\u7684\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u65f6\u7531\u4e8e\u662f\u5148\u6dfb\u52a0\u7684\u5de6\u513f\u5b50\u7684\u4e2a\u6570**\n\n**\u6240\u4ee5\u8fd9\u65f6\u53f3\u513f\u5b50\u7684\u4e2a\u6570\u4f1a\u6709\u5de6\u513f\u5b50\u7684\u4e00\u90e8\u5206**\n\n**\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4e00\u4e2alast**\n\n**\u6765\u8bb0\u5f55\u53f3\u513f\u5b50\u7684\u6539\u53d8\u503c**\n\n**\u8fd9\u6837\u4e00\u51cf\u5c31\u662f\u771f\u6b63\u7684\u53f3\u513f\u5b50\u7684\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u4e86**\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\n#include<cstdio>\n#define maxn 100100\nusing namespace std;\nstruct node\n{\n    int next,to;\n}e[maxn*2];\nint cnt;\nint head[maxn];\nint n;\nint c[maxn];\nint fa[maxn];\nint num[maxn];\nint add(int u,int v)\n{\n    e[++cnt].next=head[u];\n    e[cnt].to=v;\n    head[u]=cnt;\n}\nint add_tree(int x,int k)\n{\n    for(int i=x;i<=n;i+=i&(-i)) c[i]+=k;\n}\nint query(int x)\n{\n    int sum=0;\n    for(int i=x;i>0;i-=i&(-i)) sum+=c[i];\n    return sum;\n}\nstruct NOde\n{\n    int w,place;\n}a[maxn];\nint cmp1(NOde x,NOde y)\n{\n    return x.w<y.w;\n}\nint cmp2(NOde x,NOde y)\n{\n    return x.place<y.place;\n}\nint dfs(int now)\n{\n    add_tree(a[now].w,1);\n    int last=query(n)-query(a[now].w);\n    for(int i=head[now];i;i=e[i].next)\n    {\n        int to=e[i].to;\n        if(fa[now]!=to)\n        {\n            dfs(to);\n        }\n    }\n    num[now]+=query(n)-query(a[now].w)-last;\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i].w);\n        a[i].place=i;\n    }\n    sort(a+1,a+1+n,cmp1);\n    for(int i=1;i<=n;i++) a[i].w=i;\n    sort(a+1,a+1+n,cmp2);\n    for(int i=2;i<=n;i++)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        add(x,i);\n        add(i,x);\n        fa[i]=x;\n    }\n    dfs(1);\n    for(int i=1;i<=n;i++) printf(\"%d\\n\",num[i]);\n    return 0;\n}\n```",
        "postTime": 1508811816,
        "uid": 18441,
        "name": "Drug__Lover",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "\u9898\u610f\u5c31\u662f\u7ed9\u51fa\u4e00\u4e2a\u70b9\u6743\u4e0d\u76f8\u540c\u7684\u6811\u7136\u540e\u95ee\u4f60\u6bcf\u4e2a\u7ed3\u70b9\u5b50\u6811\u4e2d\u6743\u503c\u5927\u4e8e\u5b83\u7684\u8282\u70b9\u4e2a\u6570\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u641e\u51fa\u4e00\u4e2aDFS\u5e8f\u6765\uff0c\u7136\u540e\u5c31\u662f\u9759\u6001\u533a\u95f4rank\u67e5\u8be2\u4e86\u3002\n\n\u5bf9\u4e8e\u9759\u6001\u533a\u95f4rank\u67e5\u8be2\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u6240\u6709\u7684\u8be2\u95ee\uff08\u7ed3\u70b9\uff09\u6309\u6743\u503c\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u52a0\u5165\u6811\u72b6\u6570\u7ec4\u91cc\u9762\uff0c\u6bcf\u6b21\u52a0\u5165\u4e4b\u524d\u67e5\u8be2[l,r]\u7684\u533a\u95f4\u548c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\u3002\n\n```cpp\nconst int MAXN = 100000 + 5;\n\nint hed[MAXN], nxt[MAXN << 1], tot[MAXN << 1], val[MAXN], fa[MAXN], L[MAXN], R[MAXN], bit[MAXN], ask[MAXN];\npair < int, int > point[MAXN];\n\ninline void AddEdge(int x, int y) { //\u52a0\u8fb9 \n    static int cnt;\n    ++ cnt;\n    tot[cnt] = y;\n    nxt[cnt] = hed[x];\n    hed[x] = cnt;\n}\n\nvoid DFS(int u) {\n    static int cnt;\n    ++ cnt;\n    L[u] = cnt;  //\u66f4\u65b0\u7ed3\u70b9u\u5728DFS\u5e8f\u4e2d\u7684\u6620\u5c04 \n    point[cnt] = make_pair(val[u], u);  //\u6743\u503c\u4e0e\u7ed3\u70b9\u7f16\u53f7\uff0c\u65b9\u4fbf\u6392\u5e8f\u540e\u67e5\u627eDFS\u5e8f \n    int v;\n    for (int k = hed[u]; k; k = nxt[k]) {  //DFS \n        v = tot[k];\n        if (v != fa[u])\n            DFS(v);\n    }\n    R[u] = cnt;  //DFS\u7ed3\u675f\u540e\u7684\u8ba1\u6570\u5668\u503c\u5c31\u662f\u7ed3\u70b9u\u5b50\u6811\u5728DFS\u5e8f\u4e2d\u7684\u8303\u56f4 \n}\n\nint n;\n\n#define lowbit(x) (x) & -(x) \ninline void Modify(int i) {  //\u6811\u72b6\u6570\u7ec4\u64cd\u4f5c \n    for (; i <= n; i += lowbit(i))\n        ++ bit[i]; \n}\n\ninline int Query(int i) {\n    int k = 0;\n    for (; i; i -= lowbit(i))\n        k += bit[i];\n    return k;\n}\n\ninline bool Comp(const pair < int, int > &a, const pair < int, int > &b) {  //\u6309\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \n    return a.first > b.first;\n}\n\nint main() {\n    get, n;\n    For(i, 1, n)\n        get, val[i];\n    int dx;\n    For(i, 2, n) {\n        get, dx;\n        fa[i] = dx;\n        AddEdge(dx, i);\n        AddEdge(i, dx);\n    }\n    DFS(1);  //\u5148DFS\u4e00\u904d\u627e\u51faDFS\u5e8f \n    sort(point + 1, point + n + 1, Comp);  //\u6392\u5e8f \n    For(i, 1, n) {\n        ask[point[i].second] = Query(R[point[i].second]) - Query(L[point[i].second] - 1);  //\u5728\u5f53\u524d\u7ed3\u70b9\u4e4b\u524d\u63d2\u5165\u6811\u72b6\u6570\u7ec4\u7684\u4e00\u5b9a\u662f\u6bd4\u5f53\u524d\u7ed3\u70b9\u6743\u503c\u5927\u7684\uff0c\u76f4\u63a5\u67e5\u627e\u5373\u53ef \n        Modify(L[point[i].second]);\n    }\n    For(i, 1, n)\n        put, ask[i], '\\n';\n    return 0;\n}\n```",
        "postTime": 1512243734,
        "uid": 30043,
        "name": "sjkmost",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "~~\u600e\u4e48\u6700\u8fd1\u8001\u5199\u7ebf\u6bb5\u6811\u5408\u5e76~~\n\n\u6743\u503c\u7ebf\u6bb5\u6811\u52a0\u5408\u5e76\u3002\n\n\u9700\u8981\u79bb\u6563\u5316\u3002\n\n\u67e5\u8be2\u5c31\u67e5\u5f53\u524d\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100010;\nint cnt,n,vl[maxn],fa[maxn],c[maxn],tot,rt[maxn],ans[maxn];\nstruct tree{\n    int lc,rc,dt,tg;\n}t[maxn*40];\nvector<int> q[maxn];\ninline void pushup(int p){\n    t[p].dt=t[t[p].lc].dt+t[t[p].rc].dt;\n\n}\ninline int insert(int p,int l,int r,int wh){\n    if(!p) p=++tot;\n    if(l==r){\n        t[p].dt++;t[p].tg=wh;return  p;\n    }\n    int mid=(l+r)>>1;\n    if(wh<=mid) t[p].lc=insert(t[p].lc,l,mid,wh);\n    else t[p].rc=insert(t[p].rc,mid+1,r,wh);\n    pushup(p);\n    return p;\n}\ninline int merge(int p,int q,int l,int r){\n    if(!p) return q;\n    if(!q) return p;\n    if(l==r){\n        t[p].dt+=t[q].dt;\n        t[p].tg=t[q].tg;\n    }\n    int mid=(l+r)>>1;\n    t[p].lc=merge(t[p].lc,t[q].lc,l,mid);\n    t[p].rc=merge(t[p].rc,t[q].rc,mid+1,r);\n    pushup(p);\n    return p;\n}\ninline int ask(int p,int l,int r,int x,int y){\n    if(x<=l && r<=y)\n        return t[p].dt;\n    int mid=(l+r)>>1;\n    int res=0;\n    if(x<=mid) res+=ask(t[p].lc,l,mid,x,y);\n    if(y>mid) res+=ask(t[p].rc,mid+1,r,x,y);\n    return res;\n}\nvoid dfs(int x){\n    for(int i=0;i<q[x].size();i++){\n        int to=q[x][i];\n        if(to==fa[x]) continue;\n        dfs(to);\n        rt[x]=merge(rt[x],rt[to],1,cnt);\n    }\n    ans[x]=ask(rt[x],1,cnt,vl[x]+1,cnt);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&vl[i]),c[i]=vl[i];\n    sort(c+1,c+1+n);\n    cnt=unique(c+1,c+1+n)-c-1;\n    for(int i=1;i<=n;i++){\n        vl[i]=lower_bound(c+1,c+1+n,vl[i])-c;\n        rt[i]=insert(rt[i],1,cnt,vl[i]);\n    }\n    for(int i=2;i<=n;i++){\n        int xx;scanf(\"%d\",&xx);fa[i]=xx;\n        q[xx].push_back(i);\n        q[i].push_back(xx);\n    }\n    dfs(1);\n    for(int i=1;i<=n;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```\n",
        "postTime": 1568813424,
        "uid": 128682,
        "name": "ChrisK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "~~\u7adf\u7136\u4e00\u904dAC\uff1f\uff01~~ \u54b3\u54b3\n\n\u9996\u5148\u7ffb\u8bd1\u9898\u9762\uff0c\u8fd9\u662f\u8981\u6c42\u67d0\u4e2a\u8282\u70b9\u5b50\u6811\u4e2d\u6743\u503c\u6bd4\u81ea\u5df1\u5927\u7684\u8282\u70b9\u4e2a\u6570...\n\n\u90a3\u6211\u4eec\u53ef\u4ee5\u5148\u8f6c\u6210dfs\u5e8f\uff0c\u4e8e\u662f\u53d8\u6210\u7ef4\u62a4\u533a\u95f4\u548c\u3002\n\n\u4f46\u6bcf\u6b21\u90fd\u8981\u627e\u6bd4\u81ea\u5df1\u5c0f\u7684\uff0c\u600e\u4e48\u7ef4\u62a4\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0cdfs\u5e8f\u5217\u521d\u59cb\u5168\u4e3a1\uff0c\u6bcf\u6b21\u628a\u81ea\u5df1\u4fee\u6539\u62100\uff0c\u7136\u540e\u6c42\u533a\u95f4\u548csum/2\u5373\u53ef\n\n\u8d34\u4ee3\u7801\u65f6\u523b~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 100009\nint head[N],tot,let[N],rit[N],sum[N<<4],b[N<<1],ans[N],cnt;\nstruct node{\n\tint to,nxt;\n}h[N<<1];\nstruct edge{\n\tint p,num;\n}a[N];\nvoid add(int u,int v){h[++tot].to=v;h[tot].nxt=head[u];head[u]=tot;}\nvoid dfs(int x,int fa)\n{\n\tlet[x]=++cnt;\n\tb[cnt]=1;\n\tfor(int i=head[x];i!=-1;i=h[i].nxt)\n\t{\n\t\tint v=h[i].to;\n\t\tif(v==fa) continue;\n\t\tdfs(v,x);\n\t}\n\trit[x]=++cnt;\n\tb[cnt]=1;\n}\nvoid build(int rt,int l,int r)\n{\n\tif(l==r) \n\t{\n\t\tsum[rt]=b[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(rt<<1,l,mid);\n\tbuild(rt<<1|1,mid+1,r);\n\tsum[rt]=sum[rt<<1]+sum[rt<<1|1];\n}\nvoid modify(int rt,int l,int r,int p)\n{\n\tif(l==r)\n\t{\n\t\tsum[rt]=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(p<=mid) modify(rt<<1,l,mid,p);\n\tif(p>mid) modify(rt<<1|1,mid+1,r,p);\n\tsum[rt]=sum[rt<<1]+sum[rt<<1|1];\n}\nint query(int rt,int l,int r,int xl,int xr)\n{\n\tif(xl<=l && r<=xr) return sum[rt];\n\tint mid=(l+r)>>1,res=0;\n\tif(xl<=mid) res+=query(rt<<1,l,mid,xl,xr);\n\tif(mid<xr) res+=query(rt<<1|1,mid+1,r,xl,xr);\n\treturn res;\n}\nbool cmp(edge x,edge y){return x.p<y.p;}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tint n,x;\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i].p),a[i].num=i;\n\tfor(int i=2;i<=n;i++)\n\t\tscanf(\"%d\",&x),add(i,x),add(x,i);\n\tdfs(1,0);\n\tbuild(1,1,n<<1);\n\tsort(a+1,a+n+1,cmp);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tmodify(1,1,n<<1,let[a[i].num]);\n\t\tmodify(1,1,n<<1,rit[a[i].num]);\n\t\tans[a[i].num]=query(1,1,n<<1,let[a[i].num],rit[a[i].num])/2;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1573012018,
        "uid": 163297,
        "name": "OIER_z",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "\u4e00\u5f00\u59cb\u770b\u5230\u8fd9\u9053\u9898\uff0c\u4ee5\u4e3a\u662f\u4e00\u9053\u5f88\u9ad8\u7ea7\u7684\u9898\u76ee\uff0c\u7136\u540e\u7a81\u7136\u53d1\u73b0\u53ea\u662f\u4e00\u9053\u5efa\u7acb\u5728\u6811\u4e0a\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u4e8e\u662f\u60f3\u4e86\u4e00\u60f3\u52c9\u5f3a\u6c34\u8fc7\n\n\n------------\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u5728\u4e00\u4e2a\u6811\u4e0a\uff0c\u6c42\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u4ee5\u5b83\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u591a\u5c11\u4e2a\u8282\u70b9\u70b9\u6743\u5927\u4e8e\u5b83\u672c\u8eab\u70b9\u6743\n\n\n------------\n\n\u5148\u8003\u8651\u6811\u9000\u5316\u6210\u94fe\u7684\u60c5\u51b5\uff0c\u5219\u9898\u76ee\u53d8\u4e3a\u6c42\u89e3\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u56e0\u6b64\u679c\u65ad\u505a\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\n\n\u7136\u540e\u8003\u8651\u5728\u6811\u4e0a\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u7528dfs\u5e8f\u7684\u987a\u5e8f\u5411\u6811\u72b6\u6570\u7ec4\u4e2d\u52a0\u70b9\uff0c\u7531\u4e8edfs\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a\n\n\u5f53\u6211\u4eec\u5728\u6c42\u70b9i\u7684ans\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u5728dfs\u7684\u8fc7\u7a0b\u4e2d\uff0cdfs\u5e8f\u7b2c\u4e00\u6b21\u51fa\u73b0i\u4e0e\u6700\u540e\u4e00\u6b21\u51fa\u73b0i\u4e4b\u95f4\u7684\u8fc7\u7a0b\u4f1a\u628a\u4e14\u4ec5\u628a\u4ee5i\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6bcf\u4e00\u70b9\u52a0\u5165\u6811\u72b6\u6570\u7ec4\uff0c\u800c\u8fd9\u4e2a\u4e24\u6b21\u60c5\u51b5\u4e0b\u7684\u6811\u72b6\u6570\u7ec4\u6c42\u548c\u7ed3\u679cS1\u548cS2\u7684\u5dee\uff0c\u5373\u4e3a\u6240\u6c42\u7684ans\n\n\u603b\u7ed3\u4e00\u4e0b\uff1a\u5c06\u70b9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4ee5rank\u4e3a\u5e95\u6784\u5efa\u6811\u72b6\u6570\u7ec4\uff0c\u7136\u540e\u6b63\u5e38\u5730dfs\uff0c\u6bcf\u5230\u4e00\u4e2a\u70b9\uff0c\u5148\u53d6\u51faS1\uff0c\u7136\u540edfs\u4e0b\u53bb\uff0c\u6700\u540e\u56de\u6765\u53d6\u51faS2\uff0c\u6700\u540e\u505a\u5dee\u6c42\u89e3\n\n\n------------\n\n\u6700\u6700\u540e\u8d34\u4e0a\u81ea\u5df1\u611a\u8822\u7684\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define maxn 100100\nusing namespace std;\nint n,x,tot=0,rank[maxn],ans[maxn],Last[maxn],tree[maxn];\nstruct recCow{int ab,odr;} p[maxn];\nstruct recEdge{int pre,to;} E[maxn];\nvoid addEdge(int U,int V){\n    E[++tot].pre=Last[U];Last[U]=tot;\n    E[tot].to=V;\n}\nvoid read(int &x){\n    char ch=getchar();\n    for(;ch<'0'||ch>'9';ch=getchar());\n    for(x=0;ch>='0'&&ch<='9';ch=getchar())x=x*10+ch-48;\n}//\u4e11\u964b\u7684\u8bfb\u5165\u4f18\u5316\nbool cmp(const recCow &A,const recCow &B){return A.ab>B.ab;}\nint lowbit(int x){return x&(-x);}\nint sum(int p){\n    int result=0;\n    for (int i=p;i;i-=lowbit(i)){result+=tree[i];}\n    return result;\n}\nvoid modify(int p,int delta){\n    for (int i=p;i<=n;i+=lowbit(i)){tree[i]+=delta;}\n}//\u6811\u72b6\u6570\u7ec4\u6807\u51c6(?)\u64cd\u4f5c\nvoid dfs(int x){\n    int old=sum(rank[x]);\n    for (int ed=Last[x];ed;ed=E[ed].pre)dfs(E[ed].to);\n    ans[x]=sum(rank[x])-old;\n    modify(rank[x],1);\n}//dfs\u904d\u5386\nint main(){\n    read(n);\n    memset(Last,0,sizeof(Last));\n    memset(tree,0,sizeof(tree));\n    for (int i=1;i<=n;i++){read(p[i].ab);p[i].odr=i;}\n    for (int i=2;i<=n;i++){read(x);addEdge(x,i);}\n    sort(p+1,p+n+1,cmp);\n    for (int i=1;i<=n;i++){rank[p[i].odr]=i;}\n    dfs(1);\n    for (int i=1;i<=n;i++){printf(\"%d\\n\",ans[i]);}\n    return 0;\n}\n```",
        "postTime": 1529048210,
        "uid": 68872,
        "name": "hcrbd8",
        "ccfLevel": 0,
        "title": "P3605\u6c34\u89e3\u5584\u540e"
    },
    {
        "content": "&emsp;&emsp;[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3605)\n\n&emsp;&emsp;\u6276\u82cf\u5927\u4f6c\u5199\u7684\u6211\u8fd9\u79cd\u849f\u84bb\u5b8c\u5168\u770b\u4e0d\u61c2\u554a\uff0c\u9898\u89e3\u53ea\u770b\u5230\u4e00\u7bc7\u601d\u8def\u7c7b\u4f3c\u7684\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u6ca1\u6709\u5b8c\u5168\u770b\u61c2\u3002\u6211\u5c31\u628a\u6211\u8fd9\u4e2a\u975e\u5e38\u7b80\u660e\u6613\u61c2\u7684\u505a\u6cd5\u8bb2\u4e00\u4e0b\u5427\u3002\n\n&emsp;&emsp;**\u5982\u679c\u4e00\u9053\u6811\u4e0a\u7684\u9898\u592a\u96be\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u642c\u5230\u94fe\u4e0a**\u3002\u5982\u679c\u6811\u9000\u5316\u6210\u4e86\u4e00\u6761\u94fe\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6c42**\u9006\u5e8f\u5bf9**\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4\u3002\n\n&emsp;&emsp;\u73b0\u5728\u8003\u8651\u628a\u8fd9\u4e2a\u6c42\u9006\u5e8f\u5bf9\u7684\u8fc7\u7a0b\u642c\u5230\u6811\u4e0a\u3002\u5982\u679c\u6211\u4eec\u80fd\u786e\u5b9a\u5f53\u6211\u4eec\u6c42\u89e3\u70b9 $i$ \u65f6\uff0c\u80fd\u77e5\u9053\u70b9 $i$ \u7684\u6240\u6709\u5b50\u5b59\u90fd\u5728\u54ea\u91cc\u5c31\u53ef\u4ee5\u4e86\u3002\u4f17\u6240\u5468\u77e5\u6811\u7684 DFS \u6709\u4e09\u79cd\uff0c**\u53ea\u6709\u540e\u5e8f\u904d\u5386\u4fdd\u8bc1\u5728\u6700\u540e\u7684DFS\u5e8f\u4e2d\uff0c\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u5b59\u90fd\u4f1a\u5728\u8be5\u8282\u70b9\u7684\u524d\u9762**\u3002\u56e0\u4e3a\u6211\u4eec\u5bf9\u5b50\u5b59\u8fdb\u884c\u67e5\u8be2\uff0c\u800c\u5b50\u5b59\u53c8\u662f\u4e00\u6bb5**\u8fde\u7eed**\u7684\u533a\u95f4\uff08\u600e\u4e48\u53ef\u80fd\u6211\u4e00\u9897\u6811\u8fd8\u6ca1\u641c\u5b8c\u5c31\u53bb\u641c\u53e6\u5916\u4e00\u9897\u6811\u5462\uff09\uff0c\u5f88\u660e\u663e\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n&emsp;&emsp;\u4f46\u662f\uff01\u867d\u7136\u6240\u6709\u5b50\u5b59\u90fd\u5728\u6839\u8282\u70b9\u4e4b\u524d\uff0c\u4f46**\u4e0d\u662f\u6240\u6709\u6839\u8282\u70b9\u4e4b\u524d\u7684\u8282\u70b9\u90fd\u662f\u5b83\u7684\u5b50\u5b59**\uff0c\u6bd4\u5982\u8bf4\u53ef\u80fd\u662f\u8282\u70b9\u7684\u5144\u5f1f\u7684\u5b50\u5b59\u3002\u4f46\u662f\u6211\u4eec\u77e5\u9053\u4e86\u5b50\u5b59\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\u4e14\u5728 $pos_i-1$\u5904\u7ed3\u5c3e\uff08$pos_i$ \u662f\u8282\u70b9 $i$ \u5728\u540e\u5e8f\u7684\u4f4d\u7f6e\uff09\uff0c\u6211\u4eec\u8bbe\u8282\u70b9 $i$ \u7684\u5b50\u5b59\u6570\u91cf\u662f $size_i$\uff0c\u90a3\u4e48 $pos_i-size_i$ ~ $pos_i-1$ \u90fd\u662f\u8282\u70b9 $i$ \u7684\u5b50\u5b59\u3002\u7136\u540e\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u8be2\u95ee\u8fd9\u4e00\u6bb5\u7684\u548c\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u90a3\u7bc7\u7c7b\u4f3c\u601d\u8def\u7684\u9898\u89e3\u9700\u8981\u7edf\u8ba1\u5b50\u6811\u5927\u5c0f\u7684\u539f\u56e0\u3002\n\n&emsp;&emsp;\u4e8b\u5b9e\u4e0a\u8fd8\u6709\u4e00\u79cd\u89e3\u6cd5\u3002\u5982\u679c\u6211\u4eec\u5bf9\u8282\u70b9\u548c\u5b83\u7684DFS\u5e8f\u505a\u4e86**\u4e00\u4e00\u6620\u5c04**\uff0c\u5373\u6211\u4eec\u65e2\u53ef\u4ee5\u901a\u8fc7\u8282\u70b9\u672c\u8eab\u5f97\u5230\u5b83\u7684DFS\u5e8f\u4f4d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u6839\u636eDFS\u4f4d\u7f6e\u5f97\u5230\u8be5\u5904\u7684\u8282\u70b9\u3002\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u4e00\u4e2a\u8282\u70b9\u7684**\u4e0a\u4e00\u4e2a\u5144\u5f1f**\uff0c\u56e0\u4e3a\u540e\u5e8f\u904d\u5386\u7684\u8fc7\u7a0b\u80af\u5b9a\u662f\u5148\u540e\u5e8f\u4e0a\u4e00\u4e2a\u5144\u5f1f\u90a3\u9897\u5b50\u6811\uff0c\u7136\u540e\u7acb\u9a6c\u904d\u5386\u5f53\u524d\u8fd9\u9897\u7684\uff0c\u800c\u4e0a\u4e00\u4e2a\u5144\u5f1f\u7684\u5b50\u6811\u7684\u6839\uff08\u5373\u4e0a\u4e00\u4e2a\u5144\u5f1f\uff09\u4e00\u5b9a\u4f4d\u4e8e\u5b83\u7684DFS\u5e8f\u7684\u6700\u672b\u7aef\uff0c\u5373\u4f4d\u4e8e $pos_i-size_i-1$ \u5904\u3002\u53c8\u56e0\u4e3a\u6211\u4eec\u5bf9\u8282\u70b9\u548cDFS\u5e8f\u4f4d\u7f6e\u505a\u4e86\u4e00\u4e00\u6620\u5c04\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u53ef\u4ee5\u77e5\u9053 $pos_i-size_i-1$ \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u5b83 $+1$ \u5c31\u662f\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u8fb9\u754c\u4e86\u3002\u8fd9\u6837\u7701\u53bb\u4e86\u7edf\u8ba1\u5b50\u6811\u5927\u5c0f\u7684\u8fc7\u7a0b\uff0c\u4f46\u662f\u591a\u4e86\u7edf\u8ba1\u5144\u5f1f\u548c\u4e00\u4e00\u6620\u5c04\u7684\u8fc7\u7a0b\uff08\u597d\u50cf\u4e24\u79cd\u89e3\u6cd5\u5176\u5b9e\u90fd\u9700\u8981\u4e00\u4e00\u6620\u5c04\uff09\n\n&emsp;&emsp;\u8bb2\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u732e\u4e0a AC Code\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=1e5+10;\nint a[MAXN],b[MAXN],ord[MAXN];\nint n;\nstruct Cow{\n\tint p,ord,num;\n\tbool operator<(Cow& c2)const{\n\t\treturn p<c2.p;\n\t}\n}cow[MAXN];\nstruct Edge{\n\tint u,v;\n}edge[MAXN];\nint first[MAXN],next[MAXN],tot;\nint past[MAXN],size[MAXN],tot2,m[MAXN];\nint ans[MAXN];\nint tree[MAXN];\nvoid addedge(int u,int v){\n\ttot++;\n\tedge[tot].u = u;edge[tot].v = v;\n\tnext[tot] = first[u];\n\tfirst[u] = tot;\n}\nint dfs(int u){\n\tsize[u] = 1;\n\tfor(int j=first[u];j;j=next[j]){\n\t\tint v=edge[j].v;\n\t\tsize[u] += dfs(v);\n\t}\n\tpast[++tot2] = u;\n\tm[u] = tot2; //\u6620\u5c04 \n\treturn size[u];\n}\ninline int lowbit(int x){\n\treturn x & (-x);\n}\ninline void update(int x,int value){\n\twhile(x<=n){\n\t\ttree[x] += value;\n\t\tx+=lowbit(x);\n\t}\n}\ninline int query(int x){\n\tint sum = 0;\n\twhile(x>=1){\n\t\tsum += tree[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn sum;\n}\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a[i];\n\t\tb[i] = a[i];\n\t} \n\tsort(b+1,b+1+n);\n\tfor(int i=1;i<=n;i++){\n\t\t//\u79bb\u6563\u5316\n\t\tord[i] = lower_bound(b+1,b+1+n,a[i])-b; \n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tcow[i] = (Cow){a[i],ord[i],i};\n\t}\n\t//\u5efa\u6811\n\tfor(int i=2;i<=n;i++){\n\t\tint fa;\n\t\tcin>>fa;\n\t\taddedge(fa,i);\n\t} \n\t//\u540e\u5e8f + \u7edf\u8ba1\u5b50\u6811\u5927\u5c0f \n\tdfs(1);\n\tsort(cow+1,cow+1+n);\n\tfor(int i=n;i>=1;i--){\n\t\tint now = m[cow[i].num],s = size[cow[i].num]-1; //\u5b50\u6811\u5927\u5c0f\n\t\t//\u67e5\u627e\u540e\u5e8f\u4e0a[now-s,now)\u8fd9\u4e00\u6bb5\u7684\u4e2a\u6570\n\t\tans[cow[i].num] = query(now)-query(now-s-1);\n\t\t//\u52a0\u5165\n\t\tupdate(now,1); \n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1599919699,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u6811\u72b6\u6570\u7ec4\uff1aPromotion Counting"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9 + \u7ebf\u6bb5\u6811\u5408\u5e76 \u6a21\u677f\u9898\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6811\u4e0a\u7684\u7ed3\u70b9\uff0c\u7ef4\u62a4\u4e00\u4e2a\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u8fd9\u4e2a\u503c\u57df\u7ebf\u6bb5\u6811\u5c31\u662f\u6240\u6709\u513f\u5b50\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u8d77\u6765\u7684\u3002\n\n\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u5728\u88ab\u7236\u4eb2\u5408\u5e76\u4e86\u4e4b\u540e\u5c31\u4e0d\u4f1a\u518d\u88ab\u5408\u5e76\u4e86\uff0c\u6240\u4ee5\u5408\u5e76\u5b8c\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u3002\n\n1A\uff0c\u611f\u52a8\u3002\u3002\u3002\n\n\u6ce8\u610f\u8981\u79bb\u6563\u5316\u3002\n\n\u6307\u9488\u543c\u554a\uff01\uff01\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nconst int MAXN = 100000;\n\nint n, tot;\nint ans[MAXN | 1], a[MAXN | 1], hash[MAXN | 1];\nstd::vector < int > e[MAXN | 1];\n\nstruct Segtree {\n\tint sumv;\n\tSegtree *ch[2];\n\tSegtree(Segtree *ch0 = NULL, Segtree *ch1 = NULL, int val = 0) : sumv(val) {\n\t\tch[0] = ch0;\n\t\tch[1] = ch1;\n\t}\n} *root[MAXN | 1];\n\ninline int read() {\n\tregister int x = 0;\n\tregister char ch = getchar();\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) {\n\t\tx = x * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn x;\n}\n\n// \u52a8\u6001\u5f00\u70b9\nvoid insert(Segtree *&o, int w, int l = 1, int r = tot) {\n\tif(o == NULL) o = new Segtree;\n\t++(o -> sumv);\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tif(w <= mid) insert(o -> ch[0], w, l, mid);\n\telse insert(o -> ch[1], w, mid + 1, r);\n}\n\nint query(Segtree *o, int ql, int qr, int l = 1, int r = tot) {\n\tif(o == NULL) return 0;\n\tif(ql <= l && r <= qr) return o -> sumv;\n\tint mid = (l + r) >> 1, res = 0;\n\tif(ql <= mid) res = query(o -> ch[0], ql, qr, l, mid);\n\tif(mid < qr) res += query(o -> ch[1], ql, qr, mid + 1, r);\n\treturn res;\n}\n\nSegtree *merge(Segtree *x, Segtree *y, int l = 1, int r = tot) {\n\tif(x == NULL) return y;\n\tif(y == NULL) return x;\n\tif(l == r) return new Segtree(NULL, NULL, x -> sumv + y -> sumv);\n\tint mid = (l + r) >> 1;\n\tSegtree *res = new Segtree(merge(x -> ch[0], y -> ch[0], l, mid), merge(x -> ch[1], y -> ch[1], mid + 1, r), x -> sumv + y -> sumv);\n    // \u8fd9\u91cc\u5c31\u662f\u76f4\u63a5\u5220\u9664\u7684\u90e8\u5206\n\tdelete x;\n\tdelete y;\n\treturn res;\n}\n\nvoid dfs(int x) {\n\tfor(std::vector < int >::iterator it = e[x].begin(); it != e[x].end(); ++it) {\n\t\tint to = *it;\n\t\tdfs(to);\n\t\troot[x] = merge(root[x], root[to]);\n\t}\n\tans[x] = query(root[x], a[x] + 1, tot);\n\tinsert(root[x], a[x]);\n}\n\nint main() {\n\tn = read();\n\tfor(int i = 1; i <= n; ++i) a[i] = hash[i] = read();\n\tfor(int i = 2; i <= n; ++i) e[read()].push_back(i);\n\tstd::sort(hash + 1, hash + 1 + n);\n\ttot = std::unique(hash + 1, hash + 1 + n) - hash - 1;\n\tfor(int i = 1; i <= n; ++i) a[i] = std::lower_bound(hash + 1, hash + 1 + tot, a[i]) - hash;\n\tdfs(1);\n\tfor(int i = 1; i <= n; ++i) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1543228178,
        "uid": 24878,
        "name": "iodwad",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5f0010\u500d\u5de6\u53f3\u4e00\u76f4MLE+RE\uff0c\u7136\u540e\u5c1d\u8bd5\u7740\u5f00\u4e8620\u500d\u5c31A\u4e86\u3002\u3002\u3002\u7a92\u606f\n\n------------\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u6211\u4eec\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u505a\u3002\n\n\u6240\u8c13\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u5c31\u662f\u628a\u7ed3\u6784\u76f8\u540c\u7684\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u7684\u4fe1\u606f\u5408\u5728\u4e00\u8d77\uff0c\u5408\u5e76\u7684\u65b9\u5f0f\u6bd4\u8f83\u7c7b\u4f3c\u5de6\u504f\u6811\u4ec0\u4e48\u7684\u3002\n\n------------\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u67e5\u8be2\u5927\u4e8e\u5b83\u7684\u5b50\u8282\u70b9\u6570\u91cf\uff0c\u7136\u540e\u628a\u5f53\u524d\u8282\u70b9\u5e76\u5230\u5b83\u7684\u7236\u4eb2\u4e0a\u9762\u53bb\u3002\n\n\u5bf9\u4e8e\u6b64\u7c7b\u578b\u7684\u9898\u76ee\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\uff08\u4e0d\u7136\u70b8\u7684\u6ca1\u8fb9\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(nlogn)$\u3002\n\n------------\n\nAC\u4ee3\u7801\u5982\u4e0b\uff1a\n\n`455ms 32824kb`\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace StandardIO {\n\n\ttemplate<typename T> inline void read (T &x) {\n\t\tx=0;T f=1;char c=getchar();\n\t\tfor(; c<'0'||c>'9'; c=getchar()) if(c=='-') f=-1;\n\t\tfor(; c>='0'&&c<='9'; c=getchar()) x=x*10+c-'0';\n\t\tx*=f;\n\t}\n\ttemplate<typename T>inline void write (T x) {\n\t\tif (x<0) putchar('-'),x*=-1;\n\t\tif (x>=10) write(x/10);\n\t\tputchar(x%10+'0');\n\t}\n\n}\n\nusing namespace StandardIO;\n\nnamespace Solve {\n\t\n\tconst int N=100100;\n\t\n\tint n;\n\tint cnt;\n\tstruct node {\n\t\tint id,v;\n\t\tinline bool operator < (const node &x) const {\n\t\t\treturn v<x.v;\n\t\t}\n\t}p[N];\n\tvector<int>graph[N];\n\tint tree_node;\n\tint val[N],tree[(int)(N*20)],ls[(int)(N*20)],rs[(int)(N*20)],root[N],ans[N];\n\t\n\tvoid build (int l,int r,int v,int &root) {\n\t\tif (!root) root=++tree_node;\n\t\ttree[root]++;\n\t\tif (l==r) return;\n\t\tint mid=(l+r)>>1;\n\t\tif (v<=mid) build(l,mid,v,ls[root]);\n\t\telse build(mid+1,r,v,rs[root]);\n\t}\n\tint query (int l,int r,int v,int root) {\n\t\tif (!root) return 0;\n\t\tif (v<=l) return tree[root];\n\t\tint mid=(l+r)>>1;\n\t\tif (v<=mid) return query(l,mid,v,ls[root])+query(mid+1,r,v,rs[root]);\n\t\treturn query(mid+1,r,v,rs[root]);\n\t}\n\tint merge (int x,int y) {\n\t\tif (!x||!y) return x+y;\n\t\tint root=++tree_node;\n\t\ttree[root]=tree[x]+tree[y];\n\t\tls[root]=merge(ls[x],ls[y]);\n\t\trs[root]=merge(rs[x],rs[y]);\n\t\treturn root;\n\t}\n\tvoid dfs (int now) {\n\t\tfor (register int i=0; i<graph[now].size(); ++i) {\n\t\t\tint to=graph[now][i];\n\t\t\tdfs(to);\n\t\t\troot[now]=merge(root[now],root[to]);\n\t\t}\n\t\tans[now]=query(1,cnt,val[now]+1,root[now]);\n\t\tbuild(1,cnt,val[now],root[now]);\n\t}\n\t\n\tinline void solve () {\n\t\tread(n);\n\t\tfor (register int i=1; i<=n; ++i) {\n\t\t\tread(p[i].v),p[i].id=i;\n\t\t}\n\t\tsort(p+1,p+n+1);\n\t\tfor (register int i=1; i<=n; ++i) {\n\t\t\tif (p[i].v!=p[i-1].v) val[p[i].id]=++cnt;\n\t\t\telse val[p[i].id]=cnt;\n\t\t}\n\t\tfor (register int i=2; i<=n; ++i) {\n\t\t\tint x;read(x);\n\t\t\tgraph[x].push_back(i);\n\t\t}\n\t\tdfs(1);\n\t\tfor (register int i=1; i<=n; ++i) {\n\t\t\twrite(ans[i]),putchar('\\n');\n\t\t}\n\t}\n}\n\nusing namespace Solve;\n\nint main () {\n\tsolve();\n}\n```",
        "postTime": 1539914161,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u660e\u786e\u95ee\u9898\u8981\u6c42\u6bcf\u4e2a\u70b9\u5b50\u6811\u4e2d\u6bd4\u5b83\u6743\u503c\u5927\u7684\u70b9\u6709\u591a\u5c11\u4e2a\u3002dfs\u4e00\u4e0b\u5c31\u53ef\u4ee5\u8f6c\u6362\u6210\u533a\u95f4\u95ee\u9898\u3002\n\n\u7136\u540e\u5173\u4e8e\u6c42\u533a\u95f4\u6bd4\u67d0\u4e2a\u503c\u5927\u7684\u70b9\u4e2a\u6570\uff0c\u53ef\u4ee5\u9009\u62e9\u5206\u5757\uff0c\u5757\u5185\u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5\u505a\u5230\u6839\u53f7\u6c42\u503c\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\sqrt n\\log_2\\sqrt n)$\u3002\uff08\u6570\u636e\u624d1e5\u53ef\u4ee5\u653e\u5fc3\u6c34\u8fc7\uff09\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define For(i,a,b) for(i=(a);i<=(b);++i)\n#define Forward(i,a,b) for(i=(a);i>=(b);--i)\n#define Rep(i,a,b) for(register int i=(a),i##end=(b);i<=i##end;++i)\n#define Repe(i,a,b) for(register int i=(a),i##end=(b);i>=i##end;--i)\nusing namespace std;\ntemplate<typename T>inline void read(T &x)\n{\n\tT s=0,f=1;char k=getchar();\n\twhile(!isdigit(k)&&(k^'-'))k=getchar();\n\tif(!isdigit(k)){f=-1;k=getchar();}\n\twhile(isdigit(k)){s=s*10+(k^48);k=getchar();}\n\tx=s*f;\n}\nvoid file()\n{\n\t#ifndef ONLINE_JUDGE\n\t\tfreopen(\"test.in\",\"r\",stdin);\n\t\tfreopen(\"test.out\",\"w\",stdout);\n\t#endif\n}\nconst int MAXN=1e5+7;\nstatic int n,w[MAXN],fa[MAXN],e,head[MAXN];\nstatic struct edge\n{\n\tint v,nxt;\n}p[MAXN];\ninline void add(int u,int v){p[++e].v=v;p[e].nxt=head[u];head[u]=e;}\nstatic int dfn[MAXN],ri[MAXN],sz[MAXN];\nvoid dfs(int u)\n{\n\tri[dfn[u]=++e]=u;sz[u]=1;\n\tfor(register int v=head[u];v;v=p[v].nxt)if(fa[u]^p[v].v)\n\t\tdfs(p[v].v),sz[u]+=sz[p[v].v];\n}\nstatic int blo,c[1001][1001],a[MAXN];\n#define bel(x) ((x-1)/blo+1)\nvoid init()\n{\n\tread(n);blo=sqrt(n)+1;\n\tRep(i,1,n)read(w[i]);\n\tRep(i,2,n)read(fa[i]),add(fa[i],i);\n\te=0;dfs(1);\n\tRep(i,1,n)c[bel(i)][i-(bel(i)-1)*blo]=a[i]=w[ri[i]];\n\tRep(i,1,n/blo+1)\n\t\tsort(c[i]+1,c[i]+1+(i==n/blo+1?n-blo*(bel(n)-1):blo));\n}\ninline int query(int l,int r,int bs)\n{\n\tif(l>r)return 0;\n\tstatic int ans;ans=0;\n\tif(bel(l)==bel(r))\n\t{\n\t\tRep(i,l,r)ans+=bs<a[i];\n\t\treturn ans;\n\t}\n\tfor(;l%blo!=1;++l)ans+=bs<a[l];\n\tif(bel(l)==bel(r))\n\t{\n\t\tRep(i,l,r)ans+=bs<a[i];\n\t\treturn ans;\n\t}\n\tfor(;r%blo;--r)ans+=bs<a[r];\n\tRep(i,bel(l),bel(r))\n\t\tans+=blo-(upper_bound(c[i]+1,c[i]+blo+1,bs)-c[i])+1;\n\treturn ans;\n}\nvoid solve()\n{\n\tRep(i,1,n)\n\t\tprintf(\"%d\\n\",query(dfn[i]+1,dfn[i]+sz[i]-1,w[i]));\n}\nint main()\n{\n\tfile();\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1517719923,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "# \u6765\u4e00\u53d1\u4e0d\u7528\u79bb\u6563\u5316\u7684\u73a9\u6cd5\n\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u662f\u5173\u4e8e\u4efb\u4f55\u4e00\u4e2a\u70b9i\uff0ci\u7684\u5b50\u6811\u4e2dp\u503c>p(i)\u7684\u8282\u70b9\u4e2a\u6570\n\n\u4e00\u79cd\u505a\u6cd5\u5c31\u662f\u5c06\u6743\u503c\u79bb\u6563\u5316\uff0c\u7136\u540e\u4ee5\u79bb\u6563\u5316\u540e\u6743\u503c\u7684size\uff08\u5373n\uff09\u6784\u9020\u6811\u72b6\u6570\u7ec4\uff0c\u4f7f\u7528dfs\u8ba1\u7b97\u81ea\u5df1\u7684\u5b50\u6811\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff08\u5177\u4f53\u7684\u53ef\u4ee5\u770b\u5176\u4ed6\u9898\u89e3\uff09\n\n**\u90a3\u4e48\u53e6\u4e00\u79cd\u505a\u6cd5\u5462\uff1f**\n\n## ~~\u5f53\u7136\u5c31\u662f\u66b4\u529b\u6570\u5566~~\n\n~~\u5f53\u7136\u66b4\u529b\u6570\u8981\u8d85\u65f6\u7684~~\n\n\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u505a\u6cd5\uff1a\n\n\u4ee5\u4e00\u79cd\u65b9\u5f0f\u6392\u5217\u8fd9n\u4e2a\u70b9\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8fd9\u68f5\u6811\u7684\u6bcf\u4e00\u68f5\u5b50\u6811\uff0c\u8fd9\u4e2a\u5e8f\u5217\u5b58\u5728\u4e00\u6761\u8fde\u7eed\u5b57\u6bb5\uff0c\u4ed6\u4eec\u5305\u542b\u7684\u70b9\u76f8\u540c\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u53ef\u4ee5\u5b9e\u73b0\uff0c\u90a3\u4e48\u9898\u76ee\u5c31\u4ece\u6c42i\u7684\u5b50\u6811\u4e2dp\u503c>p(i)\u7684\u8282\u70b9\u4e2a\u6570\u53d8\u6210\u4e86\u6c42\u8be5\u5e8f\u5217\u4e2d\u5305\u542bi\u7684\u67d0\u533a\u95f4\u4e2dp\u503c>p(i)\u7684\u5143\u7d20\u4e2a\u6570\u4e86\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\uff0c\u53ea\u8981\u5c06\u6240\u6709\u70b9\u6309\u6743\u503c\u6392\u5e8f\uff0c\u6811\u72b6\u6570\u7ec4\u6c42\u533a\u95f4\u548c\uff0c\u505a\u5b8c\u4e00\u4e2a\u70b9\u66f4\u65b0\u5c31\u53ef\u4ee5\u4e86\u3002\n\n**\u90a3\u4e48\u8fd9\u4e2a\u795e\u5947\u7684\u5e8f\u5217\u662f\u4ec0\u4e48\u5462**\n\n\u76f8\u4fe1\u5927\u5bb6\u90fd\u5df2\u7ecf\u60f3\u5230\u4e86\uff0c\u5c31\u662f\u2026\u2026\n\n## dfs\u5e8f\n\n\u672c\u9898\u89e3\u91c7\u7528\u5148\u5e8f\u904d\u5386\uff0c\u540e\u5e8f\u904d\u5386\u505a\u6cd5\u7c7b\u4f3c\n\n\u7528l[i],r[i]\u8868\u793a\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u5728\u5148\u5e8f\u904d\u5386\u7684\u533a\u95f4\n\n\u90a3\u4e48l[i]\u5c31\u662fi\u7684\u5e8f\u5217\u4f4d\u7f6e\uff0cr[i]\u5c31\u662fi\u7684\u6700\u53f3\u53f6\u8282\u70b9\u7684\u5e8f\u5217\u4f4d\u7f6e\uff0c\u5373i\u56de\u6eaf\u65f6\u7684\u8ba1\u6570\u5668\u503c\n\n\u7ec6\u8282\u8be6\u89c1\u4ee3\u7801(127ms/8.69MB)\n```cpp\n//This program is written by Bring.\n#pragma GCC optimize(\"Ofast\",\"inline\",\"-ffast-math\")\n#pragma GCC target(\"avx,sse2,sse3,sse4,mmx\")\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define Rd(a) (a=read())\n#define Gc(a) (a=getchar())\n#define Pc(a) putchar(a)\ninline int read(){\n    register int x;register char c(getchar());register bool k;\n    while(!isdigit(c)&&c^'-')if(Gc(c)==EOF)exit(0);\n    if(c^'-')k=1,x=c&15;else k=x=0;\n    while(isdigit(Gc(c)))x=(x<<1)+(x<<3)+(c&15);\n    return k?x:-x;\n}\nvoid wr(register int a){\n    if(a<0)Pc('-'),a=-a;\n    if(a<=9)Pc(a|'0');\n    else wr(a/10),Pc((a%10)|'0');\n}\nsigned const INF(0x3f3f3f3f),NINF(0xc3c3c3c3);\nlong long const LINF(0x3f3f3f3f3f3f3f3fLL),LNINF(0xc3c3c3c3c3c3c3c3LL);\n#define Ps Pc(' ')\n#define Pe Pc('\\n')\n#define Frn0(i,a,b) for(register int i(a);i<(b);++i)\n#define Frn1(i,a,b) for(register int i(a);i<=(b);++i)\n#define Frn_(i,a,b) for(register int i(a);i>=(b);--i)\n#define Mst(a,b) memset(a,b,sizeof(a))\n#define File(a) freopen(a\".in\",\"r\",stdin),freopen(a\".out\",\"w\",stdout)\n#define N (100010)\n#define I (c[i].i)\nint n,l[N],r[N],idx,t[N],ans[N];\nstruct T{int p,i;}c[N];\nvector<int>e[N];\nvoid dfs(int x){l[x]=++idx;for(int i:e[x])dfs(i);r[x]=idx;}\ninline void add(int x){while(x<=n)++t[x],x+=x&-x;}\ninline int sm(int x){int r(0);while(x)r+=t[x],x^=x&-x;return r;}\ninline int qry(int x,int y){return sm(y)-sm(x-1);}\nsigned main(){\n    Rd(n);\n    Frn1(i,1,n)c[i]={read(),i};\n    Frn1(i,2,n)e[read()].push_back(i);\n    dfs(1),sort(c+1,c+n+1,[](T a,T b){return a.p<b.p;});\n    Frn1(i,1,n)ans[I]=r[I]-l[I]-qry(l[I],r[I]),add(l[I]);\n    Frn1(i,1,n)wr(ans[i]),Pe;\n    exit(0);\n}\n```",
        "postTime": 1575729761,
        "uid": 66199,
        "name": "Bring",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "#### [\u6811\u4e0a\u9006\u5e8f\u5bf9](https://www.luogu.org/problem/P3605 \"\u6811\u4e0a\u9006\u5e8f\u5bf9\")\n\u8fd9\u9053\u9898\u5462 \u548c\u9006\u5e8f\u5bf9\u975e\u5e38\u76f8\u4f3c \u53ea\u9700\u8981\u5904\u7406\u51fa\u6bcf\u6761\u94fe\u4e0a\u7684\u9006\u5e8f\u5bf9\u6570\u5373\u53ef\n#### \u5904\u7406\u65f6\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\uff1a\n![file](http://101.200.56.58/wp-content/uploads/2019/10/image-1571974924910.png)\n\u5904\u7406\u53f3\u5b50\u6811\u65f6\u4e00\u5b9a\u4f1a\u5c06\u5de6\u5b50\u6811\u7684\u4fe1\u606f\u91cd\u590d\u7edf\u8ba1\n\u8fd9\u65f6\u5019\u9700\u8981\u8bb0\u5f55\u4e00\u4e2alast\u503c \u4e00\u4e2a\u5c0f\u5c0f\u7684\u5bb9\u65a5\u601d\u60f3\u5373\u53ef\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long \nint c[100100],data[100100],N,n,ans=0,maxi=0,head[100100],num[100100],lst[1001000];\nint lowbit(int i) {return i&(-i);}\t\nstruct zz{int i,data;}d[500010];\nstruct node{int to,nex;}e[1001000];\nvoid add(int x,int y){e[++N].to=y;e[N].nex=head[x];head[x]=N;}\nvoid insert(int i,int ci){for(;i<=n;i+=lowbit(i)) c[i]+=ci;}\nint query(int i){int sum=0;for(;i>0;i-=lowbit(i))sum+=c[i];return sum;}\nbool cmp(zz a,zz b){if(a.data==b.data)return a.i<b.i; return a.data<b.data;}\nint dfs(int now)\n{\n    insert(d[now].data,1);\n    int rongchi=query(n)-query(d[now].data);\n    for(int i=head[now];i;i=e[i].nex){\n    \tint to=e[i].to;dfs(to);\n    }\n    num[now]+=query(n)-query(d[now].data)-rongchi;\n}\nbool cmp1(zz a,zz b){return a.data<b.data;};\nbool cmp2(zz a,zz b){return a.i<b.i;};\nsigned main()\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++) d[i].i=i,cin>>d[i].data;\n\tsort(d+1,d+n+1,cmp1);\n\tfor(int i=1;i<=n;i++) d[i].data=i;\n\tsort(d+1,d+n+1,cmp2);\n\tfor(int i=2;i<=n;i++){int x,y=i;cin>>x;add(x,y);}\n\tdfs(1);\tfor(int i=1;i<=n;i++) cout<<num[i]<<endl;\n\treturn 0;\n} \n```",
        "postTime": 1571975058,
        "uid": 58064,
        "name": "COUPDETAT",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u7bc7\u5e73\u8861\u6811\u542f\u53d1\u5f0f\u5408\u5e76\n\n~~\u867d\u7136\u770b\u4e0a\u53bb\u5f88\u6162\u4f46\u5b9e\u6d4b423ms\u5438\u6c27209ms~~\n\n\u4e00\u5f00\u59cb\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u9897\u72ec\u7acb\u7684Splay\n\ndfs\u4e0b\u53bb\uff0c\u56de\u6eaf\u65f6\u4ece\u53f6\u8282\u70b9\u5f00\u59cb\uff0c\u5728\u513f\u5b50\u4e2d\u627e\u4e00\u4e2a\u68f5\u6700\u5927\u7684Splay(\u5176\u6839\u8bb0\u4f5cwson)\uff0c\u628a\u5176\u4ed6\u513f\u5b50\u7684Splay\u5e76\u5230wson\u4e2d\u7684\u91cc\u9762\u6765\uff0c\u7136\u540e\u518d\u628a\u81ea\u5df1\u5e76\u8fdb\u53bb\uff0c\u7528\u6570\u7ec4pos[x]\u8868\u793a\u7f16\u53f7\u4e3ax\u7684\u70b9\u7684\u91cd\u513f\u5b50\u5728Splay\u4e2d\u8282\u70b9\u6307\u9488\uff0c\u518d\u628apos[\u5f53\u524d\u70b9]\u8bbe\u7f6e\u4e3apos[wson](\u7c7b\u4f3c\u8def\u5f84\u538b\u7f29)\uff0c\u67e5\u8be2\u6bd4\u81ea\u5df1\u6743\u503c\u5927\u7684\u6709\u591a\u5c11\u4e2a\n\n```cpp\n#include<cstdio>\n#include<utility>\n#include<algorithm>\nusing std::fill;\nusing std::pair;\nusing std::make_pair;\ntemplate<class type>inline const void read(type &in)\n{\n    in=0;char ch=getchar();short fh=1;\n    while (ch<48||ch>57)fh=ch=='-'?-1:fh,ch=getchar();\n    while (ch>47&&ch<58)in=(in<<3)+(in<<1)+ch-48,ch=getchar();\n    in*=fh;\n}\nconst int N=1e5+10;\nclass Splay\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tint size,val;\n\t\t\ttree *fa,*son[2];\n\t\t\tinline const bool identity()\n\t\t\t{\n\t\t\t\treturn fa->son[1]==this;\n\t\t\t}\n\t\t\tinline const void pushup()\n\t\t\t{\n\t\t\t\tsize=son[0]->size+1+son[1]->size;\n\t\t\t}\n\t\t}*null,memory_pool[N],*recycle[N],*tail;\n\t\tint top;\n\tpublic:\n\t\ttree *pos[N];\n\tprotected:\n\t\tinline const void init()\n\t\t{\n\t\t\ttop=0;\n\t\t\ttail=memory_pool;\n\t\t\tnull=tail++;\n\t\t\tnull->size=null->val=0;\n\t\t\tnull->fa=null->son[0]=null->son[1]=null;\n\t\t\tfill(pos+1,pos+N,null);\n\t\t}\n\t\tinline tree *spawn(int key)\n\t\t{\n\t\t\ttree *p=top?recycle[--top]:tail++;\n\t\t\tp->size=1;\n\t\t\tp->val=key;\n\t\t\tp->fa=p->son[0]=p->son[1]=null;\n\t\t\treturn p;\n\t\t}\n\t\tinline const void connect(tree *p,tree *fa,bool which)\n\t\t{\n\t\t\tif (p!=null)p->fa=fa;\n\t\t\tif (fa!=null)fa->son[which]=p,fa->pushup();\n\t\t}\n\t\tinline const void rotate(tree *p)\n\t\t{\n\t\t\ttree *fa=p->fa;\n\t\t\tbool id=p->identity();\n\t\t\tconnect(p,fa->fa,fa->identity());\n\t\t\tconnect(p->son[id^1],fa,id);\n\t\t\tconnect(fa,p,id^1);\n\t\t}\n\t\tinline const void splay(tree *&root,tree *p)\n\t\t{\n\t\t\tfor (tree *fa;(fa=p->fa)!=null;rotate(p))\n\t\t\t\tif (fa->fa!=null)\n\t\t\t\t\trotate(p->identity()^fa->identity()?p:fa);\n\t\t\troot=p;\n\t\t}\n\t\tinline const void find(tree *root,int key)\n\t\t{\n\t\t\ttree *now=root;\n\t\t\twhile (now->son[now->val<key]!=null&&now->val!=key)\n\t\t\t\tnow=now->son[now->val<key];\n\t\t\tsplay(root,now);\n\t\t}\n\tpublic:\n\t\tinline Splay(){init();}\n\t\tinline const void insert(tree *&root,int key)\n\t\t{\n\t\t\tif (root==null)return (void)(root=spawn(key));\n\t\t\ttree *now=root,*fa;bool which;\n\t\t\twhile (1)\n\t\t\t\tif (fa=now,which=fa->val<key,(now=fa->son[which])==null)\n\t\t\t\t\treturn now=spawn(key),connect(now,fa,which),splay(root,now);\n\t\t}\n\t\tinline const void merge(tree *a,tree *&b) //\u628aa\u5408\u5e76\u5230b\u91cc\n\t\t{\n\t\t\tif (a==null)return;\n\t\t\tmerge(a->son[0],b);\n\t\t\tmerge(a->son[1],b);\n\t\t\trecycle[top++]=a;\n\t\tinsert(b,a->val);\n\t\t}\n\t\tinline const int query(tree *p,int key)\n\t\t{\n\t\t\tfind(p,key); //\u628ap\u4e2d\u6743\u503c\u4e3akey\u7684\u8282\u70b9\u63d0\u5230\u6839\n\t\t\treturn p->son[1]->size; //\u5728p\u4e2d\u6bd4key\u5927\u7684\u6570\u7684\u4e2a\u6570\u5373\u6b64\u65f6\u7684\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u5927\u5c0f\n\t\t}\n}S;\npair<int,int>e[N];\nint head[N],cnt;\ninline const void connect(int u,int v)\n{\n\te[++cnt]=make_pair(v,head[u]);\n\thead[u]=cnt;\n}\nint n,w[N],ans[N];\ninline const void dfs(int p)\n{\n\tint wson=0,weight=0;\n\tfor (int son,i=head[p];i;i=e[i].second)\n\t\tif (dfs(son=e[i].first),S.pos[son]->size>weight) //\u627e\u6700\u5927\u7684\u513f\u5b50\n\t\t\tweight=S.pos[wson=son]->size;\n\tfor (int son,i=head[p];i;i=e[i].second)\n\t\tif ((son=e[i].first)!=wson) //wson\u81ea\u5df1\u5c31\u4e0d\u7528\u5408\u5e76\u4e86\n\t\t\tS.merge(S.pos[son],S.pos[wson]);\n\tS.insert(S.pos[p],w[p]); //\u521d\u59cb\u5316\u8282\u70b9\uff0c\n\tif (!wson)return; //\u53f6\u8282\u70b9\u5c31\u76f4\u63a5\u8fd4\u56de\u4e86\n\tS.merge(S.pos[p],S.pos[wson]);\n\tans[p]=S.query(S.pos[p],w[p]);\n\tS.pos[p]=S.pos[wson];\n}\nint main()\n{\n\tread(n);\n\tfor (int i=1;i<=n;i++)read(w[i]);\n\tfor (int fa,i=2;i<=n;i++)\n\t\tread(fa),connect(fa,i);\n\tdfs(1);\n\tfor (int i=1;i<=n;i++)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1545833867,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "**\u77e5\u8bc6\u70b9\uff1aBIT DFS**\n\n\u8fd9\u4e48\u5927\u7684\u6570\u636e \u76f4\u63a5**\u79bb\u6563\u5316\u5904\u7406**\n\n\u6211\u8fd9\u91cc\u6c42ans\u6570\u7ec4\u7684\u65f6\u5019\u7528\u4e86~~\u6211\u4e5f\u4e0d\u77e5\u9053\u53eb\u4ec0\u4e48\u7684~~\u601d\u60f3\n\n**\u6ee1\u8db3\u6761\u4ef6\u7684=\u603b\u7684-\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684** \u5c31\u8fd9\u4e48\u7b80\u5355\n\nquery\u548cupdate\u51fd\u6570\u662f\u5904\u7406BIT\u7684 (\u6a21\u677f\u7c7b\u578b\n\nDFS\u5b8c \u5c31\u53ef\u4ee5\u51fa\u7b54\u6848\u54af\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<stack>\n#include<set>\n#define MAXN 100005\n#define LL long long\n#define INF 2147483647\n#define MOD 1000000007\n#define free(s) freopen(\"s.txt\",\"r\",stdin);\n#define lowbit(x) ((x&(-x))) \n#define debug(x) cout<<x<<endl;\nusing namespace std;\nconst int L=100005;\nstruct node{\n\tint num,q;\n};\nnode f[L];\nint n,c[L],ans[L],siz[L],bit[L];\nvector<int>tree[L];\nbool cmp(const node &a,const node &b)\n{\n\treturn a.q<b.q;\n}\nint query(int x)\n{\n\tint t=0;\n\twhile(x)\n\t{\n\t\tt+=bit[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn t;\n}\nvoid update(int x,int v)\n{\n\tfor(int i=x;i<=n;i+=lowbit(i))\n\t\tbit[i]+=v;\n}\nint dfs(int u)\n{\n\tsiz[u]=1;\n\tint pre=query(c[u]);\n\tfor(int i=0;i<tree[u].size();i++)\n\t{\n\t\tdfs(tree[u][i]);\n\t\tsiz[u]+=siz[tree[u][i]];\t\t\n\t}\n\tans[u]=siz[u]-1-(query(c[u])-pre);\n\tupdate(c[u],1);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&f[i].q);\n\t\tf[i].num=i;\n\t}\n\tsort(f+1,f+n+1,cmp);\n\tfor(int i=1;i<=n;i++)\n\t\tc[f[i].num]=i;//\u79bb\u6563\u5316 \n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint m;\n\t\tscanf(\"%d\",&m);\n\t\ttree[m].push_back(i);\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1528507081,
        "uid": 37427,
        "name": "\u66f9\u8001\u5e08",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "\u6709\u6bd2\uff01\uff01\u4e00\u5f00\u59cb\u79bb\u6563\u5316\u9519\u4e86WA\u5230\u6000\u7591\u4eba\u751f\u3002\n\n\u672c\u9898\u53ef\u4ee5\u770b\u6210\u6811\u4e0a\u9006\u5e8f\u5bf9\uff0c\u9006\u5e8f\u5bf9\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u6c42\uff0c\u6743\u503c\u592a\u5927\u4e86\u5148\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u6811\u4e0a\u7684\u8282\u70b9u\uff0c\u5148\u904d\u5386\u5176\u5b50\u6811\uff0c\u628a\u5b50\u5b59\u8282\u70b9\u7684\u6743\u503c\u7d2f\u52a0\u8fdb\u6811\u72b6\u6570\u7ec4\uff0c\u6700\u540e\u67e5\u8be2\u6709\u51e0\u4e2a\u8282\u70b9\u6bd4u\u5c0f\uff0c\u518d\u7ef4\u62a4siz\u3010u\u3011u\u53ca\u5176\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u6709\u51e0\u4e2a\u8282\u70b9\u6bd4u\u5927\u4e86\u3002\n\n\u4e0d\u8fc7\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u662f\u6309\u6811\u7684\u540e\u7eed\u904d\u5386\u8ba1\u7b97\u7b54\u6848\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u8ba1\u7b97u\u4e4b\u524d\uff0cu\u7684\u5144\u5f1f\u8282\u70b9\u6709\u53ef\u80fd\u4e5f\u4f1a\u88ab\u63d2\u5165\u6811\u72b6\u6570\u7ec4\u4e2d\uff0c\u5982\u4f55\u6392\u9664\u8fd9\u4e9b\u591a\u4f59\u7684\u7b54\u6848\uff1f\n\n\u9012\u5f52\u7684\u65f6\u5019\u67e5\u4e00\u6b21\uff0c\u56de\u6eaf\u7684\u65f6\u5019\u67e5\u4e00\u6b21\uff0c\u4e24\u8005\u76f8\u51cf\uff0c\u5c31\u77e5\u9053\u771f\u6b63\u6bd4u\u5c0f\u7684\u8282\u70b9\u662f\u54ea\u4e00\u4e9b\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#define N 100010\nusing namespace std;\nstruct node{\n  int v,nxt;\n}e[N];\nstruct no{\n  int name,p;\n}f[N];\nint head[N],num,n;\nint val[N],siz[N],s[N],ans[N];\nbool cmp(const no &a,const no &b){return a.p<b.p;}\nbool cmp2(const no &a,const no &b){return a.name<b.name;}\nvoid add(int u,int v){\n  e[num].v=v;\n  e[num].nxt=head[u];\n  head[u]=num++;\n}\nint lowbit(int k){return k&(-k);}\nvoid add(int x){\n  while(x<=n){\n    s[x]++;\n    x+=lowbit(x);\n  }\n}\nint sum(int x){\n  int ans=0;\n  while(x>0){\n    ans+=s[x];\n    x-=lowbit(x);\n  }\n  return ans;\n}\nvoid dfs(int u){\n  siz[u]=1;\n  int pre=sum(f[u].p);\n  for(int i=head[u];i!=-1;i=e[i].nxt){\n    int v=e[i].v;\n    dfs(v);\n    siz[u]+=siz[v];\n  }\n  ans[u]=siz[u]-1-(sum(f[u].p)-pre);\n  add(f[u].p);\n}\nint main(){\n  freopen(\"hh.in\",\"r\",stdin);\n  freopen(\"hh.out\",\"w\",stdout);\n  memset(head,-1,sizeof(head));\n  int a,b;\n  cin>>n;\n  for(int i=1;i<=n;i++)scanf(\"%d\",&f[i].p),f[i].name=i;\n  sort(f+1,f+1+n,cmp);\n  for(int i=1;i<=n;i++)f[i].p=i;\n  sort(f+1,f+1+n,cmp2);\n  for(int i=2;i<=n;i++){\n    scanf(\"%d\",&a);\n    add(a,i);\n  }\n  dfs(1);\n  for(int i=1;i<=n;i++)printf(\"%d\\n\",ans[i]);\n  return 0;\n}\n\n```",
        "postTime": 1505978081,
        "uid": 31337,
        "name": "\u91d1\u95ea\u95ea\u6570\u636e\u7403",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "\u6765\u81ea\u6211\u7684\u535a\u5ba2\uff1a<http://blog.csdn.net/yihan\\_z/article/details/70144167>\n\n\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u51fa\u4e00\u68f5\u6709\u6839\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u95ee\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u6bd4\u8fd9\u4e2a\u70b9\u5927\u7684\u70b9\u7684\u4e2a\u6570\u3002\n\n\n\u9996\u5148\u6743\u503c\u5f88\u5927\u9700\u8981\u79bb\u6563\u5316\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5efa\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u904d\u5386\u6bcf\u4e00\u68f5\u5b50\u6811\uff0c\u7136\u540e\u5c06\u5b50\u6811\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u81ea\u5df1\u7684\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5728\u67e5\u8be2\u4e4b\u540e\u5c06\u81ea\u5df1\u63d2\u5165\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define N 100005\nusing namespace std;\nstruct Node {\n    Node *ch[2];\n    int l,r,sum;\n    Node(int _l,int _r):l(_l),r(_r) {\n        sum=0;\n        ch[0]=ch[1]=NULL;\n    }\n    Node() {}\n    void maintain() {\n        sum=0;\n        if(ch[0]) sum+=ch[0]->sum;\n        if(ch[1]) sum+=ch[1]->sum;\n        return ;\n    }\n    void* operator new (size_t) {\n        static Node *mempool,*C;\n        if(mempool==C) mempool=(C=new Node[1<<20])+(1<<20);\n        return C++;\n    }\n}*root[N];\nstruct Edge {\n    int to,nxt;\n    Edge() {}\n    Edge(int _to,int _nxt):to(_to),nxt(_nxt) {}\n}e[N];\nint n,m,tot=-1,fir[N],a[N],b[N],ans[N];\nvoid Add_Edge(int x,int y) {\n    e[++tot]=Edge(y,fir[x]), fir[x]=tot;\n    return ;\n}\nvoid Merge(Node*& x,Node*& y) {\n    if(!y) return ;\n    if(!x) {\n        x=y;\n        return ;\n    }\n    x->sum+=y->sum;\n    Merge(x->ch[0],y->ch[0]), Merge(x->ch[1],y->ch[1]);\n    return ;\n}\nvoid Insert(Node*& o,int v,int L,int R) {\n    if(!o) o=new Node(L,R);\n    if(o->l==o->r) {\n        o->sum++;\n        return ;\n    }\n    int mid=L+R>>1;\n    if(v<=mid) Insert(o->ch[0],v,L,mid);\n    else Insert(o->ch[1],v,mid+1,R);\n    o->maintain();\n    return ;\n}\nint Query(Node* o,int v) {\n    if(!o) return 0;\n    if(v==o->r) return o->sum;\n    int mid=o->l+o->r>>1;\n    if(v<=mid) return Query(o->ch[0],v);\n    return (o->ch[0] ? o->ch[0]->sum : 0)+Query(o->ch[1],v);\n}\nvoid dfs(int x) {\n    for(int i=fir[x];~i;i=e[i].nxt) {\n        dfs(e[i].to);\n        Merge(root[x],root[e[i].to]);\n    }\n    ans[x]=Query(root[x],n-a[x]);\n    Insert(root[x],n-a[x]+1,1,n);\n    return ;\n}\nint main() {\n    memset(fir,-1,sizeof fir);\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) scanf(\"%d\",a+i), b[i]=a[i];\n    sort(b+1,b+n+1);\n    m=unique(b+1,b+n+1)-b-1;\n    for(int i=1;i<=n;i++) a[i]=lower_bound(b+1,b+1+m,a[i])-b;\n    for(int i=2;i<=n;i++) {\n        int x;\n        scanf(\"%d\",&x);\n        Add_Edge(x,i);\n    }\n    dfs(1);\n    for(int i=1;i<=n;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1491984948,
        "uid": 20558,
        "name": "zyh2015",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "### \u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7~~\u7d2b\u9898~~\u9898\u89e3 , \u5404\u4f4ddalao\u52ff\u55b7\n\n\n\n\u9996\u5148\u770b\u5230\u8fd9\u9053\u9898,\u6211\u7684\u7b2c\u4e00\u53cd\u5e94\u5c31\u662f , \u8fd9\u9053\u9898\u4e5f\u5fd2\u7b80\u5355\u4e86\u5427 , \u76f4\u63a5\u6bcf\u6b21\u679a\u4e3e\u4e00\u5934\u725b,\u7136\u540e\u627e\u5b83\u7684\u4e0b\u5c5e\u6709\u51e0\u4e2a\u6bd4\u5b83\u5927\u7684\u5c31\u884c\u4e86\u5427\n\n### \u4f46\u662f\n## \u4f46\u662f\n# \u4f46\u662f\n\n### \u8bf7\u770b\u6570\u636e\u8303\u56f4\n\n### (1\u2264N\u2264100,000)\n\n\u8fd9\u663e\u7136\u662f\u4e0d\u884c\u7684\n\n\u90a3\u4e48\u5e94\u8be5\u600e\u4e48\u529e\u5462?\n\n\n\u6211\u4eec\u518d\u6765\u601d\u8003\u4e00\u4e0b : \u770b\u5230\u6811 \u6211\u4eec\u60f3\u5230\u4e86\u4ec0\u4e48 ? \u6811\u72b6\u6570\u7ec4 ? \\\n\n\u7b54\u5bf9\u4e86 \u5176\u5b9e\u8fd9\u9898\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u6765\u4f18\u5316\\\n\n\u90a3\u4e48\u8be5\u600e\u4e48\u6765\u4f18\u5316\u5462?\n\n\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u5b50\u6811\u4e2d\u6709\u51e0\u4e2a\u6bd4\u4ed6\u5927\u7684\u5c31\u884c\u4e86,\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u501f\u52a9\u5165\u5ea6\u548c\u51fa\u5ea6\u6765\u5b9e\u73b0\n\n\u8be6\u89c1\u4ee3\u7801:\n\n```cpp\nfor (int i=1;i<=n;i++){\n\tint num=a[i].id;//a[i].id\u662f\u6392\u5e8f\u524d\u7684i,\u5177\u4f53\u7684\u770b\u4ee3\u7801\u5427\n\tans[num]=get(T_ou[num])-get(T_in[num]);//\u8fd9\u91cc\u662f\u5728\u8ba1\u7b97\u7b54\u6848,\u4f7f\u7528\u4e86\u6811\u72b6\u6570\u7ec4\n\tadd_x(T_in[num],1);//\u540e\u7eed\u5904\u7406\n}\n\n```\n\n\u8fd9\u6837\u628a\u7b54\u6848\u4fdd\u5b58\u5230ans\u6570\u7ec4\u4e2d,\u6700\u540e\u8f93\u51fa\u5c31\u884c\u4e86\n\n\u4e11\u964b\u7684Code:\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define maxn 100005\nusing namespace std;\nstruct data{\n\tint w,id;\n\tbool operator <(const data b)const{return b.w<w;}//\u7ed3\u6784\u4f53\u91cc\u91cd\u8f7d\u8fd0\u7b97\u7b26,\u5c06a\u6570\u7ec4\u6309\u7167w\u4ece\u5927\u5230\u5c0f\u6392\n}a[maxn];\nint n,cnt,T_in[maxn],T_ou[maxn],f[maxn],ans[maxn],lnk[maxn],son[maxn],nxt[maxn];\ninline int read(){//\u5feb\u8bfb\n\tint ret=0;char ch=getchar();\n\twhile (ch<'0'||ch>'9') ch=getchar();\n\twhile (ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret;\n}\nvoid add_e(int x , int y){son[++cnt]=y,nxt[cnt]=lnk[x],lnk[x]=cnt;}//\u5efa\u8fb9\u7684\u8fc7\u7a0b\nvoid add_x(int x,int date){//\u5178\u578b\u7684\u6811\u72b6\u6570\u7ec4\n\tfor(int i=x;i<=n;i+=i&-i) f[i]+=date;\n}\nint get(int x){\n\tint now=0;\n\tfor(int i=x;i;i-=i&-i) now+=f[i];\n\treturn now;\n}\nvoid DFS(int x){//\u501f\u52a9\u4e8eDFS\u7b97\u51fa\u540e\u9762\u8981\u7528\u5230\u7684T_in\u548cT_out,\u8868\u793a\u5165\u5ea6\u548c\u51fa\u5ea6\n\tT_in[x]=++cnt;\n\tfor(int j=lnk[x];j;j=nxt[j])\n\t  if (!T_in[son[j]]) DFS(son[j]);\n\tT_ou[x]=cnt;\n}\nint main(){\n\tfreopen(\"promote.in\",\"r\",stdin);\n\tfreopen(\"promote.out\",\"w\",stdout);\n\tn=read();\n\tfor(int i=1;i<=n;i++) a[i].w=read(),a[i].id=i;//\u8bfb\u5165\u6570\u636e\n\tsort(a+1,a+1+n);//\u6392\u4e00\u8d9f\n\tfor(int i=2;i<=n;i++) add_e(read(),i);//\u5efa\u8fb9\n\tcnt=0;DFS(1);\n\tfor (int i=1;i<=n;i++){//\u8ba1\u7b97\n\t\tint num=a[i].id;\n\t\tans[num]=get(T_ou[num])-get(T_in[num]);\n\t\tadd_x(T_in[num],1);\n\t}\n\tfor (int i=1;i<=n;i++) printf(\"%d\\n\",ans[i]);//\u8f93\u51fa\n\treturn 0;\n}\n```\n\n\u671b\u7ba1\u7406\u5927\u5927\u901a\u8fc7QWQ !\n",
        "postTime": 1599739624,
        "uid": 167521,
        "name": "\u57a3\u6839\u5e1d\u7763",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting P\u3011"
    },
    {
        "content": "\u6811\u72b6\u6570\u7ec4\u3002\n\n\u9996\u5148\u6211\u4eec\u77e5\u9053\uff0c\u6811\u6709\u4e00\u79cd\u975e\u5e38\u4f18\u7f8e\u7684\u6027\u8d28\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u9897\u5b50\u6811\u7684 $\\texttt{Dfs}$ \u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u5bf9\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528 $\\texttt{Dfs}$ \u5e8f\u628a\u5b83\u4ece\u4e00\u68f5\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u5e8f\u5217\u4e0a\u64cd\u4f5c\u3002\n\n\u56de\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6811\u6309\u7167\u6743\u503c\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u7136\u540e\u4ece\u5927\u5230\u5c0f\u7ed9\u6bcf\u4e2a\u70b9\u7684\u5b50\u8282\u70b9\u67e5\u8be2\u3001\u6253\u6807\u8bb0\uff08\u76f8\u5f53\u4e8e\u5bf9\u4e00\u6bb5\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\uff09\uff0c\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100005\n#define reg register\n#define inl inline\n#define getchar() (p1==p2 && (p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\nusing namespace std;\nint cnt,fst[MAXN],nxt[MAXN<<1],to[MAXN<<1]; \nint n,id[MAXN],ans[MAXN],dfn[MAXN],siz[MAXN],idx;\nstruct Node\n{\n    int val,id;\n    friend bool operator < (const Node &x,const Node &y)\n    {\n        return x.val>y.val;\n    }\n}a[MAXN];\nstruct TreeArray\n{\n    int c[MAXN];\n    inl int lowbit(reg int x)\n    {\n        return x&-x;\n    }\n    inl void Modify(reg int x,reg int val)\n    {\n        for(;x<=n;x+=lowbit(x)) c[x]+=val;\n    }\n    inl int Query(reg int x)\n    {\n        reg int res=0;\n        for(;x;x-=lowbit(x)) res+=c[x];\n        return res; \n    }\n}T;\ntemplate <typename T> void Read(T &x)\n{\n    x=0;\n    int fu=1;\n    char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) if(ch=='-') fu=-1;\n    for(;isdigit(ch);ch=getchar()) x=(x<<3)+(x<<1)+(ch-48);\n    x*=fu;\n}\ninl void AddEdge(reg int u,reg int v)\n{\n    to[++cnt]=v;\n    nxt[cnt]=fst[u];\n    fst[u]=cnt;\n}\nvoid Dfs(reg int u,reg int faz)\n{\n    siz[u]=1;\n    dfn[u]=++idx;\n    for(reg int i=fst[u];i;i=nxt[i])\n    {\n        reg int v=to[i];\n        if(v==faz) continue;\n        Dfs(v,u);\n        siz[u]+=siz[v];\n    }\n}\nint main()\n{\n    Read(n);\n    for(reg int i=1;i<=n;i++)\n    {\n        Read(a[i].val);\n        a[i].id=i;\n    }\n    sort(a+1,a+n+1);\n    for(reg int i=2;i<=n;i++)\n    {\n        reg int x;\n        Read(x);\n        AddEdge(x,i);\n        AddEdge(i,x);\n    }\n    Dfs(1,0);\n    for(reg int i=1;i<=n;i++)\n    {\n        ans[a[i].id]=T.Query(dfn[a[i].id]+siz[a[i].id]-1)-T.Query(dfn[a[i].id]-1);\n        T.Modify(dfn[a[i].id],1);\n    }\n    for(reg int i=1;i<=n;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1559465178,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "[$my\\ blog$](https://www.cnblogs.com/henry-1202/)\n\n\u60f3\u4e86\u51e0\u79cd\u505a\u6cd5...\n\n\u4e3b\u5e2d\u6811$O(nlogn)$\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76$O(nlogn)$\uff0c\u5206\u5757$O(n\\sqrt{n}log(\\sqrt{n}))$\uff0c\u7136\u800c\u90fd\u61d2\u5f97\u5199...\n\n\u7136\u540e\u5c31\u5199\u4e86\u4e00\u4e2a\u83ab\u961f+BIT\u3002$O(nsqrt{n}logn)$\u3002\u79bb\u6563\u5316\u4e00\u4e0b\u5c31\u884c\u4e86...\n\n\u5c31\u662f\u628adfs\u5e8f\u722c\u4e0b\u6765\uff0c\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0bsiz\uff0c\u90a3\u4e48\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5728dfs\u4e0a\u5c31\n\u662f$[dfn_x,dfn_x+siz_x-1]$\uff0c\u90a3\u5c31\u7528\u83ab\u961f\u7ef4\u62a4\u4e00\u4e0b\uff0c\u6bcf\u6b21\u79fb\u52a8\u6307\u9488\u5bf9\u5e94\u7684\u5728bit\u91cc\u9762\u64cd\u4f5c\u5c31\u597d\u4e86...\n\n\u7136\u800c\u5728\u6811\u4e0a\u76f4\u63a5BIT\u6c42\u9006\u5e8f\u5bf9\u771f\u7684\u6ca1\u770b\u9898\u89e3\u4e4b\u524d\u4e0d\u4f1a\u5199\uff08\u628a\u4e4b\u524d\u7b54\u6848\u5220\u4e86\u5904\u7406\u5b8c\u5b50\u6811\u518d\u52a0\u4e0a\u53bb\uff0c\u8fd9\u4e2a\u771f\u7684\u6ca1\u60f3\u5230\uff09\u3002\n\n\u9009\u62e9\u8fd9\u4e2a\u4e3b\u8981\u662f\u56e0\u4e3a\u597d\u5199..\u57fa\u672c\u4e0d\u7528\u8c03\uff0c\u4e5f\u5c3170\u884c\u5de6\u53f3\u3002\u4e00\u53d1\u8fc7\u6389\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define N 100010\nint n, a[N], b[N], dfn[N], c[N], siz[N];\nint cnt, head[N], ans[N];\nstruct edge {\n\tint to, nxt;\n}e[N<<1];\n\nvoid ins(int u, int v) {\n\te[++cnt] = (edge) {v, head[u]};\n\thead[u] = cnt;\n}\n\nint tim = 0;\nvoid dfs(int u, int fa) {\n\tsiz[u] = 1; dfn[u] = ++tim;\n\tfor(int i = head[u]; i; i = e[i].nxt) {\n\t\tif(e[i].to == fa) continue;\n\t\tint v = e[i].to;\n\t\tdfs(v, u);\n\t\tsiz[u] += siz[v];\n\t}\n}\n\nstruct task {\n\tint l, r, id, v;\n}q[N];\n\nint block;\nbool cmp(task a, task b) {\n\treturn a.l / block == b.l / block ? a.r < b.r : a.l / block < b.l / block;\n}\n\nnamespace BIT {\n\t#define lowbit(x) (x&(-x))\n\tvoid add(int x, int v) {\n\t\tfor(int i = x; i <= n; i += lowbit(i)) c[i] += v;\n\t}\n\tint query(int x) { \n\t\tint ans = 0;\n\t\tfor(int i = x; i; i -= lowbit(i)) ans += c[i];\n\t\treturn ans;\n\t}\n} using namespace BIT;\n\nint main() {\n\tcin >> n;\n\tfor(int i = 1; i <= n; ++i) cin >> a[i], b[i] = a[i];\n\tsort(b + 1, b + n + 1);\n\tfor(int i = 1; i <= n; ++i) a[i] = lower_bound(b + 1, b + n + 1, a[i]) - b;\n\tfor(int i = 2; i <= n; ++i) {\n\t\tint v; cin >> v;\n\t\tins(i, v), ins(v, i);\n\t}\n\tdfs(1, 0); \n\tfor(int i = 1; i <= n; ++i) \n\t\tq[i] = (task) {dfn[i], dfn[i]+siz[i]-1, i, a[i]};\n\tfor(int i = 1; i <= n; ++i) b[dfn[i]] = a[i];\n\tblock = sqrt(n);\n\tsort(q+1,q+n+1,cmp);\n\tint l = q[1].l, r = q[1].l - 1;\n\tfor(int i = 1; i <= n; ++i) {\n\t\tint ql = q[i].l, qr = q[i].r;\n\t\twhile(ql < l) add(b[--l], 1);\n\t\twhile(ql > l) add(b[l++], -1);\n\t\twhile(r < qr) add(b[++r], 1);\n\t\twhile(r > qr) add(b[r--], -1);\n\t\tans[q[i].id] = query(n) - query(q[i].v);\n\t}\n\tfor(int i = 1; i <= n; ++i) printf(\"%d\\n\", ans[i]);\n} \n```",
        "postTime": 1554541170,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    },
    {
        "content": "\u9898\u89e3\u91cc\u8fd9\u4e48\u591aBIT\u7684\u554a......\u5176\u5b9e\u6211\u662f\u56e0\u4e3a\u627e\u7ebf\u6bb5\u6811\u5408\u5e76\u88f8\u9898\u624d\u6765\u7684orz~~\u90a3\u4e48\u4e3a\u4e86\u589e\u52a0\u4ee3\u7801\u957f\u5ea6\u5c31\u5199\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u5427~~  \n\u5efa\u597d**\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811**\uff08\u539f\u9898\u89e3\u6709\u8bef\uff0c\u6545\u4fee\u6b63\uff09\uff0c\u6bcf\u6b21dfs\u540e\u5c31\u5408\u5e76\u7236\u5b50\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u518d\u67e5\u8be2\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u5927\u4e8e\u5b83\u7684\u3002\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4ecd\u7136\u662f$O(n\\log n)$\u3002\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<tr1/unordered_map>\n#define neko 100010\n#define f(i,a,b) for(register int i=(a);i<=(b);i=-(~(i)))\n#define travel(i,u,v) for(register int i=head[u],v=e[i].v;i;i=e[i].nex,v=e[i].v)\ntypedef int arr[neko];\narr in,out,dfn,head,ans;\nint L[neko*20],R[neko*20],Sum[neko*20],rt[neko*20];\nint t,cnt,n;\nstd::tr1::unordered_map<int,int>mp;\nstruct OK\n{int val,id;}a[neko];\nbool cmp(OK x,OK y)\n{return x.val<y.val;}\nbool cmp2(OK x,OK y)\n{return x.id<y.id;}\nstruct node\n{\n\tint v,nex;\n}e[neko<<1];\nvoid add(int x,int y)\n{\n\te[++t].v=y;\n\te[t].nex=head[x];\n\thead[x]=t;\n}\nnamespace Pst_Tree\n{\n\t#define mid ((l+r)>>1)\n\t#define lson L[root],l,mid\n\t#define rson R[root],mid+1,r\n\tvoid pushup(int root)\n\t{Sum[root]=Sum[L[root]]+Sum[R[root]];}\n\tvoid update(int &root,int l,int r,int x)\n\t{\n\t\tif(!root)root=++cnt;\n\t\tif(l==r){++Sum[root];return;}\n\t\tif(x<=mid)update(lson,x);\n\t\telse update(rson,x);\n\t\tpushup(root);\n\t}\n\tint query(int root,int l,int r,int tagl,int tagr)\n\t{\n\t\tif(l>=tagl&&r<=tagr)return Sum[root];\n\t\tint tmp=0;\n\t\tif(tagl<=mid)tmp+=query(lson,tagl,tagr);\n\t\tif(tagr>mid)tmp+=query(rson,tagl,tagr);\n\t\treturn tmp;\n\t}\n\tint merge(int x,int y)\n\t{\n\t\tif((!x)||(!y))return x+y;\n\t\tL[x]=merge(L[x],L[y]);\n\t\tR[x]=merge(R[x],R[y]);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n}\nusing namespace Pst_Tree;\nvoid dfs(int u,int fa)\n{\n\ttravel(i,u,v)if(v!=fa)dfs(v,u),rt[u]=merge(rt[u],rt[v]);\n\tans[u]=query(rt[u],1,n,mp[a[u].val]+1,n);\n}\nint main()\n{\n\tusing namespace std;\n\tint x;\n\tscanf(\"%d\",&n);\n\tf(i,1,n)scanf(\"%d\",&a[i].val),a[i].id=i;\n\tsort(a+1,a+n+1,cmp);\n\tf(i,1,n)if(!mp[a[i].val])mp[a[i].val]=i;\n\tsort(a+1,a+n+1,cmp2);\n\tf(i,2,n)scanf(\"%d\",&x),add(x,i),add(i,x);\n\tf(i,1,n)update(rt[i],1,n,mp[a[i].val]);\n\tdfs(1,0);\n\tf(i,1,n)printf(\"%d\\n\",ans[i]);\n}\n```\n",
        "postTime": 1528898464,
        "uid": 7020,
        "name": "teafrogsf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3605 \u3010[USACO17JAN]Promotion Counting\u664b\u5347\u8005\u8ba1\u6570\u3011"
    }
]