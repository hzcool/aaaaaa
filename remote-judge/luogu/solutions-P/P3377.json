[
    {
        "content": "\u5de6\u504f\u6811\u662f **\u4e00\u79cd** \u652f\u6301\u5728 $O(\\log_2 n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8fdb\u884c\u5408\u5e76\u7684 **\u5806\u5f0f** \u6570\u636e\u7ed3\u6784\u3002\n\n### \u4e00\u4e9b\u5b9a\u4e49\n\n**\u5916\u7ed3\u70b9** \uff1a\u5de6\u513f\u5b50\u6216\u53f3\u513f\u5b50\u662f\u7a7a\u7ed3\u70b9\u7684\u7ed3\u70b9\u3002\n\n**\u8ddd\u79bb** \uff1a \u4e00\u4e2a\u7ed3\u70b9 $x$ \u7684\u8ddd\u79bb $dist_x$ \u5b9a\u4e49\u4e3a\u5176\u5b50\u6811\u4e2d\u4e0e\u7ed3\u70b9 $x$ \u6700\u8fd1\u7684\u5916\u7ed3\u70b9\u5230 $x$ \u7684\u8ddd\u79bb\u3002\u7279\u522b\u5730\uff0c\u5b9a\u4e49\u7a7a\u7ed3\u70b9\u7684\u8ddd\u79bb\u4e3a $-1$ \u3002\n\n### \u5de6\u504f\u6811\u7684\u57fa\u672c\u6027\u8d28\n\n\u5de6\u504f\u6811\u5177\u6709 **\u5806\u6027\u8d28** \uff0c\u5373\u82e5\u5176\u6ee1\u8db3\u5c0f\u6839\u5806\u7684\u6027\u8d28\uff0c\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9 $x$ \uff0c\u6709 $v_x\\le v_{lc},v_x\\le v_{rc}$ \u3002\n\n\u5de6\u504f\u6811\u5177\u6709 **\u5de6\u504f\u6027\u8d28** \uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9 $x$ ,\u6709 $dist_{lc}\\ge dist_{rc}$ \u3002\n\n### \u57fa\u672c\u7ed3\u8bba\n\n1. \u7ed3\u70b9 $x$ \u7684\u8ddd\u79bb $dist_x=dist_{rc}+1$ \u3002\n\n2. \u8ddd\u79bb\u4e3a $n$ \u7684\u5de6\u504f\u6811\u81f3\u5c11\u6709 $2^{n+1}-1$ \u4e2a\u7ed3\u70b9\u3002\u6b64\u65f6\u8be5\u5de6\u504f\u6811\u7684\u5f62\u6001\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\u3002\n\n3. \u6709 $n$ \u7684\u7ed3\u70b9\u7684\u5de6\u504f\u6811\u7684\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u662f $O(\\log_2 n)$ \u7684\u3002\n\n### \u57fa\u672c\u64cd\u4f5c\uff1a\u5408\u5e76\u64cd\u4f5c\n\n\u5de6\u504f\u6811\u6700\u57fa\u672c\u7684\u64cd\u4f5c\u662f\u5408\u5e76\u64cd\u4f5c\u3002\n\n\u5b9a\u4e49 `merge(x,y)` \u4e3a\u5408\u5e76\u4e24\u68f5\u5206\u522b\u4ee5 $x,y$ \u4e3a\u6839\u8282\u70b9\u7684\u5de6\u504f\u6811\uff0c\u5176\u8fd4\u56de\u503c\u4e3a\u5408\u5e76\u4e4b\u540e\u7684\u6839\u8282\u70b9\u3002\n\n\u9996\u5148\u4e0d\u8003\u8651\u5de6\u504f\u6027\u8d28\uff0c\u6211\u4eec\u63cf\u8ff0\u4e00\u4e0b\u5408\u5e76\u4e24\u4e2a\u5177\u6709\u5806\u6027\u8d28\u7684\u6811\u7684\u8fc7\u7a0b\u3002\u5047\u8bbe\u6211\u4eec\u8981\u5408\u5e76\u7684\u662f\u5c0f\u6839\u5806\u3002\n\n1. \u82e5 $v_x\\le v_y$ \uff0c\u4ee5 $x$ \u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u6839\u8282\u70b9\uff1b\u5426\u5219\u4ee5 $y$ \u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u6839\u8282\u70b9\u3002\u4e3a\u907f\u514d\u8ba8\u8bba\uff0c\u82e5\u6709 $v_x>v_y$ \uff0c\u4ea4\u6362 $x,y$ \u3002\n\n2. \u5c06 $y$ \u4e0e $x$ \u7684\u5176\u4e2d\u4e00\u4e2a\u513f\u5b50\u5408\u5e76\uff0c\u7528\u5408\u5e76\u540e\u7684\u6839\u8282\u70b9\u4ee3\u66ff\u4e0e $y$ \u5408\u5e76\u7684\u513f\u5b50\u7684\u4f4d\u7f6e\uff0c\u5e76\u8fd4\u56de $x$ \u3002\n\n3. \u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u5982\u679c $x$ \u548c $y$ \u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u8282\u70b9\uff0c\u8fd4\u56de $x+y$ \u3002\n\n\u4ee4 $h$ \u4e3a\u6811\u9ad8\uff0c $h_x+h_y$ \u6bcf\u6b21\u90fd\u51cf\u5c11\u4e86 $1$  \uff0c\u4e0a\u8ff0\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(h)$ \u7684\uff0c\u5f53\u5408\u5e76\u7684\u6811\u9000\u5316\u4e3a\u4e00\u6761\u94fe\u65f6\uff0c\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\u3002\u8981\u4f7f\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f18\uff0c\u5c31\u8981\u4f7f\u6811\u5408\u5e76\u5f97\u66f4 **\u5e73\u8861** \u3002\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\n\n1. \u6bcf\u6b21\u968f\u673a\u9009\u62e9 $x$ \u7684\u5de6\u53f3\u513f\u5b50\u8fdb\u884c\u5408\u5e76\u3002\uff08\u6709\u6ca1\u6709\u611f\u89c9\u8fd9\u5f88\u50cf FHQ Treap \uff1f\uff09\n\n2. \u5de6\u504f\u6811\u3002\n\n\u7531\u4e8e\u5de6\u504f\u6811\u4e2d\u5de6\u513f\u5b50\u7684\u8ddd\u79bb\u5927\u4e8e\u53f3\u513f\u5b50\u7684\u8ddd\u79bb\uff0c\u6211\u4eec **\u6bcf\u6b21\u5c06 $y$ \u4e0e $x$ \u7684\u53f3\u513f\u5b50\u5408\u5e76** \u3002\u7531\u4e8e\u5de6\u504f\u6811\u7684\u6811\u9ad8\u662f $O(\\log_2 n)$ \u7684\uff0c\u6240\u4ee5\u5355\u6b21\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f $O(\\log_2 n)$ \u7684\u3002\n\n\u4f46\u662f\uff0c\u4e24\u68f5\u5de6\u504f\u6811\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u5408\u5e76\u540e\uff0c\u53ef\u80fd\u4e0d\u518d\u4fdd\u6301\u5de6\u504f\u6811\u7684\u5de6\u504f\u6027\u8d28\u3002\u5728\u6bcf\u6b21\u5408\u5e76\u5b8c\u4e4b\u540e\uff0c\u5224\u65ad\u5bf9\u7ed3\u70b9 $x$ \u662f\u5426\u6709 $dist_{lc}\\ge dist_{rc}$ \uff0c\u82e5\u6ca1\u6709\u5219\u4ea4\u6362 $lc,rc$ \uff0c\u5e76\u7ef4\u62a4 $x$ \u7684\u8ddd\u79bb $dist_x=dist_{rc}+1$ \uff0c\u5373\u53ef\u7ef4\u62a4\u5de6\u504f\u6811\u7684\u5de6\u504f\u6027\u8d28\u3002\n\n\u7531\u4e8e\u5408\u5e76\u540e\u7684\u6811\u65e2\u6ee1\u8db3\u5806\u6027\u8d28\u53c8\u6ee1\u8db3\u5de6\u504f\u6027\u8d28\uff0c\u6240\u4ee5\u5408\u5e76\u540e\u7684\u6811\u4ecd\u7136\u662f\u5de6\u504f\u6811\u3002\n\n```cpp\nint merge(int x,int y)\n{\n    if(!x||!y)return x+y;\n    if(v[y]<v[x])swap(x,y);\n    rc[x]=merge(rc[x],y);\n    if(dist[lc[x]]<dist[rc[x]])swap(lc[x],rc[x]);\n    dist[x]=dist[rc[x]]+1;\n    return x;\n}\n```\n\n### \u5de6\u504f\u6811\u7684\u5176\u4ed6\u57fa\u672c\u64cd\u4f5c\n\n#### \u63d2\u5165\u7ed9\u5b9a\u503c\n\n\u65b0\u5efa\u4e00\u4e2a\u503c\u7b49\u4e8e\u63d2\u5165\u503c\u7684\u7ed3\u70b9\uff0c\u5c06\u8be5\u8282\u70b9\u4e0e\u5de6\u504f\u6811\u5408\u5e76\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\log_2 n)$ \u3002\n\n#### \u6c42\u6700\u5c0f\u503c\n\n\u7531\u4e8e\u5de6\u504f\u6811\u7684\u5806\u6027\u8d28\uff0c\u5de6\u504f\u6811\u4e0a\u7684\u6700\u5c0f\u503c\u4e3a\u5176\u6839\u8282\u70b9\u7684\u503c\u3002\n\n#### \u5220\u9664\u6700\u5c0f\u503c\n\n\u7b49\u4ef7\u4e8e\u5220\u9664\u5de6\u504f\u6811\u7684\u6839\u8282\u70b9\u3002\u5408\u5e76\u6839\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u5373\u53ef\u3002\u8bb0\u5f97\u7ef4\u62a4\u5df2\u5220\u9664\u7ed3\u70b9\u7684\u4fe1\u606f\u3002\n\n#### \u7ed9\u5b9a\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6c42\u5176\u6240\u5728\u5de6\u504f\u6811\u7684\u6839\u8282\u70b9\n\n\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9 $fa_i$ \uff0c\u7136\u540e\u66b4\u529b\u8df3\u7236\u4eb2\u7ed3\u70b9\u3002\n\n```cpp\nint findrt(int x)\n{\n    if(fa[x])return findrt(fa[x]);\n    return x;\n}\n```\n\n\u6ce8\u610f\uff0c\u867d\u7136\u5de6\u504f\u6811\u7684\u8ddd\u79bb\u662f $O(\\log_2 n)$ \u7684\uff0c\u4f46\u662f\u5de6\u504f\u6811\u7684\u6df1\u5ea6\u6700\u5927\u53ef\u4ee5\u662f $O(n)$ \u7684\uff0c\u8fd9\u79cd\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u4e5f\u662f $O(n)$ \u7684\u3002\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u8ba9\u4f60\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\u5e76\u67e5\u96c6\u3002\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u7528 **\u8def\u5f84\u538b\u7f29** \u7684\u65b9\u5f0f\uff0c\u6c42\u4e00\u4e2a\u7ed3\u70b9\u6240\u5728\u5de6\u504f\u6811\u7684\u6839\u8282\u70b9\u3002\n\n```cpp\nint find(int x){return rt[x]==x?x:rt[x]=find(rt[x]);}\n```\n\n\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\uff0c\u9700\u8981\u7ef4\u62a4 `rt[x]` \u7684\u503c\u3002\n\n\u5728\u5408\u5e76\u4e24\u4e2a\u7ed3\u70b9 $x,y$ \u65f6\uff0c\u4ee4 `rt[x]=rt[y]=merge(x,y)` \u3002\n\n\u5728\u5220\u9664\u5de6\u504f\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u65f6\uff0c\u4ee4 `rt[lc[x]]=rt[rc[x]]=rt[x]=merge(lc[x],rc[x])` \uff0c\u56e0\u4e3a $x$ \u662f\u4e4b\u524d\u5de6\u504f\u6811\u7684\u6839\u8282\u70b9\uff0c\u5728\u8def\u5f84\u538b\u7f29\u65f6\u53ef\u80fd\u6709 `rt` \u7684\u503c\u7b49\u4e8e $x$ \uff0c\u6240\u4ee5 `rt[x]` \u4e5f\u8981\u6307\u5411\u5220\u9664\u540e\u7684\u6839\u8282\u70b9\u3002\n\n\u7531\u4e8e $x$ \u5df2\u7ecf\u88ab\u4f5c\u4e3a\u4e2d\u95f4\u91cf\u4f7f\u7528\u5f97\u4e0d\u6210\u6837\u5b50\uff0c\u5982\u679c\u4e4b\u540e\u8fd8\u8981\u7528\u5230\u7ed3\u70b9 $x$ \uff0c\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u503c\u76f8\u540c\u7684\u7ed3\u70b9\u3002\n\n\u8def\u5f84\u538b\u7f29\u540e\uff0c\u53ef\u4ee5\u5728 $O(\\log_2 n)$ \u7684\u4f18\u79c0\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u627e\u5230\u4e00\u4e2a\u70b9\u6240\u5728\u5de6\u504f\u6811\u7684\u6839\u8282\u70b9\u3002\n\n### \u4ee3\u7801\u5c55\u793a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100010;\nint n,m,op,x,y;\nint lc[maxn],rc[maxn],dist[maxn],rt[maxn];\nbool tf[maxn];\nstruct node\n{\n    int id,v;\n    bool operator<(node x)const{return v==x.v?id<x.id:v<x.v;}\n}v[maxn];\nint find(int x){return rt[x]==x?x:rt[x]=find(rt[x]);}\nint merge(int x,int y)\n{\n    if(!x||!y)return x+y;\n    if(v[y]<v[x])swap(x,y);\n    rc[x]=merge(rc[x],y);\n    if(dist[lc[x]]<dist[rc[x]])swap(lc[x],rc[x]);\n    dist[x]=dist[rc[x]]+1;\n    return x;\n}\nint main()\n{\n    dist[0]=-1;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&v[i].v),rt[i]=i,v[i].id=i;\n    while(m--)\n    {\n        scanf(\"%d%d\",&op,&x);\n        if(op==1)\n        {\n            scanf(\"%d\",&y);\n            if(tf[x]||tf[y])continue;\n            x=find(x);y=find(y);\n            if(x!=y)rt[x]=rt[y]=merge(x,y);\n        }\n        if(op==2)\n        {\n            if(tf[x]){printf(\"-1\\n\");continue;}\n            x=find(x);\n            printf(\"%d\\n\",v[x].v);\n            tf[x]=true;\n            rt[lc[x]]=rt[rc[x]]=rt[x]=merge(lc[x],rc[x]);\n            lc[x]=rc[x]=dist[x]=0;\n        }\n    }\n    return 0;\n} \n```",
        "postTime": 1562750704,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u6b64\u5904\u5176\u4f59\u7684\u9898\u89e3\u590d\u6742\u5ea6\u4e0d\u662f\u5f88\u5bf9\uff0c\u4e0b\u9762\u7740\u91cd\u8bf4\u4e00\u79cd\u6bd4\u8f83\u9760\u8c31\u7684\u65b9\u6848\u3002\n\n\u5b89\u5229\u539f[$blog$](https://www.cnblogs.com/pks-t/p/10326682.html)\n\n\u90a3\u4e48\u95ee\u9898\u5927\u6982\u5c31\u662f\u4ed6\u4eec\u6ca1\u6709\u8def\u5f84\u538b\u7f29\u2026\u2026\n\n[$LuoguP3377$](https://www.luogu.org/problemnew/show/P3377)\u5f88\u4e0d\u8d1f\u8d23\u4efb\u5730\u5904\u4e86\u6570\u636e\uff0c\u5bfc\u81f4\u4ee5\u4e0b\u8fd9\u4efd\u4ee3\u7801\u53ef\u4ee5\u8fc7\uff1a\n\n```cpp\nusing namespace std ;\nstruct Tree{\n    int dis, val, F, Son[2] ;\n}S[MAXN] ;\nint N, T, A, B, C, i ;\n\ninline int Merge(int x, int y) ; \nint my_swap(int &x, int &y){ x ^= y ^= x ^= y ;}\nint Get(int x){ while(S[x].F) x = S[x].F ; return x ; }\ninline void Pop(int x){ S[x].val = -1, S[ls].F = S[rs].F = 0, Merge(ls, rs) ; }\ninline int Merge(int x, int y){\n    if (!x || !y) return x + y ; if (S[x].val > S[y].val || (S[x].val == S[y].val && x > y)) swap(x, y) ;\n    rs = Merge(rs, y), S[rs].F = x ; if (S[ls].dis < S[rs].dis) swap(ls, rs) ; S[x].dis = S[rs].dis + 1 ; return x ;\n}\nint main(){\n    cin >> N >> T ; S[0].dis = -1 ;\n    for (i = 1 ; i <= N ; ++ i) scanf(\"%d\", &S[i].val) ; \n    for (i = 1 ; i <= T ; ++ i){\n        scanf(\"%d%d\", &A, &B) ;\n        if (A == 1){\n            scanf(\"%d\", &C) ;\n            if (S[B].val == -1 || S[C].val == -1 || B == C) continue ;\n            int f1 = Get(B), f2 = Get(C) ; Merge(f1, f2) ;\n        }\n        else {\n            if(S[B].val == -1) printf(\"-1\\n\") ;\n            else printf(\"%d\\n\", S[Get(B)].val), Pop(Get(B)) ;\n        }\n    }\n    return 0 ;\n}\n```\n\n\u4e00\u5207\u90fd\u5f88\u6b63\u5e38\uff0c\u4f46\u95ee\u9898\u5728\u4e8e\u4ed6\u590d\u6742\u5ea6\u4e0d\u5bf9\uff1a\n\n```cpp\nint Get(int x){ while(S[x].F) x = S[x].F ; return x ; }\n```\n\n\u8fd9\u663e\u7136\u662f\u4e2a\u4e0a\u754c\u4e3a$O(n)$\u7684\u51fd\u6570\u2026\u2026\u4e0d\u5bd2\u800c\u6817\u2026\u2026\n\n\u6240\u4ee5\u4ed6\u662f\u4e0d\u5bf9\u7684\uff0c[\u8fd9\u7ec4\u6570\u636e](https://www.luogu.org/discuss/show/96561)\u53ef\u4ee5\u5f88\u597d\u7684\u5361\u6389\uff08\u7531\u5de8\u4f6c\u5c0f\u7c89\u5154\u5236\u4f5c\uff09\u3002\n\n\u6240\u4ee5\u5e94\u8be5\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\u800c\u6211\u4eec\u5728\u8def\u5f84\u538b\u7f29\u4e4b\u540e\uff0c\u5fc5\u987b\u8981\u5728$pop$\u540e\uff0c\u7ed9$pop$\u6389\u7684\u70b9\u4e00\u4e2a\u6307\u9488\u6307\u5411\u65b0\u7684\u6839\uff08\u5426\u5219\u5c31\u4f1a\u76f4\u63a5\u65ad\u6389\uff09\uff0c\u6240\u4ee5\uff1a\n\n```cpp\n\ninline int Get(int x){ return S[x].rt == x ? x : S[x].rt = Get(S[x].rt) ; }\ninline void Pop(int x){ S[x].val = -1, S[ls].rt = ls, S[rs].rt = rs, S[x].rt = Merge(ls, rs) ; }\n```\n\n\u4e8e\u662f\u6700\u540e\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n\n#define MAXN 150010\n#define swap my_swap\n#define ls S[x].Son[0]\n#define rs S[x].Son[1]\n\nusing namespace std ;\nstruct Tree{\n\tint dis, val, Son[2], rt ;\n}S[MAXN] ; int N, T, A, B, C, i ;\n\ninline int Merge(int x, int y) ; \nint my_swap(int &x, int &y){ x ^= y ^= x ^= y ;}\ninline int Get(int x){ return S[x].rt == x ? x : S[x].rt = Get(S[x].rt) ; }\ninline void Pop(int x){ S[x].val = -1, S[ls].rt = ls, S[rs].rt = rs, S[x].rt = Merge(ls, rs) ; }\ninline int Merge(int x, int y){\n\tif (!x || !y) return x + y ; if (S[x].val > S[y].val || (S[x].val == S[y].val && x > y)) swap(x, y) ;\n\trs = Merge(rs, y) ; if (S[ls].dis < S[rs].dis) swap(ls, rs) ; S[ls].rt = S[rs].rt = S[x].rt = x, S[x].dis = S[rs].dis + 1 ; return x ;\n}\nint main(){\n\tcin >> N >> T ; S[0].dis = -1 ;\n\tfor (i = 1 ; i <= N ; ++ i) \n\t\tS[i].rt = i, scanf(\"%d\", &S[i].val) ; \n\tfor (i = 1 ; i <= T ; ++ i){\n\t\tscanf(\"%d%d\", &A, &B) ;\n\t\tif (A == 1){\n\t\t\tscanf(\"%d\", &C) ;\n\t\t\tif (S[B].val == -1 || S[C].val == -1) continue ;\n\t\t\tint f1 = Get(B), f2 = Get(C) ; if (f1 != f2) S[f1].rt = S[f2].rt = Merge(f1, f2) ;\n\t\t}\n\t\telse {\n\t\t\tif(S[B].val == -1) printf(\"-1\\n\") ;\n\t\t\telse printf(\"%d\\n\", S[Get(B)].val), Pop(Get(B)) ;\n\t\t}\n\t}\n\treturn 0 ;\n}\n```\n\n$\\rm{writter:Flower\\_pks}$",
        "postTime": 1548577288,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u9898\u89e3\u91cc\u5f88\u591a\u5927\u4f6c\u90fd\u662f\u5199\u7684\u5de6\u504f\u6811\u3002\n\n\u6211\u5f88\u6c99\u96d5\uff0c\u6240\u4ee5\u6211\u5c31\u6765\u8bb2\u8bb2$\\Huge\\text{\u53f3}$\u504f\u6811\u3002\n![picture](https://img.ffis.me/images/2019/10/05/5887c4fcc0f61a5e8f92f806c1b58d68.jpg)\n~~\u4e0a\u9762\u5c31\u662f\u4e00\u68f5\u53f3\u504f\u6811\uff08\u8bef\uff09~~\n\n# \u539f\u7406\n**\u5b9a\u4e49\uff1a**  \u82e5\u4e00\u4e2a\u8282\u70b9\u6709\u513f\u5b50\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u53eb\u7a7a\u8282\u70b9\u3002\u800c\u4e00\u4e2a\u8282\u70b9\u7684 $dis$ \u503c\u4ee3\u8868\u4ece\u8fd9\u4e2a\u8282\u70b9\u51fa\u53d1\uff0c\u53ea\u7ecf\u8fc7\u5de6\u513f\u5b50\u5230\u8fbe\u4e00\u4e2a\u7a7a\u8282\u70b9\u6700\u5c11\u9700\u8981\u8d70\u7684\u8fb9\u6570\u3002\n\n**\u53f3\u504f\u6811** \u7684\u610f\u601d\u662f\uff1a\u5bf9\u4e8e\u4e00\u68f5\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5176\u53f3\u513f\u5b50\u7684 $dis$ \u503c\u5927\u4e8e\u7b49\u4e8e\u5de6\u513f\u5b50\u7684 $dis$ \u503c\u3002\n\n\u82e5\u4ee5 $u,v$ \u4e3a\u6839\u7684\u4e24\u4e2a\u5806\u9700\u8981\u5408\u5e76\uff0c\u7531\u4e8e\u5df2\u7ecf\u7ef4\u62a4\u597d\u4e86\u53f3\u504f\u6027\u8d28\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c06 $v$ \u5408\u5e76\u5230 $u$ \u6700\u5de6\u8fb9\u7684\u7a7a\u8282\u70b9\uff0c\u7136\u540e\u518d\u9012\u5f52\u7ef4\u62a4\u53f3\u504f\u6027\u8d28\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6\uff1a\u5f88\u663e\u7136\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u5806\u7684\u6027\u8d28\uff0c\u5f53\u5806\u6784\u6210\u4e00\u9897\u5b8c\u5168\u6811\u7684\u65f6\u5019 $dis[1]$ \u5230\u8fbe $logn$ \uff0c\u5408\u5e76\u64cd\u4f5c\u4f9d\u7136\u80fd\u591f\u7ef4\u6301\u5728 $O(logn)$ \uff0c\u662f\u975e\u5e38\u4f18\u79c0\u7684\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1e5 + 10;\nint n, m, heap[MAXN];\nint fa[MAXN], ls[MAXN], rs[MAXN], dis[MAXN];\nbool del[MAXN];\n\nint find(int x) {\n\treturn x == fa[x] ? x : fa[x] = find(fa[x]);\n}\n\nint Merge(int u, int v) {\n\tif (!u || !v)\n\t\treturn u + v;\n\tif (heap[u] == heap[v] ? u > v : heap[u] > heap[v])\n\t\tswap(u, v); // \u9898\u76ee\u63cf\u8ff0\u63d0\u5230\uff1a\u4f18\u5148\u5220\u9664\u539f\u5e8f\u5217\u4e2d\u9760\u524d\u7684\n\tls[u] = Merge(ls[u], v); // \u5411\u5de6\u5b50\u6811\u9012\u5f52\n\tif (dis[ls[u]] > dis[rs[u]])\n\t\tswap(ls[u], rs[u]); // \u7ef4\u62a4\u53f3\u504f\u6027\u8d28\n\tfa[ls[u]] = fa[rs[u]] = fa[u] = u; // \u66f4\u65b0\u7236\u4eb2\n\tdis[u] = dis[ls[u]] + 1;\n\treturn u;\n}\n\nvoid pop(int u) {\n\tdel[u] = true;\n\tfa[ls[u]] = ls[u];\n\tfa[rs[u]] = rs[u];\n\t// \u5148\u628a\u5de6\u53f3\u513f\u5b50\u62c6\u51fa\u53bb\n\tfa[u] = Merge(ls[u], rs[u]);\n\t// \u7136\u540e\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u5806\n}\n\nvoid init() {\n\tfor (int i = 1; i <= n; i++)\n\t\tfa[i] = i;\n}\n\nint main() {\n\tdis[0] = -1;\n\t// \u6ce8\u610f\uff01\u6b64\u5904\u662f\u4e3a\u4e86\u4fdd\u8bc1\u53f6\u5b50\u8282\u70b9 dis = 0\n\tscanf(\"%d %d\", &n, &m);\n\tinit();\n\tfor (int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", &heap[i]);\n\tfor (int opt, x, y; m; m--) {\n\t\tscanf(\"%d\", &opt);\n\t\tif (opt == 1) {\n\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\tif (del[x] || del[y])\n\t\t\t\tcontinue;\n\t\t\tx = find(x), y = find(y);\n\t\t\tif (x != y) \n\t\t\t\tfa[x] = fa[y] = Merge(x, y);\n\t\t} else {\n\t\t\tscanf(\"%d\", &x);\n\t\t\tif (del[x]) {\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tx = find(x);\n\t\t\tprintf(\"%d\\n\", heap[x]);\n\t\t\tpop(find(x));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u5982\u679c\u4f60\u60f3\u770b\u6b63\u7ecf\u7684\u5de6\u504f\u6811\u8be5\u600e\u4e48\u5199\uff0c\u4e5f\u53ef\u4ee5 [\u770b\u8fd9\u91cc](https://ncc79601.blog.luogu.org/leftist-tree)\uff0c~~\u4f60\u4f1a\u53d1\u73b0\u600e\u4e48\u504f\u90fd\u6ca1\u4ec0\u4e48\u5173\u7cfb~~",
        "postTime": 1570251303,
        "uid": 60258,
        "name": "NCC79601",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011\u53f3\u504f\u6811"
    },
    {
        "content": "\u666e\u901a\u7684\u4e8c\u53c9\u5806\u662f\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u53ef\u4ee5\u652f\u6301$O(1)$\u7684\u67e5\u8be2\u5f53\u524d\u5806\u5185min/max\uff0c$O(log n)$\u7684\u63d2\u5165\u548c\u5220\u9664\u8282\u70b9\u3002\u4ed6\u652f\u4e0d\u652f\u6301\u5408\u5e76\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u9996\u5148\u6539\u53d8\u4e00\u4e0b\u5806\u7684\u5199\u6cd5\uff0c\u628a\u4ed6\u7528\u4e00\u79cd\u7c7b\u4f3cBST(\u4e8c\u53c9\u641c\u7d22\u6811)\u7684\u5199\u6cd5\u5199\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u6709\u4e00\u79cd\u5408\u5e76\u7684\u65b9\u6cd5\uff01\n\n\u5148\u7528\u6587\u5b57\u63cf\u8ff0\u4e00\u4e0b\uff1a\u5047\u8bbe\u6211\u4eec\u8981\u5c06x\u548cy\u8fd9\u4e24\u4e2a\u5c0f\u6839\u5806\u5408\u5e76\uff0c\u6211\u4eec\u5224\u65ad\u4e00\u4e0b\u5982\u679cx\u7684\u5806\u9876\u5927\u4e8ey\u7684\u5806\u9876\uff0c\u5c31\u4ea4\u6362\u4e00\u4e0bx\u548cy\uff0c\u7136\u540e\u7ee7\u7eed\u5408\u5e76x\u7684\u67d0\u4e2a\u5b50\u5b69\u5b50\u548cy\u3002\n\n\u6ca1\u770b\u61c2\u4e0a\u9762\u90a3\u4e00\u6bb5\u6587\u5b57\u4e5f\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u4e0a\u56fe\uff1a(\u56fe\u53d6\u81ea\u6559\u7ec3\u4e0a\u8bfe\u65f6\u7684\u8bfe\u4ef6\uff0c\u5e94\u8be5\u6ca1\u5173\u7cfb\u5427QAQ)\n\n![lala](https://i.loli.net/2018/11/18/5bf16d358221f.jpg)\n\u5047\u8bbe\u6211\u4eec\u8981\u5408\u5e76\u8fd9\u4e24\u68f5\u6811\n\n![](https://i.loli.net/2018/11/18/5bf16dc32b7cb.jpg)\n\n\u7ee7\u7eed\u5f80\u4e0b\u5408\u5e76\n\n![](https://i.loli.net/2018/11/18/5bf16e33be631.jpg)\n\n\u8fd9\u6b21\u5408\u5e76\u6211\u4eec\u53d1\u73b0x\u7684\u5806\u9876\u5927\u4e8ey\u7684\u5806\u9876\u4e86\uff0c\u5c31\u4ea4\u6362\u4e86x\u548cy\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u5408\u5e76\n\n![](https://i.loli.net/2018/11/18/5bf16ebd7133f.jpg)\n\n\u6700\u540e\u6211\u4eec\u53d1\u73b07\u6ca1\u6709\u53f3\u513f\u5b50\uff0c\u5c31\u76f4\u63a5\u8ba97\u7684\u53f3\u513f\u5b50\u53d8\u6210y\u5c31\u884c\u4e86\uff01\uff01\n\n![](https://i.loli.net/2018/11/18/5bf16f387cc36.jpg)\n\n\u5230\u6b64\uff0c\u5408\u5e76\u6b63\u5f0f\u5b8c\u6210\uff01\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u5408\u5e76\u5b8c\u4e4b\u540e\uff0c\u5806\u5e76\u4e0d\u518d\u662f\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\u4e86\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\n\n\u8fd9\u91cc\u5c31\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u79cd\u8d2a\u5fc3\u7684\u601d\u60f3\u3002\u5176\u5b9e\u5c31\u662f\u6211\u4e4b\u524d\u8bf4\u7684\u7ee7\u7eed\u5408\u5e76x\u7684\u67d0\u4e2a\u513f\u5b50\u4e0ey\u3002\u7a76\u7adf\u662f\u54ea\u4e2a\u513f\u5b50\u5462\uff1f\n\n\u6211\u4eec\u8fd9\u91cc\u5b9a\u4e49\u4e00\u4e2a\u503c\uff0c\u53eb\u505a\"\u6839\u503c\"\uff0c\u4e00\u4e2a\u8282\u70b9\u7684\u6839\u503c\u5c31\u662f\u5b83\u5230\u6700\u8fd1\u7684\u53f6\u5b50\u8282\u70b9\u7684\u8ddd\u79bb\u3002\u5176\u5b9e\u4e4b\u524d\u90a3\u51e0\u5f20\u56fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5de6\u4e0a\u89d2\u7684\u503c\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u6839\u503c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u5408\u5e76\u5c31\u53ea\u8981\u5408\u5e76x\u7684\u6839\u503c\u6700\u5c0f\u7684\u513f\u5b50\u548cy\u5c31\u884c\u4e86\u3002\u8fd9\u5c31\u53eb\u505a\u542f\u53d1\u5f0f\u5408\u5e76(\u8c8c\u4f3c)\u3002\u662f\u4e0d\u662f\u8ddf\u5e76\u67e5\u96c6\u7684\u6309\u79e9\u5408\u5e76\u6709\u70b9\u50cf\u554a!\n\n\u5173\u4e8e\u4ed6\u7684\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u4e3aO(\u4e24\u4e2a\u5806\u7684\u5806\u9876\u7684\u6839\u503c)\uff0c\u800c\u7528\u8fd9\u79cd\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u8bdd\uff0c\u5373\u4f7f\u6839\u503c\u6700\u574f\u4e5f\u5c31\u662f$logn$\u7684(\u5b8c\u5168\u4e8c\u53c9\u6811)\uff0c\u6240\u4ee5\u5408\u5e76\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(log n)$\u7684\u8fa3\uff01\n\n\u90a3\u4e48\u5de6\u504f\u6811\u53c8\u662f\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\u5c31\u662f\u4fdd\u8bc1\u5b83\u7684\u53f3\u513f\u5b50\u7684\u6839\u503c\u6bd4\u4f5c\u513f\u5b50\u5c0f\uff0c\u7136\u540e\u6bcf\u6b21\u5408\u5e76\u5c31\u53ea\u7528\u5408\u5e76x\u7684\u53f3\u513f\u5b50\u548cy\u5c31\u884c\u4e86\uff01\u540c\u65f6\u56de\u6eaf\u7684\u65f6\u5019\u53d1\u73b0\u4e0d\u6ee1\u8db3\u5de6\u504f\u6811\u6027\u8d28\u65f6\u5c31\u4ea4\u6362\u5de6\u53f3\u513f\u5b50(\u611f\u89c9\u6ca1\u4ec0\u4e48\u7528\u554a)\n\n\n>\u63d2\u5165\n\n\u5c31\u662f\u5408\u5e76\u4e00\u4e2a\u5806\u548c\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u70b9\u7684\u5806\u3002\n\n>\u5220\u9664\n\n\u76f4\u63a5\u5408\u5e76\u5b83\u7684\u5de6\u53f3\u513f\u5b50\u5c31\u884c\u4e86\n\n>\u67e5\u8be2\u5806\u9876\n\n\u76f4\u63a5\u8fd4\u56de\u5806\u9876\u5c31\u884c\u4e86\n\n\u5173\u4e8e\u542f\u53d1\u5f0f\u5408\u5e76\u90a3\u4e00\u5757\u662f\u5b66\u4e86\u5de6\u504f\u6811\u4e4b\u540e\u81ea\u5df1YY\u7684\uff0c\u4e0d\u77e5\u9053\u662f\u5426\u53eb\u8fd9\u4e2a\u554a\uff1f\u8fd8\u662f\u6709\u4ec0\u4e48\u522b\u7684\u540d\u5b57\uff1f\u5404\u4f4ddalao\u8f7b\u55b7\u554aQAQ\n\n\u4e0b\u9762\u8d34\u4ee3\u7801\u5427\uff01\u6307\u9488\u515a\u798f\u5229\uff01(\u6709\u60f3\u770b\u6307\u9488\u7248treap\u7684\u53ef\u4ee5\u53bb\u6211\u7684\u9898\u89e3\u91cc)\n\n\u542f\u53d1\u5f0f\u5408\u5e76\uff1a(\u901a\u8fc7Luogu P3377,\u7528\u65f6405ms)\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#define DEBUG printf(\"PassLine:%d\\n\", __LINE__)\nusing namespace std;\nconst int maxn = 1e5+10; \nstruct left_heap{\n    int dist, val, idx;\n    left_heap *ls, *rs, *fa;\n    left_heap(){\n        dist = val = idx = 0;\n        ls = rs = fa = NULL;\n    }\n};\nint n, m, exist[maxn];\nleft_heap *tr[maxn];\nleft_heap *getf(left_heap *x){//\u627e\u5230x\u6240\u5c5e\u7684\u5806\u7684\u6839\n    while(x->fa != NULL && x!=NULL) x = x->fa;\n    return x;\n}\nleft_heap *merge(left_heap *x, left_heap *y){\n    if(x == NULL) return y;\n    if(y == NULL) return x;\n    if(x->val > y->val || (x->val == y->val && x->idx > y->idx)) swap(x, y);//\u5982\u679cx\u7684\u5806\u9876\u7684\u503c\u5927\u4e8ey\u7684\u5806\u9876\uff0c\u5c31\u4ea4\u6362\u4e24\u4e2a\u5806\n    if(x->ls == NULL) x->ls = merge(x->ls, y);\n    else if(x->rs == NULL) x->rs = merge(x->rs, y);\n    else if(x->ls->dist < x->rs->dist) x->ls = merge(x->ls, y);//\u5de6\u513f\u5b50\u7684\u6839\u503c\u6bd4\u53f3\u513f\u5b50\u5c0f\u5c31\u7ee7\u7eed\u5408\u5e76\u5de6\u513f\u5b50\u548cy\n    else x->rs = merge(x->rs, y);//\u5426\u5219\u5408\u5e76\u53f3\u513f\u5b50\u548cy\n    if(x->ls != NULL) x->ls->fa = x;\n    if(x->rs != NULL) x->rs->fa = x;\n    if(x->ls == NULL || x->rs == NULL) x->dist = 0;\n    else x->dist = min(x->ls->dist, x->rs->dist)+1;//\u66f4\u65b0x\u7684\u6839\u503c\n    return x;\n}\nint pop(left_heap *x){\n    int t = x->val;\n    if(x->ls != NULL)x->ls->fa = NULL;\n    if(x->rs != NULL)x->rs->fa = NULL;\n    if(x->ls != NULL && x->rs != NULL)merge(x->ls, x->rs);//\u5408\u5e76\u5de6\u53f3\u513f\u5b50\n    exist[x->idx] = true;\n    delete x;//\u76f4\u63a5\u5728\u5185\u5b58\u4e2d\u5220\u9664x\uff0c\u4ee5\u9632\u540e\u60a3+\u8282\u7ea6\u5185\u5b58\n    return t;\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin >> n >> m;\n    int t;\n    for(int i=1; i<=n; i++){\n        cin >> t;\n        left_heap *la = new left_heap;\n        la->val = t; la->idx = i; tr[i] = la;\n    }\n    int opt, x, y;\n    for(int i=1; i<=m; i++){\n        cin >> opt;\n        if(opt == 1){//\u5408\u5e76\u64cd\u4f5c\n            cin >> x >> y;\n            if(exist[x] || exist[y]) continue;\n            if(x == y) continue;\n            left_heap *fx = getf(tr[x]), *fy = getf(tr[y]);//\u627e\u5230\u4e24\u4e2a\u5806\u7684\u6839\n            if(fx == fy) continue;\n            merge(fx, fy);//\u5408\u5e76\n        }\n        if(opt == 2){\n            cin >> x;\n            if(exist[x] || exist[getf(tr[x])->idx]){cout << -1 << endl;continue;}\n            else cout << pop(getf(tr[x])) << endl;\n        }\n    }\n}\n```\n\n\u5de6\u504f\u6811\uff1a(\u901a\u8fc7Luogu P3377, \u7528\u65f6363ms)\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#define DEBUG printf(\"PassLine:%d\\n\", __LINE__)\nusing namespace std;\nconst int maxn = 1e5+10; \nstruct left_heap{\n    int dist, val, idx;\n    left_heap *ls, *rs, *fa;\n    left_heap(){\n        dist = val = idx = 0;\n        ls = rs = fa = NULL;\n    }\n};\nint n, m, exist[maxn];\nleft_heap *tr[maxn];\nleft_heap *getf(left_heap *x){\n    while(x->fa != NULL && x!=NULL) x = x->fa;\n    return x;\n}\nleft_heap *merge(left_heap *x, left_heap *y){\n    if(x == NULL) return y;\n    if(y == NULL) return x;\n    if(x->val > y->val || (x->val == y->val && x->idx > y->idx)) swap(x, y);\n    x->rs = merge(x->rs, y);\n    if(x->rs != NULL)x->rs->fa = x;\n    if(x->ls == NULL){x->ls = x->rs; x->rs = NULL;}\n    else if(x->ls->dist < x->rs->dist) swap(x->ls, x->rs);//\u4e3b\u8981\u662f\u8fd9\u4e00\u6b65\uff0c\u5982\u679c\u5de6\u513f\u5b50\u6bd4\u53f3\u513f\u5b50\u6839\u503c\u5c0f\uff0c\u5c31\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\n    x->dist = (x->rs == NULL ? 0 : x->rs->dist+1);\n    return x;\n}\nint pop(left_heap *x){\n    int t = x->val;\n    if(x->ls != NULL)x->ls->fa = NULL;\n    if(x->rs != NULL)x->rs->fa = NULL;\n    if(x->ls != NULL && x->rs != NULL)merge(x->ls, x->rs);\n    exist[x->idx] = true;\n    delete x;\n    return t;\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin >> n >> m;\n    int t;\n    for(int i=1; i<=n; i++){\n        cin >> t;\n        left_heap *la = new left_heap;\n        la->val = t; la->idx = i; tr[i] = la;\n    }\n    int opt, x, y;\n    for(int i=1; i<=m; i++){\n        cin >> opt;\n        if(opt == 1){\n            cin >> x >> y;\n            if(exist[x] || exist[y]) continue;\n            if(x == y) continue;\n            left_heap *fx = getf(tr[x]), *fy = getf(tr[y]);\n            if(fx == fy) continue;\n            merge(fx, fy);\n        }\n        if(opt == 2){\n            cin >> x;\n            if(exist[x] || exist[getf(tr[x])->idx]){cout << -1 << endl;continue;}\n            else cout << pop(getf(tr[x])) << endl;\n        }\n    }\n}\n```\n\n\u6700\u540e\u8bf4\u51e0\u53e5\uff0c\u53ef\u5e76\u5806\u8fd8\u6709\u597d\u51e0\u79cd\uff0c\u5982\u914d\u5bf9\u5806\uff0c\u6590\u6ce2\u90a3\u5951\u5806\u7b49\u7b49\uff0c\u5927\u5bb6\u60f3\u5b66\u7684\u53ef\u4ee5\u53bb\u770b\u4e00\u770b\uff01",
        "postTime": 1542209735,
        "uid": 30066,
        "name": "Jianuo_Zhu",
        "ccfLevel": 6,
        "title": "\u6d45\u8c08\u53ef\u5e76\u5806-\u542f\u53d1\u5f0f\u5408\u5e76-\u5de6\u504f\u6811"
    },
    {
        "content": "QAQ \u8fd9\u91cc\u662f\u4e00\u4e2a \u5806 + \u542f\u53d1\u5f0f\u5408\u5e76 \u7684\u89e3\u6cd5\uff01\n\n\n\u542f\u53d1\u5f0f\u5408\u5e76\u662f\u6307\u5408\u5e76\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u628a\u5c11\u7684\u5408\u5e76\u5230\u591a\u7684\u4e0a\u3002\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5b83\u6bcf\u88ab\u5408\u5e76\u4e00\u6b21\uff0c\u6240\u5728\u5806\u7684\u5927\u5c0f\u81f3\u5c11\u662f\u539f\u6765\u7684\u4e24\u500d\u3002\n\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u88ab\u5408\u5e76\u7684\u6b21\u6570\u662f$\\log n$\u6b21\uff0c\u4e58\u4e0a\u5355\u6b21\u53d6\u51fa\u5806\u9876\u5e76\u63d2\u5165\u7684\u590d\u6742\u5ea6$\\log n$\uff0c\u518d\u4e58\u4e0a\u5171\u6709n\u4e2a\u5143\u7d20\uff0c\u7a0b\u5e8f\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$n\\log^2 n$\uff0c\u8db3\u4ee5\u901a\u8fc7n = 100000\u7684\u6570\u636e\u3002\n\n\n    \n    \n    \n    \n```cpp\n    #include <queue>\n    #include <cstdio>\n    #define maxn 100010\n    struct Int{ //\u5c01\u5b58\u4e00\u4e2a\u539f\u5e8f\u5217\u4e2d\u7684\u6570\n        int v, pos;\n    }data[maxn];\n    //\u56e0\u4e3aSTL\u5806\u7684\u903b\u8f91\u5b9e\u73b0\u662f a < b \u5219 b \u6bd4 a \u4f18\u5148\uff0c\u56e0\u6b64\u8fd9\u91cc\u628a < \u53f7\u5b9a\u4e49\u4e3a\u5b9e\u9645\u610f\u4e49\u4e0a\u7684 > \u3002\n    bool operator < (const Int& a, const Int& b) {\n        return a.v == b.v ? a.pos > b.pos : a.v > b.v;\n    }\n    typedef std::priority_queue<Int> pq;\n    pq Q[maxn];\n    int fa[maxn]; \n    bool del[maxn]; //\u662f\u5426\u5df2\u88ab\u5220\u9664\n    //fa && find : \u5e26\u8def\u5f84\u538b\u7f29\u7684\u5e76\u67e5\u96c6\n    int find(int cur) {\n        return fa[cur] == cur ? cur : fa[cur] = find(fa[cur]); \n    }\n    int main() {\n        int n, m;\n        scanf(\"%d%d\", &n, &m);\n        for(int i = 1; i <= n; i++) {\n            scanf(\"%d\", &data[i].v);\n            data[i].pos = i;\n            Q[i].push(data[i]);\n            fa[i] = i;\n        }\n        for(int i = 0; i < m; i++) {\n            int ty, x, y;\n            scanf(\"%d\", &ty);\n            if(ty == 1) {\n                scanf(\"%d%d\", &x, &y);\n                int fx = find(x), fy = find(y);\n                if(fx == fy || del[x] || del[y]) continue;\n                int sx = Q[fx].size(), sy = Q[fy].size();\n                pq *px, *py; //\u6307\u5411\u5806\u7684\u6307\u9488\n                if(sx < sy) { //\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c06size\u5c0f\u7684\u5408\u5e76\u5230\u5927\u7684\u91cc\u3002\n                    px = &Q[fx];\n                    py = &Q[fy];\n                    fa[fx] = fy;\n                }\n                else {\n                    px = &Q[fy];\n                    py = &Q[fx];\n                    fa[fy] = fx;\n                }\n                while(!px->empty()) {\n                    py->push(px->top());\n                    px->pop();\n                }\n            }\n            else {\n                scanf(\"%d\", &x);\n                int fx = find(x);\n                if(del[x] || Q[fx].empty()) {\n                    puts(\"-1\");\n                }\n                else {\n                    Int p = Q[fx].top();\n                    Q[fx].pop();\n                    del[p.pos] = true;\n                    printf(\"%d\\n\", p.v);\n                }\n            }\n        }\n        return 0;\n}\n```",
        "postTime": 1512883198,
        "uid": 21421,
        "name": "pantw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u8fd8\u6709\u4e00\u4e2a\u89e3\u6cd5\uff0c\u5373\u542f\u53d1\u5f0f\u5408\u5e76\u5806\u3002\u542f\u53d1\u5f0f\u5408\u5e76\u5176\u5b9e\u5c31\u662f\u4f18\u96c5\u7684\u66b4\u529b\uff0c\u628a\u5c0f\u7684\u5f80\u5927\u7684\u5408\u5e76\u3002\u542f\u53d1\u5f0f\u5408\u5e76\u8fd9\u79cd\u89e3\u6cd5\u4ee3\u7801\u91cf\u5c0f\uff0c\u601d\u7ef4\u7b80\u5355\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u9ad8\uff0c\u4e0d\u5931\u4e3a\u4e00\u79cd\u597d\u65b9\u6cd5\u3002\n\n\u5982\u679c\u6211\u4eec\u5728\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u65f6\uff0c\u603b\u662f\u628a\u5c0f\u7684\u96c6\u5408\u5408\u5e76\u5230\u5927\u7684\u91cc\u9762\uff0c\u90a3\u4e48\u5c0f\u7684\u96c6\u5408\u81f3\u5c11\u4f1a\u589e\u957f\u5230\u539f\u6765\u7684\u4e24\u500d\u3002\u800c\u81f3\u591a\u5408\u5e76 $n-1$ \u6b21\uff0c\u6bcf\u4e2a\u96c6\u5408\u81f3\u591a**\u88ab**\u5408\u5e76 $log_2n$ \u6b21\uff0c\u56e0\u6b64\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(nlog_2n)$\u3002\u800c\u7531\u4e8e\u5806\u7684\u5b58\u5728\uff0c\u4f7f\u5f97\u590d\u6742\u5ea6\u8fd8\u8981\u5e26\u4e00\u4e2a $log_2$\u3002\u56e0\u6b64\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u5806\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $nlog_2^2n$\u3002\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5408\u5e76\u65f6\u8bb0\u4e00\u4e2a $prt_i$ \u503c\uff0c\u8868\u793a\u73b0\u5728\u7b2c $i$ \u4e2a\u5143\u7d20\u5230\u5e95\u5728\u54ea\u4e2a\u5806\u91cc\uff0c\u7528\u7c7b\u4f3c\u4e8e\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29\u7684\u65b9\u6cd5\u66f4\u65b0\u3002\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n```\n// luogu-judger-enable-o2\n#include<iostream>\n#include<queue>\n#include<cstdio>\nusing namespace std;\nstruct Node{\n    int data,num;\n    bool operator <(const Node tt) const {\n        if(data!=tt.data)return data>tt.data;\n        return num>tt.num;\n    }\n}a[100005];\npriority_queue<Node>q[100005];\nint n,m,prt[100005],del[100005];\nint GetFa(int x){\n    return x==prt[x]?x:prt[x]=GetFa(prt[x]);\n}\nvoid Merge(int x,int y){\n    if(del[x]||del[y])return ;\n    x=GetFa(x);\n    y=GetFa(y);\n    if(x==y)return ;\n    if(q[x].size()>q[y].size())swap(x,y);\n    prt[x]=y;\n    while(q[x].size()){\n        q[y].push(q[x].top());\n        q[x].pop();\n    }\n}\nint DeleteMin(int x){\n    x=GetFa(x);\n    Node t=q[x].top();\n    q[x].pop();\n    del[t.num]=1;\n    return t.data;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&a[i].data);\n        prt[i]=i;\n        a[i].num=i;\n        q[i].push(a[i]);\n    }\n    for(int i=1;i<=m;i++){\n        int opt,x,y;\n        scanf(\"%d%d\",&opt,&x);\n        if(opt==1){\n            scanf(\"%d\",&y);\n            Merge(x,y);\n        }\n        else {\n            if(del[x])puts(\"-1\");\n            else printf(\"%d\\n\",DeleteMin(x));\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1545569810,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "# \u6b64\u4e0b\u4e3a2019-11-10\u9996\u6b21\u63d0\u4ea4\u5185\u5bb9\n\u53d1\u8fd9\u7bc7\u9898\u89e3\u662f\u56e0\u4e3a\uff0c\u55ef\u55ef\n\n\u6211\u7684\u4ee3\u7801\uff0c\u5728\u6ca1\u5f00O2\u7684\u60c5\u51b5\u4e0b\uff0cAC4\u6b21\u5206\u522b174ms,168ms,158ms,152ms\u3002\n\n\u800c\u90a3\u4f4d\u201c\u6548\u7387\u7b2c\u4e00\uff0c\u6b22\u8fce\u8d85\u8d8a\u201d\u7684\uff0c\u4e0d\u5f00O2**\u6700\u540e\u4e00\u4e2a\u70b9\u8d85\u65f6**\uff1f\uff1f\uff1f\n\n\u7b2c\u4e8c\u7bc7\u65f6\u95f4\u590d\u6742\u5ea6\u5012\u662f\u4f4e\u4e86\uff0c\u53ef\u662f\u8fd9\u7801\u98ce\u6709\u70b9\u2026\u2026\n\n\u4e8e\u662f\uff0c\u5c3d\u7ba1\u6211\u7684LT\u5b66\u7684\u5f88\u70c2\uff0c\u4f46\u6211\u8fd8\u662f\u505a\u4e86\u8fd9\u7bc7\u9898\u89e3\n\n## \u5de6\u504f\u6811:\n_\uff08\u56e0\u4e3a\u5f88\u591a\u5927\u4f6c\u90fd\u8bb2\u5f97\u5f88\u597d\uff0c\u6211\u8fd9\u91cc\u5c31\u6311\u91cd\u70b9\u8bb2\u4e86\uff09_\n\n\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5411\u5de6\u504f\u7684\u6811\uff1b\u7528dis[x]\u8868\u793ax\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u53f6\u5b50\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u5219dis[x.l]\u2265dis[x.r]\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230dis[x]=dis[x.r]+1\n\n\u53ef\u80fd\u5b66\u8fc7\u5e73\u8861\u6811\u7684\u4eba\u4f1a\u89c9\u5f97\u8fd9\u6837\u4e0d\u5e73\u8861\u6548\u7387\u964d\u4f4e\uff0c\u4f46\u4e8b\u5b9e\u4e0a\uff0c\u5728\u6211\u4eec\u8fdb\u884c\u5de6\u504f\u6811\u64cd\u4f5c\u65f6\uff0c\u627e\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u53f6\u5b50\u8282\u70b9\u5c31\u884c\u4e86\uff0c\u56e0\u6b64\uff0c\u5de6\u504f\u4e1d\u6beb\u4e0d\u4f1a\u5f71\u54cd\u5176\u6548\u7387\uff0c\u6bcf\u6b21\u5408\u5e76\u4ecd\u662fO(log n)\n\n\u800c\u5de6\u504f\u6811\u65e2\u7136\u662f\u53ef\u5e76\u5806\uff0c\u81ea\u7136\uff0c\u5de6\u504f\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u2264\u5b83\u7684\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u7684\u503c\n\n### \u5177\u4f53\u505a\u6cd5\uff1a\n1.\u5408\u5e76 \u6211\u770b\u4e86\uff0c\u5404\u4f4d\u5de8\u4f6c\u7684\u5408\u5e76\u90fd\u8bb2\u5f97\u5f88\u4e0d\u9519\uff0c\u4e3a\u4e86\u9632\u6b62\u88ab\u795e\u7287\u55b7\uff0c\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\n\n2.\u63d2\u5165 \u5c31\u662f\u628a\u4e00\u4e2a\u70b9\u548c\u4e00\u4e2a\u5de6\u504f\u6811\u5408\u5e76\n\n3 \u5220\u9664\u6700\u5c0f\u8282\u70b9 \u5220\u6389\u6839\uff0c\u518d\u5408\u5e76\u5de6\u53f3\u5b50\u6811\n\n**\u5bf9\u4e8e\u590d\u6742\u5ea6\u95ee\u9898\uff0c2\u697c\u5199\u7684\u5f88\u5b8c\u7f8e\uff0c\u6211\u7528\u7684\u4e5f\u662f2\u697c\u7684\u5e76\u67e5\u96c6\u67e5\u6cd5\uff0c\u60f3\u770b\u7684\u53bb\u770b2\u697c\u7684\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u4e86**\n\n\u4ee5\u4e0b\u4e3a\u9996\u6b21\u63d0\u4ea4\u9898\u89e3\u7684\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+9;\nint n,m,op,a,b;\nstruct leftist_tree{\n\tint dis,val,lch,rch,f;\n}lt[N];\ninline int find(int x){\n\tif(lt[x].f==x)return x;\n\treturn lt[x].f=find(lt[x].f);\n}\ninline int merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(lt[x].val>lt[y].val)swap(x,y);\n\tif(x>y&&lt[x].val==lt[y].val)swap(x,y);\n\tint ls=lt[x].lch,rs=lt[x].rch;\n\trs=merge(rs,y);\n\tif(lt[ls].dis<lt[rs].dis)swap(ls,rs);\n\tlt[ls].f=lt[rs].f=lt[x].f=x;\n\tlt[x].dis=lt[rs].dis+1;\n\tlt[x].lch=ls,lt[x].rch=rs;\n\treturn x;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tlt[0].dis=-1;\n\tfor(int i=1;i<=n;i++)\n\t\tlt[i].f=i,scanf(\"%d\",&lt[i].val);\n\tfor(int op,a,b;m--;){\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1){\n\t\t\tscanf(\"%d%d\",&a,&b);\n\t\t\tif(!~lt[a].val)continue;\n\t\t\tif(!~lt[b].val)continue;\n\t\t\tint fa=find(a),fb=find(b);\n\t\t\tif(fa!=fb)lt[fa].f=lt[fb].f=merge(fa,fb);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d\",&a);\n\t\t\tif(~lt[a].val){\n\t\t\t\tint fa=find(a);\n\t\t\t\tint ls=lt[fa].lch;\n\t\t\t\tint rs=lt[fa].rch;\n\t\t\t\tprintf(\"%d\\n\",lt[fa].val);\n\t\t\t\tlt[fa].val=-1;\n\t\t\t\tlt[ls].f=ls,lt[rs].f=rs;\n\t\t\t\tlt[fa].f=merge(ls,rs);\n\t\t\t}\n\t\t\telse puts(\"-1\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n**\u656c\u4ee5\u6b64\u9898\u89e3\u6765\u81f4\u8c22\u4e00\u4e8c\u697c\u4e24\u4f4d\u5927\u4f6c\u63d0\u4f9b\u7684\u601d\u8def**\n\n# \u6b64\u4e0b\u4e3a2020-1-25\u7eed\u5199\n\u5927\u5e74\u521d\u4e00\uff0c\u6628\u5929\u505a\u9898\u65f6\u95f4\u8fc7\u957f\uff0c\u4e8e\u662f\u4eca\u5929\u5c31\u4e0d\u60f3\u505a\u9898\u4e86\uff0c\u627e\u5230\u4e86\u66fe\u7ecf\u53d1\u8fc7\u7684\u8fd9\u7bc7\u9898\u89e3\uff0c\u53d1\u73b0\u8fd8\u6709\u4e00\u4e9b\u4f18\u5316\u7684\u4f59\u5730\uff0c\u4fbf\u91cd\u65b0\u641e\u4e86\u4e00\u4e2a\n\n\u5c06\u7ed3\u6784\u4f53\u53bb\u6389\uff0c\u662f\u4e3a\u4e86\u4ee3\u7801\u7b80\u6d01\uff1b\u641e\u4e00\u5806\u7a00\u5947\u53e4\u602a\u7684\u4e1c\u897f\uff0c\u662f\u4e3a\u4e86\u63d0\u901f\n\n\u5728\u8fd9\u6837\u7684\u4e71\u641e\u4e0b\uff0c\u6211\u7684\u4ee3\u7801\u6210\u529f\u4ece160ms\u5de6\u53f3\u63d0\u5347\u81f3100ms\u5de6\u53f3\uff08**\u5728\u6b64%%%24ms\u7684\u795e\u7287\u4eec**\uff09\n\n\u65b0\u4ee3\u7801\u5982\u4e0b\uff1a\uff08\u76f8\u4fe1\u8ba4\u771f\u770b\u5b8c\u7b2c\u4e00\u4e2a\u4ee3\u7801\u7684\u4f60\u4e00\u5b9a\u80fd\u8f7b\u677e\u7406\u89e3\u7b2c\u4e8c\u4e2a\uff0c\u56e0\u6b64\u6211\u5c31~~\u5077\u61d2~~\u4e0d\u4f5c\u6ce8\u91ca\u4e86\uff09\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define II inline int\n#define GC getchar()\nusing namespace std;\nconst int N=1e5+9;\nint n,m,dis[N],v[N];\nint ls[N],rs[N],fa[N];\nII rd(){\n\tchar c=GC;int x=0;\n\twhile(c>'9'||c<'0')c=GC;\n\twhile(c>='0'&&c<='9')\n\t\tx+=(x<<3)+x+c-'0',c=GC;\n\treturn x;\n}\nII find(int x){\n\tif(fa[x]==x)return x;\n\treturn fa[x]=find(fa[x]);\n}\nII merge(int x,int y,int g){\n\tif(!x||!y){fa[x+y]=g?g:x+y;return x+y;}\n\tif(v[x]>v[y]||(x>y&&v[x]==v[y]))swap(x,y);\n\tfa[x]=g?g:g=x,rs[x]=merge(rs[x],y,g);\n\tif(dis[ls[x]]<dis[rs[x]])swap(ls[x],rs[x]);\n\tdis[x]=dis[rs[x]]+1;\n\treturn x;\n}\nint main(){\n\tn=rd(),m=rd(),dis[0]=-1;\n\tfor(register int i=1;i<=n;i++)\n\t\tfa[i]=i,v[i]=rd();\n\tfor(register int op,x,y;m--;){\n\t\top=rd(),x=rd();\n\t\tif(op==1){\n\t\t\ty=rd();\n\t\t\tif(!v[x]||!v[y])continue;\n\t\t\tint a=find(x),b=find(y);\n\t\t\tif(a-b)fa[a]=fa[b]=merge(a,b,0);\n\t\t}\n\t\telse{\n\t\t\tif(!v[x]){puts(\"-1\");continue;}\n\t\t\tint a=find(x);\n\t\t\tprintf(\"%d\\n\",v[a]),v[a]=0;\n\t\t\tfa[a]=merge(ls[a],rs[a],0);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1573354341,
        "uid": 109401,
        "name": "\u5b81_\u7f3a",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u4e0d\u4f1a\u88ab\u5361\u7684\u53ef\u5e76\u5806\u2014\u2014\u968f\u673a\u5806\uff0c\u4e86\u89e3\u4e00\u4e0b\uff01\n\n\u5728\u5408\u5e76\u65f6\uff0c\u968f\u673a\u4e0e\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u5408\u5e76\u5373\u53ef\u3002\u8fd9\u6837\u4fdd\u8bc1\u4e86\u5de6\u53f3\u5b50\u6811\u7684\u5747\u5300\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u9891\u7e41\u5730\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\uff0c\u65e0\u60e7\u4efb\u4f55\u6bd2\u7624\u6570\u636e\u3002\u5408\u5e76\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u644a$O(\\log n)$\u3002\n```\n#include<cstdio>\n#include<cctype>\n#include<cstdlib>\n#include<algorithm>\n\nint Read()\n{\n\tint x=0;\n\tchar c=getchar();\n\twhile(!isdigit(c))\n\t\tc=getchar();\n\twhile(isdigit(c))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x;\n}//\u666e\u901a\u7684\u5feb\u8bfb\n\nint ch[100005][2],val[100005],fa[100005];\n//\u8fd9\u4e9b\u4e1c\u897f\u548c\u666e\u901a\u7684\u4e8c\u53c9\u5806\u76f8\u540c\n\nint merge(int x,int y)\n{\n\tif (!x||!y)\n\t\treturn x+y;\n\tif (val[x]>val[y]||(val[x]==val[y] && x>y))\n\t\tstd::swap(x,y);\n\tint opt=rand()&1;//\u6ce8\u610f\u8fd9\u91cc\uff0c\u7528\u968f\u673a\u6570\u786e\u5b9a\u5408\u5e76\u7684\u65b9\u5411\n\tch[x][opt]=merge(ch[x][opt],y);\n\tfa[ch[x][opt]]=x;//\u666e\u901a\u5730\u7ef4\u62a4\u5e76\u67e5\u96c6\n\treturn x;\n}\n\nint find(int x)\n{\n\twhile(fa[x])\n\t\tx=fa[x];\n\treturn x;\n}\n//\u6bd4\u8f83\u5751\u7684\u662f\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\u3002\u5982\u679c\u8def\u5f84\u538b\u7f29\uff0c\u4e00merge\u5c31\u4f1a\u6df7\u4e71\u3002\n\nvoid pop(int x)\n{\n\tval[x]=-1;\n\tfa[ch[x][0]]=fa[ch[x][1]]=0;\n\tmerge(ch[x][0],ch[x][1]);\n}//\u666e\u901a\u7684\u5220\u9664\u8282\u70b9\n\nint main()\n{\n\tsrand(19260817);//\u666e\u901a\u7684\u968f\u673a\u6570\u79cd\u5b50\n\tint n=Read(),m=Read(),x,y;\n\tfor(int i=1; i<=n; i++)\n\t\tval[i]=Read();\n\twhile(m--)\n\t{\n\t\tif(Read()&1)\n\t\t{\n\t\t\tx=Read(),y=Read();\n\t\t\tif(val[x]==-1||val[y]==-1||(x=find(x))==(y=find(y)))\n\t\t\t\tcontinue;\n\t\t\tmerge(x,y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=Read();\n\t\t\tif(val[x]==-1)\n\t\t\t\tputs(\"-1\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tx=find(x);\n\t\t\t\tprintf(\"%d\\n\",val[x]);\n\t\t\t\tpop(x);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1532432174,
        "uid": 53374,
        "name": "SuperJvRuo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u6298\u817e\u4e86\u51e0\u5929\u7ec8\u4e8e\u628a\u8fd9\u4e2a\u9898A\u4e86\u3002\u3002\u3002\n\n\u770b\u5230\u624b\u5199\u5de6\u504f\u6811/\u914d\u5bf9\u5806\u5df2\u7ecf\u6709\u5f88\u591a\u9898\u89e3\u4e86\uff0c\u800cpbds\u5374\u6ca1\u6709\u4eba\u4ecb\u7ecd\uff0c\u6211\u6765\u4ecb\u7ecd\u4e00\u53d1\n\n\u9996\u5148\uff0cpbds\u662f\u4ec0\u4e48\uff1f\n\npbds\u662f\u4e00\u4e2a\u6bd4STL\u8fd8STL\u7684\u5e93\uff0c\u91cc\u9762\u5c01\u88c5\u4e86\u5404\u79cd\u53ef\u5e76\u5806\u3001\u7ea2\u9ed1\u6811\u7b49\u7b49\u6570\u636e\u7ed3\u6784\uff0c\u5927\u5927\u5730\u65b9\u4fbf\u4e86oier\u3002\n\n## \u6700\u91cd\u8981\u7684\u662f\uff0cNOIP\u652f\u6301pbds\u4e86\uff01\n\n~~\u65e2\u7136\u5982\u6b64\u90a3\u6211\u4eec\u5f53\u7136\u9009\u62e9\u5c01\u88c5\u800c\u4e0d\u662f\u624b\u5199~~\n\n\u89e3\u4e0b\u6765\u7684\u5185\u5bb9\u5927\u4f6c\u8bf7\u7565\u8fc7\n\n\u5177\u4f53\u7684\u4ee3\u7801\u91cc\u8bf4\u5427\n\n```cpp\n#include <bits/stdc++.h>\n#include <ext/pb_ds/priority_queue.hpp>//\u5f15\u7528pbds\u7684\u5e93\u7684\u5806\n#pragma GCC optimize(3)\nusing namespace std;\ninline char nc(){\n  \tstatic char buf[100000],*p1=buf,*p2=buf;\n  \treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\ntemplate <typename _Tp>\ninline void read(_Tp &x){\n    int f=1;x=0;char ch=nc();\n  \twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=nc();}\n  \twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=nc();}\n  \tx*=f;\n}\ninline void write(long long n){\n    if(n==0) return;\n    write(n/10);\n    putchar(n%10+'0');\n}\nstruct ${\n    int s,id;\n    inline bool operator < (const $ &p)const{if (s!=p.s)return s>p.s;else return id>p.id;}//\u6ce8\u610f\uff01\u7531\u4e8e\u4f7f\u7528\u4e86pbds\uff0c\u53ea\u80fd\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002\u800c\u4e14pbds\u4e2d\u7684\u5806\u5f88\u6bd2\u7624\uff0c\u5b83\u628a<\u91cd\u8f7d\u6210>\uff0c\u7136\u540e\u6392>\uff0c\u6240\u4ee5\u91cd\u8f7d\u7684\u65f6\u5019\u8981\u6ce8\u610f\u53cd\u7740\u91cd\u8f7d\n};//\u7ed3\u6784\u4f53\uff0c\u5b58\u6bcf\u4e2a\u6570\u7684\u6570\u503c\u548cid\ninline $ g(int a,int b){$ p;p.s=a,p.id=b;return p;}//\u5c062\u4e2aint\u8f6c\u6210\u4e00\u4e2a$\n__gnu_pbds::priority_queue<$> q[100005];//\u5b9a\u4e49\u4e00\u4e2apbds\u7684\u5806\n//\u4f7f\u7528__gnu_pbds::\u6765\u5f15\u7528pbds\u5185\u7684\u5185\u5bb9\nint n,m,f[100005],x;\nbool s[100005];//\u5982\u679cs[i]==1\u5219i\u88ab\u5220\u9664\nint find(int n){return f[n]==n?n:f[n]=find(f[n]);}//\u7ef4\u62a4\u5e76\u67e5\u96c6\uff0c\u8fd9\u91cc\u5b9e\u9645\u4e0a\u53ef\u4ee5\u8def\u5f84\u538b\u7f29\nint main(){\n    read(n),read(m);\n    for (int i=1;i<=n;i++)read(x),q[i].push(g(x,i)),f[i]=i;//\u8bfb\u5165\u7684\u540c\u65f6\u5bf9\u6bcf\u4e2ai\u5efa\u4e00\u4e2a\u5806\uff0c\u540c\u65f6\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    while (m--){\n        read(x);\n        if (x==1){\n            int a,b;\n            read(a),read(b);\n            int fa=find(a),fb=find(b);\n            if (fa==fb||s[a]||s[b])continue;//\u5751\u70b91\uff1a\u6ce8\u610f\u4e0d\u8981\u628as[a]||s[b]\u5199\u6210\u4e86s[fa]||s[fb]\n            if (q[fa].size()>q[fb].size())f[fb]=fa,q[fa].join(q[fb]);//\u6309\u5806\u7684\u5927\u5c0f\u5408\u5e76\n            else f[fa]=fb,q[fb].join(q[fa]);\n        }else{\n            int a;\n            read(a);\n            if (s[a]){puts(\"-1\");continue;}\n            int fa=find(a);\n            write((q[fa].top()).s),puts(\"\"),s[(q[fa].top()).id]=1,q[fa].pop();//\u540c\u666e\u901a\u5806\n        }\n    }\n}\n```\n\n\u770b\u4e86\u4e00\u4e0b\uff0c\u6211\u7684\u4ee3\u7801\u5e94\u8be5\u7b97\u77ed\u7684\u3002\u800c\u4e14\u5f00\u4e86O3\u4e4b\u540e\uff0c\u5c01\u88c5\u7684\u4e5f\u4e0d\u6162\uff0c\u6240\u4ee5\u5411\u5927\u5bb6\u5f3a\u70c8\u63a8\u8350pbds\uff01",
        "postTime": 1551013761,
        "uid": 39863,
        "name": "\u5f15\u9886\u5929\u4e0b",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "Paring Heap\u5f88\u597d\u7528\u554a\uff0c\u611f\u89c9\u6bd4\u4e8c\u53c9\u5806\u8fd8\u597d\u5199\uff1f\n\nPS:\u56e0\u4e3a\u4e0d\u9700\u8981decrease key\uff0c\u65e0\u9700\u7ef4\u62a4father\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e9b\u7e41\u7410\n\n\n\u6838\u5fc3\u64cd\u4f5c\u5c31\u662fmerge\uff1a\n\n```cpp\nstruct T_{int c;T_ *l,*r;}; // \u6743\u503c\uff1b\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\n\nT_ *merge_(T_ *a, T_ *b) // \u5408\u5e76\u5806a\u548cb\uff0c\u8fd4\u56de\u65b0\u6839 \n{\n  if(!a) return b; if(!b) return a;\n  if(a->c > b->c) swap(a, b); // \u5c0f\u6839\u5806\u3002\u672c\u9898\u5e94\u5199\u4e3a\u5148\u6743\u503c\u540e\u7f16\u53f7\u6bd4\u8f83 \n  return b->r = a->l, a->l = b, a;\n}\nT_ *merges_(T_ *c) // \uff08\u8f85\u52a9\uff09\u5408\u5e76\u8282\u70b9c\u548c\u4ed6\u7684\u5144\u5f1f\u4eec \n{\n  if(!c || !c->r) return c;\n  T_ *a = c->r, *b = a->r; c->r = a->r = NULL;\n  return merge_(merge_(c, a), merges_(b)); // Paring\uff01 \n}\n```\n\n\u53d6\u6700\u5c0f\u76f4\u63a5\u8bbf\u95ee\u6839\u5373\u53ef\u3002\n\npop\u64cd\u4f5c\u76f4\u63a5\u7528merges\\_(root->l)\u5408\u5e76\u6839\u7684\u6240\u6709\u513f\u5b50\uff0c\u8fd4\u56de\u7684\u5c31\u662f\u65b0\u6839\n",
        "postTime": 1480153618,
        "uid": 9567,
        "name": "HOOCCOOH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u8fd9\u7bc7\u9898\u89e3\u6ca1\u4ec0\u4e48\u65b0\u7684\u5730\u65b9\uff0c\u6253\u6cd5\u4e5f\u4e0d\u7b97\u9ad8\u660e\uff0c\u4e3b\u8981\u662f\u8ba8\u8bba\u4e00\u70b9\u7ec6\u8282\u3002\n\u770b\u89c1\u9898\u89e3\u91cc\u9762\u5bf9\u4e8e\u8def\u5f84\u538b\u7f29\u5c55\u5f00\u4e86\u8ba8\u8bba\uff1f\n\u4e8b\u5b9e\u4e0a\u6211\u8fd8\u662f\u8ba4\u4e3a\u8fd9\u9898\u5c31\u662f\u666e\u901a\u7684\u5de6\u504f\u6811+\u5e76\u67e5\u96c6\u3002\n\n\u800c\u4e14\u5b9e\u73b0\u65b9\u5f0f\u53ef\u4ee5\u662f**\u4e00\u4e2a\u5e76\u67e5\u96c6\u5bf9\u5e94\u4e00\u9897\u5de6\u504f\u6811**\uff0c**\u6216\u8005\u8bf4\u4e00\u4e2a\u5e76\u67e5\u96c6\u7684\u6839\u5bf9\u5e94\u4e00\u68f5\u5de6\u504f\u6811\u7684\u6839**\n\n\u7136\u800c\u5f88\u591a\u9898\u89e3\u90fd\u6ca1\u4ed4\u7ec6\u8bb2\u8fd9\u4e00\u70b9\uff0c\u4e5f\u5c31\u662f**\u8fd9\u9898\u7684\u5de6\u504f\u6811\u5408\u5e76\u548c\u5e76\u67e5\u96c6\u5408\u5e76\u662f\u4e92\u4e0d\u76f8\u5e72\u7684\uff0c\u4e24\u8005\u662f\u5b8c\u5168\u5e73\u884c\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u5728\u5e76\u67e5\u96c6\u5408\u5e76\u4e2d\u7684\u8def\u5f84\u538b\u7f29\u4e0d\u4f1a\u5bf9\u5de6\u504f\u6811\u5408\u5e76\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\u3002**\n\u6211\u5199\u7684\u4ee3\u7801\u4e2d\n\n\u5de6\u504f\u6811\u7684\u6811\u7684\u9876\u70b9\uff1a\n```cpp\nstruct node {\n\tint val;\n\tint ind;\n\tint dis;\n\tnode *lk;\n\tnode *rk;\n};\n```\n\n\u4e00\u4e2a\u5e76\u67e5\u96c6\u5bf9\u5e94\u4e00\u68f5\u5de6\u504f\u6811 \u8bbe\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7684\u6839\u662frn \u90a3\u4e48\u5b83\u5bf9\u5e94\u7684\u5de6\u504f\u6811\u7684\u6839\u662frt[rn]\n\nxy\u7684\u5e76\u67e5\u96c6ra,rb\u5408\u5e76\u7684\u65f6\u5019\uff0cuni\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5408\u5e76\u4ee5\u540e\u5e76\u67e5\u96c6\u7684\u6839rn\uff08\u8fd9\u91cc\u662f\u5e8f\u53f7\uff09\u7136\u540e\u66f4\u65b0rt[rn]=merge(rt[ra],rt[rb]) \u8fd9\u6837\u5c31\u505a\u5230\u4e86\u4e00\u4e2a\u5e76\u67e5\u96c6\u5bf9\u5e94\u4e00\u68f5\u5de6\u504f\u6811\n\n```\nif(used[x]||used[y]) continue;\nint ra=froot(x),rb=froot(y);\nif(ra==rb) continue;\nint rn=uni(ra,rb);//\u5e76\u67e5\u96c6\u5408\u5e76\nrt[rn]=merge(rt[ra],rt[rb]);//\u5e76\u67e5\u96c6\u5bf9\u5e94\u7684\u5de6\u504f\u6811\u5408\u5e76\n```\n\n\u67e5\u8be2x\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u627e\u5230x\u6240\u5728\u7684\u5e76\u67e5\u96c6ra\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5e76\u67e5\u96c6\u5bf9\u5e94\u7684\u5de6\u504f\u6811\u7684\u9876\u70b9\n\n```\n\nint ra=froot(x);\nprintf(\"%d\\n\",rt[ra]->val);\n```\n\n\u67e5\u8be2\u540e\u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5220\u9664\u5bf9\u5e94\u5de6\u504f\u6811\u7684\u9876\u70b9\uff0c\u7136\u540e\u66f4\u65b0\u6574\u4e2a\u5e76\u67e5\u96c6\u7684\u5de6\u504f\u6811\u7684\u6839\u5c31\u53ef\u4ee5\u4e86\n```cpp\nused[rt[ra]->ind]=1;\nrt[ra]=pop(rt[ra]);//pop\u66f4\u65b0\u5220\u9664rt[ra]\u5e76\u8fd4\u56de\u65b0\u7684\u5de6\u504f\u6811\u6839\n```\n\n\u56e0\u6b64\u5f88\u591a\u4eba\u8bf4\u8fd9\u9898\u5408\u5e76\u64cd\u4f5c\u5199\u5f97\u5f88\u6655\uff0c\u6211\u8ba4\u4e3a\u591a\u534a\u662f\u628a\u8fd9\u4e24\u4e2a\u5408\u5e76\u64cd\u4f5c\u5199\u5230\u4e86\u4e00\u8d77\uff0c\u8fd9\u6837\u5f53\u7136\u6655\u3002\u800c\u5982\u679c\u628a\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u72ec\u7acb\u5f00\u6765\uff08\u4e0b\u9762\u5f88\u591a\u9898\u89e3\u6ca1\u8bb2\u5230\u8fd9\u4e00\u70b9\uff09\uff0c\u903b\u8f91\u66f4\u52a0\u6e05\u6670\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5e76\u67e5\u96c6\u4e2d\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u3002\n\n\u6700\u540e\u8d34\u4e0a\u5b8c\u6574\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#define MAXN 100010\nusing namespace std;\n\ntemplate<class T>\nvoid swp(T &x,T &y){\n\tT t=x;\n\tx=y;\n\ty=t;\n}\nstruct node {\n\tint val;//value \u8868\u793a\u8fd9\u4e2a\u6570\u7684\u503c\n\tint ind;//index \u8868\u793a\u8fd9\u4e2a\u6570\u662f\u539f\u5e8f\u5217\u4e2d\u7684\u4e0b\u6807\n\tint dis;\n\tnode *lk;\n\tnode *rk;\n\tint flag(){\n\t\tif(lk==NULL&&rk!=NULL) return 1;\n\t\tif(lk!=NULL&&rk!=NULL&&lk->dis<rk->dis) return 1;\n\t\treturn 0;\n\t}//\u8fd9\u4e2aflag\u6bd4\u8f83\u4e11\uff0c\u662f\u5224\u65ad\u8282\u70b9\u662f\u5426\u6ee1\u8db3\u5de6\u504f\u6027\u8d28\u7684\n};\n\nnode *rt[MAXN];\nint n,m,f[MAXN],rnk[MAXN],used[MAXN];//f\u8868\u793a\u5e76\u67e5\u96c6\u7684\u7236\u8282\u70b9\uff0crnk\u8868\u793a\u6743\u7528\u4e8e\u6309\u6743\u5408\u5e76\uff0cused[i]\u8868\u793a\u7b2ci\u4e2a\u6570\u662f\u5426\u5220\u9664\u8fc7\n\nint froot(int x);\nint greater(node *x,node *y);\nint uni(int x,int y);\nnode *merge(node *x,node *y);\nnode *pop(node *x);\nnode *push(node *x,int v,int i);\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++) rnk[i]=1;\n\tint t;\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&t);\n\t\trt[i]=push(NULL,t,i);\n\t}\n\tint flag,x,y;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d\",&flag);\n\t\tif(flag==1){\n\t\t\tscanf(\"%d %d\",&x,&y);\n\t\t\tif(used[x]||used[y]) continue;\n\t\t\tint ra=froot(x),rb=froot(y);\n\t\t\tif(ra==rb) continue;\n\t\t\tint rn=uni(ra,rb);\n\t\t\trt[rn]=merge(rt[ra],rt[rb]);\n\t\t}\n\t\telse if(flag==2){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tif(used[x]){\n\t\t\t\tputs(\"-1\");// \u8bb0\u5f97\u8f93\u51fa-1 \u6211wa\u4e86\u4e00\u6b21\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint ra=froot(x);\n\t\t\tprintf(\"%d\\n\",rt[ra]->val);\n\t\t\tused[rt[ra]->ind]=1;\n\t\t\trt[ra]=pop(rt[ra]);\n\t\t}\n\t}\n\treturn 0;\n}\n\nint uni(int x,int y){\n\tif(rnk[x]<rnk[y]) swp(x,y);\n\tf[y]=x;\n\trnk[x]+=rnk[y];\n\treturn x;//\u8fd4\u56de\u65b0\u7684\u5e76\u67e5\u96c6\u7684\u6839 \u4e00\u822c\u7684\u5e76\u67e5\u96c6\u4e0d\u8fd9\u4e48\u6253\n}\n\nint gter(node *x,node *y){\n\tif(x->val>y->val) return 1;\n\tif(x->val<y->val) return 0;\n\tif(x->ind>y->ind) return 1;\n\treturn 0;\n}//\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff0c\u56e0\u4e3a\u9898\u76ee\u8981\u6c42val\u76f8\u540c\u4f18\u5148\u5220\u9664ind\u6bd4\u8f83\u5c0f\u7684\uff0c\u4e0d\u59a8ind\u8f83\u5c0f\u7684\u653e\u5230\u5806\u7684\u4e0a\u65b9\n\nint froot(int x){\n\tif(!f[x]) return x;\n\tf[x]=froot(f[x]);\n\treturn f[x];\n}\n\nnode *merge(node *x,node *y){\n\tif(x==NULL) return y;\n\tif(y==NULL) return x;\n\tif(gter(x,y)) swp(x,y);\n\tx->rk=merge(x->rk,y);\n\tif(x->flag()) swp(x->lk,x->rk);\n\tx->dis=x->rk==NULL?0:x->rk->dis+1;\n\treturn x;\n}\n\nnode *pop(node *x){\n\tnode *p=x;\n\tx=merge(p->lk,p->rk);\n\tdelete p;\n\treturn x;\n}\n\nnode *push(node *x,int v,int i){\n\tnode *p=new node;\n\tp->val=v;\n\tp->ind=i;\n\tp->dis=0;\n\tp->lk=NULL;\n\tp->rk=NULL;\n\treturn merge(x,p);\n}\n```\n",
        "postTime": 1544520622,
        "uid": 9431,
        "name": "cabasky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u4ecb\u7ecd\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(NlogN^2)\u7684\u505a\u6cd5\uff0c\u597d\u5904\u5728\u4e8e\u7f16\u7a0b\u590d\u6742\u5ea6\u6781\u4f4e\uff0c\u5f88\u9002\u5408\u8003\u573a\u5e94\u7528\n\n## \u542f\u53d1\u5f0f\u5408\u5e76\uff01\n\n### \u505a\u6cd5\uff1a\n\n\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5143\u7d20\u6240\u5c5e\u5806\uff0c\u666e\u901a\u5806\u8fdb\u884c\u67e5\u8be2\u64cd\u4f5c\u3002\u5408\u5e76\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u628a\u5c0f\u7684\u96c6\u5408\u66b4\u529b\u6253\u788e\uff0c\u63d2\u5165\u5927\u7684\u96c6\u5408\u4e2d\u3002\n\n\u770b\u8d77\u6765\u5c31\u7279\u522b\u771f\u5b9e\uff0c\u7136\u800c\u2026\u2026\u770b\u4e0a\u53bb\u4e5f\u592a\u66b4\u529b\u4e86\u5427\uff1f\n\n### \u590d\u6742\u5ea6\u8bc1\u660e\uff1a\n\n\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u7684\u65f6\u5019\uff0c\u96c6\u5408\u5927\u5c0f\u603b\u662f\u81f3\u5c11\u7ffb\u500d\u7684\uff0c\u6240\u4ee5\u6bcf\u4e2a\u6570\u88ab\u66b4\u529b\u7684\u6b21\u6570\u53ea\u6709log\u6b21\uff0c\u4e00\u4e2a\u6570\u66b4\u529b\u7684\u590d\u6742\u5ea6\u662flog\u7684\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6O(NlogN^2)\u3002\n\n### \u597d\u5904\uff1a\n\n\u76f4\u63a5\u4e0aSTL\u9e2d\uff01\n\u56e0\u4e3apriority_queue\u597d\u50cf\u4e0d\u4f1a\u56de\u6536\u7a7a\u95f4\uff0c\u6240\u4ee5\u4f7f\u7528\u4e86set\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std ;\ninline int Readin() {\n\tregister int K = 0 , F = 1 ; register char C = getchar() ;\n\twhile( C < '0' or C > '9' ) F = C == '-' ? -1 : 1 , C = getchar() ;\n\twhile( C >= '0' and C <= '9' ) K = ( K << 3 ) + ( K << 1 ) + C - '0' , C = getchar() ;\n\treturn F * K ;\n}\nconst int MaxN = 100000 + 5 ;\nint N , M ;\nstruct Node {\n\tint A , Id ;\n} Nod[MaxN] ;\ninline bool operator < ( Node A , Node B ) {\n\treturn A.A == B.A ? A.Id < B.Id : A.A < B.A ; \n}\nset<Node> Heap[MaxN] ;\nint Find[MaxN] , Size[MaxN] ;\nint F( int Nod ) {\n\treturn Nod == Find[Nod] ? Nod : Find[Nod] = F( Find[Nod] ) ;\n}\nbool Del[MaxN] ;\nint main() {\n\tN = Readin() ;\n\tM = Readin() ;\n\tfor(register int i = 0 ; ++i <= N ; ) {\n\t\tNod[i].A = Readin() ;\n\t\tNod[i].Id = Find[i] = i ;\n\t\tSize[i] = 1 ;\n\t\tHeap[i].insert( Nod[i] ) ;\n\t}\n\twhile( M-- )\n\t\tif( Readin() == 1 ) {\n\t\t\tregister int X = Readin() , Y = Readin() ;\n\t\t\tif( Del[X] or Del[Y] ) continue ;\n\t\t\tif( ( X = F(X) ) == ( Y = F(Y) ) ) continue ;\n\t\t\tif( Size[X] > Size[Y] ) X ^= Y ^= X ^= Y ;\n\t\t\twhile( Heap[X].size() ) {\n\t\t\t\tHeap[Y].insert( *Heap[X].begin() ) ;\n\t\t\t\tHeap[X].erase( Heap[X].begin() ) ;\n\t\t\t}\n\t\t\tSize[Y] += Size[X] ;\n\t\t\tFind[X] = Y ;\n\t\t}\n\t\telse {\n\t\t\tregister int X = Readin() ;\n\t\t\tif( Del[X] ) {\n\t\t\t\tprintf( \"-1\\n\" ) ;\n\t\t\t\tcontinue ;\n\t\t\t}\n\t\t\t--Size[X=F(X)] ;\n\t\t\tregister Node Minn = *Heap[X].begin() ;\n\t\t\tHeap[X].erase( Heap[X].begin() ) ;\n\t\t\tDel[Minn.Id] = true ;\n\t\t\tprintf( \"%d\\n\" , Minn.A ) ;\n\t\t}\n\treturn 0 ;\n}\n```",
        "postTime": 1545124528,
        "uid": 23323,
        "name": "\u7528\u6237\u5df2\u6ce8\u9500",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u5c31\u662f\u4e2a\u53ef\u5e76\u5806\uff0c\u5f53\u7136\u4e0d\u4e00\u5b9a\u8981\u7528\u5de6\u504f\u6811\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u4e86\u914d\u5bf9\u5806\uff08\u611f\u8c22HOOCCOOHdalao\u7684\u6559\u5bfc\uff09\n\n\u4e8b\u5b9e\u8bc1\u660e\u914d\u5bf9\u5806\u8dd1\u7684\u98de\u5feb\uff0c\u6211\u6ca1\u6709\u523b\u610f\u53bb\u5361\u5e38\uff08\u4e8b\u5b9e\u4e0a\u4ee3\u7801\u5199\u7684\u76f8\u5f53\u4e11\uff09\uff0c\u53ea\u52a0\u4e86\u8bfb\u5165\u4f18\u5316\uff0c\u4f46\u8fd8\u662f\u8dd1\u7684\u6bd4kcz\u5927\u7237\u7684\u5de6\u504f\u6811\u8fd8\u5feb\uff08\u563f\u563f\u563f\u6210\u529f\u6324\u6389kcz\u5927\u7237\u7684rank1\uff09\u3002\n\n\u7531\u4e8e\u8fd9\u9898\u662f\u4e00\u4e9b\u4e0d\u76f8\u4ea4\u96c6\u5408\uff08\u5806\uff09\u7684\u5408\u5e76\uff0c\u6240\u4ee5\u663e\u7136\u9700\u8981\u7528\u5230\u5e76\u67e5\u96c6\uff0c\u5177\u4f53\u5c31\u662f\u5408\u5e76\u4e24\u4e2a\u5806\u7684\u65f6\u5019\u987a\u4fbf\u5728\u5e76\u67e5\u96c6\u91cc\u4e5f\u5408\u5e76\u4e86\uff0c\u7136\u540e\u4ee5\u540e\u901a\u8fc7\u5143\u7d20\u7f16\u53f7\u8bbf\u95ee\u5806\u65f6\u5c31\u53bb\u67e5\u8be2\u5e76\u67e5\u96c6\u91cc\u7684\u6839\u8282\u70b9\u5c31\u662f\u5b9e\u9645\u7684\u5806\u7684\u6839\u8282\u70b9\u7f16\u53f7\uff08\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8111\u5b50\u6709\u70b9\u7cca\uff0c\u5e76\u67e5\u96c6\u5199\u7684\u76f8\u5f53\u70c2\uff09\u3002\n\n\u914d\u5bf9\u5806\u7684\u4e3b\u8981\u4ee3\u7801HOOCCOOHdalao\u7684\u9898\u89e3\u91cc\u90fd\u5199\u4e86\uff0c\u6211\u4e5f\u662f\u57fa\u672c\u53c2\u8003\u4ed6\u7684\u5199\u6cd5\u3002\u5c31\u662f\u8981\u6ce8\u610f\u7684\u662f\u4ed6\u63d0\u5230\u4e86\u7ef4\u62a4\u5806\u65f6\u8981\u6bd4\u8f83\u8282\u70b9\u7f16\u53f7\uff0c\u4f46\u662f\u6ca1\u6709\u5728\u4ed6\u8d34\u7684\u4ee3\u7801\u91cc\u4f53\u73b0\u51fa\u6765\uff0c\u4e00\u5f00\u59cb\u6211\u88ab\u5c0f\u5c0f\u7684\u5751\u4e86\u4e00\u4e0b\uff08\u6ed1\u7a3d\uff09\u3002\n\n\u7136\u540e\u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int BUF=40000000;\nchar Buf[BUF],*buf=Buf;\nconst int OUT=20000000;\nchar Out[OUT],*ou=Out;int Outn[30],Outcnt;\ninline void write(int x){\n  if(!x)*ou++=48;\n  else{\n    for(Outcnt=0;x;x/=10)Outn[++Outcnt]=x%10+48;\n    while(Outcnt)*ou++=Outn[Outcnt--];\n  }\n}\ninline void writechar(char x){*ou++=x;}\ninline void writeln(){*ou++='\\n';}\ninline void read(int&a){for(a=0;*buf<48;buf++);while(*buf>47)a=a*10+*buf++-48;}\nstruct Node\n{\n    int v,id;\n    Node *ch,*xd;\n}node[100001];\nNode* merge(Node* a,Node* b)\n{\n    if (a->v==0) return b; if (b->v==0) return a;\n    if (a->v>b->v || (a->v==b->v && a>b)) swap(a,b);  //\u6ce8\u610f\u5728\u5143\u7d20\u503c\u76f8\u540c\u65f6\u6bd4\u7f16\u53f7\uff0c\u5373\u628a\u7f16\u53f7\u5f53\u7b2c\u4e8c\u5173\u952e\u5b57\n    b->xd=a->ch; a->ch=b;\n    return a;\n}\nNode* merges(Node* c)\n{\n    if (c->v==0 || c->xd->v==0) return c;\n    Node *a=c->xd,*b=a->xd; c->xd=a->xd=node;\n    return merge(merge(c,a),merges(b));\n}\nNode* delMin(Node* x)\n{ \n    //printf(\"%d\\n\",x->v);\n    write(x->v); writeln();\n    x->v=-1;\n    return merges(x->ch);\n}\nint fa[100001];\nint find(int x)\n{\n    if (fa[x]==x) return x;\n    return fa[x]=find(fa[x]);\n}\nbool Union(int fx,int fy)\n{\n    if (fx==fy) return false;\n    fa[fy]=fx;\n    return true;\n}\nNode* heap[100001];\nbool b[100001];\nint main()\n{\n    fread(Buf,1,BUF,stdin);\n    memset(b,true,sizeof(b));\n    int n,m;\n    //scanf(\"%d%d\",&n,&m);\n    read(n); read(m);\n    node[0].v=0;\n    for(int i=1; i<=n; i++) fa[i]=i;\n    for(int i=1; i<=n; i++)\n    {\n    //scanf(\"%d\",&node[i].v);\n    read(node[i].v);\n    node[i].id=i;\n    node[i].ch=node[i].xd=node;\n    heap[i]=&node[i];\n    }\n    for(int i=1; i<=m; i++)\n    {\n    int op,x;\n    //scanf(\"%d%d\",&op,&x);\n    read(op); read(x);\n    if (op==1)\n    {\n        int y;\n        //scanf(\"%d\",&y);\n        read(y);\n        int fx=find(x),fy=find(y);\n        if (!b[x] || !b[y] || !Union(fx,fy)) continue;\n        heap[fx]=merge(heap[fx],heap[fy]);\n    }\n    else\n    {\n        int fx=find(x);\n        if (!b[x])\n        {\n        *ou++='-'; *ou++='1'; writeln();\n        //printf(\"-1\\n\");\n        continue;\n        }\n        b[heap[fx]->id]=false;\n        heap[fx]=delMin(heap[fx]);\n        //b[x]=false;\n    }\n    }\n    fwrite(Out,1,ou-Out,stdout);\n}\n```",
        "postTime": 1481120246,
        "uid": 12159,
        "name": "Jobs",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u6211\u624b\u6253\u7684wa\u4e86\uff0c\u4eca\u5929\u521a\u5b66\u5230pb\\_ds\uff0c\u5c31\u7528\u4e86\u4e00\u4e0b\u3002\n\n\npairing\\_heap \u914d\u5bf9\u5806\uff0c\u662fpb\\_ds\u7684\u5806\u4e2d\u5e38\u6570\u6700\u5c0f\u7684(\u7528\u5b83\u505aspfa\u4f18\u5316\u6bd4\u6211\u624b\u6253\u7684\u666e\u901a\u5806\u5feb)\n\n\u652f\u6301:\n\n\n```cpp\nq.modify(i,x) \u5c06\u8fed\u4ee3\u5668\u4f4d\u7f6ei\u7684\u4fee\u6539\u4e3ax\nq.top() \u8fd4\u56de\u5806\u9996\nq.push(x) \u52a0\u5165x\uff0c\u8fd4\u56de\u8fed\u4ee3\u5668\u4f4d\u7f6e\na.join(b) \u4f18\u5148\u961f\u5217b\u5185\u6240\u6709\u5143\u7d20\u5c31\u88ab\u5408\u5e76\u8fdb\u4f18\u5148\u961f\u5217a\u4e2d\uff0c\u4e14\u4f18\u5148\u961f\u5217b\u88ab\u6e05\u7a7a\nq.erase(i) \u5220\u9664\u5355\u4e2a\u5143\u7d20  \n```\n\u8fd9\u9898\u5b83\u662f112ms\uff0c\u6211\u624b\u6253\u7684\u5de6\u504f\u6811\u662f50ms(\u76ee\u524drank1)\u3002\n\u6240\u4ee5\u8bf4\u5982\u679c\u4e0d\u9700\u8981\u53ef\u6301\u4e45\u5316\u7684\u8bdd\uff0c\u5e94\u8be5\u90fd\u53ef\u4ee5\u653e\u5fc3\u7528\u5b83\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/priority_queue.hpp>\nusing namespace __gnu_pbds;\nusing namespace std;\n\n#define ll long long\n\n#define ch_top 10000000\nchar ch[ch_top],*now_r=ch;\nvoid read(int &x)\n{\n    while (*now_r<48) ++now_r;\n    for (x=*now_r-48;*(++now_r)>=48;)\n     x=(x<<1)+(x<<3)+*now_r-48;\n}\nvoid readl(ll &x)\n{\n    while (*now_r<48) ++now_r;\n    for (x=*now_r-48;*(++now_r)>=48;)\n     x=(x<<1)+(x<<3)+*now_r-48;\n}\n\nstruct xiao\n{\n//\u7531\u4e8e\u9ed8\u8ba4\u662f\u6700\u5927\u5806\uff0c\u6240\u4ee5cmp(x,y)<=>y\u4f18\u5148\u4e8ex\u7684\u6761\u4ef6\uff0c\u8ddfsort\u7684\u521a\u597d\u76f8\u53cd\n__inline__ __attribute((always_inline))    bool operator() (ll y,ll x)\n    {\n        return x<y;\n    }\n};\ntypedef __gnu_pbds::priority_queue<ll,xiao,pairing_heap_tag> heap;\n\n#define N 100010\nheap h[N];\nint f[N];//\u5e76\u67e5\u96c6 \nbool ing[N];//\u5728\u4e0d\u5728\n\nint find(int x)\n{\n    return f[x]==x?x:f[x]=find(f[x]);\n}\n\nint main()\n{ freopen(\"1.in\",\"r\",stdin);\n   fread(ch,1,ch_top,stdin);\n    int n,m;\n    read(n);read(m);\n    int w=n+1;\n    int i;ll key;\n    for (i=1;i<=n;++i)\n    {\n        readl(key);//\u7531\u4e8e\u53cc\u5173\u952e\u5b57:\u503c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\n                           //\u6240\u4ee5key[x]->key[x]*(n+1)+x\n        (key*=w)+=i;\n        h[i].push(key);\n        f[i]=i;ing[i]=1;\n    }\n\n    int x,y;\n    while (m--)\n    {\n        read(i);read(x);\n        if (!ing[x]) \n        {\n            if (i==1) read(y);\n            else printf(\"%d\\n\",-1);\n        } else \n        {\n            x=find(x);\n         if (i==1) \n         {\n             read(y);\n             if (ing[y]&&(y=find(y))!=x) \n             {\n                 h[x].join(h[y]);f[y]=x;\n             }\n         }\n         else \n         {\n              key=h[x].top();\n             printf(\"%d\\n\",key/w);\n             ing[key%w]=0;\n             h[x].pop();\n         }\n        }\n    }\n}\n```\n\n\u624b\u6253\u5de6\u504f\u6811:\n\n```cpp\nstruct\n{\n    int l,r,dis,v;\n}T[N];\nint h[N],f[N];bool ing[N];\n\nint merge(int x,int y)\n{\n    if (T[x].v>T[y].v||(T[x].v==T[y].v&&x>y)) swap(x,y)\n    if (!x) return y;\n    \n    int &l=T[x].l,&r=T[x].r;\n    r=merge(r,y);\n    if (T[l].dis<T[r].dis) swap(l,r)\n    T[x].dis=T[r].dis+1;\n    \n    return x;\n}\n\nint w;ll key;\nvoid pop(int &x)\n{\n    printf(\"%d\\n\",T[x].v);\n    ing[x]=0;\n    \n    x=merge(T[x].l,T[x].r);\n}\n```",
        "postTime": 1480154460,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u6807\u9898\u5199\u7740\u5de6\u504f\u6811\uff0c\u800c\u9898\u89e3\u91cc\u9762\u5168\u90fd\u662f\u914d\u5bf9\u5806\u548c\u6590\u6ce2\u90a3\u5951\u5806\u30022333\n\n\u90a3\u6211\u5c31\u6765\u4e00\u53d1\u5de6\u504f\u6811\u5427\uff0c\u6a21\u677f\u9898\uff0c\u5c31\u4e0d\u5728\u9644\u8bb2\u89e3\u4e86\uff0c\u7f51\u4e0a\u90fd\u6709\u3002\n\n\u56e0\u4e3a\u6211\u5f3a\u884c\u5c01\u88c5\uff0c\u6240\u4ee5\u4ee3\u7801\u6bd4\u8f83\u957f\u6bd4\u8f83\u4e71\u3002\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstring>\n#include <algorithm>\n#include <cstdio>\nusing namespace std;\nconst int MAXN = 100010;\nint n, m;\nbool del[MAXN] = {0};\nstruct Item {\n    int v, idx;\n    bool operator<( const Item &rhs ) const {\n        return v == rhs.v ? idx < rhs.idx : v < rhs.v;\n    }\n};\nItem a[MAXN];\nnamespace Unionset {\n    int pa[MAXN];\n    void init() {\n        for( int i = 0; i < n; ++i ) pa[i] = i;\n    }\n    int find( int u ) {\n        return pa[u] == u ? u : pa[u] = find( pa[u] );\n    }\n}\nnamespace Leftist {\n    struct Node {\n        Item v;\n        int lc, rc, d;\n    };\n    Node nod[MAXN];\n    void init() {\n        for( int i = 0; i < n; ++i ) {\n            nod[i].v = a[i];\n            nod[i].lc = nod[i].rc = -1;\n            nod[i].d = 0;\n        }\n    }\n    int merge( int x, int y ) {\n        if( x == -1 || y == -1 )\n            return x == -1 ? y : x;\n        if( nod[y].v < nod[x].v ) swap(x,y);\n        nod[x].rc = merge( nod[x].rc, y );\n        if( nod[x].lc == -1 || nod[nod[x].lc].d < nod[nod[x].rc].d )\n            swap( nod[x].lc, nod[x].rc );\n        if( nod[x].rc == -1 ) nod[x].d = 0;\n        else nod[x].d = nod[nod[x].rc].d + 1;\n        return x;\n    }\n    int erase( int x ) {\n        return merge( nod[x].lc, nod[x].rc );\n    }\n}\nvoid input() {\n    scanf( \"%d%d\", &n, &m );\n    for( int i = 0; i < n; ++i ) {\n        scanf( \"%d\", &a[i].v );\n        a[i].idx = i;\n    }\n    Unionset::init();\n    Leftist::init();\n}\nvoid solve() {\n    while( m-- ) {\n        int op; scanf( \"%d\", &op );\n        if( op == 1 ) {\n            int x, y; scanf( \"%d%d\", &x, &y ), --x, --y;\n            if( del[x] || del[y] ) continue;\n            x = Unionset::find(x), y = Unionset::find(y);\n            if( x == y ) continue;\n            int nr = Leftist::merge(x,y);\n            Unionset::pa[x] = Unionset::pa[y] = nr;\n        } else {\n            int x; scanf( \"%d\", &x ), --x;\n            if( del[x] ) {\n                printf( \"-1\\n\" );\n                continue;\n            }\n            x = Unionset::find(x);\n            // printf( \"root = %d\\n\", x );\n            printf( \"%d\\n\", a[x].v );\n            int nr = Leftist::erase(x);\n            Unionset::pa[x] = Unionset::pa[nr] = nr;\n            del[x] = true;\n        }\n    }\n}\nint main() {\n    input(), solve();\n    return 0;\n}\n\n```",
        "postTime": 1489583135,
        "uid": 8212,
        "name": "__stdcall",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "# What's it?\n\n\u5de6\u504f\u6811,\u662f\u4e00\u79cd\u53ef\u5e76\u5806,\u53ef\u4ee5\u5728$log$\u7684\u590d\u6742\u5ea6\u5185\u5c06\u4e24\u4e2a\u5de6\u504f\u6811(\u5806)\u5408\u5e76.\n\n\u672c\u6587\u4e2d\u7684\u5806\u90fd\u662f\u6307\u5c0f\u6839\u5806.\n\n# How to use it?\n\n## Some Definitions\n\n**\u5916\u8282\u70b9**:\u82e5\u4e00\u4e2a\u70b9\u6ca1\u6709\u5de6\u513f\u5b50**\u6216**\u53f3\u513f\u5b50,\u5219\u79f0\u8fd9\u4e2a\u8282\u70b9\u4e3a\u5916\u8282\u70b9.(\u4e0d\u4ec5\u662f\u53f6\u5b50\u8282\u70b9)\n\n**\u8ddd\u79bb**:\u4e00\u4e2a\u8282\u70b9\u5230\u5b83\u6700\u8fd1\u7684**\u5916\u8282\u70b9**\u7684\u8ddd\u79bb.\n\n## Some Properties\n\n1. \u9996\u5148\u5b83\u662f\u4e2a\u5806,\u6240\u4ee5\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u5c0f\u4e8e\u5b83\u5b50\u6811\u5185\u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c.~~\u5b83\u4e5f\u662f\u68f5\u4e8c\u53c9\u6811.~~\n\n2. \u90a3\u4e3a\u4ec0\u4e48\u5de6\u504f\u5462?\u56e0\u4e3a\u6211\u4eec\u8bbe\u5b9a\u6bcf\u4e2a\u8282\u70b9\u5de6\u513f\u5b50\u7684\u8ddd\u79bb$\\geq$\u53f3\u513f\u5b50\u7684\u8ddd\u79bb.\n\n3. \u7531\u6027\u8d282\u53ef\u4ee5\u5f97\u51fa,\u4e00\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\u4e3a\u5176**\u53f3\u513f\u5b50**\u7684\u8ddd\u79bb+1.\n\n4. \u53e6\u5916,\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u662f\u5de6\u504f\u6811.\u5b83\u662f\u9012\u5f52\u5b9a\u4e49\u7684.\n\n\u63a5\u4e0b\u6765\u662f\u4e00\u4e9b\u975e\u5e38\u91cd\u8981~~\u975e\u5e38\u5c4e~~\u7684\u6027\u8d28,\u5173\u4e4e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6.\n\n5. \u6839\u7684\u8ddd\u79bb\u4e00\u5b9a\u65f6(\u5047\u8bbe\u4e3a$d$),\u8282\u70b9\u6570\u6700\u5c11\u7684\u5de6\u504f\u6811\u662f\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811,\u5373\u6709$2^{d+1}-1$\u4e2a\u8282\u70b9.\n\n6. \u7531\u6027\u8d285\u53ef\u4ee5\u5f97\u51fa,\u4e00\u9897\u5de6\u504f\u6811\u82e5\u6709$n$\u4e2a\u70b9,\u90a3\u4e48\u8ddd\u79bb\u7684\u6700\u5927\u503c$\\leq \\log_2(n+1)-1$.\n\n\u4e0b\u9762\u53ea\u7ed9\u51fa\u6027\u8d286\u7684\u8bc1\u660e: \n\n\u8bbe\u8282\u70b9\u6570\u4e3a$n$,\u8ddd\u79bb\u4e3a$d$. \u7531\u6027\u8d285:\n$\\Rightarrow n\\geq 2^{d+1}-1 \\Rightarrow d+1\\leq \\log_2(n+1) \\Rightarrow d\\leq \\log_2(n+1)-1$\n\n## Some Operations\n\n### Merge\n\n#### \u53e3\u80e1\n\n\u8fd9\u662f\u5de6\u504f\u6811\u6700\u6838\u5fc3\u7684\u64cd\u4f5c. \u8bbe\u9700\u5408\u5e76\u7684\u4e24\u68f5\u6811\u7684\u6839\u5206\u522b\u4e3a$x,y$.\n\n1. \u82e5$x/y$\u4e3a\u7a7a,\u76f4\u63a5\u8fd4\u56de\u975e\u7a7a\u7684\u4e00\u4e2a.\n\n2. \u82e5$val_x<val_y$,\u4e3a\u4e86\u4fdd\u8bc1\u5927\u7684\u63a5\u5728\u5c0f\u7684\u4e0b\u9762,\u4ea4\u6362$x,y$.\n\n3. ~~\u56e0\u4e3a\u5b83\u5de6\u504f~~,\u6240\u4ee5\u6211\u4eec\u9012\u5f52\u7684\u5c06$x_{rs}$\u4e0e$y$\u5408\u5e76.\n\n4. \u9700\u4fee\u6539$x_{rs}$\u7684\u7236\u4eb2\u4e3a$x$.\n\n5. \u82e5$d_{x_{ls}}<d_{x_{rs}}$,\u4e3a\u4fdd\u8bc1\u5de6\u504f\u6027\u8d28,\u4ea4\u6362$x_{ls},x_{rs}$.\n\n6. \u66f4\u65b0$d_x$\u5e76\u8fd4\u56de$x$.\n\n#### Code\n\n```cpp\nint merge(int x, int y) {\n    if (x == 0 || y ==0) return x+y; //\u5c0f\u6280\u5de7\n    if (t[x].val > t[y].val || t[x].val == t[y].val && x > y) swap(x, y);\n    t[x].rs = merge(t[x].rs, y);\n    t[t[x].rs].fa = x;\n    if (t[t[x].ls].dis < t[t[x].rs].dis) swap(t[x].ls, t[x].rs);\n    t[x].dis = t[t[x].rs].dis+1;\n    return x;\n}\n```\n\u7531\u6027\u8d286\u53ef\u4ee5\u77e5\u9053,\u590d\u6742\u5ea6\u662f$O(d)$\u5373$O(log_2(Size))$.\n\n\u6709\u4e86merge,\u4ec0\u4e48\u64cd\u4f5c\u90fd\u597d\u505a\u4e86.\n\n### Remove\n\n#### \u53e3\u80e1\n\n\u8bbe\u5220\u7684\u8282\u70b9\u4e3a$x$.(\u4e00\u822c\u662f\u6839\u8282\u70b9)\n\n1. \u82e5\u4e00\u4e2a\u70b9\u88ab\u5220\u8fc7\u4e86\u5c31\u76f4\u63a5\u7ed3\u675f.\n\n2. \u5c06$x_{ls},x_{rs}$\u7684\u7236\u4eb2\u8d4b\u4e3a0,\u5373\u4e3a\u65b0\u7684\u6839\u8282\u70b9.\n\n3. \u5c06$x$\u7684\u5de6\u53f3\u513f\u5b50\u7b49\u4fe1\u606f\u6e05\u7a7a.\n\n4. \u5c06$x$\u539f\u6765\u7684\u5de6\u53f3\u513f\u5b50**\u5408\u5e76**.\n\n#### Code\n\n```cpp\nvoid remove(int x) {\n    if (t[x].val < 0) return;\n    int lc = t[x].ls, rc = t[x].rs;\n    t[x].ls = t[x].rs = t[x].dis = 0;\n    t[x].val = -1; //\u82e5\u6709\u8d1f\u6743,\u8bf7\u5343\u4e07\u4e0d\u8981\u8d4b\u6210-1\n    t[lc].fa = t[rc].fa = 0;\n    merge(lc, rc);\n}\n```\n\n### Insert\n\n#### \u53e3\u80e1\n\n\u5c06\u65b0\u8282\u70b9\u5f53\u4f5c\u4e00\u68f5**\u5355\u72ec**\u7684\u5de6\u504f\u6811\uff0c\u521d\u59cb\u5316\u4fe1\u606f\uff0c\u4e0e\u8981\u63d2\u5165\u8fdb\u53bb\u7684\u5de6\u504f\u6811**\u5408\u5e76**\uff0e\n\n#### Code\n\n```cpp\nint insert(int val, int x) {\n    t[++n] = (node){0, 0, n, 0, val};\n    return merge(n, x);\n}\n```\n\n## Complete Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e5;\nconst int inf = 0x3f3f3f3f;\nstruct node {\n    int ls, rs, fa, dis, val;\n} t[maxn+10];\nint n, m;\nint find(int x) {\n    while (t[x].fa)\n        x = t[x].fa;\n    return x;\n}\nint merge(int x, int y) {\n    if (x == 0 || y ==0) return x+y;\n    if (t[x].val > t[y].val || t[x].val == t[y].val && x > y) swap(x, y);\n    t[x].rs = merge(t[x].rs, y);\n    t[t[x].rs].fa = x;\n    if (t[t[x].ls].dis < t[t[x].rs].dis) swap(t[x].ls, t[x].rs);\n    t[x].dis = t[t[x].rs].dis+1;\n    return x;\n}\nvoid remove(int x) {\n    if (t[x].val < 0) return;\n    int lc = t[x].ls, rc = t[x].rs;\n    t[x].ls = t[x].rs = t[x].dis = 0;\n    t[x].val = -1;\n    t[lc].fa = t[rc].fa = 0;\n    merge(lc, rc);\n}\n/*int insert(int val, int x) {\n    t[++n] = (node){0, 0, n, 0, val};\n    return merge(n, x);\n}*/\nint main() {\n    t[0].dis = -1;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i) \n        scanf(\"%d\", &t[i].val);\n    for (int i = 1; i <= m; ++i) {\n        int opt, x, y; \n        scanf(\"%d\", &opt);\n        if (opt == 1) {\n            scanf(\"%d%d\", &x, &y);\n            if (t[x].val < 0 || t[y].val < 0) continue;\n            x = find(x); y = find(y);\n            if (x != y) merge(x, y);\n        } else {\n            scanf(\"%d\", &x); \n            if (t[x].val < 0) printf(\"-1\\n\");\n            else {\n                x = find(x);\n                printf(\"%d\\n\", t[x].val);\n                remove(x);\n            }\n        }\n    }\n    return 0;\n}\n```\n\n# Why TLE?\n\n\u5f53\u4f60\u770b\u5b8c\u4e0a\u9762\u7684\u5185\u5bb9,\u6253\u51fa\u5927\u81f4\u5982\u4e0a\u7684\u4ee3\u7801\u7136\u540e\u5174\u81f4\u52c3\u52c3\u5730\u4ea4\u5230\u6d1b\u8c37\u7684P3377(\u5de6\u504f\u6811\u6a21\u677f\u9898)\u540e,\u4f60\u4f1a\u53d1\u73b0\u6700\u540e\u4e00\u4e2a\u70b9TLE\u4e86,\u800c\u4e14\u5438\u6c27\u4e5f\u6ca1\u6709\u7528.\n\n\u800c\u8fd9\u7ec4\u6570\u636e\u5728\u4e4b\u524d\u662f\u6ca1\u6709\u7684.\u662f\u54ea\u4f4d~~\u597d\u5fc3\u4eba~~\u63d0\u4ea4\u7684hack\u6570\u636e?!\n\n## The reason and The treatment\n\n\u5176\u5b9e\u4f60\u6709\u6ca1\u6709\u53d1\u73b0,\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u7684$find(x)$\u5e76\u6ca1\u6709\u7528**\u8def\u5f84\u538b\u7f29**,\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u8def\u5f84\u538b\u7f29,\u5e76\u628a\u6839\u8282\u70b9\u5220\u9664\u540e,\u5b83\u7684\u540e\u4ee3\u4eec\u4f1a\"\u7fa4\u9f99\u65e0\u9996\".\u5b83\u4eec\u7684\u7236\u4eb2**\u90fd\u6307\u5411\u7740\u4e00\u4e2a\u7a7a\u8282\u70b9**.\n\n```cpp\nint find(int x) {\n    while (t[x].fa)\n        x = t[x].fa;\n    return x;\n}\n```\n\n\u600e\u4e48\u529e\u5462?\n\n\u8def\u5f84\u538b\u7f29\u80af\u5b9a\u662f\u8981\u7684,\u6211\u4eec\u76f4\u80fd\u5728\u5220\u9664\u7684\u65f6\u5019~~\u505a\u4e9b\u624b\u811a~~,\u4fee\u6539\u6210\u5982\u4e0b\u7684\u4ee3\u7801:\n\n```cpp\nvoid remove(int x) {\n    if (t[x].val < 0) return;\n    t[t[x].ls].fa = t[x].ls; //\u6539\u53d81\n    t[t[x].rs].fa = t[x].rs; //\u6539\u53d82\n    t[x].fa = merge(t[x].ls, t[x].rs); //\u6539\u53d83\n    t[x].ls = t[x].rs = t[x].dis = 0;\n    t[x].val = -1;\n}\n```\n\n\u8fd9\u65f6,\u6211\u4eec\u5c06\u88ab\u5220\u7684\u6839\u8282\u70b9\u7684\u7236\u4eb2\u8bbe\u4e3a**\u65b0\u7684\u6839\u8282\u70b9**,\u8fd9\u6837,\u90a3\u4e9b\u6307\u5411\u5b83\u7684\u8282\u70b9\u4f1a\u987a\u7740\u8fd9\u4e2a\u65b9\u5411\u6700\u7ec8\u6307\u5411\u65b0\u7684\u6839.\n\n\u53e6\u5916\u4e5f\u8981\u6ce8\u610f\u5728\u5f00\u59cb\u521d\u59cb\u5316\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2.\n\n## New Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e5;\nconst int inf = 0x3f3f3f3f;\nstruct node {\n    int ls, rs, fa, dis, val;\n} t[maxn+10];\nint n, m;\nint find(int x) {\n    return x == t[x].fa ? x : t[x].fa = find(t[x].fa);\n}\nint merge(int x, int y) {\n    if (x == 0 || y ==0) return x+y;\n    if (t[x].val > t[y].val || t[x].val == t[y].val && x > y) swap(x, y);\n    t[x].rs = merge(t[x].rs, y);\n    t[t[x].rs].fa = x;\n    if (t[t[x].ls].dis < t[t[x].rs].dis) swap(t[x].ls, t[x].rs);\n    t[x].dis = t[t[x].rs].dis+1;\n    return x;\n}\nvoid remove(int x) {\n    if (t[x].val < 0) return;\n    t[t[x].ls].fa = t[x].ls;\n    t[t[x].rs].fa = t[x].rs;\n    t[x].fa = merge(t[x].ls, t[x].rs);\n    t[x].ls = t[x].rs = t[x].dis = 0;\n    t[x].val = -1;\n}\n/*int insert(int val, int x) {\n    t[++n] = (node){0, 0, n, 0, val};\n    return merge(n, x);\n}*/\nint main() {\n    //freopen(\"P3377.in\", \"r\", stdin);\n    //freopen(\"P3377.out\", \"w\", stdout);\n    t[0].dis = t[0].val = -1;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i) {\n        scanf(\"%d\", &t[i].val);\n        t[i].fa = i;\n    }\n    for (int i = 1; i <= m; ++i) {\n        int opt, x, y; \n        scanf(\"%d\", &opt);\n        if (opt == 1) {\n            scanf(\"%d%d\", &x, &y); \n            if (t[x].val < 0 || t[y].val < 0) continue;\n            x = find(x); y = find(y);\n            if (x != y) merge(x, y);\n        } else {\n            scanf(\"%d\", &x); \n            if (t[x].val < 0) printf(\"-1\\n\");\n            else {\n                x = find(x);\n                printf(\"%d\\n\", t[x].val);\n                remove(x);\n            }\n        }\n    }\n    return 0;\n}\n```\n\n\u611f\u8c22\u8fd9\u7ec4hack\u6570\u636e\u8ba9\u6211\u4eec\u53d1\u73b0\u4e86\u95ee\u9898\u5e76\u52a0\u4ee5\u6539\u8fdb!\n\n> *THANK YOU FOR READING THIS!*",
        "postTime": 1553904846,
        "uid": 15702,
        "name": "rhdeng",
        "ccfLevel": 7,
        "title": "[\u7b97\u6cd5] \u5de6\u504f\u6811 (\u6d1b\u8c37 P3377)"
    },
    {
        "content": "~~\u8fdb\u6765\u524d\u8bfb\u4e09\u904d~~\n\n#### \u5f53\u5806\u91cc\u6709\u591a\u4e2a\u6700\u5c0f\u503c\u65f6\uff0c\u4f18\u5148\u5220\u9664\u539f\u5e8f\u5217\u7684\u9760\u524d\u7684\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u540e\u7eed\u64cd\u4f5c1\u5bfc\u81f4WA\u3002\n\n\u6211~~\u5728\u770b\u9898\u89e3\u5230\u65f6\u5019~~\u53d1\u73b0\u5404\u4f4d\u5de8\u4f6c\u7684 pb_ds \u90fd\u5199\u5f97\u6bd4\u8f83\u957f\uff0c~~\u6bd4\u8f83\u597d\u5eb7~~\n\n\u6211\u5c31\u60f3\u81ea\u5df1\u5199\u4e00\u79cd\u5927\u5bb6\u5b8c\u5168\u770b\u4e0d\u61c2\u7684\u963f\u4e09\u4ee3\u7801\uff0c\u4f9b\u5927\u5bb6\u4e86\u89e3\u4e00\u4e0b\u2026\u2026\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/priority_queue.hpp>//\u8fd9\u4e2a\u5934\u6587\u4ef6\u6bd4\u8f83\u7384\u5b66\uff0c\u80cc\u4e00\u4e0b\u5c31\u597d\u4e86\nusing namespace std;\nint n,m,fa[100001];// fa[i] \u7528\u6765\u8bb0\u5f55 i \u7684\u7956\u5148\nint get()\n{\n\tint x;\n\tscanf(\"%d\",&x);\n\treturn x;\n}//\u4e00\u4e2a\u6beb\u65e0\u610f\u4e49\u7684\u8bfb\u5165\uff08\u5e76\u4e0d\u80fd\u52a0\u901f\uff09\nint find(int x)\n{\n\tif(fa[x]==x)\n\t\treturn x;\n\treturn fa[x]=find(fa[x]);\n}//\u5927\u5bb6\u90fd\u61c2\u5f97\u5e76\u5dee\u96c6 find()\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tbool f[n+1]={0};\n\tfor(int i=1;i<=n;i++)\n\t\tfa[i]=i;\n\t__gnu_pbds::priority_queue<pair<int,int>,greater<pair<int,int> > >q[n+1];\n    //\u7384\u5b66\u6570\u7ec4\uff0cpair\u7684\u7b2c\u4e8c\u4e2a\u7528\u6765\u5b58\u653e\u7f16\u53f7\uff0c\u8fd8\u8bb0\u5f97\u8981\u8bfb\u4e09\u904d\u7684\u4e1c\u897f\u5417 \n\tfor(int i=1;i<=n;i++)\n\t\tq[i].push(make_pair(get(),i));\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(get()==1)\n\t\t{\n\t\t\tint x=get(),y=get(),fx=find(x),fy=find(y);\n\t\t\tif(!(f[x]||f[y]||fx==fy))\n\t\t\t{\n\t\t\t\tq[fx].join(q[fy]);\n\t\t\t\tfa[fy]=fx;\n\t\t\t}\n\t\t}//\u60c5\u51b51\uff0c\u5408\u5e76\n\t\telse\n\t\t{\n\t\t\tint x=get();\n\t\t\tif(!f[x])\n\t\t\t{\n\t\t\t\tf[q[find(x)].top().second]=1;\n\t\t\t\tprintf(\"%d\\n\",q[find(x)].top().first);\n\t\t\t\tq[find(x)].pop();\n\t\t\t}\n\t\t\telse\n\t\t\t\tprintf(\"-1\\n\");\n\t\t}//\u60c5\u51b52\uff0c\u67e5\u8be2\u548c\u5220\u9664\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1572179755,
        "uid": 36090,
        "name": "wenzhang",
        "ccfLevel": 0,
        "title": "P3377 \u9898\u89e3"
    },
    {
        "content": "## \u4f5c\u7528\n\n\u652f\u6301\u5220\u9664,\u5408\u5e76,\u67e5\u8be2\u6700\u5927\u6216\u6700\u5c0f\u503c\uff08\u8fd8\u53ef\u4ee5\u67e5\u8be2\u4e2d\u4f4d\u6570\u54e6\uff09\n\n\n\u5355\u6b21\u65f6\u95f4\u590d\u6742\u5ea6$O(log n)$\n\n## \u57fa\u672c\u6982\u5ff5\n\n\n- \u5806\uff1a\u4e8c\u53c9\u6811\n\n- \u7a7a\u8282\u70b9: \u65e0\u5de6\u513f\u5b50\u7684\u8282\u70b9\n\n- \u5927\u6839\u5806: \u5177\u6709\u6bcf\u4e2a\u8282\u70b9\u90fd\u6ee1\u8db3\u8be5\u8282\u70b9\u7684\u6743\u503c\u5927\u4e8e\u7b49\u4e8e\u5979\u7684\u513f\u5b50\u8282\u70b9\u7684\u5806\n\n- \u5c0f\u6839\u5806: \u4e0e\u5927\u6839\u5806 \u76f8\u53cd\u7684\u5806\n\n- \u8282\u70b9\u7684\u8ddd\u79bb: \u8d70\u53f3\u513f\u5b50\u76f4\u5230\u7a7a\u8282\u70b9\u4e3a\u6b62\u6d4f\u89c8\u8fc7\u7684\u8282\u70b9\u6570\n\n- \u5de6\u504f\u6811: \u5de6\u513f\u5b50\u7684\u8ddd\u79bb\u5927\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u8ddd\u79bb\u7684\u5806\n\n## \u6027\u8d28\n\n- \u662f\u4e00\u4e2a\u5927\uff08\u5c0f\uff09\u8ddf\u5806\n\n- \u5de6\u513f\u5b50\u7684\u8ddd\u79bb\u5927\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u8ddd\u79bb\n\n- \u8282\u70b9\u7684\u8ddd\u79bb \u7b49\u4e8e\u8be5\u8282\u70b9\u53f3\u513f\u5b50\u7684\u8ddd\u79bb + 1\uff08\u592a\u6c34 \u4e0d\u89e3\u91ca\uff09\n\n- \u4e00\u4e2a\u6709n\u4e2a\u8282\u70b9\u7684\u5de6\u504f\u6811\u5979\u7684$root$\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7\u4e3a$log(n+1)-1$\n\n\u7531\u6700\u540e\u4e00\u4e2a\u6027\u8d28 \u4fdd\u8bc1\u4e00\u6b21\u5230\u5806\u5e95\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$log$\u7ea7\n## \u5b9e\u73b0\n\n\n### $merge$\n\n\n\u53ea\u9700\u8981\u5b66\u4f1a$merge$ \u5176\u5979\u5c31\u5f88\u7b80\u5355\u4e86\n\n$merge$\u5c31\u662f\u5c06\u4e24\u4e2a\u5806\u5408\u5e76\n\n```cpp\ninline int merge(int u,int v)\n\t{\n\t\tif(!u||!v) return u | v;\n     \t\u81f3\u5c11\u6709\u4e00\u4e2a\u662f0 \u8fd4\u56de\u53e6\u4e00\u4e2a \u7b49\u6548\u4e8eu+v\n\t\tif(heap[u].val > heap[v].val)\n\t\t\tswap(u,v);\n      \n\t\theap[u].r = merge(heap[u].r,v);\n      \u5408\u5e76\n\t\tif(dis[heap[u].l] < dis[heap[u].r])\n\t\t\tswap(heap[u].l,heap[u].r);\n      \u6ee1\u8db3\u6027\u8d282\n\t\tdis[u] = dis[heap[u].r] + 1;\n      \u7b97\u8ddd\u79bb\uff08\u6027\u8d283\uff09\n\t\treturn u;\n\t}\n```\n\n\u597d\u4e86\u5176\u5b9e\u73b0\u5728\u4f60\u5df2\u7ecf\u53ef\u4ee5$A$[\u8fd9\u9053\u9898\u4e86](https://www.luogu.org/problem/P3377)\n\n### $delete$\n\n\u5220\u9664\u4e00\u4e2a\u8282\u70b9 \u7b49\u4ef7\u4e8e \u5408\u5e76\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\n\n### \u67e5\u8be2\u6700\u5927\u6700\u5c0f\u503c\n\n\u6bcf\u4e00\u9897\u5de6\u504f\u6811 \u53ea\u80fd\u7ef4\u62a4\u6700\u5927\u6700\u5c0f\u503c\u4e2d\u7684\u4e00\u4e2a\n\n\u7531\u6027\u8d281\u5f97 \u5806\u7684\u6700\u5927\u6700\u5c0f\u503c\u4e3a\u6839\u7684\u6743\u503c\n\n### \u5e76\u67e5\u96c6\n\n\u7b2cx\u4e2a\u6570\u548c\u7b2cy\u4e2a\u6570\u6240\u5728\u7684\u5c0f\u6839\u5806\u5408\u5e76\n\n\u8fd9\u53e5\u6d3b\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\n\n\u6ce8\u610f\u8981\u8def\u5f84\u538b\u7f29\n\n## $Code$\n\n[\u677f\u5b50\u9898](https://www.luogu.org/problem/P3377)\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#define reg register int\nusing namespace std; \nconst int MAXN = 100005;\nint n,m;\nnamespace leftist_tree\n{\n\tstruct node {int l,r,val;};\n\tnode heap[MAXN];\n\tbool exist[MAXN];\n\tint dis[MAXN],rt[MAXN];\n\tinline void init()\n\t{\n\t\tfor(reg i = 1;i <= n;i++)\n\t\t\tscanf(\"%d\",&heap[i].val),rt[i] = i;\n\t}\n\tinline int merge(int u,int v)\n\t{\n\t\tif(!u||!v) return u | v;\n\t\tif(heap[u].val > heap[v].val)\n\t\t\tswap(u,v);\n\t\theap[u].r = merge(heap[u].r,v);\n\t\tif(dis[heap[u].l] < dis[heap[u].r])\n\t\t\tswap(heap[u].l,heap[u].r);\n\t\tdis[u] = dis[heap[u].r] + 1;\n\t\treturn u;\n\t}\n\tinline int find_set(int x)\n\t{\n\t\tif(rt[x] == x) return x;\n\t\treturn rt[x] = find_set(rt[x]);\n\t}\n}\nusing namespace leftist_tree; \nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tleftist_tree::init();\n\twhile(m--)\n\t{\n\t\tint sit;\n\t\tscanf(\"%d\",&sit);\n\t\tif(sit & 1)\n\t\t{\n\t\t\tint u,v;\n\t\t\tscanf(\"%d%d\",&u,&v);\n\t\t\tif(exist[u]||exist[v]) continue;\n\t\t\tint fu = find_set(u),fv = find_set(v);\n\t\t\tif(fu != fv) rt[fu] = rt[fv] = merge(fu,fv);\n\t\t} else {\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tif(exist[x])\n\t\t\t{\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tx = find_set(x);\n\t\t\tprintf(\"%d\\n\",heap[x].val);\n\t\t\texist[x] = 1;\n\t\t\trt[heap[x].l] = rt[heap[x].r] = rt[x] = merge(heap[x].l,heap[x].r); \n\t\t\theap[x].l = heap[x].r = dis[x] = 0;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n### [\u7a0d\u5fae\u96be\u4e00\u70b9\u7684\u677f\u5b50\u9898](https://www.luogu.org/problem/P4331)\n\n\n\u63d0\u5347\u4e00\u4e0b:\n\n\u5206\u6210\u591a\u4e2a\u4e0d\u4e0b\u964d\u7684\u5b50\u5e8f\u5217\uff0c\u6c42\u51fa\u6bcf\u4e2a\u5b50\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\n\n\u5bf9\u4e8e\u8fde\u7eed\u4e0a\u5347\u7684\u5b50\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\n\n\u6211\u4eec\u628a\u5979\u5408\u5e76\u4e3a\u4e00\u4e2a\u5806 \u518d\u6c42\u4e2d\u4f4d\u6570\n\n### \u6c42\u4e2d\u4f4d\u6570\n\n\u4e00\u4e2a\u5806\u7684\u4e2d\u4f4d\u6570\u7b49\u4e8e\u6839\u7684\u6743\u503c\u7684\u5145\u8981\u6761\u4ef6\u5c31\u662f\n\n\u8fd9\u4e2a\u5806\u53ea\u6709\u6211\u4eec\u8981\u6c42\u5f97\u5806\u7684\u5927\u5c0f\u7684\u4e00\u534a\uff08\u6b64\u65f6\u6b64\u5806\u4ecd\u662f\u5927\uff08\u5c0f\uff09\u6839\u5806\uff09\n\n\u7a0d\u5fae\u60f3\u4e00\u4e0b\u5e94\u8be5\u5c31\u53ef\u4ee5\u7406\u89e3\u4e86\u5427QAQ\n\n### $Code$\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n#define reg register int\nconst int MAXN = 1e6 + 10;\ntypedef long long ll;\nint n,num[MAXN],son[MAXN][2];\ntemplate<typename T>\ninline T Read(T x)\n{\n\tx = 0;\n\tint f = 1;\n\tchar a = getchar();\n\twhile(!isdigit(a)) {if(a == '-') f = -1;a = getchar();} \n\twhile(isdigit(a)) {x = (x << 1) + (x << 3) + (a ^ '0');a = getchar();}\n\treturn x * f;\n}\nnamespace leftist_tree {\n\tstruct node {\n\t\tint size,lef,rig,val,rt;\n\t};\n\tnode heap[MAXN];\n\tint dis[MAXN];\n\tinline int merge(int u,int v) {\n\t\tif(!u||!v) return u | v;\n\t\tif(num[u] < num[v]||(num[u] == num[v]&&v > u)) swap(u,v);\n\t\tson[u][1] = merge(son[u][1],v);\n\t\tif(dis[son[u][0]] < dis[son[u][1]]) swap(son[u][0],son[u][1]);\n\t\tdis[u] = dis[son[u][1]] + 1;\n\t\treturn u;\n\t}\n}\nusing namespace leftist_tree;\ninline void init() {\n\tn = Read(1);\n\tdis[0] = -1;\n\tmemset(heap,0,sizeof(heap));\n\tfor(reg i = 1; i <= n; i++)\n\t{\n\t\tnum[i] = Read(1) - i;\t\n\t}\n}\nint cnt,b[MAXN];\nll ans;\ninline void solve() {\n\tfor(reg i = 1; i <= n; i++) {\n\t\theap[++cnt] = (node){1,i,i,num[i],i};\n\t\twhile(cnt > 1&&heap[cnt - 1].val > heap[cnt].val) {\n        \u5bf9\u4e8e\u8fde\u7eed\u4e0a\u5347\u7684\u5b50\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\n\t\n\t\t\t\u6211\u4eec\u628a\u5979\u5408\u5e76\u4e3a\u4e00\u4e2a\u5806 \u518d\u6c42\u4e2d\u4f4d\u6570\n\t\t\tcnt--;\n\t\t\theap[cnt].rt = merge(heap[cnt].rt,heap[cnt + 1].rt);\n\t\t\theap[cnt].size += heap[cnt + 1].size;\n\t\t\theap[cnt].rig = heap[cnt + 1].rig;\n\t\t\twhile(heap[cnt].size * 2 > heap[cnt].rig - heap[cnt].lef + 2) {\n\t\t\t\theap[cnt].size--;\n\t\t\t\theap[cnt].rt = merge(son[heap[cnt].rt][0],son[heap[cnt].rt][1]);\n\t\t\t}\n          \u53ea\u4fdd\u7559\u4e00\u534a\u5143\u7d20\n\t\t\theap[cnt].val = num[heap[cnt].rt];\n\t\t}\n\t}\n\tfor(reg i = 1; i <= cnt; i++)\n\t\tfor(reg j = heap[i].lef; j <= heap[i].rig; j++) {\n\t\t\tb[j] = heap[i].val;\n\t\t\tans += 1ll * abs(b[j] - num[j]);\n\t\t}\n\tprintf(\"%lld\\n\",ans);\n}\nint main() {\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1570354907,
        "uid": 73992,
        "name": "resftlmuttmotw",
        "ccfLevel": 0,
        "title": "\u7b14\u8bb0\u2014\u2014\u5de6\u504f\u6811"
    },
    {
        "content": "\u5de6\u504f\u6811\u7684\u6a21\u677f\u9898\n---\n\n\u5de6\u504f\u6811($Leftist\\ Tree$)\uff0c\u662f\u4e00\u79cd __\u53ef\u4ee5\u5408\u5e76\u7684\u5806\u72b6\u7ed3\u6784__\uff0c\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\n\n- $Pop\\ x$\uff0c\u5220\u9664\u8282\u70b9$x$\n- $Merge\\ x\\ y$\uff0c\u5408\u5e76\u4e24\u68f5\u5de6\u504f\u6811\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5de6\u504f\u6811\u7684\u8282\u70b9\uff0c\u9700\u8981\u7ef4\u62a4\u4ee5\u4e0b\u503c\n\n- $dist$\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u5230\u5b83\u5b50\u6811\u91cc\u9762\u6700\u8fd1\u7684\u53f6\u5b50\u8282\u70b9\u7684\u8ddd\u79bb\n- $value$\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u7684\u503c\n\n## \u6027\u8d28\n\n- \u4e00\u4e2a\u8282\u70b9\u7684$value$\u5927\u4e8e(\u6216\u5c0f\u4e8e)\u5de6\u53f3\u5b69\u5b50\u7684$value$__*(\u5806\u6027\u8d28)*__ \n- \u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u7684$dist$\u4e0d\u5c0f\u4e8e\u53f3\u5b69\u5b50\u7684$dist$__*(\u5de6\u504f\u6027\u8d28)*__\n- \u4e00\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\u59cb\u7ec8\u7b49\u4e8e\u53f3\u5b69\u5b50+1\n\n## \u5b9e\u73b0\n\n### $Merge$\u64cd\u4f5c\n\n\u9996\u5148\u6211\u4eec\u8bbe\u4e24\u4e2a\u8282\u70b9$x,y$\uff0c$x$\u7684\u6839\u8282\u70b9\u7684\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e$y$\u7684\u6839\u8282\u70b9\uff08\u5426\u5219$swap(x,y)$\uff09\uff0c\u628a$x$\u7684\u6839\u8282\u70b9\u4f5c\u4e3a\u65b0\u6811$Z$\u7684\u6839\u8282\u70b9\uff0c\u5269\u4e0b\u7684\u4e8b\u5c31\u662f\u5408\u5e76$x$\u7684\u53f3\u5b50\u6811\u548c$y$\u4e86\n\n\u5408\u5e76\u4e86$x$\u7684\u53f3\u5b50\u6811\u548c$y$\u540e\uff0c$x$\u5f53$x$\u7684\u53f3\u5b50\u6811\u7684\u8ddd\u79bb\u5927\u4e8e$x$\u7684\u5de6\u5b50\u6811\u7684\u8ddd\u79bb\u65f6\uff0c\u4e3a\u4e86\u7ef4\u62a4\u5de6\u504f\u6027\u8d28\uff0c\u6211\u4eec\u8981\u4ea4\u6362$x$\u7684\u53f3\u5b50\u6811\u548c\u5de6\u5b50\u6811\u3002\u987a\u4fbf\u7ef4\u62a4\u6027\u8d28\u4e09\uff0c\u6240\u4ee5\u76f4\u63a5$dist_x=dist_{rson(x)}+1$\n\n### $Pop$\u64cd\u4f5c\n\n\u7565$...$\n\n```cpp\nstruct LeftistTree {\n    int n, m;\n    struct LeftistTreeNode {\n        int dis, val, rt;\n        int ls, rs;\n        #define ls(x)  tree[x].ls\n        #define rs(x)  tree[x].rs\n        #define dis(x) tree[x].dis\n        #define val(x) tree[x].val\n        #define rt(x)  tree[x].rt\n    }tree[maxn];\n    int merge(int x, int y) {\n        if (!x || !y) return x + y;\n        if (val(x) > val(y) || (val(x) == val(y) && x > y)) {\n            swap(x, y);\n        }\n        rs(x) = merge(rs(x), y);\n        if (dis(ls(x)) < dis(rs(x))) swap(ls(x), rs(x));\n        rt(ls(x)) = rt(rs(x)) = rt(x) = x;\n        dis(x) = dis(rs(x)) + 1;\n        return x;\n    }\n    int get(int x) { //\u8def\u5f84\u538b\u7f29\n        return rt(x) == x ? x : rt(x) = get(rt(x));\n    }\n    void pop(int x) {\n        val(x) = -1;\n        rt(ls(x)) = ls(x); rt(rs(x)) = rs(x);\n        rt(x) = merge(ls(x), rs(x));\n    }\n    void init() {\n        dis(0) = -1;\n        for (int i = 1; i <= n; ++i) {\n            rt(i) = i;\n            val(i) = read();\n        }\n    }\n    void SolveMerge(int x, int y) {\n        if (val(x) == -1 || val(y) == -1) return;\n        int fx = get(x), fy = get(y);\n        if (fx != fy) {\n            rt(fx) = rt(fy) = merge(fx, fy);\n        }\n    }\n    void SolvePop(int x) {\n        if (val(x) == -1) puts(\"-1\");\n        else printf(\"%d\\n\", val(get(x))), pop(get(x));\n    }\n};\n```\n\u6240\u4ee5\u5bf9\u5e94\u9898\u76ee\u7684\u4e24\u4e2a\u64cd\u4f5c\u8fdb\u884c\u5c31\u53ef\u4ee5\u5566",
        "postTime": 1560498498,
        "uid": 141791,
        "name": "Tony_Wong",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u6240\u8c13\u7684\u5de6\u504f\u6811\uff0c\u662f\u4e00\u79cd\u53ef\u5e76\u5806\u7684\u5b9e\u73b0\u3002\n\n\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u80fd\u591f\u652f\u6301\u9ad8\u6548\u7684\u5806\u5408\u5e76\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u67e5\u8be2\u8282\u70b9\u7b49\u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0d\u540c\u4e8e\u5e73\u8861\u6811\uff0c\u5b83\u7684\u7ed3\u6784\u662f\u4e0d\u5e73\u8861\u7684\u3002\n\n\u5de6\u504f\u6811\u6ee1\u8db3\u5982\u4e0b\u4e24\u6761\u57fa\u672c\u6027\u8d28\uff1a\n\n**1. \u5806\u7684\u6027\u8d28**\n\n\t\u8fd9\u4e5f\u5c31\u662f\u8bf4\u5de6\u504f\u6811\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e/\u5c0f\u4e8e\u5b83\u7236\u8282\u70b9\u7684\u503c\u3002\n    \n**2. \u5bf9\u4e8e\u4efb\u610f\u8282\u70b9\uff0c\u5176\u5de6\u513f\u5b50\u8ddd\u79bb\u4e0d\u5c0f\u4e8e\u53f3\u513f\u5b50\u8ddd\u79bb\uff08\u5de6\u504f\u6027\u8d28\uff09**\n\n\t\u8fd9\u91cc\u9700\u8981\u5148\u5f15\u5165\u8ddd\u79bb\u7684\u6982\u5ff5\u3002\n    \u4e00\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u6307\u5b83\u5230\u540e\u4ee3\u4e2d\u6700\u8fd1\u7684\u5916\u8282\u70b9\uff08\u513f\u5b50\u6570\u91cf\u5c11\u4e8e2\uff09\u6240\u7ecf\u8fc7\u7684\u8fb9\u6570\u3002\n    \n\u6709\u4e86\u4e0a\u9762\u4e24\u6761\u6027\u8d28\uff0c\u6211\u4eec\u4e0d\u96be\u8bc1\u660e\u4e0b\u9762\u8fd9\u6761\u6027\u8d28\uff1a\n\n**3. \u5bf9\u4e8e\u4efb\u610f\u8282\u70b9\uff0c\u5176\u8ddd\u79bb\u7b49\u4e8e\u5176\u53f3\u513f\u5b50\u8ddd\u79bb+1**\n\n\t\u5176\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u5de6\u513f\u5b50\u8ddd\u79bb\u5927\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u8ddd\u79bb\uff0c\u6240\u4ee5\u6700\u8fd1\u7684\u5916\u8282\u70b9\u5fc5\u7136\u5728\u53f3\u513f\u5b50\u91cc\u3002\n    \n\u6709\u4e86\u8fd9\u4e9b\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7740\u624b\u4e0e\u5176\u64cd\u4f5c\u4e86\u3002\n\n------------\n\n### \u5408\u5e76\u64cd\u4f5c\n\n\u5408\u5e76\u64cd\u4f5c\u5c06\u4e24\u4e2a\u5de6\u504f\u6811\u5408\u5e76\u5728\u4e00\u8d77\u3002\n\n\u5047\u5982\u4e24\u68f5\u6811\u4e2d\u6709\u7a7a\u6811\uff0c\u90a3\u4e48\u8fd4\u56de\u53e6\u4e00\u9897\u5373\u53ef\u3002\n\n\u5426\u5219\u53d6\u6839\u8282\u70b9\u66f4\u5927/\u5c0f\u7684\u90a3\u4e00\u9897\uff0c\u7136\u540e\u5c06\u53e6\u4e00\u9897\u5e76\u5230\u4ed6\u7684\u53f3\u513f\u5b50\u4e0a\u53bb\u3002\n\n\u7531\u4e8e\u5e76\u5b8c\u4e4b\u540e\u53f3\u513f\u5b50\u8ddd\u79bb\u53ef\u80fd\u6bd4\u5de6\u513f\u5b50\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7279\u5224\u662f\u5426\u4ea4\u6362\u513f\u5b50\u3002\n\n\u6700\u540e\u8fd8\u8981\u66f4\u65b0\u4e00\u4e0b\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u3002\n\n```cpp\nint merge (int x,int y) {\n\tif (!x||!y) return x+y;\n    if (val[x]>val[y]) swap(x,y);\n    heap[x].rs=merge(heap[x].rs,y);\n    if (heap[heap[x].rs].size>heap[heap[x].ls].size) swap(heap[x].ls,heap[x].rs);\n    heap[x].dis=heap[heap[x].rs].dis+1;\n    return x;\n}\n```\n\n------------\n\n### \u5220\u9664\u64cd\u4f5c\n\n\u6ca1\u5220\u4e48\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u5c06\u5de6\u53f3\u513f\u5b50\u5e76\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\nint erase (int x) {\n\tx=merge(heap[x].ls,heap[x].rs);\n    return x;\n}\n```\n\n------------\n\n### \u590d\u6742\u5ea6\u8bc1\u660e\n\n\u6700\u540e\u662f\u5de6\u504f\u6811\u5408\u5e76\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u8bc1\u660e\u3002\n\n\u7531\u4e8e\u6211\u4eec\u6bcf\u4e00\u6b21\u9012\u5f52\u90fd\u5408\u5e76\u53f3\u5b50\u6811\uff0c\u800c\u4e00\u9897\u6811\u7684\u8ddd\u79bb\u53d6\u51b3\u4e8e\u5176\u53f3\u5b50\u6811\u3002\n\n\u6240\u4ee5\u6700\u540e\u4e00\u9897\u6811\u88ab\u5206\u89e3\u7684\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7\u5176\u8ddd\u79bb\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u4f1a\u8d85\u8fc7$log(n+1)-1$\u6b21\u3002\n\n\u90a3\u4e48\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u5408\u5e76\u590d\u6742\u5ea6\u4e3a$O(log(n_a+1)+log(n_b+1)-2)$\u5373$O(log(a)+log(b))$\u4e5f\u5c31\u662f$O(log(ab))$",
        "postTime": 1537955329,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u4e8e\u662f\u6211\u4eec\u8fd9\u6b21\u8fce\u6765\u4e86pbds\u7684priority\\_queue\uff08\u8bdd\u8bf4\u6700\u8fd1\u4e00\u76f4\u5728\u5199\u8fd9\u4e2a\uff09\n\n\u4e8e\u662f\u5728\u6709join(merge)\u7684\u60c5\u51b5\u4e0b\u5e94\u8be5\u662f\u8dd1\u7684\u66f4\u5feb\u7684\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u6807\u7b7epairing\\_heap\\_tag\uff0c\u56e0\u4e3a\u5b83\u7684push\u548cjoin\u64cd\u4f5c\u662fO(1)\u7684\uff08\u4e0d\u77e5\u4e3a\u4f55\u697c\u4e0b\u7684\u5199\u7684pairing\\_heap\\_tag\u5e38\u6570\u5927...68ms\uff09\u3002\n\n\u7136\u540e\u6839\u636e\u9898\u9762\u63cf\u8ff0\u6ce8\u610foperator\u7684\u5b9a\u4e49\uff0c\u7136\u540epbds\u5806\u7684\u5b9a\u4e49\u7684\u7b26\u53f7\u662f\u53cd\u7684\u3002\n\n\u540c\u65f6\u5728\u5916\u9762\u6211\u4eec\u7528\u5e76\u67e5\u96c6\u8f85\u52a9\u627e\u5230\u5806\u3002\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <ext/pb_ds/priority_queue.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n#define MAXN 100005\ninline char get_char(){\n    static char buf[5000001], *p1 = buf, *p2 = buf + fread(buf, 1, 5000000, stdin);\n    return p1 == p2 ? EOF : *p1 ++;\n}\ninline int read(){\n    int num = 0;\n    char c, sf = 1;\n    while (isspace(c = get_char()));\n    if(c == '-') sf = -1, c = get_char();\n    while (num = num * 10 + c - 48, isdigit(c = get_char()));\n    return num * sf;\n}\nint father[MAXN];\ninline int Get_Father(int u){\n    return father[u] == u ? u : father[u] = Get_Father(father[u]);\n}\nstruct Node{\n    int v, id;\n    Node(int a, int b){\n        v = a, id = b;\n```\n}//\u5728\u5904\u7406\u91cd\u590d\u6570\u636e\u7684\u65f6\u5019\u9700\u8981\u8fd9\u4e2a\u677f\u5b50\uff08\u6b64\u9898\u53ef\u4ee5\u6807\u8bb0\u5806\u7684\u4f4d\u7f6e\uff09\n\n\n\n```cpp\n    bool operator < (Node tar) const {\n        return v == tar.v ? id > tar.id : v > tar.v;//priority\u9700\u8981\u53cd\u5411\u5b9a\u4e49\uff0c\u6ce8\u610f\u9898\u4e2d\u5927\u5c0f\u5b9a\u4e49\u8981\u6c42\n    }\n};\ntypedef __gnu_pbds::priority_queue<Node, less<Node>, pairing_heap_tag> Heap;\nHeap stl_heap[MAXN];\nHeap::iterator itx, ity;\nbool del[MAXN];\nint main(){\n    int n = read(), m = read();\n    for(int i = 1; i <= n; i++){\n        Node data(read(), i);\n        father[i] = i;\n        stl_heap[i].push(data);\n    }\n    for(int i = 1; i <= m; i++){\n        int cons = read();\n        if(cons & 1){\n            int x = read(), y = read(), fx = Get_Father(x), fy = Get_Father(y);\n            if(fx == fy || del[x] || del[y]) continue;\n            stl_heap[fx].join(stl_heap[fy]);\n            father[fy] = fx;\n        } else {\n            int x = read(), fx = Get_Father(x);\n            if(del[x] || stl_heap[fx].empty()) puts(\"-1\");\n            else {\n                Node data = stl_heap[fx].top();\n                stl_heap[fx].pop();\n                del[data.id] = true;\n                printf(\"%d\\n\", data.v);\n            }\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1514372917,
        "uid": 43464,
        "name": "Creeper_LKF",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u4e4b\u524d\u65e0\u804a\u5b66\u7684\u4e8c\u9879\u5806\uff0c\u6302noip\u4e4b\u524d\u653e\u4e0a\u6765\u5427\n\n\u6bcf\u4e2a\u5806\u6709\u4e00\u4e2a\u6839\u8868\uff08\u6709\u5e8f\uff0c\u6309\u5ea6\u5927\u5c0f\u6392\u5217\uff09\uff0c\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u4e3a2^k\uff08\u5ea6\uff09\uff0c\u6839\u8868\u4e2d\u7684k\u4e92\u4e0d\u76f8\u540c\n\n\u5408\u5e76\u6839\u8868\u65f6\u8981\u5408\u5e76\u5ea6\u76f8\u540c\u7684\u6839\n\n\u5220\u9664\u8981\u627e\u5230\u6700\u5c0f\u503c\u6240\u5728\u7684\u5757\uff0c\u628a\u8fd9\u4e2a\u5757\u62c6\u6210\u4e00\u4e2a\u6839\u8868\u518d\u4e0e\u539f\u6839\u8868\u5408\u5e76\n\n\u63d2\u5165\u76f4\u63a5\u5408\u5e76\u5c31\u597d\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\n#define File(S) freopen(S\".in\",\"r\",stdin),freopen(S\".out\",\"w\",stdout)\n#define gec getchar\nusing namespace std;\ntypedef long long ll;\nchar ch;\nbool fl;\ntemplate <typename Typeread>\nvoid read(Typeread &a){\n    for(fl=0,ch=gec();ch<'0'||ch>'9';ch=gec()) fl|=(ch=='-');\n    for(a=0;ch>='0'&&ch<='9';ch=gec())a=((a+(a<<2))<<1)+(ch^'0');\n    a=fl?-a:a;\n}\nconst int N=1e6+10;\nnamespace BinomialHeap{\n    const int N=1e6+10;\n    struct BinomialNode{\n        BinomialNode(){}\n        BinomialNode(int Key):Key(Key),Degree(1){Ch=next=0;mark=0;}\n        int Key,Degree;\n        BinomialNode *Ch,*next;\n        bool mark;\n    }node[N];\n    BinomialNode *a[20],*b[20],*last,*now;\n    int atop,btop;\n    int Node=0;\n    inline BinomialNode*Merge(BinomialNode*x,BinomialNode*y){\n        if(y->Key<x->Key||(y->Key==x->Key&&y<x)) swap(x,y);\n        y->next=x->Ch;x->Ch=y;x->Degree++;\n        return x;\n    }\n    inline BinomialNode*Unite(BinomialNode*x,BinomialNode*y){\n        if(!x||!y)return x?x:y;\n        atop=btop=0;\n        BinomialNode *last=NULL,*now;\n        for(BinomialNode *i=x;i;i=i->next) a[++atop]=i;\n        for(BinomialNode *i=y;i;i=i->next) b[++btop]=i;\n        while(atop||btop){\n            if(atop&&(!btop||a[atop]->Degree<=b[btop]->Degree))now=a[atop--];\n            else now=b[btop--];\n            if(last&&last->Degree==now->Degree){\n                BinomialNode *Pre=last->next;last->next=0;\n                now=Merge(last,now);last=Pre; \n            }\n            now->next=last;last=now;\n        }\n        return last;\n    }\n    inline BinomialNode *Set(int Key){\n        node[++Node]=BinomialNode(Key);\n        return &node[Node];\n    } \n    inline BinomialNode *GetMin(BinomialNode*x){\n        BinomialNode *Ans=NULL;\n        for(BinomialNode*i=x;i;i=i->next)\n        if(!Ans||Ans->Key>i->Key)Ans=i;\n        return Ans;\n    }\n    int DelMin(int);\n}\nnamespace UnionSet{\n    const int N=1e6+10;\n    int f[N];\n    int F,Mv,Fa,Fx,Fy;\n    inline int Getf(int i){\n        for(F=i;f[F]!=F;F=f[F]);\n        for(Mv=i;f[Mv]!=Mv;Mv=Fa)Fa=f[Mv],f[Mv]=F;\n        return F;\n    }\n    inline bool Unite(int x,int y){\n        Fx=Getf(x),Fy=Getf(y);\n        if(Fx==Fy)return 0;\n        f[Fy]=Fx;return 1;\n    }\n    inline void Set(int Size){\n        for(int i=1;i<=Size;i++)f[i]=i;\n    }\n}\nint n,m;\nint key,Type,x,y,fx,fy;\nBinomialHeap::BinomialNode*H[N],*vec[N];\ninline int BinomialHeap::DelMin(int p){\n    BinomialNode*x=H[p];\n    BinomialNode*Min=BinomialHeap::GetMin(x);\n    Min->mark=1;\n    if(Min==x)x=Min->next;\n    else{\n        BinomialNode *i;\n        for(i=x;i->next!=Min;i=i->next);\n        i->next=Min->next; \n    }\n    H[p]=Unite(x,Min->Ch);\n    return Min->Key;\n}\nint main()\n{\n    read(n);read(m);\n    for(int i=1;i<=n;i++){\n        read(key);\n        vec[i]=H[i]=BinomialHeap::Set(key);\n    }\n    UnionSet::Set(n);\n    for(int i=1;i<=m;i++){\n        read(Type);read(x);\n        if(Type==2){\n            if(vec[x]->mark) printf(\"-1\\n\");\n            else printf(\"%d\\n\",BinomialHeap::DelMin(UnionSet::Getf(x)));\n        }\n        else{\n            read(y);\n            if(!vec[x]->mark&&!vec[y]->mark){\n                 fx=UnionSet::Getf(x),fy=UnionSet::Getf(y);\n                 if(fx!=fy){\n                    H[fx]=BinomialHeap::Unite(H[fx],H[fy]);\n                    UnionSet::f[fy]=fx;\n                }\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1510209264,
        "uid": 16975,
        "name": "tswdfop233",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "\u5de6\u504f\u6811\u6a21\u677f.....\n\n\u6211\u4e5f\u4e0d\u77e5\u9053\u54ea\u4e2a\u5de6\u6487\u5b50\u53d1\u660e\u7684\u8fd9\u4e2a\u4e1c\u897f....\n\n\u770b\u56fd\u5bb6\u961f\u8bba\u6587\u5b66\u7684....\n\n\u5728\u9898\u89e3dalao\u7684\u6307\u5bfc\u4e0b\u4e71\u6253\u4e00\u53d1....\n\n\u6211\u7684\u5fc3\u613f\u662f....\u4e16\u754c\u548c\u5e73.....\n\n\n```cpp\n{df016}\nvar i,j,k,n,m,x,y,s,tt,id,xx,yy:longint;\n    left,right,v,fa,dis:array[0..300007]of longint;\nfunction getfa(x:longint):longint;\nbegin\n    while fa[x]<>0 do x:=fa[x];\n    exit(x);\nend;\nprocedure swap(var x,y:longint);\nvar t:longint;\nbegin\n    t:=x; x:=y; y:=t;\nend;\nfunction Merge(r1,r2:longint):longint;\nbegin\n    if (r1=0)or(r2=0) then exit(r1+r2);//\u4efb\u4f55\u4e00\u4e2a\u6839\u8282\u70b9\u4e3a\u96f6\uff0c\u65b0\u7684\u6839\u8282\u70b9\u5c31\u662f\u975e\u96f6\u7684\u90a3\u4e2a \n    if (v[r1]>v[r2])or(v[r1]=v[r2])and(r1>r2) then swap(r1,r2); //\u9ed8\u8ba4r1\u4e3a\u65b0\u7684\u6839\u8282\u70b9 \n    right[r1]:=Merge(right[r1],r2); //\u628ar2\u548cr1\u7684\u53f3\u5b50\u6811\u5408\u5e76\u4e00\u4e0b \n    fa[right[r1]]:=r1;//\u6807\u8bb0r1\u53f3\u5b50\u6811\u6839\u8282\u70b9\u662fr1\n    if dis[left[r1]]<dis[right[r1]] then swap(left[r1],right[r1]); \n    //\u53f3\u5b50\u6811\u8ddd\u79bb\u5927\u4e8e\u5de6\u5b50\u6811\uff0c\u4ea4\u6362\u4f7f\u5f97\u5b83\u4fdd\u6301\u6b63\u786e\u7684\u6027\u8d28\n    dis[r1]:=dis[right[r1]]+1;\n    exit(r1);\nend;\nprocedure delete(r1:longint);\nbegin\n    v[r1]:=-1;\n    fa[left[r1]]:=0;\n    fa[right[r1]]:=0;\n    tt:=Merge(left[r1],right[r1]);\nend;\nbegin\n    readln(n,m);\n    dis[0]:=-1;\n        for i:=1 to n do read(v[i]);\n    for i:=1 to m do\n     begin\n     read(id);\n     if id=1 then\n        begin\n        readln(x,y);\n        if (v[x]=-1)or(v[y]=-1) then continue;\n        xx:=getfa(x); yy:=getfa(y);\n        if (xx<>yy)or(xx=0)and(yy=0) then tt:=Merge(xx,yy);\n        end;\n     if id=2 then\n        begin\n        readln(x);\n        if v[x]=-1 then begin writeln(-1); continue; end;\n        xx:=getfa(x);\n        writeln(v[xx]);\n        delete(xx);\n        end\n     end;\nend.\n```",
        "postTime": 1504254358,
        "uid": 24716,
        "name": "Beginner_df016",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3377 \u3010\u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\u3011"
    },
    {
        "content": "[\u5f88\u5bf9\u52b2\u7684\u659c\u5806\u3001\u5de6\u504f\u6811\u7b80\u660e\u6559\u7a0b](http://www.cnblogs.com/gdc-destinies/p/8377092.html)\n\n\n[\u5e76\u4e0d\u5bf9\u52b2\u7684\u659c\u5806](http://www.cnblogs.com/xzyf/p/8378223.html)  [\u5e76\u4e0d\u5bf9\u52b2\u7684\u5de6\u504f\u6811](http://www.cnblogs.com/xzyf/p/8378486.html)\n\n\n\n\u5b83\u4eec\u662f\u53ef\u5e76\u5806\u7684\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\n\n\n\uff08\u5047\u88c5\u4e8c\u53c9\u5806\u53ea\u5305\u62ec\u5c0f\u6839\u5806\u3002\uff09\n\n\n\u4e8c\u53c9\u5806\u8be5\u5982\u4f55\u5408\u5e76\uff1f\u5148\u60f3\u4e00\u79cd\u66b4\u529b\u7684\u3002\n\n\n\u73b0\u5728\u6709\u6839\u7684\u952e\u503c\u8f83\u5c0f\u7684\u4e8c\u53c9\u5806A\uff0c\u952e\u503c\u8f83\u5927\u7684\u4e8c\u53c9\u5806B\u3002\n\n\n\u5728\u5408\u5e76\u540e\uff0cA\u7684\u6839\u80af\u5b9a\u8fd8\u662f\u6839\u3002\u82e5A\u7684\u5de6\u3001\u53f3\u5b50\u6811\u90fd\u4e0d\u4e3a\u7a7a\u7684\u8bdd\uff0c\u5219\u53ef\u4ee5\u968f\u4fbf\u9009\u4e00\u4e2a\uff0c\u518d\u5c06\u8fd9\u4e2a\u5806\u4e0eB\u5408\u5e76\u3002\n\n\n\u9012\u5f52\u5730\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u5de6\u3001\u53f3\u5b50\u6811\u4e2d\u6709\u4e00\u65b9\u4e3a\u7a7a\uff0c\u76f4\u63a5\u63a5\u8fc7\u53bb\u5c31\u884c\u4e86\u3002\n\n\n\u7136\u800c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u4f1a\u5f97\u5230\u4fdd\u969c\uff0c\u56e0\u4e3a\u6bcf\u6b21\u201c\u968f\u4fbf\u9009\u201d\u7684\u90a3\u4e00\u4e2a\u53ef\u80fd\u66f4\u6df1\u3002\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u7384\u5b66\u4e86\u3002\n\n\n\u659c\u5806\u5219\u662f\u5728\u66b4\u529b\u7684\u57fa\u7840\u4e0a\u6709\u4e00\u4e9b\u4fee\u6539\u3002\u6bcf\u6b21\u5fc5\u9009\u53f3\uff08\u6216\u5de6\uff09\u5b50\u6811\u5408\u5e76\uff0c\u7136\u540e\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\u3002\u8fd9\u6837\u4e0b\u6b21\u5c31\u8f6e\u5230\u8fd9\u6b21\u6ca1\u80fd\u5408\u5e76\u7684\u5b50\u6811\u4e0e\u4e4b\u5408\u5e76\u4e86\u3002\n\n\n\u8fd9\u542c\u4e0a\u53bb\u548c\u66b4\u529b\u533a\u522b\u4e0d\u5927\uff0c\u8fd8\u6709\u90a3\u4e48\u4e00\u4e9b\u4e9b\u7684\u626f\u3002\u4f46\u662f\u7c7b\u4f3c\u4e8esplay\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u644a\u5374\u662fO(log n)\u7684\u3002\u81f3\u4e8e\u8bc1\u660e\uff0c\u7c7b\u4f3c\u4e8esplay\uff0c\u5e76\u4e0d\u5bf9\u52b2\u7684\u4eba\u5e76\u4e0d\u77e5\u9053\uff0c\u5c31\u611f\u6027\u7406\u89e3\u5427\u3002\n\n\n\u52a0\u70b9\u64cd\u4f5c\u76f8\u5f53\u4e8e\u4e0e\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u659c\u5806\u5408\u5e76\u3002\n\n\n\u5220\u9664\u76f8\u5f53\u4e8e\u53bb\u6389\u5806\u9876\u5143\u7d20\uff0c\u518d\u5c06\u5b83\u7684\u5de6\u3001\u53f3\u5b50\u6811\u5408\u5e76\u3002\n\n\n\n\n```cpp\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n#define maxn 100010\nusing namespace std;\nint read()\n{\n    int f=1,x=0;char ch=getchar();\n    while(isdigit(ch)==0 && ch!='-')ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nvoid write(int x)\n{\n    int ff=0;char ch[15];\n    if(x<0)\n    {\n        x=-x;\n        putchar('-');\n    }\n    while(x)ch[++ff]=(x%10)+'0',x/=10;\n    if(ff==0)putchar('0');\n    while(ff)putchar(ch[ff--]);\n    putchar('\\n');\n}\nstruct node\n{\n    int key,ls,rs,dis;\n}xx[maxn];\nint fa[maxn],n,q;\nint x,y,l,r,tx,ty; \nbool cmp(int _1,int _2)//Smaller.\n{\n    return xx[_1].key==xx[_2].key?_1<_2:xx[_1].key<xx[_2].key;\n}\nint f(int x){return fa[x]<0?x:f(fa[x]);} \nint merge(int A,int B) \n{\n    if(!A || !B)return A+B;\n    if(!cmp(A,B))swap(A,B);\n    xx[A].rs=merge(xx[A].rs,B);\n    fa[xx[A].rs]=A;\n    swap(xx[A].ls,xx[A].rs);\n    return A;\n}\nvoid getit()\n{\n    x=read(),y=read();\n    if(xx[x].key<0 || xx[y].key<0)return;\n    tx=f(x),ty=f(y);\n    if(tx==ty)return;\n    merge(tx,ty);\n}\nvoid delmin(int u)\n{\n    l=xx[u].ls,r=xx[u].rs;\n    xx[u].key=fa[l]=fa[r]=-1;\n    merge(l,r);\n}\nvoid ask()\n{\n//    printfa();\n    x=read();\n    if(xx[x].key==-1){write(-1);return;}\n    tx=f(x);\n    write(xx[tx].key);\n    delmin(tx);\n//    printfa();\n}\nvoid work()\n{\n    n=read(),q=read();\n    xx[0].dis=-1;\n    memset(fa,-1,sizeof(fa));\n    for(int i=1;i<=n;i++)\n        xx[i].key=read();\n    int f;\n    while(q--)\n    {\n        f=read();\n        if(f==1)\n            getit();\n        else \n            ask();\n    }\n}\nint main()\n{\n    work();\n    return 0;\n}\n```\n\u659c\u5806\u7684\u7f3a\u70b9\u5728\u4e8e\uff0c\u6bcf\u6b21\u5408\u5e76\u7684\u5806\u5927\u5c0f\u4e0d\u540c\uff0c\u65e0\u6761\u4ef6\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\u53ef\u80fd\u9047\u5230\u67d0\u4e9b\u5751\u5b59\u5b50\u7684\u6570\u636e\uff0c\u590d\u6742\u5ea6\u4f1a\u53d8\u5f97\u7384\u5b66\u3002\n\n\u5de6\u504f\u6811\u662f\u5728\u659c\u5806\u4e0a\u6709\u6240\u6539\u8fdb\u7684\u3002\u6839\u636e\u659c\u5806\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u6ce8\u610f\u5230\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u7b2c\u4e00\u4e2a\u81f3\u591a\u4e00\u4e2a\u5b50\u6811\u7684\u70b9\u5230\u6839\u7684\u8ddd\u79bb\u3002\n\n\n\u628a\u5b83\u79f0\u4e3adis\uff0c\u90a3\u4e48\u5f53\u53f3\u5b50\u6811\u7684dis\u5927\u4e8e\u5de6\u5b50\u6811\u7684dis\u65f6\u624d\u6709\u5fc5\u8981\u4ea4\u6362\u3002\n\n\n\u597d\u50cf\u6ca1\u90a3\u4e48\u7384\u5b66\u4e86\u5462\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u81f3\u591a\u4e00\u4e2a\u5b50\u6811\u7684\u70b9\u7684dis\u4e3a0\uff0c\u800c\u7a7a\u8282\u70b9\u7684dis\u4e3a-1\u3002\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n#define maxn 100010\nusing namespace std;\nint read()\n{\n    int f=1,x=0;char ch=getchar();\n    while(isdigit(ch)==0 && ch!='-')ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nvoid write(int x)\n{\n    int ff=0;char ch[15];\n    if(x<0)\n    {\n        x=-x;\n        putchar('-');\n    }\n    while(x)ch[++ff]=(x%10)+'0',x/=10;\n    if(ff==0)putchar('0');\n    while(ff)putchar(ch[ff--]);\n    putchar('\\n');\n}\nstruct node\n{\n    int key,ls,rs,dis;\n}xx[maxn];\nint fa[maxn],n,q;\nint x,y,l,r,tx,ty; \nbool cmp(int _1,int _2)//Smaller.\n{\n    return xx[_1].key==xx[_2].key?_1<_2:xx[_1].key<xx[_2].key;\n}\nint f(int x){return fa[x]<0?x:f(fa[x]);} \nint merge(int A,int B) \n{\n    if(!A || !B)return A+B;\n    if(!cmp(A,B))swap(A,B);\n    xx[A].rs=merge(xx[A].rs,B);\n    fa[xx[A].rs]=A;\n    if(xx[xx[A].ls].dis<xx[xx[A].rs].dis)\n        swap(xx[A].ls,xx[A].rs);\n    xx[A].dis=xx[xx[A].rs].dis+1;\n    return A;\n}\nvoid getit()\n{\n    x=read(),y=read();\n    if(xx[x].key<0 || xx[y].key<0)return;\n    tx=f(x),ty=f(y);\n    if(tx==ty)return;\n    merge(tx,ty);\n}\nvoid delmin(int u)\n{\n    l=xx[u].ls,r=xx[u].rs;\n    xx[u].key=fa[l]=fa[r]=-1;\n    merge(l,r);\n}\nvoid ask()\n{\n    x=read();\n    if(xx[x].key==-1){write(-1);return;}\n    tx=f(x);\n    write(xx[tx].key);\n    delmin(tx);\n}\nvoid work()\n{\n    n=read(),q=read();\n    xx[0].dis=-1;\n    memset(fa,-1,sizeof(fa));\n    for(int i=1;i<=n;i++)\n        xx[i].key=read();\n    int f;\n    while(q--)\n    {\n        f=read();\n        if(f==1)\n            getit();\n        else \n            ask();\n    }\n}\nint main()\n{\n    work();\n    return 0;\n}\n```\n\n\u5bf9\u4e8e\u6b64\u9898\u800c\u8a00\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5e76\u67e5\u96c6\u4e0d\u80fd\u52a0\u8def\u5f84\u538b\u7f29\u3002\u8fd9\u662f\u56e0\u4e3a\u8981\u4e0d\u7136\u5806\u5206\u88c2\u65f6\u5c31\u4e0d\u80fd\u627e\u5230\u7684\u3002\u800c\u4e14\u4e0d\u52a0\u8def\u5f84\u538b\u7f29\u7684\u590d\u6742\u5ea6\u4e5f\u4e0d\u662f\u5f88\u9ad8\uff0c\u624dlog n\u800c\u5df2",
        "postTime": 1517390240,
        "uid": 33242,
        "name": "echo6342",
        "ccfLevel": 0,
        "title": "\u5e76\u4e0d\u5bf9\u52b2\u7684\u659c\u5806\u3001\u5de6\u504f\u6811"
    }
]