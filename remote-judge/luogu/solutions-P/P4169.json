[
    {
        "content": "## Solution\n- \u4e22\u4e00\u53d1 CDQ\u5206\u6cbb \u7684\u89e3\u6cd5\u3002\n- \u5148\u8003\u8651\u56de\u5fc6\u51fa\u6765\u7684\u70b9\u90fd\u5728\u8be2\u95ee\u7684\u70b9\u5de6\u4e0b\u65b9\u65f6\uff1a\uff08$A$\u4e3a\u8be2\u95ee\u7684\u70b9\uff09$$Dis(A, B) = |x_A - x_B| + |y_A - y_B| = (x_A + y_A) - (x_B + y_B)$$\n- \u5219\u5f53 $x_B + y_B$ \u53d6\u5230\u6700\u5927\u503c\u65f6\uff0c$Dis(A,B)$ \u6709\u6700\u5c0f\u503c\u3002\n- \u56e0\u6b64\u95ee\u9898\u88ab\u8f6c\u5316\u4e3a\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee $(x, y)$\uff0c\u627e\u5230\u6ee1\u8db3\u65f6\u95f4\u6233\u5728\u5176\u524d\u4e14 $x_i \\le x, y_i \\le y$ \u7684\u70b9\u4e2d $x_i + y_i$ \u7684\u6700\u5927\u503c\u3002\n- \u8fd9\u5b9e\u9645\u4e0a\u5c31\u662f\u4e09\u7ef4\u504f\u5e8f\uff0c\u7528 CDQ\u5206\u6cbb \u89e3\u51b3\u3002\n- \u5bf9\u4e8e\u5176\u5b83\u65b9\u4f4d\u7684\u70b9\uff0c\u53ea\u8981\u628a\u5750\u6807\u7edf\u4e00\u8fdb\u884c\u53d8\u6362\u5373\u8f6c\u53d8\u4e3a\u548c\u4e0a\u9762\u4e00\u6837\u7684\u95ee\u9898\u3002\n- \u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log^2 n)$\u3002\n- \u7136\u540e\u4ea4\u4e0a\u53bb\u53d1\u73b0\u72c2T\u4e0d\u6b62\uff0c\u4e8e\u662f\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8fd8\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff1a\n - \u53ea\u6709\u5bf9\u4e8e\u53f3\u533a\u95f4\u7684\u8be2\u95ee\uff0c\u6211\u4eec\u624d\u628a\u70b9\u52a0\u5165\u5230\u6811\u72b6\u6570\u7ec4\u4e2d\uff0c\u4e0d\u662f\u8be2\u95ee\u5c31\u4e0d\u52a0\uff0c\u8fd9\u91cc\u5b66\u4e60\u4e86\u4e0b[dalao\u7684\u59ff\u52bf](http://blog.csdn.net/qq_21110267/article/details/44701469)\u3002\n - \u6bcf\u6b21 CDQ\u5206\u6cbb \u524d\uff0c\u5148\u628a\u90a3\u4e9b\u80af\u5b9a\u4e0d\u5728\u6240\u6709\u8be2\u95ee\u70b9\u5de6\u4e0b\u65b9\u7684\u70b9\u5254\u9664\u3002\n - \u6bcf\u6b21\u90fd\u6309\u65f6\u95f4\u6233\u91cd\u65b0\u6392\u5e8f\u5f88\u6d6a\u8d39\u65f6\u95f4\uff0c\u53ef\u628a\u4e00\u5f00\u59cb\u7684\u6570\u7ec4\u5907\u4efd\u4e0b\u6765\u76f4\u63a5\u590d\u5236\u8fc7\u53bb\u3002\n - ~~\u628a lowbit(i) \u7528\u6570\u7ec4\u5b58\u4e0b\u6765\u7adf\u7136\u6302\u4e86~~\n- \u76ee\u524d\u5e94\u8be5\u662f\u6d1b\u8c37\u7528 CDQ\u5206\u6cbb \u8dd1\u6700\u5feb\u7684\u3002 \n## Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nnamespace inout\n{\n    const int S = 1 << 20;\n    char frd[S], *ihed = frd + S;\n    const char *ital = ihed;\n    \n    inline char inChar()\n    {\n        if (ihed == ital)\n            fread(frd, 1, S, stdin), ihed = frd;\n        return *ihed++;\n    }\n    \n    inline int get()\n    {\n        char ch; int res = 0; bool flag = false;\n        while (!isdigit(ch = inChar()) && ch != '-');\n        (ch == '-' ? flag = true : res = ch ^ 48);\n        while (isdigit(ch = inChar()))\n            res = res * 10 + ch - 48;\n        return flag ? -res : res;\n    }\n};\nusing namespace inout;\n\nconst int Maxn = 0x3f3f3f3f;\nconst int L = 1e6 + 5;\nint n, m, lx, ly, rx, ry;\nint c[L], Ans[L];\n\ninline void CkMax(int &x, int y) {if (x < y) x = y;}\ninline void CkMin(int &x, int y) {if (x > y) x = y;}\n\ninline void Clear(int x)\n{\n    for (; x <= ly; x += x & -x)\n        if (c[x]) c[x] = 0; \n            else break;\n}\n\ninline int Query(int x)\n{\n    int res = 0;\n    for (; x; x ^= x & -x)\n        CkMax(res, c[x]);\n    return res;\n}\n\ninline void Modify(int x, int y)\n{\n    for (; x <= ly; x += x & -x) \n        CkMax(c[x], y);\n}\n\nstruct Ask\n{\n    int x, y, t; bool f;\n    \n    Ask() {}\n    Ask(const int &X, const int &Y, const int &T, const bool &F):\n        x(X), y(Y), t(T), f(F) {}\n\n    inline bool operator < (const Ask &a) const\n    {\n        return x <= a.x;\n    }\n}q[L], p[L], a[L];\n\ninline void CDQsolve(int l, int r)\n{\n    if (l == r) return ;\n    int mid = l + r >> 1;\n    CDQsolve(l, mid); CDQsolve(mid + 1, r);\n    \n    int j = l;\n    for (int i = mid + 1; i <= r; ++i)\n    if (!p[i].f)\n    {\n        for (; j <= mid && p[j].x <= p[i].x; ++j) \n            if (p[j].f) Modify(p[j].y, p[j].x + p[j].y);\n        int tmp = Query(p[i].y);\n        if (tmp) CkMin(Ans[p[i].t], p[i].x + p[i].y - tmp);\n    }\n    for (int i = l; i < j; ++i)\n        if (p[i].f) Clear(p[i].y);\n    \n    merge(p + l, p + mid + 1, p + mid + 1, p + r + 1, q + l);\n    for (int i = l; i <= r; ++i) p[i] = q[i];\n}\n\ninline void Delete()\n{\n    rx = ry = m = 0;\n    for (int i = 1; i <= n; ++i)\n        if (!p[i].f) CkMax(rx, p[i].x), CkMax(ry, p[i].y);\n    for (int i = 1; i <= n; ++i)\n        if (p[i].x <= rx && p[i].y <= ry) q[++m] = p[i];\n    for (int i = 1; i <= m; ++i) p[i] = q[i];\n}\n\nint main()\n{\n    n = get(); m = get(); int k, x, y;\n    for (int i = 1; i <= n; ++i)\n    {\n        x = get() + 1; y = get() + 1;\n        p[i] = Ask(x, y, i, true);\n        CkMax(lx, x); CkMax(ly, y);\n    }\n    \n    while (m--)\n    {\n        k = get(); x = get() + 1; y = get() + 1;\n        ++n; p[n] = Ask(x, y, n, k & 1);\n        CkMax(lx, x); CkMax(ly, y);\n    }\n    for (int i = 1; i <= n; ++i) a[i] = p[i];\n    \n    memset(Ans, Maxn, sizeof(Ans)); ++lx; ++ly;\n    Delete(); CDQsolve(1, m);\n    \n    for (int i = 1; i <= n; ++i) \n        p[i] = a[i], p[i].x = lx - p[i].x;\n    Delete(); CDQsolve(1, m); \n    \n    for (int i = 1; i <= n; ++i)\n        p[i] = a[i], p[i].y = ly - p[i].y;\n    Delete(); CDQsolve(1, m);\n    \n    for (int i = 1; i <= n; ++i) \n        p[i] = a[i], p[i].x = lx - p[i].x, p[i].y = ly - p[i].y;\n    Delete(); CDQsolve(1, m); \n     \n    for (int i = 1; i <= n; ++i)\n        if (!a[i].f) printf(\"%d\\n\", Ans[i]);\n    return 0; \n} \n```",
        "postTime": 1518659671,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "KD-Tree\u662f\u4e00\u4e2a\u597d\u4e1c\u897f\u554a......KD-Tree\u662f\u4e00\u79cd\u5c06K\u7ef4\u7a7a\u95f4\u91cc\u7684\u70b9\u89c4\u6574\u597d\u7684\u6811\u7ed3\u6784,\u5176\u5b9e\u4e5f\u4e0d\u590d\u6742,\u5c31\u662f\u7b2c\u4e00\u5c42\u6309\u7167\u7b2c\u4e00\u7ef4\u5750\u6807\u5206\u6210\u5de6\u53f3\u4e24\u8fb9,\u7b2c\u4e8c\u5c42\u518d\u6309\u7167\u7b2c\u4e8c\u7ef4\u5750\u6807,\u7b2c\u4e09\u518d\u6309\u7b2c\u4e09\u7ef4......\u5f53\u7136,\u672c\u9898\u53ea\u6709\u4e24\u4e2a\u7ef4\u5ea6,\u8fd9\u6837\u7684KD-Tree\u53c8\u79f0\u4e3a2D-Tree \n\n\u8fd9\u6837\u5728\u67e5\u8be2\u7684\u65f6\u5019,\u6211\u4eec\u77e5\u9053,\u7531\u4e8e\u6211\u4eec\u6309\u5f53\u524d\u7ef4\u5ea6\u7684\u5927\u5c0f\u5c06\u5de6\u53f3\u5b50\u6811\u5206\u5f00\u4e86,\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u63d0\u53d6\u4e24\u68f5\u5b50\u6811\u91cc\u7684\u70b9x\u5750\u6807\u6700\u5927/\u6700\u5c0f\u503c,y\u5750\u6807\u6700\u5927/\u6700\u5c0f\u503c,\u53ef\u4ee5\u770b\u4f5c\u8fd9\u4e9b\u70b9\u5904\u4e8e\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u77e9\u5f62\u91cc.\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u5f53\u524d\u8981\u67e5\u8be2\u7684\u70b9\u5230\u77e9\u5f62\u7684\u6700\u77ed\u66fc\u54c8\u987f\u8ddd\u79bb,\u4e0e\u5f53\u524d\u83b7\u5f97\u7684\u7b54\u6848\u6bd4\u8f83,\u51b3\u5b9a\u662f\u5426\u67e5\u627e\u90a3\u68f5\u5b50\u6811,\u8fbe\u5230\u526a\u679d\u7684\u76ee\u7684.\u590d\u6742\u5ea6\u548c\u5e26\u526a\u679d\u7684\u641c\u7d22\u4e00\u6837,\u662fO(\u7384\u5b66)\n\n\u800c\u63d2\u5165\u5c31\u6309\u7167\u6bcf\u4e2a\u7ef4\u5ea6\u5f80\u5de6\u53f3\u5b50\u6811\u63d2\u5c31\u884c......\u53ef\u662f\u4ee4\u4eba\u7edd\u671b\u7684\u662f,\u8fd9\u6837\u5b50\u63d2\u4e86\u82e5\u5e72\u6b21\u4e4b\u540e,\u53ef\u80fd\u539f\u6811\u5c31\u88ab\u9000\u5316\u6210\u4e00\u4e2a\u8fd1\u4f3c\u4e8e\u94fe\u7684\u4e1c\u897f\u4e86.\u8fd9\u4e2a\u65f6\u5019,\u6211\u4eec\u5c31\u8981\u5229\u7528**\u66ff\u7f6a\u7f8a\u6811**\u7684\u601d\u60f3,\u8bbe\u4e00\u4e2a$\\alpha=0.75$,\u5982\u679c\u5bf9\u4e8e\u70b9$x$,$x$\u7684\u5de6\u53f3\u5b50\u6811\u4e2d\u7684\u4efb\u610f\u4e00\u68f5\u7684\u5927\u5c0f\u5927\u4e8e\u4e86$x$\u5b50\u6811\u5927\u5c0f\u4e58\u4ee5$\\alpha$,\u8bf4\u660e\u539f\u6811\u5df2\u7ecf\u975e\u5e38\u4e0d\u5e73\u8861\u4e86,\u9700\u8981\u5c06\u5176\u8fd8\u539f\u6210\u4e00\u4e2a\u70b9\u7684\u5e8f\u5217(\u8fd9\u4e00\u8fc7\u7a0b\u88ab\u79f0\u4e3a**\u62cd\u6241**),\u7136\u540e\u91cd\u5efa\u4e00\u6b21.\u5f53\u7136,\u4f60\u4e5f\u53ef\u4ee5\u6839\u636e\u4f60\u7684\u5fc3\u60c5\u5bf9$\\alpha$\u503c\u505a\u8c03\u6574.\n\n\u6700\u540e\u653e\u51fa\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read() {\n    int q=0,w=1;char ch=' ';\n    while(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n    if(ch=='-') w=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') q=q*10+ch-'0',ch=getchar();\n    return q*w;\n}\n#define alph (0.75)\nconst int N=1000005;\nstruct point{int x[2];}p[N];\nstruct node{int mi[2],mx[2],ls,rs,sz;point tp;}tr[N];\nint n,m,rt,cur,top,WD,ans,rub[N];\nint operator < (point a,point b) {return a.x[WD]<b.x[WD];}\nint newnode() {//\u5efa\u7acb\u65b0\u8282\u70b9\n\tif(top) return rub[top--];\n\telse return ++cur;\n}\nvoid up(int k) {\n\tint l=tr[k].ls,r=tr[k].rs;\n\tfor(int i=0;i<=1;++i) {\n\t\ttr[k].mi[i]=tr[k].mx[i]=tr[k].tp.x[i];\n\t\tif(l) tr[k].mi[i]=min(tr[k].mi[i],tr[l].mi[i]),tr[k].mx[i]=max(tr[k].mx[i],tr[l].mx[i]);\n\t\tif(r) tr[k].mi[i]=min(tr[k].mi[i],tr[r].mi[i]),tr[k].mx[i]=max(tr[k].mx[i],tr[r].mx[i]);\n\t}\n\ttr[k].sz=tr[l].sz+tr[r].sz+1;\n}\nint build(int l,int r,int wd) {\n\tif(l>r) return 0;\n\tint k=newnode(),mid=(l+r)>>1;\n\tWD=wd,nth_element(p+l,p+mid,p+r+1),tr[k].tp=p[mid];\n    //nth_element:\u4f7f\u5f97\u5e8f\u5217\u67d0\u4e00\u4f4d\u7f6ex(\u6b64\u5904\u662fp+mid)\u662f\u8be5\u5e8f\u5217\u7684\u7b2cx\u5927\u6570\n\ttr[k].ls=build(l,mid-1,wd^1),tr[k].rs=build(mid+1,r,wd^1);\n\tup(k);return k;\n}\nvoid pia(int k,int num) {//\u62cd\u6241\n\tif(tr[k].ls) pia(tr[k].ls,num);\n\tp[num+tr[tr[k].ls].sz+1]=tr[k].tp,rub[++top]=k;\n\tif(tr[k].rs) pia(tr[k].rs,num+tr[tr[k].ls].sz+1);\n}\nvoid check(int &k,int wd) {//\u68c0\u67e5\u5b50\u6811\u662f\u5426\u4e0d\u5e73\u8861\n\tif(alph*tr[k].sz<tr[tr[k].ls].sz||alph*tr[k].sz<tr[tr[k].rs].sz)\n\t\tpia(k,0),k=build(1,tr[k].sz,wd);\n}\nvoid ins(point tmp,int &k,int wd) {//\u63d2\u5165\n\tif(!k) {k=newnode(),tr[k].tp=tmp,tr[k].ls=tr[k].rs=0,up(k);return;}\n\tif(tr[k].tp.x[wd]<tmp.x[wd]) ins(tmp,tr[k].rs,wd^1);\n\telse ins(tmp,tr[k].ls,wd^1);\n\tup(k),check(k,wd);//\u8bb0\u5f97\u5728check\u4e4b\u524d\u8981\u5148pushup\n}\nint getdis(point tmp,int k) {//\u83b7\u5f97\u5f53\u524d\u70b9\u5230\u77e9\u5f62\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\n\tint re=0;\n\tfor(int i=0;i<=1;++i)\n\t\tre+=max(0,tmp.x[i]-tr[k].mx[i])+max(0,tr[k].mi[i]-tmp.x[i]);\n\treturn re;\n}\nint dist(point a,point b) {return abs(a.x[0]-b.x[0])+abs(a.x[1]-b.x[1]);}\nvoid query(point tmp,int k) {//\u67e5\u8be2\n\tans=min(ans,dist(tmp,tr[k].tp));\n\tint dl=INT_MAX,dr=INT_MAX;\n\tif(tr[k].ls) dl=getdis(tmp,tr[k].ls);\n\tif(tr[k].rs) dr=getdis(tmp,tr[k].rs);\n\tif(dl<dr) {\n\t\tif(dl<ans) query(tmp,tr[k].ls);\n\t\tif(dr<ans) query(tmp,tr[k].rs);\n\t}\n\telse {\n\t\tif(dr<ans) query(tmp,tr[k].rs);\n\t\tif(dl<ans) query(tmp,tr[k].ls);\n\t}\n}\nint main() {\n\tint bj;\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;++i) p[i].x[0]=read(),p[i].x[1]=read();\n\trt=build(1,n,0);\n\twhile(m--) {\n\t\tpoint tmp;\n\t\tbj=read(),tmp.x[0]=read(),tmp.x[1]=read();\n\t\tif(bj==1) ins(tmp,rt,0);\n\t\telse ans=INT_MAX,query(tmp,rt),printf(\"%d\\n\",ans);\n\t}\n    return 0;\n}\n```",
        "postTime": 1517547544,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076\u3011"
    },
    {
        "content": "### $cdq$\u5206\u6cbb\n\n#### \u4e0d\u77e5\u9053\u4ec0\u4e48\u662f$cdq$\u5206\u6cbb\uff1f\u6b22\u8fce\u8bbf\u95ee[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/mogeko/p/10439209.html)\n\n\u4e8c\u7ef4\u5e73\u9762\u4fee\u6539+\u67e5\u8be2\uff0c$cdq$\u53ef\u4ee5\u89e3\u51b3\u3002\n\n\u6c42\u5173\u4e8e\u67d0\u4e2a\u70b9\u66fc\u54c8\u987f\u8ddd\u79bb\uff08$x,y$\u5750\u6807\uff09\u6700\u8fd1\u7684\u70b9\u2014\u2014$dis(A,B) = |Ax-Bx|+|Ay-By|$\n\n\u4f46\u662f\u5982\u4f55\u53bb\u6389\u7edd\u5bf9\u503c\u5462\uff1f\n\n\u5047\u8bbe\u6240\u6709\u7684\u70b9\u90fd\u5728\u67e5\u8be2\u70b9\u7684\u5de6\u4e0b\u65b9\uff0c$dis(A,B) = (Ax-Bx)+(Ay-By) = (Ax+Ay)-(Bx+By)$\n\n\u53ea\u8981\u6c42\u6ee1\u8db3$Bx<Ax,By<Ay$ \u4e14 $Bx,By$\u4e4b\u548c\u6700\u5927\u7684\u70b9\u5c31\u597d\u4e86\u3002\n\n\u90a3\u4e48\u5982\u4f55\u628a\u6240\u6709\u7684\u70b9\u8f6c\u5316\u5230\u8be5\u67e5\u8be2\u7684\u5de6\u4e0b\u5462\uff1f\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\uff0c\u53ef\u4ee5\u628a\u4e00\u3001\u4e8c\u3001\u56db\u8c61\u9650\u7684\u70b9\u90fd\u901a\u8fc7\u5bf9\u79f0\u8f6c\u79fb\u5230\u7b2c\u4e09\u8c61\u9650\u3002\u4f46\u67e5\u8be2\u5f88\u591a\uff0c\u4e0d\u53ef\u80fd\u4e00\u4e2a\u4e2a\u7ffb\u8f6c\u3002\n\n\u6362\u4e2a\u601d\u8def\uff0c\u5982\u679c\u628a\u6574\u4e2a\u5e73\u9762\u7ffb\u8f6c\u4e09\u6b21\uff0c\u8fdb\u884c\u56db\u6b21$cdq$\u5206\u6cbb\uff0c\u6bcf\u6b21\u90fd\u53ea\u8003\u8651\u5de6\u4e0b\u7684\u70b9\uff0c\u6240\u6709\u7684\u70b9\u5c31\u90fd\u904d\u5386\u5230\u4e86\uff01\n\n\u8bb0\u5f55\u6700\u5927\u7684$x$\u6216$y$\u503c\u4e3a\u8fb9\u754c$len$\uff0c\u6bcf\u6b21\u6cbf$len$\u7ffb\u8f6c\u3002\u4f8b\u5982\u6cbfy\u8f74\u7ffb\u8f6c\u65f6\uff0c$x = len-x$\n\n\u90a3\u4e48\u6bcf\u4e2a\u64cd\u4f5c\u6709\u4e09\u7ef4\u2014\u2014\u65f6\u95f4\u3001$x$\u5750\u6807\u3001$y$\u5750\u6807\n\n\u65f6\u95f4\u5728\u8f93\u5165\u65f6\u5df2\u7ecf\u6392\u597d\u4e86\uff1b$x$\u5f52\u5e76\u6392\u5e8f\uff1b$y$\u4eff\u7167[P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09](https://www.luogu.org/problemnew/show/P3810)\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55\u3002\n\n \n\n### \u4f18\u5316 & \u6ce8\u610f\n\n\u8fd9\u9053\u9898\u5751\u70b9\u8d85\u7ea7\u591a...\u800c\u4e14\u56db\u6b21$cdq$\u5206\u6cbb\u4f1a\u5f97\u5230\u4e00\u4e2a\u611f\u4eba\u7684\u590d\u6742\u5ea6\uff0c\u6240\u4ee5~~\u6211\u9009\u62e9\u5438\u6c27~~\n\n- $cdq$\u5185\u7684\u5f52\u5e76\u6392\u5e8f\u4ee3\u66ff\u6bcf\u6b21$sort$\u3002\n- \u56e0\u4e3a\u6bcf\u6b21$cdq$\u5b8c\u987a\u5e8f\u4f1a\u88ab\u6253\u4e71\uff0c\u5982\u679c\u91cd\u65b0\u6309\u65f6\u95f4$O(nlogn)$\u6392\u5e8f\uff0c\u4e0d\u5982\u6bcf\u6b21\u5b58\u5165\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\uff0c\u7136\u540e$O(n)$\u76f4\u63a5\u590d\u5236\u8fc7\u53bb\u3002\n- \u4f46\u662f$ans$\u9700\u8981\u5b58\u5165\u521d\u59cb\u7684\u6570\u7ec4\u4e2d\uff0c\u6240\u4ee5\u7ed3\u6784\u4f53\u9700\u8981\u4e00\u4e2a$.id$\u6765\u8bb0\u5f55\u6253\u4e71\u524d\u7684\u65f6\u95f4\uff0c\u4e5f\u5c31\u662f\u539f\u6570\u7ec4\u4e0b\u6807\u3002\u8d4b\u503c\u5e94\u8be5\u5199$a[b[t2].id].ans$\uff0c\u800c\u4e0d\u662f$a[t2].ans$\u3002\n\n- \u5e76\u4e14\uff0c\u7531\u4e8e\u6bcf\u6b21\u67e5\u8be2\u70b9\u7684$x,y$\u4e5f\u4f1a\u66f4\u6539\uff0c\u6240\u4ee5$ans$\u91cc\u4e0d\u80fd\u76f4\u63a5\u5b58$max(Bx+By)$\uff0c\u800c\u5e94\u8be5\u4e3a$min((Ax+Ay)-(Bx+By))$\u3002\n\n- \u5982\u679c\u67d0\u4e2a\u70b9\u5728\u5750\u6807\u8f74\u4e0a\uff0c\u90a3\u4e48\u5b83\u7684$x$\u6216$y$\u4e3a0\u3002\u5b58\u5165\u6811\u72b6\u6570\u7ec4\u65f6\uff0c\u4f1a\u56e0\u4e3a$lowbit()==0$\u800c\u9677\u5165\u6b7b\u5faa\u73af\u3002\u6240\u4ee5\u5b58\u5165\u65f6\uff0c\u5c06$x,y$\u5206\u522b+1\u3002\n- \u540c\u6837\u7684\uff0c\u5982\u679c\u67d0\u4e2a\u70b9\u5728\u7ffb\u8f6c\u8fb9\u754c$len$\u4e0a\uff0c\u7ffb\u8f6c\u65f6\u4e5f\u4f1a\u53d8\u4e3a0\u3002\u6240\u4ee5$len$\u4e5f\u8981++\u3002\n- \u8003\u8651\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff1a\u67d0\u4e00\u70b9\u975e\u5e38\u9760\u8fd1\u8fb9\u754c\uff0c\u5bfc\u81f4\u67d0\u6b21\u7ffb\u8f6c\u65f6\uff0c\u6ca1\u6709\u70b9\u5728\u5b83\u7684\u5de6\u4e0b\u3002\u8fd9\u6837\u67e5\u8be2\u65f6\u9ed8\u8ba4\u8fd4\u56de\u4e860\u3002\u5f53\u524d\u7684\u201c\u539f\u70b9\u201d\u6bd4\u5b9e\u9645\u4e0a\u7684\u70b9\u79bb\u8be5\u67e5\u8be2\u70b9\u66f4\u8fd1\uff0c\u8fd9\u6837\u6700\u7ec8\u7684\u8ddd\u79bb\u5c31\u6210\u4e86\u8fd9\u4e2a\u70b9\u5230\u539f\u70b9\u7684\u8ddd\u79bb\uff0c\u4f46\u539f\u70b9\u662f\u4e0d\u5b58\u5728\u7684\uff08\u7ecf\u8fc7\u521a\u521a\u7684\u66f4\u6539\uff0c\u5df2\u7ecf\u6ca1\u6709$x$\u6216$y$\u5750\u6807\u4e3a0\u7684\u70b9\uff09\u4e3a\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u5f53\u67e5\u8be2\u65f6\u9700\u8981\u7279\u5224\uff0c\u82e5\u4e3a0\u5219\u8fd4\u56de$-INF$\u3002\n\n\u8fd9\u9053\u9898\u7684\u4ee3\u7801\u4e0d\u96be\uff0c\u4f46\u662f\u7ec6\u8282\u7279\u522b\u591a,\u5199\u7684\u65f6\u5019\u8981\u4ed4\u7ec6\u4e00\u70b9qwq\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#define MogeKo qwq\nusing namespace std;\nconst int maxn = 1e7+10;\nconst int INF = 2e7+10;\nint n,q,opt,x,y,len;\n\nint read() {\n\tint x = 0,f = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9') {\n\t\tif(ch == '-') f = -1;\n\t\tch = getchar();\n\t}\n\twhile('0' <= ch && ch <= '9') {\n\t\tx = x*10 + ch-'0';\n\t\tch = getchar();\n\t}\n\treturn x*f;\n}\n\nstruct node {\n\tint x,y,type,id,ans;\n} a[maxn],b[maxn],tem[maxn];\n\nstruct BIT {\n\tint m[maxn];\n\tint lowbit(int x) {\n\t\treturn x & -x;\n\t}\n\tvoid update(int x,int v) {\n\t\tfor(; x <= len; x+= lowbit(x))\n\t\t\tm[x] = max(m[x],v);\n\t}\n\tint query(int x) {\n\t\tint ans = 0;\n\t\tfor(; x; x-=lowbit(x))\n\t\t\tans = max(ans,m[x]);\n\t\treturn ans?ans:-INF;\n\t}\n\tvoid clear(int x) {\n\t\tfor(; m[x]; x+= lowbit(x))\n\t\t\tm[x] = 0;\n\t}\n} tree;\n\nvoid cdq(int L,int R) {\n\tif(L == R) return;\n\tint mid = L+R >> 1;\n\tcdq(L,mid),cdq(mid+1,R);\n\tint t1 = L,t2 = mid+1;\n\tint k = L;\n\twhile(t2 <= R) {\n\t\twhile(t1 <= mid && b[t1].x <= b[t2].x) {\n\t\t\tif(b[t1].type == 1)\n\t\t\t\ttree.update(b[t1].y, b[t1].x+b[t1].y);\n\t\t\ttem[k++] = b[t1++];\n\t\t}\n\t\tif(b[t2].type == 2)\n\t\t\ta[b[t2].id].ans = min(a[b[t2].id].ans,b[t2].x+b[t2].y-tree.query(b[t2].y));\n\t\ttem[k++] = b[t2++];\n\t}\n\tfor(int i = L; i <= t1-1; i++)\n\t\tif(b[i].type == 1) tree.clear(b[i].y);\n\twhile(t1 <= mid) tem[k++] = b[t1++];\n\tfor(int i = L; i <= R; i++) b[i] = tem[i];\n}\n\nvoid solve(int rx,int ry) {\n\tfor(int i = 1; i <= n+q; i++) {\n\t\tb[i] = a[i];\n\t\tif(rx) b[i].x = len - b[i].x;\n\t\tif(ry) b[i].y = len - b[i].y;\n\t}\n\tcdq(1,n+q);\n}\n\nint main() {\n\tn = read(),q = read();\n\tfor(int i = 1; i <= n; i++) {\n\t\tx = read(),y = read();\n\t\ta[i].type = 1;\n\t\ta[i].id = i;\n\t\ta[i].x = ++x;\n\t\ta[i].y = ++y;\n\t\tlen = max(len,max(x,y));\n\t}\n\tfor(int i = n+1; i <= n+q; i++) {\n\t\topt = read(),x = read(),y = read();\n\t\ta[i].type = opt;\n\t\ta[i].id = i;\n\t\ta[i].x = ++x;\n\t\ta[i].y = ++y;\n\t\ta[i].ans = INF;\n\t\tlen = max(len,max(x,y));\n\t}\n\tlen++;\n\tsolve(0,0),solve(0,1),solve(1,0),solve(1,1);\n\tfor(int i = n+1; i <= n+q; i++)\n\t\tif(a[i].type == 2) printf(\"%d\\n\",a[i].ans);\n\treturn 0;\n}\n```",
        "postTime": 1552470658,
        "uid": 119316,
        "name": "Mogeko",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "# **K-D Tree**\n\n\n _\u591a\u7ef4\uff08k\u7ef4\uff09\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684K-D Tree\uff08k-dimensional\uff08\u7ef4\u5ea6\uff09\u6811\uff09\u3002\u4e3b\u8981\u5e94\u7528\u4e8e\u591a\u7ef4\u7a7a\u95f4\u5173\u952e\u6570\u636e\u7684\u641c\u7d22\uff08\u5982\u8303\u56f4\u641c\u7d22\u548c\u6700\u8fd1\u90bb\u641c\u7d22\uff09\u3002_ \n\n------------\n### \u524d\u7f6e\u77e5\u8bc6\uff1a\n1. \u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\n\n1. \u6700\u597d\u5199\u8fc7\u66ff\u7f6a\u7f8a\u6811\uff08\u4e0d\u4f1a\u4e5f\u6ca1\u5173\u7cfb\uff0c\u540e\u9762\u4f1a\u8bb2\uff09\n\n1. ~~\u8bfb\u8fc7\u9898~~\n\n------------\n\n\n## \u4e00\u7ef4K-D Tree\n\u4e00\u7ef4K-D Tree \u672c\u8d28\u5c31\u662f\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5177\u6709\u5982\u4e0b\u6027\u8d28\uff1a\n\n1. \u5982\u679c\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u90a3\u4e48\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7684\u7ed3\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u5b83\u6839\u8282\u70b9\u4e0a\u7684\u503c\n       \n1. \u5982\u679c\u53f3\u5b50\u6811\u975e\u7a7a\uff0c\u90a3\u4e48\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7684\u7ed3\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u5b83\u6839\u8282\u70b9\u4e0a\u7684\u503c\n1. \u5b83\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u6ee1\u8db3\u4e0a\u8ff0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\n\n### **\u6784\u5efa**\n\n\u4e00\u7ef4K- DTree\u7684\u6784\u5efa\u53ef\u7c7b\u6bd4BST\u6216\u5176\u4ed6\u5e73\u8861\u6811\u7684\u6784\u5efa\u65b9\u5f0f\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u5e8f\u5217\uff0c\u5982\u679c\u60f3\u5f97\u5230\u4e00\u68f5\u8f83\u4e3a\u5e73\u8861\u7684\u5e73\u8861\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u53d6\u51fa\u5f53\u524d\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u5f53\u524d\u7ed3\u70b9\u7684\u952e\u503c\uff0c\u7136\u540e\u5c06\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u7ed3\u70b9\u952e\u503c\u7684\u6254\u5230\u5de6\u5b50\u6811\uff08\u5f53\u7136\uff0c\u5bf9\u4e8e\u7b49\u4e8e\u5f53\u524d\u7ed3\u70b9\u952e\u503c\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\u5f53\u524d\u7ed3\u70b9\u8bb0\u5f55\u4e00\u4e2acnt\u8868\u793a\u91cd\u590d\u952e\u503c\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6765\u4ee3\u66ff\u5c06\u5b83\u6254\u5230\u5de6\u5b50\u6811\uff09\uff0c\u800c\u5176\u4f59\u7684\u7ed3\u70b9\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u6254\u5230\u53f3\u5b50\u6811\u3002\u9012\u5f52\u5de6\u53f3\u5b50\u6811\uff0c\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u5373\u53ef\u3002\n\n------------\n## \u4e8c\u7ef4K-D Tree\n\u73b0\u5728\u6211\u4eec\u5c06\u95ee\u9898\u62ac\u5347\u5230\u4e8c\u7ef4\uff0c\u5728\u6784\u5efa\u4e8c\u7ef4\u7684K-D Tree\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\n\u5728\u4e00\u7ef4\u4e2d\uff0c\u7531\u4e8e\u4ec5\u5b58\u5728\u4e00\u4e2a\u5173\u952e\u5b57\uff08\u5373\u4e0a\u6587\u7684\u952e\u503c\uff09\uff0c\u56e0\u6b64\u53ea\u6bd4\u8f83\u4ec5\u6709\u7684\u4e00\u7ef4\u5373\u53ef\uff0c\u4f46\u662f\u4e8c\u7ef4\u4e2d\u5374\u6709x,y\u4e24\u4e2a\u7ef4\u5ea6\u7684\u5173\u952e\u5b57\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u6bd4\u8f83\u5462\uff1f\n\n\u79c9\u627f\u4e0a\u9762\u7684\u601d\u8def\uff0c\u4e0d\u96be\u53d1\u73b0K-D Tree\u5efa\u6811\u7684\u8fc7\u7a0b\u6838\u5fc3\u5c31\u5728\u4e8e\u89e3\u51b3\u9009\u53d6\u54ea\u4e2a\u7ef4\u5ea6\u4e3a\u4e3b\u8981\u5173\u952e\u5b57\u7684\u95ee\u9898\u3002\u5bf9\u89e3\u51b3\u8be5\u95ee\u9898\uff0c\u5f53\u524d\u4e3b\u8981\u6709\u5982\u4e0b\u51e0\u79cd\u9009\u6cd5\uff1a\n### 1. \u778exx\u9009\u6cd5\n\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u5411\u4e0b\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u8d70\u5230\u4e00\u5c42\u6211\u4eec\u968f\u673a\u6311\u9009\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u4ee5\u8be5\u7ef4\u5ea6\u4e3a\u4e3b\u8981\u5173\u952e\u5b57\uff0c\u7b2c\u4e8c\u7ef4\u4e3a\u6b21\u8981\u5173\u952e\u5b57\u6bd4\u8f83\u6392\u5e8f\uff0c\u53d6\u4e2d\u4f4d\u6570\u4e3a\u5f53\u524d\u7ed3\u70b9\u7684\u4ee3\u8868\u5143\uff0c\u9012\u5f52\u5de6\u53f3\u5b50\u6811\u3002\u6548\u7387\u7384\u5b66\uff0c\u4f18\u70b9\u662f\u4e0d\u6613\u88ab\u5361\uff0c\u7f3a\u70b9\u662f\u4e0d\u7a33\u5b9a\u3002\n\n### 2.\u4ea4\u66ff\u9009\u6cd5\n\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u5411\u4e0b\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u8f6e\u6d41\u9009\u62e9\u73b0\u6709\u7684\u51e0\u4e2a\u7ef4\u5ea6\u505a\u4e3b\u8981\u5173\u952e\u5b57\uff0c\u7b2c\u4e8c\u7ef4\u4e3a\u6b21\u8981\u5173\u952e\u5b57\u6bd4\u8f83\u6392\u5e8f\uff0c\u53d6\u4e2d\u4f4d\u6570\u4e3a\u5f53\u524d\u7ed3\u70b9\u7684\u4ee3\u8868\u5143\uff0c\u9012\u5f52\u5de6\u53f3\u5b50\u6811\u3002\n\n\u4ee5\u4e8c\u7ef4K-D Tree\u4e3e\u4f8b\uff0c\u5982\u679c\u4e0a\u4e00\u5c42\u4ee5x\u7ef4\u4f5c\u4e3b\u8981\u5173\u952e\u5b57\uff0c\u5219\u5f53\u524d\u5c42\u5c31\u4ee5y\u7ef4\u4f5c\u4e3b\u8981\u5173\u952e\u5b57\uff0c\u5f53\u524d\u5c42\u7684\u4e0b\u4e00\u5c42\u5c31\u4ee5x\u7ef4\u4f5c\u4e3b\u5173\u952e\u5b57\uff0c\u4ea4\u66ff\u9009\u62e9\u3002\n\n\u8fd9\u79cd\u9009\u6cd5\u7684\u4f18\u70b9\u662f\u7a33\u5b9a\uff0c\u5b9e\u73b0\u7b80\u5355\uff0c\u7f3a\u70b9\u662f~~\u6bd2\u7624\u51fa\u9898\u4eba\u4f1a\u5361~~\u3002\n\n\u5f53\u524dOI\u7ade\u8d5b\u4e2d\u666e\u904d\u9009\u62e9\u7684\u5c31\u662f\u8fd9\u79cd\u9009\u6cd5\u3002\n### 3.\u65b9\u5dee\u9009\u6cd5\n\n\u6211\u4eec\u62ff\u8c46\u8150\u4e0e\u6728\u68cd\u4e3e\u4f8b\uff0c\u5982\u679c\u6211\u4eec\u7528\u4ea4\u66ff\u9009\u6cd5\uff0c\u8c46\u8150\u6a2a\u7740\u4e00\u5200\uff0c\u7ad6\u7740\u4e00\u5200\uff0c\u8f6e\u6d41\u5207\uff0c\u6700\u540e\u5f97\u5230\u7684\u5c31\u662f\u6574\u6574\u9f50\u9f50\u7684\u8c46\u8150\u5757\u3002\u4f46\u5982\u679c\u662f\u5c0f\u6728\u68cd\uff0c\u6211\u4eec\u5c06\u5b83\u62e6\u8170\u6298\u65ad\uff0c\u7136\u540e\u8981\u6c42\u4f60\u7ad6\u7740\u5207\u4e00\u5200\uff0c\u662f\u4e0d\u662f\u5c31\u5f88\u9e21\u808b\u3002\u56e0\u6b64\u4e3a\u4e86\u907f\u514d\u4e0a\u8ff0\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u5c31\u6709\u4e86\u666e\u9002\u6027\u66f4\u9ad8\u7684\u65b9\u5dee\u9009\u6cd5,\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u65b9\u5dee\u8d8a\u5927\u8bf4\u660e\u6570\u636e\u5206\u5e03\u8d8a\u5206\u6563\uff0c\u65b9\u5dee\u8d8a\u5c0f\u8bf4\u660e\u5206\u5e03\u8d8a\u96c6\u4e2d\u3002\u56e0\u6b64\u4ece\u65b9\u5dee\u5927\u7684\u7ef4\u5ea6\u5f00\u59cb\u5207\u5206\u53ef\u4ee5\u53d6\u5f97\u5f88\u597d\u7684\u5207\u5206\u6548\u679c\u53ca\u5e73\u8861\u6027\u3002\n\n\u4f18\u70b9\uff1a\u6548\u7387\u6709\u4fdd\u969c\uff0c\u9002\u7528\u8303\u56f4\u5e7f\uff0c\u7f3a\u70b9\u662f\u5b9e\u73b0\u8f83\u4e3a\u590d\u6742\uff0c\u8fd9\u91cc\u4ec5\u4f5c\u7b80\u5355\u4ecb\u7ecd\uff0c\u6709\u5174\u8da3\u7684\u8bfb\u8005\uff0c\u53ef\u4ee5\u81ea\u884c\u67e5\u9605\u5b9e\u73b0\u8fc7\u7a0b~~~~\uff08\u9003\uff09\u3002\n\n\n------------\n## \u5b9e\u73b0\n\n- \u4e00\u4e2a\u6ee1\u8db3\u6211\u4eec\u6309\u4efb\u610f\u7ef4\u5ea6\u6392\u5e8f\u9700\u8981\u7684cmp\uff0c\u5927\u6982\u957f\u6210\u8fd9\u4e2a\u6837\u5b50\uff1a\n```cpp\nbool dimension\uff1b\n\ninline bool cmp(Point p1, Point p2)\n{\n\tif (dimension == 0)return p1.x < p2.x || (p1.x == p2.x && p1.y < p2.y);\n\treturn p1.y < p2.y || (p1.y == p2.y && p1.x < p2.x);\n}\n```\n- \u4e00\u4e2a\u80fd\u6784\u9020\u5c3d\u53ef\u80fd\u5e73\u8861\u7684build\u3002\n\n\u7531\u4e8e\u6211\u4eec\u9700\u8981\u5b8c\u6210\u53d6\u4e2d\u4f4d\u6570\uff0c\u5e76\u5c06\u5e8f\u5217\u5206\u4e3a\u5c0f\u4e8e\u4e2d\u4f4d\u6570\uff0c\u548c\u5927\u4e8e\u4e2d\u4f4d\u6570\u4e24\u90e8\u5206\u7684\u64cd\u4f5c\uff0c\u6070\u5de7algorithm\u5e93\u53c8\u63d0\u4f9b\u4e86\u80fd\u6ee1\u8db3\u6211\u4eec\u8981\u6c42\u7684nth_element\u51fd\u6570\u3002\u4ee3\u7801\u4e5f\u5f88\u7b80\u5355\uff1a\n\n```cpp\ninline Node* build(int l, int r, bool d)\n{\n\tif (l >= r)return null;\n\tint mid = (l + r) >> 1;\n\tdimension = d;\n\tnth_element(a + l, a + mid, a + r, cmp);\n\tNode *o = new_node(a[mid]);\n\to->son[0] = build(l, mid, d ^ 1);\n\to->son[1] = build(mid + 1, r, d ^ 1);\n\to->maintain();\n\treturn o;\n}\n```\n- \u63d2\u5165\n\n\u63d2\u5165\u64cd\u4f5c\u7684\u5927\u4f53\u6846\u67b6\u4e0e\u666e\u901a\u7684\u5e73\u8861\u6811\u8fd1\u4f3c\uff0c\u8981\u63d2\u5165\u7684\u7ed3\u70b9\u4e0e\u5f53\u524d\u904d\u5386\u7684\u7ed3\u70b9\u4f5c\u6bd4\u8f83\uff0c\u5982\u679c\u8981\u63d2\u5165\u7684\u7ed3\u70b9\u8f83\u5c0f\uff0c\u5c31\u5f80\u5de6\u5b50\u6811\u7ee7\u7eed\u904d\u5386\uff0c\u53cd\u4e4b\uff0c\u5c31\u5f80\u53f3\u5b50\u6811\u904d\u5386\uff0c\u5982\u679c\u904d\u5386\u5230\u7a7a\u7ed3\u70b9\uff0c\u8bf4\u660e\u8fd9\u4e2a\u7ed3\u70b9\u4e0d\u5b58\u5728\uff0c\u6211\u4eec\u5c31\u65b0\u5efa\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5c06\u8981\u63d2\u5165\u7ed3\u70b9\u7684\u4fe1\u606f\u5b58\u5165\u3002\n\n\n```cpp\ninline Node** __insert(Node *&o, Point key)//\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff0c\u6700\u7ec8\u7ed3\u679c\u4e3a\u8fd4\u56de\u6700\u9760\u8fd1\u6839\u7684\u9700\u8981\u91cd\u6784\u70b9\u3002\n{\n\tif (o == null)\n\t{\n\t\to = new_node(key);\n\t\treg_dimension = dimension;\n\t\treturn &null;\n\t}\n\telse\n\t{\n\t\to->cover++;\n\t\tbool dir = cmp(key, o->p) ^ 1;\n\t\tdimension ^= 1;\n\t\tNode** res = __insert(o->son[dir], key);\n\t\tif (o->is_bad())\n\t\t{\n\t\t\tres = &o;\n\t\t\treg_dimension = dimension;//\u8bb0\u5f55\u9012\u5f52\u8fc7\u7a0b\u4e2d\u6700\u540e\u4e00\u4e2a\u8f83\u4e3a\u4e0d\u5e73\u8861\u7684\u7ed3\u70b9\n\t\t}\n\t\to->maintain();\n\t\treturn res;\n\t}\n}\ninline void insert(Point key)\n{\n\treg_dimension = dimension = 0;\n\tNode** res = __insert(root, key);\n\tif (*res != null)rebuild(*res, reg_dimension);\n}\n```\n- \u62cd\u6241\u91cd\u6784\n\n\u63d2\u5165\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6211\u4eec\u8f9b\u8f9b\u82e6\u82e6build\u51fa\u7684\u4e00\u4e2a\u5f62\u6001\u4f18\u7f8e\u7684\u5e73\u8861\u6811\uff0c\u6709\u53ef\u80fd\u5c06\u518d\u6b21\u5931\u8861\uff0c\u4e3a\u4e86\u907f\u514d\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u6982\u5ff5\uff0c\u53eb\u505aalpha\u6743\u503c\u5e73\u8861\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u66ff\u7f6a\u7f8a\u6811\u662f\u4e00\u79cd\u5178\u578b\u7684\u91cd\u91cf\u5e73\u8861\u6811\uff0c\u5b83\u5e76\u4e0d\u4f9d\u8d56\u65cb\u8f6c\u800c\u7ef4\u6301\u5f62\u6001\uff0c\u800c\u662f\u4f9d\u9760\u5f53\u6811\u7684\u67d0\u4e00\u90e8\u5206\u5931\u8861\u8fc7\u4e8e\u4e25\u91cd\u65f6\uff0c\u5c40\u90e8\u91cd\u6784\u7ef4\u62a4\u5e73\u8861\u3002\u800c\u7528\u6765\u8861\u91cf\u4e00\u68f5\u6811\u7684\u5e73\u8861\u60c5\u51b5\u7684\u53d8\u91cf\u5c31\u53eb\u505aalpha\u5e73\u8861\u56e0\u5b50\uff0c\u5e38\u89c1\u7684\u5e73\u8861\u6811\uff0c\u5982treap\u7684alpha\u5927\u591a\u57280.7~0.8\u4e4b\u95f4\uff0c\u7ea2\u9ed1\u6811\u7684alpha\u5927\u591a\u57280.66\u5de6\u53f3\uff0c**alpha\u8d8a\u8d8b\u8fd1\u4e8e0.5\uff0c\u6811\u5c31\u8d8a\u5e73\u8861\uff0c\u8d8a\u8d8b\u8fd1\u4e8e1\uff0c\u6811\u5c31\u8d8a\u503e\u5411\u4e8e\u94fe\u7684\u5f62\u6001\u3002** \n\n\u66ff\u7f6a\u7f8a\u6811\u53ef\u4ee5\u901a\u8fc7\u624b\u52a8\u8c03\u8282alpha\u503c\uff0c\u4ee5\u8fbe\u5230\u66f4\u9ad8\u7684\u6548\u7387\u3002\u62ff\u6781\u7aef\u60c5\u51b5\u4e3e\u4f8b\uff0c\u5982\u679c\u4f60\u5c06alpha\u8bbe\u4e3a0.5\uff0c\u7136\u540e\u4f60\u7684\u6811\u7a0d\u6709\u5931\u8861\u5c31\u4f1a\u4e0d\u65ad\u7684\u62cd\u6241\u91cd\u6784\u3002\u5982\u679c\u4f60\u5c06alpha\u8bbe\u4e3a1\uff0c\u7136\u540e\u4f60\u7684\u6811\u5373\u4f7f\u9000\u5316\u6210\u94fe\uff0c\u4f60\u7684\u7a0b\u5e8f\u4e5f\u65e0\u52a8\u4e8e\u8877\u3002\n\n\u56e0\u6b64\u6211\u4eec\u901a\u5e38\u5c06alpha\u8bbe\u4e3a0.75\uff0c\u8fd9\u4e2a\u6298\u4e2d\u4e4b\u540e\u7684\u7ed3\u679c\u3002K-D Tree\u4e5f\u662f\u540c\u7406\u3002\n```cpp\ninline void travel(Node* p, vector<Node*>&x)//\u5c06\u9700\u8981\u91cd\u6784\u7684\u70b9\u6536\u96c6\u8d77\u6765\n{\n\tif (p == null)return;\n\ttravel(p->son[0], x);\n\tx.push_back(p);\n\ttravel(p->son[1], x);\n}\ninline Node* divide(vector<Node*>&x, int l, int r, bool d)//\u9012\u5f52\u51fd\u6570\n{\n\tif (l >= r)return null;\n\tint mid = (l + r) >> 1;\n\tdimension = d;\n\tNode *o = x[mid];\n\to->son[0] = divide(x, l, mid, d ^ 1);\n\to->son[1] = divide(x, mid + 1, r, d ^ 1);\n\to->maintain();\n\treturn o;\n}\ninline void rebuild(Node *&o, bool d)\n{\n\tstatic vector<Node*>v;\n\tv.clear();\n\ttravel(o, v);\n\to = divide(v, 0, v.size(), d);\n}\n```\n\n- Push_up\n\n\u7ef4\u62a4\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u8986\u76d6\u7684\u6700\u5927\u77e9\u5f62\uff0c\u548c\u8be5\u5b50\u6811\u5305\u542b\u7684\u6240\u6709\u70b9\u7684\u6570\u91cf\uff08**\u5305\u62ec\u5df2\u7ecf\u88ab\u6253\u4e86\u5220\u9664\u6807\u8bb0\uff0c\u8fd8\u6ca1\u6709\u53ca\u65f6\u79fb\u9664\u7ed3\u70b9\u7684\u6570\u91cf\uff08\u672c\u9898\u4e0d\u9700\u8981\u8003\u8651\uff09\u548c\u5b9e\u9645\u5b58\u5728\u8282\u70b9\u7684\u6570\u91cf**\uff09\n```cpp\ninline void maintain()\n\t{\n\t\tr1.x = min(r1.x, min(son[0]->r1.x, son[1]->r1.x));\n\t\tr1.y = min(r1.y, min(son[0]->r1.y, son[1]->r1.y));\n\t\tr2.x = max(r2.x, max(son[0]->r2.x, son[1]->r2.x));\n\t\tr2.y = max(r2.y, max(son[0]->r2.y, son[1]->r2.y));\n\t\tcover = son[0]->cover + son[1]->cover + 1;\n\t}\n```\n- Query\n\n\u8fd9\u4e2a\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u548c\u5e73\u8861\u6811\u4e00\u6837\u7684\u5b9a\u4f4d\u7ed3\u70b9\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u526a\u679d\uff0c\u5c31\u662f\u4f18\u5148\u9012\u5f52\u66f4\u53ef\u80fd\u5b58\u5728\u7b54\u6848\u7684\u4e00\u8fb9\uff0c\u7136\u540e\u5224\u65ad\u53e6\u5916\u4e00\u8fb9\u662f\u5426\u53ef\u80fd\u5b58\u5728\u7b54\u6848\uff0c\u5982\u679c\u53ef\u80fd\u5b58\u5728\u5c31\u9012\u5f52\uff0c\u4e0d\u5b58\u5728\u76f4\u63a5\u526a\u6389\u3002\n\n```cpp\ninline void query(Node *o, Point key)\n{\n\tif (o == null)return;\n\tans = min(ans, Manhattan_dis(key, o->p));\n\tint dir = o->son[0]->dis(key) > o->son[1]->dis(key);\n\tquery(o->son[dir], key);//\u4f18\u5148\u9012\u5f52\u66f4\u53ef\u80fd\u5b58\u5728\u7b54\u6848\u7684\u4e00\u8fb9\n\tif (o->son[dir ^ 1]->dis(key) < ans)\n\t\tquery(o->son[dir ^ 1], key);//\u5982\u679c\u53e6\u5916\u4e00\u8fb9\u4e5f\u6709\u53ef\u80fd\u5b58\u5728\u7b54\u6848\uff0c\u9012\u5f52\n}\n```\n- \u4e24\u4e2aDis\u51fd\u6570\n\n\u8fd9\u4e2a\u6839\u636e\u9898\u610f\u5199\u7684\uff0c\u672c\u9898\u662f\u8981\u6c42\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u53e6\u5916\u5c01\u5728\u7ed3\u6784\u4f53\u91cc\u7684\u90a3\u4e2a\uff0c\u6c42\u7684\u662f\u5f53\u524d\u7ed3\u70b9\uff0c\u5230\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7ef4\u62a4\u77e9\u5f62\u8fb9\u754c\u7684\u6700\u5c0f\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\n\n## **\u6574\u5408->O2->AC**\n\n\u4e0d\u5f00O2\u6709\u4e00\u4e2a\u70b9\u4f1aT\uff0c\u4e0d\u8fc7\u636e\u8bf4\u5927\u591a\u6570K-D Tree\u90fd\u4f1aT\uff0c\u751a\u81f3\u90e8\u5206CDQ\u6709\u4e00\u4e2a\u70b9\u4e5f\u4f1aT\uff0c\u6240\u4ee5\u5c31\u5fc3\u5b89\u7406\u5f97\u5f00\u4e86O2.~~\u9003~~\n\n**(\u5b8c)**\n\n------------\n# Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#define re register\n#define alpha (0.75)\nusing namespace std;\nconst int N = 6e5 + 5;\nconst int INF = 0x3f3f3f3f;\nbool dimension;\nbool reg_dimension;\nint n, m, ans;\nstruct Point\n{\n\tint x, y;\n\tPoint(int X = 0, int Y = 0) :x(X), y(Y) {}\n};\nPoint a[N];\nstruct Node *null;\nstruct Node\n{\n\tint cover;\n\tPoint p, r1, r2;\n\tNode *son[2];\n\tinline void maintain()\n\t{\n\t\tr1.x = min(r1.x, min(son[0]->r1.x, son[1]->r1.x));\n\t\tr1.y = min(r1.y, min(son[0]->r1.y, son[1]->r1.y));\n\t\tr2.x = max(r2.x, max(son[0]->r2.x, son[1]->r2.x));\n\t\tr2.y = max(r2.y, max(son[0]->r2.y, son[1]->r2.y));\n\t\tcover = son[0]->cover + son[1]->cover + 1;\n\t}\n\tinline bool is_bad()\n\t{\n\t\treturn max(son[0]->cover, son[1]->cover) > cover*alpha + 5;\n\t}\n\tinline int dis(Point p)\n\t{\n\t\tif (this == null)return INF;\n\t\tint res = 0;\n\t\tif (p.x<r1.x || p.x>r2.x)res += p.x < r1.x ? r1.x - p.x : p.x - r2.x;\n\t\tif (p.y<r1.y || p.y>r2.y)res += p.y < r1.y ? r1.y - p.y : p.y - r2.y;\n\t\treturn res;\n\t}\n};\nNode mempool[N];\nNode *tail;\nNode *root;\ninline bool cmp(Point p1, Point p2)\n{\n\tif (dimension == 0)return p1.x < p2.x || (p1.x == p2.x && p1.y < p2.y);\n\treturn p1.y < p2.y || (p1.y == p2.y && p1.x < p2.x);\n}\ninline int Manhattan_dis(Point a, Point b)\n{\n\treturn abs(a.x - b.x) + abs(a.y - b.y);\n}\ninline void init()\n{\n\ttail = mempool;\n\tnull = tail++;\n\tnull->son[0] = null->son[1] = null;\n\tnull->r1 = Point(INF, INF);\n\tnull->r2 = Point(-INF, -INF);\n\tnull->cover = 0;\n\troot = null;\n}\ninline Node* new_node(Point key)\n{\n\tNode *o;\n\to = tail++;\n\to->son[0] = o->son[1] = null;\n\to->cover= 1;\n\to->p = o->r1 = o->r2 = key;\n\treturn o;\n}\ninline void travel(Node* p, vector<Node*>&x)\n{\n\tif (p == null)return;\n\ttravel(p->son[0], x);\n\tx.push_back(p);\n\ttravel(p->son[1], x);\n}\ninline Node* divide(vector<Node*>&x, int l, int r, bool d)\n{\n\tif (l >= r)return null;\n\tint mid = (l + r) >> 1;\n\tdimension = d;\n\tNode *o = x[mid];\n\to->son[0] = divide(x, l, mid, d ^ 1);\n\to->son[1] = divide(x, mid + 1, r, d ^ 1);\n\to->maintain();\n\treturn o;\n}\ninline void rebuild(Node *&o, bool d)\n{\n\tstatic vector<Node*>v;\n\tv.clear();\n\ttravel(o, v);\n\to = divide(v, 0, v.size(), d);\n}\ninline Node* build(int l, int r, bool d)\n{\n\tif (l >= r)return null;\n\tint mid = (l + r) >> 1;\n\tdimension = d;\n\tnth_element(a + l, a + mid, a + r, cmp);\n\tNode *o = new_node(a[mid]);\n\to->son[0] = build(l, mid, d ^ 1);\n\to->son[1] = build(mid + 1, r, d ^ 1);\n\to->maintain();\n\treturn o;\n}\ninline Node** __insert(Node *&o, Point key)\n{\n\tif (o == null)\n\t{\n\t\to = new_node(key);\n\t\treg_dimension = dimension;\n\t\treturn &null;\n\t}\n\telse\n\t{\n\t\to->cover++;\n\t\tbool dir = cmp(key, o->p) ^ 1;\n\t\tdimension ^= 1;\n\t\tNode** res = __insert(o->son[dir], key);\n\t\tif (o->is_bad())\n\t\t{\n\t\t\tres = &o;\n\t\t\treg_dimension = dimension;//\u8bb0\u5f55\u9012\u5f52\u8fc7\u7a0b\u4e2d\u6700\u540e\u4e00\u4e2a\u8f83\u4e3a\u4e0d\u5e73\u8861\u7684\u7ed3\u70b9\n\t\t}\n\t\to->maintain();\n\t\treturn res;\n\t}\n}\ninline void insert(Point key)\n{\n\treg_dimension = dimension = 0;\n\tNode** res = __insert(root, key);\n\tif (*res != null)rebuild(*res, reg_dimension);\n}\ninline void query(Node *o, Point key)\n{\n\tif (o == null)return;\n\tans = min(ans, Manhattan_dis(key, o->p));\n\tint dir = o->son[0]->dis(key) > o->son[1]->dis(key);\n\tquery(o->son[dir], key);\n\tif (o->son[dir ^ 1]->dis(key) < ans)\n\t\tquery(o->son[dir ^ 1], key);\n}\ninline int read()\n{\n\tre char ch = getchar(); re int f = 1, x = 0;\n\twhile (ch > '9' || ch < '0') { if (ch == '-')f = -1; ch = getchar(); }\n\twhile (ch >= '0'&&ch <= '9') { x = x * 10 + ch - '0'; ch = getchar(); }\n\treturn x * f;\n}\nint main()\n{\n\tinit();\n\tn = read(); m = read();\n\tfor (re int i = 0; i < n; i++)a[i].x = read(), a[i].y = read();\n\troot = build(0, n, 0);\n\twhile (m--)\n\t{\n\t\tre int op = read(), x = read(), y = read();\n\t\tif (op == 1)insert(Point(x, y));\n\t\telse\n\t\t{\n\t\t\tans = INF;\n\t\t\tquery(root, Point(x, y));\n\t\t\tprintf(\"%d\\n\", ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1558273831,
        "uid": 146794,
        "name": "tyg\u8fd9\u4e2alajixswl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "## P4169-CDQ\u5206\u6cbb/K-D tree\uff08\u4e09\u7ef4\u504f\u5e8f\uff09-\u5929\u4f7f\u73a9\u5076\n\n~~\u8fd9\u662f\u4e00\u7bc7\u4e24\u79cd\u505a\u6cd5\u90fd\u6709\u7684\u9898\u89e3~~\n\n### \u9898\u5916\u8bdd\n\n\u6211\u5199\u5410\u4e86\u2026\u2026\n\n\u672c\u7740\u4e0d\u770b\u9898\u89e3\u7684\u539f\u5219\uff0c\u6ca1\u5199\uff08\u4e0d\u4f1a\uff09K-D tree\uff0c\u5c31\u5199\u4e86\u4e2acdq\u5206\u6cbb\u7684\u505a\u6cd5\u3002\u4e0b\u9762\u662f\u6211\u7684\u5199\u9898\u6b65\u9aa4\uff1a\n\n1. \u60f3\u7740\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e0d\u4e86\u533a\u95f4\u6700\u503c\uff0c\u4e8e\u662f\u5199\u4e86\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u4e00\u4e2a**\u7684\u9519\u8bef\u8c03\u4e86\u51e0\u4e2a\u5c0f\u65f6\uff1b\n\n2. cdq\u53ea\u5199\u4e86\u4e24\u4e2a\u65b9\u5411\u3002\u663e\u7136\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u6ca1\u8003\u8651\u4fee\u6539\u3002\u6240\u4ee5\u6302\u4e86\uff1b\n\n3. \u52a0\u4e0a\u53e6\u5916\u4e24\u4e2a\u65b9\u5411\uff0c\u6b63\u786e\u6027\u7ec8\u4e8eok\uff0c\u5174\u9ad8\u91c7\u70c8\u5730\u4ea4\u4e0a\u53bb\u7136\u540eTLE\uff1b\n\n   ```cpp\n   #include<iostream>\n   #include<cstdio>\n   #include<cstring>\n   #include<cctype>\n   #include<algorithm>\n   #include<cmath>\n   using namespace std;\n   char buf[1<<23],*p1=buf,*p2=buf,obuf[1<<23],*O=obuf;\n   #define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n   inline int read(){\n   \tint w=0,x=0;char c=getchar();\n   \twhile(!isdigit(c))w|=c=='-',c=getchar();\n   \twhile(isdigit(c))x=(x<<3)+(x<<1)+(c^48),c=getchar();\n   \treturn w?-x:x;\n   }\n   void print(long long x) {\n       if(x>9) print(x/10);\n       *O++=x%10+'0';\n   }\n   namespace star\n   {\n   \tconst int maxn=6e5+10,INF=0x3f3f3f3f;\n   \tint n,m,ans[maxn],LN=0,RN=1000006;\n   \tstruct query{\n   \t\tint x,y,id,op;\n   \t}q[maxn<<1];\n   \tinline bool cmp1(query a,query b){return a.x<b.x;}\n   \tinline bool cmp2(query a,query b){return a.x>b.x;}\n   \tstruct SegmentTree{\n   \t\t#define ls (ro<<1)\n   \t\t#define rs (ro<<1|1)\n   \t\tstruct tree{\n   \t\t\tint l,r,mx;\n   \t\t}e[16000005];\n   \t\tvoid build(int ro,int l,int r){\n   \t\t\te[ro].l=l,e[ro].r=r;\n   \t\t\tif(l==r){\n   \t\t\t\te[ro].mx=-INF;return;\n   \t\t\t}\n   \t\t\tint mid=l+r>>1;\n   \t\t\tbuild(ls,l,mid);\n   \t\t\tbuild(rs,mid+1,r);\n   \t\t\te[ro].mx=max(e[ls].mx,e[rs].mx);\n   \t\t}\n   \t\tvoid update(int ro,int k,int v){\n   \t\t\tint l=e[ro].l,r=e[ro].r;\n   \t\t\tif(l==r){\n   \t\t\t\te[ro].mx=max(e[ro].mx,v);return;\n   \t\t\t}\n   \t\t\tint mid=l+r>>1;\n   \t\t\tif(k<=mid)update(ls,k,v);\n   \t\t\telse update(rs,k,v);\n   \t\t\te[ro].mx=max(e[ls].mx,e[rs].mx);\n   \t\t}\n   \t\tvoid update2(int ro,int k,int v){\n   \t\t\tint l=e[ro].l,r=e[ro].r;\n   \t\t\tif(l==r){\n   \t\t\t\te[ro].mx=v;return;\n   \t\t\t}\n   \t\t\tint mid=l+r>>1;\n   \t\t\tif(k<=mid)update2(ls,k,v);\n   \t\t\telse update2(rs,k,v);\n   \t\t\te[ro].mx=max(e[ls].mx,e[rs].mx);\n   \t\t}\n   \t\tint query(int ro,int x,int y){\n   \t\t\tint l=e[ro].l,r=e[ro].r;\n   \t\t\tif(l==x and r==y)return e[ro].mx;\n   \t\t\tint mid=l+r>>1;\n   \t\t\tif(y<=mid)return query(ls,x,y);\n   \t\t\telse if(x>mid)return query(rs,x,y);\n   \t\t\telse return max(query(ls,x,mid),query(rs,mid+1,y));\n   \t\t}\n   \t\t#undef ls\n   \t\t#undef rs\n   \t}T;\n   \tvoid cdq(int l,int r){\n   \t\tif(l==r)return;\n   \t\tint mid=l+r>>1;\n   \t\tcdq(l,mid),cdq(mid+1,r);\n   \t\tint i,j;\n   \t\tsort(q+l,q+mid+1,cmp1),sort(q+mid+1,q+r+1,cmp1);\n   \t\tfor(i=mid+1,j=l;i<=r;i++){\n   \t\t\twhile(q[j].x<=q[i].x and j<=mid){\n   \t\t\t\tif(!q[j].op) T.update(1,q[j].y,q[j].x+q[j].y);j++;\n   \t\t\t}\n   \t\t\tif(q[i].op)ans[q[i].id]=min(ans[q[i].id],q[i].x+q[i].y-T.query(1,LN,q[i].y));\n   \t\t}\n   \t\tfor(i=l;i<j;i++) T.update2(1,q[i].y,-INF);\n   \t\t\n   \t\tfor(i=mid+1,j=l;i<=r;i++){\n   \t\t\twhile(q[j].x<=q[i].x and j<=mid){\n   \t\t\t\tif(!q[j].op) T.update(1,q[j].y,q[j].x-q[j].y);j++;\n   \t\t\t}\n   \t\t\tif(q[i].op)ans[q[i].id]=min(ans[q[i].id],q[i].x-q[i].y-T.query(1,q[i].y,RN));\n   \t\t}\n   \t\tfor(i=l;i<j;i++) T.update2(1,q[i].y,-INF);\n   \t\t\n   \t\tsort(q+l,q+mid+1,cmp2),sort(q+mid+1,q+r+1,cmp2);\n   \t\tfor(i=mid+1,j=l;i<=r;i++){\n   \t\t\twhile(q[j].x>=q[i].x and j<=mid){\n   \t\t\t\tif(!q[j].op) T.update(1,q[j].y,q[j].y-q[j].x);j++;\n   \t\t\t}\n   \t\t\tif(q[i].op)ans[q[i].id]=min(ans[q[i].id],q[i].y-q[i].x-T.query(1,LN,q[i].y));\n   \t\t}\n   \t\tfor(i=l;i<j;i++) T.update2(1,q[i].y,-INF);\n   \t\t\n   \t\tfor(i=mid+1,j=l;i<=r;i++){\n   \t\t\twhile(q[j].x>=q[i].x and j<=mid){\n   \t\t\t\tif(!q[j].op) T.update(1,q[j].y,-q[j].y-q[j].x);j++;\n   \t\t\t}\n   \t\t\tif(q[i].op)ans[q[i].id]=min(ans[q[i].id],-q[i].y-q[i].x-T.query(1,q[i].y,RN));\n   \t\t}\n   \t\tfor(i=l;i<j;i++) T.update2(1,q[i].y,-INF);\n   \t}\n   \tinline void work(){\n   \t\tn=read(),m=read();\n   \t\tmemset(ans,INF,sizeof ans);\n   \t\tfor(int i=1;i<=n;i++) q[i].x=read(),q[i].y=read(),LN=min(LN,q[i].y),RN=max(RN,q[i].y),q[i].op=0;\n   \t\tfor(int i=n+1;i<=n+m;i++){\n   \t\t\tq[i].op=(read()-1);\n   \t\t\tq[i].id=q[i-1].id+q[i].op;\n   \t\t\tq[i].x=read(),q[i].y=read();\n   \t\t}\n   \t\tint mx=q[n+m].id;\n   \t\tT.build(1,LN,RN);\n   \t\tcdq(1,n+m);\n   \t\tfor(int i=1;i<=mx;i++)print(ans[i]),*O++='\\n';\n   \t\tfwrite(obuf,O-obuf,1,stdout);\n   \t}\n   }\n   signed main(){\n   \tstar::work();\n   \treturn 0;\n   }\n   \n   ```\n\n4. \u539f\u4ee5\u4e3a\u662f\u7ebf\u6bb5\u6811\u5e38\u6570\u8fc7\u5927\uff0c\u5b66\u4e60\u4e86\u6811\u72b6\u6570\u7ec4\u89e3\u6cd5\u7136\u540eWA\u4e86\uff1b\n\n5. \u6539\u56de\u4e86\u7ebf\u6bb5\u6811\uff0c\u628asort\u6362\u6210\u4e86merge\uff0c\u53c8WA\uff1b\n\n6. \u53ea\u6709\u6700\u540e\u4e00\u4e2a\u529e\u6cd5\u4e86\uff1a\u6539\u6210\u6811\u72b6\u6570\u7ec4+merge\uff0c\u8981\u662f\u518d\u6302\u6211\u5c31\u5f53\u573a\u53bb\u5b66KD-tree.\n\n7. \u5199\u6302\u4e86\uff0c\u6211\u6eda\u53bb\u5b66K-D tree\u4e86\u3002\n\n## K-D tree\n\nK-D tree\u662f\u4e00\u79cd\u7ef4\u62a4\u591a\u7ef4\u7a7a\u95f4\u70b9\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u8fd9\u9053\u9898\u4e0a\u662f\u4e24\u7ef4\u6240\u4ee5\u4e5f\u53eb\u4f5c2-D tree\u3002\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u662f\u5c06\u6bcf\u4e2a\u8282\u70b9\u6240\u5728\u7684\u533a\u57df\u5207\u5272\u9012\u5f52\u5efa\u6210\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e00\u4e2a\u6811\u4e0a\u7684\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u5b9e\u9645\u7684\u7ed3\u70b9\uff0c\u4f46\u53c8\u5b58\u50a8\u7740\u9009\u62e9\u8fd9\u4e2a\u7ed3\u70b9\u65f6\u7684\u533a\u57df\u5927\u5c0f\u3002\n\n#### \u5efa\u6811\n\nKDT\u5728\u5efa\u6811\u65f6\uff0c\u4e3a\u4e86\u8ba9\u5b83\u4fdd\u6301\u5e73\u8861\uff0c\u6211\u4eec\u9700\u8981\u5c3d\u91cf\u9009\u62e9\u6240\u5728\u7a7a\u95f4\u7ef4\u5ea6\u7684**\u4e2d\u4f4d\u6570**\uff0c\u6240\u4ee5\u5728\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528nth_element\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u662f\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u5c06\u4e00\u4e2a\u6570\u6446\u5230\u5b83\u6392\u5e8f\u540e\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\uff0c\u800c\u5c06\u6bd4\u5b83\u5c0f\u7684\u653e\u5728\u5de6\u8fb9\uff0c\u6bd4\u4ed6\u5927\u7684\u653e\u5728\u53f3\u8fb9\uff08\u4e0d\u91cd\u8f7d\u8fd0\u7b97\u7b26\u60c5\u51b5\u4e0b\u662f\u4ece\u5c0f\u5230\u5927\uff09\uff0c\u4f46\u4e0d\u662f\u6709\u5e8f\u6392\u5217\u3002\n\n```cpp\nint build(int l,int r){\n\tif(l>r)return 0;\n\tint mid=l+r>>1;\n\tdouble av[2],va[2];\n\tav[0]=av[1]=va[0]=va[1]=0;\n\tfor(int i=l;i<=r;i++)av[0]+=e[g[i]].x,av[1]+=e[g[i]].y;\n\tav[0]/=(r-l+1),av[1]/=(r-l+1);\n\tfor(int i=l;i<=r;i++)\n\t\tva[0]+=(av[0]-e[g[i]].x)*(av[0]-e[g[i]].x),\n\t\tva[1]+=(av[1]-e[g[i]].y)*(av[1]-e[g[i]].y);//\u5bfb\u627e\u5e94\u8be5\u5207\u5272\u7684\u7ef4\u5ea6\n\tif(va[0]>va[1])nth_element(g+l,g+mid,g+r+1,cmpx),e[g[mid]].d=1;//d\u662f\u7ef4\u5ea6\n\telse nth_element(g+l,g+mid,g+r+1,cmpy),e[g[mid]].d=2;\n\te[g[mid]].ls=build(l,mid-1);\n\te[g[mid]].rs=build(mid+1,r);\n\tmaintain(g[mid]);//pushup\u51fd\u6570\uff0c\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\u3002\n\treturn g[mid];\n}\n```\n\n#### \u63d2\u5165\n\n\u4eceroot\u9012\u5f52\u4e0b\u53bb\u67e5\u627e\uff0c\u6309\u7167\u5f53\u524d\u8282\u70b9\u6240\u5728\u7ef4\u5ea6\u5411\u4e0b\u63d2\u5165\uff0c\u5230\u8fbe\u7a7a\u8282\u70b9\u65f6\u65b0\u5efa\u8282\u70b9\u5b58\u50a8\u4fe1\u606f\u3002\n\n\u6ce8\u610f\uff1a\u5f53\u63d2\u5165\u8282\u70b9\u8fc7\u591a\u65f6KDT\u6709\u53ef\u80fd\u5931\u8861\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u5c06\u5b83\u62cd\u6241\u91cd\u5efa\uff08pia~\uff09\uff08\u56e0\u4e3aKDT\u7684\u7ed3\u6784\uff0c\u597d\u50cf\u6ca1\u6709\u522b\u7684\u65b9\u6cd5\u4e86\uff1f\uff09\u2460\n\n```cpp\nvoid insert(int &x,int k){\n\tif(!x){\n\t\tx=k,maintain(k);return;\n\t}\n\tif(e[x].d==1){\n\t\tif(e[k].x<=e[x].x)insert(e[x].ls,k);\n\t\telse insert(e[x].rs,k);\n\t}else{\n\t\tif(e[k].y<=e[x].y)insert(e[x].ls,k);\n\t\telse insert(e[x].rs,k);\n\t}\n\tmaintain(x);\n\tif(bad(x)) rebuild(x);//pia\n}\n```\n\n```cpp\ninline bool bad(int x){return 0.9*e[x].siz<=(double)max(e[e[x].ls].siz,e[e[x].rs].siz);}\n//0.9\u4e3a\u62cd\u6241\u7684\u9608\u503c\uff0c\u8d8a\u5927\u62cd\u6241\u8d8a\u4e0d\u9891\u7e41\uff0c\u4f46\u6709\u53ef\u80fd\u5931\u8861\uff0c\u6309\u7167\u5b9e\u9645\u60c5\u51b5\u8c03\u6574\u3002\u6ce8\u610f\uff0c\u5b9e\u6d4b\u5176\u4e3a0.8\u65f6\u4f1a\u7206\u6808\u3002\n```\n\n```cpp\nvoid getson(int x){\n\tif(!x)return;\n\tgetson(e[x].ls);\n\tg[++t]=x;\n\tgetson(e[x].rs);\n}\ninline void rebuild(int &x){\n\tt=0;\n\tgetson(x);//\u627e\u5230\u6240\u6709\u88ab\u62cd\u6241\u7684\u8282\u70b9\uff08\u5176\u5b9e\u6ca1\u5fc5\u8981\uff0c\u65b0\u5efa\u8282\u70b9\u4e5f\u884c\uff09\n\tx=build(1,t);\n}\n```\n\n#### \u67e5\u8be2\n\n\u6b64\u9898\u8981\u6c42\u67e5\u8be2\u8ddd\u79bb\u5173\u952e\u70b9\u6700\u8fd1\u7684\u70b9\u7684\u8ddd\u79bb\u3002\n\n\u6ce8\u610f\uff1a\u6211\u4eec\u5728\u67e5\u8be2\u4e0b\u4f20\u7684\u65f6\u5019\u9700\u8981\u6bd4\u8f83\u7684\u662f\u533a\u5757\u4f4d\u7f6e\u8ddd\u79bb\u5173\u952e\u70b9\u7684\u8ddd\u79bb\uff0c\u800c\u7edf\u8ba1\u7b54\u6848\u662f\u6309\u7167\u5f53\u524d\u8282\u70b9\u7684\u5750\u6807\u7edf\u8ba1\u3002\n\n```cpp\nint ans=INF;//\u8bf7\u4e0d\u8981\u5b66\u9119\u4eba\u7528\u5168\u5c40\u53d8\u91cf\u4f20\u53c2\uff0c\u6211\u88ab\u4eba\u5634\u4e86\nvoid query(int x){\n\tcmin(ans,dist(x));\n\tint dl=INF,dr=INF;\n\tif(e[x].ls)dl=getdis(e[x].ls);\n\tif(e[x].rs)dr=getdis(e[x].rs);\n\tif(dl<dr){\n\t\tif(dl<ans)query(e[x].ls);\n\t\tif(dr<ans)query(e[x].rs);\n\t}else{\n\t\tif(dr<ans)query(e[x].rs);\n\t\tif(dl<ans)query(e[x].ls);\n\t}\n}\n```\n\n### \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#include<cmath>\n#define cmin(i,j) (i)=min((i),(j))\n#define cmax(i,j) (i)=max((i),(j))\nusing namespace std;\ninline int read(){\n\tint w=0,x=0;char c=getchar();\n\twhile(!isdigit(c))w|=c=='-',c=getchar();\n\twhile(isdigit(c))x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nnamespace star\n{\n\tconst int maxn=6e5+10,INF=0x3f3f3f3f;\n\tint n,m,rt,tot,qx,qy,g[maxn],t;\n\tstruct node{\n\t\tint x,y,ls,rs,l[2],r[2],siz,d;\n\t}e[maxn];\n\tinline bool cmpx(int a,int b){return e[a].x<e[b].x;}\n\tinline bool cmpy(int a,int b){return e[a].y<e[b].y;}\n\tinline void maintain(int x){\n\t\te[x].siz=e[e[x].ls].siz+e[e[x].rs].siz+1;\n\t\te[x].l[0]=e[x].r[0]=e[x].x;\n\t\te[x].l[1]=e[x].r[1]=e[x].y;\n\t\tif(e[x].ls)\n\t\t\tcmin(e[x].l[0],e[e[x].ls].l[0]),cmax(e[x].r[0],e[e[x].ls].r[0]),\n\t\t\tcmin(e[x].l[1],e[e[x].ls].l[1]),cmax(e[x].r[1],e[e[x].ls].r[1]);\n\t\tif(e[x].rs)\n\t\t\tcmin(e[x].l[0],e[e[x].rs].l[0]),cmax(e[x].r[0],e[e[x].rs].r[0]),\n\t\t\tcmin(e[x].l[1],e[e[x].rs].l[1]),cmax(e[x].r[1],e[e[x].rs].r[1]);\n\t}\n\tint build(int l,int r){\n\t\tif(l>r)return 0;\n\t\tint mid=l+r>>1;\n\t\tdouble av[2],va[2];\n\t\tav[0]=av[1]=va[0]=va[1]=0;\n\t\tfor(int i=l;i<=r;i++)av[0]+=e[g[i]].x,av[1]+=e[g[i]].y;\n\t\tav[0]/=(r-l+1),av[1]/=(r-l+1);\n\t\tfor(int i=l;i<=r;i++)\n\t\t\tva[0]+=(av[0]-e[g[i]].x)*(av[0]-e[g[i]].x),\n\t\t\tva[1]+=(av[1]-e[g[i]].y)*(av[1]-e[g[i]].y);\n\t\tif(va[0]>va[1])nth_element(g+l,g+mid,g+r+1,cmpx),e[g[mid]].d=1;\n\t\telse nth_element(g+l,g+mid,g+r+1,cmpy),e[g[mid]].d=2;\n\t\te[g[mid]].ls=build(l,mid-1);\n\t\te[g[mid]].rs=build(mid+1,r);\n\t\tmaintain(g[mid]);\n\t\treturn g[mid];\n\t}\n\tvoid getson(int x){\n\t\tif(!x)return;\n\t\tgetson(e[x].ls);\n\t\tg[++t]=x;\n\t\tgetson(e[x].rs);\n\t}\n\tinline void rebuild(int &x){\n\t\tt=0;\n\t\tgetson(x);\n\t\tx=build(1,t);\n\t}\n\tinline bool bad(int x){return 0.9*e[x].siz<=(double)max(e[e[x].ls].siz,e[e[x].rs].siz);}\n\tvoid insert(int &x,int k){\n\t\tif(!x){\n\t\t\tx=k,maintain(k);return;\n\t\t}\n\t\tif(e[x].d==1){\n\t\t\tif(e[k].x<=e[x].x)insert(e[x].ls,k);\n\t\t\telse insert(e[x].rs,k);\n\t\t}else{\n\t\t\tif(e[k].y<=e[x].y)insert(e[x].ls,k);\n\t\t\telse insert(e[x].rs,k);\n\t\t}\n\t\tmaintain(x);\n\t\tif(bad(x)) rebuild(x);\n\t}\n\tinline int getdis(int x){return max(0,qx-e[x].r[0])+max(0,e[x].l[0]-qx)+max(0,qy-e[x].r[1])+max(0,e[x].l[1]-qy);}\n\tinline int dist(int x){return abs(qx-e[x].x)+abs(qy-e[x].y);}\n\tint ans;\n\tvoid query(int x){\n\t\tcmin(ans,dist(x));\n\t\tint dl=INF,dr=INF;\n\t\tif(e[x].ls)dl=getdis(e[x].ls);\n\t\tif(e[x].rs)dr=getdis(e[x].rs);\n\t\tif(dl<dr){\n\t\t\tif(dl<ans)query(e[x].ls);\n\t\t\tif(dr<ans)query(e[x].rs);\n\t\t}else{\n\t\t\tif(dr<ans)query(e[x].rs);\n\t\t\tif(dl<ans)query(e[x].ls);\n\t\t}\n\t}\n\tinline void work(){\n\t\tn=read(),m=read();\n\t\twhile(n--){\n\t\t\te[++tot].x=read(),e[tot].y=read();\n\t\t\tg[tot]=tot;\n\t\t}\n\t\trt=build(1,tot);\n\t\twhile(m--){\n\t\t\tif(read()==1){\n\t\t\t\te[++tot].x=read(),e[tot].y=read();\n\t\t\t\tinsert(rt,tot);\n\t\t\t}else{\n\t\t\t\tqx=read(),qy=read();ans=INF;query(rt);\n\t\t\t\tprintf(\"%d\\n\",ans);\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main(){\n\tstar::work();\n\treturn 0;\n}\n```\n\n# \u6ce8\u91ca\n\n\u2460K-D tree\u7684\u91cd\u5efa\u65b9\u5f0f\u542b\u4e89\u8bae\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4f5c\u8005\u662f\u4eceOIwiki\u4e0a\u5b66\u4e60\u7684K-D tree\u5199\u6cd5\uff0c\u800c\u5728\u5f53\u9875\u4e0b\u65b9\u8bc4\u8bba\u533a\u4e2d\u6709\u4eba\u63d0\u51faKDT\u4e0d\u5e94\u8be5\u50cf\u66ff\u7f6a\u7f8a\u4e00\u6837\u6309\u7167\u9608\u503c\u91cd\u6784\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\u4f1a\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\u591a\u6b21\u91cd\u6784\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u9000\u5316\u3002\u4ed6\u63d0\u51fa\uff0c\u5e94\u8be5\u6bcf\u63d2\u5165$\\sqrt n$\u4e2a\u70b9\u540e\u5c06\u5168\u6811\u8fdb\u884c\u91cd\u6784\uff0c\u8fd9\u6837\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u52a3\u60c5\u51b5\u4e0b\u5168\u90e8\u63d2\u5165\u4e3a$O(n\\sqrt n)$\uff0c\u67e5\u8be2\u6700\u52a3\u60c5\u51b5\u4e0b\u5355\u6b21\u4e3a$O(\\sqrt n)$\u3002\u4f46\u662f\u5927\u5bb6\u4e0d\u7528\u62c5\u5fc3\uff0c\u611a\u4ee5\u4e3a\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u672c\u4eba\u8fd9\u79cd\u5199\u6cd5\u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6bd4\u53e6\u4e00\u79cd\u4f18\u7684\uff0c\u5b9e\u5728\u4e0d\u884c\u53ef\u4ee5\u9002\u5f53\u8c03\u6574\u9608\u503c\u3002\u6b22\u8fce\u5927\u5bb6~~\u6fc0\u70c8\u5bf9\u7ebf~~\u3002\n\n",
        "postTime": 1601943951,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "\u4e0d\u4f1aKDT\uff0c\u7136\u800cCDQ\u5f53\u7136\u662f\u6709\u4f18\u52bf\u7684\u3002\n\n\u7b2c\u4e00\u773c\u5c31\u80fd\u53d1\u73b0\u6bcf\u4e00\u4e2a\u4fee\u6539\u6216\u67e5\u8be2\u90fd\u6709\u4e09\u4e2a\u5c5e\u6027\uff0c$x,y$\uff0c\u8fd8\u6709\u65f6\u95f4\u6233\u3002\u90a3\u4e48\u600e\u6837\u628a\u5b83\u8f6c\u5316\u4e3a\u4e00\u822c\u7684\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\u5462\uff1f\n\n\u5047\u5982\u6240\u6709\u8bb0\u5fc6\u7684\u70b9\u90fd\u5728\u67e5\u8be2\u7684\u70b9\u7684\u5de6\u4e0b\u89d2\uff0c\u90a3\u4e48\u5c31\u4f1a\u53ea\u6709$x,y$\u548c\u65f6\u95f4\u6233\u4e09\u4e2a\u7ef4\u5ea6\u90fd\u5c0f\u4e8e\u67e5\u8be2\u70b9\u7684\u8bb0\u5fc6\u70b9\u53ef\u4ee5\u4ea7\u751f\u8d21\u732e\uff0c\u8fd9\u5c31\u662f\u4e09\u7ef4\u504f\u5e8f\u4e86\u3002\n\n\u8d21\u732e\u662f\u4ec0\u4e48\u5462\uff1f\u8bbe\u6709\u82e5\u5e72$j$\u5bf9$i$\u4ea7\u751f\u4e86\u8d21\u732e\uff0c\u90a3\u4e48\u76f4\u63a5\u53bb\u7edd\u5bf9\u503c\uff0c\u7b54\u6848\u5c31\u662f$\\min\\{x_i-x_j+y_i-y_j\\}$\uff0c\u4e5f\u5c31\u662f$x_i+y_i-\\max\\{x_j+y_j\\}$\uff0c\u8fd9\u4e2a\u8fd8\u662f\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u53ea\u4e0d\u8fc7\u6539\u6210\u7ef4\u62a4\u524d\u7f00\u6700\u5927\u503c\u3002\u7b2c\u4e00\u7ef4\u65f6\u95f4\u6233\uff0c\u8f93\u5165\u5df2\u7ecf\u6392\u597d\u5e8f\u4e86\uff1b\u7b2c\u4e8c\u4f4d$x$\u5f52\u5e76\uff1b\u7b2c\u4e09\u4f4d$y$\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u7136\u800c\u5047\u8bbe\u5e76\u4e0d\u6210\u7acb\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e2a\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u70b9\u53ea\u53ef\u80fd\u4f1a\u5728\u67e5\u8be2\u70b9\u7684\u56db\u4e2a\u65b9\u5411\uff08\u5de6\u4e0b\uff0c\u5de6\u4e0a\uff0c\u53f3\u4e0b\uff0c\u53f3\u4e0a\uff09\uff0c\u90a3\u4e48\u5bf9\u6240\u6709\u70b9\u8fd8\u8981\u8fdb\u884c$3$\u904d\u5750\u6807\u7ffb\u8f6c\uff08\u65b0\u5750\u6807\u7b49\u4e8e\u503c\u57df\u51cf\u53bb\u539f\u5750\u6807\uff09\uff0c\u505a$4$\u904dCDQ\uff0c\u5c31\u53ef\u4ee5\u7edf\u8ba1\u5230\u6bcf\u4e2a\u65b9\u5411\u7684\u6700\u4f18\u7b54\u6848\uff0c\u6700\u540e\u518d\u53d6$\\min$\u5373\u53ef\u3002\n\n$n,m=300000$\uff0c\u503c\u57df$1000000$\uff0c\u4e00\u770b\u8fd9$O((n+m)\\log(n+m)\\log k)$\u597d\u5927\uff0c\u8fd8\u8981\u8dd1$4$\u904d\uff0c\u771f\u7684\u4e0d\u4f1aT\u4e48\uff1f\u6240\u4ee5\u8fd8\u662f\u8981\u4f18\u5316\u4e00\u4e9b\u7ec6\u8282\u3002\n\n\u9996\u5148\uff0c\u849f\u84bb\u4ecd\u7136\u6cbf\u7528[\u4e09\u7ef4\u504f\u5e8f\u6a21\u677f\u7684\u505a\u6cd5](https://www.cnblogs.com/flashhu/p/9381075.html)\uff0c\u6ca1\u6709\u5bf9\u5143\u7d20\u5c01struct\u4ee5\u51cf\u5c11\u7a7a\u95f4\u4ea4\u6362\uff0c\u8fd9\u6837\u5728\u505a\u5b8c\u5750\u6807\u7ffb\u8f6c\u540e\u4e5f\u80fd\u66f4\u5feb\u8fd8\u539f\uff0c\u76f4\u63a5`for`\u4e00\u904d\u521d\u59cb\u5316\u3002\u7136\u800c\u4e5f\u4f1a\u5e26\u6765\u6570\u7ec4\u7684\u9891\u7e41\u8c03\u7528\uff0c\u849f\u84bb\u4e5f\u5728\u6000\u7591\u8fd9\u79cd\u4f18\u5316\u7684\u53ef\u884c\u6027\uff0c\u8fd8\u671bDalao\u6307\u6559\u3002\n\n\u63a5\u7740\uff0c\u6211\u4eec\u53d1\u73b0\u5de6\u8fb9\u6709$n$\u4e2a\u5143\u7d20\u90fd\u786e\u5b9a\u4e86\u662f\u8bb0\u5fc6\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4e0d\u5fc5\u5bf9$n+m$\u4e2a\u70b9\u90fd\u8dd1CDQ\u4e86\uff0c\u53ea\u5bf9\u540e\u9762$m$\u4e2a\u70b9\u8dd1\uff0c\u524d\u9762\u7684$n$\u4e2a\u70b9\u76f4\u63a5\u9884\u5904\u7406\u6309$x$\u7b2c\u4e00\u5173\u952e\u5b57\u3001$y$\u7b2c\u4e8c\u5173\u952e\u5b57sort\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u964d\u5230\u4e86$O(n\\log n+m\\log m\\log k+n\\log k)$\u4e86\u3002\u7136\u800c\u505a\u5b8c\u5750\u6807\u7ffb\u8f6c\u540e\u4e5f\u522b\u5fd8\u4e86\u5904\u7406\u4e00\u4e0b\u3002\u5982\u679c\u8fd9\u4e00\u6b21\u7ffb\u8f6c\u7684\u662f$y$\uff0c\u90a3\u4e48$x$\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff1b\u5982\u679c\u7ffb\u8f6c\u7684\u662f$x$\uff0c\u90a3\u4e48\u4e5f\u76f4\u63a5\u7ffb\u8f6c\u6570\u7ec4\u5c31\u597d\u5566\uff01\n\n\u81f3\u4e8efread\u4ec0\u4e48\u7684\u7528\u4e0a\u4e5f\u597d\u3002\u52a0\u4e0a\u8fd9\u4e00\u5806\u4f18\u5316\uff0c\u4ee3\u7801\u5c31\u670990\u884c\u4e86\u3002\n\n\u7136\u540e\u4e00\u4ea4\u4e0a\u53bb\u5c311A\u4e86\uff01\uff1f\u5e73\u65f6\u4e60\u60ef\u4e86\u6ee1\u5c4f\u6bb7\u7ea2\u7684WA\uff0c\u849f\u84bb\u4e5f\u4e0d\u5f97\u4e0d\u611f\u53f9\uff0c\u6bd4\u8d77\u4e0d\u5c11\u6570\u636e\u7ed3\u6784\uff0cCDQ\u771f\u662f\u601d\u8def\u677f\u53c8\u597d\u5199\u8fd8\u597d\u8c03\u3002\n\n\u7136\u800cBZOJ\u7684$n,m$\u90fd\u6709$500000$\uff0cCDQ\u8fc7\u4e0d\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\u8fd8\u662fstO\u697c\u4e0aCDQ\u8dd1\u5f97\u8d85\u5feb\u7684\u5de8\u4f6c\u5427\uff0c\u849f\u84bb\u4e0d\u4f1a\u5361\u5e38\u3002\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define RG register\n#define I inline void\n#define R RG int\n#define gc          if(++pp==pe)fread (pp=buf,1,SZ,stdin)\n#define pc(C) *pp=C;if(++pp==pe)fwrite(pp=buf,1,SZ,stdout)\nconst int N=3e5,D=1e6+2,SZ=1<<19,INF=20020307;\nchar buf[SZ],*pe=buf+SZ,*pp=pe-1;\nint x[N],y[N],p[N],q[N],f[N],ans[N],e[D+1];\nbool t[N];\nstruct NODE{\n    int x,y;\n    inline bool operator<(RG NODE b)const{\n        return x<b.x||(x==b.x&&y<b.y);\n    }\n}a[N];//\u524dn\u4e2a\u70b9\ninline int in(){\n    gc;while(*pp<'-')gc;\n    R x=*pp&15;gc;\n    while(*pp>'-'){x*=10;x+=*pp&15;gc;}\n    return x;\n}\nI out(R x){\n    if(x>9)out(x/10);\n    pc(x%10|'0');\n}\nI min(R&x,R y){if(x>y)x=y;}\nI upd(R i,R v){for(;i<=D;i+=i&-i)if(e[i]<v)e[i]=v;}\nI qry(R i,R&v){for(;i   ;i-=i&-i)if(v<e[i])v=e[i];}\nI clr(R i)    {for(;i<=D;i+=i&-i)e[i]=0;}\nvoid cdq(R*p,R m){//\u4e09\u7ef4\u504f\u5e8fDalao\u4eec\u90fd\u4f1a\u5427\n    if(m==1)return;\n    R n=m>>1,i,j,k;\n    cdq(p,n);cdq(p+n,m-n);\n    memcpy(q,p,m<<2);\n    for(k=i=0,j=n;i<n&&j<m;++k)\n        if(x[q[i]]<=x[q[j]]){\n            if(!t[q[i]])upd(y[q[i]],x[q[i]]+y[q[i]]);\n            p[k]=q[i++];\n        }\n        else{\n            if(t[q[j]])qry(y[q[j]],f[q[j]]);\n            p[k]=q[j++];\n        }\n    for(;j<m;++j)\n        if(t[q[j]])qry(y[q[j]],f[q[j]]);\n    memcpy(p+k,q+i,(n-i)<<2);//\u6ce8\u610f\u6536\u5c3e\u548c\u6e05\u7a7a\n    for(--i;~i;--i)clr(y[q[i]]);\n}\nint main(){\n    R n=in(),m=in(),i,j,k;\n    for(i=0;i<n;++i)\n        a[i].x=in()+1,a[i].y=in()+1;\n    std::sort(a,a+n);//n\u4e2a\u70b9\u9884\u6392\u5e8f\n    for(i=0;i<m;++i){\n        if((t[i]=in()-1))ans[i]=INF;//\u6ce8\u610f\u7ed9\u6781\u5927\u503c\n        x[i]=in()+1;y[i]=in()+1;//BIT\u4e0d\u80fd\u67090\u4e0b\u6807\uff0c\u6240\u4ee5\u6539\u4e00\u4e0b\n    }\n    for(k=1;k<=4;++k){\n        for(i=0;i<m;++i)p[i]=i;//\u5f88\u5feb\u5c31\u53ef\u4ee5\u521d\u59cb\u5316\u5e8f\u5217\n        cdq(p,m);\n        for(i=j=0;i<n&&j<m;){//\u5916\u9762\u7edf\u8ba1\u8fd8\u662f\u548cCDQ\u4e00\u6837\uff0c\u53ea\u662f\u4e0d\u7528\u5f52\u5e76\u4e86\n            if(a[i].x<=x[p[j]])\n                upd(a[i].y,a[i].x+a[i].y),++i;\n            else{\n                if(t[p[j]])qry(y[p[j]],f[p[j]]);\n                ++j;\n            }\n        }\n        for(;j<m;++j)\n            if(t[p[j]])qry(y[p[j]],f[p[j]]);\n        memset(e,0,sizeof(e));\n        for(i=0;i<m;++i)\n            if(t[i]&&f[i])min(ans[i],x[i]+y[i]-f[i]),f[i]=0;\n        if(k==4)break;\n        if(k&1){//\u7b2c\u4e00\u6b21\u3001\u7b2c\u4e09\u6b21\u4e0a\u4e0b\u7ffb\n            for(i=0;i<n;++i)a[i].y=D-a[i].y;\n            for(i=0;i<m;++i)y[i]=D-y[i];\n        }\n        else{//\u7b2c\u4e8c\u6b21\u5de6\u53f3\u7ffb\n            for(i=0;i<n;++i)a[i].x=D-a[i].x;\n            for(i=0;i<m;++i)x[i]=D-x[i];\n            for(i=0,j=n-1;i<j;++i,--j)std::swap(a[i],a[j]);//\u6ce8\u610f\u4ecd\u8981\u4fdd\u8bc1x\u4e0d\u964d\n        }\n    }\n    for(pp=buf,i=0;i<m;++i)\n        if(t[i]){out(ans[i]);pc('\\n');}\n    fwrite(buf,1,pp-buf,stdout);\n    return 0;\n}\n```",
        "postTime": 1532791280,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/aday526/p/solution-p4169.html)  \n## KD-Tree\u4f18\u5316\n\n\u76f8\u4fe1 $\\text{KD-Tree}$ \u5927\u5bb6\u90fd\u4f1a\u5427~~\u4e0d\u4f1a\u8fd8\u6765\u770b\u8fd9\u7bc7\u9898\u89e3\u4e48~~\uff0c\u4f46\u666e\u901a\u7684 $\\text{KD-Tree}$ \u5e76\u4e0d\u80fdAC\u6b64\u9898\u3002\u6240\u4ee5\u6211\u6765\u8bb2\u4e00\u4e9b\u4f18\u5316\u3002\n\n### 1.\u5efa\u6811\u4f18\u5316\n\n\u4f17\u6240\u5468\u77e5\uff0c$\\text{KD-Tree}$ \u662f\u7ef4\u62a4\u5207\u5272\u7a7a\u95f4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e3a\u4e86\u4fdd\u6301\u6811\u9ad8\u5728 $\\log n$ \u8303\u56f4\uff0c\u90a3\u4e48\u8981\u600e\u4e48\u53d6\u5207\u7684\u70b9\u548c\u5207\u5272\u65b9\u5411\u5462\uff1f\n\n\u5148\u5224\u65ad\u5207\u5272\u65b9\u5411\u3002\u6211\u4eec\u8981\u6ee1\u8db3\u5176\u7ef4\u5ea6\u7684\u70b9\u5dee\u5f02\u5ea6\u5927\uff0c\u90a3\u4e48\u80fd\u7ef4\u62a4\u7684\u7a7a\u95f4\u5c31\u66f4\u5927\u4e86\u3002\u5dee\u5f02\u5ea6\u5927\u5c31\u662f**\u65b9\u5dee**\u5927\uff0c\u6240\u4ee5\u8ba1\u7b97\u4e24\u4e2a\u7ef4\u5ea6\u7684\u65b9\u5dee\u6bd4\u8f83\u5373\u53ef\u3002\n\n\u7136\u540e\u9009\u5207\u5272\u7684\u70b9\u2014\u2014\u5f53\u7136\u662f\u4e2d\u4f4d\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u7528STL\u7684`nth_element`\u6765 $\\mathcal O(n)$ \u6c42\u51fa\u4e2d\u4f4d\u6570\u5e76\u628a\u6bd4\u5b83\u5c0f\u7684\u6570\u653e\u5b83\u5de6\u8fb9\uff0c\u6bd4\u5b83\u5927\u7684\u6570\u653e\u5728\u53f3\u8fb9\uff08\u5373\u672a\u5b8c\u6210\u7684\u5feb\u6392\uff09\uff0c\u7136\u540e\u9012\u5f52\u5efa\u6811\u5373\u53ef\u3002\n\nCode:\n\n```cpp\nil void pushup(int u){\n\tmxx[u]=max(mxx[u],mxx[now]);mxy[u]=max(mxy[u],mxy[now]);\n\tmnx[u]=min(mnx[u],mnx[now]);mny[u]=min(mny[u],mny[now]);\n}\nil bool cmp(node p,node q){\n    if(dcmp)return p.x<q.x;\n    return p.y<q.y;\n}\nint build(int l,int r){\n    if(l>r)return 0;\n    int mid=(l+r)/2;\n    double avx=0,avy=0,vax=0,vay=0;\n    for(int i=l;i<=r;i++)\n        avx+=a[i].x,avy+=a[i].y;\n    avx/=1.0*(r-l+1);avy/=1.0*(r-l+1);\n    for(int i=l;i<=r;i++)\n        vax+=sqr(a[i].x-avx),vay+=sqr(a[i].y-avy);\n    dcmp=d[mid]=(vax>vay);nth_element(a+l,a+mid,a+r+1,cmp);\n    ls[mid]=build(l,mid-1);rs[mid]=build(mid+1,r);\n    mxx[mid]=mnx[mid]=a[mid].x;\n    mxy[mid]=mny[mid]=a[mid].y;\n    if(ls[mid])now=ls[mid],pushup(mid);\n    if(rs[mid])now=rs[mid],pushup(mid);\n    return mid;\n}\n```\n\n### 2.\u91cd\u6784\u4f18\u5316\n\n\u5373\u4f7f\u6709\u4e86\u5efa\u6811\u4f18\u5316\uff0c\u6211\u4eec\u63d2\u5165\u65f6\u4e5f\u53ea\u80fd\u8f6e\u6362\u5206\u5272\uff0c\u53ef\u80fd\u5bfc\u81f4\u6811\u9ad8\u8fdc\u8fdc\u5927\u4e8e $\\log n$ \u7ea7\u522b\uff0c\u90a3\u4e48\u5728\u5b50\u6811\u5927\u5c0f\u8fc7\u5927\u65f6\uff0c\u6211\u4eec\u5c31\u8981\u628a\u8fd9\u4e00\u90e8\u5206\u91cd\u65b0\u5206\u914d\uff0c\u8fdb\u884c\u91cd\u6784\uff0c\u5373\u91cd\u65b0\u90e8\u5206\u5efa\u6811\u3002\n\nCode:\n\n```cpp\nil void pushup(int u){\n\tmxx[u]=max(mxx[u],mxx[now]);mxy[u]=max(mxy[u],mxy[now]);\n\tmnx[u]=min(mnx[u],mnx[now]);mny[u]=min(mny[u],mny[now]);\n}\nil double sqr(double x){return x*x;}\nbool dcmp;\nint g[maxn],tot;\nil bool cmp(int p,int q){\n    if(dcmp)return a[p].x<a[q].x;\n    return a[p].y<a[q].y;\n}\nint build(int l,int r){\n    if(l>r)return 0;\n    int mid=(l+r)/2;\n    double avx=0,avy=0,vax=0,vay=0;\n    for(int i=l;i<=r;i++)\n        avx+=a[g[i]].x,avy+=a[g[i]].y;\n    avx/=1.0*(r-l+1);avy/=1.0*(r-l+1);\n    for(int i=l;i<=r;i++)\n        vax+=sqr(a[g[i]].x-avx),vay+=sqr(a[g[i]].y-avy);\n    dcmp=d[g[mid]]=(vax>vay);nth_element(g+l,g+mid,g+r+1,cmp);\n    ls[g[mid]]=build(l,mid-1);rs[g[mid]]=build(mid+1,r);\n    mxx[g[mid]]=mnx[g[mid]]=a[g[mid]].x;\n    mxy[g[mid]]=mny[g[mid]]=a[g[mid]].y;\n    siz[g[mid]]=1;\n    if(ls[g[mid]])now=ls[g[mid]],pushup(g[mid]),siz[g[mid]]+=siz[ls[g[mid]]];\n    if(rs[g[mid]])now=rs[g[mid]],pushup(g[mid]),siz[g[mid]]+=siz[rs[g[mid]]];\n    return g[mid];\n}\nvoid print(int u){//\u4e2d\u5e8f\u904d\u5386\n    if(!u)return;\n    print(ls[u]);\n    g[++tot]=u;\n    print(rs[u]);\n}\nil void rebuild(int &u){\n    tot=0;print(u);\n    u=build(1,tot);\n}\nil bool bad(int u){\n    return 0.725*siz[u]<=1.0*max(siz[ls[u]],siz[rs[u]]);\n}\nvoid ins(int &u,bool op){//\u5728\u5b50\u6811u\u4e2d\u63d2\u5165\n\tif(!u)return u=now,siz[u]=1,void();\n\tif(!op)ins(a[now].x<=a[u].x?ls[u]:rs[u],!d[u]);\n\telse ins(a[now].y<=a[u].y?ls[u]:rs[u],!d[u]);\n\tpushup(u);siz[u]=siz[ls[u]]+siz[rs[u]]+1;\n    int tmp=now;if(bad(u))rebuild(u);now=tmp;\n}\n```\n\n### 3.\u67e5\u8be2\u4f18\u5316\n\n\u526a\u679d\u5c31\u4e0d\u7528\u6211\u8bf4\u4e86\u5427\uff0c$\\text{KD-Tree}$ \u5fc5\u5907\u3002\n\nCode:\n\n```cpp\nil int dis(int u){\n\treturn abs(a[now].x-a[u].x)+abs(a[now].y-a[u].y);\n}\nil int mindis(int u){//\u671f\u671b\u6700\u5c0f\u8ddd\u79bb\n    int res=0;\n    if(mnx[u]>a[now].x||a[now].x>mxx[u])res+=mnx[u]>a[now].x?mnx[u]-a[now].x:a[now].x-mxx[u];\n    if(mny[u]>a[now].y||a[now].y>mxy[u])res+=mny[u]>a[now].y?mny[u]-a[now].y:a[now].y-mxy[u];\n    return res;\n}\nvoid ask(int u){\n    if(!u)return;\n    ans=min(ans,dis(u));\n    int l=mindis(ls[u]),r=mindis(rs[u]);\n    if(l<r){\n        if(l<ans)ask(ls[u]);\n        if(r<ans)ask(rs[u]);\n    }else{\n        if(r<ans)ask(rs[u]);\n        if(l<ans)ask(ls[u]);\n    }\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\uff1a[https://www.luogu.com.cn/paste/9z0gpvy2](https://www.luogu.com.cn/paste/9z0gpvy2)\u3002\n\n",
        "postTime": 1609000962,
        "uid": 312393,
        "name": "ADay",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u4e2a\u9898\u7684\u601d\u60f3\u3002\n\n\u9996\u5148\u7edd\u5bf9\u503c\u7684\u5f0f\u5b50\u975e\u5e38\u96be\u641e\uff0c\u8003\u8651\u901a\u8fc7\u96f6\u70b9\u5206\u6bb5\u6765\u53bb\u6389\u7edd\u5bf9\u503c\u3002\n\n\u56e0\u4e3a\u53ea\u6709\u4e24\u4e2a\u7edd\u5bf9\u503c\uff0c\u6240\u4ee5\u5206\u56db\u7c7b\u60c5\u51b5\u8ba8\u8bba\u5373\u53ef\uff0c\u5177\u4f53\u5730\u6765\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2\uff0c\u5206\u522b\u67e5\u8be2\u8fd9\u4e2a\u70b9\u5de6\u4e0b\u65b9\u79bb\u5b83\u6700\u8fd1\u7684\u70b9\u3001\u5de6\u4e0a\u65b9\u79bb\u5b83\u6700\u8fd1\u7684\u70b9\u3001\u53f3\u4e0b\u65b9\u79bb\u5b83\u6700\u8fd1\u7684\u70b9\u3001\u53f3\u4e0a\u65b9\u79bb\u5b83\u6700\u8fd1\u7684\u70b9\u3002\n\n\u5de6\u4e0a\u3001\u53f3\u4e0b\u3001\u53f3\u4e0a\u53ef\u4ee5\u76f4\u63a5\u7ffb\u8f6c\u5750\u6807\u7cfb\u8fdb\u884c\u8f6c\u6362\uff0c\u6240\u4ee5\u4e0b\u9762\u53ea\u8ba8\u8bba\u5de6\u4e0b\u7684\u60c5\u51b5\u3002\n\n\u5f0f\u5b50\u88ab\u8f6c\u5316\u6210\u6c42 $\\min \\{x-x_i+y-y_i\\}$\uff0c\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u7edf\u8ba1\u7684\u70b9\u8981\u6ee1\u8db3\uff1a\n\n- $x_i\\leq x$\uff1b\n- $y_i\\leq y$\uff1b\n- \u52a0\u5165\u7684\u65f6\u95f4\u5728\u8fd9\u6b21\u8be2\u95ee\u4e4b\u524d\uff1b\n- $x_i+y_i$ \u5c3d\u91cf\u5927\u3002\n\n\u663e\u7136\uff0c\u5982\u679c\u628a\u65f6\u95f4\u8003\u8651\u4e3a\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5c31\u662f\u4e2a\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u76f4\u63a5\u7528 CDQ \u6765\u7ef4\u62a4\u3002\n\n\u4f60\u95ee\u6211\u4e3a\u5565\u4e0d\u7528\u6811\u5957\u6811\uff1f\u5f88\u7b80\u5355\uff0c\u8fd9\u4e2a\u4e1c\u897f\u662f $O(n\\log ^2 n)$ \u7684\uff0c\u5e73\u8861\u6811\u8fd8\u5e26\u4e00\u4e2a\u5de8\u5927\u7684\u5e38\u6570\uff0c\u7b97\u6cd5\u672c\u8eab\u8fd8\u8981\u5e26 4 \u500d\u5e38\u6570\uff0c\u8fd9\u4e9b\u5168\u4e58\u5230\u4e00\u8d77\uff0c\u6211\u4e0d T \u8c01 T\u2026\u2026\n\n\u597d\uff01\u6109\u5feb\u5730\u5199\u5b8c\u4e86\uff0c\u4ea4\u4e0a\u53bb~\n\n91 \u5206 QAQ\n\n\u5728\u8fd9\u91cc\u8bf4\u4e00\u4e0b\u6211\u7528\u5230\u7684\u5e38\u6570\u4f18\u5316\uff1a\n\n- \u6bcf\u6b21\u8be2\u95ee\u4e4b\u540e\uff0c\u56e0\u4e3a CDQ \u7684\u7279\u6027\u4f1a\u5bfc\u81f4\u65f6\u95f4\u8f74\u662f\u4e71\u5e8f\u7684\uff0c\u6b64\u65f6\u4e0d\u8981\u6392\u5e8f\uff0c\u76f4\u63a5\u5728\u8be2\u95ee\u4e4b\u524d\u62f7\u8d1d\u51fa\u53bb\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u7136\u540e\u8be2\u95ee\u4e4b\u540e\u4ece\u4e34\u65f6\u6570\u7ec4\u91cc\u9762\u590d\u5236\u3002\n- \u6811\u72b6\u6570\u7ec4\u6e05\u96f6\u7684\u65f6\u5019\uff0c\u5982\u679c\u904d\u5386\u5230\u4e86\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\u76f4\u63a5\u8fd4\u56de\u4e0d\u9700\u8981\u7ee7\u7eed\u904d\u5386\u3002\u6b63\u786e\u6027\u7559\u4f5c\u4e60\u9898\u7b54\u6848\u7565\uff08\u5927\u96fe\uff09\u3002\n- \u6bcf\u6b21\u8be2\u95ee\u7ffb\u8f6c\u5b8c\u5750\u6807\u8f74\u4e4b\u540e\u9884\u5904\u7406\u51fa\u67e5\u8be2\u4f4d\u7f6e\u7684\u6700\u5927\u7684 $mx$\u3001$my$\uff0c\u7136\u540e\u53bb\u6389 $x>mx$ \u6216 $y>my$ \u7684\u70b9\uff08\u56e0\u4e3a\u8fd9\u4e9b\u70b9\u4e0d\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\uff09\u3002\n\n\u52a0\u4e0a\u8fd9\u4e9b\u518d\u62c9\u4e00\u4e2a\u6bd4\u8f83\u597d\u7528\u7684\u706b\u8f66\u5934\u518d\u52a0\u4e0a O2 \u5c31\u53ef\u4ee5\u7206\u8fc7\u53bb\u5566~\n\n\u90a3\u4e48\u8fd9\u9898\u5c31\u505a\u5b8c\u5566~\n\n\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log ^2 n)$\uff0c\u7a7a\u95f4\u662f $O(n)$\u3002\n\n\u9898\u5916\u8bdd\uff1a\n\n\u79bb\u7ebf\u5206\u6cbb\u7b97\u6cd5\u7684\u4f18\u70b9\u662f**\u7a7a\u95f4\u4e3a\u7ebf\u6027**\u3001**\u5e38\u6570\u8f83\u5c0f**\u3002\n\n\u7f3a\u70b9\u7684\u8bdd\u5f88\u660e\u663e\uff0c\u5c31\u662f\u4e0d\u652f\u6301\u5728\u7ebf\uff0c\u4ee5\u53ca\u6709\u4e9b\u65f6\u5019\u4f1a\u7279\u522b\u96be\u5199\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\", \"-funroll-loops\")\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nconst int INF = 0x3f3f3f3f;\n\nstruct Point {\n\tint _time, x, y, type;\n\tPoint() {}\n\tPoint(int _time, int x, int y, int type) : _time(_time), x(x), y(y), type(type) {}\n};\nPoint p[600005], q[600005];\nint n, m, c[2000055], ans[300005], ptop;\n\ninline int Lowbit(int x) {\n\treturn x & -x;\n}\n\ninline void Update(int i, int x) {\n\t//printf(\"Update(%d,%d)\\n\", i, x);\n\tfor (register int j = i;j <= 1000010;j += Lowbit(j)) c[j] = Max(c[j], x);\n}\n\ninline void Remove(int i) {\n\tfor (register int j = i;j <= 1000010;j += Lowbit(j)) {\n\t\tif (c[j] != -INF) c[j] = -INF;\n\t\telse return;\n\t}\n}\n\ninline int Query(int i) {\n\t//printf(\"Query(%d)\", i);\n\tregister int ans = -INF;\n\tfor (register int j = i;j >= 1;j -= Lowbit(j)) ans = Max(ans, c[j]);\n\t//printf(\"=%d\\n\", ans);\n\treturn ans;\n}\n\ninline void Read() {\n\tn = qread(); m = qread();\n\tfor (register int i = 1;i <= n;i++) {\n\t\tregister int x = qread() + 1, y = qread() + 1;\n\t\tq[i] = Point(0, x, y, 1);\n\t}\n\tfor (register int i = 1;i <= m;i++) {\n\t\tregister int opt = qread(), x = qread() + 1, y = qread() + 1;\n\t\tq[i + n] = Point(i, x, y, opt);\n\t}\n}\n\ninline void cdq1(int l, int r) {\n\tif (l == r) return;\n\tregister int mid = l + r >> 1;\n\tcdq1(l, mid);\n\tcdq1(mid + 1, r);\n\tregister int i = l, j = mid + 1;\n\tvector <Point> vc;\n\t//printf(\"cdq(%d,%d)\\n\", l, r);\n\t//puts(\"{\");\n\t//for (register int i = l;i <= r;i++) printf(\"%d %d %d\\n\", p[i].type, p[i].x, p[i].y);\n\twhile (i <= mid && j <= r) {\n\t\tif (p[i].x <= p[j].x) {\n\t\t\tif (p[i].type == 1) {\n\t\t\t\tUpdate(p[i].y, p[i].x + p[i].y);\n\t\t\t}\n\t\t\tvc.push_back(p[i]);\n\t\t\ti++;\n\t\t} else {\n\t\t\tif (p[j].type == 2) {\n\t\t\t\t//printf(\"%d %d\\n\", p[j].x + p[j].y, Query(p[j].y));\n\t\t\t\tans[p[j]._time] = Min(ans[p[j]._time], p[j].x + p[j].y - Query(p[j].y));\n\t\t\t}\n\t\t\tvc.push_back(p[j]);\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i <= mid) vc.push_back(p[i]), i++;\n\twhile (j <= r) {\n\t\tif (p[j].type == 2) {\n\t\t\t//printf(\"%d %d\\n\", p[j].x + p[j].y, Query(p[j].y));\n\t\t\tans[p[j]._time] = Min(ans[p[j]._time], p[j].x + p[j].y - Query(p[j].y));\n\t\t}\n\t\tvc.push_back(p[j]);\n\t\tj++;\n\t}\n\t//puts(\"}\");\n\tfor (i = l;i <= mid;i++) {\n\t\tif (p[i].type == 1) Remove(p[i].y);\n\t}\n\tfor (i = l;i <= r;i++) p[i] = vc[i - l];\n}\n\ninline void Copy() {\n\tint maxx = 0, maxy = 0;\n\tfor (register int i = 1;i <= n + m;i++) {\n\t\tif (q[i].type == 2) {\n\t\t\tmaxx = Max(maxx, q[i].x);\n\t\t\tmaxy = Max(maxy, q[i].y);\n\t\t}\n\t}\n\tptop = 0;\n\tfor (register int i = 1;i <= n + m;i++) {\n\t\tif (q[i].type == 2 || (q[i].x <= maxx && q[i].y <= maxy)) p[++ptop] = q[i];\n\t}\n}\n\ninline void Solve() {\n\tfor (register int i = 1;i <= 1000010;i++) c[i] = -INF;\n\tCopy();\n\tcdq1(1, ptop);\n\t//for (register int i = 1;i <= m;i++) {\n\t//\tif (ans[i] != 0x3f3f3f3f) printf(\"%d\\n\", ans[i]);\n\t//}\n\tfor (register int i = 1;i <= n + m;i++) q[i].x = 1000002 - q[i].x;\n\tCopy();\n\tcdq1(1, ptop);\n\tfor (register int i = 1;i <= n + m;i++) q[i].y = 1000002 - q[i].y;\n\tCopy();\n\tcdq1(1, ptop);\n\tfor (register int i = 1;i <= n + m;i++) q[i].x = 1000002 - q[i].x;\n\tCopy();\n\tcdq1(1, ptop);\n}\n\nint main() {\n\tRead();\n\tmemset(ans, 0x3f, sizeof(ans));\n\t\n\t// for (register int i = 1;i <= m;i++) {\n\t// \tif (ans[i] != 0x3f3f3f3f) printf(\"%d\\n\", ans[i]);\n\t// }\n\t\n\t// for (register int i = 1;i <= n + m;i++) {\n\t// \tprintf(\"%d %d %d %d\\n\", p[i].type, p[i]._time, p[i].x, p[i].y);\n\t// }\n\tSolve();\n\tfor (register int i = 1;i <= m;i++) {\n\t\tif (ans[i] != 0x3f3f3f3f) printf(\"%d\\n\", ans[i]);\n\t}\n\t#ifndef ONLINE_JUDGE\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1590135687,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "~~\u8fd9\u9898\u771f\u662f\u592a\u75db\u82e6\u4e86~~\n\n\u770b\u5230\u8fd9\u79cd\u77e9\u9635\u4e0a\u8be2\u95ee\u7684\u9898\uff0c\u6211\u4eec\u76f4\u63a5\u4e0aCDQ\uff08~~\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48~~\uff09\n\n\u4e0d\u96be\u5f97\u5230\uff0c\u8fd9\u9898\u6c42\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6700\u8fd1\u7684\u6709\u8bb0\u5fc6\u7684\u70b9\u5230\u5b83\u7684\u8ddd\u79bb\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42\u5411\u5de6\u4e0a\uff0c\u5de6\u4e0b\uff0c\u53f3\u4e0a\uff0c\u53f3\u4e0b\u56db\u4e2a\u533a\u95f4\u7684\u79bb\u5b83\u6700\u8fd1\u7684\u70b9\u5230\u5b83\u7684\u8ddd\u79bb\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5750\u6807\u8fdb\u884c\u5904\u7406\u5c06\u5176\u4f59\u4e09\u79cd\u8f6c\u5316\u4e3a\u5de6\u4e0b\uff08\u6216\u8005\u53f3\u4e0a\u4e5f\u633a\u597d\u6c42\u7684\uff09\uff0c\u56e0\u4e3a\n\n\u5f53$x_i>x_{i-1}$\u4e14$y_i>y_{i-1}$\u65f6\uff0c$i-1,i$\u7684\u66fc\u54c8\u987f\u8ddd\u79bb$=x_{i}-x_{i-1}+y_{i}-y_{i-1}=x_i+y_i-(x_{i-1}+y_{i-1})$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee$i$\uff0c$x$\u548c$y$\u90fd\u662f\u5b9a\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u6240\u6709\u5728\u5b83\u5de6\u4e0b\u89d2\u7684\u70b9\u4e2d$x+y$\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\n~~\u77ac\u95f4\u53d8\u6210\u4e09\u7ef4\u504f\u5e8fCDQ\u677f\u5b50\u9898~~\n\n\u4f46\u662f\u5bf9\u4e8e\u8fd9\u6837\u7684\u6570\u636e\uff0c\u6211\u4eec\u5e76\u4e0d\u80fdAC\u3002\n\n\u6211\u9996\u5148\u8fdb\u884c\u4e86\u4e00\u4e9b\u5e38\u89c4\u4f18\u5316\uff08\u6bd4\u5982\u5feb\u8bfb\uff0c$O_2$\uff09\uff0c\u540e\u9762\u751a\u81f3\u8fdb\u884c\u4e86\u4e00\u4e9b\u8303\u56f4\u7f29\u51cf\u7684\u8d85\u7ea7\u5de5\u4f5c\uff0c\u6700\u9ad8\u4e5f\u53ea\u662f\u5f97\u5230\u4e8673\u5206\u3002\n\n\u540e\u6765\u7ecf$dalao$\u8fdc\u7a0b\u70b9\u62e8\uff0c\u672c\u849f\u84bb\u89e3\u51b3\u4e86\u4e00\u4e2a\u81f4\u547d\u6027\u7684\u95ee\u9898\uff1aCDQ\u91cc\u4e0d\u80fd\u5199\u5feb\u6392\u3002\n\n\u8fd9\u662f\u539f\u6765\u7684\uff1a\n\n```cpp\nvoid CDQ(int l,int r) {\n\tint mid=l+r>>1;\n\tif(l==r) return ;\n\tCDQ(l,mid),CDQ(mid+1,r);\n\tsort(a+l,a+mid+1,cmp2);//\u8fd9\u5f88\u91cd\u8981\n\tsort(a+mid+1,a+r+1,cmp2);//\u5b83\u5751\u5bb3\u4e86\u6211\n\tint i=l,j=mid+1;\n\twhile(j<=r) {\n\t\twhile(i<=mid&&a[i].x<=a[j].x) {\n\t\t\tif(a[i].op==1) update(a[i].y,a[i].x+a[i].y);\n\t\t\t++i;\n\t\t}\n\t\tif(a[j].op==0) {\n\t\t\tint tmp=query(a[j].y);\n\t\t\tif(tmp) p[a[j].time].key=min(p[a[j].time].key,a[j].x+a[j].y-tmp);\n\t\t}\n\t\t++j;\n\t}\n\trep(k,l,i-1) if(a[k].op==1) clear(a[k].y);\n}\n```\n\u65b0\u7248\u672c\n\n```cpp\nvoid CDQ(int l,int r) {\n\tint mid=l+r>>1;\n\tif(l==r) return ;\n\tCDQ(l,mid),CDQ(mid+1,r);\n\tint i=l,j=mid+1;\n\twhile(j<=r) {\n\t\twhile(i<=mid&&a[i].x<=a[j].x) {\n\t\t\tif(a[i].op==1) update(a[i].y,a[i].x+a[i].y);\n\t\t\t++i;\n\t\t}\n\t\tif(a[j].op==0) {\n\t\t\tint tmp=query(a[j].y);\n\t\t\tif(tmp) p[a[j].time].key=min(p[a[j].time].key,a[j].x+a[j].y-tmp);\n\t\t}\n\t\t++j;\n\t}\n\trep(k,l,i-1) if(a[k].op==1) clear(a[k].y);\n\ti=l,j=mid+1;\n\tint k=l-1;\n\twhile(j<=r) {\n\t\twhile(i<=mid&&cmp2(a[i],a[j])) t[++k]=a[i],++i;\n\t\tt[++k]=a[j],++j;\n\t}\n\twhile(j<=r) t[++k]=a[j++];\n\twhile(i<=mid) t[++k]=a[i++];\n\trep(i,l,r) a[i]=t[i];\n}\n```\n\u5bf9\u4e8e\u7406\u8bba\u590d\u6742\u5ea6\u6765\u8bb2\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5e76\u6ca1\u6709\u592a\u5927\u7684\u5f71\u54cd;\u6bd5\u7adf\u90fd\u662f$O(nlog^2n)$,\u4f46\u628a\u5b83\u6539\u6389\u4e4b\u540e\u6548\u679c\u786e\u5b9e\u4f1a\u597d\u5f88\u591a\uff0c\u4e0d\u7528\u8303\u56f4\u7f29\u51cf\u90fd\u80fdAC\u672c\u9898\uff08\u4ee3\u7801\u91cc\u8fd8\u662f\u7528\u4e86\uff09\uff0c\u6240\u4ee5\u5404\u4f4d\u8fd8\u662f\u8981\u7262\u8bb0~~\u6587\u5316\u8bfe~~\u8001\u5e08\u8bb2\u7684\u8bdd\uff1a~~\u7ec6\u8282\u51b3\u5b9a\u6210\u8d25\u3002~~ \u6709\u597d\u7684\u4e3a\u4ec0\u4e48\u4e0d\u7528\u5462\uff1f\n\n$Code:$ \n\n```cpp\n// luogu-judger-enable-o2\n//\u4e0d\u8981\u7ba1\u8fd9\u79cd\u4e8b\n#include<bits/stdc++.h>\n#define R register\n#define INF 0x3fffffff\n#define rep(i,a,b) for(R int i=a ; i<=b ; ++i)\n#define dwn(i,a,b) for(R int i=a ; i>=b ; --i)\n#define go(i,u) for(R int i=head[u] ; i ; i=a[i].next)\n#define lowbit(x) (x&-x)\nusing namespace std;\n\ninline int read() {\n\tint res=0,f=1;char ch;\n\twhile(!isdigit(ch=getchar())) if(ch=='-') f=-1;\n\tdo {\n\t\tres=res*10+ch-'0';\n\t} while(isdigit(ch=getchar()));\n\treturn res*f;\n}\n\nconst int N=300005,M=1000005;\n\nint c[M],mx,my,n,m,cnt;\n\ninline void clear(int pos) {\n\twhile(pos<=my) {\n\t\tif(!c[pos]) break;\n\t\tc[pos]=0;\n\t\tpos+=lowbit(pos);\n\t}\n}\n\ninline void update(int pos,int key) {\n\twhile(pos<=my) {\n\t\tc[pos]=max(c[pos],key);\n\t\tpos+=lowbit(pos);\n\t}\n}\n\ninline int query(int pos) {\n\tint ans=0;\n\twhile(pos) {\n\t\tans=max(ans,c[pos]);\n\t\tpos-=lowbit(pos);\n\t}\n\treturn ans;\n}\n\nstruct Q {\n\tint time,x,y,key,op;\n}a[N<<1],p[N<<1],t[N<<1];\n\ninline bool cmp1(Q a,Q b) {\n\treturn a.time<b.time;\n}\ninline bool cmp2(Q a,Q b) {\n\treturn (a.x!=b.x)?a.x<b.x:a.y<b.y;\n}\n\nvoid CDQ(int l,int r) {\n\tint mid=l+r>>1;\n\tif(l==r) return ;\n\tCDQ(l,mid),CDQ(mid+1,r);\n\tint i=l,j=mid+1;\n\twhile(j<=r) {\n\t\twhile(i<=mid&&a[i].x<=a[j].x) {\n\t\t\tif(a[i].op==1) update(a[i].y,a[i].x+a[i].y);\n\t\t\t++i;\n\t\t}\n\t\tif(a[j].op==0) {\n\t\t\tint tmp=query(a[j].y);\n\t\t\tif(tmp) p[a[j].time].key=min(p[a[j].time].key,a[j].x+a[j].y-tmp);\n\t\t}\n\t\t++j;\n\t}\n\trep(k,l,i-1) if(a[k].op==1) clear(a[k].y);\n\ti=l,j=mid+1;\n\tint k=l-1;\n\twhile(j<=r) {\n\t\twhile(i<=mid&&cmp2(a[i],a[j])) t[++k]=a[i],++i;\n\t\tt[++k]=a[j],++j;\n\t}\n\twhile(j<=r) t[++k]=a[j++];\n\twhile(i<=mid) t[++k]=a[i++];\n\trep(i,l,r) a[i]=t[i];\n}\n\ninline void init() {\n\trep(i,1,n) a[i]=p[i];\n}\n\nint main() {\n\tn=read(),m=read();\n\trep(i,1,n) {\n\t\tint x=read()+1,y=read()+1;\n\t\tmx=max(mx,x),my=max(my,y);\n\t\tp[i]=Q{i,x,y,x+y,1};\n\t}\n\twhile(m--) {\n\t\tint op=read(),x=read()+1,y=read()+1;\n\t\tmx=max(mx,x),my=max(my,y);\n\t\tif(op==1) p[++n]=Q{n,x,y,x+y,1};\n\t\telse p[++n]=Q{n,x,y,INF,0};\n\t}\n\tinit();\n\tCDQ(1,n);\n\trep(i,1,n) p[i].x=mx-p[i].x+1;\n\tinit();\n\tCDQ(1,n);\n\trep(i,1,n) p[i].y=my-p[i].y+1;\n\tinit();\n\tCDQ(1,n);\n\trep(i,1,n) p[i].x=mx-p[i].x+1;\n\tinit();\n\tCDQ(1,n);\n\trep(i,1,n) if(p[i].op==0) printf(\"%d\\n\",p[i].key);\n\treturn 0;\n}\n```\n",
        "postTime": 1568300840,
        "uid": 79075,
        "name": "mzgwty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "## \u300a\u7b97\u6cd5\u7ade\u8d5b\u300b\u4e66\u4e0a\u4f8b\u9898\uff08~~\u53ef\u60dc\u539f\u4e66\u6ca1\u4ee3\u7801~~\uff09\n\n\u5929\u4f7f\u73a9\u5076\uff0c\u4e00\u9053\u597d\u9898\u3002\uff08\u4e66p243\uff09\u6211\u5c31\u6765\u8c08\u8c08\u81ea\u5df1\u7684\u60f3\u6cd5\u5427\uff01\n\n\u800c\u603b\u6709\u4eba\u5728\u8fd9\u79cd\u660e\u660e\u53ef\u4ee5\u79bb\u7ebf\u5904\u7406\u7684\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\u4e0a\u6295\u673a\u53d6\u5de7\u3002\n\n\u5982\uff1aKDtree\u3002 \u849f\u84bb\u60f3\u8bf4\uff0cKDtree\u5728\u8fd9\u9898\u590d\u6742\u5ea6\u662f\u4e0d\u5bf9\u7684\u3002\u867d\u6709\u526a\u679d\uff0c\u53ef\u662f\u8fd8\u662f\u6709\u53ef\u80fd\u904d\u5386\u6574\u68f5\u6811\u7684\uff08~~\u671f\u671b\u590d\u6742\u5ea6\u4e0d\u9760\u8c31~~\uff09\n\n\u5bf9\u4e0a\u8ff0\u770b\u6cd5\u6709\u4e89\u8bae\u7684\uff0c\u8bf7\u8df3\u8f6c[KDtree\u8ba8\u8bba](https://www.luogu.org/discuss/show/94089)\u3002\u89c9\u5f97\u81ea\u5df1KDtree\u590d\u6742\u5ea6\u4f18\u7f8e\u7684\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u8fd9\u4e2a[\u5929\u4f7f\u73a9\u5076hack\u7248](https://www.luogu.org/problemnew/show/U25704)\uff0c\u5bf9\u6b64\u611f\u8c22qqvq\u5927\u4f6c\u7684hack\u6570\u636e\u3002\n\n\u800ccdq\u5206\u6cbb + bit\uff08\u6811\u72b6\u6570\u7ec4\uff09\u53ea\u8981\u4e24\u4e2alog\uff0c\u4f55\u4e50\u800c\u4e0d\u4e3a\u5462~\n\ncdq\u4e0d\u4f1a\uff1f\u4e09\u7ef4\u504f\u5e8f\u6ca1\u5b66\u8fc7\uff1f\u6811\u72b6\u6570\u7ec4\u4e0d\u4f1a\u7528\uff1f\n\n~~\u90a3\u4f60\u8fd8\u662f\u53bb\u81ea\u95ed\u5427\uff0c\u53ef\u4ee5AFO\u4e86~~\n\n\u5f00\u4e2a\u73a9\u7b11\uff0c\u8bf7\u5de6\u8f6c\u4e00\u4f4d\u5927\u4f6c\u535a\u5ba2[cdq\u5206\u6cbb\u5165\u95e8\u5230\u7cbe\u901a](https://blog.csdn.net/wu_tongtong/article/details/78785836)\n\n\u597d\uff0c\u90a3\u5173\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u60f3\u8bf4\uff1a\n\n\u5148\u8003\u8651\u7b80\u5316\u7248\u2014\u2014\u5373\u4e0d\u5e26\u4fee\u6539\u64cd\u4f5c\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5176\u5b9e\u662f\u9700\u627e\u5de6\u4e0a\uff0c\u5de6\u4e0b\uff0c\u53f3\u4e0a\uff0c\u53f3\u4e0b\u56db\u4e2a\u65b9\u5411\u6700\u8fd1\u8ddd\u79bb\uff0c\u518d\u53d6min\u3002\n\n\u4ee5\u5de6\u4e0b\u4e3a\u4f8b\uff1amin\uff081 <= i <= n) {(x - xi) + (y - yi)}\n\n\u5373 x + y - max\uff081 <= i <= n) {xi + yi} (xi <= x, yi <= y)\n\n\u56db\u65b9\u5411\u7c7b\u6bd4\uff0c\u7528bit\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u8003\u8651\u5f85\u4fee\u6539\uff0c\u53ea\u9700\u518d\u6309\u65f6\u95f4\u5206\u6cbb\u3002\u7528cdq\u5206\u6cbb\uff0c\u8003\u8651\u4fee\u6539\u64cd\u4f5c\u5728\u65f6\u95f4\u8f74\u4e0a\u5bf9\u67e5\u8be2\u64cd\u4f5c\u7684\u5f71\u54cd\u5373\u53ef\uff1a\n\n## cdq\uff1a\n\n```cpp\nclass rec {\npublic:\n\tint x, y, z;\n\tinline void Init(int _z, int _x, int _y) {\n\t\tx = _x; y = _y; z = _z; return;\n\t}\n\tinline bool operator < (const rec&opt) {\n\t\treturn x < opt.x || x == opt.x && y < opt.y;\n\t}\n} a[u], b[u];\n\nint tot = 0;\nint ans[u], n, m, t;\n\nclass BIT {\npublic:\n\tint c[u];\n\tinline void setup(void) {\n\t\tMs(c, 0xcf); return;\n\t}\n\t\n\tinline int query(int x) {\n\t\tint y = inf;\n\t\tfor (; x; x -= lowbit(x)) y = max(y, c[x]);\n\t\treturn y;\n\t}\n\t\n\tinline void update(int x, int y) {\n\t\tfor (; x < tot; x += lowbit(x))\n\t\t\tchkmax(c[x], y); return;\n\t}\n\t\n\tinline void modify(int x) {\n\t\tfor (; x < tot; x += lowbit(x))\n\t\t\tc[x] = inf; return;\n\t}\n} bit;\n\ninline void calc(int st, int ed, int de, int dx, int dy) {\n\tfor (register int i = st; i ^ ed; i += de) {\n\t\tint y = dy == 1 ? b[i].y : tot - b[i].y;\n\t\tint tmp = dx * b[i].x + dy * b[i].y;\n\t\tif (a[b[i].z].z == 1) bit.update(y, tmp);\n\t\telse chkmin(ans[b[i].z], abs(tmp - bit.query(y)));\n\t}\n\t\n\tfor (register int i = st; i ^ ed; i += de) {\n\t\tint y = dy == 1 ? b[i].y : tot - b[i].y;\n\t\tif (a[b[i].z].z == 1) bit.modify(y);\n\t}\n}\n\ninline void cdqdiv(int l, int r) {\n\tint mid = l + r >> 1;\n\tif (l < mid) cdqdiv(l, mid);\n\tif (mid + 1 < r) cdqdiv(mid + 1, r);\n\tt = 0;\n\tfor (register int i = l; i <= r; i++)\n\t\tif (i <= mid && a[i].z == 1 || i > mid && a[i].z == 2)\n\t\t\tb[++t] = a[i], b[t].z = i;\n\n\tsort(b + 1, b + t + 1);\n\tcalc(1, t + 1, 1, 1, 1), calc(t, 0, -1, -1, -1);\n\tcalc(1, t + 1, 1, 1, -1), calc(t, 0, -1, -1, 1);\n}\n```\n\n\n\u5168\u90e8\u4ee3\u7801\uff08\u53c2\u8003\u674e\u715c\u4e1c\u5149\u76d8\uff09\u5982\u4e0b\n\n## CODE\uff1a\n\n```cpp\n//Program written by Liu Zhaozhou ~~~\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <vector>\n#include <deque>\n#include <string>\n\n#define lowbit(x) x & -x\n\n#pragma GCC optimize(3)\n\nusing namespace std;\n\nnamespace Base {\ninline char gc(void)\n{\n\tstatic char buf[100000], *p1 = buf, *p2 = buf;\n\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\n#define gc() getchar()\n\ntemplate <class T> inline void read(T &x)\n{\n\tT flag = 1; x = 0; register char ch = gc();\n\tfor (; !isdigit(ch); ch = gc()) if (ch == '-') flag = -1;\n\tfor (; isdigit(ch); ch = gc()) x = (x << 1) + (x << 3) + (ch & 15);\n\tx *= flag; return;\n}\n\ninline int init(void) {\n\tint x; read(x); return x;\n}\n\ntemplate <class T> inline void write(T x) {\n\tif (x < 0) putchar('-'), x = -x;\n\tregister T y = 1; int len = 1;\n\tfor (; y <= x / 10; y *= 10) ++len;\n\tfor (; len; --len, x %= y, y /= 10) putchar(x / y + 48);\n}\n\ntemplate <class T> inline void writeln(T x) {write(x); puts(\"\");}\ntemplate <class T> inline void writeln(T x, char c) {write(x); putchar(c);}\ntemplate <class T> inline void writeln(char c, T x) {putchar(c); write(x);}\n\ntemplate <class T> inline void chkmax(T &x, const T y) {x > y ? x = x : x = y;}\ntemplate <class T> inline void chkmin(T &x, const T y) {x < y ? x = x : x = y;}\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n\n#define Ms(arr, opt) memset(arr, opt, sizeof(arr))\n#define Mp(x, y) make_pair(x, y)\n\ninline void file(string str) {\n\tfreopen((str + \".in\").c_str(), \"r\", stdin);\n\tfreopen((str + \".out\").c_str(), \"w\", stdout);\n}\n}\n\nusing namespace Base;\n\nnamespace CDQsolution {\n\nenum {\n\tu = 1000010,\n\tinf = -114783648\n};\n\nclass rec {\npublic:\n\tint x, y, z;\n\tinline void Init(int _z, int _x, int _y) {\n\t\tx = _x; y = _y; z = _z; return;\n\t}\n\tinline bool operator < (const rec&opt) {\n\t\treturn x < opt.x || x == opt.x && y < opt.y;\n\t}\n} a[u], b[u];\n\nint tot = 0;\nint ans[u], n, m, t;\n\nclass BIT {\npublic:\n\tint c[u];\n\tinline void setup(void) {\n\t\tMs(c, 0xcf); return;\n\t}\n\t\n\tinline int query(int x) {\n\t\tint y = inf;\n\t\tfor (; x; x -= lowbit(x)) y = max(y, c[x]);\n\t\treturn y;\n\t}\n\t\n\tinline void update(int x, int y) {\n\t\tfor (; x < tot; x += lowbit(x))\n\t\t\tchkmax(c[x], y); return;\n\t}\n\t\n\tinline void modify(int x) {\n\t\tfor (; x < tot; x += lowbit(x))\n\t\t\tc[x] = inf; return;\n\t}\n} bit;\n\ninline void calc(int st, int ed, int de, int dx, int dy) {\n\tfor (register int i = st; i ^ ed; i += de) {\n\t\tint y = dy == 1 ? b[i].y : tot - b[i].y;\n\t\tint tmp = dx * b[i].x + dy * b[i].y;\n\t\tif (a[b[i].z].z == 1) bit.update(y, tmp);\n\t\telse chkmin(ans[b[i].z], abs(tmp - bit.query(y)));\n\t}\n\t\n\tfor (register int i = st; i ^ ed; i += de) {\n\t\tint y = dy == 1 ? b[i].y : tot - b[i].y;\n\t\tif (a[b[i].z].z == 1) bit.modify(y);\n\t}\n}\n\ninline void cdqdiv(int l, int r) {\n\tint mid = l + r >> 1;\n\tif (l < mid) cdqdiv(l, mid);\n\tif (mid + 1 < r) cdqdiv(mid + 1, r);\n\tt = 0;\n\tfor (register int i = l; i <= r; i++)\n\t\tif (i <= mid && a[i].z == 1 || i > mid && a[i].z == 2)\n\t\t\tb[++t] = a[i], b[t].z = i;\n\n\tsort(b + 1, b + t + 1);\n\tcalc(1, t + 1, 1, 1, 1), calc(t, 0, -1, -1, -1);\n\tcalc(1, t + 1, 1, 1, -1), calc(t, 0, -1, -1, 1);\n}\n\n}\n\nusing namespace CDQsolution;\n\nsigned main(void) {\n\tfile(\"cdq\");\n\tread(n); read(m); m += n;\n\tfor (int i = 1; i <= n; i++)\n\t\tread(a[i].x), read(a[i].y), a[i].y++, a[i].z = 1;\n\tfor (int i = n + 1; i <= m; i++)\n\t\tread(a[i].z), read(a[i].x), read(a[i].y), a[i].y++;\n\n\tfor (int i = 1; i <= m; i++)\n\t\tchkmax(tot, a[i].y);\n\ttot++; bit.setup(); Ms(ans, 0x3f);\n\tcdqdiv(1, m);\n\tfor (int i = 1; i <= m; i++)\n\t\tif (a[i].z == 2) writeln(ans[i]);\n    return 0;\n}\n\n/*cdq*/\n\n\n```\n\n### cdq\u5927\u6cd5\u543c\uff0c\u8c22\u8c22\u5179\u78c1\uff01\uff01\uff01\n",
        "postTime": 1562152542,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u70b9\u770b\u6210 $(x_i,y_i,t_i)$ \u7684\u4e09\u5143\u7ec4\uff0c\u5176\u4e2d $t_i$ \u8868\u793a\u65f6\u95f4\uff0c\u6700\u5f00\u59cb\u7684\u90a3\u4e00\u5806\u70b9\u7684\u65f6\u95f4\u5c31\u662f $0$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u8981\u6c42\u7684\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u7684 $i$\uff0c\u6c42\u6ee1\u8db3 $t_j< t_i$ \u65f6\uff0c$|x_i-x_j|+|y_i-y_j|$ \u7684\u6700\u5c0f\u503c\u3002\n\n\u9047\u5230\u7edd\u5bf9\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u4ed6\u62c6\u5f00\uff0c\u9996\u5148\u8003\u8651 $x_j\\leq x_i,y_j\\leq y_i$ \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8981\u6c42 $x_i-x_j+y_i-y_j$ \u7684\u6700\u5c0f\uff0c\u76f8\u5f53\u4e8e\u5728\u5de6\u4e0b\u89d2\u627e\u4e00\u4e2a\u70b9\u8ba9 $x_j+y_j$ \u6700\u5927\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e09\u4f4d\u504f\u5e8f\u95ee\u9898\uff0c\u4f7f\u7528 cdq\u5206\u6cbb \u6765\u89e3\u51b3\u3002\n\n\u8003\u8651\u5176\u4ed6\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u901a\u8fc7\u7ffb\u8f6c\u6765\u628a\u4ed6\u8f6c\u5316\u6210\u7b2c\u4e00\u4e2a\u60c5\u51b5\u3002\n\n\u6bd4\u5982\u8bf4 $x_j\\geq x_i,y_j\\leq y_i$ \u7684\u60c5\u51b5\uff0c\u5c31\u662f\u76f8\u5f53\u4e8e\u8ba9\u6bcf\u4e2a $x_i=-x_i$\uff0c\u7136\u540e\u518d\u5e73\u79fb\u503c\u57df\uff0c\u7136\u540e\u518d\u8dd1\u4e00\u904d cdq\u3002\n\n\u6240\u4ee5\u56db\u6b21 cdq \u6211\u4eec\u5c31\u53ef\u4ee5\u5728 $O(n\\log^2n)$ \u7684\u65f6\u95f4\u91cc\u89e3\u51b3\u4e86\u3002\n\n\u6ce8\u610f\u4e00\u4e2a\u5751\u5c31\u662f\u5f53\u5de6\u4e0b\u89d2\u6ca1\u6709\u70b9\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u5230 $0$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de $0$\uff0c\u8981\u4e0d\u7136\u53ef\u80fd\u67e5\u8be2\u5230\u7684\u662f\u4ece $(x_i,y_i)$ \u5230 $(0,0)$ \u7684\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u8fd9\u4e2a\u65f6\u5019\u5e94\u8be5\u8fd4\u56de -inf\u3002\n\n\u54e6\u5bf9\u4e86\uff0c\u8fd9\u9898\u5361\u5e38\uff08\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(register int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(register int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=6e5+5;\nconst int W=1e6+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n,m,lx,ly;\nint bit[W];\nint out[N];\n\nstruct misaka{\n\tint x,y,t,opt;\n\tbool operator < (const misaka &cmp)const{\n\t\treturn x<=cmp.x;\n\t}\n}a[N],p[N],q[N];\n\nvoid add(int o,int x){\n\tfor(;o<=ly;o+=o&-o)bit[o]=max(bit[o],x);\t\n}\n\nint ask(int o){\n\tint res=0;\n\tfor(;o;o-=o&-o)res=max(res,bit[o]);\n\treturn res?res:-1e9;\t\n}\n\nvoid del(int o){\n\tfor(;o<=ly;o+=o&-o)bit[o]=0;\t\n}\n\nvoid CDQ(int l,int r){\n\tif(l==r)return;\n\tint mid=l+r>>1;\n\tCDQ(l,mid),CDQ(mid+1,r);\n\tint i=l,j=mid+1,k=l;\n\twhile(i<=mid&&j<=r)\n\t\tif(p[i]<p[j]){\n\t\t\tif(p[i].opt==1)add(p[i].y,p[i].x+p[i].y);\n\t\t\tq[k++]=p[i++];\t\n\t\t}\n\t\telse{\n\t\t\tif(p[j].opt==2)out[p[j].t]=min(out[p[j].t],p[j].x+p[j].y-ask(p[j].y));\n\t\t\tq[k++]=p[j++];\t\n\t\t}\n\twhile(i<=mid){\n\t\tif(p[i].opt==1)add(p[i].y,p[i].x+p[i].y);\n\t\tq[k++]=p[i++];\n\t}\n\twhile(j<=r){\n\t\tif(p[j].opt==2)out[p[j].t]=min(out[p[j].t],p[j].x+p[j].y-ask(p[j].y));\n\t\tq[k++]=p[j++];\t\t\n\t}\n\tRep(i,l,mid)if(p[i].opt==1)del(p[i].y);\n\tRep(i,l,r)p[i]=q[i]; \n}\n\nint main()\n{\n\tread(n),read(m);\n\tRep(i,1,n){\n\t\tread(a[i].x),read(a[i].y);\n\t\ta[i].opt=1;\n\t\ta[i].x++,a[i].y++;\n\t\tlx=max(lx,a[i].x),ly=max(ly,a[i].y);\t\n\t}\n\tRep(i,1,m){\n\t\tread(a[n+i].opt);\n\t\tread(a[n+i].x),read(a[n+i].y);\n\t\ta[n+i].x++,a[n+i].y++;\n\t\tlx=max(lx,a[n+i].x),ly=max(ly,a[n+i].y);\n\t\ta[n+i].t=i;\n\t}\n\tlx++,ly++;\n\tmemset(out,0x3f,sizeof(out));\n\tRep(i,1,n+m)p[i]=a[i];\n\tCDQ(1,n+m);\n\tRep(i,1,n+m)p[i]=a[i];\n\tRep(i,1,n+m)p[i].x=lx-p[i].x;\n\tCDQ(1,n+m);\n\tRep(i,1,n+m)p[i]=a[i];\n\tRep(i,1,n+m)p[i].y=ly-p[i].y;\n\tCDQ(1,n+m);\n\tRep(i,1,n+m)p[i]=a[i];\n\tRep(i,1,n+m)p[i].x=lx-p[i].x;\n\tRep(i,1,n+m)p[i].y=ly-p[i].y;\n\tCDQ(1,n+m);\n\tRep(i,n+1,n+m)\n\t\tif(a[i].opt==2)printf(\"%d\\n\",out[a[i].t]);\n\treturn 0;\n}\n```\n",
        "postTime": 1599977872,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.luogu.com.cn/blog/NaCarter/solution-p4169)\n\n# CDQ\u5206\u6cbb\n\n\u4f5c\u4e3a\u4e00\u9053\u79bb\u7ebf\u5206\u6cbb\u7684\u6a21\u677f\u9898\uff0c\uff08\u8c8c\u4f3c\u53ef\u4ee5KD-Tree\u5728\u7ebf\uff0c\u4f46\u6211\u4e0d\u4f1a\uff09\u3002\n\n\u65e2\u7136\u8981\u79bb\u7ebf\u505a\uff0c\u90a3\u4e48\u80af\u5b9a\u8981\u83b7\u53d6\u6574\u4e2a\u64cd\u4f5c\u5e8f\u5217\u3002\n\n## \u524d\u7f6e\u829d\u58eb\n\n**CDQ\u5206\u6cbb** \u53c8\u53eb **\u57fa\u4e8e\u65f6\u95f4\u7684\u5206\u6cbb\u7b97\u6cd5**\uff08\uff1f\u4e66\u4e0a\u8fd9\u4e48\u8bf4\u7684\uff08\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\uff09\uff09\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2\uff0c\u8ba1\u7b97 \u8fd9\u4e2a\u67e5\u8be2 \u7684\u7ed3\u679c \u5176\u5b9e\u5c31 \u7b49\u4ef7\u4e8e **\u8ba1\u7b97\u521d\u59cb\u6570\u636e\u53ca\u5728\u8fd9\u6b21\u67e5\u8be2 \u4e4b\u524d\u7684 \u6240\u6709\u4fee\u6539**\u6240\u5e26\u6765\u7684\u5f71\u54cd\n\n\u8ba1\u7b97\u65b9\u6cd5\uff1a\uff08\u4ee5\u4e0b\u6765\u6e90\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\uff09\n\n1.\u8bbe $mid=(l+r)>>1$ ,\u9012\u5f52\u8ba1\u7b97 $solve(l,mid)$\n\n2 \u9012\u5f52\u8ba1\u7b97 $solve(mid+1,r)$\n\n3 \u8ba1\u7b97\u7b2c$l~mid$\u9879\u64cd\u4f5c\u4e2d\u7684\u6240\u6709\u201c\u4fee\u6539\u201d\u5bf9\u7b2c$mid+1$ ~ $r$ \u9879\u64cd\u4f5c\u4e2d\u6240\u6709\u201c\u67e5\u8be2\u201d\u9020\u6210\u7684\u5f71\u54cd\n\n**\u4e0a\u8ff0\u65b9\u6cd5\u6b63\u786e\u6027\u7684\u8bc1\u660e**\n\n\u8bbe\u7b2c$k$\u9879\u64cd\u4f5c\u662f\u201c\u67e5\u8be2\u201d\u3002\u6839\u636e\u5b9a\u4e49\uff0c\u82e5$k<=mid$\uff0c\u5219$solve(l,mid)$\u5df2\u7ecf\u8ba1\u7b97\u4e86\u7b2c$l$ ~ $k-1$ \u9879\u64cd\u4f5c\u4e2d\u7684\u201c\u4fee\u6539\u201d\u5bf9\u5b83\u7684\u5f71\u54cd\u3002\u82e5$k>mid$\uff0c\u5219$solve(mid+1,r)$\u8ba1\u7b97\u5230\u4e86\u7b2c$mid+1$ ~ $k-1$\u9879\u64cd\u4f5c\u4e2d\u7684\u201c\u4fee\u6539\u201d\u5bf9\u5b83\u7684\u5f71\u54cd\uff0c\u518d\u52a0\u4e0a\u7b2c3\u90e8\u5206\u7684\u8ba1\u7b97\uff0c\u5373\u5f97\u5230\u4e86\u7b2c$l$ ~ $k-1$\u9879\u64cd\u4f5c\u4e2d\u7684\u4fee\u6539\u5bf9\u4ed6\u7684\u5f71\u54cd\uff0c\u6545\u4e0a\u8ff0\u8ba1\u7b97\u65b9\u6cd5\u662f\u6b63\u786e\u7684\n\n## \u9898\u610f\n\n\u5927\u81f4\u5c31\u662f\u7ed9\u4f60 $n$ \u4e2a\u521d\u59cb\u70b9\uff0c\u6709 $m$ \u4e2a\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u52a0\u5165\u4e00\u4e2a\u70b9\u6216\u8005\u8fdb\u884c\u4e00\u6b21\u67e5\u8be2\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e0e\u7ed9\u5b9a\u7684 $(x,y)$ \u6700\u8fd1\u7684\u70b9\u6709\u591a\u8fdc\n\n## \u89e3\u51b3\u65b9\u6cd5\n\n\u66fc\u54c8\u987f\u8ddd\u79bb\u516c\u5f0f\uff1a$\\lvert x-x_i \\lvert$ + $\\lvert y-y_i \\lvert$\n\n\u6839\u636e\u7b2c\u4e00\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f $\\lvert x-x_i \\lvert$ + $\\lvert y-y_i \\lvert$ \u7684\u6700\u5c0f\u503c\uff0c\u5f53\u7136\u56e0\u4e3a\u8fd9\u4e2a\u5f0f\u5b50\u6709\u4e00\u4e2a\u7edd\u5bf9\u503c\uff0c\u6211\u80fd\u60f3\u5230\u7684\u5e26\u7edd\u5bf9\u503c\u6c42\u89e3\u7684\u8bdd\u5c31\u4e00\u4e2a\u66b4\u529b\u679a\u4e3e\u3002\n\n\u6240\u4ee5\u4e3a\u4e86\u53bb\u6389\u8fd9\u4e2a\u7edd\u5bf9\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e00\u4e2a\u8be2\u95ee\u90fd\u770b\u4f5c4\u4e2a\u95ee\u9898\uff1a\n\n1.\u5728$(x,y)$\u5de6\u4e0a\u65b9\u7684\u70b9\u6700\u8fd1\u7684\u8ddd\u79bb\u4e3a\uff1f\n\n2 \u5728$(x,y)$\u53f3\u4e0a\u65b9\u7684\u70b9\u6700\u8fd1\u7684\u8ddd\u79bb\u4e3a\uff1f \n\n3 \u5728$(x,y)$\u5de6\u4e0b\u65b9\u7684\u70b9\u6700\u8fd1\u7684\u8ddd\u79bb\u4e3a\uff1f\n\n4 \u5728$(x,y)$\u53f3\u4e0b\u65b9\u7684\u70b9\u6700\u8fd1\u7684\u8ddd\u79bb\u4e3a\uff1f\n\n\u5c06\u4e0a\u8ff0\u95ee\u9898\u7684\u7ed3\u679c\u53d6\u4e00\u4e2a\u6700\u5c0f\u503c\u5c31\u884c\u4e86\n\n\uff08\u5c06\u4e0a\u97624\u4e2a\u95ee\u9898\u7684\u8ddd\u79bb\u516c\u5f0f\u5316\u4e2a\u7b80\uff09\n\n\u4f60\u5c31\u53ef\u4ee5\u53d1\u73b0\u53ea\u7528\u7ef4\u62a4$(x+y)_{max}$\u548c$(x-y)_{max}$\u5c31\u53ef\u4ee5\u4e86\n\n\n\u540e\u9762\u5c31\u662fCDQ\u677f\u5b50\n\n\u552f\u4e00\u7684\u96be\u70b9\u5c31\u662f\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e86\u5427\u3002\u3002\n\n### \u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\n\n\u4ee5\u4e0b\u4ee5\u5de6\u4e0b\u65b9\u5411\u8ba1\u7b97\u4e3a\u4f8b\n\n\u5f53\u7136\uff0c\u4f60\u8981\u5148\u5c06\u6574\u4e2a\u70b9\u96c6\u6309\u7167 $x$ \u5750\u6807\u5347\u5e8f\u6392\u5e8f\n\n\uff08\u5728\u54ea\u91cc\u6392\u5e8f\u53ef\u4ee5\u60f3\u60f3\u6216\u8005\u76f4\u63a5\u770b\u4ee3\u7801\uff09\n\n1.\u626b\u5230\u4e00\u4e2a\u70b9$(x_i,y_i)$\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u7b2c$y_i$\u4e2a\u4f4d\u7f6e\u4e0a\u66f4\u65b0\u503c\u4e3a$(x_i,y_i)$\uff08\u53d6max\u64cd\u4f5c\uff09\n\n2.\u626b\u5230\u4e00\u4e2a\u8be2\u95ee(x,y)\t\u5219\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u67e5\u8be2$[0,y]$\u4e0a\u7684\u6700\u5927\u503c $val$\n\u7b54\u6848\u5c31\u4e3a$x+y-val$\n\n\u5f53\u4f60\u60f3\u5230\u8fd9\u5269\u4e0b\u7684\u5e94\u8be5\u5c31\u53ea\u6709\u5199\u4ee3\u7801\u7684\u95ee\u9898\u4e86\u3002\u3002\n\n\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u4fdd\u5b58\u7684\u662f\u503c\u57df\n\n**\u6240\u4ee5\u8981\u5f00 $10^6$ \u7684\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6211\u61d2\uff0c\u6240\u4ee5\u6211\u5168\u90fd\u5f00\u4e86**\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint c[1000005];\nint maxn;\nconst int INF=0x3f3f3f3f;\nstruct node{int x,y,op;};\nstruct rec{int x,y,order;};\nnode a[1000005];\nrec b[1000005];\nint ans[1000005];\ninline int lowbit(int x){return x&(-x);}\ninline bool cmp(rec x,rec y){\n\tif(x.x!=y.x){\n\t\treturn x.x<y.x;\n\t}\n\treturn x.y<y.y;\n}\ninline void update(int x,int y){\n\tfor(int i=x;i<maxn;i+=lowbit(i)){c[i]=max(c[i],y);}\n\treturn;\n}\ninline int ask_max(int x){\n\tint ans=-INF;\n\twhile(x>0){ans=max(ans,c[x]);x-=lowbit(x);}\n\treturn ans;\n}\ninline void der(){\n\tfor(int i=0;i<=maxn;++i){c[i]=-INF;}\n\treturn;\n}\ninline void calculate(int fs,int fe,int tep,int bx,int by){\n\tint query;\n\tfor(int i=fs;i!=fe;i+=tep){\n\t\tif(by==1){query=b[i].y;}\n\t\telse{query=maxn-b[i].y;}\n\t\tint goal=bx*b[i].x+by*b[i].y;\n\t\tif(a[b[i].order].op==1){update(query,goal);}\n\t\telse{ans[b[i].order]=min(ans[b[i].order],abs(goal-ask_max(query)));}\n\t}\n\tfor(int i=fs;i!=fe;i+=tep){\n\t\tint y= by==1 ? b[i].y : maxn - b[i].y;\n\t\tif(a[b[i].order].op==1){\n\t\t\tfor(int j=y;j<maxn;j+=lowbit(j))\tc[j]=-INF;\n\t\t}\n\t}\n\treturn;\n}\ninline void cdq(int l,int r){\n\tint mid=(l+r)>>1;\n\tif(l<mid){cdq(l,mid);}\n\tif(r>mid+1){cdq(mid+1,r);}\n\tint tot=0;\n\tfor(int i=l;i<=r;++i){\n\t\tif(a[i].op==1&&i<=mid){\n\t\t\tb[++tot].x=a[i].x;\n\t\t\tb[tot].y=a[i].y;\n\t\t\tb[tot].order=i;\n\t\t}\n\t\telse if(a[i].op==2&&i>mid){\n\t\t\tb[++tot].x=a[i].x;\n\t\t\tb[tot].y=a[i].y;\n\t\t\tb[tot].order=i;\n\t\t}\n\t}\n\tsort(b+1,b+tot+1,cmp);\n\tcalculate(1,tot+1,1,1,1);\n\t\n\tcalculate(tot,0,-1,-1,-1);\n\t\n\tcalculate(1,tot+1,1,1,-1);\n\t\n\tcalculate(tot,0,-1,-1,1);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d%d\",&a[i].x,&a[i].y);\n\t\ta[i].op=1;\n\t\ta[i].y++;\n\t\tmaxn=max(maxn,a[i].y);\n\t}\n\n\tfor(int i=n+1;i<=n+m;++i){\n\t\tscanf(\"%d%d%d\",&a[i].op,&a[i].x,&a[i].y);\n\t\ta[i].y++;\n\t\tmaxn=max(maxn,a[i].y);\n\t}\t\n\tmaxn++;\t\n\tmemset(ans,0x3f3f3f3f,sizeof(ans));\n\tmemset(c,0xcf,sizeof(c));\n\tcdq(1,n+m);\n\tfor(int i=n;i<=n+m;++i){\n\t\tif(a[i].op==2){\n\t\t\tprintf(\"%d\\n\",ans[i]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1595648486,
        "uid": 67621,
        "name": "NuoCarter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "\u5565\u4f18\u5316\u90fd\u6ca1\u6709\u7684 CDQ \u5206\u6cbb\u4e5f\u80fd\u901a\u8fc7\u672c\u9898 [link](https://www.luogu.com.cn/record/45666191)\u3002\n\n\u8fd9\u9898\u6211\u4eec\u628a\u6bcf\u6b21\u8be2\u95ee\u548c\u4fee\u6539\u90fd\u65b0\u5efa\u4e00\u4e2a\u70b9\uff0c\u603b\u70b9\u6570\u662f $n+m$ \u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u627e\u5728\u8fd9\u4e2a\u8be2\u95ee\u70b9\u5de6\u4e0b\u89d2\uff0c\u4e14\u65f6\u95f4\u6233\u5728\u4ed6\u4e4b\u524d\u7684\u70b9\u79bb\u4ed6\u6700\u8fd1\u7684\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e09\u7ef4\u504f\u5e8f\uff0c\u7528 cdq \u5206\u6cbb\u89e3\u51b3\u3002\n\n\u4f46\u662f\u8fd8\u6709\u5176\u4ed6\u4e09\u4e2a\u65b9\u5411\u7684\u70b9\u5462\uff1f\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u6765\u4e00\u53d1\u9ed1\u79d1\u6280\uff0c\u627e\u5230 $x$ \u548c $y$ \u5206\u522b\u7684\u6700\u5927\u503c\uff0c\u5c06\u6240\u6709\u70b9\u5173\u4e8e\u8fd9\u4e24\u6761\u76f4\u7ebf\u5bf9\u79f0\uff08\u5c31\u662f $x=maxn-x$\uff09\uff0c\u7136\u540e\u505a $4$ \u6b21 cdq \u5c31\u884c\u4e86\u3002\n\n\u7ec6\u8282\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define N 1001001\n#define MAX 2001\n#define inf 1e18\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\ninline void read(re ll &ret)\n{\n\tret=0;re char c=getchar();re bool pd=false;\n\twhile(!isdigit(c)){pd|=c=='-';c=getchar();}\n\twhile(isdigit(c)){ret=(ret<<1)+(ret<<3)+(c&15);c=getchar();}\n\tret=pd?-ret:ret;\n\treturn;\n}\nll n,m,op[N],fx[N],fy[N],maxnx,maxny;\nstruct node\n{\n\tll x,y,tim,ans;\n\tbool q;\n\tinline friend bool operator <(re node x,re node y)\n\t{\n\t\treturn x.tim<y.tim;\n\t}\n}a[N],tmp[N];\nll tree[N];\ninline void update(re ll pos,re ll num)\n{\n\tpos++;\n\twhile(pos<=maxny+1)\n\t{\n\t\ttree[pos]=max(tree[pos],num);\n\t\tpos+=pos&-pos;\n\t}\n\treturn;\n}\ninline void clear(re ll pos)\n{\n\tpos++;\n\twhile(pos<=maxny+1)\n\t{\n\t\ttree[pos]=-inf;\n\t\tpos+=pos&-pos;\n\t}\n\treturn;\n}\ninline ll query(re ll pos)\n{\n\tpos++;\n\tre ll ret=-inf;\n\twhile(pos)\n\t{\n\t\tret=max(ret,tree[pos]);\n\t\tpos-=pos&-pos;\n\t}\n\treturn ret;\n}\ninline void cdq(re ll l,re ll r)\n{\n\tif(l>=r)\n\t\treturn;\n\tre ll mid=l+r>>1;\n\tcdq(l,mid);\n\tcdq(mid+1,r);\n\tre ll i=l,j=mid+1,k=l;\n\twhile(j<=r)\n\t{\n\t\twhile(i<=mid&&a[i].x<=a[j].x)\n\t\t{\n\t\t\tif(!a[i].q)\n\t\t\t\tupdate(a[i].y,a[i].x+a[i].y);\n\t\t\ttmp[k++]=a[i++];\n\t\t}\n\t\ta[j].ans=min(a[j].x+a[j].y-query(a[j].y),a[j].ans);\n\t\ttmp[k++]=a[j++];\n\t}\n\twhile(i<=mid)\n\t{\n\t\tif(!a[i].q)\n\t\t\tupdate(a[i].y,a[i].x+a[i].y);\n\t\ttmp[k++]=a[i++];\n\t}\n\tfor(i=l;i<=mid;i++)\n\t\tif(!a[i].q)\n\t\t\tclear(a[i].y);\n\tfor(i=l;i<=r;i++)\n\t\ta[i]=tmp[i];\n\treturn;\n}\nsigned main()\n{\n\tread(n);\n\tread(m);\n\tfor(re int i=1;i<N;i++)\n\t\ttree[i]=-inf;\n\tfor(re int i=1;i<=n;i++)\n\t{\n\t\tread(a[i].x);\n\t\tread(a[i].y);\n\t\ta[i].q=false;\n\t\tmaxnx=max(maxnx,a[i].x);\n\t\tmaxny=max(maxny,a[i].y);\n\t\ta[i].tim=0;\n\t}\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tread(op[i]);\n\t\tread(fx[i]);\n\t\tread(fy[i]);\n\t\tif(op[i]==1)\n\t\t\ta[n+i].q=false;\n\t\telse\n\t\t\ta[n+i].q=true;\n\t\ta[n+i].ans=inf;\n\t\ta[n+i].x=fx[i],a[n+i].y=fy[i];\n\t\ta[n+i].tim=i;\n\t\tmaxnx=max(maxnx,fx[i]);\n\t\tmaxny=max(maxny,fy[i]);\n\t}\n\tn+=m;\n\tcdq(1,n);\n\tsort(a+1,a+n+1);\n\tfor(re int i=1;i<=n;i++)\n\t\ta[i].x=maxnx-a[i].x;\n\tcdq(1,n);\n\tsort(a+1,a+n+1);\n\tfor(re int i=1;i<=n;i++)\n\t\ta[i].x=maxnx-a[i].x,a[i].y=maxny-a[i].y;\n\tcdq(1,n);\n\tsort(a+1,a+n+1);\n\tfor(re int i=1;i<=n;i++)\n\t\ta[i].x=maxnx-a[i].x;\n\tcdq(1,n);\n\tsort(a+1,a+n+1);\n\tn-=m;\n\tfor(re int i=1;i<=m;i++)\n\t\tif(op[i]==2)\n\t\t\tprintf(\"%lld\\n\",a[n+i].ans);\n\texit(0);\n}\n```\n",
        "postTime": 1611818855,
        "uid": 176990,
        "name": "Celtic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "# CDQ\u5206\u6cbb\u7b97\u6cd5\n\n## \u9898\u76ee\u5927\u610f\n\n\u6709n\u4e2a\u521d\u59cb\u70b9\uff0c\u53ef\u4ee5\u8fdb\u884cm\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u63d2\u5165\u4e00\u4e2a\u70b9\u6216\u662f\u8fdb\u884c\u4e00\u6b21\u67e5\u8be2\uff0c\u95ee\u79bb\u70b9(x,y)**\u8ddd\u79bb\u6700\u8fd1**\u7684\u70b9\u6709\u591a\u8fdc\u3002\n\n## CDQ\u7b97\u6cd5\n\n### \u505a\u6cd5\uff1a\n\n**\u82e5\u662f\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u8df3\u8fc7\u6b64\u90e8\u5206**\u3002\n\nCDQ\u7b97\u6cd5\u5176\u5b9e\u662f\u4e00\u4e2a**\u57fa\u4e8e\u65f6\u95f4\u7684\u5206\u6cbb**\u7b97\u6cd5\u3002\n\n\u8ba1\u7b97\u201c**\u67e5\u8be2**\u201d\u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u7b49\u4ef7\u4e8e\u8ba1\u7b97\u201c**\u521d\u59cb\u6570\u636e**\u201d\u548c\u201c**\u67e5\u8be2\u6570\u636e\u4e4b\u524d\u7684\u6240\u6709\u4fee\u6539**\u201d\u5bf9\u8be5\u67e5\u8be2**\u9020\u6210\u7684\u5f71\u54cd**\u3002\n\n\u8bbe\u5171\u6709M\u6b21\u64cd\u4f5c $\\forall {l,r}\\in{[1,M]}$,\u5b9a\u4e49$solve(l,r)$\u8868\u793a\u7b2c$k(k\\in{[l,r]})$\u9879\u64cd\u4f5c\u662f\u201c\u67e5\u8be2\u201d\uff0c\u5219\u8ba1\u7b97\u7b2c$l~(k-1)$\u9879\u64cd\u4f5c\u4e2d\u201c**\u4fee\u6539**\u201d\u5bf9\u5b83\u9020\u6210\u7684\u5f71\u54cd\u3002\n\n$solve(l,r)$\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n\t   1.\u8bbemid=(l+r)>>1,\u9012\u5f52\u8ba1\u7b97solve(l,mid)\u3002\n       2.\u9012\u5f52\u8ba1\u7b97solve(mid+1,r)\u3002\n       3.\u8ba1\u7b97\u7b2cl~mid\u9879\u64cd\u4f5c\u4e2d\u6240\u6709\u201c\u4fee\u6539\u201d\u5bf9\u7b2cmid+1~r\u9879\u64cd\u4f5c\u4e2d\u6240\u6709\u201c\u67e5\u8be2\u201d\u9020\u6210\u7684\u5f71\u54cd\u3002\n       \n### \u8bc1\u660e\uff1a\n\n\u8bbe\u7b2c$k$\u9879\u64cd\u4f5c\u662f\"\u67e5\u8be2\"\uff0c**\u6839\u636e\u5b9a\u4e49**\uff1a\u82e5$k\\le mid$\uff0c\u5219$solve(l,mid)$\u5c31**\u5df2\u7ecf\u8ba1\u7b97\u4e86**\u7b2c$l~(k-1)$\u9879\u64cd\u4f5c\u4e2d\u7684 \u201c\u4fee\u6539\u201d\u5bf9\u5b83\u7684\u5f71\u54cd\u3002\u82e5$k>mid$\uff0c\u5219$solve(mid+1,r)$\u8ba1\u7b97\u4e86\u7b2c$(mid+1)~(k-1)$\u9879\u64cd\u4f5c\u4e2d\u7684\u201c\u4fee\u6539\u201d\u5bf9\u5b83\u7684\u5f71\u54cd\u3002\u518d\u52a0\u4e0a\u7b2c$3$\u90e8\u5206\uff0c\u5f97\u5230\u4e86$l~(k-1)$\u9879\u64cd\u4f5c\u4e2d\u7684\u201c\u4fee\u6539\u201d\u5bf9\u5b83\u7684\u5f71\u54cd\n\n### \u5c0f\u7ed3\n\n$solve(l,r)$\u7684\u8ba1\u7b97\u65b9\u6cd5\u663e\u7136\u662f\u4e00\u4e2a**\u5206\u6cbb\u7684\u8fc7\u7a0b**\u3002    $solve(1,M)$\u662f\u539f\u59cb\u95ee\u9898\uff0c\u5f53$l=r$\u65f6\uff0c$solve(l,r)$**\u53ea\u5305\u542b\u4e00\u9879\u64cd\u4f5c**\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u8ba1\u7b97\uff0c\u4e3a\u9012\u5f52\u8fb9\u754c\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u8be5\u5206\u6cbb\u7b97\u6cd5\u5c06\u4e00\u4e2a\u52a8\u6001\u95ee\u9898\u5212\u5206\u6210\u4e86$O(M)$\u4e2a**\u9759\u6001\u95ee\u9898**\u3002\n\n\u8fd9\u79cd\u79bb\u7ebf\u5206\u6cbb\u7b97\u6cd5\u65f6\u57fa\u4e8e\u201c**\u65f6\u95f4**\u201d\u987a\u5e8f\u5bf9\u64cd\u4f5c\u5e8f\u5217\u8fdb\u884c\u5206\u6cbb\u7684\u3002\u56e0\u6b64\u79f0\u4e3a\u57fa\u4e8e\u65f6\u95f4\u7684\u5206\u6cbb\u7b97\u6cd5\uff0c\u53c8\u79f0\u4e3a$CDQ$\u5206\u6cbb\u3002\n\n\u5907\u6ce8\uff1a$CDQ$\u5206\u6cbb\u662f$IOI$\u91d1\u724c\u5973\u9009\u624b**\u9648\u4e39\u7426**\u5728\u56fd\u5bb6\u96c6\u8bad\u961f\u4e2d\u5f15\u5165\u7684\u3002\n\n## \u89e3\u51b3\u65b9\u6848\n\n\u56de\u5230\u6b63\u9898\u3002\n\n### \u5177\u4f53\u505a\u6cd5\n\n\u95ee\u9898\u662f\u6c42\u79bb\u7ed9\u51fa\u70b9**\u66fc\u54c8\u987f\u8ddd\u79bb\u6700\u8fd1**\u7684\u70b9\uff0c\u5373\uff1a\n\n$dis(A,B)=|A_x-B_x|+|A_y-B_y|$\n\n\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe**\u6240\u6709\u7684\u70b9\u90fd\u5728\u67e5\u8be2\u70b9\u7684\u5de6\u4e0b\u65b9**\uff0c\u5219\u53ef\u4ee5\u63a8\u5f97\uff1a\n\n$dis(A,B)=(A_x-B_x)+(A_y-B_y)=(A_x+A_y)-(B_x+B_y)$\n\n\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u8981\u6c42\u51fa$B_x<A_x$\uff0c$B_y<A_y$\u4e14$B_x+B_y$**\u6700\u5927**\u7684\u70b9\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\uff0c\u53ef\u4ee5\u628a\u4e00\u3001\u4e8c\u3001\u56db\u8c61\u9650\u7684\u70b9\u90fd\u901a\u8fc7\u5bf9\u79f0\u8f6c\u79fb\u5230\u7b2c\u4e09\u8c61\u9650\u3002\u4f46**\u67e5\u8be2\u5f88\u591a**\uff0c\u8fd9\u6837\u505a\u7684**\u65f6\u95f4\u590d\u6742\u5ea6**\u80af\u5b9a**\u4e0d\u5bf9**\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u6574\u4e2a\u5e73\u9762**\u7ffb\u8f6c\u4e09\u6b21**\uff0c\u8fdb\u884c**\u56db\u6b21**$CDQ$\u5206\u6cbb\uff0c**\u6bcf\u6b21\u90fd\u53ea\u8003\u8651**\u7b2c\u4e09\u8c61\u9650\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u80fd\u628a**\u6240\u6709\u7684\u70b9**\u90fd\u904d\u5386\u5230\u3002\n\n\u8bb0\u5f55**\u6700\u5927**\u7684$x$\u6216$y$\u503c\u4e3a**\u8fb9\u754c**$Maxn$\uff0c\u6bcf\u6b21\u6cbf$Maxn$\u7ffb\u8f6c\u3002\u4f8b\u5982\u6cbf$y$\u8f74\u7ffb\u8f6c\u65f6\uff0c$x=len-x$\n\n\u90a3\u4e48\u6bcf\u4e2a\u64cd\u4f5c\u6709**\u4e09\u4e2a\u7ef4\u5ea6**\u2014\u2014\u2014\u2014\u65f6\u95f4\u3001$x$\u5750\u6807\u3001$y$\u5750\u6807\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u88ab\u6211\u4eec\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a**\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898**\uff0c\u65f6\u95f4\u5728\u8f93\u5165\u7684\u65f6\u5019\u5148\u6392\u597d\u5e8f\uff0c$x$\u5728\u5206\u6cbb\u7684\u8fc7\u7a0b\u4e2d\u6392\u5e8f\uff0cy\u5219\u4eff\u7167\u4e09\u7ef4\u504f\u5e8f\u7684\u6a21\u677f\u9898P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\uff0c\u7528**\u6811\u72b6\u6570\u7ec4**\u8bb0\u5f55\u5373\u53ef\u3002\n\n### \u6ce8\u610f\n\n\u6bcf\u6b21\u67e5\u8be2\u70b9\u7684$x$\uff0c$y$\u4f1a\u53d8\u5316\uff0c$ans$**\u4e0d\u80fd\u76f4\u63a5\u5b58\u50a8**$max(B_x+B_y)$\uff0c\u5e94\u8be5\u5b58\u5165$min((A_x+A_y)-(B_x+B_y))$\u3002\n\n\u5982\u679c\u67d0\u4e2a\u70b9\u5728\u5750\u6807\u8f74\u4e0a\uff0c\u90a3\u4e48\u5b83\u7684$x$\u6216$y$\u5c31\u4f1a\u4e3a$0$\uff0c\u5b58\u5165\u6811\u72b6\u6570\u7ec4\u65f6\uff0c\u4f1a\u56e0\u4e3a$lowbit()==0$\u9677\u5165**\u6b7b\u5faa\u73af**\uff0c\u6240\u4ee5$x$\uff0c$y$\u8981\u5206\u522b$+1$\u3002\n\n\u540c\u6837\u7684\uff0c\u5982\u679c\u67d0\u4e2a\u70b9**\u521a\u597d**\u7ffb\u8f6c\u5728\u8fb9\u754c$Maxn$\u4e0a\uff0c\u4e5f\u4f1a\u53d8\u6210$0$\uff0c\u6240\u4ee5$Maxn$\u4e5f\u8981$+1$\n\n\u82e5\u67d0\u4e00\u70b9\u5728\u67d0\u6b21\u7ffb\u8f6c\u65f6\u6ca1\u6709\u70b9\u5728\u5b83\u7684\u5de6\u4e0b\u65b9\uff0c\u5c31\u4f1a\u9ed8\u8ba4\u8fd4\u56de$0$\u3002\u5f53\u524d\u7684\u201c**\u539f\u70b9**\u201d\u6bd4\u5b9e\u9645\u4e0a\u7684\u70b9\u79bb\u8be5\u67e5\u8be2\u70b9\u90fd\u8fd1\uff0c\u8fd9\u6837\u6700\u7ec8\u7684\u8ddd\u79bb\u5c31\u6210\u4e86\u8fd9\u4e2a\u70b9\u5230\u539f\u70b9\u7684\u8ddd\u79bb\uff0c\u4f46\u662f\u539f\u70b9\u7ecf\u8fc7\u521a\u624d\u7684\u66f4\u6539\u540e\u5df2\u7ecf**\u4e0d\u5b58\u5728**\u4e86(\u4e0d\u5b58\u5728$x$\uff0c$y$\u4e3a$0$\u7684\u70b9)\uff0c\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u5f53\u67e5\u8be2\u65f6**\u9700\u8981\u7279\u5224**\uff0c\u82e5\u4e3a0\u5219\u8fd4\u56de$-INF$\n\n## \u7ed3\u8bed\n\n\u8fd9\u9053\u9898**\u975e\u5e38\u591a\u7ec6\u8282**\uff0c\u5199\u7684\u65f6\u5019\u9700\u8981**\u975e\u5e38\u4ed4\u7ec6**\uff0c\u5426\u5219~~\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u662f\u4e00\u6ce2\u7206\u96f6QwQ~~\n\n\u8fd8\u6709\u5c31\u662f\u7528CDQ\u7684\u8bdd~~\u65f6\u95f4\u590d\u6742\u5ea6\u597d\u50cf\u5361\u4e0d\u8fc7~~\uff0c~~\u5e38\u6570\u6709\u70b9\u5927QwQ~~\uff0c\u53ef\u4ee5\u5f00\u4e2a$O_2$\u4f18\u5316\u5c31\u8fc7\u4e86\u3002\n\n## code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1001001,INF=0x3f3f3f3f;\nstruct node{\n\tint x,y,opt;\n}a[N];\nstruct BIT{\n\tint x,y,point;\n}b[N];\nint n,m,Maxn;\nint tree[N],ans[N];\ninline int lowbit(int x) { return x&(-x); }\ninline bool cmp(BIT x,BIT y)\t//\u6392\u5e8f \n{\n\tif(x.x!=y.x) return x.x<y.x;\n\treturn x.y<y.y;\n}\n//\u6811\u72b6\u6570\u7ec4 \ninline void change(int x,int val)\n{\n\tfor(int i=x;i<Maxn;i+=lowbit(i))\n\t\ttree[i]=max(tree[i],val);\n}\ninline int Get_max(int x)\n{\n\tint mx=-INF;\n\tfor(int i=x;i;i-=lowbit(i))\n\t\tmx=max(mx,tree[i]);\n\treturn mx;\n}\n\ninline void solve(int start,int end,int temp,int bx,int by){\n\tint instead;\n\tfor(int i=start;i!=end;i+=temp){\n\t\tif(by==1){instead=b[i].y;}\n\t\telse{instead=Maxn-b[i].y;}\n\t\tint g=bx*b[i].x+by*b[i].y;\n\t\tif(a[b[i].point].opt==1){change(instead,g);}\n\t\telse{ans[b[i].point]=min(ans[b[i].point],abs(g-Get_max(instead)));}\n\t}\n\tfor(int i=start;i!=end;i+=temp){\n\t\tint y=by;\n\t\tif(y==1&&by==1) y=b[i].y;\n\t\telse y=Maxn-b[i].y;\n\t\tif(a[b[i].point].opt==1){\n\t\t\tfor(int j=y;j<Maxn;j+=lowbit(j))\t\n\t\t\t\ttree[j]=-INF;\t\t//\u6700\u540e\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u7684\u5904\u7406 \n\t\t}\n\t}\n\treturn;\n}\n\ninline void CDQ(int l,int r)\n{\n\tint mid=(l+r)>>1;\n\tif(l<mid) CDQ(l,mid); \t//\u5206\u6cbb \n\tif(r>mid+1) CDQ(mid+1,r);\n\tint tot=0;\n\tfor(int i=l;i<=r;i++){\n\t\tif(a[i].opt==1&&i<=mid){\n\t\t\tb[++tot].x=a[i].x;\n\t\t\tb[tot].y=a[i].y;\n\t\t\tb[tot].point=i;\n\t\t}\n\t\telse{\n\t\t\tif(a[i].opt==2&&i>mid){\n\t\t\t\tb[++tot].x=a[i].x;\n\t\t\t\tb[tot].y=a[i].y;\n\t\t\t\tb[tot].point=i;\n\t\t\t}\n\t\t}\n\t}\n\tsort(b+1,b+tot+1,cmp);\n\tsolve(1,tot+1,1,1,1);\t//\u56db\u6b21\u7ffb\u8f6c\u5e73\u9762 \n\tsolve(tot,0,-1,-1,-1);\n\tsolve(1,tot+1,1,1,-1);\n\tsolve(tot,0,-1,-1,1);\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d\",&a[i].x,&a[i].y);\n\t\ta[i].opt=1; a[i].y++;\t//\u628a\u8f93\u5165\u4e5f\u770b\u6210\u65f6\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\uff1b y++\u9632\u6b62\u4e3a\u96f6 \n\t\tMaxn=max(Maxn,a[i].y);\t\t//\u8bb0\u5f55\u8fb9\u754c \n\t}\n\tfor(int i=n+1;i<=n+m;i++){\n\t\tscanf(\"%d%d%d\",&a[i].opt,&a[i].x,&a[i].y);\n\t\ta[i].y++; Maxn=max(Maxn,a[i].y);\t//\u540c\u4e0a \n\t}\n\tMaxn++;\t\t//\u540c\u6837\u4e5f\u662f\u9632\u6b62\u6811\u72b6\u6570\u7ec4\u6b7b\u5faa\u73af \n\tmemset(ans,0x3f3f3f3f,sizeof(ans));\n\tmemset(tree,0xcf,sizeof(tree));\n\tCDQ(1,n+m);\t\t//CDQ \n\tfor(int i=n;i<=n+m;i++)\n\t\tif(a[i].opt==2) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1596722024,
        "uid": 258460,
        "name": "Booksnow",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    },
    {
        "content": "# \u5929\u4f7f\u73a9\u5076\n\n## \u9898\u610f\n\n\u7ed9\u51fa\u4e00\u4e9b\u70b9\uff0c\u7ed9\u5b9a\u5750\u6807\u6c42\u4e0e\u5df2\u6709\u70b9\u6700\u77ed\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u52a8\u6001\u6dfb\u52a0\u8be2\u95ee\uff0c\u53ef\u79bb\u7ebf\n\n$n,m\\le 3e5$\n\n## \u5206\u6790\n\n\u8fd9\u9898\u8fd8\u662f\u5f88\u6c34\u7684\uff0c\u53ea\u8981\u65b9\u5411\u5bf9\u4e86\u5c31\u60f3\u5f97\u51fa\u6765\n\n\u5148\u628a\u66fc\u54c8\u987f\u8ddd\u79bb\u5f0f\u5b50\u5217\u51fa\u6765\n\n$$dis(A,B)=|A_x-B_x|+|A_y-B_y| $$\n\n\u8fd9\u4e2a\u7edd\u5bf9\u503c\u611f\u89c9\u5f88\u96be\u5904\u7406\u6389\uff0c\u5982\u679c\u6211\u4eec\u5355\u7eaf\u53bb\u6389\u7edd\u5bf9\u503c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\n\n\u5f53 $dis(A,B)=A_x-B_x+A_y-B_y$ \u65f6\uff0c\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\u662f $B$ \u5728 $A$ \u7684\u5de6\u4e0b\u65b9\uff0c\u8bbe\u4e00\u4e2a\u70b9 $X$ \u51fa\u73b0\u7684\u65f6\u95f4\u4e3a $X_t$ \uff0c\u4e5f\u5c31\u662f $B$ \u9700\u8981\u6ee1\u8db3 $B_t\\le A_t,B_x\\le A_x,B_y\\le A_y$\n\n\u600e\u4e48\u8fd9\u4e48\u773c\u719f\uff1f\n\n\u8fd9\u4e0d\u5c31\u662f\u4e09\u7ef4\u504f\u5e8f\u5417\uff1f\uff01\u8fd9\u4e0d\u5c31\u662f $cdq$ \u5206\u6cbb\u5417\uff1f\uff01\n\n\u6211\u4eec\u8003\u8651 $cdq$ \u5206\u6cbb\uff0c\u9ed8\u8ba4\u7684 $t$ \u5df2\u7ecf\u5e2e\u4f60\u6392\u5e8f\u597d\u4e86\uff0c\u7528 $cdq$ \u6392\u5e8f $x$ \n\n\u8003\u8651\u5982\u4f55\u5408\u5e76\u5de6\u53f3 $cdq$ \n\n\u9996\u5148\u53f3\u4fa7\u70b9 $x$ \u5927\u4e8e\u5de6\u4fa7\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u770b $y$ \u5927\u5c0f\u5373\u53ef\n\n\u6211\u9996\u5148\u9009\u62e9\u4e86 $cdq$ \u5957 $cdq$ \u6765\u5904\u7406 $y$ \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u8bb0\u5f55 $lr$ \u5728 $cdq_1$ \u4e2d\u662f\u5de6\u4fa7\u70b9 $(0)$ \u8fd8\u662f\u53f3\u4fa7\u70b9 $(1)$ \uff0c\u7136\u540e $cdq_2$ \u6309 $y$ \u8fdb\u884c\u6392\u5e8f\n\n\u5728 $cdq_2$ \u7684\u5f52\u5e76\u4e2d\u5bf9\u4e8e\u6240\u6709\u5de6\u4fa7\u70b9\u4e2d $lr=0$ \u7684\u63d2\u5165\u70b9 $A$ \uff0c\u8bb0\u5f55\u8fd9\u4e9b\u70b9\u7684 $-A_x-A_y$ \u6700\u5c0f\u503c\n\n\u5bf9\u4e8e\u6240\u6709\u53f3\u4fa7\u70b9\u4e2d $lr=1$ \u7684\u8be2\u95ee\u70b9 $B$ \uff0c\u5c06\u76ee\u524d\u7684\u6700\u5c0f\u503c\u52a0\u4e0a $+B_x+B_y$ \uff0c\u548c\u53d8\u91cf $B_{ans}$ \u53d6 $min$\n\n\u5904\u7406\u5b8c\u540e $B_{ans}$ \u5c31\u662f\u548c\u5de6\u4e0b\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\u4e86\n\n\u8bb0\u5f55\u6700\u5c0f\u503c\u662f $O(1)$ \u7684\u6548\u7387\uff0c $cdq$ \u5957 $cdq$ \u662f $O(n\\log^2 n)$ \u7684\u6548\u7387\uff0c\u603b\u6548\u7387 $O(n\\log^2 n)$\n\n\u90a3\u5982\u4f55\u5904\u7406\u8be2\u95ee\u70b9\u5230\u5176\u4ed6\u65b9\u5411\u7684\u70b9\u7684\u8ddd\u79bb\u5462\uff1f\n\n\u6211\u4eec\u628a $cdq$ \u7684\u6392\u5e8f\u6539\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u628a\u4ece\u5c0f\u5230\u5927\u53d8\u6210\u4ece\u5927\u5230\u5c0f\u4e4b\u7c7b\u7684\uff0c\u7136\u540e\u518d\u628a\u6700\u5c0f\u503c\u7684\u8ba1\u7b97\u6539\u4e00\u4e0b\u5c31\u597d\u4e86\n\n\u7531\u4e8e\u53cd\u590d\u505a $cdq$ \u662f\u4e58\u4e00\u4e2a\u5e38\u6570\u7684\u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u8fd8\u662f $O(n\\log^2 n)$\n\n\u90a3\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fc7\u4e86\u5417\uff1f\n\n![\u65e0\u6807\u9898.png](https://i.loli.net/2019/08/31/jIXLmvZgMnaPsS1.png)\n\n\u8fd9\u662f\u5df2\u7ecf\u5c3d\u6211\u6240\u80fd\u5361\u5e38\u540e\u7684\u4ee3\u7801\uff0c\u5404\u79cd\u5438\u6c14\u4f53\u90fd\u6709\u4e86\n\n\u8fd9\u9898\u672c\u6765\u5c31\u5361\u5e38\uff0c\u518d\u52a0\u4e0acdq\u5e38\u6570\u6bd4\u6811\u72b6\u6570\u7ec4\u7a0d\u5fae\u591a\u4e86\u4e00\u4e9b\uff0c\u5c31\u7206\u70b8\u4e86\n\n### \u4f18\u5316\n\n\u628a $cdq$ \u5957 $cdq$ \u8fd9\u79cd\u5947\u602a\u7684\u4e1c\u897f\u6539\u6210 $cdq$ \u5957\u6811\u72b6\u6570\u7ec4\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u7684\u662f\u524d\u7f00\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u7ebf\u6bb5\u6811\n\n\u6211\u6700\u5f00\u59cb\u5199\u5d4c\u5957\u7684\u539f\u56e0\u662f\u601d\u8def\u4e0d\u6e05\uff0c\u4f46\u7406\u8bba\u590d\u6742\u5ea6\u8fd9\u4e24\u4e2a\u662f\u4e00\u6837\u7684\uff0c\u5361\u5e38\u9898\u592a\u6076\u5fc3\u4e86wsl\n\n\u8fd8\u6709\u4e00\u4e2a\u964d\u5e38\u6570\u7684\u4f18\u5316\u662f\u5728\u5904\u7406\u4e0d\u540c\u65b9\u5411\u7684\u70b9\u7684\u65b9\u6cd5\n\n\u6211\u6700\u5f00\u59cb\u662f\u7528\u5404\u79cd\u5224\u65ad\u6765\u5904\u7406\u4e0d\u540c\u65b9\u5411\uff0c\u4e00\u4e2a\u65b9\u5411\u4e00\u79cd $cdq$ \uff0c\u5bfc\u81f4\u4ee3\u7801\u4e2d $if,switch$ \u8bed\u53e5\u4f17\u591a\u3002\u4f46\u662f\u770b\u5b8c\u5176\u4ed6\u9898\u89e3\u53d1\u73b0\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u6539\u5750\u6807\uff01\n\n\u6211\u4eec\u76f4\u63a5\u6539\u5750\u6807\u5373\u53ef\uff0c\u50cf\u65cb\u8f6c\u5750\u6807\u7cfb\u4e00\u6837\uff0c\u8fd9\u91cc\u65cb\u8f6c\u7684\u5ea6\u6570\u90fd\u662f\u76f4\u89d2\uff0c\u6240\u4ee5\u66f4\u7b80\u5355\u4e86\n\n\u8fd9\u4e24\u4e2a\u4f18\u5316\u5c31\u662f\u6700\u6709\u6548\u7684\u4f18\u5316\u4e86\n\n\u5176\u4ed6\u4f18\u5316\uff1a\n\n\u6811\u72b6\u6570\u7ec4\u624b\u52a8\u5220\u9664\u65f6\u53ea\u5220\u63d2\u5165\u8fc7\u7684\u70b9\uff0c\u4e0d\u8981\u592a\u66b4\u529b\u7684\u5220\u9664\n\n$inline,register,O2,O3,Ofast$ \u7b49\u5e38\u89c4\u5361\u5e38\n\n\u7406\u8bba\u590d\u6742\u5ea6\u4f18\u5316\uff1a\n\n\u80fd\u964d\u7406\u8bba\u590d\u6742\u5ea6\u7684\u4f18\u5316\uff01\n\n\u6211\u4eec\u6ce8\u610f\u5230 $n,m$ \u7684\u6570\u5b57\u90fd\u5f88\u5927\uff0c\u5982\u679c\u52a0\u8d77\u6765\u5904\u7406\u7684\u8bdd\u590d\u6742\u5ea6\u5177\u4f53\u4e3a $O((n+m)\\log(n+m)\\log(K))$\n\n\u6ce8\uff1a\u4e3a\u4e86\u8868\u8ff0\u65b9\u4fbf\u5750\u6807\u503c\u57df\u8bbe\u4e3a $K$\n\n\u6211\u4eec\u5c06\u524d $n$ \u4e2a\u70b9\u6539\u5b8c\u5750\u6807\u540e\u6309 $x$ \u7b2c\u4e00\u5173\u952e\u5b57 $y$ \u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u3002\u7136\u540e\u904d\u5386\u4e00\u904d $m$ \u770b\u8be2\u95ee\u70b9\u5728\u524d $n$ \u4e2a\u70b9\u4e2d\u7684\u7b54\u6848\uff0c\u7136\u540e $cdq$ \u5904\u7406\u540e $m$ \u4e2a\u70b9\n\n\u590d\u6742\u5ea6\u4e3a $O(n\\log n+m\\log K+m\\log m\\log K)=O(m\\log m\\log K)$\n\n\u524d\u8005 $(n+m)\\log (n+m)\\log K\\approx 2.4e8$\n\n\u540e\u8005 $m\\log m\\log K\\approx 1.14e8$\n\n\u5dee\u4e86\u4e00\u4e2a\u4ebf\u591a\n\n\u4f46\u5e38\u6570\u4e4b\u7c7b\u7684\u5f71\u54cd\u5c31\u5f88\u8ff7\u4e86\n\n\u6240\u4ee5\u8fd9\u4e2a\u4f18\u5316\u5f88\u8ff7\n\nAC\u4ee3\u7801(\u4e0d\u5e26\u6700\u540e\u4e00\u79cd\u4f18\u5316)\n\n```cpp\n// luogu-judger-enable-o2\n#pragma GCC optimize(3,\"Ofast\",\"inline\")\n\n#include<bits/stdc++.h>\n\n#define rg register\n\nusing namespace std;\n\nconst int MAXN=6e5+1,M=1e6+2;\n\nint tr[M+7];\ninline void add(rg int pos,rg int X) {\n    for(rg int i=pos;i<=M;i+=i&-i) tr[i]=min(tr[i],X);\n}\ninline void del(rg int pos) {\n    for(rg int i=pos;i<=M;i+=i&-i) tr[i]=1e9;\n}\ninline int find(rg int pos) {\n    rg int minn=1e9;\n    for(rg int i=pos;i>0;i-=i&-i) minn=min(minn,tr[i]);\n    return minn;\n}\n\nint n,m;\n\nstruct node {\n    int x,y,pos,XY;\n    bool type,add; //type:0\u63d2\u5165\u70b9,1\u8be2\u95ee\u70b9\n}A[MAXN],B[MAXN],D[MAXN];\n\nint ans[MAXN];\n\nint MINN=1e9,K;\n\nvoid cdq(rg int l,rg int r) {\n    if(l==r) return;\n    rg int mid=(l+r)>>1;\n    cdq(l,mid);cdq(mid+1,r);\n    for(rg int i=l,i2=l,i3=mid+1;i<=r;i++) {\n        if((A[i2].x<=A[i3].x&&i2<=mid)||i3>r) {\n            B[i]=A[i2];\n            if(B[i].type==0) add(B[i].y,-B[i].XY);\n            B[i].add=1;\n            i2++;\n        }\n        else {\n            B[i]=A[i3];\n            if(B[i].type==1) ans[B[i].pos]=min(ans[B[i].pos],find(B[i].y)+B[i].XY);\n            i3++;\n        }\n    }\n    for(rg int i=l;i<=r;i++) {\n        A[i]=B[i];\n        if(B[i].type==0&&B[i].add) del(A[i].y);\n        A[i].add=0;\n    }\n}\n\ninline int read() {\n    rg int A=0;\n    rg char ch='!';\n    while(ch<'0'||ch>'9')\n        ch=getchar();\n    while(ch>='0'&&ch<='9') {\n        A=A*10+ch-'0';\n        ch=getchar();\n    }\n    return A;\n}\n\nvoid out(rg int A) {\n    if(A/10) out(A/10);\n    putchar(A%10+'0');\n}\n\nint main() {\n    memset(ans,0x3f,sizeof(ans));\n    memset(tr,0x3f,sizeof(tr));\n    n=read();m=read();\n    for(rg int i=1;i<=n;i++) {\n        D[i].x=read();D[i].y=read();\n        D[i].x++;D[i].y++;\n        D[i].XY=D[i].x+D[i].y;\n        D[i].type=0;\n    }\n    rg int cnt=1;\n    for(rg int i=1,i2;i<=m;i++) {\n        i2=read();D[i+n].x=read();D[i+n].y=read();\n        D[i+n].type=i2-1;\n        D[i+n].x++;D[i+n].y++;\n        D[i+n].XY=D[i+n].x+D[i+n].y;\n        if(D[i+n].type==1) {\n            D[i+n].pos=cnt;\n            cnt++;\n        }\n    }\n\n    for(rg int i=1;i<=n+m;i++) {\n        A[i]=D[i];\n    }\n    cdq(1,n+m);\n    \n    for(rg int i=1;i<=n+m;i++) {\n        A[i]=D[i];\n        A[i].x=M-D[i].y;A[i].y=D[i].x;\n        A[i].XY=A[i].x+A[i].y;\n    }\n    cdq(1,n+m);\n\n    for(rg int i=1;i<=n+m;i++) {\n        A[i]=D[i];\n        A[i].x=M-D[i].x;A[i].y=M-D[i].y;\n        A[i].XY=A[i].x+A[i].y;\n    }\n    cdq(1,n+m);\n\n    for(rg int i=1;i<=n+m;i++) {\n        A[i]=D[i];\n        A[i].x=D[i].y;A[i].y=M-D[i].x;\n        A[i].XY=A[i].x+A[i].y;\n    }\n    cdq(1,n+m);\n    \n    for(rg int i=1;i<cnt;i++) {\n        out(ans[i]);\n        putchar('\\n');\n    }\n}\n```",
        "postTime": 1567170558,
        "uid": 34323,
        "name": "mohei0",
        "ccfLevel": 7,
        "title": "\u5929\u4f7f\u73a9\u5076 \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u6587\u7ae0\u521a\u521a\u6302\u4e86\uff0c\u73b0\u5df2\u4fee\u590d\u3002\n\n$\\Large\\natural$ **P4169 [Violet]\u5929\u4f7f\u73a9\u5076,SJY\u6446\u68cb\u5b50 / [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P4169) / [\u66f4\u597d\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/BlankAo/p/14507879.html)**\n\n## \u9898\u610f\n\n~~\u7531\u4e8e\u7279\u6b8a\u539f\u56e0\uff0c\u52a0\u4e86\u4e2a\u9898\u610f\u7b80\u8ff0~~\n\n\u4e00\u5f00\u59cb\u6709 $n$ \u4e2a\u5173\u952e\u70b9 $(a,b)$\u3002\u7136\u540e\u6709 $T$ \u4e2a\u64cd\u4f5c\uff1a\n\n- \u591a\u51fa\u4e00\u4e2a\u5173\u952e\u70b9 $(a,b)$\u3002\n- \u8be2\u95ee\u5982\u679c\u6211\u7ad9\u5728 $(x,y)$\uff0c\u6700\u8fd1\u7684\u5173\u952e\u70b9\u8ddd\u79bb\u6211\u591a\u8fdc\u3002\uff08\u8fd9\u91cc\u7684\u8ddd\u79bb\u662f**\u66fc\u54c8\u987f\u8ddd\u79bb**\uff09\n\n$n,T\\le 3\\times 10^5$\uff0c\u4ee5\u53ca $0\\le a,b,x,y\\le 10^6$\u3002\n\n## \u89e3\u6cd5\n\n\u4e00\u5f00\u59cb\u7684 $n$ \u4e2a\u70b9\u76f4\u63a5\u5f53\u4fee\u6539\u64cd\u4f5c\u3002\n\n\u66fc\u54c8\u987f\u8ddd\u79bb\u8868\u793a\u662f $|x_1-x_2|+|y_1-y_2|$\uff0c\u8fd9\u663e\u7136\u4e0d\u597d\u7b97\u3002\u4e00\u822c\u5bf9\u4e8e\u66fc\u54c8\u987f\u8ddd\u79bb\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u4e00\u79cd\u662f\u8f6c\u6210\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\uff0c\u53e6\u4e00\u79cd\u662f**\u62c6\u7edd\u5bf9\u503c**\u3002\u6211\u4eec\u770b\u5230\u8fd9\u9898\u6709\u4fee\u6539\u64cd\u4f5c\uff0c\u60f3\u5230\u62c6\u7edd\u5bf9\u503c\u66f4\u65b9\u4fbf\u4e00\u4e9b\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0c\u6211\u4eec\u5206**\u56db\u79cd\u60c5\u51b5**\u8ba8\u8bba\uff08\u6700\u8fd1\u7684\u70b9\u5728\u6211\u7684\u5de6\u4e0a / \u53f3\u4e0a / \u5de6\u4e0b / \u53f3\u4e0b\uff09\u3002\u770b\u5230\u9898\u76ee\u6709\u4e09\u4e2a\u7ef4\u5ea6 $x,y,t$\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230 **CDQ\u5206\u6cbb**\u3002\n\n---\n\n\u4e0b\u9762\u4ee5**\u70b9\u5728\u6211\u53f3\u4e0a\u89d2**\u4e3a\u4f8b\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee $(x,y)$\uff0c\u5176\u5b83\u70b9\u5904\u6211\u7684\u8ddd\u79bb\u662f\uff1a\n$$\n|x-a|+|y-b|=a-x+b-y=a+b-x-y\n$$\n$x,y$ \u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u6211\u4eec\u53ea\u7528\u627e\u5230 $a+b$ \u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u6309\u7167 **CDQ\u5206\u6cbb** \u7684\u5957\u8def\uff0c\u6211\u4eec\u5df2\u7ecf\u628a\u533a\u95f4\u4e00\u5206\u4e3a\u4e8c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u4ee5 $x$ \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c $y$ \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57**\u6392\u5e8f**\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u7684\u76ee\u7684\u662f\uff0c\u67e5\u8be2 $(x,y)$ \u53f3\u4e0a\u89d2\u7684\u70b9\u4e2d $a+b$ \u6700\u5c0f\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528**\u7ebf\u6bb5\u6811**\u7ef4\u62a4\u3002\n\n\u7136\u540e\u6bcf\u6b21\u628a $a\\ge x$ \u7684\u4fee\u6539\u90fd\u52a0\u5165\uff08\u7ed9 $b$ \u8fd9\u4e2a\u4f4d\u7f6e\u66f4\u65b0 $a+b$ \u6743\u503c\uff09\u3002\u8fd9\u4e2a\u65f6\u5019\u6240\u6709\u7684\u5173\u952e\u70b9\u80af\u5b9a\u90fd\u5728 $(x,y)$ \u7684**\u53f3\u8fb9**\u3002\u800c\u67e5\u8be2 $y\\sim \\inf$ \u5c31\u4fdd\u8bc1\u4e86\u5173\u952e\u70b9\u5728 $(x,y)$ \u7684**\u4e0a\u65b9**\uff0c\u6240\u4ee5\u5c31\u67e5\u8be2\u5230\u4e86\u53f3\u4e0a\u89d2\u5566~\n\n\u6700\u540e\u6839\u636e\u5957\u8def\uff0c\u8bb0\u5f97**\u6e05\u7a7a\u7ebf\u6bb5\u6811**\u3002\n\n---\n\n\u5176\u5b83\u4e09\u4e2a\u65b9\u4f4d\u90fd\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u7528\u7a0d\u5fae\u6539\u4e00\u4e0b**\u6392\u5e8f\u65b9\u5f0f\u3001\u679a\u4e3e\u65b9\u5f0f\u3001\u7ebf\u6bb5\u6811\u66f4\u65b0\u6743\u503c\u3001\u7ebf\u6bb5\u6811\u67e5\u8be2\u533a\u95f4**\u5c31\u884c\u4e86\u3002\u770b\u4f3c\u5f88\u590d\u6742\uff0c\u4f46\u53ea\u8981\u591a\u5728\u7eb8\u4e0a\u753b\u753b\u56fe\u5c31\u53ef\u4ee5\u6e05\u6670\u5730\u6253\u5b8c\u9898\u76ee\u4e86\u3002\n\n\n\n### \u4ee3\u7801\n\n\u6ce8\u610f\u56e0\u4e3a\u4e00\u5f00\u59cb\u7684\u5173\u952e\u70b9\u90fd\u5f53\u4fee\u6539\u64cd\u4f5c\u4e86\uff0c\u6240\u4ee5\u5b58\u64cd\u4f5c\u7684\u6570\u7ec4\u7a7a\u95f4\u5f97**\u5f00\u4e24\u500d**\u3002\n\n\u6570\u7ec4\u8981\u6e05\u7a7a\u4e3a\u6781\u5927\u503c\u3002\n\n```c++\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(int i=x;i<=y;++i)\nusing namespace std;\nconst int n7=601234,t7=4012345,hug=1000000;\nstruct dino{int sys,x,y,id;}qq[n7];\nint n,T,tre[t7],ans[n7];\n\nint rd(){\n    int shu=0;char ch=getchar();\n    while( !isdigit(ch) )ch=getchar();\n    while( isdigit(ch) )shu=(shu<<1)+(shu<<3)+(ch^48),ch=getchar();\n    return shu;\n}\n\nvoid updat(int o,int l,int r,int id,int x){\n\tif(l==r){tre[o]=x;return;}\n\tint mid=(l+r)>>1;\n\tif(id<=mid)updat(o<<1,l,mid,id,x);\n\telse updat(o<<1|1,mid+1,r,id,x);\n\ttre[o]=min(tre[o<<1],tre[o<<1|1]);\n} \n\nint query(int o,int l,int r,int L,int R){\n\tif(L<=l&&r<=R)return tre[o];\n\tint mid=(l+r)>>1,fin=INT_MAX;\n\tif(L<=mid)  fin=query(o<<1,l,mid,L,R);\n\tif(R>=mid+1)fin=min(fin, query(o<<1|1,mid+1,r,L,R) );\n\treturn fin;\n}\n\nbool cmp1(dino p,dino q){return p.x==q.x?p.y>q.y:p.x>q.x;}\n\nbool cmp2(dino p,dino q){return p.x==q.x?p.y>q.y:p.x<q.x;}\n\nbool cmp3(dino p,dino q){return p.x==q.x?p.y<q.y:p.x<q.x;}\n\nbool cmp4(dino p,dino q){return p.x==q.x?p.y<q.y:p.x>q.x;}\n\nvoid CDQ(int l,int r){\n\tif(l==r||r<=n)return;\n\tint mid=(l+r)>>1,L;\n\tCDQ(l,mid),CDQ(mid+1,r);\n\n\t//\u70b9\u5728\u6211\u7ad9\u4f4d\u53f3\u4e0a\u89d2 \n\tsort(qq+l,qq+mid+1,cmp1);\n\tsort(qq+mid+1,qq+r+1,cmp1);\n\tL=l;\n\trep(i,mid+1,r){\n\t\tif(qq[i].sys==1)continue;\n\t\twhile(qq[L].x>=qq[i].x&&L<=mid){\n\t\t\tif(qq[L].sys==1)updat(1,0,hug,qq[L].y,qq[L].x+qq[L].y);\n\t\t\tL++;\n\t\t}\n\t\tans[ qq[i].id ]=min(ans[ qq[i].id ],query(1,0,hug,qq[i].y,hug)-qq[i].x-qq[i].y);\n\t}\n\trep(i,l,L-1){\n\t\tif(qq[i].sys==1)updat(1,0,hug,qq[i].y,tre[0]);\n\t}\n\t\n\t//\u70b9\u5728\u6211\u7ad9\u4f4d\u5de6\u4e0a\u89d2 \n\tsort(qq+l,qq+mid+1,cmp2);\n\tsort(qq+mid+1,qq+r+1,cmp2);\n\tL=l;\n\trep(i,mid+1,r){\n\t\tif(qq[i].sys==1)continue;\n\t\twhile(qq[L].x<=qq[i].x&&L<=mid){\n\t\t\tif(qq[L].sys==1)updat(1,0,hug,qq[L].y,-qq[L].x+qq[L].y);\n\t\t\tL++;\n\t\t}\n\t\tans[ qq[i].id ]=min(ans[ qq[i].id ],query(1,0,hug,qq[i].y,hug)+qq[i].x-qq[i].y);\n\t}\n\trep(i,l,L-1){\n\t\tif(qq[i].sys==1)updat(1,0,hug,qq[i].y,tre[0]);\n\t}\n\t\n\t//\u70b9\u5728\u6211\u7ad9\u4f4d\u5de6\u4e0b\u89d2 \n\tsort(qq+l,qq+mid+1,cmp3);\n\tsort(qq+mid+1,qq+r+1,cmp3);\n\tL=l;\n\trep(i,mid+1,r){\n\t\tif(qq[i].sys==1)continue;\n\t\twhile(qq[L].x<=qq[i].x&&L<=mid){\n\t\t\tif(qq[L].sys==1)updat(1,0,hug,qq[L].y,-qq[L].x-qq[L].y);\n\t\t\tL++;\n\t\t}\n\t\tans[ qq[i].id ]=min(ans[ qq[i].id ],query(1,0,hug,0,qq[i].y)+qq[i].x+qq[i].y);\n\t}\n\trep(i,l,L-1){\n\t\tif(qq[i].sys==1)updat(1,0,hug,qq[i].y,tre[0]);\n\t}\n\t\n\t//\u70b9\u5728\u6211\u7ad9\u4f4d\u53f3\u4e0b\u89d2 \n\tsort(qq+l,qq+mid+1,cmp4);\n\tsort(qq+mid+1,qq+r+1,cmp4);\n\tL=l;\n\trep(i,mid+1,r){\n\t\tif(qq[i].sys==1)continue;\n\t\twhile(qq[L].x>=qq[i].x&&L<=mid){\n\t\t\tif(qq[L].sys==1)updat(1,0,hug,qq[L].y,qq[L].x-qq[L].y);\n\t\t\tL++;\n\t\t}\n\t\tans[ qq[i].id ]=min(ans[ qq[i].id ],query(1,0,hug,0,qq[i].y)-qq[i].x+qq[i].y);\n\t}\n\trep(i,l,L-1){\n\t\tif(qq[i].sys==1)updat(1,0,hug,qq[i].y,tre[0]);\n\t}\n}\n\nint main(){\n\tn=rd(),T=rd();\n\trep(i,1,n)qq[i]=(dino){1,rd(),rd(),0};\n\trep(i,n+1,n+T)qq[i]=(dino){rd(),rd(),rd(),i-n};\n\tmemset(ans,0x3f,sizeof ans);\n\tmemset(tre,0x3f,sizeof tre);\n\tCDQ(1,n+T);\n\trep(i,1,T){\n\t\tif(ans[i]^ans[0])printf(\"%d\\n\",ans[i]);\n\t}\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1615292816,
        "uid": 99623,
        "name": "BlankAo",
        "ccfLevel": 0,
        "title": "P4169 [Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50"
    },
    {
        "content": "#### CDQ\u5206\u6cbb~~\u5f52\u5e76\u6392\u5e8f\u5199\u9519\u8c03\u4e86\u4e00\u5929\u53ef\u6d77\u661f~~\n### [\u5728\u6211\u7684\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/zhenglw/p/11238721.html)\n\n\u8003\u8651\u54c8\u592b\u66fc\u8ddd\u79bb\u7279\u70b9\uff1a\n\n$$dis(A,B)=|A_x-B_x|+|A_y-B_y|$$\n\n\u82e5\u80fd\u591f\u628a\u7edd\u5bf9\u503c\u53bb\u6389\u5c82\u4e0d\u662f\u5f88\u5999\uff01\n\n$$dis(A,B)=(A_x+A_y)-(B_x+B_y)$$\n\n\u7531\u4e8eA\u5750\u6807\u5df2\u7ecf\u5b9a\u4e0b\u6765\u4e86\uff0c\u6211\u4eec\u53ea\u8981\u627eB\u5750\u6807\u4f7f\u5f97$B_x+B_y$ \u6700\u5927\uff0c\u5c31\u53ef\u4ee5\u662f\u8ddd\u79bb\u6700\u5c0f\u4e86\uff01\n\n\u7136\u540e\u5957\u4e0aCDQ\u4e09\u7ef4\u504f\u5e8f\u6c42\u89e3\u5c31\u597d\u4e86\n\n\u56e0\u4e3a\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u70b9\u90fd\u5728\u5f53\u524d\u8be2\u95ee\u70b9\u7684\u5de6\u4e0b\u65b9\n\n\uff08\u4e5f\u5c31\u662f\u8bf4\u7edd\u5bf9\u503c\u4e0d\u80fd\u76f4\u63a5\u53bb\u6389\uff0c\u6211\u4eec\u628a\u6240\u6709\u70b9\u8f6c\u4e2a\u65b9\u5411\u518d\u505a3\u904d\u5c31\u543c\u4e86\uff09\n\n\nTip:\u8fd9\u9053\u9898\u5361\u5e38\uff0c\u8bf7\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\uff0c\u5e76\u4e14\u6c42\u89e3\u533a\u95f4\u6700\u503c\u65f6\u4e0d\u8981\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u6539\u7528\u6811\u72b6\u6570\u7ec4\uff01\uff01\n\n\uff08\u867d\u7136\u67d0\u4eba\u8bf4\u6b63\u5e38\u4eba\u7528\u7684\u90fd\u662f\u6811\u72b6\u6570\u7ec4\uff0c\u53ef\u6211\u5f00\u59cb\u5c31\u662f\u7528\u7ebf\u6bb5\u6811\u4e86..\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define lowbit(x) ((x)&(-x))\n#define writeln(x)  write(x),puts(\"\")\n#define writep(x)   write(x),putchar(' ')\nusing namespace std;\ninline int read(){\n    int ans=0,f=1;char chr=getchar();\n    while(!isdigit(chr)){if(chr=='-') f=-1;chr=getchar();}\n    while(isdigit(chr)){ans=(ans<<3)+(ans<<1)+chr-48;chr=getchar();}\n    return ans*f;\n}void write(int x){\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}const int M = 1e6+5;\nint n,m,tot,s[M],maxx,maxy,maxn,ans[M];\nstruct P{int x,y,id,type;}q[M],p[M],h[M];\ninline void cmax(int &x,int y){if(x<y)x=y;}\ninline void cmin(int &x,int y){if(x>y)x=y;}\ninline void Add(int x,int y)    {for(;x<=maxn;x+=lowbit(x))cmax(s[x],y);}\ninline void Clear(int x)        {for(;x<=maxn;x+=lowbit(x))s[x]=0;}\ninline int  Max(int x){int ans=0;for(;x;x-=lowbit(x))cmax(ans,s[x]);return ans;}\nvoid Solve(int l,int r){\n    if(l==r) return;\n    int mid=l+r>>1;\n    Solve(l,mid),Solve(mid+1,r);\n    int j=l,ll=l,rr=mid+1,nn=l-1;\n    for(int i=mid+1;i<=r;i++){\n        while(i<=r&&p[i].type!=2) ++i;if(i>r) break;\n        for(;j<=mid&&p[j].x<=p[i].x;++j)if(p[j].type==1)Add(p[j].y,p[j].y+p[j].x);\n        int t=Max(p[i].y);\n        if(t) cmin(ans[p[i].id],p[i].x+p[i].y-t);\n    }\n    for(int i=l;i<j;i++)if(p[i].type==1) Clear(p[i].y);\n    while(ll<=mid&&rr<=r){\n    \tif(p[ll].x<=p[rr].x) h[++nn]=p[ll++];\n    \telse h[++nn]=p[rr++];\n\t}\n\twhile(ll<=mid) h[++nn]=p[ll++];\n\twhile(rr<=r)   h[++nn]=p[rr++];\n\tfor(int i=l;i<=r;i++) p[i]=h[i];\n}\nint main(){\n    n=read(),m=read();\n    for(int x,y,i=1;i<=n;i++)\n    \tx=read(),y=read(),q[++tot]=(P){x+1,y+1,i,1},cmax(maxx,x+1),cmax(maxy,y+1);\n    for(int x,y,opt,i=1;i<=m;i++){\n        opt=read(),x=read(),y=read();\n        cmax(maxx,x+1),cmax(maxy,y+1);\n        if(opt==1)\tq[++tot]=(P){x+1,y+1,i+n,1};\n        else q[++tot]=(P){x+1,y+1,i+n,2};\n    }n+=m;memset(ans,0x3f,sizeof(ans));\n    maxn=max(maxx,maxy)+1;\n    for(int i=1;i<=n;i++) p[i]=q[i];\n\tSolve(1,n);\n    for(int i=1;i<=n;i++) p[i]=q[i],p[i].x=maxn-p[i].x;\n    Solve(1,n);\n    for(int i=1;i<=n;i++) p[i]=q[i],p[i].y=maxn-p[i].y;\n    Solve(1,n);\n    for(int i=1;i<=n;i++) p[i]=q[i],p[i].x=maxn-p[i].x,p[i].y=maxn-p[i].y;\n    Solve(1,n);\n    for(int i=1;i<=n;i++)if(q[i].type==2) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1563956494,
        "uid": 9287,
        "name": "LevenKoko",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4169 \u3010[Violet]\u5929\u4f7f\u73a9\u5076/SJY\u6446\u68cb\u5b50\u3011"
    }
]