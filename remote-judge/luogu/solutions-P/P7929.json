[
    {
        "content": "\u57fa\u73af\u6811\uff0c\u5c31\u662f\u5c06\u4e00\u68f5\u6811\u7684\u4e24\u4e2a\u9876\u70b9\u7528\u4e00\u6761\u8fb9 E \u8fde\u8d77\u6765\u5f62\u6210\u7684\u56fe\u3002\u8fd9\u4e2a\u56fe\u4e0a\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u73af\uff0c\u5e76\u4e14\u8fd9\u4e2a\u73af\u4e0a\u5fc5\u5b9a\u6709\u4e0a\u8ff0\u7684\u8fb9 E\u3002\n\n\u73b0\u5728\u6211\u4eec\u6709\u4e00\u9897\u57fa\u73af\u6811\uff0c\u8981\u5728\u4e0a\u9762\u67d3\u8272\u3002\u6211\u4eec\u77e5\u9053\u5982\u679c\u5728\u4e00\u68f5\u6811\u4e0a\u50cf\u9898\u76ee\u4e2d\u8bf4\u7684\u90a3\u6837\u67d3\u8272\uff0c\u53ef\u4ee5\u7528\u6811\u5f62 DP \u89e3\u51b3\u3002\u800c\u5bf9\u4e8e\u672c\u9898\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u57fa\u73af\u6811\u7684\u73af\u5207\u5f00\uff0c\u5207\u53e3\u4e00\u7aef\u5f53\u4f5c\u6811\u6839\uff0c\u53e6\u4e00\u7aef\u5f53\u4f5c\u6811\u6839\u7684\u201c\u5144\u5f1f\u201d\uff0c\u4e4b\u540e DP\uff0c\u518d\u770b\u5207\u53e3\u4e24\u4fa7\u67d3\u8272\u7684\u60c5\u51b5\u662f\u5426\u7b26\u5408\u9898\u610f\u3002\n\n\u600e\u4e48\u786e\u5b9a\u5207\u53e3\uff1f\u53ef\u4ee5\u501f\u52a9\u5e76\u67e5\u96c6\uff0c\u5f53\u4e00\u6761\u8fb9 E \u7684\u4e24\u4e2a\u7aef\u70b9 u,v \u5728\u5e76\u67e5\u96c6\u4e2d\u5df2\u7ecf\u5904\u4e8e\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u6362\u8a00\u4e4b\u662f u,v \u5df2\u7ecf\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u90a3\u4e48\u8fde\u63a5 u,v \u7684\u8fd9\u6761\u8fb9 E \u5c31\u662f\u57fa\u73af\u6811\u4e0a\u7684\u73af\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u6b64\u65f6\u53ef\u4ee5\u9009 u \u505a\u6811\u6839\uff08\u5728\u4ee3\u7801\u4e2d\u5bf9\u5e94\u53d8\u91cf $\\texttt{root}$\uff09\uff0cv \u505a\u6811\u6839\u7684\u201c\u5144\u5f1f\u201d\uff08\u5728\u4ee3\u7801\u4e2d\u5bf9\u5e94\u53d8\u91cf $\\texttt{rootbro}$\uff09\uff0c\u5728\u5efa\u56fe\u65f6\u5207\u65ad\u8fd9\u6761\u8fb9\u5176\u5b9e\u7b49\u4ef7\u4e8e\u4e0d\u8fde\u8fd9\u6761\u8fb9\uff0c\u5176\u4f59\u7684\u666e\u901a\u7684\u8fb9\u53ea\u9700\u6b63\u5e38\u8fde\u8fb9\u5373\u53ef\u3002\u5efa\u56fe\u5b8c\u6210\u4e4b\u540e\uff0c\u5206\u56db\u7c7b\u8ba8\u8bba\uff0c\u89c4\u7ea6\u5230\u6811\u5f62 DP \u95ee\u9898\u4e0a\u3002\n\n\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n1. $\\texttt{root}$ \u548c $\\texttt{rootbro}$ \u90fd\u4e0d\u67d3\u8272\u3002\n1. $\\texttt{root}$ \u67d3\u8272\u4f46 $\\texttt{rootbro}$ \u4e0d\u67d3\u8272\u3002\n1. $\\texttt{root}$ \u4e0d\u67d3\u8272\u4f46 $\\texttt{rootbro}$ \u67d3\u8272\u3002\n1. $\\texttt{root}$ \u548c $\\texttt{rootbro}$ \u90fd\u67d3\u8272\u3002\n\n\u6811\u5f62 DP \u7684\u8fc7\u7a0b\u6bd4\u8f83\u57fa\u7840\uff0c\u8bbe\u8ba1\u72b6\u6001 $f(\\texttt{u,th,fac,rtc,rtbroc})$ \u8868\u793a\u5f53\u524d\u4ece $\\texttt{root}$ \u67d3\u8272\u5230\u8282\u70b9 $\\texttt{u}$ \u65f6\uff0c$\\texttt{u}$ \u7684\u67d3\u8272\u72b6\u6001\u4e3a $\\texttt{th}$\uff0c\u800c $\\texttt{root}$ \u548c $\\texttt{rootbro}$ \u67d3\u8272\u72b6\u6001\u5206\u522b\u4e3a $\\texttt{rtc}$ \u548c $\\texttt{rtbroc}$\uff08$\\texttt{th}$,$\\texttt{fac}$,$\\texttt{rtc}$,$\\texttt{rtbroc}$ \u90fd\u662f\u5f53\u4e14\u4ec5\u5f53\u88ab\u67d3\u8272\u65f6\u4e3a 1\uff0c\u5426\u5219\u4e3a 0\uff09\u65f6\u9700\u8981\u67d3\u8272\u7684\u6700\u5c11\u8282\u70b9\u6570\uff0c\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u53ea\u9700\u8981\u6bcf\u4e00\u4e0b\u5b50\u8282\u70b9\u662f\u5426\u9700\u8981\u67d3\u8272\u5373\u53ef\u3002\n\n\u65e0\u89e3\u7684\u60c5\u51b5\u53ea\u6709\u4e09\u79cd\uff0c\u7279\u5224\u4e00\u4e0b\uff1a\n\n1. $\\texttt{u}=\\texttt{root}$ \u4f46 $\\texttt{rtc}\\neq\\texttt{th}$\uff0c\u5373\u672c\u6765\u6839\u5e94\u8be5\u67d3\u8272\u4f46\u6839\u6ca1\u6709\u88ab\u67d3\u8272\u6216\u672c\u6765\u6839\u4e0d\u8be5\u67d3\u8272\u5374\u88ab\u67d3\u8272\u7684\u60c5\u51b5\u3002\n1. $\\texttt{u}=\\texttt{rootbro}$ \u4f46 $\\texttt{rtbroc}\\neq\\texttt{th}$\uff0c\u5373\u672c\u6765\u6839\u7684\u5144\u5f1f\u5e94\u8be5\u67d3\u8272\u4f46\u6839\u6ca1\u6709\u88ab\u67d3\u8272\u6216\u672c\u6765\u6839\u7684\u5144\u5f1f\u4e0d\u8be5\u67d3\u8272\u5374\u88ab\u67d3\u8272\u7684\u60c5\u51b5\u3002\n1. $\\texttt{u}=\\texttt{rootbro}$ \u4e14 $\\texttt{fac}=1$ \u4e14 $\\texttt{rtc}=1$\uff0c\u5373\u6839\u7684\u5144\u5f1f\u540c\u65f6\u8fde\u63a5\u4e86\u4e24\u4e2a\u88ab\u67d3\u8272\u4e86\u7684\u70b9\u3002\n\n\u7ec6\u8282\u8f83\u591a\uff0c\u4ee3\u7801\u5982\u4e0b\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002\n``` cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <numeric>\n#define qaq inline\nusing ll=long long;\nconst int inf=1e9+7;\nconst int sz=1e5+19;\nconst int esz=2e5+19;\nint n,head[sz],hpp=0,root,rootbro,ans;\nstruct edge{\n    int nxt,to;\n}graph[esz];\nqaq void addEdge(int from,int to){\n    graph[++hpp]=edge{head[from],to};\n    head[from]=hpp;\n}\nstruct UnionFindSet{\n    int fa[sz];\n    qaq void clear(int n=sz-1){\n        for(int cx=0;cx<=n;++cx)\n            fa[cx]=cx;\n    }\n    int findAnc(int id){\n        if(fa[id]==id) return id;\n        return fa[id]=findAnc(fa[id]);\n    }\n    qaq bool connect2(int u,int v){\n        return findAnc(u)==findAnc(v);\n    }\n    qaq void join(int u,int v){\n        int fu=findAnc(u);\n        int fv=findAnc(v);\n        if(fu==fv) return;\n        fa[fu]=fv;\n    }\n}UFS;\nint pr[sz];\nvoid DFS(int u,int fau){\n    pr[u]=fau;\n    for(int p=head[u];p!=0;p=graph[p].nxt){\n        int v=graph[p].to;\n        if(v==fau) continue;\n        DFS(v,u);\n    }\n}\nint dp[sz][2][2][2][2];\nint color(int u,int th,int fac,int rtc,int rtbroc){\n    ///@param u: currently visited vertex\n    ///@param th: equals to 1 only when u is colored\n    ///@param fac: equals to 1 only when u's father is colored\n    ///@param rtc: equals to 1 only when root is colored\n    ///@param rtbroc: equals to 1 only when rootbro is colored\n    if(dp[u][th][fac][rtc][rtbroc]!=-1)\n        return dp[u][th][fac][rtc][rtbroc];\n    ll res=inf;\n    bool valid=true;\n    if(u==root&&th!=rtc) valid=false;\n    if(u==rootbro&&th!=rtbroc) valid=false;\n    if(u==rootbro&&fac&&rtc) valid=false;\n    if(!valid) return dp[u][th][fac][rtc][rtbroc]=inf;\n    bool cfree=false;\n    ///@param cfree: true only when u is not able to be colored\n    if(fac) cfree=true;\n    if(u==root&&rtbroc) cfree=true;\n    if(u==rootbro&&rtc) cfree=true;\n    ll ccnt=th;\n    ///@param ccnt: the number of currently colored vertexes\n    for(int p=head[u];p!=0;p=graph[p].nxt){\n        int v=graph[p].to;\n        if(v==pr[u]) continue;\n        ccnt+=color(v,0,th,rtc,rtbroc);\n    }\n    if(cfree){\n        res=std::min(res,ccnt);\n    }else{\n        for(int p=head[u];p!=0;p=graph[p].nxt){\n            int v=graph[p].to;\n            if(v==pr[u]) continue;\n            res=std::min(res,ccnt-color(v,0,th,rtc,rtbroc)+color(v,1,th,rtc,rtbroc));\n        }\n    }\n    return dp[u][th][fac][rtc][rtbroc]=res;\n}\nint main(){\n    scanf(\"%d\",&n);\n    UFS.clear(n);\n    memset(dp,-1,sizeof dp);\n    for(int cx=1,u,v;cx<=n;++cx){\n        scanf(\"%d%d\",&u,&v);\n        if(UFS.connect2(u,v)){\n            root=u,rootbro=v;\n        }else{\n            UFS.join(u,v);\n            addEdge(u,v);\n            addEdge(v,u);\n        }\n    }\n    DFS(root,0);\n    int ans=inf;\n    ans=std::min({ans,color(root,0,0,0,0),color(root,0,0,0,1),\n                  color(root,1,0,1,0),color(root,1,0,1,1)});\n    if(ans==inf) puts(\"-1\");\n    else printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1640009545,
        "uid": 496840,
        "name": "SAMSHAWCRAFT",
        "ccfLevel": 0,
        "title": "[COCI2021-2022#1] Logi\u010dari - \u9898\u89e3"
    },
    {
        "content": "\u6240\u6709\u73af\u5957\u6811\u5927\u81f4\u601d\u8def\u90fd\u5dee\u4e0d\u591a\u4e00\u6837\uff0c\u90fd\u662f\u628a\u73af\u627e\u51fa\u6765\uff0c\u518d\u65ad\u4e00\u6761\u8fb9\u53bb\u5904\u7406\u3002\u800c\u65ad\u4e00\u6761\u8fb9\u9700\u8981\u77e5\u9053\u73af\u4e0a\u76f8\u90bb\u4e24\u4e2a\u70b9\uff0c\u81f3\u4e8e\u5982\u4f55\u627e\u5230\u8fd9\u4e2a\u5207\u70b9\uff0c\u697c\u4e0a\u7684\u8001\u54e5\u7528\u7684\u662f\u5e76\u67e5\u96c6\u53bb\u7ef4\u62a4\u3002\u4f46\u7531\u4e8e\u662f\u57fa\u73af\u6811\uff0c\u5927\u53ef\u4e0d\u5fc5\u8fd9\u4e48\u9ebb\u70e6\u3002\u53ea\u8981\u5728\u641c\u7d22\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u4e00\u4e2a\u975e\u7236\u8282\u70b9\u4f46\u53c8\u7ecf\u5386\u8fc7\u7684\u70b9\uff0c\u5c31\u8bf4\u660e\u6070\u597d\u5c06\u73af\u904d\u5386\u5b8c\uff0c\u540c\u65f6\u6211\u4eec\u4e5f\u5f97\u5230\u4e86\u73af\u4e0a\u7684\u4e24\u4e2a\u76f8\u90bb\u7684\u70b9\uff0c\u8bb0\u4e3a S \u548c  T \uff0c\u7136\u540e\u5c06\u5f53\u524d\u8fb9\u6807\u8bb0\uff0c\u5728\u4e4b\u540e\u7684\u5904\u7406\u4e2d\u5ffd\u7565\u8fd9\u6761\u8fb9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e S \u548c T \u7684\u56db\u79cd\u60c5\u51b5\u5206\u522b DP\uff0c\u697c\u4e0a\u8001\u54e5\u4e5f\u8bb2\u5f97\u5f88\u6e05\u695a\u3002\n\n\u4ee4 S \u4e3a\u6839\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u3002\n\n* S \u67d3\u4e86\uff0c\u4f46\u53c8\u5728 T \u65c1\u8fb9\u67d3\u4e86\u4e00\u4e2a\u3002\n* T \u67d3\u4e86\uff0c\u4f46 T \u65c1\u8fb9\u90a3\u4e2a\u5df2\u7ecf\u67d3\u4e86\u3002\n* S \u6ca1\u67d3\uff0cT \u65c1\u8fb9\u90a3\u4e2a\u4e5f\u6ca1\u67d3\uff0c\u800c\u4e14 T \u65e0\u5176\u5b83\u5b50\u6811\u4e86\u3002\n\n\u5728\u9047\u5230 T \u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u548c\u6cd5\uff0c\u548c\u6cd5\u7684\u8bdd\u5c31\u53ef\u4ee5\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u666e\u901a\u7684\u8282\u70b9\u5904\u7406\uff0c\u4f46\u8981\u5224\u65ad\u4e00\u4e0b T \u7684\u72b6\u6001\u3002\n\n\u8003\u8651 DP \u8f6c\u79fb\u3002\n\n\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a u \uff0c\u67d3\u8272\u72b6\u6001\u4e3a p\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u65e0\u8bba\u662f\u90a3\u79cd\u60c5\u51b5\u90fd\u53ef\u80fd\u7528\u5230\u5b50\u8282\u70b9\u4e0d\u67d3\u7684\u4ef7\u503c\uff0c\u56e0\u4e3a\u5b50\u8282\u70b9\u4e2d\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u88ab\u67d3\u8272\u3002\u6240\u4ee5\u6211\u4eec\u8bb0\u5f55\u6bcf\u4e00\u68f5\u5b50\u8282\u70b9\u4e0d\u67d3\u7684\u4ef7\u503c\uff0c\u5e76\u8bb0\u5f55\u6240\u6709\u5b50\u8282\u70b9\u4e0d\u67d3\u7684\u603b\u4ef7\u503c val\u3002\n\n\u5982\u679c fa[u] \u88ab\u67d3\u4e86\uff0c\u90a3\u4e48 u \u5b50\u6811\u7684\u4ef7\u503c\u5c31\u4e3a $val + p$\u3002\n\n\u5426\u5219\uff0c\u5c31\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u67d3\u8272\u7684\u60c5\u51b5\u3002\n\n\u90a3\u4e48 u \u5b50\u6811\u7684\u4ef7\u503c\u5c31\u4e3a  $\\min \\{ val - w[v][0] + w[v][1] \\}+p$\u3002\n\n\u5728\u8bb0\u5fc6\u5316\u7684\u65f6\u5019\u7528 $dp[i][a][b]$ \u8868\u793a i \u5b50\u6811\u67d3\u6216\u4e0d\u67d3\uff0c\u65c1\u8fb9\u8282\u70b9\u662f\u5426\u67d3\u8fc7\u7684\u4ef7\u503c\u3002 \n\n\u6700\u540e\u9644\u4e0a\u4ee3\u7801\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define inf 1000000000\nusing namespace std;\nconst int Maxn=6e5+10;\nint n,res,w[Maxn][2],cut,s,t,out,dp[Maxn][2][2];;\nint head[Maxn],nxt[Maxn],to[Maxn],cnt=1;\nbool see,lit,vis[Maxn];\ninline void add(int x,int y) {\n\tto[++cnt]=y,nxt[cnt]=head[x],head[x]=cnt;\n}\nvoid dfs(int x,int fa) {\n\tvis[x]=1;\n\tfor(int i=head[x]; i; i=nxt[i]) {\n\t\tint v=to[i];\n\t\tif(v!=fa) {\n\t\t\tif(!vis[v]) dfs(v,x);\n\t\t\telse cut=i;\n\t\t}\n\t}\n}\nint DP(int u,int fa,int a,int b) {\n\tif(dp[u][a][b]) return dp[u][a][b];\n\tint tot=0,res=inf;\n\tfor(int i=head[u]; i; i=nxt[i]) {\n\t\tint v=to[i];\n\t\tif((v==fa)||(i==cut)||((i^1)==cut)) continue;\n\t\tif(v==t) {\n\t\t\tif((a&&see)||(b&&lit)||(!a&&!see&&out<3)) return inf;\n\t\t\tw[v][lit]=DP(v,u,lit,(see|a)),w[v][!lit]=inf;\n\t\t\ttot+=w[v][0];\n\t\t} else {\n\t\t\tw[v][0]=DP(v,u,0,a),tot+=w[v][0];\n\t\t\tif(!b) w[v][1]=DP(v,u,1,a);\n\t\t}\n\t}\n\tif(b) return dp[u][a][b]=tot+a;\n\tfor(int i=head[u]; i; i=nxt[i]) {\n\t\tint v=to[i];\n\t\tif((v==fa)||(i==cut)||((i^1)==cut)) continue;\n\t\tres=min(res,tot-w[v][0]+w[v][1]);\n\t}\n\treturn dp[u][a][b]=res+a;\n}\nsigned main() {\n\tscanf(\"%lld\",&n);\n\tfor(int i=1; i<=n; ++i) {\n\t\tint x,y; \n\t\tscanf(\"%lld %lld\",&x,&y);\n\t\tadd(x,y),add(y,x);\n\t}\n\tdfs(1,0),s=to[cut],t=to[cut^1];\n\tfor(int i=head[t]; i; i=nxt[i]) ++out;\n\tres=DP(s,0,0,0);\n\tmemset(dp,0,sizeof dp),lit=1;\n\tres=min(res,DP(s,0,0,1));\n\tmemset(dp,0,sizeof dp),see=1,lit=0;\n\tres=min(res,DP(s,0,1,0));\n\tmemset(dp,0,sizeof dp),lit=see=1;\n\tres=min(res,DP(s,0,1,1));\n\tif(res<=n) printf(\"%lld\",res);\n\telse puts(\"-1\");\n\treturn 0;\n}\n```\n",
        "postTime": 1643108763,
        "uid": 399716,
        "name": "\u94b0\u747e_\u604b\u6db5",
        "ccfLevel": 7,
        "title": "COCI2021-2022#1Logi\u010dari \u9898\u89e3"
    },
    {
        "content": "# COCI2021-2022 Contest1 T3 \u9898\u89e3\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.monkey-hyx.tech?t=COCI-2021-2022-Contest1)\n\n\uff08\u5efa\u8bae\u60a8\u4ece\u4e0a\u65b9\u94fe\u63a5\u8fdb\u5165\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u67e5\u770b\u6b64 Blog\uff0c\u5728 Luogu \u4e2d\u56fe\u7247\u4f1a\u88ab\u5899\u6389\uff0c\u90e8\u5206 Markdown \u4e5f\u4f1a\u5931\u6548\uff09\n\n## [\u539f\u9898\u9762\u94fe\u63a5](https://hsin.hr/coci/contest1_tasks.pdf)\n\n## [Luogu\u9898\u9762](https://www.luogu.com.cn/problem/list?keyword=COCI2021-2022%231&page=1)\n\n## T3 Logi\u010dari\n\n### \u9898\u9762\n\n\u5bf9\u4e00\u4e2a\u57fa\u73af\u6811\u8fdb\u884c\u67d3\u8272\uff0c\u4f7f\u6bcf\u4e2a\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\uff0c\u4e0d\u5305\u62ec\u81ea\u8eab\u7684\uff0c\u4e0e\u4ed6\u76f8\u8fde\u7684\u70b9\u88ab\u67d3\u8272\uff0c\u6c42\u6700\u5c11\u67d3\u8272\u6570\uff08\u5305\u62ec\u65e0\u89e3\u60c5\u51b5\uff09\u3002\n\n$ n \\le 10^5 $\u3002\n\n### Examples\n\n**Input_1**\n\n> 4\n>\n> 1 2\n>\n> 2 3\n>\n> 3 4\n>\n> 4 1\n\n**Output_1**\n\n> 2\n\n**Input_2**\n\n> 3\n>\n> 1 2\n>\n> 2 3\n>\n> 3 1\n\n**Output_2**\n\n> -1\n\n**Input_3**\n\n> 7\n>\n> 1 2\n>\n> 2 3\n>\n> 3 4\n>\n> 4 5\n>\n> 5 6\n>\n> 6 7\n>\n> 2 4\n\n**Output_3**\n\n> 4\n\n### Solution\n\n#### \u601d\u8def\n\n\u8be5\u8bf4\u4e0d\u8bf4\u8fd9\u9898\u7684\u7ec6\u8282\u662f\u771f\u7684\u591a\uff0c\u6539\u4e86\u4e00\u4e0b\u5348\u624d\u8fc7\u4e86...\n\n\u4e0d\u8fc7\u8fd9\u9898\u4e5f\u633a\u5957\u8def\uff0c\u6838\u5fc3\u601d\u8def\u8003\u8651\u628a\u57fa\u73af\u6811\u62c6\u5f00\u505a\u6811\u4e0a $ \\texttt{DP} $\u3002\n\n\u89c2\u5bdf\u9898\u610f\uff0c\u9996\u5148\u8003\u8651\u5982\u679c\u662f\u666e\u901a\u6811\u4e0a\u7684\u67d3\u8272\u95ee\u9898\uff0c\u5f88\u5957\u8def\u7684\u6811\u4e0a $ \\texttt{DP} $ \u5373\u53ef\u89e3\u51b3\uff0c\u800c\u57fa\u73af\u6811\u4e0e\u666e\u901a\u6811\u7684\u533a\u522b\uff0c\u4e5f\u5c31\u662f\u591a\u4e86\u4e00\u6761\u8fb9\uff0c\u4f7f\u201c\u6811\u201d\u4e0a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u601d\u8def\u4e5f\u5c31\u662f\u5c06\u4ed6\u8f6c\u5316\u4e3a\u666e\u901a\u7684\u6811\u4e0a\u95ee\u9898\u3002\n\n\u4e8e\u662f\u8003\u8651\u627e\u5230\u73af\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u8fb9\u5e76\u5c06\u5176\u65ad\u5f00\uff0c\u7136\u540e\u679a\u4e3e\u8fd9\u4e24\u4e2a\u70b9\u53ef\u80fd\u7684\u72b6\u6001\uff0c\u5e76\u5728 $ \\texttt{DP} $ \u7684\u65f6\u5019\u968f\u65f6\u8003\u8651\u8fd9\u4e24\u4e2a\u70b9\u3002\n\n#### \u627e\u73af\u4e0a\u8fb9\n\n\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u7ef4\u62a4\u5e76\u67e5\u96c6\uff0c\u5f53\u65b0\u7684\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u662f\u540c\u4e00\u9897\u5b50\u6811\u4e0a\u7684\u65f6\u5019\uff0c\u8981\u627e\u7684\u5c31\u662f\u8fd9\u4e2a\u8fb9\u3002\n\n\u53e6\u4e00\u79cd\u65b9\u5f0f\u66f4\u7b80\u4fbf\u4e00\u4e9b\uff0c$ \\texttt{DFS} $ \u904d\u5386\u6574\u4e2a\u6811\uff0c\u5f53\u8bbf\u95ee\u5230\u4e86\u975e\u7236\u4eb2\u8282\u70b9\uff0c\u4f46\u66fe\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u65f6\u4fbf\u8bf4\u660e\u8fd9\u4e2a\u8fb9\u662f\u73af\u4e0a\u7684\u8fb9\u3002\n\n```cpp\nvoid FindLoop(int p, int fa){\n    for(auto i = head[p]; i; i = i->nxt){\n        if(i->to != fa && vis[i->to]){loop = make_pair(p, i->to); return;}\n        if(i->to != fa){vis[i->to] = true; FindLoop(i->to, p);}\n    }\n}\n```\n\n#### \u5220\u8fb9\n\n\u5982\u679c\u7528\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u76f4\u63a5\u8bb0\u5f55\u4e0b\u5e76\u4e0d\u5c06\u8fd9\u4e2a\u8fb9\u5b58\u5230\u6811\u91cc\u5373\u53ef\u3002\n\n\u5982\u679c\u7528\u7684 $ \\texttt{DFS} $\uff0c\u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u904d\u5386\u627e\u5230\u70b9\u5220\u9664\uff0c\u6216\u6bcf\u6b21\u8c03\u7528\u7684\u65f6\u5019\u90fd\u5224\u65ad\u662f\u5426\u4e3a\u5220\u6389\u7684\u8fd9\u4e2a\u8fb9\u3002\n\n```cpp\nvoid RemoveLoop(void){\n    for(auto i = head[loop.first], lasti = (Edge*)npt; i; lasti = i, i = i->nxt){\n        if(i->to == loop.second){\n            lasti\n                ? lasti->nxt = i->nxt\n                : head[loop.first] = i->nxt;\n            break;\n        }\n    }\n    for(auto i = head[loop.second], lasti = (Edge*)npt; i; lasti = i, i = i->nxt){\n        if(i->to == loop.first){\n            lasti\n                ? lasti->nxt = i->nxt\n                : head[loop.second] = i->nxt;\n            break;\n        }\n    }\n    tie(root1, root2) = loop;\n}\n```\n\n#### \u72b6\u6001\u8bbe\u8ba1\n\n\u8003\u8651\u5728\u666e\u901a\u7684\u6811\u5f62 $ \\texttt{DP} $ \u4e2d\u8003\u8651\u88ab\u5206\u5272\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u8fd9\u91cc\u5b9a\u4e49\u4e3a $ \\texttt{root1} $ \u548c $ \\texttt{root2} $\u3002\n\n\u8003\u8651\u4ee4\u88ab\u67d3\u8272\u4e3a $ \\texttt{true} $\uff0c\u672a\u88ab\u67d3\u8272\u4e3a $ \\texttt{false} $\u3002\n\n\u8bbe $ dp(i, j, k, l, m) $ \u8868\u793a\u5f53\u524d\u8ba1\u7b97\u5230\u4e86 $ i $ \u8282\u70b9\uff0c\u5176\u72b6\u6001\u548c\u5176\u7236\u4eb2\u72b6\u6001\u5206\u522b\u4e3a $ j, k $\uff0c\u4e24\u4e2a\u6839\u7684\u72b6\u6001\u5206\u522b\u4e3a $ l,m $\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u8fde\u7684\u8282\u70b9\u4f1a\u88ab\u67d3\u8272\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5148\u5047\u8bbe\u5f53\u524d\u8282\u70b9\u6240\u6709\u5b50\u8282\u70b9\u90fd\u4e0d\u67d3\u8272\uff0c\u5e76\u8ba1\u7b97\u6c42\u548c\uff0c\u7136\u540e\u5206\u522b\u679a\u4e3e\u5176\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u8ba1\u7b97\u5982\u679c\u5c06\u8be5\u5b50\u8282\u70b9\u6d82\u8272\u6700\u7ec8\u9700\u8981\u6d82\u591a\u5c11\u70b9\uff0c\u5e76\u53d6\u6700\u5c0f\u503c\u3002\n\n\u4f46\u662f\u8fd9\u9898\u7684\u6700\u5927\u96be\u70b9\u6211\u8ba4\u4e3a\u5c31\u662f\u4e0a\u9762\u8fd9\u4e9b\u8fc7\u7a0b\u4e2d\u5408\u6cd5\u6027\u7684\u5224\u65ad\uff0c\u4e5f\u5c31\u662f\u7ec6\u8282\u7684\u5904\u7406\u3002\n\n\u540c\u65f6\u56e0\u4e3a\u72b6\u6001\u5341\u5206\u590d\u6742\uff0c\u8003\u8651\u7528 $ \\texttt{DFS} $ + \u8bb0\u5fc6\u5316\u5b9e\u73b0\u3002\n\n#### \u7ec6\u8282\u5904\u7406\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u8003\u8651\uff0c\u54ea\u4e9b\u72b6\u6001\u662f\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\uff1a\n\n1. \u904d\u5386\u5230\u67d0\u4e2a\u6839\u8282\u70b9\uff0c\u4f46\u5f53\u524d\u72b6\u6001\u4e0e\u6839\u8282\u70b9\u5df2\u7ecf\u5b9a\u4e0b\u6765\u7684\u72b6\u6001\u4e0d\u540c\u3002\n2. \u904d\u5386\u5230\u67d0\u4e2a\u6839\u8282\u70b9\uff0c\u7236\u4eb2\u8282\u70b9\u5df2\u88ab\u67d3\u8272\uff0c\u4e14\u4e24\u4e2a\u6839\u8282\u70b9\u90fd\u88ab\u67d3\u8272\uff0c\u5bfc\u81f4\u5176\u4e2d\u67d0\u4e2a\u6839\u8282\u70b9\uff0c\u8003\u8651\u4e0a\u88ab\u4e34\u65f6\u5220\u9664\u7684\u8fb9\u4e4b\u540e\u6709\u4e24\u4e2a\u76f8\u8fde\u7684\u70b9\u88ab\u67d3\u8272\u3002\n\n```cpp\nif(\n    (currentPosition == root1 && currentStatus != root1Status) ||\n    (currentPosition == root2 && currentStatus != root2Status) ||\n    (currentPosition == root1 && fatherStatus && root2Status) ||\n    (currentPosition == root2 && fatherStatus && root1Status)\n)return DEFAULT_DP = INF;\n```\n\n\u7136\u540e\u6211\u4eec\u9700\u8981\u8003\u8651\uff0c\u4ec0\u4e48\u65f6\u5019\u5f53\u524d\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u90fd\u4e0d\u80fd\u88ab\u67d3\u8272\uff1a\n\n1. \u7236\u8282\u70b9\u5df2\u7ecf\u88ab\u67d3\u8272\uff0c\u5373\u5f53\u524d\u8282\u70b9\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u8282\u70b9\u4e0e\u4e4b\u76f8\u8fde\u4e14\u88ab\u67d3\u8272\u3002\n2. \u5f53\u524d\u8282\u70b9\u5230\u4e86\u67d0\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u800c\u53e6\u4e00\u4e2a\u6839\u8282\u70b9\u5df2\u88ab\u67d3\u8272\uff0c\u4e0e $ 1 $ \u540c\u7406\u3002\n\n```cpp\nif(\n    fatherStatus ||\n    (currentPosition == root1 && root2Status) ||\n    (currentPosition == root2 && root1Status)\n) ret = min(ret, sonCost);\n```\n\n\u8fd8\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u70b9\u5c31\u662f\u6211\u4eec\u5047\u8bbe\u90fd\u4e0d\u67d3\u8272\u8fdb\u884c\u6c42\u548c\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u7206 `` int `` \u6240\u4ee5\u9700\u8981\u5728\u6c42\u548c\u65f6\u9700\u8981\u5f00 `` long long ``\u3002 \n\n#### \u4e3b\u51fd\u6570\n\n\u56de\u5230\u6211\u4eec\u4e4b\u524d\u8bf4\u7684\uff0c\u8981\u679a\u4e3e\u4e24\u4e2a\u6839\u8282\u70b9\u7684\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ee4\u5176\u4ece\u5176\u4e2d\u67d0\u4e2a\u6839\u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u663e\u7136\u4f1a\u7b80\u4fbf\u5f88\u591a\uff0c\u663e\u7136\u4e00\u5171\u53ef\u80fd\u6709\u5982\u4e0b\u56db\u79cd\u60c5\u51b5\u3002\n\n```cpp\nint ans = min(\n    {\n        Tintage(root1, 0, 0, 0, 0, -1),\n        Tintage(root1, 0, 0, 0, 1, -1),\n        Tintage(root1, 1, 0, 1, 0, -1),\n        Tintage(root1, 1, 0, 1, 1, -1),\n        INF\n    }\n);\n```\n\n### Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define INF 11451400\n#define DEFAULT_DP dp[currentPosition][currentStatus][fatherStatus][root1Status][root2Status]\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\n\ntemplate<typename T = int>\ninline T read(void);\n\nint N;\nbool vis[110000];\npair < int, int >/*from, to*/ loop;\nint root1, root2;\n\nstruct Edge{\n    Edge* nxt;\n    int to;\n    void* operator new(size_t);\n    Edge(Edge* nxt, int to):nxt(nxt), to(to){;}\n    Edge(void) = default;\n}eData[210000];\nvoid* Edge::operator new(size_t){static Edge* P = eData; return ++P;}\n\nEdge* head[110000];\nint dp[110000][2][2][2][2]; /*CurrentPosition, CurrentStatus, FatherStatus, Root1Status, Root2Status*/\n\nvoid FindLoop(int = 1, int = -1);\nvoid RemoveLoop(void);\nint Tintage(int, bool, bool, bool, bool, int);\n\nint main(){\n    memset(dp, -1, sizeof(dp));\n    N = read();\n    for(int i = 1; i <= N; ++i){\n        int from = read(), to = read();\n        head[from] = new Edge(head[from], to);\n        head[to] = new Edge(head[to], from);\n    }\n    FindLoop();\n    RemoveLoop();\n    int ans = min(\n        {\n            Tintage(root1, 0, 0, 0, 0, -1),\n            Tintage(root1, 0, 0, 0, 1, -1),\n            Tintage(root1, 1, 0, 1, 0, -1),\n            Tintage(root1, 1, 0, 1, 1, -1),\n            INF\n        }\n    );\n    printf(\"%d\\n\", ans == INF ? -1 : ans);\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\nint Tintage(int currentPosition, bool currentStatus, bool fatherStatus, bool root1Status, bool root2Status, int fatherPosition){\n    if(~DEFAULT_DP)return DEFAULT_DP;\n    if(\n        (currentPosition == root1 && currentStatus != root1Status) ||\n        (currentPosition == root2 && currentStatus != root2Status) ||\n        (currentPosition == root1 && fatherStatus && root2Status) ||\n        (currentPosition == root2 && fatherStatus && root1Status)\n    )return DEFAULT_DP = INF;\n    ll sonCost(currentStatus);\n    for(auto i = head[currentPosition]; i; i = i->nxt)\n        if(i->to != fatherPosition)\n            sonCost += Tintage(i->to, false, currentStatus, root1Status, root2Status, currentPosition);\n    ll ret(INF);\n    if(\n        fatherStatus ||\n        (currentPosition == root1 && root2Status) ||\n        (currentPosition == root2 && root1Status)\n    ) ret = min(ret, sonCost);\n    else \n        for(auto i = head[currentPosition]; i; i = i->nxt)\n            if(i->to != fatherPosition)\n                ret = min({\n                    ret,\n                    (ll)INF,\n                    sonCost - Tintage(i->to, false, currentStatus, root1Status, root2Status, currentPosition)\n                            + Tintage(i->to, true,  currentStatus, root1Status, root2Status, currentPosition)\n                });\n    return DEFAULT_DP = ret;\n}\nvoid RemoveLoop(void){\n    for(auto i = head[loop.first], lasti = (Edge*)npt; i; lasti = i, i = i->nxt){\n        if(i->to == loop.second){\n            lasti\n                ? lasti->nxt = i->nxt\n                : head[loop.first] = i->nxt;\n            break;\n        }\n    }\n    for(auto i = head[loop.second], lasti = (Edge*)npt; i; lasti = i, i = i->nxt){\n        if(i->to == loop.first){\n            lasti\n                ? lasti->nxt = i->nxt\n                : head[loop.second] = i->nxt;\n            break;\n        }\n    }\n    tie(root1, root2) = loop;\n}\nvoid FindLoop(int p, int fa){\n    for(auto i = head[p]; i; i = i->nxt){\n        if(i->to != fa && vis[i->to]){loop = make_pair(p, i->to); return;}\n        if(i->to != fa){vis[i->to] = true; FindLoop(i->to, p);}\n    }\n}\n\ntemplate<typename T>\ninline T read(void){\n    T ret(0);\n    short flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n\n## UPD\n\nupdate-2022_08_30 T1-T3\n\nupdate-2022_09_01 \u5b8c\u6210\u4e00\u90e8\u5206\u7684 T4\n\nupdate-2022_09_02 T4 \u809d\u5b8c\n\nupdate-2022_09_04 \u521d\u7a3f\n\nupdate-2022_09_04 \u53d1\u73b0 T4 \u4e4b\u524d\u7b97\u6cd5\u5047\u6389\u4e86\uff0c\u4fee\u6539\u4e86\u4e00\u4e0b\n\nupdate-2022_09_06 \u5b8c\u5584 latex \u4ee5\u7b26\u5408 Luogu \u9898\u89e3\u8981\u6c42",
        "postTime": 1662303216,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "COCI2021-2022 Contest1 T3 \u9898\u89e3"
    },
    {
        "content": "\u6a21\u62df\u8d5b\u8d5b\u65f6\u60f3\u4e86\u4e00\u4e2a\u5f88\u8be1\u5f02\u7684 dp\uff0c\u7ed3\u679c\u56e0\u4e3a\u4e00\u4e2a\u7ec6\u8282\u5224\u9519\u7206\u96f6\u3002\n\n\u7b97\u662f\u4e00\u4e2a\u6bd4\u8f83\u5947\u7279\u7684\u89e3\u6cd5\u3002\u4ee5\u4e0b\u5148\u4e0d\u8003\u8651\u65e0\u89e3\uff0c\u539f\u56e0\u6700\u540e\u8bf4\u660e\u3002\n\n\u9996\u5148\u8003\u8651\u653e\u5230\u6811\u4e0a\u600e\u4e48\u505a\uff0c\u5e94\u8be5\u662f\u6bd4\u8f83\u663e\u7136\u7684\u3002\u8bbe $dp_{x,4}$ \u8868\u793a $x$ \u7684\u60c5\u51b5\u5982\u4e0b\u65f6\uff0c\u5b50\u6811\u5185\u6700\u5c11\u67d3\u8272\u70b9\u6570\u3002\n\n1. $dp_{x,0}$ \u8868\u793a $x$ \u6ca1\u88ab\u67d3\u8272\uff0c$x$ \u7684\u4e00\u4e2a\u513f\u5b50\u6709\u989c\u8272\u3002\n2. $dp_{x,1}$ \u8868\u793a $x$ \u88ab\u67d3\u8272\uff0c$x$ \u7684\u4e00\u4e2a\u513f\u5b50\u6709\u989c\u8272\u3002\n3. $dp_{x,2}$ \u8868\u793a $x$ \u6ca1\u88ab\u67d3\u8272\uff0c$x$ \u7684\u7236\u4eb2\u6709\u989c\u8272\u3002\n4. $dp_{x,3}$ \u8868\u793a $x$ \u88ab\u67d3\u8272\uff0c$x$ \u7684\u7236\u4eb2\u6709\u989c\u8272\u3002\n\n\u8f6c\u79fb\u4e5f\u4e0d\u96be\u5904\u7406\u3002\n\n$$\n\\begin{cases}dp_{x,0}=\\sum dp_{y,0}+\\min\\{dp_{y,1}-dp_{y,0}\\}\\\\dp_{x,1}=\\sum dp_{y,2}-\\min\\{dp_{y,3}-dp_{y,2}\\}+1\\\\dp_{x,2}=\\sum dp_{y,0}\\\\dp_{x,3}=\\sum dp_{y,2}+1\\end{cases}\n$$\n\n\u521d\u503c\uff1a\u53f6\u5b50\u8282\u70b9\u7684 $dp_{x,2}=0$ \u548c $dp_{x,3}=1$\uff0c\u53e6\u4e24\u9879\u8bbe\u4e3a $\\inf$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u628a\u73af\u4e0a\u7684\u4e00\u4e2a\u70b9\u63d0\u5230\u6839\uff0c\u7136\u540e\u5bf9\u73af\u4e0a\u8282\u70b9\u7684\u6bcf\u4e2a\u5b50\u6811\u5148\u8dd1\u4e00\u904d\u8fd9\u6837\u7684 $dp$\uff0c\u7136\u540e\u5f00\u59cb\u7740\u624b\u5904\u7406\u73af\u4e0a\u70b9\u7684\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u73af\u4e0a\u7684\u70b9\uff0c\u5176\u4e5f\u6709\u56db\u79cd\u60c5\u51b5\u3002\u51fa\u4e8e\u7edf\u4e00\u548c\u5199\u6cd5\u65b9\u4fbf\uff0c\u8fd9\u56db\u79cd\u60c5\u51b5\u4e5f\u8868\u793a\u4e3a $0$ \u5230 $3$\u3002\n\n1. \u60c5\u51b5 $0$\uff1a$x$ \u65e0\u989c\u8272\uff0c$x$ \u7684\u73af\u5916\u5b50\u6811\u65e0\u989c\u8272\u3002\n2. \u60c5\u51b5 $1$\uff1a$x$ \u65e0\u989c\u8272\uff0c$x$ \u7684\u73af\u5916\u5b50\u6811\u6709\u989c\u8272\u3002\n3. \u60c5\u51b5 $2$\uff1a$x$ \u6709\u989c\u8272\uff0c$x$ \u7684\u73af\u5916\u5b50\u6811\u65e0\u989c\u8272\u3002\n4. \u60c5\u51b5 $3$\uff1a$x$ \u6709\u989c\u8272\uff0c$x$ \u7684\u73af\u5916\u5b50\u6811\u6709\u989c\u8272\u3002\n\n\u4fbf\u4e8e\u7406\u89e3\uff0c\u5148\u653e\u4e0b\u8fd9\u56db\u79cd\u60c5\u51b5\u5bf9\u5e94\u7684\u5927\u81f4\u7ed3\u6784\u3002\u5176\u4e2d\u5b9e\u5fc3\u70b9\u8868\u793a\u8be5\u70b9\u67d3\u8272\uff0c\u7a7a\u5fc3\u70b9\u8868\u793a\u4e0d\u67d3\u8272\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/yuslzt2i.png)\n\n\u90a3\u4e48\u6211\u4eec\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u7ed9\u73af\u4e0a\u6bcf\u4e2a\u70b9\u8d4b\u4e00\u4e2a $[0,3]$ \u5185\u7684\u6743\u503c $p_i$\uff0c\u6700\u5c0f\u5316 $\\sum val_{i,p_i}$ \u4e14\u4fdd\u8bc1 $p_i$ \u5e8f\u5217\u5408\u6cd5\u3002\n\n\u5148\u8003\u8651\u5982\u4f55\u6c42 $val_x$\u3002\n\n\u5b9e\u9645\u4e0a\u6839\u636e\u56fe\u7247\u548c\u6811\u90e8\u5206\u7684\u8f6c\u79fb\u65b9\u7a0b\u5c31\u5df2\u7ecf\u5f88\u660e\u663e\u4e86\u3002\n\n$$\n\\begin{cases}val_{x,0}=\\sum dp_{y,0}\\\\val_{x,1}=\\sum dp_{y,0}+\\min\\{dp_{y,1}-dp_{y,0}\\}\\\\val_{x,2}=\\sum dp_{y,2}\\\\val_{x,3}=\\sum dp_{y,2}+\\min\\{dp_{y,3}-dp_{y,2}\\}\\end{cases}\n$$\n\n\u7136\u540e\u8003\u8651\u4ec0\u4e48\u6837\u7684 $p$ \u5e8f\u5217\u662f\u5408\u6cd5\u7684\uff0c\u8003\u8651\u4ece\u6bcf\u79cd\u70b9\u7684\u9700\u6c42\u5165\u624b\u3002\n\n1. $p_x=0$\uff0c$x$ \u76f8\u90bb\u9879\u5fc5\u987b\u6709\u6070\u597d\u4e00\u4e2a $p\\ge2$\u3002\n2. $p_x=1$\uff0c$x$ \u76f8\u90bb\u9879\u5fc5\u987b\u6709 $p\\le 1$\u3002\n3. $p_x=2$\uff0c$x$ \u76f8\u90bb\u9879\u5fc5\u987b\u6709\u6070\u597d\u4e00\u4e2a $p\\ge 2$\uff0c\u540c\u65f6 $x$ \u76f8\u90bb\u9879\u5fc5\u987b\u6709 $p\\in\\{0,2\\}$\u3002\n4. $p_x=3$\uff0c$x$ \u76f8\u90bb\u9879\u53ea\u80fd\u4e3a $p=0$\u3002\n\n\u4eba\u8bdd\u7ffb\u8bd1\u4e00\u4e0b\u5c31\u662f\uff1a\n\n1. $0$ \u53ef\u4ee5\u548c\u4efb\u4f55\u6570\u76f8\u90bb\uff0c\u4f46\u6070\u597d\u8981\u6709\u4e00\u4e2a $2$ \u6216 $3$\u3002\n2. $1$ \u53ea\u80fd\u548c $0$ \u6216 $1$ \u76f8\u90bb\u3002\n3. $2$ \u53ea\u80fd\u548c $0$ \u6216 $2$ \u76f8\u90bb\uff0c\u5e76\u4e14\u4e24\u4fa7\u5fc5\u987b\u6709\u6070\u597d\u4e00\u4e2a $2$\u3002\n4. $3$ \u53ea\u80fd\u548c $0$ \u76f8\u90bb\u3002  \n\n\u89c2\u5bdf\u5982\u679c\u6211\u4eec\u60f3\u628a $2$ \u548c $3$ \u585e\u5230\u5e8f\u5217\u91cc\uff0c\u4f1a\u53d8\u6210\u4ec0\u4e48\u6837\u3002\n\n\u663e\u7136\u53ea\u80fd\u662f $0220$ \u548c $030$ \u4e24\u79cd\u3002\u552f\u4e00\u7279\u4f8b\u662f\u73af\u957f\u4e3a $2$ \u65f6\uff0c$22$ \u4e5f\u662f\u4e00\u79cd\u53ef\u884c\u65b9\u6848\u3002\u800c\u5bf9\u4e8e $1$\uff0c\u5176\u53ef\u4ee5\u968f\u4fbf\u653e\u5728\u5269\u4e0b\u7684\u4f4d\u7f6e\u3002\n\n\u8bb0\u73af\u957f\u4e3a $m$\uff0c\u90a3\u4e48\u9664\u4e86 $m=2$ \u65f6\u7684 $22$ \u65b9\u6848\u5916\uff0c\u5bf9\u4e8e\u5269\u4e0b\u7684\u6240\u6709\u65b9\u6848\u800c\u8a00\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u73af\u4e0a\u5212\u5206\u65b9\u5f0f\uff0c\u4f7f\u5f97\u5212\u5206\u540e\u6bcf\u4e2a\u533a\u95f4\u90fd\u5f62\u5982 $0220$\u3001$030$\u3001$1$ \u8fd9\u4e09\u79cd\u4e4b\u4e00\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f00\u59cb\u7b2c\u4e8c\u6b21 dp \u4e86\u3002\u4e3a\u4e86\u9664\u6389\u73af\u7684\u5f71\u54cd\uff0c\u6211\u4eec\u89c4\u5b9a\u968f\u4fbf\u5148\u5207\u4e00\u5200\uff0c\u7136\u540e\u5728\u5f62\u6210\u7684\u94fe\u4e0a\u5904\u7406\u3002\n\n\u8bbe $f_{i}$ \u8868\u793a\u4ee5 $i$ \u4e3a\u4e00\u6bb5\u533a\u95f4\u7684\u7ed3\u5c3e\uff0c\u524d\u9762\u90e8\u5206\u5212\u5206\u540e\u7684\u6700\u5c0f\u503c\u3002\u521d\u503c $f_0=0$\u3002\n\n\u679a\u4e3e\u586b\u7684\u662f\u54ea\u4e00\u79cd\u533a\u95f4\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u8f6c\u79fb\u3002\n\n$$\nf_{i}=\\min\\begin{cases}f_{i-1}+val_{i,1}\\\\f_{i-3}+val_{i-2,0}+val_{i-1,3}+val_{i,0}\\\\f_{i-4}+val_{i-3,0}+val_{i-2,2}+val_{i-1,2}+val_{i,0}\\end{cases}\n$$\n\n\u6700\u7ec8\u8be5\u79cd\u5212\u5206\u5bf9\u5e94\u7684\u7b54\u6848\u4e3a $f_m$\u3002\n\n\u7136\u540e\u8003\u8651\u5728\u54ea\u4e9b\u4f4d\u7f6e\u5207\u4e0b\u8fd9\u4e00\u5200\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6700\u7ec8\u7edf\u8ba1\u7b54\u6848\u4e0d\u6f0f\u60c5\u51b5\u3002\n\n\u5173\u6ce8\u5230\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u957f\u5ea6\u4e3a $4$ \u7684\u533a\u95f4\uff0c\u5176\u4e2d\u5fc5\u5b9a\u5305\u542b\u4e00\u4e2a\u5b8c\u6574\u7684\u5212\u5206\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u7b2c\u4e00\u5200\u5728\u524d\u56db\u4e2a\u4f4d\u7f6e\u4e2d\u5177\u4f53\u54ea\u4e2a\u4f4d\u7f6e\u524d\u5373\u53ef\u3002\n\n\u662f\u4e0d\u662f\u597d\u50cf\u6ca1\u5224\u65e0\u89e3\uff1f\u5173\u6ce8\u5230\u5bf9\u4e8e\u4efb\u610f $dp=\\inf$ \u7684\u60c5\u51b5\uff0c\u5fc5\u5b9a\u5bf9\u5e94\u4e00\u4e2a\u4e0d\u5408\u6cd5\u60c5\u51b5\u3002\u800c\u5728\u4e09\u6b21\u8f6c\u79fb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u65e6\u9009\u62e9\u4e86\u4e00\u4e2a\u65e0\u89e3\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u8f6c\u79fb\u540e\u7684\u503c\u4e00\u5b9a\u8fd8\u662f $\\inf$\u3002\u6240\u4ee5\u5728\u505a\u5b8c\u8fd9\u4e48\u591a\u6b21\u64cd\u4f5c\u540e\uff0c\u53ea\u9700\u8981\u770b\u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5426\u4e3a $\\inf$ \u7ea7\u522b\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $O(n)$\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nconst long long inf=1e12;\nusing namespace std;\nint n,f[100001],fa[100001],dep[100001];\nint hed[100001],net[200001],ver[200001],tot;\nvoid add(int x,int y){\n\tver[++tot]=y;\n\tnet[tot]=hed[x];\n\thed[x]=tot;\n}\nint fnd(int x){return x==f[x]?x:f[x]=fnd(f[x]);}\nbool on[100001];\nlong long val[100001][4],dp[100001][4];\nlong long g[100002];\nvoid dfs(int x){\n\tdep[x]=dep[fa[x]]+1;\n\tint i,son=0;\n\tlong long mn0=inf,mn1=inf;\n\tfor(i=hed[x];i;i=net[i]){\n\t\tint y=ver[i];\n\t\tif(y==fa[x])continue;\n\t\tson++;\n\t\tfa[y]=x;\n\t\tdfs(y);\n\t\tdp[x][0]+=dp[y][0];\n\t\tdp[x][2]+=dp[y][0];\n\t\tdp[x][1]+=dp[y][2];\n\t\tdp[x][3]+=dp[y][2];\n\t\tmn0=min(mn0,dp[y][1]-dp[y][0]);\n\t\tmn1=min(mn1,dp[y][3]-dp[y][2]);\n\t}\n\tdp[x][0]+=mn0;\n\tdp[x][1]+=mn1;\n\tdp[x][1]++;\n\tdp[x][3]++;\n}\nint main(){\n\tint i,j;\n\tint px,py;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++)f[i]=i;\n\tfor(i=1;i<=n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tint p=fnd(x),q=fnd(y);\n\t\tif(p==q){\n\t\t\tpx=x;py=y;\n\t\t\tcontinue;\n\t\t}\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t\tf[p]=q;\n\t}\n\tdfs(px);\n\tint m=dep[py];\n\tfor(i=py;i;i=fa[i])on[i]=1;\n\tfor(i=py;i;i=fa[i]){\n\t\tlong long mn0=inf,mn1=inf;\n\t\tfor(j=hed[i];j;j=net[j]){\n\t\t\tint y=ver[j];\n\t\t\tif(on[y])continue;\n\t\t\tval[i][0]+=dp[y][0];\n\t\t\tval[i][1]+=dp[y][0];\n\t\t\tval[i][2]+=dp[y][2];\n\t\t\tval[i][3]+=dp[y][2];\n\t\t\tmn0=min(mn0,dp[y][1]-dp[y][0]);\n\t\t\tmn1=min(mn1,dp[y][3]-dp[y][2]);\n\t\t}\n\t\tval[i][1]+=mn0;\n\t\tval[i][3]+=mn1;\n\t\tval[i][2]++;val[i][3]++;\n\t}\n\tlong long res=inf,sum=0;\n\tif(dep[py]==1)res=min(dp[px][0],dp[px][1]);\n\tif(dep[py]==2)res=min(res,val[px][2]+val[py][2]);\n\tfor(i=py;i;i=fa[i])for(j=0;j<4;j++)dp[dep[i]][j]=val[i][j];\n\tfor(i=1;i<=m;i++)for(j=0;j<4;j++)val[i][j]=dp[i][j];\n\tfor(i=1;i<=m;i++)sum+=val[i][1];res=min(res,sum);\n\tif(dep[py]==3){\n\t\tsum=val[1][0]+val[2][0]+val[3][0];\n\t\tfor(i=1;i<=3;i++)res=min(res,sum-val[i][0]+val[i][3]);\n\t}\n\tif(dep[py]<=3){\n\t\tif(res>n)res=-1;\n\t\tprintf(\"%lld\",res);\n\t\treturn 0;\n\t}\n\tif(dep[py]==4){\n\t\tsum=0;\n\t\tfor(i=1;i<=4;i++)sum+=val[i][0];\n\t\tfor(i=1;i<=4;i++){\n\t\t\tint nx=i%4+1;\n\t\t\tres=min(res,sum-val[i][0]-val[nx][0]+val[i][2]+val[nx][2]);\n\t\t}\n\t}\n\tfor(i=0;i<4;i++)val[0][i]=val[m][i];\n\tfor(i=0;i<=3;i++){\n\t\tmemset(g,0x3f,sizeof(g));\n\t\tg[i]=0;\n\t\tfor(j=i+1;j<=m;j++){\n\t\t\tg[j]=g[j-1]+val[j][1];\n\t\t\tif(j>=3)g[j]=min(g[j],g[j-3]+val[j-2][0]+val[j-1][3]+val[j][0]);\n\t\t\tif(j>=4)g[j]=min(g[j],g[j-4]+val[j-3][0]+val[j-2][2]+val[j-1][2]+val[j][0]);\n\t\t}\n\t\tg[0]=g[m];\n\t\tfor(j=1;j<=i;j++){\n\t\t\tg[j]=g[j-1]+val[j][1];\n\t\t\tint p4=(j>=4?j-4:j-4+m);\n\t\t\tint p3=(j>=3?j-3:j-3+m),p2=(j>=2?j-2:j-2+m);\n\t\t\tg[j]=min(g[j],g[p3]+val[p2][0]+val[j-1][3]+val[j][0]);\n\t\t\tif(dep[py]>=4)g[j]=min(g[j],g[p4]+val[p3][0]+val[p2][2]+val[j-1][2]+val[j][0]);\n\t\t}\n\t\tres=min(res,g[i]);\n\t}\n\tif(res>n)res=-1;\n\tprintf(\"%lld\",res);\n}\n```",
        "postTime": 1679731285,
        "uid": 128606,
        "name": "2018ljw",
        "ccfLevel": 7,
        "title": "P7929 \u9898\u89e3"
    },
    {
        "content": "\u65ad\u73af\u540e\u628a\u65ad\u7684\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u70b9\u7279\u6b8a\u6807\u8bb0\uff0c\u4f5c\u4e3a\u4e24\u4e2a\u7279\u6b8a\u70b9\u3002\u8fd9\u6837\u5c31\u662f\u4e00\u4e2a\u6811\uff0c\u6811\u7684\u505a\u6cd5\u5f88\u7b80\u5355\u5427\uff0c\u628a\u4e24\u4e2a\u7279\u6b8a\u70b9\u7279\u6b8a\u5904\u7406\u5e26\u8fdb\u72b6\u6001\u5373\u53ef\u3002\n\n\u5177\u4f53\u4e00\u70b9\u5c31\u662f\uff0c\u8bbe $f(x,c_x,c_f,c_{rt_1},c_{rt_2})$ \u8868\u793a\u5904\u7406\u5230 $x$ \u70b9\uff0c$x$ / $x$ \u7684\u524d\u9a71 / \u7279\u6b8a\u70b9 1 / \u7279\u6b8a\u70b9 2 \u662f\u5426\u67d3\u8272\uff0c\u8f6c\u79fb\u5f88\u57fa\u7840\uff0c\u5177\u4f53\u770b\u4ee3\u7801\uff08\u4ee3\u7801\u4e2d\u5199\u7684\u662f\u72b6\u538b\uff09\u3002\n\n\u6ce8\u610f\u5224\u65e0\u89e3\u2026\u2026\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define cmin(x, y) x = min(x, y)\n#define cmax(x, y) x = max(x, y)\ntemplate<typename T=int> inline T read() {\n\tT x=0; char c=getchar(); bool f=0;\n\twhile(c<'0' || c>'9')\tf|=c=='-',c=getchar();\n\twhile(c>='0' && c<='9')\tx=x*10+(c&15),c=getchar();\n\treturn f?-x:x;\n}\n__attribute__((target(\"avx\"), optimize(\"O3\", \"unroll-loops\")))\nconst int INF=1e9+7;\nint n,fa[100100],rt,exrt,dp[100100][17];\nvector<int> e[100100];\nint makeSta(vector<int> v) {\n\tint res=0; assert(v.size()==4u);\n\tfor(int i=0; i<4; ++i) {\n\t\tres+=(1<<(3-i))*v[i];\n\t\tassert(0<=v[i] && v[i]<=1);\n\t}\n\treturn res;\n}\nint GetAns(const int now,const int f,const int Sta) {\n\t// Sta: colnow(3), colf(2), colrt(1), colexrt(0)\n\tif(~dp[now][Sta])\treturn dp[now][Sta];\n\tif((now==rt && ((Sta>>3)&1)!=((Sta>>1)&1))\n\t\t|| (now==exrt && (((Sta>>3)&1)!=(Sta&1))) || (now==exrt && (Sta>>2)&1 && (Sta>>1)&1))\treturn dp[now][Sta]=INF;\n\tint cnt=(Sta>>3)&1,res=INF; // number of vertexes coloured\n\tfor(const int y:e[now])\tif(y!=f)\tcnt+=GetAns(y,now,makeSta({0,(Sta>>3)&1,(Sta>>1)&1,Sta&1}));\n\tif((Sta>>2)&1 || (now==rt && Sta&1) || (now==exrt && (Sta>>1)&1))\tcmin(res,cnt);\n\telse {\n\t\tfor(const int y:e[now])\tif(y!=f)\tcmin(res,cnt-GetAns(y,now,makeSta({0,(Sta>>3)&1,(Sta>>1)&1,Sta&1}))\n\t\t\t+GetAns(y,now,makeSta({1,(Sta>>3)&1,(Sta>>1)&1,Sta&1})));\n\t}\n\treturn dp[now][Sta]=res;\n}\nint find(int now) { while(now!=fa[now])\tnow=fa[now]=fa[fa[now]]; return now; }\nsigned main() {\n\t// freopen(\"logicians.in\",\"r\",stdin);\n\t// freopen(\"logicians.out\",\"w\",stdout);\n\tmemset(dp,-1,sizeof dp);\n\tn=read();\n\tfor(int i=1; i<=n; ++i)\tfa[i]=i;\n\tfor(int i=1,x,y; i<=n; ++i) {\n\t\tx=read(),y=read();\n\t\tif(find(x)!=find(y)) {\n\t\t\tfa[find(x)]=find(y);\n\t\t\te[x].push_back(y);\n\t\t\te[y].push_back(x);\n\t\t}\n\t\telse\trt=x,exrt=y;\n\t}\n\tint ret=INF;\n\tfor(const int i:{0,1})\tfor(const int j:{0,1})\tcmin(ret,GetAns(rt,0,makeSta({i,0,i,j})));\n\tif(ret==INF)\treturn puts(\"-1\"),0;\n\tprintf(\"%lld\\n\",ret);\n\treturn 0;\n}\n\n```",
        "postTime": 1641105136,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u6742\u4e71\u65e0\u7ae0\uff0c\u7f6a\u4e5f"
    }
]