[
    {
        "content": "# \u73c2\u6735\u8389+\u7ebf\u6bb5\u6811\u65b9\u6cd5\n#### \u524d\u7f00\u77e5\u8bc6\uff1a\u7ebf\u6bb5\u6811\uff0c\u73c2\u6735\u8389\u6811\uff08ODT\uff09\uff0c\u53cc\u6307\u9488\n\n\u9996\u5148\uff0c\u8fd9\u9898\u6570\u5b57\u548c\u989c\u8272\u4e4b\u95f4\u660e\u663e**\u6ca1\u6709\u76f4\u63a5\u7684\u8054\u7cfb**\uff0c\u5e76\u4e14\u4e00\u4e2a\u73c2\u6735\u8389\u65e0\u6cd5\u5904\u7406\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528**\u4e24\u4e2a\u7ed3\u6784**\u5206\u522b\u50a8\u5b58\u8fd9\u4e24\u4e2a\u53d8\u91cf\u3002\u6570\u5b57\u8981\u6c42\u6700\u5c0f\u533a\u95f4\u548c\uff0c\u7528**\u7ebf\u6bb5\u6811**\u50a8\u5b58\uff1b\u989c\u8272\u533a\u95f4\u4fee\u6539\uff0c\u7528**\u73c2\u6735\u8389**\u50a8\u5b58\u3002\n## \u6784\u9020\n#### \u989c\u8272\n\u9996\u5148\u8003\u8651\u989c\u8272\uff1a\u5bf9\u4e8e\u989c\u8272\u9898\u76ee\u53ea\u6709\u4e00\u4e2a\u64cd\u4f5c\uff0c `assign()`\uff0c\u533a\u95f4\u5e73\u63a8\u3002\n#### \u6570\u5b57\n\u7136\u540e\u8003\u8651\u6570\u5b57\uff1a\u5efa\u7acb\u7684\u7ebf\u6bb5\u6811\u8981\u6ee1\u8db3\u4e0b\u5217\u64cd\u4f5c\uff1a**\u533a\u95f4\u6700\u5927\u3001\u533a\u95f4\u6700\u5c0f\u3001\u533a\u95f4\u6c42\u548c**\u3002\u533a\u95f4\u6700\u5927\u548c\u533a\u95f4\u6700\u5c0f\u7528\u505a\u521d\u59cb\u5316(\u53ef\u80fd\u6709 $c = 1$ \u7684\u60c5\u51b5\uff0c\u521d\u59cb\u5316\u7b54\u6848\u7528\u533a\u95f4\u6700\u5927/\u6700\u5c0f\u503c)\u3002\u533a\u95f4\u6c42\u548c\u662f\u9898\u76ee\u4e24\u95ee\u7684\u89e3\u3002\n\n~~\u6240\u4ee5\u8bdd\u8bf4\u771f\u7684\u6709\u4eba\u4f1a\u5728\u505a\u73c2\u6735\u8389\u9a97\u5206\u7684\u65f6\u5019\u8fd8\u52a0\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5417~~\u3002\n## \u5b9e\u73b0\n#### \u64cd\u4f5c\u4e00\n* \u8be2\u95ee\u533a\u95f4 $[l,r]$\uff0c $[l,r]$ \u4e2d\u5305\u542b\u6240\u6709\uff08\u4e00\u5171 $c$ \u79cd\uff09\u989c\u8272\u7684\u533a\u95f4\u548c\u7684\u6700\u5c0f\u503c\u3002\n\n\u5148\u7528\u73c2\u6735\u8389\uff0c\u5de6\u53f3\u754c\u4e3a\uff1a `itr=split(r+1)`\uff0c `itl=split(l)`\u3002\u5de6\u53f3\u6307\u9488\u521d\u59cb\u4e3a $itl$\u3002\u53f3\u6307\u9488 $it$ \u4e0d\u65ad ++\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u70b9\u4f7f\u989c\u8272 $tot$ \u6709 $c$ \u79cd\uff0c\u66f4\u65b0\u7b54\u6848 $res$ (\u5373\u8fd4\u56de\u5f53\u524d\u7ebf\u6bb5\u6811 `querysum(itl->r,it->l)`)\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u8003\u8651\u5c06\u5de6\u6307\u9488 $itl$ ++\uff0c\u5e76\u66f4\u65b0 $res$\u3002\u6700\u7ec8\u8fd4\u56de $res$ \u5373\u53ef\u3002\n```cpp\n#define add(x) (!cnt[x]++&&++tot)\n#define del(x) (!--cnt[x]&&--tot)\ninline int Q1(int l,int r)//\u7b2c\u4e00\u79cd\u60c5\u51b5 \n{ \n\tif(c==1)//\u82e5c=1,\u7279\u5224,\u76f4\u63a5\u53d6\u533a\u95f4\u6700\u5c0f\u503c\u5c31\u884c \n\t\treturn query_min(1,n,1,l,r);\n\tmemset(cnt,0,sizeof(cnt));//\u521d\u59cb\u5316 \n\tIT it_r=split(r+1),it_l=split(l),it=it_l;\n\tregister int t,res=INF,tot=0;\n\twhile(it!=it_r)//\u679a\u4e3e\u53f3\u6307\u9488,\u5f53\u6709c\u79cd\u989c\u8272\u65f6,\u8003\u8651\u632a\u52a8\u5de6\u6307\u9488 \n\t{\n\t\tadd(it->color);\n\t\twhile(tot==c)\n\t\t\tt=query_sum(1,n,1,it_l->r,it->l),res=min(res,t),del((it_l++)->color);\n\t\tit++;\n\t}\n\treturn res==INF?-1:res;\n}\n```\n**\u6ce8\uff1a $cnt_i$ \u4e3a\u989c\u8272 $i$ \u51fa\u73b0\u6b21\u6570\u3002 `add` \u91cc\u9762\u5148\u5224\u65ad\uff0c\u6240\u4ee5 ++ \u5728 $cnt_x$ \u540e\u9762\u3002 `del` \u91cc\u9762\u5148\u51cf\uff0c\u6240\u4ee5 -- \u5728 $cnt_x$ \u524d\u9762\u3002\u7ebf\u6bb5\u6811 `querysum` \u65f6\uff0c\u5de6\u6307\u9488\u6240\u5728\u533a\u95f4\u6709\u5c3e\u65e0\u5934\uff0c\u53f3\u6307\u9488\u6240\u5728\u533a\u95f4\u6709\u5934\u65e0\u5c3e\uff0c\u6240\u4ee5\u662f `querysum(itl->r,it->l)`\u3002**\n#### \u64cd\u4f5c\u4e8c\n* \u6c42 $[l,r]$ \u4e2d\u6ca1\u6709\u91cd\u590d\u989c\u8272\u7684\u6700\u5927\u533a\u95f4\u548c\u3002\n\n\u548c\u4e0a\u4e00\u95ee\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u540c\u6837\u7528\u53cc\u6307\u9488\u5b9e\u73b0\u3002\u4e0d\u8fc7\u8fd9\u4e00\u95ee\u662f\u4e0d\u65ad\u8c03\u6574\u5de6\u6307\u9488 $itl$\uff0c\u4fdd\u8bc1\u53f3\u6307\u9488\u7684\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\u4e3a 1\u3002\u6ce8\u610f\u7279\u5224\uff1a**\u5982\u679c\u53f3\u6307\u9488\u6240\u5728\u533a\u95f4\u7684 $size$ \u4e0d\u4e3a 1**\uff0c\u56e0\u4e3a\u6761\u4ef6\u4e0d\u7b26\u5408\uff0c\u76f4\u63a5\u8df3\u8fc7\u8be5\u6bb5\uff0c\u5373\u5c06\u5de6\u6307\u9488\u79fb\u81f3\u53f3\u6307\u9488\uff0c\u53f3\u6307\u9488 ++\uff0c\u907f\u5f00\u8fd9\u4e2a\u533a\u95f4\u3002\n```cpp\ninline int Q2(int l,int r)//\u7b2c\u4e8c\u79cd\u60c5\u51b5 \n{\n\tmemset(cnt,0,sizeof(cnt));//\u521d\u59cb\u5316 \n\tIT it_r=split(r+1),it_l=split(l),it=it_l;\n\tregister int t,res=query_max(1,n,1,l,r);\n\twhile(it!=it_r)//\u7c7b\u4f3c\u7684\u601d\u8def,\u4e0d\u65ad\u8c03\u6574\u5de6\u6307\u9488,\u4fdd\u8bc1\u53f3\u6307\u9488\u7684\u989c\u8272\u7684\u51fa\u73b0\u6570\u91cf\u59cb\u7ec8\u4e3a1\u3002\u6240\u4ee5\u8981\u52a0\u4e00\u4e2a\u7279\u5224,\u5982\u679c\u53f3\u6307\u9488\u7684size\u4e0d\u4e3a1,\u76f4\u63a5\u8df3\u8fc7,\u4e5f\u5c31\u662f\u4ee4\u5de6\u6307\u9488\u76f4\u63a5\u79fb\u52a8\u5230\u53f3\u6307\u9488\u7684\u4f4d\u7f6e,\u53f3\u6307\u9488++ \n\t{\n\t\tcnt[it->color]++;\n\t\twhile(it!=it_l&&cnt[it->color]>1)\n\t\t\tcnt[(it_l++)->color]--;\n\t\tif(it!=it_l)\n\t\t\tt=query_sum(1,n,1,it_l->r,it->l),res=max(res,t);\n\t\tif(it->l!=it->r)\n\t\t\twhile(it!=it_l)\n\t\t\t\tcnt[(it_l++)->color]--;\n\t\tit++;\n\t}\n\treturn res;\n}\n```\n**\u6ce8\u610f\uff1a\u8003\u8651\u6700\u5dee\u60c5\u51b5\uff0c $res$ \u521d\u59cb\u8d4b\u503c\u533a\u95f4\u5185\u5355\u70b9\u6700\u5927\u503c\u3002**\n\nAC Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define N 100000\n#define INF 1e9\n\n#define IT set<node>::iterator\n#define add(x) (!cnt[x]++&&++tot)\n#define del(x) (!--cnt[x]&&--tot)\n//----------------------------------------------\u5206\u5272\u7ebf---------------------------------------------------------------------// \nint n,c,a[N+5],v[N+5],cnt[N+5];\n//\u7ebf\u6bb5\u6811\u90e8\u5206 \nstruct tree \n{\n\tint S,Mx,Mn;\n\tinline tree(int s=0,int mx=-INF,int mn=INF):S(s),Mx(mx),Mn(mn){}\n\tinline tree operator + (const tree& t) const//\u91cd\u8f7d+,\u65b9\u4fbf\u8fd0\u7b97 \n\t{\n\t\treturn tree(S+t.S,max(Mx,t.Mx),min(Mn,t.Mn));\n\t}\n}t[N<<2];\ninline void build(int l,int r,int rt)//\u5efa\u6811 \n{\n\tif(l==r)\n\t{\n\t\tt[rt]=tree(v[l],v[l],v[l]);\n\t\treturn ; \n\t} \n\tregister int mid=l+r>>1;\n\tbuild(l,mid,rt<<1),build(mid+1,r,rt<<1|1);\n\tt[rt]=t[rt<<1]+t[rt<<1|1];\n}\ninline int query_sum(int l,int r,int rt,int ql,int qr)//\u533a\u95f4\u548c \n{\n\tif(ql<=l&&r<=qr) return t[rt].S;\n\tregister int mid=l+r>>1;\n\tregister int sum=0;\n\tif(ql<=mid)\n\t\tsum+=query_sum(l,mid,rt<<1,ql,qr);\n\tif(qr>mid)\n\t\tsum+=query_sum(mid+1,r,rt<<1|1,ql,qr);\n\treturn sum;\n}\ninline int query_max(int l,int r,int rt,int ql,int qr)//\u533a\u95f4\u6700\u5927 \n{\n\tif(ql<=l&&r<=qr) return t[rt].Mx;\n\tregister int t,maxx=-INF,mid=l+r>>1;\n\tif(ql<=mid)\n\t\tmaxx=max(maxx,query_max(l,mid,rt<<1,ql,qr));\n\tif(qr>mid)\n\t\tmaxx=max(maxx,query_max(mid+1,r,rt<<1|1,ql,qr));\n\treturn maxx;\n}\ninline int query_min(int l,int r,int rt,int ql,int qr)//\u533a\u95f4\u6700\u5c0f \n{\n\tif(ql<=l&&r<=qr) return t[rt].Mn;\n\tregister int t,minn=INF,mid=l+r>>1;\n\tif(ql<=mid)\n\t\tminn=min(minn,query_min(l,mid,rt<<1,ql,qr));\n\tif(qr>mid)\n\t\tminn=min(minn,query_min(mid+1,r,rt<<1|1,ql,qr));\n\treturn minn;\n}\ninline void Init(int x,int* s)//\u8f93\u5165 \n{\n\tfor(register int i=1;i<=x;i++)\n\t\tv[i]=s[i];\n\tbuild(1,x,1);\n}\ninline void Update(int x,int y)//\u66f4\u65b0 \n{\n\tregister int l=1,r=n,rt=1,mid;\n\twhile(l!=r)//\u4e8c\u5206\u67e5\u627e \n\t{\n\t\tmid=l+r>>1;\n\t\tif(x<=mid)\n\t\t\tr=mid,rt<<=1;\n\t\telse\n\t\t\tl=mid+1,(rt<<=1)|=1;\n\t}\n\tt[rt]=tree(y,y,y);\n\twhile(rt>>=1)//\u5411\u4e0a\u66f4\u65b0 \n\t\tt[rt]=t[rt<<1]+t[rt<<1|1];\n}\n//----------------------------------------------\u5206\u5272\u7ebf---------------------------------------------------------------------// \n//\u73c2\u6735\u8389\u6811\u90e8\u5206\nstruct node\n{\n\tint l,r,color;\n\tinline node(int x=0,int y=0,int p=0):l(x),r(y),color(p){}\n\tinline bool operator < (const node& t) const\n\t{\n\t\treturn l<t.l;\n\t}\n};set<node> S;\ninline IT split(int pos)//\u533a\u95f4\u5206\u5272 \n{\n\tIT it=S.lower_bound(node(pos));\n\tif(it!=S.end()&&it->l==pos) return it;\n\tit--;\n\tnode tmp=*it;\n\tS.erase(it);\n\tS.insert(node(tmp.l,pos-1,tmp.color));\n\treturn S.insert(node(pos,tmp.r,tmp.color)).first;\n}\ninline void assign(int l,int r,int color)//\u533a\u95f4\u5e73\u63a8 \n{\n\tIT it_r=split(r+1),it_l=split(l);\n\tS.erase(it_l,it_r);\n\tS.insert(node(l,r,color));\n}\ninline void _Init(int x,int* s)//\u8f93\u5165 \n{\n\tfor(register int i=(s[0]=s[x+1]=-1,1),t=0;i<=x+2;++i)\n\t\ts[i]^s[i-1]&&(S.insert(node(t,i-1,s[i-1])),t=i);\n}\n//----------------------------------------------\u5206\u5272\u7ebf---------------------------------------------------------------------// \n//\u95ee\u9898\u6c42\u89e3\u90e8\u5206 \ninline int Q1(int l,int r)//\u7b2c\u4e00\u79cd\u60c5\u51b5 \n{ \n\tif(c==1)//\u82e5c=1,\u7279\u5224,\u76f4\u63a5\u53d6\u533a\u95f4\u6700\u5c0f\u503c\u5c31\u884c \n\t\treturn query_min(1,n,1,l,r);\n\tmemset(cnt,0,sizeof(cnt));//\u521d\u59cb\u5316 \n\tIT it_r=split(r+1),it_l=split(l),it=it_l;\n\tregister int t,res=INF,tot=0;\n\twhile(it!=it_r)//\u679a\u4e3e\u53f3\u6307\u9488,\u5f53\u6709c\u79cd\u989c\u8272\u65f6,\u8003\u8651\u632a\u52a8\u5de6\u6307\u9488 \n\t{\n\t\tadd(it->color);\n\t\twhile(tot==c)\n\t\t\tt=query_sum(1,n,1,it_l->r,it->l),res=min(res,t),del((it_l++)->color);\n\t\tit++;\n\t}\n\treturn res==INF?-1:res;//=if(res==INF) return -1;else return res; \n}\ninline int Q2(int l,int r)//\u7b2c\u4e8c\u79cd\u60c5\u51b5 \n{\n\tmemset(cnt,0,sizeof(cnt));//\u521d\u59cb\u5316 \n\tIT it_r=split(r+1),it_l=split(l),it=it_l;\n\tregister int t,res=query_max(1,n,1,l,r);\n\twhile(it!=it_r)//\u7c7b\u4f3c\u7684\u601d\u8def,\u4e0d\u65ad\u8c03\u6574\u5de6\u6307\u9488,\u4fdd\u8bc1\u53f3\u6307\u9488\u7684\u989c\u8272\u7684\u51fa\u73b0\u6570\u91cf\u59cb\u7ec8\u4e3a1\u3002\u6240\u4ee5\u8981\u52a0\u4e00\u4e2a\u7279\u5224,\u5982\u679c\u53f3\u6307\u9488\u7684size\u4e0d\u4e3a1,\u76f4\u63a5\u8df3\u8fc7,\u4e5f\u5c31\u662f\u4ee4\u5de6\u6307\u9488\u76f4\u63a5\u79fb\u52a8\u5230\u53f3\u6307\u9488\u7684\u4f4d\u7f6e,\u53f3\u6307\u9488++ \n\t{\n\t\tcnt[it->color]++;\n\t\twhile(it!=it_l&&cnt[it->color]>1)\n\t\t\tcnt[(it_l++)->color]--;\n\t\tif(it!=it_l)\n\t\t\tt=query_sum(1,n,1,it_l->r,it->l),res=max(res,t);\n\t\tif(it->l!=it->r)\n\t\t\twhile(it!=it_l)\n\t\t\t\tcnt[(it_l++)->color]--;\n\t\tit++;\n\t}\n\treturn res;\n}\nvoid read(int &x)//\u5b98\u65b9\u7ed9\u7684\u5feb\u8bfb,\u4e0d\u7528\u767d\u4e0d\u7528(bushi) \n{\n\tchar ch;\n\twhile(ch = getchar(), ch < '!'); x = ch - 48;\n\twhile(ch = getchar(), ch > '!') x = (x << 3) + (x << 1) + ch - 48;\n}\n\nint main()\n{\n\tregister int T,i,opt,l,r,col;\n\tread(n),read(T),read(c);\n\t\n\tfor(i=1;i<=n;++i)\n\t\tread(a[i]);\n\tInit(n,a);\n\tfor(i=1;i<=n;++i)\n\t\tread(a[i]);\n\t_Init(n,a);\n\t\n\twhile(T--)\n\t{\n\t\tread(opt),read(l),read(r);\n\t\tif(opt==1) Update(l,r);\n\t\tif(opt==2) read(col),assign(l,r,col);\n\t\tif(opt==3) printf(\"%d\\n\",Q1(l,r));\n\t\tif(opt==4) printf(\"%d\\n\",Q2(l,r));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1668256216,
        "uid": 246927,
        "name": "LG_kemeng",
        "ccfLevel": 0,
        "title": "\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a\u9898\u89e3"
    },
    {
        "content": "~~\u5927\u6982\u662f\u7b2c\u4e00\u6b21\u89c1\u5230\u628a\u73c2\u6735\u8389\u6811\u548c\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u4e00\u8d77\u7528\u7684\u9898~~\n\n\u9996\u5148\u7531\u4e8e\u9898\u76ee\u4e2d\u8bf4\u4fdd\u8bc1\u6570\u636e\u968f\u673a\uff0c\u800c\u4e14\u53c8\u6709\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\uff0c\u8fd9\u5df2\u7ecf\u662f\u660e\u793a\u4f60\u8981\u7528\u73c2\u6735\u8389\u6811\u4e86~~\u5427~~\n\n\u6211\u4eec\u53d1\u73b0\u533a\u95f4\u63a8\u5e73\u7684\u64cd\u4f5c\u662f\u9488\u5bf9\u989c\u8272\u7684\uff0c\u800c\u4e14\u8be2\u95ee\u64cd\u4f5c\u90fd\u662f\u5728\u6ee1\u8db3\u67d0\u79cd\u5173\u4e8e\u989c\u8272\u7684\u9650\u5236\u4e0b\u6c42\u7b54\u6848\uff0c\u6240\u4ee5\u663e\u7136\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\u4fdd\u5b58\u7684\u5e94\u8be5\u662f\u989c\u8272\u4fe1\u606f\n\n\u7136\u540e\u770b\u8fd9\u4e24\u79cd\u8be2\u95ee\u64cd\u4f5c\uff0c\u4e0d\u96be\u53d1\u73b0\u5408\u6cd5\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u7684\u79fb\u52a8\u90fd\u662f\u5355\u8c03\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u53cc\u6307\u9488\u626b\u63cf\u6765\u6c42\u51fa\u7b54\u6848\n\n\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u600e\u6837\u5feb\u901f\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u4fe1\u606f\uff0c\u6bd5\u7adf\u4f60\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u662f\u8981\u7528\u5230\u7684\n\n\u53ea\u5728\u73c2\u6735\u8389\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u5904\u8bb0\u5f55\u6570\u5b57\u4e4b\u548c\u663e\u7136\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u4f60\u6839\u672c\u6ca1\u529e\u6cd5`split`\u2026\u2026\n\n\u6b64\u95ee\u9898\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\uff08\u5f53\u7136\u4e5f\u53ef\u80fd\u6709\u522b\u7684\u6211\u4e0d\u77e5\u9053\u7684\u65b9\u6cd5\n\n\u4e00\u79cd\u662f\u6211\u5728\u6bd4\u8d5b\u65f6\u60f3\u7684\uff0c\u5c31\u662f\u5728\u6bcf\u4e2a\u8282\u70b9\u91cc\u7ef4\u62a4\u4e00\u68f5\u80fd\u591f\u5feb\u901f\u62c6\u5206\u5408\u5e76\u7684\u5e73\u8861\u6811\uff08\u6bd4\u5982 $Splay$ \u6216\u65e0\u65cb $Treap$ \uff09\uff0c\u5728\u5e73\u8861\u6811\u91cc\u8bb0\u5f55\u4fe1\u606f\u5c31\u597d\u4e86\n\n\u7136\u800c\u8fd9\u4e48\u5199\u975e\u5e38\u6076\u5fc3\u2026\u2026\u96be\u5199\u96be\u8c03\uff0c\u5e38\u6570\u6781\u5927\uff0c\u8fd8\u6709\u4e00\u5806\u7ec6\u8282\u975e\u5e38\u96be\u641e\uff08\u6240\u4ee5\u6bd4\u8d5b\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u8c03\u51fa\u6765QAQ\n\n\u5176\u5b9e\u6211\u5f53\u65f6\u8fd9\u4e48\u60f3\u4e3b\u8981\u662f\u56e0\u4e3a\u628a\u5173\u6ce8\u70b9\u96c6\u4e2d\u5728\u201c`split`\u7684\u65f6\u5019\u600e\u4e48\u5feb\u901f\u7ef4\u62a4\u8282\u70b9\u91cc\u7684\u6570\u503c\u4fe1\u606f\u201d\u4e86\n\n\u7136\u800c\u5982\u679c\u6211\u4eec\u7a0d\u5fae\u52a8\u4e00\u4e0b\u8111\u5b50\u60f3\u60f3\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b9e\u9645\u4e0a\u6839\u672c\u4e0d\u9700\u8981\u8fd9\u4e48\u9ebb\u70e6\n\n\u56e0\u4e3a\u6211\u4eec\u662f\u77e5\u9053\u6bcf\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u7684\uff0c\u6240\u4ee5\u6839\u672c\u6ca1\u5fc5\u8981\u628a\u8fd9\u4e9b\u6570\u5b57\u7684\u4fe1\u606f\u7ef4\u62a4\u5728\u8282\u70b9\u4e0a\u554a\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\u5c31\u597d\u4e86\n\n\u8fd9\u4e48\u5199\u663e\u7136\u6bd4\u4e0a\u4e00\u79cd\u5199\u6cd5\u597d\u4e86\u5f88\u591a\uff0c\u4e0d\u7ba1\u662f\u7801\u91cf\u4e0a\u8fd8\u662f\u5e38\u6570\u4e0a\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u64cd\u4f5c $3$ \uff0c\u6211\u4eec\u7528\u53cc\u6307\u9488\u626b\u51fa\u6bcf\u4e2a\u5c3d\u53ef\u80fd\u5c0f\u7684\u80fd\u591f\u5305\u542b\u6240\u6709\u989c\u8272\u7684\u533a\u95f4\uff0c\u7136\u540e\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811(\u6216\u8005\u6811\u72b6\u6570\u7ec4)\u4e0a\u67e5\u8be2\u6b64\u533a\u95f4\u5185\u7684\u6570\u503c\u4e4b\u548c\n\n\u5bf9\u4e8e\u64cd\u4f5c $4$ \uff0c\u6211\u4eec\u7528\u53cc\u6307\u9488\u626b\u51fa\u6bcf\u4e2a\u5c3d\u53ef\u80fd\u5927\u7684\u4e14\u6ca1\u6709\u51fa\u73b0\u91cd\u590d\u989c\u8272\u7684\u533a\u95f4\uff0c\u540c\u6837\u67e5\u8be2\u6b64\u533a\u95f4\u5185\u7684\u6570\u503c\u4e4b\u548c\uff1b\u5f53\u7136\uff0c\u8fd9\u6837\u505a\u4f1a\u6f0f\u6389\u90a3\u79cd\u957f\u5ea6\u4e3a $1$ \u4e14\u88ab\u5305\u542b\u5728\u67d0\u4e2a\u8282\u70b9\u5185\u90e8\u7684\u533a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u518d\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u4e00\u4e0b\u533a\u95f4\u6700\u5927\u503c\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\uff0c\u53cc\u6307\u9488\u7684\u79fb\u52a8\u6b21\u6570\u662f $O(logn)$ \u7684\uff0c\u6bcf\u6b21\u67e5\u8be2\u533a\u95f4\u548c\u662f $O(logn)$ \u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $O(mlog^2n)$ \n\n\u53e6\u5916\u8fd8\u6709\u4e00\u70b9\uff0c\u5c31\u662f\u4e0a\u9762\u8bf4\u7684\u65b9\u6cd5~~\u597d\u50cf~~\u662f\u6ca1\u529e\u6cd5\u5904\u7406 $c=1$ \u7684\u60c5\u51b5\u7684\uff08\u81f3\u5c11\u6211\u770b\u4e86\u4e00\u4e0b\u5176\u4ed6\u76ee\u524d\u5df2 $\\text{AC}$ \u7684\u4ee3\u7801\u90fd\u4e0d\u80fd\u6b63\u786e\u56de\u7b54 $c=1$ \u65f6\u7684\u8be2\u95ee\uff09\uff0c\u6240\u4ee5\u8fd8\u662f\u7279\u5224\u4e00\u4e0b $c=1$ \u7684\u60c5\u51b5\u6bd4\u8f83\u597d\uff08\u867d\u7136\u6570\u636e\u4e2d\u5e76\u6ca1\u6709\u8fd9\u79cd\u60c5\u51b5\uff09\n\n\u7279\u5224\u5c31\u5f88\u7b80\u5355\u5566\uff0c\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u533a\u95f4\u6700\u5927\u548c\u6700\u5c0f\u503c\u5c31\u661f\u4e86\n\n\u6700\u7ec8\u7684\u5b9e\u73b0\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u7684\uff0c\u5982\u679c\u4e0d\u60f3\u6e05\u695a\u5c31\u5f00\u59cb\u5199\u53ef\u80fd\u4f1a\u8c03\u5f88\u4e45\u5427\uff08~~\u6bd4\u5982\u6211~~\n\n\u4e0b\u9762\u653e\u4e0a\u4ee3\u7801\uff08\u7b2c\u4e8c\u79cd\u5199\u6cd5\uff09\uff0c\u7801\u98ce\u53ef\u80fd\u6bd4\u8f83\u5947\u602a\uff0c\u8f7b\u55b7\u2026\u2026\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <set>\n#define L(x) (x<<1)\n#define R(x) ((x<<1)|1)\n#define Lowbit(x) ((x)&(-(x)))\n#define SI set<Node>::iterator\nusing namespace std;\n\nconst int maxn=100005;\nconst int Inf=0x7fffffff;\n\nstruct Node{\n\tint l;\n\tint r;\n\tmutable int col;\n\tinline Node(int l,int r=-1,int col=0):l(l),r(r),col(col){}\n\tinline bool operator <(const Node& a)const{\n\t\treturn l<a.l;\n\t}\n};\n\nstruct SegmentTree{\n\tint s;\n\tint t;\n\tint maxv;\n\tint minv;\n}N[maxn<<2];\n\nint n;\nint m;\nint p;\nint A[maxn];\nint c[maxn];\nbool flag[maxn];\nset<Node> S;\n\nstruct BIT{\n\tint c[maxn];\n\tinline void Update(int x,int key){\n\t\tfor(int i=x;i<=n;i+=Lowbit(i))\n\t\t\tc[i]+=key;\n\t}\n\tinline int Query(int x){\n\t\tint ans=0;\n\t\tfor(int i=x;i;i-=Lowbit(i))\n\t\t\tans+=c[i];\n\t\treturn ans;\n\t}\n\tinline int Query(int l,int r){\n\t\treturn Query(r)-Query(l-1);\n\t}\n}C;\n\nSI Split(int);\nvoid Pushup(int);\nint Querymin(int,int);\nint Querymax(int,int);\nvoid Build(int,int,int);\nvoid Update(int,int,int);\nvoid Assign(int,int,int);\nint Querymax(int,int,int);\nint Querymin(int,int,int);\ninline void Read_int(int&);\nvoid Work();\n\nstruct Solve{\n\tvoid operator ()(){\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tRead_int(A[i]);\n\t\tBuild(1,1,n);\n\t\tfor(int i=1,x;i<=n;++i)\n\t\t\tRead_int(x);\n\t\tfor(int i=1,op,l,r;i<=p;++i){\n\t\t\tRead_int(op);\n\t\t\tRead_int(l);\n\t\t\tRead_int(r);\n\t\t\tswitch(op){\n\t\t\t\tcase 1:Update(1,l,r);break;\n\t\t\t\tcase 2:Read_int(l);break;\n\t\t\t\tcase 3:printf(\"%d\\n\",Querymin(1,l,r));break;\n\t\t\t\tcase 4:printf(\"%d\\n\",Querymax(1,l,r));break;\n\t\t\t}\n\t\t}\n\t}\n};\n\nint main(){\n\tWork();\n\treturn 0;\n}\n\nvoid Work(){\n\tint op,l,r,x;\n\tRead_int(n);\n\tRead_int(p);\n\tRead_int(m);\n\tif(m==1) return Solve()();\n\tS.insert(Node(0,0));\n\tS.insert(Node(n+1,n+1));\n\tfor(int i=1;i<=n;++i)\n\t\tRead_int(A[i]),C.Update(i,A[i]);\n\tBuild(1,1,n);\n\tfor(int i=1;i<=n;++i)\n\t\tRead_int(x),S.insert(Node(i,i,x));\n\tfor(int i=1;i<=p;++i){\n\t\tRead_int(op);\n\t\tRead_int(l);\n\t\tRead_int(r);\n\t\tswitch(op){\n\t\t\tcase 1:Update(1,l,r);C.Update(l,-A[l]);C.Update(l,A[l]=r);break;\n\t\t\tcase 2:Read_int(x);Assign(l,r,x);break;\n\t\t\tcase 3:printf(\"%d\\n\",Querymin(l,r));break;\n\t\t\tcase 4:printf(\"%d\\n\",Querymax(l,r));break;\n\t\t}\n\t}\n}\n\ninline SI Split(int x){\n\tSI it=S.lower_bound(Node(x));\n\tif(it!=S.end()&&it->l==x) return it;\n\t--it;int l=it->l,r=it->r;\n\tint col=it->col;S.erase(it);\n\tS.insert(Node(l,x-1,col));\n\treturn S.insert(Node(x,r,col)).first;\n}\n\ninline void Assign(int l,int r,int col){\n\tSI t=Split(r+1),s=Split(l);\n\tS.erase(s,t);S.insert(Node(l,r,col));\n}\n\ninline int Querymin(int l,int r){\n\tSI t=Split(r+1),s=Split(l);\n\tSI a=s,b=s;int ans=Inf,now=0;\n\tfor(;b!=t;++a,++b){\n\t\tfor(;b!=t;++b){\n\t\t\tif(!(c[b->col]++)) ++now;\n\t\t\tif(now>=m) break;\n\t\t}\n\t\tif(b==t) break;\n\t\tfor(;;++a) if(!(--c[a->col])){\n\t\t\t--now;break;\n\t\t}\n\t\tans=min(ans,C.Query(a->r,b->l));\n\t}\n\tfor(;a!=t;++a) c[a->col]=0;\n\treturn (ans>=Inf)?(-1):ans;\n}\n\ninline int Querymax(int l,int r){\n\tSI t=Split(r+1),s=Split(l),a=s,b=s;\n\tint ans=Querymax(1,l,r);\n\tfor(;b!=t;++b){\n\t\tfor(;b!=t;++b){\n\t\t\tif(flag[b->col]) break;\n\t\t\tif(b->l!=b->r) break;\n\t\t\tflag[b->col]=1;\n\t\t}\n\t\tans=max(ans,C.Query(a->r,b->l-1));\n\t\tif(b==t) break;\n\t\tif(b->l!=b->r){\n\t\t\tif(!flag[b->col])\n\t\t\t\tans=max(ans,C.Query(a->r,b->l));\n\t\t\telse{\n\t\t\t\tfor(;flag[b->col];++a)\n\t\t\t\t\tflag[a->col]=0;\n\t\t\t\tans=max(ans,C.Query(a->r,b->l));\n\t\t\t}\n\t\t\tfor(;a!=b;++a) flag[a->col]=0;\n\t\t\tflag[b->col]=1;continue;\n\t\t}\n\t\tfor(;flag[b->col];++a)\n\t\t\tflag[a->col]=0;\n\t\tans=max(ans,C.Query(a->r,b->l));\n\t\tflag[b->col]=1;\n\t}\n\tfor(;a!=t;++a) flag[a->col]=0;\n\treturn ans;\n}\n\nvoid Build(int x,int left,int right){\n\tN[x].s=left;\n\tN[x].t=right;\n\tif(left==right)\n\t\treturn N[x].maxv=N[x].minv=A[left],void();\n\tint mid=((left+right)>>1);\n\tBuild(L(x),left,mid);\n\tBuild(R(x),mid+1,right);\n\tN[x].maxv=max(N[L(x)].maxv,N[R(x)].maxv);\n\tN[x].minv=min(N[L(x)].minv,N[R(x)].minv);\n}\n\ninline void Update(int x,int pos,int key){\n\tif(N[x].s>pos||N[x].t<pos) return;\n\tif(N[x].s==N[x].t)\n\t\treturn N[x].maxv=N[x].minv=key,void();\n\tif(pos<=N[L(x)].t) Update(L(x),pos,key);\n\telse Update(R(x),pos,key);\n\tN[x].maxv=max(N[L(x)].maxv,N[R(x)].maxv);\n\tN[x].minv=min(N[L(x)].minv,N[R(x)].minv);\n}\n\ninline int Querymax(int x,int left,int right){\n\tif(N[x].s>right||N[x].t<left) return -Inf;\n\tif(N[x].s>=left&&N[x].t<=right) return N[x].maxv;\n\treturn max(Querymax(L(x),left,right),Querymax(R(x),left,right));\n}\n\ninline int Querymin(int x,int left,int right){\n\tif(N[x].s>right||N[x].t<left) return Inf;\n\tif(N[x].s>=left&&N[x].t<=right) return N[x].minv;\n\treturn min(Querymin(L(x),left,right),Querymin(R(x),left,right));\n}\n\ninline void Read_int(int& x){\n\tregister char ch;\n\twhile(ch=getchar(),ch<'0');\n\tx=ch-'0';\n\twhile(ch=getchar(),ch>='0') x=((x+(x<<2))<<1)+ch-'0';\n}\n```\n\n\u987a\u4fbf\u518d\u628a\u7528\u5e73\u8861\u6811\u7684\u90a3\u79cd\u5199\u6cd5\u7684\u4ee3\u7801\u653e\u4e0a\u6765\u5427\uff0c~~\u6bd5\u7adf\u8c03\u4e86\u597d\u4e45\u7684\u4e0d\u80fd\u767d\u8c03\u662f\u4e0d\u662f~~\n\n\u8fd9\u4e48\u5199\u771f\u7684\u5f88\u9ebb\u70e6\uff0c\u53ef\u80fd\u5e76\u4e0d\u4f1a\u6709\u9664\u4e86\u6211\u4e4b\u5916\u7684\u4eba\u4f1a\u8fd9\u4e48\u5199\u5427\n\n\u53c8\u56e0\u4e3a\u8fd9\u79cd\u5199\u6cd5\u662f\u6bd4\u8d5b\u7684\u65f6\u5019\u5199\u7684(\u540e\u6765\u624d\u7ed9\u8c03\u8fc7\u4e86)\uff0c\u6240\u4ee5\u6709\u5f88\u591a\u5197\u4f59\u8bed\u53e5\uff0c\u53ef\u80fd\u5f88\u96be\u7406\u89e3\u7684\u8bf4\u2026\u2026(\u8981\u662f\u771f\u770b\u4e0d\u61c2\u5c31\u522b\u770b\u4e86)\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <deque>\n#include <set>\n#define lch chd[0]\n#define rch chd[1]\n#define L(x) (x<<1)\n#define R(x) ((x<<1)|1)\n#define SI set<Node>::iterator\n#define Treapair pair<Treap*,Treap*>\nusing namespace std;\n\nconst int maxn=100005;\nconst int Inf=0x7fffffff;\n\nstruct Treap{\n\tint val;\n\tint sum;\n\tint pos;\n\tint size;\n\tint maxv;\n\tint lval;\n\tint rval;\n\tTreap* chd[2];\n\tinline Treap();\n\tinline void Reset();\n\tinline void Pushup();\n\tinline void Set(int,int);\n};\n\nstruct Node{\n\tint l;\n\tint r;\n\tmutable int col;\n\tmutable Treap* rt;\n\tinline bool operator <(const Node& a)const{\n\t\treturn l<a.l;\n\t}\n};\n\nstruct SegmentTree{\n\tint s;\n\tint t;\n\tint maxv;\n\tint minv;\n}N[maxn<<2];\n\nint n;\nint m;\nint p;\nint A[maxn];\nint c[maxn];\nbool flag[maxn];\nTreap* Null=new Treap;\nset<Node> S;\n\nSI Split(int);\nvoid Change(int,int);\nint Querymin(int,int);\nint Querymax(int,int);\nvoid Assign(int,int,int);\nTreapair Split(Treap*,int);\nTreap* Merge(Treap*,Treap*);\nvoid Modify(Treap*,int,int);\ninline void Read_int(int&);\nvoid Work();\n\nstruct Solve{\n\tvoid Build(int x,int left,int right){\n\t\tN[x].s=left;\n\t\tN[x].t=right;\n\t\tif(left==right)\n\t\t\treturn N[x].maxv=N[x].minv=A[left],void();\n\t\tint mid=((left+right)>>1);\n\t\tBuild(L(x),left,mid);\n\t\tBuild(R(x),mid+1,right);\n\t\tN[x].maxv=max(N[L(x)].maxv,N[R(x)].maxv);\n\t\tN[x].minv=min(N[L(x)].minv,N[R(x)].minv);\n\t}\n\tinline void Update(int x,int pos,int key){\n\t\tif(N[x].s>pos||N[x].t<pos) return;\n\t\tif(N[x].s==N[x].t)\n\t\t\treturn N[x].maxv=N[x].minv=key,void();\n\t\tif(pos<=N[L(x)].t) Update(L(x),pos,key);\n\t\telse Update(R(x),pos,key);\n\t\tN[x].maxv=max(N[L(x)].maxv,N[R(x)].maxv);\n\t\tN[x].minv=min(N[L(x)].minv,N[R(x)].minv);\n\t}\n\tinline int Querymax(int x,int left,int right){\n\t\tif(N[x].s>right||N[x].t<left) return -Inf;\n\t\tif(N[x].s>=left&&N[x].t<=right) return N[x].maxv;\n\t\treturn max(Querymax(L(x),left,right),Querymax(R(x),left,right));\n\t}\n\tinline int Querymin(int x,int left,int right){\n\t\tif(N[x].s>right||N[x].t<left) return Inf;\n\t\tif(N[x].s>=left&&N[x].t<=right) return N[x].minv;\n\t\treturn min(Querymin(L(x),left,right),Querymin(R(x),left,right));\n\t}\n\tvoid operator ()(){\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tRead_int(A[i]);\n\t\tBuild(1,1,n);\n\t\tfor(int i=1,x;i<=n;++i)\n\t\t\tRead_int(x);\n\t\tfor(int i=1,op,l,r;i<=p;++i){\n\t\t\tRead_int(op);\n\t\t\tRead_int(l);\n\t\t\tRead_int(r);\n\t\t\tswitch(op){\n\t\t\t\tcase 1:Update(1,l,r);break;\n\t\t\t\tcase 2:Read_int(l);break;\n\t\t\t\tcase 3:printf(\"%d\\n\",Querymin(1,l,r));break;\n\t\t\t\tcase 4:printf(\"%d\\n\",Querymax(1,l,r));break;\n\t\t\t}\n\t\t}\n\t}\n};\n\nint main(){\n\tWork();\n\treturn 0;\n}\n\nvoid Work(){\n\tint op,l,r,x;\n\tNull->lch=Null->rch=Null;\n\tRead_int(n);\n\tRead_int(p);\n\tRead_int(m);\n\tif(m==1) return Solve()();\n\tS.insert((Node){0,0,0,Null});\n\tS.insert((Node){n+1,n+1,0,Null});\n\tfor(int i=1;i<=n;++i)\n\t\tRead_int(A[i]);\n\tfor(int i=1;i<=n;++i){\n\t\tRead_int(x);\n\t\tTreap* rt=new Treap;\n\t\trt->Set(A[i],i);\n\t\tS.insert((Node){i,i,x,rt});\n\t}\n\tfor(int i=1;i<=p;++i){\n\t\tRead_int(op);\n\t\tRead_int(l);\n\t\tRead_int(r);\n\t\tswitch(op){\n\t\t\tcase 1:Change(l,r);break;\n\t\t\tcase 2:Read_int(x);Assign(l,r,x);break;\n\t\t\tcase 3:printf(\"%d\\n\",Querymin(l,r));break;\n\t\t\tcase 4:printf(\"%d\\n\",Querymax(l,r));break;\n\t\t}\n\t}\n}\n\ninline SI Split(int x){\n\tSI it=S.lower_bound((Node){x});\n\tif(it!=S.end()&&it->l==x) return it;\n\t--it;int l=it->l,r=it->r,col=it->col;\n\tTreap* rt=it->rt;S.erase(it);\n\tTreapair y=Split(rt,x-l);\n\tS.insert((Node){l,x-1,col,y.first});\n\treturn S.insert((Node){x,r,col,y.second}).first;\n}\n\ninline void Assign(int l,int r,int col){\n\tSI t=Split(r+1),s=Split(l),it=s;\n\tTreap* rt=it->rt;\n\tfor(++it;it!=t;++it)\n\t\trt=Merge(rt,it->rt);\n\tS.erase(s,t);\n\tS.insert((Node){l,r,col,rt});\n}\n\ninline void Change(int x,int key){\n\tSI it=S.lower_bound((Node){x});\n\tif(it!=S.end()&&it->l==x)\n\t\treturn Modify(it->rt,x,key);\n\t--it;Modify(it->rt,x,key);\n}\n\ninline int Querymin(int l,int r){\n\tSI t=Split(r+1),s=Split(l);\n\tSI a=s,b=s;--b;--t;\n\tdeque<int> q;\n\tint ans=Inf,sum=0,now=0;\n\twhile(1){\n\t\twhile(b!=t){\n\t\t\tif(!(c[(++b)->col]++)) ++now;\n\t\t\tif(now>=m){\n\t\t\t\tsum+=b->rt->lval;\n\t\t\t\tq.push_back(b->rt->lval);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsum+=b->rt->sum;\n\t\t\tq.push_back(b->rt->sum);\n\t\t}\n\t\tbool shoal=0;\n\t\tif(b==t){\n\t\t\tif(now<m) break;\n\t\t\tshoal=1;\n\t\t}\n\t\twhile(1){\n\t\t\tif(!(--c[a->col])){\n\t\t\t\t--now;break;\n\t\t\t}\n\t\t\tsum-=q.front();\n\t\t\tq.pop_front();++a;\n\t\t}\n\t\tsum-=q.front();\n\t\tq.pop_front();\n\t\tans=min(ans,sum+a->rt->rval);\n\t\tif(shoal) break;\n\t\t++a;sum-=q.front();\n\t\tq.pop_front();\n\t\tq.push_front(a->rt->rval);\n\t\tsum+=a->rt->rval;\n\t\tsum-=q.back();\n\t\tq.pop_back();\n\t\tq.push_back(b->rt->sum);\n\t\tsum+=b->rt->sum;\n\t}\n\twhile(a->r<t->l) c[(a++)->col]=0;\n\tc[a->col]=0;\n\treturn (ans>=Inf)?(-1):ans;\n}\n\ninline int Querymax(int l,int r){\n\tSI t=Split(r+1),s=Split(l);\n\tSI a=s,b=s;int ans=0,sum=0;\n\twhile(b!=t){\n\t\tbool shoal=0;\n\t\twhile((!shoal)&&b!=t){\n\t\t\tif(flag[b->col]) break;\n\t\t\tif(b->l!=b->r){\n\t\t\t\tsum+=b->rt->lval;\n\t\t\t\tans=max(ans,sum);\n\t\t\t\tans=max(ans,b->rt->maxv);\n\t\t\t\tsum=b->rt->rval;\n\t\t\t\twhile(a!=b) flag[(a++)->col]=0;\n\t\t\t\tshoal=1;\n\t\t\t}else sum+=b->rt->val;\n\t\t\tflag[(b++)->col]=1;\n\t\t}\n\t\tif(shoal) continue;\n\t\tans=max(ans,sum);\n\t\tif(b==t) break;\n\t\twhile(flag[b->col]){\n\t\t\tflag[a->col]=0;\n\t\t\tsum-=(a++)->rt->rval;\n\t\t}\n\t\tif(a==b){\n\t\t\tflag[a->col]=1;\n\t\t\tans=max(ans,a->rt->maxv);\n\t\t\tsum=a->rt->rval;++b;\n\t\t}\n\t}\n\twhile(a->r<t->l) flag[(a++)->col]=0;\n\treturn ans;\n}\n\nTreapair Split(Treap* x,int key){\n\tif(x==Null) return Treapair(Null,Null);\n\tTreapair y;\n\tif(x->lch->size>=key){\n\t\ty=Split(x->lch,key);\n\t\tx->lch=y.second;\n\t\tx->Pushup();\n\t\ty.second=x;\n\t}else{\n\t\ty=Split(x->rch,key-x->lch->size-1);\n\t\tx->rch=y.first;\n\t\tx->Pushup();\n\t\ty.first=x;\n\t}\n\treturn y;\n}\n\nTreap* Merge(Treap* x,Treap* y){\n\tif(x==Null) return y;\n\tif(y==Null) return x;\n\tif(rand()%(x->size+y->size)<x->size){\n\t\tx->rch=Merge(x->rch,y);\n\t\tx->Pushup();\n\t\treturn x;\n\t}else{\n\t\ty->lch=Merge(x,y->lch);\n\t\ty->Pushup();\n\t\treturn y;\n\t}\n}\n\nvoid Modify(Treap* x,int pos,int key){\n\tif(x->pos==pos){\n\t\tx->sum-=x->val;\n\t\tx->val=key;\n\t\tx->sum+=key;\n\t\tx->Pushup();\n\t\treturn;\n\t}\n\tif(pos<x->pos) Modify(x->lch,pos,key);\n\telse Modify(x->rch,pos,key);\n\tx->Pushup();\n}\n\nTreap::Treap(){\n\tReset();\n}\n\ninline void Treap::Reset(){\n\tval=sum=size=pos=0;\n\tmaxv=lval=rval=0;\n\tlch=rch=Null;\n}\n\ninline void Treap::Set(int key,int p){\n\tval=sum=maxv=key;\n\tlval=rval=key;\n\tsize=1;pos=p;\n}\n\ninline void Treap::Pushup(){\n\tsize=lch->size+rch->size+1;\n\tsum=lch->sum+rch->sum+val;\n\tmaxv=max(lch->maxv,rch->maxv);\n\tmaxv=max(maxv,val);\n\tlval=(lch==Null)?val:lch->lval;\n\trval=(rch==Null)?val:rch->rval;\n}\n\ninline void Read_int(int& x){\n\tregister char ch;\n\twhile(ch=getchar(),ch<'0');\n\tx=ch-'0';\n\twhile(ch=getchar(),ch>='0') x=((x+(x<<2))<<1)+ch-'0';\n}\n```",
        "postTime": 1552307578,
        "uid": 89309,
        "name": "\u2721Dustaria\u2721",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5251 \u3010[LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a\u3011"
    },
    {
        "content": "_\u63a8\u9500\u535a\u5ba2\uff1ahttps://www.cnblogs.com/syc233/p/13673494.html_\n\n---\n\n\u73c2\u6735\u8389\u6811+\u5c3a\u53d6\u6cd5+\u7ebf\u6bb5\u6811\u3002\n\n---\n\n\u5927\u4f53\u601d\u8def\u662f\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u989c\u8272\u6bb5\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u3001\u533a\u95f4\u6700\u503c\uff0c3\u30014\u64cd\u4f5c\u5728\u73c2\u6735\u8389\u6811\u4e0a\u505a\u5c3a\u53d6\u6cd5\u3002\n\n\u4e3b\u8981\u8bf4\u4e00\u4e0b\u5c3a\u53d6\u6cd5\u7684\u7ec6\u8282\uff1a\n\n#### \u64cd\u4f5c3\n\n\u8be2\u95ee\u533a\u95f4 $[l,r]$ \u4e2d\u5305\u542b\u6240\u6709(\u4e00\u5171 $c$ \u79cd)\u989c\u8272\uff0c\u6570\u5b57\u548c\u6700\u5c0f\u7684\u5b50\u533a\u95f4\u7684\u6570\u5b57\u548c\u3002\n\n\u5148\u5c06\u8be2\u95ee\u533a\u95f4\u5728\u73c2\u6735\u8389\u6811\u4e0a\u53d6\u51fa\u6765\uff0c\u56fa\u5b9a\u533a\u95f4\u5de6\u7aef\u70b9\uff0c\u79fb\u52a8\u53f3\u7aef\u70b9\uff0c\u7528\u6876\u7ef4\u62a4\u533a\u95f4\u5185\u6bcf\u79cd\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\u548c\u533a\u95f4\u989c\u8272\u603b\u6570\u3002\n\n\u5f53\u533a\u95f4\u5305\u542b\u6240\u6709\u989c\u8272\u65f6\u505c\u6b62\u79fb\u52a8\u53f3\u7aef\u70b9\uff0c\u5373\u7b97\u51fa\u5305\u542b\u6240\u6709\u989c\u8272\u7684\u6700\u77ed\u533a\u95f4\u3002\u5bf9\u4e8e\u5de6\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n* \u82e5\u5de6\u53f3\u7aef\u70b9\u540c\u5c5e\u4e00\u4e2a\u5757\uff0c\u5373 $c=1$ \uff0c\u56e0\u4e3a\u8981\u6c42\u6700\u5c0f\u6570\u5b57\u548c\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u53d6\u5757\u5185\u6700\u5c0f\u503c\u5373\u53ef\u3002\n* \u5426\u5219\uff0c\u4ee4\u5de6\u7aef\u70b9\u5728\u5757 $[l1,r1]$ \u4e2d\uff0c\u53f3\u7aef\u70b9\u5728 $[l2,r2]$ \u4e2d\uff0c\u5219\u53d6\u533a\u95f4 $[r1,l2]$ \u3002\n\n```cpp\ninline int query1(int l,int r)\n{\n\tIT itr=split(r+1),itl=split(l);\n\tmemset(sta,0,sizeof(sta));cnt=0;\n\tint ans=INF;\n\tfor(IT l=itl,r=itl;l!=itr;++l)\n\t{\n\t\twhile(r!=itr&&cnt!=c)\n\t\t\tAdd(r->val,r->r-r->l+1),++r;\n\t\t--r;\n\t\tif(cnt==c)\n\t\t{\n\t\t\tif(l==r) ans=min(ans,st.query_min(1,l->l,l->r));\n\t\t\telse ans=min(ans,st.query_sum(1,l->r,r->l));\n\t\t}\n\t\t++r;\n\t\tDel(l->val,l->r-l->l+1);\n\t}\n\treturn ans==INF?-1:ans;\n}\n```\n\n#### \u64cd\u4f5c4\n\n\u8868\u793a\u8be2\u95ee\u533a\u95f4 $[l,r]$ \u4e2d\u6ca1\u6709\u91cd\u590d\u989c\u8272\uff0c\u6570\u5b57\u548c\u6700\u5927\u7684\u5b50\u533a\u95f4\u7684\u6570\u5b57\u548c\u3002\n\n\u9996\u5148\u53ea\u53d6\u4e00\u4e2a\u6570\u663e\u7136\u662f\u53ef\u884c\u7684\uff0c\u90a3\u4e48 $ans$ \u7684\u521d\u503c\u5373\u4e3a\u533a\u95f4\u6700\u5927\u503c\u3002\n\n\u7136\u540e\u7c7b\u4f3c\u64cd\u4f5c3\uff0c\u5c06\u533a\u95f4\u4ece\u73c2\u6735\u8389\u6811\u4e0a\u53d6\u51fa\u6765\uff0c\u505a\u5c3a\u53d6\u6cd5\u3002\n\n\u56e0\u4e3a\u53ea\u53d6\u4e00\u4e2a\u6570\u7684\u60c5\u51b5\u5df2\u7ecf\u5904\u7406\uff0c\u6240\u4ee5\u5c3a\u53d6\u65f6\u5de6\u53f3\u7aef\u70b9\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u5757\u4e2d\u3002\u8981\u4fdd\u8bc1\u533a\u95f4\u4e2d\u6ca1\u6709\u91cd\u590d\u989c\u8272\uff0c\u90a3\u4e48\u6bcf\u6b21\u6269\u5c55\u53f3\u7aef\u70b9\u65f6\u53ea\u80fd\u52a0\u5165\u5927\u5c0f\u7b49\u4e8e $1$ \u7684\u5757 \u3002\u7136\u800c\u5408\u6cd5\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u662f\u53ef\u80fd\u5728\u4e00\u4e2a\u5927\u5c0f\u5927\u4e8e $1$ \u7684\u5757\u4e2d\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53ea\u53d6\u8fd9\u4e2a\u5757\u7684\u7b2c\u4e00\u4e2a\u6570\uff0c\u5728\u6bcf\u6b21\u6269\u5c55\u5b8c\u540e\u4e34\u65f6\u52a0\u5165\u8fd9\u79cd\u5757\u5373\u53ef\u3002\n\n```cpp\ninline int query2(int l,int r)\n{\n\tIT itr=split(r+1),itl=split(l);\n\tmemset(sta,0,sizeof(sta));cnt=0;\n\tint ans=st.query_max(1,l,r);\n\tfor(IT l=itl,r=itl;l!=itr;++l)\n\t{\n\t\tif(l==r)\n\t\t\tAdd(r->val,1),++r;\n\t\twhile(r!=itr&&!sta[r->val]&&r->r-r->l+1==1)\n\t\t\tAdd(r->val,1),++r;\n\t\tbool flag=false;\n\t\tif(r!=itr&&!sta[r->val])\n\t\t\tAdd(r->val,1),++r,flag=true;\n\t\t--r;\n\t\tif(l!=r) ans=max(ans,st.query_sum(1,l->r,r->l));\n\t\tDel(l->val,1);\n\t\tif(flag)\n\t\t\tDel(r->val,1),--r;// \u5c06\u4e34\u65f6\u52a0\u5165\u7684\u5757\u5220\u9664\n\t\t++r;\n\t}\n\treturn ans;\n}\n```\n\n---\n\n\u5b8c\u6574\u4ee3\u7801\u5c31\u6ca1\u5fc5\u8981\u653e\u4e0a\u6765\u4e86\u5427\uff0c\u76f8\u4fe1\u6765\u505a\u8fd9\u9053\u9898\u7684\u4eba\u90fd\u4f1a\u73c2\u6735\u8389\u6811\u548c\u7ebf\u6bb5\u6811\u3002",
        "postTime": 1600155870,
        "uid": 224236,
        "name": "GoPoux4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5251 \u3010[LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a\u3011"
    },
    {
        "content": "1. \u64cd\u4f5c $1$ \u663e\u7136\u6811\u72b6\u6570\u7ec4\u3002\n\n1. \u64cd\u4f5c $2$ \u663e\u7136\u76f4\u63a5 ```assign``` \u3002\n\n1. \u64cd\u4f5c $3$ \u53cc\u6307\u9488\uff0c\u7c7b\u4f3c[P1638 \u901b\u753b\u5c55](https://www.luogu.com.cn/problem/P1638)\uff0c\u5411\u53f3\u632a\u52a8\u53f3\u6307\u9488\uff0c\u5e76\u4e14\u5728\u6ee1\u8db3\u6709\u6240\u6709\u989c\u8272\u7684\u60c5\u51b5\u4e0b\u5411\u53f3\u632a\u52a8\u5de6\u6307\u9488\uff0c\u6700\u540e\u7b54\u6848\u65e2\u662f\u6700\u5c0f\u7684 ```query(l->r, r->l)``` \u3002\n\n1. \u64cd\u4f5c $4$ \u7ef4\u62a4 $sum$ \u4e3a $[l,r]$ \u533a\u95f4\u957f\u5ea6\u5927\u4e8e $2$ \u7684\u5757\u6570\u91cf\uff0c\u56e0\u4e3a\u5de6\u53f3\u90fd\u662f\u53d6\u4e00\u4e2a\uff0c\u6240\u4ee5\u5728 $sum$ \u51cf\u53bb\u5de6\u53f3\u6307\u9488\u4ecd\u7136\u5927\u4e8e $0$ \u7684\u60c5\u51b5\u4e0b\u632a\u52a8\u5de6\u6307\u9488\uff0c\u6700\u540e\u7b54\u6848\u65e2\u662f\u6700\u5927\u7684 ```query(l->r, r->l)``` \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c $ans$ \u7684\u521d\u503c\u9700\u8d4b\u503c\u4e3a\u533a\u95f4\u6700\u5927\u7684\uff0c\u907f\u514d\u6f0f\u7edf\u8ba1 $l=r$ \u6700\u5927\u7684\u60c5\u51b5\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e6 + 5, C = 205;\nint a[N], n, q, c, opt, l, r, x;\nstruct BIT {\n\tint c[N];\n\tint lowbit(int x) {\n\t\treturn x & (-x);\n\t}\n\tvoid updata(int x, int v) {\n\t\tint k = v - a[x]; a[x] = v;\n\t\tfor (int i = x; i <= n; i += lowbit(i))\n\t\t\tc[i] += k;\n\t}\n\tll query(int x) {\n\t\tll ans = 0;\n\t\tfor (int i = x; i; i -= lowbit(i))\n\t\t\tans += c[i];\n\t\treturn ans;\n\t}\n} tree;\nll max(ll x, ll y) {\n\treturn x > y ? x : y;\n}\nll query(int l, int r) {\n\treturn tree.query(r) - tree.query(l - 1);\n}\nstruct node {\n\tint l, r;\n\tmutable int v;\n\tnode(int L, int R = -1, int V = 0): l(L), r(R), v(V) {}\n\tbool operator<(const node& o) const {\n\t\treturn l < o.l;\n\t}\n\tint size() const {\n\t\treturn r - l + 1;\n\t}\n};\ntypedef set<node>::iterator IT;\nset<node> s;\ninline int read(){\n\tint x; char ch;\n\twhile(ch = getchar(), ch < '!'); x = ch - 48;\n\twhile(ch = getchar(), ch > '!') x = (x << 3) + (x << 1) + ch - 48;\n\treturn x;\n}\ninline void write(int x) {\n    if (x == -1) return (void)(putchar('-'), putchar('1'));\n\tint sta[35], top = 0;\n\tdo sta[top ++] = x % 10, x /= 10; while(x);\n\twhile(top) putchar(sta[-- top] + 48);\n}\nIT split (int pos) {\n    IT it = s.lower_bound(node(pos));\n    if(it != s.end() && it->l == pos) return it;\n    it--;\n    int L = it -> l, R = it -> r;\n    int V = it->v;\n    s.erase(it);\n    s.insert(node(L, pos-1, V));\n    return s.insert(node(pos, R, V)).first;\n}\nbool check(IT itl, IT itr) {\n\tif (itl == itr) return true;\n\t++ itl;\n\tfor (IT i = itl; i != itr; ++i)\n\t\tif (i->size() > 1) return false;\n\treturn true;\n}\nvoid assign(int l, int r, int val = 0) {\n    IT itr = split(r + 1), itl = split(l);\n    s.erase(itl, itr);\n    s.insert(node(l, r, val));\n}\nll tow_pointers1(int kl, int kr) {\n\tll ans = INT_MAX, cnt[C] = {0}, sum = 0;\n\tIT itr = split(kr + 1), itl = split(kl);\n\tfor (IT l = itl, r = itl; r != itr; ++ r) {\n\t\tif (!cnt[r->v]) sum ++;\n\t\tcnt[r->v] ++;\n\t\twhile (cnt[l->v] > 1)\n\t\t\tcnt[(l ++)->v] --;\n\t\tif (sum == c) ans = min(ans, l == r ? *min_element(a + l->l, a + r->r + 1) : query(l->r, r->l));\n\t}\n\treturn ans == INT_MAX ? -1 : ans;\n}\nll tow_pointers2(int kl, int kr) {\n    ll ans = *max_element(a + kl, a + kr + 1), cnt[C] = {0}, sum = 0;\n    IT itr = split(kr + 1), itl = split(kl);\n    for (IT l = itl, r = itl; r != itr; ++ r) {\n        if (r->size() > 1) sum ++;\n    \tcnt[r->v] ++;\n\t\twhile ((sum - (l->size() > 1) - (r->size() > 1)) > 0 || cnt[r->v] > 1) {\n\t\t\tIT it = l; cnt[(l ++)->v] --, sum -= (it->size() > 1);\n\t\t}\n    \tans = max(ans, query(l->r, r->l));\n    }\n    return ans;\n}\nsigned main() {\n\tcin >> n >> q >> c, s.insert(node(0, 0, -1));\n\tfor (int i = 1; i <= n; i ++)\n\t\ttree.updata(i, read());\n\tfor (int i = 1; i <= n; i ++)\n\t\ts.insert(node(i, i, read()));\n\tfor (int i = 1; i <= q; i ++) {\n\t\topt = read(), l = read(), r = read();\n\t\tif (opt == 1) tree.updata(l, r);\n\t\tif (opt == 2) assign(l, r, read());\n\t\tif (opt == 3) write(tow_pointers1(l, r)), putchar('\\n');\n\t\tif (opt == 4) write(tow_pointers2(l, r)), putchar('\\n');\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1656509449,
        "uid": 560516,
        "name": "\u55b5\u4ed4\u725b\u5976",
        "ccfLevel": 0,
        "title": "P5251 [LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a\u9898\u89e3"
    },
    {
        "content": "[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/chenxiaoran666/p/Luogu5251.html)\n\n**\u5927\u81f4\u9898\u610f\uff1a** \u6709\u5355\u70b9\u4fee\u6539\u6570\u5b57\u548c\u533a\u95f4\u7740\u8272\u4e24\u79cd\u4fee\u6539\u64cd\u4f5c\uff0c\u8be2\u95ee\u4f60\u67d0\u6bb5\u533a\u95f4\u5185\u5305\u542b\u6240\u6709\u989c\u8272\u4e14\u6570\u5b57\u548c\u6700\u5c0f\u7684\u5b50\u533a\u95f4\u7684\u6570\u5b57\u548c\uff0c\u6216\u67d0\u6bb5\u533a\u95f4\u5185\u6ca1\u6709\u91cd\u590d\u989c\u8272\u4e14\u6570\u5b57\u548c\u6700\u5927\u7684\u5b50\u533a\u95f4\u7684\u6570\u5b57\u548c\u3002\u6570\u636e\u968f\u673a\u3002\n\n### $ODT$\u7ef4\u62a4\u989c\u8272\n\n\u770b\u5230\u533a\u95f4\u7740\u8272\u4e14\u9898\u76ee\u4e2d\u5f3a\u8c03\u6570\u636e\u968f\u673a\uff0c\u5bb9\u6613\u60f3\u5230\u4f7f\u7528[$ODT$](https://www.cnblogs.com/chenxiaoran666/p/ODT.html)\u53bb\u6c42\u89e3\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u7528$ODT$\u6765\u5bf9\u989c\u8272\u8fdb\u884c\u7ef4\u62a4\u3002\n\n### \u7ebf\u6bb5\u6811\u7ef4\u62a4\u6570\u5b57\u548c\n\n\u4f46\u662f\u8003\u8651\u5230\u8981\u6c42\u533a\u95f4\u6570\u5b57\u548c\uff0c$ODT$\u5c31\u5f88\u96be\u641e\u4e86\u3002\n\n\u8003\u8651\u5230\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u533a\u95f4\u518d\u8be2\u95ee\u6570\u5b57\u548c\u66f4\u65b0\u7b54\u6848\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u628a\u7ef4\u62a4\u989c\u8272\u548c\u7ef4\u62a4\u6570\u5b57\u548c\u5206\u5f00\u3002\n\n\u90a3\u7ef4\u62a4\u6570\u5b57\u548c\u81ea\u7136\u53ef\u4ee5\u7528**\u7ebf\u6bb5\u6811**\u55bd\u3002\n\n\u5176\u5b9e\u672c\u6765\u7528\u6811\u72b6\u6570\u7ec4\u4f3c\u4e4e\u66f4\u4f18\uff0c\u4f46\u8fd9\u9898\u7531\u4e8e\u5199\u6cd5\u95ee\u9898\u53ef\u80fd\u8fd8\u4f1a\u9700\u8981\u6c42\u533a\u95f4$Min$\u6216$Max$\uff0c\u6811\u72b6\u6570\u7ec4\u641e\u8d77\u6765\u5c31\u5f88\u5403\u529b\u4e86\u3002\n\n### \u5904\u7406\u8be2\u95ee\n\n\u4ee5\u4e0a\u5927\u81f4\u4ecb\u7ecd\u4e86\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6570\u5b57\u548c\uff0c$ODT$\u7ef4\u62a4\u989c\u8272\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u518d\u5177\u4f53\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u53bb\u5904\u7406\u8be2\u95ee\u3002\n\n\u8003\u8651\u5230\u8fd9\u4e24\u79cd\u8be2\u95ee\u5b9e\u9645\u4e0a\u90fd\u5177\u6709\u5355\u8c03\u6027\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u7528**\u53cc\u6307\u9488**\u641e\u3002\n\n\u6211\u4eec\u679a\u4e3e\u53f3\u7aef\u70b9\uff0c\u7136\u540e\u79fb\u52a8\u5de6\u7aef\u70b9\u3002\n\n- \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u8be2\u95ee\uff0c\u6211\u4eec\u9700\u8981\u5728\u4fdd\u8bc1**\u989c\u8272\u6570\u91cf\u7b49\u4e8e$c$**\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u79fb\u52a8\u5de6\u7aef\u70b9\uff0c\u7136\u540e\u5728**\u79fb\u52a8\u7684\u540c\u65f6**\u66f4\u65b0\u7b54\u6848\uff08\u4e0d\u7136\u7edf\u8ba1\u7b54\u6848\u7684\u8fc7\u7a0b\u4f1a\u7565\u663e\u9ebb\u70e6\uff09\u3002\n\n  \u800c$c=1$\u7684\u60c5\u51b5\u53ef\u80fd\u8981\u7279\u5224\uff0c\u76f4\u63a5\u8f93\u51fa\u8fd9\u6bb5\u533a\u95f4\u7684\u6700\u5c0f\u503c\u3002\n\n- \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u8be2\u95ee\uff0c\u6211\u4eec\u53ea\u9700\u5728\u51fa\u73b0\u4e0d\u5408\u6cd5\u60c5\u51b5\uff0c\u5373\u51fa\u73b0\u91cd\u590d\u989c\u8272\u65f6\u79fb\u52a8\u5de6\u7aef\u70b9\u3002\u8003\u8651\u6211\u4eec\u6b64\u65f6\u521a\u628a\u53f3\u7aef\u70b9\u7684\u989c\u8272\u52a0\u5165\uff0c\u82e5\u51fa\u73b0\u91cd\u590d\u989c\u8272\uff0c\u5fc5\u7136\u662f\u7531\u53f3\u7aef\u70b9\u5bfc\u81f4\u7684\uff0c\u56e0\u6b64\u4e0d\u65ad\u79fb\u52a8\u5de6\u7aef\u70b9\u76f4\u81f3\u53f3\u7aef\u70b9\u6240\u5c5e\u989c\u8272\u51fa\u73b0\u6b21\u6570\u4e3a$1$\u5373\u53ef\u3002\n\n  \u4f46\u6ce8\u610f\uff0c\u5728\u5904\u7406\u7b2c\u4e8c\u79cd\u8be2\u95ee\u65f6\uff0c\u4e00\u65e6\u51fa\u73b0\u53f3\u7aef\u70b9$Size>1$\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5728\u7edf\u8ba1\u5b8c\u5176\u7b54\u6848\u540e\uff0c\u9700\u5c06\u5de6\u7aef\u70b9\u79fb\u52a8\u5230\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\u4e0a\uff0c\u4e0d\u7136\u5c31\u4f1a\u51fa\u73b0\u91cd\u590d\u989c\u8272\u3002\n\n  \u540c\u7406\uff0c\u5728\u7edf\u8ba1\u7b2c\u4e8c\u79cd\u8be2\u95ee\u7684\u7b54\u6848\u65f6\uff0c\u8981\u6c42**\u5de6\u7aef\u70b9\u7684\u53f3\u8fb9\u754c**\u4e0e**\u53f3\u7aef\u70b9\u7684\u5de6\u8fb9\u754c**\u4e4b\u95f4\u7684\u533a\u95f4\u548c\uff0c\u4e0d\u7136\u540c\u6837\u4f1a\u51fa\u73b0\u91cd\u590d\u989c\u8272\u3002\n\n  \u800c\u4e14\uff0c\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u65f6\u5bb9\u6613\u6f0f\u8003\u8651\u5355\u4e2a\u989c\u8272\u7684\u8d21\u732e\uff0c\u56e0\u6b64\u8981\u521d\u59cb\u5316$res$\u4e3a\u6574\u6bb5\u533a\u95f4\u7684$Max$\u3002\n\n\u5927\u81f4\u5c31\u662f\u8fd9\u4e9b\u5427\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define Reg register\n#define RI Reg int\n#define Con const\n#define CI Con int&\n#define I inline\n#define W while\n#define N 100000\n#define INF 1e9\n#define Gmax(x,y) (x<(y)&&(x=(y)))\n#define Gmin(x,y) (x>(y)&&(x=(y)))\nusing namespace std;\nint n,c,a[N+5];\nclass FastIO\n{\n    private:\n        #define FS 100000\n        #define tc() (A==B&&(B=(A=FI)+fread(FI,1,FS,stdin),A==B)?EOF:*A++)\n        #define pc(c) (C^FS?FO[C++]=c:(fwrite(FO,1,C,stdout),FO[(C=0)++]=c))\n        #define tn (x<<3)+(x<<1)\n        #define D isdigit(c=tc())\n        int T,C;char c,*A,*B,FI[FS],FO[FS],S[FS];\n    public:\n        I FastIO() {A=B=FI;}\n        Tp I void read(Ty& x) {x=0;W(!D);W(x=tn+(c&15),D);} \n        Tp I void write(Ty x) {x<0&&(pc('-'),x=-x);W(S[++T]=x%10+48,x/=10);W(T) pc(S[T--]);}\n        Ts I void read(Ty& x,Ar&... y) {read(x),read(y...);}\n        Tp I void writeln(Con Ty& x) {write(x),pc('\\n');}\n        I void clear() {fwrite(FO,1,C,stdout),C=0;}\n}F;\nclass SegmentTree//\u7ebf\u6bb5\u6811\n{\n    private:\n        #define STO l,hl,rt<<1\n        #define ORZ hl+1,r,rt<<1|1\n        #define PU(x) (O[x]=O[x<<1]+O[x<<1|1])\n        int n,v[N+5];\n        struct Interval//\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\n        {\n            int S,Mx,Mn;I Interval(CI s=0,CI mx=-INF,CI mn=INF):S(s),Mx(mx),Mn(mn){}\n            I Interval operator + (Con Interval& t) Con {return Interval(S+t.S,max(Mx,t.Mx),min(Mn,t.Mn));}\n        }O[N<<2];\n        I void Build(CI l,CI r,CI rt)//\u5efa\u6811\n        {\n            if(!(l^r)) return (void)(O[rt]=Interval(v[l],v[l],v[l]));\n            RI hl=l+r>>1;Build(STO),Build(ORZ),PU(rt);\n        }\n        I int qsu(CI l,CI r,CI rt,CI ql,CI qr)//\u8be2\u95ee\u533a\u95f4\u548c\n        {\n            if(ql<=l&&r<=qr) return O[rt].S;RI hl=l+r>>1;\n            return (ql<=hl?qsu(STO,ql,qr):0)+(qr>hl?qsu(ORZ,ql,qr):0);\n        }\n        I int qmx(CI l,CI r,CI rt,CI ql,CI qr)//\u8be2\u95ee\u533a\u95f4\u6700\u5927\u503c\n        {\n            if(ql<=l&&r<=qr) return O[rt].Mx;RI hl=l+r>>1,t,res=-INF;\n            return ql<=hl&&(t=qmx(STO,ql,qr),Gmax(res,t)),qr>hl&&(t=qmx(ORZ,ql,qr),Gmax(res,t)),res;\n        }\n        I int qmn(CI l,CI r,CI rt,CI ql,CI qr)//\u8be2\u95ee\u533a\u95f4\u6700\u5c0f\u503c\n        {\n            if(ql<=l&&r<=qr) return O[rt].Mn;RI hl=l+r>>1,t,res=INF;\n            return ql<=hl&&(t=qmn(STO,ql,qr),Gmin(res,t)),qr>hl&&(t=qmn(ORZ,ql,qr),Gmin(res,t)),res;\n        }\n    public:\n        I void Init(CI x,int* s) {for(RI i=1;i<=x;++i) v[i]=s[i];Build(1,n=x,1);}\n        I void Update(CI x,CI y)//\u5355\u70b9\u4fee\u6539\uff08\u8fd9\u91cc\u4f7f\u7528\u975e\u9012\u5f52\u5199\u6cd5\uff09\n        {\n            RI l=1,r=n,rt=1,hl;W(l^r) hl=l+r>>1,x<=hl?(r=hl,rt<<=1):(l=hl+1,(rt<<=1)|=1);\n            O[rt]=Interval(y,y,y);W(rt>>=1) PU(rt);\n        }\n        I int QSum(CI x,CI y) {return qsu(1,n,1,x,y);}\n        I int QMax(CI x,CI y) {return qmx(1,n,1,x,y);}\n        I int QMin(CI x,CI y) {return qmn(1,n,1,x,y);}\n}T;\nclass ODT\n{\n    private:\n        #define IT set<Il>::iterator\n        #define ins insert\n        #define era erase\n        #define fir first\n        #define LB lower_bound\n        #define add(x) (!cnt[x]++&&++tot)\n        #define del(x) (!--cnt[x]&&--tot)\n        int cnt[N+5];\n        struct Il//\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\n        {\n            int l,r,v;I Il(CI x=0,CI y=0,CI p=0):l(x),r(y),v(p){}\n            I bool operator < (Con Il& t) Con {return l<t.l;}\n        };set<Il> S;\n        I IT Sp(CI x)//\u5206\u88c2\u64cd\u4f5c\n        {\n            IT t;if((t=S.LB(Il(x)))!=S.end()&&!(t->l^x)) return t;\n            RI l=(--t)->l,r=t->r,v=t->v;S.era(t),S.ins(Il(l,x-1,v));\n            return S.ins(Il(x,r,v)).fir;\n        }\n    public:\n        I void Init(CI x,int* s)//\u521d\u59cb\u5316\u8282\u70b9\u4fe1\u606f \n        {\n            for(RI i=(s[0]=s[x+1]=-1,1),t=0;i<=x+2;++i) \n                s[i]^s[i-1]&&(S.insert(Il(t,i-1,s[i-1])),t=i);\n        }\n        I void Assign(CI x,CI y,CI v)//\u63a8\u5e73\u64cd\u4f5c\n        {\n            IT tr=Sp(y+1),tl=Sp(x);S.era(tl,tr),S.ins(Il(x,y,v));\n        }\n        I int Q1(CI x,CI y)//\u5904\u7406\u7b2c\u4e00\u79cd\u8be2\u95ee\n        {\n            if(!(c^1)) return T.QMin(x,y);//\u7279\u5224c=1\n            memset(cnt,0,sizeof(cnt));IT tr=Sp(y+1),tl=Sp(x),ti=tl;RI t,res=INF,tot=0;//\u521d\u59cb\u5316\n            W(ti!=tr) {add(ti->v);W(!(tot^c)) t=T.QSum(tl->r,ti->l),Gmin(res,t),del((tl++)->v);++ti;}//\u79fb\u52a8\u53f3\u7aef\u70b9\uff0c\u5728\u4fdd\u8bc1\u989c\u8272\u6570\u91cf\u7b49\u4e8ec\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u79fb\u52a8\u5de6\u7aef\u70b9\uff0c\u7136\u540e\u5728\u79fb\u52a8\u7684\u540c\u65f6\u66f4\u65b0\u7b54\u6848\n            return res==INF?-1:res;//\u5224\u65ad\u662f\u5426\u65e0\u89e3\uff0c\u65e0\u89e3\u8fd4\u56de-1\n        }\n        I int Q2(CI x,CI y)//\u5904\u7406\u7b2c\u4e8c\u79cd\u8be2\u95ee\n        {\n            memset(cnt,0,sizeof(cnt));IT tr=Sp(y+1),tl=Sp(x),ti=tl;RI t,res=T.QMax(x,y);//\u521d\u59cb\u5316\n            W(ti!=tr)\n            {\n                ++cnt[ti->v];W(ti!=tl&&cnt[ti->v]>1) --cnt[(tl++)->v];//\u4e0d\u65ad\u79fb\u52a8\u5de6\u7aef\u70b9\u76f4\u81f3\u53f3\u7aef\u70b9\u6240\u5c5e\u989c\u8272\u51fa\u73b0\u6b21\u6570\u4e3a1\n                ti!=tl&&(t=T.QSum(tl->r,ti->l),Gmax(res,t));//\u66f4\u65b0\u7b54\u6848\n                if(ti->l^ti->r) W(ti!=tl) --cnt[(tl++)->v];++ti;//\u5f53\u51fa\u73b0\u53f3\u7aef\u70b9Size>1\u7684\u60c5\u51b5\uff0c\u5c06\u5de6\u7aef\u70b9\u79fb\u52a8\u5230\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\u4e0a\n            }return res;//\u8fd4\u56de\u7b54\u6848\n        }\n}O;\nint main()\n{\n    RI Qtot,i,op,x,y,z;for(F.read(n,Qtot,c),i=1;i<=n;++i) F.read(a[i]);T.Init(n,a);//\u8bfb\u5165\u6570\u636e\n    for(i=1;i<=n;++i) F.read(a[i]);O.Init(n,a);W(Qtot--)\n    {\n        switch(F.read(op,x,y),op)//\u5904\u7406\u64cd\u4f5c\n        {\n            case 1:T.Update(x,y);break;case 2:F.read(z),O.Assign(x,y,z);break;\n            case 3:F.writeln(O.Q1(x,y));break;case 4:F.writeln(O.Q2(x,y));break;\n        }\n    }return F.clear(),0;\n}\n```",
        "postTime": 1553005098,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5251 \u3010[LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a\u3011"
    },
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/mfeitveer/p/15960000.html)\n\n\u5f88\u677f\u5b50\u7684\u4e00\u9053\u9898\u3002\n\n### \u601d\u8def\n\n\u7531\u4e8e\u64cd\u4f5c\u4e2d\u6709\u5173\u4e8e\u989c\u8272\u6bb5\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u53c8\u4fdd\u8bc1\u4e86\u6570\u636e\u968f\u673a\uff0c\u6240\u4ee5\u7acb\u9a6c\u5c31\u53ef\u4ee5\u60f3\u5230 $\\text{ODT}$ \uff0c\u53c8\u7531\u4e8e\u9700\u8981\u5355\u70b9\u4fee\u6539\u6743\u503c\uff0c\u5e76\u67e5\u8be2\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u6743\u503c\u548c\uff0c\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230\u518d\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u3002\n\n\u662f\u4e0d\u662f\u5341\u5206\u7684~~\u7b80\u5355~~\u3002\n\n### \u5b9e\u73b0\u7ec6\u8282\n\n\u8fd9\u91cc\u8bb2\u4e00\u8bb2\u4e00\u4e9b\u5b9e\u73b0\u7684\u7ec6\u8282\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e09\u4e2a\u548c\u7b2c\u56db\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u7531\u4e8e\u989c\u8272\u79cd\u7c7b\u4e0d\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u4e00\u4e2a\u6876\u5c06\u6240\u6709\u7684\u989c\u8272\u79cd\u6570\u5b58\u4e0b\u6765\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u53bb\u7ef4\u62a4\u4e86\u3002\n\n\u5f53\u7136\uff0c\u8fd9\u91cc\u8bb2\u4e00\u4e2a\u4f18\u5316\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6876\u5728\u521d\u59cb\u5168\u90e8\u8d4b\u503c\u4e3a\u96f6\u65f6\uff0c\u5e76\u4e0d\u9700\u8981\u5b8c\u5168\u628a\u6574\u4e2a\u6876\u5168\u90e8\u521d\u59cb\u5316\u3002\n\n\u53ea\u9700\u8981\u989c\u8272\u79cd\u6570\u591a\u4e00\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u638c\u63e1\u4e86\u8fd9\u4e2a\u4f18\u5316\uff0c\u8f7b\u677e\u62ff\u5230 $\\text{rk1}$\uff082022.3.5\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n \\log n^2)$\u3002\n\n\u5b9e\u9645\u8dd1\u5f97\u98de\u5feb\uff0c\u53ea\u8dd1\u4e86 $933ms$\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 100010;\n\nint n , m , c , a[N] , b[N] , vis[N];\n\nstruct ODT\n{\n    int l , r;\n    mutable int v;\n    inline bool operator<(const ODT &tmp) const\n    {\n        return l < tmp.l;\n    }\n};\n\nset<ODT> odt;\n\nstruct ST\n{\n    int l , r , val , mx , mi;\n}t[N * 4];\n\ninline int read()\n{\n    int asd = 0 , qwe = 1; char zxc;\n    while(!isdigit(zxc = getchar())) if(zxc == '-') qwe = -1;\n    while(isdigit(zxc)) asd = asd * 10 + zxc - '0' , zxc = getchar();\n    return asd * qwe;\n}\n\ninline void push_up(int p)\n{\n    t[p].val = t[p * 2].val + t[p * 2 + 1].val;\n    t[p].mx = min(t[p * 2].mx , t[p * 2 + 1].mx);\n    t[p].mi = max(t[p * 2].mi , t[p * 2 + 1].mi);\n}\n\ninline void build(int p , int l , int r)\n{\n    t[p].l = l , t[p].r = r;\n    if(l == r) { t[p].val = t[p].mx = t[p].mi = a[l]; return; }\n    build(p * 2 , l , (l + r) / 2);\n    build(p * 2 + 1 , (l + r) / 2 + 1 , r);\n    push_up(p);\n}\n\ninline void update(int p , int k)\n{\n    if(t[p].l == t[p].r) { t[p].val = t[p].mx = t[p].mi = a[k]; return; }\n    if((t[p].l + t[p].r) / 2 >= k) update(p * 2 , k);\n    else update(p * 2 + 1 , k); push_up(p);\n}\n\ninline int ask1(int p , int l , int r)\n{\n    if(l <= t[p].l && t[p].r <= r) return t[p].val;\n    int ans = 0 , mid = (t[p].l + t[p].r) / 2;\n    if(l <= mid) ans += ask1(p * 2 , l , r); \n    if(r > mid) ans += ask1(p * 2 + 1 , l , r);\n    return ans;\n}\n\ninline int ask2(int p , int l , int r)\n{\n    if(l <= t[p].l && t[p].r <= r) return t[p].mx;\n    int ans = 1e9 , mid = (t[p].l + t[p].r) / 2;\n    if(l <= mid) ans = min(ans , ask2(p * 2 , l , r));\n    if(r > mid) ans = min(ans , ask2(p * 2 + 1 , l , r));\n    return ans;\n}\n\ninline int ask3(int p , int l , int r)\n{\n    if(l <= t[p].l && t[p].r <= r) return t[p].mi;\n    int ans = 0 , mid = (t[p].l + t[p].r) / 2;\n    if(l <= mid) ans = max(ans , ask3(p * 2 , l , r));\n    if(r > mid) ans = max(ans , ask3(p * 2 + 1 , l , r));\n    return ans;\n}\n\ninline auto split(int p)\n{\n    if(p > n) return odt.end();\n    auto it = --odt.upper_bound((ODT){p , 0 , 0});\n    if(it->l == p) return it;\n    int l = it->l , r = it->r , v = it->v;\n    odt.erase(it) , odt.insert((ODT){l , p - 1 , v});\n    return odt.insert((ODT){p , r , v}).first;\n}\n\ninline void assign(int l , int r , int val)\n{\n    auto it2 = split(r + 1) , it1 = split(l);\n    odt.erase(it1 , it2) , odt.insert((ODT){l , r , val});\n}\n\ninline int query1(int l , int r)\n{\n    memset(vis , 0 , (c+10) * sizeof(int));\n    auto it2 = split(r + 1) , it1 = split(l);\n    auto ls = it1 , rs = it1; int res = 1 , ans = 2e9; vis[rs->v] = 1;\n    while(rs != it2)\n    {\n        if(res == c)\n        {\n            if(ls == rs) ans = min(ans , ask2(1 , ls->l , ls->r));\n            else ans = min(ans , ask1(1 , ls->r , rs->l));\n            vis[ls->v]-- , res -= (vis[ls->v] == 0) , ls++;\n        }\n        else rs++ , res += (vis[rs->v] == 0) , vis[rs->v]++;\n    }\n    return (ans == 2e9 ? -1 : ans);\n}\n\ninline bool check(set<ODT>::iterator l , set<ODT>::iterator r)\n{\n    if(l == r || (++l)-- == r) return 0; l++;\n    for(auto i = l;i != r;i++) if(i->l != i->r) return 1;\n    return 0;\n}\n\ninline int query2(int l , int r)\n{\n    memset(vis , 0 ,(c+10) * sizeof(int));\n    int ans = ask3(1 , l , r);\n    auto it2 = split(r + 1) , it1 = split(l) , ls = it1 , rs = it1;\n    for(;rs != it2;rs++)\n    {\n        ++vis[rs->v];\n        while(check(ls , rs)) vis[ls->v]-- , ls++;\n        while(ls != rs && vis[rs->v] > 1) vis[ls->v]-- , ls++;\n        if(ls != rs) ans = max(ans , ask1(1 , ls->r , rs->l));\n    }\n    return ans;\n}\n\nint main()\n{\n    n = read() , m = read() , c = read();\n    for(int i = 1;i <= n;i++) a[i] = read();\n    for(int i = 1;i <= n;i++) \n    {\n\n        b[i] = read() , odt.insert((ODT){i , i , b[i]});\n    }\n    build(1  , 1 , n);\n    for(int i = 1;i <= m;i++)\n    {\n        int opt = read();\n        if(opt == 1)\n        {\n            int x = read() , y = read();\n            a[x] = y , update(1 , x);\n        }\n        if(opt == 2)\n        {\n            int l = read() , r = read() , x = read();\n            assign(l , r , x);\n        }\n        if(opt == 3)\n        {\n            int l = read() , r = read();\n            printf(\"%d\\n\" , query1(l , r));\n        }\n        if(opt == 4)\n        {\n            int l = read() , r = read();\n            printf(\"%d\\n\" , query2(l , r));\n        }\n    }\n    return 0;\n} \n\n\n```",
        "postTime": 1646291957,
        "uid": 320933,
        "name": "Mfeitveer",
        "ccfLevel": 0,
        "title": "P5251 [LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a \u9898\u89e3"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5251)\u3002\n\n\u8fd9\u9898\u7ec6\u8282\u597d\u591a\u2026\n\n\u9996\u5148\u989c\u8272\u6bb5\u8fd9\u90e8\u5206\u544a\u8bc9\u4f60\u6570\u636e\u968f\u673a\u3001\u533a\u95f4\u8986\u76d6\uff0c\u5c31\u5dee\u76f4\u63a5\u628a\u73c2\u6735\u8389\u6811\u544a\u8bc9\u4f60\u4e86\u2026\n\n\u7136\u540e\u6570\u5b57\u8fd9\u90e8\u5206\u76f4\u63a5\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\u5c31\u73c2\u4ee5\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u8981\u601d\u8003\u6211\u4eec\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5e72\u4ec0\u4e48\u3002\n\n\u9996\u5148\u9898\u76ee\u5199\u660e\u4e86\u5b83\u8981\u8d44\u74f7\u5355\u70b9\u4fee\u6539\u3001\u6c42\u533a\u95f4\u548c\u3002\n\n\u4e4b\u540e\u6211\u4eec\u601d\u8003\u64cd\u4f5c $3$ \u548c $4$\uff1a\n\n\u64cd\u4f5c $3$ \u6211\u4eec\u628a\u6574\u4e2a\u533a\u95f4\u5206\u4e3a $\\log n$ \u4e2a\u989c\u8272\u6bb5\uff0c\u7136\u540e\u5728\u8fd9\u4e9b\u989c\u8272\u6bb5\u4e0a\u8dd1\u5c3a\u53d6\u5c31\u73c2\u4ee5\u4e86\u3002\u56e0\u4e3a\u8981\u7279\u5224\u989c\u8272\u603b\u6570\u4e3a $1$ \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8981\u67e5\u8be2\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n\u64cd\u4f5c $4$ \u540c\u6837\u8dd1\u5c3a\u53d6\u67e5\u7b54\u6848\u3002\u56e0\u4e3a\u8981\u7279\u5224\u53ea\u9009\u4e00\u4e2a\u70b9\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8981\u67e5\u8be2\u533a\u95f4\u6700\u5927\u503c\u3002\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u9700\u8981\u8d44\u74f7\uff1a\u5355\u70b9\u4fee\u6539\u3001\u6c42\u533a\u95f4\u548c\u3001\u67e5\u8be2\u533a\u95f4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528**\u7ebf\u6bb5\u6811**\u3002\n\n\u7447\u7801\u4e0a\u6709\u5f88\u591a\u7ec6\u8282\uff0c\u6545\u653e\u4e0a\u7447\u7801\uff08\u5e26\u6ce8\u91ca\uff09\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\nusing namespace std;\nconst int N=1e6+10,INF=0x3f3f3f3f;\nstruct list{\n\tint pre,nxt;\n\tint l,r;\n\tint val;\n};\nlist ctl[N];\nint tot;\nint split(int pos){\n\tfor(int p=ctl[0].nxt;p;p=ctl[p].nxt)\n\t\tif(ctl[p].l==pos) return p;\n\t\telse if(ctl[p].l<pos&&ctl[p].r>=pos){\n\t\t\tint np=++tot;\n\t\t\tctl[np]=ctl[p];\n\t\t\tctl[p].nxt=np,ctl[np].pre=p;\n\t\t\tctl[p].r=pos-1,ctl[np].l=pos;\n\t\t\tctl[ctl[np].nxt].pre=np;//\u6ce8\u610f\u8fd9\u4e2a\u8981\u66f4\u65b0\n\t\t\treturn np;\n\t\t}\n\treturn 0;//\u8bb0\u5f97\u8981\u8fd4\u56de0\u53f7\u8282\u70b9\n}\n//\u94fe\u8868\u7248\u73c2\u6735\u8389\u6811\nvoid assign(int l,int r,int v){\n\tint p=split(l),q=split(r+1);//\u94fe\u8868\u7248\u4e0d\u7528\u8003\u8651\u6307\u9488\u5931\u6548\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148split\u5de6\u518dsplit\u53f3\n\tctl[p].nxt=q,ctl[q].pre=p,ctl[p].r=r,ctl[p].val=v;\n}\nstruct segment_tree{\n\tint maxn,minn,val;\n};\nsegment_tree smt[4*N];\ninline void pushup(int pos){\n\tint ls=pos<<1,rs=pos<<1|1;\n\tsmt[pos].maxn=max(smt[ls].maxn,smt[rs].maxn);\n\tsmt[pos].minn=min(smt[ls].minn,smt[rs].minn);\n\tsmt[pos].val=smt[ls].val+smt[rs].val;\n}\nvoid modify(int pos,int l,int r,int p,int v){\n\tif(l==r) return void(smt[pos].maxn=smt[pos].minn=smt[pos].val=v);\n\tint mid=l+r>>1;\n\tif(p<=mid) modify(pos<<1,l,mid,p,v);\n\telse modify(pos<<1|1,mid+1,r,p,v);\n\tpushup(pos);\n}\nint query_max(int pos,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr) return smt[pos].maxn;\n\tint mid=l+r>>1,ans=0;\n\tif(ql<=mid) ans=max(ans,query_max(pos<<1,l,mid,ql,qr));\n\tif(qr>mid) ans=max(ans,query_max(pos<<1|1,mid+1,r,ql,qr));\n\treturn ans;\n}\nint query_min(int pos,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr) return smt[pos].minn;\n\tint mid=l+r>>1,ans=INF;\n\tif(ql<=mid) ans=min(ans,query_min(pos<<1,l,mid,ql,qr));\n\tif(qr>mid) ans=min(ans,query_min(pos<<1|1,mid+1,r,ql,qr));\n\treturn ans;\n}\nint query_sum(int pos,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr) return smt[pos].val;\n\tint mid=l+r>>1,ans=0;\n\tif(ql<=mid) ans+=query_sum(pos<<1,l,mid,ql,qr);\n\tif(qr>mid) ans+=query_sum(pos<<1|1,mid+1,r,ql,qr);\n\treturn ans;\n}\nint b[110];\nint n,m,c;\nint query_maxn(int l,int r){\n\tmemset(b,0,sizeof b);\n\tint p=split(l),q=split(r+1);\n\tint ans=query_max(1,1,n,l,r);//\u5148\u7279\u5224\u53ea\u9009\u4e00\u4e2a\u7684\u60c5\u51b5\n\tfor(int i=p,j=p;i!=q;i=ctl[i].nxt){\n\t\tif(ctl[j].nxt==i) j=ctl[j].nxt;//\u6ce8\u610f\u5982\u679cj\u5728i\u540e\u8981\u79fb\u52a8\n\t\twhile(j!=q&&!b[ctl[j].val]&&ctl[j].l==ctl[j].r||i==j)//\u6ce8\u610f\u5f53i\u548cj\u76f8\u7b49\u65f6\u76f4\u63a5\u53ef\u4ee5\u79fb\u52a8\n\t\t\tb[ctl[j].val]++,j=ctl[j].nxt;//\u5c3a\u53d6\n\t\tbool flag=false;\n\t\tif(j==q||b[ctl[j].val]) j=ctl[j].pre,flag=true;//\u6ee1\u8db3\u6761\u4ef6\u5219j\u524d\u79fb\u5e76\u6253\u4e0a\u6807\u8bb0\n\t\tif(i!=j) ans=max(ans,query_sum(1,1,n,ctl[i].r,ctl[j].l));//\u8981\u5224\u65adi\u548cj\u7684\u5173\u7cfb\uff0c\u5426\u5219\u4f1a\u8d8a\u754c\n\t\tif(flag) j=ctl[j].nxt;//flag\u4e3atrue\u624d\u79fb\u52a8\n\t\tb[ctl[i].val]--;//\u6e05\u7a7ai\u7684\u5f71\u54cd\n\t}\n\treturn ans;\n}\nint query_minn(int l,int r){\n\tmemset(b,0,sizeof b);\n\tint p=split(l),q=split(r+1);\n\tint ans=INF,cnt=0;\n\tfor(int i=p,j=p;i!=q;i=ctl[i].nxt){\n\t\twhile(j!=q&&cnt<=c-1){\n\t\t\tif(!b[ctl[j].val]++) cnt++;//\u628a\u5f71\u54cd\u52a0\u4e0a\n\t\t\tj=ctl[j].nxt;\n\t\t}//\u5c3a\u53d6\n\t\tj=ctl[j].pre;//\u6307\u9488j\u524d\u79fb\n\t\tif(cnt==c&&i!=j) ans=min(ans,query_sum(1,1,n,ctl[i].r,ctl[j].l));//\u67e5\u8be2\u533a\u95f4\u548c\n\t\tif(cnt==c&&i==j) ans=min(ans,query_min(1,1,n,ctl[i].l,ctl[j].r));//\u76f8\u5f53\u4e8ec=1\uff0c\u67e5\u8be2\u533a\u95f4\u6700\u5c0f\u503c\n\t\tj=ctl[j].nxt;//\u6307\u9488j\u540e\u79fb\n\t\tif(!--b[ctl[i].val]) cnt--;//\u6d88\u9664\u5f71\u54cd\n\t}\n\treturn ans==INF?-1:ans;\n}\nint main(){\n\tcin>>n>>m>>c;\n\tfor(int i=1;i<=n;i++){\n\t\tint x;\n\t\tcin>>x;\n\t\tmodify(1,1,n,i,x);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint x;\n\t\tcin>>x;\n\t\tctl[i].pre=i-1;\n\t\tctl[i-1].nxt=i;\n\t\tctl[i].val=x;\n\t\tctl[i].l=ctl[i].r=i;\n\t}\n\tctl[0].pre=tot=n;\n\tctl[0].l=n+1,ctl[0].r=0;\n\tfor(int i=1;i<=m;i++){\n\t\tint op,l,r,x,y;\n\t\tcin>>op;\n\t\tswitch(op){\n\t\t\tcase 1:\n\t\t\t\tcin>>x>>y;\n\t\t\t\tmodify(1,1,n,x,y);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcin>>l>>r>>x;\n\t\t\t\tassign(l,r,x);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcin>>l>>r;\n\t\t\t\tcout<<query_minn(l,r)<<'\\n';\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcin>>l>>r;\n\t\t\t\tcout<<query_maxn(l,r)<<'\\n';\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n```",
        "postTime": 1628834585,
        "uid": 204705,
        "name": "KiDDOwithTopTree",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5251"
    },
    {
        "content": "## \u3010\u9898\u76ee\u5927\u610f\u3011\r\n\u7ed9\u5b9a\u6570\u5217\u548c\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u989c\u8272\r\n\r\n\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\r\n\r\n1. \u6539\u53d8\u67d0\u4e2a\u6570\u5b57\r\n\r\n2. \u5bf9\u67d0\u4e00\u6bb5\u989c\u8272**\u533a\u95f4\u8d4b\u503c**\r\n\r\n3. \u8be2\u95ee\u67d0\u6bb5\u533a\u95f4\u5185\u5305\u542b\u6240\u6709\u989c\u8272\u7684\u5b50\u533a\u95f4\u6240\u5bf9\u5e94\u7684\u6570\u5b57\u548c\u7684\u6700\u5c0f\u503c\r\n\r\n4. \u8be2\u95ee\u67d0\u6bb5\u533a\u95f4\u5185\u6ca1\u6709\u91cd\u590d\u989c\u8272\u7684\u5b50\u533a\u95f4\u6240\u5bf9\u5e94\u7684\u6570\u5b57\u548c\u7684\u6700\u5927\u503c\r\n\r\n------------\r\n\r\n\r\n## \u3010\u5206\u6790\u3011\r\n\r\n\u6211\u4eec\u7684\u5173\u6ce8\u70b9\u5728**\u533a\u95f4\u8d4b\u503c**\u548c**\u6570\u636e\u968f\u673a\u751f\u6210**\u4e0a\r\n\r\n\u81ea\u7136\u800c\u7136\u5c31\u60f3\u5230\u4e86\u6700\u53ef\u7231\u7684**\u73c2\u6735\u8389**\u6811\r\n\r\n\u4e8e\u662f2\u64cd\u4f5c\u8fce\u5203\u800c\u89e3\r\n\r\n\u6709\u73c2\u6735\u8389\u6811\u7684\u52a0\u6301\uff0c\u5176\u4ed6\u64cd\u4f5c\u66b4\u529b\u5373\u53ef\r\n\r\n### 3\u64cd\u4f5c\r\n\r\n\u8981\u6c42\u5b50\u533a\u95f4\u5185\u8981\u5305\u542b\u6240\u6709\u989c\u8272\uff0c\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\u5373\u53ef\r\n\r\nj\u548ci\u4ee3\u8868\u5de6\u53f3\u7aef\u70b9\uff0c\u663e\u7136i\u5728\u6b64\u6bb5\u6700\u5de6\u8fb9\uff0cj\u5728\u6b64\u6bb5\u6700\u540e\u8fb9\r\n\r\n\u6bcf\u6b21i\u5f80\u540e\u8d70\u4e00\u6b65\uff0cj\u6839\u636e\u76ee\u524d\u6570\u636e\u8c03\u6574\r\n\r\n\u9700\u8981\u8bb0\u5f55\u5f53\u524dij\u4e4b\u95f4\u5404\u4e2a\u989c\u8272\u7684\u6570\u91cf\u548c\u989c\u8272\u7684\u79cd\u7c7b\u6570\r\n\r\n\u6c42\u533a\u95f4\u548c\u53ef\u4ee5\u7528**\u7ebf\u6bb5\u6811**\r\n\r\n### 4\u64cd\u4f5c\r\n\r\n\u4e0e3\u7c7b\u4f3c\uff0c\u540c\u6837\u662f\u7ef4\u62a4\u6307\u9488\uff0c\u4f46\u662f\u7ec6\u8282\u66f4\u591a\r\n\r\n\u5982\u679cij\u76f8\u7b49\uff0c\u5e94\u9009\u62e9\u5f53\u524d\u6bb5\u5185\u6700\u5927\u503c\uff0c\u540c\u6837\u53ef\u4ee5\u7528**\u7ebf\u6bb5\u6811**\u7ef4\u62a4\r\n\r\n\u5982\u679cij\u4e0d\u7b49\uff0c\u663e\u7136i\u5728\u6bb5\u5de6\uff0cj\u5728\u6bb5\u53f3\r\n\r\n\u5982\u679ci\u6bb5\u5927\u5c0f\u4e0d\u4e3a1\uff0c\u533a\u95f4\u5185\u5c31\u4e0d\u80fd\u5305\u542b\u5b8c\u6574\u7684i\u6bb5\u4e86\uff0c\u5e94\u540c\u65f6\u8c03\u6574j\r\n\r\n1\u64cd\u4f5c\u5c31\u4e0d\u7528\u591a\u8bf4\u4e86\uff0c\u7ef4\u62a4\u7ebf\u6bb5\u6811\u65f6\u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\u5373\u53ef\r\n\r\n------------\r\n## \u3010\u7b97\u6cd5\u3011\r\n\u73c2\u6735\u8389\u6811+\u7ebf\u6bb5\u6811\r\n\r\n\r\n------------\r\n## \u3010\u4ee3\u7801\u3011\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define IN inline\r\n#define RE register\r\n#define IT set<node>::iterator\r\n#define ls (k<<1)\r\n#define rs (k<<1|1)\r\n#define mid (l+r>>1)\r\nusing namespace std;\r\nconst int maxn=1e5+5,maxc=105,INF=2147483647,maxt=maxn<<2;\r\nint n,m,C;\r\nint read(){\r\n\tint ret=0,f=1;char ch=getchar();\r\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\r\n\twhile(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\r\n\treturn ret*f;\r\n}\r\nstruct node{\r\n\tmutable int l,r,c;\r\n\tbool operator <(node b)const{return l<b.l;}\r\n}a[maxn],b[maxn];\r\nset<node> s;\r\nint p[maxn],c[maxn];\r\nstruct tree{\r\n\tint max,s;\r\n}t[maxt];\r\ntree merge(tree l,tree r){\r\n\ttree ret;\r\n\tret.s=l.s+r.s;\r\n\tret.max=max(l.max,r.max);\r\n\treturn ret;\r\n}\r\nvoid pushup(int k){\r\n\tt[k]=merge(t[ls],t[rs]);\r\n}\r\nvoid build(int k,int l,int r){\r\n\tif(l==r){\r\n\t\tt[k].max=t[k].s=p[l];\r\n\t\treturn;\r\n\t}\r\n\tbuild(ls,l,mid),build(rs,mid+1,r);\r\n\tpushup(k);\r\n}\r\nvoid update(int k,int l,int r,int x,int v){\r\n\tif(l==r){\r\n\t\tt[k].max=t[k].s=v;\r\n\t\treturn;\r\n\t}\r\n\tif(x<=mid) update(ls,l,mid,x,v);\r\n\telse update(rs,mid+1,r,x,v);\r\n\tpushup(k);\r\n}\r\ntree query(int k,int l,int r,int x,int y){\r\n\tif(x<=l&&r<=y) return t[k];\r\n\tif(y<=mid) return query(ls,l,mid,x,y);\r\n\tif(mid<x) return query(rs,mid+1,r,x,y);\r\n\treturn merge(query(ls,l,mid,x,mid),query(rs,mid+1,r,mid+1,y));\r\n}\r\nIT it1,it2,it;\r\nIN IT split(RE int x){\r\n\tit=s.lower_bound((node){x,0,0});\r\n\tif(it!=s.end()&&it->l==x) return it;\r\n\t--it;\r\n\tint l=it->l,r=it->r,v=it->c;\r\n\ts.erase(it);\r\n\ts.insert((node){l,x-1,v});\r\n\treturn s.insert((node){x,r,v}).first;\r\n}\r\nvoid assign(int l,int r,int v){\r\n\tit2=split(r+1),it1=split(l);\r\n\ts.erase(it1,it2);\r\n\ts.insert((node){l,r,v});\r\n}\r\nint d[maxc];\r\nint query1(int l,int r){\r\n\tit2=split(r+1),it1=split(l);\r\n\tmemset(d,0,sizeof d);\r\n\tint cnt=0,sum=0,ret=INF,tot=0;\r\n\tfor(it=it1;it!=it2;++it) b[++tot]=*it;\r\n\tfor(int i=1,j=1;i<=tot;i++){\r\n\t\tif(!d[b[i].c]) cnt++;\r\n\t\td[b[i].c]++;\r\n\t\twhile(d[b[j].c]>1) d[b[j].c]--,++j;\r\n\t\tif(cnt==C){\r\n\t\t\tret=min(ret,query(1,1,n,b[j].r,b[i].l).s);\r\n\t\t}\r\n\t}\r\n\treturn ret==INF?-1:ret;\r\n}\r\nint query2(int l,int r){\r\n\tit2=split(r+1),it1=split(l);\r\n\tmemset(d,0,sizeof d);\r\n\tint sum=0,ret=-INF,tot=0;\r\n\tfor(it=it1;it!=it2;++it){\r\n\t\tif(b[tot].c==it->c) b[tot].r=it->r;\r\n\t\telse b[++tot]=*it;\r\n\t}\r\n\tfor(int i=1,j=1;i<=tot;i++){\r\n\t\tret=max(ret,query(1,1,n,b[i].l,b[i].r).max);\r\n\t\td[b[i].c]++;\r\n\t\twhile(d[b[i].c]>1&&j!=i) d[b[j].c]-=b[j].r-b[j].l+1,j++;\r\n\t\tif(i!=j) ret=max(ret,query(1,1,n,b[j].r,b[i].l).s);\r\n\t\td[b[i].c]+=b[i].r-b[i].l;\r\n\t\tif(b[i].r!=b[i].l) while(j!=i) d[b[j].c]-=b[j].r-b[j].l+1,j++;\r\n\t}\r\n\treturn ret;\r\n}\r\nint main(){\r\n\tfreopen(\"P5251.in\",\"r\",stdin);\r\n\tfreopen(\"P5251.out\",\"w\",stdout);\r\n\tn=read(),m=read(),C=read();\r\n\tfor(int i=1;i<=n;i++) p[i]=read();\r\n\tbuild(1,1,n); \r\n\tfor(int i=1;i<=n;i++) s.insert((node){i,i,read()});\r\n\ts.insert((node){n+1,n+1,0});\r\n\tfor(int i=1,l,r,x,y;i<=m;i++){\r\n\t\tint k=read();\r\n\t\tif(k==1){\r\n\t\t\tx=read(),y=read();\r\n\t\t\tupdate(1,1,n,x,y);\r\n\t\t\tp[x]=y;\r\n\t\t}else\r\n\t\tif(k==2){\r\n\t\t\tl=read(),r=read(),y=read();\r\n\t\t\tassign(l,r,y);\r\n\t\t}else\r\n\t\tif(k==3){\r\n\t\t\tl=read(),r=read();\r\n\t\t\tprintf(\"%d\\n\",query1(l,r));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tl=read(),r=read();\r\n\t\t\tprintf(\"%d\\n\",query2(l,r));\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n",
        "postTime": 1596116207,
        "uid": 116251,
        "name": "\u7834\u5fc6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5251 \u3010[LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a\u3011"
    },
    {
        "content": "\u9996\u5148\u9898\u76ee\u63cf\u8ff0\u5341\u5206\u6e05\u6670\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6293\u4f4f\u51e0\u4e2a\u5173\u952e\u70b9\u5373\u53ef\u3002\n\n- \u6570\u636e\u5b8c\u5168\u968f\u673a\n\n- \u989c\u8272\u548c\u6570\u503c\u4e4b\u95f4\u6ca1\u6709\u5fc5\u7136\u8054\u7cfb\n\n- \u6709\u533a\u95f4\u5e73\u63a8\u64cd\u4f5c\uff0c\u5e76\u4e14\u8981\u5728\u989c\u8272\u5757\u4e0a\u64cd\u4f5c\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u989c\u8272\u3002\n\n\u7ea6\u5b9a\uff1a\n\n```cpp\nstruct Chtholly_tree{\n\tint l,r;\n\tmutable int val,max;\n\tChtholly_tree(int a=-1,int b=-1,int c=0){l=a,r=b,val=c;}\n\tbool operator <(const Chtholly_tree &c)const{return l<c.l;}\n}; \n\n#define Chtholly set<Chtholly_tree>::iterator\n```\n\u533a\u95f4\u5e73\u63a8\u7684\u64cd\u4f5c\u4e0d\u8be6\u7ec6\u8bb2\u4e86\uff0c\u73b0\u5728\u6211\u8bb2\u8bb2\u64cd\u4f5c\u4e09\uff0c\u56db\u3002\n\n- \u64cd\u4f5c\u4e09\uff1a\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e09\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u53cc\u6307\u9488\u3002\n\n\u5f53\u5de6\u6307\u9488\u7684\u989c\u8272\u88ab\u6807\u8bb0\u8fc7\u90a3\u4e48\u5de6\u79fb\u5de6\u6307\u9488\u76f4\u5230\u6ca1\u6709\u6807\u8bb0\u3002\n\n\u540c\u65f6\uff0c\u4fdd\u8bc1\u80fd\u5728\u5c3d\u53ef\u80fd\u5c11\u63a5\u89e6\u540c\u79cd\u989c\u8272\uff0c\u589e\u52a0\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\n\n\u8c03\u6574\u5b8c\u5de6\u6307\u9488\u540e\uff0c\u6211\u4eec\u4f1a\u53f3\u79fb\u53f3\u6307\u9488\uff0c\u6240\u6709\u5143\u7d20\u81f3\u591a\u6210\u4e3a\u4e00\u6b21\u5de6\u6307\u9488\uff0c\u4e00\u6b21\u53f3\u6307\u9488\uff0c\u590d\u6742\u5ea6\u4e3a $O(n)$ \u66f4\u65b0\u7b54\u6848\u518d\u9664\u4ee5\u5e73\u5747\u5757\u957f\uff0c\u4e58\u4ee5\u6811\u72b6\u6570\u7ec4\u7684\u590d\u6742\u5ea6\uff0c\u4f1a\u88ab\u964d\u5230 $O(\\log^2 n)$ \u3002\n\n\u8fd9\u6837\u7c7b\u4f3c\u5355\u8c03\u961f\u5217\u7684\u64cd\u4f5c\u53ef\u4ee5\u7ef4\u62a4\u989c\u8272\u5355\u8c03\u6027\uff0c\u6211\u4eec\u79f0\u4e3a\u5c3a\u53d6\u6cd5\u3002\n\n```cpp\nint query(int L,int R){\n\tint ans=inf,cnt[205]={0},sum=0;\n\tChtholly right=split(R+1),left=split(L);\n\tfor(Chtholly l=left,r=left;r!=right;r++){\n\t\tif(!cnt[r->val])sum++;\n\t\tcnt[r->val]++;\n\t\twhile(cnt[l->val]>1){cnt[l->val]--;l++;}\n\t\tif(sum==c)ans=min(ans,b.ask(l->r,r->l));\n\t} \n\treturn ans==inf?-1:ans;\n}\n```\n- \u64cd\u4f5c\u56db\n\n\u6211\u4eec\u7528\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u533a\u95f4\u989c\u8272\uff0c\u6240\u4ee5\u8981\u4fdd\u8bc1\u989c\u8272\u5355\u8c03\u6027\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u5f53\u524d\u6307\u9488\u6307\u5411\u5373\u53ef\u3002\n\n\u65e2\u7136\u4e0d\u80fd\u6709\u540c\u79cd\u989c\u8272\uff0c\u53ea\u8981\u9650\u5236\u5757\u957f\u5fc5\u987b\u552f\u4e00\uff0c\u4e14\u4e0d\u4e0e\u4e4b\u524d\u51fa\u73b0\u8fc7\u7684\u5143\u7d20\u91cd\u5408\u5373\u53ef\u3002\u6709\u4e86\u64cd\u4f5c\u4e09\u7684\u7406\u8bba\u5b9e\u8df5\uff0c\u5f88\u5feb\u5c31\u80fd\u5199\u51fa\u6765\uff1a\n\n```cpp\nint query2(int L,int R){\n\tint ans=querymax(1,L,R),cnt[205]={0},sum=0;\n\tChtholly right=split(R+1),left=split(L);\n\tfor(Chtholly l=left,r=left;r!=right;r++){\n\t\tif(r->r-r->l+1>1)sum++;\n      //\u9650\u5236\u5757\u957f\u4e3a1\uff0c\u5982\u679c\u53f3\u6307\u9488\u7684\u5757\u957f\u552f\u4e8c\n      //\u5148\u8bb0\u5f55\u4e00\u4e0b\uff0c\u5728\u540e\u9762\u7684\u5220\u9664\u64cd\u4f5c\u5220\u9664\u5373\u53ef\n\t\tcnt[r->val]++;\n\t\twhile((sum-((l->r-l->l+1)>1)-((r->r-r->l+1)>1)>0)||cnt[r->val]>1){\n        //\u524d\u8005\u4e3a\u4e0d\u80fd\u51fa\u73b0\u957f\u5ea6\u5927\u4e8e1\u7684\u5757\uff08\u91cd\u590d\u989c\u8272\uff09\n        //\u540e\u8005\u4e3a\u5224\u65ad\u5de6\u6307\u9488\u7684\u989c\u8272\u662f\u5426\u552f\u4e00\uff0c\u5927\u4e8e1\u5373\u4e3a\u51fa\u73b0\u8fc7\u91cd\u590d\u3002\n\t\t\tcnt[l->val]--;\n\t\t\tsum-=((l->r-l->l+1)>1);\n\t\t\tl++;\n\t\t}\n\t\tans=max(ans,b.ask(l->r,r->l));\n      //\u6bcf\u6b21\u64cd\u4f5c\u540e\u66f4\u65b0\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u7b54\u6848\u3002\n\t} \n\treturn ans;\n}\n```\n\n- \u5176\u4ed6\u90e8\u5206\n\n\u672c\u9898\u5bf9\u4e8e\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u7684\u8003\u5bdf\u5341\u5206\u88f8\uff0c\u8be6\u7ec6\u8981\u6c42\u4e3a\uff1a\n\n>\u5355\u70b9\u8d4b\u503c\uff0c\u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\uff0c\u533a\u95f4\u548c\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6700\u5927\u503c\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u6216\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u3002\n\n```cpp\n//\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u503c\nstruct Segement_tree{\n\tint l,r,val;\n}s[N]; \nvoid build(int p,int l,int r){\n\ts[p].l=l,s[p].r=r;\n\tif(l==r)return;\n\tbuild(lc,l,(l+r)/2);\n\tbuild(rc,(l+r)/2+1,r);\n}\nvoid pushup(int p){s[p].val=max(s[lc].val,s[rc].val);}\nvoid modify(int p,int v,int k){\n\tif(s[p].l>v||s[p].r<v)return;\n\tif(s[p].l==v&&s[p].r==v){s[p].val=k;return;}\n\tmodify(lc,v,k);modify(rc,v,k);\n\tpushup(p);\n}\nint querymax(int p,int l,int r){\n\tif(s[p].l>r||s[p].r<l)return 0;\n\tif(s[p].l>=l&&s[p].r<=r)return s[p].val;\n\treturn max(querymax(lc,l,r),querymax(rc,l,r));\n}\n//\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u533a\u95f4\u548c\nstruct bit{\n\tint t[N];\n\tint lowbit(int x){return x&-x;}\n\tvoid add(int x,int v){for(;x<=n;x+=lowbit(x))t[x]+=v;}\n\tvoid change(int x,int v){\n\t\tint k=v-a[x];a[x]=v;\n\t\tmodify(1,x,v);\n\t\tadd(x,k);\n\t}\n\tint query(int x){\n\t\tint ans=0;\n\t\tfor(;x;x-=lowbit(x))ans+=t[x];\n\t\treturn ans;\n\t}\n\tint ask(int l,int r){return query(r)-query(l-1);}\n}b;\n//\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u989c\u8272\u5757\u5e76\u5b8c\u6210\u8fdb\u884c\u5c3a\u53d6\nset<ct> st;\nChtholly split(int pp){\n\tChtholly it=st.lower_bound(ct(pp,0,0));\n\tif(it!=st.end()&&it->l==pp)return it;\n\tit--;ct tmp=*it;st.erase(it);\n\tst.insert(ct(tmp.l,pp-1,tmp.val));\n\treturn st.insert(ct(pp,tmp.r,tmp.val)).first;\n}\nvoid assign(int l,int r,int v){\n\tChtholly right=split(r+1),left=split(l);\n\tst.erase(left,right);\n\tst.insert(ct(l,r,v));\n}\nint query(int L,int R){\n\tint ans=inf,cnt[205]={0},sum=0;\n\tChtholly right=split(R+1),left=split(L);\n\tfor(Chtholly l=left,r=left;r!=right;r++){\n\t\tif(!cnt[r->val])sum++;\n\t\tcnt[r->val]++;\n\t\twhile(cnt[l->val]>1){cnt[(l)->val]--;l++;}\n\t\tif(sum==c)ans=min(ans,b.ask(l->r,r->l));\n\t} \n\treturn ans==inf?-1:ans;\n}\nint query2(int L,int R){\n\tint ans=querymax(1,L,R),cnt[205]={0},sum=0;\n\tChtholly right=split(R+1),left=split(L);\n\tfor(Chtholly l=left,r=left;r!=right;r++){\n\t\tif(r->r-r->l+1>1)sum++;\n\t\tcnt[r->val]++;\n\t\twhile((sum-((l->r-l->l+1)>1)-((r->r-r->l+1)>1)>0)||cnt[r->val]>1){\n\t\t\tcnt[l->val]--;\n\t\t\tsum-=((l->r-l->l+1)>1);\n\t\t\tl++;\n\t\t}\n\t\tans=max(ans,b.ask(l->r,r->l));\n\t} \n\treturn ans;\n}\n```\n\u4e8e\u662f\u4f60\u53ef\u4ee5\u5b8c\u7f8e\u7684\u89e3\u51fa\u8fd9\u9053\u9ed1\u9898\u4e86\u3002\n\n\u7ba1\u7406\u5458\u540c\u5fd7\u5ba1\u6838\u9898\u89e3\u8f9b\u82e6\u4e86\u3002\n",
        "postTime": 1659969271,
        "uid": 285617,
        "name": "\u9ed1\u5f71\u6d1e\u4eba",
        "ccfLevel": 5,
        "title": "P5251 [LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a \u9898\u89e3"
    },
    {
        "content": "# P5251 [LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a\n\n[Luogu P5251](https://www.luogu.com.cn/problem/P5251)\n\n## Solution\n\n\u96be\u5f97\u4e00\u89c1\u7684\u6570\u636e\u968f\u673a+\u533a\u95f4\u63a8\u5e73\u7684\u9898\u76ee\uff0c\u8fd9\u4e0d\u7528\u73c2\u6735\u8389\u6811\u771f\u7684\u53ef\u60dc\u4e86\u3002\n\n\u770b\u9898\u76ee\uff0c\u4f1a\u53d1\u73b0\u539f\u6570\u5217\u7531\u6570\u5b57\u548c\u989c\u8272\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u5e76\u4e14\u4e24\u90e8\u5206\u7684\u6570\u636e\u76f8\u4e92\u4e0d\u5e72\u6270\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u91c7\u7528\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\u6765\u8fdb\u884c\u5904\u7406\u3002\u989c\u8272\u8fd9\u4e00\u7c7b\u6570\u636e\u56e0\u4e3a\u6709\u533a\u95f4\u63a8\u5e73\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u91c7\u7528\u73c2\u6735\u8389\u6811\u8fdb\u884c\u7ef4\u62a4\uff0c\u800c\u6570\u5b57\u8fd9\u4e00\u7ef4\u770b\u9898\u76ee\u6709\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u6c42\u548c\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u9009\u62e9\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u7ef4\u62a4\uff0c\u90a3\u4e48\u4e24\u7c7b\u4fee\u6539\u64cd\u4f5c\u5c31\u5206\u6790\u5b8c\u6bd5\u4e86\u3002\n\n\u73b0\u5728\u9700\u8981\u5173\u6ce8\u7684\u5c31\u53d8\u6210\u4e86 $3,4$ \u8fd9\u4e24\u7c7b\u64cd\u4f5c\uff0c\u6211\u4eec\u5206\u5f00\u6765\u8ba8\u8bba\uff1a\n\n* \u64cd\u4f5c $3$\n\n  \u65e2\u7136\u8981\u8be2\u95ee\u533a\u95f4 $[l,r]$ \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u73b0\u5728\u73c2\u6735\u8389\u6811\u4e0a\u628a\u8fd9\u4e00\u4e2a\u533a\u95f4\u7ed9 `split` \u51fa\u6765\u518d\u8bf4\u3002\u56e0\u4e3a\u8981\u7edf\u8ba1\u533a\u95f4\u989c\u8272\u79cd\u7c7b\uff0c\u6240\u4ee5\u9700\u8981\u5f00\u4e00\u4e2a\u6876\u6765\u5b58\u50a8\uff08\u8bb0\u5f97\u521d\u59cb\u5316\uff09\u3002\u6ce8\u610f\u5230 $a_i \\ge 1$ \uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5047\u8bbe $[l,r]$ \u662f\u4e00\u4e2a\u5408\u6cd5\u533a\u95f4\uff0c\u5e76\u4e14 $[l,k]$ \u662f\u4e00\u4e2a\u6bd4 $[l,r]$ \u5927\u7684\u5408\u6cd5\u533a\u95f4\uff0c\u90a3\u4e48\u56e0\u4e3a $a$ \u7684\u53d6\u503c\u8303\u56f4\uff0c\u53ef\u4ee5\u5f97\u77e5\u533a\u95f4 $[l,r]$ \u7684\u6570\u5b57\u548c\u4e00\u5b9a\u6bd4\u533a\u95f4 $[l,k]$ \u7684\u6570\u5b57\u548c\u5c0f\uff08\u56e0\u4e3a\u591a\u51fa\u4e86 $(r,k]$ \u8fd9\u4e00\u90e8\u5206\u7684\u6570\u5b57\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u91c7\u7528\u5c3a\u53d6\u6cd5\u6765\u5728\u73c2\u6735\u8389\u6811\u4e0a $\\text O(\\log n)$ \u5730\u6c42\u5230\u7b54\u6848\u3002\n\n  \u5c3a\u53d6\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a $cnt$ \u8868\u793a\u76ee\u524d\u5df2\u6709\u7684\u989c\u8272\u79cd\u7c7b\u6570\uff0c\u90a3\u4e48\u5f53 $cnt=c$ \u7684\u65f6\u5019\u5c31\u8868\u793a\u627e\u5230\u4e86\u7b54\u6848\uff0c\u56e0\u4e3a $c=1$ \u65f6 $l$ \u548c $r$ \u5904\u4e8e\u540c\u4e00\u4e2a\u533a\u95f4\uff0c\u6240\u4ee5\u9700\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u6b64\u65f6\u7684\u7b54\u6848\u5c31\u662f\u533a\u95f4 $[l,r]$ \u7684\u6700\u5c0f\u503c\uff08\u56e0\u4e3a\u53ea\u9009\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u5b57\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u6570\u5b57\u548c\u6700\u5c0f\uff09\u3002\u5426\u5219\uff08\u5373 $c \\neq 1$ \u65f6\uff09\uff0c\u56e0\u4e3a\u8981\u6570\u5b57\u548c\u6700\u5c0f\uff0c\u5e76\u4e14\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u4f4d\u4e8e $l$ \u548c $r$ \u4e2d\uff0c\u6240\u4ee5\u53d6 $l$ \u7684\u6700\u53f3\u4fa7\u4f5c\u4e3a\u5de6\u7aef\u70b9\u3001\u53d6 $r$ \u7684\u6700\u5de6\u4fa7\u4f5c\u4e3a\u53f3\u7aef\u70b9\u4e00\u5b9a\u662f\u6700\u4f73\u7b54\u6848\uff0c\u8fd9\u4e00\u6bb5\u7684\u6570\u5b57\u533a\u95f4\u548c\u5373\u4e3a\u7b54\u6848\u3002\n\n  ```c++\n  int query3(int l,int r)//\u64cd\u4f5c3\n  {\n      mem(mp,0);//mp \u7528\u4e8e\u8bb0\u5f55\u989c\u8272\u51fa\u73b0\u6b21\u6570\n      auto itr=split(r+1),itl=split(l);\n      auto L=itl,R=itl;int cnt=0,ans=INT_MAX;\n      for (;L!=itr;L++)\n      {\n          while (R!=itr && cnt!=c)//\u53ef\u4ee5\u53f3\u79fbr\n          {\n              if (!mp[R->v]++) cnt++;//\u52a0\u5165\u8fd9\u70b9\u7684\u989c\u8272\n              R++;\n          }\n          R--;//\u4e0a\u9762\u5faa\u73af\u7ed3\u675f\u7684\u65f6\u5019\u662f\u5df2\u7ecf\u4e0d\u7b26\u5408\u6761\u4ef6\u4e86\uff0c\u6240\u4ee5R--\u6765\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u533a\u95f4\n          if (cnt==c)\n          {\n              if (L==R) ans=min(ans,queryMin(1,1,n,L->l,L->r));//c=1\u7684\u60c5\u51b5\n              else ans=min(ans,querySum(1,1,n,L->r,R->l));\n          }\n          R++;\n          if (!--mp[L->v]) cnt--;//\u53bb\u9664l\u533a\u95f4\n      }\n      return ans==INT_MAX?-1:ans;//\u5982\u679c\u4e00\u6b21\u7b54\u6848\u90fd\u6ca1\u6709\u66f4\u65b0\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709\u7b54\u6848\uff0c\u8fd4\u56de-1\n  }\n  ```\n* \u64cd\u4f5c $4$\n\n  \u4e0e\u64cd\u4f5c $3$ \u7c7b\u4f3c\uff0c\u4e5f\u53ef\u4ee5\u7528\u5c3a\u53d6\u6cd5\u89e3\u51b3\u3002\n\n  \u56e0\u4e3a\u53ea\u53d6\u4e00\u4e2a\u70b9\u4e5f\u662f\u6ee1\u8db3\u9898\u610f\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u7b54\u6848\u521d\u59cb\u5316\u4e3a\u533a\u95f4 $[l,r]$ \u7684\u6700\u5927\u503c\u3002\n\n  \u56e0\u4e3a\u8981\u6c42\u4e0d\u80fd\u6709\u91cd\u590d\u7684\u989c\u8272\uff0c\u6240\u4ee5\u5c3a\u53d6\u53f3\u79fb $r$ \u7684\u8fc7\u7a0b\u4e2d\u52a0\u5165\u7684\u533a\u95f4\u53ea\u80fd\u591f\u662f\u957f\u5ea6\u4e3a $1$ \u7684\u533a\u95f4\uff0c\u51e1\u662f\u5927\u4e8e $1$ \u7684\u533a\u95f4\u90fd\u4f1a\u5b58\u5728\u6709\u4e24\u4e2a\u76f8\u540c\u989c\u8272\u7684\u6570\u3002\u5728\u53f3\u79fb $r$ \u5b8c\u6210\u540e\uff0c\u5982\u679c $r$ \u53f3\u4fa7\u6709\u957f\u5ea6\u5927\u4e8e $1$ \u7684\u533a\u95f4\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d6\u8fd9\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u6765\u4f5c\u4e3a\u7b54\u6848\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff08\u56e0\u4e3a\u53ea\u53d6\u4e86\u4e00\u4e2a\u70b9\u6240\u4ee5\u4e0d\u4f1a\u5bfc\u81f4\u989c\u8272\u91cd\u590d\uff09\u3002\u66f4\u65b0\u5b8c\u7b54\u6848\u540e\u5c06\u8fd9\u4e00\u4e2a\u70b9\u7684\u5f71\u54cd\u6e05\u9664\uff0c\u518d\u53f3\u79fb $l$ \u8fdb\u884c\u4e0b\u4e00\u6b65\u3002\n\n  ```c++\n  int query4(int l,int r)//\u64cd\u4f5c4\n  {\n      mem(mp,0);//\u8bb0\u5f55\u989c\u8272\n      auto itr=split(r+1),itl=split(l);\n      auto L=itl,R=itl;\n      int ans=queryMax(1,1,n,l,r);//\u521d\u59cb\u5316\u4e3a\u533a\u95f4\u6700\u5927\u503c\n      for (;L!=itr;L++)\n      {\n          if (L==R) mp[R->v]++,R++;//\u5982\u679c\u5de6\u53f3\u7aef\u70b9\u5728\u540c\u4e00\u533a\u95f4\uff0c\u76f8\u5f53\u4e8e\u53ea\u53d6\u4e00\u4e2a\u70b9\uff0c\u5df2\u7ecf\u8003\u8651\u8fc7\u4e86\u6240\u4ee5\u53f3\u79fbR\n          while (R!=itr && !mp[R->v] && R->r-R->l+1==1) mp[R->v]++,R++;//\u4e0d\u65ad\u52a0\u5165\u957f\u5ea6\u4e3a1\u7684\u533a\u95f4\n          bool AddNew=0;//\u8bb0\u5f55\u662f\u5426\u52a0\u5165\u4e86\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e1\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\n          if (R!=itr && !mp[R->v]) mp[R->v]++,AddNew=1,R++;//\u53ef\u4ee5\u52a0\u5165\n          R--;\n          if (L!=R) ans=max(ans,querySum(1,1,n,L->r,R->l));//\u66f4\u65b0\u7b54\u6848\n          mp[L->v]--;//\u6e05\u9664l\u7684\u5f71\u54cd\n          if (AddNew) mp[R->v]--,R--;//\u6e05\u9664\u53f3\u4fa7\u533a\u95f4\u7684\u5f71\u54cd\n          R++;\n      }\n      return ans;\n  }\n  ```\n\n\u5206\u6790\u5b8c\u8be2\u95ee\u64cd\u4f5c\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u9700\u8981\u5728\u6570\u5b57\u4e0a\u7ef4\u62a4\u7684\u4e0d\u4ec5\u662f\u5355\u70b9\u4fee\u6539+\u533a\u95f4\u6c42\u548c\uff0c\u8fd8\u6709\u533a\u95f4\u6700\u503c\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u53ea\u80fd\u8fdb\u884c\u6c42\u548c\uff0c\u4e0d\u80fd\u6c42\u533a\u95f4\u6700\u503c\uff0c\u6240\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5f88\u597d\u7684\u8282\u7701\u7801\u91cf\u3002\n\n\u65e2\u7136\u8fd9\u662f\u9053\u9ed1\u9898\uff0c\u90a3\u6765\u8fd9\u91cc\u7684\u4eba\u4e00\u5b9a\u90fd\u4f1a\u73c2\u6735\u8389\u6811\u548c\u7ebf\u6bb5\u6811\u4e86\u5427\uff0c\u6240\u4ee5\u6211\u5c31\u4e0d\u5728\u8fd9\u91cc\u8bb2\u89e3\u8fd9\u4e24\u79cd\u6570\u636e\u7ed3\u6784\u4e86\u3002\n\n### Code\n\n```c++\n#include<bits/stdc++.h>\n#define mem(a,b) memset(a,b,sizeof a)\n#define LC (k<<1)\n#define RC ((k<<1)|1)\nusing namespace std;\ntemplate<typename T> void read(T &k)\n{\n    k=0;T flag=1;char b=getchar();\n    while (!isdigit(b)) {flag=(b=='-')?-1:1;b=getchar();}\n    while (isdigit(b)) {k=k*10+b-48;b=getchar();}\n    k*=flag;\n}\nconst int _SIZE=1e5,_MAXN=1e4;\nint n,m,c;\nint sum[(_SIZE<<2)+5],minn[(_SIZE<<2)+5],maxn[(_SIZE<<2)+5];\nint num[_SIZE+5],col[_SIZE+5];\nint mp[_MAXN+5];\nvoid pushup(int k) //\u7ebf\u6bb5\u6811\u6807\u51c6\u64cd\u4f5c\n{\n    sum[k]=sum[LC]+sum[RC];\n    minn[k]=min(minn[LC],minn[RC]);\n    maxn[k]=max(maxn[LC],maxn[RC]);\n}\nvoid buildSeq(int k,int l,int r)\n{\n    if (l==r)\n    {\n        sum[k]=minn[k]=maxn[k]=num[l];\n        return;\n    }\n    int mid=l+r>>1;\n    buildSeq(LC,l,mid);\n    buildSeq(RC,mid+1,r);\n    pushup(k);\n}\nvoid update(int k,int l,int r,int pos,int v)\n{\n    if (l==r && l==pos)\n    {\n        sum[k]=minn[k]=maxn[k]=v;\n        return;\n    }\n    if (l>pos || r<pos) return;\n    int mid=l+r>>1;\n    update(LC,l,mid,pos,v);\n    update(RC,mid+1,r,pos,v);\n    pushup(k);\n}\nint querySum(int k,int l,int r,int a,int b)\n{\n    if (l>b || r<a) return 0;\n    if (l>=a && r<=b) return sum[k];\n    int mid=l+r>>1;\n    return querySum(LC,l,mid,a,b)+querySum(RC,mid+1,r,a,b);\n}\nint queryMin(int k,int l,int r,int a,int b)\n{\n    if (l>b || r<a) return INT_MAX;\n    if (l>=a && r<=b) return minn[k];\n    int mid=l+r>>1;\n    return min(queryMin(LC,l,mid,a,b),queryMin(RC,mid+1,r,a,b));\n}\nint queryMax(int k,int l,int r,int a,int b)\n{\n    if (l>b || r<a) return -1;\n    if (l>=a && r<=b) return maxn[k];\n    int mid=l+r>>1;\n    return max(queryMax(LC,l,mid,a,b),queryMax(RC,mid+1,r,a,b));\n}\nstruct NODE{//\u73c2\u6735\u8389\u6811\u6807\u51c6\u64cd\u4f5c\n    int l,r;\n    mutable int v;\n    NODE (int l,int r=0,int v=0) : l(l),r(r),v(v) {}\n    bool operator< (const NODE &a) const {return l<a.l;}\n};\nset<NODE> ctlt;\nauto split(int pos)\n{\n    auto it=ctlt.lower_bound(NODE(pos));\n    if (it!=ctlt.end() && it->l==pos) return it;\n    it--;\n    if (it->r<pos) return ctlt.end();\n    int l=it->l,r=it->r,v=it->v;\n    ctlt.erase(it);\n    ctlt.insert(NODE(l,pos-1,v));\n    return ctlt.insert(NODE(pos,r,v)).first;\n}\nvoid assign(int l,int r,int v)\n{\n    auto itr=split(r+1),itl=split(l);\n    ctlt.erase(itl,itr);\n    ctlt.insert(NODE(l,r,v));\n}\nvoid buildCtlt() {for (int i=1;i<=n;i++) ctlt.insert(NODE(i,i,col[i]));}//\u76f4\u63a5\u628a\u6bcf\u4e2a\u989c\u8272\u770b\u4f5c\u533a\u95f4[i,i]\u7684\u989c\u8272col[i]\nint query3(int l,int r)//\u64cd\u4f5c3\n{\n    mem(mp,0);//mp \u7528\u4e8e\u8bb0\u5f55\u989c\u8272\u51fa\u73b0\u6b21\u6570\n    auto itr=split(r+1),itl=split(l);\n    auto L=itl,R=itl;int cnt=0,ans=INT_MAX;\n    for (;L!=itr;L++)\n    {\n        while (R!=itr && cnt!=c)//\u53ef\u4ee5\u53f3\u79fbr\n        {\n            if (!mp[R->v]++) cnt++;//\u52a0\u5165\u8fd9\u70b9\u7684\u989c\u8272\n            R++;\n        }\n        R--;//\u4e0a\u9762\u5faa\u73af\u7ed3\u675f\u7684\u65f6\u5019\u662f\u5df2\u7ecf\u4e0d\u7b26\u5408\u6761\u4ef6\u4e86\uff0c\u6240\u4ee5R--\u6765\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u533a\u95f4\n        if (cnt==c)\n        {\n            if (L==R) ans=min(ans,queryMin(1,1,n,L->l,L->r));//c=1\u7684\u60c5\u51b5\n            else ans=min(ans,querySum(1,1,n,L->r,R->l));\n        }\n        R++;\n        if (!--mp[L->v]) cnt--;//\u53bb\u9664l\u533a\u95f4\n    }\n    return ans==INT_MAX?-1:ans;//\u5982\u679c\u4e00\u6b21\u7b54\u6848\u90fd\u6ca1\u6709\u66f4\u65b0\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709\u7b54\u6848\uff0c\u8fd4\u56de-1\n}\nint query4(int l,int r)//\u64cd\u4f5c4\n{\n    mem(mp,0);//\u8bb0\u5f55\u989c\u8272\n    auto itr=split(r+1),itl=split(l);\n    auto L=itl,R=itl;\n    int ans=queryMax(1,1,n,l,r);//\u521d\u59cb\u5316\u4e3a\u533a\u95f4\u6700\u5927\u503c\n    for (;L!=itr;L++)\n    {\n        if (L==R) mp[R->v]++,R++;//\u5982\u679c\u5de6\u53f3\u7aef\u70b9\u5728\u540c\u4e00\u533a\u95f4\uff0c\u76f8\u5f53\u4e8e\u53ea\u53d6\u4e00\u4e2a\u70b9\uff0c\u5df2\u7ecf\u8003\u8651\u8fc7\u4e86\u6240\u4ee5\u53f3\u79fbR\n        while (R!=itr && !mp[R->v] && R->r-R->l+1==1) mp[R->v]++,R++;//\u4e0d\u65ad\u52a0\u5165\u957f\u5ea6\u4e3a1\u7684\u533a\u95f4\n        bool AddNew=0;//\u8bb0\u5f55\u662f\u5426\u52a0\u5165\u4e86\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e1\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\n        if (R!=itr && !mp[R->v]) mp[R->v]++,AddNew=1,R++;//\u53ef\u4ee5\u52a0\u5165\n        R--;\n        if (L!=R) ans=max(ans,querySum(1,1,n,L->r,R->l));//\u66f4\u65b0\u7b54\u6848\n        mp[L->v]--;//\u6e05\u9664l\u7684\u5f71\u54cd\n        if (AddNew) mp[R->v]--,R--;//\u6e05\u9664\u53f3\u4fa7\u533a\u95f4\u7684\u5f71\u54cd\n        R++;\n    }\n    return ans;\n}\nint main()\n{\n    read(n),read(m),read(c);\n    for (int i=1;i<=n;i++) read(num[i]);\n    for (int i=1;i<=n;i++) read(col[i]);\n    buildSeq(1,1,n);//\u5efa\u7ebf\u6bb5\u6811\n    buildCtlt();//\u5efa\u73c2\u6735\u8389\u6811\n    for (int i=1;i<=m;i++)\n    {\n        int op,x,y,l,r;read(op);\n        if (op==1)\n        {\n            read(x),read(y);\n            update(1,1,n,x,y);\n        }\n        else if (op==2)\n        {\n            read(l),read(r),read(y);\n            assign(l,r,y);\n        }\n        else if (op==3)\n        {\n            read(l),read(r);\n            printf(\"%d\\n\",query3(l,r));\n        }\n        else \n        {\n            read(l),read(r);\n            printf(\"%d\\n\",query4(l,r));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1659687965,
        "uid": 345225,
        "name": "Hanx16QwQ",
        "ccfLevel": 0,
        "title": "P5251 [LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P5251)\n\n\u8fd9\u9898\u5b9e\u9645\u4e0a\u662f\u4e00\u9053\u5341\u5206\u8003\u5bdf\u7efc\u5408\u80fd\u529b\u7684\u9898\u76ee\uff0c\u4e0d\u4ec5\u9700\u8981\u624e\u5b9e\u7684\u6570\u636e\u7ed3\u6784\u80fd\u529b\uff0c\u4e5f\u9700\u8981\u6bd4\u8f83\u7ec6\u81f4\u7684\u601d\u7ef4\u3002\n\n\u9996\u5148\uff0c\u770b\u5230\u8fd9\u9053\u9898\uff0c\u7b2c\u4e00\u773c\u7ffb\u5230\u4e86\u6570\u636e\u8303\u56f4\uff0c\u770b\u5230\u4e86**\u6570\u636e\u5b8c\u5168\u968f\u673a**\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u796d\u51fa\n\n### \u73c2\u6735\u8389\u6811!!!\n\n\u6709\u4e0d\u719f\u6089\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u767e\u5ea6\u73c2\u6735\u8389\u6811\u5b66\u4e60\n~~\u8fd9\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2a\u4f18\u96c5\u7684\u66b4\u529b~~\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u989c\u8272\u5e8f\u5217\uff0c\u4f46\u662f\u5f88\u663e\u7136\u989c\u8272\u5e8f\u5217\u548c\u6570\u503c\u5e8f\u5217\u5173\u7cfb\u4e0d\u5927\uff0c\u53ef\u4ee5\u5206\u5f00\u7ef4\u62a4\u3002\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6574\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6570\u5217\n\n\u63a5\u4e0b\u6765\u8bf4\u4e00\u4e0b\u56db\u4e2a\u64cd\u4f5c\uff1a\\\n\u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\\\n\u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u6211\u4eec\u7528\u73c2\u6735\u8389\u6811\u533a\u95f4\u63a8\u5e73\\\n\u5bf9\u4e8e\u64cd\u4f5c3\uff0c\u6211\u4eecsplit\u5b8c\u533a\u95f4\u4e4b\u540e\u7528\u53cc\u6307\u9488\uff0c\u67e5\u8be2\u6240\u6709\u53ef\u80fd\u7684\u533a\u95f4\u548c\u7684\u6700\u5c0f\u503c\\\n\u5bf9\u4e8e\u64cd\u4f5c4\u540c\u7406\uff0c\u6211\u4eec\u7528\u53cc\u6307\u9488\u67e5\u8be2\u6240\u6709\u4e0d\u5305\u542b\u91cd\u590d\u989c\u8272\u7684\u533a\u95f4\u548c\u6700\u5927\u503c\u3002\n\n$tips:$ \u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\u90fd\u4f7f\u7528memset\uff0c\u663e\u7136\u590d\u6742\u5ea6\u4e0d\u53ef\u63a5\u53d7\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2avector\u6765\u8bb0\u5f55\u6211\u4eec\u6240\u6709\u4fee\u6539\u8fc7\u7684\u70b9\uff0c\u6700\u540e\u76f4\u63a5\u904d\u5386vector\u6e05\u96f6\u6211\u4eec\u7684\u4fee\u6539\u3002**\u5b9e\u6d4b\uff0c\u901f\u5ea6\u5feb\u4e861\u500d\u3002**\n\n\u7136\u540e\u4e0a\u4ee3\u7801\uff08\u6709\u4e9b\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\u6211\u90fd\u5199\u5230\u4e86\u6ce8\u91ca\u91cc\uff09\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=0;\nconst int mod=1e9+7;\nnamespace io{\n    inline ll read(){\n        register ll res=0,f=1;\n        register char ch=getchar();\n        if (ch=='-')\tf=-1;\n        while (ch<'0'||ch>'9'){\n            ch=getchar();\n            if (ch=='-')\tf=-1;\n        }\n        while (ch>='0'&&ch<='9'){\n            res=res*10+ch-'0';\n            ch=getchar();\n        }\n        return res*f;\n    }\n    void put(ll a){\n        if (a<0){\n            a=-a;\n            putchar('-');\n        }\n        if (a/10){\n            put(a/10);\n        }\n        putchar(a%10+'0');\n    }\n    template<typename T>\n    void write(T a){\n        if (typeid(a)==typeid(int)||typeid(a)==typeid(ll)){\n            put(a);\n        }\n        if (typeid(a)==typeid(char)){\n            putchar(a);\n        }\n    }\n    template<typename T>\n        void writearr(T a,int len){\n        for (int i=1;i<=len;i++){\n            write(a[i]);\n            write(' ');\n        }\n        write('\\n');\n    }\n    template<typename T>\n    void readarr(T &a,int len){\n        for (int i=1;i<=len;i++){\n            a[i]=read();\n        }\n    }\n}\nusing namespace io;\nstruct node{\n    int l;\n    int r;\n    mutable ll val;\n    bool operator < (const node a)const{\n        return l<a.l;\n    }\n    node(int lp,int rp,ll lv){\n        l=lp;\n        r=rp;\n        val=lv;\n    }\n    node(int lp){\n        l=lp;\n    }\n};\nint a[100001],b[100001];\n#define it set<node>::iterator\nclass Chtholly_Tree{\n    set<node> s;\n    public:\n    it split(int pos){\n        it tmp=s.lower_bound(node(pos));\n        if (tmp!=s.end()&&tmp->l==pos){\n            return tmp;\n        }\n        tmp--;\n        int l=tmp->l,r=tmp->r;\n        ll val=tmp->val;\n        s.erase(tmp);\n        s.insert(node(l,pos-1,val));\n        return s.insert(node(pos,r,val)).first;\n    }\n    void debug(int n){\n        for (it i=s.begin();i!=s.end();i++){\n            printf(\"l:%d r:%d val:%lld\\n\",i->l,i->r,i->val);\n        }\n    }\n    void assign(int l,int r,ll val){\n        it itr=split(r+1),itl=split(l);\n        s.erase(itl,itr);\n        s.insert(node(l,r,val));\n    }\n    Chtholly_Tree(int a[],int l,int n){\n        for (int i=1;i<=l;i++){\n            s.insert(node(i,i,a[i]%mod));\n        }\n        s.insert(node(n+1,n+1,0));\n    }\n};\nstruct Node{\n    int l,r;\n    int sum;\n    int mmax;\n    int mmin;\n}s[400001];\nclass Segment_Tree{\n    void pushup(int num){\n        s[num].mmin=min(s[num*2].mmin,s[num*2+1].mmin);\n        s[num].mmax=max(s[num*2].mmax,s[num*2+1].mmax);\n        s[num].sum=s[num*2].sum+s[num*2+1].sum;\n    }\n    void build(int num,int l,int r){\n        s[num].l=l;\n        s[num].r=r;\n        if (l==r){\n            s[num].sum=s[num].mmin=s[num].mmax=a[l];\n            return;\n        }\n        int mid=(l+r)/2;\n        build(num*2,l,mid);\n        build(num*2+1,mid+1,r);\n        pushup(num);\n    }\n    public:\n    void change(int num,int l,int r,int val){\n        if (s[num].l>=l&&s[num].r<=r){\n            s[num].sum=s[num].mmax=val;\n            return;\n        }\n        int mid=(s[num].l+s[num].r)/2;\n        if (l<=mid) change(num*2,l,r,val);\n        if (r>mid)  change(num*2+1,l,r,val);\n        pushup(num);\n    }\n    int asksum(int num,int l,int r){\n        if (s[num].l>=l&&s[num].r<=r){\n            return s[num].sum;\n        }\n        int res=0;\n        int mid=(s[num].l+s[num].r)/2;\n        if (l<=mid) res+=asksum(num*2,l,r);\n        if (r>mid)  res+=asksum(num*2+1,l,r);\n        return res;\n    }\n    int askmax(int num,int l,int r){\n        if (s[num].l>=l&&s[num].r<=r){\n            return s[num].mmax;\n        }\n        int res=0;\n        int mid=(s[num].l+s[num].r)/2;\n        if (l<=mid) res=max(res,askmax(num*2,l,r));\n        if (r>mid)  res=max(res,askmax(num*2+1,l,r));\n        return res;\n    }\n    int askmin(int num,int l,int r){\n        if (s[num].l>=l&&s[num].r<=r){\n            return s[num].mmin;\n        }\n        int res=0x3f3f3f3f;\n        int mid=(s[num].l+s[num].r)/2;\n        if (l<=mid) res=min(res,askmin(num*2,l,r));\n        if (r>mid)  res=min(res,askmin(num*2+1,l,r));\n        return res;\n    }\n    Segment_Tree(int n){\n        build(1,1,n);\n    }\n};\nint n,m,c;\nint cal[100001];\nvector<int> del;\nvoid solve(){\n    n=read();m=read();c=read();\n    readarr(a,n);\n    readarr(b,n);\n    Segment_Tree smt(n);\n    Chtholly_Tree odt(b,n,n);\n    int op;\n    while (m--){\n        op=read();\n        switch (op){\n            case 1:{\n                int x=read(),y=read();\n                //\u6309\u7167\u9898\u610f\uff0c\u7528\u7ebf\u6bb5\u6811\u4fee\u6539\n                smt.change(1,x,x,y);\n                break;\n            }\n            case 2:{\n                int l=read(),r=read(),y=read();\n                //\u7528\u73c2\u6735\u8389\u6811\u63a8\u5e73\n                odt.assign(l,r,y);\n                break;\n            }\n            case 3:{\n                int l=read(),r=read();\n                if (c==1){\n                    //\u5982\u679cc=1\uff0c\u9700\u8981\u7279\u5224\uff0c\u76f4\u63a5\u8f93\u51fa\u533a\u95f4\u7684\u548c\u5373\u53ef\uff0c\u56e0\u4e3a\u53cd\u6b63\u53ea\u6709\u4e00\u79cd\u989c\u8272\n                    write(smt.askmin(1,l,r));\n                    write('\\n');\n                    break;\n                }\n                del.clear();\n                it itr=odt.split(r+1),itl=odt.split(l);\n                int res=0x3f3f3f3f,sum=0;\n                for (it i=itl;i!=itr;){\n                    cal[i->val]++;\n                    //\u6807\u8bb0\u6307\u9488\u4e4b\u95f4\u8fd9\u79cd\u989c\u8272\u591a\u4e86\u4e00\u4e2a\n                    del.push_back(i->val);\n                    if (cal[i->val]==1) sum++;\n                    //sum\u662f\u5df2\u7ecf\u5305\u542b\u7684\u989c\u8272\u6570\u91cf\n                    while (sum==c){//\u7ef4\u62a4\u53cc\u6307\u9488\uff0c\u8fd9\u4e00\u6bb5\u6ee1\u8db3\u9898\u610f\u624d\u80fd\u7b97\n                        //\u5f53\u6ee1\u8db3\u9898\u610f\u65f6\uff0c\u7531\u4e8e\u6570\u90fd\u662f\u6b63\u7684\uff0c\u56e0\u6b64\u5de6\u6307\u9488\u8d8a\u9760\u53f3\u8d8a\u597d\n                        res=min(res,smt.asksum(1,itl->r,i->l));\n                        cal[itl->val]--;\n                        if (cal[itl->val]==0)   sum--;\n                        itl++;\n                    }\n                    i++;\n                }\n                if (res==0x3f3f3f3f){\n                    write(-1);\n                    write('\\n');\n                }\n                else{\n                    write(res);\n                    write('\\n');\n                }\n                for (int i=0;i<del.size();i++){\n                    cal[del[i]]=0;\n                }\n                break;\n            }\n            case 4:{\n                int l=read(),r=read();\n                del.clear();\n                it itr=odt.split(r+1),itl=odt.split(l);\n                int res=smt.askmax(1,l,r);\n                for (it i=itl;i!=itr;){\n                    cal[i->val]++;\n                    del.push_back(i->val);\n                    while (i!=itl&&cal[i->val]!=1){\n                        cal[itl->val]--;\n                        //\u8981\u6ce8\u610f\u4e0d\u80fd\u628a\u8fd9\u4e00\u6bb5\u989c\u8272\u5168\u526a\u6ca1,\u53ea\u7559\u4e00\u79cd\u989c\u8272\n                        itl++;\n                    }\n                    if (i!=itl){\n                        res=max(res,smt.asksum(1,itl->r,i->l));\n                    }\n                    if(i->l!=i->r){//\u8fd9\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\u4e0d\u4e3a1\n                        while (i!=itl){\n                            //\u7ee7\u7eed\u628a\u5de6\u8fb9\u6307\u9488\u53f3\u79fb\n                            cal[itl->val]--;\n                            itl++;\n                        }\n                    }\n                    i++;\n                }\n                write(res);\n                write('\\n');\n                for (int i=0;i<del.size();i++){\n                    cal[del[i]]=0;\n                }\n                break;\n            }\n        }\n    }\n}\nint main(){\n    solve();\n    return 0;\n}\n```\n\u6709\u4ec0\u4e48\u4e0d\u660e\u767d\u7684\u6b22\u8fce\u79c1\u4fe1\u672c\u849f\u84bb\u4e00\u8d77\u8ba8\u8bba\u54e6\n\n(((\u7b2c\u4e00\u7bc7\u9ed1\u9898\u9898\u89e3\uff0c\u5199\u7684\u5f88\u7528\u5fc3\uff0c\u5e0c\u671b\u5ba1\u6838\u5927\u5927\u7ed9\u8fc7",
        "postTime": 1632907590,
        "uid": 374821,
        "name": "ludan0414",
        "ccfLevel": 0,
        "title": "P5251\u9898\u89e3"
    },
    {
        "content": "ODT\u914d\u5408bit\u548csgt+\u53cc\u6307\u9488\u7edf\u8ba1\u4e00\u4e0b\u5c31\u5b8c\u4e86\u3002\n\n\u4e0d\u4f1aodt\u7684\u53ef\u4ee5\u770b[\u8fd9\u91cc](https://blog.csdn.net/dreaming__ldx/article/details/86551830)\n\n\u7136\u540e$bit$\u662f\u7528\u6765\u7ef4\u62a4\u533a\u95f4\u6570\u5b57\u548c\u7684\u3002\n\n\u7ebf\u6bb5\u6811\u662f\u7528\u6765\u7ef4\u62a4\u533a\u95f4\u6570\u5b57\u6700\u503c\u7684\u3002\n\n**\u5410\u69fd\uff1a\u8003\u573a\u4e0a\u8c03\u9898\u8c03\u7684\u5fc3\u6001\u7206\u70b8\uff0c\u7ed3\u679c\u6570\u636e\u9505\u4e86\uff1f\u6ca1\u4e8b\u8fc7\u4e86\u5c31\u884c**\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ri register int\nusing namespace std;\ninline int read(){\n    int ans=0;\n    char ch=getchar();\n    while(!isdigit(ch))ch=getchar();\n    while(isdigit(ch))ans=(ans<<1)+(ans<<3)+(ch^48),ch=getchar();\n    return ans;\n}\nconst int N=1e5+5;\nint n,m,c,a[N],b[N];\nstruct Node{\n    int l,r;\n    mutable int v;\n    Node(int l,int r=-1,int v=0):l(l),r(r),v(v){}\n    friend inline bool operator<(const Node&a,const Node&b){\n        return a.l<b.l;\n    }\n};\nset<Node>S;\ntypedef set<Node>::iterator It;\ninline It split(int pos){\n    It it=S.lower_bound(pos);\n    if(it!=S.end()&&it->l==pos)return it;\n    --it;\n    if(pos>it->r)return S.end();\n    int l=it->l,r=it->r,v=it->v;\n    S.erase(it);\n    S.insert(Node(l,pos-1,v));\n    return S.insert(Node(pos,r,v)).first;\n}\ninline void assign(int l,int r,int v){\n    It R=split(r+1),L=split(l);\n    S.erase(L,R),S.insert(Node(l,r,v));\n}\nnamespace Bit{\n    int bit[N];\n    inline int lowbit(const int&x){return x&-x;}\n    inline void update(int x,int v){for(ri i=x;i<=n;i+=lowbit(i))bit[i]+=v;}\n    inline int query(int x){int ret=0;for(ri i=x;i;i^=lowbit(i))ret+=bit[i];return ret;}\n    inline int query(int l,int r){return query(r)-query(l-1);}\n}\nnamespace SGT{\n    #define lc (p<<1)\n    #define rc (p<<1|1)\n    #define mid (l+r>>1)\n    int mn[N<<2],mx[N<<2];\n    inline void pushup(int p){mx[p]=max(mx[lc],mx[rc]),mn[p]=min(mn[lc],mn[rc]);}\n    inline void build(int p,int l,int r){\n        if(l==r){mx[p]=mn[p]=a[l];return;}\n        build(lc,l,mid),build(rc,mid+1,r),pushup(p);\n    }\n    inline int query(int p,int l,int r,int ql,int qr,bool f){\n        if(ql<=l&&r<=qr)return f?mn[p]:mx[p];\n        if(qr<=mid)return query(lc,l,mid,ql,qr,f);\n        if(ql>mid)return query(rc,mid+1,r,ql,qr,f);\n        return f?min(query(lc,l,mid,ql,qr,f),query(rc,mid+1,r,ql,qr,f)):max(query(lc,l,mid,ql,qr,f),query(rc,mid+1,r,ql,qr,f));\n    }\n    inline void update(int p,int l,int r,int k){\n        if(l==r){mx[p]=mn[p]=a[l];return;}\n        k<=mid?update(lc,l,mid,k):update(rc,mid+1,r,k),pushup(p);\n    }\n    #undef lc\n    #undef rc\n    #undef mid\n}\ninline int query1(int l,int r){\n    static int vis[101],cnt=0;\n    if(c==1)return SGT::query(1,1,n,l,r,1);\n    It R=split(r+1),L=split(l);\n    int ret=-1;\n    for(ri i=1;i<=c;++i)vis[i]=0;\n    cnt=0;\n    It ll=L,rr=L,tmp=R;\n    --rr;\n    --tmp;\n    for(;ll!=R;){\n        while(rr!=tmp&&cnt!=c){\n            ++rr;\n            ++vis[rr->v];\n            if(vis[rr->v]==1)++cnt;\t\t\n        }\n        if(cnt^c)break;\n        while(cnt==c){\n            --vis[ll->v];\n            if(vis[ll->v]==0){\n                if(ret==-1)ret=Bit::query(ll->r,rr->l);\n                else ret=min(ret,Bit::query(ll->r,rr->l));\n                --cnt;\n            }\n            ++ll;\n        }\n    }\n    return ret;\n}\ninline int query2(int l,int r){\n    static int vis[101];\n    It R=split(r+1),L=split(l);\n    int ret=SGT::query(1,1,n,l,r,0);\n    It ll=L,rr=L;\n    ++rr;\n    for(ri pos;rr!=R;){\n        vis[ll->v]=pos=ll->r;\n        It tmp=ll;\n        while(rr!=R){\n            if(vis[rr->v]){\n                ret=max(ret,Bit::query(max(vis[rr->v],pos),rr->l-1));\n                ret=max(ret,Bit::query(max(pos,vis[rr->v]+1),rr->l));\n                if(rr->l!=rr->r)break;\n                pos=max(pos,vis[rr->v]+1);\n                while(tmp->r!=vis[rr->v]){if(vis[tmp->v]==tmp->r)vis[tmp->v]=0;++tmp;}\n                vis[rr->v]=rr->r;\n                ++rr;\n                continue;\n            }\n            ret=max(ret,Bit::query(pos,rr->l));\n            if(rr->l!=rr->r)break;\n            vis[rr->v]=rr->r;\n            ++rr;\n        }\n        for(It tt=ll;tt!=rr;++tt)vis[tt->v]=0;\n        ll=rr,++rr;\n        if(ll==R)break;\n    }\n    return ret;\n}\nint main(){\n    n=read(),m=read(),c=read();\n    for(ri i=1;i<=n;++i)a[i]=read(),Bit::update(i,a[i]);\n    S.insert(Node(0,0,0));\n    for(ri i=1;i<=n;++i)b[i]=read(),S.insert(Node(i,i,b[i]));\n    S.insert(Node(n+1,n+1,c+1));\n    SGT::build(1,1,n);\n    for(ri op,l,r,x,y;m;--m){\n        op=read();\n        switch(op){\n            case 1:{\n                x=read(),y=read();\n                Bit::update(x,y-a[x]),a[x]=y,SGT::update(1,1,n,x);\n                break;\n            }\n            case 2:{\n                l=read(),r=read();\n                assign(l,r,read());\n                break;\n            }\n            case 3:{\n                l=read(),r=read();\n                cout<<query1(l,r)<<'\\n';\n                break;\n            }\n            case 4:{\n                l=read(),r=read();\n                cout<<query2(l,r)<<'\\n';\n                break;\n            }\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1552385233,
        "uid": 47765,
        "name": "ldxcaicai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5251 \u3010[LnOI2019]\u7b2c\u4e8c\u4ee3\u56fe\u7075\u673a\u3011"
    },
    {
        "content": "\u633a\u7b80\u5355\u7684\u4e00\u9053\u9898\uff0c\u611f\u89c9\u6709\u70b9\u6076\u8bc4\u3002\n\n**Solution**\uff1a\n\n\u4e00\u4e2a\u4e00\u4e2a\u64cd\u4f5c\u89e3\u51b3\u3002\n\n\u64cd\u4f5c\u4e00\uff1a\u4ec0\u4e48\u4e1c\u897f\u90fd\u80fd\u7ef4\u62a4\uff0c\u8df3\u8fc7\u3002\n\n\u64cd\u4f5c\u4e8c\uff1a\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\uff0c\u800c\u4e14\u9898\u76ee\u4e2d\u5199\u4e86\u4fdd\u8bc1\u6570\u636e\u968f\u673a\uff0c\u6240\u4ee5\u8003\u8651\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u3002\n\n\u64cd\u4f5c\u4e09\uff1a\n\n\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5de6\u7aef\u70b9\uff0c\u4ed6\u548c\u4ed6\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u53f3\u7aef\u70b9\u7ec4\u6210\u7684\u533a\u95f4\u6709\u53ef\u80fd\u662f\u7b54\u6848\uff0c~~\u663e\u7136~~\u56e0\u4e3a $a_i>0$ \u800c\u4e14\u8981\u6c42\u7b54\u6848\u6700\u5c0f\u3002\u800c\u4e14\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u5de6\u7aef\u70b9\uff0c\u4ed6\u53f3\u8fb9\u7684\u5de6\u7aef\u70b9\u5bf9\u5e94\u7684\u53f3\u7aef\u70b9\u5927\u4e8e\u7b49\u4e8e\u5b83\u5bf9\u5e94\u7684\u53f3\u7aef\u70b9\uff0c\u56e0\u4e3a\u5de6\u7aef\u70b9\u79fb\u52a8\u53ef\u80fd\u5bfc\u81f4\u6709\u79cd\u989c\u8272\u6d88\u5931\uff0c\u7136\u540e\u5c31\u9700\u8981\u53f3\u7aef\u70b9\u53bb\u627e\u90a3\u4e2a\u989c\u8272\u3002\u6240\u4ee5\u8003\u8651\u53cc\u6307\u9488\uff0c\u7136\u540e\u6c42\u548c\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u6216\u7ebf\u6bb5\u6811\u90fd\u53ef\u4ee5\uff0c\u5f53\u7136\u5206\u5757\u5e94\u8be5\u4e5f\u53ef\u4ee5\uff0c\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u88ab\u5361\u3002\n\n\u64cd\u4f5c\u56db\uff1a\n\n\u4e00\u6837\u6709\u6ee1\u8db3\u53cc\u6307\u9488\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u4e00\u6837\u8003\u8651\u4e0a\u8ff0\u66b4\u529b\u3002\u5f53\u7136\uff0c\u8fd9\u91cc\u4e0d\u4e00\u5b9a\u9700\u8981\u53cc\u6307\u9488\u3002\n\n\u63a5\u4e0b\u6765\u8bb2\u4e00\u4e0b\u672c\u9898\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u7528\u53cc\u6307\u9488\uff1a\n\n\u5728\u51fa\u9898\u4eba\u7684\u535a\u5ba2\u4e2d\u8bb2\u5230\uff1a\u7531\u4e8e\u7528\u4e86\u73c2\u6735\u8389\u6811\uff0c\u672c\u9898\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5e94\u7684\u533a\u95f4\u6570\u662f $O(\\log n)$ \u4e2a\uff0c**\u8fd9\u662f\u9519\u8bef\u7684**\uff0cCF \u4e0a\u7684\u67d0\u4f4d\u5927\u4f6c\u5728 CF896E \u4e2d\u63d0\u5230\u5728\u7b2c $k$ \u6b21\u64cd\u4f5c\u65f6\u533a\u95f4\u6570\u7684\u671f\u671b\u662f $O(\\frac{n}{k})$\uff0c\u603b\u6570\u91cf\u7684\u671f\u671b\u4e3a $O(n\\ln n)$\uff0c\u800c\u524d\u51e0\u6b21\u64cd\u4f5c\u7684\u533a\u95f4\u6570\u53ef\u80fd\u4e3a $O(n)$\uff0c\u6240\u4ee5\u672c\u9898\u7684\u53cc\u6307\u9488\u505a\u6cd5\u662f**\u5047\u7684**\u3002\n\n\u4f46\u662f\u7531\u4e8e\u672c\u9898\u7684 $c_i$ \u5f88\u5c0f\uff0c\u6240\u4ee5\u64cd\u4f5c\u56db\u7684\u66b4\u529b\u4e0d\u4f1a\u88ab\u5361\u3002\u800c\u4e14\u7531\u4e8e\u6570\u636e\u968f\u673a\uff0c\u64cd\u4f5c\u4e09\u5199\u66b4\u529b\u4e5f\u80fd\u8fc7\uff0c\u53ea\u662f\u5e38\u6570\u5f88\u5927\u3002\u6ce8\u610f\u5230\u8fd9\u91cc\u7684 $c_i$ \u5f88\u5c0f\uff0c\u5982\u679c\u5728\u5f00\u59cb\u5bf9\u76f8\u90bb\u7684\u76f8\u540c\u7684\u989c\u8272\u5408\u5e76\uff0c~~\u5e94\u8be5\u80fd\u78be\u6807\u7b97\uff08\u6570\u636e\u968f\u673a\uff09~~\u3002\n\n\u5efa\u8bae\u624b\u9020\u51e0\u7ec4\u5361\u66b4\u529b\u7684\u6570\u636e $+$ \u628a $c_i$ \u7684\u8303\u56f4\u5f00\u5927\u70b9\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define wr(x,ch) write(x),putchar(ch)\nusing namespace std;\nnamespace IO{\n}\nusing IO::read;\nusing IO::write;\nconst int N=200005;\nint c[N],n,m,C,op,l,r,x,cnt[N],ans;\nstruct Snode {\n\tint l,r,c;\n\tbool operator<(const Snode &p) const {return l<p.l;}\n};set<Snode> b;\nauto split(int x) {\n\tif(x>n) return b.end();\n\tauto it=--b.upper_bound((Snode){x,x});\n\tint l=it->l,r=it->r,c=it->c;\n\tif(x==l) return it;\n\tb.erase(it);\n\tb.insert((Snode){l,x-1,c});\n\treturn b.insert((Snode){x,r,c}).first;\n}\nstruct Others {\n\tstruct node {int sum,Max,Min;}tr[N<<1];\n\tvoid pushup(int p) {\n\t\ttr[p].sum=tr[p<<1].sum+tr[p<<1|1].sum;\n\t\ttr[p].Max=max(tr[p<<1].Max,tr[p<<1|1].Max);\n\t\ttr[p].Min=min(tr[p<<1].Min,tr[p<<1|1].Min);\n\t}void build(int l,int r,int p) {\n\t\tif(l==r) {\n\t\t\ttr[p].Max=tr[p].Min=tr[p].sum=read();\n\t\t\treturn ;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tbuild(l,mid,p<<1),build(mid+1,r,p<<1|1);\n\t\tpushup(p);\n\t}int getsum(int s,int t,int l,int r,int p) {\n\t\tif(s<=l&&r<=t) return tr[p].sum;\n\t\tint mid=l+r>>1,ans=0;\n\t\tif(s<=mid) ans+=getsum(s,t,l,mid,p<<1);\n\t\tif(t>mid) ans+=getsum(s,t,mid+1,r,p<<1|1);\n\t\treturn ans;\n\t}int getmax(int s,int t,int l,int r,int p) {\n\t\tif(s<=l&&r<=t) return tr[p].Max;\n\t\tint mid=l+r>>1,ans=0;\n\t\tif(s<=mid) ans=max(ans,getmax(s,t,l,mid,p<<1));\n\t\tif(t>mid) ans=max(ans,getmax(s,t,mid+1,r,p<<1|1));\n\t\treturn ans;\n\t}int getmin(int s,int t,int l,int r,int p) {\n\t\tif(s<=l&&r<=t) return tr[p].Min;\n\t\tint mid=l+r>>1,ans=0;\n\t\tif(s<=mid) ans=max(ans,getmin(s,t,l,mid,p<<1));\n\t\tif(t>mid) ans=max(ans,getmin(s,t,mid+1,r,p<<1|1));\n\t\treturn ans;\n\t}void modify(int x,int y,int l,int r,int p) {\n\t\tif(l==r) {\n\t\t\ttr[p].sum=tr[p].Max=tr[p].Min=y;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tif(x<=mid) modify(x,y,l,mid,p<<1);\n\t\telse modify(x,y,mid+1,r,p<<1|1);\n\t\tpushup(p);\n\t}\n}d;\nint main() {\n\tn=read(),m=read(),C=read();\n\td.build(1,n,1);\n\tfor(int i=1;i<=n;i++) c[i]=read(),b.insert((Snode){i,i,c[i]});\n\twhile(m--) {\n\t\top=read(),l=read(),r=read();\n\t\t(op==2)&&(x=read());\n\t\tif(op==1) d.modify(l,r,1,n,1);\n\t\telse if(op==2) {\n\t\t\tauto itr=split(r+1),itl=split(l);\n\t\t\tb.erase(itl,itr);\n\t\t\tb.insert((Snode){l,r,x});\n\t\t}else if(op==3) {\n\t\t\tans=INT_MAX;\n\t\t\tauto itr=split(r+1),itl=split(l),tmp=itl;\n\t\t\tint sum=0;\n\t\t\tfor(auto lst=b.end(),i=itl;i!=itr;sum-=cnt[i->c]==1,cnt[i->c]--,lst=i++) {\n\t\t\t\tif(lst==tmp) {\n\t\t\t\t\tsum-=!--cnt[tmp->c]; \n\t\t\t\t\ttmp++;\n\t\t\t\t}\n\t\t\t\twhile(sum<C&&tmp!=itr) \n\t\t\t\t\tsum+=cnt[tmp->c]==0,cnt[tmp->c]++,tmp++;\n\t\t\t\tif(sum==C) {\n\t\t\t\t\ttmp--;\n\t\t\t\t\tif(tmp==i) ans=min(ans,d.getmin(i->l,i->r,1,n,1));\n\t\t\t\t\telse ans=min(ans,d.getsum(i->r,tmp->l,1,n,1));\n\t\t\t\t\ttmp++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",(ans==INT_MAX?-1:ans));\n\t\t\tfor(auto i=itl;i!=itr;i++) cnt[i->c]=0;\n\t\t}else {\n\t\t\tauto itr=split(r+1),itl=split(l);\n\t\t\tans=d.getmax(l,r,1,n,1);\n\t\t\tfor(auto &i=itl;i!=itr;i++) {\n\t\t\t\tauto tmp=i;tmp++;cnt[i->c]=1;\n\t\t\t\twhile(tmp!=itr&&tmp->l==tmp->r&&cnt[tmp->c]==0) cnt[tmp->c]=1,tmp++;\n\t\t\t\tif(tmp==itr) ans=max(ans,d.getsum(i->r,r,1,n,1));\n\t\t\t\telse if(cnt[tmp->c]) ans=max(ans,d.getsum(i->r,(tmp->l)-1,1,n,1));\n\t\t\t\telse ans=max(ans,d.getsum(i->r,tmp->l,1,n,1));\n\t\t\t\tfor(auto j=i;j!=tmp;j++) cnt[j->c]=0;\n\t\t\t} \n\t\t\tprintf(\"%d\\n\",ans);\n\t\t\t\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1660457431,
        "uid": 383791,
        "name": "Others",
        "ccfLevel": 7,
        "title": "P5251 \u9898\u89e3"
    }
]