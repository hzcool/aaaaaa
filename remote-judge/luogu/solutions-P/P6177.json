[
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u4f53\u9a8c](https://mrsrz.github.io/2020/03/06/lg6177/)\n\n\u8fd9\u91cc\u9700\u8981\u7528\u5230\u4e00\u79cd\u7b80\u5355\u7684\u6811\u5206\u5757\u6280\u5de7\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u6811\u4e0a\u6492\u70b9\u3002\n\n\u6211\u4eec\u8bbe\u4e00\u4e2a\u9608\u503c $S$\uff0c\u5e76\u8003\u8651\u5728\u6811\u4e0a\u9009\u62e9\u4e0d\u8d85\u8fc7 $\\frac n S$ \u4e2a\u70b9\u4f5c\u4e3a\u5173\u952e\u70b9\uff0c\u6ee1\u8db3\u6bcf\u4e2a\u5173\u952e\u70b9\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u7956\u5148\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $S$\u3002\n\n\u5728\u6811\u4e0a\u968f\u673a\u9009\u62e9 $\\frac n S$ \u4e2a\u70b9\uff0c\u671f\u671b\u8ddd\u79bb\u662f\u6b63\u786e\u7684\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u786e\u5b9a\u6027\u7b97\u6cd5\uff0c\u80fd\u591f**\u4e25\u683c\u4fdd\u8bc1\u4fdd\u8bc1**\u6bcf\u4e2a\u5173\u952e\u70b9\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u7956\u5148\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $S$\u3002\n\n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u6df1\u5ea6\u6700\u5927\u7684\u975e\u5173\u952e\u70b9\uff0c\u7136\u540e\u82e5\u5b83\u7684 $1\\sim S$ \u7ea7\u7956\u5148\u90fd\u4e0d\u662f\u5173\u952e\u70b9\uff0c\u5219\u6211\u4eec\u628a\u5b83\u7684 $S$ \u7ea7\u7956\u5148\u6807\u8bb0\u4e3a\u5173\u952e\u70b9\u3002\u7531\u6807\u8bb0\u8fc7\u7a0b\u53ef\u77e5\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $S$\uff0c\u5e76\u4e14\u6bcf\u6807\u8bb0\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u81f3\u5c11\u6709 $S$ \u4e2a\u70b9\u4e0d\u4f1a\u88ab\u6807\u8bb0\uff0c\u6240\u4ee5\u5173\u952e\u70b9\u6570\u91cf\u4e5f\u662f\u6b63\u786e\u7684\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8003\u8651\u4e00\u6761\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6240\u6709\u5173\u952e\u70b9 $x_1,x_2,x_3,\\ldots,x_k$\uff0c\u6211\u4eec\u7528 `bitset` \u7ef4\u62a4\u5b83\u4eec\u4e24\u4e24\u95f4\u51fa\u73b0\u7684\u989c\u8272\u3002\u5904\u7406\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u9012\u63a8\u7684\u65b9\u5f0f\uff0c\u5373 $b_{x_i,x_j}=b_{x_i,x_{j-1}}\\ \\mathrm{or}\\ b_{x_{j-1},x_j}$\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u7528 $O(S)$ \u7684\u65f6\u95f4\u6c42\u51fa\u76f8\u90bb\u4e24\u4e2a\u5173\u952e\u70b9\u7684 `bitset`\uff0c\u518d\u5904\u7406\u51fa\u4e24\u4e24\u4e4b\u95f4\u7684\u5373\u53ef\u3002\u7531\u4e8e\u8fd9\u6837\u7684\u70b9\u5bf9\u6700\u591a\u53ea\u6709 $\\frac{n^2}{S^2}$ \u5bf9\uff0c\u6240\u4ee5\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u4e3a $O(\\frac{n^2}S+\\frac{n^3}{w S^2})$\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u6c42\u89e3\u7b54\u6848\u3002\u4ee4 $t=\\mathrm{LCA}(u,v)$\u3002\u6211\u4eec\u5206\u522b\u6c42\u51fa $u,v$ \u7684\u7956\u5148\u4e2d\u79bb $u,v$ \u6700\u8fd1\u7684\u5173\u952e\u70b9 $u_0,v_0$\uff0c \u4ee5\u53ca\u79bb $t$ \u6700\u8fd1\u4e14\u5728 $t$ \u5b50\u6811\u4e2d\u7684\u5173\u952e\u70b9 $u_1,v_1$\u3002\u90a3\u4e48\u4e00\u6761\u8def\u5f84\u88ab\u6211\u4eec\u62c6\u6210\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a$u\\sim u_0$\uff0c$v\\sim v_0$\uff0c$u_1\\sim t$\uff0c$v_1\\sim t$\uff0c$u_0\\sim u_1$\uff0c$v_0\\sim v_1$\u3002\u5bf9\u4e8e\u524d\u9762 $4$ \u79cd\uff0c\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u8df3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(S)$\u3002\u800c\u5bf9\u4e8e\u540e\u9762\u4e24\u79cd\uff0c\u6211\u4eec\u5df2\u7ecf\u9884\u5904\u7406\u5b83\u4eec\u7684 `bitset`\uff0c\u6240\u4ee5\u76f4\u63a5\u53d6\u5e76\u96c6\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\frac n w)$\u3002\u5f53\u7136\u6709\u53ef\u80fd\u51fa\u73b0 $u\\sim t$\uff0c$v\\sim t$ \u4e4b\u95f4\u6ca1\u6709\u5173\u952e\u70b9\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u76f4\u63a5\u8df3\u5230 $t$ \u5373\u53ef\u3002\n\n\u6700\u540e\u6c42\u989c\u8272\u4e2a\u6570\uff0c\u5c31\u8c03\u7528 `b.count()` \u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\frac n w)$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\frac{n^2}S+\\frac{n^3}{w S^2}+\\frac{nm}{w}+mS)$\u3002\u4e00\u822c\u5730\uff0c\u6211\u4eec\u53d6 $S=\\sqrt n$\uff0c\u5f97\u5230\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+m)\\sqrt n+\\frac{n^2+nm}w)$\u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6 $O(\\frac{n^3}{S^2})$\uff0c\u4e00\u822c\u5730\uff0c\u6211\u4eec\u53d6 $S=\\sqrt n$\uff0c\u5f97\u5230\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n^2)$\uff0c\u7531\u4e8e\u662f `bitset`\uff0c\u6240\u4ee5\u6709\u8f83\u5c0f\u7684\u7a7a\u95f4\u5e38\u6570\u3002\n\n\u7136\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53 $S$ \u7ebf\u6027\u589e\u957f\u65f6\uff0c\u65f6\u95f4\u5e38\u6570\u662f\u7ebf\u6027\u589e\u957f\u7684\uff0c\u800c\u5185\u5b58\u662f\u5e73\u65b9\u7ea7\u522b\u4e0b\u964d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u5757\u5927\u5c0f\u7684\u65b9\u5f0f\u6765**\u5361\u7a7a\u95f4**\u3002\n\n\u5728 $S$ \u53d6 $1000$ \u65f6\u4ec5\u7528\u4e86 $11.39\\texttt{MB}$\uff0c\u5df2\u7ecf\u662f\u5927\u591a\u6570\u5176\u4ed6\u505a\u6cd5\u7684\u7ea6 $\\frac 1 {10}$\uff0c\u518d\u7ee7\u7eed\u5361\u6ca1\u6709\u610f\u4e49\uff0c\u800c\u4e14\u4f1a\u589e\u52a0\u8017\u65f6\u3002[\u8bc4\u6d4b\u8bb0\u5f55]( https://www.luogu.com.cn/record/31379387 )\n\n## Code\uff1a\n\n```cpp\n#include<cstdio>\n#include<bitset>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nconst int N=40002;\nbitset<N>bt[42][42],nw;\nvector<int>vec;\nint n,m,B,a[N],fa[N],dep[N],mxd[N],FF[N],sz[N],tp[N],son[N];\nint id[N],cnt,head[N],tot,ans,sta[N],top,gg[N];\nstruct edge{\n\tint to,nxt;\n}e[N<<1];\nvoid dfs(int now){\n\tsz[now]=1,son[now]=0;\n\tmxd[now]=dep[now];\n\tfor(int i=head[now];i;i=e[i].nxt)if(!dep[e[i].to]){\n\t\tdep[e[i].to]=dep[now]+1,fa[e[i].to]=now;\n\t\tdfs(e[i].to),sz[now]+=sz[e[i].to];\n\t\tif(mxd[e[i].to]>mxd[now])mxd[now]=mxd[e[i].to];\n\t\tif(!son[now]||sz[son[now]]<sz[e[i].to])son[now]=e[i].to;\n\t}\n\tif(mxd[now]-dep[now]>=1000)id[now]=++tot,mxd[now]=dep[now];\n}\nvoid dfs2(int now){\n\tfor(int i=head[now];i;i=e[i].nxt)\n\tif(dep[e[i].to]>dep[now]){\n\t\tif(id[e[i].to]){\n\t\t\tint ip=id[sta[top]],in=id[e[i].to];\n\t\t\tfor(int x=e[i].to;x!=sta[top];x=fa[x])bt[ip][in].set(a[x]);\n\t\t\tnw=bt[ip][in];\n\t\t\tfor(int i=1;i<top;++i){\n\t\t\t\tbitset<N>&bs=bt[id[sta[i]]][in];bs=bt[id[sta[i]]][ip];bs|=nw;\n\t\t\t}\n\t\t\tFF[e[i].to]=sta[top],gg[e[i].to]=gg[sta[top]]+1;\n\t\t\tsta[++top]=e[i].to;\n\t\t}\n\t\tdfs2(e[i].to);\n\t\tif(id[e[i].to])--top;\n\t}\n}\nvoid dfs3(int now){\n\tif(son[now])tp[son[now]]=tp[now],dfs3(son[now]);\n\tfor(int i=head[now];i;i=e[i].nxt)if(e[i].to!=son[now]&&dep[e[i].to]>dep[now])\n\tdfs3(tp[e[i].to]=e[i].to);\n}\ninline int LCA(int x,int y){\n\twhile(tp[x]!=tp[y])if(dep[tp[x]]>dep[tp[y]])x=fa[tp[x]];else y=fa[tp[y]];\n\treturn dep[x]<dep[y]?x:y;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)scanf(\"%d\",a+i),vec.push_back(a[i]);\n\tsort(vec.begin(),vec.end()),vec.erase(unique(vec.begin(),vec.end()),vec.end());\n\tfor(int i=1;i<=n;++i)a[i]=lower_bound(vec.begin(),vec.end(),a[i])-vec.begin();\n\tfor(int i=1;i<n;++i){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\te[++cnt]=(edge){v,head[u]},head[u]=cnt;\n\t\te[++cnt]=(edge){u,head[v]},head[v]=cnt;\n\t}\n\tdfs(dep[1]=1);\n\tif(!id[1])id[1]=++tot;\n\tsta[top=1]=gg[1]=1,dfs2(1),dfs3(1);\n\twhile(m--){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v),u^=ans,nw.reset();\n\t\tint l=LCA(u,v);\n\t\twhile(u!=l&&!id[u])nw.set(a[u]),u=fa[u];\n\t\twhile(v!=l&&!id[v])nw.set(a[v]),v=fa[v];\n\t\tif(u!=l){\n\t\t\tint pre=u;\n\t\t\twhile(dep[FF[pre]]>=dep[l])pre=FF[pre];\n\t\t\tif(pre!=u)nw|=bt[id[pre]][id[u]];\n\t\t\twhile(pre!=l)nw.set(a[pre]),pre=fa[pre];\n\t\t}\n\t\tif(v!=l){\n\t\t\tint pre=v;\n\t\t\twhile(dep[FF[pre]]>=dep[l])pre=FF[pre];\n\t\t\tif(pre!=v)nw|=bt[id[pre]][id[v]];\n\t\t\twhile(pre!=l)nw.set(a[pre]),pre=fa[pre];\n\t\t}\n\t\tnw.set(a[l]);\n\t\tprintf(\"%d\\n\",ans=nw.count());\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1583434369,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6177 \u3010Count on a tree II/\u3010\u6a21\u677f\u3011\u6811\u5206\u5757\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u4e0d\u7528\u6811\u5206\u5757\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u4f7f\u7528 bitset\uff0c\u5bf9\u503c\u57df\u5efa bitset\uff0c\u663e\u7136\u7b54\u6848\u5c31\u662f bitset \u4e2d $1$ \u7684\u6570\u91cf\u3002\n\n\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u600e\u4e48\u628a\u4e00\u6761\u8def\u5f84\u4e0a\u7684 bitset \u5e76\u8d77\u6765\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f7b\u91cd\u94fe\u5256\u5206\u7ef4\u62a4\uff0c\u8be2\u95ee\u65f6\u5728\u628a\u7ecf\u8fc7\u7684\u82e5\u5e72\u6761\u91cd\u94fe\u4e0a\u7684 bitset \u5e76\u8d77\u6765\u5373\u53ef\u3002\n\n\u73b0\u5728\u53ea\u8981\u6c42\u51fa\u4e00\u6761\u91cd\u94fe\u4e0a\u67d0\u533a\u95f4\u5185\u7684 bitset\uff0c\u53d8\u6210\u4e86\u5e8f\u5217\u4e0a\u7684\u95ee\u9898\uff0c\u5bf9\u5e8f\u5217\u5206\u5757\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u5757\u4e2d\u6240\u6709 bitset \u7684\u5e76\uff0c\u8be2\u95ee\u65f6\u6563\u5757\u66b4\u529b\u5c06\u6570\u63d2\u5165 bitset \u5185\uff0c\u6574\u5757\u76f4\u63a5\u5e76\u4e0a\u9884\u5904\u7406\u51fa\u7684\u4fe1\u606f\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(m \\log n \\cdot \\sqrt{n} \\cdot \\dfrac{n}{w})$\uff0c\u663e\u7136\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u3002\n\n\u53d1\u73b0\u8fd9\u4e48\u505a\u7684\u74f6\u9888\u5728\u4e8e\u5bf9\u6574\u5757\u7684\u5408\u5e76\uff0c\u6700\u574f\u6709 $\\sqrt{n}$ \u4e2a\u6574\u5757\u8981\u5408\u5e76\uff0c\u6bcf\u6b21\u5408\u5e76\u590d\u6742\u5ea6\u662f $\\Theta(\\dfrac{n}{w})$ \u7684\uff0c\u5408\u8d77\u6765\u5c31\u662f $\\Theta(\\sqrt{n} \\cdot \\dfrac{n}{w})$ \u7684\u3002\n\n\u8003\u8651\u4f18\u5316\u8fd9\u4e00\u90e8\u5206\uff0c\u7531\u4e8e\u6ca1\u6709\u4fee\u6539\uff0c\u5e76\u4e14**\u6216\u8fd0\u7b97**\u662f\u53ef\u91cd\u590d\u8d21\u732e\u7684\uff0c\u6545\u53ef\u4ee5\u4f7f\u7528 ST \u8868\u52a0\u901f\u5408\u5e76\u6574\u5757\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e00\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u7531 $\\Theta(\\sqrt{n} \\cdot \\dfrac{n}{w})$ \u53d8\u4e3a $\\Theta(\\dfrac{n}{w})$\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a $\\Theta(m \\log n \\cdot \\dfrac{n}{w})$\uff0c\u4e4d\u4e00\u770b\u597d\u50cf\u8fd8\u662f\u8fc7\u4e0d\u53bb\uff0c\u4f46\u662f\u8fd9\u4e1c\u897f\u8dd1\u4e0d\u6ee1\uff0c\u800c\u4e14\u5e38\u6570\u5c0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\u751a\u81f3\u8dd1\u5230\u4e86[\u6700\u4f18\u89e3](https://www.luogu.com.cn/record/list?pid=P6177&orderBy=1&status=&page=1)\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <class T> void fr(T &a, bool f = 0, char ch = getchar()) {\n    for (a = 0; ch < '0' || ch > '9'; ch = getchar()) ch == '-' ? f = 1 : 0;\n    for (; ch >= '0' && ch <= '9'; ch = getchar()) a = a * 10 + (ch - '0');\n    a = f ? -a : a;\n}\ntemplate <class T, class... Y> void fr(T &t, Y &... a) { fr(t), fr(a...); }\nint fr() { int a; return fr(a), a; }\n\nconst int N = 4e4;\n\nint n, m, up, etot, bsz, lg2[N + 10], bid[N + 10], w[N + 10], arr[N + 10], a[N + 10], hd[N + 10];\nstruct Edge { int to, nxt; } e[(N << 1) + 10];\n\ninline void adde(register int x, register int y) { e[++etot] = {y, hd[x]}, hd[x] = etot; }\n\nstruct Bitset {\n    unsigned long long A[626];\n    inline Bitset operator|(Bitset b) const {\n        Bitset c;\n        for (register int i = 0; i <= up; i++) c.A[i] = A[i] | b.A[i];\n        return c;\n    }\n    inline void reset() { for (register int i = 0; i <= up; i++) A[i] = 0; }\n    inline void set(register int x) { A[x >> 6] |= 1ull << (x & 63); }\n    inline int count() {\n        register int ret = 0;\n        for (register int i = 0; i <= up; i++) ret += __builtin_popcountll(A[i]);\n        return ret;\n    }\n} ansor, f[9][201];\n\nvoid work(register int l, register int r) {\n    if (bid[l] == bid[r]) {\n        for (register int i = l; i <= r; i++) ansor.set(a[i]);\n        return;\n    }\n    for (register int i = l; bid[i] == bid[l]; i++) ansor.set(a[i]);\n    for (register int i = r; bid[i] == bid[r]; i--) ansor.set(a[i]);\n    if (bid[l] + 1 < bid[r]) {\n        register int t = lg2[bid[r] - bid[l] - 1];\n        ansor = ansor | f[t][bid[l] + 1] | f[t][bid[r] - (1 << t)];\n    }\n}\n\nnamespace TreeLink {\n    int timer, dfn[N + 10], sz[N + 10], fa[N + 10], dep[N + 10], ltop[N + 10], ch[N + 10];\n    void dfs1(register int u, register int p) {\n        sz[u] = 1, fa[u] = p, dep[u] = dep[p] + 1;\n        for (register int i = hd[u]; i; i = e[i].nxt) {\n            register int v = e[i].to;\n            if (v == p) continue;\n            dfs1(v, u), sz[u] += sz[v];\n            if (sz[v] > sz[ch[u]]) ch[u] = v;\n        }\n    }\n    void dfs2(register int u, register int p) {\n        ltop[u] = p, dfn[u] = ++timer, a[dfn[u]] = w[u], bid[dfn[u]] = (dfn[u] - 1) / bsz + 1, f[0][bid[dfn[u]]].set(w[u]);\n        if (ch[u] == 0) return;\n        dfs2(ch[u], p);\n        for (register int i = hd[u]; i; i = e[i].nxt) {\n            register int v = e[i].to;\n            if (v == fa[u] || v == ch[u]) continue;\n            dfs2(v, v);\n        }\n    }\n    void query(register int u, register int v) {\n        ansor.reset();\n        while (ltop[u] != ltop[v]) {\n            if (dep[ltop[u]] < dep[ltop[v]]) swap(u, v);\n            work(dfn[ltop[u]], dfn[u]), u = fa[ltop[u]];\n        }\n        if (dep[u] > dep[v]) swap(u, v);\n        work(dfn[u], dfn[v]);\n    }\n} // namespace TreeLink\nusing namespace TreeLink;\n\nstruct OI {\n    int RP, score;\n} FJOI2022;\n\nsigned main() {\n    FJOI2022.RP++, FJOI2022.score++;\n    fr(n, m), bsz = sqrt(n), up = n >> 6;\n    for (register int i = 1; i <= n; i++) fr(w[i]), arr[i] = w[i];\n    sort(arr + 1, arr + 1 + n), arr[0] = unique(arr + 1, arr + 1 + n) - arr - 1;\n    for (register int i = 1; i <= n; i++) w[i] = lower_bound(arr + 1, arr + 1 + arr[0], w[i]) - arr;\n    for (register int i = 1, x, y; i < n; i++) fr(x, y), adde(x, y), adde(y, x);\n    dfs1(1, 0), dfs2(1, 1);\n    for (register int i = 2; i <= bid[n]; i++) lg2[i] = lg2[i >> 1] + 1;\n    for (register int j = 1; j <= lg2[bid[n]]; j++) {\n        auto *x = f[j], *y = f[j - 1]; \n        for (register int i = 1; i + (1 << j) - 1 <= bid[n]; i++) x[i] = y[i] | y[i + (1 << (j - 1))];\n    }\n    for (register int i = 1, x, y, lstans = 0; i <= m; i++) fr(x, y), x ^= lstans, query(x, y), printf(\"%d\\n\", lstans = ansor.count());\n    return 0;\n}\n```",
        "postTime": 1638935245,
        "uid": 128141,
        "name": "Aestas16",
        "ccfLevel": 7,
        "title": "\u300c\u9898\u89e3\u300d[LG6177] Count on a tree II"
    },
    {
        "content": "top cluster \u6811\u5206\u5757\u7531\u4e8e\u5176\u590d\u6742\u6027\u548c\u5e38\u6570\u8f83\u5927\u7684\u539f\u56e0\uff0c\u4f7f\u7528\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u5e73\u51e1\u7684\u7b80\u6613\u6811\u5206\u5757\u3002\n\n\u8bbe\u5757\u957f\u4e3a $B$\u3002\u8003\u8651\u5982\u4e0b\u6784\u9020\uff1a\n\n* \u521d\u59cb\u5b58\u5728\u70b9\u96c6\u5305\u542b\u6574\u68f5\u6811\u3002 \n* \u53d6\u51fa\u70b9\u96c6\u4e2d\u5b50\u6811\u5927\u5c0f $size$ \u6700\u5927\u7684\u70b9 $x$\u3002\n* \u82e5 $size_x > B$\uff0c\u5219\u5220\u9664\u70b9\u96c6\u4e2d\u88ab\u5305\u542b\u5728 $x$ \u7684\u5b50\u6811\u4e2d\u4e14\u8ddd\u79bb $x$ \u4e0d\u8d85\u8fc7 $B$ \u7684\u70b9\u3002\u663e\u7136\uff0c\u8fd9\u91cc\u6807\u8bb0 $\\Omega (B)$ \u4e2a\u70b9\u3002\u7136\u540e\u5c06 $x$ \u52a0\u5165\u53e6\u4e00\u70b9\u96c6 $S$\u3002\n* \u82e5 $size_x \\le B$ \u6216\u70b9\u96c6\u4e3a\u7a7a\uff0c\u7ec8\u6b62\u8be5\u8fc7\u7a0b\u3002\n\n\u663e\u7136\uff0c\u4e0a\u9762\u5f97\u5230 $O(\\dfrac n B)$ \u4e2a\u70b9\u3002\n\n\u6700\u7ec8\u7684\u6811\u5206\u5757\u7ed3\u6784\u5373\u4e3a\u70b9\u96c6 $S$ \u7684\u865a\u6811 $T$ \u4e0a\u7684\u70b9\u3002\u79f0 $T$ \u4e2d\u7684\u70b9\u4e3a\u5173\u952e\u70b9\u3002\n\n\u663e\u7136\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n* \u6bcf\u4e2a\u70b9\u6700\u6df1\u7684\u4e3a\u5173\u952e\u70b9\u7684\u7956\u5148\u8ddd\u79bb\u5176\u8ddd\u79bb\u4e3a $O(B)$\u3002\n* \u6bcf\u4e2a\u5173\u952e\u70b9\u5230\u5176\u6700\u6df1\u7684\u4e3a\u5173\u952e\u70b9\u7684\u7956\u5148\u8ddd\u79bb\u4e4b\u548c $O(n)$\uff08\u865a\u6811\u94fe\u4e0d\u76f8\u4ea4\uff09\u3002\n\n### \u94fe\u4e0a\u6570\u989c\u8272\n\n\u9884\u5904\u7406\u4e24\u4e24\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u7b54\u6848\uff0c$O(\\dfrac {n^2} B)$\u3002\n\n\u8003\u8651 $x,y$ \u6700\u6df1\u7684\u4e3a\u5173\u952e\u70b9\u7684\u7956\u5148 $x',y'$\uff0c\u8def\u5f84\u62c6\u6210 $x \\to x' \\to y'\\to y$\u3002\n\n\u679a\u4e3e $x\\to x',y'\\to y$ \u4e0a\u7684\u70b9\uff0c\u6c42\u5176\u5728 $x'\\to y'$ \u4e0a\u7684\u51fa\u73b0\u6b21\u6570\u5373\u53ef\u3002\n\n\u8003\u8651\u865a\u6811\u7684\u7279\u6027\uff0c$z=lca(x',y')$ \u4e5f\u4e3a\u5173\u952e\u70b9\u3002\u5229\u7528\u6811\u4e0a\u524d\u7f00\u548c\u76f8\u51cf\u5373\u53ef\u3002$O(nB)$\u3002\n\n\u53d6 $B=\\Theta(\\sqrt n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt n)$\u3002\n\n### \u94fe\u4e0a\u9006\u5e8f\u5bf9\n\n\u4e3a\u4e86\u4f7f\u9898\u76ee\u66f4\u52a0\u7b80\u6d01\uff0c\u4ee4\u8fb9\u5e26\u6743\u800c\u5e76\u975e\u70b9\u5e26\u6743\u3002\n\n\u548c\u5e8f\u5217\u4e0a\u5b8c\u5168\u4e00\u81f4\u3002\u4ee4 $B=\\Theta (\\sqrt n)$\n\n\u9664\u4e86\u524d\u7f00\u548c\u53d8\u6210\u4e86\u6811\u4e0a\u7684\u4e4b\u5916\uff0c\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002",
        "postTime": 1648290036,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u4e00\u79cd\u7b80\u6613\u6811\u5206\u5757"
    },
    {
        "content": "### Count on a Tree II\n\n\u63a8\u8350\u5230 Luogu \u535a\u5ba2\u6216\u8005\u5230 [\u8fd9\u91cc](https://www.yijan.co/old60/) \u9605\u8bfb\n\n\u4ee5\u524d\u5199\u7684\u7528\u53ef\u6301\u4e45\u5316\u5206\u5757\u7ef4\u62a4\u3002\u3002\u65e2\u96be\u5199\u800c\u4e14\u5e38\u6570\u8fd8\u5927\u3002\u3002\u6700\u540e\u5728 Luogu \u8fd8\u662f\u5f00\u4e86\u8bfb\u4f18\u6302\u624d\u8dd1\u8fc7\u53bb\u7684\u3002\u3002\u611f\u89c9\u9898\u89e3\u533a\u7684 Bitset \u7ef4\u62a4\u6bd4\u6211\u8fd9\u4e2a\u4e0d\u77e5\u9053\u9ad8\u5230\u54ea\u91cc\u53bb\u4e86\u3002\u3002\n\n\u8003\u8651\u968f\u673a\u5728\u8fd9\u4e2a\u6811\u4e0a\u6253 $\\sqrt n$ \u4e2a\u70b9\u4f5c\u4e3a\u5173\u952e\u70b9\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u5411\u4e0a\u8df3\u627e\u5230\u7b2c\u4e00\u4e2a\u5173\u952e\u70b9\u7684\u671f\u671b\u957f\u5ea6\u662f $ \\sqrt n $ \u7684\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u6ca1\u90a3\u4e48\u7384\u5b66\u7684\u6253\u70b9\u65b9\u6cd5\uff0c\u7528\u6df1\u5ea6\u662f $\\sqrt n$ \u500d\u6570\u5e76\u4e14\u5411\u4e0b\u6700\u6df1\u6df1\u5ea6\u5927\u4e8e\u7b49\u4e8e\u6839\u53f7\u7684\u70b9\u6765\u6253\uff0c\u8fd9\u6837\u6253\u51fa\u6765\u70b9\u7684\u4e2a\u6570\u662f $\\sqrt n$ \u7684\u5e76\u4e14\u660e\u663e\u4ece\u6bcf\u4e2a\u70b9\u5411\u4e0a\u7684\u957f\u5ea6\u4e5f\u662f $\\sqrt n$ \u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u5148\u9884\u5904\u7406\u51fa\u5173\u952e\u70b9\u95f4\u4e24\u4e24\u7684\u7b54\u6848\uff0c\u505a\u6cd5\u662f\u4ece\u6bcf\u4e2a\u5173\u952e\u70b9\u8dd1\u4e00\u6b21 DFS \u3002\n\n\u7136\u540e\u8003\u8651\u4e00\u6b21\u8be2\u95ee\uff0c\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee\u6211\u4eec\u9700\u8981\u67e5\u8be2\u8fd9\u4e24\u4e2a\u70b9\u5230\u5173\u952e\u70b9\u7684\u8def\u5f84\u4e0a\u6709\u6ca1\u6709\u4ec0\u4e48\u989c\u8272\u662f\u4e0d\u5b58\u5728\u4e8e\u5173\u952e\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u6839\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u989c\u8272\u7684\u6570\u91cf\u3002\u76f4\u63a5\u4e3b\u5e2d\u6811\u7ef4\u62a4\u5f97\u5e26 $ \\log $ \u4e0d\u4f18\u79c0\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u6839\u53f7\u5e73\u8861\uff0c\u4fee\u6539 $O(\\sqrt n)$ \u67e5\u8be2 $O(1)$ \uff0c\u5957\u4e2a\u53ef\u6301\u4e45\u5316\u5c31\u597d\u4e86\u3002\n\n\u8fd8\u9700\u8981\u7528 ST \u8868 $ O(1) $ \u7ef4\u62a4 LCA\u3002\u8fd9\u6837\u505a\u590d\u6742\u5ea6\u5c31\u662f\u5728\u7ebf\u7684 $O(m\\sqrt n)$ \u4e86\uff08\u867d\u7136\u5e38\u6570\u6709\u70b9\u5927\uff09\u3002\u7a7a\u95f4\u662f $n\\sqrt n$ \u7684\u3002\n\n\u4ee3\u7801\u5199\u7684\u5f88\u4e11\u3002\u3002\n\n```cpp\n#include \"iostream\"\n#include \"algorithm\"\n#include \"cstring\"\n#include \"cstdio\"\n#include \"cmath\"\nusing namespace std;\n#define MAXN 40006\n#define B 206\n#define swap( a , b ) ( (a) ^= (b) , (b) ^= (a) , (a) ^= (b) )\nint n , m , blo , sz , bl;\nint c[MAXN] , C[MAXN];\nint head[MAXN] , to[MAXN << 1] , nex[MAXN << 1] , ecn;\nvoid ade( int u , int v ) {\n    to[++ ecn] = v , nex[ecn] = head[u] , head[u] = ecn;\n}\nint ps[B] , im[MAXN] , pre[B][B] , cid , ee;\nint w[MAXN] , an;\nvoid dfs( int u , int fa ) {\n    if( !w[c[u]] ) ++ an;\n    ++ w[c[u]];\n    if( im[u] ) pre[cid][im[u]] = an;\n    for( int i = head[u] ; i ; i = nex[i] ) {\n        int v = to[i];\n        if( v == fa ) continue;\n        dfs( v , u );\n    }\n    -- w[c[u]];\n    if( !w[c[u]] ) -- an;\n}\n\nint kk[MAXN << 2][B] , idx = 0 , rt[MAXN];\nvoid build( ) {\n    idx = rt[0] = 1;\n    for( int i = 1 ; ( i - 1 ) * bl < sz ; ++ i ) kk[1][i] = i + 1 , ++ idx;\n}\nvoid add( int rt , int old , int x ) {\n    memcpy( kk[rt] , kk[old] , sizeof kk[old] );\n    ++ idx;\n    memcpy( kk[idx] , kk[kk[rt][( x - 1 ) / bl + 1]] , sizeof kk[1] );\n    kk[rt][( x - 1 ) / bl + 1] = idx;\n    ++ kk[idx][( x - 1 ) % bl + 1];\n}\nint que( int rt , int x ) {\n    int t = kk[rt][( x - 1 ) / bl + 1];\n    return kk[t][( x - 1 ) % bl + 1];\n}\n\nint dfn[MAXN << 1] , dep[MAXN << 1] , pos[MAXN << 1] , en = 0 , d[MAXN] , par[MAXN];\nint dfs1( int u , int fa ) {\n    dfn[++en] = u , pos[u] = en , dep[en] = d[u] , par[u] = fa;\n    rt[u] = ++ idx;\n    add( rt[u] , rt[fa] , c[u] );\n    int re = 0;\n    for( int i = head[u] ; i ; i = nex[i] ) {\n        int v = to[i];\n        if( v == fa ) continue;\n        d[v] = d[u] + 1;\n        re = max( re , dfs1( v , u ) );\n        dfn[++ en] = u , dep[en] = d[u];\n    }\n    if( re - d[u] >= blo && d[u] % blo == 0 ) ps[++ ee] = u , im[u] = ee;\n    return re ? re : d[u];\n}\nint lg[MAXN << 1];\nint st[MAXN << 1][17];\nvoid ST() {\n    for( int i = 1 ; i <= en ; ++ i ) lg[i] = lg[i - 1] + (1 << lg[i - 1] == i);\n    for( int i = 1 ; i <= en ; ++ i ) st[i][0] = i;\n    for( int i = 1 ; ( 1 << i ) <= en ; ++ i )\n        for (int j = 1; j + (1 << i) - 1 <= en; j++)\n            st[j][i] = dep[st[j][i - 1]] < dep[st[j + (1 << (i - 1))][i - 1]] ? st[j][i - 1] : st[j + (1 << (i - 1))][i - 1];\n}\nint lca( int l , int r ) {\n    l = pos[l] , r = pos[r];\n    if( l > r ) swap( l , r );\n    int k = lg[r - l + 1] - 1;\n    return dep[st[l][k]] <= dep[st[r-(1<<k)+1][k]] ? dfn[st[l][k]] : dfn[st[r-(1<<k)+1][k]];\n}\nint col[MAXN] , cn , l;\nint jump( int u ) {\n    if( im[u] ) return im[u];\n    col[++ cn] = c[u];\n    if( u == l ) return -1;\n    return jump( par[u] );\n}\nint rejjump( int u ) {\n    if( im[u] ) return im[u];\n    col[++ cn] = c[u];\n    return rejjump( par[u] );\n}\nint oc[MAXN];\nint main() {\n//    freopen(\"10.in\",\"r\",stdin);\n//    freopen(\"ot\",\"w\",stdout);\n    cin >> n >> m;\n    blo = sqrt( n );\n    for( int i = 1 ; i <= n ; ++ i ) scanf(\"%d\",&c[i]) , C[i] = c[i];\n    sort( C + 1 , C + 1 + n ); sz = unique( C + 1 , C + 1 + n ) - C - 1;\n    bl = sqrt( sz );\n    for( int i = 1 ; i <= n ; ++ i ) c[i] = lower_bound( C + 1 , C + 1 + sz , c[i] ) - C;\n    for( int i = 1 , u , v ; i < n ; ++ i ) {\n        scanf(\"%d%d\",&u,&v);\n        ade( u , v ) , ade( v , u );\n    }\n    build( );\n    dfs1( 1 , 0 );\n//    cout << que( rt[3] , 3 ) << endl;\n    ST( );\n    for( int i = 1 ; i <= blo ; ++ i ) {\n        int p = ps[i]; cid = i;\n        dfs( p , p );\n    }\n    int u , v , psu , psv , flg = 0 , re , last = 0 , t , pr;\n    while( m-- ) {\n        scanf(\"%d%d\",&u,&v);\n        u ^= last;\n//        cout << u << ' ' << v << endl;\n        l = lca( u , v );\n        cn = re = 0;\n        psu = jump( u ) , psv = jump( v );\n        if( psu == psv ) {\n            oc[c[l]] = 1 , ++ re;\n            for( int i = 1 ; i <= cn ; ++ i ) if( !oc[col[i]] ) oc[col[i]] = 1 , ++ re;\n            for( int i = 1 ; i <= cn ; ++ i ) oc[col[i]] = 0;\n            oc[c[l]] = 0;\n        } else if( ~psu && ~psv ) {\n            re = pre[psu][psv];\n            for( int i = 1 ; i <= cn ; ++ i ) if( !oc[col[i]] ) {\n                    oc[col[i]] = 1;\n                    if( que( rt[ps[psu]] , col[i] ) + que( rt[ps[psv]] , col[i] ) - que( rt[par[l]] , col[i] ) * 2 == 0 )\n                        ++ re;\n                }\n            for( int i = 1 ; i <= cn ; ++ i ) oc[col[i]] = 0;\n        } else { \n            if( ~psu ) swap( u , v ) , swap( psu , psv );\n            pr = l; t = cn;\n            while( !im[pr] ) {\n                pr = par[pr];\n                if( !oc[c[pr]] ) {\n                    oc[c[pr]] = 1;\n                    if (que(rt[ps[psv]], c[pr]) - que(rt[par[l]], c[pr]) == 0)\n                        --re;\n                    col[++ cn] = c[pr];\n                }\n            }\n            re += pre[im[pr]][psv];\n            for( int i = t + 1 ; i <= cn ; ++ i ) oc[col[i]] = 0;\n            cn = t;\n            for( int i = 1 ; i <= cn ; ++ i ) if( !oc[col[i]] ) {\n                    oc[col[i]] = 1;\n                    if( que( rt[ps[psv]] , col[i] ) - que( rt[par[l]] , col[i] ) == 0 )\n                        ++ re;\n                }\n            for( int i = 1 ; i <= cn ; ++ i ) oc[col[i]] = 0;\n        }\n        printf(\"%d\\n\",last = re);\n    }\n}\n\n```\n\n\n\n",
        "postTime": 1585203165,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6177 \u3010Count on a tree II/\u3010\u6a21\u677f\u3011\u6811\u5206\u5757\u3011"
    },
    {
        "content": "upd on 2022.2.23\uff1a\u4fee\u4e86\u4e2a typo\u3002\n\n[\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6177)\n\n~~\u597d\u5bb6\u4f19\uff0c\u5728\u505a\u8fd9\u9053\u9898\u4e4b\u524d\u6211\u751a\u81f3\u4e0d\u77e5\u9053\u6709\u4e2a\u4e1c\u897f\u53eb\u6811\u5206\u5757~~\n\n\u6811\u5206\u5757\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u50cf\u5bf9\u5e8f\u5217\u5206\u5757\u4e00\u6837\u8bbe\u4e00\u4e2a\u9608\u503c $B$\uff0c\u7136\u540e\u5728\u6811\u4e0a\u968f\u673a\u6492 $\\dfrac{n}{B}$ \u4e2a\u5173\u952e\u70b9\uff0c\u6ee1\u8db3\u4efb\u610f\u4e00\u4e2a\u70b9\u5230\u8ddd\u79bb\u5176\u6700\u8fd1\u7684\u5173\u952e\u70b9\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $\\mathcal O(B)$ \u7ea7\u522b\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u9884\u5904\u7406\u5173\u952e\u70b9\u4e24\u4e24\u4e4b\u95f4\u7684\u4fe1\u606f\uff0c\u7136\u540e\u8be2\u95ee\u4e24\u4e2a\u70b9\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\u65f6\u76f4\u63a5\u5c06\u9884\u5904\u7406\u7684\u4fe1\u606f\u62ff\u51fa\u6765\u4f7f\u7528\uff0c\u518d\u989d\u5916\u52a0\u4e0a\u4e24\u4e2a\u7aef\u70b9\u5230\u8ddd\u79bb\u5b83\u4eec\u6700\u8fd1\u7684\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u7684\u8d21\u732e\u5373\u53ef\u7b97\u51fa\u7b54\u6848\uff0c\u590d\u6742\u5ea6 $\\mathcal O(B^2+qB+\\dfrac{n^2}{B})$\uff0c\u4e00\u822c $B$ \u53d6 $\\sqrt{n}$\n\n\u5f53\u7136\u8fd9\u4e2a\u201c\u968f\u673a\u6492\u70b9\u201d\u4e5f\u5e76\u4e0d\u7528\u4ec0\u4e48\u9ad8\u8d85\u7684\u7384\u5b66\u6280\u5de7\uff0c\u751a\u81f3\u4e0d\u7528\u968f\u673a\uff08\uff09\u3002\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u60f3\u6cd5\u662f\u5c06\u6df1\u5ea6 $\\bmod B=0$ \u8bbe\u4e3a\u5173\u952e\u70b9\uff0c\u4f46\u7a0d\u5fae\u61c2\u70b9\u8111\u5b50\u5373\u53ef\u6784\u9020\u51fa\u53cd\u4f8b\uff1a\u4e00\u6761\u957f\u5ea6\u4e3a $B$ \u7684\u94fe\u4e0b\u9762\u6302 $n-B$ \u4e2a\u53f6\u5b50\u3002\u56e0\u6b64\u8003\u8651\u5bf9\u4e0a\u9762\u7684\u8fc7\u7a0b\u505a\u70b9\u624b\u811a\uff0c\u6211\u4eec\u8bb0 $dis_i$ \u4e3a $i$ \u5230\u8ddd\u79bb\u5b83\u6700**\u8fdc**\u7684\u53f6\u5b50\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u6df1\u5ea6 $\\bmod B=0$ \u4e14 $dis_i\\ge B$ \u7684\u70b9 $i$ \u8bbe\u4e3a\u5173\u952e\u8282\u70b9\u5373\u53ef\uff0c\u5bb9\u6613\u8bc1\u660e\u5728\u8fd9\u79cd\u6784\u9020\u65b9\u6cd5\u4e0b\u5173\u952e\u70b9\u4e2a\u6570\u662f\u4e25\u683c $\\dfrac{n}{B}$ \u7ea7\u522b\u7684\uff0c\u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be\uff0c\u590d\u6742\u5ea6\u4e5f\u5c31\u5f97\u5230\u4e86\u4fdd\u8bc1\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u600e\u6837\u6c42\u51fa\u7b54\u6848\uff0c\u6211\u4eec\u9996\u5148\u9884\u5904\u7406\u51fa\u6bcf\u5806\u5173\u952e\u8282\u70b9\u8def\u5f84\u4e0a\u989c\u8272\u7684\u60c5\u51b5\uff0c\u7528 `bitset` \u7ef4\u62a4\uff0c\u8be5\u64cd\u4f5c\u663e\u7136\u53ef\u4ee5\u4ee5 $\\mathcal O(\\dfrac{n^2}{B})$ \u7684\u53ca $\\mathcal O(\\dfrac{n^3}{B^2\\omega})$ \u7a7a\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u7ec4\u8be2\u95ee $x,y$\uff0c\u8bb0 $x$ **\u7956\u5148**\u4e2d\u79bb\u5176\u6700\u8fd1\u7684\u5173\u952e\u70b9\u4e3a $fx$\uff0c$fy$ \u7684\u5b9a\u4e49\u7c7b\u4f3c\uff0c$l=\\text{LCA}(x,y)$\uff0c\u5206\u4e09\u79cd\u60c5\u51b5\uff1a\n\n- $fx,fy$ \u7684\u6df1\u5ea6\u5747 $<l$ \u7684\u6df1\u5ea6\uff0c\u6839\u636e\u5173\u952e\u70b9\u7684\u751f\u6210\u65b9\u5f0f\u53ef\u77e5\u4efb\u610f\u4e00\u6761\u81ea\u4e0a\u800c\u4e0b\u7684\u957f\u5ea6\u4e3a $2B$\uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e0d\u662f $B$\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u53f6\u5b50\u8282\u70b9\u800c\u8a00\uff0c\u5176\u7956\u5148\u4e2d\u79bb\u5176\u6700\u8fd1\u7684\u5173\u952e\u8282\u70b9\u4e0e\u5176\u7684\u8ddd\u79bb\u53ef\u80fd\u8fbe\u5230 $2B$\uff09\u7684\u94fe\u4e0a\u5fc5\u6709\u4e00\u4e2a\u5173\u952e\u8282\u70b9\uff0c\u56e0\u6b64 $x$ \u5230 $l$ \u7684\u8ddd\u79bb\u5fc5\u5b9a\u5c0f\u4e8e $2B$\uff0c$y$ \u540c\u7406\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u66b4\u529b\u8df3\u7236\u4eb2\u4e0d\u4f1a\u51fa\u95ee\u9898\n- $fx,fy$ \u4e2d\u6070\u6709\u4e00\u4e2a\u6df1\u5ea6 $<l$ \u7684\u6df1\u5ea6\uff0c\u90a3\u6211\u4eec\u4e0d\u59a8\u8bbe $fy$ \u6df1\u5ea6 $<l$ \u7684\u6df1\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u627e\u51fa $x\\to l$ \u8fd9\u6761\u94fe\u4e0a\u79bb $l$ \u6700\u8fd1\u7684\u5173\u952e\u70b9 $z$\uff0c\u5177\u4f53\u65b9\u6cd5\u662f\uff0c\u6211\u4eec\u500d\u589e\u627e\u51fa $x$ \u7684 $dep_x-dep_l-2B$ \u7ea7\u7956\u5148\uff0c\u7136\u540e\u66b4\u529b\u5411\u4e0a\u8df3\uff0c\u6bcf\u9047\u5230\u4e00\u4e2a\u5173\u952e\u70b9\u5c31\u5c06 $z$ \u8bbe\u4e3a\u5173\u952e\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u6839\u636e\u9884\u5904\u7406\u7684\u503c\u627e\u5230 $z$ \u4e0e $fx$ \u4e4b\u95f4\u7684\u7b54\u6848\uff0c\u7136\u540e\u52a0\u4e0a $x\\to fx,z\\to l,y\\to l$ \u8fd9\u4e09\u6bb5\u7684\u7b54\u6848\u5373\u53ef\n- $fx,fy$ \u6df1\u5ea6\u5747 $\\ge l$ \u7684\u6df1\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u627e\u51fa $fx,fy$ \u4e4b\u95f4\u7684\u7b54\u6848\uff0c\u7136\u540e\u52a0\u4e0a $x\\to fx,y\\to fy$ \u7684\u7b54\u6848\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(\\dfrac{n^2}{B}+qB+\\dfrac{n^3}{B^2\\omega})=\\mathcal O(n\\sqrt{n}+\\dfrac{n^2}{\\omega})$\uff0c\u5e38\u6570\u7565\u6709\u70b9\u5927\uff0c\u4f46\u5b9e\u9645\u8dd1\u8d77\u6765\u4e0d\u7b97\u6162\uff08\n\n```cpp\nconst int MAXN=4e4;\nconst int LOG_N=16;\nconst int BLK=200;\nint n,qu,a[MAXN+5],key[MAXN+5],uni[MAXN+5],num=0;\nint hd[MAXN+5],to[MAXN*2+5],nxt[MAXN*2+5],ec=0;\nvoid adde(int u,int v){to[++ec]=v;nxt[ec]=hd[u];hd[u]=ec;}\nint id[MAXN+5],pcnt=0,blk,buc[MAXN+5];\nint dis[MAXN+5],dep[MAXN+5],fa[MAXN+5][LOG_N+2];\nbitset<MAXN+5> col[21000],vis;\nvoid dfs0(int x,int f){\n\tfa[x][0]=f;\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e];if(y==f) continue;dep[y]=dep[x]+1;\n\t\tdfs0(y,x);chkmax(dis[x],dis[y]+1);\n\t} if(dep[x]%blk==0&&dis[x]>=blk) id[x]=++pcnt;\n}\nint qwq[BLK+5][BLK+5],cc=0;\nvoid dfs(int x,int f,int rt){\n\tbuc[a[x]]++;if(buc[a[x]]==1) vis.set(a[x]);\n\tif(id[x]) col[qwq[id[rt]][id[x]]]=vis;\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e];if(y==f) continue;\n\t\tdfs(y,x,rt);\n\t} buc[a[x]]--;if(!buc[a[x]]) vis.reset(a[x]);\n}\nint getlca(int x,int y){\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(int i=LOG_N;~i;i--) if(dep[x]-(1<<i)>=dep[y]) x=fa[x][i];\n\tif(x==y) return x;\n\tfor(int i=LOG_N;~i;i--) if(fa[x][i]^fa[y][i]) x=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nint jump(int x){\n\twhile(x){\n\t\tif(id[x]) return x;\n\t\tx=fa[x][0];\n\t} return 0;\n}\nint get_kanc(int x,int k){\n\tfor(int i=LOG_N;~i;i--) if(k>>i&1) x=fa[x][i];\n\treturn x;\n}\nint main(){\n//\tfreopen(\"C:\\\\Users\\\\\u6c64\\\\Downloads\\\\P6177_1.in\",\"r\",stdin);\n//\tcout<<sizeof(col)<<endl;\n\tscanf(\"%d%d\",&n,&qu);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]),key[i]=a[i];\n\tkey[0]=-1;sort(key+1,key+n+1);\n\tfor(int i=1;i<=n;i++) if(key[i]^key[i-1]) uni[++num]=key[i];\n\tfor(int i=1;i<=n;i++) a[i]=lower_bound(uni+1,uni+num+1,a[i])-uni;\n\tfor(int i=1,u,v;i<n;i++) scanf(\"%d%d\",&u,&v),adde(u,v),adde(v,u);\n\tblk=(int)sqrt(n);dfs0(1,0);dep[0]=-1;\n\tfor(int i=1;i<=pcnt;i++) for(int j=1;j<=i;j++) qwq[i][j]=qwq[j][i]=++cc;\n\tfor(int i=1;i<=n;i++) if(id[i]) memset(buc,0,sizeof(buc)),dfs(i,0,i);\n\tfor(int i=1;i<=LOG_N;i++) for(int j=1;j<=n;j++)\n\t\tfa[j][i]=fa[fa[j][i-1]][i-1];\n\tint pre=0;\n\twhile(qu--){\n\t\tint x,y;scanf(\"%d%d\",&x,&y);x^=pre;vis.reset();\n\t\tint l=getlca(x,y),fx=jump(x),fy=jump(y);\n\t\tif(dep[fx]<dep[l]&&dep[fy]<dep[l]){\n\t\t\twhile(x!=l) vis.set(a[x]),x=fa[x][0];\n\t\t\twhile(y!=l) vis.set(a[y]),y=fa[y][0];\n\t\t\tvis.set(a[l]);\n\t\t\tprintf(\"%d\\n\",pre=vis.count());\n\t\t} else if(dep[fx]>=dep[l]&&dep[fy]>=dep[l]){\n\t\t\tvis=col[qwq[id[fx]][id[fy]]];\n\t\t\twhile(x!=fx) vis.set(a[x]),x=fa[x][0];\n\t\t\twhile(y!=fy) vis.set(a[y]),y=fa[y][0];\n\t\t\tprintf(\"%d\\n\",pre=vis.count());\n\t\t} else{\n\t\t\tif(dep[fy]>=dep[l]) swap(x,y),swap(fx,fy);\n\t\t\tassert(dep[fy]<dep[l]);\n\t\t\tint z=get_kanc(x,max(dep[x]-dep[l]-(blk<<1|1),0));\n\t\t\tint near=-1;\n\t\t\twhile(z!=l){\n\t\t\t\tif(id[z]) near=z;\n\t\t\t\tz=fa[z][0];\n\t\t\t} if(id[l]) near=l;\n\t\t\tassert(~near);\n\t\t\tif(fx!=near) vis=col[qwq[id[fx]][id[near]]];\n\t\t\twhile(x!=fx) vis.set(a[x]),x=fa[x][0];\n\t\t\twhile(near!=l) vis.set(a[near]),near=fa[near][0];\n\t\t\twhile(y!=l) vis.set(a[y]),y=fa[y][0];\n\t\t\tvis.set(a[l]);\n\t\t\tprintf(\"%d\\n\",pre=vis.count());\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1627011480,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6177 Count on a tree II/\u3010\u6a21\u677f\u3011\u6811\u5206\u5757"
    },
    {
        "content": "\u60f3\u5b66\u4e60\u6811\u5206\u5757\u7684\u8bdd\u53ef\u4ee5\u5148\u770b\u6211\u7684 blog [link](https://www.luogu.com.cn/blog/55201/shu-fen-kuai-xue-xi-bi-ji)\u3002 \n\n\u6309\u6211\u7684\u90a3\u7bc7\u535a\u5ba2\u7684\u6cd5\u4e09\u5206\u5757\u4ee5\u540e\u7684\u6bcf\u4e2a\u8be2\u95ee\u88ab\u62c6\u6210\u4e86\u4e24\u4e2a\u96f6\u6563\u5757\u548c\u4e00\u4e2a\u6574\u5757\uff0c\u6211\u4eec\u8bb0\u4e24\u4e2a\u96f6\u6563\u5757\u6240\u6784\u6210\u7684\u96c6\u5408\u5206\u522b\u4e3a $A$ \u548c $B$\uff0c\u6574\u5757\u6784\u6210\u7684\u96c6\u5408\u4e3a $C$\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u4e3a $|A\\cup B\\cup C||A|+|B|+|C|-|A\\cap B|-|B\\cap C|-|A\\cap C|+|A\\cap B\\cap C|$\u3002\n\n\u7136\u540e\u53d1\u73b0 $|A|,|B|,|A\\cap B|,|A\\cap B\\cap C|$ \u53ef\u4ee5\u5728\u5904\u7406\u96f6\u6563\u5757\u7684\u65f6\u5019\u76f4\u63a5\u8ba1\u7b97\uff0c\u5269\u4e0b\u7684 $|B\\cap C|,|A\\cap C|,|B\\cap C|$ \u53ef\u4ee5 $O(n\\sqrt{n})$ \u9884\u5904\u7406\u3002\n\n\u65b9\u6cd5\u662f\u4ece\u6bcf\u4e2a\u5757\u7684\u6df1\u5ea6\u6700\u6d45\u7684\u70b9 dfs \u4e00\u904d\u5c31\u884c\u4e86\u3002\n\n\u6b64\u5916 $|A\\cap B\\cap C|$ \u7684\u7ef4\u62a4\u65b9\u5f0f\u662f\u5728 $A\\cap B$ \u4e2d\u627e\u70b9\u5224\u65ad\u4e0e $C$ \u662f\u5426\u6709\u4ea4\uff0c\u5177\u4f53\u7684\u5224\u65ad\u65b9\u6cd5\u89c1\u4ee3\u7801\u3002\n\n\u590d\u6742\u5ea6 $O((n+q)\\sqrt{n})$\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define il inline\n#define rg register\n\nil int read()\n{\n\tint re=0,k=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')k=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){re=re*10+ch-48;ch=getchar();}\n\treturn re*k;\n}\n\nil void write(int x)\n{\n\tif(x<0)return putchar('-'),write(-x),void();\n\tif(x<10)return putchar(x+48),void();\n\treturn write(x/10),write(x%10),void();\n}\n\nconst int BB=351;\n\nint h[100005],l[100005],head[100005],tot,d[100005],fa[100005],top[100005],n,a[100005],sz[100005],son[100005],f[405][100005],p[405],ls,t[100005],c[100005],g[100005];\nint fs[2000005],tt;\nbool vis[100005];\nint vis2[100005],vis1[100005];\nstruct ss{\n    int node,nxt;\n}e[100005];\nvoid add(int u,int v)\n{\n    e[++tot].nxt=head[u];\n    e[tot].node=v;\n    head[u]=tot;\n}\nvoid dfs(int x,int ffa,int dp)\n{\n\tfa[x]=ffa;\n\td[x]=dp;\n\tsz[x]=1;\n\t\n\tint maxsz=-1;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint k=e[i].node;\n\t\tif(k==ffa)continue;\n\t\tif(!vis[k])\n\t\t\tg[k]=g[x];\n\t\telse g[k]=k;\n\t\tdfs(k,x,dp+1);\n\t\tsz[x]+=sz[k];\n\t\tif(maxsz<sz[k])maxsz=sz[k],son[x]=k;\n\t}\n}\nvoid ddfs(int x,int tt)\n{\n\ttop[x]=tt;\n\tl[x]=h[a[x]];//\u9884\u5904\u7406\u5934\u9876\u7b2c\u4e00\u4e2a\u548c\u5b83\u76f8\u540c\u7684\u70b9\u7684\n\tif(!son[x])return;\n\th[a[x]]=x;\n\tddfs(son[x],tt);\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint k=e[i].node;\n\t\tif(fa[x]==k||son[x]==k)continue;\n\t\tddfs(k,k);\n\t}\n\th[a[x]]=l[x];\n}\nint lca(int x,int y)//\u6811\u5256LCA\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]<d[top[y]])swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\tif(d[x]>d[y])swap(x,y);\n\treturn x;\n}\n\nvoid dp(int x,int fa,int *ff,int *s,int ls,int ans)//\u4ece\u6bcf\u4e2a\u70b9\u5f00\u59cb\u8fdb\u884c\u9884\u5904\u7406\n{\n\tif(!x)return;\n\ts[++ls]=a[x];\n\tif(t[a[x]]&&!vis2[a[x]])ans++;\n\tvis2[s[ls]]++;\n\tif(vis[x])//\u9884\u5904\u7406 C\n\t{\n\t\tfor(int i=1;i<=ls;i++)\n\t\t{\n\t\t\tif(!t[s[i]])tt++;\n\t\t\tt[s[i]]++,vis2[s[i]]--;\n\t\t}\n\t\tff[x]=tt;\n\t}\n\telse ff[x]=ans;//\u9884\u5904\u7406 A \u4ea4 B\n\tfor(rg int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].node==fa)continue;\n\t\tif(vis[x])\n\t\t{\t\n\t\t\tdp(e[i].node,x,ff,s+ls,0,0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdp(e[i].node,x,ff,s,ls,ans);\n\t\t}\n\t}\n\tif(vis[x])\n\t{\n\t\tfor(int i=1;i<=ls;i++)\n\t\t{\n\t\t\tt[s[i]]--;vis2[s[i]]++;\n\t\t\tif(!t[s[i]])tt--;\n\t\t}\n\t}\n\tvis2[s[ls]]--;\n}\nint sol(int u,int v,int typ)\n{\n\tint lans=0;\n   \tint x=u,y=v,LCA=lca(u,v);\n   \twhile(x!=LCA){if(!vis1[a[x]])lans++;vis1[a[x]]=1;x=fa[x];}\n   \twhile(y!=LCA){if(!typ||y!=v){if(!vis1[a[y]])lans++;vis1[a[y]]=1;}y=fa[y];}\n\tif(!vis1[a[LCA]]&&(!typ||LCA!=v))lans++;\n   \twhile(u!=LCA){vis1[a[u]]=0;u=fa[u];}\n   \twhile(v!=LCA){vis1[a[v]]=0;v=fa[v];}\n   \treturn lans;\n}\n\nint b[100005],cnt,q;\n\nint main()\n{\n\tfreopen(\"2.in\",\"r\",stdin);\n\tfreopen(\"2.out\",\"w\",stdout);\n    n=read();q=read();\n   \tfor(rg int i=1;i<=n;i++)\n   \t{\n   \t\tb[++cnt]=a[i]=read();\n   \t\tc[i]=i;\n   \t}\n   \tfor(rg int i=1,u,v;i<n;i++)\n   \t{\n   \t\tu=read();v=read();\n   \t\tadd(u,v);add(v,u);\n   \t}\n   \tsrand(time(0));\n   \tsort(b+1,b+cnt+1);\n   \tcnt=unique(b+1,b+cnt+1)-b-1;\n   \trandom_shuffle(c+2,c+n+1);\n   \tfor(rg int i=1;i<=n;i++)\n   \t{\n   \t\tif(i<=BB)p[i]=c[i],vis[c[i]]=1;\n   \t\ta[i]=lower_bound(b+1,b+cnt+1,a[i])-b;\n   \t}\n\tg[1]=1;\n   \tdfs(1,0,1);\n   \tddfs(1,1);\n   \tfor(rg int i=1;i<=BB;i++)\n   \t{\n   \t\tdp(p[i],0,f[i],fs,0,0);\n   \t}\n   \tint lans=0;\n\tmemset(vis1,0,sizeof(vis1));\n\tmemset(vis2,0,sizeof(vis2));\n   \tfor(rg int i=1,u,v;i<=q;i++)\n   \t{\n   \t\tu=read()^lans;v=read();\n   \t\tif(g[u]==g[v])//\u96f6\u6563\u5757\n   \t\t{\n   \t\t\tlans=0;\n   \t\t\tint x=u,y=v,LCA=lca(u,v);\n   \t\t\twhile(x!=LCA){if(!vis1[a[x]])lans++;vis1[a[x]]=1;x=fa[x];}\n   \t\t\twhile(y!=LCA){if(!vis1[a[y]])lans++;vis1[a[y]]=1;y=fa[y];}\n\t\t\tif(!vis1[a[LCA]])lans++;\n   \t\t\twhile(u!=LCA){vis1[a[u]]=0;u=fa[u];}\n   \t\t\twhile(v!=LCA){vis1[a[v]]=0;v=fa[v];}\n   \t\t\twrite(lans);puts(\"\");continue;\n   \t\t}\n\t\tint LCA=lca(u,v);\n   \t\tif(d[g[u]]<d[LCA]||d[g[v]]<d[LCA])//\u4e24\u4e2a\u5757\u4e4b\u95f4\u662f\u76f4\u7cfb\u4eb2\u5c5e\u5173\u7cfb\n   \t\t{\n   \t\t\tif(d[g[u]]<d[LCA])swap(u,v);\n   \t\t\tint x=u,y=v,z=u,A=0,B=0,C=0,AB=0,BC=0,AC=0,ABC=0,xx=u,yy=v,ty;\n   \t\t\twhile(!vis[x]&&x!=LCA)\n   \t\t\t{\n\t\t\t\tif(!vis1[a[x]])\n\t\t\t\t\tA++;\n\t\t\t\tvis1[a[x]]=x;\n\t\t\t\tx=fa[x];\n\t\t\t}\n   \t\t\twhile(!vis[y]&&y!=LCA)\n   \t\t\t{\n   \t\t\t\tif(!vis2[a[y]])\n   \t\t\t\t{\n   \t\t\t\t\tB++;\n   \t\t\t\t\tif(vis1[a[y]])\n   \t\t\t\t\t{\n   \t\t\t\t\t\tAB++;\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t\tvis2[a[y]]=y;y=fa[y];\n   \t\t\t}\n   \t\t\twhile(d[g[fa[g[z]]]]>d[LCA])z=fa[g[z]];\n   \t\t\tty=z=g[z];\n   \t\t\tz=fa[z];\n   \t\t\tint zz=z;\n   \t\t\twhile(!vis[z]&&z!=LCA)\n   \t\t\t{\n   \t\t\t\tif(!vis2[a[z]])\n   \t\t\t\t{\n   \t\t\t\t\tB++;\n   \t\t\t\t\tif(vis1[a[z]])\n   \t\t\t\t\t{\n   \t\t\t\t\t\tAB++;\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t\tvis2[a[z]]=z;z=fa[z];\n   \t\t\t}\n   \t\t\tif(!vis2[a[LCA]])\n   \t\t\t{\n   \t\t\t\tB++;\n   \t\t\t\tif(vis1[a[LCA]])AB++;\n   \t\t\t}\n\t\t\tvis2[a[LCA]]=LCA;\n \t  \t\twhile(!vis[yy]&&yy!=LCA)\n \t  \t\t{\n \t  \t\t\tif(vis2[a[yy]]&&vis1[a[yy]])\n \t  \t\t\t{\n \t  \t\t\t\tif((d[l[vis1[a[yy]]]]>=d[ty]&&d[l[vis1[a[yy]]]]<=d[x]))\n \t  \t\t\t\t\tABC++;\n \t  \t\t\t}\n \t  \t\t\tvis2[a[yy]]=0;yy=fa[yy];\n \t  \t\t}\n \t  \t\twhile(!vis[zz]&&zz!=LCA)\n \t  \t\t{\n \t  \t\t\tif(vis2[a[zz]]&&vis1[a[zz]])\n \t  \t\t\t{\n \t  \t\t\t\tif((d[l[vis1[a[zz]]]]>=d[ty]&&d[l[vis1[a[zz]]]]<=d[x]))\n \t  \t\t\t\t\tABC++;\n \t  \t\t\t}\n \t  \t\t\tvis2[a[zz]]=0;zz=fa[zz];\n \t  \t\t}\n\t\t\tif(vis2[a[LCA]])\n   \t\t\t{\n   \t\t\t\tif(vis1[a[LCA]])\n\t\t\t\t\tif((d[l[vis1[a[LCA]]]]>=d[ty]&&d[l[vis1[a[LCA]]]]<=d[x]))\n \t  \t\t\t\t\tABC++;\n   \t\t\t}\n\t\t\tvis2[a[LCA]]=0;\n \t  \t\twhile(!vis[xx]&&xx!=LCA){vis1[a[xx]]=0;xx=fa[xx];}\n \t  \t\tfor(rg int j=1;j<=BB;j++)\n \t  \t\t\tif(p[j]==x){x=j;break;}\n \t  \t\tfor(rg int j=1;j<=BB;j++)\n \t  \t\t\tif(p[j]==ty){ty=j;break;}\n   \t\t\tC=f[x][p[ty]];\n   \t\t\tif(!vis[v])BC=f[x][v];\n   \t\t\tif(!vis[u])AC=f[ty][u];\n   \t\t\tlans=A+B+C-AB-BC-AC+ABC;\n   \t\t\twrite(lans);puts(\"\");continue;\n   \t\t}\n        //\u4e24\u5757\u4e4b\u95f4\u4e0d\u662f\u76f4\u7cfb\u4eb2\u5c5e\u5173\u7cfb\n   \t\tint x=u,y=v,A=0,B=0,C=0,AB=0,BC=0,AC=0,ABC=0,xx=u,yy=v;\n   \t\twhile(!vis[x]&&x!=LCA)\n   \t\t{\n   \t\t\tif(!vis1[a[x]])\n   \t\t\t\tA++;\n   \t\t\tvis1[a[x]]=x;\n   \t\t\tx=fa[x];\n   \t\t}\n   \t\twhile(!vis[y]&&y!=LCA)\n   \t\t{\n   \t\t\tif(!vis2[a[y]])\n   \t\t\t{\n   \t\t\t\tB++;\n   \t\t\t\tif(vis1[a[y]])\n   \t\t\t\t{\n   \t\t\t\t\tAB++;\n   \t\t\t\t}\n   \t\t\t}\n   \t\t\tvis2[a[y]]=y;y=fa[y];\n   \t\t}\n   \t\twhile(!vis[yy]&&yy!=LCA)\n   \t\t{\n   \t\t\tif(vis2[a[yy]]&&vis1[a[yy]])\n   \t\t\t{\n   \t\t\t\tif(((d[l[vis1[a[yy]]]]>=d[LCA])&&(d[l[vis1[a[yy]]]]<=d[x]))||((d[l[vis2[a[yy]]]]>=d[LCA])&&(d[l[vis2[a[yy]]]]<=d[y])))\n   \t\t\t\t\tABC++;\n   \t\t\t}\n   \t\t\tvis2[a[yy]]=0;yy=fa[yy];\n   \t\t}\n   \t\twhile(!vis[xx]&&xx!=LCA){vis1[a[xx]]=0;xx=fa[xx];}\n   \t\tfor(rg int j=1;j<=BB;j++)\n   \t\t\tif(p[j]==x){x=j;break;}\n   \t\tfor(rg int j=1;j<=BB;j++)\n   \t\t\tif(p[j]==y){y=j;break;}\n   \t\tC=f[x][p[y]];\n   \t\tif(!vis[v])BC=f[x][v];\n   \t\tif(!vis[u])AC=f[y][u];\n   \t\tlans=A+B+C-AB-BC-AC+ABC;\n   \t\twrite(lans);puts(\"\");\n   \t}\n}\n```\n",
        "postTime": 1599835377,
        "uid": 55201,
        "name": "clamee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6177 \u3010Count on a tree II/\u3010\u6a21\u677f\u3011\u6811\u5206\u5757\u3011"
    },
    {
        "content": "\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a $\\text{Top cluster}$ \u5206\u89e3\u5427\uff0c\u5176\u5b9e\u4efb\u4f55\u7684\u6811\u5206\u5757\u90fd\u53ef\u4ee5\u901a\u8fc7\u968f\u673a\u6492\u70b9\u89e3\u51b3\uff0c\u5982\u679c\u5f3a\u884c\u9700\u8981\u5f62\u6210\u7c07\u7684\u8bdd\u8fd8\u9700\u8981\u5efa\u4e00\u68f5\u865a\u6811\u3002\n\n\u4f46\u672c\u9898\u5e76\u4e0d\u9700\u8981\u5f62\u6210\u7c07\uff0c\u6240\u4ee5\u53ea\u8981\u968f\u673a\u9009\u53d6 $\\sqrt n$ \u4e2a\u8282\u70b9\u4f5c\u4e3a\u5173\u952e\u70b9\uff0c\u7136\u540e\u5904\u7406\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u989c\u8272 `bitset`\uff0c\u67e5\u8be2\u65f6\u53ea\u9700\u8981\u5c06\u8def\u5f84\u4e0a\u6700\u5de6\u548c\u6700\u53f3\u7684\u5173\u952e\u70b9\u53d6\u51fa\uff0c\u8fb9\u5757\u66b4\u529b\u5373\u53ef\u3002\n\n\u867d\u7136\u8fd9\u6837\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5341\u5206\u7684\u52a3\u8d28\uff0c\u4f46\u8fd8\u662f\u8db3\u4ee5\u901a\u8fc7\u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6 $O(\\dfrac{n^2}w)$\uff0c\u65f6\u95f4 $O(\\dfrac{n^2+nq}w)$\uff0c\u7531\u4e8e\u6492\u7684\u70b9\u4e0d\u591a\uff0c\u5e76\u4e14\u968f\u673a\u4e0d\u591f\u4e25\u683c\uff0c\u6240\u4ee5\u5e38\u6570\u8f83\u5927\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=4e4+4;\nusing bt=bitset<N>;\nbt tb[205][205],nw;\n#define tp(x) (t[f[x]][1]==x)\n#define in(x) (t[f[x]][0]==x||tp(x))\n#define ls t[x][0]\n#define rs t[x][1]\nint v[N],n,q,mp[N],m,ct[N],ans;\nint p[N],dfn[N],dlt,rt,cl[N];\nvector<int>lk[N];\nnamespace lct{\n    int f[N],t[N][2],sm[N];\n    bt rv;\n    void pp(int x){\n        sm[x]=sm[ls]|sm[rs]|cl[x];\n    }void rev(int x){\n        swap(ls,rs),rv[x]=!rv[x];\n    }void pd(int x){\n        if(rv[x]){\n            if(ls)rev(ls);\n            if(rs)rev(rs);rv[x]=0;\n        }\n    }void ppd(int x){\n        if(in(x))ppd(f[x]);pd(x);\n    }\n    void rot(int x){\n        int y=f[x],k=tp(x),w=t[x][!k];\n        // cerr<<x<<\" \"<<y<<\" \"<<w<<endl;\n        // cerr<<f[x]<<\" \"<<f[y]<<endl;\n        t[f[w]=t[x][!k]=y][k]=w;\n        if(in(y))t[f[y]][tp(y)]=x;\n        f[x]=f[y],f[y]=x,pp(y);\n        assert(x!=f[x]&&y!=f[y]);\n    }\n    void splay(int x){\n        ppd(x);for(int z=f[x];in(x);rot(x),z=f[x])\n            if(in(z))rot(tp(x)^tp(z)?x:z);pp(x);\n    }\n    int acs(int x){\n        int y,z;\n        for(y=0;x;x=f[y=x])\n            splay(x),rs=y,pp(x);\n        return y;\n    }\n    int getl(int x){\n        while(1){assert(x);\n            pd(x);\n            if(sm[ls])x=ls;\n            else if(cl[x])break;\n            else x=rs;\n        }splay(x);\n        return x;\n    }\n    int getr(int x){\n        while(1){assert(x);\n            pd(x);\n            if(sm[rs])x=rs;\n            else if(cl[x])break;\n            else x=ls;\n        }splay(x);return x;\n    }\n    void dfs(int x){\n        // printf(\"dfs:%d\\n\",x);\n        nw[::v[x]]=1;\n        if(ls)dfs(ls);\n        if(rs)dfs(rs);\n    }\n    int solve(int x,int y){\n        acs(x),splay(x),rev(x);\n        // cerr<<\"lrs:\"<<ls<<\" \"<<rs<<endl;\n        acs(y),splay(x);\n        nw.reset();\n        if(sm[x]){\n            int l=getl(x);\n            if(t[l][0])dfs(t[l][0]);\n            int r=getr(l);\n            // printf(\"l:%d r:%d\\n\",l,r);\n            if(t[r][1])dfs(t[r][1]);\n            nw|=tb[cl[l]][cl[r]];\n        }else dfs(x);\n        return nw.count();\n    }\n}\nvoid dfs(int x,int rp){\n    dfn[x]=++dlt;\n    for(int y:lk[x])\n        if(y!=rp)\n            dfs(y,x),lct::f[y]=x/*,cerr<<\"set:\"<<x<<\" \"<<y<<endl*/;\n}\nvoid dfs2(int x,int rp){\n    ++ct[v[x]],nw[v[x]]=1;\n    if(cl[x])tb[rt][cl[x]]=nw;\n    for(int y:lk[x])\n        if(y!=rp)dfs2(y,x);\n    if(!--ct[v[x]])nw[v[x]]=0;\n}\nint main(){\n    ios::sync_with_stdio(false);\n    mt19937_64 rg(random_device{}());\n    cin>>n>>q;\n    int i,x,y;\n    for(x=1;x<=n;++x)cin>>v[x],mp[x]=v[x];\n    for(i=1;i<n;++i){\n        cin>>x>>y;\n        lk[x].push_back(y);\n        lk[y].push_back(x);\n    }sort(mp+1,mp+n+1),dfs(1,0);\n    m=unique(mp+1,mp+n+1)-mp;\n    for(x=1;x<=n;++x)\n        v[x]=lower_bound(mp+1,mp+m,v[x])-mp,p[x]=x;\n    shuffle(p+1,p+n+1,rg),m=1+sqrt(1+n);\n    if(m>n)m=n;\n    for(i=1;i<=m;++i)cl[p[i]]=i;\n    for(rt=1;rt<=m;++rt)dfs2(p[rt],0);\n    // for(x=1;x<=m;++x)printf(\"%d%c\",p[x],\" \\n\"[x==m]);\n    // m=0;\n    while(q--){\n        cin>>x>>y,x^=ans;\n        ans=lct::solve(x,y);\n        printf(\"%d\\n\",ans);\n    }return 0;\n}\n```",
        "postTime": 1669261591,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u7b80\u6613\u6811\u5206\u5757"
    },
    {
        "content": "\u6ca1\u6709 Top Cluster \u6811\u5206\u5757\u7684\u9898\u89e3\uff0c\u8fd9\u91cc\u8865\u4e00\u53d1\u3002\r\n\r\n# \u5b9a\u4e49\r\n\r\n- \u6811\u7c07\uff1a\u6811\u4e2d\u7684\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u6ee1\u8db3\u5176\u4e0e\u5916\u754c\u76f8\u90bb\u7684\u8282\u70b9**\u4e0d\u8d85\u8fc7** $2$ \u4e2a\u3002\r\n\r\n- \u754c\u70b9\uff1a\u6811\u7c07\u4e0e\u5916\u754c\u76f8\u90bb\u7684\u8282\u70b9\u3002\u8fd9\u91cc\u94a6\u5b9a\u6df1\u5ea6\u8f83\u6d45\u7684\u662f\u4e0a\u754c\u70b9\uff0c\u6df1\u5ea6\u8f83\u6df1\u7684\u662f\u4e0b\u754c\u70b9\uff08\u4e0a\u4e0b\u754c\u70b9\u4e00\u5b9a\u662f\u7956\u5b59\u5173\u7cfb\uff09\u3002\r\n\r\n- \u6536\u7f29\u6811\uff1a\u8003\u8651\u5c06\u6811\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u6811\u7c07\uff0c\u6ee1\u8db3\u4efb\u610f\u4e00\u6761\u8fb9**\u5728\u4e14\u4ec5\u5728\u4e00\u4e2a\u6811\u7c07\u4e2d**\uff0c\u4efb\u610f\u4e00\u4e2a\u70b9**\u81f3\u5c11\u5728\u4e00\u4e2a\u6811\u7c07\u4e2d**\u3002\u5c06\u6bcf\u4e2a\u6811\u7c07\u770b\u6210\u4e00\u4e2a\u70b9\u540e\u5f62\u6210\u7684\u65b0\u7684\u6811\u4e3a\u6536\u7f29\u6811\u3002\r\n\r\n- \u7c07\u8def\u5f84\uff1a\u6811\u7c07\u4e2d\u4e0a\u754c\u70b9\u5230\u4e0b\u754c\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u3002\r\n\r\n\u8003\u8651\u5c06\u539f\u6811\u5212\u5206\u6210 $O(\\sqrt n)$ \u4e2a\u5927\u5c0f\u4e3a $O(\\sqrt n)$ \u7684\u6811\u7c07\uff0c\u8fd9\u6837\u5bf9\u4e8e\u6811\u4e0a\u8def\u5f84\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u50cf\u5e8f\u5217\u95ee\u9898\u4e00\u6837\u6574\u5757\u6574\u4f53\u5904\u7406\uff0c\u96f6\u6563\u5757\u66b4\u529b\u5904\u7406\u4e86\u3002\r\n\r\n\u6ce8\u610f\uff0c\u6574\u5757\u6574\u4f53\u5904\u7406\u7684\u662f**\u7c07\u8def\u5f84\u800c\u4e0d\u662f\u6574\u4e2a\u6811\u7c07**\u3002\r\n\r\n# \u5b9e\u73b0\r\n\r\n\u8003\u8651\u5bf9\u539f\u6811\u8fdb\u884cDFS\uff0c\u6807\u8bb0\u4e0a\u4e0b\u754c\u70b9\u3002\r\n\r\n\u8282\u70b9 $x$ \u4e3a\u4e0a\u754c\u70b9\u5f53\u4e14\u4ec5\u5f53\uff1a\r\n\r\n- $x$ \u4e3a\u6839\u3002\r\n\r\n- $x$ \u5b50\u6811\u4e2d\u672a\u88ab\u5212\u5206\u7684\u8282\u70b9\u4e2a\u6570 $\\ge \\sqrt n$\u3002\r\n\r\n- $x$ \u5b50\u6811\u4e2d\u6709\u8d85\u8fc7\u4e00\u4e2a\u754c\u70b9\uff08\u5426\u5219\u8fdd\u80cc\u6811\u7c07\u5b9a\u4e49\uff09\u3002\r\n\r\n\u5bf9\u4e8e\u4e0a\u754c\u70b9 $x$\uff0c\u8fd8\u9700\u8981\u5c06\u5176\u5b50\u6811\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u6811\u7c07\u3002\u8003\u8651\u5c06 $x$ \u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u5b50\u6811\u5212\u5206\u5230\u4e00\u4e2a\u6811\u7c07\u4e2d\u53bb\uff0c\u90a3\u4e48\u8be5\u8fc7\u7a0b\u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff0c\u5373\u5b50\u8282\u70b9 $y$ \u88ab\u5212\u5206\u5230\u65b0\u7684\u6811\u7c07\u5f53\u4e14\u4ec5\u5f53\uff1a\r\n\r\n- $y$ \u4e3a $x$ \u7684\u6700\u540e\u4e00\u4e2a\u5b50\u8282\u70b9\u3002\r\n\r\n- $x$ \u5728 $y$ \u524d\u7684\u5b50\u6811\u4e2d\u672a\u88ab\u5212\u5206\u7684\u8282\u70b9\u4e2a\u6570 $\\ge \\sqrt n$\u3002\r\n\r\n- $x$ \u5728 $y$ \u524d\u7684\u5b50\u6811\u4e2d\u6709\u8d85\u8fc7\u4e00\u4e2a\u672a\u88ab\u5212\u5206\u7684\u754c\u70b9\u3002\r\n\r\n\u8fd9\u4e2a\u8fc7\u7a0b\u7565\u663e\u7c97\u7cd9\uff0c\u4f46\u6811\u7c07\u5927\u5c0f\u7684\u6d6e\u52a8\u662f\u5728\u5e38\u6570\u7ea7\u522b\u7684\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\r\n\r\n-----\r\n\r\n\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5728\u6bcf\u4e2a\u4e0a\u754c\u70b9\u6253\u4e2a tag\uff0c\u7136\u540e\u4e0b\u4f20\u6807\u8bb0\u5373\u53ef\u3002\r\n\r\n\u6ce8\u610f\uff0c\u7531\u4e8e\u4e0a\u754c\u70b9\u4e00\u5b9a\u5c5e\u4e8e\u591a\u4e2a\u6811\u7c07\uff0c\u6240\u4ee5\u4e00\u822c\u628a\u4e0a\u754c\u70b9 $x$ \u5f52\u5230\u6df1\u5ea6\u8f83\u6d45\u7684\u6811\u7c07\u4e2d\uff08$x$ \u5728\u6df1\u5ea6\u8f83\u6d45\u7684\u6811\u7c07\u4e2d\u662f\u4e0b\u754c\u70b9\uff09\uff0c\u5e76\u65b0\u5efa\u4e00\u4e2a\u4e0a\u4e0b\u754c\u70b9\u90fd\u4e3a $1$ \u7684\u6839\u6811\u7c07\u65b9\u4fbf\u5904\u7406\u3002\r\n\r\n\u5212\u5206\u6811\u7c07\u4e14\u5efa\u6536\u7f29\u6811\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a\r\n\r\n```cpp\r\nil void Merge(int x,int y,int i,int ed){\r\n\tL[++N]=x,R[N]=y;\r\n\tfor(;i^ed;i=e1[i].to) \r\n\t\tif(e1[i].v^fa1[x]) tag[e1[i].v]=N;//\u6807\u8bb0tag\r\n}\r\nvoid init1_dfs(int fa,int x){\r\n\tint cnt=0;\r\n\tfa1[x]=fa,dep1[x]=dep1[fa]+1,res[x]=1;\r\n\tfor(int i=head1[x];i;i=e1[i].to)\r\n\t\tif(e1[i].v^fa){\r\n\t\t\tinit1_dfs(x,e1[i].v),res[x]+=res[e1[i].v];\r\n\t\t\tif(Clu[e1[i].v]) cnt++,Clu[x]=Clu[e1[i].v];\r\n\t\t}\r\n\tif(cnt>1||res[x]>=B||x==1){\r\n    //\u82e5\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6\u4e4b\u4e00,\u6807\u8bb0\u4e0a\u754c\u70b9,\u5e76\u5212\u5206\u5b50\u6811\r\n\t\tClu[x]=x,res[x]=0;\r\n\t\tint sum=1,id=0,li=head1[x];\r\n\t\tfor(int i=head1[x];i;i=e1[i].to)\r\n\t\t\tif(e1[i].v^fa){\r\n\t\t\t\tif(sum+res[e1[i].v]>B||(id&&Clu[e1[i].v]))\r\n\t\t\t\t\tMerge(x,id,li,i),sum=0,id=0,li=i;\r\n\t\t\t\t\t//\u5212\u5206\u51fa\u65b0\u6811\u7c07,\u5e76\u66f4\u65b0\u5b50\u6811\u5927\u5c0f,\u548c\u4e0b\u754c\u70b9\u7f16\u53f7\r\n\t\t\t\tif(Clu[e1[i].v]) id=Clu[e1[i].v];\r\n\t\t\t\tsum+=res[e1[i].v];\r\n\t\t\t}\r\n\t\tMerge(x,id,li,0);//\u6700\u540e\u4e00\u90e8\u5206\u4e5f\u8981\u5212\u5206\u6210\u65b0\u6811\u7c07\r\n\t}\r\n}\r\nvoid down_dfs(int fa,int x,int c=N){\r\n\tbl[x]=c;bool fl=0;\r\n\tfor(int i=head1[x];i;i=e1[i].to)\r\n\t\tif(e1[i].v^fa) fl=1,down_dfs(x,e1[i].v,tag[e1[i].v]?tag[e1[i].v]:c);\r\n\tif(!fl&&!R[c]) R[c]=x;\r\n    //\u5982\u679c\u8be5\u6811\u7c07\u6ca1\u6709\u4e0b\u754c\u70b9,\u5c31\u968f\u4fbf\u9009\u62e9\u4e00\u4e2a\u53f6\u8282\u70b9\u4f5c\u4e0b\u754c\u70b9\r\n\tif(fa1[x]&&!Vis[bl[x]]&&(bl[x]^bl[fa1[x]])){\r\n\t\tVis[bl[x]]=1;//Vis\u6570\u7ec4\u4fdd\u8bc1 bl[x] \u4e0e\u5176\u7236\u8282\u70b9\u4e0d\u91cd\u590d\u8fde\u8fb9\r\n\t\taddedge2(bl[x],bl[fa1[x]]);\r\n\t\taddedge2(bl[fa1[x]],bl[x]);\r\n\t}\r\n}\r\nvoid init2_dfs(int fa,int x){\r\n\tfa2[x]=fa,dep2[x]=dep2[fa]+1;\r\n\tfor(int i=head2[x];i;i=e2[i].to)\r\n\t\tif(e2[i].v^fa) init2_dfs(x,e2[i].v);\r\n}\r\n.....\r\nint main(){\r\n\t.....\r\n\tinit1_dfs(0,1),L[++N]=1,R[N]=1,bl[1]=N;\r\n\tdown_dfs(0,1),init2_dfs(0,N);\r\n\treturn 0;\r\n}\r\n```\r\n\r\n# \u672c\u9898\u505a\u6cd5\r\n\r\n\u8003\u8651\u5bf9\u4e8e\u672c\u9898\u6811\u5206\u5757\u7684\u505a\u6cd5\uff08\u4ee5\u4e0b\u79f0\u6811\u7c07\u4e3a\u5757\uff09\u3002\r\n\r\n\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u5757 $u,v$ \u7ef4\u62a4 $\\{u\\rightarrow v\\}$ \u8def\u5f84\u4e0a\u6240\u6709\u5757\u7c07\u8def\u5f84\u6240\u542b\u989c\u8272\u7684bitset\uff0c\u5bf9\u4e8e\u4e00\u7ec4\u8be2\u95ee $x,y$\uff0c\u5148\u66b4\u529b\u8dd1\u51fa $x,y$ \u6240\u5728\u5757\u7684\u989c\u8272\u7684bitset\uff0c\u7136\u540e\u518d\u6216\u4e0a\u4e24\u70b9\u8def\u5f84\u7684bitset\u5373\u53ef\uff08\u5b9e\u9645\u5b9e\u73b0\u53ef\u80fd\u6709\u4e9b\u4e0d\u540c\uff09\u3002\r\n\r\n\u5bf9\u4e8e\u96f6\u6563\u5757\u90e8\u5206\uff0c\u663e\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\sqrt n)$\uff0c\u5bf9\u4e8e\u6574\u5757\u90e8\u5206\uff0c\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u5408\u5e76\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\frac{n}{w})$\u3002\u5bf9\u4e8e\u9884\u5904\u7406\u90e8\u5206\uff0c\u5206\u522b\u4ee5\u6bcf\u4e2a\u5757\u4e3a $u$ \u904d\u5386\u5927\u5c0f\u4e3a $O(\\sqrt n)$\u5212\u5206\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\sqrt n \\frac{n}{w})$\uff0c\u7531\u4e8e\u6709 $O(\\sqrt n)$ \u4e2a\u5757\uff0c\u6240\u4ee5\u9884\u5904\u7406\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\frac{n^2}{w})$\u3002\r\n\u3002\r\n\r\n\u6240\u4ee5\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\frac{n^2}{w}+n\\sqrt n)$\u3002\u663e\u7136\u5728\u6781\u9650\u6570\u636e\u4e0b\u540e\u4e00\u90e8\u5206\u590d\u6742\u5ea6\u5c0f\u4e8e\u524d\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u8c03\u5927\u5757\u957f\u6765\u4f18\u5316\u7a7a\u95f4\uff08\u56e0\u4e3a\u8981\u5b58\u4e24\u4e24\u5757\u4e4b\u95f4\u7684bitset\uff0c\u6240\u4ee5\u7a7a\u95f4\u662f $O(\\frac{B^2}{w})$\uff09\u3002\r\n\r\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define ull unsigned long long\r\n#define il inline\r\nusing namespace std;\r\nconst int w=(1<<16)-1;\r\nconst int maxn=40010;\r\nconst int maxqn=310;\r\nconst ull S=18446744073709551615ull;\r\nil int read(){\r\n\tint x=0;\r\n\tchar c=getchar();\r\n\tfor(;!(c>='0'&&c<='9');c=getchar());\r\n\tfor(;c>='0'&&c<='9';c=getchar())\r\n\t\tx=(x<<1)+(x<<3)+c-'0';\r\n\treturn x;\r\n}\r\nstruct Hsh{\r\n\tint id,x;\r\n\tbool operator <(Hsh a)const{return x<a.x;}\r\n}b[maxn];\r\nint nn,pc[1<<16];\r\n\r\n\r\n//////////bitset\r\nstruct Bitset{\r\n\tull a[maxn/64+2];\r\n\til Bitset operator |(Bitset x)const{for(int i=0;i<=nn;i++) x.a[i]|=a[i];return x;}\r\n\til int Count(int cnt=0)const{\r\n\t\tfor(int i=0;i<=nn;i++)\r\n\t\t\tcnt+=pc[a[i]&w]+pc[(a[i]>>16)&w]+pc[(a[i]>>32)&w]+pc[(a[i]>>48)&w];\r\n\t\treturn cnt;\r\n\t}\r\n}col[maxqn],data[maxqn][maxqn];\r\nil void Add(Bitset &x,int i){x.a[i-1>>6]|=(1ull<<(i-1&63));}\r\nil void clear(Bitset &x){for(int i=0;i<=nn;i++)x.a[i]=0;}\r\n/////////////\r\n\r\n\r\nstruct edge{\r\n\tint v,to;\r\n}e1[maxn<<1],e2[maxqn<<1];\r\nint head1[maxn],head2[maxqn];\r\nint ecnt1=1,ecnt2=1;\r\nil void addedge1(int u,int v){\r\n\te1[++ecnt1].v=v,e1[ecnt1].to=head1[u],head1[u]=ecnt1;\r\n}\r\nil void addedge2(int u,int v){\r\n\te2[++ecnt2].v=v,e2[ecnt2].to=head2[u],head2[u]=ecnt2;\r\n}\r\nint a[maxn],n,m,B,N;\r\nint fa1[maxn],dep1[maxn];\r\nint res[maxn],tag[maxn],Clu[maxn];\r\n\r\nbool Vis[maxqn];\r\nint fa2[maxqn],dep2[maxqn];\r\nint L[maxqn],R[maxqn];\r\nint bl[maxn];\r\n\r\n///////////\u5212\u5206\u6811\u7c07\r\nil void Merge(int x,int y,int i,int ed){\r\n\tL[++N]=x,R[N]=y;\r\n\tfor(;i^ed;i=e1[i].to) \r\n\t\tif(e1[i].v^fa1[x]) tag[e1[i].v]=N;\r\n}\r\nvoid init1_dfs(int fa,int x){\r\n\tint cnt=0;\r\n\tfa1[x]=fa,dep1[x]=dep1[fa]+1,res[x]=1;\r\n\tfor(int i=head1[x];i;i=e1[i].to)\r\n\t\tif(e1[i].v^fa){\r\n\t\t\tinit1_dfs(x,e1[i].v),res[x]+=res[e1[i].v];\r\n\t\t\tif(Clu[e1[i].v]) cnt++,Clu[x]=Clu[e1[i].v];\r\n\t\t}\r\n\tif(cnt>1||res[x]>=B||x==1){\r\n\t\tClu[x]=x,res[x]=0;\r\n\t\tint sum=1,id=0,li=head1[x];\r\n\t\tfor(int i=head1[x];i;i=e1[i].to)\r\n\t\t\tif(e1[i].v^fa){\r\n\t\t\t\tif(sum+res[e1[i].v]>B||(id&&Clu[e1[i].v]))\r\n\t\t\t\t\tMerge(x,id,li,i),sum=0,id=0,li=i;\r\n\t\t\t\tif(Clu[e1[i].v]) id=Clu[e1[i].v];\r\n\t\t\t\tsum+=res[e1[i].v];\r\n\t\t\t}\r\n\t\tMerge(x,id,li,0);\r\n\t}\r\n}\r\nvoid down_dfs(int fa,int x,int c=N){\r\n\tbl[x]=c;bool fl=0;\r\n\tfor(int i=head1[x];i;i=e1[i].to)\r\n\t\tif(e1[i].v^fa) fl=1,down_dfs(x,e1[i].v,tag[e1[i].v]?tag[e1[i].v]:c);\r\n\tif(!fl&&!R[c]) R[c]=x;\r\n\tif(fa1[x]&&!Vis[bl[x]]&&(bl[x]^bl[fa1[x]])){\r\n\t\tVis[bl[x]]=1;\r\n\t\taddedge2(bl[x],bl[fa1[x]]);\r\n\t\taddedge2(bl[fa1[x]],bl[x]);\r\n\t}\r\n}\r\nvoid init2_dfs(int fa,int x){\r\n\tfa2[x]=fa,dep2[x]=dep2[fa]+1;\r\n\tfor(int i=head2[x];i;i=e2[i].to)\r\n\t\tif(e2[i].v^fa) init2_dfs(x,e2[i].v);\r\n}\r\n////////////\r\n\r\n\r\n//////\u9884\u5904\u7406\u4e24\u4e24\u5757\u4e4b\u95f4\u7684bitset\r\nvoid initd_dfs(int rt,int fa,int x,Bitset t){\r\n\tt=t|col[x],data[rt][x]=t;\r\n\tfor(int i=head2[x];i;i=e2[i].to)\r\n\t\tif(e2[i].v^fa) initd_dfs(rt,x,e2[i].v,t);\r\n}\r\n//////////\r\n\r\n///////\u96f6\u6563\u5757\u5185\u7684\u66b4\u529b\r\nil Bitset Query(int x,int y){\r\n\tBitset ans;clear(ans);\r\n\tif(dep1[x]<dep1[y]) swap(x,y);\r\n\twhile(dep1[x]>dep1[y]) Add(ans,a[x]),x=fa1[x];\r\n\twhile(x^y){\r\n\t\tAdd(ans,a[x]),x=fa1[x];\r\n\t\tAdd(ans,a[y]),y=fa1[y];\r\n\t}Add(ans,a[x]);\r\n\treturn ans;\r\n}\r\n////////////\r\n\r\n\r\nil int Solve(int x,int y){\r\n\tBitset ans;clear(ans);\r\n\tint u=bl[x],v=bl[y];\r\n\tif(dep2[u]<dep2[v]) swap(u,v),swap(x,y);\r\n\tif(u==v) return Query(x,y).Count();\r\n\tans=Query(x,L[u]),u=fa2[u];\r\n\tint uu=u;\r\n\twhile(dep2[uu]-1>dep2[v]) uu=fa2[uu];\r\n\tif(dep2[uu]-1==dep2[v])ans=ans|data[u][uu],u=fa2[uu];\r\n\tif(u^v){\r\n\t\tans=ans|Query(y,L[v]),v=fa2[v];\r\n\t\tif(dep2[u]>dep2[v]) ans=ans|col[u],u=fa2[u];\r\n\t}\r\n\telse return (ans|Query(R[v],y)).Count();\r\n\tif(u==v) return ans.Count(); \r\n\tint u_=u,v_=v;\r\n\t//\u6ce8\u610f,lca(u,v) \u5bf9\u5e94\u7684\u5757\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u8d70\u8fc7\u7c07\u8def\u5f84\u7684\r\n    //\u6240\u4ee5\u9700\u8981\u5206\u522b\u6216\u4e0a u,v \u4e24\u4fa7\u8def\u5f84\u7684bitset\r\n    while(fa2[u_]^fa2[v_]) u_=fa2[u_],v_=fa2[v_];\r\n\treturn (ans|data[u][u_]|data[v][v_]).Count();\r\n}\r\nint main(){\r\n\tn=read(),m=read(),B=1000;\r\n\tfor(int i=1;i<=n;i++){\r\n\t\ta[i]=read();\r\n\t\tb[i]=Hsh{i,a[i]};\r\n\t}\r\n\tsort(b+1,b+1+n);int val=0;\r\n\tb[0].x=-1;\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tif(b[i].x^b[i-1].x) val++;\r\n\t\ta[b[i].id]=val;\r\n\t}nn=val/64;\r\n\tfor(int i=1;i<n;i++){\r\n\t\tint x=read(),y=read();\r\n\t\taddedge1(x,y),addedge1(y,x);\r\n\t}\r\n\tfor(int i=1;i<(1<<16);i++) pc[i]=pc[i>>1]+(i&1);\r\n\tinit1_dfs(0,1),L[++N]=1,R[N]=1,bl[1]=N;\r\n\tdown_dfs(0,1),init2_dfs(0,N);\r\n\tfor(int i=1;i<=N;i++){\r\n\t\tint x=R[i];Add(col[i],a[x]);\r\n\t\twhile(x^L[i]) x=fa1[x],Add(col[i],a[x]);\r\n        //\u5904\u7406\u6bcf\u4e2a\u5757\u7c07\u8def\u5f84\u5bf9\u5e94\u7684bitset\r\n\t}Bitset t;clear(t);\r\n\tfor(int i=1;i<=N;i++)\r\n\t\tinitd_dfs(i,0,i,t);\r\n\tint x,y,lans=0;\r\n\twhile(m--){\r\n\t\tx=read()^lans,y=read();\r\n\t\tprintf(\"%d\\n\",lans=Solve(x,y));\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n\r\n# Top Cluster \u6811\u5206\u5757\u7684\u4f18\u52a3\r\n\r\n- \u9996\u5148\uff0c\u8be5\u7b97\u6cd5\u6bd4\u8d77\u4e00\u822c\u6811\u5206\u5757\u7b97\u6cd5\u6765\u8bf4\uff0c\u62e5\u6709\u4e25\u683c\u7684 $O(n\\sqrt n)$ \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5176\u6b21\uff0c\u6bcf\u4e2a\u5757\u53ea\u6709\u4e24\u4e2a\u7aef\u70b9\u7684\u7279\u6027\uff0c\u4f7f\u5f97\u4efb\u610f\u5728\u5e8f\u5217\u4e0a\u80fd\u7ef4\u62a4\u7684\u4fe1\u606f\u90fd\u80fd\u4ee5\u76f8\u540c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5728\u6811\u4e0a\u7ef4\u62a4\u3002\r\n\r\n- \u4f46\u662f\u8fd9\u4e2a\u73a9\u610f\u2026\u2026\u2026\u2026\u771f\u7684\u8d85\u7ea7\u96be\u5199\u554a\uff01\u800c\u4e14\u5e38\u6570\u4e5f\u662f\u771f\u7684\u5927qwq\r\n",
        "postTime": 1665572966,
        "uid": 288716,
        "name": "lzqy_",
        "ccfLevel": 7,
        "title": "P6177\u9898\u89e3/\u6811\u5206\u5757\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "~~\u9996\u5148\u611f\u8c22\u4e00\u4e2a\u53eb zzctommy \u7684\u5936\u5946\u4f6c\u8ba9\u6211\u660e\u767d\u6811\u5206\u5757~~\n\n~~\u849f\u84bb\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u6c42\u8fc7 qwq~~\n\n\u6211\u4eec\u77e5\u9053\u6811\u5206\u5757\u662f\u4e00\u79cd\u5728\u6811\u4e0a\u5206\u5757\u7684\u7b97\u6cd5\uff08\u5e9f\u8bdd\uff09\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u79cd\u53eb\u201c\u6811\u4e0a\u6492\u70b9\u201d\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u8fd9\u9053\u9898\uff08\u5176\u5b9e\u6211\u53ea\u4f1a\u8fd9\u79cd\uff09\u3002\n\n\u9996\u5148\uff0c\u5728\u6811\u4e0a\u6492\u4e00\u4e9b\u70b9\u3002\u6211\u4eec\u628a\u8fd9\u4e9b\u70b9\u53eb\u505a\u5173\u952e\u70b9\u3002\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u4fe1\u606f\uff0c\u67e5\u8be2\u4e00\u6761\u94fe\u65f6\u96f6\u6563\u70b9\u76f4\u63a5\u66b4\u529b\u6c42\uff0c\u4e2d\u95f4\u5173\u952e\u70b9\u8fde\u6210\u7684\u94fe\u7684\u4fe1\u606f\u6211\u4eec\u53ea\u9700\u8981\u8c03\u7528\u4e4b\u524d\u6211\u4eec\u7ef4\u62a4\u597d\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\uff08\u662f\u4e0d\u662f\u6709\u5206\u5757\u5185\u5473\u4e86 $XD$ \uff09\u3002\n\n\u4e3a\u4e86\u8ba9\u6211\u4eec\u80fd\u591f\u987a\u5229\u5730\u641e\u66b4\u529b\uff0c\u6211\u4eec\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u79bb\u6700\u8fd1\u7684\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7\u4e00\u4e2a\u503c\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5fc5\u987b\u4e0d\u8d85\u8fc7\u4e00\u4e2a\u503c\uff08\u6211\u4eec\u628a\u5b83\u79f0\u4f5c $S$ )\u3002\u663e\u7136\uff0c\u9274\u4e8e\u6211\u4eec\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u5173\u952e\u70b9\u662f\u8d8a\u591a\u8d8a\u597d\u3002\u6240\u4ee5\uff0c\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u4ed6\u7684 $1$ \u5230 $S$ \u7ea7\u7956\u5148\u90fd\u4e0d\u662f\u5173\u952e\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u628a\u4ed6\u8bbe\u4e3a\u5173\u952e\u70b9\u3002\u4f46\u662f\uff0c\u5982\u679c\u771f\u8fd9\u6837\u7528\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f $O(nS)$ \uff0c\u6709\u5f88\u5927\u7684\u4f18\u5316\u7a7a\u95f4\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u9006\u5411\u601d\u7ef4\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u5e95\u4e0b\u6ca1\u6709\u5173\u952e\u70b9\u513f\u5b50\u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e $S$ \uff0c\u90a3\u8fd9\u4e2a\u70b9\u65e9\u665a\u4f1a\u6210\u4e3a\u5173\u952e\u70b9\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u6765\u628a\u590d\u6742\u5ea6\u964d\u4e3a $O(n)$ \u3002\n\n\u597d\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u8fd9\u4e2a\u9898\u4e86\uff0c\u9898\u610f\uff1a\n\n- \u7ed9\u4f60\u4e00\u4e2a $n$ \u4e2a\u8282\u70b9\u7684\u6811\n- \u8be2\u95ee\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u6709\u591a\u5c11\u4e0d\u540c\u6570\u5b57\n\n\u7ed9\u51fa\u6bcf\u4e2a\u70b9\u7684\u6570\u5b57\uff0c\u6c42\u4e24\u70b9\u8def\u5f84\u4e0a\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u6570\u5b57\uff08\u4e3a\u4e86\u8868\u8fbe\u65b9\u4fbf\uff0c\u63d0\u524d\u5c06\u6bcf\u4e2a\u70b9\u7684\u6570\u5b57\u5b9a\u4e49\u4e3a\u6bcf\u4e2a\u70b9\u7684\u989c\u8272\uff09\u3002\n\n\u9996\u5148\u6211\u4eec\u80af\u5b9a\u8981\u6492\u70b9\u554a\uff08\u5e9f\u8bdd\uff09\uff0c\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u628a\u4e00\u4e9b\u5173\u952e\u70b9\u201c\u6492\u201d\u5728\u6811\u4e0a\u3002\u7136\u540e\uff0c\u6211\u4eec\u8bf4\u4e86\u8981\u7ef4\u62a4\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u5173\u952e\u70b9\u4e4b\u95f4\u51fa\u73b0\u4e86\u4ec0\u4e48\u989c\u8272\uff0c\u8fd9\u91cc\u6211\u4eec\u79bb\u6563\u5316\u4e4b\u540e\u7528 `bitset` \u7ef4\u62a4\u3002\u5bf9\u4e8e\u76f8\u90bb\u7684\u5173\u952e\u70b9\u6211\u4eec\u6ca1\u6709\u4ec0\u4e48\u597d\u529e\u6cd5\u6765\u5904\u7406\u8fd9\u4e2a `bitset` ,\u76f4\u63a5\u66b4\u529b\u6c42\u3002\u4f46\u662f\u5982\u679c\u4e0d\u76f8\u90bb\u7684\u5173\u952e\u70b9\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6216\u8fd0\u7b97\u6765\u9012\u63a8\u6c42\u51fa\u6765\uff0c\u4e5f\u5c31\u662f $bitset_{i,j} = bitset_{i,j-1} | bitset_{j-1,j}$ \u3002\n\n\u8bbe $lca = LCA(x,y)$ \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e24\u4e2a\u70b9\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u5148\u5206\u4e3a $x-lca$ \uff0c $y-lca$ \u3002\u8fd9\u6837\uff0c\u8def\u5f84\u5c31\u8f6c\u5316\u4e3a\u4e86\u4e24\u6761\u94fe\uff0c\u6211\u4eec\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u5f04\uff0c\u4e5f\u5c31\u662f\u5148\u627e\u5728 $x$ \u7236\u4eb2\u65b9\u5411\u7684\u6700\u8fd1\u5173\u952e\u70b9\uff0c\u628a\u4ed6\u79f0\u4f5c $x_1$ \uff0c\u518d\u6c42\u5728 $lca$ \u5728 $x$ \u65b9\u5411\u7684\u6700\u8fd1\u5173\u952e\u70b9\uff0c\u79f0\u505a $x_2$ \u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u6761\u94fe\u5206\u6210 $x-x_1$ \uff0c $x_1-x_2$ \uff0c $x_2-lca$ \u3002\u5bf9\u4e8e $x-x_1$ \u548c $x_2-lca$ \uff0c\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u6c42\u7b54\u6848\uff0c\u6bd5\u7adf\u590d\u6742\u5ea6\u4e0d\u8d85\u8fc7 $O(s)$ \u3002\u5bf9\u4e8e $x_1-x_2$ \u8fd9\u6837\u7684\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u6211\u4eec\u4e4b\u524d\u9884\u5904\u7406\u4e86\u5b83\u7684 `bitset` \uff0c\u76f4\u63a5\u62ff\u51fa\u6765\u6c42\u5c31\u662f\u4e86\u3002\u8fd9\u6837\uff0c\u628a\u8fd9\u4e9b\u6c42\u51fa\u6765\u7684\u503c\u6c42\u5e76\u96c6\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u7684\u7b54\u6848\u4e86\uff01\u4e0b\u9762\u662f\u4ee3\u7801\uff08\u672c\u4eba\u559c\u6b22\u7528 codeblocks \uff0c\u6240\u4ee5\u7528\u7684\u662f\u8e69\u811a\u7684\u82f1\u6587\u6ce8\u91ca\uff0c\u8bf7\u89c1\u8c05 qwq \uff09\uff1a\n\n$Code:$\n\n```cpp\n#include <iostream>\n#include <bitset>\n#include <algorithm>\nusing namespace std;\nint head[100001],col[100001],deep[100001],maxdeep[100001],largeson[100001],to[100001],nxt[100001],cnt = 0,siz[100001];\nbitset<40100> colors[100][100];\nbool isbig[100001];\nint bigs[100001],bigcnt = 0;\nint father[100001];\nint bigpa[100001];\n//int nearestBigChild[100001];\nint top[100001]; //heavy line top\nint id[100001]; // big point's id\nint lshcol[100001],lshcnt; //color after LI SAN HUA ed.\nint n,m;\n\nconst int S = 1000;\n\nvoid add(int a,int b) {\n    cnt++;\n    to[cnt] = b;\n    nxt[cnt] = head[a];\n    head[a] = cnt;\n}\nvoid dfsBig(int now,int pa) { //Find Big\n    deep[now] = deep[pa]+1;\n    siz[now] = 1;\n    father[now] = pa;\n    maxdeep[now] = deep[now];\n    for(int i = head[now]; i; i = nxt[i]) {\n        if(to[i] != pa) {\n            dfsBig(to[i],now);\n            siz[now] += siz[to[i]];\n            maxdeep[now] = max(maxdeep[now],maxdeep[to[i]]);\n            if(!largeson[now] || siz[largeson[now]] < siz[to[i]]) {\n                largeson[now] = to[i]; //LCA!\n            }\n        }\n        if(now == 1 || maxdeep[now]-deep[now] > S) {\n            isbig[now] = true;\n            id[now] = ++bigcnt;\n            maxdeep[now] = deep[now]; //Big Points Has Parents!\n        }\n        // if down S don't have big, it becomes a big.\n        // we know that the root is big.\n    }\n}\n\nvoid dfsPouFen(int now,int tt) { // thats why we get large sons. for LCA.\n    top[now] = tt;\n    if(largeson[now]) dfsPouFen(largeson[now],tt);\n    for(int i = head[now]; i; i = nxt[i]) {\n        if(to[i] != father[now] && to[i] != largeson[now]) {\n            dfsPouFen(to[i],to[i]);\n        }\n    }\n}\n\nvoid dfsBitSet(int now,int pa,int lastbig) {\n    if(isbig[now]) {\n        bigpa[now] = lastbig;\n        colors[id[now]][id[now]].set(lshcol[now]);\n        for(int k = now; k != father[lastbig]; k = father[k]) {\n            colors[id[now]][id[lastbig]].set(lshcol[k]);\n        }\n        for(int k = bigpa[lastbig]; k; k = bigpa[k]) {\n            colors[id[now]][id[k]] = colors[id[now]][id[lastbig]];\n            colors[id[now]][id[k]] |= colors[id[lastbig]][id[k]];\n        }\n    }\n    // for now to last big, we BAO LI\n    // we use bit set and or to calculate the bit set.\n    for(int i = head[now]; i; i = nxt[i]) {\n        if(to[i] == pa) continue;\n        dfsBitSet(to[i],now,isbig[now]?now:lastbig);\n    }\n}\n\nint lca(int u,int v) {\n    while(top[u] != top[v]) {\n        if(deep[top[u]] < deep[top[v]]) swap(u,v);\n        u = top[u];\n        u = father[u];\n    }\n    return (deep[u]>deep[v])?v:u;\n}\n\nint query(int u,int v) {\n    bitset<40100> opop;\n    int homo = lca(u,v);\n    opop.set(lshcol[homo]);\n    for(; !isbig[u] && u != homo; u = father[u]) {\n        opop.set(lshcol[u]);\n        //cout << u << endl;\n    }\n    for(; !isbig[v] && v != homo; v = father[v]) {\n        opop.set(lshcol[v]);\n    }\n    if(u != homo) {\n        int u2;\n        for(u2 = u; bigpa[u2] && deep[bigpa[u2]] > deep[homo]; u2 = bigpa[u2]);\n        opop |= colors[id[u]][id[u2]];\n        for(int i = u2; i != homo; i = father[i]) {\n            opop.set(lshcol[i]);\n        }\n    }\n    if(v != homo) {\n        int v2;\n        for(v2 = v; bigpa[v2] && deep[bigpa[v2]] > deep[homo]; v2 = bigpa[v2]);\n        opop |= colors[id[v]][id[v2]];\n        for(int i = v2; i != homo; i = father[i]) {\n            opop.set(lshcol[i]);\n        }\n    }\n    return opop.count();\n}\n\nint main() {\n    cin >> n >> m;\n    for(int i = 1; i <= n; i++) {\n        cin >> col[i];\n        lshcol[i] = col[i];\n    }\n    for(int i = 1; i < n; i++) {\n        int o,p;\n        cin >> o >> p;\n        add(o,p);\n        add(p,o);\n    }\n    sort(col+1,col+1+n);\n    lshcnt = unique(col+1,col+1+n)-col-1;\n    for(int i = 1; i <= n; i++) {\n        lshcol[i] = lower_bound(col+1,col+1+lshcnt,lshcol[i])-col;\n    }\n    dfsBig(1,0);\n    dfsPouFen(1,1);\n    dfsBitSet(1,0,0);\n    int lastans = 0;\n    while(m--) {\n        int u1,v;\n        cin >> u1 >> v;\n        int u = u1^lastans;\n        lastans = query(u,v);\n        cout << lastans << endl;\n    }\n    return 0;\n}\n```\n\n\u6700\u540e\u611f\u8c22\u5927\u5bb6\u89c2\u770b\uff01 XD",
        "postTime": 1662604416,
        "uid": 676055,
        "name": "eggegg185",
        "ccfLevel": 0,
        "title": "P6177 \u9898\u89e3"
    },
    {
        "content": "\u7ed9\u4f60\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u4e14\u5e26\u70b9\u6743\u7684\u6811\uff0c$m$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u67e5\u8be2\u94fe\u989c\u8272\u6570\u3002\n\n\u5f3a\u5236\u5728\u7ebf\u3002\n\n$1\\leq n \\leq 4\\times 10^4,1\\leq m\\leq 10^5$\u3002\n\n#### sol\n\n\u9996\u5148\u5982\u679c\u4e0d\u5f3a\u5236\u5728\u7ebf\uff0c\u7528\u6811\u4e0a\u83ab\u961f\u5373\u53ef\u3002\n\n\u4f46\u591a\u4e86\u4e2a\u5f3a\u5236\u5728\u7ebf\uff0c\u5bb9\u6613\u60f3\u5230\u662f\u9884\u5904\u7406\u9898\u3002\n\n\u67e5\u8be2\u94fe\u989c\u8272\u6570\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 `bitset`\uff0c\u5bf9\u503c\u57df\u5efa `bitset`\uff0c\u7b54\u6848\u5c31\u662f `bitset` \u4e2d $1$ \u7684\u6570\u91cf\u3002\n\n \u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u600e\u4e48\u628a\u4e00\u6761\u8def\u5f84\u4e0a\u7684 `bitset` \u5e76\u8d77\u6765\u3002\n\n\u8bb0\u5f97\u79bb\u6563\u5316\u3002\n\n**\u6cd5\u4e00**\n\n\u8003\u8651\u6811\u5206\u5757\u3002\n\n\u8003\u8651\u7528\u4e00\u79cd\u7b80\u5355\u7684\u6811\u5206\u5757\u6280\u5de7\u2014\u2014\u6811\u4e0a\u6492\u70b9\u3002\n\n\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5148\u8bbe\u4e00\u4e2a\u9608\u503c $S$\uff0c\u5728\u6811\u4e0a\u9009\u62e9\u4e0d\u8d85\u8fc7 $\\frac{n}{S}$ \u4e2a\u70b9\u4f5c\u4e3a\u5173\u952e\u70b9\uff0c\u6ee1\u8db3\u6bcf\u4e2a\u5173\u952e\u70b9\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u7956\u5148\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $S$\u3002\n\n\u5177\u4f53\u5730\uff0c\u6bcf\u6b21\u9009\u62e9\u5f53\u524d\u6df1\u5ea6\u6700\u5927\u7684\u4e00\u4e2a\u975e\u5173\u952e\u70b9\uff0c\u82e5\u5b83\u7684 $1 \\sim S$ \u7ea7\u7956\u5148\u90fd\u4e0d\u662f\u5173\u952e\u70b9\uff0c\u5219\u628a\u5b83\u7684 $S$ \u7ea7\u7956\u5148\u6807\u8bb0\u4e3a\u5173\u952e\u70b9\u3002\n\n\u7531\u4e8e\u4e0a\u8ff0\u65b9\u6cd5\u4e2d\u6bcf\u6807\u8bb0\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u81f3\u5c11\u6709 $S$ \u4e2a\u70b9\u4e0d\u4f1a\u88ab\u6807\u8bb0\uff0c\u6240\u4ee5\u5173\u952e\u70b9\u7684\u6570\u91cf\u662f\u6b63\u786e\u7684\u3002\n\n\u4ed4\u7ec6\u601d\u8003\uff0c\u5bb9\u6613\u53d1\u73b0\u6bcf\u4e2a\u5173\u952e\u70b9\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u7956\u5148\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $S$ \u8fd9\u4e2a\u6761\u4ef6\u4e5f\u6ee1\u8db3\u3002\n\n\u6492\u5b8c\u5173\u952e\u70b9\uff0c\u518d\u8bb0\u5f55\u4e24\u5173\u952e\u70b9\u95f4\u7684 `bitset`\uff0c\u5148\u7528 $\\mathcal O(S)$ \u7684\u65f6\u95f4\u6c42\u51fa\u76f8\u90bb\u4e24\u5173\u952e\u70b9\u7684 `bitset`\uff0c\u518d\u5904\u7406\u51fa\u4e24\u4e24\u4e4b\u95f4\u7684\u5373\u53ef\uff0c\u9884\u5904\u7406\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\frac{n^2}{S}+\\frac{n^3}{wS^2})$\u3002\n\n\u7136\u540e\u8003\u8651\u8be2\u95ee\uff0c\u6b64\u65f6\u8be2\u95ee\u7684\u8def\u5f84\u5c31\u88ab\u62c6\u6210\u4e86\u4e24\u4e2a\u6563\u5757\u548c\u4e00\u4e2a\u6574\u5757\uff0c\u6563\u5757\u66b4\u529b\uff0c\u6574\u5757 `bitset` \u53d6\u4ea4\u96c6\u5373\u53ef\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(mS+\\frac{nm}{w})$\u3002\n\n\u53d6 $S=\\sqrt n$\uff0c\u5219\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O((n+m)\\sqrt n+\\frac{n^2+nm}{w})$\uff0c\u53ef\u8fc7\u3002\n\n$\\text{1.88s /  20.14MB /  4.15KB C++14 (GCC 9) O2}$\u3002\n\n```cpp\n#include <cstdio>\n#include <bitset>\n#include <algorithm>\n\n#define re register\n\nnamespace Fread\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S, *T;\n    inline char getchar()\n    {\n        if (S == T)\n        {\n            T = (S = buf) + fread(buf, 1, SIZE, stdin);\n            if (S == T)\n                return '\\n';\n        }\n        return *S++;\n    }\n}\nnamespace Fwrite\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S = buf, *T = buf + SIZE;\n    inline void flush()\n    {\n        fwrite(buf, 1, S - buf, stdout);\n        S = buf;\n    }\n    inline void putchar(char c)\n    {\n        *S++ = c;\n        if (S == T)\n            flush();\n    }\n    struct NTR\n    {\n        ~NTR()\n        {\n            flush();\n        }\n    } ztr;\n}\n\n#ifdef ONLINE_JUDGE\n#define getchar Fread::getchar\n#define putchar Fwrite::putchar\n#endif\n\ninline int read()\n{\n\tre int x = 0, f = 1;\n\tre char c = getchar();\n\twhile (c < '0' || c > '9')\n\t{\n\t\tif (c == '-')\n\t\t\tf = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t{\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline void write(re int x)\n{\n\tif (x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\ninline void swap(re int &x, re int &y)\n{\n\tx ^= y ^= x ^= y;\n}\n\nconst int _ = 4e4 + 7;\n\nstd::bitset<_> bt[42][42], nw;\n\nint n, m, B, arr[_], a[_], fa[_], dep[_], mxd[_], FF[_], siz[_], tp[_], hson[_];\n\nint id[_], cnt, head[_], tot, ans, sta[_], top, gg[_];\n\nstruct edge\n{\n\tint to, nxt;\n} e[_ << 1];\n\nvoid dfs1(re int now, re int D)\n{\n\tsiz[now] = 1;\n\tdep[now] = D;\n\tmxd[now] = dep[now];\n\tfor (re int i = head[now]; i; i = e[i].nxt)\n\t{\n\t\tre int v = e[i].to;\n\t\tif (!dep[v])\n\t\t{\n\t\t\tfa[v] = now;\n\t\t\tdfs1(v, D + 1);\n\t\t\tsiz[now] += siz[v];\n\t\t\tif (mxd[v] > mxd[now])\n\t\t\t\tmxd[now] = mxd[v];\n\t\t\tif (siz[hson[now]] < siz[v])\n\t\t\t\thson[now] = v;\n\t\t}\n\t}\n\tif (mxd[now] - dep[now] >= 1000)\n\t\tid[now] = ++tot, mxd[now] = dep[now];\n}\n\nvoid dfs2(re int now)\n{\n\tfor (re int i = head[now]; i; i = e[i].nxt)\n\t{\n\t\tre int v = e[i].to;\n\t\tif (dep[v] > dep[now])\n\t\t{\n\t\t\tif (id[v])\n\t\t\t{\n\t\t\t\tint ip = id[sta[top]], in = id[v];\n\t\t\t\tfor (int x = v; x != sta[top]; x = fa[x])\n\t\t\t\t\tbt[ip][in].set(a[x]);\n\t\t\t\tnw = bt[ip][in];\n\t\t\t\tfor (int i = 1; i < top; ++i)\n\t\t\t\t{\n\t\t\t\t\tstd::bitset<_> &bs = bt[id[sta[i]]][in];\n\t\t\t\t\tbs = bt[id[sta[i]]][ip];\n\t\t\t\t\tbs |= nw;\n\t\t\t\t}\n\t\t\t\tFF[v] = sta[top], gg[v] = gg[sta[top]] + 1;\n\t\t\t\tsta[++top] = v;\n\t\t\t}\n\t\t\tdfs2(v);\n\t\t\tif (id[v])\n\t\t\t\t--top;\n\t\t}\n\t}\n}\n\nvoid dfs3(re int now, re int tf)\n{\n\ttp[now] = tf;\n\tif (hson[now])\n\t\tdfs3(hson[now], tf);\n\tfor (re int i = head[now]; i; i = e[i].nxt)\n\t{\n\t\tre int v = e[i].to;\n\t\tif (!tp[v])\n\t\t\tdfs3(v, v);\n\t}\n}\n\ninline int LCA(re int x, re int y)\n{\n\twhile (tp[x] != tp[y])\n\t{\n\t\tif (dep[tp[x]] < dep[tp[y]])\n\t\t\tswap(x, y);\n\t\tx = fa[tp[x]];\n\t}\n\treturn dep[x] < dep[y] ? x : y;\n}\n\nsigned main()\n{\n\tn = read(), m = read();\n\tfor (re int i = 1; i <= n; ++i)\n\t\tarr[i] = a[i] = read();\n\tstd::sort(arr + 1, arr + 1 + n);\n\tarr[0] = std::unique(arr + 1, arr + 1 + n) - arr - 1;\n\tfor (re int i = 1; i <= n; ++i)\n\t\ta[i] = std::lower_bound(arr + 1, arr + 1 + arr[0], a[i]) - arr;\n\tfor (re int i = 1, u, v; i < n; ++i)\n\t{\n\t\tu = read(), v = read();\n\t\te[++cnt] = (edge){v, head[u]}, head[u] = cnt;\n\t\te[++cnt] = (edge){u, head[v]}, head[v] = cnt;\n\t}\n\tdfs1(1, 1);\n\tif (!id[1])\n\t\tid[1] = ++tot;\n\tsta[top = 1] = gg[1] = 1;\n\tdfs2(1);\n\tdfs3(1, 1);\n\twhile (m--)\n\t{\n\t\tint u = read() ^ ans, v = read();\n\t\tnw.reset();\n\t\tint l = LCA(u, v);\n\t\twhile (u != l && !id[u])\n\t\t\tnw.set(a[u]), u = fa[u];\n\t\twhile (v != l && !id[v])\n\t\t\tnw.set(a[v]), v = fa[v];\n\t\tif (u != l)\n\t\t{\n\t\t\tint pre = u;\n\t\t\twhile (dep[FF[pre]] >= dep[l])\n\t\t\t\tpre = FF[pre];\n\t\t\tif (pre != u)\n\t\t\t\tnw |= bt[id[pre]][id[u]];\n\t\t\twhile (pre != l)\n\t\t\t\tnw.set(a[pre]), pre = fa[pre];\n\t\t}\n\t\tif (v != l)\n\t\t{\n\t\t\tint pre = v;\n\t\t\twhile (dep[FF[pre]] >= dep[l])\n\t\t\t\tpre = FF[pre];\n\t\t\tif (pre != v)\n\t\t\t\tnw |= bt[id[pre]][id[v]];\n\t\t\twhile (pre != l)\n\t\t\t\tnw.set(a[pre]), pre = fa[pre];\n\t\t}\n\t\tnw.set(a[l]);\n\t\twrite(ans = nw.count()), putchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n**\u6cd5\u4e8c**\n\n\u8003\u8651\u8f7b\u91cd\u94fe\u5256\u5206\uff0c\u8be2\u95ee\u65f6\u5c06\u8def\u5f84\u4e0a\u7684\u82e5\u5e72\u6761\u91cd\u94fe\u7684 `bitset` \u5e76\u8d77\u6765\u5373\u53ef\u3002\n\n\u7531\u4e8e\u91cd\u94fe\u4e0a\u7684\u70b9\u7684 `dfn` \u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u5e8f\u5217\u5206\u5757\u5373\u53ef\u3002\n\n\u6bcf\u6b21\u8be2\u95ee\uff0c\u8df3\u91cd\u94fe\u5206\u5757\u8ba1\u7b97\u8fd9\u6761\u91cd\u94fe\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\frac{n^2}{w}+m\\log n(\\sqrt{n}+\\frac{n}{w}))$\u3002\n\n$\\text{1.05s /  18.14MB /  3.47KB C++14 (GCC 9) O2}$\u3002\n\n```cpp\n#include <cstdio>\n#include <bitset>\n#include <algorithm>\n\n#define re register\n\nnamespace Fread\n{\n\tconst int SIZE = 1 << 23;\n\tchar buf[SIZE], *S, *T;\n\tinline char getchar()\n\t{\n\t\tif (S == T)\n\t\t{\n\t\t\tT = (S = buf) + fread(buf, 1, SIZE, stdin);\n\t\t\tif (S == T)\n\t\t\t\treturn '\\n';\n\t\t}\n\t\treturn *S++;\n\t}\n}\nnamespace Fwrite\n{\n\tconst int SIZE = 1 << 23;\n\tchar buf[SIZE], *S = buf, *T = buf + SIZE;\n\tinline void flush()\n\t{\n\t\tfwrite(buf, 1, S - buf, stdout);\n\t\tS = buf;\n\t}\n\tinline void putchar(char c)\n\t{\n\t\t*S++ = c;\n\t\tif (S == T)\n\t\t\tflush();\n\t}\n\tstruct NTR\n\t{\n\t\t~NTR()\n\t\t{\n\t\t\tflush();\n\t\t}\n\t} ztr;\n}\n\n#ifdef ONLINE_JUDGE\n#define getchar Fread::getchar\n#define putchar Fwrite::putchar\n#endif\n\ninline int read()\n{\n\tre int x = 0, f = 1;\n\tre char c = getchar();\n\twhile (c < '0' || c > '9')\n\t{\n\t\tif (c == '-')\n\t\t\tf = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t{\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline void write(int x)\n{\n\tif (x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nconst int _ = 4e4 + 7, W = 4e4 + 7, B = 1e3;\n\nstd::bitset<W> f[42][42], nw;\n\nint n, m, cnt_node, ans, tot, a[_], arr[_], fa[_], dep[_], siz[_], hson[_], top[_], dfn[_], b[_], bel[_], L[_], R[_], head[_], to[_ << 1], nxt[_ << 1];\n\ninline void swap(re int &x, re int &y)\n{\n\tx ^= y ^= x ^= y;\n}\n\ninline void add(re int u, re int v)\n{\n\tto[++tot] = v;\n\tnxt[tot] = head[u];\n\thead[u] = tot;\n}\n\nvoid dfs1(re int u, re int D)\n{\n\tdep[u] = D, siz[u] = 1;\n\tfor (re int i = head[u]; i; i = nxt[i])\n\t{\n\t\tre int v = to[i];\n\t\tif (siz[v])\n\t\t\tcontinue;\n\t\tfa[v] = u;\n\t\tdfs1(v, D + 1);\n\t\tsiz[u] += siz[v];\n\t\tif (siz[hson[u]] < siz[v])\n\t\t\thson[u] = v;\n\t}\n}\n\nvoid dfs2(re int u, re int tf)\n{\n\ttop[u] = tf, dfn[u] = ++cnt_node, a[cnt_node] = b[u];\n\tif (!hson[u])\n\t\treturn;\n\tdfs2(hson[u], tf);\n\tfor (re int i = head[u]; i; i = nxt[i])\n\t{\n\t\tre int v = to[i];\n\t\tif (top[v])\n\t\t\tcontinue;\n\t\tdfs2(v, v);\n\t}\n}\n\ninline void pre()\n{\n\tfor (re int i = 1; i <= n; ++i)\n\t{\n\t\tbel[i] = (i - 1) / B + 1;\n\t\tf[bel[i]][bel[i]].set(a[i]);\n\t}\n\tfor (re int i = 1; i <= bel[n]; ++i)\n\t\tL[i] = R[i - 1] + 1, R[i] = i * B;\n\tR[bel[n]] = n;\n\tfor (re int i = 1; i < bel[n]; ++i)\n\t\tfor (re int j = i + 1; j <= bel[n]; ++j)\n\t\t\tf[i][j] = f[i][j - 1] | f[j][j];\n}\n\ninline void Query_on_block(re int l, re int r)\n{\n\tif (bel[l] == bel[r])\n\t{\n\t\tfor (re int i = l; i <= r; ++i)\n\t\t\tnw.set(a[i]);\n\t\treturn;\n\t}\n\tnw |= f[bel[l] + 1][bel[r] - 1];\n\tfor (re int i = l; i <= R[bel[l]]; ++i)\n\t\tnw.set(a[i]);\n\tfor (re int i = L[bel[r]]; i <= r; ++i)\n\t\tnw.set(a[i]);\n}\n\ninline void Query_on_tree(re int u, re int v)\n{\n\twhile (top[u] != top[v])\n\t{\n\t\tif (dep[top[u]] < dep[top[v]])\n\t\t\tswap(u, v);\n\t\tQuery_on_block(dfn[top[u]], dfn[u]);\n\t\tu = fa[top[u]];\n\t}\n\tif (dep[u] > dep[v])\n\t\tswap(u, v);\n\tQuery_on_block(dfn[u], dfn[v]);\n}\n\nsigned main()\n{\n\tn = read(), m = read();\n\tfor (re int i = 1; i <= n; ++i)\n\t\tarr[i] = b[i] = read();\n\tstd::sort(arr + 1, arr + 1 + n);\n\tarr[0] = std::unique(arr + 1, arr + 1 + n) - arr - 1;\n\tfor (re int i = 1; i <= n; ++i)\n\t\tb[i] = std::lower_bound(arr + 1, arr + 1 + arr[0], b[i]) - arr;\n\tre int u, v;\n\tfor (re int i = 1; i < n; ++i)\n\t{\n\t\tu = read(), v = read();\n\t\tadd(u, v), add(v, u);\n\t}\n\tdfs1(1, 1), dfs2(1, 1);\n\tpre();\n\twhile (m--)\n\t{\n\t\tnw.reset();\n\t\tu = read() ^ ans, v = read();\n\t\tQuery_on_tree(u, v);\n\t\twrite(ans = nw.count()), putchar('\\n');\n\t}\n}\n```\n\n\n\n",
        "postTime": 1643871610,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "P6177 Count on a tree II"
    },
    {
        "content": "## \u70b9\u5206\u6cbb + bitset + \u4e71\u641e\n\n\u6a21\u677f\u9898\u5f53\u7136\u662f\u8981\u4e71\u641e\u7684\u5566\uff0c\u8fd9\u8fb9\u63d0\u4f9b\u4e00\u79cd\u4f7f\u7528\u70b9\u5206\u6cbb\uff0cbitset  \u7684\u4e71\u641e\u65b9\u6cd5\u3002\n\n\u8003\u8651\u9700\u8981\u5728\u7ebf\u67e5\u8be2\uff0c\u6240\u4ee5\u5efa\u51fa\u70b9\u5206\u6811\u3002\n\n\u8bbe\u5f53\u524d\u67e5\u8be2\u70b9\u4e3a  $(u,v)$  \uff0c\u5176\u5728\u70b9\u5206\u6811\u4e0a\u7684  LCA  \u4e3a  $rt$  \uff0c\u5373\u5728\u4e00\u6b21\u70b9\u5206\u6cbb\u4e2d\u4ee5  $rt$  \u4e3a\u5206\u6cbb\u91cd\u5fc3\u627e\u5230\u5904\u5728\u4e0d\u540c\u5b50\u6811\u5185\u7684  $u,v$\u3002\u6b64\u65f6\u53ea\u9700\u8981\u5c06  $(u,rt),(v,rt)$  \u7684\u7b54\u6848\u5408\u5e76\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u4e2a\u7b54\u6848\u53ef\u4ee5\u7528  bitset  \u9884\u5904\u7406\u3002\n\n\u8fd9\u6837\u505a\u65f6\u95f4\u590d\u6742\u5ea6\u662f  $O(\\frac{(m+n\\log n)n}{w})$\uff0c\u95ee\u9898\u4e0d\u5927\u3002\n\n\u7136\u800c\u7a7a\u95f4\u662f  $O(\\frac{n^2\\log n}{w})$  \u7684\uff0c\u5f88\u9057\u61be\u65e0\u6cd5\u901a\u8fc7\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u501f\u7528\u4e00\u4e0b\u6b63\u89e3\u6492\u70b9\u7684\u5957\u8def\uff0c\u5982\u679c\u6211\u4eec\u53ea\u8bb0\u5f55\u67d0\u4e9b\u70b9\u7684\u7b54\u6848\uff0c\u4e2d\u95f4\u66b4\u529b\u5f80  bitset  \u4e2d\u52a0\u5165\u7b54\u6848\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u8fb9\u6211\u76f4\u63a5\u6309\u6df1\u5ea6\u6bcf\u9694  $8$  \u4e2a\u70b9\u6253\u4e00\u6b21\u7b54\u6848\uff0c\u8fd9\u6837\u67e5\u8be2\u7684\u65f6\u5019\u4e5f\u5c31\u53ea\u9700\u8981\u5411\u4e0a\u8df3  $8$  \u6b21\u7b54\u6848\u5c31\u80fd\u627e\u5230\u4e86\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\u662f\u7384\u5b66\u7684\uff0c\u56e0\u4e3a\u5f88\u6709\u53ef\u80fd\u67d0\u4e2a\u6df1\u5ea6\u7684\u70b9\u975e\u5e38\u591a\uff0c\u4e5f\u8bb8\u518d\u968f\u673a\u4e00\u70b9\u4f1a\u66f4\u597d\u3002\u4e0d\u8fc7\u5373\u4f7f\u4e0d\u5f00  O2  \u8fd9\u6837\u4e5f\u80fd\u8fc7\u3002\n\n```\n#include<bits/stdc++.h>\n#define rep(a,b,c) for(int c(a);c<=(b);++c)\n#define drep(a,b,c) for(int c(a);c>=(b);--c)\n#define grep(b,c) for(int c(head[b]);c;c=nxt[c])\nusing namespace std;\ninline int read()\n{\n\tint res=0;char ch=getchar();while(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch<='9'&&ch>='0')res=res*10+(ch^48),ch=getchar();return res;\n}\ninline void print(int x){if(x>9)print(x/10);putchar(x%10+'0');}\nconst int N=4e4+10,INF=0x3f3f3f3f;int head[N],des[N<<1],nxt[N<<1],cgt;\ninline void ins(int x,int y)\n{\n\tnxt[++cgt]=head[x];des[head[x]=cgt]=y;\n\tnxt[++cgt]=head[y];des[head[y]=cgt]=x;\n}\ntypedef unsigned long long uLL;\nstruct Bitset\n{\n\tuLL a[625];inline void operator |= (const Bitset &b){for(int i=0;i<625;++i)a[i]|=b.a[i];}\n\tinline int count(){int ans=0;for(int i=0;i<625;++i)ans+=__builtin_popcountll(a[i]);return ans;}\n\tinline void ins(int x){a[x>>6]|=1ull<<(x&63);}\n\tinline void del(int x){a[x>>6]^=1ull<<(x&63);}\n\tinline bool operator [] (int x){return a[x>>6]>>(x&63)&1;}\n\tinline void clear(){memset(a,0,sizeof(a));}\n};\nunordered_map<int,int> Fa[N];\nunordered_map<int,Bitset> s[N];int n,c[N],P[N],p;\ninline int bnd(int x){int l(1),r(p),m;while(l<=r)P[m=(l+r)>>1]<=x?l=m+1:r=m-1;return l-1;}\nint Mn,Rt,Sz,siz[N],fa[N],dep[N];\ninline void getRt(int u,int fa=0)\n{\n\tsiz[u]=1;int mx=0;\n\tgrep(u,i)if(!dep[des[i]]&&des[i]!=fa)\n\t{\n\t\tint v=des[i];getRt(v,u);\n\t\tsiz[u]+=siz[v];mx=max(mx,siz[v]);\n\t}\n\tmx=max(mx,Sz-siz[u]); mx<Mn?Mn=mx,Rt=u:0;\n}\ninline void getSz(int u,int fa=0){siz[u]=1;grep(u,i)if(!dep[des[i]]&&des[i]!=fa)getSz(des[i],u),siz[u]+=siz[des[i]];}\nBitset A;int RT;\ninline void dfs(int u,int fa=0,int dd=1)\n{\n\tgrep(u,i)if(des[i]!=fa&&!dep[des[i]])\n\t{\n\t\tbool flag=0;int v=des[i];\n\t\tif(!A[c[v]])flag=true,A.ins(c[v]);\n\t\tif(dd%8==0)\n\t\t{\n\t\t\ts[RT][v]=A;\n\t\t\tFa[RT][v]=u|(1<<30);\n\t\t}\n\t\telse Fa[Rt][v]=u;\n\t\tdfs(v,u,dd+1);\n\t\tif(flag)A.del(c[v]);\n\t}\n}\ninline void Cnt(int u){s[u][u].ins(c[u]);A=s[u][u];Fa[u][u]=1<<30;RT=u;dfs(u);}\ninline void Solve(int u)\n{\n\tCnt(u);grep(u,i)if(!dep[des[i]])\n\t{\n\t\tint v=des[i];getSz(v);Mn=INF;Sz=siz[v];getRt(v);\n\t\tfa[Rt]=u;dep[Rt]=dep[u]+1;Solve(Rt);\n\t}\n}\ninline int LCA(int u,int v){while(u!=v){dep[u]<dep[v]?v=fa[v]:u=fa[u];}return u;}\nBitset ans;\ninline int qry(int u,int v)\n{\n\tint lc=LCA(u,v);ans.clear();\n\twhile(true){int tmp=Fa[lc][u];if(tmp>>30&1){ans|=s[lc][u];break;}ans.ins(c[u]);u=tmp;}\n\twhile(true){int tmp=Fa[lc][v];if(tmp>>30&1){ans|=s[lc][v];break;}ans.ins(c[v]);v=tmp;}\n\treturn ans.count();\n}\nint main()\n{\n\tn=read();int Q=read();rep(1,n,i)P[i]=c[i]=read();\n\tsort(P+1,P+n+1);p=unique(P+1,P+n+1)-P-1;rep(1,n,i)c[i]=bnd(c[i])-1;\n\trep(2,n,i)ins(read(),read());Sz=n;Mn=INF;getRt(1);dep[Rt]=1;Solve(Rt);\n\tint lst=0;while(Q--){int u=lst^read(),v=read();print(lst=qry(u,v));putchar('\\n');}\n\treturn 0;\n}\n```",
        "postTime": 1667896199,
        "uid": 191281,
        "name": "Jr_Zlw",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6177 \u6811\u5206\u5757"
    }
]