[
    {
        "content": "## P7422 \u9898\u89e3\n\n\u9996\u5148\u89c2\u5bdf\u9898\u76ee\u4e2d\u7684\u9650\u5236\uff0c\u4e0d\u96be\u53d1\u73b0 $k$ \u53ea\u6709 $20$ \uff0c\u4e8e\u662f\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u679a\u4e3e $k$ \u8ba1\u7b97\uff0c\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u3002\n\n\u89c2\u5bdf\u4e24\u4e2a\u8981\u6c42\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\uff0c\u4f9b\u5e94\u6750\u6599\u4e0d\u540c\u7684\u9650\u5236\u6bd4\u8f83\u597d\u6ee1\u8db3\uff0c\u57ce\u5e02 $A$ \u5728\u57ce\u5e02 $B_i$ \u5230\u9996\u90fd\u7684\u5fc5\u7ecf\u4e4b\u8def\u4e0a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c $A$ \u662f\u5272\u70b9\u5e76\u4e14 $A$ \u5c06\u9996\u90fd\u548c $B_i$ \u5206\u5728\u4e86\u4e24\u4e2a\u8054\u901a\u5757\u4e2d\u3002\n\n\u7b2c\u4e8c\u4e2a\u8981\u6c42\uff0c $B$ \u4e4b\u95f4\u7684\u6750\u6599\u76f8\u540c\u6bd4\u8f83\u597d\u6ee1\u8db3\uff0c\u5bf9\u4e8e $B$ \u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\uff0c\u4e0d\u96be\u53d1\u73b0\u662f\u5728\u53bb\u6389 $A$ \u540e\u5728\u4e0d\u540c\u7684\u8054\u901a\u5757\u4e2d\uff0c\u4e24\u6761\u9650\u5236\u90fd\u4e0e\u5272\u70b9\u6709\u5173\u7cfb\uff0c\u4e8e\u662f\u5efa\u51fa\u5706\u65b9\u6811\u3002\n\n\u663e\u7136\u53ea\u9700\u8981\u5bf9\u4e8e\u5706\u70b9\u7edf\u8ba1\u7b54\u6848\uff0c\u8bbe\u70b9 $u$ \u7684\u6750\u6599\u79cd\u7c7b\u4e3a $c_u$ \uff0c\u90a3\u4e48\u5728\u5f53\u524d\u70b9 $u$ \uff0c\u9700\u8981\u679a\u4e3e\u6240\u6709\u4e0e $c_u$ \u4e0d\u540c\u7684\u989c\u8272\u8ba1\u7b97\u8d21\u732e\uff0c\u679a\u4e3e\u5b8c\u989c\u8272\u540e\uff0c\u53ef\u4ee5\u7528 $map$ \u542f\u53d1\u5f0f\u5408\u5e76\u7edf\u8ba1\u7b54\u6848\uff0c\u9664\u4e86\u679a\u4e3e\u989c\u8272\u4e4b\u5916\u7684\u6240\u6709\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u95ee\u9898\u90fd\u4e0d\u662f\u5f88\u5927\uff0c\u74f6\u9888\u5728\u4e8e\u679a\u4e3e\u989c\u8272\uff0c\u8003\u8651\u4f18\u5316\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u8981\u5408\u5e76\u5b50\u6811\u4fe1\u606f\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c~~\u4e0d\u96be~~\u53d1\u73b0\u53ea\u6709\u5728\u5408\u5e76\u5230\u53f6\u5b50\u8282\u70b9\u7684\u65f6\u5019\u624d\u4f1a\u8981\u7528 $dp$ \u4fee\u6b63\u8be5\u79cd\u6750\u6599\u7684\u8d21\u732e\uff0c\u8003\u573a\u4e0a\u60f3\u5230\u8fd9\u91cc\u5f00\u4e86\u4e00\u4e0b\u6570\u7ec4\uff0c\u7531\u4e8e\u5e76\u6ca1\u6709\u4ed4\u7ec6\u8ba1\u7b97\u6240\u4ee5\u5f00\u7684\u5f88\u5927\uff0c~~\u7136\u540e\u5c31\u5f00\u4e86\u4e24\u4e2aG\u7684\u6570\u7ec4~~\uff0c\u4e8b\u5b9e\u4e0a std \u6700\u5f00\u59cb\u516c\u5f00\u65f6\u7684\u7248\u672c\u4e5f MLE \u4e86\u3002\n\n\u5f53\u7136\u628a\u6570\u7ec4\u5f00\u5c0f\u4e00\u70b9\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\uff0c\u4e0d\u8fc7\u8c8c\u4f3c\u9700\u8981\u7cbe\u6253\u7ec6\u7b97\u4e00\u4e0b\uff0c\u800c\u4e14\u8d5b\u65f6\u7531\u4e8e\u6211\u5f00\u70b8\u7684\u592a\u591a\u4e86\u6240\u4ee5\u6ca1\u6709\u60f3\u4f18\u5316\uff0c\u56e0\u6b64\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a\u7a7a\u95f4\u66f4\u52a0\u5b89\u5168\u7684\u505a\u6cd5\u3002\n\n\u7531\u4e8e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8fdb\u884c $dp$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6b63\u786e\uff0c\u6240\u4ee5\u8fd9\u4e00\u70b9\u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u4e3a\u6bcf\u79cd\u6750\u6599\u7684\u6570\u91cf\u52a0\u8d77\u6765\u662f $n$ \uff0c\u8003\u8651\u5bf9\u4e8e\u6bcf\u79cd\u6750\u6599\u5355\u72ec\u8ba1\u7b97\u8d21\u732e\uff0c\u5efa\u51fa\u865a\u6811\uff0c\u5728\u6bcf\u4e2a\u4e0e\u8be5\u6750\u6599\u79cd\u7c7b\u4e0d\u540c\u7684\u5706\u70b9\u5904\u76f4\u63a5  $dp$ \uff0c\u5bf9\u4e8e\u865a\u6811\u4e0a\u4e00\u6761\u8fb9\u5b9e\u9645\u4e0a\u5bf9\u5e94\u539f\u6811\u4e0a\u7684\u4e00\u6761\u94fe\uff0c\u8fd9\u4e00\u6761\u94fe\u4e0a\u6bcf\u4e2a\u5706\u70b9\u7684\u8d21\u732e\u90fd\u662f\u8be5\u865a\u6811\u7684\u5b50\u6811\u4e2d\u7684\u8fd9\u79cd\u6750\u6599\u7684\u4e2a\u6570\uff0c\u76f4\u63a5\u4e58\u4e0a\u53bb\u5c31\u884c\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+10;\nconst int p=998244353;\n#define rint register int\n#define ll long long\n#define rll register long long\ntemplate<typename T> void read(T &x){\n\tx=0;rint f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){x=x*10+ch-'0';ch=getchar();}\n\tx*=f;\n}\nvector<int> g[N];\nstruct Edge{\n\tint to,nxt;\n}e[N<<1];\nint h[N],idx;\nvoid Ins(rint a,rint b){\n\te[++idx].to=b;e[idx].nxt=h[a];h[a]=idx;\n}\nint n,m,k,fang,c[N];\nmap<int,int> mp;\nint low[N],dfn[N],stk[N],tp,Time;\nvoid tarjan(rint u,rint fa){\n\tdfn[u]=low[u]=++Time;\n\tstk[++tp]=u;\n\tfor(rint v:g[u]){\n\t\tif(v==fa)continue;\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v,u);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\tif(low[v]>=dfn[u]){\n\t\t\t\t++fang;\n\t\t\t\twhile(1){\n\t\t\t\t\trint x=stk[tp--];\n\t\t\t\t\tIns(fang,x);Ins(x,fang);\n\t\t\t\t\tif(x==v)break;\n\t\t\t\t}\n\t\t\t\tIns(fang,u);Ins(u,fang);\n\t\t\t}\n\t\t}else low[u]=min(low[u],dfn[v]);\n\t}\n}\nint dp[30];\nll res;\nint top[N],siz[N],fa[N],son[N],d[N],dis[N];\nvoid dfs1(rint u){\n\tdfn[u]=++Time;siz[u]=1;dis[u]+=u<=n;\n\tfor(rint i=h[u];i;i=e[i].nxt){\n\t\trint v=e[i].to;\n\t\tif(v==fa[u])continue;\n\t\td[v]=d[u]+1;\n\t\tfa[v]=u;dis[v]=dis[u];\n\t\tdfs1(v);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\n\t}\n}\nvoid dfs2(rint u,rint t){\n\ttop[u]=t;\n\tif(son[u])dfs2(son[u],t);\n\tfor(rint i=h[u];i;i=e[i].nxt){\n\t\trint v=e[i].to;\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n\th[u]=0;\n}\nint lca(rint x,rint y){\n\twhile(top[x]^top[y]){\n\t\tif(d[top[x]]<d[top[y]])y=fa[top[y]];\n\t\telse x=fa[top[x]];\n\t}\n\treturn d[x]>d[y]?y:x;\n}\nint colcnt,col;\nbool cmp(rint a,rint b){\n\treturn dfn[a]<dfn[b];\n}\nvoid insert(rint x){\n\tif(!tp){\n\t\tstk[++tp]=x;\n\t\treturn ;\n\t}\n\trint lc=lca(stk[tp],x);\n\twhile(tp>1&&d[stk[tp-1]]>=d[lc])\n\t\tIns(stk[tp-1],stk[tp]),tp--;\n\tif(stk[tp]!=lc)\n\t\tIns(lc,stk[tp]),stk[tp]=lc;\n\tstk[++tp]=x;\n}\nvoid dfs3(rint u){\n\tsiz[u]=0;\n\tfor(rint i=h[u];i;i=e[i].nxt){\n\t\trint v=e[i].to;\n\t\tdfs3(v);\n\t\tsiz[u]+=siz[v];\n\t\tres+=1ll*siz[v]*(dis[v]-dis[u]-(v<=n))%p;\n\t}\n\tif(c[u]==col)siz[u]++;\n\telse if(u<=n){\n\t\tdp[0]=1;\n\t\tfor(rint i=1;i<=k;i++)\n\t\t\tdp[i]=0;\n\t\tfor(rint i=h[u];i;i=e[i].nxt){\n\t\t\trint v=e[i].to;\n\t\t\tfor(rint j=k;j;j--)\n\t\t\t\tdp[j]=(dp[j]+1ll*dp[j-1]*siz[v])%p;\n\t\t}\n\t\tfor(rint i=1;i<=k;i++)\n\t\t\tres+=dp[i];\n\t}\n\th[u]=0;\n}\nvoid solve(){\n\ttp=idx=0;\n\tsort(g[col].begin(),g[col].end(),cmp);\n\tif(g[col][0]!=1)stk[++tp]=1;\n\tfor(rint x:g[col])\n\t\tinsert(x);\n\twhile(tp>1)\n\t\tIns(stk[tp-1],stk[tp]),tp--;\n\tdfs3(1);\n}\nint main(){\n\tread(n);read(m);read(k);\n\tfor(rint i=1;i<=n;i++){\n\t\tread(c[i]);\n\t\tif(!mp[c[i]])mp[c[i]]=++colcnt;\n\t\tc[i]=mp[c[i]];\n\t}\n\twhile(m--){\n\t\trint a,b;\n\t\tread(a);read(b);\n\t\tg[a].push_back(b);g[b].push_back(a);\n\t}\n\tfang=n;\n\ttarjan(1,0);\n\tTime=0;\n\tfor(rint i=1;i<=n;i++)g[i].clear();\n\tfor(rint i=1;i<=n;i++)g[c[i]].push_back(i);\n\tdfs1(1);\n\tdfs2(1,1);\n\tfor(col=1;col<=colcnt;col++)\n\t\tsolve();\n\tprintf(\"%lld\\n\",res%p);\n\treturn 0;\n}\n\n\n```",
        "postTime": 1615032006,
        "uid": 305262,
        "name": "Su_Zipei",
        "ccfLevel": 9,
        "title": "P7422 \u9898\u89e3"
    },
    {
        "content": "## Dsu on tree  \n\n\u9898\u610f\u5927\u81f4\u662f\u5148\u5efa\u51fa**\u5706\u65b9\u6811**\u3002  \n\u6c42\u5706\u70b9\u7684\u5b50\u6811\u4e0b\u6709\u591a\u5c11\u4e2a\u6765\u81ea\u4e0d\u540c\u5b50\u6811\u7684\u548c\u5b83\u989c\u8272\u4e0d\u4e00\u6837\u7684\u989c\u8272\u76f8\u540c\u7684\u70b9\u7684\u96c6\u5408\u6570\u3002  \n$k \\leq 20 $ \u53ef\u4ee5\u76f4\u63a5 $dp$\uff0c\u5355\u6b21\u590d\u6742\u5ea6 $O(k)$\u3002  \n\u9700\u8981**\u5b50\u6811\u4fe1\u606f\u7684\u5408\u5e76**\uff0c\u8003\u8651\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u51fa\u9898\u4eba\u5df2\u7ecf\u8bf4\u8fc7\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n+nk)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n \\log n+nk)$\u3002  \n\u9700\u8981**\u5206\u989c\u8272\u5904\u7406**\uff0c\u8003\u8651\u865a\u6811\uff0c$\\red{S}u\\_Zipei$ \u8bb2\u8fc7\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n+nk)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002  \n\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 $Dsu \\; on \\; tree$ \u89e3\u51b3\u3002  \n\u5bf9\u4e8e\u8f7b\u513f\u5b50\u4e4b\u524d\u7684\u8bb0\u5f55\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u6e05\u9664\u3002  \n\u540c\u6837\u4e0e\u7ebf\u6bb5\u6811\u5408\u5e76\u76f8\u540c\u7684\u662f\uff0c\u6211\u4eec\u5728\u7ee7\u627f\u91cd\u513f\u5b50\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u77e5\u9053\u548c\u5b83\u989c\u8272\u4e0d\u4e00\u6837\u7684\u70b9\u7684\u4e2a\u6570\u5373\u53ef\uff0c\u7136\u540e\u52a0\u5165\u7b54\u6848\u3002  \n\u5728\u66b4\u626b\u8f7b\u513f\u5b50\u52a0\u8fdbdp\u6570\u7ec4\u65f6\uff0c\u9700\u8981\u5224\u65ad\u3002  \n  \n> \u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u5706\u70b9\uff0c\u8be5\u989c\u8272\u662f\u5426\u4e0e\u5f53\u524d\u989c\u8272\u4e0d\u540c  \n> \u4e4b\u524d\u662f\u5426\u51fa\u73b0\u8fc7\u8be5\u8282\u70b9  \n> \u4e4b\u524d\u662f\u5426\u8fdb\u884c\u8fc7\u521d\u59cb\u5316  \n\n\u8fd9\u6837\u770b\u6765\u65f6\u95f4\u590d\u6742\u5ea6\u8c8c\u4f3c\u662f $O(kn \\log n)$ \u7684\uff0c\u5176\u5b9e\u662f\u4e5f\u662f $O(n \\log n+nk)$ \u7684\u3002  \n\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u4e24\u4e2a\u513f\u5b50\u4e2d\u76f8\u540c\u989c\u8272\u96c6\u5408\u5408\u5e76\u65f6\uff0c\u624d\u53ef\u80fd\u505a $dp$\u3002  \n\u8003\u8651\u5728\u8111\u4e2d\u5bf9\u76f8\u540c\u989c\u8272\u8282\u70b9\u5efa\u865a\u6811\uff0c\u53d1\u73b0\u6240\u6709\u70b9\u7684 $lca$ \u90fd\u5728\u865a\u6811\u4e0a\uff0c\u53ea\u6709\u90a3\u4e9b $lca$ \u624d\u53ef\u80fd\u505a$dp$\u3002  \n\u6211\u4eec\u53c8\u77e5\u9053\u865a\u6811\u7684\u8282\u70b9\u4e2a\u6570\u662f $O(n)$ \u7684\uff0c\u6240\u4ee5$dp$\u7684\u590d\u6742\u5ea6\u4e3a $O(nk)$\u3002  \n\u5e38\u6570\u8f83\u5c0f\uff0c\u4f46\u7ec6\u8282\u8f83\u591a\uff0c\u8003\u573a\u4e0a\u4e0d\u63a8\u8350\uff0c\u63a8\u8350\u7528\u865a\u6811\u3002  \n\u5728$2022\u5e747\u670829\u65e5$\u662f\u6700\u4f18\u89e3\uff0c[\u4ee3\u7801](https://www.luogu.com.cn/record/81600947)\u3002\n",
        "postTime": 1659065204,
        "uid": 233121,
        "name": "LYinMX",
        "ccfLevel": 0,
        "title": "P7422\u9898\u89e3"
    },
    {
        "content": "### Solution\n\n\u8003\u8651\u4ee5\u9996\u90fd $1$ \u4e3a\u6839\u5efa\u7acb\u4e00\u9897\u5e7f\u4e49\u5706\u65b9\u6811\uff0c\u90a3\u4e48\u4e0d\u96be\u53d1\u73b0\u7b2c\u4e00\u4e2a\u6761\u4ef6 $\\lceil$ \u57ce\u5e02 $A$ \u5728\u57ce\u5e02 $B$ \u5230\u9996\u90fd\u7684\u5fc5\u7ecf\u4e4b\u8def\u4e0a $\\rfloor$ \u5f53\u4e14\u4ec5\u5f53**\u5728\u5e7f\u4e49\u5706\u65b9\u6811\u4e0a $A$ \u5bf9\u5e94\u7684\u8282\u70b9\u662f $B$ \u5bf9\u5e94\u7684\u8282\u70b9\u7684\u7956\u5148**\u3002\u800c\u7b2c\u4e8c\u4e2a\u6761\u4ef6 $\\lceil$  $B_i$ \u4e0e $B_j$ \u5173\u4e8e $A$ \u4e92\u4e0d\u5f71\u54cd $\\rfloor$ \u7b49\u4ef7\u4e8e**\u5e7f\u4e49\u5706\u65b9\u6811\u4e2d $B_1,B_2,\\cdots B_k$ \u5728 $A$ \u7684\u4e0d\u540c\u513f\u5b50\u7684\u5b50\u6811\u5185**\u3002 \n\n\u5c06\u6bcf\u79cd\u6750\u6599\u770b\u505a\u4e00\u79cd\u989c\u8272\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6c42\u51fa\u6bcf\u79cd\u989c\u8272\u5728\u5b83\u7684\u5b50\u6811\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e0d\u96be\u60f3\u5230\u7528**\u7ebf\u6bb5\u6811\u5408\u5e76**\u6765\u7ef4\u62a4\u3002\u5177\u4f53\u5730\uff0c\u5c06\u989c\u8272\u79bb\u6563\u5316\u540e\u5f00\u4e00\u9897\u4ee5\u989c\u8272\u7f16\u53f7\u4e3a\u4e0b\u6807\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u79cd\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u3002\n\n\u4e0b\u9762\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u7b54\u6848\uff0c\u5047\u8bbe\u5f53\u524d\u8282\u70b9\u662f $u$ \uff0c\u73b0\u5728\u9700\u8981\u628a $v$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5230 $u$ \u4e0a\u3002\u7531\u4e8e $K$ \u5f88\u5c0f\uff0c\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u548c $K$ \u6709\u5173\u7684 dp \uff0c\u5373 $f_c[i]$ **\u8868\u793a\u5728 $u$ \u7684\u4e0d\u540c\u513f\u5b50\u7684\u5b50\u6811\u5185\u4e00\u5171\u9009\u62e9 $i$ \u4e2a\u989c\u8272\u5747\u4e3a $c$ \u7684\u70b9\u7684\u65b9\u6848\u6570**\uff0c\u8f6c\u79fb\u5f88\u7b80\u5355\uff0c\u7c7b\u4f3c$0/1$\u80cc\u5305\u4ece\u5927\u5230\u5c0f\u679a\u4e3e$i$\uff0c\u5219 $f_c[i]=f_c[i-1]\\times cnt_{v,c}$ \u5176\u4e2d  $cnt_{v,c}$ \u8868\u793a $c$ \u8fd9\u79cd\u989c\u8272\u5728 $v$ \u7684\u5b50\u6811\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u7ef4\u62a4 dp \u5373\u53ef\uff0c\u6ce8\u610f\u5f53\u5408\u5e76\u5230\u989c\u8272\u4e3a $col_u$ \u7684\u70b9\u662f\u4e0d\u9700\u8981\u66f4\u65b0 dp \u503c\uff0c\u56e0\u4e3a\u8981\u6c42 $A$ \u7684\u989c\u8272\u548c $B$ \u4e0d\u76f8\u540c\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u8ba1\u7b97 $f_c[2]$ \u7684\u65f6\u5019\u662f\u9700\u8981\u7528\u5230 $f_c[1]$ \u7684\u503c\u7684\uff0c\u800c\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u904d\u5386\u6574\u9897\u7ebf\u6bb5\u6811\u9884\u5904\u7406\u51fa\u6240\u6709\u7684 $f_c[1]$ \uff0c\u56e0\u4e3a\u8fd9\u6837\u5c31\u4e0d\u80fd\u4fdd\u8bc1\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u590d\u6742\u5ea6\u4e86\u3002\u89c2\u5bdf\u53ef\u5f97\uff0c\u9700\u8981\u66f4\u65b0 $f_c[2]$ \u65f6\u4e00\u5b9a\u662f\u4e24\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u53f6\u5b50\u7684\u65f6\u5019\uff0c\u5c06 $f_c[1]$ \u7684\u8f6c\u79fb\u548c\u5176\u4ed6 $f_c[i](i\\geq 2)$\u7684\u8f6c\u79fb\u5206\u5f00\u3002\u8003\u8651\u6253\u4e00\u4e2a tag \u8868\u793a**\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\u4e4b\u524d\u662f\u5426\u88ab\u5408\u5e76\u8fc7**\uff0c\u5728\u7b2c\u4e00\u6b21\u88ab\u5408\u5e76\u5230\u65f6\u4ee4 $f_c[0]=1,f_c[1]=cnt_{u,c}+cnt_{v,c},f_c[2]=cnt_{u,c}*cnt_{v,c}$ \uff08\u6ce8\u610f\u8fd9\u91cc\u7684 $f_c[1]$ \u5e76\u6ca1\u6709\u5b9e\u9645\u542b\u4e49\uff0c\u53ea\u662f\u4e3a\u4e86\u540e\u9762\u4fbf\u4e8e\u8ba1\u7b97\uff09\uff0c\u7136\u540e\u540e\u9762\u518d\u5408\u5e76\u5230\u8fd9\u4e2a\u70b9\u65f6\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u7684 dp \u8f6c\u79fb\u5373\u53ef\u3002\u5728\u6bcf\u6b21\u5c06 $v$ \u5408\u5e76\u5230 $u$ \u4e4b\u524d\u5c06 $v$ \u4e2d\u6240\u6709\u53f6\u5b50\u8282\u70b9\u6807\u8bb0\u4e3a\u672a\u5408\u5e76\u8fc7\u5373\u53ef\uff08\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7 lazy tag \u5b9e\u73b0\uff09\u3002 \u5bf9\u4e8e $f_c[1]$ \uff0c\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3 $f_c[1]$ \u5177\u4f53\u662f\u591a\u5c11\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u5f97\u6240\u6709 $f_*[1]$ \u7684\u548c\uff0c\u8fd9\u4e2a\u663e\u7136\u7b49\u4e8e\u7ebf\u6bb5\u6811\u4e2d\u6240\u6709\u8282\u70b9 $cnt$ \u4e4b\u548c\u3002\n\n\u6700\u540e\u5728\u5408\u5e76\u5230\u5706\u65b9\u6811\u4e2d\u7684\u5706\u70b9\u65f6\u5c06 $f$ \u6570\u7ec4\u7d2f\u52a0\u8fdb\u7b54\u6848\u5373\u53ef\u3002\u7531\u4e8e\u4e00\u5f00\u59cb\u6240\u6709\u7ebf\u6bb5\u6811\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u603b\u548c\u662f $\\mathcal O(n)$\uff0c\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\u65f6\u603b\u7ed3\u70b9\u6570\u5c31\u4f1a\u51cf $1$ \uff0c\u6240\u4ee5\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u65f6\u5408\u5e76\u5230\u53f6\u5b50\u7684\u603b\u6b21\u6570\u4e5f\u662f $\\mathcal O(n)$\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n\\log n + nK)$\u3002\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#define DEBUG cerr << \"Passing Line \" << __LINE__<< \" in Function [\" << __FUNCTION__ << \"].\\n\";\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntemplate<class T> inline bool checkMax(T &a,const T &b) {return a < b ? a = b,1 : 0;}\ntemplate<typename T, typename...Args> inline void checkMax(T &a,const Args...arg) {checkMax(a,max(arg...));}\ntemplate<class T> inline bool checkMin(T &a,const T &b) {return a > b ? a = b,1 : 0;}\ntemplate<typename T, typename...Args> inline void checkMin(T &a,const Args...arg) {checkMin(a,min(arg...));}\n\nconst int INF = 0x3f3f3f3f;\nconst ll llINF = 1e18;\nconst int MAXN = 5e5 + 5;\nconst int MAXK = 21;\nconst int MOD = 998244353;\n\nnamespace FastIO{\n    const int SIZE = 1 << 21;\n    char ch;\n    char in[SIZE],*inS = in,*inT = in + SIZE;\n    char out[SIZE],*outS = out,*outT = out + SIZE;\n\n    #define flush() fwrite(out,1,outS - out,stdout), outS = out\n    #define getchar() (inS == inT && (inT = (inS = in) + fread(in,1,SIZE,stdin),inS == inT) ? EOF : *inS++)\n    void putchar(char c) {*outS++ = c; if(outS == outT) flush();}\n\n    struct Flusher {~Flusher() {flush();}} flusher;\n\n    template<typename T> inline void read(T &x){\n        static int f; x = 0; f = 1; ch = getchar();\n        while(!isdigit(ch)) {if(ch == '-') f = -1; ch = getchar();}\n        while(isdigit(ch)) {x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar();} x *= f;\n    }\n\n    inline void read(char* s){\n        static int len; len = 0; ch = getchar();\n        while(ch == '\\n' || ch == ' ' || ch == '\\0') ch = getchar();\n        while(ch != '\\n' && ch != ' ' && ch != EOF) s[len++] = ch, ch = getchar(); s[len] = '\\0';\n    }    \n\n    template<typename T> inline void write(T x){\n        if(!x) putchar('0');\n        if(x < 0) {x = -x; putchar('-');}\n        static int sta[20]; int tot = 0;\n        while(x) {sta[tot++] = x % 10; x /= 10;}\n        while(tot) putchar(sta[--tot] + 48);\n    }\n\n    inline void write(char c) {putchar(c);}\n    template<typename T> inline void writeln(T c) {write(c); putchar('\\n');}\n\n    template<typename T,typename... Args> inline void read(T &t, Args &...args) {read(t); read(args...);}\n}\n\nusing FastIO::read;\nusing FastIO::write;\nusing FastIO::writeln;\n\nvoid addmod(int &x,int y) {x += y; if(x >= MOD) x -= MOD;}\nvoid submod(int &x,int y) {x -= y; if(x < 0) x += MOD;}\nint add(int x,int y) {x += y; if(x >= MOD) x -= MOD; return x;}\nint sub(int x,int y) {x -= y; if(x < 0) x += MOD; return x;}\n\nint n,m,K,ans,cnt,len,sz;\nint dfn[MAXN],st[MAXN],low[MAXN],col[MAXN],a[MAXN],dp[MAXN][MAXK],tmp[MAXN];\nvector<int> G[MAXN];\n\nvoid add_edge(int u,int v){\n\tG[u].push_back(v);\n}\n\nstruct SegmentTree{\n    static constexpr int MAXM = MAXN * 40;\n    int tot;\n    int ls[MAXM],rs[MAXM],sum[MAXM],tag[MAXM];\n\n    void pushdown(int k){\n        if(tag[k] == 0) tag[ls[k]] = tag[rs[k]] = 0, tag[k] = 1;\n    }\n\n    void modify(int &k,int l,int r,int x){\n        if(!k) k = ++tot; sum[k] += 1; tag[k] = 1;\n        if(l == r) return; int mid = (l + r) >> 1;\n        if(x <= mid) modify(ls[k],l,mid,x);\n        else modify(rs[k],mid + 1,r,x);\n    }\n\n    int merge1(int x,int y,int l,int r,int c){\n        if(!x || !y) return x | y;\n        if(l == r){\n            if(l == c) {sum[x] += sum[y]; return x;}\n            if(tag[x] == 0){\n                dp[l][0] = 1; dp[l][1] = add(sum[x],sum[y]); \n                dp[l][2] = (ll)sum[x] * sum[y] % MOD; tag[x] = 1;\n            }else{\n                for(int i = K;i >= 1;i--)\n                    addmod(dp[l][i],(ll)dp[l][i - 1] * sum[y] % MOD);\n            }\n            tmp[++sz] = l; sum[x] += sum[y]; return x;\n        }\n        int mid = (l + r) >> 1; pushdown(x); pushdown(y);\n        ls[x] = merge1(ls[x],ls[y],l,mid,c);\n        rs[x] = merge1(rs[x],rs[y],mid + 1,r,c);\n        sum[x] = sum[ls[x]] + sum[rs[x]]; return x;\n    }\n    \n    int merge2(int x,int y,int l,int r){\n        if(!x || !y) return x | y;\n        if(l == r) {sum[x] += sum[y]; return x;}\n        int mid = (l + r) >> 1;\n        ls[x] = merge2(ls[x],ls[y],l,mid);\n        rs[x] = merge2(rs[x],rs[y],mid + 1,r);\n        sum[x] = sum[ls[x]] + sum[rs[x]]; return x;\n    }\n\n    int query(int k,int l,int r,int x){\n        if(!k) return 0;\n        if(l == r) return sum[k];\n        int mid = (l + r) >> 1;\n        if(x <= mid) return query(ls[k],l,mid,x);\n        else return query(rs[k],mid + 1,r,x);\n    }\n} sgt;\n\nstruct RST{\n    static constexpr int MAXM = MAXN << 1;\n    int tot; int rt[MAXM];\n    vector<int> G[MAXM];\n\n    void add_edge(int u,int v) {G[u].push_back(v); G[v].push_back(u);}\n\n    void dfs(int u,int fa){\n\t\tfor(int v : G[u]){\n            if(v == fa) continue;\n            dfs(v,u);\n        }\n        sz = 0;\n\t\tfor(int v : G[u]){\n            if(v == fa) continue;\n            if(u <= n) rt[u] = sgt.merge1(rt[u],rt[v],1,cnt,col[u]);\n            else rt[u] = sgt.merge2(rt[u],rt[v],1,cnt);\n        }\n\t\tsgt.tag[rt[u]] = 0; if(u > n) return;\n        sgt.modify(rt[u],1,cnt,col[u]);\n\t\taddmod(ans,sub(sgt.sum[rt[u]],sgt.query(rt[u],1,cnt,col[u])));\n\t\tsort(tmp + 1,tmp + 1 + sz); sz = unique(tmp + 1,tmp + 1 + sz) - tmp - 1;\n\t\tfor(int i = 1;i <= sz;i++){\n            for(int j = 2;j <= K;j++) addmod(ans,dp[tmp[i]][j]);\n            for(int j = 0;j <= K;j++) dp[tmp[i]][j] = 0;\n        }\n    }\n} rst;\n\nvoid tarjan(int u){\n    static int top = 0, idx = 0, x;\n    dfn[u] = low[u] = ++idx; st[++top] = u;\n    for(int v : G[u]){\n        if(!dfn[v]){\n            tarjan(v); checkMin(low[u],low[v]);\n            if(low[v] >= dfn[u]){\n                rst.tot += 1; rst.add_edge(rst.tot,u);\n                do {x = st[top--], rst.add_edge(rst.tot,x);} while(x != v);\n            }\n        }else checkMin(low[u],dfn[v]);\n    }\n}\n\nint main(){\n    read(n); read(m); read(K); rst.tot = n;\n    for(int i = 1;i <= n;i++) read(col[i]), a[++cnt] = col[i];\n    sort(a + 1,a + 1 + cnt); cnt = unique(a + 1,a + 1 + cnt) - a - 1;\n    for(int i = 1;i <= n;i++) col[i] = lower_bound(a + 1,a + 1 + cnt,col[i]) - a;\n    for(int i = 1,u,v;i <= m;i++){\n        read(u); read(v);\n        add_edge(u,v); add_edge(v,u);\n    }\n    tarjan(1); rst.dfs(1,0); printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1613524820,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u300cPMOI-2\u300d\u57ce\u5e02 \u9898\u89e3"
    }
]