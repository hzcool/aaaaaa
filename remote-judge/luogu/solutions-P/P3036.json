[
    {
        "content": "\u6bcf\u4e2a\u70b9\u62c6\u62104\u4e2a\n\n ![](https://cdn.luogu.com.cn/upload/pic/7360.png) \n\n\u84dd\u8272\u865a\u7ebf\u7684\u8fb9\u957f\u5ea6\u4e3a0\uff0c\u6a59\u8272\u5b9e\u7ebf\u7684\u8fb9\u957f\u5ea6\u4e3a1\n\n\u7136\u540e\u518d\u5728\u8282\u70b9\u4e2d\u8fde\u8fb9\uff0c\u50cf\u4e0b\u56fe\u90a3\u6837\n\n ![](https://cdn.luogu.com.cn/upload/pic/7362.png) \n\n\u6700\u540e\u5efa\u4e00\u4e2a\u8d85\u7ea7\u8d77\u70b9\u548c\u8d85\u7ea7\u7ec8\u70b9\uff0c\u8d85\u7ea7\u8d77\u70b9\u5411\u539f\u8d77\u70b9\u7684\u56db\u4e2a\u8282\u70b9\u8fde\u8fb9\uff08dis=0\uff09\uff0c\u539f\u7ec8\u70b9\u7684\u56db\u4e2a\u8282\u70b9\u5411\u8d85\u7ea7\u4e2d\u7535\u52a0\u8fb9\uff08dis=0\uff09\n\n\u8dd1\u6700\u77ed\u8def\n\n\u5404\u7ec4\u8282\u70b9\u4e4b\u95f4\u8fde\u53d8\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5206\u522b\u6309\u7167x\u548cy\u6392\u5e8f\u540e\u52a0\u53d8\n\n\n\u4ee5\u6837\u4f8b\u4e3a\u4f8b\uff1a\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/7368.png) \n\n",
        "postTime": 1503565909,
        "uid": 26664,
        "name": "\u51af\u6613\u83dc\u9e21",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3036 \u3010[USACO16DEC]Lasers and Mirrors\u6fc0\u5149\u548c\u955c\u5b50\u3011"
    },
    {
        "content": "# [\u9898\u89e3 P3036 \u3010[USACO16DEC]Lasers and Mirrors G\u3011](https://www.luogu.com.cn/problem/P3036)\n\n## \u79bb\u6563\u5316+\u6700\u77ed\u8def\n- \u5148\u5c06\u6570\u636e\u79bb\u6563\u5316,\u7136\u540e\u5c06**\u6bcf\u4e00\u884c**,**\u6bcf\u4e00\u5217**\u90fd\u770b\u505a**\u4e00\u4e2a\u70b9**,\u56e0\u4e3a\u5c04\u7ebf\u5728\u540c\u4e00\u884c\u6216\u540c\u4e00\u5217\u4e2d\u8f6c\u79fb\u662f\u4e0d\u4f1a\u4f7f\u7528\u955c\u5b50\u7684\n\n- \u8003\u8651\u955c\u5b50\u5b89\u653e\u7684\u4f4d\u7f6e,\u56e0\u4e3a\u6bcf\u5b89\u653e\u4e00\u4e2a\u955c\u5b50,\u4f1a\u5bfc\u81f4\u5c04\u7ebf\u5782\u76f4\u8f6c\u79fb,\u6240\u4ee5\u5982\u679c\u67d0\u4e2a\u70b9\u6709\u955c\u5b50,\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8be5\u70b9\u7684\u6a2a\u5750\u6807\u6240\u6620\u5c04\u7684\u70b9\u4e0e\u7eb5\u5750\u6807\u6240\u6620\u5c04\u7684\u70b9\u4e4b\u95f4**\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a1\u7684\u8fb9**,\u8868\u793a\u8be5\u884c(\u6216\u8be5\u5217)\u4e0a\u7684\u5c04\u7ebf\u53ef\u4ee5\u901a\u8fc7\u82b1\u8d39\u4e00\u4e2a\u955c\u5b50\u4f7f\u5f97\u5c04\u7ebf\u6539\u53d8\u65b9\u5411\u5230\u8be5\u5217(\u6216\u8be5\u884c)\u4e0a\n\n- \u6700\u540e\u518d\u5728\u6211\u4eec\u5efa\u7684\u56fe\u4e0a\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5c31\u884c\u4e86,\u5176\u4ed6\u7684\u7ec6\u8282\u4ee3\u7801\u6ce8\u91ca\u91cc\u5199\u5f97\u5f88\u8be6\u7ec6\u4e86 \n\n```\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#include<map>\nusing namespace std;\nconst int N=2e5+5,M=N<<1;\nint n,a,b,c,d;\nint x[N],y[N],x2[N],y2[N],cnt1,cnt2;\nint head[N],to[M],nxt[M],e[M],idx,dis[N],vis[N];\n\nvoid add(int x,int y,int z)//\u5efa\u8fb9 \n{\n\tto[++idx]=y;nxt[idx]=head[x];e[idx]=z;head[x]=idx;\n}\n\nint askx(int x)//\u67e5\u8be2\u539f\u6765\u7684\u6a2a\u5750\u6807\u7684\u503c\u6240\u5bf9\u5e94\u7684\u79bb\u6563\u540e\u7684\u503c \n{\n\treturn lower_bound(x2+1,x2+cnt1+1,x)-x2;\n}\nint asky(int y)//\u67e5\u8be2\u539f\u6765\u7684\u7eb5\u5750\u6807\u7684\u503c\u6240\u5bf9\u5e94\u7684\u79bb\u6563\u540e\u7684\u503c \n{\n\treturn lower_bound(y2+1,y2+cnt2+1,y)-y2;\n}\n\nvoid spfa()\n{\n\tqueue<int>q;\n\tmemset(dis,0x3f,sizeof dis);\n\tq.push(askx(a));q.push(asky(b)+cnt1);//\u6700\u521d\u7684\u8d77\u70b9\u4ece\u884c\u5c04\u51fa\u53bb\u548c\u4ece\u5217\u5c04\u51fa\u53bb\u90fd\u8981\u8003\u8651 \n\tdis[askx(a)]=dis[asky(b)+cnt1]=0;\n\tvis[askx(a)]=vis[asky(b)+cnt1]=1;\n\twhile(q.size())\n\t{\n\t\tint x=q.front();q.pop();vis[x]=0;\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=to[i],z=e[i];\n\t\t\tif(dis[y]>dis[x]+z)\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+z;\n\t\t\t\tif(!vis[y]) q.push(y),vis[y]=1;\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d%d%d%d\",&n,&a,&b,&c,&d);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d%d\",&x[i],&y[i]);\n\tx[n+1]=a;y[n+1]=b;//\u522b\u5fd8\u4e86\u628a\u8d77\u70b9\u548c\u7ec8\u70b9\u52a0\u8fdb\u6765 \n\tx[n+2]=c;y[n+2]=d;\n\tn+=2;\n\tmemcpy(x2,x,sizeof x);//x2\u548cy2\u662f\u4e34\u65f6\u6570\u7ec4\u7528\u4e8e\u79bb\u6563\u5316 \n\tmemcpy(y2,y,sizeof y);\n\tsort(x2+1,x2+1+n);\n\tsort(y2+1,y2+1+n);\n\tcnt1=unique(x2+1,x2+1+n)-x2-1;\n\tcnt2=unique(y2+1,y2+1+n)-y2-1;\n\t\n\tfor(int i=1;i<=n;i++)//\u9632\u6b62\u6a2a\u7eb5\u5750\u6807\u79bb\u6563\u503c\u7f16\u53f7\u51b2\u7a81,\u7ed9\u7eb5\u5750\u6807\u7684\u79bb\u6563\u503c\u52a0\u4e0acnt1 \n\t{\n\t\tadd(askx(x[i]),asky(y[i])+cnt1,1);\n\t\tadd(asky(y[i])+cnt1,askx(x[i]),1);\n\t}\n\tspfa();\n\tprintf(\"%d\",min(dis[askx(c)],dis[asky(d)+cnt1]));//\u8f93\u51fa\u7b54\u6848,\u662f\u4ece\u884c\u8f6c\u79fb\u8fc7\u6765\u66f4\u4f18\u8fd8\u662f\u4ece\u5217\u8f6c\u79fb\u8fc7\u6765\u66f4\u4f18 \t\n}\n```",
        "postTime": 1600744345,
        "uid": 224525,
        "name": "\u82cf\u7396\u516e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3036 \u3010[USACO16DEC]Lasers and Mirrors G\u3011"
    },
    {
        "content": "[$blog$](https://www.cnblogs.com/henry-1202/)\n\n\u62c6\u70b9\u9898\u89e3\u7684\u601d\u8def\u4e5f\u597d\u5999\u554a\u3002\n\n\u6211\u7684\u505a\u6cd5\u662f\u641c\u7d22\u3002\u633a\u597d\u60f3\u7684\uff0c\u5c31\u662f\u4e0d\u597d\u5199...\n\n\u4ed4\u7ec6\u7814\u7a76\u4e00\u4e0b\u9898\u76ee\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u51e0\u4e2a\u6027\u8d28\uff1a\u6700\u4f18\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u70b9\u80af\u5b9a\u53ea\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u6bcf\u6761\u8fb9\uff08\u6307\u7f51\u683c\uff09\u4e5f\u4ec5\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\u3002\n\n\u6240\u4ee5\u8fd9\u6837\u5b50\u5199\u4e2abfs\u7684\u8bdd\u662f$O(n)$\u7684\u3002\n\n\u5b9e\u73b0\u65b9\u5f0f\u6709\u5f88\u591a\u79cd...\uff0c\u7ef4\u62a43\u4e2avis\u6570\u7ec4\uff0c\u8868\u793a\u8fd9\u4e00\u884c/\u5217\u6709\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u70b9\u6709\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u3002\n\n\u56e0\u4e3a\u5750\u6807\u6709\u70b9\u5927\uff0c\u7136\u540e\u53ef\u4ee5\u53d1\u73b0\u7684\u662f\u53ea\u8981\u662f\u76f8\u540c\u884c\u7684\u5c31\u80fd\u8d70\u5230\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u79bb\u6563\u4e00\u6ce2\u3002\n\n\u7136\u540e\u5efa\u4e24\u4e2a\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u4ece\u6a2a\u5750\u6807\u5411\u7eb5\u5750\u6807\u8fde\u8fb9\uff08\u53e6\u5916\u4e00\u4e2a\u56fe\u53cd\u7740\uff09\uff0c\u8fb9\u6743\u5747\u4e3a1\u3002\n\n\u7136\u540e\u4ece\u8d77\u70b9\u5f00\u59cbbfs\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u62d3\u5c55\u6ca1\u6709\u8d70\u8fc7\u7684\u70b9\uff08\u8fd9\u4e2a\u70b9\u7684\u6a2a/\u7eb5\u5750\u6807\u4e4b\u4e00\u4e5f\u5fc5\u987b\u662f\u6ca1\u8d70\u8fc7\u7684\u3002\uff09\n\n\u5206\u7c7b\u8ba8\u8bba\u8f6c\u79fb\u5373\u53ef\u3002\u7ec6\u8282\u597d\u591a...\u53cd\u6b63\u6211\u662f\u91cd\u6784\u4e863,4\u6b21...\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define inf 0x3f3f3f3f\n#define il inline\n\nnamespace io {\n\n#define in(a) a = read()\n#define out(a) write(a)\n#define outn(a) out(a), putchar('\\n')\n\n#define I_int ll\ninline I_int read() {\n    I_int x = 0, f = 1;\n    char c = getchar();\n    while (c < '0' || c > '9') {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9') {\n        x = x * 10 + c - '0';\n        c = getchar();\n    }\n    return x * f;\n}\nchar F[200];\ninline void write(I_int x) {\n    if (x == 0) return (void) (putchar('0'));\n    I_int tmp = x > 0 ? x : -x;\n    if (x < 0) putchar('-');\n    int cnt = 0;\n    while (tmp > 0) {\n        F[cnt++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (cnt > 0) putchar(F[--cnt]);\n}\n#undef I_int\n\n}\nusing namespace io;\n\nusing namespace std;\n\n#define N 100010\n\nint n, s1, t1, s2, t2;\nint vis[N][3], d[N], c[N];\nstruct task {\n    int x, y;\n    int id;\n}a[N]; \nstruct Queue {\n    int x, y, dis;\n};\n\n#define pi pair<int,int>\n#define mp make_pair\nqueue<Queue>q;\nint head[N], Head[N], cnt;\nstruct edge {\n    int to, nxt, id;\n}e[N<<1], g[N<<1];\n\nvoid ins(int u, int v, int id) {\n    e[++cnt] = (edge) {v, head[u], id};\n    g[cnt] = (edge) {u, Head[v], id};\n    head[u] = cnt; Head[v] = cnt;\n}\n\nvoid bfs() { \n    q.push((Queue){a[n-1].x, a[n-1].y, 0});\n    memset(vis, 0, sizeof(vis));\n    while(!q.empty()) {\n        Queue u = q.front(); q.pop();\n        int dis = u.dis;\n        if(u.x == a[n].x && u.y == a[n].y) {\n        \toutn(dis-1); return;\n        }\n        if(!vis[u.x][0]) {\n        \tfor(int i = head[u.x]; i; i = e[i].nxt) {\n        \t\tif(!vis[e[i].id][2]) {\n        \t\t\tq.push({u.x, e[i].to, dis+1});\n        \t\t\tvis[e[i].id][2] = 1;\n                }\n            }\n            vis[u.x][0] = 1;\n        }\n        if(!vis[u.y][1]) {\n            for(int i = Head[u.y]; i; i = g[i].nxt) {\n                if(!vis[g[i].id][2]) {\n                    q.push({g[i].to, u.y, dis+1});\n                    vis[g[i].id][2] = 1;\n                }\n            }\n            vis[u.y][1] = 1;\n        }\n    }\n    puts(\"-1\");\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\nfreopen(\"3.in\", \"r\", stdin);\n#endif\n    in(n);\n    in(a[n+1].x), in(a[n+1].y), in(a[n+2].x), in(a[n+2].y);\n    a[n+1].id = n+1; a[n+2].id = n+2;\n    for(int i = 1; i <= n; ++i) \n        in(a[i].x), in(a[i].y), a[i].id = i;\n    n+=2; \n    for(int i = 1; i <= n; ++i) c[i] = a[i].x;\n    sort(c+1,c+n+1); for(int i = 1; i <= n; ++i) a[i].x = lower_bound(c+1,c+n+1,a[i].x)-c;\n    for(int i = 1; i <= n; ++i) c[i] = a[i].y;\n    sort(c+1,c+n+1); for(int i = 1; i <= n; ++i) a[i].y = lower_bound(c+1,c+n+1,a[i].y)-c;\n    for(int i = 1; i <= n; ++i) {\n        ins(a[i].x, a[i].y, i);\n    }\n    bfs();\n}\n``",
        "postTime": 1554390046,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3036 \u3010[USACO16DEC]Lasers and Mirrors\u6fc0\u5149\u548c\u955c\u5b50\u3011"
    },
    {
        "content": "###  STL + BFS \u505a\u6cd5\n\n\u5148\u770b\u4e00\u4e2a\u7b80\u5355\u6837\u4f8b\uff1a\n```\n2 0 0 3 4\n0 3\n3 3\n```\n\u4e0d\u96be\u53d1\u73b0\uff0c\u6b64\u6837\u4f8b\u7684\u7ed3\u679c\u4e3a $2$ \u3002\u6fc0\u5149\u4ece\u8d77\u70b9 $(0,0)$ \u51fa\u53d1\uff0c\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u53d1\u6563\uff0c\u5411\u4e0a\u7684\u5149\u7ebf\u7ecf\u8fc7\u955c\u5b50 $1$ \u7684\u53cd\u5c04\uff0c\u4ea7\u751f\u5411\u53f3\u5230\u8fbe\u955c\u5b50 $2$ \u7684\u53cd\u5c04\uff0c\u6700\u7ec8\u4ea7\u751f\u5411\u4e0a\u7684\u5149\u7ebf\u7a7f\u8fc7\u4e2d\u70b9\uff08\u5982\u4e0b\u56fe\u6240\u793a\uff09\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/8buw8s50.png)\n\u4e0e\u62c6\u70b9\u6784\u56fe\u7684\u505a\u6cd5\u4e0d\u540c\uff0c\u6211\u5c06\u5149\u7ebf\u62bd\u8c61\u4e3a\u70b9\uff0c\u955c\u5b50\u5219\u4e3a\u8f6c\u6362\u5149\u7ebf\u65b9\u5411\u7684\u7ed3\u70b9\uff0c\u5e76\u82b1\u8d39 $1$ \u7684\u8d39\u7528\u3002\n\n\u800c\u5c06\u5149\u7ebf\u62bd\u8c61\u4e3a\u70b9\u7684\u4e00\u4e2a\u597d\u5904\u662f\u4e0d\u9700\u8981\u4f7f\u7528\u6700\u77ed\u8def\u6c42\u89e3\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6761\u5149\u7ebf\u8981\u4e48\u4f7f\u7528 $1$ \u7684\u8d39\u7528\u6539\u53d8\u65b9\u5411\uff0c\u8981\u4e48\u51fa\u961f\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u961f\u5217\u7684\u5355\u8c03\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528 queue \uff0c\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u8fd9\u79cd\u601d\u8def\u6700\u5173\u952e\u7684\u4e00\u70b9\u5c31\u662f\u5982\u4f55\u5b58\u8fb9\uff08\u5373\u8f6c\u6362\u5149\u7ebf\u65b9\u5411\uff09\uff0c\u53ef\u4ee5\u7528\u79bb\u6563\u5316\u8fdb\u884c\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\uff08~~\u5077\u61d2~~\uff09\uff0c\u53ef\u4ee5\u7528 map \u5957 set \u7684\u795e\u5947\u5199\u6cd5\uff08\u7528\u8fed\u4ee3\u5668\uff0c\u8fd9\u91cc\u4e0d\u7ec6\u8bb2\uff09\u3002\u53e6\u5916\uff0c\u5728\u8fdb\u884c BFS \u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\uff0c\u9700\u8981\u5c06\u4f7f\u7528\u8fc7\u7684\u955c\u5b50\u5220\u9664\u3002\n\n\u7ec6\u8282\u89c1\u4ee3\u7801\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, xl, yl, xb, yb;\nint a, b;\nint dst[100005];\n \nmap<int, set<pair<int, int> > > xz, yz;\n \nstruct www{\n    int s, l, b;//for b, 1 is |, 0 is -\n    /*bool operator<(const www& x) const{\n        return x.s < s;\n    }*/\n    //\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\u5199\u4e86\u91cd\u8f7d\u8fd0\u7b97\u7b26\n    //\u56e0\u4e3a\u4e00\u5f00\u59cb\u6ca1\u53d1\u73b0\u5355\u8c03\u6027\n};\n \nqueue<www> q;\n \nvoid bfs(){\n    q.push((www){0, xl, 1});\n    q.push((www){0, yl, 0});\n    //\u5165\u961f\n    \n    while(!q.empty()){\n        www u = q.front(); q.pop();\n        int s = u.s, l = u.l, b = u.b;\n        \n        if((l == xb && b == 1) || (l == yb && b == 0)){\n            printf(\"%d\", s);\n            return;\n        }\n        //\u68c0\u67e5\u662f\u5426\u80fd\u7167\u5230\u7ec8\u70b9\n        \n        if(b == 1){\n            auto it = xz[l].begin();\n            while (it != xz[l].end()){\n                if(dst[(*it).first] == 0){\n                    q.push((www){s + 1, (*it).second, 0});\n                    dst[(*it).first] = 1;\n                }\n                auto del = it; it++;\n                xz[l].erase(del);\n                //dst\u662f\u7528\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u955c\u5b50\uff0c\u5728\u4e4b\u540e\u904d\u5386\u5230\u65f6\u5220\u9664\n            }\n        }\n        else{\n            auto it = yz[l].begin();\n            while (it != yz[l].end()){\n                if(dst[(*it).first] == 0){\n                    q.push((www){s + 1, (*it).second, 1});\n                    dst[(*it).first] = 1;\n                }\n                auto del = it;\n                it++;\n                yz[l].erase(del);\n            }\n        }\n        //\u62d3\u5c55\n    }\n}\n \nint main()\n{\n    scanf(\"%d%d%d%d%d\", &n, &xl, &yl, &xb, &yb);\n    for(int i = 1; i <= n; i++){\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        xz[x].insert(pair<int, int>{i, y});// ---\n        yz[y].insert(pair<int, int>{i, x});//  |\n    }\n    bfs();\n    return 0;\n}\n```\n",
        "postTime": 1647611327,
        "uid": 143200,
        "name": "wzyzzyzy",
        "ccfLevel": 5,
        "title": "P3036 [USACO16DEC]Lasers and Mirrors G"
    },
    {
        "content": "\u9996\u5148\u89c2\u5bdf\u8981\u7d20\uff1a\n\n- \u955c\u5b50\u7684\u6700\u5c0f\u53ef\u80fd\u6570\u91cf\n\n- $1\\leq x,y \\leq 10^9$\n\n\u524d\u8005\u5f88\u5bb9\u6613\u60f3\u5230 01bfs \u7684\u601d\u8def\uff0c\u800c\u540e\u8005\u5219\u63d0\u9192\u6211\u4eec\u8981\u79bb\u6563\u5316\u3002\n\n\u540c\u65f6\u4e0d\u96be\u53d1\u73b0\uff0c01bfs \u7684\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u6c42\u5f53\u524d\u70b9\u5411\u56db\u5468\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u5982\u679c\u6bcf\u4e00\u4e2a\u70b9\u90fd\u5355\u72ec\u6c42\uff0c\u90a3\u590d\u6742\u5ea6\u5c31\u70b8\u6389\u4e86\u3002\n\n\u8fd9\u65f6\u53ef\u4ee5\u9884\u5904\u7406\u3002\u7528 vector \u8bb0\u5f55\u6bcf\u4e00\u5217\uff08\u6216\u5217\uff09\u7684\u70b9\uff0c\u6392\u5e8f\u540e\u53ef\u4ee5\u7528 $\\operatorname{lowerbound}$ \u51fd\u6570\u8fdb\u884c $O(\\log n)$ \u67e5\u627e\u3002\n\n\u8fd9\u79cd\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u56fa\u7136\u4e0d\u662f\u5f88\u4f18\u79c0\uff0c\u4f46\u5173\u952e\u5728\u4e8e\u6bcf\u4e00\u6b65\u90fd\u5f88\u663e\u7136\uff0c\u601d\u7ef4\u96be\u5ea6\u8f83\u4f4e\u3002",
        "postTime": 1664112815,
        "uid": 368124,
        "name": "victoryang",
        "ccfLevel": 5,
        "title": "P3036 [USACO16DEC]Lasers and Mirrors G \u9898\u89e3"
    },
    {
        "content": "\u601d\u8def\uff1a\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u53ef\u4ee5\u653e\u955c\u5b50\u7684\u6805\u680f\u62bd\u8c61\u6210\u4e00\u4e2a\u70b9\uff0c\u56e0\u4e3a\u5149\u7ebf\u53ea\u80fd\u6cbf\u6c34\u5e73\u6216\u7ad6\u76f4\u65b9\u5411\u4f20\u64ad\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u6a2a\u7eb5\u5750\u6807\u8fdb\u884c\u6392\u5e8f\uff0c\u8ba9\u6240\u6709\u6a2a/\u7eb5\u5750\u6807\u76f8\u7b49\u7684\u70b9\u5728\u4e00\u5757\uff0c\u5bf9\u6bcf\u4e00\u5757\u4e2d\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u5f20\u56fe\u3002\n\n\u8fd9\u662f\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u627e\u51fa\u4e00\u6761\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u4e2d\u7ecf\u8fc7\u7684\u70b9\u6570\u6700\u5c11\u7684\u8def\u5f84\uff0c\u7b97\u51fa\u5b83\u7ecf\u8fc7\u7684\u70b9\u6570\u3002\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6570\u636e\u4e2d\u51fa\u73b0\u5f88\u591a\u70b9\u6392\u6210\u4e00\u884c\uff0c\u90a3\u6700\u591a\u53ef\u80fd\u4f1a\u8ba9\u8fb9\u6570\u8fbe\u5230 (n+1)/2 \uff0c\u8fd9\u6837\u8fde\u56fe\u90fd\u8fd8\u6ca1\u5efa\u5b8c\u5c31\u8d85\u65f6\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u4e00\u5757\u4e2d\u95f4\u7684\u70b9\u90fd\u53ea\u548c\u5b83\u524d\u4e00\u4e2a\u70b9\u8fde\u63a5\uff0c\u8fd9\u6837\u8fb9\u6570\u5c31\u4f1a\u5c11\u5f88\u591a\u3002\n\n\u4f46\u5982\u679c\u8fd9\u6837\u53c8\u4f1a\u6709\u65b0\u7684\u95ee\u9898\uff0c\u5728\u540c\u4e00\u884c\u7684\u70b9\u672c\u6765\u4e0d\u7ecf\u8fc7\u522b\u7684\u70b9\u5c31\u53ef\u4ee5\u5230\uff0c\u4f46\u73b0\u5728\u5c31\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u8df3\uff0c\u4f1a\u589e\u52a0\u5f88\u591a\u591a\u51fa\u6765\u7684\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u7ed9\u6bcf\u6761\u8def\u5f84\u8bbe\u4e00\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u8fd9\u6761\u8fb9\u662f\u6a2a\u5411\u8fd8\u662f\u7eb5\u5411\u7684\u3002\u7ed9\u6bcf\u4e00\u4e2a\u8fdb\u961f\u8282\u70b9\u4e5f\u589e\u52a0\u4e00\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u5b83\u662f\u901a\u8fc7\u54ea\u79cd\u8fb9\u8fdb\u6765\u7684\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u901a\u8fc7\u548c\u5b83\u8fc7\u6765\u65f6\u540c\u4e00\u65b9\u5411\u7684\u8fb9\u5230\u8fbe\u4e0b\u4e00\u4e2a\u70b9\uff0c\u5c31\u4e0d\u9700\u8981\u7ed9\u7ecf\u8fc7\u7684\u8282\u70b9\u6570\u52a0\u4e00\uff0c\u5426\u5219\u5c31\u52a0\u3002\n\n\u8fd8\u6709\uff0c\u56e0\u4e3a\u5230\u8fbe\u7ec8\u70b9\u662f\u4e0d\u8981\u518d\u52a0\u70b9\u7684\uff0c\u6240\u4ee5\u6211\u7ed9\u6bcf\u4e2a\u53ef\u4ee5\u76f4\u8fbe\u7ec8\u70b9\u7684\u7684\u70b9\u548c\u7ec8\u70b9\u90fd\u8fde\u4e86\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u5224\u4e86\u4e00\u4e0b\uff0c\u8fd9\u6837\u5728\u7ecf\u8fc7\u7ec8\u70b9\u65f6\u5c31\u4e0d\u4f1a\u518d\u591a\u52a0\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Edge\n{\n\tint nxt,to,val;\n}edge[200010];\nint n,head[100005],cnt;\nstruct node\n{\n\tint id,x,y;\n}a[100005];\nstruct qq{int sum,now,val;};\nbool cmp1(node a,node b){return a.x<b.x;}\nbool cmp2(node a,node b){return a.y<b.y;}\nvoid add(int u,int v,int w)\n{\n\tedge[++cnt].nxt=head[u];\n\tedge[cnt].to=v;\n\tedge[cnt].val=w;\n\thead[u]=cnt;\n\treturn;\n}\nint vis[100005];\nint main()\n{\n\tmemset(vis,0x3f3f3f3f,sizeof(vis));\n\tcin>>n;\n\tn+=2;\n\tfor(int i=1;i<=n;++i)scanf(\"%d%d\",&a[i].x,&a[i].y),a[i].id=i;\n\tsort(a+1,a+n+1,cmp1);\n\tint now=-1,sum;\n\tfor(int i=1;i<=n;++i)if(a[i].id==2){sum=i;break;}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(a[i].x!=now){now=a[i].x;}\n\t\telse\n\t\t{\n\t\t\tadd(a[i].id,a[i-1].id,0);\n\t\t\tadd(a[i-1].id,a[i].id,0);\n\t\t}\n\t\tif(a[sum].x==a[i].x)\n\t\t{\n\t\t\tadd(a[i].id,a[sum].id,1);\n\t\t\tadd(a[sum].id,a[i].id,1);\n\t\t}\n\t}\n\tsort(a+1,a+n+1,cmp2);\n\tnow=-1;\n\tfor(int i=1;i<=n;++i)if(a[i].id==2){sum=i;break;}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(a[i].y!=now){now=a[i].y;}\n\t\telse\n\t\t{\n\t\t\tadd(a[i].id,a[i-1].id,1);\n\t\t\tadd(a[i-1].id,a[i].id,1);\n\t\t}\n\t\tif(a[sum].y==a[i].y)\n\t\t{\n\t\t\tadd(a[i].id,a[sum].id,1);\n\t\t\tadd(a[sum].id,a[i].id,1);\n\t\t}\n\t}\n\tqueue<qq>q;\n\tqq w;\n\tint ans=2147483647;\n\tw.now=1;\n\tw.sum=0;\n\tw.val=-1;\n\tq.push(w);\n\twhile(!q.empty())\n\t{\n\t\tqq x=q.front();\n\t\tq.pop();\n\t\tif(x.now==2){ans=min(ans,x.sum);continue;}\n\t\tif(vis[x.now]<=x.sum)continue;\n\t\tvis[x.now]=x.sum;\n\t\tfor(int i=head[x.now];i;i=edge[i].nxt)\n\t\t{\n\t\t\tint to=edge[i].to;\n\t\t\tw.now=to;\n\t\t\tw.sum=x.sum;\n\t\t\tif(to!=2&&edge[i].val!=x.val)w.sum++;\n\t\t\tw.val=edge[i].val;\n\t\t\tif(vis[to]>w.sum)q.push(w);\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1618982700,
        "uid": 307090,
        "name": "__Killer_Bunny__",
        "ccfLevel": 0,
        "title": "P3036"
    },
    {
        "content": "# BFS + \u4f18\u5148\u961f\u5217\u4f18\u5316\n\n\u9884\u5904\u7406\u8f93\u5165\u6570\u636e\uff0c\u50a8\u5b58 **\u8d77\u70b9 \u8f6c\u6298\u70b9 \u7ec8\u70b9** \u7684\u5750\u6807\uff0c\u901a\u8fc7 *id* \u8f6c\u5f55\u5230\u8282\u70b9\uff08**Node**\uff09\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u50a8\u5b58\u4fe1\u606f\u6709\u4e0b\u9762\u51e0\u79cd\n\n| \u6807\u8bc6\u7b26 | \u542b\u4e49 |\n| :----------: | :----------: |\n| x | \u6a2a\u5750\u6807 |\n| y | \u7eb5\u5750\u6807 |\n| *up | \u4e0a\u65b9\u7684\u8282\u70b9 |\n| *down | \u4e0b\u65b9\u7684\u8282\u70b9 |\n| *left | \u5de6\u65b9\u7684\u8282\u70b9 |\n| *right | \u53f3\u65b9\u7684\u8282\u70b9 |\n\n- \u8fd9\u91cc\u7684\u4e0a\u4e0b\u5de6\u53f3\u8282\u70b9\u7528\u6307\u9488\u8bb0\u5f55\uff0c\u65b9\u4fbf\u64cd\u4f5c\n\n---\n\nBFS \u8fc7\u7a0b\u4e2d\u4ee5\u8282\u70b9\u7684\u4fe1\u606f\u4e3a\u57fa\u51c6\u8fdb\u884c\u641c\u7d22\uff0c\u641c\u7d22\u8fc7\u7a0b\u4e2d\u4fdd\u5b58**\u4e09\u4e2a\u4fe1\u606f**\n\n- \u5f53\u524d\u8282\u70b9\n- \u5f53\u524d\u6fc0\u5149\u65b9\u5411\n- \u5f53\u524d\u8f6c\u6298\u6b21\u6570\n\n**\u4f18\u5148\u961f\u5217\u4f18\u5316**\uff1a\u4f18\u5148\u6269\u5c55**\u8f6c\u6298\u6b21\u6570**\u6700\u5c11\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u641c\u7d22\u7684\u6709\u5411\u6027\uff0c\u6700\u5feb\u5230\u8fbe\u7ec8\u70b9\u3002\uff08\u4e5f\u9632\u6b62\u7206\u7a7a\u95f4 OTZ\uff09\n\n---\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nconst int N = 400005;\n\nint n;\nint bx, by, ex, ey;\nstruct Pos\n{\n    int x, y, id;\n} pos[N];\nint pos_c;\n// \u6392\u5e8f\u51fd\u6570\nbool cmp1(Pos a, Pos b)\n{\n    if (a.x == b.x)\n        return a.y < b.y;\n    return a.x < b.x;\n};\nbool cmp2(Pos a, Pos b)\n{\n    if (a.y == b.y)\n        return a.x < b.x;\n    return a.y < b.y;\n};\nbool cmp3(Pos a, Pos b)\n{\n    return a.id < b.id;\n};\n// \u8282\u70b9\nstruct Node\n{\n    int x, y;\n    Node *up = NULL;\n    Node *down = NULL;\n    Node *left = NULL;\n    Node *right = NULL;\n} node[N];\n// BFS \u50a8\u5b58\u4fe1\u606f\u7528\u7684\u7ed3\u6784\u4f53\nstruct Search\n{\n    Node *node;\n    int dire, step;\n};\nbool operator<(Search a, Search b)\n{\n    return a.step > b.step;\n}\nint vis[N];\nint bfs()\n{\n    \n    priority_queue<Search> q;\n    // \u8d77\u70b9\u5206\u522b\u5411\u56db\u4e2a\u65b9\u5411\u641c\u7d22\n    // 1 \u4e0a\n    // 2 \u53f3\n    // 3 \u4e0b\n    // 4 \u5de6\n    q.push({&node[1], 1, 0});\n    q.push({&node[1], 2, 0});\n    q.push({&node[1], 3, 0});\n    q.push({&node[1], 4, 0});\n    while (!q.empty())\n    {\n        Search now = q.top();\n        q.pop();\n        // \u641c\u7d22\u5230\u7ec8\u70b9\u4e86\n        if (now.node->x == ex && now.node->y == ey)\n        {\n            // \u76f4\u63a5\u8f93\u51fa\u9000\u51fa\n            cout << now.step << endl;\n            exit(0);\n        }\n        // \u5982\u679c\u4e0a\u65b9\u6709\u8282\u70b9\n        if (now.node->up != NULL)\n        {\n            if (now.dire == 1)\n                q.push({now.node->up, 1, now.step});\n            if (now.dire == 2 || now.dire == 4)\n                q.push({now.node->up, 1, now.step + 1});\n        }\n        // \u5982\u679c\u53f3\u65b9\u6709\u8282\u70b9\n        if (now.node->right != NULL)\n        {\n            if (now.dire == 2)\n                q.push({now.node->right, 2, now.step});\n            if (now.dire == 1 || now.dire == 3)\n                q.push({now.node->right, 2, now.step + 1});\n        }\n        // \u5982\u679c\u4e0b\u65b9\u6709\u8282\u70b9\n        if (now.node->down != NULL)\n        {\n            if (now.dire == 3)\n                q.push({now.node->down, 3, now.step});\n            if (now.dire == 2 || now.dire == 4)\n                q.push({now.node->down, 3, now.step + 1});\n        }\n        // \u5982\u679c\u5de6\u65b9\u6709\u8282\u70b9\n        if (now.node->left != NULL)\n        {\n            if (now.dire == 4)\n                q.push({now.node->left, 4, now.step});\n            if (now.dire == 1 || now.dire == 3)\n                q.push({now.node->left, 4, now.step + 1});\n        }\n    }\n}\n\nint main()\n{\n    // \u8bfb\u5165\u52a0\u901f\uff0c\u61d2\u5f97\u5199 read \u4e86 OTZ\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin >> n >> bx >> by >> ex >> ey;\n    bx++, by++, ex++, ey++; // \u5c06 0 ~ n - 1 \u8f6c\u4e3a 1 ~ n\uff0c\u867d\u7136\u672c\u9898\u597d\u50cf\u7528\u4e0d\u5230\n    // \u8bb0\u5f55\u8d77\u70b9\u5750\u6807\n    pos[++pos_c] = {bx, by, pos_c};\n    node[pos_c].x = bx;\n    node[pos_c].y = by;\n    for (int i = 1, t1, t2; i <= n; ++i)\n    {\n        cin >> t1 >> t2;\n        t1++, t2++;\n        // \u8bb0\u5f55\u8f6c\u6298\u70b9\u5750\u6807\n        pos[++pos_c] = {t1, t2, pos_c};\n        node[pos_c].x = t1;\n        node[pos_c].y = t2;\n    }\n    // \u8bb0\u5f55\u7ec8\u70b9\u5750\u6807\n    pos[++pos_c] = {ex, ey, pos_c};\n    node[pos_c].x = ex;\n    node[pos_c].y = ey;\n    // \u8fde\u63a5\uff0c\u5206\u522b\u6309 x \u548c y \u5750\u6807\u6392\u5e8f\uff0c\u76f8\u90bb\u7684 pos \u53ea\u6709\u4e24\u79cd\u60c5\u51b5\n    // 1: \u5728\u540c\u4e00\u884c\uff08\u5217\uff09\n    // 2: \u4e0d\u5728\u540c\u4e00\u884c\u4e5f\u4e0d\u5728\u540c\u4e00\u5217\n    sort(pos + 1, pos + 1 + pos_c, cmp1);\n    for (int i = 1; i < pos_c; ++i)\n    {\n        if (pos[i].x == pos[i + 1].x)\n        {\n            node[pos[i].id].down = &node[pos[i + 1].id];\n            node[pos[i + 1].id].up = &node[pos[i].id];\n        }\n    }\n    sort(pos + 1, pos + 1 + pos_c, cmp2);\n    for (int i = 1; i < pos_c; ++i)\n    {\n        if (pos[i].y == pos[i + 1].y)\n        {\n            node[pos[i].id].right = &node[pos[i + 1].id];\n            node[pos[i + 1].id].left = &node[pos[i].id];\n        }\n    }\n    sort(pos + 1, pos + 1 + pos_c, cmp3);\n    // \u641c\u7d22\n    bfs();\n    // getchar();\n    return 0;\n}\n```\n",
        "postTime": 1592974118,
        "uid": 267730,
        "name": "\u00c2\u0393L\u03a3\u0418",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3036 \u3010[USACO16DEC]Lasers and Mirrors G\u3011"
    }
]