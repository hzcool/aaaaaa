[
    {
        "content": "\u5e73\u8861\u6811\uff0c\u9700\u652f\u6301\u4e94\u4e2a\u64cd\u4f5c\uff1a\n\n1\u3001    \u5c06\u67d0\u5143\u7d20\u7f6e\u9876\uff1a\u5c06\u5143\u7d20\u65cb\u5230\u6839\uff0c\u7136\u540e\u5c06\u5de6\u5b50\u6811\u5408\u5e76\u5230\u8be5\u5143\u7d20\u7684\u540e\u7ee7\n\n2\u3001    \u5c06\u67d0\u5143\u7d20\u7f6e\u5e95\uff1a\u5c06\u5143\u7d20\u65cb\u5230\u6839\uff0c\u7136\u540e\u5c06\u53f3\u5b50\u6811\u5408\u5e76\u5230\u8be5\u5143\u7d20\u7684\u524d\u9a71\n\n3\u3001    \u5c06\u67d0\u5143\u7d20\u63d0\u524d/\u6ede\u540e1\u4f4d\uff1a\u76f4\u63a5\u4e0e\u8be5\u5143\u7d20\u7684\u524d\u9a71/\u540e\u7ee7\u4ea4\u6362\u4f4d\u7f6e\u53ca\u4fe1\u606f\n\n4\u3001    \u8be2\u95ee\u6307\u5b9a\u5143\u7d20\u6392\u540d\uff1a\u5c06\u5143\u7d20\u65cb\u5230\u6839\uff0c\u8f93\u51fasize-1\n\n5\u3001    \u8be2\u95ee\u6307\u5b9a\u6392\u540d\u5143\u7d20\uff1a\u5728\u6811\u4e0afind\n\n----------\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define MAXN 80005\nusing namespace std;\n    int n,m,num,sz,root,s; \n    int pos[MAXN],size[MAXN],c[MAXN][2],fa[MAXN],v[MAXN];\n    char ch[20];\nint inline read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid update(int x)\n{\n    size[x]=size[c[x][0]]+size[c[x][1]]+1;\n    pos[v[c[x][0]]]=c[x][0],pos[v[c[x][1]]]=c[x][1];\n}\nvoid rotate(int &root,int x){\n    int y=fa[x],z=fa[y],p,q;\n    if(c[y][0]==x) p=0; else p=1;\n    q=p^1;\n    if(y==root) root=x;\n    else{\n        if(c[z][0]==y) c[z][0]=x;\n        else c[z][1]=x;\n    }\n    fa[x]=z;fa[y]=x;fa[c[x][q]]=y;\n    c[y][p]=c[x][q];c[x][q]=y;\n    update(y);update(x);\n}\nvoid splay(int &root,int x){\n    int y,z;\n    while(x!=root){\n        y=fa[x];z=fa[y];\n        if(y!=root){\n            if((c[z][0]==y) ^ (c[y][0]==x)) rotate(root,x);\n            else rotate(root,y);\n        }\n        rotate(root,x);\n    }\n    pos[v[x]]=x;\n}\nvoid insert(int x)\n{\n    v[++sz]=x;size[sz]=1;pos[x]=sz;c[sz][0]=c[sz][1]=0;\n    if (sz>1)\n    {\n        c[sz-1][1]=sz;fa[sz]=sz-1;\n        splay(root,sz);\n    }\n}\nint find(int x,int k)\n{\n    int y=c[x][0];\n    if (size[y]+1==k) return x;\n    else if (size[y]>=k) return find(y,k);\n    else return find(c[x][1],k-size[y]-1);\n}\nvoid top(int x)\n{\n    x=pos[x];\n    splay(root,x);\n    if (!c[x][0]) return;\n    if (!c[x][1]) c[x][1]=c[x][0],c[x][0]=0;\n    else\n    {\n        int y=find(root,size[c[x][0]]+2);\n        fa[c[root][0]]=y;\n        c[y][0]=c[root][0];\n        c[root][0]=0;\n        splay(root,y);\n    }\n}\nvoid bottom(int x)\n{\n    x=pos[x];\n    splay(root,x);\n    if (!c[x][1]) return;\n    if (!c[x][0]) c[x][0]=c[x][1],c[x][1]=0;\n    else\n    {\n        int y=find(root,size[c[x][0]]);\n        fa[c[root][1]]=y;\n        c[y][1]=c[root][1];\n        c[root][1]=0;\n        splay(root,y);\n    }\n} \nvoid ins(int f,int x)\n{\n    if (!f) return;\n    splay(root,pos[x]);\n    int y=find(root,f==1?size[c[pos[x]][0]]+2:size[c[pos[x]][0]]);\n    int x1=v[y],x2=pos[x];\n    swap(pos[x],pos[x1]);\n    swap(v[x2],v[y]);\n}\nvoid getans(int x)\n{\n    splay(root,x);\n    printf(\"%d\\n\",size[c[x][0]]);\n}\nvoid init()\n{\n    pos[0]=size[0]=c[0][0]=c[0][1]=fa[0]=v[0]=0;\n}\nint main()\n{\n//    freopen(\"test.txt\",\"r\",stdin);\n    n=read(),m=read();\n    root=1;\n    for (int i=1;i<=n;i++)\n    {\n        num=read();\n        insert(num);\n    }\n    while (m--)\n    {\n        scanf(\"%s\",ch);\n        switch(ch[0])\n        {\n            case 'T':top(read());break;\n            case 'B':bottom(read());break;\n            case 'I':ins(read(),read());break;\n            case 'A':getans(pos[read()]);break;\n            case 'Q':printf(\"%d\\n\",v[find(root,read())]);break;\n        }\n    }\n    return 0;\n}\n```\n-------------\n\u524d\u9762\u7684\u5927\u4f6c\u7684\u9898\u89e3\u7684\u4ee3\u7801\u6709\u4e9b\u9519\u8bef\uff0c\u6bd4\u5982\u8fd9\u4e2a\u6570\u636e\uff1a\n\n10 10\n9 5 10 8 6 2 1 4 7 3\n\nA 7\nB 7\nI 7 0\nA 2\nI 9 1\nT 4\nB 1\nT 2\nA 9\nT 10\n\u6b63\u786e\u7b54\u6848\u5e94\u4e3a\uff1a\n\n8\n5\n3",
        "postTime": 1487044482,
        "uid": 9433,
        "name": "FlierKing",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "# \u65e0\u65cbtreap\u505a\u6cd5\n\u65e0\u65cbtreap\u53ef\u4ee5\u7ef4\u62a4\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c.\u4f46\u662f\u4e0d\u652f\u6301\u901a\u8fc7\u7f16\u53f7\u6765\u627e\u8282\u70b9.\u4e8e\u662f\u5728\u65e0\u65cbtreap\u7684\u57fa\u7840\u4e0a,\u6211\u7ef4\u62a4\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2,\u8fd9\u6837\u5c31\u53ef\u4ee5\u6c42\u51fa\u4e00\u4e2a\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u7b2c\u51e0\u4e2a.\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9,\u6bcf\u6b21\u5c06\u5b83\u5411\u6811\u6839\u8df3,\u5982\u679c\u5b83\u662f\u53f3\u513f\u5b50,\u90a3\u4e48\u5c31\u5c06\u5b83\u7236\u4eb2\u7684\u5de6\u5b50\u6811\u7684\u503c\u4ee5\u53ca\u7236\u4eb2\u7684\u5927\u5c0f\u8ba1\u5165\u7ed3\u679c.\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u53ea\u6709\u5982\u4f55\u8bb0\u5f55\u7236\u4eb2\u4e86.\u663e\u7136\u4f1a\u6539\u53d8\u7236\u4eb2\u7684\u53ea\u6709$split$\u548c$merge$\u64cd\u4f5c,\u90a3\u4e48\u6211\u53ea\u9700\u8981\u5728\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e2d\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86.\u5728$split$\u7684\u65f6\u5019\u518d\u4f20\u4e24\u4e2a\u53c2\u6570\u8bb0\u5f55\u7236\u4eb2,$merge$\u5728\u4fee\u6539\u513f\u5b50\u7684\u65f6\u5019\u540c\u65f6\u5c06\u7236\u4eb2\u4e00\u8d77\u4fee\u6539.\n\n\u5176\u4ed6\u7684\u90fd\u662f\u65e0\u65cbtreap\u7684\u57fa\u672c\u64cd\u4f5c\u4e86.\n* $Top$: \u63d0\u53d6\u8be5\u8282\u70b9,\u653e\u5728\u6811\u7684\u6700\u524d\u9762\u5408\u5e76.\n* $Bottom$: \u63d0\u53d6\u8282\u70b9,\u653e\u5728\u6811\u7684\u6700\u540e\u9762\u5408\u5e76.\n* $Insert$: \u5c06\u5b83\u4e0e\u524d\u9a71/\u540e\u7ee7\u4ece\u6574\u68f5\u6811\u4e2d\u5206\u79bb\u51fa\u6765,\u4ea4\u6362\u987a\u5e8f\u5408\u5e76.\n* $Ask$: \u76f4\u63a5\u901a\u8fc7\u7f16\u53f7\u627e\u5230\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u7b2c\u51e0\u4e2a.\n* $Query$: \u5148\u627e\u5230\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u7b2c\u51e0\u4e2a,\u7136\u540esplit\u524dk\u4e2a,\u5728\u5206\u79bb\u51fa\u7684\u7b2c\u4e00\u9897\u5b50\u6811\u4e2d\u627e\u6700\u53f3\u8fb9\u7684\u8282\u70b9.\n\n\u4ee3\u7801\u51d1\u5408\u7740\u770b\u4e00\u4e0b\u5427.\n```cpp\n#include<bits/stdc++.h>\n#define debug out(root), cout << endl\nusing namespace std;\nconst int N=80000+5;\n\nint n, m, id[N], a[N], root, r1, r2, r3, r4, cnt = 0;\n//id\u8bb0\u5f55\u67d0\u4e00\u4e2a\u4e66\u7684\u7f16\u53f7\u6620\u5c04\u5230\u6811\u4e2d\u7684\u8282\u70b9\u7f16\u53f7\n\nstruct treap{\n    int ch[2], fa, size, rd, val;\n}t[N];\n\nint gi(){\n    int ans = 0, f = 1; char i = getchar();\n    while(i<'0' || i>'9'){ if(i == '-') f = -1; i = getchar(); }\n    while(i>='0' && i<='9') ans = ans*10+i-'0', i = getchar();\n    return ans * f;\n}\n\nint newnode(int val){\n    t[++cnt].val = val; t[cnt].rd = rand(), t[cnt].size = 1;\n    id[val] = cnt; return cnt;\n}\n\nvoid up(int x){ t[x].size = t[t[x].ch[0]].size+t[t[x].ch[1]].size+1; }\n\nvoid split(int x, int k, int &a, int &b, int faa = 0, int fab = 0){\n\t//\u4f20\u4e24\u4e2a\u7236\u4eb2\u8282\u70b9\u7684\u53c2\u6570\u662f\u4e3a\u4e86\u9632\u6b62\u8bb0\u5f55\u7236\u4eb2\u51fa\u95ee\u9898.\n    //\u56e0\u4e3a\u7236\u4eb2\u8bb0\u5f55\u513f\u5b50\u7684\u65f6\u5019\u662f\u901a\u8fc7\u53d6\u5730\u5740\u4f20\u53c2\u4fee\u6539\u7684\n    //\u800c\u4e24\u9897\u5b50\u6811\u8bb0\u5f55\u7684\u7236\u4eb2\u662f\u5206\u5f00\u7684\n    if(x == 0){ a = b = 0; return; }\n    if(k <= t[t[x].ch[0]].size) t[x].fa = fab, b = x, split(t[x].ch[0], k, a, t[x].ch[0], faa, x);\n    else t[x].fa = faa, a = x, split(t[x].ch[1], k-t[t[x].ch[0]].size-1, t[x].ch[1], b, x, fab); up(x);\n}\n\nint merge(int x, int y){\n    if(x == 0 || y == 0) return x+y;\n    //\u76f4\u63a5\u5728\u8bb0\u5f55\u513f\u5b50\u7684\u65f6\u5019\u540c\u65f6\u4fee\u6539\u7236\u4eb2\n    if(t[x].rd < t[y].rd){\n\t\tt[x].ch[1] = merge(t[x].ch[1], y);\n\t\tt[t[x].ch[1]].fa = x; up(x); return x;\n    }\n    else {\n\t\tt[y].ch[0] = merge(x, t[y].ch[0]);\n\t\tt[t[y].ch[0]].fa = y; up(y); return y;\n    }\n}\n\nvoid insert(int pos, int val){\n    split(root, pos, r1, r2);\n    root = merge(r1, merge(newnode(val), r2));\n}\n\nbool get(int x){ return t[t[x].fa].ch[1] == x; }\n\nint find(int cnt){//cnt\u662f\u8282\u70b9\u7f16\u53f7\n    int node = cnt, res = t[t[cnt].ch[0]].size+1;\n    while(node != root && cnt){\n\t\tif(get(cnt)) res += t[t[t[cnt].fa].ch[0]].size+1;\n\t\tcnt = t[cnt].fa;\n\t\t//\u8fd9\u91cc\u53ef\u4ee5\u753b\u56fe\u7406\u89e3\u4e00\u4e0b,\u56e0\u4e3a\u5982\u679c\u8be5\u8282\u70b9\u662f\u5de6\u513f\u5b50\u7684\u8bdd,\u5411\u4e0a\u8d70\u662f\u4e2d\u5e8f\u904d\u5386\u5728\u589e\u5927\u7684\n\t\t//\u5982\u679c\u662f\u53f3\u513f\u5b50\u5411\u4e0a\u8df3\u7684\u8bdd,\u7236\u4eb2\u7684\u5de6\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u90fd\u5c0f\u4e8e\u6211\u5728\u67e5\u7684\u8282\u70b9,\u6240\u4ee5\u8981\u8ba1\u5165\u7b54\u6848.\n    }\n    return res;\n}\n\nint main(){\n    char opt[10]; int x, y, k; n = gi(), m = gi(); srand(19260817);\n    for(int i=1;i<=n;i++) a[i] = gi(), insert(i-1, a[i]);\n    for(int i=1;i<=m;i++){\n\t\tscanf(\"%s\", opt); x = gi();\n\t\t\n\t\tif(opt[0] == 'T'){\n\t\t    k = find(id[x]);//\u901a\u8fc7\u8282\u70b9\u7f16\u53f7\u627e\u5230\u4e66\u672c\u7f16\u53f7\u4e3ax\u7684\u8282\u70b9\u662f\u7b2ck\u4e2a\n\t\t    split(root, k, r1, r3);\n\t\t    split(r1, k-1, r1, r2);\n\t\t    root = merge(r2, merge(r1, r3));\n\t\t}\n\t\t\n\t\tif(opt[0] == 'B'){\n\t\t    k = find(id[x]);\n\t\t    split(root, k, r1, r3, 0);\n\t\t    split(r1, k-1, r1, r2, 0);\n\t\t    root = merge(r1, merge(r3, r2));\n\t\t}\n\t\t\n\t\tif(opt[0] == 'I'){\n\t\t    y = gi(); k = find(id[x]);\n\t\t    if(y){\n\t\t\t\tif(y > 0){//\u4e0e\u524d\u9a71/\u540e\u7ee7\u4ea4\u6362\u540e\u63d2\u5165\n\t\t\t\t    split(root, k+1, r3, r4);\n\t\t\t\t    split(r3, k, r2, r3);\n\t\t\t\t    split(r2, k-1, r1, r2);\n\t\t\t\t    root = merge(r1, merge(r3, merge(r2, r4)));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t    split(root, k, r3, r4);\n\t\t\t\t    split(r3, k-1, r2, r3);\n\t\t\t\t    split(r2, k-2, r1, r2);\n\t\t\t\t    root = merge(r1, merge(r3, merge(r2, r4)));\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\tif(opt[0] == 'A'){\n\t\t    k = find(id[x]);\n\t\t    printf(\"%d\\n\", k-1);\n\t\t}\n\t\t\n\t\tif(opt[0] == 'Q'){\n\t\t    split(root, x, r1, r2);\n\t\t    int node = r1;\n\t\t    while(t[node].ch[1]) node = t[node].ch[1];\n\t\t    printf(\"%d\\n\", t[node].val);\n\t\t    root = merge(r1, r2);\n\t\t}\n    }\n    return 0;\n}\n```",
        "postTime": 1532313423,
        "uid": 45661,
        "name": "Brave_Cattle",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u663e\u7136\u5e73\u8861\u6811\uff0csplay\uff0ctreap\u4ec0\u4e48\u7684\u968f\u4fbf\u5207\n\n\u7136\u800c\u6211\u4e0d\u60f3\u6253\uff0c\u51b3\u5b9a\u6c34\u8fc7\u8fd9\u9053\u9898\n\n\u628a\u7a7a\u95f4\u5f003\u500d\uff0c\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5b83\u524d\u9762\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5f00\u4e2aid\u6570\u7ec4\u8bb0\u5f55\u4f4d\u7f6e\n\n\u627e\u4e00\u4e2a\u6570\u6392\u540d\u76f4\u63a5\u4e8c\u5206\u52a0\u6c42\u524d\u7f00\u548c\uff0clog^2\u7684\u641e\u4e00\u641e\n\n\u628a\u4e00\u4e2a\u6570\u653e\u5728\u9876/\u4f4e  \u76f4\u63a5\u4e22\u5728\u5f53\u524d\u9876/\u4f4e\u7684\u524d\u540e\u5c31\u53ef\u4ee5\u4e86~~\u4e0d\u7136\u5f003\u500d\u6570\u7ec4\u5e72\u561b~~\n\n\u5e38\u6570\u5c0f\u582a\u6bd4log\u7684\u5e73\u8861\u6811~~\u5c45\u7136\u8fd8\u5feb\u4e00\u4e9b~~\n\n\n```cpp\n# include <bits/stdc++.h>\n# define RG register\n# define IL inline\n# define Fill(a, b) memset(a, b, sizeof(a))\nusing namespace std;\ntypedef long long ll;\nconst int _(3e5 + 10), INF(2e9), PF(1e5);\n\nIL ll Read(){\n    char c = '%'; ll x = 0, z = 1;\n    for(; c > '9' || c < '0'; c = getchar()) if(c == '-') z = -1;\n    for(; c >= '0' && c <= '9'; c = getchar()) x = x * 10 + c - '0';\n    return x * z;\n}\n\nint n, m, t[_], id[_], a[_];\nchar opt[10];\n\nIL void Add(RG int x, RG int v){  for(; x <= PF * 3; x += x & -x) t[x] += v;  }\n\nIL int Query(RG int x){  RG int cnt = 0; for(; x; x -= x & -x) cnt += t[x]; return cnt;  }\n\nIL int Find(RG int x){\n    RG int l = 1, r = PF * 3;\n    while(l < r){\n        RG int mid = (l + r) >> 1;\n        if(Query(mid) >= x) r = mid;\n        else l = mid + 1;\n    }\n    return l;\n}\n\nint main(RG int argc, RG char *argv[]){\n    n = Read(); m = Read();\n    for(RG int i = 1; i <= n; ++i) a[PF + i] = Read(), Add(PF + i, 1), id[a[PF + i]] = PF + i;\n    while(m--){\n        scanf(\" %s\", opt); RG int x = Read(), y, p, q;\n        if(opt[0] == 'T'){\n            p = Find(1);\n            a[id[x]] = 0; Add(id[x], -1);\n            id[x] = p - 1;\n            a[id[x]] = x; Add(id[x], 1);\n        }\n        else if(opt[0] == 'B'){\n            p = Find(n);\n            a[id[x]] = 0; Add(id[x], -1);\n            id[x] = p + 1;\n            a[id[x]] = x; Add(id[x], 1);\n        }\n        else if(opt[0] == 'I'){\n            y = Read(); q = Query(id[x]);\n            p = Find(q + y); RG int t = a[p];\n            swap(a[p], a[id[x]]); swap(id[x], id[t]);\n        }\n        else if(opt[0] == 'A') printf(\"%d\\n\", Query(id[x]) - 1);\n        else printf(\"%d\\n\", a[Find(x)]);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1515055351,
        "uid": 47640,
        "name": "Cyhlnj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "~~\u6211\u7684\u505a\u6cd5\u597d\u50cf\u53c8\u662f\u6bd4\u8f83\u6e05\u5947~~\n\n\u8fd9\u663e\u7136\u662f\u4e2a\u6587\u827a\u5e73\u8861\u6811\u7684\u9898\n\n\u770b\u770b\u6bcf\u4e2a\u64cd\u4f5c\u6211\u4eec\u8981\u5e72\u4ec0\u4e48\n\n1\uff0e Top S\u2014\u2014\u8868\u793a\u628a\u7f16\u53f7\u4e3aS\u7684\u4e66\u653e\u5728\u6700\u4e0a\u9762\u3002\n\n\u5148\u627e\u5230\u4e66 $S$ \u7684\u4f4d\u7f6e $pos$\uff0c\u7ffb\u8f6c\u533a\u95f4 $[1,pos]$\uff0c\u518d\u7ffb\u8f6c\u533a\u95f4 $[2 ,pos]$\n\n2\uff0e Bottom S\u2014\u2014\u8868\u793a\u628a\u7f16\u53f7\u4e3aS\u7684\u4e66\u653e\u5728\u6700\u4e0b\u9762\u3002\n\n\u5148\u627e\u5230\u4e66 $S$ \u7684\u4f4d\u7f6e $pos$\uff0c\u7ffb\u8f6c\u533a\u95f4 $[pos ,n]$\uff0c\u518d\u7ffb\u8f6c\u533a\u95f4 $[pos + 1 ,n]$\n\n3\uff0e Insert S T\u2014\u2014T\u2208{-1\uff0c0\uff0c1}\uff0c\u82e5\u7f16\u53f7\u4e3aS\u7684\u4e66\u4e0a\u9762\u6709X\u672c\u4e66\uff0c\u5219\u8fd9\u6761\u547d\u4ee4\u8868\u793a\u628a\u8fd9\u672c\u4e66\u653e\u56de\u53bb\u540e\u5b83\u7684\u4e0a\u9762\u6709X+T\u672c\u4e66\uff1b\n\n\u5148\u627e\u5230\u4e66 $S$ \u7684\u4f4d\u7f6e $pos$\uff0c\u7ffb\u8f6c\u533a\u95f4 $[pos ,pos + T]$\n\n4\uff0e Ask S\u2014\u2014\u8be2\u95ee\u7f16\u53f7\u4e3aS\u7684\u4e66\u7684\u4e0a\u9762\u76ee\u524d\u6709\u591a\u5c11\u672c\u4e66\u3002\n\n\u8be2\u95ee $S$ \u7684 rank\uff08\u628a $S$ \u8f6c\u5230\u6839\uff0c\u95ee\u5de6\u5b50\u6811\u5927\u5c0f\uff09\n\n5\uff0e Query S\u2014\u2014\u8be2\u95ee\u4ece\u4e0a\u9762\u6570\u8d77\u7684\u7b2cS\u672c\u4e66\u7684\u7f16\u53f7\u3002\n\n\u8be2\u95ee\u7b2c $S$ \u4f4d\u7684 $key$\n\n\u7531\u4e8e\u6211\u7684splay\u9700\u8981\u63d2\u5165 INF \u548c -INF \u4ee5\u4fbf\u4e8e\u6c42PRE\u548cNXT\u7684\u65f6\u5019\u4e0d\u4f1aRE\uff0c\u6240\u4ee5\u67d0\u4e9b\u5730\u65b9\u9700\u8981 +1 -1\u7684\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<ctime>\n#include<cstdlib>\n#include<iostream>\n\n//#define debug\n\n#define rg register\n#define il inline\n#define MX (100000 + 4)\n#define INF (0x7f7f7f7f)\n\nvoid swap(int &x ,int &y){\n\tint t = x;\n\tx = y ,y = t;  \n}\nnamespace SPLAY{\n\t#define lch(x) ch[x][0]\n\t#define rch(x) ch[x][1]\n\tint root ,sz;\n\tint ch[MX][2] ,fa[MX] ,mark[MX] ,size[MX] ,key[MX] ,pos[MX];\n\tint get(int x){return x == ch[fa[x]][1];}\n\tvoid pushup(int x){\n\t\tif(!x)\treturn;\n\t\tsize[x] = 1;\n\t\tif(lch(x))\tsize[x] += size[lch(x)];\n\t\tif(rch(x))\tsize[x] += size[rch(x)];\n\t}\n\tvoid reverse(int x){\n\t\tif(!x)\treturn ; \n\t\tswap(lch(x) ,rch(x));\n\t\tmark[x] ^= 1;\n\t}\n\tvoid pushdown(int x){\n\t\tif(!x)\treturn;\n\t\tif(mark[x]){\n\t\t\tif(lch(x))\treverse(lch(x));\n\t\t\tif(rch(x))\treverse(rch(x));\n\t\t\tmark[x] = false;\n\t\t}\n\t}\n\tvoid rotate(int x){\n\t\tint f = fa[x] ,gf = fa[f] ,which = get(x) ,w = ch[x][!which];\n\t\tif(gf)\tch[gf][ch[gf][1] == f] = x;\n\t\tch[x][!which] = f ,ch[f][which] = w;\n\t\tif(w)\tfa[w] = f;\n\t\tfa[f] = x ,fa[x] = gf;\n\t\tpushup(f) ,pushup(x);\n\t}\n\tint stack[MX] ,dep;\n\tvoid splay(int x ,int goal = 0){\t//////\n\t\tint f = x;\n\t\tstack[++dep] = f;\n\t\twhile(f)\tstack[++dep] = f = fa[f];\n\t\twhile(dep)\tpushdown(stack[dep--]);\n\t\tfor( ; (f = fa[x]) != goal ; rotate(x)){\n\t\t\tif(fa[f] != goal)\trotate(get(x) == get(f) ? f : x);\n\t\t}if(!goal)\troot = x;\n\t}\n\tvoid insert(int x){\n\t\tint now = root;\n\t\twhile(rch(now))\tnow = rch(now);\n\t\tfa[++sz] = now; \n\t\tif(now)\tch[now][1] = sz;\n\t\t\n\t\tkey[sz] = x;\n\t\tsize[sz] = 1;\n\t\tmark[sz] = ch[sz][0] = ch[sz][1] = 0;\n\t\tpushup(now);\n\t\tsplay(sz);\n\t}\n\tint rank(int val){\n\t\tsplay(pos[val]);\n\t\treturn size[lch(pos[val])] + 1;\n\t}\n\tint Kth(int rank){\n\t\tint x = root;\n\t\twhile(true){\n\t\t\tpushdown(x);\n\t\t\tif(lch(x) && rank <= size[lch(x)])\tx = lch(x);\n\t\t\telse{\n\t\t\t\tint tmp = (lch(x) ? size[lch(x)] : 0) + 1;\n\t\t\t\tif(rank <= tmp)\treturn x;\n\t\t\t\trank -= tmp;\n\t\t\t\tx = rch(x);\n\t\t\t}\n\t\t}\n\t}\n\tvoid reverse(int l ,int r){\n\t\tsplay(l - 1); \n\t\tif(l >= r)\treturn;\n\t\tint PRE = Kth(l - 1) ,NXT = Kth(r + 1);\n\t\tsplay(PRE); \n\t\tsplay(NXT ,PRE);\n\t\treverse(ch[NXT][0]);\n\t}\n}using namespace SPLAY;\n\nint main(){\n\tint n ,m;\n\tscanf(\"%d%d\" ,&n ,&m);\n\tinsert(-INF);\n\tfor(rg int i = 1 ,tmp ; i <= n ; ++i){\n\t\tscanf(\"%d\" ,&tmp);\n\t\tpos[tmp] = i + 1;\n\t\tinsert(tmp);\n\t}\n\tinsert(INF);\n\t#ifdef debug\n\ttest();puts(\"\");\n\t#endif \n\tchar op[33];\n\tfor(rg int i = 1 ,s ,t ; i <= m ; ++i){\n\t\tscanf(\"%s%d\" ,op ,&s);\n\t\tswitch(op[0]){\n\t\t\tcase 'T':{\n\t\t\t\tint l = rank(s);\n\t\t\t\tif(l != 2){\n\t\t\t\t\treverse(2 ,l);\n\t\t\t\t\treverse(3 ,l);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'B':{\n\t\t\t\tint l = rank(s);\n\t\t\t\tif(l != n + 1){\n\t\t\t\t\treverse(l ,n + 1);\n\t\t\t\t\treverse(l ,n);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'I':{\n\t\t\t\tint delta ,P = rank(s);\n\t\t\t\tscanf(\"%d\" ,&delta);\n\t\t\t\tswitch(delta){\n\t\t\t\t\tcase 0:{break;}\n\t\t\t\t\tcase 1:{\n\t\t\t\t\t\treverse(P ,P + 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase -1:{\n\t\t\t\t\t\treverse(P - 1 ,P);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'A':{\n\t\t\t\tprintf(\"%d \\n\" ,rank(s) - 2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'Q':{\n\t\t\t\tprintf(\"%d \\n\" ,key[Kth(s + 1)]);\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t}return 0;\n}\n```",
        "postTime": 1571320606,
        "uid": 47863,
        "name": "Imakf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u4e0d\u5c1d\u8bd5\u4e00\u4e0b ~~\u53c8\u5feb\u53c8\u77ed~~ \u7684 **\u6743\u503c\u7ebf\u6bb5\u6811** \u5462\uff1f\n\n(\u611f\u89c9\u8fd9\u9898\u5c31\u662f $noip2017$ \u5217\u961f\u7684\u5f31\u5316\u7248\uff1f\n\n\u5f00\u4e00\u4e2a $id$ \u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u662f\u54ea\u4e2a\u7f16\u53f7\uff0c\u518d\u5f00\u4e00\u4e2a $po$ \u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u7f16\u53f7\u6240\u5728\u7684\u4f4d\u7f6e\u662f\u54ea\u3002\n\n\u6ce8\u610f\u56e0\u4e3a\u4e0b\u6807\u53ef\u80fd\u4e3a\u8d1f\u6570\uff0c $id$ \u6570\u7ec4\u7684\u4e0b\u6807\u8981\u52a0\u4e0a\u4e00\u4e2a\u504f\u79fb\u91cf\u3002\n\n\u7136\u540e\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u627e\u6392\u540d\u7b2c $k$ \u5927\u4ee5\u53ca\u524d\u9a71\u540e\u7ee7\u4ee5\u53ca\u4e00\u4e2a\u6570\u7684\u6392\u540d\u5c31\u884c\u4e86\u3002\n\n\u5e38\u6570\u5f88\u5c0f $(200ms)$,\u4ee3\u7801\u4e5f\u4e0d\u957f\uff08$50$\u884c\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define N 200005\n#define M N*20\n#define mid ((l+r)>>1)\nusing namespace std;\n\nchar pd[9];\nint n,m,cnt,rt,L,R;\nint id[N],po[N];\nint sum[M],ls[M],rs[M];\n\nvoid ins(int &p,int x,int d,int l=-N,int r=N){\n\tif(!p) p=++cnt;sum[p]+=d;if(l==r) return ;\n\tx<=mid ? ins(ls[p],x,d,l,mid) : ins(rs[p],x,d,mid+1,r);\n}\nint find(int p,int k,int l=-N,int r=N){\n\tif(l==r) return l;\n\treturn sum[ls[p]]>=k ? find(ls[p],k,l,mid) : find(rs[p],k-sum[ls[p]],mid+1,r);\n}\nint ask(int p,int x,int l=-N,int r=N){\n\tif(l==r) return sum[p];\n\treturn x<=mid ? ask(ls[p],x,l,mid) : ask(rs[p],x,mid+1,r)+sum[ls[p]];\n}\ninline void up(int x){\n\tint now=po[x];ins(rt,now,-1);\n\tpo[x]=--L;id[n+L]=x;ins(rt,L,1);\n}\ninline void down(int x){\n\tint now=po[x];ins(rt,now,-1);\n\tpo[x]=++R;id[n+R]=x;ins(rt,R,1);\n}\ninline void change(int x,int k){\n\tif(k==0) return ;\n\tint now=find(rt,ask(rt,po[x])+k);\n\tint y=id[n+now];id[n+po[x]]=y;po[y]=po[x];\n\tid[n+now]=x;po[x]=now;\n}\nsigned main(){\n\tscanf(\"%d%d\",&n,&m);L=1,R=n;\n\tfor(int x,i=1;i<=n;i++)\n\t\tins(rt,i,1),scanf(\"%d\",&x),id[i+n]=x,po[x]=i;\n\twhile(m--){\n\t\tscanf(\"%s\",pd);int x,k;scanf(\"%d\",&x);\n\t\tif(pd[0]=='T') up(x);\n\t\tif(pd[0]=='B') down(x);\n\t\tif(pd[0]=='I') scanf(\"%d\",&k),change(x,k);\n\t\tif(pd[0]=='A') printf(\"%d\\n\",ask(rt,po[x])-1);\n\t\tif(pd[0]=='Q') printf(\"%d\\n\",id[n+find(rt,x)]);\n\t}\n}\n```",
        "postTime": 1543282155,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[ZJOI2006]\u4e66\u67b6\u2014\u2014\u6743\u503c\u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e2d\u7684\u4e66\u67b6\u53ef\u4ee5\u7528splay\u6765\u7ef4\u62a4\u3002\n\nTop\u548cBottom\u5b9e\u8d28\u4e0a\u5c31\u662f\u628a\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u6570\u653e\u5230\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u3002\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u628a\u8981\u64cd\u4f5c\u7684\u8282\u70b9\u63d0\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u628a\u5de6\u5b50\u6811\u5408\u5e76\u5230\u53f3\u5b50\u6811\u4e0a\u6216\u628a\u53f3\u5b50\u6811\u5408\u5e76\u5230\u5de6\u5b50\u6811\u4e0a\u3002\n\nInsert\u64cd\u4f5c\u5c31\u662f\u628a\u8981\u64cd\u4f5c\u7684\u8282\u70b9\u548c\u524d\u9a71\u540e\u7ee7\u4ea4\u6362\u4f4d\u7f6e\uff0c\u7b49\u6548\u4e8e\u628a\u4e24\u4e2a\u70b9\u7684\u7279\u5f81\u503c\u5373\u7f16\u53f7\u8fdb\u884c\u4ea4\u6362\u3002\n\nAsk\u64cd\u4f5c\u8be2\u95ee\u5e8f\u5217\u4e2d\u5728\u6b64\u8282\u70b9\u524d\u9762\u7684\u6570\u6709\u591a\u5c11\u4e2a\uff0c\u63d0\u5230\u6839\u8282\u70b9\u8f93\u51fasize\u5c31\u53ef\u4ee5\u4e86\u3002\n\nQuery\u64cd\u4f5c\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u67e5\u8be2\u5e8f\u5217\u4e2d\u7b2cs\u4e2a\u6570\u7684\u7f16\u53f7\uff0c\u76f8\u5f53\u4e8e\u67e5\u8be2\u7b2cs\u5927\u3002\n\n\u7136\u540e\u7531\u4e8e\u6211\u4eec\u9700\u8981\u5b9a\u4f4d\u7f16\u53f7\u4e3as\u7684\u8282\u70b9\u5728\u6811\u4e2d\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6211\u4f7f\u7528\u4e86pos\u6570\u7ec4\u8bb0\u5f55\u5e76\u7ef4\u62a4\u3002\n\n\u4f3c\u4e4e\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u4e86\u3002\n\n\u5bf9\u4e86\uff0cswp\u51fd\u6570\u662fswap\u7684\u610f\u601d\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570\u7684\u503c\u3002\n\n\u603b\u4f53\u6765\u8bf4\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u597d\u5199\u7684\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=8*1e4+5;\nint inline swp(int &a,int &b){\n    a^=b^=a^=b;\n}\nint inline readuint(){\n    int Num;char ch;\n    while((ch=getchar())<'0'||ch>'9');Num=ch-'0';\n    while((ch=getchar())>='0'&&ch<='9') Num=Num*10+ch-'0';\n    return Num;\n}\nint inline readint(){\n    int Num=0,Flag=1;char ch;\n    while((ch=getchar())<'0'||ch>'9') if(ch=='-') break;\n    if(ch=='-') Flag=-1; else Num=ch-'0';\n    while((ch=getchar())>='0'&&ch<='9') Num=Num*10+ch-'0';\n    return Num*Flag; \n}\nvoid outint(int x){\n    if(x>=10) outint(x/10);\n    putchar(x%10+'0');\n}\nint n,m,ch[MAXN][2],fa[MAXN],cnt=0;\nint num[MAXN],pos[MAXN],siz[MAXN],rt=0;\nvoid inline pushup(int &x){\n    siz[x]=siz[ch[x][0]]+siz[ch[x][1]]+1;\n    pos[num[ch[x][0]]]=ch[x][0],pos[num[ch[x][1]]]=ch[x][1];\n}\nvoid rot(int x,int p){\n    int y=fa[x];\n    fa[ch[x][!p]]=y,ch[y][p]=ch[x][!p];\n    fa[x]=fa[y];if(fa[y]) ch[fa[y]][ch[fa[y]][1]==y]=x;\n    fa[y]=x,ch[x][!p]=y;\n    pushup(y),pushup(x);\n}\nvoid splay(int x,int T){\n    while(fa[x]!=T){\n        if(fa[fa[x]]==T) rot(x,ch[fa[x]][1]==x);\n        else{\n            int y=fa[x],z=fa[y],p=ch[z][1]==y;\n            if(ch[y][p]==x) rot(y,p),rot(x,p);\n            else rot(x,!p),rot(x,p);\n        }\n    }\n    pos[num[x]]=x;\n    if(!T) rt=x;\n}\nvoid insert(int key){\n    int x=rt;while(ch[rt][1]) x=ch[rt][1];\n    fa[++cnt]=x,ch[x][1]=cnt,num[cnt]=key,pos[key]=cnt,siz[cnt]=1,ch[cnt][0]=ch[cnt][1]=0;\n    splay(cnt,0);\n}\nvoid top_bottom(int s,int p){\n    splay(pos[s],0);\n    if(!ch[rt][p]) return;\n    if(!ch[rt][!p]) ch[rt][!p]=ch[rt][p],ch[rt][p]=0;\n    else{\n        int x=ch[rt][!p];while(ch[x][p]) x=ch[x][p];\n        fa[ch[rt][p]]=x,ch[x][p]=ch[rt][p],ch[rt][p]=0;\n        splay(ch[x][p],0);\n    }\n}\nvoid ist(int t,int s){\n    splay(pos[s],0);\n    if(!t) return;\n    if(t==1){\n        int suc=ch[rt][1],ps=pos[s];while(ch[suc][0]) suc=ch[suc][0];\n        swp(pos[s],pos[num[suc]]);\n        swp(num[ps],num[suc]);\n    }\n    else{\n        int pre=ch[rt][0],ps=pos[s];while(ch[pre][1]) pre=ch[pre][1];\n        swp(pos[s],pos[num[pre]]);\n        swp(num[ps],num[pre]);\n    }\n}\nvoid ask(int s){\n    splay(pos[s],0);\n    outint(siz[ch[rt][0]]);\n}\nint qry(int s){\n    int x=rt;\n    while(pos){\n        if(siz[ch[x][0]]+1==s) return num[x];\n        else if(siz[ch[x][0]]>=s) x=ch[x][0];\n        else s-=siz[ch[x][0]]+1,x=ch[x][1];\n    }\n}\nint main(){\n    ch[0][0]=ch[0][1]=siz[0]=fa[0]=num[0]=pos[0]=0;\n    n=readuint(),m=readuint();\n    for(int i=1;i<=n;i++) insert(readint());\n    for(int i=1;i<=m;i++){\n        char opt[10];scanf(\"%s\",opt);\n        switch(opt[0]){\n            case 'T':top_bottom(readuint(),0);break;\n            case 'B':top_bottom(readuint(),1);break;\n            case 'I':ist(readint(),readuint());break;\n            case 'A':ask(readuint()),putchar('\\n');break;\n            case 'Q':outint(qry(readuint())),putchar('\\n');break;\n        }\n    }\n}\n```",
        "postTime": 1483761102,
        "uid": 20903,
        "name": "halfrot",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u4e00\u79cd\u88f8\u7684treap\u89e3\u6cd5\n\n\u9996\u5148\u7ed9\u6bcf\u672c\u4e66\u6309\u987a\u5e8f\u7ed9\u4e00\u4e2a\u4f18\u5148\u503c\uff0c\u5e76\u6309\u4f18\u5148\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u63d2\u5165treap\u4e2d\u3002\n\n\u4ee4a[i]\u4e3a\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u4f18\u5148\u503c\n\n\u4e0d\u96be\u53d1\u73b0top/bottom\u64cd\u4f5c\u5c31\u662f\u628a\u8282\u70b9\u7684\u4f18\u5148\u503c\u8c03\u5230\u6700\u4f4e/\u6700\u9ad8.\u4e4b\u540e\u518d\u63d2\u5165\u5230treap\u4e2d\n\ninsert\u64cd\u4f5c\u4e3a\u4ea4\u6362\u4e24\u76f8\u90bb\u5143\u7d20\u7684\u4f18\u5148\u503c\u540e\u91cd\u65b0\u52a0\u5165treap\n\nask(s) / query(k) \u5c31\u662ftreap\u4e2d\u7684rank(a[s]) \u548c kth(k) \u7684\u64cd\u4f5c\u4e86\uff0c\u4f46\u662f\u8bb0\u5f97\u5728\u8282\u70b9\u91cc\u4fdd\u5b58\u8fd9\u672c\u4e66\u672c\u6765\u7684\u7f16\u53f7\n\n\u4ee3\u7801\u91c7\u7528\u6307\u9488\u7684\u5199\u6cd5\n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<string>\nusing namespace std;\n\n\nstruct node {\n    int v,r,s,book;\n    node *ch[2];\n    int cmp(int x) {\n        if (x==v) return -1;\n        return x<v?0:1;\n    }\n    void maintain() {\n        s=1+ch[0]->s+ch[1]->s;\n    }\n};\n\nnode *null=new node();\n\nvoid rotate(node * &o,int d) {\n    node *k=o->ch[d^1]; o->ch[d^1]=k->ch[d];    k->ch[d]=o;\n    o->maintain();    k->maintain();    o=k;\n}\n\nint nowbook;\n\nvoid insert(node * &o,int x) {\n    int d=o->cmp(x);\n    if (o==null) { o=new node();    o->ch[1]=o->ch[0]=null; o->v=x;    o->r=rand();    o->book=nowbook;    o->maintain(); }\n    else  {\n        insert(o->ch[d],x);\n        if (o->r < o->ch[d]->r) rotate(o,d^1);\n    }\n    o->maintain();\n}\n\nvoid remove(node * &o,int x) {\n    int d=o->cmp(x);\n    if (d==-1) {\n        if (o->ch[0]==null) o=o->ch[1];\n        else if (o->ch[1]==null) o=o->ch[0];\n        else {\n            int d=o->ch[1]->r > o->ch[0]->r ? 0:1;\n            rotate(o,d);\n            remove(o->ch[d],x);\n        }\n    } else remove(o->ch[d],x);\n    if (o!=null) o->maintain();\n}\n\nint kth(node *o,int k) {\n    int s=o->ch[0]->s;\n    if (k==s+1) return o->book;\n    else {\n        if (k<s+1) return kth(o->ch[0],k);\n        else return kth(o->ch[1],k-s-1);\n    }\n}\n\nint rank(node *o,int x) {\n    int d=o->cmp(x);\n    int s=o->ch[0]->s;\n    if (d==-1) return s+1;\n    if (d==0) return rank(o->ch[0],x);\n    if (d==1) return rank(o->ch[1],x)+s+1;\n}\n\nconst int maxn=80000+5;\nint a[maxn];\n\nint main() {\n    ios::sync_with_stdio(0);\n    null->s=null->r=0;    //null->ch[0]=null->ch[1]=null;\n    node *root=null;\n    int n,m;    cin>>n>>m;\n    int l=1,r=n;\n    for (int i=1;i<=n;++i) {\n        cin>>nowbook;\n        insert(root,i);\n        a[nowbook]=i;\n    }\n    \n    string s;\n    \n     while (m--) {\n         cin>>s;\n         if (s==\"Query\") {\n             int k;    cin>>k;\n             cout<<kth(root,k)<<endl;\n         }\n         if (s==\"Ask\") {\n             int k;    cin>>k;\n             cout<<rank(root,a[k])-1<<endl;\n         }\n         if (s==\"Top\") {\n             int k;    cin>>k;\n             remove(root,a[k]);\n             nowbook=k;\n             insert(root,--l);\n             a[k]=l;\n         }\n         \n         if (s==\"Bottom\") {\n             int k;    cin>>k;\n             remove(root,a[k]);\n             nowbook=k;\n             insert(root,++r);\n             a[k]=r;\n         }\n         \n         if (s==\"Insert\") {\n             int s1,t;    cin>>s1>>t;\n             if (t==-1) {\n                 int rank2=rank(root,a[s1]);\n                 int rank1=rank2-1;\n                 int s2=kth(root,rank1);\n                 remove(root,a[s1]);    remove(root,a[s2]);\n                 swap(a[s1],a[s2]);\n                 nowbook=s1;    insert(root,a[s1]);\n                 nowbook=s2;    insert(root,a[s2]);\n             }\n             \n             if (t==1) {\n                 int rank2=rank(root,a[s1]);\n                 int rank1=rank2+1;\n                 int s2=kth(root,rank1);\n                 remove(root,a[s1]);    remove(root,a[s2]);\n                 swap(a[s1],a[s2]);\n                 nowbook=s1;    insert(root,a[s1]);\n                 nowbook=s2;    insert(root,a[s2]);\n             }\n         }\n         \n     }\n    \n    return 0;\n}\n```",
        "postTime": 1511772401,
        "uid": 8728,
        "name": "\u767d\u5b66\u5bb6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u5c45\u7136\u6ca1\u6709\u4eba\u53d1fhqtreap\u7684\u9898\u89e3\u3002\u3002\u3002\n\n\u90a3\u6211\u5c31\u6765\u4e00\u53d1\u3002\n\n\u7ef4\u62a4pos\u6570\u7ec4\uff0c\u8bb0\u5f55\u4e0b\u7f16\u53f7\u4e3ai\u7684\u4e66\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662fSplit\u548cMerge\u7684\u7ec4\u5408\u4e86\u3002\n\n\u4ee3\u7801\u5199\u7684\u6bd4\u8f83\u6e05\u695a\uff0c\u5e94\u8be5\u597d\u61c2\u3002\n\n```cpp\nstruct Tr{\n    int siz,v,pr,l,r,fa;\n};\nTr tr[400005];\nint S=0,root=0,n,m,a[200005];\nint pos[200005];\nvoid maintain(int k){\n    tr[k].siz=1;\n    if(tr[k].l)tr[k].siz+=tr[tr[k].l].siz,tr[tr[k].l].fa=k;\n    if(tr[k].r)tr[k].siz+=tr[tr[k].r].siz,tr[tr[k].r].fa=k;\n}\nint newnode(int k){\n    S++,tr[S].v=k,tr[S].pr=rand(),tr[S].siz=1;\n    tr[S].l=tr[S].r=tr[S].fa=0;\n    return S;\n}\nvoid Split_K(int now,int k,int &x,int &y){\n    if(!now)x=y=0;\n    else{\n        if(k>tr[tr[now].l].siz)\n            x=now,Split_K(tr[now].r,k-tr[tr[now].l].siz-1,tr[now].r,y);\n        else\n            y=now,Split_K(tr[now].l,k,x,tr[now].l);\n        maintain(now);\n    }\n}\nint Merge(int x,int y){\n    if(!x||!y)return x+y;\n    if(tr[x].pr<tr[y].pr){\n        tr[x].r=Merge(tr[x].r,y);\n        maintain(x);\n        return x;\n    }else{\n        tr[y].l=Merge(x,tr[y].l);\n        maintain(y);\n        return y;\n    }\n}\nint read(){\n    int f=1,x=0;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-f;c=getchar();}\n    while(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n    return f*x; \n}    \nint get_pos(int x){\n    int res=1+tr[tr[x].l].siz;\n    while(tr[x].fa){\n        if(x==tr[tr[x].fa].r)\n            res+=tr[tr[tr[x].fa].l].siz+1;\n        x=tr[x].fa;\n    }\n    return res;\n}\nvoid init(){\n    srand(12414841);\n    tr[0].siz=tr[0].v=tr[0].fa=0;\n    n=read(),m=read();\n    for(int i=1;i<=n;i++)a[i]=read();\n    for(int i=1;i<=n;i++)\n        pos[a[i]]=newnode(a[i]),\n        root=Merge(root,pos[a[i]]);\n}\nvoid solve(){\n    char ord[10];\n    int x,u,v,w,y,z,t,i1,i2;//\u5168\u662f\u8f85\u52a9\u53d8\u91cf\n    for(int i=1;i<=m;i++){\n        scanf(\"%s\",ord);\n        u=v=w=y=z=t=0;\n        if(ord[0]=='A')\n            x=read(),\n            printf(\"%d\\n\",get_pos(pos[x])-1);\n        if(ord[0]=='T'){\n            x=read(),u=get_pos(pos[x]);\n            Split_K(root,u-1,w,z);\n            Split_K(z,1,y,v);\n            root=Merge(Merge(y,w),v);\n        }\n        if(ord[0]=='B'){\n            x=read(),u=get_pos(pos[x]);\n            Split_K(root,u-1,w,z);\n            Split_K(z,1,y,v);\n            root=Merge(Merge(w,v),y);\n        }    \n        if(ord[0]=='Q'){\n            x=read();\n            Split_K(root,x-1,w,z);\n            Split_K(z,1,y,v);\n            printf(\"%d\\n\",tr[y].v);\n            root=Merge(Merge(w,y),v);\n        }\n        if(ord[0]=='I'){\n            x=read(),y=read();\n            if(y){\n                u=get_pos(pos[x]);\n                Split_K(root,u-1,w,v);\n                Split_K(v,1,t,z);\n                if(y==-1){\n                    Split_K(w,u-2,i1,i2);\n                    root=Merge(Merge(Merge(i1,t),i2),z);\n                }else{\n                    Split_K(z,1,i1,i2);\n                    root=Merge(Merge(Merge(w,i1),t),i2);\n                }\n            }\n        }\n    }\n}\n```\n\u987a\u4fbf\u6253\u4e00\u53d1\u5e7f\u544a\uff1a[\u6211\u7684\u535a\u5ba2](http://zqy1018.leanote.com/)\uff0c\u6b22\u8fce\u8054\u52a8\n",
        "postTime": 1497775900,
        "uid": 11765,
        "name": "zqy1018",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u53d1\u7bc7\u9898\u89e3\u5e86\u795d\u4e00\u4e0b\u3002\n\n**\u9700\u8981\u7684\u6570\u636e\u7ed3\u6784\uff1a**\n\n\u4e00\u4e2a\u6570\u7ec4\uff1a$a$\uff1b\u4e00\u4e2amap\uff1a$b$\uff1b\u4e00\u4e2a\u5e73\u8861\u6811\uff08pb_ds\u5b9e\u73b0\uff09\uff1a$t$\u3002\n\n$a$\uff1a\u6bcf\u4e2a\u4f4d\u7f6e$a_i$\u5b58\u50a8\u7684\u662f$a_i$\u5728\u4e66\u67b6\u4e2d\u7684\u4f4d\u7f6e\u3002\u5f53\u7136\u4e0d\u662f\u771f\u5b9e\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u5982\u679c\u8fd9\u6837\u6bcf\u6b21\u4fee\u6539\u5c31\u8981\u7528$O(n)$\u7684\u65f6\u95f4\u3002\u4e00\u5f00\u59cb\u662f\u201c1\uff0c2\uff0c3\uff0c4\uff0c5\u201d\uff0c\u7136\u540e\u8981\u628a$5$\u63d0\u5230\u6700\u4e0a\u9762\uff0c\u5c31\u53ef\u4ee5\u6539\u6210\u201c1\uff0c2\uff0c3\uff0c4\uff0c0\u201d\u3002\n\n$b$\uff1a$key$\u4e3a\u4e66\u7684\u7f16\u53f7\u5728\u4e66\u67b6\u4e2d\u7684\u4f4d\u7f6e\uff0c\u6620\u5c04\u7684\u503c\u662f\u4e66\u7684\u7f16\u53f7\u3002\n\n$t$\uff1a\u6a21\u62df\u4e66\u67b6\uff0c\u5b58\u50a8\u7684\u662f\u6240\u6709\u4e66\u7684\u865a\u62df\u4f4d\u7f6e\u3002\n\n\u8fd8\u8981\u4e24\u4e2a\u53d8\u91cf\uff1a$l$\uff0c$r$\u3002$l$\u5b58\u50a8\u4e66\u67b6\u7684\u9876\u7aef\u7f16\u53f7\uff0c$r$\u5b58\u50a8\u4e66\u67b6\u7684\u5e95\u7aef\u7f16\u53f7\u3002\n\n**\u64cd\u4f5c1\uff1a\u628a\u7f16\u53f7\u4e3aS\u7684\u4e66\u653e\u5728\u6700\u4e0a\u9762**\n\n\u6bcf\u4e2a\u6570\u636e\u7ed3\u6784\u90fd\u8981\u4fee\u6539\u3002\u5bf9\u4e8e$t$\u548c$b$\uff0c\u5220\u9664$key=a_S$\u7684\u8282\u70b9\uff0c\u6dfb\u52a0$key=l$\uff0c$b_l$\u4ecd\u7136\u6620\u5c04$S$\u3002\u5bf9\u4e8e$a$\uff0c\u76f4\u63a5\u4fee\u6539$a_S$\u4e3a$l$\u3002\u540c\u65f6\u8fd8\u8981\u628a$l-1$\u3002\u6ce8\u610f\u4fee\u6539\u987a\u5e8f\u3002\n\n\u64cd\u4f5c2\u540c\u4e0a\u3002\n\n**\u64cd\u4f5c3\uff1a\u82e5\u7f16\u53f7\u4e3aS\u7684\u4e66\u4e0a\u9762\u6709X\u672c\u4e66\uff0c\u5219\u8fd9\u6761\u547d\u4ee4\u8868\u793a\u628a\u8fd9\u672c\u4e66\u653e\u56de\u53bb\u540e\u5b83\u7684\u4e0a\u9762\u6709X+T\u672c\u4e66**\n\n\u6bcf\u4e2a\u6570\u636e\u7ed3\u6784\u90fd\u8981\u4fee\u6539\u3002\u5bf9\u4e8e$b$\uff0c\u4ea4\u6362$b_{a_S}$\u548c$b_u$\uff0c$u$\u4e3a\u5728$t$\u4e2d$a_S$\u7684\u524d\u9a71\u6216\u540e\u7ee7\uff08\u89c1\u3010\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u3011\uff09\u3002\u5bf9\u4e8e$a$\uff0c\u76f4\u63a5\u4fee\u6539$a_S$\u4e3a$l$\u3002$t$\u4e0d\u7528\u4fee\u6539\uff0c\u56e0\u4e3a\u6392\u540d\u5e76\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u3002\n\n**\u64cd\u4f5c4\uff1a\u8be2\u95ee\u7f16\u53f7\u4e3aS\u7684\u4e66\u7684\u4e0a\u9762\u76ee\u524d\u6709\u591a\u5c11\u672c\u4e66**\n\n\u6c42$t$\u4e2d$a_S$\u7684\u6392\u540d\u3002\n\n**\u64cd\u4f5c5\uff1a\u8be2\u95ee\u4ece\u4e0a\u9762\u6570\u8d77\u7684\u7b2cS\u672c\u4e66\u7684\u7f16\u53f7**\n\n\u8f93\u51fa$b_v$,$v$\u4e3a$t$\u4e2d\u6392\u540d\u4e3a$s$\u7684\u6570\u3002\n\n\u6240\u6709\u7684\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a$O(\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#define ll long long\nusing namespace std;\nusing namespace __gnu_pbds;\ntree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> t;\nint a[80005];\nmap<int,int> b;\n/*\n1\uff0e Top S\u2014\u2014\u8868\u793a\u628a\u7f16\u53f7\u4e3aS\u7684\u4e66\u653e\u5728\u6700\u4e0a\u9762\u3002\n\n2\uff0e Bottom S\u2014\u2014\u8868\u793a\u628a\u7f16\u53f7\u4e3aS\u7684\u4e66\u653e\u5728\u6700\u4e0b\u9762\u3002\n\n3\uff0e Insert S T\u2014\u2014T\u2208{-1\uff0c0\uff0c1}\uff0c\u82e5\u7f16\u53f7\u4e3aS\u7684\u4e66\u4e0a\u9762\u6709X\u672c\u4e66\uff0c\u5219\u8fd9\u6761\u547d\u4ee4\u8868\u793a\u628a\u8fd9\u672c\u4e66\u653e\u56de\u53bb\u540e\u5b83\u7684\u4e0a\u9762\u6709X+T\u672c\u4e66\uff1b\n\n4\uff0e Ask S\u2014\u2014\u8be2\u95ee\u7f16\u53f7\u4e3aS\u7684\u4e66\u7684\u4e0a\u9762\u76ee\u524d\u6709\u591a\u5c11\u672c\u4e66\u3002\n\n5\uff0e Query S\u2014\u2014\u8be2\u95ee\u4ece\u4e0a\u9762\u6570\u8d77\u7684\u7b2cS\u672c\u4e66\u7684\u7f16\u53f7\u3002\n*/\nint main()\n{\n\tint x,y,n,m,i,w,l,r,u;\n\tchar opt[10];\n\tscanf(\"%d%d\",&n,&m);\n\tl=0,r=n+1;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&x);\n\t\ta[x]=i;\n\t\tb[i]=x;\n\t\tt.insert(i);\n\t}\n\twhile(m--)\n\t{\n\t\tscanf(\"%s%d\",&opt,&x);\n\t\tw=a[x];\n\t\tif(opt[0]=='T')\n\t\t{\n\t\t\tt.erase(t.lower_bound(w));\n\t\t\tt.insert(l);\n\t\t\ta[x]=l;\n\t\t\tb.erase(w);\n\t\t\tb[l]=x;\n\t\t\tl--;\n\t\t}\n\t\tif(opt[0]=='B')\n\t\t{\n\t\t\tt.erase(t.lower_bound(w));\n\t\t\tt.insert(r);\n\t\t\ta[x]=r;\n\t\t\tb.erase(w);\n\t\t\tb[r]=x;\n\t\t\tr++;\n\t\t}\n\t\tif(opt[0]=='I')\n\t\t{\n\t\t\tscanf(\"%d\",&y);\n\t\t\tif(y==-1)\n\t\t\t{\n\t\t\t\tu=*(--t.lower_bound(w));\n\t\t\t\tswap(a[x],a[b[u]]);\n\t\t\t\tswap(b[w],b[u]);\n\t\t\t}\n\t\t\tif(y==1)\n\t\t\t{\n\t\t\t\tu=*(t.lower_bound(w+1));\n\t\t\t\tswap(a[x],a[b[u]]);\n\t\t\t\tswap(b[w],b[u]);\n\t\t\t}\n\t\t}\t\n\t\tif(opt[0]=='A')\n\t\t\tprintf(\"%d\\n\",t.order_of_key(w));\n\t\tif(opt[0]=='Q')\n\t\t\tprintf(\"%d\\n\",b[(*t.find_by_order(x-1))]);\t\n\t}\n}\n```\n\u5b8c\u3002",
        "postTime": 1582688394,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "Online operate & quest \u5728\u7ebf\u64cd\u4f5c\u67e5\u8be2\n\n\uff08\u6811\u72b6\u6570\u7ec4\u662f~~\u9a97\u5206~~AC\u7684\u597d\u4e1c\u897f\uff09\n\n\u6309\u9898\u610f\u7528\u6570\u7ec4 shelt \u6a21\u62df\u4e66\u67b6\uff0c\u524d\u540e\u9884\u7559\u957f\u5ea6\uff0c\n\nL,R \u5206\u522b\u8868\u793a\u4e66\u67b6\u9876\u7aef\u3001\u5e95\u7aef\n\n**Top, Bottom, Insert \u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\uff0c\u628a\u539f\u6765\u6709\u4e66\u73b0\u5728\u7559\u7a7a\u7684\u5730\u65b9\u7f6e\u4e3a0\uff0c\u66f4\u65b0\u6811\u72b6\u6570\u7ec4\uff0c**\n\n\u75283\u4e2a\u51fd\u6570\uff1a\u52a0\u5165(add), \u5220\u9664(dele) _ delete\u662f\u5173\u952e\u5b57_ , \u8ba1\u7b97\u4e0a\u9762\u6709\u591a\u5c11\u4e66(cal).\n\n\u63d0\u9ad8\u7ec4\u6c34\u5e73\u7684\u66b4\u529b\u6a21\u62df\n\n~~MORE VIOLENT YOUR CODE IS, MORE EXTRA MARKS BELONG TO YOU~~\n\n(less than 100ms)\n\nCode:\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nchar t[10];\nint shelf[240005],f[240005];\nint c[240005];  // put books into a Binary Indexed Tree\nint n,m,S,T,L,R,Next,Left,Right,mid,ans;\nconst int TOP=80000;\nint lowbit(int x)\n{\n\treturn x-(x&(x-1));\n}\nvoid add(int x)\n{\n\twhile(x<=3*TOP+3)\n\t{\n\t\tc[x]++;\n\t\tx+=lowbit(x);\n\t}\n}\nvoid dele(int x)\n{\n\twhile(x<=3*TOP+3)\n\t{\n\t\tc[x]--;\n\t\tx+=lowbit(x);\n\t}\n}\nint cal(int x)\n{\n\tint sum=0;\n\twhile(x>0)\n\t{\n\t\tsum+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn sum;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&shelf[TOP+i]);\n\t\tf[shelf[TOP+i]]=TOP+i;\n\t\tadd(TOP+i);\n\t}\n\tL=TOP+1; R=TOP+n;\n\twhile(m--)\n\t{\n\t\tscanf(\"%s%d\",t,&S);\n\t\tif(t[0]=='T')\n\t\t{\n\t\t\tshelf[f[S]]=0;\n\t\t\tdele(f[S]);\n\t\t\tf[S]=L-1;\n\t\t\tadd(f[S]);\n\t\t\tL--;\n\t\t\tshelf[f[S]]=S;\n\t\t}\n\t\tif(t[0]=='B')\n\t\t{\n\t\t\tshelf[f[S]]=0;\n\t\t\tdele(f[S]);\n\t\t\tf[S]=R+1;\n\t\t\tadd(f[S]);\n\t\t\tR++;\n\t\t\tshelf[f[S]]=S;\n\t\t}\n\t\tif(t[0]=='I')\n\t\t{\n\t\t\tcin>>T;\n\t\t\tint k=T;\n\t\t\twhile(shelf[f[S]+T]==0)\n\t\t\t\tT+=k;\n\t\t\tNext=shelf[f[S]+T];\n\t\t\tswap(shelf[f[S]],shelf[f[S]+T]);\n\t\t\tswap(f[S],f[Next]);\n\t\t}\n\t\tif(t[0]=='A')\n\t\t\tprintf(\"%d\\n\",cal(f[S]-1));\n\t\tif(t[0]=='Q')\n\t\t{\n\t\t\tLeft=L; Right=R; ans=240004;\n\t\t\twhile(Left<=Right)\n\t\t\t{\n\t\t\t\tmid=(Left+Right)/2;\n\t\t\t\tif(cal(mid)>=S)\n\t\t\t\t{\n\t\t\t\t\tans=min(ans,mid);\n\t\t\t\t\tRight=mid-1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tLeft=mid+1;\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",shelf[ans]);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1541416923,
        "uid": 72078,
        "name": "Liangkry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "# 01trie\u505a\u6cd5\n\n\u65e2\u713601trie\u53ef\u4ee5\u8fc7\u5e73\u8861\u6811\u677f\u5b50\uff0c\u81ea\u7136\u4e5f\u80fd\u505a\u8fd9\u9053\u9898\u3002\n\n\u64cd\u4f5c\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff1a\n\n- \u5bf9\u4e8e\u64cd\u4f5cTop\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2ahead\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5220\u9664\u5bf9\u5e94\u4e66\u7684\u6743\u503c\uff0c\u7136\u540e\u5f80\u6811\u4e0a\u63d2\u5165\u4e00\u4e2ahead-1\uff0c\u7136\u540ehead--\uff0c\u6700\u540e\u628a\u4e66\u6620\u5c04\u5230\u8fd9\u4e2a\u70b9\u4e0a\u5c31\u884c\u4e86\u3002\n\n- \u5bf9\u4e8e\u64cd\u4f5cBottom\uff0c\u5efa\u7acb\u4e00\u4e2atail\uff0c\u540c\u7406\u3002\n\n- \u5bf9\u4e8e\u64cd\u4f5cInsert\uff0c\u627e\u5230\u8fd9\u672c\u4e66\u7684\u6392\u540d\uff0c\u7136\u540e\u548c\u8fd9\u672c\u4e66\u7684\u4e0a/\u4e0b\u7684\u90a3\u4e2a\u6392\u540d\u4ea4\u6362\u5c31\u884c\u4e86\u3002\n\n- \u5bf9\u4e8e\u64cd\u4f5cAsk\uff0c\u76f4\u63a5\u67e5\u6392\u540d\u3002\n\n- \u5bf9\u4e8e\u64cd\u4f5cQuery\uff0c\u76f4\u63a5\u67e5\u6392\u540d\u7b2ck\u5927\u7684\u6811\u5c31\u884c\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u662f~~\u7b80\u77ed\u7684~~\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct trie{\n    #define work for(register int i=31,rt=1,t;i>=0;--i)\n    int tot=1;\n    struct point{\n        int ch[2],sum;\n    }p[800010];\n    inline void clear(){tot=1,p[1].ch[0]=p[1].ch[1]=p[1].sum=0;}\n    inline void add(int x,int z){\n        work{t=x>>i&1;\n        \tif(!p[rt].ch[t])p[rt].ch[t]=++tot;\n        \tp[rt=p[rt].ch[t]].sum+=z;\n        }\n    }\n    inline int kth(int k){\n    \tint ret=0;\n    \twork{\n    \t\tif(k>p[p[rt].ch[0]].sum)ret|=1<<i,k-=p[p[rt].ch[0]].sum,rt=p[rt].ch[1];\n    \t\telse rt=p[rt].ch[0];\n        }return ret;\n    }\n    inline int rank(int x){\n    \tint ret=1;\n    \twork{t=x>>i&1;\n    \t\tif(t)ret+=p[p[rt].ch[0]].sum;\n    \t\trt=p[rt].ch[t];\n        }return ret;\n    }\n    void ins(int x){add(x,1);}\n    void del(int x){add(x,-1);}\n    int qq(int x){return kth(rank(x)-1);}\n    int hj(int x){return kth(rank(x+1));}\n    bool empty(){return p[1].sum==0;}\n}tr;\ninline int read(){\n    register int ret=0,f=1;register char c;\n    for(c=getchar();!isdigit(c);c=getchar())if(c=='-')f=-1;\n    for(;isdigit(c);ret=(ret<<1)+(ret<<3)+c-'0',c=getchar());\n    return ret*f;\n}\nconst int N=800000;\nint n,m,zhi[3*N]/*dian dao shu*/,rank[N]/*shu dao dian*/;\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=n;++i){\n    \tzhi[i+N]=read();rank[zhi[i+N]]=i+N;\n    \ttr.ins(i+N);\n    }\n    int h=N+1,t=2*N;\n    while(m--){\n        char s[10];\n        scanf(\"%s\",s);\n        if(s[0]=='T'){\n            int x=read();\n            tr.del(rank[x]);--h;\n            tr.ins(h);\n            rank[x]=h;\n            zhi[h]=x;\n        }\n        if(s[0]=='B'){\n            int x=read();\n            tr.del(rank[x]);++t;\n            tr.ins(t);\n            rank[x]=t;\n            zhi[t]=x;\n        }\n        if(s[0]=='A'){\n            int x=read();\n            printf(\"%d\\n\",tr.rank(rank[x])-1);\n        }\n        if(s[0]=='Q'){\n            int x=read();\n            printf(\"%d\\n\",zhi[tr.kth(x)]);\n        }\n        if(s[0]=='I'){\n            int x=read(),bz=read();\n            int k=tr.rank(rank[x]);\n            int from=rank[x];\n            int to=tr.kth(k+bz);\n            swap(zhi[from],zhi[to]);\n            swap(rank[zhi[from]],rank[zhi[to]]);\n        }\n    }\n}\n```",
        "postTime": 1540856299,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "## \u91c7\u7528\u6307\u9488\u5b9e\u73b0\u81ea\u9876\u5411\u4e0b\u7684\u4f38\u5c55\u6811\u5982\u4f55\u5c06\u6307\u5b9a\u7f16\u53f7\u7684\u8282\u70b9\u4f38\u5c55\u5230\u6839\u8282\u70b9\n\n\u6709\u6ca1\u6709\u4eba\u7684\u4f38\u5c55\u6811\u662f\u6309\u300a\u8bad\u7ec3\u6307\u5357\u300b\u4e0a\u7528\u6307\u9488\u81ea\u9876\u5411\u4e0b\u5b9e\u73b0\u7684\uff1f\n\n\u4e66\u4e0a\u662f\u627e\u5230\u5e8f\u5217\u4e2d\u7b2ck\u4e2a\u5143\u7d20\uff0c\u5c06\u5b83\u4f38\u5c55\u5230\u6811\u7684\u6839\u8282\u70b9\uff0c\u800c\u672c\u9898\u5374\u8981\u5b9e\u73b0\u5c06\u7f16\u53f7\u4e3aS\u7684\u8282\u70b9\u4f38\u5c55\u5230\u6839\u8282\u70b9\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5bf9\u539f\u6765\u7684\u4ee3\u7801\u8fdb\u884c\u4e00\u4e9b\u6539\u8fdb\u3002\n\n\u5728\u8868\u793a\u4f38\u5c55\u6811\u8282\u70b9\u7684\u7ed3\u6784\u4f53\u4e2d\u589e\u52a0\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u7528\u4e8e\u50a8\u5b58\u8be5\u8282\u70b9\u7684\u7236\u8282\u70b9\uff1a\n```cpp\nstruct node {\n\tint v,s;\n\tnode *fa,*ch[2];\n};\n```\n\n\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5728\u7ef4\u62a4\u65f6\u987a\u4fbf\u5c06\u5b50\u8282\u70b9\u7ed3\u6784\u4f53\u4e2d\u7684\u7236\u8282\u70b9\u66f4\u65b0\u4e3a\u5f53\u524d\u8282\u70b9\uff1a\n```cpp\ninline void maintain() {\n\ts=ls()+1+rs();\n\tif(ch[0]!=NULL) ch[0]->fa=this;\n\tif(ch[1]!=NULL) ch[1]->fa=this;\n}\n```\n\n\u7136\u540e\u989d\u5916\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\u7684\u6570\u7ec4loc\uff0cloc\\[i]\u8868\u793a\u50a8\u5b58\u7740\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u5730\u5740\uff1a\n```cpp\nnode* loc[maxn];\n```\n\n\u6bcf\u4e00\u6b21\u67e5\u8be2\u65f6\uff0c\u4ece\u8be5\u5730\u5740\u5f00\u59cb\uff0c\u6cbf\u7740\u7236\u8282\u70b9\u5411\u4e0a\uff0c\u6309\u7167\u67e5\u627e\u7b2ck\u4e2a\u5143\u7d20\u53cd\u8fc7\u6765\u7684\u65b9\u6cd5\uff08\u5982\u679c\u662f\u7236\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u7ee7\u7eed\u9012\u5f52\uff0c\u5982\u679c\u662f\u7236\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u5219\u52a0\u4e0a\u7236\u8282\u70b9\u5de6\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u4e2a\u6570+1\u7ee7\u7eed\u9012\u5f52\uff09\uff0c\u7edf\u8ba1\u5f97\u5230\u8be5\u8282\u70b9\u7684\u5728\u6574\u4e2a\u6570\u5217\u4e2d\u7684\u4f4d\u7f6e\uff08\u4e5f\u53ef\u4ee5\u975e\u9012\u5f52\u5b9e\u73b0\uff09\uff1a\n```cpp\nint rank(node* o,node* root) {\n\tif(o==root) return 0;\n\tif(o->fa->ch[0]==o) return rank(o->fa,root);\n\telse if(o->fa->ch[1]==o) return rank(o->fa,root)+o->fa->ls()+1;\n\treturn 0;\n}\nint rank(node* root,int tag) {\n\treturn rank(loc[tag],root)+1+loc[tag]->ls();\n}\n```\n\n\u5982\u679c\u5f85\u67e5\u627e\u7684\u8282\u70b9\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u6839\u8282\u70b9\u548c\u5de6\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u4e00\u5b9a\u5728\u5f85\u67e5\u627e\u8282\u70b9\u7684\u5de6\u8fb9\uff0c\u5373\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6267\u884c\u4f38\u5c55\u64cd\u4f5c\u4e86\u3002\n\n\uff08\u7b2c\u4e00\u6b21\u5728\u6d1b\u8c37\u4e0a\u5199\u9898\u89e3\uff0c\u5982\u6709\u9519\u8bef\uff0c\u6b22\u8fce\u6307\u51fa\uff5e\uff5e\uff09\n\n## \u4ee3\u7801\uff08Accepted\uff09\n```cpp\n#include <cstdio>\n#include <climits>\n#include <algorithm>\nconst int maxn=80005;\nnamespace Splay {\n\tstruct node {\n\t\tint v,s;\n\t\tnode *fa,*ch[2];\n\t\tnode(node* fa,int val):fa(fa),v(val) {s=1;ch[0]=ch[1]=NULL;}\n\t\tinline int ls() {return ch[0]!=NULL?ch[0]->s:0;}\n\t\tinline int rs() {return ch[1]!=NULL?ch[1]->s:0;}\n\t\tinline int cmp(int k) {return k<=ls()?0:1;}\n\t\tinline void maintain() {\n\t\t\ts=ls()+1+rs();\n\t\t\tif(ch[0]!=NULL) ch[0]->fa=this;\n\t\t\tif(ch[1]!=NULL) ch[1]->fa=this;\n\t\t}\n\t};\n\tnode* loc[maxn];\n\tinline void rotate(node* &o,int d) {\n\t\tnode* k=o->ch[d^1];o->ch[d^1]=k->ch[d];k->ch[d]=o;\n\t\to->maintain();k->maintain();o=k;\n\t}\n\tvoid splay(node* &o,int k) {\n\t\tif(o==NULL||k<=0||o->s<k) return;\n\t\tif(o->ls()+1!=k) {\n\t\t\tint d=o->cmp(k);\n\t\t\tif(d==1) k-=o->ls()+1;\n\t\t\tnode* &p=o->ch[d];\n\t\t\tif(p==NULL) {rotate(o,d^1);return;}\n\t\t\tif(p->ls()+1!=k) {\n\t\t\t\tint d2=p->cmp(k);\n\t\t\t\tif(d2==1) k-=p->ls()+1;\n\t\t\t\tsplay(p->ch[d2],k);\n\t\t\t\tif(d==d2) rotate(o,d^1);\n\t\t\t\telse rotate(o->ch[d],d2^1);\n\t\t\t}\n\t\t\trotate(o,d^1);\n\t\t}\n\t}\n\tnode* build(node* fa,int l,int r,int val[]) {\n\t\tint mid=(l+r)>>1;\n\t\tnode* o=new node(fa,val[mid]);\n\t\tloc[val[mid]]=o;\n\t\tif(l<=mid-1) o->ch[0]=build(o,l,mid-1,val);\n\t\tif(mid+1<=r) o->ch[1]=build(o,mid+1,r,val);\n\t\to->maintain();\n\t\treturn o;\n\t}\n\tint rank(node* o,node* root) {\n\t\tif(o==root) return 0;\n\t\tif(o->fa->ch[0]==o) return rank(o->fa,root);\n\t\telse if(o->fa->ch[1]==o) return rank(o->fa,root)+o->fa->ls()+1;\n\t\treturn 0;\n\t}\n\tint rank(node* root,int tag) {\n\t\treturn rank(loc[tag],root)+1+loc[tag]->ls();\n\t}\n\tnode* kth(node* o,int k) {\n\t\tif(o->ls()+1==k) return o;\n\t\telse if(k<=o->ls()) return kth(o->ch[0],k);\n\t\treturn kth(o->ch[1],k-o->ls()-1);\n\t}\n}\nusing namespace Splay;\nint val[maxn];\nint main() {\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i) scanf(\"%d\",&val[i]);\n\tnode* root=build(NULL,1,n,val);\n\tchar opt[10];int s,t;\n\twhile(m--) {\n\t\tscanf(\"%s%d\",opt,&s);\n\t\tif(opt[0]=='T') {\n\t\t\tint k=rank(root,s);\n\t\t\tsplay(root,k);\n\t\t\tif(root->ch[1]!=NULL) {\n\t\t\t\tsplay(root->ch[1],1);\n\t\t\t\troot->ch[1]->ch[0]=root->ch[0];root->ch[0]=NULL;\n\t\t\t\troot->ch[1]->maintain();\n\t\t\t\troot->maintain();\n\t\t\t}\n\t\t\telse {\n\t\t\t\troot->ch[1]=root->ch[0];\n\t\t\t\troot->ch[0]=NULL;\n\t\t\t\troot->maintain();\n\t\t\t}\n\t\t}\n\t\telse if(opt[0]=='B') {\n\t\t\tint k=rank(root,s);\n\t\t\tsplay(root,k);\n\t\t\tif(root->ch[0]!=NULL) {\n\t\t\t\tsplay(root->ch[0],root->ch[0]->s);\n\t\t\t\troot->ch[0]->ch[1]=root->ch[1];root->ch[1]=NULL;\n\t\t\t\troot->ch[0]->maintain();\n\t\t\t\troot->maintain();\n\t\t\t}\n\t\t\telse {\n\t\t\t\troot->ch[0]=root->ch[1];\n\t\t\t\troot->ch[1]=NULL;\n\t\t\t\troot->maintain();\n\t\t\t}\n\t\t}\n\t\telse if(opt[0]=='I') {\n\t\t\tscanf(\"%d\",&t);\n\t\t\tif(t==0) continue;\n\t\t\tint k=rank(root,s);\n\t\t\tsplay(root,k);\n\t\t\tnode* newnode=kth(root,k+t);\n\t\t\tint d=(newnode==newnode->fa->ch[0])?0:1;\n\t\t\tif(newnode->fa==root) {\n\t\t\t\tint d=(newnode==newnode->fa->ch[0])?0:1;\n\t\t\t\troot->ch[d]=newnode->ch[d];\n\t\t\t\tnewnode->ch[d]=root;\n\t\t\t\tstd::swap(newnode->ch[d^1],root->ch[d^1]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewnode->fa->ch[d]=root;\n\t\t\t\tstd::swap(root->fa,newnode->fa);\n\t\t\t\tstd::swap(root->ch[0],newnode->ch[0]);\n\t\t\t\tstd::swap(root->ch[1],newnode->ch[1]);\n\t\t\t}\n\t\t\troot->maintain();\n\t\t\tnewnode->maintain();\n\t\t\troot=newnode;\n\t\t}\n\t\telse if(opt[0]=='A') {\n\t\t\tint k=rank(root,s);\n\t\t\tprintf(\"%d\\n\",k-1);\n\t\t}\n\t\telse if(opt[0]=='Q') {\n\t\t\tsplay(root,s);\n\t\t\tprintf(\"%d\\n\",root->v);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1522304559,
        "uid": 13330,
        "name": "WHZ0325",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u5230\u672c\u849f\u84bb\u7684[\u535a\u5ba2](https://www.luogu.com.cn/blog/bzlz-zdx/solution-p2596)\u6765\u770b\u770b\u561b\uff1f\n## \u9898\u610f\u7b80\u8ff0\n\u8bbe\u8ba1\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u5b83\u5728\u4e00\u4e2a\u7531 $[1,n]$ \u7684\u6392\u5217\u4e2d\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a  \n\n- \u5c06\u503c\u4e3a $x$ \u7684\u5143\u7d20\u79fb\u5230\u6700\u524d\uff1b    \n- \u5c06\u503c\u4e3a $x$ \u7684\u5143\u7d20\u79fb\u5230\u6700\u540e\uff1b  \n- \u5c06\u503c\u4e3a $x$ \u7684\u5143\u7d20\u524d\u7f6e\u4e00\u4f4d\uff1b  \n- \u5c06\u503c\u4e3a $x$ \u7684\u5143\u7d20\u540e\u7f6e\u4e00\u4f4d\uff1b  \n- \u8be2\u95ee\u6392\u5728\u503c\u4e3a $x$ \u7684\u5143\u7d20\u524d\u7684\u5143\u7d20\u4e2a\u6570\uff08\u5373\u6392\u540d\u51cf $1$\uff09\uff1b  \n- \u8be2\u95ee\u6392\u540d\u4e3a $x$ \u7684\u5143\u7d20\u7684\u503c\u3002  \n\n## \u9898\u76ee\u5206\u6790\n\u7167\u4f8b\u5148\u8003\u8651\u66b4\u529b\u505a\u6cd5\uff1a\u66b4\u529b\u7ef4\u62a4\u8be5\u6392\u5217\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u503c\u6240\u5bf9\u5e94\u7684\u5143\u7d20\u4f4d\u7f6e\u3002\u8fd9\u6837\uff0c\u5bf9\u4e8e\u540e\u56db\u4e2a\u64cd\u4f5c\uff0c\u5747\u53ef\u4ee5\u505a\u5230 $\\operatorname{O}(1)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1b\u4f46\u5bf9\u4e8e\u524d\u4e24\u4e2a\u64cd\u4f5c\u800c\u8a00\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u9ad8\u81f3 $\\operatorname{O}(n)$\u3002  \n\n\u8fd9\u65f6\u6211\u4eec\u901a\u5e38\u4f1a\u505a\u7684\u662f\u4f18\u5316\u540e\u8005\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u5e9f\u8bdd\uff09\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u7ef4\u62a4\u8fd9\u4e00\u5e8f\u5217\u672c\u8d28\u7ef4\u62a4\u7684\u5185\u5bb9\uff08\u5927\u96fe\uff09\u3002  \n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u5176\u5b9e\u5728\u7ef4\u62a4\u7684\u662f\u6bcf\u4e00\u4e2a\u503c\u6240\u5bf9\u5e94\u201c\u4f4d\u7f6e\u201d\u7684\u6709\u5e8f\u3002\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u662f\u6539\u53d8\u4e86\u67d0\u4e9b\u5143\u7d20\u7684\u201c\u4f4d\u7f6e\u201d\uff0c\u5e76\u4f7f\u5f97\u8fd9\u4e2a\u5e8f\u5217\u6309\u7167\u201c\u4f4d\u7f6e\u201d\u91cd\u65b0\u6709\u5e8f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e $[1,n]$ \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u4e3a\u5b83\u9644\u52a0\u4e86\u4e00\u4e2a\u53eb\u505a\u201c\u4f4d\u7f6e\u201d\u7684\u5c5e\u6027\uff0c\u5e76\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6709\u5e8f\u7684\u201c\u4f4d\u7f6e\u201d\u5e8f\u5217\u3002\u800c\u6211\u4eec\u67e5\u8be2\u7684\u5185\u5bb9\u5219\u662f\u8fd9\u4e2a\u5e8f\u5217\u5f53\u4e2d\u6392\u540d\u4e3a $x$ \u7684\u5143\u7d20\u5bf9\u5e94\u7684\u503c\uff0c\u548c\u503c\u4e3a $x$ \u7684\u5143\u7d20\u5bf9\u5e94\u7684\u201c\u4f4d\u7f6e\u201d\u5728\u8fd9\u4e00\u5e8f\u5217\u4e2d\u7684\u6392\u540d\u3002\u8fd9\u6837\u770b\u6765\uff0c\u6211\u4eec\u5176\u5b9e\u53ea\u9700\u8981\u7ef4\u62a4\u201c\u4f4d\u7f6e\u201d\u5e8f\u5217\u7684\u76f8\u5bf9\u987a\u5e8f\u5c31\u884c\u4e86\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u50cf\u66b4\u529b\u7b97\u6cd5\u90a3\u6837\u6539\u53d8\u6240\u6709\u5f88\u591a\u5143\u7d20\u7684\u201c\u4f4d\u7f6e\u201d\uff0c\u800c\u53ea\u9700\u8981\u6539\u53d8\u5c11\u6570\u5143\u7d20\u7684\u201c\u4f4d\u7f6e\u201d\uff0c\u5e76\u4f7f\u5f97\u6309\u6211\u4eec\u6784\u9020\u51fa\u7684\u201c\u4f4d\u7f6e\u201d\u6392\u5e8f\u7684\u7ed3\u679c\u4e0e\u6211\u4eec\u9700\u8981\u7684\u7ed3\u679c\u76f8\u540c\u3002  \n\n\u8981\u7ef4\u62a4\u201c\u4f4d\u7f6e\u201d\u5e8f\u5217\u7684\u6709\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5e73\u8861\u6811\u3002\u5e73\u8861\u6811\u6309\u7167\u201c\u4f4d\u7f6e\u201d\u6392\u5e8f\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u201c\u4f4d\u7f6e\u201d\u6240\u5bf9\u5e94\u7684\u503c\u3002\u540c\u65f6\uff0c\u6211\u4eec\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u503c\u6240\u5bf9\u5e94\u7684\u201c\u4f4d\u7f6e\u201d\u3002\u95ee\u9898\u7684\u5173\u952e\u5c31\u8f6c\u5316\u4e3a\u4e86\u5982\u4f55\u51cf\u5c11\u64cd\u4f5c\u7684\u6b21\u6570\u3002\u7531\u4e0a\u9762\u7684\u5206\u6790\u5f97\u77e5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u201c\u4f4d\u7f6e\u201d\u5e8f\u5217\u7684\u76f8\u5bf9\u987a\u5e8f\uff0c\u5728\u5c06\u5143\u7d20\u7f6e\u9876\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u53ef\u4ee5\u53ea\u6539\u53d8\u8be5\u5143\u7d20\u7684\u201c\u4f4d\u7f6e\u201d\u4e3a\u6bd4\u5f53\u524d\u6700\u5c0f\u201c\u4f4d\u7f6e\u201d\u66f4\u5c0f\u7684\u503c\uff0c\u518d\u5c06\u5b83\u63d2\u5165\u5e73\u8861\u6811\uff1b\u540c\u7406\uff0c\u5c06\u5143\u7d20\u653e\u5230\u6700\u540e\u5b9e\u9645\u4e0a\u7b49\u4ef7\u4e8e\u5c06\u5b83\u7684\u201c\u4f4d\u7f6e\u201d\u6539\u53d8\u4e3a\u6bd4\u5f53\u524d\u6700\u5927\u201c\u4f4d\u7f6e\u201d\u66f4\u5927\u7684\u503c\u518d\u63d2\u5165\u3002\u524d\u7f6e\u548c\u540e\u7f6e\u64cd\u4f5c\u4e8b\u5b9e\u4e0a\u662f\u627e\u5230\u503c\u4e3a $x$ \u7684\u5143\u7d20\u7684\u201d\u4f4d\u7f6e\u201c\u7684\u524d\u9a71\u6216\u540e\u7ee7\uff0c\u4ea4\u6362\u4e24\u4e2a\u503c\u5bf9\u5e94\u7684\u201c\u4f4d\u7f6e\u201d\u4ee5\u53ca\u201c\u4f4d\u7f6e\u201d\u6240\u5bf9\u5e94\u7684\u503c\u3002\u800c\u5bf9\u5e94\u67e5\u8be2\u64cd\u4f5c\uff0c\u76f4\u63a5\u67e5\u8be2\u503c $x$ \u6240\u5bf9\u5e94\u7684\u201c\u4f4d\u7f6e\u201d\u7684\u6392\u540d\u6216\u201d\u4f4d\u7f6e\u201c\u6392\u540d\u4e3a $x$ \u7684\u5143\u7d20\u6240\u5bf9\u5e94\u7684\u503c\u5373\u53ef\u3002\u6bcf\u4e00\u9879\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a $\\operatorname{O}(\\log n)$\u3002\n\n## \u4ee3\u7801\n\u9996\u5148\u6ce8\u610f\u6570\u7ec4\u5927\u5c0f\u3002\u7531\u4e8e\u6211\u4eec\u5bf9\u4e8e\u524d\u4e24\u4e2a\u64cd\u4f5c\u90fd\u6d89\u53ca\u5230\u65b0\u5efa\u7ed3\u70b9\uff0c\u540c\u65f6\u521d\u59cb\u201c\u4f4d\u7f6e\u201d\u4e5f\u9700\u8981 $n$ \u4e2a\u7ed3\u70b9\u6765\u5b58\u50a8\uff0c\u6570\u7ec4\u5927\u5c0f\u5e94\u8be5\u5f00\u5230\u4e24\u500d\u3002  \n\n\u5176\u6b21\uff0c\u5982\u679c\u662f\u548c\u6211\u4e00\u6837\u5199\u4e86\u5e26\u65cb Treap\uff0c\u8bf7\u6ce8\u610f\u6839\u7ed3\u70b9\u4e0d\u4e00\u5b9a\u662f $1$\uff0c\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u90fd\u5e94\u8be5\u4ece\u6839\u7ed3\u70b9\u800c\u975e $1$ \u5f00\u59cb\u8fdb\u884c\uff08\u867d\u7136\u5927\u6982\u4e5f\u8bb8\u4f3c\u4e4e\u53ea\u6709\u6211\u4f1a\u72af\u8fd9\u79cd\u9519\u8bef\u8fd8\u5361\u4e86\u4e00\u5929\uff09\u3002  \n\n\u53c2\u7167\u4ee3\u7801\u770b\u4e0a\u9762\u7684\u89e3\u91ca\u53ef\u80fd\u4f1a\u6e05\u695a\u4e00\u70b9\uff08\u6bd5\u7adf\u6211\u8bed\u6587\u5dee\u5f97\u8981\u547d\uff09\u2026\u2026\u4e0d\u8fc7\u5e73\u8861\u6811\u7684\u64cd\u4f5c\u5b9e\u73b0\u592a\u4e11\u964b\u4e86\uff08\u96fe\uff09\u2026\u2026  \n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nint n,m,s,t,x,tot,root,temp,minn,maxn,no[300001],size[300001],priority[300001],position[300001],value[300001],child[300001][2];\nchar dir[10];\ninline void rotate(int &now,bool opt)\n{\n\tint t=child[now][opt];\n\tchild[now][opt]=child[t][opt^1];\n\tchild[t][opt^1]=now;\n\tsize[t]=size[now];\n\tsize[now]=size[child[now][0]]+size[child[now][1]]+1;\n\tnow=t;\n\treturn;\n}\nvoid insert(int &now,int x,int y)\n{\n\tif(!now)\n\t{\n\t\tnow=++tot;\n\t\tvalue[now]=x;\n\t\tpriority[now]=rand();\n\t\tno[now]=y;\n\t\tsize[now]=1;\n\t\treturn;\n\t}\n\t++size[now];\n\tif(x<value[now])\n\t{\n\t\tinsert(child[now][0],x,y);\n\t\tif(priority[child[now][0]]>priority[now])\n\t\t\trotate(now,0);\n\t}\n\telse\n\t{\n\t\tinsert(child[now][1],x,y); \n\t\tif(priority[child[now][1]]>priority[now])\n\t\t\trotate(now,1);\n\t}\n\treturn;\n}\nvoid erase(int &now,int x)\n{\n\tif(value[now]==x)\n\t{\n\t\tif(!child[now][0]||!child[now][1])\n\t\t{\n\t\t\tnow=child[now][0]+child[now][1];\n\t\t\treturn;\n\t\t}\n\t\telse if(priority[child[now][0]]>priority[child[now][1]])\n\t\t\trotate(now,0);\n\t\telse rotate(now,1);\n\t\terase(now,x);\n\t\treturn;\n\t}\n\t--size[now];\n\tif(x<value[now])\n\t\terase(child[now][0],x);\n\telse erase(child[now][1],x);\n\treturn;\n}\nvoid change(int x,int dir)\n{\n\tint now=root,res,loc;\n\tif(dir==1)\n\t\twhile(now)\n\t\t{\n\t\t\tif(x<value[now])\n\t\t\t{\n\t\t\t\tres=now;\n\t\t\t\tnow=child[now][0]; \n\t\t\t}\n\t\t\telse if(x==value[now])\n\t\t\t{\n\t\t\t\tloc=now;\n\t\t\t\tnow=child[now][1];\n\t\t\t}\n\t\t\telse now=child[now][1];\n\t\t}\n\telse while(now)\n\t\t{\n\t\t\tif(x>value[now])\n\t\t\t{\n\t\t\t\tres=now;\n\t\t\t\tnow=child[now][1]; \n\t\t\t}\n\t\t\telse if(x==value[now])\n\t\t\t{\n\t\t\t\tloc=now;\n\t\t\t\tnow=child[now][0];\n\t\t\t}\n\t\t\telse now=child[now][0];\n\t\t}\n\tswap(position[no[res]],position[no[loc]]);\n\tswap(no[res],no[loc]);\n\treturn;\n}\nint rank_of(int x)\n{\n\tint res=0,now=root;\n\twhile(now)\n\t{\n\t\tif(value[now]==x)\n\t\t{\n\t\t\tres+=size[child[now][0]]+1;\n\t\t\tbreak;\n\t\t}\n\t\telse if(value[now]<x)\n\t\t{\n\t\t\tres+=size[child[now][0]]+1;\n\t\t\tnow=child[now][1];\n\t\t}\n\t\telse now=child[now][0];\n\t}\n\treturn res;\n}\nint at(int x)\n{\n\tint sum=0,now=root;\n\twhile(now)\n\t{\n\t\tif(x==sum+size[child[now][0]]+1)\n\t\t\treturn no[now];\n\t\telse if(x>sum+size[child[now][0]]+1)\n\t\t{\n\t\t\tsum+=size[child[now][0]]+1;\n\t\t\tnow=child[now][1];\n\t\t}\n\t\telse now=child[now][0];\n\t}\n\treturn -1;\n}\nint main()\n{\n\tsrand(unsigned(time(0)));\n\tscanf(\"%d%d\",&n,&m);\n\tminn=1;\n\tmaxn=n;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d\",&x);\n\t\tinsert(root,position[x]=i,x);\n\t}\n\twhile(m--)\n\t{\n\t\tscanf(\"%s%d\",dir,&s);\n\t\tswitch(dir[0])\n\t\t{\n\t\t\tcase 'T':\n\t\t\t\terase(root,position[s]);\n\t\t\t\tinsert(root,position[s]=--minn,s);\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\terase(root,position[s]);\n\t\t\t\tinsert(root,position[s]=++maxn,s);\n\t\t\t\tbreak;\n\t\t\tcase 'I':\n\t\t\t\tscanf(\"%d\",&t);\n\t\t\t\tif(!t)\n\t\t\t\t\tcontinue;\n\t\t\t\tchange(position[s],t);\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t \tprintf(\"%d\\n\",rank_of(position[s])-1);\n\t\t\t \tbreak;\n\t\t\tdefault:\n\t\t\t\tprintf(\"%d\\n\",at(s));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1582771179,
        "uid": 67952,
        "name": "\u767d\u9c9f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "## \u5e73\u8861\u6811\u3002\u9700\u652f\u6301\u4e94\u4e2a\u64cd\u4f5c\uff1a\n\n1\u3001 \u5c06\u67d0\u5143\u7d20\u7f6e\u9876\uff1a\u5c06\u5143\u7d20\u65cb\u5230\u6839\uff0c\u7136\u540e\u5c06\u5de6\u5b50\u6811\u5408\u5e76\u5230\u8be5\u5143\u7d20\u7684\u540e\u7ee7\n\n2\u3001 \u5c06\u67d0\u5143\u7d20\u7f6e\u5e95\uff1a\u5c06\u5143\u7d20\u65cb\u5230\u6839\uff0c\u7136\u540e\u5c06\u53f3\u5b50\u6811\u5408\u5e76\u5230\u8be5\u5143\u7d20\u7684\u524d\u9a71\n\n3\u3001 \u5c06\u67d0\u5143\u7d20\u63d0\u524d/\u6ede\u540e1\u4f4d\uff1a\u76f4\u63a5\u4e0e\u8be5\u5143\u7d20\u7684\u524d\u9a71/\u540e\u7ee7\u4ea4\u6362\u4f4d\u7f6e\n\n4\u3001 \u8be2\u95ee\u6307\u5b9a\u5143\u7d20\u6392\u540d\uff1a\u5c06\u5143\u7d20\u65cb\u5230\u6839\uff0c\u8f93\u51fa\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\n\n5\u3001 \u8be2\u95ee\u6307\u5b9a\u6392\u540d\u5143\u7d20\uff1a\u6811\u4e0a\u67e5\u627e\n\n## \u6e29\u99a8\u63d0\u793a\uff1a\u5982\u679c\u6ca1\u6709\u524d\u9a71\u6216\u540e\u7ee7\u6709\u65f6\u5219\u9700\u7279\u6b8a\u5904\u7406\uff1a\n\n1. \u82e5\u65e0\u524d\u9a71\uff0c\u5219\u8bc1\u660ex\u5df2\u7ecf\u5728\u9876\u90e8\uff0c\u65e0\u9700\u989d\u5916\u64cd\u4f5c\uff0c\u76f4\u63a5return\u3002$~~~~~~~~~~~~~~~~~~~~~~~~$                  \u82e5\u65e0\u540e\u7ee7\uff0c\u5219\u8bc1\u660ex\u5728\u5e95\u90e8\uff0c\u6b64\u65f6\u53ea\u9700\u628a\u5de6\u5b50\u6811\u53d8\u4e3a\u53f3\u5b50\u6811\u5373\u53ef\u3002\n2. \u82e5\u65e0\u540e\u7ee7\uff0c\u5219\u8bc1\u660ex\u5df2\u7ecf\u5728\u5e95\u90e8\uff0c\u65e0\u9700\u989d\u5916\u64cd\u4f5c\uff0c\u76f4\u63a5return\u3002$~~~~~~~~~~~~~~~~~~~~~~~~$\n   \u82e5\u65e0\u524d\u9a71\uff0c\u5219\u8bc1\u660ex\u5728\u9876\u90e8\uff0c\u6b64\u65f6\u53ea\u9700\u628a\u53f3\u5b50\u6811\u53d8\u4e3a\u5de6\u5b50\u6811\u5373\u53ef\u3002\n3. \u82e5\u672c\u6765\u8981\u8ddf\u524d\u9a71\uff08\u540e\u7ee7\uff09\u4ea4\u6362\u4f4d\u7f6e\uff0c\u4f46\u6ca1\u6709\u524d\u9a71\uff08\u540e\u7ee7\uff09\uff0c\u5219\u4e0d\u64cd\u4f5c\u3002$~~~~~~~~~~~~~~~~~~~~~~~~$\uff08\u6570\u636e\u6b63\u786e\u5176\u5b9e\u5c31\u4e0d\u7528\u6ce8\u610f\u8fd9\u4e2a\uff09\n\n\n### \u672c\u4eba\u4ee3\u7801\u4e0e\u522b\u4eba\u6700\u4e0d\u4e00\u6837\u7684\u662f\u5c11\u4e86\u7f16\u53f7\u6620\u5c04\uff0c\u8fd9\u6837\u5176\u5b9e\u4f1a\u52a0\u901f\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define g getchar()\n#define lc tr[x].son[0]\n#define rc tr[x].son[1]\nusing namespace std;\nconst int N=8e4+10;\ninline void qr(int &x)\n{\n    char c=g;bool v=x=0;\n    while(!( ('0'<=c&&c<='9') || c=='-' ))c=g;\n    if(c=='-')v=1,c=g;\n    while('0'<=c&&c<='9')x=x*10+c-'0',c=g;\n    if(v)x=-x;\n}\ninline void write(int x)\n{\n    if(x/10)write(x/10);\n    putchar(x%10+'0');\n}\ninline void pri(int x)\n{\n\twrite(x);puts(\"\");\n}\nstruct trnode\n{\n    int c,f,son[2];\n    //\u8282\u70b9\u6570\uff0c\u7236\u4eb2\uff0c\u5b69\u5b50 \n}tr[N];int root;\nint n,m,a[N];\ninline void update(int x){tr[x].c=tr[lc].c+tr[rc].c+1;}\ninline void bt(int &x,int f,int l,int r)\n//\u6ce8\u610fx\u662f\u5f15\u7528\u3002\u5e73\u8861\u6811\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u7f16\u53f7\u4e0e\u5e8f\u5217\u4e2d\u7684\u4e00\u4e00\u5bf9\u5e94\u3002\u7f16\u53f7\u5bf9\u5e94\u5c31\u4e0d\u7528\u6620\u5c04\u5566\u3002 \n//\u9012\u5f52\u5efa\u6811\u4f1a\u66f4\u52a0\u5e73\u8861\u3002 \n{\n    if(l>r){x=0;return;}\n    int mid=(l+r)>>1;\n    x=a[mid];\n    tr[x].f=f;\n    bt(lc,x,l,mid-1);\n    bt(rc,x,mid+1,r);\n    update(x);\n}\ninline void rotate(int x,int w)\n{\n    int f=tr[x].f,ff=tr[f].f,r,R;\n    \n    r=tr[x].son[w];R=f;\n    tr[R].son[1-w]=r;\n    if(r)tr[r].f=R;\n    r=x;R=ff;\n    if(tr[R].son[0]==f)tr[R].son[0]=r;\n    else tr[R].son[1]=r;\n    tr[r].f=R;\n    r=f;R=x;\n    tr[R].son[w]=r;\n    tr[r].f=R;\n    \n    update(f);\n    update(x);\n}\ninline void splay(int x,int rt)\n{\n    while(tr[x].f!=rt)\n    {\n        int f=tr[x].f,ff=tr[f].f;\n        if(ff==rt)\n        {\n        \tif(tr[f].son[0]==x)rotate(x,1);\n        \telse rotate(x,0);\n        }\n        else\n        {\n                 if(tr[ff].son[0]==f&&tr[f].son[0]==x)rotate(f,1),rotate(x,1);\n            else if(tr[ff].son[1]==f&&tr[f].son[1]==x)rotate(f,0),rotate(x,0);\n            else if(tr[ff].son[0]==f&&tr[f].son[1]==x)rotate(x,0),rotate(x,1);\n            else if(tr[ff].son[1]==f&&tr[f].son[0]==x)rotate(x,1),rotate(x,0);//\u8fd9\u53e5\u5224\u65ad\u5176\u5b9e\u6ca1\u5565\u7528\uff0c\u76f4\u63a5else\u5c31\u591f\u4e86\u3002 \n        }\n    }\n    if(!rt)root=x;\n}\ninline int findqianqu(int x)\n{\n    x=lc;\n    while(rc)x=rc;\n    return x;\n}\ninline int findhouji(int x)\n{\n    x=rc;\n    while(lc)x=lc;\n    return x;\n}\n//1\ninline void top(int x)\n{\n    splay(x,0);if(!lc)return;//x\u672c\u6765\u5c31\u5728\u9876\u90e8 \n    if(!rc){rc=lc;lc=0;return;}//\u65e0\u540e\u7ee7\u3002 \n    int y=findhouji(x);\n    splay(y,x);\n    tr[y].son[0]=tr[x].son[0];\n    tr[tr[y].son[0]].f=y;\n    tr[x].son[0]=0;\n    update(y);\n}\n//2\ninline void bottom(int x)\n{\n    splay(x,0);if(!rc)return;//x\u672c\u6765\u5c31\u5728\u5e95\u90e8 \n    if(!lc){lc=rc;rc=0;return;}\n    int y=findqianqu(x);\n    splay(y,x);\n    tr[y].son[1]=tr[x].son[1];\n    tr[tr[y].son[1]].f=y;\n    tr[x].son[1]=0;\n    update(y);\n}\n//3\ninline void call(int x)\n{\n    tr[lc].f=x;tr[rc].f=x;\n}\ninline void ins(int x,int w)\n{\n    splay(x,0);\n    int y;\n    if(w==-1)//\u8ddf\u524d\u9a71\u4ea4\u6362 \n    {\n        if(!lc)return;//\u65e0\u524d\u9a71\n        y=findqianqu(x);\n        splay(y,x);\n        swap(tr[x].son[1],tr[y].son[1]);\n        tr[x].son[0]=tr[y].son[0]; tr[y].son[0]=x;\n    }\n    else//\u8ddf\u540e\u7ee7\u4ea4\u6362 \n    {\n        if(!rc)return;//\u65e0\u540e\u7ee7\n        y=findhouji(x);\n        splay(y,x);\n        swap(tr[x].son[0],tr[y].son[0]);\n        tr[x].son[1]=tr[y].son[1];tr[y].son[1]=x;\n    }\n    call(x);call(y);\n    swap(tr[x].c,tr[y].c);\n    root=y;tr[y].f=0; \n}\n//4\ninline int find_rank(int x){splay(x,0);return tr[lc].c;}\n//5\ninline int findnum(int k)\n{\n    int x=root;\n    while(1)\n    {\n        if(tr[lc].c>=k)x=lc;\n        else if(tr[lc].c+1>=k)break;\n        else k-=tr[lc].c+1,x=rc;\n    }\n    return x;\n}\nint main()\n{\n    qr(n);qr(m);\n    for(int i=1;i<=n;i++)qr(a[i]);\n    bt(tr[0].son[0],0,1,n);root=tr[0].son[0];tr[0].son[0]=0;//0\u4e0d\u80fd\u6709\u5b69\u5b50 \n    while(m--)\n    {\n        char s[21];int x,y;\n        scanf(\"%s\",s);qr(x);\n        if(s[0]=='T')top(x);\n        else if(s[0]=='B')bottom(x);\n        else if(s[0]=='I')\n        {\n            qr(y);\n\t\t\tif(y!=0)ins(x,y);\n        }\n        else if(s[0]=='A')pri(find_rank(x));\n        else pri(findnum(x));\n    }\n    return 0;\n}\n```\n",
        "postTime": 1563426067,
        "uid": 118826,
        "name": "2018LZY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "## \u601d\u8def\n\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u65b0\u601d\u8def\uff0c\u4e0d\u540c\u4e8e\u5b50\u6811\u5408\u5e76\u3002\u867d\u7136\u6548\u7387\u4f1a\u4f4e\u4e00\u4e9b\uff0c\u4f46\u590d\u6742\u5ea6\u662f\u5bf9\u7684\n\n\u6211\u4eec\u865a\u62df\u4e00\u4e2a\u8282\u70b9\u9ad8\u5ea6\uff0c\u628a\u9ad8\u5ea6\u4f5c\u4e3a\u6570\u5217\u8fdb\u884c\u7ef4\u62a4\n\n\u5176\u5b9e\u5f88\u597d\u60f3\n\n\nT\uff1a\u5220\u9664\u7f16\u53f7\u4e3aS\u7684\u4e66\uff0c\u63d2\u5165\u4e00\u4e2a\u865a\u62df\u9ad8\u5ea6\u4e3a\u5f53\u524d\u6700\u5c0f\u4e14\u7f16\u53f7\u4e3aS\u7684\u4e66\n\nB\uff1a\u540cT\uff0c\u63d2\u5165\u865a\u62df\u9ad8\u5ea6\u4e3a\u5f53\u524d\u6700\u5927\n\nI\uff1a\u4ea4\u6362\u524d\u9a71\u6216\u540e\u7ee7\u7684\u4fe1\u606f\n\nA\uff1a\u67e5\u8be2rank\n\nQ\uff1a\u67e5\u8be2kth\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define inf 0x3f3f3f3f\nusing namespace std;\nconst int maxn=1000000+100;\nint ch[maxn][2],fa[maxn],size[maxn],cnt[maxn],id[maxn],val[maxn],pos[maxn];\nchar op[10];\n//id\u8868\u793a\u8282\u70b9\u7f16\u53f7\uff0cval\u8868\u793a\u8282\u70b9\u865a\u62df\u9ad8\u5ea6,pos\u8868id\u6240\u5728\u4f4d\u7f6e \nint root,ncnt;\nint mi,mx;\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid output(int u=root)\n{\n    if(ch[u][0])output(ch[u][0]);\n    if(val[u]==inf||val[u]==-inf)return;\n    printf(\"%d \",id[u]);\n    if(ch[u][1])output(ch[u][1]);\n}\nvoid pushup(int u)\n{\n    size[u]=size[ch[u][0]]+size[ch[u][1]]+cnt[u];\n}\nint chk(int u)\n{\n    return ch[fa[u]][1]==u;\n}\nvoid rotate(int u)\n{\n    int f=fa[u],ff=fa[f],k=chk(u),s=ch[u][k^1];\n    ch[f][k]=s,fa[s]=f;\n    ch[ff][chk(f)]=u,fa[u]=ff;\n    ch[u][k^1]=f,fa[f]=u;\n    pushup(u),pushup(f);\n}\nvoid splay(int u,int goal=0)\n{\n    while(fa[u]!=goal)\n    {\n        int f=fa[u],ff=fa[f];\n        if(ff!=goal)\n        {\n            if(chk(u)==chk(f))rotate(f);\n            else rotate(u);\n        }\n        rotate(u);\n    }\n    if(!goal)root=u;\n}\nvoid insert(int x,int y)\n{\n    int u=root,f=0;\n    while(u&&val[u]!=x)\n    f=u,u=ch[u][x>val[u]];\n    u=++ncnt;\n    if(f)ch[f][x>val[f]]=u;\n    fa[u]=f,val[u]=x,id[u]=y,pos[y]=u;\n    size[u]=cnt[u]=1;\n    ch[u][0]=ch[u][1]=0;\n    splay(u);\n} \nint kth(int k)\n{\n    int u=root;\n    while(1)\n    {\n        if(ch[u][0]&&k<=size[ch[u][0]])\n        u=ch[u][0];\n        else if(k>size[ch[u][0]]+cnt[u])\n        k-=size[ch[u][0]]+cnt[u],u=ch[u][1];\n        else return u; \n    }\n}\nint ask(int x)\n{\n    splay(pos[x]);\n    return size[ch[root][0]]-1;\n}\nint pre(int u)\n{\n    splay(u);\n    u=ch[root][0];\n    while(ch[u][1])u=ch[u][1];\n    return u;\n}\nint succ(int u)\n{\n    splay(u);\n    u=ch[root][1];\n    while(ch[u][0])u=ch[u][0];\n    return u;\n}\nvoid remove(int u)\n{\n    int last=pre(u),next=succ(u);\n    splay(last),splay(next,last);\n    ch[next][0]=0;\n}\nvoid top(int s)\n{\n    remove(pos[s]);\n    insert(--mi,s);\n}\nvoid bottom(int s)\n{\n    remove(pos[s]);\n    insert(++mx,s);\n}\nvoid change(int u,int o)\n{\n\tint now=pos[u];\n    if(o==1)\n    {\n        int next=succ(now);\n        if(!id[next])return;\n        pos[u]=next,pos[id[next]]=now;//\u51fa\u9519\u51e0\u6b21\u6b7b\u5728\u8fd9\u91cc\n        swap(id[now],id[next]);\n    }\n    if(o==-1)\n    {\n        int last=pre(now);\n        if(!id[last])return;\n        pos[u]=last,pos[id[last]]=now;\n        swap(id[now],id[last]);\n    } \n}\n\nint main()\n{\n    insert(inf,0),insert(-inf,0);\n    int n=read(),m=read();\n    mi=0,mx=n+1;\n    for(int i=1;i<=n;i++)\n    insert(i,read());\n    for(int i=1;i<=m;i++)\n    {\n        cin>>op;\n        if(op[0]=='T'){int x=read();top(x);}\n        if(op[0]=='B'){int x=read();bottom(x);}\n        if(op[0]=='I'){int x=read(),y=read();change(x,y);}\n        if(op[0]=='A'){int x=read();printf(\"%d\\n\",ask(x));}\n        if(op[0]=='Q'){int x=read();printf(\"%d\\n\",id[kth(x+1)]);} \n    }\n    return 0;\n}\n```\n\u4e3b\u8981\u662f\u56e0\u4e3a\u592a\u84bb\uff0c~~\u4e00\u7bc7\u9898\u89e3\u4e5f\u6ca1\u770b\u61c2~~",
        "postTime": 1558660401,
        "uid": 58707,
        "name": "Edward_Elric",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u7ec3\u5e73\u8861\u6811\u7684\u597d\u9898~~\u7136\u800c\u5bf9\u6211\u4e0d\u662f~~\u3002\u3002\u3002\n\n\u89c2\u5bdf\u9898\u76ee\u53ef\u77e5\uff0c\u9898\u76ee\u4e2d\u7ed9\u7684\u64cd\u4f5c\u53ea\u6709\u4e24\u79cd\uff1a\n1. \u628a\u4e66\u653e\u5230\u6700\u524d\u6216\u6700\u540e \n2. \u628a\u4e66\u4e0e\u76f8\u90bb\u7684\u4e66\u4ea4\u6362\u4f4d\u7f6e\u3002\n\n# \u4e8e\u662f\u849f\u84bb\u60f3\u51fa\u4e86\u4e00\u79cd~~\u6df7\u5206\u7684~~\u597d\u529e\u6cd5\u3002\n\n\u521a\u5f00\u59cb\u5c06\u6574\u4e2a\u5e8f\u5217\u4ece\u4e0b\u6807\u4e3ai+m\u63d2\u5165\u5e73\u8861\u6811\uff0c\u5e76\u4e14\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4\u3002\n\nf[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u4e66\u5728\u5e73\u8861\u6811\u4e2d\u6240\u5bf9\u5e94\u7684\u503c\uff08\u76f8\u5f53\u4e8e\u8fd9\u672c\u4e66\u7684\u5173\u952e\u7801\uff09\u3002\n\ng[i]\u8868\u793a\u503ci\u6240\u5bf9\u5e94\u7684\u4e66\u7684\u7f16\u53f7\u3002\n\n\u540c\u65f6\u6211\u4eec\u8fd8\u8981\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf\uff0c\u5206\u522b\u4e3aminn\uff1a\u8868\u793a\u5e73\u8861\u6811\u4e2d\u6700\u5c0f\u7684\u6743\u503c\uff0cmaxx\uff1a\u8868\u793a\u5e73\u8861\u6811\u4e2d\u6700\u5927\u7684\u6743\u503c\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u6709\uff1a\n\nTop i\uff1a\u5c06\u7f16\u53f7\u4e3ai\u7684\u4e66\u5728\u5e73\u8861\u6811\u4e2d\u6240\u5bf9\u5e94\u7684\u6743\u503cf[i]\u5220\u9664\uff0c\u540c\u65f6minn--,insert(minn)\uff1b\n\nf[i]=minn\uff0c\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u4e66\u5728\u5e73\u8861\u6811\u4e2d\u6240\u5bf9\u5e94\u7684\u503c\u4e3aminn\uff0c\n\ng[minn]=i\uff0c\u8868\u793aminn\u8fd9\u4e2a\u6743\u503c\u6240\u5bf9\u5e94\u7684\u4e66\u7684\u7f16\u53f7\u4e3ai\uff1b\n\n### \u8fd9\u6837\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5728\u5e73\u8861\u6811\u4e2d\u6309\u6743\u503c\u6392\u5e8f\u540e\uff0c\u6700\u5c0f\u7684\u6743\u503c\u6240\u5bf9\u5e94\u7684\u4e66\u5c31\u662f\u6211\u4eec\u8981\u6267\u884cTop\u64cd\u4f5c\u7684\u4e66i,\u8fd9\u6837\u5b50\u6211\u4eec\u5c31\u8fbe\u5230\u4e86\u628a\u4e66i\u7684\u6392\u540d\u6539\u4e3a\u7b2c\u4e00\u540d\u7684\u76ee\u7684!\n\n------------\n\n\u4e0e\u6b64\u76f8\u540c\uff0cBottom i\uff1a\u5c06\u7f16\u53f7\u4e3ai\u7684\u4e66\u5728\u5e73\u8861\u6811\u4e2d\u6240\u5bf9\u5e94\u7684\u6743\u503cf[i]\u5220\u9664\uff0c\u540c\u65f6maxx++,insert(maxx);\n\nf[i]=maxx\uff0c\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u4e66\u5728\u5e73\u8861\u6811\u4e2d\u6240\u5bf9\u5e94\u7684\u503c\u4e3amaxx\uff0c\n\ng[maxx]=i\uff0c\u8868\u793amaxx\u8fd9\u4e2a\u6743\u503c\u6240\u5bf9\u5e94\u7684\u4e66\u7684\u7f16\u53f7\u4e3ai\uff1b\n\n\u8fd9\u6837\u5c31\u8fbe\u5230\u4e86\u4e66i\u6240\u5bf9\u5e94\u7684\u6392\u540d\u6539\u4e3a\u6700\u540e\u4e00\u540d\u7684\u76ee\u7684\uff01\n\n------------\nInsert S T:\u663e\u800c\u6613\u89c1\uff0c\u5f53T\u7b49\u4e8e0\uff0c\u76f4\u63a5continue\uff1b\n\n\u5f53T\u4e0d\u7b49\u4e8e0:\n1. \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u672c\u4e66\u7684\u7f16\u53f7,\u5c31\u627e\u5230\u8fd9\u672c\u4e66\u5728\u5e73\u8861\u6811\u4e2d\u7684\u6392\u540dnow=get_rank(f[S])\uff1b\n\n2. \u518d\u627e\u5230\u6392\u540d\u4e3anow+T\u7684\u4e66\uff0c\u8bbe\u8fd9\u672c\u4e66\u4e3aR\uff0c\u5219\u8fd9\u672c\u4e66\u7684\u6392\u540dnow1=now+T\uff0c\u6240\u5bf9\u5e94\u7684\u6743\u503cnow2=get_val(now1),\u6240\u4ee5\u8fd9\u672c\u4e66\u7684\u7f16\u53f7R=g[now2];\n\n3. \u4e4b\u540e\u6211\u4eec\u9700\u8981\u4ea4\u6362\u8fd9\u4e24\u672c\u4e66\u7684\u6392\u540d\uff0c _\u76f4\u63a5\u5c06\u8fd9\u4e24\u672c\u4e66\u7684f\u6570\u7ec4\u4e0eg\u6570\u7ec4\u4ea4\u6362_ \uff0c\u5c31\u53ef\u4ee5\u8fbe\u5230\u4ea4\u6362\u8fd9\u4e24\u672c\u4e66\u6392\u540d\u7684\u76ee\u7684\u3002\uff08\u5373\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e24\u672c\u4e66\u6240\u5bf9\u5e94\u7684\u6743\u503cf[]\u4ea4\u6362\uff0c\u5728\u5e73\u8861\u6811\u4e2d\u6392\u5e8f\u540e\u6392\u540d\u81ea\u7136\u5c31\u4ea4\u6362\u4e86\uff09\n\n------------\n\nAsk i:\u67e5\u8be2\u7f16\u53f7\u4e3ai\u7684\u4e66\u7684\u6392\u540d-1\uff0c\u76f4\u63a5\u8f93\u51faget_rank(f[i])-1\u3002\n\n------------\nQuery i:\u67e5\u8be2\u7b2ci\u672c\u4e66\u7684\u7f16\u53f7\uff0c\u76f4\u63a5\u8f93\u51fag[get_val(i)]\u5373\u53ef\u3002\n\n\n### \u56e0\u4e3an,m<=80000\uff0c\u6240\u4ee5g\u6570\u7ec4\u6700\u5927\u4e5f\u5c31\u53ea\u6709m*3=240000\uff0c\u80af\u5b9a\u591f\u7528\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5e73\u8861\u6811\u5c31\u53ef\u4ee5\u6c34\u8fc7\u53bb\u5566\uff01\n\n```c\n#include<cstdio>\n#include<algorithm>\nstruct sb{\n    int l,r,val,size,key;\n}s[500010];\nint n,tot,root,seed=666,m;\nint f[250010],g[550010];\nint minn,maxx;\ninline int rand_(){\n    return seed=(int)(seed*482711ll%2147483647);\n}\ninline int newnode(int val){\n    s[++tot].size=1;\n    s[tot].val=val;\n    s[tot].key=rand_();\n    return tot;\n}\ninline void update(int x){\n    s[x].size=s[s[x].l].size+s[s[x].r].size+1;\n}\nvoid split(int now,int &a,int &b,int val){\n    if(now==0){\n        a=b=0;\n        return;\n    }\n    if(s[now].val<=val){\n        a=now;\n        split(s[now].r,s[a].r,b,val);\n    }\n    else {\n        b=now;\n        split(s[now].l,a,s[b].l,val);\n    }\n    update(now);\n}\nvoid merge(int &now,int a,int b){\n    if(a==0||b==0){\n        now=a+b;\n        return;\n    }\n    if(s[a].key<s[b].key){\n        now=a;\n        merge(s[now].r,s[a].r,b);\n    }\n    else {\n        now=b;\n        merge(s[now].l,a,s[b].l);\n    }\n    update(now);\n}\nint find(int now,int rank){\n    while(s[s[now].l].size+1!=rank){\n        if(s[s[now].l].size>=rank){\n            now=s[now].l;\n        }\n        else {\n            rank-=(s[s[now].l].size+1);\n            now=s[now].r;\n        }\n    }\n    return s[now].val;\n}\ninline void insert(int val){\n    int x=0,y=0,z;\n    z=newnode(val);\n    split(root,x,y,val);\n    merge(x,x,z);\n    merge(root,x,y);\n}\ninline void delet(int val){\n    int x=0,y=0,z=0;\n    split(root,x,y,val);\n    split(x,x,z,val-1);\n    merge(z,s[z].l,s[z].r);\n    merge(x,x,z);\n    merge(root,x,y);\n}\ninline int get_rank(int val){\n    int x=0,y=0;\n    int ans;\n    split(root,x,y,val-1);\n    ans=s[x].size+1;\n    merge(root,x,y);\n    return ans;\n}\ninline int get_val(int rank){\n    return find(root,rank);\n}\nint get_pre(int val){\n    int x=0,y=0;\n    int ans;\n    split(root,x,y,val-1);\n    ans=find(x,s[x].size);\n    merge(root,x,y);\n    return ans;\n}\nint get_next(int val){\n    int x=0,y=0;\n    split(root,x,y,val);\n    int ans=find(y,1);\n    merge(root,x,y);\n    return ans;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    minn=m;\n    maxx=n+m+1;\n    for(register int i=1;i<=n;i++){\n        int x;\n        scanf(\"%d\",&x);\n        insert(i+m);\n        g[i+m]=x;\n        f[x]=i+m;\n    }\n    for(register int i=1;i<=m;i++){\n        char ch[10];\n        scanf(\"%s\",ch);\n        if(ch[0]=='Q'){\n            int x;\n            scanf(\"%d\",&x);\n            int now=get_val(x);\n            printf(\"%d\\n\",g[now]);\n        }\n        else if(ch[0]=='T'){\n            int x;\n            scanf(\"%d\",&x);\n            delet(f[x]);\n            f[x]=minn;\n            insert(f[x]);\n            g[minn--]=x;\n        }\n        else if(ch[0]=='B'){\n            int x;\n            scanf(\"%d\",&x);\n            delet(f[x]);\n            f[x]=maxx;\n            insert(f[x]);\n            g[maxx++]=x;\n        }\n        else if(ch[0]=='I'){\n            int x,y;\n            scanf(\"%d%d\",&x,&y);\n            if(y==0)continue;\n            int now=get_rank(f[x]);\n            int now1=now+y;\n            int now2=get_val(now1);\n            int now3=g[now2];\n            register int t=g[f[x]];\n            g[f[x]]=g[f[now3]];\n            g[f[now3]]=t;\n            t=f[x];\n            f[x]=f[now3];\n            f[now3]=t;\n        }\n        else if(ch[0]=='A'){\n            int x;\n            scanf(\"%d\",&x);\n            int now=get_rank(f[x]);\n            printf(\"%d\\n\",now-1);\n        }\n    }\n    return 0;\n}\n```\n\n\n\u849f\u84bb\u592a\u5f31\u4e86\uff0c\u8bb2\u7684\u4e0d\u592a\u597d\uff0c\u5404\u4f4d\u5927\u4f6c\u5982\u6709\u610f\u89c1\u6b22\u8fce\u6307\u51fa\uff1b\n\n### \u5b8c\u7ed3\u6492\u82b1\uff01\uff01\uff08\u6211\u6c38\u8fdc\u559c\u6b22FHQ~\uff09\n",
        "postTime": 1555203812,
        "uid": 113022,
        "name": "zyj578335934",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u7528\u5c0f\u4f17\u7684WBLT\u5b9e\u73b0\u7684\u8fd9\u9053\u9898\n\n\u5b9a\u4e49\u4f18\u5148\u7ea7\u8d8a\u5c0f\uff0c\u90a3\u672c\u4e66\u5c31\u653e\u8d8a\u4e0a\u9762\n\n\u8bbe$a_i$\u4e3a\u7f16\u53f7\u4e3a$i$\u7684\u4e66\u672c\u7684\u4f18\u5148\u7ea7\uff0c$mapp_i$\u4e3a\u4f18\u5148\u7ea7\u4e3ai\u7684\u8282\u70b9\u7f16\u53f7\u3002\n\nTop S:\u5c06\u4f18\u5148\u7ea7\u53d8\u4e3a\u6700\u5c0f\u518d\u63d2\u5165\n\nBottom S\uff1a\u5c06\u4f18\u5148\u7ea7\u53d8\u4e3a\u6700\u5927\u518d\u63d2\u5165\n\nInsert S T\uff1a\u627e\u5230\u5bf9\u5e94\u4e24\u672c\u4e66 \u4ea4\u6362\u4f18\u5148\u7ea7\n\nAsk S\uff1a\u67e5\u8be2\u4f18\u5148\u7ea7\u6392\u540d\n\nQuery S\uff1a\u67e5\u8be2\u7b2ck\u5c0f\u7684\u4f18\u5148\u7ea7\u5bf9\u5e94\u7684\u7f16\u53f7\n\n\u7136\u540e\u5c31\u662f\u88f8\u7684\u5e73\u8861\u6811\u9898\u4e86\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<map>\n\nusing namespace std;\n\nconst int maxn=400010;\nconst int ratio=5;\n\ninline int read(){\n    register int Num=0,flag=1;char ch;\n    while((ch=getchar())<'0'||ch>'9') if(ch=='-') break;\n    if(ch=='-') flag=-1; else Num=ch-'0';\n    while((ch=getchar())>='0'&&ch<='9') Num=Num*10+ch-'0';\n    return Num*flag; \n}\ninline void out(int x){\n    if(x>=10) out(x/10);\n    putchar(x%10+'0');\n}\n\nint n,m,cnt,fa,root;\nint size[maxn],ls[maxn],rs[maxn],val[maxn],a[maxn];\nint mapp[maxn];\n\ninline void newnode(int &cur,int v) {\n    cur=++cnt;\n    size[cur]=1;\n    val[cur]=v;\n}\n\ninline void copynode(int x,int y) {\n    size[x]=size[y];\n    ls[x]=ls[y],rs[x]=rs[y];\n    val[x]=val[y];\n}\n\ninline void merge(int l,int r) {\n    size[++cnt]=size[l]+size[r];\n    val[cnt]=val[r];\n    ls[cnt]=l,rs[cnt]=r;\n}\n\ninline void rotate(int cur,bool flag) {\n    if(flag) {\n        merge(ls[cur],ls[rs[cur]]);\n        ls[cur]=cnt;\n        rs[cur]=rs[rs[cur]];\n    } else {\n        merge(rs[ls[cur]],rs[cur]);\n        rs[cur]=cnt;\n        ls[cur]=ls[ls[cur]];\n    }\n}\n\ninline void maintain(register int cur) {\n    if(size[ls[cur]]>size[rs[cur]]*ratio)\n        rotate(cur,0);\n    else if(size[rs[cur]]>size[ls[cur]]*ratio)\n        rotate(cur,1);\n}\n\ninline void pushup(int cur) {\n    if(!size[ls[cur]])return ;\n    size[cur]=size[ls[cur]]+size[rs[cur]];\n    val[cur]=val[rs[cur]];\n}\n\ninline int minn(int a,int b) {\n    return a<b?a:b;\n}\ninline int maxx(int a,int b) {\n    return a>b?a:b;\n}\n\ninline void insert(int cur,int x) {\n    if(size[cur]==1) {\n        newnode(ls[cur],minn(x,val[cur]));\n        newnode(rs[cur],maxx(x,val[cur]));\n        pushup(cur);\n        return ;\n    }\n    maintain(cur);\n    insert(x>val[ls[cur]]?rs[cur]:ls[cur],x);\n    pushup(cur);\n}\n\ninline void erase(int cur,int x) {\n    if(size[cur]==1) {\n        cur= ls[fa]==cur?rs[fa]:ls[fa];\n        copynode(fa,cur);\n        return ;\n    }\n    maintain(cur);\n    fa=cur;\n    erase(x>val[ls[cur]]?rs[cur]:ls[cur],x);\n    pushup(cur);\n}\n\ninline int find(int cur,int x) {\n    if(size[cur]==x)\n        return val[cur];\n    maintain(cur);\n    if(x>size[ls[cur]])\n        return find(rs[cur],x-size[ls[cur]]);\n    return find(ls[cur],x);\n}\n\ninline int rnk(int cur,int x) {\n    if(size[cur]==1)\n        return 1;\n    maintain(cur);\n    if(x>val[ls[cur]])\n        return rnk(rs[cur],x)+size[ls[cur]];\n    return rnk(ls[cur],x);\n}\n\nchar opt[20];\nint k,l,r,i;\n\nint main() {\n    n=read();\n    m=read();\n    newnode(root,(1<<30));\n    l=233333,r=n+233333;\n    for(i=1; i<=n; i++) {\n        int qaq;\n        qaq=read();\n        insert(root,i+233333);\n        a[qaq]=i+233333;\n        mapp[i+233333]=qaq;\n    }\n    while(m--) {\n        scanf(\"%s\",opt);\n        if(opt[0]=='Q') {\n            k=read();\n            out(mapp[find(root,k)]);\n            putchar('\\n');\n        } else if(opt[0]=='A') {\n            k=read();\n            out(rnk(root,a[k])-1);\n            putchar('\\n');\n        } else if(opt[0]=='T') {\n            k=read();\n            erase(root,a[k]);\n            insert(root,--l);\n            a[k]=l;\n            mapp[l]=k;\n        } else if(opt[0]=='B') {\n            k=read();\n            erase(root,a[k]);\n            insert(root,++r);\n            a[k]=r;\n            mapp[r]=k;\n        } else if(opt[0]=='I') {\n            register int s=read(),t=read();\n            if(t==1) {\n                int rnk2=rnk(root,a[s]),rnk1=rnk2+1;//\u4f18\u5148\u7ea7\u6392\u540d\n                int s2=find(root,rnk1);\n                s2=mapp[s2];\n                erase(root,a[s]);\n                erase(root,a[s2]);\n                swap(a[s],a[s2]);\n                mapp[a[s]]=s;\n                mapp[a[s2]]=s2;\n                insert(root,a[s]);\n                insert(root,a[s2]);\n            } else if(t==-1) {\n                int rnk2=rnk(root,a[s]),rnk1=rnk2-1;//\u4f18\u5148\u7ea7\u6392\u540d\n                int s2=find(root,rnk1);\n                s2=mapp[s2];\n                erase(root,a[s]);\n                erase(root,a[s2]);\n                swap(a[s],a[s2]);\n                mapp[a[s]]=s;\n                mapp[a[s2]]=s2;\n                insert(root,a[s]);\n                insert(root,a[s2]);\n            }\n        }\n\n    }\n}\n```",
        "postTime": 1548145739,
        "uid": 45443,
        "name": "codesonic",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "[Welcome to my Blog](https://zcdhj.org)\n\nSplay \u5165\u95e8\u597d\u9898\u3002\n\n\u6211\u7adf\u7136 1A \u4e86\uff0c\u611f\u52a8\n\n\u5bf9\u4e8e `Top` \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 $S$ \u5220\u53bb\uff0c\u518d\u63d2\u5165\u5230 Splay \u7684\u6700\u5de6\u7aef\uff0c`Bottom`\u64cd\u4f5c\u540c\u7406\u3002`Insert`\u64cd\u4f5c\u5c31\u662f\u4ea4\u6362 $S$ \u4e0e\u524d\u9a71/\u540e\u7ee7\u7684\u4f4d\u7f6e\u3002\n\n\u4f46\u662f\u8fd9\u91cc Splay \u7ef4\u62a4\u7684\u662f\u4e00\u68f5\u533a\u95f4\u6811\uff0c\u4e0d\u597d\u627e\u5230 $S$ \u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u7528 $n$ \u4e2a\u6307\u9488\u5b58\u6bcf\u4e2a\u6570\u7684\u4f4d\u7f6e\u3002\n\n\u5e0c\u671b\u8fd9\u91cc\u7684\u4ee3\u7801\u5bf9\u6307\u9488\u515a\u6709\u5e2e\u52a9 qwq\n\n```cpp\n#include <iostream>\n#include <cstdio>\n\nconst int MAXN = 8e4;\n\nint n, m;\nint a[MAXN | 1];\n\ninline int read() {\n\tregister int x = 0, v = 1;\n\tregister char ch = getchar();\n\twhile(!isdigit(ch)) { if(ch == '-') v = -1; ch = getchar(); }\n\twhile(isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }\n\treturn x * v;\n}\n\nnamespace Splay {\n\tstruct Splay {\n\t\tint val, size;\n\t\tSplay *ch[2], *father;\n\t\tSplay() {}\n\t\tSplay(int _val, Splay *_father) : val(_val), size(1), father(_father) { ch[0] = ch[1] = NULL; }\n\t} *root, *pos[MAXN | 1]; // \u8fd9\u91cc\u7684 pos \u5b58\u7684\u5c31\u662f\u6bcf\u4e2a\u6570\u7684\u4f4d\u7f6e\n\tinline int size(Splay *o) { return o == NULL ? 0 : o -> size; }\n\tinline int whichSon(Splay *o) { return o -> father == NULL ? 0 : o -> father -> ch[1] == o; }\n\tinline void pushup(Splay *o) { o -> size = 1 + size(o -> ch[0]) + size(o -> ch[1]); }\n\tinline void connect(Splay *x, Splay *y, int which) {\n\t\tif(x) x -> father = y;\n\t\tif(y) y -> ch[which] = x;\n\t\telse root = x;\n\t}\n\tinline void rotate(Splay *o) { \n\t\tSplay *p = o -> father, *q = p -> father;\n\t\tint which = whichSon(o);\n\t\tconnect(o, q, whichSon(p));\n\t\tconnect(o -> ch[which ^ 1], p, which);\n\t\tconnect(p, o, which ^ 1);\n\t\tpushup(p);\n \t}\n \tinline void splay(Splay *o, Splay *goal = NULL) {\n \t\twhile(o -> father != goal) {\n \t\t\tSplay *p = o -> father, *q = p -> father;\n \t\t\tq != goal ? rotate(whichSon(o) ^ whichSon(p) ? o : p) : rotate(o);\n \t\t}\n \t\tpushup(o);\n \t}\n \tinline void remove(int x) {\n \t\tsplay(pos[x]);\n \t\tSplay *o = root;\n \t\tif(o -> ch[0] == NULL) {\n \t\t\troot = o -> ch[1];\n \t\t\tif(root) root -> father = NULL;\n \t\t\tdelete o;\n \t\t} else {\n \t\t\tSplay *tmp = root -> ch[0];\n \t\t\twhile(tmp -> ch[1]) tmp = tmp -> ch[1];\n \t\t\tsplay(tmp, root);\n \t\t\troot = tmp;\n \t\t\tconnect(o -> ch[1], root, 1);\n \t\t\troot -> father = NULL;\n \t\t\tdelete o;\n \t\t}\n \t}\n \tinline void Top(int x) {\n \t\tremove(x);\n \t\tSplay *o = root;\n \t\twhile(o -> ch[0]) o = o -> ch[0];\n \t\to -> ch[0] = new Splay(x, o);\n \t\tpos[x] = o -> ch[0];\n \t\tsplay(o -> ch[0]);\n \t}\n \tinline void Bottom(int x) {\n \t\tremove(x);\n \t\tSplay *o = root;\n \t\twhile(o -> ch[1]) o = o -> ch[1];\n \t\to -> ch[1] = new Splay(x, o);\n \t\tpos[x] = o -> ch[1];\n \t\tsplay(o -> ch[1]);\n \t}\n \tinline void Insert(int val, int opt) {\n \t\tif(opt == 0) return;\n \t\telse if(opt == -1) {\n \t\t\tsplay(pos[val]);\n \t\t\tSplay *o = root -> ch[0];\n \t\t\tif(o == NULL) return;\n \t\t\twhile(o -> ch[1]) o = o -> ch[1];\n \t\t\tstd::swap(pos[val], pos[o -> val]);\n \t\t\tstd::swap(root -> val, o -> val);\n \t\t} else {\n \t\t\tsplay(pos[val]);\n \t\t\tSplay *o = root -> ch[1];\n \t\t\tif(o == NULL) return;\n \t\t\twhile(o -> ch[0]) o = o -> ch[0];\n \t\t\tstd::swap(pos[val], pos[o -> val]);\n \t\t\tstd::swap(root -> val, o -> val);\n \t\t}\n \t}\n \tinline int Ask(int x) {\n \t\tsplay(pos[x]);\n \t\treturn size(root -> ch[0]);\n \t}\n \tinline int Query(int k) {\n \t\tSplay *o = root;\n \t\twhile(1) {\n \t\t\tif(size(o -> ch[0]) < k && size(o -> ch[0]) + 1 >= k) return o -> val;\n \t\t\telse if(size(o -> ch[0]) >= k) o = o -> ch[0];\n \t\t\telse {\n \t\t\t\tk -= size(o -> ch[0]) + 1;\n \t\t\t\to = o -> ch[1];\n \t\t\t}\n \t\t}\n \t}\n \tvoid build(Splay *&o = root, Splay *fa = NULL, int l = 1, int r = n) {\n \t\tif(l > r) return;\n \t\tint mid = (l + r) >> 1;\n \t\to = new Splay(a[mid], fa);\n \t\tpos[a[mid]] = o;\n \t\tbuild(o -> ch[0], o, l, mid - 1);\n \t\tbuild(o -> ch[1], o, mid + 1, r);\n \t\tpushup(o);\n \t}\n}\n\nint main() {\n\tn = read(); \n\tm = read();\n\tfor(int i = 1; i <= n; ++i) a[i] = read();\n\tSplay::build();\n\twhile(m--) {\n\t\tchar opt[10];\n\t\tscanf(\"%s\", opt);\n\t\tif(*opt == 'T') Splay::Top(read());\n\t\telse if(*opt == 'B') Splay::Bottom(read());\n\t\telse if(*opt == 'I') {\n\t\t\tint a = read(), b = read();\n\t\t\tSplay::Insert(a, b);\n\t\t} else if(*opt == 'A') printf(\"%d\\n\", Splay::Ask(read()));\n\t\telse printf(\"%d\\n\", Splay::Query(read()));\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1543721885,
        "uid": 24878,
        "name": "iodwad",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "### \u4e0d\u662f\u4f18\u79c0\u7684\u505a\u6cd5\uff0c\u5f00O2\u624d\u80fd\u8fc7\u3002\n### \u4e3b\u8981\u662f\u60f3\u8981\u63d0\u4f9b\u4e00\u70b9\u65b0\u601d\u8def\uff0c\u4ee5\u53ca\u7ec3\u4e60STL\u7684\u4f7f\u7528\u3002\n\n------------\n\n\u8bf4\u6765\u60ed\u6127\uff0c\u770b\u5230\u8fd9\u9053\u9898\u7684\u7b2c\u4e00\u53cd\u5e94\u5c31\u662f\u7528vector\u6c34\u8fc7\u3002\n\n~~\u52a0\u4e86\u4e2a\u5feb\u8bfb\u8fd8\u6709\u4e00\u4e9b\u6ca1\u5565\u5375\u7528\u7684\u5934\u6587\u4ef6\u624d50\u591a\u884c\u3002~~\n\n\u6012\u4ea4\u4e00\u53d1T\u5230\u4e8630\u5206\uff0c\u5f00O2\u52c9\u5f3a\u8fc7\uff08\u6700\u4f18\u89e3\u5012\u6570\u7b2c\u4e8c\u540d\uff09\u3002\n\n\u4e0d\u8fc7\u8fd9\u4e48\u77ed\u7684\u4ee3\u7801\u91cf\u548c\u4e0d\u80fd\u518d\u7b80\u5355\u7684\u601d\u7ef4\u3002\u3002\u3002\u6162\u4e00\u70b9\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u561b\u3002\u3002\u3002\n\n------------\n\n#### \u5199\u8fd9\u7bc7\u9898\u89e3\u7684\u76ee\u7684\u5728\u4e8e\u8bb2\u4e00\u4e0b\u5982\u4f55\u7528vector\u6c34\u5e73\u8861\u6811\u7684\u9898qwq\u3002\n\n\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0bvector\u7684\u51e0\u4e2a\u64cd\u4f5c\uff0c\u8fd9\u9053\u9898\u7528\u5230\u7684\u548c\u7528\u4e0d\u5230\u7684\u90fd\u4f1a\u6709\u4e00\u4e9b\u3002\n\n\u8fed\u4ee3\u5668\u5c31\u76f8\u5f53\u4e8e\u3002\u3002\u3002\u4e00\u4e2a\u4ece0\u5f00\u59cb\u7684\u6570\u7ec4\u4e0b\u6807\uff1f\n\n1.**push_back( int x )** \uff0c\u628a\u4e00\u4e2a\u6570x\u653e\u5728\u6700\u672b\u3002\n\n2.**insert( iterator it , int x )** \uff0citerator\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u610f\u601d\u662f\u628ax\u8fd9\u4e2a\u6570\u63d2\u5728it\u8fd9\u4e2a\u8fed\u4ee3\u5668\u4f4d\u7f6e\u7684\u524d\u9762\u3002\n\n3.**erase( iterator it )** \uff0c\u5220\u9664it\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570\u3002\n\n4.**lower_bound( iterator begin , iterator end , int x ) && upper_bound( iterator begin , iterator end , int x )** \uff0c\u5e94\u8be5\u662f\u5e7f\u4e3a\u4eba\u77e5\u7684\u5427\uff0c\u4e8c\u5206\u67e5\u627e\uff0c\u8fd4\u56de\u503c\u662f\u8fed\u4ee3\u5668\u3002\n\nlower_bound\u8fd4\u56de\u7684\u662f\u7b2c\u4e00\u4e2a>=x\u7684\u6570\u7684\u8fed\u4ee3\u5668\uff0cupper_bound\u662f>x\u3002\n\n\u6240\u4ee5\u628alower_bound\u7684\u8fd4\u56de\u503c - - \u5c31\u662fx\u7684\u524d\u9a71\u7684\u4f4d\u7f6e\u4e86qwq\u3002\n\n5.**pop_back()** \uff0c\u5220\u6389\u6700\u672b\u3002\n\n6.**[ ]\u8fd0\u7b97\u7b26** \uff0c\u50cf\u6570\u7ec4\u4e00\u6837\u76f4\u63a5\u53d6\u503c\u3002\n\n~~\u7136\u540e\u5c31\u53ef\u4ee5\u6c34\u8fc7\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\u4e86~~\n\n\u8fd8\u6709\u4e00\u4e2a\u901a\u7528\u7684\u51fd\u6570\uff1a **find( iterator begin , iterator end , int x )** ,\u4f5c\u7528\u5c31\u662f\u67e5\u627ex\u7684\u4f4d\u7f6e\u5566\uff0c\u8fd4\u56de\u503c\u662f\u8fed\u4ee3\u5668\uff0c\u8fd9\u9053\u9898\u4e2d\u4e5f\u6709\u7528\u5230\u3002\n\n\u77e5\u9053\u4e86\u8fd9\u4e9b\u4ee5\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u6c34\u9898\u4e86qwq\u3002\n\n```\n#include<bits/stdc++.h>\n#define ll long long\n#define in inline\n#define rint register int\nusing namespace std;\nint n,m,x,y,tmp;\nchar s[123]; \nvector<int> v;\nin ll read()\n{\n\tll x=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9') { if(ch=='-') f=-1; ch=getchar(); }\n\twhile(ch>='0'&&ch<='9') { x=x*10+ch-'0'; ch=getchar(); }\n\treturn x*f;\n}\nint main()\n{\n\tn=read(); m=read();\n\tfor(rint i=1;i<=n;i++)\n\t{\n\t\tint x=read();\n\t\tv.push_back(x);\n\t}\n\tfor(rint i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%s\",s); x=read();\n\t\tif(s[0]=='T')\n\t\t{\n\t\t\tv.erase(find(v.begin(),v.end(),x));\n\t\t\tv.insert(v.begin(),x);\n\t\t}\n\t\telse if(s[0]=='B')\n\t\t{\n\t\t\tv.erase(find(v.begin(),v.end(),x));\n\t\t\tv.insert(v.end(),x);\n\t\t}\n\t\telse if(s[0]=='I')\n\t\t{\n\t\t\ty=read();\n\t\t\tif(y!=0) \n\t\t\t{\n\t\t\t\ttmp=find(v.begin(),v.end(),x)-v.begin();//\u8fd9\u91cc-v.begin()\u53d6\u4e0b\u6807 \u610f\u601d\u6070\u597d\u5c31\u662f\u5728x\u4e0a\u9762\u6709\u51e0\u672c\u4e66\n\t\t\t\tv.erase(tmp+v.begin());\n\t\t\t\ttmp+=y; v.insert(v.begin()+tmp,x);\n\t\t\t}\n\t\t}\n\t\telse if(s[0]=='A')\n\t\t{\n\t\t\ttmp=find(v.begin(),v.end(),x)-v.begin();\n\t\t\tprintf(\"%d\\n\",tmp);\n\t\t}\n\t\telse if(s[0]=='Q') printf(\"%d\\n\",v[x-1]);//\u4e0b\u6807\u4ece0\u5f00\u59cb\n\t}\n\treturn 0;\n}\n\n```\n\n\u5e0c\u671b\u53ef\u4ee5\u5c06\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u62d3\u5bbd\u4e00\u4e9b\uff1f",
        "postTime": 1540908328,
        "uid": 85691,
        "name": "LengChu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "## \u89e3\u9898\u65b9\u6cd5\n### \u50a8\u5907\u6280\u80fd\n1 Treap\n\n~~2 splay~~\n\n### \u5927\u4f53\u601d\u8def\n\n**\u5c06\u6bcf\u4e00\u672c\u4e66\u7684\u7f16\u53f7\u548c\u4e00\u4e2a\u6743\u503c\u8054\u7cfb\u8d77\u6765\uff0c\u901a\u8fc7\u6743\u503c\u7684\u5927\u5c0f\uff0c\u5728treap\u4e2d\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u8fbe\u5230\u63d2\u5165\u5230\u4e0d\u540c\u4f4d\u7f6e\u7684\u9700\u6c42\u3002**\n\n\u5c31\u6bd4\u5982\u8bf4\uff0c\u521d\u59cb\u72b6\u6001\u6743\u503c\u662f[1,n]\n\n\u7b2c\u4e00\u672c\u4e66\u662f1\uff0c\u7b2c\u4e8c\u672c\u4e66\u662f2\uff0c\u7b2c\u4e09\u672c\u4e66\u662f3\uff0c\u76f4\u5230\u7b2cn\u672c\u4e66\u662fn\u3002\n\n\u5982\u679c\u60f3\u8981\u628a\u4e00\u672c\u4e66\u63d2\u5165\u5230\u9876\u7aef\uff0c\u5c31\u628a\u4ed6\u7684\u6743\u503c\u6539\u62100\uff0c\u5982\u679c\u60f3\u628a\u5b83\u653e\u5230\u5e95\u4e0b\uff0c\u5c31\u6539\u6210n+1.\u6bcf\u6b21\u4fee\u6539\u5b8c\u4f4d\u7f6e\u4ee5\u540e\uff0c\u6743\u503c\u7684\u8303\u56f4\u4f1a\u6709\u6240\u6539\u53d8\uff0c\u6539\u53d8\u8303\u56f4\uff0c\u597d\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\n**\u603b\u4e4b\u5c31\u662f\u7528a[i]\u6570\u7ec4\u8bb0\u5f55\u7f16\u53f7\u4e3ai\u7684\u4e66\u7684\u6743\u503c\uff0c\u901a\u8fc7\u7ef4\u62a4\u6570\u7ec4\u548ctreap\uff0c\u6765AC**\n\n\u5269\u4e0b\u7684\u4e00\u4e9b\u7ec6\u8282\u89c1\u4ee3\u7801\u5427\u3002\n\n\n\n------------\n\n## Code\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n#define MAXN 80005\nusing namespace std;\n\n//treap\nstruct treap{\n    treap *ch[2];\n    int v;\n    int r;\n    int id;\n    int sz;\n    void maintain()\n    {\n        sz=1;\n        if(ch[0])sz+=ch[0]->sz;\n        if(ch[1])sz+=ch[1]->sz;\n    }\n    \n    int cmp(int k)\n    {\n        if(v==k)\n            return -1;\n        else\n            return k<v?0:1;\n    }\n}pool[MAXN*2];\nint tot=0;\nvoid rotate(treap *&o,int d)\n{\n    treap *k=o->ch[d^1];\n    o->ch[d^1]=k->ch[d];\n    k->ch[d]=o;\n    o->maintain();\n    k->maintain();\n    o=k;\n}\nvoid insert(treap *&o,int k,int id)\n{\n    if(o==NULL)\n    {\n        o=&pool[tot++];\n        o->v=k;\n        o->r=rand();\n        o->ch[0]=o->ch[1]=NULL;\n        o->sz=1;\n        o->id=id;\n        return;\n    }\n    int d=o->cmp(k);\n    if(d==-1)\n        return;\n    insert(o->ch[d],k,id);\n    if(o->ch[d]->r>o->r)rotate(o,d^1);\n    o->maintain();\n}\nvoid remove(treap *&o,int k)\n{\n    int d=o->cmp(k);\n    if(d==-1)\n    {\n        if(o->ch[0]==NULL)o=o->ch[1];\n        else if(o->ch[1]==NULL)o=o->ch[0];\n        else\n        {\n            int d2=(o->ch[0]->r>o->ch[1]->r)?1:0;\n            rotate(o,d2);\n            remove(o->ch[d2],k);\n        }\n    }\n    else\n    {\n        remove(o->ch[d],k);\n    }\n    if(o)\n    o->maintain();\n}\nint getrank(treap *o,int k)\n{\n    int d=o->cmp(k);\n    int z=(o->ch[0]==NULL)?0:o->ch[0]->sz;\n    if(d==-1)\n    {\n        return z+1;\n    }\n    if(d==0)\n    {\n        return getrank(o->ch[0],k);\n    }\n    else\n        return getrank(o->ch[1],k)+1+z;\n}\nint getkth(treap *o,int k)\n{\n    int d=(o->ch[0]==NULL)?0:o->ch[0]->sz;\n    if(k<=d)\n        return getkth(o->ch[0],k);\n    if(k==1+d)\n        return o->id;\n    else\n        return getkth(o->ch[1],k-1-d);\n}\n\nint main()\n{\n    //build tree\n    int n,m;\n    treap *root=NULL;\n    scanf(\"%d%d\",&n,&m);\n    int l=1,r=n;\n    int a[MAXN];\n    for(int i=1;i<=n;i++)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        a[x]=i;\n        insert(root,i,x);\n    }\n    \n    //operations\n    for(int i=1;i<=m;i++)\n    {\n        char s[10];\n        scanf(\"%s\",s);\n        if(s[0]=='T')\n        {\n            int x;\n            scanf(\"%d\",&x);\n            remove(root,a[x]);\n            insert(root,l-1,x);\n            a[x]=l-1;\n            l-=1;\n        }\n        if(s[0]=='B')\n        {\n            int x;\n            scanf(\"%d\",&x);\n            remove(root,a[x]);\n            insert(root,r+1,x);\n            a[x]=r+1;\n            r+=1;\n        }\n        if(s[0]=='I')\n        {\n            int x,y;\n            scanf(\"%d%d\",&x,&y);\n            if(y==0)\n                continue;\n            int z=getkth(root,getrank(root,a[x])+y);\n            remove(root,a[x]);\n            remove(root,a[z]);\n            insert(root,a[z],x);\n            insert(root,a[x],z);\n            swap(a[x],a[z]);\n        }\n        if(s[0]=='A')\n        {\n            int x;\n            scanf(\"%d\",&x);\n            printf(\"%d\\n\",getrank(root,a[x])-1);\n        }\n        if(s[0]=='Q')\n        {\n            int x;\n            scanf(\"%d\",&x);\n            printf(\"%d\\n\",getkth(root,x));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1528283875,
        "uid": 63925,
        "name": "joe19025",
        "ccfLevel": 0,
        "title": "Treap\u2014\u2014[ZJOI2006]\u4e66\u67b6"
    },
    {
        "content": "## \u770b\u5230\u9898\u89e3\u91cc\u6ca1\u6709\u65e0\u6307\u9488Treap\u7684\uff0c\u6765\u4e00\u7bc7\u65e0\u6307\u9488Treap\u7684\u9898\u89e3\n\n~~\u8fd9\u4e2a\u9898\u4e5f\u662f\u4e07\u5e74\u8c03\u4e0d\u51fa\u7cfb\u5217~~\n\n### 1. \u5bf9\u4e8e\u64cd\u4f5c\u4e00\n\n$\\text{\u7a9d\u4eec\u53ef\u4ee5\u5bf9\u4e0e\u6bcf\u4e00\u672c\u6570\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u4ece\u5927\u5230\u5c0f\u8d4b\u4e00\u4e2a\u6743\u503c\uff0c\u90a3\u4e48\u4e3a\u4e86\u65b9\u4fbf\u64cd\u4f5c} $\n\n$\\text{\u4e00\u4e8c\u7a9d\u4eec\u53ef\u4ee5\u5728\u6743\u503c\u4e4b\u524d\u9884\u7559N\u4e2a\u7a7a\u4f4d\uff0c\u540c\u6837\u7684\u5728\u540e\u9762\u9884\u7559N\u4e2a\u7a7a\u4f4d\uff0c\u8bb0top\u548c} $\n\n$\\text{bottom\u8868\u793a\u5f53\u524d\u7684\u7b2c\u4e00\u4e2a\u6743\u503c\u548c\u6700\u540e\u4e00\u4e2a\u6743\u503c\uff0c\u90a3\u4e48\u628a\u4e00\u672c\u4e66\u653e\u5230\u6700\u9876\u4e0a\uff0c\u8f6c} $\n\n$\\text{\u5316\u4e3a\u627e\u5230\u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u5728Treap\u91cc\u5220\u6389\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8282\u70b9\u4ee5top-1\u7684\u6743\u503c} $\n\n$\\text{\u52a0\u5165\u5e73\u8861\u6811\uff0c\u7136\u540etop- -\u3002\u8fd9\u6837\u5c31\u64cd\u4f5c\u4e00\u5c31\u5b8c\u5566QAQ} $\n\n\n### 2. \u5bf9\u4e8e\u64cd\u4f5c\u4e8c\n\n$\\text{\u4e0e\u64cd\u4f5c\u4e00\u4e00\u6837\u7684\u64cd\u4f5c\uff0c\u76f8\u5e94\u7684\u628abottom++\u5c31\u884c\u4e86\u3002} $\n\n### 3. \u5bf9\u4e8e\u64cd\u4f5c\u4e09\n\n~~\u6700\u6bd2\u7624\u7684\u64cd\u4f5c~~\n\n$\\text{\u7a9d\u4eec\u9996\u5148\u53ef\u4ee5\u627e\u5230\u7f16\u53f7\u4e3ax\u7684\u4e66\u5728Treap\u4e2d\u7684\u6743\u503c\u662f\u591a\u5c11\uff0c\u8bb0\u4e3afx} $\n\n$\\text{\u4ee5T=1\u4e3a\u4f8b} $\n\n$\\text{\u7a9d\u4eec\u53ef\u4ee5\u5728\u5e73\u8861\u6811\u4e2d\u627e\u5230fx\u7684\u540e\u7ee7\uff0c\u7136\u540e\u7a9d\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4inv[fx]=x} $\n\n$\\text{\u5373\u8868\u793a\u6743\u503c\u4e3afx\u7684\u7f16\u53f7\u4e3ax\u3002}$\n\n$\\text{\u8fd9\u6837\u6211\u4eec\u5c31\u628ax\u548c\u5b83\u7684\u540e\u7ee7\u7684\u7f16\u53f7\u4ea4\u6362\u4e00\u4e0b\u5c31\u884c\u4e86\u3002} $\n\n$\\text{T=-1\u7684\u65f6\u5019\u5c31\u627e\u5230\u524d\u9a71\u7136\u540e\u5c31\u8ddfT=1\u4e00\u6837\u7684\u64cd\u4f5c\u4e86} $\n\n$\\text{T=0\u65f6\uff0c\u76f4\u63a5\u8df3\u8fc7\u5c31\u597d\u4e86\u3002} $\n\n### 4. \u5bf9\u4e8e\u64cd\u4f5c\u56db\n\n$\\text{\u627e\u5230\u7f16\u53f7x\u7684\u6743\u503cfx,\u7136\u540e\u5728Treap\u4e2d\u7edf\u8ba1fx\u7684\u6392\u540d} $\n\n### 5. \u5bf9\u4e8e\u64cd\u4f5c\u4e94\n\n$\\text{\u627e\u5230Treap\u4e2d\u524dx\u7684\u6570\u7684\u7f16\u53f7\u5c31\u884c\u4e86\u3002} $\n\n### \u5927\u5bb6\u6700\u60f3\u770b\u7684\u6765\u4e86 \n[\u4ee3\u7801\u6233\u8fd9\u91cc](https://paste.ubuntu.com/p/JxHyQ6Xvzx/)\n\n$\\text{\u4e0b\u9762\u9644\u8d60\u51e0\u7ec4\u6570\u636e} $\n\n```\ndata1.in\n8 8\n1 2 3 4 5 6 7 8\nInsert 4 -1\nBottom 7\nQuery 7\nAsk 6\nTop 4\nAsk 3\nBottom 5\nTop 4\n\ndata1.out\n8\n5\n3\n\ndata1.in\n10 2\n2 4 3 8 1 10 6 9 7 5\nInsert 4 1\nQuery 4\n\ndata1.out\n3\n\n```\n",
        "postTime": 1571304056,
        "uid": 78386,
        "name": "Achtoria",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "### \u9898\u9762\u89c1https://www.luogu.org/problemnew/show/P2596\n\n### \u9898\u9762\u5c31\u662f\u63cf\u8ff0\u4e86\u4e00\u4e2a\u4e66\u67dc\u4ece\u4e0a\u5230\u4e0b\u653e\u7740\u4e66\uff0c\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u6570\u7684\u5e8f\u53f7\u4e3a\u5b83\u5728\u4ece\u4e0a\u5411\u4e0b\u6570\u7b2c\u51e0\u672c\n\n### \u4e00\u5f00\u59cb\u5efa\u6811\u5077\u4e86\u4e2a\u61d2\uff0c\u5c31\u76f4\u63a5\u4e00\u4e2a\u4e2ainsert\n\n### \u56e0\u4e3a\u9898\u76ee\u4e2d\u90fd\u662f\u4ee5\u4e66\u7684\u7f16\u53f7\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u8bb0\u4e00\u4e2apos[ ]\n\n#### \u64cd\u4f5c\u4e00\uff1a\u628apos[x] splay\u5230\u6839\uff0c\u5de6\u513f\u5b50\u90fd\u662f\u6bd4\u5b83\u7f16\u53f7\u5c0f\u7684\uff0c\u90a3\u4e48\u5c31\u628a\u5de6\u513f\u5b50\u6302\u5230\u6839\u7684\u540e\u9762\uff0c\u6839+1\u7684\u524d\u9762\uff0c\u5177\u4f53\u600e\u4e48\u627e\u8fd9\u4e2a\u70b9\u770b\u4ee3\u7801\u89e3\u91ca\n\n#### \u64cd\u4f5c\u4e8c\uff1a\u540c\u4e00\u7406\n\n#### \u64cd\u4f5c\u4e09\uff1a\u5b9e\u9645\u4e0a\u53ea\u66f4\u6539\u4e86x\u548cx\u7684\u524d\u9a71\u6216\u540e\u7ee7\u7684\u503c\uff0c\u548c\u4ed6\u4eec\u4ee3\u8868\u7684\u503c\u7684\u4f4d\u7f6e\uff0c\u53ea\u4fee\u6539\u8fd9\u4e24\u4e2a\u6807\u8bb0\u5373\u53ef\n\n#### \u64cd\u4f5c\u56db\uff1a\u628apos[x] splay\u5230\u6839\uff0c\u5de6\u513f\u5b50\u90fd\u662f\u6bd4\u5b83\u7f16\u53f7\u5c0f\u7684\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662fst[ls].size\n\n#### \u64cd\u4f5c\u4e94\uff1a\u5e38\u89c4\u67e5\u8be2\u7b2ck\u5927\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n    int w=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        w=(w<<3)+(w<<1)+ch-48;\n        ch=getchar();\n    }\n    return w*f;\n}\nint n,m,cnt,tot,root,a[500010],pos[500010];\nbool debug;\nstruct node{\n    int val,ch[2],size,f;\n}st[5000010];\ninline void push_up(int x){\n    int ls=st[x].ch[0];int rs=st[x].ch[1];\n    st[x].size=st[ls].size+st[rs].size+1;\n    pos[st[ls].val]=ls;pos[st[rs].val]=rs;\n}\ninline bool identify(int p){\n    return st[st[p].f].ch[1]==p;\n}\ninline void connect(int x,int fa,int son){\n    st[x].f=fa;st[fa].ch[son]=x;return;\n}\ninline void rotate(int x){\n    int y=st[x].f;int z=st[y].f;\n    int yson=identify(x);int zson=identify(y);\n    int b=st[x].ch[yson^1];\n    connect(b,y,yson);connect(y,x,(yson^1));connect(x,z,zson);\n    push_up(y);push_up(x);if(z)push_up(z);return;\n}\ninline void splay(int x,int goal){\n    while(st[x].f!=goal){\n        int y=st[x].f;int z=st[y].f;\n        int yson=identify(x);int zson=identify(y);\n        if(z!=goal){\n            if(yson==zson) rotate(y);\n            else rotate(x);\n        }\n        rotate(x);\n    }\n    if(!goal) root=x;\n    return;\n}//\u8fd9\u4ee5\u4e0a\u90fd\u662f\u5e38\u89c4\u64cd\u4f5c \ninline void insert(int x){\n    cnt++;int now=cnt;st[now].size=1;\n    st[now].val=x;pos[x]=now;st[now].ch[0]=st[now].ch[1]=0;\n    if(cnt>1){//\u53ea\u8981\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u6839\uff0c\u90fd\u8981\u5c06\u5b83\u548c\u7236\u4eb2\u8fde\u4e00\u4e0b\uff0c\u5e76splay\u5230\u6839 \n        st[now].f=now-1;st[now-1].ch[1]=now;\n        splay(now,0);\n    }\n}//\u5efa\u6811\u64cd\u4f5c \n\ninline void output(int x){\n    int ls=st[x].ch[0];int rs=st[x].ch[1];\n    if(ls) output(ls);\n    printf(\"%d \",st[x].val);\n    if(rs) output(rs);\n    return;\n}//\u8f93\u51fa\u6574\u9897\u533a\u95f4\u6811\uff0cdebug\u7528\u7684 \n\ninline int find(int p,int rk){\n    int ls=st[p].ch[0];int rs=st[p].ch[1];\n    if(st[ls].size+1==rk) return p;\n    if(st[ls].size>=rk) return find(ls,rk);\n    return find(rs,rk-st[ls].size-1);\n}//\u627e\u6811\u4e0a\u6392\u540d \n\ninline void Top(int x){\n    x=pos[x];splay(x,0);\n    if(!st[x].ch[0]) return;//\u5982\u679c\u6ca1\u6709\u5de6\u513f\u5b50\u5c31\u4e0d\u7528\u7ba1\u4e86 \n    if(!st[x].ch[1]){//\u6ca1\u6709\u53f3\u513f\u5b50\u5c31\u628a\u5de6\u513f\u5b50\u6302\u8fc7\u53bb\u5c31\u5b8c\u4e8b\u4e86 \n        st[x].ch[1]=st[x].ch[0];st[x].ch[0]=0;return;\n    }\n    int ls=st[x].ch[0];\n    int y=find(root,st[ls].size+2);//\u6839\u7684rank\u662fst[ls].size+1\uff0cst[ls].size+2\u4e3a\u6839\u7684\u540e\u7ee7 \n    st[ls].f=y;st[y].ch[0]=ls;//\u6839\u7684\u5de6\u5b50\u6811\u5e94\u8be5\u6302\u5728\u6839\u7684\u540e\u7ee7\u7684\u5de6\u5b50\u6811 \n    st[x].ch[0]=0;splay(y,0);//\u6700\u540e\u628a\u66f4\u6539\u7684\u70b9splay\u5230\u6839 \n    return;\n}\ninline void Bottom(int x){//\u64cd\u4f5c\u540c\u4e0a\uff0c\u53cd\u5411\u64cd\u4f5c\u5373\u53ef \n    x=pos[x];splay(x,0);\n    if(!st[x].ch[1]) return;\n    if(!st[x].ch[0]){\n        st[x].ch[0]=st[x].ch[1];st[x].ch[1]=0;return;\n    }\n    int ls=st[x].ch[0];int rs=st[x].ch[1];\n    int y=find(root,st[ls].size);\n    st[rs].f=y;st[y].ch[1]=rs;\n    st[x].ch[1]=0;splay(y,0);\n    return;\n}\n\ninline void change(int x,int y){//\u9898\u76ee\u4e2d\u7684insert\u64cd\u4f5c \n    x=pos[x];splay(x,0);if(!y) return;//\u5982\u679cy==0\uff0c\u8bf4\u660e\u5c31\u4e0d\u7528\u4fee\u6539 \n    int ls=st[x].ch[0];\n    if(y==-1){//y==-1\u5c31\u627e\u524d\u9a71 \n        y=find(root,st[ls].size);\n    }\n    else y=find(root,st[ls].size+2);//y==1\u5c31\u627e\u540e\u7f00 \n    swap(pos[st[x].val],pos[st[y].val]);//\u8fd9\u8981\u4fee\u6539\u4e24\u4e2a\u70b9\u7684\u503c\u548c\u4e24\u4e2a\u70b9\u503c\u7684\u6240\u5728\u4f4d\u7f6e \n    swap(st[x].val,st[y].val);return;\n}\n\ninline void rnk(int x){//\u5e38\u89c4\u67e5\u6392\u540d\u64cd\u4f5c \n    x=pos[x];splay(x,0);\n    int ls=st[x].ch[0];\n    printf(\"%d\\n\",st[ls].size);return;\n}\n\ninline void kth(int x){//\u5e38\u89c4\u6392\u540d\u627e\u70b9\u64cd\u4f5c \n    x=find(root,x);\n    printf(\"%d\\n\",st[x].val);return;\n}\n\nint main(){\n    n=read();m=read();int i,j,k;root=1;\n    for(i=1;i<=n;i++){\n        int x=read();insert(x);\n    }\n    //debug=true;\n    while(m--){\n        string s;cin>>s;int x,y;\n        if(s[0]=='T'){\n            x=read();Top(x);\n        }\n        if(s[0]=='B'){\n            x=read();Bottom(x);\n        }\n        if(s[0]=='I'){\n            x=read();y=read();change(x,y);\n        }\n        if(s[0]=='A'){\n            x=read();rnk(x);\n        }\n        if(s[0]=='Q'){\n            x=read();kth(x);\n        }\n        if(debug){\n            cout<<\"debuging\";\n            output(root);\n            cout<<endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1545187429,
        "uid": 106035,
        "name": "\u6e29\u8bcd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P2596)\n\n\u5f88\u88f8\u7684\u4e00\u9053\u5e73\u8861\u6811\u9898\u3002\n\n1\uff1a\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u653e\u5728\u6811\u7684\u6700\u5de6\u8fb9\uff1b\n\n2\uff1a\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u653e\u5728\u6811\u7684\u6700\u53f3\u8fb9\uff1b\n\n3\uff1a\u5c06\u4e00\u4e2a\u8282\u70b9\u4e0e\u5b83\u7684\u524d\u9a71/\u540e\u7ee7\u4ea4\u6362\u4f4d\u7f6e\uff1b\n\n4\uff1a\u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\u7684\u6392\u540d\uff1b\n\n5\uff1a\u67e5\u8be2\u6392\u540d\u4e3ak\u7684\u8282\u70b9\u3002\n\n\u4e8e\u662f\u7167\u7740\u6a21\u62df\u5c31\u884c\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n\nint fa[80001],ch[80001][2],val[80001],size[80001],cnt,root,backw[80001],num[80001],n,m,t1,t2;\nchar str[101];\nbool son(int x){return ch[fa[x]][1]==x;}\nvoid pushup(int x){size[x]=size[ch[x][0]]+size[ch[x][1]]+1;}\nint build(int l,int r,int f){\n\tif(l>r)return 0;\n\tint id=++cnt;\n\tfa[id]=f;\n\tint mid=(l+r)>>1;\n\tval[id]=num[mid];\n\tbackw[num[mid]]=id;\n\tch[id][0]=build(l,mid-1,id);\n\tch[id][1]=build(mid+1,r,id);\n\tpushup(id);\n\treturn id;\n}\nvoid Rotate(int x){\n\tif(!x||!fa[x])return;\n\tif(root==fa[x])root=x;\n\tint faz=fa[x],fazz=fa[faz],g=son(x);\n\tfa[x]=fazz;\n\tch[fazz][son(faz)]=x;\n\tfa[ch[x][!g]]=faz;\n\tch[faz][g]=ch[x][!g];\n\tfa[faz]=x;\n\tch[x][!g]=faz;\n\tpushup(faz);\n\tpushup(x);\n}\nvoid splay(int x,int ance){\n\twhile(fa[x]!=ance){\n\t\tif(fa[fa[x]]!=ance)\n\t\t\tif(son(x)^son(fa[x]))Rotate(x);\n\t\t\telse Rotate(fa[x]);\n\t\tRotate(x);\n\t}\n}\nint min(int x){\n\twhile(ch[x][0])x=ch[x][0];\n\treturn x;\n}\nint max(int x){\n\twhile(ch[x][1])x=ch[x][1];\n\treturn x;\n}\nvoid erase(int x){\n\tsplay(x,0);\n\tif(ch[root][0]){\n\t\tsplay(max(ch[root][0]),root);\n\t\tch[ch[root][0]][1]=ch[root][1];\n\t\tfa[ch[root][1]]=ch[root][0];\n\t\tfa[ch[root][0]]=0;\n\t\tpushup(ch[root][0]);\n\t\troot=ch[root][0];\n\t}\n\telse{\n\t\tfa[ch[root][1]]=0;\n\t\troot=ch[root][1];\n\t}\n\tch[x][0]=ch[x][1]=0;\n}\nint rank(int node){\n\tint tot=size[ch[node][0]];\n\twhile(node){\n\t\tif(son(node))tot+=size[ch[fa[node]][0]]+1;\n\t\tnode=fa[node];\n\t}\n\treturn tot;\n}\nint findKth(int x){\n\tint u=root,num=x;\n\twhile(size[ch[u][0]]!=num-1){\n\t\tif(size[ch[u][0]]>=num)u=ch[u][0];\n\t\telse num=num-size[ch[u][0]]-1,u=ch[u][1];\n\t}\n\treturn u;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",num+i);\n\troot=build(1,n,0);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%s\",str);\n\t\tif(str[0]=='T'){\n\t\t\tscanf(\"%d\",&t1);\n\t\t\tt1=backw[t1];\n\t\t\terase(t1);\n\t\t\tint u=min(root);\n\t\t\tch[u][0]=t1,fa[t1]=u;\n\t\t\tsize[t1]=1;\n\t\t\twhile(u)size[u]++,u=fa[u];\n\t\t}\n\t\telse if(str[0]=='B'){\n\t\t\tscanf(\"%d\",&t1);\n\t\t\tt1=backw[t1];\n\t\t\terase(t1);\n\t\t\tint u=max(root);\n\t\t\tch[u][1]=t1,fa[t1]=u;\n\t\t\tsize[t1]=1;\n\t\t\twhile(u)size[u]++,u=fa[u];\n\t\t}\n\t\telse if(str[0]=='I'){\n\t\t\tscanf(\"%d%d\",&t1,&t2);\n\t\t\tif(t2==0)continue;\n\t\t\telse if(t2==-1){\n\t\t\t\tsplay(backw[t1],0);\n\t\t\t\tint x=max(ch[root][0]);\n\t\t\t\tbackw[val[x]]^=backw[t1]^=backw[val[x]]^=backw[t1];\n\t\t\t\tval[x]^=val[root]^=val[x]^=val[root];\n\t\t\t}\n\t\t\telse if(t2==1){\n\t\t\t\tsplay(backw[t1],0);\n\t\t\t\tint x=min(ch[root][1]);\n\t\t\t\tbackw[val[x]]^=backw[t1]^=backw[val[x]]^=backw[t1];\n\t\t\t\tval[x]^=val[root]^=val[x]^=val[root];\n\t\t\t}\n\t\t}\n\t\telse if(str[0]=='A'){\n\t\t\tscanf(\"%d\",&t1);\n\t\t\tprintf(\"%d\\n\",rank(backw[t1]));\n\t\t}\n\t\telse if(str[0]=='Q'){\n\t\t\tscanf(\"%d\",&t1);\n\t\t\tprintf(\"%d\\n\",val[findKth(t1)]);\n\t\t}\n\t\t//for(int i=1;i<=n;i++)printf(\"%d %d %d %d %d %d %d\\n\",backw[i],i,fa[i],ch[i][0],ch[i][1],val[i],size[i]);\n\t}\n}\n```",
        "postTime": 1533912578,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP2596 [ZJOI2006]\u4e66\u67b6"
    },
    {
        "content": "```cpp\n#include<cstdio>\n#include<vector>\nusing namespace std;\nint n,m;\n#define maxn 100000\nint lst[maxn];\nint\n    f[maxn],\n    c[maxn][2],\n    s[maxn],\n    k[maxn],\n    id[maxn],\n    root,size=0;\nvoid pushup(int x){\n    s[x]=s[c[x][0]]+s[c[x][1]]+1;   //\u4e00\u4e2a\u8282\u70b9\u7684\u89c4\u6a21\u7b49\u4e8e\u5b50\u8282\u70b9\u89c4\u6a21\u4e4b\u548c+1\n}\nint rotate(int i){\n    int fa=f[i];    //\u53d6\u5f97\u7236\u4eb2\n    int d=(c[fa][1]==i);    //\u5982\u679c\u5b50\u8282\u70b9\u662f\u7236\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\uff0c\u4e3a1\uff0c\u5426\u5219\u4e3a0\n    f[i]=f[fa]; //\u5c06\u5b50\u8282\u70b9\u7684\u7236\u4eb2\u6539\u4e3a\u7956\u7236\n    if(fa>0) //\u7236\u4eb2\u4e0d\u662f\u6839\n        c[f[fa]][c[f[fa]][1]==fa]=i;    //\u5c06\u7956\u7236\u7684\u513f\u5b50\u4e2d\u7236\u4eb2\u7684\u4f4d\u7f6e\u7ed9\u513f\u5b50\n    if(c[fa][d]=c[i][!d])   //\u5c06\u7236\u4eb2\u4e2d\u513f\u5b50\u7684\u4f4d\u7f6e\u7ed9\u53e6\u4e00\u4fa7\u7684\u5b59\u5b50\n        f[c[i][!d]]=fa; //\u6539\u53d8\u5b59\u5b50\u5173\u7cfb\u4e3a\u513f\u5b50\u5173\u7cfb\n    f[fa]=i;    //\u5c06\u7236\u4eb2\u6539\u4e3a\u5b59\u5b50\n    c[i][!d]=fa;\n    pushup(fa);\n    return i;\n/*******************************\nsource:\n 2   -> fa\n |\n1 4  -> i\n  |\n 3 5\n \nd -> 1\n \nstep1:\n  4  -> i     2  -> fa\n    |           |\n 3 5         1\n \nstep2:\n  4  -> i     2  -> fa\n    |           |\n 3 5         1 |\n |-------------|\n \nstep3:\n  4  -> i     2  -> fa\n    |           |\n   5         1 3\n \nstep4:\n       4  -> i\n         |\nfa -> 2 5\n        |\n     1 3\n*******************************/\n}\nvoid splay(int i,int p){\n    for(int fa=f[i];fa!=p;fa=f[rotate(i)])  //\u65cb\u8f6c\u4e0a\u5347\n        if(f[fa]!=p)\n            if(c[fa][1]==i ^ c[f[fa]][1]==fa)   //\u4e0d\u5171\u7ebf\n                rotate(i);\n            else\n                rotate(fa);\n    pushup(i);\n    if(!f[i]) root=i;   //\u65e0\u4eb2\u8005\u4e43\u738b\u8005\u4e5f\n \n/*************************\nsource:\n1    -> p\n|\n 2\n |\n  3  -> i\n \nstep1:\n1\n|\n 3   -> i\n |\n2\n \nstep2:\n  3  -> i -> root\n    |\n 1\n |\n  2\n \n \nsource:\n1\n|\n 3\n |\n2    -> i\n \nstep1:\n 3\n |\n1\n|\n 2   -> i\n \nstep2:\n  3\n  |\n 2   -> i\n |\n1\n \nstep3:\n  2  -> i -> root\n    |\n 1 3\n*************************/\n}\nint make(int fa,int l,int r){\n    if(l>r) return 0;\n    int m=(l+r)/2;\n    int i=++size;\n    f[i]=fa;\n    k[i]=lst[m];    //\u5c06\u8be5\u8282\u70b9\u6620\u5c04\u5230\u4e66\u7f16\u53f7\u4e0a\n    id[lst[m]]=i;   //\u5c06\u4e66\u7f16\u53f7\u6620\u5c04\u5230\u8be5\u8282\u70b9\u4e0a\n    //\u4e8c\u5206\uff0c\u5de6\u4fa7\u5c0f\u4e8e\uff0c\u53f3\u4fa7\u5927\u4e8e\n    c[i][0]=make(i,l,m-1);\n    c[i][1]=make(i,m+1,r);\n    pushup(i);\n    return i;\n}\nint check(int t,int i){ //\u8fd4\u56de\u6781\u4fa7\u53f6\u5b50\n    if(c[i][t]==0) return i;\n    return check(t,c[i][t]);\n}\nvoid move(int t,int i){\n    splay(i,0); //\u7ba1\u5b83\u662f\u4ec0\u4e48\uff0c\u65cb\u8f6c\u4e0a\u6765\u518d\u8bf4\n    if(c[i][1]>0){   //\u5982\u679c\u53f3\u8fb9\u6709\u8282\u70b9\n        int x=check(0,c[i][1]);\n        splay(x,i); //\u4f7f\u53f3\u5b50\u8282\u70b9\u53ea\u6709\u53f3\u5b50\u6811\n        c[x][0]=c[i][0];    //\u628a\u5de6\u4fa7\u641e\u6210\u53f3\u5b50\u8282\u70b9\u7684\u5de6\u5b50\u6811\n        f[c[x][0]]=x;\n        pushup(x);\n        f[x]=0;\n        root=x; //\u62cd\u5c41\u80a1\u8d70\u4eba\n    }else{  //\u6ca1\u4ec0\u4e48\u4e8b\n        f[c[i][0]]=0;\n        root=c[i][0];\n    }\n    f[i]=c[i][0]=c[i][1]=0; //\u5b64\u513f\n    f[root]=i;  //\u8ba9\u6839\u53d8\u6210\u81ea\u5df1\u7684\u513f\u5b50\n    c[i][t]=0;\n    c[i][!t]=root;\n    pushup(i);\n    root=i;\n    //splay(i,0);   //\u7136\u800c\u89c9\u5f97\u8fd9\u53e5\u8bdd\u6ca1\u5375\u7528\n}\nvoid exchange(int t,int i){\n    splay(i,0); //\u5148\u8f6c\u4e0a\u6765\n    if(c[i][t]==0) return;  //\u6ca1\u5f97\u6362\n    int x=check(!t,c[i][t]);    //\u627e\u5230\u5de6\u8fb9\u6781\u53f3\uff0c\u53f3\u8fb9\u6781\u5de6\n    swap(k[i],k[x]);    //\u4ea4\u6362\u7ed1\u5b9a\n    id[k[i]]=i;\n    id[k[x]]=x;\n}\nint ask(int i,int key){ //\u627e\u5e8f\u53f7\u5bf9\u5e94\n    int t=s[c[i][0]];\n    if(key<=t) return ask(c[i][0],key);\n    if(key>t+1) return ask(c[i][1],key-t-1);\n    return k[i];\n}\nvoid awd(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i){\n        int t;\n        scanf(\"%d\",&t);\n        lst[i]=t;\n    }\n    root=make(0,1,n);\n    while(m--){\n        char st[32];\n        int ss;\n        scanf(\"%s%d\",st,&ss);\n        switch(st[0]){\n            case 'T':\n                move(0,id[ss]);\n                break;\n            case 'B':\n                move(1,id[ss]);\n                break;\n            case 'I':{\n                int tt;\n                scanf(\"%d\",&tt);\n                if(tt) exchange(tt==1,id[ss]);\n                break;\n            }\n            case 'A':\n                splay(id[ss],0);\n                printf(\"%d\\n\",s[c[id[ss]][0]]);\n                break;\n            case 'Q':\n                printf(\"%d\\n\",ask(root,ss));\n                break;\n        }\n    }\n}\nint main(){\n    return awd(),0;\n}\n```",
        "postTime": 1487852069,
        "uid": 35091,
        "name": "tttnns",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2596 \u3010[ZJOI2006]\u4e66\u67b6\u3011"
    }
]