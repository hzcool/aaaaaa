[
    {
        "content": "## \u524d\u8a00\n\n\u6211\u89c9\u5f97\u8fd9\u662f\u4e00\u9053\u597d\u9898\uff0c\u56e0\u4e3a\u5b83\u8003\u5230\u4e86\u8bb8\u591a\u77e5\u8bc6\uff0c\u5c06\u5f88\u591a\u77e5\u8bc6\u7efc\u5408\u4e86\u8d77\u6765\n\n## \u601d\u8def\n\n\u62ff\u5230\u8fd9\u9053\u9898\u4e4b\u540e\uff0c\u6211\u4eec\u5e94\u8be5\u5c06\u8fd9\u4e2a\u95ee\u9898\u62c6\u6210\u4e24\u4e2a\u95ee\u9898\n\n**\u7b2c\u4e00\uff0c\u6c42n\u5230\u6bcf\u4e2a\u51fa\u5165\u53e3\u7684\u65f6\u95f4\u548c\u4e0e\u5b89\u5168\u7cfb\u6570\u548c\u6bd4\u503c\u6700\u5c0f\u7684\u8def\u5f84**\n\n**\u7b2c\u4e8c\uff0c\u6c42\u51fa\u63a2\u7d22\u6240\u6709\u7a7a\u8154\u7684\u6700\u5c0f\u4ee3\u4ef7**\n\n## \u505a\u6cd5\n\n#### \u7b2c\u4e00\u4e2a\u95ee\u9898\n\u5047\u8bbe\u6211\u4eec\u53bb\u7684\u662f\u70b9$x$,\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u8981\u627e\u5230\u4e00\u6761\u4ece$n$\u5230$x$\u7684\u8def\u5f84\uff0c\u4f7f\u5f97$\\sum (Ti *xi)/\\sum (Si*xi )$\u6700\u5c0f\uff0c\n\n($xi$\u8868\u793a\u7b2ci\u6761\u8fb9\u5728\u4e0d\u5728\u8be5\u8def\u5f84\u4e0a\uff0c\u82e5\u5728\u4e3a1\uff0c\u4e0d\u5728\u5373\u4e3a0)\n\n\n\u6211\u4eec\u8003\u8651**\u4e8c\u5206\u7b54\u6848**\uff0c\u5047\u8bbe\u6211\u4eec\u5f53\u524d\u4e8c\u5206\u7684\u503c\u4e3a$ans$,\n\n\u90a3\u5982\u679c\u8fd9\u4e2a\u7b54\u6848\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8981\u6ee1\u8db3 $\\sum (Ti *xi)/\\sum (Si *xi)<=ans$\uff0c\n\n\u79fb\u9879\u53ef\u5f97$\\sum (Ti*xi) -\\sum (Si*xi)*ans<=0$\uff0c\n\n\u5373\u4e3a$\\sum((Ti-ans*Si)*xi)<=0$\n\n\u90a3\u6211\u4eec\u53ea\u8981\u4f7f\u6bcf\u6761\u8fb9\u6743\u6539\u4e3a$Ti-Si*xi$,\u7136\u540e\u770b$n$\u5230$x$\u7684\u8def\u5f84\u662f\u5426$<=0$\u5373\u53ef\n\n**\u8fd9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u768401\u5206\u6570\u89c4\u5212\uff0c\u6211\u76f8\u4fe1\u770b\u8fd9\u9053\u9898\u7684\u4eba\u5e94\u8be5\u90fd\u770b\u5f97\u61c2qwq**\n\n\u4f46\u662f\u8981\u6c42\u591a\u4e2a\u70b9\u5230$n$\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u6240\u4ee5\u8003\u8651**\u6574\u4f53\u4e8c\u5206**\n\n~~\u4f46\u8c8c\u4f3c\u542c\u8bf4\u4e0d\u6574\u4f53\u4e8c\u5206\u4e5f\u8fc7\u5f97\u53bb\uff0c\u5982\u679c\u4f60\u4e0d\u4f1a\u7684\u8bdd\u5c31\u4e00\u4e2a\u4e00\u4e2a\u4e8c\u5206\u5427233~~\n\n**\u6700\u77ed\u8def\u7528\u4ec0\u4e48\u65b9\u6cd5\u5462\uff1fSpfa?Dijkstra?Floyed?**\n\nno no no!!!\n\n\u9996\u5148\uff0c\u8fd9\u9053\u9898\u6709\u8d1f\u8fb9\uff0c\u6240\u4ee5$Dijkstra$\u9996\u5148\u6dd8\u6c70\uff0c$SPFA?$,\u4f46\u662f\u8fd9\u9053\u9898$m$\u53c8\u6709\u8db3\u8db3$1e5$,\u8dd1$SPFA$\u5de8\u6162\u554a\uff0c$Floyed$\u5bf9\u4e8e$n<=700$\u6765\u8bf4\u6839\u672c\u4e0d\u53ef\u80fd\n\n\u90a3\u548b\u529e\u554a\uff1f\uff1f\n\n\u7b49\u7b49\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u6f0f\u4e86\u4ec0\u4e48\uff1f\n\n\u6ca1\u6709\u73af\u554a\uff01\uff01\uff01\n\n\u90a3\u5c31\u7b80\u5355\u4e86\uff0c\u8dd1\u4e2a\u62d3\u6251\u5e8f\u5c31\u5b8c\u4e8b\u4e86\u554a\uff08~~\u6211\u4e5f\u4e0d\u77e5\u9053\u6211\u524d\u9762\u626f\u90a3\u4e48\u591a\u5e72\u561b~~\uff09\n\n#### \u7b2c\u4e8c\u4e2a\u95ee\u9898\n\n\u73b0\u5728\u6211\u4eec\u5f97\u5230\u4e86$n$\u5230\u6240\u6709\u51fa\u5165\u53e3\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u90a3\u5982\u4f55\u6c42\u63a2\u7d22\u6240\u6709\u7a7a\u8154\u7684\u6700\u5c0f\u4ee3\u4ef7\u5462\uff1f\n\n\u9996\u5148\uff0c\u6211\u89c9\u5f97\u9898\u76ee\u90fd\u5df2\u7ecf\u5728~~\u75af\u72c2\u6697\u793a~~\u544a\u8bc9\u6211\u4eec\u8fd9\u662f\u4e2a\u4e00\u4e2a\u4e8c\u5206\u56fe\u4e86\n\n *-----\u6bcf\u4e2a\u7a7a\u8154\u6709\u4e14\u53ea\u6709\u4e24\u4e2a\u51fa\u5165\u53e3\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u51fa\u5165\u53e3\u4e0d\u4f1a\u5728\u540c\u4e00\u6392\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e24\u6392\u51fa\u5165\u53e3\u5206\u522b\u7f16\u53f7\u4e3a$1,3,5\u2026$\u548c$2,4,6\u2026$\u5e76\u4e14\u6700\u5927\u7684\u7f16\u53f7\u4e3a$n1$\u3002*\n \n\u4e24\u6392\uff0c\u6bcf\u4e2a\u51fa\u53e3\u4e00\u6392\u4e00\u4e2a\uff0c\u8fd9\u4e0d\u662f\u4e8c\u5206\u56fe\u662f\u4ec0\u4e48\uff1f\uff1f\n\n\u5176\u5b9e\u8fd9\u4e2a\u7f51\u7edc\u6d41\u6a21\u578b\u4e5f\u5e76\u4e0d\u96be\u5efa\u7acb\uff0c\n\n\u4ece\u6e90\u70b9\u5f80\u6bcf\u4e2a\u5947\u6570\u70b9\u5efa\u8fb9\uff0c\u6d41\u91cf\u4e3a\u4ece$n$\u5230\u8be5\u70b9\u7684\u6700\u5c0f\u8def\u5f84\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7a7a\u8154\u7684\u4e24\u4e2a\u51fa\u5165\u53e3$u,v$,\u5047\u8bbe$u$\u662f\u5947\u6570,\u5219\u4eceu\u5411v\u5efa\u4e00\u6761\u6d41\u91cf\u4e3ainf\u7684\u8fb9\n\n\u4ece\u6bcf\u4e2a\u5076\u6570\u70b9\u5f80\u6c47\u70b9\u5efa\u8fb9\uff0c\u6d41\u91cf\u4e3a\u4ece$n$\u5230\u6539\u70b9\u7684\u6700\u5c0f\u8def\u5f84\n\n**\u95ee\u9898\u662f\u4e3a\u4ec0\u4e48\u90a3\u4e48\u5efa\u56fe\u5462\uff1f**\n\n\u5176\u5b9e\u6211\u4eec\u5728\u8fd9\u91cc\u5229\u7528\u7684\u662f\u6700\u5c0f\u5272\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7a7a\u8154\u7684\u51fa\u5165\u53e3$u,v$\uff0c\u6211\u4eec\u5fc5\u987b\u9009\u62e9\u4e00\u4e2a\uff0c\u8ba9$u$\u5f80$v$\u5efainf\u8fb9\u7684\u610f\u4e49\u5c31\u662f\u6211\u4eec\u4e3a\u4e86\u8ba9$u$\u548c$v$\u5206\u5f00\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u5728$u$\u548c\n$v$\u548c\u4e4b\u95f4\u9009\u4e00\u6761\u8fb9\u5272\u6389\uff0c\u5272\u6389\u7684\u4ee3\u4ef7\u5373\u4e3a\u4ece$n$\u5230\u6539\u70b9\u7684\u6700\u5c0f\u8def\u5f84\uff0c\n\n\u7136\u540e\u7531\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\n\n## \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<vector>\n#define inf 0x7fffffff/2\n#define eps 1e-3\n#define N 100010\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ninline ll read()\n{\n\tchar ch=getchar();\n\tll s=0,w=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\nstruct Edge\n{\n\tint next,to;\n\tdouble s,t;\n}E[N<<1];\nint Head[N],ecnt;\nint n,U[N],V[N],m,n1,m1;\nint pre[N],minn[N];\ndouble dist[N],D[N];\nint depth[N],Index[N];\nstruct edge\n{\n\tint next,to;\n\tdouble fl;\n}e[N*10];\nint head[N],cnt=1;\nint q[N],ql[N],qr[N];\nqueue<int>qu;\nint vis[N];\nint pos[N],nowpos;\nint ss,tt,maxflow;\nint Stack[N],top;\ninline void Add_edge(int from,int to,double s,double t)\n{\n\tE[++ecnt].to=to;E[ecnt].next=Head[from];E[ecnt].s=s;E[ecnt].t=t;Head[from]=ecnt;Index[to]++;\n}//\u5bf9\u539f\u56fe\u8fdb\u884c\u5efa\u8fb9\ninline void Topu(double x)\n{\n\tfor(register int i=1;i<n;i++)dist[i]=inf;dist[n]=0;\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tint now=pos[i];\n\t\tfor(register int j=Head[now];j;j=E[j].next)\n\t\t{\n\t\t\tdist[E[j].to]=min(dist[E[j].to],dist[now]+E[j].t-E[j].s*x);\n\t\t}\n\t}\n}//\u6c42\u6700\u77ed\u8def\nvoid Q(double L,double R,int l,int r)\n{\n\tif(l>r)return ;\n\tif(fabs(R-L)<=eps){for(register int i=l;i<=r;i++)D[q[i]]=L;return ;}\n\tdouble mid=(L+R)/2;\n\tTopu(mid);\n\tint nowl=0,nowr=0;\n\tfor(register int i=l;i<=r;i++)if(dist[q[i]]<=0.0){ql[++nowl]=q[i];}else qr[++nowr]=q[i];\n\tfor(register int i=l;i<=l+nowl-1;i++)q[i]=ql[i-l+1];\n\tfor(register int i=l+nowl;i<=r;i++)q[i]=qr[i-nowl-l+1];\n\tQ(L,mid,l,l+nowl-1);Q(mid+eps,R,l+nowl,r);\n}//\u6574\u4f53\u4e8c\u5206\ninline void add_edge(int from,int to,double fl){e[++cnt].to=to;e[cnt].next=head[from];e[cnt].fl=fl;head[from]=cnt;}\n  //\u5bf9\u7f51\u7edc\u6d41\u5efa\u8fb9\ninline int bfs()\n{\n\tmemset(depth,0,sizeof(depth));while(!qu.empty())qu.pop();\n\tqu.push(ss);depth[ss]=1;\n\twhile(!qu.empty())\n\t{\n\t\tint x=qu.front();qu.pop();\n\t\tfor(register int i=head[x];i;i=e[i].next)\n\t\t{\n\t\t\tif(fabs(e[i].fl-0)>=eps&&!depth[e[i].to])depth[e[i].to]=depth[x]+1,qu.push(e[i].to);\n\t\t}\n\t}\n\treturn depth[tt];\n}\ndouble dfs(int now,double flow)\n{\n\tif(now==tt)return flow;\n\tdouble ret=0;\n\tfor(register int i=head[now];i;i=e[i].next)\n\t{\n\t\tif(fabs(ret-flow)<=eps)return flow;\n\t\tif(fabs(e[i].fl-0)>=eps&&depth[e[i].to]==depth[now]+1)\n\t\t{\n\t\t\tdouble fl=dfs(e[i].to,min(e[i].fl,flow-ret));\n\t\t\tif(fabs(fl-0)>=eps)\n\t\t\t{\n\t\t\t\tret+=fl;\n\t\t\t\te[i].fl-=fl;\n\t\t\t\te[i^1].fl+=fl;\n\t\t\t}\n\t\t}\n\t}\n\tif(fabs(ret-0)<=eps)depth[now]=0;\n\treturn ret;\n}\ninline double Dinic()\n{\n\tdouble sum=0,x=0;\n\twhile(bfs()){x=1;while(fabs(x-0)>=eps){x=dfs(ss,inf);sum+=x;}}\n\treturn sum;\n}//\u6700\u5927\u6d41\uff0c\u5373\u4e3a\u6700\u5c0f\u5272\ninline void Prepare()\n{\n\tnowpos=0;top=0;\n\tfor(register int i=1;i<=n;i++)if(!Index[i])Stack[++top]=i;\n\twhile(top)\n\t{\n\t\tint x=Stack[top--];pos[++nowpos]=x;\n\t\tfor(register int i=Head[x];i;i=E[i].next)\n\t\t{\n\t\t\tIndex[E[i].to]--;if(!Index[E[i].to])Stack[++top]=E[i].to;\n\t\t}\n\t}\n}//\u6c42\u62d3\u6251\u6392\u5e8f\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=n;i++)q[i]=i;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint from,to;double s,t;\n\t\tscanf(\"%d%d%lf%lf\",&from,&to,&t,&s);\n\t\tAdd_edge(from,to,s,t);\n\t}\n\tPrepare();\n\tQ(0,inf,1,n-1);D[n]=0;\n\tm1=read(),n1=read();\n\tfor(register int i=1;i<=m1;i++)U[i]=read(),V[i]=read();\n\ttt=n1+m1+1;\n\tfor(register int i=1;i<=n1;i++)\n\t{\n\t\tif(i&1)add_edge(ss,i,D[i]),add_edge(i,ss,0);\n\t\telse add_edge(i,tt,D[i]),add_edge(tt,i,0);\n\t}\n\tfor(register int i=1;i<=m1;i++)\n\t{\n\t\tif(V[i]&1)swap(U[i],V[i]);\n\t\tadd_edge(U[i],V[i],inf),add_edge(V[i],U[i],0);\n\t}\n\tdouble ans=Dinic();\n\tif(ans>1e8){printf(\"-1\\n\");}\n\telse printf(\"%.1lf\\n\",ans);\n\treturn 0;\n}\n```\n\n**\u5982\u679c\u8ba4\u4e3a\u6211\u8fd9\u7bc7\u9898\u89e3\u5bf9\u4f60\u6709\u5e2e\u52a9\u7684\u53ef\u4ee5\u7ed9\u6211\u70b9\u4e00\u4e0b\u8d5eqwq\u3002\u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u6216\u8005\u8ba4\u4e3a\u6211\u7684\u9898\u89e3\u6709\u4ec0\u4e48\u95ee\u9898\u7684\u8bdd\uff0c\u8bf7\u52a1\u5fc5\u79c1\u4fe1\u6211\uff0c\u611f\u6fc0\u4e0d\u5c3d\uff01\u6211\u4f1a\u52aa\u529b\u628a\u6211\u7684\u9898\u89e3\u5199\u5f97\u6700\u597d\u7684!**\n",
        "postTime": 1547741430,
        "uid": 72419,
        "name": "WAPER4EVER",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2494 \u3010[SDOI2011]\u4fdd\u5bc6\u3011"
    },
    {
        "content": "~~\u8fd9\u5c31\u662f\u8d85\u878d\u5408\u7684\u529b\u91cf\u5417\u5624\u5624\u5624~~\n\nQP \u63d0\u9192\uff1a\u672c\u7bc7\u9898\u89e3\u7684\u65b9\u6cd5\u90fd\u975e\u5e38~~\u5f31\u667a~~\u849f\u84bb\u800c\u4e14\u8d3c~~\u5e9f\u8bdd\u8fde\u7bc7~~\u8be6\u7ec6\uff0c\u610f\u5728\u5e2e\u52a9\u50cf\u6211\u8fd9\u6837\u7684\u849f\u84bb\uff0c\u5927\u4f6c\u8bf7\u81ea\u884c\u8df3\u8fc7\n\n\u524d\u7f6e\u829d\u58eb\uff1a01 \u5206\u6570\u89c4\u5212\uff0c\u6700\u5c0f\u5272\n\n\u4e00\u770b\u9898\uff0c~~\u770b\u4e86\u534a\u4e2a\u5c0f\u65f6\u540e~~\u6211\u4eec\u770b\u51fa\u6765\u5b83\u662f\u4e00\u9053\u878d\u5408\u4e86\u4e24\u9053\u9898\u7684\u9898\u76ee\uff1a\n\n- \u6c42\u51fa\u5230\u8fbe\u6bcf\u4e2a\u5730\u9053\u53e3\u6700\u5c0f\u4ee3\u4ef7 \n\n- \u6c42\u51fa\u63a2\u7d22\u6240\u6709\u7a7a\u8154\u7684\u6700\u5c0f\u4ee3\u4ef7\n\n\u597d\u7406\u89e3\u5427\uff0c\u539f\u95ee\u9898\u5c31\u662f\u6c42\u51fa\u63a2\u7d22\u6240\u6709\u7a7a\u8154\u6700\u5c0f\u4ee3\u4ef7\uff0c\u7136\u540e\u4e3a\u4e86\u5230\u8fbe\u7a7a\u8154\u5c31\u5fc5\u987b\u5148\u5230\u5730\u9053\u53e3\uff0c\u6240\u4ee5\u4e5f\u8981\u6c42\u51fa\u5230\u6240\u6709\u5730\u9053\u53e3\u7684\u4ee3\u4ef7\u3002\n\n### - \u7b2c\u4e00\u90e8\u5206\uff1a\u6c42\u51fa\u5230\u8fbe\u6bcf\u4e2a\u5730\u9053\u53e3\u6700\u5c0f\u4ee3\u4ef7- 01 \u89c4\u5212\n\n\u8bfb\u4e00\u4e0b\u9898\uff0c\u8981\u4f7f\u8d70\u8fc7\u9053\u8def\u7684\u65f6\u95f4\u603b\u548c\u6bd4\u4e0a\u5371\u9669\u503c\u603b\u548c\u6700\u5c0f\u2014\u2014\u88f8\u7684 01 \u89c4\u5212\u5462\u3002\n\n\u6240\u4ee5\u5c31\u662f\u6c42\u5230\u8fbe\u6bcf\u4e2a\u5730\u9053\u53e3\u7684 $min\\dfrac{ \\sum(t_n\\times x_n) }{\\sum(s_n\\times x_n)}$\n\n\u6240\u4ee5\u4ee4\u6700\u5c0f\u4e3a $ans$ \uff1a\n\n$\\dfrac{ \\sum(t_n\\times x_n) }{\\sum(s_n\\times x_n)}=ans$\n\n\u7136\u540e\u79fb\u9879\uff1a\n\n$\\sum(t_n\\times x_n)-\\sum(s_n\\times x_n)\\times ans=0$\n\n\u63d0\u53d6\u516c\u56e0\u5f0f\uff1a\n\n$\\sum x_n\\times(t_n-s_n\\times ans)=0$\n\n01 \u89c4\u5212\u7684\u57fa\u64cd\u5e94\u8be5\uff0c\u5e94\u8be5\u4e0d\u7528\u591a\u8bf4\u5427\uff1f\u4e0d\u61c2\u7684\u518d\u53bb\u91cd\u65b0\u505a\u51e0\u9053 01 \u9898\u597d\u4e86\uff08\u96fe\uff09\n\n\u89c2\u5bdf\u5f0f\u5b50\uff0c\u7136\u540e\u5c31\u53d1\u73b0\u8fd9\u5176\u5b9e\u662f\u8981\u6c42\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a $t_n-s_n \\times ans$ \u7684\u6700\u77ed\u8def\uff08\u9009\u51fa\u4e00\u4e9b\u8fb9\u4f7f\u5b83\u80fd\u5230\u8fbe\u5730\u9053\u53e3\uff0c $x_n$ \u5c31\u8868\u793a\u4e86\u9009\u4e0d\u9009\uff0c\u603b\u4ee3\u4ef7\u5c31\u662f\u8def\u5f84\u603b\u957f\u5ea6\uff0c\u4e3a\u4e86\u4f7f\u4ee3\u4ef7\u5c3d\u53ef\u80fd\u5c0f\u6240\u4ee5\u662f\u6700\u77ed\u8def\uff09\u3002\n\n\u8fd9\u9053\u9898\u56e0\u4e3a\u662f\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u6240\u4ee5\u6700\u77ed\u8def\u76f4\u63a5\u7528\u62d3\u6251\u5c31\u53ef\u4ee5\u6c42\u51fa\u6765\u5566\u3002\n\n\u7136\u540e\u5c31\u662f 01 \u89c4\u5212\u7684\u6807\u51c6\u64cd\u4f5c\uff1a\u4e8c\u5206 $ans$ \uff0c\u5f53\u6700\u7ec8\u7ed3\u679c\n\u5982\u679c\u5c0f\u4e8e $0$ \u5c31\u8bf4\u660e\u8fd8\u6709\u66f4\u4f18\u89e3\uff0c\u4e8c\u5206\u5de6\u533a\u95f4\uff0c\u53cd\u4e4b\u4e8c\u5206\u53f3\u533a\u95f4\u3002\n\n\u7136\u540e\u5bf9\u6bcf\u4e2a\u5730\u9053\u53e3\u8fdb\u884c\u4e8c\u5206\uff0c\u5c31\u8f7b\u677e\u6109\u5feb\u7684\u6c42\u51fa\u4e86\u5230\u8fbe\u6bcf\u4e2a\u5730\u9053\u53e3\u7684\u6700\u5c0f\u4ee3\u4ef7\u5566~\n\n\uff08\u542c\u8bf4\u53ef\u4ee5\u6574\u4f53\u4e8c\u5206?\u849f\u84bb\u4e0d\u4f1a\u5440 QAQ \uff09\n\n### - \u7b2c\u4e8c\u90e8\u5206\uff1a\u6c42\u51fa\u63a2\u7d22\u6240\u6709\u7a7a\u8154\u7684\u6700\u5c0f\u4ee3\u4ef7-\u6700\u5c0f\u5272\n\n\u4e24\u6392\u5730\u9053\u53e3\uff0c\u6bcf\u4e2a\u7a7a\u8154\u7684\u51fa\u5165\u53e3\u4e0d\u5728\u540c\u4e00\u6392\u800c\u662f\u5728\u4e24\u6392\u4e00\u6392\u4e00\u4e2a\uff0c\u8fd9\u4e0d\u662f\u4e8c\u5206\u56fe\u662f\u4ec0\u4e48\u5462\uff1f\n\n\u4e8c\u5206\u56fe\u80fd\u8003\u4ec0\u4e48\uff0c\u6700\u5927\u5339\u914d\uff0c\u6700\u5c0f\u8d39\u7528\u6700\u5927\u5339\u914d\uff0c\u6700\u5c0f\u5272\uff0c\u8fd9\u9053\u9898\u5f53\u7136\u662f\u6700\u5c0f\u5272\u5566\u3002\n\n\u5947\u6570\u53f7\u53e3\u8fde\u6e90\u70b9\uff0c\u6d41\u91cf\u662f\u5230\u8fd9\u4e2a\u53e3\u7684\u4ee3\u4ef7\uff0c\u5076\u6570\u53f7\u53e3\u8fde\u6c47\u70b9\uff0c\u6d41\u91cf\u540c\u4e0a\u3002\n\n\u7136\u540e\u6ca1\u6709\u4e00\u4e2a\u7a7a\u8154\u5728\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u65e0\u9650\u7684\u8fb9\uff0c\u8dd1\u4e00\u4e2a\u6700\u5c0f\u5272/\u6700\u5927\u6d41\u5c31\u89e3\u51fa\u4e86\u8fd9\u4e00\u90e8\u5206\u4e86\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff0c\u4f60\u60f3\u4e00\u4e0b\u628a\u6e90\u70b9\u548c\u6c47\u70b9\u5f53\u6210\u654c\u65b9\u603b\u90e8\uff0c\u7279\u79cd\u90e8\u961f\u8fc7\u53bb\u628a\u90a3\u4e2a\u5730\u9053\u53e3\u7ed9\u5360\u6389\u4e86\uff0c\u7136\u540e\u5c31\u76f8\u5f53\u4e8e\u6240\u6709\u7684\u7528\u8fd9\u4e2a\u7a7a\u8154\u5f53\u51fa\u5165\u53e3\u7684\u90fd\u5931\u53bb\u4e86\u4e0e\u603b\u90e8\u7684\u8fde\u63a5\u7136\u540e\u5c31\u53ea\u6709\u88ab\u4e56\u4e56\u5360\u9886\u5566\u3002\n\n\u7136\u540e\u4e3a\u4e86\u5360\u9886\u6240\u6709\u7a7a\u8154\u5c31\u662f\u8981\u8ba9\u6240\u6709\u7684\u7a7a\u8154\u90fd\u4e0d\u80fd\u548c\u603b\u90e8\u53d6\u5f97\u8fde\u63a5\u4e5f\u5c31\u662f\u8ba9\u8fd9\u4e2a\u56fe\u4e0d\u8fde\u901a\u3002\n\n\u5047\u82e5\u8fd9\u4e2a\u56fe\u8fde\u901a\uff0c\u90a3\u4e48\u8bf4\u660e\u81f3\u5c11\u6709\u4e00\u4e2a\u7a7a\u8154\u8fd8\u662f\u80fd\u548c\u603b\u90e8\u8054\u7cfb\u4e0a\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u8bf4\u660e\u8fd9\u4e2a\u7a7a\u8154\u8fd8\u6ca1\u6709\u88ab\u5360\u9886\u6240\u4ee5\u4e0d\u7b26\u5408\u9898\u610f\u3002\n\n\u7136\u540e\u5047\u5982\u6709\u4e00\u4e2a\u5730\u9053\u53e3\u4f60\u6839\u672c\u65e0\u6cd5\u5230\u8fbe\u90a3\u5c31\u8ba9\u5272\u6389\u5b83\u7684\u4ee3\u4ef7\u8868\u793a\u4e3a\u65e0\u9650\u5927\uff0c\u7136\u540e\u5047\u5982\u6700\u5c0f\u5272\u8dd1\u51fa\u6765\u5c45\u7136\u662f\u4e2a\u65e0\u9650\u5927\u90a3\u4e48\u8bf4\u660e\u5fc5\u987b\u8981\u5360\u4e00\u4e2a\u4f60\u65e0\u6cd5\u5230\u8fbe\u7684\u5730\u9053\u53e3\uff0c\u8fd9\u4e2a\u65f6\u5019\u8f93\u51fa $-1$ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540e\u8fd9\u9053\u878d\u5408\u9898\u5c31\u5199\u51fa\u6765\u4e86\u3002\n\nover\uff01\n\n~~\u867d\u7136\u4f46\u662f\uff0c\u4e0a\u4ee3\u7801\u5427~~\n\n```cpp\n#include<bits/stdc++.h>\n#define maxx 1000001\n#define ahhhhhh 114514114.99  //\u6076\u81ed\nusing namespace std;\nint fi[maxx],nx[maxx],to[maxx],t[maxx],s[maxx],in[maxx][2],tot;//\u539f\u56fe\u7684\u8fb9\u6570\u7ec4\nint fi_dinic[maxx],nx_dinic[maxx],to_dinic[maxx],tot_dinic=1,depth[maxx];//\u7f51\u7edc\u6d41\u8fb9\u6570\u7ec4\nbool check[400][400];//\u7f51\u7edc\u6d41\u8fde\u8fb9\u65f6\u5224\u91cd\nint n,m;\nint S=290,T=299;\ndouble dis[maxx],dis_goal[maxx],val[maxx];//dis\uff1a\u627e\u6700\u77ed\u8def\u65f6\u7684\u6570\u7ec4 dis_goal\uff1a\u5230\u6bcf\u4e2a\u5730\u9053\u53e3\u6700\u5c0f\u4ee3\u4ef7 val\uff1a\u6bcf\u6761\u8fb9\u6d41\u91cf\u4e0a\u9650\nvoid link_mmp(int a,int b,int c,int d)//\u539f\u56fe\u7684\u8fb9 \n{\n\tnx[++tot]=fi[a];\n\tfi[a]=tot;\n\tto[tot]=b;\n\tt[tot]=c;\n\ts[tot]=d;\n}\nvoid link_dinic(int a,int b,double c)//\u6700\u5927\u6d41\u7684\u8fb9 \n{\n\tnx_dinic[++tot_dinic]=fi_dinic[a];\n\tfi_dinic[a]=tot_dinic;\n\tto_dinic[tot_dinic]=b;\n\tval[tot_dinic]=c;\n}\ndouble find_shortest(double now,int goal)//\u62d3\u6251\u627e\u6700\u77ed\u8def \n{\n\tqueue<int>que;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tin[i][0]=in[i][1];\n\t\tdis[i]=ahhhhhh;\n\t\tif(in[i][0]==0)\n\t\t{\n\t\t\tque.push(i);\n\t\t}\n\t}\n\tdis[n]=0.0;\n\twhile(!que.empty())\n\t{\n\t\tint x=que.front();\n\t\tque.pop();\n\t\tfor(int i=fi[x];i;i=nx[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tdis[v]=min(dis[v],dis[x]+(double)t[i]-(double)(s[i]*now));\n\t\t\tin[v][0]--;\n\t\t\tif(in[v][0]==0)\n\t\t\t{\n\t\t\t\tque.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[goal];\n}\nvoid find_least(int goal)//01\u89c4\u5212 \n{\n\tdouble L=0.0,R=10.0;\n\tdis_goal[goal]=ahhhhhh;\n\twhile(L<=R)\n\t{\n\t\tdouble M=(L+R)/2.0;\n\t\tif(find_shortest(M,goal)>1e-8)\n\t\t{\n\t\t\tL=M+0.00005;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdis_goal[goal]=M;\n\t\t\tR=M-0.00005;\n\t\t}\n\t}\n}\nbool bfs()//\u6700\u5927\u6d41dep\u6807\u8bb0 \n{\n\tqueue<int>que;\n\tmemset(depth,0,sizeof(depth));\n\tdepth[S]=1;\n\tque.push(S);\n\twhile(!que.empty())\n\t{\n\t\tint x=que.front();\n\t\tque.pop();\n\t\tfor(int i=fi_dinic[x];i;i=nx_dinic[i])\n\t\t{\n\t\t\tint v=to_dinic[i];\n\t\t\tif(val[i]!=0.0&&!depth[v])\n\t\t\t{\n\t\t\t\tdepth[v]=depth[x]+1;\n\t\t\t\tque.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn depth[T];\n}\ndouble dinic(int x,double ins)//dinic \n{\n\tif(x==T)\n\t{\n\t\treturn ins;\n\t}\n\tdouble out=0.0;\n\tfor(int i=fi_dinic[x];i&&ins!=0.0;i=nx_dinic[i])\n\t{\n\t\tint v=to_dinic[i];\n\t\tif(val[i]!=0.0&&depth[v]==depth[x]+1)\n\t\t{\n\t\t\tdouble res=dinic(v,min(ins,val[i]));\n\t\t\tval[i]-=res;\n\t\t\tval[i^1]+=res;\n\t\t\tins-=res;\n\t\t\tout+=res;\n\t\t}\n\t}\n\tif(out==0.0)\n\t{\n\t\tdepth[x]=0;\n\t}\n\treturn out;\n}\nint main()\n{\n\tint a,b,c,d;\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>a>>b>>c>>d;\n\t\tin[b][1]++;\n\t\tlink_mmp(a,b,c,d);\n\t}\n\tint n1,m1,x,y,s=0;\n\tcin>>m1>>n1;\n\tfor(int i=1;i<=n1;i++)\n\t{\n\t\tfind_least(i);\n\t}\n\tfor(int i=1;i<=m1;i++)\n\t{\n\t\tcin>>x>>y;\n\t\tif(!check[S][x])\n\t\t{\n\t\t\tlink_dinic(S,x,dis_goal[x]);\n\t\t\tlink_dinic(x,S,0.0);\n\t\t\tcheck[S][x]=1;\n\t\t\tcheck[x][S]=1;\n\t\t}\n\t\tif(!check[T][y])\n\t\t{\n\t\t\tlink_dinic(y,T,dis_goal[y]);\n\t\t\tlink_dinic(T,y,0.0);\n\t\t\tcheck[T][y]=1;\n\t\t\tcheck[y][T]=1;\n\t\t}\n\t\tif(!check[x][y])\n\t\t{\n\t\t\tlink_dinic(x,y,ahhhhhh);\n\t\t\tlink_dinic(y,x,0.0);\n\t\t\tcheck[x][y]=1;\n\t\t\tcheck[y][x]=1;\n\t\t}\n\t}\n\tdouble ans=0.0;\n\twhile(bfs())\n\t{\n\t\tans+=dinic(S,ahhhhhh);\n\t}\n\tif(ans>1e7)\n\t{\n\t\tcout<<-1;\n\t\treturn 0;\n\t}\n\tprintf(\"%.1f\",ans);\n}\n```\n",
        "postTime": 1635308383,
        "uid": 167279,
        "name": "Danno0v0",
        "ccfLevel": 7,
        "title": "P2494\u9898\u89e3"
    },
    {
        "content": "~~\u8bb2\u771f\uff1f\u6ca1\u6709\u9898\u89e3\uff1f~~\n\n\u6240\u4ee5\u9898\u610f\u5c31\u662f\u7ed9\u4f60\u4e24\u6392\u70b9\uff0c\u4e00\u5806\u8fde\u63a5\u8fd9\u4e24\u6392\u70b9\u7684\u8fb9\uff08\u4e8c\u5206\u56fe\uff1f\uff09\n\n\u8fd8\u6709\u53e6\u4e00\u5806\u9664\u4e86\u8ba1\u7b97\u57fa\u5730\u5230\u67d0\u4e2a\u5165\u53e3\u7684\u6700\u5c0f\u5371\u9669\u503c\u4ee5\u5916\u5c41\u7528\u6ca1\u6709\u7684\u8fb9\n\n\u4e8e\u662f\u6211\u4eec\u60f3\uff0c\u8981\u662f\u5efa\u4e2a\u6e90\u6c47\u70b9\uff0c\u5b8c\u4e86\u5947\u6570\u70b9\uff08\u7b2c\u4e00\u6392\u5165\u53e3\uff09\u8fde\u6e90\u70b9\uff0c\u6d41\u91cf\u4e3a\n\n\u57fa\u5730\u5230\u8fd9\u4e2a\u5165\u53e3\u7684\u6700\u5c0f\u5371\u9669\u503c\uff1b\u7b2c\u4e8c\u6392\u5165\u53e3\uff08\u5076\u6570\u70b9\uff09\u8fde\u6c47\u70b9\uff0c\u6d41\u91cf\u8fd8\u662f\n\n\u57fa\u5730\u5230\u8fd9\u4e2a\u5165\u53e3\u7684\u6700\u5c0f\u5371\u9669\u503c\uff0c\u5b8c\u4e86\u8fde\u63a5x,y\u7684\u7a7a\u8154\u5c31\u662f\u8fde\u63a5x,y\u6d41\u91cf\u4e3ainf\n\n\u7684\u8fb9.....\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e48\u5efa\u6a21\u4e4b\u540e\u8dd1\u4e2a\u6700\u5c0f\u5272\u5c31\u662f\u7b54\u6848\u3002\u4e3a\u5565\uff1f\n\n\u56e0\u4e3a\u8fd9\u6837\u5efa\u56fe\u780d\u6389\u4e00\u6761\u8fde\u6e90\u70b9\u7684\u8fb9=\u8fd9\u6761\u8fb9\u8fde\u7684\u53e6\u4e00\u4e2a\u70b9\u8fde\u7684\u7a7a\u8154\u4e0d\u80fd\u8d70\u4e86=\u63a2\u7d22\u4e86\n\n\u4e0e\u5b83\u76f8\u8fde\u7684\u7a7a\u8154\uff0c\u4ee3\u4ef7\u4e3a\u57fa\u5730\u5230\u8fd9\u4e2a\u5165\u53e3\u7684\u6700\u5c0f\u5371\u9669\u5ea6\uff1b\u780d\u6389\u4e00\u6761\u8fde\u6c47\u70b9\u7684\u8fb9\u4e5f\u540c\u7406\n\n\u5b8c\u4e86\u73b0\u5728\u56fe\u5efa\u597d\u4e86\uff0c\u6700\u5c0f\u5272\u786e\u5b9a\u597d\u4e86\uff0cdinic\u677f\u5b50\u9b54\u6539\u597d\u4e86\uff0c\u5c31\u5dee\u600e\u4e48\u6c42\u57fa\u5730\n\n\u5230\u67d0\u4e2a\u5165\u53e3\u7684\u6700\u5c0f\u5371\u9669\u503c\u4e86\n\n\u5f53\u7136\uff0c\u4f60\u662f\u4e0d\u4f1a\u76f4\u63a5\u6c42\u89e3\u7684\uff0c\u4f46\u4f60\u662f\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2a\u89e3\u662f\u5426\u5408\u6cd5\u554a\n\n\u5047\u8bbe\u4f60\u641e\u4e86\u4e2a\u89e3re,\u5982\u679c\u5b58\u5728\u4e00\u5806\u8fb9\uff08\u4e3a\u4e86\u65b9\u4fbf\uff0c\u628a\u4ed6\u4eec\u7f16\u53f7\u4e3a1\u81f3n\uff09\u4f7f\u5f97\n\n(t1+t2+..+tn)/(s1+s2+...+sn)<=re\n\n\u4e5f\u5c31\u662f\n\n```\nt1-s1*re+t2-s2*re+...+tn-sn*re<=0\n```\n\u5c31\u8bf4\u660e\u8fd8\u6709\u66f4\u5c0f\u7684\u89e3\n\n\u8fd9\u4e2a\u5f0f\u5b50\u62ff\u6bcf\u6761\u8fb9\u7684t\u51cfs\u4e58re\u5f53\u8fb9\u6743\u8dd1\u6700\u77ed\u8def\uff0c\u8981\u662f\u5230\u7ec8\u70b9\u6700\u77ed\u8def\u662f\u8d1f\u7684\u5c31\u4ee3\u8868\n\n\u8fd9\u4e2are\u8fd8\u53ef\u4ee5\u66f4\u5c0f\uff0c\u53ef\u4ee5\u5728\u8dd1\u6700\u77ed\u8def\u65f6\u4e00\u65e6\u62d3\u5c55\u5230\u7ec8\u70b9\uff08\u4e00\u4e2a\u5165\u53e3\uff09\u53d1\u73b0\u8def\u5f84\n\n\u957f\u662f\u8d1f\u6570\u5c31\u6012\u9000\uff0c\u6548\u7387\u60ca\u4eba\u3002\n\n\u5b8c\u4e86\u4f60\u5bf9\u6bcf\u4e00\u4e2a\u5165\u53e3\u90fd\u4e8c\u5206\u4e00\u4e0b\u6c42\u51fa\u6700\u5c0f\u5371\u9669\u503c\uff0c\u5e26\u5230\u4e0a\u9762\u7684\u5efa\u56fe\u91cc\uff0c\u8fd9\u9898\u5c31\n\n\u53eb\u4f60\u6c34\u8fc7\u53bb\u4e86\uff0c\u4e07\u5c81\uff01\n\n\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100000+10;\ntypedef double ddf;\nint n,m,k,st,ed,n1,m1;\nconst ddf eps=1e-8;\nddf val[N];\nnamespace smz{\n    const int N=100000+10;\nconst int fuck=0x3f3f3f3f;\nconst int inf=0x7fffffff;\n\n\nstruct edge{\n    int to,next;ddf cap;\n}g[N*10];\nint head[N],tot=2;\nvoid add(int st,int ed,ddf cp){\n    g[tot].to=ed;\n    g[tot].next=head[st];\n    g[tot].cap=cp;\n    head[st]=tot++;\n}\nvoid ins(int st,int ed,ddf cp){\n    add(st,ed,cp);\n    add(ed,st,0);\n}\n\nvoid init(){\n    memset(head,0,sizeof(head));\n    tot=2;\n}\nint lv[N];\nqueue<int>q;\nbool bfs(int s,int t){\n    memset(lv,0,sizeof(lv));\n    lv[s]=1;\n    while(!q.empty())q.pop();\n    q.push(s);\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        for(int i=head[x];i;i=g[i].next){\n            int v=g[i].to;\n            if(g[i].cap>0&& !lv[v]){\n                lv[v]=lv[x]+1;\n                q.push(v);\n            }\n        }\n    }\n    return lv[t];\n}\n\nddf dfs(int x,ddf mf){\n    if(!mf||x==ed)return mf;\n    ddf tmp=0;\n    for(int i=head[x];i;i=g[i].next){\n        int v=g[i].to;\n        if(g[i].cap&&lv[v]==lv[x]+1){\n            ddf f=dfs(v,min(mf,g[i].cap));\n            tmp+=f;\n            mf-=f;\n            g[i].cap-=f;\n            g[i^1].cap+=f;\n        }\n    }\n    return tmp;\n}\n\nddf dinic(int s,int t){\n    ddf r=0;\n    while(bfs(s,t))r+=dfs(s,1e50);\n    return r;\n}\n}\n\nstruct edge{\n    int to,next;ddf t,s;\n}g[N<<1];\nint head[N],tot=1;\nvoid add(int st,int ed,ddf t,ddf s){\n    g[tot]=(edge){ed,head[st],t,s};\n    head[st]=tot++;\n}\nqueue<int>q;\nbool inq[N];\nddf dis[N];\nbool sofa(int s,int t,ddf mid){\n    for(int i=1;i<=n;i++)dis[i]=1e50;\n    memset(inq,0,sizeof(inq));\n    while(!q.empty())q.pop();\n    dis[s]=0;inq[s]=1;q.push(s);\n    while(!q.empty()){\n        int x=q.front();q.pop();inq[x]=0;\n        for(int i=head[x];i;i=g[i].next){\n            int v=g[i].to;\n            ddf xs=g[i].s,xt=g[i].t;\n            if(dis[v]>dis[x]+xt-xs*mid){\n                dis[v]=dis[x]+xt-xs*mid;\n                if(v==t&&dis[v]<eps)return 1;\n                if(!inq[v])inq[v]=1,q.push(v);\n            }\n        }\n    }\n    return dis[t]<-eps;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    int x,y;\n    ddf s,t;\n    for(int i=1;i<=m;i++){\n    \tscanf(\"%d%d%lf%lf\",&x,&y,&t,&s);\n    \tadd(x,y,t,s);\n    }\n    scanf(\"%d%d\",&m1,&n1);\n    for(int i=1;i<=n1;i++){\n        ddf l=0,r=100,mid;\n        while(r-l>1e-4){\n            mid=(l+r)*0.5;\n            if(sofa(n,i,mid))r=mid;\n            else l=mid;\n        }\n        if(dis[i]==1e50)val[i]=1e50;\n        else val[i]=(l+r)/2.0;\n        //printf(\"val[%d]=%lf\\n\",i,val[i]);\n    }\n    smz::init();\n    st=n1+1,ed=st+1;\n    for(int i=1;i<=m1;i++){\n        scanf(\"%d%d\",&x,&y);\n        if(y&1)swap(x,y);\n        if(val[x]==1e50&&val[y]==1e50){\n            printf(\"-1\");return 0;\n        }\n        smz::ins(x,y,1e50);\n    }\n    for(int i=1;i<=n1;i++){\n        if(i&1)smz::ins(st,i,val[i]);\n        else smz::ins(i,ed,val[i]);\n    }\n    printf(\"%.1lf\",smz::dinic(st,ed));\n    return 0;\n}\n```",
        "postTime": 1521942675,
        "uid": 38725,
        "name": "xiwang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2494 \u3010[SDOI2011]\u4fdd\u5bc6\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u5173\u4e8e\u8fd9\u4e2a\u5371\u9669\u6027\uff0c\u957f\u5f97\u5c31\u5f88\u50cf\u4e2a\u5206\u6570\u89c4\u5212\u3002\u4e8c\u5206\u4e00\u4e0b\u7b54\u6848$k$\uff0c\u53d1\u73b0\u4e8c\u5206\u7684\u7b54\u6848\u8fd8\u53ef\u4ee5\u7f29\u5c0f\u7684\u6761\u4ef6\u662f\u5b58\u5728\u4e00\u6761\u8def\u5f84$\\frac{\\sum t}{\\sum s} \\leq k$\u4e5f\u5c31\u662f$\\sum t \\leq \\sum sk$\uff0c\u4e5f\u5c31\u662f\u628a\u8fb9\u6743\u53d8\u6210$t-sk$\u540e\u8dd1\u6700\u77ed\u8def\uff0c\u5982\u679c\u6211\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5c0f\u4e8e0\u5219\u4e8c\u5206\u7684\u7b54\u6848\u8fd8\u53ef\u4ee5\u7f29\u5c0f\u3002\n\n\u65e2\u7136\u6709\u8d1f\u6743\u8fb9\uff0c\u600e\u4e48\u8dd1\u6700\u77ed\u8def\u5462\uff1f~~SPFA\uff1f\u4e0d,SPFA\u5df2\u7ecf\u6b7b\u4e86\uff01~~ \u7531\u4e8e\u539f\u56fe\u662f\u4e00\u4e2aDAG\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u62d3\u6251\u6392\u5e8f\u6c42\u6700\u77ed\u8def\u3002\n\n\u57fa\u5730\u51fa\u5165\u53e3\u6709\u5f88\u591a\u4e2a\uff0c\u90a3\u5c31\u6574\u4f53\u4e8c\u5206\u597d\u5566\uff01\uff08\u867d\u7136\u5176\u5b9e\u76f4\u63a5\u4e00\u4e2a\u4e00\u4e2a\u4e8c\u5206\u4e5f\u6ca1\u95ee\u9898\uff09\n\n\u7136\u540e\u6211\u4eec\u5c31\u6c42\u51fa\u4e86\u5230\u6bcf\u4e00\u4e2a\u51fa\u5165\u53e3\u7684\u6700\u5c0f\u5371\u9669\u6027\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u4e00\u4e2a\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u7684\u5efa\u56fe\u3002\u9009\u62e9\u7c7b\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6700\u5c0f\u5272\u5272\u54ea\u6761\u8fb9\u7684\u9009\u62e9\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u628a\u5947\u6570\u7f16\u53f7\u51fa\u5165\u53e3\u4e0e\u6e90\u70b9\u76f8\u8fde\uff0c\u5076\u6570\u7f16\u53f7\u51fa\u5165\u53e3\u4e0e\u6c47\u70b9\u76f8\u8fde\uff0c\u6d41\u91cf\u90fd\u662f\u5230\u8fd9\u4e2a\u51fa\u5165\u53e3\u7684\u6700\u5c0f\u5371\u9669\u6027\u3002\u5982\u679c\u4e00\u4e2a\u7a7a\u8154\u6709$a$\u548c$b$\u4e24\u4e2a\u51fa\u5165\u53e3\uff0c\u5219\u5728$a$\u4e0e$b$\u4e4b\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$inf$\u7684\u8fb9\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define RI register int\nint read() {\n\tint q=0;char ch=' ';\n\twhile(ch<'0'||ch>'9') ch=getchar();\n\twhile(ch>='0'&&ch<='9') q=q*10+ch-'0',ch=getchar();\n\treturn q;\n}\ntypedef double db;\nconst db eps=1e-3;\nconst int N=705,M=100005,inf=0x3f3f3f3f;\nint n,m,n1,m1;\ndb dis[N],ans;\n\nnamespace graph{\n\tint tot,top,js;\n\tint h[N],ne[M],to[M],tt[M],ss[M],du[N],st[N],p[N];\n\tint q[N],k1[N],k2[N];db f[N];\n\tvoid add(int x,int y,int s,int t)\n\t\t{to[++tot]=y,ne[tot]=h[x],h[x]=tot,ss[tot]=s,tt[tot]=t,++du[y];}\n\tvoid topsort() {//\u62d3\u6251\u6392\u5e8f\n\t\tfor(RI i=1;i<=n;++i) if(!du[i]) st[++top]=i;\n\t\twhile(top) {\n\t\t\tint x=st[top];--top,p[++js]=x;\n\t\t\tfor(RI i=h[x];i;i=ne[i]) {\n\t\t\t\t--du[to[i]];\n\t\t\t\tif(!du[to[i]]) st[++top]=to[i];\n\t\t\t}\n\t\t}\n\t}\n\tvoid shortest_way(db kans) {//\u6c42\u6700\u77ed\u8def\n\t\tfor(RI i=1;i<=n;++i) f[i]=inf; f[n]=0;\n\t\tfor(RI i=1;i<=n;++i) {\n\t\t\tint x=p[i];\n\t\t\tfor(RI j=h[x];j;j=ne[j])\n\t\t\t\tf[to[j]]=min(f[to[j]],f[x]+(db)tt[j]-(db)ss[j]*kans);\n\t\t}\n\t}\n\tvoid slove(db l,db r,int ql,int qr) {//\u6574\u4f53\u4e8c\u5206\n\t\tif(ql>qr) return;\n\t\tif(fabs(r-l)<eps) {for(RI i=ql;i<=qr;++i) dis[q[i]]=(l+r)/2.0;return;}\n\t\tdb mid=(l+r)/2.0;int js1=0,js2=0;\n\t\tshortest_way(mid);\n\t\tfor(RI i=ql;i<=qr;++i)\n\t\t\tif(f[q[i]]<0) k1[++js1]=q[i];\n\t\t\telse k2[++js2]=q[i];\n\t\tfor(RI i=1;i<=js1;++i) q[ql+i-1]=k1[i];\n\t\tfor(RI i=1;i<=js2;++i) q[ql+js1+i-1]=k2[i];\n\t\tslove(l,mid,ql,ql+js1-1),slove(mid,r,ql+js1,qr);\n\t}\n\tvoid work() {\n\t\ttopsort();\n\t\tfor(RI i=1;i<=n1;++i) q[i]=i;\n\t\tslove(0,11,1,n1);\n\t\tfor(RI i=1;i<=n1;++i) if(dis[i]-eps>10.0) dis[i]=inf;//\u4e0d\u53ef\u8fbe\u7684\u70b9\n\t}\n}\n\nnamespace maxflow{\n\tint S,T,tot=1;\n\tint h[N],ne[M<<1],to[M<<1],lev[N],que[N];db flow[M<<1];\n\tvoid add(int x,int y,db z) {\n\t\tto[++tot]=y,ne[tot]=h[x],h[x]=tot,flow[tot]=z;\n\t\tto[++tot]=x,ne[tot]=h[y],h[y]=tot,flow[tot]=0;\n\t}\n\tint bfs() {\n\t\tfor(RI i=1;i<=T;++i) lev[i]=0;\n\t\tint he=1,ta=1;lev[S]=1,que[1]=S;\n\t\twhile(he<=ta) {\n\t\t\tint x=que[he];++he;\n\t\t\tif(x==T) return 1;\n\t\t\tfor(RI i=h[x];i;i=ne[i])\n\t\t\t\tif(fabs(flow[i])>eps&&!lev[to[i]])\n\t\t\t\t\tlev[to[i]]=lev[x]+1,que[++ta]=to[i];\n\t\t}\n\t\treturn 0;\n\t}\n\tdb dfs(int x,db liu) {\n\t\tif(x==T) return liu;\n\t\tdb sum=0;\n\t\tfor(RI i=h[x];i;i=ne[i])\n\t\t\tif(fabs(flow[i])>eps&&lev[to[i]]==lev[x]+1) {\n\t\t\t\tdb kl=dfs(to[i],min(flow[i],liu-sum));\n\t\t\t\tflow[i]-=kl,flow[i^1]+=kl,sum+=kl;\n\t\t\t\tif(fabs(liu-sum)<eps) return sum;\n\t\t\t}\n\t\tif(fabs(sum)<eps) lev[x]=-1;\n\t\treturn sum;\n\t}\n\tvoid work() {//\u7f51\u7edc\u6d41\u5efa\u56fe\n\t\tS=n1+1,T=n1+2;int x,y;\n\t\tfor(RI i=1;i<=n1;i+=2) add(S,i,dis[i]);\n\t\tfor(RI i=2;i<=n1;i+=2) add(i,T,dis[i]);\n\t\tfor(RI i=1;i<=m1;++i) {\n\t\t\tx=read(),y=read();\n\t\t\tif(!(x&1)) swap(x,y);\n\t\t\tadd(x,y,inf);\n\t\t}\n\t\twhile(bfs()) ans+=dfs(S,inf);\n\t}\n}\n\nint main()\n{\n    n=read(),m=read();\n    for(RI i=1;i<=m;++i) {\n    \tint x=read(),y=read(),t=read(),s=read();\n    \tgraph::add(x,y,s,t);\n    }\n    m1=read(),n1=read();\n    graph::work();maxflow::work();\n    if(ans>1e9) puts(\"-1\");\n    else printf(\"%.1lf\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1541465286,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2494 \u3010[SDOI2011]\u4fdd\u5bc6\u3011"
    },
    {
        "content": "\u597d\u9898\u3002\u8003\u5bdf\u5206\u6570\u89c4\u5212\u548c\u7f51\u7edc\u6d41\u3002\n\n\u4e0e\u8fd9\u9898\u7c7b\u4f3c\u7684\u5206\u6570\u89c4\u5212\u9898\u6709\uff1a\n\n- [P2868 [USACO07DEC]Sightseeing Cows G](https://www.luogu.com.cn/problem/P2868)\n\n- [P3199 [HNOI2009]\u6700\u5c0f\u5708](https://www.luogu.com.cn/problem/P3199)\n\n- [P3288 [SCOI2014]\u65b9\u4f2f\u4f2f\u8fd0\u6930\u5b50](https://www.luogu.com.cn/problem/P3288)\n\n- [P3705 [SDOI2017]\u65b0\u751f\u821e\u4f1a](https://www.luogu.com.cn/problem/P3705)\n\n\u4e0e\u8fd9\u9898\u7c7b\u4f3c\u7684\u7f51\u7edc\u6d41\u6709\uff1a\n\n- [P1361 \u5c0fM\u7684\u4f5c\u7269](https://www.luogu.com.cn/problem/P1361)\n\n- [P1646 \\[\u56fd\u5bb6\u96c6\u8bad\u961f\\]happiness](https://www.luogu.com.cn/problem/P1646)\n\n- [P2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898](https://www.luogu.com.cn/problem/P2774)\n\n- - -\n\n\u5982\u679c\u505a\u4e86\u4e0a\u9762\u7684\u7f51\u7edc\u6d41\u9898\u76ee\u7684\u8bdd\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u8fd9\u4e2a\u9898\u7684\u4e00\u4e2a\u5efa\u6a21\u65b9\u6cd5\uff1a\u8bb2\u5947\u6570\u70b9\u548c\u539f\u70b9\u4e4b\u95f4\u3001\u5076\u6570\u70b9\u548c\u6c47\u70b9\u4e4b\u95f4\u90fd\u8fde\u4e0a\u6d41\u91cf\u4e3a\u57fa\u5730\u5230\u5947\u6570\u70b9\u6216\u5076\u6570\u70b9\u7684\u6700\u5c0f\u5371\u9669\u503c\u7684\u8fb9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7a7a\u8154\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u90fd\u8fde\u4e0a\u6d41\u91cf\u4e3a\u6b63\u65e0\u7a77\u5927\u7684\u8fb9\uff0c\u7136\u540e\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\u3002\u6700\u5c0f\u5272\u4e3a\u6b63\u65e0\u7a77\u5927\u5219\u65e0\u89e3\u3002\u5982\u679c\u5bf9\u7f51\u7edc\u6d41\u4e86\u89e3\u4e0d\u6df1\u5165\u7684\u8bdd\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u901a\u4fd7\u6613\u61c2\u7684\u65b9\u6cd5\u6765\u7406\u89e3\u8fd9\u4e2a\u505a\u6cd5\uff1a\u7a7a\u8154\u8fde $+\\infty$ \u662f\u4e3a\u4e86\u4e0d\u5272\u6389\u8fd9\u6761\u8fb9\uff0c\u4e5f\u5c31\u53ea\u80fd\u82b1\u8d39\u4ece\u6e90\u3001\u6c47\u70b9\u8fde\u51fa\u7684\u8fb9\u7684\u8fb9\u6743\u5272\u6389\u8fd9\u4e9b\u8fb9\uff0c\u5176\u4e2d\u82b1\u8d39\u8fb9\u6743\u5272\u6389\u4e00\u6761\u8fb9\u53ef\u4ee5\u88ab\u770b\u505a\u82b1\u8d39\u5371\u9669\u503c\u5360\u9886\u8fd9\u4e2a\u70b9\u3002\u5982\u679c\u5176\u4ed6\u8fb9\u90fd\u88ab\u5272\u5b8c\uff0c\u53ea\u80fd\u5272\u8fb9\u6743\u4e3a $+\\infty$ \u7684\u8fb9\uff0c\u90a3\u4e48\u7b54\u6848\u5fc5\u7136\u5927\u4e8e $+\\infty$ \uff0c\u4e5f\u5373\u65e0\u89e3\u3002\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u6c42\u51fa\u8fb9\u6743\uff08\u5373\u8d77\u70b9 $n$ \u5230\u5176\u4ed6\u70b9\u7684\u6700\u5c0f\u5371\u9669\u503c\uff09\u5462\uff1f\u663e\u7136\u5e94\u8be5\u7528\u5206\u6570\u89c4\u5212\u3002\u4e8c\u5206\u6700\u5c0f\u5371\u9669\u503c\uff0c\u5047\u8bbe\u6b64\u65f6\u4e8c\u5206\u5230\u7684\u503c\u4e3a $mid$ \uff0c\u7531\u9898\u610f\u6709\uff1a\n\n$$\\begin{aligned}\\dfrac{\\sum t}{\\sum s}&\\ge mid\\\\\\sum t&\\ge mid\\times\\sum s\\\\\\sum t-mid\\times\\sum s&\\ge0\\end{aligned}$$\n\n\u4e0a\u9762\u8fd9\u4e9b\u90fd\u662f\u5206\u6570\u89c4\u5212\u7684\u57fa\u672c\u5957\u8def\u3002\u7531\u9898\u610f\u6709\u6574\u4e2a\u56fe\u662f DAG \uff0c\u6545\u5c06\u6574\u4e2a\u56fe\u7684\u8fb9\u6743\u4f5c\u4e3a $\\sum t-mid\\times\\sum s$ \uff0c\u62d3\u6251\u6392\u5e8f\u6c42\u5f97 $n$ \u5230\u8be5\u70b9\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6709\u4e00\u4e9b\u70b9\u9700\u8981\u88ab\u6ce8\u610f\uff1a\n\n- \u6bd4\u8f83\u5927\u5c0f\u5173\u7cfb\u3001\u5224\u65ad\u4e8c\u5206\u662f\u5426\u7ed3\u675f\u9700\u8981\u4f7f\u7528 $\\operatorname{EPS}$ \uff0c\u5efa\u8bae\u8bbe\u4e3a $10^{-5}$ ;\n- \u5982\u679c\u8d77\u70b9\u4e0e\u67d0\u70b9\u4e0d\u53ef\u8fbe\uff0c\u8981\u5c06\u6700\u5c0f\u5371\u9669\u503c\u8bbe\u4e3a $+\\infty$ \u3002\n- \u5728\u6211\u7684\u4ee3\u7801\u4e2d\u5c06\u7f51\u7edc\u6d41\u7528\u7684\u56fe\u4e0e\u6c42\u6700\u5c0f\u5371\u9669\u503c\u7528\u7684\u56fe\u5171\u7528\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u975e\u5e38\u597d\u7684\u4e60\u60ef\uff0c\u5982\u679c\u975e\u8981\u8fd9\u4e48\u505a\uff0c\u8bf7\u5728\u6bcf\u6b21\u4f7f\u7528\u524d\u5c06\u56fe\u6e05\u7a7a\u3002\n- \u524d\u6587\u63d0\u5230\uff0c\u5224\u65ad\u6709\u65e0\u89e3\u8981\u4e0e $+\\infty$ \u6bd4\u8f83\u5927\u5c0f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7531\u4e8e\u7cbe\u5ea6\u8bef\u5dee\uff0c\u4ee3\u8868 $+\\infty$ \u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u5e38\u91cf\u53ef\u80fd\u56e0\u4f1a\u51fa\u73b0\u8bef\u5dee\u800c\u53d8\u5c0f\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u4e0e\u4ee3\u8868 $+\\infty$ \u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u5e38\u91cf\u7684\u4e00\u534a\u8fdb\u884c\u6bd4\u8f83\u3002\n\n\n```cpp\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <cmath>\n#include <queue>\n#include <map>\nusing namespace std;\nconst double EPS = 1e-5;\nconst double INF = 1e18;\nconst int MAXN = 7e2;\nconst int MAXM = 1e5;\nstruct edge\n{\n\tint u,v;\n\tdouble a,b;\n}e[MAXM + 5];\nvector<pair<int,double> >graph[MAXN + 5];\nint ind[MAXN + 5];\ndouble f[MAXN + 5];\ndouble dis[MAXN + 5];\nint n,m,m1,n1;\nbool check(double x,int goal)\n{\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tf[i] = INF;\n\t\tind[i] = 0;\n\t\tgraph[i].clear();\n\t}\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tgraph[e[i].u].push_back(make_pair(e[i].v,e[i].a - e[i].b * x));\n\t\tind[e[i].v]++;\n\t}\n\tqueue<int>q;\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tif(ind[i] == 0)\n\t\t{\n\t\t\tq.push(i);\n\t\t}\n\t}\n\tf[n] = 0;\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0;i < graph[u].size();i++)\n\t\t{\n\t\t\tint v = graph[u][i].first;\n\t\t\tdouble w = graph[u][i].second;\n\t\t\tind[v]--;\n\t\t\tf[v] = min(f[v],f[u] + w);\n\t\t\tif(ind[v] == 0)\n\t\t\t{\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn f[goal] > -EPS;\n}\nmap<pair<int,int>,pair<int,int> >rev;\nint dep[MAXN + 5];\nint cur[MAXN + 5];\nint s,t;\nbool bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tmemset(cur,0,sizeof(cur));\n\tqueue<int>q;\n\tq.push(s);\n\tdep[s] = 1;\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0;i < graph[u].size();i++)\n\t\t{\n\t\t\tint v = graph[u][i].first;\n\t\t\tdouble w = graph[u][i].second;\n\t\t\tif(dep[v] == 0 && abs(w) > EPS)\n\t\t\t{\n\t\t\t\tdep[v] = dep[u] + 1;\n\t\t\t\tif(v == t)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t] != 0;\n}\ndouble dfs(int u,double in)\n{\n\tif(u == t)\n\t{\n\t\treturn in;\n\t}\n\tdouble ans = 0;\n\tfor(int i = cur[u];i < graph[u].size();i++)\n\t{\n\t\tcur[u] = i;\n\t\tint v = graph[u][i].first;\n\t\tdouble w = graph[u][i].second;\n\t\tif(dep[v] == dep[u] + 1 && abs(w) > EPS)\n\t\t{\n\t\t\tdouble tmp = dfs(v,min(in,w));\n\t\t\tif(abs(tmp) <= EPS)\n\t\t\t{\n\t\t\t\tdep[v] = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpair<int,int>x = rev[make_pair(u,i)];\n\t\t\tgraph[u][i].second -= tmp;\n\t\t\tgraph[x.first][x.second].second += tmp;\n\t\t\tin -= tmp;\n\t\t\tans += tmp;\n\t\t\tif(abs(in) <= EPS)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(abs(ans) <= 0)\n\t{\n\t\tdep[u] = 0;\n\t}\n\treturn ans;\n}\nvoid add(int u,int v,double w)\n{\n\tgraph[u].push_back(make_pair(v,w));\n\tgraph[v].push_back(make_pair(u,0));\n\trev[make_pair(u,graph[u].size() - 1)] = make_pair(v,graph[v].size() - 1);\n\trev[make_pair(v,graph[v].size() - 1)] = make_pair(u,graph[u].size() - 1);\n}\nbool vis[MAXN + 5][MAXN + 5];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tscanf(\"%d%d%lf%lf\",&e[i].u,&e[i].v,&e[i].a,&e[i].b);\n\t}\n\tscanf(\"%d%d\",&m1,&n1);\n\tfor(int i = 1;i <= n1;i++)\n\t{\n\t\tdouble l = 0,r = 10;\n\t\twhile(r - l >= EPS)\n\t\t{\n\t\t\tdouble mid = (l + r) / 2;\n\t\t\tif(check(mid,i))\n\t\t\t{\n\t\t\t\tl = mid;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t}\n\t\tif(10 - l <= EPS)\n\t\t{\n\t\t\tdis[i] = INF;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdis[i] = l;\n\t\t}\n\t}\n\ts = n + 1;\n\tt = n + 2;\n\tfor(int i = 1;i <= t;i++)\n\t{\n\t\tgraph[i].clear();\n\t}\n\tfor(int i = 1;i <= m1;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tif(!vis[s][u] && !vis[u][s])\n\t\t{\n\t\t\tadd(s,u,dis[u]);\n\t\t\tvis[s][u] = true;\n\t\t\tvis[u][s] = true;\n\t\t}\n\t\tif(!vis[u][v] && !vis[v][u])\n\t\t{\n\t\t\tadd(u,v,INF);\n\t\t\tvis[u][v] = true;\n\t\t\tvis[v][u] = true;\n\t\t}\n\t\tif(!vis[v][t] && !vis[t][v])\n\t\t{\n\t\t\tadd(v,t,dis[v]);\n\t\t\tvis[v][t] = true;\n\t\t\tvis[t][v] = true;\n\t\t}\n\t}\n\tdouble ans = 0;\n\twhile(bfs())\n\t{\n\t\tans += dfs(s,INF);\n\t}\n\tif(ans >= INF / 2)\n\t{\n\t\tprintf(\"-1\");\n\t}\n\telse\n\t{\n\t\tprintf(\"%.1lf\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1657274792,
        "uid": 299432,
        "name": "lsw1",
        "ccfLevel": 0,
        "title": "solution-p2494"
    },
    {
        "content": "### Preface  \n\u9ad8\u80fd\u9884\u8b66\uff0c\u672c\u9898\u7ec6\u8282\u548c\u5b9e\u73b0\u6bd4\u8f83\u7e41\u6742\uff0c\u4e00\u4e9b\u7ec6\u8282\u4e0a\u7684\u9519\u8bef\u53ef\u80fd\u4f1a\u6d6a\u8d39\u60a8\u5927\u91cf\u7684\u65f6\u95f4\u3002  \n### Problem  \n\u7ed9\u4f60\u4e00\u5f20 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684 DAG\uff0c\u5176\u4e2d\u7f16\u53f7\u524d $n_1$ \u4e2a\u70b9\u548c $m_1$ \u6761\u865a\u8fb9\u7ec4\u6210\u4e86\u4e00\u5f20\u4e8c\u5206\u56fe\u3002  \n\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u5b89\u5168\u7cfb\u6570 $s_i$ \u548c\u7528\u65f6 $t_i$\uff0c\u5b9a\u4e49\u4e00\u6761\u8def\u5f84 $p$ \u7684\u5371\u9669\u503c\u4e3a\uff1a  \n$$cost_p=\\dfrac{\\sum_{e_i\\in p}t_{e_i}}{\\sum_{e_i\\in p}s_{e_i}}$$  \n\u73b0\u5728\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u865a\u8fb9\uff0c\u5b83\u7684\u4e24\u4e2a\u7aef\u70b9\u81f3\u5c11\u6709\u4e00\u4e2a\u8981\u88ab\u9009\u62e9\uff0c\u9009\u62e9\u4e00\u4e2a\u70b9 $u$ \u7684\u82b1\u8d39\u4e3a $\\min cost_p,(s_p=n,t_p=u)$\uff0c$s_p$ \u4e3a $p$ \u7684\u8d77\u59cb\u70b9\uff0c$t_p$ \u4e3a $p$ \u7684\u7ed3\u675f\u70b9\u3002  \n\n\u73b0\u5728\u95ee\u4f60\uff0c\u6ee1\u8db3\u6bcf\u4e00\u6761\u865a\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u81f3\u5c11\u6709\u4e00\u4e2a\u8981\u88ab\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5c0f\u7684\u9009\u62e9\u82b1\u8d39\u4e4b\u548c\u662f\u591a\u5c11\uff1f\n### Solution  \n\u9996\u5148\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $u$\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5206\u6570\u89c4\u5212\u7b97\u51fa $n$ \u5230 $u$ \u7684\u5371\u9669\u503c\u6700\u5c0f\u7684\u8def\u5f84\u3002  \n\u5177\u4f53\u6765\u8bf4\uff0c\u4e8c\u5206 $cost$\uff0c\u5bf9\u4e8e\u6700\u7ec8\u7b54\u6848\uff0c\u79fb\u9879\u5f97 $cost_p\\times \\sum_{e_i\\in p}s_{e_i}=\\sum_{e_i\\in p}t_{e_i}$\uff0c\u518d\u79fb\u9879\u5f97 $\\sum_{e_i\\in p}t_{e_i}-cost_p\\times \\sum_{e_i\\in p}s_{e_i}=0$\u3002  \n\n\u6bcf\u4e00\u6b21 check \u5efa\u51fa\u76f8\u5e94\u7684\u56fe\uff0c\u5373\u6bcf\u6761\u8fb9\u6743\u4e3a $t_i-cost_p\\times s_i$\uff0c\u7531\u4e8e\u6211\u4eec\u8981\u6c42\u5371\u9669\u503c\u5c3d\u53ef\u80fd\u5c0f\uff0c\u6240\u4ee5\u5728\u8be5\u56fe\u4e0a\u8dd1\u6700\u77ed\u8def\uff0c\u82e5\u6700\u77ed\u8def\u5c0f\u4e8e $0$ \u5219\u7b54\u6848\u8fc7\u5927\uff0c\u5426\u5219\u8fc7\u5c0f\uff0c\u8c03\u6574\u4e8c\u5206\u5373\u53ef\uff0c\u56e0\u4e3a\u662f DAG\uff0c\u6240\u4ee5\u62d3\u6251\u6392\u5e8f\u6700\u77ed\u8def\u7684\u590d\u6742\u5ea6\u662f $O(n+m)$\u3002  \n\n\u7136\u540e\uff0c\u6211\u4eec\u8bb0\u6bcf\u4e2a\u70b9 $u$ \u7684\u6700\u5c0f $cost$ \u4e3a $val_u$\u3002  \n\u73b0\u5728\u5c31\u662f\u5728\u4e00\u4e2a\u4e8c\u5206\u56fe\u4e0a\uff0c\u6bcf\u6761\u8fb9\u505a\u51b3\u7b56\uff0c\u9009\u5de6\u8fd8\u662f\u9009\u53f3\u3002  \n\u591a\u6761\u8fb9\u5171\u7528\u7aef\u70b9\uff0c\u65e0\u6cd5\u52a8\u6001\u89c4\u5212\u3002  \n\u4e00\u822c\u6765\u8bf4\uff0c\u5e26\u6709\u65e0\u6cd5\u6d88\u9664\u7684\u540e\u6548\u6027\u7684\u51b3\u7b56\u95ee\u9898\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6700\u5927\u6d41\u548c\u6700\u5c0f\u5272\uff0c\u8fd9\u9053\u9898\u6070\u5de7\u662f\u7ecf\u5178\u6a21\u578b\u3002  \n\n\u4f60\u5148\u628a\u4e8c\u5206\u56fe\u5efa\u51fa\u6765\uff0c\u51b3\u7b56\u8f6c\u6700\u5c0f\u5272\uff0c\u53d1\u73b0\u4e00\u4e2a\u8fb9\u7684\u4e24\u4fa7\u70b9\u5fc5\u987b\u6709\u4e00\u4e2a\u88ab\u5272\uff0c\u7136\u540e\u4f60\u5bf9\u6bcf\u4e2a\u70b9\u6839\u636e\u6743\u503c\u5efa\u56fe\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\u3002  \n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5efa\u8d85\u7ea7\u6e90\u6c47\uff0c\u6bcf\u4e2a\u70b9\u6309\u7167\u5176\u989c\u8272\u5411\u6e90\u6216\u6c47\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u81ea\u8eab $val$ \u7684\u8fb9\u3002  \n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u76f4\u63a5\u5efa\uff0c\u6d41\u91cf\u4e3a $\\inf$\u3002  \n\u5bb9\u6613\u53d1\u73b0\uff0c\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u70b9\u6240\u5bf9\u7684\u8fb9\u5272\u4e00\u4e0b\u80fd\u4f7f\u6240\u6709\u4e0e\u5b83\u6709\u5173\u7684\u8fb9\u65ad\u6d41\uff0c\u7b26\u5408\u9898\u76ee\u7684\u51b3\u7b56\u8981\u6c42\u3002  \n\n\u6211\u4eec\u518d\u8dd1\u4e00\u6b21\u7f51\u7edc\u6d41\uff0c\u8fd9\u4e2a\u9898\u5c31\u505a\u5b8c\u4e86\u3002  \n\n\u63a5\u4e0b\u6765\u662f\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\uff1a  \n\u9996\u5148\uff0c\u8bf7\u4f60\u6ce8\u610f\u4e8c\u5206 check \u65f6\u6bcf\u6b21\u5404\u4e2a\u6570\u636e\u7684\u6e05\u7a7a\uff0c\u5c24\u5176\u662f\u70b9\u7684\u5ea6\u6570\uff0c\u8fb9\u7b49\u3002  \n\u8bf7\u4f7f\u7528 C++ \u81ea\u5e26\u7684\u56db\u820d\u4e94\u5165\u7684\u8f93\u51fa\uff0c\u9632\u6b62\u88ab\u5361\u7cbe\u5ea6\u8981\u591a\u5f00\u51e0\u4f4d\u518d\u4e8c\u5206\u548c\u7f51\u7edc\u6d41\u3002  \n\u8bf7\u6ce8\u610f\u7b54\u6848\u7684\u4e0a\u754c\u548c\u4f60\u7cbe\u5ea6\u8f6c\u6574\u6570\u7684\u4e58\u79ef\uff0c\u4fdd\u8bc1\u7f51\u7edc\u6d41\u6e90\u70b9\u7684\u6d41\u91cf\u7528\u4e0d\u5b8c\uff0c\u6700\u540e\u5224\u65e0\u89e3\u4e0d\u4f1a\u5224\u9519\u3002  \n\ncode\uff1a  \n```cpp\n#include <bits/stdc++.h>\n#define dll double\n#define int long long\n#define mp make_pair\n#define fir first\n#define sec second\nusing namespace std;\nconst int N=1e5+10,M=5e5+10;\nint n,m,u,v,t,s,n1,m1;\nint deg[N],val[N],dis[N];\nvector <pair<int,int> > edge[N];\npair <pair<int,int>,pair<int,int> > E[M];\nstruct queue{\n\tint head,tail,que[N<<1];\n\tvoid init(){head=1;tail=0;}\n\tvoid pop(){++head;}\n\tvoid push(int x){que[++tail]=x;}\n\tint size(){return tail-head+1;}\n\tint front(){return que[head];}\n}Q;\nstruct Shortest_path{\n\tvoid build(int C){\n\t\tfor(int i=1;i<=n;i++)edge[i].clear(),deg[i]=0;\n\t\tfor(int i=1;i<=m;i++){deg[E[i].fir.sec]++;\n\t\t\tedge[E[i].fir.fir].push_back(mp(E[i].fir.sec,10000*E[i].sec.fir-E[i].sec.sec*C));\n\t\t}for(int i=1;i<=n;i++)dis[i]=1e18;\n\t}\n\tbool run(int End){\n\t\tQ.init();dis[n]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(!deg[i])Q.push(i);\n\t\twhile(Q.size()){\n\t\t\tint u=Q.front();Q.pop();\n\t\t\tif(u==End)return (dis[u]>0);\n\t\t\tfor(auto to:edge[u]){\n\t\t\t\tint v=to.fir;int w=to.sec;\n\t\t\t\tdeg[v]--;dis[v]=min(dis[v],dis[u]+w);\n\t\t\t\tif(!deg[v])Q.push(v);\n\t\t\t}\n\t\t}return true;\n\t}\n}S1;\nstruct Max_Flow{\n\tint n,s,t,maxflow;\n\tint deep[N];int cnt=-1,head[N],cur[N];\n\tstruct EDGE{\n\t\tint to,next,w;\n\t}edge[M];\n\tvoid add(int u,int v,int w){\n\t\tedge[++cnt].to=v;\n\t\tedge[cnt].next=head[u];\n\t\thead[u]=cnt;\n\t\tedge[cnt].w=w;\n\t}\n\tbool bfs(){\n\t\tfor(int i=0;i<=n;i++)deep[i]=0;\n\t\tfor(int i=0;i<=n;i++)cur[i]=head[i];\n\t\tQ.init();deep[s]=1;Q.push(s);\n\t\twhile(Q.size()){\n\t\t\tint u=Q.front();Q.pop();\n\t\t\tfor(int i=head[u];i!=-1;i=edge[i].next){\n\t\t\t\tint v=edge[i].to;int w=edge[i].w;\n\t\t\t\tif(w&&!deep[v]){\n\t\t\t\t\tdeep[v]=deep[u]+1;\n\t\t\t\t\tQ.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(deep[t]!=0)return true;\n\t\telse return false;\n\t}\n\tint dfs(int u,int limit){\n\t\tif(u==t)return limit;\n\t\tif(!limit)return 0;\n\t\tint flow=0;int f=0;\n\t\tfor(int &i=cur[u];i!=-1;i=edge[i].next){\n\t\t\tint v=edge[i].to;int w=edge[i].w;\n\t\t\tif(deep[v]!=deep[u]+1)continue;\n\t\t\tf=dfs(v,min(limit,w));\n\t\t\tflow+=f;edge[i].w-=f;edge[i^1].w+=f;\n\t\t\tlimit-=f;if(!limit)break;\n\t\t}return flow;\n\t}\n\tvoid DINIC(){\n\t\tmaxflow=0;\n\t\twhile(bfs())\n\t\t\tmaxflow+=dfs(s,1e13);\n\t}\n}S2;\nsigned main(){\n\tios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t\tcin>>E[i].fir.fir>>E[i].fir.sec>>E[i].sec.fir>>E[i].sec.sec;\n\tcin>>m1>>n1;\n\tfor(int i=1;i<=n1;i++){\n\t\tint l=0,r=1e13;\n\t\twhile(l<r){\n\t\t\tint mid=(l+r)/2;\n\t\t\tS1.build(mid);\n\t\t\tif(S1.run(i))l=mid+1;\n\t\t\telse r=mid;\n\t\t}val[i]=l;\n\t}S2.s=0;S2.t=n1+1;S2.n=n1+1;\n\tfor(int i=0;i<=n1+1;i++)S2.head[i]=-1;\n\tfor(int i=1;i<=n1;i++){\n\t\tif(i&1)S2.add(S2.s,i,val[i]),S2.add(i,S2.s,0);\n\t\telse S2.add(i,S2.t,val[i]),S2.add(S2.t,i,0);\n\t}\n\tfor(int i=1;i<=m1;i++){\n\t\tcin>>u>>v;\n\t\tif(v&1)swap(u,v);\n\t\tS2.add(u,v,1e13);\n\t\tS2.add(v,u,0);\n\t}S2.DINIC();\n\tif(S2.maxflow>=1e13)cout<<-1;\n\telse cout<<fixed<<setprecision(1)<<(dll)((int)(S2.maxflow/100)/100.0);\n\treturn 0;\n}\n```\n",
        "postTime": 1682951227,
        "uid": 213173,
        "name": "\u5c0f\u6728\u866b",
        "ccfLevel": 4,
        "title": "\u3010OI\u7ecf\u5178\u9898\u76ee/\u5957\u8def\u9898/trick\u9898\u3011[SDOI2011]\u4fdd\u5bc6"
    }
]