[
    {
        "content": "\u8981\u8d70\u56de1\uff0c\u53ea\u8981\u628a\u6240\u6709\u8d70\u8fc7\u7684\u8fb9\u7684\u8fb9\u6743\u4e582\u5373\u53ef\u3002\n\nSubtask 1\u548c2\uff0c\u89c2\u5bdf\u5230$m$\u6bd4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u6240\u6709\u7684\u72b6\u6001\uff08\u53d6\u6216\u4e0d\u53d6\u8be5\u70b9\u7684\u70b9\u6743\uff09\u3002\n\n\u7136\u540e\u9898\u89e3\u8bf4\u201c\u76f4\u63a5\u66b4\u529b\u7b97\u51fa\u9700\u8981\u8d70\u591a\u4e45\u201d\uff0c\u4f46\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u5bf9\u554a\uff0c\u662f$O(2^mn)$\uff0c\u7ed9\u4e00\u6761\u94fe\u5c31\u6302\u4e86\u554a\u3002\n\n\u6211\u7684\u505a\u6cd5\u662f\u91cd\u65b0\u5efa\u4e00\u68f5\u6811\u3002\u5efa\u6cd5\u5982\u4e0b\uff1a\n\n> \u904d\u5386\u539f\u6811\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u70b9\u6743\uff0c\u5219\u8be5\u70b9\u52a0\u5165\u65b0\u6811\u4e2d\u3002  \n> \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u4e2d\u6709\u8d85\u8fc71\u4e2a\u5728\u65b0\u6811\u4e2d\u4e14\u201c\u5b58\u5728\u201d\uff0c\u5219\u8be5\u8282\u70b9\u4e5f\u52a0\u5165\u65b0\u6811\u3002  \n> \u6bcf\u5728\u65b0\u6811\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u628a\u8be5\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u6807\u8bb0\u4e3a\u201c\u4e0d\u5b58\u5728\u201d\uff08\u539f\u6765\u90fd\u662f\u201c\u5b58\u5728\u201d\uff0c\u6807\u8bb0\u65f6\u53ea\u8981\u6807\u8bb0\u513f\u5b50\u4e2d\u5728\u65b0\u6811\u4e2d\u7684\u8282\u70b9\u5373\u53ef\uff09\u3002\n\n\u65b0\u6811\u7684\u8fb9\u6743\u4e3a\u4e24\u70b9\u5728\u539f\u6811\u4e2d\u7684\u8ddd\u79bb\u3002\n\n\u8fd9\u6837\u5efa\u6811\uff0c\u539f\u6765\u6709$m$\u4e2a\u8282\u70b9\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u201c\u5b58\u5728\u201d\u7684\u70b9\uff0c\u81f3\u591a\u4ea7\u751f\u4e00\u4e2a\u6ca1\u6709\u70b9\u6743\u4e14\u52a0\u5165\u65b0\u6811\u4e2d\u7684\u70b9\uff0c\u4ea7\u751f\u540e\u8fd9\u4e24\u4e2a\u70b9\u90fd\u201c\u4e0d\u5b58\u5728\u201d\uff0c\u6240\u4ee5\u4ea7\u751f\u7684\u65b0\u70b9\u4e0d\u8d85\u8fc7$m$\u4e2a\u3002\u6811\u7684\u603b\u5927\u5c0f\u4e0d\u8d85\u8fc7$2m$\u3002\n\n\u7136\u540e\u5728\u65b0\u6811\u4e2d\u66b4\u529b\u5373\u53ef\u3002\n\n\u4e4b\u540e\u5bf9\u72b6\u6001\u6309\u9700\u8981\u7684\u8def\u7a0b\u6392\u5e8f\uff0c\u7136\u540e\u79bb\u7ebf\u8be2\u95ee\u626b\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(2^mm)$\u3002\n\nSubtask 3\uff0c\u5c31\u662f\u6811\u5f62dp\u3002\n\n\u8bbe$dp[i][j]$\u8868\u793a\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u8d70\u7684\u8fb9\u6743\u603b\u548c\u4e0d\u8d85\u8fc7$j$\u7684\u6700\u5927\u4ef7\u503c\u3002\n\n\u7136\u540e\u5c31\u662f\u4e2a\u80cc\u5305\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u513f\u5b50\uff0c\u679a\u4e3e$k$\uff0c\u7136\u540e$dp[i][j]=max(dp[i][j],dp[son][k]+dp[i][j-k-dis_{i,son}])$\u3002\n\n\u7531\u4e8e\u8bfb\u5165\u7684$tim$\u6700\u591a100\uff0c\u4e14\u8def\u7a0b\u8981\u4e582\uff0c\u6240\u4ee5\u7b97\u5230$50$\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(50n)$\uff0c\u5982\u679c\u7528\u4e0a\u9762\u5efa\u65b0\u6811\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4f18\u5316\u5230$O(n+50m)$\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nint n,m,T;\ninline int readint(){\n    int c=getchar(),d=0;\n    for(;!isdigit(c);c=getchar());\n    for(;isdigit(c);c=getchar())\n    d=(d<<3)+(d<<1)+(c^'0');\n    return d;\n}\nstruct edge{\n    int to,nxt,dis;\n}e[200005];\nint head[100005],cnt=0;\nnamespace Task1{\n    using VI=std::vector<int>;\n    const int N=100005;\n    int num[N],val[22],pos[22],to[N],ans[N],dis[N];\n    std::pair<int,int>q[N];\n    struct NewGraph{\n        edge e[666];\n        int n,cnt,fa[666],col[666],tot,head[666],pos[666],dis[666];\n        inline void addedge(int u,int v,int t){\n            e[++cnt]=(edge){v,head[u],t};\n            head[u]=cnt;\n            e[++cnt]=(edge){u,head[v],t};\n            head[v]=cnt;\n        }\n        inline NewGraph():n(0),cnt(0),tot(0){memset(num,0,sizeof num);memset(fa,0,sizeof fa);memset(dis,0,sizeof dis);}\n        inline int newnode(){return ++n;}\n        inline void dfs(int now,int pre){\n            for(int i=head[now];i;i=e[i].nxt)\n            if(e[i].to!=pre){\n                fa[e[i].to]=now;\n                dis[e[i].to]=dis[now]+e[i].dis;\n                dfs(e[i].to,now);\n            }\n        }\n        inline int color(int x){\n            int ret=0;\n            for(;x&&col[x]!=tot;x=fa[x])\n            col[x]=tot,ret+=dis[x]-dis[fa[x]];\n            return ret;\n        }\n    }G;\n    struct zzt{\n        int val,tim;\n        inline bool operator<(const zzt&rhs)const{return tim<rhs.tim;}\n    }p[1<<20|2];\n    VI rebuild(int now,int pre){\n        VI v;\n        for(int i=head[now];i;i=e[i].nxt)\n        if(e[i].to!=pre){\n            dis[e[i].to]=dis[now]+e[i].dis;\n            VI ret=rebuild(e[i].to,now);\n            for(int i:ret)v.push_back(i);\n        }\n        if(~num[now]||v.size()>1||now==1){\n            int id=G.newnode();\n            to[id]=now;\n            for(int i:v){\n                G.addedge(i,id,dis[to[i]]-dis[now]);\n            }\n            v.clear();\n            v.push_back(id);\n            if(~num[now])G.pos[num[now]]=id;\n        }\n        return v;\n    }\n    void dfs(int now,int zt,int value){\n        if(now==m){\n            ++G.tot;\n            int tim=0;\n            for(int i=zt,nx;i;i^=1<<nx){\n                nx=__builtin_ctz(i);\n                tim+=G.color(G.pos[nx]);\n            }\n            p[zt]=(zzt){value,tim<<1};\n        }else{\n            dfs(now+1,zt,value);\n            dfs(now+1,zt|(1<<now),value+val[now]);\n        }\n    }\n    void main(){\n        memset(pos,0,sizeof pos);\n        memset(num,-1,sizeof num);\n        for(int i=0;i<m;++i){\n            pos[i]=readint();\n            val[i]=readint();\n            num[pos[i]]=i;\n        }\n        memset(dis,0,sizeof dis);\n        VI I=rebuild(1,0);\n        G.dfs(I[0],0);\n        dfs(0,0,0);\n        const int C=1<<m;\n        std::sort(p,p+C);\n        for(int i=1;i<=T;++i)q[i].first=readint(),q[i].second=i;\n        std::sort(q+1,q+T+1);\n        int maxval=0;\n        for(int i=1,zz=0;i<=T;++i){\n            while(zz<C&&p[zz].tim<=q[i].first){\n                maxval=std::max(maxval,p[zz].val);\n                ++zz;\n            }\n            ans[q[i].second]=maxval;\n        }\n        for(int i=1;i<=T;++i)\n        printf(\"%d\\n\",ans[i]);\n    }\n}\nnamespace Task2{\n    const int N=5005;\n    int val[N];\n    int dp[N][52];\n    void dfs(int now,int pre){\n        for(int i=head[now];i;i=e[i].nxt)\n        if(e[i].to!=pre){\n            dfs(e[i].to,now);\n            for(int j=50;j>=e[i].dis;--j)\n            for(int k=0;k+e[i].dis<=j;++k){\n                dp[now][j]=std::max(dp[now][j],dp[e[i].to][k]+dp[now][j-k-e[i].dis]);\n            }\n        }\n        for(int i=0;i<=50;++i)\n        dp[now][i]+=val[now];\n    }\n    void main(){\n        memset(val,0,sizeof val);\n        while(m--){\n            int pos=readint();\n            val[pos]=readint();\n        }\n        memset(dp,0,sizeof dp);\n        dfs(1,0);\n        for(;T--;){\n            int tim=readint()>>1;\n            printf(\"%d\\n\",dp[1][tim]);\n        }\n    }\n}\nint main(){\n    n=readint(),m=readint(),T=readint();\n    for(int i=1,u,v,t;i<n;++i){\n        u=readint(),v=readint(),t=readint();\n        e[++cnt]=(edge){v,head[u],t};\n        head[u]=cnt;\n        e[++cnt]=(edge){u,head[v],t};\n        head[v]=cnt;\n    }\n    if(m<=20)Task1::main();\n    else Task2::main();\n    return 0;\n}\n```",
        "postTime": 1535964078,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4866 \u3010Zrz_orz Loves Secondary Element\u3011"
    },
    {
        "content": "\u5176\u5b9e\u9898\u76ee\u5e76\u4e0d\u96be,\u53ea\u662f\u76f8\u5f53\u4e8e\u505a\u4e86\u4e24\u9053\u9898\u800c\u5df2..\n\n\u9996\u5148\u9700\u8981\u4e86\u89e3\u7684\u4e00\u70b9\u662f:\u6211\u4eec\u6700\u7ec8\u9700\u8981\u56de\u52301\u53f7\u70b9,\u6240\u4ee5\u6bcf\u4e00\u6761\u8fb9\u80af\u5b9a\u90fd\u4f1a\u8d70\u81f3\u5c112\u6b21,\u5e76\u4e14\u5bf9\u4e8e\u4e00\u68f5\u6811,\u4e00\u6761\u8fb9\u5141\u8bb8\u8d70\u4e24\u6b21\u7684\u8bdd\u5b58\u5728\u4e00\u7b14\u753b\u7684\u65b9\u6848.\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u628a\u8d70\u7684\u6240\u9700\u65f6\u95f4*2\u5c31\u597d\u4e86.\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u8003\u8651\u56de\u52301\u53f7\u70b9\u7684\u95ee\u9898\u4e86.\n\n\u7136\u540e\u5bf9\u4e8eSubtask 0..\n\n\u5b9e\u9645\u4e0a\u5c31\u662fSubtask 1\u7684\u505a\u6cd5..\n\n\u76f4\u63a5dfs\u66b4\u529b\u679a\u4e3e\u548c\u4e0d\u548c\u7b2c$i$\u4e2a\u89d2\u8272\u5bf9\u8bdd\u5e76\u4e14\u8bb0\u5f55\u6109\u60a6\u503c,\u7136\u540e\u76f4\u63a5\u66b4\u529b\u7b97\u51fa\u9700\u8981\u8d70\u591a\u4e45.\n\n\u7136\u540e\u628a\u4e0a\u9762\u7684\u4e1c\u897f\u6309\u7167\u8d70\u7684\u65f6\u95f4\u6392\u4e2a\u5e8f,\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u9009\u62e9\u6700\u5927\u7684\u6109\u60a6\u503c\u5c31\u597d\u4e86..\n\nSubtask 2\u7684\u8bdd..\n\n\u6811\u5f62DP..\n\n\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u72b6\u6001$f[i][j]$\u8868\u793a\u5728$i$\u7684\u5b50\u6811\u4e2d\u8d70\u6700\u591a$j$\u7684\u5355\u4f4d\u65f6\u95f4\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u6109\u60a6\u503c.\n\n\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u7a0b\u5e94\u8be5\u6bd4\u8f83\u663e\u7136\u5427..\u5982\u679c\u4e0d\u592a\u6e05\u695a\u76f4\u63a5\u770b\u4ee3\u7801\u90e8\u5206\u5c31\u597d\u4e86..(\u5176\u5b9e\u53ea\u662f\u61d2\u800c\u5df2..)\n\n[\u4ee3\u7801](https://www.luogu.org/paste/9ysudvv6)",
        "postTime": 1535808036,
        "uid": 20782,
        "name": "CYJian",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4866 \u3010Zrz_orz Loves Secondary Element\u3011"
    },
    {
        "content": "## Preface\n\n[\u6628\u5929\u521a\u7ffb\u5230\uff0c\u4eca\u5929\u5c31\u89c1\u5230 reality version \u4e86\uff0c\u975e\u5e38\u611f\u52a8\u3002](https://www.cnblogs.com/alex-wei/p/dp_tricks.html)\n\n~~\u9b4f\u8001\u5e08\u522b\u6253\u6211\u8d3a\u535a\u5ba2\uff0c\u5b9e\u5728\u662f\u67d0\u4eba\u62d2\u7edd\u6211\u8bf4\u4e0d\u591f\u8be6\u7ec6\u624d\u51fa\u6b64\u4e0b\u7b56\u7684\u3002~~\n\n## Solution\n\n\u8fd9\u9898\u6570\u636e\u8303\u56f4\u5f3a\u884c\u4e8c\u5408\u4e00\u62bd\u8c61\u7684\u6279\u7206\uff0c\u4f46\u662f\u6211\u4e0d\u662f\u5f88\u80fd\u7406\u89e3\u6709\u4ec0\u4e48\u641e\u4e24\u4e2a Subtask \u7684\u5fc5\u8981\u3002\n\n**\u4ecb\u7ecd\u4e00\u4e0b\u79d1\u6280\uff1a\u6811\u4e0a\u4f9d\u8d56\u578b\u80cc\u5305**\u3002\n\n\u8fd9\u5f62\u5982\u5728\u6811\u4e0a\u9009\u51fa\u82e5\u5e72\u4e2a\u7269\u54c1\u505a\u80cc\u5305\u95ee\u9898\uff0c\u6ee1\u8db3**\u8fd9\u4e9b\u7269\u54c1\u5f62\u6210\u4e00\u4e2a\u5305\u542b\u6839\u8282\u70b9\u7684\u8fde\u901a\u5757**\u3002\u4e0d\u59a8\u5047\u8bbe\u8fd9\u662f\u4e00\u4e2a $\\mathcal O(V)$ \u52a0\u5165\u7269\u54c1\u3001$\\mathcal O(V^2)$ \u5408\u5e76\u80cc\u5305\u7684 01 \u80cc\u5305\u3002\n\n\u663e\u7136\u5b58\u5728\u4e00\u4e2a $\\mathcal O(n\\times V^2)$ \u7684\uff0c\u5bf9\u6bcf\u4e2a\u5b50\u6811\u66b4\u529b\u5408\u5e76\u80cc\u5305\u7684\u6811\u5f62 dp \u505a\u6cd5\uff0c\u6c42\u51fa\u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u65f6\u5176\u5b50\u6811\u7684\u7b54\u6848\u3002\n\n\u4f46\u5176\u5b9e\u5bf9\u6bcf\u4e2a\u8282\u70b9\u90fd\u6c42\u7b54\u6848\u4f3c\u4e4e\u6709\u4e9b\u7d2f\u8d58\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3\u7ed9\u5b9a\u6839\u65f6\u7684\u7b54\u6848\u3002\u6240\u4ee5\u6211\u4eec\u5c1d\u8bd5\u628a\u6811\u62cd\u5e73\u6210 dfs \u5e8f\uff0c\u5728 dfs \u5e8f\u4e0a\u8fdb\u884c\u80cc\u5305\u3002\u540c\u6837\u8ba9 $f_1\\dots f_n$ \u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u80cc\u5305\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 $i$\uff1a\n+ \u5982\u679c\u4e0d\u9009\uff0c\u90a3\u4e48\u8df3\u8fc7 $i$ \u7684\u6574\u68f5\u5b50\u6811\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a $f_i$ \u7684\u6bcf\u4e00\u4f4d\u5411 $f_{i+sz_i}$ \u7684\u6bcf\u4e00\u4f4d checkmax\uff1b\n+ \u5982\u679c\u9009\uff0c\u5219\u5c06\u8fd9\u4e2a\u80cc\u5305\u5e26\u5230\u5b50\u6811\u91cc\uff0c\u90a3\u4e48\u7531\u4e8e\u5b50\u6811\u95f4\u7684\u9009\u4e0e\u4e0d\u9009\u662f\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a $f_i$ \u52a0\u5165\u8282\u70b9 $i$ \u4e0a\u7269\u54c1\u7684\u65b0\u80cc\u5305\u5411 $f_{i+1}$ \u7684\u6bcf\u4e00\u4f4d checkmax\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f $\\mathcal O(nV)$\u3002\n\n---\n\n\u4e8e\u662f\u6211\u4eec\u53cd\u624b\u4e00\u4e2a\u6811\u4e0a\u4f9d\u8d56\u578b\u80cc\u5305\uff0c\u8fd9\u65f6\u4e00\u4e2a\u70b9\u5bf9\u5e94\u7269\u54c1\u7684\uff1a\n\n+ cost \u662f\u5b83\u5230\u7236\u4eb2\u7684\u8fb9\u8fb9\u6743 $\\times 2$\uff08\u904d\u5386\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6700\u4f18\u60c5\u51b5\u4e0b\u4e00\u6761\u8fb9\u6765\u56de\u53ea\u8d70\u4e24\u6b21\uff09\uff1b\n+ val \u662f\u5b83\u4e0a\u9762\u6240\u6709\u7eb8\u7247\u4eba\u7684\u6109\u60a6\u503c\u6570\u91cf\u3002\n\n\u5bf9\u6240\u6709\u7eb8\u7247\u4eba\u5728\u7684\u5730\u65b9\u5efa\u4e2a\u865a\u6811\u5c31\u53ef\u4ee5\u4e86\uff08\u5982\u679c\u4e0d\u5efa Sub2 \u4f1a\u70b8\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(M\\log N + M\\times tim)$\u3002\n\n## Bonus\n\n\u4e0d\u5b9a\u6839\u8282\u70b9\uff1f\u8003\u8651\u5b9a\u6839\u8282\u70b9\u540e\u662f\u7b80\u5355\u7684\uff0c\u5219\u53ef\u4ee5\u70b9\u5206\u6cbb\u505a\u5230\u4ec5\u591a\u4e00\u4e2a log\u3002",
        "postTime": 1670656566,
        "uid": 419487,
        "name": "irris",
        "ccfLevel": 7,
        "title": "P4866 Solution"
    }
]