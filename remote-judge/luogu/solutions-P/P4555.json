[
    {
        "content": "# \u521d\u5b66Manacher\uff0c\u5199\u7ed9\u548c\u81ea\u5df1\u4e00\u6837\u7684\u5c0f\u767d\u4eec\n\n---\n\n\u4e0b\u5348\u521a\u5b66\u4e86 $Manacher$ \uff0c\u505a\u5230\u8fd9\u9898\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u5927\u4f6c\u4eec\u7684\u9898\u89e3\u505a\u4e00\u4e2a\u66f4\u4e3a\u8be6\u7ec6\u7684\u8865\u5145\u8bf4\u660e\uff0c\n\n\u4e3b\u8981\u9488\u5bf9\u81ea\u5df1\u7684\u4e00\u4e9b\u7591\u60d1\uff0c\u4ee5\u53ca\u4e0d\u7406\u89e3\u7684\u5730\u65b9\u505a\u4e86\u8be6\u5c3d\u7684\u8be0\u91ca\n\n\u987a\u624b\u5c31\u5168\u5199\u4ee3\u7801\u91cc\u4e86\uff01\u6709\u54ea\u91cc\u8bb2\u7684\u4e0d\u6e05\u695a\u53ef\u4ee5\u95ee\u7a9d(\u867d\u7136\u6211\u5f88\u5f31\n\n---\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define space putchar(' ')\n#define endl putchar('\\n')\n#define debug puts(\"------------------------\")\nusing namespace std;\ninline void read(int &a) {a = 0; int c = getchar(), b = 1; while (c > '9' || c < '0') {if (c == '-')b = -1; c = getchar();} while (c >= '0' && c <= '9') a = (a << 3) + (a << 1) + c - 48, c = getchar(); a *= b; }\ninline int  Rem() {int a = 0, c = getchar(), b = 1; while (c > '9' || c < '0') {if (c == '-')b = -1; c = getchar();} while (c >= '0' && c <= '9') a = (a << 3) + (a << 1) + c - 48, c = getchar(); return a *= b; }\ninline void write(int x) {if (x > 9)write(x / 10); putchar('0' + x % 10);}\ninline void W(int x) {if (x < 0) {putchar('-'), x = -x;} write(x);}\n/**/\nconst int N = 11000005;\nchar a[N], s[N << 1];\nint n, hw[N << 1], ans, l[N << 1], r[N << 1];\n/**/\nvoid Pre()//\u975e\u5e38\u6a21\u677f\u7684\u63d2\u5165\n{\n\ts[0] = '#';\n\ts[1] = '$';\n\tint cnt = 1;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\ts[++cnt] = a[i];\n\t\ts[++cnt] = '$';\n\t}\n\tn = (n << 1) + 2;\n\ts[n] = '~';\n}\n\nvoid work()//\u540c\u6837\u975e\u5e38\u6a21\u677f\u7684Manacher\n{\n\tint mr = 0, mid;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (i < mr) hw[i] = min(hw[(mid << 1) - i], mr - i);\n\t\telse hw[i] = 1;\n\t\twhile (s[i + hw[i]] == s[i - hw[i]]) ++hw[i];\n\t\tif (hw[i] + i > mr) mr = hw[i] + i, mid = i;\n\t\t/**\n\t\t * l[i]\u8868\u793a\u4ee5i\u4e3a\u5de6\u7aef\u70b9\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\n\t\t * r[i]\u8868\u793a\u4ee5i\u4e3a\u53f3\u7aef\u70b9\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\n\t\t *\n\t\t * \u5bf9\u4e8e\u849f\u84bb(\u6211)\u6765\u8bb2\u6709\u70b9\u62bd\u8c61\u6240\u4ee5\u6211\u4eec\u4e3e\u4e00\u4e2a\u751f\u52a8\u7684\u6817\u5b50\uff1a\n\t\t *\n\t\t * \t\t\u9996\u5148\uff0c\u5b57\u7b26\u4e32\u4e3aababaccd\n\t\t *\n\t\t * \t\t\t\t  0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17\n\t\t * \t\t\u63d2\u5165\u540e\u53d8\u6210 #|$|a|$|b|$|a|$|b|$|a |$ |c |$ |c |$ |d |~\n\t\t *\n\t\t * \t\t\u663e\u7136i = 4\u65f6,hw[4] = 4\n\t\t * \t\tL = 7 = i + hw[4]-1;\n\t\t * \t\tR = 1 = i-hw[4]+1;\n\t\t * \t\t\u56de\u6587\u4e32\u5b9e\u9645\u957f\u5ea6=hw[4]-1;\n\t\t * \t\t\u6240\u4ee5\u8f6c\u79fb\u5c31\u662f: l[i+hw[i]-1]=max(l[i+hw[i]-1],hw[i]-1);\n\t\t * \t\t\t\t\t r[i-hw[i]+1]=max(r[i-hw[i]+1],hw[i]-1);\n\t\t *\n\t\t */\n\t\tr[i + hw[i] - 1] = max(r[i + hw[i] - 1], hw[i] - 1);\n\t\tl[i - hw[i] + 1] = max(l[i - hw[i] + 1], hw[i] - 1);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%s\", a + 1);\n\tn = strlen(a + 1);\n\tPre();\n\twork();\n/**\n *\t\u53c8\u56e0\u4e3a\u4e24\u5757\u4e0d\u80fd\u91cd\u53e0\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9'$'\u4f5c\u4e3a\u65ad\u70b9\u8fdb\u884c\u679a\u4e3e\n *\n *  \u90a3\u4e48\u5148\u63d0\u51fa\u4e00\u4e2a\u56f0\u6270\u849f\u84bb\u6211\u7684\u95ee\u9898\uff1a\n * \n *\tQ: \u4e0a\u9762\u4e0d\u662f\u5df2\u7ecf\u6c42\u8fc7\u4e86\u5417\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u9012\u63a8\u5462\uff1f\n *\n *  A: \u4e0a\u9762\u6c42\u51fa\u7684\u6bcf\u4e2al[i]\u548cr[i]\u90fd\u662f\u5728i\u6700\u5927\u7684\u60c5\u51b5\u4e0b\u6c42\u7684\n *  \t\n *  \teg:0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17\n *\t\t   #|$|a|$|b|$|a|$|b|$|a |$ |c |$ |c |$ |d |~\n *\n * \t\tl[3]\u6c42\u51fa\u6765\u7684\u662f0,\u4f46\u5f88\u660e\u663ebab\u662f\u4e00\u4e2a\u56de\u6587,l[3]\u5e94\u8be5\u7b49\u4e8e3\n * \t\t\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5728i=6\u65f6,hw[i]=6,\u53ea\u66f4\u65b0\u4e86l[1]\u548cr[11],\u56e0\u4e3abab\u4e0d\u662fi=6\u7684\u6700\u957f\u56de\u6587\u4e32\u6240\u4ee5\u6ca1\u6709\u66f4\u65b0\n *\n * \t\t\u8fd9\u65f6\u5c31\u9700\u8981\u9012\u63a8\u628a\u524d\u9762\u7684\u8f6c\u79fb\u8fc7\u6765\u4e86\uff1a\n *\n * \t\t\tbab \u6bd4 ababa \u77ed\u4e24\u4e2a\u5b57\u7b26\u3002\n * \t\t\t\u6bcf\u4e00\u4e2a\u56de\u6587\u4e32\u5411\u540e\u632a\u52a8\u4e00\u4e2a \u90fd\u4f1a\u5c11\u4e24\u4e2a\u5b57\u7b26,\u6240\u4ee5\uff1a\n * \t\t \tl[i] = max(l[i], l[i - 2] - 2);\n * \t\t\tr[i] = max(r[i], r[i + 2] - 2);\n * \t\t\t\u6211\u4eec\u679a\u4e3e\u7684\u662f'$'\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5l[i]\u6b63\u63a8\u7531\u524d\u4e00\u4e2a'$'\u7684\u4f4d\u7f6e\u8f6c\u79fb\u6765,r[i]\u9006\u63a8\u7531\u540e\u9762\u7684'$'\u8f6c\u79fb\u6765\uff0c\u6bcf\u6b21\u90fd\u4f1a-2\u56de\u6587\u4e32\u957f\u5ea6\n *\n */\n\tfor (int i = n; i >= 1; i -= 2) r[i] = max(r[i], r[i + 2] - 2);\n\tfor (int i = 1; i <= n; i += 2) l[i] = max(l[i], l[i - 2] - 2);\n\n\tfor (int i = 1; i <= n; i += 2) if (r[i] && l[i]) ans = max(ans, l[i] + r[i]);\n\tW(ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1551267929,
        "uid": 107960,
        "name": "\u695a\u6ceb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "### Solution\uff1a\n\n\u3000\u3000\u672c\u9898$zyys$\u554a\uff01\uff5e\n\n\u3000\u3000\u5f88\u5bb9\u6613\u60f3\u5230$manacher$\uff0c\u4e8e\u662f\u5148\u6253\u4e2a\u677f\u5b50\u770b\u770b\uff0c\u5904\u7406\u51fa\u4ee5$i$\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u534a\u5f84$p[i]$\u540e\uff0c\u5c31\u65ad\u601d\u8def\u4e86\u3002\n\n\u3000\u3000\u6211\u9996\u5148\u60f3\u5230\u7684\u662f\uff0c\u5728\u6bcf\u6b21\u66f4\u65b0$p[i]$\u540e\uff0c\u5206\u522b\u5904\u7406\u51fa\u4ee5$i$\u4e3a\u4e2d\u5fc3\u7684\u534a\u5f84$p[i]$\u5185\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u4e3a\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u957f\u5ea6($manacher$\u7ed3\u675f\u540e\u76f4\u63a5\u679a\u4e3e\u65ad\u70b9\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848)\uff0c\u4f46\u662f\u8fd9\u6837\u5f3a\u884c\u53c8\u5c06\u590d\u6742\u5ea6\u62c9\u5230\u4e86$O(n^2)$\u3002\u4e8e\u662f\uff0c\u5f00\u59cb\u65ad\u7ebf\uff5e\n\n\u3000\u3000\u540e\u9762\u770b\u770b\u5de8\u4f6c\u4eec\u7684\u601d\u8def\uff0c\u8c41\u7136**\uff0c\u6211\u662f\u771f\u7684\u8822\u554a\uff5e\n\n\u3000\u3000\u5176\u5b9e\uff0c\u5c06\u6211\u5f00\u59cb\u7684\u601d\u8def\u4fee\u6539\u4e00\u4e0b\u5373\u53ef\uff1a\n\n\u3000\u3000\u6211\u4eec\u7ef4\u62a4\u6700\u957f\u56de\u6587\u534a\u5f84$p[i]$\u7684\u540c\u65f6\uff0c\u518d\u5206\u522b\u7ef4\u62a4\u4e24\u4e2a\u4e1c\u897f\uff0c\u4ee5$i$\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6$ll[i]$\uff0c\u548c\u4ee5$i$\u4e3a\u5f00\u5934\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6$rr[i]$\u3002\n\n\u3000\u3000\u90a3\u4e48\u5f88\u663e\u7136\uff0c\u56e0\u4e3a\u4ee5$i$\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u4e3a$p[i]-1$\uff0c\u6240\u4ee5\u6bcf\u6b21\u66f4\u65b0$p[i]$\u540e\uff0c\u6211\u4eec\u53ea\u9700\u5904\u7406\u51fa\u5f53\u524d\u8fd9\u4e2a\u56de\u6587\u5b50\u4e32\u7684\u5de6\u53f3\u8fb9\u754c(\u4e2d\u95f4\u7684\u6bcf\u4e2a\u70b9\u7684$ll[i],rr[i]$\u53ef\u4ee5\u5728$manacher$\u7ed3\u675f\u540e$O(n)$\u5904\u7406\u51fa)\uff0c\u5219$ll[i+p[i]-1]=max(ll[i+p[i]-1],p[i]-1)$(\u66f4\u65b0\u4ee5$i+p[i]-1$\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u56de\u6587\u957f\u5ea6)\uff0c\u540c\u7406$rr[i-p[i]+1]=max(rr[i-p[i]+1],p[i]-1)$\u3002\n\n\u3000\u3000\u8dd1\u5b8c$manacher$\u540e\uff0c\u6211\u4eec$O(n)$\u9012\u63a8\u51fa\u6bcf\u4e2a'#'\u4e3a\u65ad\u70b9\u7684$ll[i]$\u548c$rr[i]$\uff0c\u5176\u4e2d$rr[i]$\u56e0\u4e3a\u662f$i$\u7ed3\u5c3e\u7684\u56de\u6587\u957f\u5ea6\uff0c\u6240\u4ee5\u76f4\u63a5\u987a\u63a8\uff0c\u6bcf\u5f80\u540e\u79fb\u4e00\u4f4d\uff0c\u6700\u957f\u56de\u6587\u5b50\u4e32\u957f\u5ea6$-2$\uff0c\u4e8e\u662f$rr[i]=max(rr[i],rr[i-2]-2)$($i-2$\u662f\u4e0a\u4e00\u4e2a'#'\u4f4d\u7f6e)\uff0c\u540c\u7406$ll[i]$\u76f4\u63a5\u9006\u63a8\uff0c\u7c7b\u4f3c\u5730$ll[i]=max(ll[i],ll[i+2]-2)$\u3002\n\n\u3000\u3000\u6700\u540e\u679a\u4e3e\u6bcf\u4e2a'#'\u4e3a\u65ad\u70b9\uff0c\u66f4\u65b0$ans$\u5c31$OK$\u4e86\u3002\n\n$\\quad\\;\\;$\u6b22\u8fce\u6765\u8e29\u535a\u5ba2\uff1a[five20](https://www.cnblogs.com/five20/p/9090876.html)\uff08\u849f\u84bb\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff5e\u4e07\u5206\u611f\u8c22\uff01\uff09\n \n### \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define For(i,a,b,c) for(int (i)=(a);(i)<=(b);(i)+=(c))\n#define Bor(i,a,b,c) for(int (i)=(b);(i)>=(a);(i)-=(c))\n#define Min(a,b) ((a)>(b)?(b):(a))\n#define Max(a,b) ((a)>(b)?(a):(b))\nusing namespace std;\nconst int N=200050;\nint p[N],ll[N],ans,rr[N],mx,id,cnt;\nchar s[N],t[N];\nint main(){\n    scanf(\"%s\",t);\n    int len=strlen(t);\n    s[++cnt]='$',s[++cnt]='#';\n    For(i,0,len-1,1)s[++cnt]=t[i],s[++cnt]='#';\n    s[++cnt]='\\0';\n    For(i,1,cnt,1){\n        if(i<mx)p[i]=Min(p[id*2-i],mx-i);\n        else p[i]=1;\n        while(s[i-p[i]]==s[i+p[i]])p[i]++;\n        if(mx<i+p[i])id=i,mx=i+p[i];\n        ll[i+p[i]-1]=Max(ll[i+p[i]-1],p[i]-1);\n        rr[i-p[i]+1]=Max(rr[i-p[i]+1],p[i]-1);\n    }\n    For(i,2,cnt,2)rr[i]=Max(rr[i],rr[i-2]-2);\n    Bor(i,2,cnt,2)ll[i]=Max(ll[i],ll[i+2]-2);\n    For(i,2,cnt,2)if(rr[i]&&ll[i])ans=Max(ans,ll[i]+rr[i]);\n    cout<<ans;\n    return 0;\n}\n```\n\n\n",
        "postTime": 1527257779,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4555 \u3010\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u56de\u6587\u81ea\u52a8\u673a\u88f8\u9898\u3002\n\n\u5206\u522b\u5efa\u4e24\u4e2a\u56de\u6587\u81ea\u52a8\u673a\uff0c\u4e00\u4e2a\u662f\u6b63\u5e8f\uff0c\u4e00\u4e2a\u662f\u5012\u5e8f\uff0c\u7136\u540e\u901a\u8fc7\u81ea\u52a8\u673a\u5f97\u51fa\u6700\u957f\u56de\u6587\u957f\u5ea6\uff0c\u63a5\u7740\u679a\u4e3e\u5207\u5272\u70b9\u5c31\u597d\u4e86\u3002\n\n2018.12.15update\uff1a\u4e4b\u524d\u5fd8\u8bb0\u8003\u8651\u4e0d\u5207\u5272\u7684\u60c5\u51b5\uff0c\u90a3\u53ea\u8981\u4e0d\u679a\u4e3e$n$\u4e3a\u5207\u5272\u70b9\u5c31\u597d\u4e86\u3002\n\ncode\uff1a\n```\n//2018.11.21 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline int _abs(const res &x){\n    return x>0?x:-x;\n}\ninline int _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline int _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst int N=1e5+10;\nnamespace MAIN{\n    int n;\n    int a[N],b[N];\n    struct PAM{\n        struct Pam{\n            int vis[26],len,fail;\n        }pam[N];\n        int las,cnt;\n        PAM() {pam[1].fail=pam[0].fail=1,pam[cnt=1].len=-1;}\n        inline void extend(const res &x,const res &id,char *str){\n            res p=las;\n            for(;str[id-pam[p].len-1]!=str[id];p=pam[p].fail);\n            if(!pam[p].vis[x]){\n                res np=++cnt,q=pam[p].fail;\n                for(;str[id-pam[q].len-1]!=str[id];q=pam[q].fail);\n                pam[np].fail=pam[q].vis[x],pam[p].vis[x]=np,pam[np].len=pam[p].len+2;\n            }\n            las=pam[p].vis[x];\n        }\n    }A,B;\n    char str[N];\n    int ans;\n    inline void MAIN(){\n        scanf(\"%s\",str+1);\n        n=strlen(str+1);\n        for(res i=1;i<=n;i++)A.extend(str[i]-'a',i,str),a[i]=A.pam[A.las].len;\n        reverse(str+1,str+n+1);\n        for(res i=1;i<=n;i++)B.extend(str[i]-'a',i,str),b[n-i+1]=B.pam[B.las].len;\n        for(res i=1;i<n;i++)ans=_max(a[i]+b[i+1],ans);\n        printf(\"%d\\n\",ans);\n    }\n}\nint main(){\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1531051741,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010\u56fd\u5bb6\u96c6\u8bad\u961f\u3011\u6700\u957f\u53cc\u56de\u6587\u4e32"
    },
    {
        "content": "# \u5e7f\u544a\n\n[\u849f\u84bb\u7684blog](http://www.luogu.com.cn/blog/111990/#)\n\n# \u6b63\u6587\n\n\u8fd9\u9053\u9898\u7684\u5177\u4f53\u505a\u6cd5\u672c\u849f\u84bb\u5728\u8fd9\u91cc\u4e0d\u591a\u4f5c\u9610\u91ca\uff0c\u56e0\u4e3a\u672c\u849f\u84bb\u7684\u505a\u6cd5\u4e0e\u524d\u9762\u5927\u4f6c\u7684\u505a\u6cd5\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u7bc7\u9898\u89e3\u4e5f\u662f\u4e3a\u4e86\u89e3\u7b54[\u6d45\u8272\u8c03](https://www.cnblogs.com/five20/p/9090876.html)\n\u5927\u4f6c\u672a\u7ed9\u5927\u5bb6\u89e3\u7b54\u7684\u4e00\u4e2a\u95ee\u9898\uff08\u6ce8\u610f\u6253\u659c\u6760\u7684\u4e24\u884c\u4ee3\u7801\uff09\uff1a\n```cpp\n//\u56e0\u4e3a\u6bcf\u4e2a\u53cc\u56de\u6587\u4e32\u4e2d\u95f4\u4e0d\u80fd\u4ea4\u53c9\uff0c\u6240\u4ee5\u53ea\u80fd\u679a\u4e3e'#'\u6765\u627e\u7b54\u6848 \n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ninline int min(int a,int b){return a<b?a:b;}\ninline int max(int a,int b){return a>b?a:b;}\n\n#define re register\n#define ll long long\n#define N 100100\n\nint n,len[(N<<1)+10],l[(N<<1)+10],r[(N<<1)+10];\n//l[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\n//r[i]\u8868\u793a\u4ee5i\u5f00\u5934\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6 \nchar ch[N+10],s[(N<<1)+10];\n//ch\u662f\u539f\u6570\u7ec4\uff0cs\u662f\u4e2d\u95f4\u52a0\u4e86'#'\u7684\u6570\u7ec4\n\nvoid manache()\n{\n\tint id=0,maxx=0;\n\tfor(re int i=1;i<=n;++i)\n\t{\n\t\tif(i<maxx)len[i]=min(maxx-i,len[id*2-i]);\n\t\telse len[i]=1;\n\t\twhile(s[i+len[i]]==s[i-len[i]])++len[i];\n\t\tif(i+len[i]>maxx)\n\t\t{\n\t\t\tmaxx=i+len[i];\n\t\t\tid=i;\n\t\t}\n\t\tl[i+len[i]-1]=max(l[i+len[i]-1],len[i]-1);//\u56de\u6587\u4e32\u771f\u5b9e\u957f\u5ea6\u4e3alen[i]-1 \n\t\tr[i-len[i]+1]=max(r[i-len[i]+1],len[i]-1);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%s\",ch+1);\n\tint tlen=strlen(ch+1);\n\ts[0]='$';s[1]='#';n=1;\n\tfor(re int i=1;i<=tlen;++i)\n\t{\n\t\ts[++n]=ch[i];\n\t\ts[++n]='#';\n\t}\n\tmanache();\n\tfor(re int i=3;i<=n;i+=2)r[i]=max(r[i],r[i-2]-2);////////\n\tfor(re int i=n;i>=3;i-=2)l[i]=max(l[i],l[i+2]-2);////////\n\tint ans=0;\n\tfor(re int i=3;i<=n;i+=2)if(r[i]&&l[i])ans=max(ans,l[i]+r[i]);//\u4e00\u5b9a\u8981\u5199r[i]&&l[i]\uff0c\u5426\u5219\u4f1awa \n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\u8def\u8fc7\u7684\u8bfb\u8005\u5927\u5927\u6709\u5f88\u591a\u90fd\u56e0\u4e3a\u4e0d\u7406\u89e3\u6253\u659c\u6760\u7684\u4e24\u53e5\u800c\u53d1\u8868\u8bc4\u8bba\u6c42\u89e3\uff0c\u672c\u849f\u84bb\u4eca\u5929\u5c31\u544a\u8bc9\u5927\u5bb6\u8fd9\u4e24\u53e5\u7684\u610f\u4e49\u5427\u3002\n\n\u9996\u5148\u660e\u786e\u4e24\u4e2a\u4e1c\u897f\uff1a**\u9971\u548c\u56de\u6587\u4e32**\u548c**\u4e0d\u9971\u548c\u56de\u6587\u4e32**\n\n\u5b9a\u4e49\u5982\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/62952.png)\n\n\u90a3\u4e48\u521a\u624d\u7684\u4ee3\u7801\u5f53\u4e2dmanache\u51fd\u6570\u8c8c\u4f3c\u5df2\u7ecf\u8ba1\u7b97\u4e86\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u6700\u5927\u957f\u5ea6\uff0c\u4f46\u662f\u4ed4\u7ec6\u4e00\u60f3\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u53ea\u662f\u8ba1\u7b97\u4e86\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5f00\u5934\u548c\u7ed3\u5c3e\u7684**\u9971\u548c\u56de\u6587\u4e32\u7684\u957f\u5ea6**\uff01\uff01\uff01\u56e0\u4e3alen[i]-1\u5b9e\u9645\u4e0a\u6307\u7684\u662f\u539f\u6570\u7ec4\u4e2d\u4ee5i\u4e3a\u4e2d\u5fc3\u7684\u9971\u548c\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff01\uff01\uff01\n\n\u90a3\u4e48\uff0c\u4e3a\u4e86\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u4e0d\u9971\u548c\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u957f\u5ea6\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u4fbf\u52a0\u4e0a\u4e86\u4e24\u884c\uff1a\n```cpp\nfor(re int i=3;i<=n;i+=2)r[i]=max(r[i],r[i-2]-2);\nfor(re int i=n;i>=3;i-=2)l[i]=max(l[i],l[i+2]-2);\n```\n\u4e3a\u4ec0\u4e48**i+=2**\uff1f\uff1f\uff1f\u4e3a\u4ec0\u4e48**l[i+2]-2**\uff1f\uff1f\uff1f\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u3002\n\n\u9996\u5148\uff0c\u53cc\u56de\u6587\u4e32\u7684\u4e24\u7aef\u4e0d\u80fd\u6709\u4ea4\u53c9\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u6211\u4eec\u627e\u5230\u7684\u53cc\u56de\u6587\u4e32\u7684\u65ad\u70b9\u5fc5\u987b\u662f'#'\uff0c\u800c\u6bcf\u4e00\u4e2a'#'\u4e2d\u95f4\u95f4\u9694\u4e00\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u8981**i+=2**\n\n\u5176\u6b21\uff0c\u5173\u4e8el[i]=l[i+2]-2\u7684\u95ee\u9898\uff0c\u6211\u4eec\u6765\u753b\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/62954.png)\n\n\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8ei\u6765\u8bb2\uff0c\u56e0\u4e3a\u4ed6\u662f'#'\uff0c\u6240\u4ee5\u5b83\u5728\u539f\u6765\u7684\u6570\u7ec4\u4e2d\u662f\u5904\u4e8e\u5939\u7f1d\u4e2d\u7684\uff0c\u90a3\u4e48\u4ee5\u5b83\u7ed3\u5c3e\u7684**\u4e0d\u9971\u548c\u56de\u6587\u4e32**\u7684\u6700\u5927\u957f\u5ea6=\u4ee5i+2\u7ed3\u5c3e\u7684**\u56de\u6587\u4e32**\u7684\u6700\u5927\u957f\u5ea6-2\n\n\u5373l[i]=l[i+2]-2\n\n\u90a3\u4e48\u4ee5\u6b64\u7c7b\u63a8\uff0cr[i]\u4e5f\u662f\u4e00\u6837\u7684\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/62955.png)\n\n\u6240\u4ee5\uff0c\u603b\u4ee3\u7801\u4fbf\u662f\uff1a\n\n## code\uff1a\n\n```cpp\n//\u56e0\u4e3a\u6bcf\u4e2a\u53cc\u56de\u6587\u4e32\u4e2d\u95f4\u4e0d\u80fd\u4ea4\u53c9\uff0c\u6240\u4ee5\u53ea\u80fd\u679a\u4e3e'#'\u6765\u627e\u7b54\u6848 \n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ninline int min(int a,int b){return a<b?a:b;}//\u624b\u5199min\u51fd\u6570\ninline int max(int a,int b){return a>b?a:b;}//\u624b\u5199max\u51fd\u6570\n\n#define re register\n#define ll long long\n#define N 100100\n\nint n,len[(N<<1)+10],l[(N<<1)+10],r[(N<<1)+10];\n//l[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\n//r[i]\u8868\u793a\u4ee5i\u5f00\u5934\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6 \nchar ch[N+10],s[(N<<1)+10];\n//ch\uff1a\u539f\u6570\u7ec4\uff0cs\uff1a\u52a0\u4e86'#'\u7684\u6570\u7ec4\n\nvoid manache()//manacher\u6c42\u6700\u957f\u56de\u6587\u4e32\u7684\u51fd\u6570\n{\n\tint id=0,maxx=0;\n\tfor(re int i=1;i<=n;++i)\n\t{\n\t\tif(i<maxx)len[i]=min(maxx-i,len[id*2-i]);\n\t\telse len[i]=1;\n\t\twhile(s[i+len[i]]==s[i-len[i]])++len[i];\n\t\tif(i+len[i]>maxx)\n\t\t{\n\t\t\tmaxx=i+len[i];\n\t\t\tid=i;\n\t\t}\n\t\tl[i+len[i]-1]=max(l[i+len[i]-1],len[i]-1);//\u6c42\u51fa\u4ee5i\u7ed3\u5c3e\u7684\u9971\u548c\u56de\u6587\u4e32\u7684\u6700\u5927\u957f\u5ea6\n\t\tr[i-len[i]+1]=max(r[i-len[i]+1],len[i]-1);//\u6c42\u51fa\u4ee5i\u5f00\u5934\u7684\u9971\u548c\u56de\u6587\u4e32\u7684\u6700\u5927\u957f\u5ea6\n\t}\n}\n\nint main()\n{\n\tscanf(\"%s\",ch+1);\n\tint tlen=strlen(ch+1);\n\ts[0]='$';s[1]='#';n=1;\n\tfor(re int i=1;i<=tlen;++i)\n\t{\n\t\ts[++n]=ch[i];\n\t\ts[++n]='#';\n\t}\n\tmanache();\n\tfor(re int i=3;i<=n;i+=2)r[i]=max(r[i],r[i-2]-2);//\u6c42\u51fa\u4ee5i\u5f00\u5934\u7684\u9971\u548c\u4e0e\u4e0d\u9971\u548c\u56de\u6587\u4e32\u7684\u6700\u5927\u957f\u5ea6\n\tfor(re int i=n;i>=3;i-=2)l[i]=max(l[i],l[i+2]-2);//\u6c42\u51fa\u4ee5i\u7ed3\u5c3e\u7684\u9971\u548c\u4e0e\u4e0d\u9971\u548c\u56de\u6587\u4e32\u7684\u6700\u5927\u957f\u5ea6\n\tint ans=0;\n\tfor(re int i=3;i<=n;i+=2)if(r[i]&&l[i])ans=max(ans,l[i]+r[i]);//\u4e00\u5b9a\u8981\u5199r[i]&&l[i]\uff0c\u5426\u5219\u4f1awa \n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1562749913,
        "uid": 111990,
        "name": "\u849f\u84bb\u521d\u97f3\u30df\u30af",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "~~\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u4eba\u8ddf\u6211\u4e00\u6837\u6570\u636e\u7ed3\u6784\u5b66\u50bb\u4e86~~\n\n\u9996\u5148\u8fd9\u9053\u9898\u662f\u8981\u6c42\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u60f3\u5230[manacher\u7b97\u6cd5](https://www.luogu.org/blog/tbr-blog/solution-p3805)\n\n\u4f46\u7531\u4e8e$manacher$\u4e0d\u80fd\u6c42\u51fa\u53cc\u56de\u6587\u5b50\u4e32\uff0c\u6211\u4eec\u8981\u8003\u8651\u4e00\u4e9b\u6027\u8d28\n\n\u9996\u5148\u5bf9\u4e8e\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u5220\u6389\u4e24\u8fb9\u7684\u5b57\u7b26\u5b83\u4e00\u6837\u662f\u56de\u6587\u4e32\n\n\u7136\u540e$manacher$\u6c42\u51fa\u7684$p$\u6570\u7ec4\u5c31\u662f\u4ed6\u80fd\u62d3\u5c55\u7684\u6570\u91cf\uff0c\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5bf9$i, j$\uff0c\u5f53\u6ee1\u8db3$i+p_i+1\u2265j-p_j+1$\u65f6\uff0c\u4e24\u4e2a\u56de\u6587\u4e32\u6709\u4ea4\u96c6\uff0c\u6839\u636e\u4e0a\u8ff0\u6027\u8d28\uff0c\u8fd9\u5bf9\u70b9\u5bf9\u662f\u53ef\u4ee5\u6784\u6210\u53cc\u56de\u6587\u5b50\u4e32\u7684\n\n\u4e0a\u8ff0\u5f0f\u5b50\u662f\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u5b9e\u73b0\u7684\uff0c\u6bcf\u627e\u5230\u4e00\u4e2a$i+p_i$\uff0c\u4e22\u5c3d\u6743\u503c\u7ebf\u6bb5\u6811\u91cc\u9762\uff0c\u6bcf\u6b21\u67e5\u8be2\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d$[j-p_j, MAX]$\u7684\u6700\u5c0f\u7684$i$\uff0c\u7528$j-i+1$\u66f4\u65b0\u7b54\u6848\u5373\u53ef\n\n\uff08\u6ce8\u610f\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u56de\u6587\u4e32\u7684\u60c5\u51b5\uff09\n## $Code:$\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define rep(i, s, t) for(int i = s; i <= t; ++ i)\n#define maxn 200005\n#define inf 123456789\nint n, m, cnt, p[maxn], Ans, MAX = 200000, mi[maxn << 2], pax;\nchar c[maxn], s[maxn];\n#define ls k << 1\n#define rs k << 1 | 1\nil void build(int k, int l, int r) {\n\tmi[k] = inf;\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(ls, l, mid), build(rs, mid + 1, r);\n}\nil void insert(int k, int l, int r, int ll, int v) {\n\tif(l == r) return(void)(mi[k] = min(v, mi[k]));\n\tint mid = (l + r) >> 1;\n\tif(ll <= mid) insert(ls, l, mid, ll, v);\n\telse insert(rs, mid + 1, r, ll, v);\n\tmi[k] = min(mi[ls], mi[rs]);\n}\nil int query(int k, int l, int r, int ll, int rr) {\n\tif(ll <= l && r <= rr) return mi[k];\n\tint mid = (l + r) >> 1, ans = inf;\n\tif(ll <= mid) ans = query(ls, l, mid, ll, rr);\n\tif(mid < rr) ans = min(ans, query(rs, mid + 1, r, ll, rr));\n\treturn ans;\n}\nil void build() {\n\tscanf(\"%s\", c + 1), n = strlen(c + 1), s[++ cnt] = '~', s[++ cnt] = '#';\n\trep(i, 1, n) s[++ cnt] = c[i], s[++ cnt] = '#';\n\ts[++ cnt] = '!';\n}\nil void solve() {\n\tint mid = 0, mr = 0;\n\trep(i, 2, cnt - 1) {\n\t\tif(i <= mr) p[i] = min(p[mid * 2 - i], mr - i + 1);\n\t\telse p[i] = 1;\n\t\twhile(s[i - p[i]] == s[i + p[i]]) ++ p[i];\n\t\tif(i + p[i] > mr) mr = i + p[i] - 1, mid = i;\n\t\tAns = max(Ans, i - query(1, 1, MAX, i - p[i] + 1, MAX));\n\t\tinsert(1, 1, MAX, i + p[i], i), pax = max(pax, p[i]);\n\t}\n\tif(pax - 1 == n) printf(\"%d\", n - 1);\n\telse printf(\"%d\", Ans);\n}\nint main() {\n\treturn build(1, 1, MAX), build(), solve(), 0;\n}\n\n```",
        "postTime": 1572361344,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u6c42\u5b57\u7b26\u4e32\u7684\u6700\u957f\u5b50\u4e32$S$\u6ee1\u8db3\u53ef\u4ee5\u5206\u4e3a$X,Y$\uff0c\u4f7f\u5f97$X,Y$\u90fd\u662f\u56de\u6587\u4e32\u3002\n\n\u8bbe$l[i],r[i]$\u5206\u522b\u4e3a\u4ee5\u7b2c$i$\u4e2a\u5b57\u7b26\u4e3a\u5f00\u5934\uff08\u7ed3\u5c3e\uff09\u7684\u56de\u6587\u5b50\u4e32\u6700\u957f\u53ef\u4ee5\uff0c\u5219$ans=\\max_{i=0}^{n-2}(r[i]+l[i+1])$.\n\n\u81f3\u4e8e\u6c42$l,r$\uff0c\u6211\u4eec\u4f7f\u7528\u56de\u6587\u6811\u628a\u6b63\u5e8f\u548c\u53cd\u5e8f\u90fd\u505a\u4e00\u904d\uff0c\u6bcf\u6b21\u628a\u8fd9\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u81f3\u4e8e**manacher**\uff0c...\u90a3\u662f\u4ec0\u4e48\u795e\u4ed9\u4e1c\u897f\uff08\u5927\u96fe\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define Rint register int\nusing namespace std;\nconst int N = 100003;\nstruct Palindrome_Automaton {\n    int ch[N][26], fail[N], cnt[N], len[N], S[N], n, p, last;\n    inline int newnode(int l){\n        for(Rint i = 0;i < 26;i ++)\n            ch[p][i] = 0;\n        cnt[p] = 0;\n        len[p] = l;\n        return p ++;\n    }\n    inline void init(){\n        p = 0;\n        newnode(0); newnode(-1);\n        n = last = 0;\n        S[n] = -1;\n        fail[0] = 1;\n    }\n    inline int getfail(int x){\n        while(S[n - len[x] - 1] != S[n]) x = fail[x];\n        return x;\n    }\n    inline int insert(int c){\n        S[++ n] = c;\n        int cur = getfail(last);\n        if(!ch[cur][c]){\n            int now = newnode(len[cur] + 2);\n            fail[now] = ch[getfail(fail[cur])][c];\n            ch[cur][c] = now;\n        }\n        last = ch[cur][c];\n        cnt[last] ++;\n        return len[last];\n    }\n} pa;\nint n, l[N], ans;\nchar str[N];\nint main(){\n    scanf(\"%s\", str);\n    n = strlen(str);\n    pa.init();\n    for(Rint i = n - 1;~i;i --)\n        l[i] = pa.insert(str[i] - 'a');\n    pa.init();\n    for(Rint i = 0;i < n - 1;i ++)\n        ans = max(ans, l[i + 1] + pa.insert(str[i] - 'a'));\n    printf(\"%d\", ans);\n}\n```",
        "postTime": 1544594943,
        "uid": 68148,
        "name": "watermoon",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u8ba9\u7a9d\u6765\u8d21\u732e\u4e00\u4e2a~~\u5783\u573e~~$O(n+n\\log n)$\u7b97\u6cd5\n\n--------------\n\u9996\u5148\u53d1\u73b0\u6b64\u9898\u8ddf\u56de\u6587\u4e32\u6709\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u8054\u60f3\u5230manacher\u7b97\u6cd5\u3002\u5982\u679c\u4e0d\u4f1a\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u5148\u5eb7\u5eb7\u8fd9\u9053\u9898\u2014\u2014[**P3805** \u3010\u6a21\u677f\u3011manacher\u7b97\u6cd5](https://www.luogu.com.cn/problemnew/show/P3805)\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5148\u8dd1\u4e00\u904dmanacher\u7b97\u6cd5\uff0c\u5f97\u5230\u4e86\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u5bf9\u79f0\u8f74\u7684\u56de\u6587\u4e32\u7684\u6700\u5927\u534a\u5f84\uff0c\u5373\u4e0b\u6587\u7684$lr$\u6570\u7ec4\u3002\u7136\u540e\u6211\u4eec\u518d\u8bfb\u4e00\u8bfb\u9898\uff0c\u9898\u76ee\u8981\u6c42\u7684\u662f\u6700\u957f\u7684\u53cc\u56de\u6587\u4e32\uff0c\u4e5f\u5c31\u662f\u627e\u5230\u4e24\u4e2a\u4e0d\u540c\u7684\u56de\u6587\u4e32\uff0c\u4f7f\u5f97\u5b83\u4eec\u76f8\u4ea4\uff0c\u5185\u542b\u6216\u76f8\u5207\uff0c\u4e14\u8fd9\u4e24\u4e2a\u56de\u6587\u4e32\u7684\u5bf9\u79f0\u8f74\u7684\u8ddd\u79bb\u5c3d\u91cf\u7684\u957f\u3002\n\n\u90a3\u600e\u4e48\u627e\u5230\u8fd9\u4e24\u4e2a\u56de\u6587\u4e32\u5462\uff1f\n\n\u5927\u4f6c\u5c31\u76f4\u63a5\u7528$O(n)$\u9012\u63a8\u4e86\uff0c\u7136\u800c\u6211\u53ef\u80fd\u662f\u6570\u636e\u7ed3\u6784\u5b66\u50bb\u4e86\uff0c\u5c31\u628a\u5b83\u5f53\u4f5c\u4e86\u4e00\u4e2aRMQ\u95ee\u9898\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff1a\u679a\u4e3e\u6bcf\u4e2a\u56de\u6587\u4e32\uff0c\u5bfb\u627e\u5de6\u7aef\u70b9\u5728\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u8303\u56f4\u5185\uff0c\u4e14\u5bf9\u79f0\u8f74\u8ddd\u5c3d\u91cf\u9760\u53f3\uff0c\u4e5f\u5c31\u662f\u8ddd\u5f53\u524d\u56de\u6587\u4e32\u5bf9\u79f0\u8f74\u5c3d\u91cf\u8fdc\u7684\u56de\u6587\u4e32\uff0c\u5373$maxx=\\max\\limits^{r_i}_{j=l_i}{mid_j}$\u3002\uff08$l_i$\u548c$r_i$\u5206\u522b\u662f\u5f53\u524d\u56de\u6587\u4e32\u7684\u5de6\u3001\u53f3\u7aef\u70b9\uff0c$j$\u662f\u5728\u8fd9\u4e2a\u56de\u6587\u4e32\u8303\u56f4\u5185\u7684\u5de6\u7aef\u70b9\uff0c$mid$\u662f\u5bf9\u5e94\u7684\u5bf9\u79f0\u8f74\uff09\u7136\u540e\u6211\u4eec\u518d\u7528maxx\u51cf\u53bb\u5f53\u524d\u56de\u6587\u4e32\u7684\u5bf9\u79f0\u8f74\uff0c\u56e0\u4e3a\u4e4b\u524d\u8dd1manacher\u7b97\u6cd5\u65f6\u6dfb\u52a0\u8fc7\u2018#\u2019\uff0c\u6240\u4ee5\u5c31\u5f97\u5230\u4e86\u8fd9\u4e2a\u53cc\u56de\u6587\u4e32\u7684\u957f\u5ea6\u3002\u7136\u540e\u518d\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u8003\u8651\u4e86\u76f8\u4ea4\u548c\u5185\u542b\u7684\u60c5\u51b5\u3002\u56e0\u4e3a\u2018#\u2019\u7684\u5b58\u5728\uff0c\u8fd9\u6837\u8fd8\u540c\u65f6\u89e3\u51b3\u4e86\u76f8\u5207\u7684\u60c5\u51b5\u3002\n\n\u4e8e\u662f\u8fd9\u4e2a\u95ee\u9898\u5c31\u88ab\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2aRMQ\u95ee\u9898\u3002\u6709\u5f88\u591a\u7b97\u6cd5\u53ef\u4f9b\u9009\u62e9\uff0c\u8fd9\u91cc\u5c31\u7a9d\u5c31\u7528\u7ebf\u6bb5\u6811\u4e86\uff0c\u56e0\u4e3a\u672c\u4eba\u5199\u7684\u6bd4\u8f83\u719f\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fbe\u5230\u5982\u4e0b\u7684\u4ee3\u7801\u2014\u2014\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<string>\n#include<string.h>\n#define rep(i,a,b) for(register int i=a;i<=b;i++)\n#define maxn 500005\nusing namespace std;\n\nint ans,rl[maxn],maxright,pos,len,maxx[maxn],rl1[maxn],v[maxn];\nstring res=\"@#\";\n\nvoid manacher(string s) {\n\tlen=s.size()-1;\n\trep(i,0,len) {\n\t\tres+=s[i];\n\t\tres+=\"#\";\n\t}\n\tlen=res.size()-1;\n\trep(i,1,len) {\n\t\trl[i]= maxright > i ? min(rl[pos*2-i],maxright-i) : 1 ;\n\t\twhile(res[i-rl[i]]==res[i+rl[i]]) rl[i]++;\n\t\tif(i+rl[i]>maxright) maxright=i+rl[i],pos=i;\n\t}\n\trep(i,1,len) if(res[i]!='#'||rl[i]!=1) v[i-rl[i]+1]=max(v[i-rl[i]+1],i);//\u6ce8\u610f\u5f53\u8fd9\u4e2a\u56de\u6587\u4e32\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u4ec5\u5b58\u5728\u4e00\u4e2a'#'\u65f6\u4e0d\u80fd\u6dfb\u52a0\uff0c\u907f\u514d\u7b54\u6848\u51fa\u73b0\u53ea\u6709\u4e00\u4e2a\u56de\u6587\u4e32\u7684\u60c5\u51b5\u3002\n}//manacher\u7b97\u6cd5\n\nvoid build(int k,int l,int r) {\n\tif(l==r) {\n\t\tmaxx[k]=v[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(k*2,l,mid);\n\tbuild(k*2+1,mid+1,r);\n\tmaxx[k]=max(maxx[k*2],maxx[k*2+1]);\n}//\u6784\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\n\nint query(int k,int l,int r,int x,int y) {\n\tif(x<=l&&r<=y) return maxx[k];\n\tint mid=(l+r)>>1,res=0;\n\tif(x<=mid) res=max(res,query(k*2,l,mid,x,y));\n\tif(y>mid) res=max(res,query(k*2+1,mid+1,r,x,y));\n\treturn res;\n}//\u8be2\u95ee\u64cd\u4f5c\n\nvoid work(string s) {\n\tmanacher(s);\n\tbuild(1,1,len);\n\trep(i,1,len) {\n\t\tif(res[i]=='#'&&rl[i]==1) continue;//\u4e0e\u4e0a\u6587\u540c\u7406\u3002\n\t\tans=max(ans,query(1,1,len,i-rl[i],i+rl[i])-i);\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tstring s;\n\tcin>>s;\n\twork(s);\n\tcout<<ans;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1583462392,
        "uid": 91736,
        "name": "RPChe_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "[Luogu-P4555](https://www.luogu.org/problemnew/solution/P4555)\n\n[Blog\u4e0a\u9605\u8bfb\u6548\u679c\u66f4\u597d](https://panda2134.tk/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/2018/06/06/double-palindrome/)\n\n## \u9898\u610f\n\n\u6807\u9898\u5373\u9898\u610f\u3002\u6ce8\u610f\u4e24\u4e2a\u5b50\u4e32\u4e0d\u80fd\u91cd\u590d\u3002\n\n## \u601d\u8def\n\n\u5e76\u4e0d\u4f1a $\\text{Manacher}$ \uff0c\u6240\u4ee5\u8111\u8865\u4e86\u4e00\u79cd $O(n \\lg n)$ \u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u8003\u8651\u8f6c\u5316\u6240\u6709\u5076\u6570\u957f\u5ea6\u56de\u6587\u4e32\u3002\u6bcf\u4e2a\u5b57\u7b26\u4e4b\u95f4\u4ee5\u53ca\u5f00\u5934\u7ed3\u5c3e\u63d2\u5165 `#` \u5373\u53ef\u5168\u90e8\u8f6c\u4e3a\u5947\u6570\u957f\u5ea6\u3002\n\n\u7136\u540e\u53ef\u4ee5\u7ef4\u62a4\u6b63\u53cd\u4e32 Hash\uff0c\u6bcf\u6b21\u679a\u4e3e\u56de\u6587\u4e2d\u5fc3\u5e76\u4e14\u679a\u4e3e\u56de\u6587\u4e32\u4e00\u534a\u7684\u957f\u5ea6\u3002\u4f46\u662f\u8fd9\u6837\u662f $O(n^2)$ \u7684\u3002\u8fd9\u4e2a\u957f\u5ea6\u663e\u7136\u6ee1\u8db3\u5355\u8c03\u548c\u6709\u754c\u6027\uff0c\u7c7b\u4f3c\u6c42 $\\text{LCP}$ \uff0c\u53ef\u4ee5\u4e8c\u5206\u5b83\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u5904\u7406\u51fa\u4e86\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u56de\u6587\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\u3002\n\n\u7c7b\u4f3c \\[NOI2016\\] \u4f18\u79c0\u7684\u62c6\u5206\uff0c\u8003\u8651\u7528 `pre[], suf[]` \u8868\u793a\u67d0\u4e2a\u70b9\u5f80\u5de6\uff0c\u5f80\u53f3\u7684\u6700\u957f\u56de\u6587\u4e32\u3002\u663e\u7136\uff0c\u6700\u957f\u53cc\u56de\u6587\u4e32\u7531\u4e24\u4e2a\u6781\u957f\u56de\u6587\u4e32\u62fc\u63a5\u800c\u6210\u3002\n\n\u5982\u4f55\u6c42\u51fa\u8fd9\u4e24\u4e2a\u6570\u7ec4\u5462\uff1f\u5b9e\u9645\u4e0a\u6c42\u51fa\u6bcf\u4e2a\u56de\u6587\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u957f\u540e\uff0c\u53ef\u4ee5\u6ce8\u610f\u5230\u8fd9\u4e2a\u56de\u6587\u4e32\u4ee5\u53ca\u5b83\u7684\u540c\u56de\u6587\u4e2d\u5fc3\u7684\u5b50\u4e32\u5bf9\u5de6\u53f3\u7684\u8d21\u732e\u6210\u7b49\u5dee\u6570\u5217\uff0c\u4ee5\u5bf9\u4e8e `pre[] `\u7684\u8d21\u732e\u4e3a\u4f8b\uff0c\u5982\u56fe\uff1a\n\n![eg](https://panda2134.github.io/img/doublepalindrome.jpg)\n\n\u4e8e\u662f\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff1a\n\n1. \u533a\u95f4\u52a0 $a_0 = 1, d = 1$ \u7684\u7b49\u5dee\u6570\u5217\n2. \u5355\u70b9\u6c42\u503c\u3002\n\n\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u5b9e\u73b0\u3002\uff08\u611f\u8c22Claris\u795e\u7287\u548cAnoxiacxy\u540c\u5b66\uff09\n\n\u8003\u8651\u7ef4\u62a4\u6570\u7ec4 $b_i$\uff0c$b_i = a_i - i$\uff0c\u6240\u4ee5\u521d\u59cb\u65f6 $b_i = -i$\u3002\u4e8e\u662f\u64cd\u4f5c1\u5c31\u53d8\u4e3a $\\{b_n\\}$ \u7684\u533a\u95f4 chkmax \uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e $[l, r]$ \u7684\u533a\u95f4\u52a0\u7b49\u5dee\u6570\u5217\uff0c\u8f6c\u4e3a\u4e86\u5728 $\\{b_n\\}$ \u4e2d $[l, r]$ \u5bf9\u4e8e $-i+1$ \u53bb chkmax\u3002\n\n\u8003\u8651 chkmax \u7684\u5b9e\u73b0\u3002\u53ef\u4ee5\u91c7\u53d6\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u4e0d\u4e0b\u653e\u7ebf\u6bb5\u6811\u6807\u8bb0\uff0c\u5728\u67e5\u8be2\u5355\u70b9\u7684\u65f6\u5019\u8fd4\u56de\u6811\u4e0a\u6240\u6709\u7956\u5148\u548c\u53f6\u5b50\u7684 $\\max$ \u5373\u53ef\u3002\n\n\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\uff0c\u53ea\u9700\u5728 `#` \u5904\u52a0\u4ee5\u7edf\u8ba1\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef unsigned long long ull;\n\nconst int MAXN = 3e5, INF = 0x3f3f3f3f;\nconst ull base = 1313;\nint n, ans, pre[MAXN + 10], suf[MAXN + 10];\nchar s0[MAXN + 10], s[MAXN + 10], *ptr = &s[1];\null powbase[MAXN + 10], hval[MAXN + 10], hrev[MAXN + 10];\n\nstruct SegTree {\n#define lc(o) ((o) << 1)\n#define rc(o) ((o) << 1 | 1)\n    int sumv[(MAXN + 10) << 2], setv[(MAXN + 10) << 2];\n\n    SegTree() { fill(setv, setv + ((MAXN + 10) << 2), -INF); }\n\n    void maintain(int o, int l, int r) {\n        if(l != r) sumv[o] = sumv[lc(o)] + sumv[rc(o)];\n        if(setv[o] != -INF) sumv[o] = setv[o] * (r - l + 1);\n    }\n\n    void build_tree(int o, int l, int r) {\n        if(l == r)\n            setv[o] = -l;\n        else {\n            int mid = (l + r) >> 1;\n            build_tree(lc(o), l, mid);\n            build_tree(rc(o), mid + 1, r);\n        }\n        maintain(o, l, r);\n    }\n\n    void cover(int o, int l, int r, int ql, int qr, int val) {\n        if(ql > qr) return;\n        if(ql <= l && r <= qr)\n            setv[o] = max(setv[o], val);\n        else {\n            int mid = (l + r) >> 1;\n            if(ql <= mid) cover(lc(o), l, mid, ql, qr, val);\n            if(qr >= mid + 1) cover(rc(o), mid + 1, r, ql, qr, val);\n        }\n        maintain(o, l, r);\n    }\n\n    int query(int o, int l, int r, int p) {\n        maintain(o, l, r);\n        if(l == r)\n            return sumv[o];\n        else {\n            int mid = (l + r) >> 1;\n            if(p <= mid)\n                return max(setv[o], query(lc(o), l, mid, p));\n            else\n                return max(setv[o], query(rc(o), mid + 1, r, p));\n        }\n    }\n#undef lc\n#undef rc\n} seg1, seg2;\n\ninline ull get_hash(ull h[], int l, int r) {\n    return h[r] - h[l - 1] * powbase[r - l + 1];\n}\n\ninline int odd_palindrome(int p) {  // p\u662f\u56de\u6587\u4e2d\u5fc3\n    int l = 1, r = n + 1;\n    while(l < r) {\n        int mid = (l + r) >> 1;\n        if(mid <= max(p, n - p + 1) &&\n           get_hash(hval, p, p + mid - 1) ==\n               get_hash(hrev, n - p + 1, n - p + mid))\n            l = mid + 1;\n        else\n            r = mid;\n    }\n    return l - 1;\n}\n\nint main() {\n    scanf(\"%s\", &s0[1]);\n    n = strlen(s0 + 1);\n    *(ptr++) = '#';\n    for(int i = 1; i <= n; i++) {\n        *(ptr++) = s0[i];\n        *(ptr++) = '#';\n    }\n    n = strlen(s + 1);\n\n    powbase[0] = 1;\n    for(int i = 1; i <= MAXN; i++) powbase[i] = powbase[i - 1] * base;\n    for(int i = 1; i <= n; i++) hval[i] = hval[i - 1] * base + s[i];\n    for(int i = 1; i <= n; i++) hrev[i] = hrev[i - 1] * base + s[n - i + 1];\n\n    seg1.build_tree(1, 1, n);\n    seg2.build_tree(1, 1, n);\n\n    for(int i = 1; i <= n; i++) {\n        int len;\n        len = odd_palindrome(i);\n        seg1.cover(1, 1, n, i, i + len - 1, -i + 1);\n        seg2.cover(1, 1, n, n - i + 1, n - i + len, -n + i);\n    }\n    for(int i = 1; i <= n; i++) pre[i] = i + seg1.query(1, 1, n, i);\n    for(int i = 1; i <= n; i++) suf[i] = i + seg2.query(1, 1, n, i);\n    reverse(suf + 1, suf + n + 1);\n    for(int i = 2; i <= n - 1; i++)\n        if(s[i] == '#') ans = max(ans, pre[i - 1] + suf[i + 1]);\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1528288266,
        "uid": 23865,
        "name": "panda_2134",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4555 \u3010\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\n\n\u663e\u7136\u662f\u4e00\u9053\u56de\u6587\u81ea\u52a8\u673a\u677f\u9898\u3002\n\n\u8bbe $L[i]$ \u8868\u793a\u4ee5 $i$ \u53f7\u70b9\u4e3a\u5de6\u7aef\u70b9\u7684\u6700\u957f\u56de\u6587\u4e32 \uff0c $R[i]$ \u8868\u793a\u4ee5 $i$ \u53f7\u70b9\u4e3a\u53f3\u7aef\u70b9\u7684\u6700\u957f\u56de\u6587\u4e32\u3002\n\n$L[i]$ \u53ef\u4ee5\u901a\u8fc7\u5c06\u56de\u6587\u4e32\u5012\u8fc7\u6765\u5efa\u81ea\u52a8\u673a\u6c42\u5f97 \uff0c $R[i]$ \u53ef\u4ee5\u76f4\u63a5\u7528\u539f\u56de\u6587\u4e32\u5efa\u81ea\u52a8\u673a\u6c42\u5f97\u3002\n\n\u6700\u540e\u7b54\u6848\u4e3a\n\n$$Ans=max(R[i]+L[i+1]) ~~~ (i<n-1)$$\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n\nconst int MAXN = 100000 , MAXK = 26;\nstruct Palindrome_Automaton {\n    int Size , Last , Root0 , Root1 , Trans[ MAXN + 5 ][ MAXK + 5 ] , Link[ MAXN + 5 ];\n    int n , Str[ MAXN + 5 ];\n    int Len[ MAXN + 5 ] , L[ MAXN + 5 ] , R[ MAXN + 5 ];\n\n    void Init( ) {\n        n = 0 , Size = 0;\n        memset( Trans , 0 , sizeof( Trans ) );\n        memset( Link , 0 , sizeof( Link ) );\n        memset( Len , 0 , sizeof( Len ) );\n\n        Root0 = Size ++ , Root1 = Size ++; Last = Root1;\n        Len[ Root0 ] = 0  , Link[ Root0 ] = Root1;\n        Len[ Root1 ] = -1 , Link[ Root1 ] = Root1;\n    }\n    \n    int Extend( int ch ) {\n        int u = Last; Str[ ++ n ] = ch;\n        for( ; Str[ n ] != Str[ n - Len[ u ] - 1 ] ; u = Link[ u ] );\n        if( !Trans[ u ][ ch ] ) {\n            int Newnode = ++ Size , v = Link[ u ];\n            Len[ Newnode ] = Len[ u ] + 2;\n            for( ; Str[ n ] != Str[ n - Len[ v ] - 1 ] ; v = Link[ v ] );\n            Link[ Newnode ] = Trans[ v ][ ch ]; Trans[ u ][ ch ] = Newnode;\n        }\n        Last = Trans[ u ][ ch ];\n        return Len[ Last ];\n    }\n    void Build1( char *str ) {\n        Init( );\n        int len = strlen( str );\n        for( int i = 0 ; i < len ; i ++ )\n            R[ i ] = Extend( str[ i ] - 'a' + 1 );\n    }\n    void Build2( char *str ) {\n        Init( );\n        int len = strlen( str );\n        for( int i = len - 1 ; i >= 0 ; i -- )\n           L[ i ] = Extend( str[ i ] - 'a' + 1 );\n    }\n\n    int Calc( char *str ) {\n        int Ans = 0 , len = strlen( str );\n        for( int i = 0 ; i < len - 1 ; i ++ )\n            Ans = max( Ans , R[ i ] + L[ i + 1 ] );\n        return Ans;\n    }\n}PAM;\n\nchar str[ MAXN + 5 ];\nint main() {\n    scanf(\"%s\", str );\n    PAM.Build1( str );\n    PAM.Build2( str );\n    printf(\"%d\", PAM.Calc( str ) );\n    return 0;\n}\n```\n",
        "postTime": 1575380565,
        "uid": 123802,
        "name": "chihik",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u505a\u6cd5\u4e5f\u662f Manacher\uff0c\u4f46\u662f\u548c dalao \u4eec\u679a\u4e3e\u5207\u5272\u70b9\u4e0d\u592a\u4e00\u6837\u3002\n\n\u5148\u5b9a\u4e49\u56de\u6587\u4e32\u7684\u201c\u6838\u201d\u4e3a\u56de\u6587\u4e32\u6700\u4e2d\u95f4\u7684\u5b57\u7b26\u3002\u4e24\u7ffc\u5373\u4e3a\u56de\u6587\u4e32\u53bb\u6389\u6700\u4e2d\u95f4\u5b57\u7b26\u4e4b\u540e\u7684\u4e24\u4e2a\u5206\u4e32\u3002\u663e\u7136\uff0c\u4e00\u4e2a\u6700\u957f\u53cc\u56de\u6587\u4e32\u7684\u957f\u5ea6\u5c31\u662f Manacher \u5f62\u5f0f\u4e0b\u63d2\u5165 `'#'` \u8fc7\u540e\u7684\u4e24\u4e2a\u6838\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\n\n\u8bc1\u660e\u7684\u8bdd\uff0c\u5b9a\u4e49\u201c\u865a\u6838\u201d\u5373\u6838\u4e3a\u5b57\u7b26 `'#'`\uff0c\u201c\u5b9e\u6838\u201d\u5373\u4e0d\u662f\u865a\u6838\u7684\u6838\uff0c\u7136\u540e\u5206\u60c5\u51b5\u8ba8\u8bba\u3002\u4e0d\u7ba1\u662f\u5b9e\u6838\u8fd8\u662f\u865a\u6838\uff0c\u5728\u63d2\u5165 `'#'` \u8fc7\u540e\u4e24\u7ffc\u7684\u957f\u5ea6\u5c31\u662f\u539f\u56de\u6587\u4e32\u957f\uff0c\u800c\u4e24\u4e2a\u6838\u7684\u4e24\u7ffc\u4f1a\u5728\u6700\u672b\u7aef\u7684 `'#'` \u5904\u91cd\u53e0\uff0c\u6240\u4ee5\u4e0d\u7ba1\u662f\u5b9e\u6838\u8fd8\u662f\u865a\u6838\u8fd8\u662f\u4e00\u865a\u4e00\u5b9e\uff0c\u4e24\u4e2a\u6838\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u662f\u4e24\u4e2a\u56de\u6587\u4e32\u4e24\u7ffc\u957f\u5ea6\u76f8\u52a0\uff0c\u5c31\u662f\u53cc\u56de\u6587\u4e32\u957f\u3002\n\n\u6240\u4ee5\uff0c\u53ea\u9700\u8981\u5728 Manacher \u7684\u65f6\u5019\u5bf9\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7ef4\u62a4\u4e00\u4e0b\u4e24\u7ffc\u5305\u542b\u5b83\u7684\u6700\u5c0f\u7684\u6838\u7684\u4f4d\u7f6e\u5c31\u597d\u4e86\u3002~~\u6839\u672c\u4e0d\u9700\u8981\u8003\u8651\u4ec0\u4e48\u6781\u5927\u56de\u6587\u4e32~~\uff0c\u5728 Manacher \u7684\u8fc7\u7a0b\u4e2d\uff0c\u627e\u4e00\u4e0b\u4e24\u7ffc\u80fd\u591f\u89e6\u53ca\u5230\u7684\u6700\u8fdc\u7684\u5730\u65b9\u7684\u90a3\u4e2a\u4f4d\u7f6e\u88ab\u8986\u76d6\u5230\u7684\u6700\u8fdc\u7684\u6838\u3002\n\n\u8003\u8651\u6bcf\u6b21\u5faa\u73af\u7684\u65f6\u5019\u5982\u4f55\u7ef4\u62a4\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e24\u7ffc\u8986\u76d6\u5230\u7684\u5b57\u7b26\u4e2d\u6709\u4e00\u4e9b\u5df2\u7ecf\u6709\u503c\uff0c\u65b0\u7684\u503c\u5fc5\u7136\u6bd4\u539f\u6765\u7684\u503c\u5927\u3002\u6240\u4ee5\uff0c\u6bcf\u6b21\u5faa\u73af\u7684\u65f6\u5019\u53ea\u4f1a\u66f4\u65b0\u90a3\u4e9b\u6ca1\u6709\u503c\u7684\u5b57\u7b26\uff0c\u800c\u90a3\u4e9b\u6ca1\u6709\u503c\u7684\u5b57\u7b26\u5c31\u662f Manacher \u8fc7\u7a0b\u4e2d maxr \u4e4b\u5916\u7684\u5b57\u7b26\u3002\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5 $\\Theta(n)$ \u7ef4\u62a4\u4e86\u3002\n\n\u81f3\u4e8e `ababa` \u8fd9\u79cd\u51fa\u9505\u6570\u636e\uff0c\u53ea\u9700\u8981\u7b80\u5355\u5730\u5c06\u5305\u542b\u6700\u5f00\u5934\u7684 `#` \u7684\u6838\u7684\u4f4d\u7f6e\u8bbe\u7f6e\u6210 1 \u5c31\u597d\u4e86\u3002\n\n\u81f3\u4e8e\u4f18\u52bf\uff0c\u53ea\u9700\u8981\u989d\u5916\u626b\u4e00\u904d\uff0c\u5e38\u6570\u8f83\u5c0f\uff08\u8bf4\u5f97\u597d\u50cf\u6709\u4eba\u5361\u8fd9\u70b9\u5e38\u6570\u4e00\u6837\uff09\n\n\u9644 AC \u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nvoid chkmax(int& a,int b)\n{\n\tif(a<b)\n\t{\n\t\ta = b;\n\t}\n}\n\nchar inp[100005];\nchar str[200005];\n\nint ri[200005];\nint core[200005];\n\nint manacher(int n)\n{\n\tint ans = 0;\n\n\tint maxr = 0;\n\tint mid = 0;\n\n\tcore[0] = 1;\n\tfor(int i=1; i<n; ++i)\n\t{\n\t\tri[i] = maxr<i ? 0 : min(maxr-i+1,ri[2*mid-i]);\n\t\twhile(str[i+ri[i]] == str[i-ri[i]])\n\t\t{\n\t\t\t++ri[i];\n\t\t}\n\t\t\n\t\tchkmax(ans,i-core[i-ri[i]]); // \u5982\u679c\u6309\u7167\u4e0a\u9762\u6240\u5199\u7684\uff0c\u8fd9\u91cc\u662f\u4e24\u7ffc\u8986\u76d6\u5230\u7684\u6700\u524d\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5e94\u8be5\u662f core[i-ri[i]+1]\u3002\u4f46\u662f\uff0c\u6700\u672b\u4e00\u4e2a\u5b57\u7b26\u6ca1\u6709\u4e24\u7ffc\uff0c\u56e0\u6b64\u4f1a\u51fa\u9505\u3002\u6240\u4ee5\uff0c\u8fd9\u91cc\u5fc5\u987b\u662f\u4e24\u7ffc\u8986\u76d6\u5230\u7684\u6700\u524d\u7684\u4f4d\u7f6e -1\u3002\u5bb9\u6613\u8bc1\u660e\uff0c\u8fd9\u6837\u505a\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002\n\n\t\tif(i+ri[i]-1 > maxr)\n\t\t{\n\t\t\tfor(int j=maxr+1; j<i+ri[i]; ++j)\n\t\t\t{\n\t\t\t\tcore[j] = i;\n\t\t\t}\n\t\t\tmaxr = i+ri[i]-1;\n\t\t\tmid = i;\n\t\t}\n\t}\n\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%s\",inp+1);\n\n\tint len = strlen(inp+1);\n\tfor(int i=1; i<=len; ++i)\n\t{\n\t\tstr[i*2-1] = inp[i];\n\t\tstr[i*2] = '#';\n\t}\n\tstr[len*2] = '$';\n\tstr[0] = '#';\n\n\tprintf(\"%d\\n\",manacher(len*2));\n}\n```",
        "postTime": 1576206716,
        "uid": 49458,
        "name": "\u6728\u6728\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u5b66\u957f\u8bb2\u8fc7\u7684$Manacher$\u4f8b\u9898\uff0c~~\u4e0a\u8bfe\u7761\u89c9\u6ca1\u542c\u61c2~~\n\n\u5f00\u9898\u7684\u65f6\u5019\u6beb\u65e0\u601d\u8def\uff0c\u6700\u540e\u7ec8\u4e8e\u627e\u5230\u601d\u8def\u4e86\n\n\u601d\u8def\u4e3b\u8981\u662f\u679a\u4e3e\u5206\u754c\u70b9\uff0c\u628a\u8fd9\u4e2a\u70b9\u4e24\u8fb9\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\u62fc\u8d77\u6765\n\n\u5728\u6bcf\u4e00\u6b21$Manacher$\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u987a\u4fbf\u7ef4\u62a4\n\n- \u4ee5\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5de6\u7aef\u70b9\u4e3a\u5176\u5de6\u7aef\u70b9\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\n\n- \u4ee5\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u53f3\u7aef\u70b9\u4e3a\u5176\u53f3\u7aef\u70b9\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e24\u4e2a\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u957f\u5ea6\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u7ebf\u6027\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u91cc\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5de6\u53f3\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\n\n\u9884\u5904\u7406\u4e4b\u540e\u8fd8\u8981\u9012\u63a8\uff0c\u5927\u81f4\u5c31\u662f\u4e0d\u65ad\u5730\u5c06\u4e4b\u524d\u56de\u6587\u4e32\u7684\u957f\u5ea6$-$$2$\u53d6\u6700\u5927\u503c\n\n\u6700\u540e\u679a\u4e3e\u6bcf\u4e2a#\u6240\u5728\u4f4d\u7f6e\uff0c\u4e0d\u65ad\u66f4\u65b0$ans$\u53d6\u6700\u5927\u503c\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nchar s[222222];\nchar t[222222];\nint p[222222];\nint l[222222];\nint r[222222];\nint n,k,o,ans;\nint main()\n{\n    scanf(\"%s\",t+1);n=strlen(t+1);\n    for(register int i=1;i<=n;++i) s[i*2]=t[i],s[i*2+1]='#';\n    s[0]=s[1]='#';n=n*2+2;s[n]='\\0';\n    for(register int i=0;i<n;++i)\n    {\n        p[i]=i<o?min(o-i,p[k*2-i]):1;\n        while(s[i+p[i]]==s[i-p[i]]) ++p[i];\n        if(i+p[i]>o) k=i,o=i+p[i];\n        l[i+p[i]-1]=max(p[i]-1,l[i+p[i]-1]);\n        r[i-p[i]+1]=max(p[i]-1,r[i-p[i]+1]); \n    }\n    for(register int i=n-3;i>0;i-=2) l[i]=max(l[i],l[i+2]-2);\n    for(register int i=3;i<n;i+=2) r[i]=max(r[i],r[i-2]-2);\n    for(register int i=1;i<n;i+=2) if(l[i]&&r[i]) ans=max(ans,l[i]+r[i]);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1550759024,
        "uid": 110198,
        "name": "RicardoShips",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u9a6c\u62c9\u8f66~\n\n\u867d\u7136\u77e5\u9053\u5b83\u662f\u9053\u9a6c\u62c9\u8f66\u7684\u9898\u4f46\u662f\u6c42\u51fa\u4e86l\u6570\u7ec4\u4ee5\u540e\u5e76\u6ca1\u6709\u601d\u8def2333\n\nl\u6570\u7ec4\u5c31\u662fi\u4e3a\u4e2d\u70b9\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u534a\u5f84 \uff08i\u672c\u8eab\u4e5f\u7b97\u5728\u5185\uff09\n\n\u53ef\u4ee5\u6c42\u51faleft\u548cright\u6570\u7ec4 \u610f\u601d\u662f\u4ece\u5de6\u8fb9\uff08\u53f3\u8fb9\uff09\u8fc7\u6765\u7684\u4ee5i\u4e3a\u7ec8\u70b9\uff08\u56de\u6587\u4e32\u5305\u62eci\u8fd9\u4e2a\u70b9\uff09\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u534a\u5f84\n\n\u5728\u6c42l\u6570\u7ec4\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5f88\u987a\u4fbf\u7684\u7ef4\u62a4\u5b83~\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u7ef4\u62a4\u5b83\u7684\u65f6\u5019 \u5982\u679ci\u662f\u5728\u4e2d\u9014\u622a\u65ad\u4e86\u4e00\u4e2a\u56de\u6587\u4e32 \u90a3\u5c31\u4e0d\u4f1a\u8ba1\u7b97\u8fd9\u4e2a\u4e32\u7684\u957f\u5ea6\uff08\u6bd5\u7adf\u4e0d\u80fd\u6bcf\u6c42\u4e00\u4e2al\u5c31\u628a\u8fd9\u6574\u4e2a\u56de\u6587\u4e32\u90fd\u626b\u4e00\u904d \u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff09\n\n\u4e5f\u5c31\u662f\u8bf4\u6c42\u51fa\u4e00\u4e2a\u56de\u6587\u4e32\u65f6\u53ea\u662f\u987a\u4fbf\u8ba1\u7b97\u4e86\u8be5\u56de\u6587\u4e32\u4e24\u4e2a\u7aef\u70b9\u7684left\u548cright \u4e2d\u95f4\u4e00\u8fde\u4e32\u7684\u70b9\u5e76\u6ca1\u6709\u8003\u8651\n\n\u4f46\u662f\u901a\u8fc7\u6253\u8868\uff1f \u53ef\u4ee5\u53d1\u73b0 \n\nleft[i]=max(left[i+1]-1,left[i]) \n\nright[i]=max(right[i-1]+1,right[i])\n\n\n\u7136\u540e\u6211\u4eec\u5c31\u5904\u7406\u51fa\u4e86left\u548cright\u6570\u7ec4~\n\n\u7528\u5904\u4e5f\u5f88\u663e\u7136\u4e86\n\n\u679a\u4e3e\u6bcf\u4e00\u4e2a\u2018#\u2019\uff08\u56e0\u4e3a\u4e24\u4e2a\u56de\u6587\u4e32\u662f\u4e0d\u4f1a\u76f8\u4e92\u5173\u8054\u7684 left\u548cright\u6570\u7ec4\u4e2d\u5305\u542b\u4e86i\u8fd9\u4e2a\u70b9 \u5982\u679c\u679a\u4e3e\u4e0d\u662f\u2018#\u2019\u7684\u5b57\u7b26\u5c31\u4f1a\u91cd\u590d\uff09\n\n\u627e\u5230left+right\u6700\u5927\u7684\u70b9\n\n\u7b54\u6848\u5c31\u662fleft+right-2 \u51cf\u6389\u7684\u662f\u91cd\u590d\u8ba1\u7b97\u7684\u2018#\u2019\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u662f-2\u5c31\u624b\u63a8\u4e00\u4e0b\u5427 \u6211\u4e5f\u8bf4\u4e0d\u6e05\u695a\uff08\u9003\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nchar ss[100010],s[200010];\nint len,l[200010],mid=1,r=1;\nint le[200010],ri[200010];//\u4ece\u5de6\u8fb9\u53f3\u8fb9\u6765\u7684\u5728\u8fd9\u4e2a\u70b9\u7ed3\u675f\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u534a\u5f84 \nint maxx,t;\nint main()\n{\n\tscanf(\"%s\",ss); len=strlen(ss);\n\ts[0]='*'; len=2*len+1;\n\tfor(int i=1;i<=len;i++)\n\t{\n\t\tif(i%2==1) s[i]='#';\n\t\telse s[i]=ss[i/2-1];\n\t}\n\tl[1]=1;\n\tfor(int i=2;i<=len;i++)\n\t{\n\t\tif(i<r) l[i]=min(l[2*mid-i],r-i);\n\t\telse l[i]=1;\n\t\twhile(s[i+l[i]]==s[i-l[i]]) l[i]++;\n\t\tif(i+l[i]>r) mid=i,r=l[i]+i; \n\t\tif(i+l[i]-1<=len) le[i+l[i]-1]=max(le[i+l[i]-1],l[i]);\n\t\tif(i-l[i]+1>=1) ri[i-l[i]+1]=max(ri[i-l[i]+1],l[i]);\n\t}\n\tfor(int i=1;i<=len;i++) ri[i]=max(ri[i],ri[i-1]-1);\n\tfor(int i=len;i>=1;i--) le[i]=max(le[i],le[i+1]-1);\n\tfor(int i=1;i<=len;i+=2)\n\t{\n\t\tif(le[i]+ri[i]>maxx)\n\t\t{\n\t\t\tmaxx=le[i]+ri[i];\n\t\t\tt=i;\n\t\t}\n\t}\n\tprintf(\"%d\",maxx-2);\n\treturn 0;\n}\n```\n",
        "postTime": 1534582067,
        "uid": 85691,
        "name": "LengChu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u4e00\u5f00\u59cbWA\u4e86\u597d\u51e0\u53d1\uff0c\u770b\u4e86\u9898\u89e3\u53d1\u73b0\u601d\u8def\u662f\u4e00\u6837\u7684\n\n**PS\uff08\u4e00\u70b9\u9898\u5916\u8bdd\uff09:\n\u6240\u6709\u7528\u9a6c\u62c9\u8f66\u7684\u4eba\u4e0d\u4ec5\u601d\u8def\u4e00\u6837\u4e0d\u5947\u602a\uff0c\u4f46\u662f\u8fde\u505a\u6cd5\u548c\u7801\u98ce\u90fd\u5b8c\u5168\u4e00\u6837\uff0c\u662f\u8ba9\u6211\u5f88\u4e0d\u89e3\u7684  \n\n\u4e0d\u77e5\u9053copy\u522b\u4eba\u7684\u4ee3\u7801\u8fd8\u53d1\u9898\u89e3\u662f\u4ec0\u4e48\u5fc3\u6001**\n\n\u8fd9\u9053\u5f88\u6c34\u7684\u9898\u76ee\u7684\u7684\u786e\u786e\u6539\u4e86\u6211\u4e00\u4e2a\u591a\u5c0f\u65f6\uff0c\u4f46\u662f\u6211\u4e0d\u89c9\u5f97\u6211\u6d6a\u8d39\u4e86\u8fd9\u4e00\u5c0f\u65f6\uff0c\u4ed6\u8ba9\u6211\u66f4\u719f\u6089\u4e86\u9a6c\u62c9\u8f66\u7684\u7528\u6cd5\n\n\u8fd9\u9898\u5728\u6211\u7684\u77e5\u8bc6\u8303\u56f4\u5185\u7528\u56de\u6587\u6811\u4e0d\u4f1a\u5199\uff0c\u56e0\u4e3a\u6211\u638c\u63e1\u7684\u56de\u6587\u6811\u53ea\u80fd\u6c42\u51fa\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32\u4e2d\u5176\u4e2d\u4e00\u4e2a\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u6240\u4ee5\u9009\u62e9\u4e86\u9a6c\u62c9\u8f66\u7b97\u6cd5\n\n\n------------\n\n\u548c\u5176\u4ed6\u5404\u4f4d\u5927\u4f6c\u7684\u9898\u89e3\u601d\u8def\u662f\u4e00\u6837\u7684 \n\n\u5728\u6c42\u9a6c\u62c9\u8f66\u7684\u8fc7\u7a0b\u4e2d\u6211\u518d\u7ef4\u62a4\u4e86\u4e24\u4e2a\u53d8\u91cf\n\n\u4e00\u4e2a a[i] \u8868\u793a\u4ee5i\u7ed3\u675f\u7684\u70b9\u7684\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n\n\u4e00\u4e2a b[i] \u8868\u793a\u4ee5i\u5f00\u59cb\u7684\u70b9\u7684\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n\n\u7136\u540e\u5728\u6c42\u51fa\u6240\u6709\u4f4d\u7f6e\u7684a\u548cb\u4e4b\u540e\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u6027\uff0c\u6c42\u51fa\u6700\u5927\u503c\uff08ans\uff09\n    \n    ans=max\uff08ans\uff0ca[i]+b[i+1]\uff09;\n    \n    \u4e3a\u4ec0\u4e48\u662fa[i]+b[i+1]\u5462\uff1f\n    \u56e0\u4e3a\u6211\u4eec\u8981\u6c42\u51fa\u4ee5i\u4f4d\u7f6e\u7ed3\u5c3e\u7684\u6700\u957f\u56de\u6587\u4e32\u548c\u4ed6\u4e0b\u4e00\u4e2a\u4f4d\u7f6ei+1\u5f00\u59cb\u7684\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n    \n    \u4e0b\u9762\u653e\u4ee3\u7801\uff1a\n    \n```c\n\t#include<stdio.h>\n\t#include <set>\n\t#include<map>\n\t#include<string.h>\n\t#include <cmath>\n\t#include <queue>\n\t#include <stack>\n\t#include <vector>\n\t#include <string>\n\t#include <cstdio>\n\t#include <cstdlib>\n\t#include <cstring>\n\t#include <iomanip>\n\t#include <iostream>\n\t#include <algorithm>\n\t#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n\tusing namespace std;\n\ttypedef long long ll;\n\tconst ll INF = 0x3f3f3f3f;\n\tconst ll MOD=1000000007;\n\t#define in(a) scanf(\"%d\",&(a))\n\tconst int MAXN=100010;\n\tchar Ma[MAXN*2];\n\tint Mp[MAXN*2];\n\tint a[MAXN],b[MAXN];\nvoid Manacher(char s[],int len)\n{\nint l=0; Ma[l++]='$';\nMa[l++]='#';\nfor(int i=0;i<len;i++)\n{\nMa[l++]=s[i];\nMa[l++]='#';\n}\nMa[l]=0;\nint mx=0,id=0;\nfor(int i=0;i<l;i++)\n{\nMp[i]=mx>i?min(Mp[2*id-i],mx-i):1;\n    if(i%2==1&&(Mp[i]-1)%2==0)//\u5982\u679c\u662f\u4e3a\u2018#\u2019\u4e14\u957f\u5ea6\u662f\u5076\u6570\u7684\u8bdd\u5c31\u66f4\u65b0\uff0c\u8fd9\u91cc\u5fc5\u987b\u52a0\u957f\u5ea6\u4e3a\u5076\u6570\u6761\u4ef6\uff0c\u4e0d\u7136\u4f1aWA\uff08\u6211\u8bd5\u8fc7\uff09\n    {\n        if(Mp[i]-1)//\u957f\u5ea6\u4e0d\u4e3a\u96f6\u624d\u80fd\u66f4\u65b0\n        {\n            a[i/2+(Mp[i]-1)/2]=max(a[i/2+(Mp[i]-1)/2],Mp[i]-1);  // i/2+(Mp[i]-1)/2  \u662fa\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u9700\u8981\u4f60\u81ea\u5df1\u7b97\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u600e\u4e48\u7b97\u5f97\u4e86\uff0c\u5f88\u7b80\u5355\u7684\uff0c\u4e0b\u9762\u4e5f\u4e0d\u8bf4\u4e86\n            b[i/2-(Mp[i]-1)/2+1]=max(b[i/2-(Mp[i]-1)/2+1],Mp[i]-1);\n        }\n    }\n     else if(i%2==0&&(Mp[i]-1)%2==1)//\u5982\u679c\u662f\u4e3a\u2018\u5b57\u6bcd\u2019\u4e14\u957f\u5ea6\u662f\u5947\u6570\u7684\u8bdd\u5c31\u66f4\u65b0\n    {\n        if(Mp[i]-1)\n        {\n            a[i/2+(Mp[i]-1)/2]=max(a[i/2+(Mp[i]-1)/2],Mp[i]-1);\n            b[i/2-(Mp[i]-1)/2]=max(b[i/2-(Mp[i]-1)/2],Mp[i]-1);\n        }\n    }\nwhile(Ma[i+Mp[i]]==Ma[i-Mp[i]])\n    {\n        Mp[i]++;\n        if(i%2==1&&(Mp[i]-1)%2==0)//\u8fd9\u91cc\u548c\u4e0a\u9762\u7684\u66f4\u65b0\u662f\u4e00\u6837\u7684\uff0c\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u4e0b\u6765\uff0c\u56e0\u4e3a\u9a6c\u62c9\u8f66\u5728\u9010\u6b65\u6269\u5927\u56de\u6587\u4e32\u957f\u5ea6\u7684 \u6240\u4ee5\u8fc7\u7a0b\u4e2d\u51fa\u6765\u7684\u4e5f\u90fd\u662f\u56de\u6587\u4e32\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4f9d\u7136\u9700\u8981\u66f4\u65b0a\u548cb\u6570\u7ec4\n    {\n        if(Mp[i]-1)\n        {\n            a[i/2+(Mp[i]-1)/2]=max(a[i/2+(Mp[i]-1)/2],Mp[i]-1);\n            b[i/2-(Mp[i]-1)/2+1]=max(b[i/2-(Mp[i]-1)/2+1],Mp[i]-1);\n        }\n    }\n    else if(i%2==0&&(Mp[i]-1)%2==1)\n    {\n        if(Mp[i]-1)\n        {\n            a[i/2+(Mp[i]-1)/2]=max(a[i/2+(Mp[i]-1)/2],Mp[i]-1);\n            b[i/2-(Mp[i]-1)/2]=max(b[i/2-(Mp[i]-1)/2],Mp[i]-1);\n        }\n    }\n    }\n\n\nif(i+Mp[i]>mx)\n{\nmx=i+Mp[i]; id=i;\n}\n\n}\n}\nchar s[MAXN];\nint len;\nint main()\n{\nscanf(\"%s\",s);\nlen=strlen(s); Manacher(s,len);\nint ans=0;\nfor(int i=1;i<len;i++)\n{\n    if(a[i]!=0&&b[i+1]!=0)\n    ans=max(ans,a[i]+b[i+1]);\n}\n    cout<<ans<<endl;\nreturn 0;\n}\n\n```\n\n\u5c31\u662f\u8fd9\u6837\u4e86\uff0c\u867d\u7136\u770b\u7740\u4ee3\u7801\u5f88\u957f\uff0c\u4f46\u662f\u61c2\u9a6c\u62c9\u8f66\u7684\u4eba\u5e94\u8be5\u770b\u7684\u51fa\u6765\u6211\u53ea\u662f\u9b54\u6539\u4e86\u4e00\u70b9\u70b9\n\n\u6211\u89c9\u5f97\u6211\u5199\u7684\u601d\u8def\u662f\u4e00\u4e2a\u7528\u9a6c\u62c9\u8f66\u7684\u5e38\u4eba\u90fd\u80fd\u60f3\u5230\u7684\u601d\u8def\uff0c\u6240\u4ee5\u806a\u660e\u7684\u4f60\u4e00\u5b9a\u80fd\u770b\u7684\u61c2\u6211\u7684\u4ee3\u7801\n\n\n\n\n",
        "postTime": 1568342282,
        "uid": 133364,
        "name": "xiayucc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u56e0\u4e3a\u5927\u5bb6\u7684\u5e38\u7528\u505a\u6cd5\u60f3\u4e0d\u51fa\u6765\uff0c\u6211\u53c8\u975e\u5e38\u559c\u6b22\u7b80\u5355\u7c97\u66b4\u7684\u505a\u6cd5\uff0c\u6240\u4ee5\u6211\u6765\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e2a\u66b4\u529b\u7684O(nlogn)\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u6211\u4eec\u4e00\u8fb9\u9a6c\u62c9\u8f66\u53ef\u4ee5\u77e5\u9053\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u534a\u5f84\u3002\u7136\u540e\u6211\u4eec\u5047\u8bbe\u5de6\u56de\u6587\u5b50\u4e32\u7684**\u56de\u6587\u4e2d\u5fc3**\u4e3a**id**,\u53f3\u56de\u6587\u5b50\u4e32\u7684**\u56de\u6587\u4e2d\u5fc3**\u4e3a**i**\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u4e2d\u5fc3i\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u53bb\u67e5\u8be2\u4e00\u4e2a\u5de6\u4e2d\u5fc3id\uff0c\u4f7f\u5f97\u4ee5id\u4e3a\u4e2d\u5fc3\u7684\u8fd9\u4e2a\u56de\u6587\u4e32\u53ef\u4ee5\u548c\u4ee5i\u4e3a\u4e2d\u5fc3\u7684\u8fd9\u4e2a\u56de\u6587\u4e32\u76f8\u8fde\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0id\u4f4d\u7f6e\u8d8a\u9760\u5de6\u8d8a\u597d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e00\u68f5\u7ebf\u6bb5\u6811\u8d2a\u5fc3\u7684\u53bb\u627eid\u3002\n\n\u627e\u5230id\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u65b0\u7684\u53cc\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u662fi - id\uff0c \u6240\u4ee5\u66f4\u65b0\u7b54\u6848\u5c31\u884c\u4e86\u3002\u4f46\u662f\u5f53id == 1\u65f6\u53ef\u80fd\u5f97\u5230\u4e00\u4e2a\u5355\u56de\u6587\u4e32\uff0c\u6240\u4ee5\u7279\u5224\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n\n```cpp\n//author Eterna\n#define Hello the_cruel_world!\n#pragma GCC optimize(2)\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<map>\n#include<set>\n#include<queue>\n#include<stack>\n#include<utility>\n#include<cmath>\n#include<climits>\n#include<deque>\n#include<functional>\n#include<numeric>\n#define max(x,y) ((x) > (y) ? (x) : (y))\n#define min(x,y) ((x) < (y) ? (x) : (y))\n#define ABS(x) ((x) >= 0 ? (x) : (-(x)))\n#define pb(x) push_back(x)\n#define lowbit(x) ((x) & (-(x)))\n#define FRIN freopen(\"C:\\\\Users\\\\Administrator.MACHENI-KA32LTP\\\\Desktop\\\\in.txt\", \"r\", stdin)\n#define FROUT freopen(\"C:\\\\Users\\\\Administrator.MACHENI-KA32LTP\\\\Desktop\\\\out.txt\", \"w\", stdout)\n#define FAST ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n#define outd(x) printf(\"%d\\n\", x)\n#define outld(x) printf(\"%I64d\\n\", x)\n#define memset0(arr) memset(arr, 0, sizeof(arr))\n#define il inline\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\nconst int maxn = 1e5;\nconst int INF = 0x7fffffff;\nconst int mod = 1e9 + 7;\nconst double eps = 1e-7;\nconst double Pi = acos(-1.0);\ninline int read_int() {\n\tchar c;\n\tint ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\ninline ll read_ll() {\n\tchar c;\n\tll ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\nchar p[maxn + 5], s[2 * maxn + 5];\nint m, n, len[2 * maxn + 5], res;\nint manacher() {\n\tint id = 0, max_len = 0, res = 0;\n\ts[0] = '@';\n\tfor (int i = 1; i <= 2 * m; i += 2)s[i] = '#', s[i + 1] = p[i / 2];\n\ts[2 * m + 1] = '#';\n\ts[2 * m + 2] = '\\0';\n\tn = 2 * m + 1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (max_len > i)len[i] = min(max_len - i, len[2 * id - i]);\n\t\telse len[i] = 1;\n\t\twhile (s[i + len[i]] == s[i - len[i]])++len[i];\n\t\tif (len[i] + i > max_len) {\n\t\t\tmax_len = len[i] + i;\n\t\t\tid = i;\n\t\t}\n\t\tres = max(res, len[i]);\n\t}\n\treturn res;\n}\nint arr[8 * maxn + 5];\nil void Push_Up(int index) {\n\tarr[index] = max(arr[2 * index], arr[2 * index + 1]);\n}\nvoid Build(int index, int L, int R) {\n\tarr[index] = -INF;\n\tif (L == R)return;\n\tint mid = L + R >> 1;\n\tBuild(2 * index, L, mid);\n\tBuild(2 * index + 1, mid + 1, R);\n}\nvoid update(int index, int L, int R, int pos, int value) {\n\tif (L == R) {\n\t\tarr[index] = value;\n\t\treturn;\n\t}\n\tint mid = L + R >> 1;\n\tif (mid >= pos)update(2 * index, L, mid, pos, value);\n\telse update(2 * index + 1, mid + 1, R, pos, value);\n\tPush_Up(index);\n}\nint Query(int index, int L, int R, int value) {\n\tif (arr[index] < value)return 0;\n\tif (L == R)return L;\n\tint mid = L + R >> 1;\n\tif (arr[2 * index] >= value)return Query(2 * index, L, mid, value);\n\telse if (arr[2 * index + 1] >= value)return Query(2 * index + 1, mid + 1, R, value);\n}\nint main()\n{\n\tscanf(\"%s\", p);\n\tm = strlen(p);\n\tmanacher();\n\tBuild(1, 1, n);\n\tfor (int i = 1; i < n; ++i) {\n\t\tint pos = i - len[i];\n\t\tint id = Query(1, 1, n, pos);\n\t\tupdate(1, 1, n, i, i + len[i] - 1);\n\t\tif (id == 0 || id == 1)continue;\n\t\telse res = max(res, len[i] + pos - id);\n\t}\n\tcout << res << endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1555412617,
        "uid": 106178,
        "name": "Forsaken2020",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1\u56de\u6587\u6811\u7684\u9898\u89e3\uff0c\u679a\u4e3e\u5207\u5272\u70b9n\u4e24\u4fa7\u6700\u957f\u56de\u6587\u4e32\u7684\u957f\u5ea6\u5df2\u7ecf\u662f\u5f88\u7ecf\u5178\u7684\u64cd\u4f5c\u4e86\uff0c\u90a3\u4e48\u8fd9\u91cc\u4e3b\u8981\u5c31\u662f\u5206\u4eab\u4e0b\u6a21\u677fw\n\n```java\n// luogu-judger-enable-o2\nimport java.math.BigInteger;\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n    public static InputReader in = new InputReader(System.in);\n    public static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n    public static void main(String[] args)\n    {\n        String s;\n        s=in.next();\n        Palindromic_Tree a=new Palindromic_Tree(s.length()+10);\n        Palindromic_Tree b=new Palindromic_Tree(s.length()+10);\n        a.init();\n        b.init();\n        int k1[]=new int[s.length()+10];\n        int k2[]=new int[s.length()+10];\n        Arrays.fill(k1,0);\n        Arrays.fill(k2,0);\n        for(int i=0;i<s.length();++i)\n        {\n            k1[i+1]=a.add(s.charAt(i));\n            k2[i+1]=b.add(s.charAt(s.length()-i-1));\n        }\n        int ans=0;\n        for(int i=1;i<s.length();++i)\n            ans=Math.max(ans,k1[i]+k2[s.length()-i]);\n        out.println(ans);\n        out.flush();\n        out.close();\n    }\n}\nclass Palindromic_Tree\n{\n    int len[]; //\u4ee5\u8282\u70b9i\u4e3a\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\n    int str[];//\u7b2ci\u6b21\u6dfb\u52a0\u7684\u5b57\u7b26\n    int last;//\n    int point;//\n    int n;\n    int Next[][];//\n    int fail[];//\u7c7b\u4f3c\u4e8eAC\u81ea\u52a8\u673a\u7684fail\u6307\u9488\uff0c\u6307\u5411\u5931\u914d\u540e\u9700\u8981\u8df3\u8f6c\u5230\u7684\u8282\u70b9\uff08\u5373\u4e3ai\u7684\u6700\u957f\u56de\u6587\u540e\u7f00\u4e14\u4e0d\u4e3ai\uff09\n    int count[];//\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u5728S\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff08\u5efa\u6811\u65f6\u6c42\u51fa\u7684\u4e0d\u662f\u5b8c\u5168\u7684\uff0ccount()\u52a0\u4e0a\u5b50\u8282\u70b9\u4ee5\u540e\u624d\u662f\u6b63\u786e\u7684\uff09\n    int num[];//\u4ee5\u8282\u70b9i\u56de\u6587\u4e32\u7684\u672b\u5c3e\u5b57\u7b26\u7ed3\u5c3e\u7684\u4f46\u4e0d\u5305\u542b\u672c\u6761\u8def\u5f84\u4e0a\u7684\u56de\u6587\u4e32\u7684\u6570\u76ee\u3002(\u4e5f\u5c31\u662ffail\u6307\u9488\u8def\u5f84\u7684\u6df1\u5ea6)\n    Palindromic_Tree(int N)\n    {\n        n=N;\n        len=new int[N];\n        str=new int[N];\n        fail=new int[N];\n        count=new int[N];\n        num=new int[N];\n        Next=new int[N][26];\n    }\n    int newnode(int l)\n    {\n        for (int i = 0; i < 26; ++i)\n            Next[point][i] = 0;\n        count[point] = 0;\n        num[point] = 0;\n        len[point] = l;\n        return point++;\n    }\n    void init()\n    {\n        Arrays.fill(len,0);\n        Arrays.fill(str,0);\n        Arrays.fill(fail,0);\n        Arrays.fill(count,0);\n        Arrays.fill(num,0);\n        for(int i=0;i<n;++i)\n            Arrays.fill(Next[i],0);\n        point = 0;\n        newnode(0);\n        newnode(-1);\n        last = 0;\n        n = 0;\n        str[n] = -1;\n        fail[0] = 1;\n    }\n    int get_fail(int x)\n    {\n        while (str[n - len[x] - 1] != str[n])\n            x = fail[x];\n        return x;\n    }\n    int add(int c)\n    {\n        c -= 'a';\n        str[++n] = c;\n        int cur = get_fail(last);\n        if (Next[cur][c]==0)\n        {\n            int now = newnode(len[cur] + 2);\n            fail[now] = Next[get_fail(fail[cur])][c];\n            Next[cur][c] = now;\n            num[now] = num[fail[now]] + 1;\n        }\n        last = Next[cur][c];\n        count[last]++;\n        return len[last];\n    }\n    void counting()//\u7edf\u8ba1\u672c\u8d28\u76f8\u540c\u7684\u56de\u6587\u4e32\u7684\u51fa\u73b0\u6b21\u6570\n    {\n        for (int i = point-1; i >= 0; i--)//\u9006\u5e8f\u7d2f\u52a0\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u90fd\u4f1a\u6bd4\u5b83\u7684\u7236\u4eb2\u8282\u70b9\u5148\u7b97\u5b8c\uff0c\u4e8e\u662f\u7236\u4eb2\u8282\u70b9\u80fd\u52a0\u5230\u6240\u6709\u5b50\u5b59\n            count[fail[i]] += count[i];\n    }\n}\nclass manacher\n{\n    int cnt, len, ans = 0;\n    char ss[],s[];\n    int p[];\n    manacher(String str)\n    {\n        s=str.toCharArray();\n        ss=new char[s.length*2+10];\n        p=new int[s.length*2+10];\n    }\n    void init() {//\u5c06\u6bcf\u4e24\u4e2a\u5b57\u7b26\u4e2d\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\n        len = s.length;\n        cnt = 1;\n        ss[0] = '!';\n        ss[cnt] = '#';\n        for (int i = 0; i < len; i++)\n        {\n            ss[++cnt] = s[i];\n            ss[++cnt] = '#';\n        }\n        ans = 0;\n    }\n\n    void manacher1() {\n        int pos = 0, mx = 0;\n        for (int i = 1; i <= cnt; i++) {\n            if (i < mx) p[i] = Math.min(p[pos * 2 - i], mx - i);\n            else p[i] = 1;\n            while (ss[i + p[i]] == ss[i - p[i]]) p[i]++;\n            if (mx < i + p[i])\n            {\n                mx = i + p[i];\n                pos = i;\n            }\n            ans = Math.max(ans, p[i] - 1);\n        }\n    }\n}\n\n\nclass InputReader{\n    private final static int BUF_SZ = 65536;\n    BufferedReader in;\n    StringTokenizer tokenizer;\n    public InputReader(InputStream in) {\n        super();\n        this.in = new BufferedReader(new InputStreamReader(in),BUF_SZ);\n        tokenizer = new StringTokenizer(\"\");\n    }\n    public boolean hasNext() {  //\u5904\u7406EOF\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            try {\n                String line = in.readLine();\n                if(line == null) return false;\n                tokenizer = new StringTokenizer(line);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return true;\n    }\n    public String next() {\n        while (!tokenizer.hasMoreTokens()) {\n            try {\n                tokenizer = new StringTokenizer(in.readLine());\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return tokenizer.nextToken();\n    }\n    public int nextInt() {\n        return Integer.parseInt(next());\n    }\n    public long nextLong()\n    {\n        return Long.parseLong(next());\n    }\n}\n```\n",
        "postTime": 1554875010,
        "uid": 154957,
        "name": "qiyue7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "# \u5514\u59c6\n\n\u6700\u8fd1\u521a\u5b66\u4e86manacher\uff0c\u60f3\u7740\u6765\u505a\u51e0\u9053\u9898\n\n-------------\n\u524d\u7f6e\u829d\u58eb[Manacher\u7b97\u6cd5](https://www.luogu.org/problemnew/show/P3805)\n\n- \u6839\u636emanacher\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u534a\u5f84\uff08rad\u6570\u7ec4\uff09\u3002\n\n- \u4f46\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u770b\u4e2d\u5fc3\u7684\u8bdd\uff0c\u5f88\u96be\u8fdb\u884c\u8f6c\u79fb\u3002\u4e8e\u662f\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2asta\uff0c\u548cend\u6570\u7ec4\uff0c\u8868\u793a\u4ee5i\u5f00\u59cb\u7684\u6700\u5927\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u548c\u4ee5i\u7ed3\u675f\u7684\u6700\u5927\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u3002\u8fd9\u4e2a\u5728\u6211\u4eec\u6c42rad\u6570\u7ec4\u65f6\u53ef\u4ee5\u6c42\u51fa\u6765\u6bcf\u4e2a\u4e2d\u5fc3\u5bf9\u5e94\u7684\u6700\u5927\u56de\u6587\u5b50\u4e32\u7684\u4e24\u4e2a\u7aef\u70b9\u7684sta\u548cend\uff0c\u4e2d\u95f4\u5269\u4e0b\u7684\u7b49\u4e0b\u53ef\u4ee5O\uff08n\uff09\u63a8\u51fa\uff08\u8fd9\u4e2a\u770b\u4ee3\u7801\u5c31\u6ca1\u95ee\u9898\u4e86\n\n- \u65e2\u7136\u77e5\u9053\u4e86\u6bcf\u4e2a\u70b9\u7684sta\u548cend\uff0c\u6211\u4eec\u5f88\u5feb\u53ef\u4ee5\u50cf\u5230\uff0c\u5728manacher\u4e2d\uff0c\u6211\u4eec\u5728\u539f\u5b57\u7b26\u4e4b\u95f4\u63d2\u5165\u4e86\u8bb8\u591a\u65e0\u5173\u5b57\u7b26\u3002\u8fd9\u65f6\u6211\u4eec\u53ea\u9700\u626b\u63cf\u8fd9\u4e9b\u5b57\u7b26\uff0c\u627e\u5230\u6700\u5927\u7684\uff08sta[i]+end[i]),\u4e5f\u5c31\u662f\u628a\u4e24\u4e2a\u56de\u6587\u5b50\u4e32\u62fc\u8d77\u6765\u3002\u8fd9\u5c31\u662f\u7b54\u6848\u4e86\n\n```cpp\n#include<cstring>\n#include<cstdio>\n#include<iostream>\n#include<algorithm> \n#define MAXN 410000\nusing namespace std;\nint rad[MAXN],n;\nchar s[MAXN],ch[MAXN];\nint sta[MAXN],end[MAXN]; \nint mr=-1,c;\nvoid find(int x,int y){\n    int i=y;\n    for(;(x-i)>=0&&(x+i)<=2*n;i++){\n        if (s[x-i]!=s[x+i])break;\n    }\n    rad[x]=i;\n}\nint main(){\n    s[0]='#';\n    cin>>ch+1;\n    n=strlen(ch+1);\n    for(int i=1;i<=n;i++){\n        s[2*i-1]=ch[i];\n        s[2*i]='#'; \n    }\n    int ans=0;\n    memset(end,0,sizeof(end));\n    memset(sta,0,sizeof(sta));\n    memset(rad,0,sizeof(rad));\n    for(int i=0;i<=n*2;i++){\n        if (i>mr) find(i,0);\n        else {\n            int cl,p2,pl;\n            cl=c-(mr-c);\n            p2=c-(i-c);\n            pl=p2-rad[p2]+1;\n            if (pl>cl){\n                rad[i]=rad[p2];\n            }\n            else if (pl<cl){\n                rad[i]=mr-i+1;\n            }\n            else {\n                find(i,mr-i+1);\n            }\n        }\n        if (i+rad[i]-1>mr){\n            mr=i+rad[i]-1;\n            c=i;\n        }\n        if (i+rad[i]-1<=2*n){\n            end[i+rad[i]-1]=max(end[i+rad[i]-1],rad[i]-1);\n        }\n        if (i-rad[i]+1>=0){\n            sta[i-rad[i]+1]=max(sta[i-rad[i]+1],rad[i]-1);\n        }\n    }\n    for(int i=2;i<2*n;i=i+2){\n        sta[i]=max(sta[i],sta[i-2]-2);\n        end[i]=max(end[i],end[i+2]-2);\n    }\n    \n    for(int i=2;i<2*n;i=i+2){\n        ans=max(ans,sta[i]+end[i]);\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1554645902,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc7\u849f\u84bb\u7684\u5a31\u4e50\u9898\u89e3\n\n### \u663e\u7136\n\n\u8fd9\u4e2a\u9898\u53ea\u9700\u8981\u6253\u4e00\u4e2a\u9a6c\u62c9\u8f66\u677f\u5b50\n\n\u800c\u4e14O(n)\u5c31\u80fd\u89e3\u51fa\u6765\n\n\u5404\u4f4d\u5927\u7237\u7684\u9898\u89e3\u4e5f\u90fd\u8bf4\u7684\u5f88\u8be6\u7ec6\u4e86\n\n### \u4f46\u662f\n\n\u6211\u4f5c\u4e3a\u4e00\u4e2a\u5f3a\u8feb\u75c7\u60a3\u8005\n\n\u770b\u5230\u8fd9\u4e2a1e5\u7684\u6570\u636e\n\n\u600e\u4e48\u80fd\u4e0d\u5199\u4e2a**\u975e\u5e38\u4e25\u8c28**\u7684nlogn\u7684\u505a\u6cd5\u5462\uff1f\n\n\u770b\u4e86\u8fd9\u53e5\u8bdd\u4f60\u4eec\u80af\u5b9a\u60f3\u88f1\u6b7b\u62112333\u4e0d\u8fc7\u76ae\u8fd9\u4e00\u4e0b\u6211\u5f88\u5f00\u5fc3\n\n### \u5982\u4f55\u505a\u5230nlogn\n\n\u597d\u529e\uff0c**\u52a0\u4e2alog\u7ea7\u522b\u7684\u6570\u636e\u7ed3\u6784**\u5c31\u884c\u4e86\n\n\u8003\u8651\u7ebf\u6bb5\u6811~~\u4f18\u5316~~**\u52a3\u5316**\u590d\u6742\u5ea6\n\n\u8fd9\u4e2a\u9898\u4e2d\u7684\u6700\u957f\u53cc\u56de\u6587\u4e32\u53ef\u4ee5\u770b\u505a\u4e24\u4e2a\u56de\u6587\u4e32\u62fc\u8d77\u6765\n\n\u6211\u4eec\u5148\u8dd1\u4e00\u904d\u9a6c\u62c9\u8f66\n\n\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u4e3a\u4e2d\u5fc3\u6784\u6210\u7684\u56de\u6587\u4e32\u6700\u5de6\u548c\u6700\u53f3\u5206\u522b\u80fd\u5230\u8fbe\u54ea\u91cc\uff0c\u8bb0\u4e3a$L_i$\u548c$R_i$\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9$i$\uff0c\u5982\u679c\u4ee5\u5b83\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\u4f5c\u4e3a\u53f3\u8fb9\u7684\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u627e$j<i$\u800c\u4e14$R_j>=L_i$\u7684\u70b9\u6765\u548c\u5b83\u62fc\u5230\u4e00\u5757\n\n\u8bbe\u91cd\u53e0\u90e8\u5206$R_j-L_i+1=x$\n\n\u8fd9\u6837\u62fc\u63a5\u8d77\u6765\u7684\u957f\u5ea6\u5c31\u662f\n\n$2*(p_i-x)-1+2*p_j-1$\n\n\u56e0\u4e3a\u8981\u53bb\u6389\u5206\u9694\u7b26\u6240\u4ee5\u957f\u5ea6\u9664\u4ee52\n\n\u5f0f\u5b50\u5c31\u5316\u6210\u4e86\n\n$p_i+L_i+p_j-R_j-2$\n\n\u6211\u4eec\u8ba9$R$\u6570\u7ec4\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\uff0c\u6bcf\u6b21\u5728$R_i$\u52a0\u5165$p_i-R_i-2$\uff0c\u7ef4\u62a4\u6700\u5927\u503c\n\n\u7136\u540e\u5c31\u662f\u7528\u626b\u63cf\u7ebf\u6c42\u4e8c\u7ef4\u6700\u5927\u503c\u8fa3\n\n### \u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define BIG 1000000000\n#define N 100010\nusing namespace std;\nint tot,ans,T[N<<3],L[N<<1],R[N<<1],p[N<<1];\nchar data[N],s[N<<1];\n\nvoid Manacher() {\n\tint mid=0,right=0,x=0;\n\tfor (int i=1; i<=tot; i++) {\n\t\tif (i>right) x=1;\n\t\telse x=min(p[2*mid-i],right-i+1);\n\t\twhile (s[i+x]==s[i-x]) x++;\n\t\tp[i]=x;\n\t\tif (i+x-1>right) {\n\t\t\tright=i+x-1;\n\t\t\tmid=i;\n\t\t} \n\t\tL[i]=i-p[i]+1;\n\t\tR[i]=i+p[i]-1;\n\t} \n}\n\nvoid Pushup(int x) {\n\tT[x]=max(T[x<<1],T[x<<1|1]);\n}\n\nvoid Build(int x,int l,int r) {\n\tif (l==r) {\n\t\tT[x]=-BIG;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(x<<1,l,mid);\n\tBuild(x<<1|1,mid+1,r);\n\tPushup(x);\n}\n\nvoid Change(int pos,int l,int r,int x,int val) {\n\tif (l==r) {\n\t\tT[x]=max(T[x],val);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif (pos<=mid) Change(pos,l,mid,x<<1,val);\n\telse Change(pos,mid+1,r,x<<1|1,val);\n\tPushup(x);\n}\n\nint Query(int L,int R,int l,int r,int x) {\n\tif (L<=l && r<=R) return T[x];\n\tint mid=(l+r)>>1;\n\tint res=-BIG;\n\tif (L<=mid) res=max(res,Query(L,R,l,mid,x<<1));\n\tif (R>mid) res=max(res,Query(L,R,mid+1,r,x<<1|1));\n\treturn res;\n}\n\nint main() {\n\tscanf(\"%s\",(data+1));\n\tint n=strlen(data+1);\n\ts[++tot]='@'; s[++tot]='#';\n\tfor (int i=1; i<=n; i++) \n\t\ts[++tot]=data[i],s[++tot]='#';\n\ts[++tot]='$';\n\tManacher();\n\tBuild(1,1,tot); \n\tChange(R[2],1,tot,1,p[2]-R[2]-2);\n\tfor (int i=3; i<=tot-1; i++) {\n\t\tint now=p[i]+L[i]+Query(L[i],tot,1,tot,1);\n\t\tans=max(ans,now);\n\t\tChange(R[i],1,tot,1,p[i]-R[i]-2);\n\t}\n\tprintf(\"%d\",ans);\n}\n```",
        "postTime": 1533784924,
        "uid": 43470,
        "name": "xMinh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4555 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6700\u957f\u53cc\u56de\u6587\u4e32\u3011"
    }
]