[
    {
        "content": "\u4e00\u4e2a\u4e0d\u9700\u8981\u5e73\u8861\u6811\u7684\u505a\u6cd5\u3002\n\n\u5148\u5c06\u7ebf\u6bb5\u5206\u4e3a\u4e24\u7c7b\uff1a$x_1<x_2,y_1<y_2$ \u548c $x_1<x_2,y_1>y_2$\u3002\n\n\u53ea\u8003\u8651\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7ffb\u8f6c\u5750\u6807\u7cfb\u540e\u518d\u505a\u4e00\u904d\u5373\u53ef\u3002\n\n\u5c06\u8be2\u95ee\u5dee\u5206\u6210\u56db\u4e2a\u53f3\u4e0a\u89d2\u4e3a $(x,y)$\uff0c\u5de6\u4e0b\u89d2\u4e3a $(-\\infty,-\\infty)$ \u7684\u77e9\u5f62\uff0c\u90a3\u4e48\u4e00\u4e2a\u77e9\u5f62\u7684\u7b54\u6848\u6709\u4ee5\u4e0b\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\n\n1. \u6574\u4e2a\u7ebf\u6bb5\u90fd\u5728\u77e9\u5f62\u5185\uff0c\u5373 $x_2\\leq x,y_2\\leq y$\u3002\n2. \u4e0e\u77e9\u5f62\u4e0a\u8fb9\u754c\u76f8\u4ea4\u3002\n3. \u4e0e\u77e9\u5f62\u53f3\u8fb9\u754c\u76f8\u4ea4\u3002\n\n\u7b2c\u4e00\u90e8\u5206\u662f\u4e00\u4e2a\u4e8c\u7ef4\u504f\u5e8f\uff0c\u626b\u63cf\u7ebf $+$ \u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\n\n\u7b2c\u4e8c\u4e09\u90e8\u5206\u662f\u540c\u7406\u7684\uff0c\u6211\u4eec\u53ea\u8003\u8651\u7b2c\u4e8c\u90e8\u5206\u3002\n\n\u6309 $y$ \u4ece\u4f4e\u5230\u9ad8\u626b\u63cf\u7ebf\uff0c\u7528 `set` \u7ef4\u62a4\u6240\u6709 $y_1\\leq y<y_2$ \u7684\u7ebf\u6bb5\uff0c\u987a\u5e8f\u662f\u5728 $y$ \u8fd9\u4e2a\u9ad8\u5ea6\u7684\u6a2a\u5750\u6807\u4ece\u5de6\u5230\u53f3\u3002\u7531\u4e8e\u7ebf\u6bb5\u4e0d\u4f1a\u76f8\u4ea4\uff0c\u5b83\u4eec\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u4f1a\u6539\u53d8\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528 `set` \u76f4\u63a5\u7ef4\u62a4\u3002\n\n\u8003\u8651\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u8be2\u95ee\uff0c\u5728 `set` \u4e2d\u4e8c\u5206\u51fa\u5b83\u6240\u5bf9\u5e94\u7684\u524d\u7f00\uff0c\u8fd9\u4e2a\u524d\u7f00\u7684\u7ebf\u6bb5\u4e0a\u8fb9\u754c\u76f8\u4ea4\u3002\n\n\u8d21\u732e\u7684\u5904\u7406\u662f\u7b80\u5355\u7684\uff0c\u5316\u4e00\u4e0b\u5f0f\u5b50\u53ef\u4ee5\u77e5\u9053\u662f\u4e24\u4e2a\u6c42\u548c\u7684\u5f62\u5f0f\u3002\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u5b9a\u4f4d\u51fa\u8fd9\u4e9b\u7ebf\u6bb5\u3002\n\n\u7531\u4e8e\u7ebf\u6bb5\u4e0d\u76f8\u4ea4\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6392\u5217\u7ebf\u6bb5\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u523b `set` \u4e2d\u7684\u5143\u7d20\u5728\u8fd9\u4e2a\u6392\u5217\u4e2d\u7684\u4f4d\u7f6e\u90fd\u662f\u9012\u589e\u7684\u3002\n\n\u4e0d\u59a8\u5148\u505a\u4e00\u904d\u626b\u63cf\u7ebf\uff0c\u5728\u63d2\u5165\u3001\u5220\u9664\u7ebf\u6bb5\u65f6\u90fd\u8ba9\u76f8\u90bb\u7ebf\u6bb5\u4e4b\u95f4\u4ece\u5de6\u81f3\u53f3\u8fde\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u8fd9\u6837\u53ef\u4ee5\u5efa\u7acb\u51fa\u4e00\u5f20 DAG\uff0c\u8fd9\u4e2a DAG \u7684\u62d3\u6251\u5e8f\u5373\u4e3a\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u6392\u5217\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u597d\u529e\u4e86\uff0c\u627e\u5230\u524d\u7f00\u6240\u5bf9\u5e94\u7684\u62d3\u6251\u5e8f\u6700\u5927\u7684\u7ebf\u6bb5\uff08\u4e5f\u5c31\u662f `set` \u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4e0e\u4e0a\u8fb9\u754c\u76f8\u4ea4\u7684\uff09\uff0c\u76f4\u63a5\u67e5\u8be2\u4e00\u4e2a\u62d3\u6251\u5e8f\u4e0a\u7684\u524d\u7f00\u548c\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O((n+Q)\\log n)$\u3002\n\n\u5b9e\u9645\u4e0a\u5b9e\u73b0\u7684\u65f6\u5019\u53ea\u6709\u7b2c\u4e00\u904d\u626b\u63cf\u7ebf\u9700\u8981 `set`\uff0c\u7b2c\u4e8c\u904d\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\u90fd\u53ef\u4ee5\u5728\u7b2c\u4e00\u904d\u5c31\u5904\u7406\u51fa\u6765\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int N=1e5+5;\nconst int M=1e6+5;\nconst double eps=1e-8;\n\ndouble dis(double x,double y) {\n\treturn sqrt(x*x+y*y);\n}\ndouble cross(double x1,double y1,double x2,double y2) {\n\treturn x1*y2-x2*y1;\n}\nstruct segment {\n\tint x1,y1,x2,y2;\n\tdouble len() {\n\t\treturn dis(x2-x1,y2-y1);\n\t}\n}a[2][N],b[N];\ndouble get(segment a,double y) {\n\tif (a.y1==a.y2) {\n\t\treturn a.x1;\n\t}\n\treturn (y-a.y1)/(a.y2-a.y1)*(a.x2-a.x1)+a.x1;\n}\nbool check(segment a,segment b) {\n\tif (a.x1==a.x2&&a.y1==a.y2&&b.x1<=a.x1&&a.x2<=b.x2&&b.y1<=a.y1&&a.y2<=b.y2&&abs(cross(a.x1-b.x1,a.y1-b.y1,a.x1-b.x2,a.y1-b.y2))<eps) {\n\t\treturn 0;\n\t}\n\tif (b.x1==b.x2&&b.y1==b.y2&&a.x1<=b.x1&&b.x2<=a.x2&&a.y1<=b.y1&&b.y2<=a.y2&&abs(cross(b.x1-a.x1,b.y1-a.y1,b.x1-a.x2,b.y1-a.y2))<eps) {\n\t\treturn 0;\n\t}\n\tdouble y=max(a.y1,b.y1);\n\treturn get(a,y)<get(b,y);\n}\nstruct bit {\n\tint n;\n\tdouble t[M];\n\tvoid send(int _n) {\n\t\tn=_n;\n\t\tfor (int i=1;i<=n;i++) {\n\t\t\tt[i]=0;\n\t\t}\n\t}\n\tvoid add(int x,double y) {\n\t\tfor (;x<=n;x+=x&-x) {\n\t\t\tt[x]+=y;\n\t\t}\n\t}\n\tdouble query(int x) {\n\t\tdouble res=0;\n\t\tfor (;x;x&=x-1) {\n\t\t\tres+=t[x];\n\t\t}\n\t\treturn res;\n\t}\n}t0,t1,tt;\nint n,m,p[N],que[N],tmp;\nstruct cmp {\n\tbool operator ()(const int &u,const int &v) const {\n\t\treturn check(a[tmp][u],a[tmp][v]);\n\t}\n};\nvector<int>ins[M];\nstruct Query {\n\tint x,f,id,pos;\n};\nvector<Query>q[M];\ndouble ans[N];\nvector<int>e[N];\nint deg[N],pos[N];\nvoid add_edge(int u,int v) {\n\te[u].emplace_back(v);\n\tdeg[v]++;\n}\nvoid solve(int n,segment *a,bool flag) {\n\tfor (int i=1;i<=n;i++) {\n\t\te[i].clear();\n\t\tdeg[i]=0;\n\t}\n\tfor (int i=1;i<=1e6;i++) {\n\t\tins[i].clear();\n\t\tq[i].clear();\n\t}\n\tfor (int i=1;i<=n;i++) {\n\t\tins[a[i].y1].emplace_back(i);\n\t\tins[a[i].y2].emplace_back(-i);\n\t}\n\tfor (int i=1;i<=m;i++) {\n\t\tq[b[i].y2].emplace_back((Query){b[i].x2,1,i,0});\n\t\tq[b[i].y2].emplace_back((Query){b[i].x1,-1,i,0});\n\t\tq[b[i].y1].emplace_back((Query){b[i].x2,-1,i,0});\n\t\tq[b[i].y1].emplace_back((Query){b[i].x1,1,i,0});\n\t}\n\tset<int,cmp>S;\n\tfor (int i=1;i<=1e6;i++) {\n\t\tfor (int j:ins[i]) {\n\t\t\tif (j>0) {\n\t\t\t\tauto now=S.insert(j).first;\n\t\t\t\tif (now!=S.begin()) {\n\t\t\t\t\tadd_edge(*prev(now),j);\n\t\t\t\t}\n\t\t\t\tif (++now!=S.end()) {\n\t\t\t\t\tadd_edge(j,*now);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tj=-j;\n\t\t\t\tauto now=S.find(j);\n\t\t\t\tif (now!=S.begin()&&next(now)!=S.end()) {\n\t\t\t\t\tadd_edge(*prev(now),*next(now));\n\t\t\t\t}\n\t\t\t\tS.erase(now);\n\t\t\t}\n\t\t}\n\t\tfor (auto &[x,f,id,pos]:q[i]) {\n\t\t\ta[0]=(segment){x,i,x,i};\n\t\t\tset<int,cmp>::iterator now;\n\t\t\tif (flag) {\n\t\t\t\tnow=S.upper_bound(0);\n\t\t\t} else {\n\t\t\t\tnow=S.lower_bound(0);\n\t\t\t}\n\t\t\tif (now!=S.begin()) {\n\t\t\t\tpos=*--now;\n\t\t\t}\n\t\t}\n\t}\n\tint h=1,t=0;\n\tfor (int i=1;i<=n;i++) {\n\t\tif (!deg[i]) {\n\t\t\tque[++t]=i;\n\t\t}\n\t}\n\twhile (h<=t) {\n\t\tint now=que[h];\n\t\tp[now]=h++;\n\t\tfor (int to:e[now]) {\n\t\t\tif (!--deg[to]) {\n\t\t\t\tque[++t]=to;\n\t\t\t}\n\t\t}\n\t}\n\ttt.send(1e6);\n\tt0.send(1e6);\n\tt1.send(1e6);\n\tfor (int i=1;i<=1e6;i++) {\n\t\tfor (int j:ins[i]) {\n\t\t\tif (j>0) {\n\t\t\t\tt0.add(p[j],a[j].y1*(a[j].len()/(a[j].y2-a[j].y1)));\n\t\t\t\tt1.add(p[j],a[j].len()/(a[j].y2-a[j].y1));\n\t\t\t} else {\n\t\t\t\tj=-j;\n\t\t\t\tt0.add(p[j],-a[j].y1*(a[j].len()/(a[j].y2-a[j].y1)));\n\t\t\t\tt1.add(p[j],-a[j].len()/(a[j].y2-a[j].y1));\n\t\t\t\tif (flag) {\n\t\t\t\t\ttt.add(a[j].x2,a[j].len());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (auto [x,f,id,pos]:q[i]) {\n\t\t\tif (flag) {\n\t\t\t\tans[id]+=f*tt.query(x);\n\t\t\t}\n\t\t\tif (pos) {\n\t\t\t\tans[id]+=f*(i*t1.query(p[pos])-t0.query(p[pos]));\n\t\t\t}\n\t\t}\n\t}\n}\n\nsigned main() {\n\tios::sync_with_stdio(false),cin.tie(0);\n\tcout.precision(10),cout.setf(ios::fixed);\n\t\n\tcin>>n;\n\tdouble sum=0;\n\tint n1=0,n2=0;\n\tfor (int i=1;i<=n;i++) {\n\t\tsegment p;\n\t\tcin>>p.x1>>p.y1>>p.x2>>p.y2;\n\t\tsum+=p.len();\n\t\tif (p.x1>p.x2) {\n\t\t\tswap(p.x1,p.x2);\n\t\t\tswap(p.y1,p.y2);\n\t\t}\n\t\tif (p.y1<p.y2) {\n\t\t\ta[0][++n1]=p;\n\t\t} else {\n\t\t\ta[1][++n2]=p;\n\t\t}\n\t}\n\tcin>>m;\n\tfor (int i=1;i<=m;i++) {\n\t\tcin>>b[i].x1>>b[i].y1>>b[i].x2>>b[i].y2;\n\t}\n\t\n\ttmp=0;\n\tsolve(n1,a[0],1);\n\tfor (int i=1;i<=n;i++) {\n\t\tswap(a[0][i].x1,a[0][i].y1);\n\t\tswap(a[0][i].x2,a[0][i].y2);\n\t}\n\tfor (int i=1;i<=m;i++) {\n\t\tswap(b[i].x1,b[i].y1);\n\t\tswap(b[i].x2,b[i].y2);\n\t}\n\tsolve(n1,a[0],0);\n\tfor (int i=1;i<=n;i++) {\n\t\tswap(a[0][i].x1,a[0][i].y1);\n\t\tswap(a[0][i].x2,a[0][i].y2);\n\t}\n\tfor (int i=1;i<=m;i++) {\n\t\tswap(b[i].x1,b[i].y1);\n\t\tswap(b[i].x2,b[i].y2);\n\t}\n\t\n\ttmp=1;\n\tfor (int i=1;i<=n;i++) {\n\t\ta[1][i].y1=1e6+1-a[1][i].y1;\n\t\ta[1][i].y2=1e6+1-a[1][i].y2;\n\t}\n\tfor (int i=1;i<=m;i++) {\n\t\tb[i].y1=1e6+1-b[i].y1;\n\t\tb[i].y2=1e6+1-b[i].y2;\n\t\tswap(b[i].y1,b[i].y2);\n\t}\n\tsolve(n2,a[1],1);\n\tfor (int i=1;i<=n;i++) {\n\t\tswap(a[1][i].x1,a[1][i].y1);\n\t\tswap(a[1][i].x2,a[1][i].y2);\n\t}\n\tfor (int i=1;i<=m;i++) {\n\t\tswap(b[i].x1,b[i].y1);\n\t\tswap(b[i].x2,b[i].y2);\n\t}\n\tsolve(n2,a[1],0);\n\tfor (int i=1;i<=n;i++) {\n\t\tswap(a[1][i].x1,a[1][i].y1);\n\t\tswap(a[1][i].x2,a[1][i].y2);\n\t}\n\tfor (int i=1;i<=m;i++) {\n\t\tswap(b[i].x1,b[i].y1);\n\t\tswap(b[i].x2,b[i].y2);\n\t}\n\tfor (int i=1;i<=m;i++) {\n\t\tcout<<ans[i]/sum<<\"\\n\";\n\t}\n\t\n\treturn 0;\n}\n```\n\n",
        "postTime": 1679201565,
        "uid": 61120,
        "name": "QwQcOrZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6106\u3010Ynoi2010 Self Adjusting Top Tree\u3011"
    },
    {
        "content": "## P6106 [Ynoi2010] Self Adjusting Top Tree\n\n### \u9898\u610f\n\n\u7ed9\u51fa\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u82e5\u5e72\u4e0d\u4e0e\u5750\u6807\u8f74\u5e73\u884c\u7684\u5904\u4e8e\u7b2c\u4e00\u8c61\u9650\u7684\u4e92\u4e0d\u76f8\u4ea4\u7684\u7ebf\u6bb5\uff0c\u591a\u6b21\u8be2\u95ee\u5e73\u9762\u4e2d\u4e00\u4e2a\u7b2c\u4e00\u8c61\u9650\u7684\u77e9\u5f62\u4e0e\u8fd9\u4e9b\u7ebf\u6bb5\u76f8\u4ea4\u90e8\u5206\u7684\u957f\u5ea6\u957f\u5ea6\u548c\u4e0e\u6240\u6709\u7ebf\u6bb5\u957f\u5ea6\u548c\u7684\u6bd4\u503c\u3002\u7ed9\u51fa\u7684\u6240\u6709\u5750\u6807 $\\in[1,10^6]$\u3002\n\n### \u601d\u8def\n\n\u5047\u8bbe\u6240\u6709\u7ebf\u6bb5\u7684\u659c\u7387\u90fd\u662f\u6b63\u7684\uff0c\u8003\u8651\u5c06\u8be2\u95ee\u5dee\u5206\u6210\u56db\u4e2a\u524d\u7f00\u77e9\u5f62\u3002\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u7edf\u8ba1\u82e5\u5e72\u659c\u7387\u4e3a\u6b63\u7684\u4e92\u4e0d\u76f8\u4ea4\u7684\u7ebf\u6bb5\u4e0e\u4e00\u4e2a\u524d\u7f00\u77e9\u5f62\u7684\u4ea4\u5c31\u884c\u4e86\u3002\n\n\u7ecf\u5178\u5957\u8def\uff1a\u82e5\u7ebf\u6bb5\u4e92\u4e0d\u76f8\u4ea4\uff0c\u5728\u626b\u63cf\u7ebf\u65f6\u5176\u76f8\u5bf9\u987a\u5e8f\u4e0d\u4f1a\u53d8\u3002\u6bd4\u5982\u5728\u7528\u4e0e $y$ \u8f74\u5e73\u884c\u7684\u76f4\u7ebf\u505a\u626b\u63cf\u7ebf\u65f6\u7ebf\u6bb5\u4e0e\u5176\u76f8\u4ea4\u7684 $y$ \u5750\u6807\u76f8\u5bf9\u5927\u5c0f\u4e0d\u4f1a\u53d8\u3002\u518d\u6bd4\u5982\uff0c[\u7528\u4ee5\u539f\u70b9\u4e3a\u7aef\u70b9\u7684\u5c04\u7ebf\u505a\u626b\u63cf\u7ebf\u65f6\u7ebf\u6bb5\u4e0e\u5176\u4ea4\u70b9\u5230\u539f\u70b9\u8ddd\u79bb\u7684\u76f8\u5bf9\u5927\u5c0f\u4e0d\u4f1a\u53d8](https://www.luogu.com.cn/problem/CF1218B)\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u7528\u5e73\u884c\u4e8e $y$ \u8f74\u7684\u76f4\u7ebf\u505a\u626b\u63cf\u7ebf\uff0c\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u533a\u95f4\u7ebf\u6bb5\u957f\u5ea6\u7684\u548c\u3002\u5373\uff0c\u7ef4\u62a4\u5355\u4f4d $x$ \u533a\u95f4\u7ebf\u6bb5\u957f\u5ea6\u589e\u91cf\uff0c\u7ef4\u62a4\u533a\u95f4\u7ebf\u6bb5\u957f\u5ea6\u548c\uff0c\u652f\u6301\u533a\u95f4\u52a0\uff0c\u652f\u6301\u63d2\u5165\u5220\u9664\u3002\u56e0\u4e3a\u7ebf\u6bb5\u659c\u7387\u4e3a\u6b63\u4e14\u8be2\u95ee\u4e3a\u524d\u7f00\u77e9\u5f62\uff0c\u6240\u4ee5\u6ca1\u6709\u7ebf\u6bb5\u53e6\u4e00\u7aef\u4e0d\u5728\u77e9\u5f62\u5185\u7684\u60c5\u51b5\u3002\u8fd9\u6837\u5c31\u80fd\u7edf\u8ba1\u4e14\u6070\u597d\u7edf\u8ba1\u6240\u6709\u4e0e\u77e9\u5f62\u53f3\u4fa7\u76f8\u4ea4\u7684\u7ebf\u6bb5\u7684\u957f\u5ea6\u548c\u3002\n\n\u7edf\u8ba1\u6240\u6709\u4e0e\u77e9\u5f62\u4e0a\u4fa7\u76f8\u4ea4\u7684\u957f\u5ea6\u548c\u53ea\u9700\u8981\u5c06\u626b\u63cf\u7ebf\u53d8\u4e3a\u4e0e $x$ \u5e73\u884c\u7684\u518d\u505a\u4e00\u904d\u5c31\u53ef\u4ee5\u4e86\u3002\u4e3a\u4e86\u4f7f\u4e0e\u9876\u70b9\u4ea4\u7684\u7ebf\u6bb5\u53ea\u7edf\u8ba1\u4e00\u6b21\uff0c\u53ef\u4ee5\u5c06\u7ffb\u8f6c\u524d\u540e\u5176\u4e2d\u4e00\u6b21\u7684\u6240\u6709\u67e5\u8be2\u51cf\u53bb eps \u4f7f\u5176\u4e0d\u5408\u6cd5\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u5b8c\u5168\u88ab\u5305\u542b\u7684\u7ebf\u6bb5\uff0c\u53d1\u73b0\u53ea\u8981\u7ebf\u6bb5\u53f3\u4e0a\u7aef\u5728\u77e9\u5f62\u5185\u5c31\u5168\u90e8\u5728\u77e9\u5f62\u5185\u3002\u505a\u4e00\u904d\u4e8c\u7ef4\u6570\u70b9\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u659c\u7387\u4e3a\u8d1f\u7684\u7ebf\u6bb5\uff0c\u5c06\u5b83\u4eec\u548c\u8be2\u95ee\u77e9\u5f62\u4e0a\u4e0b\u53cd\u8f6c\uff0c\u7136\u540e\u518d\u505a\u4e00\u904d\u4e0a\u8ff0\u8fc7\u7a0b\u5373\u53ef\u3002\n\n\u81f3\u6b64\uff0c\u6240\u6709\u7684\u8d21\u732e\u88ab\u7edf\u8ba1\u5b8c\u6bd5\u3002\u5b9e\u73b0\u65f6\u8bf7\u6ce8\u610f\u7ec6\u8282\u3002\n\n\u4ee3\u7801\u6211\u89c9\u5f97\u6211\u5199\u7684\u8fd8\u884c\uff0c\u5c31\u653e\u51fa\u6765\uff0c\u770b\u61c2\u4e86\u7684\u5e94\u8be5\u633a\u5bb9\u6613\u5b9e\u73b0\u7684\uff0c\u6ca1\u770b\u61c2\u7684\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u3002\n\n### \u5b9e\u73b0\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint w=0,x=0;char c=getchar();\n\twhile(!isdigit(c))w|=c=='-',c=getchar();\n\twhile(isdigit(c))x=x*10+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nnamespace star\n{\n\tconst int maxn=4e5+10,maxm=1e6+10,N=1e6+1;\n\tdouble eps=1e-6;\n\tint n,m,cnt[2],c[2][maxn];\n\tdouble ans[maxn];\n\tstruct vec{\n\t\tint x,y;\n\t\tvec(int x=0,int y=0):x(x),y(y){}\n\t\tinline void updown(){y=N-y;}\n\t};\n\tint X;\n\tstruct seg{\n\t\tvec a,b;\n\t\tseg(){}\n\t\tseg(vec a,vec b):a(a),b(b){}\n\t\tinline double length(){return sqrt(1.*(b.y-a.y)*(b.y-a.y)+1.*(b.x-a.x)*(b.x-a.x));}\n\t\tinline void updown(){a.updown(),b.updown();}\n\t\tinline double y() {return a.y+1.0*(X-a.x)*(b.y-a.y)/(b.x-a.x);}\n\t}a[maxn],b[2][maxn];\n\tstruct que{\n\t\tint x;\n\t\tdouble y;\n\t\tint tp,id;\n\t\tque(){}\n\t\tque(int x,double y,int tp,int id):x(x),y(y),tp(tp),id(id){}\n\t\tbool operator < (const que &b) const {return x<b.x;}\n\t}q[maxn<<2];\n\t#define ls son[x][0]\n\t#define rs son[x][1]\n\tdouble s1[maxn],s2[maxn],s[maxn],tag[maxn],sum[maxn];\n\tint tot,rt,e[maxn],son[maxn][2],rnd[maxn];\n\tinline int newnode(int i){e[++tot]=i,s1[tot]=s[tot]=a[i].length()/(a[i].b.x-a[i].a.x),s2[tot]=tag[tot]=son[tot][0]=son[tot][1]=sum[tot]=0,rnd[tot]=rand();return tot;}\n\tinline void add(int x,int a){s2[x]+=a*s1[x],sum[x]+=a,tag[x]+=a;}\n\tinline void pushdown(int x){if(tag[x]) add(ls,tag[x]),add(rs,tag[x]),tag[x]=0;}\n\tinline void pushup(int x){s2[x]=s2[ls]+s2[rs]+sum[x]*s[x],s1[x]=s1[ls]+s1[rs]+s[x];}\n\tvoid split(int x,double k,int &a,int &b){\n\t\tif(!x) return a=b=0,void();\n\t\tpushdown(x);\n\t\tif(k>=star::a[e[x]].y()) a=x,split(rs,k,rs,b);\n\t\t\telse b=x,split(ls,k,a,ls);\n\t\tpushup(x);\n\t}\n\tint merge(int a,int b){\n\t\tif(!a or !b) return a|b;\n\t\tif(rnd[a]<rnd[b]){\n\t\t\tpushdown(a),son[a][1]=merge(son[a][1],b),pushup(a);\n\t\t\treturn a;\n\t\t}else{\n\t\t\tpushdown(b),son[b][0]=merge(a,son[b][0]),pushup(b);\n\t\t\treturn b;\n\t\t}\n\t}\n\tinline void insert(int i){\n\t\tint x,y;\n\t\tsplit(rt,a[i].y(),x,y);\n\t\trt=merge(merge(x,newnode(i)),y);\n\t}\n\tinline void update(int i){\n\t\tint a,b;\n\t\tsplit(rt,star::a[i].y(),a,b);\n\t\tstatic int st[maxn];\n\t\tint top=0,x,y;\n\t\tfor(y=0,x=a;rs;y=x,x=rs) pushdown(x),st[++top]=x;\n\t\tif(e[x]!=i) return rt=merge(merge(a,newnode(i)),b),void();\n\t\tif(!y) a=son[a][0];\n\t\telse son[y][1]=merge(ls,rs);\n\t\twhile(top) pushup(st[top--]);\n\t\trt=merge(a,b);\n\t}\n\tinline double query(double k){\n\t\tint x,y;\n\t\tsplit(rt,k,x,y);\n\t\tdouble ans=s2[x];\n\t\trt=merge(x,y);\n\t\treturn ans;\n\t}\n\t#undef ls\n\t#undef rs\n\tdouble C[maxm];\n\tinline void Insert(int x,double k){for(;x<=N;x+=x&-x) C[x]+=k;}\n\tinline double Query(int x){double ans=0;for(;x;x-=x&-x) ans+=C[x];return ans;}\n\tinline void solve(int *c,int n,seg *b){\n\t\tint tot=0;\n\t\tfor(int i=1;i<=m;i++) q[++tot]=que(b[i].b.x,b[i].b.y-eps,1,i),q[++tot]=que(b[i].a.x,b[i].b.y-eps,-1,i),q[++tot]=que(b[i].b.x,b[i].a.y-eps,-1,i),q[++tot]=que(b[i].a.x,b[i].a.y-eps,1,i);\n\t\tsort(q+1,q+1+tot);\n\t\tif(eps!=0){\n\t\t\tsort(c+1,c+1+n,[](int x,int y){return a[x].b.x<a[y].b.x;});\n\t\t\tfor(int i=1,j=1;i<=tot;i++){\n\t\t\t\twhile(j<=n and a[c[j]].b.x<=q[i].x) Insert(a[c[j]].b.y,a[c[j]].length()),j++;\n\t\t\t\tans[q[i].id]+=q[i].tp*Query(q[i].y+eps);\n\t\t\t}\n\t\t}\n\t\tstatic pair<int,int> op[maxn<<1];\n\t\tfor(int i=1;i<=n;i++) op[i*2-1]=make_pair(a[c[i]].a.x,c[i]),op[i*2]=make_pair(a[c[i]].b.x,c[i]);\n\t\tn<<=1;\n\t\tsort(op+1,op+1+n);\n\t\tX=0;\n\t\tfor(int i=1,j=1;i<=tot;i++){\n\t\t\twhile(j<=n and op[j].first<=q[i].x) add(rt,op[j].first-X),X=op[j].first,update(op[j].second),j++;\n\t\t\tadd(rt,q[i].x-X),X=q[i].x,ans[q[i].id]+=q[i].tp*query(q[i].y);\n\t\t}\n\t\tmemset(C,0,sizeof C),rt=tot=0;\n\t}\n\tinline void solve(){\n\t\tsolve(c[0],cnt[0],b[0]);\n\t\tsolve(c[1],cnt[1],b[1]);\n\t}\n\tinline void work(){\n\t\tsrand(time(0));\n\t\tn=read();\n\t\tdouble len=0;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\ta[i].a.x=read(),a[i].a.y=read(),a[i].b.x=read(),a[i].b.y=read();\n\t\t\tif(a[i].a.x>a[i].b.x) swap(a[i].a,a[i].b);\n\t\t\tint t=a[i].a.y>a[i].b.y;\n\t\t\tif(t) a[i].updown();\n\t\t\tc[t][++cnt[t]]=i;\n\t\t\tlen+=a[i].length();\n\t\t}\n\t\tm=read();\n\t\tfor(int i=1;i<=m;i++) b[0][i].a.x=read(),b[0][i].a.y=read(),b[0][i].b.x=read(),b[0][i].b.y=read(),b[1][i]=b[0][i],b[1][i].updown(),swap(b[1][i].a.y,b[1][i].b.y);\n\t\tsolve();\n\t\tfor(int i=1;i<=n;i++) swap(a[i].a.x,a[i].a.y),swap(a[i].b.x,a[i].b.y);\n\t\tfor(int i=1;i<=m;i++) swap(b[0][i].a.x,b[0][i].a.y),swap(b[0][i].b.x,b[0][i].b.y),swap(b[1][i].a.x,b[1][i].a.y),swap(b[1][i].b.x,b[1][i].b.y);\n\t\teps=0;\n\t\tsolve();\n\t\tfor(int i=1;i<=m;i++) printf(\"%.10f\\n\",ans[i]/len);\n\t}\n}\nsigned main(){\n\tstar::work();\n\treturn 0;\n}\n```\n\n\n\n\n\n",
        "postTime": 1624357406,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "P6106 [Ynoi2010] Self Adjusting Top Tree"
    },
    {
        "content": "\u8fd9\u9898\u6ca1\u6709\u9898\u89e3\uff0c\u6211\u5c31\u6765\u8d21\u732e\u4e00\u7bc7\uff0c\u7b80\u5355\u8bf4\u4e0b\u601d\u8def\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ea\u8003\u8651\u659c\u7387\u4e3a\u6b63\u7684\u7ebf\u6bb5\uff0c\u5bf9\u4e8e\u659c\u7387\u4e3a\u8d1f\u7684\uff0c\u6211\u4eec\u628a\u5e73\u9762\u5012\u8fc7\u6765\u518d\u505a\u4e00\u6b21\u5c31\u884c\u4e86\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u9898\u7684\u8d21\u732e\u53ef\u51cf\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u4e00\u4e2a\u8be2\u95ee\u62c6\u6210\u56db\u4e2a\u524d\u7f00\u77e9\u5f62\u7684\u8be2\u95ee\u3002\n\n\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u7684\u7ebf\u6bb5\u5206\u4e3a\u4e24\u79cd\uff0c\u4e0e\u77e9\u5f62\u8fb9\u754c\u65e0\u4ea4\u548c\u6709\u4ea4\u7684\u3002\n\n\u65e0\u4ea4\u7684\u7ebf\u6bb5\u7684\u53f3\u4e0a\u89d2\u4e00\u5b9a\u88ab\u5305\u542b\u4e86\uff0c\u628a\u8d21\u732e\u653e\u5728\u53f3\u4e0a\u89d2\u7684\u70b9\u4e0a\uff0c\u505a\u4e00\u4e2a\u4e8c\u7ef4\u504f\u5e8f\u5c31\u53ef\u4ee5\u89e3\u51b3\uff1b\n\n\u6709\u4ea4\u7684\u7ebf\u6bb5\u4e00\u5b9a\u53ea\u548c\u4e0a\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u4e4b\u4e00\u6709\u4ea4\uff08\u4ea4\u5728\u9876\u70b9\u4e0a\u7684\u6270\u52a8\u4e00\u4e0b\u5c31\u53d8\u6210\u4ea4\u5728\u8fb9\u4e0a\u4e86\uff09\uff0c\u6211\u4eec\u5206\u4e24\u904d\u5904\u7406\uff0c\u53ea\u8003\u8651\u4e0e\u53f3\u8fb9\u754c\u76f8\u4ea4\u7684\u7ebf\u6bb5\u3002\u8003\u8651\u626b\u63cf\u7ebf\uff08\u4e00\u6761\u7ad6\u7ebf\uff09\uff0c\u7ef4\u62a4\u6240\u6709\u7ebf\u6bb5\u4e0e\u626b\u63cf\u7ebf\u7684\u4ea4\u70b9\uff0c\u7531\u4e8e\u7ebf\u6bb5\u4e24\u4e24\u4e0d\u4ea4\uff0c\u4ea4\u70b9\u987a\u5e8f\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u8003\u8651\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u7ebf\u6bb5\u5230\u5f53\u524d\u626b\u63cf\u7ebf\u7684\u957f\u5ea6\u548c\u3002\u67e5\u8be2\u7684\u65f6\u5019\u5c31\u662f\u67e5\u4e00\u4e2a\u524d\u7f00\u7684\u957f\u5ea6\u548c\u3002\n\n\u4ee3\u7801\u6211\u5b9e\u73b0\u7684\u5f88\u70c2\uff0c\u5c31\u4e0d\u7ed9\u4e86\uff0c\u770b\u61c2\u4e86\u7684\u5e94\u8be5\u90fd\u80fd\u5b9e\u73b0\u51fa\u6765\uff0c\u6ca1\u770b\u61c2\u7684\u53ef\u4ee5\u95ee\u6211\u3002",
        "postTime": 1624262806,
        "uid": 55707,
        "name": "gxy001",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6106 [Ynoi2010] Self Adjusting Top Tree"
    }
]