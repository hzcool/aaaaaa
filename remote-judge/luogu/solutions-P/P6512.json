[
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5f88\u7b80\u5355\u7684\u3002\u4f46\u662f\u6211\u5728\u6bd4\u8d5b\u65f6\u6ca1\u6709\u60f3\u51fa\u6765\u3002\u3002\u3002\n\n\u5728\u4ee3\u7801\u91cc\u5199\u5f97\u975e\u5e38\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u505a\u89e3\u91ca\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934 \nusing namespace std;\nint n,m,s,dis[201][201],f[5001];\n//n\u8868\u793a\u70b9\u6570\uff0cm\u8868\u793a\u8fb9\u6570\uff0cs\u8868\u793a\u6d88\u606f\u6570 \n//dis[i][j]\u8868\u793a\u4ecei\u70b9\u5230j\u70b9\u9700\u8981\u82b1\u8d39\u7684\u6700\u77ed\u65f6\u95f4 \n//f[i]\u8868\u793a\u5728\u7b2ci\u6761\u6d88\u606f\u65f6\uff0c\u6700\u591a\u53ef\u4ee5\u6349\u591a\u5c11\u53ea\u732a \nstruct node{\n    int t,v;\n}a[5001];\n//\u7528\u7ed3\u6784\u4f53\u6765\u50a8\u5b58\u5728t\u65f6\u523b\uff0cv\u70b9\u4f1a\u6709\u4e00\u53ea\u98de\u732a\n//\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u540e\u9762\u7684\u6392\u5e8f \nbool cmp(node x,node y){return x.t<y.t;}\n//\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \nint main()\n{\n\tcin>>n>>m>>s;\n\t//\u8f93\u5165\u70b9\u6570\uff0c\u8fb9\u6570\uff0c\u65f6\u95f4 \n\tmemset(dis,63,sizeof(dis));\n\t//\u628a\u521d\u59cb\u65f6\u95f4\u8d4b\u503c\u5f88\u5927\uff0c\u8fd9\u6837\u5c31\u76f8\u5f53\u4e0ei\u70b9\u5230\u4e0d\u4e86j\u70b9 \n\tfor(int i=1;i<=n;i++)dis[i][i]=0;\n\t//\u56e0\u4e3ai\u70b9\u5230i\u70b9\u7684\u8ddd\u79bb\u4e3a0\uff0c\u6240\u4ee5\u8981\u91cd\u65b0\u8d4b\u503c\u4e00\u4e0b \n    for(int i=1,x,y,z;i<=m;i++)\n\t{//x\u548cy\u5206\u522b\u4ee3\u8868\u4e00\u4e2a\u70b9\uff0cz\u4ee3\u8868x\u5230y\u65f6\u95f4 \n        cin>>x>>y>>z; \n        dis[x][y]=dis[y][x]=z;// \n        //\u8d4bx\u5230y\u9700\u8981\u7684\u65f6\u95f4z\uff0cy\u5230x\u7684\u65f6\u95f4z \n    }\n    for(int k=1;k<=n;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);\n    //\u5982\u679c\u4ece\u70b9i\u5230\u70b9k\u518d\u5230\u70b9j\u7684\u65f6\u95f4\u5c0f\u4e8e\u4ece\u70b9i\u5230\u70b9j\u7684\u65f6\u95f4 \n\t//\u5c31\u66f4\u65b0\u70b9i\u5230\u70b9j\u7684\u6700\u77ed\u65f6\u95f4 \n    for(int i=1;i<=s;i++)\n    \tcin>>a[i].t>>a[i].v;\n    //\u8f93\u5165\u5728a[i].t\u65f6\u523b\uff0ca[i].v\u6709\u4e00\u53ea\u98de\u732a \n    sort(a+1,a+s+1,cmp);\n    //\u7ed9\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\ta[0].v=1;\n\t//\u8fd9\u91cc\u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u5199\u8fd9\u4e2a\uff0c\u5426\u5219\u5168\u90e8WA \n    for(int i=1;i<=s;i++)\n\t//\u679a\u4e3e\u6bcf\u6761\u6d88\u606f\uff0c\u770b\u770b\u8981\u4e0d\u8981\u53bb\u6349\u8fd9\u53ea\u98de\u732a \n        for(int j=0;j<i;j++)\n            if(dis[a[i].v][a[j].v]+a[j].t<=a[i].t)\n            //\u5982\u679c\u53bb\u6349\u8fd9\u53ea\u98de\u732a\uff0c\u90a3\u9700\u8981\u7684\u65f6\u95f4\u5c31\u662f\u7b2ci\u6761\u6d88\u606f\u7684\u5730\u65b9\u5230\u7b2cj\u6761\u6d88\u606f\u7684\u5730\u65b9\u6240\u9700\u7684\u65f6\u95f4\n\t\t\t//\u5373dis[a[i].v][a[j].v]\uff0c\u53e6\u5916\u8fd8\u8981\u52a0\u4e0a\u5230\u7b2cj\u53ea\u732a\u6240\u5728\u7684\u5730\u65b9\u7684\u65f6\u95f4 \n            //\u56e0\u4e3a\u53ef\u4ee5\u5f85\u5728\u539f\u5730\uff0c\u6240\u4ee5\u662f<=\uff0c\u800c\u4e0d\u662f== \n            //\u5982\u679c\u6ee1\u8db3\u4e00\u4e0a\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u9009\u62e9\u6349\u8fd8\u662f\u4e0d\u6349 \n\t\t\t    f[i]=max(f[j]+1,f[i]);\n\t\t\t    //\u5982\u679c\u662f\u6349\uff0c\u5c31\u662f\u7b49\u4e8ef[j]\u5728\u52a0\u4e0a\u6349\u7684\u8fd9\u4e00\u53ea\n\t\t\t\t//\u5982\u679c\u4e0d\u6349\uff0c\u5c31\u8fd8\u662f\u7b49\u4e8ef[i] \n    cout<<f[s];//\u8f93\u51fa\u7b2cs\u6761\u6d88\u606f\u6700\u591a\u53ef\u4ee5\u6349\u591a\u5c11\u53ea\u98de\u732a \n    return 0;//\u7ed3\u675f \n}\n```\n\u4e0b\u9762\u9644\u4e0a\u65e0\u6ce8\u91ca\u4ee3\u7801\uff0c\u4ee3\u7801\u5f88\u77ed\uff0c\u53ea\u6709780B\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,s,dis[201][201],f[5001];\nstruct node{\n    int t,v;\n}a[5001];\nbool cmp(node x,node y){return x.t<y.t;}\nint main()\n{\n\tcin>>n>>m>>s;\n\tmemset(dis,63,sizeof(dis));\n\tfor(int i=1;i<=n;i++)dis[i][i]=0;\n    for(int i=1,x,y,z;i<=m;i++)\n\t{\n        cin>>x>>y>>z; \n        dis[x][y]=dis[y][x]=z;\n    }\n    for(int k=1;k<=n;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);\n    for(int i=1;i<=s;i++)\n    \tcin>>a[i].t>>a[i].v;\n    sort(a+1,a+s+1,cmp);\n\ta[0].v=1;\n    for(int i=1;i<=s;i++)\n        for(int j=0;j<i;j++)\n            if(dis[a[i].v][a[j].v]+a[j].t<=a[i].t)\n\t\t\t    f[i]=max(f[j]+1,f[i]);\n    cout<<f[s];\n    return 0;\n}\n```\n\u6211\u8fd9\u8fb9\u770b\u4ee3\u7801\u53ef\u80fd\u7f29\u683c\u6709\u4e9b\u95ee\u9898\uff0c\u6539\u4e86\u53c8\u6015\u66f4\u6709\u95ee\u9898\u4e86\uff0c\u5c31\u5c06\u5c31\u7740\u770b\u5427\u3002\n\n\u8c22\u8c22\u89c2\u8d4f\u3002",
        "postTime": 1588594041,
        "uid": 306049,
        "name": "Utilokasteinn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6512 \u3010[QkOI#R1] Quark and Flying Pigs\u3011"
    },
    {
        "content": "### $Solution:$\n\n\u4e00\u9053\u6700\u77ed\u8def\u548c DP \u7684\u7ed3\u5408\u9898\u3002\n\n\u9996\u5148\uff0c\u7528 Floyd \u6c42\u51fa\u5168\u6e90\u6700\u77ed\u8def~~\u5f53\u7136\u7528 Johnson \u4e5f\u53ef\u4ee5~~\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^3)$\n\n\u63a5\u7740\uff0c\u628a\u6240\u6709 Flying Pigs \u6309\u7167 $t_i$ \u5927\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u8fdb\u884c DP\u3002\n\n\u5b9a\u4e49 $f_i$ \u8868\u793a\u524d $i$ \u53ea\u732a\u4e2d\u6700\u591a\u80fd\u53d6\u591a\u5c11\u53ea\u732a\uff0c\u5176\u4e2d\u7b2c $i$ \u53ea\u5fc5\u987b\u53d6\u3002\n\n\u5b9a\u4e49 $dis(i, j)$ \u8868\u793a\u8282\u70b9 $i$ \u548c $j$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\n\n\u90a3\u4e48\u53ef\u5f97\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$f_i = \\max_{j<i}\\{[t_j + dis(j, i) \\le t_i](f_j+1)\\}$$\n\n\u6700\u540e\u53d6\u4e00\u4e0b\u6240\u6709\u7684\u6700\u5927\u503c\u5c31\u884c\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(k^2)$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^3+k^2)$\u3002\n\n\u6ce8\u610f $O(k\\log_2k+k+n^3)$ \u7684\u8d2a\u5fc3\u662f\u9519\u8bef\u7684\u3002\n\n### $Code:$\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\ninline int read(){\n    int x = 0, f = 1; char ch = getchar();\n    while(ch < '0' || ch > '9'){ if(ch == '-') f = -1; ch = getchar(); }\n    while(ch >= '0' && ch <= '9'){ x = x * 10 + (ch ^ 48); ch = getchar(); }\n    return x * f;\n}\nstruct node{\n    int t, v;\n    bool operator < (const node&rhs)const{\n        return t < rhs.t;\n    }\n}a[5010];\nint n, m, K, mp[210][210], x, y, z, t[5010], v[5010], ans, idx, lst, f[5010];\nint main(){\n    n = read(); m = read(); K = read(); memset(mp, 63, sizeof(mp));\n    for(int i = 1; i <= m; ++i){\n        x = read(); y = read(); z = read();\n        mp[x][y] = min(mp[x][y], z);\n        mp[y][x] = min(mp[y][x], z);\n    }\n    for(int i = 1; i <= n; ++i) mp[i][i] = 0;\n    for(int k = 1; k <= n; ++k){\n        for(int i = 1; i <= n; ++i){\n            for(int j = 1; j <= n; ++j){\n                mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);\n            }\n        }\n    }//Floyd \u6a21\u677f\n    for(int i = 1; i <= K; ++i){\n        a[i].t = read(); a[i].v = read();\n    }\n    sort(a + 1, a + K + 1); a[0].t = 0; a[0].v = 1;\n    for(int i = 1; i <= K; ++i){\n    \tfor(int j = 0; j < i; ++j){\n    \t\tif(a[j].t + mp[a[j].v][a[i].v] <= a[i].t) f[i] = max(f[i], f[j] + 1);\n\t\t}\n\t\tans = max(ans, f[i]);\n\t}//DP \u90e8\u5206\n    printf(\"%d\", ans);\n}\n```\n",
        "postTime": 1588578688,
        "uid": 147999,
        "name": "Warriors_Cat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6512 \u3010[QkOI#R1] Quark and Flying Pigs\u3011"
    },
    {
        "content": "## B - Quark and Flying Pigs\n\n##### $\\text{Description}$\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u8fb9\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u5728 $0$ \u65f6\u523b\u4f60\u5728\u70b9 $1$ \u4e0a\u3002\n\n\u5047\u8bbe\u5f53\u524d\u662f $t$ \u65f6\u523b\uff0c\u4f60\u5728\u70b9 $v$ \u4e0a\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- \u4ecd\u505c\u7559\u5728\u70b9 $v$ \u4e0a\uff0c\u64cd\u4f5c\u540e\u5230 $t+1$ \u65f6\u523b\u3002\n- \u9009\u62e9\u4e00\u6761\u8fb9 $(a,b,w)$ \u6ee1\u8db3 $a=v$ \u6216 $b=v$\uff0c\u5219\u4f60\u5230\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u53e6\u4e00\u4e2a\u70b9\u4e0a\uff0c\u64cd\u4f5c\u540e\u5230 $t+w$ \u65f6\u523b\u3002\n\n\u6709 $k$ \u6761\u4fe1\u606f\uff0c\u6bcf\u4e00\u6761\u4fe1\u606f\u5f62\u5982 $(t_i,v_i)$ \u8868\u793a\u5728 $t_i$ \u65f6\u523b\uff0c\u70b9 $v_i$ \u4e0a\u4f1a\u51fa\u73b0\u4e00\u53ea\u98de\u732a\uff0c\u5176\u7f16\u53f7\u4e3a $i$\uff0c\u82e5\u8be5\u65f6\u523b\u4f60\u5728 $v_i$ \u4e0a\uff0c\u5219\u4f60\u6355\u83b7\u5230\u4e86 $i$ \u53f7\u98de\u732a\u3002\n\n\u73b0\u5728\u4f60\u9700\u8981\u6c42\u51fa\u4f60\u80fd\u6355\u83b7\u5230\u7684\u98de\u732a\u6570\u91cf\u7684\u6700\u5927\u503c\u3002\n\n$2\\le n\\le 200$\uff0c$1\\le m\\le \\frac{n(n-1)}{2}$\uff0c$1\\le k\\le 5000$\uff0c$1\\le a_i,b_i,v_i\\le n$\uff0c$1\\le w_i\\le 1000$\uff0c$1\\le t_i\\le 10^9$\u3002\n\n##### $\\text{Solution}$\n\n\u5148\u8dd1\u4e00\u904d Floyd \u6c42\u51fa\u4efb\u610f\u70b9\u5bf9\u95f4\u6700\u77ed\u8def\u3002\n\n\u63a5\u4e0b\u6765\u5c06\u6bcf\u6761\u4fe1\u606f\u6309 $t_i$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8bbe $f_i$ \u8868\u793a\u5728\u53ea\u8003\u8651\u524d $i$ \u4e2a\u4fe1\u606f\u65f6\u80fd\u6349\u5230\u7684\u98de\u732a\u6570\u91cf\uff0c\u5219\u6709\uff1a\n\n$$f_i=\\max_{0\\le j<i}\\{[\\operatorname{dis}(i,j)\\le t_i-t_j](f_j+1)\\}$$\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(k^2+n^3)$\u3002\n\n\u597d\u50cf\u548c P2285 \u649e\u9898\u4e86\u3002\n\n~~Flying Pig \u5c31\u662f\uff08\u6570\u636e\u5220\u9664\uff09~~",
        "postTime": 1588499993,
        "uid": 83547,
        "name": "LCuter",
        "ccfLevel": 7,
        "title": "[QkOI#R1] Quark and Flying Pigs \u5b98\u65b9\u9898\u89e3"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u590d\u6742\u5ea6\u66f4\u52a3\u4f46\u662f\u4ecd\u7136\u6b63\u786e\u7684\u5199\u6cd5\u3002\r\n\r\n\u5148\u5904\u7406\u51fa\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\uff0c\u7528 `Floyd` \u5373\u53ef\u3002\r\n\r\n\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u5c31\u4e0d\u592a\u4e00\u6837\u4e86\u3002\u72b6\u6001\u5b9a\u4e49\u4e3a $dp_{i,j}$ \u8868\u793a\u5904\u7406\u5230\u7b2c $i$ \u53ea\u98de\u732a\uff0c\u6700\u540e\u505c\u5728 $j$ \u70b9\u80fd\u6293\u5230\u7684\u6700\u591a\u98de\u732a\u6570\u3002\r\n\r\n\u98de\u732a\u6309 $t_i$ \u6392\u5e8f\u540e\uff0c\u679a\u4e3e\u6bcf\u53ea\u98de\u732a\uff0c\u518d\u679a\u4e3e\u7ec8\u70b9\u548c\u8d77\u70b9\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8d77\u70b9\uff0c\u679a\u4e3e\u4e4b\u524d\u6bcf\u53ea\u98de\u732a $i$\uff0c\u5982\u679c\u5728 $t_i$ \u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u80fd\u5728\u5f53\u524d\u65f6\u95f4\u5230\u8fbe\u7ec8\u70b9\uff0c\u5c31\u66f4\u65b0 `dp` \u503c\u3002\r\n\r\n\u4f46\u662f\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^3+n^2k^2)$ \u7684\uff0c\u660e\u663e\u8fc7\u4e0d\u4e86\u3002\u8003\u8651\u4f18\u5316\u3002\u56e0\u4e3a\u53ef\u4ee5\u505c\u7559\u5728\u539f\u5730\uff0c\u6240\u4ee5 $dp_{i,j}$ \u5728 $j$ \u786e\u5b9a\u65f6\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\u6545\u53ef\u4ee5\u4e8c\u5206\u3002\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u662f $O(n^3+n^2k\\log k)$\uff0c[\u65e0\u6cd5\u901a\u8fc7](https://www.luogu.com.cn/record/100846321)\u3002\u518d\u5206\u6790\u4e00\u4e0b\uff0c\u53d1\u73b0\u786e\u5b9a\u8d77\u70b9\u548c\u7ec8\u70b9\uff08\u540c\u4e0a\u6587\uff09\u540e\uff0c\u51b3\u7b56\u5177\u6709\u5355\u8c03\u6027\u3002\u6240\u4ee5\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u5bf9\u8d77\u70b9\u548c\u7ec8\u70b9\u8bb0\u5f55\u51b3\u7b56\u70b9\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^3+n^2k)$\uff0c[\u5f00 `O2` \u53ef\u8fc7](https://www.luogu.com.cn/record/100847467)\u3002\r\n\r\ncode\uff1a\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define mems(x,y) memset(x,y,sizeof x)\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int N=207,M=5e3+7,V=-1;\r\nconst int inf=0x3f3f3f3f;\r\nconst int mod=0;\r\nnamespace fast_io{\r\n\ttemplate<typename Tp>\r\n\tinline void read(Tp &ret){\r\n\t\tTp x=0,f=1;\r\n\t\tchar c=getchar();\r\n\t\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\r\n\t\twhile(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+c-0x30;c=getchar();}\r\n\t\tret=x*f;\r\n\t}\r\n\ttemplate<typename Tp>\r\n\tinline void write(Tp x){\r\n\t\tstatic char buf[40];\r\n\t\tstatic int len=-1;\r\n\t\tif(x<0)putchar('-'),x=-x;\r\n\t\tdo buf[++len]=x%10,x/=10;while(x);\r\n\t\twhile(len>=0)putchar(buf[len--]+0x30);\r\n\t}\r\n}\r\nint n,m,k;\r\nint dis[N][N];\r\nint dp[M][N],pre[N][N];\r\nstruct node{\r\n\tint t,val;\r\n\tbool operator<(const node &tmp)const{\r\n\t\treturn t<tmp.t;\r\n\t}\r\n}e[M];\r\nvoid solve(){\r\n\tscanf(\"%d%d%d\",&n,&m,&k);\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tfor(int j=1;j<=n;j++){\r\n\t\t\tdis[i][j]=inf/3;\r\n\t\t}\r\n\t\tdis[i][i]=0;\r\n\t}\r\n\tfor(int i=1,u,v,w;i<=m;i++){\r\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\r\n\t\tdis[u][v]=dis[v][u]=w;\r\n\t}\r\n\tfor(int p=1;p<=n;p++){\r\n\t\tfor(int i=1;i<=n;i++){\r\n\t\t\tfor(int j=1;j<=n;j++){\r\n\t\t\t\tdis[i][j]=min(dis[i][j],dis[i][p]+dis[p][j]);\r\n\t\t\t}\r\n\t\t}\r\n\t}//Floyd\r\n\tfor(int i=1;i<=k;i++){\r\n\t\tscanf(\"%d%d\",&e[i].t,&e[i].val);\r\n\t}\r\n\tsort(e+1,e+k+1);\r\n\tmems(dp,0x80);\r\n\tdp[0][1]=0;\r\n\tmems(pre,-1);\r\n\tfor(int p=1;p<=k;p++){\r\n\t\tfor(int i=1;i<=n;i++){\r\n\t\t\tfor(int j=1;j<=n;j++){\r\n\t\t\t\twhile(e[pre[i][j]+1].t<=e[p].t-dis[i][j]&&pre[i][j]<p-1){\r\n\t\t\t\t\tpre[i][j]++;\r\n\t\t\t\t}//\u627e\u5230\u51b3\u7b56\u70b9\r\n\t\t\t\tif(~pre[i][j]){\r\n\t\t\t\t\tdp[p][i]=max(dp[p][i],dp[pre[i][j]][j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tdp[p][e[p].val]++;//\u6349\u5230\u5c31++\r\n\t}\r\n\tint ans=0;\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tans=max(ans,dp[k][i]);\r\n\t}\r\n\tprintf(\"%d\\n\",ans);\r\n}\r\nsigned main(){\r\n\tint t=1;\r\n\t//\tscanf(\"%d\",&t);\r\n\twhile(t--)solve();\r\n}\r\n```",
        "postTime": 1675062459,
        "uid": 578590,
        "name": "yinhee",
        "ccfLevel": 0,
        "title": "P6512\u505a\u9898\u8bb0\u5f55"
    },
    {
        "content": "\u8fd9\u9898\u5f88\u7b80\u5355\uff0c\u4f46\u6211\u5728\u8003\u573a\u4e0a\u60f3\u4e86\u534a\u5929\u3002\n\n\u53d1\u73b0$n<=200,k<=5000$,\u6240\u4ee5\u53ef\u80fd$O(n^3+k^2)$\n\n\u597d\u5427\uff0c$O(n^3)$\u662f\u4ec0\u4e48\u5462\uff1f\n\n$Floyd$\uff01\uff01\uff01\n\n\u6211\u4eec\u5148\u8dd1\u4e00\u904d$Floyd$\uff0c\u5c31\u77e5\u9053\u4e86\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u3002\n\n\u7136\u540e\u7531\u4e8e\u8981\u6355\u6349\u5230\u6700\u591a\uff0c~~\u5f88\u81ea\u7136\u7684~~\u60f3\u5230$dp$\u3002\n\n\u8bbe$dp[i]$\u4e3a\u6355\u6349\u7b2c$i$\u5934\u725b\uff0c\u6700\u591a\u53ef\u4ee5\u6355\u6349\u591a\u5c11\u725b\u3002\n\n\u8f6c\u79fb\u5c31\u662f\u5982\u679c\u7b2c$j$\u5934\u725b\u5230\u7b2c$i$\u5934\u725b\u7684\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e\u4ed6\u4eec\u7684\u65f6\u95f4\u5dee\uff0c\u5c31$dp[i]=max(dp[i],dp[j]+1)$\n\n## \u6ce8\u610f\uff01\u5982\u679c\u522b\u4eba\u90fd\u8d70\u4e0d\u5230\u4f60\uff0c\u90a3\u8fd9\u4e2a\u70b9\u7684$dp$\u503c\u5c31\u8981\u7b97$0$\u3002\n\u56e0\u4e3a\u4ed6\u6839\u672c\u5c31\u4e0d\u4f1a\u88ab\u6355\u6349\u5230\u3002\u3002\u3002\u6240\u4ee5\u5982\u679c\u7b97$1$\uff0c\u51c9\u4e4b\u3002\n\n\u8fd9\u663e\u7136\u6ee1\u8db3\u65e0\u540e\u6548\u6027\uff0c\u56e0\u4e3a\u6211\u8d70\u5230\u8fd9\u4e2a\u725b\u5c31\u8981\u7b49\u5230\u5b83\u51fa\u73b0\uff0c\u6240\u4ee5\u4e00\u5b9a\u540e\u4e00\u5934\u725b\u8981\u7b49\u5230\u8fd9\u4e2a\u725b\u51fa\u73b0\u7684\u65f6\u95f4\u624d\u80fd\u4ed6\u90a3\u8fb9\u8d70\u8fc7\u53bb\u3002\n\n\u7136\u540e\u4e5f\u6ee1\u8db3\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u56e0\u4e3a\u524d\u9762\u7684\u53ea\u8981\u6700\u4f18\uff0c\u4e2d\u95f4\u90fd\u662f\u8d70\u5230\u8fd9\u5934\u725b\uff0c\u5982\u679c\u4e0d\u540c\u7684\u65b9\u6848\u53ea\u8981\u8bb0\u6700\u4f18\u7684\u5c31\u884c\u4e86\u3002\n\n\u7531\u4e0a\u53ef\u77e5\u8bc1\u6bd5\uff08\u5927\u96fe\n\n\u5f00\u59cb\u8fd8\u8981\u628a\u6240\u6709\u732a\u732a\u6309\u65f6\u95f4\u6392\u4e2a\u5e8f\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4ece\u524d\u5f80\u540e\u8d70\n\n\u7136\u540e\u4ece\u6bcf\u4e2a\u70b9\u4e2d\u9009\u6700\u4f18\u5c31\u53ef\u4ee5\u4e86\u3002\n\n$code$ $time$\uff1a\n```cpp\n/*      \u897f\u6c5f\u6708\u00b7\u8bc1\u660e\n\t\u5373\u5f97\u6613\u89c1\u5e73\u51e1\uff0c\u4eff\u7167\u4e0a\u4f8b\u663e\u7136\u3002\n   \u7559\u4f5c\u4e60\u9898\u7b54\u6848\u7565\uff0c \u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be\u3002\n\n\t\u53cd\u4e4b\u4ea6\u7136\u540c\u7406\uff0c\u63a8\u8bba\u81ea\u7136\u6210\u7acb\u3002\n\t\u7565\u53bb\u8fc7\u7a0bQED\uff0c\u7531\u4e0a\u53ef\u77e5\u8bc1\u6bd5\u3002*/\n#define mod 10\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define kkk register\n#define ll long long\n#define inf 2147098934832ll\nusing namespace std;\nint read(){int ans=0,f=1;char a=getchar();while(a>'9'||a<'0')f|=a=='-',a=getchar();while(a>='0'&&a<='9')ans=(ans<<3)+(ans<<1)+a-'0',a=getchar();return ans*f;}\n//\u4e00\u6761long long\u7684\u9ec4\u91d1\u5206\u5272\u7ebf-----------------------------------------------------------------------------------------------------------------------------------\nint n,m,s,maxt,dp[205][205],ddp[20005];\nstruct node{\n\tint t,v;\n}fz[100005];\nbool cmp(node a,node b){return a.t<b.t;}\nint main(){\n    n=read();m=read();s=read();\n    for(int i=1;i<=n;i++)\n    \tfor(int j=1;j<=n;j++)\n    \t\tdp[i][j]=10903333;\n    for(int i=1;i<=n;i++)dp[i][i]=0;\n    for(int i=1;i<=m;i++){\n    \tint u=read(),v=read(),w=read();\n    \tdp[u][v]=dp[v][u]=min(dp[u][v],w);\n\t}\n\tfor(int i=1;i<=s;i++)fz[i].t=read(),fz[i].v=read();\n\tsort(fz+1,fz+1+s,cmp);\n\tfor(int j=1;j<=n;j++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int k=1;k<=n;k++)\n\t\t\t\tdp[i][k]=min(dp[i][k],dp[i][j]+dp[j][k]);\n\tddp[0]=0;fz[0].t=0;fz[0].v=1;\n\tint ans=0;\n\tfor(int i=1;i<=s;i++){\n\t\tddp[i]=0;\n\t\tfor(int j=0;j<i;j++)\n\t\t\tif(fz[i].t-fz[j].t>=dp[fz[i].v][fz[j].v])\n\t\t\t\tddp[i]=max(ddp[i],ddp[j]+1);\n\t\tans=max(ans,ddp[i]);\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1588572060,
        "uid": 261018,
        "name": "\u5362\u672c\u4f1f\uff01\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6512 \u3010[QkOI#R1] Quark and Flying Pigs\u3011"
    },
    {
        "content": "##### \u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u62a2\u5230\u7b2c\u4e00\n\n\u9996\u5148\u8fd9\u80af\u5b9a\u662f\u4e00\u9053\u52a8\u6001\u89c4\u5212\u3002\u3002\u3002\n\n\u6211\u4eec\u8003\u8651\u72b6\u6001\u3002\n\n\u6211\u4eec\u80af\u5b9a\u662f\u8981\u6355\u83b7\u4e00\u53ea\u98de\u732a\u7136\u540e\u5230\u53e6\u4e00\u53ea\u98de\u732a\u51fa\u73b0\u7684\u4f4d\u7f6e\u7b49\u5f85\u4e00\u4f1a\uff08\u53ef\u80fd\u4e0d\u7528\u7b49\uff09\u7136\u540e\u518d\u6355\u83b7\u5b83\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8bbe\u8ba1\u72b6\u6001$f_{i}$\uff0c\u8868\u793a\u8003\u8651\u5230\u7b2c$i$\u5934\u98de\u732a\uff0c\u80af\u5b9a\u8981\u6355\u83b7\u7684\u6700\u591a\u6355\u83b7\u7684\u98de\u732a\u6570\u91cf\u3002\u7279\u522b\u7684\uff0c\u6211\u4eec\u8bbe$f_0=0,v_0=1,t_0=0$\uff0c$f_{i}(i>0)$\u4e3a\u8d1f\u65e0\u9650\u3002\n\n\u8003\u8651\u8f6c\u79fb\uff0c\u6211\u4eec\u5148\u8981\u628a\u98de\u732a\u6309\u51fa\u73b0\u7684\u65f6\u95f4\u6392\u5e8f\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u8f6c\u79fb\u4e0d\u51fa\u9519\u3002\u8981\u6355\u83b7\u7b2c$i$\u5934\u98de\u732a\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece$v_{j}$\u51fa\u53d1\u5230$v_{i}$\uff0c\u6ee1\u8db3$t_{i}-dis_{v_{i},v_{j}}\\le t_{j}$\u3002\n\n\u90a3\u8fd9\u6837\u3002\u3002\u3002\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\uff01\u4e0a\u4ee3\u7801\uff01\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 205, M = 5005;\nint n, m, p;\nint dis[N][N];\npair<int, int> pig[M];\nint f[M], ans=0;\nint main(){\n\tstd::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n//\tfreopen(\"test_file/in.txt\", \"r\", stdin);\n//\tfreopen(\"test_file/out.out\", \"w\", stdout);\n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemset(f, -0x3f, sizeof(f));\n\tcin >> n >> m >> p;\n\tfor (int i = 0; i < m; i++){\n\t\tint u, v, w;\n\t\tcin >> u >> v >> w;\n\t\tdis[u][v] = dis[v][u] = min(dis[u][v], w);\n\t}\n\tfor (int i = 1; i <= p; i++) cin >> pig[i].first >> pig[i].second;\n\tsort(pig+1, pig+1+p);\n    //floyd\u6c42\u6700\u77ed\u8def\n\tfor (int i = 1; i <= n; i++) dis[i][i] = 0;\n\tfor (int k = 1; k <= n; k++)\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfor (int j = 1; j <= n; j++)\n\t\t\t\tdis[i][j] = min(dis[i][k]+dis[k][j], dis[i][j]);\n    f[0] = 0;\n    pig[0] = {0, 1};//\u7279\u4f8bf[0],pig[0]\n\tfor (int i = 1; i <= p; i++)\n\t\tfor (int j = 0; j <= p; j++)\n\t\t\tif (pig[i].first-dis[pig[i].second][pig[j].second] >= pig[j].first && j != i)//\u8003\u8651\u80fd\u4e0d\u80fd\u8d76\u8fc7\u6765\n\t\t\t    f[i] = max(f[j]+1, f[i]);\n\tfor (int i = 1; i <= p; i++) ans = max(f[i], ans);\n\tcout << ans;\n\treturn 0;\n}\n```\n### \u5b8c\u7ed3\u6563\u82b1\uff01",
        "postTime": 1588567559,
        "uid": 171288,
        "name": "Tony2",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6512 \u3010[QkOI#R1] Quark and Flying Pigs\u3011"
    },
    {
        "content": "## \u601d\u8def\u7b80\u8ff0\n\u5178\u578b\u7684\u4e8c\u5408\u4e00\u6c34\u9898\u3002\n\nFloyd\u6700\u77ed\u8def + \u52a8\u6001\u89c4\u5212\u3002\n\n### Step1 \u6c42\u6700\u77ed\u8def\n\u4e0d\u4f1a Floyd \u8bf7\u81ea\u884c\u5b66\u4e60\u3002\n\n\u76f4\u63a5 $O(n^3)$ \u5c31\u80fd\u6c34\u8fc7\u53bb\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u77e5\u9053\u4ece\u56fe\u4e0a\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n### Step2 \u6c42\u6700\u591a\u80fd\u63a5\u5230\u51e0\u53ea\u732a\n\u8003\u8651\u52a8\u6001\u89c4\u5212\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8bb0$t_k$ \u4e3a\u7b2c $k$ \u53ea\u732a\u51fa\u73b0\u7684\u65f6\u95f4\uff0c\u8bb0 $dis_{ij}$ \u4e3a\u7b2c $i,j$ \u53ea\u732a\u6240\u5728\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c $f_k$ \u4e3a\u524d $k$ \u53ea\u732a\u4e2d\u63a5\u5230\u7b2c $k$ \u53ea\u732a\u65f6\u6700\u591a\u80fd\u63a5\u5230\u7684\u732a\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u4e0d\u96be\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b:\n\n$$f_x=max\\{f_y+1\\}(t_y+dis_{xy}\\leq t_x,0\\leq y<x)$$\n\n\u663e\u7136\u5982\u679c\u9884\u5904\u7406\u4e86\u56fe\u4e0a\u4e24\u70b9\u6700\u77ed\u8ddd\u79bb\u662f\u53ef\u4ee5 $O(k^2)$ \u7684\uff0c\u90a3\u4e48\u76f4\u63a5\u7b97\u5c31\u597d\u4e86\u3002\n## \u4ee3\u7801\n```\n#include<bits/stdc++.h>\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nlong long dis[503][503];\nstruct pig\n{\n\tlong long t;\n\tint p;\n}p[10003];\ninline bool cmp(pig x,pig y)\n{\n\treturn x.t<y.t;\n}\nusing namespace std;\nint Mx[10003];\nint main()\n{\n\tint n=read(),m=read(),k=read(),u,v,w;\n\tfor(int i=1; i<=n; i++) for(int j=1; j<=n; j++) dis[i][j]=100000000007LL;\n\tfor(int i=1; i<=n; i++) dis[i][i]=0;\n\twhile(m--) u=read(),v=read(),w=read(),dis[u][v]=min(dis[u][v],(long long)w),dis[v][u]=min(dis[v][u],(long long)w);\n\tfor(int i=1; i<=k; i++) p[i].t=read(),p[i].p=read();\n\tfor(int i=1; i<=n; i++) for(int j=1; j<=n; j++) for(int k=1; k<=n; k++) dis[j][k]=min(dis[j][k],dis[j][i]+dis[i][k]);\n\tsort(p+1,p+k+1,cmp);\n\tp[0].p=1,p[0].t=0;\n\tint ans=0;\n\tfor(int i=1; i<=k; i++) \n\t{\n\t\tfor(int j=0; j<i; j++) if(p[j].t+dis[p[j].p][p[i].p]<=p[i].t) Mx[i]=max(Mx[j]+1,Mx[i]);\n\t\tans=max(ans,Mx[i]);\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n//\u4eba\u50bb\u5e38\u6570\u5927\n```\n\n\u590d\u6742\u5ea6 $O(n^3+k^2)$",
        "postTime": 1588575992,
        "uid": 111055,
        "name": "dead_X",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6512 \u3010[QkOI#R1] Quark and Flying Pigs\u3011"
    }
]