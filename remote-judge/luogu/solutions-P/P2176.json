[
    {
        "content": "\uff08\u8fd9\u9898...spfa\u4f1a\u88ab\u5361\uff1f\uff09\n\n\u867d\u7136\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6ee1\u4e16\u754c\u7684dj\uff0c\u6211\u8fd8\u662f\u8d34\u4e00\u4e2aspfahaole\n\n\n\u663e\u7136\u5982\u679c\u6269\u5927\u4e00\u6761\u8fb9\uff0c\u4e14\u80fd\u4f7f\u6700\u77ed\u8def\u589e\u52a0\uff0c\u8fd9\u6761\u8fb9\u4e00\u5b9a\u5728\u539f\u6700\u77ed\u8def\u4e0a\uff0c\u4e0d\u7136\u6700\u77ed\u8def\u4ecd\u7136\u662f\u539f\u6765\u7684\u6700\u77ed\u8def\uff0c\u4e0d\u4f1a\u6709\u589e\u91cf\n\n\n\u6240\u4ee5\u679a\u4e3e\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u9010\u4e00\u8bd5\u56fe\u6269\u5927\uff0c\u7136\u540e\u91cd\u65b0\u8dd1\u6700\u77ed\u8def\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u5f97\u5230\u589e\u91cf\uff0c\u8fdb\u884c\u64cd\u2642\u4f5c\u5c31\u597d\u4e86\n\n\u56e0\u4e3a\u662f\u65e0\u5411\u8fb9\u6240\u4ee5\u53ef\u4ee5\u4ece1\u5f00\u59cb\u8bb0\u5f55\u8fb9\uff0c\u8fd9\u6837^1\u5c31\u662f\u5bf9\u5e94\u7684\u53cd\u5411\u8fb9\u4e86\uff08\u5199\u8fc7\u7f51\u7edc\u6d41\u7684\u5e94\u8be5\u7406\u89e3\u54270v0\uff09\n\n\n\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define M 15000\n#include<queue> \n#define N 110\nusing namespace std;\nint n,m;\nint po,ans;\nint head[N],to[M],next[M],len[M],e=1;\nvoid buid(int u,int v,int l)\n{\n    next[++e]=head[u],head[u]=e;\n    to[e]=v,len[e]=l;\n}\nint dis[N],init[N];\nint pre[N],fr[N],that[M],nu;\nqueue<int> q;\nvoid spfa(int s)\n{\n    memset(dis,20,sizeof(dis));\n    dis[s]=0;init[s]=1,q.push(s);\n    while(!q.empty())\n    {\n        int now=q.front();q.pop();init[now]=0;\n        for(int i=head[now];i;i=next[i])\n        {\n            int j=to[i];\n            if(dis[j]>dis[now]+len[i])\n            {\n                dis[j]=dis[now]+len[i];\n                pre[j]=i;fr[j]=now;\n                if(!init[j])\n                {\n                    init[j]=1;q.push(j);\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;++i)\n    {\n        int u,v,l;\n        scanf(\"%d%d%d\",&u,&v,&l);\n        buid(u,v,l);\n        buid(v,u,l);\n    }\n    spfa(1);po=dis[n];\n    int now=n;\n    while(now!=1)\n    {\n        that[++nu]=pre[now];//\u8bb0\u8def\u5f84\n        now=fr[now];\n    }\n    for(int i=1;i<=nu;++i)//\u679a\u4e3e\u8def\u5f84\n    {\n        len[that[i]]*=2;\n        len[that[i]^1]*=2;\n        spfa(1);//\u64cd\u2642\u4f5c\n        ans=max(ans,dis[n]);\n        len[that[i]]/=2;\n        len[that[i]^1]/=2;\n    }\n    cout<<ans-po<<endl;//end\n    return 0;\n} \n//\u4eca\u5929\u4e5f\u4f9d\u65e7\u6ca1\u6709\u635e\u5230\u5c9b\u98ce47\u538c\u6218\u5462OvO\n\n```",
        "postTime": 1506121533,
        "uid": 35718,
        "name": "MloVtry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\n - \u4f5c\u4e3a\u4e00\u4e2a\u63d0\u4ea4\u4e86\u65e0\u6570\u904d\u6b64\u9898\u7684\u849f\u84bb\uff0c\u6211\u51b3\u5b9a\u6765\u4e3a\u6b64\u9898\u732e\u4e0a\u6211\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u3002\n \n\n------------\n\n   \u66b4\u529b\u505a\u6cd5\uff1a\n   \n    \u6bd5\u7adf\u6211\u4eec\u6bd4\u8d5b\u7684\u65f6\u5019\u4e0d\u53ef\u80fd\u6240\u6709\u9898\u90fd\u53bb\u60f3\u6b63\u89e3\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u9047\u5230\u4e00\u4e9b\u6ca1\u6709\u5fc5\u8981\u6253\u6b63\u89e3\u7684\u9898\u76ee\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u5c1d\u8bd5\u53bb\u66b4\u529b\u62ff\u5206\uff08\u5f53\u66b4\u529b\u4e5f\u80fdac\u6216\u62ff\u5927\u90e8\u5206\u5206\u65f6\uff09\n   \n   \u8be5\u600e\u4e48\u6253\u66b4\u529b\u5462\uff1f\n   \n   \u8fd9\u662f\u4e00\u9879\u201c\u7384\u5b66\u201d\uff0c\u9996\u5148\u6211\u4eec\u6709\u4e2a\u601d\u8def\uff0c\u8fd9\u9053\u9898\u662f\u5728\u4e0d\u505c\u5730\u627e\u6700\u77ed\u8def\uff0c\u90a3\u6211\u4eec\u5c31\u62ff\u51fa\u6211\u4eec\u7684\u6700\u77ed\u8def\u6a21\u677f dijkstra+\u5806\u4f18\u5316 \uff0c\u8981\u4fee\u8fb9\u7684\u8bdd\uff0c\u56e0\u4e3a\u6211\u4eec~~\u5e76\u4e0d\u60f3~~\u5e76\u4e0d\u77e5\u9053\u8981\u4fee\u6539\u54ea\u4e9b\u8fb9\uff0c\u90a3\u6211\u4eec\u5e72\u8106\u5c31\u628a\u6bcf\u6761\u8fb9\u90fd\u4fee\u6539\u4e00\u6b21\uff0c\u7136\u540e\u8d70\uff08m+1\uff09\u6b21\u6700\u77ed\u8def\n   \n   \u7136\u800c\uff0c\u7528dijkstra+\u5806\u4f18\u5316 \u6253\u66b4\u529b\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u53d1\u73b0\u65e0\u8bba\u5982\u4f55\u66b4\u529b\u62ff\u5206\u90fd\u67091\u4e2a\u70b9t\u6389\uff0c\u8fd9\u91cc\u662f\u4e00\u5904\u6b64\u9898\u5f88\u5947\u5999\u7684\u5730\u65b9\u3002\u8ba9\u6211\u4eec\u6765\u7b97\u4e00\u7b97\u8fd9\u4e2a\u66b4\u529b\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u9996\u5148\u662fdijkstra+\u5806\u4f18\u5316\u7684\u6700\u77ed\u8def\u590d\u6742\u5ea6 \uff08n+m\uff09logn\u3010\u6309\u6700\u5927\u6570\u636e\u5927\u7ea6\u662f35000\u6b21\u3011 \u7136\u540e\u56e0\u4e3a\u6211\u4eec\u8d70\u4e86\uff08m+1\u6b21\uff09\u6240\u4ee5\u662f \uff08m+1\uff09\uff08n+m\uff09logn \u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5728\u9898\u76ee\u7684\u8303\u56f4\u5185\u7834\u4ebf\u4e86\uff0c\u8fd9\u4e5f\u5c31\u662fdijkstra+\u5806\u4f18\u5316t\u6389\u7684\u539f\u56e0\u3002\n  \n  \u4f46\u662f\u7531\u4e8e\u8fd9\u9053\u9898n\u7684\u8303\u56f4\u6781\u5176\u4e4b\u5c0f\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u6700\u539f\u59cb\u7684dijkstra\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08n^2\uff09 \u6211\u4eec\u626b\u4e00\u904d\u67e5\u627e\u79bb\u8d77\u70b9\u6700\u8fd1\u7684\u672a\u904d\u5386\u7684\u70b9\uff0c\u518d\u626b\u4e00\u904d\uff0c\u7528\u6b64\u70b9\u6765\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u3010\u66f4\u65b0\u6700\u77ed\u8def\u3011 \u90a3\u4e48\u5927\u81f4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff082*n^2\uff09\u6211\u4eec\u518d\u8fdb\u884c\uff08m+1\uff09\u6b21 \u3010\u6309\u6700\u5927\u6570\u636e\u6765\u8ba1\u7b97\u5219\u5927\u6982\u521a\u597d\u52301\u4ebf\uff0c\u7b97\u662f\u52c9\u5f3a\u6328\u8fb9\u3011 \u6b21\u6570\u8981\u5c0f\u4e8e\u5806\u4f18\u5316\u8fc7\u7684 \uff08\u6240\u4ee5\u8fd9\u9053\u9898\u7528\u539f\u59cb\u7248dijkstra\u662f\u53ef\u4ee5\u8fc7\u7684\uff09\n  \n  dijkstra\u66b4\u529b\u4ee3\u7801\u5982\u4e0b\uff08\u7531\u4e8e\u6211\u4e0d\u4f1a\u7528\u90bb\u63a5\u8868\u505a\u539f\u59cbdijkstra\u6240\u4ee5\u5c31\u7528\u90bb\u63a5\u77e9\u9635\u6765\u5b58\u56fe\uff0c\u82e5\u6709\u54ea\u4f4d\u5de8\u4f6c\u4f1a\uff0c\u671b\u80fd\u591a\u591a\u6307\u6559\uff09 \uff081050ms\uff09\n  ```cpp\n#include <iostream>\n#include <queue>\n#include <iomanip>\n#include <cstdio>\n#define ll long long\nusing namespace std;\nint uv[105][105]={0};//\u7528\u90bb\u63a5\u77e9\u9635\nint q=0,n,m;\nint x[6005],y[6005],o=0;//\u7528\u4e8e\u8bb0\u5f55\u201c\u8981\u4fee\u6539\u201d\u7684\u6bcf\u6761\u8fb9\n\nbool flag[110]={0};\nint road[110]={0};//\u8fd9\u4e24\u4e2a\u662fdijkstra\u7528\u7684\u6570\u7ec4\u4fdd\u5b58\u72b6\u6001\u548c\u6700\u77ed\u8def\nvoid dijkstra(){\n\nfor( int i=1;i<=n;i++){\n flag[i]=0;\n road[i]=uv[1][i];\n}\nroad[1]=0;\nflag[1]=1;\n    for( int i=1;i<n;i++){\n        int minn=0x7fffff;\n        int t;\n        for( int j=1;j<=n;j++)\n            if(flag[j]==0&&road[j]<minn){\n                t=j;\n                minn=road[j];\n            }\n    flag[t]=1;\n    for( int k=1;k<=n;k++) \n     road[k]=min(road[k],road[t]+uv[t][k]); \n}\n}\n\nint main (){\n   int l;\n scanf(\"%d%d\",&n,&m);\n\n for(int i=1;i<=n;i++)\n  for( int j=1;j<=n;j++)\n    uv[i][j]=0x7fffff; //\u521d\u59cb\u5316\u6bcf\u6761\u8fb9\n\n    for( int i=1;i<=m;i++){\n        int j,k,l;\n        scanf(\"%d%d%d\",&j,&k,&l);\n\n          uv[j][k]=l;\n          uv[k][j]=l;\n        x[++o]=j;\n        y[o]=k;\n    } //\u8f93\u5165\uff0c\u5b58\u50a8\u56fe\n\n    dijkstra();\n  int ans=road[n];//\u6c42\u51fa\u4fee\u8fb9\u524d\u7684\u6700\u77ed\u8def\u957f\u5ea6\n    l=0;\n\n    for(int i=1;i<=o;i++){\n        uv[x[i]][y[i]]*=2;\n        uv[y[i]][x[i]]*=2;\n    dijkstra();\n         l=max(l,road[n]);\n        uv[y[i]][x[i]]/=2;\n         uv[x[i]][y[i]]/=2;\n    } //\u66b4\u529b\u4fee\u8fb9\uff0c\u75af\u72c2\u6c42\u6700\u77ed\u8def\nprintf(\"%d\",l-ans);    \n\n}\n\n```\n\n\u9664\u5916\uff0cspfa\u7384\u5b66\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08kE\uff09\u7528\u6765\u66b4\u529b\u8fd9\u9053\u9898\u4e5f\u80fd\u8fc7\n\nspfa\u66b4\u529b\u4ee3\u7801\u5982\u4e0b \uff081134ms\uff09\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\nusing namespace std;\nint m,n;\nqueue <int> q;\nbool flag[110];\nint uv[110][110]={0};\nint road[110];\nint x[6000],y[6000],o=0;\nvoid spfa(int v){\n    for(int i=1;i<=n;i++) {\n        flag[i]=0;\n        road[i]=0x7fffff;\n    }\n    road[v]=0;\n    flag[v]=1;\n    q.push(v);\n    while(!q.empty()){\n        int t=q.front();\n        for(int i=1;i<=n;i++)\n        if(uv[t][i]!=0x7fffff) \n        if(road[i]>road[t]+uv[t][i]){\n            road[i]=road[t]+uv[t][i];\n            if(flag[i]==0){\n                q.push(i);\n                flag[i]=1;\n            }\n        }\n        \n        flag[t]=0;\n        q.pop();\n    }\n}\n\nint main (){\n    int i,j,k,l;\n    \n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++)\n    for(j=1;j<=n;j++) \n    uv[i][j]=0x7fffff;\n    \n    for(i=1;i<=m;i++){\n        cin>>j>>k>>l;\n        uv[j][k]=l;\n        uv[k][j]=l;\n        x[++o]=j;\n        y[o]=k;\n    }\n\n    spfa(1);\n   \n    \n    l=0;\n    int ans=road[n];\n    for(i=1;i<=o;i++){\n        uv[x[i]][y[i]]*=2;\n        uv[y[i]][x[i]]*=2;\n        spfa(1);\n        l=max(l,road[n]);\n        uv[x[i]][y[i]]/=2;\n        uv[y[i]][x[i]]/=2;\n    }\n    printf(\"%d\",l-ans);\n    }\n\n\n```\n\n\n------------\n\n\n \u5bf9\u6bd4\u6765\u770b\uff0cspfa\u7684\u4ee3\u7801\u663e\u5f97\u5f88\u7b80\u6d01\u5462\uff08\u6216\u8bb8\u8fd9\u5c31\u662fspfa\u5e38\u5e74\u88abnoip\u9488\u5bf9\u7684\u7f18\u6545\u5427\uff09\n \n ~~\u6109\u5feb~~\u201c\u8270\u96be\u7684\u201d\u66b4\u529b\u8fc7\u540e\uff0c\u6211\u4eec\u4e5f\u8be5\u60f3\u60f3\u6b63\u89e3\u4e86\uff0c\u6bd5\u7adfoier\u505a\u9898\u4e0d\u80fd\u4ec5\u9760\u66b4\u529b\uff0c\u51b5\u4e14\u8fd9\u9053\u9898\u662f\u56e0\u4e3a\u5176\u6570\u636e\u8303\u56f4\u5c0f\u624d\u80fd\u88ab\u66b4\u529bac\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u6b63\u786e\u65b9\u6cd5\u5230\u5e95\u8be5\u600e\u4e48\u505a\u5462\uff1f\n \n \u5176\u5b9e\u539f\u7406\u5f88\u7b80\u5355\uff0c\u770b\u8fc7\u5176\u4ed6\u9898\u89e3\u7684\uff0c\u4e5f\u5e94\u8be5\u61c2\u4e86\uff0c\u4f46\u4e3a\u4e86\u9898\u89e3\u7684\u5b8c\u6574\u6027\uff0c\u849f\u84bb\u6211\u8fd8\u662f\u63d0\u53ca\u4e00\u756a\u5427\n \n \u539f\u7406\uff1a\u5982\u679c\u6211\u4eec\u4fee\u6539\u7684\u8def\u4e0d\u5728\u539f\u6765\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u90a3\u4e48\u5b83\uff08\u8fd9\u6761\u4fee\u6539\u540e\u7684\u8fb9\uff09\u7684\u4fee\u6539\u5bf9\u4e8e\u8fd9\u4e00\u6b21\u6700\u77ed\u8def\u7684\u503c\u6ca1\u6709\u610f\u4e49\u3002\u90a3\u4e48\u6211\u4eec\u4e5f\u8be5\u60f3\u5230\u4e86\uff0c\u5728\u505a\u5b8c\u7b2c\u4e00\u6b21dijkstra\u540e\uff0c\u627e\u5230\u4f4d\u4e8e\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u5bf9\u8fd9\u4e9b\u8fb9\u6765\u8fdb\u884c\u4fee\u6539\u6c42\u89e3\u5c31\u597d\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u7528\u90bb\u63a5\u77e9\u9635\u7684\u4f18\u52bf\u4e5f\u5c31\u6765\u4e86\uff0c\n\u53ef\u4ee5\u76f4\u63a5\u7528dfs\u5f80\u56de\u641c\u7d22\n\n```cpp\nvoid dfs(int v,int len){\n    if(v==1) return ;\n    for(int i=1;i<=n;i++)\n    if(uv[i][v]!=0x7fffff)\n    if(road[v]-uv[i][v]==road[i]){\n        x[++o]=v;y[o]=i;\n        dfs(i,road[i]);\n        return ;\n    }\n}\n\n\n```\n\u8fd9\u6837\u52a0\u4e00\u4e2a\u5b50\u7a0b\u5e8f\uff0c\u518d\u5bf9\u6e90\u4ee3\u7801\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\ndijkstra+dfs ac\u6b63\u89e3\uff0833ms\uff09\n\n```cpp\n#include <iostream>\n#include <queue>\n#include <iomanip>\n#include <cstdio>\n#define ll long long\nusing namespace std;\nint uv[105][105]={0};\nint q=0,n,m;\nint x[5005],y[5005],o=0;\nbool flag[110]={0};\nint road[110]={0};\nvoid dijkstra(){\n  \nfor( int i=1;i<=n;i++){\n flag[i]=0;\n road[i]=uv[1][i];\n}\nroad[1]=0;\nflag[1]=1;\n    for( int i=1;i<n;i++){\n    \tint minn=0x7fffff;\n    \tint t;\n    \tfor( int j=1;j<=n;j++)\n    \t\tif(flag[j]==0&&road[j]<minn){\n    \t\t\tt=j;\n    \t\t\tminn=road[j];\n            }\n    flag[t]=1;\n    for( int k=1;k<=n;k++) \n     road[k]=min(road[k],road[t]+uv[t][k]); \n}\n}\n\nvoid dfs(int v,int len){\n    if(v==1) return ;\n    for(int i=1;i<=n;i++)\n    if(uv[i][v]!=0x7fffff)\n    if(road[v]-uv[i][v]==road[i]){\n        x[++o]=v;y[o]=i;\n        dfs(i,road[i]);\n        return ;\n    }\n}\n\nint main (){\n   \n    int l;\n  // freopen(\"t.txt\",\"r\",stdin); \n scanf(\"%d%d\",&n,&m);\n \n for(int i=1;i<=n;i++)\n  for( int j=1;j<=n;j++)\n    uv[i][j]=0x7fffff;\n \n    for( int i=1;i<=m;i++){\n    \tint j,k,l;\n        scanf(\"%d%d%d\",&j,&k,&l);\n \n      \tuv[j][k]=l;\n      \tuv[k][j]=l;\n    }\n\n    dijkstra();\n    dfs(n,road[n]);\n   \n  int ans=road[n];\n    l=0;\n    for(int i=1;i<=o;i++){\n       uv[x[i]][y[i]]*=2;\n        uv[y[i]][x[i]]*=2;\n    dijkstra();\n     \tl=max(l,road[n]);\n\n     \t  uv[x[i]][y[i]]/=2;\n     \t  uv[y[i]][x[i]]/=2;\n    \n }\nprintf(\"%d\",l-ans);\t\n    \n} \n```\nspfa\u4e5f\u662f\u7c7b\u4f3c\uff08\u907f\u514d\u8fc7\u957f\uff0c\u6211\u5728\u6b64\u5c31\u4e0d\u8d34\u51fa\u4ee3\u7801\u4e86\uff09\n\u3010\u8981\u771f\u60f3\u8981\u4ee3\u7801\uff0c\u53ef\u4ee5\u5728\u8bc4\u6d4b\u8bb0\u5f55\u4e2d\u641c\u6211\u7684\u540d\u5b57\u3011\n\u3010\u4f46\u662f\u4e0d\u8981\u76f4\u63a5\u6284\u54e6\uff0c\u5c0f\u5fc3\u88ab\u6293\u5230\u3011\n\n\n\u6700\u540e\u603b\u7ed3\uff1a \u5176\u5b9e\u8fd9\u662f\u4e00\u9053\u4e0d\u7b97\u96be\u7684\u9898\uff0c\u4e3b\u8981\u8003\u5bdf\u7684\u662f\u6700\u77ed\u8def\u7684\u6a21\u677f\uff0c\u4ee5\u53ca\u6700\u77ed\u8defdfs\uff0c\u6216\u8005\u66b4\u529b\u65f6\u5bf9\u66b4\u529b\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u4f30\u91cf\uff0c\u8ba1\u7b97\uff1b\n\n  \u5f15\u6587\uff1a\u6b64\u5904n\u8f83\u5c0f\uff0c\u6211\u4eec\u53ef\u7528\u90bb\u63a5\u77e9\u9635\u548c\u539f\u59cbdijkstra\u6765\u5904\u7406\uff0c\u90a3\u4e48\u5982\u679cn\u3001m\u6570\u636e\u90fd\u589e\u5f3a\uff0c\u8fd9\u6837\u505a\u4f1a\u4e0d\u4f1a\u51fa\u95ee\u9898\u5462\uff1f\n  \n  \u8fd8\u771f\u90a3\u4e48\u6709\u8fd9\u6837\u4e00\u9053\u9898\uff0c\u4e0e\u6b64\u9898\u6781\u4e3a\u76f8\u4f3c\n  P1186 \u739b\u4e3d\u5361 \n  \n  \u5efa\u8bae\u5927\u5bb6\u90fd\u53ef\u4ee5\u53bb\u8bd5\u8bd5\n  \n  \u90a3\u4e48\u6211\u4eec\u5c31\u5728\u90a3\u9053\u9898\u7684\u9898\u89e3\u4e0a\uff0c\u518d\u89c1\u5427\uff0c\u62dc\u62dc\u3002\n  \n  \n\n\n~~\u3010\u53ef\u80fd\u770b\u4e0d\u5230\u6211\u4e86\uff0c\u56e0\u4e3a\u61d2\u3011~~\n  \n \u3010\u5982\u679c\u89c9\u5f97\u6211\u6253\u7684\u9898\u89e3\u6709\u90a3\u4e48\u4e00\u70b9\u70b9\u4f5c\u7528\u7684\u8bdd\uff0c\u6b22\u8fce\u7ed9\u6211\u7559\u8a00\u548c\u70b9\u8d5e\u3011\n \n \u3010\u5404\u4f4d\u5de8\u4f6c\u5bf9\u672c\u849f\u84bb\u6709\u4ec0\u4e48\u5efa\u8bae\u548c\u6307\u6559\uff0c\u6307\u6b63\u7684\u4e5f\u6b22\u8fce\u63d0\u51fa\u3011\n \n \u3010\u6700\u540e\u8c22\u8c22\u5404\u4f4d\u5de8\u4f6c\uff0c\u80fd\u770b\u5b8c\u8fd9\u7bc7\u5570\u55e6\u9b3c\u7801\u7684\u9898\u89e3\u3011\n   \n\n \n \n \n  \n  \n  \n  \n   \n   \n  \n   \n\n \n ",
        "postTime": 1543989079,
        "uid": 49259,
        "name": "\u971c\u6708\u9a91\u58eb",
        "ccfLevel": 0,
        "title": "[\u9898\u89e3]P2176 \u8def\u969cRoadblock"
    },
    {
        "content": "#### \u778e\u626f\u4e24\u53e5\n\n\u8fd9\u662f\u4e00\u9053\u6700\u77ed\u8def\u9898\u76ee\uff0c\u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u505a\u8fc7\u739b\u4e3d\u5361\u8fd9\u9053\u9898\u76ee\uff0c\u5982\u679c\u6ca1\u505a\uff0c\u5728\u505a\u5b8c\u8fd9\u9053\u9898\u4e4b\u540e\u53ef\u4ee5\u53bb\u62ff\u4e2a\u53cc\u500d\u7ecf\u9a8c\u54e6\n\n\u5efa\u8bae\u53bb[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/bljfy/p/9493382.html)\u9605\u8bfb\uff0c\u5c06\u4f1a\u6709\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\n\n[\u739b\u4e3d\u5361](https://www.cnblogs.com/bljfy/p/9447320.html)\u7684\u9898\u89e3\u6211\u4e5f\u5199\u4e86\uff0c\u8c22\u8c22\u5927\u5bb6\u8d4f\u8138\n\n~~\u597d\u5427\uff0c\u6211\u627f\u8ba4\u81ea\u5df1\u5c31\u662f\u6765\u9a97\u70ed\u5ea6\u7684QAQ\uff0c\u4f46\u662f\u8c01\u53eb\u5404\u4f4d\u8fd9\u4e48\u5584\u826f\u5462~~\n\n\n\n#### \u89e3\u9898\u601d\u8def\n\n\u5148\u6c42\u51fa\u4e00\u5f20\u56fe\u4e2d\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u5c06\u5176\u8bb0\u5f55\u4e0b\u6765\uff0c\u6211\u4eec\u9996\u5148\u601d\u8003\uff1a\u8981\u6709\u589e\u91cf\u7684\u524d\u63d0\u662f\u65b0\u7684\u6700\u77ed\u8def\u5f84\u6bd4\u539f\u5148\u7684\u8981\u77ed\u3002\n\n\u90a3\u5c31\u597d\u529e\u4e86\uff0c\u6211\u4eec\u679a\u4e3e\u5c06\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u7ffb\u500d\uff0c\u518d\u8dd1\u6700\u77ed\u8def\u3002\u8fd9\u6837\u7684\u51fa\u6765\u7684\u8def\u5f84\u53bb\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u5230\u6700\u540e\u51cf\u53bb\u4e00\u5f00\u59cb\u7684\u6700\u77ed\u8def\u5f84\uff0c\u8fd9\u5c31\u662f\u7b54\u6848\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff0c\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u5bf9\u4e0d\u5728\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u8fb9\u8fdb\u884c\u7ffb\u500d\u7684\u64cd\u4f5c\uff0c\u90a3\u6700\u77ed\u8def\u5f84\u80af\u5b9a\u6ca1\u53d8\uff0c\u8fd8\u662f\u90a3\u6837\uff0c\u6240\u4ee5\u53ea\u80fd\u6539\u53d8\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u8fb9\u3002\n\n\n#### \u9644\u4e0a\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef pair<int, int> P;\nconst int maxnode = 103, maxedge = 10003, INF = 1234567890;\npriority_queue<P, vector<P>, greater<P> > Q;\nint n, m, fir[maxnode], nxt[maxedge], cnt, pre[maxnode], Ans;\nint u[maxedge], v[maxedge], w[maxedge], dis[maxnode], bef;\nbool cut[maxnode][maxnode], flag;\ninline void addedge(int x, int y, int z) {\n\tnxt[++cnt] = fir[x];\n\tfir[x] = cnt;\n\tu[cnt] = x, v[cnt] = y, w[cnt] = z;\n}\ninline void Dijkstra() {\n\tQ.push(P(0, 1));\n\tfill(dis+1, dis+1+n, INF);\n\tdis[1] = 0;\n\tP x;\n\tint k;\n\twhile (!Q.empty()) {\n\t\tx = Q.top();\n\t\tQ.pop();\n\t\tif(x.first > dis[x.second]) continue;\n\t\tk = fir[x.second];\n\t\twhile (k != -1) {\n\t\t\tif(cut[u[k]][v[k]]) {\n\t\t\t\tif(dis[v[k]] > dis[u[k]] + w[k] + w[k]) {\n\t\t\t\t\tdis[v[k]] = dis[u[k]] + w[k] + w[k];\n\t\t\t\t\tQ.push(P(dis[v[k]], v[k]));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(dis[v[k]] > dis[u[k]] + w[k]) {\n\t\t\t\tdis[v[k]] = dis[u[k]] + w[k];\n\t\t\t\tif(!flag) pre[v[k]] = u[k];\n\t\t\t\tQ.push(P(dis[v[k]], v[k]));\n\t\t\t}\n\t\t\tk = nxt[k];\n\t\t}\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tint x, y, z;\n\tmemset(fir, -1, sizeof(fir));\n\tfor(int i=1; i<=m; i++) {\n\t\tscanf(\"%d%d%d\", &x, &y, &z);\n\t\taddedge(x, y, z);\n\t\taddedge(y, x, z);\n\t}\n\tflag = false;\n\tDijkstra();\n\tflag = true;\n\tbef = dis[n];\n\tfor(int i=n; i!=1; i=pre[i]) {\n\t\tcut[i][pre[i]] = 1;\n\t\tcut[pre[i]][i] = 1;\n\t\tDijkstra();\n\t\tcut[i][pre[i]] = 0;\n\t\tcut[pre[i]][i] = 0;\n\t\tAns = max(Ans, dis[n]);\n\t}\n\tprintf(\"%d\", Ans-bef);\n}\n\n```\n",
        "postTime": 1534489840,
        "uid": 60941,
        "name": "\u5954\u6ce2\u513f\u9738",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8fb9\u6570\u8fdc\u5927\u4e8e\u70b9\u6570\uff0c~~\u663e\u7136\uff0c~~\u4e0d\u7ba1\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(VE)\u7684Ford\uff0cO(KE)\u7684SPFA\uff08K\u4e3a\u8fdb\u961f\u6b21\u6570\uff0c\u4e00\u822c\u6765\u8bf4K\u662f\u5e38\u6570\uff0c\u4f46\u4e0d\u6392\u9664\u88ab\u6545\u610f\u5361\uff09\uff0c\u5728\u8fb9\u6570\u5927\u4e8e\u70b9\u6570\u65f6\uff0cdijkstra\u7684\u6548\u7387\u66f4\u80dc\u4e00\u7b79\uff08\u6709\u8d1f\u7684\u8fb9\u6743\u4e0d\u80fd\u7528dijkstra\uff09\u3002\u53e6\u5916\u8fd9\u9053\u9898\u7684\u8fb9\u6743\u52a0\u500d\u4e0d\u9700\u5bf9\u6bcf\u8fb9\u8fdb\u884c\u679a\u4e3e\uff0c\u53ea\u9700\u5bf9\u672a\u52a0\u500d\u524d\u7684\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u52a0\u500d\uff0c\u56e0\u4e3a\u4f60\u5bf9\u975e\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u52a0\u500d\uff0c\u518d\u8d70\u8fd8\u662f\u6700\u77ed\u8def\u3002\nC++\u4ee3\u7801\uff1a\n ```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n,m,a[105][105],pre[105],t,dis[105],ans1,ans2;\nbool b[105];\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        a[x][y]=z;//\u65e0\u5411\u56fe\n        a[y][x]=z;//x\u5230y\uff0cy\u5230x\uff0c\u90fd\u8981\u5b58\n    }\n    memset(dis,127,sizeof(dis));//dijkstra\u6a21\u7248\uff0c\u53ea\u662f\u591a\u5b58\u4e2a\u8def\u5f84\n    t=1;pre[1]=0;b[1]=1;dis[1]=0;\n    for(int i=1;i<n;i++)\n    {\n        for(int j=1;j<=n;j++)\n            if(a[t][j]>0&&dis[t]+a[t][j]<dis[j]){dis[j]=dis[t]+a[t][j];pre[j]=t;}\n        int x=0x7fffffff;\n        for(int j=1;j<=n;j++)\n            if(dis[j]<x&&!b[j]){x=dis[j];t=j;}\n        b[t]=1;\n    }\n    ans1=dis[n];\n    int p=n;\n    while(pre[p]!=0)//\u5df2\u77e5\u5faa\u73af\u6b21\u6570\u53ef\u4ee5\u4e0d\u7528dfs\n    {\n        a[p][pre[p]]*=2;\n        a[pre[p]][p]*=2;\n        memset(dis,127,sizeof(dis));\n        memset(b,0,sizeof(b));\n        t=1;b[1]=1;dis[1]=0;\n        for(int i=1;i<n;i++)\n        {\n            for(int j=1;j<=n;j++)\n                if(a[t][j]>0&&dis[t]+a[t][j]<dis[j])dis[j]=dis[t]+a[t][j];\n            int x=0x7fffffff;\n            for(int j=1;j<=n;j++)\n                if(dis[j]<x&&!b[j]){x=dis[j];t=j;}\n            b[t]=1;\n        }\n        ans2=max(ans2,dis[n]);\n        a[p][pre[p]]/=2;//\u7c7b\u4f3cdfs\u56de\u6eaf\n        a[pre[p]][p]/=2;\n        p=pre[p];\n    }\n    printf(\"%d\",ans2-ans1);\n}\n\n```",
        "postTime": 1524223574,
        "uid": 87806,
        "name": "\u5f31\u5f31\u5f31",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u4f60\u53ef\u66fe\u542c\u8fc7SPFA\u5806\u4f18\u5316\uff1f\uff1f\uff1f\n\n\u5806\u4f18\u5316\u7684spfa\u53c8\u53eb \u5141\u8bb8\u591a\u6b21\u5165\u961f\u7684dijkstra\u3002\n\n\u6ca1\u6709\u8d1f\u8fb9\u7684\u65f6\u5019\u548cdij\u4e00\u6837\uff0c\u6709\u8d1f\u6743\u8fb9\u53ef\u80fd\u4f1a\u88ab\u5361\u6210\u6307\u6570\u7ea7\u522b\u3002\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u4e5f\u662f\u5982\u6b64\uff0c\u53ea\u8981\u5c06SPFA\u4e2d\u7684\u961f\u5217\u6539\u6210\u4f18\u5148\u961f\u5217\u5373\u53efqwq\n\n\u653e\u4ee3\u7801qwq\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <cstring>\nusing namespace std;\nlong long n,m,dis[100005],head[100005],tot=1;//\u8fd9\u91cctot\u5f00\u59cb\u81ea\u5df1\u8bbe\u4e3a0\uff0c\u540e\u6765wa\u4e86\u4e00\u4e2a\u70b9qwq\u3002\nlong long ans,p[100005],f[100005],t[100005],k,sum;\nbool vis[100005];\nstruct node\n{\n\tint start,to,val;\n}edge[100005];\nstruct cmp\n{\n    bool operator()(int a,int b)\n    {\n        return dis[a]>dis[b];\n    }\n};\npriority_queue<int,vector<int>,cmp> q;//\u5efa\u5806\nvoid add(int u,int v,int w)\n{\n\tedge[++tot].start=v;\n\tedge[tot].val=w;\n\tedge[tot].to=head[u];\n\thead[u]=tot;\n}\nvoid spfa()\n{\n\tmemset(dis,0x7f,sizeof(dis));\n\tdis[1]=0;\n\tq.push(1);\n\tvis[1]=true;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top();//\u8fd9\u91cc\u4e0d\u662fq.front()\uff01\n\t\tq.pop();\n\t\tvis[u]=false;\n\t\tfor(int i=head[u];i;i=edge[i].to)\n\t\t{\n\t\t\tint v=edge[i].start;\n\t\t\tif(dis[v]>dis[u]+edge[i].val)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+edge[i].val;\n\t\t\t\tp[v]=i;\n\t\t\t\tf[v]=u;\n\t\t\t\tif(!vis[v])\n\t\t\t\t{\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\nint main()\n{\n\tint n,m;\n\tcin>>n>>m;\n\t\n\tfor(int i=1;i<=m;i++)\n\t{\n\t    int x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tspfa();\n\tans=dis[n];\n\tint x=n;\n\twhile(x!=1)\n\t{\n\t\tt[++k]=p[x];\n\t\tx=f[x];\n\t}\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tedge[t[i]].val*=2;\n\t\tedge[t[i]^1].val*=2;\n\t\tspfa();\n\t\tsum=max(sum,dis[n]);\n\t\tedge[t[i]].val/=2;\n\t\tedge[t[i]^1].val/=2;\n\t}//\u539f\u5148\u8fd9\u91cc\u5199\u7684\u592a\u4e11\uff0c\u53c2\u8003\u4e86\u5927\u4f6c\u7684\u6539\u6210\u8fd9\u6837qwq\n\tcout<<sum-ans<<endl;\n\treturn 0;\n}\n\n\n```\n\u5f3a\u70c8\u63a8\u8350\u5806\u4f18\u5316spfa qwq\u3002\u3002\u3002\n\u6240\u4ee5\uff0cspfa\u8fd8\u6ca1\u5f7b\u5e95\u6b7bqwq\uff08\u867d\u8bf4\u8fd9\u662f\u62ab\u7740spfa\u76ae\u5b50\u7684dijkstra\uff09",
        "postTime": 1565159493,
        "uid": 136780,
        "name": "starwolfy_rika",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u6211\u89c9\u5f97\u6211\u8fd9\u662f\u6700\u66b4\u529b\u7684\u65b9\u6cd523333\n\nAC\u7ed3\u679c\uff1a[https://www.luogu.org/recordnew/show/17062771](https://www.luogu.org/recordnew/show/17062771)\n\n\u89e3\u91ca\u5728\u6ce8\u91ca\u4e0a\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,a[101][101],b[101][101],ago,maxn,dis[101],pre[101];\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++) \n\t{\n\t\tfor(int o=1;o<=n;o++) \n\t\t{\n\t\t\ta[i][o]=b[i][o]=23333333;//\u521d\u59cb\u5316\u4e00\u4e2a\u5f88\u5927\u7684\u6570 \n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++) \n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\ta[x][y]=z;//\u65e0\u5411\u56fe \n\t\ta[y][x]=z;\n\t}\n\t\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tdis[i]=23333333;\n\t\tpre[i]=0;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint minn=23333333,mn;\n\t\tfor(int o=1;o<=n;o++)\n\t\t{\n\t\t\tif(dis[o]<minn&&pre[o]==0)\n\t\t\t{\n\t\t\t\tminn=dis[o];\n\t\t\t\tmn=o;\n\t\t\t}\n\t\t}\n\t\tpre[mn]=1;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(dis[mn]+a[mn][i]<dis[i])\n\t\t\t{\n\t\t\t\tdis[i]=dis[mn]+a[mn][i];\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\tdijkstra\n\t*/\n\t\n\tago=dis[n];\n\t//\u8bb0\u5f55\u7ed3\u679c\n\t \n\tfor(int q=1;q<=n;q++) \n\t{\n\t\tfor(int p=1;p<=n;p++) \n\t\t{\n\t\t\tif(a[q][p]==0) \n\t\t\t{\n\t\t\t\tcontinue;//\u6ca1\u6709\u8def\u5c31\u8df3\u51fa \n\t\t\t}\n\t\t\t\n\t\t\ta[q][p]=a[q][p]*2;\n\t\t\t\n\t\t\tfor(int i=1;i<=n;i++) \n\t\t\t{\n\t\t\t\tdis[i]=23333333;\n\t\t\t\tpre[i]=0;\n\t\t\t}\n\t\t\tdis[1]=0;\n\t\t\tfor(int i=1;i<=n;i++) \n\t\t\t{\n\t\t\t\tint minn=23333333,mn;\n\t\t\t\tfor(int o=1;o<=n;o++) \n\t\t\t\t{\n\t\t\t\t\tif(dis[o]<minn&&pre[o]==0) \n\t\t\t\t\t{\n\t\t\t\t\t\tminn=dis[o];\n\t\t\t\t\t\tmn=o;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpre[mn]=1;\n\t\t\t\tfor(int i=1;i<=n;i++) \n\t\t\t\t{\n\t\t\t\t\tif(dis[mn]+a[mn][i]<dis[i]) \n\t\t\t\t\t{\n\t\t\t\t\t\tdis[i]=dis[mn]+a[mn][i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//dijkstra\n\t\t\tmaxn=max(maxn,dis[n]);\n\t\t\t//\u7d2f\u52a0\u6700\u5927\u503c \n\t\t\t\n\t\t\ta[q][p]=a[q][p]/2;//\u8fd4\u56de \n\t\t}\n\t}\n\tcout<<maxn-ago;//\u6700\u5927\u589e\u91cf \n}\n```\n",
        "postTime": 1552179702,
        "uid": 104319,
        "name": "Why_not_use_longlong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "### Vector\u5b58\u56fe+Dijkstra\u6700\u77ed\u8def\n\n\u7ffb\u4e86\u7ffb\u9898\u89e3\uff0c\u8c8c\u4f3c\u6ca1\u6709\u7528vector\u5b58\u56fe\u7684\uff0c\u65e2\u7136\u8fd9\u6837\u90a3\u672c\u849f\u84bb\u5c31\u8d34\u4e00\u4e2avector\u7684\u9898\u89e3\u3002\n\n\u9898\u76ee\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u5148\u8dd1\u4e00\u904d\u6b63\u5e38\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u679a\u4e3e\u5728\u8fd9\u6761\u6700\u77ed\u8def\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5c06\u5176\u957f\u5ea6\u7ffb\u500d\uff0c\u518d\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u8f93\u51fa\u65b0\u7684\u6700\u77ed\u8def\u51cf\u53bb\u65e7\u7684\u6700\u77ed\u8def\u4e4b\u540e\u7684\u6700\u5927\u503c\u3002\n\n\n#### \u672c\u9898\u5173\u952e\u5c31\u662f\u5982\u4f55\u8bb0\u5f55\u539f\u5148\u7684\u6700\u77ed\u8def\uff1a\n\u5728Dijkstra\u66f4\u65b0\u8ddd\u79bbd\u6570\u7ec4\u65f6\u989d\u5916\u8bb0\u5f55\u524d\u9a71\u8282\u70b9\uff0c\u5373\u8bb0\u5f55d[i]\u7684\u4e0a\u4e00\u6b65d[j]\uff0c\u672c\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u5b9e\u73b0\u3002\n\n\u4ee3\u7801\u5757\uff1a\n\n\n```cpp\n//\u679a\u4e3e\u4e0ex\u70b9\u76f8\u8fde\u7684\u6bcf\u4e00\u6761\u8fb9\u3002\nfor(register int i=0;i<v[x].size();i++){\n// val\u662f\u8def\u5f84\u957f\uff0cfrom\u662f\u524d\u4e00\u4e2a\u8282\u70b9\u3002\n       if(d[v[x][i].to].val>d[x].val+v[x][i].val){\n           d[v[x][i].to].val=d[x].val+v[x][i].val;\n           d[v[x][i].to].from=x;\n           q.push(make_pair(d[v[x][i].to].val,v[x][i].to));\n           //\u4f18\u5148\u961f\u5217\u4f18\u5316\n       }\n}\n```\n\n\u7531\u4e8ed\u6570\u7ec4\u5b58\u7684\u662f1\u53f7\u70b9\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff0c\u800c\u6211\u4eec\u9700\u8981\u7684\u6709\u6548\u8def\u5f84\u53ea\u662f\u4ece1\u5230n\u7684\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u5982\u679c\u5c06\u8def\u5f84\u8bb0\u5f55\u5b8c\u6bd5\u540e\u5c06\u8def\u5f84\u63d0\u53d6\u51fa\u6765\uff0c\u540e\u9762\u5c06\u8def\u5f84\u7ffb\u500d\u4f1a\u76f8\u5bf9\u66f4\u5bb9\u6613\u5b9e\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u9012\u5f52\u4ecen\u70b9\u5012\u7740\u9000\u56de\u6765\uff0c\u5c06\u6709\u6548\u8def\u5f84\u5355\u72ec\u4fdd\u5b58\u51fa\u6765\u3002\n\n```cpp\ninline void Return(int xx){\n    if(d[xx].from==0)return;//\u9000\u5230\u4e86\u8d77\u70b9\u5219\u9000\u51fa\uff0c\u8d77\u70b9\u4e0d\u9700\u8bb0\u5f55\n    Return(d[xx].from);     //\u672a\u5230\u8d77\u70b9\u5219\u518d\u5f80\u524d\u9000\u4e00\u6b65\n    Road_Recorder[++h]=xx;  //\u5c06\u975e\u8d77\u70b9\u8def\u5f84\u8bb0\u5f55\n}\n//\u6700\u540e\u4fdd\u5b58\u51fa\u6765\u7684\u8def\u5f84\u5373\u4e3a\n//1->Road_Recorder[1]->Road_Recorder[2]->\u2026\u2026->n\n```\n\n#### Vector\u64cd\u4f5c\u6838\u5fc3\uff1a\u5c06\u8def\u5f84\u957f\u5ea6\u7ffb\u500d\n\n\u4f7f\u7528vector\u5b58\u56fe\u65f6\u6539\u53d8\u8def\u5f84\u957f\u4e00\u822c\u7528\u679a\u4e3e\u65b9\u5f0f\u5b9e\u73b0\u3002\u82e5\u5c06x\u70b9\u4e0ey\u70b9\u7684\u8def\u5f84\u957f\u7ffb\u500d\uff0c\u6211\u4eec\u9700\u8981\u679a\u4e3e\u4e0ex\u76f8\u8fde\u7684\u6240\u6709\u8fb9\uff0c\u76f4\u81f3\u627e\u5230y\u70b9\uff0c\u5c06\u6b64\u8fb9\u6539\u53d8\u3002\u7531\u4e8e\u662f\u53cc\u5411\u56fe\uff0c\u6211\u4eec\u9700\u8981\u518d\u91cd\u590d\u6b64\u64cd\u4f5c\u66f4\u6539y\u4e0ex\u76f8\u8fde\u7684\u8fb9\u3002\u7531\u4e8e\u679a\u4e3e\u5bfc\u81f4\u672c\u6b65\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u786e\u5b9a\u3002\n\n\u7531\u4e8e\u6211\u4eec\u8fd8\u8981\u518d\u6539\u5176\u4ed6\u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u6539\u5b8c\u5f53\u524d\u8fb9\u5e76\u8bb0\u5f55\u7ed3\u679c\u4e4b\u540e\u8fd8\u9700\u5c06\u5176\u8fd8\u539f\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4fee\u6539\u65f6\u76f4\u63a5\u8bb0\u5f55\u4e0b\u6b64\u8fb9\u5728vector\u4e2d\u7684\u4f4d\u7f6e\uff0c$O(1)$\u8fd8\u539f\u3002\n\n```cpp\n//last\u4e3a\u8d77\u70b9\uff0cRoad_Recorder[i]\u4e3a\u76ee\u6807\u70b9\nfor(register int j=0;j<v[last].size();j++){     //\u679a\u4e3e\u6240\u6709\u8fb9\n            if(v[last][j].to==Road_Recorder[i]){//\u627e\u5230\u4e86\u76ee\u6807\u8fb9\n                v[last][j].val<<=1;             //\u66f4\u6539\n                change1=j;                      //\u8bb0\u5f55\u4f4d\u7f6e\n                break;\n            }\n}\n//\u91cd\u590d\u8fdb\u884c\uff0c\u5c06\u8d77\u70b9\u4e0e\u76ee\u6807\u70b9\u4ea4\u6362\nfor(register int j=0;j<v[Road_Recorder[i]].size();j++){\n            if(v[Road_Recorder[i]][j].to==last){\n                v[Road_Recorder[i]][j].val<<=1;\n                change2=j;\n                break;\n            }\n}\n```\n#### \u8def\u5f84\u7684\u8fd8\u539f\n```cpp\nv[last][change1].val>>=1;\nv[Road_Recorder[i]][change2].val>>=1;\n```\n\n#### \u6700\u540e\u8d34\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;\nstruct node{\n    int to,val;\n}add;\nvector<node>v[101];\nstruct Node{\n    int from,to,val;\n}d[101];\nbool f[101];\ninline void ADD(int x,int y,int z){\n    add.to=y;\n    add.val=z;\n    v[x].push_back(add);\n}\nint m,n,x,y,z,h,ans,change1,change2,dd[101],Road_Recorder[101],last=1;\ninline void Return(int xx){\n    if(d[xx].from==0)return;\n    Return(d[xx].from);\n    Road_Recorder[++h]=xx;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(register int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&x,&y,&z);\n        ADD(x,y,z);\n        ADD(y,x,z);\n        //\u5efa\u56fe\n    }\n    /* \u9996\u5148\u8dd1\u4e00\u8fb9Dij\uff0c\u7b97\u51fa\u539f\u59cb\u6700\u77ed\u8def \u2193*/\n    memset(d,0x7f,sizeof(d));\n    d[1].val=d[1].from=0;\n    q.push(make_pair(0,1));\n    while(!q.empty()){\n        x=q.top().second;\n        q.pop();\n        if(f[x])continue;\n        f[x]=1;\n        for(register int i=0;i<v[x].size();i++){\n            if(d[v[x][i].to].val>d[x].val+v[x][i].val){\n                d[v[x][i].to].val=d[x].val+v[x][i].val;\n                d[v[x][i].to].from=x;\n                q.push(make_pair(d[v[x][i].to].val,v[x][i].to));\n            }\n        }\n    }\n    Return(n);//\u63d0\u53d6\u8bb0\u5f55\u7684\u8def\u5f84\n    for(register int i=1;i<=h;i++){//\u679a\u4e3e\u6539\u53d8\u7684\u8def\u5f84\n        for(register int j=0;j<v[last].size();j++){//\u66f4\u6539\u957f\u5ea6\n            if(v[last][j].to==Road_Recorder[i]){\n                v[last][j].val<<=1;\n                change1=j;\n                break;\n            }\n        }\n        for(register int j=0;j<v[Road_Recorder[i]].size();j++){\n            if(v[Road_Recorder[i]][j].to==last){\n                v[Road_Recorder[i]][j].val<<=1;\n                change2=j;\n                break;\n            }\n        }\n        /*\u7b97\u51fa\u65b0\u7684\u6700\u77ed\u8def\u2193*/\n        memset(dd,0x7f,sizeof(dd));\n        memset(f,0,sizeof(f));\n        dd[1]=0;\n        q.push(make_pair(0,1));\n        while(!q.empty()){\n            x=q.top().second;\n            q.pop();\n            if(f[x])continue;\n            f[x]=1;\n            for(register int j=0;j<v[x].size();j++){\n                if(dd[v[x][j].to]>dd[x]+v[x][j].val){\n                    dd[v[x][j].to]=dd[x]+v[x][j].val;\n                    q.push(make_pair(dd[v[x][j].to],v[x][j].to));\n                }\n            }\n        }\n        if(dd[n]-d[n].val>ans)ans=dd[n]-d[n].val;//\u6bd4\u8f83\u7b54\u6848\n        v[last][change1].val>>=1;\n        v[Road_Recorder[i]][change2].val>>=1;//\u8def\u5f84\u8fd8\u539f\n        last=Road_Recorder[i];//\u672c\u6b21\u7684\u76ee\u6807\u70b9\u4f1a\u6210\u4e3a\u4e0b\u6b21\u7684\u8d77\u70b9\n        //last\u521d\u503c\u4e3a1\n    }\n    printf(\"%d\",ans);\n}\n```\n\n\u5982\u4e0a\u6587\u6240\u8bf4\uff0c\u7531\u4e8e\u679a\u4e3e\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u786e\u5b9a\uff0c\u7cbe\u5fc3\u9020\u6570\u636e\u7684\u8bdd\u53ef\u80fd\u4f1a\u88ab\u5361\u7684\u6162\u4e00\u4e9b\uff0c**~~\u4f46\u662f\u80af\u5b9a\u4e0d\u4f1aTLE\u5427\u2026\u2026\uff08\u5f31\u5f31\u5730\uff09~~**\u3002\n\nLuogu P1186 \u739b\u4e3d\u5361\u9898\u76ee\u76f8\u4f3c\uff0c\u6570\u636e\u8303\u56f4n<=1000\uff0c[\u6700\u6162\u7684\u70b9304ms](https://www.luogu.org/recordnew/show/16962378)\uff0c~~\u771f\u7684\u7b97\u5f88\u5feb\u4e86~~\u3002\u5e73\u5747\u590d\u6742\u5ea6\u8c8c\u4f3c$O(n^2logn)$\uff0c~~\u53cd\u6b63\u4e0d\u4f1a\u6709\u4eba\u6545\u610f\u51fa\u6d4b\u8bd5\u70b9\u5361\u8fd9\u79cd\u65b9\u6cd5\u3002~~\n\n**\u6b22\u8fce\u5404\u4f4d\u5de8\u4f6c\u63d0\u51fa\u5efa\u8bae\u548c\u6307\u6559\u6700\u540e\u8c22\u8c22\u5927\u5bb6\u80fd\u591f\u5fcd\u7740\u5982\u6b64\u5570\u55e6\u7684\u9898\u89e3\u770b\u5230\u6700\u540e\u3002**\n\n**~~\uff08\u9003\u2026\u2026**~~",
        "postTime": 1551940386,
        "uid": 107669,
        "name": "TinyKiecoo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u5148\u8bb2\u4e00\u4e0b\u6b21\u77ed\u8def\u7684\u505a\u6cd5\uff0c~~\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48~~\uff01:\n\n\u4f7f\u7528 _Dijkstra/Spfa_ \u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u5728\u677e\u5f1b\u65f6\u8bb0\u5f55\u6700\u77ed\u8def\u7684\u8def\u5f84\n\n\u4ee5SPFA\u4e3a\u4f8b\uff1a\n```cpp\nif(dis[u]+w<dis[v]){\n\tpre[v]=u;\n\tdis[v]=dis[u]+w;\n\tq.push(v);\n}\n//\u540c\u7406\uff0cDijkstra\u7684\u8bdd\u53ea\u9700\u8981\u5c06q.push(v)\u6539\u6210q.push(make_pair(-dis[v],v))\u5373\u53ef\n```\nper[i]\u6570\u7ec4\u8868\u793a\u6700\u77ed\u8def\u4e0a\u7f16\u53f7\u4e3ai\u7684\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\n\n\u6b64\u65f6\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u6570\u4e3am\n\n\u5faa\u73afm\u6b21\uff0c\u5faa\u73af\u8fd0\u7528\u8fed\u4ee3\u7684\u601d\u60f3\uff0c\u6bcf\u6b21\u5220\u9664\u7b2ci\u6761\u8fb9\u540e\u8dd1\u6700\u77ed\u8def\uff0c\u8dd1\u5b8c\u91cd\u65b0\u8fde\u63a5\u7b2ci\u6761\u8fb9\n\n\u7531\u4e8e\u5220\u8fb9\u64cd\u4f5c\u7684\u7279\u6b8a\u6027\uff0c\u6545\u65e0\u6cd5\u4f7f\u7528vector\u90bb\u63a5\u8868\u5b58\u8fb9\uff0c\u4f46\u94fe\u5f0f\u524d\u5411\u661f\u548c\u90bb\u63a5\u77e9\u9635\u8fd8\u7cfb\u9614\u4ee5\u6ef4\n\n\u4ee5\u90bb\u63a5\u77e9\u9635\u4e3a\u4f8b\uff1a\n```cpp\nfor(int i=n;pre[i];i=pre[i]){\n\tint tmp=mat[i][pre[i]];\n\tmat[i][pre[i]]=mat[pre[i]][i]=INF;//\u6b64\u5904\u4e3a\u5220\u8fb9\u64cd\u4f5c\n\t//\u521d\u59cb\u5316dis\u6570\u7ec4\n\t//\u6267\u884c\u6700\u77ed\u8def\n\tans=min(ans,dis[n]);\n\tmat[i][pre[i]]=mat[pre[i]][i]=tmp;//\u6b64\u5904\u6062\u590d\u8fde\u901a\n}\n```\n _ans_ \u5373\u4e3a\u6b21\u77ed\u8def\u8fb9\u6743\u4e4b\u548c\n \n\n\n------------\n~~\u534e\u4e3d\u7684\u5206\u5272\u7ebf~~\n\n\u56de\u5230\u672c\u9898\uff0c\u4ed4\u7ec6\u601d\u8003\u4fbf\u4e0d\u96be\u53d1\u73b0\uff1a**\u53ea\u9700\u8981\u5c06\u6b21\u77ed\u8def\u7684\u5220\u8fb9\u64cd\u4f5c\u6539\u4e3a\u8fb9\u6743\u4e58\u4ee52\uff0c _ans_ \u6539\u4e3a\u53d6\u6700\u5927\u503c\u5e76\u4e0e\u6700\u77ed\u8def\u5f84\u76f8\u51cf\u5373\u53ef\uff01**\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#define INF 0x7fffffff\n#define BUFF_SIZE 1<<15\n#define get_ch() (fs==ft&&(ft=(fs=read_buf)+fread(read_buf,1,BUFF_SIZE,stdin),fs==ft))?0:*fs++\n#define min_tree(a,b) a.val<b.val?a:b\n#define min(a,b) a<b?a:b\n#define max(a,b) a>b?a:b\nusing namespace std;\nnamespace readln{\n    char read_buf[BUFF_SIZE],*fs,*ft;\n    template<typename _Tp>\n    inline void scanf_(_Tp &tmp){\n        bool flag=false;\n        char ch=get_ch();\n        tmp=0;\n        while(!isdigit(ch)){\n            flag|=ch=='-';\n            ch=get_ch();\n        }\n        while(isdigit(ch)){\n            tmp=(tmp<<3)+(tmp<<1)+(ch^48);\n            ch=get_ch();\n        }\n        tmp=flag?-tmp:tmp;\n    }\n}using namespace readln;\ntemplate<typename _Tp,typename... Args>\ninline void scanf_(_Tp& t,Args&... args){\n    scanf_(t);\n    scanf_(args...);\n}\nstruct Node{\n    int ind,val;\n}tree[131072];\nint n,m,cnt,bit,dis[256],pre[65536],mat[256][256],ans,min_dis;\nbool vis[256];\ninline void build(){\n\tmemset(vis,false,sizeof(vis));\n    for(int i=1;i<=n;++i){\n        dis[i]=INF;\n    }\n    for(bit=1;bit<=n+1;bit<<=1);\n    for(int i=bit+1;i<=bit+n;++i){\n        tree[i].ind=i-bit;\n    }\n    for(int i=bit<<1;i>=1;--i){\n        tree[i].val=INF;\n    }\n}\ninline void update(int ind,int val){\n    tree[bit+ind].val=val;\n    for(int i=(bit+ind)>>1;i;i>>=1){\n        tree[i]=min_tree(tree[i<<1],tree[i<<1|1]);\n    }\n}\ninline void Dijkstra(){\n    dis[1]=0;\n    update(1,0);\n    while(tree[1].val<INF){\n        int u=tree[1].ind;\n        vis[u]=true;\n        update(u,INF);\n        for(int v=1;v<=n;++v){\n            if(mat[u][v]==INF){\n                continue;\n            }\n            int w=mat[u][v];\n            if(dis[u]+w<dis[v]&&!vis[v]){\n                dis[v]=dis[u]+w;\n                update(v,dis[v]);\n            }\n        }\n    }\n}\nint main(){\n    scanf_(n,m);\n    for(int i=0;i<=n;++i){\n        for(int j=0;j<=n;++j){\n            mat[i][j]=INF;\n        }\n    }\n    build();\n    for(int i=1;i<=m;++i){\n        int u,v,w;\n        scanf_(u,v,w);\n        mat[u][v]=min(w,mat[u][v]);\n        mat[v][u]=min(w,mat[v][u]);\n    }\n    dis[1]=0;\n    update(1,0);\n    while(tree[1].val<INF){\n        int u=tree[1].ind;\n        vis[u]=true;\n        update(u,INF);\n        for(int v=1;v<=n;++v){\n            if(mat[u][v]==INF){\n                continue;\n            }\n            int w=mat[u][v];\n            if(dis[u]+w<dis[v]&&!vis[v]){\n                pre[v]=u;\n                dis[v]=dis[u]+w;\n                update(v,dis[v]);\n            }\n        }\n    }\n    min_dis=dis[n];\n    for(int i=n;pre[i];i=pre[i]){//\u8fd9\u91cc\u624d\u662f\u91cd\u70b9\n        int tmp=mat[i][pre[i]];\n        build();\n        mat[i][pre[i]]<<=1;\n        mat[pre[i]][i]<<=1;\n        Dijkstra();\n        ans=max(ans,dis[n]);\n        mat[i][pre[i]]=mat[pre[i]][i]=tmp;\n    }\n    printf(\"%d\",ans-min_dis);\n    return 0;\n}\n```\n _~~\u5199\u5f97\u5f88\u5197\u957f\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u662f\u2014\u2014\u7384\u5b66\u5feb\u8bfb\u548c\u4f18\u5316\u8fea\u6770\u7684zkw~~_ \n \n**\u5b9e\u9645\u4e0a\u6211\u8fd8\u662f\u8ba4\u4e3a\u6211\u7684\u7801\u98ce\u662f\u5b8c\u7f8e\u6ef4**",
        "postTime": 1552049283,
        "uid": 74934,
        "name": "KenLi",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053\u6bd4\u8f83\u6b63\u5e38\u7684\u6700\u77ed\u8def\u5f84\u9898\u3002\n\n\u6700\u77ed\u8def\u5f84\u4e2d\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u7b97\u6cd5\u6709dijstra\u548cspfa\n\n\u5176\u4e2ddijstra\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u662f\u7a33\u5b9a\u7684\u7b97\u6cd5\n\nspfa\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(k\\*E)(E\u662f\u8fb9\u6570\uff0ck\u662f\u5e38\u6570\uff0c\u4e00\u822c<10)\uff0c\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u662f\u4e0d\u7a33\u5b9a\u7684\u7b97\u6cd5\uff0c\u53ef\u80fd\u4f1a\u88ab\u6570\u636e\u5361\uff08\u8fd9\u91cc\u597d\u50cf\u6709\u4e00\u4e2a\u70b9\u5361spfa\uff09\n\n\u6240\u4ee5\uff0c\u8fd9\u91cc\u5c31\u8bb2\u4e00\u4e0bdijstra\u7684\u89e3\u6cd5\n\n\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u5176\u5b9e\u5f88\u66b4\u529b\uff1a\n\n1. \u6c42\u51fa\u5728\u6dfb\u52a0\u7a3b\u8349\u5806\u524d\u7684\u6700\u77ed\u8def\uff0c\u5e76\u8bb0\u5f55\n\n2. \u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u653e\u4e0a\u7a3b\u8349\u5806\uff0c\u6c42\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u6700\u540e\u6c42\u51fa\u6dfb\u52a0\u7a3b\u8349\u5806\u540e\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\n\n\u4ee3\u7801\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\nint n,m;\nint a[10010],b[10010],l[10010];        //\u6570\u7ec4\u5efa\u7acb\nint first[110],next[10010];                //\u94fe\u5f0f\u524d\u9879\u661f\u50a8\u5b58\u8fb9\nbool visited[110];                    //\u7b2ci\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\nint dis[110];                        //dis\u6570\u7ec4\u8868\u793a1\u597d\u70b9\u5230i\u7684\u6700\u77ed\u8ddd\u79bb\nint ans1,ans2=0;\nusing namespace std;\nvoid dij(){\n    int i,j,u,k;\n    dis[1]=0;\n    for(i=1;i<=n;i++){                                    \u4f9d\u6b21\u786e\u5b9an\u4e2a\u70b9\u7684\u6700\u77ed\u8def\n        u=0;\n        for(j=1;j<=n;j++){\n            if((dis[j]<dis[u])&&(!visited[j])){\n                u=j;\n            }\n        }                                    //\u627e\u5230\u5f53\u524ddis\u6700\u5c0f\u70b9u\n        k=first[u];\n        visited[u]=true;                        //\u8be5\u70b9\u6700\u77ed\u8def\u5df2\u7ecf\u786e\u5b9a\uff0c\u65e0\u9700\u518d\u8bbf\u95ee\n        while(k!=-1){\n            if(dis[b[k]]>dis[u]+l[k]){\n                dis[b[k]]=dis[u]+l[k];            //\u4f18\u5316\u76f8\u90bb\u70b9\u6700\u77ed\u8def\n            }\n            k=next[k];\n        }\n    }\n}\nint main(){\n    int i,j,u,k,cnt;\n    memset(first,-1,sizeof(first));\n    scanf(\"%d%d\",&n,&m);\n    for(i=0;i<=n;i++){\n        dis[i]=0x1fffffff;\n    }\n    for(i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&a[i],&b[i],&l[i]);\n        next[i]=first[a[i]];\n        first[a[i]]=i;\n        a[i+m]=b[i];\n        b[i+m]=a[i];\n        l[i+m]=l[i];\n        next[i+m]=first[a[i+m]];\n        first[a[i+m]]=i+m;                            //\u5b58\u8fb9\n    }\n    memset(visited,false,sizeof(visited));\n    ans1=dis[n];\n    for(cnt=1;cnt<=m;cnt++){\n        l[cnt]=l[cnt+m]=2*l[cnt];\n        for(i=0;i<=n;i++){\n            dis[i]=0x1fffffff;\n            visited[i]=false;\n        }\n        if(dis[n]>ans2){\n            ans2=dis[n];\n        }\n        l[cnt]=l[cnt+m]=l[cnt]/2;\n    }\n    printf(\"%d\\n\",ans2-ans1);\n    return 0;\n}\n```\n\u597d\u4e86\uff0c\u5c31\u662f\u8fd9\u4e48\u591a\n\n\n\n\u4e3a\u4e86\u9632\u6b62\u67d0\u4e9b\u4eba\u5077\u61d2\u76f4\u63a5ctrl+c\uff0c\u7279\u5728\u7a0b\u5e8f\u4e2d\u5220\u53bb\u51fd\u6570\u7684\u8c03\u7528\uff0c\u5171\u4e24\u6b21\uff0c\u5916\u52a0\u4e00\u6b21\u6ce8\u91ca\u524d\u672a\u52a0\"//\"\uff0c\u8bf7\u8c05\u89e3\n",
        "postTime": 1471347823,
        "uid": 21903,
        "name": "vegetabird",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "# P2176 [USACO14FEB]\u8def\u969cRoadblock\n\n[GitHub\u9898\u89e3](https://github.com/jerrykcode/luogu)\n\n[\u539f\u9898\u5730\u5740](https://www.luogu.org/problemnew/show/P2176)\n\n## \u601d\u8def\n\u90bb\u63a5\u8868\uff0c\u5806\u4f18\u5316dijkstra\n\n\u5148\u8ba1\u7b97\u4e00\u904d\u6700\u77ed\u8def\u5f84\uff0c\u8bbe\u4e3amin_dist\uff0c\u7136\u540e\u904d\u5386\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\uff0c\u5bf9\u6bcf\u4e00\u6761\u8fb9\uff0c\u5c06\u5176\u6743\u91cd\u589e\u500d\uff0c\u518d\u6b21\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\uff0c\u8bbe\u4e3atmp_dist\uff0c\u4e4b\u540e\u5c06\u6743\u91cd\u8fd8\u539f\u3002tmp_dist - min_dist\u7684\u6700\u5927\u503c\u5373\u7b54\u6848\u3002\n\n\u5177\u4f53\u89c1\u4ee3\u7801\u6ce8\u91ca\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <vector>\n#include <queue>\nusing namespace std;\n\n#define NO_VALUE -1\n\ntypedef unsigned char Vertex; //\u9876\u70b9\n\n//\u90bb\u63a5\u70b9\u7ed3\u6784\u4f53\nstruct AdjNode {\n    Vertex v; //\u90bb\u63a5\u9876\u70b9\n    int weight; //\u90bb\u63a5\u8fb9\u6743\u91cd\n    AdjNode(Vertex v, int weight) : v(v), weight(weight) {}\n};\n\n//Dijkstra\u7c7b\nclass Dijkstra {\npublic :\n    Dijkstra() : pre_memory_alloc_(false) {}\n    ~Dijkstra() { if (pre_memory_alloc_) free(pre_); }\n\n    /* \u8ba1\u7b97\u6e90(0)\u5230\u7ec8\u70b9(nv - 1)\u7684\u6700\u77ed\u8def\u5f84\uff0c\u7528p_min_dist\u6307\u9488\u4f20\u51fa\u3002nv\u4e3a\u9876\u70b9\u6570\u91cf\uff0crecord_path\u8868\u793a\u662f\u5426\u8bb0\u5f55\u8def\u5f84\u3002*/\n    bool dijkstra(vector<AdjNode> *graph, int nv, bool record_path, int *p_min_dist);\n\n    /* \u4f9d\u6b21\u5f97\u5230\u6700\u540e\u4e00\u6b21\u8c03\u7528dijkstra\u5e76\u8bb0\u5f55\u8def\u5f84\u65f6\uff0c\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u7528p_from\uff0cp_to\u6307\u9488\u4f20\u51fa\u3002\n       \u7b2c\u4e00\u6b21\u8c03\u7528\u672c\u51fd\u6570\u5f97\u5230\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u6700\u540e\u4e00\u6761\u8fb9\uff0c\u4e4b\u540e\u6bcf\u6b21\u8c03\u7528\u5f97\u5230\u4e0a\u6b21\u8c03\u7528\u7684\u524d\u4e00\u6761\u8fb9\u3002*/\n    bool getMinPath(Vertex *p_from, Vertex *p_to);\nprivate:\n    //\u4f18\u5148\u961f\u5217\u4f7f\u7528\u7684\u7ed3\u6784\u4f53\n    struct Node {\n        Vertex v;\n        int dist;\n        Node(Vertex v, int dist) : v(v), dist(dist) {}\n    };\n    struct cmp {\n        bool operator() (Node& a, Node& b) {\n            return a.dist > b.dist;\n        }\n    };\n\n    //\u7c7b\u53d8\u91cf\n    int nv_;\n    Vertex src_, des_; //nv_, src_, des_ \u5728getMinPath\u4e2d\u7528\u4e8e\u8bb0\u5f55\n\n    int *dist_;\n    bool *collected_;\n    Vertex *pre_;\n    bool pre_memory_alloc_; //pre_\u6570\u7ec4\u5206\u914d\u4e86\u5185\u5b58\u5219\u4e3atrue\n};\n\nbool Dijkstra::dijkstra(vector<AdjNode>* graph, int nv, bool record_path, int * p_min_dist) {\t\n    dist_ = new int[nv];\n    fill(dist_, dist_ + nv, NO_VALUE);\n    collected_ = new bool[nv];\n    fill(collected_, collected_ + nv, false);\n    Vertex src = 0, des = nv - 1;\n    if (record_path) { //\u9700\u8981\u8bb0\u5f55\u8def\u5f84\n        //\u66f4\u65b0nv_\uff0csrc_\uff0cdes_\n        nv_ = nv;\n        src_ = src;\n        des_ = des;\n        if (pre_memory_alloc_) free(pre_);\n        pre_ = new Vertex[nv];\n        pre_memory_alloc_ = true;\n    }\t\n    dist_[(size_t)src] = 0;\n    priority_queue<Node, vector<Node>, cmp> q;\n    q.push(Node(src, dist_[(size_t)src]));\n    while (!q.empty()) {\n        Vertex min_vertex = q.top().v;\n        q.pop();\n        if (collected_[(size_t)min_vertex]) continue;\n        collected_[(size_t)min_vertex] = true;\n        if (min_vertex == des) {\n            while (!q.empty()) q.pop();\n            break;\n        }\n        int min_dist = dist_[(size_t)min_vertex];\n        for (AdjNode adjNode : graph[min_vertex]) {\n            Vertex adj_vertex = adjNode.v;\n            int adj_weight = adjNode.weight;\n            if (!collected_[(size_t)adj_vertex]) {\n                if (min_dist + adj_weight < dist_[(size_t)adj_vertex] || dist_[(size_t)adj_vertex] == NO_VALUE) {\n                    dist_[(size_t)adj_vertex] = min_dist + adj_weight;\n                    q.push(Node(adj_vertex, dist_[(size_t)adj_vertex]));\n                    if (record_path) pre_[(size_t)adj_vertex] = min_vertex; //\u8bb0\u5f55\u8def\u5f84\n                }\n            }\n        }\n    }//while\n    bool result = collected_[(size_t)des];\n    *p_min_dist = dist_[(size_t)des];\n    free(dist_);\n    free(collected_);\n    return result;\n}\n\nbool Dijkstra::getMinPath(Vertex * p_from, Vertex * p_to) {\t\n    if (des_ == src_) return false;\n    *p_from = pre_[(size_t)des_];\n    *p_to = des_;\n    des_ = *p_from;\n    return true;\n}\n\nint main() {\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    vector<AdjNode> *graph = new vector<AdjNode>[n];\n    int a_i, b_i, l_i;\n    for (int i = 0; i < m; i++) {\n        scanf(\"%d %d %d\", &a_i, &b_i, &l_i);\n        a_i--; b_i--;\n        graph[a_i].push_back(AdjNode(b_i, l_i));\n        graph[b_i].push_back(AdjNode(a_i, l_i));\n    }\n    Dijkstra dijkstra;\n    int min_dist, tmp_dist, result = 0;\n    dijkstra.dijkstra(graph, n, true, &min_dist);\n    Vertex from, to;\t\n    while (dijkstra.getMinPath(&from, &to)) { //\u904d\u5386\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\n        auto it = graph[(size_t)from].begin();\n        for (; it != graph[(size_t)from].end(); it++)\n            if (it->v == to) {\n                it->weight *= 2; //\u589e\u500d\n                break;\n            }\n        if (dijkstra.dijkstra(graph, n, false, &tmp_dist))\n            if (tmp_dist - min_dist > result) result = tmp_dist - min_dist;\n        it->weight /= 2; //\u8fd8\u539f\n    }\n    printf(\"%d\", result);\n    for (int i = 0; i < n; i++)\n        vector<AdjNode>().swap(graph[i]);\n    return 0;\n}\n```",
        "postTime": 1554540112,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u56fe\u8bba\u9898  100\u4e2a\u70b9 5000\u6761\u8fb9 \u53ef\u4ee5\u7528\u90bb\u63a5\u77e9\u9635  floyed\u53ef\u80fd\u4f1a\u8d85\u65f6\uff08\u6ca1\u8bd5\u8fc7\uff09  \u6211\u7528\u7684\u662fdijkstra  \u505am\u6b21\u5faa\u73af \u5206\u522b\u5c06\u6bcf\u6761\u8def\\*2\uff08\u522b\u5fd8\u4e86\u5c06\u53cc\u5411\u7684\u8def\u90fd\\*2  \u800c\u4e14\u8ba1\u7b97\u540e\u8981\u5c06\u8def\u5f84\u8fd8\u539f\uff01\uff01\uff01\uff09  \u627e\u5230\u6700\u5927\u7684\u589e\u52a0\u91cf\u5373\u53ef\uff01\uff01\n\n\u4ee3\u7801\uff1a\n\n\n    \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint a[5000][5000];\nint d[5000];\nbool f[5000];\nint path[5000][5];\nvoid read()//\u8bfb\u5165\u51fd\u6570 \n{\n    scanf(\"%d%d\",&n,&m);\n    int x,y,z;\n    for (int i=1;i<=m;i++)\n    {\n        cin>>x>>y>>z;\n        a[y][x]=a[x][y]=z;//\u65e0\u5411\u56fe \n        path[i][1]=x;//\u8bb0\u5f55\u4e24\u4e2a\u8282\u70b9 \n        path[i][2]=y;\n    }\n    return;    \n}\nvoid dijkstra(int st)//dijkstra\u6807\u51c6\u7248\u5b50 \n{\n    memset(d,10,sizeof(d));\n    for (int i=1;i<=n;i++) d[i]=a[st][i];\n    memset(f,false,sizeof(f));\n    f[st]=true; d[st]=0;\n    for (int i=1;i<n;i++)\n    {\n        int minn=1000000000,k=0;\n        for (int j=1;j<=n;j++)\n        if (!f[j]&&(d[j]<minn)) minn=d[j],k=j;\n        if (k==0) return;\n        f[k]=true;\n        for (int j=1;j<=n;j++)\n        if ((!f[j]) && (d[k]+a[k][j]<d[j]))\n                d[j]=d[k]+a[k][j];\n    }\n}\nint main()\n{\n    memset(a,10,sizeof(a));\n    read();\n    int maxx=0,l,hh;\n    dijkstra(1);\n    hh=d[n];//\u627e\u5230FJ\u539f\u6765\u9700\u8981\u7684\u8def\u5f84\u957f\u5ea6 \n    for (int i=1;i<=m;i++)\n    {\n        a[path[i][1]][path[i][2]]*=2;\n        a[path[i][2]][path[i][1]]*=2;//\u5c06\u8fd9\u6761\u8def\u5b89\u653e\u4e00\u53e0\u7a3b\u8349\u5806  \u5373\u8def\u5f84\u957f\u5ea6*2  \u5343\u4e07\u4e0d\u8981\u5fd8\u4e86\u53cc\u5411\uff01\uff01\uff01 \n        dijkstra(1);//\u505a\u4e00\u904ddijkstra \n        if (abs(d[n]-hh)>maxx) maxx=abs(d[n]-hh),l=abs(d[n]-hh);//\u627e\u5230\u6700\u5927\u589e\u91cf \n        a[path[i][1]][path[i][2]]/=2;\n        a[path[i][2]][path[i][1]]/=2;\n    }\n    cout<<l;//\u7f8e\u5999\u7684\u8f93\u51fa\u65f6\u95f4 \n    return 0;\n}\n```",
        "postTime": 1505279508,
        "uid": 22670,
        "name": "\u8f6c\u8eab\u3001\u5df2\u964c\u8def",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u770b\u8d77\u6765\u597d\u591a\u4eba\u90fd\u8981\u7ed3\u6784\u4f53\u8bf6\u3002\u3002\uff08\u849f\u84bb\u4e0d\u4f1a\u7528stl\n\n\u5c31\u662f\u5148\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u663e\u7136\u53ef\u4ee5\u8bc1\u660e\u4f60\u9700\u8981\u7ffb\u500d\u7684\u8fb9\u4e00\u5b9a\u4f1a\u5728\u6700\u77ed\u8def\u4e0a\n\n\u7136\u540e\u66b4\u529b\u679a\u4e3e\u5c31\u53ef\u4ee5\u62c9\n\n\u61d2\u5f97\u5199\u524d\u5411\u661f\u7528\u4e86\u90bb\u63a5\u77e9\u9635\n\n\u6709\u53ef\u80fd\u6709\u91cd\u8fb9\u7136\u540e\u7528\u4e86\u4e24\u4e2a\u90bb\u63a5\u77e9\u9635\u3002\u3002\uff08\u6ed1\u7a3d\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u60c5\u51b5\u4e0bn^3\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,m,a[2000][2000],b[2000][2000],f[2000],ff[2000],fa[2000],ans,x,y,z;\nbool flag[2000];\nlong long dij(long long x,long long y)//\u66b4\u529b\u6c42\u5f53x\u5230y\u7684\u8fb9\u7ffb\u500d\u4e4b\u540e\u7684\u6700\u77ed\u8def\n    {\n        long long kk=a[x][y];a[x][y]=min(kk*2,b[x][y]);a[y][x]=min(kk*2,b[y][x]);\n        memset(f,10,sizeof(f));\n        memset(flag,0,sizeof(flag));\n        f[1]=0;\n        for (long long i=1;i<=n;i++)\n            {\n                long long k=0;\n                for (long long j=1;j<=n;j++)\n                    if (!flag[j]&&f[j]<f[k]) k=j;\n                flag[k]=true;\n                for (long long j=1;j<=n;j++)\n                    f[j]=min(f[j],f[k]+a[k][j]);\n            }\n        a[x][y]=kk;a[y][x]=kk;\n        return f[n];\n    }\nvoid dfs(long long x)//\u679a\u4e3e\u6700\u77ed\u8def\n    {\n        if (!fa[x])return;\n        ans=max(ans,dij(fa[x],x));\n        dfs(fa[x]);\n    }\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    memset(a,10,sizeof(a));memset(b,10,sizeof(b));\n    for (long long i=1;i<=m;i++){\n        cin>>x>>y>>z;\n        b[x][y]=min(b[x][y],max(a[x][y],z));\n        b[y][x]=min(b[y][x],max(a[y][x],z));\n        a[x][y]=min(a[x][y],z);a[y][x]=min(a[y][x],z);//b[i][j]\u4ee3\u8868\u6b21\u957f\u8fb9\n    }\n    memset(f,10,sizeof(f));\n    f[1]=0;\n    for (long long i=1;i<=n;i++)\n        {\n            long long k=0;\n            for (long long j=1;j<=n;j++)\n                if (!flag[j]&&(f[j]<f[k])) k=j;\n            fa[k]=ff[k];flag[k]=true;\n            for (long long j=1;j<=n;j++)\n                if (f[j]>f[k]+a[k][j])f[j]=f[k]+a[k][j],ff[j]=k;\n        }\n    long long lsg=f[n];dfs(n);\n    cout<<ans-lsg;\n}\n```",
        "postTime": 1498714683,
        "uid": 44165,
        "name": "Starria\u7684\u8111\u6b8b\u7c89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "## \u6c42\u8fc7\n\u672c\u849f\u84bb\u7b2c\u4e00\u7bc7\u9898\u89e3\uff08**\u6c42\u8fc7\uff01\uff01**\uff09\u2014>\u663e\u7136\u6c42\u8fc7\u662f\u91cd\u70b9\u3002  \n\u5982\u679c\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8bf7\u6307\u51fa\uff0c\u8c22\uff01\uff01\uff01\n## \u4e3b\u8981\u601d\u8def\n\uff08\u8fd8\u662f\u6bd4\u8f83\u66b4\u529b\u7684\uff09\u2014>\u56e0\u4e3a\u5bb3\u6015\u8d85\u65f6\uff0c\u7528\u7684\u5806\u4f18\u5316\uff0c\u540e\u6765\u8c8c\u4f3c\u8fd8\u633a\u5feb\u7684\u3002  \n1\u3001\u5012\u7740\u8dd1$Dijkstra$\uff0c\u8bb0\u5f55\u4ece$n$\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u3002  \n2\u3001\u6b63\u7740\u8dd1$dfs$\uff0c\u5c06\u6240\u6709\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u8bb0\u5f55\u3002  \n3\u3001\uff08\u66b4\u529b\u5f00\u59cb\uff09\u679a\u4e3e\u6bcf\u4e00\u4e2a\u8fb9\uff0c\u5c06\u5b83\u7684\u957f\u5ea6\u52a0\u500d\uff0c\u5e76\u8dd1\u4e00\u904d$Dijkstra$\uff0c\u66f4\u6539$ans$\uff0c\u6700\u540e\u5c06\u8fd9\u6761\u8fb9\u6539\u56de\u6765\uff0c\u53bb\u66f4\u6539\u4e0b\u4e00\u6761\u3002  \n4\u3001\u7ed3\u675f\u3002\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#include <cmath>\n#define ll long long\nusing namespace std;\nstruct edge {\n    int zd;//\u7ec8\u70b9 \n    int cd;//\u957f\u5ea6 \n    int xyg;//next \n} bian[200010];//\u524d\u5411\u661f\u5b58\u8fb9 \nstruct node {\n    int d,u;//\u957f\u5ea6\uff0c\u70b9 \n    bool operator<(const node &a)const {\n        return d>a.d;\n    }\n};\nint n,m,cnt=1,exmin,tt,ans;//\u8fb9\uff0c\u70b9\uff0ccnt\uff0c\u7b2c\u4e00\u904d\u7684\u6700\u77ed\u8def\uff0cdfs\u5b58\u8fb9\u7684\uff0c\u7b54\u6848 \nint first[200010],flag[1100],which[200100],dis[1100];//\u524d\u5411\u661f\uff0cDijkstra,dfs\u5b58\u8fb9\u7684\uff0c\u8ddd\u79bb \npriority_queue<node> q;\nvoid add(int qd,int zd,int cd) {\n    cnt++;//\u4ece2\u5f00\u59cb\u5b58\u8fb9\uff08\u5176\u5b9e\u4ece0\u4e5f\u53ef\u4ee5\uff0c\u8c8c\u4f3c\u4ece\u5076\u6570\u5b58\u90fd\u53ef\u4ee5\uff09 \n    bian[cnt].zd=zd;\n    bian[cnt].cd=cd;\n    bian[cnt].xyg=first[qd];\n    first[qd]=cnt;\n}\nvoid Dijkstra(int x) {//\u5806\u4f18\u5316\n    memset(dis,0x3f,sizeof(dis));\n    memset(flag,0,sizeof(flag));//flag\u4e00\u5b9a\u8981\u5f52\u96f6\uff01\uff01\n    dis[x]=0;\n    q.push(node {0,x});\n    while(!q.empty()) {\n        node fir=q.top();\n        q.pop();\n        if(flag[fir.u]) continue;\n        flag[fir.u]=1;\n        int u=fir.u;\n        for(int i=first[u]; i>1; i=bian[i].xyg) {\n            if(dis[bian[i].zd]>bian[i].cd+dis[u]) {\n                dis[bian[i].zd]=bian[i].cd+dis[u];\n                q.push(node {dis[bian[i].zd],bian[i].zd});\n            }\n        }\n    }\n}\nvoid dfs(int x,int y) {//dfs \n//\u5982\u679cn\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def+\u4ece1\u5f00\u59cb\u5230\u8fd9\u91cc\u7684\u8ddd\u79bb=\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u5728\u6700\u77ed\u8def\u4e0a \n    for(int i=first[x]; i>1; i=bian[i].xyg) { \n        int what=bian[i].zd;\n        int how=dis[what];\n        int len=y+bian[i].cd;//\u6b64\u65f6\u7684\u957f\u5ea6\u7b49\u4e8e\u73b0\u5728\u7684x\u52301\u7684\u8ddd\u79bb\u52a0\u4e0a\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\n        if(len+how==exmin) {\n            tt++;\n            which[tt]=i;//\u8bb0\u5f55\u8fb9 \n            dfs(bian[i].zd,len);\n        }\n    }\n}\nvoid change(int x) {\n    int what=which[x];\n    bian[what].cd*=2;\n    bian[what^1].cd*=2;//what^1\u5c31\u662fwhat\u5bf9\u5e94\u7684\u53cd\u8fb9\uff08\u6240\u4ee5\u8981\u4ece\u5076\u6570\u5f00\u59cb\u5b58\uff09 \n}\nvoid restore(int x) {\n    int what=which[x];\n    bian[what].cd/=2;\n    bian[what^1].cd/=2;\n}\nvoid last() {\n    for(int i=1; i<=tt; i++) {\n        change(i);\n        Dijkstra(n);\n        ans=max(ans,dis[1]-exmin);\n        restore(i);\n    }\n}\nint main() {\n    cin>>n>>m;\n    for(int i=1; i<=m; i++) {//\u5b58\u8fb9\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n        add(b,a,c);\n    }\n    Dijkstra(n);\n    exmin=dis[1];//\u8bb0\u5f55\u6700\u77ed\u8def\n    dfs(1,0);\n    last();\n    cout<<ans;\n}\n```\n",
        "postTime": 1552097731,
        "uid": 138379,
        "name": "zyc123",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "## Sol ##\n\n[blog\u98df\u7528](http://www.caolaoshi.men/index.php/archives/usaco14feb-rblock.html)\n\n\u8fea\u6770\u65af\u7279\u62c9 + $DFS$\n\n**\u5343\u4e07\u4e0d\u8981\u8fd9\u6837\u505a\uff1a**\n\u627e\u4e00\u904d\u6700\u77ed\u8def\uff0c$DFS$\u51fa\u8def\u5f84\uff0c\u540c\u65f6\u627e\u51fa\u6700\u77ed\u8def\u4e2d\u8def\u5f84\u6700\u957f\u7684\u90a3\u6761\u8fb9\uff0c\u7136\u540e\u52a0\u500d\uff0c\u518d\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u6c42\u7b54\u6848\u3002\n\n~~\u8fd9\u6837\u505a\u4f60\u5e76\u4e0d\u80fd$AC$\uff0c\u5982\u679c\u6545\u610f\u5361\u4f60\uff0c\u751a\u81f3\u4f1a\u4fdd\u9f84\u2026\u2026\uff08\u522b\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\uff09~~\n\n**\u6b63\u786e\u505a\u6cd5\u5176\u5b9e\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\uff1a**\n\n\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\uff0c$DFS$\u7ef4\u62a4\u51fa\u4ece1\u5230$n$\u8d70\u8fc7\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u52a0\u500d\uff0c\u6c42\u51fa\u4e00\u4e2a\u503c\uff0c\u53d6\u6700\u5927\u503c\u4e3a\u7b54\u6848\u3002\n\n## Code ##\n\n```\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#define INF 2147483647\nusing namespace std;\n\nstruct Node {\n\tint to , next , len;\n};\nNode e[50005];\nstruct Road {\n\tint num , len;\n\tRoad(int nn , int dd) {\n\t\tnum = nn , len = dd;\n\t}\n\tbool operator < (const Road &a) const {\n\t\treturn len > a.len;\n\t}\t\n};\nint head[255] , tot = 0;\nint n , m , sum = 0 , map[255][255];\nint dis[255] , maxx = -1 , num = 0 , res = 0 , r[255] , top = 0;\npriority_queue<Road>q; \n\nvoid add(int x , int y , int len) {\n\ttot++;\n\te[tot].to = y;\n\te[tot].next = head[x];\n\te[tot].len = len;\n\thead[x] = tot;\n}\n\nvoid dij(int s) {\n\tfor(int i=1; i<=n; i++)\n\t\tdis[i] = INF;\n\tdis[s] = 0;\n\tq.push(Road(s , 0));\n\twhile(!q.empty()) {\n\t\tRoad u = q.top();\n\t\tq.pop();\n\t\tif(u.len != dis[u.num])\n\t\t\tcontinue;\n\t\tfor(int i=head[u.num]; i; i=e[i].next)\n\t\t\tif(e[i].len + u.len < dis[e[i].to]) {\n\t\t\t\tdis[e[i].to] = e[i].len + u.len;\n\t\t\t\tq.push(Road(e[i].to , dis[e[i].to]));\n\t\t\t}\n\t}\n}\n\nint dfs(int x , int fa) {\n\tif(x == n && sum == dis[n])\n\t\treturn 1;\n\tif(sum > dis[n])\n\t\treturn 0;\n\tint temp = sum;\n\tfor(int i=head[x]; i; i=e[i].next) {\n\t\tif(e[i].to == fa)\n\t\t\tcontinue;\n\t\tsum += map[x][e[i].to];\n\t\tif(dfs(e[i].to , x)) {\n\t\t\tr[++top] = i;\n\t\t\tif(map[e[i].to][x] > maxx)\n\t\t\t\tmaxx = map[e[i].to][x];\n\t\t\treturn 1;\t\t\n\t\t}\n\t\tsum = temp;\n\t}\n\treturn 0;\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1; i<=m; i++) {\n\t\tint x , y , z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x , y , z);\n\t\tadd(y , x , z);\n\t\tmap[x][y] = map[y][x] = z;\n\t}\n\tdij(1);\n\tres = dis[n];\n\tdfs(1 , 0);\n\tfor(int i=1; i<=top; i++) {\n\t\tif(r[i] % 2 != 0)\n\t\t\te[r[i]].len = e[r[i]+1].len = 2 * e[r[i]].len;\n\t\telse\n\t\t\te[r[i]].len = e[r[i]-1].len = 2 * e[r[i]].len;\n\t\tdij(1);\n\t\tnum = max(num , dis[n] - res);\n\t\tif(r[i] % 2 != 0)\n\t\t\te[r[i]].len = e[r[i]+1].len =  e[r[i]].len / 2;\n\t\telse\n\t\t\te[r[i]].len = e[r[i]-1].len =  e[r[i]].len / 2;\n\t}\n\tprintf(\"%d\",num);\n\treturn 0;\n}\n```\n\n\n  [1]: http://usaco.org/index.php?page=viewproblem2&cpid=398\n  [2]: https://www.luogu.org/problemnew/show/P2176\n  [3]: https://www.lydsy.com/JudgeOnline/problem.php?id=3445",
        "postTime": 1534582014,
        "uid": 37427,
        "name": "\u66f9\u8001\u5e08",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "##dijkstra\u52a0\u5806\u4f18\u5316\n\n###\u8bb2\u5b9e\u8bdd\u8fd9\u9053\u9898\u7684\u6570\u636e\u771f\u5fc3\u6709\u70b9\u6c34\uff0c\u6211\u5f00\u59cb\u7406\u89e3\u9519\u4e86\u610f\u601d\uff0c\u5c31\u7528\u9996\u6b21\u6700\u77ed\u8def\u4e2d\u7684\u6700\u5927\u503c\u4f5c\u4e3a\u653e\u969c\u788d\u7684\u8def\uff0c\u5c45\u7136\u62ff\u4e8690\u5206\uff08\u6c57\uff09\u3002\n\n###\u8fd9\u9053\u9898\u5f88\u591a\u4eba\u8bf4SPFA\u4f1a\u88ab\u5361\u554a\uff08\u6ca1\u8bd5\u8fc7\uff09\uff0c\u90a3\u5c31\u7528dijkstra\u597d\u4e86\uff0c\u81f3\u5c11\u6211\u57fa\u672c\u6bcf\u4e2a\u70b9\u90fd\u662f0ms\uff0c\u57fa\u672c\u601d\u8def\u5c31\u662f\u5148\u627e\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u518d\u5c06\u6bcf\u6bb5\u8def\u5c1d\u8bd5\\*2\uff0c\u5c06\u53d8\u5316\u7684\u6700\u5927\u503c\u8f93\u51fa\u5c31\u597d\u4e86\u3002\uff08\u6211\u7528\u4e86\u6307\u9488\uff08\u4e0d\u9700\u8981\uff01\uff01\uff09\uff0c\u53ea\u662f\u60f3\u7ec3\u7ec3~\uff0c\u4e0d\u8981\u9a82\u6211\uff09\n\n##\u4ee3\u7801\u5f88\u957f\u5f88\u81ed\uff0c\u53cd\u6b63\u5927\u90e8\u5206\u4e5f\u5c31\u662f\u6a21\u677f\n\n```cpp\n#include<iostream>\n#define maxn 251\nusing namespace std;\nstruct edge{\n    int from,to,len;  //\u8bb0\u5f55\u8d77\u70b9\u662f\u4e3a\u4e86\u65b9\u4fbf\u4fee\u6539\u8def\u7684\u957f\u5ea6\n    edge *next;  //\u6211\u7528\u6307\u9488\u662f\u56e0\u4e3a\u849f\u84bb\u60f3\u987a\u4fbf\u7ec3\u4e60\u4e0b\u94fe\u8868\n};\nedge *last[maxn],*pre[maxn],*p;\nint pos[maxn],heap[maxn],dis[maxn],heap_size,n,m,maxx,q,ans;\nbool in_heap[maxn];\nvoid add_edge(int from,int to,int len){\n    edge *temp=new edge;\n    temp->from=from;\n    temp->to=to;\n    temp->len=len;\n    temp->next=last[from];\n    last[from]=temp;\n}\nvoid swapp(int i,int j){\n    int temp=heap[i];\n    heap[i]=heap[j];\n    heap[j]=temp;\n    pos[heap[i]]=i;\n    pos[heap[j]]=j;\n}\nvoid shift_up(int now){  //\u51fd\u6570\u57fa\u672c\u90fd\u662f\u52a0\u5806\u4f18\u5316\u7684\u57fa\u672c\u64cd\u4f5c\n    int next=0;\n    while(now>1){\n        next=now>>1;\n        if(dis[heap[next]]>dis[heap[now]])\n          swapp(now,next);\n        now=next;\n    }\n}\nvoid put(int s){\n    heap[++heap_size]=s;\n    pos[s]=heap_size;\n    in_heap[s]=true;\n    shift_up(heap_size);\n}\nint get(){\n    int res=heap[1],now=1,next;\n    in_heap[heap[1]]=false;\n    heap[1]=heap[heap_size--];\n    while(now*2<heap_size){\n        next=now<<1;\n        if(dis[heap[next+1]]<dis[heap[next]]&&next<heap_size)next++;\n        if(heap[now]<=heap[next])return res;\n        swapp(now,next);\n        now=next;\n    }\n    return res;\n}\nvoid dijkstra(){  //\u5199\u6210\u51fd\u6570\u65b9\u4fbf\u8c03\u7528\u5427\n    put(1);\n    dis[1]=0;\n    while(heap_size>0){\n        int top=get();  //\u4ece\u5806\u4e2d\u53d6\u51fa\u6682\u65f6\u8def\u5f84\u6700\u77ed\u7684\u70b9\n        edge *temp=last[top];\n        while(temp!=NULL){\n            if(dis[temp->to]>dis[top]+temp->len)  //\u7528\u8fd9\u4e2a\u70b9\u4fee\u6539\u4e0e\u5176\u76f8\u8fde\u7684\u70b9\n              {\n                  dis[temp->to]=dis[top]+temp->len;\n                  pre[temp->to]=temp;  //\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\n                    if(in_heap[temp->to])shift_up(pos[temp->to]);  //\u5982\u679c\u70b9\u5728\u5806\u4e2d\uff0c\u5219\u53d8\u5316\u540e\u8c03\u6574\u4f4d\u7f6e\n                    else put(temp->to);  //\u4e0d\u5728\u5806\u4e2d\u5219\u538b\u5165\n              }\n            temp=temp->next;\n        }\n    }\n}\nint main(){\n    ios::sync_with_stdio(false);  //\u5199\u8fd9\u4e2a\u662f\u6015cin\u548ccout\u592a\u6162\uff0c\u4f46\u53c8\u89c9\u5f97cin\u65b9\u4fbf\n    int i,x,y,z;\n    cin>>n>>m;\n    for(i=1;i<=m;i++)\n    {\n        cin>>x>>y>>z;\n        add_edge(x,y,z); //\u65e0\u5411\u56fe\uff0c\u8981\u653e\u4e24\u6b21\n        add_edge(y,x,z);\n    }\n    for(i=1;i<=n;i++)dis[i]=0x7fffffff/3;\n    dijkstra();  //\u6c42\u51fa\u521d\u59cb\u7684\u6700\u77ed\u8def\u5f84\n    q=dis[n];  //\u8bb0\u5f55\n    for(p=pre[n];p!=NULL;p=pre[p->from])  //\u5c1d\u8bd5\u8def\u5f84\u4e2d\u7684\u6bcf\u6bb5\u8def\n    {\n        p->len*=2;\n        for(i=1;i<=n;i++)dis[i]=0x7fffffff/3;\n        dijkstra();\n        ans=max(ans,dis[n]-q);\n        p->len/=2;  //\u5343\u4e07\u8bb0\u5f97\u8981\u8fd8\u539f\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1503153985,
        "uid": 50008,
        "name": "Blind_God",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def\n\n\u5148\u8dd1\u4e00\u904d\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u4e0d\u505c\u7684\u8dd1\u554a\u8dd1\u554a\uff0e\uff0e\uff0e\n\n\u6709\u4e00\u4e2a\u70b9\u5361\uff33\uff30\uff26\uff21\uff0c\u6069\uff0c\u7384\u5b66\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u9760\u8c31\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nint q[10000];\nint dis[105];\nint p[105];\nstruct node{\n    int to;\n    int next;\n    int m;\n}s[10005];\nint h[105];\nint ji;\nint in(int u,int v,int l){\n    ji++;\n    s[ji].to =v;\n    s[ji].next =h[u];\n    h[u]=ji;\n    s[ji].m =l;\n    ji++;\n    s[ji].to =u;\n    s[ji].next =h[v];\n    h[v]=ji;\n    s[ji].m =l;\n}\nint main(){\n    int n,m;\n    scanf(\"%d %d\",&n,&m);\n    memset(dis,127,sizeof(dis));\n    dis[1]=0;\n    int a,b,l;\n    for(int i=0;i<m;i++){\n        scanf(\"%d %d %d\",&a,&b,&l);\n        in(a,b,l);\n    }\n    int head=0,tail=0;\n    q[0]=1;\n    p[1]=1;\n    tail++;\n    while(head!=tail){\n        int u=q[head];\n        p[u]=0;\n        for(int i=h[u];i!=0;i=s[i].next ){\n            int v=s[i].to ,w=s[i].m ;\n            if(dis[v]>dis[u]+w){\n                dis[v]=dis[u]+w;\n                if(p[v]==0){\n                    p[v]=1;\n                    q[tail]=v;\n                    tail++;\n                }\n            }\n        }\n        head++;\n    }\n    int x=dis[n];\n    int mx=0;\n    if(ji>4950)ji=4950;      //\u5751\u554a\uff0c\u9632\u5361 \n    for(int t=1;t<=ji;t=t+2){\n        s[t].m *=2;\n        s[t+1].m *=2;\n        memset(dis,127,sizeof(dis));\n        dis[1]=0;\n        int head=0,tail=0;\n        q[0]=1;\n        p[1]=1;\n        tail++;\n        while(head!=tail){\n            int u=q[head];\n            p[u]=0;\n            for(int i=h[u];i!=0;i=s[i].next ){\n                int v=s[i].to ,w=s[i].m ;\n                if(dis[v]>dis[u]+w){\n                    dis[v]=dis[u]+w;\n                    if(p[v]==0){\n                        p[v]=1;\n                        q[tail]=v;\n                        tail++;\n                    }\n                }\n            }\n            head++;\n        }\n        if(dis[n]-x>mx){\n            mx=dis[n]-x;\n        }\n        s[t].m /=2;\n        s[t+1].m /=2;\n    } \n    cout<<mx;\n}\n```",
        "postTime": 1479280260,
        "uid": 14668,
        "name": "\u80fd\u795e\u5e26\u4f60\u98de",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u662f\u6807\u51c6\u7684dijkstra,\u6211\u5148\u8fdb\u884c\u4e00\u904ddijkstra\uff0c\u627e\u51fa\u6765\u6ca1\u6709\u8def\u969c\u662f\u7684\u6700\u77ed\u8def\uff0c\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53zou\u8bb0\u5f55\u4e0b\u8d70\u8fc7\u7684\u8fb9\uff0c\u518d\u904d\u5386\u6240\u6709\u662f\u6700\u77ed\u8def\u8d70\u8fc7\u7684\u8fb9\uff0c\u627e\u51fa\u4f7f\u5f97\u8def\u7a0b\u589e\u52a0\u7684\u6700\u5927\u503c\uff0c\u8fd9\u6837\u80fd\u6bd4\u904d\u5386\u6240\u6709\u7684\u8fb9\u7701\u597d\u591a\u65f6\u95f4\u90a3\uff0c\n\n\u732e\u4e0a\u849f\u84bb\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nstruct hehe\n{\n    int lai;\n    int qu;\n}zou[251];\nbool b[251];\nint w[251][251],dis[251],pre[251],a,s,n,m,yuanlai,xianzai,max1,s1;\nvoid print(int x)//\u901a\u8fc7\u9012\u5f52\u627e\u51fa\u6765\u8d70\u8fc7\u90a3\u4e9b\u8fb9\n{\n    if (pre[x]==0)\n        return;\n    print(pre[x]);\n    s++;\n    zou[s].qu=x;\n    zou[s].lai=pre[x];\n//    printf(\"->%d\",x);\n}\nint dijkstra()//\u6807\u51c6dijkstra\u7248\u5b50\n{\n    int i,j,k,min1;\n    memset(b,0,sizeof(b));\n    memset(dis,0,sizeof(dis));\n    for (i=1;i<=n;i++)\n        dis[i]=w[1][i];\n    dis[1]=0;\n    b[1]=true;\n    for (i=1;i<=n-1;i++)\n    {\n        min1=0x7fffffff;\n        k=0;\n        for (j=1;j<=n;j++)\n            if (dis[j]<min1&&!b[j])\n            {\n                k=j;\n                min1=dis[j];\n            }\n        b[k]=true;\n        if (!k)\n            break;\n        for (j=1;j<=n;j++)\n            if (dis[j]>dis[k]+w[k][j])\n                dis[j]=dis[k]+w[k][j];\n    }\n    return dis[n];\n}\nint main()\n{\n    int i,j,k,min1,x,y,z;\n    scanf(\"%d%d\",&n,&m);\n    for (i=1;i<=n;i++)\n        for (j=1;j<=n;j++)\n            w[i][j]=0x3f3f3f3f-1;\n    for (i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        w[x][y]=w[y][x]=z;\n        if (y==1)//\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\n            pre[x]=y;\n        if (x==1)//\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\n            pre[y]=x;\n    }\n    for (i=1;i<=n;i++)\n        dis[i]=w[1][i];\n    dis[1]=0;\n    b[1]=true;\n    pre[1]=0;\n    for (i=1;i<=n-1;i++)\n    {\n        min1=0x7fffffff;\n        k=0;\n        for (j=1;j<=n;j++)\n            if (dis[j]<min1&&!b[j])\n            {\n                k=j;\n                min1=dis[j];\n            }\n        b[k]=true;\n        if (!k)\n            break;\n        for (j=1;j<=n;j++)\n            if (dis[j]>dis[k]+w[k][j])\n            {\n                dis[j]=dis[k]+w[k][j];\n                pre[j]=k;//\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\n            }\n    }\n    yuanlai=dis[n];\n    print(n);\n    for (i=1;i<=s;i++)//\u904d\u5386\u6240\u6709\u7684\u8fb9\n    {\n        w[zou[i].lai][zou[i].qu]=2*w[zou[i].lai][zou[i].qu];\n        s1=dijkstra();\n        if (s1-yuanlai>max1)//\u627e\u5230\u6700\u5927\u503c\n            max1=s1-yuanlai;\n        w[zou[i].lai][zou[i].qu]=w[zou[i].lai][zou[i].qu]/2;\n    }\n    printf(\"%d\",max1);//\u8f93\u51fa\n}\n```",
        "postTime": 1479279084,
        "uid": 20350,
        "name": "l1360300734",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "**\n\u6211\u5c31\u8bf4\u51e0\u53e5\uff1a\n\n\u7b2c\u4e00\u4e2a  \u8fd9\u9053\u9898\u8ddf\u4e0a\u4e00\u9053\uff08\u522b\u544a\u8bc9\u6211\u4f60\u4e0d\u662f\u8bd5\u70bc\u573a\u5237\u8fc7\u6765\u7684\uff09\u5f88\u50cf \u7c7b\u4f3c\u6b21\u77ed\u8def\n\n\u7528dijkstra\u8dd1\u4e00\u904d  \u8bb0\u5f55\u6700\u77ed\u8def\u4e0a\u7684\u70b9\u7684\u524d\u9a71  \u7136\u540e\u679a\u4e3e\u6700\u77ed\u8def\u4e0a\u5f97\u8fb9\uff08\u975e\u6700\u77ed\u8def\u5f97\u8fb9\\*2\u6ca1\u5f71\u54cd\uff09 \u9047\u5230\u8fd9\u6761\u8fb9\u7684\u65f6\u5019\u5c31\u628a\u8fb9\u6743\\*2  \u6211\u7528\u7684\u662f\u4e24\u4e2a\u70b9\u786e\u5b9a\u4e00\u6761\u8fb9\n\n[color=red]  woc\u6570\u636e\u6709\u6bd2\uff01\uff01\uff01\uff01\uff01\u6211\u770b110\u76845010\u540e\u4e09\u4e2a\u70b9\u4f1aRE= =  \u51fa\u9898\u4eba\u4f60\u667a\u5546\u5e72\u4ec0\u4e48\u53bb\u4e86   \u6124\u6012\u7684\u6211\u76f4\u63a5\u540e\u9762\u52a0\u4e0a\u4e00\u4e2a0\u5b8c\u4e8b= =[/color]\n\n**\n\n```cpp\n\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100+10;\nconst int maxm=5000+10;\nconst int INF=(1<<30);\nstruct Node{\n    int u,d;\n    Node(){}\n    Node(int u,int d):u(u),d(d){}\n    bool operator < (const Node &rhs)const{\n        return d>rhs.d;\n    }\n};\n\nint n,m;\nint first[maxn],next[maxm],u[maxm],v[maxm],w[maxm];\nvoid init_data()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) first[i]=-1;\n    for(int i=1;i<=2*m;i+=2)\n    {\n        scanf(\"%d%d%d\",u+i,v+i,w+i);\n        next[i]=first[u[i]];\n        first[u[i]]=i;\n        w[i+1]=w[i];\n        u[i+1]=v[i];\n        v[i+1]=u[i];\n        next[i+1]=first[v[i]];\n        first[v[i]]=i+1;\n    }\n}\n\nint d[maxn],vis[maxn],pre[maxn];\nint dijkstra(int f,int t)                                         //\u8fd9\u91ccf  t\u4e3a\u4e24\u4e2a\u70b9 \u8bb0\u5f55\u4e00\u6761*2\u7684\u8fb9\n{                                                                         //\u53ea\u6709\u7b2c\u4e00\u6b21\u9700\u8981\u66f4\u65b0pre\uff08\u524d\u9a71\uff09\n    priority_queue<Node>q;                          //\u800c\u4e14\u6b64\u540e\u4e0d\u80fd\u66f4\u65b0pre  \u770bmain\u91cc\u7684for\n    for(int i=1;i<=n;i++) d[i]=INF,vis[i]=0;\n    d[1]=0;\n    if(f==-1)pre[1]=-1;\n    q.push(Node(1,0));\n    while(!q.empty())\n    {\n        Node x=q.top();q.pop();\n        if(vis[x.u]) continue;\n        vis[x.u]=1;\n        for(int i=first[x.u];i!=-1;i=next[i])\n          if(x.u==f&&v[i]==t)\n          {\n              if(d[v[i]]>d[x.u]+2*w[i])\n            {\n                  d[v[i]]=d[x.u]+2*w[i];\n                  if(f==-1)pre[v[i]]=x.u;\n                  q.push(Node(v[i],d[v[i]]));\n            }\n          }\n          else if(d[v[i]]>d[x.u]+w[i])\n          {\n              d[v[i]]=d[x.u]+w[i];\n              if(f==-1)pre[v[i]]=x.u;\n              q.push(Node(v[i],d[v[i]]));\n          }\n    }\n    return d[n];\n}\n\nint main()\n{\n    init_data();\n    int minl=dijkstra(-1,-1),ans=0;\n    for(int x=n;x!=1;x=pre[x])\n    {\n        ans=max(ans,dijkstra(pre[x],x)-minl);\n    }\n    cout<<ans;\n    return 0;\n}\n\n\n```",
        "postTime": 1451979675,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "- ~~\u8fd9\u9898SPFA\u4f1a\u88ab\u5361\u5417?(\u5b9e\u6d4b\u597d\u50cf\u5e76\u4e0d\u4f1a\uff0c\u4e5f\u6ca1\u6709\u6bd4Dijkstra\u6162\u5f88\u591a)~~\n\n![\u5b9e\u6d4bSPFA](https://img-blog.csdnimg.cn/20200107181610538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hzYXBsb3Nlcg==,size_16,color_FFFFFF,t_70)\n- \u7eaf\u66b4\u529b\u601d\u8def\u5c31\u662f\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u4e4b\u540e\u5c06\u8fd9\u6761\u8fb9\u8fb9\u6743\u7ffb\u500d\u3002\u65f6\u95f4\u590d\u6742\u5ea6**O(E \u00d7 \u6700\u77ed\u8def\u590d\u6742\u5ea6 )**\uff0c\u7528SPFA\u53ef\u80fd\u4f1a\u88ab\u5361\uff0cdijkstra\u76f4\u63a5\u7206\u70b8\n- \u4f18\u5316\u7684\u601d\u8def\u662f\u663e\u7136\uff0c\u8349\u5806\u53ea\u53ef\u80fd**\u653e\u5728\u6700\u77ed\u8def\u4e0a**\uff0c\u6240\u4ee5\u6bcf\u6b21\u5224\u65ad\u4e00\u6761\u8fb9\u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u5982\u679c\u662f\uff0c\u624d\u8dd1\u6700\u77ed\u8def\uff0c\u8fd9\u6837\u7a0b\u5e8f\u6548\u7387\u4f1a\u5feb\u5f88\u591a\uff0cSPFA\u4e5f\u4e0d\u4f1a\u88ab\u5361\uff0c\u5f53\u7136\uff0c\u56e0\u4e3a\u662f\u5168\u6b63\u8fb9\uff0c\u6240\u4ee5\u80af\u5b9a\u8dd1Dijkstra\n- \u81f3\u4e8e\u5982\u4f55\u5224\u65ad\u662f\u5426\u57281-n\u7684\u6700\u77ed\u8def\u4e0a\u3002\u65b9\u6cd5\u662f\uff1a\u5148\u8dd1\u4e00\u6b21\u4ee51\u4e3a\u6e90\u70b9\u7684\u6700\u77ed\u8def\uff0c\u8bb0\u5230\u6570\u7ec4dis[1][i]\u4e2d\uff1b\u518d\u8dd1\u4e00\u6b21\u4ee5 n\u4e3a\u6e90\u70b9\u7684\u6700\u77ed\u8def\uff0c\u8bb0\u5230 dis[2][i] \u4e2d\uff1b\u6bcf\u6b21\u68c0\u67e5\u4e00\u6761i -> j\u7684\u8fb9\uff0c\u5c31\u770bdis[1][i] + g[i][j] + dis[2][j] = dis[1][n] \u5417\u3002\n- \u6700\u597d\u7528\u90bb\u63a5\u77e9\u9635\u5b58\uff0c\u8fd9\u6837\u66f4\u6613\u4e8e\u7ffb\u500d\u8fb9\u6743\u3002\n- \u4ee3\u7801\uff1a\uff08Dijkstra\uff09\n\n```cpp\n# include <iostream>\n# include <cstdio>\n# include <set>\n\nusing namespace std ;\n\nint n , m ;\nint g[105][105] ;\nset < pair< int , int > > heap ;\nint dis[4][40005] ;\n\nvoid dij( int s , int tmp )\n{\n\twhile ( heap.size() )\n\t{\n\t\theap.erase( heap.begin() ) ;\n\t}\n\tfor ( int i = 1 ; i <= n ; i++ )\n\t\tdis[tmp][i] = 1e9 + 5 ;\n\tdis[tmp][s] = 0 ;\n\theap.insert( make_pair( dis[tmp][s] , s ) ) ;\n\tfor ( int i = 1; i <= n ; i++ )\n\t{\n\t\tint x = heap.begin() -> second ;\n\t\tint d = heap.begin() -> first ;\n\t\theap.erase( make_pair( d , x ) ) ;\n\t\tfor ( int j = 1 ; j <= n ; j++ )\n\t\t{\n\t\t\tif ( dis[tmp][x] + g[x][j] >= dis[tmp][j] )\n\t\t\t\tcontinue ;\n\t\t\theap.erase( make_pair( dis[tmp][j] , j ) ) ;\n\t\t\tdis[tmp][j] = dis[tmp][x] + g[x][j] ;\n\t\t\theap.insert( make_pair( dis[tmp][j] , j ) ) ;\n\t\t}\n\t}\n\treturn ;\n}\n\nint main()\n{\n\tfor ( int i = 1 ; i <= 100 ; i++ )\n\t\tfor ( int j = 1 ; j <= 100 ; j++ )\n\t\t\tg[i][j] = 1000000000 ;\n\tscanf(\"%d%d\" , &n , &m) ;\n\tfor ( int i = 1 ; i <= m ; i++ )\n\t{\n\t\tint x , y , z ;\n\t\tscanf(\"%d%d%d\" , &x , &y , &z) ;\n\t\tg[x][y] = z ;\n\t\tg[y][x] = z ;\n\t}\n\tdij( 1 , 1 ) ;\n\tdij( n , 2 ) ;\n\tint ans = 0 ;\n\tfor ( int i = 1 ; i <= n ; i++ )\n\t{\n\t\tfor ( int j = 1; j <= n ; j++ )\n\t\t{\n\t\t\tif ( dis[1][i] + g[i][j] + dis[2][j] == dis[1][n] )\n\t\t\t{\n\t\t\t\tg[i][j] *= 2 ;\n\t\t\t\tg[j][i] *= 2 ;\n\t\t\t\tdij( 1 , 3 ) ;\n\t\t\t\tg[i][j] /= 2 ;\n\t\t\t\tg[j][i] /= 2 ;\n\t\t\t\tans = max( ans , dis[3][n] - dis[1][n] ) ;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\" , ans) ;\n\treturn 0 ;\n}\n```\n\n- SPFA\u7248\n\n```cpp\n# include <iostream>\n# include <cstdio>\n# include <set>\n# include <queue>\n\nusing namespace std;\n\nint n , m ;\nint g[105][105] ;\nint dis[4][40005] ;\nbool already[105] ;\nqueue < int > q ;\n\nvoid spfa( int s , int tmp )\n{\n\tfor ( int i = 1 ; i <= n ; i++ )\n\t{\n\t\tdis[tmp][i] = 1e9 + 5 ;\n\t\talready[i] = false ;\n\t}\n\talready[s] = 1 ;\n\tdis[tmp][s] = 0 ;\n\tq.push( s ) ;\n\twhile ( ! q.empty() )\n\t{\n\t\tint x = q.front() ;\n\t\talready[x] = 0 ;\n\t\tq.pop() ;\n\t\tfor ( int y = 1 ; y <= n ; y++ )\n\t\t{\n\t\t\tif ( dis[tmp][x] + g[x][y] >= dis[tmp][y] )\n\t\t\t\tcontinue ;\n\t\t\tdis[tmp][y] = dis[tmp][x] + g[x][y] ;\n\t\t\tif ( already[y] )\n\t\t\t\tcontinue ;\n\t\t\talready[y] = 1 ;\n\t\t\tq.push( y ) ;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tfor ( int i = 1 ; i <= 100 ; i++ )\n\t\tfor ( int j = 1 ; j <= 100 ; j++ )\n\t\t\tg[i][j] = 1000000000 ;\n\tscanf(\"%d%d\" , &n , &m) ;\n\tfor ( int i = 1 ; i <= m ; i++ )\n\t{\n\t\tint x , y , z ;\n\t\tscanf(\"%d%d%d\" , &x , &y , &z) ;\n\t\tg[x][y] = z ;\n\t\tg[y][x] = z ;\n\t}\n\tspfa( 1 , 1 ) ;\n\tspfa( n , 2 ) ;\n\tint ans = 0 ;\n\tfor ( int i = 1 ; i <= n ; i++ )\n\t{\n\t\tfor ( int j = 1; j <= n ; j++ )\n\t\t{\n\t\t\tif ( dis[1][i] + g[i][j] + dis[2][j] == dis[1][n] )\n\t\t\t{\n\t\t\t\tg[i][j] *= 2 ;\n\t\t\t\tg[j][i] *= 2 ;\n\t\t\t\tspfa( 1 , 3 ) ;\n\t\t\t\tg[i][j] /= 2 ;\n\t\t\t\tg[j][i] /= 2 ;\n\t\t\t\tans = max( ans , dis[3][n] - dis[1][n] ) ;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\" , ans) ;\n\treturn 0 ;\n}\n\n```",
        "postTime": 1578394620,
        "uid": 219868,
        "name": "xsap",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    },
    {
        "content": "\u4e00\u9053\u7c7b\u6b21\u77ed\u8def\u95ee\u9898\u3002\u9996\u5148\u679a\u4e3e\u5728\u54ea\u4e00\u6761\u8def\u4e0a\u653e\u7f6e\u7a3b\u8349\u3002\u5982\u679c\u5728\u4e0d\u662f\u6700\u77ed\u8def\u7684\u8fb9\u4e0a\u653e\u7f6e\u7a3b\u8349\uff0c\u7531\u4e8e\u6700\u77ed\u8def\u4e0d\u53d8\uff0c\u5c0fZ\u7684\u8def\u957f\u4e5f\u4e0d\u53d8\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u679a\u4e3e\u6700\u77ed\u8def\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5c06\u8be5\u8fb9\u653e\u7f6e\u7a3b\u8349\u540e\uff0c\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u3002\u6240\u6709\u653e\u7f6e\u7a3b\u8349\u540e\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\u4e0e\u539f\u6700\u77ed\u8def\u7684\u5dee\u503c\u5c31\u662f\u7b54\u6848\u3002\n",
        "postTime": 1438084909,
        "uid": 4341,
        "name": "TsReaper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2176 \u3010[USACO14FEB]\u8def\u969cRoadblock\u3011"
    }
]