[
    {
        "content": "\u53ef\u4ee5\u8054\u60f3\u5230\u77e9\u9635\u7684\u7ebf\u6027\u76f8\u5173\u3002\n\n\u6839\u636e\u9898\u610f\u5f97\u51fa\u6240\u6c42\u7684\u5408\u91d1\u5e94\u8be5\u662f\u5728\u6750\u6599\u7684\u4e00\u4e2a\u51f8\u5305\u5185\u3002\n\n\u800c\u8981\u6c42\u662f\u51f8\u5305\u7684\u8fb9\u5c3d\u91cf\u5c11\u3002\n\n\u5efa\u56fe\u8dd1floyd\u6700\u77ed\u8def\u3002\n\n\u6bcf\u6b21\u5224\u65ad\u70b9\u662f\u5426\u90fd\u5728\u7ebf\u6bb5\u5de6\u4fa7\uff0c\u7b2c\u4e8c\u4e2a\u5224\u65ad\u662f\u5224\u65ad\u5171\u7ebf\u65f6\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a\u3002\n\n\u53c9\u79ef\u6b63\u8d1f\u5224\u65ad\u987a\u9006\u65f6\u9488\uff0c\u70b9\u79ef\u6b63\u8d1f\u5224\u65ad\u5939\u89d2\u5927\u5c0f\u3002\n\nBy\uff1a\u5927\u5955\u54e5\n\n```cpp\nhttp://www.cnblogs.com/nbwzyzngyl/p/8323605.html\n#include<bits/stdc++.h>\n#define eps 1e-7\n#define N 510\nusing namespace std;\nstruct node{\n    double x,y,z;\n}a[N],b[N];\nnode vet(node a,node b)\n{\n    node c;c.x=a.x-b.x;c.y=a.y-b.y;\n    return c;\n}\ndouble xmul(node a,node b){return a.x*b.y-b.x*a.y;}\ndouble pmul(node a,node b){return a.x*b.x+a.y*b.y;}\nint n,m,ans,f[N][N];\nvoid floyd()\n{\n    ans=1e9;\n    for(int k=1;k<=n;++k)\n        for(int i=1;i<=n;++i)\n            for(int j=1;j<=n;++j)\n                f[i][j]=min(f[i][j],f[i][k]+f[k][j]);\n    for(int i=1;i<=n;++i)ans=min(ans,f[i][i]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    memset(f,0x3f,sizeof(f));\n    for(int i=1;i<=n;++i)scanf(\"%lf%lf%lf\",&a[i].x,&a[i].y,&a[i].z);\n    for(int i=1;i<=m;++i)scanf(\"%lf%lf%lf\",&b[i].x,&b[i].y,&b[i].z);\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=n;++j)\n    {\n        bool flag=0;\n        for(int k=1;k<=m;++k)\n        {\n            double cross=xmul(vet(a[i],b[k]),vet(a[j],b[k]));\n            if(cross>eps){flag=1;break;}\n            if(fabs(cross)<eps&&pmul(vet(a[i],b[k]),vet(a[j],b[k]))>eps)\n            {flag=1;break;}\n        }\n        if(!flag)f[i][j]=1;\n    }\n    floyd();\n    if(ans==1e9)puts(\"-1\");\n    else printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1516505456,
        "uid": 25438,
        "name": "\u5927\u5955\u54e5",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4049 \u3010[JSOI2007]\u5408\u91d1\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u6750\u6599\u7684\u524d\u4e24\u4e2a\u5c5e\u6027\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u6750\u6599\uff0c\u5408\u91d1\u7684\u524d\u4e24\u4e2a\u6811\u5f62\u4e5f\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u6750\u6599\u3002\n\n\u90a3\u4e48\u6750\u6599\u548c\u5408\u91d1\u90fd\u53ef\u4ee5\u88ab\u770b\u6210\u5e73\u9762\u4e0a\u7684\u70b9$(a_i,b_i)$\u6216$(d_i,e_i)$\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u4e9b\u6750\u6599\u80fd\u8868\u793a\u51fa\u4e00\u79cd\u5408\u91d1\u5f53\u4e14\u4ec5\u5f53**\u8fd9\u4e2a\u5408\u91d1\uff08\u5728\u5e73\u9762\u4e0a\u7684\u70b9\uff09\u5728\u9009\u53d6\u7684\u6750\u6599\uff08\u5728\u5e73\u9762\u4e0a\u7684\u70b9\uff09\u7ec4\u6210\u7684\u51f8\u5305\u5185**\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u9009\u53d6\u7684\u70b9\u51f8\u5305\u4e0a\u7684\u8fb9\u4e00\u5b9a\u6ee1\u8db3\uff1a\u6240\u6709\u7684\u5408\u91d1\u4ee3\u8868\u7684\u70b9\u90fd**\u5728\u8fd9\u6761\u8fb9\u7684\u67d0\u4e00\u4fa7\uff0c\u6216\u8005\u5728\u8fd9\u6761\u7ebf\u6bb5\u4e0a\uff08\u4e0d\u662f\u76f4\u7ebf\u4e0a\uff09**\n\n\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u6c42\u4e2a\u6700\u5c0f\u73af\u5c31\u884c\u4e86\u3002\n\n\u590d\u6742\u5ea6$O(n^3+mn^2).$\n\n\u6ce8\u610f\u7279\u5224\u7b54\u6848\u4e3a 1 \u6216 2 \u7684\u60c5\u51b5\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define db long double\n#define eps 1e-7\nusing namespace std;\nconst int N = 505,M = 505;\nstruct point{\n\tdb x,y;\n\tpoint(db xx=0,db yy=0){ x = xx,y = yy; }\n\tbool operator < (const point w) const{\n\t\tif (fabs(x-w.x) > eps) return x < w.x;\n\t\tif (fabs(y-w.y) > eps) return y < w.x;\n\t\treturn 0;\n\t}\n}a[N],b[M];\nbool operator == (point a,point b){ return fabs(a.x-b.x) < eps && fabs(a.y-b.y) < eps; }\npoint operator + (point a,point b){ return point(a.x+b.x,a.y+b.y); }\npoint operator - (point a,point b){ return point(a.x-b.x,a.y-b.y); }\ninline db operator * (point a,point b){ return a.x * b.y - a.y * b.x; }\ninline bool left(point a,point b,point p){ return fabs((b-a) * (p-a)) > eps && ((b-a) * (p-a)) > eps;  }\nint n,m,dp[N][N],ans;\ninline bool check(point p1,point p2){\n\tif (p1 == p2) return 0;\n\tfor (int i = 1; i <= m; ++i) if (left(p1,p2,b[i])) return 0;\n\tfor (int i = 1; i <= m; ++i) if (fabs((p2-p1)*(b[i]-p1)) < eps){\n\t\tif (p1 == b[i] || p2 == b[i]) continue;\n\t\tdb l,r;\n\t\tl = p1.x,r = p2.x; if (l > r) swap(l,r); if (l-eps > b[i].x || b[i].x > r+eps) return 0;\n\t\tl = p1.y,r = p2.y; if (l > r) swap(l,r); if (l-eps > b[i].y || b[i].y > r+eps) return 0;\n\t}\n\treturn 1;\n}\nint main(){\n\tint i,j,k;\n\tcin >> n >> m;\n\tfor (i = 1; i <= n; ++i) cin >> a[i].x >> a[i].y >> a[0].x; sort(a+1,a+n+1);\n\tfor (i = 1; i <= m; ++i) cin >> b[i].x >> b[i].y >> a[0].x; sort(b+1,b+m+1);\n\tfor (i = 1; i <= n; ++i) a[i].x *= 1000000,a[i].y *= 1000000;\n\tfor (i = 1; i <= m; ++i) b[i].x *= 1000000,b[i].y *= 1000000;\n\tn = unique(a+1,a+n+1) - (a+1);\n\tm = unique(b+1,b+m+1) - (b+1);\n\tfor (i = 1; i <= n; ++i) for (j = 1; j <= n; ++j) dp[i][j] = 10000000;\n\tans = 10000000;\n\tfor (i = 1; i <= n; ++i) for (j = 1; j <= n; ++j)\n\t\tif (i != j && check(a[i],a[j])) dp[i][j] = 1;\n\tfor (k = 1; k <= n; ++k) for (i = 1; i <= n; ++i) for (j = 1; j <= n; ++j)\n\t\tdp[i][j] = min(dp[i][j],dp[i][k] + dp[k][j]);\n\tfor (i = 1; i <= n; ++i) ans = min(ans,dp[i][i]);\n\tif (n == 1 && m == 1 && a[1] == b[1]) ans = 1;\n\tif (ans > n) cout << -1 << '\\n'; else cout << ans << '\\n';\n\treturn 0;\n}\n```",
        "postTime": 1599224164,
        "uid": 52518,
        "name": "s_r_f",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4049 \u3010[JSOI2007]\u5408\u91d1\u3011"
    },
    {
        "content": "1h \u5185\u6ca1\u6709\u505a\u51fa\u6765\u611f\u89c9\u8fd8\u662f\u633a\u4e8f\u7684\uff0c\u8981\u653e\u771f\u5b9e\u7701\u9009\u5c31\u7206\u70b8\u4e86\uff08        \n\n\u8fd8\u662f\u4e0d\u8be5\u5728\u7f51\u7edc\u6d41\u548c dp \u4e0a\u9762\u7ed5\u592a\u4e45\u2026\u2026\n\n\u51ed\u501f\u521d\u4e2d\u6570\u5b66\u7684\u76f4\u89c9\uff0c\u6bd4\u8f83\u5bb9\u6613\u53d1\u73b0\u7684\u662f\u539f\u9898\u5176\u5b9e\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u95ee\u9898\uff0c\u56e0\u4e3a\u5728\u4e09\u7ef4\u4e4b\u548c\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e8c\u7ef4\u786e\u5b9a\u7b2c\u4e09\u7ef4\u5c31\u786e\u5b9a\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u6254\u6389\u7b2c\u4e09\u7ef4\u3002              \n\n\u63a5\u7740\u6bd4\u8f83\u597d\u53d1\u73b0\u7684\u662f\u590d\u5408\u4e24\u4e2a\u70b9\u5f97\u5230\u7684\u70b9\u4e00\u5b9a\u5728\u4e24\u70b9\u7684\u8fde\u7ebf\u4e0a\uff0c\u590d\u5408\u4e09\u4e2a\u70b9\uff08\u4e09\u70b9\u4e0d\u5171\u7ebf\uff09\u5f97\u5230\u7684\u70b9\u4e00\u5b9a\u5728\u6784\u6210\u7684\u4e09\u89d2\u5f62\u5185\u3002             \n\n\u7531\u6b64\u53d1\u73b0\u5982\u679c\u9009\u5b9a\u4e00\u4e2a\u53ef\u4ee5\u6784\u6210\u89c4\u5219\u591a\u8fb9\u5f62\u7684\u70b9\u96c6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u591a\u8fb9\u5f62\u5185\u90e8\u7684\u70b9\u96c6\u80af\u5b9a\u90fd\u53ef\u4ee5\u88ab\u6784\u9020\u51fa\u6765\uff0c\u6240\u4ee5\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\u6750\u6599\u70b9\u96c6\u6784\u6210\u7684\u51f8\u5305\u56ca\u62ec\u6240\u6709\u7528\u6237\u70b9\u3002             \n\n~~\u7136\u540e\u6211\u5c31\u5f00\u59cb\u4e86\u7f51\u7edc\u6d41\u548c dp \u7684\u5947\u5999\u5192\u9669\u3002~~              \n\n\u8fd9\u91cc\u6211\u4eec\u4e0d\u59a8\u5148\u89c2\u5bdf\uff0c\u53ef\u4ee5\u5148\u5bf9\u51f8\u5305\u7684\u8fb9\u8fdb\u884c\u5b9a\u5411\uff0c\u4f7f\u5f97\u6240\u6709\u70b9\u90fd\u5728\u8fb9\u7684\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9\u3002                 \n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u5224\u65ad\u662f\u5426\u80fd\u5c06\u6240\u6709\u70b9\u90fd\u5272\u5230\u5de6\u8fb9/\u53f3\u8fb9\u53bb\uff0c\u5982\u679c\u53ef\u4ee5\u90a3\u4e48\u5c31\u5c06\u8fd9\u6761\u8fb9\u6743\u7f6e\u4e3a $1$ \u5426\u5219\u7f6e\u4e3a\u65e0\u7a77\u5927\uff0c\u6700\u540e\u6211\u4eec\u8dd1 Floyd \u627e\u6700\u5c0f\u73af\u5373\u53ef\u3002      \n\n\u8fd9\u91cc\u9009\u5de6\u8fb9\u53f3\u8fb9\u90fd\u65e0\u59a8\uff0c\u4f53\u73b0\u5728\u7b54\u6848\u4e0a\u53ea\u662f\u987a\u65f6\u9488\u548c\u9006\u65f6\u9488\u7684\u8d70\u6cd5\uff0c\u4e0d\u5f71\u54cd\u56fe\u5f62\u672c\u8eab\u3002\n\n~~\u6211\u8be5\u8bf4\u6211\u60f3\u4e0d\u5230\u7684\u7406\u7531\u662f\u6211\u4e0d\u4f1a Floyd \u627e\u6700\u5c0f\u73af\u5417~~          \n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 5e2 + 5 , Inf = 1e9;\nint n,m;\nstruct point\n{\n\tdouble x,y;\n\tpoint(){x = 0.0 , y = 0.0;}\n\tpoint(double X,double Y){x = X , y = Y;}\n\tpoint operator - (const point &Ano) const\n\t{\n\t\treturn point(x - Ano.x , y - Ano.y);\n\t}\n\tdouble operator ^ (const point &Ano) const\n\t{\n\t\treturn x * Ano.y - y * Ano.x;\n\t}\n}p[Len],t[Len];\nint mp[Len][Len];\ndouble fw;\nint aside(point a,point b,point c)\n{\n\tdouble mul = (b - a) ^ (c - a);\n\tif(mul > 0) return 1;\n\tif(mul < 0) return 0;\n\tdouble minx = min(a.x , b.x) , maxx = max(a.x , b.x) , miny = min(a.y , b.y) , maxy = max(a.y , b.y);\n\treturn (minx <= c.x) && (c.x <= maxx) && (miny <= c.y) && (c.y <= maxy);\n}\nint main()\n{\n\tscanf(\"%d %d\",&m,&n);\n\tfor(int i = 1 ; i <= m ; i ++) \n\t{\n\t\tscanf(\"%lf %lf %lf\",&p[i].x,&p[i].y,&fw);\n\t\tp[i].x *= 1000.0 , p[i].y *= 1000.0;\n\t}\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tscanf(\"%lf %lf %lf\",&t[i].x,&t[i].y,&fw);\n\t\tt[i].x *= 1000.0 , t[i].y *= 1000.0;\n\t}\n\tfor(int i = 1 ; i <= m ; i ++)\n\t\tfor(int j = 1 ; j <= m ; j ++) mp[i][j] = Inf;\n\tfor(int i = 1 ; i <= m ; i ++)\n\t\tfor(int j = 1 ; j <= m ; j ++)\n\t\t{\n\t\t\tbool flaw = 1;\n\t\t\tfor(int k = 1 ; k <= n ; k ++) if(!aside(p[i] , p[j] , t[k])){flaw = 0;break;}\n\t\t\tif(flaw) mp[i][j] = 1;\n\t\t\telse mp[i][j] = Inf;\n\t\t}\n\tint Minn = Inf;\n\tfor(int k = 1 ; k <= m ; k ++)\n\t\tfor(int i = 1 ; i <= m ; i ++)\n\t\t\tfor(int j = 1 ; j <= m ; j ++) mp[i][j] = min(mp[i][j] , mp[i][k] + mp[k][j]);\n\tfor(int i = 1 ; i <= m ; i ++) Minn = min(Minn , mp[i][i]);\n\tif(Minn > m) puts(\"-1\");\n\telse printf(\"%d\\n\",Minn);\n\treturn 0;\n}\n```",
        "postTime": 1644154097,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4049 [JSOI2007]\u5408\u91d1"
    },
    {
        "content": "## \u9898\u76ee\u94fe\u63a5\n\n[P4049](https://www.luogu.com.cn/problem/P4049)\n\n&nbsp;\n\n## \u9898\u610f\n\n\u4f01\u4e1a\u5236\u9020\u94c1\u94dd\u9521\u5408\u91d1\u4ea7\u54c1\u3002\u6709 $m$ \u79cd\u94c1\u94dd\u9521\u914d\u6bd4\u7684\u5408\u91d1\u4f5c\u4e3a\u539f\u6750\u6599\uff0c\u6709 $n$ \u79cd\u9700\u8981\u7684\u914d\u6bd4\u3002\u6c42\u6700\u5c11\u9700\u8981\u51e0\u79cd\u539f\u6750\u6599\uff0c\u4f7f\u5f97\u53ef\u4ee5\u901a\u8fc7\u6309\u4e00\u5b9a\u6bd4\u4f8b\u6df7\u5408\u8fd9\u4e9b\u539f\u6750\u6599\u5f97\u5230\u6bcf\u4e00\u79cd\u9700\u8981\u7684\u914d\u6bd4\u3002\n\n&nbsp;\n\n## \u9898\u89e3\n\n\u6bcf\u4e00\u79cd\u914d\u6bd4\u7684\u4e09\u9879\u7cfb\u6570\u4e4b\u548c\u4e3a $1$\uff0c\u6545\u5b9e\u9645\u53ea\u9700\u8003\u8651\u4e24\u7ef4\u3002\n\n\u9898\u76ee\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9a\u5e73\u9762\u4e0a\u7b2c\u4e00\u8c61\u9650\u548c $x,y$ \u975e\u8d1f\u534a\u8f74\u4e0a\u5df2\u6709\u7684 $m$ \u4e2a\u5411\u91cf\u548c\u9700\u8981\u7684 $n$ \u4e2a\u5411\u91cf\uff0c\u6c42\u6700\u5c11\u9700\u8981\u9009\u51fa\u5df2\u6709\u5411\u91cf\u4e2d\u7684\u591a\u5c11\u4e2a\uff0c\u4f7f\u5f97\u53ef\u4ee5\u5c06 $n$ \u4e2a\u6240\u9700\u5411\u91cf\u5747\u8868\u793a\u4e3a\u6240\u9009\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\u7684\u5f62\u5f0f\uff0c\u8981\u6c42\u6bcf\u4e00\u9879\u7cfb\u6570\u5747\u975e\u8d1f\u4e14\u7cfb\u6570\u548c\u4e3a $1$\u3002\n\n&nbsp;\n\n\u4ee5\u4e0b\u9ed8\u8ba4\u5411\u91cf\u8d77\u70b9\u5747\u4e3a\u5750\u6807\u539f\u70b9\uff0c\u7528\u70b9\u8868\u793a\u5176\u4f4d\u7f6e\u5411\u91cf\uff0c\u5e76\u79f0\u7cfb\u6570\u548c\u4e3a $1$ \u7684\u975e\u8d1f\u7cfb\u6570\u7ebf\u6027\u7ec4\u5408\u4e3a\u300c\u5408\u6cd5\u7ebf\u6027\u7ec4\u5408\u300d\u3002\n\n\u8003\u8651\u5b9a\u6bd4\u5206\u70b9\u516c\u5f0f\u3002\u53ef\u4ee5\u77e5\u9053\uff0c\u5411\u91cf $\\boldsymbol c$ \u53ef\u4ee5\u7528\u4e24\u5411\u91cf $\\boldsymbol a,\\boldsymbol b$ \u7684\u5408\u6cd5\u7ebf\u6027\u7ec4\u5408\u8868\u793a\uff0c\u5f53\u4e14\u4ec5\u5f53 $\\boldsymbol c$ \u7684\u7ec8\u70b9\u5728 $\\boldsymbol a,\\boldsymbol b$ \u7ec8\u70b9\u6240\u8fde\u6210\u7684\u7ebf\u6bb5\u4e0a\u3002\n\n\u8fdb\u4e00\u6b65\u5730\uff0c\u5411\u91cf $\\boldsymbol c$ \u53ef\u4ee5\u7528 $n$ \u4e2a\u7b2c\u4e00\u8c61\u9650\u7684\u5411\u91cf $\\boldsymbol a_1,\\boldsymbol a_2, \\cdots, \\boldsymbol a_n$ \u7684\u5408\u6cd5\u7ebf\u6027\u7ec4\u5408\u8868\u793a\uff0c\u5f53\u4e14\u4ec5\u5f53 $\\boldsymbol c$ \u7684\u7ec8\u70b9\u5728 $\\boldsymbol a_1,\\boldsymbol a_2, \\cdots, \\boldsymbol a_n$ \u7ec8\u70b9\u6240\u56f4\u6210\u7684\u51f8\u5305\u7684\u5185\u90e8\u6216\u8fb9\u754c\u4e0a\u3002\n\n\u5148\u8bc1\u5145\u5206\u6027\u3002$\\boldsymbol c$ \u7684\u7ec8\u70b9\u5728\u51f8\u5305\u8fb9\u754c\u4e0a\u65f6\u5145\u5206\u6027\u663e\u7136\u3002$\\boldsymbol c$ \u7684\u7ec8\u70b9\u5728\u51f8\u5305\u5185\u90e8\u65f6\uff0c\u8fde\u63a5\u51f8\u5305\u4efb\u4e00\u9876\u70b9 $A$ \u548c $\\boldsymbol c$ \u7ec8\u70b9 $C$ \u5e76\u5ef6\u957f\uff0c\u5fc5\u7136\u4ea4\u51f8\u5305\u8fb9\u754c\u4e8e\u53e6\u4e00\u70b9 $P$\u3002\u6613\u89c1 $\\boldsymbol c$ \u53ef\u4ee5\u7528 $A$ \u548c $P$ \u7684\u5408\u6cd5\u7ebf\u6027\u7ec4\u5408\u8868\u793a\u3002\u51f8\u5305\u8fb9\u754c\u4e0a\u4efb\u610f\u4e00\u70b9\u5747\u53ef\u4ee5\u7528\u4e24\u5df2\u6709\u5411\u91cf\u7684\u5408\u6cd5\u7ebf\u6027\u7ec4\u5408\u8868\u793a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ebf\u6027\u7ec4\u5408\u7684\u7cfb\u6570\u4e4b\u548c\u4e3a $1$\uff0c\u6240\u4ee5 $P$ \u4e0e $A$ \u7684\u5408\u6cd5\u7ebf\u6027\u7ec4\u5408\u5206\u89e3\u6210\u5df2\u6709\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\u540e\u7cfb\u6570\u548c\u4e00\u5b9a\u4f9d\u7136\u4e3a $1$\u3002\u7531\u6b64\u53ef\u77e5\uff0c$\\boldsymbol c$ \u4e00\u5b9a\u80fd\u591f\u8868\u793a\u4e3a\u5df2\u6709\u5411\u91cf\u7684\u5408\u6cd5\u7ebf\u6027\u7ec4\u5408\u3002\n\n\u518d\u8bc1\u5fc5\u8981\u6027\u3002\u4ed4\u7ec6\u601d\u8003\u4e0d\u96be\u770b\u51fa\uff0c\u82e5\u5e72\u7b2c\u4e00\u8c61\u9650\u7684\u5411\u91cf\u7684\u5408\u6cd5\u7ebf\u6027\u7ec4\u5408\u8868\u793a\u7684\u5411\u91cf\uff0c\u7ec8\u70b9\u4e0d\u4f1a\u5728\u8fd9\u4e9b\u5411\u91cf\u7ec8\u70b9\u56f4\u6210\u7684\u51f8\u5305\u8fb9\u754c\u5916\u3002\n\n&nbsp;\n\n\u6709\u4e86\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c\u95ee\u9898\u8fdb\u4e00\u6b65\u8f6c\u5316\u4e3a\uff1a\u6c42\u4e00\u4e2a\u7531\u5df2\u6709\u5411\u91cf\u7684\u7ec8\u70b9\u56f4\u6210\u7684\u51f8\u5305\uff0c\u6ee1\u8db3\u6240\u6709\u6240\u9700\u5411\u91cf\u7684\u7ec8\u70b9\u5747\u5728\u51f8\u5305\u5185\u90e8\u6216\u8fb9\u754c\u4e0a\uff0c\u4e14\u51f8\u5305\u9876\u70b9\u5c3d\u53ef\u80fd\u5c11\u3002\n\n\u679a\u4e3e $m$ \u4e2a\u5df2\u6709\u5411\u91cf\u7ec8\u70b9\u8fde\u6210\u7684 $m(m-1)$ \u6761\u6709\u5411\u8fb9\uff0c\u5982\u679c\u6240\u6709\u6240\u9700\u5411\u91cf\u7ec8\u70b9\u5747\u5728\u4e00\u6761\u8fb9\u7684\u53f3\u4fa7\uff0c\u5219\u8fd9\u6761\u8fb9\u6709\u53ef\u80fd\u6210\u4e3a\u51f8\u5305\u4e0a\u7684\u8fb9\u3002\u70b9\u5728\u6709\u5411\u7ebf\u6bb5\u5de6\u53f3\u53ef\u4ee5\u7528\u53c9\u79ef\u6b63\u8d1f\u6765\u5224\u65ad\u3002\n\n\u627e\u5230\u6240\u6709\u6709\u53ef\u80fd\u6210\u4e3a\u51f8\u5305\u4e0a\u8fb9\u7684\u8fb9\uff0c\u7528 Floyd \u7b97\u6cd5\u6c42\u51fa\u6700\u5c0f\u73af\uff0c\u8fd9\u4e2a\u73af\u7684\u8fb9\u6570\uff08\u4e5f\u5373\u9876\u70b9\u6570\uff09\u5373\u4e3a\u6240\u6c42\u3002\n\n\u6ce8\u610f\u5904\u7406\u6240\u6709\u6240\u9700\u5411\u91cf\u76f8\u7b49\u4e14\u7b49\u4e8e\u67d0\u4e00\u6761\u5df2\u6709\u5411\u91cf\u7684\u60c5\u5f62\u548c\u6240\u9700\u5411\u91cf\u4e0e\u6b65\u9aa4\u4e2d\u8fde\u51fa\u7684\u6709\u5411\u8fb9\u5171\u7ebf\u7684\u60c5\u5f62\u3002\n\n&nbsp;\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nm^2 + m^3)$\u3002\n\n&nbsp;\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nnamespace acah\n{\n\tconstexpr int maxn = 507;\n\tconstexpr double eps = 1e-9;\n\t\n\tstruct vec {\n\t\tdouble x, y;\n\t\tvec() {} vec(double _x, double _y) : x(_x), y(_y) {}\n\t\tconst vec operator - (const vec &b) const {return vec(x - b.x, y - b.y);}\n\t\tdouble operator * (const vec &b) const {return x * b.y - y * b.x;}\n\t} mt[maxn], pd[maxn];\n\t\n\tint N, M, ans;\n\tint d[maxn][maxn];\n\t\n\tint work()\n\t{\n\t\tscanf(\"%d%d\", &M, &N), ans = M + 1;\n\t\tfor(int i = 1; i <= M; i++) scanf(\"%lf%lf%*f\", &mt[i].x, &mt[i].y);\n\t\tfor(int i = 1; i <= N; i++) scanf(\"%lf%lf%*f\", &pd[i].x, &pd[i].y);\n\t\t\n\t\tmemset(d, 63, sizeof d);\n\t\tfor(int i = 1; i <= M; i++) for(int j = 1; j <= M; j++) {\n\t\t\tbool fl = true; double xm;\n\t\t\tfor(int k = 1; k <= N; k++)\n\t\t\t\tif((xm = (mt[j] - mt[i]) * (pd[k] - mt[i])) > eps ||\n\t\t\t\t(fabs(xm) <= eps && (max(mt[i].x, mt[j].x) < pd[k].x || min(mt[i].x, mt[j].x) > pd[k].x)))\n\t\t\t\t\t{fl = false; break;}\n\t\t\tif(fl) d[i][j] = 1;\n\t\t}\n\t\t\n\t\tfor(int k = 1; k <= M; k++) for(int i = 1; i <= M; i++) for(int j = 1; j <= M; j++)\n\t\t\td[i][j] = min(d[i][j], d[i][k] + d[k][j]);\n\t\t\n\t\tfor(int i = 1; i <= M; i++) ans = min(ans, d[i][i]);\n\t\t\n\t\tprintf(\"%d\", (ans == M + 1) ? -1 : ans);\n\t\t\n\t\treturn 0;\n\t}\n}\n\nint main() {return acah::work();}\n```",
        "postTime": 1643123316,
        "uid": 118109,
        "name": "whhsteven",
        "ccfLevel": 7,
        "title": "P4049 [JSOI2007]\u5408\u91d1"
    },
    {
        "content": "\u65e2\u7136\u80fd\u7528 Floyd \u6c42\u6700\u5c0f\u73af\uff0c\u90a3 dp \u4e5f\u884c\u3002\n\n\u53d1\u73b0\u4e09\u4e2a\u6570\u4e4b\u548c\u4e3a $1$ \uff0c\u5219\u7528\u524d\u4e24\u4e2a\u6570\u5c31\u80fd\u4ee3\u8868\u8fd9\u4e09\u4e2a\u6570\u4e86\uff0c\u7136\u540e\u662f\u57fa\u7840\u5411\u91cf\u77e5\u8bc6\uff1a\n\n$$a+b=1  \\Rightarrow a\\vec x +b\\vec y=k(\\vec y-\\vec x),k\\in[-1,1]$$\n\n\u628a\u6750\u6599 $(a,b,c)$ \u770b\u505a\u5411\u91cf\uff0c\u524d\u9762\u56e0\u4e3a\u53ef\u4ee5\u7701\u53bb\u4e00\u4f4d\uff0c\u6211\u4eec\u7701\u53bb $c$ \u3002\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u53ea\u6709\u4e24\u4e2a\u539f\u6599\uff0c\u5219\u80fd\u88ab\u5408\u6210\u7684\u5408\u91d1\u4e00\u5b9a\u5728\u4e24\u539f\u6599\u5411\u91cf\u76f8\u51cf\u540e\u7684\u5411\u91cf\u4e0a\u3002\u90a3\u4e48\u6211\u4eec\u4efb\u610f\u4e24\u4e2a\u539f\u6750\u6599\u53ef\u4ee5\u5408\u6210\u51fa\u4e00\u6761\u5411\u91cf\u4e0a\u6240\u6709\u7684\u5408\u91d1\uff0c\u5982\u679c\u8fd9\u4e9b\u5411\u91cf\u56f4\u8d77\u6765\uff0c\u5c31\u80fd\u5408\u6210\u56f4\u8d77\u6765\u533a\u95f4\u91cc\u7684\u6240\u6709\u5408\u91d1\u3002\n\n\u90a3\u4e48\u73b0\u5728\u5c31\u662f\u6c42\u4e00\u4e2a\u80fd\u628a\u6240\u6709\u5408\u91d1\u56f4\u8d77\u6765\u7684\u591a\u8fb9\u5f62\uff0c\u5e76\u4e14\u9876\u70b9\u6570\u5c3d\u91cf\u5c11\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e00\u4e2a\u51f8\u5305\u3002\n\n\u5982\u679c\u4e24\u4e2a\u539f\u6750\u6599\u76f8\u51cf\u540e\u7684\u5411\u91cf\u5de6\u53f3\u4e24\u4fa7\u90fd\u6709\u5408\u91d1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5411\u91cf\u65e0\u6cd5\u4f5c\u4e3a\u51f8\u5305\u7684\u8fb9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u8981\u6c42\u7684\u51f8\u5305\u7684\u8fb9\uff08\u5411\u91cf\uff09\u7b5b\u51fa\u6765\uff0c\u7136\u540e\u6309\u7167\u6781\u89d2\u6392\u4e00\u6b21\u5e8f\u3002\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a\u51f8\u5305\u7684\u8d77\u70b9\uff0c\u7136\u540e\u6309\u987a\u5e8f\u679a\u4e3e\u8fb9\uff08\u5411\u91cf\uff09\uff0c\u6ce8\u610f\u8fd9\u4e2a\u987a\u5e8f\u548c\u51f8\u5305\u8fb9\u754c\u662f\u987a\u65f6\u9488\u8fd8\u662f\u9006\u65f6\u9488\u6709\u5173\u3002\n\n\u8f6c\u79fb\u65b9\u7a0b\u6bd4\u8f83\u7b80\u5355\uff1a$dist[v_i]=min(dist[u_i]+1,dis[v_i])$\uff0c$u_ie_i$\u662f\u7b26\u5408\u8981\u6c42\u7684\u8fb9\u3002\u521d\u59cb\u5316\u662f\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a\u51f8\u5305\u8d77\u70b9\u540e\uff0c\u628a\u51f8\u5305\u8d77\u70b9\u6307\u5411\u7684\u70b9\u8d4b\u503c\u4e3a$1$\uff0c\u5176\u4f59\u70b9\u4e3a\u6b63\u65e0\u7a77\u3002\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n,m,cnt;\nconst int MAXN=505;\nconst double pi=acos(-1);\nconst double esp=1e-9;\n\nint minn[MAXN],st[MAXN];\n\nstruct vec{\n    double x,y;\n    double theta;\n    int st,en;\n}q[MAXN*MAXN],pa[MAXN],pb[MAXN];\n\nvec operator + (const vec &aa,const vec &bb){return (vec){aa.x+bb.x,aa.y+bb.y,0,0,0};}\nvec operator - (const vec &aa,const vec &bb){return (vec){aa.x-bb.x,aa.y-bb.y,0,0,0};}\ndouble operator * (const vec &aa,const vec &bb){return aa.x*bb.x+aa.y*bb.y;}\ndouble operator ^ (const vec &aa,const vec &bb){return aa.x*bb.y-aa.y*bb.x;}\ndouble xa[MAXN],ya[MAXN],xb[MAXN],yb[MAXN],lins;\ndouble dis(const vec &aa){\n    return (aa.x*aa.x+aa.y*aa.y);\n}\nbool check(const vec &aa,const vec &bb){\n    if(fabs(aa^bb)>esp)return (aa^bb)>esp;\n    if(aa.x!=0)return bb.x/aa.x<=1-esp;\n    if(aa.y!=0)return bb.y/aa.y<=1-esp;\n    return false;\n}\nbool cmp (const vec &aa,const vec &bb){\n    return aa.theta<bb.theta-esp;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(register int i=1;i<=n;i++){\n        scanf(\"%lf%lf%lf\",&pa[i].x,&pa[i].y,&lins);\n    }\n    for(register int i=1;i<=m;i++){\n        scanf(\"%lf%lf%lf\",&pb[i].x,&pb[i].y,&lins);\n    }\n    if(n==1){\n        bool ok=1;\n        for(int i=1;i<=m;i++){\n            if(fabs(pb[i].x-pa[1].x)>esp||fabs(pb[i].y-pa[1].y)>esp)ok=0;\n        }\n        if(!ok)printf(\"-\");\n        printf(\"1\\n\");\n        return 0;\n    }\n    for(register int i=1;i<=n;i++){\n        for(register int j=1;j<=n;j++){\n            if(i==j)continue;bool ok=0;\n            for(register int k=1;k<=m;k++){\n                if(check((pb[k]-pa[i]),(pa[j]-pa[i]))){\n                    ok=1;break;\n                }\n            }\n            if(ok)continue;\n            cnt++;\n            q[cnt]=pa[j]-pa[i];\n            q[cnt].st=i;\n            q[cnt].en=j;\n            q[cnt].theta=atan2(q[cnt].x,q[cnt].y);\n        }\n    }\n    sort(q+1,q+1+cnt,cmp);\n    int ans=1e8;\n    for(register int i=1;i<=n;i++){\n        for(register int j=1;j<=n;j++)minn[j]=st[j]=1e8;\n        st[i]=0;\n        for(register int j=cnt;j>=1;j--){\n            minn[q[j].en]=min(minn[q[j].en],min(minn[q[j].st]+1,st[q[j].st]+1));\n        }\n        ans=min(ans,minn[i]);\n    }\n    if(ans>1000)printf(\"-1\\n\");\n    else printf(\"%d\\n\",ans);\n\n    return 0;\n}\n\n```",
        "postTime": 1575446753,
        "uid": 34663,
        "name": "redegg",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4049 \u3010[JSOI2007]\u5408\u91d1\u3011"
    },
    {
        "content": "## \u51f8\u5305+Floyd\u6700\u5c0f\u73af\n\n#### \u505a\u6cd5\uff1a\n1.\u7528\u524d\u4e24\u7ef4\u5206\u522b\u4f5c\u4e3a\u6a2a\u7eb5\u5750\u6807\uff0c\u5c06\u5408\u91d1\u8868\u793a\u6210\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u70b9\n\n2.\u6c42\u539f\u6750\u6599\u7684\u51f8\u5305\uff0c\u7136\u540e\u5224\u65ad\u8fd9\u4e2a\u51f8\u5305\u662f\u5426\u5305\u542b\u6240\u6709\u5f85\u52a0\u5de5\u7684\u5408\u91d1\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5219\u65e0\u89e3\u3002\n\n3.\u5bf9\u51f8\u5305\u4e0a\u7684\u6240\u6709\u70b9\u5efa\u56fe\uff0c\u5efa\u56fe\u65b9\u5f0f\u5982\u4e0b\uff1a\n\n\u679a\u4e3e\u4efb\u610f\u4e24\u4e2a\u70b9\u3002\u82e5\u6240\u6709\u5f85\u52a0\u5de5\u5408\u91d1\u5747\u5728\u4e24\u4e2a\u70b9\u6240\u8fde\u76f4\u7ebf\u7684\u4e00\u4fa7\uff0c\u5219\u4e24\u4e2a\u70b9\u95f4\u8ddd\u79bb\u4e3a$1$\uff0c\u5426\u5219\u4e3a$inf$\n\n#### \u7406\u7531\uff1a\n\n\u9996\u5148\uff0c\u8003\u8651\u6a21\u578b\u7684\u8f6c\u5316\u3002\n\n1.\u7b2c\u4e09\u7ef4\u663e\u7136\u6ca1\u7528\uff0c\u53ef\u4ee5\u53bb\u6389\n\n2.\u524d\u4e24\u7ef4\u53ef\u4ee5\u8868\u793a\u4e3a\u5750\u6807\u7cfb\u5185\u7684\u4e00\u4e2a\u70b9\n\n3.\u4e24\u4e2a\u70b9\u6240\u80fd\u8868\u793a\u51fa\u7684\u6240\u6709\u70b9\u5747\u5728\u4ee5\u4e24\u70b9\u4e3a\u7aef\u70b9\u7684\u7ebf\u6bb5\u4e0a\n\n4.\u9996\u5c3e\u76f8\u63a5\u7684\u4e24\u6761\u7ebf\u6bb5$AB,BC$\u53ef\u4ee5\u8868\u793a\u51fa$\\triangle ABC$\u5185\u7684\u6240\u6709\u70b9\uff08\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u6216\u8005\u901a\u8fc7\u63a8\u5f0f\u5b50\u4e5f\u80fd\u5f97\u51fa\u76f8\u540c\u7684\u7ed3\u8bba\uff09\u3002\n\n5.\u5bf9\u7b2c4\u6761\u8fdb\u884c\u5408\u7406\u63a8\u5e7f\uff0c\u4e00\u4e2a\u7531\u591a\u6761\u9996\u5c3e\u76f8\u63a5\u7ebf\u6bb5\u6240\u6784\u6210\u7684\u591a\u8fb9\u5f62\u53ef\u4ee5\u8868\u793a\u51fa\u5176\u5185\u90e8\u6240\u6709\u70b9\uff0c\u56e0\u6b64\u6c42\u539f\u6750\u6599\u7684\u51f8\u5305\u5c31\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u6709\u89e3\u4e86\u3002\n\n\u7136\u540e\uff0c\u8003\u8651\u6c42\u51fa\u7684\u51f8\u5305\u4e2d\u6709\u4e9b\u70b9\u662f\u6ca1\u7528\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u5305\u4f4f\u6240\u6709\u5f85\u52a0\u5de5\u5408\u91d1\u7684\u70b9\uff0c\u800c\u4e0d\u9700\u8981\u5305\u4f4f\u6240\u6709\u539f\u6750\u6599\u7684\u70b9\u3002\n\n\u6309\u7167\u4e0a\u9762\u63d0\u5230\u7684\u5efa\u56fe\u65b9\u5f0f\u5efa\u56fe\uff0c\u6c42\u6700\u5c0f\u73af\u5373\u53ef\u53bb\u6389\u65e0\u7528\u7684\u70b9\u3002\u53ef\u4ee5\u6027\u611f\u7406\u89e3\u4e00\u4e0b\u3002\u6211\u5c1d\u8bd5\u8fd9\u7528\u6211\u5783\u573e\u7684\u8bed\u6587\u529f\u5e95\u5c1d\u8bd5\u89e3\u8bf4\u4e00\u4e2a\u3002\n\n\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u8fb9\u8868\u793a\u4e24\u4e2a\u51f8\u5305\u4e0a\u7684\u70b9\u53ef\u4ee5\u76f4\u63a5\u76f8\u8fde\uff0c\u6240\u4ee5\u5982\u679c\u5f85\u52a0\u5de5\u5408\u91d1\u7684\u70b9\u5206\u5e03\u5728\u7ebf\u6bb5\u4e24\u4fa7\uff0c\u90a3\u4e48\u8bf4\u660e\u6211\u4eec\u628a\u51f8\u5305\u5207\u5f00\u4e86\uff0c\u8fd9\u4e24\u4e2a\u70b9\u76f4\u63a5\u76f8\u8fde\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u5426\u5219\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2a\u70b9\u53ef\u4ee5\u76f4\u63a5\u76f8\u8fde\uff0c\u800c\u4e0d\u9700\u8981\u5176\u4ed6\u70b9\u6765\u5f62\u6210\u5bf9\u4e8e\u5f85\u52a0\u5de5\u5408\u91d1\u7684\u51f8\u5305\u3002\n\n- Q\uff1a\u4e3a\u4ec0\u4e48\u662f\u6700\u5c0f\u73af\uff1f\n\n- A\uff1a\u56e0\u4e3a\u8981\u6c42\u51f8\u5305\uff0c\u4e00\u5b9a\u8981\u9996\u5c3e\u76f8\u63a5\uff0c\u6240\u4ee5\u8981\u6210\u73af\u3002\u56e0\u4e3a\u8981\u5c3d\u91cf\u53bb\u6389\u65e0\u7528\u7684\u70b9\uff0c\u6240\u4ee5\u8981\u4e00\u4e2a\u6700\u5c0f\u73af\u3002",
        "postTime": 1548055217,
        "uid": 53241,
        "name": "partychicken",
        "ccfLevel": 6,
        "title": "[JSOI2007]\u5408\u91d1 \u9898\u89e3"
    },
    {
        "content": "## \u4eca\u5929\u7ecf\u8fc7\u673a\u623f\u94f6\u724c\u5927\u4f6c\u7684\u63a8\u8350\u505a\u5230\u4e00\u4e2a\u9898\n### P4049 [JSOI2007]\u5408\u91d1\n\n\u7d2b\u9898\u96be\u5ea6\n\n### \u4f53\u9762\u6765\u4e4b\n\n[P4049 [JSOI2007]\u5408\u91d1](https://www.luogu.org/problem/P4049)\n\n## \u7ecf\u8fc7\u6211\u51c6\u786e\u7684\u7ffb\u8bd1\n\n## \u9898\u76ee\u7684\u610f\u601d\u662f\u8bf4\u7528\u5df2\u77e5\u7684\u4e09\u79cd\u5408\u91d1\u878d\u5408\u522b\u7684\u5176\u4ed6\u5408\u91d1\uff0c\u5408\u91d1\u53ef\u4ee5\u4efb\u610f\u6bd4\u4f8b\u6df7\u5408\u3002\n\n\u9996\u5148\u7b2c\u4e00\u6b65\u786e\u5b9a\u6709\u4e09\u4e2a\u6bd4\u4f8b\u5df2\u77e5\n\n##### \u95ee\u9898\u7b80\u5316\u7b2c\u4e09\u4e2a\u6ca1\u5fc5\u8981\uff0c\u76f4\u63a5\u53bb\u6389\u3002\n\n### then\uff1f\uff1f\n\n## \u673a\u623f\u5927\u4f6c\u8bf4\u52a0\u5165\u5230\u4e00\u4e2a\u5750\u6807\u4e2d\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6790\u3002\n\n\u9996\u5148\u786e\u5b9a\u4e24\u4e2a\u5408\u91d1\u8fde\u6210\u7684\u7ebf\u662f\u53ef\u4ee5\u4efb\u610f\u6bd4\u4f8b\u6df7\u5408\u51fa\u8fd9\u6761\u7ebf\u4e0a\u7684\u6240\u6709\u5408\u91d1\u7684\n\n\u7136\u540e\u641e\u6e05\u695a\u4e09\u4e2a\u5408\u91d1\u5c31\u53ef\u4ee5\u6df7\u5408\u51fa\u4e09\u89d2\u5f62\u5185\u7684\u6240\u6709\u5408\u91d1\u79cd\u7c7b\n\n\u8fd9\u6837\u95ee\u9898\u5c31\u53ef\u4ee5\u7b80\u5316\u5566\n\n## \u76ee\u524d\u7684\u601d\u8def\u4e3b\u8981\u662f\u786e\u5b9a\u6700\u5c0f\u7684\u70b9\n\u6ee1\u8db3\u7684\u6761\u4ef6\u662f\u6240\u9009\u7684\u8282\u70b9\u8fde\u6210\u7684\u591a\u8fb9\u5f62\u80fd\u591f\u56ca\u62ec\u9700\u8981\u7684\u6240\u6709\u5408\u91d1\n\n\u8fd9\u6837\u9898\u76ee\u5c31\u7b80\u5316\u6210\u5bfb\u627e\u4e00\u4e2a\u6700\u5c0f\u73af\uff08\u8282\u70b9\u6700\u5c11\uff09\uff0c\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\uff0c\u53ef\u4ee5\u7528floyd\u8dd1\u4e00\u8fb9\uff0c500\u7684\u70b9\u53ef\u4ee5\u8fc7\u3002\n\n# \u4ee3\u7801\u6765\u4e4b\n\n\n\n~~\u4ee3\u7801\u53c2\u8003\u81ea\u9898\u89e3\uff0c\u50cf\u6211\u8fd9\u6837\u7684\u8fa3\u9e21\u6839\u672c\u5199\u4e0d\u51fa\u6765\u3002~~\n\n\n------------\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#define maxn 510\n#define eps 1e-7//\u7cbe\u5ea6\u8bef\u5dee\u5904\u7406 \nusing namespace std;\nint n,m,ans;\nint f[maxn][maxn];\nstruct node\n{\n\tdouble x,y,z;\n}a[maxn],b[maxn];\n\nnode vet(node a,node b)//\u8fd4\u56de\u5411\u91cfAB \n{\n    node c;c.x=a.x-b.x;c.y=a.y-b.y;\n    return c;\n}\n\ndouble xmul(node a,node b)//\u8fd4\u56de\u53c9\u4e58 \n{\n    return a.x*b.y-b.x*a.y;//x1*y2-x2y1\n}\n\ndouble pmul(node a,node b)//\u8fd4\u56de\u70b9\u4e58 \n{\n    return a.x*b.x+a.y*b.y;//x1*x2+y1*y2\n}\n\nvoid floyd()\n{\n    ans=1e9;\n    for(int k=1;k<=n;++k)\n        for(int i=1;i<=n;++i)\n            for(int j=1;j<=n;++j)\n                f[i][j]=min(f[i][j],f[i][k]+f[k][j]);\n    for(int i=1;i<=n;++i)ans=min(ans,f[i][i]);\n}\n\n\ninline int read()\n{\n    int k=0,f=1;char c=getchar();\n    for(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n    for(;isdigit(c);c=getchar()) k=k*10+c-'0';return f*k;\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tmemset(f,0x3f,sizeof(f));\n\tfor(int i=1;i<=n;i++)\n\tscanf(\"%lf%lf%lf\",&a[i].x,&a[i].y,&a[i].z);\n\tfor(int i=1;i<=m;i++)\n\tscanf(\"%lf%lf%lf\",&b[i].x,&b[i].y,&b[i].z);\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\t{\n\t\tbool flag=0;\n\t\tfor(int k=1;k<=m;k++)\n\t\t{\n\t\t\tdouble cross=xmul(vet(a[i],b[k]),vet(a[j],b[k]));\n\t\t\t//\u968f\u673a\u7684\u6dfb\u52a0\u5df2\u77e5\u7684\u548c\u9700\u8981\u7684\u70b9 \n\t\t\tif(cross>eps)\n\t\t\t//\u6bcf\u6b21\u5224\u65ad\u70b9\u662f\u5426\u90fd\u5728\u7ebf\u6bb5\u5de6\u4fa7\n\t\t\t//\u5373\u80fd\u5426\u5305\u542b\u8be5\u70b9 \n\t\t\t{\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(fabs(cross)<eps&&pmul(vet(a[i],b[k]),vet(a[j],b[k]))>eps)\n\t\t\t//\u70b9\u79ef\u6b63\u8d1f\u5224\u65ad\u5939\u89d2\u5927\u5c0f\u3002\n\t\t\t//\u5224\u65ad\u662f\u5224\u65ad\u5171\u7ebf\u65f6\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a\u3002\n\t\t\t//\u5f53\u53d1\u73b0\u975e\u51f8\u5305\u662f\u4e0d\u9700\u8981\n\t\t\t{\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tif(flag==0)\n\t\tf[i][j]=1;\n\t}\n\tfloyd();\n\tif(ans==1e9)\n\tputs(\"-1\");\n\telse printf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n\n\n\n",
        "postTime": 1564753034,
        "uid": 122602,
        "name": "\u5b59\u5b50\u9686",
        "ccfLevel": 0,
        "title": "8.2\u5237\u9898"
    }
]