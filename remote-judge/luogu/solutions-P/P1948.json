[
    {
        "content": "###\u672c\u9898\u7684\u89e3\u6cd5\uff1a\u4e8c\u5206\u7b54\u6848+spfa###\n\n\u9996\u5148\u6982\u62ec\u4e00\u4e0b\u9898\u610f\uff1a\u6c42\u539f\u70b91\u5230n\u7684\u6240\u6709\u8def\u4e2d\u7684\u7b2ck+1\u957f\u7684\u8def\u6700\u5c0f\u3002\n\n**\u601d\u8003**\uff1a\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u6982\u62ec\u5462\uff1f\u56e0\u4e3a\u9898\u610f\u4e2d\u7684\u7b54\u6848\u8981\u6700\u5c0f\uff0c\u6211\u4eec\u8d2a\u5fc3\u80af\u5b9a\u8981\u4f7fk\u6b21\u514d\u8d39\u7684\u8d44\u683c\u7528\u5b8c\uff0c\u90a3\u4e48\u6700\u5212\u7b97\u7684\u65b9\u6848\u80af\u5b9a\u662f\u62ff\u6700\u957f\u7684k\u6761\u8def\u4f7f\u4e4b\u514d\u8d39\uff0c\u7136\u540e\u4ed8\u7b2ck+1\u957f\u8def\u7684\u957f\u5ea6\u7684\u94b1\u3002\u3002\u3002\u8fd9\u6837\u7684\u8d2a\u5fc3\u601d\u8def\u663e\u7136\u662f\u6b63\u786e\u7684\u3002\n\n**\u601d\u8def**\uff1a\u6211\u4eec\u9996\u5148\u4e8c\u5206\u7b2ck+1\u957f\u7684\u8def\u7684\u957f\u5ea6(\u5373\u7b54\u6848)\uff0c\u8fb9\u754c\u503cl\u663e\u7136\u662f0\u3001r\u662f1000000(\u9898\u76ee\u4e2d\u8bf4\u8fb9\u6700\u957f\u4e3a1000000)\uff0c\u7136\u540e\u5173\u952e\u662f\u5982\u4f55\u5224\u65ad\u6b63\u786e\u6027\u3002\u6211\u4eec\u8003\u8651\u7b80\u5316\u95ee\u9898\uff0c\u5bf9\u4e8e\u957f\u5ea6\u5c0f\u4e8e\u4e8c\u5206\u51fa\u7684\u7b54\u6848\u7684\u7ebf\u6bb5\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u4ed8\u4ef7\u94b1\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u5176\u6743\u503c\u770b\u4f5c\u662f0;\u540c\u7406\uff0c\u5927\u4e8e\u4e8c\u5206\u7684\u503c\u7684\u8def\u5f84\uff0c\u6211\u4eec\u5c06\u957f\u5ea6\u770b\u4f5c1(\u610f\u5473\u7740\u6211\u9700\u8981\u4f7f\u75281\u6b21\u514d\u8d39\u7684\u8d44\u683c)\u3002so\uff0c\u6211\u4eec\u8dd1\u4e00\u904dspfa\uff0c\u770b\u5230\u4e86n\u70b9\u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\uff0c\u5982\u679c\u5927\u4e8ek\uff0c\u5219\u4e0d\u884c\uff0c\u7f29\u5c0fr\u8303\u56f4\u7ee7\u7eed\u4e8c\u5206;\u5982\u679c\u5c0f\u4e8e\uff0c\u5219\u6709\u53ef\u80fd\u66f4\u5c0f\uff0c\u7f29\u5c0fl\u8303\u56f4\u7ee7\u7eed\u4e8c\u5206\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\n#define ll long long \n#define il inline\nstruct edge{\nint to,next,v;\n}e[20005];\nint n,p,k,cnt,h[1005],dis[1005],q[1005];\nbool pd[1005];\nil void add(int u,int v,int w){\n    e[++cnt].to=v;\n    e[cnt].v=w;\n    e[cnt].next=h[u];\n    h[u]=cnt;\n}\nil bool check(int x)\n{\n         memset(dis,0x3f,sizeof(dis));\n    int t=0,w=1,i,now,s;\n         dis[1]=0;q[t]=1;pd[1]=1;\n    while(t!=w)\n     {\n        now=q[t];t++;\n        if(t==1001)t=0;\n        i=h[now];\n            while(i){\n                if(e[i].v>x)s=dis[now]+1;\n                else s=dis[now];\n                if(s<dis[e[i].to])\n                    {\n                        dis[e[i].to]=s;\n                        if(!pd[e[i].to])\n                            {\n                                q[w++]=e[i].to;\n                                pd[e[i].to]=1;\n                                if(w==1001)w=0;\n                            }\n                    }\n                    i=e[i].next;\n                    }\n            pd[now]=0; \n        }\n     if(dis[n]<=k)return 1;\n     return 0;\n }\nint main()\n{\n    //freopen(\"phoneline.in\",\"r\",stdin);\n    //freopen(\"phoneline.out\",\"w\",stdout);\n    scanf(\"%d%d%d\",&n,&p,&k);\n    int u,v,w,l=0,r=1000000,mid;\n    for(int i=1;i<=p;i++){\n            scanf(\"%d%d%d\",&u,&v,&w);\n            add(u,v,w);\n            add(v,u,w);\n    }\n    int ans=-1;\n    while(l<=r){\n                   mid=(l+r)>>1;\n            if(check(mid)){r=mid-1;ans=mid;}\n            else l=mid+1;\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1509001572,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "# \u672c\u9898\u4f5c\u6cd5 \uff1a \u4e8c\u5206\u7b54\u6848+\u53cc\u7aef\u961f\u5217bfs\n\n## \u524d\u5e8f\u77e5\u8bc6\u70b9\uff1a\u56fe\u7684\u50a8\u5b58\u4e0e\u904d\u5386\uff0c\u4e8c\u5206\u7b54\u6848\uff0cbfs\u6c42\u6700\u77ed\u8def\n\u5728\u505a\u8fd9\u9053\u9898\u4e4b\u524d\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b [p2243](https://www.luogu.org/problemnew/show/P2243) \u7535\u8def\u7ef4\u4fee\uff0c\u6ce8\u610f\u5230\u8f6c\u5316\u4e3a\u4e00\u4e2a\u8fb9\u6743\u53ea\u4e3a _0_ \u6216 _1_ \u7684\u65e0\u5411\u56fe\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u6700\u5927\u7684\u82b1\u8d39x\uff0cx\u5c5e\u4e8e[l,r],(l\u4e3a\u6700\u5c0f\u82b1\u8d39\uff0cr\u4e3a\u6700\u5927\u82b1\u8d39)\uff0c x\u7136\u540e\u5c06\u5927\u4e8ex\u7684\u8fb9\u770b\u505a\u6743\u503c\u4e3a1\u7684\u8fb9\uff0c\u5c06\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u8fb9\u770b\u505a\u6743\u503c\u4e3a\u96f6\u7684\u8fb9\uff0c\u7136\u540e\u627e\u5230\u4ece\u70b91\u5230\u70b9n\u7684\u6700\u77ed\u8def\uff0c\u82e5\u6700\u77ed\u8def\u7684\u957f\u5ea6\u5927\u4e8ek\uff0c\u5219\u8981\u8fde\u63a5\u7684\u5bf9\u6570\u5927\u4e8ek\u5bf9\uff0c\u5728[x+1,r]\u4e2d\u7ee7\u7eed\u4e8c\u4efd\u67e5\u627e\uff1b\u82e5\u6700\u77ed\u8def\u7684\u957f\u5ea6\u5c0f\u4e8ek\uff0c\u5219\u8981\u8fde\u63a5\u7684\u5bf9\u6570\u6bd4k\u5c0f\uff0c\u5728[l,x]\u4e2d\u7ee7\u7eed\u4e8c\u4efd\u67e5\u627e\uff0c\u6700\u7ec8\uff0cl\u5373\u4e3a\u6240\u6c42\u3002\n\n\u8d34\u4e0aac\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <deque>\n#include <cstring>\n\nusing namespace std;\n\nint vis[10008];\nint d[10008];\nint head[10008], edge[100008], ver[100008], next[100008];\nint tot;\nint n, p, k, maxx = 0;\nvoid add(int x, int y, int z) //\u90bb\u63a5\u8868\u5efa\u56fe\uff0c\u6ce8\u610f\u65e0\u5411\n{\n\tver[++tot] = y;\n\tedge[tot] = z;\n\tnext[tot] = head[x];\n\thead[x] = tot;\n\tver[++tot] = x;\n\tedge[tot] = z;\n\tnext[tot] = head[y];\n\thead[y] = tot;\n}\nint check(int x) //\u4e8c\u5206\u68c0\u6d4b\n{\n//\tcout<<x<<\":\";\n\t//\u53cc\u7aefbfs\uff0c\u53c2\u8003p2243\n\tmemset(d,0,sizeof(d));\n\tmemset(vis,0,sizeof(vis));\n\tdeque<int> q;\n\tq.push_back(1);\n\td[1] = 0;\n\tvis[1] = 1;\n\twhile(q.size())\n\t{\n\t\tint a = q.front();\n\t\tq.pop_front();\n\t\tfor(int i = head[a]; i; i = next[i])\n\t\t{\n\t\t\tint y = ver[i];\n\t\t\tif(!vis[y] || d[y] >= d[a] + 1)\n\t\t\tif(edge[i] <= x)\n\t\t\t{\n\t\t\t\tvis[y] = 1;\n\t\t\t\tq.push_front(y);\n\t\t\t\td[y] = d[a];\n\t\t\t//\tcout<<\"d\"<<y<<\"=\"<<d[a]<<endl;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tvis[y] = 1;\n\t\t\t\tq.push_back(y);\n\t\t\t\td[y] = d[a] + 1; \n\t\t\t//\tcout<<\"d\"<<y<<\"=\"<<d[a]+1<<endl;\n\t\t\t}\n\t\t}\n\t}\n\t//cout<<d[n]<<endl;\n\tif(d[n] > k)\n\treturn 0;\n\telse\n\treturn 1;\n}\nint main()\n{\n\tcin>>n>>p>>k;\n\tfor(int i = 0; i < p; i++)\n\t{\n\t\tint x, y, z;\n\t\tcin>>x>>y>>z;\n\t\tadd(x, y, z);\n\t\tmaxx = max(maxx, z);\n\t} \n//\tcout<<maxx<<endl;\n\tint l = 1, r = maxx;\n\twhile(l < r)\n\t{\n\t\tint mid = (l + r) / 2;\n\t\tif(check(mid))\n\t\tr  = mid;\n\t\telse\n\t\tl = mid + 1;\n\t } \n\t if(l!=1) \n\t cout<<l;\n\t else\n\t cout<<\"-1\";\n\treturn 0;\n}\n```\n\u6ce8\u610f\u51e0\u70b9\uff1a\n\n1. \u6700\u540e\u7b54\u6848\u9700\u7279\u5224\uff0c\u82e5\u4e0d\u6ee1\u8db3\uff0c\u8f93\u51fa-1\uff1b\n1. \u8bf7\u6ce8\u610f\u8fd9\u4e00\u884c\n```cpp\nif(!vis[y] || d[y] >= d[a] + 1)\n```\n\u53ef\u7ed3\u5408\u6837\u4f8b\u7684\u56fe\u793a\uff0c\u5c1d\u8bd5\u7406\u89e3\uff1b![](https://cdn.luogu.com.cn/upload/pic/39954.png)",
        "postTime": 1540568343,
        "uid": 90599,
        "name": "Blair3863",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u8003\u8651\u7528$f[i][j]$\u8868\u793a**\u4ece1\u5230\u70b9i\uff0c\u7528\u4e86j\u6761\u514d\u8d39\u7ebf**\u7684\u6700\u5c0f\u82b1\u8d39\u3002\n\n\n\u8fd9\u6837\u7684\u72b6\u6001\u7a7a\u95f4\u662f1000\\*1000\u7684\uff0c\u53ef\u4ee5\u5b58\u4e0b\u6765\u3002\n\n\n\u5bf9\u4e8e\u4e00\u6761\u8fb9e\uff0cu->v\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u8f6c\u79fb\n\n\n\u200b    \u4e0d\u7528\u514d\u8d39\u7ebf:$f[v][k] = min(f[v][k],max(f[u][k],len[e]))$\n\n\n\u200b    \u7528\u514d\u8d39\u7ebf:$f[v][k+1]=min(f[v][k+1],f[u][k])$\n\n\n\u8003\u8651\u7ed9\u7684\u4e0d\u662f\u4e00\u4e2aDAG\u56fe\uff0c\u6ca1\u6709\u4e00\u4e2a\u786e\u5b9a\u7684\u987a\u5e8f\u6765dp\uff0c\u6240\u4ee5\u6211\u4eec\u7528spfa\u6765\u8f6c\u79fb\u8fd9\u4e9b\u72b6\u6001\u3002\u628a\u6bcf\u4e00\u4e2a\u72b6\u6001\u60f3\u6210\u4e00\u4e2a\u70b9\uff0c\u6309\u4e0a\u9762\u7684\u8f6c\u79fb\u6765\u8fde\u8fb9\uff0c\u7136\u540e\u8dd1\u6700\u77ed\u8def\u5c31\u6c42\u51fa\u4e86\u6bcf\u4e2a\u72b6\u6001\u7684\u6700\u5c0f\u503c\u3002\u5f53\u7136\u6211\u4eec\u5b9e\u9645\u5728\u505a\u7684\u65f6\u5019\u4e0d\u7528\u771f\u7684\u5efa\u51fa\u8fd9\u68371e6\u4e2a\u70b9\u7684\u56fe\uff0c\u53ea\u9700\u8981\u677e\u5f1b\u7684\u65f6\u5019\u5206\u7c7b\u5c31\u884c\u4e86\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n\n```cpp\n/*\n###########################################################################\n#                                Code by :                                #\n#  /$$              /$$$$$$                                               #\n# | $$             /$$__  $$                                              #\n# | $$$$$$$       | $$  \\__/                    /$$   /$$       /$$$$$$$$ #\n# | $$__  $$      | $$$$                       |  $$ /$$/      |____ /$$/ #\n# | $$  \\ $$      | $$_/                        \\  $$$$/          /$$$$/  #\n# | $$  | $$      | $$                           >$$  $$         /$$__/   #\n# | $$  | $$      | $$                          /$$/\\  $$       /$$$$$$$$ #\n# |__/  |__/      |__/            /$$$$$$      |__/  \\__/      |________/ #\n#                                |______/                                 #\n###########################################################################\n*/\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<cstring>\n#include<cmath>\n#include<set>\nusing namespace std;\n\nconst int maxn = 1005, maxm = 20005;\nint n,p,k;\nint h[maxn],nxt[maxm],to[maxm],len[maxm],tot;\nint dis[maxn][maxn];\nbool vis[maxn][maxn];\nstruct Node{\n    int u,k;//\u5b58\u5f53\u524d\u70b9\u548c\u7528\u8fc7\u7684\u514d\u8d39\u7ebf\n    Node(int x,int y){\n        u = x; k = y;\n    }\n    void operator=(const Node b){\n        u = b.u; k = b.k;\n    }\n    void is(int x,int y){\n        u = x; k = y;\n    }\n};\n\ninline void spfa(){\n    memset(dis,0x2f,sizeof(dis));\n    queue<Node> q;\n    Node a(1,0);//\u8fb9\u754c\u6761\u4ef6\uff0cf[1][0] = 0\n    q.push(a); vis[1][0] = 1; dis[1][0] = 0;\n    while(!q.empty()){\n        a = q.front(); q.pop();\n        int u =a.u, uk = a.k; //\u53d6\u51fa\u5f53\u524d\u70b9\u548c\u5f53\u524d\u7528\u4e86\u7684\u514d\u8d39\u7ebf\u6570\u91cf\n        vis[u][uk] = 0;\n        for(int i=h[u],v;i;i=nxt[i]){\n            v = to[i];\n            //\u4e0d\u7528\u514d\u8d39\u7ebf\n            if(max(dis[u][uk],len[i]) < dis[v][uk]){\n                dis[v][uk] = max(dis[u][uk],len[i]);\n                if(!vis[v][uk]){\n                    a.is(v,uk);\n                    q.push(a); vis[v][uk] = 1;\n                }\n            }\n            //\u7528\u514d\u8d39\u7ebf\n            if(uk < k && dis[u][uk] < dis[v][uk+1]){\n                dis[v][uk+1] = dis[u][uk];\n                if(!vis[v][uk+1]){\n                    a.is(v,uk+1);\n                    q.push(a); vis[v][uk+1] = 1;\n                }\n            }\n        }\n    }\n}\n\nint main(){\n    cin>>n>>p>>k;\n    for(int i=1;i<=p;i++){\n        int u,v,w; cin>>u>>v>>w;\n        to[++tot] = v; nxt[tot] = h[u]; len[tot] = w; h[u] = tot;\n        to[++tot] = u; nxt[tot] = h[v]; len[tot] = w; h[v] = tot;\n    }\n    spfa();\n    //\u5224\u65ad\u65e0\u89e3 791621423\u662f\u5f00\u59cb\u8d4b\u7684INF\n    if(dis[n][k] == 791621423) cout<<-1<<endl;\n    else cout<<dis[n][k]<<endl;\n    return 0;\n}\n```\n\n\u5176\u5b9e\u697c\u4e0b\u6709\u4e00\u7bc7bfs\uff0c\u5c31\u662f\u6ca1\u6709\u5224\u65ad\u91cd\u590d\u8fdb\u961f\u7684spfa\u3002\n\n\n~~p.s. \u5176\u5b9e\u5e73\u65f6\u8fd9\u79cd\u5e26\u73af\u7684dp\uff0c\u8303\u56f4\u6bd4\u8f83\u5c0f\u7684\u8bdd\u90fd\u53ef\u4ee5\u4fe1\u4ef0spfa~~\n",
        "postTime": 1509178087,
        "uid": 35231,
        "name": "hf_xz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "#### \u867d\u7136\u8fd9\u9898\u9898\u89e3\u5df2\u7ecf\u6709\u4e0d\u5c11\u4e86\uff0c\u4f46\u662f\u849f\u84bb\u8fd8\u662f\u60f3\u6765\u4e00\u53d1\u9898\u89e3qwq\n\n\u770b\u4e86\u770b\u5404\u8def\u795e\u4ed9\u7684\u9898\u89e3\uff0c\u53d1\u73b0\u5927\u90e8\u5206\u90fd\u662fspfa+\u4e8c\u5206\u7684\u7b54\u6848\n\n\u4f46\u662f\u672c\u849f\u84bb\u770b\u5b8c\u9898\u76ee\u7684\u7b2c\u4e00\u53cd\u5e94\u5c31\u662f\n\n## \u8fd9\u4e0d\u5c31\u662f\u4e2a\u5206\u5c42\u56fe\u6700\u77ed\u8def\u5417\n\n#### \u76f4\u63a5\u5efa\u56fe\u5f00\u51b2\n\n\u6d4b\u4e00\u6ce2\u6837\u4f8b...... \u8f93\u51fa5\uff1f\uff1f\uff1f\n\n\u539f\u6765\u662f\u6ca1\u770b\u9898\u7684\u9505\uff0c\u9898\u76ee\u7ed9\u51fa\u7684\u8ba1\u7b97\u89c4\u5219\u662f\u53ea\u82b1\u8d39\u8def\u7ebf\u4e2d\u6700\u957f\u7684\u4e00\u6761\u8def\u7684\u4ef7\u94b1\uff0c\u800c\u4e0d\u662f\u5c06\u6240\u6709\u8def\u5f84\u957f\u5ea6\u76f8\u52a0\u6c42\u51fak\u6b21\u514d\u8d39\u7684\u603b\u7684\u6700\u77ed\u8def\n\n\u90a3\u53ea\u9700\u8981\u628a\u4ee3\u7801\u6539\u4e00\u4e0b\u5c31\u597d\u4e86\n\n\u4f46\u662f\u849f\u84bb\u672c\u6765\u5c31\u4e0d\u662f\u5f88\u4f1a\u5206\u5c42\u56fe\uff0c\u5361\u4e86\u534a\u5929\u603b\u662f\u51fa0......\n\n\u65e0\u5948\u4e4b\u4e0b\u53ea\u80fd\u6362dijkstra+dp\u5207\u4e86\u8fd9\u9898\n\n\u5f53\u7136\u8fd8\u7528\u4e86\u5806\u4f18\u5316\uff0c\u603b\u7684\u6765\u8bf4\u8fd9\u9898\u8fd8\u662f~~\u5f88\u6c34\u7684~~\uff0c\u5c31\u662f\u4ee3\u7801\u6bd4\u8f83\u96be\u4ee5\u5b9e\u73b0\uff08\u4e2a\u4eba\u89c2\u70b9\uff09\n\n### \u4ee3\u7801\u8fd8\u662f\u6700\u76f4\u89c2\u7684\uff0c\u5404\u4f4d\u795e\u4ed9\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u8fdb\u884c\u7406\u89e3\n\n```\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\nusing namespace std;\n\nconst int N=100050,M=10005,inf=(1<<30);\nint cnt,to[N],nxt[N],w[N],n,T,head[N],m,flag[M][21],d[M][21];\nint read()\n{\n    int res=0,kkk=1;char ch=' ';\n    while(ch<'0'||ch>'9'){\n        ch=getchar();\n        if(ch=='-')kkk=-1;\n    }\n    while(ch>='0'&&ch<='9'){\n        res=res*10+ch-'0';\n        ch=getchar();\n    }\n    return res*kkk;\n}\nstruct node{\n    int x,d,num;\n    friend bool operator < (node p, node q){\n        return p.d > q.d;\n    }\n};\nvoid addedge(int x,int y,int dis)\n{\n    to[++cnt]=y;\n    w[cnt]=dis;\n    nxt[cnt]=head[x];\n    head[x]=cnt;\n}\nvoid add(int x,int y,int z)\n{\n    addedge(x,y,z);\n    addedge(y,x,z);\n}\npriority_queue <node> q;\nvoid dijkstra()\n{\n    for(int i=1;i<=n;i++){\n        for(int j=0;j<=T;j++)\n            d[i][j]=inf;\n    }\n    d[1][0]=0;\n    q.push(node{1,0,0});\n    while(!q.empty()){\n        node k=q.top();\n        q.pop();\n        int x=k.x,num=k.num;\n        if(flag[x][num])continue;\n        flag[x][num]=1;\n        for(register int i=head[x];i;i=nxt[i])\n        {\n            int kk=to[i];\n            if(d[kk][num]>max(d[x][num],w[i])){\n                d[kk][num]=max(d[x][num],w[i]);\n                if(!flag[kk][num])q.push(node{kk,d[kk][num],num});\n                }\n                if(num<T&&d[kk][num+1]>d[x][num]){\n                    d[kk][num+1]=d[x][num];\n                    if(!flag[kk][num+1])q.push(node{kk,d[kk][num+1],num+1});\n                }\n        }\n    }\n}\nint main()\n{\n    n=read(),m=read(),T=read();\n    for(register int i=1;i<=m;i++){\n        int l,r,dis;\n        l=read(),r=read(),dis=read();\n        add(l,r,dis);\n    }\n    dijkstra();\n    if(d[n][T]!=inf)\n        printf(\"%d\\n\",d[n][T]);\n    else printf(\"-1\\n\");\n    return 0;\n}\n```\n### \u4e0b\u9762\u518d\u63d0\u4f9b\u4e00\u4efd\u5206\u5c42\u56fe\u6700\u77ed\u8def\u7684\u4ee3\u7801\n\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N=100050;\nint to[N],w[N],n,K,m,cnt,nxt[N],head[N],d[N],vis[N],s,t;\nint read(){\n    int res=0,kkk=1;char ch=' ';\n    while(!isdigit(ch)){ch=getchar();if(ch=='-')kkk=-1;}\n    while(isdigit(ch)){res=res*10+ch-'0';ch=getchar();}\n    return res*kkk;\n}\nvoid qxx(int x,int y,int dis){\n    to[++cnt]=y;\n    w[cnt]=dis;\n    nxt[cnt]=head[x];\n    head[x]=cnt;\n}\nvoid add(int x,int y,int z){\n    qxx(x,y,z),qxx(y,x,z);\n}\nstruct node{\n    int x,d;\n    friend bool operator<(node x,node y){\n        return x.d>y.d;\n    }\n};\npriority_queue<node>q;\nvoid dijkstra(){\n    memset(d,63,sizeof(d));\n    q.push(node{s,0});\n    d[s]=0;\n    while(!q.empty()){\n        int k=q.top().x;\n        q.pop();\n        if(vis[k])continue;\n        vis[k]=1;\n        for(register int i=head[k];i;i=nxt[i]){\n            int kk=to[i];\n            if(d[kk]>max(d[k],w[i]))\n            {\n                d[kk]=max(d[k],w[i]);\n                if(!vis[kk]){\n                    q.push(node{kk,d[kk]});\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    n=read(),m=read(),K=read();\n    s=1,t=n;\n    for(register int i=1;i<=m;i++){\n        int l=read(),r=read(),q=read();\n        add(l,r,q);\n        for(register int j=1;j<=K;j++){\n            add(j*n+l,j*n+r,q);\n            qxx((j-1)*n+l,j*n+r,0);\n            qxx((j-1)*n+r,j*n+l,0);\n        }\n    }\n    dijkstra();\n    if(d[K*n+t]!=1061109567)//\u521d\u59cb\u5316\u7684\u503c\u82e5\u6ca1\u6709\u6539\u53d8\u5c31\u8bf4\u660e\u65e0\u89e3\n        printf(\"%d\\n\",d[K*n+t]);\n    else printf(\"-1\\n\");\n    return 0;\n}\n```\n\n\u5982\u679c\u6709\u9700\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u770b[\u8fd9\u91cc](https://pzhpzhpzh.github.io/2019/03/01/%E6%9C%80%E7%9F%AD%E8%B7%AF/#more)\uff0c\u8bb2\u89e3\u7684\u8fd8\u662f\u5f88\u8d5e\u7684ovo\n\n~~\u867d\u7136\u6700\u540e\u6709\u795e\u4ed9\u544a\u8bc9\u849f\u84bb\u4e8c\u5206+spfa\u5c31\u662f\u5206\u5c42\u56fe\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u8981\u53d1\u9898\u89e3qaq~~",
        "postTime": 1552722220,
        "uid": 123318,
        "name": "ViXpop",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "**Tips\uff1a\u770b\u5230\u8fd9\u6837\u7684\u5b57\u773c\uff0c\u4f60\u5c31\u8981\u60f3\u8d77\u4e8c\u5206**  \n>\u6700\u5927\u2026\u2026\u91cc\u7684\u6700\u5c0f\u2026\u2026\n\n or\n \n>\u6700\u5c0f\u2026\u2026\u91cc\u7684\u6700\u5927\u2026\u2026\n\n\u90a3\u4e48\u8fd9\u9898\u663e\u7136\u662f\u4e00\u4e2a\u6700\u77ed\u8def\u95ee\u9898\uff0c\u533a\u522b\u4e8e\u522b\u7684\u6700\u77ed\u8def\uff0c\u672c\u9898\u53ef\u4ee5\u6709$K$\u6761\u514d\u8d39\u7ebf\u8def  \n\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u5f53\u7136\u662f~~\u679a\u4e3e~\\(\u2267\u25bd\u2266)/~\u5566\u5566\u5566~~  \n\n\u7136\u540e\u5c31$TLE$\u4e86QAQ  \n\n\u8fd9\u9053\u9898\u76ee\u663e\u7136\u8981\u7528\u4e8c\u5206\u53bb\u505a\uff0c\u90a3\u4e48\uff0c\u4e8c\u5206\u4ec0\u4e48\u5462\uff1f\u5f53\u7136\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u672c\u9898\u6709\u4e00\u4e2a\u5f88~~\u548c\u8c10\u7684~~\u53cb\u597d\u7684\u5b57\u773c\uff1a\u7b54\u6848\u662f**\u6700**\u957f\u7684\u957f\u5ea6\u3002  \n\n\u81f3\u4e8e\u601d\u8def\u5982\u4e0b\uff1a\u9996\u5148\u4e8c\u5206\u7b54\u6848\uff0c\u5c06\u6240\u6709\u7ebf\u4e2d\u5927\u4e8e\u7b54\u6848\u7684\u6807\u8bb0\u4e3a$1$\uff08\u9700\u8981\u4f7f\u7528\u4e00\u6b21\u514d\u8d39\u673a\u4f1a\uff09,\u4e0d\u5927\u4e8e\u7b54\u6848\u7684\u6807\u8bb0\u4e3a0\uff08\u4e0d\u9700\u8981\u4f7f\u7528\u514d\u8d39\u673a\u4f1a\uff09,\u6709\u4eba\u8bf4\uff0c\u8fd9\u9898\u4e0d\u80fd\u7528**Dijkstra**\uff1f\u5f53\u7136\u4e0d\u884c\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u8fea\u6770\u65af\u7279\u62c9~~\u7b97\u6cd5\u6548\u7387\u4f4e\u4e0b~~\u4ed6\u65e0\u6cd5\u5bf90\u8fb9\u6743\u8fdb\u884c\u5904\u7406\uff0c\u6781\u6709\u53ef\u80fd\u6b7b\u5faa\u73af\uff0c\u800cSPFA\u7684\u539f\u7406\u662f\uff1a\u66f4\u65b0\u540e\u4e0d\u4f4e\u4e8e\u5f53\u524d\u957f\u5ea6\u5c31**\u4e0d\u8fdb\u961f\u5217**\uff0c\u53ef\u4ee5\u6709\u6548\u7684\u5904\u74060\u7684\u95ee\u9898\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\nusing namespace std;\ninline int read() {//\u5feb\u8bfb\n    int X=0,w=0;\n    char ch=0;\n    while(!isdigit(ch)) {\n        w|=ch=='-';\n        ch=getchar();\n    }\n    while(isdigit(ch)) X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n    return w?-X:X;\n}\ninline double dbread() {//\u5c0f\u6570\u5feb\u8bfb\n    double X=0,Y=1.0;\n    int w=0;\n    char ch=0;\n    while(!isdigit(ch)) {\n        w|=ch=='-';\n        ch=getchar();\n    }\n    while(isdigit(ch)) X=X*10+(ch^48),ch=getchar();\n    ch=getchar();\n    while(isdigit(ch)) X+=(Y/=10)*(ch^48),ch=getchar();\n    return w?-X:X;\n}\ninline void write(int x) {//\u5feb\u4e9b\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}\n```\n\n# \u81f3\u6b64\u4e3a\u6b62\uff0c\u4e0a\u9762\u90fd\u662f\u6211\u7684\u6a21\u677fAwA\n\n```cpp\nstruct node {//\u7a0b\u5e8f\u6838\u5fc3\n    int to,next,val;\n} e[20005];//\u524d\u5411\u661f\nint tot=0,head[1005],dis[1005],n,k,p,ans=-1;\nbool vis[1005];\nqueue<int> q;//SPFA\u961f\u5217\nvoid add(int u,int v,int w) {//\u5efa\u8fb9(\u524d\u5411\u661f)\n    e[++tot]=(node) {\n        v,head[u],w\n    };\n    head[u]=tot;\n}\nbool spfa(int x) {//SPFA(judge\u51fd\u6570)\n    memset(dis,42,sizeof(dis));//\u521d\u59cb\u5316,\u56e0\u4e3a\u6709\u591a\u6b21judge\n    memset(vis,0,sizeof(vis));//\u521d\u59cb\u5316,\u56e0\u4e3a\u6709\u591a\u6b21judge\n    dis[1]=0;\n    q.push(1);\n    vis[1]=true;\n    int s;\n    while(!q.empty()) {//SPFA\uff08STL\u961f\u5217\u5b9e\u73b0\uff09\n        int now=q.front();\n        q.pop();\n        for(int i=head[now]; i; i=e[i].next) {\n            if(e[i].val>x)s=dis[now]+1;//\u5982\u679c\u5927\u4e8e\u5f53\u524d\u4e8c\u5206\u51fa\u6765\u7684\u7b54\u6848\uff08\u5982\u4e0a\u6240\u8ff0\uff09\n            else s=dis[now];\n            if(s<dis[e[i].to]) {\n                dis[e[i].to]=s;\n                if(!vis[e[i].to])q.push(e[i].to),vis[e[i].to]=true;\n            }\n        }\n        vis[now]=0;\n    }\n    if(dis[n]<=k)return 1;//\u5982\u679c\u9700\u8981\u514d\u8d39\u7684\u8fb9\u5728\u8303\u56f4\u4e4b\u5185\uff0c\u8bf4\u660e\u8fd9\u79cd\u7b54\u6848\u662f\u53ef\u884c\u7684,\u5bfb\u627e\u66f4\u5c0f\u7684\u7b54\u6848\n    return 0;\n}\nint main() {\n    n=read();//\u8bfb\u5165\n    p=read();//\u8bfb\u5165\n    k=read();//\u8fd8\u662f\u8bfb\u5165\n    for(int i=1; i<=p; i++) {//\u5efa\u8fb9\n        int u,v,w;\n        u=read();\n        v=read();\n        w=read();\n        add(u,v,w);//\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u8981\u5efa\u6765\u53bb\u4e24\u8fb9\n        add(v,u,w);\n    }\n    int l=0,r=1000000;\n    //\u4e8c\u5206,\u6211\u8fd9\u91cc\u76f4\u63a5\u4ece\u6700\u5927\u8ddd\u79bb\u5f00\u59cb\u67e5\u627e\uff0c\u4f60\u4eec\u4e5f\u53ef\u4ee5\u4ece\u8f93\u5165\u7684\u6570\u636e\u4e2d\u627e\u6700\u5927\u503c\uff08\u53ef\u80fd\u4f1a\u6bd4\u6211\u8fd9\u4e2a\u5feb\u4e00\u70b9\uff09\n    while(l<=r) {//\u4e8c\u5206\n        int mid=(l+r)>>1;\n        if(spfa(mid)) {\n            ans=mid;//\u4fdd\u5b58\u4e0b\u5f53\u524d\u7b54\u6848\uff0c\u5c31\u53ef\u4ee5\u653e\u5fc3\u7684\u53bb\u627e\u66f4\u5c0f\u7684\u4e86\n            r=mid-1;\n        } else l=mid+1;\n    }\n    write(ans);//\u8f93\u51fa\n    return 0;//\u8fd9\u53ef\u662f\u4e2a\u597d\u4e60\u60ef\n}\n```\n\n\u5173\u4e8e\u4e8c\u5206\uff0c\u6709\u5f88\u591a\u5199\u6cd5\uff0c\u6211\u4e2a\u4eba\u559c\u6b22\u8fd9\u79cd\u5199\u6cd5\uff0c\u627e\u5230\u7b54\u6848\u4e4b\u540e\u4fdd\u5b58\u4e0b\u6765\uff0c\u6709\u4e00\u4e9b\u5199\u6cd5\u662f\u8f93\u51faR\u6216L\u7684\uff0c\u8fd9\u4e2a\u5c31\u8981\u770b\u4e2a\u4eba\u559c\u597d\u4e86\n\n\n\u624b\u6253\u633a\u8f9b\u82e6\uff0c\u4e0d\u5982\u8ba9\u6211\u8fc7\uff1f",
        "postTime": 1527557019,
        "uid": 58399,
        "name": "\u72f8\u72f8\u517b\u7684\u654f\u654f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u5728\u9898\u89e3\u680f\u770b\u5230\u5404\u4f4ddalao\u90fd\u7528\u4e8c\u5206\u6f47\u6d12\u5730\u79d2\u8fc7\uff0c\u6211\u5f31\u5f31\u7684\u5199\u4e86\u4e00\u4e2aBFS\uff0c\u671f\u671b\u5f97\u520650\uff0c\u6ca1\u60f3\u5230A\u6389\u4e86\u3002\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u7528\u4e00\u4e2a\u72b6\u6001{now,nowk,nowdis}\u6765\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u8bf7\u51b5\uff1a\u8d70\u5230\u4e86\u54ea\u90a3\u4e2a\u8282\u70b9\uff0c\u7528\u6389\u4e86\u591a\u5c11\u4e2a\u514d\u8d39\u7ebf\uff0c\u5f53\u524d\u82b1\u8d39\u662f\u51e0\n\n\u7136\u540e\u4ece\u6bcf\u4e2a\u8282\u70b9\uff0c\u5411\u4e0e\u5b83\u76f8\u8fde\u7684\u8282\u70b9\u6269\u5c55\u514d\u8d39\u548c\u4e0d\u514d\u8d39\u4e24\u79cd\u8bf7\u51b5\uff0c\n\n\u4f46\u662f\u8fd9\u6837\u5f88\u53ef\u80fd\u4e0d\u662fTLE\u5c31\u662fRE\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u8981\u52a0\u4e0a\u526a\u679d\uff08BFS\u7684\u526a\u679d\u597d\u795e\u5947\u7684\u8bf4\uff09\uff0c\n\n\u7528\u6570\u7ec4mink[i][j]\u8868\u793a\u8d70\u5230i\u8282\u70b9\uff0c\u7528\u4e86j\u6839\u514d\u8d39\u7ebf\uff0c\u82b1\u8d39\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff0c\n\n\u5982\u679c\u6269\u5c55\u7684\u65b0\u72b6\u6001\u8fd8\u4e0d\u5982mink[i][j]\u4e2d\u5df2\u7ecf\u50a8\u5b58\u7684\u72b6\u6001\u4f18\uff0c\u90a3\u5c31\u6ca1\u5fc5\u8981\u6269\u5c55\u4e86\u3002\n\n\u8fd9\u6837\u65f6\u95f4\u5c31\u63a7\u5236\u5728\u4e86\u53ef\u4ee5\u63a5\u53d7\u7684\u8303\u56f4\u4e4b\u5185\u3002\n\n\u961f\u5217\u6700\u597d\u662f\u5faa\u73af\uff0c\u5426\u5219\u6211\u4e5f\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u70b8\u6389\u3002\n\n\u6700\u540e\uff0c\u5728mink[n][0~k]\u4e4b\u4e2d\u53d6\u6700\u5c0f\u503c\u5c31\u662f\u7ed3\u679c\u4e86\u3002\n\n\u9644\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<algorithm>\nusing namespace std; \nstruct edge{\n    int to;int dis;int next;\n};\nstruct node{\n    int now;int nowk;int nowdis;\n};\nnode q[1000000+666];\nedge e[10000*3+666];\nint h[1000+666];\nint p,hh,tt;\nint n,m,k;\nint mink[1005][1005];//\u5230\u8fbei\u70b9\uff0c\u4f7f\u7528j\u4e2a\u514d\u8d39\u7ebf\uff0c\u5176\u4e2d\u82b1\u8d39\u6700\u5c0f\u503c\u3002\ninline int ra()\n{\n    int x=0;char ch=getchar();int flag=1;\n    while(ch>'9'||ch<'0'){if(ch=='-')flag=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x*=10;x+=ch-'0';ch=getchar();}\n    return x*flag;\n } \nvoid add(int a,int b,int c)\n{\n     p++;\n    e[p].next=h[a];\n    e[p].to=b;\n     e[p].dis=c;\n     h[a]=p;\n     return ;\n}\ninline void in(int now,int k,int dis)\n{\n     q[tt].now=now;\n     q[tt].nowk=k;\n     q[tt].nowdis=dis;\n     tt++;\n    if(tt==1000000+666)tt=0;\n    return;\n}\nvoid bfs()\n{\n    while(hh!=tt)\n    {\n        int now,nowk,nowdis;\n        now=q[hh].now;nowk=q[hh].nowk;nowdis=q[hh].nowdis;\n        hh++;\n        if(hh==1000000+666)hh=0;\n        for(int i=h[now];i;i=e[i].next)\n        {\n            int to=e[i].to;\n            if(max(nowdis,e[i].dis)<mink[to][nowk])\n            {\n                mink[to][nowk]=max(nowdis,e[i].dis);\n                in(to,nowk,max(nowdis,e[i].dis));\n            }\n            if(nowdis<mink[to][nowk+1]&&nowk<k)\n            {\n                mink[to][nowk+1]=nowdis;\n                in(to,nowk+1,nowdis);\n            }\n        }\n    }\n}\nint main()\n{\n    n=ra();m=ra();k=ra();\n    for(int i=1;i<=m;i++)\n    {\n        int a,b,c;\n        a=ra();b=ra();c=ra();\n        add(a,b,c);\n        add(b,a,c);\n    }\n    in(1,0,0);\n    memset(mink,0x3f,sizeof(mink));\n    for(int i=0;i<=k;i++)mink[1][i]=0;\n    bfs();\n    int ans=0x7fffffff;\n    for(int i=0;i<=k;i++)\n    ans=min(ans,mink[n][i]);\n    //cout<<ans<<endl;\n    if(ans==0x3f3f3f3f)cout<<\"-1\"<<endl;\n    else cout<<ans<<endl;\n    return 0;\n}\n```\n//\u6709\u70b9\u4e11\n\n",
        "postTime": 1508467019,
        "uid": 10793,
        "name": "controlf2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "## \u4e8c\u5206+dij\u9898\u76ee\n\n**\u9996\u5148\u8bfb\u4e00\u904d\u9898\u76ee\uff0c\u4e00\u5b9a\u8981\u4ed4\u7ec6\u8bfb\uff08\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\uff0c\u6211\u5c31\u662f\u53d7\u5bb3\u8005qwq**\n\n\u4f60\u4f1a\u53d1\u73b0\u6700\u7ec8\u7684\u8d39\u7528\u662f\u7531\u6700\u957f\u7684\u7535\u8bdd\u7ebf\u51b3\u5b9a\u7684\uff0c\u800c\u975e\u7535\u8bdd\u7ebf\u957f\u5ea6\u548c\u3002\n\n\u81f3\u6b64\u5c31\u6709\u4e86\u4e00\u4e2a\u57fa\u672c\u601d\u8def\u2014\u2014\u679a\u4e3e\uff08\u4e8c\u5206\uff09\u51fa\u53ef\u80fd\u7684\u6700\u957f\u7535\u8bdd\u7ebf\u957f\u5ea6\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884cdij\u5224\u65ad\u3002\n\ndij\u601d\u8def\u5982\u4e0b\uff1a\n\n1.\u5df2\u77e5\u679a\u4e3e\u51fa\u4e86\u5047\u5b9a\u7b54\u6848ans\uff1b\n\n2.\u5728\u6700\u77ed\u8def\u8fc7\u7a0b\u4e2d\uff0c\u5224\u65ad\u6709\u591a\u5c11\u6761\u7ebf\u957f\u5ea6\u5927\u4e8eans\uff0c\u5e76\u5c06\u5176\u514d\u8d39\uff1b\n\n3.\u6700\u540e\u5224\u65ad\u514d\u8d39\u6761\u6570\uff0c\u82e5\u5927\u4e8e\u7ed9\u51fa\u7684t\u5373\u4e0d\u53ef\u884c\uff0c\u53cd\u4e4b\u53ef\u884c\u3002\n\n## ~~\u5f00long long\uff01\uff01\uff01~~\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long ca,k,ma,ans,cnt,n,m,vis[2050],a,b,dis[2050],nex[20500],fst[2050],v[20500],w[20500],f[2050],sum[2050],ww;\nint dj(long long ans)\n{\n    memset(dis,0x7f/3,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    dis[1]=0;\n    long long minn,t=0;\n   \tfor(register long long i=1;i<=n;i++) \n    {\n       \tminn=1e12;\n       \tfor(long long j=1;j<=n;j++)\n       \t{\n            if(!vis[j]&&dis[j]<minn)\n       \t\t{\n        \t   \tminn=dis[j];\n        \t   \tt=j;\n        \t}\t\n       \t}\n       \tvis[t]=1;\n       \tfor(register long long j=fst[t];j;j=nex[j])\n       \t{\n       \t\tif(w[j]>ans)\n       \t\tdis[v[j]]=min(dis[v[j]],dis[t]+1);\n       \t\telse\n       \t\tdis[v[j]]=min(dis[v[j]],dis[t]);\n       \t}\n   \t}\n   \tif(dis[n]>1e8)\n   \t{\n   \t\tcout<<-1;\n   \t\treturn 2;\n   \t}\n    if(dis[n]>k)\n    return 0;\n    return 1;\n}\nvoid binary(long long l,long long r)\n{\n    if(l>r)\n    {\n        cout<<ans;\n        return ;\n    }\n    long long mid=(l+r)>>1;\n    int dij=dj(mid);\n    if(dij==2)\n        return;\n    if(dij==1)\n    {\n        ans=mid;\n        binary(l,mid-1);\n    }\n    else\n        binary(mid+1,r);\n    return ;\n}\nint main()\n{\n    scanf(\"%lld%lld%lld\",&n,&m,&k);\n    for(long long i=1;i<=m;i++)\n    {\n        scanf(\"%lld%lld%lld\",&a,&b,&ww);\n        ma+=ww;\n        nex[++cnt]=fst[a];\n        fst[a]=cnt;\n        v[cnt]=b;\n        w[cnt]=ww;\n        nex[++cnt]=fst[b];\n        fst[b]=cnt;\n        v[cnt]=a;\n        w[cnt]=ww;\n    }\n    binary(0,ma);\n    return 0;\n} \n\n```\n",
        "postTime": 1554511401,
        "uid": 116368,
        "name": "BinDir0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u6bd4\u8f83\u5957\u8def\u7684\u4e00\u9053\u9898\u3002\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u662f\u8981\u4e8c\u5206\u8fd9\u4e2a\u8d39\u7528\uff0c\u7136\u540e\u6211\u4eec\u601d\u8003\u5982\u4f55`check`\u4ed6\u5408\u4e0d\u5408\u6cd5\u3002\n\n\u4e00\u4e2a\u6bd4\u8f83\u5999\u7684\u601d\u8def\u5c31\u662f\uff0c\u6211\u4eec\u628a\u6574\u4e2a\u56fe\u4e0a\u6240\u6709\u5927\u4e8e`mid`\u7684\u8fb9\u8d4b\u4e3a`0`\uff0c\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e`mid`\u7684\u8fb9\u8d4b\u503c\u4e3a`1`\uff0c\u8fd9\u6837\u7684\u8bdd\u53ea\u9700\u8981\u8dd1\u4e00\u8fb9$bfs$\uff0c\u7136\u540e\u770b\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e$k$\u5373\u53ef.\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(NlogN)$\n\n$Code:$\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n , p , k, ans=-1;\nint l = 1, r;\n\nconst int N = 1e4 + 10;\n\nstruct Edge {\n\tint to , nxt , w;\n}e[N << 1];\n\nint head[N] , cnt;\nvoid add(int u , int v  ,int w) {\n\te[++ cnt].to = v;\n\te[cnt].w = w;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\n\nbool inq[N];\nint dis[N];\nbool check(int x) {\n\tqueue <int> q;\n\tq.push(1);\n\tfor(int i = 2 ; i <= n ; ++ i) dis[i] = 0x3f3f3f3f;\n\tinq[1] = 1; dis[1] = 0;\n\twhile(!q.empty()) {\n\t\tint now = q.front(); q.pop();\n\t\tinq[now] = 0;\n\t\tfor(int i = head[now] ; i ; i = e[i].nxt) {\n\t\t\tint v = e[i].to , w = e[i].w;\n\t\t\tif(w <= x) w = 0; \n\t\t\telse w = 1;\n\t\t\tif(dis[v] > dis[now] + w) {\n\t\t\t\tdis[v] = dis[now] + w;\n\t\t\t\tif(!inq[v]) inq[v] = 1 , q.push(v); \n\t\t\t}\n\t\t}\n\t}\n\treturn dis[n] <= k;\n} \n\nint main () {\n\tscanf(\"%d %d %d\" , &n , &p , &k);\n\tfor(int i = 1 ;  i <= p ; ++ i) {\n\t\tint u , v , w;\n\t\tscanf(\"%d %d %d\" , &u , &v, &w);\n\t\tadd(u , v , w); add(v  , u , w); \n\t\tr += w;\n\t}\n\twhile(l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(check(mid)) ans = mid , r = mid - 1;\n\t\telse l = mid + 1; \n\t}\n\tprintf(\"%d\\n\" , ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1572779558,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "## \u81ea\u8ba4\u4e3a\u5f88\u6e05\u5947\u7684\u601d\u8def\n### %\u4f60\u8d5b\u7528\u4e8630min\u618b\u51fa\u6765\u7684\u601d\u8def\uff0c\u8f83\u597d\u7406\u89e3\uff0c\u9002\u7528\u4e8e\u521d\u5b66\u8005\uff0c\u8dd1\u7684\u6709\u70b9\u6162\u3002\n#### \u603b\u601d\u8def: \u6700\u77ed\u8def+\u4e8c\u5206 (Dijkstra\u5806\u4f18\u5316)\u6700\u77ed\u8def\n#### \u601d\u8def\u63cf\u8ff0\n\u4ed4\u7ec6\u7406\u89e3\u4e86\u4e00\u4e0b\u9898\u610f\uff0c\u662f\u8ba9\u6c42\u4e00\u4e2a\u6700\u5927\u7684\u6700\u5c0f\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u5177\u6709\u5355\u8c03\u6027\uff0c\u4e8c\u5206\u7b54\u6848\u662f\u6ca1\u8dd1\u4e86\u3002\u4f17\u6240\u5468\u77e5\uff0c\u4e8c\u5206\u7b54\u6848\u7684\u96be\u70b9\u5728\u4e8echeck\u51fd\u6570\uff0c\u90a3\u4e48\u600e\u4e48\u68c0\u9a8c\u4e00\u4e2a\u7b54\u6848\u662f\u5426\u5408\u6cd5\u5462\uff1f\n\n\u63d0\u53d6\u4e00\u4e0b\u9898\u610f\uff0c\u5c31\u77e5\u9053\u53ea\u8981\u81f3\u5c11\u6709\u4e00\u6761\u8def\u5f84\u4e2d\u8fb9\u7684\u8fb9\u6743\u5927\u4e8e\u6240\u4e8c\u5206\u7684\u7b54\u6848\u7684\u6761\u6570\u2264k\u5c31\u5408\u6cd5\u3002\n\n~~\u5176\u5b9e\u6211\u4e00\u5f00\u59cb\u60f3\u7684\u662fDFS,\u5199\u6302\u4e86\u624d\u60f3\u51fa\u8fd9\u4e2a\u601d\u8def~~\n\n\u7136\u540e\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u9996\u5148\u8003\u8651\u6700\u77ed\u8def\uff0c\u601d\u8003\u80fd\u4e0d\u80fd\u7528\u6700\u77ed\u8def\u7ef4\u62a4\u51fa\u4e00\u6761\u8def\u5f84\u4e2d\u8fb9\u7684\u8fb9\u6743\u5927\u4e8e\u6240\u4e8c\u5206\u7684\u7b54\u6848\u7684\u6761\u6570\u3002\u4ed4\u7ec6\u60f3\u4e00\u4e0b\u662f\u53ef\u4ee5\u7684\u3002\u5177\u4f53\u5b9e\u73b0\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n\u9996\u5148\u6211\u4eec\u5c06\u6240\u6709\u8fb9\u6743\u90fd\u51cf\u53bb\u4f60\u4e8c\u5206\u5230\u7684\u7b54\u6848\uff08\u4e0b\u56fe\u4ee5\u6837\u4f8b\u4e3a\u4f8b\uff0c\u4e8c\u5206\u5230\u7684\u7b54\u6848\u4e3a4\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ayspcift.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u90a3\u4e48\u8fd9\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5f88\u663e\u7136\uff0c\u56fe\u4e2d\u6240\u6709\u6743\u503c\u22640\u7684\u8fb9\u6743\u90fd\u662f\u5c0f\u4e8e\u6240\u679a\u4e3e\u5230\u7684\u7b54\u6848\u7684\uff0c\u6240\u4ee5\u53ea\u6709\uff1e0\u7684\u6743\u503c\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u3002\u6211\u4eec\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u6743\u503c\uff0c\u6b64\u6743\u503c\uff1e0\u7684\u6240\u6709\u8fb9\u7684\u65b0\u8fb9\u6743\u4e3a1\uff0c\u22640\u7684\u5219\u4e3a0\uff0c\u7531\u4e8e\u53ea\u8981\u6709\u4e00\u6761\u8def\u5f84\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef\uff0c\u6240\u4ee5\u53ea\u8981\u8dd1\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u65b0\u6743\u503c\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/45j4yr74.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u8dd1\u51fa\u6700\u77ed\u8def\u7684\u503c\u548ck\u76f8\u6bd4\u8f83\uff0c\u5982\u679c\u2264k\u5c31\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\nAC\u4ee3\u7801\u5982\u4e0b:\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define inf 0x7fffffff\nconst int maxn=1e3+1;\nconst int maxp=1e4+1;\nusing namespace std;\nstruct jg{\n\tint dis,jd;\n\tbool operator < (const jg &a) const{\n\t\treturn a.dis<dis;\n\t}\n};\nstruct Edge{\n\tint next,to,worth,gx;\n}e[maxp*2];\nint head[maxn],cnt,ans=inf,dis[maxn];\nint ma,mi=inf;\nint n,p,k;\nbool vis[maxn];\nvoid add(int from,int to,int worth)\n{\n\te[++cnt].next=head[from];\n\te[cnt].to=to;\n\te[cnt].worth=worth;\n\thead[from]=cnt;\n}\nvoid dijkstra()\n{\n\tpriority_queue<jg> q;\n\tfor(int i=1;i<=n;i++) dis[i]=inf;\n\tdis[1]=0;\n\tq.push((jg){0,1});\n\twhile(!q.empty())\n\t{\n\t\tjg now=q.top();\n\t\tq.pop();\n\t\tif(vis[now.jd]) continue;\n\t\tvis[now.jd]=true;\n\t\tfor(int i=head[now.jd];i;i=e[i].next)\n\t\t\tif(dis[e[i].to]>dis[now.jd]+e[i].gx)\n\t\t\t{\n\t\t\t\tdis[e[i].to]=dis[now.jd]+e[i].gx;\n\t\t\t\tq.push((jg){dis[e[i].to],e[i].to});\n\t\t\t}\n\t}\n}\nbool check(int in)\n{\n\tmemset(vis,0,n+1);\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\te[i].worth-=in;\t\n\t\tif(e[i].worth>0) e[i].gx=1;\n\t\telse e[i].gx=0;\t\n\t}\n\tdijkstra();\n\tfor(int i=1;i<=cnt;i++)\n\t\te[i].worth+=in;\n\tif(dis[n]<=k) return true;\n\telse return false;\n}\nint mian()\n{\n//\tfreopen(\"line.in\",\"r\",stdin);\n//\tfreopen(\"line.out\",\"w\",stdout);\n\tscanf(\"%d%d%d\",&n,&p,&k);\n\tfor(int i=1;i<=p;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t\tma=max(z,ma);\n\t\tmi=min(z,mi);\n\t}\n\tint l=mi-1,r=ma+1,mid;\n\twhile(l<=r)\n\t{\n\t\tmid=(l+r)>>1; \n\t\tif(check(mid))\n\t\t{\n\t\tr=mid-1;\n\t\tans=min(ans,mid);\t\t\t\n\t\t}\n\t\telse\n\t\tl=mid+1;\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1573197887,
        "uid": 100899,
        "name": "\u5229\u5203\u968f\u4eba",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "```cpp\n/*\n\u5728\u4e0b\u9762\u7684\u9898\u89e3\u4e2d\u770b\u4e0d\u5230\u8fd9\u79cd\u505a\u6cd5,\u90a3\u5c31\u6765\u53d1\u4e00\u6ce2\u9898\u89e3.\n\u9996\u5148,\u770b\u5230\u9898\u76ee,\u81ea\u7136\u60f3\u5230\u4e8c\u5206,\u90a3\u4e48\u600e\u4e48\u5206\u5462?\n1.\u4e8c\u5206\u957f\u5ea6mid;\n2.\u6784\u56fe\u5c06>mid\u7684\u957f\u5ea6\u8bbe\u4e3a1,<=mid\u7684\u957f\u5ea6\u8bbe\u4e3a0;\n3.\u8dd1\u4e00\u904dspfa,\u7b97\u51fadis\u6570\u7ec4(dis[i]\u8868\u793a\u4ece\u8d77\u70b91\u5230i\u70b9\u6240\u7ecf\u8fc7\u7684\u8fb9>mid\u7684\u6570\u91cf); \n4.\u5982\u679cdis[n]<=k,\u5373\u8bf4\u660e\"\u514d\u8d39\"\u7684\u8fb9\u6570\u7b26\u5408\u9898\u76ee\u8981\u6c42,\u8fd9\u65f6,mid\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u7b54\u6848.\n*/\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define I inline\n#define R register\nusing namespace std;\nqueue<int> f;\n\tint n,m,k,len,ans=-1;\n\tint last[100000],dis[100000];\n\tstruct node1{int x,y,z;} p[100000];\n\tstruct node2{int x,y,z,next;} a[100000];\n\tbool bz[100000];\nI int readint()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\tfor(;ch<'0'||ch>'9';ch=getchar())\n\t\tif(ch=='-') f=-1;\n\tfor(;ch>='0'&&ch<='9';x=(x<<3)+(x<<1)+(ch^48),ch=getchar());\n\treturn x*f;\n}\nI void ins(int x,int y,int z)\n{\n\ta[++len].x=x;a[len].y=y;a[len].z=z;a[len].next=last[x];last[x]=len;\n}\nI void init(int x)//\u6784\u56fe \n{\n\tlen=0;\n\tmemset(last,0,sizeof(last));\n\tfor(R int i=1;i<=m;i++)\n\t{\n\t\tins(p[i].x,p[i].y,p[i].z>x);\n\t\tins(p[i].y,p[i].x,p[i].z>x);\n\t}\n}\nI int spfa()//spfa \n{\n\tmemset(dis,63,sizeof(dis));\n\tdis[1]=0;\n\tmemset(bz,true,sizeof(bz));\n\tbz[1]=false;\n\tf.push(1);\n\twhile(!f.empty())\n\t{\n\t\tint x=f.front();\n\t\tfor(R int i=last[x];i;i=a[i].next)\n\t\t{\n\t\t\tint y=a[i].y;\n\t\t\tif(dis[x]+a[i].z<dis[y])\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+a[i].z;\n\t\t\t\tif(bz[y])\n\t\t\t\t{\n\t\t\t\t\tbz[y]=false;\n\t\t\t\t\tf.push(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbz[x]=true;\n\t\tf.pop();\n\t}\n\treturn dis[n];\n}\nI bool pd(int x)\n{\n\tinit(x);\n\treturn spfa()<=k;\n}\nint main()\n{\n\tint l=0,r=0,mid;\n\tn=readint();m=readint();k=readint();\n\tfor(R int i=1;i<=m;i++)\n\t{\n\t\tp[i].x=readint();p[i].y=readint();p[i].z=readint();\n\t\tr=max(r,p[i].z);\n\t}\n\twhile(l<=r)//\u4e8c\u5206\u957f\u5ea6\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(pd(mid))\n\t\t{\n\t\t\tr=mid-1;\n\t\t\tans=mid;\n\t\t\tif(!ans) break;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\",ans);\n}\n```",
        "postTime": 1519967146,
        "uid": 31955,
        "name": "Mark_ZZY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u7b2c\u4e00\u773c\u770b\u53bb\u975e\u5e38\u50cf\u5206\u5c42\u56fe\uff0c\u4f46\u548c\u88f8\u7684\u5206\u5c42\u56fe\u4e0d\u592a\u4e00\u6837\u3002\u56e0\u4e3a\u5b83\u53ea\u8981\u6c42\u8def\u5f84\u603b\u6743\u503c\u4e3a\u8def\u5f84\u4e0a\u6700\u5927\u4e00\u6761\u8def\u5f84\u7684\u6743\u503c\uff0c\u4f46\u4ed4\u7ec6\u8003\u8651\uff0c\u8fd9\u540c\u65f6\u4e5f\u6ee1\u8db3\u4e00\u4e2a\u8d2a\u5fc3\u7684\u6027\u8d28\uff0c\u90a3\u5c31\u662f\u5f53\u4f60\u6bcf\u6b21\u7528\u8def\u5f84\u603b\u6743\u503c\u5c0f\u7684\u65b9\u6848\u6765\u66f4\u65b0\uff0c\u90a3\u4e48\u53ef\u4ee5\u4fdd\u8bc1\u65b0\u7684\u8def\u5f84\u6743\u503c\u5c3d\u91cf\u5c0f\u3002\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u5728\u4e0d\u5220\u8fb9\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4f7f\u7528Dij\u6765\u8dd1\uff0c\u800c\u5220\u8fb9\u6743\u7684\u60c5\u51b5\u5c31\u662f\u5206\u5c42\u56fe\u3002\n\n\u6240\u4ee5\u5c31\u62ff\u5206\u5c42\u56fe\u6765\u641e\u597d\u4e86^_^\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a\u6570\u636ep\u548ck\u90fd\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u76f4\u63a5\u5efak+1\u5c42\u56fe\u662f\u8981\u7206\u7684\uff0c\u800ck+1\u5c42\u56fe\u8fb9\u90fd\u4e00\u6837\uff0c\u6211\u4eec\u5c31\u7528dis[\u5c42\u6570\uff080-k\uff09]\u6765\u8868\u793a\u3002\n\n\u5177\u4f53\u7684\u5c31\u662f\u6bcf\u6b21Dij\u8f6c\u79fb\u662f\u8981\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\t\t1.\u5728\u539f\u5c42\u8dd1\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8fd9\u5c42\u4e2d\u7528Dij\n        2.\u82e5\u4e0b\u4e00\u5c42\u8fb9\u7684\u53e6\u4e00\u7aef\u4e0d\u591f\u4f18\u79c0\uff0c\u5c31\u7528\u8fd9\u4e00\u5c42\u6765\u76f4\u63a5\u66f4\u65b0\uff0c\u5f53\u7136\u5c31\u662f\u628a\u8fd9\u4e00\u7aef\u7684\u70b9\u7684\u89e3\u76f4\u63a5\u590d\u5236\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e86\n\n/\u4ee3\u7801-\u672c\u4eba\u7684\u7ed3\u6784\u4f53\u7528\u7684\u6bd4\u8f83\u591a\uff0c\u5927\u795e\u4e0d\u559c\u52ff\u55b7\n\n```c++\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nstruct tmp{\n    int no;\n    int ler;\n    int dis;\n    bool friend operator < (tmp x,tmp y)\n    {\n        return x.dis>y.dis;\n    }\n};\nstruct pnt{\n    int no;\n    int hd;\n    int dis[1005];\n    bool vis[1005];\n}p[1005];\nstruct ent{\n    int twd;\n    int lst;\n    int vls;\n}e[50000];\nint n,m,d;\nint cnt;\npriority_queue<tmp>Q;\nvoid ade(int f,int t,int v)\n{\n    cnt++;\n    e[cnt].twd=t;\n    e[cnt].lst=p[f].hd;\n    p[f].hd=cnt;\n    e[cnt].vls=v;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&d);\n    for(int i=1;i<=n;i++)\n    {\n        p[i].no=i;\n        for(int j=0;j<=d;j++)\n        {\n            p[i].dis[j]=0x3f3f3f3f;\n        }\n    }\n    p[1].dis[0]=0;\n    for(int i=1;i<=m;i++)\n    {\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        ade(a,b,c);\n        ade(b,a,c);\n    }\n    tmp x;\n    x.no=1;\n    x.ler=0;\n    x.dis=0;\n    Q.push(x);\n    while(!Q.empty())\n    {\n        x=Q.top();\n        Q.pop();\n        int nw=x.no;\n        int t=x.ler;\n        if(x.no==n&&x.ler==d)\n        {\n            printf(\"%d\\n\",x.dis);\n            return 0;\n        }\n        if(p[nw].vis[t])continue;\n        p[nw].vis[t]=true;\n        for(int i=p[nw].hd;i;i=e[i].lst)\n        {\n            int to=e[i].twd;\n            if(p[to].dis[t]>max(p[nw].dis[t],e[i].vls))\n            {\n                p[to].dis[t]=max(p[nw].dis[t],e[i].vls);\n                x=(tmp){to,t,p[to].dis[t]};\n                Q.push(x);\n            }\n            if(p[to].dis[t+1]>p[nw].dis[t]&&t<d)\n            {\n                p[to].dis[t+1]=p[nw].dis[t];\n                x=(tmp){to,t+1,p[to].dis[t+1]};\n                Q.push(x);\n            }\n        }\n    }\n    printf(\"-1\\n\");\n    return 0;\n}\n```",
        "postTime": 1532657175,
        "uid": 66914,
        "name": "Unstoppable728",
        "ccfLevel": 8,
        "title": "P1948 [USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines"
    },
    {
        "content": "# \u524d\u8a00+\u95f2\u804a\n\n\u597d\u50cf\u662f\u4e00\u9053\u6bd4\u8f83\u7b80\u5355\u7684\u6700\u77ed\u8def\u9898\u76ee\uff0c\u5176\u5b9e\u8fd9\u4e2a\u601d\u8def\u9898\u89e3\u91cc\u9762\u597d\u50cf\u6709\u4e00\u7247\u4e00\u6837\u7684\u3002\n\n\u4f46\u662f\u6211\u4e2a\u4eba\u8ba4\u4e3a\u90a3\u4f4d\u540c\u5b66\u7684\u4ee3\u7801\u662f\u6709\u95ee\u9898\u7684\uff0c\u4ed6/\u5979\u7684\u5224\u65ad\u65e0\u89e3\u7684\u65b9\u6cd5\u597d\u50cf\u662f ~~\u9762\u5411\u6570\u636e\u7f16\u7a0b~~\n\n\u5982\u679c\u662f\u6211\u7406\u89e3\u9519\u4e86\u5f53\u6211\u6ca1\u8bf4\uff0c\u4f46\u662f\u6211\u8ba4\u4e3a\u6211\u7684\u4ee3\u7801\u66f4\u52a0\u5bb9\u6613\u7406\u89e3\u5427\u3002\uff08\u9003...\n\n# \u9898\u610f\u63cf\u8ff0\n\n\u5728\u65e0\u5411\u56fe\u4e2d\u6c42\u4e00\u6761\u4ece $1$ \u5230 $N$ \u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7b2c $K+1$ \u5927\u7684\u8fb9\u6743\u6700\u5c0f\u3002\n\n\u7b49\u7b49\uff0c\u6700\u5927\u7684\u6700\u5c0f...\u5982\u6b64\u719f\u6089\u7684\u5b57\u773c\uff0c\u96be\u9053\u662f **\u4e8c\u5206\u7b54\u6848**\u3002\n\n\u4e0b\u9762\u8fdb\u5165\u6b63\u9898\u3002\n\n# \u7b97\u6cd5\u5206\u6790\n\n\u6ca1\u9519\u5c31\u662f\u9171\u7d2b\uff0c\u4e8c\u5206\u8fd9\u4e2a\u7b2c $K+1$ \u5927\u7684\u8fb9\u6743\u7684\u503c\uff0c\u8bbe\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a $val$ \u90a3\u4e48\uff1a\n\n$$edge[i]=\n\\begin{cases}\n0& \\text{edge[i] <= val}\\\\\n1& \\text{edge[i] > val}\n\\end{cases}$$\n\n\u7136\u540e\u5c31\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0801 \u56fe\u7684\u6700\u77ed\u8def\u53ef\u4ee5\u7528\u53cc\u7aef\u961f\u5217\u4f18\u5316\u6765\u8dd1\uff0c\u4e0d\u61c2\u7684\u8bdd\u81ea\u884c\u767e\u5ea6\u5427\uff0c\u5f88\u7b80\u5355\u7684\uff09\u3002\n\n$$find=\n\\begin{cases}\n[1,val]& \\text{dis[N] <= k}\\\\\n[val+1,r]& \\text{dis[N] > k}\n\\end{cases}$$\n\n\u8fd9\u6837\u5c31\u786e\u5b9a\u4e86\u5bfb\u627e\u8303\u56f4\uff0c\u7136\u540e\u5c31\u7ed3\u675f\u4e86...\u3002\n\n\u8bb0\u5f97\u521d\u59cb\u5316\u65f6 $l=-1$\uff0c\u907f\u514d\u65e0\u89e3\u60c5\u51b5\u8bef\u5224\u3002\n\n\u4e3a\u4ec0\u4e48\u4ee4 $l=-1$ \u5462\uff1f\u56e0\u4e3a\u5f53\u65e0\u89e3\u65f6\uff0c\u5f53\u4e14\u4ec5\u5f53 $1$ \u4e0e $N$ \u4e0d\u8fde\u901a\uff0c\u90a3\u4e48 $dis[N]$ \u6c38\u8fdc $\\leq k$\uff0c\n\n\u90a3\u4e48\u4e8c\u5206\u65f6\u5c06\u6c38\u8fdc\u8fdb\u5165 $[l,val]$ \u533a\u95f4\uff0c\u6700\u7ec8 $l=-1$ \u5373\u7b54\u6848\u3002\n\n# \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<deque>\n#define N 1010\n#define M 10010\nusing namespace std;\n\nint n,p,k,head[N],cnt=0,dis[N];\nbool vis[N];\nstruct Edge{\n\tint next,to,val;\n}edge[M<<1];\ndeque<int>q;\n\nint read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0' || c>'9') f=(c=='-')?-1:1,c=getchar();\n\twhile(c>='0' && c<='9') x=x*10+c-48,c=getchar();\n\treturn x*f;\n}\n\nvoid addedge(int x,int y,int z){\n\tcnt++;\n\tedge[cnt].next=head[x];\n\tedge[cnt].to=y;\n\tedge[cnt].val=z;\n\thead[x]=cnt;\n\treturn;\n}\n\nbool chck(int x){\n\twhile(!q.empty()) q.pop_front();\n\tmemset(vis,false,sizeof(vis));\n\tmemset(dis,0,sizeof(dis));\n\tdis[1]=0;vis[1]=true;\n\tq.push_front(1);\n\twhile(!q.empty()){\n\t\tint now=q.front();\n\t\tq.pop_front();\n\t\tfor(int i=head[now];i;i=edge[i].next){\n\t\t\tint y=edge[i].to;\n\t\t\tint z=edge[i].val<=x?0:1;\n\t\t\tif(!z && (!vis[y] || dis[y]>dis[now])){\n\t\t\t\tdis[y]=dis[now];\n\t\t\t\tq.push_front(y);\n\t\t\t\tvis[y]=true;\n\t\t\t}\n\t\t\telse if(!vis[y] || dis[y]>dis[now]+1){\n\t\t\t\tdis[y]=dis[now]+1;\n\t\t\t\tq.push_back(y);\n\t\t\t\tvis[y]=true;\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[n]<=k) return true;\n\treturn false;\n}\n\nint main(){\n\tn=read();p=read();k=read();\n\tint mx=0,x,y,z;\n\tfor(int i=1;i<=p;i++){\n\t\tx=read();y=read();z=read();\n\t\taddedge(x,y,z);\n\t\taddedge(y,x,z);\n\t\tmx=max(mx,z);\n\t} \n\tint l=-1,r=mx,mid;\n\twhile(l<r){\n\t\tint mid=(l+r)>>1;\n\t\tif(chck(mid)) r=mid;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",l);\n\treturn 0;\n}\n```\n\n\u5b8c\u7ed3\u6492\u82b1\u3002",
        "postTime": 1585814848,
        "uid": 117941,
        "name": "_LPF_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]Telephone Lines S\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u7edd\u5927\u591a\u6570\u9898\u89e3\u90fd\u662f\u4e8c\u5206\u7b54\u6848\u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u53ef\u4ee5\u7528\u5206\u6210\u56fe\u505a\uff0c\u5e76\u4e14\u6548\u7387\u4f1a\u6bd4\u4e8c\u5206\u9ad8\u7684\u591a,\u7a0d\u5fae\u4ecb\u7ecd\u4e00\u4e0b\u5206\u5c42\u56fe\u7684\u539f\u7406\u3002\n\n\u65e2\u7136\u6709k\u6761\u8def\u53ef\u4ee5\u514d\u8d39\uff0c\u5462\u4e48\u5c06\u6574\u4e2a\u56fe\u5206\u6210k+1\u5c42\uff0c\u6bcf\u4e00\u5c42\u90fd\u590d\u5236\u4e00\u904d\u539f\u672c\u7684\u56fe\uff0c\u540c\u65f6\u6bcf\u4e00\u9898\u8def\u90fd\u6784\u9020\u4e00\u4e2a\u4ece\u4e0b\u4e00\u5c42\u901a\u5411\u4e0a\u4e00\u5c42\u7684\u8def\uff0c\u4f46\u4ef7\u683c\u4e3a0\u7684\u8def\uff0c\u8fd9\u8868\u793a\u9009\u62e9\u8d70\u8fd9\u9898\u8def\u662f\u5c06\u514d\u8d39\u7684\u673a\u4f1a\u7528\u5728\u8fd9\u9898\u8def\u4e0a\u3002\u5e76\u4e14\u4ece\u4e0b\u5c42\u901a\u5f80\u4e0a\u5c42\uff0c\u6240\u4ee5\u6700\u591a\u8fd9\u79cd\u514d\u8d39\u7684\u8def\u53ea\u80fd\u8d70k\u6b21\uff0c\u6ee1\u8db3\u9898\u610f\u3002\n\n\u5f53\u7136\u8fd8\u6709\u8981\u6ce8\u610f\u7684\u662f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u514d\u8d39\u7684\u673a\u4f1a\uff0c\u6240\u4ee5\u5efa\u7acb\u4ece\u6bcf\u4e00\u5c42\u7684 i \u9876\u70b9\u901a\u5f80\u4e0a\u4e00\u5c42\u7684 i \u9876\u70b9\u7684\u4ef7\u683c\u4e3a0\u7684\u8def\uff0c\u4f46\u8c8c\u4f3c\u6d1b\u8c37\u5e76\u6ca1\u6709\u5361\u8fd9\u79cd\u60c5\u51b5(\u5982\u679ck\u7684\u503c\u5927\u4e8em\u5e94\u8be5\u662f\u53ef\u4ee5\u5361\u4f4f\u7684)\n\n\u6700\u540e\u518d\u5c06dijkstra\u9b54\u6539\u4e00\u4e0b\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8981\u6c42\u7684\u7b54\u6848\u4e0d\u662f\u6700\u77ed\u8def\u5f84\uff0c\u800c\u662f\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8def\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u628a\u539f\u672c\u7684\u662f\u5426dis[v] > dis[u] + val[i]\uff0c\u6539\u6210\u662f\u5426dis[v] > max(dis[u], val[i])\uff0c\u8fd9\u91cc\u8868\u793a\u7684\u662f\u6c42\u5f97\u8def\u5f84\u4e0a\u4f7f\u6700\u5927\u8def\u7684\u503c\u6700\u5c0f\u3002\u5224\u65ad\u662f\u54261\u4e0en\u8054\u901a\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u6700\u540edis[(k+1)*n] \u662f\u5426\u7b49\u4e8einf\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<set>\n#define _USE_MATH_DEFINES\n#include<math.h>\n#include<queue>\n#include<vector>\n#include<limits.h>\n#include<functional>\n#include<stack>\ntypedef long long ll;\n#pragma GCC optimize(2)\nusing namespace std;\ninline void write(int x)\n{\n\tif (x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)write(x / 10);\n\tputchar(x % 10 + '0');\n}\ninline int read() {\n\tint x = 0, f = 1;\n\tchar ch = getchar();\n\twhile (!isdigit(ch)) {\n\t\tif (ch == '-')\n\t\t\tf = -1;\n\t\tch = getchar();\n\t}\n\twhile (isdigit(ch)) {\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn x * f;\n}\n#define maxm 200010\n#define maxn 10010\nint n, m, cnt = 1, s, t, maxflow, cost;\nint head[maxn], to[maxm], Next[maxm], val[maxm], dis[maxn];\nbool vis[maxn];\nvoid add(int u, int v, int w)\n{\n\tto[++cnt] = v;\n\tval[cnt] = w;\n\tNext[cnt] = head[u];\n\thead[u] = cnt;\n}\nstruct node\n{\n\tint x, w;\n\tinline bool operator <(const node& a) const\n\t{\n\t\treturn w > a.w;\n\t}\n};\nvoid dijkstra()\n{\n\tpriority_queue<node> q;\n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tdis[s] = 0;\n\tq.push({ s,0 });\n\twhile (q.size())\n\t{\n\t\tint u = q.top().x;\n\t\tq.pop();\n\t\tif (vis[u])\n\t\t\tcontinue;\n\t\tvis[u] = true;\n\t\tfor (int i = head[u]; i; i = Next[i])\n\t\t{\n\t\t\tint v = to[i];\n\t\t\tif (dis[v] > max(dis[u], val[i]))\n\t\t\t{\n\t\t\t\tdis[v] = max(dis[u], val[i]);\n\t\t\t\tq.push({ v,dis[v] });\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main()\n{\n\tn = read(), m = read();\n\tint k = read();\n\ts = 1;\n\twhile (m--)\n\t{\n\t\tint x = read(), y = read(), z = read();\n\t\tadd(x, y, z);\n\t\tadd(y, x, z);\n\t\tfor (int i = 1; i <= k; i++)\n\t\t{\n\t\t\tadd(i * n + x, i * n + y, z);\n\t\t\tadd(i * n + y, i * n + x, z);\n\t\t\tadd((i - 1) * n + x, i * n + y, 0);\n\t\t\tadd((i - 1) * n + y, i * n + x, 0);\n\t\t}\n\t}\n    for (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= k; j++)\n\t\t\tadd((j - 1) * n + i, j * n + i, 0);\n\t\n\tdijkstra();\n\tif (dis[(k + 1) * n] != 0x3f3f3f3f)\n\t\twrite(dis[(k + 1) * n]);\n\telse\n\t\tputs(\"-1\");\n\treturn 0;\n}\n```\n",
        "postTime": 1566803437,
        "uid": 138569,
        "name": "youngk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u6700\u77ed\u8def\u505a\uff0c\u5176\u5b9e\u5c31\u662f\u6c42 $1$~$n$ \u7684\u8def\u5f84\u4e2d\u7b2c $k+1$ \u5927\u7684\u8fb9\u7684\u6700\u5c0f\u503c\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528 dp \u505a\uff0c\u8bbe $dp[x][y]$ \u4ee3\u8868\u4ece $1$~$x$ \u7684\u8def\u5f84\u4e2d\u6709 $y$ \u6761\u8fb9\u514d\u8d39\u4e4b\u540e\u7684\u8fb9\u7684\u6700\u5927\u503c\u3002\u5982\u679c\u6709\u4e00\u6761\u957f\u5ea6\u4e3a $l$ \u7684\u8fb9\u4e3a $(a,b)$\u3002\u5219 $dp[b][y]$ \u5c31\u7b49\u4e8e $\\min(dp[b][y],\\max(dp[a][y],l),dp[a][y-1])$ \u90a3\u4e48\u4e0d\u59a8\u6211\u4eec\u5c31\u4ee5\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u7a0b\u5efa\u4e2a\u56fe\uff0c\u9996\u5148\u6839\u636e $\\max(dp[a][y],l)$ \u5c31\u662f $(a,y)$ \u53f7\u8282\u70b9\u5230 $(b,y)$ \u53f7\u8282\u70b9\u8fde\u4e00\u6761\u957f\u5ea6\u4e3a $l$ \u7684**\u65e0\u5411\u8fb9**\uff1b\u518d\u6839\u636e $dp[a][y-1]$ \u8868\u793a $(a,y-1)$ \u548c $(b,y)$ \u8fde\u4e00\u6761\u957f\u5ea6\u4e3a $0$ \u7684**\u6709\u5411\u8fb9**\u3002\uff08\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u662f\u6709\u5411\u8fb9\uff0c\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u56e0\u4e3a\u4e4b\u524d\u4f60\u5df2\u7ecf\u9009\u4e86 $y-1$  \u6761\u8fb9\u514d\u8d39\uff0c\u63a5\u4e0b\u6765\u4f60\u8fd8\u60f3\u8981\u4e00\u6761\u8fb9\u514d\u8d39\uff0c\u90a3\u4e48\u53ea\u80fd\u662f\u4ece $y-1$ \u6761\u514d\u8d39\u7684\u5230 $y$ \u6761\u514d\u8d39\u7684\uff0c\u4e0d\u53ef\u80fd\u662f\u65e0\u5411\u8fb9\uff09\u63a5\u4e0b\u6765\u5c31\u8dd1\u6700\u77ed\u8def\u5c31\u884c\u4e86\uff0c\u4f60\u53ef\u4ee5\u7528 Dijkstra\u5806\u4f18\u5316\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 SPFA\uff08\u53ef\u80fd\u4f1a\u5361\uff09\u7b49\u7b49\u7b49\u7b49\u3002\u8fd9\u91cc\u6211\u7528\u7684\u662f Dijkstra\u5806\u4f18\u5316\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O((n+p)k\\log pk)$ \u56e0\u4e3a\u5e38\u6570\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u5b9e\u6d4b AC\u3002\n\n\u5982\u679c\u5b9e\u5728\u60f3\u7a33\u4e00\u70b9\u513f\uff0c\u53ef\u4ee5\u4f7f\u7528 \u4e8c\u5206+\u53cc\u7aef\u961f\u5217BFS\uff0c\u6bcf\u6b21\u4e8c\u5206\u51fa\u7b2c $k+1$ \u5927\u7684\u503c\uff0c\u7136\u540e\u5c06\u5927\u4e8e\u5b83\u7684\u8fb9\u957f\u5ea6\u6807\u4e0a $1$\u3002\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u8fb9\u957f\u5ea6\u6807\u4e0a $0$\u3002\u7136\u540e\u518d\u7528 \u53cc\u7aef\u961f\u5217BFS \u6c42\u51fa $1$~$n$ \u7684\u6700\u77ed\u8def\u7684\u503c\u6700\u540e\u5224\u65ad\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e $k$ \u5c31\u884c\u4e86\uff08\u5b9e\u5728\u4e0d\u7406\u89e3\u4e3a\u4ec0\u4e48\u7528 \u53cc\u7aef\u961f\u5217BFS \u7684\u8bdd\u53ef\u4ee5\u505a\u505a\u8fd9\u9053\u9898\uff1a[P4667](https://www.luogu.com.cn/problem/P4667)\uff09\u3002\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O((n+p)\\log\\max l_{i})$ \u8fd9\u6837\u5c31\u80af\u5b9a\u4e0d\u4f1a\u8d85\u65f6\u5566\u3002\n\n# code(dp+\u6700\u77ed\u8def):\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\nvector<pair<int,int> > edge[1001005];\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q; \nint k;\nint js(int x,int y){\n\treturn (x-1)*(k+1)+y;\n}\nvoid push(int x,int y,int z){\n\tedge[x].push_back(make_pair(y,z));\n}\nint dis[1000005];\nbool vis[1000005];\nint main(){\n\tint n,p,i,j;\n\tscanf(\"%d%d%d\",&n,&p,&k);\n\tfor(i=1;i<=p;i++){\n\t\tint a,b,l;\n\t\tscanf(\"%d%d%d\",&a,&b,&l);\n\t\tfor(j=0;j<=k;j++){\n\t\t\tpush(js(a,j),js(b,j),l);\n\t\t\tpush(js(b,j),js(a,j),l);\n\t\t\tif(j!=k){\n\t\t\t\tpush(js(a,j),js(b,j+1),0);\n\t\t\t    push(js(b,j),js(a,j+1),0);\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++){\n\t\tfor(j=0;j<=k;j++){\n\t\t\tdis[js(i,j)]=2147483647;\n\t\t}\n\t}\n\tdis[js(1,0)]=0;\n\tq.push(make_pair(0,js(1,0)));\n\twhile(!q.empty()){\n\t\tpair<int,int> t=q.top();\n\t\tq.pop();\n\t\tif(vis[t.second]){\n\t\t\tcontinue;\n\t\t}\n\t\tvis[t.second]=1;\n\t\tfor(i=0;i<edge[t.second].size();i++){\n\t\t\tif(dis[edge[t.second][i].first]>max(dis[t.second],edge[t.second][i].second)){\n\t\t\t\tdis[edge[t.second][i].first]=max(dis[t.second],edge[t.second][i].second);\n\t\t\t\tq.push(make_pair(dis[edge[t.second][i].first],edge[t.second][i].first));\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",vis[js(n,k)]?dis[js(n,k)]:-1); \n\treturn 0;\n}\n```\n",
        "postTime": 1590895633,
        "uid": 80614,
        "name": "ZCPB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]Telephone Lines S\u3011"
    },
    {
        "content": "~~\u8fd9\u9053\u9898\u6ca1\u6709\u90a3\u4e48\u96be\u7684\u5427~~\n\n\n### \u54b3\u54b3\u6211\u4eec\u5f00\u59cb\u6b63\u9898\n\n\u9898\u610f\u7b80\u8ff0\u4e00\u4e0b\uff0c\u5c31\u662f\u5728\u52a0\u6743\u65e0\u5411\u56fe\u4e0a\u6c42\u51fa\u4e00\u6761\u4ece$1$\u53f7\u7ed3\u70b9\u5230$N$\u53f7\u7ed3\u70b9\u7684\u8def\u5f84\uff0c\u4f7f\u8def\u5f84\u4e0a\u7b2c$K+1$\u5927\u7684\u8fb9\u6743\u5c3d\u91cf\u5c0f\n\n\u6069\uff0c\u4f5c\u4e3a\u4e00\u540dOIER\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e0b~~\u9898\u89e3~~\u6570\u636e\u8303\u56f4\n\n\u597d\u7684\u4e0d\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u8dd1\u597d\u591a\u6b21\u6700\u77ed\u8def(\u9003\n\n\u7531\u4e8e\u9898\u76ee\u6c42\u6700\u503c\uff0c\u90a3\u5c31\u4e8c\u5206\u7b54\u6848\u55bd\n\n\u6211\u4eec\u8f6c\u5316\u95ee\u9898\uff1a\u4e8c\u5206$mid$\uff0c\u6bcf\u6b21\u5224\u65ad\u662f\u5426\u80fd\u4f7f$1$\u5230$N$\u7684\u8def\u5f84\u4e0a\u7b2c$K+1$\u5927\u7684\u8fb9\u6743\u5c0f\u4e8e$mid$\u3002\u90a3\u4e48\u53ea\u9700\u8981\u628a\u5347\u7ea7\u4ef7\u683c\u5927\u4e8e$mid$\u7684\u8fb9\u6743\u503c\u8d4b\u4e3a1\uff0c\u5176\u4f59\u6743\u503c\u8d4b\u4e3a0\uff0c\u8dd1\u6700\u77ed\u8def\u5f97\u5230$dis[n]$\u4e0e$K$\u8fdb\u884c\u6bd4\u8f83\uff0c\u82e5\u5c0f\u4e8e\u7b49\u4e8e$K$\uff0c\u8bf4\u660e\u8be5\u7b54\u6848\u53ef\u884c\uff0c\u7f29\u5c0f$r$\u7ee7\u7eed\u4e8c\u5206\uff0c\u5426\u5219\u7f29\u5c0f$l$\u3002\n\n\u81f3\u4e8e\u8dd1\u6700\u77ed\u8def\uff0c\u5404\u79cd\u795e\u4ed9\u7b97\u6cd5\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u6211\u7528\u7684$SPFA$\u3002\n\n\u4e0a\u4ee3\u7801\uff08~~\u6216\u8bb8\u6709\u7684\u4eba\u53ea\u770b\u8fd9\u4e2a~~\uff09\uff1a\n\n\u5b8f\u5b9a\u4e49\u4e0d\u8981\u5728\u610f\uff0c\u4e2a\u4eba\u4e60\u60ef\u54c8\u54c8\n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n#define ts cout<<\"ok\"<<endl\n#define lowbit(x) (x)&(-x)\n#define oo (1e18)\n#define soo (1e9)\n#define INF 2147483647\n#define Bigprime 212370440130137957int\n#define ll long long\n#define LL unsigned long long\n#define lll __int128\n#define hash Hash\n#define gc getchar()\n#define pc(x) putchar(x)\n#define ls(x) x<<1\n#define rs(x) x<<1|1\n#define hh puts(\"\")\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nint head[1005],dis[1005],n,p,k,cnt,tot,s[100005];\nbool vis[1005];\nstruct Edge{\n\tint u,v,s,nx;\n}e[100005];\ninline ll read(){\n    ll ret=0,ff=1;char c=gc;\n    while(!isdigit(c)){if(c=='-') ff=-ff;c=gc;}\n    while(isdigit(c)){ret=(ret<<3)+(ret<<1)+c-'0';c=gc;}\n    return ret*ff;\n}\nvoid add(int x,int y){\n\te[++cnt].u=x;\n\te[cnt].v=y;\n\te[cnt].nx=head[x];\n\thead[x]=cnt;\n}\nvoid spfa(){\n\tfor(int i=1;i<=n;i++) dis[i]=soo,vis[i]=0;\n\tvis[1]=1,dis[1]=0;\n\tqueue<int> q;\n\tq.push(1);\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tvis[x]=0;\n\t\tfor(int i=head[x];i;i=e[i].nx){\n\t\t\tint y=e[i].v,z=e[i].s;\n\t\t\tif(dis[y]>dis[x]+z){\n\t\t\t\tdis[y]=dis[x]+z;\n\t\t\t\tif(!vis[y]){\n\t\t\t\t\tvis[y]=1;\n\t\t\t\t\tq.push(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\t\n\tn=read(),p=read(),k=read();\n\tfor(int i=1;i<=p;i++){\n\t\tint x=read(),y=read(),z=read();\n\t\ts[++tot]=z;\n\t\ts[++tot]=z;\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tint ans=-1;\n\tint l=0,r=1000000;\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tfor(int i=1;i<=cnt;i++){\n\t\t\tif(s[i]<=mid) e[i].s=0;\n\t\t\telse e[i].s=1;\n\t\t}\n\t\tspfa();\n\t\tif(dis[n]<=k){\n\t\t\tans=mid;\n\t\t\tr=mid-1;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1549442592,
        "uid": 27858,
        "name": "ycyaw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u849f\u84bb\u53d1\u4e00\u4e0bDijkstra\u9898\u89e3\n# \u5806\u4f18\u5316\uff01\n\u53ef\u80fd\u672c\u4eba\u60f3\u591a\u4e86\uff0c\u56e0\u4e3an<=1000\uff0c\n## ~~\u4f46...n\u65b9\u53ef\u4ee5\u76f4\u63a5\u8fc7~~\n## \u4e2a\u4eba\u8ba4\u4e3a\u4e0e[P2939 \u6539\u9020\u8defRevamping Trails](https://www.luogu.org/problemnew/show/P2939)\u5f88\u76f8\u4f3c\n\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u9898\u5f53\u505a\u5206\u5c42\u56fe\u6700\u77ed\u8def\u505a\n\n\u849f\u84bb\u4e0d\u77e5\u9053\u600e\u4e48\u4e8c\u5206\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u4e0b\u697c\u4e0b**\u5927\u4f6c**\u4eec\u7684\u9898\u89e3\n\n\u514d\u8d39\u7684\u7535\u8bdd\u7ebf\uff0c\u8fb9\u957f\u5373\u4e3a0\n\n\u5728\u6c42\u6700\u77ed\u8def\u65f6\u5206\u7c7b\u5373\u53ef\uff1a\n1.\u82b1\u94b1\u5efa\u7535\u8bdd\u7ebf\uff1amin(\u5728\u5f53\u524d\u8282\u70b9\u7684\u8d39\u7528\uff0cmax(\u4e0e\u5176\u76f8\u8fde\u7684\u6240\u6709\u70b9\u7684\u8d39\u7528\uff0c\u8fd9\u6761\u8fb9\u7684\u8d39\u7528));\n2.\u4e0d\u82b1\u94b1:\u5206\u5c42\uff0cmin(\u5f53\u524d\u70b9\u7684\u8d39\u7528\uff0c\u4e0e\u5176\u76f8\u8fde\u4e14\u662f**\u4e0a\u4e00\u5c42\u7684\u8282\u70b9**\u7684\u8d39\u7528);\n\n\u8bf7\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n(\u5229\u7528\u4f18\u5148\u961f\u5217\uff0c\u6bcf\u6b21\u53d6\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u70b9\uff0c\u5e76\u5bf9\u76f8\u8fde\u7684\u8fb9\u8fdb\u884c\u201c\u677e\u5f1b\u201d\u64cd\u4f5c)\n~~(\u600e\u4e48\u611f\u89c9\u53ea\u662f\u628aspfa\u7684\u666e\u901a\u961f\u5217\u6362\u6210\u4e86\u5806)~~\n->\u53ef\u80fd\u662f\u56e0\u4e3a\u6211Dijkstra\u5b66\u7684\u4e0d\u592a\u597d\u3002\u3002\u3002\u6c34\u5e73\u6709\u9650\uff0c\u656c\u8bf7\u8c05\u89e3\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nconst int N=1005,M=20005;\n//\u65e0\u5411\u8fb9\uff0c\u5373\u628a\u6709\u5411\u8fb9\u5efa\u4e24\u6b21\u5373\u53ef\uff0c\u6570\u7ec4\u5f002\u500d\nstruct edge{\n    int node,next,val;\n}Edge[M];\n//\u7528\u8fb9\u96c6\u6570\u7ec4\u7684\u65b9\u5f0f\u5b9e\u73b0\u90bb\u63a5\u8868\n//\u4f3c\u4e4e\u70b9\u592a\u5c11\u4e86\uff0c\u90bb\u63a5\u77e9\u9635\u90fd\u53ef\u4ee5\u3002\u3002\u3002\n//(\u6211\u5199\u5b8c\u624d\u53d1\u73b0)\n//\u6ce8\u610f\uff1a\u90bb\u63a5\u8868\u4e0d\u8ba1\u5f53\u524d\u8282\u70b9\uff0c\u53ea\u8bb0\u5f55\u4e0e\u5176\u8fde\u63a5\u7684\u70b9\nint Head[N],Dis[N][N],n,m,Cnt,tot;\nbool v[N][N];\nstruct qNode{\n    int key,dep,len;\n    //dep:\u5c42\u6b21\n    friend bool operator < (qNode x, qNode y){\n        return x.len>y.len;//\u5c0f\u6839\u5806\n    }\n};\ninline void Add(int x,int y,int l){\n    tot++;\n    Edge[tot].node=y;\n    Edge[tot].next=Head[x];\n    Edge[tot].val=l;\n    Head[x]=tot;\n}\nvoid Dijkstra(){\n//\u6a21\u677f\n    for(int i=1;i<=n;i++){\n        for(int j=0;j<=Cnt;j++)\n            Dis[i][j]=1e9;\n    }\n    Dis[1][0]=0;\n    //Dis[i][j]\u8868\u793a\u4ece\u6e90\u70b9\u5230\u70b9i\u65f6\u7528j\u6b21\u514d\u8d39\u7535\u8bdd\u7ebf\u65f6\u7684\u6700\u5c0f\u82b1\u8d39\n    priority_queue<qNode> q;\n    q.push((qNode){1,0,0});\n    qNode r;\n    while(!q.empty()){\n        r=q.top();\n        q.pop();\n        if(v[r.key][r.dep])\n            continue;\n        v[r.key][r.dep]=1;\n        //key:\u8282\u70b9\u7f16\u53f7\n       //\u5f53\u7136\u7528pair<int,int>\u4fdd\u5b58\u4e5f\u53ef\u4ee5\n        //\u904d\u5386\u76f8\u90bb\u7684\u70b9\n        for(int k=Head[r.key];k;k=Edge[k].next){\n            if(max(Dis[r.key][r.dep],Edge[k].val)<Dis[Edge[k].node][r.dep]){//\u5728\u540c\u4e00\u5c42\uff0c\u82b1\u8d39\u5efa\u7535\u8bdd\u7ebf\n                Dis[Edge[k].node][r.dep]=max(Dis[r.key][r.dep],Edge[k].val);\n                q.push((qNode){Edge[k].node,r.dep,Dis[Edge[k].node][r.dep]});\n                //\u82e5\u6e90\u70b9\u5230\u5f53\u524d\u70b9\u7684\u8ddd\u79bb\u88ab\u66f4\u65b0\u4e86\uff0c\n                //\u5219\u6e90\u70b9\u5230\u4e0e\u5176\u76f8\u90bb\u7684\u70b9\u7684\u8ddd\u79bb\u4e5f\u6709\u53ef\u80fd\u88ab\u66f4\u65b0\n            }\n            if(r.dep<Cnt && Dis[r.key][r.dep]<Dis[Edge[k].node][r.dep+1]){\n            //\u514d\u8d39\u7684\u7535\u8bdd\u7ebf\n                Dis[Edge[k].node][r.dep+1]=Dis[r.key][r.dep];\n                //\u4e0b\u4e00\u5c42\u4e0a\u7684\u70b9\n                q.push((qNode){Edge[k].node,r.dep+1,Dis[Edge[k].node][r.dep+1]});\n            }\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&Cnt);\n    int u,v,l;\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&u,&v,&l);\n        Add(u,v,l);\n        Add(v,u,l);//\u65e0\u5411\u56fe\n    }\n    Dijkstra();\n    if(Dis[n][Cnt]<1e9)\n        printf(\"%d\\n\",Dis[n][Cnt]);\n    else\n        puts(\"-1\");//\u65e0\u89e3\n    return 0;\n}\n```\n//\u6c42\u901a\u8fc7\uff1b\u8c22\u8c22\uff01",
        "postTime": 1540013833,
        "uid": 51198,
        "name": "bits",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u5178\u578b\u7684\u4e8c\u5206\u7b54\u6848\u914d\u5957SPFA\uff0c\u7531\u4e8e\u662f\u65e0\u5411\u56fe\u904d\u5386\uff0c\u6240\u4ee5\u6bcf\u6761\u8fb9\u8981\u5b58\u50a8\u4e24\u6b21\u3002\n\n\u7531\u4e8e\u53ef\u80fd\u4f1a\u51fa\u73b0\u7a00\u758f\u56fe\uff0c\u6240\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\u7a7a\u95f4\u590d\u6742\u5ea6\u8fc7\u5927\uff0c\u53ef\u7528\u90bb\u63a5\u8868\u89e3\u51b3\u95ee\u9898\u3002\n\n\u4ee3\u7801\u4e2d\u7684tpe\u51fd\u6570\u4e3a\u90bb\u63a5\u8868\u52a0\u8fb9\u64cd\u4f5c\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u610f\uff1a\u4e8c\u5206\u679a\u4e3e\u7b54\u6848\u65f6\u7528\u4e0b\u53d6\u6574\uff0c\u56e0\u4e3a\u672c\u4f53\u7684\u51fd\u6570\u56fe\u8c61\u4e3a\u5148\u4e0d\u53ef\u884c\u540e\u53ef\u884c\u3002\u4e0b\u9644C++\u4ee3\u7801\uff0c\u4f9b\u8bfb\u8005\u53c2\u8003\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int M=30005;\nint a[M],b[M],l[M],to[M],now,head[M],nest[M],dist[M],adj[M],in[M];\nint n,p,k,x,y,z,tmp;\nvoid tpe(int x,int  y,int z){\n    to[++now]=y;\n    nest[now]=head[x];\n    head[x]=now;\n    l[now]=z;\n}\nvoid spfa(){\n     memset(dist,0x7f7f,sizeof(dist));\n     memset(in,0,sizeof(in));\n     queue <int> q;\n     q.push(1);\n     in[1]=1;dist[1]=0;\n     while(!q.empty()){\n            int x=q.front();q.pop();in[x]=0;\n            for(int j=head[x];j!=-1;j=nest[j]){\n                     if(dist[x]+adj[j]<dist[to[j]]){\n                               dist[to[j]]=dist[x]+adj[j];\n                               if(!in[to[j]] ) q.push(to[j]),in[to[j]]=1;\n                     }\n            }\n     }\n     return ;\n}\nint pd(int x){\n    for(int i=1;i<=n;i++){ \n            for(int j=head[i];j!=-1;j=nest[j]){\n                    if(l[j]<=x) adj[j]=0;\n                    else adj[j]=1;\n            }\n    } \n    spfa();\n    return dist[n]<=k;\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&p,&k);\n    memset(head,-1,sizeof(head));\n    for(int i=1;i<=p;i++){\n            scanf(\"%d%d%d\",&x,&y,&z);\n            tpe(x,y,z);\n            tpe(y,x,z);\n    }\n    int l=0,r=1000001;\n    while(l<r){\n            int m=(l+r)/2;\n            if(pd(m)) r=m;\n            else l=m+1;\n    }\n    if(r==1000001) printf(\"-1\");\n    else printf(\"%d\",r);\n    return  0;\n}\n```",
        "postTime": 1501768468,
        "uid": 24658,
        "name": "\u8d85\u7ea7\u5c0f\u5e06\u8239RP",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "## \u3010\u601d\u8def\u3011\n\u4e8c\u5206\u7b54\u6848+SPFA    \n\n### \u3010\u9898\u76ee\u5927\u610f\u3011\n\u70b91\u5230\u70b9n\u4e2d\u95f4\u6709\u5f88\u591a\u5bf9\u53ef\u4ee5\u8fde\u63a5\u7535\u7ebf\u7684\u7535\u7ebf\u6746\u5b50   \n\u8fde\u63a5\u7684\u6743\u503c\u4e0d\u4e00\u6837   \n\u53ef\u4ee5\u8ba9\u4f60\u514d\u8d39\u8fde\u63a5K\u6761    \n\u6c42\u6700\u5c11\u7684\u82b1\u8d39\uff08\u82b1\u8d39\u7b49\u4e8e\u8fde\u63a5\u7684\u6700\u957f\u7684\u90a3\u4e2a\u7535\u7ebf\uff0c\u8fd9\u91cc\u8fde\u63a5\u7684\u7535\u7ebf\u5f53\u7136\u4e0d\u5305\u62ec\u514d\u8d39\u7684\uff09    \n\n### \u3010\u9898\u76ee\u5206\u6790\u3011   \n\u7b54\u6848\u662f\u5177\u6709\u5355\u8c03\u6027\u7684    \n\u56e0\u4e3a\u5982\u679c\u82b1\u8d39i\u7684\u94b1\u53ef\u4ee5\u7684\u8bdd   \n\u90a3\u82b1\u8d39i+1\u5757\u94b1\u4e5f\u4e00\u5b9a\u53ef\u4ee5   \n\u82b1\u8d39i\u5757\u94b1\u4e0d\u884c\u7684\u8bdd   \n\u90a3\u82b1\u8d39i-1\u5757\u94b1\u4e5f\u4e00\u5b9a\u662f\u4e0d\u53ef\u4ee5\u7684   \n\u6240\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\u5c31\u5f88\u663e\u7136\u4e86\u5427    \n\n### \u3010\u6838\u5fc3\u601d\u8def\u3011\n\u4e8c\u5206\u4ec0\u4e48\u5462\uff1f    \n\u5f53\u7136\u662f\u4e8c\u5206\u82b1\u8d39\u4e86    \n\u56e0\u4e3a\u662f\u53ef\u4ee5\u514d\u53bbk\u6761\u7684    \n\u6240\u4ee5\u5927\u4e8e\u4e8c\u5206\u51fa\u6765\u7684\u503c\u7684\u90a3\u5c31\u53d8\u4e3a0\u5c31\u597d\u4e86   \n\u6240\u4ee5\u5982\u679c1\u5230n\u88ab\u514d\u53bb\u6700\u5c11\u7535\u7ebf\u7684\u90a3\u6761\u8def   \n\u53ea\u8981\u6ee1\u8db3\u514d\u53bb\u7535\u7ebf\u7684\u6839\u6570\u5c0f\u4e8e\u7b49\u4e8ek    \n\u90a3\u8fd9\u4e2a\u7b54\u6848\u5c31\u662f\u5c5e\u4e8e\u53ef\u884c\u8303\u56f4\u7684    \n\u53cd\u4e4b\u5219\u662f\u4e0d\u53ef\u884c\u7684    \n\u8fd9\u5c31\u662f\u4e8c\u5206\u7684\u601d\u8def   \n \n\u4e0d\u8fc7\uff0c\u65e2\u7136\u662f\u6c42\u6700\u5c0f\u7684\u90a3\u6839    \n\u90a3\u4e3a\u4ec0\u4e48\u4e0d\u7528SPFA\u5462\uff1f       \n\u5f53\u6210\u6700\u77ed\u8def\u6765\u5199\u5c31\u597d\u4e86   \n\u88ab\u514d\u53bb\u7684\u8fb9\u7684\u6743\u503c\u5c31\u8d4b\u503c\u4e3a1   \n\u6ca1\u6709\u88ab\u514d\u53bb\u7684\u90a3\u5c31\u662f0   \n\u8fd9\u6837\u5c31\u80fd\u6c42\u51fa1\u5230n\u4e4b\u95f4\u8fde\u63a5\u7684\u8fb9\u4e2d    \n\u88ab\u514d\u53bb\u6700\u5c11\u8fb9\u7684\u90a3\u6761\u8fb9\u7684\u514d\u53bb\u7684\u503c\u662f\u591a\u5c11\u4e86        \n\n### \u3010\u9898\u5916\u8bdd\u3011\n\u4e00\u5f00\u59cb\u6211\u60f3\u7684\u662f\u4e8c\u5206\u51fa\u6765\u503c\u4e4b\u540e\u641c\u7d22\u7684    \n\u7136\u540e\u641c\u7d22\u4e2d\u5982\u679c\u67d0\u4e00\u6761\u8fb9\u4e0d\u884c\u7684\u8bdd   \n\u90a3\u5e94\u8be5\u8fd4\u56de\u53bb\u641c\u53e6\u4e00\u6761\u8fb9\u7684    \n\u4f46\u662f\u5982\u679c\u8fd9\u4e2a\u70b9\u4e4b\u540e\u7684\u4e0b\u4e00\u4e2a\u70b9\u4e0d\u884c\u7684\u8bdd    \n\u90a3\u5e94\u8be5\u662f\u641c\u7d22\u53e6\u5916\u7684\u548c\u8fd9\u4e2a\u70b9\u8fde\u7740\u7684\u70b9\u7684    \n\u6240\u4ee5\u5e94\u8be5\u662fcontinue    \n\u4f46\u662f\u6211\u6253\u6210\u4e86return     \n\u8fd8\u83ab\u540d\u5176\u5999\u7684\u6bd4continue\u591a\u4e8620\u5206\u6210\u4e8670\u5206    \n\u56e0\u4e3a\u8fd9\u4e2a\u7384\u5b66\u7684return\u8ba9\u6211\u5c11\u8dd1\u4e86\u5f88\u591a\u7684\u4e1c\u897f\u5bfc\u81f4\u4e0d\u4f1a\u8d85\u65f6   \n\u56e0\u4e3a\u8fd9\u4e2a\u6211\u88abgyh\u5927\u4f6c\u620f\u79f0\u4e3a\u201c\u6700\u5f3a\u4f18\u5316\u5927\u5e08\u201d\uff01    \n\uff08\u5728\u6700\u540e\u9644\u4e0a\u6211\u7684\u9519\u8bef\u89e3\u6cd5\u4ee3\u7801\uff09    \n\n## \u3010\u5b8c\u6574\u4ee3\u7801\u2014\u2014AC\u3011\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int Max = 20010;\nstruct node\n{\n\tint y,ne,z;\n}a[Max];\nint sum = 0,head[1010];\nvoid add(int x,int y,int z)\n{\n\ta[++ sum].y = y;\n\ta[sum].ne = head[x];\n\ta[sum].z = z;\n\thead[x] = sum; \n}\nint n,p,k;\nint d[1010];\nbool use[1010];\nbool check(int x)\n{\n\tmemset(d,0x3f,sizeof(d));\n//\tmemset(use,false,sizeof(use));\n//\tmemset(cnt,0,sizeof(cnt));\n\tqueue<int>q;\n\td[1] = 0;\n\tq.push(1);\n\tuse[1] = true;\n\twhile(!q.empty())\n\t{\n\t\tint qwq = q.front();\n\t\tq.pop();\n\t\tuse[qwq] = true;\n\t\tfor(register int i = head[qwq];i != 0;i = a[i].ne)\n\t\t{\n\t\t\tint owo;\n\t\t\tif(a[i].z > x)\n\t\t\towo = d[qwq] + 1;\n\t\t\telse\n\t\t\towo = d[qwq];\n\t\t\tif(owo < d[a[i].y])\n\t\t\t{\n\t\t\t\td[a[i].y] = owo;\n\t\t\t\tif(!use[a[i].y])\n\t\t\t\t{\n\t\t\t\t\tq.push(a[i].y);\n\t\t\t\t\tuse[a[i].y] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuse[qwq] = false;\n\t}\n\tif(d[n] <= k)return true;\n\telse\treturn false;\n}\n\nint main()\n{\n\tcin >> n >> p >> k;\n\tfor(register int i = 1;i <= p;++ i)\n\t{\n\t\tint u,v,w;\n\t\tcin >> u >> v >> w;\n\t\tadd(u,v,w);add(v,u,w);\n\t}\n\tint ans = -1;\n\tint l = 0,r = 1000000;\n\twhile(l <= r)\n\t{\n\t\tint mid = (r + l) >> 1;\n\t\tif(check(mid))r = mid - 1,ans = mid;\n\t\telse\tl = mid + 1;\n\t}\n\tcout << ans << endl;\n\treturn 0; \n}\n```\n\n### \u3010\u4e70\u4e00\u8d60\u4e00 \u2014\u2014 \u9519\u89e3\u3011\n```cpp\n/*\n\u6211\u4e8c\u5206\u51fa\u6765\u6700\u957f\u7684\u90a3\u6761\u7535\u8bdd\u7ebf\u7684\u957f\u5ea6\n\u7136\u540e\u4ece1\u5f00\u59cb\u641c\u7d22\n\u5982\u679c\u8fd9\u6761\u7ebf\u957f\u5ea6\u8d85\u51fa\u4e86\u4e8c\u5206\u51fa\u6765\u7684\u503c\n\u90a3\u5c31\u5148\u7528\u90a3k\u5bf9\u514d\u8d39\u7684\u7535\u8bdd\u7ebf\n\u5982\u679ck\u5bf9\u7528\u5b8c\u4e86\u90a3\u8fd9\u6761\u8def\u5c31\u662f\u884c\u4e0d\u901a\u7684\n\u5c31\u56de\u5230\u4e0a\u4e00\u4e2a\u70b9\u6362\u6761\u8def\u63a5\u7740\u641c\u7d22\n\u5982\u679c\u8fd9\u4e2a\u641c\u7d22\u91cc\u9762\u6709\u80fd\u591f\u5728\u6ee1\u8db3\u521a\u597d\u7528\u5b8c\u6216\u8005\u7528\u4e0d\u5b8ck\u6761\u514d\u8d39\u7684\u7535\u8bdd\u7ebf\u7684\u60c5\u51b5\u4e0b\n\u8fd8\u80fd\u591f\u8ba9\u6700\u957f\u7684\u7535\u8bdd\u7ebf\u5c0f\u4e8e\u7b49\u4e8e\u4e8c\u5206\u51fa\u6765\u7684\u6570\n\u90a3\u4e8c\u5206\u8fd4\u56de\u5c31\u662f\u771f  \n*/\n#include<iostream>\n#include<cstdio>\n#define int long long\nusing namespace std;\nconst int Max = 10004;\nconst int M = 1003;\nstruct node\n{\n\tint y,ne;\n\tint w;\n}a[Max << 1];\nint sum = 0;\nint head[M];\nvoid add(int u,int v,int w)\n{\n\ta[++ sum].y = v;\n\ta[sum].ne = head[u];\n\ta[sum].w = w;\n\thead[u] = sum;\n\t\n\ta[++ sum].y = u;\n\ta[sum].ne = head[v];\n\ta[sum].w = w;\n\thead[v] = sum; \n}\nint n,p,k;\nint fg;\nbool use[M];\n\nvoid dfs(int x,int fath,int js,int mm)\n{\n\tif(fg == 0)\n\t{\n\t\tif(x == n)\n\t\t{\n\t\t\tfg = 1;\n\t\t\treturn;\n\t\t}\n\t\tfor(register int i =head[x];i != 0;i = a[i].ne)\n\t\t{\n\t\t\tif(a[i].y != fath && use[a[i].y] == false)\n\t\t\t{\n\t\t\t\tif(a[i].w > mm)\n\t\t\t\t{\n\t\t\t\t\tif(js > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tuse[a[i].y] = true;\n\t\t\t\t\t\tdfs(a[i].y,x,js - 1,mm);\t\n\t\t\t\t\t\tuse[a[i].y] = false;\n\t\t\t\t\t}\n\t\t\t\t\telse\treturn;\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tuse[a[i].y] = true;\n\t\t\t\t\tdfs(a[i].y,x,js,mm);\t\n\t\t\t\t\tuse[a[i].y] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nbool check(int x)\n{\n\tfg = 0;\n\tdfs(1,0,k,x);\n\tif(fg == 0)return false;\n\telse\treturn true;\n}\n\nint father[M];\n\nint find(int x)\n{\n\tif(father[x] != x)father[x] = find(father[x]);\n\treturn father[x];\n}\n\nvoid hebing(int x,int y)\n{\n\tx = find(x);\n\ty = find(y);\n\tif(x != y)\n\t\tfather[x] = y;\n}\n\nsigned main()\n{\n\tcin >> n >> p >> k;\n\tint MM = 0; \n\tfor(register int i = 1;i <= n;++ i)\n\t\tfather[i] = i;\n\tfor(register int i = 1;i <= p;++ i)\n\t{\n\t\tint u,v,w;\n\t\tcin >> u >> v >> w;\n\t\tif(find(u) != find(v))\n\t\t\thebing(u,v);\n\t\tadd(u,v,w);\n\t\tMM = max(MM,w);\n\t}\n\tif(find(1) != find(n))\n\t{\n\t\tcout << -1 << endl;\n\t\treturn 0;\n\t}\n\tint l = 0,r = MM;\n\twhile(l < r)\n\t{\n\t\tint mid = (l + r) >> 1;\n\t\tif(check(mid))r = mid;\n\t\telse\tl = mid + 1;\n\t}\n\tcout << l << endl;\n\treturn 0;\n}\n```",
        "postTime": 1571657237,
        "uid": 186489,
        "name": "EarthGiao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u201c\u5e02\u573a\u7ecf\u6d4e\u5c31\u50cf\u4e00\u53ea\u770b\u4e0d\u89c1\u7684\u624b\uff0c\u6084\u6084\u5730\u5f71\u54cd\u7740\u8d44\u672c\u4e3b\u4e49\u4e16\u754c\u7684\u53d1\u5c55\u201d\n\n\u5206\u5c42\u56fe\u4e5f\u50cf\u4e00\u53ea\u770b\u4e0d\u89c1\u7684\u624b\uff0c\u62e5\u6709\u975e\u5e38\u5f3a\u5927\u7684\u81ea\u6211\u8c03\u63a7\u80fd\u529b\uff0c\u662f~~\u66b4\u529b~~\u89e3\u51b3\u95ee\u9898\u7684\u5229\u5668\u3002\n\n\u601d\u8def\uff1a\u4e8c\u5206+~~\u66b4\u529b~~\u5206\u5c42\u56feBFS\n\n\u6211\u4eec\u6784\u5efak+1\u5c42\u56fe\uff0c\u4ee5\u5e95\u5c42\u4e3a0\uff0c\u90a3\u4e48\u6bcf\u5c42\u4ee3\u8868\u7684\u5c31\u662f\u4f7f\u7528\u514d\u8d39\u7684\u6b21\u6570\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u6211\u4eec\u5728\u6bcf\u5c42\u5efa\u8fb9\u7684\u540c\u65f6\uff0c\u8fd8\u8981\u5411\u4e0a\u4e00\u5c42\u5bf9\u5e94\u7684\u70b9\u8fde\u4e00\u67610\u8fb9\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u5206\u5c42\u56fe\u4e0abfs\u904d\u5386\uff0c\u82e5\u904d\u5386\u5230\u7ec8\u70b9\u5c31\u7acb\u523b\u8fd4\u56detrue\uff0c\u82e5\u65e0\u6cd5\u904d\u5386\u5230\u5219\u8fd4\u56defalse\u3002\n\n\u81f3\u4e8e\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u7acb\u4e2aflag\u5224\u4e00\u4e0b\u5c31\u597d\n\n\u4e0a\u4ee3\u7801\u2193\n\n```\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nconst int MAXN=1e6,MAXM=1e7;\n\nint n,p,k,x,y,z,np;\nint h[MAXN<<1],ln[MAXN<<1],q[MAXM<<1];\nbool vis[MAXN<<1],fl;\nstruct rpg{\n    int li,nx,ln;\n}a[MAXM<<1];\n\nvoid add(int ls,int nx,int ln){\n    a[++np]=(rpg){h[ls],nx,ln};\n    h[ls]=np;\n}\n\nbool check(int mid){\n\tmemset(vis,0,sizeof(vis));\n\tint hd=1,tl=1;\n\tq[hd]=1;\n\tvis[1]=1;\n\twhile(hd<=tl){\n\t\tint nw=q[hd++];\n\t\tfor(int i=h[nw];i;i=a[i].li){\n\t\t\tif(!vis[a[i].nx]&&a[i].ln<=mid){\n\t\t\t\tvis[a[i].nx]=1;\n\t\t\t\tq[++tl]=a[i].nx;\n\t\t\t\tfl|=(a[i].nx%n==0);\n\t\t\t\tif(a[i].nx%n==0) return 1;\n\t\t\t}\n\t\t}\n\t}return 0;\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&p,&k);\n    for(int i=1;i<=p;++i){\n        scanf(\"%d%d%d\",&x,&y,&z);\n        for(int j=0;j<k;++j){\n            add(x+n*j,y+n*j,z);\n            add(y+n*j,x+n*j,z);\n            add(x+n*j,y+n*(j+1),0);\n            add(y+n*j,x+n*(j+1),0);\n        }add(x+n*k,y+n*k,z);\n        add(y+n*k,x+n*k,z);\n    }int l=0,r=MAXN;\n    while(l<r){\n    \tint mid=l+r>>1;\n    \tif(check(mid)) r=mid;\n    \telse l=mid+1;\n\t}if(!fl){\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}printf(\"%d\\n\",l);\n    return 0;\n}\n```",
        "postTime": 1522409179,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "# \u4e8c\u5206\u7b54\u6848+\u53cc\u7aef\u961f\u5217BFS\n\u770b\u5230\u9898\u89e3\u533a\u5927\u591a\u662fSPFA\uff0c\u6240\u4ee5\u5199\u4e00\u4e0bBFS\u3002\n\n\u5927\u4f53\u601d\u8def\uff1a\u4e8c\u5206\u7b54\u6848mid\u4f5c\u4e3a\u82b1\u8d39\uff0c\u56e0\u4e3a\u53ea\u9700\u652f\u4ed8\u7b2ck+1\u5927\u7684\u8fb9\u7684\u82b1\u8d39\uff08\u663e\u7136\u5e94\u514d\u8d39\u6743\u503c\u6700\u5927\u7684k\u6761\u8fb9\uff09,\u6240\u4ee5\u5c06\u8fb9\u6743\u5927\u4e8emid\u7684\u770b\u4f5c\u8fb9\u67431\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u7684\u770b\u4f5c\u8fb9\u67430\u3002\u6b64\u65f6\u6c42\u4e00\u6761\u4ece\u8282\u70b91\u5230n\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u5982\u679c\u6700\u77ed\u8def\u5927\u4e8ek\u8bf4\u660e\u9700\u8981\u514d\u8d39\u7684\u8d85\u8fc7\u4e86k\u6761\u8fb9\uff0c\u5219\u5c06\u53f3\u7aef\u70b9r=mid-1\uff0c\u5426\u5219\u5c06\u5de6\u7aef\u70b9l=mid+1\u3002\n\n\u81f3\u4e8e\u521d\u59cb\u8fb9\u754c\uff0ck>=1,\u6240\u4ee5l\u521d\u59cb\u5316\u4e3a\u6700\u5c0f\u8fb9\u6743\uff0cr\u521d\u59cb\u5316\u4e3a\u6700\u5927\u8fb9\u6743\u3002\n\n**\u5bf9\u4e8e\u8fd9\u79cd\u8fb9\u6743\u53ea\u67090\u548c1\u7684\u6700\u77ed\u8def\uff0c\u5c31\u53ef\u4ee5\u7528\u53cc\u7aef\u961f\u5217BFS\u6c42\u89e3\u3002**\n\n**\u4e0e\u666e\u901aBFS\u4e0d\u540c\u7684\u662f\uff0c\u5f53\u52a0\u51650\u8fb9\u6743\u7684\u8fb9\u65f6\uff0c\u4ece\u961f\u9996\u52a0\u5165\uff1b\u52a0\u51651\u8fb9\u6743\u7684\u8fb9\u65f6\uff0c\u4ece\u961f\u5c3e\u52a0\u5165\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u53d6\u961f\u9996\u662f\u90fd\u662f\u5f53\u524d\u6700\u77ed\u8ddd\u79bb\u6765\u66f4\u65b0\u5176\u4ed6\u7684\u8282\u70b9\u3002**\n\n\u65f6\u95f4\u590d\u6742\u5ea6((n+m)log(r-l))\uff0c\u5982\u679c\u7528SPFA\uff0c\u590d\u6742\u5ea6(kmlog(r-l))(k\u662f\u8f83\u5c0f\u7684\u5e38\u6570\uff0c\u849f\u84bb\u4e5f\u4e0d\u4f1a\u8bc1)\u3002\n\n**\u4ee3\u7801\u5f88\u597d\u7406\u89e3\uff0c\u624b\u5199\u961f\u5217\u3002\u8bb0\u5f97\u4e00\u5b9a\u8981\u5c06\u961f\u5217\u5f00\u5927\u4e00\u4e9b\uff0c\u56e0\u4e3a\u8981\u5728\u4e24\u7aef\u63d2\u5165\u3002\u961f\u9996\u548c\u961f\u5c3e\u6307\u9488\u521d\u59cb\u5316\u4e3a\u4e2d\u95f4\u4f4d\u7f6e\u3002**\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int maxn=1e3+10;\nconst int maxm=1e5+10;\nint n,m,k,s,ans=2e9,f[maxn];\nint q[maxn<<6],dis[maxn],h1,t1;//q\u662f\u961f\u5217\uff0cdis\u5b58\u50a81\u53f7\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u8ddd\u79bb\u3002\nstruct edge{\n\tint t;\n\tint v;\n\tint w;\n}e[maxm<<1];\nint fr(){\n\tchar ch=getchar();\n\twhile(ch>'9'||ch<'0')\n\t\tch=getchar();\n\tint sum=ch-'0';\n\twhile((ch=getchar())>='0'&&ch<='9')\n\t\tsum=(sum<<3)+(sum<<1)+ch-'0';\n\treturn sum;\n}//\u5feb\u8bfb\nvoid add(int x,int y,int z){\n\ts++;\n\te[s].t=f[x];\n\te[s].v=y;\n\te[s].w=z;\n\tf[x]=s;\n}//\u90bb\u63a5\u8868\u5b58\u8fb9\nbool check(int x){\n\tint y;\n\th1=t1=maxn<<3;\n\tq[++t1]=1;\n\tdis[1]=0;\n\twhile(h1<t1){\n\t\th1++;\n\t\ty=q[h1];\n\t\tfor(int i=f[y];i!=0;i=e[i].t)\n\t\t\tif(dis[e[i].v]>dis[y]){\n\t\t\t\tif(e[i].w<=x){\n\t\t\t\t\tq[h1--]=e[i].v;\n\t\t\t\t\tdis[e[i].v]=dis[y];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tq[++t1]=e[i].v;\n\t\t\t\t\tdis[e[i].v]=dis[y]+1;\n\t\t\t\t}\n\t\t\t}\n\t}\n\tif(dis[n]>k)\n\t\treturn false;\n\treturn true;\n}\nint main(){\n\tn=fr();\n\tm=fr();\n\tk=fr();\n\tint x,y,z,l=2e9,r=0,mid;\n\tfor(int i=1;i<=m;i++){\n\t\tx=fr();\n\t\ty=fr();\n\t\tz=fr();\n\t\tl=min(l,z);\n\t\tr=max(r,z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\t\n\twhile(l<=r){\n\t\tmemset(dis,0x3f,sizeof(dis));//\u6bcf\u6b21\u8bb0\u5f97\u521d\u59cb\u5316dis\u6570\u7ec4\n\t\tmid=(l+r)>>1;\n\t\tif(check(mid)){\n\t\t\tans=min(ans,mid);\n\t\t\tr=mid-1;\n\t\t}\n\t\telse\n\t\t\tl=mid+1;\n\t}\n\tif(ans!=2e9)\n\t\tprintf(\"%d\",ans);\n\telse\n\t\tprintf(\"-1\");\n\treturn 0;\n}\n```\n\u795d\u5927\u5bb6AC\uff01",
        "postTime": 1565504589,
        "uid": 118433,
        "name": "LB_tq",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u53e6\u4e00\u79cd\u4e8c\u5206\u7684\u601d\u8def\uff0c\u8003\u8bd5\u8003\u6a21\u677f\u70e4\u5230\u8fd9\u9053\u9898\u4e86\uff0c\u636e\u8bf4\u662f\u4e00\u9053\u4e8c\u5206+$spfa$\u7684\u9898\uff0c\u7684\u786e\u662f\u8fd9\u6837\u7684\n\n\u6b63\u5e38\u7684\u4e8c\u5206\u5957\u8def\u662f\u628a$>mid$\u7684\u8fb9\u7684\u4ee3\u4ef7\u770b\u6210$1$\uff0c\u800c$<=mid$\u7684\u8fb9\u7684\u4ee3\u4ef7\u770b\u6210\u662f$0$\uff0c\u90a3\u4e48$spfa$\u6700\u77ed\u8def\uff0c\u5224\u65ad\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4ee3\u4ef7\u662f\u5426\u8d85\u8fc7$k$\u5373\u53ef\u3002\n\n\u6700\u77ed\u8def\u66f4\u65b0\u7684\u60f3\u6cd5\u5c31\u662f\u8fd9\u4e48\u5947\u7279\uff1a\n\n\u540c\u6837\u662f\u4e8c\u5206$mid$\uff0c\u4f46\u662f\u8fd9\u91cc\u5224\u65ad\u7684\u662f\u80fd\u5426\u5230\u8fbe\u7ec8\u70b9\uff0c\n\n\u8bbe$d[i]$\u4e3a\u5230\u8fbe$i$\u7684\u6700\u77ed\u8def\u5f84\u6761\u6570\uff0c$px[i]$\u8868\u793a\u5230\u8fbe$i$\u7684\u4f7f\u7528\u4e86\u591a\u5c11\u6b21\u514d\u8d39\u6b21\u6570\n\n\u6bcf\u6b21\u6309\u7167\u6700\u77ed\u8def\u7684\u5957\u8def\u66f4\u65b0$d$\u548c$px$\n\n\n```\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n\n#define LL long long\nusing namespace std;\n\nvoid in(int &x) {\n\tregister char c=getchar();\n\tx=0;\n\tint f=1;\n\twhile(!isdigit(c)) {\n\t\tif(c=='-') f=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)) {\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\tx*=f;\n}\n\nvoid print(int x) {\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) print(x/10);\n\tputchar(x%10+'0');\n}\n\n#define N 100000\n\nint n,p,k,tot,head[N];\nstruct node {\n\tint to,next,w;\n} e[N];\n\nvoid add(int u,int v,int w) {\n\te[++tot].to=v,e[tot].next=head[u],head[u]=tot,e[tot].w=w;\n}\n\nint d[N],px[N];\nbool vis[N];\nqueue<int>Q;\nbool spfa(int X) {\n\tmemset(d,0x7f,sizeof(d));\n\tmemset(vis,0,sizeof(vis));\n\tQ.push(1),d[1]=0,px[1]=k;\n\twhile(!Q.empty()) {\n\t\tint u=Q.front();\n\t\tQ.pop();\n\t\tvis[u]=false;\n\t\tfor(int i=head[u]; i; i=e[i].next) {\n\t\t\tint v=e[i].to;\n\t\t\tif(e[i].w<=X&&d[v]>d[u]+1) {\n\t\t\t\td[v]=d[u]+1,px[v]=px[u];\n\t\t\t\tif(!vis[v]) Q.push(v),vis[v]=true;\n\t\t\t}\n\t\t\tif(e[i].w>X&&d[v]>d[u]+1&&px[u]!=0) {\n\t\t\t\tpx[v]=px[u]-1,d[v]=d[u]+1;\n\t\t\t\tif(!vis[v]) Q.push(v),vis[v]=true;\n\t\t\t}\n\t\t\tif(d[v]<=d[u]+1) {\n\t\t\t\tif(e[i].w<=X&&px[v]<px[u]) {\n\t\t\t\t\tpx[v]=px[u];\n\t\t\t\t\tif(!vis[v]) Q.push(v),vis[v]=true;\n\t\t\t\t}\n\t\t\t\tif(e[i].w>X&&px[v]<px[u]-1) {\n\t\t\t\t\tpx[v]=px[u]-1;\n\t\t\t\t\tif(!vis[v]) Q.push(v),vis[v]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn d[n]!=d[0];\n}\n\nint main() {\n\tin(n),in(p),in(k);\n\tint l=0,r=0,mid,ans;\n\tfor(int u,v,w,i=1; i<=p; i++) {\n\t\tin(u),in(v),in(w);\n\t\tadd(u,v,w),add(v,u,w);\n\t\tif(w>r) r=w;\n\t}\n\tif(!spfa(2147483647)) return print(-1),0;\n\n\twhile(l<=r) {\n\t\tmid=(l+r)>>1;\n\t\tif(spfa(mid)) r=mid-1,ans=mid;\n\t\telse l=mid+1;\n\t}\n\tprint(ans);\n\n\treturn 0;\n}\n```",
        "postTime": 1541668265,
        "uid": 95811,
        "name": "\u6218\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\n\n------------\n## \u5e9f\u8bdd\n\n\u770b\u5230\u6240\u6709\u9898\u89e3\u90fd\u6ca1\u6709\u7528pair\u7684\uff0c\u6253\u5b8cpair\u4e4b\u540e\u771f\u7684\u611f\u89c9\u6e05\u723d\u4e86\u8bb8\u591a\uff0cSTL\u5927\u6cd5\u597d\u554a\uff01\n\n## \u57fa\u672c\u601d\u8def\n\n\u6211\u4eec\u7528\u4e8c\u5143\u7ec4\u4ee3\u8868\u4e00\u4e2a\u70b9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u66f4\u6e05\u695a\u7684\u7406\u89e3\u6b64\u9898\u4e0e\u6700\u77ed\u8def\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\n\n\u4ece$ <u,k> -> <v,k> $ \u6709\u957f\u5ea6\u4e3al\u7684\u8fb9;\n\n\u4ece$<u,k> -> <v,k+1>$ \u6709\u957f\u5ea6\u4e3a0\u7684\u8fb9;\n\n\u6211\u4eec\u7684dp\u6570\u7ec4\u5c31\u662f\u4ee3\u8868\u4ece\u8d77\u70b9\u5230<u,k>\u7684\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\u6700\u77ed\u662f\u591a\u5c11\n\u6211\u4eec\u5f88\u5bb9\u6613\u5f97\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b:\n\n\u4e0d\u7528:$dp[v][k] = min(dp[v][k],max(dp[u][k],e[i].dis))$\n\n\u7528:$dp[v][k+1]=min(dp[v][k+1],dp[u][k])$\n\n**\u89e3\u91ca\u4e00\u4e0b\uff1a**\n\u7528max(dp[u][k],e[i].dis)\u6765\u66f4\u65b0dp[v][k]\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u4f60\u8981\u627e\u4e00\u4e2a\u7b2ck-1\u5927\u7684\u8fb9\uff0c\u8ba9\u8fd9\u4e2a\u8fb9\u66f4\u5c0f\uff0c\u4f60\u8f6c\u79fb\u76f8\u5f53\u4e8e\u677e\u5f1b\u64cd\u4f5c\uff0c\u5148\u627e\u4e00\u4e2a\u66f4\u5927\u7684\u6765\u5f53\u505a\u7b2ck\u5927\uff0c\n\u7136\u540e\u8f6c\u79fb\u6700\u5c0f\u503c\uff0c\n\n\u5b9e\u73b0\u5c31\u7528pair\u5c31\u597d\u4e86\n\nvans~~~~\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<queue>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#include<ctime>\n#include<cstdlib>\nusing namespace std;\nconst int maxn=1005;\nconst int maxm=500000;\nconst int INF=0x3f3f3f3f;\nstruct edge{\n\tint to,next,dis;\n}e[maxm];\nint head[maxm],cnt;\nint N,P,K;\nint dis[maxn][maxn];\nbool vis[maxn][maxn];\nvoid add_edge(int u,int v,int w){\n\te[++cnt].next=head[u];\n\te[cnt].to=v;\n\te[cnt].dis=w;\n\thead[u]=cnt;\n}\nqueue<pair<int,int> >q;\nvoid spfa(){\n\tmemset(dis,INF,sizeof(dis));\n\tdis[1][0]=0;\n\tvis[1][0]=1;\n\tq.push(pair<int,int>(1,0));\n\twhile(!q.empty()){\n\t\tpair<int,int> tmp=q.front();q.pop();\n\t\tint u=tmp.first,k=tmp.second;\n\t\tvis[u][k]=0;\n\t\tfor(int i=head[u];i;i=e[i].next){\n\t \t\tint v=e[i].to;\n\t\t\tif(max(dis[u][k],e[i].dis)<dis[v][k]){\n\t\t\t\tdis[v][k]=max(dis[u][k],e[i].dis);\n\t\t\t\tif(!vis[v][k]){\n\t\t\t\t\tq.push(pair<int,int>(v,k));\n\t\t\t\t\tvis[v][k]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(k<K&&dis[u][k]<dis[v][k+1]){\n\t\t\t\tdis[v][k+1]=dis[u][k];\n\t\t\t\tif(!vis[v][k+1]){\n\t\t\t\t\tq.push(pair<int,int>(v,k+1));\n\t\t\t\t\tvis[v][k+1]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d\",&N,&P,&K);\n\tfor(int i=1;i<=P;i++){\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd_edge(u,v,w);\n\t\tadd_edge(v,u,w);\n\t}\n\tspfa();\n\tif(dis[N][K]==INF) cout<<-1<<endl;\n\telse cout<<dis[N][K]<<endl;\n\t//printf(\"Time used= %.2f\\n\",(double)clock()/CLOCKS_PER_SEC);\n\t//system(\"pause\");\n\treturn 0;\n}\n\n```",
        "postTime": 1540379521,
        "uid": 51477,
        "name": "Dying_Light",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "# \u5206\u6790\n\n\u3010\u778e\u626f\u3011\n\n\u4e0d\u597d\u610f\u601d\u6211\u53c8\u8981\u778e\u626f\u4e86\uff0c\u8fd8\u662f\u63d0\u9192\u5404\u4f4d\u5ba1\u9898\uff01\n\n\u62ff\u5230\u9898\u76ee\u770b\u4e86\u4e00\u904d\u7136\u540e\u9ed8\u9ed8\u5730\u60f3\u8d77\u4e86\u3010BZOJ 2763 \u98de\u884c\u8def\u7ebf\u3011\uff08\u522b\u627e\u4e86\u8fd9\u9898\u6211\u538b\u6839\u513f\u5c31\u6ca1\u8fc7\uff09\u3002\u9898\u9762\u5b8c\u5168\u4e00\u6bdb\u4e00\u6837\u7684\uff01\u7136\u540e\u6240\u4ee5\u8fd9\u662f\u5206\u5c42\u56fe\uff1f\u7b49\u4e0b\u6211\u4eec\u56fe\u8bba\u4e13\u9898\u624d\u521a\u5f00\u59cb\u4e0a\u4e86\u534a\u5929\u5c31\u7ed9\u6211\u505a\u5206\u5c42\u56fe\uff1f\u54e6\u662f\u5417\u6211\u8981\u6295\u8bc9\u6e05\u5317\u5b66\u5802\u3002\n\n\u2026\u2026\u53c8\u6ca1\u770b\u9898\u76ee\n\n\u3010\u6b63\u7ecf\u3011\n\n\u9996\u5148\u6211\u4eec\u6765\u4e00\u8d77\u8bfb\u9898\u3010\u96fe\n\n    As it turns out, the phone company is willing to provide Farmer John with K (0 \u2264 K < N) lengths of cable for free. Beyond that he will have to pay a price equal to the length of the longest remaining cable he requires (each pair of poles is connected with a separate cable), or 0 if he does not need any additional cables.\n\n\u672c\u9898\u6700\u91cd\u8981\u7684\u4e00\u53e5\u8bdd\u2191\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\uff0c\u7535\u4fe1\u516c\u53f8\u3010\u79fb\u52a8\uff1a\uff1f\u3011\u613f\u610f\u652f\u4ed8\u5176\u4e2dk\u6761\u7535\u8bdd\u7ebf\u7684\u8d39\u7528\uff0c\u5176\u4f59\u7684\u7535\u8bdd\u7ebf\u4e2d\uff0cFJ\u652f\u4ed8\u6700\u8d35\u7684\u4e00\u6761\uff08\u7535\u4fe1\u516c\u53f8\u771f\u5dee\u52b2\uff0c\u4e0b\u6b21\u627e\u79fb\u52a8\u3010\u7535\u4fe1\uff1a\uff1f\u3011\uff09\u3002\u7b80\u5355\u60f3\u4e00\u4e0b\uff1a\u8d2a\u5fc3\u7684\u60f3\u6cd5\uff0c\u6700\u4f73\u60c5\u51b5\uff0c\u6211\u4eec\u627e\u524dk\u8d35\u7684\u8ba9\u7535\u4fe1\u516c\u53f8\u4ed8\u94b1\uff0c\u7b2ck+1\u8d35\u7684\u8ba9FJ\u4ed8\u94b1\u3002\n\n\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2acheck(int c)\u6765\u68c0\u67e5\u5f53\u6211\u4eec\u652f\u4ed8\u4ef7\u683c\u4e3ac\u7684\u7535\u8bdd\u7ebf\u65f6\uff0c\u6211\u4eec\u662f\u5426\u80fd\u6210\u529f\u8ba9\u6574\u4e2a\u7ebf\u8def\u8fd0\u884c\u8d77\u6765\u3002\u6709\u4e86\u5b83\u6211\u4eec\u5c31\u53ef\u4ee5\u8086\u65e0\u5fcc\u60ee\u5730\u4e8c\u5206\u4e86\uff01\u539f\u56e0\u5f88\u7b80\u5355\uff1a\u663e\u7136\u662f\u5355\u8c03\u7684\u4e14\u6211\u4eec\u6709check()\u6765\u5e2e\u6211\u4eec\u68c0\u67e5\u53ef\u884c\u6027\u3002\n\n\u90a3\u4e48\u672c\u9898\u7684\u7ec8\u70b9\u5c31\u8f6c\u79fb\u5230\u4e86\u5982\u4f55\u5199\u51facheck()\u51fd\u6570\u3002\n\n\u5047\u5982\u5f53\u524d\u6211\u4eec\u4e8c\u5206\u5230mid\uff0c\u6211\u4eec\u5c06\u6240\u6709\u6743\u503c\u5927\u4e8emid\u7684\u6240\u6709\u7535\u8bdd\u7ebf\u7684\u6743\u503c\u5168\u90e8\u8bbe\u7f6e\u4e3a1\uff08\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u6d88\u8017\u4e00\u6b21\u3010\u7535\u8bdd\u7ebf\u62b5\u7528\u5238\u3011\u6765\u5047\u8bbe\u7535\u8bdd\u7ebf\uff09\uff0c\u800c\u6743\u503c\u5c0f\u4e8emid\u5219\u5168\u90e8\u8bbe\u7f6e\u4e3a0\uff08\u6211\u4eec\u4e0d\u9700\u8981\u8ba9FJ\u4ed8\u6b3e\uff0c\u4e5f\u4e0d\u9700\u8981\u8ba9\u7535\u4fe1\u638f\u94b1\uff09\u3002\u5bf9\u4e8e\u8fd9\u4e2a0/1\u7684\u56fe\u8dd1SPFA\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u5927\u4e8ek\uff0c\u610f\u5473\u7740\u8fd9\u4e2ak\u7136\u800c\u5e76\u4e0d\u53ef\u884c\uff0c\u6211\u4eec\u7f29\u5c0f\u5de6\u8fb9\u754c\u7ee7\u7eed\u4e8c\u5206\uff1b\u82e5\u6211\u4eec\u53d1\u73b0\u5b83\u5c0f\u4e8e\u7b49\u4e8ek\uff0c\u8bf4\u660e\u6211\u4eec\u4ecd\u7136\u6709\u53ef\u80fd\u6709\u66f4\u4f18\u89e3\uff0c\u7f29\u5c0f\u53f3\u8fb9\u754c\u7ee7\u7eed\u4e8c\u5206\u3002\n\n\u672c\u9898\u7684\u4e00\u5927\u91cd\u70b9\u8fd8\u662f\u641e\u6e05\u695aleft/mid/right\u7684\u5173\u7cfb\uff0c\u6216\u8005\u8bf4\u8fd9\u5c31\u662f\u4e8c\u5206\u7684\u4e00\u4e2a\u96be\u70b9\u5427\u3002\n\n# \u7a0b\u5e8f\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2000, MAXM = 20000;\nint n, m, k, Head[MAXN], Edge_Count, ans, G[MAXN][MAXN];\nstruct edge\n{\n    int Next, From, Aim, Weight;\n}Edge[MAXM];\nvoid insert(int u, int v, int w)\n{\n    Edge[++Edge_Count] = (edge){Head[u], u, v, w};\n    Head[u] = Edge_Count;\n}\nbool check(int Len)\n{\n    // \u521d\u59cb\u5316G\u6570\u7ec4\u4e3a-1,-1\u4ee3\u8868\u6ca1\u6709\u8fb9\u76f8\u8fde\n    for (int i = 1; i < MAXN; i++)\n        for (int j = 1; j < MAXN; j++)\n            G[i][j] = -1;\n    memset(dis,0x3F,sizeof(dis));\n    for (int i = 1; i <= Edge_Count; i++)\n        if (Edge[i].Weight > Len)\n            G[Edge[i].From][Edge[i].Aim] = 1, G[Edge[i].Aim][Edge[i].From] = 1;\n        else\n            G[Edge[i].From][Edge[i].Aim] = 0, G[Edge[i].Aim][Edge[i].From] = 0;\n    // 0:\u6709\u8fb9\u76f8\u8fde,\u4e14\u6743\u503c\u5c0f\u4e8eLen\n    // 1:\u6709\u8fb9\u76f8\u8fde,\u4e14\u6743\u503c\u5927\u4e8eLen,\u6d88\u8017\u4e00\u6b21\u7535\u8bdd\u7ebf\u62b5\u7528\u5238\n    // \u4ee5\u4e0b\u6807\u51c6SPFA\n    queue<int> Q;\n    Q.push(1);\n    int dis[MAXN];\n    dis[1] = 0;\n    bool vis[MAXN];\n    vis[1] = true;\n    while (!Q.empty())\n    {\n        int u = Q.front();\n        Q.pop();\n        for (int i = 1; i <= n; i++)\n        {\n            if (G[u][i] != -1 && dis[u]+G[u][i] < dis[i])\n            {\n                dis[i] = dis[u]+G[u][i];\n                if (!vis[i])\n                    vis[i] = true, Q.push(i);\n            }\n        }\n        vis[u] = false;\n    }\n    // \u82e5\u6700\u5c11\u7684\u5c0f\u53f7\u6b21\u6570\u5927\u4e8ek,\u8fd9\u79cd\u60c5\u51b5\u4e0d\u53ef\u4fe1,\u8fd4\u56de\u5047\n    // \u5426\u5219\u8bf4\u660e\u662f\u4e00\u4e2a\u53ef\u884c\u89e3,\u4f46\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u89e3,\u8fd4\u56de\u771f\u7ee7\u7eed\u4e8c\u5206\n    if (dis[n] > k)\n        return false;\n    else\n        return true;\n}\nint main()\n{\n    freopen(\"tele.in\",\"r\",stdin);\n    cin >> n >> m >> k;\n    for (int i = 1; i <= m; i++)\n    {\n        int u, v, w;\n        cin >> u >> v >> w;\n        insert(u,v,w);\n        insert(v,u,w);\n    }\n    int l = 0, r = 1000000000, mid;\n    bool flag = false;\n    while (l < r)\n    {\n        mid = (l+r)/2;\n        if (check(mid))\n            r = mid, flag = true;\n        else\n            l = mid + 1;\n    }\n    // flag\u8bf4\u660e\u6211\u4eec\u662f\u5426\u627e\u5230\u8fc7\u53ef\u884c\u7684\u89e3\n    // \u82e5\u6ca1\u6709,\u8f93\u51fa-1\n    if (flag)\n        cout << l << endl;\n    else\n        cout << -1 << endl;\n    return 0;\n}\n```",
        "postTime": 1518488983,
        "uid": 9671,
        "name": "OptimusPrime_L",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "```cpp\n//\u4e8c\u5206\u7b54\u6848+\u6700\u77ed\u8def\u5224\u65ad \n//\u6211\u4eec\u9700\u8981\u4e8c\u5206\u6bcf\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\uff0c\u518d\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5224\u65ad\u7b54\u6848\u662f\u5426\u53ef\u884c \n//\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u91c7\u7528\u7684\u662f\u6bd4\u8f83\u7a00\u6709\u7684\u5806\u4f18dij\u4e86 \n//\u4e0d\u8fc7\u6211\u4eec\u8fd9\u91ccdij\u8dd1\u7684\u4e0d\u662f\u8ddd\u79bb\uff0c\u800c\u662f\u4f7f\u7528\u90a3\u4e2a\u514d\u8d39\u540d\u989d\u7684\u6b21\u6570 \n//\u8fd8\u662f\u4e0a\u4ee3\u7801\u5427 \n#pragma GCC optimize(3)\n#include<cstring>\n#include<queue>\n#include<cstdio>\n#include<iostream>\n#include<vector>\n#include<fstream>\n#include<algorithm>\nusing namespace std;\n#define maxn 1001\n#define re register\n#define inf 999999999\n#define maxw 10001*2//\u65e0\u5411\u56fe\u524d\u5411\u661f\u5f00\u4e24\u500d \ntypedef pair<int,int> pii;\npriority_queue<pii,vector<pii>,greater<pii> > q;//\u4e00\u4e2adij\u8981\u7528\u7684\u5c0f\u6839\u5806 \nstruct node\n{\n    int u,v,w,nxt;\n}edge[maxw];\nint d[maxn],head[maxn],a[maxw];\n//d[i]\u50a8\u5b58\u7684\u662f\u4ece1\u5230i\u6240\u4f7f\u7528\u514d\u8d39\u540d\u989d\u7684\u6700\u5c0f\u6b21\u6570 \nint n,m,p,s=1,num=1,ans=inf;\nbool f[maxn];\ninline void read(int &x)\n{\n    char c=getchar();\n    x=0;\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=x*10+c-48;\n        c=getchar();\n    }\n}//\u8bfb\u5165\u4f18\u5316\ninline void add_edge(int x,int y,int z)\n{\n    edge[num].u=x;\n    edge[num].v=y;\n    edge[num].w=z;\n    edge[num].nxt=head[x];\n    head[x]=num;\n    num++;\n}//\u524d\u5411\u661f\u52a0\u8fb9\ninline bool dijkstra(int now)\n{\n    for(re int i=1;i<=n;i++)\n    {\n        d[i]=inf;\n        f[i]=false;\n    }\n    d[s]=0;\n    q.push(make_pair(d[s],s));\n    while(!q.empty())\n    {\n        pii mind=q.top();\n        q.pop();\n        int k=mind.second;\n        if(f[k]) continue;\n        else\n        {\n            f[k]=true;\n            for(re int i=head[k];i!=-1;i=edge[i].nxt)\n            {\n                if(edge[i].w>now)\n                if(d[edge[i].v]>d[k]+1)\n                {\n                    d[edge[i].v]=d[k]+1;\n                    q.push(make_pair(d[edge[i].v],edge[i].v));\n}//\u5982\u679c\u5230edge[i].v\u7684\u8fb9\u5927\u4e8e\u5f53\u524d\u4e8c\u5206\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u5c31\u8981\u4f7f\u7528\u4e00\u6b21\u540d\u989d\n                if(edge[i].w<=now)\n                if(d[edge[i].v]>d[k])\n                {\n                    d[edge[i].v]=d[k];\n                    q.push(make_pair(d[edge[i].v],edge[i].v));\n}//\u5982\u679c edge[i].v\u7684\u8fb9\u4e0d\u5927\u4e8e\u5f53\u524d\u4e8c\u5206\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u5c31\u65e0\u9700\u4f7f\u7528\u540d\u989d\uff0c\u76f4\u63a5\u677e\u5f1b\u64cd\u4f5c\n            }\n        }\n    }\n    if(d[n]>p) return false;//\u5982\u679c\u5230\u8fben\u7684\u6b21\u6570\u5927\u4e8e\u514d\u8d39\u7684\u6b21\u6570\u9650\u5236\uff0c\u90a3\u4e48\u5f53\u524d\u7b54\u6848\u4e0d\u53ef\u884c\n    return true;//\u53cd\u4e4b\uff0c\u5219\u53ef\u884c \n}\nint main()\n{\n    read(n);\n    read(m);\n    read(p);\n    for(re int i=1;i<=n;i++)\n      head[i]=-1;\n    int xx,yy,zz;\n    for(re int i=1;i<=m;i++)\n    {\n        read(xx);\n        read(yy);\n        read(zz);\n        add_edge(xx,yy,zz);\n        add_edge(yy,xx,zz);\n        a[i]=zz;\n    }\n    sort(a+1,a+1+m);\n    if(dijkstra(0))\n    {\n        cout<<\"0\"<<endl;\n        return 0;\n\t}//\u7279\u5224\uff0c\u7b54\u6848\u4e3a0\u7684\u60c5\u51b5\n    if(!dijkstra(a[m]))\n    {\n        cout<<\"-1\"<<endl;\n        return 0;\n\t}//\u7279\u5224\uff0c\u5982\u679c\u7b54\u6848\u6700\u5927\u90fd\u4e0d\u80fd\u5230\u8fbe\uff0c\u8f93\u51fa-1\u9000\u51fa\n    int l=1,r=m;\n    while(l<=r)\n    {\n        int mid=(l+r)/2;\n        if(dijkstra(a[mid]))\n        {\n            ans=min(ans,a[mid]);\n            r=mid-1;\n        }\n        else l=mid+1;//\u53ef\u4ee5\u8bf4\u662f\u5f88\u6807\u51c6\u7684\u4e8c\u5206\u4e86 \n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1515847100,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7528\u4e8c\u5206\u679a\u4e3e\u7b54\u6848\u3002\u679a\u4e3e\u4e00\u4e2a\u503c\uff0c\u9a8c\u8bc1\u8fd9\u4e2a\u503c\u662f\u5426\u6ee1\u8db3\u4fee\u7b51\u6210\u672c\u80fd\u8fbe\u5230\u8fd9\u4e48\u5c0f\u3002\uff08\u5047\u8bbe\u5f53\u524d\u4e8c\u5206\u679a\u4e3e\u5230mid\u8fd9\u4e2a\u503c\uff09\n\n\n\u8dd1SPFA\uff0c\u628a\u6240\u6709\u5927\u4e8emid\u7684\u8fb9\u7684\u8fb9\u6743\u90fd\u770b\u4f5c1\uff0c\u5176\u4f59\u770b\u4f5c0.\u82e5\u7ec8\u70b9\u7684\u8ddd\u79bb\u5927\u4e8ek\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u4e0d\u6b62k\u6761\u8fb9\u5927\u4e8e\u7b49\u4e8emid\uff0c\u65e0\u6cd5\u5168\u90e8\u62a5\u9500\uff0c\u90a3\u4e48\u4fee\u7b51\u6210\u672c\u5c06\u5927\u4e8emid\uff0c\u4e8e\u662f\u91cd\u65b0\u679a\u4e3emid\u3002\u5047\u5982\u7ec8\u70b9n\u7684\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8emid\uff0c\u90a3\u4e48\u4fee\u7b51\u6210\u672c\u80fd\u8fbe\u5230mid\u8fd9\u4e48\u5c0f\uff0c\u4e8e\u662f\u7528mid\u66f4\u65b0\u7b54\u6848\uff0c\u4f46\u662f\u8981\u679a\u4e3e\u66f4\u5c0f\u7684mid\u503c\uff0c\u770b\u4fee\u7b51\u6210\u672c\u80fd\u4e0d\u80fd\u66f4\u5c0f\u3002\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<queue>\n#include<cstdlib>\nusing namespace std;\nint n,m,k;\nstruct E{\n    int v,next,dis;\n};\nE edge[20010];\nint sum=0;\nint fir[1010];\nint read(){\n    char c;\n    do{\n        c=getchar();\n    }while(c<'0'||c>'9');\n    int ret=0;\n    do{\n        ret=ret*10+c-48;\n        c=getchar();\n    }while(c>='0'&&c<='9');\n    return ret;\n}\nvoid add(int u,int v,int dis){\n    edge[++sum].next=fir[u];\n    fir[u]=sum;\n    edge[sum].v=v;\n    edge[sum].dis=dis;\n}\nint mid;\nint dis[1010];\nbool ex[1010];\nvoid SPFA(){\n    queue<int> q;\n    q.push(1);\n    ex[1]=1;\n    dis[1]=0;\n    while(!q.empty()){\n        int u=q.front();\n        q.pop();\n        ex[u]=0;\n        for(int i=fir[u];i;i=edge[i].next)\n        {\n            int v=edge[i].v;\n            int d=edge[i].dis>=mid?1:0;\n            if(dis[v]>dis[u]+d)\n            {\n                dis[v]=dis[u]+d;\n                if(!ex[v])\n                {\n                    ex[v]=1;\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\nint anss=999999999;\nint main(){\n    cin>>n>>m>>k;\n    int x,y,z;\n    for(int i=1;i<=m;i++)\n    {\n        x=read();y=read();z=read();\n        add(x,y,z);\n        add(y,x,z);\n    }\n    int l=0;\n    int r=1000000;\n    while(l<=r)\n    {\n        memset(dis,63,sizeof(dis));\n        memset(ex,0,sizeof(ex));\n        mid=(l+r)>>1;\n        SPFA();\n        if(dis[n]>k)\n        {\n            l=mid+1;\n        }\n        else if(dis[n]<=k)\n        {\n            r=mid-1;\n            anss=min(anss,mid);\n        }\n    }\n    if(anss>999999990)\n    {\n        cout<<-1;return 0;\n    }\n    cout<<anss;\n    return 0;\n}\n```",
        "postTime": 1504769255,
        "uid": 43591,
        "name": "John_Fu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u6700\u5927\u7684\u7535\u8bdd\u7ebf\u957f\u5ea6 \u7136\u540e\u6700\u91cd\u8981\u7684\u5c31\u662f\u9a8c\u8bc1\n\n\uff08\u5b9e\u8bdd\u8bf4\u6211\u6700\u5148\u770b\u6807\u7b7e\u662f\u641c\u7d22 \u6240\u4ee5\u6211\u5199\u7684\u662f\u5bbd\u641c \u7136\u540eRE... \u7136\u540e\u770b\u7684\u9898\u89e3\u7b2c\u4e00\u53e5\u8bdd\u90fd\u662f\u6700\u77ed\u8def...\u88ab\u5751\u4e86...\uff09\n\n\u90a3\u4e48\u6700\u77ed\u8def\u7684\u60f3\u6cd5\u4fbf\u5e94\u8fd0\u800c\u751f\u4e86\n\n\u5f53\u8fb9\u6743\u5927\u4e8e\u6211\u4eec\u4e8c\u5206\u7684\u7b54\u6848\u65f6\u5019 \u6211\u4eec\u5c31\u8ba9dist+1 \u5426\u5219\u5c31\u662f\u539f\u6765\u7684dist\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\nif(e[i].w<=len&&dist[e[i].to]>dist[p])\n            {\n                dist[e[i].to]=dist[p];\n                if(!vis[e[i].to])\n                {\n                    vis[e[i].to]=true;\n                    que[++qtail]=e[i].to;\n                }\n            }\n            else if(e[i].w>len&&dist[e[i].to]>dist[p]+1)\n            {\n                dist[e[i].to]=dist[p]+1;\n                if(!vis[e[i].to])\n                {\n                    vis[e[i].to]=true;\n                    que[++qtail]=e[i].to;\n                } \n            }\n\u5269\u4e0b\u7684\u5c31\u662f\u88f8\u88f8\u7684\u4e8c\u5206\u6846\u67b6\u548cspfa\u5566\uff01\n```",
        "postTime": 1478080333,
        "uid": 22060,
        "name": "Memorize",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u5206\u6790\u95ee\u9898\u540e\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u7b54\u6848\u53ea\u53d6\u51b3\u4e8e\u90a3\u6761\u7b2ck+1\u957f\u7684\u8fb9\u3002\uff08\u5148\u7279\u52240\u548c-1\uff09\u56e0\u6b64\u60f3\u5230\u4e8c\u5206\u8fd9\u6761\u8fb9\n\n\u6211\u4eec\u5148\u5c06\u8fb9\u6309\u957f\u5ea6\u6392\u5e8f\u3002\u9009\u62e9\u7b2cx\u957f\u7684\u8fb9\u540e1-x\u7684\u8fb9\u8d4b\u4e3a0\uff0cx+1\u5230p\u7684\u8d4b\u4e3a1\uff0c\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u5f97\u5230\u7684g[n]\u8ddfk\u6bd4\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u00b7\u00b7\u00b7pascal\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\nvar\n n,p,k,i,x,y:longint;\n len,num:array[1..10010] of longint;\n t,a,g:array[1..2010] of longint;\n l:array[1..10010*2,1..3] of longint;\n ing:array[1..2010] of boolean;\nprocedure swap(var x,y:longint);\nvar t:longint;\nbegin\n t:=x;x:=y;y:=t;\nend;\nprocedure sort(l,r: longint);\n      var\n         i,j,x: longint;\n      begin\n         i:=l;\n         j:=r;\n         x:=len[(l+r)>>1];\n         repeat\n           while len[i]<x do\n            inc(i);\n           while x<len[j] do\n            dec(j);\n           if not(i>j) then\n             begin\n                swap(len[i],len[j]);swap(num[i],num[j]);\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           sort(l,j);\n         if i<r then\n           sort(i,r);\n      end;\nprocedure jia(var x:longint);\nbegin\n if x=n then x:=1\n else inc(x);\nend;\nfunction spfa:boolean;\nvar i,head,tail,now:longint;\nbegin\n for i:=2 to n do begin g[i]:=k+1;ing[i]:=false; end;//\u521d\u503c\u8d4b\u4e3ak+1\u662f\u4e00\u4e2a\u5c0f\u4f18\u5316\uff0c\u56e0\u4e3a\u6211\u4eec\u5b9e\u9645\u5e76\u4e0d\u6c42g[n]\uff0c\u53ea\u6c42g[n]\u4e0ek\u7684\u5927\u5c0f\u5173\u7cfb\n head:=0;tail:=1;a[1]:=1;\n repeat\n  jia(head); now:=a[head];\n  ing[now]:=false;\n  i:=t[now];\n  while i<>0 do\n  begin\n   if g[l[i,1]]>g[now]+l[i,2] then\n   begin\n    if l[i,1]=n then exit(true);//\u4e00\u65e6\u70b9n\u88ab\u66f4\u65b0\u5c31\u8df3\u51fa\n    g[l[i,1]]:=g[now]+l[i,2];\n    if not ing[l[i,1]] then begin ing[l[i,1]]:=true;jia(tail);a[tail]:=l[i,1]; end;\n   end;\n   i:=l[i,3];\n  end;\n until head=tail;\n exit(false);\nend;\nfunction ok(x:longint):boolean;\nvar i:longint;\nbegin\n for i:=1 to x do\n begin\n  l[num[i],2]:=0;l[num[i]+p,2]:=0;\n end;\n for i:=x+1 to p do\n begin\n  l[num[i],2]:=1;l[num[i]+p,2]:=1;\n end;\n exit(spfa);\nend;\nprocedure try;\nvar\n l,r,mid:longint;\nbegin\n  l:=0;r:=p;\n while l+1<r do\n begin\n  mid:=(l+r)>>1;\n  if ok(mid) then r:=mid\n  else l:=mid;\n end;\n writeln(len[r]);\nend;\nbegin assign(input,'1.in') ;reset(input);\n readln(n,p,k);\n for i:=1 to p do\n begin\n  read(x,y,len[i]);num[i]:=i;//\u8bb0\u5f55\u4e00\u4e0b\u8be5\u8fb9\u5bf9\u5e94\u7684\u7f16\u53f7\n  l[i,3]:=t[x];t[x]:=i;l[i,1]:=y;\n  l[i+p,3]:=t[y];t[y]:=i+p;l[i+p,1]:=x;\n end;\n if not ok(p) then writeln(-1)\n else\n if ok(0) then writeln(0)\n else\n begin\n  sort(1,p);\n  try;\n end;\nend.\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1475740759,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u76ee\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u90a3\u4e48check\u51fd\u6570\u600e\u4e48\u5199\u5462\uff1f\n\n\u8bbe\u5f53\u524d\u4e8c\u5206\u7684\u7b54\u6848\u4e3aans\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u679c\u80fd\u591f\u627e\u5230\u4e00\u67611\u5230n\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u8fb9\u6743>ans\u7684\u8fb9\u7684\u4e2a\u6570\u4e0d\u5927\u4e8ek\u5c31\u4ee3\u8868\u8be5\u7b54\u6848\u53ef\u884c\u3002\n\ncheck\u51fd\u6570\u53ef\u4ee5\u7528\u6700\u77ed\u8def\u6765\u5b9e\u73b0\u3002\n\n```cpp\n\n\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nconst size_t Max_N(1050);\nconst size_t Max_P(20050);\n\nsize_t N;\nunsigned int P;\nunsigned int K;\n\nunsigned int Total;\nunsigned int Head[Max_N];\nunsigned int To[Max_P];\nunsigned int Weight[Max_P];\nunsigned int Next[Max_P];\n\nunsigned int Left, Right, Mid;\n\ninline\nvoid Add_Edge(const size_t &s, const size_t &t, const unsigned int &w)\n{\n    ++Total, To[Total] = t, Weight[Total] = w, Next[Total] = Head[s], Head[s] = Total;\n}\n\nvoid init()\n{\n    unsigned int a, b, l;\n    \n    Left = 0;\n    \n    scanf(\"%u%u%u\", &N, &P, &K);\n    \n    while (P--)\n    {\n        scanf(\"%u%u%u\", &a, &b, &l);\n        Add_Edge(a, b, l);\n        Add_Edge(b, a, l);\n        Right = max(Right, l);\n    }\n}\n\nunsigned int Dist[Max_N];\nbool In_Q[Max_N];\nbool Check(const unsigned int &d)\n{\n    memset(Dist, 0X7F, sizeof(Dist));\n    \n    queue<unsigned int> Q;\n    Q.push(1);\n    Dist[1] = 0;\n    In_Q[1] = true;\n    \n    unsigned int Top;\n    while (Q.size())\n    {\n        Top = Q.front();\n        Q.pop();\n        In_Q[Top] = false;\n        \n        for (size_t i = Head[Top];i;i = Next[i])\n            if (Dist[To[i]] > Dist[Top] + (Weight[i] > d))\n            {\n                Dist[To[i]] = Dist[Top] + (Weight[i] > d);\n                if (!In_Q[To[i]])\n                {\n                    In_Q[To[i]] = true;\n                    Q.push(To[i]);\n                }\n            }\n    }\n    \n    return Dist[N] <= K;\n}\n\nvoid slove()\n{\n    while (Left < Right)\n    {\n        Mid = Left + ((Right - Left) >> 1);\n        if (Check(Mid))\n            Right = Mid;\n        else\n            Left = Mid + 1;\n    }\n    \n    if (Check(Left))\n        printf(\"%u\", Left);\n    else\n        printf(\"-1\");\n}\n\nint main()\n{\n    init();\n    \n    slove();\n    \n    return 0;\n}\n\n```\n\n\u6211\u81ea\u5df1\u8fd8yy\u4e86\u4e00\u4e2a\u505a\u6cd5\u3002\u3002\u6ca1\u5199\u6240\u4ee5\u4e0d\u77e5\u9053\u5bf9\u4e0d\u5bf9\n\n\u8bbedist[i][k]\u8868\u793a\u4ece1\u5230i\u7684\u8def\u5f84\u4e2d\uff0ck\u6761\u514d\u8d39\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u4f18\u89e3\u3002\n\ndist[i][0]=min{max(dist[j][0],w(j,i))}\n\ndist[i][k]=min{max(dist[j][k], w(j,i)),dist[j][k-1]}\n\n\u7136\u540e\u628a\u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u6254\u5230spfa\u91cc\u9762\u53bb\u3002\u3002\n\n\u6700\u540eans=min{dist[n][k]}\n",
        "postTime": 1445954158,
        "uid": 3182,
        "name": "Created_equal1",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "[P1948 [USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines](https://www.luogu.org/problem/P1948)\n\n### \u9898\u89e3\u4e00\u6c34\u7684\u4e8c\u5206+\u6700\u77ed\u8def\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u4e8c\u5206+dfs\u7684\u505a\u6cd5\u3002\n\n\u4e8c\u5206\u4e00\u4e2a\u6700\u5927\u82b1\u8d39mid\uff1a\u5c0f\u4e8e\u7b49\u4e8emid\u8def\u5f84\u6ca1\u6709\u82b1\u8d39\uff0c\u5927\u4e8emid\u7684\u8def\u5f84\u6d88\u8017\u4e00\u6b21\u82b1\u8d39\u3002\n\ndfs\u4e00\u6761\u53ef\u4ee5\u5230n\u4e14\u6d88\u8017\u5c0f\u4e8e\u7b49\u4e8eK\u7684\u8def\u5f84\u5373\u53ef\u3002\n\n\u8bbeu\u70b9\u7684\u82b1\u8d39\u4e3acost[u]\uff0c\u5219\u8fde\u63a5\u70b9v\u672c\u6b21\u7684\u82b1\u8d39\u4e3acost[u]+(e[i].w>mid)\n\n\u82e5v\u70b9\u4e4b\u524d\u5df2\u7ecf\u8d70\u8fc7\uff1a\n\n1\u3001\u5982\u679c cost[v] <= cost[u]+(e[i].w>mid) \u5219\u672c\u6b21\u4e0d\u4f18\uff0c\u526a\u679d  \n2\u3001\u5426\u5219 \u66f4\u65b0cost[v] = cost[u]+(e[i].w>mid)\n\n\u6700\u7ec8\u5f97\u5230cost[n]\uff0c\u82e5cost[n]\u5927\u4e8eK\uff0c\u8bf4\u660emid\u592a\u5c0f\uff0c\u52a0\u5927\uff0c\u5426\u5219mid\u53d8\u5c0f\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n,m,k,K,vex[1005],vis[1005],cost[1005],f;\nstruct edge {\n\tint u,v,w,next;\n}e[20005];\n\nvoid add(int u,int v,int w){\n\tk++;\n\te[k].u=u;\n\te[k].v=v;\n\te[k].w=w;\n\te[k].next=vex[u];\n\tvex[u]=k;\n\treturn;\n}\n\nvoid dfs(int u,int mid){\n\tif(f||cost[u]>K) return;\n\tif(u==n) {\n\t\tf=1;\n\t\treturn;\n\t}\n\tfor(int i=vex[u];i;i=e[i].next){\n\t\tint v=e[i].v;\n\t\tif(cost[u]+(e[i].w>mid)>=cost[v]) continue;\n\t\tcost[v]=cost[u]+(e[i].w>mid);\n\t\tdfs(v,mid);\t\t\n\t}\n\treturn;\n}\n\nint check(int mid){\n\tmemset(cost,0x3f,sizeof(cost));\n\tf=cost[1]=0;\n\tdfs(1,mid);\n\treturn cost[n]>K;\n}\n\nint main(){\n\tint u,v,w,maxn=0;\n\tcin>>n>>m>>K;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>u>>v>>w;\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t\tmaxn=max(maxn,w);\n\t}\n\tint l=1,r=maxn,mid;\n\twhile(l<=r){\n\t\tmid=(l+r)/2;\n\t\tif(check(mid)) l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tif(l==maxn+1) cout<<-1;\n\telse cout<<l;\n\treturn 0;\n} \n```\n\n\n",
        "postTime": 1565963957,
        "uid": 92704,
        "name": "fdszlzl",
        "ccfLevel": 0,
        "title": "\u3010\u4e8c\u5206+dfs\u3011 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u4e8c\u5206\u662f\u6700\u663e\u7136\u7684\u601d\u8def\uff0c\u800c\u5982\u4eca\u6700\u77ed\u8def\u7684\u6700\u4f18\u89e3\u6cd5\u662f\u5806\u4f18\u5316Dijkstra\u3002\u4f46\u770b\u5230\u9898\u89e3\u91cc\u7528\u4e8c\u5206\u7b54\u6848\u7684\u90fd\u6ca1\u6709\u7528\u5806\u4f18\u5316dijkstra\uff0c\u849f\u84bb\u6765\u6c34\u4e00\u53d1\uff1a\n\n\u9996\u5148\u5927\u81f4\u601d\u8def\u5982\u4e0b\uff1a\n```\n\u7531\u4e8e\u6b64\u9898\u4e0d\u662f\u76f4\u63a5\u6c42\u4ece\u6e90\u70b9 1 \u5230\u7ec8\u70b9 n \u603b\u8d39\u7528\u6700\u5c0f\u4e4b\u7c7b\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 dijkstra \u76f4\u63a5\u6765\u8dd1\u6700\u77ed\u8def\u5f84\uff0c\u9700\u8981\u5bf9\u539f\u6765\u7684\u56fe\u8fdb\u884c\u91cd\u65b0\u5efa\u56fe\u3002\n\n\u5bf9\u4e8e\u6c42\u7b54\u6848\u5c3d\u53ef\u80fd\u5c0f\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u4e8c\u5206\u7b54\u6848\u7c7b\u7684\u95ee\u9898\uff0c \u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u4e8c\u5206\u7b54\u6848\u6765\u6c42\u6ee1\u8db3\u8981\u6c42\u7684\u957f\u5ea6 x\u3002 \n\n\u5bf9\u4e8e\u6240\u6709\u5927\u4e8e x \u7684\u957f\u5ea6\u90fd\u8ba4\u4e3a\u9700\u8981\u91c7\u7528\u514d\u8d39\u65b9\u5f0f\uff08\u5373\u4ee3\u4ef7\u4e3a 1\uff0c\n\u8868\u793a\u5360\u7528\u4e00\u4e2a\u514d\u8d39\u540d\u989d\uff09\uff0c\u800c\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e x \u7684\u957f\u5ea6\u7684\u8fb9\u4e0d\u91c7\u7528\u514d\u8d39\u65b9\u5f0f\uff08\u5373\u4ee3\u4ef7\u4e3a 0\uff0c\u5373\u8868\u793a\u4e0d\u5360\u7528\u514d\u8d39\u540d\u989d\uff09 \uff0c\u90a3\u4e48\u5982\u679c\u4ece\u70b9 1 \u5230\u70b9 n \u7684\u6700\u77ed\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e k\uff0c\u8bf4\u660e\u82b1 x \u8d39\u7528\u53ef\u4ee5\u5b9e\u73b0\u8981\u6c42\uff0c\u5426\u5219\u5c31\u4e0d\u53ef\u4ee5\u3002\n\n\u8fd9\u6837\u5c31\u7528\u4e8c\u5206\u4e00\u76f4\u627e\u5230\u6ee1\u8db3\u8981\u6c42\u7684\u6700\u5c0f\u7684 x \u5c31\u53ef\u4ee5\u4e86\u3002\n```\n\u8fd9\u6837\u7684\u7a0b\u5e8f\u8dd1\u51fa\u6765\u5f00O2\u4e5f\u6709\u51e0\u767ems\uff0c\u6548\u7387\u8f83\u4f4e\u3002\u56e0\u6b64\u6211\u4eec\u91c7\u7528\u5806\u4f18\u5316Dijkstra\uff01\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\n#define IOSIZE 10000000\nstatic char in[IOSIZE],*p=in,out[IOSIZE],*q=out,ch[20],*t=ch;\ninline int read(){\n\treg int x=0;\n\twhile(*p<48)++p;\n\twhile(*p>47)x=(x<<1)+(x<<3)+(*p++^48);\n\treturn x;\n}\ninline void write(int x){\n\tx<0&&(*q++='-',x=-x);\n\t!x&&(*q++='0');\n\twhile(x)*t++=x%10+48,x/=10;\n\twhile(t!=ch)*q++=*--t;\n}\nstatic int n,m,ans=-1,tot,k,head[5001],dis[5001];\nstruct Edge{\n\tint v,w,nxt;\n}eg1[100001],eg[100001];\ninline void addedge(int u,int v,int w){\n\teg[++tot]=Edge{v,w,head[u]},head[u]=tot;\n}\nstruct Node{\n\tint to,dis;\n\tfriend inline bool operator<(Node a,Node b){\n\t\treturn a.dis>b.dis;\n\t}\n};\npriority_queue<Node>Q;\ninline int dij(int x){\n\tmemset(dis,0x3f,sizeof dis);\n\tQ.push(Node{1,0}),dis[1]=0;\n\twhile(!Q.empty()){\n\t\tNode now=Q.top();Q.pop();\n\t\treg int v=now.to,w=now.dis;\n\t\tif(w!=dis[v])continue;\n\t\tfor(reg int i=head[v],vv,ww;i;i=eg[i].nxt)\n\t\t\tvv=eg[i].v,ww=eg[i].w>x,w+ww<dis[vv]&&(\n\t\t\tdis[vv]=w+ww,Q.push(Node{vv,dis[vv]}),0);\n\t}return dis[n];\n}\nint main(){\n\tfread(in,1,IOSIZE,stdin);\n\tn=read(),m=read(),k=read();\n\tfor(reg int i=1,u,v,w;i<=m;++i)\n\t\tu=read(),v=read(),w=read(),\n\t\taddedge(u,v,w),addedge(v,u,w);\n\treg int l=0,r=1000000,mid;\n\twhile(l<=r)\n\t\tmid=l+r>>1,dij(mid)<=k?ans=mid,r=mid-1:l=mid+1;\n\twrite(ans);\n\tfwrite(out,1,q-out,stdout);\n\treturn 0;\n}\n```\n55ms with O2\n\n# \u5b8c\u7ed3\u6492\u82b1",
        "postTime": 1561888166,
        "uid": 75765,
        "name": "Starlight237",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u5176\u5b9e\u6211\u7528\u7684\u4e5f\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u4f46\u662f\u5728Check\u7684\u65f6\u5019\u6211\u7528\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u627e\u5230\u6700\u77ed\u8def\u3002\n\n\u5148\u8bf4\u4e00\u4e0b**\u601d\u8def**\u5427\uff1a\n\n- $\\texttt{step1:}$\u663e\u7136\u5728\u8def\u5f84\u4e0a\u8981\u9009\u6700\u8d35\u7684$K$\u6761\u8fb9 ~~obviously~~\n- $\\texttt{step2:}$\u6240\u4ee5\u7b54\u6848\u6709\u660e\u663e\u7684\u5355\u8c03\u6027\n- $\\texttt{step3:}$\u4e8e\u662f\u6211\u4eec\u6709\u4e86\u4e8c\u5206\u7684\u601d\u8def\n- $\\texttt{step4:}$\u95ee\u9898\u8f6c\u53d8\u4e3a\uff0c\u5bf9\u4e00\u4e2a\u5df2\u77e5\u56fe\uff0c\u6c42\u4e00\u4e2a\u8def\u5f84\uff0c\u4f7f\u5f97\u7b2c$K+1$\u6761\u8fb9\u7684\u6743\u503c\u4e0d\u8d85\u8fc7$mid$\u3002\n- $\\texttt{step5:}$\u6b64\u65f6\u95ee\u9898\u5c31\u5f88\u597d\u89e3\u51b3\u4e86\uff1a\u5c06\u8fb9\u6743$>K$\u7684\u8fb9\u7684\u6743\u503c\u8bbe\u4e3a$1$\uff0c\u5176\u4f59\u8bbe\u4e3a$0$\uff0c\u7136\u540e\u8dd1\u4e00\u904d\u70b9$1$\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u5373\u53ef\u5b8c\u6210Check\u3002\n- $\\texttt{Extra:}$\u7531\u4e8e\u5728Check\u65f6\u53ea\u6709$0$\u8fb9\u548c$1$\u8fb9\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u9009\u53d6**BFS\u53cc\u7aef\u961f\u5217\u4f18\u5316**\u6c42\u89e3\uff0c0\u8fb9\u5f80\u540e\u653e\uff0c1\u8fb9\u5f80\u524d\u653e\uff0c\u6700\u540e\u53d6\u7684\u65f6\u5019\u4ece\u540e\u9762\u53d6\u5c31\u53ef\u4ee5\u4e86~\n\n\u4e0a\u4ee3\u7801\uff01\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst int MAXN = 1005, MAXM = 10005;\nint u[MAXM], v[MAXM], w[MAXM], N, M, K;\nvector <pair <int, int> > G[MAXN];\nbool book[MAXN];\nint dis[MAXN];\nvoid BuildGraph(int L)\n{\n    for (int i = 1;i <= N;i++)\n        G[i].clear();\n    for (int i = 1;i <= M;i++)\n        if (w[i] <= L)\n        {\n            G[u[i]].push_back(make_pair(v[i], 0));\n            G[v[i]].push_back(make_pair(u[i], 0));\n        }\n        else\n        {\n            G[u[i]].push_back(make_pair(v[i], 1));\n            G[v[i]].push_back(make_pair(u[i], 1));\n        }\n}\nint Bfs(int x)\n{\n    memset(dis, 0x3f, sizeof(dis));\n    deque <pair <int, int> > que;\n    que.push_back(make_pair(x, 0));\n    dis[x] = 0;\n    while (!que.empty())\n    {\n        pair <int, int> Curr = que.back();\n        if (Curr.second > dis[Curr.first])\n        {\n            que.pop_back();\n            continue;\n        }\n        que.pop_back();\n        int siz = G[Curr.first].size();\n        for (int i = 0;i < siz;i++)\n            if (dis[G[Curr.first][i].first] > \n            dis[Curr.first] + G[Curr.first][i].second)\n            {\n                dis[G[Curr.first][i].first] =\n                dis[Curr.first] + G[Curr.first][i].second;\n                if (G[Curr.first][i].second == 0)\n                    que.push_front(make_pair(G[Curr.first][i].first, \n                    dis[G[Curr.first][i].first]));\n                else\n                    que.push_back(make_pair(G[Curr.first][i].first, \n                    dis[G[Curr.first][i].first]));\n            }\n    }\n    return dis[N];\n}\nbool Chk(int x)\n{\n    BuildGraph(x);\n    return Bfs(1) <= K;\n}\nint main()\n{\n    scanf(\"%d%d%d\", &N, &M, &K);\n    int L = -1, R = 0;\n    for (int i = 1;i <= M;i++)\n    {\n        scanf(\"%d%d%d\", &u[i], &v[i], &w[i]);\n        R += w[i];\n    }\n    R++;\n    int INF = R;\n    while (L < R - 1)\n    {\n        int mid = (L + R) / 2;\n        if (Chk(mid))\n            R = mid;\n        else\n            L = mid;\n    }\n    printf(\"%d\", (R == INF ? -1 : R));\n    return 0;\n}\n```",
        "postTime": 1543998669,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u4e8c\u5206\u7684\u90e8\u5206\u8bf7\u53c2\u7167\u5176\u4ed6\u9898\u89e3\uff0c\u4ed6\u4eec\u8bb2\u7684\u5f88\u8be6\u7ec6\uff0c\u6211\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002\u5728\u8fd9\u91cc\u6211\u63d0\u4f9b\u4e00\u79cd\u4e0e\u4f17\u4e0d\u540c\u7684check\u65b9\u6cd5\u2014\u2014\u53cc\u7aef\u961f\u5217BFS\u3002\n\n\u5177\u4f53\u505a\u6cd5\u5c31\u662f\u5728\u666e\u901a\u7684BFS\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u539f\u6765\u7684\u961f\u5217\u6539\u6210\u53cc\u7aef\u961f\u5217\u3002\u6bcf\u6b21\u53d6\u51fa\u961f\u5934x\u540e\u66f4\u65b0\u8282\u70b9y\u65f6\uff0c\u5982\u679cx\u3001y\u4e4b\u95f4\u7684\u8fb9\u6743\u4e3a1\uff0c\u5c31\u628ay\u4ece\u961f\u5c3e\u5165\u961f\uff0c\u5426\u5219\u4ece\u961f\u9996\u5165\u961f\u3002\n\n\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\u5462\uff1f\u5728\u8fd9\u79cd\u7c7b\u578b\u7684\u56fe\u4e2d\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u624b\u6bb5\u7ef4\u62a4\u53cc\u7aef\u961f\u5217\uff0c\u53cc\u7aef\u961f\u5217\u4e2d\u7684\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u662f\u5177\u6709\u5355\u8c03\u6027\u7684\u3002\n\n\u8bc1\u660e\u5f88\u663e\u7136\uff1a\n\n\t\u5728\u8fb9\u6743\u5168\u90e8\u662f1\u7684\u56fe\u4e2d\u8fdb\u884cBFS\u65f6\uff0c\u961f\u5217\u4e2d\u7684\u70b9\u663e\u7136\u5177\u6709\u5355\u8c03\u6027\u3002\u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a\uff0c\u5982\u679c\u53d6\u51fa\u7684\u961f\u5934\u4e3ax\uff0cx\u5230y\u7684\u8fb9\u6743\u4e3a0,\u90a3\u4e48y\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u5c31\u7b49\u4e8ex\uff0c\u6b64\u65f6\u5c06y\u585e\u5230x\u4e4b\u524d\u5728\u7684\u4f4d\u7f6e\uff08\u961f\u5934\uff09\uff0c\u961f\u5217\u5c31\u76f8\u5f53\u4e8e\u6ca1\u53d6\u51fax\uff0c\u4e0d\u4f1a\u7834\u574f\u539f\u672c\u5c31\u5b58\u5728\u7684\u5355\u8c03\u6027\u3002\n    \n    \u8bc1\u6bd5\n\n\u5c31\u8fd9\u6837\u53cc\u7aef\u961f\u5217\u8d77\u5230\u4e86dijkstra\u4e2d\u5355\u8c03\u961f\u5217\u7684\u4f5c\u7528\uff0c\u5269\u4e0b\u7684\u6309\u7167dijkstra\u6253\u5c31\u884c\u3002\u5b9e\u9645\u4e0a\u8fd9\u91cc\u7528\u5230\u7684\u53cc\u7aef\u961f\u5217BFS\u5c31\u662f\u7279\u6b8a\u60c5\u51b5\u4e0b\u7684\u7b80\u6613\u7248dijkstra\u3002\n\n\u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8e\u5728\u8fb9\u6743\u53ea\u67090\u548c1\u7684\u56fe\u4e0a\u8dd1\u6700\u77ed\u8def\uff0c\u8dd1\u4e00\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4e3aO(N+P)\u3002\u4e14\u4ee3\u7801\u5b9e\u73b0\u5341\u5206\u6e05\u723d\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<deque>\nusing namespace std;\nint n,m,k,mx=0,d[1010],v[1010];//v=1\u8868\u793a\u5728\u961f\u5217\u4e2d\uff0c=2\u8868\u793a\u5df2\u7ecf\u51fa\u8fc7\u961f\u4e86\u3002\nint tot,head[1010],ver[20010],nxt[20010],edge[20010];\ndeque<int> q;\n\nvoid add(int x,int y,int z){\n\tver[++tot]=y;\n\tedge[tot]=z;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\n\nbool check(int mid){\n\tmemset(d,0x3f,sizeof d);\n\tmemset(v,0,sizeof v);\n\tv[1]=1;d[1]=0;\n\tq.push_back(1);\n\twhile(q.size()){\n\t\tint x=q.front();q.pop_front();\n\t\tv[x]=2;\n\t\tfor(int i=head[x];i;i=nxt[i]){\n\t\t\tint y=ver[i],z=edge[i];\n\t\t\tif(v[y]==2)continue;\n\t\t\tif(z>mid)z=1;\n\t\t\telse z=0;\n\t\t\td[y]=min(d[y],d[x]+z);\n\t\t\tif(v[y])continue;\n\t\t\tif(z)q.push_back(y);\n\t\t\telse q.push_front(y);\n\t\t}\n\t}\n\tif(!v[n]||d[n]>k)\n\t\treturn 0;\n\treturn 1;\n}\n\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tmx=max(mx,z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tint l=0,r=mx+1;\n\twhile(l<r){\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid))r=mid;\n\t\telse l=mid+1;\n\t}\n\tif(r==mx+1)puts(\"-1\");\n\telse printf(\"%d\",l);\n\treturn 0;\n}\n```",
        "postTime": 1539784275,
        "uid": 60818,
        "name": "Chevalier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u7b80\u5355\u7c97\u66b4\n\n\u4e8c\u5206\u82b1\u8d39\n\n\u5f53\u4e8c\u5206\u5230\u82b1\u8d39\u4e3ac\u65f6\n\n\u8dd1SPFA\n\u5bf9\u6bcf\u6b21SPFA\uff0c\u6c42\u82b1\u8d39\u5c0f\u4e8ec\u65f6\uff0c\u4ece1\u5230n\u6700\u5c11\u9700\u8981\u7535\u4fe1\u516c\u53f8\u5e2e\u5fd9\u8fde\u63a5\u7535\u7ebf\u6746\u5bf9\u7684\u4e2a\u6570\n\uff08\u6700\u597d\u753b\u56fe\u5206\u6790\uff09\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <vector>\n#include <cstring>\nusing namespace std;\nstruct Edge\n{\n\tint to,hp;\n};\nstruct Dian\n{\n\tint cost;\n\tvector<Edge> edge;\n}dian[1003];\nint n,m,k,dist[1003],bj[1003];\n//dist\u5373\u5230\u5f53\u524d\u7535\u7ebf\u6746\u6211\u9700\u8981\u7535\u4fe1\u516c\u53f8\u5e2e\u5fd9\u51fa\u94b1\u7684\u7535\u7ebf\u6746\u5bf9\nbool spfa(int wh)\n{\n\tqueue<int> q;\n\tq.push(1);memset(dist,0x3f,sizeof(dist));memset(bj,0,sizeof(bj));dist[1]=0;\n\twhile(!q.empty())\n\t{\n\t\tint a=q.front();q.pop();\n\t\tfor(int i=0;i<dian[a].edge.size();i++)\n\t\t{\n\t\t\tint b=dian[a].edge[i].to;\n\t\t\tint hp=dian[a].edge[i].hp;\n\t\t\tif(dist[a]+(hp>wh)<dist[b])\n\t\t\t{\n\t\t\t\tdist[b]=dist[a]+(hp>wh);\n\t\t\t\tif(bj[b]!=233)\n\t\t\t\t{\n\t\t\t\t\tbj[b]=233;q.push(b);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbj[a]=0;\n\t}\n\tif(dist[n]<=k)return true;\n    //\u5982\u679c\u6211\u6700\u5c11\u7684\u6c42\u52a9\u6570\u4e0d\u591a\u4e8e\u4e0a\u9650\uff0c\u5219\u8fd9\u4e2a\u65b9\u6848\u901a\u8fc7\n\treturn false;\n}\nint minn=0,maxx;\nint findd()//\u7c97\u52a3\u7684\u4e8c\u5206\u3002\u3002\u3002\u8f7b\u55b7QAQ\n{\n\tint mid;\n\twhile(minn+1<maxx)\n\t{\n\t\tmid=(minn+maxx)/2;\n\t\tif(spfa(mid))maxx=mid;\n\t\telse minn=mid;\n\t}\n\tif(spfa(minn))return minn;\n\telse if(!spfa(minn)&&!spfa(maxx))return -1;\n\telse return maxx;\n}\nint x,y,z;\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tif(x==y)continue;\n\t\tdian[x].edge.push_back(Edge{y,z});\n\t\tdian[y].edge.push_back(Edge{x,z});\n\t\tmaxx=max(maxx,z);\n\t}\n\tprintf(\"%d\",findd());\n\treturn 0;\n}\n\n```",
        "postTime": 1532664098,
        "uid": 31454,
        "name": "\u5361\u8f66cckk",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u672c\u9898\u7684\u7b54\u6848\u662f\u5177\u6709\u5355\u8c03\u6027\u7684\uff0c\u56e0\u4e3a\u5f53\u4ed8\u66f4\u5c11\u94b1\u53ef\u4ee5\u65f6\uff0c\u4ed8\u66f4\u591a\u7684\u94b1\u5fc5\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\uff0c\u5224\u65ad\u5f53\u7b54\u6848\u4e3amid\u65f6\u662f\u5426\u53ef\u884c\n\n\u600e\u6837\u5224\u65admid\u662f\u5426\u53ef\u884c\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5c06\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8emid\u7684\u8fb9\u89c6\u4e3a\u957f\u5ea6\u4e3a0\u7684\u8fb9\uff0c\u5927\u4e8emid\u7684\u8fb9\u89c6\u4e3a\u957f\u5ea6\u4e3a1\u7684\u8fb9\uff0c\u6700\u540e\u7528dijkstra\u68c0\u67e5d[n]\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8ek\u5373\u53ef\n\n\u5177\u4f53\u7ec6\u8282\u770b\u6ce8\u89e3\uff0c\u4e0a\u4ee3\u7801\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cmath>\n#include<cstring>\n#define a(a,b,c) for(int a=b;a<=c;a++)\n#define b(a,b,c) for(int a=b;a>=c;a--)\nusing namespace std;\nconst int N=1050,M=20050,INF=0x3f3f3f3f;\nstruct ab{\n    int y,z;\n};\nstruct node{\n    int from,to,cost;\n};\nnode a[M];\nint ver[M],Next[M],head[N],used[N],d[N],edge[M];\nint n,m,tot,l=0,r=0,ans=-1,k;\nvoid add(int x,int y,double z)\n{\n    ver[++tot]=y,edge[tot]=z,Next[tot]=head[x],head[x]=tot;\n    return;\n}\nbool operator < (ab x,ab y)\n{\n    return x.z>y.z;\n}\nvoid dijkstra(int x)\n{\n//\u5806\u4f18\u5316\u7684dijkstra\n    priority_queue<ab> q;\n    d[x]=0;\n    ab a;\n    a.y=x,a.z=0;\n    q.push(a);\n    while(!q.empty())\n    {\n        int x=q.top().y;\n        q.pop();\n        if(used[x]) continue;\n        if(x==n) return;\n        used[x]=1;\n        for(int i=head[x];i;i=Next[i])\n        {\n            int y=ver[i],z=edge[i];\n            if(d[y]>d[x]+z)\n            {\n                d[y]=d[x]+z;\n                ab a;\n                a.y=y,a.z=d[y];\n                q.push(a);\n            }\n            \n        }\n    }\n    return;\n}\nbool check(int mid)\n{\n    memset(d,0x3f,sizeof(d));\n    memset(used,0,sizeof(used));\n    tot=0;\n    a(i,1,n)\n    head[i]=0;\n    a(i,0,m-1)\n    {\n        int x=a[i].from,y=a[i].to,z=a[i].cost;\n        if(z>mid) z=1;\n        else z=0;\n        add(x,y,z);\n        add(y,x,z);\n    }\n    //\u5efa\u56fe\n    dijkstra(1);\n    if(d[n]>k) return false;\n    return true;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    a(i,0,m-1)\n    scanf(\"%d%d%d\",&a[i].from,&a[i].to,&a[i].cost),r=max(r,a[i].cost);\n    while(l<=r)\n    {\n        int mid=(l+r)/2;\n        if(check(mid)) ans=mid,r=mid-1;\n        else l=mid+1;\n        //\u4e8c\u5206\u7b54\u6848\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1527854295,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    },
    {
        "content": "### \u672c\u9898\u6709\u4e24\u79cd\u505a\u6cd5\uff0c\u4e8c\u5206+bfs\u548c\u5206\u5c42\u56fe\u6700\u77ed\u8def\n\n\u4e8c\u5206\u7684\u5df2\u7ecf\u5f88\u591a\u4eba\u8bb2\u4e86\uff0c\u8fd9\u91cc\u4e3b\u8981\u8bb2\u5206\u5c42\u56fe\u6700\u77ed\u8def\u3002\n\n\n\u5206\u5c42\u56fe\u5c31\u662f\u628a\u56fe\u4e2d\u8282\u70b9\u5206\u5f00\uff0c\u53d8\u6210\u8bb8\u591a\u4e0d\u540c\u7684\u72b6\u6001\u3002\n\n\u672c\u9898\u53ef\u4ee5\u4eff\u7167\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\uff0c\u7528D[x,p]\u8868\u793a1\u53f7\u5230x\u53f7\u56fe\u4e2d\u5df2\u7ecf\u6307\u5b9a\u4e86p\u6761\u514d\u8d39\u7535\u7f06\u662f\uff0c\u6700\u8d35\u7684\u7ecf\u8fc7\u7684\u7535\u7f06\u6700\u5c0f\u662f\u591a\u5c11\u3002\u82e5\u6709\u4e00\u6761\u4ecex\u5230y\u957f\u5ea6\u4e3az\u7684\u65e0\u5411\u8fb9\uff0c\u5e94\u8be5\u7528max(D[x,p],z)\u66f4\u65b0D[y,p]\u7684\u6700\u5c0f\u503c\uff0c\u7528D[x,p]\u66f4\u65b0D[y,p+1]\u7684\u6700\u5c0f\u503c\u3002\n\n\n\u5f88\u663e\u7136\u8fd9\u79cd\u505a\u6cd5\u662f\u6709\u6709\u6548\u6027\u7684\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528spfa\u6216dij\u6765\u8dd1\u4e00\u904d\uff0c\u4f7f\u5f97D\u6570\u7ec4\u4e0d\u80fd\u66f4\u65b0\u3002\u8fd9\u6837\u4e5f\u89e3\u51b3\u4e86\u540e\u6548\u6027\u3002\u7528spfa\u6765\u505a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(tNP)\uff0c\u5176\u4e2dt\u4e3a\u5e38\u6570\u3002\u8fd9\u9053\u9898\u6ca1\u6709\u5361spfa\u3002\n\n\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int N = 1001;\nconst int M = 20001;\nint n,m,k;\nstruct EDGE{\n\tint next;\n\tint to;\n\tint len;\n}edge[M];\nstruct NODE{\n\tint pos;\n\tint free;\n};\nqueue <NODE> q;\nint head[N];\nbool vis[N][N];\nint cnt = 0;\nint dist[N][N];\nvoid add_edge(int x,int y,int len)\n{\n\tedge[++cnt].to = y;\n\tedge[cnt].len = len;\n\tedge[cnt].next = head[x];\n\thead[x] = cnt;\n}\nvoid spfa()\n{\n\tmemset(dist,0x3f,sizeof dist);\n\tq.push((NODE){1,0});\n\tvis[1][0] = 1;\n\tdist[1][0] = 0;\n\twhile(!q.empty())\n\t{\n\t\tNODE top = q.front();\n\t\tq.pop();\n\t\tvis[top.pos][top.free] = 0;\n\t\tfor(int i=head[top.pos];i;i=edge[i].next)\n\t\t{\n\t\t\tint y = edge[i].to;\n\t\t\tif(max(dist[top.pos][top.free],edge[i].len) < dist[y][top.free])\n\t\t\t{\n\t\t\t\tdist[y][top.free] = max(dist[top.pos][top.free],edge[i].len);\n\t\t\t\tif(!vis[y][top.free])\n\t\t\t\t{\n\t\t\t\t\tvis[y][top.free] = 1;\n\t\t\t\t\tq.push((NODE){y,top.free});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(top.free < k && dist[y][top.free+1] > dist[top.pos][top.free])\n\t\t\t{\n\t\t\t\tdist[y][top.free+1] = dist[top.pos][top.free];\n\t\t\t\tif(!vis[y][top.free+1])\n\t\t\t\t{\n\t\t\t\t\tq.push((NODE){y,top.free+1});\n\t\t\t\t\tvis[y][top.free+1] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n// dist[next][top.free] --> max(dist[top.pos][top.free] , edge[i].len\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,l;\n\t\tscanf(\"%d%d%d\",&x,&y,&l);\n\t\tadd_edge(x,y,l);   //\u65e0\u5411\u56fe\u52a0\u6761\u8fb9\n\t\tadd_edge(y,x,l);\n\t}\n\tspfa();\n\tif(dist[n][k] == 0x3f3f3f3f)\n\t\tprintf(\"-1\\n\");\n\telse\n\t\tprintf(\"%d\\n\",dist[n][k]);\n}\n```\n\n\n\n\n\n\u4ee5\u4e0a\u5185\u5bb9\u90e8\u5206\u501f\u9274\u4e0e\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u3002\n\n",
        "postTime": 1579444891,
        "uid": 94605,
        "name": "\u674e\u82e5\u8c37",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1948 \u3010[USACO08JAN]\u7535\u8bdd\u7ebfTelephone Lines\u3011"
    }
]