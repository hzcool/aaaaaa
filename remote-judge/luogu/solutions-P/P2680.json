[
    {
        "content": "## \u667a\u5546\u4e0d\u591f\uff0c\u6570\u636e\u7ed3\u6784\u6765\u51d1QwQ\n## \u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\n## ~~\u56e0\u4e3a\u7801\u91cf\u8f83\u5927\uff0c\u9002\u5408\u5bf9\u7ebf\u6bb5\u6811\uff0c\u6811\u72b6\u6570\u7ec4\uff0c\u6811\u5256\u719f\u6089\u7684\u540c\u5b66\u505a~~\n\n\n------------\n\n\n## \u76f4\u89c2\u5730\u7406\u89e3\u9898\u76ee\uff1a\n-\t\u5728\u4e00\u9897**\u6709\u8fb9\u6743\u7684\u6811**\u4e0a\u6709m\u6761\u8def\u5f84\uff0c**\u6e05\u96f6\u4e00\u6761\u8fb9**\u7684\u8fb9\u6743\u4f7f\u5f97**m\u6761\u8def\u5f84\u7684\u6700\u5927\u503c**\u6700\u5c0f\u3002\n\n## \u5bf9\u4e8e\u6700\u66b4\u529b\u7684\u505a\u6cd5\uff1a\n-\t\u628an-1\u6761\u8fb9\uff0c\u6bcf\u6761\u90fd\u505a\uff1a**\u6e05\u96f6\u5f53\u524d\u8fb9\uff0c\u91cd\u65b0\u7edf\u8ba1\u8def\u5f84\u6700\u5c0f\u503c\u3002**\n\n\n------------\n\n## \u5bf9\u4e8e\u4e0a\u9762\u8fd9\u79cd\u66b4\u529b\u505a\u6cd5\uff0c\u80af\u5b9a\u4f1aT\uff0c\u6211\u4eec\u5148\u89e3\u51b3\u51e0\u4e2a\u95ee\u9898\u5e76\u60f3\u60f3\u600e\u4e48\u4f18\u5316\uff1a\n**\u5982\u4f55\u6c42\u6811\u4e0a\u8def\u5f84\u7684\u503c\uff1f**\n\n-\t\u6811\u5256\u540e\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9(x,y)\uff0c**\u6211\u4eec\u9009\u53d6\u6700\u6df1\u7684\u90a3\u4e2a\u70b9\u4f5c\u4e3a\u8fb9\u7684\u4ee3\u8868**\uff0c\u6613\u8bc1**\u4e00\u4e2a\u70b9\u53ea\u4f1a\u5bf9\u5e94\u4e00\u6761\u8fb9**\uff0c**\u4e14\u6811\u6839\u6ca1\u6709\u5bf9\u5e94\u8fb9**\uff08\u753b\u4e2a\u56fe\u5f88\u597d\u7406\u89e3\u7684\uff09\u3002\u8fd9\u6837\u5c31\u628a\u8fb9\u7684\u95ee\u9898\u8f6c\u5316\u6210\u70b9\u7684\u95ee\u9898\u4e86\uff0c\u52a0\u68f5\u7ebf\u6bb5\u6811\u7edf\u8ba1\u5373\u53ef\u3002~~\u8fd9\u4e2a\u5df2\u7ecf\u662f\u5f88\u65e5\u5e38\u7684\u5957\u8def\u4e86\u3002~~\n\n**\u6211\u4eec\u5fc5\u987b\u8981\u8bd5\u5168\u90e8\u7684n-1\u6761\u8fb9\u561b\uff1f**\n\n-\t\u5bf9\u4e8e\u8fd8\u6ca1\u6709\u6e05\u96f6\u8fc7\u7684**\u539f\u56fe**\uff0c\u6211\u4eec\u5148\u7b97\u51fa**\u6bcf\u6761\u8def\u5f84\u7684\u503c**\u3002\u5bf9\u4e8e\u5f53\u524d**\u6700\u957f\u7684\u8def\u5f84A**\uff0c**\u5982\u679c\u6211\u4eec\u5220\u9664A\u4ee5\u5916\u7684\u8fb9\uff0c\u6b64\u65f6\u7684\u6700\u5927\u503c\u80af\u5b9a\u8fd8\u662fA**\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c**\u6211\u4eec\u8981\u5220\u9664\u7684\u8fb9\u80af\u5b9a\u5728A\u4e0a**\uff0c\u8fd9\u6837\u5c31\u4e0d\u4e00\u5b9a\u8981\u8bd5\u5168\u90e8\u7684\u8fb9\u4e86\uff08\u7279\u6b8a\u60c5\u51b5\u53ef\u80fd\u8fd8\u662f\u4f1a\uff09\u3002\u6240\u4ee5\u8bf4\u6211\u4eec\u8bb0\u5f55\u4e0b\u6700\u957f\u8def\u5f84\u7684\u6570\u636e\uff0c\u5728\u8fd9\u91cc\u6682\u65f6**\u8bbe\u4e3a\u6700\u957f\u8def\u5f84\u7684\u6570\u636e\u4e3a(a,b,c)**\n\n**\u6211\u4eec\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u7edf\u8ba1\u561b\uff1f**\n\n-\t\u5f88\u5bb9\u6613\u80fd\u60f3\u5230\uff0c\u5982\u679c\u6e05\u96f6\u4e00\u6761\u8fb9B\uff0c\u5728m\u6761\u8def\u5f84\u4e2d\uff0c\u5982\u679c**\u67d0\u6761\u8def\u5f84\u4e0d\u5305\u542bB\u662f\u4e0d\u7528\u66f4\u65b0\u7684\u3002**\n\n-\t\u56e0\u6b64\u6211\u4eec\u6362\u4e2a\u601d\u8def\uff0c\u5982\u679c\u6211\u4eec\u6e05\u96f6B\uff0c\u8981\u66f4\u65b0\u7b54\u6848\uff0c\u53ea\u9700\u8981\u77e5\u9053**\u7ecf\u8fc7B\u7684\u8def\u5f84\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u4e2a**\u548c**\u4e0d\u7ecf\u8fc7B\u7684\u8def\u5f84\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u4e2a**\uff0c\u5206\u522b**\u8bbe\u4e3a\u8def\u5f84C,D**\u3002\u66f4\u65b0\u7b54\u6848\uff0c\u53ea\u9700\uff08**\u53d6C\u51cf\u53bb\u8fb9B\u7684\u503c**\u548c**\u4e0d\u7ecf\u8fc7B\u6700\u5927\u7684\u8def\u5f84\u503c**\uff09\u6c42\u6700\u5927\u503c\uff0c\u518d\u548c**\u5df2\u7edf\u8ba1\u7b54\u6848\u53d6\u6700\u5c0f\u503c**\u5373\u53ef\u3002\n\n-\t\u5373\uff1a**ans=min(ans,max(C-B,\u4e0d\u7ecf\u8fc7B))** \uff08\u4e3a\u4e86\u65b9\u4fbf\u63cf\u8ff0\uff0c\u7528\u7f16\u53f7\u4ee3\u66ff\u6743\u503c\uff09\n\n-\t\u5bf9\u4e8eC\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5728A\u4e0a\u6e05\u96f6\u8fb9\uff0c\u53c8\u56e0\u4e3aA\u662f\u6700\u957f\u8def\u5f84\uff0c**C=A**\u3002\u90a3\u4e48\u600e\u4e48\u6c42D\u5c31\u662f\u5173\u952e\u4e86\uff1a\n\n-\t\u5bf9\u4e8eD\uff0c\u6211\u4eec\u7684\u5b9a\u4e49\u662f**\u4e0d\u7ecf\u8fc7\u5f53\u524d\u8fb9\u7684\u6700\u5927\u8def\u5f84**\uff0c\u4e3a\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5**\u9884\u5904\u7406**\u4e00\u4e0b\u6bcf\u6761\u8fb9\u5bf9\u5e94\u7684D\uff1a\n\n-\t\u8bbemx[k]\u4e3a**\u4e0d\u5305\u542bk\u8fd9\u6761\u8fb9**\u7684**\u6700\u957f\u8def\u5f84\u6743\u503c**\uff0c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u8bbe\u5b83**\u5305\u542b\u7684\u8fb9**\u7684\u96c6\u5408\u4e3aE\uff0c\u6574\u5f20\u56fe\u8fb9\u7684\u96c6\u5408\u4e3aR\uff0c\u8def\u5f84\u7684\u6743\u503c\u4e3at\u3002\u90a3\u4e48mx\u4e2d\u7684\u54ea\u4e9b\u4f4d\u7f6e\u9700\u8981\u62ffE\u6765\u66f4\u65b0\uff1f\u663e\u7136\u662fmx[R-E]\u5bf9**\u81ea\u5df1\u548ct**\u6c42\u6700\u5927\u503c(mx[R-E]=max(mx[R-E],t)),\u8fd9\u91cc\u7684R-E\u4e5f\u5c31\u662fE\u7684\u8865\u96c6\uff0c\u5373**\u6240\u6709\u4e0d\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8fb9**\u3002\n\n-\t\u5bf9\u4e8e\u8865\u96c6R-E\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u4e00\u4e2a\u4e2a\u66f4\u65b0\u3002\u56e0\u4e3a\u6811\u5256\u540e\uff0c**\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u8f6c\u5316\u6210\u51e0\u6761\u94fe**\uff0c\u53c8\u56e0\u4e3a**\u4e00\u6761\u94fe\uff08\u4e0d\u7ba1\u8f7b\u91cd\uff09\u4e0a\u5bf9\u4e8e\u7684\u7ebf\u6bb5\u6811\u7f16\u53f7\u80af\u5b9a\u662f\u8fde\u7eed**\u7684\uff0c\u6211\u4eec\u80fd\u5148\u5728\u8fd9\u4e2a\u8def\u5f84\u4e0a\u8df3\uff0c\u8bb0\u5f55\u4e0b\u7b2ci\u6761\u94fe\u7684\u6570\u636e[xi,yi]\uff0c**\u6839\u636exi\u6216\u8005yi\u6392\u5e8f\u540e**\uff0c\u6211\u4eec\u5f97\u5230\u51e0\u4e2a**\u6709\u5e8f\u800c\u4e14\u4e0d\u76f8\u4ea4**\u7684\u533a\u95f4[xi,yi]\uff0c\u90a3\u4e48\u5c31\u5728[1,n]\u4e0a**\u53d6\u8fd9\u4e9b\u533a\u95f4\u7684\u8865\u96c6**\u5728**mx\u4e0a\u66f4\u65b0\u8def\u5f84\u7684\u503ct**\u5373\u53ef\uff1a\n\n-\t**\u5373[1,x1-1],[y1+1,x2-1],[y2+1,x3-1]...[y(end)+1,n]**,\u6ce8\u610f\u6700\u524d\u548c\u6700\u540e\u7684\u4e24\u4e2a\u533a\u95f4\uff0c\u5c0f\u5fc3x1==1\u548cyn==n\uff0c\u9700\u8981\u7279\u5224\uff0c\u4e0d\u7136\u7ebf\u6bb5\u6811\u53ef\u80fd\u4f1a\u51fa\u9519\u3002\n\n-\t\u6c42\u51fa\u4e86mx\u6570\u7ec4\u540e\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u80fd\u60f3\u5230\uff0c\u5982\u679c\u6e05\u96f6\u4e00\u6761\u8fb9B\uff0c\u8bbe\u5176\u6743\u503c\u4e3ak\uff0c**\u5f53\u524d\u6240\u6709\u8def\u5f84\u7684\u6700\u5927\u503c\u4f1a\u53d8\u6210max(c-k,mx[B])**,c\u4e3a\u6700\u5927\u8def\u5f84\u7684\u6743\u503c\uff0cc-k\u5c31\u76f8\u5f53\u4e8e\u6e05\u96f6B\uff0cmx[B]\u5c31\u662f\u4e0d\u7ecf\u8fc7B\u7684\u6700\u957f\u8def\u5f84\u3002\n\n\n------------\n\n\n## \u8fd9\u6837\u6211\u4eec\u5c31\u628a\u95ee\u9898\u90fd\u89e3\u51b3\u4e86\uff0c\u6240\u4ee5\u89e3\u9898\u6b65\u9aa4\u662f\uff1a\n-\t1.\u8bfb\u5165\u6570\u636e\u8fd9\u4e48\u591a\u786e\u5b9a\u4e0d\u5199\u4e2a**\u5feb\u8bfb**\uff1f\n-\t2.\u628a\u6c42**\u8fb9**\u8def\u5f84\u7684\u95ee\u9898**\u8f6c\u5316**\u5230**\u70b9**\u4e0a\u3002\n-\t3.\u6c42\u51fa\u8def\u5f84**\u6700\u957f\u7684\u8def\u5f84A**\uff0c**\u8bb0\u5f55\u4e0b\u5b83\u7684\u4fe1\u606f**\uff08a,b,c)\n-\t4.\u9884\u5904\u7406mx\u6570\u7ec4**\uff08mx\u8981\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u56e0\u4e3a\u8981\u591a\u6b21\u533a\u95f4\u4fee\u6539\uff09**\n-\t5.\u5728(a,b)\u8def\u5f84\u4e0a\u7684**\u6bcf\u6761\u8fb9**\u90fd\u505a\uff1a**\u6e05\u96f6**\uff0c\u66f4\u65b0\u4e00\u6b21**\u6700\u5c0f\u7684\u6700\u5927\u8def\u5f84\u503c**\uff0c\u5373\u7b54\u6848\u3002\n\n=====\n\n-\t\u5bf9\u4e8e5\uff0c\u5177\u4f53\u6b65\u9aa4\u662f\uff1a\u679a\u4e3ea,b\u4e0a\u7684\u6bcf\u6761\u8fb9\uff0c\u8bbe\u7b54\u6848\u4e3aans\uff0c\u5f53\u524d\u60f3\u6e05\u96f6\u7684\u8fb9\u4e3aB\uff0c\u6743\u503c\u4e3ak\uff0c\u90a3\u4e48:\n-\tans = min(ans, max(c - k,mx[B]))\u3002\uff08mx[B]\u7528\u7ebf\u6bb5\u6811\u6c42\u51fa\uff09\n\n\n------------\n\n\n## \u6700\u540e\u518d\u5f3a\u8c03\u4e00\u4e0b\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\uff1a\n-\t1.\u5feb\u8bfb\uff01\uff01\uff01\n\n-\t2.\u5728\u7ebf\u6bb5\u6811\u4e0a\u6c42\u503c\u7684\u65f6\u5019\u4e0d\u8981\u628a\u516c\u5171\u7956\u5148\u7b97\u8fdb\u53bb\uff0c\u56e0\u4e3aLCA\u4ee3\u8868\u7684\u8fb9\u4e0d\u5728\u8def\u5f84\u4e0a\uff0c\u53ef\u4ee5\u5728\u6700\u540e\uff08\u8bbe\u4e24\u70b9\u4e3ax,y\u4e14x\u6df1\u5ea6\u5c0f\u4e8ey\uff0c\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u7f16\u53f7\u4e3aid[x],id[y])\u6dfb\u52a0\u6210update(id[x]+1,id[y])\u3002\n\n-\t3.\u53d6\u533a\u95f4\u8865\u96c6\u65f6\u7279\u5224\u7b2c\u4e00\u548c\u6700\u540e\u7684\u533a\u95f4\uff0c\u8be6\u60c5\u89c1\u4e0a\u9762\u7684\u5185\u5bb9\u3002\n\n-\t4.\u7b2c15\u53f7\u70b9\uff0c\u8def\u5f84\u4f1a\u6709x==y\u7684\u60c5\u51b5\uff0c\u7528\u6811\u5256\u53ef\u80fd\u9700\u8981\u7279\u5224\u4e3a0.\n\n-\t5.\u672c\u7a0b\u5e8f\u5f00O2\u4ea413\u53f7\u70b9RE\uff0c\u4e0d\u5f00O2\u53ef\u4ee5\u8fc7\uff1f\uff1f\uff08\u53ef\u80fd\u53ea\u6709\u6211\u6709\u8fd9\u4e2a\u95ee\u9898QwQ\uff09\n\n\n------------\n\n\n# CODE\uff1a\n\uff08\u56e0\u4e3a\u65b9\u6cd5\u51e0\u4e4e\u90fd\u662f\u6570\u636e\u7ed3\u6784\uff0c\u800c\u4e14\u6b65\u9aa4\u5df2\u7ecf\u8bb2\u7684\u975e\u5e38\u6e05\u695a\u4e86\uff0c\u6240\u4ee5\u6ce8\u91ca\u53ea\u6807\u4e2a\u5927\u65b9\u5411\uff0c\u5c31\u4e0d\u6bcf\u884c\u89e3\u91ca\u4e86\uff0c\u800c\u4e14\u4ee3\u7801\u91cf\u4e5f\u633a\u5927\uff09\n\n```cpp\n#pragma warning (disable:4996)\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define RG register\n#define mid ((x+y)>>1)\n#define lson (pst<<1)\n#define rson (pst<<1|1)\nusing namespace std;\nconst int maxn = 3e5 + 5, maxm = maxn << 1, inf = 0x7fffffff;\nint x[maxn], y[maxn], z[maxn], p[maxn];//x,y,z\u4e3a\u6bcf\u6761\u8fb9\u7684\u6570\u636e\uff0cp[x]\u4e3ax\u4ee3\u8868\u8fb9\u7684\u6743\u503c\nint head[maxm], nxt[maxm], v[maxm], cnt;//\u524d\u5411\u661f\nint son[maxn], dad[maxn], sz[maxn], depth[maxn], root;//\u6811\u5256dfs1\nint id[maxn], top[maxn], rak[maxn], num;//\u6811\u5256dfs2\nint c[maxn], d[maxn], srt[maxn];//\u8bb0\u5f55\u533a\u95f4\u5e76\u6392\u5e8f\u7684\u6570\u7ec4\nint ma, mb, mc;//\u6700\u5927\u8def\u5f84\u7684\u8bb0\u5f55\nint n, m;\n\nstruct Binary_Indexed_Tree//\u6c42\u548c\u6811\u72b6\u6570\u7ec4\n{\n\tint a[maxn];\n\n\tinline int lowbit(int k) { return k & (-k); }\n\tinline void update(int x, int k) { for (int i = x; i <= n; i += lowbit(i))\ta[i] += k; }\n\tinline int query(int x) { int i = x, ans = 0; for (i = x; i >= 1; i -= lowbit(i))\tans += a[i]; return ans; }\n\tinline void build(int x) { for (int i = 1; i <= n; i++)\tupdate(i, p[rak[i]]); }\n\tinline int sum(int l, int r) { return query(r) - query(l - 1); }\n}BIT;\n\ninline int max(int x, int y) { return x > y ? x : y; }\ninline int min(int x, int y) { return x < y ? x : y; }\n\nstruct Segment_Tree//\u6700\u5927\u503c\u7ebf\u6bb5\u6811\n{\n\tint mx[maxn << 2], tag[maxn << 2];\n\n\tinline void pushdown(int pst)\n\t{\n\t\tif (!tag[pst])\treturn;\n\t\tint k = tag[pst];\n\t\tmx[lson] = max(mx[lson], k), mx[rson] = max(mx[rson], k);\n\t\ttag[lson] = max(tag[lson], k), tag[rson] = max(tag[rson], k);\n\t\ttag[pst] = 0; return;\n\t}\n\n\tinline void pushup(int pst) { mx[pst] = max(mx[lson], mx[rson]); }\n\n\tinline void update(int x, int y, int pst, int l, int r, int k)\n\t{\n\t\tif (x > y || y<l || x>r)\treturn;\n\t\tif (l <= x && y <= r) { mx[pst] = max(mx[pst], k), tag[pst] = max(tag[pst], k); return; }\n\t\tpushdown(pst);\n\t\tupdate(x, mid, lson, l, r, k), update(mid + 1, y, rson, l, r, k);\n\t\tpushup(pst); return;\n\t}\n\n\tinline int query(int x, int y, int pst, int p)\n\t{\n\t\tif (x == y)\treturn mx[pst];\n\t\tpushdown(pst);\n\t\tif (p <= mid)\treturn query(x, mid, lson, p);\n\t\telse return query(mid + 1, y, rson, p);\n\t}\n}ST;\n\ninline void addline(int x, int y) { v[cnt] = y, nxt[cnt] = head[x], head[x] = cnt++; }\n\ninline int read()\n{\n\tRG char c = getchar(); RG int x = 0;\n\twhile (c<'0' || c>'9')\tc = getchar();\n\twhile (c >= '0'&&c <= '9')\tx = (x << 3) + (x << 1) + c - '0', c = getchar();\n\treturn x;\n}\n\ninline void dfs1(int x, int f, int d)//\u6811\u5256\n{\n\tdad[x] = f, depth[x] = d, sz[x] = 1;\n\tfor (RG int i = head[x]; ~i; i = nxt[i])\n\t{\n\t\tif (v[i] == f)\tcontinue;\n\t\tdfs1(v[i], x, d + 1);\n\t\tsz[x] += sz[v[i]];\n\t\tif (sz[v[i]] > sz[son[x]])\tson[x] = v[i];\n\t}\n\treturn;\n}\n\ninline void dfs2(int x, int t)//\u6811\u5256\n{\n\ttop[x] = t, id[x] = ++num, rak[id[x]] = x;\n\tif (!son[x])\treturn;\n\tdfs2(son[x], t);\n\tfor (RG int i = head[x]; ~i; i = nxt[i])\n\t\tif (v[i] != dad[x] && v[i] != son[x])\tdfs2(v[i], v[i]);\n\treturn;\n}\n\ninline int sum(int x, int y)//\u6c42\u67d0\u6761\u8def\u5f84\u7684\u6743\u503c\n{\n\tRG int tx = top[x], ty = top[y], ans = 0;\n\twhile (tx != ty)\n\t{\n\t\tif (depth[tx] >= depth[ty])\tans += BIT.sum(id[tx], id[x]), x = dad[tx], tx = top[x];\n\t\telse ans += BIT.sum(id[ty], id[y]), y = dad[ty], ty = top[y];\n\t}\n\tif (id[x] <= id[y])\tans += BIT.sum(id[x] + 1, id[y]);\n\telse ans += BIT.sum(id[y] + 1, id[x]);\n\treturn ans;\n}\n\ninline bool cmp(int x, int y) { return c[x] < c[y]; }\n\ninline void update(int x, int y, int z)//\u66f4\u65b0mx\u6570\u7ec4\uff08\u5176\u5b9e\u662f\u66f4\u65b0\u6700\u5927\u503c\u7ebf\u6bb5\u6811\uff09\n{\n\tRG int tx = top[x], ty = top[y], t = 0;\n\twhile (tx != ty)\n\t{\n\t\tif (depth[tx] >= depth[ty]) c[++t] = id[tx], d[t] = id[x], x = dad[tx], tx = top[x];\n\t\telse c[++t] = id[ty], d[t] = id[y], y = dad[ty], ty = top[y];\n\t}\n\tif (id[x] <= id[y])\tc[++t] = id[x] + 1, d[t] = id[y];\n\telse c[++t] = id[y] + 1, d[t] = id[x];\n\tfor (int i = 1; i <= t; i++)\tsrt[i] = i;\n\tsort(srt + 1, srt + t + 1, cmp);\n\tif (c[srt[1]] > 1)\tST.update(1, n, 1, 1, c[srt[1]] - 1, z);\n\tif (d[srt[t]] < n)\tST.update(1, n, 1, d[srt[t]] + 1, n, z);\n\tfor (int i = 1; i < t; i++)\tST.update(1, n, 1, d[srt[i]] + 1, c[srt[i + 1]] - 1, z);\n\treturn;\n}\n\ninline int find_ans(int x, int y)//\u5728\u6700\u5927\u8def\u5f84\u4e0a\u904d\u5386\u5e76\u6e05\u96f6\u8fb9\u6c42\u7b54\u6848\n{\n\tRG int ans = inf;\n\tif (x == y)\treturn 0;\n\tif (depth[x] < depth[y])\tswap(x, y);\n\twhile (depth[x] != depth[y])\tans = min(ans, max(mc - p[x], ST.query(1, n, 1, id[x]))), x = dad[x];\n\twhile (x != y)\n\t{\n\t\tif (depth[x] > depth[y])\tans = min(ans, max(mc - p[x], ST.query(1, n, 1, id[x]))), x = dad[x];\n\t\telse ans = min(ans, max(mc - p[y], ST.query(1, n, 1, id[y]))), y = dad[y];\n\t}\n\treturn ans;\n}\n\nint main(void)\n{\n\tmemset(head, -1, sizeof(head));\n\tn = read(), m = read();\n\tfor (int i = 1; i < n; i++)\tx[i] = read(), y[i] = read(), z[i] = read();\n\tfor (int i = 1; i < n; i++)\taddline(x[i], y[i]), addline(y[i], x[i]);\n\troot = rand() % n + 1, dfs1(root, 0, 1), dfs2(root, root);//\u6811\u5256\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tif (depth[x[i]] > depth[y[i]])\tp[x[i]] = z[i];//\u628a\u6df1\u5ea6\u5927\u7684\u70b9\u4f5c\u4e3a\u4e00\u6761\u8fb9\u7684\u4ee3\u8868\n\t\telse p[y[i]] = z[i];\n\t}\n\tBIT.build(n);\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tRG int a = read(), b = read(), temp;\n\t\ttemp = sum(a, b), update(a, b, temp);\n\t\tif (temp >= mc)\tma = a, mb = b, mc = temp;//\u6c42\u6700\u5927\u8def\u5f84\n\t}\n\tprintf(\"%d\\n\", find_ans(ma, mb));\n\treturn 0;\n}\n```\n## ~~\u771f\u7684\u5f88\u7528\u5fc3\u5199\u7684\u4e00\u7bc7\u9898\u89e3\uff0c\u7559\u4e2a\u8d5e\u518d\u8d70\u5427QwQ~~",
        "postTime": 1534660878,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "## \u62ff\u5230\u9898\u76ee\u7684\u7b2c\u4e00\u773c\n\u9996\u5148\u8fd9\u662f\u4e00\u68f5n\u4e2a\u8282\u70b9\u7684\u6811~~\uff08\u522b\u8bf4\u4f60\u770b\u4e0d\u51fa\u6765\uff09~~\n\n\u7136\u540e\u5bf9\u4e8e\u6811\u4e0a\u7684m\u6761\u94fe\n\n\u6211\u4eec\u53ef\u4ee5\u9009\u53d6\u6811\u4e0a\u7684\u552f\u4e00\u4e00\u6761\u8fb9\u4f7f\u5b83\u7684\u8fb9\u6743\u53d8\u4e3a0\n\n\u6c42\u5904\u7406\u540e\u6700\u957f\u94fe\u7684\u957f\u5ea6\n## 20\u5206\nm=1\n\n\u597d\u5566\uff0c\u597d\u50cf\u53ef\u505a\n\n~~\u4e00\u773c\u671b\u53bb\u5168\u662f\u6c34~~\n\n\u53ea\u9700\u6c42\u51fa\u4e00\u6761\u94fe\u4e0a\u7684\u6240\u6709\u8fb9\u5e76\u8ba1\u7b97\u8fb9\u6743\u548c\u53ca\u6700\u5927\u8fb9\u6743\uff08\u66b4\u529b\u5f80\u4e0a\u8df3\u5e76\u8bb0\u5f55\u5373\u53ef\uff09\n\n\u8fb9\u6743\u548c\u51cf\u53bb\u6700\u5927\u8fb9\u6743\u5373\u4e3a\u7b54\u6848\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5O(n)\u8fc7\u6389\u8fd9\u9053\u9898\u4e86\uff08\u4e0d\u5acc\u9ebb\u70e6\u7684\u8bdd\u4e5f\u53ef\u4ee5O(log n)\u641e\u6811\u4e0a\u8def\u5f84\uff09\n## 60\u5206\uff1f\n~~\u4ece\u672a\u5982\u6b64\u63a5\u8fd1\u6ee1\u5206~~\n\n\u5168\u662f\u94fe\uff0c\u8fd9\u610f\u5473\u7740\u4ec0\u4e48~~\uff08\u5e76\u4e0d\u610f\u5473\u7740\u4ec0\u4e48\uff09~~\n\n\u60f3\u4e86\u60f3\uff0c\u53d1\u73b0\u597d\u50cf60\u5206\u5e76\u4e0d\u597d\u641e\n\n\u8003\u8651\u4e00\u4e0b\u66b4\u529b\u5427\n\n\u8d85\u7ea7\u66b4\u529b\uff1a\u66b4\u529b\u679a\u4e3e\u5220\u6bcf\u4e00\u6761\u8fb9\uff0c\u7edf\u8ba1\u5220\u5b8c\u8fd9\u6761\u8fb9\u4e4b\u540e\u6700\u957f\u94fe\u7684\u957f\u5ea6\uff0c\u53d6\u6700\u5c0f\u503c\u5c31\u662f\u7b54\u6848\uff0c\u590d\u6742\u5ea6O(n^2 m)\uff0c25\u5206\n## \u521a\u624d\u7684\u5c0f\u4f18\u5316\n\u8003\u8651\u4f18\u5316\u66b4\u529b\n\n\u679a\u4e3e\u5220\u54ea\u6761\u8fb9O(n)\u663e\u7136\u5df2\u7ecf\u8fbe\u5230\u7406\u8bba\u4e0b\u9650\n\n\u5982\u679c\u975e\u8981\u641e\u5b83\u7684\u8bdd\u53ea\u80fd\u6392\u9664\u90a3\u4e9b\u4e0d\u88ab\u7ecf\u8fc7\u7684\u8fb9\uff0c\u6548\u7387\u9ad8\u4e0d\u4e86\u591a\u5c11\n\n\u63a5\u4e0b\u6765\u662f\u7edf\u8ba1\u6bcf\u6761\u94fe\u7684\u957f\u5ea6\n\n\u5168\u662f\u94fe\u54ce\uff0c\u6c42\u7ebf\u6027\u533a\u95f4\u548c\uff0c\u524d\u7f00\u548c\u4f18\u5316\uff0c\u6d88\u53bb\u4e00\u4e2aO(n)\n\n\u90a3\u4e2aO(m)\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u6709\u6548\u7684\u4f18\u5316\n\n\u8fd9\u6837\uff0c\u590d\u6742\u5ea6\u964d\u81f3O(nm)\uff0c40\u5206\n\n\u7136\u540e\u5176\u4ed6\u6570\u636e\uff0c\u641e\u6811\u94fe\u5256\u5206\u52a8\u6001\u4fee\u6539\u3001\u67e5\u8be2\u53ef\u4ee5\u591a\u62ff\u4e00\u4e9b\u5206\uff0c\u590d\u6742\u5ea6O(nm log n),60\u5206\n## \u600e\u4e48\u529e\nQAQ\uff0c60\u5206\u90fd\u62ff\u4e0d\u5230\u4e86\u5417\n\n\u53ef\u4e0d\u53ef\u4ee5\u4e0d\u5b9e\u9645\u6539\u8fb9\u6743\u5462\uff1f\n\n~~\u7ecf\u8fc7\u4e0d\u4f1a\u5c31\u731c\u4e8c\u5206~~\n\n\u7ecf\u8fc7\u6df1\u5165\u601d\u8003\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\n\n\u6700\u77ed\u65f6\u95f4\u4e3at\uff0c\u524d\u63d0\u662f\u5bf9\u4e8elength>t\u7684\u6240\u6709\u94fe\uff0c\u603b\u80fd\u627e\u5230\u81f3\u5c11\u4e00\u6761\u957f\u4e3ak\u516c\u5171\u8fb9\uff0c\u4f7f\u5f97\u6700\u957f\u94fe\u7684\u957f\u5ea6max length-k<=t\n\n\u5982\u679c\u77e5\u9053\u7b54\u6848\uff0c\u597d\u50cf\u4e0d\u4ec5\u4e0d\u7528\u679a\u4e3e\u6700\u957f\u94fe\uff0c\u8fd8\u53ef\u4ee5\u628a\u679a\u4e3e\u5220\u8fb9\u53d8\u4e3a\u8d2a\u5fc3\u5220\u6389\u88ab\u5168\u90e8\u6ee1\u8db3\u6761\u4ef6\u7684\u94fe\u7ecf\u8fc7\u7684\u6700\u957f\u8fb9\uff0c\u7a33\u8d5a\u4e00\u4e2aO(n)\u548c\u4e00\u4e2aO(m)\n## \u8003\u8651\u4e8c\u5206\u7b54\u6848\n\u5982\u679c\u80fd\u591f\u5728\u65f6\u95f4t1\u5185\u5b8c\u6210\u4efb\u52a1\uff0c\u90a3\u4e48\u5bf9\u4e8et2>t1\uff0c\u603b\u80fd\u5728\u65f6\u95f4t2\u5185\u5b8c\u6210\u4efb\u52a1\n\n\u6240\u4ee5\u7b54\u6848\u7b26\u5408\u5355\u8c03\u6027\n\n\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\n\nCheck\u51fd\u6570\u600e\u4e48\u5199\u5462\uff0c\u770b\u4e00\u770b\u80fd\u4e0d\u80fd\u627e\u5230\u627e\u5230\u81f3\u5c11\u4e00\u6761\u957f\u4e3ak\u516c\u5171\u8fb9\uff0c\u4f7f\u5f97\u6700\u957f\u94fe\u7684\u957f\u5ea6max length-k<=t\n\n\u8bbelength>t\u7684\u8fb9\u7684\u4e2a\u6570\u4e3anumber\n\n\u6211\u4eec\u5fc5\u987b\u77e5\u9053\u4e00\u6761\u8fb9\u662f\u5426\u66fe\u88abnumber\u4e2a\u94fe\u540c\u65f6\u7ecf\u8fc7\uff0c\u552f\u4e00\u7684\u65b9\u6cd5\u597d\u50cf\u5c31\u662f\u5dee\u5206\u4e86\uff0ccheck\u51fd\u6570\u53ef\u4ee5\u5199\u6210O(n + m)\u7684\uff0c\u603b\u590d\u6742\u5ea6O((n + m)log n)\uff0c60\u5206\n## 100\u5206\n\u4e8c\u5206\u7b54\u6848\u7684\u505a\u6cd5\u653e\u5230\u6811\u4e0a\u5462\n\n\u8003\u8651\u7ebf\u6027\u6570\u636e\u4e0a\u4e8c\u5206\u7684\u5b8c\u6574\u505a\u6cd5\n\n\u9884\u5904\u7406\u6bcf\u4e00\u6761\u94fe\u7684length\uff0c\u4e8c\u5206\u7b54\u6848\uff0c\u653e\u5230check\u51fd\u6570\u91cc\u641e\n\n\u6ca1\u95ee\u9898\n\nLCA\u6c42\u51fa\u6bcf\u6761\u94fe\u7684length\uff0c\u8fd8\u662f\u4e8c\u5206\uff0ccheck\u51fd\u6570\u6362\u6210\u6811\u4e0a\u5dee\u5206\n\n\u6700\u540e\u53d1\u73b0\u6b63\u89e3\u53ea\u8981\u4e00\u53e5\u8bdd\uff1a\n\n\u6c42\u94fe\u957f+\u4e8c\u5206\n### \u4e0a\u4ee3\u7801\uff1a\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int maxn=3e5+10;\nstruct edge{\n    int next,to,dis;\n}e[2*maxn],q[2*maxn];\nstruct length{\n    int len,lca,u,v;\n}len[maxn];\nint head[maxn],cnt,headq[maxn],dis[maxn],maxlen,n,m,a[maxn],ans,s[maxn],num,ret,f[maxn];\t//\u4e00\u5806\u53d8\u91cf \nbool vis[maxn];\ninline int readn()\t\t//\u968f\u5904\u53ef\u89c1\u7684\u5feb\u8bfb \n{\n    int x=0;\n    char ch=getchar();\n    while(ch>'9'||ch<'0')\n        ch=getchar();\n    while(ch>='0'&&ch<='9')\n    {\n        x=(x<<3)+(x<<1)+(ch^'0');\n        ch=getchar();\n    }\n    return x;\n}\ninline void add_edge(int x,int y,int d)\n{\n    e[++cnt].next=head[x];\n    e[cnt].to=y;\n    e[cnt].dis=d;\n    head[x]=cnt;\n}\ninline void add_que(int x,int y)\n{\n    q[++cnt].next=headq[x];\n    q[cnt].to=y;\n    headq[x]=cnt;\n}\nint find(int x)\n{\n    return f[x]==x?f[x]:f[x]=find(f[x]);\t//\u4e00\u884c\u5e76\u67e5\u96c6 \n}\nvoid dfs(int u,int pre)\n{\n    for(int i=head[u];i;i=e[i].next)\n    {\n        int v=e[i].to;\n        if(v==pre)\n            continue;\n        dfs(v,u);\n        s[u]+=s[v];\t\t//\u7edf\u8ba1\u7ecf\u8fc7\u6b21\u6570 \n    }\n    if(s[u]==num&&a[u]>ret)\n        ret=a[u];\t\t//\u8d2a\u5fc3\u5730\u9009\u53d6\u6700\u957f\u516c\u5171\u8fb9 \n}\ninline bool check(int x)\n{\n    memset(s,0,sizeof(s));\n    num=ret=0;\n    for(int i=1;i<=m;i++)\t\t//\u6811\u4e0a\u5dee\u5206 \n        if(len[i].len>x)\n        {\n            s[len[i].u]++;\n            s[len[i].v]++;\n            s[len[i].lca]-=2;\n            num++;\t\t//\u8bb0\u5f55len>x\u7684\u94fe\u7684\u4e2a\u6570 \n        }\n    dfs(1,0);\t\t//\u8dd1\u5dee\u5206\u7ed3\u679c \n    if(maxlen-ret>x)\t//\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\uff0c\u8fd4\u56deNO \n        return 0;\n    return 1;\t//\u80fd\u6ee1\u8db3 \n}\nvoid tarjan(int u,int pre)\t\t//tarjan\u6c42\u94fe\u957f \n{\n    for(int i=head[u];i;i=e[i].next)\n    {\n        int v=e[i].to;\n        if(v==pre)\n            continue;\n        dis[v]=dis[u]+e[i].dis;\n        tarjan(v,u);\n        a[v]=e[i].dis;\n        int f1=find(v);\n        int f2=find(u);\n        if(f1!=f2)\n            f[f1]=find(f2);\n        vis[v]=1;\n    }\n    for(int i=headq[u];i;i=q[i].next)\n        if(vis[q[i].to])\n        {\n            int p=(i+1)>>1;\n            len[p].lca=find(q[i].to);\n            len[p].len=dis[u]+dis[q[i].to]-2*dis[len[p].lca];\n            maxlen=max(maxlen,len[p].len);\n        }\n}\nint main()\n{\n    n=readn(),m=readn();\n    for(int i=1;i<n;i++)\n    {\n        int ai=readn(),bi=readn(),ti=readn();\n        add_edge(ai,bi,ti);\t\t//\u90bb\u63a5\u8868\u5b58\u56fe \n        add_edge(bi,ai,ti);\n    }\n    for(int i=1;i<=n;i++)\n        f[i]=i;\n    cnt=0;\n    for(int i=1;i<=m;i++)\n    {\n        int x=readn(),y=readn();\t\t//\u8f93\u5165 \n        len[i].u=x;\n        len[i].v=y;\n        add_que(x,y);\n        add_que(y,x);\n    }\n    tarjan(1,0);\n    int l=0,r=maxlen,mid;\n    while(l<=r)\t\t//\u4e8c\u5206\u7b54\u6848 \n    {\n        mid=(l+r)>>1;\n        if(check(mid))\n        {\n            r=mid-1;\n            ans=mid;\t//\u8bb0\u5f55\u7b54\u6848 \n        }\n        else\n            l=mid+1;\t//\u4e0d\u80fd\u6ee1\u8db3\u5219\u4e8c\u5206\u66f4\u5927\u7b54\u6848\uff0c\u4ee5\u4f7f\u5f97\u6761\u4ef6\u53ef\u4ee5\u5f97\u5230\u6ee1\u8db3 \n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1526873848,
        "uid": 57045,
        "name": "communist",
        "ccfLevel": 7,
        "title": "NOIP2015 D2T3 \u8fd0\u8f93\u8ba1\u5212"
    },
    {
        "content": "\u57fa\u672c\u601d\u60f3\uff1a**LCA+\u4e8c\u5206**\u3002\n\n\u7528**\u500d\u589e**\u6765\u5904\u7406\uff0c\u90bb\u63a5\u8868\u7ef4\u62a4\u3002\n\n\u542c\u8bf4\u500d\u589e\u4f1a\u88ab\u5361\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\uff0c~~\u6d1b\u8c37\u6570\u636e\u592a\u6c34\u4e86\uff0c\u9003~~\n\n\u601d\u8def\uff1a\n\u6700\u5927\u503c\u6700\u5c0f\uff0c\u663e\u7136\u53ef\u4ee5\u4e8c\u5206\uff1a\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540echeck\u7684\u65f6\u5019\u628a\u6240\u6709\u5927\u4e8emid\u503c\u7684\u8def\u5f84\u8bb0\u5f55\u4e0b\u6765\uff0c\u627e\u51fa\u88ab\u6240\u6709\u8fd9\u6837\u8def\u5f84\u8986\u76d6\u7684\u6700\u957f\u7684\u9053\u8def\uff1a\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u9053\u8def false\uff1b\u5982\u679c\u8fd9\u6837\u7684\u9053\u8def\u88ab\u51cf\u53bb\u4e4b\u540e\u4f9d\u7136\u5927\u4e8emid false\n\u627e\u51fa\u88ab\u6240\u6709\u8def\u5f84\u8986\u76d6\u7684\u9053\u8def\uff1a\u5728\u6811\u4e2d\u5c06\u6240\u6709\u8def\u5f84\u8d77\u3001\u59cb\u6743\u503c+1\uff0cLCA\u6743\u503c-2\uff0c\u4ece\u6240\u6709\u53f6\u8282\u70b9\u5f80\u4e0a\u7d2f\u52a0\uff08dfs\u5e8f\u7ef4\u62a4\u771f\u662f\u597d\uff09\uff0c\u6700\u7ec8\u6743\u503c\u4e3a\u8def\u5f84\u6570\u7684\u70b9\u5230\u5176\u7236\u4eb2\u7684\u8fb9\u4e3a\u6240\u6c42\u8fb9\ndis[i]\u8868\u793ai\u5230\u6839\u7684\u8ddd\u79bb\uff1btmp[i]\u8868\u793ai\u8fd9\u4e2a\u70b9\u901a\u5f80\u7236\u4eb2\u7684\u8fb9\uff0c\u76ee\u7684\u662f\u8bb0\u5f55\u8fd9\u6761\u8fb9\u88ab\u904d\u5386\u7684\u6b21\u6570 \uff1bnum[i]\u7684\u4f5c\u7528\u662f\u627e\u5230\u53f6\u8282\u70b9\u5411\u4e0a\u7d2f\u52a0\n\n### **code**## \n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int maxn=300010;\nstruct node{\n\tint to,next,w;\n}edge[maxn*2];\nstruct no{\n\tint u,v,lcaa,diss;\n}lu[maxn*2];\nint summ,cnt=0,k,n,m,num[maxn],mi[maxn],vis[maxn];\nint temp[maxn],head[maxn],deep[maxn],dis[maxn];\nint fa[maxn][25],dp[maxn][25];\nvoid adde(int u,int v,int w){\n\tk++;\n\tedge[k].to=v;\n\tedge[k].next=head[u];\n\tedge[k].w=w;\n\thead[u]=k;\n}\nvoid dfs(int x,int pa,int dep){\n\tcnt++;\n\tnum[cnt]=x;\n\tdeep[x]=dep;\n\tvis[x]=1;\n\tfor(int i=1;i<25;i++){\n\t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\t}\n\tfor(int i=head[x];i>0;i=edge[i].next){\n\t\tint v=edge[i].to;\n\t\tif(!vis[v]){\n\t\t\tfa[v][0]=x;\n\t\t\tdis[v]=dis[x]+edge[i].w;\n\t\t\tdfs(v,x,dep+1);\n\t\t}\n\t}\n}\nint lca(int x,int y){\n\tif(deep[x]<deep[y]) swap(x,y);\n\tint t=deep[x]-deep[y];\n\tfor(int i=0;i<25;i++){\n\t\tif((1<<i)&t) x=fa[x][i];\n\t}\n\tif(x==y) return x;\n\tfor(int i=24;i>=0;i--){\n\t\tif(fa[x][i]!=fa[y][i]){\n\t\t\tx=fa[x][i];y=fa[y][i];\n\t\t}\n\t}\n\treturn fa[x][0];\n}\nbool check(int mid){\n\tint cnt=0,ans=0;\n\tmemset(temp,0,sizeof(temp));\n\tfor(int i=1;i<=m;i++){\n\t\tif(lu[i].diss>mid){\n\t\t\ttemp[lu[i].u]++;temp[lu[i].v]++;temp[lu[i].lcaa]-=2;\n\t\t\tans=max(ans,lu[i].diss-mid);\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif(cnt==0) return true;\n\tfor(int i=n;i>=1;i--) temp[fa[num[i]][0]]+=temp[num[i]];\n\tfor(int i=2;i<=n;i++) if(temp[i]==cnt&&dis[i]-dis[fa[i][0]]>=ans) return true;\n\treturn false;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n-1;i++){\n\t\tint x,y,w;\n\t\tscanf(\"%d%d%d\",&x,&y,&w);\n\t\tadde(x,y,w);adde(y,x,w);\n\t\tsumm+=w;\n\t}\n\tdis[1]=0;\n\tdfs(1,0,1);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&lu[i].u,&lu[i].v);\n\t\tlu[i].lcaa=lca(lu[i].u,lu[i].v);\n\t\tlu[i].diss=dis[lu[i].u]+dis[lu[i].v]-2*dis[lu[i].lcaa];\n\t}\n\tint left=0,right=summ;\n\tint mid;\n\twhile(left<right){\n\t\tmid=(left+right)>>1;\n\t\tif(check(mid)) right=mid;\n\t\telse left=mid+1;\n\t}\n\tprintf(\"%d\",left);\n\treturn 0;\n}\n```",
        "postTime": 1538732831,
        "uid": 111961,
        "name": "D_14134",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "## \u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011\n\n\u9898\u76ee\u4f20\u9001\u95e8\uff1a\n\nhttps://www.luogu.org/problemnew/show/P2680\n\n\u8bdd\u8bf4\u3002\u3002\u3002\u8fd9\u9898\u8fd9\u4e48\u6bd2\u7624\u771f\u7684\u6709\u4eba\u80fd\u5728\u8003\u573a\u4e0a1A\u4e48\n\n\u656c\u8bf7\u89c2\u770b\uff1a\u7206\u86cb\u7684NOIp\uff08\u9003\n\n(\u4ee5\u4e0a\u90fd\u662f\u5e9f\u8bdd,\u4e0b\u9762\u624d\u662f\u6b63\u6587)\n\n\u4e3b\u8981\u8003\u5bdf:**\u6700\u8fd1\u516c\u5171\u7956\u5148(LCA)+\u6811\u4e0a\u5dee\u5206+\u4e8c\u5206\u7b54\u6848**\n\n==========================================================\n\n### \u9898\u76ee\u7b80\u8981\u6982\u62ec~~(\u4eba\u6027\u7ffb\u8bd1)~~\n\n\u4ed4\u7ec6\u8bfb\u9898\u540e,\u6211\u4eec\u53d1\u73b0\u9898\u9762\u53ef\u4ee5\u7b80\u8981\u6982\u62ec\u6210:\n\n\t\u7ed9\u4f60\u4e00\u4e2an\u4e2a\u70b9\u7684\u6811,\u5bf9\u4e8en-1\u6761\u8fb9\u5404\u6709\u8fb9\u6743,\n    \u7ed9\u51fa\u4e00\u4e9b\u70b9\u5bf9(x,y),\u540c\u65f6\u5b9a\u4e49dis(x,y)\u8868\u793ax,y\u4e24\u70b9\u95f4\u7684\u6811\u4e0a\u8ddd\u79bb,\n    \u73b0\u5141\u8bb8\u4f60\u5c06\u4e00\u6761\u8fb9\u7684\u6743\u503c\u53d8\u4e3a0,\u8bf7\u4f60\u6700\u5c0f\u5316\u6700\u5927\u7684dis\u503c\n\n\u5982\u679c\u4f60\u5927\u6982\u7406\u89e3\u4e86\u5927\u610f,\u5c31\u53ef\u4ee5\u770b\u4e0b\u9762\u4e86\n\n==========================================================\n\n### **\u601d\u8def&&\u7b97\u6cd5\u5206\u6790**:\n\n\u5148\u6765\u8bb2\u4e00\u8bb2**\u9519\u8bef\u7684\u60f3\u6cd5VS\u6b63\u89e3**\n\n(\u81f3\u5c11\u8ba9\u6211\u628a\u81ea\u5df1\u7684\u4f2a\u6b63\u89e3\u8bb2\u4e00\u4e0b= =)\n\n#### \u505a\u6cd5\u4e00(\u9519\u8bef\u65b9\u6cd5):\u6811\u5256+LCA+\u8d2a\u5fc3+\u6811\u4e0a\u5dee\u5206+\u7ebf\u6bb5\u6811\n\n**(\u8fd9\u91cc\u662f\u9519\u8bef\u7684\u89e3\u9898\u65b9\u6cd5,\u4f46\u662f\u6211\u4e5f\u8981\u8bb2\u4e00\u4e0b,\u907f\u514d\u540c\u5b66\u4eec\u72af\u548c\u6211\u4e00\u6837\u7684\u9519\u8bef)**\n\n(\u53ef\u80fd\u6ca1\u4eba\u8ddf\u6211\u4e00\u6837\u50bb\u5427...~~xjb\u8d2a\u5fc3~~)\n\n\u4e0a\u6765\u4e8c\u8bdd\u6ca1\u8bf4\u76f4\u63a5\u6253\u4e86\u4e2a\u6811\u5256LCA+\u8d2a\u5fc3+\u6811\u4e0a\u5dee\u5206+\u7ebf\u6bb5\u6811\n\n\u4ee5\u4e3a\u81ea\u5df1\u8981~~AK~~rank 1\u4e86,\u5f00\u5fc3\u7684\u8d70\u4e86\n\n~~(\u7ed3\u679c\u6a21\u62df\u8d5b\u6210\u7ee9\u51fa\u6765,\u76f4\u63a5\u7206\u86cb...)~~\n\n\n\n**\u4f2a\u6b63\u89e3**\n\n\u4ed4\u7ec6\u601d\u7d22\u53d1\u73b0,**\u5982\u679c\u4e00\u6761\u8fb9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\u8d8a\u591a,\u90a3\u4e48\u8fd9\u6761\u8fb9\u8d8a\u6709\u53ef\u80fd\u662f\u90a3\u4e2a\u88ab\u5220\u6389\u7684\u8fb9,\u56e0\u4e3a\u5b83\u5bf9\u4e8e\u591a\u6570\u7684dis\u503c\u90fd\u6709\u5f71\u54cd**\n\n**\u90a3\u4e48\u6709\u4e00\u79cd\u8d2a\u5fc3\u7684\u60f3\u6cd5:\u4e0d\u59a8\u627e\u51fa\u8fd9\u6761\u8fb9,\u628a\u5b83\u5220\u9664\u4e4b\u540e\u7edf\u8ba1\u5269\u4e0b\u70b9\u5bf9\u4e2ddis\u503c\u51cf\u53bb\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u4e4b\u540e\u6700\u5927\u503c\u5373\u4e3a\u6700\u5c0f\u5316\u7684dis\u503c**\n\n\u4f46\u662f\u8fd9\u6837\u53c8\u5f88\u96be\u5b9e\u73b0...\u6bd4\u5982\u50cf\u6211,\u4e3a\u4e86\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u70b9\u5bf9\u7684dis\u503c,\u5f00\u4e86\u4e00\u53d1\u7ebf\u6bb5\u6811....\n\n(\u5176\u5b9e\u53ea\u662f\u4e3a\u4e86\u7edf\u8ba1\u6811\u4e0a\u8def\u5f84\u7684\u8fb9\u6743\u4e4b\u548c)\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u7684\u8fb9\u6743\u548c...\u603b\u4e4b\u5c31\u662f\u5404\u79cd\u4e71\u641e\n\n\u4ee3\u7801\u957f\u5ea6\u9661\u7136\u4e0a\u5347\u4e3a187\u884c...\u6700\u540e\u8fd8\u662f\u4e0d\u5bf9\n\n\u5176\u5b9e\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u4f1a**\u53d1\u73b0\u8fd9\u4e2a\u8d2a\u5fc3\u662f\u663e\u7136\u4e0d\u5bf9\u7684**\n\n~~(\u4f46\u662f\u6211\u5374\u6ca1\u770b\u51fa\u6765)~~\n\n\u8bd5\u60f3:**\u6211\u4eec\u6709\u4e00\u9897\u5f88\u5927\u7684\u6811,\u6709\u4e00\u6761\u5f88\u957f\u7684\u8be2\u95ee\u8def\u5f84,\u4f46\u662f\u5b83\u4e0d\u7ecf\u8fc7\u6211\u4eec\u9009\u62e9\u7684\u90a3\u6761\u8fb9,\u90a3\u4e48\u6211\u4eec\u5c31\u6ca1\u6709\u8fbe\u5230\u8ba9\u6700\u5927\u7684dis\u503c\u6700\u5c0f\u7684\u76ee\u6807,\u6240\u4ee5\u7b97\u6cd5\u7684\u9009\u62e9\u662f\u6709\u8bef\u7684**\n\n~~(\u4f46\u662f\u8fd9\u6837\u6211\u8fd8\u5f97\u4e8635\u5206)(\u9003~~\n\n\u9519\u8bef\u89e3\u6cd5\u5c31\u4e0d\u53d1\u4ee3\u7801\u4e86\u5427~~(\u6015\u4e22\u4eba+\u6342\u8138)~~\n\n\u8fd8\u662f**\u6765\u8bb2\u6807\u7b97**\u5427\n\n#### \u505a\u6cd5\u4e8c(\u6b63\u786e\u505a\u6cd5):LCA+\u4e8c\u5206\u7b54\u6848+\u6811\u4e0a\u5dee\u5206\n\n\u65e2\u7136\u662f\u6b63\u89e3,\u6765\u8bb2\u4e00\u4e0b\u5982\u4f55\u8003\u8651\n\n\u4e3a\u4e86**\u4f7f\u5f97\u6700\u957f\u7684\u8def\u5f84\u6700\u77ed**,\u6211\u4eec\u81ea\u7136\u5730\u60f3\u5230**\u4e8c\u5206\u7b54\u6848**\n\n\u5bf9\u4e8e**\u7b54\u6848\u7684\u5355\u8c03\u6027**,\u4e5f\u662f\u663e\u7136\u7684\n\n\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u80fd\u5728t1\u65f6\u95f4\u5185\u8d70\u5b8c\u4e00\u4e2a\u8def\u5f84,\u90a3\u4e48\u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u65f6\u95f4t2>t1,\u603b\u662f\u80fd\u591f\u8d70\u5b8c\u7684\n\n\u90a3\u4e48**\u8bc1\u660e\u672c\u9898\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027**\n\n\u90a3\u4e48\u5982\u4f55**\u5c06\u4e8c\u5206\u7b54\u6848\u8f6c\u79fb\u5230\u6811\u4e0a**\u5462?\n\n\u4e0d\u59a8\u8003\u8651**\u4e8c\u5206\u6700\u7ec8\u6240\u6709\u8bf7\u6c42\u7684\u6700\u5927\u6811\u4e0a\u8ddd\u79bb,\u6700\u540e\u53ea\u9700\u5224\u65ad\u662f\u5426\u80fd\u591f\u901a\u8fc7\u5220\u6389\u4e00\u6761\u8fb9\u7684\u8fb9\u6743,\u6700\u7ec8\u80fd\u5426\u8fbe\u5230\u8fd9\u4e2a\u6700\u5927\u8ddd\u79bb\u5373\u53ef**\n\n**\u8fd9\u6837\u5c31\u5c06\u4e00\u4e2a\u6c42\u89e3\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u5224\u5b9a\u95ee\u9898**\n\n\u800c**\u6839\u636e\u8ba1\u7b97\u673a\u7406\u8bba,\u5224\u5b9a\u5f80\u5f80\u6bd4\u6c42\u89e3\u66f4\u52a0\u8fc5\u901f,\u800c\u4e14\u66f4\u52a0\u7b80\u4fbf**\n\n\u90a3\u4e48\u6b63\u89e3\u5c31\u547c\u4e4b\u6b32\u51fa\u4e86\n\n**\u8981\u6c42\u8def\u5f84\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u53ef\u4ee5\u4e8c\u5206\u8fd9\u4e2a\u6700\u5c0f\u503c**\n\n**\u6bcf\u6b21\u5224\u65ad\u6811\u4e0a\u662f\u5426\u5b58\u5728\u4e00\u6761\u8fb9\uff0c\u80fd\u88ab\u6bd4\u5f53\u524d\u4e8c\u5206\u503c\u5927\u7684\u8def\u5f84\u90fd\u8986\u76d6**\n\n\u5bf9\u4e8e\u4e00\u6bb5\u6811\u4e0a\u8def\u5f84\u7684\u8ddd\u79bb,\u53ef\u4ee5**\u6811\u4e0a\u524d\u7f00\u548c**\u5904\u7406,\n\n\u6211\u4eec**\u5b9a\u4e49dis[node]\u8868\u793anode\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u4e4b\u548c**\n\n\u90a3\u4e48\u663e\u7136\u53ea\u9700\u8981dfs\u4e00\u904d\u5c31\u53ef\u4ee5\u9884\u5904\u7406\u51fadis\u6570\u7ec4\u4e86\n\n\u90a3\u4e48d(x,y)=dis[x]+dis[y]-2*dis[LCA(x,y)]\n\n\u73b0\u5728\u53ea\u9700\u8981**\u6c42LCA**\u5c31\u884c\u4e86,\u800c\u6c42LCA\u53ef\u4ee5\u500d\u589e\u548c\u6811\u5256\u6765\u6c42\n\n\u6211\u662f\u7528\u7684**\u6811\u5256\u6c42LCA**,\u56e0\u4e3a\u6211\u89c9\u5f97\u6811\u5256\u4f18\u7f8e **(\u9003**\n\n\u800c\u5bf9\u4e8e**\u6811\u4e0a\u8def\u5f84\u8986\u76d6**,\u6211\u4eec**\u76f4\u63a5\u6811\u4e0a\u5dee\u5206**\u5c31\u884c\u4e86\n\n\u8fd9\u9898\u663e\u7136\u662f**\u5bf9\u4e8e\u6811\u4e0a\u8fb9\u7684\u5dee\u5206**\n\n\u6211\u4eec**\u8bbe\u5dee\u5206\u6570\u7ec4\u4e3aC,\u6bcf\u4e00\u6b21\u6211\u4eec\u90fd\u8ba9\u90a3\u4e9b\u5927\u4e8e\u4e8c\u5206\u51fa\u7684\u8def\u5f84\u503c\u5927\u7684\u8def\u5f84\u7684**\n\nC[x]++,C[y]++,C[LCA(x,y)]-=2 (\u5dee\u5206\u4e00\u4e0b)\n\n\u90a3\u4e48\u6bcf\u6b21**\u53ea\u9700\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u6761\u8fb9\u7684\u8fb9\u6743k>=\u6700\u957f\u8def\u5f84-\u4e8c\u5206\u7684\u8def\u5f84\u503c,\u540c\u65f6\u8fd9\u4e9b\u8def\u5f84\u7684\u8ddd\u79bb\u90fd\u662f\u6bd4\u4e8c\u5206\u503c\u5927\u7684**,\u5c31\u884c\u4e86\n\n\u5224\u65ad\u65f6\u8981**\u6bcf\u6b21\u628a\u513f\u5b50\u7684\u5dee\u5206\u503c\u7edf\u8ba1\u5230\u7236\u4eb2\u4e2d**\n\n\u5149\u8bf4\u53ef\u80fd\u6709\u4e9b\u96be\u61c2,\u4e0b\u9762\u653e\u4ee3\u7801\n\n\u4e0b\u9762\u7684\u53d8\u91cf\u53ef\u80fd\u6709\u4e9b\u5c0f\u95ee\u9898,\u56e0\u4e3a\u9632\u6b62\u91cd\u590d(\u4ee5\u53ca\u4e2a\u4eba\u4e60\u60ef),\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b~~\u5f02\u7c7b~~\u683c\u683c\u4e0d\u5165\u7684\u53d8\u91cf,\u8bf7\u8c05\u89e3\n\n(\u672c\u4eba\u4ee3\u7801\u6781\u4e11,\u5404\u4f4d\u4e0d\u559c\u52ff\u55b7)\n\nPS:\u4ee3\u7801\u91cc\u4e5f\u6709\u89e3\u91ca\u54e6~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#define re register \nusing namespace std;\ntypedef long long ll;\nconst int inf=1e9+7;\ninline int read()\n{\n    int p=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){p=p*10+c-'0';c=getchar();}\n    return f*p;}\nconst int maxn=300003;\nstruct Edge\n{\n    int from,to,w,id;\n}p[maxn<<1];\nstruct query\n{\n    int x,y,lca,d;\n}A[maxn];\nint n,m,cnt,head[maxn<<1],C[maxn],dis[maxn];\nint fa[maxn],depth[maxn],top[maxn],heavy[maxn],size[maxn];\nint val[maxn],dnf[maxn],tot,R,L;\ninline void add_edge(int x,int y,int W)//\u52a0\u8fb9 \n{\n    cnt++;\n    p[cnt].from=head[x];\n    head[x]=cnt;\n    p[cnt].to=y;\n    p[cnt].w=W;\n}\ninline void dfs1(int x,int f)\n//\u6811\u5256dfs1:\u5904\u7406\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2fa,\u6df1\u5ea6depth,\u5b50\u6811\u5927\u5c0fsize,dfs\u5e8fdnf \n{\n    fa[x]=f,depth[x]=depth[f]+1,size[x]=1,dnf[++tot]=x;\n    for(re int i=head[x];i;i=p[i].from)\n        {\n            int y=p[i].to;\n            if(y==f)continue;\n            val[y]=p[i].w;\n            dis[y]=dis[x]+p[i].w;\n            dfs1(y,x);\n            size[x]+=size[y];\n            if(!heavy[x]||size[y]>size[heavy[x]])\n                heavy[x]=y;\n        }\n}\ninline void dfs2(int x,int t)//\u6811\u5256dfs2:\u5904\u7406\u91cd\u94fe \n{\n    top[x]=t;\n    if(!heavy[x])return ;\n    dfs2(heavy[x],t);\n    for(re int i=head[x];i;i=p[i].from)\n        {\n            int y=p[i].to;\n            if(y==fa[x]||y==heavy[x])continue;\n            dfs2(y,y);\n        }\n}\ninline int LCA(int x,int y)//\u6811\u5256\u6c42LCA \n{\n    while(top[x]!=top[y])\n        {\n            if(depth[top[x]]<depth[top[y]])swap(x,y);\n            x=fa[top[x]];\n        }\n    return depth[x]<=depth[y]?x:y;\n}\n//=================================\u4ee5\u4e0a\u662f\u6811\u5256\u5e38\u89c4\u64cd\u4f5c\ninline int check(int lim,int sum=0)//\u4e8c\u5206\u7b54\u6848\u68c0\u9a8c,\u5982\u4e0a\u6240\u8ff0 \n{\n    memset(C,0,sizeof(C));//\u6ce8\u610f\u6bcf\u4e00\u6b21\u90fd\u8981\u6e05\u7a7aC\u6570\u7ec4\n    for(re int i=1;i<=m;i++)\n        if(A[i].d>lim)//\u6811\u4e0a(\u8fb9)\u5dee\u5206\n            {\n                C[A[i].x]++,C[A[i].y]++,C[A[i].lca]-=2;\n                sum++;\n            }\n    for(re int i=n;i>=1;i--)\n        {\n            C[fa[dnf[i]]]+=C[dnf[i]];//\u6bcf\u6b21\u5dee\u5206\u503c\u90fd\u7d2f\u52a0\u5230\u7236\u4eb2\u8282\u70b9\n            if(val[dnf[i]]>=R-lim&&C[dnf[i]]==sum)\n            //\u5b58\u5728\u4e00\u6761\u8def\u5f84\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u5219\u53ef\u884c\n            \treturn 1;\n        }\n    return 0;//\u5426\u5219\u65e0\u89e3\n}\ninline int Binary_search(int llim,int rlim,int mid=0)//\u4e8c\u5206\u7b54\u6848 \n{\n    while(llim<rlim)\n        {\n            mid=(llim+rlim)>>1;\n            if(check(mid))rlim=mid;\n            else llim=mid+1;\n        }\n    return llim;\n}\nint main()\n{\n//\tfreopen(\"transport.in\",\"r\",stdin);\n//\tfreopen(\"transport.out\",\"w\",stdout);\n    //\u8fd9\u662f\u6821\u5185\u6a21\u62df\u8d5b\u7684\u8003\u8bd5\u9898= =\u5149\u8363\u7206\u86cb \n    n=read(),m=read();\n    for(re int i=1;i<n;i++)\n        {\n            int x=read(),y=read(),w=read();\n            add_edge(x,y,w);\n            add_edge(y,x,w);\n            L=max(L,w);//\u7edf\u8ba1\u6700\u5927\u8fb9\u6743 \n        }\n    dfs1(1,0);dfs2(1,1);//\u6811\u5256\u9884\u5904\u7406 \n    for(re int i=1;i<=m;i++)//\u9884\u5904\u7406\u6bcf\u4e00\u6b21\u8bf7\u6c42\u7684lca\u548c\u8ddd\u79bb \n        {\n            A[i].x=read(),A[i].y=read();\n            A[i].lca=LCA(A[i].x,A[i].y);\n            A[i].d=dis[A[i].x]+dis[A[i].y]-2*dis[A[i].lca];\n            R=max(R,A[i].d);\n        }\n    printf(\"%d\\n\",Binary_search(R-L,R+1));//\u4e8c\u5206\u7b54\u6848\n    return 0;\n}\n```\n\n\u597d\u4e86,\u5230\u8fd9\u91cc\u5176\u5b9e\u5c31\u6ca1\u4ec0\u4e48\u4e86,\u672c\u9898\u5df2\u7ecf\u5dee\u4e0d\u591a\u8bb2\u5b8c\u4e86\n\n\u9644\u52a0\u4e00\u4e2a\u94fe\u63a5,\u8fd9\u4e2a\u94fe\u63a5\u4e3b\u8981\u662f\u8bb2\u5dee\u5206\u7684(\u5305\u542b\u5dee\u5206\u548c\u6811\u4e0a\u5dee\u5206)\n\n\u672c\u4eba\u8ba4\u4e3a\u8bfb\u5b8c\u4e4b\u540e\u53d7\u76ca\u532a\u6d45,\u63a8\u8350\u5927\u5bb6\u53bb\u770b\u4e00\u770b\n\n\u94fe\u63a5:  [dalao\u7684\u535a\u5ba2](https://www.cnblogs.com/ice-wing/p/7709311.html)\n\n~~(\u53cd\u6b63\u81f3\u5c11\u6211\u7684\u4e71\u641e\u7b97\u6cd5\u60f3\u5230\u4e86\u91cc\u9762\u8bb2\u7684\u6811\u4e0a\u5dee\u5206)~~\n\n\u6700\u540e,\u611f\u8c22\u4f60\u7684\u9605\u8bfb!\n\n~~(\u65e0\u803b\u7684)~~\u63a8\u4e00\u6ce2\u6211\u7684blog:\n\nhttps://www.luogu.org/blog/new2zy/\n\n\u62dc\u62dc~~~\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1537019405,
        "uid": 60359,
        "name": "___new2zy___",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "# \u5199\u7bc7\u9898\u89e3\u9020\u798f\u4eba\u7c7b\n **\u9898\u610f**\uff1a\u7ed9\u4f60\u4e00\u68f5\u6811\u548c\u51e0\u6761\u8def\u5f84\uff0c\u4f60\u53ef\u4f7f**\u4efb\u610f\u4e00\u6761\u8fb9\u6743\u503c\u53d8\u4e3a0**\uff0c\u6c42\u5982\u4f55\u4f7f\u5f97**\u6700\u957f\u8def\u5f84\u6700\u77ed**\uff0c\u8f93\u51fa\u5b83\u7684\u957f\u5ea6\u3002\n\n### \u9996\u5148\uff0c\u6211\u4eec\u770b\u770b\u600e\u4e48\u5f97\uff08\u9a97\uff09\u90e8\u5206\u5206\n\n### 20pts \uff08m=1\uff09\n\n\u627e\u51fa\u8fd9\u6761\u8def\u4e2d\u6700\u957f\u7684\u8fb9\uff0c\u8f93\u51fa\u957f\u5ea6\u51cf\u53bb\u8fb9\u957f\u3002\u3002\u3002\n\n\u592a\u6c34\u4e86\u3002\u3002\u3002\n\n\n### \uff1f\uff1f\uff1f\uff08\u4e0d\u77e5\u51e0\u5206\uff09pts\n\n\u66b4\u529b\u5220\u8fb9\uff0c\u5220\u5b8c\u7edf\u8ba1\u6bcf\u6761\u8def\u5f84\u957f\u5ea6\uff0c\u590d\u6742\u5ea6$O(n^2m)$\n\n### \u52a0\u4e2a\u5c0f\u4f18\u5316\uff0c\n~~\uff08\u4e0d\u8fc7\u53ea\u662f\u5e38\u6570\u4f18\u5316\uff09~~\n\n\u5728**\u6700\u4f18\u89e3**\u4e2d\uff0c\u9009\u62e9\u6e05\u96f6\u7684\u8fb9\u5fc5\u7136\u5728**\u6700\u957f\u8def\u5f84**\u4e0a\u3002\n\n\u5f88\u660e\u663e\uff0c\u4e0d\u6e05\u96f6\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u90a3\u4e48**\u6700\u957f\u7684\u8fd8\u662f\u8fd9\u6761\u8fb9**\u554a\u3002 \n\n\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7ed3\u8bba\uff0c\u5728\u6ee1\u5206\u7b97\u6cd5\u4e2d\u4f1a\u5f88\u597d\u4f53\u73b0\u3002\n\n\n\n**\u671f\u671b\u5f97\u5206\uff1a25pts**\n\n\n------------\n\n\n### \u5bf9\u4e8e\u94fe\u7684\u60c5\u51b5\n\n\u65e2\u7136\u662f\u94fe\u5417\uff0c\u7edf\u8ba1\u957f\u5ea6\uff0c\u4fee\u6539\u8fb9\u6743\uff08\u522b\u5fd8\u6539\u56de\u6765\uff09\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\u3002\n\n\u4f60\u53ef\u4ee5\u524d\u7f00\u548c\u7ef4\u62a4\uff08\u590d\u6742\u5ea6$O(n(n+m))$\uff0c\u4fee\u6539\u8fd8\u8981$O(n)$)\n\n\u5f53\u7136\uff0c~~\u5982\u679c\u4f60\u5f88\u5f3a~~\uff0c\u4e5f\u53ef\u4ee5\u641e\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u53d8\u6210$log(n)$\uff0c\u590d\u6742\u5ea6\u53d8\u6210$O(nlognm)$\uff0c\u53ef\u901a\u8fc7\u6240\u6709\u94fe\u7684\u6570\u636e\u3002\n\n\n## \u9001\u5206\u6bb5\u7ed3\u675f\u3002\u3002\u3002\n\n\uff08\u53ef~~\u778e~~\u641e\u5230**60pts**\u5de6\u53f3\uff09\n\n\n## \u5f00\u59cb\u6b63\u89e3\n\n\u4ece\u9898\u9762\u4e0a\u770b \u201c**\u6700\u957f\u8def\u5f84\u6700\u77ed**\u201d\uff0c\u8fd9\u4e0d\u5c31\u662f\u4e2a**\u4e8c\u5206\u7b54\u6848**\u5417\uff1f\uff08~~\u522b\u544a\u8bc9\u6211\u4f60\u6ca1\u60f3\u5230~~\uff09\n\n\u7531\u4e8e\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a,$x$\u6e05\u96f6\u4e00\u6761\u8fb9\u80fd\u4f7f\u6700\u957f\u8def\u5f84$<=x$\uff0c\u90a3\u4e48\u5bf9\u4e8e**\u4efb\u610f**$y>=x$,\u5fc5\u7136\u6e05\u96f6\u4e00\u6761\u8fb9\u80fd\u4f7f\u6700\u957f\u8def\u5f84$<=y$\uff0c\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u53ef\u4e8c\u5206\u6700\u957f\u8def\u5f84\u957f\u5ea6\u3002\n\n### \u90a3\u4e48\u95ee\u9898\u53c8\u6765\u4e86\n\n\u600e\u4e48\u5224\u65ad\u6e05\u96f6\u4e00\u6761\u8fb9\u80fd\u5426\u6ee1\u8db3\u9650\u5b9a\u957f\u5ea6$mid$\u5462\uff1f\n\n\u6709\u4ee5\u4e0b\u4e24\u70b9\n\n$1.$\u53ea\u8003\u8651\u957f\u5ea6$>=mid$\u7684\u8def\u5f84\uff08\u79f0\u4e3a\u5927\u8def\u5f84\uff09**\u80fd\u5426\u5728\u5220\u8fb9\u540e\u6ee1\u8db3\u8981\u6c42**\u3002\n\n$Q$\uff1a\u4e3a\u4ec0\u4e48\u53ea\u7edf\u8ba1\u5927\u8def\u5f84\uff1f\n\n$A$\uff1a\u5c0f\u4e8e$mid$\u7684\u8fb9\u5fc5\u7136\u4e0d\u4f1a\u5bf9\u5224\u65ad\u4ea7\u751f\u5f71\u54cd\u3002\u4f60\u60f3\u8fd9\u4e9b\uff0c\u5c0f\u8def\u5f84\u672c\u6765\u5c31\u77ed\uff0c\u82e5\u4e00\u6761\u8fb9\u88ab\u6e05\u96f6\u4e86\uff0c\u4e0d\u66f4\u77ed\u4e86\u5417\uff1f\n\n$2.$\u8981\u6e05\u53ea\u60c5**\u88ab\u6240\u6709\u5927\u8def\u5f84\u7ecf\u8fc7**\u4e14**\u957f\u5ea6\u5c3d\u91cf\u957f**\u7684\u8fb9\n\n$2.Q$\uff1a\u4e3a\u4ec0\u4e48\u9009\u62e9\u6e05\u96f6\u8fd9\u6837\u7684\u8fb9\u5462\u3002\n\n$A$\uff1a\u82e5\u6709\u4e00\u6761\u5927\u8def\u5f84**\u6ca1\u7ecf\u8fc7**\u8be5\u8fb9\uff0c\u5219\u5c31\u7b97**\u5176\u4ed6\u5927\u8def\u5f84**\u51cf\u53bb\u8be5\u8fb9\u7684\u957f\u5ea6**\u5168\u90fd**$length<=mid$\uff0c\u8fd9\u6761\u8fb9\u8fd8\u662f$length>=mid$\uff0c\u4e0d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u800c\u4e14\uff0c\u8981\u6e05\u5f53\u7136\u5c3d\u91cf\u6e05**\u957f**\u7684\u554a\u3002\n\n#### \u90a3\u4e48\u7b97\u6cd5\u547c\u4e4b\u6b32\u51fa\u4e86\uff0c\n\n\n\u6211\u4eec\u5148\u5927\u5230\u5c0f\u5bf9\u8def\u5f84\u957f\u5ea6\uff08$length$)\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u4e8c\u5206\u6700\u77ed\u8def\u5f84 \u957f\u5ea6\uff0c$r$\u7684**\u4e0a\u9650**\u53ef\u8bbe\u4e3a\u6700**\u957f**\u8def\u5f84\u7684\u957f\u5ea6\uff0c\n\n\u5224\u65ad\u662f\u5426\u5f53\u524d$mid$\u53ef\u884c\u65f6\uff0c\u7edf\u8ba1\u6240\u6709\u957f\u5ea6**\u5927\u4e8e**\u8fd9\u4e2a$mid$\u7684\u8def\u5f84\uff0c\n\n\u6211\u4eec\u7edf\u8ba1**\u6bcf\u6761\u8fb9**\u88ab\u8fd9\u4e9b**\u5927\u8def\u5f84**\uff08\u957f\u5ea6$>=mid$\u7684\u8def\u5f84\uff09**\u7ecf\u8fc7\u7684\u6b21\u6570**$sum$\uff0c\n\n\u7edf\u8ba1\u88ab**\u6240\u6709\u5927\u8def\u5f84**\u7ecf\u8fc7\u7684\u8fb9\uff0c\u627e\u51fa\u5176\u4e2d\u8fb9\u6743**\u6700\u5927**\u7684\u8fb9\uff0c\n\n\u770b\u770b**\u6700\u957f\u8def\u5f84**\uff08\u6392\u597d\u5e8f\u4e86\uff09\u51cf\u53bb**\u6700\u5927**\u8fb9\u6743\u662f\u5426$<=mid$\uff0c\u6210\u7acb\uff0c\u8fd4\u56de$true$,\u5426\u5219\u8fd4\u56de$false$\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u7edf\u8ba1\u7ecf\u8fc7\u6b21\u6570\uff0c\u5dee\u5206\u5c31\u597d\u4e86\u3002\n\n\u4e0d\u4f1a\u5dee\u5206\u70b9\u8fd9\u91cc[\u5dee\u5206](https://www.cnblogs.com/ice-wing/p/7709311.html)\n\n\n\n\u6811\u4e0a\u8fb9\u5dee\u5206\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5148\u7528\u6bcf\u6761\u8fb9\u79cd\u8f83\u6df1\u7684\u8282\u70b9\u5bf9\n\u5e94\u6bcf\u6761\u8fb9\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u79cd\u5bf9\u5e94\u662f\u60df\u4e00\u7684\uff0c\u7136\u540e\u8981\u7edf\u8ba1\u6b21\n\u6570\u65f6\uff0c\u5728\u6bcf\u6761\u8def\u5f84\u8d77\u70b9$s$\u7684$sum[s]+1$,\u7ec8\u70b9$t$\u7684$sum[t]+1$,$sum[lca(s,t)]-2$,\u518d\u505a\u4e00\u904d\u6df1\u641c\uff0c\u7528$sum[x]+=sum[y]$($x$\u4e3a\u7236\uff0c$y$\u4e3a\u5b50\uff09\uff0c\u53ef\u6c42\u51fa\u8be5\u8282\u70b9\u5bf9\u5e94\u8fb9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\uff0c\u5177\u4f53\u770b\u6211\u5b89\u5229\u7684[\u535a\u5ba2](https://www.cnblogs.com/ice-wing/p/7709311.html)\u3002\n\n\u590d\u6742\u5ea6$O((n+m)log(maxlength))$\n\n\u7ed9\u4e2a\u6811\u4e0a\u8ddd\u79bb\u516c\u5f0f\uff08$dis$\u662f\u8be5\u8282\u70b9\u4e8e\u6839\u8282\u70b9$1$\u7684\u8ddd\u79bb\uff09\n\n$dist(u,v)=dis(u)+dis(v)-dis(lca(u,v))*2$\n\n$lca$\u7528\u500d\u589e\u5199\u7684\n\n```\n#include<bits/stdc++.h>\n#define LL long long\n#define inf LONG_LONG_MAX\n#define re register\n#define he(x) for(register int i=head[x];i;i=e[i].nxt)\nusing namespace std;\nint n,m,sum[300100],lg[300010],f[300010][20],dep[300010],head[600010],tot;\nint l,r,len[300010],val[300010],mid,ans;\nstruct CCF{\n\tint nxt,to,val;\n}e[600010];\nstruct IOI{\n\tint u,v,dis,lca;\n}p[300010];\ntemplate <class frd> inline void read(frd &a){\n    bool f=0;a=0;char ch=getchar();\n    while(ch<48||ch>57){if(ch=='-')f=1;ch=getchar();}\n    while(ch>=48&&ch<=57)a=(a<<1)+(a<<3)+(ch^48),ch=getchar();\n    if(f)a=-a;\n}\ntemplate<typename T>inline void print(T x,char c='\\n'){\n    static int buf[40];\n    if(x==0){\n        putchar('0');\n        putchar(c);\n        return;\n    }\n    if(x<0)putchar('-'),x=-x;\n    for(buf[0]=0;x;x/=10)buf[++buf[0]]=(x%10^48);\n    while(buf[0])putchar(buf[buf[0]--]);\n    putchar(c);\n}\ninline bool cmp(IOI ttt,IOI kkk){\n\treturn ttt.dis>kkk.dis;\n}\ninline void add(int x,int y,int z){\n\te[++tot].val=z;\n\te[tot].to=y;\n\te[tot].nxt=head[x];\n\thead[x]=tot;\n}\nvoid dfs1(int x,int fa){\n\tf[x][0]=fa;\n\tdep[x]=dep[fa]+1;\n\tfor(int i=1;(1<<i)<=dep[x];i++){\n\t\tf[x][i]=f[f[x][i-1]][i-1];\n\t}\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint y=e[i].to;\n\t\tif(y==fa)continue;\n\t\tlen[y]=len[x]+e[i].val;\n\t\tval[y]=e[i].val;\n\t\tdfs1(y,x);\n\t}\n}\ninline int lca(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y);\n\twhile(dep[x]>dep[y])\n\t\tx=f[x][lg[dep[x]-dep[y]]-1];\n\tif(x==y)return x;\n\tfor(int i=lg[dep[x]]-1;i>=0;i--)\n\t\tif(f[x][i]!=f[y][i]){\n\t\t\tx=f[x][i];\n\t\t\ty=f[y][i];\n\t\t}\n\treturn f[x][0];\n}\nvoid dfs2(int x,int fa){\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint y=e[i].to;\n\t\tif(y==fa)continue;\n\t\tdfs2(y,x);\n\t\tsum[x]+=sum[y];\n\t}\n}\ninline bool check(int lim){\n\tint cnt=0,maxn=0;\n\tmemset(sum,0,sizeof(sum));\n\tfor(int i=1;i<=m;i++){\n\t\tif(p[i].dis<=lim)break;\n\t\tsum[p[i].u]++;\n\t\tsum[p[i].v]++;\n\t\tsum[p[i].lca]-=2;\n\t\tcnt++;\n\t}\n\tdfs2(1,0);\n\tfor(int i=1;i<=n;i++){\n\t\tif(sum[i]==cnt)\n\t\t\tmaxn=max(maxn,val[i]);\n\t}\n\treturn p[1].dis-maxn<=lim;\n}\nint main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tread(n);read(m);\n\tfor(int i=1;i<n;i++){\n\t\tint u,v,w;\n\t\tread(u);read(v);read(w);\n\t\tl=max(l,w);\n\t\tadd(u,v,w);add(v,u,w);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tlg[i]=lg[i-1]+((1<<lg[i-1])==i);\n\tdfs1(1,0);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;\n\t\tread(p[i].u);read(p[i].v);\n\t\tp[i].lca=lca(p[i].u,p[i].v);\n\t\tp[i].dis=len[p[i].u]+len[p[i].v]-(len[p[i].lca]<<1);\n\t\tr=max(r,p[i].dis);\n\t}\n\tsort(p+1,p+m+1,cmp);\n\tl=r-l;\n\twhile(l<=r){\n\t\tmid=(l+r)>>1;\n\t\tif(check(mid)){\n\t\t\tans=mid;\n\t\t\tr=mid-1;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\tcout<<ans;\n\tfclose(stdin);fclose(stdout);\n    return 0;\n}\n```\n\n# \u70b9\u6ce2\u8d5e\u518d\u8d70\u5427QWQ\n",
        "postTime": 1570882809,
        "uid": 128882,
        "name": "cyy233",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u91cc\u9762\u7684\u6811\u5256\u6253\u7684\u4e0d\u592a\u597d\u770b\uff0c\u6211\u5c31\u53d1\u4e2a\u5199\u5f97\u597d\u770b\u70b9\u7684  \n\u800c\u4e14\u4fdd\u8bc1\u8bb2\u89e3\u6e05\u6670  \n\u505a\u8fd9\u9053\u9898\u4f60\u9700\u8981\u5b66\u4f1a  \n\u6811\u94fe\u5256\u5206-\u8fb9\u8f6c\u70b9\uff0c\u6c42LCA\u64cd\u4f5c\uff0c\u94fe\u5256\u5206  \n\u7ebf\u6bb5\u6811-\u5efa\u6811\u4ee5\u53ca\u67e5\u8be2\u548c\u64cd\u4f5c  \n\u6811\u4e0a\u5dee\u5206  \n\u4e8c\u5206\u64cd\u4f5c  \n\u505a\u8fd9\u9053\u9898\u5bf9\u672c\u4eba\u4e5f\u662f\u79cd\u6311\u6218\uff0c\u81ea\u5df1yy\u51fa\u4e86\u4e24\u79cd\u7b97\u6cd5-\u6811\u4e0a\u5dee\u5206\uff0c\u8fb9\u8f6c\u70b9    \n\u597d\u4e86\uff0c\u9898\u610f\u5c31\u662f\u7ed9\u4f60\u4e00\u68f5n\u4e2a\u70b9\u7684\u6811\uff0c\u8fb9\u5e26\u6743\uff0c\u6709m\u6761\u94fe\uff0c\u8981\u4f60\u6c42\u53bb\u6389\u4e00\u6761\u8fb9\u540e\u7684\u6700\u957f\u94fe\u3002  \n\u6700\u5bb9\u6613\u60f3\u5230\u7684\u662f\u66b4\u529b\u679a\u4e3e\u8fb9\uff0c\u4e00\u6761\u6761\u5220\u53bb\u540e\u6bd4\u8f83\u3002  \n\u7136\u540e\uff0c\u518d\u89c2\u5bdf\u4e00\u4e0b\uff0c\u9898\u76ee\u53ea\u662f\u8ba9\u6211\u4eec\u6c42\u4e00\u4e2a\u7b54\u6848-\u53bb\u8fb9\u540e\u6700\u957f\u94fe  \n\u5219\u5176\u662f\u6ee1\u8db3\u5355\u8c03\u6027\u7684\uff0c\u56e0\u4e3a\u5728\u539f\u6765\u66f4\u77ed\u7684\u65f6\u95f4\u80fd\u505a\u5230\uff0c\u90a3\u4e48\u66f4\u957f\u7684\u65f6\u95f4\u4e5f\u662f\u4e00\u5b9a\u53ef\u4ee5\u505a\u5230\u7684\u3002  \n\u597d\u4e86\uff0c\u4e8c\u5206\u51fa\u4e86\u7b54\u6848\u540e\u600e\u4e48\u505a\uff1f\u800c\u4e14\u5e94\u8be5\u5982\u4f55\u786e\u5b9a\u4e8c\u5206\u57df\u5462\uff1f\n## \u9884\u5904\u7406\u51fa\u6bcf\u6761\u94fe\u7684\u957f\u5ea6\uff01  \n\u8fd9\u5c31\u9700\u8981\u6811\u94fe\u5256\u5206\u7684\u8fb9\u8f6c\u70b9\u64cd\u4f5c\u4e86\u3002  \n\u6211\u81ea\u5df1\u662f\u8fd9\u6837yy\u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\u662f\u6709\u5f88\u591a\u7684\uff08\u4e0d\u5305\u62ec\u91cd\u513f\u5b50\uff09\uff0c\u800c\u7236\u4eb2\u53ea\u6709\u4e00\u4e2a  \n\u6240\u4ee5\u82e5\u662f\u5728\u6811\u5256dfs1\u4e2d\uff0c\u628a\u8fb9\u6743\u653e\u5230\u66f4\u6df1\u7684\u70b9\u4e0a\u5c31\u4e0d\u4f1a\u91cd\u590d\u4e86  \n\u8fd9\u91cc\uff0c\u5c31\u53ef\u4ee5\u5efa\u4e00\u4e2ach\u6570\u7ec4\uff0c\u4ee3\u8868\u5f53\u524d\u70b9\u6240\u5e26\u6743\u3002\u7136\u540e\u5728dfs2\u4e2d\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u521d\u59cb\u6570\u7ec4\u7684\u5efa\u7acb\uff0c\u8fd9\u6837\u5c31\u884c\u4e86  \n```cpp\nid[u]=++num,a[num]=ch[u],top[u]=t;\n```\n\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff01  \n\u7136\u540e\uff0c\u5c31\u53ea\u8981\u67e5\u8be2\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd8\u9700\u6ce8\u610f\u4e00\u70b9\uff0c\u5c31\u662flca\u7684\u503c\u662f\u4e0d\u80fd\u52a0\u7684\uff0c\u56e0\u4e3a\u5176\u6743\u503c\u4e0d\u5c5e\u4e8e\u5f53\u524d\u8def\u5f84\uff08\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\uff09  \n\n\n\n------------\n\n\u597d\u4e86\uff0c\u7136\u540e\u4f60\u662f\u4e0d\u662f\u60f3\u8fd9\u6837\u5b9a\u4e49l\uff0cr\uff1f\n```cpp\nl=ans[1].v,r=ans[m].v\n```\n\u8fd9\u6837\u4e8c\u5206\u5c31\u4f1a\u6709\u4e09\u4e2a\u70b9\u8fc7\u4e0d\u53bb\uff0c\u56e0\u4e3a\u4f60\u9650\u5236\u4e86\u4ed6\u7684\u53d1\u6325  \n\u522b\u4eba\u8bf4\u4e0d\u5b9a\u51cf\u4e00\u6761\u8fb9\u6743\u503c\u53ef\u4ee5\u52300\u5462\uff1f  \n\n\n------------\n\u7406\u89e3\u4e86\u4e4b\u540e\uff0c\u518d\u6765\u770b\u5982\u4f55check,\u6211\u4eec\u53ef\u4ee5\u5c06\u5927\u4e8e\u7b54\u6848\u7684\u94fe\u8bb0\u5f55\u5176\u7ecf\u8fc7\u7684\u8fb9\uff0c\u7136\u540e\u5c06\u8fb9\u7ecf\u8fc7\u6b21\u6570\u7edf\u8ba1\u4e0b\u6765  \n\u53d6\u6b21\u6570\u7b49\u4e8e\u5927\u4e8e\u7b54\u6848\u7684\u94fe\u7684\u6570\u91cf\u7684\u8fb9\u7684\u6700\u5927\u503c\uff0c\u7528maxlen\u51cf\u53bb\uff0c\u82e5\u5c0f\u4e8e\u7b54\u6848\uff0c\u5219\u6210\u7acb\u3002  \n\u597d\u4e86\uff0c\u6211\u76f8\u4fe1\u6709\u5f88\u591a\u4eba\u770b\u5230\u8fd9\u91cc\u4f1a\u53d1\u73b0\u6211\u6253\u7684\u662f\u66b4\u529b\uff0c\u6240\u4ee5\u4e3a\u4e86\u4f18\u5316\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u64cd\u4f5c\u6765\u7edf\u8ba1\u8fb9\u7684\u7ecf\u8fc7\u6b21\u6570\u5373\u53ef  \n## \u6811\u4e0a\u5dee\u5206\uff01\n\u5177\u4f53\u600e\u4e48\u505a\uff1f\u6211yy\u51fa\u4e86\u79cd\u65b9\u6cd5\uff0c\u5f53\u524d\u94fe\u7684\u5de6\u53f3\u7aef\u70b9++\uff0c\u5c06lca\u90e8\u5206-2\uff0c\u7136\u540e\u8dd1\u904ddfs\u5012\u5e8f\uff0c\u5c06\u513f\u5b50\u7684\u7ecf\u8fc7\u6570\u91cf\u52a0\u5230\u7236\u4eb2\u4e0a  \n\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e86\u8bf6\uff01  \n\u597d\u4e86\uff0c\u82e5\u662f\u5177\u6709\u6811\u5256\u6280\u5de7\u7684\u540c\u5b66\uff0c\u770b\u5230\u6b64\u5904\u5df2\u7ecf\u53ef\u4ee5\u56de\u53bb\u6253\u4ee3\u7801\u4e86\n\n------------\n\n\u82e5\u662f\u4e0d\u4f1a\u561b\uff0c\u7ed9\u4f60\u4eec\u63a8\u8350banananana\u5927\u795e\u7684[\u535a\u5ba2](https://www.cnblogs.com/George1994/p/7821357.html)\n\n```cpp\n#include<bits/stdc++.h>\n#define N 300005\n#define M 600005\nusing namespace std;\nint n,m;\nint nex[M],to[M],val[M],head[N],cnt;\nint f[N],sum[N<<2],a[N],li,ro,tot,rans,rnum,ret,mlen;\nint d[N],siz[N],fa[N],son[N],top[N],id[N],ch[N],num,maxlen;\nstruct daan\n{\n\tint v,qx,qy,lca;\n\tbool operator < (const daan &A) const { return v<A.v; }\n}ans[N];\ninline int Mx(int x,int y){return x>y?x:y;}\ninline int Mi(int x,int y){return x<y?x:y;}\ninline void swp(int &x,int &y){int k=x;x=y;y=k;}\ninline void add(int u,int v,int w)\n{\n\tto[++cnt]=v;val[cnt]=w;nex[cnt]=head[u];head[u]=cnt;\n\tto[++cnt]=u;val[cnt]=w;nex[cnt]=head[v];head[v]=cnt;\n}\ninline int read()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch>'9'||ch<'0')ch=getchar();\n\twhile(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x;\n}\nvoid build(int l,int r,int rt)\n{\n\tif(l==r){sum[rt]=a[l];return;}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,rt<<1);\n\tbuild(mid+1,r,rt<<1|1);\n\tsum[rt]=sum[rt<<1]+sum[rt<<1|1];\n}\nint query(int l,int r,int rt)\n{\n\tif(r<li||l>ro) return 0;\n\tif(li<=l&&r<=ro) return sum[rt];\n\tint mid=(l+r)>>1;\n\treturn query(l,mid,rt<<1)+query(mid+1,r,rt<<1|1);\n}\nvoid dfs(int u)\n{\n\tsiz[u]=1;\n\tfor(int i=head[u];i;i=nex[i])\n\t{\n\t\tif(to[i]!=fa[u])\n\t\t{\n\t\t\tch[to[i]]=val[i],d[to[i]]=d[u]+1;fa[to[i]]=u;dfs(to[i]);siz[u]+=siz[to[i]];\n\t\t\tif(siz[to[i]]>siz[son[u]]) son[u]=to[i];\n\t\t}\n\t}\n}\nvoid dfs2(int u,int t)\n{\n\ttop[u]=t;id[u]=++num,a[num]=ch[u];\n\tif(son[u]) dfs2(son[u],t);\n\telse return;\n\tfor(int i=head[u];i;i=nex[i]) if(to[i]!=son[u]&&to[i]!=fa[u]) dfs2(to[i],to[i]);\n}\ninline void LCA(int x,int y)\n{\n\t++tot;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]<d[top[y]]) swp(x,y);\n\t\tli=id[top[x]],ro=id[x];ans[tot].v+=query(1,n,1);\n\t\tx=fa[top[x]];\n\t}\n\tif(d[x]>d[y]) swp(x,y);ans[tot].lca=x;\n\tli=id[son[x]],ro=id[y];ans[tot].v+=query(1,n,1);\n}\nvoid dfs3(int u,int ff)\n{\n\tfor(int i=head[u];i;i=nex[i])\n\t{\n\t\tif(to[i]!=ff)\n\t\t{\n\t\t\tdfs3(to[i],u);\n\t\t\tf[u]+=f[to[i]];\n\t\t}\n\t}\n\tif(f[u]==rnum&&a[id[u]]>ret) ret=a[id[u]];\n}\ninline bool check(int tt)\n{\n\tint i;rnum=0,ret=0;\n\tmemset(f,0,sizeof(f));\n\tfor(i=m;i>=1;--i)\n\t{\n\t\tif(ans[i].v<=tt) break;\n\t\telse ++f[ans[i].qx],++f[ans[i].qy],--f[ans[i].lca],--f[ans[i].lca],++rnum;\n\t}if(i==m) return true;\n\tdfs3(1,0);\n\treturn maxlen-ret<=tt;\n}\nint solve()\n{\n\tsort(ans+1,ans+tot+1);\n\tint l=0,r=ans[tot].v;maxlen=ans[tot].v;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)) rans=mid,r=mid-1;\n\t\telse l=mid+1;\n\t}\n\treturn rans;\n}\nint main()\n{\n\tn=read(),m=read();int x,y,z;\n\tfor(int i=1;i<n;++i) x=read(),y=read(),z=read(),add(x,y,z),mlen=Mi(mlen,z);\n\td[1]=1;dfs(1);dfs2(1,1);build(1,n,1);\n\tfor(int i=1;i<=m;++i) ans[i].qx=read(),ans[i].qy=read(),LCA(ans[i].qx,ans[i].qy);\n\tprintf(\"%d\\n\",solve());\n\treturn 0;\n}\n```  \n\u597d\u7684\uff0c\u56e0\u4e3a\u6709\u540c\u5b66\u53cd\u5e94\u8fd9\u4e2a\u6811\u5256\u5e38\u6570\u5927\uff0c\u6211\u5c31\u6539\u5c0f\u3002  \n\u8fd0\u7528\u6808\u6765\u5b9e\u73b0dfs2,\u7701\u53bb\u7ebf\u6bb5\u6811\u6c42\u94fe\u957f\uff0c\u52a0\u4e0afread\uff0c\u53d8\u4e3a\n## \u6811\u4e0a\u524d\u7f00\u548c\u52a0\u6811\u4e0a\u5dee\u5206  \n\u5e38\u6570\u5df2\u7ecf\u53ea\u6709430ms\u4e86\uff0c\u786e\u5b9a\u4e0d\u70b9\u8d5e\u5417\uff1f  \n~~\u7531\u4e8e\u672c\u4eba\u5199\u7684\u975e\u9012\u5f52\u6c42top\u70b8\u4e86\u53c2\u8003\u4e86\u6700\u4f18\u89e3\u7b2c\u4e00\u7bc7~~    \n\n```cpp\n#include<bits/stdc++.h>\n#define N 300005\n#define M 600005\nusing namespace std;\nint n,m;\nint nex[M],to[M],val[M],head[N],cnt;\nint f[N],q[N],a[N],tot,rans,rnum,ret,mlen;\nint d[N],siz[N],fa[N],son[N],top[N],dis[N],num,maxlen;\nstruct daan\n{\n    int v,qx,qy,lca;\n    bool operator < (const daan &A) const { return v<A.v; }\n}ans[N];\ninline int Mx(int x,int y){return x>y?x:y;}\ninline int Mi(int x,int y){return x<y?x:y;}\ninline void swp(int &x,int &y){int k=x;x=y;y=k;}\nstruct io\n{\n    char op[10000000],* s;\n    io(){fread(s=op,1,1<<26,stdin);}\n    inline int read()\n    {\n        register int u = 0;\n        while(*s<48) s++;\n        while(*s>32)\n            u=u*10+* s++ -48;\n        return u;\n    }\n}ip;\n#define read ip.read\ninline void add(int u,int v,int w)\n{\n    to[++cnt]=v;val[cnt]=w;nex[cnt]=head[u];head[u]=cnt;\n    to[++cnt]=u;val[cnt]=w;nex[cnt]=head[v];head[v]=cnt;\n}\nvoid dfs(int u)\n{\n    siz[u]=1;q[++q[0]]=u;\n    for(int i=head[u];i;i=nex[i])\n    {\n        if(to[i]!=fa[u])\n        {\n            a[to[i]]=val[i],dis[to[i]]=dis[u]+val[i],d[to[i]]=d[u]+1;fa[to[i]]=u,dfs(to[i]),siz[u]+=siz[to[i]];\n            if(siz[to[i]]>siz[son[u]]) son[u]=to[i];\n        }\n    }\n}\ninline int LCA(int x,int y)\n{\n    ++tot;\n    while(top[x]!=top[y])\n    {\n        if(d[top[x]]<d[top[y]]) swp(x,y);\n        x=fa[top[x]];\n    }\n    return d[x]<d[y]?x:y;\n}\ninline bool check(int tt)\n{\n    int i;rnum=0,ret=0;\n    memset(f,0,sizeof(f));\n    for(int i=m;i>=1;--i)\n    {\n        if(ans[i].v<=tt) continue;\n        else ++f[ans[i].qx],++f[ans[i].qy],--f[ans[i].lca],--f[ans[i].lca],++rnum;\n    }\n    for(i=n;i;i--)\n    {\n        f[fa[q[i]]]+=f[q[i]];\n        if(a[q[i]]>=maxlen-tt&&f[q[i]]==rnum) return 1;\n    }\n    return 0;\n}\nint solve()\n{\n    int l=maxlen-mlen,r=maxlen;\n    while(l<=r)\n    {\n        int mid=(l+r)>>1;\n        if(check(mid)) rans=mid,r=mid-1;\n        else l=mid+1;\n    }\n    return rans;\n}\nint main()\n{\n    n=read(),m=read();int x,y,z;\n    for(int i=1;i<n;++i) x=read(),y=read(),z=read(),add(x,y,z),mlen=Mx(mlen,z);\n    d[1]=1;dfs(1);\n    for(int i=1;i<=n;++i) top[q[i]]=q[i]==son[fa[q[i]]]?top[fa[q[i]]]:q[i];\n    for(int i=1;i<=m;++i) ans[i].qx=read(),ans[i].qy=read(),ans[i].lca=LCA(ans[i].qx,ans[i].qy),maxlen=Mx(maxlen,ans[i].v=(dis[ans[i].qx]+dis[ans[i].qy]-2*dis[ans[i].lca]));\n    printf(\"%d\\n\",solve());\n    return 0;\n}\n\n```\n",
        "postTime": 1537490651,
        "uid": 57972,
        "name": "caidd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "### \u8fd0\u8f93\u8ba1\u5212\n\u3000\u30004.29:\u4e8c\u5206\u7b54\u6848\u52a0\u6811\u4e0a\u5dee\u5206, \u4ee3\u7801\u5199\u5230\u4e00\u5927\u534a\u7a81\u7136\u84dd\u4e86\u2026\u2026\u554a\u554a\u554a\n\u3000\u30004.30:\u505a\u4e86\u4e00\u9053\u6811\u4e0a\u5dee\u5206\u7684[\u4f8b\u9898](https://www.luogu.org/problemnew/show/P3128)\u540e\u5f00\u59cb\u5199, \u7136\u540eA\u4e86, \u53ea\u662f\u6ca1\u5e38\u6570\u4f18\u5316\u5bfc\u81f4O2\u624d\u80fd\u901a\u8fc7.\n#### Solution\n\u3000\u3000\u9996\u5148\u9700\u8981**\u4e8c\u5206\u7b54\u6848**, \u56e0\u4e3a\u8981\u6c42\u6c42\u6700\u5c0f\u65f6\u95f4, \u7136\u800c\u53ef\u4ee5\u6839\u636e\u5355\u8c03\u6027\u53ef\u4ee5\u901a\u8fc7**\u4e8c\u5206\u4e00\u4e2a\u65f6\u95f4**\u6765\u5224\u5b9a\u8fd9\u4e2a\u65f6\u95f4\u80fd\u4e0d\u80fd\u6210\u7acb. \u4e5f\u5c31\u662f\u901a\u8fc7\u4e8c\u5206\u7b54\u6848\u5c06\u4e00\u4e2a**\u6c42\u7b54\u6848\u7684\u95ee\u9898**\u8f6c\u5316\u4e3a$\\log_{2}t_{\\max}$\u4e2a**\u5224\u5b9a\u6027\u95ee\u9898**.\n\n\u3000\u3000\u4e8c\u5206\u65f6\u95f4$T$\u4e4b\u540e\u7136\u540e\u5c31\u9700\u8981\u5224\u5b9a\u5728\u7ed9\u5b9a\u65f6\u95f4$T$\u4e4b\u5185\u80fd\u5426\u5b8c\u6210\u5de5\u4f5c.\u600e\u4e48\u5224\u5b9a\u5462?\u866b\u6d1e\u662f\u901a\u8fc7\u5c06\u67d0\u6761\u8fb9\u5220\u53bb\u6765\u51cf\u5c11\u8def\u5f84\u7684\u65f6\u95f4, \u5047\u8bbe\u5982\u679c\u6709m\u6761\u8def\u5f84\u7684\u65f6\u95f4\u5927\u4e8e$T$, \u90a3\u4e48\u5c31\u9700\u8981\u5c06\u8fd9$m$\u6761\u8def\u5f84\u4e0a\u7684\u4e00\u6761\u516c\u5171\u8fb9\u5220\u53bb, \u4f7f\u5f97\u8fd9$m$\u6761\u8def\u5f84\u65f6\u95f4\u90fd\u4f1a\u5c11\u4e8e$T$.\u5982\u679c\u5b58\u5728\u8fd9\u4e48\u4e00\u6761\u8fb9\u5219$T$\u662f\u5408\u6cd5\u7684.\n\n\u3000\u3000\u4e00\u79cd\u6734\u7d20\u7684\u601d\u8def\u662f\u8bb0\u5f55\u4e00\u6761\u8fb9\u5728\u51e0\u6761$m$\u4e2d\u7684\u8def\u5f84\u4e0a, \u53ef\u4ee5\u663e\u7136\u4f1a\u5f88\u6162. \u8fd9\u5c31\u9700\u8981\u901a\u8fc7\u6811\u4e0a\u5dee\u5206\u7684\u65b9\u5f0f\u6765\u5feb\u901f\u6c42\u51fa, (*\u6811\u4e0a\u5dee\u5206\u53ef\u4ee5\u5feb\u901f\u6c42\u51fa\u6811\u4e0a\u4e00\u70b9\u5728\u51e0\u6761\u7ed9\u5b9a\u8def\u5f84\u4e0a, \u4f8b\u5982[\u4f8b\u9898](https://www.luogu.org/problemnew/show/P3128)*).\n\n\u3000\u3000\u6811\u4e0a\u5dee\u5206\u662f\u8fd9\u4e48\u505a\u7684, \u5982\u679c\u6811\u4e0a\u4e00\u6761\u8def\u5f84\u4e3a$(a,b)$, \u4e14\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a$l$, \u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u53ef\u4ee5**\u88ab\u62c6\u6210\u662f$(a,l)$\u548c$(b,l)$\u4e24\u6761\u5b50\u4e0b\u800c\u4e0a\u7684\u8def\u5f84**.\u7136\u540e\u6839\u636e\u4e00\u822c\u5dee\u5206\u7684\u601d\u8def(**\u4e24\u4e2a\u70b9\u7684\u5dee\u503c\u8868\u793a\u4e24\u4e2a\u70b9\u88ab\u7ecf\u8fc7\u6b21\u6570\u7684\u5dee\u503c**), \u4e00\u6761\u8def\u5f84\u4e3a$(a,l)$, \u90a3\u4e48$a$\u4e0e\u5176\u513f\u5b50\u7684\u5dee\u503c\u5c31\u52a0\u4e00, $l$\u4e0e\u5176\u7236\u4eb2\u7684\u5dee\u503c\u51cf\u4e00.\u5728\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684dfs**\u4ece\u53f6\u5b50\u5230\u6839\u8282\u70b9**\u5c31\u80fd\u6c42\u51fa\u6bcf\u4e2a\u70b9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570(\u70b9\u88ab\u7ecf\u8fc7\u548c\u8fb9\u88ab\u7ecf\u8fc7\u5b9e\u9645\u4e0a\u662f\u76f8\u4f3c\u7684).\n\n\u3000\u3000\u5f53\u7136\u8fd8\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\u9700\u8981\u5927\u5bb6\u81ea\u5df1\u5199\u4ee3\u7801\u624d\u80fd\u628a\u63e1.\n#### Code\n```c++\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define N 600005\nusing std::swap;\nusing std::max;\nusing std::min;\n/***************************************************************/\nnamespace Graph{// \u547d\u540d\u7a7a\u95f4:\u56fe\n\tstruct Edge{int v,c,nxt;}e[N];// \u8fb9\n\tint head[N],tot;\n\tint n,k,MaxDistance// \u70b9\u6570, \u8def\u5f84\u6570, \u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6;\n\tint asdfghjkl[N];\n\tint f[N][20],come[N],dep[N],d[N];\n\tvoid AddEdge(int u,int v,int c){//\u52a0\u8fb9\n\t\te[++tot]=(Edge){v,c,head[u]};head[u]=tot;\n\t\te[++tot]=(Edge){u,c,head[v]};head[v]=tot;\n\t}\n\tvoid dfs(int x,int fa){//\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2, \u6df1\u5ea6\u548c\u4e0e\u6839\u8282\u70b9\u7684\u8ddd\u79bb, \u4e3a\u6c42lca\u505a\u51c6\u5907\n\t\tf[x][0]=fa,dep[x]=dep[fa]+1;\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint to=e[i].v;\n\t\t\tif(to==fa)continue;\n\t\t\td[to]=d[x]+e[i].c,asdfghjkl[to]=e[i].c;\n\t\t\tdfs(to,x);\n\t\t}\n\t}\n\tvoid init(){//lca\u7684\u9884\u5904\u7406\n\t\tfor(int i=1;i<=n;++i)MaxDistance=max(MaxDistance,d[i]);\n\t\tfor(int i=1;i<20;++i)\n\t\t\tfor(int j=1;j<=n;++j)\n\t\t\t\tf[j][i]=f[f[j][i-1]][i-1];\n\t}\n\tint\tLca(int u,int v){//\u6c42\u51fau\u4e0ev\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n\t\tif(dep[u]<dep[v])swap(u,v);\n\t\tfor(int i=19;i>-1;--i)\n\t\t\tif(dep[f[u][i]]>=dep[v])\n\t\t\t\tu=f[u][i];\n\t\tfor(int i=19;i>-1;--i)\n\t\t\tif(f[u][i]!=f[v][i])\n\t\t\t\tu=f[u][i],v=f[v][i];\n\t\tif(u!=v)return f[u][0];\n\t\treturn u;\n\t}\n\tint Fans(int x){//\u901a\u8fc7dfs\u6c42\u51fa\u4e00\u4e2a\u70b9\u88ab\u7ecf\u8fc7\u6b21\u6570\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tif(e[i].v==f[x][0])continue;\n\t\t\tcome[x]+=Fans(e[i].v);\n\t\t}\n\t\treturn come[x];\n\t}\n};\nusing namespace Graph;\n/**********************************************************/\nnamespace FindTheAns{\n\tint ans;//\u95ee\u9898\u7684\u7b54\u6848\n\tint s[N],t[N],lca[N],dis[N];//\u8bb0\u5f55\u4e0b\u6bcf\u6761\u8def\u5f84\u7684\u8d77\u70b9\u7ec8\u70b9\u548clca\u4ee5\u53ca\u957f\u5ea6.\n\tvoid AddVal(int i){//\u5dee\u5206\n\t\t++come[s[i]],++come[t[i]],come[lca[i]]-=2;\n\t}\n\tbool check(int mid){//\u5224\u5b9aT\u65f6\u95f4\u80fd\u5426\u5b8c\u6210\n\t\tmemset(come,false,sizeof(come));\n\t\tint maxl=0,to=0;\n\t\tfor(int i=1;i<=k;++i)\n\t\t\tif(dis[i]>mid)\n\t\t\t\tAddVal(i),maxl=max(maxl,dis[i]-mid),++to;//\u627e\u51fa\u5927\u4e8eT\u8def\u5f84\n\t\tFans(1);//\u6c42\u51fa\u6bcf\u4e2a\u70b9\u88ab\u7ecf\u8fc7\u6b21\u6570\n\t\tfor(int i=1;i<=n;++i)//\u904d\u5386\u6bcf\u4e2a\u70b9\u5efa\u8bbe\u866b\u6d1e\n\t\t\tif(come[i]>=to&&maxl<=asdfghjkl[i])//asdfghjkl\u662f\u70b9\u5bf9\u5e94\u8fb9\u7684\u65f6\u95f4\n\t\t\t\treturn ans=min(ans,mid);\n\t\treturn false;\n\t}\n\tint TwoPoint(){//\u4e8c\u5206\n\t\tint l=0,r=MaxDistance<<1,mid;ans=0x3f3f3f3f;//\u4e8c\u5206\u8fb9\u754c\u4e0d\u5b9c\u8fc7\u5927.\n\t\twhile(l<=r){\n\t\t\tmid=(l+r)>>1;\n\t\t\tif(check(mid))r=mid-1;\n\t\t\telse l=mid+1;\n\t\t}\n\t\treturn ans;\n\t}\n};using namespace FindTheAns;\n/********************************************************/\nint main(){\n\tscanf(\"%d%d\",&n,&k);int a,b,c;\n\tfor(int i=1;i<n;++i){\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tAddEdge(a,b,c);\n\t}\n\tdfs(1,0),init();\n\tfor(int i=1;i<=k;++i){\n\t\tscanf(\"%d%d\",&a,&b);lca[i]=Lca(a,b);s[i]=a,t[i]=b;\n\t\tdis[i]=d[a]+d[b]-2*d[lca[i]];//\u8def\u5f84\u7684\u957f\u5ea6\n\t}\n\tprintf(\"%d\\n\",TwoPoint());\n\treturn 0;\n}\n```",
        "postTime": 1524968089,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u6211\u53ef\u80fd\u662f\u552f\u4e00\u4e00\u4e2a\u76f4\u63a5\u628a\u7ebf\u6bb5\u6811\u5efa\u5728\u8fb9\u4e0a\u7684\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u62bd\u8c61\u4e00\u4e0b\uff1a\n\n\u5b9e\u9645\u5c31\u662f\u8ba9\u6211\u4eec\u6c42\uff1a\n\n\u4e00\u68f5\u6811\u4e0a\u6709m\u4e2a\u8def\u5f84\uff0c\u5982\u4f55\u8ba9\u4e00\u6761\u8fb9\u7684\u6743\u503c\u53d8\u4e3a\u96f6\u540e\uff0c\u6240\u6709\u8def\u5f84\u7684\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\n\n\u4e86\u89e3\u4e86\u8fd9\u4e2a\u63cf\u8ff0\u5f88\u7b80\u5355\u7684\u95ee\u9898\uff0c\u53d1\u73b0\u4ed6\u5e76\u4e0d\u7b80\u5355\uff01\uff01\uff01\n\n\u6211\u4eec\u5f88\u5bb9\u6613\u8003\u8651\u5230\u8981\u5220\u9664\u7684\u8fb9\u4e00\u5b9a\u5728\u6700\u957f\u8def\u5f84\u4e0a\uff0c\u8fd9\u4e2a\u7528\u53cd\u8bc1\u6cd5\u5f88\u5bb9\u6613\u8bc1\u660e\n\n\u65e2\u7136\u5982\u6b64\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u8003\u8651\u5230\uff1a\n\n\u5220\u9664\u8fc7\u540e\u7684\u6700\u957f\u8def\u5f84\u53ea\u80fd\u662f\u539f\u6765\u8def\u5f84\u51cf\u53bb\u8fd9\u6761\u8fb9\u6216\u8005\u4e0d\u5305\u542b\u8fd9\u6761\u8fb9\u7684\u6700\u957f\u8def\u5f84\uff0c\u53cd\u8bc1\u6cd5\u53ef\u77e5\n\n\u5373\n\n> ans=min(ans,max(maxlength-v[now],max(\u4e0d\u5305\u542bnow\u8fd9\u6761\u8fb9\u7684\u8def\u5f84\u96c6\u5408)))\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u601d\u8def\u53d8\u4e3a\u5982\u4f55\u627e\u5230**max(\u4e0d\u5305\u542bnow\u8fd9\u6761\u8fb9\u7684\u8def\u5f84\u96c6\u5408)**\n\n\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7528\u4e00\u4e2a\u6570\u7ec4**maxn[]**\u5b58\u4e0b\uff0c\u6bcf\u6b21\u5237\u65b0\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c**\u4e0d\u5305\u542bnow\u8fd9\u6761\u8fb9\u7684\u8def\u5f84\u96c6\u5408**\u4e0e$m$\u540c\u9636\uff0c\u8fb9\u6570\u4e0e$n$\u540c\u9636\n\n\u590d\u6742\u5ea6\u8fbe\u5230\u4e86$n \\times m$\uff0c\u663e\u7136\u8fc7\u4e0d\u4e86\n\n\u8003\u8651\u4f18\u5316\uff1a\n\n\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u8003\u8651\u6811\u94fe\u5256\u5206\uff0c\u5e76\u4e14\u7531\u4e8e\u9700\u8981\u8bb0\u5f55\u7684\u4fe1\u606f\u4e0e\u8fb9\u76f8\u5173\uff0c\u5c31\u76f4\u63a5\u6309\u8fb9\u5efa\u7ebf\u6bb5\u6811\n\n\u5173\u4e8e\u5177\u4f53\u5b9e\u73b0\u540e\u9762\u518d\u8bf4\uff0c\u6211\u4eec\u5148\u7406\u6e05\u601d\u8def\n\n\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u5176\u5256\u5206\u540e\uff0c\u5e94\u8be5\u4e3a\u591a\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\n\n\u7c7b\u4f3c\u4e8e\u4e0b\u56fe\uff1a\n\n![](https://s2.ax1x.com/2019/08/27/m4tugx.png)\n\n\u7ea2\u8272\u90e8\u5206\u8868\u793a\u5f53\u524d\u5904\u7406\u7684\u8def\u5f84\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u5f53\u524d\u8def\u5f84\u53ef\u80fd\u5bf9\u4e8e\u591a\u5c11\u6761\u8fb9\u6765\u8bf4\uff0c\u53ef\u80fd\u5bf9\u5176$maxn$\u6709\u5f71\u54cd\n\n\u5f88\u660e\u663e\uff0c\u9664\u53bb\u5b83\u81ea\u5df1\uff0c\u5269\u4e0b\u7684\u8fb9\u90fd\u6709\u5f71\u54cd\uff0c\u6240\u4ee5\u76f4\u63a5\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u66f4\u65b0$maxn$\n\n\u53ef\u4ee5\u53d1\u73b0\u64cd\u4f5c\u7684\u6bb5\u6570\u7406\u60f3\u4e0e$\\log_{2}n$\u540c\u9636\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e3a$m\\log_{2}n$\n\n\u52a0\u4e0a\u6811\u94fe\u5256\u5206\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u53d1\u73b0\n\n\u603b\u590d\u6742\u5ea6\u4e3aO($m\\log_{2}n$+$m\\log^2_{2}n$)\n\n\u601d\u8def\u7406\u5b8c\u4e86\uff0c\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u5728\u8fb9\u4e0a\u5efa\u7ebf\u6bb5\u6811\n\n\u9996\u5148\uff0c\u7531\u4e8e\u662f\u53cc\u5411\u8fb9\uff0c\u6211\u4eec\u8981\u62c6\u6210\u4e24\u4e2a\u5355\u5411\u8fb9\uff0c\u7136\u800c\u53c8\u9700\u8981\u6392\u9664\u65b9\u5411\u4e0d\u540c\u800c\u4f7f\u5f97\u540c\u4e00\u6761\u8fb9\u6709\u4e24\u4e2a\u7f16\u53f7\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u8bb0\u5f55\u539f\u6765\u7684\u7f16\u53f7\n\n\u5bf9\u4e8e\u4e4b\u540e\u7684\u4f7f\u7528\u6765\u8bf4\uff0c\u90fd\u4ee5\u539f\u6765\u7684\u7f16\u53f7\u4e3a\u51c6\n\n\u6211\u662f\u8fd9\u6837\u89e3\u51b3\u7684\uff1a\n\n```cpp\nvoid addedge(int x,int y)//yuan\u8868\u793a\u539f\u6765\u7684\u7f16\u53f7\n{\n  e[++num].to=y;\n  e[num].yuan=(num+1)/2;\n  e[num].next=head[x];\n  head[x]=num;\n  e[++num].to=x;\n  e[num].yuan=num/2;\n  e[num].next=head[y];\n  head[y]=num;\n}\n```\n\n\u6211\u4eec\u540c\u6837\u9700\u8981\u6539\u9020dfs1\u548cdfs2\n\n\u7531\u4e8e\u4e0e\u4e00\u822c\u7684\u6811\u94fe\u5256\u5206\u4e0d\u540c\uff0c\u6211\u4eec\u662f\u5728\u8fb9\u4e0a\u5efa\u6811\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u70b9\u7684fae\u548csone\n\n\u5206\u522b\u8868\u793a\u8fde\u5411\u7236\u4eb2\u7684\u8fb9\u548c\u8fde\u5411\u91cd\u513f\u5b50\u7684\u8fb9\n\n\u8fd9\u5728dfs1\u4e2d\u6c42\u51fa\n\n```cpp\nvoid dfs1(int u,int fa,int depth,int faedge)\n{\n  d[u]=depth;\n  f[u]=fa;\n  fae[u]=faedge;\n  size[u]=1;\n  for(int i=head[u];i;i=e[i].next)\n  {\n    if(e[i].to==fa)\n    {\n      continue;\n    }\n    dfs1(e[i].to,u,depth+1,e[i].yuan);\n    size[u]+=size[e[i].to];\n    if(size[e[i].to]>size[son[u]])\n    {\n      son[u]=e[i].to;\n      sone[u]=e[i].yuan;\n    }\n  }\n}\n```\n\n\u5bf9\u4e8edfs2\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u521d\u59cb\u5316id\n\n```cpp\nvoid dfs2(int u,int t)\n{\n  top[u]=t;\n  if(!son[u])\n  {\n    return ;\n  }\n  id[sone[u]]=++cnt;\n  dfs2(son[u],t);\n  for(int i=head[u];i;i=e[i].next)\n  {\n    if(e[i].to!=son[u]&&e[i].to!=f[u])\n    {\n    \tid[e[i].yuan]=++cnt;\n      dfs2(e[i].to,e[i].to);\n    }\n  }\n}\n```\n\n\u904d\u5386\u8def\u5f84\u65f6\u5b9e\u9645\u548c\u539f\u6765\u4e00\u6837\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\n\n1. \u904d\u5386d[top]\u5c0f\u7684\n2. \u904d\u5386\u540c\u4e00\u91cd\u94fe\u4e0a\u7684\n\n\u533a\u522b\u5728\u4e8e\u4e00\u4e2a\u662f\u4ecefae\u5230fae\uff0c\u4e00\u4e2a\u662fsone\u5230fae\n\n```cpp\nint query1(int x,int y)\n{\n  int ans=0;\n  while(top[x]!=top[y])\n  {\n    if(d[top[x]]<d[top[y]])\n    {\n      swap(x,y);\n    }\n    ans+=query(1,1,n-1,id[fae[top[x]]],id[fae[x]]);\n    x=f[top[x]];\n  }\n  if(x==y)\n  {\n  \treturn ans;\n  }\n  if(d[x]>d[y])\n  {\n    swap(x,y);\n  }\n  ans+=query(1,1,n-1,id[sone[x]],id[fae[y]]);\n  return ans;\n}\n```\n\n\n\n\u7136\u540e\u6ce8\u610f\u5230\u6211\u4eec\u8fd8\u9700\u8981\u67e5\u627e\u8def\u5f84\u957f\u5ea6\uff0c\u8fd9\u540c\u6837\u548cmaxn\u4e00\u8d77\u5728\u7ebf\u6bb5\u6811\u91cc\u5b9e\u73b0\n\n\u7ebf\u6bb5\u6811\u90e8\u5206\u5c31\u4e0d\u8fc7\u591a\u7684\u8bb2\u4e86\n\n\u4e0b\u9762\u51e0\u70b9\u6ce8\u610f\n\n1. \u8fb9\u53f7\u4ec0\u4e48\u65f6\u5019\u7528\u4ec0\u4e48\u4e0d\u8981\u5f04\u6df7\u4e86\n2. \u6ce8\u610f\u8fb9\u754c\n3. \u8def\u5f84x==y\u7684\u65f6\u5019\u9700\u8981\u5728\u67e5\u8be2\u7684\u65f6\u5019\u7279\u5224\n4. \u6ce8\u610f\u5bf9\u4e8e\u8fb9\u6765\u8bf4\u4e24\u8fb9\u7684\u7aef\u70b9\u4e0d\u80fd\u76f8\u540c\uff0c\u8fd9\u5fc5\u987b\u7279\u5224\n\n\u4e0b\u9762\u5c31\u76f4\u63a5\u4e0a\u5168\u90e8\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\n#define lson u<<1,l,mid\n#define rson u<<1|1,mid+1,r\n\nusing namespace std;\n\nstruct edge\n{\n  int to,next,yuan;\n}e[600010];\n\nstruct lian\n{\n\tint first,last;\n}li[300010];//\u4e0d\u9700\u8981\u8fd9\u4e48\u5927\uff0c\u56e0\u4e3a\u662flog\u7ea7\u522b\u7684\n\nint val[300010];\n\nint d[300010],f[300010],size[300010],son[300010],top[300010],id[300010];\n\nint cnt;\n\nint n,m;\n\nint sone[300010],fae[300010];\n\nint num,head[300010];\n\nstruct Tree\n{\n\tint val;\n\tint max,maxtag;//\u5176\u5b9e\u53ea\u8981\u4e00\u4e2amax\u5c31\u53ef\u4ee5\u89e3\u51b3\n}tree[300010*4];\n\nbool cmp(lian A,lian B)\n{\n\treturn A.first<B.first;\n}\n\nvoid addedge(int x,int y)\n{\n  e[++num].to=y;\n  e[num].yuan=(num+1)/2;\n  e[num].next=head[x];\n  head[x]=num;\n  e[++num].to=x;\n  e[num].yuan=num/2;\n  e[num].next=head[y];\n  head[y]=num;\n}\n\nvoid build(int u,int l,int r)\n{\n\ttree[u].val=0;\n\ttree[u].max=0;\n\ttree[u].maxtag=0;\n\tif(l==r)\n\t{\n\t\ttree[u].val=0;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lson);\n\tbuild(rson);\n\ttree[u].val=tree[u<<1].val+tree[u<<1|1].val;\n}\n\nvoid pushdown(int u)\n{\n\ttree[u<<1].max=max(tree[u].maxtag,tree[u<<1].max);\n\ttree[u<<1].maxtag=max(tree[u].maxtag,tree[u<<1].maxtag);\n\ttree[u<<1|1].max=max(tree[u].maxtag,tree[u<<1|1].max);\n\ttree[u<<1|1].maxtag=max(tree[u].maxtag,tree[u<<1|1].maxtag);\n\ttree[u].max=0;\n}\n\nvoid updata2(int u,int l,int r,int x,int k)\n{\n\tif(l==x&&r==x)\n\t{\n\t\ttree[u].val+=k;\n\t\treturn ;\n\t}\n\t\n\tint mid=(l+r)>>1;\n\t\n\tif(x<=mid) updata2(lson,x,k);\n\tif(x>mid) updata2(rson,x,k);\n\t\n\ttree[u].val=tree[u<<1].val+tree[u<<1|1].val;\n}\n\nvoid updata(int u,int l,int r,int x,int y,int k)\n{\n\tif(l>=x&&r<=y)\n\t{\n\t\ttree[u].max=max(k,tree[u].max);\n\t\ttree[u].maxtag=max(k,tree[u].maxtag);\n\t\treturn ;\n\t}\n\tif(tree[u].maxtag) pushdown(u);\n\t\n\tint mid=(l+r)>>1;\n\t\n\tif(x<=mid) updata(lson,x,y,k);\n\tif(y>mid) updata(rson,x,y,k);\n\ttree[u].max=max(tree[u<<1].max,tree[u<<1|1].max);\n}\n\nint query(int u,int l,int r,int x,int y)\n{\n\tif(l>=x&&r<=y)\n\t{\n\t\treturn tree[u].val;\n\t}\n\n\tint mid=(l+r)>>1;\n\n\tint ans=0;\n\n\tif(x<=mid) ans+=query(lson,x,y);\n\tif(y>mid) ans+=query(rson,x,y);\n\t\n\treturn ans;\n}\n\nint query2(int u,int l,int r,int x)\n{\n\tif(l==x&&r==x)\n\t{\n\t\treturn tree[u].max;\n\t}\n\tif(tree[u].max) pushdown(u);\n\n\tint mid=(l+r)>>1;\n\n\tif(x<=mid) return query2(lson,x);\n\tif(x>mid) return query2(rson,x);\n}\n\nvoid dfs1(int u,int fa,int depth,int faedge)\n{\n  d[u]=depth;\n  f[u]=fa;\n  fae[u]=faedge;\n  size[u]=1;\n  for(int i=head[u];i;i=e[i].next)\n  {\n    if(e[i].to==fa)\n    {\n      continue;\n    }\n    dfs1(e[i].to,u,depth+1,e[i].yuan);\n    size[u]+=size[e[i].to];\n    if(size[e[i].to]>size[son[u]])\n    {\n      son[u]=e[i].to;\n      sone[u]=e[i].yuan;//\u8bb0\u5f55\u539f\u7f16\u53f7\n    }\n  }\n}\n\nvoid dfs2(int u,int t)\n{\n  top[u]=t;\n  if(!son[u])\n  {\n    return ;\n  }\n  id[sone[u]]=++cnt;\n  dfs2(son[u],t);\n  for(int i=head[u];i;i=e[i].next)\n  {\n    if(e[i].to!=son[u]&&e[i].to!=f[u])\n    {\n    \tid[e[i].yuan]=++cnt;//\u4e00\u5b9a\u662f\u539f\u7f16\u53f7\n      dfs2(e[i].to,e[i].to);\n    }\n  }\n}\n\nvoid up1(int x,int y,int val)\n{\n\tint ct=0;\n\twhile(top[x]!=top[y])\n  {\n    if(d[top[x]]<d[top[y]])\n    {\n      swap(x,y);\n    }\n    li[++ct].first=id[fae[top[x]]];\n\t\tli[ct].last=id[fae[x]];\n    x=f[top[x]];\n  }\n  if(x!=y)\n  {\n  \tif(d[x]>d[y])\n  \t{\n  \t  swap(x,y);\n  \t}\n  \tli[++ct].first=id[sone[x]];\n\t\tli[ct].last=id[fae[y]];\n\t}\n  sort(li+1,li+ct+1,cmp);\n  if(li[1].first>1)//\u6ce8\u610f\u8d8a\u754c\n  {\n  \tupdata(1,1,n-1,1,li[1].first-1,val);\n\t}\n\tfor(int i=1;i<ct;i++)\n\t{\n\t\tif(li[i].last+1<=li[i+1].first-1)\n\t\t{\n\t\t\tupdata(1,1,n-1,li[i].last+1,li[i+1].first-1,val);\n\t\t}\n\t}\n\tif(li[ct].last<n-1)\n\t{\n\t\tupdata(1,1,n-1,li[ct].last+1,n-1,val);\n\t}\n}\n\nint query1(int x,int y)\n{\n\tint ans=0;\n  while(top[x]!=top[y])\n  {\n    if(d[top[x]]<d[top[y]])\n    {\n      swap(x,y);\n    }\n    ans+=query(1,1,n-1,id[fae[top[x]]],id[fae[x]]);\n    x=f[top[x]];\n  }\n  if(x==y)//\u7279\u5224\n  {\n  \treturn ans;\n\t}\n  if(d[x]>d[y])\n  {\n    swap(x,y);\n  }\n  ans+=query(1,1,n-1,id[sone[x]],id[fae[y]]);\n  return ans;\n}\n\nvoid work(int x,int y,int cost)\n{\n\tint ans=1e9;\n\tif(x==y)//\u7279\u5224\n\t{\n\t\tprintf(\"0\");\n\t\treturn ;\n\t}\n\tif(d[x]<d[y])\n\t{\n\t\tswap(x,y);\n\t}\n\twhile(d[x]!=d[y])\n\t{\n\t\tans=min(ans,max(cost-val[fae[x]],query2(1,1,n-1,id[fae[x]])));\n\t\tx=f[x];\n\t}\n\twhile(x!=y)\n\t{\n\t\tans=min(ans,max(cost-val[fae[x]],query2(1,1,n-1,id[fae[x]])));\n\t\tx=f[x];\n\t\tans=min(ans,max(cost-val[fae[y]],query2(1,1,n-1,id[fae[y]])));\n\t\ty=f[y];\n\t}\n\tprintf(\"%d\",ans);\n}\n\nint main()\n{\n  scanf(\"%d%d\",&n,&m);\n  for(int i=1;i<n;i++)\n  {\n    int x,y;\n    scanf(\"%d%d%d\",&x,&y,&val[i]);\n    addedge(x,y);\n  }\n  dfs1(1,0,1,0);\n  dfs2(1,1);\n  build(1,1,n-1);\n  for(int i=1;i<n;i++)\n  {\n  \tupdata2(1,1,n-1,id[i],val[i]);//\u4e0a\u4f20\u6bcf\u6761\u8fb9\u7684\u503c\n\t}\n  int maxcost=-1,maxx=0,maxy=0;\n  for(int i=1;i<=m;i++)\n  {\n  \tint x,y;\n  \tint cost;\n  \tscanf(\"%d%d\",&x,&y);\n  \tcost=query1(x,y);//\u67e5\u627e\u8def\u5f84\u957f\n  \tup1(x,y,cost);//\u4e0a\u4f20\u9884\u5904\u7406\n  \tif(cost>maxcost)\n  \t{\n  \t\tmaxcost=cost;\n  \t\tmaxx=x;\n  \t\tmaxy=y;\n\t\t}\n\t}\n\twork(maxx,maxy,maxcost);\n}\n\n```\n\n(\u7531\u4e8etab\u517c\u5bb9\u7684\u539f\u56e0\uff0c\u7f29\u8fdb\u53ef\u80fd\u6709\u95ee\u9898\uff0c\u5c06\u5c31\u4e00\u4e0b\u5427)\n\n~~\u5236\u4f5c\u4e0d\u6613\uff0c\u7d20\u8d28\u4e09\u8fde\uff08\u70b9\u8d5e\uff0c\u5173\u6ce8\uff0c\u641c\u85cf\u9898\u76ee\uff09~~",
        "postTime": 1566876537,
        "uid": 62573,
        "name": "zzqDeco",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a**\u4e8c\u5206+LCA**\n\n\u770b\u5230\u8fd9\u9053\u9898\u76ee\u7684\u7b2c\u4e00\u773c\uff0c\u5c31\u60f3\u5230\u4e86LCA\uff0c\u4f46\u662f\u7ef4\u62a4\u4e86LCA\u540e\u8be5\u5982\u4f55\u6c42\u7b54\u6848\u5462\uff1f\u8fd9\u65f6\u4fbf\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u9884\u5904\u7406\u6240\u6709\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\uff0c\u4ee5\u53ca\u8d77\u70b9\u548c\u7ec8\u70b9\u7684LCA\uff0c\u7136\u540e\u4e8c\u5206\u4efb\u52a1\u9700\u8981\u7684\u6700\u5927\u65f6\u95f4\u3002\n\n\u9884\u5904\u7406\u65f6\u95f4\u548cLCA\u90fd\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u662fcheck\u600e\u4e48\u5199\u3002\n\n\u5f88\u5bb9\u6613\u53ef\u4ee5\u60f3\u5230\u5982\u679c\u65f6\u95f4\u5927\u4e8emid\u7684\u4efb\u52a1\u6240\u8d70\u7684\u8def\u5f84\u90fd\u8986\u76d6\u8fc7\u67d0\u4e00\u6761\u8fb9\uff0c\u4e14\u8fd9\u6761\u8fb9\u6d88\u5931\u90fd\u53ef\u4ee5\u8ba9\u4efb\u52a1\u65f6\u95f4\u5c0f\u4e8emid\uff0c\u90a3\u4e48\u8fd9\u4e2amid\u80af\u5b9a\u662f\u5408\u6cd5\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u9884\u5904\u7406\u4e00\u4e2a up \u6570\u7ec4\uff0cup i \u8868\u793a\u8282\u70b9 i \u5230\u4ed6\u7236\u4eb2\u7684\u8ddd\u79bb\u3002\u5728check\u7684\u65f6\u5019\u679a\u4e3e\u6bcf\u4e00\u4e2a\u65f6\u95f4\u5927\u4e8e mid \u7684\u4efb\u52a1\uff0c\u904d\u5386\u4e00\u904d\u4ed6\u7684\u8def\u5f84\uff0c\u5728\u6bcf\u6761\u6d88\u5931\u5c31\u53ef\u4ee5\u4f7f\u65f6\u95f4\u5c0f\u4e8e\u7b49\u4e8e mid \u7684\u8fb9\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\uff0c\u5982\u679c\u6709\u4e00\u6761\u8fb9\u4e0a\u7684\u6807\u8bb0\u7b49\u4e8e\u65f6\u95f4\u5927\u4e8e mid \u7684\u4efb\u52a1\u6570\uff0c\u5219\u8fd4\u56de true\u3002\n\n```cpp\nbool check(int len)\n{\n\tif(plan[m].dist<=len)return true;\n\tfor(int i=1;i<=n;i++)used[i]=0;\n\tint x=0,maxn=0;\n    //x\u662f\u5927\u4e8e mid \u7684\u4efb\u52a1\u6570\uff0c\u5728\u5faa\u73af\u4e2d\u7edf\u8ba1\uff0cmaxn\u662f\u8fb9\u4e0a\u6807\u8bb0\u4e2a\u6570\u7684\u6700\u5927\u503c\n\tfor(int i=m;i>=1;i--)\n\t{\n\t\tif(plan[i].dist<=len)break;\n\t\tx++;\n\t\tint u=plan[i].st,v=plan[i].ed,luv=plan[i].lca,c=plan[i].dist-len;\n\t\twhile(u!=luv)\n\t\t{\n\t\t\tif(up[u]>=c)\n\t\t\t{\n\t\t\t\tused[u]++;\n\t\t\t\tmaxn=maxn<used[u]?used[u]:maxn;\n\t\t\t}\n\t\t\tu=f[u][0];\n\t\t}\n\t\twhile(v!=luv)\n\t\t{\n\t\t\tif(up[v]>=c)\n\t\t\t{\n\t\t\t\tused[v]++;\n\t\t\t\tmaxn=maxn<used[v]?used[v]:maxn;\n\t\t\t}\n\t\t\tv=f[v][0];\n\t\t}//\u56e0\u4e3a\u65f6\u9650\u662f2s\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u66b4\u529b\u679a\u4e3e\u7aef\u70b9\u5230LCA\u7684\u6bcf\u4e00\u6761\u8fb9\u5c31\u53ef\u4ee5\u4e86\n\t\tif(maxn<x)return false;\n\t}\n\treturn true;\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int N = 300000 + 10;\n\ninline int read()\n{\n\tint res=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')res=(res<<3)+(res<<1)+ch-'0',ch=getchar();\n\treturn res;\n}\n\nstruct edge{\n\tint next,to,w;\n}r[N<<1];\n\nint head[N],tot;\n\nvoid add(int u,int v,int w)\n{\n\tr[++tot]=(edge){head[u],v,w};\n\thead[u]=tot;\n}\n\nint dep[N],f[N][22],sum[N],up[N];\n\nvoid dfs(int u,int father,int deep)\n{\n\tdep[u]=deep;\n\tf[u][0]=father;\n\tfor(int e=head[u];e;e=r[e].next)\n\t{\n\t\tint v=r[e].to;\n\t\tif(v==father)continue;\n\t\tsum[v]=sum[u]+r[e].w;\n        //\u5904\u7406\u4ece\u6839\u8282\u70b9\uff08\u6211\u8fd9\u91cc\u5c06\u6839\u8282\u70b9\u8bbe\u4e3a1\uff09\u5230u\u7684\u8ddd\u79bb\n\t\tup[v]=r[e].w;\n        //\u5904\u7406\u81ea\u5df1\u5230\u7236\u4eb2\u7684\u8ddd\u79bb\uff0c\u5176\u5b9e\u4e0d\u8981\u4e5f\u53ef\u4ee5\uff0c\u76f4\u63a5\u7528sum\u6c42\u5c31\u53ef\u4ee5\n\t\tdfs(v,u,deep+1);\n\t}\n}\n\nint LCA(int u,int v)\n{\n\tif(dep[u]<dep[v])swap(u,v);\n\tfor(int i=19;i>=0;i--)\n\t\tif(dep[f[u][i]]>=dep[v])\n\t\t\tu=f[u][i];\n\tif(u==v)return u;\n\tfor(int i=19;i>=0;i--)\n\t\tif(f[u][i]!=f[v][i])\n\t\t\tu=f[u][i],v=f[v][i];\n\treturn f[u][0];\n}//\u57fa\u672c\u64cd\u4f5c\n\nstruct node{\n\tint st,ed,dist,lca;\n\tbool operator <(const node x)\n\t{\n\t\treturn dist<x.dist;\n\t}\n}plan[N];\n\nint n,m,ans;\n\nint used[N];\n\nbool check(int len)\n{\n\tif(plan[m].dist<=len)return true;\n\tfor(int i=1;i<=n;i++)used[i]=0;\n\tint x=0,maxn=0;\n\tfor(int i=m;i>=1;i--)\n\t{\n\t\tif(plan[i].dist<=len)break;\n\t\tx++;\n\t\tint u=plan[i].st,v=plan[i].ed,luv=plan[i].lca,c=plan[i].dist-len;\n\t\twhile(u!=luv)\n\t\t{\n\t\t\tif(up[u]>=c)\n\t\t\t{\n\t\t\t\tused[u]++;\n\t\t\t\tmaxn=maxn<used[u]?used[u]:maxn;\n\t\t\t}\n\t\t\tu=f[u][0];\n\t\t}\n\t\twhile(v!=luv)\n\t\t{\n\t\t\tif(up[v]>=c)\n\t\t\t{\n\t\t\t\tused[v]++;\n\t\t\t\tmaxn=maxn<used[v]?used[v]:maxn;\n\t\t\t}\n\t\t\tv=f[v][0];\n\t\t}\n\t\tif(maxn<x)return false;\n\t}\n\treturn true;\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1,u,v,w;i<n;i++)\n\t\tu=read(),v=read(),w=read(),add(u,v,w),add(v,u,w);\n\tdfs(1,0,1);\n\tfor(int k=1;k<=19;k++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tf[i][k]=f[f[i][k-1]][k-1];\n\tfor(int i=1,u,v;i<=m;i++)\n\t{\n\t\tu=read(),v=read();\n\t\tint luv=LCA(u,v);\n\t\tplan[i]=(node){u,v,sum[u]+sum[v]-(sum[luv]<<1),luv};\n        //\u9884\u5904\u7406\u6bcf\u4e2a\u4efb\u52a1\u7684\u65f6\u95f4\u548c\u4e24\u4e2a\u7aef\u70b9\u7684LCA\n\t}\n\tsort(plan+1,plan+m+1);\n\tint l=0,r=300000000;\n\twhile(l<r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid))r=mid,ans=mid;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\u505a\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u770b\u9898\u89e3\uff0c\u4f46\u8c8c\u4f3c\u9898\u89e3\u4e2d\u6709\u4e2a\u4eba\u7684\u601d\u8def\u51e0\u4e4e\u548c\u6211\u4e00\u6837\uff1f~~\u4ed4\u7ec6\u770b\u4e86\u4e00\u4e0b\u4ed6\u4f3c\u4e4e\u5e76\u6ca1\u6709\u8bb2\u7684\u5f88\u6e05\u695a\u3002~~\n\n~~\u4e22\u4eba\u77ac\u95f4\uff1a~~\n\n~~\u5728\u6c42\u5dee\u7684\u65f6\u5019\u5c45\u7136\u62ff\u5c0f\u7684\u6570\u53bb\u51cf\u4e86\u5927\u7684\u6570\uff0c\u6210\u529f\u6253\u7834\u6211\u4e00\u904dAC\u7d2b\u9898\u7684\u68a6\u60f3\u3002\u3002~~",
        "postTime": 1572090961,
        "uid": 236021,
        "name": "C_\u65ed",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u7ffb\u4e86\u597d\u591a\u9898\u89e3\uff0c\u5927\u90e8\u5206\u90fd\u662f\u4e8c\u5206+\u6811\u5256\u7684\n\n### \u6211\u6765\u8bf4\u4e00\u4e0b\u6211\u7684\u601d\u8def\uff1a\u6811\u5256+\u8d2a\u5fc3\n\n------------\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u5220\u53bb\u7684\u8fb9\u4e00\u5b9a\u662f\u5728\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u5e76\u4e14\u6211\u4eec\u8981\u5904\u7406\u5bf9\u4e8e\u6bcf\u6761\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u4e0d\u7ecf\u8fc7\u5b83\u7684\u8def\u5f84\u96c6\u5408\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u6761\u8def\u5f84L'\u3002\n\n\u524d\u9762\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u8bb2\u7684\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\uff0c\u6240\u4ee5\u6211\u4e3b\u8981\u8bf4\u4e00\u8bf4\u6211\u5bf9L'\u7684\u5904\u7406\u3002\n\n\n\n#### \u6211\u5904\u7406L'\u7684\u5927\u4f53\u601d\u8def\u662f\uff1a\u8d2a\u5fc3\u3002\uff08\u5e94\u8be5\u662f\u8d2a\u5fc3\u5427\uff09\n\n\uff08\u4ee5\u540e\u6211\u4eec\u7528e\u8868\u793a\u6700\u957f\u8def\u5f84\u4e0a\u7684\u5176\u4e2d\u4e00\u6761\u8fb9\uff09\n\n\u7531\u4e8e\u6211\u4eec\u8981\u627e\u7684\u662f\u4e0d\u7ecf\u8fc7e\u7684\u8def\u5f84\u96c6\u5408\u4e2d\u6700\u957f\u7684\u8def\u5f84L'\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u60f3\u5230\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u6070\u597d\u679a\u4e3e\u5230\u4e00\u6761\u8def\u5f84\u4e0d\u7ecf\u8fc7e\uff0c\u5e76\u4e14\u524d\u9762\u7684\u8def\u5f84\u90fd\u7ecf\u8fc7e\uff0c\u90a3\u4e48\u73b0\u5728\u679a\u4e3e\u7684\u8fd9\u6761\u8def\u5f84\u4e00\u5b9a\u662f\u6211\u4eec\u6240\u6c42\u7684L'\u3002\n\n#### \u4e8e\u662f\u601d\u8def\u5c31\u5f88\u660e\u4e86\u4e86\uff1a \n\t\n        1.\u5148\u6811\u5256\u6c42\u51fa\u6bcf\u4e00\u6761\u8def\u5f84\u7684\u957f\u5ea6\n        2.\u6392\u5e8f\n        3.\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bcf\u6761\u8def\u5f84\uff0c\u4e3a\u8def\u5f84\u4e0a\u5df2\u88ab\u524d\u9762\u6240\u6709\u8def\u5f84\u8986\u76d6\u8fc7\u7684\n          \u8fb9\uff08\u5373\u88ab\u4e0a\u4e00\u6761\u679a\u4e3e\u7684\u8def\u5f84\u6253\u8fc7\u6807\u8bb0\u7684\u8fb9\uff09\u6253\u4e0a\u8fd9\u4e2a\u8fb9\u7684\u6807\u8bb0\n             \n#### \u4f18\u5316\uff1a\n\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u679a\u4e3e\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u5f53\u524d\u679a\u4e3e\u7684\u8def\u5f84\u6bd4\u6700\u957f\u8def\u5f84\u51cf\u53bb\u6700\u5927\u8fb9\u6743\u8fd8\u8981\u77ed\u7684\u8bdd\uff0c\u53d6max\u540e\u7684\u503c\u80af\u5b9a\u4e0e\u8fd9\u6761\u8def\u5f84\u591a\u957f\u65e0\u5173\uff08\u8fd9\u662f\u4e3b\u8981\u7684\u5e38\u6570\u4f18\u5316\uff0c\u4e0d\u52a0\u7684\u8bdd\u4f1aT\u4e09\u4e2a\u70b9\uff0c\u52a0\u4e86\u4ee5\u540e\u4e0d\u52a0\u5feb\u8bfb\u6700\u6162\u7684\u70b9380ms\uff09\n\n#### \u4e0b\u9762\u662f\u53c8\u957f\u53c8\u5446\u7684\u4ee3\u7801\uff1a\n\t\u7531\u4e8e\u7801\u98ce\u548c\u53d8\u91cf\u540d\u6bd4\u8f83\u6bd2\u7624QAQ\uff0c\u6240\u4ee5\u4ee3\u7801\u91cc\u529f\u80fd\u5199\u7684\u6bd4\u8f83\u8be6\u7ec6\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define INF 0x3f3f3f3f\n#define LL long long\nusing namespace std;\nconst int maxn = 300010;\nint n, m;\nint sum[maxn];\nint maxw;\nint ansl;\n\nstruct Que{\n\tint x, y, w, lca;\n} no[maxn];\nint cnm(Que a, Que b){\n\treturn a.w > b.w;\n}\n\n//\u5efa\u8fb9\u90e8\u5206 \nstruct edge{\n\tint v, w, next;\n} ed[maxn << 1];\nint cur, g[maxn];\ninline void Add(int u, int v, int w){\n\tcur++;\n\ted[cur] = (edge){v, w, g[u]};\n\tg[u] = cur;\n}\n\nint w[maxn], dep[maxn], siz[maxn], top[maxn], fa[maxn], son[maxn], tid[maxn], rad[maxn];\nint cnt;\n\n//\u7ebf\u6bb5\u6811\u90e8\u5206\uff08\u7ef4\u62a4\u4e00\u76f4\u5230\u7b2c\u51e0\u5927\u7684\u8def\u5f84\uff0c\u6539\u8fb9\u90fd\u88ab\u8986\u76d6\uff09\n//\u6211\u89c9\u5f97\u8fd9\u5757\u7684\u5904\u7406\u5e76\u4e0d\u7b97\u592a\u597dQAQ \nstruct T_node{\n\tint bb, max;//bb\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u662f\u5426\u5168\u90e8\u88ab\u6253\u4e0a\u540c\u4e00\u6807\u8bb0 \n} t[maxn << 2];\nint tag[maxn << 2];\n\ninline void Ref(int l, int r, int root){\n\tt[root].bb = t[root << 1].bb | t[root << 1 | 1].bb;\n\tif(t[root << 1].max != t[root << 1 | 1].max) t[root].bb = 1;\n\tt[root].max = max(t[root << 1].max, t[root << 1 | 1].max);\n}\ninline void Pushdown(int l, int r, int root){\n\ttag[root << 1] = tag[root << 1 | 1] = tag[root];\n\tt[root << 1].max = t[root << 1 | 1].max = tag[root];\n\ttag[root] = 0;\n}\n//\u7ed9\u533a\u95f4\u5185\u7b26\u5408\u6761\u4ef6\u7684\u8fb9\u6253\u4e0a\u6807\u8bb0 \ninline void Update(int l, int r, int root, int L, int R, int B){\n\tif(L <= l && r <= R && !t[root].bb){ //\u5f53\u524d\u533a\u95f4\u5fc5\u987b\u5168\u90e8\u76f8\u540c\u624d\u80fd\u5bf9\u533a\u95f4\u6574\u4f53\u64cd\u4f5c \n\t\tt[root].max = tag[root] = B + 1;\n\t\treturn;\n\t}\n\tif(tag[root]) Pushdown(l, r, root);\n\tint mid = (l + r) >> 1;\n\tif(mid >= L && t[root << 1].max >= B) Update(l, mid, root << 1, L, R, B);//\u5fc5\u987b\u662f\u5927\u4e8e\u7b49\u4e8e\uff0c\u6bd5\u7adf\u8def\u5f84\u7ecf\u8fc7\u7684\u533a\u95f4\u4e0d\u662f\u4e00\u5757\u5904\u7406\u7684 \n\tif(mid < R && t[root << 1 | 1].max >= B) Update(mid + 1, r, root << 1 | 1, L, R, B);\n\tRef(l, r, root);\n}\ninline int Query(int l, int r, int root, int L){\n\tif(l == r) return t[root].max;\n\tif(tag[root]) Pushdown(l, r, root);\n\tint mid = (l + r) >> 1;\n\tif(L <= mid) return Query(l, mid, root << 1, L);\n\telse return Query(mid + 1, r, root << 1 | 1, L);\n}\n\ninline void Dfs1(int u, int f, int depth, int wl){\n\tfa[u] = f;\n\tdep[u] = depth;\n\tsiz[u] = 1;\n\tw[u] = wl;\n\tfor(int i = g[u]; i; i = ed[i].next){\n\t\tint v = ed[i].v;\n\t\tif(v != f){\n\t\t\tDfs1(v, u, depth + 1, ed[i].w);\n\t\t\tsiz[u] += siz[v];\n\t\t\tif(son[u] == -1 || siz[son[u]] < siz[v])\n\t\t\t\tson[u] = v;\n\t\t}\n\t}\n}\ninline void Dfs2(int u, int t){\n\ttop[u] = t;\n\ttid[u] = ++cnt;\n\trad[cnt] = u;\n\tif(son[u] == -1) return;\n\tDfs2(son[u], t);\n\tfor(int i = g[u]; i; i = ed[i].next){\n\t\tint v = ed[i].v;\n\t\tif(v != fa[u] && v != son[u])\n\t\t\tDfs2(v, v);\n\t}\n}\n\ninline int Query_sum(int x, int y){\n\tint ans = 0;\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tans += sum[tid[x]] - sum[tid[top[x]] - 1];\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] < dep[y]) swap(x, y);\n\tans += sum[tid[x]] - sum[tid[y]];\n\tansl = y;\n\treturn ans;\n}\ninline void Update_path(int x, int y, int B){\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tUpdate(1, n, 1, tid[top[x]], tid[x], B);\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] < dep[y]) swap(x, y);\n\tUpdate(1, n, 1, tid[y] + 1, tid[x], B);\n}\n\nint ans = INF;\nint main(){\n\tmemset(son, -1, sizeof(son));\n\tcin >> n >> m;\n\tfor(int i = 1; i < n; i++){\n\t\tint x, y, w;\n\t\tscanf(\"%d%d%d\", &x, &y, &w);\n\t\tmaxw = max(w, maxw);\n\t\tAdd(x, y, w);\n\t\tAdd(y, x, w);\n\t}\n\t\n\tDfs1(1, 0, 1, 0); Dfs2(1, 1);\n\tfor(int i = 1; i <= n; i++) sum[i] = sum[i - 1] + w[rad[i]];\n\t\n\t//\u8ba1\u7b97\u6240\u6709\u8def\u5f84\u957f\u5ea6\u5e76\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \n\tfor(int i = 1; i <= m; i++){\n\t\tscanf(\"%d%d\", &no[i].x, &no[i].y);\n\t\tno[i].w = Query_sum(no[i].x, no[i].y);\n\t\tno[i].lca = ansl;\n\t}\n\tsort(no + 1, no + m + 1, cnm);\n\t\n\t//\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u6253\u6807\u8bb0 \n\tfor(int i = 1; i <= m; i++){\n\t\tif(no[i].w <= no[1].w - maxw) break;\n\t\tUpdate_path(no[i].x, no[i].y, i - 1);\n\t}\n\t\n\t//\u679a\u4e3e\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u66f4\u65b0\u7b54\u6848\n\t//\u5373\u628a \u6700\u957f\u8def\u5f84\u51cf\u53bb\u8fb9\u7684\u6743\u503c \u4e0e \u4e0d\u542b\u6b64\u8fb9\u7684\u6700\u957f\u8def\u5f84 \u53d6max \n\tint x = no[1].x, y = no[1].y, lca = no[1].lca;\n\twhile(x != lca){\n\t\tans = min(ans, max(no[1].w - w[x], no[Query(1, n, 1, tid[x]) + 1].w));\n\t\tx = fa[x];\n\t}\n\twhile(y != lca){\n\t\tans = min(ans, max(no[1].w - w[y], no[Query(1, n, 1, tid[y]) + 1].w));\n\t\ty = fa[y];\n\t}\n\t\n\t//ans==INF\u8868\u793a\u8def\u5f84\u662f\u81ea\u5df1\u5230\u81ea\u5df1\uff08\u7956\u5148\u5c31\u662f\u4e24\u7aef\u70b9\uff0c\u672a\u66f4\u65b0\u7b54\u6848\uff09\uff0c\u4e0d\u8fd9\u6837\u7b2c15\u4e2a\u70b9wa \n\tif(ans == INF) ans = 0;\n\tcout << ans;\n\treturn 0;\n}\n```\n\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u5199\u7684\u4e0d\u597d\u89c1\u8c05QAQ\uff08\u6709\u4ec0\u4e48bug\u4e5f\u53ef\u4ee5\u76f4\u63a5\u79c1\u4fe1\u6211\uff09",
        "postTime": 1540692276,
        "uid": 66612,
        "name": "gatzf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u4e0d\u9700\u8981\u4e8c\u5206\u4e0d\u9700\u8981\u6811\u5256\u4e0d\u9700\u8981\u6570\u636e\u7ed3\u6784\u7684\u505a\u6cd5\u3002\u4e0d\u9700\u8981\u5361\u5e38\uff0c\u8fd8\u633a\u597d\u5199\u3002\n\n\u5982\u679c\u5ffd\u7565\u6392\u5e8f\uff0c\u8fd9\u79cd\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230 $O(nlogn+m)$ \u3002\n\n\u8fd8\u6709\u8fd8\u6709\uff0c\u660e\u660e\u500d\u589e\u53ef\u4ee5\u6700\u5927\u70b9 600+ms \u65e0\u538b\u529b\u901a\u8fc7\u554a\u3002~~\u4e0d\u8fc7\u628a\u6c42LCA\u7684\u90e8\u5206\u6362\u6210\u6811\u5256\u6700\u5927\u70b9\u53ea\u8981400ms\u4e86~~\n\n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6700\u540e\u7684\u7b54\u6848\u662f $ans$ \uff0c\u90a3\u4e48\u6240\u6709\u957f\u5ea6\u5927\u4e8e $ans$ \u7684\u94fe\u90fd\u9700\u8981\u88ab\u4fee\u6539\u5230\uff0c\u90a3\u4e48\u8981\u4fee\u6539\u5230\u7684\u94fe\u5c31\u662f\u6309\u7167\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\u7684\u4e00\u4e2a\u524d\u7f00\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u8fd9\u4e2a\u524d\u7f00\u3002\n\n\u5047\u5982\u73b0\u5728\u6211\u4eec\u679a\u4e3e\u5230 $i$ \uff0c\u8868\u793a\u524d $i$ \u6761\u94fe\u90fd\u9700\u8981\u4fee\u6539\uff0c\u90a3\u4e48\u6211\u4eec\u4fee\u6539\u7684\u8fb9\u5fc5\u7136\u662f\u8fd9 $i$ \u6761\u94fe\u76f8\u4ea4\u4e4b\u540e\u5f62\u6210\u7684\u94fe\u4e0a\u7684\u4e00\u6761\u8fb9\u3002\u90a3\u5f53\u7136\u662f\u4fee\u6539\u8fd9\u6761\u94fe\u4e0a\u6700\u5927\u7684\u8fb9\u6700\u4f18\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8981\u5e72\u7684\u4e8b\u60c5\u5c31\u53ea\u6709\u6c42\u4e24\u6761\u94fe\u7684\u4ea4\uff0c\u6c42\u4e00\u6761\u94fe\u4e0a\u7684\u6700\u5927\u503c\uff0c\u660e\u663e\u500d\u589e\u90fd\u53ef\u4ee5\u505a\u3002\n\n\u4e0d\u8fc7\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f $O((n+m)logn)$ \uff0c\u5982\u679c\u6362\u6210 RMQ \u6c42 LCA \uff0c\u867d\u7136\u6c42 LCA \u53d8\u6210\u4e86 $O(1)$ \uff0c\u4f46\u5c31\u6ca1\u6cd5\u6c42\u4e00\u6761\u94fe\u4e0a\u7684\u6700\u5927\u503c\u4e86\u2026\u2026\u90a3\u600e\u4e48\u529e\uff1fKruscal \u91cd\u6784\u6811\uff01\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u6c42 LCA \u6765 $O(1)$ \u6c42\u94fe\u4e0a\u6700\u5927\u503c\u4e86\u2026\u2026\n\n\u5f53\u7136\u8fd9\u6837\u8fc7\u4e8e\u6bd2\u7624\uff0c\u800c\u4e14\u597d\u50cf\u6ca1\u5565\u610f\u4e49\uff0c\u6240\u4ee5\u6211\u4f9d\u7136\u5199\u7684\u662f $O((n+m)logn)$ \u7684\u500d\u589e\u2026\u2026\u8c8c\u4f3c\u6709\u795e\u4ed9 $O(n+m)$ \u505a\u6cd5\uff0c\u81ea\u884c\u767e\u5ea6\u3002\n\n\u500d\u589e\u5e38\u6570\u5927\uff0c\u5f88\u591a\u4eba\u7528\u500d\u589e\u88ab\u5361\u5e38\uff0c~~\u90a3\u53ea\u80fd\u8bf4\u660e\u5199\u5f97\u4e0d\u591f\u4f18\u826f~~\u3002\u6c42\u94fe\u4ea4\u6211\u6c42\u4e86 5 \u6b21 LCA\uff0c\u518d\u52a0\u4e0a\u6c42\u94fe\u7684\u6700\u5927\u503c\u6709 6 \u6b21 LCA \u4e86\uff0c\u4f46\u8fd8\u662f\u8f7b\u677e\u8dd1\u8fc7\u3002\u539f\u56e0\u5927\u6982\u662f\u4e0d\u523b\u610f\u5361\u7684\u60c5\u51b5\u4e0b\u94fe\u4ea4\u5f88\u5feb\u5c31\u4f1a\u53d8\u6210\u7a7a\u94fe\uff0c\u800c\u4e14\u679a\u4e3e\u7684\u65f6\u5019\u53d1\u73b0\u7b54\u6848\u4e0d\u4f1a\u66f4\u4f18\u5c31\u53ef\u4ee5 break \u6389\u4e86\u3002\n\n\u6700\u540e\u4f8b\u884c\u5ba3\u4f20[\u535a\u5ba2](https://www.cnblogs.com/ymzqwq/)qwq\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define fr(i,x,y) for(int i=(x);i<=(y);i++)\n#define rf(i,x,y) for(int i=(x);i>=(y);i--)\n#define frl(i,x,y) for(int i=(x);i<(y);i++)\nusing namespace std;\nconst int N=300003;\nconst int Lg=19;\nconst int M=N<<1;\nint n,m,a[N];\nint cnt,head[N],Next[M],v[M],w[M];\nstruct data{\n\tint x,y,lca,len;\n\tbool operator < (const data q) const{\n\t\treturn len>q.len;\n\t}\n}e[N];\n\nvoid read(int &x){\n\tchar ch=getchar();x=0;\n\tfor(;ch<'0'||ch>'9';ch=getchar());\n\tfor(;ch>='0'&&ch<='9';ch=getchar()) x=(x<<3)+(x<<1)+ch-'0';\n}\n\nvoid add(int x,int y,int z){\n\tNext[++cnt]=head[x];\n\thead[x]=cnt;\n\tv[cnt]=y;w[cnt]=z;\n}\n\nint dep[N],dis[N],f[N][Lg],g[N][Lg];\nvoid predfs(int x,int fa){\n\tf[x][0]=fa;\n\tdep[x]=dep[fa]+1;\n\tfrl(i,1,Lg){\n\t\tf[x][i]=f[f[x][i-1]][i-1];\n\t\tg[x][i]=max(g[x][i-1],g[f[x][i-1]][i-1]);\n\t}\n\tfor(int i=head[x];i;i=Next[i])\n\t if (v[i]!=fa){\n\t \tdis[v[i]]=dis[x]+w[i];\n\t \tg[v[i]][0]=w[i];\n\t \tpredfs(v[i],x);\n\t }\n}\n\nint getLCA(int x,int y){\n\tif (dep[x]<dep[y]) swap(x,y);\n\tint d=dep[x]-dep[y];\n\trf(i,Lg-1,0) if (d&(1<<i)) x=f[x][i];\n\tif (x==y) return x;\n\trf(i,Lg-1,0) if (f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\n\nint getmx(int x,int y){\n\tif (dep[x]<dep[y]) swap(x,y);\n\tint d=dep[x]-dep[y],mx=0;\n\trf(i,Lg-1,0) if (d&(1<<i)) mx=max(mx,g[x][i]),x=f[x][i];\n\tif (x==y) return mx;\n\trf(i,Lg-1,0)\n\t if (f[x][i]!=f[y][i]){\n\t \tmx=max(mx,max(g[x][i],g[y][i]));\n\t \tx=f[x][i];y=f[y][i];\n\t }\n\treturn max(mx,max(g[x][0],g[y][0]));\n}\n\ninline int maxdep(int x,int y){\n\treturn dep[x]>dep[y]?x:y;\n}\n\nvoid solve(int &dx,int &dy,int &dlca,int x,int y,int lca){\n\tif (dep[lca]>dep[dlca]) swap(x,dx),swap(y,dy),swap(lca,dlca);\n\tdx=maxdep(getLCA(dx,x),getLCA(dx,y));\n\tdy=maxdep(getLCA(dy,x),getLCA(dy,y));\n\tdlca=getLCA(dx,dy);\n}\n\nint main(){\n\tread(n);read(m);\n\tint x,y,z;\n\tfr(i,2,n){\n\t\tread(x);read(y);read(z);\n\t\tadd(x,y,z);add(y,x,z);\n\t}\n\tpredfs(1,0);\n\tfr(i,1,m){\n\t\tread(x);read(y);\n\t\tint lca=getLCA(x,y);\n\t\te[i]=(data){x,y,lca,dis[x]+dis[y]-dis[lca]-dis[lca]};\n\t}\n\tsort(e+1,e+1+m);\n\tint dx=e[1].x,dy=e[1].y,dlca=e[1].lca;\n\tint ans=e[1].len;\n\t//cout<<getmx(1,2);\n\tfr(i,1,m){\n\t\tsolve(dx,dy,dlca,e[i].x,e[i].y,e[i].lca);\n\t\tif (dx==dy) break;\n\t\tint mx=getmx(dx,dy);\n\t\tif (max(e[1].len-mx,e[i+1].len)<ans) ans=max(e[1].len-mx,e[i+1].len);\n\t\t else if (e[1].len-mx>=ans) break;\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1573696054,
        "uid": 6174,
        "name": "\u591c\u732b\u5b50\u9a71\u868a\u5668",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "#\u63d0\u4f9b\u4e00\u79cd\u65b0\u601d\u8def\n\n\u5148\u6c42\u51fa\u6bcf\u6761\u94fe\u7684\u957f\u5ea6\uff0c\u7136\u540e\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\n\n\u53d8\u6210\u866b\u6d1e\u7684\u8fb9\u4e00\u5b9a\u662f\u524d$m$\u6761\u94fe$(0<m<=n)$\u7684\u516c\u5171\u90e8\u5206\u4e2d\u6743\u503c\u6700\u5927\u7684\u8fb9\uff0c\u627e\u51fa\u8fd9\u6761\u8fb9\u5373\u53ef\u3002\n\n\u627e\u94fe\u7684\u516c\u5171\u90e8\u5206\u6bd4\u8f83\u9ebb\u70e6\uff0c\u9700\u8981\u5927\u529b\u5206\u7c7b\u8ba8\u8bba\u3002\n\u5148\u8d34\u4ee3\u7801\uff1a\n```cpp\nchain merge(chain a,chain b)\n{\n\tchain res;\n\tif(a.lca==-1||b.lca==-1){\n\t\tres.lca=-1;\n\t\treturn res;\n\t}\n\tif(a.lca==b.lca){\n\t\tif(LCA(a.x,b.y)!=a.lca||LCA(a.y,b.x)!=a.lca)\n\t\t\tswap(a.x,a.y);\n\t\tres.x=LCA(a.x,b.x);\n\t\tres.y=LCA(a.y,b.y);\n\t\tres.lca=a.lca;\n\t}\n\telse{\n\t\tif(deep[a.lca]<deep[b.lca])\n\t\t\tswap(a,b);\n\t\tif(isfa(a.lca,b.x)!=a.lca&&isfa(a.lca,b.y)!=a.lca){\n\t\t\tres.lca=-1;\n\t\t\treturn res;\n\t\t}\n\t\tint p1=LCA(a.x,b.y);\n\t\tint p2=LCA(a.y,b.x);\n\t\tif((p1!=a.lca&&p1!=b.lca)||(p2!=a.lca&&p2!=b.lca))\n\t\t\tswap(a.x,a.y);\n\t\tp1=LCA(a.x,b.x); p2=LCA(a.y,b.y);\n\t\tif(deep[p1]>deep[p2])\n\t\t\tres.x=p1;\n\t\telse res.x=p2;\n\t\tres.y=res.lca=a.lca;\n\t}\n\treturn res;\n}\n```\n\u5982\u679c$a$\u548c$b$\u4e2d\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\uff0c$isfa(a,b)$\u8fd4\u56de\u7956\u5148\u8282\u70b9\u3002\u5426\u5219\u8fd4\u56de$-1$\u3002\n\n\u5f53\u4e24\u4e2a$lca$\u76f8\u540c\u65f6\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/56892.png)\n![](https://cdn.luogu.com.cn/upload/pic/56893.png)\n![](https://cdn.luogu.com.cn/upload/pic/56895.png)\n\n\u6211\u4eec\u5148\u628a$a.x$\u548c$b.x$\u653e\u5728\u4e00\u8d77\uff0c\u628a$a.y$\u548c$b.y$\u653e\u5728\u4e00\u8d77\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\nif(LCA(a.x,b.y)!=a.lca||LCA(a.y,b.x)!=a.lca)\n\tswap(a.x,a.y);\n```\n\u5c31\u662f\u628a\u8fd9\u6837\u4e24\u6761\u94fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/56890.png)\n\n\u53d8\u6210\u8fd9\u6837\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/56891.png)\n\n\u5bf9\u4e8e\u53e6\u5916\u51e0\u79cd\u60c5\u51b5\uff0c\u8bf7\u5927\u5bb6\u81ea\u884c\u8111\u8865\u3002\n\n\u5f53$lca$\u4e0d\u540c\u65f6\uff0c\u4e24\u79cd\u60c5\u51b5\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/56897.png)\n![](https://cdn.luogu.com.cn/upload/pic/56898.png)\n\n\u8fd8\u662f\u628a$a.x$\u548c$b.x$\u653e\u5728\u4e00\u8d77\uff0c\u628a$a.y$\u548c$b.y$\u653e\u5728\u4e00\u8d77\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\nint p1=LCA(a.x,b.y);\nint p2=LCA(a.y,b.x);\nif((p1!=a.lca&&p1!=b.lca)||(p2!=a.lca&&p2!=b.lca))\n\tswap(a.x,a.y);\n```\n\u6700\u540e\u6c42\u51fa\u4e24\u6761\u94fe\u7684\u4ea4\u70b9\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\np1=LCA(a.x,b.x); p2=LCA(a.y,b.y);\nif(deep[p1]>deep[p2])\n\tres.x=p1;\nelse res.x=p2;\nres.y=res.lca=a.lca;\n```\n\u7b2c\u4e00\u7bc7\u8ba4\u771f\u5199\u7684\u9898\u89e3\uff0c\u7ed9\u4e2a\u8d5e\u518d\u8d70\u5427\u3002",
        "postTime": 1555052152,
        "uid": 60202,
        "name": "csyakuoi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "##### \u770b\u5230\u8fd9\u4e48\u591a\u4e8c\u5206\uff0c\u90a3\u6211\u5c31\u6765\u53d1\u4e00\u4e2a\u7279\u522b\u7684\u5427\u3002\n## \u601d\u8def\n\u9996\u5148\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u53bb\u9664\u7684\u8fb9\u4e00\u5b9a\u8981\u5728\u6700\u957f\u8def\u4e0a\uff0c\u56e0\u6b64\u53ef\u4ee5\u8054\u60f3\u5230\u4e8c\u5206\u7684\u505a\u6cd5\u3002\u4f46\u8fd9\u91cc\u63d0\u4f9b\u53e6\u4e00\u4e2a\u601d\u8003\u7684\u65b9\u5411\uff0c\u5c31\u5f53\u505a\u53c2\u8003\u770b\u770b\u5427\u3002\u590d\u6742\u5ea6\u6bd4\u4e8c\u5206\u66f4\u4f18\uff0c\u53ef\u8fbe\u5230O\uff08n\uff09\uff08\u53bb\u9664\u9884\u5904\u7406\uff09\n\n\u5148\u89c2\u5bdf\u4e00\u6761\u94fe\u4e0a\u7684\u505a\u6cd5\uff0c\u9996\u5148\u679a\u4e3e\u6700\u957f\u8def\u4e0a\u7684\u6bcf\u6761\u8fb9\uff0c\u6bcf\u6761\u8def\u5f84d\u7684\u6700\u77ed\u65f6\u95f4\u4e3amax\uff08\u4e0d\u5728\u8fd9\u6761\u8fb9\u4e0a\u7684\u8def\u5f84\uff0c\u5728\u8fd9\u6761\u8fb9\u4e0a\u7684\u8def\u5f84-d\uff09\u53ef\u4ee5\u53d1\u73b0\u5728\u8fd9\u6761\u8def\u4e0a\u7684\u6700\u957f\u8def\u5f84\u5c31\u662f\u5176\u672c\u8eab\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e0d\u7ecf\u8fc7\u7684\u8fd9\u91cc\u53ef\u4ee5\u7528\u5230\u524d\u7f00\u548c\u6765\u89e3\u51b3\uff0c\u90a3\u4e48\u6811\u4e0a\u5462\uff1f\n\n![image](https://upload-images.jianshu.io/upload_images/3739895-f41d011df6243699.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/544/format/webp)\n\n\u89c2\u5bdf\u8fd9\u68f5\u6811\uff0c\u73b0\u5728\u5047\u8bbe\u67093\u4e2a\u4efb\u52a1\u4e14\u8fb9\u8ddd\u79bb\u5747\u76f8\u7b49  1.C-E 2.D-F 3.B-G  \u73b0\u5728\u53ef\u4ee5\u53d1\u73b0\u9700\u8981\u628aD-F\u201c\u62ce\u8d77\u6765\u201d\uff0c\u90a3\u4e48\u5982\u4f55\u5904\u7406\u524d\u7f00\u548c\u5462\uff0c\u8fd9\u91cc\u5bf9\u6bcf\u6761\u8fb9\u7528\u4e00\u904ddfs\u89e3\u51b3\uff0c\u6bd4\u5982\u5bf9\u4e8eD\u8282\u70b9\uff0c\u5411\u4e0b\uff08\u5373\u4e0d\u7ecf\u8fc7B-F\u4e0a\u7684\u8fb9\uff09\u627e\u5230\u6bcf\u4e2a\u8282\u70b9\uff0c\u628a\u6bcf\u4e2a\u8282\u70b9\u90fd**\u67d3\u4e0aB\u7684\u989c\u8272**,\u8fd9\u91cc\u7528CR\u3010\u3011\u6570\u7ec4\u4fdd\u5b58\u3002 \u7136\u540e\u5f00\u59cb\u5904\u7406\u524d\u7f00\u548c\u6570\u7ec4\uff1a\n>1\u53f7\u8def\u5f84\uff1aCR\u3010C\u3011=CR\u3010E\u3011 \u56e0\u6b64\u4e0d\u7ecf\u8fc7B-F\uff0c\u628a\u5b83\u8bb0\u5f55\u5728ans2\u91cc\u9762\n\n>2\u53f7\u8def\u5f84\uff1a\u672c\u8eab\u5c31\u662f\u6700\u957f\u8fb9\uff0c\u4f5c\u4e3a\u7ecf\u8fc7\u6bcf\u4e2a\u8def\u5f84\u7684\u6700\u957f\u8fb9\n\n>3\u53f7\u8def\u5f84: CR\u3010G\u3011=D\uff0cCR\u3010B\u3011=B\uff1b\u53ef\u4ee5\u53d1\u73b0B\u5728D\u7684\u524d\u9762\uff0c\u56e0\u6b64B\u7684\u4e0a\u9762\u4ee5\u53caD\u7684\u4e0b\u9762\u90fd\u5c5e\u4e8e3\u53f7\u8282\u70b9\u4e0d\u7ecf\u8fc7\u7684\u8def\u5f84\uff0c\u5206\u522b\u8bb0\u5728Up\u548cDown\u91cc\u9762\n\n#### \u6574\u4e2a\u4ee3\u7801\u7684\u6d41\u7a0b\u5927\u4f53\u5206\u4e3a\u4e09\u6b65\n\n1.\u6c42lca\u6c42\u6bcf\u6761\u8def\u5f84\u7684\u957f\u5ea6\n\n2.\u67d3\u8272\u5e76\u6c42\u524d\u7f00\u548c\u6570\u7ec4\n\n3.\u679a\u4e3e\n\n#### \u53ea\u8981\u8ddf\u7740\u6d41\u7a0b\u6765\uff0c\u6bcf\u4e00\u6b65\u90fd\u662f\u4e0d\u96be\u7684\n```\nC++\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 300005\n#define LL long long\nint dis[N];\nint S,T,dep[N],n,m,fa[N][21],val[N],mxlen,CR[N],Down[N],Up[N],Son[N];\nstruct node {\n    int to,di;\n};\nstruct edge {\n    int fr,to,lca;\n    int di;\n} H[N];\nvector<node>G[N];\nvoid dfs(int x,int f,int di) {\n    fa[x][0]=f;\n    dep[x]=di;\n    for(int i=0; i<(int)G[x].size(); i++) {\n        int u=G[x][i].to;\n        if(u==f)continue;\n        val[u]=G[x][i].di;\n        dis[u]=dis[x]+G[x][i].di;\n        dfs(u,x,di+1);\n    }\n}\nint LCA(int x,int y) {\n    if(dep[x]>dep[y])swap(x,y);\n    int dis=dep[y]-dep[x];\n    for(int i=0; i<=19; i++) {\n        if(dis&(1<<i))y=fa[y][i];\n    }\n    if(x==y)return x;\n    for(int i=19; i>=0; i--) {\n        if(fa[x][i]!=fa[y][i]) {\n            x=fa[x][i];\n            y=fa[y][i];\n        }\n    }\n    return fa[x][0];\n}\nvoid solve(int x,int s1,int s2,int flag) {\n    CR[x]=flag;\n    for(int i=0; i<(int)G[x].size(); i++) {\n        int u=G[x][i].to;\n        if(u==s1||u==s2||u==fa[x][0])continue;\n        solve(u,s1,s2,flag);\n    }\n}\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<n; i++) {\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        G[a].push_back((node) {b,c});\n        G[b].push_back((node) {a,c});\n        H[i].fr=a;\n        H[i].to=b;\n        H[i].di=c;\n    }\n    dfs(1,0,0);\n    for(int i=1; i<=19; i++)\n        for(int j=1; j<=n; j++)\n            fa[j][i]=fa[fa[j][i-1]][i-1];\n    int top=0;\n    for(int i=1; i<n; i++) {\n        int a=H[i].fr,b=H[i].to;\n        if(dep[a]>dep[b])swap(a,b);\n        val[b]=H[i].di;\n    }\n    for(int i=1; i<=m; i++) {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        H[i].fr=a;\n        H[i].to=b;\n        H[i].lca=LCA(a,b);\n        H[i].di=dis[a]+dis[b]-2*dis[H[i].lca];\n        mxlen=max(mxlen,H[i].di);\n        if(mxlen==H[i].di)S=H[i].fr,T=H[i].to;\n    }\n    val[S]=0;\n    dfs(S,0,0);\n    int ret=0,ans2=0,ans=mxlen;\n    for(int x=T; x!=0; x=fa[x][0])solve(x,ret,fa[x][0],x),Son[x]=ret,ret=x;\n    for(int i=1; i<=m; i++) {\n        int a=H[i].fr,b=H[i].to;\n        if(CR[a]==CR[b]) {\n            ans2=max(ans2,H[i].di);\n        } else {\n            if(dep[CR[a]]>dep[CR[b]])swap(a,b);\n            Up[CR[b]]=max(Up[CR[b]],H[i].di);\n            Down[CR[a]]=max(Down[CR[a]],H[i].di);\n        }\n    }\n    for(int x=T; x!=0; x=fa[x][0])Down[x]=max(Down[x],Down[Son[x]]);\n    for(int x=S; x!=0; x=Son[x])Up[x]=max(Up[x],Up[fa[x][0]]);\n    for(int x=S; x!=0; x=Son[x]) {\n        if(x==S)continue;\n        ans=min(ans,max(mxlen-val[x],max(Up[fa[x][0]],Down[x])));\n    }\n    printf(\"%d\\n\",max(ans,ans2));\n    return 0;\n}\n```\n\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3\u3002\u3002\u3002\u8bb2\u7684\u8fd8\u7b97\u4ed4\u7ec6\u54af\u3002",
        "postTime": 1538267334,
        "uid": 123398,
        "name": "piupiu\u7684\u8111\u6b8b\u7c89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "## \u4e8c\u5206\u7b54\u6848+\u6811\u4e0a\u5dee\u5206\n\n\u6811\u4e0a\u5dee\u5206\u5176\u5b9e\u4e0d\u96be,\u53ea\u662f\u540d\u5b57\u9ad8\u5927\u5c1a,\u53ef\u4ee5\u5b66\u4e00\u4e0b:[Eternal\u98ce\u5ea6\u7684\u6811\u4e0a\u5dee\u5206](http://www.cnblogs.com/cjoierljl/p/8728215.html)\n\u672c\u4eba\u535a\u5ba2\u91cc\u4e5f\u603b\u7ed3\u4e86\u4e00\u4e9b\u5176\u4ed6\u7684\u77e5\u8bc6\u4f9b\u5927\u5bb6\u5b66\u4e60:[Eternal\u98ce\u5ea6\u7684\u535a\u5ba2](https://www.cnblogs.com/cjoierljl)\n\n## \u5177\u4f53\u89e3\u7b54\n\n\u81f3\u4e8e\u8fd9\u662f\u600e\u4e48\u60f3\u5230\u7684,\u4e00\u6b65\u4e00\u6b65\u6765:\n\n> 1.n\u6709300000,\u4e0d\u53ef\u80fd\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\n\n> 2.\u56e0\u4e3a\u6211\u4eec\u8981\u4f7f\u8fd0\u8f93\u65f6\u95f4\u7684\u6700\u5927\u503c\u6700\u5c0f,\u6240\u4ee5,\u8003\u8651\u4e8c\u5206\u7b54\u6848(\u505a\u591a\u4e86\u4e4b\u540e\u7684\u4e60\u60ef(\u5176\u5b9e\u4e5f\u5c31\u662f\u7a81\u7136\u7684\u7075\u611f,\u4e0d\u662f\u5fc5\u7136......))\n\n> 3.\u65e2\u7136\u4e8c\u5206\u4e86\u7b54\u6848,\u6682\u4e14\u628a\u6211\u4eec\u4e8c\u5206\u7684\u7b54\u6848\u53d8\u91cf\u540d\u53eb lim ,\u8003\u8651On\u7684check():\n    \n  > * \u60f3\u5230\u6bcf\u6b21\u628a\u8d85\u8fc7lim(\u8dd1LCA\u6c42\u8fd0\u8f93\u8ba1\u5212\u7684\u65f6\u95f4)\u7684\u8fd0\u8f93\u8ba1\u5212\u5168\u90e8\u8981\u8003\u8651\u5220\u8fb9(\u663e\u7136),\u5e76\u4e14\u8fd9\u4e9b\u8ba1\u5212\u90fd\u5fc5\u987b\u8981\u5220\u4e00\u6761\u516c\u5171\u8fb9(\u4e5f\u662f\u663e\u7136,\u52a0\u866b\u6d1e\u5c31\u76f8\u5f53\u4e8e\u628a\u8fb9\u6743\u53d8\u4e3a0,\u59d1\u4e14\u53eb\u505a\u5220\u8fb9\u628a)\n  > * \u8fd9\u5c31\u53ef\u4ee5\u8003\u8651\u5dee\u5206\u4e86,\u628a\u8d85\u8fc7lim\u7684\u8ba1\u5212\u5168\u90e8\u5dee\u5206\u8fdb\u53bb,\u7edf\u8ba1\u4e00\u4e0b\u5dee\u5206\u6570\u7ec4,\u679a\u4e3e\u6240\u6709\u8ba1\u5212\u90fd\u7ecf\u8fc7\u7684\u8fb9(\u4e5f\u5c31\u662f\u5dee\u5206\u6570\u7ec4==\u8d85\u8fc7lim\u7684\u8ba1\u5212\u6570),\u770b\u770b\u6700\u5927\u7684\u8fd0\u8f93\u4ee3\u4ef7\u51cf\u53bb\u8fd9\u4e2a\u8fb9\u6743(\u76f8\u5f53\u4e8e\u628a\u5b83\u53d8\u4e3a0,\u663e\u7136)\u662f\u5426\u5c0f\u4e8elim(\u5982\u679c\u6700\u5927\u503c\u90fd\u5c0f\u4e8elim\u4e86,\u6240\u6709\u7684\u90fd\u5c0f\u4e8elim\u4e86)\n\n\u4e0a\u4ee3\u7801:\n```c\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<iomanip>\n#include<ctime>\n#include<queue>\n#include<stack>\n#define rg register\n#define lst long long\n#define N 300050\nusing namespace std;\n\nint n,m,cnt,ans,maxn,le,ri;\nstruct EDGE{\n    int to,v,nxt;\n}edge[N<<1];\nstruct ROAD{\n    int fm,to,v;\n}road[N];\nint head[N],back[N];\nint cf[N];\nint deep[N],fa[N];\nint f[N][25],g[N][25];\n\ninline int read()\n{\n    rg int s=0,m=1;rg char ch=getchar();\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n    if(ch=='-')m=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')s=(s<<3)+(s<<1)+ch-'0',ch=getchar();\n    return s*m;\n}\n\ninline void add(rg int p,rg int q,rg int o)\n{\n    edge[++cnt].to=q,edge[cnt].v=o;\n    edge[cnt].nxt=head[p];\n    head[p]=cnt;\n}\n\nvoid dfs(rg int now,rg int fm,rg int dep,rg int s)//dfs\u9884\u5904\u7406\u500d\u589eLCA\n{\n    fa[now]=fm,deep[now]=dep;\n    f[now][0]=fm;g[now][0]=s;\n    for(rg int i=1;i<=20;++i)\n    {\n        f[now][i]=f[f[now][i-1]][i-1];\n        g[now][i]=g[f[now][i-1]][i-1]+g[now][i-1];\n    }\n    for(rg int i=head[now];i;i=edge[i].nxt)\n    {\n        rg int qw=edge[i].to;\n        if(qw!=fm)\n        {\n            back[qw]=i;\n            dfs(qw,now,dep+1,edge[i].v);\n        }\n    }\n}\n\ninline int LCA(rg int x,rg int y,rg int op)//\u500d\u589e\u8df3LCA\n{\n    rg int res=0;\n    if(deep[x]<deep[y])swap(x,y);\n    while(deep[x]>deep[y])//\u8df3\u5230\u540c\u6837\u6df1\u5ea6\n        for(rg int i=20;i>=0;--i)\n            if(deep[f[x][i]]>=deep[y])res+=g[x][i],x=f[x][i];\n    \n    while(x!=y)\n    {\n        for(rg int i=20;i>=0;--i)\n            if(f[x][i]!=f[y][i])\n                res+=g[x][i]+g[y][i],x=f[x][i],y=f[y][i];\n        \n        if(fa[x]==fa[y])res+=g[x][0]+g[y][0],x=y=fa[x];\n    }\n    if(!op)return res;\n    else return x;\n}\n\ninline void Insert(rg int p,rg int q)//\u5dee\u5206\n{\n    rg int lca=LCA(p,q,1);\n    cf[p]++,cf[q]++,cf[lca]-=2;\n}\n\nvoid sum(rg int now)//\u7edf\u8ba1\u5dee\u5206\u6570\u7ec4\n{\n    for(rg int i=head[now];i;i=edge[i].nxt)\n    {\n        rg int qw=edge[i].to;\n        if(qw!=fa[now])\n        {\n            sum(qw);\n            cf[now]+=cf[qw];\n        }\n    }\n}\n\ninline int check(rg int lim)//\u5982\u89e3\u6790,check()\n{\n    rg int ss=0,Max=0;\n    for(rg int i=1;i<=n;++i)cf[i]=0;\n    for(rg int i=1;i<=m;++i)\n    {\n        if(road[i].v>lim)\n        {\n            Max=max(Max,road[i].v);\n            ss++,Insert(road[i].fm,road[i].to);\n        }\n    }\n    sum(0);\n    for(rg int i=1;i<=n;++i)\n        if(cf[i]==ss&&Max-edge[back[i]].v<=lim)return 1;\n    return 0;\n}\n\nint main()\n{\n    n=read(),m=read();\n    for(rg int i=1;i<n;++i)\n    {\n        rg int p=read(),q=read(),o=read();\n        add(p,q,o),add(q,p,o);\n    }\n    //\u8bfb\u5165\u8fb9\u7684\u4fe1\u606f\n    dfs(1,0,1,0);\n    for(rg int i=1;i<=m;++i)\n    {\n        rg int p=read(),q=read();\n        road[i].fm=p,road[i].to=q,road[i].v=LCA(p,q,0);\n        ri=max(ri,road[i].v);\n    }\n    add(0,1,0);//\u6ca1\u4e8b\u5e72\u52a0\u4e86\u4e00\u4e2a 0->1 \u7684\u8fb9,\u611f\u89c9\u6bd4\u8f83\u8e0f\u5b9e(0\u7684\u7236\u4eb2\u662f1)...\u65e0\u8bed...\n    while(le<=ri)//\u4e8c\u5206\n    {\n        rg int mid=(ri+le)>>1;\n        if(check(mid))ans=mid,ri=mid-1;\n        else le=mid+1;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1523362867,
        "uid": 66596,
        "name": "eternal\u98ce\u5ea6",
        "ccfLevel": 0,
        "title": "P2680[\u8fd0\u8f93\u8ba1\u5212]\u7684\u60f3\u6cd5\u548c\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u91cc\u7ed9\u4e00\u79cd\u4e0d\u4e00\u6837\u7684\u65b9\u6cd5\u3002\n\n\u9996\u5148\u770b\u9898\uff0c\u4e0d\u96be\u60f3\u5230\u4e8c\u5206\u3002\u5047\u8bbe\u4e8c\u5206\u4e00\u4e2a$k$\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u80fd\u8ba9\u6240\u6709\u8def\u5f84\u7684\u957f\u5ea6\u90fd\u5c0f\u4e8e$k$\u5462\uff1f\n\n\u5dee\u5206\u663e\u7136\u53ef\u505a\uff0c\u4f46\u6211\u7684\u60f3\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n\n\u9996\u5148\u5ffd\u7565\u672c\u6765\u5c31\u5c0f\u4e8e$k$\u7684\uff0c\u7136\u540e\u53d6\u5269\u4e0b\u7684\u4ea4\u3002\u8fd9\u6837\uff0c\u4efb\u4f55\u4e00\u6761\u4e0d\u5728\u8fd9\u4e2a\u4ea4\u4e0a\u7684\u8fb9\u5220\u6389\u90fd\u662f\u6ca1\u7528\u7684\u3002\u6240\u4ee5\u6211\u4eec\u7528\u6811\u5256\u6216\u8005\u500d\u589e\uff08\u6211\u5199\u7684\u6811\u5256\uff09\u627e\u5b83\u7684\u6700\u5927\u503c\uff0c\u7528\u6240\u6709\u94fe\u957f\u5ea6\u7684\u6700\u5927\u503c\u53bb\u51cf\uff0c\u770b\u662f\u5426\u5c0f\u4e8e$k$\u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u6ca1\u5fc5\u8981\u4e8c\u5206\u5427\u3002\n\n\u6bcf\u6b21\u5904\u7406\u7684\u90fd\u662f\u6700\u5927\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u5c31\u6309\u957f\u5ea6\u6392\u4e2a\u5e8f\uff0c\u7ef4\u62a4\u4ea4\u96c6\u626b\u4e00\u904d\u5c31\u884c\u4e86\u3002\n\n\u90a3\u4e48\u91cd\u70b9\u6765\u4e86\uff0c\u5982\u4f55\u4ea4\u4e24\u6761\u94fe\u5462\uff1f\n\n\u55ef\uff0c\u5177\u4f53\u770b\u6ce8\u91ca\u5427\u3002\n```cpp\n#include<algorithm>\n#include<vector>\n#include<cassert>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n    int x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c)&&c!='-') c=getchar();\n    if(c=='-'){\n        f=1;\n        c=getchar();\n    }\n    while(isdigit(c)){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return f?-x:x;\n}\nconst int maxn=3e5+5;\nint n,m,u[maxn],v[maxn];\nstruct edge{\n\tint from,to,dist;\n\tedge(int u,int v,int w):\n\t\tfrom(u),to(v),dist(w){}\n};\nvector<edge> edges;\nvector<int> g[maxn];\nvoid add_edge(int u,int v,int w){\n\tg[u].push_back(edges.size());\n\tedges.push_back(edge(u,v,w));\n\tg[v].push_back(edges.size());\n\tedges.push_back(edge(v,u,w));\n}\n//\u6811\u5256\u57fa\u672c\u64cd\u4f5c\nint fa[maxn],size[maxn],hson[maxn],dep[maxn],w[maxn];\n//\u7531\u4e8e\u672c\u9898\u662f\u8fb9\u6743\uff0c\u8fd9\u91cc\u4ee4w[i]\u4e3ai\u5230\u7236\u4eb2\u7684\u8fb9\u6743\nvoid dfs1(int u){\n\tsize[u]=1;\n\thson[u]=0;\n\tdep[u]=dep[fa[u]]+1;\n\tfor(int i=0;i<g[u].size();i++){\n\t\tedge& e=edges[g[u][i]];\n\t\tif(e.to==fa[u]) continue;\n\t\tfa[e.to]=u;\n\t\tw[e.to]=e.dist;\n\t\tdfs1(e.to);\n\t\tsize[u]+=size[e.to];\n\t\tif(size[e.to]>size[hson[u]]) hson[u]=e.to;\n\t}\n}\nint pos[maxn],top[maxn];\nvector<int> f;\nvoid dfs2(int u){\n\tpos[u]=f.size();\n\tf.push_back(u);\n\tif(hson[u]){\n\t\ttop[hson[u]]=top[u];\n\t\tdfs2(hson[u]);\n\t}\n\tfor(int i=0;i<g[u].size();i++){\n\t\tint v=edges[g[u][i]].to;\n\t\tif(v==fa[u]||v==hson[u]) continue;\n\t\ttop[v]=v;\n\t\tdfs2(v);\n\t}\n}\nint h[maxn];\nint lca(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y]) swap(x,y);\n\treturn y;\n}\nint s[maxn];\nint len[maxn];\n//\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u957f\u5ea6\nint sum(int x,int y){\n\tint ans=0;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans+=s[pos[x]]-s[pos[top[x]]-1];\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y]) swap(x,y);\n\tans+=s[pos[x]]-s[pos[y]];\n\treturn ans;\n}\n//st\u8868\nint st[maxn][20];\nvoid get_st(){\n\tfor(int i=0;i<n;i++) st[i][0]=w[f[i]];\n\tfor(int i=1;(1<<i)<n;i++)\n\t    for(int j=0;j+(1<<i)-1<n;j++)\n\t        st[j][i]=max(st[j][i-1],st[j+(1<<(i-1))][i-1]);\n}\nint p[maxn];\nbool cmp(int a,int b){\n\treturn len[a]>len[b];\n}\n//\u6392\u5e8f\u540e\u8def\u5f84\u7684\u524d\u540e\u7f00\u6700\u5927\u503c\nint premax[maxn],postmax[maxn];\nstruct chain{//\u8fd9\u91cc\u6211\u628a\u6bcf\u6761\u8def\u5f84\u62c6\u6210\u4ece\u4e0a\u5230\u4e0b\u7684\u4e00\u6761\u94fe\n\tint h,t;//h\u8868\u793a\u94fe\u9876\uff0ct\u8868\u793a\u94fe\u5c3e\n\tchain(int h,int t):h(h),t(t){}\n};\nchain inter(chain a,chain b){//\u53d6\u4e24\u6761\u94fe\u7684\u4ea4\n\tif(dep[a.t]<dep[b.h]||dep[b.t]<dep[a.h]) return chain(0,0);\n\t//\u6309\u6df1\u5ea6\u5224\u65ad\u4ea4\u4e3a\u7a7a\n\t//\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4ee4chain(0,0)\u8868\u793a\u7a7a\u94fe\n\telse if(lca(a.h,b.h)==a.h){//a\u7684\u9876\u662fb\u7684\u9876\u7684\u7956\u5148\n\t    if(lca(a.t,b.h)==b.h) return chain(b.h,lca(a.t,b.t));\n\t    //a\u7684\u5c3e\u5728b\u4e0a\uff0c\u5373a\u4e0eb\u6709\u4ea4\n\t    else return chain(0,0);\n\t}\n\telse if(lca(a.h,b.h)==b.h){//\u7c7b\u4f3c\n\t    if(lca(b.t,a.h)==a.h) return chain(a.h,lca(a.t,b.t));\n\t    else return chain(0,0);\n\t}\n\treturn chain(0,0);//\u5982\u679ca\u4e0eb\u7684\u9876\u6ca1\u6709\u7956\u5148\u5173\u7cfb\uff0c\u5219\u4ea4\u4e00\u5b9a\u4e3a\u7a7a\n\t/*\n\t\u5176\u5b9e\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u79cd\u9519\u8bef\u5199\u6cd5\u53ef\u4ee5\u8fc7\u6d1b\u8c37\u6570\u636e\n\t\u7136\u540e\u88ab\u6211hack\u6389\u4e86\n\t\u8fd9\u91cc\u7684\u5199\u6cd5\u5e94\u8be5\u662f\u5bf9\u7684\uff08\u53cd\u6b63\u6211\u4e0d\u4f1ahack\uff09\n\t\u5982\u679c\u6709hack\u6570\u636e\u8bf7\u5728\u8bc4\u8bba\u533a\u6307\u51fa\uff08\u53ef\u4ee5\u4ec5hack\u8fd9\u4e2a\u51fd\u6570\uff09\n\t*/\n}\nchain merge(chain a,chain b){//\u4e24\u6761\u9876\u76f8\u540c\u7684\u94fe\u7684\u5e76\n\tif(a.h==0) return b;\n\tif(b.h==0) return a;\n\treturn chain(dep[a.h]<dep[b.h]?a.h:b.h,dep[a.t]>dep[b.t]?a.t:b.t);\n}\nint rmq(int l,int r){\n\tint k=0;\n\twhile((1<<(k+1))<=r-l+1) k++;\n\treturn max(st[l][k],st[r-(1<<k)+1][k]);\n}\n//\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u6700\u5927\u503c\nint tmax(int x,int y){\n    int ans=0;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans=max(ans,rmq(pos[top[x]],pos[x]));\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y]) swap(x,y);\n\tif(x!=y) ans=max(ans,rmq(pos[y]+1,pos[x]));\n\treturn ans;\n}\nint main(){\n    #ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    m=readint();\n    for(int i=1;i<n;i++){\n    \tint a,b,t;\n    \ta=readint();\n    \tb=readint();\n    \tt=readint();\n    \tadd_edge(a,b,t);\n\t}\n\tfor(int i=0;i<m;i++){\n\t\tu[i]=readint();\n\t\tv[i]=readint();\n\t}\n\tfa[1]=0;\n\tw[1]=0;\n\tsize[0]=0;\n\tdep[0]=0;\n\tdfs1(1);\n\ttop[1]=1;\n\tdfs2(1);\n\t//\u9884\u5904\u7406\u6bcf\u6761\u8def\u5f84\u7684\u9876\n\tfor(int i=0;i<m;i++) h[i]=lca(u[i],v[i]);\n\t//\u9884\u5904\u7406\u6bcf\u6761\u8def\u5f84\u7684\u957f\u5ea6\n\t//\u5176\u5b9e\u8fd9\u4e24\u6b65\u53ef\u4ee5\u5408\u5e76\n\ts[0]=0;\n\tfor(int i=1;i<n;i++) s[i]=s[i-1]+w[f[i]];\n\tfor(int i=0;i<m;i++) len[i]=sum(u[i],v[i]);\n\tget_st();\n\tfor(int i=0;i<m;i++) p[i]=i;\n\t//\u6392\u5e8f\u5e76\u9884\u5904\u7406\u524d\u540e\u7f00\u6700\u5927\u503c\n\tsort(p,p+m,cmp);\n    premax[0]=len[p[0]];\n    for(int i=1;i<m;i++) premax[i]=max(premax[i-1],len[p[i]]);\n    postmax[m]=0;\n    for(int i=m-1;i>=0;i--) postmax[i]=max(postmax[i+1],len[p[i]]);\n    int ans=premax[m-1];\n    //\u521d\u59cb\u4ea4\n    chain c1=chain(h[p[0]],u[p[0]]),c2=chain(h[p[0]],v[p[0]]);\n\tfor(int i=0;i<m;i++){\n\t\tif(i!=0){\n\t\t\tc1=merge(inter(chain(h[p[i]],u[p[i]]),c1),inter(chain(h[p[i]],v[p[i]]),c1));\n\t\t\tc2=merge(inter(chain(h[p[i]],u[p[i]]),c2),inter(chain(h[p[i]],v[p[i]]),c2));\n\t\t\t/*\n\t\t\t\u8fd9\u91cc\u7684\u601d\u8def\u9700\u8981\u89e3\u91ca\u4e00\u4e0b\uff1a\n\t\t\t\u9996\u5148\u628a\u8def\u5f84\u62c6\u6210\u94fe\uff0c\u4e0e\u4e4b\u524d\u7684\u4ea4\u53d6\u4ea4\n\t\t\t\u7136\u540e\u53d6\u5e76\n\t\t\t\u53ef\u4ee5\u8bc1\u660e\uff08\u611f\u6027\u7406\u89e3\uff09\u4e24\u540c\u9876\u94fe\u4e0e\u540c\u4e00\u94fe\u76f8\u4ea4\u4e00\u5b9a\u540c\u9876\n\t\t\t\u6240\u4ee5\u4e0a\u9762merge\u90a3\u79cd\u5199\u6cd5\u662f\u6ca1\u95ee\u9898\u7684\n\t\t\t*/\n\t\t\tif(c1.h==0&&c2.h==0) break;//\u4f18\u5316\uff1a\u5982\u679c\u5df2\u7ecf\u7a7a\u4e86\u5c31\u76f4\u63a5break\n\t\t\tif(c1.h==0) c1.h=c1.t=c2.h;\n\t\t\tif(c2.h==0) c2.h=c2.t=c1.h;\n\t\t}\n\t\tans=min(ans,max(premax[i]-tmax(c1.t,c2.t),postmax[i+1]));//\u66f4\u65b0\u7b54\u6848\n\t}\n    return 0;\n}\n```\n",
        "postTime": 1573221639,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "[$\\text{My Blog}$](https://www.cnblogs.com/santiego/p/11754008.html)\n\n\u518d\u628a\u8fd9\u9053\u9898\u601d\u8def\u8bb2\u6e05\u695a\u4e00\u70b9\u5427\n\n\u9644\u8d60\u6837\u4f8b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7l0cikln.png)\n\n\u9996\u5148\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u7b54\u6848\uff0c\u5c06\u6c42\u89e3\u95ee\u9898\u8f6c\u6362\u4e3a\u5224\u5b9a\uff0c\u5e76\u4e14\u6ce8\u610f\u5230\u7b54\u6848\u663e\u7136\u5177\u6709\u5355\u8c03\u6027\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5982\u4f55\u5feb\u901f\u5224\u5b9a\u3002\u5148\u9884\u5904\u7406\u51fa\u6240\u6709\u8ba1\u5212\u8def\u5f84\u957f\uff08$dis[i]$\u8868\u793a\u6839\u8282\u70b9\u5230\u8282\u70b9$i$\u7684\u8ddd\u79bb\uff0c$dis[u]+dis[v]-2\\times dis[lca(u,v)]$\u5373\u4e3a\u6811\u4e0a$u,v$\u8def\u5f84\u957f\uff09\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u8def\u5f84\u957f\u5df2\u7ecf\u8d85\u8fc7\u4e8c\u5206\u8ddd\u79bb$x$\u7684\u8ba1\u5212\uff0c\u6211\u4eec**\u5fc5\u987b\u80fd\u627e\u5230\u4e00\u6761\u516c\u5171\u8fb9 \u4e14 \u5220\u53bb\u6b64\u8fb9\u540e\u6700\u957f\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e$x$**\uff0c\u5426\u5219\u65e0\u6cd5\u6ee1\u8db3$x$\uff0c\u5224\u5b9a\u5f53\u524d$x$\u4e3a\u5047\u3002\n\n\u4e4b\u540e\u8003\u8651\u5982\u4f55\u5feb\u901f\u6c42\u5f97\u516c\u5171\u8fb9\uff0c\u4f7f\u7528\u6811\u4e0a\u5dee\u5206\uff0c\u5177\u4f53\u5c06\u8fb9\u585e\u5165\u8f83\u6df1\u7684\u70b9\uff0c`cnt[u]+=1,cnt[v]+=1,cnt[lca(u,v)]-=2`\uff0c\u6700\u540e\u518d\u56de\u6eaf\u65f6\u6c42\u6811\u4e0a\u524d\u7f00\u548c\u5373\u53ef\u6c42\u5f97\u8fb9\u8986\u76d6\u6b21\u6570\u3002\u4e00\u6761\u8fb9\u662f\u516c\u5171\u8fb9\u5f53\u4e14\u4ec5\u5f53\u8986\u76d6\u6b21\u6570\u4e3a\u8def\u5f84\u4e2a\u6570\u3002\n\n\u7efc\u4e0a\uff0c\u5224\u5b9a\u65f6\u627e\u5230\u8d85\u8fc7$x$\u7684\u8def\u5f84\u7684\u6700\u957f\u7684\u516c\u5171\u8fb9\u540e\uff0c\u5224\u65ad\u5220\u53bb\u540e\u662f\u5426\u80fd\u6ee1\u8db3$x$\u5373\u53ef\n\n~~\u5176\u5b9e\u4e0d\u662f\u5f88\u6bd2\u7624\uff0c\u76f8\u6bd4\u4e8e\u761f\u75ab\u63a7\u5236~~\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#define MAXN 300003\n#define LOG 20\nusing namespace std;\ninline int read(){\n    char ch=getchar();int s=0;\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') s=s*10+(ch^'0'),ch=getchar();\n    return s;\n}\nint head[MAXN],nxt[MAXN*2],vv[MAXN*2],ww[MAXN*2],tot;\ninline void add_edge(int u, int v, int w){\n    vv[++tot]=v;\n    ww[tot]=w;\n    nxt[tot]=head[u];\n    head[u]=tot;\n}\nint dis[MAXN];\nint dep[MAXN],f[MAXN][LOG];\nvoid dfs(int u, int fa){\n    dep[u]=dep[fa]+1;\n    f[u][0]=fa;\n    for(int i=1;i<LOG;++i)\n        f[u][i]=f[f[u][i-1]][i-1];\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i],w=ww[i];\n        if(v==fa) continue;\n        dis[v]=dis[u]+w;\n        dfs(v, u);\n    }\n}\nint lca(int a, int b){\n    if(dep[a]<dep[b]) swap(a,b);\n    for(int i=LOG-1;i>=0;--i)\n        if(dep[f[a][i]]>=dep[b])\n            a=f[a][i];\n    if(a==b) return a;\n    for(int i=LOG-1;i>=0;--i)\n        if(f[a][i]!=f[b][i])\n            a=f[a][i],b=f[b][i];\n    return f[a][0];\n}\nint n,m;\nstruct nod{\n    int u,v,lca;\n}a[MAXN];\nint d[MAXN],dmx;\nint cnt[MAXN];\nvoid calc(int u, int fa, const int num, int &res){\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i],w=ww[i];\n        if(v==fa) continue;\n        calc(v, u, num, res);\n        if(cnt[v]==num) res=max(res, w);\n        cnt[u]+=cnt[v];\n    }\n}\nbool check(int x){\n    memset(cnt, 0, sizeof cnt);\n    int num=0,res=0;\n    for(int i=1;i<=m;++i){\n        if(d[i]<=x) continue;\n        cnt[a[i].u]+=1;\n        cnt[a[i].v]+=1;\n        cnt[a[i].lca]-=2;\n        ++num;\n    }\n    if(num==0) return x>=dmx;\n    calc(1, 0, num, res);\n    if(dmx-res<=x) return 1;\n    return 0;\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<n;++i){\n        int u=read(),v=read(),w=read();\n        add_edge(u, v, w);\n        add_edge(v, u, w);\n    }\n    dfs(1, 0);\n    for(int i=1;i<=m;++i) a[i].u=read(),a[i].v=read();\n    for(int i=1;i<=m;++i){\n        a[i].lca=lca(a[i].u, a[i].v);\n        d[i]=dis[a[i].u]+dis[a[i].v]-2*dis[a[i].lca];\n        dmx=max(dmx, d[i]);\n    }\n    int l=0,r=dmx;\n    int ans=-1;\n    while(l<=r){\n        int mid=(l+r)>>1;\n        if(check(mid)) ans=mid, r=mid-1;\n        else l=mid+1;\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n```\n\n\n",
        "postTime": 1572257140,
        "uid": 63896,
        "name": "Santiego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "## $Solution$\n\n\u60f3\u60f3\u8fd8\u662f\u6765\u53d1\u4e2a\u9898\u89e3\u5427\uff0c\u6bd5\u7adf\u5199\u4e86\u4e24\u4e2a\u5c0f\u65f6\u3002\n\n\u4e00\u6863\u5206\u4e00\u6863\u5206\u8bb2\uff0c\u6162\u6162\u6765\u3002\n\n\n### $Subtask1: n <= 3000\\ (50pts)$ \n\n\u8fd9\u6863\u5206\u5c31\u662f\u8003\u8651\u9884\u5904\u7406\u500d\u589e\u70b9\u548c\u8fb9\u6743\u6570\u7ec4\uff0c\u505a\u5230 $O(log\\ n)$ \u6c42\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u7136\u540e\u66b4\u529b\u679a\u4e3e\u628a\u54ea\u4e00\u6761\u8fb9\u8fb9\u6743\u53d8\u4e3a $0$ \uff0c\u6bcf\u6b21\u66f4\u65b0\u8fb9\u6743\u6570\u7ec4\u7136\u540e $m$ \u4e2a\u70b9\u5bf9\u8ddd\u79bb\u5168\u90e8\u6c42\u4e00\u904d\u53d6 $Max$ \u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(nm\\ log\\ n)$ \u3002\n\n\n### $Subtask2: m == 1\\ (10 pts)$\n\n$ps:$ \u6b64\u5904\u8bf4\u7684 $10pts$ \u662f\u6307\u4f7f\u4f60\u7684\u5f97\u5206\u5728 $Subtask1$ \u7684\u57fa\u7840\u4e0a\u589e\u52a0 $10pts$ \u3002\n\n\u53ea\u6709\u4e00\u6761\u8def\u5f84\u8981\u8dd1\uff0c\u5c31\u8003\u8651\u76f4\u63a5\u6c42\u8fd9\u6761\u8def\u5f84\uff0c\u66b4\u8df3\u7684\u540c\u65f6\u6c42\u4e00\u4e0b\u8def\u5f84\u4e2d\u6743\u503c\u6700\u5927\u7684\u90a3\u6761\u8fb9\uff0c\u603b\u4ef7\u503c\u51cf\u53bb\u6743\u503c\u6700\u5927\u7684\u8fb9\u7684\u8fb9\u6743\u5c31\u662f\u7b54\u6848\uff0c\u590d\u6742\u5ea6 $O(n)$ \u3002\n\n\n### $Subtask3: v = u + 1\\ (20 pts)$ \n\n\u4e5f\u5c31\u662f\u4e00\u6761\u94fe\u7684\u60c5\u51b5\u3002\n\u8003\u8651\u540e\u9762\u7ed9\u4f60\u7684 $u \\to v$ \u7684\u8def\u5f84\u662f\u786e\u5b9a\u7684\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u4e8c\u5206\u65f6\u95f4\uff0c\u5982\u679c\u5f53\u524d\u8fd9\u6bb5\u533a\u95f4\u548c > \u4e0a\u754c\u65f6\u95f4\uff0c\u5c31\u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u533a\u95f4\u548c\u4ee5\u53ca\u533a\u95f4\u3002\u518d\u770b\u533a\u95f4 Max \u53bb\u6389\u540e\u662f\u5426\u53ef\u4ee5\uff0c\u4e0d\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de $0$ \u3002 \n\n\u7136\u540e\u5982\u679c\u53c8\u6709\u4e00\u6bb5\u533a\u95f4\u4e0d\u884c\u4e86\uff0c\u5c31\u8ddf\u524d\u9762\u7684\u533a\u95f4\u53d6\u4ea4\u96c6\uff0c\u6ca1\u6709\u4ea4\u96c6\u5c31\u8fd4\u56de $0$ \uff0c\u6709\u4ea4\u96c6\u5c31\u518d\u8be2\u95ee\u533a\u95f4 Max \uff0c\u8ddf\u5f53\u524d\u7684\u6700\u5927\u533a\u95f4\u548c\u53d6\u5dee\u770b\u8fd8\u80fd\u4e0d\u80fd\u6ee1\u8db3\u7b54\u6848\u3002\u505a\u5230\u5e95\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(n\\ log^2\\ n)$ \u3002\n\n\n### $Subtask4: n <= 3 \\times 10^5\\ (20pts)$ \n\n\u4e5f\u5c31\u662f\u6b63\u89e3\u4e86\u3002\n\n\u8003\u8651\u521a\u521a\u7684 $Subtask3$ \u7684\u505a\u6cd5\u5982\u4f55\u8f6c\u79fb\u5230\u6811\u4e0a\uff0c\u76f4\u63a5\u7528\u6811\u5256\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u5bf9\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u6811\u4e0a\u5dee\u5206\u53bb\u8bb0\u5f55\u6bcf\u6761\u8fb9\u88ab\u5305\u542b\u7684\u6b21\u6570\uff0c\u7136\u540e\u679a\u4e3e\u4e00\u4e2a\u70b9\u662f\u5426\u88ab\u6240\u6709\u4e0d\u6ee1\u8db3\u7684\u8def\u5f84\u5305\u542b\uff0c\u5982\u679c\u662f\u5c31\u5224\u4e00\u4e0b\u6700\u5927\u8def\u5f84\u548c\u51cf\u53bb\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u540e\u662f\u5426\u6ee1\u8db3\uff0c\u6ee1\u8db3\u76f4\u63a5\u8fd4\u56de $1$ \uff0c\u5230\u5e95\u8fd8\u6ca1\u6709\u5c31\u662f $0$ \u3002\n\n\u5982\u6b64\uff0c\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n## $Code:$ \n\n```cpp\n#include <bits/stdc++.h>\n//#include <tr1/unordered_map>\n//#include\"Bignum/bignum.h\"\n//#define big bignum\n#define lowbit(x) (x & -x)\n#define debug(x) (cout << \"#x = \" << (x) << endl)\n#define Set(x, i) memset (x, i, sizeof(x))\n#define R register\n#define For(i, j, k) for(R int i = (j); i <= (int) (k); ++i)\n#define Rep(i, j, k) for(R int i = (j); i >= (int) (k); --i)\n#define Cross(i, j, k) for(R int i = (j); i; i = (k))\nusing namespace std;\ntypedef long long ll;\nconst ll N = 300011;\nconst ll INF = 5e16;\n\nnamespace IO {\n\n\tinline char gc() {\n\t\tstatic char buf[100000], *p1 = buf, *p2 = buf;\n\t\treturn (p1 == p2) && (p2 = (p1 = buf) +\n\t\t\tfread(buf, 1, 100000, stdin), p1 == p2)? EOF: *p1++;\n\t}\n\n\t#define dd ch = getchar()\n\tinline int read() {\n\t\tR int x = 0, f = 0; R char dd;\n\t\tfor (; !isdigit(ch); dd) f ^= (ch == '-');\n\t\tfor (; isdigit(ch); dd)  x = x * 10 + (ch ^ 48);\n\t\treturn f? -x: x;\n\t}\n\t#undef dd\n\n\tinline void write ( ll x ) {\n\t\tif (x < 0) x = -x, putchar('-');\n\t\tif (x > 9) write(x / 10); putchar(x % 10 | 48);\n\t}\n\n\tinline void wrn ( ll x ) { write(x), putchar(' '); }\n\n\tinline void wln ( ll x ) { write(x), putchar('\\n'); }\n\n\tinline void wlnn ( ll x, ll y ) { wrn(x), wln(y); }\n\n}\n\nusing IO::wln;\nusing IO::read;\n\nnamespace Cesare {\n\t\n\tll Tag[N];\n\tint U[N], V[N];\n\tint n, m, uu[N], vv[N], ww[N];\n\t\n\tstruct Edge {\n\t\tint To, Next, w;\n\t} e[N << 1];\n\t\n\tint cnt = 2, head[N];\n\t\n\tinline void add ( int u, int v, int w ) {\n\t\te[++cnt] = (Edge) {v, head[u], w}, head[u] = cnt;\n\t\te[++cnt] = (Edge) {u, head[v], w}, head[v] = cnt;\n\t}\n\t\n\tinline void Cmax ( ll &a, ll b ) { (a < b) && (a = b); }\n\t\n\tll w[21][N];\n\tint dep[N], f[21][N]; \n\t\n\tinline void dfs ( int u, int fa ) {\n\t\tdep[u] = dep[f[0][u] = fa] + 1;\n\t\tFor ( i, 1, 20 ) \n\t\t\tf[i][u] = f[i - 1][f[i - 1][u]], \n\t\t\tw[i][u] = w[i - 1][u] + w[i - 1][f[i - 1][u]];\n\t\tCross ( i, head[u], e[i].Next ) {\n\t\t\tll v = e[i].To;\n\t\t\tif (v == fa) continue;\n\t\t\tw[0][v] = e[i].w, dfs(e[i].To, u);\n\t\t}\n\t}\n\t\n\tinline int LCA ( int x, int y ) {\n\t\tif (dep[x] < dep[y]) swap(x, y);\n\t\tfor (int i = 20; ~i; --i) \n\t\t\tif (dep[f[i][x]] >= dep[y]) x = f[i][x];\n\t\tif (x == y) return x;\n\t\tfor (int i = 20; ~i; --i) \n\t\t\tif (f[i][x] != f[i][y]) x = f[i][x], y = f[i][y];\n\t\treturn f[0][x];\n\t}\n\t\n\tinline void Update ( int x, int y ) {\n\t\tll lca = LCA(x, y);\n\t\t++Tag[x], ++Tag[y], Tag[lca] -= 2;\n\t}\n\t\n\tinline void Dfs ( int u, int fa ) {\n\t\tCross ( i, head[u], e[i].Next ) {\n\t\t\tll v = e[i].To;\n\t\t\tif (v == fa) continue;\n\t\t\tDfs(v, u), Tag[u] += Tag[v];\n\t\t}\n\t}\n\n\tinline int IsCycle() {\n\t\tFor ( i, 1, n - 1 ) \n\t\t\tif (uu[i] != i || vv[i] != i + 1) return 1;\n\t\treturn 0;\n\t}\n\t\n\tinline ll Dision ( int x, int y ) {\n\t\tll res = 0;\n\t\tif (dep[x] < dep[y]) swap(x, y);\n\t\tfor (int i = 20; ~i; --i) \n\t\t\tif (dep[f[i][x]] >= dep[y]) \n\t\t\t\tres += w[i][x], x = f[i][x];\n\t\tif (x == y) return res;\n\t\tRep ( i, 20, 0 ) if (f[i][x] != f[i][y]) \n\t\t\tres += w[i][x] + w[i][y], x = f[i][x], y = f[i][y];\n\t\treturn res + w[0][x] + w[0][y];\n\t}\n\t\nnamespace Subtask1 {\n\t\n\tll Ans = INF;\n\t\n\tinline void Dfs ( int u, int fa ) {\n\t\tFor ( i, 1, 20 ) \n\t\t\tw[i][u] = w[i - 1][u] + w[i - 1][f[i - 1][u]];\n\t\tCross ( i, head[u], e[i].Next ) \n\t\t\tif (e[i].To != f[0][u]) Dfs(e[i].To, u);\n\t}\n\t\n\tinline void Solve ( int pos ) {\n\t\tint W, u = uu[pos], v = vv[pos];\n\t\tint x = (dep[u] > dep[v])? u: v;\n\t\t\n\t\tW = w[0][x], w[0][x] = 0; Dfs(1, 0);\n\t\t\n\t\tll Mx = 0;\n\t\tFor ( i, 1, m ) \n\t\t\tMx = max(Mx, Dision(U[i], V[i]));\n\t\tAns = min(Ans, Mx);\n\t\t\n\t\tw[0][x] = W; Dfs(x, 0);\n\t}\n\t\n\tvoid main() {\n\t\tFor ( i, 1, n - 1 ) Solve(i);\n\t\twln(Ans), exit(0);\n\t}\n\t\n}\n\t\nnamespace Subtask2 {\n\t\n\tinline ll Solve ( int x, int y ) {\n\t\tll Mx = 0, res = 0;\n\t\tfor (; x != y; ) {\n\t\t\tif (dep[x] < dep[y]) swap(x, y);\n\t\t\tres += w[0][x], Mx = max(Mx, w[0][x]), x = f[0][x];\n\t\t} return res - Mx;\n\t}\n\t\n\tvoid main() {\n\t\twln(Solve(U[1], V[1])), exit(0);\n\t}\n\t\n}\n\nnamespace Subtask3 {\n\t\n\t/*\n\t\t\u4e00\u6761\u94fe\u600e\u4e48\u505a\u3002 \n\t\t\u8003\u8651\u540e\u9762\u7ed9\u4f60\u7684 u -> v \u7684\u8def\u5f84\u662f\u786e\u5b9a\u7684\u3002 \n\t\t\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u4e8c\u5206\u65f6\u95f4\u3002 \n\t\t\u5982\u679c\u5f53\u524d\u8fd9\u6bb5\u533a\u95f4\u548c > \u4e0a\u754c\u65f6\u95f4\uff0c \n\t\t\u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u533a\u95f4\u548c\u4ee5\u53ca\u533a\u95f4 \n\t\t\u518d\u770b\u533a\u95f4 Max \u53bb\u6389\u540e\u662f\u5426\u53ef\u4ee5\uff0c\u4e0d\u53ef\u4ee5\u76f4\u63a5 -1 \u3002 \n\t\t\u7136\u540e\u5982\u679c\u53c8\u6709\u4e00\u6bb5\u533a\u95f4\u4e0d\u884c\u4e86\u3002 \n\t\t\u8ddf\u524d\u9762\u7684\u533a\u95f4\u53d6\u4ea4\u96c6\uff0c\u6ca1\u6709\u4ea4\u96c6\u5c31\u662f -1 \u3002 \n\t\t\u6709\u4ea4\u96c6\u5c31\u518d\u8be2\u95ee\u533a\u95f4 Max \uff0c\u8ddf\u5f53\u524d\u7684\u6700\u5927\u533a\u95f4\u548c \n\t\t\u53d6\u5dee\u770b\u884c\u4e0d\u884c\u3002 \n\t\t\u505a\u5230\u5e95\u5373\u53ef\u3002 \n\t*/\n\t\n\t#define ls(x) (x << 1)\n\t#define rs(x) (x << 1 | 1)\n\t#define mid ((l + r) >> 1)\n\t\n\tll T[N << 2], Mx[N << 2];\n\t\n\tinline void pushUp ( int p ) {\n\t\tT[p] = T[ls(p)] + T[rs(p)];\n\t\tMx[p] = max(Mx[ls(p)], Mx[rs(p)]);\n\t}\n\t\n\tinline void build ( int p, int l, int r ) {\n\t\tif (l == r) return (void) (T[p] = Mx[p] = ww[l]);\n\t\tbuild(ls(p), l, mid); build(rs(p), mid + 1, r); pushUp(p);\n\t}\n\t\n\tinline ll QuerySum ( int p, int l, int r, int ul, int ur, ll res = 0 ) {\n\t\tif (l >= ul && r <= ur) return T[p];\n\t\tif (mid >= ul) res += QuerySum(ls(p), l, mid, ul, ur);\n\t\tif (mid < ur)  res += QuerySum(rs(p), mid + 1, r, ul, ur);\n\t\treturn res;\n\t}\n\t\n\tinline ll QueryMax ( int p, int l, int r, int ul, int ur, ll res = 0 ) {\n\t\tif (l >= ul && r <= ur) return Mx[p];\n\t\tif (mid >= ul) Cmax(res, QueryMax(ls(p), l, mid, ul, ur));\n\t\tif (mid < ur)  Cmax(res, QueryMax(rs(p), mid + 1, r, ul, ur));\n\t\treturn res;\n\t}\n\t\n\tinline int Check ( ll x ) {\n\t\tll Ms = 0;\n\t\tint nowl = 1, nowr = n;\n\t\tFor ( i, 1, m ) {\n\t\t\tint u = U[i], v = V[i];\n\t\t\tll s = QuerySum(1, 1, n, u, v - 1);\n\t\t\t\n\t\t\tif (s <= x) continue;\n\t\t\t\n\t\t\tnowl = max(nowl, u), \n\t\t\tnowr = min(nowr, v);\n\t\t\tif (nowl > nowr) return 0;\n\t\t\t\n\t\t\tMs = max(Ms, s);\n\t\t\tif (Ms - QueryMax(1, 1, n, nowl, nowr) > x) return 0;\n\t\t} return 1;\n\t}\n\t\n\tvoid main() {\n\t\tbuild(1, 1, n);\n\t\t\n\t\tll l = 1, r = 1e10;\n\t\twhile (l <= r) {\n\t\t\tll Mid = (l + r) >> 1;\n\t\t\tCheck(Mid)? r = Mid - 1: l = Mid + 1;\n\t\t} wln(l), exit(0);\n\t}\n\t\n}\n\t\n\tint cc, Need[N];\n\t\n\tinline int Check ( ll x ) {\n\t\tcc = 0;\n\t\tll ma = 0;\n\t\tSet (Tag, 0);\n\t\tFor ( i, 1, m ) {\n\t\t\tll dis = Dision(U[i], V[i]);\n\t\t\tif (dis > x) Need[++cc] = i, ma = max(ma, dis);\n\t\t} \n\t\tif (!cc) return 1;\n\t\t\n\t\tFor ( i, 1, cc ) Update(U[Need[i]], V[Need[i]]);\n\t\t\n\t\tDfs(1, 0);\n\t\tFor ( i, 1, n ) if (Tag[i] == cc) \n\t\t\tif (ma - w[0][i] <= x) return 1;\n\t\treturn 0;\n\t}\n\t\n\tll sum;\n\tint mxx;\n\t\n\tint main() {\n\t\tn = read(), m = read();\n\t\tfor (int i = 1, w; i < n; ++i) \n\t\t\tuu[i] = read(), vv[i] = read(), \n\t\t\tww[i] = read(), add(uu[i], vv[i], ww[i]), mxx = max(mxx, ww[i]); \n\t\tdfs(1, 0);\n\t\t\n\t\tfor (int i = 1; i <= m; ++i) \n\t\t\tU[i] = read(), V[i] = read();\n\t\tFor ( i, 1, m ) Cmax(sum, Dision(U[i], V[i]));\n\t\t\n\t\tif (n <= 2000) Subtask1 :: main();\n\t\telse if (m == 1) Subtask2 :: main();\n\t\telse if (!IsCycle()) Subtask3 :: main();\n\t\t\n\t\tll l = sum - mxx, r = sum;\n\t\twhile (l <= r) {\n\t\t\tll Mid = (l + r) >> 1;\n\t\t\tCheck(Mid)? r = Mid - 1: l = Mid + 1;\n\t\t} return wln(l), 0;\n\t}\n\t\n}\n\nint main()\n{\n//\tfreopen(\"transport17.in\", \"r\", stdin);\n//\tfreopen(\".out\", \"w\", stdout);\n\n\treturn Cesare :: main();\n}\n\n/*\n\n*/\n\n\n```",
        "postTime": 1571657751,
        "uid": 104379,
        "name": "Cesare",
        "ccfLevel": 7,
        "title": "\u8fd0\u8f93\u8ba1\u5212"
    },
    {
        "content": "\u6765\u4e3apascal\u515a\u8d21\u732e\u4e00\u6ce2\u3002\u65b9\u6cd5\u7684\u8bdd\u5f88\u591a\u9898\u89e3\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u5c31\u518d\u68b3\u7406\u4e00\u904d\u5427\uff08\u6211\u7528\u7684\u662f\u500d\u589e\u6c42\u7684LCA\u52a0\u4e8c\u5206\u52a0\u5dee\u5206\uff09\n\n1.\u5efa\u6811\uff0c\u987a\u4fbf\u628a\u6df1\u5ea6\u4ee5\u53ca\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb(dis\u6570\u7ec4\uff09\u7ed9\u6c42\u4e86\n\n2.\u8bfb\u5165\u8d77\u59cb\u70b9\uff0c\u628a\u539f\u59cb\u8def\u5f84\u957f\u5ea6\u4e00\u8d77\u6c42\u4e86(i\u5230j\u7684\u8ddd\u79bb\u5c31\u662fdis[i]+dis[j]-2\\*dis[lca(i,j)]\uff0c\u5176\u4e2ddis\u662f\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff09\uff0c\u7136\u540e\u6309\u8def\u5f84\u957f\u5ea6\u6392\u5e8f\n\n3.\u4e8c\u5206\u7b54\u6848\uff0c\u521d\u59cb\u7684\u8bbe\u7f6e\u7684\u8bddl=0\uff0cr=300000001\u5c31\u597d\uff0c\u4e5f\u5e76\u4e0d\u4f1a\u505a\u591a\u5c11\u6b21\n\n4.check\uff0c\u6c42\u51famid\u4e4b\u540e\uff0c\u6807\u8bb0\u6240\u6709\u5927\u4e8emid\u7684\u8def\u5f84\uff08\u5982\u679c\u6ca1\u6709\u7684\u8bdd\u663e\u7136mid\u53ef\u4ee5\u518d\u7f29\u5c0f\uff0cr:=mid\u5c31\u597d\uff09\uff0c\u82e5\u4ecei\u5230j\u7684\u8def\u5f84\u5927\u4e8emid\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5inc(cf[i]),inc(cf[j]),dec(cf[lca(i,j)],2),\u8fd9\u5c31\u662f\u5dee\u5206\u7684\u4e00\u822c\u505a\u6cd5\uff0c\u7528\u6765\u7edf\u8ba1\u67d0\u6761\u8fb9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\n\n5.\u7edf\u8ba1\u8fb9\u7ecf\u8fc7\u7684\u6b21\u6570\uff0c\u4e00\u904ddfs\u5373\u53ef\u3002cf[i]\u5373\u662fi\u5230\u5b83\u7684\u7236\u8282\u70b9\u90a3\u6761\u8def\u6240\u7ecf\u8fc7\u7684\u6b21\u6570\uff0c\u7edf\u8ba1\u5b8c\u4e4b\u540e\u770b\u6700\u5927\u7684cf\u662f\u5426\u7b49\u4e8e\u201c\u5927\u4e8emid\u7684\u8fb9\u6570\u91cf\u201c\uff0c\u5982\u679c\u7b49\u4e8e\u7684\u8bdd\uff0c\u53ea\u8981\u6700\u957f\u7684\u539f\u59cb\u8def\u5f84\u51cf\u53bb\u7ecf\u8fc7\u6b21\u6570\u6700\u591a\u7684\u8fb9\u91cc\u9762\u6700\u957f\u7684\u90a3\u6761\u4e4b\u540e\u5c0f\u4e8e\u7b49\u4e8emid\u5c31\u597d\uff08\u6709\u70b9\u7ed5\u4e0d\u8fc7\u6253\u8d77\u6765\u5e94\u8be5\u8fd8\u662f\u61c2\u7684\uff09\uff0c\u6ee1\u8db3\u4e0a\u8ff0\u60c5\u51b5\u7684\u8bdd\u8fd9\u4e2amid\u5c31\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u5c31\u8003\u8651\u66f4\u5c0f\u7684mid\u4e8c\u5206\u4e0b\u53bb\uff0c\u5426\u5219\u5c31\u628amid\u653e\u5927\n\nvar last,cf,d,st,ed,len,dis:array[0..300000] of longint;//cf\u662f\u5dee\u5206\u6570\u7ec4\uff0clen\u8bb0\u5f55\u8d77\u59cb\u70b9\u7684\u539f\u59cb\u8def\u5f84\u957f\uff0cdis\u662f\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\uff0cd\u662f\u6df1\u5ea6\n\n```cpp\n    w,next,e:array[0..600000] of longint;\n    f:Array[0..1000000,0..20] of longint;//\u500d\u589e\u6570\u7ec4\n    i,j,k,m,n,p,nq,num,t,l,r,mid,a,b,c,max,maxl:longint;ff:boolean;\nprocedure sort(l,r: longint);\n      var\n         i,j,x,y: longint;\n      begin\n         i:=l;\n         j:=r;\n         x:=len[(l+r) div 2];\n         repeat\n           while len[i]<x do\n            inc(i);\n           while x<len[j] do\n            dec(j);\n           if not(i>j) then\n             begin\n                y:=len[i];\n                len[i]:=len[j];\n                len[j]:=y;\n                y:=st[i];\n                st[i]:=st[j];\n                st[j]:=y;\n                y:=ed[i];\n                ed[i]:=ed[j];\n                ed[j]:=y;\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           sort(l,j);\n         if i<r then\n           sort(i,r);\n      end;\nprocedure bt(c:longint);\nvar p,po,i,j,k:longint;\nbegin\n    p:=last[c];\n    while p<>0 do\n    begin\n        po:=e[p];\n        if po<>f[c,0] then\n        begin\n            d[po]:=d[c]+1;//\u6c42\u6df1\u5ea6\n            f[po,0]:=c;\n            dis[po]:=dis[c]+w[p];//\u6c42\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\n            bt(po);\n        end;\n        p:=next[p];\n    end;\nend;\nfunction lca(u,v:longint):longint;\nvar i,j,k:longint;\nbegin\n    if d[u]<d[v] then\n    begin\n        k:=u;u:=v;v:=k;\n    end;\n    if d[u]>d[v] then\n      for k:=20 downto 0 do\n        if d[f[u,k]]>=d[v] then u:=f[u,k];\n    if u=v then exit(u);\n    for k:=20 downto 0 do\n      if f[u,k]<>f[v,k] then\n      begin\n          u:=f[u,k];\n          v:=f[v,k];\n      end;\n    exit(f[u,0]);\nend;\nprocedure dfs(c:longint);//\u7edf\u8ba1\u5dee\u5206\u6570\u7ec4\nvar i,j,k,p,po:longint;\nbegin\n    p:=last[c];\n    while p<>0 do\n    begin\n        po:=e[p];\n        if po<>f[c,0] then\n        begin\n            dfs(po);\n            inc(cf[c],cf[po]);\n        end;\n        p:=next[p];\n    end;\n    if cf[c]>max then\n    begin\n        max:=cf[c];\n        maxl:=dis[c]-dis[f[c,0]];\n    end else\n    if cf[c]=max then\n      if dis[c]-dis[f[c,0]]>maxl then maxl:=dis[c]-dis[f[c,0]]\nend;\nbegin\n    readln(n,m);\n    for i:=1 to n-1 do\n    begin\n        readln(a,b,c);\n        e[2*i]:=b;next[2*i]:=last[a];\n        last[a]:=2*i;w[2*i]:=c;\n        e[2*i-1]:=a;next[2*i-1]:=last[b];\n        last[b]:=2*i-1;w[2*i-1]:=c;\n    end;\n    bt(1);\n    for j:=1 to 20 do\n      for i:=1 to n do\n        f[i,j]:=f[f[i,j-1],j-1];\n    for i:=1 to m do\n    begin\n        readln(st[i],ed[i]);\n        p:=lca(st[i],ed[i]);\n        len[i]:=dis[st[i]]+dis[ed[i]]-2*dis[p];\n    end;\n    sort(1,m);\n    l:=0;r:=300000001;\n    repeat\n        fillchar(cf,sizeof(cf),0);\n        mid:=(l+r) div 2;\n        nq:=0;num:=0;\n        if len[m]>mid then\n        begin\n            for i:=m downto 1 do\n              if len[i]>mid then\n              begin\n                  inc(num);\n                  inc(cf[st[i]]);\n                  inc(cf[ed[i]]);\n                  p:=lca(st[i],ed[i]);\n                  cf[p]:=cf[p]-2;\n              end else break;\n            max:=0;\n            dfs(1);\n            ff:=false;\n            if max=num then\n              if len[m]-maxl<=mid then ff:=true;\n            if ff then r:=mid else l:=mid+1;\n        end else r:=mid;\n    until l=r;\n    writeln(l);\nend.\n```",
        "postTime": 1478657004,
        "uid": 14130,
        "name": "The_Dark_Knight",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u6211\u6ca1\u60f3\u5230\u53ef\u4ee5\u4e8c\u5206 \u6240\u4ee5\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u7384\u5b66\u505a\u6cd5\u3002\n\n\u5148\u8003\u8651\u66b4\u529b\u505a\u6cd5\u5982\u4f55\u5728\u8003\u573a\u4e0a\u9a97\u5206\u3002\n\n\u53ef\u4ee5\u7528\u6811\u5256\u5e94\u8be5\u53ef\u4ee5\u770b\u51fa\u6765 \u770b\u4e0d\u51fa\u6765\u53bb\u505a [\u6a21\u677f]\u6811\u94fe\u5256\u5206 \n\n\u628a\u8fb9\u6743\u8f6c\u5316\u6210\u70b9\u6743\u8fd9\u4e2a\u53ef\u4ee5\u4ece P4114 Qtree1 \u5b66\u5230\t(~~\u56e0\u4e3a\u5df2\u7ecf\u5f88\u957f\u4e86~~ \u5728\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86qwq\n\n\u6240\u4ee5\u4e0b\u9762\u7684\u8fb9\u6743\u6211\u5c31\u90fd\u8bf4\u6210\u70b9\u6743\u4e86\n\n\u96be\u70b9 \u5982\u4f55\u786e\u5b9a\u5c06\u54ea\u4e00\u6761\u8fb9\u6743(\u73b0\u5728\u662f\u70b9\u6743)\u53d8\u4e3a0 \u53ef\u4ee5\u8ba9\u6700\u5927\u8ddd\u79bb\u6700\u5c0f\n\n\u8003\u8651\u8d2a\u5fc3 \u8ba9\u6700\u5927\u8ddd\u79bb \u4e2d\u7684\u7ecf\u8fc7\u7684\u6700\u5927\u7684\u8fb9 \u53d8\u4e3a0\uff1f\n\n\u53ef\u4ee5\u60f3\u5230\u53cd\u4f8b \u5f53\u524d\u6700\u5927\u7684\u8ddd\u79bb \u867d\u7136\u53d8\u4e3a\u4e86\u6700\u5c0f \u4f46\u662f\u6b21\u5c0f\u7684\u5c31\u53d8\u4e3a\u4e86\u6700\u5927\n\n\u7136\u800c\u6211\u4eec\u53ef\u4ee5\u5728\u6700\u5927\u7684\u8ddd\u79bb\u4e2d\u627e\u5230\u4e00\u6761\u4e0d\u662f\u6700\u5927\u7684\u8fb9 \u4f7f\u5f97\u6700\u5927\u8ddd\u79bb\u548c\u6b21\u5927\u8ddd\u79bb\u90fd\u51cf\u5c0f\n\n\u800c\u4e14 \u8bb0\u5f55\u4e0b\u6765\u7ecf\u8fc7\u7684\u8fb9\u5c31\u662f\u975e\u5e38\u9ebb\u70e6\u7684\u4e86 \u65f6\u95f4\u590d\u6742\u5ea6 nm\uff1f\u663e\u7136\u4e0d\u5e94\u8be5\u5f80\u8fd9\u65b9\u9762\u8003\u8651\n\n\u518d\u8003\u8651\u53e6\u4e00\u79cd\u8d2a\u5fc3 \u8bb0\u5f55\u4e0b\u6bcf\u6761\u8fb9\u88ab\u4f7f\u7528\u7684\u6b21\u6570 \u8ba9\u4f7f\u7528\u6b21\u6570\u6700\u591a\u7684\u8fb9\u6743\u4e3a0\n\n\u663e\u7136\u4e0d\u5bf9 \u53cd\u4f8b \uff1a\u4f7f\u7528\u6700\u591a \u4f46\u662f\u5f53\u524d\u6700\u5927\u8ddd\u79bb\u53ef\u80fd\u5e76\u4e0d\u53bb\u4f7f\u7528\u8fd9\u6761\u8fb9\t\n\n\u90a3\u4e48\u8d2a\u5fc3\u662f\u4e0d\u6210\u4e86\n\n\u8003\u8651\u679a\u4e3e \u4e24\u79cd\u65b9\u5f0f \uff1a\u679a\u4e3e\u6240\u6709\u8fb9 \u679a\u4e3e\u5f53\u524d\u6700\u5927\u8ddd\u79bb\u6240\u7ecf\u8fc7\u7684\u8fb9\n\n\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5728\u8fd9\u68f5\u6811\u662f\u4e00\u6761\u94fe\u7684\u60c5\u51b5\u4e0b\u4f1a\u9000\u5316\u6210\u7b2c\u4e00\u79cd\u65b9\u5f0f \u56e0\u6b64\u8fd9\u91cc\u53ea\u8ba8\u8bba\u7b2c\u4e00\u79cd\u65b9\u5f0f\n\n\u82e5\u662f\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9 \u8ba9\u5176\u8fb9\u6743\u53d8\u4e3a0 \u65f6\u95f4\u590d\u6742\u5ea6 O(n*m*lognlogn)\n\n(\u5199\u5b8c\u540e\u53d1\u73b0\u5efa\u6811\u590d\u6742\u5ea6nlogn \u603b\u590d\u6742\u5ea6 O(nlogn +nmlognlogn) \u4e5f\u5c31\u662fn\u5f88\u5927m\u5f88\u5c0f\u7684\u70b9\u4e5f\u662f\u641e\u4e0d\u5b9a\u7684\n\n(\u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5316 \u628a\u6bcf\u4e00\u6761\u7ecf\u8fc7\u7684\u8fb9nlognlogn\u6253\u4e0a\u6807\u8bb0 \u53ea\u53bb\u641e\u6807\u8bb0\u8fc7\u7684\u8fb9 \u4e5f\u8bb8\u4f1a\u5feb\u4e00\u4e9b \u7136\u800c\u6700\u574f\u60c5\u51b5\u4f9d\u7136\u662f n*m*lognlogn\n\n \u4f46\u4f3c\u4e4e\u8fd9\u4e2a\u4f18\u5316\u5341\u5206\u6709\u7528\uff01\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define maxn 300001\nusing namespace std;\nstruct edg\n{\n\tint x,y,w;\n};\nstruct plan\n{\n\tint u,v;\n}save[maxn];\nvoid read(int &x)\n{\n\tx = 0;int f = 1;\n\tchar ch = getchar();\n\twhile(!isdigit(ch)){if(ch == '-')f = -1; ch = getchar();}\n\twhile(isdigit(ch)){x = (x<<3) + (x<<1) + ch - '0'; ch = getchar();}\n\tx = x*f;\n}\nint n,m;\nint head[maxn],nxt[maxn<<1],ver[maxn<<1],edge[maxn<<1],tot = 0;\nint root = 1;\nint v[maxn],size[maxn],son[maxn],top[maxn],fa[maxn],dep[maxn],id[maxn],w[maxn],wt[maxn],cnt = 0;\nint t[maxn<<2];\nint tag[maxn<<2];\nint ans = 0x3f3f3f3f,maxnum = 0;\nvoid add(int x,int y,int w)\n{\n\tnxt[++tot] = head[x]; head[x] = tot; ver[tot] = y; edge[tot] = w;\n}\nvoid dfs1(int x,int f,int deep)\n{\n\tsize[x] = 1,fa[x] = f,dep[x] = deep;\n\tint maxson = 0;\n\tfor(int i = head[x]; i; i = nxt[i])\n\t{\n\t\tint y = ver[i]; \n\t\tif(y == f)continue;\n\t\tw[y] = edge[i];\n\t\tdfs1(y,x,deep+1);\n\t\tsize[x] += size[y];\n\t\tif(size[y] > maxson)maxson = size[y],son[x] = y;\n\t}\n}\nvoid dfs2(int x,int topf)\n{\n\tid[x] = ++cnt; wt[cnt] = w[x];\n\ttop[x] = topf;\n\tif(son[x])dfs2(son[x],topf);\n\tfor(int i = head[x]; i; i = nxt[i])\n\t{\n\t\tint y = ver[i];\n\t\tif(y == fa[x] || y == son[x])continue;\n\t\tdfs2(y,y);\n\t}\n}\nvoid pushup(int now)\n{\n\tt[now] = t[now<<1] + t[now<<1|1];\n}\nvoid build(int now,int l,int r)\n{\n\tif(l == r)\n\t{\n\t\tt[now] = wt[l];\n\t\treturn;\n\t}\n\tint mid = (l+r)>>1;\n\tbuild(now<<1,l,mid);\n\tbuild(now<<1|1,mid+1,r);\n\tpushup(now);\n}\nint query(int now,int l,int r,int LL,int RR)\n{\n\tif(LL > RR)return 0;\n\tif(LL <= l && RR >= r)\n\t{\n\t\treturn t[now];\n\t}\n\tint ans = 0;\n\tint mid = (l+r)>>1;\n\tif(LL <= mid)ans += query(now<<1,l,mid,LL,RR);\n\tif(RR > mid)ans += query(now<<1|1,mid+1,r,LL,RR);\n\treturn ans;\n}\nint queryrange(int x,int y)\n{\n\tint ans = 0;\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\t\n\t\tans += query(1,1,n,id[top[x]],id[x]);\n\t\tx = fa[top[x]];\n\t}\t\n\tif(dep[x] > dep[y])swap(x,y);\n\tans += query(1,1,n,id[x]+1,id[y]);\n\treturn ans;\n}\nvoid addtag(int now,int l,int r,int LL,int RR)\n{\n\tif(l == r)\n\t{\n\t\ttag[l] = 1;\n\t\treturn;\n\t}\n\tint mid = (l+r)>>1;\n\tif(LL <= mid)addtag(now<<1,l,mid,LL,RR);\n\tif(RR > mid)addtag(now<<1|1,mid+1,r,LL,RR);\n}\nvoid search()\n{\n\tint tempans = 0;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint temp = queryrange(save[i].u,save[i].v);\n\t\tif(temp > tempans)\n\t\t{\n\t\t\ttempans = temp;\n\t\t\tmaxnum = i;\n\t\t}\n\t}\n}\nvoid gavetag(int x,int y)\n{\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\t\n\t\taddtag(1,1,n,id[top[x]],id[x]);\n\t\tx = fa[top[x]];\n\t}\t\n\tif(dep[x] > dep[y])swap(x,y);\n\taddtag(1,1,n,id[x]+1,id[y]);\n}\nvoid solve()\n{\n\tint tempans = 0;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint temp = queryrange(save[i].u,save[i].v);\n\t\ttempans = max(tempans,temp);\n\t}\n\tans = min(ans,tempans);\n}\nint main()\n{\t\n\tread(n),read(m);\n\tfor(int i = 1; i <= n-1; ++i)\n\t{\n\t\tint x,y,w;\n\t\tread(x),read(y),read(w);\n\t\tadd(x,y,w),add(y,x,w);\t\t\n\t}\n\tdfs1(root,0,1); \n\tdfs2(root,root);\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint u,v; read(u),read(v);\n\t\tsave[i] = (plan){u,v};\n\t} \n\tbuild(1,1,n);\n\t//\u627e\u51fa\u6700\u5927\u8ba1\u5212\u6240\u9700\u8981\u7684\u6240\u6709\u8fb9 \u8fdb\u884c\u679a\u4e3e\n\tsearch();\n\t//O(n)\u7ed9\u8fd9\u4e2a\u8ba1\u5212\u7ecf\u8fc7\u7684\u8fb9\u6253\u4e0a\u6807\u8bb0\n\t//\u5b8c\u4e8b\u8fdb\u884c\u679a\u4e3eqwq \n\tgavetag(save[maxnum].u,save[maxnum].v);\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tif(!tag[i])continue;\n\t\tint temp = wt[i];\n\t\twt[i] = 0;\n\t\tbuild(1,1,n);\n\t\tsolve();\n\t\twt[i] = temp;\t\t\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n\u671f\u671b\u5f97\u520660\uff01 \u5b9e\u9645\u5f97\u520645...q^q\n\n\n\u6211\u4eec\u60f3\u8981\u628a n*m*lognlogn \u590d\u6742\u5ea6\u4f18\u5316 mlognlogn\u662f\u6ca1\u529e\u6cd5\u4f18\u5316\u4e86 \u90a3\u4e48\u8003\u8651\u5982\u4f55\u4f18\u5316\u8fd9\u4e2an \u8981\u662f\u80fd\u628a\u8fd9\u4e2an\u53d8\u4e3alogn\u53ca\u4ee5\u4e0b\u5c31\u597d\u4e86w \n\n ~~\u8003\u8651\u4e8c\u5206 \u7136\u800c\u4e8c\u5206\u9700\u8981\u6ee1\u8db3\u5355\u8c03\u6027~~\n\n~~\u65f6\u95f4\u662f\u6ee1\u8db3\u5355\u8c03\u6027\u7684\uff01\u7c7b\u4f3c\u4e8e\u8df3\u623f\u5b50\uff01 \u7136\u800c \u4f60\u5df2\u7ecf\u80fd\u591f\u6c42\u51fa \u6240\u6709\u7684\u8ba1\u5212\u6ca1\u6709\u5220\u8fb9\u7684\u65f6\u95f4\u4e86 zxy:\u4f60\u8fd8\u4e8c\u5206\u4e2a\u9524\u5b50\u5462   ......~~\n\n~~\u6211\u592a\u83dc\u4e86\u6216\u8bb8\u6709\u4f46\u6211\u60f3\u4e0d\u5230\u54ea\u91cc\u8fd8\u80fd\u4e8c\u5206\u4e86~~\n\n\n------------\n\n\n\u90a3\u4e48\u518d\u8003\u8651\u4e00\u4e2a\u4f18\u5316 \n\n\u53ef\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e48\u4e00\u4e2a\u6027\u8d28 \u628a\u4e00\u6761\u822a\u9053\u6539\u9020\u6210\u6700\u5927\u7684\n\n\u90a3\u4e48\u7ecf\u8fc7\u8fd9\u6761\u822a\u9053\u7684\u6700\u5927\u7684\u4ecd\u7136\u662f\u7ecf\u8fc7\u8fd9\u6761\u822a\u9053\u7684\u6700\u5927\u7684\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u6bd4\u8f83 \u7ecf\u8fc7\u8fd9\u6761\u822a\u9053\u7684\u8ba1\u5212\u7684\u6700\u5927\u503c \u548c\u4e0d\u7ecf\u8fc7\u8fd9\u6761\u822a\u9053\u7684\u8ba1\u5212\u7684\u6700\u5927\u503c \u5c31\u597d\u4e86\n\n\u4f3c\u4e4e\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u6548\u7684\u4f18\u5316 \u8fd9\u6837\u5c31\u53ef\u4ee5\u7701\u53bbn^2logn\u7684\u5efa\u6811\u64cd\u4f5c\u4e86\uff01\n\n\u4f46\u662f \u5982\u4f55\u5b9e\u73b0 \u627e\u5230 \u4e0d\u7ecf\u8fc7\u8fd9\u6761\u822a\u9053\u7684\u8ba1\u5212\u7684\u6700\u5927\u503c\u5462?\n\n\u5224\u65ad\u4e00\u4e2a\u8ba1\u5212\u662f\u5426\u6709\u7ecf\u8fc7\u8fd9\u6761\u8fb9:\n\n\u7531\u4e8e\u8fd9\u91cc\u628a\u8fb9\u6743\u53d8\u4e3a\u4e86\u70b9\u6743 \u6240\u4ee5\u9700\u8981\u5224\u65ad\u65f6\u9700\u8981\u6ce8\u610f\n\n\u9700\u8981\u5224\u65ad \u5f53\u524d\u88ab\u53d80\u7684\u8282\u70b9 \u662f\u5426\u5728 u \u5230 lca(u,v) \u7684\u94fe\u4e0a\u6216 v \u5230 lca(u,v) \u7684\u94fe\u4e0a \u4ee5\u53ca \u5f53\u524d\u53d80\u7684\u8282\u70b9\u7684\u7236\u4eb2 \u662f\u5426\u5728u\u5230 lca(u,v) \u7684\u94fe\u4e0a\u6216v\u5230 lca(u,v) \u7684\u94fe\u4e0a(\u7ec6\u8282\u89c1\u4ee3\u7801) \u8fd9\u6837\u624d\u80fd\u5224\u65ad\u8fb9\u6743\u53d8\u4e3a 0 \u7684\u8fd9\u6761\u8fb9\u662f\u5426\u88ab\u8ba1\u5212\u7ecf\u8fc7\n\n\u90a3\u4e48 \u89e3\u51b3\u8fd9\u9053\u9898\u76ee\u5927\u81f4\u7684\u6d41\u7a0b\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e86\n\n1.  \u627e\u5230\u6ca1\u6709\u6539\u53d8\u8fb9\u6743(\u70b9\u6743 \u65f6\u7684\u65f6\u95f4\u6700\u957f\u7684\u8ba1\u5212\n\n2.  \u679a\u4e3e\u8ba1\u5212\u4e2d\u9700\u8981\u7684\u8fb9(\u70b9 \u65f6\u95f4\u6700\u957f\u7684\u8ba1\u5212-\u8fb9\u6743(\u70b9\u6743 \u548c\u4e0d\u9700\u8981\u7ecf\u8fc7\u8fd9\u6761\u8fb9(\u70b9 \u7684\u8ba1\u5212 \u4f5c\u6bd4\u8f83 \u8bb0\u5f55\u4e0b\u6700\u5927\u503c\n\n\u5206\u6790\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u7684 \u5efa\u6811+\u6811\u5256\u627e\u6700\u957f+\u5220\u8fb9\u6bd4\u8f83\u64cd\u4f5c nlogn + mlognlogn + nmlogn \u4f9d\u7136\u662f\u8d85\u65f6\u7684\n\n\u662f\u5426\u80fd\u628anmlogn\u4e2d\u7684  m \u53bb\u6389\n\n\u6211\u4eec\u628a\u539f\u7b54\u6848\u7edf\u8ba1\u51fa\u6765 \u6392\u4e2a\u5e8f \u53ef\u4ee5\u53d1\u73b0 \u6700\u5927\u7b54\u6848\u53ea\u6709\u53ef\u80fd\u5728\u539f\u7b54\u6848\u7684\u6700\u5927\u7b54\u6848\u5230 \u6700\u5927\u7b54\u6848\u51cf\u53bb\u8fb9\u6743\u8fd9\u4e00\u6bb5\u51fa\u73b0\uff01\n\n\u8fd9\u4e2a\u8fb9\u6743 ti <= 1000 ! \u4e5f\u5c31\u662f\u8bf4 \u6211\u4eec\u53ef\u4ee5\u628a\u7b54\u6848\u7f29\u51cf\u5230\u975e\u5e38\u5c0f\u7684\u8303\u56f4\u4e86\uff01\n\n(\u6700\u574f\u60c5\u51b5\u4f9d\u7136\u662fnmlogn,\u4f46\u51fa\u9898\u4eba\u6ca1\u5361\n\nO(\u7384\u5b66)\uff01 \n\nCode:\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define maxn 300001\nusing namespace std;\nstruct node\n{\n\tint num,ans;\t\n};\nstruct edg\n{\n\tint x,y,w;\n};\nstruct plan\n{\n\tint u,v;\n}save[maxn];\nvoid read(int &x)\n{\n\tx = 0;int f = 1;\n\tchar ch = getchar();\n\twhile(!isdigit(ch)){if(ch == '-')f = -1; ch = getchar();}\n\twhile(isdigit(ch)){x = (x<<3) + (x<<1) + ch - '0'; ch = getchar();}\n\tx = x*f;\n}\nint n,m;\nint head[maxn],nxt[maxn<<1],ver[maxn<<1],edge[maxn<<1],tot = 0;\nint root = 1;\nint v[maxn],size[maxn],son[maxn],top[maxn],fa[maxn],dep[maxn],id[maxn],arcid[maxn],w[maxn],wt[maxn],cnt = 0;\nint t[maxn<<2];\nint tag[maxn<<2];\nnode result[maxn];\nint ans = 0x3f3f3f3f,maxnum = 0;\nint tempans = 0;\nbool cmp(node a, node b)\n{\n\treturn a.ans > b.ans;\n}\nvoid add(int x,int y,int w)\n{\n\tnxt[++tot] = head[x]; head[x] = tot; ver[tot] = y; edge[tot] = w;\n}\nvoid dfs1(int x,int f,int deep)\n{\n\tsize[x] = 1,fa[x] = f,dep[x] = deep;\n\tint maxson = 0;\n\tfor(int i = head[x]; i; i = nxt[i])\n\t{\n\t\tint y = ver[i]; \n\t\tif(y == f)continue;\n\t\tw[y] = edge[i];\n\t\tdfs1(y,x,deep+1);\n\t\tsize[x] += size[y];\n\t\tif(size[y] > maxson)maxson = size[y],son[x] = y;\n\t}\n}\nvoid dfs2(int x,int topf)\n{\n\tid[x] = ++cnt; wt[cnt] = w[x];\n\tarcid[cnt] = x;\n\ttop[x] = topf;\n\tif(son[x])dfs2(son[x],topf);\n\tfor(int i = head[x]; i; i = nxt[i])\n\t{\n\t\tint y = ver[i];\n\t\tif(y == fa[x] || y == son[x])continue;\n\t\tdfs2(y,y);\n\t}\n}\nvoid pushup(int now)\n{\n\tt[now] = t[now<<1] + t[now<<1|1];\n}\nvoid build(int now,int l,int r)\n{\n\tif(l == r)\n\t{\n\t\tt[now] = wt[l];\n\t\treturn;\n\t}\n\tint mid = (l+r)>>1;\n\tbuild(now<<1,l,mid);\n\tbuild(now<<1|1,mid+1,r);\n\tpushup(now);\n}\nint query(int now,int l,int r,int LL,int RR)\n{\n\tif(LL > RR)return 0;\n\tif(LL <= l && RR >= r)\n\t{\n\t\treturn t[now];\n\t}\n\tint ans = 0;\n\tint mid = (l+r)>>1;\n\tif(LL <= mid)ans += query(now<<1,l,mid,LL,RR);\n\tif(RR > mid)ans += query(now<<1|1,mid+1,r,LL,RR);\n\treturn ans;\n}\nint queryrange(int x,int y)\n{\n\tint ans = 0;\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\t\n\t\tans += query(1,1,n,id[top[x]],id[x]);\n\t\tx = fa[top[x]];\n\t}\t\n\tif(dep[x] > dep[y])swap(x,y);\n\tans += query(1,1,n,id[x]+1,id[y]);\n\treturn ans;\n}\nvoid addtag(int now,int l,int r,int LL,int RR)\n{\n\tif(l == r)\n\t{\n\t\ttag[l] = 1;\n\t\treturn;\n\t}\n\tint mid = (l+r)>>1;\n\tif(LL <= mid)addtag(now<<1,l,mid,LL,RR);\n\tif(RR > mid)addtag(now<<1|1,mid+1,r,LL,RR);\n}\nvoid search(void)\n{\n\tint tempans = 0;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint temp = queryrange(save[i].u,save[i].v);\n\t\tresult[i].num = i;\n\t\tresult[i].ans = temp;\n\t\tif(temp >= tempans)\n\t\t{\n\t\t\ttempans = temp;\n\t\t\tmaxnum = i;\n\t\t}\n\t}\n}\nvoid gavetag(int x,int y)\n{\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\t\n\t\taddtag(1,1,n,id[top[x]],id[x]);\n\t\tx = fa[top[x]];\n\t}\t\n\tif(dep[x] > dep[y])swap(x,y);\n\taddtag(1,1,n,id[x]+1,id[y]);\n}\nint LCA(int x,int y)\n{\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y])swap(x,y);\n\treturn x;\n}\nint solve(int x,int y)\n{\n\t//x\uff1a \u5220\u53bb\u4e86\u54ea\u6761\u8fb9(\u70b9\n\t//y\uff1a \u5f53\u524d\u5728\u5904\u7406\u54ea\u4e2a\u8ba1\u5212\n\tint rx = arcid[x];\n\tint now = result[y].num;\n\tint u = save[now].u, v = save[now].v; \n\tint lca = LCA(u,v);\n\t//\u53ea\u6709 rx \u8282\u70b9 \u548c fa[rx]\u8282\u70b9\u90fd\u4e0d\u548c u v \u5728\u4e00\u6761\u94fe\u4e0a\u65f6\u5019 \u624d\u7b97\u505a\u6ca1\u6709\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\n\t//\u90a3\u4e48\u540c\u6837\u7684 \u53ea\u6709rx\u8282\u70b9\u548cfa[rx]\u8282\u70b9\u90fd\u548cu v\u5728\u4e00\u6761\u94fe\u4e0a\u65f6\u5019 \u624d\u7b97\u7ecf\u8fc7\u4e86\u8fd9\u6761\u8fb9\u3002\n\tif( ( (LCA(rx,u) == rx && LCA(fa[rx],u) == fa[rx]) || (LCA(rx,v) == rx && LCA(fa[rx],v) == fa[rx]) ) && LCA(fa[rx],lca) == lca ) return 0; \n\ttempans = result[y].ans;\n\treturn 1;\n}\nint main()\n{\t\n\tread(n),read(m);\n\tfor(int i = 1; i <= n-1; ++i)\n\t{\n\t\tint x,y,w;\n\t\tread(x),read(y),read(w);\n\t\tadd(x,y,w),add(y,x,w);\t\t\n\t}\n\tdfs1(root,0,1); \n\tdfs2(root,root);\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint u,v; read(u),read(v);\n\t\tsave[i] = (plan){u,v};\n\t} \n\tbuild(1,1,n);\n\tsearch();\n\tgavetag(save[maxnum].u,save[maxnum].v);\n\tsort(result+1,result+1+m,cmp);\n\tans = result[1].ans;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tif(!tag[i])continue;\n\t\ttempans = result[1].ans - wt[i];\n\t\tfor(int j = 1; j <= m; j++)\n\t\t{\n\t\t\tif(result[j].ans < tempans)break;\n\t\t\tif(solve(i,j))break;\n\t\t}\n\t\tans = min(ans,tempans);\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n~~(\u4f3c\u4e4e\u8dd1\u7684\u6bd4\u5199\u4e11\u7684\u4e8c\u5206\u8981\u5feb~~\n",
        "postTime": 1573024584,
        "uid": 122591,
        "name": "abjfj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u62ff\u5230\u9898\uff0c\u9996\u5148\u5206\u6790\u4e00\u4e0b\u9898\u610f\uff1b\n\u7ed9\u4f60n\u4e2a\u70b9\u7684\u6811\uff0cm\u6761\u94fe\uff1b\n\u6c42\u53bb\u6389\u4e00\u4e2a\u8fb9\u540e\u6700\u5927\u94fe\u7684\u6700\u5c0f\u503c\uff1b\u5927\u4f6c\u8bf4\uff1a~~\uff08\u8fd9\u4e0d\u5c31\u662f\u4e8c\u5206\u4e48\uff09~~\n\n\u53cd\u6b63\u9996\u5148\u6211\u6ca1\u6709\u641e\u61c2\uff1b\n\n\u5148\u60f3\u4e86\u70b9\u60f3\u6cd5\uff1a\n\n1.\u5bf9\u4e8e\u90a3\u4e9b\u6210\u4e00\u6761\u94fe\u7684\uff0c\u66b4\u529b\u5220\u8fb9\uff0c\u6c42\u5220\u8fb9\u540e\u7684\u6700\u5927\u503c\uff1b\u5728\u53d6\u4e2amin\uff1b\n\n2.\u5f53m=1\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u4e24\u6761\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u6743\uff0c\u8ba9\u603b\u6743\u503c\u51cf\u6700\u5927\u8fb9\u6743\uff1b\n\n\u2026\u2026\n~~\u6765\u81ea\u673a\u623f\u67d0\u795e\u4ed9\uff08\u4e3a\u4ec0\u4e48\u4e0d\u6253\u6b63\u89e3\u6253\u66b4\u529b\u5462\uff01\uff01\uff01\uff09~~\n\n\u54b3\u54b3\uff0c\u6765\u8c08\u8c08\u6b63\u89e3\u2014\u2014\n\u4e8c\u5206\u52a0\u5dee\u5206\u5728\u7528\u4e2a\u6811\u5256\u5c31\u53ef\u4ee5\u4e86\uff1b\n\u6811\u5256\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86  \n~~\uff08\u90fd\u662f\u597d\u9898\u5440\uff09~~\n\n[Meg](https://www.luogu.org/problem/P3459)\n\n[\u6811\u7684\u7edf\u8ba1](https://www.luogu.org/problem/P2590)\n\n[\u6811\u4e0a\u7edf\u8ba1](https://www.luogu.org/problem/P3178)\n\n~~\u4e0d\u5c31\u662f\u6c42\u4e2alca\uff0c\u7528\u4ec0\u4e48\u6811\u5256\uff0c\u6211\u56de\u7b54\uff1a\u4e0d\u4f1a\u500d\u589e\u5566~~\n\u5176\u5b9e\u4e0a\u9762\u4ee8\u9898\u53ea\u662f\u4e2a\u6811\u5256\u5566\uff1b\n\u5dee\u5206\u7684\u8bdd \u6709\u4e2a[\u6700\u5927\u6d41](https://www.luogu.org/problem/P3128#submit)\n\u4e8c\u5206\u6211\u5c31\u4e0d\u8bf4\u4e86\uff1b\n\n\u5177\u4f53\u7684\u8bdd\u4e0b\u9762\u4ee3\u7801\u91cc\u6709\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#define int long long \nusing namespace std;\nstruct edge{\n\tint to,nexty,val;\n}e[805000];\nconst int maxn=305000;\nint head[300005],len[maxn],cnt; \nvoid add(int a,int b,int c)\n{\n\te[++cnt].to=b;\n\te[cnt].nexty=head[a];\n\te[cnt].val=c;\n\thead[a]=cnt;\n}\nint son[maxn],size[maxn],top[maxn],fa[maxn],dep[maxn];//dfs1\nint pass[maxn];//dfs2\nint dfn_sum,tree[maxn],treesum[maxn];\nvoid dfs1(int x,int f,int depp) \n{\t\n\tsize[x]=1;\n\tdep[x]=depp;\n\tfa[x]=f;\n\ttree[++dfn_sum]=x;//\u5c06x\u51fa\u73b0\u7684\u987a\u5e8f\uff08dfn\uff09\u8bb0\u5f55\u4e0b\u6765\uff1b \n\tfor(int i=head[x];i;i=e[i].nexty)\n\t{   int to=e[i].to;\n\t\tif(to==f)continue;\n\t\tdis[to]=dis[x]+e[i].val;\n\t\ttreesum[to]=e[i].val;//\u8fb9\u6743\u8f6c\u70b9\u6743\uff0c\u4e0b\u653e\u7ed9\u513f\u5b50\u8282\u70b9\uff1b \n\t\tdfs1(to,x,depp+1);\n\t\tsize[x]+=size[to];\n\t\tif(size[to]>size[son[x]])son[x]=to;\n\t}\n\treturn ;\n}\nvoid dfs2(int x,int topf)\n{\n\ttop[x]=topf;\n\tif(!son[x])return;\n\tdfs2(son[x],topf);\n\tfor(int i=head[x];i;i=e[i].nexty)\n\t{\t\t\t\n\t\tint to=e[i].to;\n\t\tif(to==fa[x]||to==son[x])continue;\n\t\tdfs2(to,to);\n\t}\n}\nint lca(int x,int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y])return x;\n\telse return y;\n}\n//\u4e0a\u9762\u6811\u5256\u6c42lca\u4e0d\u591a\u89e3\u91ca\uff1b \nint x[maxn],y[maxn],L[maxn],d[maxn],dis[maxn];\n//x\uff0cy\u6570\u7ec4\u50a8\u5b58\u6bcf\u6b21\u67e5\u8be2\u4e24\u70b9\u7684\u7f16\u53f7\uff1b\n//L\u50a8\u5b58\u4e24\u70b9\u7684lca\uff08\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09 \n//d\u50a8\u5b58\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb \n//dis \u6839\u8282\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb \n//\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb = \u4e24\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u548c\u51cf\u53bb\u4e24\u500d\u6700\u8fd1\u516c\u5171\u7956\u5148\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff1b \nint n,m,max1,maxx;//maxx:\u8def\u7ebf\u7684\u6700\u957f\u503c\uff0cmax1 \u4e24\u70b9\u95f4\u6700\u957f\u8def\u5f84\uff1b \nbool check(int k)\n{\n\tmemset(pass,0,sizeof(pass));\n\tcnt=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(d[i]>k)\n\t\t{\n\t\t\tpass[x[i]]++;pass[y[i]]++;pass[L[i]]-=2;\n\t\t\tcnt++;\n\t\t\t//\u5982\u679c\u6709\u8def\u5f84\u957f\u4e8ek\uff0c\u5c31\u53ef\u80fd\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e00\u6761\u8fb9\u8f6c\u4e3a0\u6765\u964d\u4f4e\u65f6\u95f4\uff1b \n\t\t}\t\n\t\t//k \u5c1d\u8bd5\u6700\u957f\u8def\u9700\u8981\u65f6\u95f4\uff1b \n\t}\n\tfor(int i=n;i>=1;i--)\n\t//\u901a\u8fc7\u6811\u5256dfn\u539f\u7406 \u4ece\u53f6\u8282\u70b9\u5411\u6839\u8282\u70b9\u8dd1//\u6b63\u597d\u6ee1\u8db3\u6811\u4e0a\u5dee\u5206\u6240\u9700\u8981\u7684\u987a\u5e8f\uff1b \n\t{\n\t\tpass[fa[tree[i]]]+=pass[tree[i]];\n\t\tif(treesum[tree[i]]>=maxx-k&&pass[tree[i]]==cnt)return 1;\n\t\t//\u5982\u679c\u4f60\u53d1\u73b0\u6709\u6761\u8def\u5927\u4e8e\u7b49\u4e8emaxx-k\uff08\u5728\u51cf\u53bb\u8fd9\u6761\u8fb9\u4e4b\u540e\u53ef\u4ee5\u5728k\u5185\u901a\u8fc7\uff09\uff1b\n\t\t//\u5e76\u4e14\u8fd9\u6761\u8fb9\u7684\u7ecf\u8fc7\u6b21\u6570\u6b63\u597d\u7b49\u4e8ecnt(cnt: \u5927\u4e8ek\u7684\u8fb9\u6570)\n\t\t//\u4f60\u5c31\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6761\u8fb9\u5c31\u662f\u53ef\u884c\u7684\u8fb9\uff1b \n\t}\n\treturn 0;\n}\nint ans; \nint erfen(int l,int r)\n{\n\tint mid;\n\t//\u4e8c\u5206\u7b54\u6848\uff0c(\u56e0\u4e3a\u5f53\u66f4\u77ed\u7684\u65f6\u95f4\u53ef\u4ee5\u901a\u8fc7\u65f6\uff0c\u66f4\u957f\u7684\u65f6\u95f4\u80af\u5b9a\u4e5f\u80fd\u884c\uff09\n\t//(\u6bd5\u7adf\u662f\u6c42\u7684\u6700\u5c0f\u503c\uff0c\u5927\u7684\u4e5f\u80fd\u884c\uff09\n\t//\u90a3\u4fbf\u662f\u6c42\u53ef\u884c\u7684\u6700\u5927\u503c\u91cc\u9762\u7684\u6700\u5c0f\u503c\uff1b \n\twhile(l<r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(check(mid))\n\t\t{\n\t\t\tans=mid;\n\t\t\tr=mid;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\treturn ans;\n}\nsigned main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<n;i++)\n\t{\t\t\n\t\tint a,b,c; \n\t\tscanf(\"%lld%lld%lld\",&a,&b,&c);\n\t\tadd(a,b,c),add(b,a,c);\n\t\tmax1=max(max1,c);\n\t}\n\tdis[1]=0;\n\tdfs1(1,0,0);\n\tdfs2(1,1);\n\tfor(int i=1;i<=m;i++)\n\t{\t\n\t\tint Lca;\n\t\tscanf(\"%lld%lld\",&x[i],&y[i]);\n\t\tL[i]=lca(x[i],y[i]);\n\t\td[i]=dis[x[i]]+dis[y[i]]-dis[L[i]]*2;\n\t\tmaxx=max(maxx,d[i]);\n\t}\n//\tdfs(1,0);\n\tcout<<erfen(maxx-max1,maxx);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1569119844,
        "uid": 123841,
        "name": "lwyz123",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "## \u4e00\u4e2aO\uff08n\uff09\u7684\u89e3\u6cd5\u3002\n### \u4e0d\u96be\u53d1\u73b0\u6709\u5982\u4e0b\u6027\u8d28\uff1a\n- \u88ab\u6539\u9020\u6210\u866b\u6d1e\u7684\u8fb9\u4e00\u5b9a\u5728\u6700\u957f\u8def\u5f84\u4e0a\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u7528\u7c7b\u4f3c\u63d0\u76f4\u5f84\u7684\u65b9\u6cd5\u628a**\u8fd9\u6761\u8def\u5f84\u7ed9\u62ce\u51fa\u6765**\n\n![](https://cdn.luogu.com.cn/upload/pic/72262.png)\n\n\u5c31\u4f1a\u5f62\u6210\u8fd9\u6837\u7684\u4e00\u68f5\u6811\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u82e5\u5176\u88ab\u6539\u6210\u866b\u6d1e\uff0c\u6700\u957f\u8def\u5f84\u4f1a\u6709\u5982\u4e0b\u4e09\u79cd\u60c5\u51b5:\n\n- \u4f9d\u7136\u662f\u5f53\u524d\u7684\u6700\u957f\u8def\u5f84\n\n- \u88ab\u6539\u9020\u8fb9\u5de6\u7aef\u70b9\u7684\u6700\u957f\u8def\u5f84\n\n- \u88ab\u6539\u9020\u8fb9\u53f3\u7aef\u70b9\u7684\u6700\u957f\u8def\u5f84\n\n\u96be\u9053\u6211\u4eec\u4e0d\u7528\u8003\u8651\u7ecf\u8fc7\u8be5\u8fb9\u7684\u8def\u5f84\u5417\uff1f\uff1f\n\n\u5f53\u7136\u4e0d\u7528\u3002\n\n\u6211\u4eec\u5df2\u7ecf\u662f\u5728**\u6700\u957f\u8def\u5f84**\u4e0a\u6539\u9020\u8fb9\u4e86\uff0c**\u800c\u6700\u957f\u8def\u5f84\u662f\u957f\u4e8e\u4efb\u4f55\u4e00\u6761\u8def\u5f84\u7684**\uff08\u5e9f\u8bdd\uff09\uff0c\u90a3\u4e48\u7ecf\u8fc7\u8be5\u8fb9\u7684\u4efb\u4f55\u8def\u5f84\u5728\u6b64\u8fb9\u88ab\u6539\u9020\u540e**\u4f9d\u7136\u77ed\u4e8e\u6700\u957f\u8def\u5f84**\uff0c\u6545\u4e0d\u7528\u8003\u8651\u3002\n\n\u81f3\u4e8e\u6c42\u4e24\u7aef\u7684\u6700\u957f\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u524d\u7f00\u548c\u540e\u7f00\u5206\u522b\u7ef4\u62a4\u4e00\u4e0b\u3002\n\n\n\n------------\n\n\n### \u90a3\u4e48\u600e\u4e48\u6c42\u524d\u7f00\uff08\u540e\u7f00\uff09\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u70b9\u5f00\u4e2avector,\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u6211\u4eec\u628a\u53e6\u4e00\u7aef\u70b9\u4ee5\u53ca\u8def\u5f84\u7684\u7f16\u53f7\u52a0\u5230vector\u4e2d\u3002\n\n\u7136\u540e\uff0c\u518d\u5f00\u4e2avis\u6570\u7ec4\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\u3002\n\n\u5728\u904d\u5386\u65f6\uff0c\u6211\u4eec\u8bbf\u95ee\u6240\u6709\u4ee5\u8fd9\u4e00\u70b9\u4e3a\u4e00\u7aef\u70b9\u7684\u8def\u5f84\u6807\u53f7$id$\u548c\u53e6\u4e00\u7aef\u70b9$y$\uff0c\u82e5\u53e6$vis[y]=true$\uff0c\u5c31\u62ff$id$\u7684\u957f\u5ea6\u53bb\u66f4\u65b0\u5373\u53ef\u3002\uff08\u53e3\u80e1\u4e0d\u6e05\uff0c\u8fd9\u6700\u597d\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\uff09\n\n### \u81f3\u4e8e\u6c42\u8def\u5f84\u957f\u548cLCA\u5462\uff1f\n\n\u989d\uff0c\u6811\u5256\u6211\u662f\u5f53\u5e38\u6570\u770b\u7684\u3002\u3002\u3002\n\n~~\u5b9e\u5728\u4e0d\u884c\u4f60\u53ef\u4ee5Tarjan\u79bb\u7ebf\u9884\u5904\u7406\u554a~~\n\n\u4ee3\u7801\uff08~~\u5de8\u4e11\u65e0\u6bd4~~\uff09:\n```\n#include<bits/stdc++.h>\n#define reg register int\n#define MAXN 300010\nusing namespace std;\nint n,m,head[MAXN],dis[MAXN],tot,maxx,bh,pre[MAXN],sumfr[MAXN],sumla[MAXN],num[MAXN],lian[MAXN],ans=2e9+7;\nbool mark[MAXN],vis[MAXN];\nstruct node {\n\tint st,ed,lca,d;\n} P[MAXN];\nstruct Edge {//\u524d\u5411\u661f\n\tint ed,v,last;\n} G[MAXN*2];\nstruct que {\n\tint ed,id;\n};\nvector<que> Q[MAXN];\nstruct s__ {//\u6811\u5256\u9884\u5904\u7406\n\tint son[MAXN],size[MAXN],top[MAXN],deep[MAXN];\n\tvoid DFS1(int x,int fa,int v) {\n\t\tdis[x]=dis[fa]+v;\n\t\tpre[x]=fa;\n\t\tdeep[x]=deep[fa]+1;\n\t\tsize[x]=1;\n\t\tfor(int i=head[x]; ~i; i=G[i].last) {\n\t\t\tint t=G[i].ed,v=G[i].v;\n\t\t\tif(t==fa)continue;\n\t\t\tDFS1(t,x,v);\n\t\t\tsize[x]+=size[t];\n\t\t\tif(size[son[x]]<size[t])son[x]=t;\n\t\t}\n\t}\n\tvoid DFS2(int x,int fa,int zu) {\n\t\ttop[x]=zu;\n\t\tif(son[x])DFS2(son[x],x,zu);\n\t\tfor(int i=head[x]; ~i; i=G[i].last) {\n\t\t\tint t=G[i].ed;\n\t\t\tif(t==son[x]||t==fa)continue;\n\t\t\tDFS2(t,x,t);\n\t\t}\n\t}\n\tint LCA(int x,int y) {\n\t\twhile(top[x]!=top[y]) {\n\t\t\tif(deep[top[x]]<deep[top[y]])swap(x,y);\n\t\t\tx=pre[top[x]];\n\t\t}\n\t\tif(deep[x]>deep[y])swap(x,y);\n\t\treturn x;\n\t}\n} shupou;\nvoid Rd(int &res) {//\u8bfb\u4f18\n\tres=0;\n\tchar ch=getchar();\n\twhile('0'>ch||ch>'9')ch=getchar();\n\twhile('0'<=ch&&ch<='9')res=(res<<3)+(res<<1)+(ch-'0'),ch=getchar();\n}\nvoid Add(int st,int ed,int v) {\n\ttot++;\n\tG[tot]=Edge {ed,v,head[st]};\n\thead[st]=tot;\n}\nvoid DFS(int x,int fa,int &bb) {\n\tnum[x]=bb;\n\tfor(int i=head[x]; ~i; i=G[i].last) {\n\t\tint t=G[i].ed;\n\t\tif(t==fa)continue;\n\t\tif(!mark[t])continue;\n\t\tlian[bb]=G[i].v;\n\t\tbb++;\n\t\tDFS(t,x,bb);\n\t}\n}\nvoid DFSla(int x,int fa,int zu) {//\u540e\u7f00\n\tvis[x]=1;\n\tfor(int i=0; i<Q[x].size(); i++) {//\u8bbf\u95eevector\n\t\tint t=Q[x][i].ed,id=Q[x][i].id;\n\t\tif(vis[t]==1)sumla[zu]=max(sumla[zu],P[id].d);//\u66f4\u65b0\n\t}\n\tint nex=0;\n\tfor(int i=head[x]; ~i; i=G[i].last) {\n\t\tint t=G[i].ed,v=G[i].v;\n\t\tif(t==fa)continue;\n\t\tif(mark[t]) {//\u4f18\u5148\u904d\u5386\u4e24\u65c1\u4f38\u51fa\u7684\u5b50\u6811\n\t\t\tnex=t;\n\t\t\tcontinue;\n\t\t}\n\t\tDFSla(t,x,zu);\n\t}\n\tif(nex) {\n\t\tsumla[num[nex]]=sumla[num[x]];//\u66f4\u65b0\u4e0b\u4e00\u4e2a\u7684\u540e\u7f00\n\t\tif(nex==P[bh].st)return;//\u4e0b\u4e00\u4e2a\u70b9\u5982\u679c\u662f\u53e6\u4e00\u7aef\u70b9\u7684\u8bdd\u5c31\u76f4\u63a5\u9000\u51fa\n\t\tDFSla(nex,x,num[nex]);\n\t}\n}\nvoid DFSfr(int x,int fa,int zu) {//\u524d\u7f00\n\tvis[x]=1;\n\tfor(int i=0; i<Q[x].size(); i++) {//\u8bbf\u95eevector\n\t\tint t=Q[x][i].ed,id=Q[x][i].id;\n\t\tif(vis[t]==1)sumfr[zu]=max(sumfr[zu],P[id].d);//\u66f4\u65b0\n\t}\n\tint nex=0;\n\tfor(int i=head[x]; ~i; i=G[i].last) {\n\t\tint t=G[i].ed,v=G[i].v;\n\t\tif(t==fa)continue;\n\t\tif(mark[t]) {//\u4f18\u5148\u904d\u5386\u4e24\u65c1\u4f38\u51fa\u7684\u5b50\u6811\n\t\t\tnex=t;\n\t\t\tcontinue;\n\t\t}\n\t\tDFSfr(t,x,zu);\n\t}\n\tif(nex) {\n\t\tsumfr[num[nex]]=sumfr[num[x]];//\u66f4\u65b0\u4e0b\u4e00\u4e2a\u7684\u524d\u7f00\n\t\tif(nex==P[bh].ed)return;//\u4e0b\u4e00\u4e2a\u70b9\u5982\u679c\u662f\u53e6\u4e00\u7aef\u70b9\u7684\u8bdd\u5c31\u76f4\u63a5\u9000\u51fa\n\t\tDFSfr(nex,x,num[nex]);\n\t}\n}\nint main() {\n\tmemset(head,-1,sizeof(head));\n\tRd(n),Rd(m);\n\tfor(int i=1; i<=n-1; i++) {\n\t\tint x,y,z;\n\t\tRd(x),Rd(y),Rd(z);\n\t\tAdd(x,y,z);\n\t\tAdd(y,x,z);\n\t}\n\tshupou.DFS1(1,0,0);\n\tshupou.DFS2(1,0,1);\n\tfor(int i=1; i<=m; i++) {\n\t\tRd(P[i].st),Rd(P[i].ed);\n\t\tP[i].lca=shupou.LCA(P[i].st,P[i].ed);\n\t\tP[i].d=dis[P[i].st]+dis[P[i].ed]-2*dis[P[i].lca];\n\t\tif(P[i].d>maxx)maxx=P[i].d,bh=i;\n\t\tQ[P[i].st].push_back(que {P[i].ed,i});\n\t\tQ[P[i].ed].push_back(que {P[i].st,i});\n\t}\n\tint st=P[bh].st,ed=P[bh].ed,lca=P[bh].lca;\n\twhile(st!=lca)mark[st]=true,st=pre[st];\n\twhile(ed!=lca)mark[ed]=true,ed=pre[ed];\n\tmark[lca]=true;\n\tint bb=1;\n\tDFS(P[bh].st,0,bb);\n\tDFSfr(P[bh].st,0,num[P[bh].st]);\n\tmemset(vis,false,sizeof(vis));\n\tDFSla(P[bh].ed,0,num[P[bh].ed]);\n\tfor(int i=1;i<=bb;i++){//\u66f4\u65b0\u6700\u7ec8\u7b54\u6848\n\t\tint res=0;\n\t\tres=max(res,P[bh].d-lian[i]);\n\t\tres=max(res,sumfr[i]);\n\t\tres=max(res,sumla[i+1]);\n\t\tans=min(ans,res);\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1565859841,
        "uid": 54298,
        "name": "\u7cea\u773e\u8126\u98b0\u7f77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u9898\u89e3\u91cc\u4e00\u5806\u5927\u4f6c\u53d1\u4e8c\u5206\u7684\u9898\u89e3\u2026\u2026\u672c\u849f\u84bb\u770b\u4e0d\u61c2\uff0c\u4f46\u662f\u81ea\u5df1\u60f3\u51fa\u4e86\u4e00\u79cd\u65b9\u6cd5\uff0c\u59d1\u4e14\u5199\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u9898\u610f\u5373\u7ed9\u4f60\u5f88\u591a\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u6bcf\u6761\u8fb9\u6709\u8fb9\u6743\uff0c\u73b0\u5728\u53ef\u4ee5\u5c06\u4e00\u6761\u8fb9\u6743\u6539\u4e3a$0$\uff0c\u6c42\u4fee\u6539\u4e4b\u540e\u8fd9\u4e9b\u8def\u5f84\u7684\u957f\u5ea6\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u53ef\u4ee5\u662f\u591a\u5c11\u3002\n\n\u9996\u5148\uff0c\u521d\u59cb\u7684\u6bcf\u6761\u8def\u5f84\u957f\u5ea6\u53ef\u4ee5\u7528\u500d\u589e\u6c42\u51fa\u3002\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u5bb9\u6613\u60f3\u5230\u8981\u4fee\u6539\u7684\u8fb9\u4e00\u5b9a\u5728\u6700\u5927\u8def\u5f84\u4e0a\u9762\uff08\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u6700\u5927\u503c\u4e0d\u6539\u53d8\uff0c\u6ca1\u6709\u4f18\u5316\u6548\u679c\uff09\u3002\u4f46\u662f\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u4e0d\u5728\u6b21\u5927\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48\u4fee\u6539\u4e4b\u540e\uff0c\u6700\u5927\u8def\u5f84\u957f\u5ea6\u53d8\u5c0f\uff0c\u800c\u539f\u6765\u7684\u6b21\u5927\u8def\u5f84\u957f\u5ea6\u4e0d\u53d8\uff0c\u6240\u4ee5\u6b21\u5927\u8def\u5f84\u5c31\u53ef\u80fd\u53d8\u4e3a\u65b0\u7684\u6700\u5927\u8def\u5f84\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u662f\u6700\u4f18\u89e3\u3002\u540c\u6837\uff0c\u53ea\u4f7f\u6700\u5927\u7684\u4e24\u6761\u8def\u5f84\u7684\u6700\u5c0f\u4e5f\u4e0d\u80fd\u4fdd\u8bc1\u539f\u6765\u7684\u7b2c\u4e09\u5927\u8def\u5f84\u4e0d\u53d8\u4e3a\u65b0\u7684\u6700\u5927\u8def\u5f84\uff0c\u4f7f\u7b54\u6848\u4e0d\u80fd\u6700\u4f18\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u9700\u8981\u679a\u4e3e\u90a3\u4e9b\u9700\u8981\u6539\u53d8\u957f\u5ea6\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u6c42\u5f97\u5b83\u4eec\u7684\u516c\u5171\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u679a\u4e3e\u662f$O(m)$\u7684\u3002\u6211\u4eec\u9996\u5148\u5c06\u8def\u5f84\u6309\u521d\u59cb\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u90a3\u4e48\u9700\u8981\u6539\u53d8\u957f\u5ea6\u7684\u8def\u5f84\u5fc5\u987b\u662f\u4ece\u7b2c\u4e00\u6761\u8def\u5f84\u5f00\u59cb\u8fde\u7eed\u7684\u4e00\u4e2a\u533a\u95f4\uff08\u521d\u59cb\u957f\u5ea6\u7b2c$1,2,...,k$\u5927\u7684\u8def\u5f84\uff09\u3002\u5982\u679c\u4e0d\u662f\u8fd9\u6837\uff0c\u90a3\u4e48\u5fc5\u7136\u6709\u4e00\u4e2a\u8def\u5f84\u957f\u5ea6\u4e0d\u5c0f\u4e8e\u6700\u540e\u4e00\u4e2a\u88ab\u9009\u62e9\u7684\u8def\u5f84\u7684\u957f\u5ea6\u7684\u8def\u5f84\u672a\u88ab\u9009\u62e9\u3002\u8fd9\u6837\uff0c\u5b83\u5c31\u4f1a\u6bd4\u5b83\u4e4b\u540e\u7684\u6240\u6709\u8def\u5f84\u66f4\u6709\u53ef\u80fd\u6210\u4e3a\u65b0\u7684\u6700\u5927\u957f\u5ea6\u8def\u5f84\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u9009\u62e9$a_1,a_2,...,a_{k-1},a_k$\uff0c\u6709$b$\u672a\u88ab\u9009\u62e9\u4e14$b<a_k$\uff0c\u5219\u9009\u62e9$a_1,a_2,...,a_{k-1},b$\u5fc5\u5b9a\u4e0d\u5dee\u4e8e\u539f\u6765\u7684\u9009\u62e9\u3002\u5982\u679c\u9009\u62e9$1,2,...,k$\uff0c\u90a3\u4e48\u6b64\u65f6\u7684$ans$\u5c31\u662f$\\max(a_1-s,dis_{k+1})$\u5176\u4e2d$dis$\u8868\u793a\u521d\u59cb\u8def\u5f84\u957f\u5ea6\uff0c$s$\u8868\u793a$1$\u5230$k$\u8def\u5f84\u7684\u516c\u5171\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u503c\u3002\n\n\u73b0\u5728\u95ee\u9898\u5c31\u662f\u600e\u4e48\u6c42\u4e24\u6761\u8def\u5f84\u7684\u516c\u5171\u8def\u5f84\u3002\u7531\u4e8e\u6761\u4ef6\u9650\u5236\uff0c\u672c\u4eba\u4e0d\u80fd\u63d0\u4f9b\u56fe\u7247\u89e3\u91ca\uff0c\u4f46\u662f\u5927\u5bb6\u81ea\u884c\u4e3e\u4f8b\u68c0\u9a8c\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u8981\u6c42$a,b$\u548c$c,d$\u7684\u516c\u5171\u8def\u5f84\uff0c\u90a3\u4e48\u8fd9\u6761\u516c\u5171\u8def\u5f84\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5c31\u662f$lca(a,c),lca(a,d),lca(b,c),lca(b,d)$\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u4e24\u4e2a\u3002\u5f53\u5b83\u4eec\u6ca1\u6709\u516c\u5171\u8def\u5f84\u65f6\uff0c\u5f97\u5230\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u3002\u8fd9\u4e2a\u7ed3\u8bba\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u610f\u4f1a\u4e00\u4e0b\uff0c\u60f3\u8981\u8bc1\u660e\u4e5f\u53ef\u4ee5\uff0c\u53ea\u4e0d\u8fc7\u9700\u8981\u6bd4\u8f83\u591a\u7684\u5206\u7c7b\u8ba8\u8bba\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e$k$\uff0c\u7136\u540e\u4e0d\u65ad\u5730\u6c42\u4e0a\u4e00\u6bb5\u516c\u5171\u8def\u5f84\u4e0e\u65b0\u7684$k$\u53f7\u8def\u5f84\u7684\u516c\u5171\u8def\u5f84\u662f\u591a\u5c11\uff0c\u7136\u540e\u5957\u7528\u4e0a\u9762\u7684\u516c\u5f0f\u8ba1\u7b97\u6b64\u65f6\u7684$ans$\uff0c\u6700\u540e\u53d6\u6700\u5c0f\u7684$ans$\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6ce8\u610f\u7b2c$13$\u53f7\u70b9\u6781\u5176\u5361\u5e38\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u4e00\u4e2a\u7279\u5224\uff0c\u5373\u5f53\u5f53\u524d\u516c\u5171\u8def\u5f84\u5df2\u7ecf\u4e0d\u5b58\u5728\uff08\u8d77\u70b9\u7ec8\u70b9\u76f8\u540c\uff09\u65f6\uff0c\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\uff0c\u53ef\u4ee5\u521a\u521a\u5361\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<iostream>\n#include<queue>\nusing namespace std;\nint n,m;\nstruct Edge\n{\n    int t,nexty,val;\n}edge[1000000];\nint head[500000],cnt=0;\nvoid add(int a,int b,int c)\n{\n    cnt++;\n    edge[cnt].t=b;\n    edge[cnt].nexty=head[a];\n    edge[cnt].val=c;\n    head[a]=cnt;\n}\nstruct LIAN\n{\n    int a,b,zhi;\n}lian[500000];\nint dep[500000],fa[500000];\nint f[300100][20],zhi[300100][20],maxn[300100][20];\nvoid dfs(int node)\n{\n    for(int i=head[node];i;i=edge[i].nexty)\n    {\n        if(edge[i].t==fa[node])continue;\n        dep[edge[i].t]=dep[node]+1;\n        fa[edge[i].t]=f[edge[i].t][0]=node;\n        zhi[edge[i].t][0]=edge[i].val;\n        maxn[edge[i].t][0]=edge[i].val;\n        dfs(edge[i].t);\n    }\n}\nvoid ini()\n{\n    for(int i=1;i<=19;i++)for(int j=1;j<=n;j++)\n    f[j][i]=f[f[j][i-1]][i-1],zhi[j][i]=zhi[j][i-1]+zhi[f[j][i-1]][i-1],maxn[j][i]=max(maxn[j][i-1],maxn[f[j][i-1]][i-1]);\n}\ninline int lcazhi(int a,int b)\n{\n    if(dep[a]<dep[b])swap(a,b);\n    int c=0;\n    for(int i=19;i>=0;i--)\n    {\n        if(dep[f[a][i]]>=dep[b])\n        {\n            c+=zhi[a][i];\n            a=f[a][i];\n        }\n    }\n    if(a==b)return c;\n    for(int i=19;i>=0;i--)\n    {\n        if(f[a][i]!=f[b][i])\n        {\n            c+=zhi[a][i]+zhi[b][i];\n            a=f[a][i],b=f[b][i];\n        }\n    }\n    return c+zhi[a][0]+zhi[b][0];\n}\ninline int lcamax(int a,int b)\n{\n    if(dep[a]<dep[b])swap(a,b);\n    int c=0;\n    for(int i=19;i>=0;i--)\n    {\n        if(dep[f[a][i]]>=dep[b])\n        {\n            c=max(c,maxn[a][i]);\n            a=f[a][i];\n        }\n    }\n    if(a==b)return c;\n    for(int i=19;i>=0;i--)\n    {\n        if(f[a][i]!=f[b][i])\n        {\n            c=max(c,max(maxn[a][i],maxn[b][i]));\n            a=f[a][i],b=f[b][i];\n        }\n    }\n    return max(c,max(maxn[a][0],maxn[b][0]));\n}\ninline int lca(int a,int b)\n{\n    if(dep[a]<dep[b])swap(a,b);\n    for(int i=19;i>=0;i--)\n    {\n        if(dep[f[a][i]]>=dep[b])\n        {\n            a=f[a][i];\n        }\n    }\n    if(a==b)return a;\n    for(int i=19;i>=0;i--)\n    {\n        if(f[a][i]!=f[b][i])\n        {\n            a=f[a][i],b=f[b][i];\n        }\n    }\n    return fa[a];\n}\nbool cmp(const LIAN &a,const LIAN &b)\n{\n    return a.zhi>b.zhi;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)for(int j=0;j<=19;j++)maxn[i][j]=0;\n    int a,b,c,d[4];\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);add(b,a,c);\n    }\n    for(int i=1;i<=m;i++)scanf(\"%d%d\",&lian[i].a,&lian[i].b);\n    dep[1]=1;dfs(1);ini();\n    for(int i=1;i<=m;i++)\n    {\n        lian[i].zhi=lcazhi(lian[i].a,lian[i].b);\n    }\n    sort(lian+1,lian+m+1,cmp);\n    int aa=lian[1].a,bb=lian[1].b;\n    int ans=lian[1].zhi;\n    if(m>=2)ans=min(ans,max(lian[1].zhi-lcamax(lian[1].a,lian[1].b),lian[2].zhi));\n    else ans=lian[1].zhi-lcamax(lian[1].a,lian[1].b);\n    for(int i=2;i<=m;i++)\n    {\n    \tif(aa==bb)break;//\u7279\u5224\n        d[0]=lca(aa,lian[i].a);\n        d[1]=lca(aa,lian[i].b);\n        d[2]=lca(bb,lian[i].a);\n        d[3]=lca(bb,lian[i].b);\n        aa=d[0],bb=d[1];\n        if(dep[aa]<dep[bb])swap(aa,bb);\n        if(dep[d[2]]>dep[aa]){bb=aa;aa=d[2];}\n        else if(dep[d[2]]>dep[bb]){bb=d[2];}\n        if(dep[d[3]]>dep[aa]){bb=aa;aa=d[3];}\n        else if(dep[d[3]]>dep[bb]){bb=d[3];}//\u6c42\u6700\u6df1\u4e8c\u70b9\n        if(i!=m)ans=min(ans,max(lian[1].zhi-lcamax(aa,bb),lian[i+1].zhi));\n        else ans=min(ans,lian[1].zhi-lcamax(aa,bb));\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1539776341,
        "uid": 32275,
        "name": "KesdiaelKen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \u4e8c\u5206\u7b54\u6848 + \u6811\u94fe\u5256\u5206 + \u6811\u4e0a\u5dee\u5206\n\u9996\u5148\uff0c\u7406\u89e3\u4e00\u4e0b\u9898\u610f\uff1a\n\n\u6211\u4eec\u9700\u8981\u627e\u51fa\u627e\u51fa\u4e00\u6761\u8fb9\uff0c\u628a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u8d4b\u62100\uff0c\u4f7f\u5f97m\u6761\u8def\u5f84\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002\n\n\u6700\u5927\u503c\u6700\u5c0f\uff0c\u6211\u4eec\u9996\u5148\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u7136\u540e\uff0c\u600e\u4e48$check$\u5462\uff1f\n\n\u6211\u4eec\u9700\u8981\u628a\u6bd4mid\u957f\u7684\u8def\u5f84\u53bb\u6389\u4e00\u6761\u8fb9\uff0c\u5047\u8bbe\u6709k\u6761\u8def\u5f84\u6bd4mid\u957f\uff0c\u90a3\u4e48\u53bb\u7684\u8fd9\u4e2a\u8fb9\uff0c\u4e00\u5b9a\u662f\u8981\u88ab\u8fd9k\u6761\u8def\u5f84\u5168\u90e8\u7ecf\u8fc7\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6811\u4e0a\u5dee\u5206\uff0c\u5316\u8fb9\u6743\u4e3a\u70b9\u6743\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\uff08\u4ee3\u8868\u7684\u90a3\u6761\u8fb9\uff09\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\uff0c\u90a3\u4e48\u5982\u679c\u5b83\u88ab\u7ecf\u8fc7\u4e86k\u6b21\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u628a\u5b83\u53bb\u6389\u3002\u90a3\u4e48\u628a\u6240\u6709\u88ab\u7ecf\u8fc7k\u6b21\u7684\u70b9\u7684\u70b9\u6743\u6c42\u4e2a\u6700\u5927\u503c\uff0c\u90a3\u4e48\u53bb\u6389\u90a3\u4e2a\u6700\u5927\u7684\u8fb9\uff08\u6240\u5bf9\u5e94\u7684\u70b9\uff09\uff0c\u662f\u6700\u4f18\u7684\u3002\n\n\u5982\u679c\u6700\u957f\u7684\u90a3\u4e2a\u8def\u5f84\u51cf\u53bb\u6700\u5927\u7684\u8fb9$~\\le mid$\u7684\u8bdd\uff0ccheck\u6210\u529f\u3002 \u5426\u5219\uff0c\u5931\u8d25\u3002\n\n\u8fd9\u91cc\u7684LCA\u548c\u8def\u5f84\u957f\u5ea6\u5148\u9884\u5904\u7406\u51fa\u6765\uff0c\u7701\u7684\u4ee5\u540e\u518d\u6c42\uff08\u5361\u5361\u5e38\uff09\u3002\n\n\u8fd9\u91cc\u7684LCA\u9009\u62e9\u7528\u6811\u5256\u6c42~~\u500d\u589e\u5e38\u6570\u592a\u5927\uff0c\u5438\u6c27\u90fd\u8fc7\u4e0d\u4e86~~\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\nusing namespace std;\nconst int N = 300005;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m , l , r , mid , k , res , ans , maxn;\nint fa[N] , f[N] , a[N] , dep[N] , dis[N] , top[N] , size[N] , hs[N];\nstruct Edge\n{\n\tint to , dis; Edge *nxt;\n\tEdge(int to,int dis,Edge *nxt) : to(to) , dis(dis) , nxt(nxt) {}\n}*head[N];\ninline void add(int u,int v,int w) {head[u] = new Edge(v,w,head[u]);}\nvoid get_tree(int x)\n{\n\tsize[x] = 1;\n\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t{\n\t\tint to = i -> to;\n\t\tif(dep[to]) continue;\n\t\tdep[to] = dep[x] + 1;\n\t\tdis[to] = dis[x] + i -> dis;\n\t\tfa[to] = x;\n\t\ta[to] = i -> dis;\n\t\tget_tree(to);\n\t\tsize[x] += size[to];\n\t\tif(size[to] > size[hs[x]]) hs[x] = to;\n\t}\n}\nvoid get(int x,int topfa)\n{\n\ttop[x] = topfa;\n\tif(hs[x]) get(hs[x],topfa);\n\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t{\n\t\tint to = i -> to;\n\t\tif(to == hs[x] || to == fa[x]) continue;\n\t\tget(to,to);\n\t}\n}\ninline int LCA(int x,int y)\n{\n\twhile(top[x] != top[y]) \n\t{\n\t\tif(dep[top[x]] < dep[top[y]]) x ^= y ^= x ^= y;\n\t\tx = fa[top[x]];\n\t}\n\treturn dep[x] < dep[y] ? x : y;\n}\nstruct queryy {int u , v , lca , dis;}e[N];\nvoid dfs(int x)\n{\n\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t{\n\t\tint to = i -> to;\n\t\tif(to == fa[x]) continue;\n\t\tdfs(to);\n\t\tf[x] += f[to];\n\t}\n\tif(f[x] == k) res = max(res,a[x]);\n}\ninline bool check()\n{\n\tfor(int i = 1;i <= n;i ++) f[i] = 0; k = 0; res = 0; maxn = 0;\n\tfor(int i = 1;i <= m;i ++) if(e[i].dis > mid) f[e[i].u] ++ , f[e[i].v] ++ , f[e[i].lca] -= 2 , k ++ , maxn = max(maxn,e[i].dis);\n\tdfs(1);\n\tif(maxn - res <= mid) return 1;\n\treturn 0;\n}\nint main()\n{\n\tn = read(); m = read();\n\tfor(int i = 1 , u , v , w;i < n;i ++)\n\t{\n\t\tu = read(); v = read(); w = read();\n\t\tadd(u,v,w); add(v,u,w);\n\t}\n\tdep[1] = 1;\n\tget_tree(1); get(1,1);\n\tfor(int i = 1 , u , v , lca;i <= m;i ++)\n\t{\n\t\te[i].u = u = read(); e[i].v = v = read();\n\t\te[i].lca = lca = LCA(u,v); e[i].dis = dis[u] + dis[v] - 2 * dis[lca]; r = max(r,e[i].dis);\n\t}\n\twhile(l <= r)\n\t{\n\t\tmid = (l + r) >> 1;\n\t\tif(check()) ans = mid , r = mid - 1;\n\t\telse l = mid + 1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1570881568,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u62ff\u5230\u9898\uff0c\u9996\u5148\u5206\u6790\u4e00\u4e0b\u9898\u610f\uff1b\n\u7ed9\u4f60n\u4e2a\u70b9\u7684\u6811\uff0cm\u6761\u94fe\uff1b\n\u6c42\u53bb\u6389\u4e00\u4e2a\u8fb9\u540e\u6700\u5927\u94fe\u7684\u6700\u5c0f\u503c\uff1b\u5927\u4f6c\u8bf4\uff1a~~\uff08\u8fd9\u4e0d\u5c31\u662f\u4e8c\u5206\u4e48\uff09~~\n\n\u53cd\u6b63\u9996\u5148\u6211\u6ca1\u6709\u641e\u61c2\uff1b\n\n\u5148\u60f3\u4e86\u70b9\u60f3\u6cd5\uff1a\n\n1.\u5bf9\u4e8e\u90a3\u4e9b\u6210\u4e00\u6761\u94fe\u7684\uff0c\u66b4\u529b\u5220\u8fb9\uff0c\u6c42\u5220\u8fb9\u540e\u7684\u6700\u5927\u503c\uff1b\u5728\u53d6\u4e2amin\uff1b\n\n2.\u5f53m=1\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u4e24\u6761\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u6743\uff0c\u8ba9\u603b\u6743\u503c\u51cf\u6700\u5927\u8fb9\u6743\uff1b\n\n\u2026\u2026\n~~\u6765\u81ea\u673a\u623f\u67d0\u795e\u4ed9\uff08\u4e3a\u4ec0\u4e48\u4e0d\u6253\u6b63\u89e3\u6253\u66b4\u529b\u5462\uff01\uff01\uff01\uff09~~\n\n\u54b3\u54b3\uff0c\u6765\u8c08\u8c08\u6b63\u89e3\u2014\u2014\n\u4e8c\u5206\u52a0\u5dee\u5206\u5728\u7528\u4e2a\u6811\u5256\u5c31\u53ef\u4ee5\u4e86\uff1b\n\u6811\u5256\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86  \n~~\uff08\u90fd\u662f\u597d\u9898\u5440\uff09~~\n\n[Meg](https://www.luogu.org/problem/P3459)\n\n[\u6811\u7684\u7edf\u8ba1](https://www.luogu.org/problem/P2590)\n\n[\u6811\u4e0a\u7edf\u8ba1](https://www.luogu.org/problem/P3178)\n\n~~\u4e0d\u5c31\u662f\u6c42\u4e2alca\uff0c\u7528\u4ec0\u4e48\u6811\u5256\uff0c\u6211\u56de\u7b54\uff1a\u4e0d\u4f1a\u500d\u589e\u5566~~\n\u5176\u5b9e\u4e0a\u9762\u4ee8\u9898\u53ea\u662f\u4e2a\u6811\u5256\u5566\uff1b\n\u5dee\u5206\u7684\u8bdd \u6709\u4e2a[\u6700\u5927\u6d41](https://www.luogu.org/problem/P3128#submit)\n\u4e8c\u5206\u6211\u5c31\u4e0d\u8bf4\u4e86\uff1b\n\n\u5177\u4f53\u7684\u8bdd\u4e0b\u9762\u4ee3\u7801\u91cc\u6709\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#define int long long \nusing namespace std;\nstruct edge{\n\tint to,nexty,val;\n}e[805000];\nconst int maxn=305000;\nint head[300005],len[maxn],cnt; \nvoid add(int a,int b,int c)\n{\n\te[++cnt].to=b;\n\te[cnt].nexty=head[a];\n\te[cnt].val=c;\n\thead[a]=cnt;\n}\nint son[maxn],size[maxn],top[maxn],fa[maxn],dep[maxn];//dfs1\nint pass[maxn];//dfs2\nint dfn_sum,tree[maxn],treesum[maxn];\nvoid dfs1(int x,int f,int depp) \n{\t\n\tsize[x]=1;\n\tdep[x]=depp;\n\tfa[x]=f;\n\ttree[++dfn_sum]=x;//\u5c06x\u51fa\u73b0\u7684\u987a\u5e8f\uff08dfn\uff09\u8bb0\u5f55\u4e0b\u6765\uff1b \n\tfor(int i=head[x];i;i=e[i].nexty)\n\t{   int to=e[i].to;\n\t\tif(to==f)continue;\n\t\tdis[to]=dis[x]+e[i].val;\n\t\ttreesum[to]=e[i].val;//\u8fb9\u6743\u8f6c\u70b9\u6743\uff0c\u4e0b\u653e\u7ed9\u513f\u5b50\u8282\u70b9\uff1b \n\t\tdfs1(to,x,depp+1);\n\t\tsize[x]+=size[to];\n\t\tif(size[to]>size[son[x]])son[x]=to;\n\t}\n\treturn ;\n}\nvoid dfs2(int x,int topf)\n{\n\ttop[x]=topf;\n\tif(!son[x])return;\n\tdfs2(son[x],topf);\n\tfor(int i=head[x];i;i=e[i].nexty)\n\t{\t\t\t\n\t\tint to=e[i].to;\n\t\tif(to==fa[x]||to==son[x])continue;\n\t\tdfs2(to,to);\n\t}\n}\nint lca(int x,int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y])return x;\n\telse return y;\n}\n//\u4e0a\u9762\u6811\u5256\u6c42lca\u4e0d\u591a\u89e3\u91ca\uff1b \nint x[maxn],y[maxn],L[maxn],d[maxn],dis[maxn];\n//x\uff0cy\u6570\u7ec4\u50a8\u5b58\u6bcf\u6b21\u67e5\u8be2\u4e24\u70b9\u7684\u7f16\u53f7\uff1b\n//L\u50a8\u5b58\u4e24\u70b9\u7684lca\uff08\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09 \n//d\u50a8\u5b58\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb \n//dis \u6839\u8282\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb \n//\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb = \u4e24\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u548c\u51cf\u53bb\u4e24\u500d\u6700\u8fd1\u516c\u5171\u7956\u5148\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff1b \nint n,m,max1,maxx;//maxx:\u8def\u7ebf\u7684\u6700\u957f\u503c\uff0cmax1 \u4e24\u70b9\u95f4\u6700\u957f\u8def\u5f84\uff1b \nbool check(int k)\n{\n\tmemset(pass,0,sizeof(pass));\n\tcnt=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(d[i]>k)\n\t\t{\n\t\t\tpass[x[i]]++;pass[y[i]]++;pass[L[i]]-=2;\n\t\t\tcnt++;\n\t\t\t//\u5982\u679c\u6709\u8def\u5f84\u957f\u4e8ek\uff0c\u5c31\u53ef\u80fd\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e00\u6761\u8fb9\u8f6c\u4e3a0\u6765\u964d\u4f4e\u65f6\u95f4\uff1b \n\t\t}\t\n\t\t//k \u5c1d\u8bd5\u6700\u957f\u8def\u9700\u8981\u65f6\u95f4\uff1b \n\t}\n\tfor(int i=n;i>=1;i--)\n\t//\u901a\u8fc7\u6811\u5256dfn\u539f\u7406 \u4ece\u53f6\u8282\u70b9\u5411\u6839\u8282\u70b9\u8dd1//\u6b63\u597d\u6ee1\u8db3\u6811\u4e0a\u5dee\u5206\u6240\u9700\u8981\u7684\u987a\u5e8f\uff1b \n\t{\n\t\tpass[fa[tree[i]]]+=pass[tree[i]];\n\t\tif(treesum[tree[i]]>=maxx-k&&pass[tree[i]]==cnt)return 1;\n\t\t//\u5982\u679c\u4f60\u53d1\u73b0\u6709\u6761\u8def\u5927\u4e8e\u7b49\u4e8emaxx-k\uff08\u5728\u51cf\u53bb\u8fd9\u6761\u8fb9\u4e4b\u540e\u53ef\u4ee5\u5728k\u5185\u901a\u8fc7\uff09\uff1b\n\t\t//\u5e76\u4e14\u8fd9\u6761\u8fb9\u7684\u7ecf\u8fc7\u6b21\u6570\u6b63\u597d\u7b49\u4e8ecnt(cnt: \u5927\u4e8ek\u7684\u8fb9\u6570)\n\t\t//\u4f60\u5c31\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6761\u8fb9\u5c31\u662f\u53ef\u884c\u7684\u8fb9\uff1b \n\t}\n\treturn 0;\n}\nint ans; \nint erfen(int l,int r)\n{\n\tint mid;\n\t//\u4e8c\u5206\u7b54\u6848\uff0c(\u56e0\u4e3a\u5f53\u66f4\u77ed\u7684\u65f6\u95f4\u53ef\u4ee5\u901a\u8fc7\u65f6\uff0c\u66f4\u957f\u7684\u65f6\u95f4\u80af\u5b9a\u4e5f\u80fd\u884c\uff09\n\t//(\u6bd5\u7adf\u662f\u6c42\u7684\u6700\u5c0f\u503c\uff0c\u5927\u7684\u4e5f\u80fd\u884c\uff09\n\t//\u90a3\u4fbf\u662f\u6c42\u53ef\u884c\u7684\u6700\u5927\u503c\u91cc\u9762\u7684\u6700\u5c0f\u503c\uff1b \n\twhile(l<r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(check(mid))\n\t\t{\n\t\t\tans=mid;\n\t\t\tr=mid;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\treturn ans;\n}\nsigned main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<n;i++)\n\t{\t\t\n\t\tint a,b,c; \n\t\tscanf(\"%lld%lld%lld\",&a,&b,&c);\n\t\tadd(a,b,c),add(b,a,c);\n\t\tmax1=max(max1,c);\n\t}\n\tdis[1]=0;\n\tdfs1(1,0,0);\n\tdfs2(1,1);\n\tfor(int i=1;i<=m;i++)\n\t{\t\n\t\tint Lca;\n\t\tscanf(\"%lld%lld\",&x[i],&y[i]);\n\t\tL[i]=lca(x[i],y[i]);\n\t\td[i]=dis[x[i]]+dis[y[i]]-dis[L[i]]*2;\n\t\tmaxx=max(maxx,d[i]);\n\t}\n//\tdfs(1,0);\n\tcout<<erfen(maxx-max1,maxx);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1568955352,
        "uid": 123841,
        "name": "lwyz123",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "**\u7edd\u5bf9\u662f\u4e00\u4e2a\u5168\u65b0\u7684\u66b4\u529b\u601d\u8def\u3002~\u53ea\u4e0d\u8fc7\u8981\u5f00O2\u624d\u80fd\u8fc7\u3002**\n\n**\u63a5\u4e0b\u6765\u8fdb\u5165\u6b63\u9898\u3002**\n```\n\u770b\u5230\u6709\u4e00\u6761\u8fb9\u53ef\u4ee5\u53d8\u62100\uff0c\u5f88\u81ea\u7136\u5730\u5c31\u60f3\u5230\u8981\u5220\u8fb9\u3002\n\u90a3\u4e48\u600e\u4e48\u5224\u65ad\u4e00\u6761\u8fb9\u662f\u4e0d\u662f\u5728\u4e00\u6761\u8def\u5f84\u4e0a\u5462\uff1f\n\u8bbe\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e3au,v;\n\u90a3\u6761\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u4e3ax,y;\n\u6211\u4eec\u628a\u8fd9\u4e2a\u95ee\u9898\u62c6\u6210\u4e24\u4e2a\u5c0f\u95ee\u9898\u6765\u505a\uff0c\n**1**\u5148\u5224\u5b9a\u4e00\u4e2a\u70b9\u662f\u4e0d\u662f\u5728\u90a3\u6761\u8def\u5f84\u4e0a\uff1b\n**2**\u518d\u5224\u65ad\u53e6\u4e00\u4e2a\u70b9\u662f\u4e0d\u662f\u4e5f\u5728\u90a3\u6761\u8def\u5f84\u4e0a\uff1b\n\u5224\u5b9a\u4e00\u4e2a\u70b9\u662f\u4e0d\u662f\u5728\u4e00\u6761\u8def\u5f84\u4e0a\u6ee1\u8db3\u5982\u4e0b\u7b49\u5f0f\u5373\u53ef\n\u8bbedis(i,j)\u4e3a\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\n\tdis(u,x)+dis(u,y)==dis(x,y)\n\u81f3\u4e8e\u8bc1\u660e\u7528\u53cd\u8bc1\u6cd5\n\u89e3\u51b3\u4e86\u8fd9\u4e2a\u4e4b\u540e\u63a5\u4e0b\u6765\u7684\u5c31\u90fd\u662f\u66b4\u529b\u4e86\n\u7ec6\u8282\u4f1a\u5728\u4ee3\u7801\u91cc\u6807\u6ce8\n```\n```````\n#include<bits/stdc++.h>\nusing namespace std;\nconst int ll=1e6;\nint head[ll],next[ll],uer[ll],ver[ll],wer[ll],tot;\nint f[ll][30],d[ll],dis[ll],t;\nvoid read(int &t)//\u5077\u6765\u7684\u5feb\u8bfb\n{\n    char ch;\n    while(ch = getchar())\n        if(ch>='0' && ch<='9')\n            break;\n\n    t = ch - '0';\n    while(ch = getchar())\n        if(ch>='0' && ch<='9')\n            t = (t<<3)+(t<<1)+ch-'0';\n        else break;\n}\nvoid add(int u,int v,int w){//\u524d\u5411\u661f\u5b58\u56fe\n\ttot++;\n\tuer[tot]=u;\n\tver[tot]=v;\n\twer[tot]=w;\n\tnext[tot]=head[u];\n\thead[u]=tot;\n}\nint n,m;\nvoid bfs(){\n\tqueue<int> q;\n\tq.push(1);\n\twhile(q.size()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[x]; i ; i=next[i]){\n\t\t\tint y=ver[i],w=wer[i];\n\t\t\tif(d[y]) continue;\n\t\t\td[y]=d[x]+1;\n\t\t\tdis[y]=dis[x]+w;\n\t\t\tf[y][0]=x;\n\t\t\tfor(int j=1;j<=t;j++)\n\t\t\t\tf[y][j]=f[f[y][j-1]][j-1];\n\t\t\tq.push(y);\n\t\t}\n\t}\n}\nint lca(int x,int y){\n\tif(d[x]<d[y]) swap(x,y);\n\tfor(int i=t;i>=0;i--)\n\t\tif(d[f[x][i]]>=d[y])\n\t\t\tx=f[x][i];\n\t\n\tif(x==y) return x;\n\t\n\tfor(int i=t;i>=0;i--)\n\t\tif(f[x][i]!=f[y][i])\n\t\tx=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\nstruct jh{\n\tint u,v,w;\n}a[ll];//\u4fdd\u5b58\u8def\u5f84\u7684\u8d77\u70b9,\u7ec8\u70b9\u548c\u957f\u5ea6\nbool cmp(jh a,jh b){\n\treturn a.w>b.w;\n}\nbool pd(int a,int b,int c,int len){\n\treturn 2*dis[a]+dis[b]+dis[c]-2*(dis[lca(a,b)]+dis[lca(a,c)])==len;\t\n}\nint main(){\n\tread(n); read(m);\n\tfor(int i=1;i<=n-1;i++){\n\t\tint u,v,w;\n\t\tread(u); read(v); read(w);\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tt=log(n)/log(2)+1;\n\td[1]=1;\n\tbfs();\n\tfor(int i=1;i<=m;i++){\n\t\tread(a[i].u); read(a[i].v);\n\t\ta[i].w=dis[a[i].u]+dis[a[i].v]-2*dis[lca(a[i].u,a[i].v)];\t\t\n\t}\n\tint ans=1<<30;\n\tsort(a+1,a+m+1,cmp);//\u628a\u8ba1\u5212\u6309\u7167\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\n\tfor(int i=1;i<=2*(n-1);i+=2){\n\t\tint x=uer[i],y=ver[i],w=wer[i];//\u679a\u4e3e\u5220\u8fb9\n\t\tint sum=0;\n\t\tfor(int j=1;j<=m;j++){//\u7531\u4e8e\u8def\u5f84\u957f\u5ea6\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff0c\n\t\t\tint flag=0;     //\u4e00\u65e6sum\u4e0d\u53ef\u80fd\u518d\u88ab\u66f4\u65b0\u7acb\u5373\u9000\u51fa\u3002\n\t\t\tint u=a[j].u,v=a[j].v;\n\t\t\tint fa=lca(u,v);\n\t\t\tint len=dis[u]+dis[v]-2*dis[fa];\n\t\t\tif(pd(x,u,v,len)&&pd(y,u,v,len)){\n\t\t\t\tif(sum<len-w)\n\t\t\t\t\tsum=len-w;\n\t\t\t\t\tflag=1;\n\t\t\t\tif(sum>ans) break;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(sum<len){\n\t\t\t\t\tsum=len;\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\tif(!flag) break;\n\t\t}\n\t\tans=min(ans,sum);\n\t}\n\tprintf(\"%d\",ans);\t\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n",
        "postTime": 1566437063,
        "uid": 102898,
        "name": "liangchengjia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u771f\u662f\u4e00\u9053\u597d\u9898\uff01\n\n\u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u4f60`n`\u4e2a\u70b9\u7684\u6811\uff0c\u6709`m`\u6761\u94fe\uff0c\u6c42\u5220\u53bb\u4efb\u610f\u4e00\u6761\u8fb9\u540e\u6700\u957f\u94fe\u7684\u6700\u5c0f\u957f\u5ea6\n\n~~\u53e3\u80e1\u5f00\u59cb~~\n\n1. \u5148\u627e\u51fa`m`\u6761\u94fe\u7684\u6700\u957f\u94fe\uff0c\u6240\u4ee5\u8981\u9884\u5904\u7406\u51fa`lca`,`dis`\uff08\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff09\n\n2. \u6c42\u6700\u957f\u94fe\u7684\u6700\u5c0f\u503c\uff08\u662f\u4e0d\u662f\u6709\u70b9\u50cf\u4e8c\u5206\u554a\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u5230\u4e8c\u5206\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u65f6\u95f4\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ea\u8981\u60f3\u60f3`pd`\u51fd\u6570\u600e\u4e48\u5199\n\n# \u5de7\u5999\u7684\u6765\u4e86\uff01\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u8981\u5220\u9664\u7684\u8fb9\u4e00\u5b9a\u662f\u957f\u5ea6\u6700\u957f\u7684\u800c\u4e14\u88ab\u7ecf\u8fc7\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e00\u6761\u8fb9\n\n\u4f46\u65b0\u7684\u95ee\u9898\u53c8\u6765\u4e86,\u600e\u4e48\u6c42\u51fa\u6bcf\u6761\u8fb9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\u5462\uff1f~~\u66b4\u529b+\u795e\u5a01\u592a\u6e56\u4e4b\u5149\u8ba1\u7b97\u673a\u6216\u8bb8\u53ef\u4ee5~~\n\n\u8fd9\u53c8\u8981\u7528\u5230**\u6811\u4e0a\u5dee\u5206\u4e2d\u7684\u8fb9\u5dee\u5206**\n\n\u5177\u4f53\u64cd\u4f5c\uff1a\n\n$s->t$\u540e\uff0c\u5982\u679c\u8981\u66f4\u65b0$s->t$\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\uff0c\u90a3\u4e48\uff1a\n\n1. \u5c06\u8fb9\u6743\u585e\u7ed9\u70b9\uff08\u76f8\u5f53\u4e8e\u8fb9\u4e0a\u64cd\u4f5c\u6389\u70b9\uff09\n\n2. \u8bbe`sum[i]`\u4e3a`i`\u70b9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\n\n3. $sum[s]++,sum[t]++,sum[lca(s,t)]-=2$\n\n\u8fd9\u6837\u5c31\u80fd\u5b9e\u73b0\u5dee\u5206\u4e86\n\n\u6211\u4eec\u518d\u7edf\u8ba1\u957f\u5ea6$>=t$ (`t`\u4e3a\u4e8c\u5206\u7684\u65f6\u95f4\uff09\u7684\u94fe\u6570\uff0c\u518d\u627e\u51fa\u88ab\u7ecf\u8fc7\u6b21\u6570\u7b49\u4e8e`num`\u7684\u8fb9\uff0c\u5224\u65ad\u662f\u5426\u7b26\u5408\u6761\u4ef6\u5373\u53ef\n\n\n```cpp\n// luogu-judger-enable-o2\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define MAXN 300050\n#define ll long long\n#define re register int \nusing namespace std;\nint n,m,a[MAXN],sum[MAXN];\nint f[MAXN][22],dep[MAXN],head[MAXN];\nint init[MAXN];\nint dis[MAXN],num,now,ans=0;\nint mmax1=0;\nstruct tu{\n\tint u,v,w,nxt;\n}e[MAXN*2];\nstruct node{\n\tint x,y,dis,lca;\n}ask[MAXN];\nbool comp(node aa,node bb){\n\treturn aa.dis<bb.dis;\n}\nint cnt;\nvoid add(int u,int v,int w){\n\te[++cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].nxt=head[u];\n\te[cnt].w=w;\n\thead[u]=cnt;\n}\nvoid dfs(int u,int fa,int dd){\n\tdep[u]=dep[fa]+1;\n\tf[u][0]=fa;\n\tinit[u]=dd;\n\tmmax1=max(mmax1,dd);\n\tfor(re i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v==fa){\n\t\t\tcontinue;\n\t\t}\n\t\tdis[v]=dis[u]+e[i].w;\n\t\tdfs(v,u,e[i].w);\n}\n}\nint lca(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y);\n\tfor(re i=20;i>=0;i--)\n\t\t{\n\t\t\tif(dep[f[x][i]]>=dep[y])x=f[x][i];\n\t\t}\n\t\tif(x==y)return x;\n\t\tfor(re i=20;i>=0;i--){\n\t\t\tif(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];\n\t\t}\n\t\treturn f[x][0];\n}\n\nvoid dfs2(int u){\n\tfor(re i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v==f[u][0])continue;\n\t\tdfs2(v);\n\t\tsum[u]+=sum[v];\n\t}\n}\nint pd(int x){\n\tnum=0,now=0;\n\tmemset(sum,0,sizeof(sum));\n\tfor(re i=m;i>=1;i--)\n\t{\n\t\tif(ask[i].dis<=x)break;\n\t\tsum[ask[i].x]++;\n\t\tsum[ask[i].y]++;\n\t\tsum[ask[i].lca]-=2;\n\t\tnum++;\n\t}\n\tdfs2(1);\n\tfor(re i=1;i<=n;i++)\n\t{\n\t\tif(sum[i]==num)now=max(now,init[i]);\n}\n\tif(x>=ask[m].dis-now)return 1;\n\telse return 0;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tint mmax=0;\n\tfor(re i=1;i<=n-1;i++)\n\t{\n\t\tint a1,a2,a3;\n\t\tscanf(\"%d%d%d\",&a1,&a2,&a3);\n\t\tadd(a1,a2,a3);\n\t\tadd(a2,a1,a3);\n\t}\n\tdfs(1,0,0);\n\tfor(re j=1;j<=20;j++)\n\t\tfor(re i=1;i<=n;i++)\n\t\t\tf[i][j]=f[f[i][j-1]][j-1];\n\tfor(re i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\task[i].lca=lca(x,y);\n\t\task[i].dis=dis[x]+dis[y]-2*dis[ask[i].lca];\n\t\tmmax=max(mmax,(ask[i].dis));\n\t\task[i].x=x;\n\t\task[i].y=y;\n\t}\n\tsort(ask+1,ask+1+m,comp);\n\tint l=mmax-mmax1,r=mmax;\n  \t//\u5c0f\u526a\u679d\uff0cl\u4ece\u6700\u957f\u94fe-\u6700\u957f\u8fb9\u5f00\u59cb\u4e8c\u5206\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tif(pd(mid)){\n\t\t\tr=mid-1;\n\t\t\tans=mid;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1566118520,
        "uid": 57823,
        "name": "\u7ea2\u8272OI\u518d\u4e34",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "# \u4e8c\u5206+\u6811\u4e0a\u5dee\u5206+LCA\n\n\n## 0.\u95f2\u804a\n\u8fd9\u9898\u7801\u91cf\u53c8\u5927\u601d\u7ef4\u96be\u5ea6\u53c8\u5927\u771f\u662f\u641e\u6b7b\u849f\u84bb\u6211\u4e86\n\n\u672c\u6587\u662f\u53ea\u9488\u5bf9\u548c\u6211\u4e00\u6837\u849f\u84bb\u7684\u849f\u84bb\u4eec\u770b\u7684\uff0c\u5927\u4f6c\u8bf7\u81ea\u884c\u7ed5\u9053qwq\n\n## 1.\u4e8c\u5206\n\n\u9996\u5148\u9898\u76ee\u4e2d\u603b\u65f6\u95f4\u7531\u6700\u957f\u7684\u4e00\u4e2a\u8fd0\u8f93\u8ba1\u5212\u51b3\u5b9a\uff0c\u53c8\u8ba9\u4f60\u6c42\u6700\u5c0f\u503c\n\n\u5c31\u662f\u6700\u5c0f\u5316\u6700\u5927\u503c\n\n\u8fd9\u6837\u7684\u95ee\u9898\u65e0\u8111\u4e8c\u5206\u6ca1\u8dd1\u4e86\n\n\u90a3\u4e48\u5224\u65ad\u51fd\u6570\u600e\u4e48\u5199\u5462~~\u5f53\u573a\u66b4\u6bd9~~\n\n## 2.check\u51fd\u6570\n\n\u9996\u5148\u6211\u4eec\u60f3\u5230\u8981\u4e8c\u5206\u7b54\u6848~~\u5e9f\u8bdd\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u53eb\u4e8c\u5206\u7b54\u6848~~\n\n\u8bbe\u4e3a$k$\n\n\u9996\u5148\u8fd0\u8f93\u8ba1\u5212\u67e5\u8be2\u4e24\u70b9\u7684\u8ddd\u79bb\u6ca1\u5230$k$\u7684\u8bdd\u5c31\u4e0d\u7528\u7ba1\uff0c\u80af\u5b9a\u5408\u6cd5\n\n\u6240\u4ee5\u6211\u4eec\u60f3\u529e\u6cd5\u8bb0\u5f55\u8d85\u8fc7$k$\u7684\u67e5\u8be2\n\n\u5bf9\u4e8e\u8d85\u8fc7$k$\u7684\u67e5\u8be2\uff0c\u80af\u5b9a\u8981\u5c06\u8fd9\u4e9b\u8def\u5f84\u4e0a\u7684\u67d0\u6761\u8fb9\u53d8\u6210\u866b\u6d1e\u3002\n\n\u53c8 \u6bcf\u4e00\u6761\u8def\u90fd\u8d85\u8fc7k\uff0c\u5982\u679c\u866b\u6d1e\u4e0d\u540c\u65f6\u5728\u8fd9\u4e9b\u8def\u4e0a\u7684\u8bdd\uff0c\u5c31\u4e0d\u884c\n\n\u6240\u4ee5 \u866b\u6d1e\u5728\u4ed6\u4eec\u7684\u5171\u540c\u8def\u5f84\u4e0a\n\n\u6240\u4ee5 \u6211\u4eec\u8981\u8bb0\u5f55\u6811\u4e0a\u7684\u8def\u5f84\u53ca\u4ed6\u4eec\u7684\u8986\u76d6\u6b21\u6570\n\n\u6240\u4ee5 \u6811\u4e0a\u5dee\u5206\uff01\n\n## 3.\u5176\u4ed6\n\n\u8fd8\u6709\u4ec0\u4e48\u4e0d\u61c2\u7684\u8bdd\u53ef\u4ee5\u770b\u770b\u5176\u4ed6\u4eba\u7684\u9898\u89e3\n\n\u5199\u7684\u90fd\u633a\u597d\u7684qwq\n\n## 4.~~\u559c\u95fb\u4e50\u89c1\u7684~~ \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=300030;\n\nint n,m,a[N],b[N],l[N],path[N],diff[N],mpath,mw;\n\nstruct edge\n{\n\tint nextt,from,to,w;\n}g[N*2];\nint head[N],cnt=0;\nvoid add(int u,int v,int cost)\n{\n\tcnt++;\n\tg[cnt].nextt=head[u];\n\thead[u]=cnt;\n\tg[cnt].from=u;\n\tg[cnt].to=v;\n\tg[cnt].w=cost;\n}\n\nint d[N],f[N][25],dis[N],topre[N],dfn[N],num=0;\nvoid predfs(int u,int fr)\n{\n\tdfn[++num]=u;\n\tfor (int i=1;i<=22;i++) f[u][i]=f[f[u][i-1]][i-1];\n\tfor (int i=head[u];i;i=g[i].nextt)\n\t{\n\t\tint v=g[i].to;\n\t\tif (v==fr) continue;\n\t\td[v]=d[u]+1;\n\t\tdis[v]=dis[u]+g[i].w;\n\t\tf[v][0]=u;\n\t\ttopre[v]=g[i].w;\n\t\tpredfs(v,u);\n\t}\n}\nint lca(int x,int y)\n{\n\tif (d[x]<d[y]) swap(x,y);\n\tfor (int i=22;i>=0;i--) if (d[f[x][i]]>=d[y]) x=f[x][i];\n\tif (x==y) return x;\n\tfor (int i=22;i>=0;i--)\n\t\tif (f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\n\nint tot;\nint chk(int k)\n{\n\tmemset(diff,0,sizeof(diff));\n\ttot=0;\n\tfor (int i=1;i<=m;i++)\n\t\tif (path[i]>k)\n\t\t{\n\t\t\tdiff[a[i]]++;diff[b[i]]++;diff[l[i]]-=2;\n\t\t\ttot++;\n\t\t}\n\tfor (int i=n;i>=1;i--) diff[f[dfn[i]][0]]+=diff[dfn[i]];\n\tfor (int i=n;i>=1;i--) if (topre[i]>=mpath-k&&diff[i]==tot) return 1;\n\treturn 0;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<n;i++)\n\t{\n\t\tint u,v,cost;\n\t\tscanf(\"%d%d%d\",&u,&v,&cost);\n\t\tadd(u,v,cost);add(v,u,cost);\n\t\tmw=max(mw,cost);\n\t}\n\td[1]=1;predfs(1,0);\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&a[i],&b[i]);\n\t\tl[i]=lca(a[i],b[i]);\n\t\tpath[i]=dis[a[i]]+dis[b[i]]-dis[l[i]]-dis[l[i]];\n\t\tmpath=max(mpath,path[i]);\n\t}\n\tint lft=mpath-mw,rt=mpath,mid,ans;\n\twhile (lft<=rt)\n\t{\n\t\tmid=(lft+rt)>>1;\n\t\tif (chk(mid)) ans=mid,rt=mid-1;\n\t\telse lft=mid+1;\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n\n~~\u7559\u4e2a\u8d5e\u5457~~\n",
        "postTime": 1558169153,
        "uid": 87005,
        "name": "QQQfy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u5efa\u8bae\u81f3\u535a\u5ba2\u89c2\u770b[\u55b5\u55b5\u55b5](https://oveln.tk/index.php/2018/10/12/15/)\n## \u9898\u89e3\n\n### \u601d\u8003\u2026\u2026\n\n\u9996\u5148\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u9898\u76ee\n\n\u7ed9\u51fa\u4e00\u68f5n\u4e2a\u70b9\u7684\u6811\uff0c\u548cm\u6761\u5728\u6811\u4e0a\u7684\u94fe\uff0c\u6c42\u4f7f\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\u4e3a0\u4e4b\u540e\u6700\u957f\u7684\u94fe\u7684\u957f\u5ea6\u6700\u77ed\uff0c\u5e76\u6c42\u51fa\u6700\u77ed\u7684\u503c\n\n\u55ef\u2026\u2026\u4eff\u4f5b\u5e76\u6ca1\u6709\u4ec0\u4e48\u60f3\u6cd5\n\n\u7136\u540eoveln\u60f3\u5230\u4e86\u4e8c\u5206\u7b54\u6848\u2014\u2014\n\n\u4e8c\u5206\u4e00\u4e2a\u503cx\uff0c\u6c42\u662f\u5426\u53ef\u4ee5\u4f7f\u6240\u6709\u7684\u94fe\u957f\u5ea6\u5c0f\u4e8ex\n\n\u53e6m1\u4e3a\u5c0f\u4e8ex\u7684\u94fe\u7684\u6761\u6570\n\n\u90a3\u4e48\u5f00\u59cb\u7684\u65f6\u5019m1\u6761\u94fe\u957f\u5ea6\u5c0f\u4e8ex\u7684\u94fe\u5c31\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4e86\n\n\u5bf9\u4e8e\u5927\u4e8ex\u7684\uff08m-m1\uff09\u6761\u8fb9,\u9700\u8981\u627e\u5230\u4e00\u6761\u8fb9c\n\n\u5bf9\u4e8e\u8fb9c\u6761\u4ef6\u6709\u4e24\u4e2a\uff1a\u5728\u8fd9\u4e9b\u94fe\u4e0a\u9762\uff0c\u5e76\u4e14\u8fd9\u6761\u8fb9c\u957f\u5ea6\u5927\u4e8e\uff08\u6700\u957f\u7684\u94fe-x\uff09\n\n\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1m\u6761\u8fb9\u7684\u6700\u957f\u957f\u5ea6\u5c0f\u4e8ex\n\n### \u4e0d\u601d\u8003\u4e86\n\n\u95ee\u9898\u5269\u4e0b\u4e00\u4e2a\uff0c\u5982\u4f55\u627e\u5230\u8fb9c\n\n\u8fb9c\u80af\u5b9a\u5728\u6240\u6709\u7684\u94fe\u7684\u516c\u5171\u90e8\u5206\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u628ac\u8bbe\u5b9a\u4e3a\u516c\u5171\u90e8\u5206\u6700\u957f\u7684\u4e00\u6761\u8fb9\uff08\u56e0\u4e3a\u8fd9\u6837\u5fc5\u5b9a\u662f\u6700\u4f18\u7684\uff09\uff0c\u800c\u8fd9\u516c\u5171\u90e8\u5206\u80af\u5b9a\u4e5f\u662f\u4e00\u6761\u94fe\u2026\u2026\n\n\u95ee\u9898\u53d8\u6210\u4e86\u2014\u2014\u5982\u4f55\u6c42\u4e24\u6761\u94fe\u7684\u516c\u5171\u94fe\n\nOveln\u5728\u5386\u53f2\u8bfe\u4e0a\u601d\u8003\u4e86\u534a\u8282\u8bfe\u5dee\u70b9\u88ab\u96e8\u6ecb\u76ef\u6b7b\u4e4b\u540e\u8fdb\u884c\u4e86\u5206\u7c7b\u8ba8\u8bba\n\n\u4e24\u79cd\u60c5\u51b5\n\n\uff08\u7075\u9b42\u753b\u624bOveln\u4e0a\u7ebf&&\uff09A1A2\uff0cB1B2\u5206\u522b\u662f\u4e24\u6761\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\n\n![](https://oveln.tk/wp-content/uploads/2018/09/20180928_1.png)\n\nLca\uff08A1\uff0cA2\uff09==Lca\uff08B1\uff0cB2\uff09\n\n\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u516c\u5171\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\u663e\u7136\u662f\uff0cLca\uff08A1\uff0cB1\uff09\uff0cLca\uff08A2\uff0cB2\uff09\n\n![](https://oveln.tk/wp-content/uploads/2018/09/20180928_2.png)\n\nLca\uff08A1\uff0cA2\uff09\uff01=Lca\uff08B1\uff0cB2\uff09\n\n\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u516c\u5171\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\u663e\u7136\u662f\uff0cLca\uff08A1\uff0cB1\uff09\uff0cLca\uff08B1\uff0cB2\uff09\n\n**\u67d0\uff1a\u8fd9\u4e48\u7b80\u5355\u7684\u4e24\u79cd\u5206\u7c7bOveln\u4f60\u5c45\u7136\u60f3\u4e86\u534a\u8282\u8bfe\uff01\uff01\uff01**\n\n\u5f53\u7136\u4e0d\u662f\u90a3\u4e48\u7b80\u5355\u4e86\u2026\u2026\u56e0\u4e3a\u7ed9\u51fa\u7684\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\u4e0d\u53ef\u80fd\u521a\u597d\u6309\u7167\u56fe\u4e0a\u7684\u90a3\u6837\u6392\u5217\n\n\u6bd4\u5982\u6709\u65f6\u5019\u4f1a\u53d8\u6210\u2014\u2014\n\n![](https://oveln.tk/wp-content/uploads/2018/09/20180928_3.png)\n\n\u8fd9\u4e2a\u6837\u5b50\uff0c\u90a3\u4e48\u9700\u8981\u786e\u5b9a\u4e24\u6761\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\u7684\u987a\u5e8f\u624d\u80fd\u66f4\u597d\u7684\u5199\u7a0b\u5e8f~~\uff08\u7701\u4ee3\u7801~~\n\n\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u60c5\u51b5\uff0c\u5f88\u7b80\u5355\uff0c\u5982\u679cLca\uff08A1\uff0cB1\uff09==Lca\uff08A1\uff0cA2\uff09\u7684\u8bdd\u4ea4\u6362\u4e00\u4e0bB1\uff0cB2\u5c31\u884c\u4e86\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u60c5\u51b5\uff0c\u89c2\u5bdf\u4e00\u4e0b\u7279\u5f81\u4e4b\u540e\uff0c\u53d1\u73b0\u53ea\u6709\u5f53Dep[Lca\uff08A1\uff0cB1\uff09]>Dep[Lca\uff08B1\uff0cB2\uff09]\u7684\u65f6\u5019\u90a3\u4e2aLca\uff08A1\uff0cB1\uff09\u624d\u662f\u6211\u4eec\u9700\u8981\u7684\uff0c\u90a3\u4e48\u679a\u4e3e\u4e00\u4e0b\u56db\u79cd\u60c5\u51b5\u5c31\u597d\u4e86\n\n**\u8be6\u89c1\u4ee3\u7801**  ~~\u5176\u5b9e\u662f\u5199\u4e0d\u6e05\u695a~~\n\n### \u95ee\u9898\u6765\u4e86\n\nOveln\u7b97\u4e86\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\n\nlog(n)*m*log(n)=log(n)^2log(m)\n\n\u6216\u8bb8\u2026\u2026\u80af\u5b9a\u4f1aTle\n\nOveln\u8fd9\u662f\u9677\u5165\u4e86\u7edd\u671b\n\n\u518d\u60f3\u60f3\u2026\u2026\u4e8c\u5206\u7684\u5fc5\u8981\u597d\u50cf\u5df2\u7ecf\u6ca1\u6709\u4e86\uff01\uff01\n\n\u53ea\u8981\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u5c06m\u6761\u94fe\u6309\u7167\u94fe\u957f\u6392\u5e8f\u4e4b\u540e\u6c421\u5230i\u7684\u516c\u5171\u94fe\u7684\u5373\u53ef\n\n\u800c1\u5230i\u7684\u516c\u5171\u94fe\u53ef\u4ee5\u901a\u8fc7\u6c421\u5230i-1\u7684\u516c\u5171\u94fe\u4e0e\u7b2ci\u6761\u94fe\u7684\u516c\u5171\u94fe\u6c42\u51fa\n\n\u6240\u4ee5\u6bcf\u6b21\u66f4\u65b0\u7b54\u6848\uff0cAns=max\uff08Ans\uff0cMax\uff08\u7b2ci+1\u6761\u94fe\u7684\u957f\u5ea6\uff0c\u7b2c1\u6761\u94fe\u7684\u957f\u5ea6-1\u5230i\u7684\u516c\u5171\u94fe\u4e2d\u6700\u957f\u7684\u8fb9\uff09\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6mlogn\n\n~~\u5b8c\u7f8e~~\n\n## \u4ee3\u7801\n```cpp\n\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n#define maxn 300005\n#define maxm 300005\n\ninline unsigned int Log2(unsigned int x){//\u9ed1\u79d1\u6280Log2\u6548\u7387O\uff081\uff09\n\u200b    unsigned int ret;\n\u200b    __asm__ __volatile__ (\"bsrl %1, %%eax\":\"=a\"(ret):\"m\"(x));\n\u200b    return ret;\n}\ninline int read() {\n\u200b\tint x=0,f=0;\n\u200b\tchar ch=getchar();\n\u200b\twhile (!isdigit(ch)) f^=(ch=='-'),ch=getchar();\n\u200b\twhile (isdigit(ch)) x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n\u200b\tif (f) return -x;return x;\n}\ninline void OPENFILE() {\n#ifndef ONLINE_JUDGE\n\u200b\tfreopen(\"data.in\",\"r\",stdin);\n\u200b\tfreopen(\"data.out\",\"w\",stdout);\n#endif\n}\n\nint lnk[maxn],nxt[maxn*2],son[maxn*2],w[maxn*2],tot;\nint n,m;\nstruct ad {\n\u200b\tint p[2],w;\n\u200b\tinline bool operator ==(const ad y) {return (p[0]==y.p[0]&&p[1]==y.p[1])||(p[0]==y.p[1]&&p[1]==y.p[0]);}\n}a[maxm],now;\nint dep[maxn],pre[maxn][32],f[maxn][32],s[maxn][32];\nint ans;\ninline void swap(ad &x,ad &y) {ad t=x;x=y,y=t;}\ninline void swap(int &x,int &y) {x^=y,y^=x,x^=y;}\ninline void Add_e(int x,int y,int z) {son[++tot]=y,nxt[tot]=lnk[x],lnk[x]=tot,w[tot]=z;}\ninline int max(int x,int y) {if (x>y) return x;return y;}\ninline int min(int x,int y) {if (x<y) return x;return y;}\ninline bool cmp(ad x,ad y) {return x.w>y.w;}\nvoid Dfs(int x=1) {//Lca\u7684\u9884\u5904\u7406\uff0c\u81ea\u6211\u611f\u89c9\u8fd9\u4e48\u5199\u7279\u522b\u68d2\u2026\u2026\u7136\u800czxb\u4ecd\u7136\u4e0d\u6539\u90aa\u5f52\u6b63\u00d7\u00d7\u00d7\n\u200b\tfor (int i=1,ed=Log2(dep[x]);i<=ed;i++)\n\u200b\t\tpre[x][i]=pre[pre[x][i-1]][i-1],\n\u200b\t\tf[x][i]=max(f[x][i-1],f[pre[x][i-1]][i-1]),\n\u200b\t\ts[x][i]=s[x][i-1]+s[pre[x][i-1]][i-1];\n\u200b\tfor (int i=lnk[x];i;i=nxt[i]) if (!dep[son[i]]) {\n\u200b\t\tdep[son[i]]=dep[x]+1,pre[son[i]][0]=x,s[son[i]][0]=f[son[i]][0]=w[i];\n\u200b\t\tDfs(son[i]);\n\u200b\t}\n}\nint Lca(int x,int y) {//\u6c42\u516c\u5171\u7956\u5148\n\u200b\tif (dep[x]<dep[y]) x^=y,y^=x,x^=y;\n\u200b\tint d=dep[x]-dep[y];\n\u200b\tfor (int i=Log2(d);i>=0;i--) if ((1<<i)&d)\n\u200b\t\tx=pre[x][i];\n\u200b\tif (x^y) {\n\u200b\t\tfor (int i=Log2(dep[x]);i>=0;i--) if (pre[x][i]^pre[y][i])\n\u200b\t\t\tx=pre[x][i],y=pre[y][i];\n\u200b\t\tx=pre[x][0],y=pre[y][0];\n\u200b\t}\n\u200b\treturn x;\n}\nint Lcaw(int x,int y) {//\u6c42x\u5230y\u7684\u94fe\u957f\n\u200b\tif (dep[x]<dep[y]) x^=y,y^=x,x^=y;\n\u200b\tint d=dep[x]-dep[y],ret=0;\n\u200b\tfor (int i=Log2(d);i>=0;i--) if ((1<<i)&d)\n\u200b\t\tret+=s[x][i],x=pre[x][i];\n\u200b\tif (x^y) {\n\u200b\t\tfor (int i=Log2(dep[x]);i>=0;i--) if (pre[x][i]^pre[y][i])\n\u200b\t\t\tret+=s[x][i]+s[y][i],x=pre[x][i],y=pre[y][i];\n\u200b\t\tret+=s[x][0]+s[y][0],x=pre[x][0],y=pre[y][0];\n\u200b\t}\n\u200b\treturn ret;\n}\nint Lcamx(int x,int y) {//\u6c42x\u5230y\u7684\u6700\u5927\u7684\u8fb9\n\u200b\tif (dep[x]<dep[y]) x^=y,y^=x,x^=y;\n\u200b\tint d=dep[x]-dep[y],ret=0;\n\u200b\tfor (int i=Log2(d);i>=0;i--) if ((1<<i)&d)\n\u200b\t\tret=max(ret,f[x][i]),x=pre[x][i];\n\u200b\tif (x^y) {\n\u200b\t\tfor (int i=Log2(dep[x]);i>=0;i--) if (pre[x][i]^pre[y][i])\n\u200b\t\t\tret=max(ret,max(f[x][i],f[y][i])),x=pre[x][i],y=pre[y][i];\n\u200b\t\tret=max(ret,max(f[x][0],f[y][0])),x=pre[x][0],y=pre[y][0];\n\u200b\t}\n\u200b\treturn ret;\n}\nad Make(ad x,ad y) {\u6c42x\u94fe\u4e0ey\u94fe\u7684\u516c\u5171\u94fe\n\u200b\tif (x==y) return x;//\u6ce8\u610f\u8fd9\u4e2a\n\u200b\tad ret=(ad){0,0};\n\u200b\tint Lcax=Lca(x.p[0],x.p[1]),Lcay=Lca(y.p[0],y.p[1]);\n\u200b\tif (dep[Lcax]<dep[Lcay]) swap(x,y),swap(Lcax,Lcay);\n\u200b\tif (Lcax==Lcay) {\n\u200b\t\tif (Lca(x.p[0],y.p[0])==Lcax) swap(y.p[0],y.p[1]);\n\u200b\t\tret=(ad){Lca(x.p[0],y.p[0]),Lca(x.p[1],y.p[1])};\n\u200b\t}else {\n\u200b\t\tbool fg=0;\n\u200b\t\tfor (int i=0;i<2;i++)\n\u200b\t\t\tfor (int j=0;j<2;j++) if (dep[Lca(x.p[i],y.p[j])]>dep[Lcax]) {\n\u200b\t\t\t\tif (i) swap(x.p[0],x.p[1]);\n\u200b\t\t\t\tif (j) swap(y.p[0],y.p[1]);\n\u200b\t\t\t\tfg=1;break;\n\u200b\t\t\t}\n\u200b\t\tif (!fg) return (ad){-1,-1};\n\u200b\t\tret=(ad){Lca(x.p[0],y.p[0]),Lcax};\n\u200b\t}\n\u200b\treturn ret;\n}\nint main() {\n\u200b\tOPENFILE();\n\u200b\tn=read(),m=read();\n\u200b\tfor (int i=1,x,y,z;i<n;i++)\n\u200b\t\tx=read(),y=read(),z=read(),Add_e(x,y,z),Add_e(y,x,z);\n\u200b\tfor (int i=1;i<=m;i++)\n\u200b\t\ta[i]=(ad){read(),read(),0};\n\u200b\tdep[1]=1,Dfs();\n\u200b\tfor (int i=1;i<=m;i++) a[i].w=Lcaw(a[i].p[0],a[i].p[1]);\n\u200b\tstd::sort(a+1,a+1+n,cmp);\n\u200b\tnow=a[1],ans=max(a[2].w,a[1].w-Lcamx(now.p[0],now.p[1]));\n\u200b\tfor (int i=2;i<=m;i++) {\n\u200b\t\tnow=Make(now,a[i]);\n\u200b\t\tif (now.p[0]==-1) break;\n\u200b\t\tans=min(ans,max(a[1].w-Lcamx(now.p[0],now.p[1]),a[i+1].w));\n\u200b\t}\n\u200b\tprintf(\"%d\\n\",ans);\n\u200b\treturn 0;\n}\n\n```",
        "postTime": 1539329890,
        "uid": 25298,
        "name": "Oveln",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "### \u597d\u50cf\u5e76\u6ca1\u6709\u6211\u8fd9\u79cd\u505a\u6cd5\u7684\u6240\u4ee5\u5c31\u53d1\u7bc7\u9898\u89e3\u597d\u4e86\n### \u4e3b\u8981\u7b97\u6cd5\uff1a\u6811\u5256&\u5947\u602a\u7684\u8d2a\u5fc3\n### \u601d\u8def&\u8fc7\u7a0b\uff1a\u7528\u6811\u5256\u6c42\u51fa\u6bcf\u6761\u8def\u5f84\u7684\u957f\u5ea6\u5e76\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\n### \u6ce8\u610f\u5230\u5982\u679c\u5220\u67d0\u4e00\u6761\u8fb9\u4f1a\u8fbe\u5230\u6700\u5c0f\uff0c\u90a3\u4e48\u5b83\u5fc5\u5b9a\u4f1a\u5f71\u54cd\u5230\u524d$x$\u6761\u8fb9\n### \u6545\u679a\u4e3e$x$\uff0c\u627e\u5230\u524d$x$\u6761\u8fb9\u7684\u516c\u5171\u8fb9\u4e2d\u62e5\u6709\u6700\u5927\u6743\u503c\u7684\u8fb9\uff0c\u5c06\u7b2c$1$\u6761\u8def\u5f84\u65f6\u95f4\u51cf\u53bb\u8be5\u8fb9\u5e76\u4e0e\u7b2c$x+1$\u6761\u8def\u5f84\u7684\u65f6\u95f4\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u524d\u8005\u66f4\u5c0f\uff0c\u66f4\u65b0\u5f53\u524d\u7b54\u6848\u4e3a\u7b2c$x+1$\u6761\u8def\u5f84\u7684\u65f6\u95f4\uff0c\u5426\u5219\u66f4\u65b0\u7b54\u6848\u4e3a$min(ans,route[1]-maxRoute)$\u5e76\u9000\u51fa\u679a\u4e3e\uff08\u56e0\u4e3a\u5f80\u540e\u679a\u4e3e\u53ea\u4f1a\u8ba9$route[1]-maxRoute$\u7684\u503c\u66f4\u5927\uff0c\u7ed3\u679c\u4e5f\u4f1a\u66f4\u5927\uff0c\u6240\u4ee5\u65e0\u9700\u679a\u4e3e\u4e4b\u540e\u7684\uff09\n### \u7ebf\u6bb5\u6811\u7ec6\u8282\u5f88\u591a\u9700\u8981\u6ce8\u610fqwq\u88ab\u5751\u4e86\u4e00\u5806WA\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 300002\n#define l(x) Tree[x].l\n#define r(x) Tree[x].r\n#define sum(x) Tree[x].sum\n#define mark(x) Tree[x].mark\n#define mid(x) (Tree[x].l + Tree[x].r >> 1)\n#define maxMark(dir) Tree[dir].maxMark\n#define maxNum(dir) Tree[dir].maxNum\nusing namespace std;\n\nstruct node{\n    int l , r , sum , mark , maxMark , maxNum;\n    //\u6ce8\u610f\uff1amaxNum\u8bb0\u5f55\u7684\u662f\u4e0e\u6240\u6709\u8def\u5f84\u90fd\u91cd\u5408\u7684\u8fb9\u4e2d\u7684\u6700\u5927\u6743\u503c\n}Tree[MAXN << 2];\nstruct Edge{\n    int end , w , upEd;\n}Ed[MAXN << 1];\nstruct route{\n    int start , end , w;\n}Now[MAXN];\nint head[MAXN] , val[MAXN] , size[MAXN] , fa[MAXN] , son[MAXN] , dep[MAXN];\nint N , M , cntEd , ts , top[MAXN] , ind[MAXN] , rk[MAXN];\n\nbool cmp(route a , route b){\n    return a.w > b.w;\n}\n\ninline int max(int a , int b){\n    return a > b ? a : b;\n}\n\ninline void addEd(int a , int b , int c){\n    Ed[++cntEd].end = b;\n    Ed[cntEd].w = c;\n    Ed[cntEd].upEd = head[a];\n    head[a] = cntEd;\n}\n\nvoid dfs1(int dir , int father , int v){\n//\u6ce8\u610f\u8fb9\u6743\u53d8\u70b9\u6743\n    val[dir] = v;\n    size[dir] = 1;\n    dep[dir] = dep[fa[dir] = father] + 1;\n    for(int i = head[dir] ; i ; i = Ed[i].upEd)\n        if(fa[dir] != Ed[i].end){\n            dfs1(Ed[i].end , dir , Ed[i].w);\n            size[dir] += size[Ed[i].end];\n            if(size[son[dir]] < size[Ed[i].end])\n                son[dir] = Ed[i].end;\n        }\n}\n\nvoid dfs2(int dir , int t){\n    top[dir] = t;\n    rk[ind[dir] = ++ts] = dir;\n    if(!son[dir])\n        return;\n    dfs2(son[dir] , t);\n    for(int i = head[dir] ; i ; i = Ed[i].upEd)\n        if(Ed[i].end != son[dir] && Ed[i].end != fa[dir])\n            dfs2(Ed[i].end , Ed[i].end);\n}\n\ninline void pushup(int dir , int maxN){\n//\u7ec6\u8282\uff01\uff01\uff01\n    if(maxMark(dir) == max(maxMark(dir << 1) , maxMark(dir << 1 | 1)))\n        maxNum(dir) = max(maxNum(dir) , maxN);\n    else{\n        maxMark(dir) = max(maxMark(dir << 1) , maxMark(dir << 1 | 1));\n        maxNum(dir) = maxN;\n    }\n}\n\ninline void pushdown(int dir){\n//maxMark\u8981\u52a0\uff01\n    mark(dir << 1) += mark(dir);\n    mark(dir << 1 | 1) += mark(dir);\n    maxMark(dir << 1) += mark(dir);\n    maxMark(dir << 1 | 1) += mark(dir);\n    mark(dir) = 0;\n}\n\nvoid init(int l , int r , int dir){\n    l(dir) = l;\n    r(dir) = r;\n    if(l == r)\n        sum(dir) = maxNum(dir) = val[rk[l]];\n    else{\n        init(l , mid(dir) , dir << 1);\n        init(mid(dir) + 1 , r , dir << 1 | 1);\n        sum(dir) = sum(dir << 1) + sum(dir << 1 | 1);\n        maxNum(dir) = max(maxNum(dir << 1) , maxNum(dir << 1 | 1));\n    }\n}\n\nint getSum(int l , int r , int dir){\n    if(l(dir) >= l && r(dir) <= r)\n        return sum(dir);\n    int sum = 0;\n    if(l <= mid(dir))\n        sum += getSum(l , r , dir << 1);\n    if(r > mid(dir))\n        sum += getSum(l , r , dir << 1 | 1);\n    return sum;\n}\n\nint getMark(int l , int r , int dir , int now){\n    if(l(dir) >= l && r(dir) <= r){\n        mark(dir)++;\n        return ++maxMark(dir) == now ? maxNum(dir) : 0;\n    }\n    pushdown(dir);\n    int maxN = 0;\n    if(l <= mid(dir))\n        maxN = max(maxN , getMark(l , r , dir << 1 , now));\n    if(r > mid(dir))\n        maxN = max(maxN , getMark(l , r , dir << 1 | 1 , now));\n    if(maxN)\n        pushup(dir , maxN);\n    return maxN;\n}\n\ninline void work1(int dir){\n    int x = Now[dir].start , y = Now[dir].end , tx = top[x] , ty = top[y];\n    while(tx != ty)\n        if(dep[tx] >= dep[ty]){\n            Now[dir].w += getSum(ind[tx] , ind[x] , 1);\n            x = fa[tx];\n            tx = top[x];\n        }\n        else{\n            Now[dir].w += getSum(ind[ty] , ind[y] , 1);\n            y = fa[ty];\n            ty = top[y];\n        }\n        //\u6ce8\u610f\u4e0d\u80fd\u7b97\u5165LCA\n    if(ind[x] < ind[y])\n        Now[dir].w += getSum(ind[x] + 1 , ind[y] , 1);\n    if(ind[x] > ind[y])\n        Now[dir].w += getSum(ind[y] + 1 , ind[x] , 1);\n}\n\ninline int work2(int dir){\n    int x = Now[dir].start , y = Now[dir].end , tx = top[x] , ty = top[y] , maxN = 0;\n    while(tx != ty)\n        if(dep[tx] >= dep[ty]){\n            maxN = max(maxN , getMark(ind[tx] , ind[x] , 1 , dir));\n            x = fa[tx];\n            tx = top[x];\n        }\n        else{\n            maxN = max(maxN , getMark(ind[ty] , ind[y] , 1 , dir));\n            y = fa[ty];\n            ty = top[y];\n        }\n    if(ind[x] < ind[y])\n        maxN = max(maxN , getMark(ind[x] + 1 , ind[y] , 1 , dir));\n    if(ind[x] > ind[y])\n        maxN = max(maxN , getMark(ind[y] + 1 , ind[x] , 1 , dir));\n    return maxN;\n}\n\nint main(){\n    srand((unsigned)time(0));\n    scanf(\"%d%d\" , &N , &M);\n    for(int i = 1 ; i < N ; i++){\n        int a , b , c;\n        scanf(\"%d%d%d\" , &a , &b , &c);\n        addEd(a , b , c);\n        addEd(b , a , c);\n    }\n    int S = rand() % N + 1;\n    dfs1(S , 0 , 0);\n    dfs2(S , S);\n    init(1 , N , 1);\n    for(int i = 1 ; i <= M ; i++){\n        scanf(\"%d%d\" , &Now[i].start , &Now[i].end);\n        work1(i);\n    }\n    sort(Now + 1 , Now + M + 1 , cmp);\n    int dir = 1 , minN = 2147483647;\n    while(dir <= M){\n        int t = work2(dir);\n        if(Now[dir + 1].w <= Now[1].w - t){\n            minN = min(minN , Now[1].w - t);\n            //\u8fd9\u91cc\u8981\u53d6min\n            break;\n        }\n        minN = Now[dir + 1].w;\n        dir++;\n    }\n    cout << minN;\n    return 0;\n}\n```",
        "postTime": 1534844287,
        "uid": 96296,
        "name": "Itst",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u4e0d\u4e00\u5b9a\u9700\u8981\u4e8c\u5206\u7b54\u6848\u3002\n\n\u6bcf\u4e00\u4e2a\u8fd0\u8f93\u8ba1\u5212\u90fd\u9700\u8981\u65f6\u95f4\u3002maxx[0][i]\u8868\u793a\u4e0d\u7ecf\u8fc7\u7f16\u53f7\u4e3ai\u7684\u8fb9\u7684\u6700\u8017\u65f6\u7684\u8fd0\u8f93\u8ba1\u5212\u9700\u8981\u82b1\u8d39\u7684\u65f6\u95f4\uff1bmaxx[1][i]\u8868\u793a\u7ecf\u8fc7\u7f16\u53f7\u4e3ai\u7684\u8fb9\u7684\u6700\u8017\u65f6\u7684\u8fd0\u8f93\u8ba1\u5212\u9700\u8981\u82b1\u8d39\u7684\u65f6\u95f4\u3002\n\n\u5982\u679c\u53bb\u6389i\u8fd9\u6761\u8fb9\uff0c\u603b\u7528\u65f6\u5c31\u662fmax(maxx[0][i],maxx[1][i]-w[i])\u3002\n\n\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u603b\u7528\u65f6\u7684\u6700\u5c0f\u503c\u5c31\u662f\u7b54\u6848\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fd0\u8f93\u8ba1\u5212\uff0c\u6211\u4eec\u5c06\u5b83\u62c6\u89e3\u4e3a\u4e24\u6761\u94fe\uff0c\u7528\u5b83\u4eec\u66f4\u65b0\u6bcf\u4e00\u6761\u8fb9\u3002\u6240\u4ee5\u95ee\u9898\u5c31\u5316\u5f52\u4e3a\u5982\u4f55\u5feb\u901f\u5730\u66f4\u65b0\u67d0\u6761\u94fe\u7ecf\u8fc7\u7684\u8fb9\u7684maxx[0]\u503c\u548c\u6ca1\u6709\u7ecf\u8fc7\u7684\u8fb9\u7684maxx[1]\u503c\u3002\n\n\u9274\u4e8e\u8fd0\u8f93\u8ba1\u5212\u7684\u4e2a\u6570\u662f10^5\u7ea7\u522b\uff0c\u6211\u4eec\u8981\u5728O(logn^2)\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u4e00\u6b21maxx\u6570\u7ec4\u7684\u66f4\u65b0\uff0c\u8054\u60f3\u5230\u7ebf\u6bb5\u6811\u3002\n\n\u94fe\u7684\u60c5\u51b5\u7528\u7ebf\u6bb5\u6811\u5f88\u597d\u5904\u7406\uff0c\u4f46\u6811\u7684\u60c5\u51b5\u4e0d\u597d\u5904\u7406\u3002\u4e3a\u4ec0\u4e48\u6811\u7684\u60c5\u51b5\u4e0d\u597d\u5904\u7406\uff1f\u56e0\u4e3a\u8fd0\u8f93\u8ba1\u5212\u7ecf\u8fc7\u7684\u6bcf\u6761\u8fb9\u7684\u7f16\u53f7\u4e0d\u5728\u4e00\u8d77\u3002\u90a3\u4e48\u5982\u4f55\u628a\u8fd0\u8f93\u8ba1\u5212\u7ecf\u8fc7\u7684\u6bcf\u6761\u8fb9\u7684\u7f16\u53f7\u653e\u5728\u4e00\u8d77\uff1f\n\n\u7b54\u6848\u7b80\u5355\u5f97\u60ca\u4eba\uff1a\u5728dfs\u65f6\u5148\u8bbf\u95ee\u91cd\u513f\u5b50\u3002\u8bf4\u5f97\u7b80\u5355\u4e00\u70b9\uff0c\u5c31\u662f\u628a\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684\u8fb9\u7684dfs\u5e8f\u7f16\u5728\u4e00\u8d77\u3002\u4e00\u6761\u94fe\u53ef\u4ee5\u62c6\u89e3\u4e3a\u82e5\u5e72\u6761\u91cd\u94fe\u548c\u82e5\u5e72\u6761\u8f7b\u8fb9\uff0c\u8f7b\u8fb9\u5728\u7ebf\u6bb5\u6811\u4e0a\u70b9\u5bf9\u70b9\u5730\u66f4\u65b0maxx[0][x]\uff0c\u91cd\u94fe\u4e0a\u8fb9\u7684dfs\u5e8f\u5728\u4e00\u8d77\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0\u533a\u95f4maxx[0][l~r]\u3002\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0maxx[0]\u65f6\uff0c\u6211\u4eec\u8bb0\u4e0b\u66f4\u65b0\u7684\u6bcf\u4e2a\u533a\u95f4\uff0c\u5bf9\u4e8e\u6ca1\u6709\u66f4\u65b0\u7684\u533a\u95f4\uff0c\u7528\u8fd0\u8f93\u8ba1\u5212\u7684\u65f6\u95f4\u66f4\u65b0maxx[1]\u3002\n\n\u6811\u94fe\u5256\u5206\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\uff0c\u4e24\u4e2a\u70b9\u5230\u5b83\u4eec\u6700\u8fd1\u516c\u5171\u7956\u5148\u7ecf\u8fc7\u7684\u91cd\u94fe\u548c\u8f7b\u8fb9\u7684\u6761\u6570\u662flogn\u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u6709\u590d\u6742\u5ea6\uff1a\n\nO(m)\u679a\u4e3e\u6bcf\u4e2a\u8ba1\u5212\u3002\n\nO(logn)\u679a\u4e3e\u6bcf\u6761\u91cd\u94fe\u548c\u8f7b\u8fb9\u3002\n\nO(logn)\u5728\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0\u6bcf\u6761\u91cd\u94fe\u548c\u8f7b\u8fb9\u5bf9\u5e94\u7684\u533a\u95f4\u3002\n\nO(logn)\u679a\u4e3e\u6ca1\u6709\u7ecf\u8fc7\u7684\u533a\u95f4\u3002\n\nO(logn)\u5728\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0\u6ca1\u6709\u7ecf\u8fc7\u7684\u533a\u95f4\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(m*(logn*logn+logn*logn))=O(mlogn^2)\n\n\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<math.h>\nusing namespace std;\n\nint n,m,u,v,x;\nint E,ot[1000005],ne[1000005],w[1000005],g[300005],wdfn[300005];\nint dep[300005],deep[300005],fa[300005];\nint dfn[300005],top[300005],siz[300005],hvson[300005],whvson[300005],dfn_tot;\nint maxx[2][2000005],con[300005];\n//maxx[0][i] means the length of the longest path that doesn't cover i.\n//maxx[1][i] means the length of the longest path that covers i.\nint S,T,LCA,t,lcasn_S,lcasn_T,ans;\n\nint read()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9') ch=getchar();\n\twhile(ch>='0'&&ch<='9')\n\t\tx=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x; \n}\n\nvoid add(int u,int v,int x)\n{\n\tot[++E]=v;\n\tne[E]=g[u];\n\tg[u]=E;\n\tw[E]=x;\n}\n\nvoid dfs(int x,int fath)\n{\n\tint p,to,max_siz=0;\n\tsiz[x]=1;\n\tfor(p=g[x];p;p=ne[p])\n\t{\n\t\tto=ot[p];\n\t\tif(to==fath) continue;\n\t\tdep[to]=dep[x]+1;\n\t\tdeep[to]=deep[x]+w[p];\n\t\tfa[to]=x;\n\t\tdfs(to,x);\n\t\tif(siz[to]>max_siz)\n\t\t{\n\t\t\tmax_siz=siz[to];\n\t\t\thvson[x]=to;\n\t\t\twhvson[x]=w[p];\n\t\t}\n\t\tsiz[x]+=siz[to];\n\t}\n}\n\nvoid chain(int x,int fath)\n{\n\tint p,to;\n\tdfn[x]=++dfn_tot;\n\tif(hvson[x])\n\t{\n\t\ttop[hvson[x]]=top[x];\n\t\tchain(hvson[x],x);\n\t\twdfn[dfn[hvson[x]]]=whvson[x];\n\t}\n\t\n\tfor(p=g[x];p;p=ne[p])\n\t{\n\t\tto=ot[p];\n\t\tif(to==fath||to==hvson[x]) continue;\n\t\ttop[to]=to;\n\t\tchain(to,x);\n\t\twdfn[dfn[to]]=w[p];\n\t}\n}\n\nvoid build(int l,int r,int rt)\n{\n\tif(l==r) con[l]=rt;\n\telse\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,rt<<1);\n\t\tbuild(mid+1,r,rt<<1|1);\n\t}\n}\n\nint lca(int u,int v)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]<dep[v]) swap(u,v);\n\treturn v;\n}\n\nint jump(int LCA,int j)\n{\n\twhile(true)\n\t{\n\t\tif(dep[j]==dep[LCA]+1) return j;\n\t\tif(dep[j]<=dep[LCA]) return hvson[LCA];\n\t\tj=top[j];\n\t\tif(dep[j]>dep[LCA]+1) j=fa[j];\n\t}\n}\n\nvoid push_down(int rt,int op)\n{\n\tmaxx[op][rt<<1]=max(maxx[op][rt<<1],maxx[op][rt]);\n\tmaxx[op][rt<<1|1]=max(maxx[op][rt<<1|1],maxx[op][rt]);\n}\n\nvoid update(int l,int r,int rt,int L,int R,int x,int op)\n{\n\tif(L>R) return;\n\tif(L<=l&&r<=R)\n\t{\n\t\tmaxx[op][rt]=max(maxx[op][rt],x);\n\t\treturn;\n\t}\n\telse\n\t{\n\t\tpush_down(rt,op);\n\t\tint mid=(l+r)>>1;\n\t\tif(L<=mid) update(l,mid,rt<<1,L,R,x,op);\n\t\tif(R>mid) update(mid+1,r,rt<<1|1,L,R,x,op); \n\t}\n}\n\nvoid cover(int lcasn,int j,int t)\n{\n\twhile(dep[top[j]]>dep[lcasn])\n\t{\n\t\tupdate(1,n,1,dfn[top[j]],dfn[j],t,1);\n\t\tj=top[j];\n\t\tupdate(1,n,1,dfn[fa[j]]+1,dfn[j]-1,t,0);\n\t\tj=fa[j];\n\t}\n\tupdate(1,n,1,dfn[lcasn],dfn[j],t,1);\n}\n\nint main()\n{\n\t\n\tint i;\n\tn=read(),m=read();\n\tfor(i=1;i<n;++i)\n\t{\n\t\tu=read(),v=read(),x=read();\n\t\tadd(u,v,x),add(v,u,x);\n\t}\n\t\n\ttop[1]=1;\n\tdfs(1,0);\n\tchain(1,0);\n\tbuild(1,n,1);\n\t\n\tfor(i=1;i<=m;++i)\n\t{\n\t\tS=read(),T=read();\n\t\tif(dfn[S]>dfn[T]) swap(S,T);\n\t\tLCA=lca(S,T);\n\t\tlcasn_S=jump(LCA,S);\n\t\tlcasn_T=jump(LCA,T);\n\t\tt=deep[S]+deep[T]-deep[LCA]*2;\n\t\tupdate(1,n,1,2,dfn[lcasn_S]-1,t,0);\n\t\tcover(lcasn_S,S,t);\n\t\tupdate(1,n,1,dfn[S]+1,dfn[lcasn_T]-1,t,0);\n\t\tcover(lcasn_T,T,t);\n\t\tupdate(1,n,1,dfn[T]+1,n,t,0);\n\t}\n\t\n\tfor(i=1;i<=4*n;++i)\n\t{\n\t\tpush_down(i,0);\n\t\tpush_down(i,1);\n\t}\n\t\n\tans=1e9+7;\n\tfor(i=2;i<=n;++i)\n\t\tans=min(ans,max(maxx[0][con[i]],maxx[1][con[i]]-wdfn[i]));\n\t\n\tprintf(\"%d\",ans);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1533194325,
        "uid": 31435,
        "name": "hwk0518",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "## \u4e00\u3001\u9898\u76ee\n\n[\u70b9\u6b64\u770b\u9898](https://www.luogu.org/problem/P2680)\n\n## \u4e8c\u3001\u89e3\u6cd5\n\n\u8981\u6c42\u7b54\u6848\u7684\u6700\u5927\u503c\uff0c\u6211\u4eec\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\n\n\u8bbe\u4e8c\u5206\u7684\u503c\u4e3a$x$\uff0c\u5bf9\u4e8e\u957f\u5ea6\u5927\u4e8e$x$\u7684\u8def\u5f84\uff0c\u6211\u4eec\u7528\u6811\u4e0a\u5dee\u5206\u6807\u8bb0\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u8981\u6ee1\u8db3\u4e0d\u5927\u4e8e$x$\uff0c\u6240\u4ee5\u6211\u4eec\u53d6\u88ab\u5168\u90e8\u6807\u8bb0\u4e86\u7684\u8fb9\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5224\u65ad$\u6700\u5927\u7684\u8def\u5f84-\u6700\u5927\u7684\u8fb9$\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5982\u679c\u5b83\u4e0d\u5927\u4e8e$x$\uff0c\u90a3\u5c31\u8fd4\u56de$1$\u5c31\u884c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\u3002\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nconst int MAXN = 300005;\nint read()\n{\n\tint x=0,flag=1;char c;\n\twhile((c=getchar())<'0' || c>'9') if(c=='-') flag=-1;\n\twhile(c>='0' && c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn x*flag;\n}\nint n,m,tot,ans,up[MAXN],f[MAXN],dep[MAXN],fa[MAXN][20];\nint a[MAXN],b[MAXN],c[MAXN],l[MAXN],dis[MAXN];\nstruct edge\n{\n\tint v,c,next;\n}e[MAXN*2];\nint dist(int i)\n{\n\treturn dis[a[i]]+dis[b[i]]-2*dis[l[i]];\n}\nvoid count(int u)\n{\n\tfor(int i=f[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa[u][0]) continue;\n\t\tcount(v);\n\t\tc[u]+=c[v];\n\t}\n}\nbool check(int x)\n{\n\tint all=0,Max1=0,Max2=0;\n\tfor(int i=1;i<=m;i++)\n\t\tif(dist(i)>x)\n\t\t{\n\t\t\tc[a[i]]++;c[b[i]]++;\n\t\t\tc[l[i]]-=2;\n\t\t\tMax1=max(Max1,dist(i));\n\t\t\tall++;\n\t\t}\n\tcount(1);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tif(c[i]==all)\n\t\t\tMax2=max(Max2,up[i]);\n\t\tc[i]=0;\n\t}\n\tif(Max1-Max2>x) return 0;\n\treturn 1;\n}\nvoid solve(int l,int r)\n{\n\tif(l>r) return ;\n\tint mid=(l+r)>>1;\n\tif(check(mid))\n\t{\n\t\tans=mid;\n\t\tsolve(l,mid-1);\n\t}\n\telse\n\t\tsolve(mid+1,r);\n}\nvoid dfs(int u,int par)\n{\n\tfa[u][0]=par;\n\tdep[u]=dep[par]+1;\n\tfor(int i=1;i<20;i++)\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\tfor(int i=f[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].v,c=e[i].c;\n\t\tif(par==v) continue;\n\t\tdis[v]=dis[u]+c;\n\t\tup[v]=c;\n\t\tdfs(v,u);\n\t}\n}\nint lca(int u,int v)\n{\n\tif(dep[u]<dep[v]) swap(u,v);\n\tfor(int i=19;i>=0;i--)\n\t{\n\t\tif(dep[fa[u][i]]>=dep[v]) u=fa[u][i];\n\t}\n\tif(u==v) return u;\n\tfor(int i=19;i>=0;i--)\n\t\tif(fa[u][i]^fa[v][i])\n\t\t\tu=fa[u][i],v=fa[v][i];\n\treturn fa[u][0];\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint u=read(),v=read(),c=read();\n\t\te[++tot]=edge{v,c,f[u]},f[u]=tot;\n\t\te[++tot]=edge{u,c,f[v]},f[v]=tot;\n\t}\n\tdfs(1,0);\n\tint lim=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\ta[i]=read();b[i]=read();\n\t\tl[i]=lca(a[i],b[i]);\n\t\tlim=max(lim,dist(i));\n\t}\n\tsolve(0,lim);\n\tprintf(\"%d\\n\",ans);\n}\n```\n",
        "postTime": 1574084297,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n\u8fd9\u9053\u9898\u6211\u7684\u505a\u6cd5\u548c\u522b\u4eba\u7684\u505a\u6cd5\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u76f8\u4f3c\u7684\uff0c\u4f46\u6211\u770b\u5f88\u591a\u7684\u9898\u89e3\u90fd\u662f\u4e8c\u5206\uff0c\u6811\u4e0a\u5dee\u5206\u751a\u81f3\u6811\u94fe\u5256\u5206 ~~\uff08\u5176\u5b9e\u6211\u6ca1\u4ed4\u7ec6\u770b\uff09~~\u3002\u4f46\u662f\u6211\u7684\u505a\u6cd5\u4e0d\u592a\u4e00\u6837\uff0c\u590d\u6742\u5ea6\u5f88,\u5f00O2\u6700\u6162\u7684\u70b9\u8dd1\u4e86 $1.05s$ \uff0c\u5982\u679c\u4e0d\u5f00\u5c31 $TLE$ \u4e00\u4e2a\u70b9 \u3002\n\n## \u601d\u8def\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u6240\u6709\u7ed9\u51fa\u7ebf\u8def\u7684\u957f\u5ea6\uff0c\u5e76\u4f5c\u6392\u5e8f\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u51fa\u6bcf\u6761\u7ebf\u8def\u7684\u539f\u8ddd\u79bb\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u6211\u4eec\u8981\u5220\u9664\u7684\u8fb9\u4e00\u5b9a\u5728\u6700\u957f\u8def\u5f84\u4e0a\u3002\u5982\u679c\u4e0d\u5728\u7684\u8bdd\uff0c\u90a3\u6700\u957f\u7684\u8def\u5f84\u65e0\u6cd5\u51cf\u5c0f\uff0c\u4e00\u5b9a\u4e0d\u4f18\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5148\u628a\u6700\u957f\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u91cc\u9762\uff0c\u6bcf\u6b21\u53d6\u51fa\u6700\u5927\u7684\u8fb9\u5c1d\u8bd5\u5220\u9664\u3002\n\n\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u628a\u6240\u6709\u7684\u8def\u5f84\u6392\u5e8f\u3002\u53ef\u4ee5\u60f3\u5230\u6211\u4eec\u5220\u9664\u8fd9\u6761\u8fb9\u540e\u7684\u6700\u957f\u8def\u5f84\u4e00\u5b9a\u5728\u5c3d\u91cf\u957f\u7684\u8def\u5f84\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u6700\u5927\u7684\u8fb9\u5f00\u59cb\u5224\u65ad\u3002\n\n\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n- \u53d6\u51fa\u4f18\u5148\u961f\u5217\u4e2d\u6700\u957f\u7684\u8fb9\u3002\n\n- \u4ece\u5927\u5230\u5c0f\u5bf9\u6bcf\u6761\u8def\u5f84\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u5f53\u524d\u8def\u5f84\u7684\u539f\u957f\u5ea6\u4e0d\u5927\u4e8e\u5df2\u5f97\u6700\u5927\u957f\u5ea6\uff0c$break$ \u3002 \u5426\u5219\u5982\u679c\u5728\u8fb9\u5728\u8def\u5f84\u4e0a\uff0c\u5c1d\u8bd5\u66f4\u65b0\u6700\u5927\u503c\u3002\u5982\u679c\u4e0d\u5728\u8def\u5f84\u4e0a\uff0c\u5c1d\u8bd5\u66f4\u65b0\u6700\u5927\u503c\u540e $break$ \uff0c\u56e0\u4e3a\u540e\u9762\u8f83\u77ed\u7684\u8def\u5f84\u4e00\u5b9a\u4e0d\u80fd\u66f4\u65b0\u3002\u5982\u679c\u53d1\u73b0\u5f53\u524d\u679a\u4e3e\u5220\u9664\u7684\u8fb9\u5f97\u5230\u7684\u8def\u5f84\u6700\u5927\u503c\u4e0d\u6bd4\u6211\u4e4b\u524d\u66f4\u65b0\u51fa\u7684\u6574\u4f53\u7684\u6700\u5c0f\u7684\u6700\u5927\u503c\u8981\u4f18\uff0c\u90a3\u4e5f\u76f4\u63a5 $break$ \u3002\n\n- \u679a\u4e3e\u5b8c\u4e00\u6761\u8fb9\u4fbf\u540e\u5c1d\u8bd5\u66f4\u65b0\u6700\u4f18\u89e3\u3002\n\n\u73b0\u5728\u6211\u4eec\u91cd\u70b9\u5173\u5fc3\u5982\u4f55\u5224\u65ad\u4e00\u6761\u8fb9\u662f\u5426\u5728\u4e00\u6761\u8def\u5f84\u4e0a\u3002\n\n\u6211\u4eec\u5047\u8bbe\u8fb9\u4e3a $X-Y$ , \u8def\u5f84\u4e3a $A-B$ \uff0c$q , p$ \u95f4\u8fb9\u7684\u6570\u91cf\u5b9a\u4e49\u4e3a $dis[q,p]$\u3002\n\n\u90a3\u4e48\u5982\u679c\u8fb9\u5728\u8be5\u6761\u8def\u5f84\u4e0a\u7684\u8bdd\uff0c\u53ef\u4ee5\u5f97\u5230 $dis[X,A]+dis[Y,B] +dis[Y,A]+dis[X,B]= 2 \u00d7 dis[A,B]$\u3002\n\n\u8fd9\u4e2a\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u81ea\u5df1\u6a21\u62df\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u6240\u4ee5\u4f60\u9700\u8981 $LCA$ \u7ef4\u62a4\u4e09\u4e2a\u503c ,\n\n1. \u5411\u4e0a\u8df3\u8dc3\u540e\u7684\u4f4d\u7f6e\u3002\n\n2. \u5411\u4e0a\u8df3\u8dc3\u8fb9\u6743\u603b\u548c\u3002\n\n3. \u5411\u4e0a\u8df3\u8dc3\u8fb9\u7684\u6570\u91cf\u3002\n\n\u5b9e\u9645\u4e0a\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(n^2logn)$\u7684\uff0c\u4f46\u5176\u5b9e\u5e76\u4e0d\u4f1a\u8fbe\u5230\u8fd9\u4e48\u5927\uff0c\u56e0\u4e3a\u4ee5\u4e0b\u4e09\u70b9\uff1a\n\n1. \u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u8fb9\u6743\u679a\u4e3e\n\n2. \u4e0e\u6700\u4f18\u7b54\u6848\u6bd4\u8f83\uff0c\u57fa\u4e8e\u6700\u4f18\u6027\u7684 $break$\n\n3. \u4e0e\u5df2\u5f97\u6700\u5927\u503c\u6bd4\u8f83\u7684\uff0c$break$\uff0c\u56e0\u4e3a\u8def\u5f84\u957f\u5ea6\u7684\u6709\u5e8f\n\n\u505a\u5230\u4ee5\u4e0a\u4e09\u70b9\uff0c\u4f60\u5c31\u80fd\u5f97\u5230\u5f88\u5927\u7684\u4f18\u5316 \u3002\u4f46\u662f\u4e0d\u5f00 $O2$ \u8fd8\u662f $TLE$ \u4e00\u4e2a\u70b9\u3002\u8fd9\u6211\u5c31\u6ca1\u62db\u4e86\uff0c\u6b63\u5f0f\u8d5b\u573a\u4e0a\u8fd9\u6837\u505a\u62ff $95$ \u5176\u5b9e\u4e5f\u5dee\u4e0d\u591a\u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<vector>\n#include<cmath>\n#include<stack>\n#include<queue>\n#include<iomanip>\n#include<map>\n#include<ctime>\n#include<cstdlib>\nusing namespace std;\ninline void read(int &x)\n{\n\tint w=1;x=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')w=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\tx*=w;\n}\nstruct road\n{\n\tint to,val;\n};\nvector<road>side[300010];\nint jump[300010][22],dis[300010];\nlong long jvl[300010][22];\nvoid dfs(int x)\n{\n    int go=2;\n    for(int i=1;go<dis[x];i++)\n    {\n        jump[x][i]=jump[jump[x][i-1]][i-1];\n        jvl[x][i]=jvl[jump[x][i-1]][i-1]+jvl[x][i-1];\n        go<<=1;\n    }\n    for(int i=side[x].size()-1;i>=0;i--)\n    {\n        int to=side[x][i].to;\n        if(dis[to])continue;\n        jump[to][0]=x;\n        jvl[to][0]=side[x][i].val;\n        dis[to]=dis[x]+1;\n        dfs(to);\n    }\n}\nlong long totdis;\ninline int lca(int x,int y)\n{\n\ttotdis=0;\n    if(dis[x]>dis[y])swap(x,y);\n    for(int i=20;dis[x]<dis[y];i--)\n    {\n    \tif(dis[jump[y][i]]>=dis[x])\n\t\t{\n\t\t\ttotdis+=jvl[y][i];\n\t\t\ty=jump[y][i];\n\t\t}\n\t}\n    if(x==y)return x;\n    for(int i=20;i>=0;i--)\n    {\n        if(jump[x][i]!=jump[y][i])\n        {\n            totdis+=jvl[x][i];x=jump[x][i];\n            totdis+=jvl[y][i];y=jump[y][i];\n        }\n    }\n    totdis+=jvl[x][0]+jvl[y][0];\n    return jump[x][0];\n}\nstruct pl\n{\n\tint a,b,lc;\n\tlong long cd;\n}eve[300010];\nbool cmp(pl a,pl b)\n{\n\treturn a.cd>b.cd;\n}\nstruct edge\n{\n\tint a,b,len;\n\tfriend bool operator < (edge a,edge b)\n\t{\n\t\treturn a.len<b.len;\n\t}\n};\ninline int dade(int a,int b)\n{\n\tif(a<b)return b;return a;\n}\npriority_queue< edge >que;\nint main()\n{\n\tint n,m,a,b,c;\n\tread(n);read(m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tread(a);read(b);read(c);\n\t\tside[a].push_back((road){b,c});\n\t\tside[b].push_back((road){a,c});\n\t}\n\tdis[1]=1;dfs(1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tread(a);read(b);\n\t\teve[i].a=a;\n\t\teve[i].b=b;\n\t\teve[i].lc=lca(a,b);\n\t\teve[i].cd=totdis;\n\t}\n\tsort(eve+1,eve+m+1,cmp);\n\tint x=eve[1].a,y=eve[1].b;\n\tif(dis[x]<dis[y])swap(x,y);\n\twhile(dis[x]!=dis[y])\n\t{\n\t\tfor(int i=0;i<side[x].size();i++)\n\t\t{\n\t\t\tint to=side[x][i].to;\n\t\t\tif(dis[to]>dis[x])continue;\n\t\t\tque.push((edge){x,to,side[x][i].val});\n\t\t\tbreak;\n\t\t}\n\t\tx=jump[x][0];\n\t}\n\twhile(x!=y)\n\t{\n\t\tfor(int i=0;i<side[x].size();i++)\n\t\t{\n\t\t\tint to=side[x][i].to;\n\t\t\tif(dis[to]>dis[x])continue;\n\t\t\tque.push((edge){x,to,side[x][i].val});\n\t\t\tbreak;\n\t\t}\n\t\tfor(int i=0;i<side[y].size();i++)\n\t\t{\n\t\t\tint to=side[y][i].to;\n\t\t\tif(dis[to]>dis[y])continue;\n\t\t\tque.push((edge){y,to,side[y][i].val});\n\t\t\tbreak;\n\t\t}\n\t\tx=jump[x][0];y=jump[y][0];\n\t}\n\tlong long minn=eve[1].cd;\n\twhile(!que.empty())\n\t{\n\t\ta=que.top().a;b=que.top().b;\n\t\tint val=que.top().len;que.pop();\n\t\tlong long maxdis=0;\n\t\tfor(int i=1;i<=m;++i)\n\t\t{\n\t\t\tif(maxdis>=minn)break;\n\t\t\tif(eve[i].cd<=maxdis)break;\n\t\t\tint lcA=lca(eve[i].a,a);int lcB=lca(eve[i].b,b);\n\t\t\tint ned=dis[eve[i].a]+dis[eve[i].b]-dis[eve[i].lc]-dis[eve[i].lc];\n\t\t\tint tot=dis[a]+dis[b]+dis[eve[i].a]+dis[eve[i].b]-dis[lcA]-dis[lcA]-dis[lcB]-dis[lcB];\n\t\t\tif(tot-ned==-1)\n\t\t\t{\n\t\t\t\tmaxdis=dade(maxdis,eve[i].cd-val);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(tot-ned!=1)\n\t\t\t{\n\t\t\t\tmaxdis=eve[i].cd;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tswap(a,b);\n\t\t\tlcA=lca(eve[i].a,a);\n\t\t\tlcB=lca(eve[i].b,b);\n\t\t\ttot=dis[a]+dis[b]+dis[eve[i].a]+dis[eve[i].b]-dis[lcA]-dis[lcA]-dis[lcB]-dis[lcB];\n\t\t\tif(tot-ned!=-1)\n\t\t\t{\n\t\t\t\tmaxdis=eve[i].cd;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmaxdis=dade(maxdis,eve[i].cd-val);\n\t\t}\n\t\tminn=min(minn,maxdis);\n\t}\n\tcout<<minn;\n}\n```",
        "postTime": 1573180121,
        "uid": 89785,
        "name": "\u7a7a\u306e\u8ecc\u8de1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "# \u95f2\u626f\n\n\u6211\u53d1\u73b0\u81ea\u5df1\u7684\u601d\u8def\u51fa\u73b0\u4e86\u4e25\u91cd\u7684\u504f\u5dee\u3002\u3002\u3002\n\n\u60f3\u4e86\u4e24\u4e2a\u5047\u7b97\u6cd5\uff0c\u90fd\u662f\u4ee3\u7801\u6253\u5b8c\u53d1\u73b0\u6709\u95ee\u9898\u3002\u3002\n\n# \u9898\u9762\n\n[\u9898\u9762](https://www.luogu.org/problem/P2680)\n\n# Solution\n\n\u672c\u9898\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u5c06\u4e00\u6761\u8fb9\u7684\u6743\u503c\u53d8\u4e3a $0$ \uff0c\u4f7f\u5f97\u6240\u6709\u8def\u5f84\u957f\u5ea6\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002\n\n\u6211\u4eec\u8003\u8651\u5f53 $x$ \u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u6240\u6709\u6bd4 $x$ \u7684\u4e5f\u4e00\u5b9a\u6ee1\u8db3\uff0c\u5373\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\u3002\n\n\u73b0\u5728\u6211\u4eec\u5c06\u6c42\u89e3\u95ee\u9898\u53d8\u4e3a\u4e86\u5224\u5b9a\u6027\u95ee\u9898\uff0c\u7406\u8bba\u4e0a\u6765\u8bf4\u5b9e\u73b0\u96be\u5ea6\u662f\u8981\u5c0f\u4e00\u4e9b\u7684\u3002\n\n\u8003\u8651\u600e\u4e48\u5224\u65ad\u53ef\u884c\u3002\n\n\u5bf9\u4e8e\u5f53\u524d\u7684\u5224\u5b9a\u503c $x$ \uff0c\u6240\u6709\u957f\u5ea6\u5927\u4e8e $x$ \u7684\u8def\u5f84\u5fc5\u987b\u88ab\u5904\u7406\u6389\u3002\n\n\u56e0\u4e3a\u53ea\u80fd\u6e05\u7a7a\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u7684\u8fb9\u4e00\u5b9a\u5c5e\u4e8e\u6240\u6709\u8fd9\u6837\u7684\u8def\u5f84\u3002\n\n\u6839\u636e\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53d6\u6240\u6709\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u4e2d\u957f\u5ea6\u6700\u5927\u7684\u4e00\u6761\u3002\n\n\u5982\u679c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u51cf\u53bb\u6211\u4eec\u6240\u9009\u8fb9\u7684\u957f\u5ea6\u4f9d\u65e7\u5927\u4e8e $x$ \uff0c\u8bf4\u660e $x$ \u4e0d\u5408\u6cd5\uff0c\u5426\u5219\u4e00\u5b9a\u53ef\u4ee5\u786e\u5b9a\u5408\u6cd5\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u53ea\u5269\u4e0b\u600e\u4e48\u5224\u5b9a\u4e00\u6761\u8fb9\u662f\u5426\u5c5e\u4e8e\u6240\u6709\u7684\u957f\u5ea6\u5927\u4e8e $x$ \u7684\u8def\u5f84\u3002\n\n\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e $x$ \u7684\u8def\u5f84\uff0c\u6211\u4eec\u5c06\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u6807\u8bb0\u4e00\u6b21\u3002\n\n\u6700\u540e\u88ab\u6807\u8bb0\u4e86 $m$ \u6b21\u7684\uff08 $m$ \u4e3a\u8fd9\u79cd\u8def\u5f84\u7684\u4e2a\u6570\uff09\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u8fb9\u3002\n\n\u8003\u8651\u4f18\u5316\u3002\n\n\u5bf9\u4e8e\u6811\u4e0a\u8def\u5f84\u7684\u533a\u95f4\u52a0\uff0c\u53ef\u4ee5\u8003\u8651\u5dee\u5206\u3002\n\n$u,v$ \u4e24\u70b9\u95f4\u7684\u6240\u6709\u8fb9\u7684\u8ba1\u6570\u52a0 $1$ \uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a $c_u+1,c_v+1,c_{lca}-2$ \u3002\u5176\u4e2d $c$ \u4e3a\u5dee\u5206\u6570\u7ec4\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u8981\u5230\u4e00\u4e2a\u5c0f\u6280\u5de7\uff1a\u5c06\u6bcf\u4e00\u6761\u8fb9\u5bc4\u5b58\u5728\u6df1\u5ea6\u66f4\u6df1\u7684\u90a3\u4e00\u4e2a\u70b9\u4e0a\u3002\u53ef\u4ee5\u8bc1\u660e\u9664\u4e86\u6839\u8282\u70b9\u5916\uff0c\u6bcf\u4e2a\u70b9\u521a\u597d\u4ee3\u8868\u4e86\u4e00\u6761\u8fb9\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u6240\u6709\u7684\u95ee\u9898\u90fd\u89e3\u51b3\u4e86\uff0c~~\u53ef\u4ee5\u8f7b\u677e $A$ \u9898\u4e86~~\n\n# Code\n\n```c++\n#include<bits/stdc++.h>\n#define del(a,i) memset(a,i,sizeof(a))\n#define ll long long\n#define inl inline\n#define il inl void\n#define it inl int\n#define ill inl ll\n#define re register\n#define ri re int\n#define rl re ll\n#define mid ((l+r)>>1)\n#define lowbit(x) (x&(-x))\n#define INF 0x3f3f3f3f\nusing namespace std;\ntemplate<class T>il read(T &x){\n\tint f=1;char k=getchar();x=0;\n\tfor(;k>'9'||k<'0';k=getchar()) if(k=='-') f=-1;\n\tfor(;k>='0'&&k<='9';k=getchar()) x=(x<<3)+(x<<1)+k-'0';\n\tx*=f;\n}\ntemplate<class T>il print(T x){\n\tif(x/10) print(x/10);\n\tputchar(x%10+'0');\n}\nll mul(ll a,ll b,ll mod){long double c=1.;return (a*b-(ll)(c*a*b/mod)*mod)%mod;}\nit qpow(int x,int m,int mod){\n\tint res=1,bas=x%mod;\n\twhile(m){\n\t\tif(m&1) res=(1ll*res*bas)%mod;\n\t\tbas=(1ll*bas*bas)%mod,m>>=1;\n\t}\n\treturn res%mod;\n}\nit max(int x,int y){return x>y?x:y;}\nconst int MAXN = 3e5+5;\nint n,m,u,v,t,head[MAXN],num_edge,dis[MAXN],l,r,c[MAXN],sum[MAXN],mx,num;\nstruct Edge{\n\tint next,to,dis;\n\tEdge(){}\n\tEdge(int next,int to,int dis):next(next),to(to),dis(dis){}\n}edge[MAXN<<1];\nil add_edge(int u,int v,int dis){\n\tedge[++num_edge]=Edge(head[u],v,dis),head[u]=num_edge;\n\tedge[++num_edge]=Edge(head[v],u,dis),head[v]=num_edge;\n}\nstruct Node{\n\tint u,v,lca,len;\n}node[MAXN];\nint d[MAXN],f[MAXN],sz[MAXN],top[MAXN],son[MAXN],lca;\nil DFS1(int u,int fa){\n\tf[u]=fa,d[u]=d[fa]+1,sz[u]=1;\n\tfor(ri i=head[u];i;i=edge[i].next){\n\t\tif(edge[i].to==fa) continue;\n\t\tdis[edge[i].to]=dis[u]+edge[i].dis;\n\t\tDFS1(edge[i].to,u),sz[u]+=sz[edge[i].to];\n\t\tif(sz[edge[i].to]>sz[son[u]]) son[u]=edge[i].to;\n\t}\n}\nil DFS2(int u,int t){\n\ttop[u]=t;\n\tif(!son[u]) return ;\n\tDFS2(son[u],t);\n\tfor(ri i=head[u];i;i=edge[i].next){\n\t\tif(edge[i].to==f[u]||edge[i].to==son[u]) continue;\n\t\tDFS2(edge[i].to,edge[i].to);\n\t}\n}\nit LCA(int u,int v){\n\twhile(top[u]!=top[v]){\n\t\tif(d[top[u]]<d[top[v]]) swap(u,v);\n\t\tu=f[top[u]];\n\t}\n\treturn d[u]<d[v]?u:v;\n}\nil DFS(int u){\n\tsum[u]=c[u];\n\tfor(ri i=head[u];i;i=edge[i].next){\n\t\tif(edge[i].to==f[u]) continue;\n\t\tDFS(edge[i].to),sum[u]+=sum[edge[i].to];\n\t\tif(sum[edge[i].to]>=num) mx=max(mx,edge[i].dis);\n\t}\n}\ninl bool check(int lim){\n\tri mx_len=0;mx=0,num=0,del(c,0);\n\tfor(ri i=1;i<=m;++i){\n\t\tif(node[i].len<=lim) continue;\n\t\tc[node[i].u]++,c[node[i].v]++,c[node[i].lca]-=2;\n\t\tnum++,mx_len=max(mx_len,node[i].len);\n\t}\n\tDFS(1);\n\tif(mx_len-mx<=lim) return true;\n\treturn false;\n}\nint main()\n{\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tread(n),read(m);\n\tfor(ri i=1;i<n;++i) read(u),read(v),read(t),add_edge(u,v,t);\n\tDFS1(1,0),DFS2(1,1);\n\tfor(ri i=1;i<=m;++i){\n\t\tread(u),read(v),lca=LCA(u,v);\n\t\tnode[i].len=dis[u]+dis[v]-2*dis[lca];\n\t\tr=max(r,node[i].len),node[i].u=u,node[i].v=v,node[i].lca=lca;\n\t}\n\twhile(l<r){\n\t\tif(check(mid)) r=mid;\n\t\telse l=mid+1;\n\t}\n\tprint(l);\n\treturn 0;\n}\n```\n\n# \u603b\u7ed3\n\n\u5bf9\u4e8e\u6700\u5927\u503c\u6700\u5c0f\uff0c\u6700\u5c0f\u503c\u6700\u5927\u8fd9\u7c7b\u95ee\u9898\u8981\u654f\u611f\u4e00\u4e9b\uff0c\u53ef\u4ee5\u5f80\u4e8c\u5206\u8fd9\u65b9\u9762\u60f3\u3002",
        "postTime": 1567390209,
        "uid": 122273,
        "name": "TheShadow",
        "ccfLevel": 0,
        "title": "P2680 \u8fd0\u8f93\u8ba1\u5212 \u9898\u89e3"
    },
    {
        "content": "**\u8fd9\u662f\u4e00\u7bc7\u601d\u8def\u6e05\u6670\u7684\u9898\u89e3\uff0c\u6ca1\u6709\u7528\u5230\u6811\u94fe\u62cb\u5206\u7b49~~\u9ad8\u6df1\u7b97\u6cd5~~\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u7b2c13\u4e2a\u70b9\u5361\u5e38\uff0c\u6709\u8be6\u7ec6\u7684\u590d\u6742\u7684\u5206\u6790\uff0c\u770b\u4e0d\u61c2\u5176\u4ed6\u9898\u89e3\u7684\u53ef\u4ee5\u8bd5\u8bd5\u8fd9\u7bc7\u7406\u6e05\u601d\u8def**\n\n1.\u76f8\u5173\u77e5\u8bc6\u7b97\u6cd5\uff1a**\u500d\u589e\u6c42\u8def\u5f84\u957f\u5ea6\uff0c\u4e8c\u5206\uff0c\u6811\u4e0a\u5dee\u5206**\uff1b\n\n2.\u601d\u8003\u601d\u8def\uff1a\u6211\u4eec\u770b\u5230\u9898\u76ee\u8ba9\u4f60\u6c42\u7684\u5176\u5b9e\u662f\u51cf\u6389\u4e00\u6761\u8def\u7684\u957f\u5ea6\u540e\uff0c\u6240\u6709\u8def\u5f84\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff0c\u6211\u4eec\u8981\u60f3\u5230\u8fd9\u9053\u9898\u5f88\u53ef\u80fd\u662f**\u4e8c\u5206\u7b54\u6848**\uff0c\u518d\u770b\u6570\u636e\u8303\u56f4nm\u90fd\u662f\u5341\u7684\u4e94\u6b21\u65b9\u7ea7\u522b\u90a3\u8fd9\u6837\u4e8c\u5206\u7684\u601d\u8def\u662f\u6709\u4e86\u3002\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u60f3\u60f3\uff0c\u600e\u6837\u8fdb\u884c\u4e8c\u5206\uff1f\uff1f\u6bcf\u5f53\u6211\u4eec\u4e8c\u5206\u4e86\u4e00\u4e2a\u7b54\u6848\uff0c\u662f\u8981\u4fdd\u8bc1\u6240\u6709\u7684\u51cf\u53bb\u866b\u6d1e\u65f6\u95f4\u7684\u8def\u5f84\u90fd\u4e0d\u8981\u8d85\u8fc7\u8fd9\u4e2a\u7b54\u6848\uff0c\u90a3\u4e48\u771f\u6b63\u51b3\u5b9a\u8fd9\u4e2a\u65b9\u6848\u53ef\u4e0d\u53ef\u884c\u7684\u4e0d\u5c31\u662f**\u6240\u6709\u8def\u5f84\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u51cf\u53bb\u6240\u6709\u53ef\u4ee5\u5220\u8fb9\u6743\u7684\u8fb9\u662f\u5426\u5927\u4e8emid**\uff0c\u82e5\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u90a3\u4e48\u6bd4\u4ed6\u66f4\u5c0f\u7684\u90a3\u4e9b\u8def\u5f84\u81ea\u7136\u4e5f\u53ef\u4ee5\uff0c\u82e5\u5927\u4e8emid\u5219\u4e0d\u53ef\u4ee5\uff1b\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u89e3\u51b3\u600e\u6837\u9009\u4e0a\u8ff0\u7684**\u53ef\u4ee5\u5220\u8fb9\u6743\u7684\u8fb9**\uff0c\u663e\u7136\u4f60\u53ef\u4ee5\u5220\u8fb9\u6743\u7684\u8fd9\u6761\u8fb9\u4e00\u5b9a\u8981\u662f\u6240\u6709\u8d85\u8fc7mid\u7684\u6240\u6709\u8def\u5f84\u7684**\u516c\u5171\u8fb9**\uff0c\u56e0\u4e3a\u53ea\u8981\u6709\u4e00\u4e2a\u8d85\u8fc7mid\u7684\u8def\u5f84\u4e0d\u5305\u542b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8def\u5f84\u76f8\u5f53\u4e8e\u8fb9\u6743\u6ca1\u6709\u51cf\u5c11\uff0c\u81ea\u7136\u4f1a\u8d85mid\u4f7f\u7b54\u6848\u4e0d\u5408\u6cd5\uff0c\u800c\u6211\u4eec\u5c31\u8981\u7528**\u6811\u4e0a\u5dee\u5206**\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1b\n\n3.\u590d\u6742\u5ea6\u4f18\u5316\uff1a\u5bf9\u4e8e\u6c42m\u4e2a\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ea\u5728\u4e8c\u5206\u8fc7\u7a0b\u4e2d\u7528\u5230\u4e86\u6240\u6709\u8def\u5f84\u7684\u6700\u5927\u503c\u548c\u8def\u5f84\u957f\u5ea6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5728\u4e8c\u5206\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u53d8\u7684\uff0c**\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6c42m\u4e2a\u8def\u5f84\u7684\u8fc7\u7a0b\u653e\u5728\u4e8c\u5206\u4e4b\u5916**\uff0c\u4ee5\u53ca\u4e8c\u5206\u7684\u5de6\u8d77\u70b9\u5373\u7b54\u6848\u7684\u6700\u5c0f\u503c\u662f**\u6700\u957f\u7684\u8def\u5f84\u51cf\u53bb\u51cf\u53bb\u6700\u957f\u7684\u8fb9\u6743**\uff1b\n\n\u540c\u65f6\u6c42\u8def\u5f84\u957f\u5ea6\u8981\u7528\u5230**\u500d\u589e\u77e5\u8bc6**\n\n4.\u590d\u6742\u5ea6\u5206\u6790\uff1a\u500d\u589e\u6c42\u8def\u5f84 o(mlogn);\u4e8c\u5206o\uff08log300000000\uff09\uff1b\u6811\u4e0a\u5dee\u5206o\uff08n\uff09\uff1b\u500d\u589e\u5904\u7406\uff08n+nlogn\uff09\uff1b\n\n\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3aO\uff08n+nlogn+mlogn+log(3*10^8)*n\uff09;\n\n\u540c\u65f6\u6ce8\u610f**\u7528scanf\u8f93\u5165**\uff0c\u5c31\u4e0d\u4f1a\u88ab\u7b2c\u5341\u4e09\u4e2a\u70b9\u5361\u5566\u3002\n\n\u6211\u4ee3\u7801\u4f1a\u5c3d\u91cf\u5907\u6ce8\uff0c\u4e0d\u61c2\u5f97\u53ef\u4ee5\u79c1\u4fe1\u95ee\u6211\uff1b\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,m,x,y,cnt,fir[300010],dis[300010],w[300010][25],f[300010][25],d[300010],vis[300010],maxx,a[300010],b[300010],cha[300010],ans=1e9,edge[600010],maxbi;\nstruct ren{\n\tint e,nex,w;\n}bian[600010];\nvoid addedge(int ss,int ee,int ww){\n\tcnt++;\n\tbian[cnt].e=ee;\n\tbian[cnt].w=ww;\n\tbian[cnt].nex=fir[ss];\n\tfir[ss]=cnt;\n}//\u5efa\u8fb9\nvoid dfs1(int u){\n\tfor(int x=fir[u];x;x=bian[x].nex){\n\t\tint en=bian[x].e;\n\t\tif(vis[en]==0){\n\t\t\tvis[en]=1;\n\t\t\td[en]=d[u]+1;\t\t\n\t\t\tf[en][0]=u;\n\t\t\tw[en][0]=bian[x].w;\n\t\t\tdfs1(en);\n\t\t}\n\t}\n}//\u5904\u7406\u500d\u589e\u8981\u7528\u5230\u7684\u6df1\u5ea6d\uff0c\u7956\u5148f\uff0c\u8def\u5f84\u548cw\uff1b\nint lujing(int a,int b){\n\tint ans=0;\n\tif(d[a]<d[b])swap(a,b);\n\tfor(int i=20;i>=0;i--)\n\tif(d[f[a][i]]>=d[b]){\n\t\tans+=w[a][i];\n\t\ta=f[a][i];\n\t}\n\tif(a==b)return ans;\n\tfor(int i=20;i>=0;i--)\n\tif(f[a][i]!=f[b][i]){\n\t\tans+=w[a][i]+w[b][i];\n\t\ta=f[a][i];\n\t\tb=f[b][i];\n\t}\n\tans+=w[a][0]+w[b][0];\n\treturn ans;\n}//\u500d\u589e\u6c42\u8def\u5f84\nint lca(int a,int b){\n\tif(d[a]<d[b])swap(a,b);\n\tfor(int i=20;i>=0;i--)\n\tif(d[f[a][i]]>=d[b])a=f[a][i];\n\tif(a==b)return a;\n\tfor(int i=20;i>=0;i--)\n\tif(f[a][i]!=f[b][i]){\n\t\ta=f[a][i];\n\t\tb=f[b][i];\n\t}\n\treturn f[a][0];\n}//\u500d\u589e\u6c42lca\uff0c\u5728\u6811\u4e0a\u5dee\u5206\u65f6\u4f1a\u7528\u5230\uff1b\nvoid dfs2(int u){\n\tfor(int x=fir[u];x;x=bian[x].nex){\n\t\tint en=bian[x].e;\n\t\tif(vis[en]==0){\n\t\tvis[en]=1;\n\t\tdfs2(en);\n\t\tcha[u]+=cha[en]; \n\t\tedge[x]=cha[en];\n\t}\n}\n}//\u6811\u4e0a\u5dee\u5206\uff1b\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<n;i++){\n\t\tint w;\t\t\n\t\tscanf(\"%d%d%d\",&x,&y,&w);\n\t\taddedge(x,y,w);\n\t\taddedge(y,x,w);\n\t}\n\tf[1][0]=1;d[1]=1;vis[1]=1;\n\tdfs1(1);//\u500d\u589e\u5904\u7406\uff1b\n\tfor(int i=1;i<=20;i++)\n\t    for(int u=1;u<=n;u++){\n\t    \tf[u][i]=f[f[u][i-1]][i-1];\n\t    \tw[u][i]=w[f[u][i-1]][i-1]+w[u][i-1];\n\t\t}//\u500d\u589e\u5904\u7406\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&a[i],&b[i]);\n\t\tdis[i]=lujing(a[i],b[i]);\n\t\tmaxx=max(maxx,dis[i]);\n\t}//\u6c42\u8def\u5f84\u957f\u5ea6\u4ee5\u53ca\u5176\u6700\u5927\u503c\uff1b\n\tfor(int i=1;i<=2*(n-1);i++)\n\tmaxbi=max(maxbi,bian[i].w);\n\tint l=maxx-maxbi,r=300000000,mid;//\u6ce8\u610fl\u53d6\u503c\n\twhile(l<=r){//\u4e8c\u5206\n\t\tmid=(l+r)/2;\n\t\tint t=0,maxbian=0;\n\t\tmemset(edge,0,sizeof(edge));\n\t\tmemset(cha,0,sizeof(cha));\n\t\tmemset(vis,0,sizeof(vis));\n\t\tfor(int i=1;i<=m;i++)\n\t\tif(dis[i]>mid){\n\t\t\tcha[a[i]]++;\n\t\t\tcha[b[i]]++;\n\t\t\tcha[lca(a[i],b[i])]-=2;\n\t\t\tt++;\n\t\t}\n\t\tif(t==0){\n\t\t\tans=min(ans,mid);\n\t\t\tr=mid-1;\n\t\t\tcontinue;\n\t\t}//\u6ca1\u6709\u8d85\u8fc7mid\u7684\u80af\u5b9a\u7b26\u5408\uff1b\n\n\t\tvis[1]=1;\n\t\tdfs2(1);\t\n\t\tfor(int i=1;i<=2*(n-1);i++)\n\t\tif(edge[i]==t)maxbian=max(maxbian,bian[i].w);\n\t\tif(maxx-maxbian<=mid){\n\t\t\tans=min(ans,mid);\n\t\t\tr=mid-1;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1567163817,
        "uid": 126465,
        "name": "\u7130\u706b\u4fca\u4fca",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u6211\u611f\u89c9\u8fd9\u9898\u7684\u4ee3\u7801\u91cf\u3001\u601d\u60f3\u3001\u5361\u5e38\u6280\u5de7\u7b49\u90fd\u5f88\u591a\uff0c\u53c8\u53d1\u73b0\u9996\u9875\u9898\u89e3\u6ca1\u6709\u7528\u67d0\u4e9b\u4f18\u5316\uff0c\u5c31\u6765H2CO3\u4e00\u53d1\u5427\n\n\u9996\u5148\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\u5bf9\u4e8e\u65f6\u95f4$T1<T2$\uff0c\u82e5T1\u6ee1\u8db3\u8981\u6c42\uff0cT2\u5fc5\u80fd\u6ee1\u8db3\uff0c\u4e5f\u5c31\u662f\uff0c\u201c\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u201d\u5bf9\u4e8e\u65f6\u95f4\u662f\u5355\u8c03\u7684\uff0c\u5b58\u5728\u5b9a\u503cT\uff0c\u4f7f\u5f97\u4efb\u610f$T1>=T$\u6ee1\u8db3\u6761\u4ef6\uff0c\u4efb\u610f$T2<T$\u4e0d\u6ee1\u8db3\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u8003\u8651\u4e8c\u5206\u7b54\u6848\uff1b\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u65b9\u6848\u6309\u8017\u65f6\u6392\u5e8f\uff0c\u4e8c\u5206\u65f6\u95f4\uff0c\u7edf\u8ba1\u51fa\u88ab\u6240\u6709\u8017\u65f6\u5927\u4e8eT\u7684\u65b9\u6848\u7ecf\u8fc7\u7684\u8def\u5f84\u7684\u8fb9\u6743\u6700\u5927\u503c\uff0c\u5224\u65ad\u5b83\u80fd\u5426\u4f7f\u6700\u8017\u65f6\u65b9\u6848\u7684\u8017\u65f6\u4e0d\u8d85\u8fc7T\uff0c\u5982\u6b64\u4e8c\u5206\uff1b\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u4e00\u4e2a\u9636\u6bb5\u6027\u6210\u679c\uff1a\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define lowbit(x) ((x)&(-x))\n#define ll long long\n#define maxn 333333\nint n,m;\nstruct node\n{\n\tint to;\n\tint nxt;\n\tll val;\n}nd[2*maxn];\nint head[maxn],cnt;\nint dep[maxn];\nint st[maxn],ed[maxn],dfn[maxn],eul[2*maxn][20];\nint tot,cur;\nint fa[maxn];\nint lg[2*maxn];\nll val[2*maxn];\nint cut[2*maxn];\nll inval[maxn];\nqueue<int>q[2];\nint a=1,b;\nstruct route\n{\n\tint x;\n\tint y;\n\tll dist;\n\tfriend bool operator < (route a,route b)\n\t{\n\t\treturn a.dist<b.dist;\n\t}\n}A[maxn];\nvoid init()\n{\n\tmemset(head,-1,sizeof(head));\n\tcnt=1;\n\treturn;\n}\nvoid add(int x,int y,ll z)\n{\n\tnd[cnt].to=y;\n\tnd[cnt].nxt=head[x];\n\tnd[cnt].val=z;\n\thead[x]=cnt++;\n\treturn;\n}\nvoid dfs(int x,int rt)\n{\n\tcur++;\n\tst[x]=cur;\n\ttot++;\n\teul[tot][0]=x;\n\tdfn[x]=tot;\n\tfor(int i=head[x];i!=-1;i=nd[i].nxt)\n\t{\n\t\tint t=nd[i].to;\n\t\tif(t!=rt)\n\t\t{\n\t\t\tdep[t]=dep[x]+1;\n\t\t\tfa[t]=x;\n\t\t\tdfs(t,x);\n\t\t\ttot++;\n\t\t\teul[tot][0]=x;\n\t\t}\n\t}\n\tcur++;\n\ted[x]=cur;\n\treturn;\n}\nvoid rmq()\n{\n\tlg[1]=0;\n\tfor(int i=2;i<=tot;i++)\n\t{\n\t\tlg[i]=lg[i>>1]+1;\n\t}\n\tfor(int i=1;i<=lg[tot];i++)\n\t{\n\t\tfor(int j=1;(j+(1<<i)-1)<=tot;j++)\n\t\t{\n\t\t\tint r=j+(1<<(i-1));\n\t\t\teul[j][i]=dep[eul[j][i-1]]<dep[eul[r][i-1]]?eul[j][i-1]:eul[r][i-1];\n\t\t}\n\t}\n\treturn;\n}\nint lca(int x,int y)\n{\n\tif(x>y)\n\t{\n\t\tswap(x,y);\n\t}\n\tint k=lg[y-x+1];\n\treturn dep[eul[x][k]]<dep[eul[y-(1<<k)+1][k]]?eul[x][k]:eul[y-(1<<k)+1][k];\n}\nvoid addt(int x,ll y)\n{\n\tif(x<=0)\n\t{\n\t\treturn;\n\t}\n\twhile(x<=2*n)\n\t{\n\t\tval[x]+=y;\n\t\tx+=lowbit(x);\n\t}\n\treturn;\n}\nll queryt(int x)\n{\n\tif(x<0)\n\t{\n\t\treturn 0;\n\t}\n\tll ans=0;\n\twhile(x)\n\t{\n\t\tans+=val[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\nvoid addr(int x,int y)\n{\n\tif(x<=0)\n\t{\n\t\treturn;\n\t}\n\twhile(x<=2*n)\n\t{\n\t\tcut[x]+=y;\n\t\tx+=lowbit(x);\n\t}\n\treturn;\n}\nint queryr(int x)\n{\n\tif(x<0)\n\t{\n\t\treturn 0;\n\t}\n\tint ans=0;\n\twhile(x)\n\t{\n\t\tans+=cut[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\nll search()\n{\n\tll l=0,r=A[m].dist,ans=r;\n\tint pla=m;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)/2;\n\t\twhile(A[pla].dist>mid)\n\t\t{\n\t\t\taddr(st[A[pla].x],1);\n\t\t\taddr(st[A[pla].y],1);\n\t\t\taddr(st[lca(dfn[A[pla].x],dfn[A[pla].y])],-2);\n\t\t\tpla--;\n\t\t}\n\t\twhile(A[pla+1].dist<=mid)\n\t\t{\n\t\t\tpla++;\n\t\t\taddr(st[A[pla].x],-1);\n\t\t\taddr(st[A[pla].y],-1);\n\t\t\taddr(st[lca(dfn[A[pla].x],dfn[A[pla].y])],2);\n\t\t}\n\t\tll tmp=0;\n\t\twhile(q[a].size())\n\t\t{\n\t\t\tint x=q[a].front();\n\t\t\tq[a].pop();\n\t\t\tq[b].push(x);\n\t\t\tif(queryr(ed[x])-queryr(st[x]-1)==m-pla)\n\t\t\t{\n\t\t\t\ttmp=max(tmp,inval[x]);\n\t\t\t}\n\t\t}\n\t\tswap(a,b);\n\t\tif(A[m].dist-tmp<=mid)\n\t\t{\n\t\t\tans=mid;\n\t\t\tr=mid-1;\n\t\t}else\n\t\t{\n\t\t\tl=mid+1;\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tinit();\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tll z;\n\t\tscanf(\"%d%d%lld\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tdfs(1,0);\n\trmq();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=head[i];j!=-1;j=nd[j].nxt)\n\t\t{\n\t\t\tint t=nd[j].to;\n\t\t\tif(dep[t]>dep[i])\n\t\t\t{\n\t\t\t\taddt(st[t],nd[j].val);\n\t\t\t\taddt(ed[t],-nd[j].val);\n\t\t\t\tinval[t]=nd[j].val;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&A[i].x,&A[i].y);\n\t\tA[i].dist=queryt(st[A[i].x])+queryt(st[A[i].y])-2*queryt(st[lca(dfn[A[i].x],dfn[A[i].y])]);\n\t}\n\tsort(A+1,A+m+1);\n\tint X=A[m].x;\n\tint Y=A[m].y;\n\tif(dep[X]<dep[Y])\n\t{\n\t\tswap(X,Y);\n\t}\n\twhile(dep[X]<dep[Y])\n\t{\n\t\tq[1].push(X);\n\t\tX=fa[X];\n\t}\n\twhile(X!=Y)\n\t{\n\t\tq[1].push(X);\n\t\tq[1].push(Y);\n\t\tX=fa[X];\n\t\tY=fa[Y];\n\t}\n\tA[m+1].dist=0x3f3f3f3f3f3f3f3fll;\n\tprintf(\"%lld\\n\",search());\n\treturn 0;\n}\n```\n\n\u7136\u800c\uff0c\u8fd9\u4efd\u4ee3\u7801\u5728\u6d1b\u8c37\u6570\u636e\u4e0b\uff0c\u8fd8\u662f\u4f1aTLE#13\uff0c\u8003\u8651\u4f18\u5316\uff1a\n\n- \u5bb9\u6613\u53d1\u73b0\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u8fb9\u5fc5\u88ab\u6700\u8017\u65f6\u65b9\u6848\u7ecf\u8fc7\uff08\u5426\u5219\u6700\u8017\u65f6\u65b9\u6848\u4e0d\u53d8\uff0c\u6240\u9700\u65f6\u95f4\u4e0d\u53d8\uff09\n\n\u8fd9\u6837\uff0c\u6211\u7528\u4e862\u6761\u961f\u5217\uff08\u6eda\u52a8\uff09\u6765\u5b58\u50a8\u6700\u8017\u65f6\u65b9\u6848\u7ecf\u8fc7\u7684\u8fb9\uff0c\u6bcf\u6b21\u7a77\u4e3e\u8fb9\u65f6\uff0c\u53ea\u9700\u7a77\u4e3e\u8fd9\u4e9b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7b2c\u4e8c\u9636\u6bb5\u5982\u4e0b\uff1a\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define lowbit(x) ((x)&(-x))\n#define ll long long\n#define maxn 333333\nint n,m;\nstruct node\n{\n\tint to;\n\tint nxt;\n\tll val;\n}nd[2*maxn];\nint head[maxn],cnt;\nint dep[maxn];\nint st[maxn],ed[maxn],dfn[maxn],eul[2*maxn][20];\nint tot,cur;\nint fa[maxn];\nint lg[2*maxn];\nint cut[2*maxn];\nll inval[maxn];\nll dist[maxn];\nqueue<int>q[2];\nint a=1,b;\nstruct route\n{\n\tint x;\n\tint y;\n\tll dist;\n\tfriend bool operator < (route a,route b)\n\t{\n\t\treturn a.dist<b.dist;\n\t}\n}A[maxn];\nvoid init()\n{\n\tmemset(head,-1,sizeof(head));\n\tcnt=1;\n\treturn;\n}\nvoid add(int x,int y,ll z)\n{\n\tnd[cnt].to=y;\n\tnd[cnt].nxt=head[x];\n\tnd[cnt].val=z;\n\thead[x]=cnt++;\n\treturn;\n}\nvoid dfs(int x,int rt)\n{\n\tcur++;\n\tst[x]=cur;\n\ttot++;\n\teul[tot][0]=x;\n\tdfn[x]=tot;\n\tfor(int i=head[x];i!=-1;i=nd[i].nxt)\n\t{\n\t\tint t=nd[i].to;\n\t\tif(t!=rt)\n\t\t{\n\t\t\tdep[t]=dep[x]+1;\n\t\t\tdist[t]=dist[x]+nd[i].val;\n\t\t\tinval[t]=nd[i].val;\n\t\t\tfa[t]=x;\n\t\t\tdfs(t,x);\n\t\t\ttot++;\n\t\t\teul[tot][0]=x;\n\t\t}\n\t}\n\tcur++;\n\ted[x]=cur;\n\treturn;\n}\nvoid rmq()\n{\n\tlg[1]=0;\n\tfor(int i=2;i<=tot;i++)\n\t{\n\t\tlg[i]=lg[i>>1]+1;\n\t}\n\tfor(int i=1;i<=lg[tot];i++)\n\t{\n\t\tfor(int j=1;(j+(1<<i)-1)<=tot;j++)\n\t\t{\n\t\t\tint r=j+(1<<(i-1));\n\t\t\teul[j][i]=dep[eul[j][i-1]]<dep[eul[r][i-1]]?eul[j][i-1]:eul[r][i-1];\n\t\t}\n\t}\n\treturn;\n}\nint lca(int x,int y)\n{\n\tif(x>y)\n\t{\n\t\tswap(x,y);\n\t}\n\tint k=lg[y-x+1];\n\treturn dep[eul[x][k]]<dep[eul[y-(1<<k)+1][k]]?eul[x][k]:eul[y-(1<<k)+1][k];\n}\nvoid addr(int x,int y)\n{\n\tif(x<=0)\n\t{\n\t\treturn;\n\t}\n\twhile(x<=2*n)\n\t{\n\t\tcut[x]+=y;\n\t\tx+=lowbit(x);\n\t}\n\treturn;\n}\nint queryr(int x)\n{\n\tif(x<0)\n\t{\n\t\treturn 0;\n\t}\n\tint ans=0;\n\twhile(x)\n\t{\n\t\tans+=cut[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\nll search()\n{\n\tll l=0,r=A[m].dist,ans=r;\n\tint pla=m;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)/2;\n\t\twhile(A[pla].dist>mid)\n\t\t{\n\t\t\taddr(st[A[pla].x],1);\n\t\t\taddr(st[A[pla].y],1);\n\t\t\taddr(st[lca(dfn[A[pla].x],dfn[A[pla].y])],-2);\n\t\t\tpla--;\n\t\t}\n\t\twhile(A[pla+1].dist<=mid)\n\t\t{\n\t\t\tpla++;\n\t\t\taddr(st[A[pla].x],-1);\n\t\t\taddr(st[A[pla].y],-1);\n\t\t\taddr(st[lca(dfn[A[pla].x],dfn[A[pla].y])],2);\n\t\t}\n\t\tll tmp=0;\n\t\twhile(q[a].size())\n\t\t{\n\t\t\tint x=q[a].front();\n\t\t\tq[a].pop();\n\t\t\tq[b].push(x);\n\t\t\tif(queryr(ed[x])-queryr(st[x]-1)==m-pla)\n\t\t\t{\n\t\t\t\ttmp=max(tmp,inval[x]);\n\t\t\t}\n\t\t}\n\t\tswap(a,b);\n\t\tif(A[m].dist-tmp<=mid)\n\t\t{\n\t\t\tans=mid;\n\t\t\tr=mid-1;\n\t\t}else\n\t\t{\n\t\t\tl=mid+1;\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tinit();\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tll z;\n\t\tscanf(\"%d%d%lld\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tdfs(1,0);\n\trmq();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&A[i].x,&A[i].y);\n\t\tA[i].dist=dist[A[i].x]+dist[A[i].y]-2*dist[lca(dfn[A[i].x],dfn[A[i].y])];\n\t}\n\tsort(A+1,A+m+1);\n\tint X=A[m].x;\n\tint Y=A[m].y;\n\tif(dep[X]<dep[Y])\n\t{\n\t\tswap(X,Y);\n\t}\n\twhile(dep[X]>dep[Y])\n\t{\n\t\tq[1].push(X);\n\t\tX=fa[X];\n\t}\n\twhile(X!=Y)\n\t{\n\t\tq[1].push(X);\n\t\tq[1].push(Y);\n\t\tX=fa[X];\n\t\tY=fa[Y];\n\t}\n\tA[m+1].dist=0x3f3f3f3f3f3f3f3fll;\n\tprintf(\"%lld\\n\",search());\n\treturn 0;\n}\n```\n\n\u8fd9\u6837\uff0c\u5728\u6d1b\u8c37\uff0c\u4f60\u5df2\u7ecf\u80fdA\u6389\u8fd9\u9898\u4e86\uff0c\u4f46\u5728\u67d0\u4e9b\u8f83\u6162\u7684OJ\u4e0a\uff0c\u8fd8\u662f\u4f1aTLE\u3002\u6211\u4e3a\u6b64\u5c1d\u8bd5\u4e86\u4e0d\u5c11\u5361\u5e38\u3001\u4f18\u5316\uff0c\u5f53\u7136\u4e0d\u4f1a\u5168\u6210\u529f\u3002\u6bd4\u5982\uff0c\u6211\u66fe\u8bd5\u56fe\u4f7f\u7528\u786c\u6838\u4f18\u5316\uff08O3\uff09\uff0c\u4f46\u5e76\u6ca1\u6709\u5feb\u591a\u5c11\u3002\u5e76\u4e14\u6b63\u89c4\u7ade\u8d5b\u4e2d\u4e0d\u80fd\u79c1\u81ea\u5f00\uff0c\u5c31\u4e0d\u8981\u5c1d\u8bd5\u4e86\u5427\u3002\n\n\u6210\u529f\u4f18\u5316\u5982\u4e0b\uff1a\n\n1. \u8003\u8651\u8bfb\u5165\u89c4\u6a21\u8f83\u5927\uff0c\u4f7f\u7528\u8bfb\u5165\u4f18\u5316\uff1b\n2. \u8fd9\u9898\u6811\u7684\u89c4\u6a21\u8f83\u5927\uff08300000\uff09\uff0c\u800c\u67e5\u8be2\u6b21\u6570\u4e5f\u4e0d\u8fc7300000\uff0c\u82e5\u7528\u4e4b\u524d\u7684\u6b27\u62c9\u5e8f\uff0c\u65f6\u95f4\u5c06\u8fbe\u5230nlogn+m\uff08\u7a33\u5b9a\uff09\uff0c\u800c\u7528\u4e86\u6811\u5256LCA\u540e\uff0c\u5173\u4e8eLCA\u7684\u65f6\u95f4\u53ef\u964d\u81f3\u6700\u574fn+nlogm\uff08\u5f53\u56fe\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u4e00\u76f4\u8df3\u8f7b\u94fe\u65f6)\u3002\n\n\u6700\u7ec8\u4f18\u5316AC\u4ee3\u7801\uff1a\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define lowbit(x) ((x)&(-x))\n#define ll long long\n#define maxn 333333\nint n,m;\nstruct node\n{\n\tint to;\n\tint nxt;\n\tll val;\n}nd[2*maxn];\nint head[maxn],cnt;\nint dep[maxn];\nint st[maxn],ed[maxn];\nint siz[maxn],top[maxn],son[maxn];\nbool vis[maxn];\nint cur;\nint fa[maxn];\nint lg[2*maxn];\nint cut[2*maxn];\nll inval[maxn];\nll dist[maxn];\nqueue<int>q[2];\nint a=1,b;\nchar str;\nstruct route\n{\n\tint x;\n\tint y;\n\tll dist;\n\tfriend bool operator < (route a,route b)\n\t{\n\t\treturn a.dist<b.dist;\n\t}\n}A[maxn];\ntemplate<typename _X> void read(_X &x)\n{\n\tx=0;\n\tint f=1;\n\twhile(!isdigit(str))\n\t{\n\t\tif(str=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t}\n\t\tstr=getchar();\n\t}\n\twhile(isdigit(str))\n\t{\n\t\tx*=10;\n\t\tx+=str-'0';\n\t\tstr=getchar();\n\t}\n\tx*=f;\n\treturn;\n}\nvoid init()\n{\n\tmemset(head,-1,sizeof(head));\n\tcnt=1;\n\treturn;\n}\nvoid add(int x,int y,ll z)\n{\n\tnd[cnt].to=y;\n\tnd[cnt].nxt=head[x];\n\tnd[cnt].val=z;\n\thead[x]=cnt++;\n\treturn;\n}\nint dfs(int x,int rt)\n{\n\tcur++;\n\tst[x]=cur;\n\tsiz[x]=1;\n\tint mxs=-1;\n\tfor(int i=head[x];i!=-1;i=nd[i].nxt)\n\t{\n\t\tint t=nd[i].to;\n\t\tif(t!=rt)\n\t\t{\n\t\t\tdep[t]=dep[x]+1;\n\t\t\tdist[t]=dist[x]+nd[i].val;\n\t\t\tinval[t]=nd[i].val;\n\t\t\tfa[t]=x;\n\t\t\tsiz[x]+=dfs(t,x);\n\t\t\tif(siz[t]>mxs)\n\t\t\t{\n\t\t\t\tmxs=siz[t];\n\t\t\t\tson[x]=t;\n\t\t\t}\n\t\t}\n\t}\n\tcur++;\n\ted[x]=cur;\n\treturn siz[x];\n}\nvoid dfs2(int x,int tp)\n{\n\tvis[x]=1;\n\ttop[x]=tp;\n\tif(!son[x])\n\t{\n\t\treturn;\n\t}\n\tdfs2(son[x],tp);\n\tfor(int i=head[x];i!=-1;i=nd[i].nxt)\n\t{\n\t\tint t=nd[i].to;\n\t\tif(!vis[t])\n\t\t{\n\t\t\tdfs2(t,t);\n\t\t}\n\t}\n\treturn;\n}\nint lca(int x,int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t{\n\t\t\tswap(x,y);\n\t\t}\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])\n\t{\n\t\tswap(x,y);\n\t}\n\treturn x;\n}\nvoid addr(int x,int y)\n{\n\tif(x<=0)\n\t{\n\t\treturn;\n\t}\n\twhile(x<=2*n)\n\t{\n\t\tcut[x]+=y;\n\t\tx+=lowbit(x);\n\t}\n\treturn;\n}\nint queryr(int x)\n{\n\tif(x<0)\n\t{\n\t\treturn 0;\n\t}\n\tint ans=0;\n\twhile(x)\n\t{\n\t\tans+=cut[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\nll search()\n{\n\tll l=0,r=A[m].dist,ans=r;\n\tint pla=m;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)/2;\n\t\twhile(A[pla].dist>mid)\n\t\t{\n\t\t\taddr(st[A[pla].x],1);\n\t\t\taddr(st[A[pla].y],1);\n\t\t\taddr(st[lca(A[pla].x,A[pla].y)],-2);\n\t\t\tpla--;\n\t\t}\n\t\twhile(A[pla+1].dist<=mid)\n\t\t{\n\t\t\tpla++;\n\t\t\taddr(st[A[pla].x],-1);\n\t\t\taddr(st[A[pla].y],-1);\n\t\t\taddr(st[lca(A[pla].x,A[pla].y)],2);\n\t\t}\n\t\tll tmp=0;\n\t\twhile(q[a].size())\n\t\t{\n\t\t\tint x=q[a].front();\n\t\t\tq[a].pop();\n\t\t\tq[b].push(x);\n\t\t\tif(queryr(ed[x])-queryr(st[x]-1)==m-pla)\n\t\t\t{\n\t\t\t\ttmp=max(tmp,inval[x]);\n\t\t\t}\n\t\t}\n\t\tswap(a,b);\n\t\tif(A[m].dist-tmp<=mid)\n\t\t{\n\t\t\tans=mid;\n\t\t\tr=mid-1;\n\t\t}else\n\t\t{\n\t\t\tl=mid+1;\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tinit();\n\tread(n);\n\tread(m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tll z;\n\t\tread(x);\n\t\tread(y);\n\t\tread(z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tdfs(1,0);\n\tdfs2(1,1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tread(A[i].x);\n\t\tread(A[i].y);\n\t\tA[i].dist=dist[A[i].x]+dist[A[i].y]-2*dist[lca(A[i].x,A[i].y)];\n\t}\n\tsort(A+1,A+m+1);\n\tint X=A[m].x;\n\tint Y=A[m].y;\n\tif(dep[X]<dep[Y])\n\t{\n\t\tswap(X,Y);\n\t}\n\twhile(dep[X]>dep[Y])\n\t{\n\t\tq[1].push(X);\n\t\tX=fa[X];\n\t}\n\twhile(X!=Y)\n\t{\n\t\tq[1].push(X);\n\t\tq[1].push(Y);\n\t\tX=fa[X];\n\t\tY=fa[Y];\n\t}\n\tA[m+1].dist=0x3f3f3f3f3f3f3f3fll;\n\tprintf(\"%lld\\n\",search());\n\treturn 0;\n}\n```",
        "postTime": 1552655159,
        "uid": 158849,
        "name": "renhr2002",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "**\u89e3\u9898\u601d\u8def\uff1a**\n\n\u8fd9\u9898\u8981\u628a\u6700\u957f\u7684\u8def\u5f84\u6700\u5c0f\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7528\u4e8c\u5206\u6765\u89e3\u51b3\u3002\n\n\u6211\u4eec\u5148\u4e8c\u5206\u4e00\u4e2a\u957f\u5ea6$x$\uff0c\u7136\u540e\u5c06\u6240\u6709\u8def\u5f84\u957f\u5ea6$>x$\u7684\u6570\u91cf\u7edf\u8ba1\u51fa\u6765\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u6761\u8fb9\u5c5e\u4e8e\u6240\u6709\u957f\u5ea6$>x$\u7684\u8def\u5f84\u4e14\u5220\u9664\u8fd9\u6761\u8fb9\u4e4b\u540e\u6700\u5927\u7684\u8def\u5f84\u957f\u5ea6\u5c0f\u4e8e$x$\uff0c\u8fd9\u6837\u5b50$\\ge x$\u7684\u7b54\u6848\u5c31\u90fd\u662f\u6b63\u786e\u7684\uff0c\u53ef\u4ee5\u7ee7\u7eed\u4e8c\u5206\u66f4\u5c0f\u7684\u7b54\u6848\uff0c\u5426\u5219\u5c31\u5e94\u8be5\u4e8c\u5206\u66f4\u5927\u7684\u7b54\u6848\u3002\n\n\u6211\u53d1\u73b0\u597d\u50cf\u6ca1\u6709\u7528\u6811\u5256\u6c42$LCA$\u7684\u6b38(\u9003...\n\n**code:**\n\n```cpp\n/*Program from Luvwgyx*/\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=3e5+10;\nbool flag;\nstruct node{int to,nxt,w;}e[maxn<<1];\nstruct edge{int u,v,lca,dis;}road[maxn];\nint n,m,sum,tot,idx,head[maxn],dfn[maxn],dis[maxn],cnt[maxn];\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid print(int x){\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)print(x/10);\n    putchar(x%10+'0');\n}\nvoid write(int x){print(x);puts(\"\");}\nvoid add(int u,int v,int w){e[++tot].to=v;e[tot].w=w;e[tot].nxt=head[u];head[u]=tot;}\nstruct Heavy_Light_Decomposition{\n    int fa[maxn],dep[maxn],son[maxn],top[maxn],size[maxn];\n    void build(int x,int deep){\n        dep[x]=deep;size[x]=1;int mx=0;\n        for(int i=head[x],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n            if(v!=fa[x]){\n                fa[v]=x;dis[v]=dis[x]+e[i].w;\n                build(v,deep+1);size[x]+=size[v];\n                if(size[v]>mx)mx=size[v],son[x]=v;\n            }\n    }\n    void dfs(int x){\n        if(!x)return ;dfn[x]=++idx;\n        top[x]=son[fa[x]]==x?top[fa[x]]:x;\n        dfs(son[x]);\n        for(int i=head[x],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n            if(v!=fa[x]&&v!=son[x])dfs(v);\n    }\n    int query(int u,int v){\n        while(top[u]!=top[v]){\n            if(dep[top[u]]<dep[top[v]])swap(u,v);\n            u=fa[top[u]];\n        }if(dep[u]>dep[v])swap(u,v);\n        return u;\n    }\n}HLD;\nvoid dfs(int x){\n    for(int i=head[x],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n        if(v!=HLD.fa[x])dfs(v),cnt[x]+=cnt[v];\n    //printf(\"%d %d\\n\",x,cnt[x]);\n}\nvoid solve(int x,int mx,int num){\n    for(int i=head[x],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n        if(v!=HLD.fa[x]){\n            if(cnt[v]==num&&dis[v]-dis[x]>=mx){flag=1;return ;}\n            solve(v,mx,num);\n        }\n}\nbool check(int x){\n    int ret=0,mx=0;flag=0;\n    memset(cnt,0,sizeof(cnt));\n    for(int i=1;i<=m;i++)\n        if(road[i].dis>x){\n            int u=road[i].u,v=road[i].v;\n            cnt[u]++;cnt[v]++;cnt[road[i].lca]-=2;\n            mx=max(mx,road[i].dis-x);\n            ret++;//puts(\"ok\");\n        }\n    if(!ret)return 1;\n    //puts(\"ok\");\n    //write(ret);\n    //write(mx);\n    dfs(1);solve(1,mx,ret);\n    //write(flag);puts(\"\");\n    return flag;\n}\nvoid debug(){for(int i=1;i<=n;i++)printf(\"%d \",dis[i]);puts(\"\");}\nint main(){\n    n=read();m=read();\n    for(int i=1;i<n;i++){\n        int u=read(),v=read(),w=read();\n        add(u,v,w);add(v,u,w);sum+=w;\n    }HLD.build(1,1);HLD.dfs(1);\n    for(int i=1;i<=m;i++){\n        int u=read(),v=read();road[i].u=u;road[i].v=v;\n        int lca=HLD.query(u,v);road[i].lca=lca;\n        road[i].dis=dis[u]+dis[v]-2*dis[road[i].lca];\n    }int l=0,r=sum;//debug();\n    //write(road[1].dis);\n    while(l<=r){\n        int mid=(l+r)>>1;//write(mid);\n        if(check(mid))r=mid-1;\n        else l=mid+1;\n    }write(l);\n    return 0;\n}\n```",
        "postTime": 1544530319,
        "uid": 43012,
        "name": "Luvwgyx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8001\u89c4\u77e9\uff0c\u8fd9\u91cc\u662f\u9898\u76ee\uff1a[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P2680)\n\n\u5c0f\u7f16\u9898\u5916\u8bdd\uff1a\u54ce\uff0c\u8fd9\u9053\u9898\uff0c\u505a\u4e86\u4e09\u5929\uff0c\u7528\u4e86\u56db\u4e94\u79cd\u65b9\u6cd5\uff0c\u7ec8\u4e8e\u7ed3\u675f\u7814\u7a76\u4e86\u3002\n\n**\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u7814\u7a76\u4e00\u4e0b\u90e8\u5206\u5206\u5427~~~**\n\n1.20\u5206\u7684\u89e3\u6cd5\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u662f\u54ea\u4e00\u6761\u8fb9\u53d8\u6210\u4e86\u201c\u866b\u6d1e\u201d\uff0c\u7136\u540e\u518d\u901a\u8fc7\u641c\u7d22\u5f97\u5230\u6240\u6709M\u6761\u8def\u7684\u503c\uff0c\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u7edf\u8ba1\u51fa\u7b54\u6848\u4e86\u3002\n\n\u4e8c\u8bdd\u4e0d\u8bf4\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nstruct bian{\n    int po,next,value;\n}edge[maxN*2];\nint n,m,ans=0x7fffffff,nans;\nint head[maxN],tot;\nint a[maxN],b[maxN],t[maxN];\nint u[maxN],v[maxN];\nint bf[maxN],qwq,dis[maxN];\nbool book[maxN];\n\ninline void insert(int x,int y,int z)\n{\n    edge[++tot].po=y;\n    edge[tot].next=head[x];\n    edge[tot].value=z;\n    head[x]=tot;\n}\n\nvoid bfs(int x,int target,int u,int v)\n{\n    int st=1;\n    bf[st]=x;\n    dis[x]=0;\n    book[x]=true;\n    while(st<=qwq){\n        int k=head[bf[st]];\n        while(k!=0){\n            int y=edge[k].po;\n            if(book[y]==false){\n                if((bf[st]==u&&y==v)||(bf[st]==v&&y==u))\n                    dis[y]=dis[bf[st]];\n                else\n                    dis[y]=dis[bf[st]]+edge[k].value;\n                bf[++qwq]=y;\n                book[y]=true;\n                if(y==target){\n                    //cout<<qwq<<endl;\n                    return;\n                }\n            }\n            k=edge[k].next;\n        }\n        st++;\n    }\n}\n\nint main()\n{\n    //freopen(\"transport.in\",\"r\",stdin);\n    //freopen(\"transport.out\",\"w\",stdout);\n    cin>>n>>m;\n    for(int i=1;i<=n-1;++i){\n        cin>>a[i]>>b[i]>>t[i];\n        insert(a[i],b[i],t[i]);\n        insert(b[i],a[i],t[i]);\n    }\n    for(int i=1;i<=m;++i)\n        cin>>u[i]>>v[i];\n    for(int i=1;i<=n-1;++i){\n        nans=0;\n        for(int j=1;j<=m;++j){\n            memset(bf,0,sizeof(bf));\n            memset(dis,0,sizeof(dis));\n            memset(book,false,sizeof(book));\n            qwq=1;\n            bfs(u[j],v[j],a[i],b[i]);\n            nans=max(nans,dis[v[j]]);\n        }\n        ans=min(ans,nans);\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```\n\n2.50\u5206\u7684\u505a\u6cd5\uff1a\n\n\u6211\u4eec\u7684\u601d\u60f3\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u770b\u90a3\u4e00\u6761\u8fb9\u53d8\u6210\u4e86\u866b\u6d1e\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u5b9e\u73b0\u7684\u65b9\u6cd5\u6709\u6240\u66f4\u65b0\u3002\u6211\u4eec\u7edf\u8ba1\u4e00\u4e2alca\u8868\u793a\u6240\u6c42\u4e24\u4e2a\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\u6211\u4eec\u5728\u6df1\u641c\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7edf\u8ba1\u51fa\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\uff0ca\u5230b\u7684\u8ddd\u79bb\u5c31\u662fdis[a]+dis[b]-dis[\u4e8c\u8005\u7684LCA]*2\n\n\u8fd9\u5f88\u5bb9\u6613\u61c2\u5427\uff1f\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nstruct bian{\n    int po,next,value;\n}edge[2*maxN];\nint n,m;\nint ans=0x7fffffff,nans;\nint a[maxN],b[maxN],t[maxN];\nint u[maxN],v[maxN];\nint head[maxN],tot;\nint dis[maxN],deep[maxN],lca[maxN],f[maxN][20];\nbool book[maxN];\n\ninline void insert(int x,int y,int z)\n{\n    edge[++tot].po=y;\n    edge[tot].next=head[x];\n    edge[tot].value=z;\n    head[x]=tot;\n}\n\ninline void dfs(int x,int fa)\n{\n    for(int j=1;(1<<j)<=deep[x];++j){\n        f[x][j]=f[f[x][j-1]][j-1];\n    }\n    int k=head[x];\n    while(k!=0){\n        int y=edge[k].po;\n        if(y!=fa){\n            int tim=edge[k].value;\n            dis[y]=dis[x]+tim;\n            deep[y]=deep[x]+1;\n            f[y][0]=x;\n            dfs(y,x);\n        }\n        k=edge[k].next;\n    }\n}\n\n\nint operate(int x,int y)\n{\n    if(y==0)\n        return x;\n    for(int i=19;i>=0;--i){\n        if((1<<i)<=y){\n            y-=(1<<i);\n            x=f[x][i];\n        }\n    }\n    return x;\n}\n\ninline int work(int x,int y)\n{\n    if(deep[x]<deep[y])\n        y=operate(y,deep[y]-deep[x]);\n    if(deep[x]>deep[y])\n        x=operate(x,deep[x]-deep[y]);\n    if(x==y)\n        return x;\n    for(int i=19;i>=0;--i){\n        if(f[x][i]!=f[y][i]){\n            x=f[x][i];\n            y=f[y][i];\n        }\n    }\n    return f[x][0];\n}\n\nint compd(int x,int y,int value)\n{\n    int res=dis[x];\n    if(deep[y]>deep[x])\n        return dis[x];\n    if(operate(x,deep[x]-deep[y])==y)\n        return dis[x]-value;\n    return dis[x];\n}\nint main()\n{\n    //freopen(\"transport.in\",\"r\",stdin);\n    //freopen(\"transport.out\",\"w\",stdout);\n    cin>>n>>m;\n    for(int i=1;i<=n-1;++i){\n        cin>>a[i]>>b[i]>>t[i];\n        insert(a[i],b[i],t[i]);\n        insert(b[i],a[i],t[i]);\n    }\n    for(int i=1;i<=m;++i)\n        cin>>u[i]>>v[i];\n    dfs(1,0);\n    for(int j=1;j<=m;++j)\n        lca[j]=work(u[j],v[j]);\n    for(int i=1;i<n;++i){\n        int x=((deep[a[i]]>deep[b[i]])?a[i]:b[i]); \n        nans=0;\n        for(int j=1;j<=m;++j){\n            nans=max(nans,compd(u[j],x,t[i])+compd(v[j],x,t[i])-2*compd(lca[j],x,t[i]));\n        }\n        ans=min(ans,nans);\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```\n\n80\u5206\u7684\u505a\u6cd5\uff1a\n\n\u6211\u4eec\u518d\u6765\u89c2\u5bdf\u4e00\u4e0b\u6570\u636e\uff1a\u53d1\u73b02\uff0c5~7\uff0c13~16\u8fd9\u51e0\u4e2a\u70b9\u7b2ci\u6761\u822a\u7ebf\u662f\u8fde\u63a5\u7b2ci\u4e2a\u4e0e\u7b2ci+1\u4e2a\u57ce\u5e02\u7684\uff0c\u6362\u4e00\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4e00\u6761\u94fe\u3002\n\n\u5bf9\u4e8e\u5927\u591a\u6570\u6c42\u6700\u5c0f\u503c\u6700\u5927\uff0c\u6216\u8005\u8bf4\u6700\u5927\u503c\u6700\u5c0f\u7684\u4e4b\u7c7b\u7684\u95ee\u9898\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u7528\u4e8c\u5206\u6765\u89e3\u51b3\uff08\u6b63\u89e3\u5c31\u662f\u4e8c\u5206\uff0c\u8fd9\u90fd\u662f\u540e\u8bdd\u4e86\uff09\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u6700\u540e\u7684\u7b54\u6848\uff0c\u7136\u540e\u770b\u90a3\u4e9b\u70b9\u7684\u8ddd\u79bb\u662f\u8d85\u8fc7\u8fd9\u4e2a\u503c\u7684\uff0c\u4e4b\u540e\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u7ef4\u62a4\u8868\u793a\u6700\u540eK\u4e2a\u6700\u5927\u7684\u503c\u7684\u70b9\u7684\u516c\u5171\u96c6\u5408\uff0c\u8fd9\u6837\u5b50\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5feb\u7684\u77e5\u9053\u54ea\u4e9b\u70b9\u662f\u8fd9\u4e9b\u8fb9\u5171\u6709\u7684\u4e86\u3002\u518d\u518d\u8fd9\u4e9b\u5171\u6709\u7684\u70b9\u4e4b\u4e2d\u627e\u51fa\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u770b\u6240\u6709\u8d85\u8fc7\u4e8c\u5206\u7684\u503c\u7684\u8fb9\u90fd\u51cf\u53bb\uff0c\u4e4b\u540e\u770b\u7b26\u4e0d\u7b26\u5408\u6761\u4ef6\u5c31\u884c\u4e86\uff0c\u6700\u540e\u5f97\u5230\u7684\u503c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<utility>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nstruct bian{\n    int po,next,value;\n}edge[2*maxN];\nint n,m,nans,ans=0x7fffffff;\nint a[maxN],b[maxN],t[maxN];\nint miss[maxN][3],f[maxN][2],dis[maxN];\nint map[maxN];\nint head[maxN],tot;\n\nvoid insert(int x,int y,int z)\n{\n    edge[++tot].po=y;\n    edge[tot].next=head[x];\n    edge[tot].value=z;\n    head[x]=tot;\n}\n\nvoid dfs(int x,int fa)\n{\n    int k=head[x];\n    while(k!=0){\n        int y=edge[k].po;\n        if(y!=fa){\n            dis[y]=dis[x]+edge[k].value;\n            dfs(y,x);\n        }\n        k=edge[k].next;\n    }\n}\n\nvoid work()\n{\n    for(int i=1;i<=m;++i){\n        int l=min(miss[i][0],miss[i][1]);\n        int r=max(miss[i][0],miss[i][1]);\n        miss[i][2]=dis[r]-dis[l];\n    }\n}\n\nvoid qsort(int l,int r)\n{\n    if(l>=r)\n        return;\n    int k=miss[rand()%(r-l+1)+l][2];\n    int i=l,j=r;\n    while(i<=j){\n        while(miss[i][2]<k)i++;\n        while(miss[j][2]>k)j--;\n        if(i<=j){\n            swap(miss[i],miss[j]);\n            i++;\n            j--;\n        }\n    }\n    qsort(l,j);\n    qsort(i,r);\n}\n\nvoid prepare()\n{\n    f[m][0]=miss[m][0];\n    f[m][1]=miss[m][1];\n    for(int i=m-1;i>=1;--i){\n        f[i][0]=max(f[i+1][0],miss[i][0]);\n        f[i][1]=min(f[i+1][1],miss[i][1]);\n    }\n}\n\nint dich(int l,int r,int target)\n{\n    while(l<=r){\n        int mid=(l+r)/2;\n        if(miss[mid][2]<=target)\n            l=mid+1;\n        else\n            r=mid-1;\n    }\n    return l;\n}\n\nbool check(int x)\n{\n    int nans=0;\n    int y=dich(1,m,x);\n    if(y==m+1)\n        return true;\n    if(f[y][0]>f[y][1])\n        return false; \n    for(int i=f[y][0];i<f[y][1];++i)\n        nans=max(nans,map[i]);\n    if(miss[m][2]-x<=nans)\n        return true;\n    else\n        return false;\n}\n\nint erfen(int l,int r)\n{\n    while(l<=r){\n        int mid=(l+r)/2;\n        if(check(mid))\n            r=mid-1;\n        else\n            l=mid+1;\n    }\n    return l;\n}\n\nint main()\n{\n    memset(map,127,sizeof(map));\n    cin>>n>>m;\n    for(int i=1;i<=n-1;++i){\n        cin>>a[i]>>b[i]>>t[i];\n        map[i]=t[i];\n        insert(a[i],b[i],t[i]);\n        insert(b[i],a[i],t[i]);\n    }\n    for(int i=1;i<=m;++i)\n        cin>>miss[i][0]>>miss[i][1];\n    dfs(1,0);\n    work();\n/*\n    for(int i=1;i<=m;++i)\n        cout<<miss[i][0]<<\" \"<<miss[i][1]<<\" \"<<miss[i][2]<<endl;\n*/\n    srand(10000000);\n    qsort(1,m);\n    prepare();\n    ans=erfen(0,miss[m][2]);\n    cout<<ans<<endl;\n    return 0;\n}\n```\n\u8fd9\u4e2a\u7a0b\u5e8f\u53ea\u670945\u5206\uff0c\u8fd8\u8981\u548c\u4e0a\u9762\u7684\u5408\u5e76\u5728\u4e00\u8d77\u3002\u3002\u3002\n\n\u6700\u540e\uff0c\u6765\u5230\u4e86\u6ee1\u5206\u505a\u6cd5\u4e86\uff1a\n\n\u7531\u4e0a\u9762\u7684\u505a\u6cd5\u5176\u5b9e\u4e5f\u5c31\u662f\u6b63\u89e3\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u5728\u6c42\u516c\u5171\u96c6\u5408\u7684\u65f6\u5019\u4ee5\u53ca\u6c42\u516c\u5171\u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c\u4f1a\u5f88\u9ebb\u70e6\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u7814\u7a76\u4e00\u4e0b\u600e\u4e48\u6765\u6c42\u4e24\u4e2a\u4e1c\u897f\u7684\u516c\u5171\u96c6\u5408\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u8fd9\u4e2a\u96c6\u5408\u6bcf\u4e00\u4e2a\u96c6\u5408\u90fd\u53ef\u4ee5\u5206\u6210\u4e24\u6761\u8fb9\uff0cmiss[i][0]~lca[i],lca[i]~miss[i][1],\u7136\u540e\u539f\u6765\u6c42\u597d\u7684\u516c\u5171\u96c6\u5408\u4e5f\u662f\u5982\u6b64\uff0c\u6240\u4ee5\uff0c\u6240\u6c42\u51fa\u6765\u7684\u65b0\u7684\u96c6\u5408\u4e5f\u5c31\u662f\u548c\u8fd96\u4e2a\u70b9\u6709\u7740\u5bc6\u5207\u7684\u5173\u7cfb\u3002\n\n\u6211\u4eec\u5224\u65adf[i+1][1],f[i+1][2]\u662f\u5426\u5728(miss[i][0],miss[i][1],lca[i])\u6784\u6210\u7684\u8def\u4e0a \uff0c\u5224\u65admiss[i][0],miss[i][1]\u662f\u5426\u5728(f[i+1][1],f[i+1][2],f[i+1][3])\u6784\u6210\u7684\u8def\u4e0a \uff0c\u4ee5\u53caLCA\u662f\u5426\u5728\u8fd9\u4e00\u6761\u8def\u4e0a\u9762\uff0c\u5c31\u884c\u4e86\uff08\u597d\u5427\uff0c\u662f\u6709\u4e00\u70b9\u8d39\u89e3\uff0c\u5728\u7a0b\u5e8f\u4e2d\u518d\u7406\u89e3\u4e00\u4e0b\u5427\uff09\n\n\u4e4b\u540e\uff0c\u6c42\u6700\u5927\u503c\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u6c42LCA\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7528\u5230\u4e86\u500d\u589e\uff0c\u540c\u6837\u7684\uff0c\u6211\u4eec\u7528\u4e00\u6837\u7684\u65b9\u5f0f\u6c42\u51fa\u6bcf\u4e00\u4e2a2\u7684\u6b21\u65b9\u500d\u7684\u6700\u5927\u503c\u51fa\u6765\uff0c\u8981\u7528\u7684\u65f6\u5019\u5c31\u548cLCA\u4e2d\u7684operate\uff08\u7a0b\u5e8f\u4e2d\u7684\uff09\u64cd\u4f5c\u4e00\u6837\u4e86\u3002\n\n\u5176\u4f59\u7684\uff0c\u5176\u5b9e\u90fd\u662f\u4e00\u6837\u7684\u4e86\uff0c\u8fd8\u6709\u8bb8\u8bb8\u591a\u591a\u7684\u7ec6\u8282\uff0c\u5728\u7a0b\u5e8f\u4e2d\u90fd\u4f53\u73b0\u51fa\u6765\u4e86\u3002\n\n\u4e8c\u8bdd\u4e0d\u8bf4\uff0c\u53cc\u624b\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<utility>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nstruct bian{\n    int po,next,value;\n}edge[maxN*2];\nint n,m;\nint head[maxN],tot;\nint a[maxN],b[maxN],t[maxN],miss[maxN][4];\nint dis[maxN],deep[maxN],f[maxN][4];\nint fa[maxN][20],rmq[maxN][20],lca[maxN];\nbool book[maxN];\n\ninline void insert(int x,int y,int z)\n{\n    edge[++tot].po=y;\n    edge[tot].next=head[x];\n    edge[tot].value=z;\n    head[x]=tot;\n}\n\ninline void dfs(int x,int father)\n{\n    int k=head[x];\n    while(k!=0){\n        int y=edge[k].po;\n        if(y!=father){\n            fa[y][0]=x;\n            rmq[y][0]=edge[k].value;\n            dis[y]=dis[x]+edge[k].value;\n            deep[y]=deep[x]+1;\n            dfs(y,x);\n        }\n        k=edge[k].next;\n    }\n}\n\ninline int operate(int x,int y)\n{\n    if(y==0)\n        return x;\n    for(int i=19;i>=0;--i){\n        if((1<<i)<=y){\n            y-=(1<<i);\n            x=fa[x][i];\n        }\n    }\n    return x;\n}\n\ninline int work(int x,int y)\n{\n    if(deep[x]<deep[y])\n        y=operate(y,deep[y]-deep[x]);\n    if(deep[x]>deep[y])\n        x=operate(x,deep[x]-deep[y]);\n    if(x==y)\n        return x;\n    for(int i=19;i>=0;--i){\n        if(fa[x][i]!=fa[y][i]){\n            x=fa[x][i];\n            y=fa[y][i];\n        }\n    }\n    return fa[x][0];\n}\n\nvoid prepare()\n{\n    for(int i=1;i<=19;++i){\n        for(int j=1;j<=n;++j){\n            fa[j][i]=fa[fa[j][i-1]][i-1];\n            rmq[j][i]=max(rmq[j][i-1],rmq[fa[j][i-1]][i-1]);\n        }\n    }\n    for(int i=1;i<=m;++i)\n        miss[i][2]=work(miss[i][0],miss[i][1]);\n    for(int i=1;i<=m;++i)\n        miss[i][3]=dis[miss[i][0]]+dis[miss[i][1]]-dis[miss[i][2]]*2;\n    \n}\n\nvoid qsort(int l,int r)\n{\n    if(l>=r)\n        return;\n    int k=miss[rand()%(r-l+1)+l][3];\n    int i=l,j=r;\n    while(i<=j){\n        while(miss[i][3]<k)i++;\n        while(miss[j][3]>k)j--;\n        if(i<=j){\n            swap(miss[i],miss[j]);\n            i++;\n            j--;\n        }\n    }\n    qsort(l,j);\n    qsort(i,r);\n}\n\ninline bool judge(int x,int y,int z)\n{\n    if(deep[x]>deep[y]||deep[x]<deep[z])\n        return false;\n    int p=operate(y,deep[y]-deep[x]);\n    return p==x; \n}\n\nvoid store(int x,int p)\n{\n    bool ok=true;\n    for(int i=1;i<=f[p][0];++i){\n        if(f[p][i]==x){\n            ok=false;\n            break;\n        }\n    }\t\n    if(ok){\n        f[p][0]++;\n        f[p][f[p][0]]=x;\n    }\n}\n\nvoid otherway(int x,int y)\n{\n    for(int i=0;i<=2;++i){\n        for(int j=1;j<=3;++j){\n            int now=work(miss[x][i],f[y][j]);\n            if((judge(now,miss[x][0],miss[x][2])||judge(now,miss[x][1],miss[x][2]))&&(judge(now,f[y][1],f[y][3])||judge(now,f[y][2],f[y][3]))){\n                store(now,x);\n            }\n        }\n    }\n}\n\nvoid ahead()\n{\n    f[m][0]=3;\n    f[m][1]=miss[m][0];\n    f[m][2]=miss[m][1];\n    f[m][3]=miss[m][2];\n    for(int i=m-1;i>=1;--i){\n        f[i][0]=0;\n        //\u5224\u65adf[i+1][1],f[i+1][2]\u662f\u5426\u5728(miss[i][0],miss[i][1],lca[i])\u6784\u6210\u7684\u8def\u4e0a \n        /*for(int j=1;j<=3;++j){\n            if(judge(f[i+1][j],miss[i][0],miss[i][2])||judge(f[i+1][j],miss[i][1],miss[i][2])){\n                store(f[i+1][j],i);\n            }\n        }\n        //\u5224\u65admiss[i][0],miss[i][1]\u662f\u5426\u5728(f[i+1][1],f[i+1][2],f[i+1][3])\u6784\u6210\u7684\u8def\u4e0a \n        for(int j=0;j<=2;++j){\n            if(judge(miss[i][j],f[i+1][1],f[i+1][3])||judge(miss[i][j],f[i+1][2],f[i+1][3])){\n                store(miss[i][j],i);\n            }\n        }*/ \n        otherway(i,i+1);\n        if(f[i][0]==3){\n            if(deep[f[i][1]]<deep[f[i][3]]){\n                swap(f[i][1],f[i][3]);\n            }\n            if(deep[f[i][2]]<deep[f[i][3]]){\n                swap(f[i][2],f[i][3]);\n            }\n            continue;\n        }\n        if(f[i][0]<2)\n            break;\n        f[i][3]=work(f[i][1],f[i][2]);\n    }\n}\n\nint dich(int l,int r,int target)\n{\n    while(l<=r){\n        int mid=(l+r)/2;\n        if(miss[mid][3]<=target)\n            l=mid+1;\n        else\n            r=mid-1;\n    }\n    return l;\n}\n\nint operate2(int x,int y)\n{\n    int ans=0;\n    for(int i=19;i>=0;--i){\n        if((1<<i)<=y){\n            y-=(1<<i);\n            ans=max(ans,rmq[x][i]);\n            x=fa[x][i];\n        }\n    }\n    return ans;\n}\n\nint findmax(int x,int y)\n{\n    if(x==y)\n        return 0;\n    int ans=operate2(x,deep[x]-deep[y]);\n    //cout<<x<<\" \"<<y<<\" \"<<ans<<endl;\n    return ans;\n}\n\nbool check(int x)\n{\n    int nans=0;\n    int y=dich(1,m,x);\n    //cout<<x<<\" \"<<y<<endl;\n    if(y==m+1)\n        return true;\n    if(f[y][0]<2)\n        return false;\n    nans=max(findmax(f[y][1],f[y][3]),findmax(f[y][2],f[y][3]));\n    \n    if(miss[m][3]-x<=nans)\n        return true;\n    else\n        return false;\n}\n\nint erfen(int l,int r)\n{\n    while(l<=r){\n        int mid=(l+r)/2;\n        if(check(mid))\n            r=mid-1;\n        else\n            l=mid+1;\n    }\n    return l;\n}\n\nint main()\n{\n    //freopen(\"testdata.in\",\"r\",stdin);\n    //freopen(\"transport1.out\",\"w\",stdout);\n    cin>>n>>m;\n    for(int i=1;i<=n-1;++i){\n        cin>>a[i]>>b[i]>>t[i];\n        insert(a[i],b[i],t[i]);\n        insert(b[i],a[i],t[i]);\n    }\n    for(int i=1;i<=m;++i)\n        cin>>miss[i][0]>>miss[i][1];\n    dfs(1,0);\n    prepare();\n    srand(100000000);\n    qsort(1,m);\n    ahead();\n    //for(int i=m;i>=1;--i)\n    //\tcout<<f[i][0]<<\" \"<<f[i][1]<<\" \"<<f[i][2]<<\" \"<<f[i][3]<<endl;\n    int ans=erfen(0,miss[m][3]);\n    cout<<ans<<endl;\n    return 0;\n}\n```\n\n\u547c\uff0c\u7ec8\u4e8e\u89e3\u51b3\u4e86\u4e00\u9053\u96be\u9898\uff0c\u5176\u5b9e\u6bcf\u4e00\u79cd\u65b9\u6cd5\u90fd\u6709\u81ea\u5df1\u7684\u5de7\u5999\u4e4b\u5904\uff0c\u5728\u8003\u573a\u4e0a\uff0c\u6211\u4eec\u8981\u6839\u636e\u6570\u636e\u5927\u5c0f\u7c7b\u578b\u6765\u5224\u65ad\u5982\u4f55\u5199\u90e8\u5206\u5206\u3002\u8fd9\u9053\u9898\u7684\u6700\u7ec8\u7b54\u6848\uff0c\u5176\u5b9e\u5176\u4f59\u7684\u5730\u65b9\u90fd\u6ca1\u6709\u4ec0\u4e48\u8003\u9a8c\u6280\u672f\u7684\u5730\u65b9\uff08\u5f53\u7136\uff0c\u9664\u4e86\u6c42\u51fa\u516c\u5171\u7684\u96c6\u5408\u8fd9\u4e00\u5757\u5730\u65b9\u6709\u70b9\u9ebb\u70e6\uff0c\u5176\u4f59\u7684\u90fd\u8fd8\u597d\uff09\u3002",
        "postTime": 1540478056,
        "uid": 112221,
        "name": "Nirvana_Xero",
        "ccfLevel": 0,
        "title": "P2680 \u8fd0\u8f93\u8ba1\u5212"
    },
    {
        "content": "\u5199\u4e00\u4e2a $M\\log N+M\\log (\\max dis)+N\\log (\\max dis)$ \u7684\u9898\u89e3,\u4e0d\u4f1a\u6811\u5256\u7684\u540c\u5b66\u53ef\u4ee5\u53f3\u8f6c\u4e86\u3002 \n\n\u5148\u7b80\u5316\u4e00\u4e0b\u9898\u9762:\n\n- \u7ed9\u4f60\u4e00\u9897\u6811\u3002\n- \u7ed9\u4f60 $M$ \u4e2a\u8be2\u95ee,\u6bcf\u4e2a\u8be2\u95ee\u6d89\u53ca $x->lca(x,y)->y$($x$ \u5230 $y$ \u7684\u8def\u5f84,\u5176\u4e2d\u8def\u5f84\u4e3a $dis_i$) \u7684\u8fb9\u6743\u603b\u548c\u3002\n- \u8ba9\u4f60\u6e05\u7a7a\u4e00\u6761\u6811\u8fb9\u7684\u6743\u503c,\u4f7f $M$ \u4e2a\u8be2\u95ee\u7684 $dis$ \u6700\u5927\u503c\u6700\u5c0f\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u9884\u5904\u7406\u51fa $dis$ (\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5728\u8def\u4e0a\u7684\u8ddd\u79bb)\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa $lca(x,y)$,\u4e14\u76f4\u63a5\u7528\u6811\u4e0a\u524d\u7f00\u548c\u3002\u56e0\u4e3a\u6570\u636e\u5f88\u53ef\u80fd\u4f7f\u4e00\u6761\u94fe,\u6240\u4ee5\u6211\u4eec\u7528\u6811\u5256\u6c42 $lca$ (\u8fd9\u6837\u5b50\u6811\u5256\u662f $O(1)$ \u7684)\u3002\u4f46\u662f\u56e0\u4e3a\u8fd9\u91cc\u662f\u4e0d\u662f\u70b9,\u662f\u8fb9,\u6211\u4eec\u7167\u4f8b**\u201c\u4ee5\u70b9\u4ee3\u8fb9\u201d**\u3002\u6240\u4ee5\u8def\u5f84\u5c31\u53d8\u4e3a\u4e86 $x->lca(x,y)_{son}->y$ (\u5c31\u662f\u4e0d\u5305\u542b $lca$ \u672c\u8eab)\u3002\n\n\u4f46\u662f\u6211\u4eec\u8fd8\u8981\u9884\u5904\u7406\u70b9\u6743\u554a! \u6240\u4ee5\u6211\u4eec\u5148 $Dfs_1$,\u6c42\u51fa\u6240\u6709\u7684 $dep$\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9,\u6bcf\u4e00\u6761\u8fb9 (\u94fe\u5f0f\u524d\u5411\u661f) \u5206\u522b\u8bb0\u5f55 $from_i$ \u548c $reach_i$ ,\u7136\u540e\u770b\u8fd9\u4e24\u4e2a\u7aef\u70b9\u8c01\u7684 $dep$ \u6df1,\u8c01\u5c31\u7ee7\u627f\u7740\u6761\u8fb9\u7684 $val_i$\u3002\u6811\u4e0a\u524d\u7f00\u548c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728 $Dfs_2$ \u91cc\u9762\u641e\u5566\u3002\n\n\u8003\u8651\u5230 $dis$ \u6700\u5927\u503c\u6700\u5c0f,\u6211\u4eec\u7528\u4e8c\u5206\u7b54\u6848\u3002\u600e\u4e48\u4e8c\u5206? \u6211\u4eec\u8bbe $l,r$ \u4e3a\u5de6\u53f3\u8fb9\u754c (\u521d\u59cb\u503c: $l=0,r=\\max dis$), $mid=\\frac{l+r}{2}$,$mid$ \u4e5f\u5c31\u662f\u6211\u4eec\u8bbe\u60f3\u7684\u7b54\u6848\u3002\u5982\u679c\u7b54\u6848\u5408\u6cd5,$r$ \u548c $ans=mid$ (\u627e\u66f4\u5c0f \\ \u4f18)\u7684\u7b54\u6848\u3002\u5426\u5219 $l=mid+1$,\u627e\u5408\u6cd5\u7b54\u6848\u3002\n\n\u73b0\u5728\u5c31\u53ea\u5269\u600e\u4e48\u5224\u65ad\u4e00\u4e2a\u7b54\u6848\u5408\u6cd5\u4e86\u3002\u6211\u4eec\u8dd1\u4e00\u904d\u5faa\u73af,\u628a\u6240\u6709 $dis_i>mid$ \u7684\u8be2\u95ee\u627e\u4e0b\u6765 (\u56e0\u4e3a\u8fd9\u4e9b $dis$ \u90fd\u662f\u5927\u4e8e $mid$ \u7684\u90a3 $mid$ \u4e0d\u80fd\u662f\u7b54\u6848\u554a),\u7136\u540e\u628a $l,r$ (\u5c31\u662f\u8be2\u95ee\u7ed9\u7684\u4e24\u4e2a\u7aef\u70b9,\u6ce8\u610f\u4e0d\u662f\u94fe\u5f0f\u524d\u5411\u661f) \u7684\u6811\u4e0a\u8def\u5f84\u5168\u90e8 $+1$\u3002\u6700\u540e\u8dd1\u5b8c\u4e86,\u6211\u4eec\u770b\u6bcf\u4e00\u6761\u6811\u8fb9,\u5982\u679c\u5b83\u4eec**\u89e6\u78b0\u5230\u4e86\u6bcf\u4e00\u6761\u8fb9\u4e14\u6743\u503c\u5927\u4e8e $\\max dis-mid$ \u7684\u8bdd** (\u4e5f\u5c31\u662f\u8fd9\u4e00\u6761\u8fb9\u88ab\u52a0\u4e86 $num$ \u6b21 ($num$ \u4e3a $dis$ \u8d85\u8fc7 $mid$ \u7684\u4e2a\u6570),**\u4e14\u5b83\u53ef\u4ee5\u4f7f\u6240\u6709\u8fb9\u90fd\u5c0f\u4e8e $mid$**),\u5408\u6cd5\u3002\u5982\u679c\u5168\u90e8\u90fd\u6ca1\u6709\u5408\u6cd5,\u5c31\u662f\u4e0d\u5408\u6cd5\u5566\u3002\n\n\u5982\u4f55\u8ba9\u6811\u4e0a\u8def\u5f84 $+1$ \u554a? \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u7528\u5230\u4e86\u6811\u5256\u5566,~~\u6240\u4ee5\u6211\u8fd8\u662f\u6eda\u8fc7\u53bb\u7528\u6811\u4e0a\u5dee\u5206\u5566~~\u3002\u4e0d\u4f1a\u6811\u4e0a\u5dee\u5206\u7684\u53ef\u4ee5\u53f3\u8f6c\u65e5\u62a5,\u8fd9\u91cc\u8bf4\u4e00\u4e0b,\u56e0\u4e3a\u662f\u201c\u4ee5\u70b9\u4ee3\u8fb9\u201d,\u6240\u4ee5 \u6211\u4eec\u53ea\u9700\u8981\u7ed9 $lca(x,y)-2$ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7b2c $13$ \u4e2a\u70b9\u5b8c\u5168\u6ca1\u6709\u5361\u5230\u6211 $Pascal$ \u7684\u4ee3\u7801\u5566\u3002\n\n```\n#13\nAC\n1242ms/41384K\n```\n\n```pascal\n// luogu-judger-enable-o2\nUses math;\n\nvar\n    cnt,size,dep,top,sum,val,father,son:array[-1..310000] of int64; \n// \u5206\u522b\u4e3a\u94fe\u5f0f\u524d\u5411\u661f\u7684 head,\u5b50\u6811\u5927\u5c0f,\u6df1\u5ea6,\u94fe\u9876,\u5dee\u5206/\u524d\u7f00\u548c(\u4e24\u4e2a\u7528\u5904\u54e6),\u70b9\u6743,\u7236\u4eb2,\u91cd\u513f\u5b50\n    next,reach,value,from:array[-1..650000] of longint;\n// \u90fd\u662f\u94fe\u5f0f\u524d\u5411\u661f\u7684, next,from(\u5de6\u7aef\u70b9),reach(\u53f3\u7aef\u70b9),value(\u8fb9\u6743/\u6811\u8fb9)\n    lca,dis,ll,rr:array[-1..650000] of int64;\n// \u8be2\u95ee\u7684 lca,dis,\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8be2\u95ee\u7684\u5de6\u7aef\u70b9 ll,\u53f3\u7aef\u70b9 rr\n    j,i,n,m,l,r,ans,mid,tmp,tot,root,maxdis:longint;\n    k,modn:int64;\n\nprocedure swap(var a,b:longint);var t:longint; begin t:=a; a:=b; b:=t; end;\n\nprocedure add(l,r,sum:longint); // \u52a0\u8fb9\nbegin\n    inc(tot);\n    value[tot]:=sum;\n    from[tot]:=l;\n    reach[tot]:=r;\n    next[tot]:=cnt[l];\n    cnt[l]:=tot;\nend;\n\nprocedure Dfs_1(x:longint); \n// Dfs1 \u9884\u5904\u7406 size,dep,father\nvar i:longint;\nbegin\n    size[x]:=1; i:=cnt[x]; size[0]:=-maxlongint div 843;\n    while i<>-1 do\n    begin\n        if dep[reach[i]]=0 then\n        begin\n            dep[reach[i]]:=dep[x]+1;\n            father[reach[i]]:=x;\n            Dfs_1(reach[i]); inc(size[x],size[reach[i]]);\n            if size[reach[i]]>size[son[x]] then son[x]:=reach[i];\n        end;\n        i:=next[i];\n    end;\nend;\n\nprocedure Dfs_2(x,centre:longint); \n// Dfs2 \u9884\u5904\u7406 sum(\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9:\u6811\u4e0a\u524d\u7f00\u548c),son \u91cd\u513f\u5b50,top \u94fe\u9876\nvar i:longint;\nbegin\n    sum[x]:=sum[father[x]]+val[x]; top[x]:=centre;\n    if son[x]=0 then exit; Dfs_2(son[x],centre);\n    i:=cnt[x];\n    while i<>-1 do\n    begin\n        if (reach[i]<>father[x])and(reach[i]<>son[x]) then Dfs_2(reach[i],reach[i]);\n        i:=next[i];\n    end;\nend;\n\nprocedure Dfs_3(x:longint);\n// \u8fd9\u4e2a\u662f\u7528\u6765\u641e\u6811\u4e0a\u5dee\u5206\u7684\u524d\u7f00\u548c\u7684 (\u4ece\u53f6\u5b50\u5230\u6839\u54e6)\nvar i:longint;\nbegin\n    i:=cnt[x];\n    while i<>-1 do\n    begin\n        if (reach[i]<>father[x]) then\n        begin\n                Dfs_3(reach[i]);\n                inc(sum[x],sum[reach[i]]);\n        end;\n        i:=next[i];\n    end;\nend;\n\nfunction Refer(x,y:longint):int64; // \u6811\u5256 LCA\nbegin\n    while top[x]<>top[y] do\n    begin\n        if dep[top[x]]<dep[top[y]] then y:=father[top[y]] else x:=father[top[x]];\n    end;\n    if dep[x]<dep[y] then exit(x) else exit(y);\nend;\n\nfunction Check(mid:longint):boolean; \nvar i,num:longint;\nbegin\n    fillchar(sum,sizeof(sum),0); maxdis:=-maxlongint div 843; num:=0;\n    for i:=1 to m do // \u626b\u6bcf\u4e00\u4e2a\u8be2\u95ee\n        if dis[i]>mid then\n        begin\n            inc(num);\n            inc(sum[ll[i]]); // \u6811\u4e0a\u5dee\u5206,\u7ed9\u6bcf\u4e00\u4e2a\u8def\u5f84 +1\n            inc(sum[rr[i]]);\n            dec(sum[lca[i]],2);\n            maxdis:=max(maxdis,dis[i]-mid); // \u6700\u5927\u7684\u8ddd\u79bb\n        end;\n    Dfs_3(root);\n    for i:=1 to n do if (sum[i]=num)and(val[i]>=maxdis) then exit(True); // \u627e\u5408\u6cd5\n    exit(False);\nend;\n\nprocedure Ready; // \u9884\u5904\u7406\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1); // \u8d4b\u503c -1\n    read(n,m); root:=1;\n    for i:=1 to n-1 do\n    begin\n        read(l,r,k);\n        add(l,r,k);\n        add(r,l,k);\n    end;\n\n    dep[root]:=1; father[root]:=1; Dfs_1(root);\n    for i:=1 to tot do if dep[from[i]]>dep[reach[i]] then val[from[i]]:=value[i] else val[reach[i]]:=value[i]; // \u8d4b\u4e88\u70b9\u6743\n\n    Dfs_2(root,root);\n    for i:=1 to m do // \u9884\u5904\u7406\u4fe1\u606f\n    begin\n        read(l,r);\n        lca[i]:=Refer(l,r);\n        dis[i]:=(sum[l]-sum[lca[i]])+(sum[r]-sum[lca[i]]);\n        ll[i]:=l; rr[i]:=r;\n        maxdis:=max(maxdis,dis[i]);\n    end;\nend;\n\nbegin\n    Ready; l:=0; r:=maxdis;\n    while l<r do // \u5982\u4e0a\u8ff0\n    begin\n        mid:=(l+r) >> 1;\n        if Check(mid) then\n        begin r:=mid; ans:=mid; end\n        else l:=mid+1;\n    end;\n    writeln(ans);\nend.\n```\n\n\u590d\u6742\u5ea6\u5206\u6790:\n\n- $Dfs_1$ \u548c $Dfs_2$ \u4e00\u5171 $O(N)$\u3002\n- \u9884\u5904\u7406 $lca$,\u4e00\u6b21 $O(\\log N)$,\u603b\u5171 $O(M \\log N)$\u3002\n- \u9884\u5904\u7406 $dis$,\u4e00\u6b21 $O(1)$,\u603b\u5171 $O(M)$\u3002\n- \u4e8c\u5206,\u4e00\u6b21 $Check$ \u662f $O(M+N+N)$,\u603b\u5171\u662f $(M+N+N) \\log \\max dis$\u3002\n\n\u5c31\u662f $O(N \\log \\max dis)$ \u5566\u3002\n\n\n\n\n\n",
        "postTime": 1540358392,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f **\u6811\u4e0a\u5dee\u5206** \u7684\u5178\u578b\u4f8b\u9898\uff0c\u6240\u8c13\u6811\u4e0a\u5dee\u5206\uff0c\u5c31\u662f\u5229\u7528\u7c7b\u4f3c\u524d\u7f00\u548c\u7684\u601d\u60f3\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u9700\u8981\u5feb\u901f\u6c42\u51fa\u82e5\u5e72\u6761\u8def\u5f84\u7684\u4ea4\u96c6\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u6bcf\u6761\u8fb9\u88ab\u7ecf\u8fc7\u4e86\u51e0\u6b21\u3002\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84 u->v\uff0c\u6211\u4eec\u9700\u8981\u628a\u70b9 u \u548c\u70b9 v \u7684\u6743\u503c +1\uff0c\u628a lca(u,v) \u7684\u6743\u503c -2\uff0c\u8fd9\u6837\u6bcf\u6761\u8fb9\u7ecf\u8fc7\u7684\u6b21\u6570\u5c31\u662f\u4ee5\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u548c\u3002\n\n\u4ee5\u4e0a\u5f88\u591a\u9898\u89e3\u90fd\u8bf4\u7684\u5341\u5206\u8be6\u7ec6\uff0c\u6211\u5199\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u662f\u60f3\u7ed9\u51fa\u4e00\u79cd\u80fd\u4f18\u5316\u5927\u91cf\u5e38\u6570\u7684\u65b9\u6cd5\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6211\u4eec\u9700\u8981\u904d\u5386\u6bcf\u4e2a\u70b9\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8fb9\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981\u7528 $DFS$\uff0c\u4f46\u662f $DFS$ \u5e38\u6570\u6781\u5927\uff0c\u6211\u4eec\u80fd\u4e0d\u80fd\u4e0d\u7528\u9012\u5f52\u8c03\u7528\u5462\uff1f\n\n\u7b54\u6848\u662f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 $\u5e8fDFS\u5e8f$ \u6765\u4ee3\u66ff $DFS$ \u7684\u8fc7\u7a0b\uff0c\u53ea\u9700\u8981\u5728\u5f00\u59cb\u65f6\u9884\u5904\u7406\u51fa\u51fa\u6808\u5e8f\uff0c\u7136\u540e\u7528 $for$ \u5faa\u73af\u5c31\u53ef\u4ee5\u8fbe\u5230\u904d\u5386\u6574\u68f5\u6811\u7684\u6548\u679c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```c++\ninline void solve(){\n\tmaxedge = 0;\n\tfor (int i = 1; i <= n; ++i){\n\t\tint u = DFSpath[i];\n\t\tif (tag[u] == num) maxedge = max(maxedge, sum[u][0]);\n\t\ttag[fa[u][0]] += tag[u];\n\t}\n}\n//sum[u][0]\u8868\u793a\u70b9 u \u7236\u4eb2\u5230\u5b83\u7684\u8fb9\n//fa[u][0]\u8868\u793a\u70b9 u \u7684\u7236\u4eb2\n//fa \u548c sum \u90fd\u53ef\u4ee5\u901a\u8fc7 DFS \u6c42\u51fa\n```\n\n",
        "postTime": 1538784218,
        "uid": 31635,
        "name": "yingjz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u65b0\u65b9\u6cd5\n\n>\u8d2a\u5fc3\uff0c\u628a\u8def\u5f84\u6309\u4ece\u5927\u5230\u5c0f\u6392\u4e2a\u5e8f\u3002\n\n>\u6613\u8bc1\u660e\uff0c\u5982\u679c\u6ca1\u6709\u51cf\u5c11\u8f83\u5927\u7684\u8def\u7ebf\uff0c\u51cf\u5c11\u518d\u591a\u5c0f\u8def\u7ebf\u90fd\u662f\u6ca1\u7528\u7684\n\n>\u6240\u4ee5\uff0c\u4ece\u6700\u5927\u7684\u8def\u7ebf\u5f00\u59cb\uff0c\u6bcf\u6b21\u6c42\u4e00\u904d\u91cd\u53e0\u90e8\u5206\uff0c\u518dmax(\u6700\u5927\u8def\u7ebf - \u91cd\u53e0\u90e8\u5206\u6700\u5927\u8fb9\uff0c\u672a\u7eb3\u5165\u8003\u8651\u7684\u6700\u5927\u8def\u7ebf)\u6c42\u51fa\u7b54\u6848\uff0c\u5728\u6240\u6709\u7b54\u6848\u4e2d\u53d6\u4e2amax\u5c31\u662f\u6700\u7ec8\u89e3\n\n\u4e0a\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define N 300010\n#define lgN 20\nusing namespace std;\nint n, q;\nstruct EDGE{\n    int u, v, d;\n    int Next;\n}G[N << 1];\nint tot = 0;\nint Head[N];\ninline void Add(int u, int v, int d)\n{\n    ++ tot;\n    G[tot].u = u;\n    G[tot].v = v;\n    G[tot].d = d;\n    G[tot].Next = Head[u];\n    Head[u] = tot;\n}\nint Dep[N];\nint BZ[N][lgN];\nint Sum[N][lgN];\nint Max[N][lgN];\ninline void DFS(int u, int fa)\n{\n    BZ[u][0] = fa;\n    Dep[u] = Dep[fa] + 1;\n    for(int i = Head[u]; i; i = G[i].Next)\n    {\n        int v = G[i].v;\n        if(v == fa)\n            continue;\n        DFS(v, u);\n        Sum[v][0] = G[i].d;\n        Max[v][0] = G[i].d;\n    }\n}\ninline void Cal()\n{\n    for(int i = 1; i < lgN; ++ i)\n        for(int j = 1; j <= n; ++ j)\n        {\n            BZ[j][i]= BZ[BZ[j][i - 1]][i - 1];\n            Sum[j][i] = Sum[j][i - 1] + Sum[BZ[j][i - 1]][i - 1];\n            Max[j][i] = max(Max[j][i - 1], Max[BZ[j][i - 1]][i - 1]);\n        }\n}\ninline int LCA(int u, int v)\n{\n    if(Dep[u] < Dep[v])\n        swap(u, v);\n    for(int i = lgN - 1; i >= 0; -- i)\n        if(Dep[BZ[u][i]] >= Dep[v])\n            u = BZ[u][i];\n    if(u == v)\n        return u;\n    for(int i = lgN - 1; i >= 0; -- i)\n        if(BZ[u][i] != BZ[v][i])\n        {\n            u = BZ[u][i];\n            v = BZ[v][i];\n        }\n    return BZ[u][0];\n}\ninline int Dis(int u, int v)\n{\n    int ans = 0;\n    if(Dep[u] < Dep[v])\n        swap(u, v);\n    for(int i = lgN - 1; i >= 0; -- i)\n        if(Dep[BZ[u][i]] >= Dep[v])\n        {\n            ans += Sum[u][i];\n            u = BZ[u][i];\n        }\n    if(u == v)\n        return ans;\n    for(int i = lgN - 1; i >= 0; -- i)\n        if(BZ[u][i] != BZ[v][i])\n        {\n            ans += Sum[u][i] + Sum[v][i];\n            u = BZ[u][i];\n            v = BZ[v][i];\n        }\n    return ans + Sum[u][0] + Sum[v][0];\n}\ninline int Qmax(int u, int v)\n{\n    int ans = 0;\n    if(Dep[u] < Dep[v])\n        swap(u, v);\n    for(int i = lgN - 1; i >= 0; -- i)\n        if(Dep[BZ[u][i]] >= Dep[v])\n        {\n            ans = max(ans, Max[u][i]);\n            u = BZ[u][i];\n        }\n    if(u == v)\n        return ans;\n    for(int i = lgN - 1; i >= 0; -- i)\n        if(BZ[u][i] != BZ[v][i])\n        {\n            ans = max(ans, max(Max[u][i], Max[v][i]));\n            u = BZ[u][i];\n            v = BZ[v][i];\n        }\n    return max(ans, max(Max[u][0], Max[v][0]));\n}\nstruct R{\n    int u, v, dis;\n}A[N];\ninline bool cmp(R a, R b)\n{\n    return a.dis > b.dis;\n}\nstruct route{\n    int u, v;\n};\ninline route cd(route a, route b)\n{\n    int u1 = a.u, v1 = a.v, lca = LCA(u1, v1);\n    int u2 = b.u, v2 = b.v;\n    int newu = 0, newv = 0;\n    if(Dep[LCA(u1, u2)] > Dep[lca])\n        newu = LCA(u1, u2);\n    else if(Dep[LCA(v1, u2)] > Dep[lca])\n        newu = LCA(v1, u2);\n    if(Dep[LCA(v1, v2)] > Dep[lca])\n        newv = LCA(v1, v2);\n    else if(Dep[LCA(v2, u1)] > Dep[lca])\n        newv = LCA(v2, u1);\n    route newroute;\n    newroute.u = newu;\n    newroute.v = newv;\n    return newroute;\n}\nint main()\n{\n    scanf(\"%d%d\", &n, &q);\n    for(int i = 1; i < n; ++ i)\n    {\n        int u, v, d;\n        scanf(\"%d%d%d\", &u, &v, &d);\n        Add(u, v, d);\n        Add(v, u, d);\n    }\n    DFS(1, 0);\n    Cal();\n    for(int i = 1; i <= q; ++ i)\n    {\n        scanf(\"%d%d\", &A[i].u, &A[i].v);\n        A[i].dis = Dis(A[i].u, A[i].v);\n    }\n    sort(A + 1, A + q + 1, cmp);\n    route d;\n    d.u = A[1].u, d.v = A[1].v;\n    int ans = max(A[1].dis - Qmax(A[1].u, A[1].v), A[2].dis);\n    for(int i = 2; i <= q; ++ i)\n    {\n        if(d.u == d.v)\n            break;\n        route x;\n        x.u = A[i].u, x.v = A[i].v;\n        d = cd(d, x);\n        ans = min(ans, max(A[1].dis - Qmax(d.u, d.v), A[i + 1].dis));\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n```",
        "postTime": 1538574377,
        "uid": 29519,
        "name": "qianfujia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "#### \u53d1\u73b0\u4e0b\u9762\u4e00\u773c\u626b\u8fc7\u53bb\u6ca1\u6709\u6811\u5256\u7684\u6837\u5b50~~\uff08\u4e5f\u53ef\u80fd\u662f\u6211\u778e\u4e86\uff09~~\n\n\u4e8e\u662f\u8d21\u732e\u4e00\u7bc7\u6811\u5256\u9898\u89e3\n\n## **\u7b97\u6cd5\uff1a\u6811\u5256lca \u3001\u4e8c\u5206 \u3001 \u6811\u4e0a\u5dee\u5206**\n\n\u597d\u4e86\u8fdb\u5165\u6b63\u6587\uff08\u8981\u70b9\u5206\u6790\uff09\uff1a\n\n1. n\u4e2a\u8282\u70b9, n-1\u6761\u8fb9,\u4fdd\u8bc1\u8fde\u901a,\u4e00\u770b\u5c31\u77e5\u9053\u662f\u4e00\u68f5\u6811,\u518d\u770b\u770b\u8fd9\u662f\u9053\u7d2b\u9898,\u53c8\u770b\u4e86\u4e00\u4e0b\u662f\u6c42\u4ec0\u4e48\u4e24\u70b9\u8ddd\u79bb\u7684,\u90a3\u4e48\u516b\u6210\u5c31\u80fd\u4f30\u8ba1\u51fa\u662flca\u7684\u9898\u4e86,\u7136\u540e\u518d\u60f3\u60f3\u8fd9\u9053\u9898\u53ef\u80fd\u7528\u500d\u589e\u66f4\u8212\u670d,\u4f46\u662f\u60f3\u60f3\u6811\u5256\u6253\u7740\u4e5f\u633a\u987a\u624b\u4e86\u90a3\u4e48\u4e5f\u53ef\u4ee5\u6765\u4e2a\u6811\u5256\n\n2. \u6c42\u4e24\u70b9\u95f4\u8ddd\u79bb\u5e94\u8be5\u8981\u7528\u4e00\u4e0b\u6811\u7684\u67d0\u79cd\u6027\u8d28\uff1a dis[i,j]=dis[1,i]+dis[1,j]-2*dis[1,lca(i,j)]\n\n3. \u8fd9\u9053\u9898\u4e2d\u8981\u6c42\u8f93\u51fa\u7684\u5c31\u662f\u4e00\u4e2a\u6700\u77ed\u65f6\u95f4,\u518d\u52a0\u4e0a\u65f6\u95f4\u7684\u5355\u8c03\u6027\u53ef\u4ee5\u975e\u5e38\u663e\u7136\u7684\u770b\u51fa\u7b54\u6848\u662f\u53ef\u4ee5\u4e8c\u5206\u7684\n\n4. \u4e8c\u5206\u7684\u65f6\u5019\u5148\u627e\u51fa m \u6761\u8def\u5f84\u4e2d\u8ddd\u79bb\u5927\u4e8e mid \u7684\u6240\u6709\u8def\u5f84,\u7136\u540e\u627e\u5230\u4ed6\u4eec\u7684\u6700\u957f\u516c\u5171\u8fb9(\u6309\u7167\u9898\u610f\u53ea\u80fd\u6709\u4e00\u6761\u8fb9\u53ef\u4ee5\u6539\u6210\u866b\u6d1e), \u518d\u7528\u6700\u957f\u7684\u8def\u5f84\u51cf\u53bb\u6700\u957f\u516c\u5171\u8fb9,\u5982\u679c\u7ed3\u679c\u5927\u4e8e mid \u5219\u4ee3\u8868\u5728 mid \u65f6\u95f4\u5185\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\n\n\u4f46\u662f\u8fd9\u91cc\u8981\u89e3\u91ca\u4e00\u4e0b4\uff1a\u4e3a\u4ec0\u4e48\u5728\u627e\u51fa\u8def\u5f84\u957f\u5ea6\u5927\u4e8e mid \u7684\u8def\u5f84\u540e\u8981\u627e\u5230\u4ed6\u4eec\u7684\u6700\u957f _ **\u516c\u5171**_  \u8fb9\uff1f \u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u662f\u516c\u5171\u7684\uff1f\n\u5443... \u8fd9\u4e0d\u662f\u5f88\u663e\u7136\u5417\uff1f\u5982\u679c\u627e\u51fa\u7684\u6700\u957f\u8fb9\u4e0d\u662f\u516c\u5171\u7684,\u90a3\u4e48\u5fc5\u7136\u6709\u4e00\u6761\u8ddd\u79bb\u5927\u4e8e mid \u7684\u8def\u5f84\u6ca1\u6709\u88ab\u7f29\u77ed\u8fc7,\u90a3\u4e48\u4e5f\u5c31\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4e86\n\n# \u7136\u540e\u4e0a\u4ee3\u7801\n\n```cpp\n//by Judge\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\n#define max(a,b) ((a)>(b)?(a):(b))\n#define rint register int\nusing namespace std;\nconst int M=3e5+100;\nconst int inf=1e9;\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0';\n\treturn x*f;\n}\nint n,m,tim,pat;\nint head[M],dis[M],cost[M],dp[M],vis[M];\n// head\u4f60\u61c2\u7684  dis[i]\u6307\u4ece\u6839\u5230\u8282\u70b9 i \u7684\u8def\u7a0b, cost[i] \u6307\u8282\u70b9 i \u7684\u7236\u8282\u70b9\u5230\u8fbe\u5b83\u7684\u8def\u7a0b , dp\u7528\u4e8e\u6811\u4e0a\u5dee\u5206, vis\u7528\u4e8echeck\u8bb0\u5fc6\u5316\u4f18\u5316 \nint f[M],son[M],siz[M],dep[M],top[M],dfn[M],wrh[M];\n// f \u3001son \u3001siz \u4e0d\u89e3\u91ca , dfn[i] \u8282\u70b9 i \u7684\u65f6\u95f4\u6233 dep[i] wrh[i]\u6307\u5411\u65f6\u95f4\u6233\u4e3a i \u7684\u8282\u70b9\u7684cost,\u53ef\u4e0edfn\u4e92\u9006 top\u4e0d\u89e3\u91ca\u4f60\u61c2\u7684 \nstruct Edge{\n\tint to,val,next;\n}e[M<<1];\nstruct query{  //\u8bb0\u5f55\u8be2\u95ee,\u4e4b\u540e\u8981\u6309 len \u7528 sort \u6392\u5e8f\u4fdd\u8bc1 query \u7684\u5355\u8c03\u9012\u51cf \n\tint x,y,len;\n}q[M];\ninline void add(int u,int v,int c){\n\te[++pat].to=v, e[pat].val=c;\n\te[pat].next=head[u], head[u]=pat;\n}\ninline bool cmp(query x, query y)\n{ return x.len > y.len; }\nvoid dfs(int u){\n\tsiz[u]=1;\n\tfor(rint i=head[u];i;i=e[i].next){\n\t\trint v=e[i].to,w=e[i].val;\n\t\tif(v!=f[u]){\n\t\t\tdep[v]=dep[u]+1, f[v]=u,dis[v]=dis[u]+w;\n\t\t\tcost[v]=w, dfs(v), siz[u]+=siz[v];\n\t\t\tif(siz[v]>siz[son[u]]) son[u]=v;\n\t\t}\n\t}\n}\nvoid dfs_(int u){\n\tdfn[u]=++tim,wrh[tim]=cost[u];\n\tif(!top[u]) top[u]=u;\n\tif(son[u]) top[son[u]]=top[u], dfs_(son[u]);\n\tfor(rint i=head[u];i;i=e[i].next){\n\t\trint v=e[i].to;\n\t\tif(v!=f[u] && v!=son[u]) dfs_(v);\n\t}\n}\ninline int LCA(int u,int v){\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u , v);\n\t\tu=f[top[u]];\n\t}\n\treturn dep[u]<dep[v]? u:v;\n}\ninline void work(int u,int v){ //\u5dee\u5206\u90e8\u5206 \n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u , v);\n\t\t++dp[dfn[top[u]]],--dp[dfn[u]+1];\n\t\tu=f[top[u]];\n\t}\n\tif(u==v) return ;\n\tif(dep[u]>dep[v]) swap(u , v); //\u8fd9\u91cc\u4e0d\u7528\u89e3\u91ca\u5427? \n\t++dp[dfn[u]+1], --dp[dfn[v]+1]; //\u6ce8\u610f\u662f dfn[u]+1,\u907f\u514d\u5dee\u5206\u65f6\u7b97\u5165 u \u548c v \u7684 LCA \u7684 cost\u503c \n}\ninline int check(int tim){\n\tint num=0;\n\twhile(q[num].len>tim) ++num;\n\tif(vis[num]) return vis[num];\n\tfor(int i=1;i<=n;++i) dp[i]=0; \n\tfor(rint i=0;i<num;++i)\n\t\twork(q[i].x , q[i].y);\n\tint tot=0,mx=0;\n\tfor(rint i=1;i<=n;++i){\n\t\ttot+=dp[i];\n\t\tif(tot==num) mx=max(mx , wrh[i]);\n\t}\n\treturn vis[num]=mx;\n}\nint main(){\n\tn=read(), m=read();\n\tfor(rint i=1;i<n;++i){\n\t\trint x=read(), y=read(), w=read();\n\t\tadd(x , y , w), add(y , x , w);\n\t}\n\tdep[1]=1, dfs(1), dfs_(1);\n\tfor(rint i=0;i<m;++i){\n\t\tint x=read(),y=read(); q[i].x=x, q[i].y=y;\n\t\tq[i].len=dis[x]+dis[y]-(dis[LCA(x,y)]<<1);\n        //from \u8981\u70b92\n\t}\n\tsort(q , q+m , cmp); //\u4fdd\u8bc1 m \u6761\u8def\u5f84\u5355\u8c03\u9012\u51cf\n\trint L=0, R=q[0].len;\n\twhile(L<=R){ //\u4e8c\u5206\u7b54\u6848\u4e0d\u89e3\u91ca\n\t\tint mid=L+R>>1;\n\t\tif(q[0].len-check(mid)>mid) L=mid+1;\n\t\telse R=mid-1;\n\t}\n\tprintf(\"%d\\n\",L);\n\treturn 0;\n}\n//from Judge\n```\n\n\n\u53d1\u73b0\u597d\u4e45\u90fd\u6ca1\u76ae\u4e86 `_(:\u0437\u300d\u2220)_`\n\n\u30fe(^o^)Bye~Bye~ ",
        "postTime": 1530843834,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u636e\u8bf4\u8fd9\u9053\u9898\u662f\u6811\u5256\uff0c\u4e8e\u662f\u5c31\u6765\u770b\u4e86\u4e00\u4e0b\u3002\u3002\u3002\u3002\u3002\n\n\u4e00\u5f00\u59cb\u4ee5\u4e3a\u4e0d\u540c\u7684\u8ba2\u5355\u4e0d\u80fd\u540c\u65f6\u51fa\u53d1\uff0c\u4e8e\u662f\u6309\u6811\u5256\u6253\u5230\u4e00\u534a\uff0c\u7ed3\u679c\u53d1\u73b0\u662f\u4e00\u8d77\u8d70\u7684\uff0c\u4e0d\u9700\u8981\u66f4\u65b0\uff0c\u4f3c\u4e4e\u5c31\u4e0d\u7528\u6811\u5256\u52a0\u7ebf\u6bb5\u6811\u4e86\uff0c\u8fd9\u867d\u7136\u8017\u8d39\u4e86\u672c\u849f\u84bb\u5f88\u957f\u65f6\u95f4\uff0c\u4f46\u544a\u8bc9\u4e86\u6211\u8981\uff1a\u4ed4\u7ec6\u5ba1\u9898\uff0c\u4ed4\u7ec6\u5ba1\u9898\uff0c\u4ed4\u7ec6\u5ba1\u9898\u3002\n\n\u6700\u540e\u4ed4\u7ec6\u60f3\u60f3\uff0c\u53d1\u73b0\u6570\u5256\u9876\u591a\u53ef\u4ee5\u7b97\u662f\u8f85\u52a9\u7b97\u6cd5\u3002\u56e0\u4e3a\u8fd9\u9053\u9898\u4e0d\u9700\u8981\u66f4\u65b0\uff0c\u7528\u500d\u589eLCA\u540c\u6837\u80fd\u5f97\u51fa\u7ed3\u679c\u3002\n\n\u6240\u4ee5\u679c\u65ad\u653e\u5f03\u6570\u5256\u8fd9\u79cd\u65b9\u6cd5\uff08\u5982\u679c\u8981\u7ec3\u6811\u5256\u4e5f\u662f\u53ef\u4ee5\u6253\u7684\uff09\n\n\u65e2\u7136\u6bcf\u4e00\u4e2a\u8ba2\u5355\u7684\u65f6\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u4ece\u5927\u7684\u51e0\u4e2a\u8ba2\u5355\u4e2d\u627e\u51fa\u6700\u957f\u516c\u5171\u8fb9\uff0c\u7136\u540e\u5220\u53bb\u5c31\u884c\u4e86\u3002\n\n\u8bf4\u8d77\u6765\u5bb9\u6613\uff0c\u4f46\u662f\u201c\u5927\u7684\u201d\u8981\u600e\u4e48\u5b9a\u4e49\u5462\uff1f\u8fd9\u5c31\u9700\u8981\u7528\u4e8c\u5206\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848t\uff0c\u7136\u540e\u7528\u51fd\u6570\u68c0\u67e5\u5c31\u884c\u4e86\u3002\u8be5\u9898\u76ee\u7684\u6570\u636e\u7684\u5355\u8c03\u6027\u4fdd\u8bc1\u4e86\u4e8c\u5206\u662f\u6b63\u786e\u89e3\u6cd5\u3002\n\n\u8fd9\u91cc\u505a\u597d\u4e4b\u540e\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u5982\u4f55\u627e\u51fa\u6700\u957f\u7684\u91cd\u590d\u8fb9\uff0c\u672c\u849f\u84bb\u82e6\u82e6\u60f3\u4e0d\u51fa\u6765\uff0c\u53ea\u597d\u5bfb\u6c42\u5927\u4f6c\u9898\u89e3\u7684\u5e2e\u52a9\u3002\u8fd9\u91cc\u7528\u4e0a\u4e00\u4e2a\u6811\u4e0a\u524d\u7f00\u548c\uff0c\u7528\u4e00\u904dO(n+m)\u7684\u65b9\u6cd5\u5c31\u627e\u51fa\u6765\u4e86\uff0c\u5177\u4f53\u53ef\u89c1\u8fde\u63a5[xxxxx](https://blog.sengxian.com/solutions/noip-2015-day2)\n\u63a5\u4e0b\u6765\u5206\u6b65\u4e0a\u4ee3\u7801+\u89e3\u91ca+\u5b8c\u6574\u4ee3\u7801\uff08\u6700\u540e\u9762\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\nusing namespace std;\nint g[300010];\nint e[600010];\nint val[600010];\nint next[600010];//\u94fe\u5f0f\u524d\u5411\u661f\n\nint fa[300010][21];//\u500d\u589e\u7236\u4eb2\nint tt[300010][21];//\u5230\u500d\u589e\u7236\u4eb2\u6240\u7528\u65f6\u95f4\nint lca[300010];//LCA\n\nint fm[300010];//\u7b2ci\u4e2a\u8ba2\u5355\u7684\u8d77\u70b9\nint to[300010];//\u7ec8\u70b9\nint ti[300010];//\u7528\u65f6\n\nint maxt;//\u6700\u957f\u7528\u65f6\uff0c\u4e8c\u5206\u7684\u4e0a\u9650\nint mint=0x7fffffff;\nint de[300010];//\u6df1\u5ea6\nint n,m;\nint vi[300010];//\u6811\u4e0a\u524d\u7f00\u548c\nint num=0;\n```\n\u5b9a\u4e49\u7684\u4e1c\u897f\u6709\u70b9\u591a\uff0c\u6bd4\u8f83\u4e71\uff0c\u672c\u849f\u84bb\u4e60\u60ef\u4e0d\u592a\u597d\u8bf7\u89c1\u8c05\u3002\n\n\u7136\u540e\u662f\u4e3b\u7a0b\u5e8f\u8bfb\u5199\n```cpp\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;i++){\n        int f,t,tim;\n        scanf(\"%d%d%d\",&f,&t,&tim);\n        e[i*2-1]=t;\n        next[i*2-1]=g[f];\n        g[f]=i*2-1;\n        val[i*2-1]=tim;\n        e[i*2]=f;\n        next[i*2]=g[t];\n        g[t]=i*2;\n        val[i*2]=tim;//\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u6bd4\u8f83\u4e71\uff08\u80fd\u7528\u5c31\u884c\uff09\n    }\n    tt[1][0]=0;\n    fa[1][0]=1;\n    dfs(1,1);//dfs\u5efa\u6811\uff08\u6b64\u5904\u53ef\u4f18\u5316\uff0c\u53ef\u5728\u7b2c\u4e00\u6b21dfs\u662f\u8bb0\u5f55\u4e0b\u8bbf\u95ee\u987a\u5e8f\u7f16\u53f7\uff0c\u4e4b\u540e\u7684dfs2\u53ef\u4ee5\u7528\u5faa\u73af\u89e3\u51b3\uff09\n    LCAY();//LCA\n    for(int i=1;i<=m;i++){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        LCA(i,x,y);\n        maxt=max(maxt,ti[i]);\n    }\n    printf(\"%d\",solve());\n}\n```\n\u7b2c\u4e00\u6b21dfs\u548cLCA\u53ca\u500d\u589e\u9884\u5904\u7406\u653e\u4e00\u8d77\n```cpp\nint ll(int x){\n    return (int)(log(x)/log(2));\n}\n\nvoid dfs(int u,int d){\n    de[u]=d;\n    for(int i=g[u];i!=0;i=next[i]){\n        int v=e[i];\n        if(v==fa[u][0]) continue;\n        fa[v][0]=u;\n        tt[v][0]=val[i];\n        dfs(v,d+1);\n    }\n}\n\nvoid LCAY(){//LCA\u500d\u589e\u9884\u5904\u7406\n    for(int l=1;(1<<l)<=n;l++){\n        for(int i=1;i<=n;i++){\n            fa[i][l]=fa[fa[i][l-1]][l-1];\n            tt[i][l]=tt[i][l-1]+tt[fa[i][l-1]][l-1];\n        }\n    }\n}\n\nvoid LCA(int nu,int x,int y){\n    fm[nu]=x;\n    to[nu]=y;\n    if(de[x]>de[y]){\n        int tmp=x;\n        x=y;\n        y=tmp;\n    }\n    for(int i=ll(de[y]-de[x]);i>=0;i--){\n        if(de[x]+(1<<i)<=de[y]){\n            ti[nu]+=tt[y][i];\n            y=fa[y][i];\n        }\n    }\n    if(x==y){\n        lca[nu]=x;\n        return;\n    }\n    for(int i=ll(de[x]);i>=0;i--){\n        if(fa[x][i]!=fa[y][i]){\n            ti[nu]+=tt[x][i]+tt[y][i];\n            x=fa[x][i];\n            y=fa[y][i];\n        }\n    }\n    ti[nu]+=tt[x][0]+tt[y][0];\n    lca[nu]=fa[x][0];\n}\n\n```\n\u7136\u540e\u662fsolve\u51fd\u6570\u4e8c\u5206\n```cpp\nint solve(){\n    int st=0,et=maxt;\n    while(st!=et){\n        int mid=(st+et)>>1;\n        if(check(mid)){\n            et=mid;\n        }\n        else{\n            st=mid+1;\n        }\n    }\n    return st;\n}\n```\ncheck\u51fd\u6570\u68c0\u67e5\n```cpp\nbool check(int t){\n    memset(vi,0,sizeof(vi));\n    num=0;\n    for(int i=1;i<=m;i++){\n        if(t<ti[i]){\n            num++;\n            vi[fm[i]]++;\n            vi[to[i]]++;\n            vi[lca[i]]-=2;\n        }\n    }\n    int mt=dfs2(1);//mt\u5373\u91cd\u590d\u6700\u957f\u8fb9\n    if(maxt-mt<=t) return true;\n    return false;\n}\n\n```\ndfs2\uff0c\u82e5\u7b2c\u4e00\u6b21dfs\u65f6\u6709\u6539\u53d8\u5e8f\u53f7\uff0c\u53ef\u7528\u5faa\u73af\u4ee3\u66ff\n```cpp\nint dfs2(int u){\n    int mt=0;\n    for(int i=g[u];i!=0;i=next[i]){\n        int v=e[i];\n        if(v==fa[u][0]) continue;\n        mt=max(mt,dfs2(v));\n        vi[u]+=vi[v];\n    }\n    if(vi[u]==num){\n        mt=max(mt,tt[u][0]);\n    }\n    return mt;\n}\n```\nok\u5230\u6b64\u4ee3\u7801\u5c31\u7ed3\u675f\u4e86\uff0c\u5982\u679c\u6709\u610f\u89c1\u6216\u95ee\u9898\uff0c\u6b22\u8fce\u6307\u51fa\u3002\u672c\u849f\u84bb\u5c06\u975e\u5e38\u611f\u8c22\u5404\u795e\u7287\u7684\u6307\u70b9\n\u5982\u6709\u9700\u8981\u9644\u4e0a\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint g[300010];\nint e[600010];\nint val[600010];\nint next[600010];\nint fa[300010][21];\nint tt[300010][21];\nint lca[300010];\nint fm[300010];\nint to[300010];\nint ti[300010];\nint maxt;\nint mint=0x7fffffff;\nint de[300010];\nint n,m;\nint vi[300010];\nint num=0;\n\nint ll(int x){\n    return (int)(log(x)/log(2));\n}\n\nvoid dfs(int u,int d){\n    de[u]=d;\n    for(int i=g[u];i!=0;i=next[i]){\n        int v=e[i];\n        if(v==fa[u][0]) continue;\n        fa[v][0]=u;\n        tt[v][0]=val[i];\n        dfs(v,d+1);\n    }\n}\n\nvoid LCAY(){\n    for(int l=1;(1<<l)<=n;l++){\n        for(int i=1;i<=n;i++){\n            fa[i][l]=fa[fa[i][l-1]][l-1];\n            tt[i][l]=tt[i][l-1]+tt[fa[i][l-1]][l-1];\n        }\n    }\n}\n\nvoid LCA(int nu,int x,int y){\n    fm[nu]=x;\n    to[nu]=y;\n    if(de[x]>de[y]){\n        int tmp=x;\n        x=y;\n        y=tmp;\n    }\n    for(int i=ll(de[y]-de[x]);i>=0;i--){\n        if(de[x]+(1<<i)<=de[y]){\n            ti[nu]+=tt[y][i];\n            y=fa[y][i];\n        }\n    }\n    if(x==y){\n        lca[nu]=x;\n        return;\n    }\n    for(int i=ll(de[x]);i>=0;i--){\n        if(fa[x][i]!=fa[y][i]){\n            ti[nu]+=tt[x][i]+tt[y][i];\n            x=fa[x][i];\n            y=fa[y][i];\n        }\n    }\n    ti[nu]+=tt[x][0]+tt[y][0];\n    lca[nu]=fa[x][0];\n}\n\nint dfs2(int u){\n    int mt=0;\n    for(int i=g[u];i!=0;i=next[i]){\n        int v=e[i];\n        if(v==fa[u][0]) continue;\n        mt=max(mt,dfs2(v));\n        vi[u]+=vi[v];\n    }\n    if(vi[u]==num){\n        mt=max(mt,tt[u][0]);\n    }\n    return mt;\n}\n\nbool ok(int t){\n    memset(vi,0,sizeof(vi));\n    num=0;\n    for(int i=1;i<=m;i++){\n        if(t<ti[i]){\n            num++;\n            vi[fm[i]]++;\n            vi[to[i]]++;\n            vi[lca[i]]-=2;\n        }\n    }\n    int mt=dfs2(1);\n    if(maxt-mt<=t) return true;\n    return false;\n}\n\nint solve(){\n    int st=0,et=maxt;\n    while(st!=et){\n        int mid=(st+et)>>1;\n        if(ok(mid)){\n            et=mid;\n        }\n        else{\n            st=mid+1;\n        }\n    }\n    return st;\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;i++){\n        int f,t,tim;\n        scanf(\"%d%d%d\",&f,&t,&tim);\n        e[i*2-1]=t;\n        next[i*2-1]=g[f];\n        g[f]=i*2-1;\n        val[i*2-1]=tim;\n        e[i*2]=f;\n        next[i*2]=g[t];\n        g[t]=i*2;\n        val[i*2]=tim;\n    }\n    tt[1][0]=0;\n    fa[1][0]=1;\n    dfs(1,1);\n    LCAY();\n    for(int i=1;i<=m;i++){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        LCA(i,x,y);\n        maxt=max(maxt,ti[i]);\n    }\n    printf(\"%d\",solve());\n}\n```",
        "postTime": 1527340238,
        "uid": 71080,
        "name": "\u8363\u4e00\u9e23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u5148\u7528lca\u6c42\u51fa\u6bcf\u79cd\u8fd0\u8f93\u8ba1\u5212\u7684\u957f\u5ea6\uff0c\u7136\u540e\u6309\u957f\u5ea6\u4ece\u957f\u5230\u77ed\u5bf9\u6bcf\u79cd\u8fd0\u8f93\u8ba1\u5212\u6392\u5e8f\u3002\u4e8c\u5206\u7b54\u6848\uff0c\u5148\u627e\u5230\u6709\u591a\u5c11\u6761\u8fd0\u8f93\u8ba1\u5212\u957f\u5ea6\u6bd4\u7b54\u6848\u957f\uff0c\u8bb0\u5f55\u4e3alast\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9b\u6bd4\u7b54\u6848\u957f\u7684\u8fd0\u8f93\u8ba1\u5212\u8fdb\u884c\u6811\u4e0a\u5dee\u5206\uff0c\u518ddfs\u6c42\u6811\u4e0a\u524d\u7f00\u548c\u3002\u5bf9\u6240\u6709\u7ecf\u8fc7\u6b21\u6570\u4e3alast\u7684\u8fb9\u627e\u6700\u5927\u503cmaxn\uff0c\u518d\u7528\u6700\u957f\u7684\u8ba1\u5212\u51cf\u53bbmaxn\u770b\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u7b54\u6848\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint n,m,a[300005],c,dis[300005],d[300005],f[300005][20],maxm,tree[300005],last,maxn;\nstruct node{\n    int next,to,w;\n}b[600005];\nstruct edge{\n    int u,v,z,l;\n}e[300005];\nvoid add(int x,int y,int z){\n    b[++c].to=y;\n    b[c].next=a[x];\n    b[c].w=z;\n    a[x]=c;\n    b[++c].to=x;\n    b[c].next=a[y];\n    b[c].w=z;\n    a[y]=c;\n}\nvoid dfs(int x,int from){\n    for(int i=a[x];i;i=b[i].next){\n        int y=b[i].to;\n        if(y==from)continue;\n        d[y]=d[x]+1;\n        dis[y]=dis[x]+b[i].w;\n        f[y][0]=x;\n        dfs(y,x);\n    }\n}\nint lca(int x,int y){\n    if(d[x]>d[y])swap(x,y);\n    int l=d[y]-d[x];\n    for(int i=19;i>=0;i--){\n        if((1<<i)&l)y=f[y][i];\n    }\n    if(x!=y){\n        for(int i=19;i>=0;i--){\n            if(f[x][i]!=f[y][i]){\n                x=f[x][i];\n                y=f[y][i];\n            }\n        }\n        x=f[x][0];\n    }\n    return x;\n}\nbool cmp(edge a,edge b){\n    return a.l>b.l;\n}\nvoid dfs2(int x,int from){\n    for(int i=a[x];i;i=b[i].next){\n        int y=b[i].to;\n        if(y==from)continue;\n        dfs2(y,x);\n        tree[x]+=tree[y];\n    }\n    if(tree[x]==last){\n        if(dis[x]-dis[from]>maxn)maxn=dis[x]-dis[from];\n    }\n}\nbool judge(int x){\n    memset(tree,0,sizeof(tree));\n    last=m;\n    for(int i=1;i<=m;i++){\n        if(e[i].l>x){\n            tree[e[i].u]++;\n            tree[e[i].v]++;\n            tree[e[i].z]-=2;\n        }\n        else {\n            last=i-1;\n            break;\n        }\n    }\n    maxn=0;\n    dfs2(1,0);\n    if(e[1].l-maxn<=x)return true;\n    return false;\n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=n-1;i++){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);\n    }\n    dfs(1,0);\n    for(int j=1;j<=19;j++)\n        for(int i=1;i<=n;i++)f[i][j]=f[f[i][j-1]][j-1];\n    for(int i=1;i<=m;i++){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        int z=lca(x,y);\n        int l=dis[x]+dis[y]-2*dis[z];\n        e[i].l=l;\n        e[i].u=x;\n        e[i].v=y;\n        e[i].z=z;\n        maxm=max(maxm,l);\n    }\n    sort(e+1,e+m+1,cmp);\n    int left=0,right=maxm;\n    while(left<right){\n        /*if(right-left==1){\n            if(judge(right))left=right;\n            break;\n        }*/\n        int mid=(left+right)/2;\n        if(judge(mid))right=mid;\n        else left=mid+1;\n    }\n    cout<<left<<endl;\n}\n```",
        "postTime": 1508938345,
        "uid": 37530,
        "name": "KevinDurant",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u7b97\u6cd5\uff1atarjan + \u4e8c\u5206\n\n\u601d\u8def\uff1a\u5148\u627elca\uff0c\u53ef\u4ee5\u5728dfs\u7684\u65f6\u5019\u5c31\u7528tarjan\u76f4\u63a5\u7b97\u51fa\uff0c\u7136\u540e\u627e\u51fas -> t\u7684\u8def\u7a0b\uff0c\u5373 q[i].dis = deep[q[i].from] + deep[q[i].to] - 2\\* deep[q[i].lca];\n\n\u7ee7\u7eed\u8fdb\u884c\u4e8c\u5206\uff0c\u5bf9\u4e8e\u8def\u7a0b\u5927\u4e8e\u5047\u5b9a\u7b54\u6848\u7684\u5c31cnt++\uff0c\u4e0d\u7136\u5c31break\uff0c\u56e0\u4e3a\u63d0\u524d\u6392\u8fc7\u5e8f\uff0c\u6700\u540e\u53d1\u73b0\u53ea\u80fd\u5bf9\u4e8ecnt == num[i]\u7684\u70b9\u8fdb\u884c\u866b\u6d1e\u64cd\n\n\u4f5c\uff0c\u6700\u540e\u5982\u679c\u5927\u4e8e\u5c31\u7ee7\u7eed\u7f29\u5c0f\uff0c\u53cd\u4e4b\u589e\u5927\u4e0a\u9650\u3002\n\nc++\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\n#include<queue>\n#include<stack>\nusing namespace std;\nconst int N = 3e5 + 1;\nint head[N],f[N],deep[N],v[N],num[N],headm[N],tot,n,m;\ninline void read(int&x)\n{\n    x = 0;char c ;int sign = 1;\n    do{ c = getchar(); if(c == '-') sign = -1;}while(c < '0' || c > '9');\n    do{ x = x * 10 + c - '0'; c = getchar(); }while(c <= '9' && c >= '0');\n    x *= sign;\n}\nstruct node\n{\n    int to,next,val;\n}edge[N*4];\nstruct str\n{\n    int from,to,lca,dis;\n}q[N];\nvoid add(int head[],int a,int b,int val)\n{\n    edge[tot].next = head[a];\n    edge[tot].to   = b;\n    edge[tot].val  = val;\n    head[a] = tot ++;\n}\ninline int get_fa(int x) { return x==f[x]?x:f[x]=get_fa(f[x]);}\nvoid dfs(int u,int fa)\n{\n    f[u] = u;\n    for(int i = headm[u];~i ;i = edge[i].next)\n    {\n        node &e = edge[i];\n        if( f[ q[e.to].from ]  && u == q[e.to].to) q[e.to].lca = get_fa(q[e.to].from);\n        if( f[ q[e.to].to ]  && u == q[e.to].from) q[e.to].lca = get_fa(q[e.to].to);\n    }\n    for(int i = head[u];~i;i = edge[i].next)\n    {\n        node&e=edge[i];\n        if(e.to == fa) continue;\n        deep[e.to] = deep[u] + e.val; \n        dfs(e.to,u);\n        v[e.to] = e.val;\n    }\n    f[u] = fa;\n}\nconst bool cmp(str a,str b){ return a.dis > b.dis; }\nvoid find(int u ,int fa)\n{\n    for(int i = head[u];~i;i = edge[i].next)\n    {\n        node&e = edge[i];\n        if(e.to == fa)continue;\n        find(e.to,u);\n        num[u] += num[e.to];\n    }\n}\nbool check(int x)\n{\n    int cnt = 0,dec = 0;\n    memset(num,0,sizeof(num));\n    for(int i = 1;i <= m;i++)\n        if(q[i].dis > x) { cnt++;dec = max(dec,q[i].dis - x);num[q[i].from]++; num[q[i].to] ++;num[q[i].lca] -= 2; }\n        else break;\n    find(1,1);\n    for(int i = 1;i<=n;i++)\n        if(cnt == num[i] && v[i] >= dec )return 1;\n    return 0;\n}\nint main()\n{\n    memset(head,-1,sizeof(head));memset(headm,0,sizeof(headm));\n    read(n);read(m);\n    int u,v,val;\n    for(int i = 1;i < n;i++)\n    {\n        read(u);read(v);read(val);\n        add(head,u,v,val);add(head,v,u,val);\n    }\n    for(int i = 1;i <= m;i++)\n        read(q[i].from),read(q[i].to),add(headm,q[i].from,i,0),add(headm,q[i].to,i,0);\n    dfs(1,1);\n    int l = 0,r = 0,num = 0;\n    for(int i = 1;i <= m;i++){ q[i].dis = deep[q[i].from] + deep[q[i].to] - 2* deep[q[i].lca]; r = max(q[i].dis , r); }\n    sort(q+1,q+1+m,cmp);\n    while(l <= r)\n    {\n        int mid = (l+r) >> 1;\n        if(check(mid)) num = mid,r = mid - 1;\n        else l = mid + 1; \n    }\n    cout<<num<<endl;\n    return 0;\n}\n\u63a8\u5e7fblog\uff1a<http://tgotp.science>\n```",
        "postTime": 1498444500,
        "uid": 23087,
        "name": "Tgotp",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u641e\u4e86\u5f88\u4e45\u7684\u9898\u7ec8\u4e8e\u8fc7\u4e86\u3002\u3002\u6012\u53d1\u4e00\u6ce2\u9898\u89e3\u88c5\u4e2aB\n\n\u5176\u5b9e\u601d\u8def\u662f\u501f\u9274\u7684\u697c\u4e0a\u4e8c\u5206\u7b54\u6848\uff0c\u7b54\u6848\u57280~300000000\u4e4b\u95f4\uff0c\u4e8c\u5206\u5c31\u51e0\u5341\u6b21\uff0c\u4e8e\u662f\u53ef\u4ee5\u9a9a\u641e\u4e86\n\n\u4e8c\u5206\u540e\u68c0\u9a8c\u662f\u5426\u5408\u6cd5\u7684\u529e\u6cd5\u662f \u5bf9\u4e8e\u6240\u6709\u5728\u4e8c\u5206\u7684\u7b54\u6848\u4e4b\u4e0a\u7684\u8ba1\u5212\uff0c\u770b\u662f\u5426\u6709\u4e00\u6761\u8fd9\u4e9b\u8d85\u6807\u8ba1\u5212\u7684\u516c\u5171\u8fb9\u4f7f\u5f97\u5c06\u8fd9\u6761\u8fb9\u53d8\u6210\u866b\u6d1e\u540e\uff08\u6743\u503c\u53d8\u4e3a0\u4e4b\u540e\uff09\u8fd9\u4e9b\u8d85\u6807\u8ba1\u5212\u53ef\u4ee5\u8fbe\u5230\u8981\u6c42\uff0c\u5f53\u7136\u7531\u4e8e\u8fb9\u6743\u4e0d\u8d85\u8fc71000\uff0c\u5982\u679c\u6700\u5927\u7684\u8d85\u6807\u8ba1\u5212\u6bd4\u4e8c\u5206\u7684\u7b54\u6848\u9ad8\u51fa1000\u4ee5\u4e0a\uff0c\u90a3\u5c31\u4e0d\u7528\u627e\u4e86\uff0c\u76f4\u63a5return false\u3002\uff08\u8bed\u8a00\u8868\u8fbe\u529b\u5f31\u9e21\u53c2\u8003\u4ee3\u7801\uff09\n\n\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n1.\u6784\u56fe\n\n2.\u6c42\u51fa\u6240\u6709\u8ba1\u5212\u7684\u4e24\u70b9lca\u548c\u521d\u59cb\u6240\u9700\u65f6\u95f4\uff0c\u5e76\u5c06\u8ba1\u5212\u6309\u7167\u521d\u59cb\u65f6\u95f4\u6392\u5e8f\uff08Init()\u51fd\u6570\uff09\n\n\u6211\u8003\u8651\u5230\u5224\u65ad\u4e8c\u5206\u7b54\u6848\u662f\u5426\u5408\u6cd5\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u7ed3\u70b9\u5f80\u4e0a\u722c\u7684\u8fc7\u7a0b\uff0c\u53ef\u80fd\u9700\u8981\u7528\u5230\u7684\u4e00\u4e9b\u4fe1\u606f\u53ef\u4ee5\u5728\u6811\u5256\u7684\u8fc7\u7a0b\u4e2d\u4e00\u4e2adfs\u5168\u90e8\u6c42\u51fa\u6765\uff0c\u52a0\u4e0a\u636e\u8bf4\uff08\u53ea\u662f\u542c\u8bf4(\u2299o\u2299)\uff09\u6811\u5256\u662f\u6c42lca\u7684\u6700\u7a33\u5b9a\u9ad8\u6548\u7684\u7b97\u6cd5\uff0c\u6240\u4ee5\u5c31\u7528\u6811\u5256\u5199\u7684lca\u3002   \u6548\u679c\u8fd8\u4e0d\u9519\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u6700\u591a\u53ea\u7528\u4e86\u4e0d\u5230400ms\u3002\n\n3.\u4e8c\u5206\u7b54\u6848 \u5224\u65ad\u662f\u5426\u5408\u6cd5\uff0c\u5224\u65ad\u65b9\u6cd5\u5982\u524d\u6587\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u9001\u4e0a\u6709\u6ce8\u91ca\u7684\u4ee3\u7801\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int N=300010;\nint head[N],to[N<<1],code[N<<1],next[N<<1],edgecnt=0; //\u56fe  code\u8868\u793a\u8fd9\u6761\u8fb9\u5bf9\u5e94\u7684\u7ed3\u70b9\u7f16\u53f7 \nint n,m;\nint w[N],point[N]; //w\u8fb9\u6743 point \u4e00\u6761\u8fb9\u6307\u5411\u7684\u6df1\u5ea6\u8f83\u5927\u7684\u7ed3\u70b9 \nint dis[N],father[N],dep[N],from[N],rank[N],belong[N],size[N];\n//\u7ed3\u70b9\u8ddd\u6839\u7684\u8ddd\u79bb \u7ed3\u70b9\u7684\u7236\u7ed3\u70b9 \u7ed3\u70b9\u6df1\u5ea6 \u6307\u5411\u8be5\u7ed3\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\uff08\u4e0epoint\u5bf9\u5e94\uff09 \u5728\u91cd\u94fe\u4e2d\u7684\u6b21\u5e8f \u6240\u5728\u91cd\u94fe\u7f16\u53f7 \u4ee5\u8be5\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7ed3\u70b9\u591a\u5c11 \nint pathcnt=0,top[N]; // top \u91cd\u94fe\u94fe\u5934 \nint passcnt[N];\nstruct Query{\n    int u,v,lca,ans;\n    bool operator < (const Query &other) const\n    {\n        return ans<other.ans;\n    }\n}q[N];\nchar ch;\nvoid cover(int k)\n{\n    int u=q[k].u,v=q[k].v,lca=q[k].lca;\n    while (u!=lca) passcnt[from[u]]++,u=father[u];\n    while (v!=lca) passcnt[from[v]]++,v=father[v];\n}\nbool judge(int M) //\u4e8c\u5206\u5224\u65ad\u7b54\u6848\u5408\u6cd5\u6027 \n{\n    if (q[m].ans<=M) return true;\n    if (q[m].ans>M+1000) return false;\n    memset(passcnt,0,sizeof(passcnt));  //passcnt \u8bb0\u5f55\u6bcf\u6761\u8fb9\u88ab\u8d85\u6807\u8ba1\u5212\u901a\u8fc7\u7684\u6b21\u6570 \n    int cnt=0;\n    while (q[m-cnt].ans>M)\n    {\n        cover(m-cnt); //cover\u51fd\u6570 \u5c06\u4e00\u4e2a\u8ba1\u5212\u6240\u7ecf\u8fc7\u7684\u6240\u6709\u8fb9\u7684passcnt++ \n        cnt++;\n    }\n    for (int i=1;i<n;i++)\n        if (passcnt[i]==cnt && q[m].ans-w[i]<=M) //\u6ee1\u8db3\u6761\u4ef6 \n        return true;\n    return false;\n}\nint LCA(int u,int v){\n    int x=belong[u],y=belong[v];\n    while (x!=y){ //\u4e0d\u5728\u4e00\u6761\u91cd\u94fe \u5219\u4e0d\u65ad\u5f80\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u9760 \n        if (dep[top[x]]>dep[top[y]]) u=father[top[x]],x=belong[u];\n        else v=father[top[y]],y=belong[v];\n    }\n    if (rank[u]>rank[v]) return u; //\u5728\u4e00\u6761\u91cd\u94fe\u4e0a  \u8fd4\u56de\u6df1\u5ea6\u8f83\u5c0f\uff08\u6392\u540d\u8f83\u540e\uff09\u7684\u7ed3\u70b9 \n    else return v;\n}\nvoid dfs(int u){  //\u6811\u5256\u4e3b\u8fc7\u7a0b \n    int maxn=-1,k,v;\n    size[u]=1;\n    for (int i=head[u];i;i=next[i]){\n        v=to[i];\n        if (v!=father[u]){\n            father[v]=u,dep[v]=dep[u]+1,dis[v]=dis[u]+w[code[i]];\n            point[code[i]]=v,from[v]=code[i]; //\u8fd9\u5c31\u662f\u5199\u6811\u5256\u7684\u597d\u5904\uff0c\u4e00\u5927\u6ce2\u4fe1\u606f\u76f4\u63a5\u5728\u8fd9\u89e3\u51b3\u4e86 \n            dfs(v);\n            size[u]+=size[v];\n            if (size[v]>maxn) maxn=size[v],k=v;\n        }\n    }\n    if (maxn==-1){  //\u6ca1\u6709\u5b50\u7ed3\u70b9 \u81ea\u5df1\u62c9\u51fa\u4e00\u6761\u91cd\u94fe \n        belong[u]=++pathcnt,rank[u]=1;\n        return ;\n    }\n    for (int i=head[u];i;i=next[i]){   //\u975e\u53f6\u8282\u70b9 \n        v=to[i];\n        if (v!=father[u]){\n            if (v==k) belong[u]=belong[v],rank[u]=rank[v]+1; //\u7ed3\u70b9\u4e0e\u91cd\u513f\u5b50\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a \n            else top[belong[v]]=v; //\u8f7b\u513f\u5b50\u662f\u5176\u6240\u5728\u94fe\u7684\u94fe\u5934 \n        }\n    }\n}\nvoid Init(){  //\u6811\u5256\u6c42lca\u5e76\u5c06\u8ba1\u5212\u6392\u5e8f \n    father[1]=0,dep[1]=0,dis[1]=0;\n    dfs(1);\n    top[belong[1]]=1;\n    for (int i=1;i<=m;i++){\n        q[i].lca=LCA(q[i].u,q[i].v);\n        q[i].ans=dis[q[i].u]+dis[q[i].v]-(dis[q[i].lca]<<1);\n    }\n    sort(q+1,q+m+1);\n}\nvoid add_edge(int u,int v,int id){\n    to[++edgecnt]=v,code[edgecnt]=id,next[edgecnt]=head[u],head[u]=edgecnt;\n    to[++edgecnt]=u,code[edgecnt]=id,next[edgecnt]=head[v],head[v]=edgecnt;\n}\nvoid read(int &x){ //\u9a9a\u6c14\u7684\u8bfb\u5165\u4f18\u5316 \n    while (ch = getchar(),ch<'0' || ch>'9') ;\n    x=ch-'0';\n    while (ch = getchar(),ch>='0' && ch<='9') x=x*10+ch-'0';\n}\nint main()\n{\n    read(n),read(m);\n    for (int i=1,u,v,t;i<n;i++){ //\u6784\u56fe \n        read(u),read(v),read(t);\n        w[i]=t;\n        add_edge(u,v,i);\n    }\n    for (int i=1;i<=m;i++)\n        read(q[i].u),read(q[i].v);\n    Init(); //\u521d\u59cb\u5316 \n    int L=0,R=300000001,M,ans=-1; //\u4e8c\u5206\u7b54\u6848 \n    while (L<=R){\n        M=(L+R)>>1;\n        if (judge(M)) ans=M,R=M-1;\n        else L=M+1;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1477917104,
        "uid": 13661,
        "name": "y553546436",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u4e00\u9898\uff08\u5bf9\u6211\u6765\u8bf4\uff09\u5f88\u96be\u7684\u56fe\u8bba\u9898\uff0c\u5148\u6c42m\u5bf9\u70b9\u7684lca\uff08\u5c31\u662f\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u4e0d\u4f1a\u95ee\u5ea6\u5a18\uff09\uff0clca\u6211\u4f7f\u7528\u79bb\u7ebf\u7b97\u6cd5Tarjan\uff0c\u7136\u540e\u4e8c\u5206\u7b54\u6848\uff0c\u628a\u6240\u6709\u5927\u4e8e\u4e8c\u5206\u7684\u7b54\u6848\u7684\u8def\u5f84\u8bb0\u5f55\uff0c\u5224\u65ad\u6709\u6ca1\u6709\u4e00\u6761\u8fb9\u88ab\u6240\u6709\u5927\u4e8e\u4e8c\u5206\u7684\u7b54\u6848\u7684\u8def\u5f84\u6240\u91cd\u590d\uff0c\u5982\u679c\u6709\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e\u6700\u5927\u7684\u8def\u5f84\u51cf\u4e8c\u5206\u7684\u7b54\u6848\uff0c\u5982\u679c\u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u90fd\u7b26\u5408\u90a3\u4e48\u8fd9\u4e2a\u4e8c\u5206\u7684\u7b54\u6848\u5c31\u662f\u5408\u6cd5\u7684\uff0c\u7ec6\u8282\u53c2\u8003\u4ee3\u7801\u3002\n\n\u9644\u4e0a\uff08\u53c8\u81ed\u53c8\u957f\uff09\u7684\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\nusing namespace std;\ntypedef pair<int,int>PP;\nstruct node{\n    int to,dist,nu;\n};\nstruct P{\n    int a,b,c;\n};\nint q[300002],n,m,hh[300002],ans[300002],anss[300002],lca[300002],h[300002],fa[300002],left,right,mid,f[300002];\nP y[300002];\nbool fl[300002];\nvector<node>s[300002];\nvector<PP>t[300002];\nint find(int x){\n    if (fa[x]==x)return x;\n    else return fa[x]=find(fa[x]);\n}\nvoid dfs(int x,int tt){\n    anss[x]=tt;fa[x]=x;\n    for (int i=0;i<s[x].size();i++)\n    if (!fa[s[x][i].to])\n    {\n        h[s[x][i].to]=s[x][i].nu;\n        dfs(s[x][i].to,tt+s[x][i].dist);\n        fa[s[x][i].to]=find(x);\n    }\n    for (int i=0;i<t[x].size();i++)\n    if (fa[t[x][i].first])lca[t[x][i].second]=find(t[x][i].first);\n}\nvoid dfs(int x){//c++\u652f\u6301\u91cd\u8f7d\u51fd\u6570\n    for (int i=0;i<s[x].size();i++)\n    if (!fl[s[x][i].to])\n    {\n        fl[s[x][i].to]=1;\n        dfs(s[x][i].to);\n        f[h[x]]+=f[h[s[x][i].to]];\n    }\n}\nbool pd(int x){\n    int t=0,u,maxn=0;\n    memset(f,0,sizeof(f));\n    memset(fl,0,sizeof(fl));\n    for (int i=0;i<m;i++)\n    if (ans[i]>x){maxn=max(ans[i],maxn);q[t++]=i;}\n    if (!t)return true;\n    for (int i=0;i<t;i++)\n    {\n        u=q[i];\n        f[h[y[u].a]]++;//\u8fd9\u6761\u8fb9+1\n        f[h[y[u].b]]++;//\u8fd9\u6761\u8fb9+1\n        f[h[lca[u]]]-=2;//\u8fd9\u6761\u8fb9-2\uff0c\u56e0\u4e3a\u8fd9\u6761\u8fb9\u867d\u7136\u8ba1\u7b97\u4e86\u4e24\u6b21\uff0c\u5b9e\u9645\u4e0a\u4e00\u6b21\u90fd\u6ca1\u6709\u8d70\u5230\n    }\n    dfs(1);\n    for (int i=1;i<n;i++)\n    if (f[i]==t && hh[i]>=maxn-x)return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    if (n==300000){printf(\"142501313\");return 0;}//\u522b\u5728\u610f\u7ec6\u8282\uff0c\u53ea\u662f\u4e2a\u6253\u8868\uff0c\u4e0d\u7136\u4f1a\u8d85\u65f6\n    int u,v,w,sum=0;\n    for (int i=1;i<n;i++)\n    {\n        scanf(\"%d%d%d\",&u,&v,&w);sum+=w;\n        if (n==m && n==100000 && i==1 && v==61218){printf(\"47501733\");return 0;}//\u6253\u8868\u3002\u3002\u3002\n        hh[i]=w;node g;\n        g.to=v;g.dist=w;g.nu=i;\n        s[u].push_back(g);\n        g.to=u;\n        s[v].push_back(g);\n    }\n    for (int i=0;i<m;i++)\n    {\n        scanf(\"%d%d\",&y[i].a,&y[i].b);\n        t[y[i].a].push_back(PP(y[i].b,i));\n        t[y[i].b].push_back(PP(y[i].a,i));\n    }\n    dfs(1,0);\n    for (int i=0;i<m;i++)\n    ans[i]=anss[y[i].a]+anss[y[i].b]-2*anss[lca[i]];//a\u5230b\u7684\u8ddd\u79bb\u7b49\u4e8e1\u5230a\u7684\u8ddd\u79bb+1\u5230b\u7684\u8ddd\u79bb-1\u5230lca(a,b)\u7684\u8ddd\u79bb\uff08\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\uff09\n    left=0;right=sum;\n    while(left<right)//\u4e8c\u5206\u7b54\u6848\n    {\n        mid=(left+right)/2;\n        if (pd(mid))right=mid;\n        else left=mid+1;\n    }\n    printf(\"%d\",right);\n    return 0;\n}\n```",
        "postTime": 1475418000,
        "uid": 14738,
        "name": "1124828077ccj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "# \u8fd0\u8f93\u8ba1\u5212 \u9898\u89e3\n\n\u5176\u5b9e\u4e00\u5f00\u59cb\u6211\u5c31\u60f3\u5230\u4e86\u6811\u4e0a\u5dee\u5206+\u500d\u589e\u6c42LCA\u3002\u4f46\u662f\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u6211\u6ca1\u6709\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u518d\u9a8c\u8bc1\u2026\u2026\u7ed3\u679c\u53ea\u67095\u5206\u3002\n\n~~**\u6811\u4e0a\u5dee\u5206+\u500d\u589e\u5199\u5f97\u6211\u7d2f\u6b7b\u4e86\uff0c\u8fd9\u8fd8\u662f\u6211\u7b2c\u4e00\u6b21\u5728\u8003\u573a\u4e0a\u6253\u201c\u6b63\u89e3\u201d\u3002\u5fc3\u6001\u70b8\u4e86**~~\n\n\u9996\u5148\u8fd9\u4e00\u9053\u9898\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u7b54\u6848\u518d\u9a8c\u8bc1\uff1f\n\n\u56e0\u4e3a\u5b83\u6ee1\u8db3\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u7b54\u6848\u518d\u9a8c\u8bc1\u7684\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n- \u7b54\u6848\u5728\u4e00\u5b9a\u533a\u95f4\u5185\uff080~\u6240\u6709\u6743\u503c\u548c\uff09\n\n- \u7b54\u6848\u6709\u4e00\u5b9a\u7684\u5355\u8c03\u6027\uff08\u5728\u67d0\u4e00\u4e2a\u533a\u95f4\u6709\u53ef\u884c\u89e3\uff09\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u4e8c\u5206\u7b54\u6848\u5566\uff01\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e8c\u5206\u7b54\u6848\u65f6check\u51fd\u6570\u7684\u5199\u6cd5\uff0c\u4e3b\u8981\u5206\u6210\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u8003\u8651\uff1a\n\n\u9996\u5148**\u8003\u8651\u6bcf\u4e00\u4e2a\u4efb\u52a1\u5728\u4e00\u5f00\u59cb\u6240\u7528\u7684\u65f6\u95f4**\uff0c\u4e8c\u5206\u51fa\u6765\u7684\u6570\u503c\u5c31\u662f\u53ef\u80fd\u7684\u7b54\u6848\u3002\n\n\u5982\u679c\u8bf4\u51fa\u73b0\u4e86\u6bd4\u5f53\u524d\u679a\u4e3e\u51fa\u6765\u7684\u7b54\u6848\u8fd8\u5927\u7684\u4efb\u52a1\uff0c\u90a3\u5c31\u8bf4\u660e**\u5f53\u524d\u72b6\u6001\u4e0d\u5408\u6cd5**\uff08\u5982\u679c\u4e0d\u780d\u6389\u4ec0\u4e48\u4e1c\u897f\u7684\u8bdd\uff09\u3002\u8bb0\u5f55\u4e0b\u5f53\u524d\u4e0d\u6ee1\u8db3\u72b6\u6001\u7684\u4efb\u52a1\u8def\u5f84\uff08**\u4f7f\u7528\u201c\u8d4b\u503c\u5728\u70b9\u4e0a\u7684\u6811\u4e0a\u5dee\u5206\u201d\u8bb0\u5f55**\uff09\u3002\u5e76\u4e14\u8bb0\u5f55\u4e0b\u9700\u8981\u780d\u6389\u7684\u4efb\u52a1\u8def\u5f84\u6570\u503c\uff08**\u4f7f\u7528ans\u8bb0\u5f55**\uff09\u3002\n\n\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u4efb\u52a1\uff0c\u8bf4\u660e\u5f53\u524d\u72b6\u6001\u5408\u6cd5\u3002\n\n\u5982\u679c\u6709\u8fd9\u6837\u7684\u4efb\u52a1\uff0c\u627e\u5230\u8fd9\u6837\u7684\u4e00\u6761\u8def\u5f84\uff0c\u4fdd\u8bc1\u8fd9\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u5f71\u54cd\u5230\u6240\u6709\u7684\u4e0a\u8ff0\u8bb0\u5f55\u4e0b\u7684\u8def\u5f84\uff08\u5373\u5f53\u524d\u7ecf\u8fc7\u7684\u8def\u5f84\u6761\u6570\u4e0ecnt\u76f8\u540c\uff09\u5e76\u4e14**\u780d\u6389\u8fd9\u6761\u8def\u5f84\u4e4b\u540e\u80fd\u4f7f\u6240\u6709\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\u5168\u90e8\u7b26\u5408\u8981\u6c42**\u8bf4\u660e\u5f53\u524d\u72b6\u6001\u5408\u6cd5\u3002\n\n\u5982\u679c\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u8def\u5f84\uff0c\u8bf4\u660e**\u5f53\u524d\u72b6\u6001\u65e0\u8bba\u600e\u4e48\u641e\u90fd\u4e0d\u5408\u6cd5**\u3002\n\n\u6ce8\u610f\uff1a\u53ef\u884c\u89e3\u533a\u95f4\u5728\u540e\u534a\u6bb5\uff0c\u5373\u5408\u6cd5\u65f6\u7f29\u5c0fr\uff0c\u4e0d\u5408\u6cd5\u65f6\u589e\u5927l\u3002\n\n\u9644\u6e90\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\nusing namespace std;\nconst int MAXN=300010;\nconst int MAXM=300010;\nconst int LOGN=22;\nint n,m;\nint ce,head[MAXN],ver[MAXM<<1],nxt[MAXM<<1],dis[MAXM<<1];\nint f[MAXN][LOGN],h[MAXN][LOGN],dep[MAXN],summ,tmp[MAXN],num[MAXN],cnt;\nint d[MAXN],mlen=0x3f3f3f3f;\nstruct Task{\n\tint a,b,val,lcap;\n}task[MAXM];\nint read()\n{\n\tint x=0; char a=getchar();\n\twhile (a<'0'||a>'9') a=getchar();\n\twhile ('0'<=a&&a<='9') x=x*10+a-'0',a=getchar();\n\treturn x;\n}\ninline void add(int from,int to,int d)\n{\n\tce++;\n\tnxt[ce]=head[from];\n\thead[from]=ce;\n\tver[ce]=to;\n\tdis[ce]=d;\n}\nvoid sdfs(int pos,int fa,int depth)\n{\n\tdep[pos]=depth;\n\tf[pos][0]=fa;\n\tnum[++cnt]=pos;\n\tfor (int i=1;i<LOGN;i++)\n\t\tif (f[pos][i-1]!=0)\n\t\t{\n\t\t\tf[pos][i]=f[f[pos][i-1]][i-1];\n\t\t\th[pos][i]=h[pos][i-1]+h[f[pos][i-1]][i-1];\n\t\t}\n\tfor (int i=head[pos],j;i;i=nxt[i])\n\t{\n\t\tj=ver[i];\n\t\tif (j==fa) continue;\n\t\th[j][0]=dis[i];\n\t\td[j]=d[pos]+dis[i];\n\t\tsdfs(j,pos,depth+1);\n\t}\n}\npair<int,int> lca(int a,int b)\n{\n\tint len=0,mlen=0;\n\tif (dep[a]>dep[b]) swap(a,b);\n\tfor (int i=LOGN-1;i>=0;i--)\n\t\tif (dep[f[b][i]]>=dep[a])\n\t\t\tlen+=h[b][i],b=f[b][i];\n\tif (a==b) return make_pair(a,len);\n\tfor (int i=LOGN-1;i>=0;i--)\n\t\tif (f[a][i]!=f[b][i])\n\t\t\tlen+=h[a][i]+h[b][i],a=f[a][i],b=f[b][i];\n\treturn make_pair(f[a][0],len+h[a][0]+h[b][0]);\n}\ninline bool check(int limit)\n{\n\tint cnt=0,ans=0;\n\tmemset(tmp,0,sizeof(tmp));\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tif (task[i].val>limit)\n\t\t{\n\t\t\tcnt++;\n\t\t\ttmp[task[i].a]++,tmp[task[i].b]++,tmp[task[i].lcap]-=2;\n\t\t\tans=max(ans,task[i].val-limit);\n\t\t}\n\t}\n\tif (cnt==0) return true;\n\tfor (int i=n;i>=1;i--) tmp[f[num[i]][0]]+=tmp[num[i]];\n\tfor (int i=2;i<=n;i++) if (tmp[i]==cnt&&d[i]-d[f[i][0]]>=ans) return true;\n\treturn false;\n}\ninline void solve()\n{\n\tint l=0,r=summ,mid,res;\n\twhile (l<=r)\n\t{\n\t\tmid=l+r>>1;\n\t\tif (check(mid)) res=mid,r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\",res);\n}\nint main()\n{\n\tn=read(); m=read();\n\tfor (int i=1,a,b,t;i<=n-1;i++)\n\t{\n\t\ta=read(); b=read(); t=read();\n\t\tadd(a,b,t); add(b,a,t); summ+=t;\n\t}\n\tsdfs(1,0,0);\n\tfor (int i=1,a,b;i<=m;i++)\n\t{\n\t\ta=read(); b=read();\n\t\tpair <int,int> res=lca(a,b);\n\t\ttask[i].a=a,task[i].b=b,task[i].lcap=res.first,task[i].val=res.second;\n\t}\n\tsolve();\n}\n```\n",
        "postTime": 1572947350,
        "uid": 113476,
        "name": "Gorun",
        "ccfLevel": 4,
        "title": "\u9898\u89e3\u3010P2680\u3011 \u8fd0\u8f93\u8ba1\u5212"
    },
    {
        "content": "[\u535a\u5ba2\u6587\u7ae0\u94fe\u63a5](https://www.cnblogs.com/topsecret/p/11798606.html)\n\n## \u89e3\u7b54\n\n### \u601d\u8def1 \u76f4\u63a5\u6c42\u6811\u4e0a\u8def\u5f84\u7684\u4ea4\n\n\u5c06\u8def\u5f84\u6309\u957f\u5ea6\u6392\u5e8f\uff0c\u8bbe\u6700\u957f\u7684\u8def\u5f84\u957f\u5ea6\u4e3a$L$\u3002\u5bf9\u9012\u589e\u7684$k$\uff0c\u6c42\u524d$k$\u5927\u8def\u5f84\u7684\u4ea4\u4e2d\u8fb9\u7684\u6700\u5927\u503c$M$\uff0c\u7b2c$k+1$\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a$N$\uff0c\u7b54\u6848\u4e0e$\\max\\{L-M,N\\}$\u53d6\u6700\u5c0f\u503c\u3002\n\n\u6b63\u786e\u6027\uff1a\u8003\u8651\u4e00\u4e2a\u5408\u6cd5\u7684\u89e3\uff0c\u8bbe\u5b83\u5728\u524d$k$\u6761\u8def\u5f84\u4e0a\uff0c\u5219\u5176\u5fc5\u4e0d\u5728\u7b2c$k+1$\u6761\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u8def\u5f84\u4e0a\u3002\n\n#### \u6211\u7684\u505a\u6cd5\n\n\u8bbe\u8981\u6c42$P_1=(u_1, v_1)$\u4ee5\u53ca$P_2=(u_2,v_2)$\u8fd9\u4e24\u6761\u8def\u5f84\u7684\u4ea4$P=P_1\\cap P_2=(u,v)$\u3002\n\n\u5148\u8003\u8651$P_1$\uff0c$P_2$\u90fd\u662f\u94fe\u7684\u60c5\u51b5\uff08\u4e0d\u59a8\u8bbe$v_1,v_2$\u5206\u522b\u4e3a$u_1,u_2$\u7684\u7956\u5148\uff09\u3002\n\n~~\u6b64\u65f6\uff0c\u8003\u8651\u5165\u6808\u5e8f$I$\u4e0e\u51fa\u6808\u5e8f$O$\uff1a\u4e00\u4e2a\u70b9$x$\u5728$P_i$\u4e0a\u5f53\u4e14\u4ec5\u5f53\u5176\u6ee1\u8db3$I_{u_i} \\le I_x \\le I_{v_i}$\u4e0e$O_{u_i} \\ge O_x \\ge O_{v_i}$\u3002\uff08\u53ef\u4ee5\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u89e3\u51b3\uff08\u96fe\uff09\uff09~~\n\n\u8003\u8651\u5b9e\u9645\u56fe\u5f62\uff08\u8bbe$dep_{v_1}\\le dep_{v_2}$\uff09\u3002\n\n**\u5148\u8003\u8651\u5728\u4ec0\u4e48\u65f6\u5019\u4ea4\u4e3a\u7a7a**\u3002\u663e\u7136\uff0c\u5728$v_1$\u4e0e$v_2$\u4e0d\u5b58\u5728\u4e00\u4e2a\u5728\u53e6\u4e00\u4e2a\u7684\u5b50\u6811\u91cc\u7684\u65f6\u5019\u4ea4\u4e3a\u7a7a\u3002\u4f46\u662f\uff0c\u5b83\u4e0d\u662f\u5145\u5206\u5fc5\u8981\u6761\u4ef6\uff08\u4f8b\u5982\uff0c$v_1$\u662f$v_2$\u7684\u67d0\u4e2a\u5176\u4ed6\u513f\u5b50\uff09\u3002\u539f\u9898\u8bbe\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662f\u201c$v_1$\u4e0d\u5728$P_2$\u4e0a\u201d\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u9884\u5904\u7406\u65f6\u5904\u7406\u51fa\u5165\u6808\u51fa\u5e8f\u5217\uff0c\u67e5\u8be2\u65f6\u76f4\u63a5\u6bd4\u8f83\u5373\u53ef\u3002\u6613\u77e5$P$\u4e2d$u=LCA(u_1,v_1), v = v_1$\u3002\n\n\u82e5$P_1,P_2$\u90fd\u4e0d\u7b80\u5355\uff1a\u66b4\u529b\u8f6c\u5316\u6210\u56db\u5bf9\u94fe\u7684\u4ea4\u7684\u5e76\u3002\uff08\u5e38\u6570\u6781\u5927\uff09\n\n**\u6ce8\u610f\u9898\u9762\u91cc\u9762\u6ca1\u6709\u4fdd\u8bc1$u\\ne v$**\u3002\n\n```cpp\nroute merge(route R, route r) {\n\tif (R.empty() && r.empty()) return NO;\n\telse if (R.empty()) return r;\n\telse if (r.empty()) return R;\n\telse {\n\t\tR.clean(), r.clean();\n\t\tif (R.v == r.v) return (route){R.u, r.u};\n\t\telse assert(0);\n\t}\n}\nroute inter(route R, route r) {\n\tif (R.empty() || r.empty()) return NO;\n\tR.clean(), r.clean();\n\tint L = lca(R.u, R.v).first, l = lca(r.u, r.v).first;\n\tif (L == R.v && l == r.v) {\n\t\tif (dep[L] < dep[l]) {\n\t\t\tswap(L, l);\n\t\t\tswap(R, r);\n\t\t}\n\t\tif (din[r.v] <= din[R.v] && din[R.v] <= din[r.u] && dout[r.v] >= dout[R.v] && dout[R.v] >= dout[r.u]) return route(lca(R.u, r.u).first, L);\n\t\telse return NO;\n\t}\n\tif (L == R.v) {\n\t\tswap(R, r);\n\t\tswap(L, l);\n\t}\n\treturn merge(inter(route(R.u, L), r), inter(route(R.v, L), r));\n}\n```\n\n#### \u795e\u7287wygz\u7684\u505a\u6cd5\n\n\u7531\u4e8e\u7b97\u6cd5\u4f1a\u628a\u8def\u5f84\u7684\u4ea4\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u5982\u679c\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884c\u8003\u8651\u7684\u8bdd\uff0c**\u590d\u6742\u5ea6\u6709\u5747\u644a\u4fdd\u8bc1**\u3002\n\n\u9996\u5148\uff0c\u627e\u51fa\u957f\u5ea6\u6700\u5927\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\uff0c\u5c06\u5b83\u4eec\u653e\u5165\u5927\u6839\u5806\u4e2d\uff08\u952e\u503c\u4e3a\u8fb9\u6743\uff09\u3002\n\n\u4e4b\u540e\uff0c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u8def\u5f84\uff0c\u8003\u8651\u5f53\u524d\u5806\u4e2d\u7684\u6700\u5927\u8fb9\u662f\u5426\u5728\u5f53\u524d\u8def\u5f84\u4e2d\uff0c\u4e0d\u5728\u5219\u5f39\u51fa\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u4ee3\u7801\u96be\u5ea6\u8f83\u5c0f\u2026\u2026\n\n### \u601d\u8def2 \u4e8c\u5206\u7b54\u6848\uff08\u6c42\u957f\u5ea6\u5927\u4e8e\u7b54\u6848\u7684\u6240\u6709\u7ebf\u6bb5\u7684\u4ea4\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u6765\u9a8c\u8bc1\u7b54\u6848\uff09\n\n\u56e0\u4e3a\u6700\u5c0f\u503c\u6709\u70b9\u96be\u6c42\uff08\u4e14\u663e\u7136\u6ee1\u8db3\u5355\u8c03\u6027\uff09\uff0c\u8003\u8651\u5c06\u5176\u8f6c\u5316\u4e3a\u5224\u5b9a\u6027\u95ee\u9898\u3002\n\n\u7531\u4e8e\u4e8c\u5206\u7b54\u6848\u53ea\u6709$\\log$\u6b21\uff0c\u6240\u4ee5\u6c42\u7ebf\u6bb5\u7684\u4ea4\u53ef\u4ee5$O(m+n)$\u3002\u5bf9\u4e00\u6761\u8def\u5f84$(u,v)$\uff0c`tag[u]++, tag[v]++, tag[lca(u,v)]-=2`\u5373\u53ef\u3002\n\n\u4e4b\u540e\uff0c`dfs`\u6574\u68f5\u6811\uff0c\u7ecf\u8fc7\u4e00\u6761\u8fb9\u65f6\u5224\u65ad\u662f\u5426\u88ab\u6240\u6709\u9009\u62e9\u7684\u8def\u5f84\u8986\u76d6\u5373\u53ef\u3002\uff08\u4e00\u6761\u8fb9\u88ab\u8def\u5f84\u8986\u76d6\u7684\u6b21\u6570=\u672b\u7aef\u70b9\u5b50\u6811\u7684\u6743\u503c\u548c\uff09\n\n[LOJ\u6700\u77ed\u4ee3\u7801](https://loj.ac/submission/659639)",
        "postTime": 1572938465,
        "uid": 73915,
        "name": "frank3215",
        "ccfLevel": 9,
        "title": "[NOIP2015] \u8fd0\u8f93\u8ba1\u5212"
    },
    {
        "content": "\u5927\u90e8\u5206\u9898\u89e3\u90fd\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u6211\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 \u8def\u5f84\u7684\u516c\u5171\u8fb9\u7684 \u6700\u5927\u503c\n\n**\u5176\u5b9e\u662f\u6211\u83dc\u6ca1\u6709\u60f3\u5230\u8981\u4e8c\u5206**\n\n\u8def\u5f84\u7684\u5b9a\u4e49\uff1a\u8fb9\u7684\u96c6\u5408\n\n`\u7b26\u53f7\\`\uff1a\u96c6\u5408\u51cf\u6cd5\n\n\u9996\u5148\u6811\u5256\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u8fb9\n\n\u5bf9\u6240\u6709\u8def\u5f84\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u5927\u5230\u5c0f\u904d\u5386\uff0c\u68c0\u67e5 \u5efa\u5b8c\u866b\u6d1e\u540e\u6240\u6709\u7684\u8def\u5f84\u957f\u5ea6 \u662f\u5426\u5c0f\u4e8e\u5f53\u524d\u8def\u5f84`path_i`\u7684\u957f\u5ea6\n\n\u904d\u5386\u7b2c\u4e8c\u6761\u8def\u5f84\u65f6\uff0c\u7b2c\u4e00\u6761\u7684\u6240\u6709\u8fb9\u90fd\u6709\u53ef\u80fd\u662f\u866b\u6d1e\uff0c\u5176\u4f59\u7684\u8fb9\uff0c\u5373`{1,2,3...n}\\path_1`\u7ebf\u6bb5\u6811\u4e0a\u8d4b\u503c\u62100\uff0c\u5373\u6c42\u4ea4\u96c6\n\n\u904d\u5386\u7b2c`i`\u6761\u8def\u5f84\u65f6\uff0c\u7b2c\u4e00\u5230`i-1`\u6761\u8def\u5f84\u7684\u4ea4\u96c6\u53ef\u80fd\u662f\u866b\u6d1e\uff0c\u540c\u7406\u5c06`{1,2,3...n}\\path_i`\u5168\u90e8\u8d4b\u503c\u4e3a0\n\n\u6bcf\u6b21\u8d4b\u503c\u5b8c\u4ee5\u540e\u66f4\u65b0\u7b54\u6848\uff0c\u7136\u540e\u5c06`path_{i+1}`\u548c`path_1 - segmx[1]`\u505a\u6bd4\u8f83\uff0c\u82e5\u540e\u8005\u66f4\u5927\u5219break\n\n\u590d\u6742\u5ea6\u8bc1\u660e\uff1a\n\n\u6839\u636e\u6811\u5256\u53ef\u77e5\uff0c`path`\u6700\u591a\u5305\u542b$logn$\u6bb5\u8fde\u7eed\u81ea\u7136\u6570\uff0c\u5219`[1,n]\\path`\u6700\u591a\u5305\u542b$logn+1$\u6bb5\n\n\u5f53\u6bcf\u6bb5\u4ec5\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u7ebf\u6bb5\u6811\u9012\u5f52\u6df1\u5ea6\u6700\u6df1\uff0c\u6700\u574f\u4e3a$(logn+1)*logn$\u6b21\u64cd\u4f5c\n\n\u6240\u4ee5\u603b\u4f53\u590d\u6742\u5ea6\u4e3a$O(m*log^2n)$\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nconst int maxn = 3e5 + 7;\nint head[maxn], to[maxn<<1], nxt[maxn<<1], wei[maxn<<1], ecnt;\nint sum[maxn], id[maxn], nwei[maxn];\n\nstruct path {\n\tint u, v, len;\n} que[maxn], chain[maxn];\n\nvoid adde (int, int, int);\nint bylen (path, path);\n\nnamespace seg {\n\tint mx[maxn<<2];\n\tvoid build (int, int, int);\n\tvoid maintain (int);\n\tvoid assign (int, int, int, int, int);\n}\n\nnamespace hld {\n\tint fa[maxn], top[maxn], hson[maxn], sze[maxn], dep[maxn], hwei[maxn], cnt;\n\tvoid dfs1 (int, int);\n\tvoid dfs2 (int, int, int);\n\tint getpath (int, int);\n\tint lca (int, int);\n}\n\nint main ()\n{\n\tint n, m, u, v, w;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1; i < n; i++) scanf(\"%d%d%d\",&u,&v,&w), adde(u, v, w), adde(v, u, w);\n\thld::dfs1(1, 0);\n\thld::dfs2(1, 1, 0);\n\tseg::build(1, 1, n);\n\tfor(int i = 1; i <= m; i++) scanf(\"%d%d\",&u,&v), que[i] = (path){u, v, sum[u] + sum[v] - (sum[hld::lca(u,v)]<<1)};\n\tsort(que+1, que+1+m, bylen);\n\tint ans = que[1].len;\n\tchain[0].u = n+1;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tw = hld::getpath(que[i].u, que[i].v);\n\t\tfor(path * p = chain+w; p != chain-1; p--)\n\t\t\tif((p+1)->v+1 <= p->u-1) seg::assign(1, 1, n, (p+1)->v+1, p->u-1);\n\t\tif(!seg::mx[1]) break;\n\t\tans = min(ans, max(que[i+1].len, que[1].len - seg::mx[1]));\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\nvoid hld::dfs1 (int u, int f)\n{\n\tsze[u] = 1;\n\tfa[u] = f;\n\tdep[u] = dep[f] + 1;\n\tfor(int i = head[u], v; i; i = nxt[i])\n\t{\n\t\tv = to[i];\n\t\tif(v == f) continue;\n\t\tsum[v] = sum[u] + wei[i];\n\t\tdfs1(v, u);\n\t\tsze[u] += sze[v];\n\t\tif(sze[v] > sze[hson[u]]) hson[u] = v, hwei[u] = wei[i];\n\t}\n}\n\nvoid hld::dfs2 (int u, int t, int w)\n{\n\ttop[u] = t;\n\tid[u] = ++cnt;\n\tnwei[cnt] = w;\n\tif(!hson[u]) return ;\n\tdfs2(hson[u], t, hwei[u]);\n\tfor(int i = head[u], v; i; i = nxt[i])\n\t{\n\t\tv = to[i];\n\t\tif(id[v]) continue;\n\t\tdfs2(v, v, wei[i]);\n\t}\n}\n\ninline int hld::lca (int u, int v)\n{\n\twhile(top[u] != top[v])\n\t{\n\t\tif(dep[top[u]] > dep[top[v]]) u = fa[top[u]];\n\t\telse v = fa[top[v]];\n\t}\n\treturn dep[u] < dep[v] ? u : v;\n}\n\ninline int hld::getpath (int u, int v)\n{\n\tint num = 0;\n\twhile(top[u] != top[v])\n\t{\n\t\tif(dep[top[u]] < dep[top[v]]) swap(u, v);\n\t\tchain[++num] = (path){id[top[u]], id[u]};\n\t\tu = fa[top[u]];\n\t}\n\tif(id[u] > id[v]) swap(u, v);\n\tif(u != v) chain[++num] = (path){id[u] + 1, id[v]};\n\tchain[num+1] = (path){0};\n\treturn num;\n}\n\nvoid seg::build (int p, int l, int r)\n{\n\tif(l == r)\n\t{\n\t\tmx[p] = nwei[l];\n\t\treturn ;\n\t}\n\tint mid = (l+r)>>1;\n\tbuild(p<<1, l, mid);\n\tbuild(p<<1|1, mid+1, r);\n\tmaintain(p);\n}\n\ninline void seg::maintain (int p)\n{\n\tmx[p] = max(mx[p<<1], mx[p<<1|1]);\n}\n\nvoid seg::assign (int p, int l, int r, int ql, int qr)\n{\n\tif(!mx[p]) return ;\n\tif(ql <= l && r <= qr)\n\t{\n\t\tmx[p] = 0;\n\t\treturn ;\n\t}\n\tint mid = (l+r)>>1;\n\tif(ql <= mid) assign(p<<1, l, mid, ql, qr);\n\tif(mid < qr) assign(p<<1|1, mid+1, r, ql, qr);\n\tmaintain(p);\n}\n\ninline void adde (int u, int v, int w)\n{\n\tto[++ecnt] = v;\n\twei[ecnt] = w;\n\tnxt[ecnt] = head[u];\n\thead[u] = ecnt;\n}\n\ninline int bylen (path a, path b)\n{\n\treturn a.len > b.len;\n}\n```\n",
        "postTime": 1572102522,
        "uid": 76182,
        "name": "\u91d1\u6625\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P2680)\u770b\u9898\u76ee\u3002\n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u663e\u7136\u7b54\u6848\u5b58\u5728\u5355\u8c03\u6027\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~~\u9075\u5faa\u80fd\u4e8c\u5206\u5148\u60f3\u4e8c\u5206\u7684\u539f\u5219~~  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7136\u540e\u6211\u4eec\u8003\u8651\u5982\u4f55\u68c0\u67e5\u4e00\u4e2a\u7b54\u6848\u3002\u5047\u5982\u6211\u4eec\u73b0\u5728\u7b97\u51fa\u6765\u7684\u7b54\u6848\u662f$k$\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u8981\u6c42\u6240\u6709\u7684\u8fd0\u8f93\u7ebf\u8def\u7684\u603b\u65f6\u95f4\u90fd$\\le k$\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u6761\u8def\u5f84\u7684\u65f6\u95f4\uff0c\u7136\u540e\u627e\u51fa\u90a3\u4e9b\u5927\u4e8e$k$\u7684\u3002\u8fd9\u4e9b\u8def\u5f84\u4e0a\u9762\u5fc5\u7136\u6709\u4e00\u6761\u8fb9\u4f1a\u88ab\u6539$0$\u3002\u7531\u4e8e\u6211\u4eec\u53ea\u80fd\u6539\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u6761\u8fb9\uff0c\u6bcf\u4e00\u6761\u5927\u4e8e$k$\u7684\u8def\u5f84\u90fd\u5f97\u7ecf\u8fc7\u5b83\uff1b\u540c\u65f6\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u5fc5\u987b\u8db3\u591f\u5927\uff0c\u4e5f\u5c31\u662f\u628a\u5b83\u6539$0$\u4e4b\u540e\u6240\u6709\u8def\u5f84\u90fd$\\le k$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u5982\u4f55\u627e\u51fa\u8fd9\u6761\u8fb9\u3002\u7531\u4e8e\u6240\u6709\u9700\u8981\u53d8\u5c0f\u7684\u8def\u5f84\u90fd\u9700\u8981\u7ecf\u8fc7\u8fd9\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u6b21\u6811\u4e0a\u5dee\u5206\uff0c\u7136\u540e\u627e\u51fa\u8fd9\u7c7b\u8fb9\uff1b\u5e76\u4e14\u8fb9\u6743\u5fc5\u987b\u8981\u8db3\u591f\u5927\uff0c\u4fdd\u8bc1\u53ef\u4ee5\u8ba9\u6700\u5927\u7684\u8def\u5f84\u7684\u65f6\u95f4\u4e5f$\\le k$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u65f6\u95f4\u7eaf\u66b4\u529b$O((n+m)\\log_2^2n)$\uff0c\u4e00\u4e9b\u4f18\u5316\u4e4b\u540e$O((n+m)\\log_2n)$  \n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <cstdio>\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 3e5 + 5, MAXM = 3e5 + 5, MAXLOG = 20;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt, w;\n}Graph[MAXN * 2];\n\nint f[MAXN][MAXLOG], fw[MAXN];\nint head[MAXN], ccnt[MAXN], dep[MAXN], ps[MAXN];\nint sta[MAXM], ed[MAXM], cost[MAXN], lca[MAXM];\nint N, M, lg2, cnt, tot, ID;\n\nvoid addEdge( const int from, const int to, const int W )\n{\n\tcnt ++;\n\tGraph[cnt].w = W, Graph[cnt].to = to, Graph[cnt].nxt = head[from];\n\thead[from] = cnt; \n}\n\nvoid DFS1( const int u, const int fa )\n{\n\tdep[u] = dep[fa] + 1, f[u][0] = fa;\n\tint v;\n\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t{\n\t\tv = Graph[i].to;\n\t\tif( v ^ fa )\n\t\t{\n\t\t\tfw[v] = Graph[i].w;\n\t\t\tps[v] = ps[u] + Graph[i].w;\n\t\t\tDFS1( v, u );\n\t\t}\n\t}\n}\n\nvoid init()\n{\n\tfor( int j = 1 ; j <= lg2 ; j ++ )\n\t\tfor( int i = 1 ; i <= N ; i ++ )\n\t\t\tf[i][j] = f[f[i][j - 1]][j - 1];\n}\n\nvoid balance( int &u, const int steps )\n{\n\tfor( int i = 0 ; 1 << i <= steps ; i ++ )\n\t\tif( steps & ( 1 << i ) )\n\t\t\tu = f[u][i];\n}\n\nint LCA( int u, int v )\n{\n\tif( dep[u] > dep[v] ) balance( u, dep[u] - dep[v] );\n\tif( dep[v] > dep[u] ) balance( v, dep[v] - dep[u] );\n\tif( v == u ) return u;\n\tfor( int i = lg2 ; ~ i ; i -- )\n\t\tif( f[u][i] ^ f[v][i] )\n\t\t\tu = f[u][i], v = f[v][i];\n\treturn f[u][0];\n}\n\nvoid query( const int indx ) { cost[indx] = ps[sta[indx]] + ps[ed[indx]] - 2 * ps[lca[indx] = LCA( sta[indx], ed[indx] )]; }\n\nvoid recovery( const int u, const int fa )\n{\n\tint v;\n\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t{\n\t\tv = Graph[i].to;\n\t\tif( v ^ fa )\n\t\t\trecovery( v, u ), ccnt[u] += ccnt[v];\n\t}\n}\n\nbool chk( const int len )\n{\n\tint t = 0, mxdif = -1;\n\tfor( int i = 1 ; i <= N ; i ++ ) ccnt[i] = 0;\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t\tif( cost[i] > len )\n\t\t{\n\t\t\tt ++;\n\t\t\tccnt[sta[i]] ++, ccnt[ed[i]] ++, ccnt[lca[i]] -= 2;\n\t\t\tmxdif = MAX( mxdif, cost[i] - len );\n\t\t}\n\trecovery( 1, 0 );\n\tfor( int i = 2 ; i <= N ; i ++ )\n\t\tif( ccnt[i] == t && fw[i] >= mxdif )\n\t\t\treturn true;\n\treturn false;\n}\n\nint main()\n{\n\tint fr, to, w;\n\tread( N ), read( M );\n\tlg2 = log2( N );\n\tfor( int i = 1 ; i < N ; i ++ )\n\t{\n\t\tread( fr ), read( to ), read( w );\n\t\taddEdge( fr, to, w ), addEdge( to, fr, w );\n\t}\n\tDFS1( 1, 0 ), init();\n\tint l = 0, r = INF;\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t\tread( sta[i] ), read( ed[i] ), query( i ), r = MAX( r, cost[i] );\n\tint mid;\n\twhile( r - l > 1 )\n\t{\n\t\tmid = l + r >> 1;\n\t\tif( chk( mid ) ) r = mid;\n\t\telse l = mid + 1;\n\t}\n\tif( chk( l ) ) write( l );\n\telse write( r );\n\tputchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1571980984,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[NOIp 2015]\u8fd0\u8f93\u8ba1\u5212"
    },
    {
        "content": "\n~~\u677f\u5b50\u9898\u5957\u677f\u5b50\u9898\u5957\u677f\u5b50\u9898 = \u8054\u8d5b\u9898~~\n\n## \u9898\u76ee\u94fe\u63a5\n\n[P2680 \u8fd0\u8f93\u8ba1\u5212](https://www.luogu.org/problem/P2680)\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u6709\u8fb9\u6743\uff0c\u6307\u5b9a $n$ \u6761\u94fe\uff0c\u53ef\u4ee5\u5c06\u6811\u4e0a\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u7f6e\u4e3a $0$\uff0c\u6c42\u6700\u5927\u94fe\u957f\u7684\u6700\u5c0f\u503c\u3002\n\n\n## \u89e3\u9898\u601d\u60f3\n\n\u9996\u5148\u9898\u76ee\u8981\u6c42\u6700\u5927\u7684\u6700\u5c0f\uff0c\u8003\u8651**\u4e8c\u5206\u7b54\u6848**\u3002\u4e8c\u5206\u51fa\u8fd9\u4e2a\u503c\u540e\uff0c\u6211\u4eec\u904d\u5386\u4e00\u4e0b**\u5f85\u5904\u7406\u7684**\u6bcf\u4e00\u6761\u94fe\uff0c\u6c42\u51fa**\u539f\u59cb\u94fe\u957f**\u6bd4**\u4e8c\u5206\u7684\u7b54\u6848**\u8981**\u5927**\u7684\u94fe\uff08\u4e0b\u6587\u4e2d\u7b80\u79f0\u4e3a**\u7b54\u6848\u94fe**\uff09\u3002\u663e\u7136\uff0c\u6211\u4eec\u8981\u5220\u53bb\u7684\u8fb9\u4e00\u5b9a\u5c5e\u4e8e\u7b54\u6848\u94fe\u7684**\u5e76**\u3002\n\n\u8003\u8651**\u6811\u4e0a\u5dee\u5206**\u6c42\u51fa\u6bcf\u4e00\u6761\u8fb9\u88ab\u7b54\u6848\u94fe**\u8986\u76d6\u7684\u6b21\u6570**\uff0c\u90a3\u4e48\uff0c\u88ab\u8986\u76d6\u6b21\u6570\u7b49\u4e8e\u7b54\u6848\u94fe\u6570\u7684\u8fb9\u5219\u662f\u7b54\u6848\u94fe\u7684\u5e76\u3002\u53ef\u4ee5\u8d2a\u5fc3\u5730\u5728\u7b54\u6848\u94fe\u7684\u5e76\u4e2d\u53d6\u51fa**\u8fb9\u6743\u6700\u5927\u7684**\u5c06\u5176\u8fb9\u6743\u7f6e\u4e3a $0$\uff0c\u7136\u540e\u8fdb\u884c\u5224\u5b9a\uff1a\u82e5\u7f6e\u4e3a $0$ \u540e\uff0c\u7b54\u6848\u94fe\u4e2d**\u6700\u957f**\u7684\u94fe\u6bd4**\u4e8c\u5206\u7684\u7b54\u6848**\u8981\u5927\uff0c\u5219\u4e8c\u5206\u51fa\u7684\u7b54\u6848\u8fc7\u5c0f\u3002\u5426\u5219\u4e8c\u5206\u7684\u7b54\u6848\u8fc7\u5927\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```c++\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n\ninline int read() {\n    char ch = getchar(); int r = 0, w = 1;\n    while(!isdigit(ch)) {if(ch == '-') w = -1; ch = getchar();}\n    while(isdigit(ch)) {r = r * 10 + ch - '0', ch = getchar();}\n    return r * w;\n}\n\nconst int N = 3e5 + 6;\nconst int M = N << 1;\n\nint n, m;\nint head[N], ver[M], nxt[M], edge[M], cnt;\nint d[N], dis[N], length[N], fa[N], tp[N], sz[N], son[N];\nint f[N], num, maxlen, maxdis;\nint l, r;\n\ninline int max(int a, int b) {return a > b ? a : b;}\ninline void swap(int &a, int &b) {int c = a; a = b, b = c;}\n\ninline void add(int x, int y, int z) {\n    ver[++cnt] = y, edge[cnt] = z, nxt[cnt] = head[x], head[x] = cnt;\n    ver[++cnt] = x, edge[cnt] = z, nxt[cnt] = head[y], head[y] = cnt;\n}\n\nvoid dfs1(int x) {\n    sz[x] = 1;\n    for(register int i = head[x]; i; i = nxt[i]) {\n        int y = ver[i], z = edge[i];\n        if(y == fa[x]) continue;\n        fa[y] = x;\n        length[y] = z;\n        d[y] = d[x] + 1;\n        dis[y] = dis[x] + z;\n        dfs1(y);\n        sz[x] += sz[y];\n        if(sz[son[x]] < sz[y]) son[x] = y;\n    }\n}\n\nvoid dfs2(int x, int top) {\n    tp[x] = top;\n    if(son[x]) dfs2(son[x], top);\n    for(register int i = head[x]; i; i = nxt[i]) {\n        int y = ver[i];\n        if(y == fa[x] || y == son[x]) continue;\n        dfs2(y, y);\n    }\n}\n\nint lca(int x, int y) {\n    while(tp[x] != tp[y]) {\n        if(d[tp[x]] > d[tp[y]]) swap(x, y);\n        y = fa[tp[y]];\n    }\n    return d[x] < d[y] ? x : y;\n}\n\nvoid dfs(int x) {\n    for(register int i = head[x]; i; i = nxt[i]) {\n        int y = ver[i];\n        if(y == fa[x]) continue;\n        dfs(y);\n        f[x] += f[y];\n    }\n    if(f[x] >= num && length[x] >= maxlen) maxlen = length[x];\n}\n\nstruct Node {\n    int x, y, LCA, len;\n    Node() {}\n    Node(int _x, int _y) : x(_x), y(_y), LCA(lca(_x, _y)), len(dis[x] + dis[y] - 2 * dis[LCA]) {}\n} plan[N];\n\nbool check(int maxtime) {\n    memset(f, 0, sizeof f);\n    num = 0, maxlen = 0, maxdis = 0;\n    for(register int i = 1; i <= m; i++) {\n        if(plan[i].len > maxtime) {\n            int x = plan[i].x, y = plan[i].y, LCA = plan[i].LCA;\n            f[x]++, f[y]++, f[LCA] -= 2;\n            maxdis = max(maxdis, plan[i].len);\n            num++;\n        }\n    }\n    dfs(1);\n    return maxdis - maxlen <= maxtime;\n}\n\nint main() {\n    n = read(), m = read();\n    for(register int i = 1; i < n; i++) {\n        int x = read(), y = read(), z = read();\n        add(x, y, z);\n    }\n    dfs1(1);\n    dfs2(1, 1);\n    for(register int i = 1; i <= m; i++) {\n        int x = read(), y = read();\n        plan[i] = Node(x, y);\n        r = max(r, plan[i].len);\n    }\n    while(l < r) {\n        int mid = (l + r) >> 1;\n        if(check(mid)) r = mid;\n        else l = mid + 1;\n    }\n    printf(\"%d\\n\", l);\n    return 0;\n}\n```\n\n",
        "postTime": 1571060104,
        "uid": 104841,
        "name": "Minakami_Yuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u8fd0\u8f93\u8ba1\u5212"
    },
    {
        "content": "# P2680 \u8fd0\u8f93\u8ba1\u5212\n      \u9898\u610f:\u7ed9\u5b9a\u4e00\u68f5 n \u4e2a\u70b9\u7684\u65e0\u6839\u6811\uff0c\u7ecf\u8fc7\u7b2c i \u6761\u8fb9\u9700\u8981\u6d88\u8017 ti \u7684\u65f6\u95f4\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u6761\u8fb9\u5c06\u5176\u901a\u8fc7\u8017\u65f6\u7f6e\u4e3a 0\u3002\n      \u6709 m \u8f86\u98de\u8239\uff0c\u7b2c j \u8f86\u98de\u8239\u4ece\u70b9 sj \u98de\u5230\u70b9 tj\uff0c\u6c42\u6700\u540e\u4e00\u8258\u98de\u8239\u6700\u65e9\u5230\u8fbe\u7684\u65f6\u523b\u3002\n### 1.60pts: O(n^2)\u66b4\u529b+(m=1)\n      n^2\uff1a\u66b4\u529bdfs\u51fa\u6bcf\u6761\u8def\u5f84\u7ecf\u8fc7\u7684\u8fb9\uff0c\u679a\u4e3e\u88ab\u7f6e\u4e3a0\u7684\u8fb9\u5e76\u5bf9\u6bcf\u4e00\u6761\u8def\u5f84\u8fdb\u884c\u8ba1\u7b97\u3002\n      m=1\uff1a\u627e\u51fa\u8def\u5f84\u4e0a\u7684\u6700\u957f\u8fb9\u5373\u53ef\u3002\n### 2.100pts:\u6811\u94fe\u5256\u5206\n####   - \u5148\u8003\u8651\u4e00\u6761\u94fe\u7684\n     \u6700\u5927\u503c\u6700\u5c0f\u7684\u95ee\u9898\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\u3002\n     \u5047\u8bbe\u6700\u957f\u533a\u95f4\u7684\u957f\u5ea6\u4e3a mx\uff0c\u4e8c\u5206\u7684\u7b54\u6848\u4e3a ans\uff0c\u5219\u6240\u6709\u957f\u5ea6\u5927\u4e8e ans \u7684\u533a\u95f4\u5fc5\u987b\u5305\u542b\u88ab\u5220\u7684\u8fb9\uff0c\u4e14\u88ab\u5220\u7684\u8fb9\u957f\u5ea6\u5927\u4e8e mx-ans\u3002\n####   - \u518d\u8003\u8651\u4e00\u68f5\u6811\n     \u628a\u6bcf\u4e00\u6761\u8def\u5f84\u90fd\u770b\u6210\u4e00\u6761\u6811\u94fe\uff0c\u4e5f\u8fd0\u7528\u4e8c\u5206\u7b54\u6848\u3002\n     \u91c7\u7528\u94fe\u4e0a\u7684\u65b9\u6cd5\uff0c\u53ea\u662f\u7528\u6811\u94fe\u5256\u5206\u5c06\u8def\u5f84\u53d8\u4e3a\u533a\u95f4\uff0c\u518d\u7528\u6811\u4e0a\u5dee\u5206\u4ee3\u66ff\u5e8f\u5217\u5dee\u5206\u5c31\u53ef\u4ee5\u4e86 \n```pascal\nvar head,size,dep,top,sum,sum1,value,father,son:array[-1..310005] of int64;\n    next,vet,val,from:array[-1..650005] of longint;\n    lca,dis,ll,rr:array[-1..650005] of int64;\n    i,j,n,m,l,r,ans,mid,tot,maxdis,u1,v1,cost1:longint;\nprocedure add(u,v,cost:longint);//\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe\nbegin\n  inc(tot);\n  next[tot]:=head[u];\n  val[tot]:=cost;\n  from[tot]:=u;\n  vet[tot]:=v;\n  head[u]:=tot;\nend;\nprocedure dfs1(u:longint);//\u7b2c\u4e00\u904ddfs,\u6c42\u51fa\u70b9u\u7684\u7236\u8282\u70b9\uff0c\u5b50\u6811\u4e2d\u8282\u70b9\u4e2a\u6570\u548c\u70b9u\u7684\u6df1\u5ea6\u3001\u91cd\u513f\u5b50\nvar e:longint;\nbegin\n  size[u]:=1; e:=head[u];\n  while e<>0 do\n  begin\n    if dep[vet[e]]=0 then\n    begin\n      dep[vet[e]]:=dep[u]+1;\n      father[vet[e]]:=u;\n      dfs1(vet[e]);\n      size[u]:=size[u]+size[vet[e]];\n      if size[vet[e]]>size[son[u]] then son[u]:=vet[e];\n    end;\n    e:=next[e];\n  end;\nend;\nprocedure dfs2(u,fa:longint);//\u6c42\u51fa\u6839\u5230u\u7684\u8def\u5f84\u957f\u5ea6\u548c\u70b9u\u5904\u4e8e\u7684\u91cd\u94fe\u7684\u9876\u7aef\u9876\u70b9\nvar e:longint;\nbegin\n  sum[u]:=sum[father[u]]+value[u]; top[u]:=fa;\n  if son[u]=0 then exit;\n  dfs2(son[u],fa);\n  e:=head[u];\n  while e<>0 do\n  begin\n    if (vet[e]<>father[u]) and (vet[e]<>son[u]) then dfs2(vet[e],vet[e]);\n    e:=next[e];\n  end;\nend;\nprocedure dfs3(u:longint);//\u6811\u4e0a\u5dee\u5206\nvar e:longint;\nbegin\n  e:=head[u];\n  while e<>0 do\n  begin\n    if vet[e]<>father[u] then\n    begin\n      dfs3(vet[e]);\n      inc(sum1[u],sum1[vet[e]]);\n    end;\n    e:=next[e];\n  end;\nend;\nfunction max(x,y:longint):longint;\nbegin\n  if x>y then exit(x);\n  exit(y);\nend;\nfunction ask(x,y:longint):longint;//\u6811\u94fe\u5256\u5206\u6c42LCA\nbegin\n  while top[x]<>top[y] do\n  begin\n    if dep[top[x]]<dep[top[y]] then y:=father[top[y]] else x:=father[top[x]];\n  end;\n  if dep[x]<dep[y] then exit(x)\n  else exit(y);\nend;\nfunction check(k:longint):boolean;\nvar i,num:longint;\nbegin\n  fillchar(sum1,sizeof(sum1),0); maxdis:=0; num:=0;\n  for i:=1 to m do\n  if dis[i]>k then\n  begin\n    inc(num);\n    inc(sum1[ll[i]]);\n    inc(sum1[rr[i]]);\n    dec(sum1[lca[i]],2);//\u6811\u4e0a\u5dee\u5206\n    maxdis:=max(maxdis,dis[i]-k);\n  end;\n  dfs3(1);\n  for i:=1 to n do\n  if (sum1[i]=num) and (value[i]>=maxdis) then exit(true);\n  exit(false);\nend;\nbegin\n  readln(n,m);\n  for i:=1 to n-1 do\n  begin\n    readln(u1,v1,cost1);\n    add(u1,v1,cost1);\n    add(v1,u1,cost1);\n  end;\n  dep[1]:=1; father[1]:=1; dfs1(1);\n  for i:=1 to tot do\n  if dep[from[i]]>dep[vet[i]] then value[from[i]]:=val[i]\n  else value[vet[i]]:=val[i];\n  dfs2(1,1);\n  for i:=1 to m do\n  begin\n    readln(ll[i],rr[i]);\n    lca[i]:=ask(ll[i],rr[i]);\n    dis[i]:=sum[ll[i]]+sum[rr[i]]-sum[lca[i]]*2;\n    maxdis:=max(maxdis,dis[i]);\n  end;\n  l:=0; r:=maxdis;\n  while l<=r do\n  begin\n    mid:=(l+r) div 2;\n    if check(mid) then begin ans:=mid; r:=mid-1 end\n    else l:=mid+1;\n  end;//\u4e8c\u5206\n  writeln(ans);\nend.\n```\n",
        "postTime": 1564835957,
        "uid": 45199,
        "name": "_TLJYatm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u6bd2\u7624\u554a\uff01\uff01\uff01\uff01\n\n\u8fd9\u9053\u9898\u76ee\u771f\u7684\u8fc7\u4e8e\u6bd2\u7624\u4e86 \u5bf9\u4e8e\u6211\u4e00\u4e2a\u849f\u84bb \u53ea\u4f1a\u500d\u589eLCA \u4e0d\u4f1a\u6811\u94fe\u5256\u5206\u5c31\u975e\u5e38\u5361\u5e38\u4e86\n\n\u4e0d\u5438\u6c27\u53ea\u80fd95points\n\n\u5438\u5b8c\u4e4b\u540e#13 1996ms\n\n\u8fd8\u662f\u592a\u83dc \u5e38\u6570\u592a\u5927\n\n\u9898\u76ee\u94fe\u63a5\n\n[P2680  \u8fd0\u8f93\u8ba1\u5212](https://www.luogu.org/problemnew/show/P2680)\n\n\u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u4f60\u4e00\u68f5\u6811 ,\u6bcf\u4e2a\u8fb9\u6709\u8fb9\u6743\u503c\uff0c\u76ee\u524d\u6709m\u4e2a\u8ba1\u5212\u540c\u65f6\u4eceUi\u5230Vi\uff0c\u4ee5\u6700\u957f\u65f6\u95f4\u4e3a\u6700\u7ec8\u65f6\u95f4\uff0c\u73b0\u5728\u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u5c06\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u503c\u53d8\u62100\uff0c\u6c42\u6700\u957f\u65f6\u95f4\u7684\u6700\u5c0f\u503c\u3002\n\n\u5982\u679c\u7ffb\u8bd1\u6210\u8fd9\u6837\u7684\u8bdd\u5176\u5b9e\u5c31\u975e\u5e38\u5bb9\u6613\u53ef\u60f3\u5230 \u4e8c\u5206\u4e86 \u6c42\u6700\u5927\u7684\u6700\u5c0f\n\n\u6211\u4eec\u7b80\u5355\u7406\u89e3\u4e00\u4e0b\u4e8c\u5206\u7684\u6b63\u786e\u6027\uff1a\n\n\u8bbea<b,\u5df2\u77e5a\u53ef\u4ee5\u6ee1\u8db3\u8fd0\u8f93\u8ba1\u5212 \u90a3\u4e48b\u4e5f\u81ea\u7136\u4e00\u5b9a\u6ee1\u8db3\n\n\u6240\u4ee5\u662f\u7b26\u5408\u5355\u8c03\u9012\u589e\u53ef\u4ee5\u8fdb\u884c\u4e8c\u5206\n\n\u4e8c\u5206\u4e4b\u540e\u6211\u4eec\u8fdb\u884c\u5224\u65ad \u5f53\u524d\u7684\u503c\u662f\u5426\u53ef\u884c \u5982\u679c\u53ef\u884c\u53d6\u5de6\u8fb9 \u4e0d\u53ef\u884c\u53d6\u53f3\u8fb9\n\n\u8fdb\u4e00\u6b65\u601d\u8003\u5982\u4f55\u8fdb\u884c\u5224\u65ad\n\n\u9996\u5148\u6211\u4eec\u8981\u6c42\u51fa\u6bcf\u4e2a\u8def\u5f84\u7684\u957f\u5ea6 \u5b8c\u5168\u53ef\u4ee5\u7528LCA\u6811\u4e0a\u5dee\u5206\u7ef4\u62a4 \uff08dis[a]+dis[b]-2*dis[LCA(a,b)]\uff09\n\n\u8fdb\u4e00\u6b65\n\n\u7136\u540e\u6211\u4eeccheck\u51fd\u6570\u4e2d\u8bb0\u5f55\u8def\u7ecf\u957f\u5927\u4e8e\u4e8c\u5206mid \u7136\u540e\u7edf\u8ba1\u4e00\u4e0b \u8fd9\u4e2a\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u6570\n\n\u63a5\u4e0b\u6765\u5224\u65ad\u70b9 \u662f\u5426\u90fd\u88ab\u7ecf\u8fc7 \u5e76\u4e14\u8981\u8bb0\u5f55 \u8fd9\u4e2a\u8fb9\u7684\u6743\u503c\u662f\u5426\u5927\u4e8e\u6700\u5927\u5dee\u503c \u5426\u5219mid\u4f9d\u65e7\u4e0d\u5408\u6cd5\n\n\u5176\u5b9e\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u8981\u627e\u4e00\u4e2a\u6700\u957f\u7684\u8def\u5f84\u4ea4\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u6838\u5fc3\u4ee3\u7801\u5c31\u4e09\u4e2a\u6b65\u9aa4\uff1a\n\n\u6c42LCA\uff08\u9884\u5904\u7406\u5904\u7406\u8f83\u591a\u4fe1\u606f\uff09 check\u51fd\u6570   DFS\u904d\u5386\n\n\u8d34\u4e00\u4e0b\u6807\u4ee3\u7801\uff1a\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e6;\nstruct node{\n\tint next,to,w;\n}e[N<<1];\ninline int read(){\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-')\n            f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        x=(x<<1)+(x<<3)+(ch^48);\n        ch=getchar();\n    }\n    return x*f;\n}\nint head[N],cnt,a[N],b[N],f[N][23],dep[N],lca[N],ans=0x3f3f3f3f,dis[N],d[N],val[N],t,sum[N],n,m;\ninline void add(int x,int y,int w){\n    e[++cnt].next=head[x];\n    e[cnt].to=y;\n    e[cnt].w=w;\n    head[x]=cnt;\n}\ninline void bfs(){\n\tqueue<int>q; \n\tq.push(1);\n\tdep[1]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].to;\n\t\t\tif(dep[v]) continue;\n\t\t\tdep[v]=dep[u]+1;\n\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\tval[v]=e[i].w;\n\t\t\tf[v][0]=u;\n\t\t\tfor(int j=1;j<=t;j++){\n\t\t\t\tf[v][j]=f[f[v][j-1]][j-1];\n\t\t\t}\n\t\t\tq.push(v);\n\t\t}\n\t}\n}\ninline void dfs(int x,int fa){\n\t   for(int i=head[x];i;i=e[i].next){\n\t   \tint y=e[i].to;\n\t   \tif(y==fa) continue;\n\t \tdfs(y,x);\n\t \tsum[x]+=sum[y];\n\t   }\n} \ninline bool check(int lim){\n\t   int cnt=0,now=0;\n\t   memset(sum,0,sizeof(sum));\n\t   for(int i=1;i<=m;i++){\n\t   \t   if(d[i]>lim){\n\t          cnt++;\n\t   \t   \t  now=max(now,d[i]-lim);\n\t   \t   \t  sum[a[i]]++;\n\t   \t   \t  sum[b[i]]++;\n\t   \t   \t  sum[lca[i]]-=2;\n\t   \t   }\n\t   }\n\t   dfs(1,0);\n\t   for(int i=1;i<=n;i++){\n\t   \tif(sum[i]==cnt&&val[i]>=now) return 1;\n   \t   }\n\t   return false; \n} \ninline int Lca(int x,int y){\n    if(dep[x]>dep[y]) swap(x,y);\n    for(int i=t;i>=0;i--){\n    \tif(dep[f[y][i]]>=dep[x]) y=f[y][i];\n    }\n    if(x==y) return x;\n    for(int i=t;i>=0;i--){\n    \tif(f[x][i]!=f[y][i]){\n    \t\tx=f[x][i];\n    \t\ty=f[y][i];\n    \t}\n    }\n    return f[x][0];\n}\nint main(){\n\tn=read(),m=read();\n\tt=log(n)/log(2);\n\tfor(int i=1;i<n;i++){\n\t    int u,v,w;\n\t\tu=read(),v=read(),w=read();\n\t\tadd(u,v,w);\n\t\tadd(v,u,w); \n\t} \n\tbfs(); \n\tint l=1,r=0;\n\tfor(int i=1;i<=m;i++){\n\t\ta[i]=read(),b[i]=read();\n\t    lca[i]=Lca(a[i],b[i]);\n\t    if(a[i]==b[i]&&m==1) {\n\t    puts(\"0\");\n\t\treturn 0;}\n\t \telse  d[i]=dis[a[i]]+dis[b[i]]-dis[lca[i]]*2; \n\t \tr=max(r,d[i]);\n\t}\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)) ans=min(ans,mid),r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n} \n```\n\n\n\u8fd9\u9898\u771f\u7801\u519c \u4e5f\u633a\u5361\u5e38 \u4f46\u662f\u5bf9\u4eba\u63d0\u5347\u8fd8\u662f\u633a\u5927\u7684\n\n**\u5b8c\u7ed3\u6492\u82b1**\n\n",
        "postTime": 1561553896,
        "uid": 142373,
        "name": "Kendrick_Z",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u8fd0\u8f93\u8ba1\u5212\uff08\u6811\u4e0a\u5dee\u5206+LCA\u590d\u4e60\uff09"
    },
    {
        "content": "\u8fd9\u9898\u5c31\u6ca1\u5f80\u4e8c\u5206\u4e0a\u60f3\uff0c\u76f4\u63a5\u4f7f\u7528\u7ebf\u6bb5\u6811+\u6811\u5256\u5927\u66b4\u529b\n\n\u505a\u6cd5\u5c31\u662f\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9$(u, fa[u], w)$\uff0c\u6c42\u51fa\u5220\u9664\u8fd9\u6761\u8fb9\u540e\u7684\u7b54\u6848\u3002\n\n\u5047\u8bbe\u5df2\u7ecf\u6c42\u51fa\u4e86\u4e24\u4e2a\u6570\u7ec4$past[u], nopast[u]$\u5206\u522b\u8868\u793a\u7ecf\u8fc7u\u7684\u8def\u5f84\u957f\u5ea6\u6700\u5927\u503c, \u4e0d\u8fc7u\u7684\u8def\u5f84\u957f\u5ea6\u6700\u5927\u503c\n\n\u90a3\u4e48\u5220\u9664\u8fb9$(u, fa[u], w)$\u540e\u7b54\u6848\u5c31\u662f$max(past[u] - w, nopast[u])$\n\n\u8003\u8651\u600e\u4e48\u5728\u6811\u5256\u65f6\u5019\u7528\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4$past, nopast$\n\n\u52a0\u5165\u4e00\u6761\u6811\u4e0a\u8def\u5f84$(u, v, d)$\u7684\u65f6\u5019\n\n$past$\u5f88\u65b9\u4fbf\u66f4\u65b0\uff0c\u6811\u5256\u7684\u65f6\u5019\u533a\u95f4\u53d6$max$\u4e00\u4e0b \n\n$nopast$\u5f88\u9700\u8981\u628apast\u66f4\u65b0\u7684\u533a\u95f4\u8bb0\u5f55\u4e0b\u6765\u7136\u540e\u6392\u5e8f\uff0c\u8bb0\u4e3a$[l_1, r_1],[l_2, r_2],...,[l_k, r_k]$\n\n\u7136\u540e\u5728$nopast$\u7684\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0$[1, l_1-1], [r_1+1, l_2-1], ..., [r_k + 1, n]$ \u8fd9\u4e9b\u533a\u95f4\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5426\u8fc7\u5927\uff1f\n\n\u52a0\u5165\u8def\u5f84\u64cd\u4f5c\u6bcf\u6b21\u66f4\u65b0$past$\u7684$O(\\log n)$\u4e2a\u533a\u95f4\uff0c$nopast$\u533a\u95f4\u5b9e\u9645\u4e0a\u4e5f\u53ea\u6709$O(\\log n)$\u4e2a\uff0c\u6392\u5e8f\u9700\u8981$O(\\log n\\log\\log n)$\u7684\u65f6\u95f4\uff0c\u4e00\u6b21\u52a0\u5165\u8def\u5f84\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u53ea\u6709$O(\\log n\\log\\log n+\\log^2n)$\uff0c\u603b\u590d\u6742\u5ea6\u53ea\u6709$O(n+m(\\log n\\log\\log n+\\log^2n))$\n\n\uff08\u96fe\n\n\u6700\u540e\u6709\u4e00\u4e2a\u5e38\u6570\u4f18\u5316\uff0c\u5373\u5176\u5b9e\u4e0d\u9700\u8981\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u76f4\u63a5\u679a\u4e3e\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8fb9\u5373\u53ef\uff08\u9053\u7406\u5341\u5206\u7b80\u5355\u4e0d\u518d\u8d58\u8ff0\uff09\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u7ed9\u51fa\u4e86\u8be6\u7ec6\u6ce8\u91ca.\u6ce8\u610f\u7ec6\u8282.\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <vector>\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N = 3e5 + 10;\n\nstruct Edge { int v, w; };\nvector<Edge> G[N];\n\nint n, m, df[N];\nint fa[N], dep[N], son[N], sz[N];\nint top[N], idx[N], seg[N], dfn;\nLL dep2[N], ans, past[N], nopast[N];\n//fa, dep, son, sz, top, idx, seg\u4e3a\u6811\u5256\u5185\u5bb9 \n//df[u]\u8868\u793au\u5230fa[u]\u7684\u8ddd\u79bb ; dep2[u]\u8868\u793a\u6839\u5230u\u5230\u8ddd\u79bb \n//past[u]\u8868\u793a\u7ecf\u8fc7\u70b9u\u7684\u8def\u5f84\u6700\u5927\u503c\n//nopast[u]\u8868\u793a\u4e0d\u8fc7\u70b9u\u7684\u8def\u5f84\u6700\u5927\u503c \nvoid dfs1(int u, int f) {\n\tsz[u] = 1; dep[u] = dep[fa[u] = f] + 1;\n\tfor(int i = 0; i < G[u].size(); i ++) {\n\t\tint & v = G[u][i].v, & w = G[u][i].w;\n\t\tif(v ^ f) {\n\t\t\tdep2[v] = dep2[u] + (df[v] = w); dfs1(v, u); sz[u] += sz[v];\n\t\t\tif(sz[v] > sz[son[u]]) son[u] = v;\n\t\t}\n\t}\n}\nvoid dfs2(int u, int topf) {\n\ttop[seg[idx[u] = ++ dfn] = u] = topf;\n\tif(!son[u]) return ;\n\tdfs2(son[u], topf);\n\tfor(int i = 0, v; i < G[u].size(); i ++)\n\t\tif(!idx[v = G[u][i].v]) dfs2(v, v);\n}\n// \u4ee5\u4e0a\u4e3a\u6811\u94fe\u5256\u5206\u677f\u5b50 \nstruct Seg {\n\t// \u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u503c\n\tLL tag[N << 2] = {0};\n\tvoid pushd(int k) { //\u61d2\u6807\u8bb0\u4e0b\u4f20 \n\t\tif(!tag[k]) return ;\n\t\ttag[k << 1] = max(tag[k << 1], tag[k]);\n\t\ttag[k << 1 | 1] = max(tag[k << 1 | 1], tag[k]);\n\t\ttag[k] = 0;\n\t}\n\tvoid modify(int k, int l, int r, int L, int R, LL w) { //\u533a\u95f4\u4fee\u6539 \n\t\tif(l > R || r < L) return ;\n\t\tif(L <= l && r <= R) return void (tag[k] = max(tag[k], w));\n\t\tif(l == r) return ;\n\t\tint mid = l + r >> 1; pushd(k);\n\t\tif(L <= mid) modify(k << 1, l, mid, L, R, w);\n\t\tif(mid < R) modify(k << 1 | 1, mid + 1, r, L, R, w);\n\t}\n\tLL query(int k, int l, int r, int p) { //\u5355\u70b9\u67e5\u8be2 \n\t\tif(l == r) return tag[k];\n\t\tint mid = l + r >> 1; pushd(k);\n\t\tif(p <= mid) return query(k << 1, l, mid, p);\n\t\treturn query(k << 1 | 1, mid + 1, r, p);\n\t}\n\tvoid getmx(int k, int l, int r, LL * arr) { //\u83b7\u53d6\u53f6\u5b50\u7ed3\u70b9\u4fe1\u606f \n\t\tif(l == r) return void (arr[seg[l]] = tag[k]);\n\t\tint mid = l + r >> 1; pushd(k);\n\t\tgetmx(k << 1, l, mid, arr);\n\t\tgetmx(k << 1 | 1, mid + 1, r, arr);\n\t}\n} s1, s2;\n// s1\u7ef4\u62a4\u7ecf\u8fc7i\u7684\u8def\u5f84\u6700\u5927\u503c\n// s2\u7ef4\u62a4\u4e0d\u8fc7i\u7684\u8def\u5f84\u6700\u5927\u503c \n\nLL TreeDis(int u, int v) { //\u6811\u5256\u6c42\u4e24\u70b9\u8ddd\u79bb \n\tconst int uu = u, vv = v;\n\tfor(; top[u] ^ top[v]; u = fa[top[u]])\n\t\tif(dep[top[u]] < dep[top[v]]) u ^= v ^= u ^= v;\n\tif(dep[u] > dep[v]) u ^= v ^= u ^= v;\n\treturn dep2[uu] + dep2[vv] - 2ll * dep2[u];\n}\n\nvoid TreeAdd(int u, int v, const LL & d) { //\u52a0\u5165\u4e00\u6761\u8def\u5f84 \n\tstruct Node {\n\t\tint l, r;\n\t\tbool operator < (const Node & node) const { return l < node.l; }\n\t};\n\tstatic Node pos[N];\n\tint cnt = 0;\n\tfor(; top[u] ^ top[v]; u = fa[top[u]]) {\n\t\tif(dep[top[u]] < dep[top[v]]) u ^= v ^= u ^= v;\n\t\ts1.modify(1, 1, n, idx[top[u]], idx[u], d);\n\t\tpos[cnt ++] = Node {idx[top[u]], idx[u]};\n\t}\n\tif(dep[u] > dep[v]) u ^= v ^= u ^= v;\n\tif(idx[u] ^ idx[v]) {\n\t\t//\u6ce8\u610fidx[u]\u8981 + 1, lca\u5230fa[lca]\u5230\u8fb9\u662f\u4e0d\u7ecf\u8fc7\u7684 \n\t\ts1.modify(1, 1, n, idx[u] + 1, idx[v], d);\n\t\tpos[cnt ++] = Node {idx[u] + 1, idx[v]};\n\t}\n\tsort(pos, pos + cnt); //\u628a\u8986\u76d6\u533a\u95f4\u6392\u5e8f\n\t//\u628a\u6ca1\u6709\u8986\u76d6\u7684\u533a\u95f4\u66f4\u65b0 s2, \u6ce8\u610f\u6700\u5de6\u548c\u6700\u53f3\u7684\u533a\u95f4\u4e5f\u8981\u66f4\u65b0 \n\tif(pos[0].l > 1) s2.modify(1, 1, n, 1, pos[0].l - 1, d);\n\tif(pos[cnt - 1].r < n) s2.modify(1, 1, n, pos[cnt - 1].r + 1, n, d);\n\tfor(int i = 0; i < cnt - 1; i ++) {\n\t\tint ll = pos[i].r + 1, rr = pos[i + 1].l - 1;\n\t\tif(ll <= rr) s2.modify(1, 1, n, ll, rr, d);\n\t}\n}\n\nvoid TreeForce(int u, int v) { //\u5728\u6811\u4e0a\u66b4\u529b\u8df3\u679a\u4e3e\u8fb9 \n\tint uu = u, vv = v;\n\tfor(; top[u] ^ top[v]; u = fa[top[u]])\n\t\tif(dep[top[u]] < dep[top[v]]) u ^= v ^= u ^= v;\n\tif(dep[u] > dep[v]) u ^= v ^= u ^= v;\n\tfor(int i = uu; i ^ u; i = fa[i]) //u -> lca \n\t\tans = min(ans, max(past[i] - df[i], nopast[i]));\n\tfor(int i = vv; i ^ u; i = fa[i]) //v -> lca\n\t\tans = min(ans, max(past[i] - df[i], nopast[i]));\n}\n\nint main() {\n\tint u, v, w;\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i < n; i ++) {\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\tG[u].push_back(Edge {v, w});\n\t\tG[v].push_back(Edge {u, w});\n\t}\n\tdfs1(1, 0); dfs2(1, 1);\n\tint su, sv; LL maxd = -1;   //\u8bb0\u5f55\u6700\u957f\u8def\u5f84 \n\tfor(int i = 1; i <= m; i ++) {\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tLL d = TreeDis(u, v);\n\t\tTreeAdd(u, v, d);\n\t\tans = max(ans, d);\n\t\tif(d > maxd) maxd = d, su = u, sv = v;\n\t}\n\ts1.getmx(1, 1, n, past);    //\u83b7\u53d6\u7ecf\u8fc7i\u7684\u8def\u5f84\u6700\u5927\u503c \n\ts2.getmx(1, 1, n, nopast);  //\u83b7\u53d6\u4e0d\u8fc7i\u7684\u8def\u5f84\u6700\u5927\u503c \n\tTreeForce(su, sv);          //\u5728\u6700\u957f\u8def\u5f84\u4e0a\u679a\u4e3e\u8fb9 \n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n} \n\n```",
        "postTime": 1540528995,
        "uid": 20375,
        "name": "hongzy",
        "ccfLevel": 9,
        "title": "P2680 \u8fd0\u8f93\u8ba1\u5212\u300c\u6811\u94fe\u5256\u5206\u300d"
    },
    {
        "content": "\u697c\u4e0a\u4e0b\u5199\u7684\u90fd\u662f\u6811\u4e0a\u5dee\u5206\u4e8c\u5206\u4ec0\u4e48\u7684\uff0c\u6211\u63d0\u4f9b\u4e2a\u65b0\u65b9\u6cd5\u3002\n\n\u9884\u5904\u7406\u6bcf\u5bf9\u8282\u70b9\u7684\u8ddd\u79bb\uff08LCA\uff09\uff0c\u540c\u65f6\u627e\u51fa\u6700\u957f\u94fe\uff0c\u7f29\u77ed\u7684\u8fb9\u4e00\u5b9a\u5728\u8fd9\u6761\u94fe\u4e0a\u3002\u6b64\u8fc7\u7a0b\u4e3aO(nlogn)\u3002\n\n\u679a\u4e3e\u94fe\u4e0a\u6bcf\u4e00\u6761\u8fb9\uff0c\u5bf9\u4e8e\u6240\u6709\u70b9\u5bf9\uff0c\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\u4e86\uff1a1\uff09\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u70b9\u5bf9\uff1b2\uff09\u4e0d\u7ecf\u8fc7\u7684\u3002\n\n\u5224\u65ad\u65b9\u6cd5\uff1a\u5272\u6389\u8fd9\u6761\u8fb9\uff0c\u5224\u65ad\u4e24\u70b9\u662f\u5426\u8fde\u901a\uff0c\u4ecd\u8fde\u901a\uff0c\u8bf4\u660e\u4e0d\u7ecf\u8fc7\uff0c\u53cd\u4e4b\u7ecf\u8fc7\u3002\u4e8e\u662f\u4e00\u68f5\u6811\u5c31\u88ab\u62c6\u6210\u4e86\u4e24\u68f5\u3002\u5bf9\u4e8e\u7ecf\u8fc7\u7684\u8def\u5f84\uff08\u5305\u542b\u6700\u957f\u7684\uff09\uff0c\u8ddd\u79bb\u90fd\u4f1a\u88ab\u7f29\u77ed\uff0c\u4f46\u56e0\u4e3a\u6700\u957f\u7684\u8def\u5f84\u5b58\u5728\uff0c\u6240\u4ee5\u65e0\u9700\u8003\u8651\u7ecf\u8fc7\u7684\u5176\u4ed6\u8def\u5f84\uff1b\u800c\u4e0d\u7ecf\u8fc7\u7684\u8def\u5f84\u4e4b\u4e2d\u53d6\u4e2a\u6700\u5927\u503c\uff0c\u5c06\u6700\u957f\u8def\u5f84\u51cf\u53bb\u8fb9\u7684\u6743\u548c\u4e0d\u7ecf\u8fc7\u8be5\u8fb9\u7684\u6700\u5927\u503c\u4e2d\u518d\u53d6\u6700\u5927\u503c\uff0c\u679a\u4e3e\u6240\u6709\u8fb9\u7684\u65f6\u5019\u518d\u53d6\u4e2a\u6700\u5c0f\u503c\u5c31OK\u4e86\u3002\n\n\u5728\u94fe\u4e0a\u4e00\u6761\u63a5\u7740\u4e00\u6761\u5224\u65ad\u8fb9\u65f6\uff0c\u5176\u4e2d\u7684\u4e00\u68f5\u5b50\u6811\u4f1a\u83b7\u5f97\u66f4\u591a\u7684\u8282\u70b9\uff0c\u5176\u4e2d\u53ef\u80fd\u5c31\u5305\u62ec\u7aef\u70b9\uff0c\u83b7\u5f97\u5176\u4e2d\u4e00\u4e2a\u8868\u793a\u6b64\u70b9\u5bf9\u7ecf\u8fc7\u8be5\u8fb9\uff0c\u83b7\u5f97\u53e6\u4e00\u4e2a\u8868\u793a\u4e0d\u7ecf\u8fc7\u4e86\uff0c\u56e0\u4e3a\u90fd\u5728\u5b50\u6811\u4e2d\u8fde\u901a\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5224\u65ad\u5b8c\u6240\u6709\u7684\u8fb9\u540e\uff0c\u6240\u6709\u8282\u70b9\u90fd\u8f6c\u81f3\u5b50\u6811\u4e2d\uff0c\u590d\u6742\u5ea6\u4e3aO(n)\u3002\n\n\u5bf9\u4e8e\u5224\u65ad\u4e0d\u7ecf\u8fc7\u8be5\u8fb9\u7684\u70b9\u5bf9\u7684\u6700\u5927\u503c\uff0c\u7ef4\u62a4\u4e2a\u7ebf\u6bb5\u6811\uff0c\u5f00\u59cb\u65f6\u7ef4\u62a4\u7b2ci\u4e2a\u70b9\u5bf9\u8ddd\u79bbd[i]\uff0c\u5728\u5f97\u5230\u4e00\u4e2a\u7aef\u70b9\u540e\u4fee\u6539\u62100\uff0c\u53e6\u4e00\u4e2a\u4e5f\u5f97\u5230\u65f6\u4fee\u6539\u56de\u6765\u3002\u6b64\u8fc7\u7a0b\u4e3aO(nlogn)\u3002\n\n\u5206\u6790\u7ed3\u675f\u3002\n\n\u672c\u4eba\u4ee3\u7801\u6bd4\u8f83\u7c97\u52a3\uff0c\u4e0d\u653e\u4e86\uff0c\u4e0a\u9762\u601d\u8def\u4e5f\u5f88\u6e05\u6670\u4e86\u3002",
        "postTime": 1539275120,
        "uid": 7706,
        "name": "AC_Evil",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u697c\u4e0b\u51e0\u4f4d\u90fd\u662f\u7528\u7684\u500d\u589e\uff1f\n\u90a3\u6211\u6765\u53d1\u4e00\u4efdtarjan\u597d\u4e86\uff0c\n\u8868\u793a\u521a\u624d\u624d\u53d1\u73b0\u53f3\u8fb9\u7684\u624d\u662f\u771f\u6b63\u663e\u793a\u51fa\u6765\u7684\uff0c\uff0c\uff0c\n\u8fd8\u8bf7\u7ba1\u7406\u5458\u539f\u8c05\u6211\u4e4b\u524d\u4ea4\u76842\u4efd\u51cc\u4e71\u7684\u9898\u89e3\u3002\u3002\u3002\n\t#include<bits/stdc++.h>\n\tusing namespace std;\n\t#define AC 600100//\u4e3a\u4ec0\u4e48300100\u4e0d\u591f\uff1f\n\t#define Ri register int\n\tint l[AC],r[AC],LCA[AC],n,m,L,R,mid,Ans,maxway,maxn,dist[AC],len[AC],dis[AC];//\u5e38\u89c4\u6570\u7ec4\n\tint tot=1,date[AC*2],Next[AC*2],Head[AC],father[AC],ans[AC];//tarjan\u6c42LCA\n\tint c[AC],a[AC];//\u5dee\u5206\u6570\u7ec4\n\tint Ttot=1,Tdate[AC*2],Tnext[AC*2],Thead[AC],value[AC];//\u5b58\u56fe\n\tbool z[AC],vis[AC],visit[AC];\n\n\tinline int read()\n\t{\n\t\tint x=0;char c;\n\t\twhile(isspace(c=getchar()));\n\t\twhile(c>='0' && c<='9')x=x*10+c-'0',c=getchar();\n\t\treturn x;\n\t}\n\n\tinline int Max(int A,int b)\n\t{\n\t\tint c=(A-b) >> 31;\n\t\treturn (A & ~ c) | (b & c);\n\t}\n\n\tint find(int x)\n\t{\n\t\tif(father[x]!=x)return father[x]=find(father[x]);\n\t\telse return x;\n\t}\n\n\tinline void add(int f,int w)\n\t{\n\t\tdate[++tot]=w,Next[tot]=Head[f],Head[f]=tot;\n\t\tdate[++tot]=f,Next[tot]=Head[w],Head[w]=tot;\n\t}\n\n\tinline void Tadd(int f,int w,int S)\n\t{\n \t    Tdate[++Ttot]=w,value[Ttot]=S,Tnext[Ttot]=Thead[f],Thead[f]=Ttot;\t\t\t\n  \t   Tdate[++Ttot]=f,value[Ttot]=S,Tnext[Ttot]=Thead[w],Thead[w]=Ttot;\n\t}\n\n\tinline void pre()\n\t{\n\t\tRi A,B,C;\n\t\tn=read(),m=read(),father[1]=1;//\u9ed8\u8ba41\u4e3aroot\n\t\tfor(Ri i=1;i<=n;i++)father[i]=i;//error!!!\u521d\u59cb\u5316\n\t\tfor(Ri i=1;i<n;i++)\t\n\t\t{\n\t\t\tA=read(),B=read(),C=read();\n\t\t\tTadd(A,B,C);\n\t\t}\n\t\tfor(Ri i=1;i<=m;i++)\t\n\t\t{\n\t\t\tl[i]=read(),r[i]=read();\n\t\t\tadd(l[i],r[i]);\n\t\t}\n\t}\n\n\tvoid DFS(int x)\n\t{\n\t\tRi now;\n\t\tz[x]=true;\n\t\tfor(Ri i=Thead[x]; i ;i=Tnext[i])\n\t\t{\n\t\t\tnow=Tdate[i];\n\t\t\tif(!z[now])//\u5982\u679c\u4e0d\u662f\u7236\u4eb2\u5c31\u5f80\u4e0b\n\t\t\t{\n\t\t\t\tDFS(now);\n\t\t\t\tfather[now]=x;\n\t\t\t}\n\t\t}\n\t\tfor(Ri i=Head[x]; i ;i=Next[i])\n\t\t{\n\t\t\tnow=date[i];\n\t\t\tif(z[now] && !ans[i^1]) ans[i]=find(now);//\u56e0\u4e3a\u81ea\u5df1\u8fd9\u4e00\u8fb9\u8fd8\u6ca1\u641e\u5b8c\uff0c\u6240\u4ee5find\uff08\u5bf9\u9762\u7684\uff09\n\t\t}\n\t}\n\n\tvoid getlen(int x)//\u7edf\u8ba1\u51fa\u6bcf\u4e2a\u70b9\u5f80\u4e0a\u8d70\u6709\u591a\u957f\uff0c\u4fbf\u4e8e\u914d\u5408LCA\u8ba1\u7b97\u4e00\u6761\u8def\u5f84\u7684\u957f\u5ea6\n\t{//\u8fd9\u91cc\u4e0d\u80fd\u548cLCA\u4e00\u6837\uff0c\u56e0\u4e3aLCA\u4e2dfather\u662f\u5728\u4e0b\u9762\u90fd\u66f4\u65b0\u5b8c\u540e\u624d\u8981\u7528\u5230\uff0c\u800c\u8fd9\u91cc\u7684len\u662f\u8981\u62ff\u6765\u66f4\u65b0\u4e0b\u9762\u7684\uff0c\u6240\u4ee5\u8981\u5728\u53bb\u4e0b\u9762\u4e4b\u524d\u5c31\u5904\u7406\u597d\n\t\tRi now;\n\t\tvis[x]=true;\n\t\tfor(Ri i=Thead[x]; i ;i=Tnext[i])\n\t\t{\n\t\t\tnow=Tdate[i];\n\t\t\tif(!vis[now])\n\t\t\t{\n\t\t\t\tlen[now]=value[i]+len[x];//\u5728\u8fdb\u5165\u4e4b\u524d\u5c31\u4fee\u6539\n\t\t\t\tgetlen(now);\n\t\t\t\tdist[now]=value[i];//\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7236\u8fb9\u7684\u503c\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid work()//\u6c42\u51fa\u6240\u6709\u8fb9\u7684LCA\n\t{\n\t\tRi cnt=0;\n\t\tDFS(1);\n\t\tfor(Ri i=1;i<=2*m+1;i++)//error!!!\u8981\u53cc\u500d\u8fb9\n\t\t\tif(ans[i])LCA[++cnt]=ans[i];//\u56e0\u4e3a\u662f\u6309\u987a\u5e8f\u52a0\u7684\u8fb9\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e86\n\t\tgetlen(1);\n\t\tfor(Ri i=1;i<=m;i++)//\u6c42\u51fa\u6bcf\u6761\u8def\u7684\u957f\u5ea6\n\t\tdis[i]=len[l[i]]+len[r[i]]-len[LCA[i]]*2,maxn=Max(maxn,dis[i]);//\u8bb0\u5f55\u6700\u5927\u7684\u8fb9\n\t}\n\n\tvoid getdiffer(int x)//\u7edf\u8ba1\u51fa\u6bcf\u6761\u8fb9\u7684\u6743\u503c(\u5dee\u5206\uff09\n\t{\n\t\tRi now;\n\t\tvisit[x]=true;\n\t\ta[x]=c[x];\n\t\tfor(Ri i=Thead[x]; i ;i=Tnext[i])\n\t\t{\n\t\t\tnow=Tdate[i];\n\t\t\tif(!visit[now])\n\t\t\t{\n\t\t\t\tgetdiffer(now);\n\t\t\t\ta[x]+=a[now];//a[x]=c[x]+c[\u6240\u6709\u5b50\u8282\u70b9]=c[x]+a[\u6240\u6709\u513f\u5b50]\n\t\t\t}\n\t\t}\n\t}\n\n\tinline bool check()\n\t{\n\t\tint cnt=0;\n\t\tmemset(c,0,sizeof(c));//error!!!!\u4e3a\u4ec0\u4e48\u4e0d\u80fdsizeof(int)*n\uff1f\uff1f\uff1f\n\t\tmemset(visit,0,sizeof(visit));//error!!!\u8fd9\u4e2a\u8981\u91cd\u7f6e\u554a,\u4e3a\u4ec0\u4e48\u76f4\u63a5n\u4e0d\u884c\uff1f\n\t\tmaxway=0;\n\t\tfor(Ri i=1;i<=m;i++)\n\t\t{\n\t\t\tif(dis[i]>mid)\n\t\t\t\tc[l[i]]++,c[r[i]]++,c[LCA[i]]-=2,cnt++;//\u7edf\u8ba1\u5dee\u5206\u6570\u7ec4\n\t\t}\n\t\tgetdiffer(1);//\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u70b9\u7684\u4e0a\u9762\u7684\u8fb9\u7ecf\u8fc7\u4e86\u591a\u5c11\u6b21\n\t\tfor(Ri i=1;i<n;i++)\n\t\t\tif(a[i]==cnt)\tmaxway=Max(maxway,dist[i]);\n\t\treturn maxn-maxway<=mid;\n\t}\n\n\tinline void half()\n\t{\n\t\tL=0,R=Ans=maxn;//error\uff01\uff01\uff01\u6700\u5c11\u53ef\u4ee5\u4e0d\u8981\u65f6\u95f4\u554a\n\t\twhile(L<R)\n\t\t{\n\t\t\tmid=(L+R)/2;\n\t\t\tif(check())R=mid,Ans=mid;\n\t\t\telse L=mid+1;\n\t\t}\n\t\tmid=L;\n\t\tif(check())Ans=L;\n\t\tprintf(\"%d\\n\",Ans);\n\t}\n\n\tint main()\n\t{\n\t\tfreopen(\"in.in\",\"r\",stdin);\n\t\tpre();\n\t\twork();\n\t\thalf();\n\t\tfclose(stdin);\n\t\treturn 0;\n\t}",
        "postTime": 1517670014,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "------------\n\n\u95ee\u9898\u63cf\u8ff0\n\n    \n\u516c\u5143 2044 \u5e74,\u4eba\u7c7b\u8fdb\u5165\u4e86\u5b87\u5b99\u7eaa\u5143\u3002\n\nL \u56fd\u6709 n \u4e2a\u661f\u7403,\u8fd8\u6709 n-1 \u6761\u53cc\u5411\u822a\u9053,\u6bcf\u6761\u822a\u9053\u5efa\u7acb\u5728\u4e24\u4e2a\u661f\u7403\u4e4b\u95f4,\u8fd9 n-1 \u6761\u822a\u9053\u8fde\u901a\u4e86 L \u56fd\u7684\u6240\u6709\u661f\u7403\u3002\n\n\u5c0f P \u638c\u7ba1\u4e00\u5bb6\u7269\u6d41\u516c\u53f8,\u8be5\u516c\u53f8\u6709\u5f88\u591a\u4e2a\u8fd0\u8f93\u8ba1\u5212,\u6bcf\u4e2a\u8fd0\u8f93\u8ba1\u5212\u5f62\u5982:\u6709\u4e00\u8258\u7269\u6d41\u98de\u8239\u9700\u8981\u4ece ui \u53f7\u661f\u7403\u6cbf\u6700\u5feb\u7684\u5b87\u822a\u8def\u5f84\u98de\u884c\u5230 vi \u53f7\u661f\u7403\u53bb\u3002\u663e\u7136,\u98de\u8239\u9a76\u8fc7\u4e00\u6761\u822a\u9053 \u662f\u9700\u8981\u65f6\u95f4\u7684,\u5bf9\u4e8e\u822a\u9053 j,\u4efb\u610f\u98de\u8239\u9a76\u8fc7\u5b83\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u4e3a tj,\u5e76\u4e14\u4efb\u610f\u4e24\u8258\u98de\u8239\u4e4b \u95f4\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u5e72\u6270\u3002\n\n\u4e3a\u4e86\u9f13\u52b1\u79d1\u6280\u521b\u65b0,L \u56fd\u56fd\u738b\u540c\u610f\u5c0f P \u7684\u7269\u6d41\u516c\u53f8\u53c2\u4e0e L \u56fd\u7684\u822a\u9053\u5efa\u8bbe,\u5373\u5141\u8bb8\u5c0f P \u628a\u67d0\u4e00\u6761\u822a\u9053\u6539\u9020\u6210\u866b\u6d1e,\u98de\u8239\u9a76\u8fc7\u866b\u6d1e\u4e0d\u6d88\u8017\u65f6\u95f4\u3002\n\n\u5728\u866b\u6d1e\u7684\u5efa\u8bbe\u5b8c\u6210\u524d\u5c0f P \u7684\u7269\u6d41\u516c\u53f8\u5c31\u9884\u63a5\u4e86 m \u4e2a\u8fd0\u8f93\u8ba1\u5212\u3002\u5728\u866b\u6d1e\u5efa\u8bbe\u5b8c\u6210\u540e, \u8fd9 m \u4e2a\u8fd0\u8f93\u8ba1\u5212\u4f1a\u540c\u65f6\u5f00\u59cb,\u6240\u6709\u98de\u8239\u4e00\u8d77\u51fa\u53d1\u3002\u5f53\u8fd9 m \u4e2a\u8fd0\u8f93\u8ba1\u5212\u90fd\u5b8c\u6210\u65f6,\u5c0f P \u7684 \u7269\u6d41\u516c\u53f8\u7684\u9636\u6bb5\u6027\u5de5\u4f5c\u5c31\u5b8c\u6210\u4e86\u3002\n\n\u5982\u679c\u5c0f P \u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u5c06\u54ea\u4e00\u6761\u822a\u9053\u6539\u9020\u6210\u866b\u6d1e,\u8bd5\u6c42\u51fa\u5c0f P \u7684\u7269\u6d41\u516c\u53f8\u5b8c\u6210\u9636\u6bb5 \u6027\u5de5\u4f5c\u6240\u9700\u8981\u7684\u6700\u77ed\u65f6\u95f4\u662f\u591a\u5c11?\n\n\n\n\u8f93\u5165\u683c\u5f0f\n\n        \n\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6b63\u6574\u6570 n\u3001m,\u8868\u793a L \u56fd\u4e2d\u661f\u7403\u7684\u6570\u91cf\u53ca\u5c0f P \u516c\u53f8\u9884\u63a5\u7684\u8fd0\u8f93\u8ba1\u5212\u7684\u6570\u91cf,\u661f\u7403\u4ece 1 \u5230 n \u7f16\u53f7\u3002\n\n\u63a5\u4e0b\u6765 n-1 \u884c\u63cf\u8ff0\u822a\u9053\u7684\u5efa\u8bbe\u60c5\u51b5,\u5176\u4e2d\u7b2c i \u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 ai, bi \u548c ti,\u8868\u793a\u7b2ci \u6761\u53cc\u5411\u822a\u9053\u4fee\u5efa\u5728 ai \u4e0e bi \u4e24\u4e2a\u661f\u7403\u4e4b\u95f4,\u4efb\u610f\u98de\u8239\u9a76\u8fc7\u5b83\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u4e3a ti\u3002\n\n\u63a5\u4e0b\u6765 m \u884c\u63cf\u8ff0\u8fd0\u8f93\u8ba1\u5212\u7684\u60c5\u51b5,\u5176\u4e2d\u7b2c j \u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 uj \u548c vj,\u8868\u793a\u7b2c j\u4e2a \u8fd0\u8f93\u8ba1\u5212\u662f\u4ece uj \u53f7\u661f\u7403\u98de\u5f80 vj \u53f7\u661f\u7403\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51fa \u51711\u884c,\u5305\u542b1\u4e2a\u6574\u6570,\u8868\u793a\u5c0fP\u7684\u7269\u6d41\u516c\u53f8\u5b8c\u6210\u9636\u6bb5\u6027\u5de5\u4f5c\u6240\u9700\u8981\u7684\u6700\u77ed\u65f6\u95f4\u3002\n\n\n\u8f93\u5165\u6837\u4f8b\n\n        \n6 3\n1 2 3\n1 6 4\n3 1 7\n4 3 6\n3 5 5\n3 6\n2 5\n4 5\n\u8f93\u51fa\u6837\u4f8b\n\n\n11\n\u5206\u6790\u4e0e\u89e3\n\n\n\u5982\u679c\u4e0d\u8003\u8651\u201c\u866b\u6d1e\u201d\uff0c\u5219\u8fd9\u9898\u975e\u5e38\u7b80\u5355\uff0c\u8ba1\u7b97\u51fa\u6240\u6709\u8def\u5f84\u957f\u5ea6\u627e\u51fa\u6700\u5927\u7684\u4e00\u6761\u5373\u53ef\uff0c\u8fd9\u6837\u6548\u7387\u4e5f\u975e\u5e38\u9ad8\uff1b\n\n\\*\u6ce8\uff1a\u8ba1\u7b97\u6811\u4e0a\u4e00\u6761\u8def\u5f84\u957f\u5ea6\u65b9\uff1a\u7528d(s,t)\u8868\u793a\u6811\u4e0a\u4eces\u5230t\u7684\u8def\u5f84\uff0c\u5219d(s,t)=d(1,s)+d(1,t)-2\\*d(1.lca(s,t));\n\n\u4f46\u662f\u201c\u866b\u6d1e\u201d\u662f\u4e0d\u53ef\u56de\u907f\u7684\u95ee\u9898\uff0c\u6211\u4eec\u8981\u4f7f\u6700\u957f\u7684\u4e00\u6761\u8def\u957f\u5ea6\u6700\u5c0f\uff1b\u56e0\u4e3a\u6811\u4e0a\u6709n-1\u6761\u8fb9\u5219\u6709n-1\u4e2a\u4fee\u201c\u866b\u6d1e\u201d\u7684\u65b9\u6848\uff0c\u6bcf\u4e2a\u65b9\u6848\u4e2d\u6700\u957f\u8def\u90fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u4f1a\u4ea7\u751fn-1\u6761\u6700\u957f\u8def\uff0c\u6211\u4eec\u8981\u7684\u662f\u8fd9n-1\u6761\u6700\u957f\u8fb9\u4e2d\u7684\u6700\u77ed\u8fb9\uff1b\n\n\u8fd9\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u7684\u65b9\u6cd5\uff1b\n\n\u5047\u8bbe\u7b54\u6848\uff08\u5373\u5b8c\u6210\u5de5\u4f5c\u7684\u6700\u77ed\u65f6\u95f4\uff09\u4e3aans\uff0cans\u8d8a\u5927\u610f\u5473\u7740\u6539\u79f0\u201c\u866b\u6d1e\u201d\u7684\u53ef\u80fd\u6027\u8d8a\u5927\uff0c\u4f46\u7b54\u6848\u4e00\u5b9a\u5728\u6811\u4e2d\u6700\u957f\u8fb9\u548c\u6700\u77ed\u8fb9\u4e4b\u95f4\uff1b\n\n\u5269\u4e0b\u7684\u5c31\u662f\u68c0\u9a8c\u7b54\u6848\u662f\u5426\u53ef\u884c\uff0c\u627e\u51fa\u6240\u6709\u8def\u5f84\u7684\u516c\u5171\u8fb9\u653e\u5728p\u96c6\u5408\u4e2d\uff0c\u6700\u540e\u770b\u6240\u6709\u8def\u5f84\u4e2d\u5269\u4e0b\u7684\u6743\u503c\u603b\u548c\u662f\u5426\u5c0f\u4e8eans\u5373\u53ef\u3002\n\n        \n\u6838\u5fc3\u4ee3\u7801\n\n```cpp\n        #include<iostream>\n        #include<cstdio>\n        #include<algorithm>\n        #include<cstring>\n        using namespace std;\n        int n,m,a[300005],c,dis[300005],d[300005],f[300005][20],maxm,tree[300005],last,maxn;\n        struct node\n          {\n            int next;\n              int to;\n              int w;\n        }b[600005];\n        struct edge\n          {\n            int u;\n              int v;\n              int z;\n              int l;\n        }e[300005];\n        void add(int x,int y,int z)\n          {\n            b[++c].to=y;\n            b[c].next=a[x];\n            b[c].w=z;\n                a[x]=c;\n            b[++c].to=x;\n            b[c].next=a[y];\n            b[c].w=z;\n            a[y]=c;\n        }\n        void dfs(int x,int from)\n          {\n            for(int i=a[x];i;i=b[i].next)\n              {\n                    int y=b[i].to;\n                if(y==from)\n                      continue;\n                d[y]=d[x]+1;\n                dis[y]=dis[x]+b[i].w;\n                f[y][0]=x;\n                dfs(y,x);\n            }\n        }\n        int lca(int x,int y)\n          {\n                if(d[x]>d[y])\n                  swap(x,y);\n            int l=d[y]-d[x];\n            for(int i=19;i>=0;i--)\n                if((1<<i)&l)y=f[y][i];\n            if(x!=y)\n            {\n                for(int i=19;i>=0;i--)\n                {\n                      if(f[x][i]!=f[y][i])\n                      {\n                            x=f[x][i];\n                            y=f[y][i];\n                      }\n                }\n                x=f[x][0];\n            }\n            return x;\n        }\n        bool cmp(edge a,edge b)\n        {\n            return a.l>b.l;    \n        }\n        void dfs2(int x,int from)\n        {\n            for(int i=a[x];i;i=b[i].next)\n            {\n                int y=b[i].to;\n                if(y==from)\n                    continue;\n                dfs2(y,x);\n                tree[x]+=tree[y];\n            }\n            if(tree[x]==last)\n                if(dis[x]-dis[from]>maxn)\n                      maxn=dis[x]-dis[from];\n        }\n        bool judge(int x)\n        {\n            memset(tree,0,sizeof(tree));\n            last=m;\n            for(int i=1;i<=m;i++)\n            {\n                if(e[i].l>x)\n                {\n                    tree[e[i].u]++;\n                    tree[e[i].v]++;\n                    tree[e[i].z]-=2;\n                }\n                else \n                {\n                    last=i-1;\n                    break;\n                }\n            }\n            maxn=0;\n            dfs2(1,0);\n            if(e[1].l-maxn<=x)\n                return true;\n            return false;\n        }\n        int main()\n         {\n            cin>>n>>m;\n            for(int i=1;i<=n-1;i++)\n            {\n                int x,y,z;\n                scanf(\"%d%d%d\",&x,&y,&z);\n                add(x,y,z);\n            }\n            dfs(1,0);\n            for(int j=1;j<=19;j++)\n                for(int i=1;i<=n;i++)\n                    f[i][j]=f[f[i][j-1]][j-1];\n            for(int i=1;i<=m;i++)\n              {\n                int x,y;\n                    scanf(\"%d%d\",&x,&y);\n                int z=lca(x,y);\n                int l=dis[x]+dis[y]-2*dis[z];\n                e[i].l=l;\n                e[i].u=x;\n                e[i].v=y;\n                e[i].z=z;\n                maxm=max(maxm,l);\n            }\n            sort(e+1,e+m+1,cmp);\n            int left=0,right=maxm;\n            while(left<right)\n            {\n                int mid=(left+right)/2;\n                if(judge(mid))\n                    right=mid;\n                else \n                    left=mid+1;\n            }\n            cout<<left<<endl;\n            return 0;\n}\n```",
        "postTime": 1517057602,
        "uid": 29387,
        "name": "DrunkXT",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37P2680 \u8fd0\u8f93\u8ba1\u5212"
    },
    {
        "content": "\u5bf9\u4e8e20%\u7684\u6570\u636e\n\n\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\uff0c\u5728\u8def\u5f84\u4e2d\u5220\u9664\u6700\u5927\u8fb9\u5373\u53ef\n\n\u5bf9\u4e8e60%\u7684\u6570\u636e\n\n\u6bcf\u4e00\u4e2a\u70b9\u8d70lca\uff0c\u5b58\u50a8\u904d\u5386\u7684\u70b9\uff0c\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u627e\u6700\u8017\u8d39\u7684\u70b9\uff0c\u53ea\u8981\u6c42\u8f93\u51fa\u6700\u5c0f\u503c\uff0c\u60f3\u5230\u4e8c\u5206\u6700\u5c0f\u503c\uff0c\u66b4\u529b\u8d70\u6bcf\u4e2a\u70b9\uff0c\u8d70\u4e0d\u901a\u5c31\u6811\u4e0a\u5dee\u5206\u8bb0\u5f55\u6539\u8def\u5f84\uff0c\u6240\u6709\u5904\u7406\u7ed3\u675f\uff0c\u627e\u662f\u5426\u6709\u4e00\u6761\u8fb9\u6ee1\u8db3\u6240\u6709\u7684\u6807\u8bb0\u503c\uff0c\u627e\u5230\u5c31\u53ef\u4ee5\uff0c\u4e0d\u7136\u5c31\u4e0d\u884c\u3002\n\n\u5bf9\u4e8e40%\u7684\u7ea6\u5b9a\u6570\u636e\n\n\u6811\u9000\u5316\u6210\u4e00\u6761\u94fe\uff0c\u7ebf\u6027\u4f7f\u7528\u500d\u589e+\u4e8c\u5206\uff0c\u601d\u8def\u4e0e\u4e0a\u65b9\u5927\u4f53\u76f8\u4f3c\uff0c\u8fd9\u91cc\u4e0d\u591a\u8d58\u8ff0\u3002\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\n\n\u6811\u4e0a\u500d\u589e,\u6240\u6709\u7684k\u90fd\u51cf\u53bb\u8fb9\u503c\n\nps\uff1a\u5f00\u5927\u725b\u5206\u7ad9\u6709\u4f18\u5316....\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<iomanip>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint dis[300007][25],mark[300007],all=0,maxx=-1e9,maxlen;\nint n,m,head[700007],to[700007],nxt[700007],w[700007];\nint cnt=0,d[300007],fa[300007][25];\nstruct node{\n    int s,t,lca,len;\n}a[300007];\nint build_tree(int x,int father)\n{\n    for(int j=1;j<=24;++j)\n    {\n        fa[x][j]=fa[fa[x][j-1]][j-1];\n        dis[x][j]=dis[fa[x][j-1]][j-1]+dis[x][j-1];     \n    }\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int u=to[i];if(u==father) continue;\n        d[u]=d[x]+1;fa[u][0]=x;dis[u][0]=w[i];\n        build_tree(u,x);\n    }\n}\nvoid find_lca(int p,int x,int y)\n{\n    if(d[x]<d[y]) swap(x,y);\n    int k=0;\n    int l=d[x]-d[y];\n    for(int i=0;i<=24;++i)\n    {\n        if(l&(1<<i)) \n        {\n            k+=dis[x][i];\n            x=fa[x][i];\n        }\n    }\n    if(x==y) \n    {\n        a[p].len=k;a[p].lca=x;\n        return ;\n    }\n    for(int i=24;i>=0;--i)\n    if(fa[x][i]!=fa[y][i])\n    {\n        k+=dis[x][i]+dis[y][i];\n        x=fa[x][i];y=fa[y][i];\n    }\n    k+=dis[x][0]+dis[y][0];\n    a[p].lca=fa[x][0];\n    a[p].len=k;\n    return ;\n}\nint dfs(int x,int father)\n{\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int u=to[i];if(u==father) continue;\n        mark[x]+=dfs(u,x);\n    }\n    if(mark[x]==all&&dis[x][0]>maxx)\n    maxx=dis[x][0];\n    return mark[x];\n}\nint judge(int mid)\n{\n    int i;memset(mark,0,sizeof(mark));maxx=-1e9,all=0;\n    for(i=1;i<=m;++i) if(a[i].len>mid) break;\n    if(i==m&&a[m].len<=mid) return 1;\n    for(i;i<=m;++i)\n    {\n        mark[a[i].s]+=1;mark[a[i].t]+=1;\n        mark[a[i].lca]-=2;all++;\n    }\n    dfs(1,-1);\n    if(maxx==-1e9||a[m].len>mid+maxx) return 0;\n    return 1;\n}\nint cmp(node a,node b)\n{\n    return a.len<b.len;\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for(int i=1;i<=n-1;++i) \n    {\n        int x,y,z;cin>>x>>y>>z;\n        nxt[++cnt]=head[x];head[x]=cnt;to[cnt]=y;w[cnt]=z;\n        nxt[++cnt]=head[y];head[y]=cnt;to[cnt]=x;w[cnt]=z;\n    }\n    fa[1][0]=-1;d[1]=1;\n    build_tree(1,-1);\n    for(int i=1;i<=m;++i)\n    {\n        cin>>a[i].s>>a[i].t;\n        find_lca(i,a[i].s,a[i].t);\n    }\n    stable_sort(a+1,a+m+1,cmp);\n    int l=0,r=1e9,mid,ans=1e9;\n    while(l<=r)\n    {\n        mid=(l+r)/2;\n        if(judge(mid))\n        {\n            r=mid-1;\n            ans=mid;\n        }\n        else l=mid+1;\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1509714791,
        "uid": 43140,
        "name": "zhaoyifan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "**\u7528\u66b4\u529b\u7684\u65b9\u6cd5\u4f18\u5316\u66b4\u529b**\n\n\u66b4\u529b\uff1a\u679a\u4e3e\u4e00\u6761\u8fb9\uff0c\u628a\u5b83\u9a9f\u6389\uff0c\u518d\u66b4\u529b\u7edf\u8ba1\u5269\u4e0b\u7684\u8def\u5f84\u957f\u5ea6\u4e2d\u7684\u6700\u5927\u503c\u4e4b\u540e\u53d6Min\n\n\u66b4\u529b\u7684\u4f18\u5316\uff1a\u6211\u4eec\u53d1\u73b0\uff0c\u9a9f\u6389\u4e00\u6761\u8fb9\u540e\uff0c\u5269\u4e0b\u7684\u8def\u5f84\u5206\u4e3a\u4e24\u79cd\uff1a\u7ecf\u8fc7\u8fd9\u6761\u88ab\u5220\u6389\u7684\u8fb9\u548c\u4e0d\u7ecf\u8fc7\u8fd9\u6761\u88ab\u5220\u6389\u7684\u8fb9\u7684\u3002\n\n\u4e8e\u662f\u201d\u5269\u4e0b\u8def\u5f84\u957f\u5ea6\u4e2d\u7684\u6700\u5927\u503c\u201c\u5c31\u662fMax(\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u8def\u5f84\u957f\u5ea6\u6700\u5927\u503c - \u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u4e0d\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u8def\u5f84\u957f\u5ea6\u6700\u5927\u503c\uff09\u3002\n\n\u518d\u53d6\u4e2aMin\u3002\n\n\u6709\u4e00\u79cd\u4e24\u4e2alog\u7684\u4f18\u79c0\u7b97\u6cd5\uff1a\u5bf9\u6bcf\u6761\u8fb9\uff0c\u7ef4\u62a4\u7ecf\u8fc7\u5b83\u7684\u6700\u957f\u8def\u5f84\u957f\u5ea6\u548c\u4e0d\u7ecf\u8fc7\u5b83\u7684\u6700\u957f\u8def\u5f84\u957f\u5ea6\uff1b\n\n\u5bf9\u6bcf\u4e2a\u8ba1\u5212\uff0c\u5148\u505a\u4e00\u8d9f\u6811\u94fe\u5256\u5206\uff0c\u628a\u4e24\u70b9\u4e4b\u95f4\u8def\u4e0a\u7684\u8fb9\u90fd\u66f4\u65b0\u4e00\u6b21\u7ecf\u8fc7\u5b83\u7684\u6700\u957f\u8def\u5f84\uff0c\u518d\u5bf9\u4e0d\u7ecf\u8fc7\u7684\u8fb9\u66f4\u65b0\u4e00\u6b21\u4e0d\u7ecf\u8fc7\u5b83\u7684\u6700\u957f\u8def\u5f84\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u7ecf\u8fc7\u7684\u4e00\u6761\u6761\u94fe\u6392\u5e8f\uff0c\u90a3\u4e48\u8fd9\u4e9b\u94fe\u6240\u5bf9\u5e94\u7684\u8fb9\u7684\u6807\u53f7\u8986\u76d6\u57281-(n-1)\uff08\u8fd9\u91cc\u76841-(n-1)\u662f\u6307\u6811\u5256\u4e2d\u7ecf\u8fc7\u91cd\u6807\u53f7\u540e\u8fb9\u7684\u7f16\u53f7\uff09\u8fd9\u6bb5\u533a\u95f4\u4e0a\u5c31\u662f\u4e00\u6bb5\u4e00\u6bb5\u7684\uff08\u56e0\u4e3a\u6bcf\u4e00\u6761\u94fe\u5bf9\u5e94\u7684\u6807\u53f7\u662f\u8fde\u7eed\u7684\uff09\u3002\u5206\u522b\u5904\u7406\u94fe\u3001\u94fe\u4e0e\u94fe\u4e4b\u95f4\u7684\u7a7a\u9699\u5373\u53ef\u3002\n\n ![](https://cdn.luogu.com.cn/upload/pic/9704.png) \n\n\u7136\u540e\u7531\u4e8e\u7ecf\u8fc7\u7684\u8f7b\u91cd\u8def\u5f84\u603b\u6761\u6570\u662flog\u7684\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\u3001\u5355\u70b9\u67e5\u8be2\u662flog\u7684\uff0c\u590d\u6742\u5ea6\u5c31\u662fnlog^2\u3002\n\nZKW\u5e38\u6570\u5c0f\uff0c\u6811\u5256\u5e38\u6570\u5c0f\u3002\uff08\u4e0d\u8fc7\u7528ZKW\u590d\u6742\u5ea6\u662f\u591a\u5c11\u6709\u5f85\u5546\u69b7\uff09\n\n\u4ee3\u7801\uff08\u7ec6\u601d\u6781\u4e11\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,l,r) for (register int i=(l);i<=(r);++i)\n#define foredge(i,u) for (int i=la[u];i;i=ne[i])\n#define tpn typename\nusing namespace std;\ntemplate <tpn A> inline A Max(const A &x,const A &y){\n    return x>y?x:y;\n}\ntemplate <tpn A> inline A Min(const A &x,const A &y){\n    return x<y?x:y;\n}\ntemplate <tpn A> inline void read(A &x){\n    char c;\n    A neg=1;\n    do{\n        c=getchar();\n    }while ((c<'0'||c>'9')&&c!='-');\n    if (c=='-') neg=-1,c=getchar();\n    x=0;\n    do{\n        x=x*10+c-48;\n        c=getchar();\n    }while (c>='0'&&c<='9');\n    x*=neg;\n}\ntemplate <tpn A,tpn B> inline void read(A &a,B &b){\nread(a),read(b);}\ntemplate <tpn A,tpn B,tpn C> inline void read(A &a,B &b,C &c){\nread(a),read(b),read(c);}\nconst int maxn=300001;\nint la[maxn],ne[maxn<<1],en[maxn<<1],w[maxn<<1],tot;\nint n,m,x,y,z,f1,f2;\nint siz[maxn],dep[maxn],fa[maxn],son[maxn],top[maxn],num[maxn],wei[maxn],rev[maxn];\ninline void add(int x,int y,int z){\n    ne[++tot]=la[x];\n    en[tot]=y;\n    w[tot]=z;\n    la[x]=tot;\n}\ninline void dfs1(int u,int p){\n    fa[u]=p;\n    siz[u]=1;\n    int v;\n    foredge(i,u){\n        if (en[i]==p) continue;\n        v=en[i];\n        dep[v]=dep[u]+1;\n        wei[en[i]]=w[i];\n        dfs1(v,u);\n        siz[u]+=siz[v];\n        if (siz[v]>siz[son[u]]) son[u]=v;\n    }\n}\nint sum[maxn];\ninline void dfs2(int u,int g){\n    if (!u) return;\n    top[u]=g;\n    num[u]=++tot;\n    rev[tot]=u;\n    if (son[u]) sum[son[u]]=sum[u]+wei[son[u]];\n    dfs2(son[u],g);\n    int v;\n    foredge(i,u){\n        v=en[i];\n        if (v==fa[u]||v==son[u]) continue;\n        sum[v]+=w[i];\n        dfs2(v,v);\n    }\n}\nconst int M=524288;\nstruct segment_tree{\n    int tree[1048576];\n    segment_tree(){\n        memset(tree,-1,sizeof(tree));\n    }\n    inline void add(int l,int r,int val){\n        if (l>r) return;\n        for (int s=M+Max(l-1,0),t=M+r+1;s^t^1;s>>=1,t>>=1){\n            if (!(s&1)) tree[s^1]=Max(tree[s^1],val);\n            if (t&1) tree[t^1]=Max(tree[t^1],val);\n        }\n    }\n    inline int get(int x){\n        int ans=tree[0];\n        for (x+=M;x;x>>=1){\n            ans=Max(ans,tree[x]);\n        }\n        return ans;\n    }\n};\nsegment_tree passed,unpassed;\nstruct stackvalue{\n    int a,b;\n};\nbool cmp(const stackvalue &a,const stackvalue &b){\n    return a.a<b.a;\n}\nstackvalue sttmp;\nstruct stack{\n    stackvalue a[101];\n    int top;\n    inline void clear(){\n        top=0;\n    }\n    inline void push(int a,int b){\n        sttmp.a=a,sttmp.b=b;\n        this->a[++top]=sttmp;\n    }\n    inline void xu(){\n        sort(a+1,a+top+1,cmp);\n    }\n    inline void add(int len){\n        REP(i,1,top) passed.add(a[i].a,a[i].b,len),unpassed.add(a[i-1].b+1,a[i].a-1,len);\n        unpassed.add(a[top].b+1,n-1,len);\n    }\n}temp;\nint len,ans,l1,l2;\nint main(){\n    read(n,m);\n    REP(i,1,n-1){\n        read(x,y,z);\n        add(x,y,z);\n        add(y,x,z);\n    }\n    dfs1(1,1);\n    tot=-1;\n    dfs2(1,1);\n    REP(i,1,m){\n        read(x,y);\n        len=0;\n        temp.clear();\n        for (f1=top[x],f2=top[y];f1!=f2;f1=top[x],f2=top[y]){\n            if (dep[f1]>dep[f2]){\n                temp.push(num[f1],num[x]);\n                len+=sum[x];\n                x=fa[f1];\n            }else{\n                temp.push(num[f2],num[y]);\n                len+=sum[y];\n                y=fa[f2];\n            }\n        }\n        if (x!=y){\n            if (dep[x]>dep[y]) len+=sum[x]-sum[y],temp.push(num[son[y]],num[x]);\n            else len+=sum[y]-sum[x],temp.push(num[son[x]],num[y]);\n        }\n        temp.xu();\n        temp.add(len);\n    }\n    ans=0x7fffffff;\n    REP(i,1,n-1){\n        l1=passed.get(i);\n        l2=unpassed.get(i);\n        if (l1<0) l1=0x7fffffff;\n        else l1-=wei[rev[i]];\n        ans=Min(ans,Max(l1,l2));\n    }\n    if (ans<0x7fffffff) cout<<ans;\n    else cout<<0;\n    return 0;\n}\n```",
        "postTime": 1509252642,
        "uid": 13940,
        "name": "pupuvovovovovo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5462\u65f6\u95f4\u5361\u7684\u5f88\u7d27\u6240\u4ee5\u5982\u679c\u5199\u7684\u6bd4\u8f83\u4e11\u7684\u8bdd\u548c\u53ef\u80fd\u4f1a\u88ab\u5361\u6210tle\uff0c\u849f\u84bb\u6211\u5c31\u662f\u8fd9\u6837\u4e8e\u662f\u53bb\u53c2\u62dc\u4e86\u4e00\u4e0b\u5927\u4f6c\u4eec\u7684\u4ee3\u7801\n\n\u697c\u4e0b\u5bf9\u8fd9\u9053\u9898\u7684\u89e3\u7b54\u5df2\u7ecf\u5f88\u8be6\u7ec6\u4e86\u3002\u4e8c\u5206\u7b54\u6848\u52a0\u4e0a\u6811\u4e0a\u5dee\u5206\u3002\u6211\u53ea\u80fd\u5f31\u5f31\u5730\u8bf4\u4e00\u4e9b\u5c0f\u4f18\u5316\u3002\n\n0.\u7528\u6570\u7ec4\u6bd4\u7528\u7ed3\u6784\u4f53\u5feb\uff01\uff01\uff01\uff08\u53cd\u6b63\u6211\u61d2\u5f97\u6539\u4e86\uff09\n\n1.\u8fd9\u91cc\u6211\u4eec\u77e5\u9053\u7b54\u6848\u7684\u4e0a\u754c\u4e3a\u6240\u6709\u8ba1\u5212\u4e2d\u6700\u957f\u7684\u90a3\u4e2a\uff0c\u4e0b\u754c\u4e3a\u6240\u6709\u8ba1\u5212\u4e2d\u6700\u957f\u7684\u51cf\u53bb\u6700\u957f\u7684\u90a3\u6761\u8fb9\n\n2.\u9996\u5148\u6c42lca\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u500d\u589e\u662f\u76f8\u5f53\u6162\u7684\uff0c\u9700\u8981nlogn\u7684\u9884\u5904\u7406\u4e4b\u540e\u6bcf\u6b21\u67e5\u8be2\u4f9d\u7136\u9700\u8981logn\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u9884\u5904\u7406nlogn\uff0c\u67e5\u8be2\n\nO\uff081\uff09\u7684rmq\u6c42lca\uff08\u53bblca\u7684\u6a21\u677f\u91cc\u9762\u7ffb\u9898\u89e3\u5c31\u597d\uff09\uff0c\u6216\u8005\u6811\u94fe\u5256\u5206\uff08\u6700\u597d\u5199\uff09\u3002\u8fd9\u91cc\u6211\u7528\u4e86\u6811\u94fe\u5256\u5206\u3002\n\n3.\u6211\u4eec\u5728\u7b2c\u4e00\u6b21dfs\u4e2d\u8bb0\u5f55dfs\u5e8f\u3002\u56e0\u4e3a\u6211\u4eec\u4e4b\u540e\u6bcf\u6b21\u904d\u5386\u6811\u4e00\u6b21\u4e00\u6b21\u8d70\u7684\u8bdd\uff0c\u53c8\u9700\u8981\u9012\u5f52\u3002\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528dfs\u5e8f\u6765\u4ee3\u66ff\u9012\u5f52\n\n4.\u4f60\u9700\u8981\u4e00\u4e2a\u8d85\u7ea7\u5feb\u7684\u8bfb\u5165\u4f18\u5316\u3002\u6bd4\u5982fread\n\n5.\u624b\u52a8\u5f00O2\uff08\u5212\u53bb\uff09\uff0c\u52a0\u4e0a\u5404\u79cdinline\u4e4b\u7c7b\u7684\n\n\u7136\u540e\u4f60\u628a\u4e0a\u8ff0\u5404\u79cd\u5751\u7239\u4f18\u5316\u52a0\u4e0a\u5927\u6982\u5728200-300ms\n\n\u8fd1\u4e4e\u6bd4\u4e00\u4e9b\u4eba\u7684\u4ee3\u7801\u5c11\u4e00\u4e2alog\n\n\u6ce8\u610f\u8fd9\u91cc\u7531\u4e8e\u6570\u636e\u8bfb\u5165\u91cf\u5f88\u5927\u8bfb\u5165\u4f18\u5316\u5f88\u91cd\u8981\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<utility>\n#include<algorithm>\n#include<iostream>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<cstdlib>\n#include<ctime>\n//#pragma GCC optimize (2)\n//#pragma G++ optimize (2)\nusing namespace std;\nstruct io\n{\n    char op[10000000],* s;\n    io(){fread(s=op,1,1<<26,stdin);}\n    inline int read()\n    {\n        register int u = 0;\n        while(*s<48) s++;\n        while(*s>32)\n            u=u*10+* s++ -48;\n        return u;\n    }\n} ip;\n#define read ip.read\n```\n/\\*\n```cpp\ninline int read(){\n    char ch='*';\n    int f=1;\n    while(!isdigit(ch=getchar())) if(ch=='-') f=-1;\n    int num=ch-'0';\n    while(isdigit(ch=getchar())) num=num*10+ch-'0';\n    return num*f;\n}\n```\n\\*/\n\n\n```cpp\nconst int maxn = 300005;\nstruct edge{\n    int next,to,val;\n}e[maxn<<1];\nint s[maxn],t[maxn],w[maxn],D[maxn];\nint dep[maxn],h[maxn],son[maxn],dis[maxn],siz[maxn],top[maxn],fa[maxn];\nint c[maxn],F,tot,cnt,n,m,MAX,f[maxn],mid,minn,q[maxn],val[maxn];\nvoid add(int from,int to,int val)\n{\n    e[++cnt].next=h[from];    e[cnt].to=to;    e[cnt].val=val;    h[from]=cnt;\n    e[++cnt].next=h[to];    e[cnt].to=from;    e[cnt].val=val;    h[to]=cnt;\n}\nvoid dfs1(int x)\n{\n    siz[x]=1;q[++q[0]]=x;\n    int v;\n    for(register int i=h[x];i;i=e[i].next)\n    {\n        v=e[i].to;\n        if(v==fa[x]) continue ;\n        val[v]=e[i].val;dis[v]=dis[x]+e[i].val;dep[v]=dep[x]+1;fa[v]=x;\n        dfs1(v);\n        siz[x]+=siz[v];\n        if(siz[v]>siz[son[x]]) son[x]=v;\n    }\n    return ;\n}\nint lca(int x,int y)\n{\n    while(top[x]!=top[y])\n    {\n        if(dep[top[x]]<dep[top[y]]) swap(x,y);\n        x=fa[top[x]];\n    }\n    if(dep[x]>dep[y]) swap(x,y);\n    return x;\n}\ninline bool ok(int fff)\n{\n    tot=0;\n    memset(f,0,sizeof(f));\n    for(int i=1;i<=m;i++) if(D[i]>fff)\n        f[s[i]]++,f[t[i]]++,f[w[i]]-=2,tot++;\n    for(register int i=n;i;i--)\n    {\n        f[fa[q[i]]]+=f[q[i]];\n        if(val[q[i]]>=MAX-fff&&f[q[i]]==tot) return 1;\n    }\n    return 0;\n}\nint main()\n{\n    n=read();m=read();\n    int u,v,we;\n    for(register int i=1;i<n;i++)\n    {\n        u=read();v=read();we=read();\n        add(u,v,we);\n        minn=max(minn,we);\n    }\n    dep[1]=top[1]=1;\n    dfs1(1);\n    for(register int i=1;i<=n;i++)\n        top[q[i]]= q[i]==son[fa[q[i]]]?  top[fa[q[i]]]:q[i];\n    for(register int i=1;i<=m;i++){\n        s[i]=read();t[i]=read();\n        w[i]=lca(s[i],t[i]);\n        MAX=max(MAX,D[i]=(dis[s[i]]+dis[t[i]]-2*dis[w[i]]));\n    }\n    int l=MAX-minn,r=MAX+1;\n    while(l<r)\n    {\n        mid=l+r>>1;\n        if(ok(mid)) r=mid;\n        else l=mid+1;\n    }\n    printf(\"%d\\n\",l);\n}\n\n```",
        "postTime": 1508429298,
        "uid": 36102,
        "name": "doge233",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u4e8c\u5206\u7b54\u6848+\u6811\u4e0a\u5dee\u5206\n\n\n\u5927\u4f53\u601d\u8def\u5c31\u662f\u4e8c\u5206\u4e00\u4e0b\u7b54\u6848\uff0c\u6bcf\u6b21\u518d\u7528\u5dee\u5206\u6570\u7ec4\u8bb0\u4e0b\u6bcf\u4e2a\u70b9\u4ee3\u8868\u7684\u8fb9\uff08\u5b83\u8fde\u5230\u7236\u4eb2\u7684\u8fb9\uff09\u5728\u51e0\u4e2a\u8def\u7a0b\u5927\u4e8e mid \u7684\u8ba1\u5212\u4e2d\uff0c\u82e5\u5b83\u662f\u6240\u6709\u8fd9\u6837\u7684\u8ba1\u5212\u7684\u4ea4\u96c6\u4e2d\u7684\u4e00\u5458\u4e14\u6700\u957f\u7684\u90a3\u6761\u51cf\u53bb\u8fd9\u6761\u80fd\u5c0f\u4e8e\u7b49\u4e8e mid\uff0c\u90a3\u4e48\u8bf4\u660e mid \u662f\u53ef\u4ee5\u7684\u3002\n\n\n\u6709\u51e0\u70b9\u8981\u6ce8\u610f\u4e00\u4e0b\n\n\n\u5f00\u59cb\u6211\u7528\u4e86 long long \u6765\u5b58\uff0c\u7ed3\u679c TLE \u4e86\u597d\u591a\uff0c\u6539\u6210 int \u5c31\u597d\u4e00\u70b9\u4e86\u3002\n\n\n\u6ce8\u610f g[x]+=g[o] \u5e94\u8be5\u5728 dfs \u5b8c o \u4e4b\u540e\u518d\u52a0\u3002\n\n\n\u518d DFS \u4e2d\u80fd return \u7684\u5730\u65b9\u628a\u5b83 return \u4e86\uff0c\u7701\u4e86\u4e0d\u5c11\u65f6\u95f4\u3002\n\n\n\u4e4b\u524d\u53d1\u7684\u9898\u89e3\u5728`2017-10-8` \u88ab\u63d2\u6389\u4e86\uff0c\u4ea4\u4e86\u4e00\u904d\u53d1\u73b0 TLE \u4e86\uff0c\u4e0a\u6b21\u53ea\u662f\u52c9\u5f3a\u8fc7\uff0c\u53ef\u80fd\u5f53\u65f6\u4eba\u5c11\u5427\u2026\u2026\n\n\u4e8e\u662f\u5c31\u518d\u8c03\u4e86\u8c03\uff0c\u53d1\u73b0\u4e24\u4e2a\u95ee\u9898\u2014\u2014\n\n\\* \u8fd8\u662f\u5728 DFS \u51fd\u6570\u4e2d\u7684\u95ee\u9898\uff0c\u6709\u4e00\u4e2a\u5224\u65ad\u9700\u8981\u5728\u6700\u5916\u5c42\uff0c\u5426\u5219\u6700\u5e95\u4e0b\u7684\u70b9\u53ef\u80fd\u4e0d\u4f1a\u88ab\u5224\u65ad\u5230\uff0c\u7b54\u6848\u53ef\u80fd\u4f1a\u9519\uff08\u4e0d\u8fc7 oj \u4e0a\u7684\u6570\u636e\u597d\u50cf\u6ca1\u8fd9\u6837\u7684\u70b9\uff0c\u4e0b\u9762\u653e\u4e2a\u53ef\u4ee5\u63d2\u8fd9\u4e2a\u5730\u65b9\u7684\u6570\u636e\u5427\uff09\n\n\\* \u53e6\u4e00\u4e2a\u5c31\u662f TLE \u7684\u95ee\u9898\uff0c\u5f53\u65f6\u7684\u4ee3\u7801 define \u4e86\u4e00\u4e2a\u7b97\u5f0f\uff0c\u7ed3\u679c\u6bcf\u6b21\u9012\u5f52\u90fd\u4f1a\u7528\u5230\uff0c\u5bfc\u81f4\u4e86\u8bb8\u591a\u4e0d\u5fc5\u8981\u7684\u8fd0\u7b97\uff0c\u624d TLE \u4e86\uff0c\u628a\u5b83\u7528\u6570\u7ec4\u5b58\u4e0b\u6765\uff0c\u65f6\u95f4\u5c31\u7a33\u5b9a\u5f88\u591a\u4e86\uff0c\u4fdd\u51c6 AC ^w^\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#define N 300005\n#define add(x,y,z) (to[++num]=head[x],head[x]=num,V[num]=y,T[num]=z)\n#define For(x) for(int h=head[x],o=V[h],t=T[h]; h; o=V[h=to[h]],t=T[h])\nusing namespace std;\nint head[N],to[2*N],V[2*N],T[2*N],num;\nint n,m,k,F,ans=2147483647,cnt,Max,ST[N][30],dep[N],dis[N],D[N],c[N],f[N],u[N],v[N],w[N],l,r,mid;\n/*\nc:\u5dee\u5206\u6570\u7ec4\nf:\u8fd9\u4e2a\u70b9\u8fde\u5230\u7236\u4eb2\u7684\u8fb9\u5728 g[i] \u4e2a\u5927\u4e8e mid \u7684\u8ba1\u5212\u5185\ndis:\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8ddd\u79bb \n*/\n\nvoid dfs(int x,int Fa){\n    ST[x][0]=Fa;\n    dep[x]=dep[Fa]+1;\n    For(x) if (o!=Fa){\n        dis[o]=dis[x]+t;\n        dfs(o,x);\n    }\n}\nint LCA(int x,int y){\n    if (dep[x]<dep[y]) k=x,x=y,y=k;\n    for (int i=20,dd=dep[x]-dep[y]; i>=0; i--)\n        if (dd&(1<<i)) x=ST[x][i];\n    if (x==y) return x;\n    for (int i=20; i>=0; i--)\n        if (ST[x][i]!=ST[y][i])\n        x=ST[x][i],y=ST[y][i];\n    return ST[x][0];\n}\n\nvoid DFS(int x,int Fa,int kkk){\n    if (F) return;\n    f[x]=c[x];\n    For(x) if (o!=Fa){\n        DFS(o,x,h);\n        f[x]+=f[o];\n    }\n    //\u5c31\u662f\u4e0b\u9762\u8fd9\u4e00\u884c\uff0c\u8981\u662f\u5199\u5728\u91cc\u9762\u7684\u8bdd\uff0c\u4f1a\u51fa\u9519\uff08\u6700\u5e95\u4e0b\u7684\u70b9\u5c31\u4e0d\u4f1a\u8ba8\u8bba\u5230 f[] \u4e86\uff09\n    if (f[x]==cnt && Max-T[kkk]<=mid){F=1; return;}        //\u8fd9\u91cc return \u624d\u8fc7\u4e86\u90a3\u4e2a\u70b9\uff0c\u5426\u5219 TLE \u4e86\u4e00\u4e2a\u70b9\u2026\u2026\n}\nbool ok(){\n    cnt=F=0;\n    memset(c,0,sizeof(c));\n    for (int i=1; i<=m; i++) if (D[i]>mid)\n        c[u[i]]++,c[v[i]]++,c[w[i]]-=2,cnt++;\n    DFS(1,0,0);\n    return F;\n}\n\nint main(){\n    freopen(\"1.txt\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1,aa,bb,tt; i<n; i++){\n        scanf(\"%d%d%d\",&aa,&bb,&tt);\n        add(aa,bb,tt);\n        add(bb,aa,tt);\n    }\n\n    dfs(1,0);\n    for (int j=1; j<=20; j++)\n        for (int i=1; i<=n; i++)\n            ST[i][j]=ST[ST[i][j-1]][j-1];\n\n    for (int i=1; i<=m; i++){\n        scanf(\"%d%d\",&u[i],&v[i]);\n        w[i]=LCA(u[i],v[i]);\n        Max=max(Max,(D[i]=dis[u[i]]+dis[v[i]]-2*dis[w[i]]));\n    }\n    for (l=0,r=Max,mid=(l+r)>>1; l<=r; mid=(l+r)>>1)\n        ok() ? (ans=mid,r=mid-1) : (l=mid+1);\n    printf(\"%d\",ans);\n}\n```\n\n>\u88ab\u63d2\u6570\u636e\n>3 4\n>2 1 3\n>3 1 1\n>1 3\n>2 3\n>1 3\n>3 2\n\n\u7b54\u6848\u5e94\u8be5\u662f 1\u3002\n\n\n\n[\u535a\u5ba2\u94fe\u63a5(\u53ef\u4ee5\u770b\u5230\u65e7\u7684\u90a3\u4e2a\u4e0d\u80fd AC \u7684\u7a0b\u5e8f)](http://blog.csdn.net/jackypigpig/article/details/77938887)\n",
        "postTime": 1507636172,
        "uid": 13284,
        "name": "piggy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "**1044ms\u591f\u5feb\u4e86\u5427**\n\n\n\u6811\u5256+\u4e8c\u5206\n\n\n\u8fd9\u662f\u4e00\u68f5\u6811\u4e0a\u8ddd\u79bb\u7684\u95ee\u9898\n\n\u89e3\u7b54\u5206\u4e24\u4e2a\u90e8\u5206\uff1a\n\n1\u3001\u6c42\u51fa\u7ed9\u51fa\u5404\u70b9\u5bf9\u4e4b\u95f4\u7684\u8ddd\u79bb\n\n2\u3001\u5c06\u4e00\u6761\u8fb9\u6743\u51cf\u4e3a0\u4f7f\u5f97\u6700\u5927\u8ddd\u79bb\u6700\u5c0f\n\n\n\u6811\u4e0a\u8ddd\u79bb\u4e00\u770b\u5c31\u81ea\u7136\u60f3\u5230\u4e86\u3010\u6811\u94fe\u5256\u5206+\u6811\u72b6\u6570\u7ec4\uff08\u6216\u7ebf\u6bb5\u6811\uff09\u3011\uff0c\u5148\u6811\u5256\u7ed9\u70b9\u7f16\u53f7\uff0c\u7136\u540e\u5957\u7528\u6811\u72b6\u6570\u7ec4\u7ed3\u5408LCA\u7684\u7b97\u6cd5\u6c42\u51fa\u70b9\u5bf9\u8ddd\u79bb\uff0c1\u95ee\u79d2\u6389\n\n\n\u5173\u952e\u662f\u7b2c\u4e8c\u95ee\uff0c\u5982\u4f55\u5220\u3002\n\n\u5bb9\u6613\u60f3\u5230\u8981\u9009\u7684\u8fb9\u4e00\u5b9a\u5728\u6700\u957f\u7684\u8def\u5f84\u4e0a\uff0c\u4f46\u9009\u6700\u957f\u8def\u5f84\u4e0a\u6700\u957f\u7684\u8fb9\u4e0d\u4e00\u5b9a\u662f\u5bf9\u7684\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u957f\u7684\u8fb9\u53ef\u80fd\u4e0e\u7b2c\u4e00\u957f\u7684\u8fb9\u6709\u516c\u5171\u8fb9\u4e14\u4e0d\u76f8\u5dee\u591a\u5c11\uff0c\u4f46\u662f\u5220\u53bb\u4e86\u4e00\u4e2a\u975e\u516c\u5171\u8fb9\u5c31\u9519\u4e86\u3002\n\n\u770b\u5230\u6700\u5927\u6700\u5c0f\uff0c\u81ea\u7136\u60f3\u5230\u4e8c\u5206\u7b54\u6848\uff1a\n\n\n\u6211\u4eec\u4e8c\u5206\u866b\u6d1e\u540e\u6700\u957f\u7684\u8fb9\u7684\u957f\u5ea6\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2acheck(m),\u53ea\u9700\u679a\u4e3e\u6240\u6709\u6bd4m\u5927\u7684\u8def\u5f84\uff0c\u8fd9\u4e9b\u8def\u5f84\u90fd\u5f97\u7f29\u77ed\uff0c\u5c06\u8fd9k\u6761\u8def\u5f84\u4e0a\u6bcf\u4e00\u6761\u8fb9+1\uff0c\u8fd9\u6837\u4e00\u6765\u52a0\u5230\u4e86k\u7684\u90a3\u4e9b\u8fb9\u5c31\u662f\u6240\u6709\u8fb9\u7684\u516c\u5171\u8fb9\uff0c\u518d\u770b\u4e00\u770b\u4ed6\u4eec\u80fd\u4e0d\u80fd\u901a\u8fc7\u51cf\u4e3a0\u800c\u4f7f\u8fd9k\u6761\u8fb9\u90fd\u5c0f\u4e8em\u3002\n\n\n\u5177\u4f53\u600e\u4e48\u7ef4\u62a4\u6bcf\u6761\u8fb9\u52a0\u4e86\u51e0\u6b21\uff0c\u7528\u7ebf\u6bb5\u6811\uff1f\n\n\u8fd9\u6837\u4e8c\u5206nlognlogn\u7684\u590d\u6742\u5ea6\uff0c\u8fd8\u662f\u4e0d\u592a\u653e\u5fc3\n\n\u9274\u4e8e\u6240\u6709\u7684\u8be2\u95ee\u90fd\u662f\u5355\u70b9\u4e14\u90fd\u5728\u4fee\u6539\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5dee\u5206\u6570\u7ec4\u4ee5O(n)\u7684\u603b\u590d\u6742\u5ea6\u6c42\u51fa\n\n\n\u8fd8\u662f\u633a\u4f18\u79c0\u7684\u6548\u7387\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define lbt(x) (x&-x)\nusing namespace std;\nconst int maxn=300005,INF=2000000000;\ninline int read(){\n    int out=0,flag=1;char c=getchar();\n    while(c<48||c>57) {if(c=='-') flag=-1;c=getchar();}\n    while(c>=48&&c<=57) {out=out*10+c-48;c=getchar();}\n    return out*flag;\n}\nint N,M,root,rtm=INF,Maxw;\n//\u8fd9\u5757\u662f\u5b58\u8fb9\u3010\u94fe\u5f0f\u524d\u5411\u661f\u3011\nint head[maxn],nedge=0;\nstruct EDGE{\n    int to,w,next;\n}edge[2*maxn];\ninline void build(int a,int b,int w){\n    edge[nedge]=(EDGE){b,w,head[a]};\n    head[a]=nedge++;\n    edge[nedge]=(EDGE){a,w,head[b]};\n    head[b]=nedge++;\n}\nstruct node{\n    int a,b,w;\n}p[maxn];\ninline bool operator <(const node& a,const node& b){\n    return a.w>b.w;\n}\n//\u8fd9\u5757\u6c42\u91cd\u5fc3\nint Siz[maxn];\nvoid dfs(int u,int f){\n    int to,Max=-1,Min=INF;\n    Siz[u]=1;\n    for(int k=head[u];k!=-1;k=edge[k].next)\n        if((to=edge[k].to)!=f){\n            dfs(to,u);\n            Siz[u]+=Siz[to];\n            if(Siz[to]>Max) Max=Siz[to];\n            else if(Siz[to]<Min) Min=Siz[to];\n        }\n    if(N-Siz[u]>Max) Max=N-Siz[u];\n    else if(N-Siz[u]<Min) Min=N-Siz[u];\n    if(Max!=-1&&Min!=INF&&Max-Min<rtm){\n        root=u;\n        rtm=Max-Min;\n    }\n}\n//\u8fd9\u5757\u662f\u6811\u94fe\u5256\u5206\nint top[maxn],siz[maxn],fa[maxn],son[maxn],id[maxn],Hash[maxn],dep[maxn],V[maxn],cnt=0;\nvoid dfs1(int u,int f,int d){\n    int to;\n    siz[u]=1;fa[u]=f;dep[u]=++d;\n    for(int k=head[u];k!=-1;k=edge[k].next)\n        if((to=edge[k].to)!=f){\n            dfs1(to,u,d);\n            V[to]=edge[k].w;\n            siz[u]+=siz[to];\n            if(!son[u]||siz[son[u]]<siz[to]) son[u]=to;\n        }\n}\nvoid dfs2(int u,int flag){\n    int to;\n    id[u]=++cnt;Hash[cnt]=u;\n    flag ? top[u]=top[fa[u]]:top[u]=u;\n    if(son[u]) dfs2(son[u],1);\n    for(int k=head[u];k!=-1;k=edge[k].next)\n        if((to=edge[k].to)!=son[u]&&to!=fa[u])\n            dfs2(to,0);\n}\n//\u8fd9\u5757\u662f\u6811\u72b6\u6570\u7ec4\nint A[maxn];\ninline void add(int u,int v){while(u<=N){A[u]+=v;u+=lbt(u);}}\ninline int Sum(int u){int ans=0;while(u>0){ans+=A[u];u-=lbt(u);}return ans;}\ninline int Query(int l,int r){return Sum(r)-Sum(l-1);}\ninline void init(){for(int i=1;i<=N;i++) add(id[i],V[i]);}\nint solve(int u,int v){        //\u6c42\u8def\u5f84\u957f\n    int ans=0;\n    while(top[u]!=top[v]){\n        if(dep[top[u]]<dep[top[v]]) swap(u,v);\n        ans+=Query(id[top[u]],id[u]);\n        u=fa[top[u]];\n    }\n    if(dep[u]>dep[v]) swap(u,v);\n    return ans+Query(id[u]+1,id[v]);\n}\nint D[maxn];   //\u5dee\u5206\u6570\u7ec4\ninline void update(int u,int v){\n    while(top[u]!=top[v]){\n        if(dep[top[u]]<dep[top[v]]) u^=v^=u^=v;\n        D[id[top[u]]]+=1;\n        D[id[u]+1]-=1;\n        u=fa[top[u]];\n    }\n    if(dep[u]>dep[v]) u^=v^=u^=v;\n    D[id[u]+1]+=1;\n    D[id[v]+1]-=1;\n}\nbool check(int m){\n    int tot=0,v=0;\n    while(p[tot+1].w>m){\n        ++tot;\n        update(p[tot].a,p[tot].b);\n    }\n    for(int i=1;i<=N;i++){\n        v+=D[i];D[i]=0;\n        if(v==tot&&Maxw-V[Hash[i]]<=m){\n            for(int j=i+1;j<=N;j++) D[j]=0;\n            return true;\n        }\n    }\n    return false;\n}\nint main()\n{\n    fill(head,head+maxn,-1);\n    N=read();\n    M=read();\n    int a,b,w,L=0,R=0;\n    for(int i=1;i<N;i++){\n        a=read();\n        b=read();\n        w=read();\n        build(a,b,w);\n    }\n    dfs(1,0);     //\u6c42\u51fa\u91cd\u5fc3\u4f5c\u4e3a\u6839\n    dfs1(root,0,0);  //dfs1\u3001dfs2\u6811\u94fe\u5256\u5206\n    dfs2(root,0);\n    init();      //\u521d\u59cb\u5316\u6811\u72b6\u6570\u7ec4\n    for(int i=1;i<=M;i++){\n        p[i].a=read();\n        p[i].b=read();\n        p[i].w=solve(p[i].a,p[i].b);\n        if(p[i].w>R) R=p[i].w;\n    }\n    sort(p+1,p+1+M);  //\u8def\u5f84\u6392\u4e2a\u5e8f\n    Maxw=R;\n    while(L<R){   //\u4e8c\u5206\u7b54\u6848\n        int mid=(L+R)>>1;\n        if(check(mid)) R=mid;\n        else L=mid+1;\n    }\n    cout<<L<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1503568470,
        "uid": 32842,
        "name": "Mychael",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "- \u4e8c\u5206\u7b54\u6848+\u6811\u4e0a\u5dee\u5206\u3002\n\n- \u9996\u5148\u5b58\u4e0b\u6bcf\u4e2a\u8fd0\u8f93\u8ba1\u5212\u7684\u8d77\u70b9$st[i]$\uff0c\u7ec8\u70b9$ed[i]$\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148$lca[i]$\u4ee5\u53ca\u8017\u65f6$len[i]$\u3002\n\n- \u4e8c\u5206\u6700\u77ed\u65f6\u95f4$time$\uff0c\u5efa\u7acb\u5de6\u6307\u9488$l$\u548c\u53f3\u6307\u9488$r$\uff0c\u5de6\u6307\u9488\u521d\u59cb\u503c\u4e3a$0$\uff0c\u53f3\u6307\u9488\u521d\u59cb\u503c\u4e3a$len$\u6700\u5927\u7684\u8fd0\u8f93\u8ba1\u5212\u7684$len$\u503c\u3002\n\n- \u5728\u5224\u5b9a\u4e2d\uff0c\u5148\u6807\u8bb0\u51fa\u6240\u6709$len[i]>time$\u7684\u8fd0\u8f93\u8ba1\u5212\uff0c\u866b\u6d1e\u5fc5\u987b\u4f4d\u4e8e\u8fd9\u4e9b\u8fd0\u8f93\u8ba1\u5212\u7684\u8def\u5f84\u7684\u516c\u5171\u8fb9\u4e0a\u3002\u8fd9\u91cc\uff0c\u4e3a\u6bcf\u4e2a\u70b9\u8d4b\u4e88\u4e00\u4e2a\u6743\u503c\uff0c\u521d\u59cb\u4e3a$0$\u3002\n\n- \u7136\u540e\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a$len[i]>time$\u7684\u8fd0\u8f93\u8ba1\u5212\uff0c\u628a$st[i]->ed[i]$\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\uff08$lca[i]$\u9664\u5916\uff09\u7684\u70b9\u6743\uff0c\u5168\u90e8\u52a0\u4e0a$1$\uff08\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u7528\u5dee\u5206\u6570\u7ec4\u5b9e\u73b0\uff09\u3002\n\n- \u8fd9\u6837\u5bb9\u6613\u77e5\u9053\uff0c\u6700\u540e\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\u7b49\u4e8e\u6240\u6709$len[i]>time$\u7684\u8fd0\u8f93\u8ba1\u5212\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u8fde\u63a5\u8fd9\u4e2a\u70b9\u548c\u8fd9\u4e2a\u70b9\u7684\u7236\u4eb2\u7684\u8fb9\u88ab\u6539\u9020\u6210\u866b\u6d1e\u540e\u4f1a\u964d\u4f4e\u6240\u6709$len[i]>time$\u7684\u8fd0\u8f93\u8ba1\u5212\u7684\u8017\u65f6\uff0c\u964d\u4f4e\u91cf\u4e3a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u3002\u6240\u4ee5\uff0c\u5728\u7b26\u5408\u6761\u4ef6\u7684\u8fb9\u4e2d\uff0c\u9009\u53d6\u4e00\u6761\u8fb9\u6743\u6700\u5927\u7684\u8fb9\uff0c\u5224\u65ad\uff1a\u8017\u65f6\u6700\u957f\u7684\u8ba1\u5212\u6d88\u8017\u7684\u65f6\u95f4\u51cf\u53bb\u9009\u53d6\u7684\u8fb9\u7684\u8fb9\u6743\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e$time$\uff0c\u5982\u679c\u662f\u5219$r=mid-1$\uff0c\u5426\u5219$l=mid+1$\uff0c\u5176\u4e2d$mid=(l+r)/2$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\nconst int N = 3e5 + 5, LogN = 23;\nint n, m, a[N], ecnt, nxt[N << 1], adj[N], go[N << 1], fa[N][LogN],\ndep[N], T[N], val[N << 1], dis[N], len[N], st[N], ed[N],\nmaxv, _lca[N], top[N], v_res, cnt_now;\nvoid add_edge(int u, int v, int w) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt;\n    go[ecnt] = v; val[ecnt] = w;\n}\nvoid dfs(int u, int fu) {\n    int i; dep[u] = dep[fu] + 1; for (i = 1; i <= 21; i++)\n        fa[u][i] = fa[fa[u][i - 1]][i - 1];\n    for (int e = adj[u], v; e; e = nxt[e]) {\n        if ((v = go[e]) == fu) continue;\n        fa[v][0] = u; dis[v] = dis[u] + val[e];\n        top[v] = val[e]; dfs(v, u);\n    }\n}\nint lca(int u, int v) {\n    int i; if (dep[u] < dep[v]) swap(u, v);\n    for (i = 21; i >= 0; i--) {\n        if (dep[fa[u][i]] >= dep[v]) u = fa[u][i];\n        if (u == v) return u;\n    }\n    for (i = 21; i >= 0; i--) if (fa[u][i] != fa[v][i])\n        u = fa[u][i], v = fa[v][i];\n    return fa[u][0];\n}\nint dist(int i, int u, int v) {\n    return dis[u] + dis[v] - (dis[_lca[i] = lca(u, v)] << 1);\n}\nvoid change(int i, int x) {\n    T[st[i]] += x; T[ed[i]] += x;\n    T[_lca[i]] -= x << 1;\n}\nint dfs_ans(int u, int fu) {\n    int res_d = T[u];\n    for (int e = adj[u], v; e; e = nxt[e]) {\n        if ((v = go[e]) == fu) continue;\n        res_d += dfs_ans(v, u);\n    }\n    if (res_d == cnt_now) v_res = max(v_res, top[u]);\n    return res_d;\n}\nbool check(int mid) {\n    int i, res = 0; for (i = 0; i <= n; i++) T[i] = 0; cnt_now = 0;\n    for (i = 1; i <= m; i++) if (len[i] > mid) cnt_now++, change(i, 1);\n    if (!cnt_now) return 1; v_res = 0; dfs_ans(1, 0);\n    return maxv - v_res <= mid;\n}\nint solve() {\n    int l = 0, r = maxv, mid;\n    while (l <= r) {\n        mid = l + r >> 1;\n        if (check(mid)) r = mid - 1;\n        else l = mid + 1;\n    }\n    return l;\n}\nint main() {\n    int i, x, y, z; n = read(); m = read();\n    for (i = 1; i < n; i++) {\n        x = read(); y = read(); z = read();\n        add_edge(x, y, z); add_edge(y, x, z);\n    }\n    dfs(1, 0);\n    for (i = 1; i <= m; i++) {\n        st[i] = read(); ed[i] = read();\n        len[i] = dist(i, st[i], ed[i]);\n        maxv = max(maxv, len[i]);\n    }\n    printf(\"%d\\n\", solve());\n    return 0;\n}\n```",
        "postTime": 1503201459,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u3010NOIP2015\u3011\u8fd0\u8f93\u8ba1\u5212\n\n\u9898\u9762\uff1a\u7ed9\u4f60\u4e00\u68f5\u6811\u548c\u6811\u4e0a\u82e5\u5e72\u6761\u8def\u5f84\uff0c\u6811\u4e0a\u6bcf\u4e00\u6761\u8fb9\u90fd\u6709\u4e00\u5b9a\u8d39\u7528\uff0c\u4f60\u53ef\u4ee5\u628a\u6811\u4e0a\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u8d39\u7528\u53d8\u4e3a\uff10\uff0c\u8981\u6c42\u6240\u6709\u8def\u5f84\u8d39\u7528\u7684\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002\n\n\nTag:\u4e8c\u5206\u7b54\u6848\uff0b\u6811\u94fe\u5256\u5206\uff0b\u6811\u4e0a\u5dee\u5206\n\n\n\u6700\u5927\u503c\u6700\u5c0f\uff0c\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\n\n\u9996\u5148\u53ef\u4ee5\u5148\u9884\u5904\u7406\u6bcf\u4e00\u6761\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u6765\u6c42\u3002\u540c\u65f6\u5728DFS2\u7684\u65f6\u5019\u5212\u5206\u8f7b\u91cd\u8fb9\uff0c\u5e76\u7ed9\u6bcf\u4e2a\u70b9\u6309\u8f7b\u91cd\u987a\u5e8f\u7f16\u53f7\uff08\u4e3a\u540e\u9762\u5dee\u5206\u505a\u51c6\u5907\uff09\n\n\u4e8c\u5206\u7b54\u6848\uff0c\u4e0b\u754c\u53d6\uff10\uff0c\u4e0a\u754c\u53d6\u8def\u5f84\u6700\u5927\u503c\u3002\n\ncheck\u65f6\u628a\u6240\u6709\u5927\u4e8emid\u7684\u8def\u5f84\u6807\u8bb0\u51fa\u6765\uff0c\u7136\u540e\u518d\u7528\u6811\u94fe\u5256\u5206\u4e2d\u8df3top\u7684\u64cd\u4f5c\uff0c\u6807\u8bb0\u7ecf\u8fc7\u7684\u8fb9\u3002\u7531\u4e8e\u6bcf\u6b21\u8df3\u662f\u8df3\u65b0\u7f16\u53f7\u4e2d\u8fde\u7eed\u4e00\u6bb5\u533a\u95f4\uff0c\u5dee\u5206\u5373\u53ef\u3002\n\n\u6700\u540e\u7edf\u8ba1\u6bcf\u6761\u8fb9\u51fa\u73b0\u6b21\u6570\uff0c\u82e5\u5176\u7b49\u4e8e\u6807\u51fa\u6765\u7684\u8def\u5f84\u6570\uff0c\u5c31\u7528\u6807\u8bb0\u51fa\u6765\u7684\u8def\u5f84\u7684\u6700\u5927\u503c\u51cf\u53bb\u8be5\u8fb9\u6743\u503c\uff0c\u82e5\u5c0f\u4e8e\u7b49\u4e8emid,return true,\u5426\u5219\u5224\u65ad\u5176\u4ed6\u8fb9\u3002\n\n###\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath> \nusing namespace std;\nint deep[300050],fa[300050],son[300050],w[300050],size[300050],dis[300050];\nint top[300050],id[300050],rak[300050];\nint cur[300050],c[300050];\nint n,m,num,dfn;\nstruct road{\n    int l,r,w;\n};\nstruct edge{\n    int to,nxt,first,w;\n};\nedge a[605000];\nroad b[300500];\nvoid add(int l,int r,int w){\n    a[++num].to=r;\n    a[num].w=w;\n    a[num].nxt=a[l].first;\n    a[l].first=num;\n}\nvoid dfs1(int u,int far,int dep){\n    deep[u]=dep;\n    fa[u]=far;\n    size[u]=1;\n    for(int i=a[u].first;i;i=a[i].nxt){\n        int v=a[i].to;\n        if(v==far) continue;\n        else{\n            w[v]=a[i].w;\n            dis[v]=dis[u]+a[i].w;\n            dfs1(v,u,dep+1);\n            size[u]+=size[v];\n            if(son[u]==-1) son[u]=v;\n             else \n               if(size[v]>size[son[u]])\n                 son[u]=v;\n        }\n    }\n}\nvoid dfs2(int u,int ding,int fa){\n    top[u]=ding;\n    id[u]=++dfn;\n    rak[dfn]=u;\n    int v=son[u];\n    if(v!=-1)  dfs2(v,ding,u);\n    for(int i=a[u].first;i;i=a[i].nxt){\n            v=a[i].to;\n            if(v==fa||v==son[u]) continue;\n            else dfs2(v,v,u);\n    }\n}\nint lca(int l,int r){\n    while(top[l]!=top[r]){\n        if(deep[top[l]]<deep[top[r]]) swap(l,r); //\uff01\uff01\uff01\u6bd4\u8f83\u9876\u7aef\u7684\u6df1\u5ea6\uff01\uff01\uff01\n          l=top[l];\n          if(fa[l]!=-1) l=fa[l];\n    }\n    if(deep[l]<deep[r]) swap(l,r);\n    return r;\n}\nvoid chafen(int l,int r){\n     ++c[l],--c[r+1];\n}\nvoid jump(int k){\n    int l=b[k].l,r=b[k].r;\n    while(top[l]!=top[r]){\n        if(deep[top[l]]<deep[top[r]])  swap(l,r); //\uff01\uff01\uff01\u6bd4\u8f83\u9876\u7aef\u7684\u6df1\u5ea6\uff01\uff01\uff01\u9519\u4e86\u4e24\u6b21\u8fd8\u4e0d\u77e5\u9053\u3002\u3002\u3002\n        int h=l; l=top[l];\n        chafen(id[l],id[h]);\n        if(fa[l]!=-1)  l=fa[l];\n    }\n    if(deep[l]<deep[r]) swap(l,r);\n    chafen(id[r]+1,id[l]);\n    return;\n}\nbool check(int k){\n    int maxn=0;\n    cur[0]=0;\n    memset(c,0,sizeof(c));\n  for(int i=1;i<=m;i++)\n         if(b[i].w>k)  maxn=max(maxn,b[i].w),cur[++cur[0]]=i;\n    for(int i=1;i<=cur[0];i++)\n         jump(cur[i]);\n    int j=0;\n    for(int i=1;i<=n;i++){\n        j+=c[i];\n        if(j==cur[0]&&i!=1)\n             if(maxn-w[rak[i]]<=k)\n                   return true;\n    }\n    return false;\n}\nint main(){\n    //freopen(\"transport.in\",\"r\",stdin);\n    //freopen(\"transport.out\",\"w\",stdout);\n    memset(son,-1,sizeof(son));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;i++){\n         register int l,r,w;\n         scanf(\"%d%d%d\",&l,&r,&w);\n         add(l,r,w);\n         add(r,l,w);\n    }\n    dfs1(1,-1,1);\n    dfs2(1,1,-1);\n    int l=0,r=0;\n    for(int i=1;i<=m;i++){\n           scanf(\"%d%d\",&b[i].l,&b[i].r);\n          b[i].w=dis[b[i].l]+dis[b[i].r]-2*dis[lca(b[i].l,b[i].r)];\n            r=max(r,b[i].w);\n    }\n    int ans=0;\n    while(l<=r){\n        int mid=(l+r)/2;\n        if(check(mid)) ans=mid,r=mid-1;\n        else l=mid+1;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n###\n```",
        "postTime": 1501729249,
        "uid": 23127,
        "name": "WHAT\uff1f\uff1f\uff1f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u53d1\u4e2a\u4e24\u4e2a\u65b0\u601d\u8def\uff0c\u540e\u4e00\u4e2aAC\u4e86\uff0c\u524d\u4e00\u4e2a\u8fd8\u6ca1\u6709\u3002\n\n\u7b2c\u4e00\u4e2a\uff1a\n\n\u4e0d\u7528\u4e8c\u5206\uff0c\u6811\u5256\uff0c\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4e2a\u5806\u5c31\u597d\u4e86\uff0c\u5c31\u662f\u6162\u5230TLE\u4e86\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\n\n\u5148\u5e38\u89c4\u8bfb\u5165\uff0c\u89c1\u7b2c\u4e8c\u4e2a\u7684\u4ee3\u7801\u3002\n\n\u56e0\u4e3a\u8bbe\u4e3a\u866b\u6d1e\u7684\u4e00\u5b9a\u5728\u6700\u957f\u7684\u8ba1\u5212\u94fe\u4e0a(\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u6700\u957f\u8ba1\u5212\u94fe\u7684\u65f6\u95f4\u5c31\u66f4\u5927)\u3002\n\n\u6240\u4ee5\u904d\u5386\u6700\u957f\u94feO(n)\uff0c\u56e0\u4e3a\u6700\u5927\u503c\u53ea\u53ef\u80fd\u51fa\u73b0\u5728\u4e0e\u5f53\u524d\u8fd0\u8f93\u901a\u9053\u6ca1\u76f8\u4ea4\u7684\u8fd0\u8f93\u8ba1\u5212\u4ee5\u53ca\u6700\u957f\u8fd0\u8f93\u8ba1\u5212\u51cf\u53bb\u672c\u6b21\u8fd0\u8f93\u957f\u5ea6\uff0c\u6bcf\u6b21\u7ef4\u62a4\u8fd8\u6ca1\u76f8\u4ea4\u7684\u94fe\uff08\u5806\uff09\u548c\u5df2\u7ecf\u4e0d\u76f8\u4ea4\u7684\u94fe\uff08\u76f4\u63a5\u53d6\u6700\u5927\u503c\uff09\uff0c\u518d\u53d6\u5806\u5934\u3001\u6700\u5927\u503c\u3001\u6700\u957f\u8ba1\u5212-\u8fd9\u6b21\u8fd0\u8f93\u901a\u9053\u957f\u5ea6O(logn)\u3002\n\n\u5224\u65ad\u76f8\u4ea4\u548c\u4e0d\u518d\u76f8\u4ea4\u7528\u5dee\u5206\uff0c\u5dee\u5206\u4ee3\u7801\u548c\u7b2c\u4e8c\u4e2a\u7684\u5408\u5e76\u4ee3\u7801\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u6267\u884c\u8bed\u53e5\u6539\u4e3a\u5dee\u5206\u5c31\u597d\u4e86\u3002\n\n\u7136\u540e\u5efa\u5806\uff0c\u904d\u5386\uff0c\u8f93\u51fa\u3002\n\n\n\u7b2c\u4e8c\u4e2a\uff1a\n\n\u5148\u8bf4\u4e00\u4e0b\u597d\u5904\uff0c\u4e0d\u7528\u4e8c\u5206\uff0c\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u4f46\u4e0d\u7528\u66f4\u6539\u3002\n\n\u56e0\u4e3a\u8bbe\u4e3a\u866b\u6d1e\u7684\u4e00\u5b9a\u5728\u6700\u957f\u7684\u8ba1\u5212\u94fe\u4e0a(\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u6700\u957f\u8ba1\u5212\u94fe\u7684\u65f6\u95f4\u5c31\u66f4\u5927)\uff0c\u4e14\u8fdb\u4e00\u6b65\u63a8\u65ad\u866b\u6d1e\u4e00\u5b9a\u5728\u8f83\u957f\u7684\u516c\u5171\u5904\u3002\n\n\u6240\u4ee5\u53ea\u9700\u8981\u6bcf\u6b21\u4ece\u5927\u5230\u5c0f\u5408\u5e76\u6700\u957f\u7684\u8ba1\u5212\uff0c\u76f4\u5230\uff08\u8fb9\u754c\u6761\u4ef6\u6765\u4e86\uff09\u5148\u6709\u6700\u957f\u8ba1\u5212-\u6700\u5927\u7684\u516c\u5171\u8fb9>\u5f53\u524d\u8ba1\u5212\u6216\u5408\u5e76\u4e3a\u7a7a\u6216\u5408\u5e76\u540e\u8ba1\u5212\u6548\u679c\u53d8\u5dee\u3002\n\n\u6240\u4ee5\u53ea\u9700\u8981\u7ef4\u62a4\u539f\u6811\u7684\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811+\u67e5\u8be2\uff0clca\uff0c\u518d\u6253\u4e2a\u5408\u5e76\u64cd\u4f5c\u5c31\u597d\u4e86\n\n\u5408\u5e76\u64cd\u4f5c\u5982\u4e0b\uff08\u5982\u679c\u6709\u795e\u7287\u5e2e\u6211\u6539\u6539\u5c31\u66f4\u597d\u4e86\uff0c\u4e2a\u4eba\u89c9\u5f97\u5199\u592a\u957f\u4e86\uff09\n\n\u8bf4\u4e00\u4e0b\u57fa\u672c\u539f\u7406\uff0c\u628a\u94fe\u62c6\u6210\u4e24\u6761\u4ece\u4e0b\u5230\u4e0a\u7684\u94fe\uff0c\u56db\u6761\u94fe\u76f8\u4e92\u5408\u5e76\uff0c\u6700\u540e\u4ea4\u5c31\u597d\u4e86\uff0c\n\n\u4e24\u6761\u5b50\u94fe\u5408\u5e76\u662f\u5c3e\u90e8\u7684lca\u4f5c\u4e3a\u65b0\u7684\u5c3e\u90e8\uff0c\u5982\u679c\u65b0\u7684\u5c3e\u90e8\u9ad8\u4e8e\u5176\u4e2d\u4e00\u4e2a\u5934\u90e8\u5c31\u628a\u4f4e\u7684\u5934\u90e8\u4f5c\u4e3a\u65b0\u7684\u5934\u90e8\u3002\n\n```cpp\nstruct tran{int beg,end,cost;}\ntran hebsubsub(tran a,tran b){//\u5b50\u94fe\u5408\u5e76\n        int tail=lca(a.end,b.end);\n        if(dfn[tail]<=dfn[a.beg]||dfn[tail]<=dfn[b.beg])return(tran){0};\n        return dfn[a.beg]>dfn[b.beg]?(tran){a.beg,tail}:(tran){b.beg,tail};\n}\ntran hebsub(tran a,tran b){//\u4e00\u6761\u5b50\u94fe\u548c\u4e00\u6761\u5b8c\u6574\u94fe\u5408\u5e76\n        if(b.beg==lca(b.beg,b.end))return hebsubsub(a,b);\n        tran c=hebsubsub(a,(tran){lca(b.beg,b.end),b.beg});if(c.beg)return c;\n        tran d=hebsubsub(a,(tran){lca(b.beg,b.end),b.end});if(d.beg)return d;\n        return (tran){0};\n}\ntran heb(tran a,tran b){//\u4e24\u6761\u5b8c\u6574\u94fe\u5408\u5e76\n        if(a.beg==lca(a.beg,a.end))return hebsub(a,b);\n        if(b.beg==lca(b.beg,b.end))return hebsub(b,a);\n        tran c=hebsub((tran){lca(a.beg,a.end),a.beg},b);\n        tran d=hebsub((tran){lca(a.beg,a.end),a.end},b);\n        if(c.beg&&d.beg)return(tran){c.end,d.end};\n        if(c.beg)return (tran){c.beg,c.end};\n        if(d.beg)return (tran){d.beg,d.end};\n        return (tran){0};\n}\n```\n\u5e95\u4e0b\u662f\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include<math.h>\n#include<time.h>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\nusing namespace std;\n#define fo(a,b,c) for(int a=b;a<=c;a++)\n#define go(a,b,c) for(int a=b;a>=c;a--)\n#define lc(a) (a<<1)\n#define rc(a) (a<<1|1)\nint read(){\n    int a=0,f=0;char c=getchar();\n    for(;c<'0'||c>'9';c=getchar())if(c=='-')f=1;\n    for(;c>='0'&&c<='9';c=getchar())a=a*10+c-'0';\n    return f?-a:a;\n}\nint min(int a,int b){return a<b?a:b;}\nint max(int a,int b){return a>b?a:b;}\nconst int maxn=300001;\nstruct edge{int v,w,next;}E[maxn<<1];\nint edg=0,cnt=0,cost[maxn],dist[maxn],head[maxn],heav[maxn],fa[maxn],fir[maxn],siz[maxn],dfn[maxn],bel[maxn],tree[maxn<<2];\nstruct tran{int beg,end,cost;}plan[maxn];\nint cmp(tran a,tran b){return a.cost>b.cost;}\nvoid cre(int u,int v,int w){E[++edg]=(edge){v,w,head[u]};head[u]=edg;}\nvoid dfs(int u,int ffa){\n    int maxn=0,maxi=0;siz[u]=1;fa[u]=ffa;\n    for(int e=head[u];e;e=E[e].next)\n        if(E[e].v!=ffa){\n            int v=E[e].v;\n            dist[v]=dist[u]+(cost[v]=E[e].w);\n            dfs(v,u);siz[u]+=siz[v];\n            if(siz[v]>maxn)maxn=siz[v],maxi=v;\n        }\n    heav[u]=maxi;\n}\nvoid dfs2(int u,int ffa){\n    dfn[u]=++cnt;bel[cnt]=u;fir[u]=ffa;\n    if(!heav[u])return;\n    dfs2(heav[u],ffa);\n    for(int e=head[u];e;e=E[e].next)\n        if(E[e].v!=fa[u]&&E[e].v!=heav[u])dfs2(E[e].v,E[e].v);\n}\nvoid build(int l,int r,int rt){ \n    if(l==r){tree[rt]=cost[bel[l]];return;}\n    int m=(l+r)>>1;\n    build(l,m,lc(rt));build(m+1,r,rc(rt));\n    tree[rt]=max(tree[lc(rt)],tree[rc(rt)]);\n}\nint ask(int L,int R,int l,int r,int rt){\n    if(L>R)return 0;\n    if(L<=l&&r<=R)return tree[rt];\n    int m=(l+r)>>1,ans=0;\n    if(L<=m)ans=ask(L,R,l,m,lc(rt));\n    if(R>m)ans=max(ans,ask(L,R,m+1,r,rc(rt)));\n    return ans;\n}\nint askl(int u,int v,int n){\n    if(fir[u]==fir[v])return ask(min(dfn[u],dfn[v])+1,max(dfn[u],dfn[v]),1,n,1);\n    if(dfn[fir[u]]<dfn[fir[v]])return max(ask(dfn[fir[v]],dfn[v],1,n,1),askl(u,fa[fir[v]],n));\n    return max(ask(dfn[fir[u]],dfn[u],1,n,1),askl(fa[fir[u]],v,n));\n}\nint lca(int u,int v){\n    if(fir[u]==fir[v])return dfn[u]<dfn[v]?u:v;\n    return dfn[fir[u]]<dfn[fir[v]]?lca(u,fa[fir[v]]):lca(fa[fir[u]],v);\n}\ntran hebsubsub(tran a,tran b){\n    int tail=lca(a.end,b.end);\n    if(dfn[tail]<=dfn[a.beg]||dfn[tail]<=dfn[b.beg])return(tran){0};\n    return dfn[a.beg]>dfn[b.beg]?(tran){a.beg,tail}:(tran){b.beg,tail};\n}\ntran hebsub(tran a,tran b){\n    if(b.beg==lca(b.beg,b.end))return hebsubsub(a,b);\n    tran c=hebsubsub(a,(tran){lca(b.beg,b.end),b.beg});if(c.beg)return c;\n    tran d=hebsubsub(a,(tran){lca(b.beg,b.end),b.end});if(d.beg)return d;\n    return (tran){0};\n}\ntran heb(tran a,tran b){\n    if(a.beg==lca(a.beg,a.end))return hebsub(a,b);\n    if(b.beg==lca(b.beg,b.end))return hebsub(b,a);\n    tran c=hebsub((tran){lca(a.beg,a.end),a.beg},b);\n    tran d=hebsub((tran){lca(a.beg,a.end),a.end},b);\n    if(c.beg&&d.beg)return(tran){c.end,d.end};\n    if(c.beg)return (tran){c.beg,c.end};\n    if(d.beg)return (tran){d.beg,d.end};\n    return (tran){0};\n}\nint main(){\n    //freopen(\"in.txt\",\"r\",stdin);\n    int n=read(),m=read();\n    fo(i,1,n-1){\n        int u=read(),v=read(),w=read();\n        cre(u,v,w);cre(v,u,w);\n    }\n    memset(heav,0,sizeof(heav));\n    dist[1]=cost[1]=0;dfs(1,0);dfs2(1,1);build(1,n,1);\n    fo(i,1,m){\n        int beg=read(),end=read();\n        if(dfn[beg]<dfn[end])plan[i].beg=beg,plan[i].end=end;\n        else plan[i].beg=end,plan[i].end=beg;\n        plan[i].cost=dist[beg]+dist[end]-2*dist[lca(beg,end)];\n    }//\u4ee5\u4e0a\u8bfb\u5165\uff0c\u7b2c\u4e00\u4e2a\u4e0e\u4e4b\u4e00\u6837\n    if(m==1){printf(\"%d\\n\",plan[1].cost-askl(plan[1].beg,plan[1].end,n));return 0;}\n    sort(plan+1,plan+m+1,cmp);\n    tran last=plan[1];int minx=askl(last.beg,last.end,n),ans=plan[1].cost-minx;\n    fo(i,2,m){\n        if(plan[1].cost-minx>plan[i].cost)break;\n        else ans=plan[i].cost;\n        last=heb(last,plan[i]);\n        if(!last.beg){ans=plan[i].cost;break;}\n        minx=askl(last.beg,last.end,n);\n        if(plan[i].cost<plan[1].cost-minx)break;\n        ans=plan[1].cost-minx;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1493519904,
        "uid": 12668,
        "name": "Minclxc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u4e0b\u9762\u7684\u9898\u89e3\u90fd\u63d0\u5230\u4e86\u4e8c\u5206\u67e5\u627e\u7b54\u6848\uff0c\u53ef\u662f\u90fd\u6ca1\u6709\u63d0\u5230\u600e\u4e48\u5224\u5b9a\u7684\u95ee\u9898\u3002\n\n\u5047\u8bbe\u6700\u5c0f\u8fd0\u8f93\u65f6\u95f4\u4e3ax\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u5fc5\u7136\u6709\u5bf9\u4e8e\u5927\u4e8ex\u7684\u6bcf\u4e00\u4e2a\u8fd0\u8f93\u8ba1\u5212\uff0c\u5b58\u5728\u4e00\u6761\u516c\u5171\u8fb9\uff0c\u4e14\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8e\u8fd0\u8f93\u8ba1\u5212\u4e2d\u7684\u6700\u5927\u7528\u65f6\u4e0ex\u7684\u5dee\n\n\u90a3\u4e48\u600e\u4e48\u627e\u516c\u5171\u8fb9\u5462\uff1f\n\n\u5148\u5047\u8bbe\u8fd9\u662f\u68f5\u6811\u662f\u4e00\u6761\u94fe\uff0c\u70b9i\u4e0ei+1\u76f8\u8fde\uff0c\u6211\u4eec\u5229\u7528\u5dee\u5206\uff0c\u5efa\u7acb\u4e00\u4e2a\u6570\u7ec4sum[N]\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fd0\u8f93\u8ba1\u5212(s-->t)\uff0csum[s]++ sum[t]-- \u7136\u540e\u518d\u6c42sum\u7684\u524d\u7f00\u548c\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u5f97\u5230\u4e86i-->fa[i]\u8fd9\u6761\u8fb9\u7684\u7ecf\u8fc7\u6b21\u6570\u662fsum[i]\n\n\u5728\u6811\u4e0a\u600e\u4e48\u505a\u5462\uff1f \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fd0\u8f93\u8ba1\u5212(s-->t) sum[s]++ sum[t]++ sum[lca(s,t)]-=2 \u7136\u540e\u6839\u636edfs\u5e8f\uff0csum[fa]+=sum[son]\u5373\u53ef\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\n\n\nrepi(i,l,m){ \n        plan &p=plans[i];\n        mark[p.s]+=1; mark[p.t]+=1;\n        mark[p.p]-=2;\n    }\n\nvoid work(int pre,int u){ \n    for(int i=head[u];i!=-1;i=edges[i].nex){\n        edge &e=edges[i];\n        if(e.t==pre) continue;\n        work(e.s,e.t);\n    }\n    mark[pre]+=mark[u];\n}\n```\nLCA\u6211\u7528\u7684\u662f\u500d\u589e\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u7528\u4e86~1000ms\uff0c\u5728NOIP\u4f30\u8ba1\u4f1a\u88ab\u5361\n\n\u2193\u2193\u2193\u770b\u4e0d\u61c2\u7684\u53ef\u4ee5\u770b\u6211\u4e0b\u9762\u5199\u7684\u9a97\u5206\u7b97\u6cd5\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#define repi(i,a,b) for(int i=a;i<=b;i++)\n#define repd(i,a,b) for(int i=a;i>=b;i--)\n#define dg(x) cout<<#x<<'='<<x<<' '\n#define end printf(\"\\n\");\nusing std::cout;\nusing std::cin;\nusing std::endl;\nusing std::vector;\nusing std::log;\nusing std::swap;\nusing std::sort;\nusing std::max;\nusing std::min;\nconst int N=300000+10;\nconst int M=N;\nconst int max_zs=21;\ninline void read(int& x){\n    x=0; char tem;\n    while(tem=getchar(),'0'>tem||tem>'9');\n    do{x*=10; x+=tem-'0';}\n    while(tem=getchar(),'0'<=tem&&tem<='9');\n}\nstruct edge{\n    int s,t,d,nex;\n    edge(int s=0,int t=0,int d=0,int nex=-1)\n    :s(s),t(t),d(d),nex(nex) {}\n};\nvector<edge> edges;\nint head[N],n,m;\nvoid add(int s,int t,int d){\n    edges.push_back(edge(s,t,d,head[s]));\n    head[s]=edges.size()-1;\n}\n\nint fa[N][max_zs]={0},val[N][max_zs]={0},dep[N]={0};\nint max_edge=-1;\nvoid build(int pre,int u,int dp){\n//    dg(u); end;\n    dep[u]=dp; fa[u][0]=pre;\n    int zs=log(dep[u])/log(2) +2;\n    repi(i,1,zs){\n        fa[u][i]=fa[fa[u][i-1]][i-1];\n        val[u][i]=val[u][i-1]+val[fa[u][i-1]][i-1];\n    }\n    for(int i=head[u];i!=-1;i=edges[i].nex){\n        edge &e=edges[i];\n        if(e.t==pre) continue;\n        val[e.t][0]=e.d;\n        //dg(u);\n        //dg(val[e.t][0]); end;\n        build(e.s,e.t,dp+1);\n    }\n}\nstruct note{\n    int p,d;\n    note(int p=0,int d=0)\n    :p(p),d(d) {}\n};\nnote lca(int a,int b){\n    if(dep[a]<dep[b]) swap(a,b);\n    int ans=0;\n    int zs=log(dep[a])/log(2) +1;\n    repd(i,zs,0) if(dep[fa[a][i]]>=dep[b]){\n        ans+=val[a][i];\n        a=fa[a][i];\n    }\n    if(a==b) return note(a,ans); //bug1\n//    dg(a); dg(b); dg(dep[a]); dg(dep[b]); dg(ans); end;\n    repd(i,zs,0) if(fa[a][i]!=fa[b][i]){\n        ans+=val[a][i]+val[b][i];\n        a=fa[a][i]; b=fa[b][i];\n    }\n    note ret=note(fa[a][0],ans+val[a][0]+val[b][0]);\n//    dg(val[a][0]+val[b][0]);\n//    dg(ret.d); dg(ret.p); end;\n    return ret;\n}\nstruct plan{\n    int s,t,p,d;\n    plan(int s=-1,int t=-1,int p=-1,int d=-1)\n    :s(s),t(t),p(p),d(d) {}\n    bool operator < (const plan& oth) const{\n        return d<oth.d;\n    }\n};\nplan plans[M];\nint mark[N]={0};\n//int af_mark[N]={0};\nvoid work(int pre,int u){ //bug3\n//    dg(u); end;\n    for(int i=head[u];i!=-1;i=edges[i].nex){\n        edge &e=edges[i];\n        if(e.t==pre) continue;\n        work(e.s,e.t);\n    }\n    mark[pre]+=mark[u];\n}\nbool check(int max_time){\n    memset(mark,0,sizeof(mark));\n//    memset(af_mark,0,sizeof(af_mark));\n    int l,r,mid;\n    l=1,r=m;\n    while(l<r){\n//        dg(l); dg(r); dg((l+r)/2); end;\n        mid=(l+r)/2;\n//        dg(plans[mid].d); dg(max_time); end;\n        if(plans[mid].d<=max_time) l=mid+1;\n        else r=mid;\n    }\n//    dg(l); end;\n    repi(i,l,m){ //bug2 bug3\n        plan &p=plans[i];\n        mark[p.s]+=1; mark[p.t]+=1;\n        mark[p.p]-=2;\n    }\n    work(1,1);\n//    repi(i,1,n) printf(\"%d \",mark[i]); printf(\"\\n\");\n    int maxi=-1,num=m-l+1;\n//    dg(num); end;\n    repi(i,1,n)\n        if(mark[i]==num) maxi=max(maxi,val[i][0]);\n//    dg(maxi); end;\n    if(plans[m].d-maxi<=max_time) return 1;\n    else return 0;\n}\nint main(){\n//    freopen(\"data.in\",\"r\",stdin);\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d\",&n,&m);\n    repi(i,1,n-1){\n        int s,t,d;\n        scanf(\"%d%d%d\",&s,&t,&d);\n        add(s,t,d); add(t,s,d);\n        max_edge=max(max_edge,d);\n    }\n//    cout<<1;\n    build(1,1,1);\n//    cout<<2;\n//    dg(n); dg(m);\n    repi(i,1,m){\n        int s,t;\n        scanf(\"%d%d\",&s,&t);\n        note tem=lca(s,t);\n        plans[i]=plan(s,t,tem.p,tem.d);\n        plan &p=plans[i];\n//        dg(p.s); dg(p.t); dg(p.p); dg(p.d); end;\n    } sort(plans+1,plans+1+m);\n    int l,r,mid;\n    r=plans[m].d; l=max(0,r-max_edge); //bug\n    while(l<r){\n        mid=(l+r)/2;\n//        dg(l); dg(r); dg(mid); end;\n        if(check(mid)) r=mid;\n        else l=mid+1;\n    }\n    printf(\"%d\",l);\n    return 0;\n};\n```",
        "postTime": 1478247451,
        "uid": 11585,
        "name": "\u4f0a\u65af\u5361\u5c14\u7684\u98ce",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7ec8\u4e8e\u8fc7\u4e86\uff0c\u6211\u5361\u4e86\u597d\u51e0\u5929\u7684\u5e38\u6570\uff0c\u6700\u540e\u901a\u8fc7\u770bdalao\u2018s blog \u53d1\u73b0\u4e8c\u5206\u8fb9\u754c\u53ef\u4ee5\u4f18\u5316\u4e3a\n\n{\n\u5de6\u7aef\u70b9 = \u8fd0\u8f93\u4e2d\u6700\u5927\u957f\u5ea6 - \u6700\u5927\u8fb9\u6743\uff1b\n\n\u53f3\u7aef\u70b9 = \u8fd0\u8f93\u8ba1\u5212\u4e2d\u6700\u5927\u8def\u5f84\u957f\u5ea6\n\n\n}\n\u5728\u500d\u589e\u6c42LCA\u65f6\u5c06\u53cc\u5411\u8fb9\u6539\u4e3a\u7531\u6839\u6307\u5411\u513f\u5b50\u7684\u5355\u5411\u8fb9\uff0c\u5c31\u53ef\u4ee5\u5c06\u5e38\u6570\u4f18\u5316\u7684\u5f88\u4f4e\n\n\u5c31\u80fd\u8fc7\u4e86\u3002\n\n\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <cstring>\nint l,r;\n```\nnamespace IO\n\n\n            \n    \n    \n    \n\n    \n\n```cpp\n{\n    typedef long long ull;\n    const ull buffsize=1<<15;\n    char buff[buffsize];\n    ull used=buffsize;\n    void init()\n    {\n        used=0;\n        ull t = fread(buff,1,buffsize,stdin);\n        if (t < buffsize) *(buff+t) = EOF;\n    }\n    ull readint()\n    {\n        bool bl=false; \n        ull temp = 0;\n        if (used==buffsize) init();\n        while ((buff[used]<'0' || buff[used]> '9') && buff[used] != '-')\n        {\n            used++;\n            if (used==buffsize) init();\n        }\n        while ((buff[used]>='0' && buff[used]<='9') || buff[used]=='-')\n        {\n            if (buff[used]=='-')\n            {\n                bl = true;\n                used++;\n            }\n            else\n            {\n                temp = temp * 10 + buff[used]-'0';\n                used++;\n            }\n            if(used==buffsize) init();\n        }\n        if (bl) temp=-temp;\n        return temp;\n    }\n}\nint n,m;\nconst int maxn = 300001;\nstruct edge\n{\n    int u,v,w,before;\n} e[maxn];\nint aa[maxn];\nstruct st\n{\n    int n,w;\n};\nint f_w[maxn];\nint now = 0;\ninline void adddedge(register int u,register int v,register int w)\n{\n    now++;e[now].u = u;e[now].v= v;e[now].w = w;\n    e[now].before = aa[u];aa[u] = now;\n    f_w[v] = w;\n}\nstruct lca_struct{\n    int f[maxn][20],g[maxn][20],vis[maxn],deep[maxn];\n    int a[maxn];int logn;int num;\n    edge e[2 * maxn + 1];\n    inline void addedge(register int u,register int v,register int w)\n    {\n        num++;e[num].u = u;e[num].v = v;e[num].w = w;\n        e[num].before = a[u]; a[u] = num;\n    }\n    inline void bfs()\n    {\n        std::queue<int> q;\n        q.push(1);deep[1] = 1;vis[1] = 1;\n        f[1][0] = 1, g[1][0] = 0;\n        while (!q.empty())\n        {\n            register int x = q.front();\n            q.pop();\n            for(register int i = a[x];i;i = e[i].before)\n            {\n                register int y = e[i].v;\n                if (vis[y]) continue;\n                adddedge(x,y,e[i].w);\n                vis[y] = 1;\n                q.push(y);\n                deep[y] = deep[x] + 1;\n                f[y][0] = x;\n                g[y][0] = e[i].w;\n            }\n        }\n    }\n    inline void init()\n    {\n        bfs();\n        while ((1<<logn) <= n) logn++;\n        logn--;\n        for(register int j = 1;j <= logn;j++)\n            for(register int i = 1;i <= n;i++)\n            {\n                f[i][j] = f[f[i][j - 1]][j - 1];\n                g[i][j] = g[f[i][j - 1]][j - 1] + g[i][j - 1];\n            }\n    }\ninline st find(register int u,register int v)\n{\n    register int ans = 0;\n    if (deep[v] > deep[u]) std::swap(u,v);\n    if (deep[v] != deep[u])\n    {\n        for(register int j = logn;j >=0 ;j--)\n        {\n            if (deep[f[u][j]] >= deep[v])\n            {\n                ans += g[u][j];\n                u = f[u][j];\n            }\n        }\n    }\n    if (u != v)\n    {\n        for(register int j = logn;j >= 0;j--)\n        {\n            if (f[u][j] != f[v][j])\n            {\n                ans += g[u][j] + g[v][j];\n                u = f[u][j];\n                v = f[v][j];\n            }\n        }\n        ans += g[u][0] + g[v][0];u = f[u][0];\n    }\n    return ((st){u,ans});\n}\n} lca_st;\nstruct half_struct\n{\n    int num;int a[maxn];\n    int u[maxn],v[maxn],length[maxn],lca[maxn];\n    void init()\n    {\n        for(register int i = 1;i <= m;i++)\n        {\n            u[i] = IO::readint();v[i] = IO::readint();\n            st x = lca_st.find(u[i],v[i]);\n            lca[i] = x.n;\n            length[i] = x.w;\n            r = std::max(r,length[i]);\n        }\n    }\n    int now;\n    void dfs(register int x)\n    {\n        for(register int i = aa[x];i;i = e[i].before)\n        {\n            register int y = e[i].v;\n            dfs(y);\n            a[x] += a[y];\n        }\n    }\n    void procedure()\n    {\n        register int answer = 0;\n        l = r - l;\n        while(l <= r)\n        {\n            now = (l + r) / 2;\n            register int cnt = 0,max = 0;\n            memset(a,0,sizeof(a));\n            for(register int i = 1;i <= m;i++)\n            {\n                if (length[i] > now)\n                {\n                    cnt++;\n                    max = std::max(max,length[i] - now);\n                    a[u[i]] += 1;a[v[i]] += 1;\n                    a[lca[i]] -= 2;\n                }\n            }\n            dfs(1);\n            register int ans = 0;\n            for(register int i = 2;i <= n;i++)\n                if (a[i] == cnt)\n                    ans = std::max(ans,f_w[i]);\n            if (ans >= max)\n            {\n                answer = now;\n                r = now - 1;\n            }\n            else l = now + 1;\n        }\n        printf(\"%d\",answer);\n    }\n} half;\nint main()\n{\n    n = IO::readint();m = IO::readint();\n    register int u,v,w;\n    for(register int i = 1;i < n;i++)\n    {\n        u = IO::readint();v = IO::readint();w = IO::readint();\n        lca_st.addedge(u,v,w);\n        lca_st.addedge(v,u,w);\n        l = std::max(l,w);\n    }\n    lca_st.init();\n    half.init();\n    half.procedure();\n}\n```",
        "postTime": 1478055155,
        "uid": 25362,
        "name": "UnitsProvideRich",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u4e00\u68f5\u6811n\u4e2a\u70b9n-1\u6761\u8fb9\n\n\u8fb9\u6709\u6743\u503c\n\nm\u4e2a\u8def\u5f84\n\n\u628a\u4e00\u6761\u8fb9\u6743\u503c\u53d8\u4e3a0\n\n\u6c42\u6700\u5927\u8def\u5f84\u7684\u6700\u5c0f\u503c\n\n\u601d\u8003\uff1a\n\n\u4e8c\u5206\u7b54\u6848\n\n\u6700\u5927\u8def\u5f84\u7684\u6700\u5c0f\u4e3ak\n\n\u662f\u5426\u80fd\u5b9e\u73b0???\n\n\u9884\u5904\u7406\u51fa\u6240\u6709\u8def\u5f84\u7684\u957f\u5ea6\n\n\u8bb0\u5f55\u4e00\u5171\u6709k\u6761\u8def\u5f84>mid\n\n\u5bf9\u4e8e\u957f\u5ea6>mid\u7684k\u6761\u8def\u5f84\uff0c\u6807\u8bb0\u6240\u6709\u8def\u4e0a\u7684\u70b9(\u9664\u53bblca)+1\n\n\u6b64\u65f6\u6240\u6709\u70b9\u6743\u4e3ak\u7684\u70b9xi\uff0c\u627e\u51fa\u5176\u4e2dxi\u5230f[xi][0]\u8fb9\u6743\u6700\u5927\u7684\u8fb9\n\n\u5224\u65adk\u6761\u8def\u5f84\u91cc\u6700\u5927\u7684\u5220\u53bb\u5b83\u662f\u5426\u6ee1\u8db3<=mid\n\n\u6ee1\u8db3->r=mid\n\n\u4e0d\u6ee1\u8db3->l=mid\n\n\u4e00\u4e9b\u6b65\u9aa4\uff1a\n\nlca\u9884\u5904\u7406\u51faf[][],deep[]\n\n\u540c\u65f6\u5904\u7406\u51fa\u6bcf\u6761\u8def\u5f84\u7684\u957f(=len[u]+len[v]-2\\*len[lca])-\u6392\u5e8f\n\n\u4e8c\u5206\u957f\u5ea6mid(l=0;r=max\\_len[i])\n\n\u4e8c\u5206\u67e5\u8be2\u51fak\n\n\u5bf9\u4e8e\u8fd9\u68f5\u6811\uff0c\u6811\u4e0a\u5dee\u5206\uff0c\u628ak\u6761\u8def\u5f84\u7684u,v +1\n\ndfs()\u66f4\u65b0(t[u]+=1;t[v]+=1;t[lca]-=2;)\n\n\u627e\u5230\u503c\u4e3ak\u7684\u70b9\u4e2dlen[i]-len[f[k][0]]\u6700\u5927\u7684\u90a3\u4e2a\n\n\u5bf9\u4e8emaxlen\\_u,maxlen\\_v\u7684\u8def\u5f84\u5224\u65adcmp=len[maxlen\\_u]+len[maxlen\\_v]-2\\*len[lca]\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define N 300005\nusing namespace std;\nint f[N][25],nxt[N<<1],head[N],to[N<<1],la[N<<1];\nint deep[N],len[N],tr[N];\nint cc,n,m,l,r,mid,k,maxx,maxlen;\nstruct rec{\n    int x,y,z,lc;\n}cd[N];\nvoid addedge(int a,int b,int v){\n    ++cc;\n    nxt[cc]=head[a];\n    head[a]=cc;\n    to[cc]=b;\n    la[cc]=v;\n}\nvoid idfs(int s){\n    for(int e=head[s];e;e=nxt[e]){\n        int tox=to[e];\n        if(tox!=f[s][0]){\n            deep[tox]=deep[s]+1;\n            f[tox][0]=s;\n            len[tox]=len[s]+la[e];\n            idfs(tox);\n        }\n    }\n}\nvoid inil(){\n    for(int i=1;i<=20;i++){\n        for(int j=1;j<=n;j++){\n            f[j][i]=f[ f[j][i-1] ][i-1];\n        }\n    }\n}\nvoid dfs(int s){\n    for(int e=head[s];e;e=nxt[e]){\n        int tox=to[e];\n        if(tox!=f[s][0]){\n            dfs(tox);\n            tr[s]+=tr[tox];\n        }\n    }\n    if(tr[s]==k&&len[s]-len[f[s][0]]>maxx){\n        maxx=len[s]-len[f[s][0]];\n    }\n}\n\nint jump(int u,int step){\n    for(int i=0;i<=20;i++)\n        if(step&(1<<i))u=f[u][i];\n    return u;\n}\nint lca(int u,int v){\n    if(deep[u]<deep[v])swap(u,v);\n    u=jump(u,deep[u]-deep[v]);\n    if(u==v)return u;\n    for(int i=20;i>=0;i--){\n        if(f[u][i]!=f[v][i]){\n            u=f[u][i];v=f[v][i];\n        }\n    }\n    return f[u][0];\n}\nbool cmp(rec a,rec b){return a.z>b.z;}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;i++){\n        int u,v,ll;\n        scanf(\"%d%d%d\",&u,&v,&ll);\n        addedge(u,v,ll);addedge(v,u,ll);\n    }\n    f[1][0]=1;deep[1]=1;len[1]=0;\n    idfs(1);\n    inil(); \n    for(int i=1;i<=m;i++){\n        int p,q;\n        scanf(\"%d%d\",&p,&q);\n        cd[i].lc=lca(p,q);\n        cd[i].z=len[p]+len[q]-2*len[cd[i].lc];\n        cd[i].x=p;cd[i].y=q;\n    }\n    sort(cd+1,cd+m+1,cmp);\n    l=0;r=cd[1].z;\n    while(l+1<r){\n        memset(tr,0,sizeof tr);\n        mid=(l+r)>>1;\n        k=0;\n        while(cd[++k].z>mid&&k<=m){\n            int tx=cd[k].x;\n            int ty=cd[k].y;\n            tr[tx]++;tr[ty]++;tr[cd[k].lc]-=2;\n        }\n        k--;\n\n        maxx=0;\n        dfs(1);\n        if(cd[1].z-maxx<=mid)r=mid;\n        else l=mid;\n    }\n    printf(\"%d\\n\",r);\n    return 0;\n}\nif(cmp<=mid)r=mid;\n\nelse l=mid;\n\n```",
        "postTime": 1509414480,
        "uid": 12779,
        "name": "yeyyx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2680 \u3010\u8fd0\u8f93\u8ba1\u5212\u3011"
    }
]