[
    {
        "content": "\u672c\u9898\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff08\u51fa\u9898\u4eba\u597d\u50cf\u6ca1\u7ed9\u9898\u89e3\uff1f\u90a3\u6211\u6765\u53d1\u4e00\u6ce2\uff09\u3002\u3002\n\n\n\u6ce8\u610f\u5230 $\\mu(\\prod_{i\\in S}i)$ \u53ea\u6709\u5f53\u6bcf\u79cd\u8d28\u56e0\u6570\u51fa\u73b0\u6b21\u6570 $\\le 1$ \u7684\u65f6\u5019\u624d $\\neq 0$ \uff0c\u56e0\u6b64 $\\prod_{i\\in S}i$ \u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u4e3a $\\prod_{i=1}^{k}p_i$ \u7684\u5f62\u5f0f\u3002\n\n\u5bf9\u4e8e\u540c\u4e00\u79cd $\\prod_{i=1}^{k}p_i$ \uff0c\u6ee1\u8db3\u6761\u4ef6\u7684 $S$ \u96c6\u5408\u4e2a\u6570\u663e\u7136\u662f $Bell_k$ \uff08\u8d1d\u5c14\u6570\uff09\u3002\u53ef\u4ee5\u8fd9\u4e48\u8003\u8651\uff0c\u76f8\u5f53\u4e8e\u628a $k$ \u4e2a\u4e0d\u540c\u7684\u5c0f\u7403\u653e\u5165\u4efb\u610f\u591a\u4e2a**\u672c\u8d28\u76f8\u540c**\u7684\u7ec4\u5185\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 $\\sum\\limits_{i=0}^{k} S(k,i)=Bell_k$ \u3002\n\n\u5176\u5b9e\u53ea\u9700\u8981\u7ba1\u5230\u5e95\u53d6\u51fa\u4e86\u591a\u5c11\u4e2a\u8d28\u6570\uff0c\u7136\u540e\u4e58\u4e0a\u8d1d\u5c14\u6570\u5373\u4e3a\u7b54\u6848\u3002\u8fd9\u91cc\u53ef\u4ee5\u901a\u8fc7**\u5206\u6cbbNTT**\u7ef4\u62a4\u53d6\u4e86 $k$ \u4e2a\u8d28\u6570\u7684 $\\varphi$ \u4e4b\u548c\u3002\n\n\u7279\u522b\u5730\uff0c\n\n\u5bf9\u4e8e $k=0$ \uff0c$\\mu$ \u5168\u4e3a $0$ \uff0c\u6545\u7b54\u6848\u4e3a $0$ \u3002\n\n\u5bf9\u4e8e $k=1$ \uff0c$S$ \u5185\u90e8\u5168\u662f\u8d28\u6570\uff0c\u90a3\u4e48\u4e0d\u9700\u8981\u4e58\u4e0a\u8d1d\u5c14\u6570\u3002\n\n**\u5206\u6cbbNTT**\u90e8\u5206\u6709 $\\frac{n}{logn}$ \u4e2a\u8d28\u6570\uff0c\u8fd9\u91cc\u590d\u6742\u5ea6 $O(\\frac{n}{logn}log^2(\\frac{n}{logn}))=O(nlogn)$ \uff0c\n\n\u8ba1\u7b97**\u8d1d\u5c14\u6570**\u8fd9\u91cc\u53ef\u4ee5\u5229\u7528\u8d1d\u5c14\u6570\u7684 $EGF$ \uff0c\u5373 $\\sum\\limits_{i}Bell_i\\frac{x^i}{i!}=e^{e^x-1}$ \uff0c\u591a\u9879\u5f0fexp\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(\\frac{n}{logn}log(\\frac{n}{logn}))=O(n)$ \u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(nlogn)$ \uff0c\u5b9e\u6d4b $n=10^6$ \u8dd1\u7684\u98de\u5feb\u3002\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define poly vector<int>\n\nconst int N = 1000005;\nconst int mod = 998244353;\nconst int G = 3;\nconst int Gi = 332748118;\n\ninline int add(int a, int b) { return a + b >= mod ? a + b - mod : a + b; }\ninline int sub(int a, int b) { return a - b < 0 ? a - b + mod : a - b; }\ninline int qpow(int a, int b = mod - 2) {\n  int res = 1;\n  while (b > 0) {\n    if (b & 1) res = 1ll * res * a % mod;\n    a = 1ll * a * a % mod, b >>= 1;\n  }\n  return res;\n}\n\nnamespace Poly {\n  poly r, W;\n  int lim, L;\n  void getR(int n) {\n    lim = 1, L = 0;\n    while (lim <= n) lim <<= 1, L++;\n    r.resize(lim), W.resize(lim);\n    for (int i = 0; i < lim; i++) r[i] = (r[i >> 1] >> 1) | ((i & 1) << L - 1);\n  }\n  void reverse(poly &a) {\n    for (int i = 0, j = a.size() - 1; i < j; i++, j--) swap(a[i], a[j]);\n  }\n  void wf(poly &a) {\n    int n = a.size();\n    for (int i = 0; i < n - 1; i++) a[i] = 1ll * (i + 1) * a[i + 1] % mod;\n    a[n - 1] = 0;\n  }\n  void jf(poly &a) {\n    int n = a.size() - 1;\n    for (int i = n - 1; i >= 1; i--) a[i] = 1ll * a[i - 1] * qpow(i) % mod;\n    a[0] = 0;\n  }\n  void NTT(poly &a, int opt) {\n    for (int i = 0; i < lim; i++) if (i < r[i]) swap(a[i], a[r[i]]);\n    for (int mid = 1; mid < lim; mid <<= 1) {\n      int Wn = qpow(opt == 1 ? G : Gi, (mod - 1) / (mid << 1));\n      W[0] = 1;\n      for (int k = 1; k < mid; k++) W[k] = 1ll * W[k - 1] * Wn % mod;\n      for (int j = 0; j < lim; j += mid << 1) {\n        for (int k = 0; k < mid; k++) {\n          int x = a[j + k], y = 1ll * a[j + k + mid] * W[k] % mod;\n          a[j + k] = add(x, y);\n          a[j + k + mid] = sub(x, y);\n        }\n      }\n    } \n    if (opt == -1) {\n      int linv = qpow(lim);\n      for (int i = 0; i < lim; i++) a[i] = 1ll * a[i] * linv % mod;\n    }\n  }\n  poly operator * (poly a, poly b) {\n    int len = a.size() + b.size() - 1;\n    getR(len), a.resize(lim), b.resize(lim);\n    NTT(a, 1), NTT(b, 1);\n    for (int i = 0; i < lim; i++) a[i] = 1ll * a[i] * b[i] % mod;\n    NTT(a, -1), a.resize(len);\n    return a;\n  }\n  poly Inv(poly a) {\n    if (a.size() == 1) return {qpow(a[0])};\n    int n = a.size();\n    poly ha = a; ha.resize(n + 1 >> 1);\n    poly b = Inv(ha);\n    getR(2 * n), a.resize(lim), b.resize(lim);\n    NTT(a, 1), NTT(b, 1);\n    for (int i = 0; i < lim; i++) b[i] = 1ll * b[i] * (mod + 2 - 1ll * a[i] * b[i] % mod) % mod;\n    NTT(b, -1), b.resize(n);\n    return b;\n  }\n  poly Ln(poly a) {\n    poly ta = a; wf(ta);\n    int n = a.size();\n    a = ta * Inv(a); jf(a);\n    a.resize(n);\n    return a;\n  }\n  poly Exp(poly a) {\n    if (a.size() == 1) return {1};\n    int n = a.size();\n    poly ta = a; ta.resize(n + 1 >> 1);\n    poly b = Exp(ta); b.resize(n);\n    poly tb = Ln(b);\n    for (int i = 0; i < n; i++) tb[i] = (mod + a[i] - tb[i]) % mod;\n    tb[0]++;\n    b = b * tb;\n    b.resize(n);\n    return b;\n  }\n}\nusing namespace Poly;\n\nint vis[N], pr[N], len;\nint fac[N], ifac[N];\nvoid init(int n) {\n  fac[0] = ifac[0] = 1;\n  for (int i = 1; i <= n; i++) fac[i] = 1ll * fac[i - 1] * i % mod;\n  ifac[n] = qpow(fac[n]);\n  for (int i = n - 1; i >= 1; i--) ifac[i] = 1ll * ifac[i + 1] * (i + 1) % mod;\n  for (int i = 2; i <= n; i++) {\n    if (!vis[i]) pr[len++] = i;\n    for (int j = 0; j < len && pr[j] * i <= n; j++) {\n      vis[pr[j] * i] = 1;\n      if (i % pr[j] == 0) break;\n    } \n  }\n}\n\npoly solve(int l, int r) {\n  if (l == r) return {1, pr[l] - 1};\n  int mid = l + r >> 1;\n  poly L = solve(l, mid), R = solve(mid + 1, r);\n  return L * R;\n}\n\nint main() {\n  int n, k;\n  cin >> n >> k;\n  if (n <= 1 || k == 0) {\n    puts(\"0\");\n    return 0;\n  }\n  init(n);\n  vector<int> Bell(len + 1);\n  for (int i = 1; i <= len; i++) Bell[i] = ifac[i];\n  Bell = Exp(Bell);\n  for (int i = 0; i <= len; i++) Bell[i] = 1ll * Bell[i] * fac[i] % mod;\n  poly res = solve(0, len - 1);\n  assert(res.size() <= len + 1);\n  int ans = 0;\n  if (k == 1) {\n    for (int i = 1; i <= len; i++) {\n      if (i & 1) {\n        ans = (ans + mod - res[i]) % mod;\n      } else {\n        ans = (ans + res[i]) % mod;\n      }\n    }\n  } else {\n    for (int i = 1; i <= len; i++) {\n      if (i & 1) {\n        ans = (ans + mod - 1ll * res[i] * Bell[i] % mod) % mod;\n      } else {\n        ans = (ans + 1ll * res[i] * Bell[i] % mod) % mod; \n      }\n    }\n  }\n  cout << ans << '\\n';\n}\n```\n",
        "postTime": 1605613039,
        "uid": 112381,
        "name": "wlzhouzhuan",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P7092 \u3010\u8ba1\u6570\u9898\u3011"
    },
    {
        "content": "\u5148\u8003\u8651 $k=2$\u3002\n\n\u6ce8\u610f\u5230 $\\mu(x)$ \u5728 $x$ \u6709\u5e73\u65b9\u56e0\u5b50\u65f6\u4e3a $0$\u3002\u56e0\u6b64\u6709 $S$ \u5185\u7684\u6570\u4e24\u4e24\u4e92\u8d28\u3002\n\n\u66f4\u8fdb\u4e00\u6b65\uff0c\u8bb0 $P(x)$ \u4e3a $x$ \u6240\u6709\u672c\u8d28\u4e0d\u540c\u8d28\u56e0\u5b50\u6784\u6210\u7684\u96c6\u5408\uff0c\u5982\u679c\u8bb0 $U$ \u4e3a\u6240\u6709 $x\\in S$ \u7684 $P(x)$ \u7684\u5e76\uff0c\u90a3\u4e48\u6709\u8fd9\u4e9b $P(x)$ \u6784\u6210\u4e86 $U$ \u7684\u4e00\u4e2a\u5212\u5206\u3002\u8fd9\u6837\u5212\u5206\u7684\u6570\u91cf\u663e\u7136\u662f $B(|U|)$\uff0c\u800c\u6240\u6709\u8fd9\u6837\u5212\u5206\u7684\u6743\u503c\u5747\u4e3a $(-1)^{|U|}\\prod_{p\\in U}(p-1)$\u3002\n\n\u7136\u540e\u5c31\u968f\u4fbf\u505a\u4e86\u3002exp \u51fa\u8d1d\u5c14\u6570\uff0c\u5206\u6cbb NTT \u5373\u53ef\u3002\u7531\u4e8e\u53ea\u6709 $\\pi(n)$ \u9879\uff0c\u590d\u6742\u5ea6\u4e3a $O(\\pi(n)\\log^2 n)=O(n\\log n)$\u3002\n\n\u6700\u540e\u8bf4\u4e00\u4e0b $k<2$\u3002\n\n$k=0$\uff1a\u7b54\u6848\u5373\u4e3a $0$\u3002\n\n$k=1$\uff1a\u65e0\u975e\u5c31\u662f\u4e0d\u52a0\u4e0a\u8d1d\u5c14\u6570\u7684\u7cfb\u6570\u3002\u4e0d\u8fc7\u7a0d\u5fae\u770b\u4e00\u4e0b\u751f\u6210\u51fd\u6570\u53ef\u4ee5\u53d1\u73b0\u5176\u503c\u5728 $n>1$ \u65f6\u6052\u4e3a $-1$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nint n, k;\n\nint main() {\n    cin >> n >> k;\n    \n    if (k == 0 || n <= 1) {\n    \tcout << 0 << endl;\n    \treturn 0;\n    }\n    \n    if (k == 1) {\n    \tcout << 998244352 << endl;\n    \treturn 0;\n    }\n    \n    sieve(n);\n    \n    queue<Poly> Q;\n    for (int i = 1; i <= pc; ++i) Q.push({1, prm[i] - 1});\n    Poly x = solve(Q);\n    \t\n    Poly fac(pc + 1), B(pc + 1);\n    fac[0] = 1;\n    for (int i = 1; i <= pc; ++i) fac[i] = p_mul(fac[i - 1], i);\n    B[pc] = p_Pow(fac[pc], p_P - 2);\n    for (int i = pc - 1; i; --i) B[i] = p_mul(B[i + 1], i + 1);\n    B = Exp(B);\n    \n    int ans = 0;\n    \n    for (int i = 1; i <= pc; ++i) {\n    \tx[i] = p_mul(x[i], p_mul(B[i], fac[i]));\n    \tif (i & 1) ans = p_sub(ans, x[i]);\n    \telse ans = p_add(ans, x[i]);\n    } \n    \n    cout << ans << endl;\n\n    return 0;\n}\n```",
        "postTime": 1682396006,
        "uid": 314991,
        "name": "zhouyuhang",
        "ccfLevel": 7,
        "title": "\u5c1d\u8bd5\u4e00\u4e0b"
    }
]