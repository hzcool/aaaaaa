[
    {
        "content": "[\u9898\u9762](https://www.lydsy.com/JudgeOnline/problem.php?id=5030)\n\n\u5199\u6655\u4e86\u5199\u6655\u4e86\uff0c\u809d\u4e86\u4e00\u4e2a\u4e0b\u5348\u52a0\u534a\u4e2a\u665a\u4e0a\uff0c\u4eba\u90fd\u505a\u61f5\u4e86\uff0c\u5e78\u4e8fBZOJ\u548cUOJ\u90fd\u662f\u8dd1\u6700\u5feb\u7684\uff0c\u4e0d\u7136\u611f\u89c9\u5de8\u4e8f\u3002\n\n\u611f\u89c9\u601d\u8def\u4e0d\u7b80\u5355\uff0c\u4ee3\u7801\u4e5f\u8d85\u7ea7\u96be\u5199\u3002\n\n\u8fd9\u9898\u5176\u5b9e\u548c[\u3010WC2004\u3011\u5b6a\u751f\u9879\u94fe](https://www.lydsy.com/JudgeOnline/problem.php?id=1361)\u8d85\u7ea7\u50cf\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u9898\u4ee3\u7801\u66f4\u96be\u5199\uff0c\u4e5f\u66f4\u6076\u5fc3\u4e00\u70b9\u3002\n\n\u6211\u4eec\u8003\u8651\u6570\u4f4dDP\u3002\n\n\u600e\u4e48\u5199DP\uff1f\n\n\u4ece\u524d\u5f80\u540e\u626b\u63cf\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bcf\u4e2a\u5b57\u7b26\uff0c\u8ba1\u7b97\u4ee5\u5f53\u524d\u786e\u5b9a\u90e8\u5206\u4e3a\u524d\u7f00\u7684\u65b9\u6848\u603b\u6570\u3002\n\n\u90a3\u4e48\u5982\u679c\u65b9\u6848\u603b\u6570>=k\uff0c\u8bf4\u660e\u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u7528\u5f04\u4e86\uff0c\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e2a\u4f4d\u7f6e\u3002\u5426\u5219\u8ba9k-=\u65b9\u6848\u603b\u6570\uff0c\u53bb\u679a\u4e3e\u4e0b\u4e2a\u5b57\u7b26\u3002\n\n\u63a5\u4e0b\u6765\u91cd\u70b9\u5c31\u662f\u5982\u4f55\u8bb0\u5f55\u65b9\u6848\u603b\u6570\uff0c\u60f3\u6cd5\u5f53\u7136\u5c31\u662f\u4e4b\u524d\u63d0\u8fc7\u7684\u6570\u4f4dDP\u3002\n\nf[i][j][k]\u8868\u793a\u7b2ci\u4f4d\u5df2\u5339\u914d\u7684j\u4f4d\u672a\u5339\u914dk\u4f4d\u7684\u65b9\u6848\u603b\u6570\u3002\n\n\u679a\u4e3e\u5f53\u524d\u4f7f\u7528\u7684\u5b57\u7b26\uff0c\u7528KMP\u8f6c\u79fb\uff0c\u7531\u4e8e\u5df2\u7ecf\u77e5\u9053\u4e86\u6700\u5927\u5339\u914d\u957f\u5ea6\uff0c\u90a3\u4e48\u5f53\u524d\u6dfb\u52a0\u7684\u5b57\u7b26\u5c31\u4e0d\u80fd\u8d85\u8fc7\u6700\u5927\u5339\u914d\u7684\u4e0b\u4e00\u4f4d\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u5df2\u7ecf\u786e\u5b9a\u7684\u4f4d\u7f6e\u65e0\u9700\u518d\u8ba1\u7b97\u65b9\u6848\u603b\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u672a\u77e5\u7684\u4f4d\u7f6e\u5f00\u59cb\u5c31\u884c\u4e86\u3002\n\n\u800c\u7b2ci\u4f4d\u7684\u5339\u914d\u60c5\u51b5\u53ea\u4e0e\u7b2ci-1\u4f4d\u7684\u5339\u914d\u60c5\u51b5\u6709\u5173\uff0c\u6240\u4ee5\u8fd9\u5b8c\u5168\u53ef\u4ee5\u6eda\u52a8\u4e00\u4e0b\u3002\n\n\u5177\u4f53\u8f6c\u79fb\u4ee5\u53ca\u5404\u79cd\u7ec6\u8282\u53c2\u89c1\u4ee3\u7801\u5427\u3002\n\ncode\uff1a\n```\n//2018.8.3 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register LL\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline LL read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline LL _abs(const res &x){\n    return x>0?x:-x;\n}\ninline LL _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline LL _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst LL C=30,CH=26,N=50+10;\nconst char max_char=CH+'a'-1;\nLL n,k,len;\nLL pre[N],next[N][C],minchar[N],ret[N];\nLL f[2][N][N],dp[N][N];\nchar s[N<<1];\ninline bool judge(){\n    for(res i=0;i<len;i++)s[i+len]=s[i];\n    for(res i=1;i<len;i++){\n        res j;\n        for(j=0;j<len;j++)if(s[j]!=s[i+j])break;\n        if(j==len||s[i+j]<s[j])return 0;\n    }\n    return 1;\n}\ninline bool inc(){\n    while(len&&s[len-1]==max_char)len--;\n    if(!len)return 0;\n    s[len-1]++;\n    return 1;\n}\ninline LL get_tot(){\n    memset(next[0],0,sizeof(next[0]));\n    pre[0]=-1;\n    minchar[0]=0;\n    for(res i=0;i<len;i++){\n        res c=s[i]-'a';\n        if(c<minchar[i])return 0;\n        minchar[i]=c;\n        next[i][c]=i+1;\n        if(pre[i]==-1)pre[i+1]=0;\n        else pre[i+1]=next[pre[i]][c];\n        minchar[i+1]=minchar[pre[i+1]];\n        for(res j=0;j<CH;j++)next[i+1][j]=next[pre[i+1]][j];\n    }\n    for(res i=0;i<=len;i++){\n        ret[i]=0;\n        res j=i;\n        for(res k=0;k<len;k++){\n            if(s[k]-'a'<minchar[j]){ret[i]=-1;break;}\n            j=next[j][s[k]-'a'];\n            if(j==len)ret[i]++;\n        }\n    }\n    memset(f,0,sizeof(f));\n    memset(dp,0,sizeof(dp));\n    f[len&1][pre[len]][0]=1;\n    for(res i=len;i<=n;i++){\n        memset(f[(i+1)&1],0,sizeof(f[(i+1)&1]));\n        for(res j=0;j<len;j++)\n            for(res k=0;k<=n-len;k++){\n                if(ret[j]>=0)dp[i][k+ret[j]]+=f[i&1][j][k];\n                if(i==n)continue;\n                if(f[i&1][j][k]){\n                    if(j+1==len)f[(i+1)&1][pre[len]][k+1]+=f[i&1][j][k];\n                    else f[(i+1)&1][j+1][k]+=f[i&1][j][k];\n                    f[(i+1)&1][0][k]+=f[i&1][j][k]*(CH-1-minchar[j]);\n                }\n            }\n    }\n    for(res i=pre[len];i;i=pre[i]){\n        if(ret[len-i]>=0)\n            for(res j=2;j*(len-i)<=n;j++)\n                if(j*(len-i)>=len)dp[j*(len-i)][j]--;\n        if((len-i)*2<len)i=(i-1)%(len-i)+1;\n    }\n    for(res i=len;i<=n;i++)\n        for(res j=1;j<=i;j++)\n            if(dp[i][j])for(res k=2;i*k<=n;k++)dp[i*k][j*k]-=dp[i][j];\n    res ans=0;\n    for(res i=len;i<=n;i++)\n        for(res j=1;j<=i;j++)\n            if(dp[i][j])ans+=dp[i][j]/j;\n    return ans;\n}\nint main(){\n    n=read(),k=read();\n    scanf(\"%s\",s);\n    len=strlen(s);\n    while(233){\n        res tot=get_tot();\n        if(tot<k){\n            k-=tot;\n            if(!inc()){puts(\"-1\");return 0;}\n        }\n        else {\n            if(judge())\n\t\t\t    if(--k==0)break;\n            s[len++]='a';\n        }\n    }\n    for(res i=0;i<len;i++)putchar(s[i]);\n    return 0;\n}\n```",
        "postTime": 1533293854,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010CTSC2016\u3011\u9999\u5c71\u7684\u6811"
    },
    {
        "content": "# P5420 \u9999\u5c71\u7684\u6811 \u53e6\u89e3\n\n\u8fd9\u4e2a\u9898\u5927\u90e8\u5206\u4eba\u90fd\u662f\u7528 KMP \u81ea\u52a8\u673a+dp \u505a\u7684\u3002\u8fd9\u91cc\u662f\u4e00\u4e2a\u4e0d\u7528 KMP \u7684\u505a\u6cd5\u3002\n\n## \u8bb0\u53f7\n\n\u5b57\u7b26\u96c6\u4e3a $\\Sigma$\uff0c\u5047\u8bbe\u6700\u5c0f\u7684\u5b57\u6bcd\u662f $\\mathrm a$\uff0c\u6700\u5927\u7684\u5b57\u6bcd\u662f $\\mathrm z$\u3002\n\n$\\operatorname{pref}_i$ \u8868\u793a\u957f\u5ea6\u4e3a $i$ \u7684\u524d\u7f00\uff0c$\\operatorname{suf}_i$ \u8868\u793a\u957f\u5ea6\u4e3a $i$ \u7684\u540e\u7f00\u3002\n\n\u4e00\u4e2a Lyndon word \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6ee1\u8db3\u5176\u4efb\u610f\u4e00\u4e2a\u975e\u7a7a\u4e14\u4e0d\u7b49\u4e8e\u81ea\u8eab\u7684\u540e\u7f00\u5c0f\u4e8e\u4ed6\u81ea\u8eab\u3002\n\n\u4e00\u4e2a necklace \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ed6\u662f\u81ea\u5df1\u7684\u6700\u5c0f\u5faa\u73af\u8868\u793a\u3002\n\n\u663e\u7136\uff0cLyndon word \u4e00\u5b9a\u662f necklace\uff0c\u5e76\u4e14\u4e00\u4e2a necklace \u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a Lyndon word \u7684\u82e5\u5e72\u6b21\u91cd\u590d\u3002\n\n\u6bd4\u5982\uff1aaab \u65e2\u662f Lyndon word \u53c8\u662f necklace\uff0caabaab \u4e0d\u662f Lyndon word \u4f46\u662f\u662f necklace\u3002\n\n\u8bb0 $\\operatorname{minrot}(a)$ \u4e3a $a$ \u7684\u6700\u5c0f\u8868\u793a\uff0c$\\operatorname{lyn}(a)$ \u4e3a $a$ \u7684\u6700\u957f Lyndon \u524d\u7f00\u7684\u957f\u5ea6\u3002\n\n\u8bb0 $\\operatorname{largestLyndon}(a)$ \u8868\u793a\u4e0d\u8d85\u8fc7 $a$ \u7684\u6700\u5927 Lyndon word\uff0c$\\operatorname{largestNecklace}(a)$ \u8868\u793a\u4e0d\u8d85\u8fc7 $a$ \u7684\u6700\u5927 necklace\u3002\n\n## \u7b80\u8981\u601d\u8def\n\n\u5148\u5b9e\u73b0 $O(n^2)$ \u6b21\u8fd0\u7b97\u6c42\u51fa\u4e00\u4e2a Lyndon word $S$ \u5728\u957f\u4e3a $|S|$ \u7684 Lyndon word \u4e2d\u6392\u540d\u7b2c\u51e0\uff08\u5177\u4f53\u65b9\u6cd5\u89c1\u4e0b\u6587\uff09\u3002\n\n> \u7b97\u6cd5\u4e00\uff1a\u6c42\u51fa $S$ \u5728\u957f\u5ea6 $\\leq n$ \u7684 Lyndon word \u4e2d\u7684\u6392\u540d\n\n\u5148\u679a\u4e3e\u957f\u5ea6 $l$\uff0c\u7136\u540e\u5206\u7c7b\u8ba8\u8bba\uff1a$l\\leq |S|$\uff1a$rk(\\operatorname{largestLyndon}(\\operatorname{pref}(S))$\uff1b$l > |S|$\uff1a$rk(\\operatorname{largestLyndon}(S\\mathrm a^{l - |S|}))$\u3002$O(n^3)$ \u6b21\u8fd0\u7b97\u3002\n\n> \u7b97\u6cd5\u4e8c\uff1a\u6c42\u51fa\u957f\u5ea6 $\\leq n$ \u7684\u4ee5 $S$ \u4e3a\u524d\u7f00\u7684 Lyndon word \u4e2a\u6570\n\n\u5148\u679a\u4e3e\u957f\u5ea6 $l$\uff0c\u5176\u8d21\u732e\u4e3a\uff1a$rk(\\operatorname{largestLyndon}(Sz^{l-|S|}))-rk(\\operatorname{largestLyndon}(Sa^{l-|S|}))$\u3002$O(n^3)$ \u6b21\u8fd0\u7b97\u3002\n\n\u63a5\u4e0b\u6765\u6709\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a\n\n1. > \u9010\u4f4d\u786e\u5b9a\n   >\n\n   \u6bcf\u6b21\u7b97\u51fa\u4ee5 $p$ \u4e3a\u524d\u7f00\u7684 Lyndon word \u7684\u4e2a\u6570 $u$\uff0c\u8ba8\u8bba $k$ \u548c $u$ \u7684\u5173\u7cfb\uff1a\n\n   \u5982\u679c $k > u$\uff0c\u5219\u8868\u793a $p$ \u6bd4\u7b54\u6848\u7684\u540c\u6837\u957f\u5ea6\u7684\u524d\u7f00\u5c0f\uff0c$k$ \u51cf\u53bb $u$\uff0c$p$ \u53d8\u5927 $1$ \u6b65\uff08\u8fd9\u91cc\u9700\u8981\u5148\u5220\u53bb $p$ \u540e\u7f00\u7684\u6240\u6709 $\\mathrm z$\uff09\u3002\u5982\u679c $p$ \u65e0\u6cd5\u518d\u53d8\u5927\u5c31\u8f93\u51fa $-1$\u3002\n\n   \u5426\u5219 $p$ \u80af\u5b9a\u662f\u7b54\u6848\u7684\u524d\u7f00\uff0c\u5728 $p$ \u7684\u540e\u9762\u52a0\u4e0a $\\mathrm a$\u3002\n\n   \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u76f4\u5230 $p$ \u662f\u7b54\u6848\u3002\u8003\u8651\u5230\u6574\u4e2a\u8fc7\u7a0b\u4e2d $p$ \u7684\u5b57\u5178\u5e8f\u9012\u589e\uff0c\u6240\u4ee5\u53ea\u4f1a\u6267\u884c $O(n|\\Sigma|)$ \u6b21\u6392\u540d\u7684\u67e5\u8be2\u3002\n\n   \u56e0\u4e3a $k$ \u53ea\u6709 $10^{15}$\uff0c\u6240\u4ee5\u6211\u4eec\u7b97\u6392\u540d\u7684\u65f6\u5019\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6570\u53d6\u6a21\uff08\u6211\u7684\u4ee3\u7801\u4e2d\u5bf9 $2^{64}$ \u53d6\u6a21\uff09\uff0c\u8fd9\u6837\u4e0d\u7528\u9ad8\u7cbe\u5ea6\u3002\n\n   \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^4|\\Sigma|)$\uff0c\u548c KMP \u7684\u505a\u6cd5\u662f\u4e00\u6837\u7684\u3002\n\n2. > \u4e8c\u5206\n\n   \u6bcf\u6b21\u4e8c\u5206\u786e\u5b9a\u4e00\u4f4d\u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^4 \\log |\\Sigma|)$ \u6b21\u8fd0\u7b97\uff0c\u4f46\u662f\u5bb9\u6613\u53d1\u73b0\u9700\u8981\u9ad8\u7cbe\u5ea6\u3002\u9ad8\u7cbe\u5ea6\u7684\u4f4d\u6570\u662f $\\dfrac {\\log |\\Sigma|^n} {\\log 2^w} = n \\log |\\Sigma| / w$\uff08\u538b\u4f4d\u9ad8\u7cbe\uff09\u3002\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^6 \\log^3 |\\Sigma| / w^2)$\u3002\u5728 $n$ \u66f4\u5c0f\uff0c$\\Sigma$ \u66f4\u5927\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6bd4\u8f83\u6709\u4f18\u52bf\u3002\n\n\u63a5\u4e0b\u6765\u8bf4\u8bf4\u600e\u4e48\u6c42\u51fa\u4e00\u4e2a Lyndon word $S$ \u5728\u957f\u4e3a $|S|$ \u7684 Lyndon word \u4e2d\u6392\u540d\u7b2c\u51e0\u3002\n\n## $O(n^2)$ ranking\n\n> Lemma 1\uff1a\u82e5 $a$ \u662f\u4e00\u4e2a necklace\u3002\u5982\u679c $x>a_j$\uff0c\u90a3\u4e48 $a_ia_{i+1}\\ldots a_{j-1}x$ \u6bd4 $a$ \u5927\u3002\n\n\u8003\u8651 $a_ia_{i+1}\\ldots a_j \\geq a_1a_2\\ldots a_{j-i+1}$\u3002\u6613\u8bc1\u3002\n\n> \u7b97\u6cd5\u4e09\uff1a\u5728 $O(n)$ \u65f6\u95f4\u5185\u6c42\u51fa $\\operatorname{minrot}(a)$ \u548c $\\operatorname{lyn}(a)$\uff0c\u6216\u8005\u5224\u65ad\u4e00\u4e2a\u4e32\u662f\u4e0d\u662f\u4e00\u4e2a necklace\u3002\n\n\u5176\u5b9e\u662f\u9b54\u6539 Duval \u7b97\u6cd5\u3002\u521d\u59cb\u65f6 $p=1$\uff0c\u6307\u9488 $q=1$\u3002$q$ \u5728 $a$ \u4e0a\u5f80\u540e\u626b\uff0c\u5982\u679c $a_q > a_{q-p}$ \u8bf4\u660e\u5b58\u5728\u66f4\u957f Lyndon \u524d\u7f00\uff0c\u66f4\u65b0 $p$\uff1b\u5426\u5219\u8bf4\u660e\u65e0\u6cd5\u5f80\u540e\u6269\u5c55\uff0c\u76f4\u63a5\u9000\u51fa\u3002\u5982\u679c\u6ca1\u6709\u626b\u5b8c\u5c31\u9000\u51fa\u4e86\u90a3\u4e48\u80af\u5b9a\u4e0d\u662f necklace\u3002\n\n> Lemma 2\uff1a\u5982\u679c $\\operatorname{lyn}(a) = p$\uff0c\u5219 $\\forall b < \\operatorname{suf}_{n-p}$\uff0c\u6709 $\\operatorname{lyn}(\\operatorname{pref}_p b)=p$\u3002\n\n\u6839\u636e\u7b97\u6cd5\u4e09\u6613\u8bc1\u3002\n\n> \u7b97\u6cd5\u56db\uff1a\u5728 $O(n^2)$ \u65f6\u95f4\u5185\u6c42\u51fa $\\operatorname{largestLyndon}$ \u548c $\\operatorname{largestNecklace}$\u3002\n>\n\n \u6839\u636e Lemma 2\uff0c\u5982\u679c $a$ \u4e0d\u662f\u4e00\u4e2a necklace\uff0c\u4e14 $p=\\operatorname{lyn}(a)$\uff0c\u90a3\u4e48\u5927\u4e8e $\\operatorname{pref}_{p-1}(a_p-1)\\mathrm k^{n-p}$ \u7684\u4e32\u4e00\u5b9a\u4e0d\u662f necklace\u3002\u5982\u679c\u4e00\u4e2a\u4e32\u662f Lyndon word\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e32\u4e00\u5b9a\u662f\u4e00\u4e2a necklace\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u6c42\u51fa $p$\uff0c\u7136\u540e\u66f4\u65b0 $a$\uff0c\u76f4\u5230 $a$ \u662f necklace \u6216\u8005 Lyndon word \u4e3a\u6b62\u3002\n\n\u6ce8\u610f\u5230\u5728\u4e00\u4e2a Lyndon word \u540e\u9762\u6dfb\u52a0\u82e5\u5e72\u4e2a $\\mathrm z$ \u4e4b\u540e\u4ed6\u8fd8\u662f\u4e00\u4e2a Lyndon word\uff0c\u6240\u4ee5\u5982\u679c\u5728\u6b64\u8fc7\u7a0b\u4e2d $p$ \u589e\u5927\u4e86\uff0c\u90a3\u4e48 $a$ \u4e00\u5b9a\u662f necklace \u6216\u8005 Lyndon word \u4e86\u3002\u8003\u8651\u5230 $p$ \u4e00\u5b9a\u4e0d\u4f1a\u4e0d\u53d8\uff0c\u6240\u4ee5\u5728\u6ca1\u627e\u5230\u7b54\u6848\u7684\u65f6\u5019 $p$ \u4e00\u5b9a\u662f\u4e25\u683c\u9012\u51cf\u7684\u3002\u6240\u4ee5\u81f3\u591a\u66f4\u65b0 $n$ \u6b21 $a$\u3002\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$\u3002\n\n---\n\n\u4ee4 $a$ \u662f\u4e00\u4e2a necklace\u3002\u8bb0 $B_{t, j} (t \\geq j)$ \u4e3a\u957f\u5ea6\u4e3a $t$ \u5e76\u4e14\u548c $a$ \u6709\u957f\u5ea6\u81f3\u5c11\u4e3a $j$ \u7684\u5171\u540c\u524d\u7f00\u5e76\u4e14\u6bcf\u4e2a\u540e\u7f00\u90fd\u5927\u4e8e $a$ \u7684\u4e32\u7684\u4e2a\u6570\u3002\n\n> \u7b97\u6cd5\u4e94\uff1a\u5728 $O(n^2)$ \u65f6\u95f4\u5185\u6c42\u51fa $B$\u3002\n\n\u663e\u7136\u521d\u59cb\u72b6\u6001\u4e3a $B_{0,0}=1$\uff0c$B_{i,i}=0\\ (i\\geq1)$\u3002\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e $B_{t,j}$ \u6211\u4eec\u8003\u8651\u7b2c $j+1$ \u4f4d\u7684\u9009\u62e9\u3002\u6839\u636e Lemma 1\uff0c\u7b2c $j+1$ \u4f4d\u4e0d\u80fd\u53d6\u5c0f\u4e8e $a_{j+1}$\u200b\u200b \u7684\u503c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8f6c\u79fb\uff1a\n$$\nB_{t,j} = B_{t, j+1} + (z - a_{j+1}) \\cdot B_{t - j - 1,0}\n$$\n\u76f4\u63a5 dp\uff0c$O(n^2)$\u3002\n\n---\n\n\u8bb0 $T(a)$ \u8868\u793a\u6700\u5c0f\u5faa\u73af\u8868\u793a\u4e0d\u5927\u4e8e $a$\u200b\u200b\u200b \u5e76\u4e14\u548c $a$ \u7b49\u957f\u7684\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u3002\n\n\u6ce8\u610f\u5230 $T(a) = T(\\operatorname{largestNecklace}(a))$\uff0c\u6240\u4ee5\u6211\u4eec\u63a5\u4e0b\u6765\u53ea\u8003\u8651 $a$ \u4e3a necklace \u7684\u60c5\u51b5\u3002\n\n> \u7b97\u6cd5\u516d\uff1a\u5728 $O(n^2)$ \u65f6\u95f4\u5185\u6c42\u51fa $T(a)$\u3002\n\n\u56e0\u4e3a $T(a) = T(\\operatorname{largestNecklace}(a))$\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u628a $a$ \u53d8\u6210 $\\operatorname{largestNecklace}(a)$\u3002\n\n\u6211\u4eec\u8003\u8651\u628a\u6240\u6709\u6700\u5c0f\u5faa\u73af\u5c0f\u65f6\u4e0d\u5927\u4e8e $a$ \u7684\u5b57\u7b26\u4e32 $b$ \u5206\u7ec4\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a $b$\uff0c\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5faa\u73af\u79fb\u4f4d $b_ib_{i+1}\\ldots b_nb_1b_2\\ldots b_{i-1}$ \u4f7f\u5f97 $b \\leq a$\u3002\u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u53d6\u6700\u5c0f\u7684 $i$\u200b\u3002\u6211\u4eec\u628a $b$ \u5f52\u5165 $T_{i, lcp(a, b)}(a)$ \u4e2d\uff0c\u5176\u4e2d $lcp(a,b)$ \u8868\u793a $a$ \u548c $b$ \u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002\n\n\u4ee4 $f(i,j)=|T_{i,j}(a)|$\u3002\n\n\u5f53 $j=n$ \u7684\u65f6\u5019\uff0c$\\sum \\limits_{i=1}^n f(i,n)$ \u663e\u7136\u5c31\u662f $a$ \u7684\u5faa\u73af\u79fb\u4f4d\u7684\u6570\u91cf\u3002\u56e0\u4e3a $a$ \u5df2\u7ecf\u662f\u4e00\u4e2a necklace \u4e86\uff0c\u6240\u4ee5\u5c31\u662f $\\operatorname{lyn}(a)$\u3002\n\n\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002\n\n1. $i+j \\leq n$\u200b\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f\u5f62\u5982 $c \\operatorname{pref}_j de$\uff0c\u5176\u4e2d $c$ \u662f\u957f\u5ea6\u4e3a $i-1$ \u7684\u6bcf\u4e2a\u540e\u7f00\u90fd\u5927\u4e8e $a$ \u7684\u5b57\u7b26\u4e32\uff0c$d$ \u662f\u5c0f\u4e8e $a_{j+1}$ \u7684\u5b57\u7b26\uff0c$e$ \u662f\u957f\u5ea6\u4e3a $n-i-j$ \u7684\u4efb\u610f\u5b57\u7b26\u4e32\u3002\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e0b\n   $$\n   f(i,j)=B_{i-1,0} \\cdot (a_{j+1}-\\mathrm a) \\cdot |\\Sigma|^{n-i-j}\n   $$\n\n2. $i+j>n$\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f\u5f62\u5982 $a_{n-i+2 \\ldots j} cd \\operatorname{pref}_{n-i+1}$\uff0c\u5176\u4e2d $c$ \u662f\u5c0f\u4e8e $a_{j+1}$ \u7684\u5b57\u7b26\uff0c$d$ \u662f\u957f\u4e3a $n-j-1$ \u7684\u5b57\u7b26\u4e32\u3002$a_{n-i+2 \\ldots j} cd$ \u7684\u6bcf\u4e2a\u540e\u7f00\u90fd\u5927\u4e8e $a$\u3002\n\n   \u56e0\u4e3a $a$ \u662f\u4e00\u4e2a necklace\uff0c\u6240\u4ee5\u80af\u5b9a\u6709 $a_{n-i+2\\ldots j} \\geq \\operatorname{pref}_{i+j-n-1}$\u3002\n\n   \u4ee4 $s$ \u4e3a\u6700\u5927\u7684\u6ee1\u8db3 $a_{j-s+1\\ldots j} = \\operatorname{pref}_s$\uff0c\u5219 $b_{t\\ldots n}>a\\ (t \\leq i+j-n-1-s)$\u200b\u3002\n\n   \u6211\u4eec\u53ef\u4ee5\u6839\u636e Lemma 1 \u5728 $O(n^2)$ \u65f6\u95f4\u5185\u9884\u5904\u7406\u51fa\u6240\u6709\u7684 $s$\u3002\n\n   \u6240\u4ee5\u76f4\u63a5\u8003\u8651\u8d21\u732e\uff1a$c = a_{s+1}$ \u7684\u8d21\u732e\u4e3a $B_{n-j+s,s+1}$\uff1b$c>a_{s+1}$ \u7684\u8d21\u732e\u4e3a $B_{n-j-1,0} \\cdot (a_{j+1}-a_{s+1}-1)$\u200b\u3002\n   $$\n   f(i,j) = B_{n-j+s,s+1} + B_{n-j-1,0} \\cdot (a_{j+1}-a_{s+1}-1)\n   $$\n\n\u56e0\u4e3a\n$$\nT(a) = \\sum _{i=1}^n \\sum _{j=0}^n f(i,j)\n$$\n\u6240\u4ee5\u6211\u4eec\u505a\u4e00\u904d\u7b80\u5355\u7684\u6c42\u548c\u5c31\u53ef\u4ee5\u7b97\u51fa $T(a)$\u200b\u3002\n\n> \u7b97\u6cd5\u4e03\uff1a\u5728 $O(n^2)$ \u65f6\u95f4\u5185\u6c42\u51fa Lyndon word $a$ \u5728\u957f\u5ea6\u4e3a $|a|$ \u7684 Lyndon word \u4e2d\u7684\u6392\u540d\u3002\n\n\u8fd9\u597d\u50cf\u662f\u4e2a\u5e7f\u4e3a\u4eba\u77e5\u7684\u7ed3\u8bba\uff1f\n\n$RL(a)$ \u8868\u793a $a$ \u5728\u540c\u957f\u5ea6\u7684 Lyndon word \u4e2d\u7684\u6392\u540d\u3002\n\n\u4ee4 $P(a)$ \u8868\u793a\u6700\u5c0f\u5faa\u73af\u8868\u793a\u4e0d\u5927\u4e8e $a$ \u5e76\u4e14\u548c $a$ \u7b49\u957f\u7684\u4e0d\u5faa\u73af\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u3002\n\n\u663e\u7136\uff0c$RL(a) = P(a)/n$\uff0c\u5e76\u4e14 $T(a) = \\sum \\limits_{d|n} P(\\operatorname{pref}_d)$\u3002\n\n\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u53ef\u5f97\n$$\nP(a) = \\sum _{d|n} \\mu \\left(\\dfrac n d\\right) T(\\operatorname{pref}_d)\n$$\n\u6545\n$$\nRL(a) = \\dfrac 1 n \\sum _{d|n} \\mu \\left(\\dfrac n d\\right) T(\\operatorname{pref}_d)\n$$\nBonus\uff1a\u6211\u4eec\u53ef\u4ee5\u7528 Burnside \u5f15\u7406\u5f97\u51fa\u8ba1\u7b97 necklace \u6392\u540d\u7684\u65b9\u6cd5\u3002\n\n\u4ee3\u7801\n\n```cpp\n\n\n#pragma GCC optimize(3)\n#include <bits/stdc++.h>\n\ntypedef unsigned long long ull;\nconst int N = 55;\nint isprime[N], mu[N], prime[N], num, suf[N][N];\n\nint cur_n;\nstruct modmodint { // a * n + b\n    ull a; int b;\n    modmodint() { a = b = 0; }\n    modmodint(int _a) { a = _a / cur_n, b = _a % cur_n; }\n    modmodint(ull _a, int _b) { a = _a, b = _b; }\n} pow26[N][N], B[N][N];\n\ninline modmodint operator +(const modmodint &x, const modmodint &y) {\n    int tmp = x.b + y.b;\n    if (tmp >= cur_n) return modmodint(x.a + y.a + 1, tmp - cur_n);\n    else return modmodint(x.a + y.a, tmp);\n}\n\ninline modmodint operator -(const modmodint &x, const modmodint &y) {\n    int tmp = x.b - y.b;\n    if (tmp < 0) return modmodint(x.a - y.a - 1, tmp + cur_n);\n    else return modmodint(x.a - y.a, tmp);\n}\n\ninline modmodint operator *(const modmodint &x, const modmodint &y) {\n    modmodint z;\n    z.a = x.a * y.a * cur_n + x.a * y.b + x.b * y.a;\n    z.b = x.b * y.b;\n    z.a += z.b / cur_n, z.b %= cur_n;\n    return z;\n}\n\ninline modmodint& operator +=(modmodint &x, const modmodint &y) { return x = x + y; }\ninline modmodint& operator -=(modmodint &x, const modmodint &y) { return x = x - y; }\n\nvoid get_mu(int n) {\n\tisprime[1] = mu[1] = 1;\n\tfor (int i = 2; i < n; ++i) {\n\t\tif (!isprime[i]) prime[++num] = i, mu[i] = -1;\n\t\tfor (int j = 1; j <= num && i * prime[j] < n; ++j) {\n\t\t\tisprime[i * prime[j]] = 1;\n\t\t\tif (i % prime[j]) mu[i * prime[j]] = -mu[i];\n\t\t\telse { mu[i * prime[j]] = 0; break; }\n\t\t}\n\t}\n}\n\nint lyn(char *s, int len) {\n\tint p = 1;\n\tfor (int i = 2; i <= len; ++i) {\n\t\tif (s[i] > s[i - p]) p = i;\n\t\telse if (s[i] < s[i - p]) return p;\n\t}\n\treturn p;\n}\n\nbool is_necklace(char *s, int len) {\n\tint p = 1;\n\tfor (int i = 2; i <= len; ++i) {\n\t\tif (s[i] > s[i - p]) p = i;\n\t\telse if (s[i] < s[i - p]) return 0;\n\t}\n\treturn (len % p == 0);\n}\n\nbool get_largest_lyndon(char *t, int n) {\n    while (lyn(t, n) != n) {\n        int p = lyn(t, n);\n        if (t[p] == 'a') return 0;\n        --t[p];\n        for (int i = p + 1; i <= n; ++i) t[i] = 'z';\n    }\n    return 1;\n}\n\nvoid get_largest_necklace(char *s, int len, char *t) {\n\tmemcpy(t, s, (len + 1) * sizeof(char));\n\twhile (!is_necklace(t, len)) {\n\t\tint p = lyn(t, len);\n\t\t--t[p];\n\t\tfor (int i = p + 1; i <= len; ++i) t[i] = 'z';\n\t}\n}\n\nchar neck[N];\n\nmodmodint get_T(char *s, int n) {\n    get_largest_necklace(s, n, neck);\n\tB[0][0] = 1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tB[i][i] = 0;\n\t\tfor (int j = i - 1; ~j; --j)\n\t\t\tB[i][j] = B[i][j + 1] + B[i - j - 1][0] * ('z' - neck[j + 1]);\n\t}\n\tfor (int i = 2; i <= n; ++i) {\n\t\tint u = i;\n\t\tfor (int j = i; j <= n; ++j) {\n\t\t\tif (neck[j] > neck[j - u + 1]) u = j + 1;\n\t\t\tsuf[i][j] = j - u + 1;\n\t\t}\n\t}\n\tmodmodint res = lyn(neck, n);\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 0; j < n; ++j) {\n\t\t\tif (i + j <= n) res += B[i - 1][0] * (neck[j + 1] - 'a') * pow26[cur_n][n - i - j];\n\t\t\telse {\n\t\t\t\tint tmp = (j < n - i + 2) ? 0 : suf[n - i + 2][j];\n\t\t\t\tif (neck[j + 1] > neck[tmp + 1])\n\t\t\t\t\tres += B[n - j + tmp][tmp + 1] + B[n - j - 1][0] * (neck[j + 1] - neck[tmp + 1] - 1);\n\t\t\t}\n\t\t}\n\treturn res;\n}\n\null rank_lyndon(char *s, int n) {\n    cur_n = n;\n\tmodmodint res = 0;\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (n % i == 0) {\n            if (mu[n / i] == 1) res += get_T(s, i);\n            else if (mu[n / i] == -1) res -= get_T(s, i);\n        }\n\treturn res.a;\n}\n\nchar t1[N], t2[N];\n\nbool cmp(char *s, char *t, int j) {\n    for (int i = 1; i <= j; ++i) if (s[i] != t[i]) return 1;\n    return 0;\n}\n\null count_prefixed_lyndon_words(char *s, int j, int n) {\n    ull res = (lyn(s, j) == j) ? 1 : 0;\n    for (int i = j + 1; i <= n; ++i) {\n        for (int k = 1; k <= j; ++k) t1[k] = t2[k] = s[k];\n        for (int k = j + 1; k <= i; ++k) t1[k] = 'a', t2[k] = 'z';\n        ull r1 = get_largest_lyndon(t1, i);\n        ull r2 = get_largest_lyndon(t2, i);\n        if (r1 && r2 && cmp(t1, t2, i) == 0) continue;\n        if (r1) r1 = rank_lyndon(t1, i);\n        if (r2) r2 = rank_lyndon(t2, i);\n        res += r2 - r1;\n    }\n    return res;\n}\n\null rank(char *s, int n, int m) {\n    ull res = 0;\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= i; ++j) t1[j] = s[j];\n        if (get_largest_lyndon(t1, i)) res += rank_lyndon(t1, i);\n    }\n    for (int i = n + 1; i <= m; ++i) {\n        for (int j = 1; j <= n; ++j) t1[j] = s[j];\n        for (int j = n + 1; j <= i; ++j) t1[j] = 'a';\n        if (get_largest_lyndon(t1, i)) res += rank_lyndon(t1, i);\n    }\n    return res;\n}\n\nint n, m;\null k;\nchar s[N];\n\nvoid inc() {\n    while (m && s[m] == 'z') --m;\n    if (!m) { puts(\"-1\"); exit(0); }\n    ++s[m];\n}\n\nsigned main() {\n\tget_mu(50);\n    for (cur_n = 1; cur_n <= 50; ++cur_n) {\n        pow26[cur_n][0] = 1;\n        for (int i = 1; i <= 50; ++i) pow26[cur_n][i] = pow26[cur_n][i - 1] * 26;\n    }\n    scanf(\"%d%llu%s\", &n, &k, s + 1);\n    ull kk = k;\n    m = strlen(s + 1);\n    ull pre = rank(s, m, n);\n    while (1) {\n        ull calc = count_prefixed_lyndon_words(s, m, n);\n        if (k > calc) {\n            k -= calc;\n            inc();\n        } else {\n            if (lyn(s, m) == m && !--k) {\n                for (int i = 1; i <= m; ++i) putchar(s[i]); putchar('\\n'); return 0;\n            }\n            s[++m] = 'a';\n        }\n    }\n\treturn 0;\n}\n\n```\n",
        "postTime": 1639199251,
        "uid": 302509,
        "name": "zghtyarecrenj",
        "ccfLevel": 7,
        "title": "P5420 \u9999\u5c71\u7684\u6811 \u9898\u89e3"
    },
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a\u5b57\u7b26\u4e32 $S$\uff0c\u6c42\u5b57\u5178\u5e8f\u5927\u4e8e\u7b49\u4e8e $S$ \uff0c\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $n$ \u7684 Lyndon \u4e32\u4e2d\u7b2c $k$ \u5c0f\u7684\u4e32\u3002\n\n$|S| \\le 50$, $|\\Sigma| = 26$, $k \\le 10^{15}$\u3002\n\n## \u9898\u89e3\n\n[\u5728\u6211\u7684 cnblogs \u67e5\u770b](https://www.cnblogs.com/RiverHamster/p/sol-lg5420.html)\n\n### \u8ba1\u6570 Lyndon \u4e32\n\n\u5b9a\u4e49\u4e00\u4e2a\u4e32 $s$ \u662f\u5faa\u73af\u4e32\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728 $t^n = s\\space (n > 1)$\u3002\n\n\u5982\u679c\u6ca1\u6709\u5b57\u5178\u5e8f\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u6ce8\u610f\u5230\u5982\u679c\u4e00\u4e2a\u4e32 $s$ \u4e0d\u662f\u5faa\u73af\u4e32\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e32\u7684\u6700\u5c0f\u8d77\u70b9\u662f\u552f\u4e00\u7684\u3002\n\n\u4e0d\u5b58\u5728\u975e\u5e73\u51e1\u6574\u5468\u671f\u7684\u4e32\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06 $f(n) = |\\Sigma|^n$ \u548c $\\mu$ \u505a Dirichlet \u5377\u79ef\u5f97\u5230\u3002\n\n### \u7528 Trie \u6811\u9650\u5236\u5b57\u5178\u5e8f\n\n\u5bf9\u4e8e\u5b57\u5178\u5e8f\u7684\u9650\u5236\uff0c\u8003\u8651\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u5728 Trie \u4e0a\u9012\u5f52\u89e3\u51b3\u95ee\u9898\uff08\u5b9e\u73b0\u65f6\u6ce8\u610f\u4e00\u4e2a\u975e\u53f6\u5b50\u7684 Lyndon \u4e32\u8282\u70b9\u5bf9\u7b54\u6848\u53ef\u4ee5\u4ea7\u751f\u8d21\u732e\uff09\n\n\u95ee\u9898\u8f6c\u5316\u6210\u6c42 Trie \u4e0a\u4e00\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5373\u4ee5\u67d0\u4e2a\u4e32\u4e3a\u524d\u7f00\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 $n$ \u7684 Lyndon \u4e32\u6570\u3002\n\n### \u8ba1\u6570\u4ee5 $p$ \u4e3a\u524d\u7f00\u7684 Lyndon \u4e32\u6570\n\n\u8bbe\u5f53\u524d\u8003\u8651\u7684\u524d\u7f00\u4e3a $p$\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u4e32 $s$\uff0c\u5176**\u6240\u6709\u5b50\u4e32** $s'$ \u6ee1\u8db3 $s' < p$ \u6216 $s'$ \u662f $p$ \u7684\u524d\u7f00\u3002\n\n\u8fd9\u4e2a\u9650\u5236\u53ef\u4ee5\u901a\u8fc7\u5bf9 $p$ \u9884\u5904\u7406 KMP \u81ea\u52a8\u673a\u5904\u7406\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u4e00\u6761\u51fa\u8fb9\uff08\u7684\u5b57\u7b26\uff09\u5c0f\u4e8e\u8fd9\u4e2a\u8282\u70b9\u7684\u53e6\u4e00\u6761\u4e0d\u6307\u5411\u6839\u8282\u70b9\u7684\u51fa\u8fb9\uff08\u5373\u53ef\u4ee5\u5339\u914d $s$\uff09\u7684\u5b57\u7b26\uff0c\u5219\u8fd9\u6761\u51fa\u8fb9\u9700\u8981\u5220\u9664\u3002\n\n**\u4ecd\u7136\u5047\u8bbe $\\boldsymbol{s}$ \u4e0d\u662f\u5faa\u73af\u4e32**\uff0c\u5219\u5c06 $s$ \u65e0\u9650\u91cd\u590d\u540e\uff0c\u9009\u62e9\u7684\u6700\u5c0f\u8d77\u59cb\u4f4d\u7f6e\u662f\u552f\u4e00\u7684\uff0c\u4e14\u662f\u6240\u6709 $p$ \u51fa\u73b0\u7684 **\u8d77\u59cb\u4f4d\u7f6e** \u4e2d\u7684\u4e00\u4e2a\u3002\n\n\u8bbe $F(L, node, cnt)$ \u8868\u793a\u957f\u5ea6\u4e3a $L$\uff0c\u5728 KMP \u81ea\u52a8\u673a\u4e0a\u5339\u914d\u7684\u8282\u70b9\u4e3a $node$\uff0c\u4e14\u5df2\u7ecf\u5339\u914d $s$ \u6b21\u6570 $cnt$\u3002\u90a3\u4e48\u4e00\u4e2a\u6b21\u6570 $cnt$ \u7684\u65b9\u6848\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a $1 / cnt$\u3002\u6700\u540e\u9700\u8981\u5728\u4e32\u5c3e\u52a0\u4e0a $s$ \uff08\u9664\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5916\uff09\u6765\u89e3\u51b3\u5339\u914d $p$ \u7684\u672b\u5c3e\u8d85\u8fc7 $s$ \u7684\u60c5\u5f62\u3002 \u8f6c\u79fb\u679a\u4e3e\u4e0b\u4e00\u4e2a\u5b57\u7b26\u5373\u53ef\u3002\n\n\u8003\u8651\u53bb\u9664\u5faa\u73af\u4e32\u7684\u65b9\u6848\u3002\u8bb0 $ans_i$ \u8868\u793a\u957f\u5ea6\u4e3a $i$\uff0c\u4e14\u65e0\u9650\u91cd\u590d\u540e\u4ee5 $p$ \u4e3a\u524d\u7f00\u7684\u4e32\u6570\u3002\u5bf9\u4e8e $i \\le |p|$\uff0c$ans_i = 1$ \u5f53\u4e14\u4ec5\u5f53 $i$ \u524d\u7f00\u662f Lyndon \u4e32\u4e14 $i$ \u4e3a $p$ \u7684\u5468\u671f\uff0c\u5426\u5219\u4e3a $0$\u3002\n\n\u5bf9\u4e8e $i > |p|$\uff0c\u53ef\u4ee5\u5148\u7528 DP \u6570\u7ec4\u7684\u503c\u6c42\u51fa\u4e0d\u8003\u8651\u5faa\u73af\u4e32\u7684\u7b54\u6848\u3002\u6ce8\u610f\u5230\u5bf9\u4e8e $t^c = s$\uff0c$t$ \u5bf9\u4e8e $ans_{|s|}$ \u7684\u8d21\u732e\u4e3a $1 / c$\uff08\u6ce8\u610f\u5230\u672c\u8d28\u76f8\u540c\u7684\u8d77\u70b9\u53ea\u88ab\u8ba1\u5165\u4e00\u6b21\u8d21\u732e\uff0c**\u4e14\u8fd9\u4e2a\u7cfb\u6570\u5bf9\u4e8e $\\boldsymbol{|t| \\le |p|}$ \u548c $\\boldsymbol{|t| > p}$ \u90fd\u6210\u7acb**\uff09\uff0c\u90a3\u4e48\u6309\u7167\u8fd9\u4e2a\u7cfb\u6570\u53bb\u9664\u5faa\u73af\u4e32\u8d21\u732e\u5373\u53ef\u3002\n\n---\n\n\u6ce8\u610f\u5230 KMP \u81ea\u52a8\u673a\u4e0a\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u8f6c\u79fb\u5230\u7684\u8282\u70b9\u53ea\u6709 $2$ \u79cd\uff0c\u90a3\u4e48\u53ef\u4ee5 $\\mathcal O(1)$ \u8f6c\u79fb\uff0cDP \u4e00\u6b21\u7684\u590d\u6742\u5ea6\u4e3a $\\mathcal O(|p|^3)$\uff0c\u5171\u8bbf\u95ee $\\mathcal O(n|\\Sigma|)$ \u4e2a Trie \u6811\u8282\u70b9\uff0c\u90a3\u4e48\u590d\u6742\u5ea6 $\\mathcal O(n^4 |\\Sigma|)$\u3002\n\n\u72b6\u6001\u5b58\u50a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 `long double`\uff0c$64$ bit \u6709\u6548\u7cbe\u5ea6\u53ef\u4ee5\u6ee1\u8db3 $10^{15}$ \u7684\u7cbe\u5ea6\u8981\u6c42\uff0c\u5b9e\u6d4b `double` \u4e5f\u53ef\u4ee5\u901a\u8fc7\u3002\n\n## \u5b9e\u73b0\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#include <numeric>\n#include <vector>\n#include <cassert>\n#include <cmath>\nusing namespace std;\n\n#define LOG(f...) fprintf(stderr, f)\n\nusing ll = long long;\n\ntemplate<class T> void read(T &x) {\n  char ch; x = 0;\n  int f = 1;\n  while (isspace(ch = getchar()));\n  if (ch == '-') ch = getchar(), f = -1;\n  do x = x * 10 + (ch - '0'); while(isdigit(ch = getchar()));\n  x *= f;\n}\ntemplate<class T, class ...A> void read(T &x, A&... args) { read(x); read(args...); }\n\nusing fp = long double;\n\nconst int N = 51;\n\nchar s[N], ans[N];\nint kmp[N][26], fa[N];\nint kmp_valued[N], kmp_c0[N];\nfp dp[N][N][N], res_len[N];\nint n;\nll k;\n\nbool is_lyndon(char *s, int len = -1) {\n  if (len == -1) len = strlen(s + 1);\n  for (int i = 2; i <= len; ++i) {\n    for (int j = 0; j <= len - i; ++j) {\n      if (s[i + j] < s[1 + j]) return false;\n      if (s[i + j] > s[1 + j]) goto correct;\n    }\n    return false;\n    correct:;\n  }\n  return true;\n}\n\nfp DP(char *s) {\n  memset(dp, 0, sizeof(dp));\n  memset(res_len, 0, sizeof(res_len));\n  int len = strlen(s + 1);\n  if (len == n)\n    return is_lyndon(s);\n  for (int i = 2; i <= len; ++i) {\n    for (int j = 0; j <= len - i; ++j)\n      if (s[i + j] > s[1 + j]) break;\n      else if (s[i + j] < s[1 + j]) return 0;\n  }\n  fa[1] = 0;\n  kmp[0][s[1] - 'a'] = 1;\n  for (int i = 0; i != s[1] - 'a'; ++i)\n    kmp[0][i] = -1;\n  for (int i = 1; i <= len; ++i) {\n    memcpy(kmp[i], kmp[fa[i]], sizeof(kmp[0]));\n    if (i != len) {\n      kmp[i][s[i + 1] - 'a'] = i + 1;\n      fa[i + 1] = kmp[fa[i]][s[i + 1] - 'a'];\n    }\n    for (int j = 25; j > 0; --j)\n      if (kmp[i][j]) {\n        for (int k = 0; k != j; ++k)\n          kmp[i][k] = -1;\n        break;\n      }\n  }\n  memset(kmp_valued, -1, sizeof(kmp_valued));\n  memset(kmp_c0, 0, sizeof(kmp_c0));\n  for (int i = 0; i <= n; ++i)\n    for (int j = 0; j < 26; ++j)\n      if (kmp[i][j] == 0) ++kmp_c0[i];\n      else if (kmp[i][j] > 0) kmp_valued[i] = kmp[i][j];\n\n  dp[0][len][0] = 1;\n  for (int i = 0; i < n - len; ++i) {\n    for (int j = 0; j <= len; ++j) {\n      for (int k = 0; k <= i; ++k) {\n        if (kmp_valued[j] != -1)\n          dp[i + 1][kmp_valued[j]][k + (kmp_valued[j] == len)] += dp[i][j][k];\n        dp[i + 1][0][k] += dp[i][j][k] * kmp_c0[j];\n      }\n    }\n  }\n  for (int j = 0; j <= len; ++j) {\n    int u = j;\n    bool flag = true;\n    int cnt = 0;\n    for (int i = 1; i <= len; ++i) {\n      if (kmp[u][s[i] - 'a'] == -1) { flag = false; break; }\n      u = kmp[u][s[i] - 'a'];\n      if (u == len) ++cnt;\n    }\n    if (!flag) continue;\n    for (int k = 0; k <= n - len; ++k) {\n      if (k + cnt == 0) continue;\n      fp val = fp(1) / (k + cnt);\n      for (int i = k; i <= n - len; ++i)\n        res_len[i + len] += val * dp[i][j][k];\n    }\n  }\n  for (int i = 1; i <= len; ++i) {\n    bool flag = true;\n    for (int j = i + 1; j <= len; ++j)\n      if (s[j] != s[j - i]) { flag = false; break; }\n    res_len[i] = flag && is_lyndon(s, i);\n  }\n  for (int i = len + 1; i <= n; ++i) {\n    for (int j = 1, li = i / 2; j <= li; ++j)\n      if (i % j == 0)\n        res_len[i] -= res_len[j] * (fp(j) / i);\n  }\n  return accumulate(res_len + len, res_len + n + 1, fp(0));\n}\n\nint len_s;\n\nll solve(int p, ll cnt, bool greater) {\n  ans[p] = 0;\n  ll orig_cnt = cnt;\n  if (!s[p] || greater) {\n    fp val = DP(ans);\n    if (val + 0.5 < cnt) return ll(val + 0.5);\n    if (fabsl(val - cnt) < 0.5 && p == n + 1)\n      puts(ans + 1), exit(0);\n  }\n  cnt -= (greater || p > len_s) && is_lyndon(ans);\n  if (!cnt) {\n    puts(ans + 1);\n    exit(0);\n  }\n  for (ans[p] = max('a', greater ? 'a' : s[p]); ans[p] <= 'z'; ++ans[p]) {\n    fp val = solve(p + 1, cnt, greater || (ans[p] > s[p]));\n    cnt -= ll(val + 0.5);\n  }\n  ans[p] = 0;\n  return orig_cnt - cnt;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n  freopen(\"input.txt\", \"r\", stdin);\n  freopen(\"output.txt\", \"w\", stdout);\n#endif\n  scanf(\"%d%lld\", &n, &k);\n  scanf(\"%s\", s + 1);\n  len_s = strlen(s + 1);\n  solve(1, k, false);\n  puts(\"-1\");\n  return 0;\n}\n```",
        "postTime": 1623249530,
        "uid": 31756,
        "name": "RiverHamster",
        "ccfLevel": 9,
        "title": "CTSC2016 \u9999\u5c71\u7684\u6811"
    }
]