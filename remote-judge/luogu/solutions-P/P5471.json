[
    {
        "content": "**\u770b\u5230\u5404\u8def\u5927\u4f6c\u53c8\u662f\u4f18\u5316\u5efa\u56fe\u6253\u6807\u8bb0\uff0c\u53c8\u662f\u4e00\u6b21\u677e\u5f1b\u4e00\u4e2a\u77e9\u5f62\uff0c\u53c8\u662f\u6811\u4e0a\u5220\u70b9\u4e4b\u7c7b\u7684\uff0c\u770b\u4e0d\u61c2\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u66f4\u52a0\u7b80\u5355\u7684\u601d\u8def**\n\n## \u57fa\u672c\u601d\u8def\n\nNOI\u540c\u6b65\u8d5b\u6211\u6253\u4e86\u4e2aKDTree\u4f18\u5316\u5efa\u56fe\uff0c\u5f53\u573aMLE\u7206\u70b8\uff0c40\u5206\u3002\u4f46\u662f\u901a\u8fc7\u6700\u57fa\u672c\u7684KDTree\u4f18\u5316\u5efa\u56fe\u601d\u8def\u53ef\u4ee5\u60f3\u51fa\u6b63\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u6982\u4e86\u89e3\u4e00\u4e0b\u3002\n\n- \u9996\u5148\uff0cKDTree\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u7740\u4e00\u4e2a\u5750\u6807\u548c\u4e00\u4e2a\u77e9\u5f62\u7684\u4fe1\u606f\u3002\u6240\u4ee5\u6211\u4eec\u628a\u539f\u56fe\u4e0a\u7684\u70b9\u5c31\u53eb\u505a\u5b9e\u70b9\uff0c\u7f16\u53f7\u8303\u56f4\u4e3a$[1, n]$\uff0cKDTree\u4e0a\u7684\u8282\u70b9\u53eb\u505a\u865a\u70b9\uff0c\u7f16\u53f7\u8303\u56f4\u4e3a$[n + 1, 2n]$\n\n- \u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b9e\u70b9\uff0c\u904d\u5386\u88c5\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6240\u6709\u5f39\u8df3\u673a\uff0c\u5047\u8bbe\u5f53\u524d\u5f39\u8df3\u673a\u7684\u65f6\u95f4\u4e3a$t$\uff0c\u8d77\u70b9\u4e3a$u$\uff0c\u6211\u4eec\u4e0a\u6811\u67e5\u8be2\u3002\n\n- \u5bf9\u4e8e\u5728\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9$x$\n\n  - \u5982\u679c$x$\u7ba1\u8f96\u7684\u77e9\u5f62\u5b8c\u5168\u5728\u5f39\u8df3\u673a\u7684\u76ee\u6807\u77e9\u5f62\u5916\uff0c`return`\n  \n  - \u5982\u679c$x$\u7ba1\u8f96\u7684\u77e9\u5f62\u5b8c\u5168\u5728\u5f39\u8df3\u673a\u7684\u76ee\u6807\u77e9\u5f62\u5185\uff0c\u4ece$u$\u5411$x$\u5efa\u8fb9\uff0c\u6743\u503c\u4e3a$t$\uff0c`return`\n  \n  - \u4e24\u533a\u95f4\u4ea4\u53c9\u60c5\u51b5\n  \n    - \u5982\u679c$x$\u4e0a\u7ef4\u62a4\u7684\u5750\u6807\u5728\u76ee\u6807\u77e9\u5f62\u5185\uff0c\u4ece$u$\u5411$x - n$\u5efa\u8fb9\uff0c\u6743\u503c\u4e3a$t$\n    \n    - \u9012\u5f52\u67e5\u8be2\u4e24\u4e2a\u513f\u5b50\n    \n- \u6700\u540e\u5bf9\u4e8e$\\forall x \\in [1, n]$\uff0c\u4ece$x + n$\u5411$x$\u5efa\u8fb9\u5373\u53ef\n    \n\u4ee5\u4e0a\u4e3aKDTree\u4f18\u5316\u5efa\u56fe\u7684\u57fa\u672c\u601d\u8def\u3002\u4ee3\u7801\u5982\u4e0b\uff08\u5982\u679c\u6709\u94c1\u61a8\u61a8\u628a\u8fd9\u4efd\u4ee3\u7801\u7c98\u4e0a\u53bb\u4ea4\u4e86\u6211\u4e5f\u62e6\u4e0d\u4f4f\n\n```cpp\n// luogu-judger-enable-o2\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <utility>\n#include <cstdio>\n#include <vector>\n#include <queue>\n\nusing namespace std;\n\nconst int MAXN = 7e4 + 5;\nconst int INF = 0x3f3f3f3f;\n\nint n, m, W, H;\n\nint ID(int x, int y) {\n    if (y == 0) return x;\n    else return x + n;\n}\n\nstruct Edge{\n    int to, val;\n    \n    Edge(int v, int w) {\n        to = v;\n        val = w;\n    }\n};\n\nvector<Edge> g[MAXN << 1];\nint vis[MAXN << 1], dis[MAXN << 1];\n\ntypedef vector<Edge> :: iterator ITE;\ntypedef pair<int, int> POI;\n\nvoid AddEdge(int u, int v, int w) {\n    g[u].push_back(Edge(v, w));\n}\n\nvoid Dijkstra(int s) {\n    priority_queue<POI> q;\n    memset(dis, INF, sizeof(dis));\n    dis[s] = 0; vis[s] = true; q.push(make_pair(dis[s], s));\n    while (!q.empty()) {\n        int u = q.top().second; q.pop(); vis[u] = false;\n        for (ITE it = g[u].begin(); it != g[u].end(); it++) {\n            int v = it->to;\n            if (dis[v] > dis[u] + it->val) {\n                dis[v] = dis[u] + it->val;\n                if (!vis[v]) {\n                    q.push(make_pair(dis[v], v));\n                    vis[v] = true;\n                }\n            }\n        }\n    }\n}\n\nstruct Data{\n    int pos[2];\n    int id;\n};\n\nint Cmp0(Data x, Data y) {\n    return x.pos[0] != y.pos[0] ? (x.pos[0] < y.pos[0]) : (x.pos[1] < y.pos[1]);\n}\n\nint Cmp1(Data x, Data y) {\n    return x.pos[1] != y.pos[1] ? (x.pos[1] < y.pos[1]) : (x.pos[0] < y.pos[0]);\n}\n\nData data[MAXN];\n\nstruct Node{\n    Data data;\n    int mn[2], mx[2], d;\n    Node *ch[2];\n    \n    Node() {}\n    \n    Node(Data data, int d) : data(data), d(d) {\n        ch[0] = NULL;\n        ch[1] = NULL;\n        for (int i = 0; i < 2; i++) {\n            mn[i] = data.pos[i];\n            mx[i] = data.pos[i];\n        }\n    }\n}pool[MAXN << 1];\n\nNode *NewNode(Data data, int d) {\n    static int p = 0;\n    pool[p] = Node(data, d);\n    return pool + p++;\n}\n\nNode *rt = NULL;\n\nvoid Update(Node *now) {\n    for (int i = 0; i < 2; i++) {\n        if (now->ch[i]) {\n            for (int j = 0; j < 2; j++) {\n                now->mn[j] = min(now->mn[j], now->ch[i]->mn[j]);\n                now->mx[j] = max(now->mx[j], now->ch[i]->mx[j]);\n            }\n        }\n    }\n}\n\nvoid Build(Node *&now, int l, int r, int d) {\n    if (l > r) return;\n    int mid = l + r >> 1;\n    if (d == 0) {\n        nth_element(data + l, data + mid, data + r + 1, Cmp0);\n        now = NewNode(data[mid], d);\n    } else {\n        nth_element(data + l, data + mid, data + r + 1, Cmp1);\n        now = NewNode(data[mid], d);\n    }\n    Build(now->ch[0], l, mid - 1, (d + 1) % 2);\n    Build(now->ch[1], mid + 1, r, (d + 1) % 2);\n    Update(now);\n    if (now->ch[0]) AddEdge(ID(now->data.id, 1), ID(now->ch[0]->data.id, 1), 0);\n    if (now->ch[1]) AddEdge(ID(now->data.id, 1), ID(now->ch[1]->data.id, 1), 0);\n}\n\nvoid Jump(Node *now, int u, int mn[], int mx[], int w) {\n    if (!now) return;\n    int allin = true, allout = false, insq = true;\n    for (int i = 0; i < 2; i++) {\n        if (now->mx[i] < mn[i] || now->mn[i] > mx[i]) allout = true;\n        if (now->mx[i] > mx[i] || now->mn[i] < mn[i]) allin = false;\n        if (now->data.pos[i] < mn[i] || now->data.pos[i] > mx[i]) insq = false;\n    }\n    if (allout) return;\n    if (allin) {\n        AddEdge(ID(u, 0), ID(now->data.id, 1), w);\n        //cerr << '#';\n        return;\n    }\n    if (insq) {\n        AddEdge(ID(u, 0), ID(now->data.id, 0), w);\n        //cerr << '$';\n    }\n    Jump(now->ch[0], u, mn, mx, w);\n    Jump(now->ch[1], u, mn, mx, w);\n}\n\nvoid Init() {\n    cin >> n >> m >> W >> H;\n    for (int i = 1; i <= n; i++) {\n        cin >> data[i].pos[0] >> data[i].pos[1];\n        data[i].id = i;\n    }\n    for (int i = 1; i <= n; i++) AddEdge(ID(i, 1), ID(i, 0), 0);\n    Build(rt, 1, n, 0);\n    //cerr << '*';\n    int mn[2], mx[2], x, y;\n    for (int i = 1; i <= m; i++) {\n        cin >> x >> y;\n        cin >> mn[0] >> mx[0];\n        cin >> mn[1] >> mx[1];\n        Jump(rt, x, mn, mx, y);\n        //cerr << '*';\n    }\n    //cerr << '*';\n}\n\nvoid Work() {\n    Dijkstra(1);\n    for (int i = 2; i <= n; i++) cout << dis[ID(i, 0)] << endl;\n}\n\nint main() {\n    ios :: sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n    //freopen(\"jump.in\", \"r\", stdin);\n    //freopen(\"jump.out\", \"w\", stdout);\n    Init();\n    Work();\n    return 0;\n}\n```\n\n## \u4f18\u5316\n\n\u8fd9\u91cc\u63d0\u4f9b\u53ef\u4ee5\u4f18\u5316\u7684\u4e24\u6761\u9526\u56ca\u5999\u8ba1\u3002\n\n1. **\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u88c5\u6211\u4eec\u628a\u56fe\u5efa\u4e86\u51fa\u6765\uff0c\u4e0d\u5efa\u8fb9**\n\n\u5047\u88c5\u628a\u56fe\u5efa\u51fa\u6765\uff1f\u4f60\u53ef\u80fd\u8981\u95ee\u4e86\uff0c\u6211\u4eec\u90fd\u6ca1\u6709\u5efa\u8fb9\uff0c\u600e\u4e48\u77e5\u9053\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\uff0c\u80fd\u5230\u8fbe\u54ea\u4e9b\u70b9\uff1f\n\n\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u77e5\u9053\uff01\u5c31\u50cf\u5728\u8d5b\u573a\u4e0a\u5207\u6389\u6b64\u9898\u7684\u67d0\u4f4d\u94f6\u724c\u5927\u4f6c @\u9f99\u4e4b\u543b\u2014\u6c34\u8d27 \u6240\u8bf4\uff1a\n\n> \u9996\u5148\u4f60\u6709\u4e00\u68f5\u6811\n\n> \u4f60\u8981\u628a\u8fd9\u68f5\u6811\u5b8c\u5168\u53d8\u6210\u4f60\u7684\u5de5\u5177\n\n> \u4f60\u5efa\u8fb9\u7684\u76ee\u7684\u662f\u8981\u77e5\u9053\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u80fd\u5230\u8fbe\u54ea\u4e9b\u70b9\n\n\u60f3\u901a\u4e86\u5c31OK\u4e86\uff0c\u6839\u636e\u521a\u624d\u5efa\u56fe\u7684\u601d\u8def\uff0c\u6211\u4eec\u5b8c\u5168\u77e5\u9053\u4ece\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\u80fd\u5230\u8fbe\u54ea\u4e9b\u8282\u70b9\u3002\n\n- \u5bf9\u4e8e\u4e00\u4e2a\u865a\u70b9$u$\uff0c\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u5982\u4e0b\n\n  - \u5b83\u7684\u4e24\u4e2a\u513f\u5b50\u5bf9\u5e94\u7684\u865a\u70b9\n  \n  - \u5b83\u6240\u5bf9\u5e94\u7684\u5b9e\u70b9\n  \n- \u5bf9\u4e8e\u4e00\u4e2a\u5b9e\u70b9$u$\n\n  - \u5728\u8dd1`SPFA`\u6700\u77ed\u8def\u65f6\uff0c\u5982\u679c\u4ece\u961f\u5217\u4e2d\u62ff\u51fa\u5b9e\u70b9\uff0c\u76f4\u63a5\u904d\u5386\u4ece$x$\u51fa\u53d1\u7684\u5f39\u8df3\u673a\uff0c\u4e0a\u6811\u67e5\u8be2\n  \n  - \u5bf9\u4e8e\u5728\u6811\u4e0a\u7684\u4e00\u4e2a\u865a\u70b9$x$\n  \n    - \u5982\u679c$x$\u7ba1\u8f96\u7684\u533a\u95f4\u5b8c\u5168\u5728\u76ee\u6807\u533a\u95f4\u5916\uff0c`return`\n    \n    - \u5982\u679c$x$\u7ba1\u8f96\u7684\u533a\u95f4\u5b8c\u5168\u5728\u76ee\u6807\u533a\u95f4\u5185\uff0c\u677e\u5f1b$x$\n    \n    - \u5bf9\u4e8e\u533a\u95f4\u4ea4\u53c9\u60c5\u51b5\n    \n      - \u5982\u679c$x$\u5bf9\u5e94\u7684\u5750\u6807\u5728\u76ee\u6807\u533a\u95f4\u5185\uff0c\u677e\u5f1b$x - n$\n      \n      - \u9012\u5f52\u67e5\u8be2\u4e24\u4e2a\u513f\u5b50\n      \n    - \u677e\u5f1b\u65f6\u52a0\u4e0a\u7684\u8ddd\u79bb\u4e3a\u5f39\u8df3\u673a\u7528\u65f6\n    \n\u4f60\u770b\u5b8c\u8fd9\u4e2a\u601d\u8def\uff0c\u611f\u89c9\u6709\u70b9\u773c\u719f\uff0c\u8fd4\u56de\u53bb\u770b\u4e86\u4e00\u773c40\u5206\u601d\u8def\n\n\u5b8c\u5168\u4e00\u6837\uff1f\u662f\u7684\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n// luogu-judger-enable-o2\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\nconst int MAXN = 7e4 + 5;\nconst int MAXM = 15e4 + 5;\nconst int INF = 0x3f3f3f3f;\n\nint n, m, W, H;\n\nstruct Edge{\n\tEdge *nxt;\n\tint val;\n\tint mn[2], mx[2];\n\t\n\tEdge() {}\n\t\n\tEdge(int val, int l[], int r[], Edge *nxt) : val(val), nxt(nxt) {\n\t\tmemcpy(mn, l, sizeof(mn));\n\t\tmemcpy(mx, r, sizeof(mx));\n\t}\n}epool[MAXM];\n\nEdge *NewEdge(int val, int l[], int r[], Edge *nxt) {\n\tstatic int ecnt = 0;\n\tepool[ecnt] = Edge(val, l, r, nxt);\n\treturn &epool[ecnt++];\n}\n\nEdge *head[MAXN];\n\nvoid AddEdge(int u, int w, int l[], int r[]) {\n\thead[u] = NewEdge(w, l, r, head[u]);\n}\n\nstruct Point{\n\tint id;\n\tint x[2];\n\t\n\tPoint() {}\n\t\n\tPoint(int id, int a, int b) : id(id) {\n\t\tx[0] = a;\n\t\tx[1] = b;\n\t}\n}data[MAXN];\n\nint Comp0(Point a, Point b) {\n\treturn (a.x[0] == b.x[0]) ? (a.x[1] < b.x[1]) : (a.x[0] < b.x[0]);\n}\n\nint Comp1(Point a, Point b) {\n\treturn (a.x[1] == b.x[1]) ? (a.x[0] < b.x[0]) : (a.x[1] < b.x[1]);\n}\n\nstruct Node{\n\tPoint pos;\n\tNode *ch[2];\n\tint mn[2], mx[2];\n\t\n\tNode() {}\n\t\n\tNode(Point pos) : pos(pos) {\n\t\tch[0] = ch[1] = NULL;\n\t\tfor (int i = 0; i < 2; i++) mn[i] = mx[i] = pos.x[i];\n\t}\n}npool[MAXN];\n\nvoid Update(Node *now) {\n\tfor (int i = 0; i < 2; i++) {\n\t\tif (now->ch[i]) {\n\t\t\tfor (int j = 0; j < 2; j++) {\n\t\t\t\tnow->mn[j] = min(now->mn[j], now->ch[i]->mn[j]);\n\t\t\t\tnow->mx[j] = max(now->mx[j], now->ch[i]->mx[j]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nNode *NewNode(Point pos) {\n\tstatic int ncnt = 0;\n\tnpool[ncnt] = Node(pos);\n\treturn &npool[ncnt++];\n}\n\nNode *rt = NULL;\nNode *ima[MAXN];\n\nvoid Build(Node *&now, int l, int r, int d) {\n\tif (l > r) return;\n\tint mid = l + r >> 1;\n\tif (d == 0) nth_element(data + l, data + mid, data + r + 1, Comp0);\n\telse nth_element(data + l, data + mid, data + r + 1, Comp1);\n\tnow = NewNode(data[mid]);\n\tima[now->pos.id] = now;\n\tBuild(now->ch[0], l, mid - 1, d ^ 1);\n\tBuild(now->ch[1], mid + 1, r, d ^ 1);\n\tUpdate(now);\n}\n\nint q[MAXN << 1], hd, tl, len;\nint dis[MAXN << 1];\nint vis[MAXN << 1];\n\nvoid Relax(int v, int w) {\n\tif (dis[v] > w) {\n\t\tdis[v] = w;\n\t\tif (!vis[v]) {\n\t\t\tq[++tl % len] = v;\n\t\t\tvis[v] = 1;\n\t\t}\n\t}\n}\n\nint AllIn(Node *now, int mn[], int mx[]) {\n\tfor (int i = 0; i < 2; i++) {\n\t\tif (now->mn[i] < mn[i] || now->mx[i] > mx[i]) return 0;\n\t}\n\treturn 1;\n}\n\nint AllOut(Node *now, int mn[], int mx[]) {\n\tfor (int i = 0; i < 2; i++) {\n\t\tif (now->mn[i] > mx[i] || now->mx[i] < mn[i]) return 1;\n\t}\n\treturn 0;\n}\n\nint Inside(Node *now, int mn[], int mx[]) {\n\tfor (int i = 0; i < 2; i++) {\n\t\tif (now->pos.x[i] < mn[i] || now->pos.x[i] > mx[i]) return 0;\n\t}\n\treturn 1;\n}\n\nvoid Jump(Node *now, int mn[], int mx[], int w) {\n\tif (!now) return;\n\tif (AllOut(now, mn, mx)) return;\n\tif (AllIn(now, mn, mx)) {\n\t\tRelax(now->pos.id + n, w);\n\t\treturn;\n\t}\n\tif (Inside(now, mn, mx)) Relax(now->pos.id, w);\n\tJump(now->ch[0], mn, mx, w);\n\tJump(now->ch[1], mn, mx, w);\n}\n\nvoid Spfa(int s) {\n\tmemset(dis, INF, sizeof(dis));\n\tdis[s] = 0;\n\thd = 1; tl = 0; q[++tl % len] = s; vis[s] = 1;\n\twhile (hd <= tl) {\n\t\tint u = q[hd++ % len]; vis[u] = 0;\n\t\tif (u > n) {\n\t\t\tRelax(u - n, dis[u]);\n\t\t\tif (ima[u - n]->ch[0]) Relax(ima[u - n]->ch[0]->pos.id + n, dis[u]);\n\t\t\tif (ima[u - n]->ch[1]) Relax(ima[u - n]->ch[1]->pos.id + n, dis[u]);\n\t\t} else {\n\t\t\tfor (Edge *e = head[u]; e; e = e->nxt) {\n\t\t\t\tJump(rt, e->mn, e->mx, dis[u] + e->val);\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid Init() {\n\tcin >> n >> m >> W >> H;\n\tlen = n * 2;\n\tfor (int i = 1; i <= n; i++) {\n\t\tdata[i].id = i;\n\t\tcin >> data[i].x[0] >> data[i].x[1];\n\t}\n\tBuild(rt, 1, n, 0);\n\tint l[2], r[2], u, t;\n\tfor (int i = 1; i <= m; i++) {\n\t\tcin >> u >> t >> l[0] >> r[0] >> l[1] >> r[1];\n\t\tAddEdge(u, t, l, r);\n\t}\n}\n\nvoid Work() {\n\tSpfa(1);\n//\tfor (int i = 1; i <= n * 2; i++) cerr << dis[i] << \" \";\n//\tcerr << \"\\n\";\n\tfor (int i = 2; i <= n; i++) cout << dis[i] << \"\\n\";\n}\n\nint main() {\n\tInit();\n\tWork();\n\treturn 0;\n}\n```\n\n88\u5206\u5230\u624b\uff0c\uff08\u5982\u679c\u6709\u94c1\u61a8\u61a8\u6284\u4e0a\u53bb\u6211\u4e5f\u6ca1\u5565\u8bf4\u7684\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e8c\u6761\u9526\u56ca\u5999\u8ba1\uff1a\n\n2. **\u5173\u4e8eSPFA\uff0c\u5b83\u6b7b\u4e86**\n\nvan\u2642van\u2642\u6ca1\u60f3\u5230\uff0cNOI2018\u5361\u4e86SPFA\uff0cNOI2019\u7adf\u7136\u8fd8\u8981\u5361\n\n\u884c\u4e86\u4e0d\u58a8\u8ff9\u4e86\uff0c\u76f4\u63a5\u6362Dijkstra\uff0c\u4ee5\u4e0b\u4e3aAC\u4ee3\u7801\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#include <utility>\n\nusing namespace std;\ntypedef pair<int, int> POI;\nconst int MAXN = 7e4 + 5;\nconst int MAXM = 15e4 + 5;\nconst int INF = 0x3f3f3f3f;\n\nint n, m, W, H;\n\nstruct Edge{\n    Edge *nxt;\n    int val;\n    int mn[2], mx[2];\n\t\n    Edge() {}\n\t\n    Edge(int val, int l[], int r[], Edge *nxt) : val(val), nxt(nxt) {\n        memcpy(mn, l, sizeof(mn));\n        memcpy(mx, r, sizeof(mx));\n    }\n}epool[MAXM];\n\nEdge *NewEdge(int val, int l[], int r[], Edge *nxt) {\n    static int ecnt = 0;\n    epool[ecnt] = Edge(val, l, r, nxt);\n    return &epool[ecnt++];\n}\n\nEdge *head[MAXN];\n\nvoid AddEdge(int u, int w, int l[], int r[]) {\n    head[u] = NewEdge(w, l, r, head[u]);\n}\n\nstruct Point{\n    int id;\n    int x[2];\n\t\n    Point() {}\n\t\n    Point(int id, int a, int b) : id(id) {\n        x[0] = a;\n        x[1] = b;\n    }\n}data[MAXN];\n\nint Comp0(Point a, Point b) {\n    return (a.x[0] == b.x[0]) ? (a.x[1] < b.x[1]) : (a.x[0] < b.x[0]);\n}\n\nint Comp1(Point a, Point b) {\n    return (a.x[1] == b.x[1]) ? (a.x[0] < b.x[0]) : (a.x[1] < b.x[1]);\n}\n\nstruct Node{\n    Point pos;\n    Node *ch[2];\n    int mn[2], mx[2];\n\t\n    Node() {}\n\t\n    Node(Point pos) : pos(pos) {\n        ch[0] = ch[1] = NULL;\n        for (int i = 0; i < 2; i++) mn[i] = mx[i] = pos.x[i];\n    }\n}npool[MAXN];\n\nvoid Update(Node *now) {\n    for (int i = 0; i < 2; i++) {\n        if (now->ch[i]) {\n            for (int j = 0; j < 2; j++) {\n                now->mn[j] = min(now->mn[j], now->ch[i]->mn[j]);\n                now->mx[j] = max(now->mx[j], now->ch[i]->mx[j]);\n            }\n        }\n    }\n}\n\nNode *NewNode(Point pos) {\n    static int ncnt = 0;\n    npool[ncnt] = Node(pos);\n    return &npool[ncnt++];\n}\n\nNode *rt = NULL;\nNode *ima[MAXN];\n\nvoid Build(Node *&now, int l, int r, int d) {\n    if (l > r) return;\n    int mid = l + r >> 1;\n    if (d == 0) nth_element(data + l, data + mid, data + r + 1, Comp0);\n    else nth_element(data + l, data + mid, data + r + 1, Comp1);\n    now = NewNode(data[mid]);\n    ima[now->pos.id] = now;\n    Build(now->ch[0], l, mid - 1, d ^ 1);\n    Build(now->ch[1], mid + 1, r, d ^ 1);\n    Update(now);\n}\n\n//int q[MAXN << 1], hd, tl, len;\npriority_queue<POI, vector<POI>, greater<POI> > q;\nint dis[MAXN << 1];\nint vis[MAXN << 1];\n\nvoid Relax(int v, int w) {\n    if (dis[v] > w) {\n        q.push(make_pair(dis[v] = w, v));\n    }\n}\n\nint AllIn(Node *now, int mn[], int mx[]) {\n    for (int i = 0; i < 2; i++) {\n        if (now->mn[i] < mn[i] || now->mx[i] > mx[i]) return 0;\n    }\n    return 1;\n}\n\nint AllOut(Node *now, int mn[], int mx[]) {\n    for (int i = 0; i < 2; i++) {\n        if (now->mn[i] > mx[i] || now->mx[i] < mn[i]) return 1;\n    }\n    return 0;\n}\n\nint Inside(Node *now, int mn[], int mx[]) {\n    for (int i = 0; i < 2; i++) {\n        if (now->pos.x[i] < mn[i] || now->pos.x[i] > mx[i]) return 0;\n    }\n    return 1;\n}\n\nvoid Jump(Node *now, int mn[], int mx[], int w) {\n    if (!now) return;\n    if (AllOut(now, mn, mx)) return;\n    if (AllIn(now, mn, mx)) {\n        Relax(now->pos.id + n, w);\n        return;\n    }\n    if (Inside(now, mn, mx)) Relax(now->pos.id, w);\n    Jump(now->ch[0], mn, mx, w);\n    Jump(now->ch[1], mn, mx, w);\n}\n\nvoid Dijkstra(int s) {\n    memset(dis, INF, sizeof(dis));\n    dis[s] = 0;\n    //\thd = 1; tl = 0; q[++tl % len] = s; vis[s] = 1;\n    q.push(make_pair(dis[s], s));\n    int cnt = 0;\n    while (!q.empty()) {\n        if (q.top().first != dis[q.top().second]) {\n            q.pop();\n            continue;\n        }\n        int u = q.top().second; q.pop();\n        if (u > n) {\n            Relax(u - n, dis[u]);\n            if (ima[u - n]->ch[0]) Relax(ima[u - n]->ch[0]->pos.id + n, dis[u]);\n            if (ima[u - n]->ch[1]) Relax(ima[u - n]->ch[1]->pos.id + n, dis[u]);\n        } else {\n            for (Edge *e = head[u]; e; e = e->nxt) {\n                Jump(rt, e->mn, e->mx, dis[u] + e->val);\n            }\n        }\n    }\n}\n\nvoid Init() {\n    ios :: sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n    cin >> n >> m >> W >> H;\n    //\tlen = n * 2;\n    for (int i = 1; i <= n; i++) {\n        data[i].id = i;\n        cin >> data[i].x[0] >> data[i].x[1];\n    }\n    Build(rt, 1, n, 0);\n    int l[2], r[2], u, t;\n    for (int i = 1; i <= m; i++) {\n        cin >> u >> t >> l[0] >> r[0] >> l[1] >> r[1];\n        AddEdge(u, t, l, r);\n    }\n}\n\nvoid Work() {\n    Dijkstra(1);\n    //\tfor (int i = 1; i <= n * 2; i++) cerr << dis[i] << \" \";\n    //\tcerr << \"\\n\";\n    for (int i = 2; i <= n; i++) cout << dis[i] << \"\\n\";\n}\n\nint main() {\n    Init();\n    Work();\n    return 0;\n}\n```",
        "postTime": 1568266005,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684 $n$ \u4e2a\u6574\u70b9 $(x_i,y_i)$ \uff0c\u6ee1\u8db3 $1\\le x_i\\le w,1\\le y_i\\le h$ \u3002\u6309\u7ed9\u51fa\u987a\u5e8f\u7f16\u53f7\u4e3a $1,2,...,n$ \u3002\u6709 $m$ \u6b21\u8fde\u8fb9\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7ed9\u5b9a $p,t,L,R,D,U$ \uff0c\u4ece\u7ed3\u70b9 $p$ \u5230\u6ee1\u8db3\u6761\u4ef6 $L\\le x_i\\le R,D\\le y_i\\le U$ \u7684\u6240\u6709\u8fd9\u6837\u7684\u7ed3\u70b9 $i$ \u8fde\u63a5\u4e00\u6761\u8fb9\u6743\u4e3a $t$ \u7684\u6709\u5411\u8fb9\u3002\u6c42\u5728\u6240\u6709\u8fde\u8fb9\u64cd\u4f5c\u7ed3\u675f\u540e\uff0c\u4ece\u7f16\u53f7\u4e3a $1$ \u7684\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n$1\\le w,h\\le n\\le 70000,1\\le m\\le 150000,1\\le t_i\\le 10000$\n\n### 32pts\n\n\u66b4\u529b\u8fde\u8fb9\uff0c\u8fb9\u6570\u6700\u591a\u4e3a $O(nm)$ \uff0c\u8dd1\u6700\u77ed\u8def\u3002\n\n~~\u66b4\u529b\u5206\u8fd8\u633a\u591a~~\n\n### $L_i=R_i,D_i=U_i$\n\n\u89c2\u5bdf\u5230\u6bcf\u6b21\u8fde\u8fb9\u64cd\u4f5c\u53ea\u4f1a\u8fde\u63a5\u4e24\u4e2a\u7ed3\u70b9\uff0c\u66b4\u529b\u8fde\u8fb9\uff0c\u8fb9\u6570\u4e3a $O(m)$ \uff0c\u8dd1\u6700\u77ed\u8def\u3002\n\n\u4ec0\u4e48\uff0c\u8fd8\u6709\u5176\u4ed6\u6700\u77ed\u8def\u7b97\u6cd5\uff1f\n\n### $h=1$\n\n\u5f00\u9898\u4e00\u770b\uff0c\u8fd9\u4e0d\u662f **\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe** \u7684\u9898\u5417\uff1f\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u662f\u56fe\u8bba\u95ee\u9898\u4e2d\u7684\u7ecf\u5178\u6280\u5de7\u3002\u5c06\u6240\u6709\u70b9\u6309\u7167 $x$ \u5750\u6807\u6392\u5e8f\uff0c\u89c2\u5bdf\u5230\u6bcf\u6b21\u8fde\u8fb9\u64cd\u4f5c\u8fde\u63a5\u5230\u7684\u70b9\u90fd\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53229.png)\n\n\uff08\u56fe\u7247\u6765\u6e90\uff1a NaCly_Fish \uff09\n\n\u6211\u4eec\u5bf9\u6392\u5e8f\u540e\u7684\u5e8f\u5217\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e2a\u7ed3\u70b9\u5411\u5176\u5de6\u53f3\u513f\u5b50\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5411\u5176\u5bf9\u5e94\u4f4d\u7f6e\u7684\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u3002\u5728\u8fdb\u884c\u8fde\u8fb9\u64cd\u4f5c\u65f6\uff0c\u7528\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u67e5\u8be2\u7684\u65b9\u5f0f\u5411\u6240\u6709\u5bf9\u5e94\u7684\u70b9\u8fde\u4e00\u6761\u8fb9\u3002\u6839\u636e\u7ebf\u6bb5\u6811\u7684\u7ecf\u5178\u7ed3\u8bba\uff0c\u8fd9\u6837\u6240\u8fde\u7684\u8fb9\u6570\u6700\u591a\u662f $O(\\log_2 n)$ \u7684\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53230.png)\n\n\u603b\u70b9\u6570\u4e3a $O(n)$ \uff0c\u603b\u8fb9\u6570\u4e3a $O(n+m\\log_2 n)$ \uff0c\u53ef\u4ee5\u5b58\u4e0b\u6240\u6709\u7684\u8fb9\uff0c\u8dd1\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u7684\u7ecf\u5178\u9898\u76ee\uff1a\n\n[CF786B Legacy](https://codeforces.com/problemset/problem/786/B)\n\n[P5025 \\[SNOI2017\\]\u70b8\u5f39](https://www.luogu.org/problemnew/show/P5025)\n\n### 100pts\n\n\u73b0\u5728\u8fde\u8fb9\u4ece\u539f\u6765\u7684\u4e00\u7ef4\u53d8\u6210\u4e8c\u7ef4\u7684\u4e86\u3002\n\n\u5728\u505a\u8fd9\u9898\u65f6\uff0c\u6211\u8003\u8651\u4e86\u5206\u5757\u5957\u5206\u5757\uff0c\u5206\u5757\u5957\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u5957\u7ebf\u6bb5\u6811\u7b49\u591a\u79cd\u65b9\u6cd5\uff0c\u6700\u540e\u53d1\u73b0\u7ebf\u6bb5\u6811\u5957\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6bd4\u8f83\u4f18\u79c0\u3002\n\n\u5916\u5c42 $x$ \u5750\u6807\u7528\u666e\u901a\u7ebf\u6bb5\u6811\uff0c\u8fd9\u68f5\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5173\u4e8e $y$ \u5750\u6807\u7684\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u4e0a\u5b58\u50a8\u7684\u662f\u6240\u6709 $x$ \u5750\u6807\u5728\u8303\u56f4\u5185\u7684\u70b9\u3002\u7531\u4e8e\u5185\u5c42\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u63d2\u5165\u4e00\u4e2a\u503c\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log_2 n)$ \uff0c\u5916\u5c42\u7ebf\u6bb5\u6811\u6709 $O(\\log_2 n)$ \u5c42\uff0c\u6240\u4ee5\u603b\u7684\u70b9\u6570\u4e3a $O(n\\log_2^2 n)$ \u3002\n\n\u8fde\u8fb9\u65f6\uff0c\u5148\u627e\u5230 $O(\\log_2 n)$ \u4e2a\u5173\u4e8e $x$ \u5750\u6807\u7684\u533a\u95f4\u5bf9\u5e94\u7684\u70b9\uff0c\u7136\u540e\u5bf9\u8fd9 $O(\\log_2 n)$ \u68f5\u7ebf\u6bb5\u6811\u67e5\u8be2\u4e0b\u6807\u8303\u56f4\u5728 $y$ \u5750\u6807\u8303\u56f4\u5185\u7684\u503c\u3002\u5355\u6b21\u8fde\u63a5\u7684\u8fb9\u6570\u4e3a $O(\\log_2^2 n)$ \uff0c\u603b\u7684\u8fb9\u6570\u4e3a $O(m\\log_2^2 n)$ \u3002\n\n\u7136\u800c\uff0c\u8fd9\u79cd\u5199\u6cd5\u7684\u5185\u5b58\u4f7f\u7528\u8d85\u8fc7\u4e86\u9650\u5236\u3002\u4e00\u822c\u7684\u5b9e\u73b0\u53ef\u4ee5\u5f97\u5230 $64$ \u5230 $72$ \u5206\u3002\u6709\u4ee5\u4e0b\u4e24\u4e2a\u4f18\u5316\u65b9\u6cd5\uff1a\n\n1. \u6811\u5957\u6811\u5185\u5c42\u4f7f\u7528 $n$ \u4e2a\u7ed3\u70b9\u65f6\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u7684 `set` \u5bb9\u5668\uff1b\n\n2. **\u4e0d\u76f4\u63a5\u8fde\u8fb9** \u3002\u56de\u987e Dij \u7684\u7b97\u6cd5\u6d41\u7a0b\uff0c\u6709\u5982\u4e0b\u5199\u6cd5\uff1a\u7528\u7ebf\u6bb5\u6811\u5957 `set` \u7ef4\u62a4\u4e00\u4e2a\u77e9\u9635\u4e2d\u5b58\u5728\u7684\u6574\u70b9\uff0c\u5f00\u59cb\u65f6\u6269\u5c55 $1$ \u53f7\u7ed3\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff08\u76f4\u63a5\u8fde\u63a5\u5230\u4e00\u4e2a\u77e9\u9635\uff09\uff0c\u6bcf\u6b21\u53d6\u51fa\u4f18\u5148\u961f\u5217\u4e2d\u65f6\u95f4\u6700\u5c0f\u7684\u4e00\u4e2a\u77e9\u9635\uff0c\u904d\u5386\u77e9\u9635\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b58\u5728\u7684\u6574\u70b9\uff0c\u8bb0\u5f55\u5230\u8fd9\u4e9b\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6269\u5c55\u8fd9\u4e9b\u7ed3\u70b9\uff0c\u7136\u540e\u5728\u7ebf\u6bb5\u6811\u5957 `set` \u4e0a\u5220\u9664\u8fd9\u4e9b\u7ed3\u70b9\u3002\u7531\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u53ea\u4f1a\u88ab\u5220\u9664\u548c\u6269\u5c55\u4e00\u6b21\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log_2^2 n)$ \u7684\u3002\n\n\u540c\u65f6\u4f7f\u7528\u4e24\u79cd\u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log_2^2 n)$ \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log_2 n+m)$ \u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n## \u4ee3\u7801\u5c55\u793a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<set>\n#include<vector>\n#include<queue>\nusing namespace std;\nconst int maxn=150010;\nint n,m,W,H;\nstruct city{int id,x,y;bool operator<(city a)const{return y==a.y?id<a.id:y<a.y;};}s[maxn];\nset<city>st[maxn*2];\n#define lc (o<<1)\n#define rc (o<<1|1)\nvoid update(int o,int l,int r,int v)\n{\n\tst[o].insert(s[v]);\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(s[v].x<=mid)update(lc,l,mid,v);\n\telse update(rc,mid+1,r,v);\n}\nvoid deleet(int o,int l,int r,int v)\n{\n\tst[o].erase(s[v]);\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(s[v].x<=mid)deleet(lc,l,mid,v);\n\telse deleet(rc,mid+1,r,v);\n}\nstruct jumpy{int p,t,l,r,d,u;}e[maxn];\nvector<int>g[maxn];\nstruct node{int x,v;bool operator<(node a)const{return v>a.v;};}x;\npriority_queue<node>q;\nqueue<int>tag;\nint dist[maxn];\nbool tf[maxn];\nvoid erasse(int o,int l,int r,int id,int v)\n{\n\tint ql=e[id].l,qr=e[id].r;\n\tif(r<ql||l>qr)return;\n\tif(ql<=l&&r<=qr)\n\t{\n\t\tset<city>::iterator lb=lower_bound(st[o].begin(),st[o].end(),(city){0,n+1,e[id].d});\n\t\tfor(;lb!=st[o].end()&&(lb->y)<=e[id].u;lb++)\n\t\t{\n\t\t\tdist[lb->id]=v;tag.push(lb->id);\n\t\t\tfor(vector<int>::iterator it=g[lb->id].begin();it!=g[lb->id].end();it++)q.push({*it,v+e[*it].t});\n\t\t}\n\t\twhile(!tag.empty())deleet(1,1,n,tag.front()),tag.pop();\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\terasse(lc,l,mid,id,v);erasse(rc,mid+1,r,id,v);\n}\nint main()\n{\n\tscanf(\"%d%d%d%d\",&n,&m,&W,&H);\n\tfor(int i=1;i<=n;i++)scanf(\"%d%d\",&s[i].x,&s[i].y),s[i].id=i,update(1,1,n,i);\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d%d%d%d%d\",&e[i].p,&e[i].t,&e[i].l,&e[i].r,&e[i].d,&e[i].u),g[e[i].p].push_back(i);\n\te[0].l=e[0].r=s[1].x;e[0].d=e[0].u=s[1].y;\n\tq.push({0,0});\n\twhile(!q.empty())\n\t{\n\t\tx=q.top();q.pop();\n\t\tif(tf[x.x])continue;\n\t\ttf[x.x]=true; \n\t\terasse(1,1,n,x.x,x.v);\n\t\t//for(vector<int>::iterator it=g[x.x].begin();it!=g[x.x].end();it++)q.push({e[*it].p,x.v+e[*it].t});\n\t}\n\tfor(int i=2;i<=n;i++)printf(\"%d\\n\",dist[i]);\n\treturn 0;\n}\n```",
        "postTime": 1563451075,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "\u5361\u7a7a\u95f4\u8fd8\u884c\u3002\n\n\u90a3\u6211\u628a\u81ea\u5df1\u7684\u601d\u8def\u8bb2\u8bb2\u5427\u3002\n\n### \u7b97\u6cd5 $1$\uff1a\u66b4\u529b\n\n\u76f4\u63a5\u66b4\u529b\uff0c\u65f6\u95f4 $O(nm)$\uff0c\u671f\u671b\u5f97\u5206 $32pts$\n\n### \u7b97\u6cd5 $2$\uff1a\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7684\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\n\n\u6211\u6bd4\u8f83\u5783\u573e\uff0c\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u5957 $Treap$\uff0c\u6211\u8bb2\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u3002\n\n\u5148\u5bf9\u4e8e\u6bcf\u4e2a $x$ \u5750\u6807\u76f8\u540c\u7684\u6570\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u50cf\u666e\u901a\u7ebf\u6bb5\u6811 $id_{lson}=id_{x}\\times 2,id_{rson}=id_{x}\\times 2+1$ \u7684\u65b9\u5f0f\u628a\u8fd9\u4e9b\u70b9\u627e\u51fa\u6765\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u70b9\u518d\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u8be2\u95ee\u65f6\u5de6\u53f3\u7aef\u70b9\u8981\u5728 $vector$ \u4e0a\u4e8c\u5206\u4e00\u4e0b\u3002\uff08\u53ef\u80fd\u6bd4\u8f83\u62bd\u8c61\uff0c\u6700\u597d\u81ea\u5df1\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\uff09\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9\u6837\u65f6\u95f4 $O(n\\log^2 n)$\uff0c\u7a7a\u95f4 $O(n\\log^2 n)$\uff0c\u5b8c\u7f8e\u88ab\u5361\uff0c\u671f\u671b\u5f97\u5206 $88pts$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define pii pair<int,int>\n#define mp make_pair\n#define pb push_back\nusing namespace std;\nconst int maxn=70000+10;\nconst int inf=0x3f3f3f3f;\nint n,m,w,h,x[maxn],y[maxn],rt[maxn],ls[maxn*20],rs[maxn*20],sz,cnt;\nint dis[maxn*40];bool vis[maxn*40];vector<pii> G[maxn*40];\nvector<pii> P[maxn],p[maxn<<2];\n\ninline int read()\n{\n    register int x=0,f=1;char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-1;\n    for(;isdigit(ch);ch=getchar()) x=(x<<3)+(x<<1)+ch-'0';\n    return (f==1)?x:-x;\n}\n\ninline void addedge(int x,int y,int w)\n{\n   G[x].pb(mp(y,w));\n}\n\nvoid update(int &x,int l,int r,int pos,int city)\n{\n    if(!x) x=++sz;\n    if(l == r) {addedge(x,city,0);return;}\n    int mid=(l+r)>>1;\n    if(pos <= mid) update(ls[x],l,mid,pos,city);\n    else update(rs[x],mid+1,r,pos,city);\n}\nvoid dfs(int x,int rt,int line)\n{\n    p[rt].pb(mp(line,x));\n    if(ls[x]) addedge(x,ls[x],0),dfs(ls[x],rt<<1,line);\n    if(rs[x]) addedge(x,rs[x],0),dfs(rs[x],rt<<1|1,line);\n}\nint T[maxn<<2],lc[maxn*60],rc[maxn*60],L,R,D,U,Pos,Time;\nvoid buildtree(int x,int rt,int l,int r)\n{\n    if(l == r) {addedge(x,p[rt][l].second,0);return;}\n    lc[x-cnt]=++sz,rc[x-cnt]=++sz;\n    addedge(x,lc[x-cnt],0),addedge(x,rc[x-cnt],0);\n    int mid=(l+r)>>1;\n    buildtree(lc[x-cnt],rt,l,mid);\n    buildtree(rc[x-cnt],rt,mid+1,r);\n}\nvoid build(int l,int r,int rt)\n{\n    if(!p[rt].empty())\n    {\n        T[rt]=++sz;\n        buildtree(T[rt],rt,0,(int)p[rt].size()-1);\n    }\n    if(l == r) return ;\n    int mid=(l+r)>>1;\n    build(l,mid,rt<<1);\n    build(mid+1,r,rt<<1|1);\n}\nvoid getrow(int x,int L,int R,int l,int r)\n{\n    if(L <= l && r <= R) {addedge(Pos,x,Time);return;}\n    int mid=(l+r)>>1;\n    if(L <= mid) getrow(lc[x-cnt],L,R,l,mid);\n    if(R > mid) getrow(rc[x-cnt],L,R,mid+1,r);\n}\nvoid getline(int l,int r,int rt)\n{\n    if(D <= l && r <= U)\n    {\n        if(!p[rt].empty())\n        {\n            int left=lower_bound(p[rt].begin(),p[rt].end(),mp(L,0))-p[rt].begin();\n            int right=lower_bound(p[rt].begin(),p[rt].end(),mp(R+1,0))-p[rt].begin()-1;\n            if(left<=right) getrow(T[rt],left,right,0,(int)p[rt].size()-1);\n        }\n        return ;\n    }\n    int mid=(l+r)>>1;\n    if(D <= mid) getline(l,mid,rt<<1);\n    if(U > mid) getline(mid+1,r,rt<<1|1);\n}\ninline void spfa()\n{\n    memset(dis,inf,sizeof(dis));\n    queue<int> q;\n    dis[1]=0;vis[1]=1;q.push(1);\n    int u,v;\n    vector<pii>::iterator it;\n    while(!q.empty())\n    {\n        u=q.front(),q.pop();vis[u]=0;\n        for(it=G[u].begin();it!=G[u].end();it++)\n        {\n            v=it->first;\n            if(dis[v]>dis[u]+it->second)\n            {\n                dis[v]=dis[u]+it->second;\n                if(!vis[v]) vis[v]=1,q.push(v);\n            }\n        }\n    }\n}\n\nint main()\n{\n    freopen(\"jump.in\",\"r\",stdin);\n    freopen(\"jump.out\",\"w\",stdout);\n    n=read(),m=read(),w=read(),h=read();\n    for(int i=1;i<=n;i++) x[i]=read(),y[i]=read(),P[x[i]].pb(mp(y[i],i));\n    sz=n;\n    vector<pii>::iterator it;\n    for(int i=1;i<=w;i++)\n    {\n        for(it=P[i].begin();it!=P[i].end();it++)\n            update(rt[i],1,h,it->first,it->second);\n        if(rt[i]) dfs(rt[i],1,i);\n    }\n    cnt=sz;\n    build(1,h,1);\n    for(int i=1;i<=m;i++)\n    {\n        Pos=read(),Time=read(),L=read(),R=read(),D=read(),U=read();\n        getline(1,h,1);\n    }\n    spfa();\n    for(int i=2;i<=n;i++) printf(\"%d\\n\",dis[i]);\n    return 0;\n}\n```\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6211\u5199\u4e86 $spfa$\u3002\u3002\u3002\u4e3b\u8981\u662f\u56fe\u662f\u4f60\u81ea\u5df1\u5efa\u7684\uff0c\u4e0d\u662f\u51fa\u9898\u4eba\u7ed9\u7684\uff0c\u4e00\u822c\u4e0d\u4f1a\u5361\uff0c\u76f4\u63a5\u5934\u94c1\u51c6\u6ca1\u9519\u3002\n\n### \u7b97\u6cd5 $3$\uff1a$KD$ \u6811\u4f18\u5316\u5efa\u56fe\n\n\u5982\u679c\u7528 $KD$ \u6811\u4f18\u5316\u5efa\u56fe\uff0c\u70b9\u6570 $O(n)$ \uff0c\u8fb9\u6570 $O(m\\sqrt n)$\uff0c\u76f4\u63a5\u7206\u70b8\uff0c\u671f\u671b\u5f97\u5206 $88pts$\n\n~~\u867d\u7136\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u76f4\u63a5\u66b4\u529b KD \u6811 WA \u4e86 3 \u4e2a\u70b9~~\n\n### \u7b97\u6cd5 $4$\uff1a\u4f18\u5316\u7b97\u6cd5 $3$\n\n\u5176\u5b9e\u5c31\u662f\u628a\u7a7a\u95f4\u964d\u4e0b\u6765\u3002\n\n\u6211\u4eec\u8003\u8651\u7528 $dijkstra$\u3002\u4e00\u4e2a\u70b9\u53ea\u4f1a\u88ab\u66f4\u65b0\u4e00\u6b21\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u597d\u505a\u4e86\u3002\n\n\u6211\u4eec\u5728 $KD$ \u6811\u4e0a\u7ef4\u62a4\u4e24\u4e2a\u6807\u8bb0 $tag,val$\uff0c\u5206\u522b\u8868\u793a\u5168\u5c40\u66f4\u65b0\u7684\u6700\u5c0f\u503c\u548c\u5f53\u524d\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u4e24\u4e2a\u6807\u8bb0\u53d6\u4e2a $min$ \u5c31\u662f\u5f53\u524d\u70b9\u7684\u7b54\u6848\u3002\n\n\u7136\u540e\u6211\u4eec\u5728\u6bcf\u4e2a\u70b9\u518d\u7ef4\u62a4\u4e00\u4e2a $mn,id$\uff0c\u8868\u793a\u5b50\u6811\u5185\u7684\u6700\u5c0f\u7b54\u6848\u548c\u6700\u5c0f\u7b54\u6848\u6240\u5728\u7684\u7f16\u53f7\u3002\n\n\u96be\u9053\u6211\u4eec\u7528 $KD$ \u6811\u6253\u4e00\u4e0b\u6807\u8bb0\u5c31\u505a\u5b8c\u4e86\uff1f\n\n\u90a3\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u8282/\u526a\u679d\u7684\u3002\n\n- \u82e5\u5f53\u524d\u70b9\u5df2\u88ab\u6e05\u7a7a\uff0c\u5b50\u6811\u5185\u8fd8\u6709\u5176\u4ed6\u503c\uff0c\u90a3\u4e48\u4e0a\u4f20\u6807\u8bb0\u7684\u65f6\u5019\u6700\u5c0f\u7b54\u6848\u8981\u5bf9\u5f53\u524d\u70b9\u7684 $tag$ \u53d6 $min$\n\n- \u5728\u5bf9\u4e00\u4e2a\u5b50\u6811\u53d6 $min$ \u7684\u65f6\u5019\uff0c\u8981\u91cd\u65b0\u4e0a\u4f20\u4e00\u6b21\u3002\n\n- \u82e5\u5f53\u524d\u70b9\u7684 $tag$ \u5c0f\u4e8e\u8981\u66f4\u65b0\u7684\u503c\uff0c\u76f4\u63a5\u8fd4\u56de\n\n\u65f6\u95f4 $O(m\\sqrt n)$\uff0c\u7a7a\u95f4 $O(n)$\uff0c\u671f\u671b\u5f97\u5206 $100pts$\n\n$Code\\ Below:$\n\n```cpp\n#include <bits/stdc++.h>\n#define pii pair<int,int>\n#define mp make_pair\nusing namespace std;\nconst int maxn=70000+10;\nconst int inf=0x3f3f3f3f;\nint n,m,w,h,rt,D,L,R,X,Y,Pos,Time,ans[maxn],sta[maxn],top;\n\nstruct Edge\n{\n\tint t,l,r,x,y;\n};\nvector<Edge> G[maxn];\n\ninline int read()\n{\n\tregister int x=0,f=1;char ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-1;\n\tfor(;isdigit(ch);ch=getchar()) x=(x<<3)+(x<<1)+ch-'0';\n\treturn (f==1)?x:-x;\n}\n\nstruct node\n{\n    int d[2],id;\n}a[maxn];\ninline bool operator < (const node &a,const node &b) {return a.d[D]<b.d[D];}\n\nstruct KD_Tree\n{\n    int Max[2],Min[2],d[2],ch[2],fa,id,w,tag,val;pii mn;\n    inline void get(const node &a)\n\t{\n    \tMax[0]=Min[0]=d[0]=a.d[0];\n    \tMax[1]=Min[1]=d[1]=a.d[1];\n    \tfa=0;id=a.id;w=1;tag=val=inf;mn=mp(inf,inf);\n    }\n}t[maxn];\n\ntemplate <class T> inline void chkmax(T &x,T y) {x=(x>y)?x:y;}\ntemplate <class T> inline void chkmin(T &x,T y) {x=(x<y)?x:y;}\ninline void update(int x,int y)\n{\n    chkmax(t[x].Max[0],t[y].Max[0]);\n    chkmax(t[x].Max[1],t[y].Max[1]);\n    chkmin(t[x].Min[0],t[y].Min[0]);\n    chkmin(t[x].Min[1],t[y].Min[1]);\n}\ninline void pushup(int x)\n{\n\tt[x].mn=mp(t[x].w?min(t[x].tag,t[x].val):inf,t[x].w?x:inf);\n\tif(t[x].ch[0]) chkmin(t[x].mn,t[t[x].ch[0]].mn);\n\tif(t[x].ch[1]) chkmin(t[x].mn,t[t[x].ch[1]].mn);\n\tif(t[x].mn.second!=inf) chkmin(t[x].mn.first,t[x].tag);\n}\ninline void pushdown(int x)\n{\n\tif(t[x].ch[0]) chkmin(t[t[x].ch[0]].tag,t[x].tag);\n\tif(t[x].ch[1]) chkmin(t[t[x].ch[1]].tag,t[x].tag);\n}\nint build(int l,int r,int now)\n{\n    int mid=(l+r)>>1,x=mid;D=now;\n    nth_element(a+l,a+mid,a+r+1);t[x].get(a[mid]);\n    if(l<mid) t[x].ch[0]=build(l,mid-1,now^1),t[t[x].ch[0]].fa=x;\n    if(mid<r) t[x].ch[1]=build(mid+1,r,now^1),t[t[x].ch[1]].fa=x;\n    if(t[x].ch[0]) update(x,t[x].ch[0]);\n    if(t[x].ch[1]) update(x,t[x].ch[1]);\n\tpushup(x);return x;\n}\nvoid query(int x)\n{\n\tif(!x || t[x].tag < Time) return ;\n\tif(t[x].Max[0] < L || t[x].Min[0] > R\n\t|| t[x].Max[1] < X || t[x].Min[1] > Y) return ;\n\tif(L <= t[x].Min[0] && t[x].Max[0] <= R\n\t&& X <= t[x].Min[1] && t[x].Max[1] <= Y)\n\t{\n\t\tchkmin(t[x].tag,Time);\n\t\tpushup(x);\n\t\treturn ;\n\t}\n\tpushdown(x);\n\tif(L <= t[x].d[0] && t[x].d[0] <= R\n\t&& X <= t[x].d[1] && t[x].d[1] <= Y) chkmin(t[x].val,Time);\n    query(t[x].ch[0]);query(t[x].ch[1]);pushup(x);\n}\n\nint main()\n{\n\tfreopen(\"jump.in\",\"r\",stdin);\n\tfreopen(\"jump.out\",\"w\",stdout);\n    n=read(),m=read(),w=read(),h=read();\n    for(int i=1;i<=n;i++) a[i].d[0]=read(),a[i].d[1]=read(),a[i].id=i;\n    rt=build(2,n,0);\n    for(int i=1;i<=m;i++)\n    {\n    \tPos=read(),Time=read(),L=read(),R=read(),X=read(),Y=read();\n    \tG[Pos].push_back((Edge){Time,L,R,X,Y});\n\t}\n\tint x,y;\n\tvector<Edge>::iterator it;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(i==1) x=1,y=0;\n\t\telse\n\t\t{\n\t\t\ty=t[rt].mn.second;t[y].w=0;\n\t\t\tx=t[y].id;ans[x]=t[rt].mn.first;top=0;\n\t\t\tfor(;y;y=t[y].fa) sta[++top]=y;\n\t\t\tfor(int j=top;j;j--) pushdown(sta[j]);\n\t\t\tfor(int j=1;j<=top;j++) pushup(sta[j]);\n\t\t}\n\t\tfor(it=G[x].begin();it!=G[x].end();it++)\n\t\t{\n\t\t\tTime=ans[x]+it->t,L=it->l,R=it->r,X=it->x,Y=it->y;\n\t\t\tquery(rt);\n\t\t}\n\t}\n\tfor(int i=2;i<=n;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\n\u603b\u7ed3\uff1a\u5982\u679c\u7a7a\u95f4\u6bd4\u8f83\u677e\u7684\u8bdd\uff0c\u8fd9\u9898\u7b97\u662f\u4e00\u9053\u88f8\u9898\u3002\u4e0d\u8fc7\u8fd9\u9898\u7ebf\u6027\u7a7a\u95f4\u7684\u505a\u6cd5\u8fd8\u662f\u503c\u5f97\u601d\u8003\u7684\u3002",
        "postTime": 1563456104,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "[\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5471)\n\n[\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/11211581.html)\n\n\u5148\u8003\u8651\u90e8\u5206\u5206\u505a\u6cd5\uff1a\n\n### subtask1\uff1a\n\n\u66b4\u529b$O(nm)$\u679a\u4e3e\uff0c\u8dd1\u6700\u77ed\u8def\n\n### subtask2:\n\n\u5427\u4e00\u884c\u7684\u70b9\u538b\u5230vector\u4e2d\u5e76\u6392\u5e8f\uff0c\u4e8c\u5206\u67e5\u627e\u6bcf\u4e00\u4e2a\u5f39\u8df3\u88c5\u7f6e\u73c2\u4ee5\u5230\u8fbe\u7684\u57ce\u5e02\uff0c\u8dd1\u6700\u77ed\u8def\n\n### subtask3\uff1a\n\n\u770b\u89c1\u662f\u4e00\u4e2a\u94fe\uff0c\u81ea\u7136\u800c\u7136\u7684\u53ef\u4ee5\u60f3\u5230\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u8dd1\u6700\u77ed\u8def\n\n### 100pts\n\n\u4e0a\u9762\u662f72pts\u7684\u66b4\u529b\u505a\u6cd5\uff0c\u5176\u4e2dsubtask3\u7684\u505a\u6cd5\u7ed9\u4e86\u6211\u4eec\u4e86\u4e00\u4e9b\u63d0\u793a\uff0c\u8fd9\u9898\u8981\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\u5efa\u56fe\uff1a\n\n\u5728\u6a2a\u8f74\u4e0a\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u4e0a\u662f\u4e00\u4e2a\u5b58pair\u7684set\uff0c\u5b58\u7684\u662f$[l,r]$\u533a\u95f4\u5185\u6709\u7b2c$id$\u4e2a\u70b9($px[id] \\in [l,r]$)\uff0c\u8fd9\u4e2a\u70b9\u7684\u7eb5\u5750\u6807\u662f$py[id]$\uff08pair\u8981\u628a\u7eb5\u5750\u6807\u653e\u524d\u9762\uff09\n\n\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e9b\u865a\u62df\u8282\u70b9\uff1a\u5bf9\u4e8e\u7b2c$i$\u4e2a\u5f39\u8df3\u88c5\u7f6e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7f16\u53f7\u4e3a$i+n$\u7684\u865a\u62df\u70b9\uff0c\u4e14\u5230\u865a\u62df\u70b9\u7684\u8ddd\u79bb\u4e3a\u6240\u7528\u65f6\u95f4$T[i]$\n\n\u6211\u4eec\u4ece$1$\u53f7\u70b9\u8dd1\u6700\u77ed\u8def\u3002\u5047\u5982\u73b0\u5728\u5bf9\u9876\u662f$x$\u53f7\u8282\u70b9\uff0c\u5f53$x \\leq n$\u65f6\uff0c\u6211\u4eec\u66f4\u65b0\u8d77\u70b9\u4e3a$x$\u7684\u5f39\u8df3\u88c5\u7f6e\u7684\u865a\u62df\u70b9\u7684dis\uff0c\u5e76\u6254\u8fdb\u5806\uff1b\u5426\u5219\u5c31\u5728\u7ebf\u6bb5\u6811\u4e0a\u5148\u627e\u5230$[L[x-n],R[x-n]]$\u8fd9\u4e2a\u533a\u95f4($x-n$\u5c31\u662f\u8be5\u865a\u62df\u70b9\u6240\u5bf9\u5e94\u5f39\u8df3\u88c5\u7f6e\u7684\u7f16\u53f7)\uff0c\u5728\u8fd9\u4e2a\u533a\u95f4\u6240\u542b\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0a\u4e8c\u5206\u51fa$D[x-n] \\leq py[id] \\leq U[x-n]$\u4e2d\u7684\u8282\u70b9\uff0c\u5c1d\u8bd5\u66f4\u65b0dis\uff0c\u5982\u679c\u6210\u529f\u52a0\u5165\u961f\u5217\uff0c\u4e0d\u7ba1\u6210\u4e0d\u6210\u529f\uff0c\u90fd\u4eceset\u4e2d\u5220\u9664\uff08\u6839\u636edij\u7684\u7279\u6027\uff09\u3002\n\n\u8fd9\u6837\u6700\u540e\u8f93\u51fadis[2~n]\u5c31\u884c\u4e86\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f$O((n+m)\\log(n+m)+n\\log^2 n)$,\u5e38\u6570\u7565(da)\u5927(dao)\u4e00(mei)\u70b9(jiu)\n\n($(n+m)\\log(n+m)$\u662f$n+m$\u4e2a\u70b9dij\u7684\u590d\u6742\u5ea6\uff0c$n\\log^2 n$\u662f$n$\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u62c6\u6210$\\log n$\u4e2a\uff0c\u5728set\u4e2dinsert,lowerbound,erase\u7684\u590d\u6742\u5ea6)\n\n```cpp\n#include <bits/stdc++.h>\n#define N 70005\n#define M 150005\n#define getchar nc\nusing namespace std;\ninline char nc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(register int x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\nint n,m,w,h;\nint px[N],py[N];\nint P[M],T[M],L[M],R[M],D[M],U[M];\nset<pair<int,int> > s[N<<2];\nvector<int> nv[N];\nstruct node{\n    int dis,pos;\n    bool operator < (const node &x) const{\n        return x.dis<dis;\n    }\n};\npriority_queue<node> q;\nint dis[N+M],vis[N+M];\ninline void modify(register int x,register int l,register int r,register int id)\n{\n    s[x].insert(make_pair(py[id],id));\n    if(l==r)\n        return;\n    int mid=l+r>>1;\n    if(px[id]<=mid)\n        modify(x<<1,l,mid,id);\n    else\n        modify(x<<1|1,mid+1,r,id);\n}\ninline void change(register int x,register int l,register int r,register int id)\n{\n    if(L[id]<=l&&r<=R[id])\n    {\n        set<pair<int,int> >::iterator it;\n        while(19260817)\n        {\n            it=s[x].lower_bound(make_pair(D[id],-1));\n            if(it==s[x].end()||it->first>U[id])\n                break;\n            int to=it->second;\n            if(dis[to]>dis[id+n])\n            {\n                dis[to]=dis[id+n];\n                q.push((node){dis[to],to});\n            }\n            s[x].erase(it);\n        }\n        return;\n    }\n    int mid=l+r>>1;\n    if(L[id]<=mid)\n        change(x<<1,l,mid,id);\n    if(R[id]>mid)\n        change(x<<1|1,mid+1,r,id);\n}\nint main()\n{\n    n=read(),m=read(),w=read(),h=read();\n    for(register int i=1;i<=n;++i)\n    {\n        px[i]=read(),py[i]=read();\n        if(i!=1)\n            modify(1,1,w,i);\n    }\n    for(register int i=1;i<=m;++i)\n    {\n        P[i]=read(),T[i]=read(),L[i]=read(),R[i]=read(),D[i]=read(),U[i]=read();\n        nv[P[i]].push_back(i+n);\n    }\n    for(register int i=1;i<=n;++i)\n        dis[i]=1926081700,vis[i]=0;\n    dis[1]=0;\n    q.push((node){0,1});\n    while(!q.empty())\n    {\n        node tmp=q.top();\n        q.pop();\n        int x=tmp.pos;\n        if(vis[x])\n            continue;\n        vis[x]=1;\n        if(x<=n)\n        {\n            for(register int i=0;i<nv[x].size();++i)\n            {\n                int y=nv[x][i];\n                dis[y]=dis[x]+T[y-n];\n                q.push((node){dis[y],y});\n            }\n        }\n        else\n            change(1,1,w,x-n);\n    }\n    for(register int i=2;i<=n;++i)\n        write(dis[i]),puts(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1563502186,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u89c2\u5bdf\u6570\u636e\u8303\u56f4\uff0c\u53d1\u73b0\u5f88\u9002\u5408\u4e00\u4e2a\u6839\u53f7\u7b97\u6cd5\uff0c\u56e0\u6b64\u91c7\u7528 kd-tree \u89e3\u51b3\u95ee\u9898\u3002\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5efa\u8fb9\u7684\u8bdd\uff0c\u8fb9\u6570\u4f1a\u8fbe\u5230 $O(m\\sqrt n)$ \u7ea7\u522b\uff0c\u7ea6\u7b49\u4e8e $4e7$ \uff0c\u663e\u7136\u7a7a\u95f4\u5f00\u591a\u5c11\u90fd\u4e0d\u591f\u3002\n\n\u4f46\u662f\u8fd9\u5f20\u56fe\u663e\u7136\u662f\u6709\u7279\u6027\u7684\uff1a\u5373\u6ca1\u6709\u8d1f\u8fb9\u3002\u8fd9\u5f88\u9002\u5408\u91c7\u7528 $dijkstra$ \u7b97\u6cd5\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u53bb\u5efa\u8fb9\uff0c\u800c\u662f\u76f4\u63a5 **\u5728kd-tree\u4e0a\u8fdb\u884c\u6700\u77ed\u8def**\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5efa\u4e00\u4e2a\u5806\uff0c\u548c\u4e00\u4e2a kd-tree \u3002\u4e00\u5f00\u59cb\uff0c\u5806\u4e2d\u95f4\u53ea\u6709 $1$ \u53f7\u70b9\u3002\n\n\u6bcf\u8f6e\uff0c\u6211\u4eec\u53d6\u51fa\u5806\u9876\u5143\u7d20\uff0c\u7136\u540e\u5229\u7528\u5806\u9876\u7684\u8fde\u8fb9\u60c5\u51b5\u5728 kd-tree \u4e0a\u6253\u533a\u95f4 $chkmin$ \u6807\u8bb0\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u6807\u8bb0\u4e0d\u9700\u8981\u4e0b\u4f20\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u505a\u65e0\u6cd5\u5feb\u901f\u66f4\u65b0\u5806\u4e2d\u5143\u7d20\u5230 $1$ \u53f7\u70b9\u8ddd\u79bb\uff0c\u96be\u4ee5\u53d6\u70b9\u3002\u4e0d\u8fc7\uff0c\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u53ea\u6709\u88ab\u66f4\u65b0\u8fc7\u7684\u70b9\u624d\u6709\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\u3002\u56e0\u6b64\u6211\u4eec\u6bcf\u6b21\u66f4\u65b0\u8fc7\u540e\u5411\u5806\u4e2d\u653e\u5165 **kd-tree\u5bf9\u5e94\u533a\u95f4\u7684\u8282\u70b9** \uff0c\u5373\u4e00\u6b21\u6027\u5c06\u6574\u4e2a\u533a\u95f4\u90fd\u4e22\u8fdb\u53bb\u3002\n\n\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u4ece\u5806\u4e2d\u63d0\u51fa\u5806\u9876\u5143\u7d20\uff0c\u518d\u627e\u5230\u8fd9\u4e2a\u5143\u7d20\u5bf9\u5e94\u533a\u95f4\u4e2d **\u8fd8\u6ca1\u6709\u4f5c\u4e3a\u8d77\u70b9\u66f4\u65b0\u8fc7\u5176\u4ed6\u8282\u70b9\u7684\u6240\u6709\u8282\u70b9** \uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u8282\u70b9\u653e\u5230\u64cd\u4f5c\u5e8f\u5217\u4e2d\u6309\u5e8f\u66f4\u65b0\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u505a\u7684\u8bdd kd-tree \u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ea\u4f1a\u88ab\u63d0\u51fa\u6765 $1$ \u6b21\uff0c\u6bcf\u6b21\u66f4\u65b0\u590d\u6742\u5ea6\u4e3a $O(\\sqrt n)$ \uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log n+m\\sqrt n)$ \u3002\n\n\u987a\u4fbf\u4e00\u63d0\uff0c\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u63d0\u51fa kd-tree \u4e0a\u7684\u6574\u4e2a\u533a\u95f4\u4ee5\u53ca\u5728\u6574\u4e2a\u533a\u95f4\u4e0a\u6253 tag \uff0c\u53ef\u4ee5\u5c06 kd-tree \u5efa\u6210\u5b9e\u9645\u4fe1\u606f\u53ea\u5728\u53f6\u5b50\u4e0a\u7684\u6837\u5b50\u3002\n\n\u4e3a\u4e86\u8282\u7701\u65f6\u95f4\uff0c\u5176\u5b9e\u53ef\u4ee5\u5c06\u66f4\u65b0\u8fc7\u7684\u8282\u70b9\u76f4\u63a5\u4ece kd-tree \u4e0a\u5220\u6389\u5e76\u5411\u4e0a\u5408\u5e76\u3002\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5feb\u901f\u627e\u5230\u9002\u5408\u7684\u5806\u9876\u5143\u7d20\u3002\n\n\u4ee3\u7801\u6ca1\u5f97\u3002",
        "postTime": 1563432443,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "\u5904\u7406\u8fd9\u7c7b\u7279\u6b8a\u8fde\u8fb9\u7684\u5957\u8def\u65b9\u6cd5(\u8fb9\u6743\u975e\u8d1f):\n\n\u4ee5\u4e0b\u8fb9\u7684\u542b\u4e49\u90fd\u662f\u7279\u6b8a\u8fb9\uff0c\u5f62\u5982\u4ece\u96c6\u5408 $S_1$ \u4e2d\u7684\u6240\u6709\u70b9\u8fde\u5411\u96c6\u5408 $S_2$ \u4e2d\u7684\u6240\u6709\u70b9.\n\n\u76f4\u63a5\u4f7f\u7528\u67d0\u79cd\u6570\u636e\u7ed3\u6784\u8fde\u8fb9\u4e4b\u540e\u8dd1 dijkstra\uff0c\u590d\u6742\u5ea6 $O((n+\\text{\u8fb9\u6570})\\times \\log (n+\\text{\u8fb9\u6570}))$.(\u5b9e\u9645\u4e0a\u4f7f\u7528\u6590\u6ce2\u90a3\u5951\u5806\u53ef\u4ee5\u505a\u5230$O(\\text{\u8fb9\u6570}+n\\log n)$\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u8fd8\u662f\u4f7f\u7528 stl \u7684\u4f18\u5148\u961f\u5217\u6765\u5b8c\u6210).\u4e00\u822c\u6765\u8bf4\u8fb9\u6570\u5c31\u662f $m\\times \\text{\u6570\u636e\u7ed3\u6784\u5355\u6b21\u590d\u6742\u5ea6}$.\n\n\u7136\u800c\u53ef\u4ee5\u628a\u5230\u8fb9\u548c\u70b9\u7684\u6700\u77ed\u8def\u4e00\u8d77\u7528 dijkstra \u7ef4\u62a4.\u5177\u4f53\u5730\uff0c\u5b9a\u4e49\u5230\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u4e3a\u5176\u6240\u6709\u8d77\u70b9\u7684\u6700\u77ed\u8def\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u8fb9\u957f\uff0c\u6bcf\u6b21\u4ece\u5806\u4e2d\u53d6\u51fa\u957f\u5ea6\u6700\u77ed\u7684\u5143\u7d20\uff0c\u5982\u679c\u8be5\u5143\u7d20\u4e3a\u70b9\u90a3\u4e48\u5c31\u66f4\u65b0\u6240\u6709\u8d77\u70b9\u5305\u542b\u5b83\u7684\u8fb9\u7684\u6700\u77ed\u8def\uff0c\u5426\u5219\u7684\u8bdd\u5c31\u66f4\u65b0\u8be5\u8fb9\u7684\u6240\u6709\u7ec8\u70b9\u7684\u6700\u77ed\u8def.\u90a3\u4e48\u7531\u4e8e\u6bcf\u6b21\u5806\u4e2d\u53d6\u51fa\u7684\u90fd\u662f\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5143\u7d20\u90fd\u53ea\u4f1a\u88ab\u66f4\u65b0\u4e00\u6b21.\u4e8b\u5b9e\u4e0a\u6211\u4eec\u901a\u5e38\u5199\u7684 dijkstra \u662f\u7701\u7565\u4e86\u8fb9\u7684\u505a\u6cd5.\n\n\u90a3\u4e48\u770b\u4e00\u4e0b\u6211\u4eec\u9700\u8981\u505a\u4ec0\u4e48:\u53d6\u51fa\u6240\u6709\u8d77\u70b9\u5305\u542b\u67d0\u4e2a\u70b9\u7684\u8fb9\uff0c\u53d6\u51fa\u67d0\u6761\u8fb9\u7684\u6240\u6709\u7ec8\u70b9\uff0c\u5220\u9664\u4e00\u6761\u8fb9\u6216\u4e00\u4e2a\u70b9.\u627e\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5373\u53ef.\u8fd9\u6837\u590d\u6742\u5ea6\u662f $O((n+m)\\times \\text{\u6570\u636e\u7ed3\u6784\u5355\u6b21\u590d\u6742\u5ea6}+(n+m)\\log)$.\u4e00\u822c\u70b9\u548c\u8fb9\u7684\u64cd\u4f5c\u53ef\u80fd\u4e0d\u662f\u901a\u8fc7\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\u7684\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u59d1\u4e14\u8fd9\u6837\u5199.\n\n\u5177\u4f53\u5230\u8fd9\u9053\u9898\uff0c\u53d1\u73b0\u627e\u8fb9\u7684\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5\u7528 vector \u8fdb\u884c\uff0c\u627e/\u5220\u70b9\u7684\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u6811\u5957\u6811\u6216\u8005 kdtree \u5b8c\u6210\uff0c\u5220\u8fb9\u6ca1\u6709\u5fc5\u8981\u56e0\u4e3a\u8d77\u70b9\u603b\u5728\u8fb9\u4e4b\u524d\u5220\u6389.\u8fb9\u548c\u70b9\u7684\u677e\u5f1b\u53ef\u4ee5\u653e\u5728\u4e00\u8d77\u8fdb\u884c.\n\n\u4ee5\u4e0b\u662f\u5e38\u6570\u5de8\u5927\u7684\u7ebf\u6bb5\u6811\u5957 set \u7684\u4ee3\u7801.\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<set>\nusing namespace std;\nconst int N=300005;\nstruct Edge{int w,x1,x2,y1,y2;}tmpe[N];\nvector<int>e[N];\nstruct Point{int x,y;}pos[N];\nstruct Node{int id,dis;bool operator <(const Node &a)const{return dis>a.dis;}};\nset<pair<int,int> >a[N];\npriority_queue<Node>q;\nint dis[N],n,m,tmp[N],vis[N],W,H;\nvoid ins(int rot,int lt,int rt,int x,pair<int,int>w)\n{\n    a[rot].insert(w);\n    if(lt==rt)return;\n    int mid=(lt+rt)>>1;\n    if(x<=mid)ins(rot<<1,lt,mid,x,w);\n    else ins(rot<<1|1,mid+1,rt,x,w);\n}\nvoid del(int rot,int lt,int rt,int x,pair<int,int>w)\n{\n    a[rot].erase(w);\n    if(lt==rt)return;\n    int mid=(lt+rt)>>1;\n    if(x<=mid)del(rot<<1,lt,mid,x,w);\n    else del(rot<<1|1,mid+1,rt,x,w);\n}\nvoid update(int rot,int lt,int rt,int x1,int x2,int y1,int y2,int w)\n{\n    if(lt>=x1&&rt<=x2)\n    {\n        if(!a[rot].size())return;\n        set<pair<int,int> >::iterator L=a[rot].lower_bound(make_pair(y1,0)),R=a[rot].upper_bound(make_pair(y2,114514));\n        int tn=0;\n        for(set<pair<int,int> >::iterator i=L;i!=R;i++)\n        {\n            int u=i->second;dis[u]=w;tmp[++tn]=u;\n            for(vector<int>::iterator it=e[u].begin();it!=e[u].end();it++)\n                q.push((Node){*it,tmpe[*it].w+w});\n        }\n        for(int i=1;i<=tn;i++)del(1,1,W,pos[tmp[i]].x,make_pair(pos[tmp[i]].y,tmp[i]));\n        return;\n    }\n    int mid=(lt+rt)>>1;\n    if(x1<=mid)update(rot<<1,lt,mid,x1,x2,y1,y2,w);\n    if(x2>mid)update(rot<<1|1,mid+1,rt,x1,x2,y1,y2,w);\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&W,&H);\n    for(int i=1,x,y;i<=n;i++)scanf(\"%d%d\",&pos[i].x,&pos[i].y),ins(1,1,W,pos[i].x,make_pair(pos[i].y,i));\n    for(int i=1,x,t,L,R,D,U;i<=m;i++)\n    {\n        scanf(\"%d%d%d%d%d%d\",&x,&t,&L,&R,&D,&U);\n        e[x].push_back(i);tmpe[i]=(Edge){t,L,R,D,U};\n    }\n    dis[1]=0;for(int i=2;i<=n;i++)dis[i]=1e9;\n    for(vector<int>::iterator it=e[1].begin();it!=e[1].end();it++)q.push((Node){*it,tmpe[*it].w});\n    while(!q.empty())\n    {\n        Node t=q.top();q.pop();\n        if(vis[t.id])continue;vis[t.id]=1;\n        update(1,1,W,tmpe[t.id].x1,tmpe[t.id].x2,tmpe[t.id].y1,tmpe[t.id].y2,t.dis);\n    }\n    for(int i=2;i<=n;i++)printf(\"%d\\n\",dis[i]);\n}\n```",
        "postTime": 1591084186,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "\u524d\u5929\u53d1\u4e86\u7bc7D1T1\u7684\u9898\u89e3\uff0c\u4eca\u5929\u6211\u53c8\u6765\u4e86\n\n\u770b\u5b8c\u5168\u90e8\u9898\u76ee\uff0cT2T3\u662f\u5565\u554a\uff0c\u8fd8\u662f\u56de\u6765\u770bT1\u5427\n\n\u54c8\u54c8\u54c8\uff0c\u53c8\u662f\u6700\u77ed\u8def\uff01\n\n------------\n\ndij\u7684\u6027\u8d28\u5c31\u662f**\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u6807\u8bb0\u4e00\u6b21**\uff0c\u5e76\u4e14\u6743\u503c\u975e\u8d1f\u3002\n\n\u8fd9\u662f\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff01\u5c31\u662f\u8bf4\uff0c\u6211\u4eecdij\u7684\u65f6\u5019\u53ea\u8981\u628a\u65b0\u589e\u7684\u77e9\u5f62\u5185**\u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9**\u6807\u8bb0\u5c31\u597d\u4e86\u3002\n\n\u8f6c\u5316\uff1a\u6bcf\u6b21\u628a\u4e00\u4e2a\u77e9\u5f62\u5185\u7684\u70b9\u5168\u90e8\u53bb\u6389\uff0c\u5e76\u8d4b\u503c\u3002\n\n\u770b\u5230\u8fd9\u91cc\uff0c\u5982\u679c\u4f60\u505a\u8fc7\u7ebf\u6bb5\u6811\u7684\u62d3\u5c55\uff0c\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u7ebf\u6bb5\u6811\uff01\n\n\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u9898\u76ee\uff1abzoj4127 Abs  luogu4145 \u82b1\u795e\u6e38\u5386\u5404\u56fd\n\n~~\u5176\u5b9e\u6211\u53ea\u662f\u542c\u8fc7\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u800c\u5df2\uff0c\u6839\u672c\u6ca1\u5199\u8fc7\uff0c\u5f53\u573a\u778e\u6572\u4e00\u901a\u5c31\u8fc7\u4e86~~\n\n------------\n\ndij\u90e8\u5206\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u8f6c\u5316\u540e\u600e\u4e48\u5b9e\u73b0\uff1f\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4e0d\u7528\u8003\u8651\u6811\u5957\u6811\uff0c\u56e0\u4e3a\u76f4\u63a5\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u5c31\u884c\u4e86\u3002\n\n\u597d\u50cf\u5f88\u591a\u4eba\u90fd\u4e0d\u77e5\u9053\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff1f\n\n\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u7528\u6bcf\u4e2a\u70b9\u8868\u793a\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u8fd9\u4e2a\u6b63\u65b9\u5f62\u8fd8\u53ef\u4ee5\u5206\u4e3a4\u4e2a\u5b50\u6b63\u65b9\u5f62\u3002\uff08\u7c7b\u4f3c\u4e8c\u7ef4st\u8868\uff09\n\n\u6211\u4eec\u7528sum\u6765\u8868\u793a\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u6b63\u65b9\u5f62\u5185\u5269\u4e0b**\u6ca1\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9\u7684\u603b\u6570**\u3002\n\n\u6211\u4eec\u7528\u9012\u5f52\u6765\u6807\u8bb0\u70b9\uff0c\u8fd9\u6837\u5f53\u4e00\u4e2a\u6b63\u65b9\u5f62\u5185\u6ca1\u6709\u672a\u6807\u8bb0\u7684\u70b9\u65f6\u5c31\u53ef\u4ee5\u526a\u6389\u5f88\u591a\u679d\u3002\n\n\u4e5f\u5c31\u662f\uff0c\u5f53\u9012\u5f52\u5230sum=0\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\n\n\u5982\u679c\u5f53\u524d\u7ebf\u6bb5\u6811\u77e9\u5f62\u548cdij\u91cc\u66f4\u65b0\u7684\u77e9\u5f62\u6ca1\u6709\u91cd\u5408\u90e8\u5206\uff0c\u4e5f\u8fd4\u56de\u3002\n\n\u5426\u5219\uff0c\u7ee7\u7eed\u9012\u5f52\u56db\u4e2a\u5b50\u77e9\u5f62\u3002\n\n\u5f53\u77e9\u5f62\u7f29\u6210\u4e00\u4e2a\u70b9\u65f6\uff0c\u5728dij\u90a3\u8fb9\u5904\u7406\uff0c\u5e76\u5c06sum\u6e05\u96f6\u3002\n\n\u56de\u6eaf\u65f6\u66f4\u65b0sum\u503c\uff0c\u5c31\u8fd9\u4e48\u7b80\u5355\u3002\n\n\u4e0d\u8fc7w\u548ch\u6700\u5927\u90fd\u662fn\uff0c\u6ca1\u5173\u7cfb\uff01\u7528\u52a8\u6001\u5f00\u70b9\uff08\u5c31\u662f\u7528\u5230\u4e00\u4e2a\u533a\u95f4\u518d\u5f00\u4e00\u4e2a\u533a\u95f4\uff09\uff01\n\n\u5982\u679c\u7528\u52a8\u6001\u5f00\u70b9\uff0c\u521d\u59cb\u5316\u5c31\u5f97\u4e00\u4e2a\u4e00\u4e2a\u57ce\u5e02\u52a0\u5165\u3002\u53cd\u6b63\u65f6\u96502\u79d2\uff0c\u590d\u6742\u5ea6\u4e5f\u5bf9\u3002\n\n\u597d\u50cf\u8dd1\u5f97\u633a\u5feb\uff1f\u867d\u7136\u6211\u4e0d\u4f1a\u7b97\u4e8c\u7ef4\u7684\u590d\u6742\u5ea6\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=7e4+5,MAXM=1.5e5+5;\nint n,m,w,h;\nstruct node{\n    int x,y;\n    int h;\n    int bgnid;\t//\u7528\u6765\u8f93\u51fa\n}city[MAXN];\ninline bool cmp_city(node a,node b){\n    if(a.x==b.x) return a.y<b.y;\n    return a.x<b.x;\n}\nint GetID(int x,int y){\t//\u6839\u636e\u5750\u6807\u627e\u57ce\u5e02\u7f16\u53f7\uff08\u5148\u6392\u597d\u5e8f\uff09\n    node f;\n    f.x=x,f.y=y;\n    int l=1,r=n;\n    while(l<r){\n        int mid=l+r>>1;\n        if(cmp_city(city[mid],f)) l=mid+1;\n        else r=mid;\n    }\n    return r;\n}\nstruct edge{\n    int t,l1,r1,l2,r2;\t//\u5b58\u4e00\u4e2a\u77e9\u5f62\n    int d;\n    inline void Init_bgn(){\n        d=0;\n        for(int i=1;i<=n;i++)\n            if(city[i].bgnid==1){\n                l1=l2=city[i].x;\n                r1=r2=city[i].y;\n                return ;\n            }\n    }\n}ed[MAXM];\nint cnte,nx[MAXM];\ninline void adde(int &h,int t,int a,int b,int c,int d){\n    cnte++;\n    ed[cnte].t=t;\n    ed[cnte].l1=a;\n    ed[cnte].l2=b;\n    ed[cnte].r1=c;\n    ed[cnte].r2=d;\n    nx[cnte]=h;\n    h=cnte;\n}\nbool operator <(edge a,edge b){\n    return a.d>b.d;\t//dij\u91cc\u7ed9\u4f18\u5148\u961f\u5217\u91cd\u8f7d\n}\nint dis[MAXN];\npriority_queue<edge> que;\nedge hd;\nconst int SIZ=1e7+5;\nint cntseg,c1[SIZ],c2[SIZ],c3[SIZ],c4[SIZ];\n#define getc1 c1[k],l1,r1,midx,midy\t\t//4\u4e2a\u5b50\u6b63\u65b9\u5f62\u7684\u5b8f\u5b9a\u4e49\uff08\u964d\u4f4e\u4ee3\u7801\u91cf\uff09\n#define getc2 c2[k],l1,midy+1,midx+1,r2\n#define getc3 c3[k],midx+1,r1,l2,midy\n#define getc4 c4[k],midx+1,midy+1,l2,r2\nint sum[SIZ];\ninline void pushup(int k){\n    sum[k]=sum[c1[k]]+sum[c2[k]]+sum[c3[k]]+sum[c4[k]];\t//\u6807\u8bb0\u4e0a\u4f20\n}\nvoid modify1(int &k,int l1,int r1,int l2,int r2,const node &ct){\t//\u521d\u59cb\u5316\u7528\u7684\u51fd\u6570\n    if(!k) k=++cntseg;\n    if(l1==l2&&r1==r2){\n        sum[k]=1;\n        return ;\n    }\n    int midx=l1+l2>>1,midy=r1+r2>>1;\n    if(ct.x<=midx){\n        if(ct.y<=midy) modify1(getc1,ct);\n        else modify1(getc2,ct);\n    }\n    else{\n        if(ct.y<=midy) modify1(getc3,ct);\n        else modify1(getc4,ct);\n    }\n    pushup(k);\n    return ;\n}\n\nvoid modify2(int k,int l1,int r1,int l2,int r2,const edge &e){\t//dij\u66f4\u65b0\u4e00\u4e2a\u77e9\u5f62\u5185\u7684\u70b9\n    if(l1>e.l2||r1>e.r2||l2<e.l1||r2<e.r1) return ;\t//\u6ca1\u6709\u91cd\u5408\u90e8\u5206\n    if(!sum[k]) return ;\n//\tprintf(\"mdf2 %d %d %d %d\\n\",l1,r1,l2,r2);\n    if(l1==l2&&r1==r2){\n    \t//\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u76f4\u63a5\u4fee\u6539dij\u91cc\u9762\u7528\u7684\u4f18\u5148\u961f\u5217\n        sum[k]=0;\n        int p=GetID(l1,r1);\n        dis[p]=e.d;\n        for(int i=city[p].h;i;i=nx[i]){\n            edge t=ed[i];\n            t.d=e.d+t.t;\n            que.push(t);\n        }\n        return ;\n    }\n    int midx=l1+l2>>1,midy=r1+r2>>1;\n    modify2(getc1,e);\t//\u9012\u5f524\u4e2a\u5b50\u6b63\u65b9\u5f62\n    modify2(getc2,e);\n    modify2(getc3,e);\n    modify2(getc4,e);\n    pushup(k);\n    return ;\n}\n\ninline void Print(){//\u8c03\u8bd5\u7528\n    for(int i=1;i<=n;i++)\n        printf(\"u %d dis %d\\n\",city[i].bgnid,dis[i]);\n    puts(\"\");\n    return ;\n}\n\nvoid dij(){\n    cntseg=1;\n    int one=1;\n    for(int i=1;i<=n;i++)\n        modify1(one,1,1,n,n,city[i]);\t//\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\n    \n    memset(dis,0x3f,sizeof(dis));\n//\tdis[1]=0;\n    edge bgn;\n    bgn.Init_bgn();\n    que.push(bgn);\n    while(!que.empty()){\n        edge hd=que.top();\n        que.pop();\t//dij\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\u5427\n//\t\tprintf(\"Start mdf2 %d %d %d %d dis %d\\n\",hd.l1,hd.r1,hd.l2,hd.r2,hd.d);\n        modify2(1,1,1,n,n,hd);\n//\t\tPrint();\n    }\n    return ;\n}\n/*\n\n5 3 5 5\n1 1\n3 1\n4 1\n2 2\n3 3\n1 123 1 5 1 5\n1 50 1 5 1 1\n3 10 2 2 2 2\n\n\n*/\nint ans[MAXN];\nint main(){\n//\tfreopen(\"jump.in\",\"r\",stdin);\n//\tfreopen(\"jump.out\",\"w\",stdout);\n    scanf(\"%d%d%d%d\",&n,&m,&w,&h);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d%d\",&city[i].x,&city[i].y),city[i].bgnid=i;\n    for(int i=1;i<=m;i++){\n        int p,t,a,b,c,d;\n        scanf(\"%d%d%d%d%d%d\",&p,&t,&a,&b,&c,&d);\n        adde(city[p].h,t,a,b,c,d);\n    }\n    sort(city+1,city+n+1,cmp_city);\n    dij();\n    for(int i=1;i<=n;i++)\n        ans[city[i].bgnid]=dis[i];\n    for(int i=2;i<=n;i++)\n        printf(\"%d\\n\",ans[i]);\n//\tfclose(stdin);\n//\tfclose(stdout);\n    return 0;\n}\n```\n\n\n------------\n\n### \u603b\u7ed3\n\n\u8f7b\u677e\u6c34\u8fc7T1\uff01\u76f8\u6bd4Day1\uff0c\u53ea\u82b1\u4e862h\u505aT1\uff0c\u8fd8\u80fdAC\uff0c\u8fdb\u6b65\u771f\u5927\uff01\n\n\u770b\u6765\uff0c\u6709\u65f6\u5019\u5f97\u5206\u4e0e\u76ee\u6807\u662f\u6210\u6b63\u6bd4\u7684\u3002Day1\u8001\u662f\u60f3\u6253\u90e8\u5206\u5206\uff0c\u7ed3\u679c\u4e0e\u6b63\u89e3\u64e6\u8fb9\u800c\u8fc7\u3002\u4eca\u5929\u60f3A\u9898\uff0c\u4e0d\u4ec5\u4e0d\u7528\u7ba1\u90e8\u5206\u5206\uff0c\u8fd8\u8282\u7701\u4e86\u65f6\u95f4\u3002\n\n\u4eca\u5e74NOI\uff0cspfa\u57fa\u672c\u6b7b\u5730\u5f7b\u5f7b\u5e95\u5e95\u4e86\uff0c\u56e0\u4e3adij\u6709\u4e00\u4e2a\u88abOIer\u4eec\u9057\u5fd8\u5f88\u4e45\u7684\u6027\u8d28\u3002\n\n\u4e00\u4e9b\u7b97\u6cd5\u770b\u4f3c\u6d45\u663e\uff0c\u5374\u50cf\u6d77\u7ef5\u4e00\u6837\uff08\u5927\u5bb6\u90fd\u77e5\u9053\u6211\u60f3\u8bf4\u4ec0\u4e48\u4e86\uff09\n\nOI\u91cc\u9762\u5230\u5e95\u6709\u6ca1\u6709\u50cf\u6587\u5316\u8bfe\u91cc\u7684\u5957\u8def\uff0c\u8fd9\u771f\u662f\u4e2a\u8c1c\u3002\u8c01\u4e5f\u8bf4\u4e0d\u6e05\u7b97\u6cd5\u91cc\u9762\u6709\u591a\u5c11\u6027\u8d28\u53ef\u4ee5\u7528\uff0c\u8c01\u77e5\u9053\u660e\u5e74\u4f1a\u4e0d\u4f1a\u8003\u4e2aspfa\u628adij\u5361\u6389\u5462\uff1f\u5176\u5b9e\u4eba\u5bb6spfa\u8fd8\u662f\u6709\u5f88\u591a\u6027\u8d28\u7684\uff08\u6bd4\u5982\u8bf4\u5f88\u4e0d\u7a33\u5b9a\uff09\n",
        "postTime": 1563448321,
        "uid": 116116,
        "name": "LZDQ",
        "ccfLevel": 0,
        "title": "NOI2019D2T1\u5f39\u8df3"
    },
    {
        "content": "K-D Tree \u65e2\u7136\u662f\u5904\u7406\u9ad8\u7ef4\u6570\u636e\u7684\u5229\u5668\uff0c\u81ea\u7136\u4e5f\u6709\u7740\u4f18\u5316\u5efa\u56fe\u7684\u529f\u80fd\uff0c\u8fd9\u9898\u4e00\u770b\u5c31\u77e5\u9053\u662f\u88f8\u7684\u6700\u77ed\u8def\u677f\u5b50\uff0c\u4f46\u7531\u4e8e\u8fb9\u6570\u8fc7\u591a\uff0c\u53c8\u4e0e\u4e8c\u7ef4\u6570\u70b9\u77e9\u5f62\u67e5\u8be2\u76f8\u5173\uff0c\u53ef\u4ee5\u4f7f\u7528 K-D Tree\u3002\u6709\u4e00\u5b9a\u7ecf\u9a8c\u7684\u540c\u5b66\u4e00\u5b9a\u77e5\u9053\uff0c\u5f88\u591a\u65f6\u5019\u65f6\u95f4\u4e0e\u7a7a\u95f4\u5e76\u4e0d\u5747\u7b49\uff0c\u8fd9\u9053\u9898\u66f4\u662f\u7565\u5fae\u5361\u5e38\u6570\uff0c\u5982\u679c\u771f\u7684\u5c06\u8fb9\u8fde\u8d77\u6765\uff0c\u5c31\u4e0d\u77e5\u9053\u662f MLE \u8fd8\u662f TLE \u4e86\uff0c\u5f53\u5c06\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u677e\u5f1b\u65f6\uff0c\u5c06\u4ece\u4ed6\u51fa\u53d1\u7684\u6bcf\u4e00\u4e2a\u5f39\u8df3\u673a\u5728 K-D Tree \u4e0a\u4fee\u6539\uff0c\u6700\u77ed\u8def\u9700\u8981\u4f7f\u7528 Dijkstra \u7b97\u6cd5\uff01\u7531\u4e8e\u74f6\u9888\u4e0d\u5728\u4e8e\u5806\uff0c\u6240\u4ee5 SPFA \u5728\u8fd9\u4e00\u5e74\u53c8\u6b7b\u4e86\u4e00\u6b21\u3002\n\n\u4ee3\u7801\u5f88\u597d\u5199\uff0c\u53ea\u7528\u4e86\u534a\u5c0f\u65f6\uff1a\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/priority_queue.hpp>\n#define ns __gnu_pbds\nusing namespace std;\nconst int T=70004,N=150005;\nchar buf[N+5],*p1,*p2,c;\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,N,stdin),p1==p2)?EOF:*p1++)\ninline int read(){\n\tint x,f=1;for(c=gc;c<'0'||c>'9';c=gc)if(c=='-')f=-f;\n\tfor(x=0;c>='0'&&c<='9';x=x*10+(48^c),c=gc);\n\treturn x*f;\n}\nstruct Dat{int w,lx,rx,ly,ry;}g[N];\nvector<int>lk[T];\nint n,m,lx[N],rx[N],ly[N],ry[N],mx[N],my[N],lc[N],rc[N],ax[N],ay[N],a[N],lt[N],rt[N];\nbool cmptp;\ninline bool cmpI(const int &x,const int &y){\n\treturn cmptp?ay[x]<ay[y]:ax[x]<ax[y];\n}\ntypedef long long ll;\ntypedef pair<ll,int>Tp;\nlong long d[T],ds[T];\nns::priority_queue<Tp,greater<Tp>,ns::pairing_heap_tag>pq;\ndouble px,py,fx,fy;\nbitset<N>vs;\nint cnt;\nint build(int l,int r){\n\tint x=l+r>>1,i;ds[x]=1e15;lt[x]=l,rt[x]=r;\n\tpx=py=0;for(i=l;i<=r;++i)px+=ax[a[i]],py+=ay[a[i]];\n\tfx=fy=0;for(i=l;i<=r;++i)fx+=(px-ax[a[i]])*(px-ax[a[i]]),fy+=(py-ay[a[i]])*(py-ay[a[i]]);\n\tcmptp=fx<fy,nth_element(a+l,a+x,a+r+1,cmpI);\n\tlx[x]=rx[x]=mx[x]=ax[a[x]],ly[x]=ry[x]=my[x]=ay[a[x]];\n\tif(l<x)lc[x]=build(l,x-1),lx[x]=min(lx[x],lx[lc[x]]),rx[x]=max(rx[x],rx[lc[x]]),\n\tly[x]=min(ly[x],ly[lc[x]]),ry[x]=max(ry[x],ry[lc[x]]);\n\tif(x<r)rc[x]=build(x+1,r),lx[x]=min(lx[x],lx[rc[x]]),rx[x]=max(rx[x],rx[rc[x]]),\n\tly[x]=min(ly[x],ly[rc[x]]),ry[x]=max(ry[x],ry[rc[x]]);return x;\n}\nvoid ask(int l,int r){\n\tint x=l+r>>1;if(ds[x]<d[0])return;\n\tif(lx[x]>=g[0].lx&&rx[x]<=g[0].rx&&ly[x]>=g[0].ly&&ry[x]<=g[0].ry){\n\t\tds[x]=d[0];pq.push(Tp(ds[x],x+n));return;\n\t}if(d[a[x]]>d[0]&&mx[x]>=g[0].lx&&mx[x]<=g[0].rx&&my[x]>=g[0].ly&&my[x]<=g[0].ry)\n\t\td[a[x]]=d[0],pq.push(Tp(d[a[x]],a[x]));\n\tif(lx[x]>g[0].rx||rx[x]<g[0].lx||ly[x]>g[0].ry||ry[x]<g[0].ly)return;\n\tif(l<x)ask(l,x-1);if(x<r)ask(x+1,r);return;\n}\nint main(){\n\tn=read(),m=read();read(),read();int i,x;\n\tfor(i=1;i<=n;++i)ax[i]=read(),ay[i]=read(),a[i]=i;\n\tfor(i=1;i<=m;++i){\n\t\tx=read();g[i]={read(),read(),read(),read(),read()};\n\t\tlk[x].push_back(i);\n\t}build(1,n);\n\tfor(i=2;i<=n;++i)d[i]=1e15;\n\tpq.push(Tp(d[1],1));\n\twhile(!pq.empty()){\n\t\tx=pq.top().second,pq.pop();\n\t\tif(vs[x])continue;\n\t\telse vs[x]=1;\n\t\tif(x>n){\n\t\t\tfor(x-=n,i=lt[x];i<=rt[x];++i)\n\t\t\t\tif(d[a[i]]>ds[x])pq.push(Tp(d[a[i]]=ds[x],a[i]));\n\t\t}else{\n\t\t\tfor(int y:lk[x])\n\t\t\t\tg[0]=g[y],d[0]=d[x]+g[y].w,ask(1,n);\n\t\t}\n\t}for(i=2;i<=n;++i)printf(\"%lld\\n\",d[i]);\n\treturn 0;\n}\n```",
        "postTime": 1646005834,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "K-D Tree \u4f18\u5316\u5efa\u56fe"
    },
    {
        "content": "\u672c\u9898\u4f18\u5316\u5efa\u56fe\u7684\u6570\u636e\u7ed3\u6784\u4e3a \u2014\u2014 \u56db\u5206\u6811(\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff1f)\n\n\u663e\u7136\uff0c \u8fd9\u4e2a\u9898\u662f\u4e2a\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\u5efa\u56fe\u7136\u540e\u8dd1\u6700\u77ed\u8def\u7684\u5957\u8def\u9898\uff0c \u5176\u4e2d\u5927\u81f4\u53ef\u4ee5\u5206\u4ee5\u4e0b\u5206\u6570\u6bb5\n\n1\u3001\u66b4\u529b\u8fde\u8fb9 -- 32\u5206\u7684~~\u9ad8\u5206~~\n\n2\u3001\u6570\u636e\u7ed3\u6784\u66b4\u529b\u8fde\u8fb9 -- \u7528\u56db\u5206\u6811\u7684\u8bdd\u53ef\u4ee5\u5f97\u523072\u7684\u9ad8\u5206\n\n3\u3001\u6709\u6280\u5de7\u7684\u7528\u6570\u636e\u7ed3\u6784\u8fde\u8fb9 -- AC\u5566 \uff01\u597d\u5f00\u5fc3(*^\u25bd^*)\uff01\n\n\u4e0b\u9762\u6211\u8bb2\u5206\u522b\u8bb2\u4e00\u4e0b\u7b2c2\u79cd\u8fde\u8fb9\u548c\u7b2c3\u79cd\u8fde\u8fb9\uff0c \u7b2c\u4e00\u79cd\u9ed8\u8ba4\u5927\u5bb6\u90fd\u4f1a,~~\u4e0d\u4f1a\u7684\u8bf7\u51fa\u95e8\u53f3\u62d0\u53bb\u505adij\u677f\u5b50QwQ~~\n\n\u5148\u653e\u7b2c2\u79cd\u65b9\u6cd5\u7684\u4ee3\u7801\u5427\uff0c \u4ee5\u4e0b\u4ee3\u7801\u4e3a72\u5206\uff0c \u56e0\u4e3a\u88ab\u5361\u7a7a\u95f4\u4e86\n```c++\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nconst int N = 1500005;\nconst int M = 2000005; \ninline int read() {\n\tint x = 0, f = 1; char c = getchar();\n\twhile(c < '0' || c > '9') {if(c == '-') f = -1; c = getchar();}\n\twhile(c >= '0' && c <= '9') {x = x * 10 + c - 48; c = getchar();}\n\treturn x * f;\n}\nint ch[M][4], tot = 1;\nbool vis[M];\nstruct node {\n\tint f;\n\tint s;\n};\nstruct cmp {\n\tbool operator()(node x, node y) {\n\t\treturn x.f > y.f;\n\t}\n};\npriority_queue<node, vector<node>, cmp> q;\nvector<int> v[N];\nint ver[M], nexts[M], head[M], edge[M], e = 0;\nint p[N], t[N], l[N], r[N], d[N], u[N];\nint n, m, w, h, dis[M], Dis;\ninline void add(int x, int y, int z) {\n\tver[++ e] = y;\n\tnexts[e] = head[x];\n\thead[x] = e;\n\tedge[e] = z;\n}\nvoid ins(int from, int t, int &num, int l, int r, int d, int u, int x, int y) {\n\tif(x < l || x > r || y < d || y > u) return;\n\tif(num == 0) num = ++tot;\n\tif(!vis[num] && from != 0) add(from + n, num + n, 0), vis[num] = true;\n\tif(l == r && d == u) {add(num + n, t, 0);return;}\n\tint midx = l + r >> 1, midy = d + u >> 1;\n\tins(num, t, ch[num][0], l, midx, d, midy, x, y); \n\tins(num, t, ch[num][1], l, midx, midy + 1, u, x, y); \n\tins(num, t, ch[num][2], midx + 1, r, d, midy, x, y); \n\tins(num, t, ch[num][3], midx + 1, r, midy + 1, u, x, y); \n}\nvoid Push(int p, int from, int l, int r, int d, int u, int ll, int rr, int dd, int uu) {\n\n\tif(p ==0 || rr < l ||  ll > r || uu < d || dd > u) return;\n\tif( ll <= l && rr >= r && uu >= u && dd <= d) {add(from, p + n, Dis);return;}\n\tint midx = l + r >> 1, midy = d + u >> 1;\n\tPush(ch[p][0], from, l, midx, d, midy, ll, rr, dd, uu); \n\tPush(ch[p][1], from, l, midx, midy + 1, u, ll, rr, dd, uu); \n\tPush(ch[p][2], from, midx + 1, r, d, midy, ll, rr, dd, uu); \n\tPush(ch[p][3], from, midx + 1, r, midy + 1, u, ll, rr, dd, uu); \n}\n\nint main() {\n\tn = read(), m = read(), w = read(), h = read();\n\tfor(int i = 1; i <= n; i ++) {\n\t\tint x = read(), y = read(), k = 1;\n\t\tins(0, i, k, 1, w, 1, h, x, y);\n\t} \n\tfor(int i = 1; i <= m; i ++) {\n\t\tp[i] = read(), t[i] = read(), l[i] = read(), r[i] = read(),\n\t\td[i] = read(), u[i] = read();  v[p[i]].push_back(i);\n\t\tint V = p[i]; Dis = t[i];\n\t\tPush(1, V,  1, w, 1, h, l[i], r[i], d[i], u[i]);\n\t}\n\tmemset(dis, 0x7f, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tdis[1] = 0;\n\tq.push((node){0, 1});\n\twhile(!q.empty()) {\n\t\tint x = q.top().s; q.pop();\n\t\tif(vis[x]) continue; vis[x] = 1;\n\t\tfor(int i = head[x]; i; i = nexts[i]) {\n\t\t\tint V = ver[i];\n\t\t\tif(dis[V] > dis[x] + edge[i]) {\n\t\t\t\tdis[V] = dis[x] +edge[i];\n\t\t\t\tq.push((node){dis[V], V});\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 2; i <= n; i ++)\n\t\tprintf(\"%d\\n\", dis[i]);\t\n\treturn 0;\n}\n```\n\u53ef\u4ee5\u770b\u51fa\uff0c \u4e0a\u9762\u4ee3\u7801\u4e2d\u7684ins\u64cd\u4f5c\uff0c \u662f\u7528\u5927\u533a\u95f4\u5411\u5c0f\u533a\u95f4\u8fde\u8fb9\u7684\uff0c \u5c0f\u533a\u95f4\u518d\u5411\u57ce\u5e02\u4f4d\u7f6e\u8fde\u8fb9\uff0c \u8fb9\u6743\u90fd\u4e3a0\uff1b\u8fd9\u4e00\u4e2a\u64cd\u4f5c\uff0c \u6211\u4eec\u662f\u4e0d\u597d\u4f18\u5316\u7684\uff0c \u56e0\u4e3a\u663e\u7136\u6bcf\u4e00\u4e2a\u5c0f\u533a\u95f4\u90fd\u662f\u5fc5\u8981\u7684\uff0c \u6240\u4ee5\u4e0a\u9762\u7684\u8fde\u8fb9\u662f\u6ca1\u6709\u591a\u4f59\u7684\u8fb9\u7684\uff0c \u4f18\u5316\u96be\u5ea6\u5f88\u5927\uff1b\n\n\u7ee7\u7eed\u770b\u7b2c2\u4e2a\u64cd\u4f5c\uff0c \u5373\u4e3apush, \u662f\u7528\u6765\u8ba9\u57ce\u5e02\u8fde\u5230\u4ed6\u80fd\u63a7\u5236\u7684\u6240\u6709\u533a\u95f4\u4e2d\u7684\uff0c \u8fd9\u4e00\u90e8\u5206\u7684\u64cd\u4f5c\u770b\u8d77\u6765\u597d\u50cf\u4e5f\u4e0d\u597d\u4f18\u5316\uff0c \u4e8e\u662f\u6211\u4eec\u559c\u63d072\u5206\uff0c \u5f97\u5230~~~MLE\u7684\u597d\u7ed3\u679c~~\n\n\u7136\u800c\u5b9e\u9645\u4e0a\uff0c \u7b2c2\u4e2a\u64cd\u4f5c\u662f\u53ef\u4ee5\u4f18\u5316\u7684\uff0c \u56e0\u4e3a\u663e\u7136\u6709\u5f88\u591a\u7684\u8fb9\u662f\u4e0d\u9700\u8981\u7ec3\u7684\uff0c\u56e0\u4e3a\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u6839\u672c\u4e0d\u4f1a\u7528\u5230\u8fd9\u4e9b\u8fb9\uff0c \u4f46\u662f\u600e\u4e48\u5224\u65ad\u8fd9\u4e9b\u8fb9\u9700\u4e0d\u9700\u8981\u662f\u4e2a\u5f88\u96be\u5f97\u64cd\u4f5c\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u79cd\u60f3\u6cd5\uff0c \u6211\u4eec\u5f97\u4e0d\u4e86\u6ee1\u5206\u7684\u539f\u56e0\u662fMLE,\u6211\u4eec\u9700\u8981\u7f29\u5c0f\u7a7a\u95f4\uff0c\u4e8e\u662f\u6211\u4eec\u5e72\u8106\u4e0d\u8fde\u7b2c2\u79cd\u8fb9\uff0c \u800c\u662f\u76f4\u63a5\u901a\u8fc7\u7b2c2\u79cd\u64cd\u4f5c\u8ba9\u66f4\u4f18\u7684\u8def\u5f84\u5165\u961f\n\n\u4ee5\u4e0b\u4e3a*AC*\u4ee3\u7801\uff01\n```c++\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nconst int N = 1500005;\nconst int M = 1000005; \ninline int read() {\n\tint x = 0, f = 1; char c = getchar();\n\twhile(c < '0' || c > '9') {if(c == '-') f = -1; c = getchar();}\n\twhile(c >= '0' && c <= '9') {x = x * 10 + c - 48; c = getchar();}\n\treturn x * f;\n}\nint ch[M][4], tot = 1;\nbool vis[M];\nstruct node {\n\tint f;\n\tint s;\n};\nstruct cmp {\n\tbool operator()(node x, node y) {\n\t\treturn x.f > y.f;\n\t}\n};\npriority_queue<node, vector<node>, cmp> q;\nvector<int> v[N];\nint ver[M], nexts[M], head[M], edge[M], e = 0;\nint p[N], t[N], l[N], r[N], d[N], u[N];\nint n, m, w, h, dis[M], Dis;\ninline void add(int x, int y, int z) {\n\tver[++ e] = y;\n\tnexts[e] = head[x];\n\thead[x] = e;\n\tedge[e] = z;\n}\nvoid ins(int from, int t, int &num, int l, int r, int d, int u, int x, int y) {\n\tif(x < l || x > r || y < d || y > u) return;\n\tif(num == 0) num = ++tot;\n\tif(!vis[num] && from != 0) add(from + n, num + n, 0), vis[num] = true;\n\tif(l == r && d == u) {add(num + n, t, 0);return;}\n\tint midx = l + r >> 1, midy = d + u >> 1;\n\tins(num, t, ch[num][0], l, midx, d, midy, x, y); \n\tins(num, t, ch[num][1], l, midx, midy + 1, u, x, y); \n\tins(num, t, ch[num][2], midx + 1, r, d, midy, x, y); \n\tins(num, t, ch[num][3], midx + 1, r, midy + 1, u, x, y); \n}\nvoid Push(int p, int l, int r, int d, int u, int ll, int rr, int dd, int uu) {\n\n\tif(p ==0 || rr < l ||  ll > r || uu < d || dd > u || dis[p + n] <= Dis) return;\n\tif( ll <= l && rr >= r && uu >= u && dd <= d) {dis[p + n] = Dis;q.push((node){Dis, p + n}); return;}\n\tint midx = l + r >> 1, midy = d + u >> 1;\n\tPush(ch[p][0], l, midx, d, midy, ll, rr, dd, uu); \n\tPush(ch[p][1], l, midx, midy + 1, u, ll, rr, dd, uu); \n\tPush(ch[p][2], midx + 1, r, d, midy, ll, rr, dd, uu); \n\tPush(ch[p][3], midx + 1, r, midy + 1, u, ll, rr, dd, uu); \n}\n\nint main() {\n\tn = read(), m = read(), w = read(), h = read();\n\tfor(int i = 1; i <= n; i ++) {\n\t\tint x = read(), y = read(), k = 1;\n\t\tins(0, i, k, 1, w, 1, h, x, y);\n\t} \n\tfor(int i = 1; i <= m; i ++) {\n\t\tp[i] = read(), t[i] = read(), l[i] = read(), r[i] = read(),\n\t\td[i] = read(), u[i] = read();  v[p[i]].push_back(i);\n\t}\n\tmemset(dis, 0x7f, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tdis[1] = 0;\n\tq.push((node){0, 1});\n\twhile(!q.empty()) {\n\t\tint x = q.top().s; q.pop();\n\t\tif(vis[x]) continue; vis[x] = 1;\n\t\t\tfor(int i = 0; i < v[x].size(); i ++) {\n\t\t\t\tint V = v[x][i];\n\t\t\t\tDis = dis[x] + t[V];\n\t\t\t\tPush(1, 1, w, 1, h, l[V], r[V], d[V], u[V]);\n\t\t}\n\t\tfor(int i = head[x]; i; i = nexts[i]) {\n\t\t\tint V = ver[i];\n\t\t\tif(dis[V] > dis[x] + edge[i]) {\n\t\t\t\tdis[V] = dis[x] +edge[i];\n\t\t\t\tq.push((node){dis[V], V});\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 2; i <= n; i ++)\n\t\tprintf(\"%d\\n\", dis[i]);\t\n\treturn 0;\n}\n```\n\u53ef\u4ee5\u770b\u51fa\u8fd9\u6b21\u7684\u4ee3\u7801\u548c\u4e0a\u6b21\u7684\u4ee3\u7801\u5dee\u522b\u53ea\u5728\u4e8epush\u51fd\u6570\u7684\u5b9a\u4e49\uff0c \u8fd9\u4e2a\u4ee3\u7801\uff0c\u76f4\u63a5\u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u901a\u8fc7push\u51fd\u6570\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c \u5e76\u4e14\u901a\u8fc7\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u53ef\u4ee5\u6392\u9664\u5f88\u5927\u4e00\u90e8\u5206\u533a\u95f4\uff0c \u901a\u8fc7\u8fd9\u79cd\u795e\u5947\u7684\u64cd\u4f5c\uff0c \u4f60\u4f1a\u60ca\u5947\u7684\u53d1\u73b0\uff0c \u4f60\u7684\u7a7a\u95f4\u6bd4\u7b2c2\u79cd\u65b9\u6cd5\u4f18\u79c0\uff0c\u5e76\u4e14\u65f6\u95f4\u4e5f\u8981\u4f18\u79c0\uff0c \u56e0\u4e3a\u6392\u9664\u4e86\u5f88\u591a\u65e0\u7528\u7684\u4e0b\u4f20\u64cd\u4f5c\uff0c \u7136\u540e\u4f60\u5c31\u53ef\u4ee5ac\u6b64\u9898\u4e86\n\n\u672c\u4ee3\u7801\u5728\u4e0d\u5f00o2\u60c5\u51b5\u4e0b\u65f6\u95f4\u4e3a2.82s\uff0c\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u6b64\u9898\n\n\u5982\u679c\u4e0d\u4e86\u89e3\u56db\u5206\u6811\u7684\u8bdd\uff0c\u53ef\u4ee5\u53bb\u505a\u4e00\u4e0b [POI2006] TET-Tetris 3D \uff0c\u8fd9\u9053\u9898\u6709\u975e\u5e38\u597d\u7684\u56db\u5206\u6811\u8bb2\u89e3\uff0c \u4e5f\u662f\u56db\u5206\u6811\u5165\u95e8\u9898\uff01\n",
        "postTime": 1572404166,
        "uid": 122822,
        "name": "Merci",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\uff1a\n\n\u521a\u5f00\u59cb\u770b\uff0c\u4e0d\u662f\u88f8\u9898\u5417\uff1f***\u4f18\u5316\u5efa\u56fe\u968f\u4fbf\u6c34\u3002\n\n\u4f46\u662f\u7a7a\u95f4\u9650\u5236$128MB$...\n\n\u5f53\u6211\u51c6\u5907\u653e\u5f03\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u6211...\n\n\u53d1\u73b0\u6d1b\u8c37\u4e0a\u6709\u4eba\u95ee\u6211\u53ef\u4e0d\u53ef\u4ee5\u4e0d\u628a\u8fb9\u5efa\u51fa\u6765\uff1f\uff1f\uff1f\n\n~~\u542c\u541b\u4e00\u5e2d\u8bdd\u80dc\u8bfb\u5341\u5e74\u4e66~~\u6211\u8305\u585e\u987f\u5f00 ~~\uff0c\u9a6c\u4e0a\u5c31\u5207\u4e86\u6b64\u9898~~\n\n\u7136\u540e\uff0c\u8fd9\u9053\u9898\u5c31\u5199\u4e86\u6211$4$\u4e2a\u591a\u5c0f\u65f6...\n\n------------\n\n\u8fd9\u9898\u5145\u5206\u8003\u5bdf\u4e86\u5bf9 dijkstra \u7b97\u6cd5\u7684\u7406\u89e3\u3002\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u5f39\u8df3\u88c5\u7f6e\uff0c\u5c31\u662f\u628a\u8d77\u70b9\u5bf9\u8fd9\u4e2a\u5b50\u77e9\u5f62\u5185\u7684\u6240\u6709\u70b9\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u7136\u540e\u8dd1\u6700\u77ed\u8def\uff0c\u5c31 ok \u4e86\u3002\n\n\u7531\u4e8e\u6bd2\u7624\u51fa\u9898\u4eba\u5361\u7a7a\u95f4\uff0c\u6211\u4eec\u4e0d\u53ef\u4ee5\u7528\u82b1\u5f0f\u5efa\u56fe\u65b9\u5f0f\u6765\u5207\u6b64\u9898\u3002\u6240\u4ee5\u6211\u4eec\u8003\u8651**\u4e0d\u5efa\u51fa\u8fb9**\u3002\n\n~~\u7136\u540e\u6211sb\u7684\u53bb\u60f3\u4e00\u4e2alog\u7684\u5efa\u56fe\u65b9\u6cd5\u4e86\u3002~~\n\n\u5982\u679c\u4e0d\u5efa\u51fa\u8fb9\uff0c\u600e\u4e48\u8dd1\u6700\u77ed\u8def\uff1f\n\n\u53d1\u73b0 spfa ~~\u5df2\u6b7b\uff0c\u4e0d\u662f\u4e00\u4e2a\u597d\u7b97\u6cd5~~\u663e\u7136\u4e0d\u80fd\u641e\uff0c\u6211\u4eec\u53bb\u60f3 dijkstra \u3002\n\n\u6bcf\u4e00\u6b21\u627e\u5230\u6700\u77ed\u8def\u6700\u5c0f\u7684\u70b9\u589e\u5e7f\u539f\u56fe\u7684\u8fc7\u7a0b\uff0c\u7b49\u4ef7\u4e8e\u628a\u6240\u6709\u548c\u8fd9\u4e2a\u70b9\u76f8\u90bb\u7684\u70b9\u7684\u6700\u77ed\u8def\u548c \u5b83\u5230\u539f\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6+\u8fb9\u6743 \u53d6$\\min$\u3002\n\n\u4ec0\u4e48\uff1f\u53d1\u73b0\u4e86\u4ec0\u4e48\uff1f\u654f\u9510\u7684\u4f60\u60f3\u5230\u8fd9\u4e00\u6b65\u4e00\u5b9a\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5b83\u540c\u8fc7\u5f39\u8df3\u88c5\u7f6e\u5411\u5916\u8fde\u7684\u8fb9\u7684\u8fb9\u6743\u90fd\u662f\u76f8\u540c\u7684\uff0c\u800c\u4e14\u5b83\u672c\u8eab\u5230\u539f\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u4e5f\u662f\u56fa\u5b9a\u7684...\n\n\u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u6574\u4e2a\u77e9\u5f62\u91cc\u6240\u6709\u7684\u70b9\u7684\u6700\u77ed\u8def\u503c \u548c\u8fd9\u4e2a\u6570 \u53d6$\\min$ \u4e0d\u5c31\u597d\u4e86\uff1f\n\n\u7136\u540e dijkstra \u6253 vis \u6807\u8bb0\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u80fd\u88ab\u53d6\u51fa\u4e00\u6b21...\n\n\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\u4e0d\u5c31\u597d\u4e86\uff1f\n\n\u6211\u60f3\u5230\u8fd9\u91cc\u4ee5\u540e\uff0c\u9a6c\u4e0a\u5c31\u6709\u4e86\u601d\u8def\u2014\u2014\u539f\u95ee\u9898\u7b49\u4ef7\u4e8e\u4e00\u4e2a~~czx\u6700\u559c\u6b22\u7684~~\u6570\u636e\u7ed3\u6784\u9898\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u77e9\u5f62\uff0c\u4e0a\u9762\u6709$n(n \\leq 70000)$\u4e2a\u70b9\uff0c\u4e00\u5f00\u59cb\u70b9\u6743\u5747\u4e3a$\\infty$\u3002\u652f\u6301\u4ee5\u4e0b\u4e09\u4e2a\u64cd\u4f5c\uff1a\n\n- \u77e9\u5f62\u91cc\u6240\u6709\u7684\u70b9\u7684\u70b9\u6743\u548c$x$\u53d6$\\min$\u3002\n\n- \u6c42\u6240\u6709\u7684\u70b9\u7684\u70b9\u6743\u6700\u5c0f\u503c\uff08\u4ee5\u53ca\u7f16\u53f7\uff09\u3002\n\n- \u5220\u9664\u4e00\u4e2a\u70b9\u3002\n\n\u600e\u4e48\u505a\u5462\uff1f\n\n------------\n\n\u53d1\u73b0\u53ef\u4ee5\u6811\u5957\u6811\uff0c\u5f53\u7136\u6211\u4e00\u5f00\u59cb\u6ca1\u5f80\u8fd9\u60f3\uff0c\u6211\u60f3\u4e86 KD \u6811\u3002\n\n\u6211\u4eec\u7ef4\u62a4\u4e00\u4e9b\u8282\u70b9\u4fe1\u606f\uff1a\n\nflag \u8868\u793a\u8fd9\u4e2a\u70b9\u6709\u6ca1\u6709\u88ab\u5220\u9664\u3002\n\nflz \u8868\u793a\u8fd9\u4e2a\u70b9\u5b50\u6811\u6709\u591a\u5c11\u4e2a\u8282\u70b9\u88ab\u5220\u9664\u3002\n\ntag \u8868\u793a\u61d2\u6807\u8bb0\uff08\u53d6$\\min$\uff09\n\nw \u8868\u793a\u6700\u5c0f\u503c\u3002\n\nmw \u8868\u793a\u5b50\u6811\u6700\u5c0f\u503c\u3002\n\nsz \u8868\u793a\u6709\u591a\u5c11\u4e2a\u5b50\u8282\u70b9\uff08\u5305\u62ec\u81ea\u5df1\uff09\n\npushup,pushdown \u90fd\u4e0d\u7b97\u9ebb\u70e6\uff0c\u5173\u952e\u662f\u5220\u9664\u64cd\u4f5c\u600e\u4e48\u641e\uff1f\n\n\u6211\u4eec\u8ba9\u8fd9\u4e2a\u88ab\u5220\u9664\u7684\u8282\u70b9\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0$(\\text{flag})$\uff0c\u4ee5\u540e pushup \u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u88ab\u6253\u4e86\u6807\u8bb0\uff0c\u5176\u6743\u503c\u5c31\u662f$\\infty$\u3002\n\n\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u5220\u9664\u4e86\uff0c\u5176\u5b50\u6811\u4ecd\u6709\u8282\u70b9\uff0c\u90a3\u4e48\u5176$\\text{mw}$\u8868\u793a\u7684\u662f\u5176\u5b50\u6811\u5185\u90e8\u7684\u70b9\u6743\u6700\u5c0f\u503c\u3002\u82e5\u5176\u5b50\u6811\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5176$\\text{mw}$\u5c31\u662f$\\infty$\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u5224\u65ad$\\text{flz}$\u662f\u5426$=\\text{sz}$\u5373\u53ef\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662f\u6253\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u88ab\u5220\u9664\u4e86\uff0c\u5c31\u4e0d\u66f4\u65b0\u5176$w$\u3002\u5982\u679c\u8fd9\u4e2a\u70b9\u88ab\u5220\u9664\u4e86\u800c\u5176\u5b50\u6811\u4ecd\u6709\u70b9\u6ca1\u88ab\u5220\u9664\uff0c\u4e0d\u66f4\u65b0$w$\u800c\u66f4\u65b0$\\text{mw}$\u3002\u5982\u679c\u5176\u5b50\u6811\u88ab\u5220\u5149\u4e86\uff0c\u4ec0\u4e48\u90fd\u4e0d\u66f4\u65b0\u3002\u5426\u5219\u90fd\u66f4\u65b0\u3002\n\n\u6211\u8fd9\u91cc\u6ca1\u8003\u8651\u6e05\u695a\uff0c\u6240\u4ee5\u4e00\u76f4$8$\u5206...\n\n### \u5b9e\u73b0\u7ec6\u8282\n\n\u6ce8\u610f\u6211\u4eec\u8fd8\u9700\u8981\u5f97\u77e5\u8fd9\u4e2a\u70b9\u7684\u4f4d\u7f6e\u3002\u6240\u4ee5\u9700\u8981\u7528 pair \u6765\u5b58$\\text{w},\\text{mw}$\u3002\n\n\npushup:\n\n```cpp\ninline void pushup(int rt){\n    g[rt].flz=g[g[rt].l].flz+g[g[rt].r].flz+g[rt].flag;\n    if (g[rt].flag) g[rt].w.first=inf,g[rt].w.second=inf;\n    g[rt].mw=g[rt].w;\n    chkmin(g[rt].mw,min(g[g[rt].l].mw,g[g[rt].r].mw));\n}\n```\n\npushdown:\n\n```cpp\ninline void pushdown(int rt){\n    if (g[rt].tag==inf) return;\n    int ls=g[rt].l,rs=g[rt].r;\n    if (ls){\n        chkmin(g[ls].tag,g[rt].tag);\n        if (!g[ls].flag) chkmin(g[ls].w.first,g[rt].tag);\n        if (g[ls].sz!=g[ls].flz) chkmin(g[ls].mw.first,g[rt].tag);\n    }\n    if (rs){\n        chkmin(g[rs].tag,g[rt].tag);\n        if (!g[rs].flag) chkmin(g[rs].w.first,g[rt].tag);\n        if (g[rs].sz!=g[rs].flz) chkmin(g[rs].mw.first,g[rt].tag);\n    }\n    g[rt].tag=inf;\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n#ifdef Fading\n#define gc getchar\n#endif\n#ifndef Fading\ninline char gc(){\n    static char now[1<<16],*S,*T;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n}\n#endif\ninline ll read(){\n    register ll x=0,f=1;char ch=gc();\n    while (!isdigit(ch)){if(ch=='-')f=-1;ch=gc();}\n    while (isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=gc();}\n    return (f==1)?x:-x;\n}\nint n,m,T,W,dis[200001],H,D,cnt,L,root,xma,yma,xmi,ymi;//x->0,y->1\n#define P pair<int,int>\ninline P min(const P &x,const P &y){return (x>y?y:x);}\ninline void chkmin(P &x,const P &y){if (x>y) x=y;}\ninline void chkmin(int &x,const int &y){if (x>y) x=y;}\ninline void chkmax(int &x,const int &y){if (x<y) x=y;}\nstruct point{\n    int x,y,id;\n}a[100001];\ninline bool cmp(const point &a, const point &b){\n    if (D){\n        if (a.x!=b.x) return a.x<b.x;\n        return (a.y<b.y); \n    }else{\n        if (a.y!=b.y) return a.y<b.y;\n        return (a.x<b.x); \n    }\n}\nstruct KD{\n    int xmin,xmax,ymin,ymax;\n    int l,r,x,y,sz,flz;\n    P w,mw;\n    int flag,tag;\n}g[100001];\n#define mid ((lb+rb)>>1) \n#define inf (0x3f3f3f3f)\nvoid build(int &rt,int lb,int rb,int det){\n    if (lb>rb) return (void)(rt=0);\n    rt=++cnt;g[rt].tag=inf;D=det;nth_element(a+lb,a+mid,a+rb+1,cmp);\n    g[rt].x=a[mid].x;g[rt].y=a[mid].y;g[rt].w=make_pair(inf,a[mid].id);\n    if (a[mid].id==1) g[rt].w.first=0;\n    build(g[rt].l,lb,mid-1,det^1);build(g[rt].r,mid+1,rb,det^1);\n    int ls=g[rt].l,rs=g[rt].r;g[rt].xmax=g[rt].xmin=g[rt].x;\n    g[rt].ymax=g[rt].ymin=g[rt].y,g[rt].mw=g[rt].w;\n    if (ls) chkmin(g[rt].xmin,g[ls].xmin),chkmin(g[rt].ymin,g[ls].ymin);\n    if (ls) chkmax(g[rt].xmax,g[ls].xmax),chkmax(g[rt].ymax,g[ls].ymax);\n    if (rs) chkmin(g[rt].xmin,g[rs].xmin),chkmin(g[rt].ymin,g[rs].ymin);\n    if (rs) chkmax(g[rt].xmax,g[rs].xmax),chkmax(g[rt].ymax,g[rs].ymax);\n    chkmin(g[rt].mw,min(g[ls].mw,g[rs].mw));\n    g[rt].sz=1+g[ls].sz+g[rs].sz;\n}\ninline bool all_in_it(const KD &rt){\n    return (rt.xmax<=xma)&&(rt.xmin>=xmi)&&(rt.ymax<=yma)&&(rt.ymin>=ymi);\n}\ninline bool in_it(const int &x,const int &y){\n    return (x>=xmi&&x<=xma&&y>=ymi&&y<=yma);\n}\ninline bool pd(const KD &rt){\n    return !((rt.xmin>xma)||(rt.xmax<xmi)||(rt.ymin>yma)||(rt.ymax<ymi));\n}\ninline void pushdown(int rt){\n    if (g[rt].tag==inf) return;\n    int ls=g[rt].l,rs=g[rt].r;\n    if (ls){\n        chkmin(g[ls].tag,g[rt].tag);\n        if (!g[ls].flag) chkmin(g[ls].w.first,g[rt].tag);\n        if (g[ls].sz!=g[ls].flz) chkmin(g[ls].mw.first,g[rt].tag);\n    }\n    if (rs){\n        chkmin(g[rs].tag,g[rt].tag);\n        if (!g[rs].flag) chkmin(g[rs].w.first,g[rt].tag);\n        if (g[rs].sz!=g[rs].flz) chkmin(g[rs].mw.first,g[rt].tag);\n    }\n    g[rt].tag=inf;\n}\ninline void pushup(int rt){\n\tg[rt].flz=g[g[rt].l].flz+g[g[rt].r].flz+g[rt].flag;\n    if (g[rt].flag) g[rt].w.first=inf,g[rt].w.second=inf;\n    g[rt].mw=g[rt].w;\n    chkmin(g[rt].mw,min(g[g[rt].l].mw,g[g[rt].r].mw));\n}\nvoid Update(int rt,int W){\n    if (!rt||!pd(g[rt])||g[rt].tag<=W) return;\n    if (all_in_it(g[rt])){\n        chkmin(g[rt].tag,W);\n        if (!g[rt].flag) chkmin(g[rt].w.first,W);\n        if (g[rt].sz!=g[rt].flz) chkmin(g[rt].mw.first,W);\n        return;\n    }\n    if (in_it(g[rt].x,g[rt].y)) if (!g[rt].flag) chkmin(g[rt].w.first,W);\n    pushdown(rt);Update(g[rt].l,W);Update(g[rt].r,W);pushup(rt);\n }\nvoid Del(int rt,int x,int y,int det){\n    if (!rt) return;\n    pushdown(rt);D=det;\n    if (g[rt].x==x&&g[rt].y==y) return (void)(g[rt].flag=1,pushup(rt)); \n    if (det){\n        if (cmp((point){x,y},(point){g[rt].x,g[rt].y})) Del(g[rt].l,x,y,det^1);\n        else Del(g[rt].r,x,y,det^1);\n    }else{\n        if (cmp((point){x,y},(point){g[rt].x,g[rt].y})) Del(g[rt].l,x,y,det^1);\n        else Del(g[rt].r,x,y,det^1);\n    }\n    pushup(rt);\n}\ninline void update(int xmia,int ymia,int xmaa,int ymaa,int W){\n    xma=xmaa;yma=ymaa;xmi=xmia;ymi=ymia;Update(1,W);\n}\ninline void del(int x,int y){\n    Del(1,x,y,0);\n}\nstruct Jumper{\n    int t,lx,rx,ly,ry;\n};\ninline Jumper init(int t,int lx,int rx,int ly,int ry){\n    return (Jumper){t,lx,rx,ly,ry};\n}\nvector<Jumper> e[100001];\ninline bool cmpid(point a,point b){\n    return a.id<b.id;\n}\nsigned main(){\n    n=read(),m=read();W=read();H=read();\n    for (int i=1;i<=n;i++){\n        a[i].x=read(),a[i].y=read();a[i].id=i;\n    }\n    g[0].mw=g[0].w=make_pair(inf,inf);\n    build(root,1,n,0);\n    sort(a+1,a+1+n,cmpid);\n    for (int i=1;i<=m;i++){\n        int p=read(),t=read(),lx=read(),rx=read(),ly=read(),ry=read();\n        e[p].push_back(init(t,lx,rx,ly,ry));\n    }\n    for (int i=1;i<=n;i++){\n        P now=g[1].mw;\n        dis[now.second]=now.first;\n        del(a[now.second].x,a[now.second].y);\n        for (int j=0;j<(int)e[now.second].size();j++){\n            Jumper v=e[now.second][j];\n            update(v.lx,v.ly,v.rx,v.ry,now.first+v.t);\n        }\n    }\n    for (int i=2;i<=n;i++){\n        printf(\"%d\\n\",dis[i]);\n    }\n}\n```\n\n",
        "postTime": 1563462826,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "## \u505a\u6cd5\uff1a\u601d\u7ef4+\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811+\u5206\u5757\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u6700\u77ed\u8def\u505a\u6cd5\uff0c\u53d1\u73b0\u8fb9\u6570\u662f$n^2$\u7ea7\u522b\u7684\u3002\u4e00\u7ef4\u7684\u60c5\u51b5\u6211\u4eec\u80fd\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9\uff0c\u4f46\u4e8c\u7ef4\u5462\uff1f\u53cd\u6b63\u6211\u4e0d\u4f1a\u3002\n\n\u6211\u4eec\u60f3\u5230Dijkstra\u7684\u601d\u60f3\uff0c\u6bcf\u6b21\u627e\u5230dis\u6700\u5c0f\u7684\u70b9\uff0c\u5e76\u7528\u8fd9\u4e2a\u70b9\u53bb\u66f4\u65b0\u5176\u4ed6\u70b9\u3002\n\n\u6211\u4eec\u628a\u77e9\u5f62\u770b\u6210\u70b9\uff0c\u76f8\u5f53\u4e8e\u6bcf\u6b21\u627e\u51fadis\u6700\u5c0f\u7684\u77e9\u5f62\uff0c\u7136\u540e\u66f4\u65b0\u77e9\u5f62\u4e2d\u7684\u70b9\u3002\n\n\u4f46\u4e00\u6b21\u6027\u66f4\u65b0\u77e9\u5f62\u4e2d\u7684\u5168\u90e8\u70b9\u80af\u5b9a\u4e0d\u73b0\u5b9e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6bcf\u6b21\u66f4\u65b0\u77e9\u5f62\u4e2d\u7684\u4e00\u4e2a\u70b9\u5373\u53ef\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u627e\u77e9\u5f62\u4e2d\u7684\u4e00\u4e2a\u70b9\u3002\u53d1\u73b0\u6709\u70b9\u96be\u529e\u554a\u3002\n\n\u4e00\u5f00\u59cb\u6211\u60f3\u5230\u662f\u7528\u6811\u5957\u6811\u627e\u70b9\uff0c\u7ed3\u679c\u88ab\u5361\u7a7a\u95f4\uff08QAQ\uff09\uff0c\u4e24\u53ealog\u7684\u7a7a\u95f4\u521a\u597d\u88ab\u5361\uff0c\u8212\u9002\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u8003\u8651\u5982\u4f55\u4f18\u5316\u7a7a\u95f4\u3002\u5927\u5bb6\u90fd\u77e5\u9053\u65f6\u95f4\u6362\u7a7a\u95f4\u5427\uff0c\u6211\u5c31\u662f\u8fd9\u4e48\u60f3\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5206\u5757\u5957\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002\u6211\u4eec\u5bf9\u6bcfx\u8f74\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u5efa\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u7a7a\u95f4\u4e3a$nlogn$\u3002\u518d\u7ef4\u62a4$\\sqrt{n}$\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u8bb0\u5f55\u6bcf\u4e00\u5757\u7684\u60c5\u51b5\uff0c\u7a7a\u95f4\u4e3a$\\sqrt{n} \\times \\sqrt{n} \\times logn=nlogn$\u3002\n\n\u603b\u7b97\u662f\u628a\u7a7a\u95f4\u5361\u8fdb\u53bb\u4e86\u3002\n\n\u6bcf\u6b21\u67e5\u8be2\u6211\u4eec\u5148\u627e\u5230\u76ee\u6807\u7684\u5757\uff0c\u7136\u540e\u5728\u5757\u4e0a\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u5230\u4e00\u4e2a\u70b9\u5373\u53ef\u3002\n\n\u7531\u4e8e\u53ea\u8981\u627e\u4e00\u4e2a\u70b9\uff0c\u627e\u5230\u4e86\u5c31\u53ef\u4ee5return\u3002\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u5230\u6781\u9650\u7684$n \\times \\sqrt{n} \\times logn$\uff0c\u5361\u5361\u5e38\u5c31\u80fd\u8fc7\u3002\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define next Next\n#define mid (l+r)/2\nconst int N=70285;\nint n,m,size,num,cnt,top,gs,ID,w,h,x[N],y[N],LL[N],RR[N],bel[N],Ans[N],tree[N],L[(N<<6)+1000000],R[(N<<6)+1000000],sum[(N<<6)+1000000];\nmultiset<int>xu[2*N];\nint mp[(N<<6)+1000000];\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\ninline int read()\n{\n\tint ret=0,f=0;char c=gc();\n\twhile(!isdigit(c)){if(c=='-')f=1;c=gc();}\n\twhile(isdigit(c)){ret=ret*10+c-48;c=gc();}\n\tif(f)return -ret;return ret;\n}\nstruct node{\n\tint val,l,r,d,u;\n};\nvector<node>g[N];\nbool operator < (node a,node b)\n{\n\treturn a.val>b.val;\n}\npriority_queue<node>q;\nvoid update(int &rt,int l,int r,int x,int id,int val)\n{\n\tif(!rt)rt=++cnt;\n\tsum[rt]+=val;\n\tif(l==r)\n\t{\n\t\tint xjh=0;\n\t\tif(mp[rt])xjh=mp[rt];\n\t\telse{\n\t\t\txjh=++top;\n\t\t\tmp[rt]=top;\n\t\t}\n\t\tif(val==1)xu[xjh].insert(id);\n\t\telse xu[xjh].erase(id);\n\t\treturn;\n\t}\n\tif(x<=mid)update(L[rt],l,mid,x,id,val);\n\telse update(R[rt],mid+1,r,x,id,val);\n}\nvoid change(int x,int y,int id,int val)\n{\n\tupdate(tree[x],1,h,y,id,val);\n\tupdate(tree[n+bel[x]],1,h,y,id,val);\n}\nvoid Zhao(int rt,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tint xjh=mp[rt];\n\t\tID=*xu[xjh].begin();\n\t\treturn;\n\t}\n\tif(sum[L[rt]])Zhao(L[rt],l,mid);\n\telse Zhao(R[rt],mid+1,r);\n}\nvoid query(int &rt,int l,int r,int x,int y)\n{\n\tif(!rt)return;\n\tif(sum[rt]==0)return;\n\tif(ID!=-1)return;\n\tif(l==x&&r==y)\n\t{\n\t\tZhao(rt,l,r);\n\t\treturn;\n\t}\n\tif(y<=mid)query(L[rt],l,mid,x,y);\n\telse if(x>mid)query(R[rt],mid+1,r,x,y);\n\telse{\n\t\tquery(L[rt],l,mid,x,mid);\n\t\tquery(R[rt],mid+1,r,mid+1,y);\n\t}\n}\nvoid find(int l,int r,int d,int u)\n{\n\tif(bel[l]==bel[r]||bel[l]+1==bel[r])\n    {\n        for(int i=l;i<=r;i++)\n        {\n\t\t\tquery(tree[i],1,h,d,u);\n\t\t\tif(ID!=-1)return;\n        }\n        return;\n    }\n    for(int i=bel[l]+1;i<=bel[r]-1;i++)\n    {\n    \tquery(tree[n+i],1,h,d,u);\n    \tif(ID!=-1)return;\n    }\n    if(LL[bel[l]]==l)\n    {\n     \tquery(tree[n+bel[l]],1,h,d,u);\n    \tif(ID!=-1)return;   \t\n    }\n    else{\n\t    for(int i=l;i<=RR[bel[l]];i++)\n\t    {\n\t\t\tquery(tree[i],1,h,d,u);\n\t\t\tif(ID!=-1)return;\n\t    }\n\t}\n    if(RR[bel[r]]==r)\n    {\n     \tquery(tree[n+bel[r]],1,h,d,u);\n    \tif(ID!=-1)return;   \t\n    }\n    else{\n\t    for(int i=LL[bel[r]];i<=r;i++)\n\t    {\n\t\t\tquery(tree[i],1,h,d,u);\n\t\t\tif(ID!=-1)return;\n\t    }\n\t}\n}\nvoid write(int x)\n{\n\tif(x<10)\n\t{\n\t\tputchar('0'+x);\n\t\treturn;\n\t}\n\twrite(x/10);\n\tputchar('0'+x%10);\n}\nsigned main()\n{\n\tfreopen(\"jump.in\",\"r\",stdin);\n\tfreopen(\"jump.out\",\"w\",stdout);\n\tn=read();m=read();w=read();h=read();w=h=0;\n\tfor(int i=1;i<=n;i++)x[i]=read(),y[i]=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read(),l=read(),r=read(),d=read(),u=read();\n\t\tw=max(w,r);\n\t\th=max(h,u);\n\t\tg[x].push_back((node){y,l,r,d,u});\n\t}\n\tsize=sqrt(w);\n\tnum=w/size;\n    if(w%size)num++;\n    for(int i=1;i<=num;i++)LL[i]=w+1;\n    for(int i=1;i<=w;i++)\n    {\n        bel[i]=(i-1)/size+1;\n        LL[bel[i]]=min(LL[bel[i]],i);\n        RR[bel[i]]=max(RR[bel[i]],i);\n    }\n\tfor(int i=2;i<=n;i++)change(x[i],y[i],i,1);\n\tgs=1;\n\tfor(int i=0;i<g[1].size();i++)\n\t{\n\t\tnode u=g[1][i];\n\t\tq.push((node){u.val,u.l,u.r,u.d,u.u});\n\t}\n\twhile(gs<n)\n\t{\n\t\tif(q.empty())break;\n\t\tnode u=q.top();\n\t\tID=-1;\n\t\tfind(u.l,u.r,u.d,u.u);\n\t\tif(ID==-1)\n\t\t{\n\t\t\tq.pop();\n\t\t\tcontinue;\n\t\t}\n\t\tAns[ID]=u.val;\n\t\tchange(x[ID],y[ID],ID,-1);\n\t\tfor(int i=0;i<g[ID].size();i++)\n\t\t{\n\t\t\tnode x=g[ID][i];\n\t\t\tq.push((node){u.val+x.val,x.l,x.r,x.d,x.u});\n\t\t}\n\t\tgs++;\n\t}\n\tfor(int i=2;i<=n;i++)write(Ans[i]),putchar('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1563444536,
        "uid": 39484,
        "name": "\u7c73\u5947",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "## KDtree\n\n[\u535a\u5ba2\u9605\u8bfb](https://www.cnblogs.com/wljss/p/12620295.html)\n\n\u6211\u4eec\u89c2\u5bdf\u9898\u76ee\u540e\u53d1\u73b0\u8fd9\u5f88\u660e\u663e\u662f\u4e00\u9053\u6709\u5173\u6700\u77ed\u8def\u7684\u9898\uff0c\u9996\u5148\u53ef\u4ee5\u65e0\u8111\u6253\u4e00\u4e2a\u6700\u77ed\u8def\u6a21\u677f\u4e0a\u53bb\u3002\n\n36\u5206\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#define pr pair<int,int>\nusing namespace std;\nint n, m, w, h, tot;\nconst int N = 70010, M = 150000;\nint head[N], dis[N], vis[N], to[M], nt[M], val[M];\npriority_queue<pr >q;\nstruct dian {int x, y;} d[N];\nstruct tiao {int p, t, l, r, d, u;} t[M];\ninline int read()\n{\n\tint res = 0; char ch = getchar(); bool XX = false;\n\tfor (; !isdigit(ch); ch = getchar())(ch == '-') && (XX = true);\n\tfor (; isdigit(ch); ch = getchar())res = (res << 3) + (res << 1) + (ch ^ 48);\n\treturn XX ? -res : res;\n}\nvoid add(int f, int t, int d)\n{\n\tto[++tot] = t; val[tot] = d; nt[tot] = head[f]; head[f] = tot;\n}\nvoid DIJ()\n{\n\tint x;\n\tmemset(dis, 0x3f, sizeof(dis));\n\tq.push(pr(0, 1)); dis[1] = 0;\n\twhile (!q.empty())\n\t{\n\t\tx = q.top().second; q.pop();\n\t\tif (vis[x])continue; vis[x] = 1;\n\t\tfor (int i = head[x]; i; i = nt[i])\n\t\t\tif (dis[to[i]] > dis[x] + val[i])\n\t\t\t{\n\t\t\t\tdis[to[i]] = dis[x] + val[i];\n\t\t\t\tq.push(pr(-dis[to[i]], to[i]));\n\t\t\t}\n\t}\n}\nint main()\n{\n\tcin >> n >> m >> w >> h;\n\tfor (int i = 1; i <= n; ++i)d[i].x = read(), d[i].y = read();\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tt[i].p = read(), t[i].t = read(), t[i].l = read(), t[i].r = read(), t[i].d = read(), t[i].u = read();\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t\tif (j != t[i].p && t[i].l <= d[j].x && d[j].x <= t[i].r && t[i].d <= d[j].y && d[j].y <= t[i].u)add(t[i].p, j, t[i].t);\n\t}\n\tDIJ();\n\tfor (int i = 2; i <= n; ++i)printf(\"%d\\n\", dis[i]);\n\treturn 0;\n}\n```\n\u601d\u8003\u5bf9\u4e8e $h=1$ \u7684\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u6c34\u8fc7\u3002\n\n\u90a3 $h\uff01=1$ \u7684\u8bdd\uff0c\u6211\u4eec\u7528\u4e8c\u7ef4\u6570\u636e\u7ed3\u6784\u4f18\u5316\u5efa\u56fe\u5c31\u884c\uff0c\u8fd9\u91cc\u6211\u7528\u7684\u662f $KDtree$\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#define lson ch[k][0]\n#define rson ch[k][1]\n#define pr pair<int,int>\nusing namespace std;\nint n, m, w, h, tot, num, root, nowk;\nconst int N = 140010, M = 3000010;\nint head[N], dis[N], vis[N], to[M], nt[M], val[M], s[N], ch[N][2], minx[N], miny[N], maxx[N], maxy[N];\npriority_queue<pr >q;\nstruct dian {int x, y, id;} d[N];\nstruct tiao {int p, t, l, r, d, u;} t[M];\ninline int read()\n{\n\tint res = 0; char ch = getchar(); bool XX = false;\n\tfor (; !isdigit(ch); ch = getchar())(ch == '-') && (XX = true);\n\tfor (; isdigit(ch); ch = getchar())res = (res << 3) + (res << 1) + (ch ^ 48);\n\treturn XX ? -res : res;\n}\nvoid add(int f, int t, int d)\n{\n\tto[++tot] = t; val[tot] = d; nt[tot] = head[f]; head[f] = tot;\n}\nvoid pushup(int k)\n{\n\tminx[k] = maxx[k] = d[k - n].x; miny[k] = maxy[k] = d[k - n].y; add(k, k - n, 0);\n\tif (lson)minx[k] = min(minx[k], minx[lson]), maxx[k] = max(maxx[k], maxx[lson]), miny[k] = min(miny[k], miny[lson]), maxy[k] = max(maxy[k], maxy[lson]), add(k, lson, 0);\n\tif (rson)minx[k] = min(minx[k], minx[rson]), maxx[k] = max(maxx[k], maxx[rson]), miny[k] = min(miny[k], miny[rson]), maxy[k] = max(maxy[k], maxy[rson]), add(k, rson, 0);\n}\nint my(int a, int b) {return nowk ? d[a].x < d[b].x : d[a].y < d[b].y;}\nvoid build(int &k, int l, int r, int d)\n{\n\tif (l > r)return;\n\tint mid = (l + r) >> 1; nowk = d;\n\tnth_element(s + l, s + mid, s + r + 1, my); k = s[mid] + n;\n\tbuild(lson, l, mid - 1, k ^ 1); build(rson, mid + 1, r, k ^ 1);\n\tpushup(k);\n}\nvoid ADD(int k, int now)\n{\n\tif (maxx[k] < t[now].l || t[now].r < minx[k] || maxy[k] < t[now].d || t[now].u < miny[k] )return;\n\tif (t[now].l <= minx[k] && maxx[k] <= t[now].r && t[now].d <= miny[k] && maxy[k] <= t[now].u) {add(t[now].p, k, t[now].t); return;}\n\tif (t[now].l <= d[k - n].x && d[k - n].x <= t[now].r && t[now].d <= d[k - n].y && d[k - n].y <= t[now].u)add(t[now].p, k - n, t[now].t);\n\tif (lson)ADD(lson, now); if (rson)ADD(rson, now);\n}\nvoid DIJ()\n{\n\tint x;\n\tmemset(dis, 0x3f, sizeof(dis));\n\tq.push(pr(0, 1)); dis[1] = 0;\n\twhile (!q.empty())\n\t{\n\t\tx = q.top().second; q.pop();\n\t\tif (vis[x])continue; vis[x] = 1;\n\t\tfor (int i = head[x]; i; i = nt[i])\n\t\t\tif (dis[to[i]] > dis[x] + val[i])\n\t\t\t{\n\t\t\t\tdis[to[i]] = dis[x] + val[i];\n\t\t\t\tq.push(pr(-dis[to[i]], to[i]));\n\t\t\t}\n\t}\n}\nint main()\n{\n\tcin >> n >> m >> w >> h;\n\tfor (int i = 1; i <= n; ++i)d[i].x = read(), d[i].y = read(), d[i].id = i, s[i] = i;\n\tbuild(root, 1, n, 0);\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t        t[i].p = read(), t[i].t = read(), t[i].l = read(), t[i].r = read(), t[i].d = read(), t[i].u = read();\n\t\tADD(root, i);\n\t}\n\tDIJ();\n\tfor (int i = 2; i <= n; ++i)printf(\"%d\\n\", dis[i]);\n\treturn 0;\n}\n```\n\u88ab\u5361\u7a7a\u95f4.jpg\u3002\u8fb9\u6570\u592a\u591a\u4e86\uff0c\u6211\u4eec\u65e0\u6cd5\u628a\u8fb9\u5168\u90fd\u5efa\u51fa\u6765\uff0c\u53c8\u56e0\u4e3a $Dij$ \u7684\u7279\u6027\uff0c\u4e00\u4e2a\u70b9\u53ea\u4f1a\u904d\u5386\u4e00\u6b21\u548c\u5b83\u76f8\u8fde\u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7528\u5230\u8fb9\u7684\u65f6\u5019\u518d\u53bb\u627e\u5c31\u884c\u3002\n\n\u6839\u636e\u5b9e\u73b060~80\u4e0d\u7b49\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#define lson ch[k][0]\n#define rson ch[k][1]\n#define pr pair<int,int>\nusing namespace std;\nint n, m, w, h, num, root, nowk, now;\nconst int N = 140010, M = 150010;\nint dis[N], vis[N], s[N], ch[N][2], minx[N], miny[N], maxx[N], maxy[N];\npriority_queue<pr >q;\nvector<int>v[N];\nstruct dian {int x, y;} d[N];\nstruct tiao {int p, t, l, r, d, u;} t[M];\ninline int read()\n{\n\tint res = 0; char ch = getchar(); bool XX = false;\n\tfor (; !isdigit(ch); ch = getchar())(ch == '-') && (XX = true);\n\tfor (; isdigit(ch); ch = getchar())res = (res << 3) + (res << 1) + (ch ^ 48);\n\treturn XX ? -res : res;\n}\ninline void pushup(int k)\n{\n\tminx[k] = maxx[k] = d[k - n].x; miny[k] = maxy[k] = d[k - n].y;\n\tif (lson)minx[k] = min(minx[k], minx[lson]), maxx[k] = max(maxx[k], maxx[lson]), miny[k] = min(miny[k], miny[lson]), maxy[k] = max(maxy[k], maxy[lson]);\n\tif (rson)minx[k] = min(minx[k], minx[rson]), maxx[k] = max(maxx[k], maxx[rson]), miny[k] = min(miny[k], miny[rson]), maxy[k] = max(maxy[k], maxy[rson]);\n}\ninline int my(int a, int b) {return nowk ? d[a].x < d[b].x : d[a].y < d[b].y;}\nvoid build(int &k, int l, int r, int d)\n{\n\tif (l > r)return;\n\tint mid = (l + r) >> 1; nowk = d;\n\tnth_element(s + l, s + mid, s + r + 1, my); k = s[mid] + n;\n\tbuild(lson, l, mid - 1, k ^ 1); build(rson, mid + 1, r, k ^ 1);\n\tpushup(k);\n}\ninline void geng(int y, int val)\n{\n\tif (dis[y] > val)dis[y] = val, q.push(pr(-dis[y], y));\n}\nvoid ADD(int k)\n{\n\tif (vis[k])return;\n\tif (maxx[k] < t[now].l || t[now].r < minx[k] || maxy[k] < t[now].d || t[now].u < miny[k] )return;\n\tif (t[now].l <= minx[k] && maxx[k] <= t[now].r && t[now].d <= miny[k] && maxy[k] <= t[now].u) {geng(k, dis[t[now].p] + t[now].t); return;}\n\tif (t[now].l <= d[k - n].x && d[k - n].x <= t[now].r && t[now].d <= d[k - n].y && d[k - n].y <= t[now].u)geng(k - n, dis[t[now].p] + t[now].t);\n\tif (lson)ADD(lson); if (rson)ADD(rson);\n}\ninline void DIJ()\n{\n\tint x;\n\tmemset(dis, 0x3f, sizeof(dis));\n\tq.push(pr(0, 1)); dis[1] = 0;\n\twhile (!q.empty())\n\t{\n\t\tx = q.top().second; q.pop();\n\t\tif (vis[x])continue; vis[x] = 1;\n\t\tif (x <= n)\n\t\t{\n\t\t\tfor (int i = 0, siz = v[x].size(); i < siz; ++i)now = v[x][i], ADD(root);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (ch[x][0])geng(ch[x][0], dis[x]);\n\t\t\tif (ch[x][1])geng(ch[x][1], dis[x]);\n\t\t\tgeng(x - n, dis[x]);\n\t\t}\n\t}\n}\nsigned main()\n{\n\tcin >> n >> m >> w >> h;\n\tfor (int i = 1; i <= n; ++i)d[i].x = read(), d[i].y = read(), s[i] = i;\n\tbuild(root, 1, n, 0);\n\tfor (int i = 1; i <= m; ++i)\n\t\tt[i].p = read(), t[i].t = read(), t[i].l = read(), t[i].r = read(), t[i].d = read(), t[i].u = read(), v[t[i].p].push_back(i);\n\tDIJ();\n\tfor (int i = 2; i <= n; ++i)printf(\"%d\\n\", dis[i]);\n\treturn 0;\n}\n```\n\u6211\u4eec\u53d1\u73b0 $Dij$ \u6bcf\u6b21\u662f $1$ .\u53d6\u51fadis\u6700\u5c0f\u7684\u70b9 $2$ .\u66f4\u65b0\u548c\u5b83\u76f8\u8fde\u7684\u70b9 $3$.\u5220\u53bb\u8be5\u70b9\u3002\n\n\u8fd9\u4e9b $KDtree$ \u672c\u8eab\u90fd\u53ef\u4ee5\u5b8c\u6210\uff0c\u76f4\u63a5\u5728 $KDtree$ \u4e0a\u7ef4\u62a4\u5c31\u884c\u4e86\u3002\n\n$shu$ \u91cc\u7684\u53d8\u91cf \n\n$p,val,id,vis$ \uff1a\u8be5\u70b9\u5bf9\u5e94\u7684\u70b9\u7684\u5750\u6807\uff0c $dis$ \uff0c\u7f16\u53f7\uff0c\u662f\u5426\u53d6\u51fa\u8fc7\n\n$l,r,mn,mx,tag$ :\u533a\u95f4\u7684\u5750\u6807\u6700\u5927/\u5c0f\u503c\uff0c $dis$ \u7684\u6700\u5927/\u5c0f\u503c\uff0c\u5bf9\u533a\u95f4\u6253\u7684\u6807\u8bb0\u3002\n\n100\u5206\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#define lson tr[k].ls\n#define rson tr[k].rs\nusing namespace std;\nint n, m, w, h, p, t, l, r, d, u, root, nowk, cnt;\nconst int N = 70010, inf = 0x3f3f3f3f;\nint s[N], dis[N];\nstruct dian {int x, y;} di[N];\nstruct bian {dian l, r; int dis;};\nstruct shu {dian p, l, r; int ls, rs, mn, mx, val, id, tag, vis;} tr[N];\nvector<bian>v[N];\ninline int read()\n{\n\tint res = 0; char ch = getchar(); bool XX = false;\n\tfor (; !isdigit(ch); ch = getchar())(ch == '-') && (XX = true);\n\tfor (; isdigit(ch); ch = getchar())res = (res << 3) + (res << 1) + (ch ^ 48);\n\treturn XX ? -res : res;\n}\nvoid pushup(int k)\n{\n\tif (tr[k].vis)tr[k].l = (dian) {inf, inf}, tr[k].r = (dian) { -inf, -inf};\n\telse tr[k].l = tr[k].r = tr[k].p;\n\tif (lson)tr[k].l.x = min(tr[k].l.x, tr[lson].l.x), tr[k].l.y = min(tr[k].l.y, tr[lson].l.y), tr[k].r.x = max(tr[k].r.x, tr[lson].r.x), tr[k].r.y = max(tr[k].r.y, tr[lson].r.y);\n\tif (rson)tr[k].l.x = min(tr[k].l.x, tr[rson].l.x), tr[k].l.y = min(tr[k].l.y, tr[rson].l.y), tr[k].r.x = max(tr[k].r.x, tr[rson].r.x), tr[k].r.y = max(tr[k].r.y, tr[rson].r.y);\n}\nvoid upd(int k)\n{\n\tif (tr[k].vis)tr[k].mn = inf, tr[k].mx = -inf;\n\telse tr[k].mn = tr[k].mx = tr[k].val;\n\tif (lson)tr[k].mn = min(tr[k].mn, tr[lson].mn), tr[k].mx = max(tr[k].mx, tr[lson].mx);\n\tif (rson)tr[k].mn = min(tr[k].mn, tr[rson].mn), tr[k].mx = max(tr[k].mx, tr[rson].mx);\n}\nint my(int a, int b)\n{\n\treturn nowk ? di[a].x < di[b].x : di[a].y < di[b].y;\n}\nvoid build(int &k, int l, int r, int now)\n{\n\tif (l > r)return; k = ++cnt; nowk = now;\n\tint mid = (l + r) >> 1;\n\tnth_element(s + l, s + mid, s + r + 1, my);\n\ttr[k].id = s[mid]; tr[k].p = di[s[mid]]; tr[k].val = tr[k].tag = inf;\n\tif (tr[k].id == 1)tr[k].val = 0;\n\tbuild(lson, l, mid - 1, now ^ 1); build(rson, mid + 1, r, now ^ 1);\n\tpushup(k); upd(k);\n}\nvoid work(int k, int v)\n{\n\tif (v < tr[k].mx && v < tr[k].tag)\n\t{\n\t\ttr[k].mx = tr[k].tag = v; tr[k].mn = min(tr[k].mn, v);\n\t\tif (!tr[k].vis)tr[k].val = min(tr[k].val, v);\n\t}\n}\nvoid pushdown(int k)\n{\n\tif (tr[k].tag == inf)return;\n\tif (lson)work(lson, tr[k].tag); if (rson)work(rson, tr[k].tag);\n\ttr[k].tag = inf;\n}\nint find(int k, int v)\n{\n\tint res;\n\tpushdown(k);\n\tif (!tr[k].vis && v == tr[k].val) {tr[k].vis = 1; pushup(k); upd(k); return k;}\n\tif (lson && tr[lson].mn == v)res = find(lson, v);\n\telse res = find(rson, v);\n\tpushup(k); upd(k);\n\treturn res;\n}\nvoid change(int k, int v, dian l, dian r)\n{\n\tpushdown(k);\n\tif (v >= tr[k].mx)return;\n\tif (r.x < tr[k].l.x || tr[k].r.x < l.x || r.y < tr[k].l.y || tr[k].r.y < l.y)return;\n\tif (l.x <= tr[k].l.x && tr[k].r.x <= r.x && l.y <= tr[k].l.y && tr[k].r.y <= r.y) {work(k, v); return;}\n\tif (!tr[k].vis && l.x <= tr[k].p.x && tr[k].p.x <= r.x && l.y <= tr[k].p.y && tr[k].p.y <= r.y)tr[k].val = min(tr[k].val, v);\n\tif (lson)change(lson, v, l, r); if (rson)change(rson, v, l, r);\n\tpushup(k); upd(k);\n}\nsigned main()\n{\n\tcin >> n >> m >> w >> h;\n\tfor (int i = 1; i <= n; ++i)di[i].x = read(), di[i].y = read(), s[i] = i;\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tp = read(), t = read(), l = read(), r = read(), d = read(), u = read();\n\t\tv[p].push_back((bian) {(dian) {l, d}, (dian) {r, u}, t});\n\t}\n\tbuild(root, 1, n, 0);\n\tfor (int i = 1, pos, x; i <= n; ++i)\n\t{\n\t\tx = tr[pos = find(root, tr[root].mn)].id; dis[x] = tr[pos].val;\n\t\tfor (int j = 0, siz = v[x].size(); j < siz; ++j)change(root, dis[x] + v[x][j].dis, v[x][j].l, v[x][j].r);\n\t}\n\tfor (int i = 2; i <= n; ++i)printf(\"%d\\n\", dis[i]);\n\treturn 0;\n}\n```",
        "postTime": 1585873307,
        "uid": 153843,
        "name": "wljss",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "## P5471- K-D tree\u4f18\u5316\u5efa\u56fe-\u5f39\u8df3\n\n> \u4f18\u5316\u5efa\u56fe\u662f\u4e00\u79cd\u601d\u60f3\u3002\n\n### \u9898\u610f\n\n\u6709$n$\u4e2a\u57ce\u5e02\u5206\u5e03\u5728\u5c0f\u9e1f\u5c9b\u4e0a\uff0c\u6709$m$\u4e2a\u5f39\u5f13\u5206\u5e03\u5728\u8fd9\u4e9b\u57ce\u5e02\u91cc\u3002\u56e0\u4e3a\u5f39\u5f13\u4f53\u79ef\u5927\uff0c\u56fa\u5b9a\u9ebb\u70e6\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5f39\u5f13\u53ea\u80fd\u628a\u5c0f\u9e1f\u5f39\u98de\u5230\u4e00\u5757\u56fa\u5b9a\u7684\u77e9\u5f62\u8303\u56f4\u5185\u7684\u57ce\u5e02\uff0c\u540c\u65f6\u5c0f\u9e1f\u4f1a\u5728\u7a7a\u4e2d\u6ede\u7559$t_i$\u7684\u65f6\u95f4\u3002\u95ea\u7535\u9ec4\u7684\u5bb6\u57281\u53f7\u57ce\u5e02\uff0c\u8ffd\u6c42\u901f\u5ea6\u7684\u5b83\u60f3\u77e5\u9053\uff0c\u82e5\u53ea\u4f7f\u7528\u5f39\u5f13\u51fa\u884c\uff0c\u5b83\u4ece\u5bb6\u5230\u5176\u4ed6\u6240\u6709\u57ce\u5e02\u7684\u6700\u77ed\u65f6\u95f4\u82b1\u8d39\u662f\u591a\u5c11\u3002\n\n~~\u62b1\u6b49\u9b54\u6539\u4e86\u9898\u9762\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u610f\u771f\u7684\u592a\u50cf\u6124\u6012\u7684\u5c0f\u9e1f\u4e86\u597d\u5417~~\n\n### \u601d\u8def\n\n\u66b4\u529b\uff1a\u679a\u4e3e\u6bcf\u4e24\u4e2a\u57ce\u5e02\u95f4\u662f\u5426\u80fd\u8f6c\u79fb\u8fdb\u884c\u5efa\u56fe\u8dd1\u6700\u77ed\u8def\u3002\n\n\u592a\u6d6a\u8d39\u4e86\uff0c\u8fd9\u4e48\u5927\u7684\u77e9\u5f62\u6709\u5f88\u591a\u70b9\u80af\u5b9a\u8fde\u4e0d\u4e0a\u7684\u5440\u3002\u6839\u636e\u5957\u8def\uff0c\u6211\u4eec\u60f3\u4e2a\u6570\u636e\u7ed3\u6784\u4f18\u5316\u5efa\u56fe\u3002\n\n* \u4e8c\u7ef4\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n* \u6811\u5957\u6811\u4f18\u5316\u5efa\u56fe\n* **K-D tree\u4f18\u5316\u5efa\u56fe**\n\n~~\u524d\u4e24\u4e2a\u6211\u4e0d\u4f1a~~\n\n\u9996\u5148\u6211\u4eec\u628a\u8fd9n\u4e2a\u57ce\u5e02\u5efa\u62102-D tree\uff0c\u7136\u540e\u8dd1Dijkstra:\n\n\u82e5\u5f53\u524d\u7ed3\u70b9\u4f4d\u7f6e\u5728\u8f6c\u79fb\u7684\u8303\u56f4\u5185\uff0c\u63d2\u5165\u961f\u5217\uff0c\u9012\u5f52\u67e5\u627e\u5b50\u8282\u70b9\u5e76\u66f4\u65b0\u8986\u76d6\u8303\u56f4\u3002\n\n\u82e5\u5f39\u8df3\u7684\u8303\u56f4\u4e0e\u6811\u4e0a\u7ed3\u70b9\u8986\u76d6\u7684\u8303\u56f4\u6709\u4ea4\uff0c\u67e5\u627e\u4e4b\uff0c\u5426\u5219\u4e0d\u67e5\u627e\u3002\n\n\u5c31\u8fd9\u4e48\u7b80\u5355\u3002\u600e\u4e48\u8bf4K-D tree\u5c31\u662f\u4f18\u96c5\u7684\u66b4\u529b\u5462\u3002\n\n### \u5b9e\u73b0\n\n\u6211\u4eec\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53`node`\u5b58\u50a8\u6811\u4e0a\u8282\u70b9\u4fe1\u606f\uff0c\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53`data`\u8868\u793a\u4e00\u4e2a\u8f6c\u79fb\uff08\u8fb9\uff09\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8f6c\u79fb\uff0c\u6bcf\u6b21\u4ece\u6839\u5f00\u59cb\u67e5\u627e\uff0c\u6839\u636e\u4ee5\u4e0a\u7b56\u7565\u904d\u5386\u6574\u68f5\u6811\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(\u80fd\u8fc7)\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u8fd8\u8dd1\u4e86\u76ee\u524dluogu\u699c\u4e00\uff08\u9192\u9192\u554a\u4f60\u53ea\u662f\u56e0\u4e3a\u8bc4\u6d4b\u673a\u6700\u8fd1\u53d8\u5feb\u4e86\uff09\n\n\u628a\u67e5\u627e\u5355\u72ec\u62c9\u51fa\u6765\uff1a\n\n```cpp\ninline bool cross(node a,data b){return a.l[0]<=b.r[0] and a.r[0]>=b.l[0] and a.l[1]<=b.r[1] and a.r[1]>=b.l[1];}\nvoid solve(node& x,data& p){\n    if(!x.del and x.in(p)){//\u82e5\u8be5\u70b9\u5750\u6807\u5728\u8986\u76d6\u8303\u56f4\u5185\n        if(x.id!=1){\n            dis[x.id]=p.v;\n            for(int i=head[x.id];i;i=nxt[i]){//\u904d\u5386\u6240\u6709\u80fd\u5230\u7684\u4f4d\u7f6e\n                data u=to[i];\n                u.v+=p.v;\n                q.push(u);\n            }\n        }\n        x.del=1;//\u6839\u636edijkstra\u7684\u8d2a\u5fc3\u7b56\u7565\uff0c\u8be5\u70b9\u4e0d\u518d\u5165\u961f\n        x.clear();//\u4e3a\u4e86\u4fdd\u7559\u7ed3\u70b9\u67e5\u8be2\u7684\u4f5c\u7528\u3002\u4e0b\u9762\u4f1a\u66f4\u65b0\u8303\u56f4\n    }\n    if(x.son[0]){\n        node &now=e[x.son[0]];\n        if(cross(now,p)) solve(now,p);//\u6ce8\u610f\u8fd9\u91cc\u5224\u65ad\u7684\u662f\u77e9\u5f62\u662f\u5426\u6709\u4ea4\u800c\u975e\u57ce\u5e02\u5750\u6807\n        if(x.del) x.copy(now);\n        else x.update(now);//\u66f4\u65b0\u8303\u56f4\n    }\n    if(x.son[1]){\n        node &now=e[x.son[1]];\n        if(cross(now,p)) solve(now,p);\n        if(x.del and !x.son[0]) x.copy(now);\n        else x.update(now);//\u66f4\u65b0\u8303\u56f4\n    }\n}\n```\n\n### \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#include<cmath>\n#include<queue>\nusing namespace std;\ninline int read(){\n\tint w=0,x=0;char c=getchar();\n\twhile(!isdigit(c))w|=c=='-',c=getchar();\n\twhile(isdigit(c))x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nnamespace star\n{\n\tconst int maxn=7e4+10,maxm=15e4,INF=0x3f3f3f3f;\n\tint n,m,w,h,root,dis[maxn];\n\tstruct data{\n\t\tint v,l[2],r[2];\n\t\tinline bool operator < (const data &zp) const{return v>zp.v;}\n\t};\n\tint ecnt,head[maxm],nxt[maxm];\n\tdata to[maxm];\n\tinline void add(int a,data b){\n\t\tto[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt;\n\t}\n\tstruct node{\n\t\tint x[2],l[2],r[2],son[2],id;\n\t\tstatic int d;//\u201c\u53ea\u662f\u58f0\u660e\u6211\u8981\u7528\u8fd9\u4e2a\u53d8\u91cf\uff0c\u4f46\u662f\u5b83\u73b0\u5728\u8fd8\u4e0d\u5b58\u5728\u201d\n\t\tbool del;\n\t\tinline void clear(){\n\t\t\tfor(int i=0;i<2;i++) x[i]=0,l[i]=INF,r[i]=-INF;\n\t\t}\n\t\tinline void init(int zp){\n\t\t\tfor(int i=0;i<2;i++) x[i]=l[i]=r[i]=read();\n\t\t\tid=zp;\n\t\t}\n\t\tinline void update(const node &zp){\n\t\t\tfor(int i=0;i<2;i++) l[i]=min(l[i],zp.l[i]),r[i]=max(r[i],zp.r[i]);\n\t\t}\n\t\tinline void copy(const node &zp){\n\t\t\tfor(int i=0;i<2;i++) l[i]=zp.l[i],r[i]=zp.r[i];\n\t\t}\n\t\tinline bool operator < (const node &zp) const{return x[d]<zp.x[d];};\n\t\tinline bool in(const data &zp) const {return x[0]>=zp.l[0] and x[0]<=zp.r[0] and x[1]>=zp.l[1] and x[1]<=zp.r[1];}\n\t}e[maxn];\n\tint node::d;//\u73b0\u5728\u8fd9\u4e2a\u53d8\u91cf\u5b58\u5728\u4e86\uff0c\u5e76\u4e14\u6bcf\u4e2anode\u90fd\u4f1a\u7528\u5b83\n\tint build(int l,int r,int d){\n\t\tnode::d=d;\n\t\tint mid=l+r>>1;\n\t\tnth_element(e+l,e+mid,e+r+1);\n\t\tif(l<mid) e[mid].update(e[e[mid].son[0]=build(l,mid-1,d^1)]);\n\t\tif(r>mid) e[mid].update(e[e[mid].son[1]=build(mid+1,r,d^1)]);\n\t\treturn mid;\n\t}\n\tpriority_queue<data> q;\n\tinline bool cross(node a,data b){return a.l[0]<=b.r[0] and a.r[0]>=b.l[0] and a.l[1]<=b.r[1] and a.r[1]>=b.l[1];}\n\tvoid solve(node& x,data& p){\n\t\tif(!x.del and x.in(p)){\n\t\t\tif(x.id!=1){\n\t\t\t\tdis[x.id]=p.v;\n\t\t\t\tfor(int i=head[x.id];i;i=nxt[i]){\n\t\t\t\t\tdata u=to[i];\n\t\t\t\t\tu.v+=p.v;\n\t\t\t\t\tq.push(u);\n\t\t\t\t}\n\t\t\t}\n\t\t\tx.del=1;\n\t\t\tx.clear();\n\t\t}\n\t\tif(x.son[0]){\n\t\t\tnode &now=e[x.son[0]];\n\t\t\tif(cross(now,p)) solve(now,p);\n\t\t\tif(x.del) x.copy(now);\n\t\t\telse x.update(now);\n\t\t}\n\t\tif(x.son[1]){\n\t\t\tnode &now=e[x.son[1]];\n\t\t\tif(cross(now,p)) solve(now,p);\n\t\t\tif(x.del and !x.son[0]) x.copy(now);\n\t\t\telse x.update(now);\n\t\t}\n\t}\n\tinline void work(){\n\t\tn=read(),m=read(),w=read(),h=read();\n\t\tfor(int i=1;i<=n;i++) e[i].init(i);\n\t\troot=build(1,n,0);\n\t\tmemset(dis,INF,sizeof dis);\n\t\tdis[1]=0;\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tdata zp;\n\t\t\tint x=read();\n\t\t\tzp.v=read(),zp.l[0]=read(),zp.r[0]=read(),zp.l[1]=read(),zp.r[1]=read();\n\t\t\tadd(x,zp);\n\t\t}\n\t\tfor(int i=head[1];i;i=nxt[i]) q.push(to[i]);\n\t\twhile(!q.empty()){\n\t\t\tdata x=q.top();q.pop();\n\t\t\tsolve(e[root],x);\n\t\t}\n\t\tfor(int i=2;i<=n;i++) printf(\"%d\\n\",dis[i]);\n\t}\n}\nsigned main(){\n\tstar::work();\n\treturn 0;\n}\n```\n\nPS\uff1a\u636e\u94f6\u724c\u5b66\u59d0\u63a8\u8350\uff0c\u65b9\u5dee\u5efa\u6811\u5e38\u6570\u5927\uff0cK\u7ef4\u5faa\u73af\u5efa\u6811\u867d\u7136\u6709\u65f6\u5019\u4f1a\u88ab\u5361\u4f46\u5b9e\u9645\u53ef\u80fd\u6bd4\u524d\u8005\u4f18\u79c0\u3002\n\n~~\u4e3a\u5565\u9898\u9762\u90a3\u4e48\u559c\u6b22\u8df3\u86a4\u7528\u5c0f\u9e1f\u4eec\u4e0d\u53ef\u7231\u5417owo~~\n\n~~\u81ea\u5df1\u5403\u522b\u4eba\u56bc\u8fc7\u7684\u9992\u5934\u4e3a\u5565\u8fd8\u6562\u5199\u9898\u89e3\uff1f\u56e0\u4e3a\u89c9\u5f97\u81ea\u5df1\u7684\u9a6c\u8702\u592a\u597d\u770b\u4e86\u6240\u4ee5\u6765\u5206\u4eab\u4e00\u4e0b~~",
        "postTime": 1602724498,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "## \u6d4b\u8bd5\u70b9 $1 \\sim 13$\r\n\r\n\u8fd9\u4e9b\u6d4b\u8bd5\u70b9\u4e2d\uff0c\u66b4\u529b\u8fde\u8fb9\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\uff08\u5f53\u7136\u524d\u63d0\u662f\u4f60\u5f97\u7528\u6700\u574f\u590d\u6742\u5ea6\u53ef\u4ee5\u901a\u8fc7\u7684\u6700\u77ed\u8def\u7b97\u6cd5\uff09\u53ef\u4ee5\u63a5\u53d7\u3002\r\n\r\n\u5efa\u56fe\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\r\n\r\n- \u6d4b\u8bd5\u70b9 $1 \\sim 8$\uff1a$O(n^2)$\uff1b\r\n- \u6d4b\u8bd5\u70b9 $9 \\sim 13$\uff1a$O(n \\log n)$\u3002\r\n\r\n## \u6d4b\u8bd5\u70b9 $14 \\sim 18$\r\n\r\n\u5e73\u9762\u9000\u5316\u6210\u4e86\u76f4\u7ebf\uff0c\u800c\u6211\u4eec\u8fde\u8fb9\u603b\u662f\u4ece\u67d0\u4e2a\u70b9\u8fde\u5411\u5728\u67d0\u4e2a\u533a\u95f4\u5185\u7684\u6240\u6709\u70b9\u3002\u8003\u8651\u4f7f\u7528**\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe**\u3002\r\n\r\n\u6211\u4eec\u5148\u5efa\u51fa\u7ebf\u6bb5\u6811\uff0c\u5176\u4e2d\u6811\u4e0a\u7684\u6bcf\u4e2a\u70b9\u5411\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u5404\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u5411\u5176\u5bf9\u5e94\u7684\u771f\u5b9e\u8282\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u3002\r\n\r\n\u5efa\u56fe\u7684\u65b9\u5f0f\u548c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u53ea\u9700\u5411\u7ebf\u6bb5\u6811\u4e0a\u80fd\u8986\u76d6\u5bf9\u5e94\u533a\u95f4\u7684\u70b9\u8fde\u8fb9\u5373\u53ef\u3002\u548c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u4e00\u6837\uff0c\u6211\u4eec\u4e00\u6b21\u6700\u591a\u8fde $O(\\log n)$ \u6761\u8fb9\u3002\r\n\r\n\u56e0\u6b64\u6211\u4eec\u8fde\u7684\u603b\u8fb9\u6570\u4e3a $O(n+m \\log n)$\u3002\r\n\r\n## \u6ee1\u5206\u505a\u6cd5\r\n\r\n\u73b0\u5728\u8003\u8651\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u95ee\u9898\u3002\r\n\r\n\u8003\u8651\u5728\u7ebf\u6bb5\u6811\u5957\u7ebf\u6bb5\u6811\u4e0a\u5efa\u56fe\u3002\u548c\u4e00\u7ef4\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u6211\u4eec\u5148\u5728\u5916\u5c42\u67e5\u8be2\u6ee1\u8db3 $x$ \u8303\u56f4\u7684\u70b9\uff0c\u518d\u5728\u5185\u5c42\u67e5\u8be2\u6ee1\u8db3 $y$ \u8303\u56f4\u7684\u70b9\u6765\u5efa\u56fe\u5373\u53ef\u3002\r\n\r\n\u6811\u5957\u6811\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a$O(n \\log^2 n)$\u3002\u8fde\u8fb9\u7684\u603b\u6570\u4e3a $O(m \\log^2 n)$\u3002\u56e0\u4e3a\u672c\u9898\u7a7a\u95f4\u9650\u5236\u8f83\u5c0f\uff0c\u4e0a\u9762\u7684\u505a\u6cd5\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u3002\r\n\r\n\u5982\u4f55\u4f18\u5316\u7a7a\u95f4\uff1f\r\n\r\n\u53ef\u4ee5\u5c06\u5185\u5c42\u7684\u7ebf\u6bb5\u6811\u6362\u6210 set\u3002\u4ece\u800c\u6570\u636e\u7ed3\u6784\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002\r\n\r\n\u66f4\u68d2\u7684\u662f\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4e0d\u5c06\u8fb9\u8fde\u51fa\u6765\uff0c\u4ece\u800c\u7701\u4e0b\u4e86\u5efa\u56fe\u7684\u7a7a\u95f4\u3002\r\n\r\n\u4e0d\u5efa\u56fe\u600e\u4e48\u6c42\u6700\u77ed\u8def\uff1f\u76f4\u63a5\u5229\u7528\u5df2\u6709\u7684\u5f39\u8df3\u88c5\u7f6e\u7684\u4fe1\u606f\u6765\u66f4\u65b0\u6700\u77ed\u8def\u3002\r\n\r\n\u6211\u4eec\u56de\u60f3\u4e00\u4e0b Dijkstra \u6c42\u6700\u77ed\u8def\u7684\u6027\u8d28\u3002\u6211\u4eec\u6bcf\u6b21\u4ece\u5806\u9876\u53d6\u51fa\u7684\u70b9\uff0c\u5176\u6700\u77ed\u8def\u5df2\u7ecf\u662f\u786e\u5b9a\u7684\uff0c\u4e0d\u4f1a\u518d\u66f4\u65b0\u3002\r\n\r\n\u8bbe\u4ece $1$ \u53f7\u70b9\u7ecf\u8fc7\u7b2c $i$ \u4e2a\u5f39\u8df3\u88c5\u7f6e\u7684\u6700\u77ed\u8def\u4e3a $w_i$\uff0c\u6211\u4eec\u5148\u5c06\u4ece $1$ \u5f00\u59cb\u7684\u6240\u6709\u88c5\u7f6e\u6254\u8fdb\u5806\u91cc\u3002\r\n\r\n\u4ece\u5806\u4e2d\u53d6\u51fa $w_i$ \u6700\u5c0f\u7684\u88c5\u7f6e\uff08\u6839\u636e\u4e0a\u6587\u6240\u8ff0\uff0c\u8fd9\u4e2a\u88c5\u7f6e\u7684 $w_i$ \u4e0d\u4f1a\u518d\u66f4\u65b0\uff09\uff0c\u5728\u7ebf\u6bb5\u6811\u5957 set \u91cc\u67e5\u8be2\u5f53\u524d\u88c5\u7f6e\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u5c06\u8fd9\u4e9b\u70b9\u7684\u6700\u77ed\u8def\u66f4\u65b0\u4e3a $w_i$\uff0c\u968f\u540e\u5c06\u8fd9\u4e9b\u70b9\u4ece\u6570\u636e\u7ed3\u6784\u91cc\u5220\u9664\uff08\u6839\u636e\u4e0a\u9762\u7684\u63cf\u8ff0\uff0c\u8fd9\u4e9b\u70b9\u7684\u6700\u77ed\u8def\u4e0d\u4f1a\u518d\u66f4\u65b0\uff09\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u66f4\u65b0\u7ecf\u8fc7\u5f53\u524d\u88c5\u7f6e\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u88c5\u7f6e\u7684 $w_i$ \u503c\u3002\r\n\r\n```cpp\r\n// Problem : P5471 [NOI2019]\u5f39\u8df3\r\n// Contest : Luogu\r\n// URL : https://www.luogu.com.cn/problem/P5471\r\n// Memory Limit : 125 MB\r\n// Time Limit : 2200 ms\r\n// Powered by CP Editor (https://github.com/cpeditor/cpeditor)\r\n\r\n#include <iostream>\r\n#include <vector>\r\n#include <set>\r\n#include <queue>\r\nusing namespace std;\r\nstruct point\r\n{\r\n int x,y,id;\r\n bool operator<(const point&a)const\r\n {\r\n  return y<a.y||(y==a.y&&x<a.x);\r\n }\r\n}p[70005];\r\nstruct edge\r\n{\r\n int p,t,l,r,d,u;\r\n}e[150005];\r\nstruct node\r\n{\r\n int u,dis;\r\n bool operator>(const node&a)const\r\n {\r\n  return dis>a.dis;\r\n }\r\n};\r\nvector<int> f[70005];\r\nset<point> s[300005];\r\npriority_queue<node,vector<node>,greater<node> > q;\r\nint dis[70005],vis[150005];\r\nint n,m,w,h;\r\nvoid add(int root,int l,int r,int x)\r\n{\r\n s[root].insert(p[x]);\r\n if(l==r)return;\r\n int mid=(l+r)>>1;\r\n if(p[x].x<=mid)add(root<<1,l,mid,x);\r\n else add(root<<1|1,mid+1,r,x);\r\n}\r\nvoid del(int root,int l,int r,int x)\r\n{\r\n s[root].erase(p[x]);\r\n if(l==r)return;\r\n int mid=(l+r)>>1;\r\n if(p[x].x<=mid)del(root<<1,l,mid,x);\r\n else del(root<<1|1,mid+1,r,x);\r\n}\r\nvoid modify(int root,int cl,int cr,int x,int d)\r\n{\r\n queue<int> dq;\r\n int l=e[x].l,r=e[x].r;\r\n if(cr<l||r<cl)return;\r\n if(l<=cl&&cr<=r)\r\n {\r\n  auto it=s[root].lower_bound((point){0,e[x].d,0});\r\n  //\u5728\u7ebf\u6bb5\u6811\u5957 set \u91cc\u627e\u6bcf\u4e2a\u88c5\u7f6e\u80fd\u5230\u8fbe\u7684\u70b9\r\n  for(;it!=s[root].end()&&it->y<=e[x].u;it++)\r\n  {\r\n   int u=it->id;\r\n   dis[u]=d;//\u66f4\u65b0\u8fd9\u4e9b\u70b9\u7684\u6700\u77ed\u8def\r\n   dq.push(u);\r\n   for(auto v:f[u])//\u5c06\u7ecf\u8fc7\u5f53\u524d\u88c5\u7f6e\u80fd\u5230\u8fbe\u7684\u4e0b\u4e00\u4e2a\u88c5\u7f6e\u63d2\u5165\u5806\r\n    q.push({v,d+e[v].t});\r\n  }\r\n  while(!dq.empty())//\u5c06\u8fd9\u4e9b\u70b9\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\r\n  {\r\n   int u=dq.front();\r\n   dq.pop();\r\n   del(1,1,n,u);\r\n  }\r\n  return;\r\n }\r\n int mid=(cl+cr)>>1;\r\n modify(root<<1,cl,mid,x,d);\r\n modify(root<<1|1,mid+1,cr,x,d);\r\n}\r\nint main()\r\n{\r\n ios::sync_with_stdio(false);\r\n cin>>n>>m>>w>>h;\r\n for(int i=1;i<=n;i++)\r\n {\r\n  cin>>p[i].x>>p[i].y;\r\n  p[i].id=i;\r\n  add(1,1,n,i);//\u5c06\u6240\u6709\u70b9\u6254\u8fdb\u7ebf\u6bb5\u6811\u5957 set \u91cc\r\n }\r\n for(int i=1;i<=m;i++)\r\n {\r\n  cin>>e[i].p>>e[i].t>>e[i].l>>e[i].r>>e[i].d>>e[i].u;\r\n  f[e[i].p].push_back(i);//\u7ef4\u62a4\u4ece i \u53f7\u70b9\u51fa\u53d1\u7684\u88c5\u7f6e\u5217\u8868\r\n }\r\n e[0].l=e[0].r=p[1].x;\r\n e[0].d=e[0].u=p[1].y;\r\n q.push({0,0});\r\n while(!q.empty())\r\n {\r\n  int u=q.top().u,d=q.top().dis;\r\n  q.pop();\r\n  if(vis[u])continue;//\u548c Dijkstra \u4e00\u6837\uff0c\u5df2\u7ecf\u8d70\u8fc7\u7684\u88c5\u7f6e\u4e0d\u5fc5\u518d\u8d70\r\n  vis[u]=1;\r\n  modify(1,1,n,u,d);\r\n }\r\n for(int i=2;i<=n;i++)\r\n  cout<<dis[i]<<endl;\r\n return 0;\r\n}\r\n```",
        "postTime": 1590931453,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "\u5e94\u8be5\u662f\u9996\u7bc7\u5206\u5757\u9898\u89e3\u3002\n\n-------\n\n\u9996\u5148\u8fd9\u9053\u9898\u6700\u663e\u7136\u7684\u505a\u6cd5\u662f\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u4f46\u662f\u4f1a\u88ab\u5361\u7a7a\u95f4\u3002\n\n\u540c\u65f6\u8fd9\u9053\u9898\u8f83\u5bbd\u677e\u7684\u6570\u636e\u8303\u56f4\u63d0\u793a\u7740\u8981\u7528\u65f6\u95f4\u6362\u7a7a\u95f4\u3002\n\n\u6240\u4ee5\u8003\u8651\u7ebf\u6027\u7a7a\u95f4\u7684\u5206\u5757\u3002\n\n------------\n\n## \u505a\u6cd5\n\n\u9996\u5148\u4e0d\u80fd\u5c06\u56fe\u76f4\u63a5\u5efa\u4e0b\u6765\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u610f\u5473\u7740\u65f6\u95f4\u548c\u7a7a\u95f4\u7b49\u9636\uff0c\u8fd9\u662f\u4e0d\u4f18\u7684\u3002\u8003\u8651\u76f4\u63a5\u5728\u6570\u636e\u7ed3\u6784\u4e0a\u7ef4\u62a4 Dijstra \u7684\u8fc7\u7a0b\u3002\u53d1\u73b0\u9700\u8981\u7ef4\u62a4\u7684\u64cd\u4f5c\u6709\uff1a\n\n- \u5168\u5c40\u6c42 $\\min$\uff08\u53d6\u51fa\u5806\u9876\u5143\u7d20\uff09\n\n- \u5220\u9664\u5355\u70b9\uff08\u5f39\u6808\uff09\n\n- \u77e9\u9635\u53d6 $\\min$\uff08\u66f4\u65b0\u6700\u77ed\u8def\uff09\n\n\u5c06 $x$ \u8f74\u5206\u5757\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5757\u5185\u518d\u6309\u7167 $y$ \u8f74\u6392\u5e8f\uff0c\u7528 $\\sqrt n$ \u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5757\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u53d6\u6bcf\u4e2a\u5757\u7684\u7ebf\u6bb5\u6811\u7684\u6839\u53d6 $\\min$ \u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(B)$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c$O(\\log n)$ \u76f4\u63a5\u6539\u5c31\u884c\u3002\u6ce8\u610f\u4e0d\u9700\u8981\u771f\u6b63\u5220\u70b9\uff0c\u6807\u8bb0\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e09\uff0c\u6574\u5757\u5185\u662f\u533a\u95f4\u4fee\u6539\uff0c\u6563\u5757\u5185\u662f\u82e5\u5e72\u6b21\u5355\u70b9\u4fee\u6539\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(B\\log n+\\frac{n}{B}\\log n)$\u3002\n\n\u5f53 $B$ \u53d6 $\\sqrt n$ \u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\uff0c\u5373 $O(m\\sqrt n \\log n)$\u3002\n\n## \u4f18\u5316\u4e00\n\n\u8fd9\u6837\u663e\u7136\u662f\u8fc7\u4e0d\u53bb\u7684\uff0c\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u7684\u4f18\u5316\u3002\n\n- \u8003\u8651\u5bf9\u70b9\u5206\u5757\u800c\u4e0d\u662f\u5bf9 $x$ \u8f74\u5206\u5757\uff0c\u8fd9\u6837\u6bcf\u68f5\u7ebf\u6bb5\u6811\u91cc\u53ea\u6709 $\\sqrt n$ \u4e2a\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u81f3 $O(m\\sqrt n\\log \\sqrt n)$\u3002\n\n- \u7ebf\u6bb5\u6811\u91cc\u7684\u70b9\u964d\u81f3 $O(\\sqrt n)$ \u540e\uff0c\u5bf9\u4e8e\u6563\u5757\u7684\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u904d\u5386\u6574\u4e2a\u7ebf\u6bb5\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u81f3 $O(m(B+\\frac n B\\log B))$\uff0c\u5728 $B=\\frac n B \\log B$ \u65f6\u53d6\u5230\u6700\u5c0f\u503c\uff0c\u4f46\u6211\u4e0d\u4f1a\u89e3\u8fd9\u4e2a\u65b9\u7a0b\uff0c\u53cd\u6b63\u6bd4 $O(m\\sqrt n\\log \\sqrt n)$ \u4f18\u5c31\u5bf9\u4e86\u3002\n\n## \u4f18\u5316\u4e8c\n\n\u63a5\u7740\u8003\u8651\u5e38\u6570\u4e0a\u7684\u4f18\u5316\u3002\n\n- \u6563\u5757\u4fee\u6539\u904d\u5386\u6574\u9897\u7ebf\u6bb5\u6811\u65f6\uff0c\u82e5\u9012\u5f52\u533a\u95f4\u548c\u4fee\u6539\u533a\u95f4\u65e0\u4ea4\u96c6\u65f6\uff0c\u76f4\u63a5 return\u3002\n\n- \u5728\u6240\u6709\u7684\u4fee\u6539\u5185\uff0c\u82e5\u533a\u95f4\u5185\u6240\u6709\u70b9\u90fd\u6709\u5220\u9664\u6807\u8bb0\uff0c\u76f4\u63a5 return\u3002\n\n## \u4ee3\u7801\n\n\u4e0d\u4f1a\u5206\u6790\u5757\u957f\uff0c\u5728 $B$ \u53d6 $500$ \u65f6\u8dd1\u5230 $7.58s$\u3002\n\n\u4f46\u62e5\u6709\u975e\u5e38\u4f18\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define il inline\nusing namespace std;\nconst int maxqn=1010;\nconst int maxn=70010;\nconst int inf=2e9;\nconst int N=maxn<<2;\nil int read(){\n\tint x=0;\n\tchar c=getchar();\n\tfor(;!(c>='0'&&c<='9');c=getchar());\n\tfor(;c>='0'&&c<='9';c=getchar())\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\treturn x; \n}\nstruct Node{\n\tint id,x,y;\n}a[maxn];\nstruct Imf{\n\tint w,xl,xr,yl,yr;\n}; \nil bool cmp1(Node x,Node y){return x.x<y.x;}\nil bool cmp2(Node x,Node y){return x.y<y.y;}\nil void chkmin(int &x,int y){if(y<x)x=y;}\nint loc[maxn],rt[maxqn];\nint d1[N],d2[N],lz[N];\nvector<Imf>v[maxn];\nint Lid[maxn],Rid[maxn];\nint L[maxqn],R[maxqn]; \nint bl[maxn],n,m,w,h,cnt;\nint d[maxn],qn;\nvoid pushdown(int i,int t){\n\tif(d1[(i<<1)+t]<=inf) chkmin(d1[(i<<1)+t],lz[i+t]),chkmin(lz[(i<<1)+t],lz[i+t]);\n\tif(d1[(i<<1|1)+t]<=inf) chkmin(d1[(i<<1|1)+t],lz[i+t]),chkmin(lz[(i<<1|1)+t],lz[i+t]);\n}\nvoid M_all(int i,int l,int r,int xl,int xr,int yl,int yr,int k,int t){\n\tif(d1[i+t]>inf) return ;\n\tif(a[l].y>yr||a[r].y<yl) return ;\n\tif(l==r){\n\t\tif(a[l].x>=xl&&a[l].x<=xr)\n\t\t\tif(a[l].y>=yl&&a[l].y<=yr)\n\t\t\t\tif(d1[i+t]<=inf) chkmin(d1[i+t],k);\n\t\treturn ; \n\t}pushdown(i,t);\n\tint mid=l+r>>1;\n\tM_all(i<<1,l,mid,xl,xr,yl,yr,k,t);\n\tM_all(i<<1|1,mid+1,r,xl,xr,yl,yr,k,t);\n\tif(d1[(i<<1)+t]<d1[(i<<1|1)+t]) d2[i+t]=d2[(i<<1)+t];\n\telse d2[i+t]=d2[(i<<1|1)+t];\n\td1[i+t]=min(d1[(i<<1)+t],d1[(i<<1|1)+t]);\n}\nvoid M(int i,int l,int r,int L,int R,int k,int t){\n\tif(a[l].y>R||a[r].y<L) return ;\n\tif(d1[i+t]>inf) return ;\n\tif(a[l].y>=L&&a[r].y<=R){\n\t\tif(d1[i+t]<=inf) chkmin(lz[i+t],k),chkmin(d1[i+t],k);\n\t\treturn ; \n\t}int mid=l+r>>1;\n\tpushdown(i,t);\n\tif(a[mid].y>=L) M(i<<1,l,mid,L,R,k,t);\n\tif(a[mid+1].y<=R) M(i<<1|1,mid+1,r,L,R,k,t);\n\tif(d1[(i<<1)+t]<d1[(i<<1|1)+t]) d2[i+t]=d2[(i<<1)+t];\n\telse d2[i+t]=d2[(i<<1|1)+t];\n\td1[i+t]=min(d1[(i<<1)+t],d1[(i<<1|1)+t]);\n}\nvoid D(int i,int l,int r,int x,int t){\n\tif(l==x&&r==x){\n\t\td[a[l].id]=d1[i+t];\n\t\td1[i+t]=inf+1;\n\t\treturn ;\n\t}int mid=l+r>>1;\n\tpushdown(i,t);\n\tif(mid>=x) D(i<<1,l,mid,x,t);\n\telse D(i<<1|1,mid+1,r,x,t);\n\tif(d1[(i<<1)+t]<d1[(i<<1|1)+t]) d2[i+t]=d2[(i<<1)+t];\n\telse d2[i+t]=d2[(i<<1|1)+t];\n\td1[i+t]=min(d1[(i<<1)+t],d1[(i<<1|1)+t]);\n}\nil void Add(int xl,int xr,int l1,int r1,int l2,int r2,int v){\n//\tprintf(\"Add : %d,%d,%d,%d\\n\",l1,r1,l2,r2);\n\tint Bl=bl[l1],Br=bl[r1];\n\tM_all(1,L[Bl],R[Bl],xl,xr,l2,r2,v,rt[Bl]);\n\tif(Bl!=Br) M_all(1,L[Br],R[Br],xl,xr,l2,r2,v,rt[Br]);\n\tfor(int i=Bl+1,l,r;i<Br;i++)\n\t\tM(1,L[i],R[i],l2,r2,v,rt[i]);\n}  \nil void Del(int x){D(1,L[bl[loc[x]]],R[bl[loc[x]]],loc[x],rt[bl[loc[x]]]);}\nil int Q(){\n\tint Mn=inf,id=0;\n\tfor(int i=1;i<=bl[n];i++)\n\t\tif(d1[rt[i]+1]<Mn) Mn=d1[rt[i]+1],id=d2[rt[i]+1];\n\treturn a[id].id;\n}\nvoid Dijstra(){\n\tfor(int i=1;i<=n;i++)\n\t\tif(a[i].id==1) Add(a[i].x,a[i].x,i,i,a[i].y,a[i].y,0);\n\tint cn=0,t;\n\tfor(int cas=1;cas<=n;cas++){\n\t\tt=Q();Del(t);\n//\t\tprintf(\"[%d]:%d\\n\",t,d[t]);\n\t\tfor(int i=0;i<v[t].size();i++)\n\t\t\tAdd(v[t][i].xl,v[t][i].xr,Lid[v[t][i].xl],Rid[v[t][i].xr],v[t][i].yl,v[t][i].yr,d[t]+v[t][i].w);\n\t}\n}\nvoid build(int i,int l,int r,int t){\n\tcnt=max(cnt,i+t),lz[i+t]=d1[i+t]=inf,d2[i+t]=l;\n\tif(l==r) return ;\n\tint mid=l+r>>1;\n\tbuild(i<<1,l,mid,t);\n\tbuild(i<<1|1,mid+1,r,t);\n}\nvoid init(){\n\tfor(int i=1;i<=bl[n];i++)\n\t\trt[i]=cnt,build(1,L[i],R[i],rt[i]);\n} \nint main(){\n//\tfreopen(\"a (2).in\",\"r\",stdin);\n\tn=read(),m=read();\n\tw=read(),h=read();\n\tqn=500;\n\tfor(int i=1;i<=n;i++){\n\t\ta[i].x=read(),a[i].y=read();\n\t\ta[i].id=i,bl[i]=(i-1)/qn+1;\n\t}\n\tsort(a+1,a+1+n,cmp1);\n\tfor(int i=1,j=1;i<=n;i++){\n\t\twhile(j<=n&&a[j].x<i) j++;\n\t\tLid[i]=j;\n\t}\n\tfor(int i=n,j=n;i;i--){\n\t\twhile(j&&a[j].x>i) j--;\n\t\tRid[i]=j;\n\t}\n\tfor(int i=1;i<=bl[n];i++){\n\t\tL[i]=(i-1)*qn+1,R[i]=min(i*qn,n);\n\t\tsort(a+L[i],a+R[i]+1,cmp2);\n\t}\n\tfor(int i=1;i<=n;i++) loc[a[i].id]=i;\n\tImf t;int x;\n\tfor(int i=1;i<=m;i++){\n\t\tx=read(),t.w=read();\n\t\tt.xl=read(),t.xr=read();\n\t\tt.yl=read(),t.yr=read();\n\t\tv[x].push_back(t);\t\n\t}init(),Dijstra();\n\tfor(int i=2;i<=n;i++)\n\t\tprintf(\"%d\\n\",d[i]);\n\treturn 0;\n}\n```",
        "postTime": 1676453669,
        "uid": 288716,
        "name": "lzqy_",
        "ccfLevel": 7,
        "title": "P5471 [NOI2019] \u5f39\u8df3 \u9898\u89e3"
    },
    {
        "content": "\u4eca\u5e74$NOI$\u4e24\u5929\u7684$t1$\u90fd\u662f\u6700\u77ed\u8def\u2026\u2026\n\n\u5355\u6e90\u6700\u77ed\u8def\u5e94\u8be5\u5c31\u662f$dijkstra$\u5427\u2026\u2026\n\n\u4f46\u662f\u53c8\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e2a\u9898\u5982\u679c\u628a\u6240\u6709\u5355\u5411\u8fb9\u90fd\u641e\u51fa\u6765\u662f\u4e0d\u73b0\u5b9e\u7684\uff08\u53ef\u80fd\u4f1a\u8fbe\u5230$nm$\uff09\u600e\u4e48\u529e\u5462\uff1f\n\n\u6ce8\u610f\u5230\uff0c\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\uff0c\u867d\u7136\u53ef\u4ee5\u5230\u4e00\u4e2a\u77e9\u5f62\uff0c\u4f46\u9700\u8981\u7684\u65f6\u95f4\u90fd\u662f\u4e00\u6837\u7684\u3002\u8003\u8651$dijkstra$\u7684\u8fc7\u7a0b\uff0c\u6bcf\u6b21\u4ece\u4e00\u4e2a\u70b9\u6269\u5c55\uff0c\u5c31\u53ef\u4ee5\u628a\u4e00\u4e2a\u77e9\u5f62\u653e\u5230\u4f18\u5148\u961f\u5217\u91cc\uff0c\u6bcf\u6b21\u628a\u5230\u8fbe\u65f6\u95f4\u6700\u77ed\u7684\u77e9\u5f62\u62ff\u51fa\u6765\uff0c\u628a\u8fd9\u4e2a\u77e9\u5f62\u4e2d\u6ca1\u6709\u8bbf\u95ee\u6807\u8bb0\u7684\u70b9\u5168\u90fd\u66f4\u65b0\uff0c\u7136\u540e\u5728\u628a\u8fd9\u4e9b\u70b9\u80fd\u5230\u7684\u77e9\u5f62\u653e\u5230\u4f18\u5148\u961f\u5217\u91cc\u3002\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u5373\u53ef\u3002\n\n\u7406\u8bba\u4e0a\u6765\u8bf4\u5e94\u8be5\u4e5f\u53ef\u4ee5\u628a\u70b9\u653e\u5230\u4f18\u5148\u961f\u5217\u91cc\uff0c\u6bcf\u6b21\u53d6\u51fa\u5230\u8fbe\u65f6\u95f4\u6700\u5c0f\u7684\uff0c\u8fd9\u6837\u8981\u6ce8\u610f\u6bcf\u6b21\u8981\u5148\u66f4\u65b0\u82b1\u8d39\u66f4\u5c11\u65f6\u95f4\u80fd\u5230\u8fbe\u7684\u77e9\u5f62\uff0c\u7136\u540e\u6807\u8bb0\u90a3\u4e9b\u70b9\uff0c\u518d\u66f4\u65b0\u82b1\u8d39\u66f4\u66f4\u5927\u65f6\u95f4\u80fd\u5230\u8fbe\u7684\u77e9\u5f62\u3002\uff08\u597d\u50cf\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u5c31\u4e0d\u5199\u4e86\u2026\u2026\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\u8981\u5b9e\u73b0\u8fd9\u6837\u7684\u4e1c\u897f\uff1a\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u77e9\u5f62\u4e2d\u6ca1\u8bbf\u95ee\u8fc7\u7684\u70b9\uff1b\u8bbf\u95ee\u4e00\u4e2a\u70b9\uff08\u5c31\u662f\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u70b9\u5220\u6389\uff09\u3002\uff08\u6ce8\u610f\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u4e00\u5b9a\u4e0d\u80fd\u628a\u6240\u6709\u7684\u70b9\u90fd\u53d6\u51fa\u6765\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e0d\u5bf9\u7684\u3002\uff09\u8fd9\u6837\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u8bbf\u95ee\u4e00\u6b21\u3002\n\n\u5173\u4e8e\u8fd9\u4e2a\u4e1c\u897f\u7684\u5b9e\u73b0\uff0c\u7528\u4e8c\u7ef4\u6570\u636e\u7ed3\u6784\u5373\u53ef\uff0c\u6211\u7528\u7684\u7ebf\u6bb5\u6811\u5957$treap$\uff0c\u4e0d\u77e5\u9053$K-D\\ Tree$\u53ef\u4e0d\u53ef\u4ee5\uff08\u56e0\u4e3a\u6211\u6ca1\u5b66\u8fc7\uff09\u3002\u6ce8\u610f\u4e0d\u8981\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u8fd9\u79cd\u7a7a\u95f4\u590d\u6742\u5ea6\u662f$O(n\\log^2n)$\u7684\uff0c\u8fd9\u6837\u7a7a\u95f4\u6839\u672c\u5f00\u4e0d\u4e0b\u3002\n\n\u7136\u540e\uff0c\u5c31\u628a\u8fd9\u9053\u9898\u89e3\u51b3\u4e86\u5462\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(m\\log m+n\\log^2n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\u3002\n\n\u4ee3\u7801\uff08\u5e38\u6570\u53ef\u80fd\u8fc7\u5927\uff1f~~\u80fd\u8fc7\u5c31\u884c~~\uff09\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=70005;\nconst int maxm=150005;\nconst int maxlogn=19;\nconst int maxnode=maxn*maxlogn;\nint n,m,w,h,he[maxn],t[maxm],L[maxm],R[maxm],D[maxm],U[maxm],ne[maxm],x[maxn],y[maxn],f[maxn];\nint rt_[maxn<<2],tot,out[maxn],cnt;\nstruct cmp { bool operator ()(int a,int b) { return t[a]>t[b]; } };\npriority_queue<int,vector<int>,cmp> que; // \u6309\u7167\u5230\u8fbe\u7684\u65f6\u95f4\u5f39\u51fa\nstruct node { int lc,rc,id,y; unsigned int pri; }p[maxnode];\nunsigned int aaa=19260817;\ninline unsigned int myrand()\n{\n    aaa^=aaa>>15;\n    aaa+=aaa<<12;\n    aaa^=aaa>>3;\n    return aaa;\n}\ninline int newnode(int y,int id) { return p[tot].lc=p[tot].rc=-1,p[tot].y=y,p[tot].id=id,p[tot].pri=myrand(),tot++; }\nvoid merge(int &rt,int l,int r)\n{\n    if(l==-1 || r==-1) { rt=l^r^-1; return; }\n    if(p[l].pri<p[r].pri) rt=l,merge(p[rt].rc,p[l].rc,r);\n    else rt=r,merge(p[rt].lc,l,p[r].lc);\n}\nvoid split(int rt,int &l,int &r,int y,int id)\n{\n    if(rt==-1) { l=r=-1; return; }\n    if(p[rt].y<y || (p[rt].y==y && p[rt].id<=id)) l=rt,split(p[rt].rc,p[l].rc,r,y,id); // \u6ce8\u610f\u6709\u53ef\u80fd\u5728\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u8282\u70b9\u4e2d\u4f1a\u6709y\u5750\u6807\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u6bd4\u8f83id\u89e3\u51b3\n    else r=rt,split(p[rt].lc,l,p[r].lc,y,id);\n}\nvoid print(int rt)\n{\n    if(rt==-1) return;\n    print(p[rt].lc),out[cnt++]=p[rt].id,print(p[rt].rc);\n}\nvoid build(int rt,int l,int r) // \u521d\u59cb\u5316\uff08\u4f3c\u4e4e\u76f4\u63a5memset-1\u4e5f\u884c\u2026\u2026\n{\n    rt_[rt]=-1;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    build(rt<<1,l,mid),build((rt<<1)|1,mid+1,r);\n}\nvoid ins(int rt,int l,int r,int x,int y,int id) // \u7ebf\u6bb5\u6811\u4e2d\u63d2\u5165\u8282\u70b9\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u5173\u4e8ex\u7684\u533a\u95f4\u5185\u7684\u6240\u6709\u70b9\n{\n    int a;\n    split(rt_[rt],rt_[rt],a,y,id);\n    merge(rt_[rt],rt_[rt],newnode(y,id));\n    merge(rt_[rt],rt_[rt],a);\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(x<=mid) ins(rt<<1,l,mid,x,y,id);\n    else ins((rt<<1)|1,mid+1,r,x,y,id);\n}\nvoid del(int rt,int l,int r,int x,int y,int id) // \u5220\u9664\uff0c\u5c31\u662f\u4f7f\u8bbf\u95ee\u8fc7\u7684\u70b9\u4e0d\u5728\u88ab\u8bbf\u95ee\n{\n    int a,b;\n    split(rt_[rt],rt_[rt],a,y,id-1);\n    split(a,a,b,y,id);\n    merge(rt_[rt],rt_[rt],b);\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(x<=mid) del(rt<<1,l,mid,x,y,id);\n    else del((rt<<1)|1,mid+1,r,x,y,id);\n}\nvoid query(int rt,int l,int r,int x,int y,int d,int u)\n{\n    if(x<=l && r<=y)\n    {\n        int a,b;\n        split(rt_[rt],rt_[rt],a,d-1,n);\n        split(a,a,b,u,n);\n        merge(rt_[rt],rt_[rt],b);\n        print(a); // \u5f3a\u884c\u628a\u6240\u6709\u6ee1\u8db3\u7684\u70b9\u5b58\u4e0b\u6765\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(x<=mid) query(rt<<1,l,mid,x,y,d,u);\n    if(mid<y) query((rt<<1)|1,mid+1,r,x,y,d,u);\n}\ninline void solve(int u) // \u628au\u80fd\u5230\u7684\u6240\u6709\u77e9\u5f62\u653e\u5230\u4f18\u5148\u961f\u5217\u4e2d\n{\n    int i;\n    for(i=he[u];i!=-1;i=ne[i])\n    {\n        t[i]+=f[u]; // \u8fd9\u91cct[i]\u5c31\u662f\u5230\u8fbe\u7684\u65f6\u95f4\n        que.push(i);\n    }\n}\nint main()\n{\n    int i,u;\n    freopen(\"jump.in\",\"r\",stdin),freopen(\"jump.out\",\"w\",stdout);\n    scanf(\"%d%d%d%d\",&n,&m,&w,&h);\n    for(i=1;i<=n;i++) he[i]=-1;\n    for(i=1;i<=n;i++) scanf(\"%d%d\",&x[i],&y[i]);\n    for(i=0;i<m;i++)\n        scanf(\"%d%d%d%d%d%d\",&u,&t[i],&L[i],&R[i],&D[i],&U[i]),ne[i]=he[u],he[u]=i;\n    build(1,1,w);\n    for(i=2,tot=0;i<=n;i++) ins(1,1,w,x[i],y[i],i);\n    for(i=2;i<=n;i++) f[i]=0x7fffffff;\n    while(!que.empty()) que.pop();\n    f[1]=0,solve(1);\n    while(!que.empty())\n    {\n        u=que.top(),que.pop();\n        cnt=0,query(1,1,n,L[u],R[u],D[u],U[u]);\n        for(i=0;i<cnt;i++) del(1,1,w,x[out[i]],y[out[i]],out[i]),f[out[i]]=t[u],solve(out[i]); // \u8bbf\u95ee\u6bcf\u4e2a\u80fd\u5230\u8fbe\u7684\u70b9\n    }\n    for(i=2;i<=n;i++) printf(\"%d\\n\",f[i]);\n    fclose(stdin),fclose(stdout);\n    return 0;\n}\n```",
        "postTime": 1563441994,
        "uid": 36998,
        "name": "ljc1301",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5471 \u3010[NOI2019]\u5f39\u8df3\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5927\u5bb6\u5c06\u6b64\u65b9\u6cd5\u63cf\u8ff0\u4e3a\u201c\u65f6\u7a7a\u4f18\u5316\u7684\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u201d\u3002\u6211\u8ba4\u4e3a\u6b63\u89e3\u5176\u5b9e\u548c\u201c\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u6570\u636e\u7ed3\u6784\u4f18\u5316\u5efa\u56fe\u201d\u5df2\u7ecf\u6ca1\u6709\u5173\u7cfb\u4e86\uff0c\u53cd\u800c\u662f\u5229\u7528\u7684\u662f dijkstra \u7684\u6027\u8d28\uff0c\u6570\u636e\u7ed3\u6784\u53ea\u662f\u8f85\u52a9\u627e\u70b9\u3002\n\n\u9996\u5148\u9898\u76ee\u63cf\u8ff0\u7ed9\u51fa\u7684\u662f\uff0c\u4e00\u4e2a\u70b9\u7684\u4e00\u7c7b\u8fb9\u8fde\u5411\u4e00\u4e2a\u77e9\u5f62\uff0c\u4e5f\u5c31\u662f\u8fde\u5411\u5f88\u591a\u70b9\u4e00\u4e2a\u76f8\u540c\u7684\u8fb9\uff0c\u5982\u679c\u76f4\u63a5\u8dd1\u6700\u77ed\u8def\u4f1a\u7206\u70b8\u3002\u8fd9\u4e2a\u56fe\u8dd1 dijkstra \u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff0c\u5c31\u662f\u5f53\u524d\u548c\u6e90\u70b9\u6700\u8fd1\u7684\u70b9\u7684\u96c6\u5408\u4e00\u5b9a\u662f\u67d0\u4e2a\u70b9\u4e00\u7c7b\u8fb9\u6240\u677e\u5f1b\u7684\u77e9\u5f62\uff0c\u8fd9\u4e2a\u5f88\u5bb9\u6613\u8bc1\u660e\u3002 \n\n\u800c dijkstra \u4e2d\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e00\u5b9a\u53ea\u88ab\u66f4\u65b0\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u6bcf\u4e2a\u77e9\u5f62\u90fd\u5f53\u505a\u4e00\u4e2a\u70b9\u5c31\u505a\u5b8c\u4e86\uff0c\u4e14\u79f0\u4e4b\u4e3a\u865a\u70b9\uff0c\u5728\u865a\u70b9\u4e0a\u76f4\u63a5\u8dd1\u6700\u77ed\u8def\uff0c\u548c\u666e\u901a\u7684 dijkstra \u4e00\u6a21\u4e00\u6837\uff0c\u56e0\u4e3a\u865a\u70b9\u91cc\u9762\u7684\u6240\u4ee5\u70b9\u5728\u6700\u77ed\u8def\u7684\u5927\u5c0f\u4e0a\u6ca1\u6709\u672c\u8d28\u533a\u522b\u3002\u73b0\u5728\u8981\u5904\u7406\u7684\u95ee\u9898\u662f\uff0c\u5f53\u6211\u4eec\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u865a\u70b9\uff0c\u600e\u4e48\u5feb\u901f\u677e\u5f1b\u6240\u6709\u548c\u8fd9\u4e2a\u865a\u70b9\u76f8\u90bb\u7684\u6240\u6709\u865a\u70b9\u3002\n\n\u9996\u5148\u6ce8\u610f\u5230\u4e00\u4e2a\u4e2a\u53d6\u51fa\u865a\u70b9\u91cc\u9762\u7684\u70b9\uff0c\u627e\u5230\u8fd9\u4e2a\u70b9\u6240\u6307\u5411\u7684\u865a\u70b9\uff0c\u518d\u628a\u865a\u70b9\u52a0\u8fdb\u6765\uff0c\u8fd9\u6837\u66b4\u529b\u641e\u662f\u4e0d\u53ef\u53d6\u7684\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\u3002\u8003\u8651\u600e\u4e48\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u8003\u8651\u5982\u679c\u5f53\u524d\u865a\u70b9\u4e2d\u7684\u70b9\u5df2\u7ecf\u5b58\u5728\u4e8e\u4e4b\u524d\u7684\u5df2\u5904\u7406\u8fc7\u7684\u865a\u70b9\u4e2d\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u5904\u7406\u5b83\u4e86\uff0c\u56e0\u4e3a\u6839\u636e dijkstra \u7684\u539f\u7406\uff0c\u6211\u4eec\u6bcf\u6b21\u627e\u7684\u90fd\u662f\u6700\u8fd1\u7684\u70b9\uff0c\u90a3\u518d\u5904\u7406\u5b83\u4e00\u5b9a\u4e0d\u4f1a\u66f4\u4f18\u3002\u6240\u4ee5\u6211\u4eec\u8981\u627e\u5230\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5feb\u901f\u627e\u5230\u5e76\u5220\u9664\u5728\u5f53\u524d\u865a\u70b9\u91cc\uff0c\u4e14\u6ca1\u6709\u5728\u4e4b\u524d\u865a\u70b9\u4e2d\u5b58\u5728\u7684\u6240\u6709\u70b9\u3002\n\n\u62ff\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6a2a\u8f74\u65b9\u5411\uff0c\u6bcf\u4e2a\u8282\u70b9\u91cc\u5957\u4e00\u4e2a `set` \u7ef4\u62a4\u6240\u6709\u70b9\uff0c\u8fd9\u6837\u6bcf\u4e2a\u865a\u70b9\u6240\u5bf9\u5e94\u7684\u6240\u6709\u70b9\u53ef\u4ee5\u5feb\u901f\u627e\u5230\uff0c\u800c\u4e14\u5220\u9664\u76f4\u63a5\u5728 `set` \u4e0a\u5220\u5c31\u597d\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define fi first\n#define se second\n#define endl '\\n'\n// #define int long long\nusing namespace std;\n\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef pair<ll,ll> pll;\ntypedef long double db;\ntypedef pair<db, db> pdd;\n\nconst int N = 700007;\n\nint n,m,w,h;\nset<pii> s[N];\n\npii a[N];\n\nvoid insert(int x, int l, int r, int id){ // set \u4e2d\u63d2\u5165\u70b9\n    s[x].insert({a[id].se,id});\n    if (l == r) return;\n    int mid = l+r>>1;\n    if (a[id].fi <= mid) insert(x*2,l,mid,id);\n    else insert(x*2+1,mid+1,r,id);\n}\n\nstruct rec{\n    int l,r,d,u;\n}b[N];\n\nvector<pii> v[N];\npriority_queue<pii> q;\n\nint dis[N],ans[N];\nbool vis[N];\nvoid erase(int x, int l, int r, int id){ // \u677e\u5f1b\u4e00\u4e2a\u865a\u70b9\n    if (l >= b[id].l && r <= b[id].r){\n        auto it = s[x].lower_bound((pii){b[id].d, 0}); // \u4e8c\u5206\u627e\u5230y\u8f74\u5bf9\u5e94\u533a\u95f4\n        while(it != s[x].end() && (*it).fi <= b[id].u){\n            for (pii y:v[(*it).se]){\n                if (vis[y.se]) continue;\n                if (dis[y.se] > dis[id]+y.fi){ // \u666e\u901a dij \u677e\u5f1b\n                    dis[y.se] = dis[id]+y.fi;\n                    q.push({-dis[y.se], y.se});\n                }\n            }\n            ans[(*it).se] = min(dis[id], ans[(*it).se]);\n            auto tmp = it;\n            it++;\n            s[x].erase(tmp); // \u5220\u70b9\n        }\n        return;\n    }\n    int mid = l+r>>1;\n    if (b[id].l <= mid) erase(x*2,l,mid,id);\n    if (b[id].r > mid) erase(x*2+1,mid+1,r,id);\n}\nsigned main(){\n    // freopen(\"a.in\",\"r\",stdin);\n    // freopen(\"a.out\",\"w\",stdout);\n    ios::sync_with_stdio(false); cin.tie(0u); cout.tie(0u);\n    cin >> n >> m >> w >> h;\n    for (int i = 1; i <= n; i++){\n        cin >> a[i].fi >> a[i].se;\n        insert(1,1,n,i);\n    }\n    for (int i = 1; i <= m; i++){\n        int p,t,l,r,d,u;\n        cin >> p >> t >> b[i].l >> b[i].r >> b[i].d >> b[i].u;\n        v[p].push_back({t,i});\n    }\n    memset(dis,0x3f3f3f3f,sizeof dis);\n    memset(ans,0x3f3f3f3f,sizeof ans);\n\n    for (pii y:v[1]){\n        q.push({-y.fi,y.se});\n        dis[y.se] = y.fi;\n    }\n\n    while (!q.empty()){\n        pii x = q.top();\n        q.pop();\n        vis[x.se] = 1;\n        erase(1,1,n,x.se);\n    }\n    for (int i = 2; i <= n; i++) cout << ans[i] << endl;\n\n    return 0;\n}        \n```\n",
        "postTime": 1679319132,
        "uid": 127682,
        "name": "lg_zhou",
        "ccfLevel": 7,
        "title": "P5471 [NOI2019] \u5f39\u8df3"
    }
]