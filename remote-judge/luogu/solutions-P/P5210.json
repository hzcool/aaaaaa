[
    {
        "content": "\u8fd9\u9898\u80fd\u9ed1\u4e86\u662f\u56e0\u4e3a\u6d1b\u8c37\u4ec5\u6709\u7684\u9898\u89e3\u90fd\u662f\u4e9b\u6ee5\u7528\u6570\u636e\u7ed3\u6784\u7684\u89e3\u6cd5\u4e48\u2026\u2026\uff08\n\n\u8003\u8651\u4e00\u68f5\u5e7f\u4e49\u7ebf\u6bb5\u6811\u7684\u5f62\u6001\uff0c\u548c\u5b9a\u4f4d\u533a\u95f4\u6240\u5f97\u7684\u7ed3\u70b9\u7684\u6027\u8d28\u3002\n\n\u5bf9\u4e8e\u5b9a\u4f4d\u533a\u95f4 $[l,r]$ \u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u8003\u8651 $[l-1,l-1]$ \u548c $[r+1,r+1]$ \u5bf9\u5e94\u7684\u7ed3\u70b9\u548c\u5b83\u4eec\u7684 LCA\uff08\u5206\u522b\u8bbe\u4e3a $L,R,U$\uff09\u3002  \n\u6ce8\u610f\u5230\u5b9a\u4f4d\u51fa\u6765\u7684\u533a\u95f4\u90fd\u662f $L$ \u5230 $U$ \u5de6\u513f\u5b50\u94fe\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5728\u94fe\u4ee5\u5916\u7684\u53f3\u513f\u5b50\u548c $R$ \u5230 $U$ \u53f3\u513f\u5b50\u94fe\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5728\u94fe\u4ee5\u5916\u7684\u5de6\u513f\u5b50\u3002  \n\u90a3\u4e48\u95ee\u9898\u4fbf\u662f\u7b97 $u$ \u4e0e\u8fd9\u4e9b\u7ed3\u70b9\u7684\u8ddd\u79bb\u548c\u3002  \n\u4e0d\u96be\u60f3\u5230\u8f6c\u5316\u4e3a\u6df1\u5ea6\u548c\u51cf\u53bb $2$ \u500d\u7684 LCA \u7684\u6df1\u5ea6\u548c\u3002\n\n\u663e\u7136\u5730\uff0c\u53ef\u4ee5\u79bb\u7ebf\u4e0b\u6765\uff0c\u66b4\u529b\u5730\u4f7f\u7528\u6570\u636e\u7ed3\u6784 $O((n+m) \\log^2 n)$ \u6216 $O((n+m)\\log n)$ \u7ef4\u62a4\uff08  \n\u5b9e\u9645\u4e0a\u6ca1\u5fc5\u8981\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7ed3\u70b9\u5177\u6709\u6bd4\u8f83\u4f18\u7f8e\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u5206\u7c7b\u8ba8\u8bba\u89e3\u51b3\u3002\n\n\u82e5 $u$ \u4e0d\u5728 $U$ \u7684\u5b50\u6811\u5185\u6216\u6070\u4e3a $U$\uff0c\u5219\u663e\u7136\u8fd9\u4e9b\u7ed3\u70b9\u4e0e $u$ \u7684 LCA \u5373\u4e3a $u$ \u4e0e $U$ \u7684 LCA\u3002  \n\u82e5 $u$ \u5728 $U$ \u7684\u5de6\u5b50\u6811\u5185\uff0c\u8bbe $u$ \u4e0e $L$ \u7684 LCA \u4e3a $x$\uff0c\u5219 $U$ \u53f3\u5b50\u6811\u5185\u4e0e $u$ \u7684 LCA \u5747\u4e3a $U$\uff1b\u5de6\u5b50\u6811\u4e2d $x$ \u4ee5\u4e0b\u7684\u7ed3\u70b9\u4e0e $u$ \u7684 LCA \u663e\u7136\u4e3a $x$\uff0c\u800c $x$ \u81f3 $U$ \u7684\u5de6\u513f\u5b50\u6bb5\u90fd\u662f $u$ \u7684\u7956\u5148\u3002  \n\u6ce8\u610f\u7279\u5224 $u$ \u5728 $x$ \u7684\u53f3\u5b50\u6811\u5185\u7684\u60c5\u51b5\uff0c\u6b64\u65f6 LCA \u5e94\u4e3a $x$ \u7684\u53f3\u513f\u5b50\u3002  \n\u82e5 $u$ \u5728 $U$ \u7684\u53f3\u5b50\u6811\u5185\uff0c\u4e0e\u524d\u4e00\u60c5\u51b5\u7c7b\u4f3c\u3002  \n\n\u7ebf\u6027\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u5230\u6839\u94fe\u4e0a\u5728\u94fe\u4ee5\u5916\u7684\u5de6 / \u53f3\u513f\u5b50\u4e2a\u6570\u548c\u6df1\u5ea6\u548c\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N = 4e5 + 3;\nconst int LG = 19;\nint n,m,tot;\nint pos[N + 5],rt;\nint ch[N + 5][2],dep[N + 5],fa[N + 5],sz[N + 5],id[N + 5];\nint f[LG + 5][N + 5];\nint cnt[N + 5][2];\nlong long sum[N + 5][2];\nint build(int l,int r)\n{\n    int p = ++tot;\n    if(l == r)\n        return pos[l] = p;\n    int mid;\n    scanf(\"%d\",&mid);\n    ch[p][0] = build(l,mid),\n    ch[p][1] = build(mid + 1,r);\n    return p;\n}\nvoid dfs1(int p)\n{\n    static int tot = 0;\n    id[p] = ++tot,sz[p] = 1;\n    for(register int i = 1;i <= LG;++i)\n        f[i][p] = f[i - 1][f[i - 1][p]];\n    for(register int i = 0;i <= 1;++i)\n        if(ch[p][i])\n            fa[ch[p][i]] = f[0][ch[p][i]] = p,\n            dep[ch[p][i]] = dep[p] + 1,\n            dfs1(ch[p][i]),\n            sz[p] += sz[ch[p][i]];\n}\nvoid dfs2(int p)\n{\n    for(register int i = 0;i <= 1;++i)\n        if(ch[p][i])\n        {\n            for(register int j = 0;j <= 1;++j)\n                cnt[ch[p][i]][j] = cnt[p][j],\n                sum[ch[p][i]][j] = sum[p][j];\n            if(ch[p][i ^ 1])\n                ++cnt[ch[p][i]][i ^ 1],\n                sum[ch[p][i]][i ^ 1] += dep[ch[p][i ^ 1]];\n            dfs2(ch[p][i]);\n        }\n}\ninline int getlca(int x,int y)\n{\n    if(dep[x] < dep[y])\n        swap(x,y);\n    for(register int i = LG;~i;--i)\n        if(dep[f[i][x]] >= dep[y])\n            x = f[i][x];\n    if(x == y)\n        return x;\n    for(register int i = LG;~i;--i)\n        if(f[i][x] ^ f[i][y])\n            x = f[i][x],y = f[i][y];\n    return fa[x];\n}\nlong long ans;\nint main()\n{\n    scanf(\"%d\",&n),build(1,n);\n    rt = ++tot,\n    ch[rt][0] = pos[0] = ++tot,ch[rt][1] = 1;\n    rt = ++tot,\n    ch[rt][0] = rt - 2,ch[rt][1] = pos[n + 1] = ++tot;\n    dep[rt] = 1,dfs1(rt),dfs2(rt);\n    scanf(\"%d\",&m);\n    for(int u,l,r,lca,x,ls,rs;m;--m)\n    {\n        scanf(\"%d%d%d\",&u,&l,&r),\n        lca = getlca(l = pos[l - 1],r = pos[r + 1]),ls = ch[lca][0],rs = ch[lca][1],\n        ans = (sum[l][1] - sum[ls][1] + sum[r][0] - sum[rs][0]) + (long long)dep[u] * (cnt[l][1] - cnt[ls][1] + cnt[r][0] - cnt[rs][0]);\n        if(id[u] <= id[lca] || id[u] >= id[lca] + sz[lca])\n            x = getlca(u,lca),\n            ans -= 2LL * dep[x] * (cnt[l][1] - cnt[ls][1] + cnt[r][0] - cnt[rs][0]);\n        else if(id[u] >= id[ls] && id[u] < id[ls] + sz[ls])\n            x = getlca(u,l),\n            ans -= 2LL * dep[lca] * (cnt[r][0] - cnt[rs][0]),\n            ans -= 2LL * dep[x] * (cnt[l][1] - cnt[x][1]),\n            ans -= 2LL * ((sum[x][1] - sum[ls][1]) - (cnt[x][1] - cnt[ls][1])),\n            id[u] >= id[ch[x][1]] && id[u] < id[ch[x][1]] + sz[ch[x][1]] && (ans -= 2);\n        else\n            x = getlca(u,r),\n            ans -= 2LL * dep[lca] * (cnt[l][1] - cnt[ls][1]),\n            ans -= 2LL * dep[x] * (cnt[r][0] - cnt[x][0]),\n            ans -= 2LL * ((sum[x][0] - sum[rs][0]) - (cnt[x][0] - cnt[rs][0])),\n            id[u] >= id[ch[x][0]] && id[u] < id[ch[x][0]] + sz[ch[x][0]] && (ans -= 2);\n        printf(\"%lld\\n\",ans);\n    }\n}\n```\n",
        "postTime": 1607068216,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5210 \u3010[ZJOI2017]\u7ebf\u6bb5\u6811\u3011"
    },
    {
        "content": "\u4e22\u4eba\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u6253\u4e0d\u8fc7\u6811\u5256\u5957\u6811\u72b6\u6570\u7ec4\u2026\u2026\n\n\u8fd9\u4efd[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.org/recordnew/show/16295228)\u662f$O(nlogn)$\u7684\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\n\n\u8fd9\u4efd[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.org/recordnew/show/16296205)\u662f$O(nlog^2n)$\u7684\u6811\u5256\u5957\u6811\u72b6\u6570\u7ec4\n\n\u5e38\u6570\u5dee\u522b\u7acb\u5224\u9ad8\u4e0b\u2026\u2026\n\n\u5148\u8bf4\u597d\u8fd9\u9898\u662f\u6709\u7ed3\u8bba\u7684\u4f46\u662f\u6211\u61d2\u4e86\u6240\u4ee5\u8fd9\u9898\u7684\u540e\u534a\u90e8\u5206\u6211\u76f4\u63a5\u7528\u6570\u636e\u7ed3\u6784\u786c\u4e0a\u4e86\u2026\u2026\n\n\u60f3\u77e5\u9053\u90a3\u4e2a\u795e\u5947\u7684\u7ed3\u8bba\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u5eb7\u9898\u89e3\n__________________\n\n# \u672c\u9898\u9898\u89e3\n\n\u9898\u610f\u5df2\u7ecf\u80a5\u80a0\u6e05\u695a\u4e86\uff0c\u6b64\u5904\u65e0\u9700\u8d58\u8ff0\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u9996\u5148\u9700\u8981\u7406\u89e3\u7ebf\u6bb5\u6811\u7684\"\u62c6\u5206\"\u64cd\u4f5c\u7684\u672c\u8d28\u7a76\u7adf\u662f\u4ec0\u4e48\n\n\u4e8b\u5b9e\u4e0a\u6709\u8fd9\u6837\u4e00\u4e2a\u7ed3\u8bba\uff0c\u7ebf\u6bb5\u6811\u7684\u62c6\u5206\u4ee3\u7801\u5f53\u4e2d\uff0c\u4e4b\u591a\u6709\u4e00\u6b21\u540c\u65f6\u5411\u5de6\u5411\u53f3\u9012\u5f52\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0b\u90fd\u662f\u4e0d\u65ad\u7684\u5411\u5de6\u9012\u5f52\u548c\u5411\u53f3\u9012\u5f52\n\n\u5e76\u4e14\uff0c\u540c\u65f6\u5411\u5de6\u5411\u53f3\u9012\u5f52\u7684\u90a3\u4e2a\u8282\u70b9\u5c31\u662f\u8282\u70b9$(l,l)$\u548c$(r,r)$\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684lca\uff0c\u56e0\u4e3alca\u7684\u5212\u5206\u70b9\u4e00\u5b9a\u5206\u5f00\u4e86$l$\u548c$r$\n\n\u6240\u4ee5\u6211\u4eec\u7ebf\u6bb5\u6811\u7684\u62c6\u5206\u7684\u5b9e\u8d28\u5c31\u662f\u5728lca\u5904\u5c06$(l,r)$\u5206\u6210\u4e86$(l,lca.mid)$\u548c$(lca.mid,r)$\u8fd9\u4e24\u4e2a\u533a\u95f4\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651lca\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u4f60\u4f1a\u53d1\u73b0\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5728lca\u7684\u5de6\u5b50\u6811$(lca.l,lca.mid)$\u62c6\u5206$(l,lca.mid)$\u8fd9\u4e2a\u533a\u95f4\u4ee5\u53ca\u5728lca\u7684\u53f3\u5b50\u6811$(lca.mid,lca.r)$\u5904\u62c6\u5206$(lca.mid,r)$\u8fd9\u4e2a\u533a\u95f4\n\n\u90a3\u4e48\u4f60\u4f1a\u53d1\u73b0\u76f8\u5bf9\u4e8elca\u7684\u5de6\u5b50\u6811\u6765\u8bb2\u6211\u4eec\u62c6\u5206\u7684\u662f\u4e00\u4e2a\u540e\u7f00\u3002\n\n\u76f8\u5bf9\u4e8elca\u7684\u53f3\u5b50\u6811\u6765\u8bb2\u6211\u4eec\u62c6\u5206\u7684\u533a\u95f4\u662f\u4e00\u4e2a\u524d\u7f00\n\n\u90a3\u4e48\u6211\u4eec\u5c06\u62c6\u5206\u533a\u95f4\u8f6c\u5316\u6210\u4e86\u62c6\u5206\u524d\u7f00\u548c\u540e\u7f00\u4e4b\u540e\u53c8\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u4e0b\u9762\u6211\u4eec\u6765\u7814\u7a76\u4e00\u4e0b\u62c6\u5206\u524d\u7f00\u65f6\u7684\u6027\u8d28\uff0c\u540e\u7f00\u4e0e\u4e4b\u7c7b\u4f3c\n\n\u5f53\u6211\u4eec\u62c6\u5206\u7684\u533a\u95f4\u662f\u4e00\u4e2a\u524d\u7f00\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53d1\u73b0\u62c6\u5206\u51fa\u6765\u7684\u8282\u70b9\u90fd\u662f\u5de6\u513f\u5b50\uff0c\u9664\u975e\u6211\u4eec\u62c6\u7684\u662f$(1,n)$\u8fd9\u4e2a\u524d\u7f00\uff0c\u6b64\u65f6\u6211\u4eec\u9009\u62e9\u7684\u8282\u70b9\u662f\u6839\u8282\u70b9\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4ec5\u4ec5\u4fdd\u7559\u7ebf\u6bb5\u6811\u7684\u6240\u6709\u5de6\u513f\u5b50\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u6811\n\n![](http://p0.so.qhimgs1.com/bdr/_240_/t01b3cd94b11782f024.png)\n\n\nwow\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u682a\u6811\u72b6\u6570\u7ec4\uff01\n\n~~\u4e8b\u5b9e\u4e0a\u6811\u72b6\u6570\u7ec4\u672c\u8d28\u4e0a\u5c31\u662f\u4ec5\u4ec5\u4fdd\u7559\u5de6\u513f\u5b50\u7684zkw\u7ebf\u6bb5\u6811~~\n\n\u56de\u60f3\u4e00\u4e0b\u6811\u72b6\u6570\u7ec4\u7684\u67e5\u627e\u524d\u7f00\u4ee3\u7801\n\n```cpp\n\nfor(int x=p;x;x-=x&(-x))res+=ta[x];\n\n```\n\n\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u5176\u5b9e\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u6bcf\u6b21\u5c06$x$\u8fed\u4ee3\u6210$x-lowbit(x)$\uff0c\u8fd9\u4e1c\u897f\u53ef\u4ee5\u7406\u89e3\u6210\u4e00\u4e2a\u4e0d\u65ad\u5411\u4e0a\u8df3\u7236\u4eb2\u7684\u8fc7\u7a0b\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u8282\u70b9$x$\u548c$x-lowbit(x)$\u8fde\u8fb9\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u9897\"\u524d\u7f00\u6811\",\u5176\u4e2d(1,x)\u7684\u62c6\u5206\u5c31\u662f\u70b9x\u52300\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u4e5f\u9700\u8981\u5904\u7406\u62c6\u5206\u524d\u7f00\u548c\u540e\u7f00\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5efa\u51fa\u6765\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5e7f\u4e49\u6811\u72b6\u6570\u7ec4\u4e00\u7c7b\u7684\u4e1c\u897f\uff0c\u7531\u4e8e\u73b0\u5728\u662f\u4e00\u9897\u666e\u666e\u901a\u901a\u7684\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u6ca1\u6709lowbit\u8fd9\u4e48nb\u7684\u4e1c\u897f\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u627e\u7236\u4eb2\u4e86\uff0c\u6211\u4eec\u5fc5\u987b\u624b\u52a8\u628a\u6811\u72b6\u6570\u7ec4\u5efa\u51fa\u6765\n\n\u8fd9\u91cc\u4ee5\u5efa\u524d\u7f00\u6811\u72b6\u6570\u7ec4\u4e3a\u4f8b\uff0c\u6ce8\u610f\u4e00\u4e2a\u8282\u70b9\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u7684\u7236\u4eb2\u548c\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u7236\u4eb2**\u4e0d\u540c**\n\n\u5728\u7ebf\u6bb5\u6811\u4e0adfs\uff0c\u5047\u8bbe\u6211\u4eecdfs\u5230\u4e86p\uff0c\u5e76\u4e14\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e2a\u8282\u70b9\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u7684father\u662f\u8c01\n\n\u6211\u4eec\u5148dfsp\u7684\u5de6\u513f\u5b50\uff0c\u5e76\u4e14\u5de6\u513f\u5b50\u7684father\u548cp\u7684father\u76f8\u540c\n\n\u7136\u540e\u6211\u4eecdfsp\u7684\u53f3\u513f\u5b50\uff0c\u5c06\u53f3\u513f\u5b50\u7684father\u8bbe\u6210\u5de6\u513f\u5b50\n\n\u7136\u540e\u5220\u6389\u6240\u6709\u5728\u7ebf\u6bb5\u6811\u4e0a\u662f\u53f3\u513f\u5b50\u7684\u70b9\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u9897\u5e7f\u4e49\u6811\u72b6\u6570\u7ec4\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u53ef\u4ee5\u5927\u529b\u5f52\u7eb3\u6cd5\u8bc1\u660e\u4e00\u4e0b\uff0c\u5982\u679c\u6574\u4e0d\u51fa\u6765\u8fd8\u53ef\u4ee5\u624b\u73a9\u4e00\u4e0b\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u5f53\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u62c6\u5206\u4e00\u4e2a\u524d\u7f00\u7684\u65f6\u5019\uff0c\u6211\u4eec\u62c6\u5206\u51fa\u6765\u7684\u8282\u70b9\u5728\u5e7f\u4e49\u6811\u72b6\u6570\u7ec4\u4e0a\u662f\u4e00\u6761\u76f4\u4e0a\u76f4\u4e0b\u7684\u8def\u5f84\n\n\u6240\u4ee5\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u6709\u4e24\u9897\u6811\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e00\u4e2a\u70b9\u96c6$S(u,v)$\u548c\u4e00\u4e2a\u8be2\u95ee\u70b9p\uff0c\u8be2\u95ee\n\n$$\\sum_{q \\in S(u,v)} T1.dis(p,q)$$\n\n\u800c$S(u,v)$\u6307\u7684\u662f\u7b2c\u4e8c\u9897\u6811\u4e0au\u5230v\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u6784\u6210\u7684\u96c6\u5408\uff0c\u4fdd\u8bc1u\u662fv\u7684\u7956\u5148\n\n\u90a3\u4e48\u6211\u4eec\u89e3\u51b3\u95ee\u9898\u7684\u624b\u6bb5\u975e\u5e38\u7b80\u5355\u7c97\u66b4\n\n$$\\sum_{q \\in S(u,v)} dep(p)+dep(q)-2dep(T1.lca(p,q))$$\n\n$$|S(u,v)|dep(p)+\\sum_{q \\in S(u,v)}dep(q)-2\\sum_{q \\in S(u,v)}dep(T1.lca(p,q))$$\n\n\u597d\u4e86\u63a5\u4e0b\u6765\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u5982\u4f55\u6c42\u4e00\u4e2a\u70b9\u5230\u4e00\u5806\u70b9\u7684lca\u6df1\u5ea6\u4e4b\u548c\u5462\uff1f\n\n\u7b54\u6848\u662f\u8ba9\u8fd9\u4e00\u5806\u70b9\u90fd\u505a\u4e00\u4e2a\u5230\u6839\u7684\u8def\u5f84+1\u7684\u94fe\u52a0\u64cd\u4f5c\uff0c\u6700\u540e\u6c42\u8be2\u95ee\u70b9\u5230\u6839\u8def\u5f84\u7684\u548c\u5c31\u662f\u8fd9\u4e2a\u70b9\u5230\u8fd9\u4e00\u5806\u70b9\u7684lca\u6df1\u5ea6\u4e4b\u548c\u4e86\uff0c\u6b63\u786e\u81ea\u5df1\u753b\u56fe\u73a9\u73a9\u5c31\u51fa\u6765\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u601d\u8def\u4e86\n\n\u73b0\u5728\u6211\u4eec\u5e0c\u671b\u88ab\u6267\u884c\u94fe\u52a0\u7684\u96c6\u5408\u662f$S(u,v)$\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u7136\u540e\u62c6\u6210$S(1,v)-S(1,fa(u))$\u8fd9\u4e24\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u5feb\u901f\u56de\u7b54$S(1,p)$\u8fd9\u6837\u7684\u8be2\u95ee\n\n\u5728\u7b2c\u4e8c\u9897\u6811\u4e0adfs\uff0cdfs\u5230u\u7684\u65f6\u5019\u8ba9u\u5230\u6839\u7684\u8def\u5f84\u4e0a+1\uff0cdfs\u5b8cu\u4e4b\u540e\u8ba9u\u5230\u6839\u7684\u8def\u5f84\u4e0a-1\uff0c\u5982\u6b64\u8fd9\u822c\u5904\u7406\uff0c\u6211\u4eec\u5728dfs\u5230u\u7684\u65f6\u5019\u53ea\u6709u\u5728\u7b2c\u4e8c\u9897\u8def\u5f84\u4e0a\u5230\u6839\u7684\u70b9\u5728\u7b2c\u4e00\u9897\u6811\u4e0a\u88ab\u505a\u4e86\u8def\u5f84+1\u7684\u64cd\u4f5c\uff0c\u6b64\u65f6\u6211\u4eec\u8be2\u95ee\u4e00\u4e0b\u8be2\u95ee\u70b9\u5230\u6839\u7684\u548c\u5c31\u53ef\u4ee5\u56de\u7b54$S(1,u)$\u8fd9\u6837\u7684\u8be2\u95ee\u4e86\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u5c31\u662f\u4e00\u4e2a\u8d44\u74f7\u94fe\u52a0\u548c\u94fe\u4e0a\u6c42\u548c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u8fbe\u5230$O(nlogn)$\u7684\u4f18\u79c0\u590d\u6742\u5ea6\uff0c\u7136\u9e45\u73b0\u5b9e\u662f\u8fd9\u4e1c\u897f\u592a\u4e22\u4eba\u4e86\u2026\u2026\n\n\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u6811\u5256\u5957\u6811\u72b6\u6570\u7ec4\uff0c\u5e38\u6570\u5c0f\u5e76\u4e14\u597d\u5199~\n\n\u73b0\u5728\u552f\u4e00\u7684\u95ee\u9898\u662f\u5982\u4f55\u5feb\u901f\u7684\u5c06\u4e00\u4e2a\u533a\u95f4$(l,r)$\u62c6\u6210\u6811\u72b6\u6570\u7ec4\u4e0a\u7684\u4e00\u6761\u8def\u5f84\n\n\u9996\u5148\u7531\u4e8e\u6211\u4eec\u4ec5\u4ec5\u4fdd\u7559\u4e86\u6240\u6709\u7684\u5de6\u513f\u5b50\u548c\u6839\u8282\u70b9\uff0c\u56e0\u6b64\u6240\u6709\u8282\u70b9\u7684\u53f3\u7aef\u70b9\u4e92\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53f3\u7aef\u70b9\u8bb0\u5f55\u4e00\u4e0b\u5b83\u5bf9\u5e94\u7740\u90a3\u4e2a\u8282\u70b9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u627e\u5230\u4e86\u5e95\u4e0b\u7684\u8282\u70b9\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u500d\u589e\u4e00\u4e0b\u5c31\u80fd\u627e\u5230\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u4e86\n\n\u7136\u540e\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u7ec6\u8282\u65b9\u9762\u5c31\u662f\u7279\u5224\u4e00\u4e0blca\u5c31\u662f\u62c6\u5206\u8282\u70b9\u4ee5\u53ca\u62c6\u5206\u524d\u7f00\u540e\u7f00\u7684\u65f6\u5019\u5982\u679c\u62c6\u51fa\u6765\u7684\u662flca\u5de6\u53f3\u513f\u5b50\u90a3\u4e48\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u4e0d\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\n\n\u590d\u6742\u5ea6$O(nlogn)/O(nlog^2n)$\n\n\u4e0a\u4ee3\u7801~\n\n```C\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;const int N=4*1e5+10;typedef long long ll;struct opt{int id;int u;};\ntemplate <typename T>\ninline void gm(T*& bas,int siz,T*& op){op=bas;bas+=siz;}int n;int m;ll ans[N];int dep[N];\nnamespace INPUT_SPACE{\n    const int BS=(1<<24)+5;char Buffer[BS],*HD,*TL;\n    char gc() { if(HD==TL) TL=(HD=Buffer)+fread(Buffer,1,BS,stdin);return (HD==TL)?EOF:*HD++; }\n    inline int inn()\n    {\n        int x,ch,sgn=1;while(((ch=gc())<'0'||ch>'9')&&ch!='-');\n        if(ch=='-') sgn=-1,x=0;else x=ch^'0';\n        while((ch=gc())>='0'&&ch<='9') x=(x<<1)+(x<<3)+(ch^'0');\n        return x*sgn;\n    }\n}using INPUT_SPACE::inn;\nnamespace Tree\n{\n    ll B_bas[N<<1];ll* B_t;int A_bas[N<<1];int* A_t;int id[N];\n    struct tra//\u6811\u72b6\u6570\u7ec4\u652f\u6301\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c \n    {\n    \tint* ta1;ll* ta2;int len;\n        inline void stadd(int pos,int pl)\n        {\n            for(int x=pos;x;x-=x&(-x))ta1[x]+=pl;pl*=pos;\n            for(int x=pos;x<=len;x+=x&(-x))ta2[x]+=pl;\n        }\n        inline ll sum(int pos)\n        {\n            ll res1=0;for(int x=pos+1;x<=len;x+=x&(-x))res1+=ta1[x];\n    \t\tll res2=0;for(int x=pos;x;x-=x&(-x))res2+=ta2[x];return pos*res1+res2;\n        }\n        inline void cbuild(int* q,int tot)\n        {len=tot;gm(B_t,tot+1,ta2);gm(A_t,tot+1,ta1);for(int i=1;i<=len;i++)id[q[i]]=i;}\n    }lt[N];int v[N<<1];int x[N<<1];int ct;int al[N];int siz[N];int top[N];\n    int h[N];int fa[N];int q[N];int hd;\n    inline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\n    inline int dfs(int u)\n    {\n        for(int i=al[u];i;i=x[i])\n            fa[v[i]]=u,siz[u]+=dfs(v[i]),h[u]=(siz[v[i]]>siz[h[u]])?v[i]:h[u];return ++siz[u];\n    }\n    inline void solve(int u)\n    {\n        for(int p=u;p;p=h[p])\n            for(int i=al[p];i;i=x[i])if(v[i]!=h[p])solve(v[i]);hd=0;\n        for(int p=u;p;p=h[p])q[++hd]=p,top[p]=u;lt[u].cbuild(q,hd);\n    }\n    inline void modi(int u,int pl){for(int p=u;p;p=fa[top[p]])lt[top[p]].stadd(id[p],pl);}\n    inline ll qry(int u){ll res=0;for(int p=u;p;p=fa[top[p]])res+=lt[top[p]].sum(id[p]);return res;}\n}\nnamespace Tree1//\u5e7f\u4e49\u6811\u72b6\u6570\u7ec4 \n{\n    int v[N<<1];int x[N<<1];int ct;int al[N];vector <opt> ve[N];\n    inline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\n    inline void pb(int u,opt nod){ve[u].push_back(nod);}\n    inline void dfs(int u,ll sum,int cnt)\n    {\n    \tsum+=dep[u];cnt++;Tree::modi(u,1);\n        for(vector <opt>:: iterator it=ve[u].begin();it!=ve[u].end();++it)\n        {\n            int op=(it->u<0)?-1:1;it->u*=op;\n            ans[it->id]+=op*(sum+(ll)cnt*(dep[it->u]+2)-2*Tree::qry(it->u));\n        }for(int i=al[u];i;i=x[i])dfs(v[i],sum,cnt);Tree::modi(u,-1);\n    }\n    inline void clr()\n    {for(int i=1;i<=n;i++)al[i]=0;ct=0;for(int i=1;i<=n;i++)ve[i].clear();}\n}\nnamespace SegTree\n{\n    int mid[N];int s[N][2];int fa[N][22];int pl[N];int pr[N];int sfa[N];\n    int ct;int fuc[N];int bas[N];struct qry{int u;int l;int r;int lc;}qr[N];\n    inline void ctr(int p,int l,int r)\n    {\n        for(int i=0;fa[p][i];i++)fa[p][i+1]=fa[fa[p][i]][i];\n        pl[p]=l+1;pr[p]=r;bas[r]=p;if(r-l==1)return;mid[p]=inn();\n        s[p][0]=++ct;fa[ct][0]=p;dep[ct]=dep[p]+1;ctr(ct,l,mid[p]);\n        s[p][1]=++ct;fa[ct][0]=p;dep[ct]=dep[p]+1;ctr(ct,mid[p],r);\n    }\n    inline void csuf(int p,int f,int tp)//\u5efa\u540e\u7f00\u6811 \n    {\n        if(tp==1){if(f)Tree1::add(f,p),sfa[p]=f;fuc[pl[p]]=p;}\n        if(s[p][0])csuf(s[p][0],s[p][1],0),csuf(s[p][1],f,1);\n    }\n    inline void cpre(int p,int f,int tp)//\u5efa\u524d\u7f00\u6811 \n    {\n        if(tp==0){if(f)Tree1::add(f,p),sfa[p]=f;fuc[pr[p]]=p;}\n        if(s[p][1])cpre(s[p][1],s[p][0],1),cpre(s[p][0],f,0);\n    }\n    inline int lca(int u,int v)\n    {\n        if(dep[u]<dep[v])swap(u,v);for(int d=dep[u]-dep[v],i=0;d;d>>=1,i++)if(d&1)u=fa[u][i];\n        if(u==v)return u;for(int i=19;i>=0;i--)if(fa[u][i]!=fa[v][i])u=fa[u][i],v=fa[v][i];\n        return fa[u][0];\n    }\n    inline void mainsolve()\n    {\n        n=inn();ct=1;ctr(1,0,n);m=inn();\n        for(int i=1;i<=m;i++)qr[i].u=inn(),qr[i].l=inn(),qr[i].r=inn();\n        for(int i=1;i<=ct;i++)if(s[i][0])Tree::add(i,s[i][0]),Tree::add(i,s[i][1]);\n        Tree::dfs(1);Tree::solve(1);//\u524d\u540e\u5404\u505a\u4e00\u6b21\u6811\u4e0a\u5dee\u5206 \n        for(int i=1;i<=m;i++)qr[i].lc=lca(bas[qr[i].l],bas[qr[i].r]);csuf(1,0,1);\n        for(int z=1,l,r,p;z<=m;z++)\n        {\n            l=qr[z].l;r=qr[z].r;p=qr[z].lc;if(l==pl[p]&&r==pr[p])continue;\n            if(l==pl[p]){ans[z]+=dep[qr[z].u]+dep[s[p][0]]-2*dep[lca(qr[z].u,s[p][0])];continue;}\n            Tree1::pb(fuc[l],(opt){z,qr[z].u});int t=bas[mid[p]];\n            for(int i=19;i>=0;i--)if(fa[t][i]&&l<=pl[fa[t][i]])t=fa[t][i];\n            if(sfa[t])Tree1::pb(sfa[t],(opt){z,-qr[z].u});\n        }for(int p=1;p;p=s[p][1])Tree1::dfs(p,0,0);Tree1::clr();\n        for(int i=1;i<=n;i++)sfa[i]=0;cpre(1,0,0);\n        for(int z=1,l,r,p;z<=m;z++)\n        {\n            l=qr[z].l;r=qr[z].r;p=qr[z].lc;if(l==pl[p]&&r==pr[p])continue;\n            if(r==pr[p]){ans[z]+=dep[qr[z].u]+dep[s[p][1]]-2*dep[lca(qr[z].u,s[p][1])];continue;}\n            Tree1::pb(fuc[r],(opt){z,qr[z].u});int t=bas[mid[p]+1];\n            for(int i=19;i>=0;i--)if(fa[t][i]&&pr[fa[t][i]]<=r)t=fa[t][i];\n            if(sfa[t])Tree1::pb(sfa[t],(opt){z,-qr[z].u});\n        }for(int p=1;p;p=s[p][0])Tree1::dfs(p,0,0);\n        for(int z=1,l,r,p;z<=m;z++)\n        {\n            l=qr[z].l;r=qr[z].r;p=qr[z].lc;\n                if(l==pl[p]&&r==pr[p])ans[z]=dep[qr[z].u]+dep[p]-2*dep[lca(qr[z].u,p)];\n        }for(int i=1;i<=m;i++)printf(\"%lld\\n\",ans[i]);\n    }\n}int main(){Tree::B_t=Tree::B_bas;Tree::A_t=Tree::A_bas;SegTree::mainsolve();return 0;}//\u62dc\u62dc\u7a0b\u5e8f~ \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1550199764,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5210 \u3010[ZJOI2017]\u7ebf\u6bb5\u6811\u3011"
    },
    {
        "content": "# \u300cZJOI2017\u300d\u7ebf\u6bb5\u6811\n\n\u7ed9\u4e00\u4e2a\u65e0\u8111\u66b4\u529b\u7684\u5199\u6cd5\u3002\u60f3\u6cd5\u5341\u5206\u7b80\u5355\uff0c\u5c31\u662f\u6709~~\u4ebf\u70b9\u70b9~~\u96be\u5199\u3002\n\n\u9996\u5148\u8003\u8651\u5c06\u95ee\u9898\u7279\u6b8a\u5316\u3002\n\n\u5047\u8bbe\u662f\u8ba9\u7ed9\u51fa\u82e5\u5e72\u4e2a\u70b9\uff0c\u6c42\u5176\u5230\u67d0\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\u3002\n\n\u90a3\u4e48\u7b54\u6848\u662f:\n$$\n\\sum_v dep_v+dep_u-2\\times dep_{lca}\n$$\n\u6ce8\u610f\u5230\u53ea\u8981\u5feb\u901f\u7b97\u51fa $dep_{lca}$ \u4e4b\u548c\u5373\u53ef\u3002\n\n\u8003\u8651\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e2a $v$\uff0c\u4f7f $v$ \u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u8fb9\u6743 $+1$\u3002\n\n\u663e\u7136\u6700\u540e\u5bf9 $u$ \u6c42\u51fa $u$ \u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u548c\u5c31\u662f $dep_{lca}$ \u4e4b\u548c\u3002\n\n\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u94fe\u52a0\u94fe\u548c\u95ee\u9898\u3002\u53ef\u4ee5\u7528\u6811\u5256\u89e3\u51b3\u3002\n\n\u90a3\u4e48\u518d\u8003\u8651\u5c06\u95ee\u9898\u6cdb\u5316\u3002\n\n\u5982\u679c\u8be2\u95ee\u7684 $l$ \u7aef\u70b9\u6c38\u8fdc\u662f $1$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u79bb\u7ebf\u8be2\u95ee\uff0c\u7136\u540e\u7ef4\u62a4 $S_{[1,i]}$ \u5373\u53ef\u3002\u7ef4\u62a4\u4e86 $S_{[1,i]}$ \u4e4b\u540e\u95ee\u9898\u5c31\u53d8\u6210\u4e0a\u9762\u90a3\u4e2a\u95ee\u9898\u4e86\u3002\n\n\u73b0\u5728\u95ee\u9898\u662f\u5982\u4f55\u7ef4\u62a4 $S_{[1,i]}$\u3002\n\n\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u7ed3\u8bba\u3002\n\n\u7ed3\u8bba $1$ \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $u$\uff0c\u8bbe\u5176\u7ba1\u8f96\u7684\u533a\u95f4\u4e3a $[l_u,r_u]$\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $v$ \u6ee1\u8db3 $[l_v,r_v]$ \u5305\u542b\u4e86 $[l_u,r_u]$\uff0c$v$ \u4e00\u5b9a\u662f $u$ \u7684\u7956\u5148\u3002\n\n\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u7ef4\u62a4\u4e86 $S_{[1,i]}$\u3002\n\n\u5373\u6709 $[L_{S_1},R_{S_1}]\\cup\\dots\\cup[L_{S_k},R_{S_k}]=[1,i]$\u3002\n\n\u4e14\u6808\u4e2d\u4efb\u610f\u4e24\u5143\u7d20\u6240\u7ba1\u8f96\u7684\u533a\u95f4\u4ea4\u4e3a\u7a7a\u96c6\u3002\n\n\u6240\u4ee5\u6211\u4eec\u627e\u5230\u7ba1\u8f96 $[i,i]$ \u533a\u95f4\u7684\u70b9 $u$\u3002\u7136\u540e\u4e00\u76f4\u5411\u4e0a\u722c\u5b83\u7684\u7236\u4eb2\uff0c\u76f4\u5230 $r_{fa_u}>i$ \u4e3a\u6b62\u3002\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u6ee1\u8db3\u5176\u7ba1\u8f96\u533a\u95f4\u53f3\u7aef\u70b9\u4e3a $i$\uff0c\u4e14\u533a\u95f4\u957f\u5ea6\u6700\u5927\u7684\u70b9\uff0c\u7136\u540e\u6211\u4eec\u4e00\u76f4\u5f39\u51fa\u6808\u9876\u76f4\u5230\u6ee1\u8db3\u6808\u9876\u4e0e $u$ \u7ba1\u8f96\u7684\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\u4e3a\u6b62\u3002\n\n\u5176\u6b63\u786e\u6027\u663e\u7136\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\u3002 \n\n\u7136\u540e\u518d\u5c06\u95ee\u9898\u6cdb\u5316\u3002\n\n\u73b0\u5728\u6211\u4eec\u8981\u6c42\u7684\u95ee\u9898\u4e0e\u539f\u95ee\u9898\u76f8\u540c\u3002\n\n\u5bb9\u6613\u60f3\u5230\u5229\u7528\u4e0a\u4e2a\u95ee\u9898\u7684\u51cf\u6cd5\u52a0\u4e0a\u5dee\u5206\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u4f46\u662f\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u5dee\u5206\u5c06\u6808\u4e2d\u6240\u6709\u5305\u542b\u975e\u8be2\u95ee\u533a\u95f4\u7684\u70b9\u7684\u8d21\u732e\u51cf\u53bb\u540e\uff0c\u5e76\u4e0d\u662f\u6b63\u786e\u7684\u7b54\u6848\u3002\u800c\u662f\u5c11\u4e86\u4e00\u90e8\u5206\u3002\uff08\u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u51cf\u53bb\u540e\u5269\u4e0b\u7684\u70b9\u7684\u5e76\u96c6\u521a\u597d\u662f\u8be2\u95ee\u533a\u95f4\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u7b97\u63a5\u4e0b\u6765\u7684\u4e86\uff0c\u4e5f\u5c31\u662f\u70b9\u4e0d\u4f1a\u88ab**\u62c6**\u7684\u60c5\u51b5\uff09\n\n\u5373\u6808\u4e2d\u53ef\u80fd\u6709\u4e00\u4e2a\u8282\u70b9 $p$ \u7ba1\u8f96\u7684\u533a\u95f4\u6ee1\u8db3 $l_p<l_q\\le r_p$\u3002\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u662f\u8981\u51cf\u53bb\u8fd9\u4e2a\u8282\u70b9\u7684\u8d21\u732e\u7684\uff0c\u4f46\u662f $[l_q,r_p]$ \u8fd9\u4e2a\u533a\u95f4\u7684\u8d21\u732e\u5c31\u88ab\u6211\u4eec\u5ffd\u7565\u4e86\u3002\n\n\u8003\u8651\u627e\u4e2a\u65b9\u6cd5\u52a0\u4e0a\u8fd9\u4e2a\u533a\u95f4\u7684\u8d21\u732e\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u6837\u7684\u8282\u70b9 $p$ \u53ea\u4f1a\u5b58\u5728\u4e00\u4e2a\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u70b9 $p$ \u4f1a\u88ab**\u62c6**\u6210\u82e5\u5e72\u4e2a\u70b9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u82e5\u5e72\u4e2a\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u663e\u7136\u8fd9\u82e5\u5e72\u4e2a\u70b9\u53ea\u53ef\u80fd\u5728 $p$ \u7684\u5b50\u6811\u5185\u3002\n\n\u4e0b\u9762\u7528\u4e00\u4e2a\u533a\u95f4\u6765\u8868\u793a**\u6070\u597d**\u7ba1\u8f96\u8fd9\u4e2a\u533a\u95f4\u7684\u70b9\u3002\n\n\u8003\u8651\u51e0\u4e2a\u663e\u800c\u6613\u89c1\u7684\u7ed3\u8bba\u3002\n\n\u7ed3\u8bba $2$ \u3002\n\n\u6211\u4eec\u601d\u8003\u5f53\u4ec0\u4e48\u65f6\u5019\u8282\u70b9 $u$ \u7ba1 \u8f96\u7684\u533a\u95f4\u662f\u6ee1\u8db3\u5176\u7ba1\u8f96\u7684\u533a\u95f4\u662f\u8be2\u95ee\u7684\u533a\u95f4\u7684\u5b50\u96c6\u3002\n\n\u5373\u5176**\u5b50\u6811\u4e0b\u6240\u6709\u7ba1\u8f96\u533a\u95f4\u90fd\u662f\u8be2\u95ee\u533a\u95f4\u7684\u5b50\u96c6**\u7684\u6761\u4ef6\u4e0b\uff0c\u8282\u70b9 $u$ \u7ba1\u8f96\u7684\u533a\u95f4\u662f\u8be2\u95ee\u533a\u95f4\u7684\u5b50\u96c6\u3002\n\n\uff08~~\u770b\u8d77\u6765\u597d\u50cf\u5f88\u6ca1\u6709\u7528\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u975e\u5e38\u6709\u7528~~\uff09\n\n\u7ed3\u8bba $3$\u3002\n\n\u518d\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u8282\u70b9 $u$ \u662f\u80fd\u5bf9\u8be2\u95ee\u533a\u95f4\u505a\u51fa\u8d21\u732e\u7684\u3002\n\n\u5373**\u5176\u7236\u4eb2\u4e0d\u80fd\u5bf9\u8be2\u95ee\u533a\u95f4\u505a\u51fa\u8d21\u732e**\u3002\n\n\u90a3\u4e48\u7ed3\u5408\u4e00\u4e0b\u3002\n\n\u4e00\u4e2a\u8282\u70b9 $u$ \u80fd\u505a\u51fa\u8d21\u732e**\u5f53\u4e14\u4ec5\u5f53\u5176\u7236\u4eb2\u7684\u53e6\u4e00\u4e2a\u513f\u5b50\u6240\u5728\u5b50\u6811\u5185\u5b58\u5728\u8282\u70b9\u7ba1\u8f96\u7684\u533a\u95f4\u4e0d\u662f\u8be2\u95ee\u533a\u95f4\u7684\u5b50\u96c6**\u3002\n\n\u90a3\u4e48\u6211\u4eec\u627e\u5230\u6240\u6709\u70b9\u6ee1\u8db3\u5176\u7ba1\u8f96\u7684\u533a\u95f4 $[a,a]\\in[l_p,l_q-1]$\u3002\u6211\u4eec\u5c06\u6240\u6709\u6ee1\u8db3\u8fd9\u6837\u6761\u4ef6\u7684\u70b9\u5230 $p$ \u7684\u8def\u5f84\u4e0a\u7684\u70b9\u5168\u90e8\u8986\u76d6\u4e00\u904d\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u67d3\u8272\uff09\u3002\n\n\u90a3\u4e48 $p$ \u7684\u5b50\u6811\u5185\u5269\u4e0b\u7684\u672a\u88ab\u8986\u76d6\u7684\u70b9\u4e00\u5b9a\u662f\u82e5\u5e72\u4e2a\u5b50\u6811\u3002\u90a3\u4e48\u6709\u8d21\u732e\u7684\u70b9\u5c31\u662f\u82e5\u5e72\u4e2a\u5b50\u6811\u7684\u6839\u3002\n\n\u7531\u7ed3\u8bba $1$ \u53ef\u77e5\u8fd9\u662f\u6b63\u786e\u7684\u3002\n\n\u6211\u4eec\u8981\u5feb\u901f\u5f97\u5230\u8fd9\u82e5\u5e72\u4e2a\u5b50\u6811\u7684\u6839\u3002\n\n\u7136\u540e\u518d\u8003\u8651\u4e00\u4e2a\u7ed3\u8bba\u3002\n\n\u7ed3\u8bba $4$\n\n\u7136\u540e\u6211\u4eec\u6ce8\u610f\u5230\u7531\u4e8e\u8fd9\u662f\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u5bf9\u4e8e $[i+k,i+k]$ \u7684\u6240\u6709\u7956\u5148\uff0c\u5176\u4e00\u5b9a\u662f $[i,i]$ \u7684\u7956\u5148\u6216\u8005 \u4f4d\u4e8e$[i,i]$ \u67d0\u4e2a\u7956\u5148\u7684\u53f3\u5b50\u6811\u5185\u3002\n\n\u867d\u7136\u770b\u8d77\u6765\u7ed3\u8bba\u5f88\u591a\uff0c\u4f46\u5176\u5b9e\u90fd\u662f\u663e\u800c\u6613\u89c1\u7684\u4e1c\u897f\u3002\n\n\u7ed3\u5408\u4e00\u4e0b\u7ed3\u8bba $2,3,4$ \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u8981\u6c42\u7684\u70b9\u4e0d\u662f $[a_p,a_p]$\uff08$a_p$ \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5904\u4e8e $[l_p,l_q-1]$ \u5185\u7684\u70b9\uff09 \u7684\u7956\u5148\uff0c\u4f46\u662f\u5f97\u662f $[a_q,a_q]$\uff08$a_q$ \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5904\u4e8e  $[ l_q,r_p ]$ \u5185\u7684\u70b9\uff09 \u7684\u7956\u5148\u3002\n\n\u7136\u540e\u8003\u8651\u4e00\u4e0b\u7ed3\u8bba\u56db\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0a\u8ff0\u90a3\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u88ab\u4f18\u5316\u4e86\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u5c06\u627e\u5230\u6700\u53f3\u7aef\u7684 $a_p$ \u5373 $l_q-1$\u3002\u7136\u540e\u5c06 $[l_q-1,l_q-1]$ \u5230 $[l_p,l_q-1]$ \u8def\u5f84\u4e0a\u7684\u70b9\u5168\u90e8\u8986\u76d6\u3002\n\n\u7136\u540e\u5ffd\u7565\u88ab\u8986\u76d6\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u56e0\u4e3a\u5176\u5de6\u5b50\u6811\u4e2d\u80af\u5b9a\u6709\u70b9\u7ba1\u8f96\u7684\u533a\u95f4\u4e0d\u662f\u8be2\u95ee\u533a\u95f4\u7684\u5b50\u96c6\u3002\uff08\u6839\u636e\u7ed3\u8bba $1,4$ \u53ef\u5f97\u3002\uff09\n\n\u90a3\u4e48\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u4ea7\u751f\u7684\u5b50\u6811\u7684\u6839\u5c31\u662f $[l_q-1,l_q-1]$ \u5230 $[l_p,l_q-1]$ **\u8fd9\u6761\u94fe\u4e0a\u7684\u6240\u6709\u4e0d\u5728\u8fd9\u6761\u94fe\u4e0a\u7684\u53f3\u513f\u5b50 **\u3002\uff08\u662f\u53f3\u513f\u5b50\u4e0d\u662f\u53f3\u5b50\u6811\uff09\n\n\u7b80\u5355\u6765\u8bf4\u8981**\u540c\u65f6**\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n1. \u4e0d\u5728\u8fd9\u6761\u94fe\u4e0a\u3002\n2. \u662f\u8fd9\u6761\u94fe\u4e0a\u67d0\u4e2a\u70b9\u7684\u53f3\u513f\u5b50\u3002\n\n\u90a3\u4e48\u8fd9\u82e5\u5e72\u4e2a\u70b9\u7684\u4f4d\u7f6e\u5c31\u88ab\u6211\u4eec\u6c42\u5f97\u4e86\u3002\n\n\u73b0\u5728\u8981\u6c42\u7684\u662f\u5982\u4f55\u6c42\u51fa\u8fd9\u82e5\u5e72\u4e2a\u70b9\u5230\u8be2\u95ee\u7684\u70b9 $u_q$ \u7684\u8ddd\u79bb\u3002\n\n\u4f9d\u65e7\u662f\u8003\u8651\u5229\u7528\u6df1\u5ea6\u8ba1\u7b97\uff0c\u6211\u4eec\u5148\u901a\u8fc7\u500d\u589e\u8df3\u5230\u4e00\u4e2a\u70b9 $t$\uff0c\u6ee1\u8db3 $t$ \u5728\u8fd9\u6761\u94fe\uff08\u6216\u8005\u8fd9\u6761\u94fe\u94fe\u9996\u7684\u7956\u5148\u4e0a\uff0c\u5373 $[l_p,l_q-1]$ \u7684\u7956\u5148\uff09\u4e0a\uff0c\u4e14 $t$ \u662f $u_q$ \u7684\u7956\u5148\u4e2d\u8ddd\u79bb $u_q$ \u6700\u5c0f\u7684\u4e00\u4e2a\u3002\n\n\u90a3\u4e48\u5728 $t$ \u4e4b\u4e0b\uff08\u6df1\u5ea6\u6bd4\u5b83\u5927\uff09\u7684\u6709\u8d21\u732e\u7684\u70b9\u548c\u5b83\u7684 $lca$ \u5c31\u662f $t$\u3002$t$ \u4e4b\u4e0a\u6709\u8d21\u732e\u7684\u70b9\u548c\u4ed6\u7684 $lca$ \u5c31\u662f\u6709\u8d21\u732e\u70b9\u7684\u7236\u4eb2\uff08\u4ed6\u80af\u5b9a\u5728\u94fe\u4e0a\uff09\u3002\n\n\u5206\u6bb5\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u51fa $cnt_i,v_i$ \u3002\n\n\u5206\u522b\u8868\u793a\uff0c\u4ee5 $fa_i$ \u4e3a\u94fe\u5c3e\uff0c\u6839\u4e3a\u94fe\u9996\u7684**\u94fe\u4e0a\u6240\u6709\u70b9\u7684\u4e0d\u5728\u94fe\u4e0a\u7684\u53f3\u513f\u5b50**\uff08\u5176\u5b9e\u5c31\u662f\u6709\u8d21\u732e\u7684\u70b9\uff09\u7684\u4e2a\u6570\u4e4b\u548c\u4e0e\u6df1\u5ea6\u4e4b\u548c\u3002\n\n\u7136\u540e\u6839\u636e $t,cnt_i,v_i$\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5206\u7c7b\u8ba8\u8bba\u7684\u65b9\u6cd5\u5728 $O(\\log n)$ \uff08\u74f6\u9888\u5728\u500d\u589e\u8df3\u70b9\uff09\u5185\u7b97\u51fa\u8fd9\u7c7b\u70b9\u7684\u8d21\u732e\u3002\n\n\u6ce8\u610f\u5206\u7c7b\u7684\u7ec6\u8282\u3002\n\n\u5728\u8fd9\u91cc\u7279\u522b\u63d0\u51fa\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f $t$ \u7684**\u53f3\u513f\u5b50\u662f\u6709\u8d21\u732e\u7684\u70b9**\uff08\u5c31\u662f\u5b83\u53f3\u513f\u5b50\u4e0d\u5728\u94fe\u4e0a\u7684\u610f\u601d\uff09\uff0c\u800c\u4e14 $u_q$ \u5728 $t$ \u7684\u53f3\u5b50\u6811\u5185\u3002\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5b83\u4eec\u7684 $lca$ \u5e94\u8be5\u662f  $t$ \u7684\u53f3\u513f\u5b50\u800c\u4e0d\u662f $t$ \u3002\n\n\u5ffd\u89c6\u8fd9\u4e2a\u7ec6\u8282\u5c31\u4f1a $100->20$\u3002\uff08~~\u8fd8\u6211 $80$ \u5206~~\uff09\n\n\u74f6\u9888\u5728\u6811\u5256\uff0c\u590d\u6742\u5ea6\u4e3a $O(n\\log n\\log n)$\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int MAXN = 4e5+5;\nint mi[MAXN],n,m,le[MAXN],ri[MAXN],ls[MAXN],rs[MAXN],node;\nint lg[MAXN],f[21][MAXN],tot,dep[MAXN],pos[MAXN],st[MAXN],top;\nint siz[MAXN],dfn[MAXN],ttd,tt[MAXN],son[MAXN];\nll v[MAXN],cnt[MAXN],Ans[MAXN],val;\nstruct Ques\n{\n\tint u,l,id;\n};\nvector <Ques> Qu[MAXN];\nstruct Add\n{\n\tint u,id;\n};\nvector <Add> Ad[MAXN];\nstruct Tree\n{\n\tll t[MAXN<<2],tg[MAXN<<2];\n\tTree(){memset(t,0,sizeof t);memset(tg,0,sizeof tg);}\n\tvoid clear(){memset(t,0,sizeof t);memset(tg,0,sizeof tg);}\n\tvoid pu(int k) {t[k]=t[(k<<1)]+t[(k<<1|1)];}\n\tvoid pd(int k,int l,int r)\n\t{\n\t\tif(!tg[k]) return ;\n\t\tint mid=l+r>>1;\n\t\ttg[(k<<1)]+=tg[k];tg[(k<<1|1)]+=tg[k];\n\t\tt[(k<<1)]+=tg[k]*(mid-l+1);t[(k<<1|1)]+=tg[k]*(r-mid);\n\t\ttg[k]=0;\n\t}\n\tvoid upd(int le,int ri,int k,int l,int r,ll x)\n\t{\n\t\tif(le<=l&&r<=ri)\n\t\t{\n\t\t\tt[k]+=x*(r-l+1);tg[k]+=x;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=l+r>>1;pd(k,l,r);\n\t\tif(le<=mid) upd(le,ri,(k<<1),l,mid,x);\n\t\tif(ri>mid)  upd(le,ri,(k<<1|1),mid+1,r,x);\n\t\tpu(k);\n\t}\n\tll que(int le,int ri,int k,int l,int r)\n\t{\n\t\tif(le<=l&&r<=ri) return t[k];\n\t\tint mid=l+r>>1;ll ans=0;pd(k,l,r);\n\t\tif(le<=mid) ans+=que(le,ri,(k<<1),l,mid);\n\t\tif(ri>mid)  ans+=que(le,ri,(k<<1|1),mid+1,r);\n\t\treturn ans;\n\t}\n}T;//\u7ebf\u6bb5\u6811\u677f\u677f \nbool in(int x,int y)\n{\n\treturn le[x]<=le[y]&&ri[y]<=ri[x];\n}\nvoid predfs(int &k,int fa,int l,int r,int d,bool rep)\n{\n\tif(!k) k=++node;\n\tcnt[k]=cnt[fa]+(rep?0:1);v[k]=v[fa]+(rep?0:d);\n\tle[k]=l;ri[k]=r;dep[k]=d;\n\tf[0][k]=fa;\n\tfor(int i=1;i<=lg[d];++i)\n\t\tf[i][k]=f[i-1][f[i-1][k]];\n\tif(l==r)\n\t{\n\t\tpos[l]=k;\n\t\treturn ;\n\t}\n\t++tot;int mid=mi[tot];\n\tpredfs(ls[k],k,l,mid,d+1,0);\n\tpredfs(rs[k],k,mid+1,r,d+1,1);\n}//\u9884\u5904\u7406\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\u3002 \nvoid dfs1(int p,int fa)\n{\n\tsiz[p]=1;\n\tif(ls[p])\n\t{\n\t\tdfs1(ls[p],p),siz[p]+=siz[ls[p]];\n\t\tif(siz[ls[p]]>siz[son[p]]) son[p]=ls[p];\n\t}\n\tif(rs[p])\n\t{\n\t\tdfs1(rs[p],p),siz[p]+=siz[rs[p]];\n\t\tif(siz[rs[p]]>siz[son[p]]) son[p]=rs[p];\n\t}\n}\nvoid dfs2(int p,int fa,int t)\n{\n\ttt[p]=t;dfn[p]=++ttd;\n\tif(son[p]) dfs2(son[p],p,t);\n\tif(ls[p]&&son[p]!=ls[p]) dfs2(ls[p],p,ls[p]);\n\tif(rs[p]&&son[p]!=rs[p]) dfs2(rs[p],p,rs[p]);\n}\nvoid U(int x,int v){while(x) T.upd(dfn[tt[x]],dfn[x],1,1,node,v),x=f[0][tt[x]];}\nll Q(int x){ll r=-T.que(1,1,1,1,node);while(x) r+=T.que(dfn[tt[x]],dfn[x],1,1,node),x=f[0][tt[x]];return r;}\n//\u7531\u4e8e\u6811\u5256\u5c06\u8fb9\u6743\u5316\u4e3a\u70b9\u6743\u4e86\uff0c\u6240\u4ee5 1 \u7684\u70b9\u6743\u5e94\u8be5\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684\u3002 \nll calc(int u,int x,int y)//x\u4e3a\u94fe\u5c3e\uff0cy\u4e3a\u94fe\u9996 \n{\n\tll d=dep[u];\n\tbool step=0;\n\tfor(int i=lg[dep[u]]-1;i>=0;--i) if(f[i][u]&&!in(f[i][u],x)) u=f[i][u];\n\tif(!in(u,x)) u=f[0][u],step=1;\n\t//\u5411\u4e0a\u8df3\u7684\u8fc7\u7a0b\uff0c\u6ce8\u610f\u6709\u53ef\u80fd\u672c\u6765 u \u5c31\u5728\u94fe\u4e0a\uff0c\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b u \u662f\u4e0d\u662f\u8df3\u4e0a\u6765\u7684 \n\tll r=0;\n\tr+=v[x]-v[u]+(cnt[x]-cnt[u])*d-2ll*(cnt[x]-cnt[u])*dep[u];\n\tr+=v[u]+cnt[u]*d-2ll*(v[u]-cnt[u]);\n\tif(le[rs[u]]>le[x]&&step&&in(y,u)) r-=2;\n\t //\u5982\u679c u \u4e0d\u662f\u672c\u6765\u5c31\u5728\u94fe\u4e0a\u7136\u540e\u8df3\u5230\u4e86 t (\u8fd9\u91cc\u7684 u \u5b58\u7684\u503c\u5b9e\u9645\u4e0a\u5df2\u7ecf\u662f t\u4e86)\n\t //\u90a3\u4e48\u8bf4\u660e u \u53ea\u80fd\u662f t \u7684\u53f3\u5b50\u6811\u4e2d\u7684\u4e00\u90e8\u5206 (\u56e0\u4e3a u \u7684\u5de6\u513f\u5b50) \n\t //\u6b64\u65f6\u5c31\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u56e0\u4e3a\u4e0a\u8ff0\u516c\u5f0f\u662f\u628a lca \u5f53 t \u6765\u7b97\u7684\uff0c\u5b9e\u9645\u4e0a\u662f t \u7684\u53f3\u513f\u5b50\u3002 \n\tif(in(u,y))\n\t{\n\t\tr-=v[y]-v[u]+(cnt[y]-cnt[u])*d-2ll*(cnt[y]-cnt[u])*dep[u];\n\t\tr-=v[u]+cnt[u]*d-2ll*(v[u]-cnt[u]);\n\t}\n\telse r-=v[y]+cnt[y]*d-2ll*(v[y]-cnt[y]);\n\t//\u51cf\u53bb\u94fe\u9996\u4ee5\u4e0a\u7684\u8d21\u732e\u90e8\u5206 \n\treturn r;\n}\nvoid perform(Ques q)\n{\n\tint l=1,r=top,p=0;\n\twhile(l<=r)\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(le[st[mid]]<=q.l-1) p=mid,l=mid+1;\n\t\telse r=mid-1;\n\t}\n\t//\u4e8c\u5206\u51fa\u6808\u5185\u4e0d\u5408\u6cd5\u8d21\u732e\u7684\u70b9\u6240\u6784\u6210\u533a\u95f4\u7684\u53f3\u7aef\u70b9\n\tAns[q.id]+=1ll*top*dep[q.u]+val-2ll*Q(q.u);\n\tAd[ri[st[p]]].push_back(Add{q.u,q.id});//\u5b58\u8d77\u6765\uff0c\u5230\u65f6\u5019\u51cf\u53bb \n\tif(ri[st[p]]!=q.l-1) Ans[q.id]+=calc(q.u,pos[q.l-1],st[p]);\n\t//\u5982\u679c\u70b9\u4f1a\u88ab\u62c6\u5c31\u8ba1\u7b97\u3002\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i) lg[i]=lg[i-1]+(1<<lg[i-1]==i);\n\tfor(int i=1;i<n;++i) scanf(\"%d\",&mi[i]);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u,l,r;scanf(\"%d %d %d\",&u,&l,&r);\n\t\tQu[r].push_back(Ques{u,l,i});\n\t}\n\tint rt=0;\n\tpredfs(rt,0,1,n,0,1);\n\tdfs1(rt,0);dfs2(rt,0,rt);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint u=pos[i];\n\t\twhile(ri[f[0][u]]==i) u=f[0][u];\n\t\twhile(top&&in(u,st[top]))\n\t\t{\n\t\t\tU(st[top],-1);\n\t\t\tval-=dep[st[top]];\n\t\t\t--top;\n\t\t}\n\t\tst[++top]=u;U(u,1);val+=dep[u];\n\t\tfor(Ques q:Qu[i]) perform(q);\n\t}\n\t//\u63a5\u4e0b\u6765\u505a\u7b2c\u4e8c\u6b21\uff0c\u76ee\u7684\u662f\u51cf\u53bb\u6808\u4e2d\u524d\u9762\u4e0d\u5408\u6cd5\u7684\u8d21\u732e \n\tT.clear();top=0;val=0;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint u=pos[i];\n\t\twhile(ri[f[0][u]]==i) u=f[0][u];\n\t\twhile(top&&in(u,st[top]))\n\t\t{\n\t\t\tU(st[top],-1);\n\t\t\tval-=dep[st[top]];\n\t\t\t--top;\n\t\t}\n\t\tst[++top]=u;U(u,1);val+=dep[u];\n\t\tfor(Add q:Ad[i]) Ans[q.id]-=1ll*top*dep[q.u]+val-2ll*Q(q.u);\n\t}\n\tfor(int i=1;i<=m;++i) printf(\"%lld\\n\",Ans[i]);\n\treturn 0;\n}\n```\n\n\n\n ",
        "postTime": 1648477730,
        "uid": 141485,
        "name": "A_Sunny_Day",
        "ccfLevel": 0,
        "title": "\u300cZJOI2017\u300d\u7ebf\u6bb5\u6811"
    },
    {
        "content": "[P5210 [ZJOI2017]\u7ebf\u6bb5\u6811](https://www.luogu.org/problem/P5210)\n# <1>\u9898\u76ee\u5206\u6790\n### \u5904\u7406\u5e7f\u4e49\u7ebf\u6bb5\u6811\u7684\u4e00\u7c7b~~\u5957\u8def~~\u65b9\u6cd5\u3002\n\n    1. \u9996\u5148\uff0c\u5b9a\u4e49\u539f\u6765\u7684\u7ebf\u6bb5\u6811\u4e3a\u539f\u6811\uff0c\u5e76\u4e14\u5c06\u5176\u6539\u9020\u4e00\u4e0b\uff0c\u4f7f\u5f97\u5b83\u80fd\u591f\u7ba1\u7406\u7684\u533a\u95f4\u4e3a [0,n+1]\u3002\n\n    2. \u5b9a\u4e49\u5de6\u504f\u6811\uff08\u8ddf\u4e00\u79cd\u53ef\u5e76\u5806\u91cd\u540d\u4e86 2333\uff09\u4e3a\u4e00\u68f5\u5c06\u539f\u6811\u4e0a\uff0c\u6240\u6709\u662f\u5de6\u513f\u5b50\u7684\u70b9\u63d0\u53d6\u51fa\u6765\uff0c\u6784\u6210\u7684\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\uff0c\u662f\u4ee3\u8868\u5728\u5176\u5de6\u8fb9\uff0c\u4e0e\u5176\u4ee3\u8868\u533a\u95f4\u76f8\u90bb\u7684\u533a\u95f4\uff0c\u4e14\u6df1\u5ea6\u6bd4\u5b83\u6d45\u7684\u8282\u70b9\u3002\u753b\u51fa\u6765\u662f\u8fd9\u6837\u7684\uff1a\n\n    3. \u6211\u60f3\u6211\u9700\u8981\u4e00\u5757\u624b\u7ed8\u677f\uff1a\n   [1-1](D:\\360\u5b89\u5168\u6d4f\u89c8\u5668\u4e0b\u8f7d\\1-1)\n\n    4. \u5b9a\u4e49\u53f3\u504f\u6811\u4e3a\u63d0\u53d6\u53f3\u513f\u5b50\u4eec\uff0c\u4e0e\u5728\u5b83\u53f3\u8fb9\u6df1\u5ea6\u6bd4\u5b83\u6d45\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u76f8\u8fde\u7684\u6811\u3002\n\n    5. \u5de6\u504f\u6811\u53ef\u4ee5\u5728\u904d\u5386\u539f\u6811\u65f6\uff0c\u5f00\u4e2a\u6808\uff0c\u6bcf\u6b21\u5148\u5c06\u5f53\u524d\u70b9\u7684\u5de6\u513f\u5b50\u4e0e\u6808\u9876\u5143\u7d20\u76f8\u8fde\uff0c\u7136\u540e\u5c06\u5f53\u524d\u70b9\u5de6\u513f\u5b50\u538b\u5165\u6808\uff0c\u904d\u5386\u5f53\u524d\u70b9\u53f3\u5b50\u6811\uff0c\u518d\u5c06\u5de6\u513f\u5b50\u5f39\u51fa\u6808\uff0c\u518d\u904d\u5386\u5de6\u5b50\u6811\uff0c\u5982\u6b64\u5f97\u5230\u3002\u53f3\u504f\u6811\u7c7b\u4f3c\u3002\n\n    6. \u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee (x,l,r)\uff0c\u9996\u5148\u627e\u5230\u4ee3\u8868\u533a\u95f4 [l\u22121,l\u22121]\u7684\u70b9 k1k1\u548c\u4ee3\u8868\u533a\u95f4 [r+1,r+1]\u7684\u70b9 k2\uff08\u8fd9\u4e5f\u5c31\u662f\u8981\u6539\u9020\u539f\u6811\u4f7f\u5b83\u80fd\u591f\u63a7\u5236\u533a\u95f4 [0,n+1]\u7684\u539f\u56e0\uff09\uff0c\u7136\u540e\u6c42\u51fa\u5b83\u4eec\u7684 LCA\uff0c\u70b9 o\u3002\n\n    7. \u4e0d\u96be\u53d1\u73b0\uff0ck1\u5230 o\u7684\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\uff0c\u82e5\u5b83\u7684\u53f3\u513f\u5b50\u6ca1\u88ab\u7ecf\u8fc7\uff0c\u5219\u53f3\u513f\u5b50\u5728 S[l,r]\u4e2d\uff0c\u5e76\u4e14\u8fd9\u4e9b\u70b9\u8fd8\u5bf9\u5e94\u4e86\u4e00\u6761\u53f3\u504f\u6811\u4e0a\u7684\u94fe\u3002\u4ece k2\u5230 o\u8def\u5f84\u4e0a\uff0c\u90a3\u4e9b\u70b9\u7684\u5de6\u513f\u5b50\u4e5f\u6709\u7c7b\u4f3c\u7684\u6027\u8d28\u3002\n\n    8. \u82e5 k1k1\u4e3a\u4e00\u4e2a\u5de6\u513f\u5b50\uff0c\u5219\u8fd9\u6761\u53f3\u504f\u6811\u4e0a\u94fe\u6700\u6df1\u70b9\u4e3a\u5b83\u7684\u5144\u5f1f\u3002\u82e5\u5b83\u662f\u53f3\u513f\u5b50\uff0c\u5219\u6700\u6df1\u70b9\u4e3a\u5176\u5728\u53f3\u504f\u6811\u4e0a\u7684\u7236\u4eb2\u3002\u800c\u6700\u6d45\u70b9\u7684\u7236\u4eb2\u4e3a o\u7684\u53f3\u513f\u5b50\u3002\uff08k2\u90e8\u5206\u7c7b\u4f3c\uff0c\u7565\u8fc7\uff09\n\n    9. \u82e5 dfs \u4e00\u6b21\u53f3\u504f\u6811\uff0c\u6bcf\u8fdb\u5165\u4e00\u4e2a\u70b9 x\uff0c\u5e8f\u5217\u672b\u5c3e\u52a0\u4e00\u4e2a\u5143\u7d20 +x\uff0c\u8868\u793a\u5904\u7406\u5e8f\u5217\u4e00\u4e2a\u524d\u7f00\u5904\u7406\u5230\u6b64\uff0c\u8981\u5c06 x\u52a0\u5165\u96c6\u5408\u3002\u79bb\u5f00 x\u65f6\uff0c\u52a0\u5165 \u2212x\uff0c\u8868\u793a\u8981\u5c06 x\u4ece\u96c6\u5408\u4e2d ban \u6389\u3002\u90a3\u4e48\u4e00\u4e2a\u8be2\u95ee\u5728\u53f3\u504f\u6811\u4e0a\u6784\u6210\u7684\u90a3\u6761\u94fe\uff0c\u5c31\u662f\u6700\u6df1\u70b9\u7684\u6b63\u4f4d\u7f6e\u7684\u524d\u7f00\u64cd\u4f5c\u4e00\u904d\u5269\u4e0b\u7684\u96c6\u5408\u7684\u8d21\u732e\uff0c\u51cf\u53bb\u6700\u6d45\u70b9\u7236\u4eb2\u6b63\u4f4d\u7f6e\u7684\u96c6\u5408\u7684\u524d\u7f00\u8d21\u732e\u3002\n\n    10. \u4e8e\u662f\u6211\u4eec\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u987a\u5e8f\u5904\u7406\uff0c\u6bcf\u6b21\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u7684\u8d21\u732e\uff0c\u7136\u540e\u518d\u52a0\u52a0\u51cf\u51cf\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\u3002\n\n    11. \u800c\u8be2\u95ee(x,l,r)\u8981\u95ee\u7684\u4e1c\u897f\u7b49\u4ef7\u4e8e\u95ee\n\n    depx|S[l,r]|+\u2211y\u2208S[l,r]depy\u22122\u2211y\u2208S[l,r]deplca(x,y)\n    depx|S[l,r]|+\u2211y\u2208S[l,r]depy\u22122\u2211y\u2208S[l,r]deplca(x,y)\n    \u524d\u4e24\u9879\u53ea\u8981\u7ef4\u62a4\u5f53\u524d\u96c6\u5408\u7684\u5143\u7d20\u4e2a\u6570\u548c\u5143\u7d20 depdep\u548c\u5373\u53ef\uff0c\u5f88\u7b80\u5355\uff0c\u540e\u4e00\u9879\u5462\uff1f\n\n    12. \u4e5f\u4e0d\u96be\uff0c\u6bcf\u5c06\u4e00\u4e2a y\u52a0\u5165\u96c6\u5408\uff0c\u5c31\u5728\u6240\u6709 yy\u7684\u7956\u5148\u5904\u628a\u4e00\u4e2a\u6807\u8bb0+1\uff0cban \u6389\u65f6-1\uff0c\u5219 x\u7684\u6240\u6709\u7956\u5148\u7684\u6807\u8bb0\u548c\uff0c\u5c31\u662f lca \u7684\u6df1\u5ea6\u548c\u3002\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\uff0b\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n    \n\t<2>Code\n```cpp\n#include <bits/stdc++.h>\n    using namespace std;\n    #define RI register int\n    int read()\n    {\n        int q=0;\n        char ch=' ';\n        while(ch<'0'||ch>'9')\n            ch=getchar();\n        while(ch>='0'&&ch<='9')\n            q=q*10+ch-'0',ch=getchar();\n        return q;\n    }\n    typedef long long LL;\n    const int maxN=400010;\n    int n,m,SZ_A,rt_A,st_top,js1,js2,tim,son[maxN][2],fa[maxN],st[maxN],pos[maxN],dep[maxN],sz[maxN],top[maxN],dfn[maxN];\n    LL ans[maxN];\n    struct node\n    {\n        int p,x,v,id;\n    } q1[maxN<<1],q2[maxN<<1];\n    bool cmp(node A,node B)\n    {\n        return A.p<B.p;\n    }\n    struct segment_tree\n    {\n        LL sum[maxN<<2],lz[maxN<<2];\n        void build(int s,int t,int i)\n        {\n            sum[i]=lz[i]=0;\n            if(s==t) return;\n            int mid=(s+t)>>1;\n            build(s,mid,i<<1),build(mid+1,t,(i<<1)|1);\n        }\n        void put_lz(int s,int t,int i,int v)\n        {\n            lz[i]+=v,sum[i]+=1LL*(t-s+1)*v;\n        }\n        void pd(int s,int t,int i)\n        {\n            int mid=(s+t)>>1;\n            put_lz(s,mid,i<<1,lz[i]),put_lz(mid+1,t,(i<<1)|1,lz[i]),lz[i]=0;\n        }\n        void modify(int l,int r,int s,int t,int i,int v)\n        {\n            if(l<=s&&t<=r)\n            {\n                put_lz(s,t,i,v);\n                return;\n            }\n            int mid=(s+t)>>1;\n            if(lz[i])\n                pd(s,t,i);\n            if(l<=mid)\n                modify(l,r,s,mid,i<<1,v);\n            if(mid+1<=r)\n                modify(l,r,mid+1,t,(i<<1)|1,v);\n            sum[i]=sum[i<<1]+sum[(i<<1)|1];\n        }\n        LL query(int l,int r,int s,int t,int i)\n        {\n            if(l<=s&&t<=r)\n                return sum[i];\n            int mid=(s+t)>>1;\n            LL re=0;\n            if(lz[i])\n                pd(s,t,i);\n            if(l<=mid)\n                re=query(l,r,s,mid,i<<1);\n            if(mid+1<=r)\n                re+=query(l,r,mid+1,t,(i<<1)|1);\n            return re;\n        }\n    } ST;\n    void walk(int x,int v)\n    {\n        while(x)\n            ST.modify(dfn[top[x]],dfn[x],1,SZ_A,1,v),x=fa[top[x]];\n    }\n    LL q_walk(int x)\n    {\n        LL re=0;\n        while(x)\n        {\n            re+=ST.query(dfn[top[x]],dfn[x],1,SZ_A,1);\n            x=fa[top[x]];\n        }\n        return re;\n    }\n    struct Tree\n    {\n        int h[maxN],ne[maxN],to[maxN],p[maxN],pos[maxN],fa[maxN],tot,js;\n        void add(int x,int y)\n        {\n            to[++tot]=y;\n            ne[tot]=h[x];\n            h[x]=tot;\n        }\n        void build(int x,int o)\n        {\n            if (!son[x][0] && !son[x][1])\n                return ;\n            fa[son[x][o]]=st[st_top],add(st[st_top],son[x][o]),\n                          st[++st_top]=son[x][o];\n            build(son[x][o^1],o),--st_top,build(son[x][o],o);\n        }\n        void dfs(int x)\n        {\n            p[++js]=x,pos[x]=js;\n            for (RI i=h[x]; i; i=ne[i])\n                dfs(to[i]);\n            p[++js]=-x;\n        }\n        void work(node *q,int qjs)\n        {\n            sort(q+1,q+1+qjs,cmp),ST.build(1,SZ_A,1);\n            LL now_sumd=0,now_sum=0;\n            for(RI i=1,j=1; i<=js; ++i)\n            {\n                if(p[i]<0) now_sumd-=dep[-p[i]],--now_sum,walk(-p[i],-1);\n                else now_sumd+=dep[p[i]],++now_sum,walk(p[i],1);\n                while(j<=qjs&&q[j].p==i)\n                {\n                    LL tmp=now_sumd+now_sum*(LL)dep[q[j].x]-2*q_walk(q[j].x);\n                    ans[q[j].id]+=q[j].v*tmp,++j;\n                }\n            }\n        }\n    } lT,rT;\n    void build_A(int &x,int s,int t)\n    {\n        x=++SZ_A;\n        if(s==t)\n        {\n            pos[s]=x;\n            return;\n        }\n        int mid=read();\n        build_A(son[x][0],s,mid),build_A(son[x][1],mid+1,t);\n    }\n    void dfs1(int x,int las)\n    {\n        sz[x]=1,fa[x]=las,dep[x]=dep[las]+1;\n        if(son[x][0]) dfs1(son[x][0],x),sz[x]+=sz[son[x][0]];\n        if(son[x][1]) dfs1(son[x][1],x),sz[x]+=sz[son[x][1]];\n    }\n    void dfs2(int x)\n    {\n        dfn[x]=++tim;\n        if(!son[x][0]&&!son[x][1]) return;\n        if(sz[son[x][0]]>sz[son[x][1]])\n        {\n            top[son[x][0]]=top[x],dfs2(son[x][0]);\n            top[son[x][1]]=son[x][1],dfs2(son[x][1]);\n        }\n        else\n        {\n            top[son[x][1]]=top[x],dfs2(son[x][1]);\n            top[son[x][0]]=son[x][0],dfs2(son[x][0]);\n        }\n    }\n    int lca(int x,int y)\n    {\n        while(top[x]!=top[y]) dep[top[x]]>dep[top[y]]?x=fa[top[x]]:y=\n                        fa[top[y]];\n        return dep[x]<dep[y]?x:y;\n    }\n    int is(int x)\n    {\n        return son[fa[x]][1]==x;\n    }\n\n    int main()\n    {\n        n=read();\n        build_A(rt_A,1,n);\n        ++SZ_A,son[SZ_A][0]=rt_A;\n        ++SZ_A,son[SZ_A-1][1]=SZ_A,pos[n+1]=SZ_A;\n        ++SZ_A,son[SZ_A][1]=SZ_A-2,rt_A=SZ_A;\n        ++SZ_A,son[SZ_A-1][0]=SZ_A,pos[0]=SZ_A;\n        dfs1(rt_A,0),top[rt_A]=rt_A,dfs2(rt_A);\n        st[++st_top]=rt_A,lT.build(rt_A,0),rT.build(rt_A,1);\n        lT.dfs(rt_A),rT.dfs(rt_A);\n        m=read();\n        for(RI i=1; i<=m; ++i)\n        {\n            int x=read(),l=read(),r=read();\n            int k1=pos[l-1],k2=pos[r+1],o=lca(k1,k2);\n            q1[++js1]=(node)\n            {\n                lT.pos[son[o][0]],x,-1,i\n            };\n            if(is(k2)) q1[++js1]=(node)\n            {\n                lT.pos[son[fa[k2]][0]],x,1,i\n            };\n            else q1[++js1]=(node)\n            {\n                lT.pos[lT.fa[k2]],x,1,i\n            };\n            q2[++js2]=(node)\n            {\n                rT.pos[son[o][1]],x,-1,i\n            };\n            if(is(k1)) q2[++js2]=(node)\n            {\n                rT.pos[rT.fa[k1]],x,1,i\n            };\n            else q2[++js2]=(node)\n            {\n                rT.pos[son[fa[k1]][1]],x,1,i\n            };\n        }\n        lT.work(q1,js1),rT.work(q2,js2);\n        for(RI i=1; i<=m; ++i)\n            cout<<ans[i]<<endl;\n        return 0;\n    }\n```\n",
        "postTime": 1564475784,
        "uid": 79186,
        "name": "WB_TS_\u6b27\u5bd2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5210 \u3010[ZJOI2017]\u7ebf\u6bb5\u6811\u3011"
    }
]