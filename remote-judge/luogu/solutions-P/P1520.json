[
    {
        "content": "\u4e4b\u524d\u7adf\u7136\u90fd\u4e0d\u77e5\u9053\u6709\u8fd9\u4e2a\u9898\uff0c\uff0c\u7b80\u5355\u5199\u4e00\u4e0b\u5427\u3002  \n\u5efa\u8bae\u5728\u6211\u7684 blog \u4e2d\u67e5\u770b\u3002\n\n****\n~~\u4f17\u6240\u5468\u77e5~~\uff0c\u5173\u4e8e\u5355\u4f4d\u6839\u7684\u57fa\u672c\u6027\u8d28\uff1a\n$$x^n-1=\\prod_{k=0}^{n-1}(x-\\omega_n^k)$$\n\u65b9\u4fbf\u540e\u9762\u8868\u8ff0\uff0c\u8fd9\u91cc\u5b9a\u4e49\uff1a\u5bf9\u4e8e\u590d\u6570 $z$\uff0c\u82e5 $z^n=1$\uff0c\u4e14 $z^m \\neq 1 \\ (m \\in [0,n-1])$\uff0c\u5c31\u79f0 $z$ \u4e3a $n$ \u6b21\u672c\u539f\u5355\u4f4d\u6839\u3002\n\n\n\u5b9a\u4e49\u5206\u5706\u591a\u9879\u5f0f $\\phi_n(x)$ \u4e3a\n$$\\phi_n(x)=\\prod_{k=0}^{n-1}(x-\\omega_n^k)^{[\\gcd(n,k)=1]}$$\n\uff08\u5373\u5b83\u7684\u6839\u662f\u6240\u6709 $n$ \u6b21\u672c\u539f\u5355\u4f4d\u6839\uff09\n\n\u5bf9\u4e8e\u4efb\u610f $n$ \u6b21\u5355\u4f4d\u6839 $\\omega$\uff0c\u90fd\u5b58\u5728**\u552f\u4e00\u7684** $d|n$\uff0c\u4f7f\u5f97 $\\omega$ \u662f $d$ \u6b21\u672c\u539f\u5355\u4f4d\u6839\u3002  \n\u800c $\\phi_d(x)$ \u7684\u6839\u4e5f\u662f $n$ \u6b21\u5355\u4f4d\u6839\u3002  \n\u56e0\u6b64 $x^n-1$ \u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a\u5206\u5706\u591a\u9879\u5f0f\u7684\u4e58\u79ef\uff1a\n\n$$x^n-1=\\prod_{d|n}\\phi_d(x)$$\n\u7136\u540e\u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c$\\phi_d(x)$ \u600e\u4e48\u7b97\uff1f  \n\n\u4e24\u8fb9\u53d6\u5bf9\u6570\uff0c\u5f97\n\n$$\\ln(x^n-1)=\\sum_{d|n}\\ln\\phi_d(x)$$\n\u770b\u5230\u8fd9\u4e2a\u5f62\u5f0f\u60f3\u5230\u4ec0\u4e48\uff1f\u6ca1\u9519\uff0c\u5c31\u662f mobius \u53cd\u6f14\u3002\n$$\\ln\\phi_n(x)=\\sum_{d|n}\\ln(x^d-1)\\mu\\left(\\frac nd \\right)$$\n\u518d $\\exp$ \u56de\u53bb\uff0c\u7ed3\u679c\u5c31\u51fa\u6765\u4e86\n$$\\phi_n(x)=\\prod_{d|n}(x^d-1)^{\\mu\\left(\\frac nd \\right)}$$\n\u8f93\u51fa\u6bd4\u8f83\u6bd2\u7624\uff0c\u9700\u8981\u7a0d\u5fae\u6ce8\u610f\u4e00\u4e0b\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u4e0d\u4f1a\u7b97\uff08\n```cpp\n#pragma GCC optimize (2)\n#pragma GCC optimize (\"unroll-loops\")\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#define N 6003\n#define ll long long\n#define reg register\n#define p 998244353\nusing namespace std;\n\nint mu[N],pr[N>>1];\nbool vis[N];\n\nstruct poly{\n    int a[N];\n    int t;\n    inline poly(int t=0):t(t){ memset(a,0,sizeof(a)); }\n    inline int operator [] (const int& x) const{ return a[x]; }\n    inline int& operator [] (const int& x){ return a[x]; }\n\n    inline bool operator < (const poly& b) const{\n        if(t!=b.t) return t < b.t;\n        for(reg int i=t;~i;--i){\n            if(abs(a[i])!=abs(b[i])) return abs(a[i])<abs(b[i]);\n            if(a[i]!=b[i]) return a[i]<b[i];\n        }\n        return true;\n    }\n\n    inline void print(){\n        if(abs(a[t])!=1) printf(\"%dx^%d\",a[t],t);\n        else{\n            if(t==1) putchar('x');\n            else printf(\"x^%d\",t);\n        }\n        for(reg int i=t-1;i;--i){\n            if(a[i]==0) continue;\n            if(a[i]>0) putchar('+');\n            else putchar('-');\n            if(abs(a[i])!=1) printf(\"%dx\",abs(a[i]));\n            else putchar('x');\n            if(i!=1) printf(\"^%d\",i);\n        }\n        printf(a[0]>0?\"+1\":\"-1\");\n    }\n}phi[73];\n\nvoid sieve(int n){\n    int cnt = 0;\n    mu[1] = 1;\n    for(reg int i=2;i<=n;++i){\n        if(!vis[i]){\n            pr[++cnt] = i;\n            mu[i] = -1;\n        }\n        for(reg int j=1;j<=cnt&&i*pr[j]<=n;++j){\n            vis[i*pr[j]] = true;\n            if(i%pr[j]==0){\n                mu[i*pr[j]] = 0;\n                break;\n            }\n            mu[i*pr[j]] = -mu[i];\n        }\n    }\n}\n\ninline void multiply(poly &f,int d){\n    f.t += d;\n    for(reg int i=f.t;i>=d;--i) f[i] = f[i-d]-f[i];\n    for(reg int i=0;i!=d;++i) f[i] = -f[i];\n}\n\ninline poly getphi(int n){\n    static poly mul,div,res;\n    mul = div = poly();\n    mul[0] = div[0] = 1;\n    for(reg int d=1;d*d<=n;++d){\n        if(n%d!=0) continue;\n        if(mu[n/d]==1) multiply(mul,d);\n        else if(mu[n/d]==-1) multiply(div,d);\n        if(d*d==n) continue;\n        if(mu[d]==1) multiply(mul,n/d);\n        else if(mu[d]==-1) multiply(div,n/d);\n    }\n    if(div.t==0) return mul;\n    res.t = mul.t-div.t;\n    res[0] = mul[0]*div[0];\n    for(reg int i=1;i<=res.t;++i){\n        res[i] = mul[i];\n        for(reg int j=0;j!=i;++j) res[i] -= res[j]*div[i-j];\n        res[i] *= div[0];\n    }\n    return res;\n}\n\nint n,fc;\n\nint main(){\n    scanf(\"%d\",&n);\n    sieve(n);\n    for(reg int i=1;i*i<=n;++i){\n        if(n%i!=0) continue;\n        phi[++fc] = getphi(i);\n        if(i*i!=n) phi[++fc] = getphi(n/i);\n    }\n    if(fc==1){\n        phi[1].print();\n        return 0;\n    }\n    sort(phi+1,phi+1+fc);\n    for(reg int i=1;i<=fc;++i){\n        putchar('(');\n        phi[i].print();\n        putchar(')');\n    }\n    return 0;   \n}\n```",
        "postTime": 1583039109,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1520 \u3010\u56e0\u5f0f\u5206\u89e3\u3011"
    },
    {
        "content": "\u8981\u7528\u5230\u201c\u5206\u5706\u591a\u9879\u5f0f\u201d\u3002\n\n\u6240\u8c13\u5206\u5706\u591a\u9879\u5f0f\uff0c\u662f\u8bf4\u5b83\u7684 \\*\u590d\u6570\u6839\\* \u80fd\u591f\u5e73\u5747\u5206\u4e00\u4e2a\u5706\u3002\n\n\u7b2cn\u4e2a\u5206\u5706\u591a\u9879\u5f0f\u7528phi(n)\u6765\u8868\u793a\uff0c\u524d\u51e0\u4e2a\u662f\uff1aphi(1) = x-1\uff0c phi(2) = x+1, phi(3) = x^2+x+1\uff0c phi(4) = x^2+1\u3002\n\n\u4ed4\u7ec6\u770b\u4e00\u770b\u3002\u53d1\u73b0\uff0c phi(n)\u7684\u6839\u662fx^n-1\u7684\u6839\u3002\u5373phi(n)\u7684\u6839\u7684n\u6b21\u65b9\u7b49\u4e8e1\u3002\u8fd9\u4e2a\u6839\u4ece\u590d\u5e73\u9762\u4e0a\u7684(1, 0)\u51fa\u53d1\uff0c \u81ea\u4e58n\u6b21\u4e4b\u540e\u56de\u5230(1, 0)\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u628a\u5706x^2+y^2=1\u5206\u6210\u4e86n\u7b49\u5206\u3002\n\n\n#\u5206\u5706\u591a\u9879\u5f0f\u7684\u6027\u8d28\n\n(i)\u662f\u6574\u7cfb\u6570\u591a\u9879\u5f0f\u3002\n\n(ii)\u662f\u4e0d\u53ef\u7ea6\u591a\u9879\u5f0f\uff08\u5373\u5728\u4ee5x^n-1=0\u7684\u89e3\u4e3a\u6839\u7684\u591a\u9879\u5f0f\u91cc\u9762\uff0c\u5b83\u662f\u6b21\u6570\u6700\u5c0f\u7684\u6574\u7cfb\u6570\u591a\u9879\u5f0f\uff09\u3002\n\n\n(iii)\u662f\u9996\u4e00\u7684\uff08\u9996\u9879\u7cfb\u6570\u662f1\uff09\u3002\n\n(iv)\u6210\u7acb\u516c\u5f0f\uff1ax^n-1 = \u220f[ d|n ]phi(d)\uff0c\u5373\uff0c x^n-1 = (\u5168\u90e8phi(d)\u7684\u79ef\uff0c\u5176\u4e2dd\u6574\u9664n)\u3002\n\n#\u5206\u5706\u591a\u9879\u5f0f\u600e\u4e48\u7528\n\n\u516c\u5f0f\u548c\u4e0d\u53ef\u7ea6\u6027\u544a\u8bc9\u6211\u4eec\uff0c**\u56e0\u5f0f\u5206\u89e3x^n-1\u662f\u220f[ d|n ]phi(d)**\uff0c\u6240\u4ee5\u6c42\u51faphi(d)\u518d\u4e58\u8d77\u6765\u5373\u53ef\uff08\u624b\u52a8\u7b97\u4e00\u7b97\uff09\n\n\n\u4f8b1\uff0c\u6c42phi(4)\u3002\n\n\u9996\u5148\u6c42phi(2) = (x^2-1) / phi(1)\uff0c\n\n\u5012\u56de\u53bb\u6c42phi(4) = (x^4-1)  / (phi(2) \\* phi(1)) = x^2+1\u3002\n\n\n\u4f8b2\uff0c \u6c42phi(12)\u3002\n\n\u516c\u5f0f\u8bf4\u9700\u8981\u6c42phi(1), phi(2), phi(3), phi(4), phi(6)\u3002\n\n\u770b\u6211\u7684\uff1aphi(3) = (x^3-1) / phi(1) = x^2+x+1\uff0c\n\n\u4ece\u800cphi(6) = (x^6-1) / (phi(1) \\* phi(2) \\* phi(3)) = x^2-x+1\uff0c\n\n\u6700\u540ephi(12) = (x^12-1) / (phi(1) \\* phi(2) \\* phi(3) \\* phi(4) \\* phi(6)) = x^4-x^2+1\u3002\n\n\n\u6700\u540e\u9644\u4e0a\u4e11\u4e11\u7684\u4ee3\u7801\n\n```cpp\n//\u6c42\u5206\u5706\u591a\u9879\u5f0f \n#include <iostream>\n#include <string.h>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nstruct poly{int cof[5001];int size;} CIR[5001];//CIR\u4ee3\u8868\u5206\u5706\u591a\u9879\u5f0f\uff0c cof\u4ee3\u8868\u7cfb\u6570 ,size\u662f\u6700\u9ad8\u6b21\u6570 \nint factor[5000];\npoly FACTOR[400];\nint counter = 0;\nbool cmp(int aa, int bb){return aa<bb;}//\u6bd4\u8f83\u6574\u6570\u5927\u5c0f \nbool cmp2(poly aa, poly bb)//\u6bd4\u8f83\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u5e8f \n{\n    if (aa.size<bb.size)    return 1;\n    if (aa.size>bb.size)return 0;\n    for (int i = aa.size;i>=0;i--)\n    {\n        if (abs(aa.cof[i])<abs(bb.cof[i]))    return 1;\n        if (abs(aa.cof[i])>abs(bb.cof[i]))return 0;\n        if (aa.cof[i]<0 && bb.cof[i]>0)    return 1;\n        if (aa.cof[i]>0 && bb.cof[i]<0)    return 0;\n    }\n    return 1;\n}\nint divisionPoly(poly* A, poly* B, poly* aim)//\u9996\u4e00\u591a\u9879\u5f0f\u7684\u76f8\u9664 \n{\n    int sizeA = A->size;\n    int sizeB = B->size;\n    if (sizeA<sizeB)    return -1;//\u5982\u679c\u4e0d\u80fd\u9664\uff0c\u90a3\u5c31return\n    \n    //\u4e00\u4e9b\u4e34\u65f6\u53d8\u91cf \n    poly AIM;\n    memset(AIM.cof, 0, sizeof(AIM.cof));\n    AIM.size = sizeA-sizeB;\n    int s = AIM.size;\n    poly A_ = *A;\n    \n    //\u5f00\u59cb\u8ba1\u7b97\u7ed3\u679c \n    while (s+1)\n    {\n        int k = A_.cof[s+B->size];\n        AIM.cof[s] = k;\n        for (int i = B->size;i>=0;i--)//\u4f5c\u51cf\u6cd5 \n        {\n            A_.cof[i+s] -= k*B->cof[i];\n        }\n        \n        s--;\n    }\n    \n    //\u628a\u4e34\u65f6\u53d8\u91cfAIM\u8d4b\u7ed9*aim\n    *aim = AIM;\n    return 0;\n}\nint output(poly* a)//\u6253\u5370\u591a\u9879\u5f0f \n{\n    int flag = 1;\n    for (int i = a->size;i>=0;i--)\n    {\n        if (a->cof[i]==0)continue;\n        if (i==0)\n        {\n            if (a->cof[i]>0 && !flag)    cout<<\"+\";\n            cout<<a->cof[i];\n            continue;\n        }\n        if (flag)\n        {\n            flag = 0;if (a->cof[i]<0)cout<<'-';\n        }\n        else\n        {\n            if (a->cof[i]>0)    cout<<'+';\n            else cout<<\"-\";\n        }\n        int t = (a->cof[i]>0?a->cof[i]:-(a->cof[i]));\n        if (t!=1)cout<<t;\n        if (i==1)cout<<\"x\";\n        else cout<<\"x^\"<<i;\n    }\n    return 0;\n}\nint main()\n{\n    int n = 0;\n    cin>>n;\n    if (n==1)\n    {\n        cout<<\"x-1\";\n        return 0;\n    }\n    \n    for (int i = 1;i<=sqrt(n);i++)    if (n%i==0)//\u8ba1\u7b97n\u7684\u5168\u90e8\u56e0\u6570\uff08\u6ce8\u610f\u662f\u5168\u90e8\uff09 \n    {\n        factor[++counter] = i;\n        if (i*i!=n)    factor[++counter] = n/i;\n    }\n    sort(factor+1, factor+1+counter, cmp);//\u6392\u597d \n    \n    \n    for (int i = 1;i<=counter;i++)//\u6700\u540e\u4e00\u6b65 \n    {\n        int t = factor[i];//t\u662fn\u7684\u7b2ci\u4e2a\u56e0\u6570 \n        CIR[t].cof[t] = 1;\n        CIR[t].cof[0] = -1;\n        CIR[t].size = t;//\u521d\u59cb\u4e3ax^t-1 \n        \n\n        for (int k = 1;k<=(int)sqrt(t);k++)    if (t%k==0)//\u5206\u5706\u591a\u9879\u5f0f\u7684\u8ba1\u7b97\u516c\u5f0f \n        {\n            if (t==1)break;\n            divisionPoly(&CIR[t], &CIR[k], &CIR[t]);\n            if (k*k!=t && k!=1)\n                divisionPoly(&CIR[t], &CIR[t/k], &CIR[t]);\n        }        \n        FACTOR[i] = CIR[t];\n\n    }\n    sort(FACTOR+1, FACTOR+counter+1, cmp2);//\u591a\u9879\u5f0f\u6392\u5e8f \n    for (int i = 1;i<=counter;i++)//\u8f93\u51fa \n    {\n        cout<<\"(\";\n        output(&FACTOR[i]);\n        cout<<\")\";\n        \n    }\n    return 0;\n}\n```",
        "postTime": 1484037926,
        "uid": 28589,
        "name": "lala123iop",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1520 \u3010\u56e0\u5f0f\u5206\u89e3\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u9898\u554a\uff0c\u6211\u975e\u5e38\u719f\u6089\uff0c\u5f53\u65f6\u6211\u4eec\u5e74\u7ea7\u7559\u4e86\u4e00\u9053\u601d\u8003\u9898\u5c31\u662f\u56e0\u5f0f\u5206\u89e3x^105 -1\uff0c\u5141\u8bb8\u7528\u6570\u5b66\u6216\u7f16\u7a0b\u7684\u65b9\u6cd5\u505a\uff0c\u6211\u4e00\u4e0b\u5c31\u60f3\u5230\u4e86\u8fd9\u9898\uff0c\u5f53\u7136\uff0c\u6700\u540e\u4e5f\u505a\u4e86\u51fa\u6765\u3002\u4e0b\u9762\uff0c\u5c31\u8ba9\u6211\u7ed9\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\u6211\u7684\u65b9\u6cd5\u5427~\n\n1.\u5206\u5706\u591a\u9879\u5f0f\n\u505a\u8fd9\u9898\u5206\u5706\u591a\u9879\u5f0f\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u77e5\u8bc6\u3002\u5bf9\u4e8e\u6574\u7cfb\u6570\u591a\u9879\u5f0f\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u4e8b\u5b9e:\u5982\u679c\u591a\u9879\u5f0ff(x)\u5728\u6709\u7406\u6570\u57df\u4e0a\u53ef\u7ea6,\u90a3\u4e48\u5bf9\u4efb\u610f\u7684\u7d20\u6570p\uff0cf(x)\u4e5f\u53ef\u7ea6\u3002\u53cd\u8fc7\u6765\uff0c\u5982\u679c\u5b58\u5728\u7d20\u6570p,f(x)\u4e0d\u53ef\u7ea6,\u90a3\u4e48f(x)\u5fc5\u5b9a\u662f\u4e0d\u53ef\u7ea6\u7684\uff0c\u8fd9\u5c31\u4e3a\u5224\u5b9a\u4e0d\u53ef\u7ea6\u591a\u9879\u5f0f\u63d0\u4f9b\u4e86\u53e6\u4e00\u4e2a\u6709\u6548\u7684\u6cd5\u5219\uff0c\u5b83\u628a\u6709\u7406\u6570\u57df(\u6574\u6570\u73af)\u4e0a\u7684\u591a\u9879\u5f0f\u8f6c\u5316\u5230\u4e86\u4e00\u4e2a\u6709\u9650\u57df\u4e0a\u53bb\u4e86\uff0c\u8fd9\u4e2a\u6709\u9650\u57df\u6b63\u662f\u7d20\u57dfZp\u3002\u8fd9\u6837\u4e8b\u5b9e\u4e0a\u6211\u4eec\u5fc5\u987b\u8981\u5efa\u7acb\u6709\u9650\u57df\u4e0a\u7684\u591a\u9879\u5f0f\u7684\u7406\u8bba\uff0c\u624d\u80fd\u66f4\u597d\u7684\u5e94\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u4e0b\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u5178\u578b\u5e94\u7528\uff1a\n\u6211\u4eec\u5c06\u591a\u9879\u5f0f  \u5206\u89e3\uff0c\u5b83\u6240\u5206\u89e3\u5f97\u5230\u7684\u4e0d\u53ef\u7ea6\u591a\u9879\u5f0f\u79f0\u4e3a\u5206\u5706\u591a\u9879\u5f0f\u3002\u4e8b\u5b9e\u4e0a,\u5206\u5706\u591a\u9879\u5f0f\u7684\u5b9a\u4e49\u53ef\u4ee5\u7528\u4ee5\u4e0b\u7684\u65b9\u5f0f\u6765\u5f97\u5230\uff1a\u8bbe\u03b5\u662f  \u7684\u4e00\u4e2a\u6839,\u5373\u03b5\u662fn\u6b21\u5355\u4f4d\u6839\uff0c\u5982\u679c\u5bf9\u4efb\u610f\u7684\u81ea\u7136\u6570k<n,\u03b5\u90fd\u4e0d\u662fx^k-1\u7684\u6839\uff0c\u90a3\u4e48\u79f0\u03b5\u4e3an\u6b21\u672c\u539f\u5355\u4f4d\u6839.\u7531\u6240\u6709n\u6b21\u672c\u539f\u5355\u4f4d\u6839\u6784\u6210\u7684\u591a\u9879\u5f0f\u5c31\u79f0\u4e3an\u6b21\u5206\u5706\u591a\u9879\u5f0f\u3002\n\u4e0a\u4ee3\u7801\uff0c\u849f\u84bb\u4e00\u679a\uff0c\u5927\u4f6c\u52ff\u55b7\uff01\n\n```cpp\n#include<bits/stdc++.h>\n#define _ 0 //\u770b\u6700\u540e\u4e00\u884c\u5c31\u660e\u767d\u5566~ \nusing namespace std;\nstruct wow\n{\n\tint zhe[5001], hehe;\n\tfriend bool operator < (wow a, wow b)\n\t{\n    \tif(a.hehe < b.hehe )return true;\n\t    if(a.hehe > b.hehe)return false;\n    \tfor(int i = a.hehe; i >= 0; i--)\n\t\t{\n        \tif(abs(a.zhe[i]) < abs(b.zhe[i]))return true;\n        \tif(abs(a.zhe[i]) > abs(b.zhe[i]))return false;\n        \tif(a.zhe[i] < 0 && b.zhe[i] > 0)return true;\n        \tif(a.zhe[i] > 0 && b.zhe[i] < 0)return false;\n    \t}\n    \treturn true;\n\t}\n}ti[5001];\nint zhen[5000], tot = 0, n;\nwow hao[400];\nvoid wan(wow a, wow &b, wow &update)\n{\n    int alen = a.hehe, blen = b.hehe;\n    if(alen < blen)return;\n    wow temp;\n    memset(temp.zhe, 0, sizeof(temp.zhe)); \n    int s = temp.hehe=alen-blen;\n    while(s + 1)\n\t{\n        int k = a.zhe[s + b.hehe];\n        temp.zhe[s] = k;\n        for(int i = b.hehe; i >= 0; i--)\n            a.zhe[i + s] -= k * b.zhe[i];\n        s--;\n    }\n    update = temp;\n    return;\n}\nvoid print(wow a)\n{\n    int flag = 1;\n    for(int i = a.hehe; i >= 0; i--)\n\t{\n        if(a.zhe[i] == 0)continue;\n        if(i == 0)\n\t\t{\n            if(a.zhe[i] > 0 && !flag)putchar('+');\n            cout << a.zhe[i];\n            continue;\n        }\n        if(flag)\n\t\t{\n            flag = 0;\n\t\t\tif(a.zhe[i] < 0)putchar('-');\n        }\n        else\n\t\t{\n            if(a.zhe[i] > 0)putchar('+');\n            else putchar('-');\n        }\n        int t = (a.zhe[i] > 0 ? a.zhe[i]:-(a.zhe[i]));\n        if(t != 1)cout << t;\n        if(i == 1)putchar('x');\n        else printf(\"x^%d\", i);\n    }\n    return;\n}\nint main()\n{\n    cin >> n;\n    if(n == 1)\n\t{\n        puts(\"x-1\");\n        return ~~(0^_^0);//define _ 0\u7528\u4e0a\u4e86\u5427~ \n    }\n    for(int i = 1; i <= sqrt(n); i++)\n\t\tif(n % i == 0)\n\t\t{\n        \tzhen[++tot] = i;\n        \tif(i * i != n)zhen[++tot] = n / i;\n\t\t}\n    sort(zhen + 1, zhen + tot + 1);\n    for(int i = 1; i <= tot; i++)\n\t{\n        int t = zhen[i];\n        ti[t].zhe[t] = 1;\n        ti[t].zhe[0] = -1;\n        ti[t].hehe = t;\n        for(int k = 1; k <= (int)sqrt(t); k++)    \n\t\tif(t % k == 0)\n\t\t{\n        \tif(t == 1)break;\n            wan(ti[t], ti[k], ti[t]);\n            if(k * k != t && k != 1)\n                wan(ti[t], ti[t / k], ti[t]);\n        }\n        hao[i] = ti[t];\n    }\n    sort(hao + 1, hao + tot + 1);\n    for(int i = 1; i <= tot; i++)\n\t{\n        putchar('(');\n        print(hao[i]);\n        putchar(')');\n    }\n    return ~~(0^_^0);//\u795d\u5927\u5bb6\u5f00\u5fc3\u6bcf\u4e00\u5929\u9e2d~~~ \n}\n```\n",
        "postTime": 1551601411,
        "uid": 146288,
        "name": "whale_gang",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37P1520\u9898\u89e3"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P1520)\n\n[\u53cc\u500d\u7ecf\u9a8c](https://codeforces.com/group/dIUimH0NFa/contest/375216/problem/C)\n\n---\n\n**\u3010\u5206\u6790\u3011**\n--\n\n\u5b9a\u4e49\u5206\u5706\u591a\u9879\u5f0f $\\displaystyle \\Phi_n(x)=\\prod_{i=0}^{n-1} (x-\\omega_n^i)^{[\\gcd(n, i)=1]}$ \uff0c\u5176\u4e2d $\\omega_n^i$ \u4e3a $n$ \u6b21\u5355\u4f4d\u6839\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u7684\u662f\uff0c\u6240\u6709\u7684\u5206\u5706\u591a\u9879\u5f0f\u90fd\u662f\u6574\u6570\u57df\u4e0a\u4e0d\u53ef\u518d\u5206\u89e3\u7684\u7d20\u591a\u9879\u5f0f\u3002\n\n\u6211\u4eec\u89c2\u5bdf\u5f0f\u5b50\u663e\u7136\u80fd\u53d1\u73b0\uff0c\u8be5\u5206\u5706\u591a\u9879\u5f0f\u7684\u6700\u9ad8\u6b21\u4e3a\u6b27\u62c9\u51fd\u6570 $\\boldsymbol \\varphi(n)$ \uff0c\u4e14\u7cfb\u6570\u5fc5\u5b9a\u4e3a $1$ \u3002\n\n\u800c\u8fd9\u4e2a\u5f0f\u5b50\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u8003\u8651 $x^n-1=0$ \u7684\u6240\u6709\u89e3\uff0c\u6070\u597d\u4e3a $\\omega_n^0,\\omega_n^1,\\cdots, \\omega_n^{n-1}$ \u3002\n\n\u56e0\u6b64\uff0c\u663e\u7136\u6709\uff1a\n\n$\\begin{aligned}\n\tx^n-1&=\\prod_{i=0}^{n-1}(x-\\omega_n^i)\n    \\\\&=\\prod_{d\\mid n}\\prod_{i=0}^{n-1}(x-\\omega_n^i)^{[\\gcd(n, i)=d]}\n    \\\\&=\\prod_{d\\mid n}\\prod_{i=0}^{{n\\over d}-1}(x-\\omega_{n\\over d}^i)^{[\\gcd({n\\over d}, i)=1]}\n    \\\\&=\\prod_{d\\mid n}\\Phi_{n\\over d}(x)\n\\end{aligned}$\n\n\u5373 $x^n-1$ \u5728\u6574\u6570\u57df\u4e0a\u5206\u89e3\u4e3a\u7d20\u591a\u9879\u5f0f\uff0c\u5373\u9700\u8981\u8f93\u51fa $n$ \u7684\u6240\u6709\u56e0\u6570 $d$ \u5bf9\u5e94\u7684\u5206\u5706\u591a\u9879\u5f0f $\\Phi_d(x)$ \u3002\n\n---\n\n\u5206\u5706\u591a\u9879\u5f0f $\\Phi_n(x)$ \u7684\u6c42\u6cd5\u5219\u662f\u6839\u636e\u4e0a\u9762\u90a3\u4e2a\u5f0f\u5b50\uff1a\n\n$\\begin{aligned}\n\tx^n-1&=\\prod_{d\\mid n}\\Phi_d(x)\n    \\\\\\ln(x^n-1)&=\\sum_{d\\mid n}\\ln \\Phi_d(x)&(\\text{\u4e24\u8fb9\u53d6 }\\ln)\n    \\\\\\ln\\phi_n(x)&=\\sum_{d\\mid n}\\ln(x^d-1)\\cdot \\boldsymbol \\mu({n\\over d})&(\\text{\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14})\n    \\\\\\Phi_n(x)&=\\prod_{d\\mid n}(x^d-1)^{\\boldsymbol \\mu({n\\over d})}&(\\text{\u4e24\u8fb9\u53d6 }\\exp)\n    \\\\\\Phi_n(x)&=(-1)^{\\sum_{d\\mid n}\\boldsymbol \\mu(d) }\\cdot \\prod_{d\\mid n}(1-x^{n\\over d})^{\\boldsymbol \\mu(d)}\n    \\\\\\Phi_n(x)&=(-1)^{[n=1]}\\cdot \\prod_{d\\mid n}(1-x^{n\\over d})^{\\boldsymbol \\mu(d)}\n\\end{aligned}$\n\n\u8003\u8651\u5230 $\\boldsymbol \\mu(d)$ \u7684\u53d6\u503c\u53ea\u6709 $-1, 0, 1$ \u4e09\u79cd\uff0c\u4e0d\u59a8\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff1a\n\n$\\boldsymbol \\mu(d)=0$ \u65f6\uff0c$(1-x^{n\\over d})^0$ \u5bf9 $\\Phi_n(x)$ \u7684\u8ba1\u7b97\u6ca1\u6709\u610f\u4e49\uff0c\u76f4\u63a5\u7701\u7565\u3002\n\n\n$\\boldsymbol \\mu(d)=1$ \u65f6\uff0c$(1-x^{n\\over d})$ \u5bf9 $\\Phi_n(x)$ \u7684\u8ba1\u7b97\u7b49\u4ef7\u4e8e\u8dd1\u4e00\u4e2a01\u80cc\u5305\u3002\n\n\n$\\boldsymbol \\mu(d)=-1$ \u65f6\uff0c${1\\over 1-x^{n\\over d}}$ \u5bf9 $\\Phi_n(x)$ \u7684\u8ba1\u7b97\u7b49\u4ef7\u4e8e\u8dd1\u4e00\u4e2a\u5b8c\u5168\u80cc\u5305\u3002\n\n\u6211\u4eec\u5206\u7c7b\u5b58\u50a8\u4e00\u4e0b\u6bcf\u4e2a $\\boldsymbol \\mu(d)$ \u975e\u96f6\u7684 $d$ \uff0c\u5bf9\u4e8e\u500d\u6570 $kd$ \u5bf9\u5e94\u7684\u5206\u5706\u591a\u9879\u5f0f $\\Phi_{kd}(x)$ \u8d21\u732e\u7684 $(1-x^k)$ \u7a76\u7adf\u662f01\u80cc\u5305\u8fd8\u662f\u5b8c\u5168\u80cc\u5305\u3002\n\n\u5355\u72ec\u628a $\\Phi_1(x)$ \u7684\u7b26\u53f7\u53d6\u53cd\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8bbe $\\omega(n)$ \u8868\u793a $n$ \u7684\u4e0d\u540c\u8d28\u56e0\u5b50\u6570\uff0c\u5219\u6c42\u89e3 $\\Phi_n(x)$ \u65f6\uff0c\u7531\u4e8e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5bb9\u65a5\uff0c\u6700\u591a\u53ea\u4f1a\u8dd1 $2^{\\omega(n)}$ \u6b21\u7684\u80cc\u5305\uff0c\u6bcf\u6b21\u80cc\u5305\u7684\u5bb9\u79ef\u53c8\u4e3a $\\boldsymbol \\varphi(n)$ \u3002\u6545\u6c42\u89e3\u5355\u4e2a $\\Phi_n(x)$ \u7684\u590d\u6742\u5ea6\u4e3a $O(2^{\\omega(n)}\\cdot \\boldsymbol \\varphi(n))$ \u3002\n\n\u6545\u6c42\u89e3\u7684\u603b\u590d\u6742\u5ea6\u4e3a $O(\\displaystyle \\sum_{d\\mid n}2^{\\omega(d)}\\cdot \\boldsymbol \\varphi(d))$ \u3002\n\n\u7531\u4e8e $\\omega(n)$ \u4e3a\u52a0\u6027\u51fd\u6570\uff0c$\\boldsymbol \\varphi(n)$ \u4e3a\u79ef\u6027\u51fd\u6570\uff1b\u6545 $2^{\\omega(n)}$ \u4e3a\u79ef\u6027\u51fd\u6570\uff1b\u7531\u4e24\u4e2a\u79ef\u6027\u51fd\u6570\u7684\u70b9\u79ef\u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u4e24\u4e2a\u79ef\u6027\u51fd\u6570\u7684\u8fea\u5229\u514b\u96f7\u5377\u79ef\u4e5f\u4e3a\u79ef\u6027\u51fd\u6570\uff1b\u6545\u590d\u6742\u5ea6\u7684\u8fd9\u4e2a\u51fd\u6570\u662f\u4e2a\u79ef\u6027\u51fd\u6570\uff0c\u53ef\u4ee5\u7531\u7ebf\u7b5b\u5f97\u51fa\u3002\n\n\u7ecf\u8fc7\u7b5b\u6cd5\u6c42\u89e3\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728 $5\\times 10^3$ \u8303\u56f4\u5185\uff0c\u6700\u5927\u503c\u4e3a $110565$ \u3002\n\n---\n\n**\u3010\u4ee3\u7801\u3011**\n--\n\n\u6ce8\u610f\u4e00\u4e0b\u591a\u9879\u5f0f\u7684\u6392\u5e8f\u65b9\u5f0f\u548c\u8f93\u51fa\u89c4\u8303\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconstexpr int Lim=1e5, MAXN=Lim+10;\nint prime[MAXN], cntprime, fc[MAXN], phi[MAXN], mu[MAXN];\ninline void sieve() {\n\tphi[1]=mu[1]=1;\n\tfor(int i=2; i<=Lim; ++i) {\n\t\tif(!fc[i]) {\n\t\t\tfc[i]=prime[++cntprime]=i;\n\t\t\tphi[i]=i-1;\n\t\t\tmu[i]=-1;\n\t\t}\n\t\tfor(int j=1; j<=cntprime; ++j)\n\t\t\tif(prime[j]*i>Lim) break;\n\t\t\telse if(prime[j]==fc[i]) {\n\t\t\t\tfc[prime[j]*i]=prime[j];\n\t\t\t\tphi[prime[j]*i]=prime[j]*phi[i];\n\t\t\t\tmu[prime[j]*i]=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfc[prime[j]*i]=prime[j];\n\t\t\t\tphi[prime[j]*i]=phi[prime[j]]*phi[i];\n\t\t\t\tmu[prime[j]*i]=-mu[i];\n\t\t\t}\n\t}\n}\n\nvector<int> con[MAXN][2], d[MAXN];\ninline void init() {\n\tsieve();\n\tfor(int i=1; i<=Lim; ++i) if(mu[i])\n\t\tfor(int j=i, k=1; j<=Lim; j+=i, ++k)\n\t\t\tcon[j][mu[i]==1].push_back(k);\n\tfor(int i=1; i<=Lim; ++i)\n\t\tfor(int j=i; j<=Lim; j+=i)\n\t\t\td[j].push_back(i);\n}\n\nstruct poly : vector<int> {\n\tinline bool operator < (const poly &x) const {\n\t\tif(size()!=x.size())\n\t\t\treturn size()<x.size();\n\t\tfor(int i=size()-1; i>=0; --i)\n\t\t\tif(abs(at(i))!=abs(x[i]))\n\t\t\t\treturn abs(at(i))<abs(x[i]);\n\t\t\telse if((at(i)<0)^(x[i]<0))\n\t\t\t\treturn at(i)<0;\n\t\treturn 0;\n\t}\n\tinline friend ostream& operator << (ostream& out, const poly &p) {\n\t\tout<<\"(\";\n\t\tfor(int I=p.size()-1, i=I; i>=0; --i) {\n\t\t\tif(p[i]==0) continue;\n\t\t\tif(i!=I&&p[i]>0) out<<\"+\";\n\t\t\tif(i==0) {\n\t\t\t\tout<<p[i];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(p[i]==-1) out<<\"-\";\n\t\t\telse if(p[i]!=1) out<<p[i];\n\t\t\tif(i>1) out<<\"x^\"<<i;\n\t\t\telse if(i==1) out<<\"x\";\n\t\t}\n\t\treturn out<<\")\";\n\t}\n}p[MAXN];\nbool vis[MAXN];\ninline void calc(int n) {\n\tpoly& phin=p[n];\n\tphin.resize(phi[n]+1);\n\tphin[0]=1;\n\tfor(auto e : con[n][1])\n\t\tfor(int i=phi[n]; i>=e; --i)\n\t\t\tphin[i]-=phin[i-e];\n\tfor(auto e : con[n][0])\n\t\tfor(int i=e, I=phi[n]; i<=I; ++i)\n\t\t\tphin[i]+=phin[i-e];\n\tvis[n]=1;\n}\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\tinit();\n\tcalc(1); for(auto &e : p[1]) e=-e;\n\tint T=1, n;\n\twhile(T--&&cin>>n) {\n\t\tif(n==1) {\n\t\t\tcout<<\"x-1\\n\";\n\t\t\tbreak;\n\t\t}\n\t\tfor(auto e : d[n]) \n\t\t\tif(!vis[e])\n\t\t\t\tcalc(e);\n\t\tsort(d[n].begin(), d[n].end(), [](int a, int b) { return p[a]<p[b]; });\n\t\tfor(auto e : d[n])\n\t\t\tcout<<p[e];\n\t\tcout<<\"\\n\";\n\t}\n\tcout.flush();\n\treturn 0;\n}\n```\n\n---\n\n\u5173\u4e8e\u53cc\u500d\u7ecf\u9a8c\u7684\u9898\u76ee\uff08\u5176\u5b9e\u6211\u662f\u5148\u505a\u4e86\u53cc\u500d\u7ecf\u9a8c\u7684\u9898\u76ee\u518d\u56de\u6765\u505a\u8fd9\u9898\u7684\uff09\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u66f4\u5927\uff0c\u8fd8\u52a0\u5165\u4e86 $T$ \u7ec4\u6570\u636e\uff0c\u5982\u679c\u66b4\u529b\u8dd1\u7684\u8bdd\u53ef\u80fd\u590d\u6742\u5ea6\u4e0d\u591f\u3002\n\n\u540c\u4e0a\u6587\u7684\u5206\u6790\uff0c\u5728\u8dd1\u6ee1\u7684\u60c5\u51b5\u4e0b\uff0c\u590d\u6742\u5ea6\u6700\u52a3\u4f1a\u8fbe\u5230 $5014548\\times 100\\approx 5\\times 10^8$ \uff0c\u590d\u6742\u5ea6\u6bd4\u8f83\u5371\u9669\u3002\n\n\u672c\u4eba\u7684\u5904\u7406\u65b9\u5f0f\u662f\uff0c\u5148 $O(n\\log n)$ \u9884\u5904\u7406\uff0c\u628a\u6bcf\u4e2a $\\boldsymbol \\mu(d)$ \u4e0d\u4e3a\u96f6\u7684 $d$ \u5bf9\u500d\u6570 $kd$ \u8d21\u732e\u7684\u5230\u5e95\u662f $k$ \u768401\u80cc\u5305\u8fd8\u662f\u5b8c\u5168\u80cc\u5305\u5148\u8bb0\u5f55\u4e0b\u6765\u3002\n\n\u540e\u7eed\u8be2\u95ee\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7528 `vis` \u6570\u7ec4\u8868\u793a\u8fd9\u4e2a\u5206\u5706\u591a\u9879\u5f0f\u7684\u6700\u7ec8\u7b54\u6848\u662f\u5426\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u7684 $n$ \uff0c\u6211\u53bb\u8bbf\u95ee\u5b83\u7684\u6240\u6709\u56e0\u5b50\uff0c\u628a\u5b83\u56e0\u5b50\u4e2d\u6ca1\u5904\u7406\u8fc7\u7684\u5206\u5706\u591a\u9879\u5f0f\u7ed9\u7b97\u51fa\u6765\u3002\n\n\u867d\u7136\u6700\u52a3\u7684\u590d\u6742\u5ea6\u548c\u628a\u6240\u6709\u5206\u5706\u591a\u9879\u5f0f\u90fd\u8dd1\u4e00\u904d\u6ca1\u6709\u533a\u522b\uff0c\u4f46\u662f\u5728\u968f\u673a\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u4f1a\u66f4\u4f18\u3002\n\n\u6ce8\u610f\u4e24\u9898\u7684\u6392\u5e8f\u65b9\u5f0f\u4e0d\u540c\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconstexpr int Lim=1e5, MAXN=Lim+10;\nint prime[MAXN], cntprime, fc[MAXN], phi[MAXN], mu[MAXN];\ninline void sieve() {\n\tphi[1]=mu[1]=1;\n\tfor(int i=2; i<=Lim; ++i) {\n\t\tif(!fc[i]) {\n\t\t\tfc[i]=prime[++cntprime]=i;\n\t\t\tphi[i]=i-1;\n\t\t\tmu[i]=-1;\n\t\t}\n\t\tfor(int j=1; j<=cntprime; ++j)\n\t\t\tif(prime[j]*i>Lim) break;\n\t\t\telse if(prime[j]==fc[i]) {\n\t\t\t\tfc[prime[j]*i]=prime[j];\n\t\t\t\tphi[prime[j]*i]=prime[j]*phi[i];\n\t\t\t\tmu[prime[j]*i]=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfc[prime[j]*i]=prime[j];\n\t\t\t\tphi[prime[j]*i]=phi[prime[j]]*phi[i];\n\t\t\t\tmu[prime[j]*i]=-mu[i];\n\t\t\t}\n\t}\n}\n\nvector<int> con[MAXN][2], d[MAXN];\ninline void init() {\n\tsieve();\n\tfor(int i=1; i<=Lim; ++i) if(mu[i])\n\t\tfor(int j=i, k=1; j<=Lim; j+=i, ++k)\n\t\t\tcon[j][mu[i]==1].push_back(k);\n\tfor(int i=1; i<=Lim; ++i)\n\t\tfor(int j=i; j<=Lim; j+=i)\n\t\t\td[j].push_back(i);\n}\n\nstruct poly : vector<int> {\n\tinline bool operator < (const poly &x) const {\n\t\tif(size()!=x.size())\n\t\t\treturn size()<x.size();\n\t\tfor(int i=size()-1; i>=0; --i)\n\t\t\tif(at(i)!=x[i])\n\t\t\t\treturn at(i)<x[i];\n\t\treturn 0;\n\t}\n\tinline friend ostream& operator << (ostream& out, const poly &p) {\n\t\tout<<\"(\";\n\t\tfor(int I=p.size()-1, i=I; i>=0; --i) {\n\t\t\tif(p[i]==0) continue;\n\t\t\tif(i!=I&&p[i]>0) out<<\"+\";\n\t\t\tif(i==0) {\n\t\t\t\tout<<p[i];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(p[i]==-1) out<<\"-\";\n\t\t\telse if(p[i]!=1) out<<p[i];\n\t\t\tif(i>1) out<<\"x^\"<<i;\n\t\t\telse if(i==1) out<<\"x\";\n\t\t}\n\t\treturn out<<\")\";\n\t}\n}p[MAXN];\nbool vis[MAXN], sorted[MAXN];\ninline void calc(int n) {\n\tpoly& phin=p[n];\n\tphin.resize(phi[n]+1);\n\tphin[0]=1;\n\tfor(auto e : con[n][1])\n\t\tfor(int i=phi[n]; i>=e; --i)\n\t\t\tphin[i]-=phin[i-e];\n\tfor(auto e : con[n][0])\n\t\tfor(int i=e, I=phi[n]; i<=I; ++i)\n\t\t\tphin[i]+=phin[i-e];\n\tvis[n]=1;\n}\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\n\tinit();\n\tcalc(1); for(auto &e : p[1]) e=-e;\n\tint T, n; cin>>T;\n\twhile(T--&&cin>>n) {\n\t\tfor(auto e : d[n]) \n\t\t\tif(!vis[e])\n\t\t\t\tcalc(e);\n\t\tsort(d[n].begin(), d[n].end(), [](int a, int b) { return p[a]<p[b]; });\n\t\tfor(auto e : d[n])\n\t\t\tcout<<p[e];\n\t\tcout<<\"\\n\";\n\t}\n\tcout.flush();\n\treturn 0;\n}\n```",
        "postTime": 1648532723,
        "uid": 36031,
        "name": "JustinRochester",
        "ccfLevel": 4,
        "title": "P1520 \u56e0\u5f0f\u5206\u89e3 \u9898\u89e3"
    }
]