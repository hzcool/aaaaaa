[
    {
        "content": "### $kruskal$\u91cd\u6784\u6811\uff0c\u8f7b\u677e\u6700\u4f18\u89e3\u7b2c\u4e00\n\n\u8fd9\u4e2a\u4e1c\u897f\u4e3b\u8981\u6765\u5904\u7406\u6700\u5c0f\u751f\u6210\u6811\u7684\u6700\u5927\u8fb9\u6743\u95ee\u9898\n\n\u5f53\u7136\u4e5f\u53ef\u4ee5\u5904\u7406\u6700\u5927\u751f\u6210\u6811\u7684\u6700\u5c0f\u8fb9\u6743\u95ee\u9898\n\n\u5176\u5b9e\u8fd9\u4e2a\u91cd\u6784\u6811\u7684\u6838\u5fc3\u601d\u60f3\u8ddf $krsskal$\u5dee\u4e0d\u591a\n\n\u8fd9\u5f20\u56fe\u662f\u6837\u4f8b\u7684\u6700\u5c0f\u751f\u6210\u6811\n\n![\u56fe](https://cdn.luogu.com.cn/upload/pic/24706.png)\n\n\u800c\u8fd9\u5f20\u662f\u91cd\u6784\u6811\n\n![\u56fe](https://cdn.luogu.com.cn/upload/pic/24707.png )\n\n\u6211\u4eec\u770b\u5230\u53f3\u56fe\u91cc\u7684\u91cd\u6784\u6811\u4e2d\u591a\u4e86\u4e00\u4e9b\u65b9\u70b9\n\n\u8fd9\u4e9b\u65b9\u70b9\u662f\u600e\u4e48\u4ea7\u751f\u7684\u5462\n\n\u5176\u5b9e\u8fd9\u4e9b\u65b9\u70b9\u662f\u539f\u6765\u6700\u5c0f\u751f\u6210\u6811\u91cc\u7684\u8fb9\n\n\u6211\u4eec\u91cd\u6784\u6811\u7684\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\n\n   1. \u5c06\u6240\u6709\u8fb9\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\n   1.  \u6bcf\u6b21\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u6761\u8fb9\u76f8\u8fde\u7684\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u5c31\u8df3\u8fc7\uff0c\u5426\u5219\u5c31\u5c06\u8fd9\u4e24\u4e2a\u70b9\u7684\u7956\u5148\u90fd\u8fde\u5230\u4e00\u4e2a\u865a\u70b9\u4e0a\u53bb\uff0c\u8ba9\u8fd9\u4e2a\u865a\u70b9\u7684\u70b9\u6743\u7b49\u4e8e\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\n\n\u8fd9\u6837\u7684\u8bdd\u8fd9\u8bfe\u88ab\u91cd\u6784\u7684\u6811\u5c31\u6709\u4e00\u4e9b\u5947\u5999\u7684\u6027\u8d28\n\n   1. \u539f\u672c\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u70b9\u5728\u91cd\u6784\u6811\u91cc\u90fd\u662f\u53f6\u8282\u70b9\n   \n   1. \u4ece\u4efb\u4f55\u4e00\u4e2a\u70b9\u5f80\u6839\u4e0a\u5f15\u4e00\u6761\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u7684\u70b9\u6743\u5355\u8c03\u4e0d\u964d\uff08\u6700\u5927\u751f\u6210\u6811\u5355\u8c03\u4e0d\u5347\uff09\n\n   1. \u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u7684\u6700\u5927\u8fb9\u6743\u5c31\u662f\u4ed6\u4eec\u7684LCA\u7684\u70b9\u6743\n   \n\u4e8e\u662f\u6211\u4eec\u91cd\u6784\u6811\u4e4b\u540e\u627e\u4e00\u4e0bLCA\u5c31\u884c\u4e86\n\n\u8fd9\u91cc\u7528\u7684\u662f\u6811\u5256\uff0c\u8fd8\u662f\u633a\u5feb\u7684\n\n\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#define re register\n#define maxn 200001\nusing namespace std;\nstruct node\n{\n\tint v,nxt,w;\n}e[maxn<<2],a[maxn<<2];\nint n,m,k,num,Q;\nint fa[maxn],top[maxn],f[maxn],deep[maxn],head[maxn];\nint sum[maxn],son[maxn],key[maxn];\ninline int read()\n{\n\tchar c=getchar();\n\tint x=0;\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9') \n\t\tx=(x<<3)+(x<<1)+c-48,c=getchar();\n\treturn x;\n}\ninline int find(int x)\n{\n\tif(fa[x]==x) return x;\n\treturn fa[x]=find(fa[x]);\n}\ninline int add_edge(int x,int y)\n{\n\te[++num].v=y;\n\te[num].nxt=head[x];\n\thead[x]=num;\n}\nvoid dfs1(int r)\n{\n\tsum[r]=1;\n\tint maxx=-1;\n\tfor(re int i=head[r];i;i=e[i].nxt)\n\tif(!deep[e[i].v])\n\t{\n\t\tdeep[e[i].v]=deep[r]+1;\n\t\tf[e[i].v]=r;\n\t\tdfs1(e[i].v);\n\t\tsum[r]+=sum[e[i].v];\n\t\tif(sum[e[i].v]>maxx) maxx=sum[e[i].v],son[r]=e[i].v;\n\t}\n}\nvoid dfs2(int r,int topf)\n{\n\ttop[r]=topf;\n\tif(!son[r]) return;\n\tdfs2(son[r],topf);\n\tfor(re int i=head[r];i;i=e[i].nxt)\n\tif(deep[e[i].v]>deep[r]&&son[r]!=e[i].v) dfs2(e[i].v,e[i].v); \n}\ninline int LCA(int x,int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(deep[top[x]]<deep[top[y]]) swap(x,y);\n\t\tx=f[top[x]];\n\t}\n\tif(deep[x]<deep[y]) return x;\n\treturn y;\n}\ninline int cmp(node aa,node bb)\n{\n\treturn aa.w<bb.w;\n}\nint main()\n{\n\tn=read();\n\tm=read();\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\ta[i].v=read();\n\t\ta[i].nxt=read();\n\t\ta[i].w=read();\n\t}\n\tsort(a+1,a+m+1,cmp);\n\tfor(re int i=1;i<=(n<<1);i++) fa[i]=i;\n\tk=n;\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tint xx=find(a[i].v);\n\t\tint yy=find(a[i].nxt);\n\t\tif(xx==yy) continue;\n\t\tfa[xx]=fa[yy]=++k;\n\t\tadd_edge(k,xx);\n\t\tadd_edge(xx,k);\n\t\tadd_edge(k,yy);\n\t\tadd_edge(yy,k);\n\t\tkey[k]=a[i].w;\n\t}\n\tfor(re int i=k;i;i--)\n\tif(!deep[i]) deep[i]=1,dfs1(i),dfs2(i,i);\n\tQ=read();\n\tint x,y;\n\twhile(Q--)\n\t{\n\t\tx=read();\n\t\ty=read();\n\t\tif(find(x)!=find(y)) puts(\"impossible\");\n\t\telse printf(\"%d\",key[LCA(x,y)]),putchar(10);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1532219064,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "[\u98df\u7528\u94fe\u63a5\u5473\u9053\u66f4\u4f73qwq](http://www.cnblogs.com/qbwhtc/p/7406607.html)\n\n# \u4e3b\u8981\u7b97\u6cd5\uff1aKruskal\u7b97\u6cd5\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811+\u6570\u7ec4\u6a21\u62df\u90bb\u63a5\u8868\u5b58\u50a8+\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u67e5\u8be2\u3002\n\n\u672c\u9898\u7ed9\u6211\u4eec\u7684\u662f\u4e00\u4e2a\u56fe\uff0c\u6211\u4eec\u9996\u5148\u60f3\u5230\u7684\u53ef\u80fd\u662f\u6c42\u51fa\u5404\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4f46\u8fd9\u4e00\u60f3\u5c31\u4e0d\u73b0\u5b9e\uff0c\u56e0\u4e3a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u90fd\u8981O(N^3)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u800c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u4e00\u904d\u4e5f\u4f1aTLE\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u6362\u4e00\u79cd\u601d\u8def\u601d\u8003\u8fd9\u9053\u9898\u3002\n\n\u6211\u4eec~~\u654f\u9510\u5730~~\u53d1\u73b0\uff0c\u8fd9\u9898\u4f3c\u4e4e\u4e0eNOIP2013Day1T3\u5341\u5206\u76f8\u4f3c\uff08\u51e0\u4e4e\u5c31\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u7bc7\u9898\u89e3\u7684\u610f\u4e49\u4f55\u5728qwq\uff09\uff0c\u7c7b\u4f3c\u7684\u9898\u76ee\u8fd8\u6709NOIP2012Day2T3\u4e0eNOIP2015Day2T3\uff0c\u8fd9\u4e9b\u9898\u76ee\u7684\u5171\u540c\u70b9\u90fd\u662f\u5728\u6811\u4e0a\u500d\u589e\u8dd1\uff0c\u5e76\u4e14\u4e0eNOIP2015Day2T3\u4e00\u6837\u90fd\u7528\u5230\u4e86LCA\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u53d8\u6210\u4e00\u68f5\u6811\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u7528\u5230\u4e86\u6700\u5c0f\u751f\u6210\u6811\u3002\u8fd9\u6837\uff0c\u628a\u5b83\u53d8\u6210\u4e00\u68f5\u6811\u540e\u518d\u6309\u4e4b\u524d\u7684\u5957\u8def\u500d\u589e\u554a\uff0cLCA\u554a\u4e4b\u7c7b\u7684\uff0c\u5c31\u53ef\u4ee5~~\u5f88\u5bb9\u6613\u7684~~\u628a\u8fd9\u9898A\u4e86\u3002\n\n\u73b0\u5728\u6211\u4eec\u9996\u5148\u8981\u89e3\u51b3\u7684\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u95ee\u9898\uff0c\u5230\u5e95\u662f\u7528Prim\u7b97\u6cd5\u8fd8\u662f\u7528Kruskal\u7b97\u6cd5\u5462\uff1f\u6211\u4eec\u77e5\u9053\uff0cPrim\u7b97\u6cd5\u8981\u6bcf\u6b21\u5faa\u73af\u4e00\u904d\u627e\u6700\u5c0f\u8fb9\u6743\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(N^2)\u4e86\uff08\u4f46\u7528\u5806\u4ec0\u4e48\u7684\u5c31\u53e6\u5f53\u522b\u8bba\u4e86qwq\uff09\uff0c\u800cKruskal\u7b97\u6cd5\u82e5\u7528\u5feb\u6392\u53ef\u4ee5\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u51cf\u5230O(N\\*logN)\uff08\u5e94\u8be5\u662f\u5427qwq\uff09\uff0c\u56e0\u6b64Prim\u7b97\u6cd5\u4f1aTLE\uff0c\u800cKruskal\u7b97\u6cd5\u4e0d\u4f1a\uff0c\u6545\u6211\u4eec\u7528Kruskal\u7b97\u6cd5\u3002\n\n\u63a5\u4e0b\u6765Kruskal\u7b97\u6cd5\u7b5b\u4e0b\u6765\u7684\u8fb9\u7528\u6570\u7ec4\u6a21\u62df\u7684\u90bb\u63a5\u8868\u5b58\u50a8\u4e0b\u6765\uff0c\u5f00\u59cb\u5efa\u6811\u3002\uff08\u8fd9\u91cc\u6ce8\u610f\u628a\u6bcf\u4e00\u68f5\u6811\u90fd\u5efa\u597d\uff0c\u6211\u8bd5\u8fc7\u53ea\u5efa\u542b\u6709\u7f16\u53f71\u7684\u6811\uff0c\u7adf\u4e5fA\u4e86\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u4e25\u8c28\u4e00\u70b9\uff0c\u4e0d\u8981\u6c34\u6570\u636e\u5427qwq~~\u4f46\u6ca1\u60f3\u5230\u53ea\u5efa\u542b\u6709\u7f16\u53f71\u7684\u6811NOIP2013Day1T3\u8fd9\u6837\u4e5fA\u4e86\uff0c\u6570\u636e\u662f\u6709\u591a\u6c34~~\uff09\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u67e5\u8be2\u64cd\u4f5c\u4e86\u3002\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f\u500d\u589e\u7b97\u6cd5\uff0c\u500d\u589e\u65f6\u6211\u4eec\u53ef\u4ee5\u53c2\u8003\u4e4b\u524d\u7684\u9898\u76ee\u7684\u7ecf\u9a8c\uff0c\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4f\u5b58\u50a8\uff0c\u5176\u4e2df[i,j]\u8868\u793a\u7b2ci\u4e2a\u8282\u70b9\u5f80\u4e0a\uff08\u6839\u8282\u70b9\u65b9\u5411\uff09\u8dd12^j\u4e2a\u70b9\u5230\u8fbe\u7684\u70b9\uff0c\u4f46\u8fd9\u6837\u6211\u4eec\u8fd8\u662f\u65e0\u6cd5\u77e5\u9053\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\uff08\u9898\u76ee\u8981\u6c42\u7684\u7b54\u6848\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u518d\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4s\u5b58\u50a8\uff0cs[i,j]\u8868\u793a\u7b2ci\u4e2a\u8282\u70b9\u5f80\u4e0a\uff08\u6839\u8282\u70b9\u65b9\u5411\uff09\u8dd12^j\u4e2a\u70b9\u4e2d\u7684\u6700\u5927\u8fb9\uff0c\u8fd9\u6837\u6211\u4eec\u9884\u5904\u7406\u5b8c\uff0c\u5c31\u53ef\u4ee5\u7528log\u7ea7\u522b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6765\u5b8c\u6210\u67e5\u8be2\u4e86\u3002\u500d\u589e\u7b97\u6cd5\u7684LCA\u6211\u8fd9\u91cc\u5c31\u4e0d\u518d\u53d9\u8ff0\u4e86\u3002\u5173\u4e8e\u5176\u4ed6\u65b9\u9762\uff0c\u5c31\u53ea\u8981\u5f53\u4e24\u70b9\u7684\u4ee3\u8868\u4e0d\u662f\u540c\u4e00\u4e2a\u70b9\u65f6\u7279\u5224\u4e00\u4e0b\u8f93\u51fa\u201cimpossible\u201d\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u5206\u5272\u4e0d\u5b8c\u5168\u7684\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\n\npascal\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nuses math;\nvar n,m,i,j,k,l,r,ans:longint;\na,be,tar,next,x,y,len:array[1..300000]of longint;\nf,s:array[0..100000,0..17]of longint;\nb:array[1..100000]of boolean;\nc,last,floor,find:array[0..100000]of longint;\nfunction go(x:longint):longint;//\u5e76\u67e5\u96c6\nbegin\n  if c[x]<>x then\n  go:=go(c[x])\n  else\n  go:=x;\n  c[x]:=go;\nend;\nprocedure sort(l,r:longint);//Kruskal\u7b97\u6cd5\u5148\u6309\u8fb9\u6743\u6392\u5e8f\nvar i,j,xx,yy:longint;\nbegin\n  i:=l;\n  j:=r;\n  xx:=len[(l+r) div 2];\n  repeat\n  while len[i]<xx do\n  inc(i);\n  while xx<len[j] do\n  dec(j);\n  if i<=j then\n  begin\n    yy:=len[i];\n    len[i]:=len[j];\n    len[j]:=yy;\n    yy:=x[i];\n    x[i]:=x[j];\n    x[j]:=yy;\n    yy:=y[i];\n    y[i]:=y[j];\n    y[j]:=yy;\n    inc(i);\n    dec(j);\n  end;\n  until i>j;\n  if l<j then\n  sort(l,j);\n  if i<r then\n  sort(i,r);\nend;\nbegin\n  readln(n,m);\n  for i:=1 to m do\n  readln(x[i],y[i],len[i]);\n  for i:=1 to n do\n  c[i]:=i;\n  sort(1,m);\n  for i:=1 to m do//Kruskal\u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u7528\u90bb\u63a5\u8868\u5b58\u50a8\n  if c[go(x[i])]<>c[go(y[i])] then\n  begin\n    c[go(x[i])]:=c[go(y[i])];\n    inc(k);\n    //\u56e0\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u6bcf\u6761\u8fb9\u4e24\u70b9\u505a\u8d77\u70b9\u7684\u60c5\u51b5\u90fd\u4e0d\u80fd\u653e\u8fc7\n    a[k]:=len[i];//a\u6570\u7ec4\u88c5\u8be5\u8fb9\u957f\u5ea6\n    a[k+n-1]:=len[i];\n    be[k]:=x[i];//be\u6570\u7ec4\u88c5\u8be5\u8fb9\u8d77\u70b9\n    be[k+n-1]:=y[i];\n    tar[k]:=y[i];//tar\u6570\u7ec4\u88c5\u8be5\u8fb9\u7ec8\u70b9\n    tar[k+n-1]:=x[i];\n    next[k]:=last[x[i]];//next\u6570\u7ec4\u88c5\u4e0b\u4e00\u4e2a\u8be5\u627e\u54ea\u6761\u8fb9\n    next[k+n-1]:=last[y[i]];\n    last[x[i]]:=k;//last\u6570\u7ec4\u88c5\u4ee5\u8be5\u70b9\u4e3a\u8d77\u70b9\u7684\u6700\u540e\u4e00\u6761\u8fb9\u662f\u54ea\u4e2a\n    last[y[i]]:=k+n-1;\n  end;\n  for j:=1 to n do//\u5404\u79cd\u5efa\u6811\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662fBFS\n  if not b[j] then\n  begin\n    l:=1;\n    r:=1;\n    find[1]:=j;//find\u4e3aBFS\u6570\u7ec4\n    floor[j]:=1;//floor\u4e3a\u8be5\u70b9\u6df1\u5ea6\uff08\u6839\u8282\u70b9\u6df1\u5ea6\u4e3a1\uff09\n    b[j]:=true;//b\u6570\u7ec4\u8868\u793a\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\n    while l<=r do//\u5f00\u59cb\u5e7f\u641c\n    begin\n      i:=last[find[l]];\n      while i>0 do\n      begin\n        if not b[tar[i]] then\n        begin\n          floor[tar[i]]:=floor[be[i]]+1;\n          f[tar[i],0]:=be[i];\n          s[tar[i],0]:=a[i];\n          inc(r);\n          find[r]:=tar[i];\n          b[tar[i]]:=true;\n        end;\n        i:=next[i];\n      end;\n      inc(l);\n    end;\n  end;\n  for j:=1 to 17 do//\u500d\u589e\u9884\u5904\u7406\n  for i:=1 to n do\n  begin\n    f[i,j]:=f[f[i,j-1],j-1];\n    s[i,j]:=max(s[i,j-1],s[f[i,j-1],j-1]);\n  end;\n  readln(m);\n  for i:=1 to m do//\u5f00\u59cb\u67e5\u8be2\n  begin\n    readln(l,r);\n    ans:=0;\n    if c[go(l)]<>c[go(r)] then//\u7279\u5224\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u7684\u60c5\u51b5\n    begin\n      writeln('impossible');\n      continue;\n    end;\n    //\u4e0b\u9762\u5f00\u59cbLCA\n    if floor[l]<floor[r] then\n    begin\n      j:=l;\n      l:=r;\n      r:=j;\n    end;\n    if floor[l]>floor[r] then\n    for j:=17 downto 0 do\n    if floor[f[l,j]]>=floor[r] then\n    begin\n      if ans<s[l,j] then\n      ans:=s[l,j];\n      l:=f[l,j];\n    end;\n    if l=r then\n    begin\n      writeln(ans);\n      continue;\n    end;\n    for j:=17 downto 0 do\n    if f[l,j]<>f[r,j] then\n    begin\n      if ans<s[l,j] then\n      ans:=s[l,j];\n      if ans<s[r,j] then\n      ans:=s[r,j];\n      l:=f[l,j];\n      r:=f[r,j];\n    end;\n    if ans<s[l,0] then\n    ans:=s[l,0];\n    if ans<s[r,0] then\n    ans:=s[r,0];\n    writeln(ans);\n  end;\nend.\n```",
        "postTime": 1503385669,
        "uid": 7535,
        "name": "beng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "\u8d27\u8f66\u8fd0\u8f93 \u6570\u636e\u52a0\u5f3a\u7248\n\n\u6240\u7ecf\u8fc7\u7684\u6700\u5371\u9669\u7684\u8fb9\u7684\u5371\u9669\u7a0b\u5ea6\u503c\u6700\u5c0f\n\n\u53c8\u5728\u4e00\u5f20\u56fe\u4e0a\uff0c\u53ef\u4ee5\u5f97\u51fa\u53ef\u4ee5\u7ecf\u8fc7\u7684\u8fb9\u90fd\u5728\u8fd9\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\n\n\u628a\u8fb9\u6743\u63a8\u7ed9\u4e00\u6761\u8fb9\u4e0a\u6df1\u5ea6\u66f4\u5927\u7684\u70b9\uff0c\u7528\u6811\u5256/\u500d\u589e\u5feb\u901f\u6c42\u4e24\u70b9\u95f4\u6700\u5927\u70b9\u6743\n\n\u4e24\u70b9\u7684LCA\u7684\u70b9\u6743\u6240\u4ee3\u8868\u7684\u8fb9\u4e0d\u5728\u8fd9\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u4e0a\uff0c\u8981\u53bb\u6389\n\n\u6700\u540e\u91cd\u6784\u51fa\u6765\u7684\u53ef\u80fd\u662f\u68ee\u6797\uff0c\u8981\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u5728\u540c\u4e00\u68f5\u6811\u4e0a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,q,x,y,bks,cnt,tot,out,u[100010],v[100010],w[100010],a[100010],at[100010],fa[100010],h[100010],dep[100010],size[100010],dad[100010],son[100010],id[100010],top[100010];\nchar c;\nstruct Edeg\n{\n\tint u,v,w;\n}d[300010];\nstruct Edge\n{\n\tint to,next;\n}e[200010];\nstruct SegT\n{\n\tint s;\n}t[400010];\nint read()\n{\n\tout=0,c=getchar();\n\twhile(c<48||c>57){c=getchar();}\n\twhile(c>=48&&c<=57){out=(out<<3)+(out<<1)+(c&15),c=getchar();}\n\treturn out;\n}\nbool cmp(const Edeg &a, const Edeg &b)\n{\n\treturn a.w<b.w;\n}\nint max(int a,int b)\n{\n\treturn a>b?a:b;\n} \nint Find(int x)\n{\n\treturn fa[x]==x?x:fa[x]=Find(fa[x]);\n}\nvoid Add(int x,int y)\n{\n\te[++cnt].next=h[x],\n\te[cnt].to=y,\n\th[x]=cnt;\n}\nvoid Kruskal()\n{\n\tsort(d+1,d+m+1,cmp);\n\tfor(int i=1;i<=n;i++){fa[i]=i;}\n\tbks=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint fx=Find(d[i].u),fy=Find(d[i].v);\n\t\tif(fx^fy)\n\t\t{\n\t\t\tfa[fx]=fy,++bks,\n\t\t\tu[bks]=d[i].u,v[bks]=d[i].v,w[bks]=d[i].w;\n\t\t\tAdd(d[i].u,d[i].v);\n\t\t\tAdd(d[i].v,d[i].u);\n\t\t}\n\t\tif(bks==n-1){break;}\n\t}\n}\nvoid DFS1(int x)\n{\n\tdep[x]=dep[dad[x]]+1,size[x]=1;\n\tfor(int i=h[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y^dad[x])\n\t\t{\n\t\t\tdad[y]=x;\n\t\t\tDFS1(y);\n\t\t\tsize[x]+=size[y];\n\t\t\tif(size[son[x]]<size[y]){son[x]=y;}\n\t\t}\n\t}\n}\nvoid DFS2(int x)\n{\n\tid[x]=++tot,at[tot]=a[x],\n\ttop[x]=x==son[dad[x]]?top[dad[x]]:x;\n\tif(!son[x]){return;}\n\tDFS2(son[x]);\n\tfor(int i=h[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y^dad[x]&&y^son[x]){DFS2(y);}\n\t}\n}\nvoid Pushup(int k)\n{\n\tt[k].s=max(t[k<<1].s,t[k<<1|1].s);\n}\nvoid Build(int k,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tt[k].s=at[l];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tBuild(k<<1,l,mid);\n\tBuild(k<<1|1,mid+1,r);\n\tPushup(k);\n}\nint Query(int k,int l,int r,int ll,int rr)\n{\n\tif(r<ll||rr<l){return -19260817;}\n\tif(ll<=l&&r<=rr){return t[k].s;}\n\tint mid=l+r>>1;\n\treturn max(Query(k<<1,l,mid,ll,rr),Query(k<<1|1,mid+1,r,ll,rr));\n}\nint LCA(int x,int y)\n{\n\tint ans=-19260817;\n\twhile(top[x]^top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]){x^=y,y^=x,x^=y;}\n\t\tans=max(ans,Query(1,1,n,id[top[x]],id[x])),\n\t\tx=dad[top[x]];\n\t}\n\tif(dep[x]>dep[y]){x^=y,y^=x,x^=y;}\n\tans=max(ans,Query(1,1,n,id[x]+1,id[y]));\n\treturn ans;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++){d[i].u=read(),d[i].v=read(),d[i].w=read();}\n\tKruskal();\n\tfor(int i=1;i<=n;++i){if(!dep[i]){DFS1(i);}}\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tif(dep[u[i]]>dep[v[i]]){a[u[i]]=w[i];}\n\t\telse{a[v[i]]=w[i];}\n\t}\n\tfor(int i=1;i<=n;++i){if(!id[i]){DFS2(i);}}\n\tBuild(1,1,n);\n\tq=read();\n\twhile(q--)\n\t{\n\t\tx=read(),y=read();\n\t\tif(Find(x)!=Find(y)){puts(\"impossible\");}\n\t\telse{printf(\"%d\\n\",LCA(x,y));}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1570709111,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "### Kruskal\uff08\u5e76\u67e5\u96c6\uff09\u7b97\u6cd5\u6c42MST\uff08\u6700\u5c0f\u751f\u6210\u6811\uff09+\u500d\u589e\u6c42\u7236\n[\u6700\u5c0f\u751f\u6210\u6811\u51fa\u95e8\u5de6\u62d0](https://www.luogu.org/problemnew/show/P3366)\n### \u7740\u91cd\u4ecb\u7ecd\u500d\u589e\uff0c\u4e5f\u5c31\u662fdeep[N],up[N][18],da[N][18]\u548clca()\n- deep[i] _dfs()\n- up[j][i] **j\u7684\u7b2c2^i\u4ee3father**\n- da[j][i] **j\u7684\u7b2c2^i\u4ee3father\u4e4b\u95f4\u7684\u6700\u5371\u9669\u7684\u8fb9\u7684\u5371\u9669\u7a0b\u5ea6\u503c**\n\n\u5728_dfs()\u4e2d\u7b97\u5f97j\u7684father\u53732^0\u4ee3father,\u548cj\u7684father\u5373\u7b2c2^0\u4ee3father\u4e4b\u95f4\u7684\u6700\u5371\u9669\u7684\u8fb9\u7684\u5371\u9669\u7a0b\u5ea6\u503c\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100005,M=300005;\nint n,m,q,b[N],ai,fa[N],aj,deep[N],up[N][18],da[N][18],flag[N],ans;\nstruct node{\n    int to,next/*from*/,danger;\n    bool operator<(node &x){\n    \treturn danger<x.danger;\n    }\n}aa[M]/*Graph*/,a[N<<1];//SMT\nvoid in(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0,x,y,z;i<m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        aa[++ai]=(node){x,y,z};\n    }\n}\nint find(int i){\n    if(fa[i]!=i)fa[i]=find(fa[i]);\n    return fa[i];\n}\nvoid _dfs(int u){\n    for(int i=b[u],v;i;i=a[i].next)\n    if(!deep[v=a[i].to])\n    {\n        deep[v]=deep[u]+1;\n        up[v][0]=u;\n        da[v][0]=a[i].danger;\n        _dfs(v);\n    }\n}\nint lca(int x,int y){\n    int i,ans=0;\n    if(deep[y]>deep[x])swap(x,y);\n    for(i=17;~i;--i)//\u8d70\u5230\u540c\u4e00\u4e2a\u9ad8\u5ea6\n    if(deep[up[x][i]]>=deep[y])\n    ans=max(ans,da[x][i]),x=up[x][i];//\u500d\u589e\n    for(i=17;~i;--i)//\u627e\u6700\u65e9\u7684\u5171\u540c\u7236\u4eb2\uff0c\u540c\u65f6\u6c42\u51fa\u6700\u5c0f\u503c\n    if(up[x][i]!=up[y][i])\n    ans=max(ans,max(da[x][i],da[y][i])),x=up[x][i],y=up[y][i];//\u500d\u589e\n    return x==y?ans:max(ans,max(da[x][0],da[y][0]));//\u6700\u540e\u68c0\u9a8c\n}\nvoid work(){\n    for(int i=1;i<=n;i++)fa[i]=i;\n    sort(aa+1,aa+ai+1);\n    for(int i=1;i<=ai;i++)\n    {\n        int ii=aa[i].to,jj=aa[i].next,kk=aa[i].danger;\n        if(find(ii)!=find(jj)){\n            fa[find(ii)]=find(jj);\n            a[++aj]=(node){ii,b[jj],kk};b[jj]=aj;\n            a[++aj]=(node){jj,b[ii],kk};b[ii]=aj;\n        }\n    }\n}\nvoid pre(){\n    for(int i=1;i<=n;++i)\n    if(!deep[i])\n    {\n        deep[i]=1;\n        _dfs(i);\n        up[i][0]=i;//self-father\u9632\u8d8a\u4f4d\n        da[i][0]=0;\n    }\n    for(int i=1;i<18;++i)\n    for(int j=1;j<=n;++j)\n    {\n        up[j][i]=up[up[j][i-1]][i-1];\n        da[j][i]=max(da[j][i-1],da[up[j][i-1]][i-1]);\n    }\n}\nvoid out(){\n    pre();\n    int ii,jj;\n    for(scanf(\"%d\",&q);q;q--)\n    {\n        scanf(\"%d%d\",&ii,&jj);\n        if(find(ii)!=find(jj))printf(\"impossible\\n\");\n        else printf(\"%d\\n\",lca(ii,jj));\n    }\n}\nint main(){\n    in();\n    work();\n    out();\n}\n```",
        "postTime": 1546246032,
        "uid": 128173,
        "name": "betterer",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "# [\u987e](https://www.luogu.org/blog/RPdreamer/#)[z](https://www.cnblogs.com/-guz/)\n\n~~\u4f60\u6ca1\u6709\u53d1\u73b0\u4e24\u4e2a\u5b57\u91cc\u7684blog\u90fd\u4e0d\u4e00\u6837\u561b~~ qwq\n\n\u9898\u76ee\u63cf\u8ff0--->[p2245 \u661f\u9645\u5bfc\u822a](https://www.luogu.org/problemnew/show/P22454)\n\n\nwoc\u8fd9\u4e0d\u662f$Noip\\ 2013$\u8d27\u8f66\u8fd0\u8f93.\n\n~~\u5207\u6389!~~\n\n## \u5206\u6790\n\n\u663e\u7136,\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0.\u60f3\u8981\u8ba9\u4e00\u4e9b\u9876\u70b9\u8054\u901a,\u5e76\u4e14\u8ba9\u6700\u5371\u9669\u7684\u8fb9\u7684\u5371\u9669\u7a0b\u5ea6\u503c\u6700\u5c0f\u3002\n\n\u4f18\u5148\u60f3\u5230\u4e86$Kruskal$.\n\n**\u9996\u5148$Kruckal$\u5efa\u6811\u3002**\n\n\u5982\u4f55\u6c42\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb?\u5e26\u6743$LCA$\u5373\u53ef.\n\n**\u5982\u679c\u4e24\u70b9\u4e0d\u5728\u4e00\u9897\u6811,\u8981\u8f93\u51fa$impossible$!!**\n\n~~\u521a\u5f00\u59cb\u8f93\u51fa\u9519\u4e86~~\n\n\u6ce8\u610f\u5982\u679c\u5199\u4e24\u4e2a\u7ed3\u6784\u4f53\u7684\u8bdd,\u5bf9\u5176\u4e2d\u4e00\u4e2a$Sort$(\u5efa\u6811)\u7684\u8bdd,\u4e0d\u8981\u7ed3\u6784\u4f53\u4e2d\u91cd\u8f7d$<$\n\n### \u4ee3\u7801\n\n```c++\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#define R register\n#define N 100008\nusing namespace std;\ninline void in(int &x)\n{\n\tint f=1;x=0;char s=getchar();\n\twhile(!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n\twhile(isdigit(s)){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\nint n,m,head[N],tot,q;\nint fa[N],cnt,depth[N],f[N][21],gw[N][21];\nstruct cod{int u,v,w;}edge[300010],tree[300010];\ninline bool ccp(const cod&a,const cod&b)\n{\n\treturn a.w<b.w;\n}\nint find(int x){return fa[x]==x ? x : fa[x]=find(fa[x]);}\ninline void add(int x,int y,int z)\n{\n\tedge[++tot].u=head[x];\n\tedge[tot].v=y;\n\tedge[tot].w=z;\n\thead[x]=tot;\n}\ninline void kruskal()\n{\n\tfor(R int i=1;i<=n;i++)fa[i]=i;\n\tsort(tree+1,tree+m+1,ccp);\n\tfor(R int i=1;i<=m;i++)\n\t{\n\t\tint u=tree[i].u,v=tree[i].v,w=tree[i].w;\n\t\tint fu=find(u),fv=find(v);\n\t\tif(fu==fv)continue;\n\t\tadd(u,v,w);add(v,u,w);\n\t\tfa[fu]=fv;cnt++;\n\t\tif(cnt==n-1)break;\n\t}\n\treturn ;\n}\nvoid dfs(int u,int fat,int dis)\n{\n\tdepth[u]=depth[fat]+1;\n\tgw[u][0]=dis;f[u][0]=fat;\n\tfor(R int i=1;(1<<i)<=depth[u];i++)\n\t{\n\t\tf[u][i]=f[f[u][i-1]][i-1];\n\t\tgw[u][i]=max(gw[u][i-1],gw[f[u][i-1]][i-1]);\n\t}\n\tfor(R int i=head[u];i;i=edge[i].u)\n\t{\n\t\tif(edge[i].v==fat)continue;\n\t\tdfs(edge[i].v,u,edge[i].w);\n\t}\n}\ninline int lca(int x,int y)\n{\n\tint res=-214748364;\n\tif(depth[x]>depth[y])swap(x,y);\n\tfor(R int i=20;i>=0;i--)\n\t\tif(depth[x]+(1<<i)<=depth[y])\n\t\t\tres=max(res,gw[y][i]),y=f[y][i];\n\tif(x==y)return res;\n\tfor(R int i=20;i>=0;i--)\n\t{\n\t\tif(f[x][i]==f[y][i])continue;\n\t\tres=max(res,gw[x][i]);\n\t\tres=max(res,gw[y][i]);\n\t\tx=f[x][i],y=f[y][i];\n\t}\n\treturn max(max(res,gw[x][0]),gw[y][0]);\n}\nint main()\n{\n\tin(n),in(m);\n\tfor(R int i=1;i<=m;i++)\n\t\tin(tree[i].u),in(tree[i].v),in(tree[i].w);\n\tkruskal();\n\tdfs(1,0,0);\n\tin(q);\n\tfor(R int i=1,x,y;i<=q;i++)\n\t{\n\t\tin(x),in(y);\n\t\tR int fx=find(x),fy=find(y);\n\t\tif(fx!=fy)puts(\"impossible\");\n\t\telse printf(\"%d\\n\",lca(x,y));\n\t}\n}\n```",
        "postTime": 1539176395,
        "uid": 87960,
        "name": "\u987ez",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "\u6807\u7b7e: \u56fe\u8bba, \u6700\u5c0f\u751f\u6210\u6811, \u500d\u589e, LCA\n\n\u9898\u76ee\u5927\u610f\uff1a\u6709\u4e00\u5f20n\u70b9m\u8fb9\u7684\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u548c\u4e00\u4e9b\u95ee\u9898\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u7684\u6700\u5927\u8fb9\u6743\u6700\u5c0f\u662f\u591a\u5c11\u3002\n\n\u89e3\u9898\u601d\u8def\uff1a\u540cNOIP2013\u8d27\u8f66\u8fd0\u8f93\uff0c\u53ea\u662f\u6570\u636e\u589e\u5927\uff0c\u5927\u53d8\u6210\u5c0f\uff0c\u5c0f\u53d8\u6210\u5927\u4e86\u800c\u5df2\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#include<cstring>\n#include<cstdio>\nusing std::sort;\nusing std::swap;\nstruct edge{\n    int u,v,t;\n    bool operator < (const edge& rhs)const{return t<rhs.t;}\n}e[500005];\nstruct tree_edge{\n    int to,dist,nxt;\n}E[1200005];\nint n,m,fa[100005],head[100005]={0},cnt=0,ans,deep[100005],p[100005][19],sml[100005][19];\ninline int min(int a,int b){return(a>b)?(a):(b);}\ninline int readint(){\n    char c=getchar();\n    int p=0;\n    for(;!isdigit(c);c=getchar());\n    for(;isdigit(c);c=getchar())p=(p<<3)+(p<<1)+(c^'0');\n    return p;\n}\nint dad(int x){return(fa[x]==x)?(x):(fa[x]=dad(fa[x]));}\ninline int addedge(int from,int to,int dist){\n    E[++cnt]=(tree_edge){to,dist,head[from]};\n    head[from]=cnt;\n    E[++cnt]=(tree_edge){from,dist,head[to]};\n    head[to]=cnt;\n}\nvoid dfs(int u){\n    for(int i=head[u];i;i=E[i].nxt)\n    if(!deep[E[i].to]){\n        deep[E[i].to]=deep[u]+1;\n        p[E[i].to][0]=u;\n        sml[E[i].to][0]=E[i].dist;\n        dfs(E[i].to);\n    }\n}\nvoid init(){\n    for(int j=1;(1<<j)<=n;++j)\n    for(int i=1;i<=n;++i)\n    if(p[i][j-1]!=-1)\n    p[i][j]=p[p[i][j-1]][j-1],sml[i][j]=min(sml[i][j-1],sml[p[i][j-1]][j-1]);\n}\nint lca(int x,int y,int& ans){\n    ans=-2000000000;\n    int i;\n    if(deep[x]<deep[y])swap(x,y);\n    for(i=0;(1<<i)<=n;++i);--i;\n    for(int j=i;j>=0;--j)\n    if(deep[p[x][j]]>=deep[y]){\n        ans=min(ans,sml[x][j]),x=p[x][j];\n    }\n    if(x==y)return x;\n    for(int j=i;j>=0;--j)\n    if(p[x][j]!=p[y][j]&&p[x][j]!=-1){\n        ans=min(ans,min(sml[x][j],sml[y][j]));\n        x=p[x][j];\n        y=p[y][j];\n    }\n    ans=min(ans,min(sml[x][0],sml[y][0]));\n    return p[x][0];\n}\nint main(){\n    n=readint(),m=readint();\n    for(int i=1;i<=m;++i)e[i].u=readint(),e[i].v=readint(),e[i].t=readint();\n    sort(e+1,e+m+1);\n    for(int i=1;i<=n;++i)fa[i]=i;\n    for(int okE=1,now=1;now<=m;++now){\n        int a=dad(e[now].u),b=dad(e[now].v);\n        if(a!=b){\n            fa[b]=a;\n            addedge(e[now].u,e[now].v,e[now].t);\n            ++okE;\n        }\n        if(okE==n)break;\n    }\n    int Q=readint();\n    memset(deep,0,sizeof deep);\n    memset(p,-1,sizeof p);\n    memset(sml,0x3f,sizeof sml);\n    for(int i=1;i<=n;++i)\n    if(!deep[i]){\n        deep[i]=1;\n        dfs(i);\n    }\n    init();\n    while(Q--){\n        int x=readint(),y=readint();\n        int a=dad(x),b=dad(y);\n        if(a!=b){\n            puts(\"impossible\");\n            continue;\n        }\n        lca(x,y,ans);\n        printf(\"%d\\n\",ans);\n    }\n}\n```",
        "postTime": 1506938470,
        "uid": 13745,
        "name": "kanloner",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "\u65e2\u7136\u53ea\u6709\u4e00\u7bc7\u9898\u89e3\n\n\u90a3\u4e48\uff0c\u6211\u6765\u8865\u5145\u4e00\u7bc7\n\n\u9996\u5148\uff0c\u5728\u9898\u89e3\u7684\u6700\u5f00\u59cb\uff0c\u4e00\u5b9a\u8981%%%\u697c\u4e0a\u5927\u4f6csongyuchen\n\n\n---\n\n\u63a5\u4e0b\u6765\u8fdb\u5165\u6b63\u9898\n\n\u8fd9\u9053\u9898\u548cNOIP2013\u8d27\u8f66\u8fd0\u8f93\u7684\u672c\u8d28\u662f\u4e00\u6a21\u4e00\u6837\u7684\n\n\u663e\u7136\u53ef\u4ee5\u7528\u66f4\u597d\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\uff08\u7f51\u7edc\u6d41\u3001\u6811\u94fe\u5256\u5206\u7b49\uff09\n\n\u4f46\u662f\u6211\u8fd9\u4e2a\u849f\u84bb\u7528\u6700\u5f31\u7684\u65b9\u6cd5\uff1a\u6700\u5c0f\u751f\u6210\u6811+LCA\n\n\n---\n\u4f46\u662f\uff0c\u4e00\u5b9a\u6709\u4eba\u4f1a\u6709\u7591\u95ee\uff0c\u4e3a\u4ec0\u4e48\u662f\u6700\u5c0f\u751f\u6210\u6811\n\n\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u8bc1\u660e\u4e00\u4e0b\n\n\u5047\u8bbe\u5f53\u524d\u7684\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u662fx\n\n\u4f46\u662f\u5b58\u5728\u53e6\u5916\u4e00\u6761\u8def\u5f84\u7684\u8fb9\u6743\u7684\u6700\u5927\u503c\u662fx'\uff0c\u4e14x\u2018<x\n\n\u8fd9\u79cd\u60c5\u51b5\u4f1a\u4e0d\u4f1a\u5b58\u5728\uff1f\n\n\u6700\u5c0f\u751f\u6210\u6811\u662f\u5c06\u8fb9\u6309\u7167\u6743\u503c\u6392\u5e8f\u540e\u518d\u6765\u94fe\u63a5\n\n\u5982\u679c\u5b58\u5728x'\u6240\u5728\u7684\u8fd9\u4e00\u6761\u8def\u5f84\u7684\u8bdd,\u5fc5\u5b9a\u4f1a\u4f18\u5148\u9009\u62e9x'\u6240\u5728\u7684\u8def\u5f84\n\n\u800c\u4e0d\u662fx\u6240\u5728\u7684\u8def\u5f84\n\n\uff08\u4e3a\u4ec0\u4e48\u8bf7\u81ea\u5df1\u8003\u8651\u4e00\u4e0b\uff09\n\n\u90a3\u4e48\uff0c\u77e5\u9053\u7ed3\u679c\u5fc5\u5b9a\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\n\n\u95ee\u9898\u8fce\u5203\u800c\u89e3\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n#define MAX 110000\n#define MAXL 510000\n#define INF 0\n\ninline int read()\n{\n    register int x=0,t=1;\n    register char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-'){t=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-48;ch=getchar();}\n    return x*t;\n}\n\nint f[MAX],dep[MAX];\nint minl[MAX][21],p[MAX][51];\nint n,m,Q,u,v,w;\n\nstruct Line\n{\n      int u,v,w;//\u4eceu\u5230v\uff0c\u6743\u503cw \n}e[MAXL];\n\nstruct Edge\n{\n      int v,next,w;\n}E[MAXL];\nint h[MAX],cnt=1,tot=1;\n\ninline void Add(int u,int v,int w)//\u5efa\u8fb9\n{\n       E[tot]=(Edge){v,h[u],w};\n       h[u]=tot++;\n}\n\ninline bool operator <(Line a,Line b)//\u9700\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811 \n{\n      return a.w<b.w;\n}\n\nint getf(int u)//\u5e76\u67e5\u96c6 \n{\n      return f[u]==u?u:f[u]=getf(f[u]);\n}\n\nvoid Build(int u,int ff)//\u5efa\u6811 \n{\n      for(int i=h[u];i;i=E[i].next)\n      {\n               int v=E[i].v;\n               if(v!=ff)\n               {\n                        dep[v]=dep[u]+1;\n                        p[v][0]=u;\n                        minl[v][0]=E[i].w;\n                        Build(v,u);\n               }\n      }\n}\n\nvoid Prepare()//LCA\u7684\u9884\u5904\u7406 \n{\n      for(int j=1;(1<<j)<=n;++j)\n      {\n              for(int i=1;i<=n;++i)\n              {\n                        p[i][j]=p[p[i][j-1]][j-1];\n                        minl[i][j]=max(minl[i][j-1],minl[p[i][j-1]][j-1]);\n              }\n      }\n}\n\nint Query(int u,int v)//\u8be2\u95ee \n{\n      int ans=INF;\n      if(dep[u]<dep[v])swap(u,v);//u\u662f\u6df1\u5ea6\u5927\u7684\u7ed3\u70b9\n      for(int j=20;j>=0;--j)//\u4f7f\u5f97u,v\u6df1\u5ea6\u76f8\u540c \n          if(p[u][j]&&dep[p[u][j]]>=dep[v])\n          {\n                    ans=max(ans,minl[u][j]);\n                    u=p[u][j];\n          }\n      if(u==v)\n          return ans;\n      for(int j=20;j>=0;--j)//\u627e\u5230LCA\u5e76\u6c42\u89e3 \n      {\n            if(p[u][j]!=p[v][j])\n            {\n                      ans=max(ans,minl[u][j]);\n                      ans=max(ans,minl[v][j]);\n                      u=p[u][j];\n                      v=p[v][j];\n            }\n      }\n      ans=max(ans,minl[u][0]);\n      ans=max(ans,minl[v][0]);\n      return ans;\n}\n\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=m;++i)\n       e[i]=(Line){read(),read(),read()};\n    sort(&e[1],&e[m+1]);\n    \n    //\u514b\u9c81\u65af\u5361\u5c14\u6c42\u6700\u5c0f\u751f\u6210\u6811\n    for(int i=1;i<=n;++i)f[i]=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316 \n    for(int i=1;i<n;++i)//\u514b\u9c81\u65af\u5361\u5c14 \n    {\n            while(getf(e[cnt].u)==getf(e[cnt].v)&&cnt<=m)cnt++;//\u627e\u5230\u4e0b\u4e00\u6761\u53ef\u884c\u7684\u8fb9\n            if(cnt>m)break;//\u4e0d\u7528\u8fde\u4e86\uff0c\u6ca1\u6709\u8fb9\u4e86 \n            f[getf(e[cnt].v)]=getf(e[cnt].u);//\u9009\u62e9\u8fb9\n            Add(e[cnt].u,e[cnt].v,e[cnt].w);\n            Add(e[cnt].v,e[cnt].u,e[cnt].w);\n    }\n    \n\n    for(int i=1;i<=n;++i)//\u5efa\u6811 \n      if(!dep[i])\n      {\n              dep[i]=1;\n              Build(i,0);\n      }\n      \n    Prepare();//LCA\u51c6\u5907 \n    \n    Q=read();\n    while(Q--)\n    {\n             u=read();v=read();\n             if(getf(u)!=getf(v))//\u6ca1\u6709\u8fde\u5728\u4e00\u8d77 \n                printf(\"impossible\\n\");\n             else\n                 printf(\"%d\\n\",Query(u,v));\n    }\n}\n\n```",
        "postTime": 1500106726,
        "uid": 48618,
        "name": "yyb_test",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "##\u6700\u5c0f\u751f\u6210\u6811+\u6700\u8fd1\u516c\u5171\u7956\u5148LCA+\u5e76\u67e5\u96c6\n\n**\u5f88\u7efc\u5408\u7684\u4e00\u9053\u9898\u76ee**\n\n\u8981\u89e3\u51b3\u8fd9\u4e00\u9898\uff0c\u9996\u5148\u8981\u60f3\u660e\u767d\u7684\u662f\u4e3a\u4ec0\u4e48\u6700\u540e\u7684\u89e3\u4e00\u5b9a\u5728\u8be5\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\uff08\u8fd9\u4e2a\u7559\u7ed9\u8bfb\u8005\u81ea\u5df1\u601d\u8003\u5566\uff0c\u867d\u7136\u8bf4\u786e\u5b9e\u770b\u8d77\u6765\u662f\u7684\uff0c\u4f46\u5982\u4f55\u51c6\u786e\u5730\u8bc1\u660e\u5462\uff1f\u8fd9\u662f\u9700\u8981\u601d\u8003\u7684\uff09\n\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u8981\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\u8fdb\u884cLCA\u5566\u3002\u5173\u4e8eLCA\u7684\u57fa\u672c\u7b97\u6cd5\uff08\u500d\u589e\uff09\u8bf7\u5230\u6211\u7684[\u8fd9\u7bc7\u6587\u7ae0][1]\u67e5\u770b\u3002\n\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u662f\uff0c\u6211\u4eec\u867d\u7136\u6c42\u51fa\u4e86\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u8fd9\u6761\u8def\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u662f\u591a\u5c11\u554a\uff1f\n\n\n\u8fd9\u91cc\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u65b0\u6570\u7ec4Path\u3002Path[u][i]\u4ee3\u8868u\u5230\u5b83\u76842^i\u7956\u5148\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u3002\u662f\u4e0d\u662f\u89c9\u5f97Path\u7684\u5b9a\u4e49\u4e0eParent\u6709\u4e9b\u76f8\u4f3c\u5462\uff1f\u662f\u7684\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4e86\u5728\u500d\u589e\u8fc7\u7a0b\u4e2d\u65b9\u4fbf\u5730\u66f4\u65b0\u6700\u540e\u8981\u6c42\u7684\u503c\u6240\u5b9a\u4e49\u7684\uff0c\u5e76\u4e14\u5b83\u7684\u6c42\u503c\u4e0e\u66f4\u65b0\u4e0eParent\u603b\u662f\u5728\u4e00\u8d77\u7684\uff0c\u8fc7\u7a0b\u4e5f\u5f88\u7c7b\u4f3c\uff0c\u76f8\u4fe1\u5982\u679c\u8bfb\u8005\u5df2\u7ecf\u4e86\u89e3\u4e86LCA\u4e2dParent\u6570\u7ec4\u7684\u6c42\u6cd5\uff0c\u4e0d\u96be\u63a8\u5bfc\u51faPath\u7684\u6c42\u6cd5\u3002\n\n\n\u7a0b\u5e8f\u4e2d\u8981\u6dfb\u52a0\u6c42Path\u6570\u7ec4\u7684\u5730\u65b9\u6709\u4e24\u5904\n\n\u4e00\u662f\u5728dfs\u8fc7\u7a0b\u4e2d\uff0c\u5728\u5f97\u51faParent[v][0]\u7684\u503c\u5f97\u540c\u65f6\u53ef\u4ee5\u5f97\u51faPath[v][0]=W[u][v]\uff08W[u][v]\u4ee3\u8868u-v\u8fd9\u6761\u8fb9\u4e0a\u7684\u6743\u503c\uff09\n\n\u4e8c\u662f\u5728for\u5faa\u73af\u6c42Parent[i][j]=Parent[Parent[i][j-1]][j-1]\u65f6\uff0c\u540c\u6837\u53ef\u4ee5\u9012\u63a8\u51faPath[i][j]=max(Path[i][j-1],Path[Parent[i][j-1]][j-1])\uff0c\u5373i\u52302^j\u7956\u5148\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u7b49\u4e8ei\u52302^(j-1)\u4e0a\u7684\u6700\u5927\u503c\u548ci\u76842^(j-1)\u7956\u5148\u5230i\u76842^(j-1)\u7956\u5148\u76842^(j-1)\u7956\u5148\u7684\u6700\u5927\u503c\u8fd9\u4e24\u8005\u4e2d\u7684\u6700\u5927\u503c\u3002\uff08\u6709\u70b9\u7ed5\uff0c\u591a\u8bfb\u51e0\u904d\u5c31\u597d\u4e86\uff09\n\n\n\u6700\u540e\uff0c\u5728\u8fdb\u884c\u500d\u589e\u4e0a\u7ffb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u66f4\u65b0a\u4e0eb\u7684\u503c\u7684\u540c\u65f6\uff0c\u8bb0\u5f55\u4e0b\u6700\u5927\u7684\u8def\u5f84\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u5982\u679c\u8fd8\u6709\u4e0d\u7406\u89e3\uff0c\u8bf7\u7ed3\u5408\u4e0b\u9762\u7684\u4ee3\u7801\u52aa\u529b\u7406\u89e3\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nclass Edge1\n{\npublic:\n    int v,w;\n};\n\nclass Edge2\n{\npublic:\n    int u,v,w;\n};\n\nbool operator < (Edge2 a,Edge2 b)\n{\n    return a.w<b.w;\n}\n\nconst int maxN=100010;\nconst int maxM=300010;\nconst int inf=2147483647;\n\nint n,m;\nEdge2 E[maxM];\nvector<Edge1> T[maxN];\n//Union_Find_Set\nint Mayuri[maxN];\n//LCA\nint Parent[maxN][25];\nint Path[maxN][25];\nint Depth[maxN];\nbool vis[maxN];\n\nint read();\nvoid MST();\nint Find(int u);\nbool Union(int u,int v);\nvoid LCA_init();\nvoid dfs(int u);\nint LCA(int a,int b);\n\nint main()\n{\n    n=read();m=read();\n    for (int i=1;i<=m;i++)\n    {\n        E[i].u=read();\n        E[i].v=read();\n        E[i].w=read();\n    }\n    MST();//\u6c42\u6700\u5c0f\u751f\u6210\u6811\n    LCA_init();//LCA\u7684\u5404\u79cd\u4fe1\u606f\u521d\u59cb\u5316\n    int Q=read();\n    for (int i=1;i<=Q;i++)\n    {\n        int x=LCA(read(),read());\n        if (x==-1)\n            cout<<\"impossible\"<<endl;//\u6ce8\u610f\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u5373\u8fd9\u4e24\u70b9\u4e0d\u8fde\u901a\uff0c\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5224\u65ad\n        else\n            cout<<x<<endl;\n    }\n    return 0;\n}\n\nint read()//\u8bfb\u5165\u4f18\u5316\n{\n    int x=0;\n    int k=1;\n    char ch=getchar();\n    while (((ch<'0')||(ch>'9'))&&(ch!='-'))\n        ch=getchar();\n    if (ch=='-')\n    {\n        k=-1;\n        ch=getchar();\n    }\n    while ((ch>='0')&&(ch<='9'))\n    {\n        x=x*10+ch-48;\n        ch=getchar();\n    }\n    return x*k;\n}\n\nvoid MST()//\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u91cc\u7528\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\n{\n    sort(&E[1],&E[m+1]);\n    for (int i=1;i<=n;i++)//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n        Mayuri[i]=i;\n    int cnt=0;\n    for (int i=1;i<=m;i++)\n    {\n        int u=E[i].u;\n        int v=E[i].v;\n        int w=E[i].w;\n        if (Union(u,v))\n        {\n            T[u].push_back((Edge1){v,w});\n            T[v].push_back((Edge1){u,w});\n            cnt++;\n            if (cnt==n-1)\n                break;\n        }\n    }\n    return;\n}\n\nint Find(int u)\n{\n    if (Mayuri[u]!=u)\n        Mayuri[u]=Find(Mayuri[u]);\n    return Mayuri[u];\n}\n\nbool Union(int u,int v)\n{\n    int fu=Find(u);\n    int fv=Find(v);\n    if (fu!=fv)\n    {\n        Mayuri[fu]=fv;\n        return 1;\n    }\n    return 0;\n}\n\nvoid LCA_init()\n{\n    memset(Parent,0,sizeof(Parent));\n    memset(Path,0,sizeof(Path));\n    memset(Depth,0,sizeof(Depth));\n    memset(vis,0,sizeof(vis));\n    dfs(1);\n    for (int j=1;j<=20;j++)\n        for (int i=1;i<=n;i++)\n        {\n            Parent[i][j]=Parent[Parent[i][j-1]][j-1];\n            Path[i][j]=max(Path[i][j-1],Path[Parent[i][j-1]][j-1]);//\u540c\u65f6\u6c42\u89e3Path\n        }\n    return;\n}\n\nvoid dfs(int u)\n{\n    vis[u]=1;\n    for (int i=0;i<T[u].size();i++)\n    {\n        int v=T[u][i].v;\n        if (vis[v]==0)\n        {\n            Depth[v]=Depth[u]+1;\n            Parent[v][0]=u;\n            Path[v][0]=T[u][i].w;//\u8bb0\u5f55Path\u7684\u521d\u503c\n            dfs(v);\n        }\n    }\n}\n\nint LCA(int a,int b)\n{\n    if (Find(a)!=Find(b))\n    {\n        return -1;\n    }\n    int max_path=0;\n    if (Depth[a]<Depth[b])\n        swap(a,b);\n    for (int i=20;i>=0;i--)\n        if ((Parent[a][i]!=0)&&(Depth[Parent[a][i]]>=Depth[b]))\n        {\n            max_path=max(max_path,Path[a][i]);//\u540c\u65f6\u66f4\u65b0\u5f53\u524d\u7684\u6700\u5927\u8fb9\u6743\n            a=Parent[a][i];\n        }\n    if (a==b)\n        return max_path;\n    for (int i=20;i>=0;i--)\n        if ((Parent[a][i]!=0)&&(Parent[b][i]!=0)&&(Parent[a][i]!=Parent[b][i]))\n        {\n            max_path=max(max_path,Path[a][i]);//\u8fd9\u91cc\u4e5f\u662f\u66f4\u65b0\u5f53\u524d\u7684\u6700\u5927\u8fb9\u6743\n            max_path=max(max_path,Path[b][i]);\n            a=Parent[a][i];\n            b=Parent[b][i];\n        }\n    max_path=max(max_path,Path[a][0]);//\u6700\u540e\u8981\u6ce8\u610f\u518d\u4e0ePath[a][0]\u548cPath[b][0]\u6bd4\u8f83\u4e00\u4e0b\uff0c\u56e0\u4e3a\u5728\u539f\u6765\u7684LCA\u4e2d\uff0c\u516c\u5171\u7956\u5148\u662fParent[a][0]\u6216Parent[b][0]\n    max_path=max(max_path,Path[b][0]);\n    return max_path;\n}\n```\n [1]: http://www.cnblogs.com/SYCstudio/p/7150010.html\n\n\u53e6\u5916Link\u4e00\u4e0b\u6211\u7684\u535a\u5ba2\uff1ahttp://www.cnblogs.com/SYCstudio/\n\n\u6211\u7684\u535a\u5ba2\u4e2d\u5173\u4e8e\u672c\u9898\u7684\u89e3\u6cd5\uff1ahttp://www.cnblogs.com/SYCstudio/p/7151236.html\n\nPS\uff1a\u7ba1\u7406\u5458\u7ed9\u4e2a\u901a\u8fc7\u5427\uff0c\u8fd9\u9053\u9898\u8fd8\u6ca1\u6709\u9898\u89e3\u5462\n",
        "postTime": 1499763330,
        "uid": 21377,
        "name": "songyuchen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u548c[P1967\u8d27\u8f66\u8fd0\u8f93](https://www.luogu.com.cn/problem/P1967)\u5f88\u50cf\u4e86~~\n\n~~\u6240\u4ee5\u8bf4\u522b\u8bb2\u4e86~~\n\n# PART 1\uff1a\u601d\u8def\n\n\u9996\u5148\u5206\u6790\u9898\u76ee\uff0c\u8fd9\u9053\u9898\u8ba9\u6211\u4eec\u6c42\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\uff08\u63a5\u4e0b\u6765\u7b80\u79f0\u201c\u8ddd\u79bb\u201d\uff0c\u5305\u542b\u201c\u8ddd\u79bb\u201d\u7684\u8def\u5f84\u7b80\u79f0\u201c\u8ddd\u79bb\u201d\u8def\u5f84\uff09\uff0c\u770b\u5230\u8fd9\u91cc\u731b\u7136\u60f3\u8d77P1967\u6709\u6ca1\u6709\uff01 ~~\uff08\u7136\u800c\u6211\u4e0d\u4f1a\u505a\uff01\uff09~~\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u987a\u7406\u6210\u7ae0\u7684\u60f3\u5230\u4e86\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u6700\u5c0f\u751f\u6210\u6811\u6b63\u786e\u5462\uff1f\n\n## \u53cd\u8bc1\u6cd5\uff01\n### \u8bc1\u660e\uff1a\n\n**\u5047\u8bbe\u4e00\uff1a\u5b58\u5728\u4e24\u70b9 $x,y$ \u4f7f\u5f97\u4e24\u70b9\u5728\u6811\u4e0a\u7684\u201c\u8ddd\u79bb\u201d           $treedis(x,y)$ \u5927\u4e8e\u4e24\u70b9\u4e4b\u95f4\u7684\u201c\u8ddd\u79bb\u201d $dis(x,y)$ \u3002**\n\n\u56de\u987e\u6700\u5c0f\u751f\u6210\u6811\u5b9a\u4e49\uff0c\u6613\u77e5\u56fe $S$ \u7684\u6700\u5c0f\u751f\u6210\u6811 $T$ \u53ef\u4ee5\u6ee1\u8db3\u4e00\u4e2a\u6027\u8d28\uff1a\n\n**\u6027\u8d28\u4e00\uff1a\u82e5\u4e0d\u5305\u542b\u8fb9 $(x,y)$ \uff0c\u5219\u5fc5\u5b58\u5728\u4e00\u6761\u4ece $x$ \u5230 $y$ \u7684\u8def\u5f84 $k$ \u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u90fd\u6bd4\u8fb9(x,y)\u7684\u8fb9\u6743 $cost$ \u5c0f\u3002**\n\n\u540c\u65f6\u6211\u4eec\u8fd8\u80fd\u6613\u5f97\u4e00\u4e2a\u201c\u8ddd\u79bb\u201d\u8def\u5f84\u7684\u6027\u8d28\uff1a\n\n**\u6027\u8d28\u4e8c\uff1a\u82e5\u4ece\u70b9 $x$ \u5230\u70b9 $y$ \u7684\u201c\u8ddd\u79bb\u201d\u8def\u5f84 $k$ \u4e0d\u7ecf\u8fc7\u8fb9 $(x,y)$ \uff0c\u90a3\u4e48\u4efb\u4f55\u4e00\u6761\u8fc7\u8fb9 $(x,y)$ \u7684\u8def\u5f84 $k_x$ \u90fd\u4e0d\u662f\u201c\u8ddd\u79bb\u201d\u8def\u5f84**\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u77ac\u95f4\u8bc1\u4f2a\u539f\u5047\u8bbe\uff1a\n\n\u9996\u5148\u8bbe\u8fd9\u6761\u5bfc\u81f4 $dis(x,y)\\leqslant treedis(x,y)$ \u7684\u8fb9\u4e3a $(t_1,t_2)$ \uff0c\u5e76\u4e14\u8fb9\u6743\u4e3a $t_k$ \uff0c\u90a3\u4e48\u56e0\u4e3a\u6700\u5c0f\u751f\u6210\u6811 $T$ \u4e0d\u5305\u542b\u8fb9 $(t_1,t_2)$ \uff0c\u6240\u4ee5\u6839\u636e\u6027\u8d28\u4e00\uff0c\u5728 $T$ \u4e0a\u5fc5\u7136\u5b58\u5728\u4ece $t_1$ \u5230   $t_2$ \u7684\u8def\u5f84 $k$ \u4f7f\u5f97 $k$ \u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u8fb9\u6743\u90fd\u5c0f\u4e8e\u7b49\u4e8e $t_k$ \uff0c\u6240\u4ee5\u8bf4 $t_1,t_2$ \u4e4b\u95f4\u7684\u201c\u8ddd\u79bb\u201d\u80af\u5b9a\u4e0d\u7b49\u4e8e $t_k$ \uff0c\u53c8\u7531\u6027\u8d28\u4e8c\u7684\u6bcf\u6761\u7ecf\u8fc7 $(t_1,t_2)$ \u7684\u8def\u5f84\u90fd\u4e0d\u4f1a\u662f\u6700\u4f18\u89e3\uff0c\u4ece\u800c\u5047\u8bbe\u4e00\u4e0d\u6210\u7acb\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u601d\u8def\u4e86\uff1a\u5148\u904d\u5386\u51fa\u6765\u539f\u56fe $S$ \u7684\u6700\u5c0f\u751f\u6210\u6811 $T$ ,\u518d\u5728\u6811\u4e0a\u6c42\u51fa $A,B$ \u4e24\u70b9\u4e4b\u95f4\u7684\u552f\u4e00\u4e00\u6761\u201c\u8ddd\u79bb\u201d\u3002\n\n# PART 2\uff1a\u4f18\u5316+\u7ec6\u8282\n\n\u6811\u4e0a\u6c42\u8ddd\u79bb\u5f88\u660e\u663e\u662fLCA\uff0c\u4f46\u662f\u770b\u89c1\u8fd9 $N=10^5,Q=10^5$ \u7684\u6570\u636e\u8303\u56f4\u5fc3\u91cc\u8fd8\u662f\u53d1\u61b7\u2026\u2026\n\n### \u90a3\u5c31\u4f18\u5316\uff01\n\n\u600e\u4e48\u4f18\u5316\u5462\uff1f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u4e00\u70b9\u4e00\u70b9\u5206\u6790\uff1a\n\n\u9996\u5148\u500d\u589e\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\u548ckruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5df2\u7ecf\u4f18\u5316\u5230\u5934\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u6811\u4e0a\u5bfb\u8def\u8fd8\u662f\u6ca1\u6709\u4f18\u5316\uff01\n\n\u4f46\u662f\u5982\u4f55\u4f18\u5316\u6811\u4e0a\u5bfb\u8def\u5462\uff1f\n\n\u5176\u5b9e\u771f\u00b7\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4eff\u7167\u500d\u589e\u6c42$LCA$\u7684\u65b9\u6cd5\u505a\u51fa\u500d\u589e\u6c42\u201c\u8ddd\u79bb\u201d\u5c31\u53ef\u4ee5\u4e86\uff0c\u7c7b\u4f3c\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a\n\n$dis[i][j]=max(dis[i-1][j],dis[i-1][fa[i-1][j]])$\n\n\u6700\u540e\u63d0\u9192\u4e00\u70b9\uff1a\u5982\u679c\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u4e0d\u53ef\u8fbe\uff0c\u8f93\u51fa $impossible$ ,\u4e5f\u5c31\u662f\u8bf4\u56fe\u6709\u53ef\u80fd\u4e0d\u8fde\u901a\uff01\uff01\uff01\n\n# PART 3\uff1acode\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,q,fa[100005],f[18][100005],vit[100005],dep[100005],lo[18][100005];\nstruct i1\n{\n\tint from,to,cost;//kruskal\u5b58\u8fb9\n}ed[300005];\nstruct it\n{\n\t\n\tint t,cost;//\u5b58\u6811\u56fe\n};\nvector<it>mp[100005];\nbool cmp(i1 a,i1 b)\n{\n\treturn a.cost<b.cost;\n}\nint find(int x)//kruskal\u5e76\u67e5\u96c6\n{\n\tif(fa[x]==x)\n\t\treturn x;\n\tfa[x]=find(fa[x]);\n\treturn fa[x];\n}\nvoid add(int ff,int t,int x)//\u5f80\u6811\u56fe\u91cc\u52a0\u8fb9\n{\n\tit temp;\n\ttemp.cost=x;\n\ttemp.t=t;\n\tmp[ff].push_back(temp);\n}\nvoid kls()//kruskal=kls\n{\n\tint num=0;//\u8fb9\u7684\u6570\u91cf\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\ti1 temp=ed[i];\n\t\tint ff=find(temp.from),ft=find(temp.to);\n\t\tif(ff!=ft)//\u5982\u679c\u8fd9\u6761\u8fb9\u8fde\u7684\u662f\u4e0d\u540c\u533a\u5757\n\t\t{\n\t\t\tnum++;\n\t\t\tfa[ff]=ft;//\u5e76\u67e5\u96c6\u57fa\u672c\u64cd\u4f5c\n\t\t\tadd(temp.from,temp.to,temp.cost);//\u5f80\u6811\u56fe\u52a0\u8fb9\n\t\t\tadd(temp.to,temp.from,temp.cost);\n\t\t}\n\t\tif(num==n-1)\n\t\t\treturn;\n\t}\n}\nvoid fs(int x,int fat,int loo)//\u6df1\u641c\u5efa\u6811\n{\n\tvit[x]=1;//\u4e07\u4e00\u4e0d\u8054\u901a\u5462\uff1f\n\tf[0][x]=fat;//\u500d\u589e\u6c42\u7236\n\tdep[x]=dep[fat]+1;//\u6211\u7684\u6df1\u5ea6\n\tlo[0][x]=loo;//\u500d\u589e\u6c42\u8ddd\n\tfor(int i=0;i<mp[x].size();i++)\n\t{\n\t\tit temp=mp[x][i];\n\t\tif(temp.t!=fat)\n\t\t\tfs(temp.t,x,temp.cost);//\u9012\u5f52\u641c\u7d22\n\t}\n}\nvoid ycl()//\u9884\u5904\u7406=ycl\n{\n\tfor(int i=1;i<=17;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tf[i][j]=f[i-1][f[i-1][j]];//\u771f\u00b7\u500d\u589e\u6c42\u7236\n\tfor(int i=1;i<=17;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tlo[i][j]=max(lo[i-1][j],lo[i-1][f[i-1][j]]);//\u771f\u00b7\u500d\u589e\u6c42\u8ddd\n}\nint lca(int x,int y)//lca\n{\n\tif(x==y)\n\t\treturn x;\n\tif(dep[x]<dep[y])\n\t\tswap(x,y);\n\tfor(int i=17;i>=0;i--)\n\t\tif(dep[f[i][x]]>=dep[y])\n\t\t\tx=f[i][x];//\u500d\u589e\u5411\u4e0a\u8df3\n\tif(x==y)\n\t\treturn x;//\u5728P3379\u88ab\u5361\u4e86\u597d\u51e0\u5929\u624d\u53d1\u73b0\u6ca1\u52a0\u7684\u7279\u5224\n\tfor(int i=17;i>=0;i--)\n\t\tif(f[i][x]!=f[i][y])\n\t\t\tx=f[i][x],y=f[i][y];//\u4e00\u8d77\u5f80\u4e0a\u8df3\n\treturn f[0][x];\n}\nint fl(int x,int y)//\u6811\u4e0a\u6c42\u8ddd\n{\n\tint sum=0;\n\tfor(int i=17;i>=0;i--)\n\t\tif(dep[f[i][x]]>=dep[y])\n\t\t\tsum=max(sum,lo[i][x]),x=f[i][x];//\u500d\u589e\u5f80\u4e0a\u8df3\n\treturn sum;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t\tcin>>ed[i].from>>ed[i].to>>ed[i].cost;\n\tsort(ed+1,ed+1+m,cmp);//\u6392\u5e8f\n\tfor(int i=1;i<=n;i++)\n\t\tfa[i]=i;//\u5e76\u67e5\u96c6\u4e00\u5b9a\u8981\u521d\u59cb\u5316\uff01\uff01\uff01\n\tkls();/\u3001kruskal\n\tfor(int i=1;i<=n;i++)\n\t\tif(vit[i]==0)\n\t\t\tfs(i,i,0);//\u5bf9\u68ee\u6797\u8fdb\u884c\u641c\u7d22\n\tycl();//\u9884\u5904\u7406\n\tcin>>q;\n\twhile(q--)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tif(find(x)!=find(y))//\u5982\u679c\u4e0d\u5728\u4e00\u68f5\u6811\u4e0a\n\t\t\tcout<<\"impossible\";\n\t\telse//\u5426\u5219\n\t\t{\n\t\t\tint Lca=lca(x,y);\n\t\t\tcout<<max(fl(x,Lca),fl(y,Lca));//\u8981\u8f93\u51fa\u8f83\u5927\u503c\n\t\t}\n\t\tcout<<endl;\n\t}\n}\n```\n\n//\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u6c42\u8fc7~~\n",
        "postTime": 1606310140,
        "uid": 331897,
        "name": "C1R1A1E1F1",
        "ccfLevel": 0,
        "title": "P2245"
    },
    {
        "content": "[P2245 \u661f\u9645\u5bfc\u822a](https://www.luogu.com.cn/problem/P2245)\n\n#### \u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\n\n\u672c\u9898\u53ef\u4ee5\u7b97\u662f\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u7684\u6a21\u677f\u9898\uff0c\u4e0b\u9762\u7b80\u79f0\u91cd\u6784\u6811.\u91cd\u6784\u6811\u662f\u7528\u6765\u89e3\u51b3\u65e0\u5411\u56fe\u4e2d\u5173\u4e8e\u67d0\u6bb5\u8def\u5f84\u4e0a\u6700\u5c0f\u8fb9\u6743\u6700\u5927\u6216\u6700\u5927\u8fb9\u6743\u6700\u5c0f\u95ee\u9898\u7684\u5229\u5668.\u4e0b\u9762\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u6784\u9020\u8fc7\u7a0b\uff1a\n\n\u540c\u666e\u901a\u7684\u5e93\u9c81\u65af\u5361\u5c14\u4e00\u6837\uff0c\u91cd\u6784\u6811\u4e5f\u9700\u8981\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u6700\u7ec8\u5f97\u5230\u56fe\u7684\u662f\u539f\u56fe\u7684\u4e00\u4e2a\u6781\u5927\u751f\u6210\u68ee\u6797.\n\n1.  \u672c\u9898\u9700\u8981\u6c42\u6700\u5927\u8fb9\u6743\u6700\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u5c06\u8fb9\u6743\u4ece\u5c0f\u5230\u8fbe\u6392\u5e8f.\n2.  \u63a5\u4e0b\u6765\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e00\u6761\u8fb9$(x, y, z)$\uff0c\u82e5$x$\u4e0e$y$\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u5185\uff0c\u5219\u76f4\u63a5$continue$\u6389.\u5426\u5219\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u9644\u52a0\u70b9$p$.\u5047\u82e5$x$\u6240\u5728\u7684\u5e76\u67e5\u96c6\u7956\u5148\u4e3a$f_x$\uff0c$y$\u6240\u5728\u7684\u5e76\u67e5\u96c6\u7956\u5148\u4e3a$f_y$\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5c06$f_x$\u548c$f_y$\u7684\u7236\u4eb2\u6307\u5411\u70b9$p$\uff0c\u987a\u4fbf\u5728\u90bb\u63a5\u8868\u8fde\u4e0a\u65e0\u6743\u6709\u5411\u8fb9$(p, x)$\u548c$(p, y)$.\u6b64\u65f6\uff0c$p$\u662f\u5e26\u70b9\u6743\u7684\uff0c\u5176\u503c\u4e3a\u6b64\u65f6\u7684\u8fb9\u6743$z$.\n \n\u5bb9\u6613\u53d1\u73b0\uff0c\u7531\u4e8e\u6211\u4eec\u8fb9\u6743\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\uff0c\u5e76\u4e14\u6bcf\u6b21\u8fde\u63a5\u7684\u65f6\u5019\u7236\u8282\u70b9\u7684\u6743\u503c\u90fd\u4e0d\u5c0f\u4e8e\u5b50\u8282\u70b9\u6743\u503c\uff0c\u6545\u6784\u9020\u51fa\u7684\u91cd\u6784\u6811\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5927\u6839\u5806\u7684\u7ed3\u6784,\u5e76\u4e14\u7531\u6839\u51fa\u53d1\u7684\u8def\u5f84\u4e0a\u6df1\u5ea6\u8d8a\u5927\u7684\u8282\u70b9\u6743\u503c\u8d8a\u5c0f.\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee$(x, y)$, $lca(x, y)$\u7684\u6743\u503c\u5373\u4e3a\u7b54\u6848.\n\n\u6ce8\u610f\u7279\u5224\u6389$x,y$\u4e0d\u8fde\u901a\u7684\u60c5\u51b5.\n\n\u6392\u5e8f\u590d\u6742\u5ea6$O(n \\log n)$\uff0c\u500d\u589e$lca$\u590d\u6742\u5ea6$O(n \\log n)$\uff0c\u6545\u603b\u590d\u6742\u5ea6$O(n \\log n)$\n\n\u6838\u5fc3\u4ee3\u7801\n\n```cpp\nconst ll N=2e5+5, M=3e5+5;\n\nll head[N], to[N<<1], next[N<<1], tot;\ninline void add(ll x, ll y){\n\tto[++tot]=y; next[tot]=head[x]; head[x]=tot;\n}\n\ninline void Link(ll x, ll y){\n\tadd(x, y); add(y, x);\n}\n\nll n, m;\n\nstruct node{\n\tll x, y, z;\n\t\n\tnode(){}\n\tnode(ll X, ll Y, ll Z):x(X), y(Y), z(Z){}\n\t\n\tinline bool operator <(const node &X)const{return this->z<X.z;}\n}edge[M];\n\nnamespace dsu{\n\tll f[N];\n                                                                   \n\t//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n\tinline void init(ll lim){\n\t\tfor (R ll i=1; i<=lim; i++) f[i]=i;\n\t}\n\t\n\tinline ll getf(ll x){\n\t\treturn f[x]==x?x:f[x]=getf(f[x]);\n\t}\n}\n\nll cnt;\nll v[N];\nll f[N][20], dep[N];\n\ninline void dfs(ll x, ll fa){\n\tf[x][0]=fa;\n\tfor (R ll i=1; i<20; i++) f[x][i]=f[f[x][i-1]][i-1];\n\tdep[x]=dep[fa]+1;\n\tfor (R ll i=head[x], ver; i; i=next[i]){\n\t\tver=to[i];\n\t\tdfs(ver, x);\n\t}\n}\n\ninline ll lca(ll x, ll y){\n\tif (dep[x]<dep[y]) swap(x, y);\n\tfor (R ll i=19; ~i; i--)\n\t\tif (dep[f[x][i]]>=dep[y]) x=f[x][i];\n\tif (x==y) return x;\n\tfor (R ll i=19; ~i; i--)\n\t\tif (f[x][i]!=f[y][i]) x=f[x][i], y=f[y][i];\n\treturn f[x][0];\n}\n\nll Q;\nint main(){\n\tread(n); read(m); cnt=n;\n\tfor (R ll i=1, x, y, z; i<=m; i++){\n\t\tread(x); read(y); read(z);\n\t\tedge[i]=node(x, y, z);\n\t}\n\tsort(edge+1, edge+m+1);\n\tdsu::init(n<<1);\n\tfor (R ll i=1, x, y; i<=m; i++){\n\t\tx=edge[i].x, y=edge[i].y;\n\t\tx=dsu::getf(x); y=dsu::getf(y);\n\t\tif (x==y) continue;\n\t\t++cnt;\n\t\tv[cnt]=edge[i].z;\n\t\tdsu::f[x]=dsu::f[y]=cnt;\n\t\tadd(cnt, x); add(cnt, y);\n\t}\n\tfor (R ll i=1, x; i<=cnt; i++){\n\t\tx=dsu::getf(i);\n\t\tif (!dep[x]) dfs(x, 0);\n\t}\n\tread(Q);\n\tll x, y, belx, bely;\n\twhile(Q--){\n\t\tread(x); read(y);\n\t\tbelx=dsu::getf(x), bely=dsu::getf(y);\n\t\tif (belx!=bely) puts(\"impossible\");\n\t\telse writeln(v[lca(x, y)]);\n\t}\n}\n```\n",
        "postTime": 1605265093,
        "uid": 220285,
        "name": "Saber_Master",
        "ccfLevel": 7,
        "title": "P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "\u548c[P1967 \u8d27\u8f66\u8fd0\u8f93](https://www.luogu.com.cn/problem/P1967)\u7c7b\u4f3c\u3002\n\n## \u9898\u76ee\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u8fb9\u5e26\u6743\u56fe\uff0c\u6c42\u4e24\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u3002\n\n## \u601d\u8def\n\n\u6ce8\u610f\u56fe\u4e0d\u4fdd\u8bc1\u8054\u901a\u3002\n\n\u56e0\u4e3a\u662f\u8981\u6c42\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u5728\u4fdd\u8bc1\u591a\u4e2a\u8054\u901a\u5206\u91cf\u5185\u7684\u70b9\u4f9d\u7136\u4e0e\u5176\u4ed6\u70b9\u8054\u901a\u7684\u60c5\u51b5\u4e0b\uff0c\u53bb\u6389\u6743\u503c\u8f83\u5927\u7684\u8fb9\u3002\u8fd9\u4e9b\u8fb9\u7684\u6743\u503c\u5bf9\u7b54\u6848\u4e0d\u4f1a\u4ea7\u751f\u8d21\u732e\u3002\n\n\u90a3\u4e48\u53bb\u5b8c\u8fb9\u540e\uff0c\u56e0\u4e3a\u70b9\u4e0e\u70b9\u5fc5\u987b\u8fd8\u8981\u8054\u901a\uff0c\u8054\u901a\u5206\u91cf\u4f1a\u53d8\u6210\u591a\u4e2a\u6811\uff0c\u70b9\u4e0e\u70b9\u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u6700\u5927\u503c\uff0c\u5c31\u662f\u8fd9\u4e2a\u70b9\u5bf9\u7684\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m+n\\log n)$\u3002\n\n## \u5b9e\u73b0\n\n\u5728\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u4e2d\u627e\u5230\u4e00\u4e2a\u6811\u7684\u4efb\u610f\u4e00\u4e2a\u8fb9\u6743\u90fd\u5c3d\u53ef\u80fd\u5c0f\u7684\uff0c\u4e5f\u5c31\u662f\u6811\u7684\u8fb9\u6743\u4e4b\u548c\u8981\u6700\u5c0f\uff0c\u90a3\u4e48\u6700\u5c0f\u751f\u6210\u6811\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002\n\n\u6700\u5c0f\u751f\u6210\u6811\u6c42\u89e3\u53ef\u4ee5\u7528 Kruskal\uff0c\u5bf9\u4e8e\u7b26\u5408\u7684\u8fb9\uff0c\u76f4\u63a5\u5728\u90bb\u63a5\u8868\u5efa\u8fb9\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5bf9\uff0c\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u4e2d\uff0c\u4e0d\u5728\u7684\u8bdd\u5c31\u662f\u76f4\u63a5 `impossible`\uff0c\u5426\u5219\u5c31\u7528 LCA \u5c31\u51fa\u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u6700\u5927\u503c\u5c31\u53ef\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\n#define ll long long\n#define y1 caibictq\n#define P pair<int, int>\n#define fi first\n#define se second\n\nusing namespace std;\n\nconst int MAXN = 400010;\nconst int MAXM = 100010;\nconst int mod = 1e9 + 7;\nconst int INF = 0x3f3f3f3f;\n\nint n, m, q, k;\nint tot, tot1, cnt, ans;\n\nint read() {\n\tint f = 1, s = 0;\n\tchar ch = getchar();\n\twhile ('0' > ch || ch > '9') {if (ch == '-') f = -1; ch = getchar();}\n\twhile ('0' <= ch && ch <= '9') {s = (s << 1) + (s << 3) + ((int)ch ^ 48); ch = getchar();}\n\treturn s * f;\n}\n\nint a[MAXN], head[MAXN];\nint bel[MAXN], vis[MAXN];\nint dep[MAXN], f[MAXN][50], mx[MAXN][50], lg[MAXN];\n\nint find(int x) {\n\twhile (x != bel[x]) x = bel[x] = bel[bel[x]];\n\treturn x;\n}\n\nstruct edge {\n\tint to, next, w;\n}e[MAXN << 1];\n\nstruct edge1 {\n\tint u, v, w;\n}e1[MAXN];\n\nvoid add_edge(int x, int y, int w) {\n\te[++tot].to = y;\n\te[tot].w = w;\n\te[tot].next = head[x];\n\thead[x] = tot;\n\treturn;\n}\n\nbool cmp(edge1 x, edge1 y) {\n\treturn x.w < y.w;\n}\n\nvoid Kruskal() {\n\tsort(e1 + 1, e1 + tot1 + 1, cmp);\n\tfor (int i = 1; i <= tot1; i++) {\n\t\tint bel_u = find(e1[i].u);\n\t\tint bel_v = find(e1[i].v);\n\t\tif (bel_u == bel_v) continue;\n\t\tadd_edge(e1[i].u, e1[i].v, e1[i].w);\n\t\tadd_edge(e1[i].v, e1[i].u, e1[i].w);\n\t\tbel[bel_u] = bel_v;\n\t\tif (++cnt == n - 1) break;\n\t}\n\treturn;\n}\n\nvoid dfs(int x, int fa) {\n\tvis[x] = 1;\n\tdep[x] = dep[fa] + 1; f[x][0] = fa;\n\tfor (int i = 1; (1 << i) <= dep[x]; i++) {\n\t\tf[x][i] = f[f[x][i - 1]][i - 1];\n\t\tmx[x][i] = max(mx[x][i - 1], mx[f[x][i - 1]][i - 1]);\n\t}\n\tfor (int i = head[x]; i; i = e[i].next) {\n\t\tint y = e[i].to;\n\t\tif (y == fa) continue;\n\t\tmx[y][0] = e[i].w;\n\t\tdfs(y, x);\n\t}\n\treturn;\n}\n\nint LCA(int x, int y) {\n\tint res = -INF;\n\tif (dep[x] < dep[y]) swap(x, y);\n\twhile (dep[x] > dep[y]) {\n\t\tres = max(res, mx[x][lg[dep[x] - dep[y]] - 1]);\n\t\tx = f[x][lg[dep[x] - dep[y]] - 1];\n\t}\n\tif (x == y) return res;\n\tfor (int i = lg[dep[x]] - 1; i >= 0; i--) {\n\t\tif (f[x][i] == f[y][i]) continue;\n\t\tres = max(res, mx[x][i]);\n\t\tres = max(res, mx[y][i]);\n\t\tx = f[x][i];\n\t\ty = f[y][i];\n\t}\n\treturn max(res, max(mx[x][0], mx[y][0]));\n}\n\nint main() {\n\tint T;\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1, u, v, w; i <= m; i++) {\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\tif (u == v) continue;\n\t\te1[++tot1].u = u; e1[tot1].v = v; e1[tot1].w = w;\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tbel[i] = i;\n\t\tlg[i] = lg[i - 1] + ((1 << lg[i - 1]) == i);\n\t}\n\tKruskal();\n\tmemset(mx, -0x3f, sizeof(mx));\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!vis[i]) dfs(i, 0);\n\t}\n\tscanf(\"%d\", &q);\n\tfor (int i = 1, x, y; i <= q; i++) {\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tif (find(bel[x]) != find(bel[y])) printf(\"impossible\\n\");\n\t\telse printf(\"%d\\n\", LCA(x, y));\n\t}\n\treturn 0;\n}\n/*\n6 6\n1 2 5\n1 3 2\n2 3 11\n2 4 6\n3 4 4\n5 6 3\n5\n2 3\n1 4\n1 2\n5 1\n5 6\n*/\n\n```\n\n> \u65e5\u62f1\u4e00\u5352\uff0c\u529f\u4e0d\u5510\u6350\u3002",
        "postTime": 1600499136,
        "uid": 18673,
        "name": "ctq1999",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2245 \u661f\u9645\u5bfc\u822a"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u8fd9\u9898\u4e00\u5b9a\u8981\u7528kruskal\u91cd\u6784\u6811?\n\n\u5176\u5b9e\u76f4\u63a5\u500d\u589e\u5c31\u597d\u4e86\u554a......\n\n\u628a\u6700\u5c0f\u751f\u6210\u6811\u641e\u51fa\u6765, \u7136\u540e\u76f4\u63a5\u5728\u6811\u4e0a\u500d\u589e\u6c42\u6700\u5c0f\u8fb9\u6743\u5c31\u884c\u4e86.\n\n\u5438\u4e00\u53e3\u6c27\u597d\u50cf\u76f4\u63a5\u6324\u8fdb\u4e86\u6700\u4f18\u89e3\u7b2c\u4e00\u9762\u5427......\n\n```cpp\n#include<iostream>\n#include<queue>\n#include<algorithm>\n#define max(x,y) (x>y?x:y)// \u76f8\u4f20\u80fd\u53d8\u5feb, \u4f46\u662f\u5176\u5b9e\u53d8\u6162\u4e86\nusing namespace std;\nnamespace fio {\n\tstreambuf* in = cin.rdbuf();\n\tchar bb[1000000], * s = bb, * t = bb;\n#define gc() (s==t&&(t=(s=bb)+in->sgetn(bb,1000000),s==t)?EOF:*s++)\n\tinline int read() {// \u5feb\u8bfb\n\t\tint x = 0;\n\t\tchar ch = gc();\n\t\twhile (ch < 48)ch = gc();\n\t\twhile (ch >= 48)x = x * 10 + ch - 48, ch = gc();\n\t\treturn x;\n\t}\n}using fio::read;\ntypedef pair<int, int>mp;\ntypedef pair<mp, int>mmp;\nint anc[100005][20], maxn[100005][20], dep[100005], fa[100005];\nint n, m;\nvector<mmp>rds;\nvector<mp>road[100005];\nint find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); }\nvoid dfs(int x, int p) {\n\tdep[x] = dep[p] + 1, anc[x][0] = p;\n\tfor (int i = 1; i < 20; i++)anc[x][i] = anc[anc[x][i - 1]][i - 1], maxn[x][i] = max(maxn[x][i - 1], maxn[anc[x][i - 1]][i - 1]);\n\tfor (mp it : road[x])if (it.first != p)maxn[it.first][0] = it.second, dfs(it.first, x);\n}\nint lca(int x, int y) {// \u500d\u589e\u90e8\u5206\u6838\u5fc3\u4ee3\u7801\n\tint ans = 0;\n\tif (dep[x] < dep[y])swap(x, y);\n\tfor (int i = 19; ~i; i--)if (dep[anc[x][i]] >= dep[y])ans = max(ans, maxn[x][i]), x = anc[x][i];\n\tif (x == y)return ans;\n\tfor (int i = 19; ~i; i--)if (anc[x][i] != anc[y][i])ans = max(ans, max(maxn[x][i], maxn[y][i])), x = anc[x][i], y = anc[y][i];\n\treturn max(ans, max(maxn[x][0], maxn[y][0]));\n}\nvoid w(int x) {// \u5feb\u5199, \u5176\u5b9e\u8fd8\u6709\u66f4\u5feb\u7684\u4f46\u662f\u61d2\u5f97\u5199 :(\n\tif (x >= 10)w(x / 10);\n\tputchar(x % 10 + 48);\n}\nint main() {\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++)fa[i] = i;\n\tfor (int i = 1; i <= m; i++)rds.push_back({ {read(), read()}, read() });\n\tsort(rds.begin(), rds.end(), [](mmp a, mmp b) {return a.second < b.second; });// \u6784\u5efa\u6700\u5c0f\u751f\u6210\u6811\n\tfor (mmp it : rds)if (find(it.first.first) != find(it.first.second))\n\t\tfa[find(it.first.first)] = find(it.first.second),\n\t\troad[it.first.first].emplace_back(it.first.second, it.second), road[it.first.second].emplace_back(it.first.first, it.second);// \u6784\u5efa\u6700\u5c0f\u751f\u6210\u6811\n\tfor (int i = 1; i <= n; i++)if (!dep[i])dfs(i, 0);\n\tint q = read();\n\twhile (q--) {\n\t\tint x = read(), y = read();\n\t\tif(find(x)!=find(y))puts(\"impossible\");// you don't say!(\u5176\u5b9e\u662f\u6ca1\u6709\u770b\u89c1)\n\t\telse w(lca(x, y)), putchar('\\n');\n\t}\n}\n```\n",
        "postTime": 1575817114,
        "uid": 38485,
        "name": "Erina",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "### Description\n[[LuoGu2245]\u661f\u9645\u5bfc\u822a](https://www.luogu.org/problem/P2245)\n### Solution\n\u597d\u50cf\u53eb\u4f5c\u6700\u5c0f\u74f6\u9888\u8def\u95ee\u9898\n\n\u5c31\u662f\u628a\u539f\u56fe\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u5728\u6811\u4e0a\u8dd1$\\text{LCA}$\u7684\u6700\u5927\u503c\n\n\u5982\u679c\u4e0d\u5728\u4e00\u4e2a\u4e00\u9897\u6811\u4e0a\uff0c\u5c31\u8f93\u51fa$\\text{impossible}$\n\n\u7384\u5b66\u8bc1\u660e\u4e0d\u4f1a\n### Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 800010\nstruct rec {\n\tint nxt, ver, val;\n} t[N];\nstruct Rec {\n\tint u, v, w;\n} e[N];\nint n, m, q, cnt, tot, u, v;\nint fa[N], head[N], deep[N], f[N][21], h[N][21];\ninline int read() {\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n}\nint find(int x) {\n\tif (fa[x] == x) return x;\n\treturn fa[x] = find(fa[x]);\n}\ninline void Merge(int x, int y) {\n\tfa[find(x)] = find(y);\n}\ninline bool cmp(Rec x, Rec y) {\n\treturn x.w < y.w;\n}\ninline void add(int u, int v, int w) {\n\tt[++cnt].nxt = head[u], t[cnt].ver = v, t[cnt].val = w, head[u] = cnt;\n}\ninline void Init() {\n\tfor (register int i = 1; i <= n; i++)\n\t\tfa[i] = i;\n}\ninline void kruskal() {\n\tsort(e + 1, e + m + 1, cmp);\n\tfor (register int i = 1; i <= m; i++) {\n\t\tint eu = find(e[i].u), ev = find(e[i].v);\n\t\tif (eu == ev) continue;\n\t\tadd(e[i].u, e[i].v, e[i].w), add(e[i].v, e[i].u, e[i].w);\n\t\tfa[ev] = eu;\n\t\t++tot;\n\t\tif (tot == n - 1) break;\n\t}\n}\nvoid DFS(int u, int fa, int w) {\n\tdeep[u] = deep[fa] + 1;\n\tf[u][0] = fa, h[u][0] = w;\n\tfor (register int i = 1; i <= 20; i++)\n\t\tf[u][i] = f[f[u][i - 1]][i - 1],\n\t\th[u][i] = max(h[u][i - 1], h[f[u][i - 1]][i - 1]);\n\tfor (register int i = head[u]; i; i = t[i].nxt) {\n\t\tint v = t[i].ver;\n\t\tif (v != fa)\n\t\t\tDFS(v, u, t[i].val);\n\t}\n}\ninline int LCA(int u, int v) {\n\tint ans = 0;\n\tif (deep[u] < deep[v]) swap(u, v);\n\tfor (register int i = 20; i >= 0; i--)\n\t\tif (deep[f[u][i]] >= deep[v]) {\n\t\t\tans = max(ans, h[u][i]);\n\t\t\tu = f[u][i];\n\t\t}\n\tif (u == v) return ans;\n\tfor (register int i = 20; i >= 0; i--)\n\t\tif (f[u][i] != f[v][i]) {\n\t\t\tans = max(ans, h[u][i]), ans = max(ans, h[v][i]);\n\t\t\tu = f[u][i], v = f[v][i];\n\t\t}\n\tans = max(ans, h[u][0]), ans = max(ans, h[v][0]);\n\treturn ans;\n}\nint main() {\n\t//freopen(\"a.in\", \"r\", stdin);\n\t//freopen(\"1.out\", \"w\", stdout);\n\tn = read(), m = read();\n\tfor (register int i = 1; i <= m; i++)\n\t\te[i].u = read(), e[i].v = read(), e[i].w = read();\n\tInit();\n\tkruskal();\n\tfor (register int i = 1; i <= n; i++)\n\t\tif (!deep[i])\n\t\t\tDFS(i, 0, 0);\n\tq = read();\n\tfor (register int i = 1; i <= q; i++) {\n\t\tu = read(), v = read();\n\t\tif (find(u) != find(v))\n\t\t\tprintf(\"impossible\\n\");\n\t\telse\n\t\t\tprintf(\"%d\\n\", LCA(u, v));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1573438621,
        "uid": 31069,
        "name": "Agakiss",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problem/P2245)\n\n**\u6700\u5c0f\u751f\u6210\u6811+\u6811\u94fe\u5256\u5206**\n\n\u8fd9\u9898\u53ef\u4ee5\u5148\u8dd1\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u6837\u5c31\u80fd\u6ee1\u8db3\u6bcf\u6761\u8fb9\u7684\u5371\u9669\u7a0b\u5ea6\u5c3d\u53ef\u80fd\u5c0f\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u5982\u679c\u66b4\u529b\u679a\u4e3e\u5fc5\u7136\u8d85\u65f6\u3002\u6240\u4ee5\u53ef\u4ee5\u628a\u6700\u5c0f\u751f\u6210\u6811\u6811\u5256\u4e00\u904d\uff0c\u5e76\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u503c\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5c31\u53ef\u4ee5\u66f4\u5feb\u7684\u5f97\u51fa\u7ed3\u679c\u8f93\u51fa\u3002\u6ce8\u610f\u56fe\u4e0d\u4e00\u5b9a\u8054\u901a\uff0c\u6240\u4ee5\u8981\u5efa\u4e00\u4e2a\u8d85\u7ea7\u539f\u70b9\uff0c\u5e76\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e24\u70b9\u662f\u5426\u8054\u901a\u3002\n\n\u6ce8\u610f\u8fb9\u6743\u8981\u8f6c\u4e3a\u70b9\u6743\n\n\u8d34\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nlong long n,m,tot,cnt,num;\nstruct node{\n\tlong long x,y,z;\n};\nnode edge[500010],edge2[500010];\nlong long fa[100010],head[100010];\nstruct data{\n\tlong long to,nex,val;\n};\ndata EDGE[1000010];\nstruct dada{\n\tlong long top,deep,id,fa,son,size,val;\n};\ndada treecut[1000100];\nstruct node2{\n\tlong long mx;\n};\nnode2 tree[4000100];\nvoid add(long long x,long long y,long long z){\n\tEDGE[++tot].to=y;\n\tEDGE[tot].nex=head[x];\n\tEDGE[tot].val=z;\n\thead[x]=tot;\n}\nbool cmp(const node &q,const node &w){\n\treturn q.z<w.z;\n}\nlong long find(long long x){ //\u5e76\u67e5\u96c6 \n\tif(fa[x]!=x) fa[x]=find(fa[x]);\n\treturn fa[x];\n}\nvoid krus(){   //\u6c42\u6700\u5c0f\u751f\u6210\u6811 \n\tlong long xx,yy;\n\tfor(long long i=1;i<=m;i++){\n\t\txx=find(edge[i].x);\n\t\tyy=find(edge[i].y);\n\t\tif(xx!=yy){\n\t\t\tfa[xx]=yy;\n\t\t\tadd(edge[i].x,edge[i].y,edge[i].z);\n\t\t\tadd(edge[i].y,edge[i].x,edge[i].z);\n\t\t\tedge2[++num].x=edge[i].x;\n\t\t\tedge2[num].y=edge[i].y;\n\t\t\tedge2[num].z=edge[i].z;\n\t\t}\n\t}\n}\nvoid pushup(long long rt,long long l,long long r){\n\tif(l!=r){\n\t\ttree[rt].mx=max(tree[rt*2].mx,tree[rt*2+1].mx);\n\t}\n}\nvoid build(long long rt,long long l,long long r){ //\u7ebf\u6bb5\u6811\u5efa\u6811 \n\tif(l==r){\n\t\ttree[rt].mx=treecut[l].val;\n\t\treturn ;\n\t}\n\tlong long mid=(l+r)/2;\n\tbuild(rt*2,l,mid);\n\tbuild(rt*2+1,mid+1,r);\n\tpushup(rt,l,r);\n}\nlong long ask(long long rt,long long l,long long r,long long x,long long y){ //\u7ebf\u6bb5\u6811\u67e5\u8be2 \n\tif(x<=l && y>=r){\n\t\treturn tree[rt].mx;\n\t}\n\tlong long mid=(l+r)/2;\n\tlong long anss=-10000000000000;\n\tif(x<=mid) anss=max(anss,ask(rt*2,l,mid,x,y));\n\tif(y>mid) anss=max(anss,ask(rt*2+1,mid+1,r,x,y));\n\treturn anss; \n}\nvoid dfs1(long long rt,long long father,long long depp){ //\u6811\u5256 \n\ttreecut[rt].fa=father;\n\ttreecut[rt].deep=depp;\n\ttreecut[rt].size=1;\n\tlong long maxson=-1;\n\tfor(long long i=head[rt];i;i=EDGE[i].nex){\n\t\tlong long y;\n\t\ty=EDGE[i].to;\n\t\tif(y==father) continue ;\n\t\tdfs1(y,rt,depp+1);\n\t\ttreecut[rt].size+=treecut[y].size;\n\t\tif(treecut[y].size>maxson){\n\t\t\tmaxson=treecut[y].size;\n\t\t\ttreecut[rt].son=y;\n\t\t}\n\t}\n}\nvoid dfs2(long long rt,long long topp){\n\ttreecut[rt].top=topp;\n\ttreecut[rt].id=++cnt;\n\tif(treecut[rt].son==0) return ;\n\tdfs2(treecut[rt].son,topp);\n\tfor(long long i=head[rt];i;i=EDGE[i].nex){\n\t\tlong long y;\n\t\ty=EDGE[i].to;\n\t\tif(y==treecut[rt].fa || y==treecut[rt].son) continue ; \n\t\tdfs2(y,y);\n\t}\n}\nlong long update(long long x,long long y){\n\tlong long anss=-1000000000000;\n\twhile(treecut[x].top!=treecut[y].top){\n\t\tif(treecut[treecut[x].top].deep<treecut[treecut[y].top].deep) swap(x,y);\n\t\tanss=max(anss,ask(1,1,n+1,treecut[treecut[x].top].id,treecut[x].id));\n\t\tx=treecut[treecut[x].top].fa;\n\t}\n\tif(treecut[x].id>treecut[y].id) swap(x,y);\n\tanss=max(anss,ask(1,1,n+1,treecut[x].id+1,treecut[y].id));\n\treturn anss;\n}\nint main(){\n\tscanf(\"%lld %lld\",&n,&m);\n\ttot=1;\n\tfor(long long i=1;i<=m;i++){\n\t\tscanf(\"%lld %lld %lld\",&edge[i].x,&edge[i].y,&edge[i].z);\n\t}\n\tsort(edge+1,edge+m+1,cmp);\n\tfor(long long i=1;i<=n;i++){\n\t\tfa[i]=i;\n\t}\n\tkrus();  //\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811 \n\tfor(long long i=1;i<=n;i++){\n\t\tif(fa[i]==i){\n\t\t\tadd(0,i,0);\n\t\t\tadd(i,0,0);\n\t\t}\n\t}\n\tdfs1(0,-1,1);\n\tdfs2(0,0);\n\tfor(long long i=1;i<=num;i++){ //\u6ce8\u610f\u8fb9\u6743\u8f6c\u70b9\u6743 \n\t\tif(treecut[edge2[i].x].deep>treecut[edge2[i].y].deep){\n\t\t\ttreecut[treecut[edge2[i].x].id].val=edge2[i].z;\n\t\t}\n\t\telse treecut[treecut[edge2[i].y].id].val=edge2[i].z;\n\t}\n\tbuild(1,1,n+1); //\u5efa\u6811 \n\tlong long q;\n\tscanf(\"%lld\",&q);\n\tfor(long long i=1;i<=q;i++){\n\t\tlong long b,c;\n\t\tscanf(\"%lld %lld\",&b,&c);\n\t\tif(find(b)!=find(c)) printf(\"impossible\\n\"); //\u5224\u65ad\u662f\u5426\u8054\u901a \n\t\telse{\n\t\t\tprintf(\"%lld\\n\",update(b,c));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n[\u53cc\u500d\u7ecf\u9a8c\uff1f\uff1f\uff1f\uff01\uff01\uff01](https://www.luogu.org/problem/P1967)",
        "postTime": 1565767045,
        "uid": 55843,
        "name": "ueettttuj",
        "ccfLevel": 0,
        "title": "P2245 \u661f\u9645\u5bfc\u822a"
    },
    {
        "content": "\u63d0\u4f9b\u7528tarjan\u6c42lca\u6cd5\n\n\u601d\u8def\u53ef\u4ee5\u53c2\u8003\u6211\u4e4b\u524d\u7684\u9898\u89e3\n\n[P1967 \u8d27\u8f66\u8fd0\u8f93](https://www.luogu.org/blog/van/solution-p1967)\n\nP1967\u8fd9\u9053\u9898\u67e5\u7684\u662f\u8def\u5f84\u6700\u5c0f\u6743\u503c\u7684\u6700\u5927\u503c\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u67e5\u7684\u662f\u8def\u5f84\u6700\u5927\u6743\u503c\u7684\u6700\u5c0f\u503c\n\n\u628a\u5feb\u6392cmp\u7684\u5927\u4e8e\u6539\u6210\u5c0f\u4e8e\u5c31\u597d\u4e86\n```cpp\n#include<cstdio>\n#include<algorithm>\nconst int N=1000000,M=3000000;\nbool f[2*N];\nint n,m,que,from[N],cnt,i,fa[2*N],ans[N],k;\nstruct edge{int to,w,next;}e[M],q[N*2],te[M];\n//\u8fd9\u91cc\u5176\u5b9e\u5077\u61d2\u4e86\uff0c\u5176\u5b9e\u8fd9\u4e2a\u662f\u90bb\u63a5\u8868\u7684\u7ed3\u6784\uff0c\u800ce\u548cte\u6570\u7ec4\u5e76\u4e0d\u662f\u771f\u7684\u90bb\u63a5\u8868 \n//e\u4ee3\u8868\u8bfb\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\uff0cto\u4ee3\u8868\u8be5\u8fb9\u7684\u4e00\u4e2a\u8282\u70b9\uff0cnext\u4ee3\u8868\u53e6\u4e00\u4e2a\u8282\u70b9\uff0cw\u4ee3\u8868\u8fb9\u6743 \n//te\u4e0ee\u7684\u7ed3\u6784\u4e00\u6837\uff0c\u4ee3\u8868\u6700\u5927\u751f\u6210\u6811\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\nstruct tree{int l,r,d;}t[N*2];\ninline void read(int &x)\n{\n    short fh=1;x=0;char cc=getchar();\n    while (cc>57||cc<48)fh=cc=='-'?-1:fh,cc=getchar();\n    while (cc>=48&&cc<=57)x=x*10+cc-48,cc=getchar();\n    x*=fh;\n}\ninline void add(int a,int b,int c)\n{\n    q[++cnt].next=from[a];\n    q[cnt].to=b;\n    q[cnt].w=c;\n    from[a]=cnt;\n}\ninline bool cmp(const edge &e1,const edge &e2)\n{\n    return e1.w<e2.w;\n}\nint Find(int o)\n{\n    return fa[o]==o?o:fa[o]=Find(fa[o]);\n}\ninline void Union(int a,int b)\n{\n    int f1=Find(a),f2=Find(b);\n    if (f1==f2)return;\n    fa[f2]=f1;\n}\ninline void kruskal()  //\u6700\u5927\u751f\u6210\u6811 \n{\n    for (int i=1;i<=m;i++)\n    {\n        int u=e[i].to,v=e[i].next;\n        if (Find(u)!=Find(v))\n            Union(u,v),te[++k]=e[i]; //\u5c06\u8be5\u6761\u8fb9\u52a0\u5230\u6700\u5927\u751f\u6210\u6811\u4e2d \n    }\n}\ninline void build()\n{\n    for (int i=1;i<=k;i++) //\u5728\u6700\u5927\u751f\u6210\u6811\u7684\u6bcf\u4e00\u6761\u8fb9\u91cc\u627e \n    {\n        //\u901a\u8fc7\u5e76\u67e5\u96c6\u5b9e\u73b0\uff0c\u5e76\u67e5\u96c6\u7684\u9876\u7aef\u5373\u5b50\u6811\u7684\u6839 \n        int u=Find(te[i].to),v=Find(te[i].next);\n        t[n+i].l=u;t[n+i].r=v;\n        //\u56e0\u4e3at[n+i]\u7684\u8282\u70b9\u80af\u5b9a\u662f\u95f2\u7f6e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b83\u5f53\u4f5c\u4e00\u4e2a\u5b58\u6743\u503c\u7684\u8282\u70b9\uff0c\u4ee3\u8868\u4ece\u5b83\u7684\u5de6\u5b50\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5230\u53f3\u5b50\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u7b54\u6848 \n        t[n+i].d=te[i].w;\n        Union(n+i,u);Union(n+i,v);\n    }\n}\nvoid tarjan(int p) //\u6c42\u4e24\u70b9\u7684LCA \n{\n    f[p]=1;\n    for (int i=from[p];i;i=q[i].next)\n    {\n        int v=q[i].to;\n        if (f[v])ans[q[i].w]=t[Find(v)].d;\n    }\n    int ls=t[p].l,rs=t[p].r;\n    if (ls)tarjan(ls),Union(p,ls);\n    if (rs)tarjan(rs),Union(p,rs);\n}\nint main()\n{\n    read(n);read(m);\n    for (int i=1;i<=m;i++)\n        read(e[i].to),read(e[i].next),read(e[i].w);\n    read(que);\n    for (int i=1;i<=que;i++)\n    {\n        int x,y;\n        read(x);read(y);\n        add(x,y,i),add(y,x,i);\n    }\n    std::sort(e+1,e+m+1,cmp);\n    for (int i=1;i<2*n;i++)fa[i]=i;kruskal();\n    for (int i=1;i<2*n;i++)fa[i]=i;build();\n    for (int i=1;i<2*n;i++)fa[i]=i;tarjan(n+k);\n    for (int i=1;i<=que;i++)\n    \tif (ans[i])printf(\"%d\\n\",ans[i]);\n        else puts(\"impossible\");\n    return 0;\n}\n```",
        "postTime": 1533829715,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "\u697c\u4e0b \u500d\u589e\u3001\u6811\u5256 \u4ec0\u4e48\u7684\u90fd\u6709\uff0c\u8fd9\u91cc\u7ed9\u4e00\u79cd LCT \u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\uff0c\u4f60\u8981\u77e5\u9053LCT\u662f\u4ec0\u4e48\u2014\u2014[P3690 \u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09](https://www.luogu.org/problemnew/show/P3690)\n\n\u7136\u540e\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\uff0c\u51e1\u662f \u6811\u5256\u3001LCA \u80fd\u505a\u7684\uff0cLCT \u90fd\u80fd\u505a\uff01\n\nLCT\u662f\u4e2a\u597d\u4e1c\u897f\u554a\uff01\u4e0d\u7528\u8003\u8651\u68ee\u6797\uff08\u4e0d\u6b62\u4e00\u9897\u6811\uff09\u7684\u60c5\u51b5\uff01\n\n\u9996\u5148\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u6ca1\u5f97\u8bf4\u3002\u3002\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u9898\u8981\u6c42\u7684\u4e0d\u662f\u70b9\u6743\uff0c\u800c\u662f\u8fb9\u6743\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u6dfb\u52a0\u4e00\u6761 u->v \u7684\u8fb9\uff0c\u6743\u503c\u4e3aw\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\uff1a\n\n```cpp\nlink(u,id);link(v,id);//id\u662f\u8fb9\u7684\u5e8f\u53f7\nvalue[id]=w;\n```\n\n\u4e8e\u662f\u8fd9\u4e2a\u95ee\u9898\u5c31\u88ab\u6109\u5feb\u5730\u89e3\u51b3\u4e86\u3002\n\n\u6ce8\uff1aLCT\u4e2d\u53ef\u4ee5\u4fdd\u5b58\u8fb9\u7684\u5e8f\u53f7\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4fdd\u5b58\u8fb9\u6743\uff08\u6682\u65f6\u8fd8\u6ca1\u8bd5\u8fc7\uff09\uff0c\u6211\u662f\u4fdd\u5b58\u4e86\u8fb9\u7684\u5e8f\u53f7\u3002\n\n\u9644\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define MAXN 300010\nusing namespace std;\nint n,m,q;\nint w[MAXN<<1],fa[MAXN];//\u56e0\u4e3a\u6709\u8fb9\u7684\u5e8f\u53f7\uff0c\u6240\u4ee5\u5f00\u4e24\u500d\uff01\nint top,stack[MAXN<<1];\nstruct node1{//Link-Cut-Tree\uff0c\u672c\u849f\u84bb\u4e60\u60ef\u7528\u7ed3\u6784\u4f53\n\tint f,flag,son[2];\n\tint v;\n}a[MAXN<<1];\nstruct node2{\n\tint u,v,w;\n}b[MAXN];\ninline int read(){//\u8bfb\u4f18\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\nbool cmp(const node2 &x,const node2 &y){\n\treturn x.w<y.w;\n}\ninline bool isroot(int rt){//\u5224\u6839\n\treturn a[a[rt].f].son[0]!=rt&&a[a[rt].f].son[1]!=rt;\n}\ninline void pushup(int rt){//\u4e0a\u4f20\n\tif(!rt)return;\n\ta[rt].v=rt;\n\tif(w[a[rt].v]<w[a[a[rt].son[0]].v])a[rt].v=a[a[rt].son[0]].v;\n\tif(w[a[rt].v]<w[a[a[rt].son[1]].v])a[rt].v=a[a[rt].son[1]].v;\n}\ninline void pushdown(int rt){//\u4e0b\u4f20\n\tif(!rt||!a[rt].flag)return;\n\ta[a[rt].son[0]].flag^=1;a[a[rt].son[1]].flag^=1;a[rt].flag^=1;//\u5f53\u521d\u8fd9\u91cc\u628a1\u6572\u6210\u4e860\uff0c\u7136\u540e\u8c03\u4e86\u4e00\u4e0b\u5348\uff08\u5403\u67a3\u836f\u4e38\u3002\u3002\u3002\uff09\n\tswap(a[rt].son[0],a[rt].son[1]);\n}\ninline void turn(int rt){//\u65cb\u8f6c\n\tint x=a[rt].f,y=a[x].f,k=a[x].son[0]==rt?1:0;\n\tif(!isroot(x)){\n\t\tif(a[y].son[0]==x)a[y].son[0]=rt;\n\t\telse a[y].son[1]=rt;\n\t}\n\ta[rt].f=y;a[x].f=rt;a[a[rt].son[k]].f=x;\n\ta[x].son[k^1]=a[rt].son[k];a[rt].son[k]=x;\n\tpushup(x);pushup(rt);\n}\nvoid splay(int rt){//\u4f38\u5c55\n\ttop=0;\n\tstack[++top]=rt;//\u6700\u597d\u4e0d\u8981\u5728\u51fd\u6570\u5185\u5b9a\u4e49\uff0c\u53ef\u80fd\u4f1aRE\u3002\n\tfor(int i=rt;!isroot(i);i=a[i].f)stack[++top]=a[i].f;\n\twhile(top)pushdown(stack[top--]);\n\twhile(!isroot(rt)){\n\t\tint x=a[rt].f,y=a[x].f;\n\t\tif(!isroot(x)){\n\t\t\tif((a[y].son[0]==x)^(a[x].son[0]==rt))turn(rt);\n\t\t\telse turn(x);\n\t\t}\n\t\tturn(rt);\n\t}\n}\nvoid access(int rt){//\u6253\u91cd\u94fe\n\tfor(int i=0;rt;i=rt,rt=a[rt].f){\n\t\tsplay(rt);\n\t\ta[rt].son[1]=i;\n\t\tpushup(rt);\n\t}\n}\ninline void makeroot(int rt){access(rt);splay(rt);a[rt].flag^=1;}//\u6362\u6839\ninline void split(int x,int y){makeroot(x);access(y);splay(y);}//\u53d6\u51fa\u91cd\u94fe\ninline void link(int x,int y){makeroot(x);a[x].f=y;}//\u8fde\u8fb9\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nvoid uniun(int x,int y){x=find(x);y=find(y);if(x!=y)fa[y]=x;}//\u5e76\u67e5\u96c6\nvoid kruskal(){//\u6700\u5c0f\u751f\u6210\u6811\n\tint s=0;\n\tfor(int i=1;i<=n;i++){//\u521d\u59cb\u5316\n\t\tfa[i]=i;\n\t\ta[i].v=i;\n\t\tw[i]=0;\n\t}\n\tsort(b+1,b+m+1,cmp);//\u6392\u5e8f\n\tfor(int i=1;i<=m;i++){//\u5c06\u8fb9\u6743\u5b58\u5165LCT\n\t\tw[i+n]=b[i].w;\n\t\ta[i+n].v=i+n;\n\t}\n\tfor(int i=1;i<=m&&s<n-1;i++)\n\tif(find(b[i].u)!=find(b[i].v)){//\u751f\u6210\u6811\n\t\tuniun(b[i].u,b[i].v);\n\t\tlink(b[i].u,i+n);\n\t\tlink(b[i].v,i+n);//\u8fde\u8fb9\n\t\ts++;\n\t}\n}\nvoid work(){//\u5de5\u4f5c\n\tint x,y;\n\tq=read();\n\twhile(q--){\n\t\tx=read();y=read();\n\t\tif(find(x)!=find(y)){//\u8bb0\u5f97\u8fd9\u53e5\n\t\t\tprintf(\"impossible\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tsplit(x,y);\n\t\tprintf(\"%d\\n\",w[a[y].v]);//\u76f4\u63a5\u8f93\u51fa\n\t}\n}\nvoid init(){//\u8bfb\u5165+\u9884\u5904\u7406\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++){b[i].u=read();b[i].v=read();b[i].w=read();}\n\tkruskal();\n}\nint main(){//\u4e3b\u51fd\u6570So easy\uff01\n\tinit();\n\twork();\n\treturn 0;\n}\n\n```",
        "postTime": 1523009245,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709\u6811\u94fe\u5256\u5206\u7684\u9898\u89e3\uff0c\u4e8e\u662f\u8d76\u7d27\u6765\u4e00\u53d1\u3002 \u5982\u679c\u8fd8\u4e0d\u4f1a\u4f1a\u6811\u94fe\u5256\u5206\uff0c\u53ef\u4ee5\u5728[\u8fd9\u91cc](https://www.luogu.org/problemnew/show/3384)\u5b66\u4e00\u4e0b\uff0c\u6253\u6253\u677f\u5b50\u3002\n\n\u53ef\u80fd\u56e0\u4e3a\u8fd9\u9898\u6709\u591a\u4e2a\u8054\u901a\u5757\uff0c\u7528\u6811\u5256\u505a\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6(\u5efan\u9897\u7ebf\u6bb5\u6811)\u6240\u4ee5\u7528\u6811\u5256\u7684\u4eba\u5f88\u5c11\uff0c\u4f46\u662f\u8fd9\u4e2a\u9ebb\u70e6\u8fd8\u662f\u53ef\u4ee5\u89e3\u51b3\u7684\uff1a\n\n\u53ea\u8981\u5efa\u4e00\u4e2a\u865a\u70b9(\u8fd9\u91cc\u4f7f\u75280\u53f7\u8282\u70b9)\uff0c\u5c06\u6240\u6709\u8054\u901a\u5757\u8fde\u8d77\u6765\u5373\u53ef\uff0c\u518d\u4ece0\u53f7\u8282\u70b9dfs\u5c31\u53ea\u7528dfs\u4e00\u904d\u4e86\uff0c\u7136\u540e\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282(\u5728\u4ee3\u7801\u4e2d\u6307\u51fa)\uff0c\u8fd9\u9898\u5c31\u57fa\u672c\u4e0a\u6ca1\u4ec0\u4e48\u95ee\u9898\u4e86\uff01\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<string>\n#include<map>\n#include<set>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<algorithm>\n#define RG register\n#define file(x) freopen(x\".in\",\"r\",stdin);freopen(x\".out\",\"w\",stdout);\nusing namespace std;\n\ninline int gi(){\n    int data=0,w=1;\n    char ch=0;\n    while(ch!='-'&&(ch>'9'||ch<'0')) ch=getchar();\n    if(ch=='-') w=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') data=data*10+ch-'0',ch=getchar();\n    return data*w;\n}\n#define N 100010\nint n,m,fa[N],p[N],a[N];\nstruct Edge{int u,v,w;}e[N*3];//\u5b58\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\n\nstruct Node{int to,cost;};\nvector<Node> G[N];//\u672c\u4eba\u4e60\u60ef\u7528vector\u5b58\u56fe\ninline void Add_Edge(int u,int v,int w){\n    G[u].push_back((Node){v,w});\n    G[v].push_back((Node){u,w});\n}\n\n//\u5e76\u5dee\u96c6\u5224\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408+\u6700\u5c0f\u751f\u6210\u6811\nint findSet(int x){return p[x]==x?x:p[x]=findSet(p[x]);}\ninline void Unite(int u,int v){p[findSet(u)]=p[findSet(v)];}\ninline bool same(int u,int v){return findSet(u)==findSet(v);}\ninline bool cmp(const Edge &a,const Edge &b){return a.w<b.w;}\ninline void kruskal(){\n    sort(&e[1],&e[m+1],cmp);\n    for(RG int i=1;i<=m;i++){\n        if(same(e[i].v,e[i].u)) continue;\n        Add_Edge(e[i].v,e[i].u,e[i].w);\n        Unite(e[i].v,e[i].u);\n    }\n}\n//\u4ee5\u4e0b\u662f\u6811\u94fe\u5256\u5206\nint top[N],dep[N],size[N],son[N],L[N],dfn[N],tim=-1;//\u7ec6\u82821\uff1atim\u8d4b\u4e3a-1(\u56e0\u4e3a\u4ece0\u5f00\u59cbdfs)\n#define cur G[x][i]\nvoid dfs(int x,int f){//\u628a\u8fb9\u6743\u5316\u4e3a\u70b9\u6743\u5e76\u6c42\u51fafa[x]\n    fa[x]=f;\n    for(RG int i=0;i<G[x].size();i++){\n        if(cur.to==fa[x]) continue;\n        a[cur.to]=cur.cost;\n        dfs(cur.to,x);\n    }\n}\nvoid dfs1(int x){\n    dep[x]=dep[fa[x]]+1;\n    size[x]=1;\n    son[x]=n+1;//\u7ec6\u82822\uff1a\u91cd\u513f\u5b50\u662f\u8d4b\u4e3an+1\uff080\u662f\u6839\u8282\u70b9\uff09\n    for(RG int i=0;i<G[x].size();i++){\n        if(cur.to==fa[x]) continue;\n        dfs1(cur.to);\n        size[x]+=size[cur.to];\n        if(size[son[x]]<size[cur.to]) son[x]=cur.to;\n    }\n}\nvoid dfs2(int x,int tp){\n    top[x]=tp;\n    tim++;\n    dfn[tim]=x;L[x]=tim;\n    if(son[x]!=n+1) dfs2(son[x],tp);\n    for(RG int i=0;i<G[x].size();i++){\n        if(cur.to==fa[x]||cur.to==son[x]) continue;\n             dfs2(cur.to,cur.to);\n    }\n}\n//\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8def\u5f84\u6700\u5c0f\nclass SegMent_Tree{\n    #define lson ( o<<1)\n    #define rson ((o<<1)|1)\n    public:\n    int val[N<<2];\n    void build(int o,int l,int r){\n        if(l==r){\n            val[o]=a[dfn[l]];\n            return ;\n        }\n        int mid=(l+r)>>1;\n        build(lson,l,mid);\n        build(rson,mid+1,r);\n        pushup(o);\n    }\n    int query(int o,int ql,int qr,int l,int r){\n        if(l>qr||r<ql) return -99999999;\n        if(ql<=l&&r<=qr) return val[o];\n        int mid=(l+r)>>1;\n        return max(query(lson,ql,qr,l,mid),query(rson,ql,qr,mid+1,r));\n    }\n    inline int Ask(int u,int v){\n        int ret=-99999999;\n        while(top[u]!=top[v]){\n            if(dep[top[u]]<dep[top[v]]) swap(u,v);\n            ret=max(ret,query(1,L[top[u]],L[u],1,n));\n            u=fa[top[u]];\n        }\n        if(dep[u]<dep[v]) swap(u,v);\n        return max(ret,query(1,L[v]+1,L[u],1,n));//\u7ec6\u82823\uff1a\u6ce8\u610f\u662fL[v]+1,\u81ea\u5df1\u60f3\u4e00\u60f3\u662f\u4ec0\u4e48\u539f\u56e0\n    }\n    private:\n    inline void pushup(int o){val[o]=max(val[lson],val[rson]);}\n}t;\n\nint main(){\n    n=gi();m=gi();\n    for(RG int i=1;i<=m;i++) e[i].u=gi(),e[i].v=gi(),e[i].w=gi();\n    for(RG int i=1;i<=n;i++) p[i]=i;//\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    kruskal();//\u751f\u6210\u6811\n    memset(fa,-1,sizeof(fa));//\u628afa\u6570\u7ec4\u521d\u59cb\u5316\u6210-1\uff0c\u56e0\u4e3a\u5efa\u7684\u865a\u70b9\u4e3a0\n    fa[0]=0;//\u7ec6\u82824\uff1afa[0]=0,\u8981\u4e0d\u7136\u4f1aRE\n    for(RG int i=1;i<=n;i++) if(fa[i]==-1) dfs(i,0);\n    for(RG int i=1;i<=n;i++) if(fa[i]==0) Add_Edge(i,0,0);\n    dfs1(0);dfs2(0,0);\n    RG int T=gi();\n    t.build(1,1,n);\n    while(T--){\n        int u=gi(),v=gi();\n        if(!same(u,v)) puts(\"impossible\");\n        else printf(\"%d\\n\",t.Ask(u,v));\n    }\n    return 0;\n}\n```",
        "postTime": 1510285570,
        "uid": 42506,
        "name": "\u4f55\u4fde\u5747",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2245 \u3010\u661f\u9645\u5bfc\u822a\u3011"
    }
]