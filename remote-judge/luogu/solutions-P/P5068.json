[
    {
        "content": "\u53d1\u4e00\u4e2a\u4e0d\u9700\u8981\u7ebf\u6bb5\u6811\u5e76\u4e14\u5e38\u6570\u8d85\u5c0f ~~\uff08\u540a\u6253\u5176\u4ed6\u9898\u89e3\uff09~~ \u7684\u79bb\u7ebf\u505a\u6cd5\uff1f\n\n---\n\n$\\mathrm{update}\\ 2020.12.18:$ \u4fee\u4e86\u4e2a\u5c0f\u9505\u3002\n\n---\n\n\u5bb9\u6613\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u7684\u4f24\u5bb3\u503c $d$\uff0c \u6211\u4eec\u53ea\u9700\u8981\u4f9d\u6b21\u5173\u6ce8\u662f\u5426\u6709\u8840\u91cf\u5728 $[1,d],[d+1,2d],\\cdots,\\left[d\\cdot\\lfloor\\frac{n}{d}\\rfloor+1,n\\right]$ \u8fd9\u4e2a\u533a\u95f4\u4e2d\u7684\u968f\u4ece\uff08\u4e0d\u59a8\u7528\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(d,i)$ \u8868\u793a\u4f24\u5bb3\u503c\u4e3a  $d$ \u7684\u7b2c $i$ \u4e2a\u533a\u95f4\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4eb5\u6e0e\u6700\u591a\u4f1a\u88ab\u89e6\u53d1 $\\left\\lceil\\frac{n}{d}\\right\\rceil$ \u6b21\u3002\u90a3\u4e48\u6240\u6709 $d\\in [1,n]$\uff0c\u533a\u95f4\u603b\u6570\u4e00\u5171\u4e0d\u8d85\u8fc7 $\\mathcal{O}(n\\log n)$ \u4e2a\uff08\u662f\u4e2a\u8c03\u548c\u7ea7\u6570\uff09\u3002\n\n\u53ef\u4ee5\u8003\u8651\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u7136\u540e\u5206\u522b\u6c42\u51fa\u6bcf\u4e2a\u533a\u95f4\u6700\u65e9\u5b58\u5728\u968f\u4ece\u65f6\u662f\u5728\u7b2c\u51e0\u6b21\u64cd\u4f5c\u3002\u4e0d\u59a8\u5047\u8bbe\u4f24\u5bb3\u503c\u4e3a $d$ \u7684\u7b2c $i$ \u4e2a\u533a\u95f4\u5728 $t_{d,i}$ \u4e2a\u64cd\u4f5c\u65f6\u6700\u65e9\u6709\u968f\u4ece\u4e86\u3002\n\n\u8bbe $a_i$ \u8868\u793a\u6700\u65e9\u5728\u7b2c\u51e0\u4e2a\u64cd\u4f5c\u5b58\u5728\u8840\u91cf\u4e3a $i$ \u7684\u968f\u4ece\uff08\u5982\u679c\u81ea\u59cb\u81f3\u7ec8\u4e0d\u5b58\u5728\u5c31\u8bbe\u4e3a $m+1$\uff09\u3002\n\n\u6839\u636e\u5b9a\u4e49\u53ef\u77e5\uff1a\n\n$$t_{d,i}=\\min\\limits_{(i-1)d+1\\leq j\\leq\\min \\{id,n\\}} a_j$$\n\n\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7 ST \u8868\u89e3\u51b3\uff0c\u4e0d\u518d\u591a\u8bf4\u3002\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n\\log n)$\uff0c\u56e0\u4e3a ST \u8868\u53ef\u4ee5\u505a\u5230 $\\mathcal{O}(1)$ \u67e5\u8be2\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n\u518d\u8bbe $g_{d,i}$ \u8868\u793a\u4f24\u5bb3\u503c\u4e3a $d$ \u7684\u4eb5\u6e0e\u88ab\u89e6\u53d1\u81f3\u5c11 $i$ \u6b21\u6700\u65e9\u5728\u7b2c\u51e0\u6b21\u64cd\u4f5c\u3002\u663e\u7136 $g_{d,i}=\\max \\{g_{d,i-1},t_{d,i}\\}$\u3002\n\n\u4ed4\u7ec6\u89c2\u5bdf\u4f1a\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $(d,i)$ \uff0c\u5b83\u4f1a\u5bf9\u5728 $g_{d,i}$ \u4e4b\u540e\u5e76\u4e14\u8be2\u95ee\u533a\u95f4\u5305\u542b $i$ \u7684\u8be2\u95ee\u64cd\u4f5c\u4ea7\u751f $1$ \u7684\u8d21\u732e\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u53ef\u4ee5\u628a\u6240\u6709 $g_{d,i}$ \u76f8\u540c\u7684\u533a\u95f4\u653e\u5230\u4e00\u8d77\u7136\u540e\u7528\u6811\u72b6\u6570\u7ec4\u7b80\u5355\u7ef4\u62a4\u3002\n\n\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal{O}(n\\log^2 n+m\\log n)$\u3002\uff08$n\\log^2n$ \u90e8\u5206\u5e26\u4e2a\u6811\u72b6\u6570\u7ec4\u4ee5\u53ca\u8c03\u548c\u7ea7\u6570\u7684\u5c0f\u5e38\u6570\uff09\n\n\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal{O}(n\\log^2n+m\\log n)$\u3002\n\n---\n\n***code:*** \uff08\u8d85\u77ed\uff09\n\n```cpp\ntypedef pair<int,int> pii;\ntypedef long long ll;\n#define N 100010\n#define M 1000100\nint n,a[N],m,f[N][20],lg[N];\npii q[M];\nvector<int> vec[M];\ninline int Query(int l,int r){\n\tint k=lg[r-l+1];\n\treturn min(f[l][k],f[r-(1<<k)+1][k]);\n}\nstruct BIT{\n\tint b[N];\n\tinline int lowbit(int x){\n\t\treturn x&(-x);\n\t}\n\tinline void Add(int x){\n\t\twhile(x<=n){\n\t\t\t++b[x];\n\t\t\tx+=lowbit(x);\n\t\t}\n\t}\n\tinline int Ask(int x){\n\t\tint ans=0;\n\t\twhile(x){\n\t\t\tans+=b[x];\n\t\t\tx-=lowbit(x);\n\t\t}\n\t\treturn ans;\n\t}\n}B; \nint main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;++i){\n\t\ta[i]=m+1;\n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tint opt=read();\n\t\tq[i]={-1,-1};\n\t\tif(opt==1){\n\t\t\tint x=read();\n\t\t\ta[x]=min(a[x],i);\n\t\t}\n\t\telse{\n\t\t\tq[i].first=read(),q[i].second=read();\n\t\t}\n\t}\n\tfor(int i=2;i<=n;++i){\n\t\tlg[i]=lg[i>>1]+1;\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tf[i][0]=a[i];\n\t}\n\tfor(int j=1;j<=18;++j){\n\t\tfor(int i=1;i+(1<<j)-1<=n;++i){\n\t\t\tf[i][j]=min(f[i][j-1],f[i+(1<<j-1)][j-1]);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tB.Add(i);\n\t\tint las=0;\n\t\tfor(int j=1;j<=n;j+=i){\n\t\t\tvec[las=max(las,Query(j,min(j+i-1,n)))].push_back(i);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tfor(auto x:vec[i]){\n\t\t\tB.Add(x);\n\t\t}\n\t\tif(~q[i].first){\n\t\t\tprintf(\"%d\\n\",B.Ask(q[i].second)-B.Ask(q[i].first-1));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n---\n\n[***Froggy's blog***](https://www.luogu.com.cn/blog/froggy/)\n\n\u5471\uff01",
        "postTime": 1606913479,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5068 \u3010[Ynoi2015]\u6211\u56de\u6765\u4e86\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u62ff\u5230 Ynoi \u7684\u4e00\u8840\uff0c\u6765\u4e2a\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\u3002\n\n\u6211\u4eec\u6765\u6316\u6398\u8fd9\u4e2a\u9898\u7684\u672c\u8d28\u3002\n\n\u9996\u5148\u671f\u671b\u4e0d\u592a\u597d\u6c42\uff0c\u53d1\u73b0\u8fd9\u4e2a\u671f\u671b\u4e58\u4e0a $r-l+1$ \u4e4b\u540e\u5176\u5b9e\u5c31\u662f\u8fd9\u4e2a\u533a\u95f4\u5185\u6240\u6709\u4eb5\u6e0e\u7684\u6b21\u6570\u52a0\u8d77\u6765\uff0c\u95ee\u9898\u8f6c\u53d8\u4e3a\u5982\u4f55\u5feb\u901f\u7ef4\u62a4\u51fa\u4e00\u6bb5\u533a\u95f4\u7684\u4eb5\u6e0e\u6b21\u6570\u4e4b\u548c\u3002\n\n\u4e24\u4e2a\u76f8\u540c\u8840\u91cf\u7684\u968f\u4ece\u663e\u7136\u6ca1\u6709\u610f\u4e49\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u968f\u4ece\u96c6\u5408\u5bf9\u5e94\u5230\u4e00\u4e2a\u6570\u8f74\u4e0a\u9762\uff0c\u6bcf\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u90fd\u662f $0/1$\u3002\n\n\u7136\u540e\u6211\u4eec\u6765\u770b\u6bcf\u6b21\u4eb5\u6e0e\u90fd\u505a\u4e86\u4ec0\u4e48\uff1a\n\n\u4f8b\u5982\u4f24\u5bb3\u503c $d=4$\uff0c\u968f\u4ece\u7684\u8840\u91cf\u4e3a\u96c6\u5408 $\\{2,3,5,7,12, 19\\}$\uff0c$n=20$\u3002\n\n\u5bf9\u5e94\u5230\u6570\u8f74\u4e0a\uff08\u8bbe\u5176\u4e3a $a$\uff09\u5c31\u662f\u8fd9\u6837\uff1a\n\n$$0,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0$$\n\n\u9996\u5148\u7b2c\u4e00\u6b21\u4eb5\u6e0e\uff0c\u8840\u91cf $\\leq 4$\uff08\u6846\u5185\uff09\u7684\u6b7b\u4ea1\u3002\n\n$$\\boxed{0,1,1,0},1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0$$\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u91cc\u6709\u968f\u4ece\u6b7b\u4ea1\uff0c\u56e0\u6b64\u7ee7\u7eed\uff1a\n\n$$\\boxed{0,1,1,0},\\boxed{1,0,1,0},0,0,0,1,0,0,0,0,0,0,1,0$$\n\n\u4ecd\u7136\u6709\u6b7b\u4ea1\uff0c\u7ee7\u7eed\uff1a\n\n$$\\boxed{0,1,1,0},\\boxed{1,0,1,0},\\boxed{0,0,0,1},0,0,0,0,0,0,1,0$$\n\n\u8fd8\u6709\uff1f\u90a3\u518d\u6765\uff01\n\n$$\\boxed{0,1,1,0},\\boxed{1,0,1,0},\\boxed{0,0,0,1},\\boxed{0,0,0,0},0,0,1,0$$\n\n\u73b0\u5728\u6ca1\u4e86\uff0c\u56e0\u6b64\u603b\u5171\u8fdb\u884c\u4e86 $4$ \u6b21\u4eb5\u6e0e\u3002\n\n\u90a3\u4e48\u672c\u8d28\u4e0a\u662f\u6c42\u4ec0\u4e48\u5462\uff1f\u662f\u5bf9\u6bcf\u4e00\u4e2a $d$ \u6c42\u4e00\u4e2a\u6700\u5c0f\u7684 $i$ \u4f7f\u5f97\uff1a\n\n$$\\sum_{j=d(i-1)+1}^{d\\cdot i}a_j=0$$\n\n\u8fd9\u6837\u53ef\u80fd\u4e0d\u592a\u76f4\u89c2\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u8fd9\u4e2a\u6570\u8f74\u6309\u5757\u957f\u4e3a $d$ \u5206\u5757\uff0c\u7136\u540e\u95ee\u6700\u9760\u524d\u7684\u4e00\u4e2a\u548c\u4e3a $0$ \u7684\u5757\u662f\u7b2c\u51e0\u4e2a\u3002\n\n\u6211\u4eec\u53d1\u73b0\u56e0\u4e3a\u53ea\u4f1a\u52a0\u968f\u4ece\u4e0d\u4f1a\u5220\u968f\u4ece\uff0c\u6240\u4ee5\u4efb\u610f\u4e00\u4e2a $d$ \u5bf9\u5e94\u7684\u7b54\u6848\u4e00\u5b9a\u662f\u5355\u8c03\u4e0d\u51cf\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u80fd\u5feb\u901f\u7ef4\u62a4\u8fd9\u4e2a\u6307\u9488\u5c31\u53ef\u4ee5\u505a\u5230 O(\u603b\u5757\u6570\u00d7\u4e00\u4e2a\u8f83\u5c0f\u7684\u503c) \u7684\u590d\u6742\u5ea6\u4e86\u3002\n\n\u4f46\u662f\u603b\u5757\u6570\u662f\u591a\u5c11\u5462\uff1f\n\n$\\quad\\dfrac{n}{1}+\\dfrac{n}{2}+\\dfrac{n}{3}+\\cdots+\\dfrac{n}{n}$\n\n$=n(\\dfrac{1}{1}+\\dfrac{1}{2}+\\dfrac{1}{3}+\\cdots+\\dfrac{1}{n})$\n\n$<n(\\dfrac{1}{1}+\\dfrac{1}{2}+\\dfrac{1}{2}+\\dfrac{1}{4}+\\dfrac{1}{4}+\\dfrac{1}{4}+\\dfrac{1}{4}+\\cdots)$\n\n$=O(n\\log n)$\n\n\u6240\u4ee5\u603b\u5757\u6570\u662f $O(n\\log n)$ \u7684\uff01\n\n\u6240\u4ee5\u73b0\u5728\u5173\u952e\u5c31\u5728\u4e8e\u8981\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u652f\u6301\u5feb\u901f\u5220\u9664\u548c\u5feb\u901f\u67e5\u627e\u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u70b9\u7684\u533a\u95f4\u3002\n\n\u663e\u7136\u53ef\u4ee5\u7528 $n$ \u4e2a $\\text{set}$\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u533a\u95f4 $l,r$ \u5728 $\\text{set}_l$ \u4e2d\u52a0\u5165 $r$\uff0c\u6bcf\u4e00\u6b21\u67e5\u8be2 $x$ \u4f4d\u7f6e\u7684\u65f6\u5019\u53ea\u9700\u8981\u5728 $[1,x]$ \u4e2d\u627e\u5230\u6700\u5927\u7684 $r$ \u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u4e2a\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684 RMQ\uff0c\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u7136\u540e\u518d\u989d\u5916\u7ef4\u62a4 $n$ \u4e2a\u533a\u95f4\u7684 $\\text{set}$\uff0c\u7b2c $i$ \u4e2a\u96c6\u5408\u7ef4\u62a4\u7684\u662f\u6309\u7167\u5757\u957f\u4e3a $i$ \u7684\u65f6\u5019\u5206\u51fa\u6765\u7684\u5757\u3002\n\n\u6bcf\u6b21\u6c42\u548c\u7684\u65f6\u5019\uff0c\u6c42\u7684\u5b9e\u9645\u4e0a\u662f\u8fd9\u4e9b $\\text{set}$ \u91cc\u9762\u7684\u7b2c\u4e00\u4e2a\u5757\u662f\u7b2c\u51e0\u4e2a\u5757\u3002\n\n\u56e0\u4e3a\u5220\u9664\u662f\u66b4\u529b\u5220\u9664\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5176\u5b9e\u662f\u4e2a\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\uff0c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u9898\u5c31\u505a\u5b8c\u5566~\n\n\u56e0\u4e3a\u6bcf\u6b21\u5220\u9664\u7684\u4ee3\u4ef7\u662f $O(\\log n)$\uff08\u7ebf\u6bb5\u6811\u64cd\u4f5c\u548c $\\text{set}$ \u64cd\u4f5c\uff09\uff0c\u603b\u533a\u95f4\u4e2a\u6570\u662f $O(n\\log n)$\uff0c\u6bcf\u6b21\u67e5\u8be2\u6811\u72b6\u6570\u7ec4\u7684\u4ee3\u4ef7\u4e3a $O(\\log n)$\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6 $O(n\\log^2 n+m\\log n)$\u3002\n\n---\n\n\u7136\u540e\u4f60\u5199\u597d\u4e86\u4ea4\u4e0a\u53bb\uff0c\u5c31\u6109\u5feb\u5730\u88ab\u5361\u5e38\u5361\u6210 16 \u5206\u4e86 QAQ\n\n\u7ecf\u8fc7\u4e00\u4e9b\u7b80\u5355\u7684\u6d4b\u901f\u4e4b\u540e\u53d1\u73b0\u5e38\u6570\u74f6\u9888\u5728 set \u4e0a\u9762\uff0c\u4ec5\u4ec5\u662f\u52a0\u5165\u533a\u95f4\u8fd9\u4e00\u6b65\u5c31\u9700\u8981 1.4s \u4ee5\u4e0a\u3002\n\n~~\u4f60\u662f\u4e0d\u662f\u5df2\u7ecf\u5f00\u59cb\u60f3\u628a set \u6362\u6210\u624b\u5199\u5e73\u8861\u6811\u4e86\uff1f~~\n\n\u5176\u5b9e\u5b8c\u5168\u6ca1\u5fc5\u8981\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u7ef4\u62a4\u7684\u7528\u4e8e\u63d0\u53d6\u5305\u542b\u4e00\u4e2a\u70b9\u7684\u533a\u95f4\u7684\u96c6\u5408\u53ea\u4f1a\u5220\u9664\u67e5\u627e\u5230\u7684\u533a\u95f4\uff0c\u800c\u67e5\u627e\u5230\u7684\u533a\u95f4\u4e00\u5b9a\u662f\u67d0\u4e00\u4e2a set \u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528 set\uff0c\u7528 vector\uff0c\u5728\u52a0\u5165\u533a\u95f4\u65f6\u76f4\u63a5 push_back\uff0c\u52a0\u5165\u5b8c\u6210\u4e4b\u540e\u6392\u4e00\u904d\u5e8f\uff0c\u6bcf\u6b21\u5220\u9664\u5c31\u53ef\u4ee5 pop_back\u3002\n\n\u7528\u6765\u7ef4\u62a4\u5206\u51fa\u7684\u5757\u7684 set \u56e0\u4e3a\u652f\u6301\u7684\u662f\u67e5\u8be2\u6700\u5c0f\u548c\u4efb\u610f\u5220\u9664\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u7c7b\u4f3c\u4e8e\u5bf9\u9876\u5806\u7684\u61d2\u60f0\u5220\u9664\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u9700\u8981\u5bf9\u9876\u5806\uff0c\u4e5f\u53ef\u4ee5\u7528 vector\u3002\n\n\u8fd9\u6837 set \u7684\u5e38\u6570\u5c31\u6ca1\u4e86\uff0c\u7136\u540e\u5c31\u5b8c\u7f8e\u5730\u901a\u8fc7\u672c\u9898\u5566~\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <set>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nint n, c[100005], a[100005], mx[100005], top[100005];\nstruct Node {\n\tint l, r, idx;\n\tinline bool operator < (const Node& b) const {\n\t\treturn l < b.l;\n\t}\n\tinline bool operator == (const Node& b) const {\n\t\treturn l == b.l && r == b.r && idx == b.idx;\n\t}\n\tNode() {}\n\tNode(int l, int r, int idx) : l(l), r(r), idx(idx) {}\n};\nstruct Segtree {\n\tint mxv[400005], mxidx[400005];\n\tinline void Pushup(int p) {\n\t\tif (mxv[p << 1] >= mxv[p << 1 | 1]) {\n\t\t\tmxv[p] = mxv[p << 1];\n\t\t\tmxidx[p] = mxidx[p << 1];\n\t\t} else {\n\t\t\tmxv[p] = mxv[p << 1 | 1];\n\t\t\tmxidx[p] = mxidx[p << 1 | 1];\n\t\t}\n\t}\n\tinline void Build(int p, int pl, int pr) {\n\t\tif (pl == pr) {\n\t\t\tmxv[p] = mx[pl];\n\t\t\tmxidx[p] = pl;\n\t\t\treturn;\n\t\t}\n\t\tregister int mid = pl + pr >> 1;\n\t\tBuild(p << 1, pl, mid);\n\t\tBuild(p << 1 | 1, mid + 1, pr);\n\t\tPushup(p);\n\t}\n\tinline void Modify(int p, int pl, int pr, int idx, int v) {\n\t\tif (pl == pr) {\n\t\t\tmxv[p] = v;\n\t\t\tmxidx[p] = pl;\n\t\t\treturn;\n\t\t}\n\t\tregister int mid = pl + pr >> 1;\n\t\tif (idx <= mid) Modify(p << 1, pl, mid, idx, v);\n\t\telse Modify(p << 1 | 1, mid + 1, pr, idx, v);\n\t\tPushup(p);\n\t}\n\tinline pair <int, int> Query(int p, int pl, int pr, int l, int r) {\n\t\tif (pl == l && pr == r) return make_pair(mxv[p], mxidx[p]);\n\t\tregister int mid = pl + pr >> 1;\n\t\tif (mid >= r) return Query(p << 1, pl, mid, l, r);\n\t\telse if (mid + 1 <= l) return Query(p << 1 | 1, mid + 1, pr, l, r);\n\t\telse return max(Query(p << 1, pl, mid, l, mid), Query(p << 1 | 1, mid + 1, pr, mid + 1, r));\n\t}\n};\nstruct ClCNTree {\n\tSegtree sgt;\n\tvector <pair <int, int> > st[100005];\n\tinline void Insert(int l, int r, int idx) {\n\t\t//if (mx[l] < r) sgt.Modify(1, 1, n, l, r), mx[l] = r;\n\t\tst[l].push_back(make_pair(r, idx));\n\t\t//sgt.Modify(1, 1, n, l, st[l].rbegin()->first);\n\t}\n\tinline void Build() {\n\t\tfor (register int i = 1;i <= n;i++) mx[i] = st[i][st[i].size() - 1].first;\n\t\tsgt.Build(1, 1, n);\n\t}\n\tinline Node Extract(int pos) {\n\t\tpair <int, int> ans = sgt.Query(1, 1, n, 1, pos);\n\t\tif (ans.first < pos) return Node(-1, -1, -1);\n\t\tpair <int, int> it = st[ans.second][st[ans.second].size() - 1];\n\t\tNode res(ans.second, it.first, it.second);\n\t\tst[ans.second].pop_back();\n\t\tif (st[ans.second].empty()) sgt.Modify(1, 1, n, ans.second, mx[ans.second] = 0);\n\t\telse sgt.Modify(1, 1, n, ans.second, mx[ans.second] = st[ans.second][st[ans.second].size() - 1].first);\n\t\treturn res;\n\t}\n};\nClCNTree tr;\nset <Node> st[100005];\nbool flag[100005];\nvector <Node> vc[100005];\nvector <int> del[100005];\n\ninline int Lowbit(int x) {\n\treturn x & -x;\n}\n\ninline void Update(int i, int x) {\n\t//printf(\"Update(%d,%d)\\n\", i, x);\n\tfor (register int j = i;j <= n;j += Lowbit(j)) c[j] += x;\n}\n\ninline int Query(int i) {\n\tregister int ans = 0;\n\tfor (register int j = i;j >= 1;j -= Lowbit(j)) ans += c[j];\n\treturn ans;\n}\n\ninline void Prefix() {\n\tregister int cnt = 0;\n\tfor (register int i = 1;i <= n;i++) {\n\t\tfor (register int j = 1;j <= (n + i - 1) / i;j++) {\n\t\t\t//cnt++;\n\t\t\ttr.Insert((j - 1) * i + 1, Min(j * i, n), i);\n\t\t\tvc[i].push_back(Node((j - 1) * i + 1, Min(j * i, n), i));\n\t\t\tdel[i].push_back(0);\n\t\t}\n\t\tUpdate(i, 1);\n\t\ta[i] = 1;\n\t}\n\tfor (register int i = 1;i <= n;i++) {\n\t\tsort(tr.st[i].begin(), tr.st[i].end());\n\t\tsort(vc[i].begin(), vc[i].end());\n\t\tvc[i].push_back(Node(n + i, n + i, i));\n\t\tdel[i].push_back(0);\n\t}\n\t//printf(\"%d\", cnt);\n}\n\ninline void Solve() {\n\ttr.Build();\n\tregister int m = qread();\n\twhile (m--) {\n\t\tregister int opt = qread();\n\t\tif (opt == 1) {\n\t\t\tregister int x = qread();\n\t\t\tif (flag[x]) continue;\n\t\t\tflag[x] = 1;\n\t\t\tfor (;;) {\n\t\t\t\tNode nd = tr.Extract(x);\n\t\t\t\t//printf(\"%d %d %d\\n\", nd.l, nd.r, nd.idx);\n\t\t\t\tif (nd.idx < 0) break;\n\t\t\t\tdel[nd.idx][(nd.l - 1) / nd.idx] = 1;\n\t\t\t\twhile (del[nd.idx][top[nd.idx]]) top[nd.idx]++;\n\t\t\t\tUpdate(nd.idx, -a[nd.idx]);\n\t\t\t\tUpdate(nd.idx, a[nd.idx] = (vc[nd.idx][top[nd.idx]].l - 1) / nd.idx + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tregister int l = qread(), r = qread();\n\t\t\tprintf(\"%d\\n\", Query(r) - Query(l - 1));\n\t\t}\n\t}\n}\n\nint main() {\n\tn = qread();\n\tPrefix();\n\tSolve();\n\t#ifndef ONLINE_JUDGE\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```\n\n~~\u987a\u4fbf\u5410\u69fd\u4e00\u4e0b\u8fd9\u9898\u9762\u662f\u5565\u554a\uff0c\u73c2\u6735\u8389\u4e0d\u662f\u5973\u5b69\u5b50\u5417\uff0c\u4e3a\u5565\u5168\u7528\u7684\u662f\u201c\u4ed6\u201d\u554a\u3002~~",
        "postTime": 1590658504,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5068 \u3010[Ynoi2015]\u6211\u56de\u6765\u4e86\u3011"
    },
    {
        "content": "\u671f\u671b\u5176\u5b9e\u662f\u5413\u4eba\u7684\uff0c\u8bbe\u4f24\u5bb3\u503c\u4e3a $d$ \u65f6\uff0c\u4eb5\u6e0e\u53d1\u751f\u7684\u6b21\u6570\u4e3a $f(d)$\u3002\u90a3\u4e48\u7b54\u6848\u5c31\u662f\uff1a\n$$\n\\sum_{d=L}^{R}{f(d)}\n$$\n\u5f62\u8c61\u5316\u5730\u8bf4\uff0c $f(d)$ \u4ee3\u8868\uff1a\u5c06\u503c\u57df\u6bcf\u9694 $d$ \u5206\u4e00\u4e2a\u5757\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5757\u5f00\u59cb\u7684\u6781\u957f\u5305\u542b $1$ \u7684\u5757\u7684\u4e2a\u6570\u3002\u6ce8\u610f\u5230\u5757\u6570\u662f\u8c03\u548c\u7ea7\u6570 $O(n \\ln n)$ \u7ea7\u522b\u7684\uff0c\u8fd9\u9898\u5c31\u6ca1\u6709\u4ec0\u4e48\u96be\u7684\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $d$ \uff0c\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\uff0c\u8bb0\u5f55\u5f53\u524d\u6781\u957f $1$ \u5757\u6269\u5c55\u5230\u4e86\u54ea\uff0c\u6307\u9488\u7684\u79fb\u52a8\u6b21\u6570\u662f $O(n \\log n)$ \u7ea7\u522b\u7684\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\u90a3\u4e48\u95ee\u9898\u5c31\u662f\u600e\u6837\u5728\u63d2\u5165\u4e00\u4e2a\u6570\u4e4b\u540e\uff0c\u5feb\u901f\u627e\u5230\u9700\u8981\u88ab\u62d3\u5c55\u7684\u6307\u9488\u3002\u8003\u8651\u5c06\u8fd9 $O(n \\log n)$ \u4e2a\u5757\u6254\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u6bcf\u4e2a\u5757\u4f1a\u88ab\u5212\u5206\u4e3a $O(\\log n)$ \u4e2a\u533a\u95f4\u3002\u90a3\u4e48\u63d2\u5165 $h$ \u540e\uff0c\u5305\u542b\u5b83\u7684\u5757\u5c31\u662f\u7ebf\u6bb5\u6811\u4e0a\u4ece\u6839\u8282\u70b9\u5230 $h$ \u8fd9\u4e2a\u53f6\u5b50\u7684\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u6240\u6709\u8282\u70b9\u4e0a\u6302\u7740\u7684\u5757\uff0c\u5c06\u8fd9\u4e9b\u5757\u5bf9\u5e94\u7684 $d$ \u7684\u6307\u9488\u66b4\u529b\u79fb\u52a8\u5373\u53ef\u3002\n\n\u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4e00\u4e2a\u5757\u6700\u591a\u4f1a\u88ab\u5206\u6210 $O(\\log n)$ \u4e2a\u533a\u95f4\uff0c\u8fd9\u4e2a\u7684\u89c4\u6a21\u662f $O(n \\log^2n)$ \u7684\uff0c\u6307\u9488\u79fb\u52a8\u6b21\u6570\u4e3a $O(n \\log n)$\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log^2n + m \\log n)$\u3002\n\n[Code](https://www.luogu.com.cn/paste/wyx23l8e)",
        "postTime": 1667975711,
        "uid": 335136,
        "name": "LordLaffey",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011[Ynoi2015] \u6211\u56de\u6765\u4e86"
    },
    {
        "content": ">\u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3002\n>\u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u540e\uff0c\u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4eba\u4eec\uff0c\u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\u3002\n>\u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\uff0c\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\u3002\n>\u6211\u56de\u6765\u4e86\uff0c\n>\u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c\n>\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\uff0c\u76fc\u541b\u52ff\u5fd8\u3002\n>\u2014\u2014\u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\n\n\u73c2\u6735\u8389\uff0c\u6b22\u8fce\u56de\u6765\n\n****\n\n[\u535a\u5ba2\u5185\u98df\u7528\u66f4\u4f73](https://blog.csdn.net/devout_/article/details/106419260)\n\n\u975e\u5e38\u597d\u73a9\u7684\u4e00\u9053\u9898\n\n\u9898\u9762\u8bf4\u7684\u5f88\u7ed5\uff0c\u7b2c$2$\u4e2a\u64cd\u4f5c\uff0c\u8bf4\u4e86\u4e00\u5806\u671f\u671b\u4ec0\u4e48\u7684\uff0c\u6700\u540e\u53d1\u73b0\u8981\u4e58\u4e0a$(R-L+1)$\uff0c\u6240\u4ee5\u5c31\u662f\u6c42\u60c5\u51b5\u4e4b\u548c\u561b\n\n\u6211\u4eec\u8003\u8651\u4eb5\u6e0e\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u88ab\u89e6\u53d1\n\n\u9996\u5148\u4ed6\u4e00\u5b9a\u4f1a\u89e6\u53d1\u4e00\u6b21\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u8ba9\u573a\u4e0a\u6240\u6709\u4eba\u7684\u8840\u91cf$-d$\uff0c\u60f3\u8981\u89e6\u53d1\u4e0b\u4e00\u6b21\uff0c\u4e00\u5b9a\u9700\u8981\u6709\u4e00\u4e2a\u4eba\u7684\u8840\u91cf\u5728$[1,d]$\u7684\u8303\u56f4\u5185\uff0c\u5982\u679c\u89e6\u53d1\u7b2c\u4e8c\u6b21\u5462\uff1f\u4e0d\u96be\u53d1\u73b0\u5c31\u662f\u9700\u8981\u6709\u4e00\u4e2a\u4eba\u7684\u8840\u91cf\u5728$[d+1,2d]$\u7684\u8303\u56f4\u5185\uff0c\u4ee5\u6b64\u7c7b\u63a8\n\n\u6240\u4ee5\u5bf9\u4e8e\u4f24\u5bb3\u503c\u4e3a$d$\u7684\u60c5\u51b5\uff0c\u4eb5\u6e0e\u80fd\u591f\u88ab\u89e6\u53d1\u7684\u6b21\u6570\u5c31\u662f\u6700\u5927\u7684$k$\uff0c\u4f7f\u5f97$\\forall 1\\leq i< k,\\exists h_j\\in[i\\times d-d+1,i\\times d]$\n\n\u56e0\u4e3a\u6bcf\u6b21\u53ea\u6709\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53d1\u73b0$k_d$\u4e00\u5b9a\u4f1a\u9010\u6e10\u53d8\u5927\n\n\u8003\u8651\u53d8\u5316\u7684\u91cf\uff0c\u5e94\u8be5\u662f$\\sum_{i=1}^n \\lceil\\frac{n}{i}\\rceil$\u5de6\u53f3\uff0c\u7b97\u51fa\u6765\u5927\u6982\u662f$1.2\\times 10^6$\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u4e1c\u897f$<n\\log n$\uff0c\u4e5f\u5c31\u662f\u8bf4\u6700\u591a\u53ea\u4f1a\u53d8\u5316$n\\log n$\u6b21\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u57fa\u672c\u7684\u601d\u8def\u5c31\u662f\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5feb\u901f\u7684\u627e\u5230\u9700\u8981\u66f4\u6539\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u66b4\u529b\u66f4\u6539\uff0c\u540e\u9762\u90a3\u4e2a\u4e1c\u897f\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u7ef4\u62a4\n\n\u8003\u8651\u5feb\u901f\u63d2\u5165\u7684\u65f6\u5019\u600e\u4e48\u627e\u5230\u9700\u8981\u66f4\u6539\u7684\u4f4d\u7f6e\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u4f24\u5bb3\u503c\u4e3a$d$\uff0c\u5f53\u524d\u6b21\u6570\u4e3a$t$\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u6709\u63d2\u5165\u7684\u4e00\u4e2a\u5728$[d\\times t-d+1,d\\times t]$\u91cc\u9762\u7684\u6570\u7684\u65f6\u5019\uff0c\u624d\u80fd\u591f\u5411\u540e\u6269\u5c55\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u50a8\u5b58\u4e0b\u6765\u6bcf\u4e00\u4e2a$d$\u73b0\u5728\u7684\u76ee\u6807\u533a\u95f4\uff0c\u5c31\u662f$[d\\times t-d+1,d\\times t]$\uff0c\u7136\u540e\u63d2\u5165$x$\u7684\u65f6\u5019\u627e\u5230\u6240\u6709\u5305\u542b$x$\u7684\u533a\u95f4\u66b4\u529b\u66f4\u65b0\uff0c\u66f4\u65b0\u4e4b\u540e\u63d2\u5165\u65b0\u7684\u76ee\u6807\u533a\u95f4\n\n****\n\n\u56e0\u4e3a\u6700\u591a\u53ea\u4f1a\u88ab\u67e5\u627e$n\\log n$\u6b21\uff0c\u6211\u4eec\u5c1d\u8bd5\u6bcf\u6b21\u7528$\\log n$\u7684\u65f6\u95f4\u67e5\u627e**\u4e00\u4e2a**\u6ee1\u8db3\u6761\u4ef6\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u590d\u6742\u5ea6\u662f$O(n\\log^2n)$\uff0c\u662f\u57fa\u672c\u53ef\u4ee5\u63a5\u53d7\u7684\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u6bcf\u6b21\u6c42\u5305\u542b\u4e00\u4e2a\u70b9$x$\u7684\u6bcf\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u533a\u95f4\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811+set\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\n\n\u6211\u4eec\u5efa\u7acb$n$\u4e2aset\uff0c$set[i]$\u50a8\u5b58\u7684\u662f\u6240\u6709\u5de6\u7aef\u70b9\u4e3a$i$\u7684\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u7684\u503c\n\n\u518d\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u50a8\u5b58\u5de6\u7aef\u70b9\u4f4d\u4e8e\u5b50\u533a\u95f4\u4e2d\u7684\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u7684\u6700\u5927\u503c\uff0c\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u5c31\u76f8\u5e94\u7684\u5bf9\u5e94\u6bcf\u4e00\u4e2aset\n\n\u5bf9\u4e8e\u4e00\u4e2a$x$\uff0c\u6bcf\u6b21\u6211\u4eec\u4e0d\u505c\u5730\u67e5\u627e\u7ebf\u6bb5\u6811\u4e0a\u7684$[1,x]$\u8fd9\u4e00\u6bb5\u533a\u95f4\uff0c\u6bcf\u6b21\u67e5\u8be2\u51fa\u6765\u7684\u5c31\u662f\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\uff0c\u76f4\u5230$[1,x]$\u8fd9\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u5927\u53f3\u7aef\u70b9$<x$\uff0c\u5c31\u4e00\u5b9a\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u533a\u95f4\u4e86\uff0c\u505c\u6b62\u67e5\u8be2\n\n\u6015\u88ab\u5361\u5e38\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u9009\u62e9\u4e86\u624b\u5199\u5e73\u8861\u6811\n\n****\n\u4f46\u662f\u8fd9\u6837\u7684\u5199\u6cd5\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\n\n\u6bd4\u5982\u8bf4\u6211\u4eec\u6bcf\u6b21\u771f\u7684\u53ea\u4f1a\u5f80\u540e\u6269\u5c55\u4e00\u6b21\u5417\uff1f\n\n\u6bd4\u5982\u8bf4\u5148\u63d2\u5165\u4e86\u4e00\u4e2a$6$\uff0c\u5bf9\u4e8e$d=3$\u6765\u8bf4\uff0c\u4e0d\u80fd\u66f4\u65b0\n\n\u63a5\u4e0b\u6765\u63d2\u5165\u4e00\u4e2a$2$\uff0c\u8fd9\u4e2a\u65f6\u5019$d=3$\u4e0d\u662f\u53ea\u66f4\u65b0\u4e00\u6b21\uff0c\u56e0\u4e3a\u6740\u6389$2$\u4e4b\u540e\u8fd8\u53ef\u4ee5\u6740\u6389$6$\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u66f4\u65b0\u4e24\u6b21\n\n\u56e0\u4e3a\u6211\u4eec\u53ea\u50a8\u5b58\u4e86\u6bcf\u4e2a$d$\u5f53\u524d\u7684\u76ee\u6807\u533a\u95f4\uff0c\u8fd8\u53ef\u80fd\u540e\u9762\u6709\u4f46\u662f\u5f53\u65f6\u4e0d\u80fd\u66f4\u65b0\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u518d\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u6765\u50a8\u5b58\u5c0f\u5175\u7684\u60c5\u51b5\uff0c\u6bcf\u6b21\u62d3\u5c55\u591a\u6b21\n\n\u53e6\u5916\u6811\u72b6\u6570\u7ec4\u7684\u4ee3\u7801\u4e5f\u9700\u8981\u76f8\u5e94\u4fee\u6539\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u80fd\u67e5\u627e\u5230\u4e00\u6bb5\u7684$l\\leq n,r>n$\uff0c\u8fd9\u4e2a\u540c\u6837\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f\u67e5\u8be2\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a$bit[r]=0$,\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u65f6\uff0c\u5982\u679c$o>n$\uff0c$o=n$\u5373\u53ef\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\u5199\u56de\u6536\u7684\u8bdd$O(n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u7ea6$O(n\\log^2n)$\n\n\u8981\u5199\u4e24\u68f5\u6811\u72b6\u6570\u7ec4+\u4e00\u68f5\u7ebf\u6bb5\u6811+\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u6211\u9009\u62e9\u4e86\u7ed3\u6784\u4f53\u5c01\u88c5\u7684\u7248\u672c\uff0c\u540c\u65f6\u8868\u8fbe\u4fe1\u4ef0\u554aqwq\n\nchtholly->\u7ef4\u62a4\u7b54\u6848\u7684\u6811\u72b6\u6570\u7ec4\n\nalmeria->\u7ef4\u62a4\u5c0f\u5175\u7684\u6811\u72b6\u6570\u7ec4\n\nithea->\u7ef4\u62a4\u533a\u95f4\u7684\u5e73\u8861\u6811\n\nnephren->\u7ebf\u6bb5\u6811\n\n```cpp\n #include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=1e5+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n,m;\nint son[N*10][2],siz[N*10],val[N*10],treap[N*10];\nint bin[N*10],binsiz;\nint root[N],tot;\n\nstruct node{\n    int maxid,max;\n}seg[N<<2];\n\nstruct chtholly_almeria{\n    int bit[N];\n    int lowbit(int o){\n        return o&-o;\n    }\n    void add(int o,int x){\n        for(;o<=n;o+=lowbit(o))bit[o]+=x;\n    }\n    int ask(int o){\n    \tif(o>n)o=n;\n        int res=0;\n        for(;o;o-=lowbit(o))res+=bit[o];\n        return res;\n    }\n}Chtholly,Almeria;\n\nstruct ithea{\n    int newnode(){\n        if(!binsiz)return ++tot;\n        else return bin[binsiz--];\n    }\n    void delnode(int x){\n        bin[++binsiz]=x;\n        siz[x]=val[x]=treap[x]=son[x][0]=son[x][1]=0;\n    }\n    void update(int x){\n        siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n    }\n    int merge(int u,int v){\n        if(!u||!v)return u|v;\n        int rt;\n        if(treap[u]<treap[v])son[rt=u][1]=merge(son[u][1],v);\n        else son[rt=v][0]=merge(u,son[v][0]);\n        return update(rt),rt;\n    }\n    void split(int o,int &u,int &v,int k){\n        if(!o){u=v=0;return;}\n        if(val[o]<=k)split(son[u=o][1],son[o][1],v,k);\n        else split(son[v=o][0],u,son[o][0],k);\n        update(o);\n    }\n    void ins(int l,int r){\n        int lft,rht;\n        split(root[l],lft,rht,r);\n        int u=newnode();\n        treap[u]=rand(),siz[u]=1,val[u]=r;\n        root[l]=merge(merge(lft,u),rht);\n    }\n    void del(int l,int r){\n        int lft,mid,rht;\n        split(root[l],lft,rht,r);\n        split(lft,lft,mid,r-1);\n        root[l]=merge(lft,rht);\n        delnode(mid);\n    }\n    int max(int l){\n        int u=root[l];\n        while(son[u][1])u=son[u][1];\n        return val[u];\n    }\n}Ithea;\n\nstruct nephren{\n    # define lc (u<<1)\n    # define rc (u<<1|1)\n    node merge(node l,node r){\n        if(l.max>r.max)return l;\n        else return r;\n    }\n    void update(int u,int l,int r,int x){\n        if(l==r){\n            if(root[l])seg[u].max=Ithea.max(l),seg[u].maxid=l;\n            else seg[u].max=seg[u].maxid=0;\n            return;\n        }   \n        int mid=l+r>>1;\n        if(x<=mid)update(lc,l,mid,x);\n        else update(rc,mid+1,r,x);\n        seg[u]=merge(seg[lc],seg[rc]);\n    }\n    node query(int u,int l,int r,int ql,int qr){\n        if(l>=ql&&r<=qr)return seg[u];\n        int mid=l+r>>1;\n        if(qr<=mid)return query(lc,l,mid,ql,qr);\n        if(ql>mid)return query(rc,mid+1,r,ql,qr);\n        return merge(query(lc,l,mid,ql,qr),query(rc,mid+1,r,ql,qr));\n    }\n}Nephren;\n\nint main()\n{\n    // freopen(\"testdata.in\",\"r\",stdin);\n    srand(19260817);\n    read(n),read(m);\n    Rep(i,1,n){\n        Chtholly.add(i,1);\n        Ithea.ins(1,i),Nephren.update(1,1,n,1);\n    }\n    Rep(i,1,m){\n        int opt,x,y;\n        read(opt),read(x);\n        if(opt==1){\n            Almeria.add(x,1);\n            while(1){\n                node now=Nephren.query(1,1,n,1,x);\n                if(now.max<x)break;\n                Ithea.del(now.maxid,now.max),Nephren.update(1,1,n,now.maxid);\n                int bel=now.max-now.maxid+1,l=now.maxid,r=now.max;\n                while(Almeria.ask(r)-Almeria.ask(l-1)>0&&l<=n)\n                    l+=bel,r+=bel,Chtholly.add(bel,1);\n                if(l<=n)Ithea.ins(l,r),Nephren.update(1,1,n,l);\n            }\n        }\n        else read(y),printf(\"%d\\n\",Chtholly.ask(y)-Chtholly.ask(x-1));\n    }\n    return 0;\n}\n```\n",
        "postTime": 1590719839,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "[Ynoi2015] \u6211\u56de\u6765\u4e86"
    },
    {
        "content": "## \u9898\u89e3\n\n\u63d0\u4f9b\u4e00\u79cd\u6bd4\u8f83\u597d\u5199\u7684\u5728\u7ebf\u505a\u6cd5\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4efb\u610f\u7684 $1\\le x\\le n$\uff0c\u7ef4\u62a4\u51fa\u4f24\u5bb3\u503c $d=x$ \u65f6\u6cd5\u672f\u7684\u65bd\u653e\u6b21\u6570\u3002\u8bbe $d=x$ \u65f6\u7b54\u6848\u4e3a $c_x$\uff0c\u90a3\u5c31\u610f\u5473\u7740 $(0,x],(x,2x],\\dots,((c_x-2)x,(c_x-1)x]$ \u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u8840\u91cf\u5728\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7684\u968f\u4ece\u3002\u6240\u4ee5 $\\sum_{x=1}^n c_x\\le \\sum_{x=1}^n \\lfloor n/x\\rfloor=\\mathcal{O}(n\\ln n)$\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u51fa\uff0c\u5f53\u589e\u52a0\u4e00\u4e2a\u968f\u4ece\u65f6\uff0c\u6709\u54ea\u4e9b\u4f4d\u7f6e\u7684 $c_x$ \u4f1a\u589e\u52a0\u3002\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55\u7b54\u6848\uff0c\u5bf9\u4e8e\u589e\u52a0\u7684\u8fd9\u4e9b\u4f4d\u7f6e\uff0c\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002\n\n\u8bbe $L_x=(c_x-1)x+1,R_x=c_x\\cdot x$\u3002\u5f53\u589e\u52a0\u4e00\u4e2a\u8840\u91cf\u4e3a $h$ \u7684\u968f\u4ece\u65f6\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u627e\u51fa\u6240\u6709\u6ee1\u8db3 $h\\in [L_x,R_x]$ \u7684 $x$\uff0c\u7136\u540e\u5bf9\u4e8e\u8fd9\u4e9b $x$ \u66b4\u529b\u66f4\u65b0 $c_x$\uff0c\u540c\u65f6 $L_x,R_x$ \u4e5f\u968f\u4e4b\u6539\u53d8\u3002\n\n\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5c06\u6bcf\u4e2a $[L_x,R_x]$ \u62c6\u6210\u7ebf\u6bb5\u6811\u4e0a\u7684 $\\mathcal{O}(\\log n)$ \u4e2a\u533a\u95f4\u3002\u5728\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0a\u5f00\u4e00\u4e2a `vector<int>`\uff0c\u8bb0\u5f55\u8fd9\u91cc\u7684\u533a\u95f4\u7684\u4e0b\u6807\u3002\u5bf9\u4e8e\u65b0\u52a0\u5165\u7684\u8840\u91cf\u4e3a $h$ \u7684\u968f\u4ece\uff0c\u53ea\u9700\u8981\u5728\u5305\u542b $h$ \u7684 $\\log n$ \u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0a\u66f4\u65b0\u6240\u6709\u7684 $c_x$\uff0c\u7136\u540e\u5c06 vector \u6e05\u7a7a\u3002\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u5982\u4f55\u66f4\u65b0\u4e00\u4e2a $x$ \u7684 $c_x$\uff1f\u518d\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55\u6240\u6709\u968f\u4ece\u7684\u8840\u91cf\uff0c\u6bcf\u6b21\u66f4\u65b0\u65f6\u770b\u770b\u65b0\u7684 $[L_x,R_x]$ \u4e4b\u95f4\u662f\u5426\u6709\u968f\u4ece\u5373\u53ef\u3002\n\n\u6709\u4e00\u4e2a\u5b9e\u73b0\u7ec6\u8282\uff1a\u8fd9\u6837\u505a\u53ef\u80fd\u5bfc\u81f4\u7ebf\u6bb5\u6811\u7684 vector \u5185\u6709\u4e00\u4e9b\u672c\u5e94\u88ab\u5220\u9664\u3001\u4f46\u672a\u88ab\u5220\u9664\u7684\u5143\u7d20\uff0c\u53ea\u9700\u5728\u4e0b\u4e00\u6b21\u904d\u5386\u65f6\uff0c\u68c0\u67e5 $[L_x,R_x]$ \u4e0e\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u533a\u95f4\u662f\u5426\u6709\u4ea4\u5373\u53ef\uff0c\u82e5\u4ea4\u96c6\u4e3a\u7a7a\u5219\u76f4\u63a5\u8df3\u8fc7\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log^2 n+m\\log n)$\u3002\n\n## \u4ee3\u7801\n\n\u53ea\u5199\u4e86 1.5k\u3002\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n#define For(Ti,Ta,Tb) for(int Ti=(Ta);Ti<=(Tb);++Ti)\n#define Dec(Ti,Ta,Tb) for(int Ti=(Ta);Ti>=(Tb);--Ti)\n#define Debug(...) fprintf(stderr,__VA_ARGS__)\nusing ll=long long;\nconst int N=1e5+5;\nint n,m,L[N],R[N];\nstruct BIT{\n\tint t[N];\n\tvoid Add(int p,int k){for(;p<=n;p+=p&-p) t[p]+=k;}\n\tint Query(int p){int res=0;for(;p;p-=p&-p) res+=t[p];return res;}\n}bit,exist;\nstruct SegTree{\n\tvector<int> s[N*4];\n\tvoid Insert(int p,int id,int l,int r){\n\t\tif(L[id]<=l&&r<=R[id]){s[p].push_back(id);return;}\n\t\tint mid=(l+r)/2;\n\t\tif(L[id]<=mid) Insert(p*2,id,l,mid);\n\t\tif(R[id]>mid) Insert(p*2+1,id,mid+1,r);\n\t}\n\tvoid Oper(int p,int pos,int l,int r){\n\t\tfor(int x:s[p]){\n\t\t\tif(l>R[x]||r<L[x]) continue;\n\t\t\tint tot=0;\n\t\t\twhile(L[x]<=n){\n\t\t\t\tif(exist.Query(R[x])-exist.Query(L[x]-1)==0) break;\n\t\t\t\tL[x]=min(n+1,L[x]+x),R[x]=min(n,R[x]+x);\n\t\t\t\t++tot;\n\t\t\t}\n\t\t\tbit.Add(x,tot);\n\t\t\tif(L[x]<=n) Insert(1,x,1,n);\n\t\t}\n\t\ts[p].clear();\n\t\tif(l==r) return;\n\t\tint mid=(l+r)/2;\n\t\tif(pos<=mid) Oper(p*2,pos,l,mid);\n\t\telse Oper(p*2+1,pos,mid+1,r);\n\t}\n}seg;\nint main(){\n\t#ifndef zyz\n\tios::sync_with_stdio(false),cin.tie(nullptr);\n\t#endif\n\tcin>>n>>m;\n\tFor(i,1,n) L[i]=1,R[i]=i,seg.Insert(1,i,1,n),bit.Add(i,1);\n\tFor(_,1,m){\n\t\tint op;cin>>op;\n\t\tif(op==1){\n\t\t\tint h;cin>>h;\n\t\t\texist.Add(h,1);\n\t\t\tseg.Oper(1,h,1,n);\n\t\t}else{\n\t\t\tint l,r;cin>>l>>r;\n\t\t\tcout<<bit.Query(r)-bit.Query(l-1)<<'\\n';\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1654439840,
        "uid": 225625,
        "name": "Alan_Zhao",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5068\u3010[Ynoi2015] \u6211\u56de\u6765\u4e86\u3011"
    },
    {
        "content": "\u4ecb\u7ecd\u4e00\u79cd\u5012\u7740\u6765\u7684\u7b97\u6cd5\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u679a\u4e3e\u6bcf\u6b21\u4eb5\u6e0e\u7684\u8840\u91cf $d$\uff0c\u89c2\u5bdf\u5230\u5bf9\u7b54\u6848\u6709\u7528\u7684\u53ea\u6709 $\\lceil\\dfrac{n}{d}\\rceil$ \u4e2a\u53ef\u80fd\u7684\u4eb5\u6e0e\u8f6e\u6570\u3002\n\n\u6240\u4ee5\u603b\u5171\u6709\u5173\u7b54\u6848\u7684\u70b9\u6570\u4e5f\u53ea\u6709 $O(n\\log n)$ \u4e2a\u3002\n\n\u8bbe $f_{d,i}$ \u662f\u4e00\u4e2a $0/1$ \u6570\u7ec4\uff0c\u8868\u793a\u7b2c $d$ \u79cd\u8840\u91cf\u7684\u7b2c $i$ \u4e2a\u5757\uff08\u5728\u539f\u5e8f\u5217\u4e2d\u5c31\u662f $((i-1)d,id]$ \u7684\u533a\u95f4\uff09\u662f\u5426\u5df2\u7ecf\u6709\u4e00\u4e2a\u6570\u5b57\u4e86\u3002\u5b9e\u9645\u4e0a\u5c31\u76f8\u5f53\u4e8e\u5bf9\u4e8e $d$ \u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u4e0d\u65ad\u52a0\u5165\u6570\u5b57\u3002\n\n\u5148\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u534a\u5728\u7ebf\u7b97\u6cd5\uff1a\u6700\u5f00\u59cb\u5bf9\u4e8e\u6bcf\u4e2a $d$ \u7ef4\u62a4 $\\operatorname{mex}$\uff0c\u7136\u540e\u52a0\u5165\u4e00\u4e2a\u6570\u5b57 $x$ \u5c31\u7ed9\u6240\u6709\u4e0e $x$ \u76f8\u5173\u7684 $d$ \u505a\u8d21\u732e\u3002\n\n\u7ef4\u62a4 $\\operatorname{mex}$ \u53ef\u4ee5\u7528\u4e00\u4e2a\u521d\u59cb\u5168\u6ee1\u7684 `set`\uff0c\u7136\u540e\u52a0\u5165\u6570\u5b57 $x$ \u5c31\u5220\u9664\u8fd9\u4e2a\u6570\u5b57 $x$\u3002\n\n\u56e0\u4e3a\u4e00\u4e2a\u6570\u5b57\u6700\u591a\u53ea\u80fd\u88ab\u5220\u9664\u4e00\u6b21\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 `rmq` \u7ef4\u62a4\u5bf9\u4e8e $d$ \u4e2d\u6bcf\u4e2a $f_{d,i}$ \u6700\u65e9\u53d8\u6210 $1$ \u7684\u65f6\u523b\uff08\u8bb0\u4e4b\u4e3a $g_{d,i}$\uff09\u3002\n\n\u6309\u7167 $g_{d,i}$ \u5206\u7c7b\uff0c\u5982\u679c\u662f\u4fee\u6539\u64cd\u4f5c\u5c31\u5bf9\u4e8e\u5176\u6bcf\u4e2a $d$ \u6240\u6709\u7684\u7ef4\u62a4 $\\operatorname{mex}$ \u6570\u7ec4\u7684 `set` \u505a\u4fee\u6539\uff0c\u5e76\u4e14\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u4fee\u6539\u5355\u70b9\uff1b\u67e5\u8be2\u5c31\u524d\u7f00\u67e5\u8be2\u5373\u53ef\u3002\n\n\u7136\u540e\u8d38\u7136\u7ef4\u62a4\u4e00\u4e2a `set` \u592a\u6162\u4e86\uff0c\u4e8e\u662f\u8003\u8651\u4f18\u5316\u3002\n\n\u6211\u4eec\u89c2\u5bdf\u6c42 $\\operatorname{mex}$ \u5c31\u76f8\u5f53\u4e8e\u5bf9\u4e8e\u5df2\u7ecf\u5220\u9664\u7684\u6570\u5b57\u6c42 `min`\uff0c\u90a3\u4e48\u628a\u5168\u90e8\u6570\u5b57\u5148\u52a0\u8fdb\u53bb\u7136\u540e\u5bf9\u4e8e\u6240\u6709\u7684 $d$ \u5206\u522b\u6c42\u51fa\u5176 $\\operatorname{mex}$\uff1b\u7136\u540e\u5012\u7740\u8ba1\u7b97\u5c31\u76f8\u5f53\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u5373\u7ed9\u6240\u6d89\u53ca\u5230\u7684\u5355\u70b9\u7684 $\\operatorname{mex}$ \u53d6 `min`\u3002\n\n\u6240\u4ee5\u8fd9\u6837\u53ea\u9700\u8981\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u4e00\u4e2a `rmq` \u5c31\u89e3\u51b3\u4e86\u95ee\u9898\u3002\n\n```cpp\nconst I N=1e5+10,M=1e6+10;\nvector<I>b[N];\nvector<pair<I,I> >c[M];\nI a[N],op[M],x[M],y[M];\nI f[18][N],LG[N],n,m,mex[N];\nI s[N];\nI rmq(I l,I r){\n\tI k=LG[r-l+1];\n\treturn min(f[k][l],f[k][r-(1<<k)+1]);}\nvoid add(I x,I y){for(;x<=n;x+=x&-x)s[x]+=y;}\nI ss(I x){I ans=0;for(;x;x-=x&-x)ans+=s[x];return ans;}\nint main(){\n\tin(n,m);\n\tfill(a+1,a+n+1,m+1);\n\tfor(I i=1;i<=m;++i){\n\t\tin(op[i],x[i]);if(op[i]^1)in(y[i]);\n\t\telse if(m+1==a[x[i]])a[x[i]]=i;}\n\tfor(I i=((LG[0]=-1),1);i<=n;++i)f[0][i]=a[i],LG[i]=LG[i>>1]+1;\n\tfor(I j=1;j<18;++j)\n\t\tfor(I i=1;i+(1<<j)-1<=n;++i)\n\t\t\tf[j][i]=min(f[j-1][i],f[j-1][i+(1<<(j-1))]);\n\tfor(I d=1;d<=n;++d){\n\t\tb[d].resize((n-1)/d+3);\n\t\tfor(I i=1;i*d<n+d;++i)\n\t\t\tb[d][i]=rmq((i-1)*d+1,min(i*d,n)),\n\t\t\tc[b[d][i]].push_back(make_pair(d,i));\n\t\t*(b[d].end()-1)=m+1;\n\t\tfor(mex[d]=1;b[d][mex[d]]<=m;++mex[d]);\n\t\tadd(d,mex[d]);\n\t}for(I i=m;~i;--i){\n\t\tif(op[i]==2)b[0].push_back(ss(y[i])-ss(x[i]-1));\n\t\telse {for(auto i:c[i]){\n\t\t\t\tI x=i.first,y=i.second;\n\t\t\t\tif(y<mex[x])add(x,y-mex[x]),mex[x]=y;}}}\n\tfor(I i=b[0].size()-1;~i;--i)printf(\"%d\\n\",b[0][i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1685172852,
        "uid": 121995,
        "name": "SmallTualatin",
        "ccfLevel": 0,
        "title": "P5068 [Ynoi2015] \u6211\u56de\u6765\u4e86"
    },
    {
        "content": "\u5206\u4eab\u4e00\u4e2a\u88ab\u540a\u8e29\u7684\u505a\u6cd5/kk\n\n\u9996\u5148\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u6570 $x$ \u5bf9\u4f24\u5bb3\u4e3a $i$ \u7684\u4eb5\u6e0e\u7684\u8d21\u732e\uff0c\u5047\u8bbe\u5f53\u524d\u4f24\u5bb3\u4e3a $i$ \u7684\u4eb5\u6e0e\u64cd\u4f5c\u6b21\u6570\u4e3a $ans_i$ \u6b21\uff0c\u90a3\u4e48\u5982\u679c $0<x-i\\times ans_i\\le i$ \uff0c\u5c31\u53ef\u4ee5\u4f7f $ans_i++$ \uff0c\u800c\u5982\u679c\u5728\u63d2\u5165\u8fd9\u4e2a\u6570\u4e4b\u524d\u63d2\u5165\u4e86\u6ee1\u8db3\u66f4\u5927\u7684 $ans_i$ \u7684\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7ee7\u7eed\u589e\u52a0\u3002\n\n\u800c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u4f24\u5bb3\u4e3a $i$ \u7684\u4eb5\u6e0e\u64cd\u4f5c\u6b21\u6570\u4e3a $\\lfloor\\frac{n}{i}\\rfloor+1$ \uff0c\u6240\u4ee5 $\\sum_{i=1}^n ans_i$ \u7684\u6700\u5927\u503c\u662f $nlogn$ \u7ea7\u522b\u7684\uff0c\u90a3\u4e48\u8fd9\u542f\u53d1\u6211\u4eec\u52a0\u5165\u4e00\u4e2a\u6570\u4e4b\u540e\u66b4\u529b\u5f80\u540e\u8df3\u6709\u5173\u7684 $ans$ \u6570\u7ec4\uff0c\u7136\u540e\u53ef\u4ee5\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u548c\u3002\n\n\u90a3\u4e48\u73b0\u5728\u5c31\u53d8\u6210\u4e86\u6211\u6709 $(i,i*j),(j*i\\le n)$ \uff0c\u8fd9\u4e48\u591a\u4e2a\u70b9\uff0c\u6bcf\u6b21\u7ed9\u5b9a\u4e00\u4e2a $x$ \uff0c\u4f1a\u7ed9\u6240\u6709\u7684 $(i,\\lfloor\\frac{x-1}{i}\\rfloor)$ \u4e0a\u7684\u70b9\u6253\u4e0a\u6807\u8bb0\u3002\n\n\u8fd9\u5c31\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u6574\u9664\u5206\u5757\uff0c\u4e00\u6b21\u64cd\u4f5c\u53ea\u4f1a\u6709 $2\\sqrt{x-1}$ \u79cd $y$ \u5750\u6807\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u76f4\u63a5\u63d0\u53d6\u51fa\u6765\u76f8\u540c\u7684\u4e00\u6bb5 $y$ \u8fdb\u884c\u8986\u76d6\uff0c\u7136\u540e\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u51fa\u6765\u8fd9\u4e2a\u70b9\u7684\u4e0b\u4e00\u4e2a\u5e94\u8be5\u8986\u76d6\u7684\u70b9\u662f\u54ea\u4e2a\u70b9\uff0c\u590d\u6742\u5ea6\u5c31\u662f\u6b63\u786e\u7684\u4e86\u3002\n\n\u590d\u6742\u5ea6 $O(n\\sqrt{n}+mlogn+nlogn\\alpha(n)+nlog^2n)$ \u3002\n\n**Code**\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nconst int N = 1e5;\nconst int M = 1e6;\nconst int MAXN = 2e7;\nusing namespace std;\nstruct qry\n{\n    int opt,l,r,id;\n}q[M + 5];\nint n,m,vis[N + 5],ans[N + 5],pool[MAXN + 5],pool1[MAXN + 5];\nint *pp = pool,*d[N + 5],*p1 = pool1;\nlong long s;\nstruct Bit\n{\n    long long c[N + 5];\n    int lowbit(int x)\n    {\n        return x & (-x);\n    }\n    void add(int x,int v)\n    {\n        for (;x <= n;x += lowbit(x))\n            c[x] += v;\n    }\n    long long query(int x)\n    {\n        long long ans = 0;\n        for (;x;x -= lowbit(x))\n            ans += c[x];\n        return ans;\n    }\n}c;\nstruct Dsu\n{\n    int *fa,ts;\n    void init(int n)\n    {\n        fa = p1;\n        p1 += n;\n        ts = n - 1;\n        for (int i = 1;i < n;i++)\n            fa[i] = i;\n    }\n    int find(int x)\n    {\n        if (fa[x] == x)\n            return x;\n        return fa[x] = find(fa[x]);\n    }\n}fd[N + 5];\ninline long long read()\n{\n\tlong long X(0);int w(0);char ch(0);\n\twhile (!isdigit(ch)) w |= ch == '-',ch = getchar();\n\twhile (isdigit(ch)) X = (X << 3) + (X << 1) + (ch ^ 48),ch = getchar();\n\treturn w ? -X : X;\n}\nint main()\n{\n    n = read();m = read();\n    int opt,l,r;\n    for (int i = 1;i <= n;i++)\n    {\n        d[i] = pp;\n        pp += n / i + 1;\n        fd[i].init(n / i + 2);\n    }\n    fd[0].init(n + 2);\n    while (m--)\n    {\n        opt = read();l = read();\n        if (opt == 1)\n        {\n            if (vis[l])\n                continue;\n            vis[l] = 1;\n            int h = l - 1;\n            for (int l = 1,r,v;l <= n;l = r + 1)\n            {\n                v = h / l;\n                if (v)\n                    r = min(h / v,n);\n                else\n                    r = n;\n                //cout<<l<<\" \"<<r<<\" \"<<v<<endl;\n                for (int i = l;i <= r;i++)\n                {\n                    //cout<<v<<\" \"<<i<<endl;\n                    i = fd[v].find(i);\n                    if (i > r)\n                        break;\n                    d[i][v] = 1;\n                    int las = ans[i];\n                    while (d[i][ans[i]] && ans[i] <= n / i)\n                        ans[i]++;\n                    if (ans[i] - las != 0)\n                        c.add(i,ans[i] - las);\n                    if (i + 1 <= fd[v].ts)\n                        fd[v].fa[i] = fd[v].find(fd[v].fa[i + 1]);\n                }\n            }\n        }\n        else\n        {\n            r = read();\n            printf(\"%lld\\n\",c.query(r) - c.query(l - 1) + r - l + 1);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1610438531,
        "uid": 73231,
        "name": "eee_hoho",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5068 \u3010[Ynoi2015] \u6211\u56de\u6765\u4e86\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u88ab\u697c\u4e0aFroggy\u5927\u4f6c~~\u70b9\u540d\u7206\u8e29~~\u7684\u505a\u6cd5qaq\u3002\n\n~~\u5e9f\u8bdd\u6709\u70b9\u591a\uff0c\u4e0d\u60f3\u770b\u76f4\u63a5\u8df3~~\n\n> \u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3002 \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\uff0c\u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4f17\u4eba\uff0c\u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\u3002 \u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\uff1b\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\u3002 \u6211\u56de\u6765\u4e86\uff0c\u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\uff0c\u76fc\u541b\u52ff\u5fd8\u3002\n>\n>\u2014\u2014\u2014\u2014\u4e16\u754c\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69 \u73c2\u6735\u8389\n\n\u4e0d\u6127\u662fYnoi\uff0c\u5982\u6b64\u6bd2\u7624\u3002\n\n\u8fd9\u662f\u6211Ynoi\u4e00\u8840~~\u521d\u59cb\u5316\u90a3\u9898\u66b4\u529b\u8279\u8fc7\u53bb\u7684~~qaq\u3002\n\n~~\u60f3\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u6df1\u611f\u6b64\u9898\u6bd2\u7624~~\n\n# $\\texttt{Description}$\n\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a\u6570\uff0c\u4e5f\u53ef\u4ee5\u67e5\u8be2\u5bf9\u4e8e\u4e00\u4e2a\u6570 $x$\uff0c\u5c06\u8fd9\u4e2a\u5e8f\u5217\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u627e\u5230\u6700\u5c0f\u7684 $i$ \u6ee1\u8db3 $\\lceil \\frac{a_{i+1}}{x}\\rceil -1> \\lceil \\frac{a_i}{x}\\rceil$\uff08\u82e5\u5f53\u524d\u5e8f\u5217\u957f\u5ea6\u4e3a $n$\uff0c\u4ee4 $a_{n+1}=\\infty$\uff09\n\n# $\\texttt{Solution}$\n\u9898\u76ee\u8bf4\u4e86 $h\\le n\\le 10^5$\uff0c\u56e0\u6b64\u6211\u4eec\u76f2\u731c\u8fd9\u9898\u8981\u7528\u6743\u503c\u7ebf\u6bb5\u6811or\u6743\u503c\u6811\u72b6\u6570\u7ec4\u3002\u518d\u770b\u5230\u6bcf\u6b21\u67e5\u8be2\u4e00\u6bb5\u533a\u95f4\u7684\u671f\u671b\u503c\uff0c\u8fd8\u8981\u4e58\u4e0a\u8fd9\u6bb5\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u5176\u5b9e\u5c31\u662f\u6c42\u6bcf\u79cd\u65b9\u6848\u7684\u603b\u548c\uff0c\u67e5\u8be2\u533a\u95f4 $[l,r]$ \u5bf9\u5e94\u7684\u7b54\u6848\u7684\u603b\u548c\u2026\u2026\u518d\u4e00\u770b\u6570\u636e\u8303\u56f4\uff0c\u663e\u7136\u8981\u7528\u4e00\u4e2a\u652f\u6301\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7b54\u6848\u3002\n\n$n\\le 10^5,m\\le 10^6$\uff0c~~Ynoi\u4e0d\u7528\u5206\u5757\u60f9\u7237\u9752\u7ed3~~\n\n\u81f3\u4e8e\u5982\u4f55\u7ef4\u62a4\u7b54\u6848\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a\u968f\u4ece\u7684\u8840\u91cf\u653e\u5230\u4e00\u4e2a\u6743\u503c\u6811\u72b6\u6570\u7ec4\u91cc\u9762\uff0c\u6bcf\u6b21\u589e\u52a0\u4e00\u4e2a\u968f\u4ece\uff0c\u627e\u5230\u88ab\u4ed6\u5f71\u54cd\u7684\u7b54\u6848\uff0c\u7136\u540e\u66b4\u529b\u8c03\u6574\u5373\u53ef\u3002\n\n\u4e3a\u4ec0\u4e48\u8bf4\u662f\u66b4\u529b\u8c03\u6574\u5462\uff1f\n\n\u5f62\u8c61\u7684\u7406\u89e3\u4e00\u4e0b\uff0c\u4e0a\u9762\u5411\u4e0a\u53d6\u6574\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u8fd9\u4e2a\u6743\u503c\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u5206\u5757\u3002\u6570\u7ec4\u7684\u6bcf\u4e2a\u503c $d_i$ \u8868\u793a\u8840\u91cf\u4e3a $d_i$ \u7684\u968f\u4ece\u7684\u6570\u76ee\u3002\u5757\u957f\u4e3a $x$\uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u6700\u65e9\u54ea\u4e2a\u5757\u91cc\u9762\u7684\u6570\u5b57\u5747\u4e3a $0$\u3002\n\n\u7531\u4e8e $x$ \u7684\u53d6\u503c\u5728 $[1,n]$ \u4e4b\u95f4\uff0c\u6240\u4ee5\u6bcf\u6b21\u66b4\u529b\u5f80\u540e\u8df3\u6700\u591a\u4e5f\u5c31\u4e0d\u8df3\u8d85\u8fc7 $\\sum\\limits^{i\\le n}_{i=1}\\frac{n}{i}\\approx nlogn$\u3002\n\n\u6bcf\u6b21\u8df3\u7684\u65f6\u5019\u67e5\u8be2\u4e00\u4e0b\u6811\u72b6\u6570\u7ec4\uff0c\u5f53\u524d\u8fd9\u4e2a\u5757\u662f\u5426\u5168\u90e8\u4e3a $0$\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u5f80\u540e\u8df3\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u662f\u4e0d\u53ef\u80fd\u6bcf\u52a0\u8fdb\u6765\u4e00\u4e2a\u968f\u4ece\u5c31\u628a\u6240\u6709\u5757\u5f80\u540e\u8df3\uff0c\u56e0\u4e3a\u5c31\u7b97\u603b\u5171\u8df3\u7684\u6b21\u6570\u5c11\uff0c\u628a\u8fd9\u4e9b\u5757\u904d\u5386\u4e00\u904d\u4e5f\u9700\u8981 $O(n)$ \u7684\u65f6\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u627e\u5230\u5bf9\u4e8e\u5f53\u524d\u8840\u91cf\u4e3a $h$ \u7684\u968f\u4ece\uff0c\u6709\u591a\u5c11\u5757\u7ecf\u8fc7\u4e86 $h$ \u8fd9\u4e2a\u70b9\u3002\u5c06\u8fd9\u4e9b\u5757\u5168\u90e8\u5220\u9664\u5e76\u5f80\u540e\u8df3\uff0c\u518d\u628a\u65b0\u7684\u5757\u63d2\u5165\u8fdb\u53bb\u3002\n\n\u73b0\u5728\u9700\u8981\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n- \u63d2\u5165\u4e00\u6761\u7ebf\u6bb5\n- \u5220\u9664\u4e00\u6761\u7ebf\u6bb5\n- \u67e5\u8be2\u7ecf\u8fc7\u4e86\u7ed9\u5b9a\u70b9\u7684\u6240\u6709\u7ebf\u6bb5\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u70b9 $h$\uff0c\u7ecf\u8fc7\u5b83\u7684\u7ebf\u6bb5\u5de6\u7aef\u70b9\u5fc5\u7136\u5728 $[1,h]$ \u4e4b\u95f4\uff0c\u4e0d\u59a8\u628a\u6bcf\u6761\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u770b\u505a\u4e0b\u6807\uff0c\u5219\u6211\u4eec\u6bcf\u6b21\u67e5\u8be2\u5de6\u7aef\u70b9\u5728 $[1,h]$ \u4e4b\u95f4\u7684\u7ebf\u6bb5\u53f3\u7aef\u70b9\u6700\u5927\u7684\uff0c\u5c06\u5b83\u5f80\u540e\u8c03\u6574\u540e\u5220\u9664\uff0c\u76f4\u5230\u5f53\u524d\u67e5\u8be2\u5230\u7684\u6700\u5927\u53f3\u7aef\u70b9 $<h$ \u4e3a\u6b62\u3002\u5c31\u662f\u4e00\u4e2a\u52a8\u6001\u7684RMQ\uff0c\u6211\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\uff08\u5f53\u7136\u53ef\u80fd\u6709\u591a\u4e2a\u7ebf\u6bb5\u5de6\u7aef\u70b9\u4e00\u6837\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u5bf9\u5e94\u4e00\u4e2a\u5927\u6839\u5806\u800c\u4e0d\u662f\u4e00\u4e2a\u6570\uff09\u3002\n\n\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u8868\u793a\u7b54\u6848\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6bcf\u6b21\u66b4\u529b\u5f80\u540e\u8df3\u5757\u540e\u5c31\u8981\u66f4\u65b0\u5b83\u3002\n\n\u8c8c\u4f3c\u5f88\u591a\u795e\u4ed9\u7528`set`\u88ab\u5361\u5e38\u4e86\uff0c\u663e\u7136\u7528`set`\u5e38\u6570\u6bd4\u5806\u5927\u5f97\u591a\u554a\u2026\u2026\n\n# $\\texttt{Code}$\n\n\u7531\u4e8e\u6ca1\u6709\u523b\u610f\u5361\u5e38\uff0c\u6240\u4ee5\u662f\u6211\u7684\u6b63\u5e38\u9a6c\u8702\u3002\n\n```cpp\n#include <cstdio>\n#include <queue>\n#define int long long\n#define Re(x) (RMQ::a[x].size() ? RMQ::a[x].top() : 0)\n\nconst int N = 5e5;\nint n;\nnamespace RMQ {\n\tstruct Node {\n\t\tint l, r, v;\n\t} c[N << 4];\n\tstd::priority_queue<int> a[N];\n\tvoid make_tree(const int O, const int L, const int R) {\n\t\tc[O].l = L, c[O].r = R;\n\t\tif (L == R) {c[O].v = L; return;}\n\t\tmake_tree(O << 1, L, L + R >> 1), make_tree(O << 1 | 1, (L + R >> 1) + 1, R);\n\t\tif (Re(c[O << 1].v) >= Re(c[O << 1 | 1].v)) c[O].v = c[O << 1].v;\n\t\telse c[O].v = c[O << 1 | 1].v;\n\t}\n\tvoid insert(const int O, const int x, const int d) {\n\t\tif (c[O].l == c[O].r) {a[x].push(d); return;}\n\t\tif (c[O << 1].r >= x) insert(O << 1, x, d);\n\t\telse insert(O << 1 | 1, x, d);\n\t\tif (Re(c[O << 1].v) >= Re(c[O << 1 | 1].v)) c[O].v = c[O << 1].v;\n\t\telse c[O].v = c[O << 1 | 1].v;\n\t}\n\tvoid del(const int O, const int x) {\n\t\tif (c[O].l == c[O].r) {\n\t\t\ta[x].pop(), c[O].v = x;\n\t\t\treturn;\n\t\t}\n\t\tif (c[O << 1].r >= x) del(O << 1, x);\n\t\telse del(O << 1 | 1, x);\n\t\tif (Re(c[O << 1].v) >= Re(c[O << 1 | 1].v)) c[O].v = c[O << 1].v;\n\t\telse c[O].v = c[O << 1 | 1].v;\n\t}\n\tint query(const int O, const int L, const int R) {\n\t\tif (L <= c[O].l && c[O].r <= R) return c[O].v;\n\t\tif (c[O << 1].r < L) return query(O << 1 | 1, L, R);\n\t\telse if (c[O << 1 | 1].l > R) return query(O << 1, L, R);\n\t\tint t1(query(O << 1, L, R)), t2(query(O << 1 | 1, L, R));\n\t\treturn Re(t1) >= Re(t2) ? t1 : t2;\n\t}\n}\n\nstruct BIT {\n\tint c[N];\n\tinline void update(const int x, const int d) {\n\t\tfor (int i(x); i <= N; i += (i & ~i + 1)) c[i] += d;\n\t}\n\tinline int query(const int x) {\n\t\tint sum(0);\n\t\tfor (int i(x); i; i -= (i & ~i + 1)) sum += c[i];\n\t\treturn sum;\n\t}\n} summary, ans;\n\nsigned main() {\n\tint m;\n\tscanf(\"%lld%lld\", &n, &m);\n\tfor (int i(1); i <= n; ++ i)\n\t\tans.update(i, 1), RMQ::a[1].push(i);\n\tRMQ::make_tree(1, 1, n);\n\twhile (m --) {\n\t\tint op;\n\t\tscanf(\"%lld\", &op);\n\t\tif (op == 1) {\n\t\t\tint h;\n\t\t\tscanf(\"%lld\", &h);\n\t\t\tsummary.update(h, 1);\n\t\t\tint p;\n\t\t\twhile ((Re(p = RMQ::query(1, 1, h))) >= h) {\n\t\t\t\tint len(RMQ::a[p].top() - p);\n\t\t\t\tans.update(len + 1, -(p - 1) / (len + 1) - 1), RMQ::del(1, p);\n\t\t\t\twhile (summary.query(p + len) - summary.query(p - 1)) p += len + 1;\n\t\t\t\tans.update(len + 1, (p - 1) / (len + 1) + 1);\n\t\t\t\tif (p <= n) RMQ::insert(1, p, p + len);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tint l, r;\n\t\t\tscanf(\"%lld%lld\", &l, &r);\n\t\t\tprintf(\"%lld\\n\", ans.query(r) - ans.query(l - 1));\n\t\t}\n\t}\n}\n```",
        "postTime": 1612839283,
        "uid": 361308,
        "name": "Stinger",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5068 \u3010[Ynoi2015] \u6211\u56de\u6765\u4e86\u3011"
    },
    {
        "content": "\u6bcf\u4e2a\u4f24\u5bb3\u503c $d$ \u53ef\u4ee5\u5206\u5f00\u8003\u8651\uff0c\u90a3\u5c31\u8003\u8651\u5b83\u5728\u54ea\u4e2a\u65f6\u523b\uff0c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u52a0\u4e86\u4e2a $1$\uff0c\u8fd9\u4e9b\u603b\u548c\u662f\u4e2a\u8c03\u548c\u7ea7\u6570 $\\mathcal{O}(n\\log n)$ \u7684\u3002\n\n\u79bb\u7ebf\u4e0b\u6765\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u503c\u8bb0\u5f55\u5b83\u6700\u65e9\u5728\u54ea\u4e2a\u65f6\u523b\u52a0\u5165\uff0c\u7528\u4e2a\u7ebf\u6bb5\u6811 / ST\u8868\u67e5\u8be2\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $d$ \u66b4\u529b\u679a\u4e3e $[1,d],[d+1,2d]...$\uff0c\u7136\u540e\u770b\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u518d\u505a\u4e2a\u524d\u7f00 $\\max$\uff0c\u5c31\u77e5\u9053\u5177\u4f53\u662f\u5728\u54ea\u4e2a\u65f6\u523b\u7b54\u6848 $+1$ \u4e86\u3002\n\n\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u7528\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u652f\u6301\u5355\u70b9 $+1$\uff0c\u67e5\u8be2\u533a\u95f4\u548c\u5c31\u53ef\u4ee5\u4e86\uff0c\u4fee\u6539\u6b21\u6570\u662f $\\mathcal{O}(n\\log n)$\uff0c\u67e5\u8be2\u662f $\\mathcal{O}(m)$ \u7684\u3002\n\n\u603b\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n\\log^2n+m\\log n)$ \u7684\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#define pb push_back\ntypedef long long ll;\ntemplate <typename T> T Max(T x, T y) { return x > y ? x : y; }\ntemplate <typename T> T Min(T x, T y) { return x < y ? x : y; }\ntemplate <typename T>\nT &read(T &r) {\n\tr = 0; bool w = 0; char ch = getchar();\n\twhile(ch < '0' || ch > '9') w = ch == '-' ? 1 : 0, ch = getchar();\n\twhile(ch >= '0' && ch <= '9') r = r * 10 + (ch ^ 48), ch = getchar();\n\treturn r = w ? -r : r;\n}\ninline int lowbit(int x) { return x & (-x); }\nconst int N = 1000010;\nconst int INF = 0x7fffffff;\nint n, m;\nint b[N];\nstd::vector<int>vec[N]; \nnamespace Segment_Tree {\n\t#define ls tree[x].lson\n\t#define rs tree[x].rson\n\t#define tl tree[x].l\n\t#define tr tree[x].r\n\tint trnt;\n\tstruct SGT {\n\t\tint l, r, mn, lson, rson;\n\t}tree[N << 1];\n\tinline void pushup(int x) { tree[x].mn = Min(tree[ls].mn, tree[rs].mn); }\n\tint build(int l, int r) {\n\t\tint x = ++trnt; tl = l; tr = r;\n\t\tif(l == r) {\n\t\t\ttree[x].mn = b[l];\n\t\t\treturn x;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tls = build(l, mid); rs = build(mid+1, r);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n\tint query(int x, int l, int r) {\n\t\tif(tl >= l && tr <= r) return tree[x].mn;\n\t\tint mid = (tl + tr) >> 1, sumq = INF;\n\t\tif(mid >= l) sumq = Min(sumq, query(ls, l, r));\n\t\tif(mid < r) sumq = Min(sumq, query(rs, l, r));\n\t\treturn sumq;\n\t}\n\t#undef ls\n\t#undef rs\n\t#undef tl\n\t#undef tr\n}\nusing namespace Segment_Tree;\nint opt[N], l[N], r[N], h[N], t[N];\nint tr[N];\nvoid modify(int x, int v) { for(; x <= n; x += lowbit(x)) tr[x] += v; }\nint query(int x) { int sumq = 0; for(; x; x -= lowbit(x)) sumq += tr[x]; return sumq; }\nint qsum(int l, int r) { return query(r) - query(l-1); }\nsigned main() {\n\tread(n); read(m);\n\tfor(int i = 1; i <= n; ++i) b[i] = INF;\n\tfor(int i = 1; i <= m; ++i) {\n\t\tread(opt[i]);\n\t\tif(opt[i] == 1) read(h[i]), b[h[i]] = Min(b[h[i]], i);\n\t\telse read(l[i]), read(r[i]);\n\t}\n\tbuild(1, n);\n\tfor(int i = 1; i <= n; ++i) {\n\t\tfor(int j = 1; (j-1)*i < n; ++j) {\n\t\t\tt[j] = query(1, (j-1)*i+1, Min(j*i, n));\n\t\t\tif(t[j] == INF) break ;\n\t\t}\n\t\tfor(int j = 1; (j-1)*i < n; ++j) {\n\t\t\tif(t[j] == INF) break ;\n\t\t\tt[j] = Max(t[j], t[j-1]);\n\t\t\tvec[t[j]].pb(i);\n\t\t}\n\t}\n\tfor(int i = 1; i <= m; ++i) {\n\t\tfor(auto x : vec[i]) modify(x, 1);\n\t\tif(opt[i] == 2) {\n\t\t\tprintf(\"%d\\n\", r[i]-l[i]+1 + qsum(l[i], r[i]));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1632553738,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300d\u6d1b\u8c37 P5068 [Ynoi2015] \u6211\u56de\u6765\u4e86"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5068)\n\n## \u9898\u610f\n\n\u73c2\u6735\u8389\u5728\u73a9\u7089\u77f3\u65f6\u91cd\u65b0\u5b9a\u4e49\u64cd\u4f5c\u201c\u4eb5\u6e0e\u201d\u4e3a\uff1a\u201c\u7b49\u6982\u7387\u968f\u673a\u5728 $[L,~R]$ \u4e2d\u9009\u51fa\u4e00\u4e2a\u6574\u6570\u4f5c\u4e3a\u4f24\u5bb3\u503c $d$\uff0c\u5bf9\u6240\u6709\u968f\u4ece\u9020\u6210 $d$ \u70b9\u4f24\u5bb3\uff0c\u5982\u679c\u6709\u968f\u4ece\u6b7b\u4ea1\uff0c\u5219\u518d\u6b21\u65bd\u653e\u8be5\u6cd5\u672f\uff0c\u4f46\u4f24\u5bb3\u503c\u4e0d\u91cd\u65b0\u968f\u673a\uff1b\u5982\u679c\u6ca1\u6709\u968f\u4ece\u6b7b\u4ea1\uff0c\u5219\u505c\u6b62\u91ca\u653e\u201d\u3002\n\n\u63a5\u4e0b\u6765\u73c2\u6735\u8389\u8981\u8fdb\u884c $m$ \u4e2a\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u4e3a\u4e0b\u9762\u4e24\u7c7b\uff1a\n\n1. \u5728\u573a\u9762\u4e0a\u52a0\u5165\u4e00\u4e2a\u8840\u91cf\u4e3a $h$ \u7684\u968f\u4ece\u3002\n2. \u7ed9\u5b9a $L,~R$\uff0c\u8be2\u95ee\u4eb5\u6e0e\u89e6\u53d1\u6b21\u6570\u7684\u671f\u671b\u4e58\u4e0a $R-L+1$ \u540e\u7684\u7ed3\u679c\u3002\n\n$h \\le n \\le 10^5,~m \\le 10^6$\n\n## \u5206\u6790\n\n\u5bb9\u6613\u53d1\u73b0\u8be2\u95ee\u5185\u5bb9\u201c\u671f\u671b\u4e58\u4e0a $R-L+1$ \u540e\u7684\u7ed3\u679c\u201d\u5373\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a $d \\in [L,~R]$ \u4ea7\u751f\u7684\u4eb5\u6e0e\u89e6\u53d1\u6b21\u6570\u4e4b\u548c\u3002\n\n\u4ee4 $a[i]$ \u8868\u793a\u662f\u5426\u6709\u8840\u91cf\u4e3a $i$ \u7684\u968f\u4ece\uff0c\u5219\u5bb9\u6613\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e2a $d$ \u5176\u4eb5\u6e0e\u89e6\u53d1\u6b21\u6570\u4e3a\u6700\u5c0f\u7684 $k$ \u4f7f\u5f97\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a\n\n$$ \\sum_{i = d \\times k + 1}^{(d + 1) \\times k} a[i] = 0 $$\n\n\u5373\u6700\u5c0f\u7684 $k$ \u4f7f\u5f97\u573a\u4e0a\u4e0d\u5b58\u5728\u8840\u91cf\u5728 $[d \\times k + 1,~ (d + 1) \\times k]$ \u8303\u56f4\u5185\u7684\u968f\u4ece\u3002\n\n\u5982\u679c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $d$ \u5747\u5c06 $[1,~n]$ \u5212\u5206\u4e3a $\\lceil \\frac n d \\rceil$ \u4e2a\u957f\u5ea6\u4e3a $d$ \u7684\u533a\u95f4\uff0c\u5728\u8be2\u95ee\u65f6\u5bf9\u4e8e\u8be5 $d$ \u503c\u4eb5\u6e0e\u89e6\u53d1\u6b21\u6570\u5373\u4e3a\u6700\u5c0f\u7684\u6ee1\u8db3\u533a\u95f4\u5185 $a[i]$ \u90fd\u7b49\u4e8e\u96f6\u7684\u533a\u95f4\u7f16\u53f7\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u5408\u6cd5\u7684 $n$ \u4e2a $d$\uff0c\u8fd9\u6837\u7684\u533a\u95f4\u6570\u91cf\u4e3a $\\sum_{i=1}^{n} \\frac n i = O(n \\log n)$\uff0c\u5176\u6570\u91cf\u5e76\u4e0d\u662f\u975e\u5e38\u591a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\uff0c\u5bf9\u6bcf\u4e2a\u533a\u95f4\u8003\u8651\u5176\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\n\n\u4ee4 $f[i][j]$ \u8868\u793a $d=i$ \u65f6\u6700\u65e9\u4e8e\u7b2c\u51e0\u6b21\u64cd\u4f5c\u540e\u4eb5\u6e0e\u6b21\u6570\u8fbe\u5230 $j+1$\uff0c\u4e5f\u5c31\u662f\u8868\u793a\u6700\u65e9\u7684\u5bf9\u4e8e\u6bcf\u4e2a $t \\in [1,~j]$ \u5747\u6ee1\u8db3 $\\sum_{k \\in [i \\times t + 1,~(i+1) \\times t]} a[k] \\neq 0$ \u7684\u65f6\u523b\u3002\u8f6c\u79fb\u663e\u7136\u4e3a\uff1a\n\n$$ f[i][j]=\\max(f[i][j-1],~\\min_{k \\in [i \\times j + 1,~(i+1) \\times j]}a[k]) $$\n\n\u8f6c\u79fb\u65f6\u7b2c\u4e8c\u9879\u6700\u5c0f\u503c\u4f7f\u7528 ST \u8868\u7ef4\u62a4\uff0c\u5219\u8f6c\u79fb\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\u4e14\u5bf9\u4e8e $d=i$ \u65f6\u7684\u7b2c $j$ \u5757\uff0c\u5176\u4f1a\u5bf9\u6240\u6709\u8be2\u95ee\u65f6\u523b\u5927\u4e8e\u7b49\u4e8e $f[i][j]$ \u7684\u8be2\u95ee\u4ea7\u751f $1$ \u7684\u8d21\u732e\u3002\n\n\u5c06\u6240\u6709\u5757\u7684 $f[i][j]$ \u503c\u4e0e\u5176\u5bf9\u5e94\u7684 $i$ \u503c\u8bb0\u5f55\u4e0b\u6765\u6392\u5e8f\u540e\u4e0e\u8be2\u95ee\u6570\u7ec4\u53cc\u6307\u9488\u66f4\u65b0\u7b54\u6848\u5373\u53ef\uff0c\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u590d\u6742\u5ea6 $O(n \\log ^2 n + m \\log n)$\u3002\n\n## \u4ee3\u7801\n\n[View on GitHub](https://github.com/Macesuted/Code/blob/main/Luogu/5068.cpp)",
        "postTime": 1626940290,
        "uid": 98482,
        "name": "Macesuted",
        "ccfLevel": 0,
        "title": "LG5068"
    },
    {
        "content": "\u6ce8\u610f\u5230\u52a0\u5165\u968f\u4ece\u53ea\u4f1a\u662f\u4eb5\u6e0e\u7684\u6548\u679c\u8d8a\u6765\u8d8a\u597d\uff0c\u800c $n$ \u79cd\u4eb5\u6e0e\u7684\u603b\u89e6\u53d1\u6b21\u6570\u662f $O(n\\ln n)$ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u6bcf\u6b21\u6dfb\u52a0\u968f\u4ece\u540e\u6bcf\u4e2a\u4eb5\u6e0e\u89e6\u53d1\u6b21\u6570\u6709\u6ca1\u6709\u589e\u52a0\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u53c2\u6570\u4e3a $d$ \u7684\u4eb5\u6e0e\uff0c\u53d1\u52a8\u6b21\u6570\u662f\u96c6\u5408 $\\{\\lfloor\\frac{h_i}{d}\\rfloor\\}$ \u7684 $\\text{mex}-1$\uff0c\u5176\u4e2d $h_i$ \u662f\u968f\u4ece\u7684\u8840\u91cf\u3002\u6211\u4eec\u8bbe\u5f53\u524d\u53c2\u6570\u4e3a $d$ \u7684\u4eb5\u6e0e\u53d1\u52a8\u6b21\u6570\u4e3a $x_d$\uff0c\u5219\u6dfb\u52a0\u4e00\u4e2a\u8840\u91cf\u5728 $(dx_d,dx_d+d]$ \u4e2d\u7684\u968f\u4ece\u65f6\uff0c\u8be5\u4eb5\u6e0e\u5c31\u53ef\u4ee5\u591a\u53d1\u52a8\u4e00\u6b21\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u8fd9\u4e9b\u533a\u95f4\u5373\u53ef\uff0c\u8fd9\u662f\u7b80\u5355\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002",
        "postTime": 1682862760,
        "uid": 172020,
        "name": "Kevin090228",
        "ccfLevel": 8,
        "title": "Ynoi2015 \u6211\u56de\u6765\u4e86"
    },
    {
        "content": "[\u672b\u65e5\u4e09\u95ee\u70b9\u706f\u8bb0\u5f55](https://www.luogu.com.cn/blog/NaOH-Ftoh/mo-ri-san-wen-dian-deng-ji-lu)\uff0c\u5185\u542b\u6240\u6709\u4ee3\u7801\u3002\n\n\u8003\u8651\u64cd\u4f5c $2$ \u7684\u672c\u8d28\uff0c\u5176\u5b9e\u5c31\u662f\u6c42 $d$ \u53d6\u904d $[L,R]$ \u65f6\u7684\u4eb5\u6e0e\u6b21\u6570\u603b\u548c\u3002\n\n\u8003\u8651\u4e00\u6b21\u4eb5\u6e0e\u5b9e\u9645\u505a\u7684\u4e8b\u60c5\uff0c\u5176\u5b9e\u5c31\u662f\u770b $[1,d]$ \u533a\u95f4\u6709\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u968f\u4ece\uff0c\u5982\u679c\u6709\u90a3\u5c31\u7ee7\u7eed\u770b $[d+1,2d]$ \u6709\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u968f\u4ece\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6ca1\u6709\u4e3a\u6b62\uff0c\u540e\u9762\u7684\u533a\u95f4\u6211\u4eec\u4e0d\u5173\u5fc3\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u53ea\u6709\u52a0\u968f\u4ece\u7684\u64cd\u4f5c\uff0c\u6ca1\u6709\u5220\u9664\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684 $d$\uff0c\u7b54\u6848\u5355\u8c03\u9012\u589e\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e $[1,n]$ \u4e2d\u7684\u6240\u6709 $d$ \u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\u8868\u793a\u5f53\u524d\u7b54\u6848\u662f\u4ec0\u4e48\uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e9b\u6307\u9488\u52a0\u8d77\u6765\u6700\u591a\u8df3 $O(n\\ln n)$ \u6b21\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u5230\u4e86\u600e\u4e48\u6700\u5feb\u7684\u6c42\u51fa\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u66f4\u65b0\uff0c\u6211\u4eec\u8981\u4fee\u6539\u54ea\u4e9b\u6307\u9488\u7684\u7b54\u6848\u3002\u5230\u8fd9\u91cc\u5c31\u6709\u4e86\u4e00\u4e2a naive \u7684\u505a\u6cd5\uff0c\u6211\u4eec\u5efa\u51fa\u7ebf\u6bb5\u6811\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7ef4\u62a4\u4e00\u4e2a set \u8868\u793a\u8986\u76d6\u5f53\u524d\u533a\u95f4\u7684 $d$ \u96c6\u5408\uff0c\u5982\u679c\u7236\u8282\u70b9\u5df2\u7ecf\u52a0\u5165\u5219\u5b50\u8282\u70b9\u4e0d\u52a0\u5165\uff0c\u7c7b\u4f3c lazytag\u3002\uff08\u8fd9\u91cc\u6211\u4eec\u8003\u8651\u5728\u5f53\u524d\u65f6\u523b\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u968f\u4ece\u7684\u533a\u95f4\uff0c\u5982\u679c\u6bcf\u4e2a\u533a\u95f4\u90fd\u6709\u5219\u8fd9\u4e2a $d$ \u4e0d\u4f1a\u5728\u4efb\u4f55\u8282\u70b9\u51fa\u73b0\u3002\uff09\u67e5\u8be2\u65f6\u76f4\u63a5\u67e5\u627e\u54ea\u4e9b\u8981\u6539\uff0c\u7136\u540e\u5220\u9664\u5bf9\u5e94\u533a\u95f4\uff0c\u66b4\u529b\u79fb\u52a8\u6307\u9488\uff0c\u91cd\u65b0\u52a0\u5165\u5bf9\u5e94\u533a\u95f4\u5373\u53ef\u3002\n\n\u8fd9\u79cd\u505a\u6cd5\u590d\u6742\u5ea6\u4e3a $O(n\\log^3 n+m\\log n)$\uff0c\u80af\u5b9a\u88ab\u5361\u6389\u4e86\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u6211\u90a3\u51e0\u53d1 84 \u5206\u63d0\u4ea4\u3002/qd\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u4f18\u5316\uff0c\u53ef\u4ee5\u91c7\u53d6\u4e00\u79cd\u7c7b\u4f3c\u8bb0\u5fc6\u5316\u7684\u6280\u5de7\uff0c\u4e00\u5f00\u59cb\u5c06\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u533a\u95f4\u5168\u90e8\u52a0\u5165\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u6bcf\u52a0\u5165\u4e00\u4e2a\u968f\u4ece\u5c31\u5c06\u8be5\u968f\u4ece\u80fd\u904d\u5386\u5230\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u5168\u90e8\u6253\u4e0a\u6807\u8bb0\uff0c\u5e76\u4e14\u518d\u628a\u8fd9\u4e9b\u904d\u5386\u5230\u7684\u8282\u70b9\u6253\u4e0a\u6807\u8bb0\u3002\u8fd9\u6837\uff0c\u6bcf\u4e2a\u533a\u95f4\u6700\u591a\u904d\u5386\u5230\u4e00\u6b21\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u6210 $O(n\\log^2 n+m\\log n)$\u3002\u672c\u9898\u5b8c\u5168\u4e0d\u5361\u5e38\uff0c\u590d\u6742\u5ea6\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\u5e38\u6570\u98de\u8d77\u4e5f\u80fd\u901a\u8fc7\u3002",
        "postTime": 1676301406,
        "uid": 297894,
        "name": "NaOH_Frog",
        "ccfLevel": 9,
        "title": "P5068 [Ynoi2015] \u6211\u56de\u6765\u4e86"
    },
    {
        "content": "> \u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3002 \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u540e\uff0c\u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4eba\u4eec\uff0c\u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\u3002 \u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\uff0c\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\u3002 **\u6211\u56de\u6765\u4e86**\uff0c \u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\uff0c\u76fc\u541b\u52ff\u5fd8\u3002 \u2014\u2014\u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\n\n\u73c2\u6735\u8389\uff0c\u6b22\u8fce\u56de\u6765\n\n\n\n\u8fd9\u9898\u601d\u8def\u8fd8\u7b97\u6bd4\u8f83\u6e05\u6670\uff0c\u800c\u4e14\u4ee3\u7801\u96be\u5ea6\u4e5f\u4e0d\u7b97\u5f88\u5927\uff0c\u4e5f\u4e0d\u5361\u5e38\uff0c\u6211\u5f88\u559c\u6b22\u8fd9\u9053\u9898\uff08\n\n\n\n#### \u505a\u6cd5\u8be6\u8ff0\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u4eb5\u6e0e\u89e6\u53d1\u6b21\u6570\u7684\u8ba1\u7b97\u65b9\u5f0f\u3002\n\n\u4eb5\u6e0e\u6b21\u6570\u662f\u7b2c\u4e00\u4e2a\u957f\u5ea6\u4e3a $d$ \uff0c\u53f3\u7aef\u70b9\u662f $d\\times k$ \u4e14\u6ca1\u6709\u4e00\u4e2a\u968f\u4ece\u8840\u91cf\u5728\u8fd9\u6bb5\u4e4b\u95f4\u7684\u6bb5\u7684\u7f16\u53f7\u3002\n\n\u5f62\u5f0f\u5316\u7684\u8bb2\uff0c\u5c31\u662f\u8fd9\u6837\uff1a\n\n$$mex_{1\\leq p\\leq \\frac{n}{d}} [(\\sum_{i=(p-1)\\times d+1}^{p\\times d} a_i)>0]$$\n\n\u5176\u4e2d $a_i$ \u8868\u793a\u8840\u91cf\u4e3a $i$ \u7684\u968f\u4ece\u6570\u91cf\u3002\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u7531\u4e8e\u968f\u4ece\u4e0d\u4f1a\u6d88\u5931\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a $d$\uff0c\u7b54\u6848\u4e00\u5b9a\u5355\u8c03\u4e0d\u964d\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u5411\u53f3\u63a8\u8fdb\u800c\u4e0d\u7528\u5411\u5de6\u56de\u9000\u3002\n\n\u53d1\u73b0\u5982\u679c\u533a\u95f4\u603b\u6570\u4e0d\u591a\uff0c\u662f $\\sum_{i=1}^n \\frac{n}{i}$ \u7ea7\u522b\u7684\uff0c\u5927\u6982\u662f $n\\log n$\u3002\u6240\u4ee5\u6211\u4eec\u7684\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u533a\u95f4\u5305\u542b\u8bfb\u5165\u7684 $x$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u5305\u542b $x$ \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230 $l\\leq x\\leq r$\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811 $+$ \u5e73\u8861\u6811\u5b9e\u73b0\u3002\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\uff0c\u8868\u793a\u4ee5 $i$ \u4e3a\u5de6\u7aef\u70b9\u7684\u6700\u5927\u7684\u533a\u95f4\u5bf9\u5e94\u7684\u53f3\u7aef\u70b9\u7684\u7f16\u53f7\u662f\u591a\u5c11\u3002\u7136\u540e\u7ebf\u6bb5\u6811\u7684\u975e\u53f6\u5b50\u8282\u70b9\u76f4\u63a5\u7ef4\u62a4\u4e24\u4e2a\u503c\uff0c\u5206\u522b\u8868\u793a\u6700\u5927\u7684\u53f3\u7aef\u70b9\u7684\u7f16\u53f7\u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u5de6\u7aef\u70b9\u7684\u7f16\u53f7\u3002\u6bcf\u6b21\u627e\u533a\u95f4\u7684\u65f6\u5019\u76f4\u63a5\u627e\u5230\u533a\u95f4 $[1,x]$ \u5bf9\u5e94\u7684\u6700\u5927\u53f3\u7aef\u70b9\uff0c\u7136\u540e\u76f4\u63a5\u66b4\u529b\u627e\u5230\u6240\u6709\u53f3\u7aef\u70b9\u6ee1\u8db3 $r\\leq x$ \u5373\u53ef\u3002\n\n\u627e\u5230\u4e86\u4e00\u4e2a\u533a\u95f4\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u5f80\u540e\u63a8\uff0c\u76f4\u5230\u8fd9\u6bb5\u533a\u95f4\u4e2d\u53c8\u6ca1\u6709\u968f\u4ece\u4e86\u4e3a\u6b62\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\uff0c\u5220\u9664\u8fd9\u4e2a\u533a\u95f4\uff0c\u5e76\u52a0\u4e0a\u63a8\u5b8c\u7684\u533a\u95f4\u3002\n\n#### \u601d\u8def\u6574\u7406\n\n\u6211\u4eec\u9996\u5148\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u8bb0\u5f55\u7b54\u6848\uff0c\u4e5f\u5c31\u662f\u53ea\u7528\u652f\u6301\u6bcf\u6b21\u5bf9\u5f53\u524d\u7684\u533a\u95f4\u957f\u5ea6 $d$ \u5355\u70b9\u52a0\uff0c\u4ee5\u53ca\u5bf9\u8be2\u95ee\u7684 $[L,R]$ \u533a\u95f4\u67e5\u8be2\uff0c\u76f4\u63a5\u6811\u72b6\u6570\u7ec4\u5c31\u597d\u4e86\u3002\n\n\u7136\u540e\u8fd8\u6709\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u4e2d\u53c8\u6ca1\u6709\u968f\u4ece\uff0c\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u3002\n\n\u4ee5\u53ca\u4e4b\u524d\u8bf4\u7684\u7528\u7ebf\u6bb5\u6811 $+$ \u5e73\u8861\u6811\u7ef4\u62a4\u5bf9\u5e94\u533a\u95f4\u3002\n\n\u7136\u540e\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u51e0\u4e4e\u6ca1\u6709\u4ee3\u7801\u96be\u5ea6\uff0c\u5c31\u662f\u51e0\u4e2a\u677f\u5b50\uff08\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n+m\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\n\n[\u4ee3\u7801\u81ea\u53d6](https://www.luogu.com.cn/paste/gw5s9uy9)",
        "postTime": 1621477195,
        "uid": 97136,
        "name": "chenzida",
        "ccfLevel": 0,
        "title": "Ynoi2015 \u6211\u56de\u6765\u4e86"
    },
    {
        "content": "### [\u3010Ynoi2015\u3011\u6211\u56de\u6765\u4e86](https://www.luogu.com.cn/problem/P5068)\n\n\u67e5\u8be2\u64cd\u4f5c\u53ef\u4ee5\u770b\u505a\uff0c\u5bf9\u4e8e $[L,R]$ \u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570 $D$\uff0c\u628a\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6570 $x$ \u53d8\u4e3a $\\lceil\\frac{x}{D}\\rceil$\uff0c\u6c42 $mex$ \u518d\u52a0\u8d77\u6765\u3002\n\n$D$ \u7684\u7b54\u6848\u4e0a\u754c\u662f $\\frac{N}{D}$\uff0c\u5373\uff0c\u6240\u6709 $D$ \u7684\u7b54\u6848\u4e4b\u548c\u7684\u4e0a\u754c\u662f $O(N \\log N)$ \u7684\u3002\u4e14\u7b54\u6848\u4e4b\u548c\u4e0d\u4f1a\u51cf\u5c11\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u80fd\u5feb\u901f\u8ba1\u7b97\u51fa\u6bcf\u4e00\u6b21\u7b54\u6848\u7684\u6539\u53d8\uff0c\u95ee\u9898\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a $D$\uff0c\u60f3\u8981\u5728\u5c06\u539f\u96c6\u5408\u6bcf\u4e2a\u6570\u9664\u4ee5\u5b83\u4e4b\u540e\u5b58\u5728 $k$\uff0c\u5219\u9700\u8981\u5728\u539f\u96c6\u5408\u4e2d\u5b58\u5728 $((k-1)D,kD]$ \u4e2d\u7684\u4e00\u4e2a\u6570\u3002\n\n\u5c06\u4e00\u5171 $O(N \\log N)$ \u4e2a\u533a\u95f4\u6302\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u52a0\u5165\u4e00\u4e2a\u6570\u7684\u65f6\u5019\u628a\u6839\u5230\u5bf9\u5e94\u53f6\u5b50\u8def\u5f84\u4e0a\u7684\u6240\u6709\u533a\u95f4\u62ce\u51fa\u6765\uff0c\u7136\u540e\u66b4\u529b\u53bb\u66f4\u65b0\u6bcf\u4e00\u4e2a $D$ \u5bf9\u5e94\u7684 $mex$\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u8fd9\u4e2a\u589e\u91cf\uff0c\u67e5\u8be2\u662f\u5bb9\u6613\u7684\u3002\n\n\u590d\u6742\u5ea6 $O(N \\log^2 N+M \\log N)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define pii pair<int,int>\n#define mp make_pair\n#define pb push_back\nconst int mod=998244353;\nconst int inf=0x3f3f3f3f;\nchar buf[1<<23],*p1=buf,*p2=buf,obuf[1<<23],*O=obuf;\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\ninline int read() {\n\tint x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n\twhile(isdigit(ch)) x=x*10+(ch^48),ch=getchar();\n\treturn x*f;\n}\nvoid print(long long x) {\n    if(x>9) print(x/10);\n    *O++=x%10+'0';\n}\npii t[10000005];\nint cnt[400005],Le[400005],nid[400005];\nvoid update(int id,int l,int r,int x,int y,int f,int s)\n{\n\tif(x<=l&&r<=y) \n\t{\n\t\t//t[++idx]=mp(f,s);\n\t\t//nxt[idx]=p[id],p[id]=idx;\n\t\tcnt[id]++;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid) update(id<<1,l,mid,x,y,f,s);\n\tif(y>mid) update(id<<1|1,mid+1,r,x,y,f,s);\n}\nvoid update2(int id,int l,int r,int x,int y,int f,int s)\n{\n\tif(x<=l&&r<=y) \n\t{\n\t\tt[nid[id]++]=mp(f,s);\n\t\tcnt[id]++;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid) update2(id<<1,l,mid,x,y,f,s);\n\tif(y>mid) update2(id<<1|1,mid+1,r,x,y,f,s);\n}\npii res[100005];\nint len;\nbool ok[4000005];\nint L2[100005],R2[100005];\nvoid query(int id,int l,int r,int x)\n{\n//\tcout<<Le[id]<<\" \"<<nid[id]<<endl;\n\tfor(int i=Le[id];i<nid[id];i++) if(!ok[L2[t[i].fi]+t[i].se]) res[++len]=t[i];\n\tLe[id]=nid[id];\n//\tcout<<id<<\" \"<<l<<\" \"<<r<<\" \"<<x<<endl;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tif(x<=mid) query(id<<1,l,mid,x);\n\telse query(id<<1|1,mid+1,r,x);\n}\nint n,Q;\nint bt[100005],val[100005];\nint lowbit(int x)\n{\n\treturn x&(-x); \n}\nvoid update_bt(int x,int d)\n{\n\tfor(int i=x;i<=n;i+=lowbit(i)) bt[i]+=d;\n}\nint query_bt(int x)\n{\n\tint Res=0;\n\tfor(int i=x;i>=1;i-=lowbit(i)) Res+=bt[i];\n\treturn Res;\n}\nbool vis[100005];\nvoid solve()\n{\n\tn=read(),Q=read();\n\tfor(int i=1,j=0;i<=n;i++) L2[i]=j,R2[i]=j+n/i+5,j=j+n/i+6;\n\tfor(int i=1;i<=n;i++) \n\t{\n\t\tval[i]=1;\n\t\tfor(int j=1;j<=n/i+5;j++)\n\t\t{\n\t\t\tint L=(j-1)*i+1,R=j*i;\n\t\t\tR=min(R,n);\n\t\t\tif(L<=R) update(1,1,n,L,R,i,j);\n\t\t\telse break;\n\t\t}\n\t}\n\tfor(int i=1,j=0;i<=4*n;i++) Le[i]=nid[i]=j,j+=cnt[i];\n\tfor(int i=1;i<=n;i++) \n\t{\n\t\tval[i]=1;\n\t\tfor(int j=1;j<=n/i+5;j++)\n\t\t{\n\t\t\tint L=(j-1)*i+1,R=j*i;\n\t\t\tR=min(R,n);\n\t\t\tif(L<=R) update2(1,1,n,L,R,i,j);\n\t\t\telse break;\n\t\t}\n\t}\n\twhile(Q--)\n\t{\n\t\tint op=read();\n\t\tif(op==2)\n\t\t{\n\t\t\tint L=read(),R=read();\n\t\t\tprint(query_bt(R)-query_bt(L-1)+R-L+1);\n\t\t\t*O++=10;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x=read();\n\t\t\tif(vis[x]) continue;\n\t\t\tvis[x]=1;\n\t\t\tlen=0;\n\t\t\tquery(1,1,n,x);\n\t\t\tfor(int i=1;i<=len;i++)\n\t\t\t{\n\t\t\t\tint u=res[i].fi,v=res[i].se;\n\t\t\t//\tcout<<u<<\" \"<<v<<endl;\n\t\t\t\tok[L2[u]+v]=1;\n\t\t\t\tint del=0;\n\t\t\t\twhile(ok[L2[u]+val[u]]) del++,val[u]++;\n\t\t\t\tif(del) update_bt(u,del);\n\t\t\t}\n\t\t\t//system(\"pause\");\n\t\t}\n\t}\n}\nsigned main()\n{\n\tint _=1;\n//\tcin>>_;\n\twhile(_--) solve();\n\tfwrite(obuf,O-obuf,1,stdout);\n\treturn 0;\n}\n```\n",
        "postTime": 1682260902,
        "uid": 302837,
        "name": "znstz2018",
        "ccfLevel": 7,
        "title": "\u3010Ynoi2015\u3011\u6211\u56de\u6765\u4e86 \u9898\u89e3"
    },
    {
        "content": "\u4eca\u5929\u6a21\u62df\u8d5b\u7684\u9898\uff0c\u8d5b\u65f6 A \u4e86\u5199\u53d1\u9898\u89e3\u3002\n\n\u9996\u5148\u8003\u8651\u5bf9\u4e8e\u56fa\u5b9a\u7684 $d$ \u4eb5\u6e0e\u89e6\u53d1\u6b21\u6570\u662f\u591a\u5c11\uff1f\u8003\u8651\u4e8c\u5143\u51fd\u6570 _$f(S,d)$_ \u8868\u793a\u5bf9\u96c6\u5408 $S$ \u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u51cf\u4e00\u518d\u9664\u4ee5 $d$ \u5f97\u5230\u7684\u96c6\u5408\uff0c\u90a3\u4e48\u4eb5\u6e0e\u89e6\u53d1\u6b21\u6570\u663e\u7136\u662f $\\operatorname{mex}($_$f(S,d)$_$)$\u3002\n\n\u770b\u5230\u9664\u6cd5\u76f8\u4fe1\u4e0d\u5c11\u4eba\u80fd\u4e0b\u610f\u8bc6\u60f3\u5230\u8c03\u548c\u7ea7\u6570 $\\sum_{i = 1}^n\\frac{n}{i} = n \\ln n$\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a $d$ \u7b54\u6848\u53c8\u662f\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u6240\u4ee5\u8003\u8651\u5bf9\u6bcf\u4e2a $d$ \u7ef4\u62a4\u7b54\u6848\uff0c\u6bcf\u6b21\u63d2\u5165\u540e\u66f4\u65b0\u6bcf\u4e2a $d$\uff0c\u7136\u540e\u533a\u95f4\u6c42\u548c\u5c31\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u590d\u6742\u5ea6 $O(nm + n\\ln n \\log n + m \\log n)$\u3002\n\n\u5199\u7684\u90a3\u4e48\u8be6\u7ec6\u662f\u4e3a\u4e86\u4e00\u773c\u770b\u51fa\u74f6\u9888\uff0c\u663e\u7136\u4e0d\u80fd\u66b4\u529b\u66f4\u65b0\u6bcf\u4e2a $d$\uff0c\u6211\u4eec\u8bbe $ans_d$ \u662f\u5f53\u524d $d$ \u7684\u7b54\u6848\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u9664\u975e\u6211\u4eec\u52a0\u5165\u4e86\u8840\u91cf\u5728 $[(ans_d - 1) \\times d + 1,ans_d \\times d]$ \u4e4b\u95f4\u7684\u4ec6\u4ece\uff0c\u5426\u5219 $ans_d$ \u4e0d\u53d8\u3002\u6240\u4ee5\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u6bcf\u6b21\u533a\u95f4\u6253\u6807\u8bb0\u7136\u540e\u8fd9\u4e2a\u6807\u8bb0\u4e0d\u4e0b\u4f20\uff0c\u6bcf\u6b21\u63d2\u5165\u65b0\u4ec6\u4ece\u5c31\u5355\u70b9\u67e5\u7136\u540e\u66f4\u65b0\u518d\u628a\u6807\u8bb0\u5220\u4e86\u3002\n\n\u4e00\u5f00\u59cb\u6211\u7528\u7684\u7ebf\u6bb5\u6811\u5957 map\uff0c\u540e\u6765\u53d1\u73b0\u6807\u8bb0\u603b\u91cf\u662f $O(n\\ln n\\log n)$\uff0c\u5982\u679c\u7528 map \u5c31 $\\log^3$ \u4e86\uff08\u867d\u7136\u8fd9\u6837\u662f\u53ef\u4ee5\u8fc7\u7684\u56e0\u4e3a\u6bcf\u4e2a map \u91cc\u5143\u7d20\u4e0d\u591a\uff09\u540e\u6765\u53d1\u73b0\u6807\u8bb0\u53ef\u4ee5\u61d2\u5220\u9664\uff0c\u6211\u4eec\u53d1\u73b0\u6bcf\u66f4\u65b0\u4e00\u6b21 $d$\uff0c$ans_d$ \u81f3\u5c11\u589e\u52a0\u4e00\uff0c\u6240\u4ee5\u628a\u6807\u8bb0\u53d8\u6210\u4e8c\u5143\u7ec4 $(d,t)$ \u8868\u793a\u9700\u8981\u66f4\u65b0 $d$ \u5f53\u4e14\u4ec5\u5f53 $ans_d = t$\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u61d2\u5220\u9664\u4e86\uff0c\u63d2\u4e00\u5634\u5982\u679c\u4e0d\u8fd9\u6837\u76f4\u63a5\u4e0d\u7ba1\u6807\u8bb0\u4e5f\u662f\u5bf9\u7684\uff08\u56e0\u4e3a\u66f4\u65b0\u5b8c\u672c\u6765\u5c31\u4f1a\u88ab\u5220\u9664\uff09\u4f46\u662f\u662f $\\log^3$ \u7684\u3002\n\n\u590d\u6742\u5ea6 $O(n\\ln n\\log n + m\\log n)$\uff0c\u80fd\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair<int,int> pr;\nconst int N = 100005;\nint n,m,v[N],t[N][2],ans[N];\nint lowbit(int x){return x & -x;}\nvoid add(int x,int y,int z){for(int i = x;i <= n;i += lowbit(i)) t[i][z] += y;}\nint ask(int x,int z){x = min(x,n);int tmp = 0;for(int i = x;i;i -= lowbit(i)) tmp += t[i][z];return tmp;}\nvector<pr >s[N * 4];\nvoid cover(int x,int l,int r,int lp,int rp,int p){\n\tif(lp > r) return;\n\tif(lp <= l && rp >= r){\n\t\ts[x].push_back({p,ans[p]});\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(lp <= mid) cover(x * 2,l,mid,lp,rp,p);\n\tif(rp > mid) cover(x * 2 + 1,mid + 1,r,lp,rp,p);\n}\nvoid yi(int x){\n\t//cover(1,1,n,ans[x] * x - x + 1,ans[x] * x,-x);\n\tadd(x,-ans[x],1);\n\twhile(ask(ans[x] * x - x,0) != ask(ans[x] * x,0)) ++ans[x];\n\tcover(1,1,n,ans[x] * x - x + 1,ans[x] * x,x);\n\tadd(x,ans[x],1);\n}\n//int o[N],cnt;\nvoid ask(int x,int l,int r,int v){\n//\tcnt = 0;\n//\tfor(int tmp:s[x]) o[++cnt] = tmp;\n//\tfor(int i = 1;i <= cnt;++i) yi(o[i]);\n\tfor(pr tmp:s[x]) if(tmp.second == ans[tmp.first]) yi(tmp.first);\n\ts[x].clear();\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tif(v <= mid) ask(x * 2,l,mid,v);\n\telse ask(x * 2 + 1,mid + 1,r,v);\n}\nnamespace INPUT_SPACE{\n\tconst int S=(1<<20)+5;char B[S],*H,*T;inline int gc() { if(H==T) T=(H=B)+fread(B,1,S,stdin);return (H==T)?EOF:*H++; }\n\tinline int inn() { int x = 0,f = 1,ch;while((ch=gc())<'0'||ch>'9') if(ch == '-') f = -1;x=ch^'0';while((ch=gc())>='0'&&ch<='9') x=x*10+(ch^'0');return x * f; }\n}using INPUT_SPACE::inn;\nvoid write(int x){\n\tif(x > 9) write(x / 10);\n\tputchar(x % 10 + '0');\n}\nint main(){\n\tn = inn(),m = inn();\n\tfor(int i = 1;i <= n;++i){\n\t\tans[i] = 1;\n\t\tadd(i,1,1);\n\t\tcover(1,1,n,1,i,i);\n\t}\n\tfor(int i = 1,op,x,y;i <= m;++i){\n\t\top = inn(),x = inn();\n\t\tif(op == 1){\n\t\t\tif(v[x]) continue;\n\t\t\tv[x] = 1;\n\t\t\tadd(x,1,0);\n\t\t\task(1,1,n,x);\n\t\t} else if(op == 2){\n\t\t\ty = inn();\n\t\t\twrite(ask(y,1) - ask(x - 1,1));\n\t\t\tputchar('\\n');\n\t\t}\n\t\t//for(int j = 1;j <= n;++j) write(ans[j]),putchar(' ');\n\t\t//putchar('\\n');\n\t}\n\treturn 0;\n}\n/*\n10 10\n2 7 9\n1 6\n2 7 10\n1 10\n1 7\n2 7 10\n1 7\n1 1\n2 6 7\n1 4\n*/\n```\n",
        "postTime": 1682250520,
        "uid": 239433,
        "name": "WZKQWQ",
        "ccfLevel": 7,
        "title": "P5068 \u3010[Ynoi2015] \u6211\u56de\u6765\u4e86\u3011\u9898\u89e3"
    },
    {
        "content": "\u6709\u70b9\u5957\u8def\uff0c\u5bf9\u601d\u7ef4\u8fde\u8d2f\u6027\u8981\u6c42\u4e0d\u662f\u5f88\u9ad8\u3002                   \n\n------------------------------\n\n\u8003\u8651\u5f62\u5f0f\u5316\u67e5\u8be2\u95ee\u9898\uff1a\n\n\u5b9a\u4e49 $S(i)$ \u4e3a\u5c06\u5927\u5c0f\u4e3a $n$ \u7684\u503c\u57df\u4ee5 $[1,i],[i+1,2i]......[ki+1,n]$ \u7684\u65b9\u5f0f\u8fdb\u884c\u5206\u6bb5\u540e\uff0c\u4ece\u524d\u5f80\u540e\u6570\u7b2c\u4e00\u4e2a\u6bb5\u5185\u6ca1\u6709\u51fa\u73b0\u6570\u7684\u6bb5\u7684\u7f16\u53f7\u3002\n\n\u5219\u67e5\u8be2\u95ee\u9898\u53d8\u4e3a\uff1a$\\sum_{i = L} ^ R S(i)$\u3002\n\n\u8003\u8651\u8fd9\u4e2a\u5206\u6bb5\u7684\u5f62\u5f0f\uff0c\u4e0d\u96be\u53d1\u73b0\u5bf9\u4e8e\u6240\u6709\u7684 $i \\in [1,n]$\uff0c\u5206\u51fa\u6765\u7684\u6bb5\u7684\u603b\u6570\u91cf\u4e3a $O(\\sum_{i=1} ^ n \\lfloor \\frac{n}{i} \\rfloor) = O(nw)$\uff0c\u5176\u4e2d $w$ \u8868\u793a\u8c03\u548c\u7ea7\u6570\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u5728\u7ebf\u7ef4\u62a4\u6bcf\u4e2a\u6bb5\u4f55\u65f6\u5185\u90e8\u51fa\u73b0\u6570\uff0c\u4e0d\u96be\u60f3\u5230\u7531\u4e8e\u6bcf\u4e2a\u6bb5\u53ea\u8981\u51fa\u73b0\u4e86\u6570\u90a3\u4e48\u4e4b\u540e\u7684\u72b6\u6001\u4e0b\u4e00\u76f4\u90fd\u4f1a\u51fa\u73b0\u6570\uff0c\u6240\u4ee5\u4e00\u5171\u53ea\u4f1a\u5bf9 $nw$ \u4e2a\u6bb5\u6267\u884c\u4e00\u6b21\u51fa\u73b0\u4e86\u6570\u7684\u6807\u8bb0\uff0c\u5373\u6807\u8bb0 $nw$ \u6b21\u3002\n\n\u8003\u8651\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a $h$ \u65f6\u5982\u4f55\u66f4\u65b0\u6bcf\u4e2a\u6bb5\u3002\u5bf9\u6bcf\u4e2a\u6bb5\u6309\u7167\u5de6\u7aef\u70b9 $l$ \u6392\u5e8f\u540e\u5f00\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u5185\u8fd8\u672a\u6807\u8bb0\u7684\u6700\u5927 $r$\uff0c\u8fd9\u6837\u5c31\u53ea\u7528\u770b $h$ \u662f\u5426\u5728\u4e00\u4e2a\u533a\u95f4\u7684 $l,r$ \u5185\u5c31\u77e5\u9053\u662f\u5426\u9700\u8981\u7ee7\u7eed\u5f80\u4e0b\u8dd1\u3002         \n\n\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f\u53ef\u4ee5\u5f97\u5230\u4fdd\u8bc1\u7684\u3002\u56e0\u4e3a\u6309\u7167 $l$ \u6392\u597d\u4e86\u5e8f\uff0c\u6240\u4ee5\u7b49\u4ef7\u4e8e\u6309\u7167 $l$ \u5411\u4e0b\u652f\u4ed8\u5355\u6b21 $O(\\log nw)$ \u7684\u4ee3\u4ef7\u627e\u5230\u4e86\u4e00\u4e2a\u53bb\u6389 $l$ \u9650\u5236\u7684\u5b50\u6811\uff0c\u7ee7\u7eed\u5f80\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8d21\u732e\u5c31\u88ab\u644a\u5230\u4e86\u6bcf\u4e2a\u88ab\u4fee\u6539\u7684\u6bb5\u4e0a\u3002         \n\n\u4e8e\u662f\u6211\u4eec\u5728 $O(m \\log nw + nw \\log nw)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u4e86\u6807\u8bb0\u7684\u95ee\u9898\u3002\n\n\u89e3\u51b3\u4e86\u8fd9\u4e2a\u540e\u9762\u5c31\u5f88\u8f7b\u677e\u4e86\u3002\u5224\u65ad\u6bcf\u4e2a\u6bb5\u6240\u5c5e\u7684\u7c7b $i$\uff0c\u5373\u4ee5 $i$ \u4e3a\u516c\u5dee\u8fdb\u884c\u5212\u5206\u7684\u3002\u5bf9\u6bcf\u4e2a $i$ \u5f00\u4e00\u4e2a\u865a\u70b9\u8868\u793a\u7b2c\u4e00\u6b21\u65bd\u6cd5\uff0c\u8fd9\u6837\u9664\u4e86 $[1,i]$ \u5bf9\u5e94\u7684\u6bb5\u5728\u88ab\u6807\u8bb0\u540e\u9700\u8981\u88ab\u5408\u5e76\u5230\u865a\u70b9\u4e0a\uff0c\u5176\u4f59\u7684\u6bb5\u90fd\u5411\u5b83\u7684\u524d\u4e00\u4e2a\u6bb5\u5408\u5e76\uff0c\u6700\u540e\u6bcf\u4e2a $i$ \u4e0a\u5f00\u7684\u865a\u70b9\u7684\u5927\u5c0f\u5c31\u662f\u6bcf\u4e2a $i$ \u5728\u5f53\u524d\u72b6\u6001\u65f6\u65bd\u6cd5\u7684\u6b21\u6570\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u7136\u540e\u5c31\u662f\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u3002\n\n\u8fd9\u4e00\u5757\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(nw \\alpha(nw) + nw \\log n)$ \u7684\u3002\n\n\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $O(m \\log nw + nw \\log nw)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(nw)$\uff0c\u5e38\u6570\u6bd4\u8f83\u4f18\u79c0\u7a33\u5b9a\u5728\u6700\u4f18\u89e3\u6700\u540e\u4e00\u9875\u3002",
        "postTime": 1646841201,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5068 [Ynoi2015] \u6211\u56de\u6765\u4e86"
    },
    {
        "content": "[\u9898\u4f20](https://www.luogu.com.cn/problem/P5068)\n\n7 \u4e2a\u6708\u540e\u518d\u6765\u770b\u8fd9\u9053\u9898\uff0c\u8fd8\u662f\u611f\u89c9\u592a\u5999\u4e86\u3002\n\n\u7531\u4e8e\u7b54\u6848\u6700\u7ec8\u8f93\u51fa $E \\times Len$\uff0c\u6240\u4ee5\u672c\u8d28\u4e0a\u662f\u95ee $\\forall d \\in[L, R]$ \u7684\u8d21\u732e\u548c\uff0c\u518d\u8fdb\u4e00\u6b65\u60f3\uff0c\u4eb5\u6e0e\u7684\u8981\u6c42\u5c31\u662f\u5bfb\u627e\u5e8f\u5217 \n\n$$x_i=\\varepsilon(\\exists h_i| h_i\\in [(i-1)d+1, id])$$\n\n\u4ece $i=1$ \u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed\u7684 1 \u6bb5\uff0c\u6700\u957f\u6bb5\u4e0d\u597d\u6c42\uff0c\u8f6c\u5316\u4e3a\u6c42\u7ed3\u675f\u7684\u4f4d\u7f6e\uff0c\u8bbe $pos_x$ \u4e3a\u9ad8\u5ea6 $x$ \u6700\u65e9\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u4e0d\u5b58\u5728\u5219\u4e3a $0$\uff09\uff0c\u5219\u7ed3\u675f\u7684\u4f4d\u7f6e $end$ \u5e94\u8be5\u6ee1\u8db3\uff1a\n\n$$\\varepsilon(\\nexists h_i| h_i\\in [(end-1)d+1, end\\times d])=\\sum_{i=(end-1)d+1}^{end\\times d} pos_i=0$$\n\n\u73b0\u5728\u8981\u641e\u5b9a\u7684\u5c31\u662f\u8fd9\u4e2a\u4e1c\u897f\u4e86\u3002\n\n\u8003\u8651\u6ca1\u6709\u589e\u52a0\u968f\u4ece\u64cd\u4f5c\u600e\u4e48\u505a\uff0c\u7531\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684 $d$ \u6700\u591a\u5f62\u6210\u7684\u5757\u6709 $n+n/2+n/3+\\dots+n/n=n\\ln(n)$ \u4e2a\uff0c\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u628a\u8fd9 $n\\ln(n)$ \u4e2a\u5757\u7684\u7b54\u6848\u6574\u51fa\u6765\uff08\u5176\u5b9e\u4e5f\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a $d$\uff0c\u628a\u5bf9\u5e94\u7684 $x_i$ \u641e\u51fa\uff09\u3002\n\n\u8003\u8651\u8bb0 $time_{d, i}$ \u4e3a\u5757\u957f\u4e3a $d$ \u65f6\uff0c\u7b2c $i$ \u4e2a\u5757\u6700\u65e9\u4ec0\u4e48\u65f6\u5019\u6709 1\uff0c\u4e0d\u96be\u5199\u51fa\uff1a\n\n$$time_{d_,i}=\\min_{(i-1)d+1\\le j\\le id} pos_j$$\n\n\u8fd9\u4e2a\u663e\u7136\u5c31\u53ef\u4ee5 ST \u8868\u505a\u51fa\u6765\u4e86\u628a\uff0c\u590d\u6742\u5ea6 $O(n \\log n+n\\ln(n))$ \u5206\u522b\u662f ST \u8868\u9884\u5904\u7406\u7684 $O(n \\log n)$\uff0c\u8be2\u95ee\u4e2a\u6570 $n\\ln(n)$ \u4e58\u4e0a ST \u8868\u8be2\u95ee\u590d\u6742\u5ea6 $O(1)$ \u7684 $O(n\\ln(n))$\u3002\n\n\u663e\u7136\u7b2c $i$ \u5757\u4ea7\u751f\u8d21\u732e\u9700\u8981\u6ee1\u8db3\u524d $i-1$ \u5757\u90fd\u6709\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5bf9\u6bcf\u4e00\u4e2a $time_{d, i}$ \u53d6\u524d\u7f00 $\\max$\u3002\n\n\u73b0\u5728\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u4e2a $time_{d, i}$\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u77e5\u9053\u4e86\u8fd9\u4e00\u5757\u7684\u8d21\u732e\u5c06\u5728\u4ec0\u4e48\u65f6\u5019\u4ea7\u751f\uff0c\u76f4\u63a5\u4e22\u5230\u8fd9\u4e2a\u65f6\u523b\u4e0a\u9762\u5c31\u884c\u4e86\uff0c\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\uff0c\u663e\u7136\u6811\u72b6\u6570\u7ec4\u66f4\u597d\u3002\n\n\n\u590d\u6742\u5ea6 $O(n\\ln(n)\\log n)=O(n\\log^2n)$\u3002\n\n### Code\uff1a\n\n\n```cpp\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <vector>\n#include <cctype> \nusing namespace std;\ninline int read(){\n\tchar ch=getchar();int x=0, f=1;\n\twhile(!isdigit(ch)) f=(ch=='-'?-1:f), ch=getchar();\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+ch-'0', ch=getchar();\n\treturn x*f;\n}\nconst int N=1e5+5;\nconst int M=1e6+5;\nint n, m, lg[N], f[N][20], pos[N];\nvector <int> V[M];\npair <int, int> box[M];\nint query(int l, int r){//\u67e5\u8be2\u6700\u5c0f\u503c \n\tint k=lg[r-l+1];\n\treturn min(f[l][k], f[r-(1<<k)+1][k]);\n}\nint BIT[N];\n#define lowbit(x) (x&(-x))\nvoid add(int x){for(; x<=n; x+=lowbit(x)) BIT[x]++;}\nint query(int x){\n\tint ret=0;\n\tfor(; x; x-=lowbit(x)) ret+=BIT[x];\n\treturn ret;\n}\n#undef lowbit\ninline int min(int a, int b){return a=(a<b?a:b);}\nint main(){\n\tn=read(), m=read();\n\tfor(int i=1; i<=n; i++) pos[i]=m+1;\n\tfor(int i=1, opt, x; i<=m; i++){\n\t\topt=read();\n\t\tif(opt&1) x=read(), pos[x]=min(pos[x], i), box[i].first=false;\n\t\telse box[i].first=read(), box[i].second=read();\n\t}\n\tfor(int i=2; i<=n; i++) lg[i]=lg[i>>1]+1;\n\tfor(int i=1; i<=n; i++) f[i][0]=pos[i];\n\tfor(int j=1; j<=18; j++)\n\t\tfor(int i=1; i+(1<<j)-1<=n; i++)\n\t\t\tf[i][j]=min(f[i][j-1], f[i+(1<<j-1)][j-1]);\n\tfor(int d=1; d<=n; d++){\n\t\tint Mx=0, tim;add(d);\n\t\tfor(int l=1, r; l<=n; l=r+1){\n\t\t\tr=min(n, l+d-1);\n\t\t\ttim=query(l, r);Mx=max(Mx, tim);//\u6c42\u51fa time(d,j) \u5e76\u53d6\u524d\u7f00 max\n\t\t\tV[Mx].push_back(d); \n\t\t}\n\t}\n\tfor(int i=1; i<=m; i++){\n\t\tfor(auto j : V[i]) add(j);\n\t\tif(box[i].first) printf(\"%d\\n\", query(box[i].second)-query(box[i].first-1));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1634792774,
        "uid": 341102,
        "name": "ReKoJ",
        "ccfLevel": 0,
        "title": "P5068 [Ynoi2015] \u6211\u56de\u6765\u4e86"
    }
]