[
    {
        "content": "\u9996\u5148\uff0c\u89c2\u5bdf\u6b64\u9898\u7684\u6570\u636e\u8303\u56f4 $1\\le n,m \\le 2 \\times 10^3$ \u5e76\u4e14\n$-10^9 \\le w_i \\le 10^9$\uff0c\u8bf4\u660e\u8fd9\u662f\u4e00\u9053\u5e26\u6709\u8d1f\u8fb9\u6743\u7684\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a $O(nm)$ \u7684\u7b97\u6cd5\u6765\u8fdb\u884c\u6c42\u89e3\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u76f8\u5bf9\u4e8e spfa\uff0c\u6211\u9009\u62e9\u4e86\u66f4\u4e3a\u5bb9\u6613\u5b9e\u73b0\u7684 Bellman_Ford\u3002\n\nBellman_Ford \u7b97\u6cd5\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\u3002\u4ee4 $d_i$ \u4e3a\u4ece\u8282\u70b9 $1$ \u5230\u8282\u70b9 $i$ \u7684\u6700\u77ed\u8def\u3002\u626b\u63cf\u6240\u6709\u8fb9 $(x, y, z)$\uff0c\u5982\u679c $d_y > d_x +z$\uff0c\u90a3\u4e48\u4ee4 $d_y = d_x + z$\u3002\u5982\u6b64\u8fd9\u6837\u626b\u63cf $m$ \u6761\u8fb9\uff0c\u6bcf\u6761\u8fb9\u90fd\u626b\u63cf $n$ \u6b21\uff0c\u4fbf\u5f97\u5230\u4e86\u6700\u77ed\u8def\u7684\u503c\u3002\n\n\u800c spfa \u5219\u662f\u8be5\u7b97\u6cd5\u7684\u4e00\u4e2a\u961f\u5217\u4f18\u5316\u3002\u4f7f\u7528\u961f\u5217\u53ef\u4ee5\u6709\u6548\u907f\u514d\u4e0d\u9700\u8981\u626b\u63cf\u7684\u8282\u70b9\u7684\u626b\u63cf\uff0c\u4f18\u5316\u4e86\u6548\u7387\uff0c\u4f46\u662f\u5199\u8d77\u6765\u66f4\u9ebb\u70e6\uff0c\u6781\u7aef\u60c5\u51b5\u4e0b\u6548\u7387\u4e5f\u672a\u5fc5\u6bd4\u524d\u8005\u9ad8\u3002\u5e76\u4e14\u6b64\u9898\u6570\u636e\u8303\u56f4\u5c0f\uff0cBellman-Ford\u5b8c\u5168\u53ef\u4ee5\u80dc\u4efb\u3002\n\n\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u52a0\u4e00\u4e2a\u5c0f\u4f18\u5316\uff0c\u5c31\u662f\u5f53\u5faa\u73af\u6b21\u6570\u8fd8\u6ca1\u6709\u5230 $n$ \u6b21\u65f6\uff0c\u5982\u679c\u6709\u4e00\u6b21\u5faa\u73af\u4e2d\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u503c\u90fd\u6ca1\u6709\u66f4\u65b0\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\u3002\uff08~~\u867d\u7136\u8fd9\u4e2a\u4f18\u5316\u53ef\u80fd\u6ca1\u4ec0\u4e48\u7528~~\uff09\n\n\u8dd1\u7684\u8fd8\u633a\u5feb\uff0c21ms\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nlong long dis[2010];\nstruct P {\n\tint x, y, z;\n} a[2010];\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tbool flag = 1;\n\tfor (register int i = 1; i <= n; ++i) dis[i] = 1e18;\n\tdis[1] = 0;\n\tfor (register int i = 1; i <= m; ++i) scanf(\"%d%d%d\", &a[i].x, &a[i].y, &a[i].z);\n\tfor (register int i = 1; i <= n; ++i) {\n\t\tflag = 1;\n\t\tfor (register int j = 1; j <= m; ++j)\n\t\t\tif (dis[a[j].y] > dis[a[j].x] + a[j].z) flag = 0, dis[a[j].y] = dis[a[j].x] + a[j].z;\n\t\tif (flag) break;\n\t}\n\tfor (register int i = 1; i <= n; ++i) printf(\"%lld \", dis[i] == 1e18 ? -1 : dis[i]);\n}\n```\n\n\n\n\n",
        "postTime": 1635685463,
        "uid": 162196,
        "name": "\u4f1f\u5927\u7684\u738b\u592b\u5b50",
        "ccfLevel": 6,
        "title": "B3601 [\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 201] \u6700\u77ed\u8def\u95ee\u9898_1 \u9898\u89e3"
    },
    {
        "content": "## Analysis\n\n\u6ce8\u610f\u5230\u8fb9\u6743\u5b58\u5728\u8d1f\u6570\uff0c\u56e0\u6b64 dijkstra \u4e0d\u80fd\u80dc\u4efb\uff0c\u9700\u8981\u4f7f\u7528 bellman-ford \u6216\u5176\u961f\u5217\u4f18\u5316\u7b97\u6cd5\uff08\u5373\u6240\u8c13\u7684 SPFA\uff09\u6765\u5b8c\u6210\u3002\n\n\u9700\u8981\u6307\u51fa\u7684\u662f\uff0cSPFA \u53ea\u80fd\u63d0\u5347 bellman-ford \u5728\u4e00\u822c\u6570\u636e\u60c5\u51b5\u4e0b\u7684\u6548\u7387\uff0c\u800c\u4e0d\u80fd\u4f18\u5316\u5176\u590d\u6742\u5ea6\u3002\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u4e8c\u8005\u7684\u6548\u7387\u662f\u76f8\u540c\u7684\uff08\u751a\u81f3 SPFA \u7684\u5e38\u6570\u66f4\u5927\uff09\u3002\u4e8c\u8005\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a $O(nm)$\u3002\n\nSPFA \u7b97\u6cd5\u7684\u601d\u60f3\u662f\uff0c\u9996\u5148\u5c06\u6e90\u70b9\u52a0\u5165\u961f\u5217\uff0c\u7136\u540e\u53ea\u8981\u961f\u5217\u4e0d\u4e3a\u7a7a\u5c31\u53d6\u51fa\u961f\u9996\u8fdb\u884c\u677e\u5f1b\uff1b\u677e\u5f1b\u6210\u529f\u540e\u5c06\u88ab\u677e\u5f1b\u7684\u8282\u70b9\uff08\u5982\u679c\u4e0d\u5728\u961f\u5217\u4e2d\uff09\u52a0\u5165\u961f\u5217\u3002\n\n## Code\n\n```java\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Scanner;\n\nclass Edge {\n  int w;\n  Node v;\n  Edge nxt;\n  public Edge(Node vv, int ww, Edge nn) {\n    v = vv; w = ww; nxt = nn;\n  }\n}\n\nclass Node {\n  Edge hd;\n  boolean inq;\n  long dist;\n\n  public void add(Node v, int w) {\n    hd = new Edge(v, w, hd);\n  }\n\n  void release(Queue<Node> Q) {\n    this.inq = false;\n    for (Edge e = hd; e != null; e = e.nxt) {\n      Node v = e.v;\n      if (v.dist > dist + e.w) {\n        v.dist = dist + e.w;\n        if (v.inq == false) {\n          v.inq = true;\n          Q.offer(v);\n        }\n      }\n    }\n  }\n}\n\nclass Graph {\n  Node[] node;\n  int n, m;\n  static public long INF = 0x3f3f3f3f3f3f3f3fl;\n\n  public void addedge(int u, int v, int w) {\n    node[u].add(node[v], w);\n  }\n\n  Graph(int N, int M) {\n    n = N; m = M; node = new Node[n + 1];\n    for (int i = 1; i <= n; ++i) node[i] = new Node();\n  }\n\n  public void SPFA() {\n    Queue<Node> Q = new LinkedList<Node>();\n    Q.add(node[1]);\n    for (int i = 2; i <= n; ++i) {\n      node[i].dist = INF;\n    }\n    while (!Q.isEmpty()) {\n      Node u = Q.poll();\n      u.release(Q);\n    }\n  }\n\n  public void print() {\n    for (int i = 1; i <= n; ++i) {\n      System.out.printf(\"%d%c\", node[i].dist == INF ? -1 : node[i].dist, i == n ? '\\n' : ' ');\n    }\n  }\n}\n\n\npublic class Main {\n  public static void main(String[] argv) {\n    Scanner cin = new Scanner(System.in);\n    int n = cin.nextInt(), m = cin.nextInt();\n    Graph G = new Graph(n, m);\n    for (int i = 1, u, v, w; i <= m; ++i) {\n      u = cin.nextInt(); v = cin.nextInt(); w = cin.nextInt();\n      G.addedge(u, v, w);\n    }\n    G.SPFA();\n    G.print();\n  }\n}\n```\n\n",
        "postTime": 1634546012,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "B3601"
    },
    {
        "content": "## \u63d0\u4f9b\u4e00\u4e2a Johnson \u505a\u6cd5\uff01\uff01\uff01\n\n\n\u6211\u4eec\u77e5\u9053 `spfa` \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u5bb9\u6613\u88ab\u5361\uff0c\u4f46\u53ef\u4ee5\u5904\u7406\u8d1f\u8fb9\u6743\uff1b`dijkstra`\u53ef\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u79c0\u4f46\u65e0\u6cd5\u5904\u7406\u8d1f\u8fb9\u6743\n\n**\u90a3\u4e48\u662f\u5426\u5b58\u5728\u8fd9\u6837\u4e00\u4e2a\u7b97\u6cd5\u628a\u4e8c\u8005\u7684\u4f18\u79c0\u4e4b\u5904\u7ed3\u5408\u5462**\uff1f\n\n\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662f\u6211\u8981\u8bf4\u7684 `Johnson` \u7b97\u6cd5\u4e86\n\n`\nJohnson\n`\u7b97\u6cd5\u7528\u4e8e\u6c42\u56fe\u4e0a\u7684\u5168\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u5176\u6838\u5fc3\u601d\u60f3\u662f\u5229\u7528\u8bbe\u7f6e\u865a\u70b9\uff0c\u91cd\u8d4b\u6743\u503c\u7684\u65b9\u6cd5\u628a\u539f\u95ee\u9898\u5e26\u8d1f\u6743\u7684\u56fe\u8f6c\u5316\u4e3a\u6743\u503c\u975e\u8d1f\u7684\u56fe\uff0c\u7136\u540e\u518d\u5229\u7528N \u6b21 `Dijkstra`  \u6c42\u51fa\u5168\u6e90\u6700\u77ed\u8def\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u7ed3\u5408 `spfa` \u548c `Dijkstra` \u4e8c\u8005\u7684\u4f18\u70b9\u4e86\u3002\n\n\u5927\u6982\u7684\u601d\u8def\u5982\u4e0b:\n\n1.\u5efa\u7acb\u4e00\u4e2a\u865a\u70b9\uff0c\u4ece\u865a\u70b9\u5904\u5411\u6bcf\u4e2a\u70b9\u8fde\u63a5\u4e00\u6761\u6743\u503c\u4e3a 0 \u7684\u8fb9\uff1b\n\n2.\u5229\u7528 `spfa` \u6c42\u51fa\u865a\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u5373\u4ee3\u7801\u4e2d\u7684 `hh` \u6570\u7ec4\uff1b\n\n3.\u6700\u540e\u6211\u4eec\u66f4\u65b0\u6bcf\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e3a**\u539f\u6700\u77ed\u8def\u52a0\u4e0a\u865a\u70b9\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\u51cf\u53bb\u865a\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def**\n\n\u6700\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a  ![](https://cdn.luogu.com.cn/upload/image_hosting/dri6thfn.png)\n\n\u4e0d\u591a\u5e9f\u8bdd\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst ll maxn=5007;\nstruct node{\n\tll nxt,pre,w,from;\n}e[maxn<<1];\nll head[maxn],cntedge;\ninline void add(ll u,ll v,ll w) {\n\te[++cntedge]=(node){head[u],v,w,u},head[u]=cntedge;\n}\nll dis[maxn][maxn],hh[maxn],vis[maxn];\nll qq[maxn],h,t;\nll n,m;\ninline void spfa(ll st){\n\tfor(register ll i=1;i<=n;i+=3){\n\t\thh[i]=0x3f3f3f3f;\n\t\thh[i+1]=0x3f3f3f3f;\n\t\thh[i+2]=0x3f3f3f3f;\n\t}\n\thh[st]=0;\n\tqq[++t]=st;\n\twhile(h!=t){\n\t\tll u=qq[++h];\n\t\tif(h>=maxn-5)h=0;\n\t\tvis[u]=false;\n\t\tfor(register ll i=head[u];i;i=e[i].nxt){\n\t\t\tll v=e[i].pre;\n\t\t\tif(hh[v]>hh[u]+e[i].w){\n\t\t\t\thh[v]=hh[u]+e[i].w;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t\tqq[++t]=v;\n\t\t\t\t\tif(t>=maxn-5)t=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nstruct nod {\n\tll x,w;\n\tbool operator < (const nod &com) const{\n\t\treturn w>com.w;\n\t}\n};\npriority_queue <nod> q;\nll dis1[maxn];\ninline void dijkstra(ll st){\n\tfor(register ll i=1;i<=n;i+=3){\n\t\tdis1[i]=0x3f3f3f3f;\n\t\tdis1[i+1]=0x3f3f3f3f;\n\t\tdis1[i+2]=0x3f3f3f3f;\n\t}\n\tdis1[st]=0;\n\tq.push((nod){st,0});\n\twhile(!q.empty()){\n\t\tll u=q.top().x,w=q.top().w;\n\t\tq.pop();\n\t\tif(w!=dis1[u]) continue;\n\t\tfor(register ll i=head[u];i;i=e[i].nxt){\n\t\t\tll v=e[i].pre;\n\t\t\tif(dis1[v]>dis1[u]+e[i].w){\n\t\t\t\tdis1[v]=dis1[u]+e[i].w;\n\t\t\t\tq.push((nod){v,dis1[v]});\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tcin>>n>>m;\n\tfor(ll i=1;i<=m;i++){\n\t\tll u,v,w;\n\t\tcin>>u>>v>>w;\n\t\tadd(u,v,w);\n\t}\n\tfor(ll i=1;i<=n;i++){\n\t\tadd(0,i,0);\n\t}\n\tspfa(0);\n\tfor(ll i=1;i<=cntedge;i++){\n\t\te[i].w+=hh[e[i].from]-hh[e[i].pre];\n\t}\n\tfor(ll i=1;i<=n;i++){\n\t\tdijkstra(i);\n\t\tfor(ll j=1;j<=n;j++){\n\t\t\tdis[i][j]=dis1[j]-hh[i]+hh[j];\n\t\t}\n\t}\n\tfor(ll i=1;i<=n;i++){\n\t\tif(dis[1][i]==1061109567){\n\t\t\tprintf(\"-1 \");\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%d \",dis[1][i]);\n\t}\n\treturn 0;\n}\n```\n~~\u7b80\u6d01\u5730\u6c42\u901a\u8fc7~~\n",
        "postTime": 1636368259,
        "uid": 93639,
        "name": "\u8ffd\u68a6\u7684\u9ed1\u65cb\u98ce",
        "ccfLevel": 7,
        "title": "\u849f\u84bb\u9cb8\u9c7c\u7684\u8239\u65b0\u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\n\n\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9\u3001$m$ \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u6c42 $1$ \u53f7\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n\u6ce8\u610f\uff0c\u56fe\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u4fdd\u8bc1\u4e0d\u5b58\u5728\u8d1f\u73af\u3002\n\n## \u5206\u6790\n\n\u8fd9\u662f\u4e00\u9053\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u6a21\u677f\u9898\u3002\n\n\u5e38\u7528\u6765\u5904\u7406\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u6709 Dijkstra \u7b97\u6cd5\u3001Bellman-Ford \u7b97\u6cd5\u548c SPFA \u7b97\u6cd5\u3002\n\n\u6ce8\u610f\uff0cDijkstra \u7b97\u6cd5**\u65e0\u6cd5\u5904\u7406\u8d1f\u8fb9\u6743**\u3002\u56e0\u6b64 \uff0c\u672c\u7bc7\u9898\u89e3\u4f7f\u7528 SPFA \u7b97\u6cd5\u3002\n\n\u8fd9\u91cc\u8981\u8bf4\u4e00\u4e0b\uff0c\u7531\u4e8e\u5728\u67d0\u5e74\uff0c\u67d0~~\u826f\u5fc3~~\u51fa\u9898\u4eba\u5361\u4e86 SPFA \u3002\n\n\n\u56e0\u6b64\uff0c\u5728**\u6ca1\u6709\u8d1f\u8fb9\u6743**\u7684\u56fe\u4e2d\uff0c\u63a8\u8350\u5927\u5bb6\u4f18\u5148\u4f7f\u7528 Dijkstra \u7b97\u6cd5\u3002\n\nSPFA \u7b97\u6cd5\u601d\u60f3\uff1a\n\u6211\u4eec\u8bbe\u7acb\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u961f\u5217\u6765\u4fdd\u5b58\u5f85\u4f18\u5316\u7684\u7ed3\u70b9\uff0c\u4f18\u5316\u65f6\u6bcf\u6b21\u90fd\u53d6\u51fa\u961f\u9996\u7ed3\u70b9 $x$\uff0c\u7528 $x$ \u70b9\u5f53\u524d\u7684\u6700\u77ed\u8def\u5f84\u503c\u5bf9 $x$ \u70b9\u6240\u6307\u5411\u7684\u7ed3\u70b9 $y$ \u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u3002\u82e5\u7ed3\u70b9 $y$ \u7684\u6700\u77ed\u8def\u5f84\u503c\u53d7\u5230\u5f71\u54cd\uff0c\u5e76\u4e14 $y$ \u70b9\u4e0d\u5728\u961f\u5217\u4e2d\uff0c\u5c31\u5c06\u5176\u5165\u961f\u3002\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u3002\n\n## Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#define inf 2147483647\n\nusing namespace std;\n\nstruct Edge{\n\tint next,to,l;\n}E[10000];\n\nint h[15000],cnt;\n\nvoid add(int u,int v,int w)\n{\n\tcnt++;\n\tE[cnt].next=h[u];\n\th[u]=cnt;\n\tE[cnt].to=v;\n\tE[cnt].l=w;\n}\n\nint n,m;\n\nint s,t;\nint u,v,w;\n\nint k;\n\nqueue<int> q;\n\nint dis[15000];\nbool vis[15000];\n\nvoid spfa(int s)\n{\n\tfor(int i=1;i<=n;i++)\n\t\tdis[i]=inf;\n\tdis[s]=0;\n\tvis[s]=1;\n\tq.push(s);\n\tdo\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tvis[x]=0;\n\t\tfor(int i=h[x];i;i=E[i].next)\n\t\t{\n\t\t\tint y=E[i].to;\n\t\t\tif( dis[y] > dis[x]+E[i].l )\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+E[i].l;\n\t\t\t\tif( !vis[y] )\n\t\t\t\t\tq.push(y);\n\t\t\t\tvis[y]=1;\n\t\t\t}\n\t\t}\n\t}while( !q.empty() );\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t}\n\t\n\tspfa(1);\n\t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif( dis[i] != inf )\n\t\t\tprintf(\"%d \",dis[i]);\n\t\telse\n\t\t\tprintf(\"-1 \");\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1634548394,
        "uid": 453406,
        "name": "\u767d\u7b80",
        "ccfLevel": 0,
        "title": "B3601 [\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 201] \u6700\u77ed\u8def\u95ee\u9898_1"
    },
    {
        "content": "\u672c\u9898\u662f\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u6a21\u677f\u9898\u76ee\u3002\n\n\u6c42\u89e3\u5355\u6e90\u6700\u77ed\u8def\uff0c\u5e38\u7528\u7684\u6709\u4e24\u79cd\u7b97\u6cd5\uff1a Bellman-Ford \u7b97\u6cd5\u548c Dijkstra \u7b97\u6cd5\u3002\uff08 SPFA \u7b97\u6cd5\u5b9e\u9645\u4e0a\u662f\u524d\u8005\u7684\u961f\u5217\u4f18\u5316\uff09\u3002\n\nDijkstra \u5728\u6b64\u4e0d\u505a\u8003\u8651\uff0c\u56e0\u4e3a Dijkstra \u7684\u8d2a\u5fc3\u601d\u60f3\u5bfc\u81f4\u5176\u65e0\u6cd5\u5904\u7406\u5e26\u6709\u8d1f\u6743\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\u3002\n\nBellman-Ford \u6838\u5fc3\u601d\u60f3\uff1a\u521d\u59cb\u9664\u4e86\u6e90\u70b9\u4e4b\u5916\u5230\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u90fd\u662f\u65e0\u7a77\u5927\uff0c $dist_v = \\min (dist_u+w_{u,v},dist_v )$ , $dist_i$ \u8868\u793a\u4ece\u6e90\u70b9 $s$ \u5230 $i$ \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u8fd9\u79cd\u64cd\u4f5c\u4e5f\u53eb\u677e\u9a70\u64cd\u4f5c\uff0c\u8fd0\u7528\u4e86\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u3002 \u590d\u6742\u5ea6\u4e3a $O(nm)$ \u3002\n\nBellman-Ford \u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\nfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=m;j++)\n    \tdis[to[j]]=min(dis[from[j]]+len[j],dis[to[j]]);\n```\n\nSPFA \u6838\u5fc3\u601d\u60f3\uff1a\u5bf9 Bellman-Ford \u8fdb\u884c\u4f18\u5316\uff0c\u6bcf\u6b21\u5c06\u8fd8\u80fd\u7ee7\u7eed\u677e\u9a70\u64cd\u4f5c\u4e14\u6ca1\u6709\u5165\u961f\u7684\u70b9\u8fdb\u884c\u5165\u961f\uff0c\u8fd9\u6837\u5b50\u51cf\u5c11\u4e86\u5bf9\u5df2\u7ecf\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u70b9\u7684\u91cd\u590d\u8ba1\u7b97\u3002\n\nAC \u4ee3\u7801 \uff08SPFA \u4ee3\u7801\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<queue>\n#define N 10005\n#define INF dis[0]\n#define int long long\nusing namespace std;\nstruct edge{\n\tint to,nxt,w;\n}Edge[500005];\nint n,m,fir[500005],dis[N],cnt,s;\nbool vis[N];\nqueue<int>q;\ninline void add(int u,int v,int w){\n\tEdge[++cnt].to=v;\n\tEdge[cnt].w=w;\n\tEdge[cnt].nxt=fir[u];\n\tfir[u]=cnt;\n}\nvoid SPFA(){\n\tmemset(dis,0x3f,sizeof dis);\n\tq.push(s);dis[s]=0;vis[s]=true;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=false;\n\t\tfor(int i=fir[u];i;i=Edge[i].nxt){\n\t\t\tint v=Edge[i].to,w=Edge[i].w;\n\t\t\tif(dis[v]>dis[u]+w){\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tif(!vis[v]){\n\t\t\t\tvis[v]=true;\n\t\t\t\tq.push(v);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main(){\n\tios::sync_with_stdio(false);\n\tcin>>n>>m;s=1;\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,w;\n\t\tcin>>u>>v>>w;\n\t\tadd(u,v,w);\n\t}\n\tSPFA();\n\tfor(int i=1;i<=n;i++)\n\tif(i==s)cout<<0<<' ';\n\telse if(dis[i]==INF)cout<<-1<<' ';\n\telse cout<<dis[i]<<' ';\n\treturn 0;\n}\n```\n",
        "postTime": 1638327790,
        "uid": 434929,
        "name": "Usada_Pekora",
        "ccfLevel": 7,
        "title": "B3601 SPFA"
    },
    {
        "content": "\u8fd9\u9898\u7684\u6b63\u89e3\u662f\u7528 **Bellman-Ford** \u7b97\u6cd5\uff08\u6216\u5176\u4f18\u5316\u7248\u672c\uff09\u3002\n\n## Bellman-Ford \u7b97\u6cd5\nBellman-Ford \u7b97\u6cd5\u662f\u4e00\u79cd\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u8fb9\u7684\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u590d\u6742\u5ea6\u4e3a $O(nm)$\u3002\n\n\u60f3\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n\n\u8bb0 $dis_i$ \u4e3a\u76ee\u524d\u6c42\u51fa\u7684\u4ece\u8d77\u70b9 $1$ \u5230 $i$ \u70b9\u7684\u6700\u77ed\u8def\uff0c\u5c06\u521d\u503c $dis_1$ \u8bbe\u4e3a $0$\uff0c\u5176\u4ed6\u4e3a\u65e0\u7a77\u5927\u3002\n\n\u5bf9\u4e8e\u4e00\u6761\u8fb9 $(u,v)$\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u5982\u4e0b**\u677e\u5f1b**\u64cd\u4f5c\uff1a\n\n$dis_v=min(dis_v,dis_u+w(u,v))$\uff0c\u5176\u4e2d $w(u,v)$ \u662f\u8fb9 $(u,v)$ \u7684\u6743\u503c\u3002\n\n\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u6c42\u51fa\u4ece\u8d77\u70b9\u5230 $v$ \u6700\u77ed\u8def\u7684\u66f4\u4f18\u60c5\u51b5\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u904d\u5386\u56fe\u4e0a\u6bcf\u4e00\u6761\u8fb9\u8fdb\u884c\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\n\n\u7b2c\u4e00\u6b21\u904d\u5386\uff0c\u7531\u4e00\u6761\u8fb9\u7ec4\u6210\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u4e00\u5b9a\u80fd\u88ab\u7b97\u51fa\uff1b\n\n\u7b2c\u4e8c\u6b21\u904d\u5386\uff0c\u5728\u4e00\u6761\u8fb9\u7ec4\u6210\u7684\u6700\u77ed\u8def\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e00\u6761\u8fb9\uff0c\u4e00\u5b9a\u80fd\u5f97\u5230\u7531\u4e24\u6761\u8fb9\u7ec4\u6210\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u2026\u2026\n\n\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u7ec8\u4e00\u5b9a\u80fd\u7b97\u51fa\u4ece\u8d77\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n\u56e0\u4e3a\u4e00\u5171\u6709 $n$ \u4e2a\u70b9\uff0c\u6240\u4ee5\u6700\u77ed\u8def\u5f84\u6700\u591a\u53ea\u53ef\u80fd\u7531 $n-1$ \u6761\u8fb9\u7ec4\u6210\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u904d\u5386 $n-1$ \u6b21\u4e4b\u540e\uff0c\u4e00\u5b9a\u80fd\u5f97\u5230\u6700\u7ec8\u7b54\u6848\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\nconst int N = 2005;\nint n, m, tot = -1, head[N], nxt[N], to[N];\nlong long val[N], d[N]; // \u4e0d\u5f00long long\u89c1\u7956\u5b97\n\nvoid add(int u, int v, long long w) {\n\tto[++tot] = v, val[tot] = w;\n\tnxt[tot] = head[u], head[u] = tot;\n}\n\nvoid Bellman_Ford() {\n\tmemset(d, 0x3f, sizeof d);\n\td[1] = 0; // \u521d\u503c\n\tfor (int k = 1; k < n; k++) // n - 1\u6b21\u904d\u5386\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfor (int j = head[i]; ~j; j = nxt[j]) // \u5bf9\u4e8e\u6bcf\u6761\u8fb9\n\t\t\t\td[to[j]] = min(d[to[j]], d[i] + val[j]); // \u677e\u5f1b\n}\n\nint main()\n{\n\tscanf(\"%d %d\", &n, &m);\n\tmemset(head, -1, sizeof head); // \u7528\u94fe\u5f0f\u524d\u5411\u661f\u5343\u4e07\u522b\u5fd8\u8fd9\u4e00\u884c\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u, v;\n\t\tlong long w;\n\t\tscanf(\"%d %d %lld\", &u, &v, &w);\n\t\tadd(u, v, w);\n\t}\n\tBellman_Ford();\n\tfor (int i = 1; i <= n; i++)\n\t\tprintf(\"%lld \", (d[i] == 0x3f3f3f3f3f3f3f3f ? -1 : d[i]));\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n## \u961f\u5217\u4f18\u5316\nBellman-Ford \u7b97\u6cd5\u6709\u5f88\u591a\u79cd\u4f18\u5316\uff0c\u867d\u7136\u8fd9\u4e9b\u4f18\u5316\u80fd\u5728\u5927\u591a\u60c5\u51b5\u4e0b\u6548\u7387\u6781\u9ad8\uff0c\u4f46\u603b\u80fd\u6709\u6570\u636e\u628a\u5b83\u4eec\u5361\u56de\u539f\u5f62\uff0c\u5373 $O(nm)$\u3002\n\n\u4e00\u79cd\u6700\u5e38\u89c1\u4e5f\u6700\u597d\u5199\u7684\u4f18\u5316\u662f**\u961f\u5217\u4f18\u5316**\uff0c\u6709\u4e9b\u4eba\u79f0\u4e3a **SPFA\uff08Shortest Path Fastest Algorithm\uff0c\u6700\u77ed\u8def\u6700\u5feb\u7b97\u6cd5\uff09**\uff0c\u4f46\u5361\u5b83\u7684\u6570\u636e\u591a\u4e86\u53bb\u4e86\uff0c\u6839\u672c\u4e0d\u914d\u62e5\u6709\u8fd9\u4e2a\u540d\u5b57\u3002\n\n\u961f\u5217\u4f18\u5316\u7684\u60f3\u6cd5\u662f\uff1a\u53ea\u6709\u4e0a\u4e00\u6b21\u88ab\u677e\u5f1b\u6210\u529f\u7684\u7ed3\u70b9\uff0c\u8fd9\u4e00\u6b21\u624d\u6709\u53ef\u80fd\u6210\u529f\u677e\u5f1b\u522b\u7684\u8fb9\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u961f\u5217\u7ef4\u62a4\u54ea\u4e9b\u7ed3\u70b9\u201c\u6709\u8d44\u683c\u201d\u677e\u5f1b\u5176\u4ed6\u70b9\uff0c\u800c\u4e0d\u7528\u628a\u6bcf\u4e2a\u70b9\u8fde\u51fa\u7684\u8fb9\u90fd\u677e\u5f1b\u4e00\u904d\uff0c\u8fd9\u6837\u5728\u968f\u673a\u56fe\u4e2d\u6548\u7387\u4f1a\u9ad8\u5f88\u591a\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u8fd8\u662f\u770b\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\nconst int N = 2005;\nint n, m, tot = -1, head[N], nxt[N], to[N];\nlong long val[N], d[N]; // \u4e0d\u5f00long long\u89c1\u7956\u5b97\n\nvoid add(int u, int v, long long w) {\n\tto[++tot] = v, val[tot] = w;\n\tnxt[tot] = head[u], head[u] = tot;\n}\n\nvoid Bellman_Ford() {\n\tqueue<int> q;\n\tbool v[N] = {0}; // v[i]\u8868\u793ai\u53f7\u70b9\u662f\u5426\u5728\u961f\u5217\u4e2d\n\tmemset(d, 0x3f, sizeof d);\n\td[1] = 0, q.push(1), v[1] = true; // \u4e00\u5f00\u59cb\u53ea\u67091\u53f7\u70b9\u6709\u8d44\u683c\u677e\u5f1b\n\twhile (!q.empty()) { // \u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u6ca1\u6709\u70b9\u80fd\u677e\u5f1b\u522b\u7684\u70b9\uff0c\u8bf4\u660e\u6240\u6709\u70b9\u6700\u77ed\u8def\u90fd\u5df2\u6c42\u51fa\uff0c\u6b64\u65f6\u7ed3\u675f\u904d\u5386\n\t\tint k = q.front();\n\t\tq.pop(), v[k] = false; // \u961f\u9996\u51fa\u961f\uff0c\u4ee4\u5176\u201c\u5931\u53bb\u8d44\u683c\u201d\n\t\tfor (int i = head[k]; ~i; i = nxt[i])\n\t\t\tif (d[k] + val[i] < d[to[i]]) {\n\t\t\t\td[to[i]] = d[k] + val[i]; // \u677e\u5f1b\uff0c\u6b64\u65f6to[i]\u5e94\u83b7\u5f97\u8d44\u683c\n\t\t\t\tif (!v[to[i]]) // \u82e5to[i]\u5df2\u7ecf\u6709\u8d44\u683c\uff0c\u5c31\u4e0d\u7528\u91cd\u590d\u52a0\u5165\u961f\u5217\n\t\t\t\t\tq.push(to[i]), v[to[i]] = true;\n\t\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d %d\", &n, &m);\n\tmemset(head, -1, sizeof head);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u, v;\n\t\tlong long w;\n\t\tscanf(\"%d %d %lld\", &u, &v, &w);\n\t\tadd(u, v, w);\n\t}\n\tBellman_Ford();\n\tfor (int i = 1; i <= n; i++)\n\t\tprintf(\"%lld \", (d[i] == 0x3f3f3f3f3f3f3f3f ? -1 : d[i]));\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n## \u63d0\u9192\nBellman-Ford \u7b97\u6cd5\uff0c\u5927\u5bb6\u6700\u597d\u53ea\u7528\u4e8e\u5904\u7406\u8d1f\u6743\u8fb9\u6216\u5176\u4ed6 Dijkstra \u7b97\u6cd5\u89e3\u51b3\u4e0d\u4e86\u7684\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u975e\u8d1f\u6743\u8fb9\u56fe\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb[B3602](https://www.luogu.com.cn/problem/B3602)\u5b66\u4e60 Dijkstra \u7b97\u6cd5\uff0c\u7528Bellman-Ford \u4f1a\u51fa\u4e8b\u7684\uff01\uff01\uff01",
        "postTime": 1639047241,
        "uid": 267481,
        "name": "\u5218\u5609\u7426",
        "ccfLevel": 7,
        "title": "B3601"
    }
]