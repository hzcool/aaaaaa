[
    {
        "content": "PS\uff1a\u4e4b\u524d\u6ca1\u6709**Special Judge**\u7684\u7a9d\u6302\u7684\u975e\u5e38\u60e8\uff0c\u73b0\u5728\u6276\u5495\u5495\u628a**Special Judge**\u52a0\u4e0a\u53bb\u4e86\uff0c\u8ba9\u6211\u4eec\u4e00\u8d77\u652f\u6301\u4ed6\u8fde\u4efb\u5427\uff08\u5927\u96fe\n\n\u7f51\u7edc\u6d41\u884c\u5217\u7684\u7ecf\u5178\u6a21\u578b\u3002\n\n- \u5c06\u6bcf\u884c\u6bcf\u5217\u5206\u522b\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u6bcf\u884c\u5bf9\u5e94\u7684\u70b9\u7684\u7f16\u53f7\u4e3a $1-n$\uff0c\u6bcf\u5217\u5bf9\u5e94\u7684\u70b9\u7684\u7f16\u53f7\u4e3a $(n+1)-(n+m)$\u3002\n\n- \u4ece\u6bcf\u884c\u5411\u6bcf\u5217\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a $1$ \uff0c\u8d39\u7528\u4e3a $p_{i,j}*0.01$\u3002\n- \u4ece\u6e90\u70b9 $S$ \u5411\u6bcf\u884c\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a $a_i$ \uff0c\u8d39\u7528\u4e3a $1.00$\u3002\n- \u4ece\u6bcf\u5217\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a $b_j$\uff0c\u8d39\u7528\u4e3a $1.00$\u3002\n\n\u8dd1\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u7531\u4e8e\u8fd9\u9898\u6c42\u7684\u662f\u4ee4\u5df2\u9009\u70b9\u7684\u6743\u503c\u4e4b\u79ef\u6700\u5927\uff0c\u6545 $\\text{spfa}$ \u589e\u5e7f\u65f6\uff0c $dis_y=\\max\\{dis_y,dis_x*w(x,y)\\}$\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u672c\u9898\u4e2d\u53cd\u8fb9\u7684\u8d39\u7528\u5e76\u975e\u53d6\u8d1f\uff0c\u56e0\u4e3a\u5982\u679c\u53d6\u8d1f\uff0c\u5728\u53d6\u53cd\u8fb9\u65f6\u65e0\u6cd5\u6b63\u786e\u6263\u9664\u8d21\u732e\uff0c\u6839\u636e\u4e58\u6cd5\u7684\u539f\u7406\uff0c\u6211\u4eec\u53d6\u5b83\u7684\u5012\u6570\u3002\n\n\u6ca1\u6709\u8f93\u51fa\u6700\u5927\u6982\u7387\u5176\u5b9e\u66f4\u597d\u5199\uff0c\u5bf9\u4e8e\u8f93\u51fa\u65b9\u6848\uff0c\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u4e00\u4e0b\u6b8b\u91cf\u7f51\u7edc\uff0c\u627e\u51fa\u90a3\u4e9b\u5f53\u524d\u5bb9\u91cf\u4e3a $0$ \u7684\u8fb9\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002\n\n\u8fd9\u9898\u6b63\u89e3\u662f $\\text{zkw}$ \u8d39\u7528\u6d41\uff0c\u4e3a\u4e86\u5361\u8fc7\u53bb\uff0c\u6211\u4eec\u9700\u8981\u505a\u4e00\u4e9b\u5e38\u6570\u4e0a\u7684\u4f18\u5316\u3002\n\n- \u5feb\u8bfb\u3002\n- $\\text{dinic}$ \u7684\u6700\u4f18\u5316\u526a\u679d\uff08\u6d41\u91cf\u4e3a $0$ \u65f6\u63d0\u524d\u9000\u51fa\uff09\n- $\\text{dinic}$ \u7684\u5f53\u524d\u5f27\u4f18\u5316\u3002\n- \u5728\u56de\u6eaf\u65f6\u76f4\u63a5\u628a $vis$ \u6570\u7ec4\u7f6e\u4e3a $0$ \uff0c\u5c3d\u91cf\u4e0d\u7528 $\\text{memset}$\u3002\n\n**Show the Code**\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cmath>\n#define min(a,b) ((a)<(b)? (a):(b))\n//x->y incf w\nconst int inf=0x3f3f3f3f;\nconst double eps=1e-6;\nstd::queue<int> Q;\nint cnt=1,n,m,s,t;\ndouble dis[100005],w[200005];\nint a[105],b[105],vis[100005],val[105][105],mp[105][105];\nint h[100005],to[200005],ver[200005],incf[200005];\ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline void add(int x,int y,int z,double v) {\n\tto[++cnt]=y;\n\tver[cnt]=h[x];\n\tincf[cnt]=z;\n\tw[cnt]=v;\n\th[x]=cnt;\n}\ninline void add_d(int x,int y,int z,double v) {add(x,y,z,v);add(y,x,0,1.0/v);}\ninline bool spfa() {\n\tfor(register int i=0;i<=t;++i) dis[i]=-1;\n\tdis[s]=1.00;Q.push(s);\n\twhile(Q.size()) {\n\t\tint x=Q.front();Q.pop();\n\t\tvis[x]=0;\n\t\tfor(register int i=h[x];i;i=ver[i]) {\n\t\t\tint y=to[i];\n\t\t\tif((dis[y]<dis[x]*w[i])&&(incf[i])) {\n\t\t\t\tdis[y]=dis[x]*w[i];\n\t\t\t\tif(!vis[y]) {vis[y]=1;Q.push(y);}\n\t\t\t} \n\t\t}\n\t}\n\treturn dis[t]>0;\n}\nint dfs(int x,int flow) {\n\tif(!flow||x==t) return flow;\n\tvis[x]=1;\n\tint rest=flow;\n\tfor(register int i=h[x];i&&rest;i=ver[i]) {\n\t\tint y=to[i];\n\t\tif(!vis[y]&&(fabs(dis[y]-dis[x]*w[i])<=eps)&&incf[i]) {\n\t\t\tint k=dfs(y,min(rest,incf[i]));\n\t\t\tif(!k) {dis[y]=-1;}\n\t\t\telse {rest-=k;incf[i]-=k;incf[i^1]+=k;}\t\n\t\t}\n\t}\n\tvis[x]=0;\n\treturn flow-rest;\n}\nint main() {\n\tn=read(),m=read();\n\tint maxflow=0;\n\ts=n+m+1;t=n+m+2;\n\tfor(register int i=1;i<=n;++i) {for(register int j=1;j<=m;++j) val[i][j]=read();}\t\n\tfor(register int i=1;i<=n;++i) a[i]=read();\n\tfor(register int i=1;i<=m;++i) b[i]=read();\n\tfor(register int i=1;i<=n;++i) if(a[i]) add_d(s,i,a[i],1.0);\n\tfor(register int i=1;i<=m;++i) if(b[i]) add_d(i+n,t,b[i],1.0);\n\tfor(register int i=1;i<=n;++i) {for(register int j=1;j<=m;++j) if(val[i][j]) add_d(i,j+n,1,val[i][j]*0.01);}\n\twhile(spfa()) maxflow+=dfs(s,inf);//,printf(\"%d\\n\",maxflow);\n\tfor(register int x=1;x<=n;++x) {\n\t\tfor(register int i=h[x];i;i=ver[i]) {\n\t\t\tint y=to[i];\n\t\t\tif(y==s) continue;\n\t\t\tif(!incf[i]) mp[x][y-n]=1;\n\t\t}\n\t}\n\tfor(register int x=1;x<=n;++x) {\n\t\tfor(register int y=1;y<=m;++y) {\n\t\t\tprintf(\"%d\",mp[x][y]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/b74mon7x.png)\n\n\u6700\u540e\u9644\u4e0a\u63d0\u4ea4\u8bb0\u5f55\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u73a9\u610f\u8dd1\u7684\u5b8c\u5168\u4e0d\u50cf\u662f\u4e00\u4e2a\u7eaf\u7cb9\u7684\u8d39\u7528\u6d41\u3002\n\n~~**(Nacly_Fish is gu\u597d\u8bc4**~~",
        "postTime": 1585747247,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2410 \u3010[SDOI2009]\u6700\u4f18\u56fe\u50cf\u3011"
    },
    {
        "content": "\u849f\u84bb\u55b5\u55b5\u7684\u7b2c\u4e00\u7bc7\u6b63\u7ecf\u9898\u89e3\u2014\u2014  \n\u63d0\u4ea4\u4e86\uff0c\u4e5f\u8bb8\u80fd\u8fc7\u5462><\n\n\u4e3b\u8981\u89e3\u91ca\u4e86\u4e00\u4e0b\u4e3a\u5565\u8981\u8fd9\u4e48\u8fde\u8fb9\n\n2023/3/14 update:\u6539\u4e86\u9519\u5b57 \u884c=>\u5217  \n@liyishui2003 /bx\n\n------------\n\u9996\u5148\uff0c\u6211\u4eec\u7528\u6d41\u7f51\u7edc\u91cc\u7684\u70b9\u8868\u793a _\u6bcf\u4e00\u884c_  \u548c  _\u6bcf\u4e00\u5217_ \u3002  \n\u6bd4\u5982\u70b9 $i$ \u8868\u793a\u7b2c $i$ \u884c\uff0c\u70b9 $j+n$ \u8868\u793a\u7b2c $j$ \u5217\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u683c\u5b50 $(i,j)$\uff0c\u4ece\u7b2c $i$ \u884c\u7684\u70b9\u5411\u7b2c $j$ \u5217\u7684\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$\uff0c\u6743\u503c\u4e3a $p_{i,j}$\uff08\u6307\u6982\u7387\uff0c\u8f93\u5165\u7684\u6570\u503c $\\times0.01$\uff09\u7684\u8fb9\u3002  \n\u8fd9\u6837\uff0c\u6211\u4eec\u6307\u5b9a\u4e00\u4e2a\u683c\u5b50\u4e3a\u9ed1\u8272\u5c31\u76f8\u5f53\u4e8e\u5728\u6d41\u7f51\u7edc\u4e2d\u4f7f\u8fd9\u6761\u8fb9\u6ee1\u6d41\u2014\u2014\u8d21\u732e\u4e86\u4e00\u4e2a\u9ed1\u8272\u683c\u5b50\uff0c\u540c\u65f6\u4e5f\u5f97\u5230\u4e86 $p_{i,j}$ \u7684\u4ef7\u503c\u3002\u53cd\u4e4b\uff0c\u6ca1\u6709\u8d21\u732e\u9ed1\u683c\u5b50\u6570\u91cf\uff0c\u4e5f\u6ca1\u6709\u5f97\u5230\u4ef7\u503c\u3002  \n~~\u542c\u8bf4\u6709\u4e2a\u6a21\u578b\u53eb _\u7f51\u7edc\u6d41\u884c\u5217\u6a21\u578b_\u3002~~\n\n\u7136\u540e\u8003\u8651\u6bcf\u884c\u3001\u6bcf\u5217\u9ed1\u683c\u5b50\u6570\u91cf\u7684\u9650\u5236\uff0c\u5c31\u662f\u901a\u8fc7\u6bcf\u884c\u3001\u6bcf\u5217\u7684\u70b9\u7684\u6d41\u91cf\u7684\u9650\u5236\u3002  \n\u6240\u4ee5\u53ea\u9700\u8981\u628a\u6e90\u70b9 $S$ \u4e0e\u8868\u793a\u7b2c $i$ \u5217\u7684\u70b9\u8fde\u7684\u8fb9\u7684\u6d41\u91cf\u8bbe\u4e3a $a_i$\uff0c \u8868\u793a\u7b2c $j$ \u5217\u7684\u70b9\u4e0e\u6c47\u70b9 $T$ \u7684\u8fde\u8fb9\u7684\u6d41\u91cf\u4e3a $b_j$ \u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u5f53\u7136\u5168\u90fd\u53cd\u8fc7\u6765\u8fde\u4e5f\u53ef\u4ee5\uff09  \n\u8fd9\u6837\u6ee1\u6d41\u7684\u65f6\u5019\u7b2c $i$ \u884c\u7684\u603b\u6d41\u91cf\u662f $a_i$\uff0c\u7b2c $j$ \u5217\u7684\u603b\u6d41\u91cf\u662f $b_i$\uff0c\u521a\u597d\u6ee1\u8db3\u9898\u610f\u3002\n\n\u6c42\u7684\u662f\u9009\u62e9\u7684\u70b9\u6743\u503c\u4e4b\u79ef\u6700\u5927\uff0c\u5728\u7f51\u7edc\u91cc\u5c31\u662f\u4f7f\u6ee1\u6d41\u7684\u65f6\u5019\u8d39\u7528\u6700\u5927\uff0c\u6240\u4ee5\u8dd1\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u3002\n\n\n\n------------\n\u4e8e\u662f\u5efa\u56fe\u5c31\u662f\n- \u5bf9\u4e8e\u6bcf\u4e2a\u683c\u5b50 $(i,j)$\uff0c\u4ece\u7b2c $i$ \u884c\u7684\u70b9\u5411\u7b2c $j$ \u5217\u7684\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$\uff0c\u6743\u503c\u4e3a $p_{i,j}$\uff08\u6307\u6982\u7387\uff0c\u8f93\u5165\u7684\u6570\u503c $\\times0.01$\uff09\u7684\u8fb9\u3002\n- $S$ \u5411\u6bcf\u884c $i$ \u8fde\u5bb9\u91cf $a_i$\uff0c\u8d39\u7528 $1$ \u7684\u8fb9\u3002\n- \u6bcf\u5217 $j$ \u5411 $T$ \u8fde\u5bb9\u91cf $b_i$\uff0c\u8d39\u7528 $1$ \u7684\u8fb9\u3002\n\n------------\n\u4e00\u4e9b\u5177\u4f53\u5b9e\u73b0\u7684\u5e9f\u8bdd\u7ec6\u8282\uff1a\n- $S$ \u4e0e\u884c $i$ \u7684\u8fde\u8fb9\u3001\u5217 $j$ \u4e0e $T$ \u7684\u8fde\u8fb9\u6743\u503c\u662f $1$ \u4e0d\u662f $0$\uff0c\u56e0\u4e3a\u8981\u4e58\u8d77\u6765\u3002\n- \u53cd\u5411\u8fb9\u7684\u8d39\u7528\u662f  $\\frac{1}{c}$ \u4e0d\u662f $-c$\uff0c\u540c\u7406\u3002  \n- SPFA \u7684\u677e\u5f1b\u662f `dis[v]<dis[u]*e[i].c`\u3002\n- \u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\uff0c\u904d\u5386\u6bcf\u884c\u8fde\u5230\u6bcf\u5217\u7684\u8fb9\uff0c\u5982\u679c\u6ee1\u6d41\u5c31\u662f $1$\uff0c\u53cd\u4e4b\u4e3a $0$ \u5373\u53ef\u3002\n- \u73b0\u5728\u597d\u50cf\u4e0d\u5361\u5e38\u4e86\uff0c[dinic ~~\u5373\u4f7f\u5fd8\u4e86\u52a0\u5f53\u524d\u5f27\u4f18\u5316\u4e5f~~\u8fc7\u4e86](https://www.luogu.com.cn/record/101171894)\u3002\n\n\n------------\ncode  \n[record](https://www.luogu.com.cn/record/101179130)\n\n```cpp\n#include<bits/stdc++.h>\n#define in(x) scanf(\"%d\",&x)\n#define out(x) printf(\"%d\",x)\n#define outs(x) printf(x)\n#define ed printf(\"\\n\")\n#define ll long long\n#define ull unsigned long long\n#define mpr make_pair\n#define pr pair<int,int>\n#define qwq first\n#define awa second\n#define fo(i,a,b) for(int i=a;i<=b;++i)\n#define fu(i,a,b) for(int i=a;i<b;++i)\n#define INF 2139062143\n//#define Aranea_Debug\n#define N 110\n#define M 100010\n#define eps (1e-6)\nusing namespace std;\nstruct node\n{\n    int v,nxt,w;\n    double c;\n}e[M*2];\nint head[M],cnt=1;\nvoid add(int a,int b,int w,double c)\n{\n    e[++cnt].v=b;\n    e[cnt].w=w,e[cnt].c=c;\n    e[cnt].nxt=head[a];\n    head[a]=cnt;\n}\nvoid link(int a,int b,int w,double c)\n{\n    if(!c)return;\n    add(a,b,w,c),add(b,a,0,1.0/c);\n}\n\nint S,T,cur[M];\nbool inq[M];\ndouble dis[M];\nqueue<int>q;\nbool spfa()\n{\n    memcpy(cur,head,sizeof(head));\n    fo(i,0,T)dis[i]=-1;\n    dis[S]=1.0;\n    q.push(S);\n    while(!q.empty())\n    {\n        int u=q.front();q.pop();\n        inq[u]=false;\n        for(int i=head[u];i;i=e[i].nxt)\n        {\n            int vol=e[i].w,v=e[i].v;\n            if(vol>0&&dis[v]<dis[u]*e[i].c)\n            {\n                dis[v]=dis[u]*e[i].c;\n                if(!inq[v])inq[v]=true,q.push(v);\n            }\n        }\n    }\n    return dis[T]>0;\n}\nbool vis[M];\nint dfs(int u=S,int flow=INF)\n{\n    if(u==T)return flow;\n    vis[u]=true;\n    int rm=flow;\n    for(int i=cur[u];i&&rm;i=e[i].nxt)\n    {\n        cur[u]=i;\n        int vol=e[i].w,v=e[i].v;\n        if(vol>0&&!vis[v]&&abs(dis[v]-dis[u]*e[i].c)<=eps) //\u7cbe\u5ea6\u95ee\u9898/ll\n        {\n            int c=dfs(v,min(rm,vol));\n            rm-=c,e[i].w-=c,e[i^1].w+=c;\n        }\n    }\n    vis[u]=false;\n    return flow-rm;\n}\nvoid dinic()\n{\n    while(spfa())\n        dfs();\n    return;\n}\n\nbool ans[N][N];\nint main()\n{\n    int n,m,a,b,p;\n    in(n),in(m);\n    //\u5efa\u56fe\n    S=0,T=n+m+1;\n    fo(i,1,n)fo(j,1,m)\n        in(p),link(i,j+n,1,p*0.01);\n    fo(i,1,n)\n        in(a),link(S,i,a,1);\n    fo(i,1,m)\n        in(b),link(i+n,T,b,1);\n    dinic();\n    //\u904d\u5386\n    fo(i,1,n)\n        for(int j=head[i];j;j=e[j].nxt)\n            if(!e[j].w)\n                ans[i][e[j].v-n]=true;\n    for(int i=1;i<=n;++i,puts(\"\"))\n        fo(j,1,m)\n            out(ans[i][j]);\n    return 0;\n}\n\n```\n\n",
        "postTime": 1675312482,
        "uid": 176849,
        "name": "Aranea\u6668\u66e6",
        "ccfLevel": 0,
        "title": "P2410 [SDOI2009] \u6700\u4f18\u56fe\u50cf"
    },
    {
        "content": "\u8d39\u7528\u6d41\uff1a\u884c\u5217\u6a21\u578b  \n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6240\u5728$(i,j)$\uff0c\u4ece$i$\u5411$j$\u8fde\u4e00\u6761\u5bb9\u91cf1\uff0c\u8d39\u7528$log(x)$\u7684\u8fb9\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u5c06\u4e58\u6cd5\u8f6c\u5316\u4e3a\u52a0\u6cd5\u7136\u540e\u8dd1\u6700\u5927\u8d39\u7528\u6d41\uff0c\u7136\u540e\u6e90\u70b9\u8fde\u884c\uff0c\u5217\u8fde\u6c47\u70b9\uff08\u53cd\u8fc7\u6765\u4e5f\u884c\uff09\uff0c\u8dd1\u5b8c\u6700\u5927\u8d39\u7528\u6d41\u540e\uff0c\u5982\u679c\u7b2ci\u884c\u5230\u7b2cj\u5217\u7684\u8fb9\u6709\u6d41\u91cf\u8bf4\u660e$(i,j)$\u4e3a1\uff0c\u5426\u5219\u4e3a\u96f6   \n\n\n\n\n\u5982\u679c\u5927\u4f6c\u60a8\u4f1azkw\u8d39\u7528\u6d41\uff0c\u4ee5\u4e0b\u7684\u5185\u5bb9\u53ef\u4ee5\u8df3\u8fc7  \n\n\n\n------------------\n\u5f88\u663e\u7136\uff0c\u5efa\u5b8c\u56fe\u540e\u8fd9\u662f\u4e00\u5f20\u7a20\u5bc6\u56fe\uff0c\u7528zkw\u6d41\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u89e3\u51b3\uff0c\u7136\u800c\u849f\u84bb\u5e76\u4e0d\u4f1a  \n\u7136\u540e\u5f00\u59cb\u4e86\u8270\u8f9b\u800c\u53c8\u5feb\u4e50\uff08tongku\uff09\u7684SPFA\u5e38\u6570\u4f18\u5316  \n- 1.\u624b\u5199\u961f\u5217\u66ff\u4ee3STL\u961f\u5217  \n- 2.register\u5bc4\u5b58\u5668\u5e38\u6570\u4f18\u5316  \n- 3.\u51fd\u6570inline\u548c\u4f20\u5740\u8c03\u7528\u7684\u4f18\u5316  \n- 4.\u5feb\u901f\u8bfb\u5165\u548c\u5feb\u901f\u8f93\u51fa\u4f18\u5316  \n- 5.\u5bf9\u4e8e$0$\u5230$100$\u7684\u7684$log$\u4f18\u5316\uff0c\u63d0\u524d\u6253\u4e00\u5f20\u8868\n- 6.$double$\u6539\u6210$float$\u7684\u5e38\u6570\u4f18\u5316  \n- 7.\u4e0d\u9700\u8981$MaxFlow$\u548c$MaxCost$\u8bb0\u5f55\u7b54\u6848\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u9700\u8981\u77e5\u9053\u6d41\u548c\u8d39\u7528\u662f\u591a\u5c11\n- 8.$STLfill$\u548c$memset$\u51fd\u6570\u4f18\u5316\uff0c\u7528\u4e8e\u6d6e\u70b9\u6570\u7ec4\u548c\u6574\u6570\u6570\u7ec4\u7f6e\u521d\u503c  \n- 9.\u5728\u5efa\u56fe\u7684\u65f6\u5019\u76f4\u63a5\u8bb0\u5f55\u4e0b\u7b2c$i$\u884c\u5230\u7b2c$j$\u5217\u5bf9\u5e94\u7684\u8fb9\uff0c\u7528\u6570\u7ec4$f[i][j]$\u8bb0\u5f55\uff0c\u8f93\u51fa\u7b54\u6848\u65f6\u76f4\u63a5\u67e5\u8be2  \n- 10.\u5bf9\u4e8e\u6982\u7387\u4e3a$0$%\u6216\u6982\u7387\u4e3a$100$%\u7684\u70b9\u7279\u5224\uff0c\u4e0d\u7528\u52a0\u8fb9\uff0c\u4f46\u5bf9\u5e94\u7684\u884c\u5217\u7684\u70b9\u7684\u521d\u59cb\u5bb9\u91cf\uff08\u5373\u6e90\u70b9\u8fde\u5411\u884c\u7684\u8fb9\uff0c\u5217\u6d41\u5411\u6c47\u70b9\u7684\u8fb9\u7684\u5bb9\u91cf\uff09\u8981\u76f8\u5e94\u52a0\u51cf  \n- 11.\u5c06\u7ed3\u6784\u4f53\u4fdd\u5b58\u7684\u8fb9\u8f6c\u5316\u4e3a\u591a\u4e2a\u8fde\u7eed\u6570\u7ec4\uff0c\u4f18\u5316\u8bfb\u5199\u901f\u5ea6\uff0c\u56e0\u4e3a\u8fde\u7eed\u7684\u6570\u7ec4\u6bd4\u76f8\u5bf9\u4e0d\u8fde\u7eed\u7684\u7ed3\u6784\u4f53\u901f\u5ea6\u66f4\u5feb  \n- 12.\u624b\u52a8\u5f00\u542f$O2,O3,Ofast$\u7b49  \n- 13.\u5728\u6d1b\u8c37\u7684\u4f4e\u5cf0\u671f\u63d0\u4ea4\uff0c\u5b9e\u6d4b\uff0c\u540c\u4e00\u4efd\u4ee3\u7801\u5728$luogu$\u7684\u4e0d\u540c\u65f6\u95f4\u63d0\u4ea4\u4f1a\u5f97\u5230$70-100$\u5206\u7684\u4e0d\u540c\u7ed3\u679c  \n\n\n-------------------\n\n![](https://cdn.luogu.com.cn/upload/pic/50804.png)\u6700\u5927\u70b9(#10#11)$2000msAccepted$\u751a\u662f\u65e0\u8bed\u2026\u2026  \n\u603b\u7528\u65f6$20000ms$\u5361\u8fc7\n\n\n$SPFA+EK+$ $\\text{\u4ee5\u4e0a13\u6761\u4f18\u5316\uff0c\u76f8\u4fe1\u4f60\u4e00\u5b9a\u80fdAC}$",
        "postTime": 1549074293,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2410 \u3010[SDOI2009]\u6700\u4f18\u56fe\u50cf\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d41\u3002\n\n\u867d\u7136\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u4f46\u662f\uff0c\u7f51\u7edc\u6d41\u7684\u8fb9\u6743\u4e5f\u53ef\u4ee5\u7528\u8fde\u4e58\u6765\u8ba1\u7b97\u3002\u76f4\u63a5\u7528\u51e0\u7387(\u8bbe\u4e3a$p$)\u5f53\u505a\u8fb9\u6743\uff0c\u53cd\u5411\u8fb9\u7684\u8fb9\u6743\u5c31\u662f$\\frac{1}{p}$\u3002spfa\u65f6\uff0c\u76f4\u63a5\u7528$dis[v]=dis[u]*w$\u6765\u66f4\u65b0\u8fb9\u6743\u3002\u5176\u672c\u8d28\u548c\u4e0b\u9762\u51e0\u4f4d\u7684\u53d6$\\log$\u8ba1\u7b97\u5728\u76f8\u52a0\u662f\u76f8\u540c\u7684\uff0c\u4f46\u662f\u7cbe\u5ea6\u4f1a\u66f4\u9ad8\u3002\u7136\u540e\u5c31\u548c\u4e00\u822c\u7684\u7f51\u7edc\u6d41\u6ca1\u4ec0\u4e48\u533a\u522b\u4e86\u3002\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u5206\u56fe\u6743\u5339\u914d\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<cctype>\n#define For(i,a,b) for(i=(a);i<=(b);++i)\n#define Forward(i,a,b) for(i=(a);i>=(b);--i)\n#define Rep(i,a,b) for(register int i=(a),i##end=(b);i<=i##end;++i)\n#define Repe(i,a,b) for(register int i=(a),i##end=(b);i>=i##end;--i)\n#define Chkmax(a,b) a=a>b?a:b\n#define Chkmin(a,b) a=a<b?a:b\nusing namespace std;\ntemplate<typename T>inline void read(T &x){\n    T s=0,f=1;char k=getchar();\n    while(!isdigit(k)&&k^'-')k=getchar();\n    if(!isdigit(k)){f=-1;k=getchar();}\n    while(isdigit(k)){s=s*10+(k^48);k=getchar();}\n    x=s*f;\n}\nvoid file(void){\n    #ifndef ONLINE_JUDGE\n    freopen(\"water.in\",\"r\",stdin);\n    freopen(\"water.out\",\"w\",stdout);\n    #endif\n}\nconst int MAXN=511;\nstatic int n,m;\nstatic struct edge\n{\n    int v,nxt,f,x,y;\n    double w;\n}p[(MAXN<<3)+(MAXN*MAXN<<3)];\nstatic int head[MAXN],e=1;\ninline void add(int u,int v,int f,double w,bool lz=1,int x=0,int y=0)\n{\n    p[++e].v=v;p[e].f=f;p[e].w=w;p[e].nxt=head[u];head[u]=e;\n    if(x)p[e].x=x,p[e].y=y;\n    if(lz)add(v,u,0,1.0/w,0,x,y);\n}\nstatic int s,t;\nvoid init()\n{\n    read(n);read(m);\n    s=n+m+1;t=s+1;\n    static int x;\n    Rep(i,1,n)Rep(j,1,m)\n    {\n        read(x);\n        if(x)add(i,j+n,1,0.01*x,1,i,j);\n    }\n    static int u;\n    Rep(i,1,n)\n    {\n        read(u);\n        if(u)add(s,i,u,1.0);\n    }\n    Rep(i,1,m)\n    {\n        read(u);\n        if(u)add(i+n,t,u,1.0);\n    }\n}\nstatic int a[MAXN][MAXN],vis[MAXN];\nstatic deque<int>G;\nstatic double dis[MAXN];\ninline bool spfa(int s,int t)\n{\n    Rep(i,1,t)dis[i]=-1;\n    dis[s]=1.0;G.push_back(s);\n    static int u;vis[s]=true;\n    while(!G.empty())\n    {\n        u=G.front();G.pop_front();\n        for(register int v=head[u];v;v=p[v].nxt)\n            if(p[v].f&&dis[p[v].v]<dis[u]*p[v].w)\n            {\n                dis[p[v].v]=dis[u]*p[v].w;\n                if(!vis[p[v].v])\n                {\n                    vis[p[v].v]=true;\n                    if(G.empty()||dis[p[v].v]>dis[G.front()])\n                        G.push_front(p[v].v);\n                    else G.push_back(p[v].v);\n                }\n            }\n        vis[u]=false;\n    }\n    return dis[t]>0;\n}\nconst int inf=0xFFFFFFF;\nconst double eps=0.000001;\nstatic int cur[MAXN];\nint dfs(int u,int t,int flow)\n{\n    if(!flow||u==t)return flow;\n    vis[u]=true;\n    int sum=0;\n    for(register int&v=cur[u];v&&flow;v=p[v].nxt)\n    {\n        if(!vis[p[v].v]&&p[v].f\n            &&fabs(dis[p[v].v]-dis[u]*p[v].w)<=eps)\n        {\n            int f=dfs(p[v].v,t,min(flow,p[v].f));\n            if(f&&p[v].x)a[p[v].x][p[v].y]^=1;\n            p[v].f-=f;p[v^1].f+=f;sum+=f;flow-=f;\n        }\n    }\n    vis[u]=false;\n    return sum;\n}\ninline void Dinic(int s,int t)\n{\n    while(spfa(s,t))memcpy(cur,head,sizeof cur),dfs(s,t,inf);\n}\nvoid solve()\n{\n    Dinic(s,t);\n    Rep(i,1,n)\n    {Rep(j,1,m)printf(\"%d\",a[i][j]);putchar('\\n');}\n}\nint main(void){\n    file();\n    init();\n    solve();\n    return 0;\n}\n\n```",
        "postTime": 1518074394,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2410 \u3010[SDOI2009]\u6700\u4f18\u56fe\u50cf\u3011"
    },
    {
        "content": "\u524d\u4e00\u4f4d\u53d1\u9898\u89e3\u7684\u795e\u7287\u6210\u529f\u4f7f\u7528\u9ad8\u7aef\u9ed1\u79d1\u6280\u5e73\u677f\u7535\u89c6(pb\\_ds)\u5361\u8fdb\u4e860.5s\u7684\u65f6\u9650\u3002\n\n\u4f46\u662f\u6211\u6bd4\u8f83\u84bb\uff0c\u88ab\u7b2c\u4e94\u4e2a\u70b9\u5361\u5f97\u751f\u65e0\u53ef\u604b=\\_=\u8fd8\u597d\u7ba1\u7406\u5458\u9ad8\u62ac\u8d35\u624b\u653e\u5bbd\u4e86\u65f6\u9650\u3002\n\n\u597d\u5427\u8a00\u5f52\u6b63\u4f20\uff0c\u4e0b\u9762\u4ecb\u7ecdZKW\u8d39\u7528\u6d41\u5199\u6cd5\u3002\n\nzkw\u7684\u57fa\u672c\u601d\u8def\u662f\u591a\u8def\u589e\u5e7f\uff0c\u901a\u8fc7spfa\u9884\u5904\u7406\u51fadis\u6570\u7ec4\uff0c\u7136\u540e\u8fdb\u884cdfs\u3002\n\n\u8fd9\u79cd\u7b97\u6cd5\u5728\u7a20\u5bc6\u56fe\u4e2d\u660e\u663e\u4f18\u4e8espfa\u3002\n\n\u597d\u5427\u5982\u679c\u4e0d\u61c2\u7684\u81ea\u884c\u767e\u5ea6zkw\u5427\uff0c\u5f88\u591a\u795e\u7287\u7684\u535a\u5ba2\u4e2d\u90fd\u6709\u8be6\u7ec6\u4ecb\u7ecd\u3002\n\n\u4e0b\u9762\u8d34\u51fa\u81ea\u5df1\u88ab\u5361\u5f97\u751f\u65e0\u53ef\u604b\u7684\u4ee3\u7801\n\n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<cmath>\nusing namespace std;\nint head[1010],point[100010],nxt[100010],remain[100010],sum;\nlong long w[100010];\nint n,m,x;\nqueue<int>q;\nint exist[1010],vis[1010];\nlong long dis[1010];\nconst long long longinf=(1ll<<60);\nconst int inf=1e9+7;\nint t[1019];\nint fs[101][101];\n#define min(a,b) (a<b?a:b)\ninline void add(int x,int y,int flow,long long cost)\n{\n    ++sum;nxt[sum]=head[x];head[x]=sum;point[sum]=y;remain[sum]=flow;w[sum]=cost;\n    ++sum;nxt[sum]=head[y];head[y]=sum;point[sum]=x;remain[sum]=0;w[sum]=-cost;\n}\ninline bool spfa(int s,int t)\n{\n    for(int i=s;i<=t;i++)\n    dis[i]=longinf;\n    dis[t]=0;\n    q.push(t);\n    while(!q.empty())\n    {\n        int now=q.front();q.pop();\n        exist[now]=0;\n        for(int tmp=head[now];tmp!=-1;tmp=nxt[tmp])\n        {\n            int u=point[tmp];\n            long long v=w[tmp^1];\n            if(dis[u]>dis[now]+v&&remain[tmp^1])\n            {\n                dis[u]=dis[now]+v;\n                if(!exist[u])\n                {\n                    q.push(u);\n                    exist[u]=1;\n                 } \n            }\n        }\n    }\n    return dis[s]<longinf;\n}\ninline int dfs(int x,int t,int limit)\n{\n    vis[x]=1;\n    if(x==t||!limit) return limit;\n    int flow=0,f;\n    for(int tmp=head[x];tmp!=-1;tmp=nxt[tmp])\n    {\n        int u=point[tmp];\n        long long v=w[tmp];\n        if((dis[u]==dis[x]-v)&&remain[tmp]&&!vis[u])\n        {\n            f=dfs(u,t,min(limit,remain[tmp]));\n            flow+=f;\n            limit-=f;\n            remain[tmp]-=f;\n            remain[tmp^1]+=f;\n            if(x!=0&&u!=n+m+1)\n            {\n                if(x>n)\n                fs[u][x-n]=1-remain[tmp^1];\n                else\n                fs[x][u-n]=1-remain[tmp];\n            }\n            if(!limit) return flow;\n        }\n    }\n    return flow;\n}\ninline void zkw(int s,int t)\n{\n    while(spfa(s,t))\n    {\n        do\n        {\n            for(int i=s;i<=t;i++)\n            vis[i]=0;\n            dfs(s,t,inf);\n        }\n        while(vis[t]);\n    }\n}\ninline void read(int &ans,char ch=getchar())\n{\n    ans=0;\n    for(;ch<'0'||ch>'9';ch=getchar());\n    for(;ch>='0'&&ch<='9';ans=ans*10+ch-48,ch=getchar());\n} \nint main()\n{\n    memset(nxt,-1,sizeof(nxt));\n    memset(head,-1,sizeof(head));\n    sum=-1;\n    read(n),read(m);\n    for(int i=1;i<=n;i++)\n    for(int j=1;j<=m;j++)\n    {\n        read(x);\n        if(!x) continue;\n        x*=100000;\n        double s=log2(x);\n        s*=inf;\n        long long d=s;\n        add(i,j+n,1,-d);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        read(x);\n        add(0,i,x,0);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        read(x);\n        add(i+n,n+m+1,x,0);\n    }\n    zkw(0,n+m+1);\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        putchar(fs[i][j]+48);\n        puts(\"\");\n     } \n}\n```",
        "postTime": 1493126162,
        "uid": 17828,
        "name": "revenger",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2410 \u3010[SDOI2009]\u6700\u4f18\u56fe\u50cf\u3011"
    },
    {
        "content": "\u5f88\u597d\u60f3\u5230\u7684\u662f\uff0c\u6bcf\u884c\u5efa\u4e00\u4e2a\u70b9\uff0c\u6bcf\u5217\u5efa\u4e00\u4e2a\u70b9\uff0cs\u5411\u6bcf\u884c\u8fde\u8d39\u7528=0\uff0c\u6d41\u91cf=\u8be5\u884c\u70b9\u6570\u7684\u8fb9\uff1b\u6bcf\u5217\u5411t\u8fde\u8d39\u7528=0\uff0c\u6d41\u91cf=\u8be5\u5217\u70b9\u6570\u7684\u8fb9\u3002\n\n\u8868\u793a\u9009\u62e9\u7684\u6bcf\u884c\u3001\u6bcf\u5217\u4e2d\u70b9\u6570\u5fc5\u987b\u6ee1\u8db3\u8981\u6c42\u3002\n\n\u600e\u4e48\u4fdd\u8bc1x\u4e58\u79ef\u6700\u5c0f\u5462\uff1f\n\n\u53ef\u4ee5\u8f6c\u5316\u4e3alogx\u7684\u548c\u6700\u5c0f(\u56e0\u4e3a\u90fd\u53ef\u8f6c\u5316\u4e3alog(x\u7684\u4e58\u79ef))\u3002\n\n\u6240\u4ee5\u6bcf\u4e2a\u70b9<i,j>\u5c31\u4ece\u884ci\u5411\u5217j\u8fde\u4e00\u6761log\u8fb9\u6743\u7684\u8fb9\u3002\n\n\u7f51\u4e0a\u8bf4\u8fd9\u9898\u8981\u7528zkw\u8d39\u7528\u6d41\u3002\u7136\u800c\u6211\u53ea\u4f1aspfa+dfs\u7684\u3002\n\n\u4e8e\u662f\u6211\u901a\u8fc7\u5361\u5e38a\u4e86\u8fd9\u9898\u3002\u6700\u6162\u7684\u70b9\u4e5f\u53ea\u7528200+ms\u3002\n\n\u7ec6\u8282:\n\n1 log(x)\u8f6c\u5316\u4e3alog(x\\*\u4e00\u4e2a\u6570)\uff0c\u51cf\u5c0f\u8bef\u5dee\u3002\n\n\u7531\u4e8elogx\\*y=logx+logy\uff0c\u800c\u9009\u62e9\u7684\u70b9\u7684\u603b\u6570\u662f\u4e00\u5b9a\u7684\uff0c\u6240\u4ee5logy\u7684\u8d21\u732e\u5728\u4e0d\u540c\u9009\u62e9\u4e2d\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5f71\u54cd\u9009\u62e9\u3002\n\n2 log(x\\*\u4e00\u4e2a\u6570)\u8f6c\u5316\u4e3alog(x\\*\u4e00\u4e2a\u6570)\\*\u4e00\u4e2a\u5f88\u5927\u6570\uff0c\u8f6c\u800c\u7528long long\u50a8\u5b58\uff0c\u52a0\u901f\uff01\n\ndouble\u6bd4long long\u6162\u591a\u4e86\u3002\u56e0\u4e3a\u6211\u4eec\u5224\u65ad\u5b9e\u6570\u76f8\u7b49\u65f6\u662f\u52241e-9\u7684\uff0c\u6240\u4ee5\u4e58\u4e2a1e9\u540e\u4e5f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u8bef\u5dee\u3002\n\n3 spfa+pb\\_ds\u5806\u4f18\u5316\n\n\u66f4\u591a\u8bf7\u89c1\u4ee3\u7801\n\n```cpp\n#pragma GCC optimize(\"O2\")\n#include<bits/stdc++.h>\nusing namespace std;\n#include<ext/pb_ds/priority_queue.hpp>\nusing namespace __gnu_pbds;\n\n#define ll long long \n#define oo 1e18\n#define N 300\n#define M 100000\nint n,m,s,t,i,j,x,y;\nstruct edge\n{\n    int to,f;\n    ll w;\n    int next;\n}l[M];int e;\nint head[N];\n\nvoid add(int x,int y,int f,const ll &w)\n{\n    l[++e]=(edge){y,f,w,head[x]};head[x]=e;\n    l[++e]=(edge){x,0,-w,head[y]};head[y]=e;\n}\n\nll g[N];\nstruct g_xiao\n{\n__inline__ __attribute((always_inline)) bool operator()(int y,int x)\n    {\n        return g[x]>g[y];\n    }\n};\ntypedef __gnu_pbds::priority_queue<int,g_xiao> heap;\nheap q;\nheap::point_iterator dy[N];\nll base;\nbool spfa()//\u53cd\u5411\u8dd1\u6700\u957f\u8def \n{\n    for (i=1;i<t;++i) g[i]=-oo;\n    q.push(t);\n    do\n    {\n        x=q.top();dy[x]=0;\n        q.pop();\n        base=g[x];\n        for (i=head[x];i;i=l[i].next)\n        if (l[i^1].f&&g[y=l[i].to]<base-l[i].w)\n        {\n            g[y]=base-l[i].w;\n            if (dy[y]!=0) q.modify(dy[y],y);\n            else dy[y]=q.push(y);\n        }\n    }while (!q.empty());\n    \n    return g[s]!=-oo;\n}\n\n#define I a[x]\nbool ing[N];\nbool Find;\nint a[N];\nvoid dfs(int x)//\u6b63\u5411\u641c\u7d22 \n{\n    if (x==t)\n    {\n        Find=1;return ;\n    }\n    \n    ing[x]=1;\n    int y;ll now=g[x];\n    for (;I;I=l[I].next)\n    if (l[I].f&&!ing[y=l[I].to]&&g[y]+l[I].w==now) \n    {\n        dfs(y);\n        if (Find)\n        {\n            --l[I].f;++l[I^1].f;\n            ing[x]=0;\n            return;\n        }\n    }\n    ing[x]=0;\n}\n\nint _e;\nbool ans[N][N];\nvoid get_ans()\n{\n    for (i=2;i<=_e;i+=2) \n    if (!l[i].f)\n     ans[l[i+1].to][l[i].to]=1;\n    for (i=1;i<=n;++i)\n    {\n        for (j=1;j<=m;++j) printf(\"%d\",ans[i][n+j]);\n        printf(\"\\n\");\n    }\n}\n\nll dy_w[100];\n\nint main()\n{ //freopen(\"1.in\",\"r\",stdin);freopen(\"1.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    s=n+m+1;t=s+1;\n    e=1;\n    for (i=1;i<100;++i) dy_w[i]=log2(i<<20)*1000000000;\n    for (i=1;i<=n;++i)\n    for (j=1;j<=m;++j)\n    {\n        scanf(\"%d\",&x);\n        if (x) add(i,n+j,1,dy_w[x]);\n    }\n    _e=e;\n    for (i=1;i<=n;++i) \n    {\n        scanf(\"%d\",&x);add(s,i,x,0);\n    }\n    for (i=1;i<=m;++i) \n    {\n        scanf(\"%d\",&x);add(n+i,t,x,0);\n    }\n    \n    while (spfa())\n    {\n        for (i=1;i<=t;++i) a[i]=head[i];\n        while (dfs(s),Find) Find=0;\n    }\n    get_ans(); \n}\n```",
        "postTime": 1483446760,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2410 \u3010[SDOI2009]\u6700\u4f18\u56fe\u50cf\u3011"
    }
]