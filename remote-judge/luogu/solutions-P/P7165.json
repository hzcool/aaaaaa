[
    {
        "content": "~~\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3~~\n\n\u9996\u5148\u770b\u5230\u8fd9\u79cd\u7c7b\u4f3c\u201c\u5207\u4e24\u5200\u201d\u7684\u63cf\u8ff0\u5c31~~\u5f88\u5bb9\u6613~~\u60f3\u5230\u56fa\u5b9a\u5176\u4e2d\u4e00\u5200\u7684\u4f4d\u7f6e\u518d\u5229\u7528\u67d0\u79cd\u624b\u6bb5\u5feb\u901f\u5730\u6c42\u51fa\u7b2c\u4e8c\u5200\u7684\u4f4d\u7f6e\u3002\n\n\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u7ed3\u8bba\uff1a\u5047\u8bbe\u4e09\u4e2a\u5757\u7684\u5927\u5c0f\u5206\u522b\u4e3a$a$,$b$,$c$\u4e14$a$\u7684\u5927\u5c0f\u56fa\u5b9a\u65f6\uff0c$b$\u548c$c$\u8d8a\u63a5\u8fd1\u7b54\u6848\u8d8a\u4f18\u3002\n\n\u8bbe$siz[x]$\u8868\u793a$x$\u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n\u90a3\u4e48\u5c31\u6709\u4e00\u4e2a\u601d\u8def\uff1a\u679a\u4e3e\u5176\u4e2d\u4e00\u4e2a\u70b9$x$\uff0c$x$\u7684\u7236\u8fb9\u4f5c\u4e3a\u7b2c\u4e00\u5200\u7684\u4f4d\u7f6e\uff0c\u5728\u5269\u4e0b\u7684\u6811\u4e2d\u627e\u4e00\u4e2a\u8282\u70b9$y$\uff0c\u4f7f\u5f97$siz[y]$\u5c3d\u53ef\u80fd\u63a5\u8fd1$\\frac{N-siz[x]}{2}$\uff0c\u5728dfs\u8fc7\u7a0b\u4e2d\u628a\u6bcf\u4e2a\u8ba1\u7b97\u8fc7\u7684\u70b9\u7684$siz$\u503c\u6254\u8fdb\u4e00\u4e2aset\u91cc\u7136\u540e\u4e8c\u5206\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u4f46\u6211\u4eec\u5f88\u5feb\u53d1\u73b0\u4e0a\u9762\u8fd9\u4e2a\u505a\u6cd5\u5728$y$\u662f$x$\u7684\u7956\u5148\u8282\u70b9\u7684\u65f6\u5019\u4f1a\u51fa\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019$y$\u7684\u8d21\u732e\u4e0d\u662f$siz[y]$\u800c\u662f$siz[y]-siz[x]$\u3002\u5176\u5b9e\u4e5f\u5f88\u597d\u5904\u7406\uff0c\u5728dfs\u8fc7\u7a0b\u4e2d\u628a\u5f53\u524d\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u653e\u8fdb\u4e00\u4e2a\u6808\u91cc\uff0c\u5176\u4f59\u7684\u8282\u70b9\u653e\u8fdb\u53e6\u4e00\u4e2a\u6808\u91cc\u3002\u5728\u8ba1\u7b97\u653e\u7956\u5148\u8282\u70b9\u7684\u6808\u7edf\u4e00\u51cf\u4e00\u4e2a$siz[x]$\u5c31\u597d\u4e86\n\nps:multiset\u7684s.erase(x)\u64cd\u4f5c\u662f\u6e05\u9664**\u6240\u6709**\u6743\u503c\u7b49\u4e8ex\u7684\u5143\u7d20\uff0c\u8981\u662f\u53ea\u60f3\u5220\u4e00\u4e2a\u53ef\u4ee5\u91c7\u53d6s.erase(s.find(x))\u7684\u5199\u6cd5\n\n~~\u9a6c\u8702\u7565\u4e11\uff0c\u6c42\u8f7b\u55b7/kel~~\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<set>\nusing namespace std;\nconst int MAXN = 2e5 + 50;\nconst int INF = 0x3f3f3f3f;\nmultiset<int> s1, s2;\nmultiset<int>::iterator it;\nint N, siz[MAXN], ans = INF;\nstruct edge\n{\n    int nxt, to;\n} e[MAXN * 2];\nint head[MAXN], edgetot;\nint max(int a, int b, int c)\n{\n    return max(max(a, b), c);\n}\nint min(int a, int b, int c)\n{\n    return min(min(a, b), c);\n}\nvoid add(int x, int y)\n{\n    e[++edgetot].to = y;\n    e[edgetot].nxt = head[x];\n    head[x] = edgetot;\n}\nvoid pre(int x, int f)\n{\n    siz[x] = 1;\n    for (int i = head[x]; i; i = e[i].nxt)\n    {\n        int v = e[i].to;\n        if (v == f)\n            continue;\n        pre(v, x);\n        siz[x] += siz[v];\n    }\n}\nvoid upd(int x, int y)\n{\n    // cout << x << \" \" << y << endl;\n    int c = N - x - y;\n    int maxn = max(x, y, c);\n    int minn = min(x, y, c);\n    ans = min(maxn - minn, ans);\n}\nvoid dfs(int x, int f)\n{\n    if (!s1.empty())\n    {\n        it = s1.lower_bound((N - siz[x]) / 2 + siz[x]);\n        //\u56e0\u4e3a\u7956\u5148\u6808\u4e2d\u7684\u503c\u6bd4\u5b9e\u9645\u7684\u8d21\u732e\u503c\u5927siz[x]\n        //\u6240\u4ee5\u4e8c\u5206\u7684\u57fa\u51c6\u503c\u8981\u52a0\u4e0asiz[x]\n        if (it != s1.end())\n            upd(siz[x], *it - siz[x]);\n        if (it != s1.begin())\n        {\n            it--;\n            upd(siz[x], *it - siz[x]);\n        }\n    }\n    if (!s2.empty())\n    {\n        it = s2.lower_bound((N - siz[x]) / 2);\n        if (it != s2.end())\n            upd(siz[x], *it);\n        if (it != s2.begin())\n        {\n            it--;\n            upd(siz[x], *it);\n        }\n    }\n    if (x != 1)\n        s1.insert(siz[x]);\n    //\u8282\u70b9\u5165dfs\u6808\u65f6\u5c06\u6743\u503c\u52a0\u5165\u7956\u5148\u6808\u4e2d\n    for (int i = head[x]; i; i = e[i].nxt)\n    {\n        int v = e[i].to;\n        if (v == f)\n            continue;\n        dfs(v, x);\n    }\n    if (x != 1)\n    {\n        s1.erase(s1.find(siz[x]));\n        s2.insert(siz[x]);\n    }\n    //\u8282\u70b9\u51fadfs\u6808\u65f6\u8bb2\u6743\u503c\u4ece\u7956\u5148\u6808\u4e2d\u79fb\u9664\u52a0\u5165\u53e6\u4e00\u4e2a\u6808\u4e2d\n}\nint main()\n{\n    scanf(\"%d\", &N);\n    for (int i = 1; i <= N - 1; ++i)\n    {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        add(u, v);\n        add(v, u);\n    }\n    pre(1, 0);\n    dfs(1, 0);\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1614269424,
        "uid": 63743,
        "name": "DrBit",
        "ccfLevel": 6,
        "title": "P7165 [COCI2020-2021#1] Papri\u010dice  (set)"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0:\n\n\u5728\u82b1\u56ed\u5fd9\u788c\u4e86\u4e00\u4e2a\u65e9\u4e0a\u4e4b\u540e\u3002M \u5148\u751f\u51b3\u5b9a\u7528\u81ea\u5df1\u79cd\u7684\u5e72\u8fa3\u6912\u5956\u52b1\u4e00\u4e0b\u81ea\u5df1\u3002 \n\nM \u5148\u751f\u6709 $n$ \u9897\u8fa3\u6912\uff0c\u8fd9\u4e9b\u8fa3\u6912\u7531 $n-1$ \u6761\u7ebf\u94fe\u63a5\u800c\u6210\u3002\u4efb\u610f\u4e24\u9897\u8fa3\u6912\u90fd\u53ef\u4ee5\u901a\u8fc7\u82e5\u5e72\u6761\u7ebf\u8fde\u63a5\u8d77\u6765\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u8fd9 $n$ \u9897\u8fa3\u6912\u548c\u8fd9 $n-1$ \u6761\u7ebf\u8fde\u63a5\u6210\u4e86\u4e00\u68f5\u6811\u3002 \n\nM \u5148\u751f\u4eca\u5929\u8981\u5403\u4e09\u987f\u996d\uff0c\u56e0\u6b64\u4ed6\u9700\u8981\u526a\u65ad\u4e24\u6761\u7ebf\u3002\u83b7\u5f97\u4e09\u4e32\u5c0f\u7684\u8fa3\u6912\u3002\u6bcf\u4e00\u987f\u996d\u9700\u8981\u4f7f\u7528\u4e00\u4e32\u8fa3\u6912\u3002\n\n\u663e\u7136\uff0c\u4e00\u987f\u996d\u4e0d\u80fd\u592a\u8fa3\uff0c\u56e0\u6b64\u4ed6\u4f1a\u9009\u62e9\u4e00\u79cd\u5206\u5272\u65b9\u6cd5\uff0c\u4f7f\u5f97**\u8fa3\u6912\u6700\u591a\u7684\u8fa3\u6912\u4e32\u548c\u8fa3\u6912\u6700\u5c11\u7684\u8fa3\u6912\u4e32\u7684\u6570\u91cf\u5dee\u8ddd\u6700\u5c0f\u3002**\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u6c42\u51fa\u8fd9\u4e2a\u6700\u5c0f\u7684\u5dee\u8ddd\u3002\n\n### \u8f93\u5165\u63cf\u8ff0:\n\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 $n(1\\leq n\\leq 2\\times10^5)$\uff0c\u8868\u793a\u8fa3\u6912\u7684\u6570\u91cf\u3002\u8fa3\u6912\u4ece1\u5230 $n$ \u7f16\u53f7\u3002 \n\n\u63a5\u4e0b\u6765\u7684 $n-1$ \u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570 $x$ \u548c $y(1\\leq x,y\\leq n)$\u3002\u8868\u793a\u7531\u4e00\u6761\u8fde\u63a5\u7f16\u53f7\u4e3a $x$ \u7684\u8fa3\u6912\u548c\u7f16\u53f7\u4e3a $y$ \u7684\u8fa3\u6912\u7684\u7ebf\u3002\n\n### \u8f93\u51fa\u63cf\u8ff0:\n\n\u8f93\u51fa\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u6700\u5c0f\u7684\u6700\u5927\u8fa3\u6912\u4e32\u548c\u6700\u5c0f\u8fa3\u6912\u4e32\u7684\u6570\u91cf\u5dee\u8ddd\u3002\n\n### \u5206\u6790:\n\n#### 50Pts:\n\n\u66b4\u529b\u679a\u4e3e\u8981\u5220\u9664\u7684\u90a3\u4e24\u4e2a\u70b9\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e09\u4e2a\u90e8\u5206\u7684\u70b9\u7684\u6570\u91cf\u5e76\u66f4\u65b0 $ans$ \u7684\u503c\u5c31\u884c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$\u3002\n\n#### 100Pts:\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5207\u6389\u4e86\u70b9 $x$ \u4e0e\u5176\u7236\u4eb2\u8282\u70b9\u6240\u5f62\u6210\u7684\u7684\u8fb9\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u67e5\u627e\u4e0b\u4e00\u4e2a\u9700\u8981\u5220\u9664\u7684\u8fb9\u7a76\u7adf\u662f\u54ea\u4e00\u6761\u3002\n\n\u5206\u6210\u4e24\u79cd\u60c5\u51b5\u8003\u8651\uff1a\n\n1.\u5f53\u53e6\u4e00\u6761\u8fb9\u5728\u5176\u7956\u5148\u8282\u70b9\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5206\u51fa\u7684\u53e6\u4e00\u4e2a\u90e8\u5206\u7684\u8282\u70b9\u6570\u91cf\u6700\u597d\u4e3a $\\frac{n-size[x]}{2}$\u3002\u7531\u4e8e\u5176\u7956\u5148\u8282\u70b9 $y$ \u7684 $size_y$ \u5305\u542b\u4e86 $x$ \u7684\u5b50\u6811\u4e0b\u6240\u6709\u7684\u8282\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230 $x$ \u7684\u7956\u5148\u8282\u70b9\u4e2d\u5b50\u6811\u7684\u8282\u70b9\u6570\u6700\u9760\u8fd1 $\\frac{n+size[x]}{2}$ \u7684\u4e00\u4e2a\u70b9\u5e76\u8ba1\u7b97\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u6700\u7ec8\u7ed3\u679c\u5e76\u5c06\u5176\u4e0e $ans$ \u6bd4\u8f83\u5373\u53ef\u3002\n\n2.\u5f53\u53e6\u4e00\u6761\u8fb9\u5728\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u7684\u5b50\u6811\u4e0a\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u4e2d\u5b50\u6811\u7684\u8282\u70b9\u6570\u6700\u63a5\u8fd1 $\\frac{n-size[x]}{2}$ \u7684\u4e00\u4e2a\u70b9\u5e76\u8ba1\u7b97\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u6700\u7ec8\u7ed3\u679c\u5e76\u5c06\u5176\u4e0e $ans$ \u6bd4\u8f83\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u67e5\u627e\uff0c\u4f7f\u7528 multiset \u81ea\u5e26\u7684 lower_bound \u51fd\u6570\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2n )$\u3002\n\n### \u4ee3\u7801:\n\n```c++\n#include<bits/stdc++.h>\n#define van long long\n#define N 200010\n#define ywhin cin\n#define ywhout cout\nusing namespace std;\nvan n;vector<van> g[N];\nbool used[N];van siz[N],ans=1e18;\nmultiset<van> father,son;\nvoid init(van now)\n{\n//\tcout<<now<<endl;\n\tused[now]=1,siz[now]=1;van v;\n\tfor (int i=0;i<g[now].size();i++) if (!used[v=g[now][i]]) init(v),siz[now]+=siz[v];\n}//\u8ba1\u7b97\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u6570\nvoid DFS(van now)\n{\n\tused[now]=1;van v;\n\tmultiset<van>::iterator it;van siz2,last,tmpans;\n\tif (!father.empty())\n\t{\n\t\tit=father.lower_bound((n-siz[now])/2+siz[now]);\n\t\tif (it!=father.end())\n\t\t{\n\t\t\tsiz2=*it-siz[now];\n\t\t\tlast=n-siz2-siz[now];\n\t\t\ttmpans=max(siz[now],max(siz2,last))-min(siz[now],min(siz2,last));\n\t\t\tans=min(ans,tmpans);\t\n\t\t}\n\t\tif (it!=father.begin())\n\t\t{\n\t\t\tit--;\n\t\t\tsiz2=*it-siz[now];\n\t\t\tlast=n-siz2-siz[now];\n\t\t\ttmpans=max(siz[now],max(siz2,last))-min(siz[now],min(siz2,last));\n\t\t\tans=min(ans,tmpans);\t\n\t\t}\n\t}//\u7b2c\u4e00\u79cd\u60c5\u51b5\n\tif (!son.empty())\n\t{\n\t\tit=son.lower_bound((n-siz[now])/2);\n\t\tif (it!=son.end())\n\t\t{\n\t\t\tsiz2=*it;\n\t\t\tlast=n-siz2-siz[now];\n\t\t\ttmpans=max(siz[now],max(siz2,last))-min(siz[now],min(siz2,last));\n\t\t\tans=min(ans,tmpans);\t\n\t\t}\n\t\tif (it!=son.begin())\n\t\t{\n\t\t\tit--;\n\t\t\tsiz2=*it;\n\t\t\tlast=n-siz2-siz[now];\n\t\t\ttmpans=max(siz[now],max(siz2,last))-min(siz[now],min(siz2,last));\n\t\t\tans=min(ans,tmpans);\t\n\t\t}\n\t}//\u7b2c\u4e8c\u79cd\u60c5\u51b5\n\tif (now!=1) father.insert(siz[now]);//\u5c06\u81ea\u5df1\u52a0\u5230\u7956\u5148\u96c6\u5408\u4e2d\n\tfor (int i=0;i<g[now].size();i++) if (!used[v=g[now][i]]) DFS(v);\n\tif (now!=1) father.erase(father.find(siz[now]));//\u5c06\u81ea\u5df1\u79fb\u9664\u7956\u5148\u96c6\u5408\n\tif (now!=1) son.insert(siz[now]);//\u5c06\u81ea\u5df1\u79fb\u5165\u5df2\u8bbf\u95ee\u7684\u8282\u70b9\u7684\u96c6\u5408\n}\nint main()\n{\n\tywhin>>n;\n\tfor (int i=1;i<n;i++)\n\t{\n\t\tvan f,s;\n\t\tscanf(\"%lld %lld\",&f,&s);\n\t\tg[f].push_back(s);\n\t\tg[s].push_back(f);\n\t}//\u5efa\u56fe\n\tinit(1);\n\tmemset(used,0,sizeof used);\n\tDFS(1);\n\tywhout<<ans<<endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1636372077,
        "uid": 185758,
        "name": "LittleYang0531",
        "ccfLevel": 7,
        "title": "[COCI2020-2021#1] Papricice \u9898\u89e3"
    },
    {
        "content": "### \u9898\u9762\u63cf\u8ff0\n\n\u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u6c42\u5206\u6210\u4e09\u90e8\u5206\u540e\u7684\u6700\u5c0f\u5dee\u5f02\u503c\u3002\n\n### \u9898\u89e3\n\n\u66b4\u529b\uff1a\u6bcf\u6b21\u679a\u4e3e\u4e24\u4e2a\u70b9\uff0c\u5c06\u5176\u7236\u8fb9\u65ad\u6389\uff0c\u5982\u679c\u5b58\u5728\u7956\u5148\u5173\u7cfb\u5219\u7279\u5224\u4e00\u4e0b\uff0c\u590d\u6742\u5ea6 $O(n^2)$\uff0c\u9884\u8ba1 50pts\u3002\n\n\u6b63\u89e3\uff1adfs \u641c\u7d22\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u780d\u6389\u5b83\u7684\u7236\u8fb9\uff0c\u5269\u4e0b\u7684\u5c3d\u91cf\u7b49\u5206\uff08\u6613\u8bc1\uff09\u3002\n\n\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7528 multiset \u7ef4\u62a4\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5c06\u5176\u5230\u6839\u8282\u70b9\u7684\u94fe\u4e0a\u7684\u70b9\u653e\u5165 $s2$\uff0c\u518d\u5c06\u8fd9\u6761\u94fe\u5de6\u8fb9\u7684\u6240\u6709\u70b9\u653e\u5165 $s1$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9cwxqpbp.png)\n\n\u7136\u540e\u4ee4 $x= \\dfrac{n-siz[u]}{2}$\u3002 \u5728 $s1$ \u4e2d\u67e5\u627e\u6700\u9760\u8fd1 $x$ \u7684\u4e24\u4e2a\u6570\uff0c\u5728 $s2$ \u4e2d\u67e5\u627e\u6700\u9760\u8fd1 $x+siz[u]$ \u7684\u4e24\u4e2a\u6570\uff0c\u56db\u79cd\u60c5\u51b5\u8ba8\u8bba\u4e00\u4e0b\u3002\n\n\u7ec6\u8282\uff1adfs \u5230\u4e00\u4e2a\u70b9\u65f6\u5c06\u5176\u653e\u5165 $s1$\uff0c\u56de\u6eaf\u7684\u65f6\u5019\u5c06\u5176\u4ece $s1$ \u4e2d\u5220\u9664\uff0c\u5e76\u63d2\u5165\u5230 $s2$ \u4e2d\u3002\n\n\u9884\u8ba1 100pts\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 5;\nint n, siz[N], ans = 1e9;\nvector<int> adj[N];\nmultiset<int> s, s2;\nvoid dfs(int u, int lst) { //\u8ba1\u7b97\u5b50\u6811\u5927\u5c0f \n    siz[u] = 1;\n    for (int i = 0; i < adj[u].size(); ++i) {\n        int v = adj[u][i]; if (v == lst) continue;\n        dfs(v, u); siz[u] += siz[v];\n    }\n}\nint getcha(int x, int y, int z) {return max(abs(x - y), max(abs(x - z), abs(y - z)));}\nvoid dfs2(int u, int lst) {\n    if (u != 1) {\n        int tmp = n - siz[u], x;\n        x = tmp / 2;\n        multiset<int>::iterator it;\n        if (tmp > 1) {\n            it = s2.lower_bound(x + siz[u]);\n            if (it != s2.end()) ans = min(ans, getcha((*it) - siz[u], siz[u], n - (*it)));\n            it = s2.upper_bound(x + siz[u]);\n            if (it != s2.begin()) {\n                --it;\n                ans = min(ans, getcha((*it) - siz[u], siz[u], n - (*it)));\n            }\n            it = s.lower_bound(x);\n            if (it != s.end()) ans = min(ans, getcha((*it), siz[u], n - (*it) - siz[u]));\n            it = s.upper_bound(x);\n            if (it != s.begin()) {\n                --it;\n                ans = min(ans, getcha((*it), siz[u], n - (*it) - siz[u]));\n            }\n        }\n    }\n    if (u != 1) s2.insert(siz[u]); //\u70b9\u5230\u6839\u7684\u94fe \n    for (int i = 0; i < adj[u].size(); ++i) {\n        int v = adj[u][i]; if (v == lst) continue;\n        dfs2(v, u);\n    }\n    s.insert(siz[u]); //\u5df2\u7ecf\u904d\u5386\u5b8c\u4e86\u7684\u70b9 \n    if (u != 1) s2.erase(s2.find(siz[u]));\n}\nint main() {\n    ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n    cin >> n;\n    for (int i = 1; i < n; ++i) {\n        int u, v; cin >> u >> v;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    dfs(1, 0); dfs2(1, 0);\n    cout << ans << endl;\n    return 0;\n}\n```\n",
        "postTime": 1669005999,
        "uid": 173864,
        "name": "EstasTonne",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P7165 [COCI2020-2021#1] Papri\u010dice"
    },
    {
        "content": "## LP7165 [COCI2020-2021#1] Papri\u010dice\n\n\u5bb9\u6613\u60f3\u5230\u679a\u4e3e\u4e00\u6761\u8fb9\uff0c\u53bb\u627e\u53e6\u4e00\u6761\u8fb9\uff0c\u4f7f\u5f97\u53e6\u4e00\u4e2a\u8fb9\u5206\u51fa\u7684\u4e24\u4e2a\u90e8\u5206\u5c3d\u91cf\u5e73\u5747\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\n\n1.\u53e6\u4e00\u6761\u8fb9\u662f\u662f\u5f53\u524d\u8fb9\u7684\u7956\u5148\u3002\n\n2.\u4e0d\u662f\u3002\n\n\u5206\u5f00\u8003\u8651(\u679a\u4e3e\u7684\u662f $x$ \uff0c\u9700\u8981 $O(\\log)$ \u6216 $O(1)$ \u627e\u5230\u7684\u6700\u4f18\u89e3\u4e3a $y$ )\n\n(\u6ce8\u610f\u8fd9\u91cc $x$ \uff0c $y$ \u662f\u70b9\uff0c\u4ee3\u8868\u5207\u65ad\u8fde\u5411\u7942\u7236\u4eb2\u7684\u8fb9)\n\n- rt-y-x \uff1a\n    - $sz_y - sz_x \\approx n - sz_y $\n    - $2 \\cdot sz_y \\approx n + sz_x $\n    - $  sz_y \\approx \\frac{n + sz_x}{2} $\n\n- y-lca-x :\n    - $ n - sz_y - sz_x \\approx sz_y $\n    - $2 \\cdot sz_y \\approx n - sz_x $\n    - $  sz_y \\approx \\frac{n - sz_x}{2} $\n\n\u6240\u4ee5\u8003\u8651\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u60c5\u51b5\u628a\u6240\u6709\u5408\u6cd5\u7684\u70b9\u8fdb\u884c\u7ea6\u7b49\u53f7\u540e\u9762\u7684\u8fd0\u7b97\u4e4b\u540e\u6254\u5230 set \u91cc\u6bcf\u6b21\u67e5\u8be2\u3002 (lower_bound,lower_bound -1 )\n\n---\n\n$x$ \uff0c $y$ \u6709\u7956\u5b59\u5173\u7cfb\u662f\u5f88\u597d\u7ef4\u62a4\u3002\n\n\u8003\u8651\u201c\u52a8\u6001\u201d\u5b50\u6811\u8865\u5f88\u96be\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u8fd9\u4e2a\u6811\u7684 dfs \u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $x$ \u5c3d\u67e5 dfs \u5e8f\u5c0f\u4e8e\u7942\u7684\u70b9\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u626b\u63cf\u7ebf\u7684\u7ed3\u6784\u3002\n\n\u7136\u540e\u8f6c\u6362\u4e4b\u540e\u5c31\u76f8\u5bf9\u597d\u7ef4\u62a4\u4e86\uff1a\n\ndfs \u6808\u91cc\u7684\u70b9\u4f5c\u4e3a\u7b2c\u4e00\u79cd\u60c5\u51b5\u653e\u8fdb\u4e00\u4e2a set \u91cc(code \u4e2d\u7684 ant )\u3002\n\ndfs \u51fa\u6808\u540e\u7684\u70b9\u4f5c\u4e3a\u7b2c\u4e8c\u79cd\u60c5\u51b5\u653e\u8fdb\u53e6\u4e00\u4e2a set \u91cc(code \u4e2d\u7684 pre )\u3002\n\n---\n\n```cpp\nmultiset<int>ant,pre;\n#define dif(a,b,c) max(mabs((a)-(b)),max(mabs((b)-(c)),mabs((a)-(c)) ) )\nvoid dfs(int x,int fa){\n\t//rt-y-x :\n\tauto t=ant.lower_bound(n+sz[x]);//sz\u8868\u793a\u5b50\u6811\u5927\u5c0f\uff0c\u5df2\u6c42\u597d\u3002\n\tif(t!=ant.end())\n\t\tans=min(ans,dif(sz[x],*t/2-sz[x],n-*t/2));\n\tif(t!=ant.begin())t--,\n\t\tans=min(ans,dif(sz[x],*t/2-sz[x],n-*t/2));\n\t//y-lca-x :\n\tt=pre.lower_bound(n-sz[x]);\n\tif(t!=pre.end())\n\t\tans=min(ans,dif(sz[x],*t/2,n-sz[x]-*t/2));\n\tif(t!=pre.begin())t--,\n\t\tans=min(ans,dif(sz[x],*t/2,n-sz[x]-*t/2));\n\n\tant.insert(sz[x]*2);\n\trep(i,x,to)if(to!=fa)\n\t\tdfs(to,x);\n\tant.erase(ant.find(sz[x]*2)),pre.insert(sz[x]*2);\n}\nthen ans is the answer.\n```",
        "postTime": 1633951791,
        "uid": 157677,
        "name": "maruize",
        "ccfLevel": 0,
        "title": "LP7165 \u8fa3\u6912"
    }
]