[
    {
        "content": "[[CEOI2005] Depot Rearrangement](https://www.luogu.com.cn/problem/P7684)\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u4e00\u5bb6\u516c\u53f8\u7ecf\u8425\u7740 $n$ \u4e2a\u5e97\u94fa\uff0c\u6bcf\u4e2a\u5e97\u94fa\u90fd\u9500\u552e $m$ \u79cd\u4e0d\u540c\u7684\u4ea7\u54c1\u3002\u8be5\u516c\u53f8\u6709\u4e00\u4e2a\u5927\u578b\u4ed3\u5e93\uff0c\u4ea7\u54c1\u5728\u8fd0\u9001\u5230\u5546\u5e97\u4e4b\u524d\u5728\u90fd\u4f1a\u90a3\u91cc\u8fdb\u884c\u5305\u88c5\u3002\u6bcf\u5bb6\u5546\u5e97\u5c06\u4f1a\u6536\u5230\u76f8\u540c\u6570\u91cf\u7684\u6bcf\u79cd\u4ea7\u54c1\u3002\u56e0\u6b64\uff0c\u8be5\u516c\u53f8\u5c06\u4e00\u5b9a\u6570\u91cf\u7684\u76f8\u5e94\u4ea7\u54c1\u5206\u522b\u5305\u88c5\u5230\u4e00\u4e2a\u96c6\u88c5\u7bb1\u4e2d\uff0c\u5e76\u7528\u4ea7\u54c1\u6807\u8bc6\u7b26\u6807\u8bb0\u8be5\u96c6\u88c5\u7bb1\u3002\u4ea7\u54c1\u7531 $1$ \u5230 $m$ \u7684\u6570\u5b57\u6807\u8bc6\u3002\n\n\u56e0\u6b64\uff0c\u5728\u5305\u88c5\u7ed3\u675f\u540e\uff0c\u4ed3\u5e93\u4e2d\u5c06\u4f1a\u6709 $n\\cdot m$ \u4e2a\u96c6\u88c5\u7bb1\uff0c\u5e76\u4e14\u6b63\u597d $n$ \u4e2a\u96c6\u88c5\u7bb1\u8d34\u6709\u6bcf\u79cd\u4ea7\u54c1\u7684\u5bf9\u5e94\u6807\u7b7e\u3002\u7531\u4e8e\u8be5\u4ed3\u5e93\u4f4d\u4e8e\u4e00\u4e2a\u72ed\u7a84\u7684\u5efa\u7b51\u7269\u5185\uff0c\u6240\u4ee5\u96c6\u88c5\u7bb1\u6392\u6210\u4e86\u4e00\u6392\u3002\u4f46\u4e3a\u4e86\u52a0\u5feb\u914d\u9001\u901f\u5ea6\uff0c\u4ed3\u5e93\u7ecf\u7406\u60f3\u8981\u91cd\u65b0\u6392\u5217\u96c6\u88c5\u7bb1\u3002\u7531\u4e8e\u5c06\u4ea7\u54c1\u914d\u9001\u5230\u5546\u5e97\u662f\u901a\u8fc7\u5411\u6bcf\u4e2a\u5546\u5e97\u53d1\u51fa\u4e00\u8f86\u5361\u8f66\u6765\u5b9e\u73b0\u7684\uff0c\u5e76\u4e14\u6bcf\u8f86\u5361\u8f66\u8fd0\u8f7d\u6bcf\u79cd\u4ea7\u54c1\u7684\u4e00\u4e2a\u96c6\u88c5\u7bb1\uff0c\u5176\u5408\u9002\u7684\u5b89\u6392\u5982\u4e0b\u3002\u8be5\u884c\u6700\u524d\u90e8\u5206 $m$ \u4e2a\u96c6\u88c5\u7bb1\u5fc5\u987b\u8d34\u6709\u4e0d\u540c\u7684\u4ea7\u54c1\u6807\u7b7e\uff0c\u8be5\u884c\u7684\u7b2c\u4e8c\u90e8\u5206 $m$ \u4e2a\u96c6\u88c5\u7bb1\u5fc5\u987b\u8d34\u6709\u4e0d\u540c\u7684\u4ea7\u54c1\u6807\u7b7e\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\n\n\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u8fd9\u4e00\u884c\u7684\u5c3d\u5934\u53ea\u6709\u4e00\u4e2a\u7a7a\u95f2\u7684\u5730\u65b9\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u96c6\u88c5\u7bb1\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u901a\u8fc7\u4f9d\u6b21\u62ff\u8d77\u96c6\u88c5\u7bb1\u5e76\u5c06\u5176\u79fb\u52a8\u5230\u7a7a\u95f2\u4f4d\u7f6e\u6765\u8fdb\u884c\u91cd\u65b0\u6392\u5217\u3002\u91cd\u65b0\u6392\u5217\u540e\uff0c\u7a7a\u95f2\u4f4d\u7f6e\u4e5f\u5fc5\u987b\u5728\u884c\u7684\u672b\u5c3e\u3002\u76ee\u6807\u662f\u901a\u8fc7\u6700\u5c11\u7684\u79fb\u52a8\u4ee5\u5b9e\u73b0\u6240\u9700\u7684\u91cd\u65b0\u6392\u5217\u3002\n\n\u8ba1\u7b97\u9700\u8981\u6700\u5c11\u79fb\u52a8\u591a\u5c11\u6b21\u4f7f\u5f97\u8fbe\u6210\u76ee\u6807\u91cd\u6392\uff0c\u8f93\u51fa\u6700\u5c11\u7684\u79fb\u52a8\u6b21\u6570\u548c\u5177\u4f53\u7684\u64cd\u4f5c\u65b9\u6848\uff0c\u6bcf\u4e00\u6b65\u64cd\u4f5c\u662f\u5f62\u5982 $(x,y)$ \u7684\u4e8c\u5143\u7ec4\uff0c\u8868\u793a\u5c06 $x$ \u4f4d\u7f6e\u4e0a\u7684\u96c6\u88c5\u7bb1\u79fb\u52a8\u5230\u4f4d\u7f6e $y$ \u4e0a\u3002\n\n\u6837\u4f8b\u8f93\u5165\uff1a\n\n```c++\n5  6\n4 1 3 1 6 5 2 3 2 3 5 6 2 1 4 5 6 4 1 3 2 4 5 5 1 2 3 4 6 6\n```\n\n\u6837\u4f8b\u8f93\u51fa\uff1a\n\n```c++\n8\n9 31\n18 9\n10 18 \n4 10\n31 4\n30 31\n24 30\n31 24\n```\n\n## \u601d\u8def\u5206\u6790\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u90e8\u5206\u7684\u96c6\u88c5\u7bb1\uff0c\u540c\u79cd\u7c7b\u53ea\u51fa\u73b0\u8fc7\u4e00\u6b21\u7684\u96c6\u88c5\u7bb1\u6211\u4eec\u662f\u4e0d\u4f1a\u52a8\u5b83\u7684\uff0c\u6211\u4eec\u4f1a\u79fb\u52a8\u7684\u662f\u540c\u79cd\u7c7b\u51fa\u73b0\u6b21\u6570\u5927\u4e8e $1$ \u7684\u96c6\u88c5\u7bb1\u3002\n\n\u8bbe $t_{i,j} $ \u8868\u793a $[(i-1)\\cdot m+1,i\\cdot m]$ \u533a\u95f4\u5185\uff0c\u79cd\u7c7b\u4e3a $j$  \u7684\u96c6\u88c5\u7bb1\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u8003\u8651\u6784\u9020\u4e8c\u5206\u56fe\uff0c\u5de6\u8fb9\u70b9\u96c6\u4e3a $\\{p_1,p_2,p_3\\cdots,p_n\\}$ \u8868\u793a\u7b2c $i$ \u6bb5\u957f\u5ea6\u4e3a $m$ \u7684\u533a\u95f4\uff0c\u53f3\u8fb9\u70b9\u96c6\u4e3a $\\{ q_1,q_2,q_3,\\cdots q_m\\}$ \u8868\u793a\u96c6\u88c5\u7bb1\u7684\u79cd\u7c7b\u3002\n\n\u82e5 $t_{i,j}>1 $\uff0c\u5219\u5728\u56fe\u4e2d\u4ece $p_i$ \u5411 $q_j$ \u8fde\u63a5 $t_{i,j}-1$ \u6761\u6709\u5411\u8fb9\u3002\n\n\u82e5 $t_{i,j}=0$\uff0c\u5219\u5728\u56fe\u4e2d\u4ece $q_j$ \u5411 $p_i$ \u8fde\u63a5\u4e00\u6761\u6709\u5411\u8fb9\u3002\n\n\u5bf9\u6837\u4f8b\u5efa\u7acb\u4e8c\u5206\u56fe\n\n![](https://z3.ax1x.com/2021/11/11/I0mv1e.png)\n\n\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u6cd5\u6784\u9020\u51fa\u7684\u4e8c\u5206\u56fe\uff0c\u5176\u4e2d\u4e00\u6761\u4ece\u5de6\u5230\u53f3\u518d\u5230\u5de6\u7684\u8def\u5f84\u4e3a $p_i\\to q_j \\to p_k$\uff0c\u8868\u793a\u5c06 $p_i$ \u4e2d\u79cd\u7c7b\u4e3a $q_j$ \u7684\u96c6\u88c5\u7bb1\u653e\u5230 $p_k$ \u7684\u7a7a\u4f4d\u4e2d\u3002\u6bcf\u6b21\u88ab\u653e\u5165\u96c6\u88c5\u7bb1\u7684\u4e00\u6bb5\u533a\u95f4\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1\u5b58\u5728\u4e00\u4e2a\u7a7a\u4f4d\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u64cd\u4f5c\u6b21\u6570\u6700\u5c0f\uff0c\u6211\u4eec\u8981\u5c3d\u53ef\u80fd\u5730\u8ba9 $n\\cdot m+1$ \u53d8\u6210\u7a7a\u5730\u7684\u6b21\u6570\u6700\u5c0f\u3002\n\n\u6bcf\u5f53\u6211\u4eec\u5728\u56fe\u4e2d\u8d70\u5b8c\u4e00\u6761\u56de\u8def\u65f6\uff0c$n\\cdot m+1$ \u4f1a\u4e3a\u7a7a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8ba9\u627e\u5230\u7684\u56de\u8def\u6761\u6570\u5c3d\u53ef\u80fd\u5730\u5c11\u3002\u4e5f\u5c31\u662f\u5bf9\u4e8e\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6781\u5927\u8054\u901a\u5b50\u56fe\u6c42\u4e00\u904d\u6b27\u62c9\u56de\u8def\u3002\u7136\u540e\u6309\u7167\u6b27\u62c9\u56de\u8def\u6784\u9020\u65b9\u6848\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u56fe\u4e2d\u6bcf\u4e2a\u5b50\u56fe\u4e00\u5b9a\u5b58\u5728\u6b27\u62c9\u56de\u8def\u3002\u56e0\u4e3a\u6211\u4eec\u5efa\u8fb9\u662f\u6839\u636e $t_{i,j}$  \u6765\u5efa\u8fb9\u7684\uff0c\u6700\u7ec8\u5bf9\u96c6\u88c5\u7bb1\u5b89\u6392\u597d\u4f4d\u7f6e\u540e\uff0c\u6bcf\u4e00\u90e8\u5206\u4e00\u5b9a\u90fd\u6709\u6bcf\u79cd\u96c6\u88c5\u7bb1\u5404 $1$ \u4e2a\uff0c\u6240\u4ee5\u521d\u59cb\u72b6\u6001\uff0c\u6bcf\u591a\u4e00\u4e2a\u76f8\u540c\u7684\u79cd\u7c7b\u7684\u96c6\u88c5\u7bb1\uff0c\u5c31\u4f1a\u5c11\u4e00\u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u96c6\u88c5\u7bb1\u3002\u4e5f\u5c31\u662f\u6bcf\u8fde\u63a5\u4e00\u6761 $p_i\\to q_j$ \u7684\u8fb9\u540c\u65f6\u4e5f\u4f1a\u4f34\u968f\u7740\u8fde\u63a5\u4e00\u6761 $q_k\\to p_i$ \u7684\u8fb9\u3002\u6709\u5411\u56fe\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u76f8\u7b49\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u6b27\u62c9\u56de\u8def\u3002\n\n\u5177\u4f53\u7684\u6784\u9020\u65b9\u6848\u4e3a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6781\u5927\u8054\u901a\u5b50\u56fe\u4efb\u9009\u4e00\u4e2a\u70b9\u5f53\u8d77\u70b9\uff0c\u6c42\u6b27\u62c9\u56de\u8def\u3002\n\n\u8bb0\u5f55\u7ecf\u8fc7\u7684\u8fb9\u7684\u7f16\u53f7\u5e8f\u5217\uff0c\u5012\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u6bcf\u9047\u5230 $p_i\\to q_j$ \u7684\u8fb9\u5c31\u628a $q_j$ \u79fb\u5230\u7a7a\u5730\u4e0a\uff0c\u540c\u65f6\u66f4\u65b0\u7a7a\u5730\u7684\u4f4d\u7f6e\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u5012\u5e8f\u679a\u4e3e\u5e8f\u5217\uff1f\u6bcf\u6b21\u7684\u79fb\u52a8\u76f8\u5f53\u4e8e\u5728\u56fe\u4e2d\u7ecf\u8fc7 $p_i\\to q_j\\to p_k$\uff0c\u6bcf\u6b21\u79fb\u52a8\u90fd\u8981\u4fdd\u8bc1 $q_j$ \u60f3\u79fb\u52a8\u5230\u7684\u4f4d\u7f6e $p_k$ \u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5012\u5e8f\u679a\u4e3e\u5c31\u53ef\u4ee5\u4fdd\u8bc1 $p_k$ \u4e00\u5b9a\u662f\u7a7a\u7684\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u79fb\u52a8 $p_i$ \u4e2d\u7684\u96c6\u88c5\u7bb1\u65f6\uff0c\u4e0a\u4e00\u6b65\u4e00\u5b9a\u662f\u79fb\u52a8\u4e86 $p_k$ \u4e2d\u7684\u96c6\u88c5\u7bb1\u3002 \u7b2c\u4e00\u6b21\u79fb\u52a8\u96c6\u88c5\u7bb1\uff0c\u5c06\u96c6\u88c5\u7bb1\u79fb\u52a8\u5230 $n\\cdot m+1$ \u4e0a\u3002\u6700\u540e\u518d\u5c06 $n\\cdot m+1$ \u4f4d\u7f6e\u4e0a\u7684\u96c6\u88c5\u7bb1\u79fb\u52a8\u5230\u73b0\u5728\u7684\u7a7a\u5730\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5177\u6709 $E$ \u6761\u8fb9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\uff0c\u6240\u9700\u7684\u64cd\u4f5c\u6b21\u6570\u4e3a $\\frac{E}{2}+1$\u3002 \n\n\u7a7a\u95f4\u53ea\u6709 $64MB$\uff0c\u5b9e\u73b0\u65f6\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u96c6\u88c5\u7bb1\u4f4d\u7f6e\u7684\u6570\u7ec4\uff0c\u8981\u7528 vector \u6765\u5b58\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```c++\n#include<bits/stdc++.h>\n#define int long long\n\nusing namespace std;\n\ninline int read() {\n    int f = 1;\n    int res = 0;\n    char ch = getchar();\n    while (ch < '0' || ch > '9') {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9') {\n        res = res * 10 + ch - '0';\n        ch = getchar();\n    }\n    return res * f;\n}\n\nconst int maxn = 410;\n\nint n, m;\nvector < int > pos[maxn][maxn];//\u7528 vector \u5b9e\u73b0\uff0c\u4e0d\u7136\u4f1a MLE\nint tot[maxn][maxn];\n\nstruct node {\n    int from;\n    int to;\n    int next;\n}\nedge[maxn * maxn * 2];\nint head[maxn << 1];\nint cnt;\n\nvoid add(int u, int v) {\n    edge[++cnt].to = v;\n    edge[cnt].from = u;\n    edge[cnt].next = head[u];\n    head[u] = cnt;\n}\n\nint que[maxn * maxn * 2], tag;\nbool vis[maxn * maxn * 2];\n\nvoid dfs(int now) {\n    for (int i = head[now]; i; i = edge[i].next) {\n        if (vis[i])\n            continue;\n        int v = edge[i].to;\n        vis[i] = true;\n        dfs(v);\n        que[++tag] = i;\n    }\n}\n\nstruct ANS {\n    int x;\n    int y;\n}\nans[maxn * maxn + maxn];\nint len;\n\nsigned main() {\n    n = read(), m = read();\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            int x = read();\n            ++tot[i][x];\n            pos[i][x].push_back((i - 1) * m + j);\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            for (int k = 1; k < tot[i][j]; k++) {\n                add(i, j + n);\n            }\n            if (tot[i][j] < 1)\n                add(j + n, i);\n        }\n    }\n    for (int i = n + 1; i <= n + m; i++) {\n        tag = 0;\n        dfs(i);\n        int to = n * m + 1;\n        for (int i = 1; i <= tag; i++) {\n            int u = edge[que[i]].from;\n            int v = edge[que[i]].to;\n            if (u <= n) {\n                ans[++len].x = pos[u][v - n][--tot[u][v - n]];\n                ans[len].y = to;\n                to = ans[len].x;\n            }\n        }\n        if (tag) {\n            ans[++len].x = n * m + 1;\n            ans[len].y = to;\n        }\n    }\n    printf(\"%lld\\n\", len);\n    for (int i = 1; i <= len; i++) {\n        printf(\"%lld %lld\\n\", ans[i].x, ans[i].y);\n    }\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1636636754,
        "uid": 225607,
        "name": "hellhell",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 [CEOI2005] Depot Rearrangement"
    }
]