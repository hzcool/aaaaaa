[
    {
        "content": "(\u4e0d\u9700\u8981\u5229\u7528\u4e8c\u5206\u56fe\u5339\u914d\u76f8\u5173\u5b9a\u7406)\n\n\n## \u5206\u6790\uff1a\n\n\u6211\u4eec\u9996\u5148\u5c06\u539f\u56fe\u7528n\u6761\u8def\u5f84\u8986\u76d6\uff0c\u6bcf\u6761\u8fb9\u53ea\u7ecf\u8fc7\u6bcf\u4e2a\u8282\u70b9\u3002\n\n\u73b0\u5728\u5c3d\u91cf\u5408\u5e76\u66f4\u591a\u7684\u8def\u5f84(\u5373\u5c06\u4e24\u4e2a\u8def\u5f84\u901a\u8fc7\u4e00\u6761\u8fb9\u9996\u5c3e\u76f8\u8fde)\u3002\n\n\u53ef\u4ee5\u77e5\u9053\uff0c\u6bcf\u5408\u5e76\u4e24\u6761\u8def\u5f84\uff0c\u56fe\u4e2d\u7684\u8def\u5f84\u8986\u76d6\u6570\u5c31\u4f1a\u51cf\u5c111\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5229\u7528\u7f51\u7edc\u6d41\u5408\u5e76\u76f8\u5173\u7684\u8def\u5f84\u5373\u53ef\u3002\n\n\n## \u7b54\u6848\u6c42\u89e3\uff1a\n\n\u9996\u5148\u5c06\u6bcf\u4e2a\u8282\u70b9\u62c6\u6210(Xi,Yi)\u4e24\u4e2a\u8282\u70b9\uff0c\u5efa\u7acb\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u5206\u522b\u8fde\u63a5(S,Xi)\u548c(Yi,T)\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u539f\u56fe\u4e2d\u7684\u8fb9\uff0c\u5efa\u7acb\u8fb9(Xi,Yi)\u5373\u53ef\u3002\n\n\u8fd9\u6837\u6bcf\u4e00\u6761\u589e\u5e7f\u8def\u90fd\u53ea\u4f1a\u7ecf\u8fc72\u4e2a\u8282\u70b9(Xa,Yb)\uff0c\u5bf9\u5e94\u5408\u5e76\u7684\u4e24\u4e2a\u8282\u70b9\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u4e0e\u4e00\u4e2a\u8282\u70b9\u5408\u5e76\uff0c\u6545\u8fb9(S,Xi)\u548c(Yi,T)\u5bb9\u91cf\u4e3a1\u3002\n\n\u6b64\u65f6\u7684\u6700\u5927\u6d41\u5bf9\u5e94\u7684\u5c31\u662f\u6700\u591a\u53ef\u4ee5\u5408\u5e76\u7684\u8def\u5f84\u6570\u3002\n\n\n## \u65b9\u6848\u8f93\u51fa\uff1a\n\n\u7531\u4e8e\u672c\u4eba\u6ca1\u6709\u60f3\u5230\u4ec0\u4e48\u597d\u7684\u8f93\u51fa\u65b9\u6cd5\uff0c\u6545\u53ea\u80fd\u6bd4\u8f83\u8822\u5730\u6839\u636e\u7f51\u7edc\u6d41\u7684\u6b8b\u4f59\u6d41\u91cf\u6784\u9020\u6bcf\u4e00\u6761\u8def\u5f84(\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8def\u5f84\u8d77\u70b9)\uff0c\u7136\u540e\u4ece\u8d77\u70b9\u9012\u5f52\u8f93\u51fa\u3002\n\n\n``cpp\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#define MX 20001\n#define S 0\n#define T ((n<<1)+1)\n#define oo 12312312\nusing namespace std;\ntypedef struct edge_t\n{\n    int u,v,c;\n}edge;\nedge e[MX];\nint fst[MX],nxt[MX],lnum;\nint n,m;\nvoid addeg(int nu,int nv,int nc)\n{\n    nxt[++lnum]=fst[nu];\n    fst[nu]=lnum;\n    e[lnum]=(edge){nu,nv,nc};\n}\nvoid input()\n{\n    int a,b;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        addeg(a,n+b,1);\n        addeg(n+b,a,0);\n    }\n    for(int i=1;i<=n;i++)addeg(S,i,1),addeg(i,S,0);\n    for(int i=n+1;i<=n<<1;i++)addeg(i,T,1),addeg(T,i,0);\n}\nvoid init()\n{\n    memset(fst,0xff,sizeof(fst));\n    lnum=-1;\n}\nint dep[MX],q[MX];\nint bfs(int frm,int to)\n{\n    int x,y,h=0,t=1;\n    memset(dep,0xff,sizeof(dep));\n    q[++h]=frm;\n    dep[frm]=0;\n    while(h>=t)\n    {\n        x=q[t++];\n        for(int i=fst[x];i!=-1;i=nxt[i])\n        {\n            y=e[i].v;\n            if(e[i].c&&dep[y]==-1)\n            {\n                dep[y]=dep[x]+1;\n                q[++h]=y;\n            }\n        }\n    }\n    return (dep[to]>=0);\n}\nint dinic(int to,int x,int mn)\n{\n    if(x==to)return mn;\n    int a,now=0,y;\n    for(int i=fst[x];i!=-1;i=nxt[i])\n    {\n        y=e[i].v;\n        if(e[i].c&&dep[y]==dep[x]+1)\n        {\n            a=dinic(to,y,min(mn-now,e[i].c));\n            now+=a;\n            e[i].c-=a;\n            e[i^1].c+=a;\n            if(now==mn)break;\n        }\n    }\n    return now;\n}\nvoid output(int x)\n{\n    printf(\"%d \",x);\n    for(int i=fst[x];i!=-1;i=nxt[i])\n        if(e[i].c==0&&e[i].v>n)\n            output(e[i].v-n);\n}\nint fa[MX];\nint findfa(int x){return x==fa[x]?x:fa[x]=findfa(fa[x]);}\nvoid work()\n{\n    int tot=0;\n    while(bfs(S,T))tot+=dinic(T,S,+oo);\n    for(int i=1;i<=n;i++)fa[i]=i;\n    for(int i=0;i<=lnum;i++)\n        if(e[i].u>=1&&e[i].u<=n&&e[i].v>n&&e[i].v<T&&e[i].c==0)\n            fa[findfa(e[i].v-n)]=findfa(e[i].u);\n    for(int i=1;i<=n;i++)\n        if(findfa(i)==i)\n            output(i),putchar('\\n');\n    printf(\"%d\\n\",n-tot);\n}\nint main()\n{\n    init();\n    input();\n    work();\n    return 0;\n}\n```\n```cpp",
        "postTime": 1511578434,
        "uid": 41155,
        "name": "totorato",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "# \u5148\u5410\u69fd\u4e00\u4e0b\n~~\u89c9\u5f97\u8fd9\u9053\u9898\u76ee\u8fd8\u4e0d\u9519\uff0c\u5f88\u6709\u4ef7\u503c\uff0c\u5c31\u60f3\u5199\u4e00\u7bc7\u9898\u89e3~~\n\n\u55ef\uff0c\u5176\u5b9e\u6211\u7684\u601d\u60f3\u548c\u697c\u4e0b\u7684\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u8f93\u51fa\u8def\u5f84\u7684\u65b9\u6cd5\u6709\u5f88\u5927\u4e0d\u540c\uff0c\u5f53\u7136\u8fd9\u4e2a\u4e5f\u5e94\u4eba\u800c\u5f02\u4e86\uff0c\u4e0d\u540c\u7684\u4eba\u6709\u4e0d\u540c\u7684\u7231\u597d\u561b\uff0c\u4f46\u8fd8\u662f\u5e0c\u671b\u9898\u89e3\u53ef\u4ee5\u901a\u8fc7\uff0c\u5728luogu\u4e0a\u7559\u4e0b\u81ea\u5df1\u7684\u75d5\u8ff9 @w@ \u8c22\u8c22\n\n# \u5f00\u59cb\u8bb2\n1. \u9996\u5148\u9700\u8981\u770b\u61c2\u9898\u76ee(~~\u6ca1\u9519\uff0c\u6211\u770b\u4e86\u5f88\u4e45~~)\uff0c\u662f\u8ba9\u5f88\u591a\u6761\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\u53bb\u8986\u76d6\u6240\u7ed9\u7684\u56fe\uff0c\u95ee\u6700\u5c11\u8981\u591a\u5c11\u6761\u5e76\u8f93\u51fa\u5b83\u4eec\u3002\n\n2. \u7136\u540e\u9700\u8981\u8bc1\u660e\u4e00\u4e2a\u4e1c\u897f\uff1a\u6211\u4eec\u4e00\u5f00\u59cb\u628a\u6bcf\u4e2a\u70b9\u770b\u505a\u4e00\u6761\u8def\u5f84\uff0c\u8003\u8651\u8def\u5f84\u5408\u5e76\u7684\u95ee\u9898\uff0c\u6bcf\u4e24\u6761\u8def\u5f84\u9996\u5c3e\u76f8\u8fde\u63a5\u8d77\u6765\u662f\u4e0d\u662f\u8def\u5f84\u6570\u5c31\u4f1a\u51cf\u4e00\uff1f(~~\u663e\u7136~~)\u3002\u800c\u6211\u4eec\u4f1a\u8981\u5c3d\u91cf\u51cf\u5c11\u5b83\u4eec\u7684\u6570\u91cf\u3002\n\n3. \u60f3\u4e00\u4e0b\u600e\u4e48\u53ef\u4ee5\u6c42\u51fa**\u70b9\u53ef\u4ee5\u8fde\u8d77\u6765\u7684\u8def\u5f84**\u7684\u6570\u91cf\u6700\u5c0f\u503c\uff0c\u6839\u636e\u4e0a\u97622\u63d0\u5230\u7684\u90a3\u4e00\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u628a\u53ef\u4ee5\u5408\u5e76\u7684\u70b9\u6570\u5168\u90e8\u6c42\u51fa\u6765\uff0c\u518d\u62ff\u603b\u70b9\u6570\u53bb\u51cf\uff0c\u662f\u4e0d\u662f\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848\u4e86\uff1f\n\n **\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u6c42\u54ea\u4e9b\u70b9\u53ef\u4ee5\u201c\u5408\u5e76\u201d**\u3002\u7136\u540e\u518d\u5f80\u540e\u770b\uff0c~~\u55ef\uff0c\u6807\u7b7e\u662f\u7f51\u7edc\u6d41~~\uff0c\u5c31\u8003\u8651\u5efa\u56fe\u8dd1\u5427\u3002\n\n4. \u6709\u4e86\u4e0a\u9762\u7684\u57fa\u7840\u5e94\u8be5\u5c31\u4e0d\u96be\u60f3\u4e86\uff0c**\u628a\u6bcf\u4e2a\u70b9\u5206\u5f00\u6210\u4e24\u4e2a**\uff0cX[i]\u4e0e\u6e90\u70b9S\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0cY[i]\u4e0e\u6c47\u70b9T\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9(**\u6bcf\u4e2a\u70b9\u53ea\u80fd\u5728\u4e00\u6761\u8def\u5f84\u4e0a**)\uff0c\u7136\u540e\u6570\u636e\u8bfb\u5165\u7684\u8fb9**X[i] --1--> Y[j]**\u8fd9\u4e2a\u6bcb\u5eb8\u7f6e\u7591\u4e86\u5427\u3002**\u6700\u540e\u8dd1Dinic\u6c42\u6700\u5927\u6d41\u5c31\u884c\u4e86\u5c31\u884c\u4e86**(\u6211\u5efa\u8bae\u628a\u6837\u4f8b\u7684\u56fe\u6839\u636e\u6211\u8bb2\u7684\u753b\u51fa\u6765\u5bb9\u6613\u7406\u89e3\uff0c~~\u5176\u5b9e\u4e0d\u96be~~)\n\n4. \u6700\u540e\u8003\u8651\u600e\u4e48\u8f93\u51fa\u8def\u5f84\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5728Dinic\u7684DFS\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u6d41\u5411\u7684\u90a3\u4e2a\u70b9(\u5c31\u662f\u4f1a\u5728\u539f\u56fe\u4e0a\u76f8\u8fde\u7684\u70b9\uff0c\u6807\u8bb0\u4e00\u4e0b\u6bcf\u4e00\u6761\u201c\u8f93\u51fa\u8fb9\u201d\u7684\u5f00\u5934\u4f4d\u7f6e\uff0c\u66b4\u529b\u8df3\u7740\u8f93\u51fa\u5c31ok)\n\n5. \u5b9e\u5728\u4e0d\u884c\u8fd8\u662f\u4e00\u8fb9\u770b\u4ee3\u7801\u5427\n# code\nPS:\u4e2a\u4eba\u8ba4\u4e3a~~\u81ea\u5df1\u7684\u4ee3\u7801\u98ce\u683c\u8fd8\u662f\u6613\u61c2\u7684~~\n\n\n```\n\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<iomanip>\n#include<algorithm>\n#include<ctime>\n#include<queue>\n#include<stack>\n#include<vector>\n#define rg register\n#define il inline\n#define lst long long\n#define ldb long double\n#define N 550\n#define M 100050\nusing namespace std;\nconst int Inf=1e9;\nil int read()\n{\n    rg int s=0,m=0;rg char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')m=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\n    return m?-s:s;\n}\n\nint n,m,S,T,ans;\nint to[N],tag[N],dep[N];\nint hd[N],cur[N],cnt=1;\nstruct EDGE{int to,nxt,c;}ljl[M<<1];\nil void add(rg int p,rg int q,rg int o)\n{\n    ljl[++cnt]=(EDGE){q,hd[p],o},hd[p]=cnt;\n    ljl[++cnt]=(EDGE){p,hd[q],0},hd[q]=cnt;\n}\n\nqueue<int> Q;\nil bool BFS()\n{\n    for(rg int i=S;i<=T;++i)dep[i]=0;\n    while(!Q.empty())Q.pop();\n    Q.push(S),dep[S]=1;\n    while(!Q.empty())\n    {\n        rg int now=Q.front();Q.pop();\n        for(rg int i=hd[now];i;i=ljl[i].nxt)\n        {\n            rg int qw=ljl[i].to;\n            if(!dep[qw]&&ljl[i].c>0)\n            {\n                dep[qw]=dep[now]+1;\n                Q.push(qw);\n            }\n        }\n    }\n    return dep[T];\n}\n\nint dfs(rg int now,rg int aim,rg int flow)\n{\n    if(now==aim)return flow;\n    for(rg int &i=cur[now];i;i=ljl[i].nxt)\n    {\n        rg int qw=ljl[i].to;\n        if(ljl[i].c>0&&dep[qw]==dep[now]+1)\n        {\n            rg int kk=dfs(qw,aim,min(flow,ljl[i].c));\n            if(kk>0)\n            {\n                to[now]=qw;//\u6807\u8bb0\u4e00\u4e0b\uff0c\u65b9\u4fbf\u5224\u65ad\n                if(now!=S)tag[qw-n]=1;//\u8bb0\u5f55to[]\n                ljl[i].c-=kk,ljl[i^1].c+=kk;\n                return kk;\n            }\n        }\n    }\n    return 0;\n}\n\nil int Dinic()\n{\n    rg int ans=0;\n    while(BFS())\n    {\n        for(rg int i=S;i<=T;++i)cur[i]=hd[i];\n        while(int kk=dfs(S,T,Inf))ans+=kk;\n    }\n    //\u4ee5\u4e0a\u4e3a\u6a21\u677f\uff0c\u5c31\u4e0d\u9700\u8981\u89e3\u91ca\u4e86\u5427\n    for(rg int i=1;i<=n;++i)\n        if(!tag[i])//\u6ca1\u6807\u8bb0\u5c31\u662f\u5f00\u59cb\u7684\u5730\u65b9\n        {\n            rg int now=i;\n            printf(\"%d \",now);\n            while(to[now]&&to[now]!=T)//\u66b4\u529b\u8df3\u5e76\u8f93\u51fa\n            {\n                printf(\"%d \",to[now]-n);\n                now=to[now]-n;\n            }\n            puts(\"\");\n        }\n    return ans;\n}\n\nint main()\n{\n    n=read(),m=read();\n    S=0,T=2*n+1;\n    for(rg int i=1;i<=n;++i)\n        add(S,i,1),add(i+n,T,1);//\u89c13\n    for(rg int i=1;i<=m;++i)\n    {\n        rg int p=read(),q=read();\n        add(p,q+n,1);//\u89c13\n    }\n    printf(\"%d\\n\",n-Dinic());//\u8fd9\u4e2a\u8bc1\u660e\u4e86\u7684\n    return 0;\n}\n\n```\n## \u60f3\u6253\u4e00\u4e0b\u5e7f\u544a(~~\u5618~~)\n\u5982\u679c\u4f60\u89c9\u5f97\u6211\u8bb2\u7684\u8fd8\u884c\uff0c\u6216\u8005\u8ba9\u4f60\u6e05\u6670\u4e86\u5f88\u591a\uff0c\u53ef\u4ee5\u9876\u4e00\u9876[\u6211\u7684cnblogs\u535a\u5ba2](http://www.cnblogs.com/cjoierljl/)\n\n\u91cc\u9762\u6709\u4e00\u5957\u7f51\u7edc\u6d41\u9898\u76ee\u7684\u8be6\u8bb2\uff0c~~\u6211\u81ea\u8ba4\u4e3a\u8fd8\u884c~~\uff1a[\u6233\u6211](https://www.cnblogs.com/cjoierljl/p/9411270.html)",
        "postTime": 1533297184,
        "uid": 66596,
        "name": "eternal\u98ce\u5ea6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "\u4e00\u9053\u4e8c\u5206\u56fe\u7684\u9898\uff0c\u5728\u7f51\u7edc\u6d41\u4e0a\u4f53\u73b0\u4e3a\uff1a\u6700\u5c0f\u8def\u5f84\u8986\u76d6=\u70b9\u7684\u603b\u6570-\u7f51\u7edc\u6700\u5927\u6d41\u3002\n\n\u5efa\u6a21\u65b9\u5f0f\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/15945.png)\n\n\u62c6\u70b9\u540e\u6e90\u70b9\u54111~n\u8fde\u63a5\u6743\u4e3a1\u7684\u8fb9\uff0cn+1~2n\u5411\u6c47\u70b9\u8fde\u6743\u4e3a1\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u539f\u56fe\u4e2d\u76f8\u8fde\u7684\u4e24\u4e2a\u70b9x->y\uff0c\u4e8c\u5206\u56fe\u4e2d\u4f53\u73b0\u4e3ax->y+n\u3002\n\n\u6700\u540e\u7684\u65b9\u6848\u53ef\u4ee5\u5229\u7528\u6b8b\u91cf\u7f51\u7edc\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u5373\u4ece1\u5230n\u679a\u4e3e\uff0c\u4ece\u6bcf\u4e2a\u70b9\u5411\u5916\u626b\u4e00\u5708\uff0c\u5982\u679c\u6709\u6d41\u4ece\u8fd9\u6761\u8fb9\u7ecf\u8fc7\uff0c\u5e76\u6d41\u5411y+n\uff0c\u5219\u5408\u5e76x\u4e0ey\u3002\n\n\u7136\u540en^2\u8f93\u51fa\u65b9\u6848\u5373\u53ef\u3002\n\n\u4e0a\u4ee3\u7801\u2193\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int INF=2e9;\n\nint n,m,x,y,s,s1,t,np=1,mfl,mct;\nint h[305],cur[305],tp[305],ln[305],q[12505],f[305];\nbool vis[305];\nstruct rpg{\n\tint li,nx,ln,ct;\n}a[12505];\n\nvoid add(int ls,int nx,int ln,int ct){\n\ta[++np]=(rpg){h[ls],nx,ln,ct};\n\th[ls]=np;\n\ta[++np]=(rpg){h[nx],ls,0,-ct};\n\th[nx]=np;\n}\n\nbool bfs(){\n\tmemset(tp,0,sizeof(tp));\n\tint hd=1,tl=1;\n\tq[hd]=s1;\n\ttp[s1]=1;\n\twhile(hd<=tl){\n\t\tint nw=q[hd++];\n\t\tfor(int i=h[nw];i;i=a[i].li){\n\t\t\tif(a[i].ln&&!tp[a[i].nx]){\n\t\t\t\ttp[a[i].nx]=tp[nw]+1;\n\t\t\t\tq[++tl]=a[i].nx;\n\t\t\t}\n\t\t}\n\t}return tp[t];\n}\n\nint dfs(int u,int maxn){\n\tif(u==t||!maxn) return maxn;\n\tint sum=0;\n\tfor(int& i=cur[u];i;i=a[i].li){\n\t\tif(a[i].ln&&tp[a[i].nx]==tp[u]+1){\n\t\t\tint f=dfs(a[i].nx,min(maxn,a[i].ln));\n\t\t\tif(f){\n\t\t\t\tmaxn-=f;\n\t\t\t\tsum+=f;\n\t\t\t\ta[i].ln-=f;\n\t\t\t\ta[i^1].ln+=f;\n\t\t\t\tif(!maxn) break;\n\t\t\t}\n\t\t}\n\t}return sum;\n}\n\nvoid dnc(){\n\twhile(bfs()){\n\t\tfor(int i=0;i<=t;++i) cur[i]=h[i];\n\t\twhile(int d=dfs(s1,INF)) mfl+=d;\n\t}\n}\n\nint find(int x){\n\tif(f[x]==x) return x;\n\telse return f[x]=find(f[x]);\n}\n\nvoid un(int a,int b){\n\tint fa=find(a),fb=find(b);\n\tif(fa!=fb) f[fa]=fb;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tt=(n<<1)+1;\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y+n,1,-1);\n\t}for(int i=1;i<=n;++i){\n\t\tadd(s,i,1,-1);\n\t\tadd(i+n,t,1,0);\n\t}dnc();\n\t\n\tmfl=n-mfl;\n\tfor(int i=1;i<=n;++i) f[i]=i;\n\t\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=h[i];j;j=a[j].li){\n\t\t\tif(!a[j].ln&&a[j].nx-n<=n&&a[j].nx){\n\t\t\t\tun(i,a[j].nx-n);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=n;i;--i){\n\t\tbool fl=0;\n\t\tfor(int j=1;j<=n;++j){\n\t\t\tif(find(j)==i){\n\t\t\t\tprintf(\"%d \",j);\n\t\t\t\tfl=1;\n\t\t\t}\n\t\t}if(fl) puts(\"\");\n\t}\n\tprintf(\"%d\\n\",mfl);\n\treturn 0;\n}\n```",
        "postTime": 1521630004,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u8981\u660e\u767d\u4e00\u4e2a\u5b9a\u7406\uff1a\u4e00\u5f20\u56fe\u4e2d\uff0c\u8def\u5f84\u6570\uff08\u70b9\u4e0d\u91cd\u590d\uff09=\u70b9\u6570-\u70b9\u4e4b\u95f4\u5339\u914d\u6570\uff08\u8fde\u8fb9\u4e14\u4e0d\u91cd\u590d\uff09\u3002\n\n\u8fd9\u4e2a\u5f88\u597d\u8bc1\u660e\u3002\u56e0\u4e3a\u5f53\u70b9\u4e4b\u95f4\u6ca1\u6709\u8fb9\u65f6\uff0c\u8def\u5f84\u6570=\u70b9\u6570-0=\u70b9\u6570\uff1b\u5f53\u6709\u4e00\u6761\u8fb9\uff08x\uff0cy\uff09\u65f6\uff0c\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e24\u4e2a\u70b9\u5408\u5728\u4e00\u8d77\uff0c\u6240\u4ee5\u8def\u5f84\u6570=\u70b9\u6570-1\uff1b\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u6c42\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u70b9\u6570\u4e0d\u53d8\uff0c\u90a3\u4e48\u5c31\u8981\u4f7f\u5339\u914d\u6570\u6700\u5927\uff0c\u5c31\u53d8\u6210\u4e86\u6c42\u6700\u5927\u5339\u914d\u7684\u95ee\u9898\u3002\n\n\u540c\u98de\u884c\u5458\u5339\u914d\u95ee\u9898\u4e00\u6837\uff0c\u6211\u4eec\u628a\u4e00\u4e2a\u70b9\u62c6\u5f00\u4e24\u4e2a\u70b9\uff0c\u7136\u540e\u6709\u8fb9\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0cst\u5230\u6bcf\u4e2a\u51fa\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u6bcf\u4e2a\u5165\u70b9\u5230ed\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u77e5\u9053\u6700\u5927\u5339\u914d\u4e86\uff0c\u7528\u603b\u70b9\u6570\u51cf\u4e00\u51cf\u5c31\u53ef\u4ee5\u5f97\u51fa\u7b54\u6848\u3002\n\n\u5173\u4e8e\u65b9\u6848\u8f93\u51fa\u7684\u95ee\u9898\uff0c\u7528last\u8bb0\u5f55\u4e00\u4e0b\u524d\u4e00\u4e2a\u8bbf\u95ee\u8fd9\u4e2a\u70b9\u7684\u662f\u54ea\u4e2a\uff0c\u7528s\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u8fd9\u4e2a\u70b9\u8bbf\u95ee\u8c01\u3002\u5177\u4f53\u53ef\u4ee5\u5230\u4e0a\u9762\u7684\u94fe\u63a5\u4e2d\u5b66\u4e60\uff0c\u6bcf\u627e\u5230\u4e00\u4e2a\u8def\u5f84\u7684\u7ed3\u5c3e\uff08s[i]==i\uff09\u90a3\u4e48\u5c31\u9012\u5f52\u8bbf\u95eet\uff0c\u8f93\u51fa\u5373\u53ef\u3002\n\n~~\uff08\u6ce8\u610f\uff1a\u4e3a\u4e86\u9632\u4f5c\u5f0a\u628a\u6570\u7ec4\u5f00\u5c0f\u4e861/10\uff09~~\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint n,m,last[31],len=1,st,ed,h[31],t[31],s[31];\nstruct node{int y,c,next; } a[12001];\nqueue<int>f;\nbool pd[310];\nint min(int x,int y) { return x<y?x:y; }\nvoid ins(int x,int y,int c)\n//\u5efa\u8fb9\u51fd\u6570\n{\n\tlen++; a[len].y=y; a[len].c=c; a[len].next=last[x]; last[x]=len;\n\tlen++; a[len].y=x; a[len].c=0; a[len].next=last[y]; last[y]=len;\n}\nbool bfs()\n{\n\tmemset(h,0,sizeof(h));\n\th[st]=1; f.push(st);\n\twhile(!f.empty())\n\t{\n\t\tint x=f.front();\n\t\tfor(int i=last[x];i!=0;i=a[i].next)\n\t\t{\n\t\t\tint y=a[i].y;\n\t\t\tif(h[y]==0 && a[i].c>0) { h[y]=h[x]+1; f.push(y); }\n\t\t}\n\t\tf.pop();\n\t}\n\treturn h[ed];\n}\nint dfs(int x,int k)\n{\n\tif(x==ed) return k;\n\tint d=0;\n\tfor(int i=last[x];i!=0;i=a[i].next)\n\t{\n\t\tint y=a[i].y;\n\t\tif(d==k) return k;\n\t\tif(h[y]==h[x]+1 && a[i].c>0)\n\t\t{\n\t\t\tint my=dfs(y,min(a[i].c,k-d));\n\t\t\td+=my; a[i].c-=my; a[i^1].c+=my;\n\t\t\tif(my!=0 && x!=st && y!=ed) { s[x]=y-n; t[y-n]=x; }\n\t\t}\n\t}\n\tif(d==0) h[x]=0;\n\treturn d;\n}\n//bfs\u548cdfs\u662f\u4e24\u4e2a\u5f88\u5e38\u89c1\u7684\u7f51\u7edc\u6d41\u51fd\u6570\nint mf()\n//maxflow\u6700\u5927\u6d41\u7f29\u5199\n//\u6c42\u6700\u5927\u6d41\u7684\u51fd\u6570\n{\n\tint k=0;\n\twhile(bfs())\n\t{\n\t\tint dx=dfs(st,1e9);\n\t\twhile(dx!=0) { k+=dx; dx=dfs(st,1e9); }\n\t}\n\treturn k;\n}\nvoid op(int x)\n//output\u8f93\u51fa\u51fd\u6570\n{\n\tif(x==0) return;\n\tif(t[x]!=x) op(t[x]);\n\tpd[x]=true;\n\tprintf(\"%d \",x);\n}\nint main()\n//\u4ece\u4e3b\u51fd\u6570\u5f00\u59cb\u9605\u8bfb\u662f\u4e2a\u597d\u4e60\u60ef\n{\n\tmemset(pd,false,sizeof(pd));\n\tscanf(\"%d %d\",&n,&m); st=0; ed=2*n+1;\n\tfor(int i=1;i<=n;i++) s[i]=t[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y; scanf(\"%d %d\",&x,&y);\n\t\tins(x,y+n,1);\n        //\u8f93\u5165\u5e76\u5efa\u8fb9\n\t}\n\tfor(int i=1;i<=n;i++) { ins(st,i,1); ins(i+n,ed,1); }\n    //\u540c\u6837\u662f\u5efa\u8fb9\uff0c\u5f88\u597d\u7406\u89e3\uff0c\u5e0c\u671b\u81ea\u5df1\u7406\u89e3\n\tint p=mf();\n    //\u6c42\u6700\u5927\u6d41\n\tfor(int i=n;i>=1;i--)\n\t\tif(s[i]==i && pd[i]==false) { op(i); printf(\"\\n\"); }\n\t//\u8f93\u51fa\n\tprintf(\"%d\",n-p);\n\treturn 0;\n}\n```",
        "postTime": 1518943745,
        "uid": 41785,
        "name": "\u591c\u5200\u795e\u5341\u9999\u10e6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "\u4e8c\u5206\u56fe\u5339\u914d\u76f8\u5173\u5b9a\u7406\u4ee5\u53ca\u8bc1\u660e\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\uff0c\u524d\u9762\u7684\u9898\u89e3\u8bb2\u7684\u90fd\u5f88\u660e\u767d\u4e86\uff0c\u5308\u7259\u5229\u4e5f\u597d$dinic$\u4e5f\u597d\uff0c\u7b2c\u4e00\u95ee\u7684\u6700\u5c11\u8def\u5f84\u6570\u90fd\u80fd\u5f97\u5230\uff0c\u6240\u4ee5\u672c\u7bc7\u9898\u89e3\u7740\u91cd\u8bb2\u4e00\u4e0b\u7b2c\u4e8c\u95ee\uff0c\u8def\u5f84\u8f93\u51fa\u7684\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u6211\u4eec\u6839\u636e\n\n\u6700\u5c0f\u8def\u5f84\u8986\u76d6 = \u70b9\u7684\u603b\u6570 - \u7f51\u7edc\u6700\u5927\u6d41\n\n\u8fd9\u4e00\u4e8c\u5206\u56fe\u5b9a\u7406\uff0c\u7528$dinic$\u7b97\u6cd5\u6c42\u51fa\u7f51\u7edc\u6700\u5927\u6d41\u540e\uff0c\u5f97\u5230\u6b8b\u4f59\u7f51\u7edc\u3002\n\n\u5728\u8fd9\u671f\u95f4\u4e0d\u9700\u8981\u5bf9\u7b2c\u4e8c\u95ee\u7684\u8def\u5f84\u8f93\u51fa\u505a\u4efb\u4f55\u9884\u5904\u7406\uff0c\u5f53\u8dd1\u5b8c\u6700\u5927\u6d41\u83b7\u5f97\u6b8b\u4f59\u7f51\u7edc\u540e\uff0c\u6211\u4eec\u5728\u6b8b\u4f59\u7f51\u7edc\u4e0a\u505a\u6587\u7ae0\u3002\n\n\u56fe\u7247\u501f\u7528@A\u00b7H_\u9898\u89e3\u4e2d\u7684\u56fe\u7247\uff0c\u5176\u4e2d$S$\u4e3a\u8d85\u7ea7\u6e90\u70b9\uff0c$T$\u4e3a\u8d85\u7ea7\u6c47\u70b9\u3002\u5de6\u8fb9\u62c6\u51fa\u7684\u548c\u8d85\u7ea7\u6e90\u70b9$S$\u76f4\u63a5\u76f8\u8fde\u7684$N$\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u6211\u4eec\u628a\u5b83\u53eb\u505a\u96c6\u5408$X$\uff1b\u53f3\u8fb9\u62c6\u51fa\u7684\u548c\u8d85\u7ea7\u6c47\u70b9$T$\u76f4\u63a5\u76f8\u8fde\u7684$N$\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u6211\u4eec\u628a\u5b83\u53eb\u505a\u96c6\u5408$Y$\u3002\n![](https://cdn.luogu.com.cn/upload/pic/15945.png)\n\n\u6839\u636e$dinic$\u7b97\u6cd5\u548c\u6c42\u7b2c\u4e00\u95ee\u7684\u6d41\u7a0b\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff0c\u5bf9\u4e8e\u96c6\u5408$X$\u5230\u96c6\u5408$Y$\u7684\u6bcf\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u6211\u4eec\u5728\u5efa\u56fe\u65f6\u4e5f\u4f1a\u5efa\u4e00\u6761\u5b83\u7684\u53cd\u5411\u8fb9\u3002\u6240\u4ee5\u5bf9\u4e8e\u96c6\u5408$Y$\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5176\u5728\u6700\u521d\u59cb\u5efa\u56fe\u65f6\u56fa\u5b9a\u4f1a\u6709\u4e00\u6761\u6307\u5411\u8d85\u7ea7\u6c47\u70b9\u7684\u6709\u5411\u8fb9\uff0c\u4e14\u8be5\u6709\u5411\u8fb9\u7684\u6743\u503c\u4e3a$1$\uff0c\u4ee3\u8868\u6d41\u91cf\u4e3a$0$\uff0c\u5bb9\u91cf\u4e3a$1$\u3002\u5176\u8fd8\u4f1a\u6709\u4e00\u4e9b\u6307\u5411$X$\u4e2d\u7684\u70b9\u7684\u6709\u5411\u8fb9\uff0c\u8fd9\u4e9b\u6709\u5411\u8fb9\u7684\u521d\u59cb\u6743\u503c\u4e3a$0$\uff0c\u4ee3\u8868\u6d41\u91cf\u4e3a$0$\uff0c\u5bb9\u91cf\u4e3a$1$\u3002\n\n\u73b0\u5728\u601d\u8003\uff0c\u5982\u679c\u67d0\u5728$Y$\u7684\u70b9$P$\u4e0d\u4e3a\u67d0\u6761\u7b80\u5355\u8def\u7684\u8d77\u70b9\uff0c\u800c\u4e3a\u4e2d\u95f4\u70b9\u6216\u8005\u7ec8\u70b9\uff0c\u4ee5$P$\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9\uff0c\u6743\u503c\u4f1a\u600e\u6837\uff1f\u6709\u4e24\u5bf9\u56db\u6761\u6709\u5411\u8fb9\u7684\u6743\u503c\u4e00\u5b9a\u4f1a\u53d1\u751f\u53d8\u5316\uff01\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6709\u8d85\u7ea7\u6e90\u70b9\u5411$X$\u4e2d\u7684\u4e00\u70b9\u6d41\u51fa\u6d41\u91cf\uff0c\u7136\u540e\u8be5$X$\u4e2d\u7684\u4e00\u70b9\u518d\u5c06\u6d41\u91cf\u6d41\u5411\u5728$Y$\u4e2d\u7684$P$\uff0c\u5219$P$\u4e00\u5b9a\u4f1a\u5c06\u6d41\u91cf\u6d41\u5411\u8d85\u7ea7\u6c47\u70b9\u3002\u4e8e\u662f\u4ee5$P$\u4e3a\u7ec8\u70b9\u7684\u4e00\u6761\u6765\u81ea$X$\u7684\u6709\u5411\u8fb9\uff0c\u4ee5\u53ca\u4ee5$P$\u4e3a\u8d77\u70b9\u7684\u4e00\u6761\u6d41\u5411\u8d85\u7ea7\u6c47\u70b9\u7684\u6709\u5411\u8fb9\u7684\u6743\u503c\uff0c\u4ece\u539f\u6765\u7684$1$\uff0c\u90fd\u53d8\u4e3a\u4e86$0$\uff0c\u4ed6\u4eec\u5bf9\u5e94\u7684\u53cd\u5411\u8fb9\u7684\u6743\u503c\u4e5f\u4f1a\u53d8\u5316\u3002\n\n\u6240\u4ee5\u4ece\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6293\u4f4f\u4e00\u6761\u5224\u5b9a\u67d0\u70b9\u662f\u5426\u4e3a\u8d77\u70b9\u7684\u65b9\u6cd5\uff1a\u904d\u5386\u96c6\u5408$Y$\uff0c\u82e5\u5176\u5230\u8d85\u7ea7\u6c47\u70b9\u7684\u6709\u5411\u8fb9\u7684\u6743\u503c\u8fd8\u4e3a\u539f\u6765\u7684$1$\uff0c\u8bc1\u660e\u6ca1\u6709$X$\u4e2d\u7684\u70b9\u6709\u6d41\u91cf\u6d41\u5411\u5b83\uff0c\u5219\u5176\u4e00\u5b9a\u6ca1\u6709\u524d\u9a71\u70b9\uff0c\u4e5f\u5c31\u662f\u5176\u4e3a\u8d77\u70b9\uff01\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u904d\u904d\u5386\u5c06\u8d77\u70b9\u5168\u90e8\u627e\u5230\u3002\u8d77\u70b9\u6536\u5165\u56ca\u4e2d\u4ee5\u540e\u6211\u4eec\u7528$dfs$\u53bb\u627e\u6bcf\u4e00\u4e2a\u70b9\u7684\u4e0b\u4e00\u4e2a\u70b9\uff0c\u4e8e\u662f\u5c31\u80fd\u6253\u5370\u51fa\u7b80\u5355\u8def\u5f84\u3002\u8d77\u70b9\u548c\u904d\u5386\u8fc7\u7684\u70b9\u81ea\u7136\u8981\u7528$visit$\u6570\u7ec4\u6807\u8bb0\u4e00\u4e0b\uff0c\u9009\u8fc7\u7684\u70b9\u4e0d\u80fd\u518d\u9009\u4e86\uff0c\u8fd9\u6837\u6211\u4eec\u6bcf\u4e2a\u7b80\u5355\u8def\u5f84\u7684\u70b9\u7684\u96c6\u5408\u624d\u80fd\u5f62\u6210\u4e00\u4e2a\u5168\u96c6\u7684\u5212\u5206\uff0c\u800c\u4e0d\u662f\u8986\u76d6\u3002\n\n\u4ee3\u7801\u4e2d\uff0c\u8d85\u7ea7\u6e90\u70b9$S$\u6807\u53f7\u4e3a$0$\uff0c\u96c6\u5408$X$\u4e2d\u7684\u70b9\u6807\u53f7\u4e3a$1--N$,\u96c6\u5408$Y$\u4e2d\u7684\u70b9\u6807\u53f7\u4e3a$N+1--2N$\uff0c\u8d85\u7ea7\u6c47\u70b9$T$\u4e2d\u7684\u70b9\u6807\u53f7\u4e3a$2N+1$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define _for(i,a,b) for(register int i = (a);i < b;i ++)\n#define _rep(i,a,b) for(register int i = (a);i > b;i --)\n#define INF 0x3f3f3f3f\n#define MOD 100000000\n#define maxn 100003\n#define pb push_back\n#define debug() printf(\"Miku Check OK!\\n\")\ntypedef long long ll;\n\nusing namespace std;\ntypedef pair<int,int> P;\ninline ll read()\n{\n    ll ans = 0;\n    char ch = getchar(), last = ' ';\n    while(!isdigit(ch)) last = ch, ch = getchar();\n    while(isdigit(ch)) ans = (ans << 1) + (ans << 3) + ch - '0', ch = getchar();\n    if(last == '-') ans = -ans;\n    return ans;\n}\ninline void write(ll x)\n{\n    if(x < 0) x = -x, putchar('-');\n    if(x >= 10) write(x / 10);\n    putchar(x % 10 + '0');\n}\nint ver[maxn],Next[maxn],head[maxn],val[maxn];\nint d[maxn];\nint n,m,s,t,tot,maxflow;\nvoid add(int x,int y,int w)\n{\n    ver[++tot] = y,Next[tot] = head[x],head[x] = tot,val[tot] = w;\n}\nbool bfs()\n{\n    memset(d,0,sizeof(d));\n    queue<int> q;\n    q.push(s);d[s] = 1;\n    while(!q.empty())\n    {\n        int x = q.front();q.pop();\n        for(int i = head[x]; i; i = Next[i])\n            if(val[i] && !d[ver[i]])\n            {\n                q.push(ver[i]);\n                d[ver[i]] = d[x]+1;\n                if(ver[i]==t)\n                    return true;\n            }\n    }\n    return false;\n}\nint dinic(int x,int flow)\n{\n    if(x==t) return flow;\n    // k\u4e3a\u5b50\u8282\u70b9\u589e\u91cf \n    int rest = flow, k;\n    for(int i = head[x]; i && rest; i = Next[i])\n    {\n        if(val[i] && d[ver[i]] == d[x]+1)\n        {\n            k = dinic(ver[i],min(rest,val[i]));\n            if(!k) d[ver[i]] = 0;\n            val[i] -= k;\n            val[i^1] += k;\n            rest -= k;\n        }\n    }\n    return flow - rest;\n}\nvector<int> st;\nint vvis[maxn];\nvoid go(int i,vector<int>& rnt)\n{\n    rnt.pb(i);\n    for(int j = head[i]; j ; j = Next[j])\n    {\n        int y = ver[j];\n        if(y>n && !vvis[y-n] && !val[j])\n        {\n            vvis[y-n] = 1;\n            go(y-n,rnt);\n        }\n    }\n}\nint main()\n{\n    n = read();m = read();\n    tot = 1;maxflow = 0;s = 0;t = 2*n+1;\n    _for(i,1,m+1)\n    {\n        int x = read();int y = read();\n        add(x,y+n,1);add(y+n,x,0);\n    }\n    _for(i,1,n+1)\n    {\n        add(0,i,1);add(i,0,0);\n        add(i+n,2*n+1,1);add(2*n+1,i+n,0);\n    }  \n    int flow = 0;\n    while(bfs()) \n        while(flow = dinic(s,INF))\n            maxflow += flow;\n    vvis[0] = 1;\n    _for(i,1,n+1)\n    {\n        for(int j = head[i+n]; j ; j = Next[j])\n            if(ver[j]==2*n+1 && val[j]==1)\n                st.pb(i),vvis[i] = 1; \n    }\n    \n    vector<int> tmp;\n    _for(i,0,st.size())\n    {\n        vvis[st[i]] = 1,go(st[i],tmp);\n        _for(j,0,tmp.size()-1)\n            printf(\"%d \",tmp[j]);\n        printf(\"%d\\n\",tmp[tmp.size()-1]);\n        tmp.clear();\n    }\n    \n    write(n-maxflow);\n    return 0;\n}\n```\n",
        "postTime": 1570510526,
        "uid": 51921,
        "name": "Asurudo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "\u53d1\u73b0\u7f51\u7edc\u6d41\u7684\u505a\u6cd5\u5927\u4f6c\u90fd\u8bf4\u7684\u5dee\u4e0d\u591a\u4e86\uff0c\u6211\u8fd9\u4e2a\u849f\u84bb\u5c31\u53d1\u4e00\u4e2a\u8fd9\u7c7b\u95ee\u9898\u8f93\u51fa\u8def\u5f84\u7684\u6bd4\u8f83\u81ea\u7136\u7684\u65b9\u6cd5\u5427\u3002\n\n\u56e0\u4e3a\u8def\u5f84\u8986\u76d6\u95ee\u9898\u4e2d\u4e24\u70b9\u4e4b\u95f4\u5982\u679c**\u6709\u6d41**\u5219\u4ee3\u8868$DAG$\u4e2d\u8fd9\u6761\u6709\u5411\u8fb9\u88ab\u9009\u4e2d\u4f5c\u4e3a\u8def\u5f84\u7684\u4e00\u90e8\u5206\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8bbe\u62c6\u70b9$i$\u5206\u522b\u4e3a$x_i$, $y_i$\uff0c\u904d\u5386\u6240\u6709\u7684$y_i$\uff0c**\u6613\u5f97\u5f53$y_i$\u6ca1\u6709\u6d41\u6d41\u5165\u6d41\u51fa\u65f6\uff0c\u8bf4\u660e\u70b9$i$\u4e3a\u4e00\u4e2a\u8d77\u70b9**\u3002\u7136\u540e\u4ece\u70b9$i$\u5f00\u59cbdfs\u8f93\u51fa\u8def\u5f84\u5373\u53ef\u3002\n\nPS\uff1a\u6211\u7684\u7b97\u6cd5\u4f7f\u7528\u7684\u662f\u5e26\u5f53\u524d\u5f27\u4f18\u5316\u7684ISAP\uff0c\u5b66\u4e60\u8d44\u6599\u662f\u5495\u5495\u65e5\u62a5\uff0c\u53ef\u81ea\u884c\u67e5\u627e\u3002\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n\nusing namespace std;\n\nconst int MAXN = 150 << 2;\nconst int MAXM = 6000 + 100;\nconst int INF = 1 << 30;\n\nstruct Edge {\n    int bg, ed, nxt, flow;\n    Edge(int bg = 0, int ed = 0, int nxt = 0, int flow = 0) :\n        bg(bg), ed(ed), nxt(nxt), flow(flow) {};\n};\n\nstruct Map {\n    Edge edge[MAXM << 1];\n    int head[MAXN], count = 1;\n    inline void insert(int bg, int ed, int flow) {\n        edge[++count] = Edge(bg, ed, head[bg], flow);\n        head[bg] = count;\n        edge[++count] = Edge(ed, bg, head[ed], 0);\n        head[ed] = count;\n    }\n}A;\n\nint depth[MAXN], gap[MAXN], cur[MAXN];\nint n, m;\nbool vis[MAXN];\n\nvoid bfs(int s, int t) {\n    memset(depth, 0, sizeof(depth));\n    memset(gap, 0, sizeof(depth));\n    queue<int> que;\n    que.push(t);\n    depth[t] = 1;\n    gap[1] = 1;\n    while (!que.empty()) {\n        int now = que.front();\n        que.pop();\n        for (int i = A.head[now]; i; i = A.edge[i].nxt) {\n            int v = A.edge[i].ed;\n            if (depth[v]) continue;\n            que.push(v);\n            depth[v] = depth[now] + 1;\n            ++gap[depth[v]];\n        }\n    }\n}\n\nint dfs(int now, int flow, int s, int t) {\n    if (now == t) return flow;\n    int used = 0;\n    for (int i = cur[now]; i; i = A.edge[i].nxt) {\n        cur[now] = i;\n        int v = A.edge[i].ed;\n        if (A.edge[i].flow && depth[v] + 1 == depth[now]) {\n            int change = dfs(v, min(flow - used, A.edge[i].flow), s, t);\n            A.edge[i].flow -= change;\n            A.edge[i ^ 1].flow += change;\n            used += change;\n        }\n        if (used == flow) return used;\n    }\n    --gap[depth[now]];\n    if (!gap[depth[now]]) depth[s] = (n << 1) + 1;\n    ++depth[now];\n    ++gap[depth[now]];\n    return used;\n}\n\nint ISAP(int s, int t) {\n    bfs(s, t);\n    int ans = 0;\n    while (depth[s] <= (n << 1)) {\n        memcpy(cur, A.head, sizeof(A.head));\n        ans += dfs(s, INF, s, t);\n    }\n    return ans;\n}\n\nvoid print(int now, int s, int t) {\n    printf(\"%d \", now);\n    for (int i = A.head[now]; i; i = A.edge[i].nxt) {\n        if (A.edge[i].flow || A.edge[i].ed == s || A.edge[i].ed == now + n) continue;//\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\u4e0d\u8981\u628a\u8fb9\u8fde\u56de\u81ea\u5df1\n        print(A.edge[i].ed - n, s, t);//\u4e0b\u4e00\u4e2a\u70b9\u5e94\u4ecexi\u51fa\u53d1\u641c\u7d22\uff0c\u6240\u4ee5\u8981\u51cfn\n        return;\n    }\n}\n\nint main() {\n    memset(vis, false, sizeof(vis));\n    int x, y, s, t, ans;\n    scanf(\"%d%d\", &n, &m);\n    s = 2 * n + 5, t = s + 1, ans = n;\n    for (int i = 1; i <= n; ++i) {\n        A.insert(s, i, 1);\n        A.insert(i + n, t, 1);\n    }\n    for (int i = 1; i <= m; ++i) {\n        scanf(\"%d%d\", &x, &y);\n        A.insert(x, y + n, 1);\n    }\n    ans -= ISAP(s, t);\n    for (int i = 1; i <= n; ++i) {\n        bool flag = false;\n        for (int j = A.head[i + n]; j; j = A.edge[j].nxt) //\u67e5\u627eyi\n            if (A.edge[j].flow && A.edge[j].ed != i && A.edge[j].ed != t) {\n                flag = true;\n                break;\n            }\n        if (!flag) {\n            print(i, s, t);//\u9012\u5f52\u8f93\u51fa\n            printf(\"\\n\");\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1551447722,
        "uid": 10337,
        "name": "ZPC2048",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P2764)\n\n\u9898\u76ee\u5927\u610f\uff1a\u8981\u6c42\u7528\u6700\u5c11\u6570\u91cf\u7684\u94fe\u4e0d\u91cd\u590d\u5730\u8986\u76d6\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u70b9\u3002\n\n\u901a\u5e38\u505a\u6cd5\uff1a\u5c06\u6bcf\u4e2a\u70b9\u62c6\u5f00\uff0c\u62c6\u6210$x_i,y_i$\u4e24\u4e2a\u70b9\uff0c\n\n1.\u4ece\u6e90\u70b9\u5411$x_i$\u8fde\u8fb9\uff0c\u6d41\u4e3a1\uff1b\n\n2.\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u6bcf\u8df3\u8fb9$(u,v)$\uff0c\u4ece$x_u$\u5411$y_v$\u8fde\u8fb9\uff0c\u6d41\u4e3a1\uff1b\n\n3.\u4ece$y_i$\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u6d41\u4e3a1.\n\n\u8fd9\u6837\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\uff0c\u53ef\u4ee5\u8bc1\u660e\u5339\u914d\u540e\u6bcf\u4e2a\u70b9\u5165\u5ea6\u6700\u591a\u4e3a\u4e00\uff0c\u51fa\u5ea6\u4e5f\u6700\u591a\u4e3a\u4e00\uff0c\u6ee1\u8db3\u94fe\u7684\u6761\u4ef6\uff0c\u540c\u65f6\u56e0\u4e3a\u6c42\u7684\u662f\u6700\u5927\u5339\u914d\uff0c\u8be5\u65b9\u6848\u5fc5\u5b9a\u7528\u4e86\u6700\u5c11\u7684\u94fe\u6570\uff0c\u6240\u4ee5\u662f\u6b63\u786e\u7684\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <cstring>\n#define min(X,Y) ((X)<(Y)?(X):(Y))\n\nint n,m,head[401],nxt[320001],b[320001],v[320001],k=1,h,t,S,T,d[401],ans,net[401];\nint pre[401],p[401],dis[401],q[501];\nvoid push(int s,int t,int val){\n    nxt[++k]=head[s];\n    head[s]=k;\n    b[k]=t;\n    v[k]=val;\n}\nvoid link(int s,int t,int val){\n    push(s,t,val);\n    push(t,s,0);\n}\nbool bfs(){\n    memset(dis,0,sizeof dis);\n    dis[S]=1;\n    h=t=0;\n    q[++t]=S;\n    while(h<t){\n        ++h;\n        for(int i=head[q[h]];i;i=nxt[i])\n            if(v[i]&&!dis[b[i]]){\n                dis[b[i]]=dis[q[h]]+1;\n                q[++t]=b[i];\n                if(b[i]==T)return 1;\n            }\n    }\n    return 0;\n}\nint dfs(int x,int flow){\n    if(x==T||!flow)return flow;\n    int used=0;\n    for(int i=p[x];i;i=nxt[i])\n        if(v[i]&&dis[b[i]]==dis[x]+1){\n            int w=dfs(b[i],min(flow-used,v[i]));\n            v[i]-=w;\n            v[i^1]+=w;\n            used+=w;\n            if(w)p[x]=i,net[x]=b[i]-n;\n            if(used==flow)return flow;\n        }\n    if(!used)dis[x]=0;\n    return used;\n}\nvoid print(int x){\n    printf(\"%d \",x);\n    if(net[x]>0)print(net[x]);\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    T=n+n+1;\n    for(int i=1,t1,t2;i<=m;i++){\n        scanf(\"%d%d\",&t1,&t2);\n        link(t1,t2+n,1);\n    }\n    for(int i=1;i<=n;i++)link(S,i,1),link(i+n,T,1);\n    while(bfs()){\n        memcpy(p,head,sizeof p);\n        ans+=dfs(S,2);\n    }\n    for(int i=1;i<=n;i++)\n        if(net[i])d[net[i]]++;\n    for(int i=1;i<=n;i++)if(!d[i])print(i),putchar('\\n');\n    printf(\"%d\",n-ans);\n}\n```",
        "postTime": 1534041154,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP2764 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898"
    },
    {
        "content": "\u5efa\u56fe\u601d\u8def\u5f88\u660e\u786e\uff0c\u62c6\u70b9\u8dd1\u6700\u5927\u5339\u914d\uff0c\u4f46\u8fd9\u660e\u663e\u662f\u4e2a\u4e8c\u5206\u56fe\u7684\u9898\u9898\u89e3\u5c45\u7136\u53ea\u6709\u4e00\u7bc7\u5308\u7259\u5229\u7b97\u6cd5\u3002\n\n\u53d1\u4e00\u79cd\u548c\u4e4b\u524d\u90a3\u7bc7\u5308\u7259\u5229\u601d\u8def\u7565\u6709\u4e0d\u540c\u7684\u9898\u89e3\u3002\n\n\u672c\u9898\u7684\u96be\u70b9\u5c31\u662f\u5982\u4f55\u8f93\u51fa\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u5728\u5efa\u56fe\u7684\u65f6\u5019\u52a0\u5165\u4e00\u4e2a\u539f\u5219\uff0c\u5373\uff1a**\u8fde\u8fb9\u65f6\u4f4d\u4e8e\u5de6\u56fe\u7684\u9876\u70b9\u7f16\u53f7\u5c0f\u4e8e\u4f4d\u4e8e\u53f3\u56fe\u7684\u3002**\n\n![](https://cdn.luogu.com.cn/upload/pic/52363.png )\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f62\u5982\u5de6\u56fe\u7684\u8fb9\u662f\u5141\u8bb8\u7684\uff0c\u800c\u5f62\u5982\u53f3\u56fe\u7684\u8fb9\u662f\u4e0d\u5141\u8bb8\u7684\u3002\n\n\u8fd9\u5f88\u597d\u7406\u89e3\u5427~\n\n\u5728\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u53ea\u8981\u4e0d\u505c\u5f80\u4e0a\u627e\u5373\u53ef\u3002\n\n\u4e0a\u4ee3\u7801\n\n```c\n#include<stdio.h>\nint n,m,e[200][200],vis[200],mt[200],p[200];\nint dfs(int p,int t){\n\tint i;\n\tfor(i=p;i<=n;i++){//\u4ecep\u5f00\u59cb\u627e\u53f3\u534a\u8fb9\u5339\u914d\n\t\tif(e[p][i]&&vis[i]!=t){\n\t\t\tvis[i]=t;\n\t\t\tif(!mt[i]||dfs(mt[i],t))return mt[i]=p;\n\t\t}\n\t}\n\treturn 0;\n}\nint maxflow(){\n\tint i,ans=0;\n\tfor(i=1;i<=n;i++)if(dfs(i,i))ans++;\n\treturn ans;\n}\nint main(){\n\tint i,a,b,x;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=0;i<m;i++){\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tif(a>b){int t=a;a=b;b=t;}//\u4fdd\u8bc1a<b\n\t\te[a][b]=1;\n\t}\n\tint ans=maxflow();\n\tfor(i=n;i;i--)if(!p[i]){\n\t\tx=i;\n\t\tdo{\n\t\t\tprintf(\"%d \",x);\n\t\t\tx=mt[x];p[x]=1;//p[i]\u8868\u793a\u5df2\u8f93\u51fa\n\t\t}while(x);\n\t\tprintf(\"\\n\");\n\t}\n\tprintf(\"%d\",n-ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1550713096,
        "uid": 108971,
        "name": "Potassium",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u7531\u4e24\u6761\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\u9996\u5c3e\u76f8\u63a5\u800c\u6210\u3002\u5728\u4e00\u5f00\u59cb\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u6761\u72ec\u7acb\u7684\u8def\u5f84\uff0c\u6211\u4eec\u4e0d\u65ad\u91cd\u590d\u8def\u5f84\u5408\u5e76\u7684\u8fc7\u7a0b\uff0c\u6700\u7ec8\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8def\u5f84\u8986\u76d6\u3002\r\n\r\n\u8003\u8651\u4e00\u6761\u8def\u5f84\uff0c\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u6709\u4e00\u6761\u5165\u8fb9\u548c\u51fa\u8fb9\u3002\u7279\u522b\u7684\uff0c\u8def\u5f84\u7684\u8d77\u70b9\u6ca1\u6709\u5165\u8fb9\uff0c\u8def\u5f84\u7684\u7ec8\u70b9\u6ca1\u6709\u51fa\u8fb9\u3002\r\n\r\n\u201c\u5bf9\u4e8e\u4efb\u610f\u2026\u2026\u90fd\u6709\u552f\u4e00\u2026\u2026\u201d \u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u62bd\u8c61\u6210\u4e8c\u5206\u56fe\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e8c\u5206\u56fe\u5339\u914d\u540e\u7684\u6bcf\u4e00\u4e2a\u5339\u914d\u70b9\u90fd\u6709\u552f\u4e00\u4e00\u4e2a\u70b9\u4e0e\u4e4b\u5339\u914d\u3002\uff08\u8fd9\u53e5\u8bdd\u662f\u6211\u5728 **[\u6d1b\u8c37\u7f51\u6821\u7701\u9009\u8ba1\u5212 2022](https://class.luogu.com.cn/course/yugu22sx1a)** \u671f\u95f4\u770b\u5230\u7684\uff0c\u51ed\u501f\u8fd9\u53e5\u8bdd\u6211\u79d2\u5207\u4e86\u8fd9\u9053\u7d2b\u9898\uff0c\u540c\u65f6[\u6211\u4e5f\u5728\u7701\u9009\u8ba1\u5212\u7684\u5e2e\u52a9\u4e0b\u6210\u529f\u5165\u9009\u7701\u961f](https://www.luogu.com.cn/discuss/599515)\u3002\u6d1b\u8c37\u597d\u95ea\uff0c\u62dc\u8c22\u6d1b\u8c37\uff01\u5927\u5bb6\u5feb\u6765\u62a5\u540d\uff01\uff09\r\n\r\n\u8003\u8651\u5c06\u8def\u5f84\u4e0a\u70b9\u4e4b\u95f4\u4e4b\u95f4\u7684\u5408\u5e76\u5173\u7cfb\u7c7b\u6bd4\u4e3a\u4e8c\u5206\u56fe\u4e0a\u7684\u5339\u914d\u5173\u7cfb\u3002\u7531\u4e8e\u4e8c\u5206\u56fe\u6bcf\u4e2a\u70b9\u53ea\u80fd\u5339\u914d\u4e00\u6b21\uff0c\u800c\u95ee\u9898\u4e2d\u7684\u70b9\u53ef\u4ee5\u5408\u5e76\u4e24\u6b21\u3002\u6211\u4eec\u5c1d\u8bd5\u89e3\u51b3\u8fd9\u4e2a\u77db\u76fe\uff0c\u53d1\u73b0\u4e00\u4e2a\u70b9\u6700\u591a\u7684\u4e24\u6b21\u5408\u5e76\u5206\u522b\u662f\u4f5c\u4e3a\u8d77\u70b9\u548c\u7ec8\u70b9\u51fa\u73b0\u7684\uff0c\u4e8e\u662f\u53ef\u4ee5\u5c06\u4e00\u4e2a\u70b9\u62c6\u5206\u4e3a\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9\u548c\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5165\u5ea6\u70b9\u548c\u51fa\u5ea6\u70b9\u3002\r\n\r\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $u$\uff0c\u6211\u4eec\u7528\u7f16\u53f7\u4e3a $u$ \u7684\u70b9\u8868\u793a\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9\uff0c\u7528\u7f16\u53f7\u4e3a $u+n$ \u7684\u70b9\u8868\u793a\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9\u3002\u663e\u800c\u6613\u89c1\u5728\u4e8c\u5206\u56fe\u4e2d\u4e00\u4e2a\u7ec8\u70b9\u4f1a\u4e0e\u4e00\u4e2a\u8d77\u70b9\u5339\u914d\uff0c\u8868\u793a\u539f\u56fe\u4e2d\u7684\u4e24\u6761\u8def\u5f84\u5408\u5e76\u3002\r\n\r\n\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u4e00\u6761\u8fb9 $(u,v)$\uff0c\u6211\u4eec\u5728\u4e8c\u5206\u56fe\u4e2d\u8fde\u4e00\u6761\u8fb9 $(u,v+n)$ \u5373\u53ef\u3002\r\n\r\n\u4f7f\u7528\u5308\u7259\u5229\u7b97\u6cd5\u6c42\u51fa\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\uff0c\u5373\u4e3a\u539f\u56fe\u7684\u6700\u5927\u5408\u5e76\u6b21\u6570\u3002\r\n\r\n\u5728\u4e00\u5f00\u59cb\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u6761\u72ec\u7acb\u7684\u8def\u5f84\uff0c\u6bcf\u6b21\u5408\u5e76\u5c06\u4e24\u6761\u8def\u5f84\u5408\u5e76\u4e3a\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48\u6700\u7ec8\u8def\u5f84\u5373\u4e3a\u70b9\u6570\u51cf\u53bb\u6700\u5927\u5339\u914d\u6570\uff0c\u8fd9\u6837\u6c42\u5f97\u7684\u8def\u5f84\u8986\u76d6\u5373\u4e3a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002\r\n\r\n\u5173\u4e8e\u8def\u5f84\u8986\u76d6\u65b9\u6848\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u8003\u8651\u4e8c\u5206\u56fe\u4e0e\u539f\u56fe\u7684\u8f6c\u5316\u5173\u7cfb\uff1a\u4e00\u4e2a\u70b9\u5728\u539f\u56fe\u4e2d\u4f5c\u4e3a\u4e00\u6761\u8def\u5f84\u7684\u8d77\u70b9\u51fa\u73b0\uff0c\u8bf4\u660e\u5176\u5728\u4e8c\u5206\u56fe\u4e2d\u4f5c\u4e3a\u8d77\u70b9\u7684\u5bf9\u5e94\u70b9\u6ca1\u6709\u4e0e\u53e6\u4e00\u4e2a\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9\u5339\u914d\u3002\u4e8e\u662f\u6211\u4eec\u626b\u63cf\u4e8c\u5206\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8d77\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u4e0a\u5219\u8bf4\u660e\u5b83\u662f\u4e00\u6761\u8def\u5f84\u7684\u8d77\u70b9\uff0c\u5176\u5728\u8def\u5f84\u4e0a\u7684\u540e\u7ee7\u7ed3\u70b9\u5373\u4e3a\u5b83\u4f5c\u4e3a\u7ec8\u70b9\u5bf9\u5e94\u70b9\u6240\u5339\u914d\u7684\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\u4e0d\u65ad\u8f93\u51fa\uff0c\u76f4\u81f3\u5f53\u524d\u70b9\u4f5c\u4e3a\u7ec8\u70b9\u5bf9\u5e94\u70b9\u6ca1\u6709\u88ab\u5339\u914d\u3002\r\n\r\n```cpp\r\n#include <iostream>\r\n\r\nconst int maxN = 150;\r\nconst int maxM = 6000;\r\n\r\nint n, m;\r\nint u, v;\r\n\r\nnamespace graph {\r\n    struct Vertex {\r\n        int vis;\r\n        int head;\r\n        int match;\r\n    } vertex[2 * maxN + 10];\r\n\r\n    struct Edge {\r\n        int head;\r\n        int next;\r\n    } edge[maxM + 10];\r\n\r\n    int ecnt;\r\n\r\n    void addEdge(int tail, int head) {\r\n        ecnt++;\r\n        edge[ecnt].head = head;\r\n        edge[ecnt].next = vertex[tail].head;\r\n        vertex[tail].head = ecnt;\r\n        return;\r\n    }\r\n\r\n    bool DFS(int u, int t) {\r\n        for (int e = vertex[u].head; e; e = edge[e].next) {\r\n            int v = edge[e].head;\r\n            if (vertex[v].vis == t) continue;\r\n            vertex[v].vis = t;\r\n            if (vertex[v].match == 0 || DFS(vertex[v].match, t)) {\r\n                vertex[v].match = u;\r\n                vertex[u].match = v;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nvoid print(int u) {\r\n    while (u != - n) {\r\n        std::cout << u << ' ';\r\n        u = graph::vertex[u].match - n;\r\n    }\r\n    std::cout << '\\n';\r\n    return;\r\n}\r\n\r\nint main() {\r\n    int matched = 0;\r\n    std::cin >> n >> m;\r\n    for (int i = 1; i <= m; i++) std::cin >> u >> v, graph::addEdge(u, n + v);\r\n    for (int i = 1; i <= n; i++) if (graph::DFS(i, i)) matched++;\r\n    for (int i = 1; i <= n; i++) if (graph::vertex[i + n].match == 0) print(i);\r\n    std::cout << n - matched << '\\n';\r\n    return 0;\r\n}\r\n```",
        "postTime": 1684399147,
        "uid": 278046,
        "name": "Lyccrius",
        "ccfLevel": 5,
        "title": "P2764 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898"
    },
    {
        "content": "\u8981\u6c42\u7684\u662f\u6700\u5c11\u8def\u5f84\u6570\u5c06\u6240\u6709\u7684\u70b9\u90fd\u8986\u76d6\u6389\u3002\n\n\u7531konig\u5b9a\u7406\u77e5\uff1a\u6700\u5c0f\u70b9\u8986\u76d6=\u6700\u5927\u5339\u914d\u6570\uff1b\n\u800c\u8be5\u9898\u62bd\u51fa\u6a21\u578b\u5c31\u6210\u4e86\uff1a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff1b\n\u6700\u5c0f\u8def\u5f84\u8986\u76d6=\u70b9\u6570-\u6700\u5927\u5339\u914d\u6570\uff1b\n\n\u5982\u4f55\u7406\u89e3\u8fd9\u4e2a\u7ed3\u8bba\u5462\uff1f(\u8fd9\u4e2a\u89e3\u91ca\u5e76\u4e0d\u4e25\u8c28\uff0c\u53ea\u662f\u4e3a\u4e86\u5e2e\u52a9\u7406\u89e3\uff0c\u8bf7\u52ff\u55b7)\n\t\u52a0\u51651-->2-->3;\n\t\u53ef\u4ee5\u8f6c\u5316\u4e3a1-->2';2-->3';\n\t1,2,3\u5728X\u4e2d\uff0c1',2',3'\u5728Y\u4e2d\uff1b\u8def\u5f84\u6570=3-2\uff1b\u7b26\u5408\u7ed3\u8bba\uff1b\n\t\u518d\u4e3e\u4f8b1-->2,1-->3,2-->4,3-->4;\n\t\u53ef\u4ee5\u8f6c\u5316\u4e3a1-->2',1-->3',2-->4',3-->4';\u6700\u5927\u5339\u914d\u6570\u4e3a2\uff1b\u6700\u5c11\u8def\u5f84\u6570\u4e3a2.\u7b26\u5408\u7ed3\u8bba\n\u7531\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u5206\u6790\u4e00\u4e0b\uff1a\n\tx\u4e0ex'\u90fd\u5904\u4e8e\u5339\u914d\u8fb9\u4e2d\u65f6\uff0c\u8bf4\u660e\u70b9x\u5904\u4e8e\u4e00\u6761\u8def\u5f84\u4e2d\uff1b\u800c\u4e00\u6761\u8def\u5f84\u4e2d\u7684\u5f00\u5934\u70b9\u4e0e\u7ed3\u5c3e\u70b9\u7684x\u548cx'\u53ea\u80fd\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u3002\u6b64\u65f6(\u8be5\u8def\u5f84\u4e2d\u7684)\u70b9\u4e2a\u6570-\u8fb9\u6570=1;\n\u90a3\u4e48\u6709\u591a\u5c11\u4e2a\u201c1\u201d\u5c31\u8bf4\u660e\u6709\u591a\u5c11\u6761\u8def\u5f84\u3002\u5c31\u53ef\u4ee5\u8bf4\u660e\u6700\u5c0f\u8def\u5f84\u8986\u76d6=\u70b9\u6570-\u6700\u5927\u5339\u914d\u6570\uff1b\n\n\u8bc1\u660e\u4e86\u4ee5\u4e0a\u7684\u7ed3\u8bba\u540e\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u5efa\u6a21\u4e86\uff1a\n\t\u628a\u4e00\u4e2a\u70b9\u62c6\u6210x\uff0cx'\uff0cs\u5411\u6240\u6709\u7684x\u8fde\u8fb9\uff0c\u6240\u6709\u7684x' \u5411t\u8fde\u8fb9\uff0c \u5982\u679cx1-->y1\uff0c\u5c31\u5c06x1\u5411y1\u2019\u8fde\u8fb9\uff0c\u6240\u6709\u7684\u8fb9\u5bb9\u91cf\u4e3a1(\u53cd\u8fb9\u5bb9\u91cf\u4e3a0)\uff1b\n\t\u7136\u540e\u5f00\u59cb\u8dd1\u6700\u5927\u6d41\uff0c\u5b9e\u9645\u4e0a\u8dd1\u51fa\u6765\u7684\u6700\u5927\u6d41\u5c31\u662f\u6700\u5927\u5339\u914d\u6570\uff0c\u90a3\u4e48\u6700\u5c0f\u8fb9\u8986\u76d6=n-ans\uff1b\n\u63a5\u7740\u8981\u5f00\u59cb\u8bf4\u660e\u6bcf\u4e00\u6761\u8def\u5f84\uff1a\n\t\u4ece1-n\u90fd\u679a\u4e3e\u4e00\u8fb9\uff0c\u6bcf\u4e00\u4e2a\u70b9\u8fde\u5411\u7684\u662fx',\u5e76\u4e14\u5982\u679c\u6700\u5927\u6d41\u6d41\u5411\u4e86x'(\u6d41\u5411\u4e86x\u2019\u5c31\u8bf4\u660e\u8be5\u8fb9\u6d41\u91cf\u4e3a0\uff09\uff0c\u7136\u540e\u8f93\u51fa\u8be5\u503c\uff0c\u7ee7\u7eeddfs\u3002\n\t\u6ce8\u610f\u8981\u6392\u9664s\uff0ct\u7684\u70b9\uff1b\n    ```\n#include<bits/stdc++.h> \nusing namespace std;\nconst int maxn=600000+5;\nint n,m,k=1,head[maxn];\nstruct node\n{\n\tint to,next,w;\n}edge[maxn*2];\nvoid add(int u,int v,int w)\n{\n\tedge[++k].to=v;edge[k].next=head[u];head[u]=k;edge[k].w=w;\n}\nint s,t,ans,deep[maxn];\nbool bfs()\n{\n\tqueue<int>q;\n\tmemset(deep,0,sizeof(deep));\n\tdeep[s]=1;q.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=head[x];i;i=edge[i].next)\n\t\t{\n\t\t\tif(edge[i].w&&!deep[edge[i].to])\n\t\t\t{\n\t\t\t\tdeep[edge[i].to]=deep[x]+1;\n\t\t\t\tq.push(edge[i].to);\n\t\t\t}\n\t\t}\n\t}\n\tif(deep[t])return 1;\n\treturn 0;\n}\nint dfs(int x,int F)\n{\n\tif(x==t)return F;\n\tint f=0;\n\tfor(int i=head[x];i;i=edge[i].next)\n\t{\n\t\tif(deep[edge[i].to]==deep[x]+1&&edge[i].w)\n\t\t{\n\t\t\tint w=dfs(edge[i].to,min(F,edge[i].w));\n\t\t\tedge[i].w-=w;edge[i^1].w+=w;f+=w;F-=w;\t\n\t\t}\n\t}\n\tif(!f)deep[x]=0;\n\treturn f;\n}\nvoid dinic()\n{\n\twhile(bfs())\n\t{\n\t\tans+=dfs(s,0x3f3f3f3f);\n\t}\n}\nint vis[maxn];\nvoid work(int x)\n{\n\tfor(int i=head[x];i;i=edge[i].next)\n\t{\n\t\tint TO=edge[i].to;\n\t\tif(TO>2*n)continue;\n\t\tif(TO>n)TO-=n;\n\t\tif(edge[i].w==0&&!vis[TO])\n\t\t{\n\t\t\tint x=edge[i].to;\n\t\t\tif(x>n)x-=n;\n\t\t\tcout<<x<<' ';\n\t\t\tvis[x]=1;\n\t\t\twork(x);\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\ts=2*n+1;t=s+1;\n\tfor(int i=1;i<=n;i++)add(s,i,1),add(i,s,0);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b;\n\t\tcin>>a>>b;\n\t\tadd(a,b+n,1);add(b+n,a,0);\n\t}\n\tfor(int i=1;i<=n;i++)add(i+n,t,1),add(t,i+n,0);\n\tdinic();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!vis[i])\n\t\t{\n\t\t\tvis[i]=1;\n\t\t\tcout<<i<<' ';\n\t\t\twork(i);\n\t\t\tcout<<endl;\n\t\t}\n\t}\n\tcout<<n-ans<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1574434774,
        "uid": 219687,
        "name": "Phoenix_ZH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "1.\u5efa\u7acb\u4e24\u4e2a\u96c6\u5408$x$\u548c$y$\n\n2.\u5982\u679c\u6709\u4e00\u6761\u8fb9$<u,v>$,\u5219\u4ece$x$\u96c6\u5408\u4e2d\u7684$u$\u70b9\u8fde\u5411$y$\u96c6\u5408\u7684$v$\u70b9\uff0c\u5bb9\u91cf\u4e3a$inf$\n\n3.\u4ece$s$\u5411$x$\u4e2d\u6bcf\u4e00\u4e2a\u70b9\u8fde\u8fb9\uff0c\u4ece$y$\u4e2d\u6bcf\u4e00\u4e2a\u70b9\u5411$t$\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a$1$\n\n\u7b54\u6848\u5c31\u662f$n-$\u6700\u5927\u5339\u914d\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u5982\u679c\u4e24\u4e2a\u70b9\u5339\u914d\uff0c\u5c31\u610f\u5473\u7740\u4ed6\u4eec\u53ef\u4ee5\u7528\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u8def\u5f84\u6570\u91cf\u5c31$-1$\n \n```cpp\n#include <bits/stdc++.h>\n\n#define R register\n#define ll long long\n#define cmax(a, b) ((a < b) ? b : a)\n#define cmin(a, b) ((a < b) ? a : b)\n#define sum(a, b, mod) ((a + b) % mod)\n\nconst int MaxN = 2e4 + 10;\nconst int MaxM = 5e5 + 10;\nconst int inf = (1 << 30);\n\nstruct edge\n{\n    int to, next, cap;\n};\n\nedge e[MaxM];\nint n, m, s = 20000, t = 20001, cnt = 1, ans;\nint head[MaxN], dep[MaxN], cur[MaxN], a[MaxN], vis[MaxN], to[MaxN];\n\ninline void add(int u, int v, int c)\n{\n    ++cnt;\n    e[cnt].to = v;\n    e[cnt].next = head[u];\n    e[cnt].cap = c;\n    head[u] = cnt;\n}\n\ninline void add_edge(int u, int v, int c) { add(u, v, c), add(v, u, 0); }\n\ninline int read()\n{\n    int x = 0;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n        ch = getchar();\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return x;\n}\n\ninline int bfs()\n{\n    memset(dep, 0, sizeof(dep));\n    memcpy(cur, head, sizeof(head));\n    std::queue<int> q;\n    dep[s] = 1;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        for (int i = head[u]; i; i = e[i].next)\n        {\n            int v = e[i].to, c = e[i].cap;\n            if (dep[v] || !c)\n                continue;\n            dep[v] = dep[u] + 1;\n            q.push(v);\n        }\n    }\n    return dep[t];\n}\n\ninline int dinic(int u, int flow)\n{\n    if (u == t)\n        return flow;\n    int rest = flow;\n    for (int i = cur[u]; i && (flow - rest < flow); i = e[i].next)\n    {\n        int v = e[i].to, c = e[i].cap;\n        if (dep[v] != dep[u] + 1 || !c)\n            continue;\n        int k = dinic(v, cmin(rest, c));\n        if (!k)\n            dep[v] = dep[u] + 1;\n        else\n        {\n            e[i].cap -= k;\n            e[i ^ 1].cap += k;\n            rest -= k;\n            if (e[i].to > n)\n                vis[e[i].to - n] = 1;\n            to[u] = e[i].to;\n        }\n    }\n    if (flow - rest < flow)\n        dep[u] = -1;\n    return flow - rest;\n}\n\ninline void solve()\n{\n    int now = 0;\n    while (bfs())\n        while ((now = dinic(s, inf)))\n            ans += now;\n}\n\nint main()\n{\n    n = read(), m = read();\n    for (int i = 1; i <= m; i++)\n    {\n        int u = read(), v = read();\n        add_edge(u, v + n, inf);\n    }\n    for (int i = 1; i <= n; i++)\n        add_edge(s, i, 1), add_edge(i + n, t, 1);\n    solve();\n    for (int i = 1; i <= n; i++)\n    {\n        if (vis[i])\n            continue;\n        printf(\"%d \", i);\n        int t = i;\n        while (to[t])\n        {\n            printf(\"%d \", to[t] - n);\n            t = to[t] - n;\n        }\n        puts(\"\");\n    }\n    printf(\"%d\\n\", n - ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1560076488,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "**\u6700\u5927\u6d41=\u6700\u5c0f\u5272**\n\nISAP\u6700\u5927\u6d41+\u6307\u9488\u5b58\u56fe\n\n## \u5efa\u56fe\n\n* \u628a\u539f\u56fe\u6bcf\u4e00\u4e2a\u8282\u70b9$i$\u62c6\u6210\u5165\u70b9$i$\u548c\u51fa\u70b9$i + n$\uff0c\u8bbe\u8d85\u7ea7\u6e90\u70b9\u4e3a$0$\uff0c\u8d85\u7ea7\u6c47\u70b9\u4e3a$n \\times 2 + 1$\n\n* \u5bf9\u4e8e$\\forall i \\in [1, n]$\uff0c\u4ece$0$\u5411$i$\u8fde\u8fb9\uff0c\u5bb9\u91cf$1$\n\n* \u5bf9\u4e8e$\\forall i \\in [1, n]$\uff0c\u4ece$i + n$\u5411$n \\times 2 + 1$\u8fde\u8fb9\uff0c\u5bb9\u91cf$1$\n\n* \u5bf9\u4e8e\u8f93\u5165\u4e00\u6761\u8fb9$u \\to v$\uff0c\u4ece$u$\u5411$v + n$\u8fde\u8fb9\uff0c\u5bb9\u91cf$1$\n\n## \u8f93\u51fa\n\n\u6211\u4eec\u8981\u627e\u5230**\u6ca1\u88ab\u5272\u6389\u5e76\u4e14\u662f\u4e00\u6761\u8def\u5f84\u8d77\u70b9\u7684\u70b9**\uff0c\u7136\u540e\u9012\u5f52\u8f93\u51fa\u8fd9\u6761\u8def\u5f84\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\n\n\u6700\u7ec8\u8def\u5f84\u6570\u4e3a$n - maxflow$\n\n## \u4ee3\u7801\n\n\n```cpp\n// luogu-judger-enable-o2\n#include <queue>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAXN = 65;\nconst int MAXM = 6e3 + 5;\nconst int INF = 0x3f3f3f3f;\n\nint n, m;\n\nstruct Edge{\n    int to, val;\n    Edge *nxt, *ops;\n    Edge(int to, int val, Edge *nxt): to(to), val(val), nxt(nxt) {}\n};\n\nnamespace ISAP{\n    Edge *head[MAXN << 1], *cur[MAXN << 1];\n    int s, t, dep[MAXN << 1], gap[MAXN << 1], res;\n    \n    void AddEdge(int u, int v, int w) {\n        head[u] = new Edge(v, w, head[u]);\n        head[v] = new Edge(u, 0, head[v]);\n        head[v]->ops = head[u]; head[u]->ops = head[v];\n    }\n    \n    void Bfs() {\n        memset(dep, -1, sizeof(dep));\n        memset(gap, 0, sizeof(gap));\n        dep[t] = 0; gap[dep[t]]++;\n        queue<int> q; q.push(t);\n        while (!q.empty()) {\n            int u = q.front(); q.pop();\n            for (Edge *e = head[u]; e; e = e->nxt) {\n                int v = e->to;\n                if (dep[v] != -1) continue;\n                dep[v] = dep[u] + 1;\n                gap[dep[v]]++;\n                q.push(v);\n            }\n        }\n    }\n    \n    int Dfs(int u, int flow) {\n        if (u == t) {\n            res += flow;\n            return flow;\n        }\n        int used = 0;\n        for (Edge *e = head[u]; e; e = e->nxt) {\n            int v = e->to;\n            if (e->val && dep[v] == dep[u] - 1) {\n                int mi = Dfs(v, min(e->val, flow - used));\n                if (mi) {\n                    e->val -= mi;\n                    e->ops->val += mi;\n                    used += mi;\n                }\n                if (used == flow) return used;\n            }\n        }\n        gap[dep[u]]--;\n        if (gap[dep[u]] == 0) dep[s] = n * 2 + 3;\n        dep[u]++;\n        gap[dep[u]]++;\n        return used;\n    }\n    \n    void Work() {\n        res = 0;\n        Bfs();\n        while (dep[s] <= n << 1) Dfs(s, INF);\n    }\n    \n    void Print(int u) {//\u8f93\u51fa\u8def\u5f84\n        cout << u << ' ';\n        for (Edge *e = head[u]; e; e = e->nxt) {\n            int v = e->to;\n            if (e->val == 0 && v > n && v <= n << 1) {\n                Print(v - n);\n                return;\n            }\n        }\n    }\n}\n\nint main() {\n    ios :: sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n    cin >> n >> m;\n    ISAP :: s = 0; ISAP :: t = n * 2 + 1;\n    for (int i = 1; i <= m; i++) {\n        int x, y;\n        cin >> x >> y;\n        ISAP :: AddEdge(x, y + n, 1);\n    }\n    for (int i = 1; i <= n; i++) {\n        ISAP :: AddEdge(0, i, 1);\n        ISAP :: AddEdge(i + n, n * 2 + 1, 1);\n    }\n    ISAP :: Work();\n    /*for (Edge *e = ISAP :: head[0]; e; e = e->nxt) {\n        if (e->val == 0) ISAP :: Print(e->to), cout << endl;\n    }*/\n    //for (int i = 1; i <= n; i++) if (!nots[i]) ISAP :: Print(i), cout << endl;\n    for (int i = 1; i <= n; i++) {//\u627e\u8d77\u70b9\n        bool ff = false;\n        for (Edge *e = ISAP :: head[i + n]; e; e = e->nxt) {\n            int v = e->to;\n            if (e->val && v >= 1 && v <= n) {\n                ff = true;\n                break;\n            }\n        }\n        if (!ff) ISAP :: Print(i), cout << endl;\n    }\n    cout << n - ISAP :: res << endl;\n    return 0;\n}\n```\n\n~~\u53cd\u6284\u88ad\u81ea\u5bfb~~",
        "postTime": 1555216389,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "\u770b\u5230\u5f88\u591adalao\u5199\u7684\u90fd\u662f\u7f51\u7edc\u6d41\u89e3\u6cd5\uff0c\u672c\u5f31\u56e0\u4e3a\u5148\u5b66\u5308\u7259\u5229\u540e\u5b66\u7f51\u7edc\u6d41\u7684\u7f18\u6545\uff0c\u6240\u4ee5\u4e8c\u5206\u56fe\u76f8\u5173\u90fd\u5c1d\u8bd5\u80fd\u901a\u8fc7\u5308\u7259\u5229\u5c31\u7528\u5308\u7259\u5229\u505a\u3002\n\n\u8fd9\u9053\u9898\u9996\u5148\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff1a\u4ed6\u662f\u6709\u5411\u56fe\uff01\u6709\u5411\u56fe\uff01\n\u5982\u679c\u5f53\u505a\u65e0\u5411\u56fe\uff0c\u5229\u7528\u6211\u4e00\u5f00\u59cb\u60f3\u7684\u4e00\u77e5\u534a\u89e3\u7684\u3010\u6700\u77ed\u8def\u5f84\u8986\u76d6\u6570 = \u9876\u70b9\u6570 - \u6700\u5927\u5339\u914d\u6570\u3011(\u5f88\u597d\u60f3\uff0c\u53ea\u8981\u8003\u8651\u5230\u591a\u5408\u5e76\u4e00\u4e2a\u70b9\uff0c\u5c31\u5c11\u4e00\u6761\u7684\u60c5\u51b5\uff09\uff0c\u5c31\u4f1a\u8fc7\u6837\u4f8b\u4f46\u662f\u5374WA\u7684\u4e0d\u77e5\u9053\u5230\u54ea\u91cc\u53bb\u4e86\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u6709\u5411\u56fe\u7684\u6700\u77ed\u8def\u5f84\u60c5\u51b5\uff0c\u6211\u4eec\u5e94\u8be5\u5c06\u4ed6\u8f6c\u6210\u4e8c\u5206\u56fe\u7684\u60c5\u51b5\u3002\u5982\u4f55\u8f6c\u6362\u5462\uff1f\u62c6\u70b9\uff01\n![\u62c6\u70b9](http://thyrsi.com/t6/387/1539685008x-1566701873.jpg)\n\u4e4b\u524d\u770b\u5230\u9898\u89e3\u6709\u4eba\u5199\u7684\u62c6\u70b9\uff0c\u767e\u601d\u4e0d\u5f97\u5176\u89e3\u4e3a\u5565\u8981\u62c6\u3002\u770b\u5230\u8fd9\u5f20\u56fe\u79d2\u61c2\u3002\n\n\u4ee3\u7801\u91cc\u4e5f\u6709\u6ce8\u91ca\uff0c\u770b\u4ee3\u7801\u5427(\u4ee3\u7801\u8f93\u51fa\u8def\u5f84\u53c2\u8003\u4e86\u9898\u89e3\u91cc\u552f\u4e00\u4e00\u4e2a\u5308\u7259\u5229\u7684\u7684\u8001\u54e5)\n```cpp\n// \u6838\u5fc3\u5728\u4e8e\u62c6\u70b9\u3002\n// \u4e00\u5f00\u59cb\u8ba4\u4e3a\u8fd9\u79cd\u60c5\u51b5\u548c\u666e\u901a\u7684\u4e8c\u5206\u56fe\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u6240\u4ee5\u76f4\u63a5\u6b63\u5e38\u5efa\u56fe\u8dd1\u5308\u7259\u5229\u4e86\n// (\u56e0\u4e3a\u521d\u5b66\u5308\u7259\u5229\uff0c\u8fd8\u5efa\u4e86\u53cc\u5411\u8fb9)\n// \u540e\u6765\u53d1\u73b0\u53ea\u80fd\u8fc7\u4e00\u4e2a\u70b9\uff0c\u4e8e\u662f\u67e5\u4e86\u67e5\u9898\u89e3\u3002\n// \u53d1\u73b0\u3010\u6709\u5411\u56fe\u3011\u7684\u6700\u77ed\u8def\u5f84\u8986\u76d6\u95ee\u9898\u548c\u4e8c\u5206\u56fe\u6700\u77ed\u8def\u5f84\u8986\u76d6\u95ee\u9898\u662f\u4e0d\u4e00\u6837\u7684(\u4f46\u662f\u53ef\u4ee5\u8f6c\u5316)\n// \u5982 1->2->3\uff0c\u76f4\u63a5\u5308\u7259\u5229\u663e\u7136\u95ee\u9898\u591a\u591a\u3002\n// \u4f46\u662f\u5982\u679c\u53d8\u6210 1 -> 2 -> 2' -> 3 . \u8fd9\u65f6\u5019\u5728\u505a\u5308\u7259\u5229\uff0c\u95ee\u9898\u5c31\u8fce\u5203\u800c\u89e3\u5566(\u6ce8\u610f\u4e4b\u540e\u8f93\u51fa\u7684\u65f6\u5019\u5408\u5e76)\n//\n#include<bits/stdc++.h>\nusing namespace std ;\nconst int maxn = 10100;\nstruct Edge\n{\n\tint to ;\n\tint nxt = -1 ;\n}edge[maxn];\nint tol = 0 ; \nint head[maxn];\nint n , m ;\n\nvoid init()\n{\n\ttol = 0 ;\n\tmemset(head,-1,sizeof(head));\n\tmemset(edge,-1,sizeof(edge));\n}\nvoid addedge( int u , int v )\n{\n\tedge[tol].to = v ;\n\tedge[tol].nxt = head[u];\n\thead[u] = tol++;\n}\n\n\nbool used[maxn];\nint linker[maxn];\n\nint dfs( int u )\n{\n\tfor( int i = head[u] ; ~i ; i = edge[i].nxt )\n\t{\n\t\tint to = edge[i].to ;\n\t\tif( !used[to] )\n\t\t{\n\t\t\tused[to] = true ;\n\t\t\tif( linker[to] == 0 || dfs(linker[to]) )\n\t\t\t{\n\t\t\t\tlinker[to] = u ;\n\t\t\t\tlinker[u] = to ;\n\t\t\t\treturn 1 ;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0 ;\n}\n\nint xiongyali(int n )\n{\n\tint res = 0;\n\tfor( int i = 1 ; i <= n ; i++)\n\t{\n\t\tmemset(used,0,sizeof(used));\n\t\tif( dfs(i) )\n\t\t\tres++;\n\t}\n\treturn res;\n}\n\n\n\n\nvoid print( int x)\n{\n\tx += n; //\u4e3a\u4e86\u7edf\u4e00\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u52a0\u4e00\u6b21\n\tdo \n\t{\n\t\tx = x - n ;\n\t\tcout << x << ' ' ;\n\t\tused[x] = 1 ;\n\t\tx = linker[x]; \n\t\t// linker[x]\u662f\u4e2a\u5927\u4e8en\u7684\uff0c\u6240\u4ee5\u6bcf\u6b21\u8981\u76f8\u51cf\n\t}\n\twhile(x);\n\tcout << endl;\n}\nint main()\n{\n\tinit();\n\tcin >> n >> m ;\n\tfor( int i = 1 ; i <= m ; i++)\n\t{\n\t\tint u , v ;\n\t\tcin >> u >> v ;\n\t\taddedge(u,v+n);\n\t\t//addedge(v+n,u); \u52a0\u4e0a\u4f1aRE\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\n\t}\n\tint res = xiongyali(n);\n\tmemset(used,0,sizeof(used));\n//\tcout << \"DEBUG\" << endl ;\n//\tfor( int i = 1 ; i <= n ; i++)\n//\t\tcout << i << \"->\" << linker[i] << endl;  \n//\tcout << endl ;\n\tfor( int i = 1 ; i <= n ; i++)\n\t{\n\t\tif( !used[i] )\n\t\t\tprint(i);\n\t\t\t//dfs2(i , vector<int>() );\n\t}\n\t//cout << res << endl ;\n\t// \u6700\u77ed\u8def\u5f84\u8986\u76d6\u6570 = \u9876\u70b9\u6570 - \u6700\u5927\u5339\u914d\u8fb9\u6570 = \u9876\u70b9\u6570 - \u6700\u591a\u5339\u914d\u70b9\u6570\n\tcout << n - res << endl ; \n\treturn 0 ;\n}\n\n\n\n```\n\n\n",
        "postTime": 1539685074,
        "uid": 1270,
        "name": "xiekeyi98",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "\u987a\u7740luogu\u8bd5\u70bc\u573a\u5237\u7f51\u7edc\u6d41\uff0c\u8fd8\u662f\u633a\u597d\u7684..\n\n\u4e0a\u4e00\u9898\u662fP2765 \u9b54\u672f\u7403\u95ee\u9898\n\n\u6b63\u89e3\u662f\u8f6c\u6362\u6210\u4e8c\u5206\u56fe\uff0c\u8fdb\u884c\u6700\u5c0f\u8986\u76d6\u7684\u5339\u914d\uff0c\u627e\u8def\u5f84\u4e5f\u56e0\u6b64\u4f1a\u5bb9\u6613\u5f88\u591a.\n\n##  emmm....\u626f\u8fdc\u4e86\uff0c\u56de\u5230\u8fd9\u9053\u9898\u3002\n\n\u6211\u4eec\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\uff0c\u5206\u522b\u653e\u5728\u8fd9\u4e2a\u4e8c\u5206\u56fe\u7684\u4e24\u8fb9\uff0c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u6211\u4eec\u5c06from\u70b9\u548cto\u70b9\uff0c\u5de6\u53f3\u5404\u4e00\u4e2a\u8fdb\u884c\u8fde\u8fb9\n\nDinic\u627e\u6700\u5927\u5339\u914d\uff08\u849f\u84bb\u4e0d\u4f1a\u5308\u7259\u5229qwq\uff09\u3002\u6c42\u51fa\u70b9\u6570\uff08\u5f53\u7136\uff0c\u4e5f\u662f\u4e8c\u5206\u56fe\u603b\u70b9\u6570\u7684\u4e00\u534a\uff09-\u6700\u5927\u5339\u914d\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u627e\u70b9\u6570-\u6700\u5927\u5339\u914d\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u8def\u5f84\u603b\u70b9\u6570\u4e3an\uff0c\u90a3\u4e48\u5728\u540c\u4e00\u4e2a\u8def\u5f84\u4e0a\u7684(n-1)\u4e2a\u70b9\uff0c\u4f1a\u56e0\u4e3a\u5339\u914d\u800c\u5220\u6389\u3002\n\n\u90a3\u4e48\u7559\u4e0b\u7684\u70b9\uff0c\u5fc5\u7136\u662f\u4e00\u6761\u8def\u5f84\u7684\u5f00\u59cb\uff08\u6216\u7ed3\u675f\uff09\n\n\u4e24\u9053\u9898\u90fd\u662f\u8fd9\u6837\u7684\u5efa\u6a21\uff0c\u5404\u81ea\u90fd\u5341\u5206\u62bd\u8c61..\n\n\u627e\u8def\u5f84\u7684\u65b9\u6cd5\uff1a\n\nbase\u662f\u6c47\u70b9\u4e00\u4fa7\u7684\u70b9\uff0c\u9700\u8981\u989d\u5916\u589e\u52a0\u7684\u5e8f\u53f7\u3002\u53c2\u8003\u8fd9\u6bb5\u4ee3\u7801\u540e\u9762\u7684\u5b8c\u6574\u4ee3\u7801\u3002\n```\nbool ok[505];\nvoid dfss(int u)\n{\n\tok[u]=true;\n\tprintf(\"%d \",u);\n\tfor(int i=0;i<a[u].size();i++){\n\t\tro c=edge[a[u][i]];\n\t\tif(c.to>base&&c.flow<1&&ok[c.to-base]==0) dfss(c.to-base);\n\t}\n}\n\nvoid find()\n{\n\tfor(int i=1;i<=n;i++) if(!ok[i]){\n\t\tdfss(i);\n\t\tprintf(\"\\n\");\n\t}\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 2005\n#define en 2003\n#define base 1000\n#define me(x,y) memset(x,y,sizeof(x))\n#define fo(i,a,b) for(int i=a;i<=b;i++)\n#define inf 0x3f3f3f3f\nint n,m,ans;\nstruct ro{\n\tint fr,to,flow;\n};\nvector<ro> edge;\nvector<int> a[maxn];\nint d[maxn];\nqueue<int> q;\nbool bfs()\n{\n\tme(d,-1);d[0]=0;q.push(0);\n\twhile(!q.empty()){\n\t\tint now=q.front();q.pop() ;\n\t\tfor(int i=0;i<a[now].size();i++){\n\t\t\tro c=edge[a[now][i]];\n\t\t\tif(c.flow<1||d[c.to]!=-1) continue;\n\t\t\td[c.to]=d[now]+1;\n\t\t\tq.push(c.to);\n\t\t}\n\t}\n\treturn (d[en]!=-1);\n}\nint dfs(int u,int flow)\n{\n\tif(u==en) return flow;\n\tint cnt=0;\n\tfor(int i=0;i<a[u].size();i++){\n\t\tro c=edge[a[u][i]];\n\t\tif(c.flow<1||d[c.to]!=d[u]+1) continue;\n\t\tint qwq=dfs(c.to,min(c.flow,flow));\n\t\tcnt+=qwq;\n\t\tflow-=qwq;\n\t\tedge[a[u][i]].flow-=qwq;\n\t\tedge[a[u][i]^1].flow+=qwq;\n\t\tif(flow==0) break;\n\t}\n\tif(cnt==0) d[u]=-1;\n\treturn cnt;\n}\n\nvoid getb(int fr,int to,int flow)\n{\n\tro c;c.fr=fr,c.to=to;c.flow=flow;\n\tedge.push_back(c);\n\ta[fr].push_back(edge.size()-1);\n\tswap(c.fr,c.to);c.flow=0;\n\tedge.push_back(c);\n\ta[to].push_back(edge.size()-1);\n}\n\nvoid sc()\n{\n\tcin>>n>>m;\n\tfo(i,1,n) getb(0,i,1),getb(base+i,en,1);\n\tfo(i,1,m){\n\t\tint fr,to;scanf(\"%d%d\",&fr,&to);\n\t\tgetb(fr,to+base,1);\n\t}\n}\nbool ok[505];\nvoid dfss(int u)\n{\n\tok[u]=true;\n\tprintf(\"%d \",u);\n\tfor(int i=0;i<a[u].size();i++){\n\t\tro c=edge[a[u][i]];\n\t\tif(c.to>base&&c.flow<1&&ok[c.to-base]==0) dfss(c.to-base);\n\t}\n}\n\nvoid find()\n{\n\tfor(int i=1;i<=n;i++) if(!ok[i]){\n\t\tdfss(i);\n\t\tprintf(\"\\n\");\n\t}\n}\n\n\nint main()\n{\n\tsc();\n\twhile(bfs()) ans+=dfs(0,inf);\n\tfind();\n\tcout<<n-ans;\n\treturn 0;\n}\n```",
        "postTime": 1523330467,
        "uid": 29610,
        "name": "SGOI_Aromyase",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9[\u8fd9\u91cc](https://blog.csdn.net/A_Comme_Amour/article/details/79671753)\n\n\u9898\u76ee\n-\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P2764)\n\n\u9898\u89e3\n-\n\n\u539f\u7406\uff1a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570=\u70b9\u6570-\u5339\u914d\u6570\uff1b\n\u5f88\u597d\u7406\u89e3\uff1a\u4e24\u4e2a\u70b9\u53ef\u4ee5\u5339\u914d\uff0c\u76f8\u5f53\u4e8e\u662f\u653e\u5230\u5e76\u67e5\u96c6\u91cc\u9762\uff0c\u5e76\u67e5\u96c6\u7684\u4e2a\u6570\u5c31\u662f\u8def\u5f84\u7684\u6761\u6570\uff1b\n\n\u4f46\u662f\u6211\u5bf9\u5efa\u56fe\u7684\u7406\u89e3\u4e00\u76f4\u5c31\u662f\u9519\u8bef\u7684\uff1b\n\n\u6211\u539f\u6765\u8dd1\u4e86\u4e8c\u5206\u56fe\u67d3\u8272\u5206\u6210\u4e86\u4e24\u4e2a\u96c6\u5408\uff0c\u5728\u91cc\u9762\u8dd1\u4e8c\u5206\u56fe\u5339\u914d\uff1b\u9519\u8bef\u4e4b\u5904\u5728\u4e8e\u6211\u9519\u8bef\u7684\u6ca1\u6709\u62c6\u70b9\uff1b\n\n\u4e8e\u662f\u6211\u53c8\u8ba4\u4e3a\u6bcf\u4e2a\u70b9\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u6240\u4ee5\u5c31\u6bcf\u4e2a\u70b9\u5411\u6240\u62c6\u7684\u70b9\u4e4b\u95f4\u8fde\u4e86\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff1b\u9519\u8bef\u4e4b\u5904\u5728\u4e8e\u7535\u548c\u70b9\u4e4b\u95f4\u65e0\u6cd5\u786e\u7acb\u8054\u7cfb\uff1b\n\n\u6b63\u786e\u7684\u5efa\u56fe\u65b9\u6cd5\u662f\uff1a\u6bcf\u4e2a\u70b9\u90fd\u62c6\u70b9 i \u548ci+n \u4f46\u662f\u4e0d\u76f8\u8fde\uff1bS\u8fde\u5411i \u5bb9\u91cf1\uff1b i+n\u8fde\u5411T \u5bb9\u91cf1\uff1b\u5982\u679c\u4e24\u4e2a\u70b9\u76f8\u8fdex\u8fde\u5411 y+n \uff08\u4f53\u4f1a\u4e00\u4e0b\u8fd9\u6837\u5efa\u56fe\u7684\u5de7\u5999\uff09\uff1b\u53ef\u4ee5\u8bf4\u4e24\u4e2a\u70b9\u5177\u6709*\u9690\u5f62*\u7684\u8054\u7cfb\uff1b\n\n\u4ee5 1-->2-->3\u4e3a\u4f8b\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdn.net/20180323193209466?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FfQ29tbWVfQW1vdXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\u4f46\u662f\u5efa\u56fe\u6709\u96be\u5012\u4e86\u6211\uff1bnxt[]\u548cpre[]\u5206\u522b\u8bb0\u5f55\u70b9\u7684\u540e\u7ee7\u548c\u524d\u9a71\uff1b\u9012\u5f52\u8f93\u51fa\uff1b\n\n\u4ee3\u7801\n-\n\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int maxn=1000001;\nconst int inf=1e9;\nqueue <int> q;\nint n,m,k,maxflow,a[maxn],S,T;\nstruct Edge{\n\tint next,to,dis;\n}edge[maxn<<1];\nint num_edge=-1,head[maxn],cur[maxn],deep[maxn];\nint nxt[maxn],pre[maxn];//\u5206\u522b\u8868\u793a\u70b9i\u7684\u524d\u4e00\u4e2a\u70b9\u548c\u540e\u4e00\u4e2a\u70b9\u662f\u4ec0\u4e48 \n\nvoid add_edge(int from,int to,int dis)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].dis=dis;\n\tedge[num_edge].to=to;\n\thead[from]=num_edge;\n}\nvoid add(int x,int y,int z) {add_edge(x,y,z); add_edge(y,x,0);}\n\nbool bfs(int s,int t)\n{\n\tmemset(deep,0x7f,sizeof(deep));\n\tfor (int i=0; i<=t; i++) cur[i]=head[i];\n\twhile (!q.empty()) q.pop();\n\tq.push(s); deep[s]=0;\n\twhile (!q.empty())\n\t{\n\t\tint now=q.front(); q.pop();\n\t\tfor (int i=head[now]; i!=-1; i=edge[i].next)\n\t\t{\n\t\t\tint to=edge[i].to;\n\t\t\tif (deep[to]>inf && edge[i].dis)\n\t\t\t{\n\t\t\t\tdeep[to]=deep[now]+1;\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn deep[t]<inf;\n}\n\nint dfs(int now,int t,int limit)\n{\n\tif (now==t || !limit) return limit;\n\tint flow=0,f;\n\tfor (int i=cur[now]; i!=-1; i=edge[i].next)\n\t{\n\t\tint to=edge[i].to; cur[now]=i;\n\t\tif (deep[to]==deep[now]+1 && (f=dfs(to,t,min(limit,edge[i].dis))))\n\t\t{\n\t\t\tflow+=f;\n\t\t\tlimit-=f;\n\t\t\tedge[i].dis-=f;\n\t\t\tedge[i^1].dis+=f;\n\t\t\tif (!limit && now!=S && to!=T) nxt[now]=to-n; pre[to-n]=now;\n\t\t\tif (!limit) break;\n\t\t}\n\t}\n\treturn flow;\n}\n\nvoid Dinic(int s,int t)\n{\n\twhile (bfs(s,t))\n\t\tmaxflow+=dfs(s,t,inf);\n}\nbool vis[maxn];\nvoid shuchu(int x)\n{\n\tif (!x) return;//\u5230\u8fbe\u4e86\u6e90\u70b9 \n\tif (pre[x]!=x) shuchu(pre[x]);\n\tvis[x]=1;\n\tprintf(\"%d \",x);\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&n,&m);\n\tS=0; T=2*n+1;\n\tfor (int i=1; i<=n; i++) nxt[i]=pre[i]=i;\n\tfor (int i=1; i<=n; i++) {add(S,i,1); add(i+n,T,1);}\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tint x,y; scanf(\"%d%d\",&x,&y);\n\t\tadd(x,y+n,1);\n\t}\n//\tfor (int i=0; i<=num_edge; i++) printf(\"%d: %d %d %d\\n\",i,edge[i^1].to,edge[i].to,edge[i].dis);\n\tDinic(S,T);\n//\tfor (int i=1; i<=n; i++) printf(\"%d %d\\n\",nxt[i],pre[i]);\n\tfor (int i=n; i>=1; i--)\n\t\tif (nxt[i]==i && !vis[i]) {shuchu(i); printf(\"\\n\");}\n\tprintf(\"%d\",n-maxflow);\n\treturn 0;\n}\n```\n\n\u603b\u7ed3\n-\n\n\u8f93\u51fa\u65b9\u6cd5",
        "postTime": 1521804944,
        "uid": 48036,
        "name": "\u79cb\u65e5\u79c1\u8bed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2764 \u3010\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3011"
    },
    {
        "content": "        P2764 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898    \n  \n  [https://www.luogu.org/problemnew/show/P2764]()  \n  \n  \u4eca\u5929\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u9053\u9898 \uff0c\u9996\u5148\u6211\u4eec\u5f97\u5148\u77e5\u9053\u5565\u662f \u300a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u300b ,\u4ece\u5b57\u9762\u4e0a\u6765\u770b\uff0c\u5c31\u662f\u7528\u6700\u5c11\u7684\u51e0\u6761\u7b80\u5355\u8def\u5f84\u6765\u8986\u76d6\u6240\u6709\u70b9 \u3002   \n  \u672c\u4f53\u5c31\u662f\u7136\u6211\u4eec\u8f93\u51fa\u8fd9\u5f20\u6709\u5411\u65e0\u73af\u56fe\u7684\u56fe\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u548c\u5176\u503c \u3002      \n  \u8fd9\u9053\u9898\u6211\u4eec\u8fd8\u662f\u7528\u7f51\u7edc\u6d41\u6216\u4e8c\u5206\u56fe\u6765\u505a(\u56e0\u4e3a\u88c2\u5f00\u70b9\u7684\u540e\u534a\u6bb5\u53ea\u4e0e\u4e00\u4e2a\u88c2\u5f00\u70b9\u7684\u524d\u534a\u6bb5\u76f8\u5339\u914d)\u6765\u505a , \u9996\u5148\u80af\u5b9a\u7136\u540e\u662f\u5efa\u56fe\uff0c\u8fd9\u4e5f\u662f\u7f51\u7edc\u6d41\u4e2d\u6700\u5173\u952e\u7684\u4e00\u6b65 \u3002    \n  \u5982\u4f55\u5efa\u56fe\u5462\uff0c\u6211\u4eec\u80fd\u76f4\u63a5\u5efa\u4e48\uff1f\uff0c\u8fd9\u80af\u5b9a\u662f\u4e0d\u884c\u7684\u554a\uff0c\u56e0\u4e3a\u8fd9\u6837\u5efa\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u56de\u6eaf\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u5efa\u4e00\u4e2a\u7092\u9e21\u5927\u59cb\u70b9\u4e0e\u6c47\u70b9(\u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053 $s$ \u4e0e $t$ )\uff0c\u5982\u679c\u4e0d\u88c2\u70b9\uff0c\u5c31\u4f1a\u5f88\u8ff7 \uff0c\u6700\u5927\u6d41\u5c31\u4f1a\u4e3a\u4e0d\u51c6 \u3002    \n  \u7136\u540e\u6211\u4eec\u7528\u603b\u7684 $n - dinic()$ \u5c31\u662f\u7b54\u6848 \uff0c \u4e3a\u5565\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u753b\u770b,\u5176\u5b9e\u6700\u5927\u6d41\u5c31\u662f\u6709\u591a\u5c11\u4e2a\u70b9\u53ef\u4ee5\u5408\u5230\u4e00\u8d77\u53bb \u3002  \n  \u56e0\u4e3a\u6211\u4eec\u9996\u5148\u662f\u628a $s$ \uff0c\u5411\u6240\u6709\u70b9\u7684\u524d\u534a\u8fde $1$ \u8fb9 \uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u90fd\u53ea\u6709 $1$\u7684\u6d41\u91cf,\u5f53\u6211\u4eec\u6c47\u5230 $t$ \u65f6\uff0c\u80af\u5b9a\u662f\u7531\u4e00\u4e2a\u88c2\u5f00\u70b9\u7684\u540e\u534a\u6bb5\u6d41\u8fc7\u6765 ,\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u770b\u6709\u591a\u5c11\u4e2a\u5339\u914d\u4e86\uff0c\u5c31\u662f\u8fd9\u51e0\u4e2a\u70b9\u5408\u6210\u4e86\u4e00\u4e2a\u5927\u70b9\uff0c\u6700\u540e\u6570\u6709\u51e0\u4e2a\u70b9\u5c31\u597d\u54af \u3002\n  \u7136\u540e\u6211\u4eec\u6765\u60f3\u5982\u4f55\u8f93\u51fa\uff0c\u6211\u4eec\u5148\u4ece $t$ \u70b9\u8d70\u6211\u4eec\u770b $t$ \uff0c\u70b9\u662f\u7531\u90a3\u51e0\u4e2a\u70b9\u7684\u8d21\u732e\u6765\u7684\uff0c\u7136\u540e\u6211\u4eec\u4e00\u76f4\u627e\u5339\u914d\u70b9\u5c31\u597d\u54af \u3002   \n  \n  \n  \n \n \n ```\n \n \u8bc4\u6d4b\u72b6\u6001\nAccepted  100\n\u7528\u65f6: 47ms / \u5185\u5b58: 4880KB\n \n #include<bits/stdc++.h>\n#define debug cout<<\"2333\" \nusing namespace std;\n\nconst int maxn=150001;\nconst int inf=1e8;\nint num=1;\nstruct Edge\n{\n\tint from,nt,to,dis;\n}edge[maxn];\nint head[maxn],dep[maxn],vis[maxn],viss[maxn];\n\nvoid add(int from,int to,int dis)\n{\n\tedge[++num].nt=head[from];\n\tedge[num].from=from;\n\tedge[num].to=to;\n\tedge[num].dis=dis;\n\thead[from]=num;\n}\n\nvoid ADD(int a,int b,int c)\n{\n\tadd(a,b,c);\n\tadd(b,a,0);\n}\n\nint n,m,s=0,t=50010;\n\nint bfs()\n{\n\tqueue<int> q;\n\tmemset(dep,0,sizeof(dep));\n\tdep[s]=1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i!=-1;i=edge[i].nt)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif(dep[v]==0&&edge[i].dis)\n\t\t\t\tdep[v]=dep[u]+1,q.push(v);\n\t\t}\n\t}\n\treturn dep[t]!=0;\n}\n\nint dfs(int u,int dist)\n{\n\tif(u==t) return dist;\n\tfor(int i=head[u];i!=-1;i=edge[i].nt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(dep[v]==dep[u]+1&&edge[i].dis)\n\t\t{\n\t\t\tint di=dfs(v,min(dist,edge[i].dis));\n\t\t\tif(di)\n\t\t\t{\n\t\t\t\tedge[i].dis-=di;\n\t\t\t\tedge[i^1].dis+=di;\n\t\t\t\treturn di;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint dinic()\n{\n\tint ss=0;\n\twhile(bfs())\n\t\twhile(int di=dfs(s,inf))\n\t\t\tss+=di;\n\treturn ss;\n}\n\nint sy,a[maxn];\n\nvoid work(int u)\n{\n\tfor(int i=head[u];i!=-1;i=edge[i].nt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(vis[v]) continue;\n\t\tif(edge[i].dis==0&&edge[i^1].dis==0)\n\t\t{\n\t\t\tcout<<v<<\" \";\n\t\t\tvis[v]=1;\n\t\t\twork(v);\n\t\t}\n\t}\n\treturn ;\n}\n\nvoid print(int u)\n{\n\tif(u<=s) return ;\n\tprintf(\"%d \",u);\n\tfor(int i=head[u];i!=-1;i=edge[i].nt)\n\t{\n\t\tif(!edge[i].dis&&edge[i].to<=2*n) print(edge[i].to-n);\n\t}\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head)); \n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)\n\t\tADD(s,i,1),ADD(i+n,t,1);\n\tint now=num;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tADD(u,v+n,1);\n\t}\n\tint tot=n;\n\ttot-=dinic();\n\tfor(int i=head[t];i!=-1;i=edge[i].nt)\n\t{\n\t\tif(edge[i].dis){/*cout<<edge[i].to<<\"*\"\t\tint v=edge[i].to;//\u5982\u679c\u8fd9\u6761\u8fb9\u6709\u8d21\u732e\uff0c\u5462\u4e48\u5c31\u4e0d\u8d70\uff0c\u56e0\u4e3a\u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u70b9\u80af\u5b9a\u4f1a\u4ece\u4e00\u4e2a\u6ca1\u8d21\u732e\u7684\u8fb9\u5230\u8fbe\n\t\tprint(v-n);cout<<\"\\n\";\n\t}\n\tcout<<tot<<endl;\n\treturn 0;\n}\n\n\n\n```\n\n\n  ",
        "postTime": 1543030629,
        "uid": 102786,
        "name": "Sym_Je",
        "ccfLevel": 0,
        "title": "P2764 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898"
    }
]