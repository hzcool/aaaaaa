[
    {
        "content": "\u8bbe$lenth_i$\u4e3a$s$\u5728$i$\u4f4d\u7f6e\u7684\u524d\u7f00\u7684\u540e\u7f00\u4e3a$t$\u7684\u4e00\u4e2a\u5b50\u4e32\u7684\u6700\u957f\u957f\u5ea6\uff0c\u5373\u4e3a\u4ece$i$\u4f4d\u7f6e\u5f00\u59cb\u5f80\u524d\u548c$t$\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u3002\u5176\u53ef\u4ee5\u901a\u8fc7\u5bf9$t$\u5efa\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u7136\u540e\u8ba9$s$\u5728\u81ea\u52a8\u673a\u4e0a\u5339\u914d\u6765\u6c42\u51fa\u3002\n\n\u6c42\u51fa$lenth_i$\u540e\uff0c\u5bf9\u4e8e\u533a\u95f4$[l,r]$\u7684\u4e00\u4e2a\u8be2\u95ee\uff0c\u5176\u7b54\u6848\u5373\u4e3a\uff1a\n\n$$\n\t\\max_{i=l}^r \\lbrace\\ \\min(lenth_i,i-l+1)\\ \\rbrace\n$$\n\n\u53d1\u73b0\u5185\u5c42\u7684$\\min$\u4e0d\u597d\u5904\u7406\uff0c\u8003\u8651\u5c06\u5176\u53bb\u6389\uff1a\n\n\u5f53$lenth_i \\leqslant i-l+1$\u65f6\uff0c\u5176\u503c\u4e3a$lenth_i$\uff0c\u8f6c\u5316\u5f97$i-lenth_i+1 \\geqslant l$\uff0c\u53d1\u73b0$i-lenth_i+1$\u7684\u503c\u662f\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u56e0\u4e3a\u6bcf\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c$i$\u90fd\u4f1a\u52a0\u4e00\uff0c\u800c$lenth_i$\u53ef\u80fd\u52a0\u4e00\uff0c\u53ef\u80fd\u6e05\u96f6\uff0c\u6240\u4ee5\u8be5\u503c\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u533a\u95f4$[l,r]$\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e$pos$\uff0c\u6ee1\u8db3\u6240\u6709$i \\geqslant pos$\uff0c\u90fd\u6709$i-lenth_i+1 \\geqslant l$\u3002\u90a3\u4e48\u5728\u533a\u95f4$[pos,r]$\u4e2d\uff0c$\\min$\u53d6\u5230\u4e86$lenth_i$\uff0c\u5728\u533a\u95f4$[l,pos-1]$\u4e2d\uff0c$\\min$\u53d6\u5230\u4e86$i-l+1$\u3002\n\n$pos$\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6c42\u5f97\uff0c\u7136\u540e\u7b54\u6848\u5373\u4e3a\u533a\u95f4$[pos,r]$\u5185$lenth_i$\u7684\u6700\u5927\u503c\u548c$pos-l$\u53d6$\\max$\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 400010\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint l1,l2,q,root=1,las=1,tot=1;\nint len[maxn],fa[maxn],ch[maxn][2],lenth[maxn],f[maxn][25],lg[maxn];\nchar s[maxn],t[maxn];\nvoid insert(int c)\n{\n    int p=las,np=las=++tot;\n    len[np]=len[p]+1;\n    while(p&&!ch[p][c]) ch[p][c]=np,p=fa[p];\n    if(!p) fa[np]=root;\n    else\n    {\n        int q=ch[p][c];\n        if(len[q]==len[p]+1) fa[np]=q;\n        else\n        {\n            int nq=++tot;\n            ch[nq][0]=ch[q][0],ch[nq][1]=ch[q][1];\n            len[nq]=len[p]+1,fa[nq]=fa[q],fa[q]=fa[np]=nq;\n            while(ch[p][c]==q) ch[p][c]=nq,p=fa[p];\n        }\n    }\n}\nvoid init()\n{\n    lg[0]=-1;\n    for(int i=1;i<=l1;++i) lg[i]=lg[i>>1]+1;\n    for(int i=1;i<=l1;++i) f[i][0]=lenth[i];\n    for(int j=1;j<=20;++j)\n        for(int i=1;i+(1<<j)-1<=l1;++i)\n            f[i][j]=max(f[i][j-1],f[i+(1<<(j-1))][j-1]);\n}\nint query(int l,int r)\n{\n    if(l>r) return 0;\n    int len=lg[r-l+1];\n    return max(f[l][len],f[r-(1<<len)+1][len]);\n}\nint find(int l,int r)\n{\n    int pos=r+1,L=l;\n    while(l<=r)\n    {\n        int mid=(l+r)>>1;\n        if(mid-lenth[mid]+1>=L) pos=mid,r=mid-1;\n        else l=mid+1;\n    }\n    return pos;\n}\nvoid work()\n{\n    int p=root;\n    for(int i=1;i<=l1;++i)\n    {\n        int c=s[i]-'a';\n        if(ch[p][c]) lenth[i]=lenth[i-1]+1,p=ch[p][c];\n        else\n        {\n            while(p&&!ch[p][c]) p=fa[p];\n            if(!p) p=root;\n            else lenth[i]=len[p]+1,p=ch[p][c];\n        }\n    }\n}\nint main()\n{\n    scanf(\"%s%s\",s+1,t+1);\n    l1=strlen(s+1),l2=strlen(t+1);\n    for(int i=1;i<=l2;++i) insert(t[i]-'a');\n    work(),init(),read(q);\n    while(q--)\n    {\n        int l,r,pos;\n        read(l),read(r),pos=find(l,r);\n        printf(\"%d\\n\",max(query(pos,r),pos-l));\n    }\n    return 0;\n}\n```",
        "postTime": 1593346441,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020] \u5c01\u5370\u3011"
    },
    {
        "content": "~~\u6211\u6b63\u5199\u7740\u8fd9\u9898\uff0c\u6559\u7ec3\u8dd1\u8fc7\u6765\u8bf4\uff1a\u201c\u5199\u5565\u5462\uff1f\u201d\u7136\u540e\u770b\u4e86\u4e00\u773c\u9898\u8bf4\uff1a\u201cSAM\uff1f\u201d\u7136\u800c\u6211\u6839\u672c\u4e0d\u4f1a SAM\u2026\u2026~~\n\n\u6240\u4ee5\u8fd9\u91cc\u7ed9\u4e00\u4e2a SA \u505a\u6cd5\u3002\n\n\u5176\u5b9e\u5f88\u5957\u8def\uff0c\u9996\u5148\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u63a5\u5728\u4e00\u8d77\uff0c$t$ \u63a5\u5728 $s$ \u524d\u9762\uff0c\u4e2d\u95f4\u968f\u4fbf\u653e\u4e2a\u5206\u9694\u7b26\uff0c\u53d8\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u641e\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684 SA\u3002\n\n\u73b0\u5728\u6211\u4eec\u7684\u76ee\u6807\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $s$ \u7684\u540e\u7f00\uff0c\u5728 $t$ \u4e2d\u6c42\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u540e\u7f00\u4e0e\u8fd9\u4e2a $s$ \u7684\u540e\u7f00\u7684 LCP \u6700\u5927\u3002\n\n\u7531 SA \u7684\u6027\u8d28\uff0c\u8fd9\u4e2a\u70b9\u8981\u4e48\u662f\u540e\u7f00\u6570\u7ec4\u4e2d $s$ \u7684\u8fd9\u4e2a\u540e\u7f00\u5bf9\u5e94\u7684\u4f4d\u7f6e\u524d\u9762\u7684\u6700\u540e\u4e00\u4e2a\u5c5e\u4e8e $t$ \u7684\u540e\u7f00\uff0c\u8981\u4e48\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u540e\u9762\u7684\u7b2c\u4e00\u4e2a\u5c5e\u4e8e $t$ \u7684\u540e\u7f00\u3002\n\n\u6240\u4ee5\u76f4\u63a5\u5728\u540e\u7f00\u6570\u7ec4\u4e0a\u641e\u51fa\u8fd9\u4e24\u4e2a\u70b9\uff0c\u968f\u4fbf\u6c42\u4e2a LCP \u7136\u540e\u53d6 max \u5373\u53ef\u3002\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $s$ \u7684\u540e\u7f00\uff0c\u4e0e $t$ \u4e2d\u6bcf\u4e00\u4e2a\u540e\u7f00\u7684 LCP \u7684\u6700\u5927\u503c\uff0c\u8bbe\u5176\u4e3a $v_{[1,n]}$\u3002\n\n\u73b0\u5728\u5bf9\u4e8e\u67e5\u8be2 $[l,r]$\uff0c\u53ea\u9700\u8981\u4e8c\u5206\u7b54\u6848 $x$\uff0c\u5f53 $[l,r-x+1]$ \u4e2d $v$ \u7684\u6700\u5927\u503c\u5927\u4e8e\u7b49\u4e8e $x$ \u7684\u65f6\u5019\u5c31\u5224\u5b9a\u5408\u6cd5\uff0c\u5426\u5219\u5224\u5b9a\u4e0d\u5408\u6cd5\u3002\n\n\u4e8c\u5206\u5230\u6700\u540e\u4e00\u4e2a\u5408\u6cd5\u503c\u5373\u53ef\u3002\n\n\u4f7f\u7528 ST \u505a RMQ\uff0c\u590d\u6742\u5ea6\u4e3a $O((n+q)\\log n)$\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nchar s[400005], strs[400005];\nint n, q, m, st[22][400005], h[400005], suf[400005], cnt[400005], suftmp[400005], a[400005], b[400005], rnk[400005];\n\ninline void Read() {\n\tscanf(\"%s\", strs + 1);\n\tn = strlen(strs + 1);\n\tscanf(\"%s\", s + 1);\n\tm = strlen(s + 1);\n\ts[m + 1] = '1';\n\tfor (int i = 1;i <= n;i++) s[m + 1 + i] = strs[i];\n\tn += m + 1;\n}\n\ninline bool cmp1(int i, int j) {\n\treturn s[i] < s[j];\n}\n\ninline void Prefix() {\n\tfor (int i = 1;i <= n;i++) suf[i] = i;\n\tsort(suf + 1, suf + n + 1, cmp1);\n\tfor (int i = 1;i <= n;) {\n\t\tint l = i;\n\t\twhile (i <= n && s[suf[l]] == s[suf[i]]) rnk[suf[i++]] = l;\n\t}\n\t//for (int i = 1;i <= n;i++) cout << suf[i] << \" \"; cout << endl;\n\tfor (int k = 1;k <= 19;k++) {\n\t\tfor (int i = 1;i <= n;i++) b[i] = (i + (1 << k - 1) <= n ? rnk[i + (1 << k - 1)] : 0);\n\t\tmemset(cnt, 0, sizeof(cnt));\n\t\tfor (int i = 1;i <= n;i++) cnt[b[i]]++;\n\t\tfor (int i = 1;i <= n;i++) cnt[i] += cnt[i - 1];\n\t\tfor (int i = n;i >= 1;i--) suftmp[cnt[b[i]]--] = i;\n\t\tfor (int i = 1;i <= n;i++) a[i] = rnk[i];\n\t\tmemset(cnt, 0, sizeof(cnt));\n\t\tfor (int i = 1;i <= n;i++) cnt[a[i]]++;\n\t\tfor (int i = 1;i <= n;i++) cnt[i] += cnt[i - 1];\n\t\tfor (int i = n;i >= 1;i--) suf[cnt[a[suftmp[i]]]--] = suftmp[i];\n\t\tfor (int i = 1;i <= n;) {\n\t\t\tint l = i;\n\t\t\twhile (i <= n && a[suf[l]] == a[suf[i]] && b[suf[l]] == b[suf[i]]) rnk[suf[i++]] = l;\n\t\t}\n\t}\n\tfor (int i = 1;i <= n;i++) {\n\t\th[rnk[i]] = Max(h[rnk[i - 1]] - 1, 0);\n\t\twhile (s[i + h[rnk[i]]] == s[suf[rnk[i] - 1] + h[rnk[i]]]) h[rnk[i]]++;\n\t}\n\t//cout << s + 1 << endl;\n\t//for (int i = 1;i <= n;i++) cout << suf[i] << \" \"; cout << endl;\n\t//for (int i = 1;i <= n;i++) cout << h[i] << \" \"; cout << endl;\n\tint lcp = 0x3f3f3f3f;\n\tfor (int i = 2;i <= n;i++) {\n\t\tlcp = Min(lcp, h[i]);\n\t\tif (suf[i] > m + 1) {\n\t\t\tst[0][suf[i] - 1 - m] = lcp;\n\t\t\t//printf(\"lcp=%d\\n\", lcp);\n\t\t}\n\t\telse lcp = h[i + 1];\n\t}\n\tlcp = 0x3f3f3f3f;\n\tfor (int i = n;i >= 1;i--) {\n\t\tlcp = Min(lcp, h[i + 1]);\n\t\tif(suf[i] > m + 1) {\n\t\t\tst[0][suf[i] - 1 - m] = Max(st[0][suf[i] - 1 - m], lcp);\n\t\t\t//printf(\"lcp=%d\\n\", lcp);\n\t\t}\n\t\telse lcp = h[i];\n\t}\n\tfor (int i = 1;i <= 20;i++) {\n\t\tfor (int j = 1;j <= n;j++) {\n\t\t\tif (j + (1 << i - 1) > n) break;\n\t\t\tst[i][j] = Max(st[i - 1][j], st[i - 1][j + (1 << i - 1)]);\n\t\t}\n\t}\n}\n\ninline int Maxlen(int l, int r) {\n\tif (l > r) return 0;\n\tint k = 31 - __builtin_clz(r - l + 1);\n\treturn Max(st[k][l], st[k][r - (1 << k) + 1]);\n}\n\ninline int Query(int ll, int rr) {\n\tint l = 0, r = rr - ll + 2;\n\twhile (l < r - 1) {\n\t\tint mid = l + r >> 1;\n\t\tif (Maxlen(ll, rr - mid + 1) >= mid) l = mid;\n\t\telse r = mid;\n\t}\n\treturn l;\n}\n\ninline void Solve() {\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tint l, r;\n\t\tscanf(\"%d%d\", &l, &r);\n\t\tprintf(\"%d\\n\", Query(l, r));\n\t}\n}\n\nint main() {\n\tRead();\n\tPrefix();\n\tSolve();\n\t#ifdef CFA_44\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n\n```",
        "postTime": 1615984768,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020] \u5c01\u5370\u3011"
    },
    {
        "content": "\u77e5\u8bc6\u70b9\uff1aSAM\uff08\u6216\u8005\u5176\u4ed6\u5b50\u4e32\u6570\u636e\u7ed3\u6784\uff09+ \u7b80\u5355\u5206\u7c7b\u8ba8\u8bba\n\n\u9996\u5148\u660e\u663e\u7684\u601d\u8def\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u7684 $l_i$ \u4f7f\u5f97 $s[l_i...i]$ \u662f $t$ \u7684\u5b50\u4e32\u3002\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u7528\u540e\u7f00\u81ea\u52a8\u673a\uff08SAM\uff09\u8f7b\u677e\u5b9e\u73b0\uff0c\u5bf9 $t$ \u5efa\u7acb SAM \u7136\u540e\u4e0d\u65ad\u679a\u4e3e $s$ \u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u5373\u53ef\u3002\n\n\u8ba1\u7b97\u4e00\u4e2a $len_i=i-l_i+1$\u3002\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee $[l,r]$\uff0c\u76f8\u5f53\u4e8e\u6c42 $\\max_{l\\leq i\\leq r}\\{\\min\\{len_i,i-l+1\\}\\}$\u3002\u4ee4 $f(i)=i-l+1$\uff0c\u89c2\u5bdf\u5230 $len_i-f(i)$ \u4e0d\u589e\uff0c\u4e8c\u5206\u5176\u96f6\u70b9\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\u5f53\u7136\u4e5f\u53ef\u79bb\u7ebf\u7136\u540e\u5355\u8c03\u6808\u5904\u7406\uff0c\u505a\u5230\u7ebf\u6027 $O(n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n\nusing namespace std;\n\nstruct SAM\n{\n\tstruct nd\n\t{\n\t\tint ch[2],fail,len;\n\t}t[500000];int used,last;\n\tvoid init(){memset(t,0,sizeof(t));used=last=1;}\n\tint new_node(int len){used++;t[used].len=len;return used;}\n\tvoid ins(int x)\n\t{\n\t\tint p=last,cur=new_node(t[p].len+1);\n\t\twhile(p&&!t[p].ch[x]){t[p].ch[x]=cur;p=t[p].fail;}\n\t\tif(!p){t[cur].fail=1;}\n\t\telse\n\t\t{\n\t\t\tint q=t[p].ch[x];\n\t\t\tif(t[q].len==t[p].len+1)t[cur].fail=q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint clone=new_node(t[p].len+1);t[clone].fail=t[q].fail;for(int i=0;i<2;i++)t[clone].ch[i]=t[q].ch[i];\n\t\t\t\twhile(p&&t[p].ch[x]==q){t[p].ch[x]=clone;p=t[p].fail;}\n\t\t\t\tt[q].fail=t[cur].fail=clone;\n\t\t\t}\n\t\t}\n\t\tlast=cur;\n\t}\n\tvoid output()\n\t{\n\t\tfor(int i=1;i<=used;i++)printf(\"%d: %d %d %d %d\\n\",i,t[i].fail,t[i].len,t[i].ch[0],t[i].ch[1]);\n\t}\n}T;\n\nchar ss[300000],tt[300000];int s[300000],t[300000];\n\nint L[300000],len[300000];\n\nstruct ST\n{\n\tint maxn[300000][20],n,lg[300000];\n\tvoid init(int *a,int nn)\n\t{\n\t\tn=nn;lg[0]=-1;for(int i=1;i<=n;i++)lg[i]=lg[i>>1]+1;\n\t\tfor(int i=1;i<=n;i++)maxn[i][0]=a[i];\n\t\tfor(int j=1;(1<<j)<=n;j++)\n\t\t{\n\t\t\tfor(int i=1;i+(1<<j)-1<=n;i++)\n\t\t\t{\n\t\t\t\tmaxn[i][j]=max(maxn[i][j-1],maxn[i+(1<<(j-1))][j-1]);\n\t\t\t}\n\t\t}\n\t}\n\tint query(int l,int r)\n\t{\n\t\tint len=lg[r-l+1];\n\t\treturn max(maxn[l][len],maxn[r-(1<<len)+1][len]);\n\t}\n}M;\n\nint main()\n{\n\tscanf(\"%s%s\",ss+1,tt+1);int n=strlen(ss+1),m=strlen(tt+1);\n\tfor(int i=1;i<=n;i++)s[i]=ss[i]-'a';for(int i=1;i<=m;i++)t[i]=tt[i]-'a';\n\tT.init();for(int i=1;i<=m;i++)T.ins(t[i]);//T.output();\n\tint p=1,ln=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\twhile(p!=1&&!T.t[p].ch[s[i]])p=T.t[p].fail,ln=T.t[p].len;\n\t\tif(T.t[p].ch[s[i]])p=T.t[p].ch[s[i]],ln++;\n\t\tlen[i]=ln;L[i]=i-len[i]+1;//printf(\"%d %d %d\\n\",p,len[i],L[i]);\n\t}\n\tM.init(len,n);\n\tint q=0;scanf(\"%d\",&q);\n\twhile(q--)\n\t{\n\t\tint l=0,r=0;scanf(\"%d%d\",&l,&r);\n\t\tif(L[l]>=l){printf(\"%d\\n\",M.query(l,r));}\n\t\telse if(L[r]<=l){printf(\"%d\\n\",r-l+1);}\n\t\telse\n\t\t{\n\t\t\tint p=lower_bound(L+l,L+r+1,l)-L;\n\t\t\tprintf(\"%d\\n\",max(p-l,M.query(p,r)));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1593343059,
        "uid": 112794,
        "name": "\u5468\u5b50\u8861",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020] \u5c01\u5370\u3011"
    },
    {
        "content": "\u573a\u5916\u9009\u624b\u6765\u80e1\u4e00\u4e0b\u3002\u3002\n\n\u9996\u5148\u6211\u4eec\u4e0d\u59a8\u5199\u51fa\u6570\u7ec4 $c_i (1\\le i\\le |s|)$ \u8868\u793a\u4ece $i$ \u5f80\u540e\u6700\u591a\u6269\u5c55\u591a\u5c11\u4ecd\u7136\u662f $t$ \u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u4e5f\u5c31\u662f $c_i=\\max\\{j | s[i,j]\\subseteq t\\}$\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5404\u79cd\u65b9\u6cd5\u5c06\u5176\u6c42\u51fa\uff0c\u8fd9\u91cc\u6211\u7528\u7684\u662f\u540e\u7f00\u6570\u7ec4\u3002\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u6bcf\u6b21\u8981\u95ee\u7684\u662f $\\max_{l\\le i\\le r} \\min(s_i,r-i+1) $\uff0cmin \u9650\u5b9a\u4e86\u4e32\u4e0d\u80fd\u8d85\u8fc7\u53f3\u7aef\u70b9\u3002\n\n\u8fd9\u662f\u5f88\u597d\u505a\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6240\u6709 $i$ \u6309\u7167 $\\min$ \u53d6 $s_i$ \u8fd8\u662f\u53d6 $r-i+1$ \u8fdb\u884c\u5206\u7c7b\uff0c\u5728\u67e5\u8be2\u7684\u65f6\u5019\u67e5\u4e00\u6b21\u533a\u95f4\u6700\u5927\u503c\u548c\u4e00\u6b21\u533a\u95f4\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u90a3\u4ec0\u4e48\u65f6\u5019 $\\min$ \u53d6\u8c01\u53d1\u751f\u53d8\u5316\u5462\uff0c\u6211\u4eec\u53d1\u73b0 $s_i\\le r-i+1\\Leftrightarrow s_i+i\\le r+1$\uff0c\u6240\u4ee5\u6574\u4f53 $\\min$ \u53d8\u5316\u7684\u6b21\u6570\u662f\u7ebf\u6027\u7684\u3002\u6309 $r$ \u79bb\u7ebf\u6392\u6240\u6709\u8be2\u95ee\u540e\u5373\u53ef\u53ea\u4f7f\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN = 4e5 + 5, INF = 1e9;\n\nint N, Q, c[MAXN];\nnamespace p1 {\n\tchar S[MAXN]; int L, M;\n\tint sa[MAXN], rk[MAXN], buc[MAXN], tp[MAXN], height[MAXN];\n\tvoid Qsort() {\n\t\tfor (int i = 1; i <= M; ++i) buc[i] = 0;\n\t\tfor (int i = 1; i <= L; ++i) ++buc[rk[i]];\n\t\tfor (int i = 1; i <= M; ++i) buc[i] += buc[i - 1];\n\t\tfor (int i = L; i >= 1; --i) sa[buc[rk[tp[i]]]--] = tp[i];\n\t}\n\tvoid getSA() {\n\t\tfor (int i = 1; i <= L; ++i) rk[i] = S[i] - 'a' + 1, tp[i] = i;\n\t\tM = 100, Qsort();\n\t\tfor (int l = 1; l <= L; l <<= 1) {\n\t\t\tint cnt = 0;\n\t\t\tfor (int i = L - l + 1; i <= L; ++i) tp[++cnt] = i;\n\t\t\tfor (int i = 1; i <= L; ++i) if (sa[i] > l) tp[++cnt] = sa[i] - l;\n\t\t\tM = rk[sa[L]], Qsort();\n\t\t\tfor (int i = 1; i <= L; ++i) tp[i] = rk[i];\n\t\t\tfor (int i = 1; i <= L; ++i) {\n\t\t\t\trk[sa[i]] = rk[sa[i-1]] + !(tp[sa[i]]==tp[sa[i-1]]&&tp[sa[i]+l]==tp[sa[i-1]+l]);\n\t\t\t}\n\t\t\tif (rk[sa[L]] == L) break;\n\t\t}\n\t\tfor (int i = 1, j = 0; i <= L; ++i) {\n\t\t\tif (j) --j;\n\t\t\twhile (S[i + j] == S[sa[rk[i] - 1] + j]) ++j;\n\t\t\theight[rk[i]] = j;\n\t\t}\n\t}\n\tint main() {\n\t\tscanf(\"%s\", S + 1), N = strlen(S + 1);\n\t\tS[N + 1] = 'z' + 1, scanf(\"%s\", S + N + 2), L = strlen(S + 1);\n\t\tgetSA();\n\t\tint tmp = INF;\n\t\tfor (int i = 1; i <= L; ++i) {\n\t\t\ttmp = min(tmp, height[i]);\n\t\t\tif (sa[i] > N) tmp = INF;\n\t\t\telse c[sa[i]] = max(c[sa[i]], tmp);\n\t\t}\n\t\ttmp = INF;\n\t\tfor (int i = L; i >= 1; --i) {\n\t\t\ttmp = min(tmp, height[i + 1]);\n\t\t\tif (sa[i] > N) tmp = INF;\n\t\t\telse c[sa[i]] = max(c[sa[i]], tmp);\n\t\t}\n\t\treturn 0;\n\t}\n};\n\nnamespace p2 {\n\tint Q, id[MAXN], ans[MAXN];\n\tstruct query { int l, r, id; } a[MAXN];\n\tbool cmp(query q1, query q2) { return q1.r < q2.r; }\n\tbool cmpid(int x, int y) { return c[x] + x < c[y] + y; }\n\n\tstruct data {\n\t\tint mx1, mx2;\n\t\tdata (int mx1 = 0, int mx2 = 0) : mx1(mx1), mx2(mx2) {}\n\t\tfriend data operator+ (const data& l, const data& r) {\n\t\t\treturn data(min(l.mx1, r.mx1), max(l.mx2, r.mx2));\n\t\t}\n\t} T[MAXN << 2];\n\n\t#define mid ((l + r) >> 1)\n\t#define ls (o << 1)\n\t#define rs (o << 1 | 1)\n\tvoid pushup(int o) { T[o] = T[ls] + T[rs]; }\n\tvoid build(int o, int l, int r) {\n\t\tif (l == r) T[o].mx1 = l;\n\t\telse build(ls, l, mid), build(rs, mid + 1, r), pushup(o);\n\t}\n\tvoid insert(int o, int l, int r, int pos) {\n\t\tif (l == r) T[o].mx1 = INF, T[o].mx2 = c[l];\n\t\telse {\n\t\t\tif (pos <= mid) insert(ls, l, mid, pos);\n\t\t\telse insert(rs, mid + 1, r, pos);\n\t\t\tpushup(o);\n\t\t}\n\t}\n\tdata query(int o, int l, int r, int L, int R) {\n\t\tif (l == L && r == R) return T[o];\n\t\telse {\n\t\t\tif (R <= mid) return query(ls, l, mid, L, R);\n\t\t\telse if (L > mid) return query(rs, mid + 1, r, L, R);\n\t\t\telse return query(ls, l, mid, L, mid) + query(rs, mid + 1, r, mid + 1, R);\n\t\t}\n\t}\n\t#undef mid\n\t#undef ls\n\t#undef rs\n\n\tint main() {\n\t\tscanf(\"%d\", &Q);\n\t\tfor (int i = 1; i <= Q; ++i) scanf(\"%d%d\", &a[i].l, &a[i].r), a[i].id = i;\n\t\tsort(a + 1, a + Q + 1, cmp);\n\t\tfor (int i = 1; i <= N; ++i) id[i] = i;\n\t\tsort(id + 1, id + N + 1, cmpid);\n\t\tbuild(1, 1, N);\n\t\tfor (int i = 1, j = 1, k = 1; i <= N; ++i) {\n\t\t\tfor (; k <= N && c[id[k]] + id[k] <= i + 1; ++k) insert(1, 1, N, id[k]);\n\t\t\tfor (; j <= Q && a[j].r == i; ++j) {\n\t\t\t\tdata p = query(1, 1, N, a[j].l, a[j].r);\n\t\t\t\tans[a[j].id] = p.mx1 != INF ? max(i - p.mx1 + 1, p.mx2) : p.mx2;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= Q; ++i) printf(\"%d\\n\", ans[i]);\n\t\treturn 0;\n\t}\n}\n\nint main() {\n\tp1::main(), p2::main();\n\treturn 0;\n}\n```",
        "postTime": 1593258098,
        "uid": 62308,
        "name": "Mr_Wu",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020]\u5c01\u5370\u3011"
    },
    {
        "content": "\u7ed9\u51fa\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd $a,b$ \u7684\u5b57\u7b26\u4e32 $s,t$\uff0c$q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee $s[l,r]$ \u548c $t$ \u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u3002$|s|,|t|,q\\leqslant 2\\times 10^5$\u3002\n\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u5957\u8def\u5c31\u662f\u7528SA\u6216\u8005SAM\u6c42\u51fa $s$ \u6bcf\u4e2a\u4f4d\u7f6e\u6700\u591a\u80fd\u5411\u524d\u6269\u5c55\u591a\u957f\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u5b50\u4e32\u662f $t$ \u7684\u5b50\u4e32\u3002\n\n\u8bf4\u4e00\u4e0b\u7528SAM\u5b9e\u73b0\u7684\u505a\u6cd5\uff1a\u5148\u628a $t$ \u7684\u81ea\u52a8\u673a\u5efa\u51fa\u6765\uff0c\u7136\u540e\u8ba9 $s$ \u5728 $t$ \u7684\u81ea\u52a8\u673a\u4e0a\u5339\u914d\u3002\u6211\u4eec\u8bbe\u6bcf\u4e00\u4f4d\u7684\u7b54\u6848\u4e3a $ans_i$ \uff0c\u518d\u5f00\u4e00\u4e2a\u53d8\u91cf $now$ \u8868\u793a\u5f53\u524d\u5728\u54ea\u4e2a\u8282\u70b9\u3002\n\n\u6211\u4eec\u4e00\u4f4d\u4e00\u4f4d\u6dfb\u52a0\u8fdb $s$ \uff0c\u5047\u8bbe\u672c\u6b21\u6dfb\u52a0\u7684\u5b57\u7b26\u4e3a $c$\uff0c\u5f53 $now$ \u6709 $c$ \u7684\u51fa\u8fb9\u65f6\uff0c\u8ba9 $ans_i=ans_{i-1}+1$ \uff08\u6ce8\u610f\u8fd9\u91cc\u5e76\u4e0d\u662f $len_{now}+1$ \uff0c\u56e0\u4e3a\u5f53\u524d\u5339\u914d\u4e0a\u7684\u4e32\u4e0d\u4e00\u5b9a\u662f $now$ \u8282\u70b9\u4ee3\u8868\u7684\u6700\u957f\u4e32\uff09\uff0c\u7136\u540e $now=ch[now][c]$\uff1b\n\n\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u6cbf\u7740\u540e\u7f00\u94fe\u63a5\u5411\u4e0a\u8df3 $fa$ \uff0c\u76f4\u5230\u8df3\u5230\u865a\u62df\u8282\u70b9\u6216\u8005\u627e\u5230\u4e86\u4e00\u4e2a\u6709 $c$ \u7684\u51fa\u8fb9\u7684\u8282\u70b9\u3002\n\n\u5982\u679c\u8df3\u5230\u4e86\u865a\u62df\u8282\u70b9\uff0c\u5373 $t$ \u6839\u672c\u5c31\u4e0d\u542b $c$ \u8fd9\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u4f7f $ans[i]=0,now=0$ \uff08$0$ \u4e3a\u6839\u8282\u70b9\uff0c$-1$ \u4e3a\u865a\u62df\u8282\u70b9\uff09\uff1b\n\n\u5982\u679c\u627e\u5230\u4e86 $c$ \u7684\u51fa\u8fb9\uff0c\u5219 $ans_i=len_{now}+1,now=ch[now][c]$ \uff08\u6b64\u5904\u7684 $now$ \u662f\u4f60\u8df3\u5230\u7684\u90a3\u4e2a\u70b9\uff09\u3002\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u662f $len_{now}+ 1$ \u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u67d0\u4e00\u4e2a\u513f\u5b50\u8282\u70b9\u8df3\u5230\u8fd9\u91cc\u7684\uff0c\u800c\u513f\u5b50\u8282\u70b9\u4ee3\u8868\u7684\u5b50\u4e32\u90fd\u4e25\u683c\u6bd4\u7236\u8282\u70b9\u7684\u5b50\u4e32\u957f\uff0c\u6240\u4ee5\u53ea\u8981\u8df3\u4e00\u6b21\u5f00\u59cb\uff0c\u5c31\u5305\u542b\u4e86\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u4e32\u3002\u8fd9\u6837\u7684\u603b\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\uff0c\u56e0\u4e3a\u5339\u914d\u957f\u5ea6\u6700\u591a\u53ea\u589e\u52a0 $|s|$ \u6b21\uff0c\u6240\u4ee5\u8df3 $fa$ \u7684\u603b\u590d\u6742\u5ea6\u4e5f\u662f $O(|s|)$ \u7684\u3002\n\n\n\n\u73b0\u5728\u6211\u4eec\u6709\u4e86 $ans$ \u6570\u7ec4\uff0c\u600e\u4e48\u6c42\u51fa\u771f\u6b63\u7684\u7b54\u6848\u5462\uff1f\u4e0d\u96be\u53d1\u73b0\u7b54\u6848\u5c31\u662f $\\max\\limits_{i=l}^r\\min(ans_i,i-l+1)$ \uff0c\u6211\u4eec\u628a\u6240\u6709\u4f4d\u7f6e\u6309\u53d6\u5f97 $\\min$ \u7684\u662f\u54ea\u4e00\u79cd\u5206\u6210\u4e24\u7c7b\uff0c\u6211\u4eec\u53d1\u73b0\u968f\u7740 $l$ \u7684\u589e\u52a0\uff0c\u4f1a\u7531 $ans_i$ \u53d6\u5f97 $\\min$ \u53d8\u4e3a $i-l+1$ \u53d6\u5f97 $\\min$ \uff0c\u800c\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a $i-ans_i+1$ \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309 $l$ \u79bb\u7ebf\u4e0b\u6765\u6240\u6709\u8be2\u95ee\uff0c\u5f00\u4e24\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e24\u79cd\u7684\u7b54\u6848\uff08\u5355\u70b9\u4fee\u6539\u548c\u67e5\u8be2\u533a\u95f4 $\\max$\uff09\uff0c\u518d\u7ed9\u6bcf\u4e2a\u4f4d\u7f6e\u5f00\u4e2a\u6876\uff0c\u628a $k-ans_k+1=i$ \u7684\u90fd\u6254\u8fdb\u53bb\uff0c\u7136\u540e\u5f53 $l$ \u626b\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u5c31\u66f4\u6539\u5c31\u597d\u4e86\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6765\u5728\u7ebf\u5904\u7406\u8be2\u95ee\uff0c\u5c31\u662f\u7a7a\u95f4\u591a\u4e86\u4e2a $\\log$ \uff0c\u4ee3\u7801\u91c7\u7528\u7684\u662f\u79bb\u7ebf\u65b9\u6cd5\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct query{int l,r,id;}c[200005];\nbool cmp(query x,query y){return x.l<y.l;}\nstring s,t;\nnamespace Suffix_Automaton\n{\n    int ch[400005][2],len[400005],fa[400005],tot,last,ans[200005];\n    void extend(int c)\n    {\n        int np=++tot,p=last;\n        last=tot,len[np]=len[p]+1;\n        for(;p!=-1&&(!ch[p][c]);p=fa[p])ch[p][c]=np;\n        if(p==-1)return;\n        int q=ch[p][c];\n        if(len[q]==len[p]+1){fa[np]=q;return;}\n        int nq=++tot;\n        ch[nq][0]=ch[q][0],ch[nq][1]=ch[q][1];\n        fa[nq]=fa[q];\n        len[nq]=len[p]+1;\n        fa[q]=fa[np]=nq;\n        for(;p!=-1&&ch[p][c]==q;p=fa[p])ch[p][c]=nq;\n    }\n    void get_ans()\n    {\n        int now=0;\n        for(int i=0;i<s.size();i++)\n        {\n            int c=s[i]-'a';\n            if(ch[now][c])now=ch[now][c],ans[i+1]=ans[i]+1;\n            else\n            {\n                while(now&&(!ch[now][c]))now=fa[now];\n                if(!ch[now][c])ans[i+1]=0;\n                else ans[i+1]=len[now]+1,now=ch[now][c];\n            }\n        }\n    }\n}\nstruct Segment_Tree\n{\n    int tree[800005];\n    void modify(int l,int r,int x,int a,int b)\n    {\n        if(l==r){tree[x]=b;return;}\n        int mid=(l+r)>>1;\n        if(a<=mid)modify(l,mid,x*2,a,b);\n        else modify(mid+1,r,x*2+1,a,b);\n        tree[x]=max(tree[x*2],tree[x*2+1]);\n    }\n    int query(int l,int r,int x,int a,int b)\n    {\n        if(l>=a&&r<=b)return tree[x];\n        int mid=(l+r)>>1,ans=0;\n        if(a<=mid)ans=query(l,mid,x*2,a,b);\n        if(b>mid)ans=max(ans,query(mid+1,r,x*2+1,a,b));\n        return ans;\n    }\n}t1,t2;\nusing namespace Suffix_Automaton;\nvector<int>v[200005];\nint anss[200005];\nint main()\n{\n    fa[0]=-1;\n    cin>>s>>t;\n    int n=s.size();\n    for(int i=0;i<t.size();i++)extend(t[i]-'a');\n    get_ans();\n    for(int i=1;i<=n;i++)v[i-ans[i]+1].push_back(i),t1.modify(1,n,1,i,ans[i]);\n    int q;\n    scanf(\"%d\",&q);\n    for(int i=1;i<=q;i++)scanf(\"%d%d\",&c[i].l,&c[i].r),c[i].id=i;\n    sort(c+1,c+q+1,cmp);\n    int nowl=1;\n    for(int i=1;i<=q;i++)\n    {\n        while(nowl<=c[i].l)\n        {\n            for(int j=0;j<v[nowl].size();j++)\n                t1.modify(1,n,1,v[nowl][j],0),t2.modify(1,n,1,v[nowl][j],v[nowl][j]);\n            nowl++;\n        }\n        anss[c[i].id]=max(t2.query(1,n,1,c[i].l,c[i].r)-c[i].l+1,t1.query(1,n,1,c[i].l,c[i].r));\n    }\n    for(int i=1;i<=q;i++)printf(\"%d\\n\",anss[i]);\n    return 0;\n}\n```",
        "postTime": 1593329962,
        "uid": 96912,
        "name": "AzusaCat",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020] \u5c01\u5370\u3011"
    },
    {
        "content": "# **\u3010\u9898\u89e3\u3011\u5c01\u5370 [BJOI2020] [P6640] [Loj3298]**\n\n[$\\mathcal{My}\\ \\mathcal{Blog}$](https://www.cnblogs.com/Xing-Ling/p/13203551.html)\n\n\u4f20\u9001\u95e8\uff1a[\u5c01\u5370 $\\text{[BJOI2020] [P6640]}$](https://www.luogu.com.cn/problem/P6640) [$\\text{[Loj3298]}$](https://loj.ac/problem/3298)\n\n## **\u3010\u5206\u6790\u3011**\n\n$\\text{CF}$ \u4e0a\u6709\u4e00\u5806\u8fd9\u79cd\u7c7b\u4f3c\u7684\u9898\u3002\n\n\u6309\u7167\u5957\u8def\uff0c\u5148\u6c42\u51fa $s$ \u4e2d\u4ee5\u6bcf\u4e2a $i$ \u4f5c\u4e3a\u53f3\u7aef\u70b9\u4e0e $t$ \u80fd\u5339\u914d\u5230\u7684\u6700\u957f\u5b50\u4e32\u957f\u5ea6\uff0c\u8bb0\u4e3a $len(i)$\uff08\u7528$\\text{SA}$ \u548c $\\text{SAM}$ \u5747\u53ef\uff09\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee\uff0c\u7b54\u6848\u4e3a $\\max_{i=l}^{r}\\{i-\\max(l,i-len(i)+1)+1\\}$\uff0c\u4f3c\u4e4e\u4e0d\u592a\u597d\u7ef4\u62a4\uff0c\u4f46\u6ce8\u610f\u5230 $i-len(i)+1$ \u662f\u6709\u5355\u8c03\u6027\u7684\uff08\u5355\u8c03\u4e0d\u51cf\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u628a $[l,r]$ \u4e2d\u7684\u6240\u6709 $i$ \u5206\u4e3a\u4e24\u534a\uff0c\u5de6\u8fb9\u4e3a $\\max_{i=l}^{mid-1}\\{i-l+1\\}=mid-1-l+1$\uff0c\u53f3\u8fb9\u4e3a $\\max_{i=mid}^{r}\\{len(i)\\}$\uff0c\u5957\u4e2a\u9759\u6001\u67e5\u8be2\u533a\u95f4\u6700\u5927\u503c\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\u3002\u6c42 $mid$ \u4e5f\u5f88\u7b80\u5355\uff0c\u628a\u8be2\u95ee\u79bb\u7ebf\u6309 $l$ \u6392\u5e8f\uff0c\u4e00\u4e2a\u6307\u9488\u626b\u8fc7\u53bb\u5c31\u5b8c\u4e86\u3002\u5982\u679c\u5f3a\u5236\u5728\u7ebf\u5c31\u4e8c\u5206\u6c42 $mid$ \u3002\n\n\u5199\u4e86\u4e2a\u4e24\u53ea $\\log$ \u7684\u6811\u72b6\u6570\u7ec4\u8dd1\u5f97\u98de\u5feb\uff08\u96fe\uff09\u3002\n\n## **\u3010Code\u3011**\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#define LL long long\n#define Re register int\nusing namespace std;\nconst int N=2e5+3;\nint n,T,len[N],Ans[N];char s[N],t[N];\nstruct QAQ{int l,r,id;inline bool operator<(const QAQ &O)const{return l<O.l;}}Q[N];\ninline void in(Re &x){\n    int f=0;x=0;char c=getchar();\n    while(c<'0'||c>'9')f|=c=='-',c=getchar();\n    while(c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    x=f?-x:x;\n}\nstruct Suffix_Automaton{\n    int O,last,link[N<<1],maxlen[N<<1],trans[N<<1][2];\n    Suffix_Automaton(){last=O=1;}\n    inline void insert(Re ch){\n        Re z=++O,p=last;maxlen[z]=maxlen[p]+1;\n        while(p&&!trans[p][ch])trans[p][ch]=z,p=link[p];\n        if(!p)link[z]=1;\n        else{\n            Re x=trans[p][ch];\n            if(maxlen[x]==maxlen[p]+1)link[z]=x;\n            else{\n                Re y=++O;maxlen[y]=maxlen[p]+1;\n                for(Re i=0;i<2;++i)trans[y][i]=trans[x][i];\n                while(p&&trans[p][ch]==x)trans[p][ch]=y,p=link[p];\n                link[y]=link[x],link[x]=link[z]=y;\n            }\n        }\n        last=z;\n    }\n    inline void build(){\n        for(Re i=1;t[i];++i)insert(t[i]-'a');\n        for(Re i=1,p=1,Len=0;i<=n;++i){\n            Re a=s[i]-'a';\n            while(p&&!trans[p][a])p=link[p],Len=maxlen[p];\n            if(!p)p=1,Len=0;\n            else p=trans[p][a],++Len;\n            len[i]=min(Len,i);\n        }\n    }\n}SAM;\nstruct BIT{\n    int C[N];\n    inline void add(Re x,Re v){while(x<=n)C[x]=max(C[x],v),x+=x&-x;}\n    inline int ask(Re l,Re r){\n        Re ans=0;\n        while(l<=r){\n            while(r-(r&-r)>=l)ans=max(ans,C[r]),r-=r&-r;\n            ans=max(ans,len[r--]);\n        }\n        return ans;\n    }\n}TR;\nint main(){\n//    freopen(\"123.txt\",\"r\",stdin);\n    scanf(\"%s%s\",s+1,t+1),n=strlen(s+1);\n    in(T),SAM.build();\n    for(Re i=1;i<=n;++i)TR.add(i,len[i]);\n    for(Re i=1;i<=T;++i)in(Q[i].l),in(Q[i].r),Q[i].id=i;\n    sort(Q+1,Q+T+1);\n    for(Re l=1,i=1,o=1;l<=n&&o<=T;++l){\n        while(i<=n&&i-len[i]+1<l)++i;//\u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3i-len[i]+1>=l\u7684\u4f4d\u7f6e\n        while(o<=T&&Q[o].l==l){\n            if(i-1>=l)Ans[Q[o].id]=min(i-1,Q[o].r)-l+1;\n            if(i<=Q[o].r)Ans[Q[o].id]=max(Ans[Q[o].id],TR.ask(max(i,l),Q[o].r));\n            ++o;\n        }\n    }\n    for(Re i=1;i<=T;++i)printf(\"%d\\n\",Ans[i]);\n}\n```\n",
        "postTime": 1593332739,
        "uid": 110985,
        "name": "\u8fb0\u661f\u51cc",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020] \u5c01\u5370\u3011"
    },
    {
        "content": "~~\u6b63\u7ecf\u4eba\u8c01\u5199SA\u554a~~\n\n\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u53ef\u4ee5\u770b\u6210\u539f\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u7684\u540e\u7f00\uff0c\u6bd4\u5982\u8bf4 ```ababa``` \u7684\u5b50\u4e32 ```bab``` \u53ef\u4ee5\u770b\u6210\u5176\u524d\u7f00 ```abab``` \u7684\u540e\u7f00 ```bab``` \u3002\u53d7\u6b64\u542f\u53d1\uff0c\u6211\u4eec\u8bbe $f_i$ \u4ee3\u8868 $s$ \u4e2d\u4ee5 $i$ \u7ed3\u5c3e\u7684\u524d\u7f00\u4e2d\u7684\u6700\u957f\u540e\u7f00\u7684\u957f\u5ea6\uff0c\u5e76\u6ee1\u8db3\u8be5\u540e\u7f00\u662f $t$ \u7684\u5b50\u4e32\u3002( $f_i$ \u7684\u6c42\u6cd5\u89c1\u4e0b\u6587)\n\n\u5728\u672c\u9898\u4e2d $s[l \\dots r]$ \u4e0e $t$ \u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u53ef\u4ee5\u770b\u6210 $\\max\\{ \\min_{l \\le i \\le r}\\{ i-l+1,f_i \\} \\}$ \uff0c\u5373\u679a\u4e3e\u6240\u6709\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\uff0c\u7136\u540e\u8003\u8651\u5176\u6700\u957f\u53ef\u4ee5\u5411\u5de6\u5ef6\u4f38\u591a\u8fdc\uff0c\u53d6\u4e00\u4e2a $\\max$\u3002 (\u5bf9 $i-l+1$ \u53d6 $\\min$ \u662f\u4fdd\u8bc1\u5176\u5411\u5de6\u5ef6\u4f38\u4e0d\u51fa\u533a\u95f4 $[l,r]$ \u5185 )\n\n\u4f46\u662f\u76f4\u63a5\u7b97\u8fd9\u4e2a\u5355\u7ec4\u8be2\u95ee\u662f $O(n)$ \u7684\uff0c\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u3002\u6211\u4eec\u53d1\u73b0\u4e3b\u8981\u662f\u8fd9\u4e2a\u5bf9 $i-l+1$ \u53d6 $\\min$ \u4e0d\u597d\u5904\u7406\uff0c\u5426\u5219\u53ef\u4ee5ST\u8868\u6216\u7ebf\u6bb5\u6811\u4f18\u5316\u3002\n\n\u65e2\u7136\u5982\u6b64\uff0c\u90a3\u4e48\u53ef\u4ee5\u5206\u522b\u8ba1\u7b97\u53d6 $\\min$ \u662f $i-l+1$ \u548c $f_i$ \u7684\u60c5\u51b5\uff0c\u6700\u540e\u518d\u5408\u5e76\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u628a $\\min$ \u6d88\u6389\u4e86\u3002\n\n\u95ee\u9898\u662f\uff0c $[l,r]$ \u4e2d\u54ea\u90e8\u5206\u53d6 $\\min$ \u662f $i-l+1$ \uff0c\u90a3\u90e8\u5206\u662f $f_i$ \u5462\uff1f\u8fd9\u5c31\u8981\u6211\u4eec\u63a2\u7a76 $f_i$ \u7684\u6027\u8d28\u4e86\u3002 \u4ee4 $F(i)=i-f_i+1$ \uff0c\u5373\u6ee1\u8db3 $f_i$ \u8981\u6c42\u7684\u6700\u957f\u540e\u7f00\u7684\u8d77\u59cb\u70b9\u3002 $F(i)$ \u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a $F(i)$ \u662f\u5355\u8c03\u4e0d\u964d\u7684 (\u5373 $\\forall_{1 \\le i < n} F(i) \\le F(i+1)$ ) \uff0c\u8bc1\u660e\u53ef\u4ee5\u53cd\u8bc1\uff0c\u82e5 $\\exists_{1 \\le i < n}  F(i)>F(i+1)$ \uff0c\u90a3\u4e48\u5b50\u4e32 $s[F(i+1) \\dots i]$ \u663e\u7136\u4e5f\u662f $t$ \u7684\u5b50\u4e32 ( $s[F(i+1) \\dots i+1]$\u662f $t$ \u7684\u5b50\u4e32 )\uff0c\u4e14\u957f\u5ea6\u6bd4 $s[F(i) \\dots i]$ \u66f4\u957f\uff0c\u77db\u76fe\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5 **\u4e8c\u5206** \u627e\u5230\u533a\u95f4 $[l,r]$ \u5185\u7b2c\u4e00\u4e2a $F(i) \\geq l$ \u7684\u4f4d\u7f6e\uff0c\u8bbe\u5176(\u4f4d\u7f6e)\u4e3a $pos$ \u3002\u90a3\u4e48\u5bf9\u4e8e\u533a\u95f4 $[l,pos-1]$ \uff0c\u5176 $\\min \\{i-l+1,f_i \\}$ (\u4e0a\u6587\u6240\u8bf4\u7684\u5f0f\u5b50)\u5373\u4e3a $i-l+1$ \uff0c\u800c\u5bf9\u4e8e\u533a\u95f4 $[pos,r]$ \uff0c \u5176 $\\min \\{i-l+1,f_i \\}$ \u5373\u4e3a $f_i$ \u3002$i-l+1$ \u5728 $[l,pos-1]$ \u4e2d\u7684\u6700\u5927\u503c\u5373\u4e3a $(pos-1)-l+1=pos-l$ \uff0c\u5728 $[pos,r]$ \u4e2d $f_i$ \u7684\u6700\u5927\u503c\u53ef\u4ee5ST\u8868\u6216\u7ebf\u6bb5\u6811\u6c42\u533a\u95f4\u6700\u5927\u503c(\u6211\u7528\u7684\u7ebf\u6bb5\u6811)\u3002\n\n\u6700\u540e\uff0c\u5982\u4f55\u6c42 $f_i$ \u5462\uff1f\u4ece\u5934\u5230\u5c3e\u904d\u5386 $s$ \uff0c\u5e76\u628a**SAM\u5f53\u6210AC\u81ea\u52a8\u673a** \u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9 $t$ \u5efaSAM\uff0c\u6211\u4eec\u77e5\u9053SAM\u53ef\u4ee5\u89c6\u4e3a **\u5bf9\u6240\u6709\u5b50\u4e32\u5efa\u7acbAC\u81ea\u52a8\u673a** \uff0c\u56e0\u4e3aAC\u81ea\u52a8\u673a\u7684 $\\texttt{fail}$ \u6307\u9488\uff0c\u6307\u5411\u7684\u662f\u4ee5\u524d\u51fa\u73b0\u8fc7\u7684\u6700\u957f\u7684\u540e\u7f00\uff0c\u4e0eSAM\u7684 $\\texttt{fa}$ (\u4e00\u4e2a\u8282\u70b9\u7684 $\\texttt{fa}$ \u4e5f\u662f\u4ed6\u7684\u540e\u7f00) \u6307\u9488\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999\u3002\u90a3\u6211\u4eec\u7528\u4e00\u4e2a\u6307\u9488 $p$ \uff0c\u6307\u5411\u7684\u662f $t$ \u7684SAM\u4e2d\u7684\u8282\u70b9\u3002\u7136\u540e\u4ece\u5934\u5230\u5c3e\u904d\u5386 $s$ \uff0c\u5047\u5982\u904d\u5386\u5230\u7b2c $i$ \u4f4d\uff0c\u800c $s_i=c$ \uff0c\u5982\u679c $p$ \u5b58\u5728 $ch_c$  ( $c$ \u7684\u51fa\u8fb9)\uff0c\u90a3\u4e48\u76f4\u63a5\u8d70\u5230 $ch_{p\\ c}$ \u3002\u5982\u679c\u6ca1\u6709 $ch_c$ \uff0c\u90a3\u4e48\u4e0d\u65ad\u8df3 $\\texttt{fa}$ (\u904d\u5386\u6240\u6709\u7684\u540e\u7f00\uff0c\u4e0e $f_i$ \u5b9a\u4e49\u76f8\u7b26)\uff0c\u76f4\u5230\u6709 $ch_{p\\ c}$ \u3002\u5982\u679c $p$ \u4e2d\u6709\u4e00\u4e2a\u7956\u5148\u5b58\u5728 $ch_c$ \uff0c\u90a3\u4e48 $p$ \u53d8\u6210\u8be5\u7956\u5148\u7684 $ch_c$ \u3002\u5982\u679c\u5230\u6839\u8282\u70b9\u90fd\u6ca1\u6709\u8282\u70b9\u6709 $ch_c$ \uff0c\u90a3\u4e48 $p$ \u53d8\u4e3a\u6839\u8282\u70b9( $1$ )\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u8fd8\u8981\u7ef4\u62a4\u76ee\u524d\u7684\u6700\u957f\u4e0e $t$ \u7684\u5339\u914d\u957f\u5ea6\uff0c\u4f5c\u4e3a\u76ee\u524d $i$ \u7684 $f_i$ \u3002\u7ef4\u62a4\u6700\u957f\u5339\u914d\u957f\u5ea6\u7684\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u53ca\u6ce8\u91ca\u3002\n\n\u6700\u540e\u8bc1\u660e\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u5efa SAM $O(n)$ \uff0c\u7ebf\u6bb5\u6811\u9884\u5904\u7406 $O(n)$ \uff0c\u5355\u6b21\u4e8c\u5206 $O(\\log n)$ \uff0c\u5355\u6b21\u7ebf\u6bb5\u6811\u8be2\u95ee $O(\\log n)$ \u3002SAM\u4e0a\u5339\u914d\u65f6\u5f80\u4e0b\u8d70 $ch_c$ \u7684\u6b21\u6570 $O(n)$ \uff0c\u90a3\u4e48\u5f80\u4e0a\u8df3 $\\texttt{fa}$ \u6b21\u6570\u4e5f\u4e3a $O(n)$ \u3002\u603b\u590d\u6742\u5ea6 $O(q \\log n)$ \u3002\n\n```cpp\n#include <cmath>\n#include <stdio.h>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\ninline char gc () {\n\tstatic char buf[1048576], *p1 = buf, *p2 = buf;\n\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1048576, stdin), p1 == p2) ? EOF : *p1 ++;\n}\n\ninline int idx (char &ch) { return ch - 'a'; } // idx\u662f\u6bcf\u4e2a\u5b57\u7b26\u5728SAM\u4e2d\u5bf9\u5e94\u7684\u7f16\u53f7(\u5982'a'\u5bf9\u5e940)\ninline bool islower (char &ch) { return ch >= 'a' && ch <= 'z'; }\ninline bool isdigit (char &ch) { return ch >= '0' && ch <= '9'; }\n\nint reads (char *S) {\n\tint p = 0; char ch = gc();\n\twhile(!islower(ch)) ch = gc();\n\twhile(islower(ch)) S[++ p] = ch, ch = gc();\n\tS[p + 1] = 0; return p;\n}\n\nvoid readi (int &v) {\n\tint ans = 0, f = 1; char ch = gc();\n\twhile(!isdigit(ch)) { if(!(ch ^ '-')) f = -1; ch = gc(); }\n\twhile(isdigit(ch)) ans = ans * 10 + ch - '0', ch = gc();\n\tv = ans * f;\n}\n\n//\u4ee5\u4e0a\u5168\u662f\u5feb\u8bfb\n\nconst int N = 200005;\nconst int Q = 200005;\n\nstruct SAM { // \u5c01\u88c5\u7684SAM\n\tint ch[N << 1][26], fa[N << 1], len[N << 1]; // \u8bb0\u5f97\u5f002\u500d\n\tint cnt, lst;\n\tSAM () { cnt = lst = 1; }\n\n\tvoid insert (int c) { // \u6807\u51c6SAM\u6784\u5efa\n\t\tint p = lst, np = ++ cnt; lst = np;\n\t\tlen[np] = len[p] + 1; \n\t\t\n\t\tfor(; p && !ch[p][c]; p = fa[p])\n\t\t\tch[p][c] = np;\n\t\t\n\t\tif(!p) fa[np] = 1;\n\t\telse {\n\t\t\tint q = ch[p][c];\n\t\t\t\n\t\t\tif(len[q] == len[p] + 1) fa[np] = q;\n\t\t\telse {\n\t\t\t\tint nq = ++ cnt;\n\t\t\t\tmemcpy(ch[nq], ch[q], sizeof ch[q]);\n\t\t\t\tfa[nq] = fa[q];\n\t\t\t\tlen[nq] = len[p] + 1;\n\t\t\t\tfa[np] = fa[q] = nq;\n\t\t\t\t\n\t\t\t\tfor(; p && ch[p][c] == q; p = fa[p])\n\t\t\t\t\tch[p][c] = nq;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid build (char *S) {\n\t\tfor(int i = 1; S[i]; ++ i)\n\t\t\tinsert(idx(S[i]));\n\t}\n\t\n\tint calc (int c) { // \u6a21\u62dfAC\u81ea\u52a8\u673a\u5339\u914d\uff0c\u8ba1\u7b97\u52a0\u5165c\u540e\u7684\u6700\u957f\u5339\u914d\u957f\u5ea6\n\t\tstatic int p = 1, cur = 0;\n\t\t//p\u662f\u5339\u914d\u5230\u7684\u8282\u70b9\uff0ccur\u662f\u76ee\u524d\u7684\u6700\u5927\u5339\u914d\u957f\u5ea6\n        //\u6ce8\u610fstatic\uff0c\u5373\u8c03\u7528\u51fd\u6570\u65f6\u6cbf\u7528\u4e0a\u6b21\u7684\u503c\n\n\t\tif(ch[p][c]) ++ cur, p = ch[p][c]; // \u5df2\u7ecf\u5b58\u5728ch[c]\uff0c\u90a3\u4e48\u6700\u957f\u5339\u914d\u957f\u5ea6+1\u5373\u53ef\n\t\telse {\n\t\t\tfor(; p && !ch[p][c]; p = fa[p]); // \u4e0d\u65ad\u8df3fa\uff0c\u76f4\u5230\u6709ch[c]\n\t\t\t\n\t\t\tif(p) cur = len[p] + 1, p = ch[p][c]; // \u7956\u5148\u4e2d\u5b58\u5728\u4e00\u4e2a\u8282\u70b9\u62e5\u6709ch[c]\n            //\u6700\u957f\u5339\u914d\u957f\u5ea6\u4e3a\u4ec0\u4e48\u662flen[p]+1\u800c\u4e0d\u662flen[ch[p][c]]\u53ef\u4ee5\u81ea\u5df1\u601d\u8003\u4ee5\u4e0b\n\t\t\telse cur = 0, p = 1; // \u4ece\u6839\u8282\u70b9\u4ece\u65b0\u5f00\u59cb\u5339\u914d\uff0c\u6700\u957f\u5339\u914d\u957f\u5ea6\u5f520\n\t\t}\n\t\t\n\t\treturn cur;\n\t}\n} sam;\n\nchar S[N], T[N];\nint f[N]; /*\u6587\u4e2d\u6240\u8bf4\u7684f[i]*/ int q;\n\nstruct SegmentTree { // \u7ebf\u6bb5\u6811\uff0c\u533a\u95f4\u6700\u5927\u503c\n\tint mx[N << 2];\n\t\n\tvoid build (int u, int l, int r) {\n\t\tif(l == r) { mx[u] = f[l]; return; }\n\t\t\n\t\tint mid = l + r >> 1;\n\t\tbuild(u << 1, l, mid);\n\t\tbuild(u << 1 | 1, mid + 1, r);\n\t\tmx[u] = max(mx[u << 1], mx[u << 1 | 1]);\n\t}\n\t\n\tint query (int u, int ul, int ur, int l, int r) {\n\t\tif(l >= ul && r <= ur) return mx[u];\n\t\t\n\t\tint mid = l + r >> 1, ret = 0;\n\t\tif(mid >= ul) ret = max(ret, query(u << 1, ul, ur, l, mid));\n\t\tif(mid < ur) ret = max(ret, query(u << 1 | 1, ul, ur, mid + 1, r));\n\t\treturn ret;\n\t}\n} seg;\n\nint search (int l, int r) { // \u4e8c\u5206\u627e\u5230\u7b2c\u4e00\u4e2aF(i)\u4e0d\u5c0f\u4e8el\u7684\u4f4d\u7f6e\n\tint L = l, R = r, mid;\n\n\twhile(L < R) {\n\t\tmid = L + R >> 1;\n\n\t\tif(mid - f[mid] + 1 < l) L = mid + 1;\n\t\telse R = mid;\n\t}\n\n\tif(L - f[L] + 1 < l) ++ L; // \u8fd9\u4e2a\u7279\u5224\u662f\u4e3a\u4e86\u6574\u4e2a\u533a\u95f4[l,r]\u7684F(i)\u90fd\u5c0f\u4e8el\u7684\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u8fd4\u56de\u503c\u4e3ar+1(\u56e0\u4e3a\u4e8c\u5206\u51fa\u6765\u65f6L\u4e3ar)\n\treturn L;\n}\n\nint main () {\n\n\tint ls = reads(S); reads(T); // \u8bfb\u5165\n\tsam.build(T); // \u5bf9t\u5efaSAM\n\t\n\tfor(int i = 1; i <= ls; ++ i) \n\t\tf[i] = sam.calc(idx(S[i])); // \u8ba1\u7b97\u52a0\u5165S[i]\u4e4b\u540e\u4e0et\u7684\u6700\u957f\u5339\u914d\u957f\u5ea6\uff0c\u4f5c\u4e3af[i]\n\t\n\tseg.build(1, 1, ls); // \u7ebf\u6bb5\u6811\u9884\u5904\u7406\n\t\n\treadi(q);\n\twhile(q -- ) {\n\t\tint l, r; readi(l); readi(r);\n\t\tint pos = search(l, r); // pos\u5373\u4e3a\u6587\u4e2d\u5b9a\u4e49,F(i)\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8el\u7684\u4f4d\u7f6e\n\t\t\n\t\tint ans = pos - l; // \u672c\u5e94\u662f (pos - 1) - l + 1\uff0c\u6587\u4e2d\u6240\u8bf4\u7684\n\t\tif(pos <= r) // \u5224\u65adpos <= r\u662f\u4e3a\u4e86\u9632\u6b62\u6574\u4e2a\u533a\u95f4[l,r]\u7684F(i)\u90fd\u5c0f\u4e8el (\u6574\u4e2a\u533a\u95f4[l,r]\u7684F(i)\u90fd\u5c0f\u4e8el\u65f6\u8fd4\u56de\u7684\u662fr + 1)\n        \tans = max(ans, seg.query(1, pos, r, 1, ls)); \n\t\tprintf(\"%d\\n\", ans);\n\t}\n\n\treturn 0;\n}\n```\n\n\u540e\uff1a\u628aSAM\u770b\u6210AC\u81ea\u52a8\u673a\u7684\u9898\u76ee\u8fd8\u6709 [CF235C Cyclical Quest](https://www.luogu.com.cn/problem/CF235C)  \u3002\u4e0e\u672c\u9898\u7c7b\u4f3c\uff0c\u4e5f\u662f\u6bcf\u6b21\u5728\u672b\u7aef\u52a0\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5931\u914d\u5c31\u4e0d\u65ad\u7f29\u5c0f\u540e\u7f00\uff0c\u53ea\u4e0d\u8fc7\u591a\u4e86\u4e00\u4e2a\u5220\u6389\u5f00\u5934\u5b57\u7b26\u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8df3 $\\texttt{fa}$ \u89e3\u51b3\uff0c\u56e0\u4e3a\u5728\u5f00\u5934\u5220\u6389\u4e00\u4e2a\u5b57\u7b26\u53ef\u4ee5\u770b\u6210\u5176\u4e00\u4e2a\u540e\u7f00\u3002\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u770b\u9898\u89e3\u3002",
        "postTime": 1617022720,
        "uid": 358957,
        "name": "fhqTreap",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020] \u5c01\u5370\u3011"
    },
    {
        "content": "\u5927\u6982\u60f3\u4e86\u4e00\u4e2a\u6bd4\u8f83\u597d\u50cf\u597d\u7406\u89e3\uff0c\u6bd4\u8f83\u597d\u5199\u7684\u7b97\u6cd5\uff0c\u7528sa\u7ef4\u62a4\uff0c\u53ef\u80fd\u6709\u70b9\u7801\u91cf\u4f46\u662f\u6ca1\u6709\u7ec6\u8282\n\n\u6211\u4eec\u8003\u8651S\u4e32\u4ee5i\u7ed3\u5c3e\u6700\u957f\u7684\u548cT\u4e32\u5339\u914d\u7684\u957f\u5ea6\uff0c\u77e5\u9053\u4e86\u8fd9\u4e2a\u5bf9\u4e8e\u6bcf\u7ec4\u8be2\u95ee\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u90fd\u79bb\u7ebf\u4e0b\u6765\uff0c\u7136\u540e\u6309\u53f3\u7aef\u70b9\u4e00\u6b21\u8be2\u95ee\n\n\u65e0\u975e\u5c31\u662f\u4e24\u79cd\u60c5\u51b5\n\n\u4e00\u79cd\u662f\u5b8c\u5168\u5305\u542b\u7684\u60c5\u51b5\u5c31\u662f\u53ef\u80fdi\u7ed3\u5c3e\u7684\u6700\u957f\u5339\u914d\u7684\u957f\u5ea6\u88ab\u8be2\u95ee\u533a\u95f4\u5b8c\u5168\u8986\u76d6\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u6ca1\u6709\u88ab\u5b8c\u5168\u8986\u76d6\u3002\n\n\u6211\u4eec\u8003\u8651\u5f53\u524d\u53f3\u7aef\u70b9\u7684\u8be2\u95ee\u7684\u5de6\u7aef\u70b9\u4e3aL\n\n\u90a3\u4e48>=L\u7684\u6211\u4eec\u53ea\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5176\u6700\u957f\u957f\u5ea6\u5c31\u53ef\u4ee5\u4e86\n<L\u7684\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u5b83\u6240\u5728\u53f3\u7aef\u70b9\u7684\u6700\u53f3\u7aef\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u56fa\u5b9a\u7684\u8be2\u95ee\uff0c\u80af\u5b9a\u53f3\u7aef\u70b9\u8d8a\u9760\u53f3\uff0c\u7b54\u6848\u8d8a\u5927\uff01\n\n\u7136\u540e\u4ee5\u4e0a\u9700\u8981\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff01\n\n\u7136\u540e\u6211\u4eec\u5173\u4e8e\u6c42\u6700\u957f\u5339\u914d\u6211\u4eec\u53ef\u4ee5\u7528sam\u4e5f\u53ef\u4ee5\u7528sa\uff0c\u4f5c\u8005\u5199\u7684\u662fsa\uff0c\u53ea\u9700\u8981\u7ffb\u8f6c\u539f\u4e32\uff0c\u7136\u540e\u4e24\u4e2a\u4e32\u7528\u4e2a#\u9694\u5f00\uff0c\u6c42\u51faheight\uff0c\u5bf9\u4e8e\u4e24\u8fb9\u6700\u76f8\u90bb\u7684\u6c42lcp\u5373\u53ef\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pr;\n\ninline int read() {\n\tchar c = getchar(); int x = 0, f = 1;\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\n\nconst int N = 500005, D = 233;\n\nint n, m, nn, a[N], rec[N], ans[N];\nchar strS[N >> 1], strT[N >> 1];\nvector<pr> vq[N];\n\nstruct SuffixArray {\n\tint buc[N], sa[N], rk[N], fir[N], sec[N];\n\tint hei[N], lg[N], mn[N][21];\n\t\n\tint LCP(int x, int y) {\n\t\tif (x == y) return nn - sa[x] + 1;\n\t\tif (x > y) swap(x, y); y--;\n\t\tint tt = lg[y - x + 1];\n\t\treturn min(mn[x][tt], mn[y - (1 << tt) + 1][tt]);\n\t} \n\tvoid suffix_sort() {\n\t\tmemset(buc, 0, sizeof(buc));\n\t\tfor (int i = 1; i <= nn; i++) buc[a[i]]++;\n\t\tfor (int i = 1; i < N; i++) buc[i] += buc[i - 1];\n\t\tfor (int i = 1; i <= nn; i++) sa[buc[a[i]]--] = i;\n\t\trk[sa[1]] = 1; for (int i = 2; i <= nn; i++) rk[sa[i]] = rk[sa[i - 1]] + (a[sa[i]] != a[sa[i - 1]]);\n\t\tfor (int k = 1; k <= nn; k <<= 1) {\n\t\t\tfor (int i = 1; i <= nn; i++) fir[i] = rk[i], sec[i] = i + k <= nn ? rk[i + k] : 0;\n\t\t\tmemset(buc, 0, sizeof(buc));\n\t\t\tfor (int i = 1; i <= nn; i++) buc[sec[i]]++;\n\t\t\tfor (int i = 1; i <= nn; i++) buc[i] += buc[i - 1];\n\t\t\tfor (int i = nn; i >= 1; i--) rk[buc[sec[i]]--] = i;\n\t\t\tmemset(buc, 0, sizeof(buc));\n\t\t\tfor (int i = 1; i <= nn; i++) buc[fir[i]]++;\n\t\t\tfor (int i = 1; i <= nn; i++) buc[i] += buc[i - 1];\n\t\t\tfor (int i = nn; i >= 1; i--) sa[buc[fir[rk[i]]]--] = rk[i];\n\t\t\trk[sa[1]] = 1;\n\t\t\tfor (int i = 2; i <= nn; i++) rk[sa[i]] = rk[sa[i - 1]] + (fir[sa[i]] != fir[sa[i - 1]] || sec[sa[i]] != sec[sa[i - 1]]);\n\t\t}\n\t}\n\tvoid sol() {\n\t\tint len = 0;\n\t\tfor (int i = 1; i <= nn; i++) {\n\t\t\tint pos = sa[rk[i] + 1]; if (len) len--;\n\t\t\tif (rk[i] == nn) hei[i] = 0;\n\t\t\telse {\n\t\t\t\twhile (a[i + len] == a[pos + len]) len++;\n\t\t\t\thei[rk[i]] = len;\n\t\t\t}\n\t\t}\n\t\tlg[0] = -1; for (int i = 1; i <= nn; i++) lg[i] = lg[i >> 1] + 1;\n\t\tfor (int i = 1; i < nn; i++) mn[i][0] = hei[i];\n\t\tfor (int k = 1; k <= 20; k++)\n\t\t\tfor (int i = 1; i + (1 << k) - 1 <= nn; i++) mn[i][k] = min(mn[i][k - 1], mn[i + (1 << k - 1)][k - 1]); \n\t}\n} SA;\nstruct SegmentTree {\n\tint mx[N << 2];\n\t\n\tvoid modify(int rt, int l, int r, int ql, int qr, int x) {\n\t\tif (ql <= l && r <= qr) { mx[rt] = max(mx[rt], x); return; }\n\t\tint mid = (l + r) >> 1;\n\t\tif (ql <= mid) modify(rt << 1, l, mid, ql, qr, x);\n\t\tif (qr > mid) modify(rt << 1 | 1, mid + 1, r, ql, qr, x);\n\t}\n\tint ask(int rt, int l, int r, int x) {\n\t\tif (l == r) return mx[rt];\n\t\tint mid = (l + r) >> 1;\n\t\treturn x <= mid ? max(mx[rt], ask(rt << 1, l, mid, x)) : max(mx[rt], ask(rt << 1 | 1, mid + 1, r, x));\n\t}\n} sgt1, sgt2;\n\nvoid getLCP() {\n\tint lst = 0;\n\tfor (int i = 1; i <= nn; i++) {\n\t\tif (SA.sa[i] > n + 1) lst = i;\n\t\tif (SA.sa[i] <= n) {\n\t\t\tif (lst) rec[SA.sa[i]] = max(rec[SA.sa[i]], SA.LCP(lst, i));\n\t\t}\n\t}\n\tlst = 0;\n\tfor (int i = nn; i >= 1; i--) {\n\t\tif (SA.sa[i] > n + 1) lst = i;\n\t\tif (SA.sa[i] <= n) {\n\t\t\tif (lst) rec[SA.sa[i]] = max(rec[SA.sa[i]], SA.LCP(i, lst));\n\t\t}\n\t}\n\treverse(rec + 1, rec + n + 1);\n}\n\nint main() {\n\tscanf(\"%s\", strS + 1); scanf(\"%s\", strT + 1);\n\tn = strlen(strS + 1), m = strlen(strT + 1);\n\tfor (int i = 1; i <= n; i++) a[++nn] = strS[n - i + 1] - 'a' + 1;\n\ta[++nn] = D;\n\tfor (int i = 1; i <= m; i++) a[++nn] = strT[m - i + 1] - 'a' + 1;\n\tSA.suffix_sort(), SA.sol(); getLCP();\n\tint qq = read();\n\tfor (int i = 1; i <= qq; i++) {\n\t\tint l = read(), r = read();\n\t\tvq[r].push_back(pr(l, i));\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tint p = i - rec[i] + 1;\n\t\tsgt1.modify(1, 1, n, 1, p, rec[i]), sgt2.modify(1, 1, n, p, i, i);\n\t\tfor (auto x : vq[i]) {\n\t\t\tint tt = x.first, ret = max(sgt1.ask(1, 1, n, tt), sgt2.ask(1, 1, n, tt) - tt + 1);\n\t\t\tans[x.second] = ret;\n\t\t}\n\t}\n\tfor (int i = 1; i <= qq; i++) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1594286162,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020] \u5c01\u5370\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/dysyn1314/p/13158865.html)\n\n## \u9898\u76ee\u5927\u610f\n\n[\u9898\u76ee\u94fe\u63a5](https://loj.ac/problem/3298)\n\n\u7ed9\u51fa\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd$\\text{a},\\text{b}$\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32$s,t$\uff0c$q$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee$s[l\\dots r]$\u548c$t$\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\leq|s|,|t|,q\\leq 2\\times10^5$\u3002\n\n## \u672c\u9898\u9898\u89e3\n\n\u8003\u8651\u9884\u5904\u7406$s$\u7684\u6bcf\u4e2a\u5b50\u4e32\u662f\u4e0d\u662f$t$\u7684\u5b50\u4e32\u3002\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u5de6\u7aef\u70b9$i$ ($1\\leq i\\leq |s|$)\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a$R[i]$\uff0c\u4f7f\u5f97$\\forall j\\in[i,R[i]]:s[i\\dots j]$\u90fd\u662f$t$\u7684\u5b50\u4e32\uff0c$\\forall k\\in[R[i]+1,n]:s[i\\dots k]$\u90fd\u4e0d\u662f$t$\u7684\u5b50\u4e32\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u5f97$s[i\\dots r]$\u662f$t$\u5b50\u4e32\u7684$r$\uff0c\u4e00\u5b9a\u662f\u4ece$i$\u5f00\u59cb\u7684\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u800c$R[i]$\u5c31\u662f\u5176\u4e2d\u6700\u5927\u7684$r$\u3002\u6211\u4eec\u8003\u8651\u628a\u6240\u6709$R[i]$\u9884\u5904\u7406\u51fa\u6765\u3002\n\n\u4ece\u5c0f\u5230\u5927\u679a\u4e3e$i$\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86$s[i-1\\dots R[i-1]]$\u662f$t$\u7684\u5b50\u4e32\u3002\u90a3\u4e48\uff0c$s[i\\dots R[i-1]]$\u4e00\u5b9a\u4e5f\u662f$t$\u7684\u5b50\u4e32\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c$R[i]\\geq R[i-1]$\u3002\u90a3\u4e48\u6211\u4eec\u4ece$R[i-1]+1$\u5f00\u59cb\uff0c\u4e00\u4f4d\u4e00\u4f4d\u5411\u540e\u679a\u4e3e\uff0c\u5224\u65ad\u662f\u5426\u662f$t$\u7684\u5b50\u4e32\u3002\u53ef\u4ee5\u5bf9$t$\u5efa\u4e00\u4e2aSAM\uff0c\u8fd9\u4e2a\u201c\u5411\u540e\u679a\u4e3e\u201d\uff0c\u5c31\u76f8\u5f53\u4e8e\u5728SAM\u4e0a\u8d70**\u8f6c\u79fb\u8fb9**\u3002\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u8981\u652f\u6301\u628a\u524d\u9762\u7684\u7b2c$i-1$\u4f4d\u5220\u6389\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u5728SAM\u4e0a\u8df3**\u7236\u4eb2\u8fb9**\u3002\u56e0\u4e3a$R[i]$\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6$O(|s|)$\uff08$|s|,|t|$\u540c\u9636\uff09\u3002\n\n\u9884\u5904\u7406\u51fa$R$\u6570\u7ec4\u540e\uff0c\u8003\u8651\u56de\u7b54\u8be2\u95ee\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee$l,r$\u3002\u6211\u4eec\u76f8\u5f53\u4e8e\u8981\u6c42\u51fa\uff0c$\\max_{i=l}^{r}\\{\\min(r,R[i])-i+1\\}$\u3002\u5bf9\u4e8e$\\min(r,R[i])$\uff0c\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n- \u5bf9\u4e8e$R[i]\\leq r$\u7684$i$\uff0c\u76f8\u5f53\u4e8e\u8be2\u95ee$\\max_{l\\leq i\\leq r}\\{R[i]-i+1\\}$\u3002\n- \u5bf9\u4e8e$R[i]>r$\u7684$i$\uff0c\u76f8\u5f53\u4e8e\u8be2\u95ee$r+\\max_{l\\leq i\\leq r}\\{-i\\}+1$\u3002\n\n\u5982\u679c\u628a$R[i]$\u548c$r$\u7684\u5173\u7cfb\u770b\u505a\u4e00\u7ef4\uff0c$i$\u548c$l,r$\u7684\u5173\u7cfb\u770b\u505a\u4e00\u7ef4\uff0c\u90a3\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7684\u533a\u95f4\u6700\u5927\u503c\u67e5\u8be2\u3002\u53ef\u4ee5\u8003\u8651\u79bb\u7ebf\uff0c\u628a\u8be2\u95ee\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u8fd9\u6837$R[i]$\u548c$r$\u7684\u8fd9\u4e00\u7ef4\u5c31\u4e0d\u5b58\u5728\u4e86\uff0c\u6211\u4eec\u53ea\u8981\u505a\u4e00\u7ef4\u7684\u533a\u95f4\u6700\u5927\u503c\u67e5\u8be2\uff0c\u53ef\u4ee5\u7528\uff08\u4e24\u68f5\uff09\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(|s|+q\\log |s|)$\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff08[\u5728LOJ\u67e5\u770b](https://loj.ac/submission/840465)\uff09\uff1a\n\n```cpp\n//problem:LOJ3298\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define mk make_pair\n#define lob lower_bound\n#define upb upper_bound\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\n\nconst int MAXN=2e5;\nconst int INF=1e9;\n\nint n,m,q,R[MAXN+5];\nchar s[MAXN+5],t[MAXN+5];\nstruct SAM{\n\tint cnt,ed,mp[MAXN*2+5][2],fa[MAXN*2+5],len[MAXN*2+5];\n\tvoid ins(int c){\n\t\tint p=ed;ed=++cnt;len[ed]=len[p]+1;\n\t\tfor(;p && !mp[p][c];p=fa[p])mp[p][c]=ed;\n\t\tif(!p)fa[ed]=1;\n\t\telse{\n\t\t\tint q=mp[p][c];\n\t\t\tif(len[q]==len[p]+1)fa[ed]=q;\n\t\t\telse{\n\t\t\t\tlen[++cnt]=len[p]+1;\n\t\t\t\tfor(int i=0;i<2;++i)mp[cnt][i]=mp[q][i];\n\t\t\t\tfa[cnt]=fa[q];fa[q]=fa[ed]=cnt;\n\t\t\t\tfor(;mp[p][c]==q;p=fa[p])mp[p][c]=cnt;\n\t\t\t}\n\t\t}\n\t}\n\tSAM(){cnt=ed=1;}\n}sam_t;\n\nint cnt_ev,ans[MAXN+5];\nstruct Event{\n\tint l,r,id;\n\tEvent(){}\n\tEvent(int _l,int _r,int _id){\n\t\tl=_l;r=_r;id=_id;\n\t}\n}ev[MAXN*2+5];\nbool cmp(Event x,Event y){\n\tif(x.r==y.r)return x.id<y.id;\n\treturn x.r<y.r;\n}\n\nstruct SegmentTree{\n\tint mx[MAXN*4+5];\n\tvoid push_up(int p){\n\t\tmx[p]=max(mx[p<<1],mx[p<<1|1]);\n\t}\n\tvoid build(int p,int l,int r,int* arr){\n\t\tif(l==r){\n\t\t\tmx[p]=arr[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(p<<1,l,mid,arr);\n\t\tbuild(p<<1|1,mid+1,r,arr);\n\t\tpush_up(p);\n\t}\n\tvoid modify(int p,int l,int r,int pos,int x){\n\t\tif(l==r){\n\t\t\tmx[p]=x;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(pos<=mid)modify(p<<1,l,mid,pos,x);\n\t\telse modify(p<<1|1,mid+1,r,pos,x);\n\t\tpush_up(p);\n\t}\n\tint query(int p,int l,int r,int ql,int qr){\n\t\tif(ql<=l && qr>=r)return mx[p];\n\t\tint mid=(l+r)>>1;\n\t\tint res=-INF;\n\t\tif(ql<=mid)res=query(p<<1,l,mid,ql,qr);\n\t\tif(qr>mid)res=max(res,query(p<<1|1,mid+1,r,ql,qr));\n\t\treturn res;\n\t}\n\tSegmentTree(){}\n}T1,T2;\n\nint main() {\n\tcin>>(s+1);n=strlen(s+1);\n\tcin>>(t+1);m=strlen(t+1);\n\tfor(int i=1;i<=m;++i){\n\t\tsam_t.ins(t[i]-'a');\n\t}\n\tint p=1;\n\tfor(int i=1;i<=n;++i){\n\t\tint r=max(i-1,R[i-1]);\n\t\tif(r==i-1)p=1;\n\t\twhile(p!=1 && sam_t.len[sam_t.fa[p]]+1>r-i+1)p=sam_t.fa[p];\n\t\twhile(r+1<=n && sam_t.mp[p][s[r+1]-'a']!=0){\n\t\t\tp=sam_t.mp[p][s[r+1]-'a'];\n\t\t\tr++;\n\t\t}\n\t\tR[i]=r;\n\t\tev[++cnt_ev]=Event(i,R[i],0);\n\t\t//cout<<R[i]<<\" \";\n\t}\n\t//cout<<endl;\n\tstatic int tmp[MAXN+5];\n\tfor(int i=1;i<=n;++i)tmp[i]=-INF;\n\tT1.build(1,1,n,tmp);\n\tfor(int i=1;i<=n;++i)tmp[i]=-i;\n\tT2.build(1,1,n,tmp);\n\t\n\tcin>>q;\n\tfor(int i=1;i<=q;++i){\n\t\tint l,r;cin>>l>>r;\n\t\tev[++cnt_ev]=Event(l,r,i);\n\t}\n\tsort(ev+1,ev+cnt_ev+1,cmp);\n\tfor(int i=1;i<=cnt_ev;++i){\n\t\tif(ev[i].id==0){\n\t\t\tT1.modify(1,1,n,ev[i].l,ev[i].r-ev[i].l+1);\n\t\t\tT2.modify(1,1,n,ev[i].l,-INF);\n\t\t}\n\t\telse{\n\t\t\tint x=T1.query(1,1,n,ev[i].l,ev[i].r);\n\t\t\tint y=ev[i].r+T2.query(1,1,n,ev[i].l,ev[i].r)+1;\n\t\t\tans[ev[i].id]=max(x,y);\n\t\t}\n\t}\n\tfor(int i=1;i<=q;++i)cout<<ans[i]<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1593311323,
        "uid": 100674,
        "name": "duyi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020] \u5c01\u5370\u3011"
    },
    {
        "content": "\u672c\u9898\u53ef\u4ee5\u7528SAM+\u7ebf\u6bb5\u6811\n\n\u5bf9\u4e8e\u5b50\u4e32$T$,\u53ef\u4ee5\u5148\u5bf9\u4ed6\u5efa\u7acbSAM,\u7136\u540e\u5c06\u5b50\u4e32$S$\u653e\u5728\u4e0a\u9762\u8dd1\uff0c\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6240\u6709\u4ee5$i$\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u4e0e$T$\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\uff0c\u8bbe\u4e3a$ans_i$\u3002\n\n\u90a3\u4e48\u5c31\u53ea\u7528\u6c42\u51fa$s[l,r]$\u4e2d\u7ed3\u5c3e\u5728$[l,r]$\u4e14\u5f00\u5934$\\geq l$\u7684\u6240\u6709\u4e32\u3002\n\n\u663e\u7136$i-ans_i+1$\u5355\u8c03\u9012\u589e\u3002\n\n\u53ea\u7528\u4e8c\u5206\u51fa\u7b2c\u4e00\u4e2a$i-ans_i+1 \\geq l$\u7684\u4f4d\u7f6e$pos$\u5373\u53ef\u3002\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4$ans_i$,\u7136\u540e\u7b54\u6848\u662f$\\max \\{pos-l,\\max\\limits_{pos\\leq i \\leq r}\\{ans_i \\} \\}$\u3002\n\n\u590d\u6742\u5ea6$ \\Theta(n\\log n)$\u3002\n\n\u5e94\u8be5\u6765\u8bf4\u6bd4\u8f83\u7b80\u5355\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <set>\n#include <vector>\n#define ll long long\nusing namespace std;\ninline int getint() {\n    int x = 0, f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch > '9') {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9') {\n        x = (x << 3) + (x << 1) + (ch ^ 48);\n        ch = getchar();\n    }\n    return (f == 1) ? x : -x;\n}\ninline int max(int a, int b) { return a > b ? a : b; }\ninline int min(int a, int b) { return a < b ? a : b; }\nconst int maxn = 4e5 + 5;\nint dp[maxn], tot = 1, last = 1, fa[maxn], pre[maxn], dep[maxn], sz, len[maxn], ans[maxn];\nchar s[maxn], t[maxn];\nint q, l, r;\nstruct SAM {\n    int son[maxn][2];\n    inline void insert(int c) {\n        int np = ++tot, p = last;\n        last = np, len[np] = len[p] + 1;\n        while (p && !son[p][c]) son[p][c] = np, p = fa[p];\n        if (!p)\n            fa[np] = 1;\n        else {\n            int q = son[p][c];\n            if (len[q] == len[p] + 1)\n                fa[np] = q;\n            else {\n                int nq = ++tot;\n                len[nq] = len[p] + 1;\n                memcpy(son[nq], son[q], sizeof(son[q]));\n                fa[nq] = fa[q];\n                fa[np] = fa[q] = nq;\n                while (son[p][c] == q && p) son[p][c] = nq, p = fa[p];\n            }\n        }\n    }\n} sam;\n/// i-len[i]\u00b5\u00a5\u00b5\u00f7\u00b2\u00bb\u00bc\u00f5\nstruct segmentree {\n#define ls u << 1\n#define rs u << 1 | 1\n    int maxv[maxn << 2];\n    inline void pushup(int u) { maxv[u] = max(maxv[ls], maxv[rs]); }\n    inline void build(int u, int l, int r) {\n        if (l == r) {\n            maxv[u] = ans[r];\n            return;\n        } else {\n            int mid = (l + r) >> 1;\n            build(ls, l, mid);\n            build(rs, mid + 1, r);\n            pushup(u);\n        }\n    }\n    inline int query(int u, int l, int r, int x, int y) {\n        if (x > y)\n            return 0;\n        if (x <= l && y >= r) {\n            return maxv[u];\n        } else {\n            int mid = (l + r) >> 1;\n            int ret = 0;\n            if (x <= mid)\n                ret = max(ret, query(ls, l, mid, x, y));\n            if (y > mid)\n                ret = max(ret, query(rs, mid + 1, r, x, y));\n            return ret;\n        }\n    }\n} tree;\ninline int erfen(int l, int r) {\n    int ret = r + 1;\n    int tag = l;\n    while (l <= r) {\n        int mid = (l + r) >> 1;\n        if (mid - ans[mid] + 1 >= tag) {\n            ret = mid;\n            r = mid - 1;\n        } else\n            l = mid + 1;\n    }\n    return ret;\n}\nint main() {\n    scanf(\"%s%s%d\", s + 1, t + 1, &q);\n    int lens = strlen(t + 1);\n    for (int i = 1; i <= lens; ++i) sam.insert(t[i] - 'a');\n    lens = strlen(s + 1);\n    int p = 1;\n    int n = lens, nowlen = 0;\n    for (int i = 1; i <= lens; ++i) {\n        while (!sam.son[p][s[i] - 'a'] && p) {\n            p = fa[p];\n            nowlen = len[p];\n        }\n        if (p != 0)\n            nowlen++;\n        else\n            nowlen = 0;\n        p = sam.son[p][s[i] - 'a'];\n        if (p == 0)\n            p = 1;\n        ans[i] = nowlen;\n    }\n    tree.build(1, 1, n);\n    for (int i = 1; i <= q; ++i) {\n        scanf(\"%d%d\", &l, &r);\n        int pos = erfen(l, r);\n        printf(\"%d\\n\", max(pos - l, tree.query(1, 1, n, pos, r)));\n    }\n    return 0;\n}\n```",
        "postTime": 1595844836,
        "uid": 333789,
        "name": "lory1608",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6640 \u3010[BJOI2020] \u5c01\u5370\u3011"
    }
]