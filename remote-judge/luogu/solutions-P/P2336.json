[
    {
        "content": "\u8868\u793a\u770b\u4e0d\u61c2\u9898\u89e3\u3002\u3002\n\n\u6211\u53ea\u80fd\u60f3\u5230\u540e\u7f00\u6570\u7ec4+\u83ab\u961f\n\ns2\u662fs1\u7684\u5b50\u4e32\uff0c\u5c31\u662fs1\u5b58\u5728\u540e\u7f00\u548cs2\u7684\u6700\u957f\u516c\u5171\u524d\u7f00=length(s2)\n\n\u6240\u6709\u4e32\u653e\u5230\u4e00\u8d77\uff0c\u5904\u7406\u51faheight\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ebf\u6027\u5f97\u5230\u6bcf\u4e2a\u70b9\u524d\u540e\n\n\u7b2c\u4e00\u4e2a\u6bd4\u4ed6\u5c0f\u7684\u70b9\n\n\u4e8e\u662f\u5f97\u5230\u4e86\u6bcf\u4e2a\u70b9\u540d\u4e32\u5bf9\u5e94\u7684\u533a\u95f4\n\n\u73b0\u5728\u5c31\u662f\u95ee\uff0c\u6bcf\u4e2a\u533a\u95f4\u91cc\u6709\u591a\u5c11\u7c7b\u6570\uff0c\u4ee5\u53ca\u6bcf\u7c7b\u6570\u88ab\u591a\u5c11\u533a\u95f4\u5305\u62ec\u3002\n\n\u7b2c\u4e00\u95ee\u5c31\u662f\u83ab\u961f\u7684\u6a21\u677f\u9898\u3002\n\n\u7b2c\u4e8c\u95ee\u8003\u8651\u5dee\u5206\u3002\u6bcf\u65b0\u9047\u5230\u4e00\u7c7b\u6570\uff0c\u6211\u4eec\u7ed9\u4ed6+\u5269\u4f59\u8be2\u95ee\u4e2a\u6570\n\n\u6bcf\u53bb\u6389\u4e00\u7c7b\u6570\uff0c\u6211\u4eec\u7ed9\u4ed6-\u5269\u4f59\u8be2\u95ee\u4e2a\u6570\u3002\n\n\u65f6\u95f4((m+\u603b\u957f)\\*\u6839\u53f7(\u603b\u957f))\uff0c\u7adf\u7136\u8fd8\u662f\u6700\u5feb\u7684(\u5728\u6d1b\u8c37)\u3002\n\nupd:\n\u770b\u61c2\u4e86ac\u81ea\u52a8\u673a\u7684\u505a\u6cd5\u3002\u3002orz Delicious\n\n\u6211\u5728\u4ed6\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\u3002\n\n\u6211\u4eec\u5bf9\u8be2\u95ee\u4e32\u5efaac\u81ea\u52a8\u673a\uff0c\u4e4b\u540e\u5efa\u51fa\u53ea\u5305\u542b\u4ee3\u8868\u6574\u4e2a\u4e32\u7684\u8282\u70b9\u7684fail\u6811\u3002\n\n\u628a\u4e24\u4e2a\u4e32\u653e\u5728\u4e0a\u9762\u8dd1\uff0c\u8dd1\u8fc7\u7684\u70b9\u5728fail\u6811\u4e0a\u5efa\u865a\u6811\uff0c\u6bcf\u4e2a\u53f6\u5b50\u7684\u8d21\u732e\u662f\u4e0e\u524d\u4e00\u4e2a\u53f6\u5b50\u7684lca\u4e4b\u95f4\u90a3\u6bb5\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u7edf\u8ba1\u4e2a\u6570(\u7b2c\u4e00\u95ee)\u3002\u901a\u8fc7\u6253delta\u6807\u8bb0\uff0c\u5c31\u662f\u5728\u81ea\u5df1\u8fd9\u513f\u6253\u4e2a+1\uff0clca\u90a3\u91cc\u6253\u4e2a-1\uff0c\u6700\u540e\u7edf\u8ba1\uff0c\u53ef\u4ee5\u89e3\u51b3\u7b2c\u4e8c\u95ee\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u4e0d\u7528\u771f\u7684\u5efa\u51fa\u865a\u6811\uff0c\u53ea\u7528\u6392\u5e8f\uff0c\u4e4b\u540e\u5224\u65ad\u524d\u4e00\u4e2a\u70b9\u662f\u4e0d\u662f\u540e\u4e00\u4e2a\u70b9\u7684\u7956\u5148\u6765\u5f97\u5230\u53f6\u5b50\u3002\n\n\u7531\u4e8edfs\u5e8f\u503c\u57df\u662fO(n)\uff0c\u53ef\u4ee5\u79bb\u7ebf\u505a\u5230O(n)\u6392\u5e8f\u3002\u6c42lca\u4e5f\u53ef\u4ee5\u79bb\u7ebf\u7528tarjan\u505a\u5230O(N)\u3002\n\n\u6240\u4ee5\u9664\u4e86\u5efaac\u81ea\u52a8\u673a\u8981nlogn\uff0c\u5176\u4ed6\u90fd\u662fO(n)\u7684\u3002\n\nac\u81ea\u52a8\u673a\u5b58\u50a8\u513f\u5b50\u4e5f\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\u5e38\u6570\uff0c\u5f53\u513f\u5b50<=12\u65f6\uff0c\u7528\u6570\u7ec4\u5b58\uff1b\u5426\u5219\u7528\u7ebf\u6bb5\u6811\u5b58\u3002\n\n\u904d\u5386\u513f\u5b50\u65f6\u7528\u6570\u7ec4\u6216\u8005\u8bb0\u5f55\u5934\u513f\u5b50\u548c\u540e\u5144\u5f1f\u7684\u65b9\u6cd5\u3002\n\n(\u5f53\u7136\uff0c\u8fd9\u4e9b\u4f18\u5316\u6211\u90fd\u61d2\u5f97\u6253\uff0c\u52a0\u4e86\u4f30\u8ba1\u5c31\u6709200\u884c\u4e86\u3002\u3002)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n \n#define U 10000\n#define N 100100\n#define M 100100\nint *s[N][2];\nint n,m,k,i,len;\n\nvoid init(int* &q)\n{\n    scanf(\"%d\",&len);\n    q=new int [len+1];\n    q[0]=len;\n    for (i=1;i<=len;++i) scanf(\"%d\",q+i);\n}\n\n#define TOT 500100 \ntypedef map<int,int> tree;//\u989c\u8272\uff0c\u70b9 \ntree son[TOT];\nint fail[TOT],f[TOT],tot=1;\nint dy[M],num[TOT];\nvoid ins()\n{\n    scanf(\"%d\",&len);\n    int i=1;\n    while (len--)\n    {\n        int c;\n        scanf(\"%d\",&c);\n        int &p=son[i][c];\n        if (!p) p=++tot;\n        i=p;\n    }\n    dy[k]=i;++num[i];\n}\n\nint t[TOT],Next[TOT];\nint fa[TOT],top[TOT],deep[TOT],in[TOT],out[TOT];\nvoid dfs(int x,int dep)\n{\n    static int cnt=-1,sz[TOT],son[TOT];\n    sz[x]=1;deep[x]=(dep+=num[x]);in[x]=++cnt;\n    int &c=son[x],i;\n    for (i=t[x];i;i=Next[i]) \n    {\n        fa[i]=x;\n        dfs(i,dep);\n        sz[x]+=sz[i];\n        if (sz[i]>sz[c]) c=i;\n    }\n    for (i=t[x];i;i=Next[i]) \n    if (i!=c)\n     for (int y=i;y;y=son[y]) top[y]=i; \n    out[x]=cnt;\n}\nint q[TOT],head,tail;\nvoid build_f()\n{\n    head=0;tail=1;q[1]=1;\n    while (head!=tail)\n    {\n        int x=q[++head];\n        for (tree::iterator it=son[x].begin();it!=son[x].end();++it)\n        {\n            int col=it->first,j=it->second;\n            q[++tail]=j;\n            int fa=fail[x],p;\n            for (;fa&&!(p=son[fa][col]);fa=fail[fa]);\n            if (!fa)  p=1;\n            fail[j]=p;\n            f[j]=fa=num[p]?p:f[p];\n            if (num[j])\n            {\n               Next[j]=t[fa];t[fa]=j;\n            }\n        }\n    }\n    dfs(0,0);\n}\n\nint get_lca(int x,int y)\n{\n    int fx=top[x],fy=top[y];\n    while (fx!=fy)\n    if (deep[fx]>=deep[fy]) { x=fa[fx];fx=top[x]; }\n    else { y=fa[fy];fy=top[y]; }\n    return deep[x]<deep[y]?x:y;\n}\n\nvoid go(int *s)\n{\n    int x=1;\n    for (int i=1;i<=s[0];++i)\n    {\n        int c=s[i],p;\n        while (x&&!(p=son[x][c])) x=fail[x];\n        if (!x) x=1;\n        else \n        {\n            x=p;\n            if (num[x]) q[++tail]=x;\n            else if (num[f[x]]) q[++tail]=f[x];\n        }\n    }\n}\n\nbool xiao(int x,int y)\n{\n   return in[x]<in[y];\n}\n\nint del[M]; \nvoid calc(int x)\n{\n    for (int i=t[x];i;i=Next[i])\n    {\n        calc(i);del[x]+=del[i];\n    }\n}\n\nint Ans[N];\n\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);freopen(\"3.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    for (k=1;k<=n;++k) \n    {\n     init(s[k][0]);\n     init(s[k][1]);\n    }\n    for (k=1;k<=m;++k) ins();\n    build_f();\n    \n    for (k=1;k<=n;++k)\n    {\n        tail=0;\n        go(s[k][0]);\n        go(s[k][1]);\n        if (!tail) continue; \n        \n        sort(q+1,q+tail+1,xiao);\n        int top=1;\n        for (i=2;i<=tail;++i)\n        {\n          top+=(in[q[i]]>out[q[top]]); \n          q[top]=q[i];\n        }\n        int ans=deep[q[1]];\n        ++del[q[1]];\n        for (i=2;i<=top;++i) \n        { \n          int lca=get_lca(q[i],q[i-1]);\n          --del[lca];++del[q[i]];\n          ans+=deep[q[i]]-deep[lca];\n        }\n        Ans[k]=ans;\n    }\n    calc(0);\n    for (i=1;i<=m;++i) printf(\"%d\\n\",del[dy[i]]);\n    for (i=1;i<=n;++i) printf(\"%d \",Ans[i]);\n}\n```",
        "postTime": 1485835571,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "- [P2336 [SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d](https://www.luogu.com.cn/problem/P2336)\n\n### \u9898\u76ee\u63cf\u8ff0\n\n\u6709 $N$ \u53ea\u55b5\uff0c\u6bcf\u53ea\u55b5\u6709\u4e00\u4e2a\u540d\u548c\u4e00\u4e2a\u59d3\uff08\u4e24\u4e2a\u5b57\u7b26\u4e32\uff09\u3002\n\n\u8fd8\u6709 $M$ \u6b21\u70b9\u540d\uff08\u4e5f\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\uff0c\u5982\u679c\u4e00\u53ea\u55b5\u7684\u540d\u6216\u59d3\u4e2d\u5305\u542b\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u53ea\u55b5\u5c31\u4f1a\u558a\u201c\u5230\u201d\u3002\n\n\u6709\u4e24\u95ee :\n\n1. \u5bf9\u4e8e\u6bcf\u6b21\u70b9\u540d\u8be2\u95ee\u6709\u591a\u5c11\u53ea\u55b5\u558a\u201c\u5230\u201d\u3002\n\n2. \u5bf9\u4e8e\u6bcf\u4e00\u53ea\u55b5\u95ee\u8be2\u5979\u558a\u4e86\u591a\u5c11\u6b21\u201c\u5230\u201d\u3002\n\n\u5b57\u7b26\u96c6 $|\\Sigma| \\le 10^4$, \u603b\u5b57\u7b26\u4e32\u957f\u4e0d\u8d85\u8fc7 $2 \\times 10^5$\u3002\n\n### \u6b63\u89e3\n\n#### \u7b80\u5355\u5206\u6790\n\n\u5148\u53ef\u4ee5\u628a\u4e00\u53ea\u55b5\u7684\u540d\u548c\u59d3\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u4e2d\u95f4\u63d2\u5165\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u5b57\u7b26\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u8003\u8651\u4e24\u4e2a\u4e32\u4e86\u3002\n\n\u8be2\u95ee\u662f\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32 $x$ \u5728\u5b57\u7b26\u4e32 $y$ \u4e2d\u662f\u5426\u51fa\u73b0\u8fc7\u3002\n\n\u5982\u679c\u5b57\u7b26\u4e32\u51fa\u73b0\u591a\u6b21\u7b97\u591a\u6b21\u7684\u8bdd\uff0c\u8fd9\u91cc\u6709\u4e00\u9053\u7528 AC \u81ea\u52a8\u673a [\u7ecf\u5178\u7684\u4f8b\u9898](https://www.luogu.com.cn/problem/P2414)\u3002\n\n\u8003\u8651 AC \u81ea\u52a8\u673a $\\text{fail}$ \u6811\u7684\u6027\u8d28\uff0c$\\text{fail}$ \u6307\u9488\u6307\u5411\u7684\u662f\u6700\u957f\u76f8\u540c\u540e\u7f00\u3002\n\n\u5982\u679c\u5b57\u7b26\u4e32 $A$ \u662f\u5b57\u7b26\u4e32 $B$ \u7684\u540e\u7f00, \u90a3\u4e48\u5728 AC \u81ea\u52a8\u673a\u4e0a\u9762\uff0c\u4ece $B$ \u5f00\u59cb\u8df3 $\\text{fail}$ \u6811\uff0c\u4e00\u5b9a\u53ef\u4ee5\u8df3\u5230 $A$\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c$B$ \u5728 $A$ \u7684\u5b50\u6811\u5185\uff0c$A$ \u662f $B$ \u7684\u7956\u5148\u3002\uff08\u5728 $\\text{fail}$ \u6811\u4e0a\uff09\n\n\u5224\u65ad $A$ \u662f\u5426\u5728 $B$ \u4e2d\u51fa\u73b0\u8fc7\uff0c\u5c31\u53ef\u4ee5\u5bf9\u4e8e $B$ \u7684\u6bcf\u4e00\u4e2a\u524d\u7f00\uff08\u5b50\u4e32\u4e00\u5b9a\u662f\u4e00\u4e2a\u524d\u7f00\u7684\u540e\u7f00\uff09\uff0c\u5728 $\\text{fail}$ \u6811\u4e0a\u66b4\u529b\u5f80\u4e0a\u8df3\u8fdb\u884c\u4fee\u6539\u6216\u8005\u67e5\u8be2\u5373\u53ef\u3002\n\n\u4f46\u662f\u66b4\u529b\u8df3 $\\text{fail}$ \u590d\u6742\u5ea6\u53ef\u80fd\u4e0d\u592a\u5bf9\uff0c~~\u4f46\u662f\u597d\u50cf\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898~~\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$ \u7684\u505a\u6cd5\u3002\n\n#### \u7b2c\u4e00\u95ee\n\n\u5bf9\u4e8e\u4e00\u4e2a\u540d\u5b57\u4e32\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00\uff08\u603b\u524d\u7f00\u4e2a\u6570\u4e0d\u8d85\u8fc7\u5b57\u7b26\u4e32\u603b\u957f\uff09\uff0c\u8986\u76d6\u5b83\u5230\u6839\u7684\u8def\u5f84\uff08\u8986\u76d6\u8868\u793a\u52a0\u591a\u6b21\u7b97\u4e00\u6b21\uff09\u3002\n\n\u5bf9\u6bcf\u4e00\u4e2a\u540d\u5b57\u4e32\u90fd\u8fd9\u4e48\u505a\uff0c\u770b\u70b9\u540d\u4e32\u603b\u5171\u88ab\u591a\u5c11\u4e2a\u540d\u5b57\u4e32\u7ed9\u8986\u76d6\u3002\n\n\u6811\u4e0a\u94fe\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u7684\u95ee\u9898\u5148\u8f6c\u5316\u6210\u6811\u4e0a\u5355\u70b9\u4fee\u6539\uff0c\u5b50\u6811\u67e5\u8be2\u7684\u95ee\u9898j\u3002\n\n\u7531\u4e8e\u8986\u76d6\u591a\u6b21\u7b97\u53ea\u7b97\u4e00\u6b21\uff0c\u5c31\u8981\u628a\u8986\u76d6\u591a\u7684\u90e8\u5206\u51cf\u6389\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f trick\u3002\n\n\u5bf9\u540d\u5b57\u4e32\u7684\u524d\u7f00\u6309 $\\text{dfs}$ \u5e8f\u6392\u5e8f\uff0c\u51cf\u6389\u7684\u90e8\u5206\u5c31\u662f\u6bcf\u76f8\u90bb\u8282\u70b9\u7684 $\\text{lca}$\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u8986\u76d6\u591a\u6b21\u7b97\u4e00\u6b21\u4e86\u3002\n\n#### \u7b2c\u4e8c\u95ee\n\n\u5bf9\u4e8e\u4e00\u4e2a\u540d\u5b57\u4e32\u7684\u6240\u6709\u4e00\u4e2a\u524d\u7f00\uff0c\u770b\u5b83\u4eec\u603b\u5171\u8986\u76d6\u4e86\u591a\u5c11\u70b9\u540d\u4e32\u3002\n\n\u6811\u4e0a\u5355\u70b9\u4fee\u6539\uff0c\u94fe\u67e5\u8be2\u7684\u95ee\u9898\u5148\u8f6c\u5316\u4e32\u6811\u4e0a\u5b50\u6811\u4fee\u6539, \u5355\u70b9\u67e5\u8be2\u7684\u95ee\u9898\u3002\n\n\u540c\u6837\u5229\u7528\u4e0a\u9762\u7684 trick\uff0c\u51cf\u6389 $\\text{dfs}$ \u5e8f\u76f8\u90bb\u8282\u70b9 $\\text{lca}$ \u7684\u8d21\u732e\u5373\u53ef\u3002\n\n#### \u590d\u6742\u5ea6\u5206\u6790\n\n\u8be2\u95ee\u90fd\u53ea\u9700\u8981\u7528\u5230\u6392\u5e8f\u548c\u6811\u72b6\u6570\u7ec4\uff0c\u8fd9\u4e00\u90e8\u5206\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002\n\n\u4f46\u662f\u6709\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u5f88\u8ff7\uff0c\u5c31\u662f $\\text{trie}$ \u6811\u6c42 $\\text{fail}$ \u7684\u90a3\u4e00\u90e8\u5206\uff0c\u6c42 $\\text{fail}$ \u662f\u66b4\u529b\u8df3\u7684\uff08\u4f46\u597d\u50cf\u590d\u6742\u5ea6\u5747\u644a\uff1f\uff09\uff0c\u590d\u6742\u5ea6\u6211\u4e5f\u4e0d\u6562\u4e0b\u5b9a\u8bba\u3002\n\n\u6c42\u54ea\u4f4d\u5927\u4f6c\u5e2e\u5fd9\u8bc1\u660e\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u6216\u8005\u76f4\u63a5 hack \u6389\u8fd9\u79cd\u505a\u6cd5\u3002 \n\n#### update :\n\n\u5b57\u7b26\u96c6\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u786e\u5b9e\u8fd9\u6837\u5199\u786e\u5b9e\u4e0d\u5bf9\u7684\uff0c\u65e0\u8bba\u662f\u666e\u901a\u5199\u6cd5\uff08\u5c06\u4e0d\u5b58\u5728\u7684 $\\text{to}$ \u6307\u9488\u8bbe\u4e3a $\\text{fail}$ \u7684 $\\text{to}$ \u6307\u9488\uff09\uff0c\u8fd8\u662f\u4e34\u65f6\u8df3 $\\text{fail}$ \u5e76\u4e14\u8bb0\u5fc6\u5316\uff0c\u6700\u574f\u590d\u6742\u5ea6\u662f $O(|\\Sigma| \\times N)$ \u7684\uff0c\u4f46\u662f\u7b2c\u4e8c\u79cd\u5199\u6cd5\u53ef\u80fd\u8fdc\u8fdc\u8fbe\u4e0d\u5230\u8fd9\u4e2a\u6700\u574f\u590d\u6742\u5ea6\uff0c\u800c\u4e14\u8c8c\u4f3c\u6700\u574f\u4e5f\u5c31 $10^9$ \uff1f\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 5e4 + 5;\nconst int M = 1e5 + 5;\nconst int S = (N + M) << 1;\n\nint n, m;\nint namePos[N], queryPos[M];\n\nint last, vcnt = 0;\nstruct node {\n    int fa, fail; // \u6b64\u5904\u7684 fa \u4e3a trie \u6811\u4e0a\u7684 fa\n    map<int, int> to;\n} a[S];\n\nint que[S];\nint siz[S], dep[S], son[S], fa[S]; // \u6b64\u5904\u7684 fa \u76f8\u5f53\u4e8e ac \u81ea\u52a8\u673a\u4e0a\u7684 fail\nint dfn[S], top[S], dfc; \nvector<int> g[S];\n\nnamespace BIT {\n#define lowbit(x) (x & -x)\n    int c[S];\n    void clear() { memset(c, 0, sizeof c); }\n    void update(int p, int v) {\n        for(int i = p; i <= dfc; i += lowbit(i))\n            c[i] += v;\n    }\n    int sum(int p) {\n        int res = 0;\n        for(int i = p; i; i -= lowbit(i))\n            res += c[i];\n        return res;\n    }\n    int query(int l, int r) { return sum(r) - sum(l - 1); }\n#undef lowbit\n} // namespace BIT\n\ninline int read() {\n    int x = 0; char ch = getchar();\n    while(!isdigit(ch)) ch = getchar();\n    while(isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n    return x;\n}\n\nvoid extend(int c) {\n    int &v = a[last].to[c];\n    if(!v) v = ++vcnt, a[v].fa = last;\n    last = v;\n}\n\nint getFail(int u, int c) {\n    if(a[u].to.count(c)) return a[u].to[c];\n    else if(!u) return u;\n    return a[u].to[c] = getFail(a[u].fail, c);\n}\n\nvoid buildFailTree() {\n    int hd = 1, tl = 0;\n    for(auto pr : a[0].to)\n        que[++tl] = pr.second;\n    while(hd <= tl) {\n        int u = que[hd++];\n        for(auto pr : a[u].to) {\n            a[pr.second].fail = getFail(a[u].fail, pr.first);\n            que[++tl] = pr.second;\n        }\n    }\n    for(int i = 1; i <= vcnt; ++i)\n        g[a[i].fail].push_back(i);\n}\n\nvoid preDfs(int u) {\n    siz[u] = 1;\n    dfn[u] = ++dfc;\n    dep[u] = dep[fa[u]] + 1;\n    for(int v : g[u]) if(v != fa[u]) {\n        fa[v] = u, preDfs(v);\n        siz[u] += siz[v];\n        if(!son[u] || siz[v] > siz[son[u]])\n            son[u] = v;\n    }\n}\nvoid getTop(int u, int tp) {\n    top[u] = tp;\n    if(son[u]) getTop(son[u], tp);\n    for(int v : g[u]) if(v != fa[u] && v != son[u]) {\n        getTop(v, v); \n    }\n}\n\ninline int lca(int u, int v) {\n    while(top[u] != top[v]) {\n        if(dep[top[u]] < dep[top[v]]) swap(u, v);\n        u = fa[top[u]];\n    }\n    return dep[u] < dep[v] ? u : v;\n}\n\nint arr[N], tot;\nbool cmp(const int &u, const int &v) { return dfn[u] < dfn[v]; }\n\nvoid solve1() {\n    BIT::clear();\n    for(int i = 1, u; i <= n; ++i) {\n        u = namePos[i], tot = 0;\n        while(u) {\n            arr[++tot] = u;\n            BIT::update(dfn[u], 1);\n            u = a[u].fa;\n        }\n        sort(arr + 1, arr + tot + 1, cmp);\n        for(int j = 1; j < tot; ++j)\n            BIT::update(dfn[lca(arr[j], arr[j + 1])], -1);\n    }\n    for(int i = 1, u; i <= m; ++i) {\n        u = queryPos[i];\n        printf(\"%d\\n\", BIT::query(dfn[u], dfn[u] + siz[u] - 1));\n    }\n}\nvoid solve2() {\n    BIT::clear();\n    for(int i = 1, u; i <= m; ++i) {\n        u = queryPos[i];\n        BIT::update(dfn[u], 1);\n        BIT::update(dfn[u] + siz[u], -1);\n    }\n    for(int i = 1, u, res; i <= n; ++i) {\n        u = namePos[i], tot = 0, res = 0;\n        while(u) {\n            arr[++tot] = u;\n            res += BIT::sum(dfn[u]);\n            u = a[u].fa;\n        }\n        sort(arr + 1, arr + tot + 1, cmp);\n        for(int j = 1; j < tot; ++j)\n            res -= BIT::sum(dfn[lca(arr[j], arr[j + 1])]);\n        printf(\"%d%c\", res, \" \\n\"[i == n]);\n    }\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"P2336.in\", \"r\", stdin);\n    freopen(\"P2336.out\", \"w\", stdout);\n#endif\n    n = read(), m = read();\n    for(int i = 1, l, c; i <= n; ++i) {\n        last = 0;\n        l = read();\n        for(int j = 1; j <= l; ++j) {\n            c = read();\n            extend(c);\n        } extend(-1);\n        l = read();\n        for(int j = 1; j <= l; ++j) {\n            c = read();\n            extend(c);\n        }\n        namePos[i] = last;\n    }\n    for(int i = 1, l, c; i <= m; ++i) {\n        last = 0;\n        l = read();\n        for(int j = 1; j <= l; ++j) {\n            c = read();\n            extend(c);\n        }\n        queryPos[i] = last;\n    }\n\n    buildFailTree();\n    \n    preDfs(0);\n    getTop(0, 0);\n    \n    solve1();\n    solve2();\n    return 0;\n}\n```\n",
        "postTime": 1589978795,
        "uid": 88471,
        "name": "Lskkkno1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2336 [SCOI2012] \u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d"
    },
    {
        "content": "\u4e00\u9053\u6bd4\u8f83\u4e0d\u9519**\u5b57\u7b26\u4e32**\u597d\u9898\uff0c\u8c8c\u4f3c\u6709\u5f88\u591a\u505a\u6cd5\u53ef\u4ee5\u8279\u8fc7\u53bb\u3002\n\n\u6bd4\u8f83\u4e3b\u6d41\u7684\u6709\u4e24\u5927\u7c7b\uff0c\u4e00\u79cd\u662f\u7528\u5404\u79cd**\u81ea\u52a8\u673a**\uff1a**AC\u81ea\u52a8\u673a**\u66b4\u529b\u641e\u6216\u8005\u662f\u795e\u4ed9\u7684**\u540e\u7f00\u81ea\u52a8\u673a**\u505a\uff0c\u76f8\u6bd4\u4e4b\u4e0b\u5bf9\u4e8e\u6211\u6765\u8bf4\u4e0d\u662f\u5f88\u4f1a\u3002\n\n\u53e6\u4e00\u79cd\u5c31\u662f\u7528**\u540e\u7f00\u6570\u7ec4**\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u7136\u540e\u53ef\u4ee5\u7528\u5404\u79cd\u6570\u636e\u7ed3\u6784\uff08\u5982**\u6811\u72b6\u6570\u7ec4**\uff09\u6765\u7ef4\u62a4\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u6bd4\u8f83\u83dc\u800c\u4e14\u6570\u636e\u8303\u56f4\u4e0d\u662f\u5f88\u5927\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528**\u83ab\u961f**\u6765\u66b4\u529b\u7684\u641e\u3002\n\n\u4e0b\u9762\u6211\u4eec\u4e3b\u8981\u5206\u6790\u4e00\u4e0b**SA+\u83ab\u961f**\u7684\u7b97\u6cd5\u3002\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u5c06\u6240\u6709\u732b\u7684\u59d3\u548c\u540d\u62fc\u63a5\u5728\u4e00\u8d77\uff08\u6ce8\u610f\u4e2d\u95f4\u8fd8\u662f\u8981\u7528\u7279\u6b8a\u5b57\u7b26\u8fde\u63a5\u4e00\u4e0b\uff09\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u662f\u54ea\u53ea\u732b\u7684\uff0c\u8bb0\u4e3a$id_i$\u3002\n\n\u7136\u540e\u8003\u8651\u5bf9\u4e8e\u8be2\u95ee\uff0c\u7531\u4e8e\u540e\u7f00\u6570\u7ec4\u7684$sa$\u6570\u7ec4\u8868\u793a\u7684\u662f**\u6392\u540d\u4e3a$i$\u7684\u540e\u7f00\u7684\u4f4d\u7f6e**\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6392\u540d**\u4e8c\u5206**\u51fa\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5728$sa$\u6570\u7ec4\u4e0a\u5bf9\u5e94\u7684**\u533a\u95f4**\u3002\n\n\u518d\u56de\u5934\u770b\u8fd9\u4e2a\u95ee\u9898\uff0c\u5148\u8003\u8651\u7b97\u8be2\u95ee\u7684\u7b54\u6848\uff0c\u9996\u5148\u8f6c\u5316\u4e3a\u533a\u95f4\u4e4b\u540e\u82e5\u5de6\u7aef\u70b9\u5927\u4e8e\u53f3\u7aef\u70b9\u90a3\u4e48\u8fd9\u4e2a\u4e32\u663e\u7136\u662f\u627e\u4e0d\u5230\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u3002\n\n\u5982\u679c\u662f\u5408\u6cd5\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u76f8\u5f53\u4e8e\u7edf\u8ba1\u8fd9\u6bb5\u533a\u95f4\u4e2d\u7684\u6240\u6709$sa_i$\u7684$id$\u7684\u79cd\u7c7b\u6570\uff08\u56e0\u4e3a\u6bcf\u53ea\u732b\u51fa\u73b0\u591a\u6b21\u4e5f\u53ea\u7edf\u8ba1\u4e00\u6b21\uff09\n\n\u8fd9\u4e2a\u5c31\u76f4\u63a5\u5f00\u4e00\u4e2a**\u6876**\u7528\u83ab\u961f\u7b97\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u7136\u540e\u662f\u8003\u8651\u6bcf\u53ea\u732b\u7684\u7b54\u6848\uff0c\u8fd9\u4e2a\u6211\u4eec\u83ab\u961f\u66f4\u65b0\u533a\u95f4\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\uff0c\u5982\u679c\u8fd9\u53ea\u732b\u662f\u7b2c\u4e00\u6b21\u51fa\u73b0\u90a3\u4e48\u5148\u5c06\u7b54\u6848\u52a0\u4e0a**\u6700\u5927\u7684\u53ef\u80fd\u51fa\u73b0\u6b21\u6570**\uff0c\u7136\u540e\u5728\u5220\u9664\u7684\u65f6\u5019\u51cf\u6389\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n+m\\sqrt n)$\uff0c\u53ef\u4ee5\u8f7b\u677e\u8dd1\u8fc7\u3002\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#define RI register int\nusing namespace std;\nconst int N=50005,M=100005;\nint blk[M+(N<<1)]; struct ques\n{\n    int l,r,id;\n    inline friend bool operator <(ques A,ques B)\n    {\n        return blk[A.l]^blk[B.l]?blk[A.l]<blk[B.l]:(blk[A.l]&1?A.r<B.r:A.r>B.r);\n    }\n}q[M]; int n,m,len,tot,a[M+(N<<1)],sa[M+(N<<1)],x,size,ans[M],id[M+(N<<1)],cnt,t[N],bkt[N],lim=10000,L,R,ret;\nclass FileInputOutput\n{\n    private:\n        #define S 1<<21\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (Ftop<S?Fout[Ftop++]=ch:(fwrite(Fout,1,S,stdout),Fout[(Ftop=0)++]=ch))\n        char Fin[S],Fout[S],*A,*B; int Ftop,pt[15];\n    public:\n        inline void read(int &x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        inline void write(int x,char ch)\n        {\n            if (!x) return (void)(pc('0'),pc(ch)); RI ptop=0;\n            while (x) pt[++ptop]=x%10,x/=10; while (ptop) pc(pt[ptop--]+48); pc(ch);\n        }\n        inline void Fend(void)\n        {\n            fwrite(Fout,1,Ftop,stdout);\n        }\n        #undef S\n        #undef tc\n        #undef pc\n}F;\nclass Suffix_Array\n{\n    private:\n        int rk[M+(N<<1)],t[M+(N<<1)],cnt[M+(N<<1)],size;\n        inline void Radix_sort(int n)\n        {\n            RI i; for (i=0;i<=size;++i) cnt[i]=0;\n            for (i=1;i<=n;++i) ++cnt[rk[i]];\n            for (i=1;i<=size;++i) cnt[i]+=cnt[i-1];\n            for (i=n;i;--i) sa[cnt[rk[t[i]]]--]=t[i];\n        }\n    public:\n        inline void build(int *a,int n)\n        {\n            RI i; size=a[n]; for (i=1;i<=n;++i) rk[i]=a[i],t[i]=i;\n            Radix_sort(n); for (RI p=0,w=1;p<n;size=p,w<<=1)\n            {\n                for (p=0,i=n-w+1;i<=n;++i) t[++p]=i;\n                for (i=1;i<=n;++i) if (sa[i]>w) t[++p]=sa[i]-w;\n                Radix_sort(n); swap(rk,t); rk[sa[1]]=p=1;\n                for (i=2;i<=n;++i) rk[sa[i]]=(t[sa[i-1]]==t[sa[i]]&&t[sa[i-1]+w]==t[sa[i]+w])?p:++p;\n            }\n        }\n}SA;\ninline void add(int x,int cur)\n{\n    if (++bkt[id[x]]==1) ++ret,t[id[x]]+=cnt-cur+1;\n}\ninline void del(int x,int cur)\n{\n    if (--bkt[id[x]]==0) --ret,t[id[x]]-=cnt-cur+1;\n}\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    RI i,j; for (F.read(n),F.read(m),i=1;i<=n;++i) for (RI k=0;k<=1;++k)\n    {\n        for (F.read(len),j=1;j<=len;++j) F.read(a[++tot]),id[tot]=i; a[++tot]=++lim;\n    }\n    for (size=(int)sqrt(tot),i=1;i<=tot;++i) blk[i]=(i-1)/size+1;\n    for (SA.build(a,tot),i=1;i<=m;++i)\n    {\n        for (F.read(len),L=j=1,R=tot;j<=len;++j)\n        {\n            F.read(x); int l=L,r=R,mid; while (l<=r)\n            if (a[sa[mid=l+r>>1]+j-1]<x) l=mid+1; else r=mid-1;\n            int temp=l; l=L; r=R; while (l<=r)\n            if (a[sa[mid=l+r>>1]+j-1]<=x) l=mid+1; else r=mid-1;\n            L=temp; R=r;\n        }\n        if (L<=R) q[++cnt]=(ques){L,R,i};\n    }\n    for (sort(q+1,q+cnt+1),i=L=1,R=0;i<=cnt;++i)\n    {\n        while (L>q[i].l) add(sa[--L],i); while (R<q[i].r) add(sa[++R],i);\n        while (L<q[i].l) del(sa[L++],i); while (R>q[i].r) del(sa[R--],i);\n        ans[q[i].id]=ret;\n    }\n    for (i=1;i<=m;++i) F.write(ans[i],'\\n');\n    for (i=1;i<=n;++i) F.write(t[i],' ');\n    return F.Fend(),0;\n}\n```",
        "postTime": 1543721675,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u4e00\u79cd\u540e\u7f00\u6570\u7ec4\uff0b\u6811\u72b6\u6570\u7ec4\u7684\u505a\u6cd5\n\n\u628a\u6240\u6709\u4e32\u4e32\u8d77\u6765\u5efa\u540e\u7f00\u6570\u7ec4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u4e32\u9996\u5411\u5de6\u5411\u53f3\u4e8c\u5206\u627e\u5408\u6cd5\u533a\u95f4\uff0c\n\n\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u6c42\u6bcf\u4e2a\u533a\u95f4\u5305\u542b\u591a\u5c11\u79cd\u989c\u8272\uff0c\u548c\u6bcf\u79cd\u989c\u8272\u88ab\u591a\u5c11\u533a\u95f4\u5305\u542b\n\n\u90fd\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u505a\n\n\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u53ef\u4ee5\u53c2\u8003*P1972 HH\u7684\u9879\u94fe*https://www.luogu.org/problemnew/solution/P1972\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u8ddf\u7b2c\u4e00\u95ee\u7684\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u90fd\u662f\u5bf9\u5e8f\u5217\u904d\u5386\u4e00\u904d\uff0c\u5728\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9L,R\uff0c\u4ee5\u53ca\u5f53\u524d\u70b9\u548c\u4e0e\u5f53\u524d\u70b9\u540c\u8272\u7684\u4e0a\u4e00\u4e2a\u70b9pre[i],i\u7684\u64cd\u4f5c\uff0e\n\n\u7b2c\u4e8c\u95ee\u662f\u8bbf\u95ee\u5230L\u5904\u7ed9\u6811\u72b6\u6570\u7ec4bit[L]++,\u5230R\u65f6bit[L]--,\u5230i\u65f6\u67e5\u8be2sum(i)-sum(pre[i])\uff0c\n\u548c\u7b2c\u4e00\u95ee\u76f8\u53cd\n\n\n\u7f51\u4e0a\u6709\u4e5f\u4e00\u7bc7\u535a\u5ba2\u662f\u8fd9\u6837\u7684\u505a\u6cd5\uff0c\u8bb2\u5f97\u66f4\u6e05\u695ahttps://blog.csdn.net/kscla/article/details/73176183\n\n\n\u603b\u590d\u6742\u5ea6\u662fO(nlogn)\u7684\n\n\u4ee3\u7801\u5f88\u4e11\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=501005,INF=1e9+7;\nint nn,q,n,m=N-1000,sa[N],ra[N],h[N],t[N],t1[N],t2[N];\nint st[19][N],lg[N];\nint s[N],col[N],hd[N],len[N],bu[N];\nint pre[N],bit1[N],bit2[N],ans1[N],ans2[N];\nint lp[N];//\u8be2\u95ee\u533a\u95f4\u7684\u5de6\u7aef\u70b9\nstruct P { int id,l,r; } p[N];\nbool Cmp(const P &A,const P &B) { return A.r<B.r; }\n//\u540e\u7f00\u6570\u7ec4\u662f\u4e4b\u524d\u5199\u7684\u677f\u5b50\uff0c\u8fde\u7f29\u8fdb\u90fd\u4e0d\u4e00\u6837\nvoid Getsa() {\n  int *x=t1,*y=t2;\n  for (int i=1;i<=n;++i) ++t[x[i]=s[i]];\n  for (int i=1;i<=m;++i) t[i]+=t[i-1];\n  for (int i=n;i;--i) sa[t[x[i]]--]=i;\n  for (int k=1;k<=n;k<<=1) {\n    int p=0; memset(t,0,m+1<<2);\n    for (int i=n-k+1;i<=n;++i) y[++p]=i;\n    for (int i=1;i<=n;++i) if (sa[i]>k) y[++p]=sa[i]-k;\n    for (int i=1;i<=n;++i) ++t[x[y[i]]];\n    for (int i=1;i<=m;++i) t[i]+=t[i-1];\n    for (int i=n;i;--i) sa[t[x[y[i]]]--]=y[i];\n    swap(x,y); x[sa[1]]=1;\n    for (int i=2;i<=n;++i) x[sa[i]]=x[sa[i-1]]+\n        (y[sa[i]]!=y[sa[i-1]]||y[sa[i]+k]!=y[sa[i-1]+k]);\n    if ((m=x[sa[n]])>=n) break;\n  }\n}\nvoid Geth() {\n  for (int i=1;i<=n;++i) ra[sa[i]]=i;\n  for (int i=1,k=0;i<=n;++i) {\n    if (k) --k;\n    int j=sa[ra[i]-1];\n    while (s[i+k]==s[j+k]) ++k;\n    h[ra[i]]=k;\n  }\n}\nvoid Init() {\n  for (int i=1;i<=n;++i) st[0][i]=h[i];\n  for (int i=1;i<19;++i)\n    for (int j=1;j+(1<<i)-1<=n;++j)\n      st[i][j]=min(st[i-1][j],st[i-1][j+(1<<i-1)]);\n  for (int i=1;(1<<i)<=n;++i) lg[1<<i]=i;\n  for (int i=1;i<=n;++i) if (!lg[i]) lg[i]=lg[i-1];\n}\nint Getmin(int a,int b) {\n  if (a==b) return INF;\n  if (a>b) swap(a,b);\n  int d=lg[b-(a++)];\n  return min(st[d][a],st[d][b-(1<<d)+1]);\n}\nvoid Upd(int *A,int i,int v) {\n    if (i) for (;i<=n;i+=i&-i) A[i]+=v;\n}\nint Query(int *A,int i) {\n    int res=0;\n    for (;i;i-=i&-i) res+=A[i];\n    return res;\n}\nvoid Input() {\n    int x,c=1e4;\n    scanf(\"%d%d\",&nn,&q);\n    for (int i=1;i<=nn;++i) {\n        for (int j=0;j<2;++j) {\n            scanf(\"%d\",&x);\n            while (x--) col[++n]=i,scanf(\"%d\",s+n);\n            s[++n]=++c;\n        }\n    }\n    for (int i=1;i<=q;++i) {\n        scanf(\"%d\",&len[n+1]); hd[n+1]=i;\n        for (int j=len[n+1];j--;) col[++n]=-i,scanf(\"%d\",s+n);\n        s[++n]=++c;\n    }\n}\n//\u540c\u65f6\u6c42\u51fapre[]\u548c\u8be2\u95ee\u533a\u95f4\nvoid Getpre() {\n    for (int i=1;i<=n;++i) {\n        if (col[sa[i]]>0) {\n            pre[i]=bu[col[sa[i]]];\n            bu[col[sa[i]]]=i;\n        }\n        if (hd[i]) {\n            p[hd[i]].id=hd[i];\n            int l=1,r=ra[i];\n            while (l<r) { int mi=l+r>>1; if (Getmin(mi,ra[i])>=len[i]) r=mi; else l=mi+1; }\n            p[hd[i]].l=lp[hd[i]]=l;\n            l=ra[i],r=n;\n            while (l<r) { int mi=l+r+1>>1; if (Getmin(ra[i],mi)>=len[i]) l=mi; else r=mi-1; }\n            p[hd[i]].r=r;\n        }\n    }\n    sort(p+1,p+q+1,Cmp);\n    sort(lp+1,lp+q+1);\n}\n//\u4e24\u4e2a\u8be2\u95ee\u653e\u5230\u4e00\u8d77\u505a\u4e86\nvoid Getans() {\n    for (int i=1,j=1,k=1;i<=n;++i) {\n        for (;j<=q&&lp[j]==i;++j) Upd(bit2,i,1);\n        if (col[sa[i]]>0) {\n            ans2[col[sa[i]]]+=Query(bit2,i)-Query(bit2,pre[i]);\n            Upd(bit1,i,1); Upd(bit1,pre[i],-1);\n        }\n        for (;k<=q&&p[k].r==i;++k) {\n            ans1[p[k].id]=Query(bit1,p[k].r)-Query(bit1,p[k].l-1);\n            Upd(bit2,p[k].l,-1);\n        }\n    }\n}\nint main() {\n    Input(),Getsa(),Geth(),Init(),Getpre(),Getans();\n    for (int i=1;i<=q;++i) printf(\"%d\\n\",ans1[i]);\n    for (int i=1;i<=nn;++i) printf(\"%d \",ans2[i]);\n}\n```",
        "postTime": 1531457349,
        "uid": 49920,
        "name": "\u8e72\u5728\u4e1b\u4e2d\u7b11",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u770b\u5927\u90e8\u5206\u9898\u89e3\u90fd\u662f\u62ff\u540e\u7f00\u6570\u7ec4\u505a\u7684\uff0c\u8fd9\u91cc\u6765\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a+\u83ab\u961f\u7684\u505a\u6cd5\uff0c\u800c\u4e14\u8dd1\u7684\u7279\u522b\u5feb233\n\n\u9996\u5148\u770b\u5230\u591a\u4e2a\u4e32\u5185\u51fa\u73b0\u8fc7\u7684\u5b50\u4e32\u80fd\u60f3\u5230\u5e7f\u4e49SAM\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5148\u628a\u6bcf\u4e2a\u59d3\u548c\u540d\u63d2\u5230\u540e\u7f00\u81ea\u52a8\u673a\u91cc\uff0c\u5e76\u4e14\u5728SAM\u7684\u65b0\u5efa\u7684\u8282\u70b9\u4e0a\u6807\u8bb0\u4e00\u4e0b\u5f53\u524d\u662f\u54ea\u4e2a\u55b5\u55b5\u55b5\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u5f53\u6211\u4eec\u8be2\u95ee\u5b50\u4e32\u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u5b50\u4e32\u653e\u5230SAM\u4e0a\u8dd1\uff0c\u7136\u540e\u663e\u7136\u7531\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6027\u8d28\u53ef\u5f97\uff0c\u8dd1\u5230\u7684\u8282\u70b9\u7684$Parent$\u5b50\u6811\u5185\u7684\u6240\u6709\u54b1\u4eec\u505a\u8fc7\u7684\u6807\u8bb0\u5c31\u662f\u88ab\u70b9\u5230\u7684\u55b5\u55b5\u55b5\u4e86\u3002\n\n\u7136\u540e\u5b50\u6811\u6211\u4eec\u53ef\u4ee5\u7528$Parent$\u6811\u4e0a\u7684$dfs$\u5e8f\u7ef4\u62a4\u533a\u95f4\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u95ee\u9898\u4f5c\u5982\u4e0b\u7684\u8f6c\u5316\uff1a\n\n1.\u8fd9\u6b21\u70b9\u540d\u70b9\u5230\u4e86\u591a\u5c11\u4e2a\u55b5\u55b5\u55b5$-->$\u533a\u95f4\u6570\u989c\u8272\u79cd\u7c7b\n\n2.\u6bcf\u4e2a\u55b5\u55b5\u55b5\u88ab\u70b9\u4e86\u591a\u5c11\u6b21\u540d$-->$\u6bcf\u79cd\u989c\u8272\u88ab\u591a\u5c11\u4e2a\u533a\u95f4\u6570\u5230\u4e86\n\n\u95ee\u98981\u6bd4\u8f83\u597d\u505a\uff0c\u79bb\u7ebf\u4e0b\u6765\u53ef\u4ee5\u5927\u529b\u83ab\u961f\uff0c\u4e5f\u53ef\u4ee5\u626b\u63cf\u7ebf+\u6811\u72b6\u6570\u7ec4\uff0c\u4f46\u662f\u95ee\u98982\u8be5\u600e\u4e48\u505a\u5462\uff1f\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u533a\u95f4\u6570\u989c\u8272\u7684\u83ab\u961f\u8fc7\u7a0b\uff0c\u6211\u4eec\u4ece\u4e0a\u4e00\u4e2a\u533a\u95f4\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u533a\u95f4\u7684\u65f6\u5019\u7aef\u70b9\u8981\u79fb\u52a8\u5bf9\u5427\uff0c\u8fd9\u5176\u4e2d\u52bf\u5fc5\u4f1a\u6709\u4e00\u4e9b\u989c\u8272\u79fb\u8fdb\u6765\u6216\u8005\u79fb\u51fa\u53bb\uff0c\u6211\u4eec\u4e0d\u59a8\u7ed9\u5f53\u524d\u533a\u95f4\u5185\u5305\u542b\u7684\u989c\u8272\u89c4\u5b9a\u4e00\u4e2a**\u5b58\u5728\u65f6\u95f4**\uff0c\u5373\u8fd9\u4e2a\u989c\u8272\u7684\u6700\u540e\u4e00\u4e2a\u88ab\u5f39\u51fa\u7684\u65f6\u95f4-\u8fd9\u4e2a\u989c\u8272\u5f00\u59cb\u51fa\u73b0\u5728\u8fd9\u4e2a\u533a\u95f4\u7684\u65f6\u95f4\uff0c\u663e\u7136\uff0c\u4e00\u4e2a\u989c\u8272\u4f1a\u88ab\u5212\u5206\u4e3a\u597d\u51e0\u6bb5\u5b58\u5728\u65f6\u95f4\uff0c\u6211\u4eec\u5c31\u7ef4\u62a4$lst_i$\u8868\u793a\u5f53\u524d\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u989c\u8272$i$\u662f\u5565\u65f6\u5019\u8fdb\u6765\u7684\uff0c\u5982\u679c\u6211\u4eec\u8981\u628a\u4e00\u4e2a\u989c\u8272\u7684\u6700\u540e\u4e00\u4e2a\u79fb\u51fa\u53bb\uff0c\u5c31\u628a\u5f53\u524d\u65f6\u95f4-$lst_i$\u5373\u8fd9\u4e2a\u989c\u8272\u7684\u8fd9\u6bb5\u5b58\u5728\u65f6\u95f4\u7edf\u8ba1\u5230\u8fd9\u4e2a\u989c\u8272\u7684\u7b54\u6848\u91cc\uff0c\u7136\u540e\u5c31\u884c\u5566\u3002\n\n\u54e6\u5bf9\u4e86\uff0c\u9274\u4e8e\u8fd9\u9898\u5b57\u7b26\u96c6\u4e0d\u90a3\u4e48\u6b63\u5e38\uff0c\u6211\u4eec\u7684\u540e\u7f00\u81ea\u52a8\u673a\u53ef\u4ee5\u62ffmap\u5b58\u8fb9\uff01\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<map>\n#define blo 447\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;\n\t\twhile((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}\n\t\tn=c-'0';\n\t\twhile((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\n\t\t}\n\t\ts:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\n\t\t}\n\t}\n\tvoid print(int num){\n\t\tif(num>=10)print(num/10);putchar(num%10+'0');\n\t}\n\ttypedef struct _n{\n\t\tint l;int r;int id;\n\t\tfriend bool operator <(const _n &a,const _n &b){\n\t\t\tif(a.l/blo==b.l/blo)return(a.r<b.r);\n\t\t\treturn(a.l/blo<b.l/blo);\n\t\t}\n\t}node;\n\tnode memchi[100001];\n\tmap<int,int> sam[200001];\n\tint len[400001],fa[400001],dfn[400001],heads[400001];\n\tint gn=2,gnn=1,col[400001],gdfn=1,size[400001],ints[400001];\n\ttypedef struct _b{\n\t\tint dest;int nxt;\n\t}bian;\n\tbian bians[400011];\n\tinline void add(int s,int t){\n\t\tbians[gnn].dest=t;\n\t\tbians[gnn].nxt=heads[s];\n\t\theads[s]=gnn;gnn++;\n\t}\n\tinline int zhuanyi(int p,int x,int c){\n\t\tint me=gn;gn++;\n\t\tcol[me]=c;len[me]=len[p]+1;\n\t\twhile(p&&!sam[p].count(x))sam[p][x]=me,p=fa[p];\n\t\tif(!p){\n\t\t\tfa[me]=1;return(me);\n\t\t}\n\t\tint q=sam[p][x];\n\t\tif(len[q]==len[p]+1){\n\t\t\tfa[me]=q;return(me);\n\t\t}\n\t\tint nq=gn;gn++;\n\t\tlen[nq]=len[p]+1;\n\t\tsam[nq]=sam[q];\n\t\tfa[nq]=fa[q];\n\t\tfa[q]=fa[me]=nq;\n\t\twhile(p&&sam[p][x]==q)sam[p][x]=nq,p=fa[p];\n\t\treturn(me);\n\t}\n\tvoid dfs(int pt){\n\t\tsize[pt]=1;\n\t\tdfn[pt]=gdfn;\n\t\tints[gdfn]=col[pt];gdfn++;\n\t\tfor(register int i=heads[pt];i;i=bians[i].nxt){\n\t\t\tdfs(bians[i].dest);\n\t\t\tsize[pt]+=size[bians[i].dest];\n\t\t}\n\t}\n\tint cnt[100001],lst[100001],ans1[100001],ans2[100001];\n\tvoid ywymain(){\n\t\tint n=get(),m=get();\n\t\tfor(register int i=1;i<=n;i++){\n\t\t\tint p=1;\n\t\t\tint l=get();\n\t\t\twhile(l)l--,p=zhuanyi(p,get(),i);\n\t\t\tp=1;l=get();\n\t\t\twhile(l)l--,p=zhuanyi(p,get(),i);\n\t\t}\n\t\tfor(register int i=2;i<gn;i++)add(fa[i],i);dfs(1);\n\t\tint ptr=1;\n\t\tfor(register int i=1;i<=m;i++){\n\t\t\tint cur=1;\n\t\t\tint l=get();\n\t\t\twhile(l)cur=sam[cur][get()],l--;\n\t\t\tif(!cur)continue;\n\t\t\tmemchi[ptr].l=dfn[cur];\n\t\t\tmemchi[ptr].r=dfn[cur]+size[cur]-1;\n\t\t\tmemchi[ptr].id=i\uff1bptr++;\n\t\t}\n\t\tptr--;sort(memchi+1,memchi+1+ptr);\n\t\tif(ptr){\n\t\t\tint l=memchi[1].l,r=memchi[1].r,tot=0;\n\t\t\tfor(register int i=l;i<=r;i++){\n\t\t\t\tif(!cnt[ints[i]]&&ints[i])tot++;\n\t\t\t\tcnt[ints[i]]++;lst[ints[i]]=1;\n\t\t\t}\n\t\t\tans1[memchi[1].id]=tot;\n\t\t\tfor(register int i=2;i<=ptr;i++){\n\t\t\t\twhile(l>memchi[i].l){\n\t\t\t\t\tl--;if(!cnt[ints[l]]&&ints[l])tot++,lst[ints[l]]=i;cnt[ints[l]]++;\n\t\t\t\t}\n\t\t\t\twhile(r<memchi[i].r){\n\t\t\t\t\tr++;if(!cnt[ints[r]]&&ints[r])tot++,lst[ints[r]]=i;cnt[ints[r]]++;\n\t\t\t\t}\n\t\t\t\twhile(l<memchi[i].l){\n\t\t\t\t\tcnt[ints[l]]--;if(!cnt[ints[l]]&&ints[l])tot--,ans2[ints[l]]+=(i-lst[ints[l]]);l++\uff1b\n\t\t\t\t}\n\t\t\t\twhile(r>memchi[i].r){\n\t\t\t\t\tcnt[ints[r]]--;if(!cnt[ints[r]]&&ints[r])tot--,ans2[ints[r]]+=(i-lst[ints[r]]);r--;\n\t\t\t\t}\n\t\t\t\tans1[memchi[i].id]=tot;\n\t\t\t}\n\t\t}\n\t\tfor(register int i=1;i<=n;i++){\n\t\t\tif(!cnt[i])continue;ans2[i]+=(ptr+1-lst[i]);\n\t\t}\n\t\tfor(register int i=1;i<=m;i++)print(ans1[i]),putchar('\\n');\n\t\tfor(register int i=1;i<=n;i++)print(ans2[i]),putchar(' ')\uff1b\n\t}\n}\nint main(){\n\tywy::ywymain();return(0);//\u518d\u89c1\u7a0b\u5e8f\n} \n```",
        "postTime": 1544586479,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u6050\u6016\u5982\u65af\n\n\u6211\u8fd9\u9898\u6628\u5929\u665a\u4e0a\u5f00\u7684\uff0c\u60f3\u4e86$30$\u5206\u949f\u4e0d\u4f1a\uff0c\u5468\u795e\u60f3\u4e86$30$\u5206\u949f\u505a\u51fa\u6765\u4e86\u548c\u6211\u8bb2\uff0c\u6253\u4e86$30$\u5206\u949f\u6a21\u677f\uff0c\u4eca\u5929\u5199\u4e86$30$\u5206\u949f\uff0c\u8c03\u4e86$1$\u4e2a\u534a\u5c0f\u65f6\u7ec8\u4e8e$AC$\u4e86\uff01\n\n$217$\u884c\uff08\u542b\u8c03\u8bd5\u4ee3\u7801\uff09\u8212\u670d\u554a\uff01\n\n\u8fd9\u771f\u7684\u662f\u4e00\u9053~~\u6bd2\u7624~~\u597d\u9898\uff01\n\n\u597d\u5427\uff0c\u8bb2\u6b63\u89e3\uff1a$SA+ST+\\text{\u4e8c\u5206}+\\text{\u7ebf\u6bb5\u6811}$\n\n\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u59d3\u548c\u540d\u7528\u4e00\u4e2a\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u8fde\u8d77\u6765\u3002\n\n\u7136\u540e\u628a\u6240\u6709\u55b5\u661f\u4eba\u7684\u540d\u5b57\u4ee5\u53ca\u70b9\u540d\u4e32\u8fde\u6210\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\uff08\u4e2d\u95f4\u7528\u4e00\u4e9b\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u8fde\u8d77\u6765\uff09\n```\nN=read(),Q=read();\n//N\u662f\u6709\u591a\u5c11\u4e2a\u4eba\uff0cid\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u4eba\uff08\u4e2d\u95f4\u5b57\u7b26\u4e3a0\uff09\n//Q\u662f\u8be2\u95ee\u4e2a\u6570\uff0cwhtpos\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8be2\u95ee\u7684\u521d\u59cb\u4f4d\u7f6e\nfor (int i=1;i<=N;i++){\n    int x1=read();\n    for (int j=1;j<=x1;j++){\n        a[++cnt]=read()+1;id[cnt]=i;\n    }\n    a[++cnt]=10000+2*i-1;//\u6ca1\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\n    int x2=read();\n    for (int j=1;j<=x2;j++){\n        a[++cnt]=read()+1;id[cnt]=i;\n    }\n    a[++cnt]=10000+2*i;//\u6ca1\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\n}\nfor (int i=1;i<=Q;i++){\n    Len[i]=read();\n    whtpos[i]=cnt+1;\n    for (int j=1;j<=Len[i];j++){\n        a[++cnt]=read()+1;id[cnt]=0;\n    }\n    a[++cnt]=100000+2*N+i;//\u6ca1\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\n}\n```\n\n~~\u5f88\u4e11\u662f\u4e0d\u662f~~\n\n\u6c42$SA,$\u4ee5\u53ca$Height$\u6570\u7ec4\u3002\n\n\u7136\u540e\u6211\u4eec\u627e\u5230\u6bcf\u4e00\u4e2a\u70b9\u540d\u4e32\u5f00\u5934\u7684\u5b57\u7b26\u4f4d\u7f6e\uff0c\u5373$whtpos[i],$\n\n\u6211\u4eec\u628a\u7b54\u6848\u4f4d\u7f6e\u8f6c\u6362\u5230\u540e\u7f00\u4e0a\uff0c\u6ce8\u610f\u5230\u6211\u4eec\u8981\u627e\u7684\u540e\u7f00\u4f4d\u7f6e$x$\u6ee1\u8db3\n\n$LCP(whtpos[i],x)\\geq Len[i]$\n\n$Len[i]$\u5c31\u662f\u672c\u6b21\u8be2\u95ee\u7684\u4e32\u7684\u957f\u5ea6\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c$i$\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u5c31\u662f\n\n$\\sum_{j=1}^{cnt}[LCP(whtpos[i],j)\\geq Len[i]]$\n\n$cnt$\u5c31\u662f\u603b\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u5bf9$Height$\u6570\u7ec4\u8fdb\u884c\u4e8c\u5206\uff01\u56e0\u4e3a\u6839\u636e$Height$\u7684\u5b9a\u4e49\uff0c\u53ef\u77e5$LCP(sa[x],sa[y])=min_{i=x+1}^{y}Height[i]$\n\n\u6240\u4ee5\u4e8c\u5206\u4e00\u4e2a\u5de6\u7aef\u70b9$l,$\u6ee1\u8db3\n\n$LCP(sa[l],ra[whtpos[i])\\geq Len[i]$\u4e14$l$\u6700\u5c0f\n\n\u540c\u7406\u4e8c\u5206\u4e00\u4e2a\u53f3\u7aef\u70b9$r$\u4e14$r$\u6700\u5927\n```\nint lb=1,rb=ra[whtpos[i]],ansl=ra[whtpos[i]];\nwhile (lb<=rb){\n    int mid=lb+rb>>1;\n    if (ST_query(mid,ra[whtpos[i]])>=Len[i]){\n        rb=mid-1;ansl=mid;\n    }else{\n        lb=mid+1;\n    }\n}\nint ansr=ra[whtpos[i]]-1;lb=ra[whtpos[i]],rb=cnt;\nwhile (lb<=rb){\n    int mid=lb+rb>>1;\n    if (ST_query(ra[whtpos[i]],mid)>=Len[i]){\n        lb=mid+1;ansr=mid;\n    }else{\n        rb=mid-1;\n    }\n}\n```\n\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u6392\u540d$l,l+1,...,r$\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4eba\uff01\n\n\u8fd9\u4e0d\u5c31\u662f$\\text{P1972 [SDOI2009]HH\u7684\u9879\u94fe}$\u5417\uff1f\n\n\u90a3\u5c31\u505a\u5b8c\u5566\uff01\n\n\u7b49\u7b49\u7b2c\u4e8c\u95ee\uff1f\uff1f\uff1f\uff1f\uff1f\n\n$------------$\n\n\u95ee\u9898\uff1a\n```\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u8be2\u95ee\u6c42\u4e00\u4e2a\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u989c\u8272\uff0c\n\n\u6700\u540e\u8f93\u51fa\u6bcf\u4e00\u4e2a\u989c\u8272\u88ab\u591a\u5c11\u4e2a\u8be2\u95ee\u533a\u95f4\u8986\u76d6\u8fc7\uff1f\n```\n\n\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u548c\u4e00\u4e2a$pre$\u6570\u7ec4\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u51fa\u73b0\u7684\u989c\u8272\u4f4d\u7f6e\uff08\u4e0d\u4f1a\u5de6\u8f6c[$\\text{P1972 [SDOI2009]HH\u7684\u9879\u94fe}$](https://www.luogu.org/blog/user3432/solution-p1972)\uff09\n\n\u4e0a\u9762\u7684\u9898\u89e3\u867d\u7136\u662f\u7528\u6811\u72b6\u6570\u7ec4\u7684\u4f46\u5176\u5b9e\u4e00\u6837\u3002\n\n\u6211\u4eec\u5bf9\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u6253\u4e00\u4e2a\u989c\u8272\u6807\u8bb0\uff0c\u5bf9\u4e8e\u51fa\u73b0\u4e86\u4e00\u4e2a\u989c\u8272\uff0c\u7ed9\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u53f6\u5b50\u8282\u70b9\u6253\u4e0a\u989c\u8272\u6807\u8bb0\uff0c\u628a$pre$\u6570\u7ec4\u6307\u5411\u7684\u4f4d\u7f6e\u5220\u53bb\u989c\u8272\u6807\u8bb0\uff0c\u7136\u540e\u7ed9\u8fd9\u4e2a\u989c\u8272\u7684\u7b54\u6848\u52a0\u4e0a$pre$\u6570\u7ec4\u6307\u5411\u7684\u4f4d\u7f6e\u5bf9\u5e94\u7684\u53f6\u5b50\u8282\u70b9\u88ab\u533a\u95f4\u8986\u76d6\u8fc7\u7684\u6b21\u6570\u3002\n\n\u6bcf\u4e00\u6b21\u8be2\u95ee\u5b8c\u4e86\u5c31\u7ed9\u8be2\u95ee\u533a\u95f4\u7684\u6240\u6709\u8282\u70b9\u8986\u76d6\u6b21\u6570\u52a0\u4e0a$1$\n\n\u8fd9\u9053\u9898\u5c31\u597d\u4e86\uff01\n\n\u8fd8\u662f\u770b\u770b\u4ee3\u7801\u52a0\u5f3a\u7406\u89e3\u597d\u4e86\uff0c\u5982\u679c\u8fd8\u662f\u4e0d\u4f1a\u5c31\u79c1\u4fe1\u95ee\u6211$qwq$\n\n\u6700\u540e\u7684\u65f6\u5019\u8981\u904d\u5386\u7ebf\u6bb5\u6811\uff0c\u628a\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u7684\u989c\u8272\u6807\u8bb0\u90fd\u5220\u6389\uff0c\u7136\u540e\u66f4\u65b0\u7b54\u6848\u3002\n\n\u4e0d\u8981\u5fd8\u8bb0$pushdown$!\n\n```\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();};\n    while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-48;ch=getchar();};\n    return x*f; \n}\nint N,Q,cnt,maxx,a[500101],Id[500101];\nint hi[500101],c[500101],wht[500101],id[500101],sa[500101],ra[500101],hei[500101],pos[500101];\ninline void qsort(int n,int m){\n    for (register int i=0;i<=m;i++) c[i]=0;\n    for (register int i=1;i<=n;i++) c[ra[i]]++;\n    for (register int i=1;i<=m;i++) c[i]+=c[i-1];\n    for (register int i=n;i;i--) sa[c[ra[pos[i]]]--]=pos[i];\n}\ninline void GetSA(int n){\n    for (register int i=1;i<=n;i++) ra[i]=a[i],pos[i]=i;\n    int m=400000;\n    //cout<<m<<endl;\n    qsort(n,m);\n    for (register int w=1,p=0;p<n;m=p,w<<=1){\n        p=0;\n        for (register int i=1;i<=w;i++) pos[++p]=n-w+i;\n    \tfor (register int i=1;i<=n;i++){     \n        \tif (sa[i]>w) pos[++p]=sa[i]-w;\n        }\n        //cout<<\"2\";\n        qsort(n,m);\n        swap(pos,ra);\n        ra[sa[1]]=p=1;\n        for (register int i=2;i<=n;i++){\n            //cout<<\"1\";\n            if (pos[sa[i-1]]==pos[sa[i]]&&pos[sa[i-1]+w]==pos[sa[i]+w]){\n                ra[sa[i]]=p;\n            }else ra[sa[i]]=++p;\n        }\n    }\n}\ninline void GetHeight(int n){\n    register int ans=0;\n    for (register int i=1;i<=n;i++){\n        if (ans) ans--;\n        register int j=sa[ra[i]-1];\n        while (a[j+ans]==a[i+ans]) ans++;\n        hei[ra[i]]=ans;\n    }\n}\nint F[500101][24];\ninline void GetST(int n){\n    for (int i=1;i<=n;i++) F[i][0]=hei[i];\n    for (int j=1;j<=22;j++){\n        for (int i=1;i+(1<<j)<=n+1;i++){\n            F[i][j]=min(F[i][j-1],F[i+(1<<(j-1))][j-1]);\n        }\n    }\n}\ninline int ST_query(int l,int r){\n    if (l==r) return 999999999;\n    if (l>r) swap(l,r);\n    l++;\n    int k=log2(r-l+1);\n    return min(F[l][k],F[r-(1<<k)+1][k]);\n}\nnamespace XDS{\n    struct node{\n        int tot=0,col,lazy=0,coltot=0;\n    }g[2000001];\n    int ans[100001],MMM;\n    inline void pushup(int rt){\n        g[rt].tot=g[rt*2].tot+g[rt*2+1].tot;\n        g[rt].coltot=g[rt*2].coltot+g[rt*2+1].coltot;\n    }\n    inline void pushdown(int rt,int l,int r){\n        if (g[rt].lazy!=0){\n            int mid=(l+r)>>1,lson=rt*2,rson=rt*2+1;\n            g[lson].lazy+=g[rt].lazy;g[rson].lazy+=g[rt].lazy;\n            g[lson].tot+=(mid-l+1)*g[rt].lazy;g[rson].tot+=(r-mid)*g[rt].lazy;\n            g[rt].lazy=0;\n        }\n    }\n    inline void delcol(int rt,int lb,int rb,int pos,int x){\n        if (lb==rb){\n            if (x==-1) ans[g[rt].col]+=g[rt].tot,g[rt].col=g[rt].coltot=0,g[rt].tot=0;\n            else g[rt].col=x,g[rt].coltot=1;\n            MMM=max(MMM,rt);\n            return;\n        }\n        int mid=lb+rb>>1;pushdown(rt,lb,rb);\n        if (mid>=pos) delcol(rt<<1,lb,mid,pos,x);\n        else delcol(rt<<1|1,mid+1,rb,pos,x);\n        pushup(rt);\n    }\n    inline void change(int rt,int l,int r,int lb,int rb,ll xx){\n   \t\tif (l>rb||r<lb) return;\n    \tif (l>=lb&&r<=rb){g[rt].lazy+=xx;g[rt].tot+=(r-l+1)*xx;return;}\n    \tpushdown(rt,l,r);int mid=(l+r)>>1;\n    \tchange(rt*2,l,mid,lb,rb,xx);change(rt*2+1,mid+1,r,lb,rb,xx);\n    \tpushup(rt);\n    }\n    inline ll query(int rt,int l,int r,int lb,int rb){\n        if (l>rb||r<lb) return 0;\n        if (l>=lb&&r<=rb) return g[rt].coltot;\n        pushdown(rt,l,r);\n        int mid=(l+r)>>1;\n        return (query(rt*2,l,mid,lb,rb)+query(rt*2+1,mid+1,r,lb,rb));\n    }\n    inline void sbhy(int rt,int l,int r){\n   \t\tif (g[rt].col) ans[g[rt].col]+=g[rt].tot;\n   \t\tif (l==r) return;\n   \t\tpushdown(rt,l,r);\n   \t\tint mid=l+r>>1;\n   \t\tsbhy(rt<<1,l,mid);sbhy(rt<<1|1,mid+1,r);\n    }\n}\nint pre[400101],AnS[400101],whtpos[400101],Len[400101];\nstruct aque{\n    int id,ans,l,r;\n}que[1000101];\ninline bool Cmp(aque a,aque b){\n    return a.r<b.r;\n}\nint main(){\n    int cnt=0;\n    N=read(),Q=read();\n    for (int i=1;i<=N;i++){\n        int x1=read();\n        for (int j=1;j<=x1;j++){\n            a[++cnt]=read()+1;id[cnt]=i;\n        }\n        a[++cnt]=10000+2*i-1;\n        int x2=read();\n        for (int j=1;j<=x2;j++){\n            a[++cnt]=read()+1;id[cnt]=i;\n        }\n        a[++cnt]=10000+2*i;\n    }\n    for (int i=1;i<=Q;i++){\n        Len[i]=read();\n        whtpos[i]=cnt+1;\n        for (int j=1;j<=Len[i];j++){\n            a[++cnt]=read()+1;id[cnt]=0;\n        }\n        a[++cnt]=100000+2*N+i;\n    }\n    //for (int i=1;i<=cnt;i++) cout<<a[i]<<\" \";\n    GetSA(cnt);\n    GetHeight(cnt);\n    GetST(cnt);\n    //for (int i=1;i<=cnt;i++){\n        //printf(\"%c:%d->%d \",a[sa[i]]+'a'-1,i,sa[i]);\n    //}\n    //printf(\"\\n\");\n    //printf(\"\\n\");\n    for (int i=1;i<=cnt;i++) Id[i]=id[sa[i]];\n    for (int i=1;i<=Q;i++){\n        int lb=1,rb=ra[whtpos[i]],ansl=ra[whtpos[i]];\n        //cout<<\"Start\"<<rb<<\":\";\n        while (lb<=rb){\n            int mid=lb+rb>>1;//cout<<mid<<\" \";\n            if (ST_query(mid,ra[whtpos[i]])>=Len[i]){\n                rb=mid-1;ansl=mid;\n            }else{\n                lb=mid+1;\n            }\n        }\n        //cout<<\"|\";\n        int ansr=ra[whtpos[i]]-1;lb=ra[whtpos[i]],rb=cnt;\n        //cout<<\"Start\"<<lb<<\":\";\n        while (lb<=rb){\n            int mid=lb+rb>>1;//cout<<mid<<\" \";\n            if (ST_query(ra[whtpos[i]],mid)>=Len[i]){\n                lb=mid+1;ansr=mid;\n            }else{\n                rb=mid-1;\n            }\n        }\n        que[i].id=i,que[i].l=ansl,que[i].r=ansr;\n        //cout<<endl<<ansl<<\" \"<<ansr<<\":\"<<endl;\n        //for (int i=ansl;i<=ansr;i++){\n            //printf(\"%d \",Id[i]);\n        //}\n    }\n    //cout<<endl;\n    sort(que+1,que+1+Q,Cmp);\n    int pos=1;\n    for (int i=1;i<=Q;i++){\n        while (pos<=que[i].r){\n            if (!pre[Id[pos]]){\n                pre[Id[pos]]=pos;\n                if (Id[pos]){\n                    XDS::delcol(1,1,cnt,pos,Id[pos]);\n                    //cout<<\"Add:\"<<pos<<\",\"<<Id[pos]<<endl;\n                }\n            }else{\n                if (Id[pos]) XDS::delcol(1,1,cnt,pre[Id[pos]],-1);\n                    //cout<<\"Del:\"<<pre[Id[pos]]<<\",\"<<Id[pos]<<endl;\n                pre[Id[pos]]=pos;\n                if (Id[pos]){\n                    XDS::delcol(1,1,cnt,pos,Id[pos]);\n                    //cout<<\"Add:\"<<pos<<\",\"<<Id[pos]<<endl;\n                }\n            }\n            pos++;\n        }\n        AnS[que[i].id]=XDS::query(1,1,cnt,que[i].l,que[i].r);\n        XDS::change(1,1,cnt,que[i].l,que[i].r,1);\n    }\n    XDS::sbhy(1,1,cnt);\n    for (int i=1;i<=Q;i++){\n        printf(\"%d\\n\",AnS[i]);\n    }\n    for (int i=1;i<=N;i++){\n        printf(\"%d \",XDS::ans[i]);\n    }\n}\n\n```\n\n",
        "postTime": 1544600117,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u4e00\u79cd\u4e0d\u4e00\u6837\u7684\u65b9\u6cd5\u2026\u2026\u6c42\u7ba1\u7406\u5458\u7ed9\u8fc7\uff08\r\n\r\n\u8868\u793a\u770b\u4e0d\u61c2\u5176\u4ed6\u9898\u89e3\u7684\u8bf4\uff08\r\n\r\n\u9996\u5148\u6211\u4eec\u628a\u6bcf\u4e2a\u4eba\u7684\u59d3\u548c\u540d\u4e2d\u95f4\u52a0\u4e00\u4e2a\u5b57\u7b26\u53d8\u6210\u4e00\u4e2a\u4e32\uff0c\u4e8e\u662f\u8fd9\u4e2a\u9898\u5c31\u53d8\u6210\u4e86\uff1a\r\n\r\n\u7ed9\u4e00\u5806\u6587\u672c\u4e32\u548c\u4e00\u5806\u6a21\u677f\u4e32\uff0c\u6c42\u6bcf\u4e2a\u6a21\u677f\u4e32\u5728\u591a\u5c11\u4e2a\u6587\u672c\u4e32\u4e2d\u51fa\u73b0\u8fc7\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u6587\u672c\u4e32\u91cc\u6709\u591a\u5c11\u4e2a\u6a21\u677f\u4e32\u3002\r\n\r\n\u65e0\u8111\u628a\u6587\u672c\u4e32\u52a0\u5206\u9694\u7b26\u5efa SAM\uff0c\u7136\u540e\u628a\u6a21\u677f\u4e32\u653e\u4e0a\u53bb\u5339\u914d\u3002\r\n\r\n\u5bf9\u4e8e\u4e00\u4e2a\u6a21\u677f\u4e32\uff0c\u5982\u679c\u5927\u4e32\u7684\u4e00\u4e2a\u524d\u7f00\u6ee1\u8db3\uff1a\u5b83\u5728\u8fd9\u4e2a\u6a21\u677f\u4e32\u5bf9\u5e94\u7684\u8282\u70b9\u7684\u5b50\u6811\u5185\uff0c\u5e76\u4e14\u5b83\u7684\u7ed3\u5c3e\u5b57\u7b26\u5728\u67d0\u4e2a\u6587\u672c\u4e32\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u6a21\u677f\u4e32\u5c31\u4e00\u5b9a\u5728\u8fd9\u4e2a\u6587\u672c\u4e32\u91cc\u51fa\u73b0\u8fc7\u3002\r\n\r\n\u90a3\u4e48\u6211\u4eec\u7ed9\u6240\u6709\u524d\u7f00\u8282\u70b9\u6309\u7167\u5b83\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6240\u5728\u7684\u6587\u672c\u4e32\u67d3\u8272\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u8981\u89e3\u51b3\u7684\u5c31\u662f\u5b50\u6811\u6570\u989c\u8272\u548c\u6570\u6bcf\u4e2a\u989c\u8272\u88ab\u591a\u5c11\u4e2a\u5b50\u6811\u5305\u542b\u4e86\u3002\r\n\r\n\u538b\u6241\u5230 dfs \u5e8f\u4e0a\uff0c\u5c31\u662f\u533a\u95f4\u6570\u989c\u8272\uff0c\u4ee5\u53ca\u95ee\u6bcf\u4e2a\u989c\u8272\u88ab\u591a\u5c11\u4e2a\u533a\u95f4\u5305\u542b\u3002\r\n\r\n\u8fd9\u4e24\u95ee\u90fd\u662f\u7ecf\u5178\u95ee\u9898\uff0c\u8bb2\u4e00\u4e0b\u505a\u6cd5\uff1a\r\n\r\n\u7b2c\u4e00\u95ee\u5c31\u662f\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u7ebf\uff0c\u626b\u5230\u4e00\u4e2a\u70b9\u5c31\u628a\u5b83\u52a0\u4e00\uff0c\u628a\u5b83\u7684\u524d\u7f00\u51cf\u4e00\uff0c\u7136\u540e\u626b\u5230\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5c31\u67e5\u8be2\u533a\u95f4\u548c\u3002\r\n\r\n\u7b2c\u4e8c\u95ee\u4e5f\u662f\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u7ebf\uff0c\u5047\u8bbe\u4e00\u4e2a\u533a\u95f4\u662f $[l,r]$\uff0c\u626b\u5230 $l$ \u7684\u65f6\u5019\u628a $[l,n]$ \u52a0\u4e00\uff0c\u626b\u5230 $r+1$ \u628a $[l,n]$ \u51cf\u4e00\uff0c\u4e00\u4e2a\u70b9\u5bf9\u4e8e\u5b83\u7684\u989c\u8272\u7684\u8d21\u732e\u5c31\u662f\u5b83\u7684\u503c\u51cf\u53bb\u5b83\u524d\u9a71\u7684\u503c\u3002\r\n\r\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\r\n```cpp\r\n#include<map>\r\n#include<vector>\r\n#include<cstring>\r\n#include<cstdio>\r\n#include<cctype>\r\nusing namespace std;\r\ninline int readint(){\r\n\tint x=0;\r\n\tchar c=getchar();\r\n\tbool f=0;\r\n\twhile(!isdigit(c)&&c!='-') c=getchar();\r\n\tif(c=='-'){\r\n\t\tf=1;\r\n\t\tc=getchar();\r\n\t}\r\n\twhile(isdigit(c)){\r\n\t\tx=x*10+c-'0';\r\n\t\tc=getchar();\r\n\t}\r\n\treturn f?-x:x;\r\n}\r\nconst int maxn=5e4+5,maxm=1e5+5,maxl=2e5+5;\r\nint n,m;\r\nint sz,last,len[maxl*2],link[maxl*2];\r\nmap<int,int> nxt[maxl*2];\r\nvector<int> ch[maxl*2];\r\nvoid init(){\r\n\tsz=1;\r\n\tlast=0;\r\n\tlen[0]=0;\r\n\tlink[0]=-1;\r\n}\r\nvoid extend(int c){\r\n\tint cur=sz++;\r\n\tlen[cur]=len[last]+1;\r\n\tint p=last;\r\n\twhile(p>=0&&!nxt[p].count(c)){\r\n\t\tnxt[p][c]=cur;\r\n\t\tp=link[p];\r\n\t}\r\n\tif(p<0) link[cur]=0;\r\n\telse{\r\n\t\tint q=nxt[p][c];\r\n\t\tif(len[p]+1==len[q]) link[cur]=q;\r\n\t\telse{\r\n\t\t\tint clone=sz++;\r\n\t\t\tlen[clone]=len[p]+1;\r\n\t\t\tlink[clone]=link[q];\r\n\t\t\tnxt[clone]=nxt[q];\r\n\t\t\twhile(p>=0&&nxt[p][c]==q){\r\n\t\t\t\tnxt[p][c]=clone;\r\n\t\t\t\tp=link[p];\r\n\t\t\t}\r\n\t\t\tlink[cur]=link[q]=clone;\r\n\t\t}\r\n\t}\r\n\tlast=cur;\r\n}\r\nint c[maxl*2];\r\nint pos[maxl*2],size[maxl*2];\r\nvector<int> f;\r\nvoid dfs(int u){\r\n\tpos[u]=f.size();\r\n\tf.push_back(u);\r\n\tsize[u]=1;\r\n\tfor(int i=0;i<(int)ch[u].size();i++){\r\n\t\tint v=ch[u][i];\r\n\t\tdfs(v);\r\n\t\tsize[u]+=size[v];\r\n\t}\r\n}\r\nint lst[maxl*2],pre[maxl*2];\r\ntypedef pair<int,int> pii;\r\nvector<pii> q1[maxl*2];\r\nvector<int> q2[maxl*2];\r\nint t[maxl*2];\r\ninline int lowbit(int x){\r\n\treturn x&-x;\r\n}\r\nvoid modify(int x,int k){\r\n\twhile(x<=sz){\r\n\t\tt[x]+=k;\r\n\t\tx+=lowbit(x);\r\n\t}\r\n}\r\nint query(int x){\r\n\tint s=0;\r\n\twhile(x>0){\r\n\t\ts+=t[x];\r\n\t\tx-=lowbit(x);\r\n\t}\r\n\treturn s;\r\n}\r\nint ans[maxm];\r\nint main(){\r\n\t#ifdef LOCAL\r\n\tfreopen(\"in.txt\",\"r\",stdin);\r\n\tfreopen(\"out.txt\",\"w\",stdout);\r\n\t#endif\r\n\tn=readint();\r\n\tm=readint();\r\n\tinit();\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tint l=readint();\r\n\t\twhile(l--){\r\n\t\t\textend(readint());\r\n\t\t\tc[last]=i;\r\n\t\t}\r\n\t\textend(-1);\r\n\t\tl=readint();\r\n\t\twhile(l--){\r\n\t\t\textend(readint());\r\n\t\t\tc[last]=i;\r\n\t\t}\r\n\t\textend(-1);\r\n\t}\r\n\tfor(int i=1;i<sz;i++) ch[link[i]].push_back(i);\r\n\tf.push_back(0);\r\n\tdfs(0);\r\n\tfor(int i=1;i<=sz;i++){\r\n\t\tpre[i]=lst[c[f[i]]];\r\n\t\tlst[c[f[i]]]=i;\r\n\t}\r\n\tfor(int i=0;i<m;i++){\r\n\t\tint l=readint(),u=0;\r\n\t\tbool flag=1;\r\n\t\twhile(l--){\r\n\t\t\tint c=readint();\r\n\t\t\tif(!nxt[u].count(c)) flag=0;\r\n\t\t\telse u=nxt[u][c];\r\n            //\u6ce8\u610f\u8fd9\u91cc\u5982\u679c\u4e0d\u5199 else \u5c31\u4f1a\u51fa\u9505\u2026\u2026\u56e0\u4e3a\u5982\u679c\u8bbf\u95ee\u4e86 nxt[u][c] \u5c31\u4f1a\u81ea\u52a8\u7ed9\u4ed6\u4e00\u4e2a\u503c\u4e3a 0\r\n\t\t}\r\n\t\tif(!flag) continue;\r\n\t\tq1[pos[u]+size[u]-1].push_back(pii(i,pos[u]));\r\n\t\tq2[pos[u]].push_back(pos[u]);\r\n\t\tq2[pos[u]+size[u]].push_back(-pos[u]);\r\n\t}\r\n\tfor(int i=1;i<=sz;i++){\r\n\t\tif(c[f[i]]){\r\n\t\t\tmodify(i,1);\r\n\t\t\tif(pre[i]) modify(pre[i],-1);\r\n\t\t}\r\n\t\tfor(int j=0;j<(int)q1[i].size();j++)\r\n\t\t\tans[q1[i][j].first]=query(i)-query(q1[i][j].second-1);\r\n\t}\r\n\tfor(int i=0;i<m;i++) printf(\"%d\\n\",ans[i]);\r\n\tmemset(ans,0,sizeof(ans));\r\n\tmemset(t,0,sizeof(t));\r\n\tfor(int i=1;i<=sz;i++){\r\n\t\tfor(int j=0;j<(int)q2[i].size();j++)\r\n\t\t\tif(q2[i][j]>0) modify(q2[i][j],1);\r\n\t\t\telse modify(-q2[i][j],-1);\r\n\t\tans[c[f[i]]]+=query(i)-query(pre[i]);\r\n\t}\r\n\tfor(int i=1;i<=n;i++) printf(\"%d \",ans[i]);\r\n\tprintf(\"\\n\");\r\n\treturn 0;\r\n}\r\n```",
        "postTime": 1595914953,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u6211\u6765\u653e\u4e2a\u53ef\u4ee5\u4f18\u5316\u5230\u8fd1\u4f3c $O(n)$ \u7684 $SAM$ \u9898\u89e3\n\n### \u7b2c\u4e00\u95ee\uff1a\u8be2\u95ee\u4e00\u4e2a\u4e32\u662f\u591a\u5c11\u4e2a\u4e32\u7684\u5b50\u4e32\n\n\u9996\u5148\u5bf9\u6240\u6709\u732b\u7684\u540d\u5b57\u5efa **\u5e7f\u4e49 $SAM$**\uff0c\u70b9\u540d\u65f6\uff0c\u5c06\u5b57\u7b26\u4e32\u653e\u5230 $SAM$ \u91cc\u9762\u8dd1\uff0c\u6700\u7ec8\u5230\u8fbe\u8282\u70b9 $x$\u3002\n\n\u8fd9\u65f6\u8003\u8651\u66b4\u529b\uff0c\u524d\u9762\u732b\u540d\u5b57\u7684\u8d21\u732e\u600e\u6837\u624d\u80fd\u7edf\u8ba1\u5230\u8282\u70b9 $x$ \uff0c\u5c31\u662f\u5bf9\u6bcf\u4e2a\u540d\u5b57\u7684\u6240\u6709\u524d\u7f00\u7684\u540e\u7f00\uff0c\u66b4\u529b\u8df3 $fail$ \u8fb9\uff0c\u5bf9\u6bcf\u4e2a\u9996\u6b21\u8df3\u5230\u7684\u8282\u70b9\u6743\u503c ```++sum[p]```\uff0c\u6700\u540e\u76f4\u63a5\u8f93\u51fa $sum[x]$\n\n\u8003\u8651\u5230\u4e0a\u9762\u7684\u8fc7\u7a0b\u5c31\u662f\u5bf9\u70b9 $x$ \u5230\u6839\u7684\u94fe+1\uff0c\u4f46\u662f\u4e0d\u80fd\u91cd\u590d\uff0c\u5bf9\u6240\u6709\u8981\u8df3 $fail$ \u8fb9\u7684\u8282\u70b9\uff0c\u6309\u7167 $dfs$ \u5e8f\u6392\u5e8f\uff0c\u7528\u6811\u4e0a\u5dee\u5206\uff0c\u6bcf\u6b21\u5bf9 $x$ \u5230\u6839 +1\uff0c \u5bf9 $lca(x, x -1)$ \u5230\u6839 -1\uff0c\u8fd9\u6837\u5c31\u4e0d\u91cd\u4e0d\u6f0f\u7684\u52a0\u5b8c\u4e86\u3002\n\n### \u7b2c\u4e8c\u95ee\uff1a\u8be2\u95ee\u4e00\u4e2a\u4e32\u5305\u542b\u591a\u5c11\u4e2a\u7ed9\u5b9a\u4e32\n\u6bcf\u6b21\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u8dd1\u5230 $x$\uff0c\u5c31\u5bf9 $x$ \u70b9+1\n\n\u66b4\u529b\uff1a\u5bf9\u540d\u5b57\u7684\u6bcf\u4e2a\u524d\u7f00\u7684\u540e\u7f00\uff0c\u8df3 $fail$ \u8fb9\uff0c\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u65b0\u7684 $x$ \u5c31\u628a $x$ \u7684\u8d21\u732e\u52a0\u8fdb\u6765\n\n\u8003\u8651\u4e00\u4e2a\u70b9 $x$ \u4ece\u591a\u5c11\u4e2a\u8282\u70b9\u8df3 $fail$ \u53ef\u4ee5\u7edf\u8ba1\u5230 $x$, \u90a3\u5c31\u662f $x$ \u7684\u5b50\u6811\uff0c\u90a3\u4e00\u4e2a $x$ \u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u533a\u95f4\u52a0, \u7528 $dfs$ \u5e8f\u53ef\u4ee5\u4f18\u5316\u5230 $O(n)$\n\n\u540c\u7406\uff0c\u5bf9\uff08\u540d\u5b57\uff09\u6240\u6709\u524d\u7f00\u7684\u540e\u7f00\u8282\u70b9\u6309\u7167 $dfs$ \u5e8f\u6392\u5e8f\uff0c\u628a\u8d21\u732e\u52a0\u4e00\u52a0\u5c31\u884c\u4e86\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e $SAM$ \u7684\u8282\u70b9\u8bbf\u95ee (\u7528\u7684 $map$)\uff0c\u6392\u5e8f\u548c\u6c42 $lca$\uff0c\u6392\u5e8f\u53ef\u4ee5\u7528\u57fa\u6570\u6392\u5e8f\uff0c$lca$ \u53ef\u4ee5\u79bb\u7ebf $tarjan$, $SAM$ \u8bbf\u95ee\u8282\u70b9\u63a5\u8fd1 $O(1)$\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u4e00\u4e2a\u8fd1\u4f3c $O(n)$ \u7684\u7b97\u6cd5\n\n\u7531\u4e8e\u90a3\u51e0\u4e2a\u4f18\u5316\u592a\u6076\u5fc3\u6211\u5b9e\u73b0\u662f $n\\ log\\ n$ \u7684\n\n$code$ \u5e76\u4e0d\u4f18\u7f8e\u7684\u5b9e\u73b0 $O2$ \u8dd1\u4e86 $400+ms$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nchar ss[1 << 17], *A = ss, *B = ss;\ninline char gc(){ if(A == B){ B = (A = ss) + fread(ss, 1, 1 << 17, stdin); if(A == B) return EOF; } return *A++; }\n#define rg register\ninline int read(){\n    rg char ch = gc();\n    rg int x = 0, f = 0;\n    while(!isdigit(ch)) f |= (ch == '-'), ch = gc();\n    while(isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = gc();\n    return f ? -x : x;\n}\n#define rep(i, a, b) for(int i = a; i <= b; ++i)\nconst int N = 1e5 + 5;\nnamespace SAM{\n        \n    int len[N], link[N], cnt = 1, sum[N], last;\n    map<int, int> tr[N];\n    inline int insert(int c){\n        int p = last;\n        if(tr[p].count(c)){\n            int q = tr[p][c];\n            ++sum[q];\n            if(len[q] == len[p] + 1) return q;\n            int clone = ++cnt;\n            len[clone] = len[p] + 1;\n            tr[clone] = tr[q];\n            link[clone] = link[q];\n            while(p && tr[p][c] == q) tr[p][c] = clone, p = link[p];\n            link[q] = clone;\n            return clone;\n        }\n        int cur = ++cnt;\n        len[cur] = len[last] + 1;\n        while(p && !tr[p].count(c)) tr[p][c] = cur, p = link[p];\n        if(!p){\n            link[cur] = 1;\n        }else{\n            int q = tr[p][c];\n            if(len[q] == len[p] + 1){\n                link[cur] = q;\n            }else{\n                int clone = ++cnt;\n                tr[clone] = tr[q];\n                link[clone] = link[q];\n                while(p && tr[p][c] == q) tr[p][c] = clone, p = link[p];\n                link[cur] = link[q] = clone;\n            }\n        }\n        return cur;\n    }\n    int head[N], nxt[N << 1], ver[N << 1], tot, dfn[N];\n    inline void add(int x, int y){\n        ver[++tot] = y;\n        nxt[tot] = head[x];\n        head[x] = tot;\n    }\n    int sz[N], son[N], top[N], dep[N], dfncnt, f[N];\n    void dfs1(int x){\n        sz[x] = 1;\n        dfn[x] = ++dfncnt;\n        for(int i = head[x]; i; i = nxt[i]){\n            int y = ver[i];\n            if(y == link[x]) continue;\n            dep[y] = dep[x] + 1;\n            dfs1(y);\n            if(sz[y] > sz[son[x]]) son[x] = y;\n            sz[x] += sz[y];\n        }\n    }\n    void dfs2(int x, int f){\n        top[x] = f;\n        if(son[x]) dfs2(son[x], f);\n        for(int i = head[x]; i; i = nxt[i]){\n            int y = ver[i];\n            if(y == link[x] || y == son[x]) continue;\n            dfs2(y, y);\n        }\n    }\n    inline int LCA(int x, int y){\n        while(top[x] ^ top[y]) dep[top[x]] > dep[top[y]] ? x = link[top[x]] : y = link[top[y]];\n        return dep[x] < dep[y] ? x : y;\n    }\n}\nint n, m;\nint len1[N], len2[N];\nint s[N << 1], str[N], ans[N], g[N];\nstruct node{\n    int x, val;\n    inline bool operator < (const node &rhs) const {\n        return val < rhs.val;\n    }\n}data[N];\nvoid dfs(int x){\n    for(int i = SAM :: head[x]; i; i = SAM :: nxt[i]){\n        int y = SAM :: ver[i];\n        if(y == SAM :: link[x]) continue;\n        dfs(y);\n        SAM :: f[x] += SAM :: f[y];\n    }\n}\nint dcnt;\ninline void init(){\n    n = read(), m = read();\n    int tot = 0;\n    rep(i, 1, n){\n        len1[i] = read();\n        SAM :: last = 1;\n        for(int j = 0; j < len1[i]; ++j){\n            s[++tot] = read();\n            SAM :: last = SAM :: insert(s[tot]);\n        }\n        len2[i] = read();\n        SAM :: last = 1;\n        for(int j = 0; j < len2[i]; ++j){\n            s[++tot] = read();\n            SAM :: last = SAM :: insert(s[tot]);\n        }\n    }\n    rep(i, 2, SAM :: cnt) SAM :: add(SAM :: link[i], i);\n    SAM :: dfs1(1); SAM :: dfs2(1, 1);\n    tot = 0;\n    rep(i, 1, n){\n        dcnt = 0;\n        for(int x = 1, j = 0; j < len1[i]; ++j) x = SAM :: tr[x][s[++tot]], data[++dcnt] = (node){x, SAM :: dfn[x]};\n        for(int x = 1, j = 0; j < len2[i]; ++j) x = SAM :: tr[x][s[++tot]], data[++dcnt] = (node){x, SAM :: dfn[x]};\n        sort(data + 1, data + dcnt + 1);\n        ++SAM :: f[data[1].x];\n        rep(i, 2, dcnt){\n            int lca = SAM :: LCA(data[i - 1].x, data[i].x);\n            ++SAM :: f[data[i].x]; --SAM :: f[lca];\n        }\n    }\n    dfs(1);\n    while(m--){\n        int len = read();\n        int x = 1, flag = 0;\n        rep(i, 1, len){\n            int c = read();\n            if(!flag){\n                if(!SAM :: tr[x].count(c)) flag = 1;\n                else x = SAM :: tr[x][c];\n            }\n        }\n        if(!flag){\n            printf(\"%d\\n\", SAM :: f[x]);\n            // cout<<\" dfn \"<<SAM :: dfn[x]<<\" \"<<SAM :: dfn[x] + SAM :: sz[x]<<endl;\n            ++g[SAM :: dfn[x]]; --g[SAM :: dfn[x] + SAM :: sz[x]];\n        }else puts(\"0\");\n    }\n}\ninline void work(){\n    rep(i, 1, SAM :: cnt) g[i] += g[i - 1];\n    int tot = 0;\n    rep(i, 1, n){\n        dcnt = 0;\n        for(int x = 1, j = 0; j < len1[i]; ++j) x = SAM :: tr[x][s[++tot]], data[++dcnt] = (node){x, SAM :: dfn[x]};\n        for(int x = 1, j = 0; j < len2[i]; ++j) x = SAM :: tr[x][s[++tot]], data[++dcnt] = (node){x, SAM :: dfn[x]};\n        sort(data + 1, data + dcnt + 1);\n        ans[i] += g[SAM :: dfn[data[1].x]];\n        rep(j, 2, dcnt){\n            int lca = SAM :: LCA(data[j - 1].x, data[j].x);\n            ans[i] += g[SAM :: dfn[data[j].x]]; ans[i] -= g[SAM :: dfn[lca]];\n        }\n    }\n    rep(i, 1, n) printf(\"%d \", ans[i]);\n}\nsigned main(){\n    init(); work();\n    gc(), gc(); //end\n    return 0;\n}\n```\n",
        "postTime": 1583579849,
        "uid": 121618,
        "name": "Accoty_AM",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u82e5\u5e72\u4e32\u5bf9\uff0c\u6c42\u8be2\u95ee\u4e32\u4f5c\u4e3a\u51e0\u4e2a\u4e32\u7684\u5b50\u4e32\u51fa\u73b0\u8fc7\uff08\u82e5\u5728\u540c\u4e00\u4e32\u5bf9\u91cc\u53ea\u7b97\u4e00\u6b21\uff09\uff0c\u5e76\u5bf9\u6bcf\u4e00\u4e32\u5bf9\uff0c\u6709\u591a\u5c11\u4e2a\u8be2\u95ee\u4e32\u662f\u5b83\u7684\u5b50\u4e32\u3002\n\n\u88f8\u7684\u5e7f\u4e49SAM\uff08\u7528\u4e8e\u591a\u4e32\u5339\u914d\uff09\u3002\n\n\u666e\u901aSAM\u5904\u7406\u591a\u4e32\u95ee\u9898\u65f6\uff0c\u5e38\u5728\u4e2d\u95f4\u52a0\u5206\u9694\u7b26\uff0c\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u5728\u5904\u7406\u5b8c\u4e00\u4e2a\u4e32\u540e\uff0c\u628alast=1\u5c31ok\u4e86\u3002\u5176\u4ed6\u7684\u4e00\u6837\u3002\n\u8ba1\u7b97\u65f6\u6cbfparent\u6811\u5f80\u4e0a\u8dd1\uff0c\u5bf9\u6cbf\u9014\u66f4\u65b0\u7b54\u6848\u3002\n\n\u7136\u540e\uff1f\n\n\u7136\u540e\u5c31\u6ca1\u6709\u4e86\u2026\u2026\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<memory.h>\n#include<map>\n#include<set>\n#include<queue>\nusing namespace std; \nint len1[20005],len2[20005],ans[50005];\nconst int maxn=300005;\nint str[maxn],n,m;\nstruct SAM\n{\n\tint last,cnt,k,l[maxn<<1],fa[maxn<<1],siz[maxn<<1],las[maxn<<1];\n\tint marked[maxn<<1];//\u4f5c\u4e3a\u8be2\u95ee\u4e32\u7684\u7ec8\u70b9\u51fa\u73b0\u8fc7\u51e0\u6b21\n\tmap<int,int>ch[maxn<<1];\n\tinline void ins(int c)\n\t{\n\t\tint p=last,np=++cnt;\n\t\tlast=np;\n\t\tl[np]=l[p]+1;\n\t\tfor(;p&&!ch[p].count(c);p=fa[p])ch[p][c]=np;\n\t\tif(!p)fa[np]=1;else\n\t\t{\n\t\t\tint q=ch[p][c];\n\t\t\tif(l[p]+1==l[q])fa[np]=q;else\n\t\t\t{\n\t\t\t\tint nq=++cnt;\n\t\t\t\tl[nq]=l[p]+1;\n\t\t\t\tch[nq]=ch[q];\n\t\t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;\n\t\t\t\tfor(;ch[p][c]==q;p=fa[p])ch[p][c]=nq;\n\t\t\t}\n\t\t}\n\t}\n\tinline void updata1(int x,int y)//\u5bf9\u4e8e\u7b2c\u4e00\u95ee\n\t{\n\t\tfor(;x&&las[x]!=y;x=fa[x])\n\t\t{\n\t\t\tsiz[x]++;las[x]=y;\n\t\t}\n\t}\n\tinline void updata2(int x,int y)//\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\n\t{\n\t\tfor(;x&&las[x]!=y;x=fa[x])\n\t\t{\n\t\t\tlas[x]=y;\n\t\t\tans[y]+=marked[x];\n\t\t}\n\t}\n\tinline void build()\n\t{\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tint tot=0;\n\t\tcnt=1;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tscanf(\"%d\",&len1[i]);\n\t\t\tlast=1;\n\t\t\tfor(int j=1;j<=len1[i];j++)\n\t\t\t{\n\t\t\t\tscanf(\"%d\",&str[++tot]);\n\t\t\t\tins(str[tot]);\n\t\t\t}\n\t\t\tscanf(\"%d\",&len2[i]);\n\t\t\tlast=1;\n\t\t\tfor(int j=1;j<=len2[i];j++)\n\t\t\t{\n\t\t\t\tscanf(\"%d\",&str[++tot]);\n\t\t\t\tins(str[tot]);\n\t\t\t}\n\t\t}\n\t\ttot=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=1,x=1;j<=len1[i];j++)updata1(x=ch[x][str[++tot]],i);\n\t\t\tfor(int j=1,x=1;j<=len2[i];j++)updata1(x=ch[x][str[++tot]],i);\n\t\t}\n\t}\n\tinline void solve()\n\t{\n\t\twhile(m--)\n\t\t{\n\t\t\tint len;\n\t\t\tscanf(\"%d\",&len);\n\t\t\tbool flag=0;\n\t\t\tint x=1;\n\t\t\tfor(int i=1;i<=len;i++)\n\t\t\t{\t\n\t\t\t\tint d;\n\t\t\t\tscanf(\"%d\",&d);\n\t\t\t\tif(!flag)\n\t\t\t\t{\n\t\t\t\t\tif(ch[x].count(d))x=ch[x][d];else flag=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!flag)marked[x]++,printf(\"%d\\n\",siz[x]);else puts(\"0\");\n\t\t}\n\t\tint tot=0;\n\t\tfor(int i=1;i<=cnt;i++)las[i]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=1,x=1;j<=len1[i];j++)updata2(x=ch[x][str[++tot]],i);\n\t\t\tfor(int j=1,x=1;j<=len2[i];j++)updata2(x=ch[x][str[++tot]],i);\n\t\t}\n\t\tfor(int i=1;i<=n;i++)printf(\"%d \",ans[i]);\n\t}\n}sam;\nint main(){sam.build();sam.solve();}\n```",
        "postTime": 1519842173,
        "uid": 10291,
        "name": "fighter_OI",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u4e8e\u662f\u5927\u5bb6\u4e0d\u8981\u56e0\u4e3a\u6570\u636e\u4e0d\u5361\u5c31\u90fd\u5199\u7384\u5b66\u590d\u6742\u5ea6\u7684\u4ee3\u7801\u5440=w=\n\n\u8981\u52aa\u529b\u5730\u5199\u6bd4\u8f83\u5bf9\u7684\u4ee3\u7801\u624d\u53ef\u4ee5 \u55ef\n\n\n\u6765\u8bf4\u4e00\u4e0b\u6211\u7684\u770b\u8d77\u6765\u5f88\u6b63\u786e\u7684\u4e71\u641e\u505a\u6cd5\uff0c\u590d\u6742\u5ea6\u7a33\u5b9aO(nlogn)\n\n\u8003\u8651\u5bf9\u70b9\u540d\u4e32\u5efaAC\u81ea\u52a8\u673a\uff0c\u7136\u540e\u79bb\u7ebf\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\n\n\u663e\u7136\u6bcf\u4e2a\u55b5\u661f\u4eba\u90fd\u4f1a\u5bf9\u4ed6\u4e24\u4e2a\u540d\u5b57\u5206\u522b\u5728AC\u81ea\u52a8\u673a\u4e0a\u5339\u914d\u5230\u7684\u70b9\u548c\u8fd9\u4e9b\u70b9\u5728fail\u6811\u4e0a\u7684\u7956\u5148\u7684\u90a3\u4e9b\u70b9\u540d\u4e32\u672b\u7aef\u4ea7\u751f\u8d21\u732e\uff0c\u6bcf\u4e2a\u70b9\u540d\u4e32\u67e5\u8be2\u672b\u7aef\u88ab\u591a\u5c11\u4e2a\u55b5\u661f\u4eba\u8986\u76d6\u5c31\u662f\u7b54\u6848\u3002\n\n\u55ef \u8fd9\u5904\u7406\u8d77\u6765\u975e\u5e38\u7b80\u5355 \u5c31\u50cf\u865a\u6811\u90a3\u6837\uff0c\u628a\u70b9\u96c6\u6309dfs\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\u8def\u5f84\u5e76\u5c31\u597d\u4e86\u3002\n\n\uff08\u6c42\u8def\u5f84\u5e76\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u4e2a\u55b5\u661f\u4eba\u7684\u4e24\u4e2a\u540d\u5b57\u4e0d\u88ab\u7b97\u4e24\u6b21\uff09\n\n\u6c42LCA\u7684\u8bdd\u968f\u4fbf\u4e71\u641e\u5c31\u884c\uff0c\u6bd4\u5982\u6811\u5256\u2026\n\n\u7136\u800c\u70b9\u5230\u6839\u8def\u5f84\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u4e0d\u592a\u597d\uff0c\u56e0\u4e3a\u4e0d\u592a\u80fd\u4e00\u4e2alog\u89e3\u51b3\uff0c\u6240\u4ee5\u53ea\u8981\u7b49\u4ef7\u8f6c\u5316\u6210\u5355\u70b9\u4fee\u6539\uff0c\u5b50\u6811\u67e5\u8be2\u5c31\u597d\u5566\n\n\u4e8e\u662f\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u5b8c\u7f8e\u89e3\u51b3\u4e86\n\n\n\u7136\u540e\u770b\u7b2c\u4e8c\u4e2a\u95ee\u9898\u2026\u5176\u5b9e\u5c31\u662f\u53cd\u8fc7\u6765\uff0c\u6c42\u6bcf\u4e2a\u55b5\u661f\u4eba\u8986\u76d6\u4e86\u591a\u5c11\u70b9\u540d\u4e32\u3002\n\n\u505a\u6cd5\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u70b9\u540d\u4e32\u5355\u70b9\u4fee\u6539\uff0c\u6bcf\u4e2a\u55b5\u661f\u4eba\u67e5\u8be2\u4e24\u4e2a\u540d\u5b57\u5728AC\u81ea\u52a8\u673a\u4e0a\u5339\u914d\u8def\u5f84\u7684\u70b9\u5728fail\u6811\u4e0a\u5230\u6839\u7684\u8def\u5f84\u7684\u5e76\u4e0a\u7684\u70b9\u540d\u4e32\u672b\u7aef\u6570\u3002\n\n\u540c\u6837\u6c42\u51fa\u8def\u5f84\u5e76\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u70b9\u5230\u6839\u67e5\u8be2\u8f6c\u6210\u5b50\u6811\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u3002\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aAC\u81ea\u52a8\u673a\u7528map\u5b58\u8f6c\u79fb\u6240\u4ee5\u662f\u4e00\u4e2alog\uff0c\u6392\u5e8f\u4e00\u4e2alog\uff0c\u6c42\u8def\u5f84\u5e76\u65f6lca\u4e00\u4e2alog\uff0c\u6811\u72b6\u6570\u7ec4\u4e00\u4e2alog\uff0c\u8fd9\u4e9b\u90fd\u662f\u5206\u5f00\u7684\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662fO(nlogn)\u7684\uff0c\u53ea\u662f\u5e38\u6570\u770b\u8d77\u6765\u6bd4\u8f83\u5927\u2026\n\n\u5b9e\u6d4b\u5e38\u6570\u4e5f\u4e0d\u5c0f\uff08\u5f53\u7136\u6211\u5199\u7684\u65f6\u5019\u6709\u4e00\u4e9b\u5730\u65b9\u663e\u7136\u5199\u632b\u4e86\uff08\u4f46\u662f\u6574\u4f53\u4e0a\u5e38\u6570\u7684\u74f6\u9888\u4e0d\u5728\u8fd9\u91cc\u6240\u4ee5\u4e0d\u7528\u5728\u610f\n\n\uff08\u987a\u4fbf\u6211\u5199\u6307\u9488\u53ea\u662f\u4e00\u65f6\u597d\u73a9(\u5199\u8fd9\u9898\u524d\u5199\u4e86\u4e00\u4e9b\u7b80\u6613openGL\u9879\u76ee\u4e8e\u662f\u7a81\u7136\u60f3\u5199\u6307\u9488\u4e86)\uff0c\u5176\u5b9e\u5199\u6307\u9488\u8fd8\u662f\u4e0d\u592a\u65b9\u4fbf\u67e5\u9519\u548c\u8c03\u8bd5\u7684\n\n\uff08\u6240\u4ee5\u4e00\u6b21\u5199\u5bf9\u5c31\u597d\u4e86\uff08\u96fe\n\n\n>#include <cstdio>\n```cpp\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <assert.h>\n#define lb(x) ((x)&(-(x)))\nusing std::sort;\nusing std::map; \nint buf[200010],*bf;\ninline int read()\n{\n    int s = 0; char c; while((c=getchar())<'0'||c>'9');\n    do{s=s*10+c-'0';}while((c=getchar())>='0'&&c<='9');\n    return s;\n}\nconst int N = 100010;\nstruct eg;\nstruct tn\n{\n    tn *fail,*f,*top,*hs;\n    map<int,tn*> son;\n    int id,c,d,iw,ow; eg *h;\n}pool[N],*pl,*rt,*qu[N],**qh,**qt,*nd[N];\nstruct eg{ eg *nx; tn *dt; }e[N],*eh;\nint r[N];\nint n,m,tim,iw[N],ow[N],tr[N],tr2[N],curd,tot,ans[N];\nvoid add(int p,int v){ while(p<=tot) tr[p] += v, p += lb(p); }\nint sum(int p){ int s = 0; while(p) s += tr[p], p -= lb(p); return s; }\nvoid add2(int p,int v){ while(p) tr2[p] += v, p -= lb(p); }\nint sum2(int p){ int s = 0; while(p<=tot) s += tr2[p], p += lb(p); return s; }\ninline void link(tn *aa,tn *bb){ eh++; eh->dt = bb; eh->nx = aa->h; aa->h = eh; }\ninline void insert(int id)\n{\n    int i; tn *p = rt; int len = read();\n    for(i=1;i<=len;i++)\n    {\n        int c = read();\n        if(!p->son[c]) \n            p->son[c] = pl++, p->son[c]->f = p, p->son[c]->c = c;\n        p = p->son[c];\n    }\n    p->id = id;\n    nd[id] = p;\n}\nvoid buildFail()\n{\n    qh = qt = &qu[0]; qt++; qu[0] = rt;\n    while(qh!=qt)\n    {\n        tn *q = (*qh)->f->fail; int c = (*qh)->c; \n        while(q!=rt&&!q->son[c]) q = q->fail;\n        if((*qh)!=rt&&q->son[c]&&q->son[c]!=(*qh)) (*qh)->fail = q->son[c]; else (*qh)->fail = rt;\n        if((*qh)->fail!=*qh) link((*qh)->fail,*qh);\n        for(map<int,tn*>::iterator it=(*qh)->son.begin();it!=(*qh)->son.end();it++) \n            (*qt++) = it->second;\n        qh++;\n    }\n}\nint dfs(tn *p)\n{\n    p->iw = ++tim; p->d = ++curd;\n    int sz = 1, mx = 0, t;\n    for(eg *pt=p->h;pt;pt=pt->nx)\n    {\n        sz += (t=dfs(pt->dt));\n        if(t>mx) mx = t, p->hs = pt->dt;\n    }\n    p->ow = tim; curd--;\n    return sz;\n}\nvoid pou(tn *p,tn *tp)\n{\n    p->top = tp;\n    if(p->hs) pou(p->hs,tp);\n    for(eg *pt=p->h;pt;pt=pt->nx) if(pt->dt!=p->hs) pou(pt->dt,pt->dt);\n}\ntn* getlca(tn *a,tn *b)\n{\n    while(a->top!=b->top)\n    {\n        if(a->top->d>b->top->d) a = a->top->fail;\n        else b = b->top->fail;\n    }\n    return a->d<b->d?a:b;\n}\nbool cmp(const tn *a,const tn *b){ return a->iw<b->iw; }\nvoid query(int k)\n{\n    int len = *bf++;\n    tn *p = rt; qh = qt = &qu[0];\n    int i,c;\n    for(i=1;i<=len;i++)\n    {\n        c = *bf++;\n        while(p!=rt&&!p->son[c]) p = p->fail;\n        if(p->son[c]) p = p->son[c];\n        *qt = p, qt++;\n    }\n    p = rt; len = *bf++;\n    for(i=1;i<=len;i++)\n    {\n        c = *bf++;\n        while(p!=rt&&!p->son[c]) p = p->fail;\n        if(p->son[c]) p = p->son[c];\n        *qt = p, qt++;\n    }\n    sort(qh,qt,cmp);\n    add((*qh)->iw,1); tn *lst = *qh;\n    for(qh++;qh!=qt;qh++)\n    {\n        if((*qh)==lst) continue;\n        add((*qh)->iw,1);\n        add(getlca(*qh,lst)->iw,-1); lst = *qh;\n    }\n    qh = &qu[0];\n    ans[k] += sum2((*qh)->iw); lst = *qh;\n    for(qh++;qh!=qt;qh++)\n    {\n        if((*qh)==lst) continue;\n        ans[k] += sum2((*qh)->iw);\n        ans[k] -= sum2(getlca(*qh,lst)->iw); lst = *qh;\n    }\n}\nint main()\n{\n    int i;\n    n = read(); m = read(); bf = buf;\n    pl = &pool[0]; rt = pl++; rt->f = rt->fail = rt; eh = &e[0];\n    for(i=1;i<=n;i++)\n    {\n        int x = read(); *bf++ = x;\n        while(x--) *bf++ = read();\n        x = read(); *bf++ = x;\n        while(x--) *bf++ = read();\n    }\n    for(i=1;i<=m;i++) insert(i); tot = pl-pool;\n    buildFail(); dfs(rt); pou(rt,rt);\n    for(i=1;i<=m;i++) add2(nd[i]->iw-1,-1), add2(nd[i]->ow,1);\n    bf = buf;\n    for(i=1;i<=n;i++) query(i);\n    for(i=1;i<=m;i++) printf(\"%d\\n\",sum(nd[i]->ow)-sum(nd[i]->iw-1));\n    for(i=1;i<=n;i++) printf(i==n?\"%d\":\"%d \",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1470835491,
        "uid": 21730,
        "name": "Delicious",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u4e00\u9053\u597d\u9898\n\n\u840c\u65b0\u521a\u5b66sa\uff0c\u8fd9\u9898\u505a\u4e86\u597d\u4e45~\uff0c\u989d\uff0c~~\u83dc\u6b7b\u4e86~~\u3002\n\n\u5199\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\uff0c\u5bf9\u8ddf\u6211\u4e00\u6837\u7684\u840c\u65b0\u53ef\u80fd\u7a0d\u53cb\u597d\u4e00\u4e9b\uff0c **\u540e\u7f00\u6570\u7ec4+\u6811\u72b6\u6570\u7ec4** \u505a\u6cd5\u3002\n\n#### \u8fd9\u9898\u5230\u5e95\u60f3\u8ba9\u6211\u4eec\u5e72\u5565\uff1f\n\n\u5982\u679c\u6211\u4eec\u5c06\u6240\u6709\u4eba\u7684\u540d\u5b57\u548c\u8be2\u95ee\u62fc\u8d77\u6765\uff0c\u6392\u597d\u5e8f\u540e\u518d\u6c42height\u6570\u7ec4\uff0c\u4e00\u4e2a\u8be2\u95ee\u548c\u540d\u5b57\u4e2d\u67d0\u6bb5\u76f8\u540c\u5c31\u662f\u6307\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e0e\u8be2\u95ee\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684height\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\u8be2\u95ee\u957f\u5ea6\u3002\u4e0d\u61c2\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u770b\u8fd9\u9898\uff1a[\u725b\u5976\u6a21\u5f0f](https://www.luogu.com.cn/problem/P2852)\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u5de6\u5411\u53f3\u627e\u5230\u4e00\u4e2a\u533a\u95f4\uff0c\u8fd9\u4e2a\u533a\u95f4\u5185\u6240\u6709\u7684sa\u5c31\u4ee3\u8868\u4e86\u5339\u914d\u6210\u529f\u7684\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u53ef\u80fd\u662f\u6765\u81ea\u540c\u4e00\u4e2a\u4eba\u7684\uff08\u4e3a\u4e86\u9632\u6b62\u59d3\u548c\u540d\u8fde\u8d77\u6765\uff0c\u6211\u4eec\u4e5f\u7ed9\u4e2d\u95f4\u52a0\u4e00\u5b57\u7b26\u9694\u5f00\uff09\uff0c\u4e5f\u53ef\u80fd\u6765\u81ea\u4e0d\u540c\u4eba\uff0c\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u7684\u4efb\u52a1\u662f\u627e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u533a\u95f4\uff0c\u5305\u542b\u591a\u5c11\u4e0d\u540c\u7684\u4eba\u3002\u5373\u7ed9\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u67d3\u8272\uff0c\u591a\u7ec4\u8be2\u95ee\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e0d\u540c\u989c\u8272\uff0c\u5f88\u719f\u6089\u5427~\uff1a[HH\u7684\u9879\u94fe](https://www.luogu.com.cn/problem/P1972)\u3002\n\n\u7b2c\u4e8c\u95ee\uff1a\u5982\u679c\u4f1a\u4e86\u7b2c\u4e00\u95ee\u7684\u8bdd\u7406\u89e3\u8d77\u6765\u5e94\u8be5\u4e5f\u4e0d\u96be\uff0c\u4f60\u9700\u8981\u7edf\u8ba1\u6bcf\u4e00\u79cd\u989c\u8272\u5728\u591a\u5c11\u533a\u95f4\u5185\u51fa\u73b0\u8fc7\u3002\u6211\u4eec\u4ecd\u7136\u628a\u533a\u95f4\u6309\u53f3\u7aef\u6392\u5e8f\uff0c\u8fd8\u662f\u5c3d\u91cf\u5c06\u540c\u79cd\u989c\u8272\u7684\u5224\u5b9a\u70b9\u4f4d\u7f6e\u5f80\u53f3\u79fb\u3002\u6211\u4eec\u5c06\u6240\u6709\u533a\u95f4\u5de6\u7aef\u70b9+1\uff0c\u6bcf\u5230\u4e00\u4e2a\u53f3\u7aef\u70b9\uff0c\u8ba9\u5b83\u5bf9\u5e94\u7684\u5de6\u7aef\u70b9-1\uff0c\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u7ed3\u675f\uff0c\u90a3\u4e9b\u5de6\u7aef\u70b9\u6ca1\u88ab\u51cf\u6389\u7684\uff0c\u8bf4\u660e\u5230\u5f53\u524d\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u533a\u95f4\u4ecd\u7136\u5b58\u5728\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u8003\u8651\u5b83\u7684\u8d21\u732e\uff0c\u5c31\u662f\u8003\u8651\u6709\u591a\u5c11\u533a\u95f4\u5305\u542b\u5b83\uff0c\u4e3a\u4e86\u9632\u6b62\u4e00\u4e2a\u533a\u95f4\u5305\u542b\u5f88\u591a\u8fd9\u79cd\u989c\u8272\u7684\u70b9\u800c\u91cd\u590d\u8ba1\u7b97\uff0c\u6211\u4eec\u53ea\u7edf\u8ba1\u5b83\u548c\u540c\u989c\u8272\u7684\u4e0a\u4e00\u4e2a\u70b9\u4e4b\u95f4\uff0c\u6709\u591a\u5c11\u533a\u95f4\u5de6\u7aef\u70b9\u5b58\u5728\u3002\u5176\u5b9e\u662f\u5c06\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\u8bb0\u6210\u5b83\u5728\u591a\u5c11\u4e2a\u533a\u95f4\u4e2d\u662f\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u3002\u55ef\uff0c\u8fd9\u6837\u5b9e\u73b0\u8d77\u6765\u8ddf\u7b2c\u4e00\u95ee\u5dee\u4e0d\u591a\u4e86\u3002\n\n\u6240\u4ee5\u8fd9\u9898\u7684\u6b65\u9aa4\u548c\u590d\u6742\u5ea6\u5206\u6790\uff1a\n\n```\n1.\u62fc\u63a5\u5b57\u7b26   O(n)\n2.\u540e\u7f00\u6392\u5e8f   O(nlogn)\n3.\u6c42\u51faheight O(n)\n4.\u6c42\u51fa\u6bcf\u4e2a\u8be2\u95ee\u7684\u5de6\u53f3\u533a\u95f4 O(n)\n5.\u4e24\u6b21\u6811\u72b6\u6570\u7ec4\u6c42\u51fa\u7b54\u6848 O(nlogn)\n\n```\n\n\u81f3\u4e8e\u600e\u4e48\u5728O(n)\u65f6\u95f4\u5185\u6c42\u51fa\u8be2\u95ee\u533a\u95f4\uff0c\u8fd9\u7b97\u662f\u4e2a\u57fa\u672c\u529f\u5427\u3002\u3002\u3002\u6211\u4eec\u641e\u4e2a\u5355\u8c03\u6808\u8bb0\u5f55height\uff0c\u5c31\u53ef\u4ee5\u6c42\u6b64\u4f4d\u7f6e\u524d\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u6570\u548c\u540e\u9762\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u6570\uff08\u4e0d\u61c2\u7684\u53ef\u4ee5\u60f3\u60f3\uff09\u3002\u8fd9\u9898\u53ea\u9700\u8981\u6c42\u5de6\u8fb9\u5c31\u53ef\u4e86\uff0c\u4e0e\u8be2\u95ee\u76f8\u540c\u7684\u4e32\uff0csa\u6392\u597d\u5e8f\u540e\u80af\u5b9a\u5728\u5b83\u524d\u9762\uff0c\u56e0\u4e3a\u8be2\u95ee\u4e32\u540e\u9762\u63a5\u7684\u662f\u4e00\u4e2a\u7279\u522b\u5927\u7684\u5206\u9694\u7b26\u554a\uff0c\u5982\u679c\u6709\u8ddf\u5b83\u76f8\u540c\u4e14\u5728\u5b83\u53f3\u8fb9\u7684\uff0c\u4e5f\u53ea\u80fd\u662f\u5176\u4ed6\u7684\u8be2\u95ee\u4e86~\n\n\u4ee3\u7801\u7684\u8bdd\uff0c\u6211\u5199\u7684\u53ef\u80fd\u6bd4\u8f83\u4e11\u3002\u3002\u3002\u5176\u4ed6\u9898\u89e3\u4e5f\u6709\u76f8\u540c\u601d\u8def\u7684\uff0c\u53ef\u4ee5\u5eb7\u4ed6\u4eec\u4ee3\u7801\uff0c\u6211\u8c61\u5f81\u6027\u5730\u653e\u4e00\u4e0b\uff1a\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#define QWQ cout<<\"QwQ\"<<endl;\n#define ll unsigned long long\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\nusing namespace std;\nconst int N=601010;\nconst int qwq=303030;\nconst int inf=0x3f3f3f3f;\n\nint n,m,Q;\nint a[N],cl[N],tot,obgg=11111;           //\u201cob\u7ed9\u7ed9\u201d\u662f\u5206\u9694\u7b26\uff0ccl\u8868\u793a\u989c\u8272\nint chang[N];                            //\u8be2\u95ee\u957f\u5ea6\nint sa[N],rk[N],tp[N],c[N],h[N];         //\u540e\u7f00\u6570\u7ec4\u7684\u90a3\u4e9b\nint pre[N],wei[N];                       //\u6c42\u540c\u989c\u8272\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\nbool xun[N];                             //\u662f\u5426\u4e3a\u8be2\u95ee\u4e32\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\nint q[N],now;                            //\u5355\u8c03\u6808\nstruct E{ int id,l,r; } qu[N];           //\u8be2\u95ee\u533a\u95f4\ninline bool cmp(E aa,E bb) { return aa.r < bb.r; }\nint tree[N],ans1[N],ans2[N];             //\u6811\u72b6\u6570\u7ec4\u53ca\u7b54\u6848 \n\ninline int read() {\n\tint sum = 0, f = 1; char c = getchar();\n\twhile(c<'0' || c>'9') { if(c=='-') f = -1; c = getchar(); }\n\twhile(c>='0'&&c<='9') { sum = sum * 10 + c - '0'; c = getchar(); }\n\treturn sum * f;\n}\n\nvoid Qsort() {                         //\u9e21\u6392\n\tmemset(c,0,sizeof(c));\n\tfor(int i=1;i<=n;i++) c[rk[i]]++;\n\tfor(int i=1;i<=m;i++) c[i] += c[i-1];\n\tfor(int i=n;i>=1;i--) sa[ c[rk[tp[i]]]-- ] = tp[i];\n}\n\nvoid SA() {                            //sa\n\tint p, l = 0;\n\tm = obgg;\n\tfor(int i=1;i<=n;i++) rk[i] = a[i], tp[i] = i;\n\tQsort();\n\tfor(int k=1; ;k<<=1) {\n\t\tp = 0;\n\t\tfor(int i=1;i<=k;i++) tp[++p] = n-k+i;\n\t\tfor(int i=1;i<=n;i++) if(sa[i]>k) tp[++p] = sa[i]-k;\n\t\tQsort(); swap(tp,rk);\n\t\trk[ sa[1] ] = p = 1;\n\t\tfor(int i=2;i<=n;i++) {\n\t\t\tif(tp[sa[i-1]]==tp[sa[i]] && tp[sa[i-1]+k]==tp[sa[i]+k])\n\t\t\t\trk[sa[i]] = p;\n\t\t\telse\n\t\t\t\trk[sa[i]] = ++p;\n\t\t}\n\t\tm = p; if(p==n) break;\n\t}\n\tfor(int i=1; i<=n; h[rk[i++]]=l)\n\t\tfor(l=(l?l-1:0),p=sa[rk[i]-1]; a[i+l]==a[p+l]; ++l);\n}\n\n//\u6811\u72b6\u6570\u7ec4\u6211\u7ed9\u538b\u6210\u4e24\u884c\u4e86\ninline void add(int we,int g) { if(!we) return; for(int i=we;i<=n;i+=(i&-i)) tree[i]+=g; }\ninline int ask(int we) { int res = 0; for(int i=we;i;i-=(i&-i)) res+=tree[i]; return res; }\n\nvoid Kochiya() {           //\u6c42\u51fa\u8be2\u95ee\u5de6\u53f3\u533a\u95f4\n\th[0] = h[n+1] = -inf; now = 0;\n\tfor(int i=1;i<=n;i++) {\n\t\tint col = cl[ sa[i] ];\n\t\tif(col>0) pre[i] = wei[col], wei[col] = i;\n\t\twhile(h[i]<=h[q[now]]) now--; q[++now] = i;\n\t\tif(xun[ sa[i] ]) {\n\t\t\twhile(chang[-col]<=h[q[now]]) now--;\n\t\t\tqu[-col].l = q[now];\n\t\t\tqu[-col].r = i-1;\n\t\t\tqu[-col].id = -col;\n\t\t\tif(q[now]<=i-1) add(q[now],1);\n\t\t}\n\t}\n\tsort(qu+1,qu+Q,cmp);    //\u7136\u540e\u6392\u5e8f\n}\n\nvoid Sanae() {              //\u6c42\u7b54\u6848\n\tnow = 0;\n\tfor(int i=1;i<=Q;i++) {\n\t\tif(qu[i].l > qu[i].r) continue;\n\t\twhile(now!=qu[i].r) {\n\t\t\tnow++; int col = cl[ sa[now] ];\n\t\t\tif(col>0) ans2[col] += ask(now) - ask(pre[now]);\n\t\t}\n\t\tadd(qu[i].l,-1);\n\t}\n\tnow = 0;\n\tfor(int i=1;i<=Q;i++) {\n\t\tif(qu[i].l > qu[i].r) continue;\n\t\twhile(now!=qu[i].r) {\n\t\t\tnow++; int col = cl[ sa[now] ];\n\t\t\tif(col>0) add(now,1), add(pre[now],-1);\n\t\t}\n\t\tans1[qu[i].id] = ask(qu[i].r)-ask(qu[i].l-1);\n\t}\n}\n\nint main() {\n\tint x,num;\n\tnum = read(); Q = read();\n\tfor(int i=1;i<=num;i++) {\n\t\tx = read();\n\t\twhile(x--) a[++tot] = read(), cl[tot] = i;\n\t\ta[++tot] = ++obgg;\n\t\tx = read();\n\t\twhile(x--) a[++tot] = read(), cl[tot] = i;\n\t\ta[++tot] = ++obgg;\n\t}\n\tfor(int i=1;i<=Q;i++) {\n\t\tchang[i] = read(); xun[tot+1] = 1;\n\t\tfor(int j=1;j<=chang[i];j++) a[++tot] = read(), cl[tot] = -i;   //\u8be2\u95ee\u7684\u989c\u8272\u8bbe\u6210\u8d1f\u6570\uff0c\u4fbf\u4e8e\u5206\u8fa8\u3002\n\t\ta[++tot] = ++obgg;\n\t}\n\ta[0] = inf;     //\u56e0\u4e3a\u6392\u597d\u5e8f\u540e\u524d\u9762\u6709\u4e00\u58060\uff0c\u5e94\u5f53\u628a0\u53f7\u4f4d\u7f6e\u6539\u6210\u522b\u7684\uff0c\u5426\u5219\u6c42height\u65f6\u4f1a\u51fa\u9519\u3002\n\tn = tot;\n\tSA();\n\tKochiya();\n\tSanae();\n\tfor(int i=1;i<=Q;i++) cout<<ans1[i]<<\"\\n\";\n\tfor(int i=1;i<=num;i++) cout<<ans2[i]<<\" \";\n\treturn 0;\n}\n\n```\n\n\u8fd9\u662fCSP\u7206\u70b8\u540e\u5199\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u54ce~\uff0c\u6700\u8fd1\u592a\u9893\u5e9f\u4e86\u3002",
        "postTime": 1581306550,
        "uid": 102726,
        "name": "Flandre_495",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "## [\u9898\u610f](https://www.luogu.com.cn/problem/P2336)\n\n\u6211\u4eec\u5c06\u6240\u6709\u59d3\u540d\u4e32\u548c\u70b9\u540d\u4e32\u62fc\u5728\u4e00\u8d77\uff0c\u4e2d\u95f4\u7528\u539f\u4e32\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u7684\u6570\u9694\u5f00\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u5b83\u662f\u54ea\u4e2a\u4e32\u7684\u3002\n\n\u5148\u8003\u8651\u7b2c\u4e00\u95ee\uff1a\n\n\u8003\u8651\u5982\u679c\u70b9\u540d\u4e32$s1$\u662f\u67d0\u4e2a\u59d3\u540d\u4e32$s2$\u7684\u5b50\u4e32\uff0c\u5219$s1$\u5fc5\u5b9a\u548c$s2$\u7684\u4e00\u4e2a\u540e\u7f00$s2'$\u7684$lcp$\u4e3a$s1$\u7684\u957f\u5ea6\uff0c\u5373\uff1a$lcp(s1,s2')=len(s1)$\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u540d\u4e32\uff0c\u4ee5\u5b83\u4f5c\u4e3a\u524d\u7f00\u7684\u540e\u7f00\u5728\u540e\u7f00\u6392\u5e8f\u540e\u5fc5\u5b9a\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u5f97\u51fa\uff0c\u8bbe\u4e3a$[l,r]$\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u5c31\u8981\u7edf\u8ba1$[l,r]$\u5185\u51fa\u73b0\u7684\u4e0d\u540c\u7684\u59d3\u540d\u7684\u4e2a\u6570\uff0c\u8fd9\u662f\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u53ef\u4ee5\u7528$HH$\u7684\u9879\u94fe\u7684\u7684\u65b9\u6cd5\u79bb\u7ebf\u89e3\u51b3\u3002\n\n\u518d\u8003\u8651\u7b2c\u4e8c\u95ee\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u6bcf\u4e2a\u70b9\u88ab\u591a\u5c11\u8be2\u95ee\u533a\u95f4\u8986\u76d6\uff0c\u4f46\u8fd9\u6837\u4f1a\u8ba1\u91cd\u3002\n\n\u6211\u4eec\u4ece$1$\u5230$n$\uff08$n$\u662f\u4e32\u957f\uff09\u626b\u63cf\u6240\u6709\u4f4d\u7f6e\uff0c\u540c\u65f6\u7ef4\u62a4\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u4f4d\u7f6e\u4ea7\u751f\u8d21\u732e\u7684\u533a\u95f4\u3002\u5177\u4f53\u8bf4\u5c31\u662f\u5bf9\u4e8e$[l,r]$\uff0c\u6211\u4eec\u5728\u626b\u5230$l$\u65f6\u5b83\u5f00\u59cb\u4ea7\u751f\u8d21\u732e\uff0c\u6211\u4eec\u5bf9$[l,r]$\u533a\u95f4$+1$\uff0c\u5728\u626b\u5230$r+1$\u65f6\uff0c\u5b83\u4e0d\u518d\u4ea7\u751f\u8d21\u732e\uff0c\u6211\u4eec\u5bf9$[l,r]$\u533a\u95f4$-1$\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u5dee\u5206\u5b9e\u73b0\u3002\n\n\u73b0\u5728\u8003\u8651\u600e\u4e48\u7b97\u51fa\u5f53\u524d\u4f4d\u7f6e$i$\u771f\u6b63\u7684\u8d21\u732e\uff0c\u5373\u7b97\u51fa\u53ea\u5305\u542b$i$\uff0c\u800c\u4e0d\u5305\u542b$i$\u6240\u5728\u7684\u539f\u4e32\u7684\u5176\u4ed6\u70b9\u7684\u533a\u95f4\u3002\u6211\u4eec\u627e\u5230$last_{pos_i}$\uff0c\u5176\u4e2d$pos_i$\u8868\u793a$i$\u6240\u5728\u539f\u4e32\uff0c$last_{pos_i}$\u8868\u793a\u4e0a\u4e00\u4e2a\u5c5e\u4e8e$pos_i$\u8fd9\u4e2a\u539f\u4e32\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f$sum_i-sum_{last_{pos_i}}$\u3002\n\ncode:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxm=5*1e4+10;\nconst int maxQ=1e5+10;\nconst int maxl=1e6+10;\nint n,m,Q,num;\nint a[maxl],len[maxl],firpos[maxl],pos[maxl],last[maxm],ans1[maxQ],ans2[maxm];\nint sa[maxl],rk[maxl],oldrk[maxl],id[maxl],tmpid[maxl],cnt[maxl],lg[maxl];\nint height[maxl][20];\nstruct Query{int l,r,id;}qr[maxQ];\ninline void reads(int now)\n{\n\tfirpos[now]=n+1;\n\tscanf(\"%d\",&len[now]);\n\tfor(int i=1;i<=len[now];i++)scanf(\"%d\",&a[++n]),pos[n]=now;\n\ta[++n]=now+10000;\n}\ninline bool cmp(Query x,Query y){return x.r<y.r;}\ninline bool check(int x,int y,int k){return oldrk[x]==oldrk[y]&&oldrk[x+k]==oldrk[y+k];}\ninline void SA_build()\n{\n\tnum=500000;\n\tfor(int i=1;i<=n;i++)cnt[rk[i]=a[i]]++;\n\tfor(int i=1;i<=num;i++)cnt[i]+=cnt[i-1];\n\tfor(int i=n;i;i--)sa[cnt[rk[i]]--]=i;\n\tfor(int t=1;t<=n;t<<=1)\n\t{\n\t\tint tot=0;\n\t\tfor(int i=n-t+1;i<=n;i++)id[++tot]=i;\n\t\tfor(int i=1;i<=n;i++)if(sa[i]>t)id[++tot]=sa[i]-t;\n\t\ttot=0;\n\t\tmemset(cnt,0,sizeof(cnt));\n\t\tfor(int i=1;i<=n;i++)cnt[tmpid[i]=rk[id[i]]]++;\n\t\tfor(int i=1;i<=num;i++)cnt[i]+=cnt[i-1];\n\t\tfor(int i=n;i;i--)sa[cnt[tmpid[i]]--]=id[i];\n\t\tmemcpy(oldrk,rk,sizeof(rk));\n\t\tfor(int i=1;i<=n;i++)rk[sa[i]]=check(sa[i-1],sa[i],t)?tot:++tot;\n\t\tnum=tot;\n\t}\n\tfor(int i=1,j=0;i<=n;i++)\n\t{\n\t\tif(j)j--;\n\t\twhile(a[i+j]==a[sa[rk[i]-1]+j])j++;\n\t\theight[rk[i]][0]=j;\n\t}\n\tfor(int j=1;j<=18;j++)\n\t\tfor(int i=1;i+(1<<j)-1<=n;i++)\n\t\t\theight[i][j]=min(height[i][j-1],height[i+(1<<(j-1))][j-1]);\n}\ninline int query(int l,int r)\n{\n\tl++;\n\tint t=lg[r-l+1];\n\treturn min(height[l][t],height[r-(1<<t)+1][t]);\n}\ninline int findl(int id)\n{\n\tint l=1,r=rk[firpos[id]]-1,res=rk[firpos[id]];\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(query(mid,rk[firpos[id]])<len[id])l=mid+1;\n\t\telse res=mid,r=mid-1;\n\t}\n\treturn res;\n}\ninline int findr(int id)\n{\n\tint l=rk[firpos[id]]+1,r=n,res=rk[firpos[id]];\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(query(rk[firpos[id]],mid)<len[id])r=mid-1;\n\t\telse res=mid,l=mid+1;\n\t}\n\treturn res;\n}\nstruct Tree_arry\n{\n\t#define lowbit(x) (x&-x)\n\tint a[maxl];\n\tinline void clear(){memset(a,0,sizeof(a));}\n\tinline void add(int x,int k){for(int i=x;i<=n;i+=lowbit(i))a[i]+=k;}\n\tinline int query(int x){int res=0;for(int i=x;i;i-=lowbit(i))res+=a[i];return res;}\n}tr;\nint main()\n{\n\tlg[0]=-1;\n\tfor(int i=1;i<=1e6;i++)lg[i]=lg[i>>1]+1;\n\tscanf(\"%d%d\",&m,&Q);\n\tfor(int i=1;i<=m;i++)reads(2*i-1),reads(2*i);\n\tfor(int i=1;i<=Q;i++)reads(2*m+i);\n\tSA_build();\n\tfor(int i=1;i<=Q;i++)qr[i].l=findl(2*m+i),qr[i].r=findr(2*m+i),qr[i].id=i;\n\tsort(qr+1,qr+Q+1,cmp);\n\tfor(int i=1,j=1;i<=Q;i++)\n\t{\n\t\twhile(j<=qr[i].r)\n\t\t{\n\t\t\tif(pos[sa[j]]<=2*m)\n\t\t\t{\n\t\t\t\tif(last[(pos[sa[j]]+1)>>1])tr.add(last[(pos[sa[j]]+1)>>1],-1);\n\t\t\t\tlast[(pos[sa[j]]+1)>>1]=j;\n\t\t\t\ttr.add(j,1);\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tans1[qr[i].id]=tr.query(qr[i].r)-tr.query(qr[i].l-1);\n\t}\n\tfor(int i=1;i<=m;i++)last[i]=0;\n\ttr.clear();\n\tfor(int i=1;i<=Q;i++)tr.add(qr[i].l,1);\n\tfor(int i=1,j=1;i<=n;i++)\n\t{\n\t\twhile(j<=Q&&qr[j].r<i)tr.add(qr[j].l,-1),j++;\n\t\tif(pos[sa[i]]<=2*m)\n\t\t{\n\t\t\tans2[(pos[sa[i]]+1)>>1]+=tr.query(i)-tr.query(last[(pos[sa[i]]+1)>>1]);\n\t\t\tlast[(pos[sa[i]]+1)>>1]=i;\t\n\t\t}\n\t} \n\tfor(int i=1;i<=Q;i++)printf(\"%d\\n\",ans1[i]);\n\tfor(int i=1;i<=m;i++)printf(\"%d \",ans2[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1577072005,
        "uid": 145441,
        "name": "nofind",
        "ccfLevel": 6,
        "title": "P2336 [SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d(\u540e\u7f00\u6570\u7ec4+\u6811\u72b6\u6570\u7ec4)"
    },
    {
        "content": "\u697c\u4e0b\u7684\u9898\u89e3\u90fd\u597d\u5413\u4eba\u2026\u2026\n\n\u5176\u5b9e\u8fd9\u9898\u5c31\u662f\u4e2aAC\u81ea\u52a8\u673a\u7684\u677f\u5b50\u9898\u554a\u2026\u2026\n\n\u660e\u660e\u4e0d\u7528\u697c\u4e0b\u5927\u5bb6\u7684\u65b9\u6cd5\u8fd9\u4e48\u9ebb\u70e6\u3010\u4e0d\u9488\u5bf9\u4e2a\u4eba\u53ea\u9488\u5bf9\u8fd9\u9053\u9898\u76ee\u3011\n\n\u9996\u5148\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884chash\u4e00\u4e0b\u770b\u8fd9\u4e2a\u8282\u70b9\u6709\u6ca1\u6709\u88ab\u7528\u8fc7\u2026\u2026\u7136\u540eAC\u81ea\u52a8\u673a\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u641e\u6389\u4e24\u4e2a\u95ee\u2026\u2026\n\n\u5c06\u8001\u5e08\u70b9\u540d\u7684\u4e32\u63d2\u5230\u81ea\u52a8\u673a\u91cc\u7136\u540e\u62ff\u59d3\u548c\u540d\u5b57\u53bbAC\u81ea\u52a8\u673a\u91cc\u9762\u53d8\u5339\u914d\u8fb9\u7ef4\u62a4\u5c31\u597d\u4e86\u2026\u2026\n\n\u7136\u540e\u53c8\u4e00\u4e2a\u5c0f\u7ec6\u8282\u2026\u2026\u4e0d\u80fd\u4f7f\u7528memset\u6e05\u96f6\u6570\u7ec4\u2026\u2026\u8fd9\u6837\u5c31\u4f1a\u9000\u5316\u5230\\_O(n^2)\\_\u5728\u627e\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4fee\u6539\u7684\u70b9\u4e4b\u540e\u6539\u56de\u6765\u5c31\u597d\u4e86\u2026\u2026yy\u4e00\u4e0b\u7384\u5b66\u590d\u6742\u5ea6QAQ\u2026\u2026\n\n\u4e0a\u4ee3\u7801\u5427\uff1a\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=20010;\nconst int MAXM=50010;\nconst int MAXC=100010;\nint read(){\n    int a(0);char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9') a=(a<<3)+(a<<1)+c-'0',c=getchar();\n    return a;\n}\nvector<int> x[MAXN],na[MAXN];\nint tot(0);\nint fail[MAXC];\nvector<int> en[MAXC];\nmap<int,int> to[MAXC];\nint n,m;\nvector<int > V;\nvector<int > M;\nint vis[MAXC],mark[MAXM];\nint ans1[MAXM],ans2[MAXN];\nvoid insert(int id){\n    int L=read();\n    int now(0);\n    for(int i=0;i<L;i++){\n        int u=read();\n        if(!to[now][u]) to[now][u]=++tot;\n        now=to[now][u];\n    }\n    en[now].push_back(id);\n}\nqueue<int > q;\nvoid build(){\n    fail[0]=0;\n    for(map<int,int>::iterator i=to[0].begin();i!=to[0].end();++i) {q.push(i->second);fail[i->second]=0;}\n    while(!q.empty()){\n        int now=q.front();q.pop();\n        for(map<int,int>::iterator i=to[now].begin();i!=to[now].end();++i){\n            int t=i->first,k=fail[now];\n            while(k&&!to[k][t]) k=fail[k];\n            fail[i->second]=to[k][t];\n            q.push(i->second);\n        }\n    }\n}\nvoid solx(int id){\n    int now(0),beg(0);\n    while(beg<x[id].size()){\n        int index=x[id][beg];\n        while(now&&!to[now][index]) now=fail[now];\n        now=to[now][index];\n        int tmp(now);\n        while(tmp){\n            if(vis[tmp]) {tmp=fail[tmp];continue;}\n            vis[tmp]=1;V.push_back(tmp);\n            for(int i=0;i<en[tmp].size();i++){\n                if(mark[en[tmp][i]]) continue;\n                mark[en[tmp][i]]=1;M.push_back(en[tmp][i]);\n                ++ans1[en[tmp][i]];++ans2[id];\n            }\n            tmp=fail[tmp];\n        }\n        ++beg;\n    }\n}\nvoid solna(int id){\n    int now(0),beg(0);\n    while(beg<na[id].size()){\n        int index=na[id][beg];\n        while(now&&!to[now][index]) now=fail[now];\n        now=to[now][index];\n        int tmp=now;\n        while(tmp){\n            if(vis[tmp]) {tmp=fail[tmp];continue;}\n            vis[tmp]=1;V.push_back(tmp);\n            for(int i=0;i<en[tmp].size();i++){\n                if(mark[en[tmp][i]]) continue;\n                mark[en[tmp][i]]=1;M.push_back(en[tmp][i]);\n                ++ans1[en[tmp][i]];++ans2[id];\n            }\n            tmp=fail[tmp];\n        }\n        ++beg;\n    }\n}\nvoid input(){\n    n=read();m=read();\n    for(int i=0;i<n;i++){\n        int u=read();\n        for(int j=0;j<u;j++){\n            int v=read();\n            x[i].push_back(v);\n        }\n        u=read();\n        for(int j=0;j<u;j++){\n            int v=read();\n            na[i].push_back(v);\n        }\n    }\n    for(int i=0;i<m;i++) insert(i);\n    build();\n}\nvoid xxj(){\n    for(int i=0;i<n;i++){\n        solx(i);\n        solna(i);\n        for(int i=0;i<V.size();i++) vis[V[i]]=0;\n        for(int i=0;i<M.size();i++) mark[M[i]]=0;\n        V.clear();M.clear();\n    }\n}\nvoid output(){\n    for(int i=0;i<m;i++) cout<<ans1[i]<<\"\\n\";\n    for(int i=0;i<n;i++) {cout<<ans2[i];if(i!=n-1) cout<<' ';}\n    cout<<\"\\n\";\n}\nint main(){\n    input();\n    xxj();\n    output();\n    return 0;\n}\n```",
        "postTime": 1484050459,
        "uid": 26051,
        "name": "Xiaojian_xiang",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "## \u9898\u76ee\u94fe\u63a5 ##\n\n[BZOJ2754](https://www.lydsy.com/JudgeOnline/problem.php?id=2754)\n\n[Luogu2336](https://www.luogu.org/problemnew/show/P2336)\n\n## \u6982\u8ff0 ##\n\n\u672c\u9898\u89e3\u6cd5\u4f17\u591a\uff0c\u6bd4\u5982\uff1a\n\n- AC \u81ea\u52a8\u673a\n\n- \u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\n\n- \u540e\u7f00\u6570\u7ec4 + \u83ab\u961f\n\n- ......\n\n\u8fd9\u91cc\u6211\u4ecb\u7ecd\u4e00\u79cd\u65b0\u7684\u89e3\u6cd5\uff1a\u540e\u7f00\u6570\u7ec4 + ST \u8868 + \u4e8c\u5206 + \u4e3b\u5e2d\u6811 + \u6811\u72b6\u6570\u7ec4\u3002\n\n## \u7b97\u6cd5\u5206\u6790 ##\n\n\u4ee5\u4e0b\u662f\u9884\u5904\u7406\u7684\u8fc7\u7a0b\uff1a\n\n- \u628a\u6240\u6709\u7684\u59d3/\u540d/\u8be2\u95ee\u5b57\u7b26\u4e32\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u4e4b\u95f4\u7528\u4e00\u4e2a\u5927\u6570\u4f5c\u4e3a\u5206\u9694\u7b26\u9694\u5f00\uff0c\u5f97\u5230\u65b0\u7684\u5b57\u7b26\u4e32 $a$ \uff1b\n\n- \u8bb0\u5f55 $a$ \u7684\u7b2c $i$ \u4e2a\u5b57\u7b26\u5c5e\u4e8e\u732b $b[i]$ \u7684\u540d\u5b57\uff0c\u82e5\u8fd9\u4e2a\u5b57\u7b26\u662f\u5206\u9694\u7b26\u6216\u8be2\u95ee\u5b57\u7b26\u4e32\u5219 $b[i]=0$ \uff1b\u518d\u8bb0\u5f55\u7b2c $i$ \u4e2a\u8be2\u95ee\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 $len[i]$ \uff0c\u5b83\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5728 $a$ \u4e2d\u7684\u4f4d\u7f6e\u4e3a $fir[i]$ \uff1b\n\n- \u5bf9 $a$ \u8fdb\u884c\u540e\u7f00\u6392\u5e8f\uff0c\u5f97\u5230 $sa$ \u6570\u7ec4\u548c $rank$ \u6570\u7ec4\uff0c\u5e76\u6c42\u51fa $a$ \u7684 $height$ \u6570\u7ec4\uff0c $height[i]$ \u8868\u793a\u6392\u540d\u7b2c $i$ \u7684\u540e\u7f00\u4e0e\u6392\u540d\u7b2c $i-1$ \u7684\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\uff08LCP\uff09\uff1b\n\n- \u6839\u636e $height$ \u6570\u7ec4\u5efa\u7acb *ST\u8868* \uff0c\u8fd9\u6837\u53ef\u4ee5 $O(1)$ \u6c42\u51fa\u4efb\u610f\u4e24\u4e2a\u540e\u7f00\u7684 LCP \uff08*LCP Theorem* \uff1a $LCP(i, j)=\\underset{ rank[i]<k \\leq rank[j] }{ min } \\; height[k]$\uff09\uff1b\n\n- \u8fd9\u6837\uff0c\u6240\u4ee5\u4e0e\u8be2\u95ee $i$ \u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u5927\u4e8e\u7b49\u4e8e $len[i]$ \u7684\u540e\u7f00\u5c31\u4e00\u5b9a\u5206\u5e03\u5728 $rank[fir[i]]$ \u7684\u524d\u540e\uff0c\u6211\u4eec\u9700\u8981\u5728\u524d\u540e\u5404\u4e8c\u5206\u4e00\u6b21\uff0c\u6c42\u51fa\u8fd9\u4e2a\u8303\u56f4 $[lef[i], righ[i]]$ \uff0c\u5219\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u540e\u7f00\u90fd\u80fd\u6ee1\u8db3\u8be2\u95ee $i$ \u3002\n\n\u4e0b\u9762\u8fdb\u5165\u6c42\u89e3\u8fc7\u7a0b\uff1a\n\n- \u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u628a\u6bcf\u4e00\u4e2a $b[sa[i]]$ \u89c6\u4e3a\u4e00\u79cd\u989c\u8272\uff0c\u53ef\u4ee5\u5c06\u5176\u8f6c\u5316\u4e3a\u6c42\u4e00\u4e2a\u533a\u95f4\u5185\u4e0d\u540c\u989c\u8272\u79cd\u6570\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7528 *\u4e3b\u5e2d\u6811* \u89e3\u51b3\uff1a\u63d2\u5165\u7b2c $i$ \u4e2a\u6570\u65f6\uff0c\u628a\u7b2c $i$ \u4e2a\u7248\u672c\u7684\u4e3b\u5e2d\u6811\u7684\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u5728\u7b2c $i-1$ \u4e2a\u7248\u672c\u7684\u57fa\u7840\u4e0a $+1$ \uff0c\u5728\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u540c\u79cd\u989c\u8272\u7684\u4f4d\u7f6e\uff08\u8fd9\u91cc\u8bb0\u4f5c $pre[b[sa[i]]]$\uff09\u4e0a $-1$ \uff0c\u4ee5\u4fdd\u8bc1\u53ea\u7edf\u8ba1\u6bcf\u79cd\u989c\u8272\u7684\u6700\u540e\u4e00\u6b21\u51fa\u73b0\uff1b\u6700\u540e\u5904\u7406\u8be2\u95ee $i$ \u65f6\u67e5\u8be2\u7b2c $righ[i]$ \u4e2a\u7248\u672c\u7684\u4e3b\u5e2d\u6811\u7684 $[lef[i], righ[i]]$ \u7684\u6743\u503c\u548c\u5373\u53ef\u3002\n\n- \u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u76f8\u5f53\u4e8e\u6c42\u6bcf\u4e00\u4e2a\u989c\u8272\u88ab\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u533a\u95f4\u8986\u76d6\uff0c\u4e5f\u5c31\u662f\u6c42\u6bcf\u4e2a\u989c\u8272\u5728\u533a\u95f4\u5185\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u6b21\u6570\u4e4b\u548c\uff0c\u8f6c\u6362\u6210\u6570\u5b66\u516c\u5f0f\u5c31\u662f\u6c42\u6ee1\u8db3 $l \\leq i \\leq r, l > pre[b[sa[i]]]$ \u7684\u533a\u95f4\u4e2a\u6570\uff08\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b\uff0c $l>pre[b[sa[i]]]$ \u5c31\u8868\u793a\u8fd9\u4e2a\u989c\u8272\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u5728\u6b64\u533a\u95f4\u4e4b\u5916\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u989c\u8272\u5728\u6b64\u533a\u95f4\u5185\u662f\u7b2c\u4e00\u6b21\u51fa\u73b0\uff09\uff0c\u4ee5\u4e0a\u6761\u4ef6\u4e5f\u53ef\u8f6c\u5316\u4e3a $pre[b[sa[i]]] < l \\leq i,r \\geqslant i $ \uff0c\u53ef\u4ee5\u7528\u89e3\u4e8c\u7ef4\u504f\u5e8f\u7684\u65b9\u6cd5\u6c42\u89e3\uff0c\u7b80\u5355\u5730\u5bf9\u533a\u95f4\u53f3\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u4e00\u8fb9\u626b\u63cf\u7ebf\u4e00\u8fb9\u7528\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55\u533a\u95f4\u5de6\u7aef\u70b9\u5373\u53ef\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0 ##\n\n```\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing std::min;\nusing std::sort;\nconst int MAXN=440000;\nconst int MAXB=20;\nconst int MAXS=1E4;\nint n, m, l;\nint a[MAXN], b[MAXN];\nint len[MAXN], fir[MAXN];\nint sa[MAXN], rank[MAXN*2], rank1[MAXN];\nint count[MAXN], tmp[MAXN], height[MAXN];\nint lef[MAXN], righ[MAXN];\nint root[MAXN], pre[MAXN], ans[MAXN];\nstruct Interval\n{\n\tint l, r;\n\tbool operator < (const Interval& rhs) const\n\t{\n\t\treturn r<rhs.r;\n\t}\n} d[MAXN];\nstruct RMQ\n{\n\tint lg[MAXN], st[MAXN][MAXB];\n\tvoid build(int* a)\n\t{\n\t\tfor (int i=1, k=0; i<=l; i++) lg[i]=1<<k+1==i?++k:k;\n\t\tfor (int i=1; i<=l; i++) st[i][0]=a[i];\n\t\tfor (int j=1; 1<<j<=l; j++)\n\t\t\tfor (int i=1; i+(1<<j)-1<=l; i++)\n\t\t\t\tst[i][j]=min(st[i][j-1], st[i+(1<<j-1)][j-1]);\n\t}\n\tint lcp(int l, int r)\n\t{\n\t\tint k=lg[r-l];\n\t\treturn min(st[l+1][k], st[r-(1<<k)+1][k]);\n\t}\n} st;\nstruct PersistableSegmentTree\n{\n\tstruct Node\n\t{\n\t\tint val, lc, rc;\n\t} tr[MAXN<<5];\n\tint cnt;\n\tvoid pushup(int x)\n\t{\n\t\ttr[x].val=tr[tr[x].lc].val+tr[tr[x].rc].val;\n\t}\n\tvoid insert(int& x, int y)\n\t{\n\t\ttr[x=++cnt]=tr[y];\n\t}\n\tvoid update(int& x, int y, int l, int r, int p, int k)\n\t{\n\t\tinsert(x, y);\n\t\tif (l==r) { tr[x].val+=k; return; }\n\t\tint mid=l+r>>1;\n\t\tif (p<=mid) update(tr[x].lc, tr[y].lc, l, mid, p, k);\n\t\telse update(tr[x].rc, tr[y].rc, mid+1, r, p, k);\n\t\tpushup(x);\n\t}\n\tint query(int x, int l, int r, int ql, int qr)\n\t{\n\t\tif (l>qr||r<ql) return 0;\n\t\tif (ql<=l&&r<=qr) return tr[x].val;\n\t\tint mid=l+r>>1;\n\t\treturn query(tr[x].lc, l, mid, ql, qr)\n\t\t      +query(tr[x].rc, mid+1, r, ql, qr);\n\t}\n} pst;\nstruct BinaryIndexedTree\n{\n\t#define lb(x) (x&-(x))\n\tint s[MAXN];\n\tvoid add(int x, int k)\n\t{\n\t\twhile (x<=l) s[x]+=k, x+=lb(x);\n\t}\n\tint sum(int x)\n\t{\n\t\tint res=0;\n\t\twhile (x>0) res+=s[x], x-=lb(x);\n\t\treturn res;\n\t}\n\t#undef lb\n} bit;\nint getstr(int id)\n{\n\tstatic int cnt=0;\n\tint k; scanf(\"%d\", &k);\n\tfor (int i=1; i<=k; i++)\n\t\tscanf(\"%d\", &a[++l]), b[l]=id;\n\ta[++l]=MAXS+(++cnt);\n\treturn k;\n}\nint main()\n{\n//\tfreopen(\"bzoj2754.in\", \"r\", stdin);\n//\tfreopen(\"bzoj2754.out\", \"w\", stdout);\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i=1; i<=n; i++) getstr(i), getstr(i);\n\t// \u5f53\u524d\u8be2\u95ee\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u5206\u9694\u7b26\u4f4d\u7f6e\u4e3a l \uff0c\u5219\u6b64\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5c31\u662f l-len[i]\n\tfor (int i=1; i<=m; i++) len[i]=getstr(0), fir[i]=l-len[i];\n\t// \u4ee5\u4e0b\u662f\u540e\u7f00\u6392\u5e8f\n\tmemset(count, 0, sizeof count);\n\tmemset(rank, 0, sizeof rank);\n\tfor (int i=1; i<=l; i++) count[a[i]]=1;\n\tfor (int i=1; i<MAXN; i++) count[i]+=count[i-1];\n\tfor (int i=1; i<=l; i++) rank[i]=count[a[i]];\n\tfor (int p=1, k=0; k!=l; p<<=1)\n\t{\n\t\tmemset(count, 0, sizeof count);\n\t\tfor (int i=1; i<=l; i++) count[rank[i+p]]++;\n\t\tfor (int i=1; i<=l; i++) count[i]+=count[i-1];\n\t\tfor (int i=l; i>=1; i--) tmp[count[rank[i+p]]--]=i;\n\t\tmemset(count, 0, sizeof count);\n\t\tfor (int i=1; i<=l; i++) count[rank[i]]++;\n\t\tfor (int i=1; i<=l; i++) count[i]+=count[i-1];\n\t\tfor (int i=l; i>=1; i--) sa[count[rank[tmp[i]]]--]=tmp[i];\n\t\tmemcpy(rank1, rank, sizeof rank1);\n\t\trank[sa[1]]=k=1;\n\t\tfor (int i=2; i<=l; i++)\n\t\t{\n\t\t\tif (rank1[sa[i]]!=rank1[sa[i-1]]\n\t\t\t  ||rank1[sa[i]+p]!=rank1[sa[i-1]+p]) k++;\n\t\t\trank[sa[i]]=k;\n\t\t}\n\t}\n\t// \u6c42 height \u6570\u7ec4\n\tfor (int i=1, k=0; i<=l; i++)\n\t{\n\t\tif (rank[i]==1)\n\t\t{\n\t\t\theight[rank[i]]=k=1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (--k<0) k=0;\n\t\twhile (a[i+k]==a[sa[rank[i]-1]+k]) k++;\n\t\theight[rank[i]]=k;\n\t}\n\t// \u5efa\u7acb st \u8868\n\tst.build(height);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tlef[i]=righ[i]=rank[fir[i]];\n\t\tfor (int j=MAXB-1; j>=0; j--)\n\t\t\tif (lef[i]-(1<<j)>=1&&st.lcp(lef[i]-(1<<j), rank[fir[i]])>=len[i])\n\t\t\t\tlef[i]-=1<<j;\n\t\tfor (int j=MAXB-1; j>=0; j--)\n\t\t\tif (righ[i]+(1<<j)<=l&&st.lcp(rank[fir[i]], righ[i]+(1<<j))>=len[i])\n\t\t\t\trigh[i]+=1<<j;\n\t\td[i].l=lef[i]; d[i].r=righ[i];\n\t}\n\t// \u505a\u4e86\u4e00\u4efd\u6240\u6709\u533a\u95f4\u7684\u5907\u4efd\u6570\u7ec4 d \uff0c\u5e76\u5bf9 d \u6309\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\tsort(d+1, d+m+1);\n\t// \u5148\u628a\u6811\u72b6\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5de6\u7aef\u70b9\u7684\u6743\u503c\u90fd\u8d4b\u4e3a +1\n\tfor (int i=1; i<=m; i++) bit.add(d[i].l, 1);\n\tmemset(pre, 0, sizeof pre);\n\tfor (int i=1, j=1; i<=l; i++)\n\t\t// \u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5206\u9694\u7b26\u6216\u8be2\u95ee\u5b57\u7b26\u4e32\uff0c\u76f4\u63a5\u590d\u5236\u4e00\u4e2a\u548c\u4e0a\u4e2a\u7248\u672c\u4e00\u6837\u7684\u4e3b\u5e2d\u6811\n\t\tif (b[sa[i]]==0) pst.insert(root[i], root[i-1]);\n\t\telse\n\t\t{\n\t\t\tif (!pre[b[sa[i]]]) pst.update(root[i], root[i-1], 1, l, i, 1);\n\t\t\telse\n\t\t\t{\n\t\t\t\tint temp;\n\t\t\t\t// \u5148\u5728\u8be5\u989c\u8272\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e0a -1\n\t\t\t\tpst.update(temp, root[i-1], 1, l, pre[b[sa[i]]], -1);\n\t\t\t\t// \u7136\u540e\u5728\u5f53\u524d\u4f4d\u7f6e\u4e0a +1\n\t\t\t\tpst.update(root[i], temp, 1, l, i, 1);\n\t\t\t}\n\t\t\t// \u6240\u6709\u53f3\u7aef\u70b9\u5c0f\u4e8e i \u7684\u533a\u95f4\u90fd\u4e0d\u7b26\u5408\u8981\u6c42\u4e86\uff0c\u4ece\u5c06\u5176\u5de6\u7aef\u70b9\u5728\u6811\u72b6\u6570\u7ec4\u4e2d -1\n\t\t\twhile (j<=m&&d[j].r<i) bit.add(d[j++].l, -1);\n\t\t\t// \u5de6\u7aef\u70b9\u5c5e\u4e8e [pre[b[sa[i]]]+1, i] \u7684\u8ba1\u5165\u7b54\u6848\n\t\t\tans[b[sa[i]]]+=bit.sum(i)-bit.sum(pre[b[sa[i]]]);\n\t\t\t// \u66f4\u65b0 pre\n\t\t\tpre[b[sa[i]]]=i;\n\t\t}\n\t// \u5728\u4e3b\u5e2d\u6811\u4e2d\u67e5\u8be2\n\tfor (int i=1; i<=m; i++)\n\t\tprintf(\"%d\\n\", pst.query(root[righ[i]], 1, l, lef[i], righ[i]));\n\tfor (int i=1; i<=n; i++) printf(\"%d \", ans[i]); putchar('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1544932463,
        "uid": 43064,
        "name": "\u6500\u5ca9\u9ad8\u624b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u6211\u4e5f\u8d21\u732e\u4e00\u79cd\u505a\u6cd5\n\n\u540e\u7f00\u6570\u7ec4+hash\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u5728height\u5468\u56f4\u627e\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u5e76\u4e14\u7edf\u8ba1\u5165\u5185\uff0c\u4e3a\u4e86\u9632\u6b62mn\u590d\u6742\u5ea6\u7684\u4ea7\u751f\uff0c\u6240\u4ee5\u4f7f\u7528hash\u4fdd\u8bc1\u6bcf\u6b21\u7684\u8be2\u95ee\u90fd\u4e0d\u540c\uff0c\u6700\u540e\u4e00\u5757\u7edf\u8ba1\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u6700\u574f\u60c5\u51b5\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u662fn(n-1)/2\uff0c\u5728\u672c\u9898\u4e2d\u4e3a9*10^5\n\n\u4f46\u5728\u968f\u673a\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u590d\u6742\u5ea6\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\u3002\n```c\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nconst int maxn=2e5+7;vector<int>b[maxn/2];int vis[maxn],ans2[maxn];\nint n,m,a[maxn],pos[maxn],bel[maxn],hasht[8000009],head[8000009],\nnxt[8000009],ansto[maxn],re[maxn],num,t[maxn],cnt=1,M,rank[maxn],\ntp[maxn],sa[maxn],p,height[maxn],flc[maxn],sum[maxn];\nvoid solve(int x,int y)\n{\n\tansto[y]=x;re[x]++;\n}\nint hashit(int x)\n{\n\tint ans=0;\n\tfor(int i=1;i<=b[x][0];++i)\n\tans=(b[x][i]%19+ans*17+127)%8000009;\n\tint u=head[ans];\n\twhile(u)\n\t{\n\t\tint k=hasht[u];\n\t\tif(b[k][0]==b[x][0])\n\t\t for(int i=1;i<=b[k][0];++i)\n\t\t  if(b[k][i]!=b[x][i]) break;\n\t\t  else if(i==b[k][0]) {solve(k,x);return 1;}\n\t\tu=nxt[u];\n\t}\n\tnxt[++cnt]=head[ans];head[ans]=cnt;hasht[cnt]=x;\n\treturn 0;\n}\nvoid Qsort()\n{\n\tfor(int i=0;i<=M;++i) t[i]=0;\n\tfor(int i=1;i<=pos[num];++i) t[rank[i]]++;\n\tfor(int i=1;i<=M;++i) t[i]+=t[i-1];\n\tfor(int i=pos[num];i>=1;--i) sa[t[rank[tp[i]]]--]=tp[i];\n}\nvoid ji_pai()\n{\n\tM=1e4+1;\n\tfor(int i=1;i<=pos[num];++i)\n\t{\n\t\trank[i]=a[i];tp[i]=i;\n\t}\n\tQsort();\n\tfor(int w=1;p<pos[num],w<=pos[num];w<<=1,M=p)\n\t{\n\t\tp=0;\n\t\tfor(int i=1;i<=w;++i) tp[++p]=pos[num]-w+i;\n\t\tfor(int i=1;i<=pos[num];++i)\n\t\tif(sa[i]>w) tp[++p]=sa[i]-w;\n\t\tQsort();swap(rank,tp);\n\t\trank[sa[1]]=p=1;\n\t\tfor(int i=2;i<=pos[num];++i)\n\t\trank[sa[i]]=(tp[sa[i]]==tp[sa[i-1]]&&tp[sa[i]+w]==tp[sa[i-1]+w])?\n\t\tp:++p;\n\t}\n}\nvoid get_lcp()\n{\n\tint h=0;\n\tfor(int i=1;i<=pos[num];++i)\n\t{\n\t\tif(rank[i]==1) h=0;\n\t\telse \n\t\t{\n\t\t\tint k=sa[rank[i]-1];\n\t\t\tif(--h<0) h=0;\n\t\t\twhile(a[k+h]==a[i+h]) h++;\n\t\t}\n\t\theight[rank[i]]=h;\n\t}\n}\nvoid add_ans(int x)\n{\n\tint l=pos[flc[x]-1]+1,k=rank[l];\n\tfor(int i=k;i>1;--i)\n\tif(height[i]<b[x][0]) break;\n\telse\n\t{\n\t\tint p1=sa[i-1],p2=bel[p1],p3=bel[p1+b[x][0]-1];\n\t\tif(p1>pos[2*n]||vis[(p2+1)/2]==x||p2!=p3) continue;\n\t\tvis[(p2+1)/2]=x;sum[x]++;ans2[(p2+1)/2]+=re[x]+1;\n\t}\n\tfor(int i=k+1;i<=pos[num];++i)\n\tif(height[i]<b[x][0]) break;\n\telse\n\t{\n\t\tint p1=sa[i],p2=bel[p1],p3=bel[p1+b[x][0]-1];\n\t\tif(p1>pos[2*n]||vis[(p2+1)/2]==x||p2!=p3) continue;\n\t\tvis[(p2+1)/2]=x;sum[x]++;ans2[(p2+1)/2]+=re[x]+1;\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);num=2*n;\n\tfor(int i=1;i<=n*2;++i)\n\t{\n\t\tint x;scanf(\"%d\",&x);pos[i]=pos[i-1]+x;\n\t\tfor(int j=1;j<=x;++j) scanf(\"%d\",&a[pos[i-1]+j]);\n\t\tfor(int j=1;j<=x;++j) bel[pos[i-1]+j]=i;\n\t}\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint x,y;scanf(\"%d\",&x);b[i].push_back(x);\n\t\tfor(int j=1;j<=x;++j) \n\t\t{\t\n\t\t\tscanf(\"%d\",&y);b[i].push_back(y);\n\t\t}\n\t\thashit(i);\n\t}\n\tfor(int i=1;i<=m;++i)\n\tif(!ansto[i]) \n\t{\n\t\tpos[num+1]=pos[num]+b[i][0];num++;flc[i]=num;\n\t\tfor(int j=1;j<=b[i][0];++j)\n\t\ta[pos[num-1]+j]=b[i][j];\n\t} \n\tji_pai();\n\tget_lcp();\n\tfor(int i=1;i<=m;++i)\n\tif(!ansto[i]) add_ans(i);\n\telse sum[i]=sum[ansto[i]];\n\tfor(int i=1;i<=m;++i) printf(\"%d\\n\",sum[i]);\n\tfor(int i=1;i<=n;++i) printf(\"%d \",ans2[i]);\n\treturn 0;\n}\n```",
        "postTime": 1523329112,
        "uid": 43140,
        "name": "zhaoyifan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "/\\*\nBZOJ 2754: [SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\n\n \n\u6b64\u9898\u6709N\u79cd\u505a\u6cd5\u3002\u3002\u3002\n\n\u89c1\u5230\u4f17dalao\u7528\u5404\u79cd\u5947\u602a\u7684\u59ff\u52bfAC\u6b64\u9898\u3002\u3002\n\n\n\u5177\u4f53\u6709 \u540e\u7f00\u6570\u7ec4 + \u83ab\u961f\n\n\u540e\u7f00\u6570\u7ec4 + \u4f18\u5316\u66b4\u529b\n\nAC\u81ea\u52a8\u673a \u62bd\u79bbFail\u6811\n\nAC\u81ea\u52a8\u673a \u4e71\u641e\u3002\u3002\n\nAC\u81ea\u52a8\u673a + hash\u3002\u3002\u3002\n\n\n\u8dea\u70c2\u3002\u3002\n\n\n\nbakabaka\n\n\n\u6211\u5f53\u7136\u662f\u5f00\u5fc3\u7684\u5199\u4e86AC\u81ea\u52a8\u673a + \u66b4\u529b\u8f6c\u79fb\u5566\u3002\u3002\n\n    \n\u6bcf\u6b21\u6cbf\u7740fail\u6307\u9488\u8df3\uff0c\u7136\u540e\u8ba1\u7b97\uff0c \u6ce8\u610f\u5224\u65ad\u662f\u5426\u8ba1\u7b97\u8fc7\n\n    \n\u8f93\u5165\u592a\u6076\u5fc3\u3002\u3002\u7528map\u5b58Trie\u6811\u7684\u513f\u5b50\u8282\u70b9\u5373\u53ef\n\n\\*/\n \n \n \n \n \n     \n \n \n \n \n \n     \n```cpp\n#include <cstdio>\n#include <map>\n#include <vector>\n#include <queue>\n#define Max 80090\nvoid read (int &now)\n{\n    now = 0;\n    register char word = getchar ();\n    while (word < '0' || word > '9')\n        word = getchar ();\n    while (word >= '0' && word <= '9')\n    {\n        now = now * 10 + word - '0';\n        word = getchar ();\n    }\n}\nint N, M;\nstruct T_D \n{\n    int Flandre;\n    int Id;\n    T_D *Fail;\n    std :: map <int, T_D *> child;\n    T_D ()\n    {\n        child.clear ();\n        Flandre = 0;\n        Id = 0;\n        Fail = NULL;\n    }\n};\nstd :: map <int, bool> visit;\nstd :: vector <int> name[Max];\nstd :: vector <int> count[Max * 3];\nint Answer_1[Max];\nint Answer_2[Max];\nclass AC_Type\n{\n```\nprivate :\n \n \n \n        T\\_D \\*Root ;\n\n        int Count;\n\n        int Insert\\_Count;\n\npublic :\n\n \n \n \n \n \n             \n \n \n \n \n \n\n\n\n\n\n\n\n \n\n \n \n```cpp\n        AC_Type ()\n        {\n            Count = 0;\n            Root = new T_D ;\n            Root->Id = ++ Count;\n            Insert_Count = 0;\n        }\n        void Insert (int Len)\n        {\n            T_D *now = Root;\n            int Id;\n            for (int i = 1; i <= Len; i ++)\n            {\n                read (Id);  \n                if (now->child[Id] == NULL)\n                {\n                    now->child[Id] = new T_D;\n                    now->child[Id]->Id = ++ Count;\n                }\n                now = now->child[Id];\n            }\n            now->Flandre ++;\n            count[now->Id].push_back (++ Insert_Count);\n        }\n        void Build_AC ()\n        {\n            std :: queue <T_D *> Queue;\n            Queue.push (Root);\n            T_D *now, *pos;\n            while (!Queue.empty ())\n            {\n                now = Queue.front ();\n                Queue.pop ();\n                pos = NULL;\n                for (std :: map <int, T_D *> :: iterator i = now->child.begin (); i != now->child.end (); i ++)\n                {\n                    if (now == Root)\n                        i->second->Fail = Root;\n                    else\n                    {\n                        for (pos = now->Fail; pos; pos = pos->Fail)\n                            if (pos->child[i->first])\n                            {\n                                i->second->Fail = pos->child[i->first];\n                                break;\n                            }\n                        if (pos == NULL)\n                            i->second->Fail = Root;\n                    }\n                    Queue.push (i->second);\n                }\n            }\n        }\n        T_D *Get_Root ()\n        {\n            return Root;\n        }\n};\nAC_Type Make;\nvoid Calculate (T_D *now, int i)\n{\n    if (now->Flandre)\n    {\n        Answer_2[i] += now->Flandre;\n        for (int k = 0; k < count[now->Id].size (); k ++)\n            Answer_1[count[now->Id][k]] ++;\n    }\n}\nint main (int argc, char *argv[])\n{   \n    read (N);\n    read (M);\n    for (int i = 1, x, y; i <= N; i ++)\n    {\n        read (x);\n        for (int j = 1; j <= x; j ++)\n        {\n            read (y);\n            name[i].push_back (y);\n        }\n        name[i].push_back (-1);\n        read (x);\n        for (int j = 1; j <= x; j ++)\n        {\n            read (y);\n            name[i].push_back (y);\n        }\n        name[i].push_back (-2);\n    }\n    for (int i = 1, x; i <= M; i ++)\n    {\n        read (x);\n        Make.Insert (x);\n    }\n    Make.Build_AC ();\n    int Len;\n    T_D *now , *pos;\n    for (int i = 1; i <= N; i ++)\n    {\n        Len = name[i].size ();\n        visit.clear ();\n        now = Make.Get_Root ();\n        pos = NULL;\n        for (int j = 0; j < Len; j ++)\n        {\n            if (!visit[now->Id])\n            {\n                visit[now->Id] = true;\n                Calculate (now, i);\n                for (pos = now->Fail; pos; pos = pos->Fail)\n                    if (!visit[pos->Id])\n                    {\n                        visit[pos->Id] = true;\n                        Calculate (pos, i);\n                    }\n            }\n            if (now->child[name[i][j]])\n                now = now->child[name[i][j]];\n            else\n            {\n                for (pos = now->Fail; pos; pos = pos->Fail)\n                {\n                    if (!visit[pos->Id])\n                    {\n                        visit[pos->Id] = true;\n                        Calculate (pos, i);\n                    }\n                    if (pos->child[name[i][j]])\n                    {\n                        now = pos->child[name[i][j]];\n                        for (T_D *Saber = pos->Fail; Saber; Saber = Saber->Fail)\n                            if (!visit[Saber->Id])\n                            {\n                                visit[Saber->Id] = true;\n                                Calculate (Saber, i);\n                            }\n                        break;\n                    }\n                }\n                if (pos == NULL)\n                    now = Make.Get_Root ();\n            }\n        }\n    }\n    for (int i = 1; i <= M; i ++)\n        printf (\"%d\\n\", Answer_1[i]);\n    printf (\"%d\", Answer_2[1]);\n    for (int i = 2; i <= N; i ++)\n        printf (\" %d\", Answer_2[i]);\n    return 0;\n}\n```",
        "postTime": 1497745649,
        "uid": 21123,
        "name": "ZlycerQan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u628a\u6240\u6709\u7684\u59d3\u540d\u4e32\u4e2d\u95f4\u63d2\u4e0a\u4e0d\u540c\u7684\u5b57\u7b26\u5efa\u51fa\u540e\u7f00\u6570\u7ec4\uff0c\u6c42\u51fa\u6bcf\u4e2a\u6392\u540d$i$\u5bf9\u5e94\u7684\u4e32$sa[i]$\u3002\n\n\u5982\u679c\u4e00\u4e2a\u4e32\u662f\u67d0\u4e9b\u540e\u7f00\u7684\u524d\u7f00\uff0c\u90a3\u4e48\u8fd9\u4e9b\u540e\u7f00\u7684\u6392\u540d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u4e5f\u5c31\u662f\u5728sa\u6570\u7ec4\u4e0a\u662f\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u4e8c\u5206\u51fa\u8fd9\u4e2a\u533a\u95f4\u3002\u770b\u770b\u8fd9\u4e2a\u533a\u95f4\u4e2d\u6709\u591a\u5c11\u989c\u8272\uff0c\u83ab\u961f\u89e3\u51b3\u3002\n\n\u6c42\u6bcf\u4e2a\u989c\u8272\u51fa\u73b0\u6b21\u6570\uff1f\u53ef\u4ee5\"\u5728\u65f6\u95f4\u8f74\u4e0a\u5dee\u5206\"\u3002\uff08\u4ee5\u4e0b\u7b2ci\u4e2a\u8be2\u95ee\u8868\u793a\u83ab\u961f\u5c06\u8be2\u95ee\u6392\u5e8f\u524d\u7684\u987a\u5e8f\uff09\n\n\u5f53\u83ab\u961f\u5728\u5904\u7406\u7b2cj\u4e2a\u8be2\u95ee\u4e2d\u53d1\u73b0\u4e00\u4e2a\u65b0\u51fa\u73b0\u7684\u989c\u8272i\u65f6\uff0c$num[i]+=cnt-j+1$\uff0ccnt\u662f\u603b\u8be2\u95ee\u6570\u3002\n\n\u5f53\u83ab\u961f\u5728\u5904\u7406\u7b2cj\u4e2a\u8be2\u95ee\u4e2d\u53d1\u73b0\u5c11\u4e86\u4e00\u4e2a\u989c\u8272i\u65f6\uff0c$num[i]-=cnt-j+1$\u3002\n\n\u8fd9\u6837\u505a\u7684\u610f\u4e49\uff1a\u5728\u8be2\u95ee\u7684\u65f6\u95f4\u8f74\u4e0a\uff0c\u5982\u679c\u5728\u4e00\u4e2a\u70b9i\u53d1\u73b0\u4e00\u4e2a\u65b0\u989c\u8272\uff0c\u5047\u8bbe\u8fd9\u4e2a\u989c\u8272\u4e0d\u4f1a\u518d\u6d88\u5931\uff0c\u90a3\u4e48\u5b83\u51fa\u73b0\u4e86cnt-i+1\u4e5f\u5c31\u662fi\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\u6b21\u3002\u5982\u679c\u4e4b\u540e\u8fd9\u4e2a\u989c\u8272\u5728\u7b2cj\u4e2a\u8be2\u95ee\u65f6\u6d88\u5931\u4e86\uff0c\u90a3\u4e48\u5c31\u51cf\u53bb\u591a\u7b97\u7684cnt-j+1\u6b21\u3002\n\n\u72af\u7684\u4e00\u4e9b\u667a\u969c\u9519\u8bef\uff1a\n\n```c++\nfor (int i=1; i<=n; i++) bl[i]=(i/blo)+1;\t//\u5c31\u8fd9\u670991\u5206\uff0c\u672c\u673a\u8fd8\u6d4b\u4e0d\u51fa\u6765\n```\n\n```c++\nfor (int i=1; i<=maxn; i++) o[i]=0;\t\t// o\u662f\u57fa\u6570\u6392\u5e8f\u7684\u6876\uff0co[0]\u5b89\u8be6\u7684\u5b58\u5728\u7740\n```\n\n\u8fd8\u6709ch[n+1]\u9ed8\u8ba4\u662f0\uff0c\u7136\u800c\u5e94\u8be5\u662f-1\u3002\n\n\u4ee5\u53ca\u5f88\u591a\u6ca1\u8138\u653e\u51fa\u6765\u7684\u9519\u8bef\u3002\u3002\u3002\n\n```c++\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define SIZE 210012\n#define re register\nusing namespace std;\ninline char gc(){\n\tstatic char buf[100000],*p1=buf,*p2=buf;\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int init(){\n\tre char c=gc();re int a=0,w=1;\n\twhile((c<'0'||c>'9')&&c-'-')c=gc();\n\tif(c=='-')w=-w,c=gc();\n\twhile(c>='0'&&c<='9')a=(a<<3)+(a<<1)+(c^48),c=gc();\n\treturn a*w;\n}\ninline void pc(re char c,re int p=0){\n\tstatic char buf[100000],*p1=buf;\n\tif(p){fwrite(buf,1,p1-buf,stdout);return ;}\n\t*p1++=c;\n\tif(p1==buf+100000)fwrite(buf,1,100000,stdout),p1=buf;\n}\nvoid print(re int x){\n\tif(x>9)print(x/10);\n\tpc(x%10+'0');\n}\ninline char getc(){\n\tchar c=gc();\n\twhile(!isupper(c)) c=gc();\n\treturn c;\n}\nstruct node{\n\tint l,r,h;\n}q[SIZE];\nstruct suffix{\n\tint a,b,h;\n}a[SIZE],tmp[SIZE];\nint bl[SIZE],sa[SIZE],o[SIZE],n,m,t,ch[SIZE],blo,num[50001];\nint c[SIZE],maxn,sum,ans[100010],cnt,b[50001],rk[SIZE];\ninline bool cmp(node c,node d){\n\tif (bl[c.l]!=bl[d.r]) return c.l<d.l;\n\tif (bl[c.l]&1) return c.r<d.r;\n\treturn c.r>d.r;\n}\ninline void jsort(){\n\tfor (int i=0; i<=maxn; i++) o[i]=0;\n\tfor (int i=1; i<=n; i++) o[a[i].b]++;\n\tfor (int i=1; i<=maxn; i++) o[i]+=o[i-1];\n\tfor (int i=1; i<=n; i++) tmp[o[a[i].b]--]=a[i];\n\tfor (int i=1; i<=n; i++) a[i]=tmp[i];\n\tfor (int i=0; i<=maxn; i++) o[i]=0;\n\tfor (int i=1; i<=n; i++) o[a[i].a]++;\n\tfor (int i=1; i<=maxn; i++) o[i]+=o[i-1];\n\tfor (int i=n; i>=1; i--) tmp[o[a[i].a]--]=a[i];\n\tfor (int i=1; i<=n; i++) a[i]=tmp[i];\n}\ninline void add(int x,int y){if (!o[c[sa[x]]]) sum++,num[c[sa[x]]]+=cnt-y+1;o[c[sa[x]]]++;}\ninline void del(int x,int y){o[c[sa[x]]]--;if (!o[c[sa[x]]]) sum--,num[c[sa[x]]]-=cnt-y+1;}\nint main(){\n\t// freopen(\"0a.in\",\"r\",stdin);\n\t// freopen(\"0a.out\",\"w\",stdout);\n\tint x,y;\n\tt=init(),m=init();\n\tfor (int i=1; i<=t; i++){\n\t\tx=init(); ch[++n]=1e4+i*2-1;\n\t\tfor (int j=1; j<=x; j++) ch[++n]=init();\n\t\tx=init(); ch[++n]=1e4+i*2;\n\t\tfor (int j=1; j<=x; j++) ch[++n]=init();\n\t\tb[i]=n;\n\t}//ch[++n]=1e4+t*2+1;\n\tch[n+1]=-1;\n\tfor (int i=1; i<=t; i++)\n\t\tfor (int j=b[i-1]+1; j<=b[i]; j++)\n\t\t\tc[j]=i,a[j].a=ch[j],a[j].h=j;\n\tmaxn=1e4+2*t;\n\tjsort(); a[0].a=-1;\n\tfor (int i=1; i<=n; i++){\n\t\trk[a[i].h]=rk[a[i-1].h];\n\t\tif (a[i].a!=a[i-1].a||a[i].b!=a[i-1].b) rk[a[i].h]++;\n\t}\n\tmaxn=rk[a[n].h];\n\tfor (int i=1; i<=n; i++) a[i].a=rk[i],a[i].h=i,rk[i]=a[i].b=0;\n\tfor (int w=1; w<=n; w<<=1){\n\t\tfor (int i=1; i+w<=n; i++) a[i].b=a[i+w].a;\n\t\tjsort();\n\t\tfor (int i=1; i<=n; i++){\n\t\t\trk[a[i].h]=rk[a[i-1].h];\n\t\t\tif (a[i].a!=a[i-1].a||a[i].b!=a[i-1].b) rk[a[i].h]++;\n\t\t}\n\t\tmaxn=rk[a[n].h];\n\t\tfor (int i=1; i<=n; i++) a[i].a=rk[i],a[i].h=i,rk[i]=a[i].b=0;\n\t\tif (maxn==n) break;\n\t}\n\tfor (int i=1; i<=n; i++) sa[a[i].a]=i,rk[i]=a[i].a,a[i].a=0;\n\t// puts(\"sa:\"); for (int i=1; i<=n; i++) printf(\"%d \",sa[i]); puts(\"\");\n\t// puts(\"ch:\"); for (int i=1; i<=n; i++) printf(\"%d \",ch[i]); puts(\"\");\n\t// puts(\"rk:\"); for (int i=1; i<=n; i++) printf(\"%d \",rk[i]); puts(\"\");\n\tint l,r,mid,ls,rs;\n\tfor (int i=1; i<=m; i++){\n\t\ty=init(); ls=1,rs=n;\n\t\tfor (int j=1; j<=y; j++){\n\t\t\tx=init();\n\t\t\tl=ls,r=rs;\n\t\t\twhile (l<=r){\n\t\t\t\tmid=(l+r)>>1;\n\t\t\t\tif (ch[sa[mid]+j-1]<x) l=mid+1;\n\t\t\t\telse r=mid-1;\n\t\t\t}\n\t\t\tls=l; r=rs;\n\t\t\twhile (l<=r){\n\t\t\t\tmid=(l+r)>>1;\n\t\t\t\tif (ch[sa[mid]+j-1]>x) r=mid-1;\n\t\t\t\telse l=mid+1;\n\t\t\t}\n\t\t\trs=r;\n\t\t}\n\t\tif (ls<=rs) q[++cnt].l=ls,q[cnt].r=rs,q[cnt].h=i;\n\t\t// printf(\"%d %d\\n\",ls,rs);\n\t}\n\tblo=sqrt(n); memset(o,0,sizeof(o));\n\tfor (int i=1; i<=n; i++) bl[i]=(i-1)/blo+1;\n\tsort(q+1,q+cnt+1,cmp); l=1,r=0;\n\tfor (int i=1; i<=m; i++){\n\t\twhile (l<q[i].l) del(l,i),l++;\n\t\twhile (l>q[i].l) l--,add(l,i);\n\t\twhile (r<q[i].r) r++,add(r,i);\n\t\twhile (r>q[i].r) del(r,i),r--;\n\t\tans[q[i].h]=sum;\n\t}\n\tfor (int i=1; i<=m; i++) print(ans[i]),pc('\\n');\n\tfor (int i=1; i<=t; i++){\n\t\tprint(num[i]),pc(' ');\n\t\t// if (i==t) puts(\"\"); else printf(\" \");\n\t}\n\tpc(' ',1);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1554979493,
        "uid": 63661,
        "name": "Taduro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "#### [\u9898\u76ee\u94fe\u63a5 $Click  Here$](https://www.luogu.org/problemnew/show/P2336)_\n\n#### $200$\u884c\u7eaf\u5e72\u8d27\u7684\u4ee3\u7801\uff0c\u4e00\u53d1$WA$\u6389\u771f\u7684\u662f\u8ba9\u4eba\u7a92\u606f\uff0c\u5e78\u597d\u6700\u540e\u627e\u5230\u4e86\u9505\u5728\u54ea\u3002\uff08\u5dee\u70b9\u5c31\u8981\u5f03\u6389\u4e86$QAQ$\uff09\n\n#### \u3010\u8c03\u51fa\u6765\u7684\u65f6\u5019\u771f\u7684\u662f\u8981\u9ad8\u5174\u5230\u54ed\u51fa\u6765\u4e86$TwT$\u3011\n\n#### \u8fd9\u4e2a\u9898\u6709\u5f88\u591a\u79cd\u5199\u6cd5\uff0c\u4f46\u662f\u5927\u591a\u6570\u90fd\u662f\u5f3a\u884c\u6c34\u8fc7\u53bb\u7684\uff0c\u6b63\u89e3\u7684\u8bdd\u5e94\u8be5\u662f$SA$\u6216\u8005$SAM$\u641e\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\u6211\u5728\u8fd9\u91cc\u9009\u62e9\u7684\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4$RMQ$\uff0c\u7b2c\u4e00\u95ee\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u989c\u8272\u4e2a\u6570\uff0c\u7b2c\u4e8c\u95ee\u628a\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\u5dee\u5206\u5bf9\u5e94\u5230\u6bcf\u4e2a\u989c\u8272\u4e0a\u3002\u653e$SA+$\u83ab\u961f\u7684\u4eba\u597d\u50cf\u5f88\u5c11\uff0c\u8fd9\u91cc\u6211\u7ed9\u4e00\u53d1~~\u6e05\u65b0\u8131\u4fd7~~\u53c8\u81ed\u53c8\u957f\u7684\u4ee3\u7801\u4f9b\u5927\u5bb6\u53c2\u8003\u3002\n\n#### \u8bf4\u53e5\u5b9e\u8bdd\uff0c\u5982\u679c\u6211\u4f1a$SAM$\u7684\u8bdd\u7edd\u5bf9\u4e0d\u4f1a\u7528\u8fd9\u79cd\u6bd2\u7624\u5199\u6cd5\u3002\u592a$TM$\u96be\u8c03\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 600010;\nconst int INF = 0x7fffffff;\n\n#define ls (p << 1)\n#define rs (p << 1 | 1)\n\nint n, m, l, len, s[N], id[N], height[N];\nint sa[N], tp[N], rk[N], _rk[N], bin[N], qry[N], lenq[N];\n\nvoid base_sort (int n, int m) {\n\tfor (int i = 1; i <= m; ++i) bin[i] = 0;\n\tfor (int i = 1; i <= n; ++i) bin[rk[tp[i]]]++;\n\tfor (int i = 1; i <= m; ++i) bin[i] += bin[i - 1];\n\tfor (int i = n; i >= 1; --i) sa[bin[rk[tp[i]]]--] = tp[i];\n}\n\nvoid suffix_sort (int n, int m) {\n\tfor (int i = 1; i <= n; ++i) {\n\t\trk[i] = s[i], tp[i] = i;\n\t}\n\tbase_sort (n, m);\n\tfor (int w = 1; w <= n; w <<= 1) {\n\t\tint cnt = 0;\n\t\tfor (int i = n - w + 1; i <= n; ++i) {\n\t\t\ttp[++cnt] = i;\n\t\t}\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tif (sa[i] > w) {\n\t\t\t\ttp[++cnt] = sa[i] - w;\n\t\t\t}\n\t\t}\n\t\tbase_sort (n, m);\n\t\tmemcpy (_rk, rk, sizeof (rk));\n\t\trk[sa[1]] = cnt = 1;\n\t\tfor (int i = 2; i <= n; ++i) {\n\t\t\trk[sa[i]] = _rk[sa[i]] == _rk[sa[i - 1]] && _rk[sa[i] + w] == _rk[sa[i - 1] + w] ? cnt : ++cnt;\n\t\t}\n\t\tif (cnt == n) return;\n\t\tm = cnt;\n\t}\n}\n\nvoid get_height (int n) {\n\tint k = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (k) --k;\n\t\tint j = sa[rk[i] - 1];\n\t\twhile (s[i + k] == s[j + k]) ++k;\n\t\theight[rk[i]] = k;\n\t}\n}\n\nstruct Segment_Tree {\n\t//\u7ef4\u62a4height\u6570\u7ec4\u6700\u5c0f\u503c\u7684\u7ebf\u6bb5\u6811\n\tint a[N << 2];\n\n\tvoid push_up (int p) {\n\t\ta[p] = min (a[ls], a[rs]);\n\t}\n\t\n\tvoid build (int l, int r, int p) {\n\t\tif (l == r) {\n\t\t\ta[p] = height[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tbuild (l, mid, ls);\n\t\tbuild (mid + 1, r, rs);\n\t\tpush_up (p);\n\t}\n\n\tint query (int l, int r, int nl, int nr, int p) {\n\t\tif (nl <= l && r <= nr) {\n\t\t\treturn a[p];\n\t\t}\n\t\tint mid = (l + r) >> 1, res = INF;\n\t\tif (nl <= mid) res = min (res, query (l, mid, nl, nr, ls));\n\t\tif (mid + 1 <= nr)  res = min (res, query (mid + 1, r, nl, nr, rs));\n\t\treturn res;\n\t}\n}tr;\n\nstruct Query {\n\tint l, r, id, blo;\n}q[N];\n\nbool cmp (Query lhs, Query rhs) {\n\treturn lhs.blo == rhs.blo ? lhs.r < rhs.r : lhs.blo < rhs.blo;\n}\n\nbool can_use (int l, int r, int lcp) {\n\treturn tr.query (1, len, l, r, 1) >= lcp;\n}\n\nint have[N], ans1[N], ans2[N];\n\nint main () {\n\tcin >> n >> m;\n\tint ban = 10001;\n\ts[len = 0] = -1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tfor (int k = 0; k <= 1; ++k) {\n\t\t\tcin >> l;\n\t\t\tfor (int j = 1; j <= l; ++j) {\n\t\t\t\tcin >> s[++len];\n\t\t\t\tid[len] = i;\n\t\t\t}\n\t\t\ts[++len] = ++ban;\n\t\t}\n\t} \n\tfor (int i = 1; i <= m; ++i) {\n\t\tcin >> l;\n\t\tlenq[i] = l;\n\t\tqry[i] = len + 1;\n\t\tfor (int j = 1; j <= l; ++j) {\n\t\t\tcin >> s[++len];\n\t\t}\n\t\ts[++len] = ++ban;\n\t}\n\tsuffix_sort (len, ban);\n\tget_height (len);\n\ttr.build (1, len, 1);\n\tint maxn = sqrt (len);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tq[i].id = i;\n\t\tint l = 1, r = rk[qry[i]];\n\t\twhile (l < r) {\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif (can_use (mid, r, lenq[i])) {\n\t\t\t\tr = mid;\n\t\t\t} else {\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t}\n\t\tif (height[r] < lenq[i]) r++;\n\t\tq[i].l = r - 1;\n\t\t//\u786e\u8ba4\u5de6\u8fb9\u754c\n\t\tl = rk[qry[i]], r = len;\n\t\twhile (l < r) {\n\t\t\tint mid = (l + r + 1) >> 1;\n\t\t\tif (can_use (l, mid, lenq[i])) {\n\t\t\t\tl = mid;\n\t\t\t} else {\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t\tif (height[l] < lenq[i]) l--;\n\t\tq[i].r = l;\n\t\t//\u786e\u8ba4\u53f3\u8fb9\u754c\n\t\tq[i].blo = (q[i].l - 1) / maxn + 1;\n\t\t//\u5206\u5757\n\t}\n\tsort (q + 1, q + 1 + m, cmp);\n\tint l = 1, r = 0, tot = 0;\n\tfor (int i = 1; i <= m; ++i) {\n\t\twhile (l < q[i].l) {\n \t\t\t--have[id[sa[l]]];\n\t\t\tif (id[sa[l]] != 0 && have[id[sa[l]]] == 0) {\n\t\t\t\t--tot;\n\t\t\t\tans2[id[sa[l]]] -= (m - i + 1);\n\t\t\t}\n\t\t\t++l;\n\t\t}\n\t\twhile (l > q[i].l) {\n\t\t\t--l;\n\t\t\tif (id[sa[l]] != 0 && have[id[sa[l]]] == 0) {\n\t\t\t\t++tot;\n\t\t\t\tans2[id[sa[l]]] += (m - i + 1);\n\t\t\t}\n\t\t\t++have[id[sa[l]]];\n\t\t}\n\t\twhile (r > q[i].r) {\n\t\t\t--have[id[sa[r]]];\n\t\t\tif (id[sa[r]] != 0 && have[id[sa[r]]] == 0) {\n\t\t\t\t--tot;\n\t\t\t\tans2[id[sa[r]]] -= (m - i + 1);\n\t\t\t}\n\t\t\t--r;\n\t\t}\n\t\twhile (r < q[i].r) {\n\t\t\t++r;\n\t\t\tif (id[sa[r]] != 0 && have[id[sa[r]]] == 0) {\n\t\t\t\t++tot;\n\t\t\t\tans2[id[sa[r]]] += (m - i + 1);\n\t\t\t}\n\t\t\t++have[id[sa[r]]];\n\t\t}\n\t\tans1[q[i].id] = tot;\n\t}\n\tfor (int i = 1; i <= m; ++i) printf (\"%d\\n\", ans1[i]);\n\tfor (int i = 1; i <= n; ++i) printf (\"%d \", ans2[i]);\n}\n\n```\n\n",
        "postTime": 1551181617,
        "uid": 58698,
        "name": "Nativ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u6709\u4e86\u4e4b\u524d\u7684\u7ecf\u5386\uff0c\u4e8c\u5206\u7684\u901f\u5ea6\u4f3c\u4e4e\u8fd8\u4e0d\u5982\u66b4\u529b\u641e\u641e\u901f\u5ea6\u5feb\u5462\n\n\u8fd9\u91cc\u76f8\u6bd4\u4e0a\u4e00\u4e2atjoi2013\u9700\u8981\u9650\u5236\u4e00\u4e0b\u4e0d\u8981\u67e5\u5230\u95ee\u8be2\u7684\u5b57\u7b26\u4e32\u91cc\u53bb \u5e76\u4e14\u5047\u5982\u662f\u5c5e\u4e8e\u540c\u4e00\u5757\u90a3\u4e48tmp\u8bb0\u5f55\u7684\u7b54\u6848\u53ea\u7edf\u8ba1\u4e00\u6b21\n\n(http://www.elijahqi.win/2017/08/27/bzoj-3172/) \u849f\u84bb\u5728blog\u4e2d\u5199\u7684x\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#define N 2020010\ninline int read(){\n    int x=0;char ch=getchar();\n    while (ch<'0'||ch>'9') ch=getchar();\n    while (ch<='9'&&ch>='0') {x=x*10+ch-'0';ch=getchar();}\n    return x;\n}\nint n,m,a[N],n1,m1,bl[N],count[N],rank[N<<1],rank1[N],sa[N],height[N],k,tmp[N],visit[N],ans[N];\nstruct node{\n    int st,len;\n}data[55000];\nint main(){\n//    freopen(\"2336.in\",\"r\",stdin);\n    n1=read();m1=read();n=1;m=10000;\n    for (int i=1;i<=n1;++i){\n        int tmp=read();\n        for (int j=0;j<tmp;++j) a[n+j]=read(),bl[n+j]=i;n+=tmp;a[n++]=++m;\n        tmp=read();\n        for (int j=0;j<tmp;++j) a[n+j]=read(),bl[n+j]=i;n+=tmp;a[n++]=++m;\n    }int last=n-1;\n    for (int i=1;i<=m1;++i){\n        int tmp=read();\n        data[i].st=n;data[i].len=tmp;\n        for (int j=0;j<tmp;++j) a[n+j]=read();n+=tmp;a[n++]=++m;\n    }n-=1;\n//    printf(\"%d\\n\",n);\n    //for (int i=1;i<=n;++i) printf(\"%d\\n\",a[i]);\n    for (int i=1;i<=n;++i) count[a[i]]=1;\n    for (int i=1;i<=m;++i) count[i]+=count[i-1];\n    for (int i=1;i<=n;++i) rank[i]=count[a[i]];\n    k=0;count[0]=0;\n    for (int p=1;k!=n;p<<=1,m=k){\n        for (int i=1;i<=m;++i) count[i]=0;\n        for (int i=1;i<=n;++i) count[rank[i+p]]++;\n        for (int i=1;i<=m;++i) count[i]+=count[i-1];\n        for (int i=n;i>=1;--i) tmp[count[rank[i+p]]--]=i;\n        for (int i=1;i<=m;++i) count[i]=0;\n        for (int i=1;i<=n;++i) count[rank[i]]++;\n        for (int i=1;i<=m;++i) count[i]+=count[i-1];\n        for (int i=n;i>=1;--i) sa[count[rank[tmp[i]]]--]=tmp[i];\n        memcpy(rank1,rank,sizeof(rank)>>1);\n        rank[sa[1]]=k=1;\n        for (int i=2;i<=n;++i){\n            if (rank1[sa[i]]!=rank1[sa[i-1]]||rank1[sa[i]+p]!=rank1[sa[i-1]+p]) ++k;\n            rank[sa[i]]=k;\n        }\n    }\n    k=0;\n    for (int i=1;i<=n;++i){\n        if (rank[i]==1) continue;\n        k=k==0?0:k-1;\n        while (a[i+k]==a[sa[rank[i]-1]+k]) ++k;\n        height[rank[i]]=k;\n    }\n//    for (int i=1;i<=n;++i) printf(\"%d \",sa[i]);printf(\"\\n\");\n//    for (int i=1;i<=n;++i) printf(\"%d \",height[i]);\n    for (int i=1;i<=m1;++i){\n        int l=rank[data[i].st],r=rank[data[i].st]+1;\n        while (height[l]>=data[i].len) --l;\n        while (height[r]>=data[i].len) ++r;--r;\n        int tmp=0;\n        for (int j=l;j<=r;++j){\n            if (sa[j]>last) continue;//\u8d85\u8fc7\u4e86\u7b54\u6848\u5bfb\u627e\u7684\u8303\u56f4\n            if (visit[bl[sa[j]]]==i) continue; \n            tmp++;ans[bl[sa[j]]]++;visit[bl[sa[j]]]=i;\n        }\n        printf(\"%d\\n\",tmp);\n    }\n    for (int i=1;i<=n1;++i) printf(\"%d \",ans[i]);\n    return 0;\n}\n```\n\u4e8c\u5206\u67e5\u627e \u901f\u5ea6\u66f4\u6162x\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#define N 2020010\ninline int read(){\n    int x=0;char ch=getchar();\n    while (ch<'0'||ch>'9') ch=getchar();\n    while (ch<='9'&&ch>='0') {x=x*10+ch-'0';ch=getchar();}\n    return x;\n}\nint n,m,a[N],n1,m1,bl[N],count[N],rank[N<<1],rank1[N],sa[N],height[N],k,tmp[N],visit[N],ans[N],l,r,fmin[N][20],Log[N];\nstruct node{\n    int st,len;\n}data[55000];\ninline int min(int x,int y){return x<y?x:y;}\ninline int lcp(int x,int y){\n    x++;int t=Log[y-x+1];\n    return min(fmin[x][t],fmin[y-(1<<t)+1][t]);\n}\nvoid check(int st,int len){\n    int l1,r1;\n    if (height[st]<len) l1=st;else{\n        int ll=1,rr=st-1;\n        while (ll<=rr){\n            int mid=(ll+rr)>>1;\n            if(lcp(mid,st)>=len) rr=mid-1;else ll=mid+1;\n        }\n        l1=ll;\n    }\n    if (height[st+1]<len) r1=st;else{\n        int ll=st+1,rr=n;\n        while (ll<=rr){\n            int mid=(ll+rr)>>1;\n            if (lcp(st,mid)>=len) ll=mid+1;else rr=mid-1;\n        }\n        r1=rr;\n    }\n    l=l1;r=r1;\n}\nint main(){\n    freopen(\"2336.in\",\"r\",stdin);\n    n1=read();m1=read();n=1;m=10000;\n    for (int i=1;i<=n1;++i){\n        int tmp=read();\n        for (int j=0;j<tmp;++j) a[n+j]=read(),bl[n+j]=i;n+=tmp;a[n++]=++m;\n        tmp=read();\n        for (int j=0;j<tmp;++j) a[n+j]=read(),bl[n+j]=i;n+=tmp;a[n++]=++m;\n    }int last=n-1;\n    for (int i=1;i<=m1;++i){\n        int tmp=read();\n        data[i].st=n;data[i].len=tmp;\n        for (int j=0;j<tmp;++j) a[n+j]=read();n+=tmp;a[n++]=++m;\n    }n-=1;\n//    printf(\"%d\\n\",n);\n    //for (int i=1;i<=n;++i) printf(\"%d\\n\",a[i]);\n    for (int i=1;i<=n;++i) count[a[i]]=1;\n    for (int i=1;i<=m;++i) count[i]+=count[i-1];\n    for (int i=1;i<=n;++i) rank[i]=count[a[i]];\n    k=0;count[0]=0;\n    for (int p=1;k!=n;p<<=1,m=k){\n        for (int i=1;i<=m;++i) count[i]=0;\n        for (int i=1;i<=n;++i) count[rank[i+p]]++;\n        for (int i=1;i<=m;++i) count[i]+=count[i-1];\n        for (int i=n;i>=1;--i) tmp[count[rank[i+p]]--]=i;\n        for (int i=1;i<=m;++i) count[i]=0;\n        for (int i=1;i<=n;++i) count[rank[i]]++;\n        for (int i=1;i<=m;++i) count[i]+=count[i-1];\n        for (int i=n;i>=1;--i) sa[count[rank[tmp[i]]]--]=tmp[i];\n        memcpy(rank1,rank,sizeof(rank)>>1);\n        rank[sa[1]]=k=1;\n        for (int i=2;i<=n;++i){\n            if (rank1[sa[i]]!=rank1[sa[i-1]]||rank1[sa[i]+p]!=rank1[sa[i-1]+p]) ++k;\n            rank[sa[i]]=k;\n        }\n    }\n    k=0;\n    Log[0]=-1;\n    for (int i=1;i<=n;++i) Log[i]=Log[i>>1]+1;\n    for (int i=1;i<=n;++i){\n        if (rank[i]==1) continue;\n        k=k==0?0:k-1;\n        while (a[i+k]==a[sa[rank[i]-1]+k]) ++k;\n        height[rank[i]]=k;\n    }\n    for (int i=1;i<=n;++i) fmin[i][0]=height[i];\n    for (int j=1;j<=Log[n];++j){\n        for (int i=1;i<=n-(1<<j)+1;++i){\n            fmin[i][j]=min(fmin[i][j-1],fmin[i+(1<<(j-1))][j-1]);\n        }\n    }\n//    for (int i=1;i<=n;++i) printf(\"%d \",sa[i]);printf(\"\\n\");\n//    for (int i=1;i<=n;++i) printf(\"%d \",height[i]);\n    for (int i=1;i<=m1;++i){\n        check(rank[data[i].st],data[i].len);\n        int tmp=0;\n        for (int j=l;j<=r;++j){\n            if (sa[j]>last) continue;//\u8d85\u8fc7\u4e86\u7b54\u6848\u5bfb\u627e\u7684\u8303\u56f4\n            if (visit[bl[sa[j]]]==i) continue; \n            tmp++;ans[bl[sa[j]]]++;visit[bl[sa[j]]]=i;\n        }\n        printf(\"%d\\n\",tmp);\n    }\n    for (int i=1;i<=n1;++i) printf(\"%d \",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1504318121,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2336 \u3010[SCOI2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u5e7f\u4e49\u540e\u7f00\u6811\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\u3002\n\n## \u9898\u76ee\u53d9\u8ff0\n\n\u6709$n$\u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u6709\u4e00\u4e2a\u59d3\u548c\u4e00\u4e2a\u540d\u3002\u8001\u5e08\u4f1a\u70b9\u540d\uff0c\u6bcf\u6b21\u70b9\u540d\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u4eba\u7684\u59d3\u6216\u8005\u540d\u7684\u5b50\u4e32\u4e2d\u6709\u8001\u5e08\u8fd9\u4e2a\u5b57\u7b26\u4e32\u90a3\u4e48\u5fc5\u987b\u8d77\u7acb\u3002\u8bf7\u95ee\u4e00\u6b21\u70b9\u540d\u4f1a\u70b9\u8d77\u51e0\u4e2a\u4eba\uff0c\u6700\u7ec8\u6bcf\u4e2a\u4eba\u4f1a\u8d77\u6765\u51e0\u6b21\u3002\n\n## \u9898\u89e3\n\n\u9996\u5148\u628a\u6240\u6709\u7684\u59d3\u548c\u540d\u8fde\u8d77\u6765\uff0c\u4e2d\u95f4\u653e\u597d\u5206\u9694\u7b26\uff08\u5206\u9694\u7b26\u5fc5\u987b\u4e0d\u4e00\u6837\uff09\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u6811\u5176\u5b9e\u5c31\u662f\u628a\u6240\u6709\u4e32\u7684\u540e\u7f00\u5408\u8d77\u6765\u5efa\u7acb\u4e86\u4e00\u4e2a\u538b\u7f29\u7684Trie\u6811\uff0c\u5c31\u662f\u4e00\u4e2a\u5e7f\u4e49\u540e\u7f00\u6811\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u540d\u4e32\uff0c\u5339\u914d\u5230\u8fd9\u4e2a\u6811\u4e0a\uff0c\u5339\u914d\u7684\u6700\u7ec8\u8282\u70b9\u7684\u5b50\u6811\u662f\u7531\u54ea\u4e9b\u4eba\u7684\u59d3/\u540d\u7ec4\u6210\uff0c\u4eba\u7684\u6570\u91cf\u5c31\u662f\u7b54\u6848\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u6bcf\u4e2a\u4eba\u5728\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u88ab\u7edf\u8ba1\u591a\u5c11\u6b21\u7b54\u6848\u5c31\u662f\u591a\u5c11\u3002\u53ef\u4ee5\u628a\u8be2\u95ee\u7684\u7f16\u53f7\u6302\u5728\u6bcf\u4e2a\u70b9\u4e0a\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u4ece\u4e0b\u5411\u4e0a\uff0c\u7136\u540e\u5c31\u641e\u5b9a\u4e86\u3002\u7b2c\u4e8c\u95ee\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u70b9\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u4e0b\u7a7f\u6807\u8bb0\uff08\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u4eba\uff0c\u5b58\u4e24\u4e2a\u4fe1\u606f\uff0c\u4e00\u662f\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u4e8c\u662f\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u6bcf\u4e2a\u975e\u53f6\u5b50\u7684\u8282\u70b9\u5b58\u50a8\u5f53\u524d\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u4eba\uff09\u3002\n\n## \u4e00\u4e9b\u60f3\u6cd5\n\n\u5f00\u59cb\u60f3\u7684\u65f6\u5019\u662f\u60f3\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u8282\u70b9\u4e0b\u9762\u6709\u591a\u5c11\u79cd\u4eba\uff0c\u4f46\u53d1\u73b0\u8fd9\u6837\u6700\u540e\u90a3\u4e2a\u95ee\u9898\u5e76\u4e0d\u80fd\u628a\u6240\u6709\u7684\u70b9\u5408\u5e76\u8d77\u6765\uff08\u5c31\u662f\u4ece\u5934\u6bcf\u4e2a\u70b9\u90fd\u5408\u5e76\u4e00\u4e0b\uff0c\u8fd9\u6837\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u603b\u70b9\u6570\u4e0d\u662f$O(n\\log_2 n)$\u7ea7\u522b\u7684\u4e86\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e0d\u5bf9\uff09\u3002\u4e8e\u662f\u5c31\u6ca1\u518d\u60f3\u8fc7\u79bb\u7ebf\u4e0b\u6765\u7684\u60f3\u6cd5\u4e86\u3002\n\n## \u4ee3\u7801\n~~\u540e\u7f00\u6811\u603b\u662f\u80fd\u628a\u4e00\u9053\u9898\u53d8\u6210\u7801\u519c\u9898~~\n```cpp\n#include <cstdio>\n#include <map>\n#include <vector>\n\nusing namespace std;\n\nconst int maxLen = 2e5 + 5, maxNode = 2e5 + 5, inf = 1e8, maxChar = 1e4,\n          maxRen = 2e5 + 5, maxQue = 2e5 + 5; //maxRen\u83ab\u540d\u8bbe\u6210 1e4\nstruct SuffixTree {\n\tint curLen, now, actLen, tail;\n\tint start[maxNode], len[maxNode], link[maxNode], curStr[maxLen], tag[maxNode];\n\tmap<int, int> ch[maxNode];\n\tSuffixTree() {\n\t\tnow = tail = 1;\n\t\tactLen = curLen = 0;\n\t\tlen[0] = inf;\n\t}\n\tinline int NewNode(int st, int le, int col) {\n\t\tlink[++tail] = 1;\n\t\tstart[tail] = st;\n\t\tlen[tail] = le;\n\t\tif (col)\n\t\t\ttag[tail] = col;\n\t\treturn tail;\n\t}\n\tvoid Extend(int ins, int belong) {\n\t\tcurStr[++curLen] = ins;\n\t\t++actLen;\n\t\tfor (int last = 1; actLen; ) {\n\t\t\twhile (actLen > len[ch[now][curStr[curLen - actLen + 1]]])\n\t\t\t\tactLen -= len[now = ch[now][curStr[curLen - actLen + 1]]];\n\t\t\tint &son = ch[now][curStr[curLen - actLen + 1]],\n\t\t\t     val = curStr[start[son] + actLen - 1];\n\t\t\tif (!son || val == ins) {\n\t\t\t\tlink[last] = now;\n\t\t\t\tlast = now;\n\t\t\t\tif (!son)\n\t\t\t\t\tson = NewNode(curLen - actLen + 1, inf, belong);\n\t\t\t\telse\n\t\t\t\t\tbreak ;\n\t\t\t} else {\n\t\t\t\tint split = NewNode(start[son], actLen - 1, 0);\n\t\t\t\tch[split][val] = son;\n\t\t\t\tch[split][ins] = NewNode(curLen, inf, belong);\n\t\t\t\tstart[son] += actLen - 1;\n\t\t\t\tlen[son] -= actLen - 1;\n\t\t\t\tlink[last] = son = split;\n\t\t\t\tlast = split;\n\t\t\t}\n\t\t\tif (now == 1)\n\t\t\t\t--actLen;\n\t\t\telse\n\t\t\t\tnow = link[now];\n\t\t}\n\t}\n\tvoid Check() {\n\t\tfor (int pos = 1; pos <= curLen; ++pos)\n\t\t\tprintf(\"%d \", curStr[pos]);\n\t\tprintf(\"\\n\");\n\t\tfor (int NId = 1; NId <= tail; ++NId) {\n\t\t\tprintf(\"id : %d len : %d start : %d\\n\", NId, len[NId], start[NId]);\n\t\t\tfor (map<int, int>::iterator it = ch[NId].begin(); it != ch[NId].end();\n\t\t\t        ++it) {\n\t\t\t\tprintf(\"\tson : %d\\n\", it->second);\n\t\t\t}\n\t\t}\n\t}\n} sft;\nstruct SegmentTree {\n\tint tail, ch[maxNode << 6][2], kind[maxNode << 6], tag[maxNode << 6];\n\tSegmentTree() {\n\t\tch[0][0] = ch[0][1] = kind[0] = tag[0] = 0;\n\t}\n\tvoid PushUp(int now) {\n\t\tkind[now] = kind[ch[now][0]] + kind[ch[now][1]];\n\t}\n\tvoid PushDown(int now) {\n\t\tif (ch[now][0])\n\t\t\ttag[ch[now][0]] += tag[now];\n\t\tif (ch[now][1])\n\t\t\ttag[ch[now][1]] += tag[now];\n\t\ttag[now] = 0;\n\t}\n\tvoid Insert(int &now, int lEP, int rEP, int pos) {\n\t\tif (!now)\n\t\t\tnow = ++tail;\n\t\tif (lEP == rEP)\n\t\t\treturn kind[now] = 1, void();\n\t\tint mid = (lEP + rEP) >> 1;\n\t\tif (pos <= mid)\n\t\t\tInsert(ch[now][0], lEP, mid, pos);\n\t\telse\n\t\t\tInsert(ch[now][1], mid + 1, rEP, pos);\n\t\tPushUp(now);\n\t}\n\tint Query(int now, int lEP, int rEP, int askL, int askR) {\n\t\tif ((!now) || lEP > askR || rEP < askL)\n\t\t\treturn 0;\n\t\tif (lEP <= askL && askR <= rEP)\n\t\t\treturn kind[now];\n\t\tint mid = (lEP + rEP) >> 1;\n\t\treturn Query(ch[now][0], lEP, mid, askL, askR) +\n\t\t       Query(ch[now][1], mid + 1, rEP, askL, askR);\n\t}\n\tvoid Merge(int &uNd, int vNd, int lEP, int rEP) {\n\t\tif (!uNd || !vNd) {\n\t\t\tuNd |= vNd;\n\t\t\treturn ;\n\t\t}\n\t\tif (lEP == rEP) {\n\t\t\ttag[uNd] += tag[vNd];\n\t\t\t//\u8fd9\u91cc\u9700\u8981\u66f4\u65b0 tag\n\t\t\treturn ;\n\t\t}\n\t\tint mid = (lEP + rEP) >> 1;\n\t\tPushDown(uNd), PushDown(vNd);\n\t\tMerge(ch[uNd][0], ch[vNd][0], lEP, mid);\n\t\tMerge(ch[uNd][1], ch[vNd][1], mid + 1, rEP);\n\t\tPushUp(uNd);\n\t}\n} seg;\nint renN, callM, fa[maxNode], rt[maxNode], depth[maxLen],\n    aCall[maxLen], ans1[maxQue], ans2[maxRen];\nvector<int> qry[maxNode];\nvoid dfs1(int now, int from, int dep) {\n\tdep += min(sft.len[now], sft.curLen - sft.start[now] + 1);\n\tdepth[now] = dep;\n\tfa[now] = from;\n\tfor (map<int, int>::iterator it = sft.ch[now].begin(); it != sft.ch[now].end(); ++it)\n\t\tdfs1(it -> second, now, dep);\n}\nvoid run(int *call, int len, int qId) {\n\tint now = 1, pt = 0;\n\twhile (pt < len && ((pt + 1 <= depth[now]\n\t                     && call[pt + 1] == sft.curStr[sft.start[now] + pt - depth[fa[now]]])\n\t                    || (pt + 1 > depth[now] && sft.ch[now][call[pt + 1]]))) {\n\t\tif (pt + 1 > depth[now])\n\t\t\tnow = sft.ch[now][call[pt + 1]];\n\t\t++pt;\n\t}\n\tif (pt == len)\n\t\tqry[now].push_back(qId);\n}\nvoid dfs2(int now, int dep) {\n\tdep += min(sft.len[now], sft.curLen - sft.start[now] + 1);\n\tif (sft.tag[now])\n\t\tseg.Insert(rt[now], 1, renN, sft.tag[now]);\n\tbool isLeaf = 1;\n\tfor (map<int, int>::iterator it = sft.ch[now].begin(); it != sft.ch[now].end(); ++it) {\n\t\tdfs2(it->second, dep);\n\t\tseg.Merge(rt[now], rt[it->second], 1, renN);\n\t\tisLeaf = 0;\n\t}\n\tfor (vector<int>::iterator it = qry[now].begin(); it != qry[now].end(); ++it)\n\t\tans1[*it] = seg.kind[rt[now]],\n\t\t            ++seg.tag[rt[now]]; //\u8fd9\u91cc\u90fd\u662f rt[now]\uff0c\u56e0\u4e3a\u5b9e\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u6839\u8282\u70b9\u52a0\n}\nvoid dfsSeg(int now, int lEP, int rEP) {\n\tif (lEP == rEP) {\n\t\tans2[lEP] = seg.tag[now];\n\t\treturn ;\n\t}\n\tseg.PushDown(now);\n\tint mid = (lEP + rEP) >> 1;\n\tdfsSeg(seg.ch[now][0], lEP, mid);\n\tdfsSeg(seg.ch[now][1], mid + 1, rEP);\n}\n\nint main() {\n\tfreopen(\"name.in\", \"r\", stdin);\n\tfreopen(\"name.out\", \"w\", stdout);\n\tscanf(\"%d%d\", &renN, &callM);\n\tfor (int rId = 1; rId <= renN; ++rId) {\n\t\tint len;\n\t\tscanf(\"%d\", &len);\n\t\tfor (int pos = 1; pos <= len; ++pos) {\n\t\t\tint ch;\n\t\t\tscanf(\"%d\", &ch);\n\t\t\tsft.Extend(ch, rId);\n\t\t}\n\t\tsft.Extend(maxChar + 2 * rId, rId);\n\n\t\tscanf(\"%d\", &len);\n\t\tfor (int pos = 1; pos <= len; ++pos) {\n\t\t\tint ch;\n\t\t\tscanf(\"%d\", &ch);\n\t\t\tsft.Extend(ch, rId);\n\t\t}\n\t\tsft.Extend(maxChar + 2 * rId + 1, rId);\n\t\t//\u8fd9\u91cc\u7684\u5206\u9694\u7b26\u4e0d\u80fd\u548c\u4e0a\u9762\u7684\u4e00\u6837\n\t}\n\tdfs1(1, 0, 0);\n\tfor (int clId = 1; clId <= callM; ++clId) {\n\t\tint len;\n\t\tscanf(\"%d\", &len);\n\t\tfor (int pos = 1; pos <= len; ++pos)\n\t\t\tscanf(\"%d\", &aCall[pos]);\n\t\trun(aCall, len, clId);\n\t}\n\tdfs2(1, 0);\n\tfor (int qId = 1; qId <= callM; ++qId)\n\t\tprintf(\"%d\\n\", ans1[qId]);\n\tdfsSeg(rt[1], 1, renN);\n\tfor (int rId = 1; rId <= renN; ++rId)\n\t\tprintf(\"%d \", ans2[rId]);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n```\n\n\u4f46\u6709\u4e00\u4e9b\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n+ \u9996\u5148\u8fd9\u9053\u9898\u7684\u6bcf\u4e2a\u6570\u7684\u503c\u57df\u662f\u4eba\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff08\u4ee5\u524d\u5199\u503c\u57df\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u5199\u591a\u4e86\u3002\u3002\u3002\uff09\n+ \u5e7f\u4e49\u540e\u7f00\u6811\u7684\u65f6\u5019\u8981\u5728\u63d2\u5165\u7684\u65f6\u5019\u76f4\u63a5\u7ed9\u6bcf\u4e00\u4e2a\u8282\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u4e0d\u8981\u6700\u7ec8\u627e\u5230\u4e00\u4e2a\u540e\u7f00\u540e\u518d\u6309\u8d77\u59cb\u4f4d\u7f6e\u5224\u65ad\u8fd9\u4e2a\u540e\u7f00\u5c5e\u4e8e\u7684\u5b57\u7b26\u4e32\u3002\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u83ab\u540d\u9519\u8bef\uff0c\u653e\u4e2a[\u63d0\u4ea4\u8bb0\u5f55](https://loj.ac/submission/734744)\u3002\u5982\u679c\u77e5\u9053\u8fd9\u4e2a\u95ee\u9898\u7684\u539f\u56e0\u79c1\u4fe1\u6211\u3002update : \u597d\u50cf\u662f\u7528 map \u5b58\u50a8\u513f\u5b50\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\uff0c\u513f\u5b50\u662f\u4e0d\u662f0\uff0c\u4e0d\u5224\u7684\u8bdd\u5bb9\u6613\u51fa\u73b0\u7384\u5b66\u95ee\u9898\u3002\n+ \u5199\u5339\u914d\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u53d8\u91cfnow\uff0c\u6bcf\u6b21\u770b\u518d\u5339\u914d\u4ee5\u4e3a\u4f1a\u4e0d\u4f1a\u8d85\u51fa\u8fd9\u6761\u8fb9\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002\n\n## \u77e5\u8bc6\u70b9\n\n+ \u5e7f\u4e49\u540e\u7f00\u6811\uff0c\u5904\u7406\u591a\u4e2a\u4e32\u5f80\u591a\u4e2a\u4e32\u4e0a\u5339\u914d\u7684\u95ee\u9898\u3002\n+ \u79bb\u7ebf\u7684\u60f3\u6cd5\uff0c\u628a\u8be2\u95ee\u6302\u5728\u70b9\u4e0a\u3002",
        "postTime": 1580572994,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "[SCOI 2012]\u55b5\u661f\u7403\u4e0a\u7684\u70b9\u540d\uff08\u5e7f\u4e49\u540e\u7f00\u6811\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u79bb\u7ebf\uff09"
    }
]