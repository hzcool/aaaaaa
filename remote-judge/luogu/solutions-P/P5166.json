[
    {
        "content": "\u611f\u89c9\u8bc4\u8bba\u533a\u91cc\u8bf4\u7684\u5bf9\uff0c\u8fd9\u9053\u9898\u7684\u96be\u5ea6\u591f\u4e0d\u4e0a\u7d2b\u3002\n\n## \u9898\u9762\u63cf\u8ff0\n\n\u6709 $n$ \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u6709\u82e5\u5e72\u4e2a\u89c2\u5bdf\u5bf9\u8c61\u6216\u6ca1\u6709\uff0c\u4fdd\u8bc1\u89c2\u5bdf\u5bf9\u8c61\u7684\u4e0b\u6807\u5c0f\u4e8e\u89c2\u5bdf\u8005\uff0c\u5f53\u4e00\u4e2a\u4eba\u7684\u89c2\u5bdf\u5bf9\u8c61\u6267\u884c\u547d\u4ee4\u65f6\uff0c\u89c2\u5bdf\u8005\u4e5f\u4f1a\u8ddf\u7740\u6267\u884c\u547d\u4ee4\uff0c\u6bcf\u4e2a\u4eba\u521d\u59cb\u88ab $a_i$ \u4e2a\u4eba\u89c2\u5bdf\u3002\n\n\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u5206\u4e3a\u4e24\u79cd\uff1a\n\n- \u4fee\u6539\uff1a\u4e0b\u6807\u533a\u95f4 $[L,R]$ \u4e2d\u6240\u6709\u4eba\u6dfb\u52a0\u4e00\u4e2a\u89c2\u5bdf\u5bf9\u8c61 $x$\n\n- \u67e5\u8be2\uff1a\u82e5\u4e0b\u6807\u533a\u95f4 $[L,R]$ \u53d7\u5230\u547d\u4ee4\u5e76\u6267\u884c\uff0c\u81f3\u5c11\u8fd8\u9700\u8981\u7ed9\u591a\u5c11\u4e2a\u4eba\u53d1\u5e03\u547d\u4ee4\uff0c\u624d\u80fd\u4f7f\u5f97\u5168\u90e8\u7684\u4eba\u90fd\u6267\u884c\u547d\u4ee4\u3002\n\n$n,q\\leq 3\\times 10^5,\\sum a_i \\leq 10^7$\u3002\n\n## \u9898\u76ee\u5206\u6790\n\n\u6ce8\u610f\u5230\u6bcf\u4e2a\u4eba\u7684\u89c2\u5bdf\u5bf9\u8c61\uff0c\u90fd\u6bd4\u81ea\u8eab\u7684\u4e0b\u6807\u8981\u5c0f\uff0c\u4e5f\u5c31\u8bf4\u660e\u5bf9\u4e8e\u6bcf\u4e2a\u4eba\uff0c\u5728\u4ed6\u540e\u9762\u7684\u4eba\u4e0d\u4f1a\u5bf9\u4ed6\u9020\u6210\u4efb\u4f55\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6b63\u7740\u63a8\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4eba\uff0c\u4ed6\u8981\u4e48\u89c2\u5bdf\u5bf9\u8c61\u6267\u884c\u547d\u4ee4\uff0c\u8981\u4e48\u4ed6\u81ea\u5df1\u989d\u5916\u6536\u5230\u547d\u4ee4\uff0c\u800c\u6211\u4eec\u6309\u7167\u4ece\u524d\u5f80\u540e\u7684\u987a\u5e8f\u6392\u5c31\u4f1a\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4eba\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c\u4ed6\u524d\u9762\u7684\u4eba\u4e00\u5b9a\u90fd\u80fd\u591f\u6267\u884c\u547d\u4ee4\u3002\n\n\u6240\u4ee5\u5f53\u524d\u7684\u8fd9\u4e2a\u4eba\uff0c\u53ea\u8981\u6709\u89c2\u5bdf\u5bf9\u8c61\uff0c\u5c31\u4e00\u5b9a\u4f1a\u6536\u5230\u547d\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u4eba\u5206\u4e3a\u6709\u89c2\u5bdf\u5bf9\u8c61\u7684\u548c\u6ca1\u6709\u89c2\u5bdf\u5bf9\u8c61\uff0c\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u7edf\u8ba1\u5168\u5c40\u6709\u591a\u5c11\u4e2a\u6ca1\u6709\u89c2\u5bdf\u5bf9\u8c61\u7684\u4e14\u4e0d\u5728\u533a\u95f4 $[L,R]$ \u7684\u4eba\u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4f1a\u53d1\u73b0\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u4eba\u662f\u5426\u6709\u89c2\u5bdf\u5bf9\u8c61\uff0c\u4fee\u6539\u64cd\u4f5c\u672c\u8d28\u4e0a\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u8986\u76d6 $1$\uff0c\u67e5\u8be2\u672c\u8d28\u4e0a\u53d8\u6210\u4e86\u67e5\u8be2\u533a\u95f4 $[1,L-1]$ \u548c $[R+1,n]$ \u4e2d $0$ \u7684\u4e2a\u6570,\u76f4\u63a5\u4e0a\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nint read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nconst int N = 3e5+5;\nint n,q,tot=1;\nint a[N]; \nstruct aa{\n\tint lc,rc,sum,tag;\n}node[N*2];\nvoid pushup(int u){\n\tnode[u].sum = node[node[u].lc].sum+node[node[u].rc].sum;\n}\nvoid build(int u,int l,int r){\n\tif(l==r){\n\t\tnode[u].sum = a[l];\n\t\treturn;\n\t}\n\tint mid = (l+r)/2;\n\tnode[u].lc = ++tot;\n\tbuild(node[u].lc,l,mid);\n\tnode[u].rc = ++tot;\n\tbuild(node[u].rc,mid+1,r);\n\tpushup(u);\n}\nvoid lazy_tag(int u,int l,int r){\n\tnode[u].tag = 1;\n\tnode[u].sum = r-l+1;\n}\nvoid pushdown(int u,int l,int r){\n\tint mid = (l+r)/2;\n\tlazy_tag(node[u].lc,l,mid);\n\tlazy_tag(node[u].rc,mid+1,r);\n\tnode[u].tag = 0;\n}\nvoid upd(int u,int l,int r,int ll,int rr){\n\tif(l==ll&&r==rr){\n\t\tlazy_tag(u,l,r);\n\t\treturn;\n\t}\n\tif(node[u].tag){\n\t\tpushdown(u,l,r);\n\t}\n\tint mid = (l+r)/2;\n\tif(rr<=mid){\n\t\tupd(node[u].lc,l,mid,ll,rr);\n\t}else if(ll>mid){\n\t\tupd(node[u].rc,mid+1,r,ll,rr);\n\t}else{\n\t\tupd(node[u].lc,l,mid,ll,mid);\n\t\tupd(node[u].rc,mid+1,r,mid+1,rr);\n\t}\n\tpushup(u);\n}\nint query(int u,int l,int r,int ll,int rr){\n\tif(ll>rr){\n\t\treturn 0;\n\t}\n\tif(l==ll&&r==rr){\n\t\treturn node[u].sum;\n\t}\n\tif(node[u].tag){\n\t\tpushdown(u,l,r);\n\t}\n\tint mid = (l+r)/2;\n\tif(rr<=mid){\n\t\treturn query(node[u].lc,l,mid,ll,rr);\n\t}else if(ll>mid){\n\t\treturn query(node[u].rc,mid+1,r,ll,rr);\n\t}else{\n\t\treturn query(node[u].lc,l,mid,ll,mid)+query(node[u].rc,mid+1,r,mid+1,rr);\n\t}\n}\nint ask(int l,int r){\n\tif(l>r){\n\t\treturn 0;\n\t}\n\treturn r-l+1-query(1,1,n,l,r);\n}\nint main(){\n\tint x,y,z;\n\tn = read();q = read(); \n\tfor(int i=1;i<=n;i++){\n\t\tx = read();\n\t\twhile(x--){\n\t\t\ta[read()]=1;\n\t\t}\n\t}\n\tbuild(1,1,n);\n\tint opt;\n\twhile(q--){\n\t\topt = read();x = read();y = read();\n\t\tif(opt==1){\n\t\t\tcout<<ask(1,x-1)+ask(y+1,n)<<\"\\n\";\n\t\t}else{\n\t\t\tz = read();\n\t\t\tupd(1,1,n,x,y);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1670312740,
        "uid": 369399,
        "name": "yizhiming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010xtq\u7684\u53e3\u4ee4\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5166)\n\n\u8fd9\u9898\u8981\u662f\u641e\u61c2\u5728\u5e72\u4ec0\u4e48\u5176\u5b9e\u4e0d\u96be\uff08\u867d\u7136\u67d0\u4e2a\u82b1\u4e86\u51e0\u4e2a\u5c0f\u65f6\u624d\u641e\u660e\u767d\u7684\u5bb6\u4f19\u4f3c\u4e4e\u6ca1\u8d44\u683c\u8fd9\u4e48\u8bf4\u2026\u2026\uff09\n\n\u5047\u8bbe\u6240\u6709\u4eba\u90fd\u6ca1\u6709\u542c\u5230\u8001\u5e08\u7684\u547d\u4ee4\uff0c\u6211\u4eec\u4ece\u5de6\u5230\u53f3\u8003\u8651\uff0c\u5bf9\u4e8e\u5f53\u524d\u7684\u4eba\uff0c\u5982\u679c\u5b83\u6ca1\u6709\u89c2\u5bdf\u8005\uff0c\u90a3\u4e48\u80af\u5b9a\u8981\u8ba9\u5b83\u542c\u5230\u8001\u5e08\u7684\u6307\u4ee4\u624d\u884c\uff0c\u5982\u679c\u5b83\u6709\u89c2\u5bdf\u8005\uff0c\u90a3\u4e48\u5b83\u7684\u89c2\u5bdf\u8005\u5728\u4e4b\u524d\u5c31\u5df2\u7ecf\u8003\u8651\u8fc7\uff0c\u80af\u5b9a\u5df2\u7ecf\u542c\u5230\u6307\u4ee4\u4e86\uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u542c\u5230\u6307\u4ee4\uff0c\u4e0d\u9700\u8981\u518d\u542c\u4e00\u904d\n\n\u7efc\u4e0a\uff0c\u9700\u8981\u542c\u5230\u6307\u4ee4\u7684\u4eba\u5c31\u662f\u6ca1\u6709\u89c2\u5bdf\u8005\u7684\u4eba\n\n\u4e8e\u662f\u628a\u6709\u89c2\u5bdf\u8005\u7684\u770b\u6210$0$\uff0c\u6ca1\u6709\u89c2\u5bdf\u8005\u7684\u770b\u6210$1$\uff0c\u90a3\u4e48\u4e00\u6b21\u8be2\u95ee$[l,r]$\u5c31\u76f8\u5f53\u4e8e\u8be2\u95ee$[1,l-1]$\u548c$[r+1,n]$\u4e2d$1$\u7684\u603b\u4e2a\u6570\uff0c\u4e00\u6b21\u4fee\u6539\u5c31\u76f8\u5f53\u4e8e\u628a$[l,r]$\u4e2d\u533a\u95f4\u8986\u76d6\u4e3a$0$\n\n\u4e0a\u9762\u4e24\u4e2a\u64cd\u4f5c\u7528\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86\n```cpp\n//minamoto\n#include<bits/stdc++.h>\n#define R register\n#define ls (p<<1)\n#define rs (p<<1|1)\n#define fp(i,a,b) for(R int i=a,I=b+1;i<I;++i)\n#define fd(i,a,b) for(R int i=a,I=b-1;i>I;--i)\n#define go(u) for(int i=head[u],v=e[i].v;i;i=e[i].nx,v=e[i].v)\nusing namespace std;\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline char getc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\nint read(){\n    R int res,f=1;R char ch;\n    while((ch=getc())>'9'||ch<'0')(ch=='-')&&(f=-1);\n    for(res=ch-'0';(ch=getc())>='0'&&ch<='9';res=res*10+ch-'0');\n    return res*f;\n}\nchar sr[1<<21],z[20];int C=-1,Z=0;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\nvoid print(R int x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]='-',x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]='\\n';\n}\nconst int N=3e5+5;\nint sum[N<<2],tag[N<<2],vis[N];\nint n,q,x,y,op,l,r,res;\nvoid pd(int p){\n    if(tag[p]){\n        sum[ls]=sum[rs]=0;\n        tag[ls]=tag[rs]=1;\n        tag[p]=0;\n    }\n}\nvoid build(int p,int l,int r){\n    if(l==r)return (void)(sum[p]=!vis[l]);\n    int mid=(l+r)>>1;\n    build(ls,l,mid),build(rs,mid+1,r);\n    sum[p]=sum[ls]+sum[rs];\n}\nvoid update(int p,int l,int r,int ql,int qr){\n    if(!sum[p])return;\n    if(ql<=l&&qr>=r)return (void)(sum[p]=0,tag[p]=1);\n    int mid=(l+r)>>1;pd(p);\n    if(ql<=mid)update(ls,l,mid,ql,qr);\n    if(qr>mid)update(rs,mid+1,r,ql,qr);\n    sum[p]=sum[ls]+sum[rs];\n}\nint query(int p,int l,int r,int ql,int qr){\n    if(!sum[p])return 0;if(ql<=l&&qr>=r)return sum[p];\n    int mid=(l+r)>>1,res=0;pd(p);\n    if(ql<=mid)res+=query(ls,l,mid,ql,qr);\n    if(qr>mid)res+=query(rs,mid+1,r,ql,qr);\n    return res;\n}\nint main(){\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n    n=read(),q=read();\n    fp(i,1,n){\n        x=read();\n        while(x--)y=read(),vis[y]=1;\n    }build(1,1,n);\n    while(q--){\n        op=read(),l=read(),r=read();\n        if(op==1){\n            res=0;if(l>1)res+=query(1,1,n,1,l-1);\n            if(r<n)res+=query(1,1,n,r+1,n);\n            print(res);\n        }else x=read(),update(1,1,n,l,r);\n    }return Ot(),0;\n}\n\n```",
        "postTime": 1546345274,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5166 \u3010xtq\u7684\u53e3\u4ee4\u3011"
    },
    {
        "content": "\u5982\u679cA\u540c\u5b66\u89c2\u5bdfB\u540c\u5b66\uff0c\u90a3\u4e48\u6211\u4eec\u8fde\u4e00\u6761\u4ece\u70b9A\u5230\u70b9B\u7684\u6709\u5411\u8fb9\u3002\n\n\u5728\u4e0b\u9762\u7684\u9648\u8ff0\u4e2d\uff0c\u6211\u4eec\u5c06\u201cA\u540c\u5b66\u6536\u5230\u6307\u4ee4\u201d\u79f0\u4e3a\u201c\u70b9A\u88ab\u67d3\u8272\u201d\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u9898\u610f\u8f6c\u5316\u4e3a\uff1a\n\n#### \u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5df2\u77e5\u5f53\u4e00\u4e2a\u70b9\u8fde\u5411\u7684\u70b9\u88ab\u67d3\u8272\u65f6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e5f\u88ab\u67d3\u8272\u3002\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n#### \u67e5\u8be2\u64cd\u4f5c\uff1a\u7ed9\u5b9a\u533a\u95f4$[L,R]$\u5185\u7684\u6240\u6709\u70b9\u88ab\u67d3\u8272\uff0c\u90a3\u4e48\u6c42\u8fd8\u9700\u8981\u7ed9\u591a\u5c11\u70b9\u67d3\u8272\uff0c\u624d\u80fd\u4f7f\u6700\u7ec8\u6240\u6709\u70b9\u88ab\u67d3\u8272\u3002\n\n#### \u4fee\u6539\u64cd\u4f5c\uff1a\u7ed9\u5b9a\u533a\u95f4$[L,R]$\u548c$x$\uff0c\u5c06\u7f16\u53f7\u5728\u533a\u95f4$[L,R]$\u5185\u7684\u6240\u6709\u70b9\u8fde\u5411x\u3002\n\n\u4e0b\u9762\u8003\u8651\u505a\u6cd5\u3002\n\n- 20\u5206\uff1a\n\n\t\u5b8c\u5168\u66b4\u529b\u5373\u53ef\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u9996\u5148\u5ffd\u7565\u6240\u6709$[L,R]$\u5185\u7684\u70b9\u548c$[L,R]$\u88ab\u67d3\u8272\u540e\u88ab\u67d3\u8272\u7684\u70b9\u3002\u63a5\u4e0b\u6765\u679a\u4e3e\u6bcf\u4e2a\u70b9\u662f\u5426\u88ab\u9009\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u79cd\u65b9\u6848\u8fdb\u884c\u5224\u5b9a\u662f\u5426\u5408\u6cd5\uff0c\u6700\u540e\u8f93\u51fa\u6700\u5c0f\u7b54\u6848\u3002\n    \n- 50\u5206\uff1a\n\n\t\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76\u6027\u8d28\u3002\n    \n    \u9996\u5148\uff0c\u7531\u4e8e\u8fb9\u53ea\u4f1a\u4ece\u7f16\u53f7\u5927\u7684\u70b9\u8fde\u5230\u7f16\u53f7\u5c0f\u7684\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\n    \n    \u89c2\u5bdf\u6240\u6709\u51fa\u5ea6\u4e3a\u96f6\uff08\u6307\u56fe\u4e2d\u4e0d\u5b58\u5728\u8fd9\u4e2a\u70b9\u8fde\u51fa\u7684\u8fb9\uff09\u7684\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff1a\n    \n    - #### \u5982\u679c\u8fd9\u4e9b\u70b9\u5f53\u4e2d\u7684\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u88ab$[L,R]$\u5305\u542b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5fc5\u987b\u88ab\u67d3\u8272\u3002\n    \t\n        \u8bc1\u660e\uff1a\u7531\u4e8e\u8fd9\u4e2a\u70b9\u6ca1\u6709\u8fde\u51fa\u7684\u8fb9\uff0c\u90a3\u4e48\u5982\u679c\u4efb\u4f55\u5176\u4ed6\u70b9\u88ab\u67d3\u8272\u4e86\uff0c\u8fd9\u4e2a\u70b9\u90fd\u4e0d\u4f1a\u88ab\u67d3\u8272\u3002\n    - #### \u5f53\u6240\u6709\u8fd9\u4e9b\u70b9\u88ab\u67d3\u8272\u4e86\uff0c\u90a3\u4e48\u6240\u6709\u70b9\u90fd\u4f1a\u88ab\u67d3\u8272\u3002\n    \t\n        \u8bc1\u660e\uff1a\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u70b9\uff0c\u5f53\u6240\u6709\u8fd9\u4e9b\u70b9\u88ab\u67d3\u8272\u65f6\uff0c\u8fd8\u6ca1\u6709\u88ab\u67d3\u8272\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\uff0c\u8fd9\u4e2a\u70b9\u6240\u8fde\u5411\u7684\u6240\u6709\u70b9\u90fd\u6ca1\u6709\u88ab\u67d3\u8272\u3002\u6240\u4ee5\uff0c\u8fd9\u4e2a\u70b9\u6240\u8fde\u5411\u7684\u70b9\u6240\u8fde\u5411\u7684\u70b9\u4e5f\u6ca1\u6709\u88ab\u67d3\u8272\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u7531\u4e8e\u70b9\u7684\u6570\u91cf\u662f\u6709\u9650\u7684\uff0c\u6240\u4ee5\u5fc5\u5b9a\u4f1a\u51fa\u73b0\u4e0b\u5217\u60c5\u51b5\u4e4b\u4e00\uff1a\n        - \u8fd9\u4e2a\u70b9\u6240\u8fde\u5411\u7684\u70b9\u6240\u8fde\u5411\u7684\u70b9...\u6240\u8fde\u5411\u7684\u70b9\uff0c\u4e0e\u8fd9\u4e2a\u70b9\u91cd\u5408\uff0c\u6216\u8005\u4e0e\u53e6\u5916\u4e00\u4e2a\u8fd9\u4e2a\u70b9\u6240\u8fde\u5411\u7684\u70b9...\u6240\u8fde\u5411\u7684\u70b9\u91cd\u5408\u3002\u8fd9\u4e0e\u65e0\u73af\u77db\u76fe\u3002\n        - \u8fd9\u4e2a\u70b9\u6240\u8fde\u5411\u7684\u70b9...\u6240\u8fde\u5411\u7684\u70b9\uff0c\u6ca1\u6709\u8fde\u51fa\u7684\u8fb9\u3002\u7531\u4e8e\u6211\u4eec\u524d\u9762\u7684\u63a8\u5bfc\uff0c\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u6ca1\u6709\u67d3\u8272\u3002\u800c\u8fd9\u53c8\u4e0e\u6211\u4eec\u5047\u8bbe\u7684\u524d\u63d0\u77db\u76fe\u3002\n        \n      \u6240\u4ee5\uff0c\u5047\u8bbe\u4e0d\u6210\u7acb\uff01\n    \n  \u4e8e\u662f\uff0c\u6240\u6709\u70b9\u88ab\u67d3\u8272\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662f\u6240\u6709\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\u88ab\u67d3\u8272\u3002\u6240\u4ee5\u8fd9\u9053\u9898\u7684\u8be2\u95ee\u64cd\u4f5c\u5c31\u8f6c\u5316\u4e3a\u4e86\uff1a\u67e5\u8be2\u6709\u591a\u5c11\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\uff0c\u4e0d\u5728\u533a\u95f4$[L,R]$\u5185\u3002\u53ea\u9700\u9996\u5148\u9884\u5904\u7406 \u51fa\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\uff0c\u4fee\u6539\u64cd\u4f5c\u65f6\u79fb\u9664\u6240\u6709\u533a\u95f4\u5185\u7684\u70b9\uff0c\u5747\u53ef\u4ee5$O(n)$\u5904\u7406\u3002\n  \n  50\u5206\u4ee3\u7801\u89c1\u4e0b\u9762\u53c2\u8003\u4ee3\u78011\u3002\n  \n- 70\u5206\uff08\u6240\u6709\u5177\u5907\u7279\u6b8a\u6027\u8d28\u7684\u6570\u636e\u70b9\uff09\uff1a\n\t\n    \u6211\u4eec\u53ef\u4ee5\u9996\u5148$O(m)$\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u662f\u5426\u4e3a\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\u5e76\u8bb0\u5f55\uff0c\u63a5\u4e0b\u6765$O(n)$\u9884\u5904\u7406\u51fa$sum[i]$\uff0c\u4ee3\u8868$1$~$i$\u4e2d\u6709\u591a\u5c11\u4e2a\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\u3002\n    \n    \u5bf9\u4e8e\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u5c06$[L,R]$\u5185\u7684\u6bcf\u4e2a\u70b9\u6807\u8bb0\u4e3a\u51fa\u5ea6\u975e\u96f6\uff0c\u518d\u6839\u636e\u4e4b\u524d\u5904\u7406\u51fa\u7684\u6bcf\u4e2a\u70b9\u7684\u662f\u5426\u5165\u5ea6\u4e3a\u96f6\u6807\u8bb0\u91cd\u65b0\u8ba1\u7b97$sum$\u6570\u7ec4\u3002\u6548\u7387O(n)\n    \n    \u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u5229\u7528\u524d\u7f00\u548c$O(1)$\u67e5\u8be2$[1,L-1]$\u4e0e$[R+1,N]$\u5185\u5171\u6709\u591a\u5c11\u4e2a\u51fa\u5ea6\u975e\u96f6\u7684\u70b9\uff0c\u7136\u540e\u8f93\u51fa\u3002\u6548\u7387$O(1)$\n    \n    \u4f46\u7531\u4e8e\u4fee\u6539\u4e0d\u8d85\u8fc7100\u7ec4\uff0c\u53ef\u4ee5\u5f97\u5230\u90e8\u5206\u5206\u3002\n    \n    70\u5206\u4ee3\u7801\u89c1\u4e0b\u9762\u53c2\u8003\u4ee3\u78012\u3002\n    \n- 100\u5206\uff1a\n\t\n    \u5229\u7528\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6570\u7ec4$a$\uff0c$a[i]$\u4ee3\u8868\u662f\u5426\u51fa\u5ea6\u4e3a\u96f6\uff0c\u5982\u679c\u662f\u5219\u4e3a1\uff0c\u5426\u5219\u4e3a0\u3002\n    \n    \u67e5\u8be2\u64cd\u4f5c\u76f8\u5f53\u4e8e\u67e5\u8be2$[1,L-1]$\u7684\u548c\u52a0\u4e0a$[R+1,N]$\u7684\u548c\u3002\n    \n    \u4fee\u6539\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5c06$[L,R]$\u533a\u95f4\u533a\u95f4\u8986\u76d6\u4e3a0\u3002\n    \n    \u95ee\u9898\u5f97\u89e3\u3002\n    \n    std\u89c1\u4e0b\u9762\u53c2\u8003\u4ee3\u78013\u3002\n    \n\u53c2\u8003\u4ee3\u78011\uff1a\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn=300005;\n\nint d[maxn]; //d\u4ee3\u8868\uff1a\u5f53\u524d\u8282\u70b9\u51fa\u5ea6\u662f\u5426\u4e3a\u96f6\u30021\uff1a\u51fa\u5ea6\u4e3a\u96f6\uff0c0\uff1a\u51fa\u5ea6\u975e\u96f6\n\nint main()\n{\n    int n,q;\n    scanf(\"%d %d\",&n,&q);\n    for(int i=1;i<=n;i++) d[i]=1;\n    for(int i=1;i<=n;i++)\n    {\n        int x,y;\n        scanf(\"%d\",&x);\n        for(int j=1;j<=x;j++)\n        {\n            scanf(\"%d\",&y);\n            d[y]=0; //\u51fa\u5ea6\u975e\u96f6\n        }\n    }\n    for(int i=1;i<=q;i++)\n    {\n        int opt,x,y,z;\n        scanf(\"%d\",&opt);\n        if(opt==1)\n        {\n            int sum=0;\n            scanf(\"%d %d\",&x,&y);\n            for(int j=1;j<x;j++) \n                sum+=d[j];\n            for(int j=y+1;j<=n;j++)\n                sum+=d[j];\n            printf(\"%d\\n\",sum);\n        }\n        if(opt==2)\n        {\n            scanf(\"%d %d %d\",&x,&y,&z);\n            for(int i=x;i<=y;i++) d[i]=0;\n        }\n    }\n    return 0;\n}\n```\n\n\u53c2\u8003\u4ee3\u78012\uff1a\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn=300005;\n\nint d[maxn],s[maxn]; //s:\u524d\u7f00\u548c\n\nint main()\n{\n    int n,q;\n    scanf(\"%d %d\",&n,&q);\n    for(int i=1;i<=n;i++) d[i]=1;\n    for(int i=1;i<=n;i++)\n    {\n        int x,y;\n        scanf(\"%d\",&x);\n        for(int j=1;j<=x;j++)\n        {\n            scanf(\"%d\",&y);\n            d[y]=0;\n        }\n    }\n    for(int i=1;i<=n;i++) s[i]=s[i-1]+d[i];\n    for(int i=1;i<=q;i++)\n    {\n        int opt,x,y,z;\n        scanf(\"%d\",&opt);\n        if(opt==1)\n        {\n            int sum=0;\n            scanf(\"%d %d\",&x,&y);\n            sum=s[x-1]+s[n]-s[y];\n            printf(\"%d\\n\",sum);\n        }\n        if(opt==2)\n        {\n            scanf(\"%d %d %d\",&x,&y,&z);\n            for(int i=x;i<=y;i++) d[i]=0; \n            for(int i=1;i<=n;i++) s[i]=s[i-1]+d[i]; //\u4fee\u6539\u64cd\u4f5c\u540e\uff0c\u91cd\u65b0\u8ba1\u7b97\u524d\u7f00\u548c\n        }\n    }\n    return 0;\n}\n```\n\n\u53c2\u8003\u4ee3\u78013\uff1a\n```\n#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nconst int maxn=900005;\n\nstruct Node //\u7ebf\u6bb5\u6811\u8282\u70b9\n{\n    int left, right;\n    int sum, lazy;\n}a[maxn];\n\nint ab[maxn],x,y,z,opt,d[maxn];\nint n,q;\n\nvoid buildtree(int id, int l, int r)\n{\n    a[id].left=l; a[id].right=r; a[id].lazy=0;\n    if(l==r)\n    {\n        if(d[l]==1)\n            a[id].sum=0;\n        else\n            a[id].sum=1;\n        return;\n    }\n    int mid=(l+r)/2;\n    buildtree(id<<1,l,mid);\n    buildtree(id<<1|1,mid+1,r);\n    a[id].sum=a[id<<1].sum+a[id<<1|1].sum;\n}\n\nvoid pushdown(int id)\n{\n    if(a[id].lazy==1)\n    {\n        a[id].sum=0;\n        a[id<<1].lazy=1;\n        a[id<<1|1].lazy=1;\n        a[id].lazy=0;\n    }\n}\n\nint query(int id, int l, int r)\n{\n    if(a[id].left==l && a[id].right==r)\n    {\n        if(a[id].lazy==0)\n            return a[id].sum;\n        else\n            return 0;\n    }\n    pushdown(id);\n    if(r<=a[id<<1].right) return query(id<<1,l,r);\n    else if(l>=a[id<<1|1].left) return query(id<<1|1,l,r);\n    else\n    {\n        return query(id<<1,l,a[id<<1].right)+query(id<<1|1,a[id<<1|1].left,r);\n    }\n}\n\nvoid change(int id, int l, int r)\n{\n    if(a[id].left==l && a[id].right==r)\n    {\n        a[id].lazy=1;\n        return;\n    }\n    pushdown(id);\n    if(r<=a[id<<1].right) change(id<<1,l,r);\n    else if(l>=a[id<<1|1].left) change(id<<1|1,l,r);\n    else\n    {\n        change(id<<1,l,a[id<<1].right);\n        change(id<<1|1,a[id<<1|1].left,r);\n    }\n    a[id].sum=(a[id<<1].lazy==0?a[id<<1].sum:0)+(a[id<<1|1].lazy==0?a[id<<1|1].sum:0);\n}\n\nint main()\n{\n    scanf(\"%d %d\",&n,&q);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&ab[i]);\n        for(int j=1;j<=ab[i];j++)\n        {\n            scanf(\"%d\",&x);\n            d[x]=1;\n        }\n    }\n    buildtree(1,1,n);\n    for(int i=1;i<=q;i++)\n    {\n        scanf(\"%d\",&opt);\n        if(opt==1)\n        {\n            scanf(\"%d %d\",&x,&y);\n            printf(\"%d\\n\",query(1,1,n)-query(1,x,y));\n        }\n        else\n        {\n            scanf(\"%d %d %d\",&x,&y,&z);\n            change(1,x,y);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1545301198,
        "uid": 38212,
        "name": "mydiplomacy",
        "ccfLevel": 9,
        "title": "xtq\u7684\u53e3\u4ee4-\u8d5b\u540e\u9898\u89e3"
    },
    {
        "content": "[**\u539f\u9898\u4f20\u9001\u95e8**](https://www.luogu.com.cn/problem/P5166)\n\n# \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4e00\u4e2a DAG\uff0c\u6709\u5982\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. \u7ed9\u7f16\u53f7\u4e3a $[l, r]$ \u7684\u70b9\u67d3\u8272\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u67d3\u8272\uff0c\u90a3\u4e48\u80fd\u5230\u8fbe\u5979\u7684\u70b9\u4e5f\u5c06\u88ab\u67d3\u8272\uff0c\u6c42\u81f3\u5c11\u9700\u8981\u518d\u7ed9\u51e0\u4e2a\u70b9\u67d3\u8272\u624d\u80fd\u4f7f\u6574\u5f20\u56fe\u88ab\u67d3\u8272\uff1b\n2. \u4ece\u7f16\u53f7\u4e3a $[l, r]$ \u7684\u70b9\u5411\u7f16\u53f7\u4e3a $x$ \u7684\u70b9\u8fde\u8fb9\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u5bf9\u4e8e\u64cd\u4f5c 1\uff1a\u6211\u4eec\u8003\u8651\uff0c\u4e0d\u5728 $[l, r]$ \u4e2d\u7684\u51fa\u5ea6\u4e3a $0$ \u7684\u70b9\u5fc5\u7136\u9700\u8981\u88ab\u67d3\u8272\uff1b\u7531\u4e8e\u662f DAG\uff0c\u56fe\u4e2d\u65e0\u73af\uff0c\u6545\u4ece\u4efb\u610f\u4e00\u70b9\u8d70\u51fa\u7684\u8def\u5f84\u5fc5\u7136\u4f1a\u8d70\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a $0$ \u7684\u70b9\uff0c\u6545\u6b64\u65f6\u5168\u90e8\u70b9\u88ab\u67d3\u8272\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u662f\u5426\u4e3a $0$\uff0c\u6545\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u51fa\u5ea6\uff0c\u5bf9\u4e8e\u64cd\u4f5c 2 \u53ea\u9700\u8981\u5224\u65ad\u5e76\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002\n\n# Code\n\n```cpp\n# define _CRT_SECURE_NO_WARNINGS\n# include <cstdio>\n\ntypedef signed int D;\ntypedef short unsigned int HU;\ntypedef long unsigned int LU;\nenum Max { N = (const LU)3e5 };\n\nclass BBT {\n\tLU L, R;\npublic:\n\tbool x[N + 1];\nprivate:\n\tLU sum[N + 1];\n\tinline const LU middle(const LU l, const LU r) const { return (l + r) / 2; }\n\tinline const void upto(const LU l, const LU r) {\n\t\tconst LU x(middle(l, r));\n\t\tsum[x] = this->x[x];\n\t\tif (l < x) sum[x] += sum[middle(l, x - 1)];\n\t\tif (r > x) sum[x] += sum[middle(x + 1, r)];\n\t}\n\tinline const void clear() {\n\t\tfor (register LU i(0); i <= N; ++i) x[i] = true;\n\t}\n\tconst void _build(const LU l, const LU r) {\n\t\tconst LU x(middle(l, r));\n\t\tif (l < x) _build(l, x - 1);\n\t\tif (r > x) _build(x + 1, r);\n\t\tupto(l, r);\n\t}\n\tconst void modify(const LU tl, const LU tr, const LU l, const LU r) {\n\t\tconst LU x(middle(l, r));\n\t\tif (!sum[x]) return;\n\t\tif (tl <= x and x <= tr) this->x[x] = false;\n\t\tif (tl < x and l < x) modify(tl, tr, l, x - 1);\n\t\tif (tr > x and r > x) modify(tl, tr, x + 1, r);\n\t\tupto(l, r);\n\t}\n\tinline const LU query(const LU tl, const LU tr, const LU l, const LU r) const {\n\t\tconst LU x(middle(l, r));\n\t\tif (!sum[x]) return 0;\n\t\tif (tl <= l and r <= tr) return sum[x];\n\t\tLU res(0);\n\t\tif (tl <= x and x <= tr) res += this->x[x];\n\t\tif (tl < x and l < x) res += query(tl, tr, l, x - 1);\n\t\tif (tr > x and r > x) res += query(tl, tr, x + 1, r);\n\t\treturn res;\n\t}\npublic:\n\tBBT() {\n\t\tclear();\n\t}\n\tinline const void build(const LU l, const LU r) {\n\t\t_build(L = l, R = r);\n\t}\n\tinline const void modify(const LU l, const LU r) {\n\t\tmodify(l, r, L, R);\n\t}\n\tinline const LU query(const LU l, const LU r) {\n\t\treturn query(l, r, L, R);\n\t}\n};\n\nLU n, q;\nBBT tree;\n\nD main() {\n\tD t;\n\tt = scanf(\"%lu%lu\", &n, &q);\n\tfor (register LU i(0); i < n; ++i) {\n\t\tLU a; t = scanf(\"%lu\", &a);\n\t\tfor (register LU j(0); j < a; ++j) {\n\t\t\tLU u; t = scanf(\"%lu\", &u);\n\t\t\ttree.x[u] = false;\n\t\t}\n\t}\n\ttree.build(1, n);\n\tfor (register LU i(0); i < q; ++i) {\n\t\tHU type; t = scanf(\"%hu\", &type);\n\t\tswitch (type) {\n\t\tcase 1: {\n\t\t\tLU l, r; t = scanf(\"%lu%lu\", &l, &r);\n\t\t\tprintf(\"%lu\\n\", tree.query(1, n) - tree.query(l, r));\n\t\t\tbreak;\n\t\t}\n\t\tcase 2: {\n\t\t\tLU l, r, x; t = scanf(\"%lu%lu%lu\", &l, &r, &x);\n\t\t\ttree.modify(l, r);\n\t\t\tbreak;\n\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1593770065,
        "uid": 236807,
        "name": "Mitama",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5166 \u3010xtq\u7684\u53e3\u4ee4\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u677f\u5b50\u4e86\uff0c\u533a\u95f4\u63a8\u5e73 $0$ \u533a\u95f4\u6c42\u548c\u3002\n\n\u597d\u6076\u5fc3\u554a\uff0c\uff0ctag \u4e60\u60ef\u53d8 $0$\uff0c\u7136\u540e\u8fd9\u9053\u9898\u56e0\u4e3a\u6709 $0$ \u6240\u4ee5\u4e0d\u884c\u3002\u3002\u3002\n\n\u6700\u540e\u8bf4\u8bf4\u81ea\u5df1\u7684\u60f3\u6cd5\uff1a\u624b\u5199\u5e73\u8861\u6811\u7ef4\u62a4\u73c2\u6735\u8389\u6811\u533a\u95f4\u957f\u5ea6\u548c\u6216\u8bb8\u53ef\u4ee5\u505a\u5230\u968f\u673a\u6570\u636e\u5355\u6b21\u64cd\u4f5c $O(\\log\\log n)$\uff1f\u5373\u53ea\u7ef4\u62a4\u6781\u957f\u8fde\u7eed\u6bb5\u4e3a $1$ \u7684\uff0c\u7136\u540e\u5bf9\u4e8e\u533a\u95f4\u67e5\u8be2\u76f4\u63a5\u6c42 $[l,r]$ \u5185\u7684\u6781\u957f\u8fde\u7eed\u6bb5\u957f\u5ea6\u548c\uff08\u8fb9\u89d2\u5206\u7c7b\u8ba8\u8bba\uff09\u3002\u590d\u6742\u5ea6\u5728\u6700\u5dee\u6570\u636e\u4e0b\u4f3c\u4e4e\u90fd\u662f\u5bf9\u7684 $O(\\log n)$\u3002\u3002\u3002\n\n---\n\nUPD\uff1a\u6b21\u5929\u60f3\u5230\u4e00\u79cd\u6811\u72b6\u6570\u7ec4\u505a\u6cd5\u3002\n\n\u539f\u672c\u6811\u72b6\u6570\u7ec4\u53ef\u80fd\u5f88\u96be\uff08\uff1f\u7ef4\u62a4\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\uff0c\u4f46\u662f\u8fd9\u9898\u6709\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff1a\u533a\u95f4\u63a8\u5e73\u7684\u662f $0$\u3002\u8fd9\u5c31\u610f\u5473\u7740\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u53ea\u7528\u64cd\u4f5c\u4e00\u6b21\uff08\u56e0\u4e3a $0$ \u5bf9\u533a\u95f4\u548c\u6ca1\u6709\u5f71\u54cd\uff09\u3002\u8fd9\u5c31\u610f\u5473\u7740\u53ef\u4ee5\u628a\u533a\u95f4\u6240\u6709\u7684 $1$ \u63d0\u53d6\u51fa\u6765\u7136\u540e\u6811\u72b6\u6570\u7ec4\u66b4\u529b\u4fee\u6539\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u6570\u6700\u591a\u88ab\u64cd\u4f5c $1$ \u6b21\uff0c\u6240\u4ee5\u4fee\u6539\u7684\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\uff0c\u5747\u644a\u4e0b\u6765\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c $O(\\log n)$\u3002\u81f3\u4e8e\u67e5\u8be2\u64cd\u4f5c\u76f4\u63a5\u4e0a\u6c42\u548c\u4e25\u683c $O(\\log n)$\u3002\n\n\u5982\u4f55\u53d6\u51fa\u533a\u95f4\u4e2d\u6240\u6709\u7684 $1$?\u8fd9\u4e2a\u7528\u4e2a\u5e76\u67e5\u96c6\u5c31\u597d\u4e86\u3002\n\n\u5173\u952e\u4ee3\u7801\uff1a\n\n```cpp\nw=f[n+1]=n+1;\n\tfor(i=n;i>=1;i--)\n\t\tf[i]=w=(a[i]=!a[i])?i:w;\n\tfor(i=1;i<=n;i++)\n\t\tbit[i]=(pre[i]=pre[i-1]+a[i])-pre[i-lowbit(i)];\n\tsum=pre[n];\n\twhile(m--)\n\t{\n\t\topt=read(),l=read(),r=read();\n\t\tif(opt==2)\n\t\t{\n\t\t\tfor(read(),i=find(l);i<=r;i=find(i))\n\t\t\t\tsum--,add(i,-1),f[i]=find(f[i+1]);\n\t\t}\n\t\telse\n\t\t\tprintf(\"%d\\n\",sum-(ask(r)-ask(l-1)));\n\t}\n```\n\n\u597d\u5199\u597d\u8bb0\u5e38\u6570\u5c0f\u54df~",
        "postTime": 1592128009,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5166 \u3010xtq\u7684\u53e3\u4ee4\u3011"
    },
    {
        "content": "\u672c\u849f\u84bb\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3\uff0c\u6709\u7684\u5199\u7684\u592a\u7c97\u7565\u8bf7\u5927\u5bb6\u591a\u591a\u5305\u6db5~~\n~~\u8fd9\u662f\u6211\u89c1\u8fc7\u4ee3\u7801\u6700\u77ed\u7684\u7d2b\u9898~~\n\u597d\uff0c\u6211\u4eec\u8fdb\u5165\u6b63\u9898\n\u9996\u5148\u6765\u8bf4\u4e00\u4e0b\u7b2c\u4e00\u611f\u53d7\uff1aq\u6b21\u8be2\u95ee\u548c\u4fee\u6539\uff0c\u8fd8\u662f\u8fde\u7eed\u533a\u95f4\uff0c\u5f53\u7136\u662f\u7ebf\u6bb5\u6811\u5566\n\u521a\u5f00\u59cb\u7684\u65f6\u5019\u4e4d\u4e00\u770b\uff0c\u4ec0\u4e48\u89c2\u5bdf\u5bf9\u8c61\u3001\u7f16\u53f7\u5440\u4e00\u5927\u5806\uff0c\u600e\u4e48\u770b\u600e\u4e48\u9ebb\u70e6\u3002\u8fd9\u4e2a\u65f6\u5019\u4ee5\u56fe\u7684\u5f62\u5f0f\u6765\u753b\u5c31\u80fd\u8fce\u5203\u800c\u89e3\u4e86\u3002\n\u82e5i\u53f7\u540c\u5b66\u89c2\u5bdfj\u53f7\u540c\u5b66\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8fde\u8fb9j->i\u3002\u6211\u4eec\u5148\u8003\u8651\u5982\u4f55\u4ee5\u6700\u5c11\u7684\u4eba\u6570\u4f7f\u5f97\u6240\u6709\u4eba\u90fd\u5f00\u59cb\u52a0\u901f\u3002\u6211\u4eec\u60ca\u5947\u7684\u53d1\u73b0\uff0c\u597d\u50cf\u53ea\u9700\u8981\u8ba9\u6240\u6709\u5165\u5ea6\u4e3a\u96f6\u7684\u540c\u5b66\u542c\u5230\u6307\u4ee4\u5373\u53ef\uff0c\u800c\u4e14\u8fd9\u4e00\u5b9a\u662f\u6700\u5c11\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u6bd4\u8fd9\u4e2a\u8fd8\u5c11\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u540d\u5165\u5ea6\u4e3a\u96f6\u7684\u540c\u5b66\uff0cta\u6ca1\u6709\u76f4\u63a5\u542c\u5230\u6307\u4ee4\uff0c\u800c\u4e14ta\u4e5f\u4e0d\u53ef\u80fd\u95f4\u63a5\u7684\u5f97\u5230\u6307\u4ee4\uff0c\u90a3\u4e48ta\u5c31\u4e0d\u4f1a\u52a0\u901f\u3002\n\u7ecf\u8fc7\u5982\u4e0a\u7684\u5206\u6790\u53d1\u73b0\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u8bb0\u5f55\u8c01\u89c2\u5bdf\u8c01\uff0c\u800c\u53ea\u9700\u8981\u77e5\u9053\u8c01\u7684\u5165\u5ea6\u4e3a\u96f6\u3002\u6211\u4eec\u7528in\u6570\u7ec4\u6765\u8868\u793a\u5176\u5165\u5ea6\u662f\u5426\u4e3a\u96f6\u3002\n\u968f\u540e\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5177\u4f53\u95ee\u9898\uff1a\n1.\u4fee\u6539\uff1a\u4eceL\u5230R\u90fd\u6dfb\u52a0\u88ab\u89c2\u5bdf\u7684\u540c\u5b66X\u3002\u4e8b\u5b9e\u4e0a\u6211\u4eec\u4e0d\u7528\u7ba1X\u662f\u591a\u5c11\uff0c\u53ea\u9700\u8981\u8ba9in[L]~in[R] = 0\u5373\u4ed6\u4eec\u7684\u5165\u5ea6\u90fd\u4e0d\u4e3a\u96f6\u3002\n2.\u8be2\u95ee\uff1a\u4eceL\u5230R\u540c\u5b66\u90fd\u76f4\u63a5\u5f97\u5230\u6307\u4ee4\uff0c\u8f93\u51fa\u6700\u5c11\u4eba\u6570\u4f7f\u5f97\u8ba9\u6240\u6709\u4eba\u90fd\u52a0\u901f\u3002\u6211\u4eec\u8fd8\u662f\u6700\u5f00\u59cb\u7684\u7b56\u7565\uff0c\u53ea\u9700\u6240\u6709\u5165\u5ea6\u4e3a\u96f6\u7684\u540c\u5b66\u5f97\u5230\u6307\u4ee4\uff0c\u4f46\u662f\u73b0\u5728\u5904\u4e8eL\u5230R\u7684\u540c\u5b66\u90fd\u76f4\u63a5\u5f97\u5230\u4e86\u6307\u4ee4\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u53d8\u6210\u4e86\u603b\u5171\u7684\u51cf\u53bbL\u5230R\u7684\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u6765\u5c31OK\u4e86\n\u9644\u4e0a\u4ee3\u7801\uff1a\n```\n# include <bits/stdc++.h>\n# define MAXN 300005\n# define mid ((l + r) >> 1)\n# define left (2 * rt)\n# define right (2 * rt + 1)\nusing namespace std;\n\nstruct Node {\n    int ans, lazy;\n} tree[4 * MAXN];\n\nint n, T;\nint in[MAXN];\n\nvoid build(int rt, int l, int r) {\n    if (l == r) {\n        tree[rt].ans = in[l];\n        return;\n    }\n    build(left, l, mid);\n    build(right, mid + 1, r);\n    tree[rt].ans = tree[left].ans + tree[right].ans;\n}\n\nvoid downmark(int rt, int l, int r) {\n    if (tree[rt].lazy == 0) return;\n    tree[left].ans = 0;\n    tree[right].ans = 0;\n    tree[left].lazy = 1;\n    tree[right].lazy = 1;\n    tree[rt].lazy = 1;\n}\n\nvoid update(int rt, int l, int r, int p, int q) {\n    if (l == p && r == q) {\n        tree[rt].ans = 0, tree[rt].lazy = 1;\n        return;\n    }\n    downmark(rt, l, r);\n    if (q <= mid) update(left, l, mid, p, q);\n    else if (p > mid) update(right, mid + 1, r, p, q);\n    else {\n        update(left, l, mid, p, mid);\n        update(right, mid + 1, r, mid + 1, q);\n    }\n    tree[rt].ans = tree[left].ans + tree[right].ans;\n}\n\nint query(int rt, int l, int r, int p, int q) {\n    if (l == p && r == q) return tree[rt].ans;\n    downmark(rt, l, r);\n    if (q <= mid) return query(left, l, mid, p, q);\n    else if (p > mid) return query(right, mid + 1, r, p, q);\n    else return query(left, l, mid, p, mid) + query(right, mid + 1, r, mid + 1, q);\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &T);\n    for (int i = 1; i <= n; i++) in[i] = 1;\n    int x, y;\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", &x);\n        for (int j = 1; j <= x; j++) {\n            scanf(\"%d\", &y);\n            in[y] = 0;\n        }\n    }\n    build(1, 1, n);\n    int f, a, b, k;\n    while (T--) {\n        scanf(\"%d\", &f);\n        if (f == 1) {\n            scanf(\"%d%d\", &a, &b);\n            printf(\"%d\\n\", query(1, 1, n, 1, n) - query(1, 1, n, a, b));\n        }\n        if (f == 2) {\n            scanf(\"%d%d%d\", &a, &b, &k);\n            update(1, 1, n, a, b);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1575542460,
        "uid": 116754,
        "name": "AK_IOI\u7684\u742a\u742a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5166 \u3010xtq\u7684\u53e3\u4ee4\u3011"
    }
]