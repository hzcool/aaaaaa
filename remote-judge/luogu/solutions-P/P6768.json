[
    {
        "content": "# \u4e00 \u89e3\u9898\u7b97\u6cd5\n\u672c\u9898\u6240\u7528\u7684\u7b97\u6cd5\u662f\u6700\u77ed\u8def\u3001\u4e8c\u5206\u7b54\u6848\u3001\u7f51\u7edc\u6700\u5927\u6d41\u3002\u6b64\u5904\u6700\u77ed\u8def\u4f7f\u7528 Floyd \u7b97\u6cd5\uff0c\u6700\u5927\u6d41\u4f7f\u7528 Dinic \u7b97\u6cd5\u3002\n# \u4e8c \u89e3\u9898\u65b9\u6cd5\n### \u5efa\u56fe\uff1a\n\u7f51\u7edc\u6d41\u95ee\u9898\u4e2d**\u5efa\u56fe**\uff08\u672a\u77e5\u95ee\u9898\u5df2\u77e5\u5316\uff09\u5f88\u91cd\u8981\uff0c\u90a3\u4e48\u8fd9\u9898\u5e94\u8be5\u600e\u4e48\u5efa\u56fe\u5462\uff1f\n\n\u5148\u5206\u6790\u9898\u76ee\uff0c\u9898\u76ee\u8981\u6c42\u6700\u5c0f\u65f6\u95f4\uff0c\u6240\u4ee5\u80af\u5b9a\u7b26\u5408\u4e8c\u5206\u7b54\u6848\u7684\u6027\u8d28\u3002\u5148\u62c6\u70b9\uff0c\u628a\u725b\u68da\u548c\u96e8\u68da\u62c6\u5f00\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u4e8c\u5206\u5230\u7684\u65f6\u95f4\uff0c\u5982\u679c\u67d0\u4e24\u70b9\u4e4b\u95f4\u53ef\u4ee5\u5728\u8fd9\u4e2a\u65f6\u95f4\u5185\u5230\u8fbe\uff0c\u5219\u5efa\u8d77\u4e00\u6761\u65e0\u9650\u6d41\u91cf\u7684\u8fb9\u3002\u7136\u540e\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff0c\u5230\u6bcf\u4e2a\u725b\u68da\u5efa\u4e00\u6761\u8fb9\u6743\u4e3a\u725b\u7684\u6570\u91cf\u7684\u8fb9\uff0c\u6700\u540e\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9\uff0c\u6bcf\u4e2a\u96e8\u68da\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a\u96e8\u68da\u5bb9\u91cf\u7684\u8fb9\u5230\u6c47\u70b9\u3002\n### \u201c\u68c0\u6d4b\u201d\u51fd\u6570\uff1a\n\u4f17\u6240\u5468\u77e5\uff0c\u4e8c\u5206\u7b54\u6848\u4e2d\u6709\u4e00\u4e2a\u68c0\u6d4b\u51fd\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u600e\u4e48\u5199\u5462\uff1f\n\n\u6bcf\u6b21\u8dd1\u4e00\u4e0b\u6700\u5927\u6d41\u7b97\u6cd5\uff0c\u5982\u679c\u6d41\u91cf\u5927\u4e8e\u603b\u725b\u91cf\u5219\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047\u3002\n# \u4e09 \u53c2\u8003\u4ee3\u7801\n\u6211\u505a\u8fd9\u5230\u9898\u7684\u65f6\u5019\u6700\u5927\u6d41\u5199\u7684\u4e0d\u592a\u719f\u7ec3\uff0c\u662f\u7167\u7740\u9898\u89e3\u5199\u7684\uff08\u5e76\u975e\u6284\uff0c\u54ea\u91cc\u501f\u9274\u4ee3\u7801\u4e2d\u6211\u4f1a\u5c3d\u91cf\u6ce8\u660e\uff09\uff0c\u6240\u4ee5\u6211\u7684\u4ee3\u7801\u548c\u4e00\u4e9b\u9898\u89e3\u4f1a\u6bd4\u8f83\u76f8\u4f3c\u3002\u8fd9\u662f\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#define ll long long\n#define maxn 4100\n#define maxm 16000\n#define inf 100000000000000000\nusing namespace std;\nint n, m, cnt = 1, S, T;\nll ans = inf, sum;\nint cow[maxn], house[maxn], head[maxn], nlast[maxn];\nll dis[maxn][maxn];\nll Min(ll x, ll y) { return x <= y ? x : y; }\nstruct edge\n{\n\tint to, next;\n\tll f;\n}e[maxm << 3];\nvoid add_edge(int f, int t, ll fl)\n{\n\te[++cnt] = (edge){t, head[f], fl};\n\thead[f] = cnt;\n\te[++cnt] = (edge){f, head[t], 0};\n\thead[t] = cnt;\n}\nvoid input()\n{\n\tscanf(\"%d %d\", &n, &m);\n\tS = 2 * n + 1;\n\tT = 2 * n + 2;\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\tscanf(\"%d %d\", &cow[i], &house[i]);\n\t\tsum += (ll)cow[i];\n\t}\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t\tdis[i][j] = inf;\n\tfor (int i = 1; i <= n; ++i)\n\t\tdis[i][i] = 0;\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tint from, to, Dis;\n\t\tscanf(\"%d %d %d\", &from, &to, &Dis);\n\t\tdis[from][to] = Min(dis[from][to], Dis);\n\t\tdis[to][from] = Min(dis[to][from], Dis);\n        //\u8fd9\u91cc\u501f\u9274\u4e86\u9898\u89e3\n\t}\n}\nvoid init()\n{\n\tmemset(head, 0, sizeof(head));\n\tmemset(nlast, 0, sizeof(nlast));\n\tcnt = 1;\n}\nvoid Floyd()\n{\n\tfor (int k = 1; k <= n; ++k)\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tfor (int j = 1; j <= n; ++j)\n\t\t\t\tdis[i][j] = Min(dis[i][j], dis[i][k] + dis[k][j]);\n//\tfor (int i = 1; i <= n; ++i)\n//\t{\n//\t\tfor (int j = 1; j <= n; ++j)\n//\t\t\tprintf(\"%lld \", dis[i][j]);\n//\t\tputs(\" \");\n//\t}\n}\nint dist[maxn];\nbool vis[maxn];\nbool bfs()\n{\n\t//bfs\u5224\u65ad\u8fde\u901a\u6027\uff0c\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u70b9\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\n\tmemset(dist, 0, sizeof(dist));\n\tmemset(vis, 0, sizeof(vis));\n\tqueue <int> q;\n\tvis[T] = true;\n\tdist[T] = 1;\n\tq.push(T);\n\twhile (!q.empty())\n\t{\n\t\tconst int now = q.front();\n\t\t//printf(\"%d \", now);\n\t\tq.pop();\n\t\tfor (int i = head[now]; i; i = e[i].next)\n\t\t{\n\t\t\tconst int to = e[i].to;\n\t\t\tif (vis[to] == false && e[i ^ 1].f)\n\t\t\t{//\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u53cd\u5411\u8fb9\u8fd8\u6709\u6b8b\u91cf\uff0c\u800c\u4e14\u8fd9\u4e2a\u8282\u70b9\u6ca1\u88ab\u8bbf\u95ee\u8fc7\n\t\t\t\tvis[to] = true;\n\t\t\t\tdist[to] = dist[now] + 1;\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn vis[S];\n}\nll Dinic(int x, ll f)\n{\n\tif (x == T) return f;\n\t//\u5982\u679c\u8fd9\u4e2a\u70b9\u5c31\u662f\u7ec8\u70b9\n\tll now = f;\n\t//now\u8868\u793a\u5269\u4f59\u6d41\u91cf\n\tfor (int i = nlast[x]; i; i = e[i].next)\n\t{\n\t\tconst int to = e[i].to;\n\t\tif (dist[to] == dist[x] - 1 && e[i].f)\n\t\t{//Dinic\u7684\u589e\u5e7f\u539f\u5219\u4e3a\u5148\u589e\u5e7f\u8f83\u77ed\u7684\u589e\u5e7f\u8def\n\t\t\tconst ll a = Dinic(to, Min(now, e[i].f));\n\t\t\t//a\u8bb0\u5f55\u589e\u5e7f\u8def\u4e0a\u6240\u6709\u8fb9\u7684\u6700\u5c0f\u503c\n\t\t\te[i].f -= a;\n\t\t\t//e[i ^ 1] \u4e3a\u53cd\u6094\u8fb9\uff0c\u5373\u53ef\u4ee5\u9000\u56de\u6d41\u91cf\n\t\t\te[i ^ 1].f += a;\n\t\t\tnow -= a;\n\t\t\t//\u589e\u5e7f\u51fa\u53bb\u5269\u4f59\u6d41\u91cf\u51cf\u5c11\n\t\t\tif (now == 0) return f;\n\t\t}\n\t}\n\treturn f - now;\n\t//\u8fd4\u56de\u8fd9\u6761\u8def\u5f84\u80fd\u589e\u5e7f\u7684\u91cf\n}\nll maxflow()\n{\n\tll now = 0;\n\twhile (bfs())\n\t{\n\t\tfor (int i = 1; i <= n * 2 + 2; ++i)\n\t\t\tnlast[i] = head[i];\n\t\tnow += Dinic(S, inf);\n\t}\n\treturn now;\n}\nbool check(ll mid)\n{\n\tinit();\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\tadd_edge(S, i, cow[i]);\n\t\tadd_edge(i + n, T, house[i]);\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t{\n\t\t\tif (i == j || dis[i][j] <= mid)\n\t\t\t\tadd_edge(i, j + n, inf);\n                //\u8fd9\u91cc\u501f\u9274\u4e86\u9898\u89e3\u3002\n\t\t}\n\t}\n\tll F = maxflow();\n//\tprintf(\"%lld\\n\", F);\n\treturn (F >= sum);\n}\nvoid search()\n{\n\tll l = 0, r = inf;\n\twhile (l <= r)\n\t{\n\t\tll mid = (l + r) >> 1;\n\t\t//printf(\"%lld %d\\n\", mid, check(mid));\n\t\tif (check(mid) == true)\n\t\t{\n\t\t\tans = mid;\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse l = mid + 1;\n\t}\n}\nvoid output()\n{\n\tif (ans == inf || ans == 0) printf(\"-1\\n\");\n\telse printf(\"%lld\", ans);\n}\nint main()\n{\n\tinput();\n\tFloyd();\n\tsearch();\n\toutput();\n\treturn 0;\n}\n```\n\n\n\u7ba1\u7406\u5458\uff0c\u6c42\u901a\u8fc7\u3002\n\n",
        "postTime": 1645236198,
        "uid": 425694,
        "name": "\u90d1\u671d\u66e6zzx",
        "ccfLevel": 6,
        "title": "P6768\u9898\u89e3"
    },
    {
        "content": "\u5728\u770b\u8fd9\u7bc7\u9898\u89e3\u4e4b\u524d\uff0c\u60a8\u9996\u5148\u9700\u8981\u5b66\u4f1a\uff1a \u4e8c\u5206\u6c42\u89e3\uff0cFloyd\u5168\u6e90\u6700\u77ed\u8def\uff0cDicnic\u7f51\u7edc\u6700\u5927\u6d41\uff08\u5f53\u7136\u5566,\u795e\u4ed9\u4eec\u5199Dicnic\u4e8c\u8fdb\u5236\u4f18\u5316\u3001HLPP\u9884\u6d41\u63a8\u8fdb\u66f4\u597d\uff09\n\n\u56de\u5230\u9898\u76ee\uff0c\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\uff0c\u6211\u7684\u7b2c\u4e00\u53cd\u5e94\u662f\u6700\u77ed\u8def\u548c\u8d2a\u5fc3\u3002\u4f46\u662f\uff0c\u5f88\u5feb\u5c31\u53d1\u73b0\u8fd9\u4e9b\u60f3\u6cd5\u6839\u672c\u884c\u4e0d\u901a\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\uff1a\n\n\u6700\u77ed\u8def\u7b97\u6cd5\u8981\u6c42\u7684\u662f\u6709**\u8d77\u70b9**\uff0c\u6709**\u7ec8\u70b9**\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u5f88\u660e\u663e\u662f\u65e0\u5e8f\u7684\u3002\u4e00\u4e2a\u725b\u53ef\u4ee5\u524d\u5f80\u4efb\u610f\u7684\u96e8\u68da\uff0c\u6700\u77ed\u8def\u4e0d\u597d\u7edf\u8ba1\u3002\n\n\u90a3\u4e48\uff0c\u8d2a\u5fc3\u5462\uff1f\u5982\u679c\u6211\u4eec\u8d2a\u5fc3\u5730\u5c06\u4e00\u5934\u725b\u5f80\u6700\u8fd1\u7684\u96e8\u68da\u585e\uff0c\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u522b\u5904\u7684\u725b\u65e0\u6cd5\u6324\u8fdb\u6765\uff0c\u4ece\u800c**\u5927\u5e45\u5ef6\u957f**\u522b\u7684\u725b\u7684\u8fd0\u52a8\u65f6\u95f4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u65b9\u6848\u88ab\u5426\u51b3\u3002\n\n\uff08\u5706\u5708\u4e2d\u6570\u5b57\u4ee3\u8868\u96e8\u68da\u5bb9\u91cf\uff0cd\u4ee3\u8868\u8ddd\u79bb\uff09\n![image.png](https://i.loli.net/2020/08/17/7xI6BC5F9m1qtQs.png)\n\n\u65e2\u7136\u8fd9\u4e9b\u7b97\u6cd5\u90fd\u4e0d\u597d\u641e\uff0c\u4e0d\u59a8\u6362\u4e2a\u601d\u8def\u3002\n\n\u9996\u5148\uff0c\u65e0\u8bba\u6211\u4eec\u7684\u725b\u524d\u5f80\u54ea\u4e2a\u96e8\u68da\uff0c\u8d70\u5f97\u80af\u5b9a\u662f**\u6700\u77ed\u8def**\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6c42\u4e00\u4e2a\u5168\u6e90\u6700\u77ed\u8def\u3002\n\n\u5176\u6b21\uff0c\u53ef\u4ee5\u60f3\u5230\uff0c\u6211\u4eec\u6700\u7ec8\u7684\u7b54\u6848**\u4ec5**\u53d6\u51b3\u4e8e\u8d70\u5f97**\u6700\u4e45**\u7684\u90a3\u5934\u725b\uff0c\u4e0d\u540c\u7684\u8d70\u6cd5\u4f1a\u5bfc\u81f4\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4e8e\u662f\uff0c\u95ee\u9898\u53c8\u53d8\u6210\u4e86\u201c\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u6700\u5927\u503c\u6700\u5c0f\u201d\u8fd9\u79cd\u4e1c\u4e1c\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u9009\u62e9\u4e8c\u5206\u65f6\u95f4\u6700\u5c0f\u503c\uff0c\u5224\u65ad\u6240\u6709\u725b\u662f\u5426\u53ef\u4ee5\u5728\u8be5\u65f6\u95f4\u5185\u5230\u8fbe\u96e8\u68da\u3002\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u5224\u65ad\u7b54\u6848\u662f\u5426\u5408\u6cd5\u5462\uff1f\u6240\u6709\u725b\u7684\u7ec8\u70b9\u4e0d\u786e\u5b9a\uff0c\u56e0\u6b64\u8003\u8651\u7f51\u7edc\u6d41\u5efa\u6a21\u3002\u4e0d\u59a8\u5c06\u725b\u548c\u96e8\u68da\u7684\u5bb9\u91cf\u5206\u5f00\u770b\uff0c\u4e00\u5757\u519c\u7530\u62c6\u6210\u4e24\u4e2a\u70b9\u3002\u4ece\u8d85\u7ea7\u6e90\u70b9 $S$ \u8fde\u5411\u7b2c\u4e00\u6ce2\u70b9\uff0c\u6700\u5927\u6d41\u91cf\u4e3a\u8be5\u70b9\u725b\u7684\u6570\u91cf $x$\uff0c\u4fdd\u8bc1\u8fd9\u4e2a\u70b9\u6709 $x$ \u5934\u725b\u9700\u8981\u5b89\u7f6e\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u6ce2\u70b9\uff0c\u5168\u90e8\u8fde\u5411\u8d85\u7ea7\u6c47\u70b9 $T$, \u6d41\u91cf\u4e3a\u96e8\u68da\u7684\u5bb9\u91cf\uff0c\u5373\u4fdd\u8bc1\u4ece\u8fd9\u4e2a\u70b9\u7684\u96e8\u68da\u201c\u51fa\u6765\u201d\u7684\u725b\u4e0d\u8d85\u8fc7\u5bb9\u91cf\u3002\n\n\u800c\u5bf9\u4e8e\u725b\u548c\u96e8\u68da\uff0c\u6211\u4eec\u5c06\u5408\u6cd5\u7684\u8fde\u4e0a\u4e00\u6761\u4e3a $inf$\u7684\u8fb9\uff0c\u4fdd\u8bc1\u4ed6\u4eec\u65e0\u9650\u901a\u8fc7\u3002\u4f55\u4e3a\u5408\u6cd5\u7684\uff1f\u5f53\u7136\u5c31\u662f\u5728\u540c\u4e00\u5757\u519c\u7530\u7684\u725b\u548c\u96e8\u68da\uff0c \u548c\u6700\u77ed\u8def\u8ddd\u79bb\u4e0d\u8d85\u8fc7\u5f53\u524d\u679a\u4e3e\u7b54\u6848\u7684\u70b9\u5566\uff01\uff08\u786e\u4fdd\u6700\u957f\u65f6\u95f4\u4e0d\u80fd\u8d85\u8fc7\u5f53\u524d\u7b54\u6848\uff09\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u8dd1\u4e00\u6ce2\u6700\u5927\u6d41\uff0c\u5982\u679c\u6700\u5927\u6d41\u7b49\u4e8e\u725b\u7684\u6570\u91cf\uff0c\u8bc1\u660e\u5f53\u524d\u7684\u65b9\u6848\u5408\u6cd5\uff0c\u53cd\u4e4b\uff0c\u5982\u679c\u6700\u5927\u6d41\u5c0f\u4e8e\u725b\u7684\u6570\u91cf\uff0c\u5219\u8bc1\u660e\u5728\u8be5\u65f6\u95f4\u5185\u65e0\u6cd5\u4fdd\u8bc1\u6240\u6709\u7684\u725b\u53ef\u4ee5\u627e\u5230\u96e8\u68da\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff08\u5f53\u524d\u5f27\u4f18\u5316\u7684\u666e\u901a $Dicnic$ \u7248\u672c\uff09\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define M 100010\n#define N 1010\n#define ll long long\nconst ll inf = (ll)1e18;  // \u4e00\u5b9a\u8981\u591f\u5927 \n\ntemplate <class T>\ninline void read(T& a){\n\tT x = 0, s = 1;\n\tchar c = getchar();\n\twhile(!isdigit(c)){\n\t\tif(c == '-') s = -1;\n\t\tc = getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx = x * 10 + (c ^ '0');\n\t\tc = getchar();\n\t}\n\ta = x * s;\n\treturn ;\n}\n\nstruct node{\n\tint v, next;\n\tll w;\n\t\n\tpublic:\n\t\tnode(int v = 0, ll w = 0, int next = -1){  // \u65b9\u4fbf\u521d\u59cb\u5316\u4e3a -1 \n\t\t\tthis -> v = v;\n\t\t\tthis -> w = w;\n\t\t\tthis -> next = next;\n\t\t\treturn ;\n\t\t}\n\t\t\n\tinline void clean(){\n\t\tthis -> v = 0;\n\t\tthis -> w = 0;\n\t\tthis -> next = -1;\n\t\treturn ;\n\t}\n\t\t\n}t[M << 1];\nint f[N];\nll dis[N][N];\nint n, m;\nint suma = 0, sumb = 0;  // \u5976\u725b\u603b\u6570\u548c\u96e8\u68da\u603b\u5bb9\u91cf \nint a[N], b[N];\nint s, ht; // \u8d77\u70b9\u548c\u7ec8\u70b9 \n\nint bian = -1;\ninline void add(int u, int v, ll w){\n\tt[++bian] = node(v, w, f[u]), f[u] = bian;\n\tt[++bian] = node(u, 0, f[v]), f[v] = bian;  // \u53cd\u5411\u865a\u8fb9 \n\treturn ;\n}\n\nstruct Max_Flow{    // \u6700\u5927\u6d41 \n\tint deth[N];\n\tint cur[N];    \n\n\tbool bfs(){\n\t\tqueue <int> q;\t\n\t\tmemset(deth, 0, sizeof(deth));\n\t\tdeth[s] = 1; \n\t\tq.push(s);\n\t\twhile(!q.empty()){\n\t\t\tint now = q.front(); q.pop();\n\t\t\tfor(int i = f[now]; ~i; i = t[i].next){\n\t\t\t\tint v = t[i].v;\n\t\t\t\tif(!deth[v] && t[i].w){\n\t\t\t\t\tdeth[v] = deth[now] + 1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn deth[ht] != 0;\n\t}\n\t\n\tll dfs(ll now,ll dist){\n\t\tif(now == ht || !dist)return dist;\n\t\tfor(int& i = cur[now]; ~i; i = t[i].next){\n\t\t\tll v = t[i].v;\n\t\t\tif(deth[v] == deth[now] + 1 && t[i].w != 0){\n\t\t\t\tll di = dfs(v, min(dist, t[i].w));\n\t\t\t\tif(di > 0){\n\t\t\t\t\tt[i].w -= di;\n\t\t\t\t\tt[i^1].w += di;\n\t\t\t\t\treturn di;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\treturn 0; \n\t}\n\t\n\tll Dicnic(){\n\t\tll sum = 0;\n\t\twhile(bfs()){\n\t\t\tmemcpy(cur, f, sizeof(cur));\n\t\t\twhile(ll temp = dfs(s, inf))\n\t\t\t\tsum += temp;\t\t\n\t\t}\n\t\treturn sum; \n\t}\n\t\n} T;\n\ninline void clean(){\n\tmemset(f, -1, sizeof(f));\n\tfor(int i = 1; i <= bian; i++)\n\t\tt[i].clean();\n\tbian = -1;\n\treturn ;\n}\n\nbool judge(ll mid, int sum){\n\tclean();                        // \u8bb0\u5f97\u6e05\u7a7a \n\tfor(int i = 1; i <= n; i++){\n\t\tadd(s, i, a[i]);\n\t\tadd(i + n, ht, b[i]);\n\t\tfor(int j = 1; j <= n; j++){\n\t\t\tif(i == j || dis[i][j] <= mid)   // \u672c\u8eab\u5c31\u5728\u8fd9\u5757\u519c\u7530\u6216\u8005\u8ddd\u79bb\u5728\u5f53\u524d\u9650\u5236\u4e4b\u5185 \n\t\t\t\tadd(i, j + n, inf);\n\t\t}\n\t}\n\treturn T.Dicnic() == sum;\n}\n\nint main(){\n//\tfreopen(\"hh.txt\", \"r\", stdin);\n\tread(n), read(m);\n\tfor(int i = 1; i <= n; i++){\n\t\tread(a[i]), read(b[i]);\n\t\tsuma += a[i], sumb += b[i];  // \u725b\u7684\u603b\u6570\uff0c \u5bb9\u91cf\u7684\u603b\u6570 \n\t}\n\tif(suma > sumb){  // \u7279\u5224\uff0c\u5982\u679c\u6839\u672c\u653e\u4e0d\u4e0b\u5c31\u76f4\u63a5\u53bb\u4e16 \n\t\tprintf(\"-1\");\n\t\treturn 0;  \n\t}\n\t\n\ts = n * 2 + 1, ht = n * 2 + 2;\n\tmemset(dis, 0x3f, sizeof(dis));    \n\tfor(int i = 1; i <= m; i++){\n\t\tll x, y, w;\n\t\tread(x), read(y), read(w);\n\t\tdis[x][y] = dis[y][x] = min(dis[x][y], w);\n\t}\n\tfor(int k = 1; k <= n; k++)    // Floyd \u6700\u77ed\u8def \n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tfor(int j = 1; j <= n; j++)\n\t\t\t\tdis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n\t\t\t\t\n\tll l = 0, r = 0;\n\tll ans = -1;\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= n; j++)\n\t\t\tif(i != j)  r = max(r, dis[i][j]);\n\t\t\t\n\twhile(l <= r){      // \u4e8c\u5206\u7b54\u6848 \n\t\tll mid = l + r >> 1;\n\t\tif(judge(mid, suma)) ans = mid, r = mid - 1;\n\t\telse l = mid + 1;\n\t}\n\tprintf(\"%lld\\n\", ans < inf ? ans : -1);\n\treturn 0;\n}```\n\n\n\uff08\u8bdd\u8bf4\u8fd9\u771f\u7684\u53ea\u662f\u4e00\u9053\u7eff\u9898\u5417\u2026\u2026\uff09\n",
        "postTime": 1597709604,
        "uid": 234224,
        "name": "\u9752\u9e1f_Blue_Bird",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P6768 \u3010[USACO05MAR]Ombrophobic Bovines \u53d1\u6296\u7684\u725b\u3011"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a\u6700\u77ed\u8def $+$ \u6700\u5927\u6d41 $+$ \u4e8c\u5206\u7b54\u6848    \n\u9898\u610f\uff1a\u6bcf\u4e2a\u8349\u5730\u6709\u96e8\u68da\u4e5f\u6709\u82e5\u5e72\u5934\u725b\uff0c\u6211\u4eec\u5df2\u77e5\u6240\u6709\u7684\u8fb9\u548c\u4f1a\u901a\u8fc7\u8fd9\u4e9b\u8fb9\u6240\u9700\u7684\u65f6\u95f4\uff0c\u95ee\u4ec0\u4e48\u65f6\u5019\u6240\u6709\u725b\u90fd\u53ef\u4ee5\u5230\u96e8\u68da\u91cc\u9762  \n\u770b\u5230\u8fd9\u79cd\u9898\u5c31\u76f4\u63a5\u770b\u6570\u636e\u8303\u56f4 $n \\le 200$\uff0c\u8fd9\u79cd\u4e1c\u897f\u5c31\u5f88\u81ea\u7136\u7684\u60f3\u5230\u7f51\u7edc\u6d41\u5566\uff0c\u518d\u8bfb\u8bfb\u9898\u5c31\u53ef\u4ee5\u53d1\u73b0\u662f\u6c42\u6700\u5927\u6d41\u3002  \n\u53d1\u73b0\u6240\u6709\u725b\u53bb\u5f80\u5176\u4ed6\u8349\u5730\u7684\u8def\u7ebf\u4e00\u5b9a\u662f\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u5148\u8003\u8651\u6700\u77ed\u8def\u3002\u8fd9\u6570\u636e\u8303\u56f4\u6c42\u6700\u77ed\u8def\u5f53\u7136\u662f\u7528 $Floyd$ \u4e86\uff0c~~\u4f46\u662f n \u4e3a 100 \u4f1a\u70b8~~ \uff0c200\u5f53\u7136\u662f\u4e0d\u4f1a\u70b8\u7684\u5566\u3002  \n\u8dd1\u5b8c\u6700\u77ed\u8def\u6211\u4eec\u5c31\u8981\u5efa\u7acb\u6700\u5927\u6d41\u7684\u6a21\u578b\u4e86\uff0c\u7f51\u7edc\u6d41\u7684\u9898\u96be\u5c31\u96be\u5728\u5efa\u56fe\uff0c\u5f53\u7136\u6240\u6709\u56fe\u8bba\u95ee\u9898\u90fd\u662f\u5efa\u56fe $+$ \u8dd1\u677f\u5b50\uff0c\u6240\u4ee5\u5e94\u8be5\u5728\u601d\u7ef4\u4e0a\u953b\u70bc\u81ea\u5df1\u62bd\u8c61\u80fd\u529b\u3002  \n\u597d\u56de\u5230\u6b63\u9898\uff0c\u600e\u4e48\u5efa\u56fe\uff0c\u5982\u679c\u4f60\u505a\u8fc7 [ [CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf](https://www.luogu.com.cn/problem/P3171) \u5c31\u77e5\u9053\u672c\u9898\u8981\u901a\u8fc7\u62c6\u70b9\u7684\u65b9\u5f0f\u6765\u6784\u56fe\uff0c\u56e0\u4e3a\u5982\u679c\u662f\u4e24\u4e2a\u70b9\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff0c\u800c\u4e0d\u80fd\u901a\u8fc7\u5355\u7eaf\u7684\u72b6\u6001\u6765\u8868\u793a\u4f20\u9012\u6d41\u91cf\uff0c\u6240\u4ee5\u5c31\u8981\u91c7\u7528\u62c6\u70b9\u7684\u65b9\u5f0f\u3002  \n\uff08\u4e0b\u6587\u6211\u628a\u8fd9\u4e2a\u70b9\u672c\u7701\u79f0\u4e3a\u672c\u8eab\u70b9\uff0c\u62c6\u7684\u70b9\u79f0\u4e3a\u62c6\u70b9\uff09  \n\u73b0\u5728\u5c31\u5e94\u8be5~~\u7406\u6240\u5e94\u5f53~~\u5b8c\u6210\u4e86\u4ee5\u4e0b\u51e0\u6b65\uff1a  \n1. \u8d77\u70b9\u548c\u6bcf\u4e00\u4e2a\u70b9\u7684\u672c\u8eab\u70b9\u90fd\u5e94\u8be5\u6709\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u725b\u7684\u6570\u91cf  \n2. \u6bcf\u4e00\u4e2a\u672c\u8eab\u70b9\u90fd\u5e94\u8be5\u548c\u81ea\u5df1\u76f8\u5e94\u7684\u62c6\u70b9\u6709\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77  \n3. \u6bcf\u4e00\u4e2a\u62c6\u70b9\u548c\u7ec8\u70b9\u90fd\u5e94\u8be5\u6709\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u96e8\u68da\u7684\u6570\u91cf  \n\n\u597d\u8fd9\u6837\u4f60\u5c31\u5b8c\u6210\u4e00\u534a\u4e86  \n\u63a5\u4e0b\u6765\u8003\u8651\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u8be5\u5982\u4f55\u8fde\u8fb9\uff0c\u56e0\u4e3a\u725b\u8981\u6309\u7167\u6700\u77ed\u7684\u8def\u5f84\u8d70\u5411\u5176\u4ed6\u7684\u8349\u5730\uff0c\u800c\u6b64\u9898\u95ee\u7684\u662f\u6700\u5c11\u7684\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u5c31\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u6211\u4eec\u628a\u6240\u6709\u8fb9\u90fd\u8fde\u8d77\u6765\u5c31\u4e0d\u80fd\u9650\u5236\u6700\u5c0f\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u8003\u8651\u4e8c\u5206\u7b54\u6848\uff0c\u4e8c\u5206\u6700\u5c11\u7684\u65f6\u95f4\uff0c\u7136\u540e\u518d\u8003\u8651\u8fde\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u60f3\u5230\u662f\u5427\u5c0f\u4e8e\u7b49\u4e8e\u4e8c\u5206\u7684\u65f6\u95f4\u7684\u90a3\u4e9b\u8fb9\u8fde\u8d77\u6765\uff0c\u7136\u540e\u518d\u8dd1\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u5566qwq  \n\u56de\u987e\u4e00\u4e0b\u672c\u9898\u7684\u89e3\u9898\u601d\u8def\u554a\uff1a  \n\u770b\u5230\u6700\u5c0f\uff0c\u6240\u4ee5\u60f3\u5230\u6700\u77ed\u8def\uff0c\u56e0\u4e3a\u8fb9\u5f88\u5c11\u60f3\u5230 $Floyd$\uff0c\u56e0\u4e3a\u725b\u8981\u53bb\u5f80\u5176\u4ed6\u7684\u67d0\u4e2a\u70b9\u7c7b\u4f3c\u4e8e\u90a3\u4e2a\u6d41\u6c34\u95ee\u9898\uff0c\u6240\u4ee5\u60f3\u5230\u6700\u5927\u6d41\uff0c\u7136\u540e\u518d\u60f3\u5230\u8fb9\u5982\u679c\u5168\u90e8\u53d6\u4e0d\u80fd\u5f97\u5230\u6700\u5c0f\uff0c\u6240\u4ee5\u91c7\u7528\u4e8c\u5206\u7b54\u6848  \n\u597d\u5566\u8fd9\u5c31\u662f\u672c\u9898\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6709\u5565\u95ee\u9898\u6216\u8005\u4e0d\u61c2\u7684\u6b22\u8fce\u6765\u95ee\u6211\u5440qwq  \n\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\uff1a  \n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#define ll long long\nusing namespace std;\nconst int N=4010,M=2000010,K=300;\nstruct MSQWQ{\n\tint to,next;\n\tll z;\n}e[M];\nint elast[N],cur[N],k=1;\nvoid print(int x,int y,int z){cout<<x<<\"->\"<<y<<\"=\"<<z<<endl;}\nvoid add(int x,int y,ll z)\n{\n\t//print(x,y,z);\n\te[++k].to=y,e[k].z=z,e[k].next=elast[x],elast[x]=k;\n\te[++k].to=x,e[k].z=0,e[k].next=elast[y],elast[y]=k;\n}\n\nint n,m;\nll w[N],v[N];\nll ddis[K][K];\nll ans;\nint st,en;\nqueue<int>q;\nll dis[N],cnt[N];\n\n\nvoid bfs(int en)\n{\n\tq.push(en);\n\tfor(int i=0;i<=N-10;i++)cur[i]=elast[i],dis[i]=-1,cnt[i]=0;\n\tdis[en]=0;\n\tcnt[0]=1;\n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();q.pop();\n\t\tfor(int i=elast[now];i;i=e[i].next)\n\t\t{\n\t\t\tint to=e[i].to;\n\t\t\tif(dis[to]==-1)\n\t\t\t{\n\t\t\t\tdis[to]=dis[now]+1;\n\t\t\t\t//cout<<to<<\" \"<<dis[to]<<endl;\n\t\t\t\tcnt[dis[to]]++;\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n}\nll dfs(int x,ll flow)\n{\n\tif(x==en)return flow;\n\tll d=0;\n\tfor(int i=cur[x];i;i=e[i].next)\n\t{\n\t\tcur[x]=i;\n\t\tint to=e[i].to;\n\t\tif(e[i].z>0&&dis[x]==dis[to]+1)\n\t\t{\n\t\t\tint tmp=dfs(to,min(e[i].z,flow-d));\n\t\t\te[i].z-=tmp;\n\t\t\te[i^1].z+=tmp;\n\t\t\td+=tmp;\n\t\t\tif(d==flow||dis[st]>=n*2+1)return d;\n\t\t}\n\t}\n\tif(dis[st]>=n*2+1)return d;\n\tcnt[dis[x]]--;\n\tif(cnt[dis[x]]==0)dis[st]=n*2+1;\n\tdis[x]++;\n\tcur[x]=elast[x];\n\tcnt[dis[x]]++;\n\treturn d;\n}\n\nll L,R,mid,qans;\nll sum;\nbool check(ll mid)\n{\n\tk=1;\n\tmemset(elast,0,sizeof(elast));\n\t\n\tfor(int i=1;i<=n;i++)add(st,i,w[i]);\n\tfor(int i=1;i<=n;i++)add(i,i+n,1e18);\n\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(ddis[i][j]<=mid)add(i,j+n,1e18);\n\t\n\tfor(int i=1;i<=n;i++)\n\t\tadd(i+n,en,v[i]);\n\t\n\tans=0;\n\tbfs(en);\n\twhile(dis[st]<n*2+1)ans+=dfs(st,1e18);\n\t\n\tif(ans==sum)return true;\n\treturn false;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tst=0,en=n*2+1;\n\tfor(int i=1;i<=n;i++)scanf(\"%lld%lld\",&w[i],&v[i]),sum+=w[i];\n\t\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)ddis[i][j]=1e18;\n\t\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tll z;\n\t\tscanf(\"%d%d%lld\",&x,&y,&z);\n\t\tddis[x][y]=min(ddis[x][y],z);\n\t\tddis[y][x]=min(ddis[y][x],z);\n\t}\n\t\n\tfor(int k=1;k<=n;k++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tddis[i][j]=min(ddis[i][j],ddis[i][k]+ddis[k][j]);\n\t\t\t\t\n//\tfor(int i=1;i<=n;i++)\n//\t{\n//\t\tfor(int j=1;j<=n;j++)cout<<ddis[i][j]<<\" \";\n//\t\tcout<<endl;\n//\t}\n\t\n\tL=0,R=1e18+1;\n\twhile(L<=R)\n\t{\n\t\tmid=(L+R)/2;\n\t\tif(check(mid))qans=mid,R=mid-1;\n\t\telse L=mid+1;\n\t}\n\tif(qans==0||qans==1e18+1)printf(\"-1\");\n\telse printf(\"%lld\",qans);\n}\n```\n",
        "postTime": 1626871023,
        "uid": 247269,
        "name": "MSqwq",
        "ccfLevel": 0,
        "title": "P6768 [USACO05MAR]Ombrophobic Bovines \u53d1\u6296\u7684\u725b"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u4f60 $n$ \u4e2a\u70b9\uff0c $m$ \u6761\u8fb9\u3002\u4f7f\u6240\u6709\u7684\u725b\u90fd\u53ef\u4ee5\u5230\u8fbe\u725b\u68da\uff0c\u6c42\u95ee\u6700\u5c0f\u65f6\u95f4\u3002[$QWQ$](https://www.luogu.com.cn/blog/xzc/solution-p6768)\n## \u5206\u6790\n\u5148\u8003\u8651\u6bcf\u4e00\u5934\u725b\u90fd\u53ef\u4ee5\u72ec\u7acb\u884c\u52a8\u3002\u90a3\u4e48\u5176\u5b9e\u662f\u6c42\u6700\u540e\u4e00\u5934\u725b\u8fdb\u5165\u725b\u68da\u7684\u65f6\u95f4\u3002\u90a3\u4e48\u6bcf\u4e00\u4e2a\u70b9\u7684\u725b\u68da\u4e2a\u6570\u6709\u9650\uff0c\u8fd9\u4e2a\u5c31\u9650\u5236\u4e86\u5bb9\u91cf\u3002\u5c31\u662f\u4e00\u4e2a\u7f51\u7edc\u6d41\u6a21\u578b\u4e86\u3002\u6bcf\u4e2a\u70b9\u8981\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u90a3\u4e48\u73b0\u5728\u5c31\u662f\u6c42\u6700\u5927\u65f6\u95f4\u6700\u5c0f\u3002\u8fd9\u4e2a\u53ef\u4ee5\u4e8c\u5206\u6765\u505a\u3002\u4e8c\u5206\u6700\u5927\u65f6\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u95f4\u66b4\u529b\u91cd\u6784\u56fe\u3002\u5982\u679c\u4e24\u4e2a\u70b9\u662f\u8ddd\u79bb\u5c0f\u4e8e\u6216\u7b49\u4e8e\u6700\u5927\u65f6\u95f4\uff0c\u5c31\u53ef\u4ee5\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $\\inf$ \u7684\u8fb9\u3002\u8dd1\u4e00\u6b21\u7f51\u7edc\u6d41\uff0c\u67e5\u8be2\u662f\u5426\u6ee1\u6d41\u5c31\u884c\u4e86\u3002\n\n- \u7ec6\u8282\uff1a\u8fd9\u9053\u9898\u6709\u91cd\u8fb9\uff0c\u53d6\u6700\u5c0f\u8ba1\u7b97\u5c31\u884c\u3002\n##\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long \nconst int N = 603100;\n\nint S,T,n,m;\nstruct Edge{int cap,flow,to,nxt;}e[N];\nint in[N],cur[N],out[N],Maxflow = 0,dis[N],head[N],cnt = 1,dist[2100][2100];\nvoid add(int x,int y,int cap)\n{\n\te[++cnt].cap = cap;e[cnt].flow = 0;e[cnt].nxt = head[x];e[cnt].to = y;head[x] = cnt;\n\te[++cnt].cap = 0  ;e[cnt].flow = 0;e[cnt].nxt = head[y];e[cnt].to = x;head[y] = cnt;\n}\nqueue<int> Q;\nbool Bfs(int s,int t)\n{\n\twhile(Q.size()) Q.pop();\n\tmemset(dis,0,sizeof(dis));\n\tdis[s] = 1;Q.push(s);\n\twhile(Q.size()){\n\t\tint x = Q.front();Q.pop();\n\t\tfor(int i = head[x];i;i=e[i].nxt){\n\t\t\tif(e[i].cap>e[i].flow && !dis[e[i].to]){\n\t\t\t\tdis[e[i].to] = dis[x]+1;Q.push(e[i].to);\n\t\t\t\tif(e[i].to==t) return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint Dfs(int x,int a,int t){\n\tif(x==t||a==0) return a;\n\tint f,flow = 0;\n\tfor(int i = cur[x];i;i=e[i].nxt){\n\t\tint y = e[i].to;\n\t\tif(dis[y] == dis[x]+1 && (f=Dfs(y,min(a,e[i].cap-e[i].flow),t))>0)\n\t\t{\n\t\t\tflow+=f;a-=f;e[i].flow+=f;e[i^1].flow-=f;cur[x]=i;\n\t\t\tif(!a) break;\n\t\t}\n\t}\n\treturn flow;\n}\nvoid rebuild(int limit){\n\tmemset(head,0,sizeof(head));cnt = 1;\n\tfor(int i = 1;i <= n;i++) add(S,i,in[i]),add(i+n,T,out[i]),add(i,i+n,0x3f3f3f3f);\n\tfor(int i = 1;i <= n;i++) {\n\t\tfor(int j = 1;j <= n;j++){\n\t\t\tif(dist[i][j] <= limit) add(i,j+n,0x3f3f3f3f);\n\t\t}\n\t}\n}\nsigned main()\n{\n\tcin >> n >> m;\n\tmemset(dist,0x3f,sizeof(dist));\n\tfor(int i = 1;i <= n;i++) cin >> in[i] >> out[i],Maxflow += in[i];\n\tfor(int i = 1;i <= m;i++) {\n\t\tint a,b,c;cin >> a >> b >> c;\n\t\tdist[a][b] = dist[b][a] = min(dist[a][b],c);\n\t}\n\tint Max = 0;\n\tfor(int k = 1;k <= n;k++){\n\t\tfor(int i = 1;i <= n;i++){\n\t\t\tfor(int j = 1;j <= n;j++){\n\t\t\t\tdist[i][j] = min(dist[i][j],dist[i][k] + dist[k][j]);\n\t\t\t}\n\t\t}\n\t}\n\tS = 0;T = 2*n + 1;\n\tint ans = 0x3f3f3f3f3f3f3f3f,L = 0,R = 0x3f3f3f3f3f3f3f3f;\n\twhile(L <= R){\n\t\tint Mid = L + R >> 1;\n\t\trebuild(Mid);\n\t\tint maxflow = 0;\n\t\twhile(Bfs(S,T)){\n\t\t\tfor(int i = 0;i <= T;i++) cur[i] = head[i];\n\t\t\tmaxflow += Dfs(S,0x3f3f3f3f,T);\n\t\t}\n\t\tif(maxflow >= Maxflow) R = Mid - 1,ans = min(ans,Mid);\n\t\telse L = Mid + 1;\n\t}\n\tif(ans == 0x3f3f3f3f3f3f3f3f) cout<<\"-1\"<<endl;\n\telse cout<<ans<<endl;\n\treturn 0;\n} \n```\n",
        "postTime": 1597707354,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6768 \u3010[USACO05MAR]Ombrophobic Bovines \u53d1\u6296\u7684\u725b\u3011"
    },
    {
        "content": "# \u9898\u76ee\n**[P6768 [USACO05MAR]Ombrophobic Bovines](https://www.luogu.com.cn/problem/P6768)**\n# \u9898\u76ee\u89e3\u8bfb\n\u672c\u9898\u5927\u610f\u4e3a\uff1a\u6bcf\u4e2a\u70b9\u4e0a\u6709\u4e00\u4e9b\u4eba\u548c\u4e00\u4e9b\u5bb9\u7eb3\u4eba\u7684\u623f\u5b50\uff0c\u82b1\u6700\u77ed\u65f6\u95f4\u4f7f\u6240\u6709\u4eba\u8d70\u5230\u623f\u95f4\uff0c\u82e5\u65e0\u6cd5\u6ee1\u8db3\uff0c\u5219\u8f93\u51fa $-1$\u3002\n\n\u8fd9\u9053\u9898\u76ee\u7b2c\u4e00\u773c\u770b\u8fc7\u53bb\u4e0d\u5c31\u662f\u8d2a\u5fc3\u52a0\u6700\u77ed\u8def\u5417\uff0c\u53ef\u662f\u5982\u679c\u8ba9\u4e00\u5806\u5976\u725b\u5168\u90e8\u8fdb\u5165\u540c\u4e00\u4e2a\u623f\u5b50\uff0c\u5269\u4e0b\u7684\u5976\u725b\u4e5f\u8bb8\u8981\u7ed5\u5f88\u957f\u7684\u8def\u8d70\u5230\u53e6\u4e2a\u623f\u5b50\uff0c\u7b54\u6848\u663e\u7136\u4e0d\u662f\u6700\u4f18\u3002\n\n\u90a3\u8fd9\u4e48\u529e\uff1fRP++\u3002\n\n\u7531\u4e8e\u8d77\u70b9\u7ec8\u70b9\u4e0d\u786e\u5b9a\uff0c\u90a3\u4e48\u5c31\u5148\u6c42**\u5168\u6e90\u6700\u77ed\u8def**\uff0c\u6bd5\u7ade\u6240\u6709\u9053\u8def\u90fd\u53ef\u4ee5\u5bb9\u7eb3\u4efb\u610f\u591a\u7684\u5976\u725b\uff0c\u663e\u7136\u90fd\u8d70\u6700\u77ed\u8def\u597d\u3002\u89c2\u5bdf\u6570\u636e  $F\u2264200,P\u22641500$  \u7528 Floyd   \u6c42\u662f\u4e2a\u4e0d\u6413\u7684\u9009\u62e9\u3002\n#### \u4ee3\u7801\u7247\u82b1\u2014\u2014Floyd\n```cpp\nvoid Floyd(){\n\tfor(int k=1;k<=F;k++)\n\t\tfor(int i=1;i<=F;i++)\n\t\t\tfor(int j=1;j<=F;j++)\n\t\t\t\tG[i][j]=min(G[i][j],G[i][k]+G[k][j]);\t\n}\n```\n\n\n\u4e4b\u540e\u5462\uff1f\uff1f\u60f3\u4e00\u60f3\u6c42\u6700\u5c0f\u65f6\u95f4\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u4ec0\u4e48\uff1f\n\n\u5f53\u7136\u662f**\u4e8c\u5206\u7b54\u6848\u6cd5**\n\n\u4e8c\u5206\u7b54\u6848\u6cd5\u8981\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u672c\u9898\u662f\u6ee1\u8db3\u7684\uff0c\u56e0\u4e3a\u6c42\u7684\u65f6\u95f4\u76f8\u5f53\u4e8e\u8d70\u5230\u623f\u5b50\u82b1\u8d39\u6700\u5927\u7684\u4eba\uff0c\u56e0\u6b64\u4e8c\u5206\u51fa\u8272\u7684\u63a5\u8fd1**\u5e38\u6570\u7684\u901f\u5ea6**\u5b8c\u5168\u53ef\u4ee5\u80dc\u4efb\u3002\n#### \u4ee3\u7801\u7247\u82b1\u2014\u2014\u4e8c\u5206\n```cpp\nbool Check(long long tim){\n\tmemset(head,0,sizeof(head));\n\ttot=1;\n\tfor(int i=1;i<=F;i++) add(0,i,cow[i]);\n\tfor(int i=1;i<=F;i++) add(i+F,2*F+1,house[i]);\n\tfor(int i=1;i<=F;i++)\n\t\tfor(int j=1;j<=F;j++)\n\t\t\tif(G[i][j]<=tim) add(i,j+F,INF); //\u5efa\u56fe\n\treturn Dinic()>=sum1; //\u8dd1Dinic\n}\n-------------------------------------------\nlong long L=0,R=MAXINF,mid,ans;\nwhile(L<=R){\n\tmid=L+R>>1;\n//\tcout<<mid<<endl;\n\tif(Check(mid)) ans=mid,R=mid-1;\n\telse L=mid+1;\n}  //\u4e8c\u5206\u6a21\u677f\n```\n\u7167\u4ee5\u4e0a\u601d\u8def\uff0c\u6211\u4eec\u5728 $mid$ \u7684\u65f6\u95f4\u4e0b\u53ea\u8981\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u90fd\u8d70\u5230\u623f\u95f4\u5c31\u884c\u4e86\uff0c\u8fd9\u65f6\u5019\u6784\u5efa\u4e00\u4e2a\u65b0\u56fe\uff0c\u628a\u6700\u77ed\u8def\u5c0f\u4e8e\u7b49\u4e8e $mid$ \u7684\u8def\u5f84\u7684\u4e24\u7aef\u70b9\u8fde\u8d77\u6765\uff0c\u7ec4\u6210\u4f20\u8bf4\u4e2d\u7684**\u4e8c\u5206\u56fe**\uff0c\u540c\u65f6\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u548c\u8d85\u7ea7\u6c47\u70b9\u3002\u8dd1\u4e00\u4e0b\u6700\u5927\u6d41(\u521d\u4e8c\u849f\u84bb\u4e0d\u4f1a ISPA ,\u53ea\u4f1a\u80cc Dinic \u6a21\u677f)\u3002\n#### \u4ee3\u7801\u7247\u82b1\u2014\u2014Dinic\n```cpp\nbool BFS(){\n\tfor(int i=0;i<=2*F+1;i++) deep[i]=INF;\n\tqueue <int> Q;\n\tQ.push(0);deep[0]=0;now[0]=head[0];\n\twhile(!Q.empty()){\n\t\tint u=Q.front();Q.pop();\n\t\tfor(int i=head[u];i;i=g[i].next){\n\t\t\tint v=g[i].to;\n\t\t\tif(g[i].capacity>0&&deep[v]==INF){\n\t\t\t\tdeep[v]=deep[u]+1;\n\t\t\t\tnow[v]=head[v];\n\t\t\t\tif(v==2*F+1) return true;\n\t\t\t\tQ.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint DFS(int u,int flow){\n\tif(u==2*F+1) return flow;\n\tint incf,res=0;\n\tfor(int i=now[u];i&&flow;i=g[i].next){\n\t\tint v=g[i].to;\n\t\tnow[u]=i;\n\t\tif(g[i].capacity>0&&deep[v]==deep[u]+1){\n\t\t\tincf=DFS(v,min(flow,g[i].capacity));\n\t\t\tif(incf==0) deep[v]=INF;\n\t\t\tg[i].capacity-=incf;\n\t\t\tg[i^1].capacity+=incf;\n\t\t\tflow-=incf;\n\t\t\tres+=incf;\n\t\t} \n\t}\n\treturn res;\n}\nint Dinic(){\n\tint maxflow=0;\n\twhile(BFS()) maxflow+=DFS(0,INF);\n\treturn maxflow; \n}\n```\n\u6a21\u677f\u4ee3\u7801\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002\n# AC Code\n```cpp\n#include<bits/stdc++.h>\n#include<queue>\nusing namespace std;\nconst int INF=1<<29;\nconst long long MAXINF=1e15;\nint F,P,sum1,sum2;\nint cow[205],house[205];\nint a,b;\nlong long c;\nlong long G[205][205];\nint head[405],tot=1;\nstruct edge{\n\tint next,to,capacity;\n}g[2*405*405];\nvoid add(int u,int v,int f){\n\tg[++tot]=(edge){head[u],v,f};\n\thead[u]=tot;\n\tg[++tot]=(edge){head[v],u,0};\n\thead[v]=tot;\n}\nvoid Floyd(){\n\tfor(int k=1;k<=F;k++)\n\t\tfor(int i=1;i<=F;i++)\n\t\t\tfor(int j=1;j<=F;j++)\n\t\t\t\tG[i][j]=min(G[i][j],G[i][k]+G[k][j]);\t\n}\nint now[405],deep[405];\nbool BFS(){\n\tfor(int i=0;i<=2*F+1;i++) deep[i]=INF;\n\tqueue <int> Q;\n\tQ.push(0);deep[0]=0;now[0]=head[0];\n\twhile(!Q.empty()){\n\t\tint u=Q.front();Q.pop();\n\t\tfor(int i=head[u];i;i=g[i].next){\n\t\t\tint v=g[i].to;\n\t\t\tif(g[i].capacity>0&&deep[v]==INF){\n\t\t\t\tdeep[v]=deep[u]+1;\n\t\t\t\tnow[v]=head[v];\n\t\t\t\tif(v==2*F+1) return true;\n\t\t\t\tQ.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint DFS(int u,int flow){\n\tif(u==2*F+1) return flow;\n\tint incf,res=0;\n\tfor(int i=now[u];i&&flow;i=g[i].next){\n\t\tint v=g[i].to;\n\t\tnow[u]=i;\n\t\tif(g[i].capacity>0&&deep[v]==deep[u]+1){\n\t\t\tincf=DFS(v,min(flow,g[i].capacity));\n\t\t\tif(incf==0) deep[v]=INF;\n\t\t\tg[i].capacity-=incf;\n\t\t\tg[i^1].capacity+=incf;\n\t\t\tflow-=incf;\n\t\t\tres+=incf;\n\t\t} \n\t}\n\treturn res;\n}\nint Dinic(){\n\tint maxflow=0;\n\twhile(BFS()) maxflow+=DFS(0,INF);\n\treturn maxflow; \n}\nbool Check(long long tim){\n\tmemset(head,0,sizeof(head));\n\ttot=1;\n\tfor(int i=1;i<=F;i++) add(0,i,cow[i]);\n\tfor(int i=1;i<=F;i++) add(i+F,2*F+1,house[i]);\n\tfor(int i=1;i<=F;i++)\n\t\tfor(int j=1;j<=F;j++)\n\t\t\tif(G[i][j]<=tim) add(i,j+F,INF);\n\treturn Dinic()>=sum1;\n}\nint main(){\n\tscanf(\"%d%d\",&F,&P);\n\tfor(int i=1;i<=F;i++)\n\t\tscanf(\"%d%d\",&cow[i],&house[i]),sum1+=cow[i],sum2+=house[i];\n\tfor(int i=1;i<=F;i++)\n\t\tfor(int j=1;j<=F;j++)\n\t\t\tif(i==j) G[i][j]=0;\n\t\t\telse G[i][j]=MAXINF;\n\tfor(int i=1;i<=P;i++){\n\t\tscanf(\"%d%d%lld\",&a,&b,&c);\n\t\tG[a][b]=G[b][a]=min(G[a][b],c);\n\t}\n\tFloyd();\n\tlong long L=0,R=MAXINF,mid,ans;\n\twhile(L<=R){\n\t\tmid=L+R>>1;\n//\t\tcout<<mid<<endl;\n\t\tif(Check(mid)) ans=mid,R=mid-1;\n\t\telse L=mid+1;\n\t}\n\tif(ans!=0&&ans!=MAXINF) printf(\"%lld\\n\",ans);\n\telse printf(\"-1\\n\");\n\treturn 0;\n}\n```\n\u6b64\u9898\u7efc\u5408\u6027\u6bd4\u8f83\u5f3a\uff0c\u6709\u4e9b\u96be\u5ea6\uff0c\u5b9e\u5728\u662f\u4e00\u9053\u597d\u9898\uff08\u4e5f\u8bb8\u6211\u592a\u5f31\uff09\u3002",
        "postTime": 1679143264,
        "uid": 801978,
        "name": "sane1981",
        "ccfLevel": 0,
        "title": "P6768\u9898\u89e3"
    },
    {
        "content": "\u53ef\u4ee5\u53d1\u73b0\uff0c\u725b\u5982\u679c\u60f3\u8981\u53bb\u5176\u4ed6\u5730\u70b9\u7684\u96e8\u68da\uff0c\u90a3\u4e48\u4e00\u5b9a\u8d70\u6700\u77ed\u8def\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u5148 $O(n^3)$ \u5904\u7406\u6700\u77ed\u8def\uff0c\u7136\u540e\u4e8c\u5206\u7b54\u6848\uff0c\u5c06\u6240\u6709\u6700\u77ed\u8def $\\leq$ \u5f53\u524d\u4e8c\u5206\u7684\u65f6\u95f4\u7684\u8fb9\u52a0\u5165\u3002\n\n\u7136\u540e\u7f51\u7edc\u6d41\u5224\u65ad\u53ef\u884c\u6027\uff0c\u5373\u8d85\u7ea7\u6e90\u70b9\u5411\u6bcf\u4e00\u5757\u7530\u5730\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u725b\u7684\u4e2a\u6570\u7684\u8fb9\uff0c\u7136\u540e\u628a\u7530\u5730\u548c\u96e8\u68da\u62c6\u70b9\uff0c\u96e8\u68da\u5411\u8d85\u7ea7\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a\u96e8\u68da\u6700\u591a\u80fd\u653e\u725b\u7684\u4e2a\u6570\u7684\u8fb9\u3002\u6700\u540e\u4e24\u70b9\u5224\u65ad\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u770b\u662f\u5426\u53ef\u4ee5\u52a0\u8fb9\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <cstring>\n#include <climits>\n#include <queue>\nusing namespace std;\n\n#define int long long\n\nconst int N = 5e6, INF = INT_MAX;\n\nint dis[205][205], cow[N], rain[N], sum;\n\nint n, p, T, S;\nint e[N], h[N], c[N], ne[N], idx;\n\nint cur[N], d[N];\n\nvoid add(int x, int y, int z)\n{\n\te[idx] = y, ne[idx] = h[x], c[idx] = z, h[x] = idx++;\n\te[idx] = x, ne[idx] = h[y], c[idx] = 0, h[y] = idx++;\n}\n\nvoid solve(int maxn)\n{\n\tfor (int i = 0; i <= T; i++) h[i] = -1;\n\tfor (int i = 0; i <= idx; i++)\n\t{\n\t\tc[i] = ne[i] = e[i] = 0;\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tadd(S, i, cow[i]);\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tadd(i + n, T, rain[i]);\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= n; j++)\n\t\t{\n\t\t\tif (dis[i][j] <= maxn)\n\t\t\t{\n\t\t\t\tadd(i, j + n, INF);\n\t\t\t\t//add(j, i, INF);\n\t\t\t\t//printf(\"%lld %lld\\n\", i, j);\n\t\t\t}\n\t\t}\n\t}\n}\n\nbool bfs()\n{\n\tfor (int i = 0; i <= T; i++) d[i] = -1;\n\tqueue<int> q;\n\tq.push(S);\n\td[S] = 0;\n\tcur[S] = h[S];\n\twhile (q.size())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int i = h[u]; ~i; i = ne[i])\n\t\t{\n\t\t\tint j = e[i];\n\t\t\tif (d[j] == -1 && c[i] > 0)\n\t\t\t{\n\t\t\t\td[j] = d[u] + 1;\n\t\t\t\tcur[j] = h[j];\n\t\t\t\tif (j == T) return 1;\n\t\t\t\tq.push(j);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint dfs(int u, int flow)\n{\n\tif (u == T) return flow;\n\tint sum = 0;\n\tfor (int i = cur[u]; ~i && sum < flow; i = ne[i])\n\t{\n\t\tint j = e[i];\n\t\tcur[u] = i;\n\t\tif (d[j] == d[u] + 1 && c[i] > 0)\n\t\t{\n\t\t\tint f = dfs(j, min(c[i], flow - sum));\n\t\t\tif (!f) d[j] = -1;\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum += f;\n\t\t\t\tc[i] -= f;\n\t\t\t\tc[i ^ 1] += f;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\n\nint dinic()\n{\n\tint sum = 0, f;\n\twhile (bfs())\n\t{\n\t\twhile (f = dfs(S, INF))\n\t\t{\n\t\t\tsum += f;\n\t\t}\n\t}\n\treturn sum;\n}\n\nbool check(int x)\n{\n\tsolve(x);\n\treturn dinic() >= sum;\n}\n\nsigned main()\n{\n\tmemset(dis, 0x3f, sizeof dis);\n\tscanf(\"%lld%lld\", &n, &p);\n\tT = 2 * n + 1;\n\tfor (int i = 1; i <= n; i++) scanf(\"%lld%lld\", &cow[i], &rain[i]), dis[i][i] = 0, sum += cow[i];\n\tfor (int i = 1; i <= p; i++)\n\t{\n\t\tint u, v, w;\n\t\tscanf(\"%lld%lld%lld\", &u, &v, &w);\n\t\tdis[u][v] = min(dis[u][v], w);\n\t\tdis[v][u] = min(dis[v][u], w);\n\t}\n\tfor (int k = 1; k <= n; k++)\n\t{\n\t\tfor (int i = 1; i <= n; i++)\n\t\t{\n\t\t\tfor (int j = 1; j <= n; j++)\n\t\t\t{\n\t\t\t\tdis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n\t\t\t}\n\t\t}\n\t}\n\tbool f = 0;\n\tint l = 0, r = INF * 100;\n\twhile (l <= r)\n\t{\n\t\tint mid = l + r >> 1;\n\t\tif (check(mid)) r = mid - 1, f = 1;\n\t\telse l = mid + 1;\n\t}\n\tprintf(\"%lld\\n\", f ? r + 1 : -1);\n\treturn 0;\n}\n```\n",
        "postTime": 1671437031,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "P6768 [USACO05MAR]Ombrophobic Bovines \u53d1\u6296\u7684\u725b"
    },
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6768)\n\n## \u601d\u8def\u7b80\u8ff0\n\u9898\u76ee\u6c42\u7684\u662f\u6bcf\u5934\u725b\u8fdb\u5165\u96e8\u68da**\u6700\u5927\u65f6\u95f4\u7684\u6700\u5c0f\u503c**\uff0c\u5bb9\u6613\u60f3\u5230\u662f\u4e8c\u5206\u7b54\u6848\u3002\n\n\u5148\u4f7f\u7528 Floyd \u9884\u5904\u7406\u6bcf\u4e24\u4e2a\u7530\u5730\u4e4b\u95f4\u7684\u8ddd\u79bb\uff08\u94fa\u57ab\uff09\u3002\n\n\u6bcf\u6b21\u4e8c\u5206\u65f6\u95f4\u7684\u6700\u5927\u503c\uff0c\u5e76\u4f7f\u7528\u7f51\u7edc\u6d41 check\u3002\n\n\u5bb9\u6613\u60f3\u5230\u5c06\u6bcf\u4e2a\u7530\u5730\u62c6\u6210\u4e24\u4e2a\u70b9\uff1a\u725b\u548c\u96e8\u68da\u3002\n\n\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u548c\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9\u3002\u4ece\u8d85\u7ea7\u6e90\u70b9\u8d77\uff0c\u5411\u6bcf\u4e2a\u201c\u725b\u201d\u8282\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u725b\u7684\u6570\u91cf\u7684\u8fb9\uff0c\u5411\u6bcf\u4e2a\u201c\u96e8\u68da\u201d\u8282\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u96e8\u68da\u6240\u80fd\u5bb9\u7eb3\u7684\u6700\u591a\u725b\u6570\u7684\u8fb9\u3002\n\n\u5982\u679c\u4e24\u4e2a\u7530\u5730\u80fd\u591f\u5728\u9650\u5236\u65f6\u95f4\u5185\u4e92\u8fbe\uff08\u7167\u5e94\uff09\uff0c\u90a3\u4e48\u5c31\u5206\u522b\u4ece\u8fd9\u4e24\u4e2a\u7530\u5730\u7684\u201c\u725b\u201d\u8282\u70b9\u5411\u5f7c\u6b64\u201c\u96e8\u68da\u201d\u8282\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u65e0\u7a77\u5927\u7684\u8fb9\u3002\n\n\u6700\u540e\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\uff0ccheck \u6700\u5927\u6d41\u662f\u5426\u7b49\u4e8e\u725b\u7684\u603b\u6570\u3002\n\n**\u6e29\u99a8\u63d0\u793a\uff1a\u672c\u9898\u7684\u4e8c\u5206\u8fb9\u754c\u548c\u6700\u77ed\u8def\u7684\u8fb9\u754c\u8981\u5f00\u5927\u3002**\n\n## \u4e11\u964b\u306e\u4ee3\u7801\n[click here](https://www.luogu.com.cn/paste/x8ub5eww)",
        "postTime": 1656082429,
        "uid": 312306,
        "name": "LJ07",
        "ccfLevel": 0,
        "title": "[Solution]P6768 [USACO05MAR]Ombrophobic Bovines \u53d1\u6296\u7684\u725b"
    },
    {
        "content": "\u5927\u610f\uff1a\u8ba9\u6bcf\u53ea\u5976\u725b\u90fd\u80fd\u8fdb\u5165\u96e8\u68da\u7684\u6700\u5c0f\u65f6\u95f4\n\n\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u8dd1$Floyd$+\u8d2a\u5fc3\uff0c$Floyd$\u7528\u6765\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5206\u914d\u5976\u725b\u8fdb\u5165\u96e8\u68da\uff1f\n\n\u8fd9\u5c31\u662f\u672c\u9898\u6700\u96be\u7684\u5730\u65b9\u2014\u2014\u8dd1\u7f51\u7edc\u6d41$Dinic$\n\n\u65e2\u7136\u8981\u5206\u914d\u5976\u725b\u8fdb\u5165\u96e8\u68da\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u6784\u56fe\u8dd1\u7f51\u7edc\u6d41\u6765\u5206\u914d\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u6784\u56fe\u5462\uff0c\u8fd9\u91cc\u9762\u54ea\u4e2a\u662f\u8d85\u7ea7\u6e90\u70b9$S$\uff0c\u8d85\u7ea7\u6e90\u70b9$T$\uff1f\n\n\u9996\u5148\u6bcf\u5934\u5976\u725b\u90fd\u4f1a\u4ece\u81ea\u5df1\u5f53\u524d\u7684\u725b\u68da\u51fa\u53d1\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u8d85\u7ea7\u6e90\u70b9$S$\u8fde\u5411\u6bcf\u4e00\u4e2a\u725b\u68da\u3002\u5bf9\u5e94\u7684\uff0c\u8fd9\u91cc\u7684\u6bcf\u4e00\u6761\u8fb9\u662f\u5f53\u524d\u725b\u68da\u7684\u5976\u725b\u6570\u91cf\u3002\n\n\u63a5\u7740\u6bcf\u5934\u5976\u725b\u90fd\u53ef\u80fd\u5230\u8fbe\u522b\u7684\u96e8\u68da\uff0c\u53c8\u6216\u8005\u4e0d\u52a8\uff0c\u7559\u5728\u5f53\u524d\u5b83\u7684\u96e8\u68da\uff0c\u6240\u4ee5\u5462\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u96e8\u68da\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u79f0\u4e4b\u4e3a\uff0c\u96e8\u68da\u8d77\u70b9\uff0c\u96e8\u68da\u7ec8\u70b9\u3002\n\n\u5f53\u7136\uff0c\u4e0d\u662f\u6bcf\u4e2a\u96e8\u68da\u90fd\u80fd\u5230\u8fbe\u6bcf\u4e00\u4e2a\u96e8\u68da\uff0c\u6240\u4ee5\u5462\uff0c\u5f53\u4e24\u4e2a\u70b9\u4e4b\u95f4\u901a\u8fc7\u7684\u65f6\u95f4\u5c0f\u4e8e\u4e00\u4e2a\u7279\u5b9a\u503c\uff08\u540e\u9762\u4f1a\u63d0\uff09\uff0c\u6211\u4eec\u624d\u8fde\u8fb9\uff0c\u5f53\u7136\u8fd9\u6761\u8fb9\u7684\u5bb9\u91cf\u662f\u65e0\u9650\u7684\uff08\u6bcf\u6761\u8def\u901a\u8fc7\u5bb9\u91cf\u7684\u9650\u5236\u662f\u65e0\u9650\u7684\uff09\uff0c\u5c31\u8bbe\u7f6e\u4e3a$inf$\n\n\u6700\u540e\u5c06\u6bcf\u4e00\u4e2a\u96e8\u68da\u7ec8\u70b9\u8fde\u5411\u8d85\u7ea7\u6e90\u70b9$T$\uff0c\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\u8bbe\u7f6e\u4e3a\u6bcf\u4e2a\u7530\u5730\u7684\u96e8\u68da\u603b\u6570\u3002\n\n\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/t3ite5iq.png)\n\n\u4e0a\u9762\u7684$cow[i]$\u662f\u7b2c$i$\u4e2a\u7530\u5730\u4e0a\u7684\u5976\u725b\u603b\u6570\uff0c$len[i]$\u662f\u7b2c$i$\u4e2a\u7530\u5730\u4e0a\u7684\u96e8\u68da\u603b\u6570\u3002\n\n\u5f53\u7136\u4e86\uff0c\u6211\u4eec\u521a\u624d\u63d0\u5230\u7684\u7279\u5b9a\u503c\u53c8\u662f\u4ec0\u4e48\u5462\uff1f\n\n\u8fd9\u4e2a\u7279\u5b9a\u503c\u9700\u8981\u2014\u2014\u4e8c\u5206\u7b54\u6848\uff0c\u901a\u8fc7\u4e8c\u5206\u7b54\u6848\u65f6\u95f4\uff0c\u518d\u901a\u8fc7\u6bcf\u4e00\u6b21$mid$\u503c\u4f5c\u4e3a\u7279\u5b9a\u503c\uff0c\u63a5\u7740\u6784\u56fe\uff08\u5c31\u662f\u521a\u624d\u4e0a\u8ff0\u7684\u6784\u56fe\uff09\u8dd1$Dinic$\uff0c\u7136\u540e\u5224\u65ad\u6700\u5927\u6d41\u662f\u5426\u8d85\u8fc7\u6216\u7b49\u4e8e\u6240\u6709\u5976\u725b\u7684\u603b\u6570\u3002\n\n\u6210\u7acb\u5c31\u8bf4\u660e\uff0c\u5728\u5c11\u4e8e$mid$\u7684\u65f6\u95f4\u5185\uff0c\u53ef\u4ee5\u5206\u914d\u6240\u6709\u7684\u5976\u725b\u5230\u8fbe\u96e8\u68da\uff0c\u6700\u540e\u5de6\u53f3\u6307\u9488\u5de6\u53f3\u79fb\u52a8\uff0c\u7f29\u5c0f\u533a\u95f4\u5c31\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n\u6240\u4ee5\u672c\u9898\u7684\u601d\u8def\uff08\u77e5\u8bc6\u70b9\uff09\u4e3a\uff1a\u6700\u77ed\u8def$Floyd$+\u4e8c\u5206\u7b54\u6848+\u7f51\u7edc\u6d41\n\n\u53c2\u8003\u7a0b\u5e8f\n```cpp\n#include<bits/stdc++.h>\n#define int long long \n#define rep(i,a,b) for(int i=a;i<=b;i++)\nusing namespace std;\nconst int N=603100;\nint S,T,n,m;\nstruct Edge\n{\n\tint cap,flow,to,nxt;\n}e[N];\nint in[N],nhead[N],out[N];\nint Maxflow=0;\nint dis[N],head[N],cur=1;\nint dp[2100][2100];\nvoid Add_edge(int x,int y,int cap)\n{\n\te[++cur].cap=cap;\n\te[cur].flow=0;\n\te[cur].nxt=head[x];\n\te[cur].to=y;\n\thead[x]=cur;\n\t\n\te[++cur].cap=0;\n\te[cur].flow=0;\n\te[cur].nxt=head[y];\n\te[cur].to=x;\n\thead[y]=cur;\n}\nqueue<int>Q;\nbool Bfs(int s,int t)\n{\n\twhile(Q.size()) Q.pop();\n\tmemset(dis,0,sizeof(dis));\n\tdis[s]=1;Q.push(s);\n\twhile(Q.size())\n\t{\n\t\tint x=Q.front();Q.pop();\n\t\tfor(int i=head[x];i;i=e[i].nxt)\n\t\t\tif(e[i].cap>e[i].flow && !dis[e[i].to])\n\t\t\t{\n\t\t\t\tdis[e[i].to] = dis[x]+1;Q.push(e[i].to);\n\t\t\t\tif(e[i].to==t) return true;\n\t\t\t}\n\t}\n\treturn false;\n}\nint Dfs(int x,int a,int t)\n{\n\tif(x==t||a==0) return a;\n\tint f,flow=0;\n\tfor(int i=nhead[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].to;\n\t\tif(dis[y]==dis[x]+1&&(f=Dfs(y,min(a,e[i].cap-e[i].flow),t))>0)\n\t\t{\n\t\t\tflow+=f;a-=f;e[i].flow+=f;e[i^1].flow-=f;nhead[x]=i;\n\t\t\tif(!a)break;\n\t\t}\n\t}\n\treturn flow;\n}\nvoid rebuild(int limit)\n{\n\tmemset(head,0,sizeof(head));cur=1;\n\trep(i,1,n)\n\t\tAdd_edge(S,i,in[i]),Add_edge(i+n,T,out[i]),Add_edge(i,i+n,0x3f3f3f3f);\n\trep(i,1,n)\n\t\trep(j,1,n)\n\t\t\tif(dp[i][j]<=limit)Add_edge(i,j+n,0x3f3f3f3f);\n}\nsigned main()\n{\n\tcin>>n>>m;\n\tmemset(dp,0x3f,sizeof(dp));\n\trep(i,1,n)\n\t\tcin>>in[i]>>out[i],Maxflow+=in[i];\n\trep(i,1,m)\n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tdp[x][y]=dp[y][x]=min(dp[x][y],z);\n\t}\n\tint Max=0;\n\trep(k,1,n)\n\t\trep(i,1,n)\n\t\t\trep(j,1,n)\n\t\t\t\tdp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]);\n\tS=0;T=2*n+1;\n\tint ans=0x3f3f3f3f3f3f3f3f,low=0,high=0x3f3f3f3f3f3f3f3f;\n\twhile(low<=high)\n\t{\n\t\tint Mid=(low+high)>>1;\n\t\trebuild(Mid);\n\t\tint maxflow=0;\n\t\twhile(Bfs(S,T))\n\t\t{\n\t\t\tfor(int i=0;i<=T;i++)nhead[i]=head[i];\n\t\t\tmaxflow+=Dfs(S,0x3f3f3f3f,T);\n\t\t}\n\t\tif(maxflow>=Maxflow)high=Mid-1,ans=min(ans,Mid);\n\t\telse low=Mid+1;\n\t}\n\tif(ans==0x3f3f3f3f3f3f3f3f)cout<<\"-1\"<<endl;\n\telse cout<<ans<<endl;\n\treturn 0;\n} \n```\n\u672c\u9898\u5efa\u8bae\u52a0\u4e0a\u6807\u7b7e\uff1a\u6700\u77ed\u8def$Floyd$\uff0c\u4e8c\u5206\u7b54\u6848\uff0c\u7f51\u7edc\u6d41\n",
        "postTime": 1605675564,
        "uid": 51800,
        "name": "\u5929\u5357\u5730\u5317",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P6768 \u3010[USACO05MAR]Ombrophobic Bovines \u53d1\u6296\u7684\u725b\u3011"
    }
]