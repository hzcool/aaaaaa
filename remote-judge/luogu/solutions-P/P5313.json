[
    {
        "content": "\u8001\u5e08\u5e03\u7f6e\u7684\u83ab\u961f\u9898\u5355\u7684\u6700\u540e\u4e00\u9053\u6bd2\u7624\uff0c\u5199\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\u3002\n\n___\n\n\u7b80\u8981\u9898\u610f\uff1a\u533a\u95f4\u4e2d\u6307\u5b9a\u516c\u5dee\u7684\u7b49\u5dee\u6570\u5217\u7684\u6700\u957f\u957f\u5ea6\uff0c\u56fa\u5b9a\u9996\u9879\u5c0f\u4e8e\u516c\u5dee\u3002\n\n\u4e0d\u6307\u5b9a\u516c\u5dee\u6ca1\u51c6\u8fd8\u80fd\u4e71\u641e\uff0c\u6307\u5b9a\u516c\u5dee\u4e4b\u540e\u5c31\u6ca1\u6709\u522b\u7684\u529e\u6cd5\u4e86\u2014\u2014 bitset \u538b\u4f4d\u4e71\u641e\u5427\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u6709\u4e00\u4e2a\u53e3\u80e1\uff1a\u83ab\u961f\u5f97\u51fa\u6307\u5b9a\u533a\u95f4\u7684 bitset\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a bitset \u7ed9\u6bcf\u516c\u5dee\u4e2a\u4f4d\u5212\u4e3a\u4e00\u4e2a\u5c0f bitset\uff0c\u7136\u540e\u4ece\u524d\u5230\u540e\u4e00\u4e2a\u4e00\u4e2a and \u8d77\u6765\uff0c\u6700\u591a\u80fd and \u591a\u5c11\u4e2a\u5c31\u662f\u7b54\u6848\u3002\n\n\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u8bbe\u503c\u57df\u4e3a $V$\uff0c\u8fd9\u6b21\u8be2\u95ee\u7684\u516c\u5dee\u662f $B$,\u90a3\u4e48\u5e94\u5f53\u5206\u51fa\u6765 $\\dfrac{V}{B}$ \u4e2a\u5757\uff0c\u6bcf\u4e00\u4e2a\u5757\u5168\u90e8 and \u8d77\u6765\uff0c\u597d\u50cf\u770b\u8d77\u6765\u5355\u6b21\u662f $O(B\\times\\dfrac{V}{B}\\times \\dfrac{1}{w}) = O(\\dfrac{V}{w})$\uff0c\u6ca1\u4ec0\u4e48\u5927\u95ee\u9898\u3002\n\nover\uff1f Ynoi \u600e\u4e48\u53ef\u80fd\u8fd9\u4e48 naive\u3002\u6211\u4eec\u53d1\u73b0\u5f53\u516c\u5dee\u5c0f\u4e8e $w$ \u7684\u65f6\u5019\uff0c\u5f97\u5230\u7684 bitset \u6570\u91cf\u8fc7\u591a\uff0c\u800c\u5206\u6790\u4e2d\u5206\u6bcd\u4e0a\u7684 $w$ \u4e5f\u9664\u4e0d\u4e0b\u6765\u3002\u6240\u4ee5\uff0c\u4f1a\u88ab\u5361\u5230 $O(n^2)$\u3002\n\n\u4f46\u662f\u81f3\u5c11\u6709\u4e00\u4e2a\u597d\u6d88\u606f\uff1a\u73b0\u5728\u53ea\u9700\u8981\u5904\u7406 $B<w$ \u7684\u60c5\u51b5\u4e86\uff0c\u53cd\u6b63 $w$ \u5f88\u5c0f\uff0c\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $B$ \u5206\u522b\u5904\u7406\u3002\n\n\u53d1\u73b0\u5176\u5b9e\u7b49\u5dee\u6570\u5217\u7684\u5b58\u5728\u6027\u5176\u5b9e\u662f\u5efa\u7acb\u5728 $B$ \u7684\u6bcf\u4e00\u4e2a\u5269\u4f59\u7c7b\u4e0b\u7684\uff0c\u6240\u4ee5\u5c31\u6709\u529e\u6cd5\u4e86 \u2014\u2014 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5269\u4f59\u7c7b\u5f00 bitset\uff0c\u7136\u540e\u7b54\u6848\u5c31\u662f\u8fd9\u4e9b bitset \u7684 mex \u7684\u6700\u5927\u503c\u3002\n\n\u5206\u6790\u8fd9\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u83ab\u961f\uff0c$O(n\\sum_{i<w}\\sqrt{qcnt_i})$\uff0c\u6c42\u7b54\u6848\u5355\u6b21 $O(i\\times \\dfrac{V}{i}\\times \\dfrac{1}{w}) = O(\\dfrac{V}{w})$\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff1a\u6211\u4eec\u5c31\u5728 $O(n\\sqrt q + \\dfrac{qV}{w})$ \u7684\u590d\u6742\u5ea6\u4e0b\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\n\n___\n\n\u7531\u4e8e\u672c\u4eba\u5728\u81ea\u5df1\u5199\u7684\u65f6\u5019\u7740\u5b9e\u88ab\u6076\u5fc3\u4e86\u4e00\u9635\u5b50\uff0c\u6240\u4ee5\u7ed9\u51fa\u4e00\u4e2a\u4ee3\u7801\u4f5c\u4e3a\u53c2\u8003\u3002\uff08\u5e26\u6709\u6ce8\u91ca\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <algorithm>\nconst int maxn = 1e5+5,maxb = 64;\nconst int Mxdt = (1<<16);inline char pc(char ch,bool bj){\tstatic char buf[Mxdt],*p1=buf,*p2=buf+Mxdt;\treturn ((bj)||(*p1++=ch)&&p1==p2)&&fwrite(p1=buf,1,p1-buf,stdout),0;}void print(int x){\tif(x>9)print(x/10);\tpc(x%10^48,false);}inline void printnum(int x,int ch){\tif(x < 0)pc('-',false),x=-x;\tprint(x),pc(ch,false);}\nchar gc()\n{\n\tstatic char buf[1<<16],*S,*T;\n\tif(T==S)\n\t{\n\t\tT=(S=buf)+fread(buf,1,1<<16,stdin);\n\t\tif(T==S) return EOF;\n\t}\n\treturn *S++;\n}\n#define getchar gc\ninline int re(){\n\tchar c;\n\tint w=1;\n\twhile((c=getchar())>'9'||c<'0')if(c == '-')w=-1;\n\tint res = c-'0';\n\twhile((c=getchar())>='0'&&c<='9')res = res*10+c-'0';\n\treturn res*w;\n}\ntypedef unsigned long long ull;\ninline int max(int a,int b){return a>b?a:b;}\nint n,m,bl,a[maxn],Ans[maxn];\null filter[maxb];\nstruct Bitset{\n\t//Bitset \u5185\u90e8\u64cd\u4f5c\u4e0d\u591a\u8d58\u8ff0\uff0c\u770b\u540d\u5b57\u5c31\u77e5\u9053\u662f\u4ec0\u4e48\u3002 \n\tint siz;\n\tstd :: vector <ull> b;\n\tvoid reset(){for(int i=0;i<=siz;++i)b[i] = 0;}\n\tvoid flip(){for(int i=0;i<=siz;++i)b[i] = ~b[i];}\n\t//\u7ed9\u4e00\u4e2asiz\uff0c\u52a8\u6001\u5206\u914d\u5185\u5b58 \n\tvoid init(int SIZ){b.resize((SIZ>>6)+1),siz = b.size()-1,reset();}\n\tvoid set1(int p){b[p>>6] |= (1ull<<(p&63));}\n\tvoid set0(int p){b[p>>6] &= ~(1ull<<(p&63));}\n\tbool any(){for(int i=0;i<=siz;++i)if(b[i])return 1;return 0;}\n\tint findfirst0(){\n\t\tfor(int i=0;;++i)\n\t\t\tif((~b[i]) != 0){\n\t\t\t\tfor(int j=0;j<64;++j)\n\t\t\t\t\tif(!(b[i]&(1ull<<j)))\n\t\t\t\t\t\treturn (i<<6)|j;\n\t\t\t}\t\n\t}\n\tvoid operator &=(const Bitset &sec){for(int i=0;i<=siz;++i)b[i] &= sec.b[i];}\n};\nstruct Query{\n\tint l,r,b,id;\n\tbool operator <(Query b){\n\t\tint blx = l/bl,bly = b.l/bl;\n\t\tif(blx == bly)return blx&1?r<b.r:r>b.r;\n\t\treturn blx<bly;\n\t}\n};\nint qbcnt;\n//qb: b\u8f83\u5927\u7684\u8be2\u95ee\uff0cqs b\u8f83\u5c0f\u7684\u8be2\u95ee \nQuery qb[maxn];\nstd :: vector <Query> qs[maxb];\nint nowb,cnt[maxn];\n//vis \u56de\u7b54b\u8f83\u5927\u7684\u8be2\u95ee\u7528\u7684\u5927bitset\n//sp split\u51fa\u6765\u7684\u5f88\u591a\u5c0fbitset \n//ans \u56de\u7b54b\u8f83\u5927\u7684\u8be2\u95ee\u7528\u7684\u7b54\u6848bitset \nBitset vis,ans,block[maxb],sp[1605];\n//\u4e00\u4e2a\u5751\u70b9\uff1a\u81ea\u5df1\u5b9a\u4e49\u7684bitset\u6ca1\u6709\u6790\u6784\u51fd\u6570\uff0c\u6240\u4ee5\u7528vector\u5c31\u6ca1\u6cd5clear\u2026\u2026\u4f1a\u76f4\u63a5RE \nvoid Split(int len){\n\tfor(int i=0;i<=(100001/len+2);++i)sp[i].init(len);//\u9884\u5904\u7406\u957f\u5ea6 \n\tint stpos=0,ndsiz=sp[0].siz,nowsiz=0,nowcnt=0;\n\t/*\n\tstpos: \u8fd9\u4e00\u6b21\u53d6\u51fa\u7684\u5757\u5728 vis \u4e2d\u5757\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n\tndsiz\uff1a\u6bcf\u4e00\u4e2asplit\u51fa\u7684\u5c0fbitset\u9700\u8981\u591a\u5c11\u4e2a\u5757\n\tnowsiz\uff1a\u73b0\u5728\u6b63\u5728\u586b\u7684\u5c0fbitset\u586b\u5230\u54ea\u91cc\u4e86\n\tnowcnt\uff1a\u73b0\u5728\u6b63\u5728\u586b\u7b2c\u51e0\u4e2a\u5c0fBitset \n\t*/\n\tfor(int i=0;i<=vis.siz;++i){\n\t\tif(nowsiz == ndsiz){//\u5982\u679c\u5f53\u524d\u5df2\u7ecf\u586b\u5230\u4e86\u6b63\u5728\u586b\u7684\u5c0fBitset\u7684\u6700\u540e\u4e00\u4e2a\n\t\t\t//\u5982\u679c\u52a0\u4e0a\u6700\u540e\u7684\u96f6\u6563\u5757\u6ca1\u6709\u8d8a\u5757 \n\t\t\tif(stpos + (len&63) <= 63)sp[nowcnt].b[nowsiz] = (vis.b[i]&(filter[stpos+(len&63)-1]-(stpos?filter[stpos-1]:0)))>>stpos,--i;\n\t\t\t//\u53cd\u4e4b \n\t\t\t//\u6ce8\u610f\uff01\u56e0\u4e3a\u8fd9\u91cc\u4f1a\u8bbf\u95ee\u5230 vis.b[i+1]\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u8bbf\u95ee\u5230\u975e\u6cd5\u5185\u5b58\uff0c\u9700\u8981\u7279\u5224\uff01 \n\t\t\telse if(i != vis.siz)sp[nowcnt].b[nowsiz] = (vis.b[i]>>stpos)|((vis.b[i+1]&filter[stpos+(len&63)-63])<<(64-stpos));\n\t\t\telse sp[nowcnt].b[nowsiz] = (vis.b[i]>>stpos);\n\t\t\tstpos = (stpos+(len&63))&63,nowsiz = 0,++nowcnt;\n\t\t}\n\t\telse{\n\t\t\t//\u53ef\u4ee5\u76f4\u63a5\u53d6\u51fa \n\t\t\tif(stpos == 0)sp[nowcnt].b[nowsiz] = vis.b[i];\n\t\t\t//\u5426\u5219\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u5904\u7406 \n\t\t\t//\u8fd9\u91cc\u540c\u7406\u8981\u7279\u5224 \n\t\t\telse if(i != vis.siz)sp[nowcnt].b[nowsiz] = (vis.b[i]>>stpos)|((vis.b[i+1]&filter[stpos-1])<<(64-stpos));\n\t\t\telse sp[nowcnt].b[nowsiz] = (vis.b[i]>>stpos);\n\t\t\t++nowsiz;\n\t\t}\n\t}\n}\n//\u83ab\u961f\u64cd\u4f5c \nvoid Add1(int x){++cnt[x];if(cnt[x] == 1)vis.set1(x);}\nvoid Del1(int x){--cnt[x];if(cnt[x] == 0)vis.set0(x);}\nvoid Add2(int x){++cnt[x];if(cnt[x] == 1)block[x%nowb].set1(x/nowb);}\nvoid Del2(int x){--cnt[x];if(cnt[x] == 0)block[x%nowb].set0(x/nowb);}\nint main(){\n//\tfreopen(\"data.in\",\"r\",stdin);\n//\tfreopen(\"my.out\",\"w\",stdout);\n\tfilter[0] = 1;\n\tfor(int i=1;i<64;++i)filter[i] = filter[i-1] + (1ull<<i);\n\tn = re(); \n\tfor(int i=1;i<=n;++i)a[i] = re();\n\tm = re();\n\tfor(int i=1,l,r,b;i<=m;++i){\n\t\tl = re(),r = re(),b = re();\n\t\tif(b < 64)qs[b].push_back((Query){l,r,b,i});\n\t\telse qb[++qbcnt] = (Query){l,r,b,i};\n\t}\n\t//Solveqb\n\tvis.init(100001);\n\tbl = n/sqrt(qbcnt),std :: sort(qb+1,qb+qbcnt+1);\n\tfor(int i=1,l=1,r=0;i<=qbcnt;++i){\n\t\twhile(l>qb[i].l)Add1(a[--l]);\n\t\twhile(r<qb[i].r)Add1(a[++r]);\n\t\twhile(l<qb[i].l)Del1(a[l++]);\n\t\twhile(r>qb[i].r)Del1(a[r--]);\n\t\tSplit(qb[i].b),ans.init(qb[i].b),ans.flip();\n\t\tfor(int j=0;;++j){\n\t\t\tans &= sp[j];\n\t\t\tif(!ans.any()){Ans[qb[i].id] = j;break;}\n\t\t}\n\t}\n\t//Solveqs\n\tfor(int i=1;i<64;++i){\n\t\tif(!qs[i].size())continue;\n\t\tmemset(cnt,0,sizeof(cnt)),nowb = i;\n\t\tbl = n/sqrt(qs[i].size());//\u8fd9\u91cc\u8fd9\u79cd\u6b63\u786e\u7684block\u5927\u5c0f\u5c31\u975e\u5e38\u91cd\u8981\u4e86 \n\t\tstd :: sort(qs[i].begin(),qs[i].end());\n\t\tfor(int j=0;j<i;++j)block[j].init(100001/i+1);\n\t\tfor(int j=0,l=1,r=0;j<qs[i].size();++j){\n\t\t\twhile(l>qs[i][j].l)Add2(a[--l]);\n\t\t\twhile(r<qs[i][j].r)Add2(a[++r]);\n\t\t\twhile(l<qs[i][j].l)Del2(a[l++]);\n\t\t\twhile(r>qs[i][j].r)Del2(a[r--]);\n\t\t\tfor(int k=0;k<i;++k)\n\t\t\t\tAns[qs[i][j].id] = max(Ans[qs[i][j].id],block[k].findfirst0());//Max(Mex()) \n\t\t}\n\t}\n\tfor(int i=1;i<=m;++i)printnum(Ans[i],'\\n');\n\treturn pc('\u2642',1);\n}\n```\n\u5176\u5b9e\u8fd8\u7b97\u597d\u5199\u7684\uff1f",
        "postTime": 1619497357,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 WBLT"
    },
    {
        "content": "~~\u03bc'sic forever~~\n\n\u83ab\u961f+\u63d0\u53d6\u533a\u95f4bitset\u3002\n\n\u5bf9\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u83ab\u961f\u5f97\u51fa\u6bcf\u4e2a\u6570\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u628a\u5b83\u538b\u6210\u4e00\u4e2abitset\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u5c06bitset\u6bcf$b$\u4e2a\u5206\u6210\u4e00\u5757\uff0c\u4ece\u5de6\u5f80\u53f3\u6309\u4f4d\u4e0e\u8d77\u6765\u3002\u53ea\u8981bitset\u4e0d\u4e3a\u7a7a\uff0c\u5219\u6709\u8fd9\u4e2a\u957f\u5ea6\u7684\u7b54\u6848\u3002\n\n\u5bf9\u4e8e$b$\u8f83\u5927\u7684\u8be2\u95ee\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\sqrt m+\\frac{100000m}{64})$\u3002\n\n\u5f53$b$\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0cbitset\u4f1a\u88ab\u5361\u5230$O(n^2)$\uff0c\u6240\u4ee5\u8981\u7279\u6b8a\u5904\u7406\u3002\n\n\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u4e0d\u540c\u7684$b$\u8fdb\u884c\u4e00\u6b21\u83ab\u961f\uff0c\u5f00$b$\u4e2abitset\uff0c\u7f16\u53f7\u4e3a$i$\u7684bitset\u7684\u7b2c$j$\u4f4d\u8868\u793a\u7b2c$j$\u4e2a\u5757\u7684\u7b2c$i$\u4e2a\u6570\u662f\u5426\u5b58\u5728\u3002\n\n\u7136\u540e\u5bf9\u6bcf\u4e2abitset\u6c42\u4e00\u4e2amex\u5373\u53ef\u3002\n\n\u6b64\u5904\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\sum\\sqrt{m_i}+\\frac{100000m}{64})$\u3002\n\n\u9700\u8981\u624b\u5199bitset\u3002\n\n\u5408\u7406\u8c03\u4e00\u4e0b\u4e34\u754c\u503c\u5373\u53ef\u3002\n",
        "postTime": 1552982179,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5266 \u3010\u50d5\u305f\u3061\u306f\u3072\u3068\u3064\u306e\u5149\u3011"
    },
    {
        "content": "\u597d\u50cf\u662f\u6211\u7b2c\u4e00\u6b21\u7ed9 Ynoi \u5199\u9898\u89e3\uff1f\n\n\u5bf9\u4e8e\u8fd9\u79cd\u8be2\u95ee\u7279\u522b\u975e\u5e38\u89c4\u7684\u9898\uff0c\u5927\u6982\u5f88\u96be\u7528\u4e00\u822c\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u5b83\u3002\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7528 bitset \u5b58\u4e0b\u6570\u5b57\u7684\u51fa\u73b0\u60c5\u51b5\uff0c\u7136\u540e\u7528\u4e00\u4e9b bitset \u7684\u795e\u79d8\u64cd\u4f5c\u628a\u590d\u6742\u5ea6\u9664\u4e2a 64\uff0c\u7136\u540e\u4f60\u5c31\u53d1\u73b0\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n\u8fd9\u9053\u9898\u4e5f\u662f\u540c\u7406\u3002\u60f3\u5230\u7528 bitset \u4e4b\u540e\u5c31\u6bd4\u8f83\u597d\u529e\u4e86\u3002\u9996\u5148\u7528\u83ab\u961f\u63d0\u53d6\u51fa\u4e00\u6bb5\u533a\u95f4\u4e2d\u4ee3\u8868\u6570\u5b57\u51fa\u73b0\u60c5\u51b5\u7684 bitset\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5927 bitset \u4ece $0$ \u5f00\u59cb\u5206\u88c2\u6210\u4e00\u4e9b\u957f\u5ea6\u4e3a $b$ \u7684\u5c0f bitset\u3002\u663e\u7136\uff0c\u5982\u679c\u5c06\u5206\u88c2\u51fa\u6765\u7684\u8fd9\u4e9b bitset \u5168\u90e8 and \u8d77\u6765\uff0c\u7b2c\u4e00\u6b21\u5168\u4e3a $0$ \u65f6\u7684\u5c0f bitset \u7684\u4e0b\u6807\uff08\u4e0b\u6807\u4ece $0$ \u5f00\u59cb\uff09\u5373\u4e3a\u672c\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\n\u8fd9\u6837\u505a\u5f53\u5206\u51fa\u7684 bitset \u6570 $\\leq \\frac{V}{w}$ \u65f6\uff0c\u590d\u6742\u5ea6\u80fd\u591f\u4fdd\u8bc1\u5355\u6b21\u64cd\u4f5c $O(\\frac{V}{w})$\u3002\u4f46\u662f\u5f53\u5206\u51fa\u7684 bitset \u6570\u8fc7\u591a\uff0c\u5373 $b < w$ \u65f6\uff0c\u590d\u6742\u5ea6\u5c31\u9000\u5316\u5230 $O(\\frac{V}{b})$\u3002\u7531\u4e8e\u672c\u9898\u51fa\u9898\u4eba\uff0c\u8fd9\u79cd\u505a\u6cd5\u80af\u5b9a\u88ab\u5361\u6389\u4e86\u3002\u8003\u8651\u7c7b\u4f3c\u6839\u53f7\u5206\u6cbb\uff0c\u5bf9 $b < w$ \u7684\u60c5\u51b5\u7279\u6b8a\u5904\u7406\u3002\n\n\u7531\u4e8e\u6b64\u65f6 $b < w$\uff0c\u8003\u8651\u4e00\u79cd\u6bd4\u8f83\u66b4\u529b\u7684\u65b9\u6cd5\u3002\u5bf9\u4e0d\u540c\u7684 $b$ \u5404\u505a\u4e00\u6b21\u83ab\u961f\u3002\u5f00\u4e00\u4e2a\u957f\u4e3a $b$ \u7684 bitset \u6570\u7ec4\u3002\u628a\u6240\u6709 $\\bmod$ $b$ \u540c\u4f59\u7684\u503c\u9664\u4ee5 $b$ \u540e\u653e\u8fdb\u540c\u4e00\u4e2a bitset \u91cc\u9762\u3002\u8be2\u95ee\u65f6\u5bf9\u6bcf\u4e2a bitset \u6c42 mex \u7684\u6700\u5927\u503c\u5373\u53ef\u3002\u83ab\u961f\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sum{\\sqrt{m_i}})$\uff0cbitset \u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e0e\u4e0a\u4e00\u6bb5\u8fc7\u7a0b\u7684\u603b\u548c\u4e3a $O(\\frac{Vm}{w})$\u3002\n\n\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\frac{Vm}{w}+n\\sum{\\sqrt{m_i}})$\u3002\n\n\u4f46\u662f `std::bitset` \u4e0d\u652f\u6301\u5206\u88c2\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u7684\u4ee3\u7801\u96be\u5ea6\u5728\u4e8e\u624b\u5199 bitset\u3002\n\n\u56e0\u6b64\u63a5\u4e0b\u6765\u8fd9\u7bc7\u9898\u89e3\u5c06\u7740\u91cd\u4ecb\u7ecd\u5982\u4f55\u624b\u5199 bitset\u3002\u56e0\u4e3a\u8fd9\u662f\u672c\u4eba\u7b2c\u4e00\u6b21\u624b\u5199 bitset\u3002\u6240\u4ee5\u53c2\u8003\u4e86\u4e00\u4e0b\u522b\u7684\u9898\u89e3\u3002\n\n\u8bbe $w=64$\uff0c\u5219 $x$ \u5728 bitset \u4e2d\u7684\u4e0b\u6807\u4e3a $\\frac{x}{w}=x>>6$\uff0c\u538b\u4f4d\u540e\u5728\u6570\u4e2d\u7684\u4e8c\u8fdb\u5236\u4f4d\u6570\u4e3a $x \\bmod w = x \\& 63$\u3002\u4e0b\u6587\u4e2d\u8bbe $div=6,mod=63$\uff0c$size$ \u4e3a\u8be5 bitset \u4e2d\u538b\u4f4d\u540e\u6570\u7684\u4e2a\u6570\uff0c$v$ \u4e3a\u7528\u4e8e\u5b58\u50a8\u8fd9\u4e9b\u6570\u7684 vector\u3002\n\n1. \u4e00\u4e9b\u57fa\u7840\u64cd\u4f5c\n\n   ```cpp\n   inline void reset() {\n      for (int i = 0; i <= size; i++)\n        v[i] = 0;\n   }\n   inline void set() {\n      for (int i = 0; i <= size; i++)\n        v[i] = ~0ull;\n   }\n   inline void set1(int x) {\n      v[x >> DIV] |= 1ull << (x & MOD);\n   }\n   inline void set0(int x) {\n      v[x >> DIV] &= ~(1ull << (x & MOD));\n   }\n   inline bool any() {\n      for (int i = 0; i <= size; i++)\n        if (v[i])\n          return 1;\n      return 0;\n   }\n   inline void operator&=(const Bitset &q) {\n      for (int i = 0; i <= size; i++)\n        v[i] &= q.v[i];\n   }\n   ```\n\n   \u8fd9\u4e9b\u64cd\u4f5c\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u89e3\u91ca\u3002\n\n2. \u521d\u59cb\u5316\u51fd\u6570 `init()`\n\n   ```cpp\n   inline void init(int x, bool val) {\n      v.resize((x >> DIV) + 2), size = x >> DIV, val ? set() : reset();\n   }\n   ```\n\n   \u8fd9\u4e2a\u51fd\u6570\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u662f vector \u7684\u7a7a\u95f4\u5fc5\u987b\u8981\u5f80\u540e\u591a\u5f00 1 \u4e2a\uff0c\u65b9\u4fbf\u540e\u7eed\u7684 `split()`\u3002\n\n3. \u6c42\u7b2c\u4e00\u6b21 $0$ \u7684\u51fa\u73b0\u4f4d\u7f6e `mex()` \u64cd\u4f5c\n\n   ```cpp\n   inline int mex() {\n      for (int i = 0;; i++)\n        if (~v[i])\n          return i << DIV | __builtin_ctzll(~v[i]);\n   }\n   ```\n\n   \u4ece $v_0$ \u5f00\u59cb\u4e00\u76f4\u5f80\u540e\u627e\uff0c\u53ea\u8981\u9047\u5230\u7b2c\u4e00\u6b21 $v_i$ \u4e2d\u5305\u542b $0$\u3002\u5219\u8fd4\u56de\u7b54\u6848\u3002\u5176\u4e2d `i << DIV` \u8868\u793a\u524d\u9762\u7684\u4f4d\u6570\uff0c`__builtin_ctzll()` \u662f\u4e00\u4e2a gcc \u7684\u5185\u5efa\u51fd\u6570\uff0c\u7528\u4e8e $O(1)$ \u8ba1\u7b97\u4e00\u4e2a `unsigned long long` \u7c7b\u578b\u7684\u6570\u7684\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u672b\u5c3e 0 \u7684\u4e2a\u6570\u3002\u7528 `~` \u8fdb\u884c\u53d6\u53cd\u4f7f\u5176\u53d8\u4e3a\u8ba1\u7b97 $v_i$ \u672b\u5c3e 1 \u7684\u4e2a\u6570\u3002\n\n4. \u5206\u88c2\u64cd\u4f5c `split()` \n\n   \u6b63\u662f\u56e0\u4e3a\u8fd9\u4e2a\u64cd\u4f5c\u624d\u903c\u6211\u4eec\u624b\u5199 bitset\u3002\n\n   ```cpp\n   inline void split(int len, Bitset res[]) {\n      for (int i = 0; i <= V / len + 1; i++)\n        res[i].init(len, 0);\n      int begin = 0, need = res[0].size, place = 0, cur = 0;\n      for (int i = 0; i <= size; i++) {\n        if (place == need)\n          res[cur].v[place] = (begin + (len & MOD) <= MOD)\n                            ? (v[i--] & filter[begin + (len & MOD)]) >> begin\n                            : v[i] >> begin | (v[i + 1] & filter[begin + (len & MOD) & MOD]) << (W - begin),\n          begin = begin + (len & MOD) & MOD, place = 0, cur++;\n        else\n          res[cur].v[place] = begin ? (v[i] >> begin | (v[i + 1] & filter[begin]) << (W - begin)) : v[i], place++;\n      }\n   }\n   ```\n\n   \u9996\u5148\u628a $res_i$ \u521d\u59cb\u5316\u3002\n\n   $x \\& filter_i$ \u8868\u793a\u53ea\u4fdd\u7559 $x$ \u7684\u540e $i$ \u4f4d\uff08$[0,i-1]$ \u4f4d\uff09\u3002\n\n   \u8bbe $begin$ \u8868\u793a\u5f53\u524d\u505a\u5230\u5927 bitset \u4e2d\u6570\u7684\u54ea\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff08\u8303\u56f4\u4e3a $[0,w-1]$\uff09\uff0c$need$ \u8868\u793a\u4e00\u4e2a\u5c0f bitset \u4e2d\u6570\u7684\u4e2a\u6570\uff0c$place$ \u8868\u793a\u5f53\u524d\u505a\u5230\u7684\u6570\u5728\u5c0f bitset \u4e2d\u7684\u4e0b\u6807\uff0c$cur$ \u8868\u793a\u5f53\u524d\u505a\u5230\u7684\u5c0f bitset \u7684\u7f16\u53f7\u3002\n\n   - \u5f53\u505a\u5230\u8be5\u5c0f bitset \u7684\u6700\u540e\u4e00\u4e2a\u6570\u65f6\uff0c\u52a0\u5165\u5c0f bitset \u7684\u6570\u7684\u4f4d\u6570\u5e94\u8be5\u4e3a  $len \\bmod w = len \\& 63$\u3002\n     - \u5f53\u5927 bitset \u7684\u7b2c $i$ \u4e2a\u6570\u8db3\u591f\u65f6\uff1a\u5c06\u5927 bitset \u4e2d\u7b2c $i$ \u4e2a\u6570\u7684 $[begin,begin+len \\bmod w-1]$ \u4f4d\u52a0\u5165\u5c0f bitset\u3002\n     - \u5f53\u5927 bitset \u7684\u7b2c $i$ \u4e2a\u6570\u4e0d\u591f\u65f6\uff0c\u9700\u8981\u4ece\u7b2c $i+1$ \u4e2a\u6570\u501f\u4f4d\u3002\u5c06\u7b2c $i$ \u4e2a\u6570\u7684 $[begin, w-1]$ \u4f4d\u548c \u7b2c $i+1$ \u4e2a\u6570\u7684 $[0,(begin+(len \\bmod w)) \\bmod w - 1]$ \u4f4d\u52a0\u5165\u5c0f bitset\u3002\n   - \u505a\u5230\u8be5\u5c0f bitset \u7684\u6700\u540e\u4e00\u4e2a\u6570\u4e4b\u524d\uff0c\u52a0\u5165\u5c0f bitset \u7684\u6570\u7684\u4f4d\u6570\u5e94\u8be5\u4e3a $w$\u3002\n     - \u5f53\u5927 bitset \u7684\u7b2c $i$ \u4e2a\u6570\u8db3\u591f\uff0c\u5373 $begin=0$ \u65f6\uff0c\u5c06\u6574\u4e2a\u6570\u52a0\u5165\u5c0f bitset\u3002\n     - \u5f53 $begin \\neq 0$ \u65f6\uff0c\u9700\u8981\u4ece\u7b2c $i+1$ \u4e2a\u6570\u501f\u4f4d\u3002\u5c06\u7b2c $i$ \u4e2a\u6570\u7684 $[begin, w-1]$ \u4f4d\u548c \u7b2c $i+1$ \u4e2a\u6570\u7684 $[0,begin-1]$ \u4f4d\u52a0\u5165\u5c0f bitset\u3002\n   \n   \u8fd9\u91cc\u5c31\u80fd\u770b\u51fa\u4e4b\u524d\u5728 `init()` \u4e2d\u628a vector \u5f80\u540e\u591a\u5f00 1 \u4e2a\u7684\u4f5c\u7528\u4e86\u3002\u53ef\u4ee5\u8ba9\u6211\u4eec\u4e0d\u7528\u7279\u5224 $i=size$\u3002\u5426\u5219\u8981\u52a0\u51e0\u884c\u7279\u5224 $i=size$ \u9632\u6b62 $i+1$ \u8d8a\u754c\u3002\n\n\u4e4b\u540e\u7684\u4ee3\u7801\u5c31\u4e0d\u96be\u5199\u4e86\u3002\u6839\u636e Ynoi \u4f20\u7edf\uff0c\u4e0d\u7ed9\u51fa\u5b8c\u6574\u4ee3\u7801\u3002\n\n[bitset \u90e8\u5206\u4ee3\u7801\u3002](https://www.luogu.com.cn/paste/m27p5ho4)\n",
        "postTime": 1670867932,
        "uid": 111789,
        "name": "DRPLANT",
        "ccfLevel": 5,
        "title": "P5313 [Ynoi2011] WBLT \u9898\u89e3"
    },
    {
        "content": "\u5907\u9009 T5\u3002                 \n\n\u4e2a\u4eba\u8ba4\u4e3a\u63d0\u793a bitset \u540e\u4e5f\u8bb8\u53ef\u4ee5\u79d2\uff1f\u81ea\u5df1\u90a3\u65f6\u5019\u80e1\u4e00\u76f4\u575a\u4fe1\u53ef\u4ee5\u5206\u5757\u9884\u5904\u7406\u505a\u7136\u540e\u81ea\u95ed\u4e86\u5f88\u4e45\u2026\u2026                \n\n\u8fd8\u662f\u5bf9 $O(\\frac{10 ^ {10}}{64})$ \u6ca1\u6709\u611f\u89c9\u3002\n\n\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5feb\u901f\u5206\u88c2 bitset\u3002             \n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u600e\u4e48\u66b4\u529b\u505a\u4e00\u4e2a\u8be2\u95ee\uff0c\u5982\u679c\u5f97\u77e5\u8fd9\u4e2a\u533a\u95f4\u7684\u6240\u6709\u6570\u7684\u51fa\u73b0\u60c5\u51b5\uff0c\u7528 $1$ \u8868\u793a\u51fa\u73b0\u8fc7\u6570\u7528 $0$ \u8868\u793a\u6ca1\u51fa\u73b0\u8fc7\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6309\u516c\u5dee\u5206\u6210\u8bb8\u591a\u957f\u5ea6\u76f8\u7b49\u7684\u5757\u7136\u540e\u76f4\u63a5\u76f8\u5e94\u7684\u4f4d\u4e0e\u5728\u4e00\u8d77\uff0c\u4ece\u524d\u5230\u540e\u770b\u4ec0\u4e48\u65f6\u5019\u6ca1\u6709 $1$ \u5373\u53ef\uff0c\u4ee4 $maxw$ \u4e3a $a$ \u7684\u6700\u5927\u503c\uff0c\u53ea\u8003\u8651\u5408\u5e76\u7684\u8bdd\u8fd9\u4e48\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f $O(q\\frac{maxw}{64})$ \u7684\u3002                 \n\n\u7136\u540e\u5f97\u77e5\u8fd9\u4e2a\u533a\u95f4\u6240\u6709\u6570\u51fa\u73b0\u60c5\u51b5\u83ab\u961f\u5c31\u8db3\u77e3\uff0c\u90a3\u4e48\u8c8c\u4f3c\u5c31\u53ef\u4ee5\u76f4\u63a5 $O(n \\sqrt m + \\frac{maxw}{64})$ \u505a\u4e86\uff1f               \n\n\u6ce8\u610f\u5230\u5f53\u516c\u5dee $b < 64$ \u65f6\uff0c\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u5230 $O(q \\frac{maxw}{b})$ \u8fd9\u65f6\u5019 $b$ \u7ed9\u4f60\u5361\u4e2a $1$ \u5c31\u76f4\u63a5\u6ca1\u6389\uff0c\u60f3\u529e\u6cd5\u4f18\u5316\u8fd9\u79cd\u60c5\u51b5\u3002       \n\n\u53d1\u73b0\u6b64\u65f6 $b$ \u53ea\u4f1a\u5728 $[1 , 64]$ \u4e4b\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5bf9\u6bcf\u4e2a $b$ \u5355\u72ec\u505a\u4e00\u904d\u8be2\u95ee\u3002\u53d1\u73b0\u5728 $b$ \u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\u6bcf\u4e2a\u6570\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\u91cc\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u5f00 $b - 1$ \u4e2a bitset \u7ef4\u62a4\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u7b49\u5dee\u6570\u5217\uff0c\u67e5\u8be2\u65f6\u67e5\u8be2 $b - 1$ \u7c7b\u7b49\u5dee\u6570\u5217\u7684\u6700\u5927 mex \u5373\u53ef\uff0c\u5728 $b$ \u53d6 $32$ \u65f6\u6700\u9ad8\u5355\u6b21\u8be2\u95ee\u590d\u6742\u5ea6\u4e3a $O(32\\times\\frac{maxw}{64 \\times 32} = \\frac{maxw}{64})$ \uff0c\u5269\u4e0b\u4e00\u4e2a $\\Theta(\\sum_{i = 1} ^ {63} n \\sqrt {siz_i})$ \u7684\u83ab\u961f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5176\u4e2d $siz_i$ \u4e3a $b$ \u4e3a $i$ \u7684\u8be2\u95ee\u4e2a\u6570\u3002              \n\n\u6613\u77e5 $\\sum_{i = 1} ^ {63} n \\sqrt {siz_i} \\leq n \\sqrt q$\uff0c\u6240\u4ee5\u6700\u540e\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7406\u5e94\u505a\u5230 $\\Theta(n \\sqrt q + q\\frac{maxw}{64})$ \u3002       \n\n\u63a5\u4e0b\u6765\u8bb2\u4e00\u4e0b\u5982\u4f55\u5206\u88c2\u4e00\u4e2a bitset\u3002\u6211\u4eec\u8003\u8651\u624b\u5199 bitset\uff0c\u7136\u540e\u518d\u5bf9\u516c\u5dee\u4e3a $b$ \u7684\u7b49\u5dee\u6570\u5217\u5206\u5757\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5 $O(1)$ \u7b97\u51fa\u5f53\u524d\u6bcf\u4e2a $64$ \u4f4d\u7684 bitset \u5e94\u8be5\u5411\u53f3\u79fb\u52a8\u591a\u5c11\u4f4d\u8bb0\u4e3a $trit$\uff0c\u7136\u540e\u518d\u628a\u4e0b\u4e00\u4e2a bitset \u7684 $64 - trit$ \u7ed9\u51d1\u5230\u540e\u9762\u53bb\u5373\u53ef\uff0c\u6ce8\u610f\u6b64\u65f6\u8981\u7279\u5224\u6700\u540e\u4e00\u4e2a\u5757\u65f6\u7684\u8be2\u95ee\u662f\u5426\u5408\u6cd5\uff0c\u8fd9\u91cc\u662f\u771f\u6ca1\u60f3\u5230\u3002\uff08\u4e5f\u8bb8\u662f\u56e0\u4e3a\u81ea\u5df1\u4ece\u6ca1\u624b\u5199\u8fc7 bitset\uff09          \n",
        "postTime": 1629958176,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5313 [Ynoi2011] WBLT"
    },
    {
        "content": "\u770b\u5230\u6876\u91cc\u9762\u56fa\u5b9a\u5dee\u627e\u6570\uff0c\u7acb\u9a6c\u60f3\u5230 bitset\uff0c\u53c8\u662f\u9759\u6001\u8be2\u95ee\uff0c\u90a3\u4e48\u80af\u5b9a\u4f7f\u7528 bitset \u4f18\u5316\u83ab\u961f\u3002\n\n\u8003\u8651\u5982\u4e0b\u505a\u6cd5\uff1a\u5c06\u5f53\u524d\u7684 bitset \u6876\u5206\u6210 $\\frac{n}{b}$ \u4e2a\u957f\u5ea6\u4e3a $b$ \u7684\u5757\uff0c\u7136\u540e\u5c06\u6240\u6709\u5757\u6309\u987a\u5e8f\u4e00\u4e2a\u4e00\u4e2a\u6309\u4f4d\u4e0e\u8d77\u6765\uff0c\u7b2c\u4e00\u6b21\u6309\u4f4d\u4e0e\u51fa $0$ \u65f6\uff0c\u5f53\u524d\u5757\u7f16\u53f7\u5373\u4e3a $x$\u3002\n\n\u4e0a\u8ff0\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u662f $\\mathcal O(n\\sqrt m + m\\frac{V}{\\min(w,b)})$\u3002\n\n\u53d1\u73b0\u5f53 $b < w$ \u65f6\uff0c\u6211\u4eec\u7684 bitset \u4f18\u5316\u5c31\u6ca1\u6709\u4f5c\u7528\u4e86\u3002\u4e8e\u662f\u8003\u8651\u6839\u53f7\u5206\u6cbb\uff0c\u8bbe\u9608\u503c\u4e3a $w$\uff0c\u5f53 $b\\ge w$ \u65f6\uff0c\u4f7f\u7528\u4e0a\u8ff0\u505a\u6cd5\uff0c\u5f53 $b < w$ \u65f6\uff0c\u4f7f\u7528\u5982\u4e0b\u505a\u6cd5\uff1a\n\n\u5f00 $b$ \u4e2a\u957f\u5ea6\u4e3a $\\frac{n}{b}$ \u7684 bitset\uff0c\u518d\u505a $w$ \u6b21\u83ab\u961f\u3002\u5916\u5c42\u5faa\u73af\u6309 $1$ \u5230 $w$ \u679a\u4e3e $b$\u3002\u5bf9\u4e8e\u5728 bitset \u4e2d\u52a0\u5165\u4e00\u4e2a\u6570 $a$\uff0c\u6211\u4eec\u5c06 $a$ \u52a0\u5165\u5230\u7b2c $x\\ \\textrm{mod}\\ b$ \u4e2a bitset \u7684\u7b2c $\\frac{x}{b}$ \u4f4d\u4e2d\u3002\u7b54\u6848\u5373\u4e3a\u6240\u6709 bitset \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0 $0$ \u7684\u4f4d\u7f6e\u4e0b\u6807\u7684\u6700\u5927\u503c\u3002\n\n\u603b\u590d\u6742\u5ea6\u662f $\\mathcal O(n\\sqrt m + \\frac{mV}w)$\u3002\n\nSTL \u4e2d\u7684 bitset \u4e0d\u652f\u6301\u5206\u88c2\u64cd\u4f5c\uff0c\u9700\u8981\u624b\u5199\u3002\n\n\u4ee3\u7801\u6709\u70b9\u4e71\uff0c\u7b49\u6211\u5c01\u88c5\u4e00\u4e0b bitset \u518d\u6539\u6539\u518d\u8d34\u4e0a\u6765\u3002\n\n\u5c0f\u6280\u5de7\uff1a\n\n- \u5bf9\u4e8e $b < w$ \u7684\u505a\u6cd5\uff0c\u6bcf\u6b21\u83ab\u961f\u524d\u90fd\u4fee\u6539\u5757\u957f\u4e3a $\\frac{n}{\\sqrt m_i}$\u3002\n\n- \u6bcf\u6b21\u6e05\u7a7a\u6876\u53ea\u9700\u6309\u987a\u5e8f\u4e00\u4e2a\u4e00\u4e2a\u64a4\u9500\u4e4b\u524d\u7684\u64cd\u4f5c\uff0c\u6ca1\u5fc5\u8981 memset\u3002\n\n- \u76f8\u4fe1\u795e\u5947\u5757\u957f\uff0c\u4f8b\u5982\u6211\u7528\u7684\u662f $\\frac{2n}{\\sqrt m_i}$\u3002\n\n\u6700\u6162\u70b9 1.45s\uff0c\u4eba\u50bb\u5e38\u6570\u5927\u3002",
        "postTime": 1685252882,
        "uid": 570066,
        "name": "Fatal_Cactus",
        "ccfLevel": 6,
        "title": "P5313 [Ynoi2011] WBLT bitset \u4f18\u5316\u83ab\u961f + \u6839\u53f7\u5206\u6cbb"
    },
    {
        "content": "\u840c\u65b0\u6765\u6c34\u4e00\u7bc7\u9898\u89e3\u3002\n\n$b$ \u8f83\u5927\u7684\u90e8\u5206\u4e0e\u5176\u4ed6\u9898\u89e3\u65e0\u5f02\uff0c\u5728\u6b64\u7565\u53bb\u3002\n\n$b$ \u8f83\u5c0f\uff08$\\le B$\uff09\u65f6\uff0c\u8003\u8651\u5bf9\u6bcf\u4e2a $b$ \u7684\u5269\u4f59\u7c7b\u5206\u522b\u5904\u7406\uff0c\u539f\u95ee\u9898\u53ef\u8f6c\u5316\u4e3a\u5728\u957f\u4e3a $nB$ \u7684\u5e8f\u5217\u4e0a\uff0c\u8be2\u95ee $qB$ \u6b21\u533a\u95f4 $\\operatorname{mex}$\u3002\n\n\u8003\u8651\u626b\u63cf\u7ebf\uff0c\u679a\u4e3e\u53f3\u7aef\u70b9 $r$\uff0c\u8bbe $r$ \u5de6\u8fb9\u7b2c\u4e00\u4e2a $i$ \u7684\u4f4d\u7f6e\u4e3a $pos_i$\uff0c\u5219\u533a\u95f4 $[l,r]$ \u7684 $\\operatorname{mex}\\ge x$ \u5f53\u4e14\u4ec5\u5f53 $\\min_{i=0}^{x-1}pos_i\\ge l$\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4 $pos_i$ \u7684\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u67e5\u8be2\u65f6\u7ebf\u6bb5\u6811\u4e8c\u5206\u3002\n\n\u56e0\u6b64\u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f $O(nB\\log n)$\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff08\u6838\u5fc3\u4ee3\u7801\u89c1 `namespace baby`\uff09\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long;\nusing l3 = __int128_t;\n#define F(i, a, b) for (int i = (a), iee = (b); i <= iee; i++)\n#define FO(i, a, b) F(i, a, (b) - 1)\n#define R(i, a, b) for (int i = (b), iee = (a); i >= iee; i--)\n\nconst int N = 100100, B = 300, W = 64, T = N * 20, Th = 10;\nusing ui = unsigned long long;\n\nint n, m, a[N], ans[N], A;\nstruct query {\n\tint l, r, b, id;\n\tbool operator < (const query &q) const {\n\t\tint x = l / B, y = q.l / B;\n\t\tif (x == y) return x & 1 ? r > q.r : r < q.r;\n\t\treturn x < y;\n\t}\n} qry[N];\n\n#define mid ((l + r) >> 1)\n#define lc p << 1\n#define rc lc | 1\n\nnamespace baby {\n\tbool cmp(const query &a, const query &b) {\n\t\treturn a.r < b.r;\n\t}\n\tint mn[N << 2], buc[N], beg[N];\n\tvoid modify(int x, int k, int l, int r, int p) {\n\t\tif (x < l || x > r) return;\n\t\tif (l == r) { mn[p] = k; return; }\n\t\tmodify(x, k, l, mid, lc), modify(x, k, mid + 1, r, rc);\n\t\tmn[p] = min(mn[lc], mn[rc]);\n\t}\n\tint find(int x, int k, int l, int r, int p) {\n\t\tif (x > r || mn[p] >= k) return r + 1;\n\t\tif (l == r) return l;\n\t\tint q = find(x, k, l, mid, lc);\n\t\tif (q <= mid) return q;\n\t\treturn find(x, k, mid + 1, r, rc);\n\t}\n\tvoid foo(int b) {\n\t\tmemset(mn, 0, sizeof mn);\n\t\tint id = 0, j = 1;\n\t\tFO(r, 0, b) {\n\t\t\tbeg[r] = ++id;\n\t\t\tfor (int x = r; x <= A; x += b) buc[x] = id++;\n\t\t}\n\t\tF(i, 1, n) {\n\t\t\tmodify(buc[a[i]], i, 1, id, 1);\n\t\t\tfor (; j <= m && qry[j].r == i; j++) if (qry[j].b == b) {\n\t\t\t\tint res = 0;\n\t\t\t\tFO(a, 0, b)\n\t\t\t\t\tres = max(res, find(beg[a], qry[j].l, 1, id, 1) - beg[a]);\n\t\t\t\tans[qry[j].id] = res;\n\t\t\t}\n\t\t}\n\t}\n\tvoid solve() {\n\t\tsort(qry + 1, qry + m + 1, cmp);\n\t\tF(b, 1, Th) foo(b);\n\t}\n};\nnamespace giant {\n\tbool cmp(const query &a, const query &b) {\n\t\tint x = a.l / B, y = b.l / B;\n\t\tif (x != y) return x < y;\n\t\treturn x & 1 ? a.r > b.r : a.r < b.r;\n\t}\n\tint cnt[N];\n\tui b[N], x[N];\n\tui pw2(int x) { return ui(1) << x; }\n\tui msk2(int x) { return x ? pw2(x) - 1 : 0; }\n\tvoid ins(int v) { if (!cnt[v]++) b[v / W] |= pw2(v % W); }\n\tvoid del(int v) { if (!--cnt[v]) b[v / W] &= ~pw2(v % W); }\n\tui read(int x) {\n\t\tint y = x % W;\n\t\tui f = b[x / W], g = b[x / W + 1];\n\t\tif (!y) return f;\n\t\treturn f >> y | g << (W - y);\n\t}\n\n\tvoid solve() {\n\t\tsort(qry + 1, qry + m + 1, cmp);\n\t\tint l = 1, r = 0;\n\t\tF(i, 1, m) if (qry[i].b > Th) {\n\t\t\twhile (l > qry[i].l) ins(a[--l]);\n\t\t\twhile (r < qry[i].r) ins(a[++r]);\n\t\t\twhile (l < qry[i].l) del(a[l++]);\n\t\t\twhile (r > qry[i].r) del(a[r--]);\n\t\t\tint b = qry[i].b, mx, id = qry[i].id;\n\t\t\tFO(j, 0, b / W) x[j] = -1;\n\t\t\tx[b / W] = msk2(b % W);\n\n\t\t\tfor (mx = 0; ; mx++) {\n\t\t\t\tF(j, 0, b / W) x[j] &= read(j * W + b * mx);\n\t\t\t\tbool empty = 1;\n\t\t\t\tF(j, 0, b / W) if (x[j]) { empty = 0; break; }\n\t\t\t\tif (empty) break;\n\t\t\t}\n\t\t\tans[id] = mx;\n\t\t}\n\t}\n};\n\nint main() {\n#ifdef LOCAL\n\tfreopen(\"P5313.in\", \"r\", stdin);\n\tfreopen(\"P5313.out\", \"w\", stdout);\n#endif\n\tcin.tie(0)->sync_with_stdio(0), cout.tie(0);\n\tcin >> n;\n\tF(i, 1, n) cin >> a[i], A = max(A, a[i]);\n\tcin >> m;\n\tF(i, 1, m) cin >> qry[i].l >> qry[i].r >> qry[i].b, qry[i].id = i;\n\tbaby::solve();\n\tgiant::solve();\n\tF(i, 1, m) cout << ans[i] << \"\\n\";\n}\n```\n\nupd: \u9608\u503c $B$ \u6216\u8005\u8bf4\u4ee3\u7801\u4e2d\u7684 `Th` \u53d6 $6$ \u5de6\u53f3\u8dd1\u5f97\u6700\u5feb\u3002\u9707\u64bc\u3002",
        "postTime": 1674120243,
        "uid": 337894,
        "name": "expane",
        "ccfLevel": 0,
        "title": "solution-p5313"
    },
    {
        "content": "[$\\tt Link$](/problem/P5313)\u3002\n\n\u6211\u4eec\u8003\u8651\u79bb\u7ebf\uff0c\u7136\u540e\u83ab\u961f\uff0c\u7136\u540e `bitset` \u7ef4\u62a4\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684 `vis`\u3002\n\n\u7136\u540e\u8003\u8651\u4e24\u4e2a\u65b9\u6cd5\uff1a\n\n1. \u5c06 `bitset` \u6309 $b$ \u4e3a\u957f\u5ea6\u5206\u88c2\u82e5\u5e72\u4e2a\uff0c\u7136\u540e\u4ece\u524d\u5230\u540e\u4e00\u4e2a\u4e00\u4e2a\u6309\u4f4d\u4e0e\uff0c\u5982\u679c\u4e0e\u5230\u7b2c $i$ \u4e2a\u7ed3\u679c\u91cc\u5168\u662f $0$\uff0c\u90a3\u4e48\u8fd9\u65f6\u7684 $i$ \u5c31\u662f\u7b54\u6848\u3002\n2. \u5bf9\u4e8e\u6bcf\u4e2a $b$ \u5206\u5f00\u8dd1\u83ab\u961f\uff0c\u7136\u540e\u6309\u7167\u6a21 $b$ \u4f59\u6570\u7684\u7ed3\u679c\u5206\u5f00\u5b58\u50a8 `bitset`\uff0c\u6700\u540e\u628a\u6240\u6709 `bitset` \u7684 $\\tt mex$ \u53d6\u4e00\u4e2a $\\max$\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6cd5 1 \u9002\u5408 $b$ \u5927\u7684\u65f6\u5019\uff0c\u6cd5 2 \u9002\u5408 $b$ \u5c0f\u7684\u65f6\u5019\u3002\u6240\u4ee5\u6211\u4eec\u505a\u9608\u503c\u5206\u6cbb\u3002\n\n\u5176\u5b9e\u601d\u8003\u4e0d\u96be\uff08\uff1f\uff0c\u4f46\u662f\u5206\u88c2\u5206\u7c7b\u8ba8\u8bba\uff0c\u96be\u5199\u3002",
        "postTime": 1660537715,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "P5313 [Ynoi2011] WBLT"
    },
    {
        "content": "\n\n[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P5313)\n\n\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u5e72\u5565\u4e86\uff1a\u83ab\u961f + bitset + \u56de\u6eda\u83ab\u961f\u80fd\u8fc7\uff0c\u4e14\u7406\u8bba\u590d\u6742\u5ea6\u66f4\u4f18\u3002\n\n\u987a\u4fbf\uff0c\u5176\u4ed6\u9898\u89e3\u4e2d\u201c\u5bf9 $b < 64$ \u7684\u6bcf\u4e2a $b$ \u5355\u72ec\u83ab\u961f\u201d\u8fd9\u4e00\u90e8\u5206\u590d\u6742\u5ea6\u4e0d\u662f $O(n \\sqrt{m})$ \uff0c\u662f $O(w n\\sqrt{m})$ \uff0c\u5f53\u7136\u8fd9\u4e2a\u4e0a\u754c\u5f88\u5bbd\u3002\u5b9e\u9645\u4e0a $n, m$ \u8f83\u5c0f\uff0c\u8fd9\u79cd\u505a\u6cd5\u5e38\u6570\u5c0f\uff0c\u96be\u4ee5\u5361\u6389\u3002\n\n\u4e0d\u4fdd\u8bc1\u4e0b\u6587\u6ca1\u6709\u7b14\u8bef\u3002\n\n### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$ \uff0c\u8be2\u95ee $m$ \u6b21\uff0c\u6bcf\u6b21\u7ed9\u5b9a $l, r, b$ \uff0c\u6c42 $a$ \u7684 $[l, r]$ \u4e2d\u5143\u7d20\u7ec4\u6210\u6700\u957f\u7684\u516c\u5dee\u4e3a $b$ \u7684\u7b49\u5dee\u6570\u5217\u7684\u957f\u5ea6\u3002\n\n$0 \\le n, m, a_i \\le 10^5$ \u3002\n\n\n### \u83ab\u961f + bitset\n\n\u95ee\u9898\u6ee1\u8db3\u83ab\u961f\u6027\u8d28\uff0c\u53ef\u4ee5\u7528\u83ab\u961f\u89e3\u51b3\u672c\u9898\u3002\u6211\u4eec\u5728\u8f6c\u79fb\u65f6\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u6570\u662f\u5426\u51fa\u73b0\uff0c\u628a\u5b83\u538b\u6210\u4e00\u4e2a bitset \uff0c0 \u8868\u793a\u6ca1\u51fa\u73b0\uff0c1 \u8868\u793a\u51fa\u73b0\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u8f6c\u79fb\u5b8c\u540e\uff0c\u4ece\u5de6\u8d77\u6bcf $b$ \u4f4d\u5206\u6210\u4e00\u5757\uff0c\u4ece\u5de6\u5230\u53f3\u6bcf\u4e2a\u5757\u6309\u4f4d\u4e0e\u3002\u5982\u679c\u80fd\u6309\u4f4d\u4e0e $x$ \u6b21\uff08\u6309\u4f4d\u4e0e $x + 1$ \u4e2a\u5757\uff09\uff0c\u5219\u8fd9\u4e00\u8be2\u95ee\u7b54\u6848\u4e3a $x$ \u3002\n\n\u5206\u6790\u4e0b\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n  - \u5f53 $b \\ge w$ \u7684\u65f6\u5019\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O\\left(n \\sqrt{m} + \\dfrac{mu}{w} \\right)$ \uff0c\u5176\u4e2d $u$ \u662f\u503c\u57df\uff0c $w$ \u662f bitset \u6240\u7528\u7c7b\u578b\u7684\u4f4d\u6570\u3002\n  - \u5f53 $b < w$ \u7684\u65f6\u5019\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O\\left (n \\sqrt{m} + \\dfrac{mu}{b} \\right)$ \u3002 $b$ \u8d8a\u5c0f\uff0c\u540e\u4e00\u9879\u8d8a\u63a5\u8fd1 $O(mu)$ \uff0c\u4f1a TLE \u3002\n\n\u8bbe $k$ \uff0c\u5bf9\u4e8e $b > k$ \u7684\u8be2\u95ee\u91c7\u7528\u4e0a\u8ff0\u65b9\u5f0f\u83ab\u961f\u6c42\u89e3\u3002\u5bf9\u4e8e $b \\le k$ \u7684\u8be2\u95ee\u56e0\u4e3a\u4f7f\u7528\u4e0a\u8ff0\u65b9\u5f0f\u6c42\u89e3\u590d\u6742\u5ea6\u63a5\u8fd1 $O(mu)$ \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6362\u79cd\u65b9\u5f0f\u6c42\u89e3\u3002\n\n\n### \u56de\u6eda\u83ab\u961f\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a[Rmq Problem / mex](https://www.luogu.com.cn/problem/P4137) \u3002\n\n\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee $l, r, b$ \uff0c\u8bb0 $mex_{i, j}$ \u4e3a $\\operatorname{mex} \\left ( \\left \\{ \\left \\lfloor \\dfrac{a_k}{i} \\right \\rfloor  | (a_k \\bmod i = j) \\land k \\in [l, r] \\right \\} \\right )$ \uff08\u5176\u4e2d $\\operatorname{mex}$ \u4e3a\u96c6\u5408\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u6700\u5c0f\u81ea\u7136\u6570\uff09\uff0c\u8fd9\u6b21\u8be2\u95ee\u6240\u6c42\u5373\u4e3a $\\max_{0 \\le i < b}(mex_{b, i})$ \u3002\n\n\u8fd9\u4e2a $mex$ \u53ef\u4ee5\u7528\u56de\u6eda\u83ab\u961f\u7ef4\u62a4\u3002\u53f3\u7aef\u70b9\u6536\u7f29\u4e00\u6b21\u9700\u8981\u66f4\u65b0 $mex$ \u4e2d\u7684 $O(k)$ \u4e2a\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(k)$ \uff1b\u7531\u4e8e\u8fd9\u662f\u56de\u6eda\u83ab\u961f\uff0c\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee $l, r, b$ \u5de6\u7aef\u70b9\u6536\u7f29\u4e00\u6b21\u53ea\u9700\u8981\u66f4\u65b0 \u5f62\u5982 $mex_{b, }$ \u7684\u4e00\u4e2a\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(1)$ \u3002\u8fd9\u65f6\u5019\u4e0d\u80fd\u6309\u7167 $\\dfrac{n}{\\sqrt{m}}$ \u8bbe\u7f6e\u5757\u957f\u3002\n\n\u8bb0\u56de\u6eda\u83ab\u961f\u7684\u5757\u957f\u4e3a $L$ \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O\\left (mL + \\dfrac{n^2k}{L}\\right)$ \uff0c\u524d\u540e\u4e24\u9879\u76f8\u7b49\u65f6 $L = \\sqrt{\\dfrac{n^2k}{m}}$ \uff0c\u5e26\u56de\u53bb\u5f97\u5230 $O \\left (n\\sqrt{mk} \\right)$ \u3002\n\n\u81f3\u6b64\uff0c\u5305\u62ec\u524d\u9762\u83ab\u961f + bitset \u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O\\left(n \\sqrt{m} + \\dfrac{mu}{k} + n\\sqrt{mk} \\right)$ \u3002\u628a $u$ \u5f53\u505a $10^5$ \uff0c\u5bf9\u4e0e $k$ \u76f8\u5173\u7684\u90e8\u5206\u6c42\u6781\u5c0f\u503c\uff0c\u5f97\u5230 $k = \\dfrac{2000\\sqrt[3]{5}\\sqrt[3]{m}}{n^{2/3}}$ \u3002\u5f53 $n = m = 10^5$ \u65f6 $k \\approx 73.6$ \u3002\n\n$w > k$ \uff0c\u56e0\u6b64 $w = 128$ \uff0c\u4e5f\u5c31\u662f\u7528 `unsigned __int128` \u624b\u5199 bitset \u4ee5\u83b7\u5f97\u6bd4\u8f83\u597d\u7684\u6548\u7387\u3002 $k$ \u7684\u53d6\u503c\u53ef\u4ee5\u624b\u52a8\u8c03\u5927\u6216\u8c03\u5c0f\uff0c\u7528\u4e8e\u5e73\u8861\u4e24\u4e2a\u83ab\u961f\u7684\u5e38\u6570\u3002\n\n### \u4ee3\u7801\n\n\u624b\u5199 bitset \u662f\u96be\u70b9\u3002\u6b64\u4ee3\u7801\u4fdd\u8bc1 TLE \uff08\u96fe\uff09\uff0c\u56e0\u4e3a $k = 73$ \u3002\u5b9e\u9645\u4e0a $k$ \u9002\u5f53\u53d6\u5f97\u5c0f\u4e9b\uff0c\u8dd1\u5f97\u5feb\u4e9b\u3002\n\n```cpp\n//\n// Created by Cat-shao on 2022/4/15.\n//\n\n//#define DEBUG\n//#define MMAP\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifndef DEBUG\nnamespace io {\n    const int IN_BUF = 1 << 18, OUT_BUF = 1 << 17; // IN_BUF \u548c OUT_BUF \u7684\u503c\u5e94\u786e\u4fdd\u7f13\u51b2\u533a\u80fd\u5361\u8fdb L2 \u7f13\u5b58\n    char obuf[OUT_BUF], *o;\n#ifndef MMAP\n    char ibuf[IN_BUF], *i1, *i2; // \u56e0\u4e3a i1\u3001i2 \u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u6700\u5f00\u59cb\u5168\u662f NULL \uff0c\u6ee1\u8db3 i1 == i2 \u3002\n#else\n#include <sys/mman.h>\n#include <unistd.h>\n    char *i;\n#endif\n\n    class init {\n    public:\n        init() {\n            o = obuf;\n#ifdef MMAP\n            i = (char *) mmap(NULL, INT_MAX, PROT_READ, MAP_PRIVATE, STDIN_FILENO, 0);\n#endif\n        }\n\n        ~init() {\n            fwrite(obuf, o - obuf, sizeof(char), stdout);\n        }\n    } bminit;\n\n\n#ifndef MMAP\n    inline char gc() {\n        if (__builtin_expect(i1 == i2, 0)) {\n            i1 = ibuf;\n            i2 = i1 + cin.rdbuf()->sgetn(ibuf, IN_BUF);\n        }\n        return i1 == i2 ? EOF : *i1++;\n    }\n#else\n#define gc() (*i++)\n#endif\n\n    class fi {\n    public:\n        fi &operator>>(int &x) {\n            char ch;\n            while (!isdigit(ch = gc()) && ch != EOF);\n            for (x = 0; isdigit(ch); ch = gc()) {\n                x = x * 10 + ch - '0';\n            }\n            return *this;\n        }\n    } cin;\n\n    inline void pc(char ch) {\n        if (__builtin_expect(o == obuf + OUT_BUF, 0)) {\n            fwrite(obuf, OUT_BUF, sizeof(char), stdout);\n            o = obuf;\n        }\n        *o++ = ch;\n    }\n\n    class fo {\n    public:\n        fo &operator<<(int x) { // \u60f3\u8f93\u51fa long long \u5c06\u4f20\u53c2\u6539\u4e3a long long x \u5373\u53ef\u3002\u4e0d\u80fd\u5199\u6210 const int &x \uff0c\u56e0\u4e3a x \u4f1a\u88ab\u4fee\u6539\n            static char s[20]; // LLONG_MAX \u4e5f\u53ea\u6709 19 \u4f4d\uff0cs \u6709 20 \u4f4d\uff0c\u4e5f\u80fd\u8f93\u51fa long long\n            int top = 0;\n            do {\n                s[top++] = x % 10;\n                x /= 10;\n            } while (x);\n            while (top) {\n                pc(s[--top] + '0');\n            }\n            return *this;\n        }\n\n        fo &operator<<(char c) {\n            pc(c);\n            return *this;\n        }\n    } cout;\n}\n#else\nnamespace io {\n    istream &cin = std::cin;\n    ostream &cout = std::cout;\n\n    class init {\n    public:\n        init() {\n            ios::sync_with_stdio(false);\n            cin.tie(0);\n            cout.tie(0);\n        }\n    } bminit;\n}\n#endif\n\n\ntemplate<size_t u>\nclass myBitset { // \u672c\u9898\u7279\u4f9b bitset \uff0c\u4e0d\u592a\u53ef\u80fd\u7528\u5728\u5176\u4ed6\u9898\u4e0a\n    typedef unsigned __int128 uint128;\n    static const unsigned w = 128;\n    static const uint128 one = 1;\n    static const uint128 UINT128_MAX = -1;\npublic:\n    static constexpr size_t size = (double) (u - 1) / w + 1; // ceil((double) u / w) \u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\n    uint128 s[size];\n\n    void init() {\n        memset(s, 0, sizeof(s));\n        s[size - 1] = ~((one << (u % w)) - 1);\n    }\n\n    void init(uint128 x) { // \u7528\u4e8e DEBUG \uff0c\u53ef\u4ee5\u6307\u5b9a s[0] \u7684\u503c\n        memset(s, 0, sizeof(s));\n        s[0] = x;\n        s[size - 1] |= ~((one << (u % w)) - 1);\n    }\n\n    void init2(unsigned x) { // \u7528\u4e8e\u5de5\u5177\u4eba bitset \u7684\u521d\u59cb\u5316\uff0c\u524d x \u4f4d\u5168\u662f 1 \uff0c\u7b2c x \u4f4d\u4e3a 0 \u3002\n        memset(s, 0xff, sizeof(s));\n        s[x / w] = (one << (x % w)) - 1;\n    }\n\n    void set(unsigned pos, bool v = true) { // int \u7684\u53f3\u79fb\u4e0d\u7b49\u4e8e\u9664\u6cd5\u3002pos \u5f00\u6210 unsigned \u540e\uff0c\u5f00 O2 \u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u4f18\u5316\u3002\n        if (v) {\n            s[pos / w] |= (one << (pos % w));\n        } else {\n            s[pos / w] &= ~(one << (pos % w));\n        }\n    }\n\n    uint128 get(unsigned pos, unsigned len) {\n        if (pos / w < size) {\n            return ~(len == w ? UINT128_MAX : (one << len) - 1) | (s[pos / w] >> (pos % w));\n        } else {\n            return ~(len == w ? UINT128_MAX : (one << len) - 1);\n        }\n    }\n\n    int split(unsigned x, myBitset<u> &b) {\n        b.init2(x);\n        unsigned bound = 0, i = 0, jump;\n        while (true) {\n            bound += x;\n            if (i >= u) {\n                break;\n            }\n            bool flag = true;\n            for (unsigned j = 0; i < bound;) {\n                jump = min(w - i % w, w - j % w);\n                if (i + jump >= bound) { // \u9632\u6b62\u8df3\u8fc7\n                    jump = bound - i;\n                }\n                b.s[j / w] &= ((one << (j % w)) - 1) | (get(i, jump) << (j % w));\n                if ((jump == w - j % w || jump == bound - i) && b.s[j / w] != 0) { // j \u6240\u5728\u5b57\u6700\u540e\u4e00\u6b21\u6309\u4f4d\u4e0e\u518d\u5224\u65ad\n                    flag = false;\n                }\n                i += jump;\n                j += jump;\n            }\n            if (flag) {\n                break;\n            }\n        }\n        return bound / x - 1; // \u5c11\u7528\u4e86\u4e2a\u53d8\u91cf\n    }\n\n    void output() {\n        for (int i = 0; i < size; ++i) {\n            uint128 tmp = s[i];\n            for (int j = 1; j <= w; ++j) {\n                io::cout << char('0' + char(tmp & 1));\n                tmp >>= 1;\n            }\n        }\n    }\n};\n\nconst int MAX_N = 1e5 + 10;\nconst int K = 73;\nconst int MAX_K = K + 1;\nconst int U = 1e5;\ntypedef tuple<int, int, int, int> TII;\n\nint a[MAX_N], b1[MAX_N], b2[MAX_N], cnt1[MAX_N], ans[MAX_N], mex[MAX_K][MAX_K], cnt2[MAX_N], mex2[MAX_K]; // len1\u3001b1 \u7b49\u7b49\u5bf9\u5e94\u83ab\u961f + bitset\uff0clen2\u3001b2 \u7b49\u7b49\u5bf9\u5e94\u56de\u6eda\u83ab\u961f\nTII q1[MAX_N], q2[MAX_N];\nmyBitset<MAX_N> s1, tmp;\n\nbool cmp1(TII x, TII y) {\n    return b1[get<0>(x)] < b1[get<0>(y)] ||\n           (b1[get<0>(x)] == b1[get<0>(y)] && (b1[get<0>(x)] & 1 ? get<1>(x) < get<1>(y) : get<1>(x) > get<1>(y)));\n}\n\nbool cmp2(TII x, TII y) {\n    return b2[get<0>(x)] < b2[get<0>(y)] || (b2[get<0>(x)] == b2[get<0>(y)] && get<1>(x) > get<1>(y));\n}\n\nvoid upd1(int x, int v) {\n    if (cnt1[a[x]] == 0 && v == 1) {\n        s1.set(a[x], 1);\n    } else if (cnt1[a[x]] == 1 && v == -1) {\n        s1.set(a[x], 0);\n    }\n    cnt1[a[x]] += v;\n}\n\nint main() {\n    int n, m, m1 = 0, m2 = 0, len1, len2, x, y, z;\n    io::cin >> n;\n    for (int i = 1; i <= n; ++i) {\n        io::cin >> a[i];\n    }\n    io::cin >> m;\n    for (int i = 1; i <= m; ++i) {\n        io::cin >> x >> y >> z;\n        if (z == 0) { // b \u53ef\u4ee5\u4e3a 0 \uff0c\u8f93\u51fa 0 \uff0c\u4e0d\u53c2\u4e0e\u8ba1\u7b97\n            continue;\n        }\n        if (z > K) {\n            q1[++m1] = {x, y, z, i};\n        } else {\n            q2[++m2] = {x, y, z, i};\n        }\n    }\n    len1 = m1 ? ceil(n / sqrt(m1)) : 1;\n    len2 = m2 ? ceil(n * sqrt(K) / sqrt(m2)) : 1;\n    for (int i = 1; i <= n; ++i) {\n        b1[i] = (i - 1) / len1 + 1;\n        b2[i] = (i - 1) / len2 + 1;\n    }\n    sort(q1 + 1, q1 + m1 + 1, cmp1);\n    sort(q2 + 1, q2 + m2 + 1, cmp2);\n    // \u83ab\u961f + bitset \u90e8\u5206\n    q1[0] = {1, 1, 0, 0};\n    upd1(1, 1);\n    for (int i = 1; i <= m1; ++i) {\n        if (get<0>(q1[i - 1]) > get<0>(q1[i])) {\n            for (int j = get<0>(q1[i - 1]) - 1; j >= get<0>(q1[i]); --j) {\n                upd1(j, 1);\n            }\n        }\n        if (get<1>(q1[i - 1]) < get<1>(q1[i])) {\n            for (int j = get<1>(q1[i - 1]) + 1; j <= get<1>(q1[i]); ++j) {\n                upd1(j, 1);\n            }\n        }\n        if (get<0>(q1[i - 1]) < get<0>(q1[i])) {\n            for (int j = get<0>(q1[i - 1]); j < get<0>(q1[i]); ++j) {\n                upd1(j, -1);\n            }\n        }\n        if (get<1>(q1[i - 1]) > get<1>(q1[i])) {\n            for (int j = get<1>(q1[i - 1]); j > get<1>(q1[i]); --j) {\n                upd1(j, -1);\n            }\n        }\n        ans[get<3>(q1[i])] = s1.split(get<2>(q1[i]), tmp);\n    }\n    // \u56de\u6eda\u83ab\u961f\u90e8\u5206\n    int start = 0;\n    for (int i = 1; i <= m2; ++i) {\n        if ((b2[get<0>(q2[i])] - 1) * len2 + 1 != start) {\n            start = (b2[get<0>(q2[i])] - 1) * len2 + 1;\n            q2[i - 1] = {start, n, 0, 0};\n            memset(cnt2, 0, sizeof(cnt2));\n            for (int j = start; j <= n; ++j) {\n                cnt2[a[j]]++;\n            }\n            for (int j = 1; j <= K; ++j) {\n//                fill(mex[j], mex[j] + j, U / j + 1); // \u6682\u4e0d\u786e\u5b9a\u8fd9\u4e00\u521d\u59cb\u5316\u65b9\u5f0f\u662f\u5426\u6b63\u786e\n                for (int k = 0; k < j; ++k) {\n                    mex[j][k] = (U - k) / j + 1;\n                }\n                for (int k = 0; k <= U; ++k) {\n                    if (cnt2[k] == 0) {\n                        mex[j][k % j] = min(mex[j][k % j], k / j);\n                    }\n                }\n            }\n        }\n        for (int j = get<1>(q2[i - 1]); j > get<1>(q2[i]); --j) {\n            if (--cnt2[a[j]] == 0) {\n                for (int k = 1; k <= K; ++k) {\n                    mex[k][a[j] % k] = min(mex[k][a[j] % k], a[j] / k);\n                }\n            }\n        }\n        memcpy(mex2, mex[get<2>(q2[i])], sizeof(int) * get<2>(q2[i])); // \u6682\u4e0d\u786e\u5b9a\u8fd9\u4e00\u521d\u59cb\u5316\u65b9\u5f0f\u662f\u5426\u6b63\u786e\n        for (int j = start; j < get<0>(q2[i]); ++j) {\n            if (--cnt2[a[j]] == 0) {\n                mex2[a[j] % get<2>(q2[i])] = min(mex2[a[j] % get<2>(q2[i])], a[j] / get<2>(q2[i]));\n            }\n        }\n        ans[get<3>(q2[i])] = *max_element(mex2, mex2 + get<2>(q2[i]));\n//        assert(*max_element(mex2, mex2 + get<2>(q2[i])) != U / get<2>(q2[i]) + 1);\n        for (int j = get<0>(q2[i]) - 1; j >= start; --j) {\n            cnt2[a[j]]++;\n        }\n    }\n    for (int i = 1; i <= m; ++i) {\n        io::cout << ans[i] << '\\n';\n    }\n    return 0;\n}\n```",
        "postTime": 1650111544,
        "uid": 234011,
        "name": "Cat_shao",
        "ccfLevel": 0,
        "title": "[Ynoi2011] WBLT"
    }
]