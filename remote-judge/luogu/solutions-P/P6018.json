[
    {
        "content": "**UDP** On 2020/12/20 \u771f\u7684\u4e0d\u662f\u6284\u7684OI-WiKi \u2026\u2026\uff0c\u4e00\u6837\u662f\u56e0\u4e3aOI-Wiki\u4e0a\u7684\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u662f\u6211\u5199\u7684\u2026\u2026\u3002\u66f4\u6539\uff1a\u4e00\u5904\u4ee3\u7801\u9519\u8bef\u3001\u66f4\u597d\u7684\u8868\u8ff0\u3002\n\n**UDP** On 2021/09/27 \u5220\u9664\u4e86\u4e00\u90e8\u5206\u65e0\u5173\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003OI-Wiki\u4e0a\u7684\u7248\u672c\u3002\n\n\u4e00\u4e9b\u524d\u7f6e\u77e5\u8bc6~\n\n### \u7ef4\u62a4\u5f02\u6216\u548c\n\n01-trie \u662f\u6307\u5b57\u7b26\u96c6\u4e3a $\\{0,1\\}$ \u7684 trie\u300201-trie \u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\u5b57\u7684\u5f02\u6216\u548c\uff0c\u652f\u6301\u4fee\u6539\uff08\u5220\u9664 + \u91cd\u65b0\u63d2\u5165\uff09\uff0c\u548c\u5168\u5c40\u52a0\u4e00\uff08\u5373\uff1a\u8ba9\u5176\u6240\u7ef4\u62a4\u6240\u6709\u6570\u503c\u9012\u589e `1` \uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4fee\u6539\u64cd\u4f5c\uff09\u3002\n\n\u5982\u679c\u8981\u7ef4\u62a4\u5f02\u6216\u548c\uff0c\u9700\u8981\u6309\u503c\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u5efa\u7acb trie\u3002\n\n **\u4e00\u4e2a\u7ea6\u5b9a** \uff1a\u6587\u4e2d\u8bf4\u5f53\u524d\u8282\u70b9 **\u5f80\u4e0a** \u6307\u5f53\u524d\u8282\u70b9\u5230\u6839\u8fd9\u6761\u8def\u5f84\uff0c\u5f53\u524d\u8282\u70b9 **\u5f80\u4e0b** \u6307\u5f53\u524d\u7ed3\u70b9\u7684\u5b50\u6811\u3002\n\n#### \u63d2\u5165 & \u5220\u9664\n\n\u5982\u679c\u8981\u7ef4\u62a4\u5f02\u6216\u548c\uff0c\u6211\u4eec **\u53ea\u9700\u8981** \u77e5\u9053\u67d0\u4e00\u4f4d\u4e0a `0` \u548c `1` \u4e2a\u6570\u7684 **\u5947\u5076\u6027** \u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u6570\u5b57 `1` \u6765\u8bf4\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e00\u4f4d\u4e0a\u6570\u5b57 `1` \u7684\u4e2a\u6570\u4e3a\u5947\u6570\u65f6\uff0c\u8fd9\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u624d\u662f `1` \uff0c\u8bf7\u65f6\u523b\u8bb0\u4f4f\u8fd9\u6bb5\u6587\u5b57\uff1a\u5982\u679c\u53ea\u662f\u7ef4\u62a4\u5f02\u6216\u548c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u67d0\u4e00\u4f4d\u4e0a `1` \u7684\u6570\u91cf\u5373\u53ef\uff0c\u800c\u4e0d\u9700\u8981\u77e5\u9053 trie \u5230\u5e95\u7ef4\u62a4\u4e86\u54ea\u4e9b\u6570\u5b57\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4ee5\u4e0b\u4e09\u4e2a\u91cf\uff1a\n\n-  `ch[o][0/1]` \u6307\u8282\u70b9 `o` \u7684\u4e24\u4e2a\u513f\u5b50\uff0c `ch[o][0]` \u6307\u4e0b\u4e00\u4f4d\u662f `0` \uff0c\u540c\u7406 `ch[o][1]` \u6307\u4e0b\u4e00\u4f4d\u662f `1` \u3002\n-  `w[o]` \u6307\u8282\u70b9 `o` \u5230\u5176\u7236\u4eb2\u8282\u70b9\u8fd9\u6761\u8fb9\u4e0a\u6570\u503c\u7684\u6570\u91cf\uff08\u6743\u503c\uff09\u3002\u6bcf\u63d2\u5165\u4e00\u4e2a\u6570\u5b57 `x` \uff0c `x` \u4e8c\u8fdb\u5236\u62c6\u5206\u540e\u5728 trie \u4e0a \u8def\u5f84\u7684\u6743\u503c\u90fd\u4f1a `+1` \u3002\n-  `xorv[o]` \u6307\u4ee5 `o` \u4e3a\u6839\u7684\u5b50\u6811\u7ef4\u62a4\u7684\u5f02\u6216\u548c\u3002\n\n\u5177\u4f53\u7ef4\u62a4\u7ed3\u70b9\u7684\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002\n\n```cpp\nvoid maintain(int o) {\n  w[o] = xorv[o] = 0;\n  if (ch[o][0]) {\n    w[o] += w[ch[o][0]];\n    xorv[o] ^= xorv[ch[o][0]] << 1;\n  }\n  if (ch[o][1]) {\n    w[o] += w[ch[o][1]];\n    xorv[o] ^= (xorv[ch[o][1]] << 1) | (w[ch[o][1]] & 1);\n  }\n  // w[o] = w[o] & 1;\n  // \u53ea\u9700\u77e5\u9053\u5947\u5076\u6027\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u5177\u4f53\u7684\u503c\u3002\u5f53\u7136\u8fd9\u53e5\u8bdd\u5220\u6389\u4e5f\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e0a\u6587\u5c31\u53ea\u5229\u7528\u4e86\u4ed6\u7684\u5947\u5076\u6027\u3002\n}\n```\n\n\u63d2\u5165\u548c\u5220\u9664\u7684\u4ee3\u7801\u975e\u5e38\u76f8\u4f3c\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u5c31\u662f\uff1a\n\n- \u8fd9\u91cc\u7684 `MAXH` \u6307 trie \u7684\u6df1\u5ea6\uff0c\u4e5f\u5c31\u662f\u5f3a\u5236\u8ba9\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bb\u4e3a `MAXH` \u3002\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u503c\uff0c\u53ef\u80fd\u6709\u65f6\u5019\u4e0d\u9700\u8981\u5efa\u7acb\u8fd9\u4e48\u6df1\uff08\u4f8b\u5982\uff1a\u5982\u679c\u63d2\u5165\u6570\u5b57 `4` \uff0c\u5206\u89e3\u6210\u4e8c\u8fdb\u5236\u540e\u4e3a `100` \uff0c\u4ece\u6839\u5f00\u59cb\u63d2\u5165 `001` \u8fd9\u4e09\u4f4d\u5373\u53ef\uff09\uff0c\u4f46\u662f\u6211\u4eec\u5f3a\u5236\u63d2\u5165 `MAXH` \u4f4d\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4fbf\u4e8e\u5168\u5c40 `+1` \u65f6\u5904\u7406\u8fdb\u4f4d\u3002\u4f8b\u5982\uff1a\u5982\u679c\u539f\u6570\u5b57\u662f `3` \uff08 `11` \uff09\uff0c\u9012\u589e\u4e4b\u540e\u53d8\u6210 `4` \uff08 `100` \uff09\uff0c\u5982\u679c\u5f53\u521d\u63d2\u5165 `3` \u65f6\u53ea\u63d2\u5165\u4e86 `2` \u4f4d\uff0c\u90a3\u8fd9\u91cc\u7684\u8fdb\u4f4d\u5c31\u6ca1\u4e86\u3002\n\n- \u63d2\u5165\u548c\u5220\u9664\uff0c\u53ea\u9700\u8981\u4fee\u6539\u53f6\u5b50\u8282\u70b9\u7684 `w[]` \u5373\u53ef\uff0c\u5728\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\u4e00\u8def\u7ef4\u62a4\u5373\u53ef\u3002\n\n```cpp\nnamespace trie {\nconst int MAXH = 21;\nint ch[_ * (MAXH + 1)][2], w[_ * (MAXH + 1)], xorv[_ * (MAXH + 1)];\nint tot = 0;\nint mknode() {\n  ++tot;\n  ch[tot][1] = ch[tot][0] = w[tot] = xorv[tot] = 0;\n  return tot;\n}\nvoid maintain(int o) {\n  w[o] = xorv[o] = 0;\n  if (ch[o][0]) {\n    w[o] += w[ch[o][0]];\n    xorv[o] ^= xorv[ch[o][0]] << 1;\n  }\n  if (ch[o][1]) {\n    w[o] += w[ch[o][1]];\n    xorv[o] ^= (xorv[ch[o][1]] << 1) | (w[ch[o][1]] & 1);\n  }\n  w[o] = w[o] & 1;\n}\nvoid insert(int &o, int x, int dp) {\n  if (!o) o = mknode();\n  if (dp > MAXH) return (void)(w[o]++);\n  insert(ch[o][x & 1], x >> 1, dp + 1);\n  maintain(o);\n}\nvoid erase(int o, int x, int dp) {\n  if (dp > 20) return (void)(w[o]--);\n  erase(ch[o][x & 1], x >> 1, dp + 1);\n  maintain(o);\n}\n}  // namespace trie\n```\n\n#### \u5168\u5c40\u52a0\u4e00\n\n\u6240\u8c13\u5168\u5c40\u52a0\u4e00\u5c31\u662f\u6307\uff0c\u8ba9\u8fd9\u9897 trie \u4e2d\u6240\u6709\u7684\u6570\u503c `+1` \u3002\n\n\u5f62\u5f0f\u5316\u7684\u8bb2\uff0c\u8bbe trie \u4e2d\u7ef4\u62a4\u7684\u6570\u503c\u6709 $V_1, V_2, V_3 \\dots V_n$ , \u5168\u5c40\u52a0\u4e00\u540e \u5176\u4e2d\u7ef4\u62a4\u7684\u503c\u5e94\u8be5\u53d8\u6210 $V_1+1, V_2+1, V_3+1 \\dots V_n+1$ \n\n```cpp\nvoid addall(int o) {\n  swap(ch[o][0], ch[o][1]);\n  if (ch[o][0]) addall(ch[o][0]);\n  maintain(o);\n}\n```\n\n\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u4e8c\u8fdb\u5236\u610f\u4e49\u4e0b `+1` \u662f\u5982\u4f55\u64cd\u4f5c\u7684\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u5f00\u59cb\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684 `0` \uff0c\u628a\u5b83\u53d8\u6210 `1` \uff0c\u7136\u540e\u8fd9\u4e2a\u4f4d\u7f6e\u540e\u9762\u7684 `1` \u90fd\u53d8\u6210 `0` \u5373\u53ef\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u4f8b\u5b50\u611f\u53d7\u4e00\u4e0b\uff1a\uff08\u62ec\u53f7\u5185\u7684\u6570\u5b57\u8868\u793a\u5176\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6570\u5b57\uff09\n\n    1000(10)  + 1 = 1001(11)  ;\n    10011(19) + 1 = 10100(20) ;\n    11111(31) + 1 = 100000(32);\n    10101(21) + 1 = 10110(22) ;\n    100000000111111(16447) + 1 = 100000001000000(16448);\n\n\u5bf9\u5e94 trie \u7684\u64cd\u4f5c\uff0c\u5176\u5b9e\u5c31\u662f\u4ea4\u6362\u5176\u5de6\u53f3\u513f\u5b50\uff0c\u987a\u7740 **\u4ea4\u6362\u540e** \u7684 `0` \u8fb9\u5f80\u4e0b\u9012\u5f52\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u56de\u987e\u4e00\u4e0b `w[o]` \u7684\u5b9a\u4e49\uff1a `w[o]` \u6307\u8282\u70b9 `o` \u5230\u5176\u7236\u4eb2\u8282\u70b9\u8fd9\u6761\u8fb9\u4e0a\u6570\u503c\u7684\u6570\u91cf\uff08\u6743\u503c\uff09\u3002\n\n\u6709\u6ca1\u6709\u611f\u89c9\u8fd9\u4e2a\u5b9a\u4e49\u6709\u70b9\u602a\u5462\uff1f\u5982\u679c\u5728\u7236\u4eb2\u7ed3\u70b9\u5b58\u50a8\u5230\u4e24\u4e2a\u513f\u5b50\u7684\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u4e5f\u8bb8\u4f1a\u66f4\u63a5\u8fd1\u4e8e\u4e60\u60ef\u3002\u4f46\u662f\u5728\u8fd9\u91cc\uff0c\u5728\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u7684\u65f6\u5019\uff0c\u5728\u513f\u5b50\u7ed3\u70b9\u5b58\u50a8\u5230\u7236\u4eb2\u8fd9\u6761\u8fb9\u7684\u8ddd\u79bb\uff0c\u663e\u7136\u66f4\u52a0\u65b9\u4fbf\u3002\n\n### 01-trie \u5408\u5e76\n\n\u6307\u7684\u662f\u5c06\u4e0a\u8ff0\u7684\u4e24\u4e2a 01-trie \u8fdb\u884c\u5408\u5e76\uff0c\u540c\u65f6\u5408\u5e76\u7ef4\u62a4\u7684\u4fe1\u606f\u3002\n\n\u53ef\u80fd\u5173\u4e8e\u5408\u5e76 trie \u7684\u6587\u7ae0\u6bd4\u8f83\u5c11\uff0c\u5176\u5b9e\u5408\u5e76 trie \u548c\u5408\u5e76\u7ebf\u6bb5\u6811\u7684\u601d\u8def\u975e\u5e38\u76f8\u4f3c\uff0c\u53ef\u4ee5\u641c\u7d22\u201c\u5408\u5e76\u7ebf\u6bb5\u6811\u201d\u6765\u5b66\u4e60\u5982\u4f55\u5408\u5e76 trie\u3002\n\n\u5176\u5b9e\u5408\u5e76 trie \u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u8003\u8651\u4e00\u4e0b\u6211\u4eec\u6709\u4e00\u4e2a `int marge(int a, int b)` \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f20\u5165\u4e24\u4e2a trie \u6811\u4f4d\u4e8e\u540c\u4e00\u76f8\u5bf9\u4f4d\u7f6e\u7684\u7ed3\u70b9\u7f16\u53f7\uff0c\u7136\u540e\u5408\u5e76\u5b8c\u6210\u540e\u8fd4\u56de\u5408\u5e76\u5b8c\u6210\u7684\u7ed3\u70b9\u7f16\u53f7\u3002\n\n\u8003\u8651\u600e\u4e48\u5b9e\u73b0\uff1f\n\u5206\u4e09\u79cd\u60c5\u51b5\uff1a\n\n- \u5982\u679c `a` \u6ca1\u6709\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u7ed3\u70b9\uff0c\u65b0\u5408\u5e76\u7684\u7ed3\u70b9\u5c31\u662f `b` \n- \u5982\u679c `b` \u6ca1\u6709\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u7ed3\u70b9\uff0c\u65b0\u5408\u5e76\u7684\u7ed3\u70b9\u5c31\u662f `a` \n-   \u5982\u679c `a` , `b` \u90fd\u5b58\u5728\uff0c\u90a3\u5c31\u628a `b` \u7684\u4fe1\u606f\u5408\u5e76\u5230 `a` \u4e0a\uff0c\u65b0\u5408\u5e76\u7684\u7ed3\u70b9\u5c31\u662f `a` \uff0c\u7136\u540e\u9012\u5f52\u64cd\u4f5c\u5904\u7406 a \u7684\u5de6\u53f3\u513f\u5b50\u3002\n\n     **\u63d0\u793a** \uff1a\u5982\u679c\u9700\u8981\u7684\u5408\u5e76\u662f\u5c06 a\uff0cb \u5408\u5e76\u5230\u4e00\u68f5\u65b0\u6811\u4e0a\uff0c\u8fd9\u91cc\u53ef\u4ee5\u65b0\u5efa\u7ed3\u70b9\uff0c\u7136\u540e\u5408\u5e76\u5230\u8fd9\u4e2a\u65b0\u7ed3\u70b9\u4e0a\uff0c\u8fd9\u91cc\u7684\u4ee3\u7801\u5b9e\u73b0\u4ec5\u4ec5\u662f\u5c06 b \u7684\u4fe1\u606f\u5408\u5e76\u5230 a \u4e0a\u3002\n\n```cpp\nint marge(int a, int b) {\n  if (!a) return b;  // \u5982\u679c a \u6ca1\u6709\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u7ed3\u70b9\uff0c\u8fd4\u56de b\n  if (!b) return a;  // \u5982\u679c b \u6ca1\u6709\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u7ed3\u70b9\uff0c\u8fd4\u56de a\n  /*\n    \u5982\u679c `a`, `b` \u90fd\u5b58\u5728\uff0c\n    \u90a3\u5c31\u628a `b` \u7684\u4fe1\u606f\u5408\u5e76\u5230 `a` \u4e0a\u3002\n  */\n  w[a] = w[a] + w[b];\n  xorv[a] ^= xorv[b];\n  /* \u4e0d\u8981\u4f7f\u7528 maintain()\uff0c\n    maintain() \u662f\u5408\u5e76a\u7684\u4e24\u4e2a\u513f\u5b50\u7684\u4fe1\u606f\n    \u800c\u8fd9\u91cc\u9700\u8981 a b \u4e24\u4e2a\u8282\u70b9\u8fdb\u884c\u4fe1\u606f\u5408\u5e76\n   */\n  ch[a][0] = marge(ch[a][0], ch[b][0]);\n  ch[a][1] = marge(ch[a][1], ch[b][1]);\n  return a;\n}\n```\n\n\u5176\u5b9e trie \u90fd\u53ef\u4ee5\u5408\u5e76\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0ctrie \u5408\u5e76\u4e0d\u4ec5\u4ec5\u9650\u4e8e 01-trie\u3002\n\n\n\n\u5bf9\u4e8e\u672c\u9898\n\n\u6bcf\u4e2a\u7ed3\u70b9\u5efa\u7acb\u4e00\u68f5 trie \u7ef4\u62a4\u5176\u513f\u5b50\u7684\u6743\u503c\uff0ctrie \u5e94\u8be5\u652f\u6301\u5168\u5c40\u52a0\u4e00\u3002\n       \u53ef\u4ee5\u4f7f\u7528\u5728\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u4e0a\u8bbe\u7f6e\u61d2\u6807\u8bb0\u6765\u6807\u8bb0\u513f\u5b50\u7684\u6743\u503c\u7684\u589e\u52a0\u91cf\u3002\n       \n```cpp\nusing namespace std; \nnamespace trie{\n    const int _n = _ * 25;\n    int rt[_];\n    int ch[_n][2];\n    int w[_n]; \n    int xorv[_n];\n// w[i] is in order to save the weight of edge which is connect `i` and its `parent`.\n    int tot = 0;\n    void maintain(int o){\n        w[o] = xorv[o] = 0;\n        if(ch[o][0]){ w[o] += w[ch[o][0]]; xorv[o] ^=  xorv[ch[o][0]] << 1; }\n        if(ch[o][1]){ w[o] += w[ch[o][1]]; xorv[o] ^= (xorv[ch[o][1]] << 1) | (w[ch[o][1]] & 1); }\n    }\n    inline int mknode(){ ++tot; ch[tot][0] = ch[tot][1] = 0; w[tot] = 0; return tot; }\n    void insert(int &o, int x, int dp){\n    \tif(!o) o = mknode();\n        if(dp > 20) return (void)(w[o] ++);\n        insert(ch[o][ x&1 ], x >> 1, dp + 1);\n        maintain(o); \n    }\n    void erase(int o, int x, int dp){\n        if(dp > 20) return (void )(w[o]--);\n        erase(ch[o][ x&1 ], x >> 1, dp + 1);\n        maintain(o);\n    }\n    void addall(int o){\n        swap(ch[o][1], ch[o][0]);\n        if(ch[o][0]) addall(ch[o][0]);\n        maintain(o);\n    }\n}\n\nint head[_];\nstruct edges{\n\tint node;\n\tint nxt;\n}edge[_ << 1];\nint tot = 0;\nvoid add(int u, int v){\n\tedge[++tot].nxt = head[u];\n\thead[u] = tot;\n\tedge[tot].node = v;\n}\n\nint n, m;\nint rt;\nint lztar[_];\nint fa[_];\nvoid dfs0(int o, int f){\n    fa[o] = f;\n    for(int i = head[o];i;i = edge[i].nxt){\n        int node = edge[i].node;\n        if(node == f) continue;\n        dfs0(node, o);\n    }\n}\nint V[_];\ninline int get(int x){ return (fa[x] == -1 ? 0 : lztar[fa[x]]) + V[x]; }\nint main()\n{\n    clock_t c1 = clock();\n    \n    n = read(), m = read();\n    for(int i = 1;i < n;i++){\n        int u = read(), v = read();\n        add(u, v); add(rt = v, u);\n    }\n    dfs0(rt, -1);\n    for(int i = 1;i <= n;i++) { V[i] = read(); if(fa[i] != -1)trie::insert(trie::rt[fa[i]], V[i], 0);  }\n    while(m--){\n        int opt = read(), x = read();\n        if(opt == 1){\n            lztar[x] ++;\n            if(x != rt) {\n\n                if (fa[fa[x]] != -1) trie::erase(trie::rt[fa[fa[x]]], get(fa[x]), 0);\n                V[fa[x]]++;\n                if (fa[fa[x]] != -1) trie::insert(trie::rt[fa[fa[x]]], get(fa[x]), 0);\n\t\t\t}\n            trie::addall(trie::rt[x]);\n        } else if(opt == 2){\n            int v = read();\n            if(x != rt) trie::erase(trie::rt[fa[x]], get(x), 0);\n            V[x] -= v;\n            if(x != rt) trie::insert(trie::rt[fa[x]], get(x), 0);\n        } else {\n            int res = 0;\n            res = trie::xorv[trie::rt[x]];\n            res ^= get(fa[x]);\n            printf(\"%d\\n\", res);\n        }\n    }\n    std::cerr << \"\\n\\nTime:  \" << clock() - c1 << \"  ms\" << std::endl;\n\treturn 0;\n}\n```\n        ",
        "postTime": 1594373856,
        "uid": 44615,
        "name": "ShuYuMo",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6018 \u3010[Ynoi2010]Fusion tree\u3011"
    },
    {
        "content": "\u62a2\u4e2a\u9898\u89e3\u7684\u4e00\u8840\u5427\u3002\n\n\u8bdd\u8bf4\u8fd9\u9898\u4e5f\u4e0d\u7b97\u5f88\u96be\u800c\u4e14\u7279\u522b\u6e05\u771f\u4e3a\u5565\u6ca1\u4eba\u505a\u554a\u3002\n\n\u9996\u5148\u8fd9\u79cd\u9898\u5176\u5b9e\u662f\u4e2a\u5f88\u7ecf\u5178\u7684 trick \u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u53ea\u7ef4\u62a4\u5b83\u7684\u6240\u6709\u513f\u5b50\u3002\u7136\u540e\u5bf9\u4e8e\u7236\u4eb2\u5355\u72ec\u5904\u7406\u3002\u5bf9\u4e8e\u7236\u4eb2\u7684\u5904\u7406\u662f\u5e73\u51e1\u7684\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u7136\u540e\u8003\u8651\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u8981\u5904\u7406\u7684\u5c31\u662f\u5355\u70b9\u4fee\u6539\u548c\u5168\u5c40\u52a0\uff0c\u7136\u540e\u8981\u67e5\u8be2\u5168\u5c40\u5f02\u6216\u548c\u3002\n\n\u597d\u90a3\u73b0\u5728\u6211\u660e\u786e\u7684\u544a\u8bc9\u4f60\u8fd9\u4e2a\u9898\u6211\u4e0d\u4f1a\u3002\n\n\u2026\u2026\n\n\u4e0d\u5bf9\u554a\u4f60\u53d1\u73b0\u6bcf\u6b21\u5168\u5c40\u52a0\u7684\u90fd\u662f\u4e00\u554a\uff0c\u8fd9\u4e2a\u80af\u5b9a\u5f97\u6709\u7528\u554a\u3002\n\n\u8003\u8651\u52a0\u4e0a\u4e00\u5230\u5e95\u4f1a\u5bf9\u4e00\u4e2a\u6570\u9020\u6210\u4ec0\u4e48\u6837\u7684\u5f71\u54cd\u3002\n\n\u4e0d\u5c31\u662f\u628a\u6700\u4f4e\u4f4d\u7684\u96f6\u53d8\u6210\u4e00\u7136\u540e\u628a\u5b83\u4e0b\u9762\u7684\u6240\u6709\u4e00\u90fd\u53d8\u6210\u96f6\u5417\uff0c\u8fd9\u4e2a\u600e\u4e48\u5904\u7406\u554a\u3002\n\n\u6211\u4eec\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u5efa\u4e00\u4e2a trie\uff0c\u7136\u540e\u6309\u4f4d\u8003\u8651\u6bcf\u4e00\u4f4d\uff0c\u5bf9\u4e8e\u96f6\u5c31\u76f4\u63a5\u628a\u5b83\u53d8\u6210\u4e00\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u5c31\u53d8\u6210\u96f6\uff0c\u4f46\u662f\u8fd8\u8981\u9012\u5f52\u4e0b\u53bb\u3002\n\n\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5c31\u4ea4\u6362\u4e00\u4e0b\u513f\u5b50\u7136\u540e\u9012\u5f52\u4e0b\u53bb\u4fee\u6539\uff0c\u7ef4\u62a4\u4e00\u4e0b\u5b50\u6811\u5f02\u6216\u548c\u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\u5c31\u662f\u8fd9\u6837\u4e86\u3002\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u4ece\u6307\u9488\u6539\u6210\u6570\u7ec4\u7248\u5c31\u5feb\u4e86\u4e00\u4e9b\u3002\n```cpp\n#include<algorithm>\n#include<vector>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=5e5+5;\nint n,m,a[maxn];\nvector<int> g[maxn];\nint fa[maxn];\nvoid dfs(int u){\n\tfor(int i=0;i<(int)g[u].size();i++){\n\t\tint v=g[u][i];\n\t\tif(v==fa[u]) continue;\n\t\tfa[v]=u;\n\t\tdfs(v);\n\t}\n}\nint addv[maxn];\nint sz=0,base[maxn*25],ch[maxn*25][2],xorv[maxn*25],s[maxn*25];\nint newnode(int x){\n\tsz++;\n\tbase[sz]=x;\n\txorv[sz]=s[sz]=0;\n\tch[sz][0]=ch[sz][1]=0;\n\treturn sz;\n}\nvoid pushup(int x){\n\ts[x]=xorv[x]=0;\n\tif(ch[x][0]){\n\t\ts[x]+=s[ch[x][0]];\n\t\txorv[x]^=xorv[ch[x][0]];\n\t}\n\tif(ch[x][1]){\n\t\ts[x]+=s[ch[x][1]];\n\t\txorv[x]^=xorv[ch[x][1]];\n\t\tif(s[ch[x][1]]&1) xorv[x]|=1<<base[x];\n\t}\n}\nvoid insert(int u,int x){\n\tif(base[u]>20) s[u]++;\n\telse{\n\t\tif(x>>base[u]&1){\n\t\t\tif(!ch[u][1]) ch[u][1]=newnode(base[u]+1);\n\t\t\tinsert(ch[u][1],x);\n\t\t}\n\t\telse{\n\t\t\tif(!ch[u][0]) ch[u][0]=newnode(base[u]+1);\n\t\t\tinsert(ch[u][0],x);\n\t\t}\n\t\tpushup(u);\n\t}\n}\nvoid erase(int u,int x){\n\tif(base[u]>20) s[u]--;\n\telse{\n\t\tif(x>>base[u]&1) erase(ch[u][1],x);\n\t\telse erase(ch[u][0],x);\n\t\tpushup(u);\n\t}\n}\nvoid modify(int u){\n\tswap(ch[u][0],ch[u][1]);\n\tif(ch[u][0]) modify(ch[u][0]);\n\tpushup(u);\n}\nint rt[maxn];\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tm=readint();\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;\n\t\tu=readint();\n\t\tv=readint();\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=n;i++) a[i]=readint();\n\tfor(int i=1;i<=n;i++) rt[i]=newnode(0);\n\tfor(int i=2;i<=n;i++) insert(rt[fa[i]],a[i]);\n\twhile(m--){\n\t\tint opt=readint();\n\t\tif(opt==1){\n\t\t\tint x=readint();\n\t\t\taddv[x]++;\n\t\t\tmodify(rt[x]);\n\t\t\tif(x>1){\n\t\t\t\tif(fa[x]>1) erase(rt[fa[fa[x]]],a[fa[x]]+addv[fa[fa[x]]]);\n\t\t\t\ta[fa[x]]++;\n\t\t\t\tif(fa[x]>1) insert(rt[fa[fa[x]]],a[fa[x]]+addv[fa[fa[x]]]);\n\t\t\t}\n\t\t}\n\t\telse if(opt==2){\n\t\t\tint x,v;\n\t\t\tx=readint();\n\t\t\tv=readint();\n\t\t\tif(x>1) erase(rt[fa[x]],a[x]+addv[fa[x]]);\n\t\t\ta[x]-=v;\n\t\t\tif(x>1) insert(rt[fa[x]],a[x]+addv[fa[x]]);\n\t\t}\n\t\telse{\n\t\t\tint x=readint();\n\t\t\tif(x>1){\n\t\t\t\tif(fa[x]>1) printf(\"%d\\n\",xorv[rt[x]]^(a[fa[x]]+addv[fa[fa[x]]]));\n\t\t\t\telse printf(\"%d\\n\",xorv[rt[x]]^a[fa[x]]);\n\t\t\t}\n\t\t\telse printf(\"%d\\n\",xorv[rt[x]]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n~~\u4e0d\u4ec5\u6bd4 std \u591a\u4e00\u4e2a k\uff0c\u65f6\u95f4\u8fd8\u662f std \u7684\u4e24\u500d\uff0c\u88ab\u5361\u98de\u3002~~\n\n~~\u52a0\u4e86\u4e2a\u706b\u8f66\u5934\u7ec8\u4e8e\u8fc7\u4e86\u3002~~",
        "postTime": 1587645742,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6018 \u3010[Ynoi2010]Fusion tree\u3011"
    },
    {
        "content": "\u611f\u89c9\u505a\u8fc7\u51e0\u6b21\u8fd9\u79cd\u7c7b\u4f3c\u7684\u9898\u76ee\n\n~~\u7136\u800c\u8fd8\u662f\u4e0d\u4f1a~~\n\n\u6709\u4e2a\u5f88\u5e38\u89c1\u7684trick\u662f\uff1a\n\n#### - \u7edf\u4e00\u7ef4\u62a4\u4e00\u4e2a\u70b9\u6240\u6709\u513f\u5b50\u7684\u5f02\u6216\u548c\uff0c\u5355\u72ec\u7ef4\u62a4\u7236\u4eb2\n\n\u8003\u8651\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u8981\u5904\u7406\u7684\u5c31\u662f**\u5355\u70b9\u4fee\u6539\u548c\u5168\u5c40\u52a0**\uff0c\u7136\u540e\u8981\u67e5\u8be2**\u5168\u5c40\u5f02\u6216\u548c**\n\n\u6211\u4eec\u53d1\u73b0\u5bf9 1 \u4e2a\u6570 +1 \u53ef\u4ee5\u770b\u4f5c\u4ece**\u4f4e\u5230\u9ad8\u4f4d\u7684\u7b2c\u4e00\u4e2a 0 \u4fee\u6539\u6210 1\uff0c\u8be5 0 \u540e\u9762\u7684 1 \u4fee\u6539\u6210 0**\n\n\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u5bf9\u5e94\u7684\u6570\u653e\u5230\u8be5\u8282\u70b9\u5bf9\u5e94\u7684 01 trie \u4e2d\u8fdb\u884c\u4fee\u6539\u7684\u8bdd\u5c31\u662f\n\n- **\u5c06 0,1 \u7ffb\u8f6c\u540e\u8d70 0 \u90a3\u8fb9\uff0c\u7136\u540e\u9012\u5f52\u5730\u8fdb\u884c\u7ffb\u8f6c\u5c31\u884c**\n\n\u56e0\u4e3a\u672c\u4eba\u592a\u83dc\u53c2\u8003\u7684\u5176\u4ed6\u9898\u89e3\u7684\u4ee3\u7801\n\n\u5177\u4f53\u89c1\u4ee3\u7801\n\n```cpp\nconst int N = 5e5 + 10;\n\nint n, m;\n\nint cut, head[N], ver[N << 1], next[N << 1];\ninline void add(int x, int y)\n{\n\tver[++cut] = y; next[cut] = head[x]; head[x] = cut;\n}\n\nint f[N];\ninline void dfs(int x, int fa)\n{\n\tf[x] = fa;\n\tfor(R int i = head[x]; i; i = next[i])\n\t{\n\t\tint y = ver[i];\n\t\tif(y == fa) continue;\n\t\tdfs(y, x);\n\t}\n}\n\nint base[21 * N], ch[21 * N][2], xorv[21 * N], num[21 * N], tot;\ninline int newnode(int x)\n{\n\ttot++;\n\tbase[tot] = x;\n\tch[tot][0] = ch[tot][1] = 0;\n\txorv[tot] = num[tot] = 0;\n\treturn tot;\n}\n\ninline void pushup(int x)\n{\n\tnum[x] = xorv[x] = 0;\n\tif(ch[x][0])\n\t{\n\t\tnum[x] += num[ch[x][0]];\n\t\txorv[x] ^= xorv[ch[x][0]];\n\t}\n\tif(ch[x][1])\n\t{\n\t\tnum[x] += num[ch[x][1]];\n\t\txorv[x] ^= xorv[ch[x][1]];\n\t\tif(num[ch[x][1]] & 1) xorv[x] |= 1 << base[x];\\\\\u8fd9\u4e00\u4f4d\u4e3a1\u4e14\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\uff0c\u5219\u5f02\u6216\u548c\u4e3a1\n\t}\n}\n\ninline void insert(int x, int val)\\\\\u63d2\u5165\n{\n\tif(base[x] > 20) num[x]++;\n\telse\n\t{\n\t\tif(val >> base[x] & 1)\n\t\t{\n\t\t\tif(!ch[x][1]) ch[x][1] = newnode(base[x] + 1);\n\t\t\tinsert(ch[x][1], val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!ch[x][0]) ch[x][0] = newnode(base[x] + 1);\n\t\t\tinsert(ch[x][0], val);\n\t\t}\n\t\tpushup(x);\n\t}\n}\n\ninline void erase(int x, int val)\\\\\u5220\u9664\n{\n\tif(base[x] > 20) num[x]--;\n\telse\n\t{\n\t\tif(val >> base[x] & 1) erase(ch[x][1], val);\n\t\telse erase(ch[x][0], val);\n\t\tpushup(x);\n\t}\n}\n\ninline void modify(int x)\\\\\u52a01\u64cd\u4f5c\n{\n\tswap(ch[x][0], ch[x][1]);\n\tif(ch[x][0]) modify(ch[x][0]);\n\tpushup(x);\n}\n\nint root[N], a[N], ad[N];\nint opt, x, y;\n\nsigned main()\n{\n\tinto();\n\tread(n); read(m);\n\tfor(R int i = 1; i < n; i++)\n\t{\n\t\tread(x); read(y);\n\t\tadd(x, y); add(y, x);\n\t}\n\tdfs(1, 0);\n\tfor(R int i = 1; i <= n; i++) read(a[i]);\n\tfor(R int i = 1; i <= n; i++) root[i] = newnode(0);\n\tfor(R int i = 2; i <= n; i++) insert(root[f[i]], a[i]);\n\twhile(m--)\n\t{\n\t\tread(opt); read(x);\n       \t\t\\\\\u66b4\u529b\u4fee\u6539\uff0c\u5148\u5220\u53bb\u4e4b\u524d\u7684 \u518d\u4fee\u6539\u503c \u518d\u52a0\u56de\u53bb\n\t\tif(opt == 1)\n\t\t{\n\t\t\tad[x]++;\n\t\t\tmodify(root[x]);\n\t\t\tif(x != 1)\n\t\t\t{\n\t\t\t\tif(f[x] != 1) erase(root[f[f[x]]], a[f[x]] + ad[f[f[x]]]);\n\t\t\t\ta[f[x]]++;\n\t\t\t\tif(f[x] != 1) insert(root[f[f[x]]], a[f[x]] + ad[f[f[x]]]);\n\t\t\t}\n\t\t}\n\t\tif(opt == 2)\n\t\t{\n\t\t\tread(y);\n\t\t\tif(x != 1) erase(root[f[x]], a[x] + ad[f[x]]);\n\t\t\ta[x] -= y;\n\t\t\tif(x != 1) insert(root[f[x]], a[x] + ad[f[x]]);\n\t\t}\n        \t\\\\\u5206\u4e09\u79cd\u60c5\u51b5\n\t\tif(opt == 3)\n\t\t{\n\t\t\tif(x != 1)\n\t\t\t{\n\t\t\t\tif(f[x] != 1) writeln(xorv[root[x]] ^ (a[f[x]] + ad[f[f[x]]]));\n\t\t\t\telse writeln(xorv[root[x]] ^ a[f[x]]);\n\t\t\t}\n\t\t\telse writeln(xorv[root[x]]);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1604053999,
        "uid": 103023,
        "name": "AvA_sleeper",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6018 \u3010[Ynoi2010]Fusion tree\u3011"
    },
    {
        "content": "### P.S.\n\u8fd9\u7edd\u5bf9\u662f\u6211 Ynoi \u4e2d\u4ee3\u7801\u5199\u5730\u6700\u77ed\u5730\u4e00\u9898\u4e86 ![](//xn--9zr.tk/wq)\u3002  \n\u5c0f\u8df3\u86d9\u65e0\u836f\u53ef\u6551\u3002  \n### Description.\n\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\u3002\n1. \u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u548c\u5b83\u76f8\u90bb\u5730\u6240\u6709\u70b9\u6743\u503c $+1$\u3002\n2. \u5355\u70b9\u4fee\u6539\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u3002\n3. \u67e5\u8be2\u4e0e\u4e00\u4e2a\u70b9\u76f8\u90bb\u6240\u6709\u70b9\u7684\u5f02\u6216\u548c\u3002\n\n### Solution.\n\u9996\u5148\uff0c\u4fee\u6539/\u67e5\u8be2\u76f8\u90bb\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u5f88\u5947\u602a\u3002  \n\u8ba9\u6211\u4eec\u4e0d\u7981\u8054\u60f3\u5230\u4e86\u4e00\u4e2a\u5957\u8def\uff1a  \n\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u5b83\u6240\u6709\u5b69\u5b50\u7684\u6743\u503c\uff0c\u7236\u4eb2\u7684\u6743\u503c\u66b4\u529b\u4fee\u6539\u3002  \n\u8fd9\u6837\u56e0\u4e3a\u9664\u6839\u4e4b\u5916\u7684\u6240\u6709\u70b9\u90fd\u4ec5\u6709\u4e00\u4e2a\u7236\u4eb2\uff0c\u6240\u4ee5\u65f6\u7a7a\u590d\u6742\u5ea6\u6b63\u786e\u3002  \n\n\u7136\u540e\uff0c\u6211\u4eec\u53c8\u770b\u5230\u4e86\u5f02\u6216\u548c\u64cd\u4f5c\u3002  \n\u60f3\u5230\u5f02\u6216\u5c31\u76f4\u63a5\u60f3\u5230\u4e86\u8981\u7528 01trie \u8868\u793a\u5f02\u6216\u64cd\u4f5c\u3002  \n\u5355\u70b9\u4fee\u6539\u76f4\u63a5\u786c\u4e0a 01trie \u4fee\u6539\u5c31\u597d\u4e86\uff0c\u76f8\u5f53\u4e8e\u63d2\u5165\u4e00\u4e2a\u6570\u5220\u9664\u4e00\u4e2a\u6570\u3002  \n\u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u67d0\u4e2a\u7ed3\u70b9\u7684 size\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5bf9 size --\u3002  \n\n\u4e0d\u8fc7\uff0c\u8fd9\u4e24\u4e2a\u95ee\u9898\u7ed3\u5408\u8d77\u6765\u5c31\u53c8\u4ea7\u751f\u4e86\u4e00\u4e2a\u95ee\u9898\u2014\u2014\u5982\u4f55\u5bf9 01trie\u6811 \u505a\u5168\u5c40 +1\u3002  \n\u6b63\u5e38\u7684 01trie\u6811 \u662f\u65e0\u6cd5\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u7684\u3002  \n\u4e0d\u8fc7\u6211\u4eec\u5f00\u52a8\u4eba\u7c7b\u667a\u6167\uff0c\u53cd\u5efa trie\u6811\u3002  \n\u5927\u6982\u5c31\u662f\u7b2c\u4e00\u5c42\u6309\u7167\u6700\u540e\u4e00\u4f4d\u5206\u7c7b\u3002  \n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u66b4\u529b\u6a21\u62df\u8fdb\u4f4d\u4e86\u3002  \n\u5927\u6982\u5c31\u662f\u9996\u5148\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\uff0c\u7136\u540e\u5bf9\u539f\u6765\u4e3a 1 \u7684\u90a3\u68f5\u5b50 01trie \u7ee7\u7eed +1\u3002  \n\u6b63\u5e38\u7684 01trie \u7ef4\u62a4\u4e86\u5927\u5c0f\u5173\u7cfb\uff0c\u53cd\u5efa\u5927\u5c0f\u5173\u7cfb\u4fe1\u606f\u4e22\u5931\u3002  \n\u4e0d\u8fc7\u8fd9\u9898\u5e76\u4e0d\u9700\u8981\u67e5\u8be2 K\u5c0f \u4e4b\u7c7b\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u4e22\u5931\u4e86\u4e5f\u53ef\u4ee5\u89e3\u9898\u3002  \n\n\u7136\u540e\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002  \n\n### Coding.\n30 \u884c\u4ee3\u7801\u5982\u4e0b\uff0c\u5ba3\u4f20\u4f18\uff08du\uff09\u826f\uff08liu\uff09\u7801\u98ce\u3002\n```cpp\n//\u662f\u554a\u2026\u2026\u4f60\u5c31\u662f\u90a3\u53ea\u9b3c\u4e86\u2026\u2026\u6240\u4ee5\u88ab\u4f60\u78b0\u5230\u4ee5\u540e\uff0c\u5c31\u8f6e\u5230\u6211\u53d8\u6210\u9b3c\u4e86\n#include<bits/stdc++.h>\nusing namespace std;typedef long long ll;\ntemplate<typename T>inline void read(T &x)\n{\n\tx=0;char c=getchar(),f=0;\n\tfor(;c<'0'||c>'9';c=getchar()) if(c=='-') f=1;\n\tfor(;c>='0'&&c<='9';c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tif(f) x=-x;\n}\nconst int N=500005,M=21;\nint n,m,ch[N*M][2],vl[N*M],tt,sz[N*M],rt[N],lz[N],a[N];\nstruct edge{int to,nxt;}e[N<<1];int et,head[N],fa[N];\ninline void adde(int x,int y) {e[++et]=(edge){y,head[x]},head[x]=et;}\ninline void pushup(int x) {sz[x]=sz[ch[x][0]]+sz[ch[x][1]],vl[x]=(vl[ch[x][0]]^vl[ch[x][1]])<<1|(sz[ch[x][1]]&1);}\ninline void allr(int x) {if(!x);else swap(ch[x][0],ch[x][1]),allr(ch[x][0]),pushup(x);}\ninline void insrt(int &x,int v,int dep=0) {x?x:x=++tt;if(dep==M) sz[x]++;else insrt(ch[x][(v>>dep)&1],v,dep+1),pushup(x);}\ninline void erase(int &x,int v,int dep=0) {if(!x);else if(dep==M) sz[x]--;else erase(ch[x][(v>>dep)&1],v,dep+1),pushup(x);}\ninline void dfs0(int x) {for(int i=head[x];i;i=e[i].nxt) if(e[i].to!=fa[x]) fa[e[i].to]=x,dfs0(e[i].to);}\ninline int qry(int x) {return fa[x]?lz[fa[x]]+a[x]:a[x];}\ninline void Add(int x,int w) {(fa[x]?erase(rt[fa[x]],qry(x)):void()),a[x]+=w,(fa[x]?insrt(rt[fa[x]],qry(x)):void());}\ninline void Mdf(int x) {lz[x]++,(fa[x]?Add(fa[x],1):void()),allr(rt[x]);}\ninline void Que(int x) {printf(\"%d\\n\",vl[rt[x]]^qry(fa[x]));}\nint main()\n{\n\tread(n),read(m);for(int i=1,x,y;i<n;i++) read(x),read(y),adde(x,y),adde(y,x);\n\tdfs0(1);for(int i=1;i<=n;i++) read(a[i]),(fa[i]?insrt(rt[fa[i]],a[i]):void());\n\tfor(int op,x,y;m--;) {read(op),read(x);op==1?Mdf(x):(op&1?Que(x):(read(y),Add(x,-y)));}\n\treturn 0;\n}\n```",
        "postTime": 1616754374,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "P6018 [Ynoi2010] Fusion tree\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "## \u4e00\u3001\u9898\u610f\n\n\u5b9a\u4e49\u4e00\u4e2a\u70b9\u7684**\u4e34\u70b9**\u4e3a\u4e0e\u6b64\u70b9\u8ddd\u79bb\u4e3a $1$ \u7684\u70b9\u7684\u70b9\u96c6\u3002\n\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u6b21\u7ed9\u5b9a\u4e00\u4e2a\u70b9 $u$\uff0c\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c$u$ \u7684**\u4e34\u70b9**\u52a0 $1$\uff0c\u67e5\u8be2 $u$ \u7684**\u4e34\u70b9**\u7684\u5f02\u6216\u548c\u3002\n\n## \u4e8c\u3001\u601d\u8def\n\n\u53d1\u73b0\u76f4\u63a5\u8003\u8651**\u4e34\u70b9**\u4e0d\u597d\u5904\u7406\uff0c\u8003\u8651\u94a6\u5b9a\u4e00\u4e2a**\u6839**\uff0c\u5c06**\u4e34\u70b9**\u5206\u4e3a $u$ \u7684**\u513f\u5b50**\u548c**\u7236\u4eb2**\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5efa\u4e00\u68f5 $\\text{01Trie}$ \u7ef4\u62a4**\u513f\u5b50**\u7684\u5f02\u6216\u548c\uff0c\u7236\u4eb2\u7684\u4fee\u6539\u53ef\u4ee5\u5355\u72ec\u5904\u7406\u3002\u67e5\u8be2\u65f6\u5c31\u67e5\u8be2 $\\text{01Trie}$ \u5185\u7684\u7b54\u6848\u4e0e $u$ \u7236\u4eb2\u7684\u503c\u7684\u5f02\u6216\u548c\u5373\u53ef\u3002\n\n\u90a3\u4e48**\u4e34\u70b9**\u52a0 $1$ \u7684\u64cd\u4f5c\u53ef\u4ee5\u62c6\u5206\u4e3a $\\text{01Trie}$ \u7684**\u5168\u5c40\u52a0 $1$ **\u548c\u7236\u4eb2\u7684**\u5355\u70b9\u4fee\u6539**\u3002\u5148\u8003\u8651\u5982\u4f55\u5168\u5c40\u52a0 $1$\u3002\u5206\u6790**\u5728\u4e8c\u8fdb\u5236\u4e0b**\u4e00\u4e2a\u6570\u52a0 $1$ \u7684\u53d8\u5316\u53ef\u4ee5\u770b\u51fa\uff0c\u52a0 $1$ \u5b9e\u9645\u4e0a\u662f\u5c06\u4f4e\u4f4d\u8d77\u4e00\u6bb5\u8fde\u7eed\u7684 $1$ \u8d4b\u503c\u4e3a $0$\uff0c\u518d\u5c06\u66f4\u9ad8\u4e00\u4f4d\u7684 $0$ \u8d4b\u503c\u4e3a $1$\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a trick\uff1a\u6211\u4eec\u4ece\u4f4e\u4f4d\u5411\u9ad8\u4f4d\u5efa $\\text{01Trie}$\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5b50\u6811\u5185\u7684**\u6570\u503c**\u7684\u4e2a\u6570\u7684**\u5947\u5076**\u4e0e\u5b50\u6811\u5185\u7684**\u5f02\u6216\u548c**\u3002\u5728\u5168\u5c40\u52a0 $1$ \u65f6\uff0c\u6211\u4eec\u8fdb\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u4ea4\u6362\u5176 $01$ \u513f\u5b50\uff0c\u518d\u9012\u5f52\u8fdb\u5165\u5b83\u7684 $0$ \u513f\u5b50\uff0c\u76f4\u5230\u5f53\u524d\u8282\u70b9\u6ca1\u6709 $0$ \u513f\u5b50\u3002\u4ed4\u7ec6\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u5bf9**\u6240\u6709\u6570**\u4e0d\u65ad\u5c06\u4f4e\u4f4d\u7684 $1$ \u53d8\u4e3a $0$\uff0c\u518d\u5c06\u5168 $1$ \u524d\u7f00\u7684\u4e0b\u4e00\u4e2a $0$ \u53d8\u4e3a $1$ \u7684\u8fc7\u7a0b\u3002\n\n\u6ce8\u610f\u6b64\u65f6 $u$ \u7684\u513f\u5b50\u52a0 $1$ \u4f1a\u5bf9\u5176**\u513f\u5b50\u7684\u513f\u5b50**\u4ea7\u751f\u5f71\u54cd\uff0c\u4f46\u6211\u4eec\u4e0d\u80fd\u4f9d\u6b21\u4fee\u6539\u5176\u513f\u5b50\u7684\u503c\u3002\u8fd9\u91cc\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8282\u70b9\u5904\u8bb0\u5f55\u4e00\u4e2a tag\uff0c\u66f4\u65b0 $u$ \u7684\u4e34\u70b9\u65f6\u5c06 $u$ \u4e0a\u7684 tag \u52a0 $1$\uff0c\u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u65f6\u8981\u8ba1\u7b97\u5b83\u7684\u503c\u4e0e\u5176**\u7236\u4eb2**\u7684 tag \u4e4b\u548c\u3002\n\n\u5355\u70b9\u4fee\u6539\u65f6\uff0c\u8ba1\u7b97 $u$ \u7684\u539f\u503c\uff0c\u5728 $u$ \u7684\u7236\u4eb2\u7684 $\\text{01Trie}$ \u4e0a\u5220\u9664\uff0c\u518d\u5728 $\\text{01Trie}$ \u4e0a\u63d2\u5165\u65b0\u503c\u5e76\u66f4\u65b0 $u$ \u7684\u503c\u5373\u53ef\u3002\u5e76\u4e14\u7531\u4e8e\u5728 $\\text{01Trie}$ \u4e2d\u6211\u4eec\u53ea\u8bb0\u5f55\u6570\u503c\u4e2a\u6570\u7684\u5947\u5076\u4e0e\u5f02\u6216\u548c\uff0c\u63d2\u5165\u4e0e\u5220\u9664\u5176\u5b9e\u5e76\u65e0\u533a\u522b\u3002\n\n\n\n### AC code\n\n```cpp\n//written_by_FTL\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<map>\n#define ll long long\n#define LD long double\n#define i7 __int128\n#define re return\n#define con continue\nusing namespace std;\nconst int N=5e5+5;\nint rd(){\n\tint ans=0,f=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')f^=(ch=='-'),ch=getchar();\n\twhile(ch>='0'&&ch<='9')ans=(ans<<3)+(ans<<1)+(ch^48),ch=getchar();\n\tre f?-ans:ans;\n}\nint n,m,u,v,k,rt[N],a[N],tg[N];\nint nd[N],tt=1;\nstruct edge{\n\tint v,nxt;\n}e[N<<1];\nvoid add(int u,int v){\n\te[++tt]={v,nd[u]};\n\tnd[u]=tt;\n}\nint f[N];\nnamespace TR{\n\t#define b ((x>>k)&1)\n\t#define t d[v]\n\t#define vl t.s[b]\n\t#define vr t.s[b^1]\n\t#define tl d[vl]\n\t#define tr d[vr]\n\tint num=0,x=0,k=0;\n\tstruct data{\n\t\tint s[2]={0};int c=0,ans=0;\n\t}d[N*25];\n\tvoid pu(int v){//\u5408\u5e76\u8282\u70b9\u7684\u503c\n\t\tt.c=tl.c^tr.c;\n\t\tt.ans=(tl.ans<<1)^((tr.ans<<1)|tr.c);\n\t}\n\tvoid ins(int &v,int x,int k){//\u63d2\u5165\u4e00\u4e2a\u6570\n\t\tif(!v)v=++num;\n\t\tif(k>20){t.c^=1;re;}\n\t\tins(vl,x,k+1);\n\t\tpu(v);\n\t}\n\tvoid ud(int v){//\u5168\u5c40\u52a01\n\t\tswap(vl,vr);\n\t\tif(t.s[0])ud(t.s[0]);\n\t\tpu(v);\n\t}\n\t#undef b\n\t#undef t\n\t#undef vl\n\t#undef vr\n}\nvoid dfs(int u,int fa){\n\tf[u]=fa;\n\tfor(int i=nd[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v==fa)con;\n\t\tdfs(v,u);\n\t}\n}\nint main(){\n\tn=rd(),m=rd();\n\tfor(int i=1;i<n;i++){\n\t\tu=rd(),v=rd();\n\t\tadd(u,v),add(v,u);\n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<=n;i++){\n\t\ta[i]=rd();\n\t\tif(f[i])TR::ins(rt[f[i]],a[i],0);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tswitch(rd()){\n\t\t\tcase 1:{\n\t\t\t\tu=rd();\n\t\t\t\tif(rt[u]){\n\t\t\t\t\tTR::ud(rt[u]);\n\t\t\t\t\ttg[u]++;\n\t\t\t\t}\n\t\t\t\tif(f[u]){\n\t\t\t\t\tu=f[u];\n\t\t\t\t\tv=a[u]+tg[f[u]];\n\t\t\t\t\ta[u]++;\n\t\t\t\t\tif(f[u]){\n\t\t\t\t\t\tTR::ins(rt[f[u]],v,0);\n\t\t\t\t\t\tTR::ins(rt[f[u]],v+1,0);\t\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tu=rd(),k=rd();\n\t\t\t\tv=a[u]+tg[f[u]];\n\t\t\t\ta[u]-=k;\n\t\t\t\tif(f[u]){\n\t\t\t\t\tTR::ins(rt[f[u]],v,0);\n\t\t\t\t\tTR::ins(rt[f[u]],v-k,0);\t\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3:{\n\t\t\t\tu=rd();\n\t\t\t\tprintf(\"%d\\n\",TR::d[rt[u]].ans^(a[f[u]]+tg[f[f[u]]]));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tre 0;\n}\n```\n\n### $\\text{The End.}$\n\n",
        "postTime": 1649685437,
        "uid": 346440,
        "name": "FreeTimeLove",
        "ccfLevel": 7,
        "title": "P6018\u3010Fusion tree\u3011"
    },
    {
        "content": "\u53d1\u73b0\u6bcf\u4e2a\u70b9\u8ddd\u79bb\u4e3a $1$ \u7684\u8282\u70b9\u5c31\u662f\u513f\u5b50\u6216\u8005\u7236\u4eb2\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u513f\u5b50\u548c\u7236\u4eb2\u5206\u5f00\u6765\u7b97\u3002\n\n\u8ba1\u7b97\u7236\u4eb2\u662f\u5f88\u5bb9\u6613\u7684\uff0c\u76f4\u63a5\u7ef4\u62a4 $a$ \u7684\u503c\u3002\u5bf9\u4e8e\u64cd\u4f5c $1$ \uff0c\u5728\u7236\u4eb2\u4e0a\u6807\u8bb0\u5c31\u884c\u4e86\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u8fdb\u884c\u8fc7\u51e0\u6b21\u7684\u64cd\u4f5c $1$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u513f\u5b50\uff0c\u5c31\u4f1a\u53d1\u73b0\u662f\u8981\u7ef4\u62a4\uff1a\u5355\u70b9\u52a0\u5165\u3001\u5355\u70b9\u5220\u9664\u3001\u5168\u5c40 $+1$\uff0c\u5168\u5c40\u5f02\u6216\u548c\u3002\n\n\u5982\u679c\u5bf9 01-trie \u6bd4\u8f83\u719f\u6089\uff0c\u53ef\u4ee5\u53d1\u73b0 01-trie \u53ef\u4ee5\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u3002\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u5efa\u7acb 01-trie\uff0c\u5927\u81f4\u662f\u8981\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684\u5f02\u6216\u548c $val$\uff0c\u8fd8\u6709\u6bcf\u4e2a\u8282\u70b9\u5230\u7236\u4eb2\u7684\u8fb9\u6743 $w$\uff08\u6307\u8fd9\u6761\u8fb9\u88ab\u7ecf\u8fc7\u4e86\u51e0\u6b21\uff09\u3002\n\n\u7531\u4e8e\u662f\u5f02\u6216\uff0c\u4f1a\u53d1\u73b0\u53ef\u4ee5\u53ea\u8003\u8651 $w$ \u7684\u5947\u5076\u6027\u3002\u4e8e\u662f push_up \u5927\u81f4\u662f\u8fd9\u6837\u7684\uff1a\n\n```cpp\ninline void push_up(int u)\n{\n\tw[u]=0,val[u]=0;\n\tif (nxt[u][0])\n\t{\n\t\tw[u]^=w[nxt[u][0]];\n\t\tval[u]^=(val[nxt[u][0]]<<1);\n\t}\n\tif (nxt[u][1])\n\t{\n\t\tw[u]^=w[nxt[u][1]];\n\t\tval[u]^=(val[nxt[u][1]]<<1);\n\t\tif (w[nxt[u][1]]==1) val[u]^=1;\n\t}\n}\n```\n\n\u6ce8\u610f\u5230\u53ea\u8003\u8651 $w$ \u7684\u5947\u5076\u6027\uff0c\u56e0\u6b64 insert \u548c delete \u672c\u8d28\u76f8\u540c\u3002\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5148\u52a0\u5165\u4e00\u4e2a\u6570 $x$\uff0c\u8981\u628a\u5b83\u5220\u9664\u7b49\u540c\u4e8e\u518d\u52a0\u4e00\u4e2a $x$\uff0c\u8fd9\u6837\u5f02\u6216\u548c\u4e3a $0$ \u4e86\u3002\u6240\u4ee5\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u5199\u4e24\u4e2a\u51fd\u6570\uff08\u4f46\u662f\u597d\u50cf\u57fa\u672c\u4e0a\u9898\u89e3\u90fd\u5199\u4e86\uff09\u3002\n\n\u5982\u4f55\u5904\u7406\u5168\u5c40 $+1$\uff1f\u4ece\u4f4e\u5230\u9ad8\u8003\u8651\uff0c\u6bcf\u4e00\u4f4d $1$ \u53d8\u6210 $0$ \u540c\u65f6\u8fdb\u4f4d\uff0c$0$ \u53d8\u6210 $1$ \u4e0d\u8fdb\u4f4d\u3002\u9012\u5f52\u505a\u5c31\u884c\u4e86\u3002\n\n```cpp\nvoid add(int x)\n{\n\tswap(nxt[x][0],nxt[x][1]);\n\tif (nxt[x][0]) add(nxt[x][0]);\n\tpush_up(x);\n}\n```\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u7ef4\u62a4\u4e86\u3002\u6ce8\u610f\u4e00\u4e9b\u5b9e\u73b0\u7684\u7ec6\u8282\u3002\n\n[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.com.cn/record/61173676)\u3002[\u4ee3\u7801\u5b9e\u73b0](https://www.luogu.com.cn/paste/x2bpdqvk)\u3002\n",
        "postTime": 1635430958,
        "uid": 151475,
        "name": "Little09",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6018 [Ynoi2010] Fusion tree"
    },
    {
        "content": "lxl \u8bf4\u8fc7\u90bb\u57df\u4fe1\u606f\u7ef4\u62a4\u7236\u4eb2\u4e00\u5b9a\u6b7b\uff0c\u6240\u4ee5\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u513f\u5b50\uff0c\u7279\u5224\u7236\u4eb2\u3002\n\n\u8003\u8651\u6bcf\u4e2a\u70b9\u7684\u6570\u636e\u7ed3\u6784\u9700\u8981\u652f\u6301\u4ec0\u4e48\u64cd\u4f5c\uff1a\u5168\u5c40\u52a0\u4e00\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u5168\u5c40\u5f02\u6216\u548c\u3002\u7528 01Trie \u7ef4\u62a4\u3002\n\n\u4e0e\u7ef4\u62a4\u6700\u5927\u5f02\u6216\u5bf9\u7684 01Trie \u4e0d\u540c\uff0c\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u5efa\u6811\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u7ef4\u62a4\u5b50\u6811\u5f02\u6216\u548c\uff0c\u4fee\u6539\u65f6 push up\u3002\n\n\u8003\u8651\u600e\u4e48 push up\u3002\u4ece $u$ \u5f80\u5176 $0/1$ \u5b50\u6811\u4e2d\u8d70\u5230\u53f6\u5b50\u5f62\u6210\u7684\u6570\uff0c\u5c31\u662f\u4ece $u$ \u7684 $0/1$ \u5b69\u5b50\u8d70\u5230\u53f6\u5b50\u5f62\u6210\u7684\u6570\u540e\u9762\u52a0\u4e00\u4f4d $0/1$\uff0c\n\n\u6240\u4ee5 $u$ \u5b50\u6811\u6570\u96c6\u5305\u542b $u$ \u7684 $0$ \u5b69\u5b50\u5b50\u6811\u6570\u96c6\u4e2d\u6240\u6709\u6570\u540e\u9762\u52a0\u4e00\u4f4d $0$\uff0c$u$ \u7684 $1$ \u5b69\u5b50\u5b50\u6811\u6570\u96c6\u4e2d\u6240\u6709\u6570\u540e\u9762\u52a0\u4e00\u4f4d $1$\uff0c\n\n\u5373 $u$ \u5b50\u6811\u6570\u96c6\u4e2d\uff0c$u$ \u7684 $0$ \u5b69\u5b50\u5b50\u6811\u5f02\u6216\u548c\u540e\u9762\u52a0\u4e00\u4f4d $0$\uff1b\u82e5 $u$ \u7684 $1$ \u5b69\u5b50\u5b50\u6811\u6570\u96c6\u5927\u5c0f\u4e3a\u5947\u6570\uff0c\u5176\u5f02\u6216\u548c\u540e\u9762\u52a0\u4e00\u4f4d $1$\uff0c\u5426\u5219\u52a0 $0$\u3002\n\n\u8003\u8651\u600e\u4e48\u5168\u5c40\u52a0\u4e00\u3002\u52a0\u4e00\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f\u4ece\u4f4e\u5230\u9ad8\u6309\u4f4d\u53d6\u53cd\uff0c\u82e5\u5f53\u524d\u4f4d\u53d6\u53cd\u540e\u4e3a $0$ \u5219\u7ee7\u7eed\u53d6\u53cd\u4e0b\u4e00\u4f4d\uff0c\n\n\u6240\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u4ea4\u6362 $0/1$ \u5b69\u5b50\uff0c\u7136\u540e\u7ee7\u7eed\u4ea4\u6362 $0$ \u5b69\u5b50\u7684 $0/1$ \u5b69\u5b50\u3002\n\n\u6307\u9488\u975e\u5e38\u597d\u5199\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define V(x) a[x] + z[f[x]]\n#define O(x, k) if(f[x]) C(V(x), 0, r[f[x]]);a[x] += k;if(f[x]) C(V(x), 0, r[f[x]])\nusing namespace std;\nstruct E{int v, t;}e[1000050];\nint n, m, c, a[500050], z[500050], f[500050], h[500050];\nvoid A(int u, int v) {e[++c] = {v, h[u]};h[u] = c;}\nstruct T\n{\n\tT *c[2];int s, w;T() : c{0, 0}, w(0) {}void u()\n\t{\n\t\tif(c[s = w = 0]) s ^= c[0]->s, w ^= c[0]->w << 1;\n\t\tif(c[1]) s ^= c[1]->s, w ^= c[1]->w << 1 | c[1]->s; \n\t}\n}*r[500050];\nvoid C(int x, int d, T *&p)\n{\n\tif(!p) p = new T;if(d >= 20) return void(p->s ^= 1);\n\tC(x, d + 1, p->c[x >> d & 1]);p->u();\n}\nvoid M(T *p) {if(p) swap(p->c[0], p->c[1]), M(p->c[0]), p->u();}\nvoid D(int u)\n{\n\tfor(int i = h[u], v;i;i = e[i].t)\n\t\tif(!r[v = e[i].v]) C(a[v], 0, r[f[v] = u]), D(v);\n}\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1, u, v;i < n;++i)\n\t\tscanf(\"%d%d\", &u, &v), A(u, v), A(v, u);\n\tfor(int i = 1;i <= n;++i) scanf(\"%d\", a + i);D(1);\n\tfor(int i = 0, o, x, v;i < m;++i)\n\t{\n\t\tscanf(\"%d%d\", &o, &x);\n\t\tswitch(o)\n\t\t{\n\t\t\tcase 1: ++z[x];M(r[x]);if(f[x]) {O(f[x], 1);}break;\n\t\t\tcase 2: scanf(\"%d\", &v);O(x, -v);break;\n\t\t\tcase 3: printf(\"%d\\n\", (r[x] ? r[x]->w : 0) ^ V(f[x]));break;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1683185347,
        "uid": 388651,
        "name": "5k_sync_closer",
        "ccfLevel": 7,
        "title": "P6018 [Ynoi2010] Fusion tree"
    },
    {
        "content": "\u603b\u7ed3\u4e00\u4e9b\u7ec6\u8282\u4e0a\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u8fd9\u4e00\u7c7b\u5957\u8def\u3002\n\n### \u9898\u76ee\u5927\u610f\n\n\u9898\u9762\u5f88\u7b80\u6d01\u3002\n\n### $\\text{Solution:}$\n\n\u8fd9\u662f `Trie` \u7684\u7ecf\u5178\u5957\u8def\uff0c\u5168\u5c40 $+1$ \u3002\u7c7b\u4f3c\u7684\u8fd8\u6709\u5168\u5c40\u5f02\u6216\u3002\n\n\u8003\u8651 $+1$ \u7684\u5f71\u54cd\uff0c\u5bb9\u6613\u53d1\u73b0\u662f\u628a\u4ece\u4e8c\u8fdb\u5236\u4e0b\u7b2c $0$ \u4f4d\u8fde\u7eed\u7684 $1$ \u5168\u90e8\u53d8\u6210 $0,$ \u518d\u628a\u4e0b\u4e00\u4f4d\u53d8\u6210 $1$ \u3002\n\n\u4ece\u9898\u76ee\u5f00\u59cb\u5206\u6790\uff0c\u6211\u4eec\u9700\u8981\u652f\u6301\u6c42\u5168\u5c40\u7684\u5f02\u6216\u548c\uff0c\u5e76\u4e14\u8fd8\u8981\u7ed9\u6bcf\u4e00\u4e2a\u6570\u90fd $+1$ \uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u5c31\u5fc5\u7136\u9700\u8981\u548c\u4e8c\u8fdb\u5236\u7684\u672c\u8eab\u7ed3\u6784\u6709\u5173\u7cfb\u3002\u90a3\u5c31\u53ef\u4ee5\u60f3\u5230 `Trie` \u4e86\u3002\n\n\u901a\u8fc7\u4e0a\u8ff0\u7684\u5206\u6790\u5bb9\u6613\u60f3\u5230 **\u6309\u7167\u4e8c\u8fdb\u5236\u4f4d\u4ece\u4f4e\u5230\u9ad8** \u5efa\u6811\u3002\n\n\u8003\u8651\u6bcf\u6b21\u66b4\u529b\u4fee\u6539\uff0c\u5bf9\u4e8e\u5f53\u524d\u70b9\uff0c\u6211\u4eec\u8fdb\u884c\u4e86 $+1$ \u7684\u64cd\u4f5c\uff0c**\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u7684\u7236\u4eb2\u5168\u90e8\u8fdb\u4f4d\u3002** \u90a3\u4e48\u5982\u679c\u5f53\u524d\u70b9\u4e5f\u9700\u8981 $+1$ \uff0c\u5bb9\u6613\u53d1\u73b0\u5b83\u7684\u5de6\u53f3\u5b69\u5b50\u662f\u9700\u8981 **\u8c03\u6362\u4f4d\u7f6e** \u7684\u3002\u76f4\u63a5 `swap(tr[x][0],tr[x][1])` \u5373\u53ef\u3002\n\n\u7ee7\u7eed\u9700\u8981 $+1$ \u7684\u5c31\u662f\u539f\u6765\u662f $1$ \u7684\u90e8\u5206\uff0c\u5bf9\u5e94\u73b0\u5728\u7684 `tr[x][0]` \u3002\u9012\u5f52\u4e0b\u53bb\u5373\u53ef\u3002\n\n\u6ce8\u610f\u5230\u9012\u5f52\u5230\u6700\u4e0b\u5c42\u662f\u53ef\u80fd\u9700\u8981\u65b0\u5efa\u8282\u70b9\u7684\uff0c\u611f\u89c9\u5f88\u9ebb\u70e6\u3002\u2014\u2014\u53ef\u4ee5\u5728\u5efa\u6811\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u628a\u53ef\u80fd\u51fa\u73b0\u7684\u6700\u9ad8\u4f4d\u7ed9\u5efa\u7acb\u51fa\u6765\uff0c\u8fd9\u6837\u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u5224\u65ad\u4e86\u3002\n\n\u7ee7\u7eed\u601d\u8003\uff0c\u6211\u4eec\u9700\u8981\u652f\u6301\u4e00\u4e2a\u7ef4\u62a4\u5f02\u6216\u548c\u7684\u64cd\u4f5c\u3002\u5982\u4f55\u7ef4\u62a4\uff1f\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5f02\u6216\u51fa\u6765\u6709\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\u6709\u5947\u6570\u4e2a\u6570\u51fa\u73b0\u8fc7\u8fd9\u4e2a\u6570\u4f4d\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728 `Trie` \u4e0a\u9762\u7ef4\u62a4\u5f02\u6216\u548c\u4e86\uff1a\u8bbe `sx[x]` \u8868\u793a\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6240\u6709\u6570\u5f62\u6210\u7684\u5f02\u6216\u548c\u3002\u90a3\u4e48\u53ea\u6709\u5b83\u7684\u53f3\u5b69\u5b50\uff08\u4e5f\u5c31\u662f\u4e8c\u8fdb\u5236\u4f4d $1$ \u5bf9\u5e94\u7684\u8282\u70b9\uff09\u7684 `siz` \u662f $1$ \u624d\u53ef\u4ee5\u7ee7\u7eed\u52a0\u4e0a\u8fd9\u4e00\u4f4d\u3002\u5426\u5219\u5b83\u53ea\u80fd\u7b49\u4e8e\u5b83\u5b69\u5b50\u7684\u5f02\u6216\u503c\u3002\n\n\u7ef4\u62a4 `siz` \u5c31\u5f88\u5bb9\u6613\u4e86\uff0c\u76f4\u63a5\u6bcf\u6b21\u63d2\u5165\u7684\u65f6\u5019\u8d70\u5230\u7684\u8282\u70b9\u7684 `siz[x]^=1` \u5373\u53ef\u3002\n\n\u7136\u540e\u8003\u8651\u4fee\u6539\u3002\u53d1\u73b0\u4fee\u6539\u6709\u4e24\u79cd\uff1a\u4e00\u79cd\u4fee\u6539\u540c\u67e5\u8be2\u7c7b\u4f3c\uff0c\u4e00\u79cd\u4fee\u6539\u662f\u5355\u70b9\u4fee\u6539\u3002\n\n\u5148\u8003\u8651\u5355\u70b9\u4fee\u6539\u3002\u5982\u679c\u6211\u4eec\u7ef4\u62a4 `val[x]` \u8868\u793a $x$ \u5f53\u524d\u7684\u6c34\u74f6\u6570\u76ee\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u76f4\u63a5\u51cf\u6389\u3002\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u9020\u6210\u7684\u5176\u4ed6\u5f71\u54cd\u6211\u4eec\u9700\u8981\u770b\u6211\u4eec\u5982\u4f55\u7ef4\u62a4\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\n\u5148\u641e\u6e05\u695a\uff0c\u8ddd\u79bb $=1$ \u7684\u8282\u70b9\u662f\u5305\u62ec\u7236\u4eb2\u7684\uff0c\u4f46\u662f\u663e\u7136\u5982\u679c\u4fee\u6539\u7684\u65f6\u5019\u8981\u8003\u8651\u5230\u7236\u4eb2\u5c31\u4f1a\u53d8\u5f97\u5f88\u9ebb\u70e6\u3002\n\n\u90a3\u4e0d\u59a8\u628a\u7236\u4eb2\u5355\u72ec\u8003\u8651\u3002\u8fd9\u6837\uff0c\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u5b83\u6240\u6709\u5b69\u5b50\u8282\u70b9\u7684\u503c\u7ec4\u6210\u7684 `Trie` \uff0c\u6bcf\u6b21\u67e5\u8be2\u53ea\u9700\u8981\u67e5\u8be2\u51fa\u8fd9\u4e2a\u70b9\u7684 `Trie` \u7ef4\u62a4\u7684\u7b54\u6848\u4ee5\u53ca\u5176\u7236\u4eb2\u7684\u6c34\u74f6\u6570\u76ee\uff0c\u518d\u5f02\u6216\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u90a3\u4fee\u6539\u7684\u65f6\u5019\u5c31\u4f1a\u6d89\u53ca\u5230\u5176\u7236\u4eb2\u7ef4\u62a4\u7684\u6811\uff0c\u540c\u6837\u9700\u8981\u4fee\u6539\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u503c\u539f\u6765\u7684\u503c\u7ed9\u5220\u6389\uff0c\u66f4\u65b0\u540e\u518d\u52a0\u8fdb\u53bb\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u4fee\u6539\u4e5f\u662f\u4e00\u6837\u7684\u3002\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6807\u8bb0 `tg[x]` \u8868\u793a\u5c06 $x$ \u7684\u5b50\u6811\u70b9\u90fd\u52a0\u4e86\u591a\u5c11\u3002\u800c\u5bf9\u4e8e\u7236\u4eb2\u7684\u4fee\u6539\u53ef\u4ee5\u7b49\u4ef7\u4e8e\u7b2c\u4e8c\u7c7b\u4fee\u6539\u4e00\u6837\u66b4\u529b\u4fee\u6539\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u662f $O(n\\log n)$ \u4e86\u3002\n\n### \u5b9e\u73b0\u7ec6\u8282\n\n* \u5220\u9664\u7684\u64cd\u4f5c\u4e0d\u9700\u8981\u5b9e\u73b0\u3002\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u5f02\u6216\u548c\uff0c\u5229\u7528\u5b83\u7684\u6027\u8d28\uff0c\u6bcf\u6b21\u518d\u63d2\u5165\u4e00\u4e2a\u5c31\u884c\u4e86\u3002\n\n* \u4fee\u6539\u9700\u8981\u6ce8\u610f\uff0c\u6bcf\u6b21\u4fee\u6539\u662f\u9700\u8981\u5e26\u4e0a\u5176\u7236\u4eb2\u7ed9\u5b83\u52a0\u7684\u6570\u7684\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u7236\u4eb2\u7ef4\u62a4\u7684\u7b54\u6848\u6b63\u786e\u3002\u5426\u5219\u5982\u679c\u6bcf\u6b21\u4f1a\u66f4\u65b0\u503c\u7684\u8bdd\uff0c\u7ef4\u62a4\u7684 `Trie` \u5c31\u4e71\u4e86\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef double db;\n//#define int long long\n#define fi first\n#define se second\n#define mk make_pair\n#define pb emplace_back\n#define poly vector<int>\n#define Bt(a) bitset<a>\n#define bc __builtin_popcount\n#define pc putchar\n#define ci const int&\nconst int mod = 998244353;\nconst db eps = 1e-10;\ninline int Max(ci x, ci y) {return x > y ? x : y;}\ninline int Min(ci x, ci y) {return x < y ? x : y;}\ninline db Max(db x, db y) {return x - y > eps ? x : y;}\ninline db Min(db x, db y) {return x - y < eps ? x : y;}\ninline int Add(ci x, ci y, ci M = mod) {return (x + y) % M;}\ninline int Mul(ci x, ci y, ci M = mod) {return 1ll * x * y % M;}\ninline int Dec(ci x, ci y, ci M = mod) {return (x - y + M) % M;}\ntypedef pair<int, int> pii;\ninline int Abs(int x) {return x < 0 ? -x : x;}\n//char buf[1<<21],*p1=buf,*p2=buf;\n//#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar Obuf[105000],*O=Obuf;//Siz shoule be the size of Out File\nint pst[30],ptop;\ninline void Fprint(){fwrite(Obuf,1,O-Obuf,stdout);}\ninline void Fwrite(int x){\n  if(x==0){*O++='0';if(O-Obuf>100000)Fprint(),O=Obuf;return;}\n  if(x<0)*O++='-',x=-x;ptop=0;\n  while(x)pst[++ptop]=x%10,x/=10;\n  while(ptop)*O++=pst[ptop--]+'0';\n  if(O-Obuf>100000)Fprint(),O=Obuf;\n}\ninline int read() {\n    int s = 0, w = 1;\n    char ch = getchar();\n    while (!isdigit(ch)) {if (ch == '-') w = -1;ch = getchar();}\n    while (isdigit(ch)) {s = s * 10 + ch - '0';ch = getchar();}\n    return s * w;\n}\ninline void write(int x) {\n    if (x < 0)putchar('-'), x = -x;\n    if (x > 9)write(x / 10);\n\tpc(x % 10 + '0');\n}\ninline int qpow(int x, int y) {\n    int res = 1;\n    while (y) {if (y & 1)res = Mul(res, x);x = Mul(x, x);y >>= 1;}\n    return res;\n}\ninline void cadd(int &x, int y) {x += y;}\ninline void cmul(int &x, int y) {x *= y;}\ninline void cmax(int &x, int y) {x = Max(x, y);}\ninline void cmin(int &x, int y) {x = Min(x, y);}\nconst int N = 2e6 + 10;\nconst int SN = 23;\nnamespace Refined_heart{\n\tint n,m,head[N],tot;\n\tint val[N],pa[N],ad[N];\n\tstruct E{\n\t\tint nxt,to;\n\t}e[N];\n\tinline void link(int x,int y){\n\t\te[++tot]=(E){head[x],y};\n\t\thead[x]=tot;\n\t}\n\tconst int RN = N << 3;\n\tint rt[N],node,tr[RN][2],siz[RN];\n\tint sv[RN];\n\tinline void pushup(int x,int dep){\n\t\tsv[x]=sv[tr[x][0]]^sv[tr[x][1]];\n\t\tif(siz[tr[x][1]])sv[x]|=(1LL<<(dep+1));\n\t}\n\tvoid insert(int &x,int v,int dep){\n\t\tint D=dep+1;\n\t\tif(!x)x=++node;\n\t\tsiz[x]^=1;\n\t\tif(dep==SN)return;\n\t\tint nx=v>>D&1;\n\t\tinsert(tr[x][nx],v,dep+1);\n\t\tpushup(x,dep);\n\t}\n\tvoid dfs(int x,int fa){\n\t\tpa[x]=fa;\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint j=e[i].to;\n\t\t\tif(j==fa)continue;\n\t\t\tdfs(j,x);\n\t\t\tinsert(rt[x],val[j],-1);\n\t\t}\n\t}\n\tvoid changeroot(int x,int dep){\n\t\tswap(tr[x][0],tr[x][1]);\n\t\tif(tr[x][0]){changeroot(tr[x][0],dep+1);}\n\t\tpushup(x,dep);\n\t}\n\tint queryroot(int x){return sv[x];}\n\tvoid change(int pos){\n\t\tif(pa[pos]){\n\t\t\tint vl=(pa[pa[pos]]?ad[pa[pa[pos]]]:0);\n\t\t\tif(pa[pa[pos]]){insert(rt[pa[pa[pos]]],val[pa[pos]]+vl,-1);}\n\t\t\tval[pa[pos]]++;\n\t\t\tif(pa[pa[pos]]){insert(rt[pa[pa[pos]]],val[pa[pos]]+vl,-1);}\n\t\t}\n\t\tad[pos]++;\n\t\tchangeroot(rt[pos],-1);\n\t}\n\tvoid query(int pos){\n\t\tint vl=0;\n\t\tif(pa[pos]&&pa[pa[pos]])vl=ad[pa[pa[pos]]];\n\t\tint ans=queryroot(rt[pos]);\n\t\tif(pa[pos])ans^=(val[pa[pos]]+vl);\n\t\twrite(ans);pc('\\n');\n\t}\n\tvoid solve(){\n\t\tn=read();m=read();\n\t\tfor(int i=1;i<n;++i){\n\t\t\tint u=read(),v=read();\n\t\t\tlink(u,v);link(v,u);\n\t\t}\n\t\tfor(int i=1;i<=n;++i)val[i]=read();\n\t\tdfs(1,0);\n\t\tfor(int i=1;i<=m;++i){\n\t\t\tint opt=read();\n\t\t\tif(opt==1||opt==3){\n\t\t\t\tint x=read();\n\t\t\t\tif(opt==1)change(x);\n\t\t\t\telse query(x);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint x=read(),v=read();\n\t\t\t\tint vl=(!pa[x]?0:ad[pa[x]]);\n\t\t\t\tif(pa[x])insert(rt[pa[x]],val[x]+vl,-1);\n\t\t\t\tval[x]-=v;\n\t\t\t\tif(pa[x])insert(rt[pa[x]],val[x]+vl,-1);\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main(){\n// \tfreopen(\"in.txt\",\"r\",stdin);\n\tRefined_heart::solve();\n\treturn 0;\n}\n\n\n```",
        "postTime": 1646378303,
        "uid": 128591,
        "name": "Refined_heart",
        "ccfLevel": 9,
        "title": "[Ynoi2010] Fusion tree \u9898\u89e3"
    },
    {
        "content": "\u5199\u4e00\u7bc7\u9898\u89e3\u6765\u7eaa\u5ff5\u6211\u81ea\u5df1 ac \u7684\u7b2c\u4e00\u9053 Ynoi \u7684\u9898\u76ee\u3002\n## \u9898\u76ee\u5206\u6790\n\u5bf9\u4e8e\u8fd9\u4e00\u7c7b\u6d89\u53ca\u4e0e\u4e00\u4e2a\u70b9\u76f8\u90bb\u7684\u6240\u6709\u70b9\u7684\u6811\u4e0a\u95ee\u9898\uff0c\u6709\u4e00\u4e2a\u5e38\u7528\u7684 trick \u662f\u5c06\u7236\u4eb2\u7ed3\u70b9\u5355\u72ec\u5904\u7406\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u67e5\u8be2\u5f02\u6216\u548c\u7684\u65f6\u5019\u5c06\u5b50\u7ed3\u70b9\u7684\u5f02\u6216\u548c\u67e5\u51fa\u6765\u540e\u518d\u5f02\u6216\u4e0a\u7236\u4eb2\u7ed3\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7684\u95ee\u9898\u53d8\u6210\u4e86\uff1a\u5982\u4f55\u7ef4\u62a4\u5b50\u7ed3\u70b9\u7684\u5f02\u6216\u548c\uff1f\u6211\u4eec\u6765\u770b\u9898\u76ee\u9700\u8981\u652f\u6301\u7684\u4e24\u79cd\u4fee\u6539\u64cd\u4f5c\uff1a\n \n 1.\u5c06\u4e0e\u4e00\u4e2a\u70b9\u76f8\u90bb\u7684\u6240\u6709\u70b9\u90fd\u52a0 $1$\u3002\n \n 2.\u5c06\u4e00\u4e2a\u70b9\u51cf\u53bb\u4e00\u4e2a\u503c\u3002\n \n~~\u5f88\u663e\u7136~~\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u770b\u4e0a\u53bb\u66f4\u52a0\u56f0\u96be\u4e00\u4e9b\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u628a\u4e00\u4e2a\u6570\u52a0 $1$ \u7684\u65f6\u5019\uff0c\u5982\u679c\u628a\u8fd9\u4e2a\u6570\u770b\u6210\u4e8c\u8fdb\u5236\uff0c\u90a3\u4e48\u5b83\u6539\u53d8\u7684\u4ec5\u4ec5\u662f\u5b83\u6700\u540e\u4e00\u4e2a $0$ \u7684\u53f3\u8fb9\u90e8\u5206\uff08\u5305\u62ec\u8fd9\u4e2a $0$\uff09\u3002\u5b9e\u9645\u4e0a\u5bf9\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u52a0 $1$\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u6570\u7684\u6700\u540e\u4e00\u4e2a $0$ \u4ee5\u53ca\u5b83\u7684\u53f3\u8fb9\u90e8\u5206\u5168\u90e8\u53d6\u53cd\u3002\n\n\u5f53\u5f88\u591a\u4e2a\u6570\u540c\u65f6\u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u60f3\u5230\u53ef\u4ee5\u7528 0-1trie \u6811\u6765\u7ef4\u62a4\u3002\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u5206\u522b\u5efa\u4e00\u4e2a trie \u6811\uff08\u7ef4\u62a4\u8fd9\u4e2a\u7ed3\u70b9\u7684\u6240\u6709\u5b50\u7ed3\u70b9\uff0c\u6ce8\u610f\u6bcf\u4e2a\u6570\u662f\u5012\u5e8f\u63d2\u5165\uff09\uff0c\u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u5de6\u7ed3\u70b9\u5bf9\u5e94 $0$\uff0c\u53f3\u7ed3\u70b9\u5bf9\u5e94 $1$ \u7684\u8bdd\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u65f6\u5019\u4ece\u5f53\u524d\u7ed3\u70b9\u8bbf\u95ee\u53f3\u513f\u5b50\uff08\u5f53\u7136\u662f\u4ea4\u6362\u524d\u7684\u53f3\u513f\u5b50\uff09\uff0c\u6bcf\u5230\u4e00\u4e2a\u7ed3\u70b9\u5c31\u628a\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u7ed3\u70b9\u4ea4\u6362\uff0c\u76f4\u5230\u5f53\u524d\u7ed3\u70b9\u6ca1\u6709\u53f3\u513f\u5b50\u4e3a\u6b62\u7ed3\u675f\uff0c\u6b64\u65f6 trie \u6811\u91cc\u5c31\u5df2\u7ecf\u5b8c\u6210\u4e86\u6bcf\u4e2a\u6570\u52a0 $1$ \u7684\u4efb\u52a1\uff08\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\uff09\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5728\u5b8c\u6210\u4e0a\u8ff0\u64cd\u4f5c\u7684\u540c\u65f6\u7ef4\u62a4\u5f02\u6216\u548c\u3002\u5f53\u6211\u4eec\u4ea4\u6362\u4e00\u6b21\u5de6\u53f3\u513f\u5b50\u7ed3\u70b9\u65f6\uff0c\u5b9e\u9645\u4e0a\u53ea\u5bf9\u5f02\u6216\u548c\u7684\u67d0\u4e00\u4f4d\u6709\u5f71\u54cd\u3002\u5982\u679c\u8fd9\u6b21\u53d6\u53cd\u7684\u6570\u7684\u6570\u91cf\u662f\u5947\u6570\uff0c\u90a3\u4e48\u5f02\u6216\u548c\u7684\u8fd9\u4e00\u4f4d\u4e5f\u53d6\u53cd\uff0c\u5982\u679c\u662f\u5076\u6570\uff0c\u90a3\u5c31\u4e0d\u4f1a\u6709\u5f71\u54cd\u3002\u6240\u4ee5\u6211\u4eec\u5728 trie \u6811\u4e0a\u8bb0\u5f55\u7ecf\u8fc7\u67d0\u4e00\u4e2a\u70b9\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5f53\u6211\u4eec\u4ea4\u6362\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u65f6\uff0c\u6539\u53d8\u7684\u6570\u7684\u4e2a\u6570\u5c31\u662f\u7ecf\u8fc7\u8fd9\u4e2a\u7ed3\u70b9\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u5230\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u89e3\u51b3\u4e86\u5b50\u7ed3\u70b9\u7684\u5f02\u6216\u548c\u7684\u95ee\u9898\u4e86\uff0c\u4f46\u662f\u522b\u5fd8\u4e86\uff0c\u6211\u4eec\u8fd8\u8981\u7ef4\u62a4\u7236\u4eb2\u7ed3\u70b9\u3002\u6211\u4eec\u4e0d\u80fd\u628a\u6bcf\u4e00\u4e2a\u76f8\u90bb\u7684\u7ed3\u70b9\u7684\u503c\u4e00\u4e2a\u4e00\u4e2a\u52a0 $1$\uff0c\u90a3\u6837\u663e\u7136\u592a\u6162\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e2a\u7ed3\u70b9\u4e0a\u6253\u6807\u8bb0\uff0c\u5f53\u6211\u4eec\u67e5\u8be2\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u7684\u65f6\u5019\uff0c\u987a\u4fbf\u67e5\u8be2\u4e00\u4e0b\u5b83\u7684\u7236\u7ed3\u70b9\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u662f\u5426\u6709\u6807\u8bb0\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee5\u4e0a\u5c31\u662f\u672c\u9898\u7684\u5927\u81f4\u601d\u8def\u4e86\u3002\u5982\u679c\u60a8\u7406\u89e3\u4e86\u7b2c\u4e00\u4e2a\u64cd\u4f5c\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u4e5f\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002\u5982\u679c\u60a8\u6ca1\u6709\u770b\u61c2\u5173\u4e8e trie \u6811\u7684\u64cd\u4f5c\uff0c\u90a3\u4e48\u5f3a\u70c8\u5efa\u8bae\u60a8\u753b\u4e00\u5f20 trie \u6811\u624b\u73a9\u4e00\u4e0b\uff0c\u7136\u540e\u518d\u6765\u770b\u672c\u9898\u89e3\u3002\n\n\u6700\u540e\u4e00\u4e2a\u5c0f\u63d0\u793a\uff1a\u63d2\u5165 trie \u6811\u7684\u65f6\u5019\u8bb0\u5f97\u628a\u6bcf\u4e00\u4e2a\u6570\u90fd\u8865\u6210\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u5f88\u591a\u591a\u4f59\u7684\u64cd\u4f5c\u3002\n\n## \u4ee3\u7801\n```cpp\n//\u6d1b\u8c37P6018 \n\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=500050,MAXS=10000050;\nint son[MAXS][2],cnt[MAXS],xsum[MAXN],tot;\nint tcnt[MAXN],a[MAXN],fa[MAXN];\nint N,M;\nint h[MAXN],to[MAXN<<1],nxt[MAXN<<1],tot1;\n\nvoid insert(int rt,int x){\n\t++cnt[rt];xsum[rt]^=x;\n\tfor(int i=0;i<=19;++i){\n\t\tif(!son[rt][1&(x>>i)]) son[rt][1&(x>>i)]=++tot;\n\t\trt=son[rt][1&(x>>i)];++cnt[rt]; \n\t}\n}\nvoid del(int rt,int x){\n\t--cnt[rt];xsum[rt]^=x;\n\tfor(int i=0;i<=19;++i){\n\t\trt=son[rt][1&(x>>i)];--cnt[rt];\n\t}\n}\nbool find(int rt,int x){\n\tfor(int i=0;i<=19;++i){\n\t\tif(!cnt[son[rt][1&(x>>i)]]) return 0;\n\t\trt=son[rt][1&(x>>i)];\n\t}\n\treturn 1;\n}\nvoid reverse(int rt){\n\tint i=0,t=rt;\n\tfor(int j=0;j<=19;++j){\n\t\tswap(son[t][0],son[t][1]);\n\t\txsum[rt]^=(cnt[t]%2)?(1<<i):0;\n\t\tt=son[t][0];\n\t\tif(!cnt[t]) return;\n\t\t++i;\n\t}\n}\n\nvoid add(int u,int v){\n\tto[++tot1]=v;nxt[tot1]=h[u];h[u]=tot1;\n}\nvoid dfs(int x,int f){\n\tfa[x]=f;\n\tfor(int i=h[x];i;i=nxt[i]){\n\t\tif(to[i]==f) continue;\n\t\tdfs(to[i],x);\n\t\tinsert(x,a[to[i]]); \n\t}\n}\nint getval(int x){\n\tif(!fa[x]) return a[x];\n\treturn a[x]+tcnt[fa[x]];\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&N,&M);\n\ttot=N;\n\tfor(int i=1;i<N;++i){\n\t\tint u,v;scanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);add(v,u);\n\t}\n\tfor(int i=1;i<=N;++i) scanf(\"%d\",&a[i]);\n\tdfs(1,0);\n\tfor(int i=1;i<=M;++i){\n\t\tint opt;scanf(\"%d\",&opt);\n\t\tif(opt==1){\n\t\t\tint x;scanf(\"%d\",&x);\n\t\t\t++tcnt[x];\n\t\t\tif(fa[x]){\n\t\t\t\tint t=fa[x];\n\t\t\t\tif(fa[t]){\n\t\t\t\t\tdel(fa[t],a[t]+tcnt[fa[t]]);++a[t];insert(fa[t],a[t]+tcnt[fa[t]]);\n\t\t\t\t}\n\t\t\t\telse ++a[t];\n\t\t\t}\n\t\t\treverse(x);\n\t\t}\n\t\telse if(opt==2){\n\t\t\tint x,v;scanf(\"%d%d\",&x,&v);\n\t\t\tif(fa[x]){\n\t\t\t\tdel(fa[x],getval(x));a[x]-=v;insert(fa[x],getval(x));\n\t\t\t}\n\t\t\telse a[x]-=v;\n\t\t}\n\t\telse{\n\t\t\tint x;scanf(\"%d\",&x);\n\t\t\tint ans=0;if(fa[x]) ans^=getval(fa[x]);\n\t\t\tans^=xsum[x];printf(\"%d\\n\",ans); \n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1633435475,
        "uid": 356499,
        "name": "CPPfive",
        "ccfLevel": 7,
        "title": "[Ynoi2010] Fusion tree \u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u4f60\u4e00\u68f5 $n$ \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6709\u6743\u503c\u3002$m$ \u6b21\u64cd\u4f5c\u3002\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\u3002\n\n\u5c06\u6811\u4e0a\u4e0e\u4e00\u4e2a\u8282\u70b9 $x$ \u8ddd\u79bb\u4e3a $1$ \u7684\u8282\u70b9\u4e0a\u7684\u6743\u503c $+1$\u3002\u8fd9\u91cc\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u4ece\u4e00\u70b9\u51fa\u53d1\u5230\u53e6\u5916\u4e00\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u8fb9\u7684\u6761\u6570\u3002\n\u5728\u4e00\u4e2a\u8282\u70b9 $x$ \u4e0a\u7684\u6743\u503c $-v$\u3002\n\u8be2\u95ee\u6811\u4e0a\u4e0e\u4e00\u4e2a\u8282\u70b9 $x$ \u8ddd\u79bb\u4e3a $1$ \u7684\u6240\u6709\u8282\u70b9\u4e0a\u7684\u6743\u503c\u7684\u5f02\u6216\u548c\u3002\u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff0c\u6ee1\u8db3 $1\\le n \\le 5\\times 10^5$\uff0c$1\\le m \\le 5\\times 10^5$\uff0c$0\\le a_i \\le 10^5$\uff0c$1\\le x \\le n$\uff0c$opt\\in\\{1,2,3\\}$\u3002\u4fdd\u8bc1\u4efb\u610f\u65f6\u523b\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u975e\u8d1f\u3002\n## \u9898\u89e3\n\u6bcf\u4e2a\u7ed3\u70b9\u5efa\u7acb\u4e00\u68f5 trie \u7ef4\u62a4\u5176\u513f\u5b50\u7684\u6743\u503c\uff0ctrie \u5e94\u8be5\u652f\u6301\u5168\u5c40\u52a0\u4e00\u3002\u53ef\u4ee5\u4f7f\u7528\u5728\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u4e0a\u8bbe\u7f6e\u61d2\u6807\u8bb0\u6765\u6807\u8bb0\u513f\u5b50\u7684\u6743\u503c\u7684\u589e\u52a0\u91cf\u3002\uff08\u522b\u770b\u8fd9\u662f\u7d2b\u9898\uff0c\u5176\u5b9e\u8fd8\u597d\uff09\n## \u7b80\u5355\u8d34\u4e2a\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>//\u4e07\u80fd\u5934\nusing namespace std;\nconst int _ = 5e5 + 10;\n\nnamespace trie {\nconst int _n = _ * 25;\nint rt[_];\nint ch[_n][2];\nint w[_n];  //`w[o]` \u6307\u8282\u70b9 `o` \u5230\u5176\u7236\u4eb2\u8282\u70b9\u8fd9\u6761\u8fb9\u4e0a\u6570\u503c\u7684\u6570\u91cf\uff08\u6743\u503c\uff09\u3002\nint xorv[_n];\nint tot = 0;\n\nvoid maintain(int o) {  // \u7ef4\u62a4w\u6570\u7ec4\u548cxorv\uff08\u6743\u503c\u7684\u5f02\u6216\uff09\u6570\u7ec4\n  w[o] = xorv[o] = 0;\n  if (ch[o][0]) {\n    w[o] += w[ch[o][0]];\n    xorv[o] ^= xorv[ch[o][0]] << 1;\n  }\n  if (ch[o][1]) {\n    w[o] += w[ch[o][1]];\n    xorv[o] ^= (xorv[ch[o][1]] << 1) | (w[ch[o][1]] & 1);\n  }\n}\n\nint mknode() {  // \u521b\u9020\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\n  ++tot;\n  ch[tot][0] = ch[tot][1] = 0;\n  w[tot] = 0;\n  return tot;\n}\n\nvoid insert(int &o, int x, int dp) {  // x\u662f\u6743\u91cd\uff0cdp\u662f\u6df1\u5ea6\n  if (!o) o = mknode();\n  if (dp > 20) return (void)(w[o]++);\n  insert(ch[o][x & 1], x >> 1, dp + 1);\n  maintain(o);\n}\n\nvoid erase(int o, int x, int dp) {\n  if (dp > 20) return (void)(w[o]--);\n  erase(ch[o][x & 1], x >> 1, dp + 1);\n  maintain(o);\n}\n\nvoid addall(int o) {  // \u5bf9\u6240\u6709\u8282\u70b9+1\u5373\u5c06\u6240\u6709\u8282\u70b9\u7684ch[o][1]\u548cch[o][0]\u4ea4\u6362\n  swap(ch[o][1], ch[o][0]);\n  if (ch[o][0]) addall(ch[o][0]);\n  maintain(o);\n}\n}  // namespace trie\n\nint head[_];\n\nstruct edges {\n  int node;\n  int nxt;\n} edge[_ << 1];\n\nint tot = 0;\n\nvoid add(int u, int v) {\n  edge[++tot].nxt = head[u];\n  head[u] = tot;\n  edge[tot].node = v;\n}\n\nint n, m;\nint rt;\nint lztar[_];\nint fa[_];\n\nvoid dfs0(int o, int f) {  // \u5f97\u5230fa\u6570\u7ec4\n  fa[o] = f;\n  for (int i = head[o]; i; i = edge[i].nxt) {  // \u904d\u5386\u5b50\u8282\u70b9\n    int node = edge[i].node;\n    if (node == f) continue;\n    dfs0(node, o);\n  }\n}\n\nint V[_];\n\nint get(int x) { return (fa[x] == -1 ? 0 : lztar[fa[x]]) + V[x]; }  // \u6743\u503c\u51fd\u6570\n\nint main() {\n  cin >> n >> m;\n  while(1){//\u9632\u590d\u5236\n  \tcout<<\"\u522b\u6284\";\n  }\n  for (int i = 1; i < n; i++) {\n    int u, v;\n    cin >> u >> v;\n    add(u, v);  // \u53cc\u5411\u5efa\u8fb9\n    add(rt = v, u);\n  }\n  dfs0(rt, -1);  // rt\u662f\u968f\u673a\u7684\u4e00\u4e2a\u70b9\n  for (int i = 1; i <= n; i++) {\n    cin >> V[i];\n    if (fa[i] != -1) trie::insert(trie::rt[fa[i]], V[i], 0);\n  }\n  while (m--) {\n    int opt, x;\n    cin >> opt >> x;\n    if (opt == 1) {\n      lztar[x]++;\n      if (x != rt) {\n        if (fa[fa[x]] != -1) trie::erase(trie::rt[fa[fa[x]]], get(fa[x]), 0);\n        V[fa[x]]++;\n        if (fa[fa[x]] != -1)\n          trie::insert(trie::rt[fa[fa[x]]], get(fa[x]), 0);  // \u91cd\u65b0\u63d2\u5165\n      }\n      trie::addall(trie::rt[x]);  // \u5bf9\u6240\u6709\u8282\u70b9+1\n    } else if (opt == 2) {\n      int v;\n      cin >> v;\n      if (x != rt) trie::erase(trie::rt[fa[x]], get(x), 0);\n      V[x] -= v;\n      if (x != rt) trie::insert(trie::rt[fa[x]], get(x), 0);  // \u91cd\u65b0\u63d2\u5165\n    } else {\n      int res = 0;\n      res = trie::xorv[trie::rt[x]];\n      res ^= get(fa[x]);\n      printf(\"%d\\n\", res);\n    }\n  }\n  return 0;//\u7ed3\u675f\n}\n\n```\n",
        "postTime": 1685198146,
        "uid": 897131,
        "name": "yangdezuo",
        "ccfLevel": 0,
        "title": "Fusion tree\u9898\u89e3"
    },
    {
        "content": "**update\uff1a\u4fee\u6539\u4e86\u4e00\u4e9b\u6539\u4e86\u4e00\u70b9\u5c0f\u9519\u8bef\uff0c\u5e76\u66f4\u52a0\u8be6\u7ec6\u7684\u63d0\u4f9b\u4e86\u8bf4\u660e\u3002\u611f\u8c22[\u5927\u4f6c](https://www.luogu.com.cn/user/130387)\u6307\u51fa\u4e0d\u8be6\u7ec6\u7684\u5730\u65b9**\n\n\u5bf9\u4e8e\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u8ddd\u79bb\u5176\u4e3a $1$ \u7684\u8282\u70b9\u4ed6\u7684\u513f\u5b50\u548c\u7236\u4eb2\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a trie \u6811\uff0c\u7136\u540e\u66b4\u529b\u4fee\u6539\u5176\u7236\u4eb2\u4fe1\u606f\u5373\u53ef\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u652f\u6301\u7684\u64cd\u4f5c\u5c31\u662f\uff1a\n\n- \u5220\u9664\n\n- \u63d2\u5165\n\n- \u5168\u5c40\u52a0\u4e00\n\n- \u6c42\u5f02\u6216\u548c\n\n\u672c\u9898\u89e3\u4ee3\u7801\u5199\u6cd5\u4e0e OIwiki \u4e0a\u7684\u76f8\u4f3c\uff0c\u4e3b\u8981\u7684\u662f\u89e3\u91ca\u4e00\u4e0b trie \u6811\u7ef4\u62a4\u4fe1\u606f\u65f6\u81ea\u5df1\u7684\u4e00\u4e9b\u7406\u89e3\u3002\n\n```cpp\nint newnode(){\n\tint x=++tot;\n\tch[x][0]=ch[x][0]=0;\n\tw[x]=0;\n\treturn x;\n}\nvoid push_up(int x){\n\tw[x]=xorv[x]=0;\n  \tif(ch[x][0]){\n    \tw[x]+=w[ch[x][0]];\n    \txorv[x]^=(xorv[ch[x][0]]<<1);\n  \t}\n  \tif(ch[x][1]) {\n    \tw[x]+=w[ch[x][1]];\n    \txorv[x]^=(xorv[ch[x][1]]<<1)|(w[ch[x][1]]&1);\n  \t}\n  \t//w[x]=w[x]&1;\n}\nvoid insert(int &p,int x,int dep){\n\tif(!p) p=newnode();\n\tif(dep>20){\n\t\tw[p]++;\n\t\treturn ;\n\t}\n\tinsert(ch[p][x&1],x>>1,dep+1);\n\tpush_up(p);\n}\nvoid erase(int &p,int x,int dep){\n\tif(dep>20){\n\t\tw[p]--;\n\t\treturn ;\n\t}\n\terase(ch[p][x&1],x>>1,dep+1);\n\tpush_up(p);\n}\nvoid add(int p){\n\tswap(ch[p][1],ch[p][0]);\n  \tif(ch[p][0]) add(ch[p][0]);\n  \tpush_up(p);\n}\n```\n\n\u4ee5\u4e0a\u662f trie \u6811\u7684\u4ee3\u7801\u3002\u9996\u5148\u4f60\u8981\u660e\u767d trie \u6811\u4e0a\u7684\u7aef\u70b9\u662f\u4e0d\u5b58\u50a8\u4fe1\u606f\u7684\uff0c\u5b9e\u9645\u4e0a\u5b58\u50a8\u4fe1\u606f\u7684\u662f\u8fb9\u3002\u6211\u4eec\u8fd9\u91cc\u4ece**\u4f4e\u4f4d\u5230\u9ad8\u4f4d**\u8fdb\u884c\u5b58\u50a8\u6570\u5b57\uff0c\u5373\u4e0b\u56fe\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0xgrianr.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\n\u8fd9\u6837\u5b58\u50a8\u5c31\u4ee5\u4e3a\u7740\u6211\u4eec\u5728\u8ba1\u7b97\u5f53\u524d\u7684\u8282\u70b9 $x$ \u7684\u5b50\u6811\u7684\u5f02\u6216\u548c\u65f6\uff0c\u5b50\u8282\u70b9\u7684 $y$ \u7684\u5f02\u6216\u548c\u9700\u8981\u524d\u79fb\u4e00\u4f4d\u3002\u8fd9\u91cc\u5f02\u6216\u548c\u662f\u7528 $xorv_x$ \u6765\u8868\u793a\u7684\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u88ab\u7ecf\u5386\u7684\u6b21\u6570\u662f\u5947\u6570\u6b21\u4e14\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u4e3a $1$ \u90a3\u4e48\u8fd9\u4e00\u4f4d\u7684\u5f02\u6216\u548c\u624d\u4f1a\u662f $1$\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u77e5\u9053\u6bcf\u4e00\u6761\u8fb9\u88ab\u7ecf\u5386\u4e86\u591a\u5c11\u6b21\u3002\u8bb0 $w_x$ \u8868\u793a $x$ \u5230\u5176\u7236\u4eb2\u7684\u8fb9\u7ecf\u8fc7\u4e86\u591a\u5c11\u6b21\u3002\n\n\u663e\u7136\u6211\u4eec\u6bcf\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u5176\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684 $w_x$ \u90fd\u8981\u52a0\u4e00\uff0c\u5982\u4f55\u5b8c\u6210\u8fd9\u4e2a\u64cd\u4f5c\u5462\uff0c\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5957\u7528\u4e00\u4e2a\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u76f4\u63a5\u5c06\u6700\u5e95\u7aef\u7684 $w_x$ \u52a0\u4e00\uff0c\u7136\u540e\u56de\u6eaf\u65f6\u52a0\u4e0a\u5373\u53ef\u3002\n\n\u5269\u4e0b\u7684\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\u3002\n\n\u6574\u4f53\u52a0 $1$ \u64cd\u4f5c\u5219\u662f\u6211\u4eec\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u5f00\u59cb\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684 0\uff0c\u628a\u5b83\u53d8\u6210 1\uff0c\u7136\u540e\u8fd9\u4e2a\u4f4d\u7f6e\u540e\u9762\u7684 1 \u90fd\u53d8\u6210 0 \u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define N 500005\nusing namespace std;\nint ch[25*N][2],w[25*N],tot,xorv[25*N],root[N],lazy[N],v[N];\nint n,m;\nint newnode(){\n\tint x=++tot;\n\tch[x][0]=ch[x][0]=0;\n\tw[x]=0;\n\treturn x;\n}\nvoid push_up(int x){\n\tw[x]=xorv[x]=0;\n  \tif(ch[x][0]){\n    \tw[x]+=w[ch[x][0]];\n    \txorv[x]^=(xorv[ch[x][0]]<<1);\n  \t}\n  \tif(ch[x][1]) {\n    \tw[x]+=w[ch[x][1]];\n    \txorv[x]^=(xorv[ch[x][1]]<<1)|(w[ch[x][1]]&1);\n  \t}\n}\nvoid insert(int &p,int x,int dep){\n\tif(!p) p=newnode();\n\tif(dep>20){\n\t\tw[p]++;\n\t\treturn ;\n\t}\n\tinsert(ch[p][x&1],x>>1,dep+1);\n\tpush_up(p);\n}\nvoid erase(int &p,int x,int dep){\n\tif(dep>20){\n\t\tw[p]--;\n\t\treturn ;\n\t}\n\terase(ch[p][x&1],x>>1,dep+1);\n\tpush_up(p);\n}\nvoid add(int p){\n\tswap(ch[p][1],ch[p][0]);\n  \tif(ch[p][0]) add(ch[p][0]);\n  \tpush_up(p);\n}\nstruct edge{\n\tint v,next;\n}e[N*2];\nint head[N],idx;\nvoid addedge(int u,int v){\n\te[++idx].v=v;\n\te[idx].next=head[u];\n\thead[u]=idx;\n}\nint fa[N];\nvoid dfs(int x,int f){\n\tfa[x]=f;\n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tif(y==f) continue;\n\t\tdfs(y,x);\n\t}\n}\nint get(int x){\n\treturn fa[x]==0?v[x]:lazy[fa[x]]+v[x];\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\taddedge(a,b);\n\t\taddedge(b,a);\n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&v[i]);\n\t\tif(fa[i]) insert(root[fa[i]],v[i],0);\n\t}\n\twhile(m--){\n\t\tint op,x,y;\n\t\tscanf(\"%d%d\",&op,&x);\n\t\tif(op==1){\n\t\t\tlazy[x]++;\n\t\t\tif(fa[x]){\n\t\t\t\tif(fa[fa[x]]) erase(root[fa[fa[x]]],get(fa[x]),0);\n\t\t\t\tv[fa[x]]++;\n\t\t\t\tif(fa[fa[x]]) insert(root[fa[fa[x]]],get(fa[x]),0);\n\t\t\t}\n\t\t\tadd(root[x]);\n\t\t}\n\t\tif(op==2){\n\t\t\tscanf(\"%d\",&y);\n\t\t\tif(fa[x]) erase(root[fa[x]],get(x),0);\n\t\t\tv[x]-=y;\n\t\t\tif(fa[x]) insert(root[fa[x]],get(x),0);\n\t\t}\n\t\tif(op==3){\n\t\t\tint res=0;\n\t\t\tres^=xorv[root[x]];\n\t\t\tint ans=get(fa[x]);\n\t\t\tres^=ans;\n\t\t\tprintf(\"%d\\n\",res);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1614658096,
        "uid": 128870,
        "name": "chen_qian",
        "ccfLevel": 7,
        "title": "P6018 [Ynoi2010] Fusion tree"
    }
]