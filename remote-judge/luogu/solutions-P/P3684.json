[
    {
        "content": "[~~\u83b7\u5f97\u66f4\u5dee\u7684\u9605\u8bfb\u4f53\u9a8c~~](https://ignotusjee.github.io/2020/09/13/SolutionOfHangarHurdles/)\n\n\u5e76\u67e5\u96c6\u5199\u6210`Merge(e[i].v,e[i].v)`\u8c03\u4e86\u4e09\u5929\u5965\u91cc\u7ed9\u90fd\u7ed9\u6211\u8c03\u51fa\u6765\u4e86\u3002~~\u4e0d\u8fc7\u8fd9\u90fd70\u5206\u53ef\u89c1\u6570\u636e\u6709\u591a\u6c34~~\n\n# \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a$n\\times n$\u7684\u7f51\u683c\u56fe\uff0c\u5176\u4e2d\u90e8\u5206\u683c\u70b9\u6709\u969c\u788d\u7269\u4f7f\u5f97\u7bb1\u5b50\u4e0d\u80fd\u7f6e\u4e8e\u5176\u4e0a\u3002\u89c4\u5b9a\u7bb1\u5b50\u662f\u4e00\u4e2a\u5947\u6570\u8fb9\u957f\u7684\u6b63\u65b9\u5f62\uff0c\u5176\u5750\u6807\u4e3a\u5176\u4e2d\u5fc3\u683c\u70b9\u7684\u5750\u6807\u3002\u7bb1\u5b50\u53ea\u80fd\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52a8\uff0c\u6bcf\u6b21\u8be2\u95ee\u4ece\u4e00\u4e2a\u683c\u70b9\u80fd\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u683c\u70b9\u7684\u6700\u5927\u7bb1\u5b50\u3002\n\n# \u5206\u6790\n\n\u6b64\u9898\u770b\u4f3c\u7b80\u5355\uff0c\u5b9e\u5219\u6076\u5fc3\u7684\u4e00\u5339\u3002\n\n* \u6211\u4eec\u5148\u8003\u8651\u5c06\u95ee\u9898\u8f6c\u5316\u3002\u5982\u679c\u6c42\u51fa\u6bcf\u4e2a\u683c\u70b9\u80fd\u653e\u7f6e\u7684\u6700\u5927\u7bb1\u5b50\uff0c\u8bbe\u4e3a\u683c\u70b9\u6743\uff0c\u90a3\u4e48\u6bcf\u6b21\u8be2\u95ee\u5c31\u53d8\u6210\u4e86\u6c42\u51fa\u4e24\u70b9\u8def\u5f84\u4e0a\u6700\u5c0f\u70b9\u6743\u6700\u5927\u7684\u8def\u5f84\u3002\u6bcf\u6b21bfs\uff0c\u590d\u6742\u5ea6\u65e0\u6cd5\u627f\u53d7\u3002\n* \u63a5\u7740\u53d1\u73b0\u8054\u901a\u7684\u70b9\u6743\u76f8\u540c\u7684\u683c\u70b9\u53ef\u4ee5\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e2a\u8054\u901a\u5757\u5185\u79fb\u52a8\u662f\u4e0d\u4f1a\u6539\u53d8\u7ecf\u8fc7\u7684\u6700\u5c0f\u70b9\u6743\u7684\u3002\n* \u4e8e\u662f\u5728\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u8f6c\u5316\u4e3a\u4e86\u5728\u76f8\u90bb\u7684\u8054\u901a\u5757\u5185\u79fb\u52a8\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u76f8\u90bb\u7684\u8054\u901a\u5757\u5185\u8fde\u8fb9\uff0c\u5c06\u8fb9\u6743\u8bbe\u4e3a\u4e24\u70b9\u70b9\u6743\u7684\u6700\u5c0f\u503c\uff0c\u4e8e\u662f\u53ea\u8981\u6c42\u51fa\u6700\u5927\u74f6\u9888\u8def\u5c31\u53ef\u4ee5\u4e86\u3002\n* \u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u5927\u74f6\u9888\u8def\u53ef\u4ee5\u7528\u5982\u4e0b\u7b97\u6cd5\u6c42\uff1a\u5c06\u8fb9\u964d\u5e8f\u6392\u5e8f\uff0c\u4f9d\u6b21\u52a0\u5165\u56fe\u4e2d\uff0c\u4e24\u70b9\u7b2c\u4e00\u6b21\u8054\u901a\u65f6\u5176\u8def\u5f84\u5373\u4e3a\u6700\u5927\u74f6\u9888\u8def\u3002\u6b63\u786e\u6027\u663e\u7136\u3002\n* \u53d1\u73b0\u8fd9\u5c31\u662fKruskal\u6c42\u6700\u5927\u751f\u6210\u6811\u7684\u8fc7\u7a0b\uff0c\u4e8e\u662f\u53ea\u8981\u5728\u751f\u6210\u6811\u4e0a\u67e5\u8be2\u8def\u5f84\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7ecf\u8fc7\u4ee5\u4e0a\u8f6c\u5316\uff0c\u6b64\u9898\u89e3\u51b3\uff08\u6307\u53e3\u5934\uff09\u3002\n\n# \u5b9e\u73b0\n\n\u5b9e\u73b0\u624d\u662f\u8fd9\u9053\u9898\u7684\u91cd\u5934\u620f\u3002\n\n## part1 \u6c42\u51faMaxSize\n\n* \u9996\u5148\u8bbe\u56fe\u4e2d\u969c\u788d\u4e3a1\uff0c\u5176\u4f59\u4e3a0\uff0c\u5bf9\u539f\u56fe\u8fdb\u884c\u524d\u7f00\u548c\uff0c\u4ee5\u5feb\u901f\u6c42\u51fa\u76ee\u6807\u77e9\u9635\u4e2d\u6709\u6ca1\u6709\u969c\u788d\u7269\u3002\n\n* \u5bf9\u6bcf\u4e2a\u683c\u70b9\u8fdb\u884c\u4e8c\u5206\uff0c\u5f97\u5230\u6bcf\u4e2a\u683c\u70b9\u80fd\u653e\u7f6e\u7684\u6700\u5927\u7bb1\u5b50\u8bbe\u4e3aMaxSize\u3002\u5176\u4e2d\u56e0\u4e3a\u8fb9\u957f\u53ea\u80fd\u4e3a\u5947\u6570\uff0c\u4e8c\u5206\u65f6\u662f\u5bf9\u4e2d\u5fc3\u70b9\u5230\u8fb9\u754c\u7684\u8ddd\u79bb\u8fdb\u884c\u4e8c\u5206\u3002\n\n* \u590d\u6742\u5ea6$O(n^2logn)$\n\n  \u4ee3\u7801\uff1a\n\n  ```cpp\n  //\u7b2c\u4e00\u90e8\u5206\uff1a\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u6700\u5927\u77e9\u5f62\n  namespace DealMatrix {\n  \tint sum[maxn][maxn];//\u524d\u7f00\u548c\uff0c\u969c\u788d\u4e3a1\n  \tint maxsize[maxn][maxn];\n  \n  \tinline char check(const int &i,const int &j,const int &s) {\n  \t\tif(i-s<1||j-s<1||i+s>n||j+s>n) return false;//\u5927\u4e86\n  \t\tif(sum[i+s][j+s]-sum[i-s-1][j+s]-sum[i+s][j-s-1]+sum[i-s-1][j-s-1]) return 0x0;\n  \t\treturn 0xff;\n  \t}\n  \tinline int getsize(const int &i,const int &j) {\n  \t\tint l=0,r=n/2,mid,ans=0;\n  \t\twhile(l<=r) {\n  \t\t\tmid=(l+r)>>1;\n  \t\t\tif(!~check(i,j,mid)) ans=mid,l=mid+1;\n  \t\t\telse r=mid-1;\n  \t\t}\n  \t\treturn ans*2+1;\n  \t}\n  \tvoid main() {\n  \t\tfor(int i(1);i<=n;i++)\n  \t\t\tfor(int j(1);j<=n;j++)\n  \t\t\t\tsum[i][j]=sum[i][j-1]+sum[i-1][j]-sum[i-1][j-1]+(map[i][j]=='#');\n  \t\tfor(int i(1);i<=n;i++)\n  \t\t\tfor(int j(1);j<=n;j++) {\n  \t\t\t\tif(map[i][j]=='.')\n  \t\t\t\t\tmaxsize[i][j]=getsize(i,j);\n  \t\t\t\telse maxsize[i][j]=-1;\n  \t\t\t}\n  \t}\n  }\n  ```\n\n  ## part2 \u7f29\u70b9\u5e76\u8fde\u8fb9\n\n* \u5c06MaxSize\u76f8\u540c\u7684\u70b9\u7f29\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u4f7f\u7528bfs\u6216\u8005\u5e76\u67e5\u96c6\u3002\u6211\u8fd9\u91cc\u4f7f\u7528\u7684\u662fbfs\u3002\n* \u8fde\u8fb9\u65f6\u8bbe$u<v$\uff0c\u5148\u52a0\u5165\u8981\u6c42\u751f\u6210\u6811\u7684\u56fe\u91cc\u3002\u6ce8\u610f\u8981\u5224\u91cd\uff0c\u6211\u8fd9\u91cc\u4f7f\u7528\u7684\u662f`unordered_map`\u3002\n* \u590d\u6742\u5ea6$O(n^2)$\uff0c\u5c06`unordered_map`\u7684\u6bcf\u6b21\u64cd\u4f5c\u5f53\u6210\u5e38\u6570\u7ea7\u522b\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nnamespace BuildGraph {\n\tint belong[maxn][maxn],cnt;//\u8054\u901a\u5757\u7f16\u53f7\n\tconst int dx[]={0,1,0,-1};\n\tconst int dy[]={1,0,-1,0};\n\n\tusing DealMatrix::maxsize;\n\tchar vis[maxn][maxn];\n\tinline void Search(const int &i,const int &j,const int &col) {\n\t\tstatic std::queue< std::pair<int,int> > q;\n\t\tvis[i][j]=0xff;belong[i][j]=col;\n\t\tq.push(std::make_pair(i,j));\n\t\twhile(!q.empty()) {\n\t\t\tint x=q.front().first;\n\t\t\tint y=q.front().second;\n\t\t\tq.pop();\n\t\t\tfor(int k(0);k<4;k++) {\n\t\t\t\tint nx=x+dx[k],ny=y+dy[k];\n\t\t\t\tif(nx<1||ny<1||nx>n||ny>n||maxsize[nx][ny]!=maxsize[i][j]||!~vis[nx][ny])\n\t\t\t\t\tcontinue;\n\t\t\t\tvis[nx][ny]=0xff;\n\t\t\t\tbelong[nx][ny]=col;\n\t\t\t\tq.push(std::make_pair(nx,ny));\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid main() {\n\t\tstatic std::unordered_map< int,std::unordered_map<int,char> > s;\n\t\tfor(int i(1);i<=n;i++)\n\t\t\tfor(int j(1);j<=n;j++)\n\t\t\t\tif(~vis[i][j]&&~maxsize[i][j])\n\t\t\t\t\tSearch(i,j,++cnt);\n\t\tfor(int i(1);i<=n;i++)\n\t\t\tfor(int j(1);j<=n;j++) {\n\t\t\t\tif(!~maxsize[i][j]) continue;\n\t\t\t\tfor(int k(0);k<4;k++) {\n\t\t\t\t\tint x=i+dx[k],y=j+dy[k];\n\t\t\t\t\tint p=belong[i][j],q=belong[x][y];\n\t\t\t\t\tif(x<1||y<1||x>n||y>n||!q||p==q) continue;\n\t\t\t\t\tif(p>q) swap(p,q);\n\t\t\t\t\tif(!~s[p][q]) continue;\n\t\t\t\t\ts[p][q]=0xff;\n\t\t\t\t\tGraph_1::e[++Graph_1::m]=Graph_1::Edge(p,q,min(maxsize[i][j],maxsize[x][y]));\n\t\t\t\t}\n\t\t\t}\n\t\tN=cnt;\n\t\tGraph_1::Kruscal();\n\t}\n}\n```\n\n## part3 \u6c42\u51fa\u6700\u5927\u751f\u6210\u6811\n\n\u8fd9\u4e2a\u6ca1\u4ec0\u4e48\u8bf4\u7684\u3002\u5e76\u67e5\u96c6\u6211\u4f7f\u7528\u7684\u662f\u8def\u5f84\u538b\u7f29+\u6309\u79e9\u5408\u5e76\u7248\u672c\uff0c\u590d\u6742\u5ea6\u6700\u4f18\u3002\u590d\u6742\u5ea6$O(m\\alpha(n^2))$\uff0c\u5176\u4e2d$m$\u4e3a\u8fb9\u6570\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nnamespace Graph_1 {\n\tstruct Edge {\n\t\tint u,v,w;\n\t\tEdge(const int &u,const int &v,const int &w)\n\t\t\t:u(u),v(v),w(w) {}\n\t\tEdge() {}\n\t}e[maxm<<2];\n\tint m;char InTree[maxm<<2];\n\tstruct Compare {\n\t\tbool operator () (const Edge &a,const Edge &b) {\n\t\t\treturn a.w<b.w;\n\t\t}\n\t}cmp;\n\n\tstruct UnoinFindSet {\n\t\tint fa[maxm],rank[maxm];\n\t\tvoid Init() {\n\t\t\tfor(int i(1);i<=N;i++) fa[i]=i,rank[i]=1;\n\t\t}\n\t\tint Find(const int &x) {\n\t\t\treturn (x == fa[x]) ? x : (fa[x] = Find( fa[x] ));\n\t\t}\n\t\tinline void Merge(const int &u,const int &v) {\n\t\t\tint x(Find(u)),y(Find(v));\n\t\t\tif(x!=y) {\n\t\t\t\tif(rank[x]<rank[y]) fa[x]=y,rank[y]=max(rank[y],rank[x]+1);\n\t\t\t\telse fa[y]=x,rank[x]=max(rank[x],rank[y]+1);\n\t\t\t}\n\t\t}\n\t\tinline bool Same(const int &u,const int &v) {\n\t\t\treturn Find(u)==Find(v);\n\t\t}\n\t}U;\n\n\tvoid Kruscal() {\n\t\tstd::sort(e+1,e+1+m,cmp);\n\t\tU.Init();\n\t\tfor(int i(1);i<=m;i++) {\n\t\t\tif(U.Same(e[i].u,e[i].v)) continue;\n\t\t\tU.Merge(e[i].u,e[i].v);\n\t\t\tInTree[i]=0xff;\n\t\t}\n\t}\n}\n```\n\n## part4 \u6811\u4e0a\u5feb\u901f\u67e5\u8be2\n\n* \u8fd9\u91cc\u65b9\u6cd5\u5f88\u591a\uff0c\u53ef\u4ee5\u500d\u589e\uff0c\u6811\u5256~~\u8fd8\u6709LCT~~\u3002\u8fd9\u91cc\u91c7\u7528\u7684\u662f\u6811\u5256+ST\u8868\u3002\u590d\u6742\u5ea6\u9884\u5904\u7406$n^2logn$\uff0c\u6bcf\u6b21\u67e5\u8be2$logn$\u3002\n* \u6ce8\u610f\u6c42\u51fa\u7684\u751f\u6210\u6811\u53ef\u80fd\u662f\u68ee\u6797\u3002\n* \u53e6\u5916\uff0c\u56e0\u4e3a\u524d\u9762\u628a\u70b9\u6743\u8f6c\u5316\u4e3a\u8fb9\u6743\uff0c\u8fd9\u91cc\u53c8\u628a\u8fb9\u6743\u8f6c\u5316\u4e3a\u70b9\u6743\u5904\u7406\uff0c\u6240\u4ee5\u6811\u5256\u8be2\u95ee\u65f6\u4e0d\u80fd\u52a0\u4e0alca\u7684\u8d21\u732e\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n// \u7b2c\u4e09\u90e8\u5206\u6811\u5256\u6700\u5c0f\u503c\uff0c\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u67e5\u8be2\u74f6\u9888\u8def\u3002\u6ce8\u610f\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u68ee\u6797\nnamespace Tree {\n\tstruct Edge {\n\t\tint v,next,w;\n\t\tEdge(const int &v,const int &next,const int &w)\n\t\t\t:v(v),next(next),w(w) {}\n\t\tEdge() {}\n\t}e[maxm<<1];\n\tint head[maxm],cnt;\n\tinline void AddEdge(const int &u,const int &v,const int &w) {\n\t\te[++cnt]=Edge(v,head[u],w);\n\t\thead[u]=cnt;\n\t}\n\n\tint val[maxm];//\u8fb9\u6743\u8f6c\u5316\u4e3a\u70b9\u6743\n\tnamespace STTable {\n\t\tint f[maxm][21],Log[maxm];\n\t\tvoid Init() {\n\t\t\tmemset(f,0x3f,sizeof f);\n\t\t\tfor(int i(0),w(1);w<=N;i++,w<<=1) Log[w]=i;\n\t\t\tfor(int i(1);i<=N;i++) if(!Log[i]) Log[i]=Log[i-1];\n\t\t\tfor(int i(1);i<=N;i++)\n\t\t\t\tf[i][0]=val[i];\n\t\t\tfor(int j(1);j<21;j++)\n\t\t\t\tfor(int i(1);i<=N;i++)\n\t\t\t\t\tif(1+(1<<j)-1<=N)\n\t\t\t\t\t\tf[i][j]=min(f[i][j-1],f[i+(1<<(j-1))][j-1]);\n\t\t}\n\t\tinline int QueryMin(const int &l,const int &r) {\n\t\t\tif(l>r) return inf;\n\t\t\tint o(Log[r-l+1]);\n\t\t\treturn min(f[l][o],f[r-(1<<o)+1][o]);\n\t\t}\n\t}\n\n\tint size[maxm],fa[maxm],son[maxm],w[maxm],depth[maxm],belong[maxm],Cnt_Tree;\n\tvoid dfs1(const int &u) {\n\t\tbelong[u]=Cnt_Tree;\n\t\tsize[u]=1;depth[u]=depth[fa[u]]+1;\n\t\tfor(int i(head[u]);i;i=e[i].next) {\n\t\t\tconst int &v=e[i].v;\n\t\t\tif(v==fa[u]) continue;\n\t\t\tfa[v]=u;\n\t\t\tdfs1(v);\n\t\t\tsize[u]+=size[v];\n\t\t\tif(size[v]>size[son[u]]) son[u]=v,w[u]=e[i].w;\n\t\t}\n\t}\n\tint top[maxm],dfn[maxm],stamp;\n\tvoid dfs2(const int &u,const int &anc) {\n\t\tdfn[u]=++stamp;\n\t\ttop[u]=anc;\n\t\tif(son[u]) dfs2(son[u],anc),val[dfn[son[u]]]=w[u];\n\t\tfor(int i(head[u]);i;i=e[i].next) {\n\t\t\tconst int &v=e[i].v;\n\t\t\tif(v==fa[u]||v==son[u]) continue;\n\t\t\tdfs2(v,v);val[dfn[v]]=e[i].w;\n\t\t}\n\t}\n\n\tinline int GetMin(int u,int v) {\n\t\tint ans=inf;\n\t\twhile(top[u]!=top[v]) {\n\t\t\tif(depth[top[u]]<depth[top[v]]) swap(u,v);\n\t\t\tans=min(ans,STTable::QueryMin(dfn[top[u]],dfn[u]));\n\t\t\tu=fa[top[u]];\n\t\t}\n\t\tif(depth[u]>depth[v]) swap(u,v);\n\t\tans=min(ans,STTable::QueryMin(dfn[u]+1,dfn[v]));\n\t\treturn ans;\n\t}\n\n\tvoid main() {\n\t\tfor(int i(1);i<=Graph_1::m;i++)\n\t\t\tif(!~Graph_1::InTree[i]) {\n\t\t\t\tAddEdge(Graph_1::e[i].u,Graph_1::e[i].v,Graph_1::e[i].w);\n\t\t\t\tAddEdge(Graph_1::e[i].v,Graph_1::e[i].u,Graph_1::e[i].w);\n\t\t\t}\n\t\tfor(int i(1);i<=N;i++)\n\t\t\tif(!dfn[i]) {\n\t\t\t\tCnt_Tree++;\n\t\t\t\tdfs1(i);\n\t\t\t\tdfs2(i,i);\n\t\t\t}\n\t\tSTTable::Init();\n\t}\n}\n```\n\n## part5 \u5904\u7406\u8be2\u95ee\n\n\u6ce8\u610f\u4ebf\u70b9\u7ec6\u8282\u3002\u4f8b\u5982\uff0c\u4e0d\u5728\u4e00\u68f5\u6811\u4e0a\u4ee5\u53ca\u6240\u8be2\u95ee\u7684\u70b9\u5c31\u662f\u969c\u788d\u65f6\uff0c\u8fd4\u56de\u65e0\u89e3\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\ninline int Query(const int &x1,const int &y1,const int &x2,const int &y2) {\n\tif(map[x1][y1]=='#'||map[x2][y2]=='#') return 0;\n\tint u=BuildGraph::belong[x1][y1],v=BuildGraph::belong[x2][y2];\n\tif(u==v) return DealMatrix::maxsize[x1][y1];\n\tif(Tree::belong[u]!=Tree::belong[v]) return 0;\n\tint ans=Tree::GetMin(u,v);\n\tif(ans==inf) return 0;\n\treturn ans;\n}\n```\n\n\n\n\u603b\u590d\u6742\u5ea6$O((n^2+q)logn+m\\alpha(n^2))$\u3002\u53ef\u4ee5\u5c06$m$\u770b\u4f5c\u662f$n^2$\u7ea7\u522b\uff0c\u4f46\u5b9e\u9645\u8fdc\u8fdc\u8981\u5c0f\u3002\n\n\u81f3\u6b64\uff0c\u6b64\u9898\u7ec8\u4e8e\u505a\u5b8c\u4e86\u3002\u6211\u7684\u4ee3\u7801\u5171354\u884c\uff0c\u7b97\u5f97\u4e0a\u662f\u6211\u6253\u8fc7\u7684\u6700\u957f\u7684\u4ee3\u7801\u4e86\u3002~~\u8fd8\u4e0d\u662f\u56e0\u4e3a\u52a0\u4e86\u4e2a\u4e03\u5341\u591a\u884c\u7684\u5feb\u901f\u8bfb\u5199~~",
        "postTime": 1600001862,
        "uid": 226485,
        "name": "\u67f3\u82cf\u660e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3684 \u3010[CERC2016]\u673a\u68da\u969c\u788d Hangar Hurdles\u3011"
    },
    {
        "content": "\u5206\u6210\u4e24\u4e2a\u90e8\u5206\n\n1\u3001\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u4e3a\u4e2d\u5fc3\u53ef\u4ee5\u653e\u7684\u7269\u4f53\u5927\u5c0f\n- \u8ba1\u7b97\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u53f3\u4e0b\u89d2\u7684\u6700\u5927\u6b63\u65b9\u5f62\u5927\u5c0f \n\t- $O(N^2)$\n- \u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u4e8c\u5206\u6b63\u65b9\u5f62\u5927\u5c0f \n\t- $O(N^2log)$\n\n\n2\u3001\u8ba1\u7b97\u6bcf\u4e2a\u8be2\u95ee\n- \u6309\u7167\u70b9\u7684\u5927\u5c0f\u6392\u5e8f \n\t- $O(N^2log)$\n- \u6309\u987a\u5e8f\u7528\u5e76\u67e5\u96c6\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4e0d\u8981\u538b\u7f29\u8def\u5f84\uff0c\u8bb0\u5f55\u6bcf\u6b21\u5408\u5e76\u65f6\u7684\u70b9\u6743\n\t- $O(N^2log)$\n- \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u66b4\u529b\u627e\u5e76\u67e5\u96c6\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u8bb0\u5f55\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u70b9\u6743\n\t- $O(N^2log)$\n\n\u6545\u603b\u590d\u6742\u5ea6\u4e3a$O(N^2log)$\n\n\u4f7f\u7528\u7684\u7b97\u6cd5\uff1a\u4e8c\u5206+\u5e76\u67e5\u96c6\uff08\u542f\u53d1\u5f0f\u5408\u5e76\uff09\n\n\u5751\u70b9\uff1a\n- \u70b9\u6743\u52a0\u5165\u5e76\u67e5\u96c6\u7684\u65f6\u5019\uff0c\u5468\u56f4\u8fd8\u672a\u6d89\u53ca\u5230\u7684\u70b9\u5fc5\u987b\u5f53\u505a\u6ca1\u770b\u89c1\n- \u8be2\u95ee\u7684\u4e24\u70b9\u53ef\u80fd\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\u751a\u81f3\u662f\u6839\n\n\u4ee3\u7801\n```\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\nusing namespace std;\n#define dd c=getchar()\ninline int read(){\n\tint a=0,b=1,dd;\n\twhile(!isdigit(c)){if(c=='-')b=-b;dd;}\n\twhile(isdigit(c)){a=a*10+c-'0';dd;}\n\treturn a*b;\n}\ninline int rc(){\n\tint dd;\n\twhile(!isgraph(c))dd;\n\treturn c;\n}\ninline void print(int x){\n\tstatic int c[23];\n\tstatic int n;\n\tif(x==0){\n\t\tputchar('0');\n\t\treturn;\n\t}\n\tif(x<0){\n\t\tputchar('-');\n\t\tx=-x;\n\t}\n\tn=0;\n\twhile(x>0){\n\t\tc[n++]=x%10;\n\t\tx/=10;\n\t}\n\twhile(n-->0){\n\t\tputchar(c[n]+'0');\n\t}\n}\ninline void println(int x){\n\tprint(x);\n\tputchar('\\n');\n}\n#undef dd\nint n;\nconst int N=1003;\nconst int NN=N*N;\nbool a[N][N];\nint g[N][N];\nnamespace calcG{\n\tint f[N][N];\n\tinline bool hasCube(int x,int y,int org){\n\t\torg|=1;\n\t\tif(x+org/2>n||y+org/2>n)return 0;\n\t\treturn f[x+org/2][y+org/2]>=org;\n\t}\n\tvoid calc(){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tif(a[i][j]){\n\t\t\t\t\tf[i][j]=1+min(f[i-1][j-1],min(f[i-1][j],f[i][j-1]));\n\t\t\t\t}else{\n\t\t\t\t\tf[i][j]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tif(!a[i][j]){\n\t\t\t\t\tg[i][j]=0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tint l=1,r=n;\n\t\t\t\twhile(l<r){\n\t\t\t\t\tint mid=l+(r-l+1)/2;\n\t\t\t\t\tif(hasCube(i,j,mid)){\n\t\t\t\t\t\tl=mid;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tr=mid-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tg[i][j]=l;\n\t\t\t}\n\t\t}\n\t}\n}\nnamespace bcj{\n\tint f[NN],lb[NN],sz[NN];\n\tstruct st{\n\t\tint x,y;\n\t\tfriend bool operator<(st a,st b){\n\t\t\treturn g[a.x][a.y]>g[b.x][b.y];\n\t\t}\n\t}kk[NN];\n\tinline int get(int i,int j){\n\t\treturn (i-1)*n+j;\n\t}\n\tint getf(int v){\n\t\treturn f[v]==v?v:getf(f[v]);\n\t}\n\tinline void addp(int x,int y,int z){\n\t\tx=getf(x);\n\t\ty=getf(y);\n\t\tif(x==y)return;\n\t\tif(sz[x]>sz[y])swap(x,y);\n\t\tf[x]=y;\n\t\tlb[x]=z;\n\t\tsz[y]+=sz[x];\n\t}\n\tinline void add(int x,int y){\n\t\tif(x>1&&g[x-1][y]>=g[x][y]){\n\t\t\taddp(get(x-1,y),get(x,y),g[x][y]);\n\t\t}\n\t\tif(x<n&&g[x+1][y]>=g[x][y]){\n\t\t\taddp(get(x+1,y),get(x,y),g[x][y]);\n\t\t}\n\t\tif(y>1&&g[x][y-1]>=g[x][y]){\n\t\t\taddp(get(x,y-1),get(x,y),g[x][y]);\n\t\t}\n\t\tif(y<n&&g[x][y+1]>=g[x][y]){\n\t\t\taddp(get(x,y+1),get(x,y),g[x][y]);\n\t\t}\n\t}\n\tvoid init(){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tf[get(i,j)]=get(i,j);\n\t\t\t\tsz[get(i,j)]=1;\n\t\t\t}\n\t\t}\n\t}\n\tvoid run(){\n\t\tinit();\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tkk[get(i,j)].x=i;\n\t\t\t\tkk[get(i,j)].y=j;\n\t\t\t}\n\t\t}\n\t\tsort(kk+1,kk+n*n+1);\n\t\tfor(int i=1;i<=n*n;i++){\n\t\t\tadd(kk[i].x,kk[i].y);\n\t\t}\n\t}\n\tint pp1[NN],pt1;\n\tint pp2[NN],pt2;\n\tint pd(int x,int y){\n\t\tpt1=0;\n\t\tfor(int i=x;f[i]!=i;i=f[i]){\n\t\t\tpp1[++pt1]=i;\n\t\t\tif(f[i]==y){\n\t\t\t\treturn lb[i];\n\t\t\t}\n\t\t}\n\t\tpt2=0;\n\t\tfor(int i=y;f[i]!=i;i=f[i]){\n\t\t\tpp2[++pt2]=i;\n\t\t\tif(f[i]==x){\n\t\t\t\treturn lb[i];\n\t\t\t}\n\t\t}\n\t\twhile(pp1[pt1]==pp2[pt2]){\n\t\t\tpt1--;\n\t\t\tpt2--;\n\t\t}\n\t\treturn min(lb[pp1[pt1]],lb[pp2[pt2]]);\n\t}\n\tvoid prdw(){\n\t\tint a,b,c,d;\n\t\ta=read();\n\t\tb=read();\n\t\tc=read();\n\t\td=read();\n\t\tprintln(pd(get(a,b),get(c,d)));\n\t}\n}\nint m;\nint main(){\n\tn=read();\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\ta[i][j]=(rc()=='.');\n\t\t}\n\t}\n\tcalcG::calc();\n\tbcj::run();\n\tm=read();\n\tfor(int i=1;i<=m;i++){\n\t\tbcj::prdw();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1550371590,
        "uid": 13925,
        "name": "yyhhenry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3684 \u3010[CERC2016]\u673a\u68da\u969c\u788d Hangar Hurdles\u3011"
    },
    {
        "content": "\u6700\u5f00\u59cb\u7684\u601d\u8def\u501f\u9274\u4e86\u4e00\u4e0b\u539f\u9898\u89e3 \u540e\u7eed\u7684\u7b97\u6cd5\u662f\u6211\u81ea\u5df1\u778e\u641e\u7684\n\n\u524d\u7f00\u548c+\u4e8c\u5206+\u7f29\u70b9+kruskal\u91cd\u6784\u6811+\u6811\u5256lca\n\n\u5148\u5e38\u89c4\u64cd\u4f5c\u628a#\u8f6c\u5316\u62101\uff0c.\u8f6c\u5316\u62100\n\n\u7136\u540en\u00b2\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u81ea\u8eab\u80fd\u5f80\u5916\u62d3\u5c55\u7684\u6700\u5927\u6b63\u65b9\u5f62\u8fb9\u957f\u8bb0\u4f5cmx[][]\n\n\u5982\u679c\u5f3a\u884c\u679a\u4e3e\u6bcf\u4e2a\u70b9\u7684mx\u7684\u8bdd\u590d\u6742\u5ea6\u660e\u663e\u8d85\u51fa\n\n\u8003\u8651\u524d\u7f00\u548c\u4f18\u5316\uff0c\u628a\u539f\u6765\u768401\u6570\u7ec4\u7b97\u51fa\u4e2a\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u5c31\u53ef\u4ee5\u7b97\u51fa\u4e00\u4e2a\u6b63\u65b9\u5f62\u533a\u57df\u548c\u4e86\uff0c\u4e8c\u5206\u6b63\u65b9\u5f62\u8fb9\u957f\uff0ccheck\u6761\u4ef6\u662f\u5982\u679c\u8986\u76d6\u7684\u533a\u57df\u548c\u662f\u5426\u4e3a0\uff0c\u5373\u65e0\u963b\u6321\n\n\u628amx\u76f8\u540c\u7684\u8fde\u901a\u5757\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u6211\u7528tarjan\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u5b9e\u73b0\u7684\uff0c\u7528\u5e76\u67e5\u96c6\u4e5f\u884c\uff0c\u6bcf\u4e2a\u5757\u6211\u8d4b\u4e88\u4e2a\u6743\u503c\u5c31\u662f\u8be5\u5757\u7684\u70b9\u7684mx\u503c\n\n\u5728\u539f\u56fe\u4e2d\u628a\u76f8\u90bb\u7684\u5feb\u7528\u65e0\u5411\u5e26\u6743\u8fb9\u8fde\u8d77\u6765\uff0c\u8fb9\u6743\u4e3a\u4e24\u4e2a\u5757\u6743\u503c\u7684\u6700\u5c0f\u503c\uff0c\u4ee3\u8868\u4eceA\u5757\u8d70\u5230B\u5757\u6700\u5927\u8fb9\u957f\u53ea\u80fd\u4e3a\u8fd9\u4e2a\u8fb9\u6743    \u5efa\u8fb9\u7684\u65f6\u5019\u4e0d\u80fd\u91cd\u590d\u5efa\uff0c\u5f00\u4e2aset\u5224\u91cd\u5c31\u597d\u4e86\n\n\u8be2\u95ee\u95ee\u4e24\u4e2a\u70b9\u95f4\u80fd\u8d70\u7684\u6700\u5927\u6b63\u65b9\u5f62\u8fb9\u957f\uff0c\u5c31\u8f6c\u5316\u4e3a\u4e86\u8be5\u4e24\u70b9\u6240\u5728\u7684\u5757\u95f4\u7684\u6700\u5c0f\u8fb9\u6743\u6700\u5927\u4e3a\u591a\u5c11  \u6c42\u591a\u6761\u8def\u5f84\u4e2d\u6700\u5c0f\u8fb9\u6743\u7684\u6700\u5927\u503c\uff0c\u4fbf\u8003\u8651\u5230\u4f7f\u7528kruskal\u91cd\u6784\u6811\n\n\u7c7b\u4f3cP1967\u8d27\u8f66\u8fd0\u8f93\uff0ckruskal\u8dd1\u4e00\u8fb9\u6700\u5927\u751f\u6210\u6811\uff0c\u4e00\u5f00\u59cb\u6240\u6709\u7684\u5757\u70b9(\u7f29\u70b9\u540e\u7684\u70b9\u7f16\u53f7)\u5f62\u6210\u4e00\u7247\u68ee\u6797\uff0c\u68ee\u6797\u4e2d\u6bcf\u68f5\u6811\u53ea\u6709\u6839\u8282\u70b9\u4e14\u6839\u8282\u70b9\u4e3a\u5757\u70b9\uff0c\u628a\u6811\u8fb9\u4ece\u5927\u5230\u5c0f\u64cd\u4f5c\uff1a\u65b0\u5efa\u4e00\u4e2a\u70b9\uff0c\u70b9\u6743\u4e3a\u8fb9\u6743\uff0c\u5f80\u8be5\u8fb9\u6240\u8fde\u7ed3\u7684\u4e24\u4e2a\u5757\u70b9\u6240\u5728\u6811\u7684\u6839\u8282\u70b9\u5206\u522b\u5f80\u65b0\u70b9\u8fde\u8fb9\n\n\u8fd9\u6837\u4fbf\u91cd\u6784\u51fa\u4e86\u4e00\u68f5\u6811\uff0c\u4e24\u70b9\u6240\u5728\u7684\u5757\u5c31\u53ef\u4ee5\u5bf9\u5e94\u5230\u6811\u70b9\u4e0a\uff0c\u4e24\u6811\u70b9\u7684lca\u7684\u6743\u503c\u4fbf\u662f\u7b54\u6848\n\n```cpp\n#include<set>\n#include<stack>\n#include<cstdio>\n#include<algorithm>\n#define mp make_pair\nusing namespace std;\nconst int N=1e3+10,S=2e6+10;\nint n,q;\nbool map[N][N];\nint sum[N][N],mx[S];\nshort fx[4]={-1,1,0,0},fy[4]={0,0,-1,1}; //\u65b9\u5411\u6570\u7ec4\ninline const int id(int x,int y) //\u4e8c\u7ef4\u5750\u6807\u8f6c\u4e00\u7ef4\u7f16\u53f7\n{\n\treturn (x-1)*n+y;\n}\ninline const bool exist(int x,int y) //\u5224\u65ad\u662f\u5426\u8d8a\u754c\n{\n\treturn x>=1&x<=n&&y>=1&&y<=n;\n}\ninline const bool check(int x1,int y1,int x2,int y2)\n{\n\treturn !(sum[x2][y2]-sum[x2][y1-1]-sum[x1-1][y2]+sum[x1-1][y1-1])&&exist(x1,y1)&&exist(x2,y2);\n}\ninline const void getsum() //\u83b7\u53d6\u524d\u7f00\u548c\u6570\u7ec4\n{\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=n;j++)\n\t\t\tsum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+map[i][j];\n}\ninline const void getmax()  //\u7edf\u8ba1mx\u6570\u7ec4\n{\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=n;j++)\n\t\t\tif (!map[i][j])\n\t\t\t{\n\t\t\t\tint l=0,r=n>>1,p;\n\t\t\t\twhile (l<r)\n\t\t\t\t{\n\t\t\t\t\tint mid=l+r>>1;\n\t\t\t\t\tif (check(i-mid,j-mid,i+mid,j+mid))l=(p=mid)+1;\n\t\t\t\t\telse r=mid;\n\t\t\t\t}\n\t\t\t\tmx[id(i,j)]=(p<<1)+1;\n\t\t\t}\n}\nclass Graph\n{\n\tprivate:\n\t\tint cnt;\n\t\tstruct edge{int to,w,next;};\n\tpublic:\n\tint head[S<<1];\n\tedge e[S<<2];\n\tinline const void addedge(int u,int v,int w=0)\n\t{\n\t\tcnt++;e[cnt]=(edge){v,w,head[u]};\n\t\thead[u]=cnt;\n\t}\n\tinline const void connect(int u,int v,int w=0)\n\t{\n\t\taddedge(u,v,w);\n\t\taddedge(v,u,w);\n\t}\n}g,t;\ninline const void build() //\u628a\u6240\u6709\u70b9\u4e0e\u5176\u76f8\u90bb\u7684\u540cmx\u7684\u70b9\u8fde\u63a5\uff0c\u4fbf\u4e8e\u63a5\u4e0b\u6765\u7684\u7f29\u70b9\n{\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=n;j++)\n\t\t\tfor (int nx,ny,k=0;k<4;k++)\n\t\t\t\tif (exist(nx=i+fx[k],ny=j+fy[k])&&mx[id(i,j)]==mx[id(nx,ny)])\n\t\t\t\t\tg.addedge(id(i,j),id(nx,ny));\n}\nstack<int>s;\nint scc[S],low[S],dfn[S],w[S<<1],cnt,tot;\ninline const void tarjan(int u)\n{\n\tint v;s.push(u);low[u]=dfn[u]=++cnt;\n\tfor (int i=g.head[u];i;i=g.e[i].next)\n\t\tif (!dfn[v=g.e[i].to])tarjan(v),low[u]=min(low[u],low[v]);\n\t\telse if (!scc[v])low[u]=min(low[u],low[v]);\n\tif (low[u]!=dfn[u])return;w[++tot]=mx[u];\n\tdo v=s.top(),s.pop(),scc[v]=tot;while (u!=v);\n}\ninline const void tarjan()\n{\n\tfor (int i=1;i<=n*n;i++)\n\t\tif (!dfn[i])\n\t\t\ttarjan(i);\n}\nstruct edge\n{\n\tint x,y,w;\n\tinline const bool operator<(const edge &e)const\n\t{\n\t\treturn w>e.w; //\u6700\u5927\u751f\u6210\u6811\n\t}\n}e[S<<2];\nset<pair<int,int> >st;\ninline const void addedge(int x,int y,int w)\n{\n\tcnt++;e[cnt]=(edge){x,y,w};\n}\ninline const void rebuild() //\u7f29\u70b9\u5e76\u5efa\u51fa\u65b0\u56fe\n{\n\tcnt=0;\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=n;j++)\n\t\t\tfor (int u,v,k=0;k<4;k++)\n\t\t\t\tif (exist(i+fx[k],j+fy[k])&&(u=scc[id(i,j)])!=(v=scc[id(i+fx[k],j+fy[k])])&&st.find(mp(u,v))==st.end()) //\u5224\u91cd\n\t\t\t\t\taddedge(u,v,min(w[u],w[v])),st.insert(mp(u,v)),st.insert(mp(v,u));//\u65e0\u5411\u56fe\uff0c\u4e24\u4e2a\u65b9\u5411\u90fd\u8981\u585e\u8fdbset\n}\nclass Union_Find_Set //\u5e76\u67e5\u96c6\n{\n\tprotected:\n\t\tint fa[S<<1];\n\tpublic:\n\t\tinline const void Init()\n\t\t{\n\t\t\tfor (int i=1;i<tot<<1;i++)fa[i]=i;\n\t\t}\n\t\tinline const int Find(int x)\n\t\t{\n\t\t\treturn fa[x]==x?x:fa[x]=Find(fa[x]);\n\t\t}\n\t\tinline const void Union(int x,int y)\n\t\t{\n\t\t\tint fx=Find(x),fy=Find(y);\n\t\t\tif (fx==fy)return;\n\t\t\tfa[fx]=fy;\n\t\t}\n}ufs;\nint chosen[S],lst;\ninline const void kruskal()\n{\n\tufs.Init();\n\tsort(e+1,e+cnt+1);\n\tfor (int i=1;i<=cnt;i++)\n\t\tif (ufs.Find(e[i].x)!=ufs.Find(e[i].y))\n\t\t\tufs.Union(e[i].x,e[i].y),chosen[++lst]=i;\n}\ninline const void rebuildtree()//\u91cd\u6784\u6811\n{\n\tufs.Init();\n\tfor (int x,y,i=1;i<=lst;i++)\n\t\tx=ufs.Find(e[chosen[i]].x),y=ufs.Find(e[chosen[i]].y),\n\t\tt.connect(x,tot+i),t.connect(y,tot+i),w[tot+i]=e[chosen[i]].w,\n\t\tufs.Union(x,tot+i),ufs.Union(y,tot+i);\n}\nint size[S<<1],top[S<<1],dep[S<<1],fa[S<<1],wson[S<<1];\ninline const void dfs(int p)\n{\n\tsize[p]=1;\n\tfor (int i=t.head[p];i;i=t.e[i].next)\n\t{\n\t\tint son=t.e[i].to;\n\t\tif (son==fa[p])continue;\n\t\tfa[son]=p;dep[son]=dep[p]+1;\n\t\tdfs(son);size[p]+=size[son];\n\t\tif (size[son]>size[wson[p]])wson[p]=son;\n\t}\n}\ninline const void dfs(int p,int tp)\n{\n\ttop[p]=tp;\n\tif (wson[p])dfs(wson[p],tp);\n\tfor (int son,i=t.head[p];i;i=t.e[i].next)\n\t\tif ((son=t.e[i].to)!=fa[p]&&son!=wson[p])\n\t\t\tdfs(son,son);\n}\ninline const int lca(int a,int b)\n{\n\twhile (top[a]^top[b])\n\t\tdep[top[a]]>dep[top[b]]\n\t\t?a=fa[top[a]]:b=fa[top[b]];\n\treturn dep[a]<dep[b]?a:b;\n}\nint main()\n{\n\tscanf(\"%d\",&n);char c;\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=n;j++)\n\t\t\tscanf(\" %c\",&c),map[i][j]=c=='#';\n\tgetsum();getmax();\n\tbuild();tarjan();rebuild();\n\tkruskal();rebuildtree();\n\tdfs(tot+lst);dfs(tot+lst,tot+lst); //\u6709\u591a\u5c11\u6761\u6811\u8fb9\u5c31\u4f1a\u6709\u591a\u5c11\u4e2a\u70b9\uff0c\u800c\u6700\u5c0f\u7684\u90a3\u6761\u6811\u8fb9\u5fc5\u5b9a\u4ea7\u751f\u6700\u4e0a\u65b9\u7684\u70b9\uff0c\u6240\u4ee5\u6839\u8282\u70b9\u7f16\u53f7\u662f\u539f\u5757\u6570+\u6700\u5927\u751f\u6210\u6811\u8fb9\u6570\n\tscanf(\"%d\",&q);\n\tint x1,y1,x2,y2;\n\twhile (q--)\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2),\n\t\tprintf(\"%d\\n\",w[lca(scc[id(x1,y1)],scc[id(x2,y2)])]);\n\treturn 0;\n}\n```",
        "postTime": 1548427090,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3684 \u3010[CERC2016]\u673a\u68da\u969c\u788d Hangar Hurdles\u3011"
    },
    {
        "content": "\u57fa\u7840\u56fe\u8bba\u4f5c\u4e1a\u9898\u3002\u611f\u89c9\u96be\u5ea6\u4e0d\u53ca\u9ed1\uff1f\n\n\u53ef\u80fd\u662f\u6211\u4e4b\u524d\u5199\u8fc7\u8fd9\u73a9\u610f\u6216\u8005\u73b0\u5728\u7684\u505a\u6cd5\u76f8\u5bf9\u7b80\u5355\u5f88\u591a\u3002\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5bbd\u5747\u4e3a $n$ \u7684\u9ed1\u767d\u77e9\u9635\uff0c\u4f60\u9700\u8981\u56de\u7b54 $q$ \u7ec4\u8be2\u95ee\uff1a\n\n\u7ed9\u5b9a\u8d77\u70b9\u5750\u6807\u548c\u7ec8\u70b9\u5750\u6807\uff0c\u4f60\u6709\u4e00\u4e2a\u521d\u59cb\u4e2d\u5fc3\u5728\u8d77\u70b9\uff0c\u8fb9\u957f\u4e3a $x$ \u7684\u6b63\u65b9\u5f62\u3002\u5728\u201c\u5b58\u5728\u4e00\u6761\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u6b63\u65b9\u5f62\u7684\u4e2d\u5fc3\u5728\u8def\u5f84\u4e0a\u79fb\u52a8\u65f6\u4e0d\u78b0\u5230\u4efb\u4f55\u9ed1\u683c\u5b50\u201d\u7684\u6761\u4ef6\u4e0b\uff0c\u6c42\u51fa\u6700\u5927\u53ef\u80fd\u7684\u5947\u6574\u6570 $x$\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa $0$\u3002\n\n## \u505a\u6cd5\n\n\u611f\u6027\u7406\u89e3\u6709\u201c\u8def\u5f84\u4e0a\u6700\u5bbd\u7684\u90e8\u5206\u5f71\u54cd\u7b54\u6848\u201d\uff0c\u4e8e\u662f\u53ef\u4ee5\u60f3\u5230\u74f6\u9888\u8def\u3002\n\n\u5728\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u590d\u6742\u5ea6\u8f83\u52a3\uff0c\u4f46\u662f\u76f8\u5f53\u597d\u5199\u7684\u79bb\u7ebf\u74f6\u9888\u8def\u505a\u6cd5\uff08\u57fa\u4e8e Kruskal\uff0c\u4f46\u662f\u4e0d\u9700\u8981\u7528\u5230 Kruskal \u91cd\u6784\u6811\u76f8\u5173\u77e5\u8bc6\uff09\uff1a\n\n1. \u5c06\u8fb9\u6309\u8fb9\u6743\u6392\u5e8f\u3002\n\n2. \u7ef4\u62a4 `set<int>s[N]`\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee $x_i,y_i$\uff0c\u628a\u8be2\u95ee\u7f16\u53f7 $i$ \u63d2\u5165\u5bf9\u5e94\u7684 `set` \u4e2d\u3002\n\n3. \u6309\u7167\u8fb9\u6743\u987a\u5e8f\u5904\u7406\u6bcf\u4e00\u6761\u8fb9\u3002\u5bf9\u4e8e\u4e00\u6761\u8fb9 $x\\xleftrightarrow w y$\uff0c\u5982\u679c $x,y$ \u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u5185\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u4e24\u4e2a\u96c6\u5408 $s_x,s_y$\u3002\u5982\u679c $s_x,s_y$ \u4e2d\u6709\u76f8\u540c\u5143\u7d20\uff0c\u5c06\u4e24\u4e2a\u5143\u7d20\u540c\u65f6\u5220\u9664\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5bf9\u5e94\u8be2\u95ee\u7b54\u6848\u4e3a $w$\u3002\u6700\u540e\u5408\u5e76 $x,y$ \u6240\u5728\u8fde\u901a\u5757\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(q\\log m\\log q)$\uff0c$m$ \u4e3a\u8fb9\u6570\uff0c$q$ \u4e3a\u8be2\u95ee\u6570\u3002\u590d\u6742\u5ea6\u74f6\u9888\u4e3a\u542f\u53d1\u5f0f\u5408\u5e76\u548c `set` \u7684 `insert` \u64cd\u4f5c\u3002\n\n\u56de\u5230\u8fd9\u4e2a\u95ee\u9898\u3002\u9996\u5148\u7528\u6734\u7d20\u7684 DP \u6c42\u51fa\u4e00\u4e2a\u5750\u6807\u53ef\u4ee5\u62d3\u5c55\u7684\u6700\u5927\u6b63\u65b9\u5f62\u7684\u8fb9\u957f $w_{i,j}$\u3002\uff08\u5de6\u4e0a\uff0c\u53f3\u4e0a\uff0c\u5de6\u4e0b\uff0c\u53f3\u4e0b\u76f4\u63a5 DP\uff0c\u7136\u540e\u5408\u5e76\uff09\u7136\u540e\u5957\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u5c06\u6240\u6709\u70b9\u6309\u7167 $w$ \u964d\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u5982\u4e0a\u5904\u7406\uff0c\u5411\u56db\u4e2a\u65b9\u5411\u5408\u5e76\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(q\\log n^2\\log q)$\uff0c\u8f83\u9898\u89e3\u533a\u7684 $O(n^2\\log n^2)$ \u52a3\u3002\u4f46\u662f\u56e0\u4e3a\u672c\u9898\u4e2d $q<n^2$ \u4e14\u5f00\u4e86 4s\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8dd1\u8d77\u6765\u4e5f\u4e0d\u4f1a\u8d85\u65f6\uff0c\u4f46\u662f\u597d\u50cf\u5361\u5230\u65f6\u9650\u4e86\u3002\n\n## \u4ee3\u7801\n\n\u53d8\u91cf\u548c\u4e0a\u9762\u6570\u7ec4\u5bf9\u5e94\u3002\n\n\u6ca1\u6709\u523b\u610f\u7f29\u51cf\u4ee3\u7801\uff0c\u4ee3\u7801\u6bd4\u9898\u89e3\u4ee3\u7801\u77ed\u4e0d\u5c11\uff08\u5f88\u591a\u91cd\u590d\uff09\uff0c\u4e14\u4fdd\u7559\u4e86\u53ef\u8bfb\u6027\u3002\n\n```c++\n//P3684 AC Code\n//written by Loser_King(159686)\n//C++14 (GCC 9) | 1.94KB | 7.93s | 112.96MB\n#include<bits/stdc++.h>\n#define ord(x,y) (((x)-1)*n+(y))\n#define getx(k) (((k)-1)/n+1)\n#define gety(k) (((k)-1)%n+1)\nusing namespace std;\nint const N=1010,K=N*N,dx[]={-1,0,0,1},dy[]={0,-1,1,0};\nint n,q,w[N][N],ul[N][N],ur[N][N],dl[N][N],dr[N][N],f[K],ans[K];\nchar a[N][N];\nset<int>s[K];\npair<int,int>p[K];\nint find(int x){\n\treturn x^f[x]?f[x]=find(f[x]):x;\n}\nint main(){\n\tios::sync_with_stdio(0);\n\tcin>>n;\n\tfor(int i=1;i<=n*n;i++)\n\t\tf[i]=i;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tcin>>a[i][j];\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(a[i][j]=='.')\n\t\t\t\tul[i][j]=min(ul[i-1][j-1],\n\t\t\t\t\tmin(ul[i][j-1],ul[i-1][j]))+1;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=n;j>=1;j--)\n\t\t\tif(a[i][j]=='.')\n\t\t\t\tur[i][j]=min(ur[i-1][j+1],\n\t\t\t\t\tmin(ur[i-1][j],ur[i][j+1]))+1;\n\tfor(int i=n;i>=1;i--)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(a[i][j]=='.')\n\t\t\t\tdl[i][j]=min(dl[i+1][j-1],\n\t\t\t\t\tmin(dl[i+1][j],dl[i][j-1]))+1;\n\tfor(int i=n;i>=1;i--)\n\t\tfor(int j=n;j>=1;j--)\n\t\t\tif(a[i][j]=='.')\n\t\t\t\tdr[i][j]=min(dr[i+1][j+1],\n\t\t\t\t\tmin(dr[i+1][j],dr[i][j+1]))+1;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tp[ord(i,j)]={w[i][j]=min(ul[i][j],min(ur[i][j],\n\t\t\t\tmin(dl[i][j],dr[i][j])))*2-1,ord(i,j)};\n\tsort(p+1,p+1+n*n,greater<pair<int,int> >());\n\tcin>>q;\n\tfor(int i=1;i<=q;i++){\n\t\tint ax,ay,bx,by;\n\t\tcin>>ax>>ay>>bx>>by;\n\t\ts[ord(ax,ay)].insert(i);\n\t\ts[ord(bx,by)].insert(i);\n\t}\n\tfor(int i=1;i<=n*n;i++){\n\t\tint x=getx(p[i].second),y=gety(p[i].second),\n\t\t\tfa=find(p[i].second),k=p[i].first;\n\t\tif(a[x][y]=='#')\n\t\t\tcontinue;\n\t\tfor(int j=0;j<4;j++){\n\t\t\tint tx=x+dx[j],ty=y+dy[j],tfa=find(ord(tx,ty));\n\t\t\tif(tx<1||ty<1||tx>n||ty>n||w[tx][ty]<w[x][y]||fa==tfa)\n\t\t\t\tcontinue;\n\t\t\tint fx=fa,fy=tfa;\n\t\t\tif(s[fx].size()>s[fy].size())\n\t\t\t\tswap(fx,fy);\n\t\t\tf[fx]=fa=fy;\n\t\t\tfor(int w:s[fx])\n\t\t\t\tif(s[fy].count(w))\n\t\t\t\t\tans[w]=k,s[fy].erase(w);\n\t\t\t\telse\n\t\t\t\t\ts[fy].insert(w);\n\t\t\ts[fx].clear();\n\t\t}\n\t}\n\tfor(int i=1;i<=q;i++)\n\t\tcout<<ans[i]<<\"\\n\";\n}\n```",
        "postTime": 1657887866,
        "uid": 159686,
        "name": "Loser_King",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3684 \u3010[CERC2016]\u673a\u68da\u969c\u788d Hangar Hurdles\u3011"
    },
    {
        "content": "\u5927\u6742\u70e9\u597d\u9898 ~~(bushi~~\n\n\u9996\u5148\uff0c\u6bcf\u4e2a\u683c\u5b50\u4e3a\u4e2d\u5fc3\u7684\u6b63\u65b9\u5f62\u7684\u6700\u5927\u8fb9\u957f\u53ef\u4ee5\u63d0\u524d\u4e8c\u4f4d\u524d\u7f00\u548c\u51fa\u4e95\u53f7\u7684\u6570\u91cf\u7136\u540e\u4e8c\u5206\u6c42\u51fa\u3002\n\n\u7136\u540e\u56e0\u4e3a\u8981\u662f\u6700\u5c0f\u7b54\u6848\u6700\u5927\uff0c\u8fd9\u91cc\u6392\u9664\u4e8c\u5206\uff08\u53cd\u6b63\u8fd9\u4e2a check \u6211\u9664\u4e86 bfs \u5c31\u4e0d\u4f1a\u4e86\uff09\u540e\u53ef\u4ee5\u8003\u8651**\u6700\u5927\u751f\u6210\u6811**\u4ee5\u5b9e\u73b0**\u6700\u5927**\u7684\u76ee\u7684\u3002\u81f3\u4e8e\u5efa\u8fb9\uff0c\u5c31\u662f\u4e00\u4e2a\u70b9\u5411\u4e0a\u4e0b\u5de6\u53f3\u4e0d\u662f\u969c\u788d\u7269\u7684\u5efa\u8fb9\u4e86\uff0c\u8fb9\u6743\u5e94\u5f53\u662f\u4e24\u4e2a\u70b9\u7684\u6700\u5927\u8fb9\u957f\uff08\u70b9 $i$ \u7684\u6700\u5927\u6b63\u65b9\u5f62\u8fb9\u957f\u8bb0\u4e3a $d_i$\uff09\u3002\n\n\u6ce8\u610f\u4e00\u70b9\uff0c\u8fd9\u4e2a\u751f\u6210\u6811\u53ef\u80fd\u662f\u68ee\u6797\uff0c\u8981\u5206\u522b LCA\u3002\n\n\u6811\u4e0a\u6c42\u7b80\u5355\u8def\u5f84\u6211\u9009\u62e9**\u500d\u589e**\uff0c\u5177\u4f53\u5c31\u662f\u5728 LCA \u91cc\u9762\u591a\u7ef4\u62a4\u4e00\u4e2a `dis[i][j]` \u8868\u793a \u70b9 $i$ \u5411\u4e0a\u8d70 $2^j$ \u6b65\u80fd\u591f\u53d6\u5230\u7684**\u6700\u5c0f\u8fb9\u957f**\u3002\n\n\u521d\u59cb\u503c\u663e\u7136\u5c31\u662f `dp[cur][0]=min(d[cur],d[fa/*\u7236\u4eb2\u8282\u70b9*/])`\uff0c\u5728 LCA \u7684\u65f6\u5019\u4e00\u8d77\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u7801\u91cf\u8f83\u5927\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n;\nchar mp[1005][1005];\nint sum[1005][1005],d[1005][1005];\nint q;\nbool check(int x,int y,int r){\n\tif(r>=x||r>=y||r+x>n||r+y>n)return 0;\n\tif(sum[x+r][y+r]-sum[x-r-1][y+r]-sum[x+r][y-r-1]+sum[x-r-1][y-r-1]>=1)return 0;\n//\tcout<<\"Check: \"<<x<<' '<<y<<' '<<r<<'\\n';\n\treturn 1;\n}\nint dx[4]={1,-1,0,0};\nint dy[4]={0,0,1,-1};\nint tot;\nint calc(int x,int y){\n\treturn (x-1)*n+y;\n}\nint X(int x){\n\treturn (x-1)/n+1;\n}\nint Y(int x){\n\treturn (x%n==0)?n:x%n;\n}//\u4ee5\u4e0a\u4e09\u4e2a\u51fd\u6570\u5b9e\u73b0\u4e86\u5750\u6807\u4e0e\u7f16\u53f7\u7684\u4e92\u6362 \nstruct node{\n\tint u,v,w;\n}e[4000005];\nint fa[1000005];\nint find(int x){\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid unionn(int x,int y){\n\tint a=find(x),b=find(y);\n\tif(a!=b)fa[a]=b;\n\treturn;\n}\nbool cmp(node a,node b){\n\treturn a.w>b.w;\n}\nint _d[1000005],dp[1000005][21],dis[1000005][21];\nvector<node>nbr[1000005];\nvoid before(int cur,int fa){\n\t_d[cur]=_d[fa]+1;\n\tdp[cur][0]=fa;\n\tdis[cur][0]=min(d[X(cur)][Y(cur)],d[X(fa)][Y(fa)]); \n\tfor(int i=1;i<=20;++i)dp[cur][i]=dp[dp[cur][i-1]][i-1],dis[cur][i]=min(dis[cur][i-1],dis[dp[cur][i-1]][i-1]);\n\tfor(int i=0;i<nbr[cur].size();++i){\n\t\tnode to=nbr[cur][i];\n\t\tif(fa==to.v)continue;\n//\t\tdis[to.v][0]=to.w;\n\t\tbefore(to.v,cur);\n\t}\n\treturn;\n}\nint LCA(int u,int v){\n\tint lens=d[X(u)][Y(u)],_lens=d[X(v)][Y(v)];\n\tif(_d[u]>_d[v])swap(u,v);\n\tfor(int i=20;i>=0;i--){\n\t\tif((1<<i)<=_d[v]-_d[u])_lens=min(_lens,dis[v][i]),v=dp[v][i];\n\t}\n\tif(u==v)return min(lens,_lens);\n\tfor(int i=20;i>=0;i--){\n\t\tif(dp[u][i]!=dp[v][i]){\n\t\t\tlens=min(lens,dis[u][i]);\n\t\t\t_lens=min(_lens,dis[v][i]);//\u4e00\u5b9a\u8981\u5148\u7ef4\u62a4\u8ddd\u79bb\uff0c\u4e0d\u7136u/v\u7684\u503c\u5c31\u6539\u4e86 \n\t\t\tu=dp[u][i];\n\t\t\tv=dp[v][i];\n\t\t}\n\t}\n\treturn min(lens,_lens);\n}\nvoid MST(){\n\tfor(int i=1;i<=n*n;++i)fa[i]=i;\n\tsort(e+1,e+tot+1,cmp);\n\tfor(int i=1;i<=tot;++i){\n\t\tint x=e[i].u,y=e[i].v;\n\t\tif(find(x)==find(y))continue;\n\t\tnbr[x].push_back({x,y,e[i].w});\n\t\tnbr[y].push_back({y,x,e[i].w});\n// \t\tcout<<\"W: \"<<x<<' '<<y<<' '<<X(x)<<' '<<Y(x)<<' '<<X(y)<<' '<<Y(y)<<' '<<e[i].w<<'\\n';\n//\t\tcout<<x<<' '\n\t\tunionn(x,y);\n\t}\n\treturn;\n}\nint main(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tios::sync_with_stdio(0);\n\tcin>>n;\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=n;++j){\n\t\t\tcin>>mp[i][j];\n\t\t\tsum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1];\n\t\t\tif(mp[i][j]=='#')sum[i][j]++;\t\t\n\t\t\t//\u4e8c\u4f4d\u524d\u7f00\u548c \n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=n;++j){\n\t\t\tint lt=-1,rt=n/2;\n\t\t\twhile(lt+1<rt){\n\t\t\t\tint mid=lt+rt>>1;\n\t\t\t\tif(check(i,j,mid))lt=mid;\n\t\t\t\telse rt=mid;\n\t\t\t}\n\t\t\td[i][j]=2*lt+1;//\u61d2\u5f97\u4fdd\u8bc1\u5947\u6570\u4e86\uff0c\u53ea\u4e8c\u5206\u4e00\u534a\u7684\u8ddd\u79bb \n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=n;++j){\n\t\t\tfor(int k=0;k<=3;++k){\n\t\t\t\tint x=i+dx[k],y=j+dy[k];\n\t\t\t\tif(x>=1&&y>=1&&x<=n&&y<=n&&mp[x][y]=='.'&&mp[i][j]=='.'){\n\t\t\t\t\te[++tot]={calc(i,j),calc(x,y),min(d[i][j],d[x][y])};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tMST();\n\tfor(int i=1;i<=n*n;++i)if(!_d[i]&&mp[X(i)][Y(i)]=='.')before(i,0);//\u53ef\u80fd\u662f\u68ee\u6797\uff01 \n\tcin>>q;\n\tfor(int i=1;i<=q;++i){\n\t\tint x1,y1,x2,y2;\n\t\tcin>>x1>>y1>>x2>>y2;\n\t\tif(find(calc(x1,y1))!=find(calc(x2,y2))){\n\t\t\tcout<<0<<'\\n';//\u53ef\u80fd\u4e0d\u8fde\u901a\uff0c\u5224\u65e0\u89e3 \n\t\t\tcontinue;\n\t\t}\n\t\tcout<<LCA(calc(x1,y1),calc(x2,y2))<<'\\n';\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1665738506,
        "uid": 359614,
        "name": "Forever1507",
        "ccfLevel": 6,
        "title": "P3684"
    },
    {
        "content": "\u8fd9\u662f\u6211\u5199\u8fc7\u7684\u4ee3\u7801\u6700\u957f\u7684\u9898\uff0c289\u884c\uff01\n\n\u4ed6\u8003\u4e86\u56fe\u8bba+\u6570\u636e\u7ed3\u6784\u5927\u4e32\u70e7\uff01\n\n\u5927\u6982\u7528\u4e86\u524d\u7f00\u548c\uff0c\u4e8c\u5206\u7b54\u6848\uff0c\u5e76\u67e5\u96c6\uff0chash\uff0cbfs\uff0c\u4e8c\u53c9\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\uff0c\u6811\u94fe\u5256\u5206\uff0cst\u8868\u3002\n\n\u4ee5\u4e0b\u5747\u4e3a\u5bf9\u6837\u4f8b\u7684\u8bf4\u660e\n\n\u521d\u59cb\u6837\u4f8b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/21691.png)\n- \u524d\u7f00\u548c\uff1a\u5c06#\u5904\u7406\u4e3a1\uff0c\u5176\u4f59\u5904\u7406\u4e3a0\u3002O\uff08n^2\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/21692.png)\n- \u4e8c\u5206\u7b54\u6848\uff1a\u5904\u7406\u51fa\u5728\u4efb\u610f\u4e00\u4e2a\u70b9\u53ef\u4ee5\u5b58\u5728\u7684\u6700\u5927\u7684\u7bb1\u5b50\u7684\u8fb9\u957f\uff0c\u56e0\u4e3af(x)={1,1,1,1,...,1,0,0,...0}\uff0c\u5177\u6709\u53ef\u4e8c\u5206\u6027\uff0c\u907f\u514d500\u6b21\u7684\u66b4\u529b\u5224\u65ad\uff0c\u8fd9\u6837\u53ea\u8981\u5224\u65adlog\uff082\uff0c500\uff09~=9\u6b21\uff1bO\uff089*n^2\uff09\n\n\u6700\u5927\u8fb9\u957f:\n\n![](https://cdn.luogu.com.cn/upload/pic/21693.png)\n\n- \u7f29\u70b9\uff1a\u4e0a\u56fe\u4e2d\u6211\u4eec\u53d1\u73b0\uff0c\u5f88\u591a1\u30013\u662f\u8fde\u5728\u4e00\u8d77\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5c06\u8fd9\u4e9b\u8054\u901a\u7684\u76f8\u540c\u7684\u4e66\u53d8\u6210\u4e00\u4e2a\u70b9\uff08\u56e0\u4e3a\u9898\u76ee\u4e0d\u95ee\u600e\u4e48\u8d70\uff0c\u6240\u4ee5\u8054\u901a\u7684\u76f8\u540c\u7684\u6570\u5176\u5b9e\u662f\u4e00\u6837\u7684\uff09\u3002O\uff08n^2\uff09\n\n   \u5176\u5b9edfs\u548cbfs\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u6211\u611f\u89c9\u5e76\u67e5\u96c6\u6700\u5feb\uff0c\u4ed6\u53ea\u8981\u7528\u4e24\u5c42\u5faa\u73af\u5224\u65ad\u6bcf\u4e2a\u70b9\u4e0a\u9762\u548c\u5de6\u8fb9\u5373\u53ef\uff0c\u800c\u641c\u7d22\u5fc5\u987b\u8981\u5224\u65ad\u56db\u4e2a\u65b9\u5411\u3002\n\n- \u5efa\u56fe\uff1a\uff08\u672c\u6587\u4e2d\uff0c\u5c06\u7f29\u70b9\u4e4b\u540e\u7684\u8054\u901a\u7684\u76f8\u540c\u6570\u5b57\u79f0\u4e3a\u5757\uff09\uff0c\u7f29\u70b9\u4e4b\u540e\uff0c\u5757\u4e0e\u5757\u662f\u5426\u76f8\u90bb\u662f\u4e0d\u80fd\u5224\u65ad\u7684\uff0c\u53ea\u80fd\u5728\u539f\u56fe\u4e2d\u5224\u65ad\uff0c\u4f46\u5728\u539f\u56fe\u4e2d\u91cd\u590d\u5224\u65ad\u5f88\u591a\uff08\u6bd4\u5982\u4e0a\u56fe\u4e2d\u7b2c\u4e8c\u884c\u7b2c\u4e8c\u5217\u76843\u548c\u7b2c\u4e09\u884c\u7b2c\u4e8c\u5217\u76843\u4f1a\u91cd\u590d\uff09\uff0c\u6240\u4ee5\u9700\u8981\u5224\u91cd\uff08\u8fd9\u91cc\u6211\u7528\u4e86hash\uff0cSTL\u7684map\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u6709\u70b9\u6162\uff09\u3002O\uff08n^2\uff09\n\n   \u7f29\u70b9\u4e4b\u540e\uff0c\u9884\u8ba1\u70b9\u6570\u6700\u591a10^4\u6570\u91cf\u7ea7\uff0c\u8fb9\u6570\u6700\u591a10^6\u6570\u91cf\u7ea7\uff08\u56e0\u4e3a\u8054\u901a\u7684\u53d8\u6210\u4e00\u5757\uff0c\u6240\u4ee5\u56fe\u4e0d\u4f1a\u5f88\u5bc6\u96c6\uff09\n\n   \u56fe\u4e2d\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7528dijkstra\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u67e5\u8be2\u6700\u77ed\u8def\uff08\u7c7b\u4f3c\u4e8e\u6700\u77ed\u8def\uff0c\u5c31\u662f\u8d77\u70b9\u5230\u7ec8\u70b9\u8def\u5f84\u4e0a\u6700\u5c0f\u70b9\u6743\u7684\u6700\u5927\u503c\uff09\uff0c\u4f46\u4e00\u770b300000\u7684\u8be2\u95ee\u6570\u91cf\uff0c\u6709\u70b9\u614c\uff0c\u770b\u770b\u6709\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\n\n![](https://cdn.luogu.com.cn/upload/pic/21700.png)\n\n- \u5efa\u6811\uff1a\u5982\u4e0a\u56fe\uff08\u753b\u56fe\u753b\u7684\uff0c\u6709\u70b9\u4e11\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\uff0c\u56e0\u4e3a\u5728\u56fe\u4e2d\u5f88\u591a\u8fb9\u662f\u4e0d\u4f1a\u88ab\u8d70\u5230\u7684\uff0c\u6bd4\u59822\u52305\u5f53\u7136\u4e0d\u4f1a\u4ece1\u8d70\uff0c\u800c\u4f1a\u4ece3\u8d70\uff0c\u6211\u4eec\u53ea\u8981\u5728bfs\u7684\u65f6\u5019\u6bcf\u6b21\u9009\u961f\u5217\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u7ee7\u7eed\u6269\u5c55\u5373\u53ef\uff08\u6b63\u786e\u6027\u5c31\u4e0d\u8bc1\u660e\u4e86\uff09\u3002O\uff0810^4*log\uff0810^4\uff09\uff09\n\n- st\u8868+\u6811\u94fe\u5256\u5206\uff1a\u90fd\u6709\u6811\u4e86\uff0c\u67e5\u8be2\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u600e\u4e48\u505a\uff1f\u6811\u94fe\u5256\u5206\u554a\uff01\u8fd9\u91cc\u4e0d\u7528\u7ebf\u6bb5\u6811\u662f\u56e0\u4e3aq=300000\uff0c\u4f60\u8bf4qlog\uff0810^4\uff09^2\u4f18\u79c0\u8fd8\u662f10^4*log\uff0810^4\uff09+qlog\uff0810^4\uff09\u4f18\u79c0\uff1f\n\n  \u6807\u51c6\u7684\u53e3\u5934AC\u4e94\u5206\u949f\uff0c\u5199\u5199\u4e24\u5c0f\u65f6\u7684\u9898\uff0c\u592a\u6076\u5fc3\u4e86\uff0c\u505a\u6cd5\u4e0a\u8fd9\u5e94\u8be5\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f4e\u7684\u4e86\u5427\uff0c\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u597d\u5199\u4e00\u70b9\u7684\u505a\u6cd5\uff0c\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u7b97\u6cd5\u5957\u7b97\u6cd5\u7684\u6570\u7ec4\u5957\u7528\u5f88\u9ebb\u70e6\u7684\u3002\n  \n  AC\u4ee3\u7801\uff1a\n  \n```cpp\n#include <bits/stdc++.h>\nconst int N=1000050;\nconst int _N=1050;\nint n,c=0;\nint a[_N][_N],sum[_N][_N],b[_N][_N];\nbool vis[N];\nint first[N],dext[N<<1],d[N<<1],cnt_edge=0;\nint root[N];\nnamespace Init\n{\n\tinline int check(int i,int j,int mid)\n\t{\n\t\treturn sum[i+mid][j+mid]-sum[i-mid-1][j+mid]-sum[i+mid][j-mid-1]+sum[i-mid-1][j-mid-1];\n\t}\n\tinline void work()\n\t{\n\t\tscanf(\"%d\",&n);\n\t\tfor(int i=0;i<=n;i++) sum[0][i]=sum[i][0]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\twhile(c!=10) c=getchar();\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t{\n\t\t\t\tc=getchar();a[i][j]=(c=='#');//\u524d\u7f00\u548c\n\t\t\t\tsum[i][j]=a[i][j]+sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1];\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tif(a[i][j]) a[i][j]=0;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint l=0,r=std::min(std::min(i-1,j-1),std::min(n-i,n-j)),ans=0;//r\u63a7\u5236\u8303\u56f4\n\t\t\t\t\twhile(l<=r)//\u4e8c\u5206\u7b54\u6848\n\t\t\t\t\t{\n\t\t\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\t\t\tif(check(i,j,mid)) r=mid-1;\n\t\t\t\t\t\telse ans=mid,l=mid+1;\n\t\t\t\t\t}\n\t\t\t\t\ta[i][j]=ans<<1|1;\n\t\t\t\t}\n\t}\n}\nnamespace Hash//hash+\u94fe\u5f0f\u524d\u5411\u661f\u5224\u91cd\n{\n\tconst int N=5000000;\n\tconst int MOD=1000003;\n\tstruct node{int x,y;}d[N];\n\tint first[::N],dext[N],cnt=0;\n\tinline void init()\n\t{\n\t\tmemset(first,0,sizeof(first));\n\t\tdext[0]=0;\n\t}\n\tinline bool add(int x,int y)\n\t{\n\t\tif(x>y) std::swap(x,y);\n\t\tint z=((long long)x*n+y)%MOD;\n\t\tfor(int i=first[z];i;i=dext[i])\n\t\t\tif(d[i].x==x&&d[i].y==d[i].y) return false;\n\t\tdext[++cnt]=first[z],first[z]=cnt,d[cnt]=node{x,y};\n\t\treturn true;\n\t}\n}\nnamespace Graph//\u5efa\u56fe\n{\n\tconst int N=5000000;\n\tint f[::N],vis[::N],max[::N],maxr[::N],num[::N],cnt=0;\n\tint first[::N],dext[N<<1],d[N<<1],cnt_edge=0;\n\tinline void init(int n)\n\t{\n\t\tfor(int i=1;i<=n;i++) f[i]=i;\n\t}\n\tinline int find(int x)\n\t{\n\t\tif(f[x]==x) return x;\n\t\treturn f[x]=find(f[x]);\n\t}\n\tinline void unity(int x,int y){f[find(x)]=f[find(y)];}\n\tinline void add(int x,int y)\n\t{\n\t\tdext[++cnt_edge]=first[x],first[x]=cnt_edge,d[cnt_edge]=y;\n\t}\n\tinline void work()\n\t{\n\t\t//\u5e76\u67e5\u96c6\u7f29\u70b9\n\t\tinit(n*n);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tif(a[i][j])\n\t\t\t\t{\n\t\t\t\t\tint x=(i-1)*n+j;//\u4e0d\u52a0j-1\u662f\u8981\u628a0\u7a7a\u51fa\u6765\uff0cvis\u4e2d\u75280\u5224\u662f\u5426\u5df2\u8bbf\u95ee\uff0c\u5728\u94fe\u5f0f\u524d\u5411\u661f\u4e2d\u75280\u5224\u7ed3\u675f\n\t\t\t\t\tif(i!=1&&a[i-1][j]==a[i][j])\n\t\t\t\t\t{\n\t\t\t\t\t\tint y=(i-2)*n+j;\n\t\t\t\t\t\tunity(x,y);\n\t\t\t\t\t}\n\t\t\t\t\tif(j!=1&&a[i][j-1]==a[i][j])\n\t\t\t\t\t{\n\t\t\t\t\t\tint y=(i-1)*n+j-1;\n\t\t\t\t\t\tunity(x,y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\tmemset(vis,false,sizeof(vis));\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tif(a[i][j])\n\t\t\t\t{\n\t\t\t\t\tint x=(i-1)*n+j;\n\t\t\t\t\tb[i][j]=vis[find(x)]?vis[f[x]]:(num[++cnt]=a[i][j],vis[f[x]]=cnt);\n\t\t\t\t}\n\t\t\t\telse b[i][j]=0;\n\t\tHash::init();\n\t\tinit(cnt);\n\t\t//\u8fd9\u91cc\u7684add\u8fde\u8fb9\uff0c\u518d\u6b21\u4f7f\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u8054\u901a\u5757\uff08\u80fd\u8054\u901a\u5c31\u884c\uff0c\u6570\u5b57\u53ef\u4ee5\u4e0d\u540c\uff0c\u7528\u6765\u5224\u65ad\u65e0\u6cd5\u5230\u8fbe\uff08\u8f93\u51fa\u4e3a0\uff09\u7684\u60c5\u51b5\uff09\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tif(a[i][j])\n\t\t\t\t{\n\t\t\t\t\tif(i!=1&&b[i-1][j]&&b[i-1][j]!=b[i][j])\n\t\t\t\t\t\tif(Hash::add(b[i][j],b[i-1][j]))\n\t\t\t\t\t\t\tadd(b[i][j],b[i-1][j]),add(b[i-1][j],b[i][j]),unity(b[i][j],b[i-1][j]);\n\t\t\t\t\tif(j!=1&&b[i][j-1]&&b[i][j-1]!=b[i][j])\n\t\t\t\t\t\tif(Hash::add(b[i][j],b[i][j-1]))\n\t\t\t\t\t\t\tadd(b[i][j],b[i][j-1]),add(b[i][j-1],b[i][j]),unity(b[i][j],b[i][j-1]);\n\t\t\t\t}\n\t\tn=cnt;cnt=0;\n\t\tfor(int i=1;i<=n;i++) cnt=std::max(cnt,f[i]);\n\t\tfor(int i=1;i<=n;i++) max[i]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(max[f[i]]<num[i])\n\t\t\t{\n\t\t\t\tmax[f[i]]=num[i];\n\t\t\t\tmaxr[f[i]]=i;//\u627e\u5230\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u4e2d\u6700\u5927\u7684\uff0c\u4e3abfs\u5efa\u6811\u505a\u51c6\u5907\n\t\t\t}\n\t}\n}\nnamespace Tree\n{\n\t#define lch (id<<1)\n\t#define rch (id<<1|1)\n\t#define tx term.x\n\t#define ty term.y\n\t#define tp term.pre\n\tstruct node\n\t{\n\t\tint x,y,pre;//pre\u8bb0\u5f55\u7531\u54ea\u4e2a\u70b9\u6269\u5c55\u6765\u7684\uff0c\u65b9\u4fbf\u8fde\u8fb9\n\t\tbool operator>(const node& b)const{return y>b.y;}\n\t}h[N];\n\tint hsize=0;//\u4e8c\u53c9\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\n\tinline void insert(node val)\n\t{\n\t    h[++hsize]=val;\n\t    int id=hsize;\n\t    while(id)\n\t    {\n\t        if(lch==hsize&&h[lch]>h[id]) std::swap(h[lch],h[id]);\n\t        else if(lch<hsize&&(h[lch]>h[id]||h[rch]>h[id]))\n\t        {\n\t            if(h[lch]>h[rch]) std::swap(h[lch],h[id]);\n\t            else std::swap(h[rch],h[id]);\n\t        }\n\t        id>>=1;\n\t    }\n\t}\n\tinline node del()\n\t{\n\t    node ans=h[1];\n\t    std::swap(h[1],h[hsize--]);\n\t    int id=1;\n\t    while(lch<=hsize)\n\t    {\n\t        if(lch==hsize&&h[lch]>h[id]) std::swap(h[lch],h[id]),id=lch;\n\t        else if(lch<hsize&&(h[lch]>h[id]||h[rch]>h[id]))\n\t        {\n\t            if(h[lch]>h[rch]) std::swap(h[lch],h[id]),id=lch;\n\t            else std::swap(h[rch],h[id]),id=rch;\n\t        }\n\t        else break;\n\t    }\n\t    return ans;\n\t}\n\t//\u6811\u7684\u8fde\u8fb9\n\tinline void add(int x,int y)\n\t{\n\t\tdext[++cnt_edge]=first[x],first[x]=cnt_edge,d[cnt_edge]=y;\n\t}\n\tinline void bfs(int x)\n\t{\n\t\thsize=0;\n\t\troot[x]=Graph::maxr[x];\n\t\tinsert(node{Graph::maxr[x],Graph::max[x],0});\n\t\tvis[Graph::maxr[x]]=true;\n\t\twhile(hsize)\n\t\t{\n\t\t\tnode term;\n\t\t\tterm=del();\n\t\t\tif(tp) add(tx,tp),add(tp,tx);\n\t\t\tfor(int i=Graph::first[tx];i;i=Graph::dext[i])\n\t\t\t{\n\t\t\t\tint v=Graph::d[i];\n\t\t\t\tif(vis[v]) continue;\n\t\t\t\tvis[v]=true;\n\t\t\t\tinsert(node{v,Graph::num[v],tx});\n\t\t\t}\n\t\t}\n\t}\n\tinline void work()\n\t{\n\t\tmemset(first,0,sizeof(first));\n\t\tmemset(vis,false,sizeof(vis));\n\t\tdext[0]=0;\n\t\tfor(int i=1;i<=Graph::cnt;i++) bfs(i);\n\t}\n}\nnamespace Final//\u7ec8\u4e8e\u8981\u7ed3\u675f\u4e86qwq\n{\n\tconst int INF=1<<30;\n\tint wson[N],deep[N],size[N],f[N],top[N],r[N],rr[N],cnt=0;\n\tint st[N][20],len[N];//st\u8868\n\tint q,r1,c1,r2,c2;\n\tinline int query(int l,int r)\n\t{\n\t    int k=len[r-l+1];\n\t    return std::min(st[l][k],st[r-(1<<k)+1][k]);\n\t}\n\tinline void dfs(int x,int fa,int dep)\n\t{\n\t    deep[x]=dep,f[x]=fa,size[x]=1;\n\t    for(int i=first[x];i;i=dext[i])\n\t        if(d[i]!=fa)\n\t        {\n\t            dfs(d[i],x,dep+1);\n\t            size[x]+=size[d[i]];\n\t            if(size[d[i]]>size[wson[x]])\n\t                wson[x]=d[i];\n\t        }\n\t}\n\tinline void dfs2(int x,int pre)\n\t{\n\t    top[x]=pre,r[x]=++cnt,rr[cnt]=x;\n\t    if(wson[x]) dfs2(wson[x],pre);\n\t    for(int i=first[x];i;i=dext[i])\n\t        if(d[i]!=f[x]&&d[i]!=wson[x])\n\t            dfs2(d[i],d[i]);\n\t}\n\t//\u6811\u94fe\u5256\u5206\n\tinline int seek(int x,int y)\n\t{\n\t\t//x==0\u6216y==0\u8868\u793a\u5176\u4e2d\u4e00\u4e2a\u70b9\u662f\u969c\u788d\u7269\uff0cf[x]\u4e0d\u540c\u8868\u793a\u4e0d\u518d\u4e00\u4e2a\u8054\u901a\u5757\n\t    if(x==0||y==0||Graph::f[x]!=Graph::f[y]) return 0;\n\t    int t1=top[x],t2=top[y],ans=INF;\n\t    while(t1!=t2)\n\t    {\n\t        if(deep[t1]<deep[t2])\n\t            std::swap(t1,t2),std::swap(x,y);\n\t        ans=std::min(ans,query(r[t1],r[x]));\n\t        x=f[t1],t1=top[x];\n\t    }\n\t    if(deep[x]>deep[y]) std::swap(x,y);\n\t    ans=std::min(ans,query(r[x],r[y]));\n\t    return ans;\n\t}\n\tinline void work()\n\t{\n\t\t//\u6811\u94fe\u5256\u5206\u9884\u5904\u7406\n\t\tmemset(wson,0,sizeof(wson));\n\t\tsize[0]=0;\n\t\tfor(int i=1;i<=Graph::cnt;i++)\n\t\t{\n\t\t\tdfs(root[i],root[i],1);\n\t\t\tdfs2(root[i],root[i]);\n\t\t}\n\t\t//st\u8868\u9884\u5904\u7406\n\t    for(int i=1;i<=cnt;i++) st[i][0]=Graph::num[rr[i]];\n\t    for(int j=1;1<<j<=cnt;j++)\n\t        for(int i=1;i+(1<<j)-1<=cnt;i++)\n\t            st[i][j]=std::min(st[i][j-1],st[i+(1<<j-1)][j-1]);\n\t    len[1]=0;\n\t    for(int i=2;i<=cnt;i++) len[i]=len[i-1]+((i&-i)==i);\n\t    //\u771f\u6b63\u7684\u56de\u7b54\u95ee\u9898\u521a\u521a\u5f00\u59cb\uff0c\u524d\u9762\u90fd\u662f\u9884\u5904\u7406\n\t    scanf(\"%d\",&q);\n\t\tfor(int i=1;i<=q;i++)\n\t\t{\n\t\t\tscanf(\"%d%d%d%d\",&r1,&c1,&r2,&c2);\n\t\t\tprintf(\"%d\\n\",seek(b[r1][c1],b[r2][c2]));\n\t\t}\n\t}\n}\nint main()\n{\n\tInit::work();\n\tGraph::work();\n\tTree::work();\n\tFinal::work();\n\treturn 0;\n}\n```\n",
        "postTime": 1529997171,
        "uid": 77825,
        "name": "acranker",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3684 [CERC2016]\u673a\u68da\u969c\u788d Hangar Hurdles"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Coros-Trusds/p/15912336.html)\n\n\u9996\u9ed1\u796d\uff0c\u8fd9\u9053\u9898\u601d\u7ef4\u96be\u5ea6\u7d2b\uff0c\u4f46\u662f\u4ee3\u7801\u96be\u5ea6\u9ed1\u3002\u3002\u3002\n\n\u8c03\u4e86\u4e00\u4e0a\u5348\uff0c\u8db3\u8db3\u4e09\u4e2a\u5c0f\u65f6\u3002\n\n# \u9898\u76ee\u5927\u610f\n\n\u4f60\u6b63\u5728\u8bc4\u4f30\u4e00\u4e9b\u5173\u4e8e\u4e00\u4e2a\u5de8\u578b\u98de\u673a\u4ed3\u5e93\u7684\u5efa\u8bbe\u8ba1\u5212\u3002\u98de\u673a\u4ed3\u5e93\u7684\u5730\u9762\u53ef\u4ee5\u8868\u793a\u4e3a $n$ \u884c $n$ \u5217\u7684\u7f51\u683c\u56fe\uff0c\u5176\u4e2d\u6bcf\u4e2a\u683c\u5b50\u8981\u4e48\u662f\u7a7a\u7684\uff0c\u8981\u4e48\u6709\u969c\u788d\u7269\u3002\u884c\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u88ab\u7f16\u53f7\u4e3a $1$ \u5230 $n$\uff0c\u5217\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u88ab\u7f16\u53f7\u4e3a $1$ \u5230 $n$\u3002\n\n\u5b58\u653e\u98de\u673a\u96f6\u4ef6\u7684\u5927\u578b\u96c6\u88c5\u7bb1\u80fd\u5728\u98de\u673a\u4ed3\u5e93\u7684\u5730\u9762\u4e0a\u81ea\u7531\u79fb\u52a8\u662f\u5f88\u91cd\u8981\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u96c6\u88c5\u7bb1\u770b\u4f5c\u4e00\u4e2a\u4ee5\u67d0\u4e2a\u683c\u5b50\u4e3a\u4e2d\u5fc3\u7684\u8fb9\u5e73\u884c\u4e8e\u5750\u6807\u8f74\u7684\u6b63\u65b9\u5f62\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5947\u6570 $k$\uff0c\u4e00\u4e2a\u5c3a\u5bf8\u4e3a $k$ \u7684\u96c6\u88c5\u7bb1\u662f\u4e00\u4e2a\u5305\u542b $k$ \u884c $k$ \u5217\u7684\u6b63\u65b9\u5f62\u3002\u4e00\u4e2a\u96c6\u88c5\u7bb1\u7684\u5750\u6807\u4e3a\u5176\u4e2d\u5fc3\u683c\u5b50\u7684\u5750\u6807\u3002\u96c6\u88c5\u7bb1\u53ef\u4ee5\u5411\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52a8\uff0c\u4f46\u4e0d\u80fd\u78b0\u5230\u969c\u788d\u7269\uff0c\u4e14\u4e0d\u80fd\u79fb\u51fa\u4ed3\u5e93\u7684\u8fb9\u754c\u3002\n\n\u7ed9\u5b9a $q$ \u5bf9\u683c\u5b50 $A_k$ \u548c $B_k$\uff0c\u5bf9\u4e8e\u6bcf\u5bf9\u683c\u5b50\uff0c\u8bf7\u627e\u5230\u80fd\u4ece $A_k$ \u79fb\u52a8\u5230 $B_k$ \u7684\u96c6\u88c5\u7bb1\u7684\u6700\u5927\u5c3a\u5bf8\uff0c\u6ce8\u610f\u8fd9\u4e2a\u5c3a\u5bf8\u4e5f\u8981\u662f\u4e00\u4e2a\u5947\u6570\u3002\n\n# \u524d\u7f6e\u77e5\u8bc6\n\n+ $\\rm Kruskal$ \u91cd\u6784\u6811\u3002\n\n\u4ece\u4e0b\u9762\u7684\u4f8b\u5b50\u5165\u624b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/190404v9.png)\n\n-----------\n\u8be5\u4f8b\u6700\u5c0f\u751f\u6210\u6811\u4e3a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/s289duoo.png)\n\n\u6211\u4eec\u6309\u7167 $\\rm Kruskal$ \u7684\u65b9\u5f0f\u5efa\u6811\uff0c\u8bbe\u8981\u8fde\u63a5\u7684\u8fb9\u4e3a $(u,v)$\uff0c\u901a\u8fc7\u5e76\u67e5\u96c6\u53ef\u6c42\u5f97 $u$ \u7684\u7956\u5148\u8282\u70b9\u4e3a $x$\uff0c$v$ \u7684\u7956\u5148\u8282\u70b9\u4e3a $y$\u3002\n\n\u82e5 $x\\neq y$\uff0c\u5219\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 $z$ \u4f5c\u4e3a $x,y$ \u7684\u7236\u4eb2\u6765\u5408\u5e76 $x,y$\uff0c$z$ \u7684\u70b9\u6743\u4e3a\u8fb9 $(x,y)$ \u7684\u957f\u5ea6\u3002\n\n\u6700\u540e\u6211\u4eec\u5efa\u51fa\u6765\u4e86\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5177\u4f53\u957f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3lekyexq.png)\n\n\u8fd9\u68f5\u6811\u62e5\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n+ \u53f6\u5b50\u8282\u70b9\u90fd\u662f\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\u7684\u8282\u70b9\u3002\n\n+ \u751f\u6210\u6811\u4e2d\u6709 $n$ \u4e2a\u8282\u70b9\uff0c\u4f1a\u4ea7\u751f $n-1$ \u4e2a\u542b\u6709\u70b9\u6743\u7684\u8282\u70b9\uff0c\u5171 $n+n-1=2\\cdot n-1$ \u4e2a\u8282\u70b9\u3002\n\n+ \u6309\u6700\u5c0f\u751f\u6210\u6811\u91cd\u6784\u7684\u91cd\u6784\u6811\u662f\u5927\u6839\u5806\uff0c\u6309\u6700\u5927\u751f\u6210\u6811\u91cd\u6784\u7684\u91cd\u6784\u6811\u662f\u5c0f\u6839\u5806\u3002\n\n+ \u6309\u6700\u5c0f\u751f\u6210\u6811\u91cd\u6784\u7684\u91cd\u6784\u6811\u4e2d\u4efb\u610f\u4e24\u70b9 $a,b$ \u7684\u8def\u5f84\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u4e3a\u5b83\u4eec $\\operatorname{LCA}(a,b)$ \u7684\u70b9\u6743\uff0c\u4e5f\u662f $a,b$ \u8def\u5f84\u4e2d\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\uff0c\u6309\u6700\u5927\u751f\u6210\u6811\u91cd\u6784\u7684\u91cd\u6784\u6811\u4e2d\u4efb\u610f\u4e24\u70b9 $a,b$ \u7684\u8def\u5f84\u4e2d\u7684\u6700\u5c0f\u8fb9\u6743\u4e3a\u5b83\u4eec $\\operatorname{LCA}(a,b)$ \u7684\u70b9\u6743\uff0c\u4e5f\u662f $a,b$ \u8def\u5f84\u4e2d\u6700\u5c0f\u8fb9\u6743\u7684\u6700\u5927\u503c\u3002\n\n------------\n\u6a21\u677f\u4ee3\u7801\uff1a\n\n```cpp\nnamespace ex_Kruskal{\n\t// \u6ce8\u610f\u6570\u7ec4\u5f00\u4e24\u500d! \n\t\n\tint nowidx,idx;\n\tinline bool cmp1(Node x,Node y) { // \u6309\u6700\u5c0f\u751f\u6210\u6811\u91cd\u6784\u7684\u91cd\u6784\u6811\n\t\treturn x.w < y.w;\n\t}\n\tinline bool cmp2(Node x,Node y) { // \u6309\u6700\u5927\u751f\u6210\u6811\u91cd\u6784\u7684\u91cd\u6784\u6811\n\t\treturn x.w > y.w;\n\t}\n\tinline void add(int u,int v) {\n\t\tgra[++ idx].v = v,gra[idx].nxt = head[u];\n\t\thead[u] = idx;\n\t}\n\t\n\tinline void Kruskal() {\n\t\tfor (register int i = 1;i <= n * 2 - 1; ++ i) {\n\t\t\tfa[i] = i;\n\t\t}\n\t\tsort (node + 1,node + m + 1,ex_Kruskal::cmp);\n\t\t\n\t\tnowidx = n;\n\t\tfor (register int i = 1;i <= m; ++ i) {\n\t\t\tint x = getf(node[i].u),y = getf(node[i].v);\n\t\t\tif (x != y) {\n\t\t\t\tval[++ nowidx] = node[i].w;//\u5b58\u50a8\u5f53\u524d\u8282\u70b9\u7684\u70b9\u6743\n\t\t\t\tfa[x] = fa[y] = nowidx;\n\t\t\t\t\n\t\t\t\tadd(nowidx,x),add(nowidx,y);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n# \u9898\u76ee\u5206\u6790\n\n\u9996\u5148\u6765\u8003\u8651\u4e00\u4e0b\u601d\u8def\u3002\n\n\u6c42\u51fa\u6bcf\u4e2a\u5750\u6807\u80fd\u653e\u7f6e\u7684\u6700\u5927\u6b63\u65b9\u5f62\u8fb9\u957f\uff0c\u5e76\u4ee4\u5176\u4e3a\u8be5\u4e2a\u5750\u6807\u7684\u70b9\u6743\uff0c\u6bcf\u6b21\u8be2\u95ee\u8f6c\u6362\u4e3a\u6c42\u51fa\u4e24\u70b9\u8def\u5f84\u4e0a\u6700\u5c0f\u70b9\u6743\u7684\u6700\u5927\u503c\uff0c\u6ce8\u610f\u5230\u201c\u6700\u5c0f/\u6700\u5927\u201d\uff0c\u8003\u8651 $\\rm Kruskal$ \u91cd\u6784\u6811\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5750\u6807\uff0c\u90fd\u5bf9\u5b83\u76f8\u90bb\u7684\u5750\u6807\u8fde\u8fb9\uff0c\u4f46\u662f\u76f4\u63a5\u8fde\u8fb9\u7a7a\u95f4\u7206\u70b8\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5750\u6807\uff0c\u70b9\u6743\u76f8\u540c\u4e14\u76f8\u90bb\u7684\u7f29\u4e3a\u4e00\u4e2a\u70b9\u3002\u518d\u8fde\u8fb9\u5373\u53ef\u3002\u6211\u4eec\u8fde\u51fa\u6765\u4e86\u4e00\u68f5\u6811\uff08**\u53ef\u80fd\u662f\u68ee\u6797\uff01\uff01\uff01\u56e0\u4e3a\u5982\u679c\u5468\u56f4\u662f\u969c\u788d\u7269\u7684\u8bdd\u4e0d\u4f1a\u8fde\u8fb9**\uff09\uff0c\u91cd\u6784\u6811\u5373\u53ef\u3002\n\n------\n\u600e\u4e48\u6c42\u6bcf\u4e2a\u5750\u6807\u80fd\u653e\u7f6e\u7684\u6700\u5927\u6b63\u65b9\u5f62\u8fb9\u957f\u5462\uff1f\u6211\u4eec\u5148 $\\mathcal{O(n^2)}$ \u6c42\u51fa\u6bcf\u4e2a\u77e9\u9635\u7684\u969c\u788d\u7269\u6570\u91cf\u3002\u5982\u679c\u4e00\u4e2a\u5750\u6807\u4e0d\u662f\u969c\u788d\u7269\uff0c\u90a3\u4e48\u4e8c\u5206\u4ece\u6b63\u65b9\u5f62\u4e2d\u5fc3\u70b9\u5230\u6b63\u65b9\u5f62\u8fb9\u754c\u7684\u8ddd\u79bb\uff0c\u56e0\u4e3a\u662f\u5947\u6570\u8fd9\u6837\u597d\u7b97\uff0c\u518d\u770b\u770b\u8fd9\u4e2a\u6b63\u65b9\u5f62\u5185\u6709\u6ca1\u6709\u969c\u788d\u7269\u5c31 $\\mathbf{ok}$ \u4e86\u3002\n\n# \u4ee3\u7801\n\n```cpp\n//2022/2/18\n//2022/2/19\n#define _CRT_SECURE_NO_WARNINGS\n#include <iostream>\n#include <cstdio>\n#include <climits>//need \"INT_MAX\",\"INT_MIN\"\n#include <cstring>//need \"memset\"\n#include <algorithm>\n#include <utility>\n#include <queue>\n#define enter() putchar(10)\n#define debug(c,que) cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) cout << arr[i] << w;\n#define speed_up() cin.tie(0),cout.tie(0)\n#define mst(a,k) memset(a,k,sizeof(a))\n#define Abs(x) ((x) > 0 ? (x) : (-x))\nconst int mod = 1e9 + 7;\ninline int MOD(int x) {\n\twhile (x < 0) x += mod;\n\twhile (x >= mod) x -= mod;\n\treturn x;\n}\nnamespace Newstd {\n\tchar buf[1 << 21],*p1 = buf,*p2 = buf;\n\tinline int getc() {\n\t\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1 << 21,stdin),p1 == p2) ? EOF : *p1 ++;\n\t}\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getc();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\nusing namespace std;\ntypedef pair<int,int> PII;\n\nconst short dx[] = {0,0,-1,1};\nconst short dy[] = {1,-1,0,0};\nconst int INF = 0x3f3f3f3f;\nconst int ma = 1005;\nint fa[ma * ma],dep[ma * ma],fath[ma * ma],du[ma * ma],head[ma * ma],val[ma * ma],sum[ma][ma],maxsiz[ma][ma],bel[ma][ma],f[ma * ma][21];// \u6bcf\u4e2a\u70b9\u7684\u6700\u5927\u77e9\u5f62\nbool vis[ma][ma];\nchar mp[ma][ma];\nint n,m,cnt,idx,num,nowidx;\nstruct Node {\n\tint u,v,w;\n} node[(ma * ma) << 1];\nstruct Gragh {\n\tint v,nxt;\n} gra[(ma * ma) << 1];\ninline bool check(int i,int j,int len) {\n\tif (i - len < 1 || i + len > n || j - len < 1 || j + len > n) return false;\n\tif (sum[i + len][j + len] - sum[i - len - 1][j + len] - sum[i + len][j - len - 1] + sum[i - len - 1][j - len - 1] == 0){\n\t\treturn true;\n\t}\n\treturn false;\n}\ninline int getsiz(int i,int j) {\n\tint l = 0,r = n / 2,ans;\n\twhile (l <= r) {\n\t\tint mid = l + r >> 1;// \u4e8c\u5206\u77e9\u9635\u4e2d\u5fc3\u70b9\u5230\u8fb9\u754c\u7684\u8ddd\u79bb\n\t\tif (check(i,j,mid)) {\n\t\t\tl = mid + 1;\n\t\t\tans = mid;\n\t\t} else {\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\treturn ans * 2 + 1;\n}\ninline void bfs(int i,int j,int belong) {\n\tqueue<PII>q;\n\tvis[i][j] = true,bel[i][j] = belong;\n\tq.push({i,j});\n\twhile (!q.empty()) {\n\t\tPII u = q.front();q.pop();\n\t\tint x = u.first,y = u.second;\n\t\tfor (register int k = 0;k < 4; ++ k) {\n\t\t\tint nx = x + dx[k],ny = y + dy[k];\n\t\t\tif (nx >= 1 && ny >= 1 && nx <= n && ny <= n && maxsiz[nx][ny] == maxsiz[x][y] && vis[nx][ny] == false) {\n\t\t\t\tvis[nx][ny] = true,bel[nx][ny] = belong;\n\t\t\t\tq.push({nx,ny});\n\t\t\t}\n\t\t}\n\t}\n}\ninline int getf(int x) {\n\treturn fa[x] == x ? x : fa[x] = getf(fa[x]);\n}\ninline void merge(int x,int y) {\n\tint f1 = getf(x),f2 = getf(y);\n\tif (f1 != f2) fa[f1] = f2;\n}\ninline void ADD(int u,int v,int w) {\n\tnode[++ idx].u = u,node[idx].v = v,node[idx].w = w;\n}\ninline void add(int u,int v) {\n\tgra[++ num].v = v,gra[num].nxt = head[u],head[u] = num;\n}\nnamespace ex_Kruskal {\n\tinline bool cmp(Node x,Node y) {\n\t\treturn x.w > y.w;\n\t}\n\tinline int getfath(int x) {\n\t\treturn fath[x] == x ? x : fath[x] = getfath(fath[x]);\n\t}\n\tinline void Kruskal() {\n\t\tnowidx = cnt;\n\t\tfor (register int i = 1;i <= n * n; ++ i) {\n\t\t\tfath[i] = i;\n\t\t}\n\t\tfor (register int i = 1;i <= idx; ++ i) {\n\t\t\tint x = getfath(node[i].u),y = getfath(node[i].v);\n\t\t\tif (x != y) {\n\t\t\t\tval[++ nowidx] = node[i].w;\n\t\t\t\tdu[x] ++,du[y] ++;\n\t\t\t\tfath[x] = fath[y] = nowidx;\n\t\t\t\tadd(nowidx,x),add(nowidx,y);\n\t\t\t}\n\t\t}\n\t}\n}\ninline void dfs(int now,int dad,int depth) {\n\tdep[now] = depth,f[now][0] = dad;\n\tfor (register int i = 1;i <= 20; ++ i) {\n\t\tf[now][i] = f[f[now][i - 1]][i - 1];\n\t}\n\tfor (register int i = head[now];i;i = gra[i].nxt) {\n\t\tint v = gra[i].v;\n\t\tif (v != dad) {\n\t\t\tdfs(v,now,depth + 1);\n\t\t}\n\t}\n}\ninline int LCA(int x,int y) {\n\tif (dep[x] < dep[y]) swap(x,y);\n\tfor (register int i = 20;i >= 0; -- i) {\n\t\tif (dep[f[x][i]] >= dep[y]) {\n\t\t\tx = f[x][i];\n\t\t}\n\t}\n\tif (x == y) return x;\n\tfor (register int i = 20;i >= 0; -- i) {\n\t\tif (f[x][i] != f[y][i]) {\n\t\t\tx = f[x][i],y = f[y][i];\n\t\t}\n\t}\n\treturn f[x][0];\n}\nint main(void) {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\",\"r\",stdin);\n#endif\n\tmst(val,0x3f);\n\tscanf(\"%d\",&n);\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tscanf(\"%s\",mp[i] + 1);\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= n; ++ j) {\n\t\t\tsum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];\n\t\t\tif (mp[i][j] == '#') sum[i][j] ++;//\u6709\u969c\u788d\u7269\n\t\t}\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= n; ++ j) {\n\t\t\tif (mp[i][j] == '.') {\n\t\t\t\tmaxsiz[i][j] = getsiz(i,j);\n\t\t\t} else {\n\t\t\t\tmaxsiz[i][j] = -1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= n; ++ j) {\n\t\t\tif (vis[i][j] == false && mp[i][j] == '.') {\n\t\t\t\tbfs(i,j,++ cnt);\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = 1;i <= n * n; ++ i) fa[i] = i;\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= n; ++ j) {\n\t\t\tif (mp[i][j] == '.') {\n\t\t\t\tfor (register int k = 0;k < 4; ++ k) {\n\t\t\t\t\tint nx = i + dx[k],ny = j + dy[k];\n\t\t\t\t\tif (nx >= 1 && ny >= 1 && nx <= n && ny <= n && bel[i][j] != bel[nx][ny] && mp[nx][ny] == '.' && getf(bel[i][j]) != getf(bel[nx][ny])) {\n\t\t\t\t\t\tADD(bel[i][j],bel[nx][ny],min(maxsiz[i][j],maxsiz[nx][ny])),ADD(bel[nx][ny],bel[i][j],min(maxsiz[i][j],maxsiz[nx][ny]));\n\t\t\t\t\t\tmerge(bel[i][j],bel[nx][ny]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tsort(node + 1,node + idx + 1,ex_Kruskal::cmp);\n\tex_Kruskal::Kruskal();\n\tfor (register int i = 1;i <= nowidx; ++ i) {\n\t\tif (!du[i]) {\n\t\t\tdfs(i,0,1);\n\t\t}\n\t}\n\tm = read();\n\twhile (m --) {\n\t\tint x1 = read(),y1 = read(),x2 = read(),y2 = read();\n\t\tif (bel[x1][y1] == bel[x2][y2]) {\n\t\t\tprintf(\"%d\\n\",maxsiz[x1][y1]);\n\t\t} else if (ex_Kruskal::getfath(bel[x1][y1]) != ex_Kruskal::getfath(bel[x2][y2])) {\n\t\t\tputs(\"0\");\n\t\t} else {\n\t\t\tint lca = LCA(bel[x1][y1],bel[x2][y2]);\n\t\t\tif (val[lca] == INF) puts(\"0\");\n\t\t\telse printf(\"%d\\n\",val[lca]);\n\t\t}\n\t}\n\n\treturn 0;\n}\n```",
        "postTime": 1645245641,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "P3684 [CERC2016]\u673a\u68da\u969c\u788d Hangar Hurdles"
    },
    {
        "content": "# \u526a\u679d $O(n^3log_2n)$ \u5438\u6c27\u8fc71k\n\n\u9996\u5148\u6211\u4eec\u628a\u6bcf\u4e2a\u969c\u788d\u770b\u62101\uff0c\u6bcf\u4e2a\u7a7a\u4f4d\u770b\u62100\uff0c\u90a3\u4e48\u5982\u679c\u4e00\u4e2a\u77e9\u9635\u7684\u548c\u4e3a0\u90a3\u4e48\u8fd9\u4e2a\u77e9\u9635\u662f\u7a7a\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e00\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u67e5\u8be2\u6bcf\u4e2a\u77e9\u9635\u662f\u5426\u4e3a\u7a7a\u4e86\n\n\u6839\u636e\u9898\u610f\uff0c\u6240\u6c42\u5373\u4e3a\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u53ef\u653e\u7f6e\u96c6\u88c5\u7bb1\u7684\u5927\u5c0f\u7684\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\uff08\u8fd9\u4e2a\u53ef\u4ee5\u9884\u5904\u7406\u7136\u540e\u5efa\u6700\u5927\u751f\u6210\u6811\uff0c\u4f46\u662f\u6211\u50bb\u4e86\uff09\uff0c\u4e00\u770b\u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u4e8c\u5206\u7684\u4e1c\u897f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848\uff0c\u7136\u540e\u5bf9\u4e8e\u6574\u5f20\u56fe\u8dd1\u4e00\u8fb9BFS\uff0c\u628a\u6240\u6709\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u7684\u70b9\u653e\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u53ef\u4ee5\u7528\u67d3\u8272\u6765\u6807\u8bb0\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u8fde\u901a\u5757\u4e4b\u95f4\uff0c\u90a3\u4e48\u7b54\u6848\u53ef\u4ee5\u88ab\u6ee1\u8db3\uff0c\u7531\u4e8e\u662f\u591a\u7ec4\u6570\u636e\uff0c\u76f4\u63a5**\u6574\u4f53\u4e8c\u5206**\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^3log_2n)$\n\n\u90a3\u4e48\u6240\u8c13\u7684\u526a\u679d\u5728\u54ea\u5462\uff1f\u5c31\u662f\u4e00\u53e5 ``if(v.empty()) return;`` \u7136\u540e\u7531\u4e8e\u6570\u636e\u7684\u539f\u56e0\u6b64\u5904\u5927\u91cf\u526a\u679d\u7136\u540e\u5438\u6c27\u8fc7\u4e86\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\nchar mp[1001][1001];\nint sum[1001][1001] = {0};\nint get(int x1, int y1, int x2, int y2) {\n    x1 --, y1 --;\n    return sum[x2][y2] + sum[x1][y1] - sum[x1][y2] - sum[x2][y1];\n}\nint n;\nint ans[300001];\nstruct qu {\n    int x1, y1, x2, y2, id;\n};\nint vis[1001][1001];\nqueue<int> qx, qy;\nvoid bfs(int x, int y, int r, int c) {\n    qx.push(x), qy.push(y);\n    vis[x][y] = c;\n    while(! qx.empty()) {\n        x = qx.front(), y = qy.front();\n        qx.pop(), qy.pop();\n        if(x + 1 + r <= n && ! vis[x + 1][y] && get(x + 1 - r, y - r, x + 1 + r, y + r) == 0) {\n            vis[x + 1][y] = c;\n            qx.push(x + 1), qy.push(y);\n        }\n        if(x - 1 - r >= 1 && ! vis[x - 1][y] && get(x - 1 - r, y - r, x - 1 + r, y + r) == 0) {\n            vis[x - 1][y] = c;\n            qx.push(x - 1), qy.push(y);\n        }\n        if(y + 1 + r <= n && ! vis[x][y + 1] && get(x - r, y + 1 - r, x + r, y + 1 + r) == 0) {\n            vis[x][y + 1] = c;\n            qx.push(x), qy.push(y + 1);\n        }\n        if(y - 1 - r >= 1 && ! vis[x][y - 1] && get(x - r, y - 1 - r, x + r, y - 1 + r) == 0) {\n            vis[x][y - 1] = c;\n            qx.push(x), qy.push(y - 1);\n        }\n    }\n}\nvoid solve(vector<qu> v, int l, int r) {\n    if(v.empty()) return;\n    if(l == r) {\n        for(int i = v.size() - 1; i >= 0; i --)\n            ans[v[i].id] = max(l * 2 - 1, 0);\n        return;\n    }\n    int mid = (l + r) >> 1;\n    memset(vis, 0, sizeof(vis));\n    for(int i = 1; i <= n; i ++)\n        for(int j = 1; j <= n; j ++)\n            if(! vis[i][j] && i - mid >= 1 && i + mid <= n && j - mid >= 1 && j - mid <= n && get(i - mid, j - mid, i + mid, j + mid) == 0)\n                bfs(i, j, mid, i * n + j);\n    vector<qu> tl, tr;\n    for(int i = v.size() - 1; i >= 0; i --) {\n        if(vis[v[i].x1][v[i].y1] != 0 && vis[v[i].x1][v[i].y1] == vis[v[i].x2][v[i].y2]) tr.push_back(v[i]);\n        else tl.push_back(v[i]);\n    }\n    v.clear();\n    solve(tl, l, mid), solve(tr, mid + 1, r);\n}\nint main() {\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; i ++) scanf(\"%s\", mp[i] + 1);\n    for(int i = 1; i <= n; i ++)\n        for(int j = 1; j <= n; j ++)\n            sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + (mp[i][j] == '#');\n    int q;\n    scanf(\"%d\", &q);\n    vector<qu> v;\n    for(int i = 1; i <= q; i ++) {\n        qu p;\n        scanf(\"%d%d%d%d\", &p.x1, &p.y1, &p.x2, &p.y2);\n        p.id = i;\n        v.push_back(p);\n    }\n    solve(v, 0, (n + 1) / 2);\n    for(int i = 1; i <= q; i ++) printf(\"%d\\n\", ans[i]);\n    fclose(stdin);\n    fclose(stdout);\n    return 0;\n}\n```",
        "postTime": 1551519056,
        "uid": 70310,
        "name": "wuzhaoxin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3684 \u3010[CERC2016]\u673a\u68da\u969c\u788d Hangar Hurdles\u3011"
    },
    {
        "content": "**solution**\n\n\u5982\u679c\u6211\u4eec\u6c42\u51fa\u4e86\u6bcf\u4e2a\u70b9\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u96c6\u88c5\u7bb1\u5927\u5c0f $d$\uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u672c\u9898\u8981\u6c42\u7684\u5c31\u662f\u6240\u6709\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u4e0a\u8fb9\u7684\u6743\u503c\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u5bb9\u6613\u60f3\u5230 $\\text{Kruskal}$ \u91cd\u6784\u6811\uff0c\u5c06\u6bcf\u4e2a\u70b9\u4e0e\u56db\u5468\u8fde\u8fb9\uff0c\u7136\u540e\u5efa\u6811\uff0c\u8dd1\u500d\u589e\u6c42 $\\text{LCA}$ \u70b9\u6743\u5373\u53ef\u3002\n\n$d$ \u53ef\u4ee5\u4e8c\u5206\u52a0\u4e8c\u7ef4\u524d\u7f00\u548c\u6c42\uff0c\u53ef\u4ee5\u5728 $O(n^2\\log n)$ \u5b8c\u6210\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u70b9\u90fd\u8fde\u8fb9\u5b9e\u5728\u592a\u591a\u4e86\uff0c\u5b58\u4e0d\u4e0b\u3002\u8003\u8651\u89c2\u5bdf\u6027\u8d28\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5728 $d$ \u76f8\u540c\u7684\u70b9\u4e4b\u95f4\u79fb\u52a8\uff0c\u662f\u4e0d\u4f1a\u5bf9\u6700\u7ec8\u7b54\u6848\u9020\u6210\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u628a\u76f8\u90bb\u7684 $d$ \u76f8\u540c\u7684\u70b9\u5408\u5e76\u8d77\u6765\uff0c\u518d\u8fde\u8fb9\uff0c\u8fd9\u6837\u8fb9\u6570\u5c31\u5c11\u7684\u591a\u3002\u5408\u5e76\u7684\u8fc7\u7a0b\u53ef\u4ee5\u91c7\u7528 $\\text{BFS}$ \u5728 $O(n^2)$ \u5185\u5b8c\u6210\u3002\u5173\u4e8e\u53bb\u91cd\uff0c\u53ef\u4ee5\u4f7f\u7528 $\\text{unordered\\_map}$\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662f\u5e38\u6570\u7ea7\u522b\u7684\u3002\n\n\u5728\u5b9e\u73b0\u7ec6\u8282\u65b9\u9762\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u7531\u4e8e\u969c\u788d\u7684\u5b58\u5728\uff0c\u6240\u4ee5\u53ef\u80fd\u6700\u540e\u5f97\u5230\u7684\u662f\u68ee\u6797\u800c\u4e0d\u662f\u4e00\u68f5\u6811\u3002\u8003\u8651\u5230\u6811\u4e0e\u6811\u4e4b\u95f4\u662f\u4e0d\u8fde\u901a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u8fde\u5411\u8fd9\u4e9b\u6811\uff0c\u5e76\u628a\u70b9\u6743\u8bbe\u4e3a $0$\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6309\u7167\u666e\u901a\u4e00\u68f5\u6811\u7684\u60c5\u51b5\u6765\u505a\u4e86\u3002\n\n\u5728\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5206\u6b65\u8c03\u8bd5\uff0c\u4e5f\u5c31\u662f\u6bcf\u5199\u4e00\u4e2a\u67b6\u6784\u5c31\u6d4b\u8bd5\u4e00\u4e0b\u8fd9\u4e2a\u67b6\u6784\u662f\u4e0d\u662f\u5bf9\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u6700\u540e\u8c03\u8bd5\u7684\u65f6\u5019\u8f7b\u677e\u5f88\u591a\u3002\u4e2a\u4eba\u5199\u5b8c\u52a0\u8c03\u5b8c\u53ea\u7528\u4e86 1 \u4e2a\u5c0f\u65f6\u5de6\u53f3\uff0c\u4e00\u904d\u8fc7\uff0c\u603b\u4e4b\u4e0d\u662f\u5f88\u96be\u5199\uff0c\u4f46\u662f\u7801\u91cf\u786e\u5b9e\u6709\u70b9\u957f\uff0c\u76f8\u4fe1\u5404\u4f4d\u53ef\u4ee5\u6709\u8010\u5fc3\u5b8c\u6210\u8fd9\u9053\u9898\uff0c\u662f\u4e00\u9053\u4e0d\u9519\u7684\u601d\u7ef4\u96be\u5ea6\u9002\u4e2d\u7684\uff0c\u7ec3\u4e60\u7801\u529b\u7684\u9898\u76ee\u3002\n\n**code**\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<unordered_map>\n#include<queue>\nusing namespace std;\nstruct Hash\n{\n\tsize_t operator()(pair<int,int> a)const\n\t{\n\t\treturn ((long long)a.first<<32)|a.second; \n\t}\n}; \nunordered_map<pair<int,int>,bool,Hash> ma;\nstruct node1{int x,y,z;} g[2000010];\nint n,a[1010][1010],d[1010][1010],cnt,id[1010][1010];\nint val[2000010],fa[2000010],f[2000010][21];\nint fx[5][3],tot1,tot;\nstruct node{int last,en,next;} e[10000010];\nchar ch[1010][1010];\nbool bz[1010][1010],ru[2000010];\nint dep[2000010];\nint q,x1,y1,x2,y2;\nbool check(int d,int x,int y)\n{\n    int x1=x-d,y1=y-d,x2=x+d,y2=y+d;\n    if (x1<=0||y1<=0||x2>n||y2>n) return false;\n    if (a[x2][y2]-a[x1-1][y2]-a[x2][y1-1]+a[x1-1][y1-1]>0) return false;\n    return true;\n}\nvoid bfs(int s,int t)\n{\n    queue<pair<int,int> > q;\n    bz[s][t]=true;\n    q.push(make_pair(s,t));\n    id[s][t]=++cnt;\n    while (!q.empty())\n    {\n        int x=q.front().first,y=q.front().second;q.pop();\n        for (int k=1;k<=4;k++)\n        {\n            int xx=fx[k][1]+x,yy=fx[k][2]+y;\n            if (xx>0&&xx<=n&&yy>0&&yy<=n&&ch[xx][yy]=='.'&&!bz[xx][yy]&&d[xx][yy]==d[x][y])\n            {\n                bz[xx][yy]=true;\n                q.push(make_pair(xx,yy));\n                id[xx][yy]=cnt;\n            }\n        }\n    }\n}\nvoid insert(int x,int y,int z)\n{\n    g[++tot1].x=x;g[tot1].y=y;g[tot1].z=z;\n}\nbool cmp(node1 x,node1 y){return x.z>y.z;}\nint get(int x){return fa[x]==x?x:fa[x]=get(fa[x]);}\nvoid add(int x,int y)\n{\n    e[++tot].en=y;\n    e[tot].next=e[x].last;\n    e[x].last=tot;\n}\nvoid dfs(int x,int fa)\n{\n    dep[x]=dep[fa]+1;f[x][0]=fa;\n    for (int i=e[x].last;i;i=e[i].next)\n        if (e[i].en!=fa) dfs(e[i].en,x);\n}\nint lca(int x,int y)\n{\n    if (dep[x]<dep[y]) swap(x,y);\n    for (int i=20;i>=0;i--)\n        if (dep[f[x][i]]>=dep[y]) x=f[x][i];\n    if (x==y) return x;\n    for (int i=20;i>=0;i--)\n        if (f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];\n    return f[x][0];\n}\nint main()\n{\n    fx[1][1]=fx[3][2]=-1;fx[2][1]=fx[4][2]=1;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",ch[i]+1);\n        for (int j=1;j<=n;j++)\n            a[i][j]=a[i-1][j]+a[i][j-1]-a[i-1][j-1]+(ch[i][j]=='#');\n    }\n    for (int i=1;i<=n;i++)\n        for (int j=1;j<=n;j++)\n        if (ch[i][j]=='.')\n        {\n            int l=0,r=n/2,mid,ret=0;\n            while (l<=r)\n            {\n                mid=(l+r)>>1;\n                if (check(mid,i,j)) l=mid+1,ret=mid;\n                else r=mid-1;\n            }\n            d[i][j]=ret*2+1;\n        }\n    for (int i=1;i<=n;i++)\n        for (int j=1;j<=n;j++)\n            if (ch[i][j]=='.'&&!bz[i][j]) bfs(i,j);\n    for (int i=1;i<=n;i++)\n        for (int j=1;j<=n;j++)\n            if (ch[i][j]=='.')\n            {\n                for (int k=1;k<=4;k++)\n                {\n                    int xx=fx[k][1]+i,yy=fx[k][2]+j;\n                    if (xx>0&&xx<=n&&yy>0&&yy<=n&&ch[xx][yy]=='.'&&id[xx][yy]!=id[i][j]&&!ma[make_pair(id[xx][yy],id[i][j])])\n                    {\n                        ma[make_pair(id[xx][yy],id[i][j])]=true;\n                        ma[make_pair(id[i][j],id[xx][yy])]=true;\n                        insert(id[i][j],id[xx][yy],min(d[i][j],d[xx][yy]));\n                        insert(id[xx][yy],id[i][j],min(d[i][j],d[xx][yy]));\n                    }\n                }\n            }\n    sort(g+1,g+tot1+1,cmp);\n    for (int i=1;i<=2*cnt;i++) fa[i]=i;\n    for (int i=1;i<=tot1;i++)\n    {\n        int u=get(g[i].x),v=get(g[i].y);\n        if (u!=v)\n        {\n            ++cnt;ru[u]=true;ru[v]=true;\n            fa[u]=fa[v]=cnt;val[cnt]=g[i].z;\n            add(cnt,u);add(cnt,v);\n        }\n    }\n    int bj=0;\n    for (int i=1;i<=cnt;i++)\n        if (!ru[i]) bj++;\n    if (bj>1)\n    {\n        for (int i=1;i<=cnt;i++)\n            if (!ru[i]) add(cnt+1,i);\n        val[++cnt]=0;\n    }\n    dfs(cnt,0);\n    for (int j=1;j<=20;j++)\n        for (int i=1;i<=cnt;i++)\n            f[i][j]=f[f[i][j-1]][j-1];\n    scanf(\"%d\",&q);\n    for (int i=1;i<=q;i++)\n    {\n        scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n        if (id[x1][y1]==id[x2][y2]) printf(\"%d\\n\",d[x1][y1]);\n        else printf(\"%d\\n\",val[lca(id[x1][y1],id[x2][y2])]);\n    }\n    return 0;\n}\n```",
        "postTime": 1645622447,
        "uid": 157857,
        "name": "ImmortalWatcher",
        "ccfLevel": 6,
        "title": "P3684 [CERC2016]\u673a\u68da\u969c\u788d Hangar Hurdles"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3684)\n\n---\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a$\\text{Kruskal}$\u91cd\u6784\u6811\n\n\u7801\u519c\u9898\uff0c\u601d\u7ef4\u96be\u5ea6\u4e0d\u5927\uff0c\u5c31\u662f\u7801\u3002\n\n\u672c\u4f53\u57fa\u672c\u662f\u88f8\u7684 $\\text{Kruskal}$\u91cd\u6784\u6811\u677f\u9898\uff0c\u4f46\u5176\u5b9e\u6253\u88f8\u677f\u5b50\u4f1a\u8d85\u65f6\u3002\n\n\u8fd9\u9053\u9898\u662f\u4e2a\u4e8c\u7ef4\u7684\u56fe\uff0c\u53ef\u4ee5\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52a8\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\u8fd9\u6837\u5efa\u8fb9\uff1a\n\n```cpp\n\tint cnt = 0;\n\tfor (int i = 1 ; i <= n ; ++ i) {\n\t\tfor (int j = 1 ; j <= n ; ++ j) {\n\t\t\tif (s[i][j] == '#') continue;\n\t\t\tfor (int k = 1 ; k <= 4 ; ++ k) {\n\t\t\t\tint xx = i + movex[k];\n\t\t\t\tint yy = j + movey[k];\n\t\t\t\tif (xx < 1 || xx > n || yy < 1 || yy > n || s[xx][yy] == '#') continue;\n\t\t\t\tp[++ cnt] = node(h[i][j],h[xx][yy],Min(maxx[i][j] * 2 + 1,maxx[xx][yy] * 2 + 1));\n\t\t\t}\n\t\t}\n\t}\n```\n\n\u4f46\u8fd9\u6837\u662f\u5efa\u4e86\u5f88\u591a\u8fb9\u7684\uff0c\u6bd5\u7adf\u4e0a\u4e0b\u5de6\u53f3\u90fd\u5efa\u4e86\u8fb9\u561b\u3002\n\n\u8fd9\u6837\u8dd1 $\\text{LCA}$ \u4f1a\u8017\u6781\u957f\u7684\u65f6\u95f4\uff0c\u81ea\u7136\u662f\u4e0d\u884c\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u8fd9\u4e9b\u70b9\uff0c\u5982\u679c\u5b83\u4eec\u80fd\u653e\u7684\u6700\u5927\u7684\u8d27\u7269\u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u662f\u8054\u901a\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c11\u89c1\u5f88\u591a\u8fb9\u4e86\uff0c\u6211\u7528\u7684\u662f\u5e76\u67e5\u96c6$+bfs$\u7f29\u70b9\u3002\n\n~~\u8bf4\u5230\u5e76\u67e5\u96c6\u7f29\u70b9\u6211\u60f3\u63a8\u8350[\u8fd9\u9053\u6c34\u84dd\u9898](https://www.luogu.com.cn/problem/CF734E)\u3002~~\n\n\u4e4b\u540e\u8f93\u51fa\u7684\u65f6\u5019\u8981\u5224\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u70b9\u662f\u5426\u7f29\u6210\u4e86\u4e00\u4e2a\u70b9\uff0c\u7f29\u6210\u4e00\u4e2a\u70b9\u5c31\u76f4\u63a5\u8f93\u51fa\u3002\n\n```cpp\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntemplate<typename T>void read(T &x) {\n\tx = 0;T f = 1;char ch = getchar();\n\twhile (ch > '9' || ch < '0') {if (ch == '-') f = -1;ch = getchar();}\n\twhile (ch <= '9' && ch >= '0') {x = (x << 3) + (x << 1) + ch - '0';ch = getchar();}\n\tx *= f;\n}\ntemplate<typename T>void print(T x) {\n\tif (x < 0) x = -x,putchar('-');\n\tif (x > 9) print(x / 10);\n\tputchar(x % 10 + '0');\n}\ntemplate<typename T>T Min(T x,T y) {\n\treturn x < y ? x : y;\n}\nconst int maxn = 5000005;\nint nxt[maxn << 1],ver[maxn << 1],head[maxn],tot;\nvoid addEdge(int u,int v) {\n    ver[++ tot] = v;nxt[tot] = head[u];head[u] = tot;\n}\n\nstruct node {\n\tint u,v,w;\n\tnode(){}\n\tnode(int U,int V,int W) {u = U;v = V;w = W;}\n\tbool operator <(node x) const {\n\t\treturn this->w > x.w;\n\t}\n}p[maxn];\n\nint n,m,q,val[maxn],f[maxn],fath[maxn],fa[maxn][20],dep[maxn],lg[maxn],vis[maxn];\n\nint finds(int x) {\n\twhile (x != f[x]) x = f[x] = f[f[x]] = f[f[f[x]]];\n\treturn x;\n}\n\nint findset(int x) {\n\twhile (x != fath[x]) x = fath[x] = fath[fath[x]] = fath[fath[fath[x]]];\n\treturn x;\n}\n\nvoid dfs(int u,int father) {\n\tvis[u] = 1;\n\tfa[u][0] = father;\n\tdep[u] = dep[father] + 1;\n\tfor (int i = 1 ; i <= lg[dep[u]] ; ++ i) fa[u][i] = fa[fa[u][i - 1]][i - 1];\n\tfor (int e = head[u] ; e ; e = nxt[e]) {\n\t\tint v = ver[e];\n\t\tif (v == father) continue;\n\t\tdfs(v,u);\n\t}\n}\n\nint LCA(int x,int y) {\n\tif (dep[x] < dep[y]) swap(x,y);\n\twhile (dep[x] > dep[y]) x = fa[x][lg[dep[x] - dep[y]] - 1];\n\tif (x == y) return x;\n\tfor (int i = lg[dep[x]] ; ~i ; -- i)\n\t\tif (fa[x][i] != fa[y][i])\n\t\t\tx = fa[x][i],y = fa[y][i];\n\treturn fa[x][0];\n}\n\nchar s[1005][1005];\nint a[1005][1005],maxx[1005][1005],h[1005][1005],app[1005][1005];\nint movex[5] = {0,0,0,1,-1};\nint movey[5] = {0,1,-1,0,0};\n\nvoid bfs(int x,int y,int col) {\n\tapp[x][y] = col;\n\tqueue<int> q;\n\tq.push(x * 10000 + y);\n\twhile (!q.empty()) {\n\t\tint u = q.front(),v;\n\t\tq.pop();\n\t\tv = u % 10000;\n\t\tu = u / 10000;\n\t\tfor (int i = 1 ; i <= 4 ; ++ i) {\n\t\t\tint xx = u + movex[i];\n\t\t\tint yy = v + movey[i];\n\t\t\tif (maxx[xx][yy] != maxx[u][v] || app[xx][yy] || xx < 1 || xx > n || yy < 1 || yy > n || s[xx][yy] == '#') continue;\n\t\t\tq.push(xx * 10000 + yy);\n\t\t\tapp[xx][yy] = col;\n\t\t\tfath[h[xx][yy]] = h[x][y];\n\t\t}\n\t}\n}\n\nbool check(int x,int y,int z) {\n\tif (x + z > n || y + z > n || x - z < 1 || y - z < 1) return false;\n\treturn !(a[x + z][y + z] + a[x - z - 1][y - z - 1] - a[x + z][y - z - 1] - a[x - z - 1][y + z]);\n}\n\nint main () {\n\tread(n);\n\tfor (int i = 1 ; i <= n ; ++ i) {\n\t\tscanf(\"%s\",s[i] + 1);\n\t\tfor (int j = 1 ; j <= n ; ++ j) {\n\t\t\ta[i][j] = s[i][j] == '#';\n\t\t}\n\t}\n\tfor (int i = 1 ; i <= n ; ++ i) {\n\t\tfor (int j = 1 ; j <= n ; ++ j) {\n\t\t\ta[i][j] = a[i][j] + a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1];\n\t\t}\n\t}\n\tint tmp = 0;\n\tfor (int i = 1 ; i <= n ; ++ i) {\n\t\tfor (int j = 1 ; j <= n ; ++ j) {\n\t\t\th[i][j] = ++ tmp;\n\t\t\tif (s[i][j] != '#') {\n\t\t\t\tint l = 0,r = Min(Min(i - 1,n - i),Min(j - 1,n - j)),ans;\n\t\t\t\twhile (l < r) {\n\t\t\t\t\tint mid = l + r + 1 >> 1;\n\t\t\t\t\tif (check(i,j,mid)) l = mid;\n\t\t\t\t\telse r = mid - 1;\n\t\t\t\t}\n\t\t\t\tmaxx[i][j] = l * 2 + 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1 ; i < maxn ; ++ i) fath[i] = f[i] = i,lg[i] = lg[i - 1] + ((1 << lg[i - 1]) == i);\n\tint cnt = 0,points = 0;\n\tfor (int i = 1 ; i <= n ; ++ i) {\n\t\tfor (int j = 1 ; j <= n ; ++ j) {\n\t\t\tif (s[i][j] == '#') {\n\t\t\t\tfath[h[i][j]] = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!app[i][j]) {\n\t\t\t\t++ points;\n\t\t\t\tbfs(i,j,points);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1 ; i <= n ; ++ i) {\n\t\tfor (int j = 1 ; j <= n ; ++ j) {\n\t\t\tif (s[i][j] == '#') continue;\n\t\t\tfor (int k = 1 ; k <= 4 ; ++ k) {\n\t\t\t\tint xx = i + movex[k];\n\t\t\t\tint yy = j + movey[k];\n\t\t\t\tif (xx < 1 || xx > n || yy < 1 || yy > n || s[xx][yy] == '#') continue;\n\t\t\t\tif (fath[h[i][j]] != fath[h[xx][yy]]) p[++ cnt] = node(fath[h[i][j]],fath[h[xx][yy]],Min(maxx[i][j],maxx[xx][yy]));\n\t\t\t}\n\t\t}\n\t}\n\tsort(p + 1,p + 1 + cnt);\n\tfor (int i = 1 ; i <= cnt ; ++ i) {\n\t\tint u = p[i].u,v = p[i].v;\n\t\tint x = finds(u),y = finds(v);\n\t\tif (x != y) {\n\t\t\tval[++ tmp] = p[i].w;\n\t\t\taddEdge(tmp,x);\n\t\t\taddEdge(tmp,y);\n\t\t\tf[x] = tmp;f[y] = tmp;\n\t\t}\n\t}\n\tfor (int i = 1 ; i <= n ; ++ i)\n\t\tfor (int j = 1 ; j <= n ; ++ j)\n\t\t\tif (!vis[finds(fath[h[i][j]])] && s[i][j] == '.')\n\t\t\t\tdfs(finds(fath[h[i][j]]),0);\n\tread(q);\n\tint ax,ay,bx,by;\n\twhile (q --) {\n\t\tread(ax);read(ay);read(bx);read(by);\n\t\tif (fath[h[ax][ay]] == fath[h[bx][by]]) print(maxx[ax][ay]),putchar('\\n');\n\t\telse print(val[LCA(fath[h[ax][ay]],fath[h[bx][by]])]),putchar('\\n');\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1598966142,
        "uid": 163516,
        "name": "Strelitzia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3684 \u3010[CERC2016]\u673a\u68da\u969c\u788d Hangar Hurdles\u3011"
    }
]