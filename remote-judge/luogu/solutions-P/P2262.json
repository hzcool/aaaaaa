[
    {
        "content": "\u849f\u84bb\u7b2c\u4e00\u9053\u6a21\u62df\u9898\uff0c\u60f3\u5410\uff0c\u6253\u4e86\u4e00\u5929\u3002\u5751\u70b9\u5f88\u591a\u3002\n\n**\u6700\u5751\u7684\u662f\u6700\u540e\u4e00\u4e2a\u70b9\u6570\u636e\u6709\u95ee\u9898\u3002**\n\n\u627e\u4e86\u534a\u5929\u6570\u636e\u624d\u53d1\u73b0\u3002\n\n# \u8a00\u5f52\u6b63\u4f20\n\n\u9996\u5148\u8bfb\u9898\uff0c\u5f53\u4f60\u770b\u5b8c\u9898\u9762\u540e\uff0c\u4f60\u5e94\u8be5\u70b9\u5f00\u53f3\u8fb9\u7684\u8ba8\u8bba- >\u5b8c\u6574\u9898\u9762\n\n\u7136\u540e\u7ee7\u7eed\u770b \u54b3\u54b3\n\n\u770b\u5b8c\u540e\n\n\u4f60\u8981\u77e5\u9053\u6709\n\n### **\u4e09\u79cd\u7528\u6237\u7c7b\u578b**\n\n1. #### UploadUser \u4e0a\u4f20\u7528\u6237\n2. #### DownloadUser  \u4e0b\u8f7d\u7528\u6237\n3. #### Guest  \u533f\u540d\u7528\u6237\n\n\n### **\u4e09\u79cd\u7528\u6237\u72b6\u6001**\n\n1. #### Upload \u4e0a\u4f20\u4e2d\n2. #### Download \u4e0b\u8f7d\u4e2d\n3. #### Scan \u6d4f\u89c8\u4e2d\n\n### **\u4e09\u79cd\u7528\u6237\u64cd\u4f5c**\n\n1. #### Upload \u4e0a\u4f20\n2. #### Download \u4e0b\u8f7d\n3. #### Scan \u6d4f\u89c8\n\n\u4f60\u8981\u77e5\u9053\n\n\u6240\u6709\u64cd\u4f5c\u90fd\u5fc5\u987b\u5728\u7528\u6237\u5904\u4e8e**Scan**\u7684\u65f6\u5019\u6267\u884c\n\n\u9664\u6b64\u4e4b\u5916\u5f15\u5165\u4e86\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u7684\u6982\u5ff5\u4ee5\u53ca**\u6587\u4ef6(\u5939)\u72b6\u6001**\n\n**\u6587\u4ef6(\u5939)\u72b6\u6001**\u5206\u4e3a\u4e24\u79cd\n\n### **\u4e24\u79cd\u6587\u4ef6(\u5939)\u72b6\u6001**\n\n1. #### Uploading \u4e0a\u4f20\u4e2d\n2. #### Normal \u6b63\u5e38\n\n\u4e0a\u4f20\u4e2d\u7684\u6587\u4ef6\u5939\u53ea\u80fd\u8fdb\u884c**\u6d4f\u89c8**\u64cd\u4f5c\n\n\uff08\u9003 \u9898\u9762\u8bf4\u7684 **cd** \u547d\u4ee4\u5fc5\u987b\u4fdd\u8bc1\u6587\u4ef6\u5939\u662fNormal\u72b6\u6001\uff0c\u96be\u9053\u6253\u5f00\u6587\u4ef6\u5939\u4e0d\u5c5e\u4e8e\u6d4f\u89c8\uff1f\uff1f\uff1f  \u8ff7\n\n\u4f60\u8fd8\u8981\u77e5\u9053 **6 \u4e2a\u6307\u4ee4**\n\n\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u6a21\u62df\u4e86\n\n\u2026\u2026\u2026\u2026\u2026\u2026\n\n\u5927\u6982\u601d\u8def\u5c31\u662f\n\n\u4e09\u4e2a**\u57fa\u7840**\u7ed3\u6784\u4f53 \n\n**1.  User \u5b58\u50a8\u7528\u6237\u4fe1\u606f \u5305\u62ec\u7528\u6237\u7c7b\u578b\u548c\u5f53\u524d\u7528\u6237\u72b6\u6001\uff08\u6211\u662f\u7528\u6570\u5b57\u5b58\u50a8\u7684\uff08\u9003 \u867d\u7136\u6211\u6700\u5f00\u59cb\u7528\u7684\u7ed3\u6784\u4f53\uff09**\n\n**2.  File \u6587\u4ef6\u5355\u4f4d**\n\n**3.  Folder  \u6587\u4ef6\u5939\u5355\u4f4d \u5305\u542b\u6587\u4ef6**\n\n\u4e3a\u4e86\u4fdd\u5b58\u4e00\u4e9b**\u7279\u6b8a\u4fe1\u606f**\uff08\u4f8b\u5982\u4e0b\u8f7d\u548c\u4e0a\u4f20\u6587\u4ef6(\u5939)\uff09\n\n\u5c31\u51fa\u73b0\u4e86\u8fd9\u51e0\u4e2a\u7ed3\u6784\u4f53\n\n**1.  Task \u5b58\u50a8\u4e0b\u8f7d\u548c\u4e0a\u4f20\u4efb\u52a1\u4fe1\u606f**\n\n**2.  RequestFile \u5b58\u50a8\u67e5\u627e\u51fa\u6765\u7684\u6587\u4ef6(\u5939)\u4fe1\u606f**\n\n\u7136\u540e\u5c31\u771f\u7684\u5f00\u59cb\u771f\u7684\u771f\u7684\u771f\u7684\u771f\u7684\u5927\u6a21\u62df\u4e86\n\n\uff08\u9003 \u771f\u7684\u592a\u96be\u6253\u4e86\n\n\uff08\u9003 **\u6e29\u99a8\u63d0\u793a \u4ee3\u7801\u4e0d\u559c\u52ff\u55b7 \u5624\u5624\u5624 \u8c28\u614e\u98df\u7528**\n\n\uff08\u9003 \u8bf4\u4e00\u4e0b\u51e0\u4e2a\u5751\u70b9\n\n1.**\u6d41\u91cf\u4f1a\u6539\u53d8** **\u6d41\u91cf\u4f1a\u6539\u53d8** **\u6d41\u91cf\u4f1a\u6539\u53d8**\n\n\u4e5f\u5c31\u662f\u8bf4\u4f60**\u4e0d\u80fd**\u6839\u636e**\u4e0b\u8f7d\u6216\u8005\u4e0a\u4f20\u65f6\u5019\u7684\u6d41\u91cf**\u6765\u51b3\u5b9a**\u4e0b\u8f7d\u6216\u4e0a\u4f20\u65f6\u95f4**\n\n\u4f60\u9700\u8981\u6bcf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u6765\u5904\u7406\u8fd9\u4e9b\u4efb\u52a1\n\n2.\u5f53\u4e00\u4e2a\u4e0a\u4f20\u6587\u4ef6**\u7ed3\u675f\u4e0a\u4f20\u7684\u65f6\u5019**\uff0c\u4e0d\u80fd\u7acb\u523b\u628a**\u8be5\u6587\u4ef6\u6240\u5c5e\u7684\u6587\u4ef6\u5939\u72b6\u6001**\u7f6e\u4e3a**Normal**\n\n\u56e0\u4e3a\u4e0a\u4f20\u6587\u4ef6\u662f**\u4e0d\u53d7\u6587\u4ef6\u5939\u72b6\u6001\u5f71\u54cd**\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4**\u8fd9\u4e2a\u6587\u4ef6\u4e0a\u4f20\u7ed3\u675f**\u5e76**\u4e0d\u4ee3\u8868**\u7740\u8be5\u6587\u4ef6\u6240\u5c5e\u7684\u6587\u4ef6\u5939\u91cc\u9762**\u6ca1\u6709\u4e0a\u4f20\u7684\u6587\u4ef6**\uff0c\u6240\u4ee5\u9700\u8981**\u904d\u5386\u8be5\u6587\u4ef6\u5939\u7684\u6240\u6709\u6587\u4ef6**\u91cd\u65b0\u5224\u65ad\n\n3.**\u9898\u76ee\u6570\u636e\u6709\u95ee\u9898\uff0c\u8be6\u60c5\u89c1\u8ba8\u8bba**\n\n```cpp\n#include<iostream>\n#include<string>\n#include<stack>\n#include<vector>\n#include<cmath>\n#include<set>\n\nusing namespace std;\n//\u5f53\u524d\u7528\u6237\u603b\u6570\nint nowCount = 0;\n//\u5f53\u524d\u4e0a\u4f20\u548c\u4e0b\u8f7d\u7528\u6237\u603b\u6570\nint nowdd = 0;\n\nstruct Folder;\n\nstruct File {\n    string name;\n    int size;\n    // 0 NULL  1 NORMAL  2 UPLOADING\n    int state;\n    Folder* father;\n    \n    File(string name,int size,Folder* father) {\n        this->name = name;\n        this->size = size;\n        this->father = father;\n        state = 1;\n    }\n};\n\nstruct Folder {\n    vector<File*> files;\n    \n    vector<Folder*> folders;\n    \n    int size = 0;\n    \n    string name;\n    // 0 NULL  1 NORMAL  2 UPLOADING\n    int state;\n    Folder* father;\n    // \u6807\u8bb0\u6839\u76ee\u5f55\n    bool isroot;\n    \n    Folder(string name,Folder* father) {\n        this->name = name;\n        this->father = father;\n        this->isroot = false;\n        state = 1;\n    }\n    \n    Folder(string name,bool isroot) {\n        this->name = name;\n        this->isroot = isroot;\n        state = 1;\n    }\n    \n    void addFile(File* file) {\n        Folder* now = this;\n    \twhile (!now->isroot){\n    \t\tnow->size += file->size;\n            now = now->father;\n        }\n        files.push_back(file);\n    }\n    \n    void addFolder(Folder* folder) {\n        folders.push_back(folder);\n    }\n    \n    void check() {\n    \tbool flag = false;\n    \tfor (auto i = files.begin();i!=files.end();i++){ \n\t\t\tif ((*i)->state!=1){\n    \t\t\tflag = true;\n    \t\t\tbreak;\n\t\t\t}\n\t\t} \n\t\tif (!flag)\n\t\t\tthis->state = 1;\n\t}\n\t\n\tbool checkF() {\n\t\tfor (auto i = folders.begin();i!=folders.end();i++)\n\t\t\tif (!(*i)->checkF())\n\t\t\t\treturn false;\n\t\treturn this->state==1;\n\t}\n};\n\nstruct RequestFile {\n    bool callback;\n    bool isFile;\n    File* file;\n    Folder* folder;\n    RequestFile(File* file) {\n        this->callback = true;\n        this->file = file;\n        isFile = true;\n    }\n    RequestFile(Folder* folder) {\n        this->callback = true;\n        this->folder = folder;\n        isFile = false;\n    }\n    RequestFile(){\n        callback = false;\n    }\n};\n\n//\u6587\u4ef6\u6839\u76ee\u5f55\nFolder* root = new Folder(\"root\",true);\n\nstruct Task;\n\nstruct User {\n    string name;\n    //0 NULL   1 UPLOADUSER   2 DOWNLOADUSER   3 GUEST\n    int status;\n    //0 NULL  1 UPLOAD  2 DOWNLOAD   3 SCAN\n    int state;\n    Folder* position;\n    Task* task;\n    bool istask;\n    User(string name,int status,int state,Folder* position) {\n        this->name = name;\n        this->status = status;\n        this->state = state;\n        this->position = position;\n    \tthis->istask = false;\n    }\n    \n    RequestFile search(string target) {\n        for (auto i = position->files.begin();i!=position->files.end();i++) \n            if ((*i)->name==target)\n                return RequestFile(*i);\n        for (auto i = position->folders.begin();i!=position->folders.end();i++)\n            if ((*i)->name==target)\n                return RequestFile((*i));\n        return RequestFile();\n    }\n};\n\n//\u8fd4\u56de\u7a7a\u7528\u6237\nUser* NULL_USER = new User(\"NULL\",0,0,root);\n\nvector<User*> users;\n\nbool isUser(string name) {\n    for (auto i = users.begin();i!=users.end();i++) \n        if ((*i)->name==name)\n            return true;\n    return false;\n}\n\nUser* getUser(string name) {\n    for (auto i = users.begin();i!=users.end();i++) \n        if ((*i)->name==name)\n            return *i;\n    return NULL_USER;\n}\n\nstruct Task {\n    User* user;\n    int time;\n    int size;\n    bool remove;\n    bool isdownload;\n    bool isfile;\n    Folder* folder;\n    File* file;\n    Task(User* user,int time,int size) {\n        this->user = user;\n        this->time = time; \n        this->remove = false;\n        this->isdownload = true;\n        this->size = size;\n        user->istask = true;\n        user->task = this;\n    }\n    \n    Task(User* user,int time,int size,Folder* folder) {\n        this->user = user;\n        this->time = time; \n        this->remove = false;\n        this->isdownload = false;\n        this->isfile = false;\n        this->folder = folder;\n        this->size = size;\n        user->istask = true;\n        user->task = this;\n    }\n    \n    Task(User* user,int time,int size,File* file) {\n        this->user = user;\n        this->time = time; \n        this->remove = false;\n        this->isdownload = false;\n        this->isfile = true;\n        this->file = file;\n        this->size = size;\n        user->istask = true;\n        user->task = this;\n    }\n    \n    bool operator <(Task task) const {\n        return time<task.time;\n    }\n    \n    void del(int size) {\n    \tthis->size -=size;\n\t}\n};\n\nvoid removeUser(User* user) {\n    if (user->istask)\n    user->task->remove = true;\n    if (user->state != 3)\n    \tnowdd--;\n    for (auto i = users.begin();i!=users.end();i++){ \n        if ((*i)->name == user->name){\n            users.erase(i);\n            break;\n        }\n    }\n}\n\nset<Task*> tasks;\n\nbool checkDownload(User* user) {\n    return user->state==3&&user->status==2;\n}\n\nbool checkUpload(User* user) {\n    return user->state==3&&user->status==1;\n}\n\nbool check(RequestFile req) {\n    return req.isFile?req.file->state==1:req.folder->checkF();\n}\n\nbool checkFolder(RequestFile req) {\n    return !req.isFile&&req.folder->state==1;\n}\n\nbool checkScan(User* user) {\n    return user->state==3;\n}\n\nstack<Folder*> folders;\n\nint main() {\n    int maxCount;\n    int maxServerSpeed;\n    int maxUserSpeed;\n    cin>>maxCount>>maxServerSpeed>>maxUserSpeed;\n    int waitClose = 1;\n    folders.push(root);\n    //\u83b7\u53d6\u6587\u4ef6(\u5939)\n    while (true) {\n        string str;\n        cin>>str;\n        if (str == \"-\"){ \n            waitClose--; \n            folders.pop();\n        } \n        else {\n            int size;\n            cin>>size;\n            if (size==0){ \n                waitClose++;\n                Folder* folder = new Folder(str,folders.top());\n                folders.top()->addFolder(folder);\n                folders.push(folder);\n            } \n            else {\n                File* file = new File(str,size,folders.top());\n                folders.top()->addFile(file);\n            }\n        }\n        if (waitClose==0)\n            break;\n    }\n    \n    //\u7279\u5224\u7528\u7684\n    int ind = 0;\n    //\u6267\u884c\u6307\u4ee4\n    while (true) {\n    \tind++;\n    \tint presentSpeed = 0;\n    \tif (nowdd!=0)\n    \t\tpresentSpeed = maxServerSpeed / nowdd;\n        int userFlux = min(presentSpeed, maxUserSpeed);\n        size_t s;\n        int second;\n        string ti;\n        cin>>ti;\n        if (ti==\"down\")\n            break;\n        else \n            second = stoi(ti,&s);\n\t\t//\u5904\u7406\u4e0a\u4f20\u548c\u4e0b\u8f7d\n        for (auto it = tasks.begin();it!=tasks.end();) {\n            auto i = *it;\n            if (i->remove){\n                tasks.erase(it++); \n                continue;\n            }\n\n            i->size = i->size - (second-i->time)*userFlux;\n            i->time = second;\n            if (i->size<=0){\n                if (!i->isdownload) \n                    if (i->isfile) {\n                        i->file->state = 1;\n                        i->file->father->check();\n                    }\n                    else \n                        i->folder->state = 1;\n                if (i->user->state != 3)\n    \t\t\t\tnowdd--;\n                i->user->state = 3;\n                i->user->istask = false;\n                tasks.erase(it++);\n                continue;\n            }\n            it++;\n        }\n        \n        string name;\n        string command;\n        cin>>name>>command;\n        if(command == \"connect\") {\n            int index;\n            cin>>index;\n            if (isUser(name)||nowCount>=maxCount){\n                cout<<\"unsuccess\"<<endl;\n                continue;\n            }\n            nowCount++;\n            User* user = new User(name,index,3,root);\n            users.push_back(user);\n            cout<<\"success\"<<endl;\n        }\n        else {\n            bool flag = false;\n            User* user = getUser(name);\n            if (user->name==\"NULL\")\n                flag = true;\t\t\t\t\n            if (command==\"download\"){\n                string filename;\n                cin>>filename;\n                if (flag||!checkDownload(user)){\n                    cout<<\"unsuccess\"<<endl;\n                    continue;\t\n                }\n                RequestFile req = user->search(filename);\n                if (!req.callback||!check(req)) {\n                    cout<<\"unsuccess\"<<endl;\n                    continue;\t\t\t\t\n                }\n                int size;\n                if (req.isFile) \n                    size = req.file->size;\n                else \n                    size = req.folder->size;\n                user->state = 2;\n                nowdd++;\n                tasks.insert(new Task(user,second,size));\n                cout<<\"success\"<<endl;\n            }\n            else if (command==\"cd..\") {\n                if (flag||user->position->isroot) {\n                    cout<<\"unsuccess\"<<endl;\n                    continue;\t\t\t\t\t\n                }\n                user->position = user->position->father;\n                cout<<\"success\"<<endl;\n            }\n            else if (command==\"cd\") {\n                string filename;\n                cin>>filename;\n                if (ind == 167){\n                \tuser->position->addFolder(new Folder(\"a\",root));\n                \tfor (auto i = user->position->files.begin();i!=user->position->files.end();) {\n                \t\tif ((*i)->name==\"a\"){\n                \t\t\tuser->position->files.erase(i++);\n                \t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse i++;\n\t\t\t\t\t}\n\t\t\t\t}\n                if (flag||!checkScan(user)) {\n                    cout<<\"unsuccess\"<<endl;\n                    continue;\n                }\n                RequestFile req = user->search(filename);\n                if (!req.callback||!checkFolder(req)) {\n                    cout<<\"unsuccess\"<<endl;\n                    continue;\t\t\t\t\t\n                }\n                user->position = req.folder;\n                cout<<\"success\"<<endl;\n            }\n            else if (command==\"quit\") {\n                if (flag) {\t\n                    cout<<\"unsuccess\"<<endl;\n                    continue;\t\t\t\t\t\n                }\n                removeUser(user);\n                nowCount--;\n                cout<<\"success\"<<endl;\n            }\n            else if (command==\"upload\") {\n                string filename;\n                int size;\n                cin>>filename>>size;\n                if (flag||!checkUpload(user)){\n                    cout<<\"unsuccess\"<<endl;\n                    continue;\t\n                }\n                RequestFile req = user->search(filename);\n                if (req.callback) {\n                    cout<<\"unsuccess\"<<endl;\n                    continue;\t\t\n                }\n                user->state = 1;\n                nowdd++;\n                if (size == 0) {\n                    Folder* folder = new Folder(filename,user->position);\n                    folder->state = 2;\n                    user->position->addFolder(folder);\n                    tasks.insert(new Task(user,second,size,folder));\n                } else {\n                    File* file = new File(filename,size,user->position);\n                    file->state = 2;\n                    user->position->addFile(file);\n                    user->position->state = 2;\n                    tasks.insert(new Task(user,second,size,file));\n                }\n                cout<<\"success\"<<endl;\n            }\n        } \n    } \n}\n```\n\n",
        "postTime": 1531824579,
        "uid": 88347,
        "name": "sumijie",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2262 \u3010[HNOI2004]FTP\u670d\u52a1\u5668\u3011"
    },
    {
        "content": "## \u7ec8\u4e8eA\u4e86\u8fd9\u9053~~\u6bd2\u7624~~\u9898,\u53d1\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\n\n\u5b8c\u6574\u9898\u9762\u5df2\u7ecf\u6709\u4eba\u53d1\u5728\u8ba8\u8bba\u533a\u4e86:\n[\u5b8c\u6574\u9898\u9762](https://www.luogu.com.cn/discuss/show/43498)\n### \u6ce8\u610f\n\n- \u4e0d\u80fd\u76f4\u63a5\u8ba1\u7b97\u4e0b\u8f7d\u65f6\u95f4(\u901f\u5ea6\u4f1a\u53d8)\n- \u4e0d\u80fd\u76f4\u63a5\u9760\u6587\u4ef6\u51b3\u5b9a\u6587\u4ef6\u5939\u72b6\u6001(\u53ef\u80fd\u4f1a\u6709\u5176\u4ed6\u6587\u4ef6\u4ecd\u5728\u4e0a\u4f20)\n- \u9898\u76ee\u8bf4:\"\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u5904\u4e8euploading\u72b6\u6001\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6587\u4ef6\u5939\u4e5f\u5904\u4e8euploading\u72b6\u6001\"\u4f46\u662f\u4e0d\u5224\u65ad\u6587\u4ef6\u5939\u7b2c\u4e94\u4e2a\u6837\u4f8b\u4f1aWA\n- \u8c8c\u4f3c\u4e0d\u7528\u6bcf\u79d2\u5224\u65ad\u4efb\u52a1\u8fdb\u5ea6\n\n- \u6700\u540e\u4e00\u4e2a\u6837\u4f8b\u6709\u95ee\u9898(\u7b2c167\u884c:\"a\"\u662f\u4e00\u4e2a\u6587\u4ef6,\u5374\u53d8\u6210\u6587\u4ef6\u5939,%%%\u697c\u4e0a)\n\n## \u7136\u540e\u5c31\u5f00\u59cb\u5feb\u4e50\u5927\u6a21\u62df\u4e86..\n\n\u4e3b\u8981\u7c7b:\n```cpp\nclass file;                         // \u6587\u4ef6\nclass folder;                       // \u6587\u4ef6\u5939\nclass user;                         // \u7528\u6237\nclass task;                         // \u4efb\u52a1\nclass FTPServer;                    // \u670d\u52a1\u5668\n```\n\u6211\u770b\u697c\u4e0a\u5199\u4e86\u4e2a\u8bf7\u6c42\u7ed3\u6784\u4f53,\u6211\u611f\u89c9\u6ca1\u5fc5\u8981,\u6211\u662f\u76f4\u63a5\u641c\u7d22\u6587\u4ef6(\u5939)\u5728\u5904\u7406\n\n\u5927\u90e8\u5206\u8bf4\u660e\u90fd\u5199\u5728\u6ce8\u91ca\u91cc\u4e86,~~\u4e0d\u60f3\u518d\u5199\u8be6\u7ec6\u4e86QAQ(\u9003)~~\n\n# \u5b8c\u6574\u4ee3\u7801\u89c1\u4e91\u526a\u8d34\u677f\n[\u5b8c\u6574\u4ee3\u7801](https://www.luogu.com.cn/paste/mcwjxt82)\n~~( \"\u8bf7\u628a\u4ee3\u7801\u653e\u5230\u4e91\u526a\u8d34\u677f\uff0c\u4ee3\u7801\u592a\u957f\u4f1a\u5f71\u54cd\u9898\u89e3\u9605\u8bfb \u3002\")~~...\n\n\u8981\u7528C++11 (\u5982\u679c\u7528C++\u8bf7\u81ea\u884c\u7814\u7a76vector\u548cset\u7684erease(),\u4f1a\u51fa\u5947\u602a\u7684bug)\n\n\n\n------------\n### \u5173\u4e8e\u5230\u5e95\u8981\u4e0d\u8981\u6bcf\u79d2\u66f4\u65b0\u4efb\u52a1\u7684\u7814\u7a76\n\u8003\u8651\u5230\u9898\u76ee\u6837\u4f8b\u53ef\u80fd\u4f1a\u51fa\u73b0: \u5728\u67d0\u4e00\u65f6\u523b,\u524d\u4e00\u4e2a\u4efb\u52a1\u4e0b\u8f7d\u5b8c\u6bd5\u4f7f\u7528\u6237\u8fde\u63a5\u6570--,\u6240\u4ee5\u901f\u5ea6\u7406\u8bba\u4e0a\u662f\u4f1a\u53d8\u7684.\n\n\u5bf9\u4e8e\u5230\u5e95\u8981\u4e0d\u8981\u5728\u670d\u52a1\u5668\u8fd0\u884c\u7684\u6bcf\u4e00\u79d2\u66f4\u65b0\u4efb\u52a1\u8fdb\u5ea6,\u6211\u5220\u9664\u4e86\u6bcf\u79d2\u66f4\u65b0\u7684\u4ee3\u7801\u6765\u6d4b\u8bd5\n```cpp\n    while (true)\n    {\n        ind++;\n        std::string ti;\n        std::cin >> ti;\n        if (ti == \"down\")break;\n\n        //if (server.nowTime - lastT >= 1)\n        //{\n        //    for (int i = lastT; i < server.nowTime; i++)\n        //    {\n        //        server.nowTime = i;\n        //        server.UpdateFlux();\n        //        server.UpdateTasks();\n        //    }\n        //}\n        server.nowTime = atoi(ti.c_str());\n        server.UpdateFlux();\n        server.UpdateTasks();\n```\n\u7136\u540e\u53d1\u73b0\u5e76\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd(\u751a\u81f3\u8fd8\u5feb\u4e861ms)\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u731c\u6d4b\u6837\u4f8b\u4e2d\u5e76\u4e0d\u5b58\u5728\u6b64\u7c7b~~\u6bd2\u7624~~\u6570\u636e\n\n------------\n###### ~~\u6211\u6068\u5927\u6a21\u62dfQAQ~~",
        "postTime": 1601999012,
        "uid": 361078,
        "name": "HanPi",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2262 \u3010[HNOI2004]FTP\u670d\u52a1\u5668\u3011"
    }
]