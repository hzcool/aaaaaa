[
    {
        "content": "#### \u6ce8\u610f\uff1a\u672c\u9898\u89e3\u975e\u539f\u521b\uff0c\u6e90\u4e8e\u5b98\u65b9\u9898\u89e3\u3002\n# \u601d\u8def\n\n------------\n- \u8fd9\u662f\u4e00\u9053\u51e0\u4f55\u9898\uff0c\u603b\u4f53\u8fd8\u662f\u6709\u96be\u5ea6\u7684\u3002(\u5e9f\u8bdd\u5c11\u8bf4)\n- \u8ba9\u6211\u4eec\u7528 $M$ \u8868\u793a\u5b8c\u5168\u5305\u542b\u6240\u63d0\u4f9b\u591a\u8fb9\u5f62\u7684\u5177\u6709\u6700\u5c0f\u9762\u79ef\u7684\u77e9\u5f62\u3002\u6211\u4eec\u7528\u5c3d\u53ef\u80fd\u5c11\u7684\u5782\u76f4\u7ebf\u4e0e $M$ \u76f8\u4ea4\uff0c\u4f7f\u5176\u4e2d\u4e00\u6761\u7ebf\u7a7f\u8fc7\u6bcf\u4e2a\u591a\u8fb9\u5f62\u9876\u70b9\u3002\u76f4\u7ebf\u5c06\u591a\u8fb9\u5f62\u5206\u5272\u6210\u77e9\u5f62\uff0c\u56e0\u6b64\u5176\u9762\u79ef\u53ef\u4ee5\u8ba1\u7b97\u4e3a\u5404\u4e2a\u77e9\u5f62\u7684\u9762\u79ef\u4e4b\u548c\u3002\u8bf7\u6ce8\u610f\uff0c\u5355\u4e2a\u77e9\u5f62\u7684\u9762\u79ef\u53ef\u4ee5\u4f7f\u7528\u5305\u542b\u6392\u9664\u539f\u7406\u8ba1\u7b97\u3002\u9762\u79ef\u7b49\u4e8e\u4e0a\u4e0b\u8fb9\u7f18\u4ee5\u4e0a\u7684\u9762\u79ef\u4e4b\u5dee\u3002\n\n- \u6b64\u5916\uff0c\u5b83\u4eec\u7684\u9762\u79ef\u4e4b\u548c\u53ef\u4ee5\u901a\u8fc7\u9006\u65f6\u9488\u904d\u5386\u591a\u8fb9\u5f62\u6765\u83b7\u5f97\u3002\u6bcf\u5f53\u6211\u4eec\u904d\u5386\u4e00\u6761\u6c34\u5e73\u8fb9\u65f6\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u4e0a\u9762\u7684\u533a\u57df\u52a0\u5230\u603b\u548c\u4e0a\uff0c\u7b26\u53f7\u53d6\u51b3\u4e8e\u904d\u5386\u7684\u65b9\u5411\u3002\u7531\u4e8e\u6700\u4e0a\u9762\u7684\u8fb9\u5c06\u4ece\u53f3\u5411\u5de6\u904d\u5386\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5728\u8be5\u65b9\u5411\u6dfb\u52a0\u5e26\u8d1f\u53f7\u7684\u533a\u57df\u3002\n\n- \u8ba9\u6211\u4eec\u4ece\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u5355\u5143\u683c\u4f5c\u4e3a\u77e9\u5f62 $M$ \u7684\u5de6\u4e0a\u89d2\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u786e\u5b9a $M$ \u6307\u5b9a\u7684\u591a\u8fb9\u5f62\u4e2d\u5305\u542b\u7684\u4e00\u4e2a\u5355\u5143\u4e0a\u7684\u4e00\u4e2a\u5b57\u6bcd\u3002\u53ea\u6709\u5f53\u591a\u8fb9\u5f62\u7684\u6240\u6709\u5355\u5143\u90fd\u5305\u542b\u540c\u4e00\u4e2a\u5b57\u6bcd\u65f6\uff0c\u5373\u5982\u679c\u8be5\u5b57\u6bcd\u7684\u53d1\u751f\u6b21\u6570\u7b49\u4e8e\u5176\u9762\u79ef\uff0c\u5219\u591a\u8fb9\u5f62\u624d\u662f\u5355\u5757\u4f53\u3002\n\n- \u4e00\u4e2a\u5b57\u6bcd\u5728\u591a\u8fb9\u5f62\u5185\u7684\u5165\u5c04\u6b21\u6570\u53ef\u4ee5\u7528\u4e0e\u8ba1\u7b97\u5176\u9762\u79ef\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u6dfb\u52a0\u533a\u57df\uff0c\u800c\u662f\u6dfb\u52a0\u6240\u9700\u5b57\u6bcd\u7684\u53d1\u751f\u6b21\u6570\u3002\u77e9\u9635\u53ef\u4ee5\u9884\u5148\u8ba1\u7b97\u5305\u542b\u6570\u636e\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u5728\u56fa\u5b9a\u65f6\u95f4\u5185\u56de\u7b54\u8fd9\u6837\u7684\u67e5\u8be2\u3002\n\n- \u6700\u540e\uff0c\u901a\u8fc7\u5bf9\u8868\u4e2d\u6bcf\u4e2a\u53ef\u80fd\u7684\u5de6\u4e0a\u89d2\u5355\u5143\u8fd0\u884c\u6240\u63cf\u8ff0\u7684\u7b97\u6cd5\u6765\u83b7\u5f97\u5355\u5757\u591a\u8fb9\u5f62\u7684\u603b\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(R*C*V)$\u3002\n\n\n# AC\u4ee3\u7801\n\n------------\n\n```\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAXN = 510;\nconst int MAXV = 510;\n\nstruct point {\n    int x, y;\n    point() {}\n    point (int _x, int _y) { \n        x = _x, y = _y; \n  }\n} pts[MAXV];\n\nint R, C, V;\nchar mat[MAXN][MAXN];\nint sum[MAXN][MAXN][26];\n\nint area() {\n    int ret = 0;\n\n    point cur = pts[0];\n    for (int i = V - 1; i >= 0; --i) {\n        point nxt = pts[i];\n        if (cur.y != nxt.y)\n            ret += (nxt.y - cur.y) * cur.x;\n        cur = nxt;\n  }\n\n    return ret;\n}\n\nint cnt(int row, int col, int letter) {\n    int ret = 0;\n\n    point cur = pts[0];\n    for (int i = V - 1; i >= 0; --i) {\n        point nxt = pts[i];\n        if (cur.y != nxt.y) \n            ret += sum[nxt.x + row][nxt.y + col][letter] - sum[cur.x + row][cur.y + col][letter];\n    cur = nxt;\n  }\n\n    return ret;\n}\n\nint main(void) {\n\n    scanf(\"%d %d\", &R, &C);\n    for (int row = 0; row < R; ++row)\n        scanf(\"%s\", mat[row]);\n\n    for (char letter = 0; letter < 26; ++letter) \n        for (int row = 1; row <= R; ++row)\n            for (int col = 1; col <= C; ++col)\n                sum[row][col][letter] = (mat[row - 1][col - 1] == 'a' + letter) +\n                sum[row - 1][col][letter] + \n                sum[row][col - 1][letter] - \n                sum[row - 1][col - 1][letter];\n\n    int min_row = R;\n    int max_row = 0;\n    int min_col = C;\n    int max_col = 0;\n\n    scanf(\"%d\", &V);\n\n    for (int i = 0; i < V; ++i) {\n        scanf(\"%d %d\", &pts[i].y, &pts[i].x);\n        min_row = min(min_row, pts[i].x);\n        max_row = max(max_row, pts[i].x);\n        min_col = min(min_col, pts[i].y);\n        max_col = max(max_col, pts[i].y);\n    }\n\n    max_row -= min_row;\n    max_col -= min_col;\n\n    for (int i = 0; i < V; ++i) {\n        pts[i].x -= min_row;\n        pts[i].y -= min_col;\n    }\n \n    int A = area();\n    point p(min_row, C);\n    for (int i = 0; i < V; ++i) \n        if (pts[i].x == min_row) p.y = min(p.y, pts[i].y);\n\n    int ret = 0;\n\n    for (int row = 0; row + max_row <= R; ++row)\n        for (int col = 0; col + max_col <= C; ++col) {\n            int letter = mat[p.x + row][p.y + col] - 'a';\n            int n = cnt(row, col, letter);\n            ret += n == A;\n    }\n\n    printf(\"%d\\n\", ret);\n} \n```\n\nTo err is human, to forgive divine.\n",
        "postTime": 1626421956,
        "uid": 509218,
        "name": "nfls20200418",
        "ccfLevel": 0,
        "title": "P6504\u9898\u89e3"
    }
]