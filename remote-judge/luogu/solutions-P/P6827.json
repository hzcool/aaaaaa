[
    {
        "content": "**Update 10.13** \u535a\u5ba2\u4e0a\u4ee3\u7801\u4e0d\u77e5\u9053\u54ea\u91cc\u6302\u4e86/fad\uff0c\u672c\u5730\u6539\u4e86\u535a\u5ba2\u4e0a\u53ef\u80fd\u5fd8\u6539\u4e86\uff1f\u88abdalao\u6307\u51fa\uff0c\u73b0\u5df2\u66f4\u6b63\u3002\n\n**P0\uff1a\u9898\u5916\u8bdd**\n\n\u8bb2\u4e2a\u7b11\u8bdd\uff0c\u6b63\u89e3\u72b6\u538b\u3002\n\n**P1\uff1a\u57fa\u7840\u89c2\u5bdf**\n\n\u9996\u5148\u9700\u8981\u8bc1\u660e\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5982\u679c\u67d0\u4e00\u4e2a\u62ec\u53f7\u4e32\u5728\u70b9 $i$ \u51fa\u53d1\u6709\u4e0d\u6b62\u4e00\u4e2a\u5b8c\u5168\u5339\u914d\uff0c\u90a3\u4e48\u9009\u62e9\u7ed3\u675f\u70b9\u6700\u5c0f\u7684\u5339\u914d\u4e00\u5b9a\u6700\u4f73\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u89c4\u5b9a\u4e86\u53ea\u6709\u5b8c\u5168\u5339\u914d\u5b8c\u67d0\u4e2a\u5b57\u7b26\u4e32\u624d\u80fd\u7ee7\u7eed\u5339\u914d\uff0c\u6240\u4ee5\u7b54\u6848\u4e00\u5b9a\u662f\u8d8a\u65e9\u5339\u914d\u5b8c\u8d8a\u597d\u3002\n\n**P2:\u9898\u89e3**\n\n\u4e0b\u6587\u7528 $k$ \u8868\u793a $len(k)$, $a$ \u8868\u793a $len(a)$\u3002\n\n------------\n\u5bf9\u4e8e $a\\le 8$ \u7684\u6570\u636e\uff0c\u66b4\u529b\u679a\u4e3e\u6bcf\u79cd\u53ef\u51fa\u73b0\u7684\u6392\u5217\u67e5\u6700\u5927\u503c\uff0cans \u53d6 max \u5373\u53ef \n\n\u590d\u6742\u5ea6 $O(na^a)$\u3002\n\n------------\n\u5bf9\u4e8e $n \\le 10$ \u4e14\u968f\u673a\u7684\u6570\u636e\uff0c\u8003\u8651\u4f18\u5316\u5168\u6392\u5217\u3002\n\n\u53d1\u73b0\u53ef\u4ee5\u4f7f\u7528 dfs \u8fdb\u884c\u679a\u4e3e\uff0c\u6bcf\u5f53\u679a\u4e3e\u5230\u5c31\u9000\u51fa\u3002\n\n\u590d\u6742\u5ea6 $O(na^a)$\uff0c\u4f46\u5728\u6570\u636e\u968f\u673a\u4e0b\u80fd\u591f\u8fc7\uff08~~\u826f\u5fc3\u51fa\u9898\u4eba~~\uff09\u3002\n\n\u6838\u5fc3\u679a\u4e3e\u4ee3\u7801: by @[Ecrade_](https://www.luogu.com.cn/user/322075)\n```\nvoid dfs(ll pos,ll id,ll cur){\n\tans = max(ans,cur);\n\tif (pos >= l) return;\n\tfor (ll cnt = 0;cnt < xl[id] && pos < l;pos += 1)\n\t\tif (x[id][cnt] == k[pos]) cnt += 1,cur += v[id];\n\tfor (ll i = 1;i <= n;i += 1) dfs(pos,i,cur);\n}\n```\n\n------------\n\u5bf9\u4e8e $n \\le 10$ \u4e14\u6bcf\u4e2a\u5b57\u7b26\u53ea\u7528\u4e00\u6b21\u7684\u6570\u636e\uff0c\u53d1\u73b0\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u72b6\u538b\u3002\n\n\u9996\u5148\u9884\u5904\u7406\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u65f6\u5206\u522b\u5904\u7406\u540e\u9762\u7b2c\u4e00\u6b21\u51fa\u73b0 ( \u548c ) \u7684\u4f4d\u7f6e\uff0c\u6b64\u64cd\u4f5c\u7528\u5012\u53d9\u679a\u4e3e\u80fd\u591f\u5feb\u901f\u7684\u6c42\u51fa\u3002\n\n```cpp\nfor (int i=k;i>0;i--){\n    nxt[0][i] = (s[i-1]=='(') ? i : nxt[0][i+1];\n    nxt[1][i] = (s[i-1]==')') ? i : nxt[1][i+1];\n}\n```\n\n$dp[i][j]$ \u8868\u793a\u76ee\u524d\u5339\u914d\u5230 $i$ \u70b9\uff0c\u5b57\u7b26\u4e32\u5b58\u53d6\u6570\u91cf\u4e3a $j$\u3002\u679a\u4e3e\u6bcf\u4e2a\u4e32\u66b4\u529b\u67e5 $k$ \u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(n2^nak)$\n\n\u6838\u5fc3\u8f6c\u79fb\u4ee3\u7801\uff1a\n\n```cpp\ninline void solve(int kk, int type, int pos){\n  int cnt = 1, val = dp[type][kk];\n  while(cnt<=a[pos].length()){\n    int now = (a[pos][cnt-1])==')';\n    if (!nxt[now][kk]) {ans = max(ans,val);return;}//\u6ca1\u5730\u65b9\u8df3\u4e86\n    if (cnt==a[pos].length()) val+=v[pos],dp[type+(1<<(pos-1))][nxt[now][kk]+1] = max(dp[type+(1<<(pos-1))][nxt[now][kk]+1],val);//\u8df3\u5b8c\u4e86\n    else kk = nxt[now][kk]+1,val+=v[pos];\n    cnt++;\n  }\n  ans = max(ans,val);\n}\n```\n\n\u53e6\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6cd5\u4e3a\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u8fdb\u884c dp\uff0c\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u5747\u66b4\u529b\u679a\u4e3e\u5b57\u7b26\u4e32\u627e\u5339\u914d (\u540e\u9762\u4f1a\u5177\u4f53\u8bb2 dp \u601d\u8def\uff0c\u8fd9\u91cc\u7565)\u3002\n\n\u590d\u6742\u5ea6 $O(nk^2)$\uff0c\u4eba\u53e3\u666e\u67e5\u3002\n\n------------\n\u5bf9\u4e8e $n\\le 100,a \\le 8$ \u7684\u6570\u636e\uff0c\u8003\u8651\u66b4\u529b dp\u3002\n\n\u4ee4 $dp[i]$ \u8868\u793a\u5728\u70b9 $i$ \u524d\u80fd\u62ff\u5230\u7684\u6700\u9ad8**\u5b8c\u7f8e**\u5339\u914d\uff0c\u6ce8\u610f $dp[i]$ \u4e0d\u5305\u62ec\u70b9 $i$ \u80fd\u62ff\u5230\u7684\u3002\n\n\u8f6c\u79fb\u53ef\u4ee5\u679a\u4e3e\u62ec\u53f7\u4e32\uff0c\u5bf9\u6bcf\u4e2a\u62ec\u53f7\u4e32\u66b4\u8df3\u9884\u5904\u7406\u51fa\u6765\u7684\u62ec\u53f7\u3002\n\n\u8f6c\u79fb\u4ee3\u7801\uff1a\n\n```cpp\ninline void jump(int kk, int pos){\n  int cnt = 1, val = dp[kk];\n  while(cnt<=a[pos].length()){\n    int now = (a[pos][cnt-1])==')';//\u8f6c\u5316\u4e3a01\n    if (nxt[now][kk]==-1) {ans = max(ans,val);return;}//\u6ca1\u5730\u65b9\u8df3\u4e86\n    if (cnt==a[pos].length()) dp[nxt[now][kk]+1] = max(dp[nxt[now][kk]+1],val+v[pos]);//\u8df3\u5b8c\u4e86\n    else kk = nxt[now][kk]+1,val+=v[pos];\n    cnt++;\n  }\n  ans = max(ans,val);\n}\n```\n\n\u590d\u6742\u5ea6 $O(k+nak)$\n\n------------\n\u5bf9\u4e8e $a \\le 8$ \u7684\u6570\u636e\uff0c\u66b4\u529b\u53ef\u8fc7\uff0c\u4f46\u6709\u53e6\u5916\u7684\u89e3\u6cd5\uff08\u8fd1\u4f3c\u6b63\u89e3\uff09\n\n\u53d1\u73b0\u62ec\u53f7\u53ea\u6709\u4e24\u79cd\u5f62\u6001\uff0c\u8003\u8651\u7528 01 \u8868\u793a\uff0c\u4ece\u800c\u60f3\u5230\u72b6\u538b\u3002\n\n\u5728\u9884\u5904\u7406 () \u7684\u4f4d\u7f6e\u540e\u6211\u4eec\u8fd8\u53ef\u4ee5\u66b4\u529b\u9884\u5904\u7406\u6bcf\u4e00\u79cd\u72b6\u6001\u3002\u9884\u5904\u7406\u7684\u4e1c\u897f\u8ddf\u4e4b\u524d\u610f\u4e49\u4e00\u6837\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u66b4\u8df3 ( \u548c ) \u5373\u53ef\u3002\u6781\u9650\u72b6\u6001\u6570 $2^{a}-1$\uff0c\u9884\u5904\u7406\u540e\u66b4\u8df3\u53ef\u4ee5\u505a\u5230 $O(a)$ \u5904\u7406\u51fa\u67d0\u4e00\u4e2a\u72b6\u6001\u5728\u67d0\u4e00\u4e2a\u70b9\u7684\u503c\u3002\n\n\u4e4b\u540e dp \u8f6c\u79fb\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u5b57\u7b26\u4e32\u8f6c\u79fb,\u5bf9\u4e8e\u957f\u5ea6\u4e3a $a$ \u7684\u5b57\u7b26\u4e32\u76f4\u63a5\u8f6c\u79fb\uff0c\u5426\u5219\u66b4\u529b\u679a\u4e3e\u8fdb\u884c\u8f6c\u79fb\u3002\n\n\u590d\u6742\u5ea6 $O(k+a2^ {a}k+nka)$ ~~\u600e\u4e48\u597d\u50cf\u8fd8\u6162\u4e86~~\n\n\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u6bcf\u79cd\u957f\u5ea6\u8fdb\u884c\u72b6\u538b\uff0c\u4e8e\u662f\u65f6\u7a7a\u53d8\u4e3a $O(k+a^22^ak+nk)$\n\n------------\n\n\n\u5bf9\u4e8e $a \\le 300$ \u7684\u6570\u636e\uff0c\u66b4\u529b\u590d\u6742\u5ea6\u9519\u8bef\uff0c\u8003\u8651\u72b6\u538b\u3002\n\n\u7136\u800c\u76f4\u63a5\u72b6\u538b $a$ \u663e\u7136\u662f\u4e2a\u7b11\u8bdd\uff0c\u4e8e\u662f\u8003\u8651\u5206\u5757\u601d\u60f3\u3002\n\n\u53d1\u73b0\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u62ec\u53f7\u4e32\u8fdb\u884c\u5206\u5757\u5904\u7406\u3002\u5206\u6210 $\\sqrt{a}$ \u5757\uff0c\n\n\u53ea\u9700\u9884\u5904\u7406\u957f\u5ea6\u4e3a $\\sqrt{a}$ \u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002\n\n\n\u5bf9\u4e8e\u8f6c\u79fb\uff0c\u5728\u6bcf\u4e2a\u70b9\u4e0a\u4ecd\u7136\u66b4\u529b\u679a\u4e3e\u5b57\u7b26\u4e32\uff0c\u4f46\u6211\u4eec\u5bf9\u5b57\u7b26\u4e32\u5206\u5757\u8df3\u8dc3\u3002\u5bf9\u4e8e\u4e0d\u8db3 $\\sqrt{a}$ \u957f\u5ea6\u7684\u5757\u66b4\u8df3\u5373\u53ef\u3002\n\n~~\u7136\u800c\u53d1\u73b0\u8fd9\u8fd8\u662f\u8fc7\u4e0d\u53bb~~\n\n\u53d1\u73b0\u5757\u957f\u4f7f\u590d\u6742\u5ea6\u4e0d\u5e73\u8861, \u74f6\u9888\u5728\u4e8e\u72b6\u538b\u7684\u72b6\u6001\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u8c03\u8282\u5757\u957f\u3002\n\n\u590d\u6742\u5ea6 $O(k+\\sqrt{a}2^ {\\sqrt{a}}k+nk\\sqrt{a})$,\u5b9e\u6d4b\u5757\u957f $4\\sim8$ \u90fd\u53ef\u8fc7\u3002\n\n\n```cpp\nconst int MAXN = 505;\nconst int MAXK = 1e4+5;\nconst int L = 5;\nint n,v[MAXN],nxt[2][MAXK],dp[MAXK],k,pre[MAXK][(1<<L)+5],num[MAXN],cor[MAXN][(MAXN/L)+1],ans;\nstring s,a[MAXN];\nint max(int a, int b){return a>b?a:b;}\nint solve(int pos, int num, int val){\n  while(true){\n    int now = (num>>val) & 1;\n    if (!nxt[now][pos]) return 0;\n    if (val==0) return nxt[now][pos];\n    pos = nxt[now][pos]+1;val--;\n  }\n}\ninline int get(int pos, int f, int t){\n  int re = 0;\n  for (int i=f;i<=t;i++) re += ((a[pos][i]=='(') ? 0 : 1) * (1<<(t-i));\n  return re;\n}\nvoid jump(int pos, int ptr,int cnt,int sum, int from){\n  if (cnt>a[pos].length()) {dp[ptr] = max(dp[ptr],dp[from]+sum);return;}\n  while(cnt<=a[pos].length()){\n    int now = (a[pos][cnt-1])==')';\n    if (!nxt[now][ptr]) {ans = max(ans,dp[from]+sum);return;}//\u6ca1\u5730\u65b9\u8df3\u4e86\n    ptr = nxt[now][ptr]+1,sum+=v[pos];\n    cnt++;\n  }\n  if (ptr!=-1)dp[ptr] = max(dp[ptr],dp[from]+sum);//\u8df3\u5b8c\n  ans = max(ans,dp[from]+sum);\n}\n// pos\u662f\u5757\u7684\u7f16\u53f7,cor\u662f\u76ee\u524d\u5757\u7684\u62ec\u53f7\u5e8f\u5217\nvoid Solve(int kk, int pos){\n  int re = 0,from = kk,cnt = 1;\n  for (int i=1;i<=num[pos];i++){\n    if (pre[kk][cor[pos][i]]) {    // \u5982\u679c\u6709\u5757\u53ef\u4ee5\u8df3\n      kk = pre[kk][cor[pos][i]]+1;\n      re += L*v[pos];\n      cnt+=L;\n    }else break;\n  }\n  jump(pos,kk,cnt,re,from);\n}\nsigned main(){\n  cin >> n >> s;\n  k = s.length();\n  for (int i=1;i<=n;i++) cin >> a[i] >> v[i];\n  for (int i=1;i<=n;i++) {\n    num[i] = (a[i].length()/L);\n    for (int l=1;l<=num[i];l++) cor[i][l] = get(i,L*(l-1),L*l-1);\n  }\n  for (int i=k;i>0;i--){\n    nxt[0][i] = (s[i-1]=='(') ? i : nxt[0][i+1];// 0\u8868\u793a (, 1\u8868\u793a )\n    nxt[1][i] = (s[i-1]==')') ? i : nxt[1][i+1];\n  }\n  for (int i=1;i<=k;i++)\n    for (int j=0;j<=(1<<L)-1;j++)\n      pre[i][j] = solve(i,j,L-1);  //\u5904\u7406\u72b6\u6001\n  for (int i=1;i<=k;i++)\n    for (int j=1;j<=n;j++)\n      Solve(i,j);\n  printf(\"%d\\n\",ans);\n}\n/*\n3\n((()())(()()\n(() 4\n() 2\n()()()() 5\n*/\n\n```\n\n\u5ba1\u9898\u4eba\u7ed9\u51fa\u4e86\u5bf9\u4e0d\u8db3\u5927\u5c0f\u7684\u5757\u4e0d\u8db3\u957f\u5ea6\u65f6\u4e0d\u9700\u66b4\u8df3\u7684\u65b9\u6cd5\uff1a\n\n\u4ee4 $pre[l][i][j]$ \u4e3a\u957f\u5ea6 $l$ \u7684\u5757\u5728\u4f7f\u7528 $i$ \u53f7\u5b57\u7b26\u4e32\uff0c\u72b6\u6001\u4e3a $j$ \u7684\u6700\u65e9\u5b8c\u7f8e\u5339\u914d\u7ed3\u675f\u70b9\u3002\u8fd9\u4e2a\u957f\u5ea6\u5728 solve \u51fd\u6570\u5185\u53ef\u4ee5\u6c42\u51fa\uff0c\u603b\u590d\u6742\u5ea6\u4e0d\u53d8\uff0c\u4f46\u66b4\u8df3\u65f6\u76f4\u63a5\u5904\u7406\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4e0d\u662f\u5b8c\u7f8e\u5339\u914d\u7684\u5757\uff0c\u6211\u4eec\u5c06 $pre[l][i][j]$ \u5185\u7684\u503c\u53d8\u4e3a\u5728\u67d0\u4e2a\u957f\u5ea6\u4e0b\u6700\u591a\u80fd\u62ff\u7684\u5339\u914d\u6570\u91cf\u3002\u4e3a\u4e86\u533a\u5206\u7ed3\u675f\u70b9\u4e0e\u957f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u5b57\u8bbe\u4e3a\u8d1f\u6570\uff0c\u7136\u540e\u5728\u7d2f\u8ba1\u65f6\u4e58\u4ee5 -1 \u5373\u53ef\u3002\n\n~~\u7136\u800c\u4e0d\u77e5\u9053\u4e3a\u5565\u6211\u8fd9\u4e48\u5199\u8dd1\u5f97\u66f4\u6162\u4e86~~\uff0c\u4ee3\u7801\u4e0d\u8d34\u4e86\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u627e\u6211\u8981\u3002\n\n------------\n**P3\uff1a\u53ef\u80fd\u5b58\u5728\u7684\u7591\u60d1**\n\n\u4e3a\u4ec0\u4e48 std \u5728\u5757\u5927\u5c0f\u4e0d\u8db3 $\\sqrt{a}$ \u65f6\u8981\u66b4\u529b\u8f6c\u79fb\u5462\uff1f\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5047\u8bbe\u5757\u5927\u5c0f\u4e3a 8\uff0c\u7528 0 \u8868\u793a (\uff0c1 \u8868\u793a )\uff0c\u5219 (((((((( \u7684\u8868\u793a\u6cd5\u4e3a 0000000, \u5373 0\u3002\n\n\u7136\u800c\uff0c\u5bf9\u4e8e\u5927\u5c0f\u4e3a 6 \u7684\u5c0f\u5757\uff0c(((((( \u7684\u8868\u793a\u6cd5\u540c\u4e3a 0\uff0c\u4f46\u4e24\u8005\u4ee3\u8868\u7684\u4e1c\u897f\u4e0d\u540c\u3002\u6545\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u72b6\u6001\u8fdb\u884c\u8f6c\u79fb\u3002",
        "postTime": 1599536955,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6827 \u3010\u300cEZEC-4\u300d\u62ec\u53f7\u3011"
    }
]