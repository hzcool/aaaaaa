[
    {
        "content": "\u9898\u76ee\u5730\u5740\uff1a[P3168 [CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf](https://www.luogu.org/problemnew/show/P3168)\n\n\u4e3b\u5e2d\u6811\u7684\u6a21\u677f\u9898\n\n\u66f4\u6a21\u677f\u7684\u5728\u8fd9\u513f\uff1a[P3834 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09](https://www.luogu.org/problemnew/show/P3834)\n\n\u5f62\u8c61\u7684\u8bf4\uff0cP3834\u662f\u201c\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u201d\uff0cP3168\u662f\u201c\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u201d\n\n**\u6ce8\u610f\uff01\u8fd9\u91cc\u53ea\u662f\u5f62\u8c61\u7684\u8bf4\uff0c\u5b9e\u9645\u4e0a\u4e24\u9053\u9898\u90fd\u662f\u9759\u6001\u7684**\n\n\u6211\u4eec\u8054\u60f3\u5176\u4ed6\u7684\u201c\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u201d\u95ee\u9898\uff0c\u6211\u4eec\u90fd\u662f\u600e\u4e48\u505a\u7684\uff1f\n\n**\u5dee\u5206\uff01**\n\n\u6ca1\u9519\uff0c\u5dee\u5206\uff0c\u5c06\u201c\u533a\u95f4\u4fee\u6539\u201d\u6539\u6210\u201c\u5de6\u7aef\u70b9\u52a0\uff0c\u53f3\u7aef\u70b9\u7684\u53f3\u8fb9\u51cf\u201d\u7684\u201c\u5355\u70b9\u4fee\u6539\u201d\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u6bcf\u6b21\u201c\u5355\u70b9\u67e5\u8be2\u201d\u5c31\u76f8\u5f53\u4e8e\u6c42**\u524d\u7f00\u548c**\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u201c\u533a\u95f4\u67e5\u8be2\u201d\n\n\u4e8e\u662f\u6211\u4eec\u6210\u529f\u7684\u5c06P3168\u8f6c\u5316\u6210\u4e86P3834\uff0c\u7136\u540e\u5c31\u7b80\u5355\u4e86\n\n\u51e0\u4e2a\u6ce8\u610f\u70b9\uff1a\n\n* \u516c\u5f0f $K_i=1+(A_i*Pre+B_i)\\ mod\\ C_i$ \u4f1a\u7206 **int**\uff0c\u6ce8\u610f\u5f00 **long long**\n\n* \u9700\u8981\u5148\u8fdb\u884c\u79bb\u6563\u5316\uff0c $sort+unique$ \u5373\u53ef\n\n* \u4e3b\u5e2d\u6811\u8981\u5f00 $2*N\\ log\\ N$ \uff0c\u5176\u4e2d $2$ \u662f\u56e0\u4e3a\u5dee\u5206\u4ee5\u540e\u201c\u5355\u70b9\u4fee\u6539\u201d\u7684\u6570\u91cf\u4e3a\u539f\u6765\u201c\u533a\u95f4\u4fee\u6539\u201d\u7684\u4e24\u500d\uff08\u6211\u7684\u4ee3\u7801\u4e2d\u76f4\u63a5\u5c06 **N** \u6269\u5927\u4e86\u4e00\u500d\uff09\n\n* \u4e0d\u8981\u4fee\u6539\u7b2c $n+1$ \u4e2a\u533a\u95f4\uff0c\u5373\u4fee\u6539\u5230\u7b2c $n+1$ \u4e2a\u533a\u95f4\u5c31\u53ef\u4ee5\u76f4\u63a5 **break**\n\n* \u5728\u8be2\u95ee\u5230 $l==r$ \u65f6\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de $sum$ \u800c\u8981\u8fd4\u56de $t[p].s / t[p].c * k$\n\n```\n#include <bits/stdc++.h>\n#define ll long long\n#define pii pair<int, int>\n#define x first\n#define y second\nusing namespace std;\nconst int N = 2e5 + 6;\nint n, m, pre = 1, b[N], rt[N], tot;\npii a[N];\nstruct T {\n\tint l, r, c, s;\n} t[N*20];\n\nint build(int l, int r) {\n\tint p = ++tot;\n\tif (l == r) return p;\n\tint mid = (l + r) >> 1;\n\tt[p].l = build(l, mid);\n\tt[p].r = build(mid + 1, r);\n\treturn p;\n}\n\nint change(int o, int l, int r, int p, int k) {\n\tint q = ++tot;\n\tt[q] = t[o];\n\tif (l == r) {\n\t\tt[q].c += k;\n\t\tt[q].s += k * b[p];\n\t\treturn q;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (p <= mid) t[q].l = change(t[o].l, l, mid, p, k);\n\telse t[q].r = change(t[o].r, mid + 1, r, p, k);\n\tt[q].c = t[t[q].l].c + t[t[q].r].c;\n\tt[q].s = t[t[q].l].s + t[t[q].r].s;\n\treturn q;\n}\n\nint ask(int p, int l, int r, int k) {\n\tif (l == r) return t[p].s / t[p].c * k;\n\tint mid = (l + r) >> 1;\n\tif (k <= t[t[p].l].c) return ask(t[p].l, l, mid, k);\n\telse return t[t[p].l].s + ask(t[p].r, mid + 1, r, k - t[t[p].l].c);\n}\n\nint main() {\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n; i++) {\n\t\tint p = (i << 1) - 1, q = i << 1;\n\t\tscanf(\"%d %d %d\", &a[p].x, &a[q].x, &a[p].y);\n\t\t++a[q].x;\n\t\ta[q].y = -a[p].y;\n\t\tb[i] = a[p].y;\n\t}\n\tsort(b + 1, b + n + 1);\n\tint w = unique(b + 1, b + n + 1) - (b + 1);\n\trt[0] = build(1, w);\n\tsort(a + 1, a + (n << 1) + 1);\n\tint k = 1;\n\tfor (int i = 1; i <= (n << 1); i++) {\n\t\twhile (k < a[i].x) {\n\t\t\trt[k+1] = rt[k];\n\t\t\t++k;\n\t\t}\n\t\tif (k == n + 1) break;\n\t\tint p = lower_bound(b + 1, b + w + 1, abs(a[i].y)) - b;\n\t\trt[k] = change(rt[k], 1, w, p, a[i].y > 0 ? 1 : -1);\n\t}\n\twhile (m--) {\n\t\tint xi, ai, bi, ci;\n\t\tscanf(\"%d %d %d %d\", &xi, &ai, &bi, &ci);\n\t\tint ki = ((ll)ai * pre + bi) % ci + 1;\n\t\tif (t[rt[xi]].c <= ki) printf(\"%d\\n\", pre = t[rt[xi]].s);\n\t\telse printf(\"%d\\n\", pre = ask(rt[xi], 1, w, ki));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1551083501,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "P3168 [CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf"
    },
    {
        "content": "###  [CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf  \n~~\u4e00\u5f00\u59cb\u53d7\u5230`HNOI2015\u6458\u679c\u5b50`\u7684\u542f\u53d1\u5199\u4e86\u4e00\u53d1\u6811\u5957\u6811\uff0c\u7136\u540e\u5c31T\u4e86~~    \n>\u8fd9\u9898\u8981\u6c42\u6c42\u8986\u76d6\u4e00\u4e2a\u70b9\u7684\u524dk\u5c0f\u533a\u95f4\u548c\u3002\u5f3a\u5236\u5728\u7ebf\u3002  \n\n\u4f46\u4e3b\u5e2d\u6811\u7684\u89e3\u6cd5\u5176\u5b9e\u5dee\u4e0d\u591a\uff0c\u56e0\u4e3a\u4e3b\u5e2d\u6811\u6709\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u533a\u95f4\u62c6\u5f00\uff0c\u5728$l$\u5904\u52a0\u533a\u95f4\u7684\u6743\u503c\uff0c\u5728$r+1$\u5904\u51cf\u533a\u95f4\u7684\u6743\u503c\uff0c\u7136\u540e\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u548c\u3002    \n\u6211\u4eec\u5c31\u53ef\u4ee5\u5355\u70b9\u67e5\u8be2\u4e86\u3002\u5728\u4e3b\u5e2d\u6811\u4e0a\u4e8c\u5206\u5c31\u884c\u4e86\u3002  \n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nconst int N=1e5+10;\nint read(){\n    int sum=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){sum=sum*10+ch-'0';ch=getchar();}\n    return sum*f;\n}\nint n,m,num,tot;\nint a[N],b[N],root[N<<6];\nlong long ans=1;\nstruct tree {\n    long long sum; \n    int cnt,l,r;\n}t[N<<6];\nvector<int>be[N],ed[N];\nvoid update(int &u,int l,int r,int pre,int pos,int v){\n    u=++tot; t[u]=t[pre];\n    t[u].cnt+=v, t[u].sum+=1ll*v*b[pos];\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(pos<=mid) update(t[u].l,l,mid,t[pre].l,pos,v);\n    else update(t[u].r,mid+1,r,t[pre].r,pos,v);\n}\nlong long query(int u,int l,int r,int k){\n    int num=t[t[u].l].cnt;\n    if(l==r) return t[u].sum/(1ll*t[u].cnt)*1ll*k;\n    int mid=(l+r)>>1;\n    if(k<=num) return query(t[u].l,l,mid,k);\n    else return query(t[u].r,mid+1,r,k-num)+t[t[u].l].sum;\n}\nint main(){\n    m=read(),n=read();\n    for(int i=1;i<=m;i++) {\n        int x=read(),y=read();\n        a[i]=read(),b[i]=a[i];\n        be[x].push_back(i), ed[y+1].push_back(i);\n    }\n    sort(b+1,b+1+m); int num=unique(b+1,b+1+m)-b-1;\n    for(int i=1;i<=n;i++) {\n        root[i]=root[i-1];\n        for(int j=0;j<be[i].size();j++) {\n            int p=lower_bound(b+1,b+1+num,a[be[i][j]])-b;\n            update(root[i],1,num,root[i],p,1);\n        }\n        for(int j=0;j<ed[i].size();j++) {\n            int p=lower_bound(b+1,b+1+num,a[ed[i][j]])-b;\n            update(root[i],1,num,root[i],p,-1);\n        }\n    }\n    for(int i=1;i<=n;i++) {\n      \tint x=read(),a=read(),b=read(),c=read(),k=(1ll*a*ans+b)%c+1;\n        if(k>t[root[x]].cnt) ans=t[root[x]].sum;\n        else ans=query(root[x],1,num,k);\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1546215787,
        "uid": 52173,
        "name": "xudaxia",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "##**Solution** \u5dee\u5206\u6570\u7ec4 + \u4e3b\u5e2d\u6811\n\n- \u5148\u4ecb\u7ecd\u4e0b\u5dee\u5206\u6570\u7ec4\u7684\u6982\u5ff5\uff1a\u4ee4$b[1] = a[1], b[i] = a[i] - a[i - 1](2 \\le i \\le n)$\uff0c\u8fd9\u6837\u7684\u6570\u7ec4$b$\u5c31\u662f\u4e00\u4e2a\u5dee\u5206\u6570\u7ec4\u3002\n\n- \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a\n\n$\\sum \\limits_{j = 1}^i b[j] = b[1] + b[2] + ... + b[i]$\n\n$= a[1] + a[2] - a[1] + ... + a[i - 1] + a[i] - a[i - 1] = a[i]$\n\n- \u90a3\u4e48\u901a\u8fc7\u524d\u7f00\u548c\u5c31\u53ef\u6765\u6c42\u5355\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u4ee5\u6b64\u5904\u7406\u4e00\u4e9b\u7279\u6b8a\u7684\u95ee\u9898\u3002\u4f8b\u5982\u672c\u9898\u4e2d\u7684\u4fee\u6539\uff0c\u7ed9\u533a\u95f4$[l, r]$\u5185\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u52a0\u4e0a\u4f18\u5148\u7ea7$k$\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u4ee4$b[l] += k, b[r + 1] -= k$\uff0c\u8868\u793a\u7528\u524d\u7f00\u548c\u6c42\u533a\u95f4$[l, r]$\u5185\u7684\u5143\u7d20\u65f6\u90fd\u4f1a\u52a0\u4e0a$k$\uff0c\u800c\u533a\u95f4$[r + 1, n]$\u7684\u5143\u7d20\u5c31\u4f1a\u540c\u65f6\u52a0\u4e0a\u548c\u51cf\u53bb$k$\uff0c\u4e5f\u5c31\u662f\u4e0d\u53d8\u3002\n\n- \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5584\u4e8e\u5904\u7406\u524d\u7f00\u548c\u7684\u4e3b\u5e2d\u6811\u6765\u6c42\u7b2c$k$\u5c0f\u4f18\u5148\u7ea7\u4e4b\u548c\u4e86\u3002\u9996\u5148\u6309\u4f4d\u7f6e\u5b58\u50a8\u4e0b\u5f62\u5982$b[l] += k, b[r + 1] -= k$\u7684\u4fee\u6539\uff08\u7531\u4e8e\u540c\u4e00\u4f4d\u7f6e\u4e0a\u53ef\u80fd\u6709\u591a\u6b21\u4fee\u6539\uff0c\u7a7a\u95f4\u95ee\u9898\u4e0a\u5e94\u4f7f\u7528\u90bb\u63a5\u8868\uff09\uff0c\u5176\u6b21\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u5efa\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u5bf9\u4e8e\u540c\u4e00\u4f4d\u7f6e\u7684\u4e0d\u540c\u4fee\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u7528$spj$\u6570\u7ec4\u8bb0\u5f55\u4e0b\u6700\u540e\u4e00\u6b21\u4fee\u6539\u5b8c\u6210\u540e\u6240\u5efa\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u7f16\u53f7\uff0c\u76f4\u63a5\u5728\u8be2\u95ee\u4e2d\u4f7f\u7528\u5373\u53ef\u3002\n\n##**Code**\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\ntypedef long long ll;\nconst int Maxn = 0x3f3f3f3f;\nconst int N = 2e5 + 5, M = 5e6 + 5;\nll Ans = 1; int n, m, L, E, fx, rt[N << 1], spj[N];\n\nstruct Edge\n{\n    int to; Edge *nxt;\n}a[N << 1], *T = a, *lst[N];\n\nstruct point\n{\n    int num, lc, rc; ll sum;\n    #define l(x) tr[x].lc\n    #define r(x) tr[x].rc\n    #define c(x) tr[x].num\n    #define s(x) tr[x].sum\n}tr[M];\n//\u6839\u636e\u9898\u610f 1 <= Pi <= 10000000\n//\u6309\u7167\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u5b9a\u4e49\u7a7a\u95f4\u663e\u7136\u662f\u4e0d\u591f\u7684\n//\u4f46\u8003\u8651\u4e00\u5171\u53ea\u67092m\u6b21\u63d2\u5165\uff0c\u6bcf\u6b21\u53ea\u589e\u52a0log2m\u4e2a\u8282\u70b9\n//\u6240\u4ee5\u6211\u4eec\u8fd9\u4e48\u5f00\u662f\u6ca1\u6709\u95ee\u9898\u7684  \n\ntemplate <class T> inline void CkMax(T &a, const T &b) {if (a < b) a = b;}\n\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\n\ninline void put(ll x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\n\ninline void addEdge(const int &x, const int &y)\n{\n    T->nxt = lst[x]; T->to = y; lst[x] = T++;\n}\n\ninline int Abs(const int &x) {return x < 0 ? ~x + 1 : x;}\n\ninline void Insert(const int &y, int &x, const int &vi, const int &l, const int &r)\n{\n    tr[x = ++E] = tr[y]; c(x) += (vi < 0 ? -1 : 1); s(x) += vi;\n    if (l == r) return ;\n    int mid = l + r >> 1;\n    if (Abs(vi) <= mid) Insert(l(y), l(x), vi, l, mid);\n     else Insert(r(y), r(x), vi, mid + 1, r);\n}\n\ninline ll Query(const int &x, const int &l, const int &r, const int &k)\n{\n    if (l == r) return k * l;\n    // \u53ef\u80fd\u4f1a\u6709\u76f8\u540c\u7684\u4f18\u5148\u7ea7\uff0c\u5e94\u6839\u636e k \u7684\u5927\u5c0f\u800c\u4e0d\u662f\u5168\u90e8\u8bb0\u5165\u7b54\u6848\n    int mid = l + r >> 1;\n    if (k <= c(l(x))) return Query(l(x), l, mid, k);\n     else return Query(r(x), mid + 1, r, k - c(l(x))) + s(l(x)); \n}\n\n\nint main()\n{\n      m = get(); n = get(); int x, a, b, c, k, w;\n    for (int i = 1; i <= m; ++i)\n    {\n        a = get(); b = get(); c = get();\n        addEdge(a, c); addEdge(b + 1, ~c + 1); CkMax(fx, c);\n    }   \n    for (int i = 1; i <= n; ++i)\n    {\n         for (Edge *e = lst[i]; e; e = e->nxt)\n         L++, Insert(rt[L - 1], rt[L], e->to, 1, fx);\n        spj[i] = L;    \n    }\n    for (int i = 1; i <= n; ++i)\n    {\n        x = get(); a = get(); b = get(); c = get(); \n        k =((ll)a * Ans + b) % c + 1; w = rt[spj[x]];\n        put(Ans = (c(w) <= k) ? s(w) : Query(w, 1, fx, k)), putchar('\\n');\n        // \u6ce8\u610f k \u53ef\u80fd\u4f1a\u8d8a\u754c\n    }\n    return 0;\n}\n\n```",
        "postTime": 1501573986,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "# \u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u73b0\u5728\u6709\u4e00\u7fa4\u4efb\u52a1,\u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u65f6\u95f4\u548c\u4e00\u4e2a\u4f18\u5148\u7ea7,\u7ed9\u4f60\u6240\u6709\u4efb\u52a1\u7684\u5f00\u59cb\u7ed3\u675f\u65f6\u95f4\u548c\u4f18\u5148\u7ea7,\u95ee\u4f60\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u4f18\u5148\u7ea7\u6700\u5c0f\u7684k\u4e2a\u7684\u4f18\u5148\u7ea7\u7684\u548c\u662f\u591a\u5c11.\n\n## \u9898\u76ee\u5206\u6790\n\n1.\u533a\u95f4\u52a0,\u533a\u95f4\u51cf,\u5355\u70b9\u6c42\u503c.\n\n\u60f3\u5230\u533a\u95f4\u52a0\u51cf,\u5355\u70b9\u6c42\u503c,\u6211\u4eec\u5c31\u80fd\u60f3\u5230\u5dee\u5206\u6570\u7ec4.\n\n\u5982\u679c\u628a\u533a\u95f4\u6392\u5e8f\u4e4b\u540e,\u662f\u4e0d\u662f\u5c31\u662f\u53ef\u4ee5\u505a\u524d\u7f00\u548c\u5b8c\u6210?\n\n#### \u6240\u4ee5\u672c\u6587\u63d0\u51fa\u7684\u662f\u4e00\u79cd\u524d\u7f00\u548c\u6811\n\n\u4f46\u662f\u8fd9\u4e0d\u662f\u4e00\u4e2a\u6570,\u800c\u662f\u4e00\u7fa4\u6570,\u5f88\u81ea\u7136\u60f3\u5230\u6811\u5f62\u7ed3\u6784.\n\n2.\u67e5\u8be2k\u5c0f.\n\n\u7ebf\u6bb5\u6811\u5c31\u80fd\u5b9e\u73b0.\n\n3.\u7a7a\u95f4512M.\n\n\u5982\u679c\u6bcf\u4e00\u4e2a\u90fd\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\u80af\u5b9a\u4f1a\u70b8\u554a,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e2a\u5947\u602a\u7684\u4e3b\u5e2d\u6811\u4f18\u5316\u7a7a\u95f4.\n\n4.\u4f18\u5148\u7ea7\u591a,n\u5c11\n\n**\u81f3\u6b64\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u6700\u7ec8\u7684\u89e3\u6cd5:\u5148\u79bb\u6563\u5316,\u7136\u540e\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u4f18\u5148\u7ea7,\u505a\u524d\u7f00\u548c\u4e3b\u5e2d\u6811**\n\n## \u95ee\u9898\u89e3\u51b3\n\n\u9996\u5148\u505a\u79bb\u6563\u5316:\n\n```cpp\nbool comp1(Sin c,Sin v){return c.val<v.val;}\n\nsort(a+1,a+m+1,comp1);\nfor(int i=1;i<=m;++i){\n\tif(a[i].val!=a[i-1].val)\n\t\t++cntrank;\n    a[i].rank=cntrank;\n}\n```\n\n\u7136\u540e\u8003\u8651\u5230\u6211\u4eec\u7528\u7684\u662f\u524d\u7f00\u548c,\u6240\u4ee5\u5148\u6309\u65f6\u95f4\u6392\u5e8f,\u8fd9\u65f6\u5019\u7ec8\u6b62\u65f6\u95f4\u5c31\u662f\u539f\u6765\u7684\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4+1\u4e86.\n\n```cpp\nbool comp2(Sto c,Sto v){return c.pos<v.pos;}\n\nfor(int i=1;i<=m;++i){\n\tb[2*i-1].rank=a[i].rank;\n\tb[2*i-1].rnum=a[i].val;\n\tb[2*i-1].pos=a[i].from;\n\tb[2*i-1].ltt=1;\n\tb[2*i].pos=a[i].to+1;\n\tb[2*i].rnum=a[i].val;\n\tb[2*i].rank=a[i].rank;\n\tb[2*i].ltt=0;\n}\nsort(b+1,b+2*m+1,comp2);\n```\n\n\u4e4b\u540e\u5c31\u5230\u4e86~~\u7b80\u5355\u7684~~\u524d\u7f00\u548c\u4e3b\u5e2d\u6811\u7684\u6784\u9020\u4e86.\n\n\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488,\u4e00\u4e2a\u4ee3\u8868\u73b0\u5728\u5904\u7406\u5230\u54ea\u4e00\u4e2ab,\u53e6\u4e00\u4e2a\u4ee3\u8868\u73b0\u5728\u5904\u7406\u5230\u54ea\u4e00\u4e2a\u65f6\u95f4\u70b9\u4e86.\n\n\u53ef\u4ee5\u5f97\u5230:\n\n```cpp\ncntb=1;\nfor(int i=1;i<=n;++i){\n\tfor(;i==b[cntb].pos;++cntb)\n\t\t//\u5728\u4e3b\u5e2d\u6811\u4e0a\u52a0\u4e0a/\u51cf\u53bb\u5b83\u7684\u503c\n}\n```\n\n\u4f46\u662f\u8fd8\u6709\u4e2a\u95ee\u9898,\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u5361\u5230\u4f6080\u4e0a\u4e0d\u53bb.\n\n\u5982\u679c\u6211\u53bb\u91cd\u4e86\u4e4b\u540e,\u6392\u540d\u4e3aq\u7684\u70b9\u6709w\u4e2a,\u4f46\u662f\u6211\u8981\u627ek\u4e2a,k<w,\u4f60\u5c31\u4f1areturn \u5947\u5947\u602a\u602a\u7684\u4e1c\u897f.\u8fd9\u65f6\u5019\u4e24\u4e2a\u89e3\u51b3\u65b9\u6cd5:\n\n1.\u4e0d\u53bb\u91cd,\u8fd9\u6837\u81ea\u7136\u5c31\u80fd\u4fdd\u8bc1\u90fd\u662f1\u4e86.\n\n2.\u7279\u5224\u6700\u7ec8\u8282\u70b9,\u5982\u679c\u662f\u7684\u8bdd,\u5c31return k\u4e2a\u5b83\u7684\u503c.\n\n\u5b9e\u73b0:\n\n1.\u7b97\u6392\u540d\u7684\u65f6\u5019\u8fd9\u6837\u7b97\n```cpp\nfor(int i=1;i<=m;++i)\n    a[i].rank=i\n```\n\n2.\u67e5\u8be2\u51fd\u6570\u8fd9\u6837\u5199\n```cpp\nlong long query(int num,int ln,int rn,int k){\n\tif(ln==rn)\treturn k*sum[num]/total[num];\n\t//do sth.\n}\n```\n\n\u4eb2\u6d4b\u4e24\u79cd\u90fd\u53ef\u4ee5.\n\n### \u5982\u679c\u5927\u5bb6\u662f\u5361\u572880,\u53ef\u4ee5\u73b0\u5728\u56de\u53bb\u6539\u4e00\u4e0b\u8bd5\u8bd5.\n\n## \u5bf9\u62cdCode\n```cpp\n#include<bits/stdc++.h>\n#define mid ((ln+rn)>>1)\n#define lss ls[num],ln,mid\n#define rss rs[num],mid+1,rn\nusing namespace std;\nconst int Nmax = 400010;\nint ls[Nmax<<5],rs[Nmax<<5],cnt,root[Nmax<<3];long long sum[Nmax<<5],total[Nmax<<5];\nvoid Build(int &num,int ln,int rn){\n\tnum=++cnt;\n\tif(ln==rn)\n\t\treturn;\n\tBuild(lss);\n\tBuild(rss);\n}\nvoid change(int &num,int old,int ln,int rn,int pos,int val,int yy){\n\tnum=++cnt;\n\tsum[num]=sum[old]+val*yy;\n\ttotal[num]=total[old]+1*yy;\n\tls[num]=ls[old];\n\trs[num]=rs[old];\n\tif(ln==rn)\t\n\t\treturn;\n\tif(pos<=mid)\t\n\t\tchange(ls[num],ls[old],ln,mid,pos,val,yy);\n\telse \t\t  \n\t\tchange(rs[num],rs[old],mid+1,rn,pos,val,yy);\n}\nvoid copy(int &num,int old){\n\tnum=++cnt;\n\tls[num]=ls[old];\n\trs[num]=rs[old];\n\ttotal[num]=total[old];\n\tsum[num]=sum[old];\n}\nlong long query(int num,int ln,int rn,int k){\n\tif(ln==rn)\t\n\t\treturn k*sum[num]/total[num];\n\tif(total[num]<=k)\t\n\t\treturn sum[num];\n\tif(total[ls[num]]>=k)\t\n\t\treturn  query(ls[num],ln,mid,k);\n\treturn query(rs[num],mid+1,rn,k-total[ls[num]])+\n    \t   sum[ls[num]];\n}\nint m,n,cntrank,cntb=1;\nlong long last=1;\nstruct Sin{\n\tint from,to;\n\tlong long val;\n}a[Nmax];\nstruct Sto{\n\tint pos,rank;\n\tlong long rnum;\n\tbool ltt;\n}b[Nmax<<1];\nbool comp1(Sin c,Sin v){\n\treturn c.val<v.val;\n}\nbool comp2(Sto c,Sto v){\n\treturn c.pos<v.pos;\n}\nlong long p1,p2,p3,p4,p5;\nint main(){\n\tscanf(\"%d%d\",&m,&n);\n\tfor(int i=1;i<=m;++i)\n\t\tscanf(\"%d%d%lld\",&a[i].from,&a[i].to,&a[i].val);\n\tsort(a+1,a+m+1,comp1);\n\tfor(int i=1;i<=m;++i){\n\t\tif(a[i].val!=a[i-1].val)\n\t\t\t++cntrank;\n\t\tb[2*i-1].rank=cntrank;\n\t\tb[2*i-1].rnum=a[i].val;\n\t\tb[2*i-1].pos=a[i].from;\n\t\tb[2*i-1].ltt=1;\n\t\tb[2*i].pos=a[i].to+1;\n\t\tb[2*i].rnum=a[i].val;\n\t\tb[2*i].rank=cntrank;\n\t\tb[2*i].ltt=0;\n\t}\n\tBuild(root[0],1,cntrank);\n\tsort(b+1,b+2*m+1,comp2);\n\tb[2*m+1].pos=0;\n\tfor(int i=1;i<=n;++i){\n\t\tcopy(root[i],root[i-1]);\n        //\u8fd9\u4e00\u884c\u786e\u5b9e\u6709\u70b9\u957f\n\t\tfor(;i==b[cntb].pos;++cntb)\n\t\t\tchange(root[i],root[i],1,cntrank,b[cntb].rank,b[cntb].rnum,(b[cntb].ltt?1:-1));\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%lld%lld%lld%lld\",&p1,&p2,&p3,&p4);\n\t\tp5=1+(p2*last+p3)%p4;\n\t\tlast=query(root[p1],1,cntrank,p5);\n\t\tprintf(\"%lld\\n\",last);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1521677251,
        "uid": 43931,
        "name": "SofanHe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "[Dew~](https://www.cnblogs.com/ppprseter/p/9641182.html)\n\n\u5316\u7b80\u6a21\u578b\uff0c\u7ed9\u51fa$m$\u4e2a\u4e09\u5143\u7ec4$(s,e,p)$\n\n\u8be2\u95ee$(x,k)$\u4e3a\u6ee1\u8db3$s \\le x \\le e$\u7684\u4e09\u5143\u7ec4\u7684\u524d$k$\u5927$p$\u503c\u4e4b\u548c\uff0c\u5f3a\u5236\u5728\u7ebf\n\n\u4e00\u770b\u662f\u4e00\u4e2a\u504f\u5e8f\u7c7b\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u591a\u7ef4\u6570\u636e\u7ed3\u6784\u66b4\u529b\u5d4c\u5957\uff0c\u8fd9\u4e2a\u9898\u6700\u591a\u5141\u8bb8$log^2$,\u53c8\u6709\u7b2c$k$\u5927\u8be2\u95ee\uff0c\u81ea\u7136\u7684\u60f3\u5230\u4e3b\u5e2d\u6811\u964d\u7ef4\n\n\u4f7f\u7528\u6811\u72b6\u6811\u72b6\u5957\u4e3b\u5e2d\u6811\u6c42\u89e3\n\n\u5176\u4e2d\u6811\u72b6\u6811\u72b6\u7684\u533a\u95f4\u4ee3\u8868**\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7684**$E_i$\n\n\u6811\u72b6\u6811\u72b6\u7684\u6bcf\u4e2a\u533a\u95f4\u653e\u5bf9\u5e94\u7684\u4e00\u7fa4\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u5148\u5bf9\u533a\u95f4\u6309$S_i$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u6309\u8fd9\u4e2a\u987a\u5e8f\u5efa\u4e3b\u5e2d\u6811\u5c31\u884c\u4e86\n\n\u4e3b\u5e2d\u6811\u7684\u8282\u70b9\u5b58\u79bb\u6563\uff08\u4e0d\u79bb\u6563\u4f3c\u4e4e\u4e5f\u8fc7\u4e86\uff09\u7684$p_i$\u503c\uff0c\u6ce8\u610f\u7ef4\u62a4\u4e00\u4e0b\u533a\u95f4\u548c\n\n\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5728\u6bcf\u4e2a\u6811\u72b6\u6570\u7ec4\u5bf9\u5e94\u7684\u4e3b\u5e2d\u6811\u4e0a\u4e00\u8d77\u4e8c\u5206\u5373\u53ef\uff0c\u6ce8\u610f\u91cd\u590d\u7684\u5143\u7d20\n\n**Code**\n```\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#define ll long long\nusing namespace std;\nconst int N=1e5+10;\nstruct node\n{\n    int s,t,p;\n    bool friend operator <(node n1,node n2){return n1.t>n2.t;}\n}rask[N];\nstruct RT\n{\n    int s,now;\n    RT(){}\n    RT(int s,int now){this->s=s,this->now=now;}\n    bool friend operator <(RT n1,RT n2){return n1.s<n2.s;}\n}rt;\nvector <RT> root[N];\nint cnt[N*244],ch[N*244][2],tot,n,m,mxx;ll sum[N*244];\nint max(int x,int y){return x>y?x:y;}\n#define ls ch[now][0]\n#define rs ch[now][1]\n#define ols ch[las][0]\n#define ors ch[las][1]\nvoid update(int now)\n{\n    sum[now]=sum[ls]+sum[rs];\n    cnt[now]=cnt[ls]+cnt[rs];\n}\nint build(int las,int l,int r,int pos)\n{\n    int now=++tot;\n    if(l==r)\n    {\n        cnt[now]=cnt[las]+1;\n        sum[now]=1ll*cnt[now]*l;\n        return now;\n    }\n    int mid=l+r>>1;\n    if(pos<=mid)\n    {\n        ls=build(ols,l,mid,pos);\n        rs=ors;\n    }\n    else\n    {\n        ls=ols;\n        rs=build(ors,mid+1,r,pos);\n    }\n    update(now);\n    return now;\n}\nvoid init()\n{\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=m;i++)\n        scanf(\"%d%d%d\",&rask[i].s,&rask[i].t,&rask[i].p),mxx=max(mxx,rask[i].p);\n    sort(rask+1,rask+1+m);\n    for(int i=1;i<=m;i++)\n    {\n        for(int j=i-(i&-i)+1;j<=i;j++)\n        {\n            rt=RT(rask[j].s,j);\n            root[i].push_back(rt);\n        }\n        sort(root[i].begin(),root[i].end());\n        for(int las=0,j=0;j<root[i].size();j++)\n            las=root[i][j].now=build(las,1,mxx,rask[root[i][j].now].p);\n    }\n}\nll query(int x,int pos,int k)//\u65f6\u95f4\uff0c\u524dpos\u53ef\u67e5\uff0c\u7b2ck\u503c\n{\n    int now[50],p=0;\n    for(int i=pos;i;i-=i&-i)\n    {\n        RT t=RT(x,0);\n        int j=upper_bound(root[i].begin(),root[i].end(),t)-root[i].begin()-1;\n        now[++p]=root[i][j].now;\n    }\n    int l=1,r=mxx;ll ans=0;\n    while(l<r)\n    {\n        int mid=l+r>>1,s=0;\n        for(int i=1;i<=p;i++) s+=cnt[ch[now[i]][0]];\n        if(s>=k)\n        {\n            for(int i=1;i<=p;i++) now[i]=ch[now[i]][0];\n            r=mid;\n        }\n        else\n        {\n            for(int i=1;i<=p;i++) ans+=sum[ch[now[i]][0]],now[i]=ch[now[i]][1];\n            l=mid+1,k-=s;\n        }\n    }\n    int cnt0=0;\n    for(int i=1;i<=p;i++) cnt0+=cnt[now[i]];\n    ans+=1ll*l*min(cnt0,k);\n    return ans;\n}\nvoid work()\n{\n    ll pre=1;\n    for(int pos,x,a,b,c,k,i=1;i<=n;i++)\n    {\n        scanf(\"%d%d%d%d\",&x,&a,&b,&c);\n        k=(a*(int)(pre%(1ll*c))+b)%c+1;\n        node t={0,x,0};\n        pos=upper_bound(rask+1,rask+1+m,t)-rask-1;\n        printf(\"%lld\\n\",pre=query(x,pos,k));\n    }\n}\nint main()\n{\n    init(),work();\n    return 0;\n}\n\n```\n\n--------------\n\u7136\u800c\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u4e2a\u95ee\u9898\u6709\u8fd9\u6837\u4e00\u4e2a\u66b4\u529b\n\n\u5bf9\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u90fd\u52a0\u4e0a\u8fd9\u4e2a\u4f18\u5148\u7ea7\uff0c\u5e76\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\u7136\u540e\u67e5\u8be2\u65f6\uff0c\u76f4\u63a5\u8fdb\u5165\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u67e5\u8be2\u5373\u53ef\n\n\u800c\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u6709\u4e00\u4e2a\u533a\u95f4\u52a0\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u5dee\u5206\u6570\u7ec4\u7684\u601d\u60f3\n\n\u628a\u4e09\u5143\u7ec4$(s,e,p)$\u7684$s$\u4f4d\u7f6e\u7684$p$\u503c$+1$\uff0c\u628a$e+1$\u4f4d\u7f6e$p$\u503c$-1$\uff08\u8fd9\u91cc$p$\u503c\u5728\u5bf9\u4e8e\u4f4d\u7f6e\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\uff09\n\n\u7136\u540e\u6211\u4eec\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5c31\u6c42\u8fd9\u4e9b\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u524d\u7f00\u548c\u5c31\u53ef\u4ee5\u4e86\n\n\u8fd9\u4e0d\u5c31\u662f\u4e3b\u5e2d\u6811\u5e72\u7684\u4e8b\u60c5\u5417\n\n\u4e8e\u662f\u4e4e\u95ee\u9898\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528\u4e3b\u5e2d\u6811\u505a\u4e86\n\n**Code:**\n```\n#include <cstdio>\n#include <algorithm>\n#define ll long long\nusing namespace std;\nconst int N=1e5+10;\nstruct node{int s,e,p;}rask[N];\nint a[N];\nint cnt[N*100],ch[N*100][2],root[N],tot,n,m,num;ll sum[N*100];\n#define ls ch[now][0]\n#define rs ch[now][1]\nvoid updata(int now)\n{\n    sum[now]=sum[ls]+sum[rs];\n    cnt[now]=cnt[ls]+cnt[rs];\n}\nvoid build(int &now,int l,int r,int pos,int del)\n{\n    if(!now) now=++tot;\n    if(l==r)\n    {\n        cnt[now]+=del;\n        sum[now]=1ll*cnt[now]*a[l];\n        return;\n    }\n    int mid=l+r>>1;\n    if(pos<=mid)\n        build(ls,l,mid,pos,del);\n    else\n        build(rs,mid+1,r,pos,del);\n    updata(now);\n}\nint rebuild(int x,int y)\n{\n    if(!x||!y) return x+y;\n    int now=++tot;\n    sum[now]=sum[x]+sum[y];\n    cnt[now]=cnt[x]+cnt[y];\n    ls=rebuild(ch[x][0],ch[y][0]);\n    rs=rebuild(ch[x][1],ch[y][1]);\n    return now;\n}\nvoid init()\n{\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&rask[i].s,&rask[i].e,&rask[i].p);\n        a[i]=rask[i].p;\n    }\n    sort(a+1,a+1+m);\n    ++n;\n    num=unique(a+1,a+1+m)-a-1;\n    for(int i=1;i<=m;i++)\n    {\n        rask[i].p=lower_bound(a+1,a+1+num,rask[i].p)-a;\n        build(root[rask[i].s],1,num,rask[i].p,1);\n        build(root[rask[i].e+1],1,num,rask[i].p,-1);\n    }\n    for(int i=1;i<=n;i++)\n        root[i]=rebuild(root[i-1],root[i]);\n}\nll query(int now,int l,int r,int k)\n{\n    if(l==r)\n        return 1ll*a[l]*min(k,cnt[now]);\n    int mid=l+r>>1;\n    if(cnt[ls]>=k) return query(ls,l,mid,k);\n    else return sum[ls]+query(rs,mid+1,r,k-cnt[ls]);\n}\nvoid work()\n{\n    ll pre=1;\n    for(int x,a,b,c,k,i=1;i<n;i++)\n    {\n        scanf(\"%d%d%d%d\",&x,&a,&b,&c);\n        k=(a*(int)(pre%(1ll*c))+b)%c+1;\n        printf(\"%lld\\n\",pre=query(root[x],1,num,k));\n    }\n}\nint main()\n{\n    init(),work();\n    return 0;\n}\n\n```",
        "postTime": 1536826533,
        "uid": 63727,
        "name": "ButterflyDew",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "#### \u53ef\u6301\u4e45\u5316Treap\u89e3\u6cd5\n\n\u770b\u5230\u5927\u5bb6\u90fd\u662f\u7528\u4e3b\u5e2d\u6811\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff09\u505a\u7684\uff0c\u6211\u5728\u5fc3\u4e2d\u4e3a\u60b2\u60e8\u7684\u53ef\u6301\u4e45\u5316Treap\u9ed8\u54c0\n\n\u4e3a\u4e86\u5e2e\u52a9\u53ef\u6301\u4e45\u5316Treap\u8d70\u51fa\u9634\u5f71\uff0c\u6211\u51b3\u5b9a\u5199\u4e00\u7bc7\u53ef\u6301\u4e45\u5316Treap\u7684\u9898\u89e3\n\n\n\u53ef\u6301\u4e45\u5316Treap\u548c\u4e3b\u5e2d\u6811\u53ef\u6301\u4e45\u5316\u7684\u65b9\u5f0f\u90fd\u4e00\u6837\uff0c\u901a\u8fc7\u516c\u7528\u8282\u70b9\u8282\u7701\u65f6\u95f4\u548c\u7a7a\u95f4\u3002\n\n\u6211\u4eec\u5728\u975e\u65cb\u8f6cTreap\u7684\u57fa\u7840\u4e0a\u628aSplit\u548cMerge\u4fee\u6539\u4e00\u4e0b\uff0c\u4e0d\u518d\u76f4\u63a5\u5728\u539f\u6811\u4e0a\u64cd\u4f5c\uff0c\u9700\u8981\u66f4\u6539\u7684\u70b9\uff0c\u6211\u4eec\u90fd\u590d\u5236\u4e00\u4efd\u65b0\u7684\uff0c\u7136\u540e\u5728\u65b0\u7684\u8282\u70b9\u4e0a\u8fdb\u884c\u4fee\u6539\u5373\u53ef~~\uff08\u8bf4\u5f97\u8fd9\u4e48\u8f7b\u5de7\u4f46\u8fd8\u662f\u5f88\u96be\u2026\u2026\uff09~~\u3002\n\n\n\u77e5\u9053\u4e86\u8fd9\u4e9b\u4e4b\u540e\uff0c\u6211\u4eec\u770b\u770b\u5982\u4f55\u505a\u8fd9\u4e00\u9053\u9898\u3002\n\n\u9996\u5148\uff0c\u4efb\u52a1\u5f00\u59cb\u548c\u4efb\u52a1\u7ed3\u675f\u53ef\u4ee5\u770b\u505a\u662f\u5143\u7d20\u7684\u63d2\u5165\u548c\u5220\u9664\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u65f6\u95f4\u8282\u70b9\u6392\u5e8f\uff0c\u6309\u65f6\u95f4\u4f9d\u6b21\u63d2\u5165Treap\u4e2d\uff08\u4e0d\u9700\u8981\u79bb\u6563\u5316\uff0c\u9898\u76ee\u6709\u9650\u5236\u7684\u2026\u2026\uff09\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u8be2\u95ee\u4e86\uff0c\u6211\u4eec\u627e\u5230\u8be2\u95ee\u7684\u65f6\u95f4\u7684\u90a3\u4e00\u68f5Treap\uff0c\u7136\u540e\u5728\u91cc\u9762\u67e5\u627e\u5c31\u597d\u4e86\u3002\u4e3a\u4e86\u65b9\u4fbf\u67e5\u627e\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e0bsum\uff08\u8868\u793a\u6574\u68f5\u5b50\u6811\u7684val\u503c\u548c\uff09\u548csize\uff08\u8868\u793a\u6574\u68f5\u5b50\u6811\u7684\u8282\u70b9\u6570\uff09\uff0c\u7136\u540e\u5c31\u6309\u4e00\u822cBST\u7684\u67e5\u627e\u65b9\u6cd5\u5c31\u597d\u4e86~\n\n\n\u7136\u540e\u90a3\u4e2a\u4ec0\u4e48\uff0c\u6211\u7684Split\u662f\u6309\u6392\u540d\u65ad\u5f00\u4e24\u68f5\u6811\u7684\uff0c\u6240\u4ee5\u5199\u6cd5\u53ef\u80fd\u4e0e\u7ecf\u5178\u7684\u975e\u65cb\u8f6cTreap\u4e0d\u592a\u4e00\u6837\uff0c\u81ea\u884c\u8111\u8865\n\n\n\u8b66\u544a\uff1a\u6211\u7684\u5199\u6cd5\u8dd1\u7684\u6781\u6162\uff0c\u53ef\u4ee5\u81ea\u884c\u4f18\u5316\u2026\u2026\n\nCode\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<climits>\n#include<algorithm>\nusing namespace std;\n#define N 100005\n#define lim 100\n#define ll long long\nint root[N];\nclass Treap\n{\n    public:\n    void Insert(int &r,int x)\n    {\n        int A,B,C,p=Rank(r,x);\n        Split(r,A,C,p);\n        B=New(x);\n        Merge(r,A,B);\n        Merge(r,r,C);\n    }\n    void Delete(int &r,int x)\n    {\n        int A,B,p=Rank(r,x)+1;\n        Split(r,A,B,p);\n        Erase(A);\n        Merge(r,A,B);\n    }\n    int Rank(int r,int a)\n    {\n        if(!r)return 0;\n        if(val[r]<a)return siz[ch[r][0]]+1+Rank(ch[r][1],a);\n        return Rank(ch[r][0],a);\n    }\n    int Query(int r,int x)\n    {\n        if(!r)return 0;\n        if(siz[ch[r][0]]+1<=x)\n            return sum[ch[r][0]]+val[r]+Query(ch[r][1],x-siz[ch[r][0]]-1);\n        return Query(ch[r][0],x);\n    }\n    private:\n    int cnt,ch[N*lim][2],siz[N*lim],key[N*lim];\n    ll val[N*lim],sum[N*lim];\n    void Pushup(int r)\n    {\n        siz[r]=siz[ch[r][0]]+siz[ch[r][1]]+1;\n        sum[r]=sum[ch[r][0]]+sum[ch[r][1]]+val[r];\n    }\n    int New(int x)\n    {\n        ++cnt;\n        siz[cnt]=1,val[cnt]=sum[cnt]=x,key[cnt]=rand()+rand()-rand();\n        return cnt;\n    }\n    int Copy(int x)\n    {\n        ++cnt;\n        ch[cnt][0]=ch[x][0];\n        ch[cnt][1]=ch[x][1];\n        siz[cnt]=siz[x],val[cnt]=val[x],sum[cnt]=sum[x],key[cnt]=key[x];\n        return cnt;\n    }\n    void Split(int r,int &lt,int &rt,int k)//\u6309\u6392\u540d\u5207\u5272\n    {\n        if(!r){lt=rt=0;return;}\n        int w=Copy(r);\n        if(siz[ch[r][0]]>=k)rt=w,Split(ch[r][0],lt,ch[rt][0],k);\n        else lt=w,Split(ch[r][1],ch[lt][1],rt,k-siz[ch[r][0]]-1);\n        Pushup(w);\n    }\n    void Merge(int &r,int lt,int rt)//\u5408\u5e76\n    {\n        if(!lt||!rt){r=lt^rt;return;}\n        if(key[lt]<key[rt])r=Copy(lt),Merge(ch[r][1],ch[lt][1],rt);\n        else r=Copy(rt),Merge(ch[r][0],lt,ch[rt][0]);\n        Pushup(r);\n    }\n    void Erase(int &r)//\u5220\u9664\u6700\u5927\u5143\u7d20\n    {\n        r=Copy(r);\n        if(!ch[r][1])r=ch[r][0];\n        else Erase(ch[r][1]);\n        if(r)Pushup(r);\n    }\n}S;\nint m,n;\nstruct node\n{\n    ll s;\n    int t,wh;\n    bool operator<(node b)const\n    {\n        if(t!=b.t)return t<b.t;\n        return wh<b.wh;\n    }\n}A[2*N];\nll getint()\n{\n    ll p=0;bool f=0;\n    char c=getchar();\n    while(c<'0'||c>'9')if(c=='-')f=1;else c=getchar();\n    while(c>='0'&&c<='9')p=p*10+c-'0',c=getchar();\n    if(f)p=-p;\n    return p;\n}\nint main()\n{\n    srand(0x20191629);\n    m=getint();n=getint();\n    for(int i=1;i<=m;i++)\n    {\n        int a=getint(),b=getint(),c=getint();\n        A[2*i-1].t=a;A[2*i-1].wh=1;A[2*i-1].s=c;\n        A[2*i].t=b+1;A[2*i].wh=0;A[2*i].s=c;\n    }\n    sort(A+1,A+2*m+1);\n    int p=1;\n    for(int i=1;i<=n;i++)\n    {\n        root[i]=root[i-1];\n        for(;p<=2*m&&A[p].t==i;p++)\n            if(A[p].wh)S.Insert(root[i],A[p].s);\n            else S.Delete(root[i],A[p].s);\n    }\n    ll pre=1;\n    for(int i=1;i<=n;i++)\n    {\n        int X=getint(),A=getint(),B=getint(),K=getint();\n        K=1+(A*pre+B)%K;\n        printf(\"%lld\\n\",pre=S.Query(root[X],K));\n    }\n}\n```",
        "postTime": 1513663940,
        "uid": 29815,
        "name": "ModestStarlight",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u9898\u76ee\u76f8\u5f53\u4e8e\u8981\u5199\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u67e5\u8be2\u8986\u76d6\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u7684\u7ebf\u6bb5\u4e2d\uff0c\u524d k \u5c0f\u7684\u7ebf\u6bb5\u6743\u503c\u548c\u3002\n\n\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u80fd\u88ab\u67e5\u8be2\u5230\uff0c\u67e5\u8be2\u7684\u6b21\u6570\u548c\u4f4d\u7f6e\u6570\u540c\u9636\uff0c\u65e0\u6cd5\u5229\u7528\u7ebf\u6bb5\u6811 lazytag \u4f18\u5316\uff0c\u51b5\u4e14 lazytag \u4e5f\u65e0\u6cd5\u505a\u524d k \u5c0f\u548c\u3002\n\n\u8981\u67e5\u8be2\u524d k \u5c0f\u7684\u548c\uff0c\u52bf\u5fc5\u5c31\u8981\u5bf9\u6bcf\u4e2a\u70b9\u5efa\u4e00\u68f5\u503c\u57df\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\u4e00\u4e2a\u7ebf\u6bb5\u53ef\u80fd\u5305\u542b m \u4e2a\u4f4d\u7f6e\uff0c\u66b4\u529b\u63d2\u5165\u4f1a\u9700\u8981\u66f4\u65b0 m \u7ed9\u7ebf\u6bb5\u6811\u3002\n\n\u8003\u8651\u5bf9\u4f4d\u7f6e\u5efa\u7ebf\u6bb5\u6811\uff0c\u5c06\u7ebf\u6bb5\u63d2\u5165\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u662f\u4e00\u68f5\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u8fd9\u6837\u5c31\u53ea\u9700\u8981\u6700\u591a\u66f4\u65b0$nlog(n)$ \u4e2a\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u53ef\u4ee5\u5728\u67e5\u8be2\u4e4b\u524d\u5904\u7406\u597d\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u5728\u4e8e\u5904\u7406\u67e5\u8be2\uff0c\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\u57df\u7ebf\u6bb5\u6811\u4f1a\u7531\u5176\u5230\u6839\u8def\u5f84\u4e0a\u7684\u503c\u57df\u7ebf\u6bb5\u6811\u5408\u5e76\u800c\u6765\uff0c\u7531\u4e8e\u7ebf\u6bb5\u6811\u6811\u9ad8\u7684\u5173\u7cfb\uff0c\u6700\u591a\u53ea\u4f1a\u5408\u5e76 $log(n)$ \u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u8003\u8651\u5982\u4f55\u5bf9\u4e8e\u4e00\u68f5\u503c\u57df\u7ebf\u6bb5\u6811\u6c42\u51fa\u524d k \u5c0f\u503c\u7684\u548c\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a size \u548c val\uff0c\u5206\u522b\u8868\u793a\u7ebf\u6bb5\u6570\u91cf\u548c\u5176\u6743\u503c\u548c\uff0c\u5f53 k \u5927\u4e8e\u5de6\u8fb9 size \u65f6\uff0c\u51cf\u53bb size \u52a0\u4e0a val \u5f80\u53f3\u8d70\uff0c\u5426\u5219\u5f80\u5de6\u8d70\uff0c\u4e0b\u5230\u53f6\u5b50\u8282\u70b9\u65f6\u518d\u8ba1\u7b97\u524d k \u4e2a\u7684\u8d21\u732e\u3002\n\n\u5927\u6982\u60f3\u7684\u662f\u8fd9\u6837\uff0c\u53bb\u5199\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u6b8b\u5fcd\u88ab\u5361\uff0c\u53ef\u80fd\u662f\u5e38\u6570\u5927\u7684\u539f\u56e0\uff0c\u4e5f\u53ef\u80fd\u662f\u6570\u636e\u4e25\u683c\u7684\u539f\u56e0\u3002\n\n\u4f18\u5316\u4e86\u4e00\u4e0b\u5199\u6cd5\uff0c\u52a0\u4e86 O(2)\uff0c\u8dd1\u8fc7\u4e86\u3002\n\n\u8fd9\u662f\u533a\u95f4\u7ebf\u6bb5\u6811\u5957\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u4ee3\u7801\uff1a\n\n```cpp\ntypedef long long readtype;\n\n/* Header {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long var;\ntypedef long double let;\n\nreadtype read() {\n  readtype a = 0, c = getchar(), s = 0;\n  while (!isdigit(c)) s |= c == '-', c = getchar();\n  while (isdigit(c)) a = a * 10 + c - 48, c = getchar();\n  return s ? -a : a;\n}\n/* }}} */\n\nconst int N = 1e5 + 1;\n\nstruct Line {\n  int l, r, v;\n};\n\nint m, n;\nLine line[N];\nint len, val[N];\nstruct ValTree {\n  int T, lson[N << 8], rson[N << 8];\n  int size[N << 8], sum[N << 8];\n  void modify(int p, int v, int &t, int l = 1, int r = m) {\n    if (p > r || p < l) return ;\n    if (!t) t = ++T;\n    size[t] += v, sum[t] += v * val[p];\n    if (l == r) return ;\n    int mid = (l + r) >> 1;\n    if (l == r) return ;\n    modify(p, v, lson[t], l, mid), modify(p, v, rson[t], mid + 1, r);\n  }\n  int kth(int k, int len, int *t, int l = 1, int r = m) {\n    if (l == 1 && r == len) {\n      int sizet = 0, sumt = 0;\n      for (int i = 1; i <= len; ++i) {\n        sizet += size[t[i]];\n        sumt += sum[t[i]];\n      }\n      if (sizet <= k) return sumt;\n    }\n\n    int mid = (l + r) >> 1;\n    if (l == r) {\n      int sizet = 0;\n      for (int i = 1; i <= len; ++i) \n        sizet += size[t[i]];\n      return 1ll * min(sizet, k) * val[mid];\n    }\n    int sizel = 0, suml = 0;\n    for (int i = 1; i <= len; ++i) {\n      suml += sum[lson[t[i]]];\n      sizel += size[lson[t[i]]];\n    }\n    if (k == sizel) return suml;\n\n    if (k < sizel) {\n      for (int i = 1; i <= len; ++i) \n        t[i] = lson[t[i]];\n      return kth(k, len, t, l, mid);\n    } \n    for (int i = 1; i <= len; ++i) \n      t[i] = rson[t[i]];\n    return suml + kth(k - sizel, len, t, mid + 1, r);\n  }\n} vtree;\n\nstruct Tree {\n  int root[N << 2];\n  int len, rt[N << 2];\n  void insert(int x, int y, int v, int t = 1, int l = 1, int r = n) {\n    if (x > r || y < l) return ;\n    if (x <= l && r <= y) {\n      vtree.modify(v, 1, root[t]);\n      return ;\n    }\n    int mid = (l + r) >> 1;\n    insert(x, y, v, t << 1, l, mid), insert(x, y, v, t << 1 | 1, mid + 1, r);\n  }\n  var kth(int p, int k) {\n    int t = 1, l = 1, r = n;\n    len = 0;\n    while (true) {\n      rt[++len] = root[t];\n      if (l == r) break;\n      int mid = (l + r) >> 1;\n      if (p <= mid) t = t << 1, r = mid;\n      else t = t << 1 | 1, l = mid + 1;\n    }\n    return vtree.kth(k, len, rt);\n  }\n} tree;\n\nint main() {\n#ifndef ONLINE_JUDGE\n  freopen(\"P3168.in\", \"r\", stdin);\n  freopen(\"P3168.out\", \"w\", stdout);\n#endif\n  m = read(), n = read();\n  for (int i = 1; i <= m; ++i) {\n    int l = read(), r = read(), v = read();\n    line[i] = (Line) {l, r, v};\n    val[i] = v;\n  }\n  sort(val + 1, val + m + 1);\n  len = unique(val, val + m + 1) - val - 1;\n  for (int i = 1; i <= m; ++i) \n    line[i].v = upper_bound(val + 1, val + len + 1, line[i].v) - val - 1;\n  for (int i = 1; i <= m; ++i) \n    tree.insert(line[i].l, line[i].r, line[i].v);\n  var res = 1;\n  for (int i = 1; i <= n; ++i) {\n    var x = read(), a = read(), b = read(), c = read();\n    var k = 1 + (a * res + b) % c;\n    res = tree.kth(x, k);\n    printf(\"%lld\\n\", res);\n  }\n  return 0;\n}\n```\n\n\u53d1\u73b0\u88ab\u5361\u53bb\u95ee\u4e86\u4e00\u4e0b CYJian\uff0cCYJian \u8bf4\n\n> \u5916\u5c42\u80fd\u7528\u6811\u72b6\u6570\u7ec4\u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u80fd\u7528\u7ebf\u6bb5\u6811\u4e0d\u7528 Splay\uff0c\u80fd\u7528 FHQ Treap \u4e0d\u7528 Splay\n\n\u7136\u540e\u5c31\u53bb\u5199\u4e86\u6811\u72b6\u6570\u7ec4\u5957\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7ed3\u679c\u53d1\u73b0\u5e76\u6ca1\u6709\u4f18\u5316......\u8fd8\u662f\u8981\u5f00 O(2) \u624d\u80fd\u8fc7\uff0c\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n\n```cpp\ntypedef long long readtype;\n\n/* Header {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long var;\ntypedef long double let;\n\nreadtype read() {\n  readtype a = 0, c = getchar(), s = 0;\n  while (!isdigit(c)) s |= c == '-', c = getchar();\n  while (isdigit(c)) a = a * 10 + c - 48, c = getchar();\n  return s ? -a : a;\n}\n/* }}} */\n\nconst int N = 1e5 + 1;\n\nstruct Line {\n  int l, r, v;\n};\n\nint m, n;\nLine line[N];\nint len, val[N];\nint cnt, rt[N];\nstruct ValTree {\n  int T, lson[N << 8], rson[N << 8];\n  int size[N << 8], sum[N << 8];\n  void insert(int p, int v, int &t, int l = 1, int r = len) {\n    if (p > r || p < l) return ;\n    if (!t) t = ++T;\n    size[t] += v, sum[t] += v * val[p];\n    if (l == r) return ;\n    int mid = (l + r) >> 1;\n    insert(p, v, lson[t], l, mid), insert(p, v, rson[t], mid + 1, r);\n  }\n  int kth(int k, int l = 1, int r = len) {\n    if (l == 1 && r == len) {\n      int sizet = 0, sumt = 0;\n      for (int i = 1; i <= cnt; ++i) {\n        sizet += size[rt[i]];\n        sumt += sum[rt[i]];\n      }\n      if (sizet <= k) return sumt;\n    }\n\n    int mid = (l + r) >> 1;\n    if (l == r) {\n      int sizet = 0;\n      for (int i = 1; i <= cnt; ++i)\n        sizet += size[rt[i]];\n      return min(k, sizet) * val[mid];\n    }\n\n    int sizel = 0, suml = 0;\n    for (int i = 1; i <= cnt; ++i) {\n      sizel += size[lson[rt[i]]];\n      suml += sum[lson[rt[i]]];\n    }\n    if (k == sizel) return suml;\n\n    if (k < sizel) {\n      for (int i = 1; i <= cnt; ++i) rt[i] = lson[rt[i]];\n      return kth(k, l, mid);\n    }\n    for (int i = 1; i <= cnt; ++i) rt[i] = rson[rt[i]];\n    return suml + kth(k - sizel, mid + 1, r);\n  }\n} vtree;\nstruct TreeArray {\n  int root[N];\n  void modify(int t, int p, int v) {\n    for (int i = t; i <= n; i += i & -i)\n      vtree.insert(p, v, root[i]);\n  }\n  int query(int t, int k) {\n    cnt = 0;\n    for (int i = t; i; i -= i & -i) rt[++cnt] = root[i];\n    return vtree.kth(k);\n  }\n} arr;\n\nint main() {\n#ifndef ONLINE_JUDGE\n  freopen(\"P3168.in\", \"r\", stdin);\n  freopen(\"P3168.out\", \"w\", stdout);\n#endif\n  m = read(), n = read();\n  for (int i = 1; i <= m; ++i) {\n    int l = read(), r = read(), v = read();\n    line[i] = (Line) {l, r, v}, val[i] = v;\n  }\n  sort(val + 1, val + m + 1);\n  len = unique(val + 1, val + m + 1) - val - 1;\n  for (int i = 1; i <= m; ++i) {\n    int p = upper_bound(val + 1, val + len + 1, line[i].v) - val - 1;\n    arr.modify(line[i].l, p, 1);\n    arr.modify(line[i].r + 1, p, -1);\n  }\n  var res = 1;\n  for (int i = 1; i <= n; ++i) {\n    var x = read(), a = read(), b = read(), c = read();\n    var k = 1 + (a * res + b) % c;\n    res = arr.query(x, k);\n    printf(\"%lld\\n\", res);\n  }\n  return 0;\n}\n```\n\n\u6b63\u89e3\u662f\u5dee\u5206+\u4e3b\u5e2d\u6811\uff0c\u7531\u4e8e\u7ebf\u6bb5\u4e00\u5f00\u59cb\u662f\u7ed9\u51fa\u7684\uff0c\u6240\u4ee5\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u5c06\u7ebf\u6bb5\u63d2\u5165\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5dee\u5206\u4e00\u4e0b\uff0c\u5728\u5de6\u7aef\u70b9\u63d2\u5165\u6570\u503c\uff0c\u5728\u53f3\u7aef\u70b9\u53f3\u4fa7\u5220\u9664\u6570\u503c\uff0c\u5728\u8be2\u95ee\u4e4b\u524d\u5c31\u53ef\u4ee5\u5904\u7406\u51fa\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n\u5f53\u7136\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u6211\u4eec\u9700\u8981\u89e3\u51b3\uff0c\u666e\u901a\u7684\u5355\u70b9\u4fee\u6539\u4e3b\u5e2d\u6811\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ef\u80fd\u8981\u4fee\u6539\u5176\u6811\u4e0a\u8d85\u8fc7\u4e00\u4e2a\u53f6\u5b50\u7684\u503c\uff0c\u800c\u4e00\u6b21\u666e\u901a\u7684\u66f4\u65b0\u53ea\u4f1a\u66f4\u65b0\u6811\u4e0a\u7684\u4e00\u6761\u94fe\u3002\n\n\u8fd9\u91cc\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002\n\n\u7b2c\u4e00\u79cd\u662f\u5c06\u6240\u8981\u66f4\u65b0\u7684\u53f6\u5b50\u62c6\u5f00\u6765\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u5411\u4e3b\u5e2d\u6570\u4e2d\u63d2\u5165\u82e5\u5e72\u6b21\uff0c\u4ee5\u6700\u540e\u4e00\u6b21\u63d2\u5165\u7684\u7ed3\u679c\u4f5c\u4e3a\u5f53\u524d\u4f4d\u7f6e\u7684\u7ed3\u679c\u3002\n\n\u7b2c\u4e8c\u79cd\u662f\u4e00\u6b21\u63d2\u5165\u6240\u6709\u7684\u53f6\u5b50\uff0c\u9002\u5f53\u5730\u4fee\u6539\u6211\u4eec\u7684\u4e3b\u5e2d\u6811\u63d2\u5165\u64cd\u4f5c\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u4e2a\u53f6\u5b50\u90fd\u80fd\u63d2\u5165\u5230\u3002\n\n\u6211\u91c7\u7528\u7684\u662f\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u4e00\u662f\u56e0\u4e3a\u597d\u5199\uff0c\u4e8c\u662f\u56e0\u4e3a\u7b2c\u4e00\u79cd\u62c6\u5206\u6811\u4e0a\u4fee\u6539\u7684\u65b9\u6cd5\u9700\u8981\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\uff0c\u4f1a\u65b0\u5efa\u5f88\u591a\u76f8\u540c\u7684\u8def\u5f84\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ntypedef long long readtype;\n\n/* Header {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long var;\ntypedef long double let;\n\nreadtype read() {\n  readtype a = 0, c = getchar(), s = 0;\n  while (!isdigit(c)) s |= c == '-', c = getchar();\n  while (isdigit(c)) a = a * 10 + c - 48, c = getchar();\n  return s ? -a : a;\n}\n/* }}} */\n\nconst int N = 1e5 + 1;\n\nstruct Line {\n  int l, r, v;\n};\n\nint m, n;\nLine line[N];\nint len, val[N];\nint top, fi[N], ne[N << 1], to[N << 1], co[N << 1];\nstruct ValTree {\n  int T, lson[N << 8], rson[N << 8];\n  int size[N << 8], sum[N << 8];\n  void insert(int p, int rt, int &t, int l = 1, int r = len) {\n    bool have = false;\n    int csize = 0, csum = 0;\n    for (int i = fi[p]; i; i = ne[i]) {\n      if (l <= to[i] && to[i] <= r) {\n        have = true;\n        csize += co[i], csum += co[i] * val[to[i]];\n      }\n    }\n    t = ++T, lson[t] = lson[rt], rson[t] = rson[rt];\n    size[t] = size[rt] + csize, sum[t] = sum[rt] + csum;\n    if (!have) return ;\n\n    if (l == r) return ;\n    int mid = (l + r) >> 1;\n    insert(p, lson[rt], lson[t], l, mid);\n    insert(p, rson[rt], rson[t], mid + 1, r);\n  }\n  int kth(int k, int t, int l = 1, int r = len) {\n    if (l == 1 && r == len && size[t] <= k) return sum[t];\n    int mid = (l + r) >> 1;\n    if (l == r) return min(k, size[t]) * val[mid];\n\n    if (k == size[lson[t]]) return sum[lson[t]];\n    if (k < size[lson[t]]) return kth(k, lson[t], l, mid);\n    return sum[lson[t]] + kth(k - size[lson[t]], rson[t], mid + 1, r);\n  }\n} vtree;\nint cnt, root[N];\n\nvoid add(int u, int v, int w);\n\nint main() {\n#ifndef ONLINE_JUDGE\n  freopen(\"P3168.in\", \"r\", stdin);\n  freopen(\"P3168.out\", \"w\", stdout);\n#endif\n  m = read(), n = read();\n  for (int i = 1; i <= m; ++i) {\n    int l = read(), r = read(), v = read();\n    line[i] = (Line) {l, r, v}, val[i] = v;\n  }\n  sort(val + 1, val + m + 1);\n  len = unique(val + 1, val + m + 1) - val - 1;\n  for (int i = 1; i <= m; ++i) {\n    int p = upper_bound(val + 1, val + len + 1, line[i].v) - val - 1;\n    add(line[i].l, p, 1);\n    add(line[i].r + 1, p, -1);\n  }\n\n  for (int i = 1; i <= n; ++i) vtree.insert(i, root[i - 1], root[i]);\n\n  var res = 1;\n  for (int i = 1; i <= n; ++i) {\n    var x = read(), a = read(), b = read(), c = read();\n    var k = 1 + (a * res + b) % c;\n    res = vtree.kth(k, root[x]);\n    printf(\"%lld\\n\", res);\n  }\n  return 0;\n}\n\nvoid add(int u, int v, int w) {\n  ne[++top] = fi[u], fi[u] = top, to[top] = v, co[top] = w;\n}\n```\n\n\u5f53\u7136\uff0c\u8fd9\u4e2a\u505a\u6cd5\u662f\u9700\u8981\u5c06\u533a\u95f4\u79bb\u7ebf\u7684\uff0c\u5982\u679c\u9700\u8981\u652f\u6301\u52a8\u6001\u63d2\u5165\u533a\u95f4\uff0c\u90a3\u4e48\u5c31\u53ea\u80fd\u7528\u4e0a\u9762\u7684\u4e24\u79cd\u6811\u5957\u6811\u4e86\u3002",
        "postTime": 1588552043,
        "uid": 20522,
        "name": "ccviolett",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u4e4b\u524d\u7684\u4eba\u4e3a\u5565\u90fd\u8981\u79bb\u6563\u5316\uff1f\n\n\u5dee\u5206\u4ee5\u540e\u8dd1\u4e00\u904d\u4e3b\u5e2d\u6570\u5c31\u597d\u4e86\n\nPS\uff1a\u628a\u6743\u503c\u7ebf\u6bb5\u6811yy\u6210\u6570\u7ec4\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5148\u533a\u95f4\u4fee\u6539\uff0c\u540e\u5355\u70b9\u67e5\u8be2\uff0c\u8fd9\u4e1c\u897f\u4e0d\u662f\u5dee\u5206\u5417\uff1f\n\n\u4e0d\u7528\u79bb\u6563\u5316\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#define ll long long\nusing namespace std;\n\nconst int N=2e5+5,M=7e6+5;\nint n,m,rt[N],ls[M],rs[M],mx,c[M];\nint cnt,to[N],he[N],nxt[N],_to[N],_he[N],_nxt[N];\nll s[M],lst;\n\ninline void add(int u,int v) {\n\tto[++cnt]=v,nxt[cnt]=he[u],he[u]=cnt;\n}\n\ninline void edd(int u,int v) {\n\t_to[++cnt]=v,_nxt[cnt]=_he[u],_he[u]=cnt;\n}\n\nvoid bld(int &p,int l,int r,int x,int k) {\n\tls[++cnt]=ls[p],rs[cnt]=rs[p],\n\ts[cnt]=s[p]+x*k,c[cnt]=c[p]+k,p=cnt;\n\tif(l==r) {\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(x<=mid) {\n\t\tbld(ls[p],l,mid,x,k);\n\t} else {\n\t\tbld(rs[p],mid+1,r,x,k);\n\t}\n}\n\nll sum(int p,int l,int r,int k) {\n\tif(l==r) {\n\t\treturn min(s[p],(ll)k*l);\n\t}\n\tint mid=l+r>>1,d=c[ls[p]];\n\tif(d>=k) {\n\t\treturn sum(ls[p],l,mid,k);\n\t} else {\n\t\treturn sum(rs[p],mid+1,r,k-d)+s[ls[p]];\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\",&m,&n);\n\twhile(m--) {\n\t\tint u,v,k; \n\t\tscanf(\"%d%d%d\",&u,&v,&k);\n\t\tadd(u,k),edd(v+1,k); mx=max(mx,k);\n\t}\n\tfor(int i=1;i<=n;i++) {\n\t\trt[i]=rt[i-1];\n\t\tfor(int e=he[i];e;e=nxt[e]) {\n\t\t\tbld(rt[i],1,mx,to[e],1);\n\t\t}\n\t\tfor(int e=_he[i];e;e=_nxt[e]) {\n\t\t\tbld(rt[i],1,mx,_to[e],-1);\n\t\t}\n\t}\n\tlst=1;\n\tfor(int i=1;i<=n;i++) {\n\t\tint x,a,b,c,k; \n\t\tscanf(\"%d%d%d%d\",&x,&a,&b,&c);\n\t\tk=((ll)a*lst+b)%c+1;\n\t\tprintf(\"%lld\\n\",lst=sum(rt[x],1,mx,k));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1556105079,
        "uid": 18657,
        "name": "11223344w",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P3168)\n\n\u4e3b\u5e2d\u6811\u677f\u5b50\uff0c\u628a\u4e00\u4e2aS\u5230E\u7684\u64cd\u4f5c\u770b\u6210\u5728S\u65f6\u52a01\uff0cT+1\u65f6\u51cf1\uff0c\u7136\u540e\u628a\u64cd\u4f5c\u6309\u7167\u65f6\u95f4\u6392\u5e8f\uff0c\u5b58\u4e00\u4e0b\u6bcf\u4e2a\u65f6\u95f4\u70b9\u7684\u6700\u540e\u4e00\u68f5\u6811\u7684\u6839\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nstruct point{\n\tint t,ad;\n\tlong long p;\n}num[200001];\nbool cmp(point a,point b){\n\treturn a.t<b.t;\n}\nint root[200001],end[100001],lson[5000001],rson[5000001],size[5000001],cnt,n,m,x;\nlong long k,a,b,c,pre=1,val[5000001];\nvoid add(int &pos,int pre,int l,int r,int ad,int num){\n\tpos=++cnt;\n\tlson[pos]=lson[pre];\n\trson[pos]=rson[pre];\n\tval[pos]=val[pre];\n\tsize[pos]=size[pre];\n\tval[pos]+=(long long)num*ad;\n\tsize[pos]+=ad;\n\tif(l==r)return;\n\tif((l+r)>>1>=num)add(lson[pos],lson[pre],l,(l+r)>>1,ad,num);\n\telse add(rson[pos],rson[pre],((l+r)>>1)+1,r,ad,num);\n}\nlong long query(int pos,int l,int r,int k){\n\tif(size[pos]<=k)return val[pos];\n\tif(l==r)return (long long)l*(long long)k;\n\tif(size[lson[pos]]>=k)return query(lson[pos],l,(l+r)>>1,k);\n\telse return query(rson[pos],((l+r)>>1)+1,r,k-size[lson[pos]])+val[lson[pos]];\n}\nint main(){\n\tscanf(\"%d%d\",&m,&n);\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d%lld\",&num[i*2-1].t,&num[i*2].t,&num[i*2-1].p),num[i*2].p=num[i*2-1].p,num[i*2].t++,num[i*2-1].ad=1,num[i*2].ad=-1;\n\tstd::sort(num+1,num+m*2+1,cmp);\n\tfor(int i=1,j=1;i<=n;i++){\n\t\twhile(num[j].t==i&&j<=m*2)\n\t\t\tadd(root[j],root[j-1],1,10000000,num[j].ad,num[j].p),j++;\n\t\tend[i]=root[j-1];\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%lld%lld%lld\",&x,&a,&b,&c);\n\t\tk=1+(a*pre+b)%c;\n\t\tprintf(\"%lld\\n\",pre=query(end[x],1,10000000,(int)k));\n\t}\n}\n```",
        "postTime": 1536068772,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP3168 [CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf"
    },
    {
        "content": "\u5c5e\u4e8e\u7a0d\u52a0\u4fee\u6539\u7684\u4e3b\u5e2d\u6811\u6a21\u677f\u9898\u3002\n\n[\u4e3b\u5e2d\u6811\u57fa\u7840\u4f20\u9001\u95e8\u3002](http://blog.csdn.net/no1\\_terminator/article/details/77601599)\n\n\u597d\u4e86\uff0c\u8bf4\u8bf4\u8fd9\u9053\u9898\u5427\u3002\u5728\u539f\u5148\u6c42\u524dk\u5927\u7684\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684size\uff1a\u6570\u5b57\u4e2a\u6570\u4e0a\u52a0\u4e0a\u7ef4\u62a4\u4e00\u4e2asum\uff1a\u6570\u5b57\u7684\u548c\u5c31\u597d\u4e86\u3002\n\n\u8fd0\u7528\u5dee\u5206\u601d\u60f3\uff0c\u5c06\u533a\u95f4\u7684\u7d2f\u52a0\u4fee\u6539\u6539\u4e3a\u4e24\u4e2a\u70b9\u7684\u4fee\u6539\uff0c\u7136\u540e\u524d\u7f00\u548c\u4e00\u4e0b\u5c31\u662f\u884c\u4e86\u3002\n\n\u5373[st,en]+sum=a[st]+sum,a[en+1]-sum,s[en]=a[1]+.....a[en].\n\n\u8fd9\u5c31\u628asum\u7ef4\u62a4\u597d\u4e86\uff0c\u7531\u4e8e\u8981\u6c42\u7b2ck\u5c0f\uff0c\u6240\u4ee5\u8fd8\u8981\u7ef4\u62a4\u4e00\u4e2asize\u3002\n\n\u9898\u76ee\u5206\u6790\u8d77\u6765\u4e0d\u662f\u5f88\u96be\u3002\u4e3b\u5e2d\u6811\u53ea\u8981\u7406\u89e3\u7684\u539f\u7406\uff0c\u4ee3\u7801\u7684\u7075\u6d3b\u6027\u548c\u53ef\u8bfb\u6027\u90fd\u5f88\u5f3a\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int N=100010;\nconst int M=N*40;\nstruct Task{\n    int end,val,tag;\n    bool operator < (const Task &rhs) const{\n        return end<rhs.end;\n    }\n    Task(int end,int val,int tag):end(end),val(val),tag(tag){}\n    Task(){}\n}b[N*3];\nstruct President_Tree{\n    LL sum,size;\n    int L,R;\n}T[M];\nint root[N],n,m,T_cnt=1,totm=0,a[N];\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\nvoid insert(int &now,int x,int index,int l=1,int r=n){\n    T[T_cnt++]=T[now];now=T_cnt-1;\n    T[now].size+=(LL)index;\n    T[now].sum+=(LL)index*a[x];\n    if (l==r)return;\n    int mid=(l+r)>>1;\n    if (x<=mid)insert(T[now].L,x,index,l,mid);\n        else insert(T[now].R,x,index,mid+1,r);\n}\nLL query(int now,int k,int l=1,int r=n){\n    if (l==r)return T[now].sum/T[now].size*(LL)k;\n    int t=T[T[now].L].size,mid=(l+r)>>1;\n    if (k<=t)return query(T[now].L,k,l,mid);\n        else return T[T[now].L].sum+query(T[now].R,k-t,mid+1,r);\n}\nint main(){\n    m=read(),n=read();\n    for (int i=1;i<=m;i++){\n        int x=read(),y=read(),z=read();\n        b[++totm]=Task(x,z,1);\n        b[++totm]=Task(y+1,z,-1);\n        a[i]=z;\n    }\n    sort(a+1,a+m+1);\n    sort(b+1,b+totm+1);\n    root[0]=0;\n    for (int i=1,j=1;i<=n;i++){\n        root[i]=root[i-1];\n        for (;j<=totm && b[j].end==i;j++){\n            int rk=lower_bound(a+1,a+n+1,b[j].val)-a;\n            insert(root[i],rk,b[j].tag);\n        }\n    }\n    LL ans=1;\n    for (int i=1;i<=n;i++){\n        LL x=read(),a=read(),b=read(),c=read();\n        LL kth=(a*ans+b)%c+1;\n        if (kth>=T[root[x]].size)ans=T[root[x]].sum;\n            else ans=query(root[x],kth);\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1503891755,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u8fd9\u662f\u7528\u6811\u72b6\u6570\u7ec4\u6c42**\u5dee\u5206\u524d\u7f00\u548c**+\u4e3b\u5e2d\u6811\u597d\u9898\u3002\n\n\n------------\n\n\n\u5dee\u5206\u6570\u7ec4\u662f\u4ec0\u4e48\uff1f\n\n\u8bbe$a$\u4e3a\u539f\u6570\u5217\uff0c$b$\u4e3a\u5dee\u5206\u6570\u7ec4\u3002\n\n\u4ee4$b[i]=a[i]-a[i-1]$\u3002\u7279\u6b8a\u7684\uff0c$b[1]=a[1]$(\u65b9\u4fbf\u5904\u7406)\n\n\u5219\u6709:$\\sum_{i=1}^x b[i]=a[i]$(\u88c2\u9879\u76f8\u6d88)\n\n\n\n------------\n\u7531\u4e8e\u6bcf\u6b21\u5904\u7406\u7684$[l,r]$\u533a\u95f4\u5f88\u5927\uff0c\u4e0d\u53ef\u80fd$O(n\\log n)$\u53bb\u5904\u7406\u3002\n\u4f46\u662f\u5b83\u53c8\u662f\u533a\u95f4\u52a0\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e3b\u5e2d\u6811\u3002\n\n\n\n------------\n\u5173\u4e8e\u6570\u636e\u8303\u56f4\uff0c\u8d60\u9001\u4e00\u4e2a\u7b97\u7c97\u7565\u6570\u636e\u8303\u56f4\u7684\u7a0b\u5e8f\u3002\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=1e5+10;\nll s[N],n,ans;\nint main() {\n\tn=N-10;s[1]=0;\n\tfor(ll i=1,j=2,jj;j<=n;j++) {\n\t\tjj=(1<<(i-1))+j-1;\n\t\tfor(   ;j<=min(n,jj);j++)\n\t\t\ts[j]=s[j-1]+i;\n\t\tj=jj;\n\t}\n\tfor(int i=1,j;i<=n;i++) {\n\t\tj=i&-i;ans+=18LL*j-s[j];\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\u4e0a\u9762\u7684\u4ee3\u7801\u6709\u70b9\u7c97\u7cd9\uff0c\u6240\u4ee5\u6211\u4e00\u822c\u518d\u52a0\u4e0a10N\u7684\u5927\u5c0f\u3002\n\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\n#define g getchar()\nusing namespace std;\ntypedef long long ll;\nconst int N=1e5+10;\n//\u5feb\u8bfb\u5feb\u5199 \nvoid qr(int &x) {\n\tchar c=g;x=0;\n\twhile(!isdigit(c))c=g;\n\twhile(isdigit(c))x=x*10+c-'0',c=g;\n}\nvoid write(ll x) {\n\tif(x/10)write(x/10);\n\tputchar(x%10+'0');\n}\nvoid pri(ll x) {write(x);puts(\"\");}\nint n,m,L[N],R[N],b[N],p[N]; ll ans;\n//\u79bb\u6563\u5316 \nbool cmp(int x,int y){return b[x]<b[y];}\nvoid disc() {\n\tsort(p+1,p+n+1,cmp);\n\tint &l=p[0]=0;\n\tfor(int i=1,d=b[p[1]]-1;i<=n;i++)\t\n\t\tif(b[p[i]]!=d)d=b[p[i]],b[p[i]]=++l,p[l]=d;\n\t\telse b[p[i]]=l;\n}\n//\u5927\u5757\u4e3b\u5e2d\u6811\u4ee3\u7801 \nstruct node{int l,r,c;ll s;}tr[N*160];int len,root[N];\nvoid update(int l,int r,int &x,int pos,int d) {\n\tif(!x)x=++len; \t\n\ttr[x].c+=d; tr[x].s+=d*p[pos];\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)update(l,mid,tr[x].l,pos,d);\n\telse \t  update(mid+1,r,tr[x].r,pos,d);\n}\nint d[22];\nvoid query(int l,int r,int k) {\n\tif(l==r){ans+=1LL*k*p[l];return;}\n\tint mid=(l+r)>>1;\n\tint s;ll sum;s=sum=0;\n\tfor(int i=1;i<=d[0];i++)s+=tr[tr[d[i]].l].c,sum+=tr[tr[d[i]].l].s;\n\tif(k<=s) {\n\t\tfor(int i=1;i<=d[0];i++)d[i]=tr[d[i]].l;\n\t\tquery(l,mid,k);\n\t}\n\telse {\n\t\tans+=sum;\n\t\tfor(int i=1;i<=d[0];i++)d[i]=tr[d[i]].r;\n\t\tquery(mid+1,r,k-s);\n\t}\n}\n//\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5dee\u5206 \nvoid up(int x,int pos,int d){for(   ;x<=n;x+=x&-x)update(1,p[0],root[x],pos,d); }\nvoid down(int *a,int x){a[0]=0;for(   ;x;x-=x&-x)a[++a[0]]=root[x]; }//\u53d6\u7f16\u53f7\nint main() {\n\tqr(n);qr(m);\n\tfor(int i=1;i<=n;i++)\n\t\tqr(L[i]),qr(R[i]),qr(b[i]),p[i]=i;\n\tdisc();\n\t\n\tfor(int i=1;i<=n;i++)\n\t\tup(L[i],b[i],1),up(R[i]+1,b[i],-1);\n\t\n\tans=1;\n\twhile(m--) {\n\t\tint x,a,b,c,s;ll sum;qr(x);qr(a);qr(b);qr(c);\n\t\ta=(1ll*a*ans+b)%c+1;\n\t\tdown(d,x);\n\t\ts=sum=0;\n\t\tfor(int i=1;i<=d[0];i++)s+=tr[d[i]].c,sum+=tr[d[i]].s;\n\t\tif(a>=s)pri(ans=sum);\n\t\telse ans=0,query(1,p[0],a),pri(ans);\n\t}\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1565914942,
        "uid": 118826,
        "name": "2018LZY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u6765\u81ea\u6211\u7684\u535a\u5ba2\uff1ahttp://blog.csdn.net/YihAN\\_Z/article/details/53998106\n\n\n\u6b22\u8fce\u5230\u672c\u6c99\u8336\u7684\u535a\u5ba2\u8f6c\u8f6c\n\n\n\n\u9898\u76ee\u5927\u610f\uff1a\u6709n\u4e2a\u4efb\u52a1\u6301\u7eedm\u79d2\uff0c\u6bcf\u4e2a\u4efb\u52a1\u4ecesi\u79d2\u5f00\u59cb\u5230ei\u79d2\u7ed3\u675f\u4e14\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7pi\uff0c\u6709m\u4e2a\u8be2\u95ee\uff0c\u56de\u7b54\u7b2cxi\u79d2\u65f6\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1\u4e2d\u4f18\u5148\u7ea7\u524dk\u5c0f\u548c\uff0c\u5f3a\u5236\u5728\u7ebf\u3002\n\n\n\n\u6839\u636e\u65f6\u95f4\u7684\u53d8\u5316\uff0c\u4efb\u52a1\u4f1a\u5f00\u59cb\u6216\u7ed3\u675f\u3002\u6211\u4eec\u60f3\u77e5\u9053\u4efb\u4e00\u65f6\u523b\u4efb\u52a1\u7684\u6267\u884c\u60c5\u51b5\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811[^1]\u3002\n\n\n\n\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff0c\u66b4\u529b\u5730\u60f3\u5c31\u662f\u6bcf\u4e2a\u7248\u672c\u5b8c\u5168\u590d\u5236\u4e00\u4e2a\u4fdd\u5b58\u8d77\u6765\uff0c\u4f46\u662f\u7a7a\u95f4\u4e0d\u591f\u7528\u3002\n\n\n\u5982\u679c\u6bcf\u6b21\u53ea\u662f\u4fee\u6539\u4e00\u4e2a\u70b9\u7684\u8bdd\uff0c\u5728\u7ebf\u6bb5\u6811\u4e2d\u4f1a\u6709logn\u4e2a\u70b9\u7684\u4fe1\u606f\u53d1\u751f\u53d8\u5316\uff0c\u5176\u4f59\u4ecd\u7136\u548c\u524d\u4e00\u79d2\u4e00\u6837\uff0c\u8fd9\u6837\u7684\u8bdd\u76f4\u63a5\u590d\u7528\u524d\u4e00\u79d2\u7684\u7248\u672c\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4ecen^2logn\u53d8\u4e3anlog^2n.\n\n\n\n\u5177\u4f53\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\n\n\n\u5148\u5728\u7b2c0\u79d2\u521b\u5efa\u4e00\u4e2a\u7a7a\u7248\u672c\u3002\u628a\u6bcf\u4e00\u4e2a\u4efb\u52a1\u5206\u6210\u4e24\u4e2a\u64cd\u4f5c\uff1a\u5728\u7b2csi\u79d2\u63d2\u5165\u5728ei+1\u79d2\u5220\u9664\u3002\u628a\u64cd\u4f5c\u6309\u7167\u65f6\u95f4\u6392\u5e8f\u7136\u540e\u6784\u5efa\u6bcf\u4e00\u79d2\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u63d2\u5165\u6216\u5220\u9664\u65f6\u8981\u65b0\u5efa\u7ed3\u70b9\u3002\n\n\n\n\u6743\u503c\u8303\u56f4\u592a\u5927\u8fd9\u91cc\u9700\u8981\u79bb\u6563\u5316\u3002\n\n\n\u5728\u590d\u5236\u7ed3\u70b9\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u8bb0\u590d\u5236\u513f\u5b50\u6307\u9488\u3002\n\n\nk\u8981\u5f00long long\u3002\n\n\n\u7ebf\u6bb5\u6811\u67e5\u627e\u7b2ck\u5927\u65f6\u9012\u5f52\u5230\u70b9\u6811\u4e0a\u8981\u8fdb\u884c\u8ba8\u8bba\u3002\n\n\n\u6539\u4e86\u4e00\u4e0a\u5348\u3002\u79bb\u6563\u5316\u8fa3\u773c\u775b\u51d1\u5408\u770b\u54270.0\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#define N 100005\n#define INF 1e7\nusing namespace std;\ntypedef long long LL;\ninline int abs(int x) {return x>0 ? x : -x;}\nint n,m;\nLL ans=1;\nstruct Segment_Tree{\n    Segment_Tree *ch[2];\n    int s;\n    LL sum;\n    Segment_Tree(Segment_Tree* x) {\n        if(x==NULL) s=0 , sum=0 , ch[0]=ch[1]=NULL;\n        else s=x->s , sum=x->sum , ch[0]=x->ch[0] , ch[1]=x->ch[1];\n    }\n}*root[N];\nint disc[N];\ntypedef Segment_Tree ST;\nvoid Init(ST*& x,int l,int r) {\n    x=new ST(NULL);\n    if(l==r) return ;\n    int mid=l+r>>1;\n    Init(x->ch[0],l,mid); Init(x->ch[1],mid+1,r);\n    return ;\n}\nvoid Insert(ST*& x,int v,int l,int r) {\n    ST* cach=x;\n    x=new ST(cach);\n    int flag=(v>0?1:-1);\n    x->s+=flag , x->sum+=flag*disc[abs(v)];\n    if(l==r) return ;\n    int mid=l+r>>1;\n    if(abs(v)<=mid) Insert(x->ch[0],v,l,mid);\n    else Insert(x->ch[1],v,mid+1,r);\n    return ;\n}\nLL Query(ST* x,int k,int l,int r) {\n    if(k>=x->s) return x->sum;\n    if(l==r) return (x->sum/x->s)*k;\n    int mid=l+r>>1;\n    if(x->ch[0]!=NULL) {\n        if(x->ch[0]->s>=k) return Query(x->ch[0],k,l,mid);\n        return x->ch[0]->sum+Query(x->ch[1],k-x->ch[0]->s,mid+1,r);\n    }\n    return Query(x->ch[1],k,mid+1,r);\n}\nstruct Operation {\n    int ord,val;\n    Operation(int x=0,int y=0):ord(x),val(y){}\n    bool operator < (const Operation& rhs) const { return ord<rhs.ord; }\n}p[N*2];\ntypedef Operation Node;\nNode q[N];\nbool cmp(Node x,Node y) {return x.val<y.val;}\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    Init(root[0],1,n);\n    for(int i=1;i<=n;i++) {\n        int l,r,pri;\n        scanf(\"%d%d%d\",&l,&r,&pri);\n        p[i]=Operation(l,pri);\n        p[i+n]=Operation(r+1,-pri);\n        q[i]=Node(i,pri);\n    }\n    sort(q+1,q+1+n,cmp);\n    for(int i=1;i<=n;i++) {\n        int cach;\n        if(q[i].val!=q[i-1].val) cach=i;\n        else cach=p[q[i-1].ord].val;\n        disc[cach]=q[i].val;\n        p[q[i].ord].val=cach;\n        p[q[i].ord+n].val=-cach;\n    }\n    sort(p+1,p+1+2*n);\n    LL k=1;\n    for(int i=1;i<=m;i++) {\n        root[i]=root[i-1];\n        while(p[k].ord==i && k<=n*2) Insert(root[i],p[k++].val,1,n);\n    }\n    for(int i=1;i<=m;i++) {\n        int x,a,b,c;\n        scanf(\"%d%d%d%d\",&x,&a,&b,&c);\n        k=1+(a*ans+b)%c;\n        printf(\"%lld\\n\",ans=Query(root[x],k,1,n));\n    }\n    return 0;\n}\n```\n\n[^1]:\u6743\u503c\u7ebf\u6bb5\u6811\u662f\u5565\uff1f\u5c31\u662f\u7ed3\u70b9\u7f16\u53f7\u4e0d\u518d\u4ee3\u8868\u5e8f\u5217\u7f16\u53f7\uff0c\u800c\u662f\u6743\u503c\u5927\u5c0f\uff0c\u5e38\u5728\u6bcf\u4e2a\u7ed3\u70b9\u5904\u7ef4\u62a4size\u57df\u8868\u793a\u5f53\u524d\u7ed3\u70b9\u4ee3\u8868\u7684\u6743\u503c\u8303\u56f4\u5185\u6709\u51e0\u4e2a\u6570\uff0c\u7528\u4e8e\u67e5\u8be2\u7b2ck\u5c0f\u3002\n\n\n\u7b2ck\u5c0f\u600e\u4e48\u67e5\uff1f\u548cTreap\u5dee\u4e0d\u591a\u5566\n",
        "postTime": 1483501524,
        "uid": 20558,
        "name": "zyh2015",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u770b\u4e86\u51e0\u7bc7\u9898\u89e3\uff0c\u611f\u89c9\u6211\u7684\u601d\u8def\u548c\u5927\u4f6c\u4eec\u7684\u6709\u70b9\u533a\u522b\uff0c\u5e94\u8be5\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u79bb\u6563\u5316\uff0c\u6240\u4ee5\u5e0c\u671b\u5199\u4e00\u7bc7\u9898\u89e3\uff0c\u8bf4\u4e00\u8bf4\u522b\u7684\u601d\u8def\u3002\n\n### \u5927\u81f4\u601d\u8def\uff1a\u4e3b\u5e2d\u6811\u7684\u677f\u5b50+\u524d\u7f00\u548c+\u4e8c\u5206\u67e5\u627e\u7b54\u6848\u3002\n\u5177\u4f53\u7684\u6765\u8bf4\uff0c\u56e0\u4e3a\u9898\u76ee\u662f\u8981\u6c42\u627e\u524dk\u5c0f\u6570\u7684\u548c\uff0c\u90a3\u4e48\u5f88\u663e\u7136\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8c\u5206\u7684\u65b9\u6cd5\uff1b\u5176\u6b21\uff0c\u9898\u76ee\u7684\u8981\u6c42\u662f\u533a\u95f4\u4fee\u6539\uff0c\u800c\u4e3b\u5e2d\u6811\u60f3\u8981\u533a\u95f4\u4fee\u6539\u9700\u8981\u6811\u5957\u6811\uff08\u592a\u96be\u4e86\uff09\uff0c\u800c\u8fd9\u9053\u9898\u663e\u7136\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u6765\u5b9e\u73b0\u3002\n\n\u90a3\u4e48\u5177\u4f53\u6765\u8bf4\u660e\uff0c\u8bf4\u5148\uff0c\u7531\u4e8e\u60f3\u8981\u4e8c\u5206\uff0c\u6211\u4eec\u5e0c\u671b\u6811\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5148\u5bf9\u6570\u636e\u6309\u7167p\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u65b0\u987a\u5e8f\u5efa\u6811\uff1b\u540c\u65f6\uff0c\u8fd9\u91cc\u5efa\u6811\u7684\u8fc7\u7a0b\u548c\u666e\u901a\u4e3b\u5e2d\u6811\u6709\u70b9\u533a\u522b\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u524d\u7f00\u548c\u6765\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u6b21\u6027\u663e\u7136\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u9700\u8981insert\u4e24\u6b21\uff0c\u5e76\u4e14\u8981\u8bb0\u4f4f\u4ee5\u540e\u6bcf\u6b21\u4f7f\u7528\u6839\u8282\u70b9\u90fd\u8981\u4f7f\u75282*i\u3002\n\n```cpp\nfor(int i=1;i<=n;i++)\n    inp[i].s=read(),inp[i].e=read(),inp[i].p=read();sort(inp+1,inp+n+1);\nfor(int i=1;i<=n;i++)\n{\n\tinsert(1,n+1,root[2*i-2],root[2*i-1],inp[i].s,inp[i].p,i);\n\tinsert(1,n+1,root[2*i-1],root[2*i],inp[i].e+1,-inp[i].p,i);\n}\n```\n\u90a3\u4e48\u5efa\u6811\u7684\u8fc7\u7a0b\u5c31\u5b8c\u6210\u4e86\uff0c\u6211\u4eec\u7684\u6811\u4ee5\u4efb\u52a1\u7684\u5e8f\u53f7\u4e3a\u6811\u6839\uff0c\u4ee5\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u4e3a\u8282\u70b9\uff0c\n#### \u4e0b\u9762\u4ecb\u7ecd\u5177\u4f53\u5efa\u6811\u7684\u8fc7\u7a0b\uff1a\n\u5927\u90e8\u5206\u548c\u666e\u901a\u4e3b\u5e2d\u6811\u4e00\u6837\uff0c\u7279\u522b\u7684\u5730\u65b9\u662f\u9700\u8981\u7ef4\u62a4\u4e00\u4e2asum\u2014\u2014\u6240\u6709\u4efb\u52a1\u7684\u524d\u7f00\u65f6\u95f4\u548c\uff0ccnt\u2014\u2014\u4efb\u52a1\u6570\u91cf\u7684\u524d\u7f00\u548c\u3002\n\n```cpp\nvoid insert(int l,int r,int pre,int &now,int pos,int val,int tm)\n{\n\tnow=++cnt;\n\thjt[now]=hjt[pre];\n\tif(l==r)\n\t{\n\t\thjt[now].sum+=val;\n\t\thjt[now].cnt+=(val>0?1:-1);\t\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tif(pos<=mid) insert(l,mid,hjt[pre].l,hjt[now].l,pos,val,tm);\n\telse insert(mid+1,r,hjt[pre].r,hjt[now].r,pos,val,tm);\n\thjt[now].cnt=hjt[hjt[now].l].cnt+hjt[hjt[now].r].cnt;\n\thjt[now].sum=hjt[hjt[now].l].sum+hjt[hjt[now].r].sum;\n}\n```\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u67e5\u8be2\u4e86\uff0c\u5bf9\u4e8e\u6bcf\u4e2ak\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u627e\u5230\u67d0\u4e2a\u4efb\u52a1\u5e8f\u53f7\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u65b9\u6cd5\uff0c\u6bcf\u6b21\u67e5\u627e1-mid\u8fd9\u4e9b\u4efb\u52a1\u5728x\u65f6\u95f4\u7684\u4efb\u52a1\u6570\u91cf\uff0c\u5982\u679cansnum==k\uff0c\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\uff0c\u4e0d\u9700\u8981\u518d\u5bfb\u627e\uff08\u56e0\u4e3a\u663e\u7136\u5c31\u7b97\u6ca1\u6709\u8fbe\u5230\u6700\u4f18\u89e3\uff0c\u5305\u542bx\u65f6\u95f4\u7684\u4efb\u52a1\u6570\u8fd8\u662f\u76f8\u540c\u7684\uff0c\u53ea\u662f\u5305\u542b\u4e86\u4e00\u4e9b\u5176\u4ed6\u65f6\u95f4\u7684\u4efb\u52a1\uff0c\u5bf9\u7b54\u6848\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff09\u3002\n\n```cpp\nwhile(m--)\n\t{\n\t\tx=read(),a=read(),b=read(),c=read();\n\t\tk=1+(a*pre+b)%c;\t\t\n\t\tint minn=0,maxx=n+1,ans=-1;\n\t\twhile(minn<=maxx)\n\t\t{\n\t\t\tint mid=(minn+maxx)/2;\n\t\t\tint ansnum=qcnt(1,n+1,root[2*mid],x);\n\t\t\tif(ansnum>k)\n\t\t\t\tmaxx=mid-1;\n\t\t\telse if(ansnum<k)\n\t\t\t\tminn=mid+1;\n\t\t\telse\n\t\t\t{\n\t\t\t\tans=mid;\n\t\t\t\tbreak;\n\t\t\t}\t\t\t\n\t\t}\n\t\tif(ans==-1)\n\t\t\tans=n;\t\t\t\t\n\t\tansnow=qans(1,n+1,root[2*ans],x);\n\t\tprintf(\"%d\\n\",ansnow); \n\t\tpre=ansnow;\n\t}\n```\n\n#### \u5177\u4f53\u6765\u770b\u67e5\u627e\u4efb\u52a1\u6570\u7684qcnt\u51fd\u6570\uff1a\n\u5f88\u7b80\u5355\uff0c\u57fa\u672c\u5c31\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u67e5\u8be2\uff0c\u8fd9\u91cc\u8981\u627epos\u4f4d\u7f6e\u7684\u4efb\u52a1\u6570\uff0c\u4e5f\u5c31\u662f0-pos\u7684\u533a\u95f4\u548c\uff0c0\u53ef\u4ee5\u76f4\u63a5\u7701\u7565\u3002\n\n```cpp\nint qcnt(int l,int r,int R,int pos)\n{\n\tif(r<=pos) return hjt[R].cnt;\n\tint mid=(l+r)/2,tt=0;\n\ttt+=qcnt(l,mid,hjt[R].l,pos);\n\tif(pos>mid) tt+=qcnt(mid+1,r,hjt[R].r,pos);\n\treturn tt;\n}\n```\n\n#### \u6700\u540e\u662fqans\u8ba1\u7b97\u65f6\u95f4\u51fd\u6570\uff0c\u548cqcnt\u57fa\u672c\u76f8\u540c\n```cpp\nint qans(int l,int r,int R,int pos)\n{\n\tif(r<=pos) return hjt[R].sum;\n\tint mid=(l+r)/2,tt=0;\n\ttt+=qans(l,mid,hjt[R].l,pos);\n\tif(pos>mid) tt+=qans(mid+1,r,hjt[R].r,pos);\n\treturn tt;\n}\n```\n\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u5b8c\u6210\u4e86\u3002\n\n## \u603b\u7ed3\n\u5bf9\u4e8e\u533a\u95f4\u4fee\u6539\u7684\u95ee\u9898\uff0c\u8003\u8651\u5229\u7528\u524d\u7f00\u548c\u6765\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\uff1b\u540c\u65f6\uff0c\u524dk\u5c0f\u4e4b\u548c\u53ef\u4ee5\u8003\u8651\u7528\u4e8c\u5206\u89e3\u51b3\u3002\n\n\u9644\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n    char c=getchar();int x=0,f=1;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\n#define int long long\n#define N 200005\nstruct node\n{\n\tint s,e,p;\n\tbool operator < (const node& b) const\n\t{\n\t\treturn p<b.p;\n\t}\n}inp[N];\nstruct tree\n{\n\tint l,r;\n\tint sum,cnt;\n}hjt[N*80];\nint cnt=0,root[2*N];\nint lst[N];\nvoid insert(int l,int r,int pre,int &now,int pos,int val,int tm)\n{\n\tnow=++cnt;\n\thjt[now]=hjt[pre];\n\tif(l==r)\n\t{\n\t\tif(lst[l]==0) \n\t\t\thjt[now].sum+=val;\n\t\telse\n\t\t\thjt[now].sum+=val;\n\t\tlst[l]=tm;\n\t\thjt[now].cnt+=(val>0?1:-1);\n\t\t\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tif(pos<=mid) insert(l,mid,hjt[pre].l,hjt[now].l,pos,val,tm);\n\telse insert(mid+1,r,hjt[pre].r,hjt[now].r,pos,val,tm);\n\thjt[now].cnt=hjt[hjt[now].l].cnt+hjt[hjt[now].r].cnt;\n\thjt[now].sum=hjt[hjt[now].l].sum+hjt[hjt[now].r].sum;\n}\nint qcnt(int l,int r,int R,int pos)\n{\n\tif(r<=pos) return hjt[R].cnt;\n\tint mid=(l+r)/2,tt=0;\n\ttt+=qcnt(l,mid,hjt[R].l,pos);\n\tif(pos>mid) tt+=qcnt(mid+1,r,hjt[R].r,pos);\n\treturn tt;\n}\nint qans(int l,int r,int R,int pos)\n{\n\tif(r<=pos) return hjt[R].sum;\n\tint mid=(l+r)/2,tt=0;\n\ttt+=qans(l,mid,hjt[R].l,pos);\n\tif(pos>mid) tt+=qans(mid+1,r,hjt[R].r,pos);\n\treturn tt;\n}\nsigned main()\n{\n\tint n=read(),m=read();\n\tint s,e,p;\n    for(int i=1;i<=n;i++)\n    \tinp[i].s=read(),inp[i].e=read(),inp[i].p=read();\n    sort(inp+1,inp+n+1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tinsert(1,n+1,root[2*i-2],root[2*i-1],inp[i].s,inp[i].p,i);\n\t\tinsert(1,n+1,root[2*i-1],root[2*i],inp[i].e+1,-inp[i].p,i);\n\t}\n\tint x,a,b,c,k,ansnow;\n\tint pre=1;\t\n\twhile(m--)\n\t{\n\t\tx=read(),a=read(),b=read(),c=read();\n\t\tk=1+(a*pre+b)%c;\t\t\n\t\tint minn=0,maxx=n+1,ans=-1;\n\t\twhile(minn<=maxx)\n\t\t{\n\t\t\tint mid=(minn+maxx)/2;\n\t\t\tint ansnum=qcnt(1,n+1,root[2*mid],x);\n\t\t\tif(ansnum>k)\n\t\t\t\tmaxx=mid-1;\n\t\t\telse if(ansnum<k)\n\t\t\t\tminn=mid+1;\n\t\t\telse\n\t\t\t{\n\t\t\t\tans=mid;\n\t\t\t\tbreak;\n\t\t\t}\t\t\t\n\t\t}\n\t\tif(ans==-1)\n\t\t\tans=n;\t\t\t\t\n\t\tansnow=qans(1,n+1,root[2*ans],x);\n\t\tprintf(\"%d\\n\",ansnow); \n\t\tpre=ansnow;\n\t}\n\treturn 0;\n}\n```\n\u6211\u8fd9\u91cc\u5f88\u6bd2\u7624\u7684\u5199\u4e86#define int long long\n\n2333\uff0c\u8fd9\u786e\u5b9e\u4e0d\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\uff0c\u53ea\u662f\u4e0b\u5348\u8c03bug\u8c03\u5d29\u6e83\u4e86\u5b9e\u5728\u61d2\u5f97\u6539\u3002\n\n",
        "postTime": 1586183460,
        "uid": 140852,
        "name": "tyno\u590f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u663e\u7136\u5bf9\u4e8e\u533a\u95f4\u4f18\u5148\u7ea7\u52a0k\u64cd\u4f5c\u8fdb\u884c\u5dee\u5206,\u5bf9\u65f6\u95f4\u5efa\u4e3b\u5e2d\u6811,\u7ef4\u62a4\u4f18\u5148\u7ea7\u524d\u7f00\u548c\u4ee5\u53ca\u5728\u8fd9\u4e2a\u4f18\u5148\u7ea7\u533a\u95f4\u91cc\u7684\u4efb\u52a1\u4e2a\u6570,\u66f4\u65b0\u5c31\u5f88\u7b80\u5355\u4e86\n,\u67e5\u8be2\u7c7b\u4f3c\u67e5\u533a\u95f4\u7b2ck\u5c0f.\n``` c++\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#define rep(i,x,y) for(register int i=x;i<=y;++i)\n#define repd(i,x,y) for(register int i=x;i>=y;--i)\n#define ll long long\nusing namespace std;\nconst int N=2e5+7;\nstruct node{\n\tint l,val,p;\n\tnode(int l,int val,int p):l(l),val(val),p(p){}\n\tnode(){}\n}e[N<<2];\nll tr[N<<5],size[N<<5];\nint lson[N<<5],rson[N<<5],root[N],a[N],len,n,m,cnt;\ninline int cmpv(node x,node y){return x.val<y.val;}\ninline int cmpt(node x,node y){return x.l<y.l;}\ninline void update(int &o,int l,int r,int k,int p){\n\tlson[++cnt]=lson[o];rson[cnt]=rson[o];tr[cnt]=tr[o];size[cnt]=size[o];\n\to=cnt;tr[o]+=a[k]*p;size[o]+=p;\n\tif(l==r)return; \n\tint mid=l+r>>1;\n\tif(k<=mid)update(lson[o],l,mid,k,p);\n\telse update(rson[o],mid+1,r,k,p);\n}\ninline ll query(int o,int l,int r,int k){\n\tif(size[o]<=k)return tr[o];\n\tif(l==r)return tr[o]/size[o]*k;\n\tint mid=l+r>>1;\n\tif(k<=size[lson[o]])return query(lson[o],l,mid,k);\n\treturn tr[lson[o]]+query(rson[o],mid+1,r,k-size[lson[o]]);\n}\ninline void solve(){\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,1,n){\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\te[(i<<1)-1]=node(a,c,1);e[i<<1]=node(b+1,c,-1);\n\t}\n\tsort(e+1,e+n*2+1,cmpv);\n\trep(i,1,n*2){if(e[i].val!=a[len])a[++len]=e[i].val;e[i].val=len;}\n\tsort(e+1,e+n*2+1,cmpt);\n\tll pre=1;int k=1;\n\trep(i,1,m){\n\t\troot[i]=root[i-1];\n\t\twhile(e[k].l==i)update(root[i],1,len,e[k].val,e[k].p),k++;\n\t}\n\trep(i,1,m){\n\t\tint x,A,B,c;\n\t\tscanf(\"%d%d%d%d\",&x,&A,&B,&c);\n\t\tpre=(pre*A+B)%c+1;\n\t\tprintf(\"%lld\\n\",pre=query(root[x],1,len,pre));\n\t}\n}\nint main(){\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1524340141,
        "uid": 46982,
        "name": "Angora",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u4e3b\u5e2d\u6811\u9898\uff0c\u505a\u5dee\u5206\u7edf\u8ba1\uff0c\u5728\u5dee\u5206\u6811\u4e0a\u64cd\u4f5c\uff0c\u4e00\u8fb9\u64cd\u4f5c\u4e00\u8fb9\u201c\u6eda\u52a8\u201d\u3002\u4ec5\u5f53i\u65f6\u523b\u7684**\u6240\u6709\u64cd\u4f5c\u7ed3\u675f**\uff0c\u5c06i\u4f5c\u4e3ai+1\u7684\u539f\u7248\u3002\n\n\n\u7edf\u8ba1\u7b54\u6848\u65f6\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5c31\u53ef\u4ee5\u3002\u6ce8\u610f\u4e00\u70b9\uff0c\u53ef\u80fd\u5b58\u5728\u76f8\u540c\u7684\u4f18\u5148\u7ea7\uff0c\u6bd4\u5982\u8bf4\u4f18\u5148\u7ea7\u53ef\u4ee5\u4f7f 2 3 3 4 6\uff0c\u8fd9\u6837\u67e5K = 2\u7684\u65f6\u5019\u7b54\u6848\u4e0d\u662f\u503c\u57df\u7ebf\u6bb5\u6811\u4e0a2\u548c3\u7684\u4f4d\u7f6e\u7684SUM\uff0c\u800c\u662f2\u7684SUM\u52a0\u4e0a\u5269\u4f59\u6392\u540d\u4e2a\u6570\u4e2a3\uff0c\u8be6\u89c1\u4ee3\u7801\u3002\n\n\n\u79bb\u6563\u5316\uff0c\u6570\u636e\u592a\u5927\u4e86\uff0c\u6211\u7528\u7684\u662fsort+unique+map\uff0c\u6e05\u4e00\u8272\u7684STL\uff0cmap\u6709\u70b9\u6162\uff0c\u6ce8\u610f\u4e00\u4e0b\uff0c\u80fd\u5c11\u7528\u5c31\u5c11\u7528\uff0c\u4e00\u5f00\u59cb\u5c31\u56e0\u4e3amap\u6240\u4ee5TLE\u597d\u4e45\u2026\u2026\n\n\n\u81f3\u4e8e\u7a7a\u95f4\u8303\u56f4\uff0c\u544a\u8bc9\u4f60\u4eec\uff0c\u5f88\u5927\uff0c\u539f\u9898\u5e94\u8be5\u662f512MB\uff0c\u4e0d\u77e5\u9053\u8fd9\u91cc\u662f\u591a\u5c11\uff0c\u8d77\u78018\\*10^6\u6ca1\u6709\u95ee\u9898\uff0c\u4e0d\u8981\u5f00\u52304\\*10^6\u4ee5\u4e0b\uff0c\u90a3\u6837\u5c31RE\u4e86\u3002\n\n\n\u597d\u4e86\uff0c\u5404\u79cd\u95ee\u9898\u90fd\u8bf4\u4e86\uff0c\u4e0d\u8981\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\uff0c\u770b\u770b\u63d0\u4ea4\u8bb0\u5f55\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u3002\n\n\n\n\n\n\n\n    \n    \n    \n    \n            \n    \n\n\n\n\n\n\n\n    \n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <map>\nusing namespace std;\n#define MAXT 8000000\n#define MAXN 100000\n#define ll long long\n#define lc(x) t[x].lc\n#define rc(x) t[x].rc\n#define mx(x) t[x].mx\n#define sum(x) t[x].sum\n#define mid ((lef+rig)>>1)\n#define sgn(x) (x > 0 ? 1 : -1) \nstruct Node\n{\n    ll mx,sum;\n    int lc,rc;\n    Node(){}\n    Node(ll a, ll b)\n    {\n        mx = a, sum = b;\n        return;\n    }\n};\nll dat[MAXN*4+5], tot, Pre = 1, n, k, op, tm, s, e, p;\nNode t[MAXT+5];\nmap<ll,ll> h;\nstruct Segment_Tree\n{\n    int root;\n    inline Node Merge(Node a, Node b)\n    {\n        a.mx += b.mx, a.sum += b.sum;\n        return a;\n    }\n    inline void Push(int p)\n    {\n        mx(p) = mx(lc(p)) + mx(rc(p)), sum(p) = sum(lc(p)) + sum(rc(p));\n        return;\n    }\n    inline void Init(int x = -1)\n    {\n        root = tot++;\n        if(x+1)\n            t[root] = t[x];\n        return;\n    }\n    Node Query(int p, int lef, int rig, int L, int R)\n    {\n        if(!p || lef > rig)\n            return Node(0ll,0ll);\n        if(L == lef && R == rig)\n            return t[p];\n        if(R <= mid)\n            return Query(lc(p),lef,mid,L,R);\n        if(L >  mid)\n            return Query(rc(p),mid+1,rig,L,R);\n        return Merge(Query(lc(p),lef,mid,L,mid) , Query(rc(p),mid+1,rig,mid+1,R)); \n    }\n    void Edit(int p, int lef, int rig, int x, int tag)\n    {\n        if(lef == rig)\n        {\n            mx(p) += tag, sum(p) += tag*dat[lef];\n            return;\n        }    \n        int temp = tot++;\n        if(x <= mid)\n            t[temp] = t[lc(p)], lc(p) = temp, Edit(lc(p),lef,mid,x,tag);\n        else\n            t[temp] = t[rc(p)], rc(p) = temp, Edit(rc(p),mid+1,rig,x,tag);\n        Push(p);\n        return;\n    }\n};\nSegment_Tree T[MAXN+5];\nstruct Task\n{\n    ll pos,val;    \n}X[MAXN*2+5];\ninline bool operator < (Task a, Task b)\n{\n    return a.pos < b.pos;\n}\ninline ll Search(ll ti, ll rank)\n{\n    ll lef = 1, rig = k;\n    for(Node midd; lef < rig; )\n    {\n        midd = T[ti].Query(T[ti].root,1,k,1,mid);\n        if(midd.mx >= rank)\n            rig = mid;\n        else\n            lef = mid+1;\n    }\n    Node res = T[ti].Query(T[ti].root,1,k,1,lef-1);\n    Node poi = T[ti].Query(T[ti].root,1,k,lef,lef);\n    Pre = res.sum;\n    if(rank <= res.mx+poi.mx)\n        Pre += dat[lef]*(rank-res.mx);\n    return Pre;\n}\ninline ll read()\n{\n    ll ans=0;    \n    char last=' ',ch=getchar();\n    while(ch<'0' || ch>'9') last=ch,ch=getchar();\n    while(ch>='0' && ch<='9')ans=ans*10+ch-'0',ch=getchar();\n    if(last=='-')ans=-ans;\n    return ans;\n}\nvoid out(ll x)\n{\n    if(x<0)putchar('-'),x=-x;\n    if(x<10)\n        putchar(x+'0');\n    else{\n        out(x/10);\n        putchar(x%10+'0');\n    }\n    return;\n}\nint main()\n{\n    n = read(), tm = read();\n    for(register int i = op = k = 1; i <= n; i++)\n        s = read(), e = read(), p = read(), dat[k++] = p,\n        X[op].pos = s, X[op++].val = p, X[op].pos = e+1, X[op++].val = -p;\n    sort(X+1,X+op), op--, sort(dat+1,dat+k), k = unique(dat+1,dat+k)-dat-1;\n    for(register int i = 1; i <= k; i++)\n        h[dat[i]] = i;\n    T[0].Init();\n    for(register int i = 1, j = 1; i <= tm; i++)\n    {\n        T[i].Init(T[i-1].root);\n        for(; X[j].pos == i; j++)\n            T[i].Edit(T[i].root,1,k,h[abs(X[j].val)],sgn(X[j].val));\n    }\n    for(ll x, a, b, c; tm--; out(Search(x,1+(a*Pre+b)%c)),putchar('\\n'))\n        x = read(), a = read(), b = read(), c = read();\n     return 0;\n}\n\u770b\u5230\u6709\u4e9b\u4ee3\u7801\uff0c\u6ca1\u7528\u4e3b\u5e2d\u6811\uff0c\u76f4\u63a5\u5947\u8ff9\u822c\u66b4\u529bO\uff08nm\uff09\u6c34\u8fc7\u4e86\u3002\u6572\u4e863\u4e2a\u5c0f\u65f6\u7684\u6211\u8868\u793a\u65e0\u8bed\u3002\n```",
        "postTime": 1485089029,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "### \u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\n\n\u770b\u5230\u8be2\u95ee\u4e3a\u8be2\u95ee\u524d $K$ \u5927\u7684\u548c\uff0c\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u505a\u3002\n\n\u4f46\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u73b0\u5728\u6709\u54ea\u4e9b\u4efb\u52a1\u5728\u6267\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u4efb\u52a1\u6267\u884c\u7684\u533a\u95f4$[s,e]$\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u4efb\u52a1\u5728 $s$ \u65f6\u52a0\u5165\uff0c\u5728 $t+1$ \u65f6\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u4fee\u6539\u6765\u89e3\u51b3\uff08\u5373\u6309\u7167\u65f6\u95f4\u6392\u5e8f\u8fdb\u884c\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u63d2\u5165\u4e0e\u5220\u9664\uff09\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65f6\u95f4\u7684\u8be2\u95ee\u76f4\u63a5\u53ef\u6301\u4e45\u5316\u5373\u53ef\uff08\u5c31\u662f\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u65f6\u95f4\u7ed3\u675f\u540e root \u7684\u4f4d\u7f6e\uff09\u3002\n\n\u6ce8\u610f\uff1a\u56e0\u4e3a\u503c\u57df\u4e3a$10^7$,\u6240\u4ee5\u8981\u52a8\u6001\u5f00\u70b9\u3002\u3002\u3002\n\n#### code:\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nstruct tree{\n    struct node{\n        int l,r,ls,rs,sum,siz;\n    }a[10000000];\n    int tot;\n    int newNode(int l,int r){\n        a[++tot]={l,r,-1,-1,0,0};\n        return tot;\n    }\n    int copyNode(int from){\n        //cout<<\"copy \"<<tot+1<<\":\"<<from<<endl;\n        a[++tot]=a[from];\n        //cout<<a[tot].l<<\" \"<<a[tot].r<<endl;\n        return tot;\n    }\n    void build(int MAX_VALUE){\n        a[0]={1,MAX_VALUE,-1,-1,0,0};\n    }\n    void pushup(int now){\n        a[now].sum=0;\n        a[now].siz=0;\n        if(a[now].ls!=-1){\n            a[now].sum+=a[a[now].ls].sum;\n            a[now].siz+=a[a[now].ls].siz;\n        }\n        if(a[now].rs!=-1){\n            a[now].sum+=a[a[now].rs].sum;\n            a[now].siz+=a[a[now].rs].siz;\n        }\n    }\n    int add(int from,int pos,int v,int __copy=1){\n        int now;\n        if(__copy){\n            now=copyNode(from);\n        }\n        else{\n            now=from;\n        }\n        int l=a[now].l,r=a[now].r;\n        int mid=(l+r)/2;\n        if(l==r){\n            //cout<<\"add \"<<now<<\" \"<<v<<endl;\n            a[now].sum+=v*l;\n            a[now].siz+=v;\n            //cout<<\"->\"<<a[now].siz<<endl;\n            return now;\n        }\n        //cout<<pos<<\" \"<<mid<<endl;\n        if(pos<=mid){\n            //cout<<\"go left\"<<endl;\n            if(a[now].ls==-1){\n                a[now].ls=newNode(l,mid);\n                add(a[now].ls,pos,v,false);\n            }\n            else\n            a[now].ls=add(a[now].ls,pos,v);\n        }\n        else{\n            //cout<<\"go right\"<<endl;\n            if(a[now].rs==-1){\n                a[now].rs=newNode(mid+1,r);\n                add(a[now].rs,pos,v,false);\n            }\n            else\n            a[now].rs=add(a[now].rs,pos,v);\n        }\n        pushup(now);\n        //cout<<\">\"<<a[now].ls<<\" \"<<a[now].rs<<endl;\n        return now;\n    }\n    int query(int now,int k){\n        //cout<<now<<\" \"<<a[now].siz<<endl;\n        int l=a[now].l,r=a[now].r;\n        /*cout<<\">\"<<l<<\" \"<<r\\\n        <<\" \"<<a[now].ls<<\" \"<<a[now].rs<<endl;*/\n        if(l==r){\n            return min(k*l,a[now].sum);\n        }\n        if(a[now].siz==k){\n            return a[now].sum;\n        }\n        int lsiz=a[now].ls==-1?0:a[a[now].ls].siz;\n        int lsum=a[now].ls==-1?0:a[a[now].ls].sum;\n        if(lsiz>=k){\n            return query(a[now].ls,k);\n        }\n        else{\n            if(a[now].rs==-1)return lsum;\n            return lsum+query(a[now].rs,k-lsiz);\n        }\n    } \n}base;\nint m,n;\nvector<int>add[200000],del[200000];\nint ver;\nint roots[200000];\nint times[200000];\nint lastans=1;\nsigned main(){\n    scanf(\"%lld%lld\",&m,&n);\n    base.build(20000000);\n    for(int i=1;i<=m;i++){\n        int s,e,p;\n        scanf(\"%lld%lld%lld\",&s,&e,&p);\n        add[s].push_back(p);\n        del[e+1].push_back(p);\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=0;j<add[i].size();j++){\n            roots[ver+1]=base.tot+1;\n            base.add(roots[ver],add[i][j],1);\n            ver++;\n        }\n        for(int j=0;j<del[i].size();j++){\n            roots[ver+1]=base.tot+1;\n            base.add(roots[ver],del[i][j],-1);\n            ver++;\n        }\n        /*cout<<\"time %\"<<i<<\" \"\\\n        <<base.a[roots[ver]].siz<<\" \"\\\n        <<base.a[roots[ver]].l\\\n        <<\" \"<<base.a[roots[ver]].r\\\n        <<\"(\"<<roots[ver]<<\")\"<<endl;*/\n        times[i]=roots[ver];\n    }\n    for(int i=1;i<=n;i++){\n        int x,a,b,c;\n        scanf(\"%lld%lld%lld%lld\",&x,&a,&b,&c);\n        int k=1+(a*lastans+b)%c;\n        //cout<<\"decode:\"<<x<<\" \"<<k<<endl;\n        lastans=base.query(times[x],k);\n        printf(\"%lld\\n\",lastans);\n    }\n    #ifdef WIN32\n    system(\"pause\");\n    #endif\n    return 0;\n}\n```",
        "postTime": 1600484695,
        "uid": 350415,
        "name": "swiftqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u4ecb\u7ecd\u672c\u9898\u7684\u4e24\u79cd\u505a\u6cd5:\n\n# \u65b9\u6cd51\n\n## \u524d\u7f6e\u829d\u58eb\n1. [\u7ebf\u6bb5\u6811](https://baike.baidu.com/item/\u7ebf\u6bb5\u6811/10983506?fr=aladdin):\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6570\u636e\u7ed3\u6784.\n2. [\u6811\u72b6\u6570\u7ec4](https://baike.baidu.com/item/\u6811\u72b6\u6570\u7ec4/313739?fr=aladdin):\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6570\u636e\u7ed3\u6784.\n\n## \u5177\u4f53\u5b9e\u73b0\n\n\u533a\u95f4\u4fee\u6539,\u5355\u70b9\u67e5\u8be2\u5f88\u5bb9\u6613\u5c31\u4f1a\u60f3\u5230\u6811\u72b6\u6570\u7ec4\u4e86,\u81f3\u4e8e\u67e5\u8be2\u524dk\u4e2a\u6570\u7684\u548c\u53c8\u53ef\u4ee5\u4e22\u7ed9\u6743\u503c\u7ebf\u6bb5\u6811\u53bb\u5e72,\u6240\u4ee5\u7b2c\u4e00\u79cd\u5f88\u663e\u7136\u7684\u65b9\u6cd5\u5c31\u662f\u6811\u72b6\u6570\u7ec4\u5957\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5b9e\u73b0.\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst int maxN=5e5+7;\nconst int INF=2147483647;\nint N,M;\nint op[maxN];\nint s[maxN],e[maxN],p[maxN];\nint arr[maxN];\nint sor[maxN];\nint len=0;\nmap<int,int>Hash;//\u6570\u636e\u5f88\u5927\u9700\u8981\u79bb\u6563\u5316\nint val__[maxN];//\u8bb0\u5f55\u79bb\u6563\u5316\u4ee5\u540e\u6bcf\u4e2a\u6570\u4ee3\u8868\u7684\u539f\u6765\u7684\u503c\nstruct Tree//\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n{\n\tint sum,lson,rson;\n\tlong long sum_;\n}tree[maxN*32];\nint point_cnt=0;\n//\u7ebf\u6bb5\u6811\u6807\u51c6define\n#define LSON tree[now].lson\n#define RSON tree[now].rson\n#define MIDDLE ((left+right)>>1)\n#define LEFT LSON,left,MIDDLE\n#define RIGHT RSON,MIDDLE+1,right\nvoid PushUp(int now)\n{\n\ttree[now].sum=tree[LSON].sum+tree[RSON].sum;//\u6570\u7684\u4e2a\u6570\n\ttree[now].sum_=tree[LSON].sum_+tree[RSON].sum_;//\u6bcf\u4e2a\u6570\u76f8\u52a0\u4ee5\u540e\u7684\u548c\n}\nvoid UpDataMain(int num,int val,int &now,int left=1,int right=len)\n//\u4fee\u6539,\u5728now\u4e2d\u52a0\u5165val\u4e2anum\n{\n\tif(num<left||right<num)\n\t{\n\t\treturn;\n\t}\n\tif(!now)\n\t{\n\t\tnow=++point_cnt;\n\t}\n\tif(left==right)\n\t{\n\t\ttree[now].sum+=+val;\n\t\ttree[now].sum_+=+val*val__[num];//\u9700\u8981\u52a0\u4e0a\u539f\u7406\u7684\u503c*\u4e2a\u6570\n\t\treturn;\n\t}\n\tUpDataMain(num,val,LEFT);\n\tUpDataMain(num,val,RIGHT);\n\tPushUp(now);\n}\nint lowbit(int now)//\u6811\u72b6\u6570\u7ec4\u7528\u7684lowbit\n{\n\treturn now&-now;\n}\nint root[maxN];\nvoid UpData(int top,int num,int val)//\u5728top\u7684\u4f4d\u7f6e\u52a0\u4e0aval\u4e2anum\n{\n\tfor(int now=top;now<=N;now+=lowbit(now))//\u6811\u72b6\u6570\u7ec4\u7684\u4fee\u6539\n\t{\n\t\tUpDataMain(num,val,root[now]);\n\t}\n}\n//\u8bb0\u5f55\u4e0b\u5f53\u524d\u9700\u8981\u52a0\u4e0a\u7684\u6811\u7684\u5f53\u524d\u8282\u70b9\nint add_tree[maxN];\nint num_add=0;\nint GetSum()//\u5f53\u524d\u6811\u4e2d\u6570\u7684\u4e2a\u6570\n{\n\tint sum=0;\n\tREP(i,1,num_add){sum+=tree[add_tree[i]].sum;}\n\treturn sum;\n}\nlong long GetSum_()//\u5f53\u524d\u6811\u7684\u6570\u7684\u548c\n{\n\tlong long sum=0;\n\tREP(i,1,num_add){sum+=tree[add_tree[i]].sum_;}\n\treturn sum;\n}\nint GetSumLeft()//\u5f53\u524d\u6811\u7684\u5de6\u5b50\u6811\u7684\u6570\u7684\u4e2a\u6570\n{\n\tint sum=0;\n\tREP(i,1,num_add){sum+=tree[tree[add_tree[i]].lson].sum;}\n\treturn sum;\n}\nlong long GetSum_Left()//\u5f53\u524d\u6811\u7684\u5de6\u5b50\u6811\u7684\u6570\u7684\u548c\n{\n\tlong long sum=0;\n\tREP(i,1,num_add){sum+=tree[tree[add_tree[i]].lson].sum_;}\n\treturn sum;\n}\nint GetSumRight()//\u5f53\u524d\u6811\u7684\u53f3\u5b50\u6811\u7684\u6570\u7684\u4e2a\u6570\n{\n\tint sum=0;\n\tREP(i,1,num_add){sum+=tree[tree[add_tree[i]].rson].sum;}\n\treturn sum;\n}\nlong long GetSum_Right()//\u5f53\u524d\u6811\u7684\u53f3\u5b50\u6811\u7684\u6570\u7684\u548c\n{\n\tlong long sum=0;\n\tREP(i,1,num_add){sum+=tree[tree[add_tree[i]].rson].sum_;}\n\treturn sum;\n}\nvoid GetRootLeft()//\u5c06\u8282\u70b9\u6362\u6210\u5de6\u513f\u5b50\n{\n\tREP(i,1,num_add){add_tree[i]=tree[add_tree[i]].lson;}\n}\nvoid GetRootRight()//\u5c06\u8282\u70b9\u6362\u6210\u53f3\u513f\u5b50\n{\n\tREP(i,1,num_add){add_tree[i]=tree[add_tree[i]].rson;}\n}\nlong long QueryMain(int k,int left=1,int right=len)//\u67e5\u8be2\u90e8\u5206\u4e3b\u8981\u51fd\u6570\n{\n\tint sum=GetSum();//\u5f97\u5230\u5f53\u524d\u6811\u7684\u6570\u7684\u4e2a\u6570\n\tif(left==right)//\u5982\u679c\u662f\u53f6\u8282\u70b9\n\t{\n\t\treturn /*\u5f53\u524d\u8868\u793a\u7684\u6570*/val__[left]*/*\u53ea\u6709sum\u4e2a\u6570,\u6700\u591a\u53d6k\u4e2a\u6570,\u6240\u4ee5\u53d6\u4e00\u4e2amin*/min(sum,k);\n\t}\n\tif(k>=sum)//\u5982\u679ck\u592a\u5927\n\t{\n\t\treturn GetSum_();//\u8fd4\u56de\u5f53\u524d\u6811\u7684\u6570\u7684\u548c\n\t}\n\tint left_sum=GetSumLeft();//\u5de6\u5b50\u6811\u7684\u6570\u7684\u4e2a\u6570\n\tif(left_sum>=k)//\u5982\u679c\u5927\u4e8e\u7b49\u4e8ek\u5c31\u5dee\u5de6\u5b50\u6811\n\t{\n\t\tGetRootLeft();\n\t\treturn QueryMain(k,left,MIDDLE);\n\t}\n\t//\u5426\u5219\u5c31\u5dee\u627e\u53f3\u5b50\u6811\n\tlong long result=GetSum_Left();\n\tGetRootRight();\n\treturn result+QueryMain(k-left_sum,MIDDLE+1,right);\n}\nvoid BeforeQuery(int place)//\u9884\u5904\u7406\n{\n\tnum_add=0;\n\tfor(int now=place;now;now-=lowbit(now))\n\t{\n\t\tadd_tree[++num_add]=root[now];\n\t}\n}\nlong long Query(int place,int k)//\u67e5\u8be2\n{\n\tBeforeQuery(place);//\u9884\u5904\u7406\n\treturn QueryMain(k);\n}\nvoid UpDataAdd(int left,int right,int num)//\u4fee\u6539,\u548c\u666e\u901a\u6811\u72b6\u6570\u7ec4\u76f8\u540c\n{\n\tUpData(left,Hash[num],1);\n\tUpData(right+1,Hash[num],-1);\n}\nint main()\n{\n\tscanf(\"%d%d\",&M,&N);\n\tint num_cnt=0;\n\tREP(i,1,M)\n\t{\n\t\tscanf(\"%d%d%d\",&s[i],&e[i],&p[i]);//\u8bb0\u5f55\u4e0b\u6765\u79bb\u6563\u5316\n\t\tsor[++num_cnt]=p[i];\n\t}\n\tsort(sor+1,sor+1+num_cnt);\n\tsor[0]=-INF;\n\tREP(i,1,num_cnt)\n\t{\n\t\tif(sor[i]!=sor[i-1])\n\t\t{\n\t\t\tHash[sor[i]]=++len;\n\t\t\tval__[len]=sor[i];\n\t\t}\n\t}\n\tREP(i,1,M)\n\t{\n\t\tUpDataAdd(s[i],e[i],p[i]);//\u76f4\u63a5\u4fee\u6539\n\t}\n\tlong long pre=1;\n\tint x,a,b,c,k;\n\tREP(i,1,N)\n\t{\n\t\tscanf(\"%d%d%d%d\",&x,&a,&b,&c);\n\t\tk=1+(a*pre+b)%c;//\u6309\u516c\u5f0f\u8ba1\u7b97k\n\t\tpre=Query(x,k);//\u67e5\u8be2\n\t\tprintf(\"%lld\\n\",pre);\n\t}\n\treturn 0;\n}\n```\n\n# \u65b9\u6cd52\n\n## \u524d\u7f6e\u829d\u58eb\n1. [\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811](https://www.baidu.com/s?wd=\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811&ie=UTF-8) :\u53ef\u4ee5\u7528[\u4e3b\u5e2d\u6811](https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&tn=baidu&wd=\u4e3b\u5e2d\u6811&oq=%25E5%258F%25AF%25E6%258C%2581%25E4%25B9%2585%25E5%258C%2596%25E7%25BA%25BF%25E6%25AE%25B5%25E6%25A0%2591&rsv_pq=f635f4100001ee83&rsv_t=b326%2F5YPs7kWClLnUjhDOBNKoWWyyE4MqPy4rlVhYfKIGBgk9vJSvgZIQ6Q&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=9&rsv_sug1=3&rsv_sug7=100&rsv_sug2=0&inputT=2039&rsv_sug4=2039)\u6765\u5b9e\u73b0.\n2. [\u5dee\u5206](https://baike.baidu.com/item/\u5dee\u5206/10349967?fr=aladdin):\u4f18\u5316\u65b9\u6cd51.\n\n## \u5177\u4f53\u5b9e\u73b0\n\n\u53ef\u4ee5\u53d1\u73b0\u65b9\u6cd51\u975e\u5e38\u975e\u5e38\u9ebb\u70e6,\u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u524d\u7f00\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570,\u7136\u540e\u5c31\u5dee\u5206\u641e\u4e00\u4e0b\u5c31\u597d\u4e86.\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst int maxN=3e5+7;\nint N,M;\nint sor[maxN];\nlong long hanum[maxN];\nint p[maxN];\nint tot=0;\nmap<int,int>Hash;\n\n//\u4e00\u4e2a\u6ca1\u4ec0\u4e48\u7528\u7684\u4e1c\u897f,\u53ef\u4ee5\u50cf\u641e\u56fe\u8bba\u4e00\u6837\u628a\u6bcf\u4e2a\u4f4d\u7f6e\u8981\u653e\u5165\u7684\u6570\u548c\u8fd9\u4e2a\u4f4d\u7f6e\u8fde\u4e00\u6761\u8fb9,\u53ef\u4ee5\u7b80\u5355\u5904\u7406\nstruct Edge\n{\n\tint next,val,add;\n}edge[maxN*2];\nint cnt_edge=0;\nint head[maxN];\n#define FOR(now) for(int _i_=head[now];_i_;_i_=edge[_i_].next)\n#define VAL edge[_i_].val\n#define ADD edge[_i_].add\nvoid AddEdge(int form,int val,int add)\n{\n\tedge[++cnt_edge].val=val;\n\tedge[cnt_edge].add=add;\n\tedge[cnt_edge].next=head[form];\n\thead[form]=cnt_edge;\n}\n\nstruct Tree//\u4e3b\u5e2d\u6811\n{\n\tint lson,rson,sum;\n\tlong long sum_;\n}tree[maxN*32];\n#define LSON tree[now].lson\n#define RSON tree[now].rson\n#define MIDDLE ((left+right)>>1)\n#define LEFT LSON,left,MIDDLE\n#define RIGHT RSON,MIDDLE+1,right\n#define NEW_LSON tree[new_tree].lson\n#define NEW_RSON tree[new_tree].rson\nint cnt_point=0;\nvoid PushUp(int now)\n{\n\ttree[now].sum=tree[LSON].sum+tree[RSON].sum;\n\ttree[now].sum_=tree[LSON].sum_+tree[RSON].sum_;\n}\nvoid UpData(int num,int val,int &new_tree,int now,int left=1,int right=tot)\n{\n\tif(num<left||right<num)\n\t{\n\t\tnew_tree=now;\n\t\treturn;\n\t}\n\tnew_tree=++cnt_point;\n\tif(left==right)\n\t{//\u548c\u65b9\u6cd5\u4e00\u5dee\u4e0d\u591a\n\t\ttree[new_tree].sum=tree[now].sum+val;//\u52a0\u4e0a\u6570\u7684\u4e2a\u6570\n\t\ttree[new_tree].sum_=tree[now].sum_+hanum[num]*val/*\u6570\u7684\u4e2a\u6570*\u8fd9\u4e2a\u6570*/;\n\t\treturn;\n\t}\n\tUpData(num,val,NEW_LSON,LEFT);\n\tUpData(num,val,NEW_RSON,RIGHT);\n\tPushUp(new_tree);\n}\nlong long Query(int k,int now,int left=1,int right=tot)//\u67e5\u8be2\u5199\u5f97\u6bd4\u8f83\u968f\u4fbf\n{\n\tif(k<=0)return 0;//\u61d2\u5f97\u5206\u7c7b\u8ba8\u8bba\n\tif(left==right)//\u5230\u53f6\u8282\u70b9\u4e86\u76f4\u63a5\u8ba1\u7b97\n\t{\n\t\treturn min(k,tree[now].sum)/*\u53d6k\u548c\u5f53\u671f\u6811\u4e2d\u6570\u7684\u4e2a\u6570\u7684\u5c0f\u503c*/*hanum[left];\n\t}\n\tif(k>=tree[now].sum)//\u5982\u679ck\u592a\u5927\u4e86\n\t{\n\t\treturn tree[now].sum_;\n\t}\n\treturn Query(k,LEFT)+Query(k-tree[LSON].sum,RIGHT);\n}\nint root[maxN];//\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u4e3b\u5e2d\u6811\u7684\u6839\u8282\u70b9\nint main()\n{\n\tscanf(\"%d%d\",&M,&N);\n\tint s,e;\n\tREP(i,1,M)\n\t{\n\t\tscanf(\"%d%d%d\",&s,&e,&p[i]);\n\t\tsor[i]=p[i];\n\t\tAddEdge(s,p[i],1);//\u6dfb\u52a0\u8fb9\u5230\u8fd9\u4e2a\u6570,\u548c\u5dee\u5206\u76f8\u540c,l\u4f4d\u7f6e+1,r+1\u4f4d\u7f6e-1\n\t\tAddEdge(e+1,p[i],-1);\n\t}\n\tsort(sor+1,sor+1+M);//\u79bb\u6563\u5316\n\tsor[0]=114154;\n\tREP(i,1,M)\n\t{\n\t\tif(sor[i]!=sor[i-1])\n\t\t{\n\t\t\tHash[sor[i]]=++tot;\n\t\t\thanum[tot]=sor[i];\n\t\t}\n\t}\n\tint check;\n\tREP(i,1,N)//\u5efa\u6811\n\t{\n\t\tif(head[i])//\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u6709\u52a0\u5165\u65b0\u7684\u6570\n\t\t{\n\t\t\tcheck=1;//\u5f00\u59cb\u662f\u4ece\u4e0a\u4e00\u9897\u6811\u53d8\u5316,\u540e\u6765\u662f\u81ea\u5df1\u4fee\u6539\u81ea\u5df1\n\t\t\tFOR(i)//\u628a\u6570\u52a0\u5165\u8fd9\u4e2a\u6570\n\t\t\t{\n\t\t\t\tUpData(Hash[VAL],ADD,root[i],root[i-check]);\n\t\t\t\tcheck=0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\troot[i]=root[i-1];//\u6ca1\u6709\u5c31\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u76f8\u540c\n\t\t}\n\t}\n\tlong long pre=1;\n\tint x,a,b,c,k;\n\tREP(i,1,N)\n\t{\n\t\tscanf(\"%d%d%d%d\",&x,&a,&b,&c);\n\t\tk=1+(a*pre+b)%c;//\u8ba1\u7b97k\n\t\tpre=Query(k,root[x]);\n\t\tprintf(\"%lld\\n\",pre);\n\t}\n\treturn 0;\n}\n```\n\n# \u6bd4\u8f83\u4e24\u79cd\u65b9\u6cd5\n\n\u65b9\u6cd51\u7684\u505a\u6cd5\u66f4\u663e\u7136,\u5f88\u5bb9\u6613\u5f97\u51fa,\u4f46\u662f$N\\log_2^2N$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u5bb9\u6613TLE,\u65b9\u6cd5\u4e8c\u66f4\u5bb9\u6613\u5199,\u4f46\u662f\u9700\u8981\u7528\u5230\u5dee\u5206,\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u76f4\u63a5\u60f3\u51fa\u6765,\u8dd1\u8d77\u6765\u6bd4\u65b9\u6cd51\u5feb\u4e86\u5f88\u591a.",
        "postTime": 1581130465,
        "uid": 86625,
        "name": "Limit",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u5e94\u8be5\u4e0d\u96be\u60f3\u5230\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5f00\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4f46\u7a7a\u95f4\u53ea\u6709512MB\uff0c\u660e\u663e\u4e0d\u884c\uff0c\u800c\u4e14\u5982\u679c\u6211\u4eec\u628a\u6bcf\u4e2a\u6570\u66b4\u529b\u52a0\u5165\uff0c\u80af\u5b9a\u4f1aTLE\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u5806\u4f18\u5316\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u76f8\u9694\u7684\u7ebf\u6bb5\u6811\uff0c\u80af\u5b9a\u6709\u90e8\u5206\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6765\u505a\u4e86\uff0c\u540c\u65f6\u5bf9\u4e8e\u4e00\u4e2a\u6570\u503c\uff0c\u6211\u4eec\u5728\u5de6\u8fb9\u90a3\u4e2a\u65f6\u95f4\u70b9+1\uff0c\u5728\u53f3\u8fb9\u90a3\u4e2a\u65f6\u95f4\u70b9**\u5f80\u540e\u4e00\u4e2a\u70b9**-1\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u5f00\u4e24\u4e2avector\u8bb0\u5f55\u52a0\u51cf\u5c31\u884c\u4e86\u3002\n\n\u597d\u5427\uff0c\u8fd8\u9700\u8981\u79bb\u6563\u5316\u3002\n\n\u6700\u540e\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u8be2\u95ee\u6c42\u4e2a\u533a\u95f4\u548c\u5c31\u884c\u4e86\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5751\u70b9\uff0c\u5bf9\u4e8e\u7b2cK\u5927\u90a3\u4e2a\u70b9\uff0c\u6211\u4eec\u9700\u8981\u52a0\u7684\u4e0d\u662f\u8fd9\u4e2a\u503c\u800c\u662f\u52a0\u4e0a\u5269\u4e0b\u7684\u6570\u4e58\u4e0a\u5f53\u524d\u6570\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5A\u6389\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define mid (l+(r-l)/2)\nusing namespace std;\nconst int N=100010;\nint n,m,q;\nvector<int>ad[N],dl[N];\nint a[N];\nint cnt,root[N],lson[N<<6],rson[N<<6],tr[N<<6];\nlong long sum[N<<6];\nint build(int l,int r){\n    int rt=++cnt;\n    if(l==r)return rt;\n    lson[rt]=build(l,mid);\n    rson[rt]=build(mid+1,r);\n    return rt;\n}\ninline void pushup(int rt){\n    sum[rt]=sum[lson[rt]]+sum[rson[rt]];\n}\nint updata(int pre,int l,int r,int x,int z){\n    int rt=++cnt;\n    tr[rt]=tr[pre]+z;\n    if(l==r){\n        return rt;\n    }\n    lson[rt]=lson[pre];\n    rson[rt]=rson[pre];\n    if(x<=mid)lson[rt]=updata(lson[pre],l,mid,x,z);\n    else rson[rt]=updata(rson[pre],mid+1,r,x,z);\n    return rt;\n}\nlong long query(int rt,int l,int r,int k){\n    if(l==r)return a[l]*min(k,tr[rt]);\n    if(tr[lson[rt]]>=k)return query(lson[rt],l,mid,k);\n    else return query(rson[rt],mid+1,r,k-tr[lson[rt]])+sum[lson[rt]];\n}\nvoid dfs(int rt,int l,int r){\n    if(!tr[rt]||sum[rt])return;\n    if(l==r){\n        sum[rt]=tr[rt]*a[l];\n        return;\n    }\n    dfs(lson[rt],l,mid);\n    dfs(rson[rt],mid+1,r);\n    pushup(rt);\n}\ninline int read(){\n    register int ret=0;register char c;\n    for(c=getchar();!isdigit(c);c=getchar());\n    for(;isdigit(c);ret=(ret<<1)+(ret<<3)+c-'0',c=getchar());\n    return ret;\n}\nint main(){\n    cin>>n>>q;\n    for(int i=1;i<=n;++i){\n        int l=read(),r=read(),p=read();\n        ad[l].push_back(p);\n        dl[r+1].push_back(p);\n        a[i]=p;\n    }\n    sort(a+1,a+n+1);\n    m=unique(a+1,a+n+1)-a-1;\n    root[0]=build(1,m);\n    for(register int i=1;i<=n;++i){\n    \troot[i]=root[i-1];\n    \tfor(vector<int>::iterator it=ad[i].begin();it!=ad[i].end();++it){\n    \t\troot[i]=updata(root[i],1,m,lower_bound(a+1,a+m+1,*it)-a,1);\n    \t}\n    \tfor(vector<int>::iterator it=dl[i].begin();it!=dl[i].end();++it){\n    \t    root[i]=updata(root[i],1,m,lower_bound(a+1,a+m+1,*it)-a,-1);\n        }\n    }\n    for(int i=0;i<=n;++i){\n        dfs(root[i],1,m);\n    }\n    long long last=1;\n    while(q--){\n        int x=read(),aa=read(),bb=read(),cc=read();\n        aa=((long long)aa*(last%cc)+bb)%cc+1;\n        last=query(root[x],1,m,aa);\n        printf(\"%lld\\n\",last);\n    }\n}\n```",
        "postTime": 1542793470,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3168 \u3010[CQOI2015]\u4efb\u52a1\u67e5\u8be2\u7cfb\u7edf\u3011"
    }
]