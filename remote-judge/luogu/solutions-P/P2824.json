[
    {
        "content": "**\u5927\u610f\uff1a**\n\n\u7ed9\u4e00\u4e2an\u7684\u6392\u5217\uff08n<=10^5\uff09\uff0c\u6709m\uff08m<=10^5\uff09\u4e2a\u64cd\u4f5c\uff1a\n\n- 1 l r  \u8868\u793a\u628a[l, r]\u533a\u95f4\u5185\u7684\u6570\u964d\u5e8f\u6392\u5e8f\uff1b\n\n- 0 l r \u8868\u793a\u628a[l, r]\u533a\u95f4\u5185\u7684\u6570\u5347\u5e8f\u6392\u5e8f\u3002\n\n\u6700\u540e\u8be2\u95ee\u8fd9\u4e2a\u5e8f\u5217\u7684\u7b2cp\u4e2a\u4f4d\u5b50\u4e0a\u7684\u6570\u662f\u591a\u5c11\u3002\n\n-----------------\n\n**\u505a\u6cd5\uff1a**\n\n\u7531\u4e8e\u5c06\u4e00\u4e2a\u666e\u901a\u5e8f\u5217\u6392\u5e8f\u5f88\u6162\uff0c\u9700\u8981nlogn\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u8bd5\u7740\u628a\u5b83\u8f6c\u5316\u4e3a\u5bf901\u5e8f\u5217\u6392\u5e8f\u3002\u5148\u6765\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff1a\n\n\n-------------------------\n\n- \u5982\u4f55\u5c06\u4e00\u4e2a01\u5e8f\u5217\u6392\u5e8f\uff1f\uff08logn\u7684\u590d\u6742\u5ea6\uff09\n\n- \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\u67e5\u8be2\u4e00\u6bb5\u533a\u95f4\u5185\u76841\u7684\u4e2a\u6570\u8bb0\u4e3acnt1\uff0c\u5982\u679c\u662f\u5347\u5e8f\uff0c\u5c31\u5c06\u8fd9\u6bb5\u533a\u95f4\u7684[r-cnt1+1, r]\u90fd\u66f4\u6539\u4e3a1\uff0c\u5c06[l, r-cnt1]\u66f4\u6539\u4e3a0\u3002\u964d\u5e8f\u5219\u5c06[l, l+cnt1-1]\u66f4\u6539\u4e3a1\uff0c\u5c06[l+cnt, r]\u66f4\u6539\u4e3a0\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u6210\u529f\u5730\u628a\u6392\u5e8f\u8f6c\u5316\u4e3a\u4e86\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u4fee\u6539\u3002\n\n-----------\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u8bf4\u672c\u9898\u7684\u505a\u6cd5\uff1a\n\n\u8fd9\u662f\u4e00\u4e2a\u79bb\u7ebf\u7684\u505a\u6cd5\u3002\u9996\u5148\u4e8c\u5206\u7b54\u6848mid\u3002\u6211\u4eec\u628a\u539f\u6392\u5217\u4e2d\u5927\u4e8e\u7b49\u4e8emid\u7684\u6570\u90fd\u6807\u8bb0\u4e3a1\uff0c\u5c0f\u4e8emid\u7684\u90fd\u6807\u8bb0\u4e3a0\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\u6211\u4eec\u5c31\u5c0601\u5e8f\u5217\u6392\u4e2a\u5e8f\u3002\u6700\u540e\u5982\u679c\u7b2cp\u4e2a\u4f4d\u5b50\u4ecd\u662f1\u7684\u8bdd\u5c31\u662f\u53ef\u884c\u7684\u3002\n\n\u8fd9\u4e2a\u4e8c\u5206\u6210\u7acb\u56e0\u4e3a\u662f\u6ee1\u8db3\u5355\u8c03\u6027\u7684\uff1a\u53ef\u4ee5\u7b80\u5355\u5730\u5047\u8bbe\u4e00\u4e0b\uff0c\u5982\u679c\u4f60\u4e8c\u5206\u7684\u7b54\u6848\u662f1\uff0c\u90a3\u4e48\u539f\u5e8f\u5217\u6240\u6709\u7684\u503c\u90fd\u8f6c\u5316\u4e3a\u4e861\uff0c\u6240\u4ee5\u6700\u540e\u80af\u5b9a\u662ftrue\u3002\u5982\u679c\u4e8c\u5206\u4e00\u4e2a\u503c\u6210\u7acb\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u4f4d\u5b50\u7684\u503c\u5927\u4e8e\u7b49\u4e8emid\uff0c\u6545\u5982\u679ccheck\u8fd4\u56detrue\uff0c\u5219l = mid+1\uff0c\u5426\u5219r = mid-1\u3002\n\n\uff08\u8fd9\u9898\u7684\u601d\u60f3\u53ef\u4ee5\u501f\u9274\uff0c\u6bd4\u8f83\u5de7\u5999\uff09\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#define lc o<<1\n#define rc o<<1|1\n#define mid (l+r)/2\nusing namespace std;\n\nconst int N = 100010;\nint n, m, p;\nint T[4*N], lazy[4*N];//segment tree\nint a[N], ch[N], L[N], R[N];//the information by reading\n\ninline int read()\n{\n    char ch = getchar(); int x = 0;\n    while (!isdigit(ch)) ch = getchar();\n    while (isdigit(ch)){ x = x*10+ch-'0'; ch = getchar(); }\n    return x;\n}\n\ninline void build(int o, int l, int r, int x)\n{\n    if (l == r){\n        T[o] = a[l] >= x;\n        lazy[o] = 0;\n        return;\n    }\n    build(lc, l, mid, x); build(rc, mid+1, r, x);\n    T[o] = T[lc]+T[rc]; lazy[o] = 0;\n}\n\ninline void pushdown(int o, int l, int r)\n{\n    if (!lazy[o]) return;\n    lazy[lc] = lazy[rc] = lazy[o];\n    if (lazy[o] == 1){\n        T[lc] = mid-l+1; T[rc] = r-mid;\n    } else T[lc] = T[rc] = 0;\n    lazy[o] = 0;\n}\n\ninline int query(int o, int l, int r, int x, int y)\n{\n    if (x <= l && y >= r) return T[o];\n    if (x > r || y < l) return 0;\n    pushdown(o, l, r);\n    return query(lc, l, mid, x, y) + query(rc, mid+1, r, x, y);\n}\n\ninline int queryPoint(int o, int l, int r, int x)\n{\n    if (l == x && r == x) return T[o];\n    pushdown(o, l, r);\n    if (x <= mid) return queryPoint(lc, l, mid, x);\n    else return queryPoint(rc, mid+1, r, x);\n}\n\ninline void update(int o, int l, int r, int x, int y, int val)\n{\n    if (x <= l && y >= r){\n        T[o] = val*(r-l+1); lazy[o] = val ? 1 : -1;\n        return;\n    }\n    if (x > r || y < l) return;\n    pushdown(o, l, r);\n    update(lc, l, mid, x, y, val);\n    update(rc, mid+1, r, x, y, val);\n    T[o] = T[lc]+T[rc];\n}\n\ninline bool check(int x)\n{\n    build(1, 1, n, x);\n    for (int i = 1; i <= m; i ++){\n        int cnt1 = query(1, 1, n, L[i], R[i]);\n        if (ch[i] == 0){\n            update(1, 1, n, R[i]-cnt1+1, R[i], 1);\n            update(1, 1, n, L[i], R[i]-cnt1, 0);\n        }\n        else{\n            update(1, 1, n, L[i], L[i]+cnt1-1, 1);\n            update(1, 1, n, L[i]+cnt1, R[i], 0);\n        }\n    }\n    return queryPoint(1, 1, n, p);\n}\n\nint main()\n{\n    n = read(); m = read();\n    for (int i = 1; i <= n; i ++) a[i] = read();\n    for (int i = 1; i <= m; i ++){\n        ch[i] = read(); L[i] = read(); R[i] = read();\n    }\n    p = read();\n    int ll = 1, rr = n, midd, ans;\n    while (ll <= rr){\n        midd = (ll+rr) >> 1;\n        if (check(midd)) ans = midd, ll = midd+1; else rr = midd-1;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1512890962,
        "uid": 19722,
        "name": "fy0123",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "\u672c\u9898\u6709**O(nlogn)**\u7684\u5199\u6cd5\n\n\u7528\u53ef\u5206\u88c2\u5408\u5e76\u7684\u7ebf\u6bb5\u6811,\u5373\u5efan\u4e2a\u503c\u57df\u7ebf\u6bb5\u6811(\u52a8\u6001\u5f00\u70b9),\u7136\u540e\u5728\u7ebf\u505a,\n\n\u62ff\u4e00\u4e2aset\u7ef4\u62a4\u6bcf\u6b21\u8981\u5408\u5e76\u7684\u533a\u95f4,\u7136\u540e\u5982\u679cl,r\u201c\u5207\u65ad\u201d\u4e86\u4e00\u4e2a\u533a\u95f4,\u5c31\u628a\u5b83\u5206\u88c2\n\n\u8ddf\u975e\u65cb\u8f6c\u5f0ftreap\u4e00\u6837...\u7136\u800c...\n\nPS:\u6b64\u9898\u6392\u5217\u4e2d\u67090,\u6240\u4ee5\u662f0\u5230n\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<set>\n#define Sum(a) ((a)?(a)->sum:0)\nusing namespace std;\nstruct tree{\n    tree* l,* r;\n    int sum;\n    tree(){l=r=0;sum=0;}\n    void update(){\n        sum=Sum(l)+Sum(r);\n    }\n};\n\nstruct data{\n    int l,r,type;\n    tree* ptr;\n    data(int l,int r,int type,tree*ptr):\n        l(l),r(r),type(type),ptr(ptr){}\n    int operator<(const data& d)const{\n        return r<d.r;\n    }\n};\ntypedef set<data>::iterator sit;\ntree* merge(tree*& a,tree* b,int l,int r){\n//    printf(\"[%d,%d]\",a,b);\n    if(!a)return b;\n    if(!b)return a;\n    if(l==r){\n        a->sum+=b->sum;\n        return a;\n    }\n    int mid=l+r>>1;\n    a->l=merge(a->l,b->l,l,mid);\n    a->r=merge(a->r,b->r,mid+1,r);\n    a->update();\n    return a;\n}\ntree* split(tree*& a,int l,int r,int k){\n    \n    if(!k||!a)return 0;\n//    printf(\" S{%d,%d,%d}\",a,l,r);\n    if(l==r){\n        tree* ret=new tree;\n        ret->sum=a->sum;\n        a=0;\n        return ret;\n    }\n    tree* ret=new tree;\n    int mid=l+r>>1;\n    if(Sum(a->l)<k){\n        tree* f=split(a->r,mid+1,r,k-Sum(a->l));\n        ret->r=f,ret->l=a->l,a->l=0;\n//        printf(\"[%d,%d,%d]\",a->l,f,k);\n        ret->update();\n        a->update();\n    } else {\n        tree* f=split(a->l,l,mid,k);\n        ret->l=f,ret->r=0;\n        ret->update();\n        a->update();\n    }\n//    printf(\"{%d}\\n\",k);\n    return ret;\n}\nvoid insert(tree*& a,int l,int r,int k){\n    if(!a)a=new tree;\n    a->sum++;\n    if(l==r)return ;\n    int mid=l+r>>1;\n    if(k<=mid)insert(a->l,l,mid,k);\n    else insert(a->r,mid+1,r,k);\n}\nint ask(tree* a,int l,int r,int k){\n//    printf(\"[%d,%d]\",a->sum,k);\n    if(l==r)return l;\n    int mid=l+r>>1;\n    if(Sum(a->l)<k)return ask(a->r,mid+1,r,k-Sum(a->l));\n    else return ask(a->l,l,mid,k);\n}\ntree* newnode(int k,int n){\n    tree* ret=0;\n    insert(ret,0,n,k);\n    return ret;\n}\nvoid print(tree* a,int l,int r,bool type){\n    if(!a)return ;\n    if(l==r){\n        printf(\"%d \",l);\n        return ;\n    }\n    int mid=l+r>>1;\n    if(type){\n        print(a->r,mid+1,r,type);\n        print(a->l,l,mid,type);\n    } else {\n        print(a->l,l,mid,type);\n        print(a->r,mid+1,r,type);    \n    }\n}\nint n,m;\nset<data>st;\nint main(){\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1,a;i<=n;++i)\n        scanf(\"%d\",&a),st.insert(data(i,i,0,newnode(a,n)));\n\n    for(int i=1,k,op,l,r;i<=m;++i){\n        scanf(\"%d%d%d\",&op,&l,&r);\n        tree* res=0;\n        sit it=st.lower_bound(data(0,l,0,0));\n        while(it!=st.end()&&it->l<=r){\n            data d=*it;\n            sit xt=it;xt++;\n            st.erase(it);it=xt;\n            tree* g=d.ptr;\n            if(d.l<=l&&r<=d.r){\n                if(op==d.type){\n                    st.insert(data(d.l,d.r,d.type,g));\n                    goto end;\n                } else if(d.type){\n                    tree* ptr=split(g,0,n,d.r-r);\n                    res=split(g,0,n,r-l+1);\n                    if(Sum(g)!=0)st.insert(data(d.l,l-1,d.type,g));\n                    if(Sum(ptr)!=0)st.insert(data(r+1,d.r,d.type,ptr));\n                } else {\n                    tree* ptr=split(g,0,n,l-d.l);\n                    res=split(g,0,n,r-l+1);\n                    if(Sum(ptr)!=0)st.insert(data(d.l,l-1,d.type,ptr));\n                    if(Sum(g)!=0)st.insert(data(r+1,d.r,d.type,g));    \n                }\n                st.insert(data(l,r,op,res));\n                goto end;\n                \n            } else if(l<=d.l&&d.r<=r){\n                res=merge(res,g,0,n);\n            } else if(d.l<l){\n                if(d.type){\n                    k=d.r-l+1;\n                    tree* ptr=split(g,0,n,k);\n                    res=merge(res,ptr,0,n);\n                    if(Sum(g)!=0)st.insert(data(d.l,l-1,d.type,g));\n                } else {\n                    k=l-d.l;\n                    tree* ptr=split(g,0,n,k);\n                    res=merge(res,g,0,n);\n                    if(Sum(ptr)!=0)st.insert(data(d.l,l-1,d.type,ptr));\n                }\n            } else if(d.r>r){\n                if(d.type){\n                    k=d.r-r;\n                    tree* ptr=split(g,0,n,k);\n                    res=merge(res,g,0,n);\n                    if(Sum(ptr)!=0)st.insert(data(r+1,d.r,d.type,ptr));\n                } else {\n                    k=r-d.l+1;\n                    tree* ptr=split(g,0,n,k);\n                    res=merge(res,ptr,0,n);\n                    if(Sum(g)!=0)st.insert(data(r+1,d.r,d.type,g));\n                }\n            }\n        }\n        st.insert(data(l,r,op,res));\n        end:;\n    }\n    int q;scanf(\"%d\",&q);\n    sit it=st.lower_bound(data(q,q,0,0));\n    if(!it->type)printf(\"%d\",ask(it->ptr,0,n,q-it->l+1));\n    else printf(\"%d\",ask(it->ptr,0,n,it->r-q+1));\n}\n```",
        "postTime": 1484741934,
        "uid": 11751,
        "name": "ComeIntoPower",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "\u4e00\u9053\u5341\u5206\u795e\u5947\u7684\u7ebf\u6bb5\u6811\u9898,\u505a\u6cd5\u5341\u5206\u7684\u6709\u8da3.\n\n- ## \u524d\u7f6e\u829d\u58eb\n\n1.[\u7ebf\u6bb5\u6811](https://baike.baidu.com/item/%E7%BA%BF%E6%AE%B5%E6%A0%91/10983506?fr=aladdin):\u4e00\u4e2a\u5341\u5206\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784,\u5728\u8fd9\u9053\u9898\u4e2d\u8d77\u4e86\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528.\n\n2.\u4e00\u79cd\u57fa\u4e8e01\u4e32\u7684\u795e\u5947\u7684\u4e8c\u5206\u601d\u60f3:\u5728\u6a21\u62df\u8d5b\u4e2d\u51fa\u73b0\u4e86[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/AT2165),\u53ef\u4ee5\u5148\u53bb\u505a\u4e00\u4e0b,\u8fd9\u6837\u53ef\u80fd\u6709\u52a9\u4e8e\u7406\u89e3.\n\n- ## \u5177\u4f53\u505a\u6cd5\n\n\u53ef\u4ee5\u53d1\u73b0sort\u662f\u975e\u5e38\u6162\u7684,\u6bcf\u6b21\u591a\u8981$O(N\\log_2N)$,\u6700\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(MN\\log_2N)$,\u80af\u5b9a\u662f\u4f1aT\u7684,\u800c\u4e14sort\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u4e0d\u662f\u5f88\u597d\u53bb\u7ef4\u62a4.\u53ef\u4ee5\u53d1\u73b0,\u6700\u540e\u9700\u8981\u67e5\u8be2\u7684\u6570\u53ea\u6709\u4e00\u4e2a,\u4e8e\u662f\u5c31\u53ef\u4ee5\u60f3\u5230\u79bb\u7ebf\u7684\u505a\u6cd5.$N$\u867d\u7136\u4e0d\u5c0f,\u4f46\u5176\u5b9e\u5e76\u4e0d\u7b97\u5927,$O(N\\log^2_2N)$\u662f\u53ef\u4ee5\u8fc7\u7684,\u90a3\u4e48\u6709\u6ca1\u6709\u8fd9\u6837\u7684\u65b9\u6cd5\u5462,\u90a3\u81ea\u7136\u662f\u6709\u7684,\u6240\u4ee5\u5c31\u8981\u7528\u523001\u4e32\u7684\u4e00\u79cd\u795e\u5947\u7684\u7528\u6cd5\u4e86.\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21sort\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(N\\log_2N)$,\u90a3\u4e48\u5982\u679c\u8fd9\u65f6\u4e00\u4e2a01\u4e32\u5462,\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u53d8\u4e3a$O(N)$,\u800c\u4e14\u8fd9\u65f6\u533a\u95f4\u8986\u76d6,\u518d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5c31\u53ea\u8981$O(\\log_2N)$.\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20200115194722648.jpg)\n\n(\u5982\u8fd9\u6837\u4e00\u4e2a01\u5e8f\u5217,\u7070\u8272\u4e3a1,\u767d\u8272\u4e3a0,\u53ea\u8981\u67e5\u8be2\u51fa\u533a\u95f4\u7684\u548c,\u5c06\u6700\u540e\u7684\u8fd9\u51e0\u4e2a\u8986\u76d6\u4e3a1,\u524d\u9762\u8986\u76d6\u4e3a0,\u8fd9\u6837\u4e3a\u5347\u5e8f,\u964d\u5e8f\u540c\u7406)\n\u8fd9\u6837\u5c31\u51fa\u73b0\u4e86\u4e00\u79cd\u5355\u8c03\u6027,\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u5c06\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u5927\u4e8e\u7b49\u4e8e\u6700\u7ec8\u7b54\u6848\u7684\u6570\u6539\u4e3a1,\u5c0f\u4e8e\u6539\u4e3a0,\u90a3\u4e48\u6700\u540e\u5728\u7b54\u6848\u4f4d\u7f6e\u7684\u6570\u5c31\u4e00\u5b9a\u662f1\u4e86,\u53cd\u4e4b\u5219\u4e00\u5b9a\u662f0,\u6240\u4ee5\u5c31\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\u4e86,\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(M\\log^2_2N)$.(\u4e8c\u5206\u4e3a$O(\\log_2N)$,\u6bcf\u4e00\u6b21check\u9700\u8981$O(M\\log_2N)$)\n\n- ## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define rap(i,first,last) for(int i=first;i<=last;++i)\n//\u7ebf\u6bb5\u6811\u6807\u51c6define\n#define Lson (now<<1)\n#define Rson (now<<1|1)\n#define Middle ((left+right)>>1)\n#define Left Lson,left,Middle\n#define Right Rson,Middle+1,right\n#define Now nowleft,nowright\nusing namespace std;\nconst int maxN=1e5+7;\nint N,M,Q;\nint L[maxN],R[maxN];\nint arr[maxN];\nbool UD[maxN];\nstruct Lazy//lazy\u6807\u8bb0\n{\n\tint cover;\n\tbool covercheck;//\u7528\u4e00\u4e2abool\u578b\u6807\u8bb0\u8fd9\u4e2a\u4f4d\u7f6e\u9700\u4e0d\u9700\u8981cover\n};\nstruct Tree//\u8fd9\u662f\u4e00\u9897\u8d44\u74f7\u533a\u95f4\u8986\u76d6\u548c\u533a\u95f4\u67e5\u8be2\u548c\u7684\u7ebf\u6bb5\u6811\n{\n\tint sum;\n\tLazy lazy;\n}tree[maxN*4];\nvoid PushUp(int now)\n{\n\ttree[now].sum=tree[Lson].sum+tree[Rson].sum;//\u5408\u5e76\u5de6\u53f3\u5b50\u6811\n}\nvoid Build(int k,int now=1,int left=1,int right=N)//\u5efa\u6811\n{\n\ttree[now].lazy.covercheck=0;\n\tif(left==right)\n\t{\n\t\ttree[now].sum=(arr[left]>=k);//\u5728\u5927\u4e8e\u7b49\u4e8ek\u65f6\u7684\u503c\u4e3a1,\u5c0f\u4e8e\u4e3a0\n\t\treturn;\n\t}\n\tBuild(k,Left);\n\tBuild(k,Right);\n\tPushUp(now);\n}\nvoid Down(int now,int left,int right,int cover)//\u4fee\u6539\u8fd9\u68f5\u6811\n{\n\ttree[now].sum=(right-left+1)*cover;\n\ttree[now].lazy.covercheck=1;\n\ttree[now].lazy.cover=cover;\n}\nvoid PushDown(int now,int left,int right)//\u4e0b\u4f20\u6807\u8bb0\n{\n\tif(tree[now].lazy.covercheck)//\u6709\u6807\u8bb0\u624d\u4e0b\u4f20\n\t{\n\t\tDown(Left,tree[now].lazy.cover);\n\t\tDown(Right,tree[now].lazy.cover);\n\t\ttree[now].lazy.covercheck=0;\n\t}\n}\nvoid UpData(int nowleft,int nowright,int cover,int now=1,int left=1,int right=N)//\u533a\u95f4\u8986\u76d6\u90e8\u5206\n{\n\tif(nowright<left||right<nowleft)return;\n\tif(nowleft<=left&&right<=nowright)\n\t{\n\t\tDown(now,left,right,cover);//\u76f4\u63a5\u4fee\u6539\n\t\treturn;\n\t}\n\tPushDown(now,left,right);//\u4e0b\u4f20\u6807\u8bb0\n\tUpData(Now,cover,Left);//\u4fee\u6539\u5de6\u5b50\u6811\n\tUpData(Now,cover,Right);//\u4fee\u6539\u53f3\u5b50\u6811\n\tPushUp(now);//\u5408\u5e76\n}\nint Query(int nowleft,int nowright,int now=1,int left=1,int right=N)//\u67e5\u8be2\u533a\u95f4\u548c\n{\n\tif(nowright<left||right<nowleft)return 0;\n\tif(nowleft<=left&&right<=nowright)//\u76f4\u63a5\u8fd4\u56de\n\t{\n\t\treturn tree[now].sum;\n\t}\n\tPushDown(now,left,right);//\u4e0b\u4f20\u6807\u8bb0\n\t//\u503c\u4e3a\u5de6\u53f3\u5b50\u6811\u7684\u503c\u4e4b\u548c\n\tint result=Query(Now,Left)+Query(Now,Right);\n\tPushUp(now);//\u9700\u8981\u5408\u5e76\n\treturn result;\n}\nbool check(int middle)//check\u7684\u90e8\u5206\n{\n\tBuild(middle);//\u5c06\u5927\u4e8e\u7b49\u4e8emiddle\u6211\u6539\u4e3a1,\u5c0f\u4e8e\u4e3a0\n\tint num;\n\trap(i,1,M)\n\t{\n\t\tnum=Query(L[i],R[i]);//\u5176\u4e2d1\u7684\u4e2a\u6570\n\t\tif(UD[i])\n\t\t{\n\t\t\t//\u964d\u5e8f\u4fee\u6539\n\t\t\tUpData(L[i],L[i]+num-1,1);//\u524dnum\u4e2a\u4e3a1\n\t\t\tUpData(L[i]+num,R[i],0);//\u540e\u9762\u7684\u4e3a0\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//\u5347\u5e8f\u540c\u7406\n\t\t\tnum=R[i]-L[i]+1-num;\n\t\t\tUpData(L[i],L[i]+num-1,0);\n\t\t\tUpData(L[i]+num,R[i],1);\n\t\t}\n\t}\n\treturn Query(Q,Q);//\u8fd4\u56de\u6700\u7ec8\u4f4d\u7f6e\u7684\u503c\n}\nint getanswer()//\u4e8c\u5206\u7b54\u6848\n{\n\tint left=1,right=N;//\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6392\u5217,\u6240\u4ee5\u8fd9\u4e2a\u6570\u662f\u57281~N\u7684\u8303\u56f4\u5185\n\tint answer=-1;\n\twhile(left<=right)\n\t{\n\t\tif(check(Middle))\n\t\t{\n\t\t\t//\u5982\u679c\u53ef\u4ee5\u5c31\u8bb0\u5f55\u7b54\u6848,\u5e76\u4e14\u4fee\u6539left\n\t\t\tanswer=Middle;\n\t\t\tleft=Middle+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//\u4e0d\u53ef\u4ee5\u5c31\u4fee\u6539right\n\t\t\tright=Middle-1;\n\t\t}\n\t}\n\treturn answer;//\u8fd4\u56de\u6700\u7ec8\u7b54\u6848\n}\nint main()\n{\n\t//\u79bb\u7ebf\u505a\u6cd5\n\tscanf(\"%d%d\",&N,&M);\n\trap(i,1,N)scanf(\"%d\",&arr[i]);\n\trap(i,1,M)scanf(\"%d%d%d\",&UD[i],&L[i],&R[i]);\n\tscanf(\"%d\",&Q);\n\tprintf(\"%d\",getanswer());//\u8f93\u51fa\u7b54\u6848\n\treturn 0;\n}\n```\n\u4e00\u79cd\u795e\u5947\u7684\u601d\u8def.\n\nUpdata 2020.3.23\n\n\u5206\u4eab\u4e00\u79cd\u672c\u9898\u4e0d\u7528STL\u7684\u5728\u7ebf\u505a\u6cd5.\n\n# \u5206\u6790\n\n\u672c\u9898\u6709\u4e00\u79cd\u901a\u8fc7\u4e8c\u5206\u505a\u5230\u7684 $\\mathcal{O}(mlog_2^2n)$ \u7684\u505a\u6cd5,\u4f46\u662f\u7406\u89e3\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6,\u800c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u6bd4\u8f83\u9ad8,\u800c\u4e14\u53ea\u53ef\u4ee5\u67e5\u8be2\u4e00\u4e2a\u6570,\u751a\u81f3\u4e0d\u53ef\u4ee5\u5728\u7ebf\u505a,\u663e\u7136\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u4f18\u79c0,\u90a3\u4e48\u662f\u5426\u5b58\u5728\u4e00\u79cd\u5bb9\u6613\u7406\u89e3\u4e14\u6709\u7740\u4f18\u79c0\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u505a\u6cd5\u5462,\u8fd9\u663e\u7136\u662f\u6709\u7684.\n\n\u5148\u8981\u4e86\u89e3\u4e00\u4e0b\u7ebf\u6bb5\u6811\u5206\u88c2\u8fd9\u4e2a\u4e1c\u897f,\u53ef\u4ee5\u770b\u770b[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P5494),\u53ef\u4ee5\u7b97\u662f\u7ebf\u6bb5\u6811\u5206\u88c2\u7684\u6a21\u677f\u9898,\u5b9e\u73b0\u8d77\u6765\u4e5f\u6bd4\u8f83\u7b80\u5355,\u4f46\u662f\u8fd9\u9053\u9898\u4e2d\u7684\u5206\u88c2\u548c\u90a3\u9053\u9898\u53c8\u6709\u6240\u4e0d\u540c,\u5177\u4f53\u4e0b\u9762\u4f1a\u8bb2\u5230.\n\n\u5148\u8003\u8651\u5982\u4f55\u6392\u5e8f,\u6392\u5e8f\u4e2d\u6709\u4e00\u79cd\u6392\u5e8f\u662f\u6876\u6392,\u90a3\u4e48\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u6876\u6392\u5462,\u81ea\u7136\u5c31\u4f1a\u60f3\u5230\u6743\u503c\u7ebf\u6bb5\u6811,\u5bf9\u4e8e\u6bcf\u4e00\u6bb5\u6709\u5e8f\u7684\u533a\u95f4\u90fd\u5f00\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u5c31\u597d\u4e86,\u5982\u679c\u9700\u8981\u5c06\u4e00\u6bb5\u533a\u95f4\u6392\u5e8f,\u90a3\u4e48\u8fd9\u6bb5\u533a\u95f4\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u53ef\u80fd\u662f\u5728\u4e00\u6bb5\u6709\u5e8f\u6570\u5217\u7684\u4e2d\u95f4,\u8fd9\u65f6\u5c31\u9700\u8981\u5c06\u8fd9\u9897\u7ebf\u6bb5\u6811\u5206\u88c2\u5f00\u6765\u5206\u88c2\u5f00\u6765\u7684\u533a\u95f4\u81ea\u7136\u4e5f\u662f\u6709\u5e8f\u7684,\u5206\u88c2\u4e4b\u540e\u6392\u5e8f\u7684\u533a\u95f4\u5c31\u88ab\u5206\u6210\u4e86\u82e5\u5e72\u4e2a\u8fde\u7eed\u4e14\u4e0d\u91cd\u5408\u7684\u533a\u95f4,\u6bcf\u4e2a\u533a\u95f4\u90fd\u662f\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811,\u90a3\u4e48\u53ea\u8981\u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u4e0b\u5c31\u597d\u4e86.\n\n### \u5173\u4e8e\u67e5\u8be2\u67d0\u6bb5\u533a\u95f4\u5185\u6d89\u53ca\u5230\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\n\n\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528set\u7ef4\u62a4,\u4f46\u662f\u4e3a\u4e86\u7167\u987e\u5176\u4ed6\u8bed\u8a00\u7684\u9009\u624b(~~\u5176\u5b9e\u5c31\u662f\u6211\u4e0d\u4f1a~~),\u6709\u4e00\u79cd\u5f88\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u7684\u7ef4\u62a4\u65b9\u6cd5.\u7ebf\u6bb5\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e24\u4e2a\u4e1c\u897f,\u4e00\u4e2a\u662f\u5f53\u524d\u533a\u95f4\u5185\u7684\u6570\u662f\u5426\u76f8\u540c,\u8fd8\u6709\u4e00\u4e2a\u662f\u5982\u679c\u76f8\u540c,\u5219\u6570\u662f\u4ec0\u4e48.\u7136\u540e\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u8981\u8fd9\u6bb5\u67e5\u8be2\u533a\u95f4\u5185\u7684\u8282\u70b9\u4e0a\u904d\u5386\u5c31\u597d\u4e86,\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u5df2\u7ecf\u5168\u90e8\u76f8\u540c\u5c31\u6ca1\u6709\u5fc5\u8981\u5411\u4e0b\u904d\u5386,\u4e0d\u540c\u5c31\u7ee7\u7eed\u5411\u4e0b\u904d\u5386.\n\n\u8fd9\u91cc\u7684\u5206\u88c2\u662f\u5206\u88c2\u8303\u56f4\u4e0d\u56fa\u5b9a\u7684,\u53ea\u8981\u6c42\u5206\u88c2\u51fa\u7684\u6811\u4e2d\u6070\u597d\u6709 $k$ \u4e2a\u6570(\u4ece\u5927\u5230\u5c0f\u6216\u4ece\u5c0f\u5230\u5927\u7684\u524d $k$ \u4e2a\u6570).\n\n## \u5173\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e\n\n\u5173\u4e8e\u4e0a\u9762\u8fd9\u4e2a\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e:\n\n(\u6211\u592a\u83dc\u4e86,\u8bc1\u660e\u672a\u5fc5\u5bf9)\n\n\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u4e4b\u540e\u4fee\u6539\u6d89\u53ca\u5230\u7684\u533a\u95f4\u6700\u591a\u53ea\u4f1a\u53d8\u6210\u4e09\u4e2a\u533a\u95f4,\u6bcf\u6b21\u67e5\u8be2\u7684\u65f6\u5019\u4e00\u4e2a\u8fde\u7eed\u76f8\u540c\u7684\u533a\u95f4\u6700\u591a\u53ea\u4f1a\u88ab\u67e5\u8be2\u5230 $log_2n$ \u6b21,\u6240\u4ee5\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $\\mathcal{O}(log_2n)$.\n\n\u5173\u4e8e\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e:\n\n\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u603b\u5171\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u7684\u4e2a\u6570,\u56e0\u4e3a\u6bcf\u6b21\u5408\u5e76\u4e24\u4e2a\u70b9\u5c31\u4f1a\u51cf\u5c11\u4e00\u4e2a\u8282\u70b9,\u6bcf\u6b21\u5206\u88c2\u53ea\u4f1a\u591a\u51fa $log_2n$ \u4e2a\u8282\u70b9,\u5f00\u59cb\u6709 $nlog_2n$ \u4e2a\u8282\u70b9,\u6240\u4ee5\u5747\u644a\u6bcf\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(log_2n)$.\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst int MAXN=1e5+7;\nint n,m;\nint arr[MAXN];\nint first_root[MAXN];\nint change_root[MAXN];//\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\nint change_cnt;//\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\u7684\u4e2a\u6570\nnamespace root//\u4e24\u9897\u7ebf\u6bb5\u6811,\u9632\u6b62\u91cd\u53d8\u91cf\u540d\n{\n\tstruct LazyTag//\u533a\u95f4\u8986\u76d6\u7684\u61d2\u6807\u8bb0\n\t{\n\t\tint check_cover;\n\t\tint cover;\n\t\tvoid CleanLazyTag()\n\t\t{\n\t\t\tcheck_cover=0;\n\t\t\tcover=0;\n\t\t}\n\t}for_make;\n\tLazyTag MakeLazyTag(int cover)\n\t{\n\t\tfor_make.check_cover=1;\n\t\tfor_make.cover=cover;\n\t\treturn for_make;\n\t}\n\tstruct SegmentTree\n\t{\n\t\tbool check;//\u5224\u65ad\u533a\u95f4\u5185\u7684\u6570\u662f\u5426\u76f8\u540c\n\t\tint num;//\u76f8\u540c\u5219\u8bb0\u5f55\u8fd9\u4e2a\u6570\n\t\tLazyTag tag;\n\t}sgt[MAXN*4];\n\t#define LSON (now<<1)\n\t#define RSON (now<<1|1)\n\t#define MIDDLE ((left+right)>>1)\n\t#define LEFT LSON,left,MIDDLE\n\t#define RIGHT RSON,MIDDLE+1,right\n\t#define NOW now_left,now_right\n\tvoid PushUp(int now)\n\t{\n\t\tsgt[now].check=(sgt[LSON].check&sgt[RSON].check)&(sgt[LSON].num==sgt[RSON].num);\n        //\u5982\u679c\u5b50\u6811\u90fd\u662f\u5168\u90e8\u76f8\u540c\u4e14\u5b50\u6811\u7684\u6570\u76f8\u540c\n\t\tif(sgt[now].check)//\u5982\u679c\u5168\u90e8\u76f8\u540c\u5219\u8bb0\u5f55\u4e00\u4e0b\u6570\n\t\t{\n\t\t\tsgt[now].num=sgt[LSON].num;\n\t\t}\n\t}\n\tvoid Build(int now=1,int left=1,int right=n)//\u5efa\u6811\u90e8\u5206\n\t{\n\t\tsgt[now].tag.CleanLazyTag();\n\t\tif(left==right)\n\t\t{\n\t\t\tsgt[now].num=first_root[left];\n\t\t\tsgt[now].check=1;\n\t\t\treturn;\n\t\t}\n\t\tBuild(LEFT);\n\t\tBuild(RIGHT);\n\t\tPushUp(now);\n\t}\n\tvoid Down(LazyTag tag,int now)//\u6807\u8bb0\u4e0b\u4f20\u7684\u4fee\u6539\n\t{\n\t\tsgt[now].num=tag.cover;\n\t\tsgt[now].check=1;\n\t\tsgt[now].tag.cover=tag.cover;\n\t\tsgt[now].tag.check_cover=1;\n\t}\n\tvoid PushDown(int now)//\u4e0b\u4f20\u6807\u8bb0\n\t{\n\t\tif(sgt[now].tag.check_cover)//\u5982\u679c\u6709\u8986\u76d6\u624d\u4e0b\u4f20\n\t\t{\n\t\t\tDown(sgt[now].tag,LSON);\n\t\t\tDown(sgt[now].tag,RSON);\n\t\t\tsgt[now].tag.CleanLazyTag();\n\t\t}\n\t}\n\tvoid Updata(int now_left,int now_right,int cover,int now=1,int left=1,int right=n)//\u533a\u95f4\u8986\u76d6\n\t{\n\t\tif(now_right<left||right<now_left)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tif(now_left<=left&&right<=now_right)\n\t\t{\n\t\t\tDown(MakeLazyTag(cover),now);\n\t\t\treturn;\n\t\t}\n\t\tPushDown(now);\n\t\tUpdata(NOW,cover,LEFT);\n\t\tUpdata(NOW,cover,RIGHT);\n\t\tPushUp(now);\n\t}\n\tint last_visit;\n\tvoid Query(int now_left,int now_right,int now=1,int left=1,int right=n)//\u67e5\u8be2\u90e8\u5206\n\t{\n\t\tif(now_right<left||right<now_left)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tif(now_left<=left&&right<=now_right)\n\t\t{\n\t\t\tif(sgt[now].check)//\u5982\u679c\u67e5\u8be2\u5230\u533a\u95f4\u5185\u7684\u6570\u5168\u90e8\u76f8\u540c\u5219\u4e0d\u7528\u7ee7\u7eed\u5411\u4e0b\n\t\t\t{\n\t\t\t\tif(sgt[now].num^last_visit)//\u5982\u679c\u548c\u4e0a\u4e00\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\u4e0d\u540c\u5219\u653e\u5165\u6570\u7ec4\n\t\t\t\t{\n\t\t\t\t\tchange_root[++change_cnt]=sgt[now].num;\n\t\t\t\t\tlast_visit=sgt[now].num;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tPushDown(now);//\u4e0b\u4f20\u6807\u8bb0\n\t\tQuery(NOW,LEFT);\n\t\tQuery(NOW,RIGHT);\n\t}\n\tvoid QueryRoot(int now_left,int now_right)\n\t{\n\t\tlast_visit=0;//\u521d\u59cb\u5316\n\t\tchange_cnt=0;\n\t\tQuery(NOW);//\u67e5\u8be2\n\t}\n\t#undef LSON\n\t#undef RSON\n\t#undef MIDDLE\n\t#undef LEFT\n\t#undef RIGHT\n\t#undef NOW\n}\nnamespace sort\n{\n\tstruct Range//\u8bb0\u5f55\u6bcf\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\n\t{\n\t\tint left,right;//\u5c05\u662f\u548c\u7ed3\u675f\u4f4d\u7f6e\n\t\tbool order;//\u5347\u5e8f\u8fd8\u662f\u964d\u5e8f\n\t}range[MAXN*32];\n\tstruct SegmentTree//\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811,\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u548c\n\t{\n\t\tint lson,rson,sum;\n\t}sgt[MAXN*32];\n\t#define LSON sgt[now].lson\n\t#define RSON sgt[now].rson\n\t#define MIDDLE ((left+right)>>1)\n\t#define LEFT LSON,left,MIDDLE\n\t#define RIGHT RSON,MIDDLE+1,right\n\tint cnt=0,tot=0;\n\tint rubbish[MAXN*32];\n\tint NewNode()//\u5efa\u4e00\u4e2a\u65b0\u8282\u70b9\n\t{\n\t\tif(tot)\n\t\t{\n\t\t\treturn rubbish[tot--];\n\t\t}\n\t\treturn ++cnt;\n\t}\n\tvoid DeleteNode(int &now)//\u7a7a\u95f4\u56de\u6536\n\t{\n\t\tsgt[now].lson=sgt[now].rson=sgt[now].sum=0;\n\t\trubbish[++tot]=now;\n\t\tnow=0;\n\t}\n\tvoid PushUp(int now)//\u5408\u5e76\n\t{\n\t\tsgt[now].sum=sgt[LSON].sum+sgt[RSON].sum;\n\t}\n\tvoid SplitFormerKth(int &tree1,int &tree2,int k,int left=1,int right=n)//\u5206\u88c2\u4ece\u5c0f\u5230\u5927\u524dk\u4e2a\u6570\n\t{\n\t\tif(k<=0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tif(sgt[tree1].sum<=k)//\u5982\u679c\u5f53\u524d\u67e5\u627e\u7684k\u5927\u4e8e\u5f53\u524d\u533a\u95f4\u5927\u5c0f\u5c31\u53ef\u4ee5\u5c06\u539f\u6811\u4e2d\u7684\u8fd9\u90e8\u5206\u653e\u5165\u65b0\u6811\u4e86\n\t\t{\n\t\t\ttree2=tree1;\n\t\t\ttree1=0;\n\t\t\treturn;\n\t\t}\n\t\ttree2=NewNode();\n\t\tint sum=sgt[sgt[tree1].lson].sum;\n\t\tSplitFormerKth(sgt[tree1].lson,sgt[tree2].lson,k,left,MIDDLE);//\u60f3\u67e5\u8be2kth\u4e00\u6837\u67e5\u8be2\n\t\tSplitFormerKth(sgt[tree1].rson,sgt[tree2].rson,k-sum,MIDDLE+1,right);\n\t\tPushUp(tree1);\n\t\tPushUp(tree2);\n\t}\n\tvoid SplitLastKth(int &tree1,int &tree2,int k,int left=1,int right=n)//\u5206\u88c2\u4ece\u5927\u5230\u5c0f\u524dk\u4e2a\u6570\n\t{\n\t\tif(k<=0)//\u505a\u6cd5\u540c\u7406\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tif(sgt[tree1].sum<=k)\n\t\t{\n\t\t\ttree2=tree1;\n\t\t\ttree1=0;\n\t\t\treturn;\n\t\t}\n\t\ttree2=NewNode();\n\t\tint sum=sgt[sgt[tree1].rson].sum;\n\t\tSplitLastKth(sgt[tree1].rson,sgt[tree2].rson,k,MIDDLE+1,right);\n\t\tSplitLastKth(sgt[tree1].lson,sgt[tree2].lson,k-sum,left,MIDDLE);\n\t\tPushUp(tree1);\n\t\tPushUp(tree2);\n\t}\n\tvoid Merge(int &tree1,int &tree2,int left=1,int right=n)//\u7ebf\u6bb5\u6811\u5408\u5e76\n\t{\n\t\tif(!tree1||!tree2)//\u5982\u679c\u4e24\u68f5\u6811\u4e2d\u6709\u4e00\u68f5\u6811\u6ca1\u6709\u5f53\u524d\u8282\u70b9\u5c31\u76f4\u63a5\u7528\u6709\u7684\u90a3\u68f5\n\t\t{\n\t\t\ttree1+=tree2;\n\t\t\treturn;\n\t\t}\n\t\tMerge(sgt[tree1].lson,sgt[tree2].lson,left,MIDDLE);//\u5411\u4e0b\u9012\u5f52\u5408\u5e76\n\t\tMerge(sgt[tree1].rson,sgt[tree2].rson,MIDDLE+1,right);\n\t\tDeleteNode(tree2);//tree2\u4ee5\u540e\u4e0d\u4f1a\u518d\u7528\u5230\u4e86,\u5c31\u53ef\u4ee5\u5220\u4e86,\u8282\u7701\u7a7a\u95f4\n\t\tPushUp(tree1);\n\t}\n\tvoid Updata(int num,int val,int &now,int left=1,int right=n)//\u5355\u70b9\u4fee\u6539,\u5efa\u6811\u65f6\u7528,\u6240\u4ee5\u5176\u5b9e\u6ca1\u4ec0\u4e48\u7528\n\t{\n\t\tif(num<left||right<num)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tif(!now)\n\t\t{\n\t\t\tnow=NewNode();\n\t\t}\n\t\tif(left==right)\n\t\t{\n\t\t\tsgt[now].sum+=val;\n\t\t\treturn;\n\t\t}\n\t\tUpdata(num,val,LEFT);\n\t\tUpdata(num,val,RIGHT);\n\t\tPushUp(now);\n\t}\n\tvoid Build()//\u5efa\u6811\n\t{\n\t\tREP(i,1,n)//\u4e00\u4e2a\u70b9\u5c31\u662f\u4e00\u4e2a\u6709\u5e8f\u7684\u533a\u95f4,\u66b4\u529b\u5efa\u6811\n\t\t{\n\t\t\tfirst_root[i]=0;\n\t\t\tUpdata(arr[i],1,first_root[i]);\n\t\t\trange[first_root[i]].left=range[first_root[i]].right=i;\n\t\t\trange[first_root[i]].order=0;\n\t\t}\n\t\troot::Build();//\u8fd8\u8981\u628a\u533a\u95f4\u90e8\u5206\u6811\u4e5f\u5efa\u4e00\u4e0b\n\t}\n\tint new_tree;\n\tvoid SplitFKth(int &tree1,int &tree2,int k)//\u5206\u88c2\u533a\u95f4\u524dk\u4e2a\n\t{\n\t\tif(range[tree1].order==0)//\u9700\u8981\u5224\u65ad\u964d\u5e8f\u8fd8\u662f\u5347\u5e8f\n\t\t{\n\t\t\tSplitFormerKth(tree1,tree2,k);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSplitLastKth(tree1,tree2,k);\n\t\t}\n\t}\n\tvoid SplitLKth(int &tree1,int &tree2,int k)//\u540c\u7406\u53d6\u51fa\u540ek\u4e2a\n\t{\n\t\tif(range[tree1].order==1)\n\t\t{\n\t\t\tSplitFormerKth(tree1,tree2,k);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSplitLastKth(tree1,tree2,k);\n\t\t}\n\t}\n\tint first_root,last_root;\n\tvoid Sort(int now_left,int now_right,int order)\n\t{\n\t\troot::QueryRoot(now_left,now_right);//\u5148\u67e5\u8be2\u51fa\u8bbe\u8ba1\u5230\u7684\u533a\u95f4\u7684\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\n\t\tfirst_root=0;//\u524d\u9762\u591a\u51fa\u7684\u90e8\u5206\n\t\tlast_root=0;//\u540e\u9762\u591a\u51fa\u7684\u90e8\u5206\n\t\tif(now_left-range[change_root[1]].left)//\u5982\u679c\u524d\u9762\u6709\u591a\u51fa\u90e8\u5206\u5c31\u5206\u88c2\u51fa\u6765\n\t\t{\n\t\t\tSplitFKth(change_root[1],first_root,now_left-range[change_root[1]].left);//\u5206\u88c2\u591a\u51fa\u90e8\u5206\n\t\t\trange[first_root].left=range[change_root[1]].left;//\u65b0\u7684\u533a\u95f4\u5de6\u8fb9\u548c\u5f00\u59cb\u533a\u95f4\u76f8\u540c\n\t\t\trange[first_root].right=now_left-1;//\u53f3\u8fb9\u4e3a\u4fee\u6539\u533a\u95f4\u8fb9\u4e0a\n\t\t\trange[first_root].order=range[change_root[1]].order;//\u6392\u5e8f\u65b9\u5f0f\u548c\u539f\u6765\u76f8\u540c\n\t\t\troot::Updata(range[first_root].left,range[first_root].right,first_root);//\u91cd\u65b0\u8986\u76d6\u4e0a\u65b0\u7684\u8282\u70b9\u7f16\u53f7\n\t\t}\n\t\tif(range[change_root[change_cnt]].right-now_right)//\u540e\u9762\u540c\u7406\n\t\t{\n\t\t\tSplitLKth(change_root[change_cnt],last_root,range[change_root[change_cnt]].right-now_right);\n\t\t\trange[last_root].left=now_right+1;\n\t\t\trange[last_root].right=range[change_root[change_cnt]].right;\n\t\t\trange[last_root].order=range[change_root[change_cnt]].order;\n\t\t\troot::Updata(range[last_root].left,range[last_root].right,last_root);\n\t\t}\n\t\tREP(i,2,change_cnt)//\u5168\u90e8\u5408\u5e76\u8d77\u6765\n\t\t{\n\t\t\tMerge(change_root[1],change_root[i]);\n\t\t}\n\t\trange[change_root[1]].left=now_left;//\u65b0\u533a\u95f4\u8303\u56f4\u5c31\u662f\u4fee\u6539\u7684\u8303\u56f4\n\t\trange[change_root[1]].right=now_right;\n\t\trange[change_root[1]].order=order;//\u6392\u5e8f\u65b9\u5f0f\u4e5f\u662f\u4fee\u6539\u65b9\u5f0f\n\t\troot::Updata(now_left,now_right,change_root[1]);\n\t}\n\tint QueryKth(int k,int now,int left=1,int right=n)//\u67e5\u8be2k\u5927,\u6ca1\u4ec0\u4e48\u53ef\u4ee5\u8bf4\u7684\n\t{\n\t\tif(left==right)\n\t\t{\n\t\t\treturn left;\n\t\t}\n\t\tif(sgt[sgt[now].lson].sum>=k)\n\t\t{\n\t\t\treturn QueryKth(k,LEFT);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn QueryKth(k-sgt[sgt[now].lson].sum,RIGHT);\n\t\t}\n\t}\n\tint Query(int k)//\u67e5\u8be2\u7b2ck\u4e2a\u4f4d\u7f6e\n\t{\n\t\troot::QueryRoot(k,k);//\u8fd9\u9053\u533a\u95f4\n\t\tif(range[change_root[1]].order==0)//\u5206\u7c7b\u67e5\u8be2kth\n\t\t{\n\t\t\treturn QueryKth(k-range[change_root[1]].left+1,change_root[1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn QueryKth(range[change_root[1]].right-k+1,change_root[1]);\n\t\t}\n\t}\n\t#undef LSON\n\t#undef RSON\n\t#undef MIDDLE\n\t#undef LEFT\n\t#undef RIGHT\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tREP(i,1,n)\n\t{\n\t\tscanf(\"%d\",&arr[i]);\n\t}\n\tsort::Build();\n\tint left,right,order,k;\n\tREP(i,1,m)\n\t{\n\t\tscanf(\"%d%d%d\",&order,&left,&right);\n\t\tsort::Sort(left,right,order);\n\t}\n\tscanf(\"%d\",&k);\n\tprintf(\"%d\",sort::Query(k));\n\treturn 0;\n}\n```",
        "postTime": 1579089745,
        "uid": 86625,
        "name": "Limit",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "### \u7ebf\u6bb5\u6811\u5206\u88c2\n\n\u4ee5\u67d0\u4e2a\u952e\u503c\u4e3a\u4e2d\u70b9\u5c06\u7ebf\u6bb5\u6811\u5206\u88c2\u6210\u5de6\u53f3\u4e24\u90e8\u5206\uff0c\u5e94\u8be5\u7c7b\u4f3cTreap\u7684\u5206\u88c2\u5427\uff08\u6211\u83dc\u4e0d\u4f1aTreap\uff09\u3002\u4e00\u822c\u5e94\u7528\u4e8e\u533a\u95f4\u6392\u5e8f\u3002\n\n\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u628a\u5206\u88c2\u4e4b\u540e\u7684\u4e24\u68f5\u6811\u7684\u91cd\u590d\u7684$\\log$\u4e2a\u8282\u70b9\u65b0\u5efa\u51fa\u6765\uff0c\u5355\u6b21\u65f6\u95f4\u590d\u6742\u5ea6\u4e25\u683c$O(\\log n)$\u3002\n\n\u81f3\u4e8e\u53c8\u6709\u5408\u5e76\u53c8\u6709\u5206\u88c2\u7684\u590d\u6742\u5ea6\uff0c\u849f\u84bb\u4e00\u76f4\u4e0d\u4f1a\u6bd4\u8f83\u6709\u8bf4\u670d\u529b\u7684\u8bc1\u660e\uff0c\u76f4\u5230\u770b\u89c1[SovietPower\u5de8\u4f6c\u7684\u9898\u89e3](https://www.cnblogs.com/SovietPower/p/9300819.html)\n\n\u5bf9\u4e8e\u53ea\u6709\u5408\u5e76\uff1a\u5408\u5e76\u4e24\u68f5\u7ebf\u6bb5\u6811\u7684\u8fc7\u7a0b\uff0c\u662f\u627e\u5230\u5b83\u4eec$x$\u4e2a\u91cd\u5408\u7684\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5b83\u4eec\u5408\u5e76\uff0c\u800c\u5bf9\u4e8e\u4e0d\u91cd\u5408\u7684\u8282\u70b9\u4f1a\u8df3\u8fc7\u3002\n\n\u6ce8\u610f\u5230\u5408\u5e76\u4e0e\u5206\u88c2\u7c7b\u4f3c\u4e92\u9006\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u770b\u505a\u662f\u5220\u6389\u4e86\u8fd9$x$\u4e2a\u8282\u70b9\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u5f97\u51fa\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\uff0c\u7b49\u4e8e\u88ab\u5220\u53bb\u7684\u8282\u70b9\u6570\u7684\u4e0a\u754c\uff0c\u4e0d\u5927\u4e8e\u82e5\u5e72\u7ebf\u6bb5\u6811\u6700\u5f00\u59cb\u7684\u8282\u70b9\u6570\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u65e2\u6709\u5408\u5e76\u53c8\u6709\u5206\u88c2\u7684\u9898\u76ee\uff0c\u590d\u6742\u5ea6\u4e5f\u662f\u53ef\u4ee5\u5206\u6790\u6ef4\uff01\n\n$n$\u68f5\u7ebf\u6bb5\u6811\u521d\u59cb\u6709$O(n\\log n)$\u7684\u8282\u70b9\uff0c\u6bcf\u4e00\u6b21\u5206\u88c2\u53ea\u4f1a\u65b0\u589e$O(\\log n)$\u7684\u8282\u70b9\n\n\u4e8e\u662f\u603b\u70b9\u6570\u5c31\u662f$O((n+m)\\log n)$\u7ea7\u522b\u7684\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u603b\u4ee3\u4ef7\u5c31\u4e0d\u4f1a\u8d85\u8fc7$O((n+m)\\log n)$\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u56de\u5230\u8fd9\u9898\n\n\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u6709\u5e8f\uff0c\u90a3\u4e48\u987a\u5e8f\u662f\u552f\u4e00\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u4eec\u63d2\u5230\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u91cc\uff0c\u8bb0\u5f55\u4e00\u4e0b\u662f\u5347\u5e8f\u8fd8\u662f\u964d\u5e8f\u3002\u533a\u95f4\u6392\u5e8f\u5c31\u53d8\u6210\u4e86\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u4f46\u662f\u6211\u4eec\u7684\u6392\u5e8f\u7aef\u70b9\u53ef\u80fd\u4f1a\u843d\u5728\u4e00\u4e2a\u6709\u5e8f\u533a\u95f4\u5185\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u62c6\u5f00\u3002\u989d\u5916\u7528\u4e00\u4e2aset\u6807\u8bb0\u5df2\u7ecf\u6709\u5e8f\u7684\u533a\u95f4\uff08\u50cf\u73c2\u6735\u8389\u6811\u4e00\u6837\uff09\uff0c\u9700\u8981\u62c6\u5f00\u65f6\u7ebf\u6bb5\u6811\u5206\u88c2\u3002\n\n~~\u7a81\u7136\u6682\u65f6\u53d8\u6210\u4e86\u6d1b\u8c37rk1~~\n```cpp\n#include<bits/stdc++.h>\n#define R register int\n#define G if(++ip==ie)if(fread(ip=buf,1,SZ,stdin))\nusing namespace std;\ntypedef set<int>::iterator IT;\nconst int SZ=1<<19,N=1e5+9,M=6e6;\nchar buf[SZ],*ie=buf+SZ,*ip=ie-1;\ninline int in(){\n\tG;while(*ip<'-')G;\n\tR x=*ip&15;G;\n\twhile(*ip>'-'){x*=10;x+=*ip&15;G;}\n\treturn x;\n}\nint p,rt[N],lc[M],rc[M],s[M],o[N];\nset<int>t;\nvoid ins(R&x,R l,R r,R k){\n\ts[x=++p]=1;\n\tif(l==r)return;\n\tR m=(l+r)>>1;\n\tk<=m?ins(lc[x],l,m,k):ins(rc[x],m+1,r,k);\n}\nint qry(R x,R l,R r){\n\tif(l==r)return l;\n\tR m=(l+r)>>1;\n\treturn lc[x]?qry(lc[x],l,m):qry(rc[x],m+1,r);\n}\nvoid mer(R&x,R y){//\u5408\u5e76\n\tif(!(x&&y)){x|=y;return;}\n\ts[x]+=s[y];\n\tmer(lc[x],lc[y]);\n\tmer(rc[x],rc[y]);\n}\nvoid spl(R&x,R y,R k,R o){//\u5206\u88c2\n\tif(s[y]==k)return;\n\ts[x=++p]=s[y]-k;s[y]=k;\n\tif(o){\n\t\tif(k<=s[rc[y]])spl(rc[x],rc[y],k,o),lc[x]=lc[y],lc[y]=0;\n\t\telse  spl(lc[x],lc[y],k-s[rc[y]],o);\n\t}\n\telse{\n\t\tif(k<=s[lc[y]])spl(lc[x],lc[y],k,o),rc[x]=rc[y],rc[y]=0;\n\t\telse  spl(rc[x],rc[y],k-s[lc[y]],o);\n\t}\n}\nIT Split(R p){//\u62c6\u533a\u95f4\n\tIT i=t.lower_bound(p);\n\tif(*i==p)return i;\n\t--i;spl(rt[p],rt[*i],p-*i,o[p]=o[*i]);\n\treturn t.insert(p).first;\n}\nint main(){\n\tR n=in(),m=in();\n\tt.insert(n+1);\n\tfor(R i=1;i<=n;++i)\n\t\tins(rt[i],0,n,in()),t.insert(i);\n\twhile(m--){\n\t\tR op=in(),l=in(),r=in();\n\t\tIT il=Split(l),ir=Split(r+1);\n\t\tfor(IT i=++il;i!=ir;++i)mer(rt[l],rt[*i]);\n\t\to[l]=op;t.erase(il,ir);\n\t}\n\tR q=in();\n\tSplit(q);Split(q+1);\n\tprintf(\"%d\\n\",qry(rt[q],0,n));\n\treturn 0;\n}\n```",
        "postTime": 1548982185,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "  \n  \u9996\u5148\uff0c\u8fd9\u9053\u9898\u53ea\u6709\u4e00\u7ec4\u67e5\u8be2\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206\u8fd9\u4e2a\u6570\u7684\u6392\u540d \n  \n  \u6bcf\u6b21\u4e8c\u5206\u4e00\u4e2a\u8981\u67e5\u8be2\u7684\u6570\u5728\u5e8f\u5217\u4e2d\u7684\u5927\u5c0f\u6392\u540d\n  \n  (\u6392\u540d\u6307\u5728\u5347\u5e8f\u7684\u60c5\u51b5\u4e0b\u7684\u6392\u540d) \n  \n  \u7136\u540e\u5f53val[i] >= mid \u6b64\u4f4d\u7f6e\u5c31\u4e3a1\n  \u53cd\u4e4b\u5219\u4e3a0\n  \u8fd9\u6837\u4e00\u6765\uff0c\u8fd9\u9053\u9898\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a01\u5e8f\u5217\u6392\u5e8f\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5b9e\u73b0logn\u6392\u5e8f\n  \n  \u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u9700\u8981\u5b9e\u73b0\u533a\u95f4\u8986\u76d6\n  \n  \u6bcf\u6b21\u6392\u5e8f\u524d\u5148\u67e5\u8be2\u6392\u5e8f\u4e00\u5171\u6709\u591a\u5c111\n  \n  \u5347\u5e8f\u6392\u5e8f\u5219\u5c06r-\u533a\u95f41\u7684\u6570\u91cf+1~r\u6539\u4e3a1\n  l~ r-\u533a\u95f41\u7684\u6570\u91cf\u6539\u4e3a0\n  \n  \u6700\u540e\u518d\u67e5\u8be2\u8981\u8be2\u95ee\u7684\u4f4d\u7f6e\n  \n  \u82e5\u8981\u67e5\u8be2\u7684\u4f4d\u7f6e\u4e3a1\uff0c\u90a3\u4e48\u5c31\u589e\u52a0ta\u7684\u6392\u540d\uff08r=mid-1\uff09 \n  \n  \u53cd\u4e4b\uff0c\u5c31\u964d\u4f4e\u8fd9\u4e2a\u6570\u6392\u540d \n  \n  \u7531\u4e8e\u8fd9\u4e2a\u6570\u5217\u662f1~n\u7684\u5168\u6392\u5217\uff0c\u6240\u4ee5\u4e8c\u5206\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u7b54\u6848\n  \n  ~~\u4e0d\u8fc7\u597d\u50cf\u8fd9\u9898\u66b4\u529b\u7ed9\u5206\u633a\u591a\u7684\uff0c\u597d\u50cf\u66b4\u529b\u80fd\u523080~~\n  \n```\n\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n# define ls now<<1\n# define rs now<<1|1\nconst int M = 30005 ;\nusing namespace std;\ninline int read(){\n\tchar c=getchar(); int x=0,w=1;\n\twhile(c>'9'||c<'0'){\n\t\tif(c=='-') w=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*w;\n}\nstruct Q{\n\tint opt,l,r;\n}q[M];\nint n,m,st[M],val[M],tag[M<<2],tree[M<<2],K;\ninline void pushup(int now){\n\ttree[now]=tree[ls]+tree[rs];\n}\nvoid build(int l,int r,int now){\n\ttag[now]=-1;\n\tif(l==r){\n\t\ttree[now]=st[l];\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,ls); build(mid+1,r,rs);\n\tpushup(now);\n}\ninline void pushdown(int now,int l,int r){\n\tif(tag[now]<0) return ;\n\ttag[ls]=tag[rs]=tag[now];\n\ttree[ls]=tag[now]*l; tree[rs]=tag[now]*r;\n\ttag[now]=-1;\n}\nvoid change(int L ,int R ,int val,int l,int r,int now){\n\tif(l>R||r<L) return ;\n\tif(l>=L&&r<=R){\n\t\ttree[now]=val*(r-l+1);\n\t\ttag[now]=val; return ;\n\t}\n\tint mid=(l+r)>>1;\n\tpushdown(now,mid-l+1,r-mid);\n\tchange(L,R,val,l,mid,ls);\n\tchange(L,R,val,mid+1,r,rs);\n\tpushup(now);\n}\nint query(int L, int R,int l,int r,int now){\n\tif(l>R||r<L) return 0;\n\tif(l>=L&&r<=R) return tree[now];\n\tint mid=(l+r)>>1;\n\tpushdown(now,mid-l+1,r-mid);\n\tint Ans=0;\n\tAns+=query(L, R, l,mid,ls);\n    Ans+=query(L, R, mid+1,r,rs);\n\treturn Ans;\n}\ninline int judge(int mid){\n\tfor(register int i=1;i<=n;++i)\n\t  if(val[i]>=mid) st[i]=1;\n\t  else st[i]=0;\n\tbuild(1,n,1);\n\tfor(register int i=1;i<=m;++i){\n\t\tint l =q[i].l, r= q[i].r ;\n\t\tif(q[i].opt==0){\n\t\t// \u5347\u5e8f\u6392\u5217 \n\t\t\tint num1=query(l,r,1,n,1);\n\t\t\tchange(r-num1+1,r,1,1,n,1);\n\t\t\tchange(l,r-num1,0,1,n,1);\n\t\t}\n\t\telse{\n\t\t//  \u964d\u5e8f\u6392\u5217\n\t\t\tint num1=query(l,r,1,n,1);\n\t\t\tchange(l,l+num1-1,1,1,n,1);\n\t\t\tchange(l+num1,r,0,1,n,1);\n\t\t}\n\t}\n\tint tmp=query(K,K,1,n,1);\n\treturn tmp;\n}\nint main(){\n\tn=read(); m=read();\n\tfor(register int i=1;i<=n;++i) val[i]=read();\n\tfor(register int i=1;i<=m;++i){\n\t\tq[i].opt=read(); q[i].l=read(); q[i].r=read();\n\t}\n\tK = read() ;\n\tint L=1 , R=n , Ans=0;\n\twhile(L<=R){\n\t\tint mid=(L+R)>>1;\n\t\tif(judge(mid))  L=mid+1,Ans=mid ;\n\t\telse  R=mid-1;\n\t}\n\tprintf(\"%d\\n\",Ans);\n\treturn 0;\n}\n```",
        "postTime": 1520683538,
        "uid": 53884,
        "name": "beretty",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "[\u5176\u5b9e\u70b9\u8fd9\u91cc\u4e5f\u4e0d\u4f1a\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/yifusuyi/p/10438005.html)\n\n## Description\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6392\u5217\uff0c\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u9009\u53d6\u4e00\u6bb5\u5c40\u90e8\u8fdb\u884c\u5347\u5e8f\u6216\u964d\u5e8f\u6392\u5e8f\uff0c\u95ee\u4f60\u4e00\u6ce2\u64cd\u4f5c\u540e\u67d0\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u662f\u51e0\n\n## Hint\n\n$1~\\leq~n,~m~\\leq~10^5$\n\n## Solution\n\n\u6709\u4e24\u79cd\u505a\u6cd5\uff0c\u4e00\u79cd\u5728\u7ebf\u4e00\u79cd\u79bb\u7ebf\uff0c\u8fd9\u91cc\u628a\u5728\u7ebf\u90e8\u5206\u8bb2\u5f97\u66f4\u6e05\u695a\u70b9\u5427\u2026\u2026\n\n\u8003\u8651\u79bb\u7ebf\u7b97\u6cd5\uff0c\u6211\u4eec\u4e8c\u5206\u8be5\u4f4d\u7f6e\u4e0a\u7684\u7b54\u6848\uff0c\u5c06\u5927\u4e8e\u8be5\u6570\u7684\u5143\u7d20\u7f6e\u4e3a $1$\uff0c\u5c0f\u4e8e\u8be5\u6570\u7684\u5143\u7d20\u7f6e\u4e3a $0$\uff0c\u7136\u540e\u6a21\u62df\u6240\u6709\u7684\u6392\u5e8f\u5e76\u68c0\u9a8c\u3002\u7531\u4e8e\u4f7f\u7528\u7ebf\u6bb5\u6811\u5bf9 $0/1$ \u5e8f\u5217\u591a\u6b21\u5c40\u90e8\u6392\u5e8f\u53ef\u4ee5\u505a\u5230 $O(m~\\log n~+~n)$ \u7684\u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a $O(m~\\log^2 n)$\u3002\n\n\u5177\u4f53\u6392\u5e8f\u7684\u505a\u6cd5\u4e3a\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u6709\u591a\u5c11\u4e2a $1$\uff0c\u4e0d\u59a8\u8bbe\u4e3a $x$ \u4e2a\u3002\u5982\u679c\u5bf9\u8be5\u533a\u95f4\u5347\u5e8f\u6392\u5e8f\uff0c\u5219\u5c06\u540e\u9762 $x$ \u4e2a\u6570\u7f6e\u4e3a $1$\uff0c\u5269\u4e0b\u7684\u7f6e\u4e3a $0$\uff0c\u5426\u5219\u5c06\u524d\u9762 $x$ \u4e2a\u6570\u7f6e\u4e3a $1$\uff0c\u5176\u4f59\u7f6e\u4e3a $0$\u3002\u4e8e\u662f\u4e00\u6b21\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u4e3a $O(\\log n)$\uff0c\u4e8e\u662f\u8fdb\u884c $m$ \u6b21\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u4e3a $O(m~\\log n)$\u3002\n\n\u8003\u8651\u5728\u7ebf\u505a\u3002\u53d1\u73b0\u5bf9\u4e8e\u4efb\u610f\u7684\u65f6\u523b\u6211\u4eec\u90fd\u6709\u4e00\u4e9b\u533a\u95f4\u662f\u6392\u597d\u5e8f\u7684\u3002\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u7684\u95ee\u9898\u662f\u6bcf\u6b21\u6392\u5e8f\u64cd\u4f5c\u540e\u5408\u5e76\u88ab\u6392\u5e8f\u64cd\u4f5c\u8986\u76d6\u7684\u533a\u95f4\u3002\u8003\u8651\u5230\u5bf9\u4e8e\u4e24\u4e2a\u5e8f\u5217\u7684\u6309\u5e8f\u5408\u5e76\u53ef\u4ee5\u4f7f\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u8f7b\u677e\u505a\u5230\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u6392\u597d\u5e8f\u7684\u533a\u95f4\u5206\u522b\u7ef4\u62a4\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u7136\u540e\u7528\u4e00\u4e2a ``set`` \u7ef4\u62a4\u8fd9\u4e9b\u533a\u95f4\u3002\u5bf9\u4e8e\u88ab\u8be5\u6392\u5e8f\u64cd\u4f5c\u5b8c\u5168\u8986\u76d6\u7684\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u800c\u5bf9\u4e8e\u533a\u95f4\u4e24\u4fa7\u7684\u88ab\u8986\u76d6\u4e86\u4e00\u90e8\u5206\u7684\u4e24\u4e2a\u533a\u95f4\uff0c\u53ef\u4ee5\u5148\u5206\u88c2\u6210\u88ab\u5b8c\u5168\u8986\u76d6\u7684\u533a\u95f4\u548c\u5b8c\u5168\u4e0d\u88ab\u8986\u76d6\u7684\u533a\u95f4\u518d\u8fdb\u884c\u5408\u5e76\u3002\u4f8b\u5982\u88ab\u6392\u5e8f\u7684\u533a\u95f4\u662f $[l,~r]$\uff0c\u5de6\u4fa7\u88ab\u8986\u76d6\u4e86\u4e00\u90e8\u5206\u7684\u533a\u95f4\u4e3a $[l_0,~y_0]$\uff0c\u5176\u4e2d $l_0~<~l~<~r_0$\uff0c\u90a3\u4e48\u5c06\u533a\u95f4 $[l_0,~r_0]$ \u62c6\u5206\u6210 $[l_0,~l - 1]~\\bigcap~[l,~r_0]$ \u4e24\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u5bf9 $[l,~r_0]$ \u4e0e\u5176\u4ed6\u88ab\u5b8c\u5168\u8986\u76d6\u7684\u533a\u95f4\u8fdb\u884c\u5408\u5e76\u5373\u53ef\u3002\n\n\u8003\u8651\u590d\u6742\u5ea6\u5206\u6790\uff1a\n\n\u5982\u679c\u4e0d\u8003\u8651\u7ebf\u6bb5\u6811\u5206\u88c2\u64cd\u4f5c\uff0c\u6211\u4eec\u5bf9\u533a\u95f4\u7684\u64cd\u4f5c\u5b9e\u8d28\u4e0a\u662f\u5c06\u5f88\u591a\u7684\u5c0f\u533a\u95f4\u5408\u5e76\u6210\u81f3\u5c11\u4e00\u4e2a\u5927\u533a\u95f4\u3002\u8003\u8651\u5230\u5bf9 $n$ \u4e2a\u957f\u5ea6\u4e3a $1$ \u7684\u5c0f\u533a\u95f4\u5168\u90e8\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u533a\u95f4\u7684\u590d\u6742\u5ea6\u4e3a $O(n~\\log n)$\uff0c\u4e8e\u662f ``merge`` \u90e8\u5206\u7684\u7684\u603b\u590d\u6742\u5ea6\u4e3a $O(n~\\log n)$\u3002\u8003\u8651\u5206\u88c2\uff0c\u4e00\u6b21\u6392\u5e8f\u64cd\u4f5c\u540e\u4f1a\u5206\u88c2\u51fa $O(1)$ \u4e2a\u65b0\u533a\u95f4\uff0c\u4e8e\u662f $m$ \u6b21\u64cd\u4f5c\u540e\u4f1a\u5206\u88c2\u51fa $O(m)$ \u4e2a\u65b0\u533a\u95f4\uff0c\u5408\u5e76\u8fd9 $O(m)$ \u4e2a\u533a\u95f4\u7684\u590d\u6742\u5ea6\u4ecd\u4e3a $O(m~\\log n)$\uff0c\u8003\u8651\u5230\u6bcf\u6b21\u5206\u88c2\u662f\u4e25\u683c $O(\\log n)$ \u7684\uff0c\u4e14\u4f1a\u8fdb\u884c $O(m)$ \u6b21\u6392\u5e8f\uff0c\u6240\u4ee5\u5206\u88c2\u64cd\u4f5c\u5bf9\u590d\u6742\u5ea6\u7684\u603b\u8d21\u732e\u4ecd\u662f $O(m~\\log n)$\u3002\u4e8e\u662f\u603b\u590d\u6742\u5ea6\u4e3a $O((n+m)~\\log n)$\u3002\u6bd4\u4e0a\u9762\u7684\u79bb\u7ebf\u7b97\u6cd5\u66f4\u4f18\u79c0\u3002\u540c\u65f6\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u89e3\u51b3\u67e5\u8be2\u4efb\u610f\u591a\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u4e00\u4e2a\u3002\n\n## Code\n\n\u5728\u5206\u88c2\u533a\u95f4\u7684\u65f6\u5019\u6709\u5f88\u591a\u5c0f\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u2026\u2026\u53e6\u5916\u4e0b\u9762\u7684\u4ee3\u7801\u5b58\u5728\u4e00\u5b9a\u7684\u5185\u5b58\u6cc4\u6f0f\u95ee\u9898\uff0c\u4e0d\u8fc7\u603b\u5171\u88ab\u6cc4\u9732\u7684\u5185\u5b58\u662f $O((n+m)~\\log n)$ \u7ea7\u522b\u7684\uff0c\u5bf9\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0d\u4ea7\u751f\u5f71\u54cd\uff0c\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\n\n~~\u5176\u5b9e\u662f\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u56de\u6536\u7a7a\u95f4\u4f1a\u83ab\u540d\u5176\u5999 RE~~\n\n```cpp\n#include <cstdio>\n#include <set>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 1000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n\tchar ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\tint top=0;\n\tdo {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 100010;\n\nstruct Tree {\n\tTree *ls, *rs;\n\tint l, r, v;\n\n\tTree() {\n\t\tls = rs = NULL;\n\t\tl = r = v = 0;\n\t}\n\t\n\tinline void pushup() {if (this->l != this->r) this->v = (this->ls ? this->ls->v : 0) + (this->rs ? this->rs->v : 0); else this->v = 1;}\n};\n\nstruct OP {\n\tint l, r;\n\tbool up;\n\tTree *rot;\n\t\n\tinline bool operator<(const OP &_others) const {\n\t\treturn this->r < _others.r;\n\t}\n\n\tOP(int _l = 0, int _r = 0, bool _up = 0, Tree *_rot = 0) {\n\t\tl = _l; r = _r; up = _up; rot = _rot;\n\t}\n};\nOP temp;\nstd::set<OP>s;\n\nint n, m;\nint MU[maxn];\n\nvoid split(int, bool);\nvoid insert(Tree*, int, int, int);\nvoid split(Tree*, Tree*, Tree*, int);\nTree* merge(Tree*, Tree*);\nint query(Tree*, int);\n\nint main() {\n\tfreopen(\"data.in\", \"r\", stdin);\n\tfreopen(\"my.out\", \"w\", stdout);\n\tqr(n); qr(m);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tauto _rot = new Tree; qr(MU[i]);\n\t\tinsert(_rot, 1, n, MU[i]); s.insert(OP(i, i, true, _rot));\n\t}\n\tfor (int j = 1, a, b, c; j <= m; ++j) {\n\t\ta = b = c = 0; qr(a); qr(b); qr(c);\n\t\tsplit(b, true); split(c + 1, false);\n\t\tauto l = s.lower_bound({0, b, true, NULL}), r = s.lower_bound({0, c + 1, true, NULL});\n\t\tauto _tmp = *l;\n\t\tfor (auto i = s.erase(l); i != r; i = s.erase(i)) {\n\t\t\t_tmp.rot = merge(_tmp.rot, (*i).rot);\n\t\t}\n\t\t_tmp.l = b; _tmp.r = c; _tmp.up = !a;\n\t\ts.insert(_tmp);\n\t}\n\tint q = 0; qr(q);\n\tauto _ans = s.lower_bound({0, q, true, NULL}); auto ans = *_ans;\n\tint k = ans.up ? q - ans.l + 1 : ans.r - q + 1;\n\tqw(query(ans.rot, k), '\\n', true);\n\treturn 0;\n}\n\nint query(Tree *u, int k) {\n\tif (u->l == u->r) return u->l;\n\tif (!u->ls) return query(u->rs, k);\n\tif (u->ls->v >= k) return query(u->ls, k);\n\treturn query(u->rs, k - u->ls->v);\n}\n\nTree* merge(Tree *u, Tree *v) {\n\tif (!u) return v; else if (!v) return u;\n\tu->v += v->v;\n\tu->ls = merge(u->ls, v->ls);\n\tu->rs = merge(u->rs, v->rs);\n\treturn u;\n}\n\nvoid insert(Tree *u, int l, int r, int v) {\n\t++u->v;\n\tif ((u->l = l) == (u->r = r)) return;\n\tint mid = (l + r) >> 1;\n\tif (v <= mid) insert(u->ls = new Tree, l, mid, v);\n\telse insert(u->rs = new Tree, mid + 1, r, v);\n}\n\nvoid split(int x, bool isfront) {\n\tauto k = s.lower_bound({0, x, true, NULL}); if (k == s.end()) return; auto t = *k;\n\tif (t.l == x) return;\n\ts.erase(k);\n\tint _k = (isfront ? t.r - x + 1: x - t.l), len = t.r - t.l + 1;\n\tif (t.up == isfront) {\n\t\tTree *_rot = new Tree;\n\t\t_k = len - _k; \n\t\tif (!_k) {\n\t\t\ts.insert(t); return;\n\t\t}\n\t\tsplit(t.rot, t.rot, _rot, _k);\n\t\tif (!t.up) {\n\t\t\t_k = len - _k; std::swap(_rot, t.rot);\n\t\t}\n\t\ts.insert({t.l, t.l + _k - 1, t.up, t.rot});\n\t\ts.insert({t.l + _k, t.r, t.up, _rot});\n\t} else {\n\t\tTree *_rot = new Tree; \n\t\tif (!_k) {\n\t\t\ts.insert(t); return;\n\t\t}\n\t\tsplit(t.rot, t.rot, _rot, _k);\n\t\tif (!t.up) {\n\t\t\tstd::swap(t.rot, _rot); _k = len -_k;\n\t\t}\n\t\ts.insert({t.l, t.l + _k - 1, t.up, t.rot});\n\t\ts.insert({t.l + _k, t.r, t.up, _rot});\n\t}\n}\n\nvoid split(Tree *u, Tree *l, Tree *r, int k) {\n\tl->l = r->l = u->l; r->r = l->r = u->r;\n\tif (!u->ls) split(u->rs, l->rs ? l->rs : l->rs = new Tree, r->rs ? r->rs : r->rs = new Tree, k);\n\telse if (k == u->ls->v) {\n\t\tl->ls = u->ls; r->rs = u->rs; l->rs = NULL; r->ls = NULL;\n\t} else if (k < u->ls->v) {\n\t\tsplit(u->ls, l->ls ? l->ls : l->ls = new Tree, r->ls ? r->ls : r->ls = new Tree, k);\n\t\tr->rs = u->rs; l->rs = NULL;\n\t} else {\n\t\tsplit(u->rs, l->rs ? l->rs : l->rs = new Tree, r->rs ? r->rs : r->rs = new Tree, k - u->ls->v);\n\tl->ls = u->ls; r->ls = NULL;\n\t}\n\tl->pushup(); r->pushup();\n}\n```\n\n## Summary\n\n1\u3001\u5c06 $n$ \u4e2a\u957f\u5ea6\u4e3a $1$ \u7684\u5c0f\u533a\u95f4\u5408\u5e76\u4e3a\u4e00\u4e2a\u5927\u533a\u95f4\u7684\u590d\u6742\u5ea6\u4e3a $O(n~\\log n)$\uff0c\u7406\u7531\u662f\u8fd9\u6837\u7684\u5f00\u9500\u663e\u7136\u4e0d\u5927\u4e8e\u5c06\u8fd9\u4e9b\u533a\u95f4\u987a\u6b21\u63d2\u5165\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n\n2\u3001\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5e8f\u5217\u53ef\u4ee5\u4f7f\u7528\u5408\u5e76\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u505a\u5230\u5747\u644a\u590d\u6742\u5ea6 $O(\\log n)$\u3002",
        "postTime": 1551168396,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "\u4e00\u9053\u795e\u9898ORZ,\u601d\u8def\u771f\u7684\u5f88\u5999\u554a\u3002    \n### \u6b63\u6587\u90e8\u5206\uff1a          \n\u9898\u610f\uff1a\n\n\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u53ef\u4ee5\u5bf9\u67d0\u4e00\u4e2a\u533a\u95f4\u5347\u5e8f\u548c\u964d\u5e8f\u6392\u5e8f\uff0c\u95ee\u4f60\u6700\u540e\u6570\u5217\u4e2d\u7b2c$Q$\u4e2a\u6570\u662f\u4ec0\u4e48\uff1f             \n\u4e4d\u4e00\u770b\u8c8c\u4f3c\u6beb\u65e0\u601d\u8def\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u95ee\u9898\uff1a\n\u5982\u679c\u5bf9$1$\u4e2a$01$\u5e8f\u5217\u6267\u884c\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u53d8\u5f97\u7b80\u5355\u4e00\u70b9\uff1f        \n\u8bbe\u67d0\u6bb5\u533a\u95f4$[l,r]$\u91cc\u603b\u5171\u6709$cnt$\u4e2a1   \n\u90a3\u4e48\u964d\u5e8f\u6392\u5c31\u662f\u628a$l\\sim l+cnt - 1$\u4fee\u6539\u4e3a$1$,\u628a$l+cnt \\sim r$\u4fee\u6539\u4e3a$0$              \n\u5347\u5e8f\u6392\u5219\u662f\u628a$r-cnt+1\\sim r$\u4fee\u6539\u4e3a$1$,$l\\sim r-cnt$\u4fee\u6539\u4e3a$0$      \n\u5176\u5b9e\u4e00\u4e2a$01$\u5e8f\u5217\u6709\u591a\u5c11\u4e2a$1$\u5c31\u662f\u8fd9\u4e2a\u5e8f\u5217\u7684\u548c\u3002    \n\u4e8e\u662f\u8fd9\u6837\u5c31\u53d8\u6210\u4e86\u4e00\u9053\u7ebf\u6bb5\u6811\u95ee\u9898\uff1a  \n\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u6c42\u548c\n\n\u4e8e\u662f\u6211\u4eec\u56de\u5f52\u539f\u9898\uff0c\u770b\u662f\u5426\u80fd\u7528\u4e00\u79cd\u201c$01$\u5e8f\u5217\u201d\u7684\u65b9\u6cd5\u7ef4\u62a4\u539f\u6570\u5217\u3002      \n**\u7b54\u6848\u662f\u53ef\u4ee5\u7684\u3002**      \n\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u6570\uff0c\u6211\u4eec\u628a\u5927\u4e8e\u5b83\u7684\u6570\u8bbe\u4e3a$1$,\u5c0f\u4e8e\u5b83\u7684\u6570\u8bbe\u4e3a$0$\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a$01$\u5e8f\u5217\u3002    \n\u628a\u6240\u6709\u64cd\u4f5c\u5168\u90e8\u79bb\u7ebf\uff0c\u8dd1\u4e00\u904d\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u4e8c\u5206\u4e86\u3002    \n\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4e8c\u5206\uff1f   \n\u6211\u4eec\u8bbe\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u8fd9\u4e2a$01$\u5e8f\u5217\u6700\u540e\u7b2c$Q$\u4f4d\u662f$1$,\u8bf4\u660e\u6700\u540e\u7684\u7b54\u6848\u4e00\u5b9a\u6bd4\u8fd9\u4e2a\u6570\u5927\uff0c\u5426\u5219\u5219\u4e00\u5b9a\u6bd4\u8fd9\u4e2a\u6570\u5c0f\u3002\n\n\u800c\u9898\u76ee\u53c8\u4fdd\u8bc1\u4e86\u4e00\u5b9a\u4e3a\u5168\u6392\u5217\uff0c\u6240\u4ee5\u7b54\u6848\u80af\u5b9a\u53ea\u6709\u4e00\u4e2a\u3002    \n\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u4e8c\u5206+\u7ebf\u6bb5\u6811\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define gc getchar\n#define il inline\n#define lson(x) (x << 1)\n#define rson(x) (x << 1 | 1)\nconst int MAXN = 1e5 + 10;\nconst int MAXQ = MAXN;\nusing namespace std;\nint n,m,i,j,k,ans,Q;\nint a[MAXN];bool b[MAXN];\nint tr[MAXN << 2],tag[MAXN << 2];\nstruct Questions {\n\tint l,r;bool opt;\n\tQuestions() {l = r = opt = 0;}\n\tQuestions(int L,int R,int Opt) {\n\t\tl = L;r = R;opt = Opt;\n\t}\n}query[MAXQ];\nil int read() {\n\tint res = 0;char c;bool sign = 0;\n\tfor(c = gc();!isdigit(c);c = gc()) sign |= c == '-';\n\tfor(;isdigit(c);c = gc()) res = (res << 1) + (res << 3) + (c ^ 48);\n\treturn sign ? -res : res;\n}\nil void pushup(int num) {\n\ttr[num] = tr[lson(num)] + tr[rson(num)];\n\treturn;\n}\nil void init(int num,int l,int r,int val) {\n\ttr[num] = (r - l + 1) * val;\n\ttag[num] = val; \n\treturn;\n}\nil void pushdown(int num,int l,int r) {\n\tif(~tag[num]) {\n\t\tint mid = l + r >> 1;\n\t\tinit(lson(num),l,mid,tag[num]);\n\t\tinit(rson(num),mid + 1,r,tag[num]);\n\t\ttag[num] = -1;\n\t}\n\treturn;\n}\nvoid build(int l,int r,int num) {\n\tif(l == r) {tr[num] = b[l];return;}\n\tint mid = l + r >> 1;\n\tbuild(l,mid,lson(num));\n\tbuild(mid + 1,r,rson(num));\n\tpushup(num);\n\treturn;\n}\nvoid modify(int ml,int mr,int l,int r,int num,int val) {\n   if(ml <= l && r <= mr) {\n        tr[num] = (r - l + 1) * val;\n        tag[num] = val;\n        return;\n    }\n    int mid = l + r >> 1;\n    pushdown(num,l,r);\n    if(ml <= mid) modify(ml,mr,l,mid,lson(num),val);\n    if(mid < mr)  modify(ml,mr,mid + 1,r,rson(num),val);\n    pushup(num);return; \n}\nint Query(int ql,int qr,int l,int r,int num) {\n\tif(ql <= l && r <= qr) return tr[num];\n\tpushdown(num,l,r);\n\tint mid = l + r >> 1,res = 0;\n\tif(ql <= mid) res += Query(ql,qr,l,mid,lson(num));\n\tif(mid < qr)  res += Query(ql,qr,mid + 1,r,rson(num));\n\treturn res;\n}\nil bool judge(int cknum) {\n\tfor(int i = 1;i <= n;i++) {\n\t\tb[i] = a[i] >= cknum;\n\t} \n\tmemset(tr,0,sizeof(tr));\n\tmemset(tag,-1,sizeof(tag));\n\tbuild(1,n,1);\n\tfor(int i = 1;i <= m;i++) {\n\t\tint opt = query[i].opt;\n\t\tint l = query[i].l;\n\t\tint r = query[i].r;\n\t\tint cnt = Query(l,r,1,n,1);\n\t\tif(!opt) {\n\t\t\tmodify(r - cnt + 1,r,1,n,1,1);\n\t\t\tmodify(l,r - cnt,1,n,1,0);\n\t\t} else {\n\t\t\tmodify(l,l + cnt - 1,1,n,1,1);\n\t\t\tmodify(l + cnt,r,1,n,1,0);\n\t\t}\n\t}\n\treturn Query(Q,Q,1,n,1);\n}\nint main() {\n\tn = read();m = read();\n\tfor(int i = 1;i <= n;i++) a[i] = read();\n\tfor(int i = 1;i <= m;i++) {\n\t\tquery[i].opt = read();\n\t\tquery[i].l = read();\n\t\tquery[i].r = read();\n\t}\t\t\n\tQ = read();\n\tint l = 1,r = n;\n\twhile(l <= r) {\n\t\tint mid = l + r >> 1;\n\t\tif(judge(mid)) l = mid + 1,ans = mid;\n\t\telse r = mid - 1;\n\t}\t\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1545752781,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "\u89e3\u9898\u601d\u8def\u5176\u4ed6\u9898\u89e3\u5f88\u6e05\u695a\u4e86\uff0c\u3002\n\n\u4f46\u662f\u7531\u4e8e\u662f\u533a\u95f4\u63a8\u5e73\u548c\u5bfb\u627e\u4e2a\u6570\u53ef\u4ee5Chtholly\u6811\u7ef4\u62a4\n\n\u6240\u4ee5\uff0c\u5c31\u662f\u4e2a\u677f\u5b50\u3002\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6570\u636e\u975e\u968f\u673a\uff0c\u663e\u7136ODT\u662f\u4f1a\u88ab\u5361T\u7684\n![](https://i.loli.net/2018/10/30/5bd8578fde2f9.png)\n\n\u7136\u540e\u5f00\u4e86\u4e2aO2 \uff0c \n![](https://i.loli.net/2018/10/30/5bd857902fc25.png)\n\nac\n\n```cpp\n/*Heroes Never Die!*/\n#include \"iostream\"\n#include \"cstring\"\n#include \"cstdio\"\n#include \"set\"\n#include \"algorithm\"\nusing namespace std;\n#define MAXN 100006\nint A[MAXN] , k , n , m;\n\nstruct query { int l , r , k ; } q[MAXN];\n\nstruct node{\n    int l , r , v;\n    node( int l , int r = -1 , int v = 0 ) :l(l) , r(r) ,v(v) {}\n    node( ) {}\n    bool operator < ( const node& t ) const {\n        return l < t.l;\n    }\n};\n\nset<node> S;\n\nset<node>::iterator spli( int pos ) {\n    auto it = S.lower_bound( node( pos ) );\n    if( it != S.end( ) && it->l == pos ) return it; --it;\n    int l = it->l , r = it->r , v = it->v;\n    S.erase( it ) , S.insert( node( l , pos - 1 , v ) );\n    return S.insert( node( pos , r , v ) ).first;\n}\nint countone( int l ,int r ) {\n    auto itr = spli( r + 1 ) , itl = spli( l ); int res = 0;\n    for( ; itl != itr ; ++ itl )\n        if( itl->v == 1 ) res += itl->r - itl->l + 1;\n    return res;\n}\n\nvoid change( int l , int  r , int v ) {\n    auto itr = spli( r + 1 ) , itl = spli( l );\n    S.erase( itl , itr ) , S.insert( node( l , r , v ) );\n}\n\nbool check( int x ) {\n    S.clear();\n    for( int i = 1 ; i <= n ; ++ i )\n        S.insert( node( i , i , A[i] >= x ) );\n    S.insert( node( n + 1 , n + 1 , -1 ) );\n    for( int i = 1 ; i <= m ; ++ i ) {\n        int l = q[i].l , r = q[i].r , k = q[i].k , numone = countone( l , r );\n        if( !k ) change( r - numone + 1 , r , 1 ) , change( l , r - numone , 0 );\n        else change( l , l + numone - 1 , 1 ) , change( l + numone , r , 0 );\n    }\n    return spli( k )->v == 1 ;\n}\n\nint main() {\n    cin >> n >> m;\n    for( int i = 1 ; i <= n ; ++ i ) scanf( \"%d\" , & A[i] );\n    for( int i = 1 ; i <= m ; ++ i ) scanf( \"%d%d%d\" , &q[i].k , &q[i].l , &q[i].r);\n    cin >> k;\n    int l = 1 , r = n , m , ans;\n    while( l <= r ) {\n        m = l + r >> 1;\n        if( check(m) ) ans = m , l = m + 1 ;//\u6700\u540e\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u662f1 \uff0c \u90a3\u4e48\u9009\u7684\u6570\u5b57\u5927\u4e86\n        else r = m - 1;\n    }\n    cout << ans;\n}\n```",
        "postTime": 1540905416,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "&emsp;\u5176\u5b9e\u8fd9\u9898\u662f\u6709nlogn\u505a\u6cd5\u7684\uff0c\u800c\u4e14\u652f\u6301\u5728\u7ebf\u64cd\u4f5c\u548c\u8be2\u95ee\uff01\n\n&emsp;\u8fd9\u9898\u8981\u8ba9\u6211\u4eec\u533a\u95f4\u6392\u5e8f\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6211\u4eec\u5c06\u533a\u95f4\u653e\u8fdb\u4e00\u4e2a\u503c\u57df\u7ebf\u6bb5\u6811\u4e2d\uff0c\u90a3\u5b83\u5c31\u5df2\u7ecf\u6392\u597d\u5e8f\u4e86(\u8981\u5012\u5e8f\u6392\u5e8f\u7684\u8bdd\uff0c\u6253\u4e2atag\u5c31\u597d\u5566)\u3002\u90a3\u6211\u4eec\u8981\u600e\u4e48\u8981\u6392\u5e8f\u7684\u533a\u95f4\u653e\u5230\u4e00\u4e2a\u503c\u57df\u7ebf\u6bb5\u6811\u4e2d\u5462\uff1f\n\n&emsp;\u8fd9\u65f6\u5019,\u6211\u4eec\u5c31\u8981\u7528\u5230\u7ebf\u6bb5\u6811\u7684\u5408\u5e76\u4e0e\u5206\u88c2\u5566\u3002\n\n&emsp;\u6211\u4eec\u4e00\u5f00\u59cb\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u5f00\u4e00\u9897\u503c\u57df\u7ebf\u6bb5\u6811(\u8fd9\u80af\u5b9a\u662f\u8981\u52a8\u6001\u5f00\u70b9\u7684)\uff0c\u7136\u540e\u6bcf\u6b21\u53ea\u8981\u628a\u6211\u4eec\u8981\u6392\u5e8f\u7684\u533a\u95f4\u4e2d\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u8d77\u6765\u5c31\u76f8\u5f53\u4e8e\u5b8c\u6210\u4e86\u4e00\u6b21\u6392\u5e8f\u3002\n\n&emsp;\u5f53\u7136\uff0c\u8981\u6392\u5e8f\u7684\u533a\u95f4\u7684\u5f00\u5934\u4e00\u6bb5\u548c\u672b\u5c3e\u4e00\u6bb5\u4e00\u5f00\u59cb\u53ef\u80fd\u4e0d\u662f\u5355\u72ec\u7684\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5c06\u7ebf\u6bb5\u6811\u8fdb\u884c\u5206\u88c2\u3002\n\n&emsp;\u6700\u540e\uff0c\u6211\u4eec\u5408\u5e76\u5b8c\u7ebf\u6bb5\u6811\u5f53\u7136\u8981\u77e5\u9053\u4f60\u8fd9\u68f5\u7ebf\u6bb5\u6811\u662f\u7ef4\u62a4\u90a3\u4e00\u6bb5\u533a\u95f4\u7684\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u94fe\u8868\u7ef4\u62a4(\u7136\u800c\u672c\u849f\u84bb\u6bcf\u6b21\u6253\u94fe\u8868\u90fd\u6253\u6302\uff0c\u6211\u5c31\u53c8\u5f00\u4e86\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u53cd\u6b63\u4e0d\u5728\u590d\u6742\u5ea6\u74f6\u9888\uff0c\u563f\u563f)\u3002\n\n>\u7136\u540e\u732e\u4e0a\u672c\u849f\u84bb\u7684\u4ee3\u7801:\n\n```\n#include<algorithm>\n#include<cstdio>\n#define mxn 100010\nusing namespace std;\nint n,m,sl,fh,rt_num,a[mxn];\nint b[mxn],rt[mxn];// b\u662f\u8868\u793a\u5347\u5e8f(0)/\u964d\u5e8f(1)\nstruct val_seg\n{\n    int l,r,sz;\n}tre[mxn*400];\nstruct seg\n{\n    int mn,id,lt;\n}tr[mxn<<2];\nint rd()\n{\n    sl=0;fh=1;\n    char ch=getchar();\n    while(ch<'0'||'9'<ch) {if(ch=='-') fh=-1; ch=getchar();}\n    while('0'<=ch&&ch<='9') sl=sl*10+ch-'0',ch=getchar();\n    return sl*fh;\n}\nvoid split(int no,int &x,int &y,int k) //\u5206\u88c2\n{\n    if(!no) return ;\n    if(tre[no].sz<=k) {x=no,y=0; return ;}\n    else if(k<=0) {x=0,y=no; return ;}\n    x=++rt_num;y=++rt_num;\n    tre[x].sz=k,tre[y].sz=tre[no].sz-k;\n    split(tre[no].l,tre[x].l,tre[y].l,k);\n    split(tre[no].r,tre[x].r,tre[y].r,k-tre[tre[no].l].sz);\n}\nvoid merge(int &no,int l,int r,int x,int y) //\u5408\u5e76\n{\n    if(!x||!y) {no=x+y; return ;}\n    no=++rt_num;tre[no].sz=tre[x].sz+tre[y].sz;\n    if(l==r) return ;\n    int mid=(l+r)>>1;\n    merge(tre[no].l,l,mid,tre[x].l,tre[y].l);\n    merge(tre[no].r,mid+1,r,tre[x].r,tre[y].r);\n}\nvoid ins(int &no,int l,int r,int x) //\u4e00\u5f00\u59cb\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u5efa\u7684\u7ebf\u6bb5\u6811\n{\n    if(!no) no=++rt_num;\n    tre[no].sz++;\n    if(l==r) return ;\n    int mid=(l+r)>>1;\n    if(x<=mid) ins(tre[no].l,l,mid,x);\n    else ins(tre[no].r,mid+1,r,x);\n}\nint find(int no,int l,int r,int k) //\u67e5\u627e\u7b2ck\u4e2a\n{\n    if(l==r) return l;\n    int mid=(l+r)>>1,t=tre[tre[no].l].sz;\n    if(k<=t) return find(tre[no].l,l,mid,k);\n    else return find(tre[no].r,mid+1,r,k-t);\n}\n// \u4e0b\u9762\u8fd9\u4e2a\u662f\u7528\u6765\u5145\u5f53\u94fe\u8868\u7684\uff0cdalao\u53ef\u4ee5\u81ea\u884c\u8df3\u8fc7\nvoid build(int no,int l,int r)\n{\n    if(l==r) {tr[no].id=tr[no].mn=l; return ;}\n    int mid=(l+r)>>1;\n    build(no<<1,l,mid);\n    build(no<<1|1,mid+1,r);\n    tr[no].mn=min(tr[no<<1].mn,tr[no<<1|1].mn);\n}\nvoid pushdown(int no)\n{\n    if(tr[no].lt)\n    {\n        tr[no<<1].mn=tr[no<<1].id=tr[no<<1].lt=tr[no].lt;\n        tr[no<<1|1].mn=tr[no<<1|1].id=tr[no<<1|1].lt=tr[no].lt;\n        tr[no].lt=0;\n    }\n}\nvoid update(int no,int l,int r,int L,int R,int x)\n{\n    if(r<L||R<l) return ;\n    if(L<=l&&r<=R) {tr[no].mn=tr[no].id=tr[no].lt=x; return ;}\n    int mid=(l+r)>>1;\n    pushdown(no);\n    if(L<=mid) update(no<<1,l,mid,L,R,x);\n    if(R>mid) update(no<<1|1,mid+1,r,L,R,x);\n    tr[no].mn=min(tr[no<<1].mn,tr[no<<1|1].mn);\n}\nint query(int no,int l,int r,int x)\n{\n    if(l==r) return tr[no].id;\n    int mid=(l+r)>>1;\n    pushdown(no);\n    if(x<=mid) return query(no<<1,l,mid,x);\n    else return query(no<<1|1,mid+1,r,x);\n}\nint ask(int no,int l,int r,int x)\n{\n    if(l==r)\n    {\n        if(tr[no].id<=x) return l;\n        else return 0;\n    }\n    int mid=(l+r)>>1;\n    pushdown(no);\n    if(tr[no<<1|1].mn>x) return ask(no<<1,l,mid,x);\n    else return ask(no<<1|1,mid+1,r,x);\n}\nint getrt(int no,int l,int r,int x)\n{\n    if(!x) return 0;\n    if(l==r) return tr[no].id;\n    int mid=(l+r)>>1;\n    pushdown(no);\n    if(tr[no<<1|1].mn>x) return getrt(no<<1,l,mid,x);\n    else return getrt(no<<1|1,mid+1,r,x);\n}\nvoid solve(int l,int r,int flg)\n{\n    int L,R,z,k,x,y;\n    x=query(1,1,n,l);k=ask(1,1,n,x-1);z=l-1; //k\u8868\u793a\u524d\u9762\u90a3\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u7684\u672b\u5c3e\u4f4d\u7f6e\n    if(!b[x]) split(rt[x],L,R,l-k-1); //\u5347\u5e8f\u7684\u8bdd\uff0c\u76f4\u63a5\u5c06\u524d\u9762\u7684\u5206\u88c2\u51fa\u53bb\n    else split(rt[x],R,L,tre[rt[x]].sz-l+k+1); //\u964d\u5e8f\u7684\u8bdd\uff0c\u5728\u524d\u9762\u6211\u4eec\u8981\u7684\u533a\u95f4\u662f\u524d\u9762\u7684\u90a3\u4e9b\u6570\n    //L\u662f\u4e0d\u9700\u8981\u7684\u90a3\u4e9b\u6570\uff0cR\u662f\u6211\u4eec\u9700\u8981\u7684\n    if(L&&R) //\u82e5\u5176\u4e2d\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u8bf4\u660e\u5b83\u5df2\u7ecf\u72ec\u81ea\u6210\u4e00\u4e2a\u533a\u95f4\u4e86\n    {\n        rt[z]=L,rt[z+1]=R,b[z]=b[z+1]=b[x];\n        update(1,1,n,k+1,z,z);k=ask(1,1,n,x);update(1,1,n,z+1,k,z+1);\n    }\n    //\u4e0b\u9762\u662f\u5bf9\u533a\u95f4\u6700\u540e\u4e00\u6bb5\u7684\u64cd\u4f5c\uff0c\u548c\u4e0a\u9762\u540c\u7406\uff0cL\u3001R\u7684\u610f\u4e49\u4e0e\u4e0a\u9762\u76f8\u53cd\n    y=query(1,1,n,r);k=ask(1,1,n,y-1);z=r+1;\n    if(!b[y]) split(rt[y],L,R,r-k);\n    else split(rt[y],R,L,tre[rt[y]].sz-r+k);\n    if(L&&R)\n    {\n        rt[z]=R,rt[z-1]=L,b[z]=b[z-1]=b[y];\n        update(1,1,n,k+1,z-1,z-1);k=ask(1,1,n,y);update(1,1,n,z,k,z);\n    }\n    l=query(1,1,n,l);r=query(1,1,n,r);x=l;\n    for(int i=r;i!=l;i=getrt(1,1,n,i-1)) merge(rt[l],1,n,rt[l],rt[i]); //\u5408\u5e76\u7ebf\u6bb5\u6811\n    l=ask(1,1,n,l-1)+1;r=ask(1,1,n,r);\n    update(1,1,n,l,r,x);b[x]=flg;\n}\nint main()\n{\n    n=rd();m=rd();int l,r,typ;\n    for(int i=1;i<=n;++i) ins(rt[i],1,n,rd());\n    build(1,1,n);\n    for(int i=1;i<=m;++i) typ=rd(),l=rd(),r=rd(),solve(l,r,typ);\n    int x=rd();l=query(1,1,n,x);\n    x-=ask(1,1,n,l-1);\n    if(!b[l]) printf(\"%d\\n\",find(rt[l],1,n,x));\n    else printf(\"%d\\n\",find(rt[l],1,n,tre[rt[l]].sz-x+1));\n    return 0;\n}\n```\n",
        "postTime": 1543501918,
        "uid": 27677,
        "name": "day_dream",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "## \u9898\u89e3-P2824[HEOI2016/TJOI2016]\u6392\u5e8f\n\n* **\u9898\u76ee\u610f\u601d**\n\n\u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a\u6392\u5217$A$\uff0c\u63a5\u4e0b\u6765\u6709$m$\u6b21\u64cd\u4f5c\u6bcf\u6b21\u5c06$[l,r]$\u533a\u95f4\u91cc\u7684\u6570\u964d\u5e8f\u6216\u8005\u5347\u5e8f\u6392\u5217\uff0c\u6700\u540e\u8be2\u95ee$Ax$\u3002\n\n* $Solution$\n\n\u8fd9\u9053\u9898\u76ee\u4e3b\u8981\u662f\u601d\u60f3\u7684\u8f6c\u5316\uff0c\u5176\u4ed6\u5e76\u65e0\u96be\u70b9\u3002\u5bf9\u4e8e\u8fd9\u79cd\u601d\u60f3\u7684\u8f6c\u5316\u53ef\u4ee5\u770b[\u6233\u8fd9\u91cc](https://www.luogu.org/problem/P1627)\u3002\n\n\u8003\u8651\u79bb\u7ebf\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u4e8c\u5206\u7684\u7b54\u6848\u5982\u679c\u5927\u4e8e$Ai$\u90a3\u4e48\u5c06$Ai$\u53d8\u4e3a$0$\u5426\u5219\u53d8\u4e3a$1$\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4fee\u6539\u4e3a\u9012\u589e\u5e8f\u5217\u6211\u4eec\u53ef\u4ee5\u5148\u7edf\u8ba1\u51fa$[l,r]$\u533a\u95f4\u4e2d$1$\u7684\u4e2a\u6570$gs1$\uff0c\u7136\u540e\u5c06$[l,r-gs]$\u533a\u95f4\u91cc\u7684\u6570\u53d8\u4e3a$0$\n\u5e76\u4e14\u5c06$[r-gs+1,r]$\u91cc\u7684\u6570\u53d8\u4e3a$1$,\u5982\u679c\u662f\u9012\u51cf\u5e8f\u5217\u4e5f\u662f\u76f8\u8fd1\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002\u8fd9\u4e9b\u90fd\u662f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\u7684\u3002\n\n\u5bf9\u4e8e\u6700\u540e\u6211\u4eec\u53ea\u8981\u5224\u65ad$Ax$\u662f\u4e0d\u662f\u4e3a$1$\u5373\u53ef\u3002\n\n* $Code$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn=1e5+5;\nconst int maxm=4e5+5;\n\nint n,m,op[maxn],val[maxn],ans;\nint tr[maxm],tag[maxm],Q;\n\nstruct number {\n\tint opt,l,r;\n};\nnumber q[maxn];\n\ninline int read() {\n\tint sum=0; char ch=getchar();\n\twhile(!isdigit(ch)) ch=getchar();\n\twhile(isdigit(ch)) \n\t\tsum=sum*10+(ch^48),ch=getchar();\n\treturn sum;\n}\n\ninline void build(int rt,int l,int r) {\n\ttag[rt]=-1;\n\tif(l==r) {\n\t\ttr[rt]=op[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuild(rt<<1,l,mid);\n\tbuild(rt<<1|1,mid+1,r);\n\ttr[rt]=tr[rt<<1]+tr[rt<<1|1];\n}\n\ninline void push_down(int rt,int l,int r) {\n\tif(tag[rt]==-1) return;\n\tint mid=(l+r)/2;\n\ttr[rt<<1]=(mid-l+1)*tag[rt];\n\ttr[rt<<1|1]=(r-mid)*tag[rt];\n\ttag[rt<<1]=tag[rt];\n\ttag[rt<<1|1]=tag[rt];\n\ttag[rt]=-1;\n}\n\ninline void modify(int rt,int l,int r,int ll,int rr,int val) {\n\tif(l>rr||r<ll) return;\n\tif(ll<=l&&r<=rr) {\n\t\ttr[rt]=val*(r-l+1);\n\t\ttag[rt]=val;\n\t\treturn;\n\t}\n\tpush_down(rt,l,r);\n\tint mid=(l+r)/2;\n\tif(ll<=mid) modify(rt<<1,l,mid,ll,rr,val);\n\tif(rr>mid) modify(rt<<1|1,mid+1,r,ll,rr,val);\n\ttr[rt]=tr[rt<<1]+tr[rt<<1|1];\n}\n\ninline int query(int rt,int l,int r,int ll,int rr) {\n\tif(l>rr||r<ll) return 0;\n\tif(ll<=l&&r<=rr) return tr[rt];\n\tpush_down(rt,l,r);\n\tint mid=(l+r)/2;\n\tint tmp=0;\n\tif(ll<=mid) tmp+=query(rt<<1,l,mid,ll,rr);\n\tif(rr>mid) tmp+=query(rt<<1|1,mid+1,r,ll,rr);\n\treturn tmp;\n}\n\ninline bool check(int mid,int pos) {\n\tfor ( int i=1;i<=n;i++ ) {\n\t\tif(mid>val[i]) op[i]=0;\n\t\t\telse op[i]=1;\n\t}\n\tbuild(1,1,n);\n\tfor ( int i=1;i<=m;i++ ) {\n\t\tint opt=q[i].opt;\n\t\tint l=q[i].l;\n\t\tint r=q[i].r;\n\t\tif(!opt) {\n\t\t\tint gs=query(1,1,n,l,r);\n\t\t\tmodify(1,1,n,l,r-gs,0);\n\t\t\tmodify(1,1,n,r-gs+1,r,1);\n\t\t}\n\t\tif(opt) {\n\t\t\tint gs=query(1,1,n,l,r);\n\t\t\tmodify(1,1,n,l,l+gs-1,1);\n\t\t\tmodify(1,1,n,l+gs,r,0); \n\t\t}\n\t}\n\tif(query(1,1,n,pos,pos)) return true;\n\treturn false;\n}\n\nint main() {\n\tn=read();\n\tm=read();\n\tfor ( int i=1;i<=n;i++ ) val[i]=read();\n\tfor ( int i=1;i<=m;i++ ) {\n\t\tq[i].opt=read();\n\t\tq[i].l=read();\n\t\tq[i].r=read();\n\t}\n\tQ=read();\n\tint l=1,r=n;\n\twhile(l<=r) {\n\t\tint mid=(l+r)/2;\n\t\tif(check(mid,Q)) {\n\t\t\tans=mid;\n\t\t\tl=mid+1;\n\t\t}\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1572265998,
        "uid": 172612,
        "name": "\u7c73\u5947\u5947\u7c73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "## ODT&\u4e8c\u5206\n\n\u770b\u5230\u6ca1\u6709\u4eba\u5199\u5173\u4e8eODT\u7684\u9898\u89e3\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u6765\u4e00\u53d1ODT\u9898\u89e3\u3002\n\n\u9996\u5148\u8fd9\u9053\u9898\u7684\u7684\u6574\u4f53\u601d\u8def\u5c31\u662f\u4e8c\u5206\uff0c\u5173\u4e8e\u4e8c\u5206\u7684\u6b63\u786e\u6027\u53ef\u4ee5\u611f\u6027\u7684\u7406\u89e3\u4e00\u4e0b\uff1a\u6211\u4eec\u6bcf\u4e00\u6b21\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848\uff0c\u7136\u540e\u5c06$<mid$\u7684\u503c\u53d8\u4e3a1\uff0c$\\geq mid$\u7684\u53d8\u4e3a0\uff0c\u6bcf\u4e00\u6b21\u53ea\u7528\u5bf90/1\u5e8f\u5217\u8fdb\u884c\u64cd\u4f5c\uff0c\u5018\u82e5\u6700\u540e\u6211\u4eec\u8be2\u95ee\u7684\u4f4d\u7f6e\u4e0a\u4e3a0\uff0c\u8bf4\u660e\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c$< mid$,\u5426\u5219\u5c31$\\geq mid$\uff0c\u6240\u4ee5\u5b83\u5c31\u5177\u6709\u53ef\u4e8c\u5206\u6027\u3002\n\n\u8ba9\u6211\u4eec\u770b\u770b\u5bf90/1\u5e8f\u5217\u7684\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6392\u5e8f\u5c31\u76f8\u5f53\u4e8e\u6574\u4f53\u76840/1\u5e8f\u5217\u6392\u5e8f\uff0c\u4e5f\u5c31\u662f\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u73c2\u4ee5\u7528\u5e78\u798f\u7684ODT\u6765\u505a\u8fd9\u9053\u9898\u5566.\u6211\u4eec\u6bcf\u4e00\u6b21\u53ea\u7528\u8be2\u95ee\u4e00\u4e0b\u8fd9\u4e2a\u533a\u95f4\u91cc\u4e00\u5171\u6709\u591a\u5c11\u4e2a1\uff0c\u7136\u540e\u5c06$l$\u5230$l+len-1$\u63a8\u5e73\u5c31\u597d\u8fa3\u3002\u5f53\u7136\u8fd9\u9700\u8981\u5f00O2(\u5426\u5219\u5c31\u6b7b\u6389\u4e86)\uff0c\u5b9e\u6d4b\u5f00\u4e86O2\u540e\u8dd1\u7684\u5feb\u7684\u98de\u8d77\u3002\n\n\u6700\u540e\u732e\u4e0a\u6211~~\u4e11\u964b~~\u7684\u4ee3\u7801\n\n```cpp\n// luogu-judger-enable-o2\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<set>\n#define IT set<node>::iterator\nusing namespace std;\nint n,m,opt,k,ll,rr,ans;\nint a[100010];\nint l[100010],r[100010];\nint pan[100010];\n\nint read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\n\n\n\nstruct node\n{\n\tint l,r;\n\tmutable int val;\n\tnode(int L,int R=-1,int V=0):l(L),r(R),val(V){}\n\tfriend bool operator <(const node &a,const node &b)\n\t{\n\t\treturn a.l<b.l;\n\t}\n};\n\nset<node>s;\n\n\n\nIT split(int pos)\n{\n\tIT it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos)return it;\n\t--it;\n\tint L=it->l,R=it->r;\n\tint V=it->val;\n\ts.erase(it);\n\ts.insert(node{L,pos-1,V});\n\treturn s.insert(node{pos,R,V}).first;\n}\n\nint sum(int l,int r)\n{\n\tIT it2=split(r+1),it1=split(l);\n\tint res=0;\n\tfor(;it1!=it2;++it1)\n\tif(it1->val)res+=(it1->r-it1->l+1);\n\treturn res;\n}\n\n\nvoid tuiping(int l,int r,int v)\n{\n\tIT it2=split(r+1),it1=split(l);\n\ts.erase(it1,it2);\n\ts.insert(node{l,r,v});\n}\n\nint check(int x)\n{\n\ts.clear();\n\tint val=(a[1]>=x),len=1;\n\tfor(int i=2;i<=n;++i)\n\t{\n\t\tif((a[i]>=x)!=val)\n\t\t{\n\t\t\ts.insert(node{i-len,i-1,val});\n\t\t\tval=(a[i]>=x);len=1;\n\t\t}\n\t\telse len++;\n\t}\n\ts.insert(node{n-len+1,n,val});\n\ts.insert(node{n+1,n+1,1});\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tif(pan[i]==0)//\u5347\u5e8f \n\t\t{\n\t\t\tint lin=r[i]-l[i]+1-sum(l[i],r[i]);//cout<<\"lin=\"<<lin<<endl;\n\t\t\ttuiping(l[i],l[i]+lin-1,0);\n\t\t\ttuiping(l[i]+lin,r[i],1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint lin=sum(l[i],r[i]);\n\t\t\ttuiping(l[i],l[i]+lin-1,1);\n\t\t\ttuiping(l[i]+lin,r[i],0);\n\t\t}\n\t}\n    return sum(k,k);\n}\n\nvoid slove2()\n{\n\tfor(int i=1;i<=m;++i)pan[i]=(bool)read(),l[i]=read(),r[i]=read();\n\tcin>>k;\n\tint ans=0;\n\tll=1;rr=n;//cout<<check(5)<<endl;;\n\twhile(ll<=rr)\n\t{\n\t\tint mid=(ll+rr)>>1;\n\t\tif(check(mid))\n\t\t{\n\t\t\tll=mid+1;\n\t\t\tans=mid;\n\t\t}\n\t\telse rr=mid-1;\n\t}\n\tcout<<ans;\n}\n\n\n\nint main()\n{\n\t//freopen(\"seq.in\",\"r\",stdin);\n\t//freopen(\"seq.out\",\"w\",stdout);\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;++i)a[i]=read();\n\tslove2();\n\tfclose(stdin);fclose(stdout);\n\treturn 0;\n}\n```\n",
        "postTime": 1568985584,
        "uid": 153843,
        "name": "wljss",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u4e00\u5806\u7ebf\u6bb5\u6811\uff0c\u5199\u4e0d\u719f\u7ec3\u7ebf\u6bb5\u6811\u3001\u8001\u5e74\u9ad8\u4e09NOIP\u9009\u624b\u7684\u6211\u9ed8\u9ed8\u7684\u5f00\u59cb\u6572\u5206\u5757...  \n\u4e3b\u4f53\u601d\u60f3\u5c31\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u5927\u6982\u5c31\u662f\u4e0d\u65ad\u68c0\u67e5\u4e8c\u5206\u51fa\u7684\u7b54\u6848\u662f\u5927\u4e86\u8fd8\u662f\u5c0f\u4e86\uff0c\u8fd9\u4e2a\u73c2\u4ee5\u901a\u8fc7\u5c06\u539f\u6570\u7ec4\u4e2d\u5927\u4e8e\u4e8c\u5206\u51fa\u6765\u7684\u7b54\u6848\u7684\u6570\u53d8\u62101\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u4e8c\u5206\u51fa\u6765\u7684\u7b54\u6848\u7684\u6570\u53d8\u62100\uff0c\u6765\u628a\u539f\u6570\u7ec4\u53d8\u6210\u4e00\u4e2a01\u5e8f\u5217\uff0c\u4e4b\u540e\u518d\u5bf901\u5e8f\u5217\u8fdb\u884c\u9898\u76ee\u4e2d\u7684\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u53ea\u9700\u77e5\u9053\u8fd9\u6bb5\u533a\u95f4\u4e2d\u6709\u591a\u5c11\u4e2a1\uff0c\u7136\u540e\u628a\u524d\u9762\uff08\u964d\u5e8f\uff0c\u5347\u5e8f\u7684\u8bdd\u662f\u540e\u9762\uff09\u533a\u95f4\u4fee\u6539\u62101\uff0c\u5176\u4ed6\u7684\u4fee\u6539\u62100\uff0c\u5c31\u73c2\u4ee5\u5feb\u901f\u5730\u5b9e\u73b0\u6392\u5e8f\uff0c\u6700\u540e\u5224\u65ad\u8981\u6c42\u7684\u4f4d\u7f6e\u4e0a\u662f0/1\u5c31\u597d\u4e86\uff0c\u82e5\u4e3a0\uff0c\u5219\u8bf4\u660e\u8981\u627e\u7684\u6570\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u7684\u7b54\u6848\uff0c\u82e5\u4e3a1\uff0c\u5219\u8bf4\u660e\u8981\u627e\u7684\u6570\u5927\u4e8e\u5f53\u524d\u7b54\u6848\u3002  \n\u5982\u679c\u770b\u4e0d\u61c2\u4ee5\u4e0a\u7684\u601d\u8def\u7684\u8bdd\uff0c\u4e5f\u73c2\u4ee5\u53c2\u8003\u5176\u4ed6\u4f18\u79c0\u7684\u9898\u89e3\u6765\u5bf9\u7167\u7740\u770b~  \n\u5176\u4e2d\u533a\u95f4\u4fee\u6539\u7684\u8fc7\u7a0b\u65e0\u6cd5\u7528\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\uff0c\u8fd9\u8ba9\u4e00\u76f4\u7528\u6811\u72b6\u6570\u7ec4\u5077\u61d2\u7684\u6211\u6781\u5176\u5c34\u5c2c...  \n\u597d\u5728\u8ddfddd\u5927\u4f6c\u5728\u6d1b\u8c37\u7f51\u6821\u5b66\u4f1a\u4e86\u5206\u5757\uff0c\u4e8e\u662f\u4e4e\u5728\u8c03\u4e86\u4e00\u665a\u4e0abug\u4ee5\u540e...\u7ec8\u4e8eAC\u4e86\u8fd9\u9053\u9898\u3002  \n\u5206\u5757\u7684\u601d\u8def\u5927\u6982\u5c31\u662f\u5f00\u4e00\u4e2a\u6570\u7ec4sum[i]\u8bb0\u5f55\u5206\u5230\u7684\u7b2ci\u5757\u7684\u548c\u662f\u591a\u5c11\uff0c\u7136\u540e\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4tag[i]\u8bb0\u5f55\u7b2ci\u5757\u662f\u5426\u88ab\u8986\u76d6\u4e86\uff0c\u5982\u679c\u88ab\u8986\u76d6\u6210\u4e861\uff0c\u90a3\u4e48tag[i]=1,\u5982\u679c\u88ab\u8986\u76d6\u6210\u4e860\uff0c\u90a3\u4e48tag[i]=0.  \n\u4ee3\u7801\u5982\u4e0b:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+7,maxb=400;//\u867d\u7136\u6d1b\u8c37\u4e0a\u7684\u8bf4\u660e\u662f30000\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6570\u636e\u4e0a\u754c\u786e\u5b9e\u662f1e5\nint n,m,num[maxn],v[maxn],sum[maxb],q,lst=0,block,tag[maxb];\nstruct oper\n{\n\tint o,l,r;\n}a[maxn];//\u8bb0\u5f55\u64cd\u4f5c\ninline int getb(int x)\n{\n\t//\u83b7\u5f97\u6240\u5728\u7684\u5757\n\treturn (x-1)/block+1;\n}\ninline int getsta(int x)\n{\n\t//\u83b7\u5f97\u6240\u5728\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\n\treturn (getb(x)-1)*block+1;\n}\ninline int getend(int x)\n{\n\t//\u83b7\u5f97\u6240\u5728\u5757\u7684\u7ed3\u675f\u4f4d\u7f6e\n\tint tmp=getb(x);\n\tif(lst==tmp)return n;\n\treturn tmp*block;\n}\ninline void add(int o)\n{\n\t//o\u4f4d\u7f6e\u4e0a\u7684+1\uff0c\u4e3b\u8981\u7528\u4e8e\u5757\u7684\u7ef4\u62a4\n\tv[o]=1;sum[getb(o)]++;\n\treturn;\n}\ninline void pushdown(int x)\n{\n\t//\u7528\u4e8e\u4e0b\u653etag\n\tif(tag[x]==2)\n\t{\n\t\ttag[x]=0;\n\t\tfor(register int i=(x-1)*block+1;i<=x*block;i++)v[i]=0;\n\t}\n\telse if(tag[x]==1) \n\t{\n\t\ttag[x]=0;\n\t\tfor(register int i=(x-1)*block+1;i<=x*block;i++)v[i]=1;\n\t}\n}\ninline void modify(int l,int r,int o)\n{\n\t//\u5c06l..r\u533a\u95f4\u5185\u7684\u6570\u90fd\u4fee\u6539\u6210o\n\tif(l>r)return;\n\tint bl=getb(l),br=getb(r);\n\tif(bl==br)\n\t{\n\t\tif(tag[bl])pushdown(bl);\n\t\tif(o==1){for(register int i=l;i<=r;i++)if(v[i]==0)sum[bl]++,v[i]=1;}\n\t\telse for(register int i=l;i<=r;i++)if(v[i]==1)sum[bl]--,v[i]=0;\n\t\treturn;\n\t}\n\tif(o==1)\n\t{\n\t\tif(l!=getsta(l))//l\u548cr\u6240\u5728\u7684\u5757\u4e0d\u5b8c\u6574\u5c31\u66b4\u529b\u66f4\u65b0\uff0c\u5426\u5219\u5c31\u76f4\u63a5\u6253tag\uff0c\u4e0b\u9762\u7684\u67e5\u8be2\u540c\u7406\n\t\t{\n\t\t\tif(tag[bl]==2)pushdown(bl);\n\t\t\tif(tag[bl]!=1)\n\t\t\t\tfor(register int i=getend(l);i>=l;i--)\n\t\t\t\t\tif(v[i]==0)sum[bl]++,v[i]=1;\n\t\t}\n\t\telse tag[bl]=1,sum[bl]=block;\n\t\tfor(register int i=br-1;i>bl;i--)\n\t\t\ttag[i]=1,sum[i]=block;\n\t\tif(r!=getend(r)||(lst&&r==n))\n\t\t{\n\t\t\tif(tag[br]==2)pushdown(br);\n\t\t\tif(tag[br]!=1)\n\t\t\t\tfor(register int i=getsta(r);i<=r;i++)\n\t\t\t\t{\n\t\t\t\t\tif(v[i]==0)sum[br]++,v[i]=1;\n\t\t\t\t}\n\t\t}\n\t\telse tag[br]=1,sum[br]=block;\n\t}\n\telse \n\t{\n\t\tif(l!=getsta(l))\n\t\t{\n\t\t\tif(tag[bl]==1)pushdown(bl);\n\t\t\tif(tag[bl]!=2)\n\t\t\t\tfor(register int i=getend(l);i>=l;i--)\n\t\t\t\t\tif(v[i]==1)sum[bl]--,v[i]=0;\n\t\t}\n\t\telse tag[bl]=2,sum[bl]=0;\n\t\tfor(register int i=br-1;i>bl;i--)\n\t\t\ttag[i]=2,sum[i]=0;\n\t\tif(r!=getend(r))\n\t\t{\n\t\t\tif(tag[br]==1)pushdown(br);\n\t\t\tif(tag[br]!=2)\n\t\t\t\tfor(register int i=getsta(r);i<=r;i++)\n\t\t\t\t\tif(v[i]==1)sum[br]--,v[i]=0;\n\t\t}\n\t\telse tag[br]=2,sum[br]=0;\n\t}\n}\ninline int query(int l,int r)\n{\n\tint ans=0;\n\tint bl=getb(l),br=getb(r);\n\tif(bl==br)\n\t{\n\t\tif(tag[bl])\n\t\t{\n\t\t\tif(tag[bl]==1)return  r-l+1;\n\t\t\telse return 0;\n\t\t}\n\t\tif(br-bl+1==block)return sum[bl];\n\t\tfor(register int i=l;i<=r;i++)ans+=v[i];\n\t\treturn ans;\n\t}\n\tif(l!=getsta(l))\n\t{\n\t\tif(tag[bl]){if(tag[bl]==1)ans+=getend(l)-l+1;}\n\t\telse for(register int i=getend(l);i>=l;i--)ans+=v[i];\n\t\tbl++; \n\t}\n\tif(r!=getend(r))\n\t{\n\t\tif(tag[br]){if(tag[br]==1)ans+=r-getsta(r)+1;}\n\t\telse for(register int i=getsta(r);i<=r;i++)ans+=v[i];\n\t\tbr--;\n\t}\n\tfor(register int i=bl;i<=br;i++)ans+=sum[i];\n\treturn ans;\n}\ninline int check(int x)\n{\n\tint tot;\n\tmemset(sum,0,sizeof(sum));\n\tmemset(tag,0,sizeof(tag));\n\tmemset(v,0,sizeof(v));\n\tfor(register int i=1;i<=n;i++)\n\t\tif(num[i]>x)add(i);\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint l=a[i].l,r=a[i].r,o=a[i].o;\n\t\ttot=query(l,r);\n\t\tif(a[i].o)\n\t\t{\n\t\t\tmodify(l,l+tot-1,1);\n\t\t\tmodify(l+tot,r,0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmodify(r-tot+1,r,1);\n\t\t\tmodify(l,r-tot,0);\n\t\t}\n\t}\n\tif(tag[getb(q)]==1||(v[q]==1&&tag[getb(q)]==0))return 1;\n\telse return 0;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&num[i]);\n\tfor(register int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&a[i].o,&a[i].l,&a[i].r);\n\tblock=sqrt(n);\n\tif(getend(n)>n)lst=getb(n);\n\tscanf(\"%d\",&q);\n\tint l=1,r=n;\n\twhile(l<r)\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(check(mid))l=mid+1;\n\t\telse r=mid;\n\t}\n\tprintf(\"%d\",r);\n\treturn 0;\n}\n```\n\u53e6\u5916\u9644\u9001\u6570\u636e\u751f\u6210\u5668\u4e00\u679a\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5,maxm=1e5;//\u73c2\u624b\u73a9\u7684\u6837\u4f8b\uff1amaxn=8,maxm=5 \ninline int getint(int x)\n{\n\treturn rand()%x+1;\n}\ninline int getf()\n{\n\tif(rand()&1)return 1;\n\telse return -1;\n}\nint vis[(int)1e5+7],a[(int)1e5+7];\nint main()\n{\n\tsrand(time(NULL));\n\tint n,m,l,r;\n\tn=getint(maxn),m=getint(maxm);\n\twhile(n<4)n=getint(maxn);\n\twhile(m<3)m=getint(maxm);\n\tmemset(vis,0,sizeof(vis));\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\ta[i]=getint(n);\n\t\twhile(vis[a[i]])a[i]=getint(n);\n\t\tvis[a[i]]=1;\n\t}\n\tprintf(\"%d %d\\n\",n,m);\n\tfor(register int i=1;i<=n;i++)printf(\"%d \",a[i]);\n\tputchar('\\n');\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tl=getint(n),r=getint(n);\n\t\twhile(l==r)l=getint(n);\n\t\tif(l>r)swap(l,r);\n\t\tprintf(\"%d %d %d\\n\",rand()%2,l,r);\n\t}\n\tprintf(\"%d\",getint(n));\n\treturn 0;\n} \n```\n\u8fd9\u6837\u5988\u5988\u5c31\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u6211\u4e0b\u8f7d\u4e0d\u4e86\u6570\u636e\u4e86\uff01",
        "postTime": 1540343575,
        "uid": 39740,
        "name": "sdxjzsq",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "#### \u6b65\u9aa4: \n-  \u4e8c\u5206\u7b54\u6848:Q\u4e0a\u8fd9\u4e2a\u6570\u662fx\n- check:   \n  -  \u628a\u6240\u6709\u5c0f\u4e8ex\u7684\u6570\u6539\u62100,\u5927\u4e8e\u7b49\u4e8ex\u7684\u6539\u62101;    \n  -  \u4f7f\u7528\u7ebf\u6bb5\u6811\u4ee5mlogn\u7684\u590d\u6742\u5ea6\u4fee\u6539\u6570\u5217    \n     (\u5148\u6c42\u51fa1\u7684\u4e2a\u6570,\u518d\u6839\u636eop\u628a\u8fd9\u4e9b1\u5168\u90e8\u653e\u5230\u533a\u95f4\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9)\n  - \u6700\u540e\u770bQ\u4e0a\u8fd9\u4e2a\u6570\u662f\u4e0d\u662f1\n\n#### \u4e8c\u5206\u7684\u5355\u8c03\u5728\u54ea\u91cc:   \n\u5047\u5982\u4f60\u5df2\u7ecf\u77e5\u9053\u7ed3\u679c\u4e86,\u5c31\u53ef\u4ee5\u8f7b\u8f7b\u677e\u677e\u8bf4\u51fa\u5bf9\u4e8e\u4e00\u4e2ax,a[Q]\u662f0\u8fd8\u662f1.   \n\u5982\u679cQ\u4e0a\u8fd9\u4e2a\u6570\u662f1,\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u679c\u53ef\u80fd\u662fx,x+1,x+2,,,,,,\u9898\u76ee\u8bf4\u8fd9\u662f\u4e00\u4e2a\u6392\u5217,\u6240\u4ee5\u6709\u552f\u4e00\u89e3,\u90a3\u4e48\u67e5\u8be2\u533a\u95f4\u53f3\u79fb.\n\n//\u7b80\u5355\u5427!\u6709\u9053\u7406\u5427!\n\n#### \u7ec6\u8282:\n \n  - \u6bcf\u4e00\u6b21\u65b0\u5efa\u6811tag\u90fd\u8981\u91cd\u65b0\u8bbe\u4e3a-1\n  - \u9898\u76ee\u8981\u770b\u6e05\u695a,op=0,\u628a1\u5168\u90e8\u653e\u53f3\u8fb9\n\n#### \u4ee3\u7801:\n\n```\n#include<bits/stdc++.h>\n#define N 100005\n#define mid (l+r>>1)\nusing namespace std;\nint n,m,a[N],Mid,Q;\nint o[N],lo[N],ro[N],tag[N<<2],tr[N<<2],Std;\nvoid uptag(int u){tr[u]=tr[u<<1]+tr[u<<1|1];}\nvoid pushtag(int u,int len){\n\tif(tag[u]<0)return;\n\ttag[u<<1]=tag[u];\n\ttag[u<<1|1]=tag[u];\n\ttr[u<<1]=tag[u]*(len-(len/2));\n\ttr[u<<1|1]=tag[u]*(len/2);\n\ttag[u]=-1;\n}\nvoid build(int u,int l,int r){\n\ttag[u]=-1;//**************************\n\tif(l==r){\n\t\ttr[u]=(a[l]>=Std);return;\n\t}\n\tbuild(u<<1,l,mid);\n\tbuild(u<<1|1,mid+1,r);\n\tuptag(u);\n}\nint query(int u,int l,int r,int L,int R){\n\tif(l>=L&&r<=R)return tr[u];\n\tint re=0;\n\tpushtag(u,r-l+1);\n\tif(L<=mid)re+=query(u<<1,l,mid,L,R);\n\tif(R>mid)re+=query(u<<1|1,mid+1,r,L,R);\n\treturn re;\n}\nvoid upd(int u,int l,int r,int L,int R,int v){\n\tif(l>=L&&r<=R){\n\t\ttag[u]=v;tr[u]=(r-l+1)*v;return;\n\t}\n\tpushtag(u,r-l+1);\n\tif(L<=mid)upd(u<<1,l,mid,L,R,v);\n\tif(R>mid)upd(u<<1|1,mid+1,r,L,R,v);\n\tuptag(u);\n}\nbool check(int x){\n\tStd=x;\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tif(!o[i]){\n\t\t\tint q=query(1,1,n,lo[i],ro[i]);\n\t\t\tupd(1,1,n,ro[i]-q+1,ro[i],1);\n\t\t\tupd(1,1,n,lo[i],ro[i]-q,0);\n\t\t}\n\t\telse{\n\t\t\tint q=query(1,1,n,lo[i],ro[i]);\n\t\t\tupd(1,1,n,lo[i],lo[i]+q-1,1);\n\t\t\tupd(1,1,n,lo[i]+q,ro[i],0);\n\t\t}\n\t}\n\treturn query(1,1,n,Q,Q);\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d%d\",&o[i],&lo[i],&ro[i]);\n\tcin>>Q;int l=1,r=n,ans=0;\n\twhile(l<=r){Mid=l+r>>1;if(check(Mid))ans=Mid,l=Mid+1;else r=Mid-1;}\n\tcout<<ans<<'\\n';return 0;\n}\n\n```\n\nthanks",
        "postTime": 1539872255,
        "uid": 69935,
        "name": "GUO\u5927\u4fa0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\uff1a\n\u7ed9\u4e00\u4e2a$n(n<=10^5)$\u7684\u6392\u5217\uff0c\u6709$m(m<=10^5)$\u4e2a\u64cd\u4f5c\uff1a       \n$1\\ l\\ r$\u8868\u793a\u628a$[l, r]$\u533a\u95f4\u5185\u7684\u6570\u964d\u5e8f\u6392\u5e8f\uff1b   \n$0\\ l\\ r$\u8868\u793a\u628a$[l, r]$\u533a\u95f4\u5185\u7684\u6570\u5347\u5e8f\u6392\u5e8f\u3002       \n\u6700\u540e\u8be2\u95ee\u8fd9\u4e2a\u5e8f\u5217\u4f4d\u7f6e$p$\u4e0a\u7684\u6570\u3002\n## \u89e3\u6cd5\n\u5982\u679c\u6211\u4eec\u8981\u5bf9\u4e00\u4e2a\u533a\u95f4\u6392\u5e8f\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f$O(nlogn)$\u7684\uff0c\u5bf9$m$\u4e2a\u533a\u95f4\u6392\u5e8f\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(nmlogn)$\u7684\uff0c\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\u663e\u7136\u662f\u8fc7\u4e0d\u4e86\u7684    \n\n\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u4e00\u4e2a\u503c$mid$\uff0c\u5c06\u539f\u5e8f\u5217\u4e2d\u5927\u4e8e\u7b49\u4e8e$mid$\u7684\u6570\u5f53\u4f5c$1$\uff0c\u5c0f\u4e8e$mid$\u7684\u6570\u5f53\u4f5c0\uff0c\u518d\u8fdb\u884c\u8fdb\u884c$m$\u4e2a\u533a\u95f4\u7684\u6392\u5e8f\uff0c\u5982\u679c\u4f4d\u7f6e$q$\u4e0a\u7684\u6570\u7b49\u4e8e$1$\uff0c\u5219\u8bf4\u660emid\u5927\u4e8e\u7b49\u4e8eu\u539f\u5e8f\u5217\u7684\u6392\u5e8f\u7ed3\u679c\u7684\u4f4d\u7f6e$q$\u4e0a\u7684\u6570\u5b57\uff0c\u5426\u5219\u5c0f\u4e8e\n\n$01$\u5e8f\u5217\u7684\u533a\u95f4\u6392\u5e8f\u663e\u7136\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u5f53\u4e2d\u7684\u533a\u95f4\u66f4\u65b0\u64cd\u4f5c\u7528$logn$\u7684\u65f6\u95f4\u5b8c\u6210\uff0c\u90a3\u4e48\u5b8c\u6210$m$\u4e2a\u533a\u95f4\u7684\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u4e3a$O(mlogn)$\uff0c\u518d\u52a0\u4e0a\u539f\u6765\u7684\u4e8c\u5206\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5219\u4e3a$O(mlog^2n)$\n## $code:$\n```cpp\n#include<cstdio>\n#define N 110000\nusing namespace std;\nint n,m,q;\nint a[N+1];\nstruct ask\n{\n\tint type,l,r;\n}Q[N+1];\nstruct tree\n{\n\tint sum,tag;//sum\u4e3a\u8be5\u8282\u70b9\u7684\u533a\u95f4\u548c\uff0ctag\u4e3a\u61d2\u6807\u8bb0\uff0c-1\u8868\u793a\u4e0d\u53d8\uff0c0\u8868\u793a\u8be5\u533a\u95f4\u53d8\u62100\uff0c1\u8868\u793a\u8be5\u533a\u95f4\u53d8\u62101 \n}t[N<<2|1];\nvoid pushup(int p){t[p].sum=t[p<<1].sum+t[p<<1|1].sum;}\nvoid pushdown(int p,int l,int r)\n{\n\tif(t[p].tag!=-1)\n\t{\n\t\tt[p<<1].tag=t[p<<1|1].tag=t[p].tag;\n\t\tint mid=(l+r)>>1;\n\t\tt[p<<1].sum=(mid-l+1)*t[p].tag,t[p<<1|1].sum=(r-mid)*t[p].tag;\n\t\tt[p].tag=-1;\n\t} \n}\nvoid build(int p,int l,int r,int x)//\u6bcf\u6b21\u4e8c\u5206\u91cd\u65b0\u5efa\u6811 \n{\n\tt[p].tag=-1;\n\tif(l==r)\n\t{\n\t\tt[p].sum=(a[l]>=x);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(p<<1,l,mid,x),build(p<<1|1,mid+1,r,x);\n\tpushup(p);\n}\nint query(int p,int l,int r,int L,int R)//\u533a\u95f4\u67e5\u8be2 \n{\n\tif(L<=l&&r<=R)\n\t\treturn t[p].sum;\n\tpushdown(p,l,r);\n\tint mid=(l+r)>>1,res=0;\n\tif(L<=mid)\n\t\tres+=query(p<<1,l,mid,L,R);\n\tif(R>mid)\n\t\tres+=query(p<<1|1,mid+1,r,L,R);\n\treturn res;\n}\nvoid update(int p,int l,int r,int L,int R,int x)//\u533a\u95f4\u4fee\u6539 \n{\n\tif(L>R)\n\t\treturn;\n\tif(L<=l&&r<=R)\n\t{\n\t\tt[p].tag=x;\n\t\tt[p].sum=(r-l+1)*x;\n\t\treturn;\n\t} \n\tpushdown(p,l,r);\n\tint mid=(l+r)>>1;\n\tif(L<=mid)\n\t\tupdate(p<<1,l,mid,L,R,x);\n\tif(R>mid)\n\t\tupdate(p<<1|1,mid+1,r,L,R,x);\n\tpushup(p);\n}\nint check(int x)//\u8fd4\u56demid=x\u65f6\uff0c\u65b0\u5e8f\u5217\u4e2d\u4f4d\u7f6eq\u4e0a\u7684\u6570 \n{\n\tbuild(1,1,n,x);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint sum=query(1,1,n,Q[i].l,Q[i].r);\n\t\tif(!Q[i].type)\n\t\t{\n\t\t\tupdate(1,1,n,Q[i].l,Q[i].r-sum,0);\n\t\t\tupdate(1,1,n,Q[i].r-sum+1,Q[i].r,1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate(1,1,n,Q[i].l,Q[i].l+sum-1,1);\n\t\t\tupdate(1,1,n,Q[i].l+sum,Q[i].r,0);\n\t\t}\n\t}\n\treturn query(1,1,n,q,q);\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d %d %d\",&Q[i].type,&Q[i].l,&Q[i].r);\n\tscanf(\"%d\",&q); \n\tint l=0,r=1000000000,mid,res=0;\n\twhile(l<=r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(check(mid))\n\t\t\tl=mid+1,res=mid;\n\t\telse\n\t\t\tr=mid-1;\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}\n```\n",
        "postTime": 1574349845,
        "uid": 111475,
        "name": "doctorZ_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "**\u849f\u84bb\u535a\u5ba2\uff1a**[QwQ](https://www.cnblogs.com/GoldenPotato/p/9814376.html)\n\n\n------------\n\n## Solution\n\n\u8fd9\u9898\u6781\u5176\u5de7\u5999\u3002\n\n .\n\n\u9996\u5148\uff0c\u5982\u679c\u76f4\u63a5\u505am\u6b21\u6392\u5e8f\uff0c\u663e\u7136\u4f1aT\u5f97\u8d77\u98de\u3002\n\n\u6ce8\u610f\u4e00\u70b9\uff1a\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u6570\u3002\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u7edd\u5999\u7684\u60f3\u6cd5\uff1a**\u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\u7684\u65b9\u6cd5\u7f29\u5c0f\u8981\u627e\u7684\u6570\u7684\u533a\u95f4\u3002**\n\n\u8003\u8651\u4e8c\u5206\u4e00\u4e2a\u503c\uff0c\u5224\u5b9ap\u4f4d\u7f6e\u7684\u6570\u6392\u5e8f\u4e4b\u540e\uff0cp\u4f4d\u7f6e\u4e0a\u7684\u6570\u662f\u5426>=mid\n\n\u5982\u679c>=mid,\u5219\u5411\u53f3\u627e\uff0c\u5426\u5219\u5411\u5de6\u627e\u3002\n\n.\n\n\u600e\u4e48\u5224\u5b9ap\u4f4d\u7f6e\u7684\u6570\u6392\u5e8f\u4e4b\u540e\u662f\u5426>=mid\u5462\uff1f\n\n\u8003\u8651\u8fd9\u6837\u505a\uff1a**\u626b\u63cf\u4e00\u904d\u539f\u6570\u7ec4\uff0c>=mid\u7684\u6570\u8d4b\u503c\u4e3a1\uff0c<mid\u7684\u6570\u8d4b\u503c\u4e3a0**\u3002\n\n\u8fd9\u6837\u5b50\uff0c**\u9898\u76ee\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a01\u5e8f\u5217\u6392\u5e8f**\u3002\n\n\u8fd9\u5c31\u5f88\u53ef\u505a\u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e4b\u5373\u53ef\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0\u533a\u95f4\u67e5\u8be2\u4e0e\u533a\u95f4\u8d4b\u503c\u3002\n\n**\u5bf9\u4e8e\u4e00\u4e2a01\u533a\u95f4\u6392\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u533a\u95f4\u6709\u591a\u5c11\u4e2a0\uff0c\u591a\u5c11\u4e2a1\uff0c\u7136\u540e\u533a\u95f4\u4fee\u6539\u5373\u53ef\u3002**\n\n. \n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m*logn^2)$\n\n.\n\n\u5c31\u9171\uff0c\u8fd9\u9898\u5c31\u53ef\u4ee5\u5207\u6389\u5566(\uff89\u00b4\u25bd\uff40)\uff89\u266a\n\n\n\n------------\n## Code\n\n```cpp\n//Luogu  P2824 [HEOI2016/TJOI2016]\u6392\u5e8f\n//Oct,19th,2018\n//\u4e8c\u5206\u7b54\u6848\u7f29\u5c0f\u8303\u56f4+\u7ebf\u6bb5\u6811\u5999\u9898\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int N=30000+100;\nint a[N],w[N];\nstruct SegmentTree\n{\n    #define lson (now<<1)\n    #define rson (now<<1|1)\n    #define mid ((now_l+now_r)>>1)\n    static const int M=N<<2;\n    int sum[M][2],lazy[M];\n    inline void update(int now)\n    {\n        sum[now][0]=sum[lson][0]+sum[rson][0];\n        sum[now][1]=sum[lson][1]+sum[rson][1];\n    }\n    inline void pushdown(int now,int now_l,int now_r)\n    {\n        if(now_l==now_r)\n        {\n            lazy[now]=2;\n            return;\n        }\n        lazy[lson]=lazy[rson]=lazy[now];\n        sum[lson][lazy[now]]=mid-now_l+1,sum[lson][!lazy[now]]=0;\n        sum[rson][lazy[now]]=now_r-mid,sum[rson][!lazy[now]]=0;\n        lazy[now]=2;\n    }\n    void Build(int now,int now_l,int now_r)\n    {\n        sum[now][0]=sum[now][1]=0;\n        lazy[now]=2;\n        if(now_l==now_r)\n        {\n            sum[now][w[now_l]]++;\n            return;\n        }\n        Build(lson,now_l,mid);\n        Build(rson,mid+1,now_r);\n        update(now);\n    }\n    void Change(int L,int R,int x,int now,int now_l,int now_r)\n    {\n        if(L>R) return;\n        if(lazy[now]!=2) pushdown(now,now_l,now_r);\n        if(now_l>=L and now_r<=R)\n        {\n            sum[now][x]=now_r-now_l+1,sum[now][!x]=0;\n            lazy[now]=x;\n            return;\n        }\n        if(L<=mid) Change(L,R,x,lson,now_l,mid);\n        if(R>mid) Change(L,R,x,rson,mid+1,now_r);\n        update(now);\n    }\n    int Query(int L,int R,int x,int now,int now_l,int now_r)\n    {\n        if(lazy[now]!=2) pushdown(now,now_l,now_r);\n        if(now_l>=L and now_r<=R)\n            return sum[now][x];\n        int ans=0;\n        if(L<=mid) ans+=Query(L,R,x,lson,now_l,mid);\n        if(R>mid) ans+=Query(L,R,x,rson,mid+1,now_r);\n        return ans;\n    }\n    #undef lson\n    #undef rson\n    #undef mid\n}sgt;\nstruct OP\n{\n    int type,L,R;\n}op[N];\nint n,m,p;\nbool Check(int x)\n{\n    for(int i=1;i<=n;i++)\n        if(a[i]>=x) w[i]=1;\n        else w[i]=0;\n    sgt.Build(1,1,n);\n    for(int i=1;i<=m;i++)\n    {\n        int cnt0=sgt.Query(op[i].L,op[i].R,0,1,1,n),cnt1=op[i].R-op[i].L+1-cnt0;\n        if(op[i].type==0)\n            sgt.Change(op[i].L,op[i].L+cnt0-1,0,1,1,n),\n            sgt.Change(op[i].L+cnt0,op[i].R,1,1,1,n);\n        else\n            sgt.Change(op[i].L,op[i].L+cnt1-1,1,1,1,n),\n            sgt.Change(op[i].L+cnt1,op[i].R,0,1,1,n);\n    }\n    if(sgt.Query(p,p,1,1,1,n)==1) return true;\n    return false;\n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=n;i++)\n        a[i]=read();\n    for(int i=1;i<=m;i++)\n        op[i].type=read(),op[i].L=read(),op[i].R=read();\n    p=read();\n    \n    int L=0,R=n+100,ans=0;\n    while(L<=R)\n    {\n        int mid=(L+R)/2;\n        if(Check(mid)==true)\n            ans=max(ans,mid),L=mid+1;\n        else\n            R=mid-1;\n    }\n    \n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1539909082,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "**\u4e8c\u5206+\u7ebf\u6bb5\u6811**\u8db4\n\n\u9996\u5148\u8ba9\u6211\u4eec\u60f3\u60f3\u66b4\u529b\u7684\u505a\u6cd5\n\nemmmmmm\n\n\u5f3a\u884c\u66b4\u529b\uff0cO\uff08n^2*logn\uff09\uff08\u76f4\u63a5\u5f3a\u884c\u6392\u5e8f\uff09\n\n\u8ba9\u6211\u4eec\u60f3\u60f3\u5982\u4f55\u4f18\u5316\u8fd9\u4e2a\u6392\u5e8f\uff0c\u5bf9\u4e00\u4e2a\u5e8f\u5217\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO\uff08n*logn\uff09\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u5bf9\u4e00\u4e2a01\u5e8f\u5217\u6392\u5e8f\u7684\u65f6\u5019\u5c31\u662fO\uff08logn\uff09\u4e86\n\n\u90a3\u5177\u4f53\u600e\u4e48\u505a\u5462\uff1f\u505a\u6cd5\u5982\u4e0b\uff1a\n\n\u6b63\u786e\u505a\u6cd5:\n\n\u9996\u5148\u4e8c\u5206\u6240\u6c42\u4f4d\u7f6e\u6570\u5b57\uff0c\u5c06\u539f\u5e8f\u5217\u5927\u4e8emid\u503c\u7684\u6570\u8bbe\u4e3a1\uff0c\u5c0f\u4e8e\u7684\u8bbe\u4e3a0\n\n\u5f53\u964d\u5e8f\u65f6\u524d\u534a\u6bb5\u6539\u4e3a1\uff0c\u540e\u534a\u6bb5\u6539\u4e3a0\n\n\u5f53\u5347\u5e8f\u65f6\u524d\u534a\u6bb5\u6539\u4e3a0\uff0c\u540e\u534a\u6bb5\u6539\u4e3a1\n\n\u5177\u4f53\u6539\u591a\u5c11\u4e2a\u5c31\u8981\u901a\u8fc7\u7ebf\u6bb5\u6811\u533a\u95f4\u6c421\u4e2a\u6570\u5224\u65ad\u4e86\uff0c\u82e5\u4e2a\u6570\u4e3acnt\n\n**\u5f53\u964d\u5e8f\u65f6[l, r-cnt1]\u6539\u4e3a1\uff0c[l+cnt, r]\u6539\u4e3a0**\n\n**\u5f53\u5347\u5e8f\u65f6[l, r-cnt1]\u6539\u4e3a0\uff0c[r-cnt1+1, r]\u6539\u4e3a1**\n\n\u4e8c\u5206\u9a8c\u8bc1\u5219\u5224\u65ad\u6240\u6c42\u4f4d\u7f6e\u662f\u5426\u4e3a1\n\n\u65f6\u95f4\u590d\u6742\u5ea6O\uff08n*logn^2\uff09\n\n\u8be6\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100010; \nint a[maxn],opt[maxn],ll[maxn],rr[maxn];\nint n,m;\nint hh;\nstruct SYM{\n    int sum;\n    int lazy; \n}tree[8*maxn] ;\nvoid build(int i,int l,int r,int x){               //\u5efa\u6811\n    if(l==r){\n        tree[i].sum=(a[l]>=x);\n        tree[i].lazy=0;\n        return ;\n    }\n    int mid=(l+r)/2;\n    build(2*i,l,mid,x);\n    build(2*i+1,mid+1,r,x);\n    tree[i].sum=tree[2*i].sum+tree[2*i+1].sum;\n    tree[i].lazy=0;\n}\nvoid pushdown(int i,int l,int r){                  //\u4e0b\u4f20lazy\u6807\u8bb0\n    int mid=(l+r)/2;\n    if(!tree[i].lazy) return ;\n    tree[2*i].lazy=tree[2*i+1].lazy=tree[i].lazy;\n    if(tree[i].lazy==1){\n        tree[2*i].sum=(mid-l+1);\n        tree[2*i+1].sum=(r-mid); \n    }\n    else tree[2*i].sum=tree[2*i+1].sum=0;\n    tree[i].lazy=0;\n}\nvoid pushup(int i){\n    tree[i].sum=tree[2*i].sum+tree[2*i+1].sum;\n}\nint query(int i,int l,int r,int L,int R){                      //\u67e5\u8be21\u4e2a\u6570\n    if(l>=L&&r<=R)\n        return tree[i].sum;\n    if(r<L||l>R) return 0;\n    pushdown(i,l,r);\n    int mid=(l+r)/2;\n    return query(2*i,l,mid,L,R)+query(2*i+1,mid+1,r,L,R);\n}\nvoid update(int i,int l,int r,int L,int R,int x){            //\u66f4\u65b0\n    if(l>=L&&r<=R){\n        if(x==1){\n            tree[i].sum=(r-l+1);\n            tree[i].lazy=1;\n        }\n        else tree[i].sum=0,tree[i].lazy=-1;\n        return ;\n    }\n    if(r<L||l>R) return ;\n    pushdown(i,l,r);\n    int mid=(l+r)/2;\n    update(2*i,l,mid,L,R,x);\n    update(2*i+1,mid+1,r,L,R,x);\n    pushup(i);\n}\nint query1(int i,int l,int r,int x){\n    if(l==x&&r==x) return tree[i].sum;\n    int mid=(l+r)/2;\n    pushdown(i,l,r);\n    if(x<=mid) query1(2*i,l,mid,x);\n    else query1(2*i+1,mid+1,r,x);\n}\nint check(int x){\n    build(1,1,n,x);\n    for(int i=1;i<=m;i++){\n        int cnt=query(1,1,n,ll[i],rr[i]);\n        if(opt[i]==1){\n            update(1,1,n,ll[i],ll[i]+cnt-1,1);                  //\u5f53\u964d\u5e8f\u65f6[l, r-cnt1]\u6539\u4e3a1\uff0c[l+cnt, r]\u6539\u4e3a0\n            update(1,1,n,ll[i]+cnt,rr[i],0);\n        }\n        if(opt[i]==0){\n            update(1,1,n,rr[i]-cnt+1,rr[i],1);                 //\u5f53\u5347\u5e8f\u65f6[l, r-cnt1]\u6539\u4e3a0\uff0c[r-cnt1+1, r]\u6539\u4e3a1\n            update(1,1,n,ll[i],rr[i]-cnt,0);\n        }\n    }\n    return query1(1,1,n,hh);\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]);\n    for(int i=1;i<=m;i++)\n        scanf(\"%d%d%d\",&opt[i],&ll[i],&rr[i]);\n    scanf(\"%d\",&hh);\n    int lll=1,rrr=n,ans;\n    while(lll<=rrr){\n        int mid=(lll+rrr)/2;\n        if(check(mid)) ans=mid,lll=mid+1;\n        else rrr=mid-1;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1576425538,
        "uid": 66416,
        "name": "\u4f18\u5c11",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "# T \u300cTJOI / HEOI2016\u300d\u6392\u5e8f\n## \u9898\u76ee\n[\u70b9\u8fd9\u91cc](https://loj.ac/problem/2055)\n## \u8003\u573a\u601d\u8def\uff08\u5047\u6b63\u89e3\uff09\n\u76f4\u63a5\u770b\u7684 $50\\%$ \u7684\u6570\u636e\u8303\u56f4\uff0c\u53d1\u73b0\u53ef\u4ee5\u4f7f\u7528\u533a\u95f4\u6876\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(nm)$\u3002\n\n```cpp\n#include<cstdio>\n// #define FILEOI\n#define rep(i,__l,__r) for(int i=__l,i##_end_=__r;i<=i##_end_;++i)\n#define dep(i,__l,__r) for(int i=__l,i##_end_=__r;i>=i##_end_;--i)\n#define cg (c=getchar())\ntemplate<class T>inline void qread(T& x){\n\tx=0;char c;bool f=0;\n\twhile(cg<'0'||'9'<c)if(c=='-')f=1;\n\tfor(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n\tif(f)x=-x;\n}\ntemplate<class T,class... Args>inline void qread(T& x,Args&... args){qread(x),qread(args...);}\ninline int qread(){\n\tint x=0;char c;bool f=1;\n\twhile(cg<'0'||'9'<c)if(c=='-')f=0;\n\tfor(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n\treturn f?x:-x;\n}\n#undef cg\ntemplate<class T>inline T Max(const T x,const T y){return x>y?x:y;}\ntemplate<class T>inline T Min(const T x,const T y){return x<y?x:y;}\ntemplate<class T>inline T fab(const T x){return x>0?x:-x;}\ntemplate<class T>void fwrit(T x){\n\tif(x<0)return (void)(putchar('-'),fwrit(-x));\n\tif(x>10)fwrit(x/10);\n\treturn (void)(putchar(x%10^48));\n}\n\nconst int MAXN=1e5;\n\nint n,m,q,a[MAXN+5],t[MAXN+5];\n\ninline void init(){\n\tqread(n,m);\n\trep(i,1,n)qread(a[i]);\n}\n\ninline void getOperation(){\n\tint op,l,r,li,ri;\n\twhile(m--){\n\t\tli=n,ri=0;\n\t\tqread(op,l,r);\n\t\trep(i,l,r)++t[a[i]],li=Min(li,a[i]),ri=Max(ri,a[i]);\n\t\tif(op==0){\n\t\t\trep(i,l,r){\n\t\t\t\twhile(t[li]==0)++li;\n\t\t\t\ta[i]=li,t[li]=0;\n\t\t\t}\n\t\t}\n\t\telse if(op==1){\n\t\t\trep(i,l,r){\n\t\t\t\twhile(t[ri]==0)--ri;\n\t\t\t\ta[i]=ri,t[ri]=0;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",a[qread()]);\n}\n\nsigned main(){\n#ifdef FILEOI\n\tfreopen(\"sort.in\",\"r\",stdin);\n\tfreopen(\"sort.out\",\"w\",stdout);\n#endif\n\tinit();\n\tgetOperation();\n\treturn 0;\n}\n```\n\u671f\u671b\u5f97\u5206\u53ea\u6709 $50pts$\uff0c\u4f46\u662f\u6570\u636e\u6d4b\u51fa\u6765\uff0c\u5c45\u7136\u53ef\u4ee5 $A$ \u6389...\u6240\u4ee5\u53eb\u4f2a\u6b63\u89e3...\n## \u6b63\u89e3\n\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a $x$\uff0c\u5c06\u5c0f\u4e8e $x$ \u7684\u6570\u6362\u6210 $0$\uff0c\u5927\u4e8e\u7b49\u4e8e $x$ \u7684\u6570\u6362\u6210 $1$ \u4e4b\u540e\uff0c\u6240\u5f97\u5230\u7684\u6392\u5e8f\u7ed3\u679c\u5176\u5b9e\u662f\u4e00\u6837\u7684\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\u6709\u552f\u4e00\u7684\u7f3a\u9677\uff0c\u5c31\u662f\u6211\u4eec\u53ea\u77e5\u9053\u6700\u540e $q$ \u4f4d\u7f6e\u7684\u6570\u662f $0$ \u8fd8\u662f $1$\u3002\n\n\u5176\u5b9e\u5f88\u597d\u89e3\u51b3\uff0c**\u4e8c\u5206**\u8fd9\u4e2a $x$ \u5373\u53ef\u3002\n\n\u8fd9\u91cc\u5148\u628a\u6807\u79f0\u9644\u4e0a\n\n`std version`\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cctype>\n#define lc o << 1\n#define rc o << 1 | 1\n#define mid (l + r) / 2\nusing namespace std;\n\nconst int N = 100010;\nint n, m, p;\nint T[4 * N], lazy[4 * N];    // segment tree\nint a[N], ch[N], L[N], R[N];  // the information by reading\n\ninline int read() {\n    char ch = getchar();\n    int x = 0;\n    while (!isdigit(ch)) ch = getchar();\n    while (isdigit(ch)) {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x;\n}\n\ninline void build(int o, int l, int r, int x) {\n    if (l == r) {\n        T[o] = a[l] >= x;\n        lazy[o] = 0;\n        return;\n    }\n    build(lc, l, mid, x);\n    build(rc, mid + 1, r, x);\n    T[o] = T[lc] + T[rc];\n    lazy[o] = 0;\n}\n\ninline void pushdown(int o, int l, int r) {\n    if (!lazy[o])\n        return;\n    lazy[lc] = lazy[rc] = lazy[o];\n    if (lazy[o] == 1) {\n        T[lc] = mid - l + 1;\n        T[rc] = r - mid;\n    } else\n        T[lc] = T[rc] = 0;\n    lazy[o] = 0;\n}\n\ninline int query(int o, int l, int r, int x, int y) {\n    if (x <= l && y >= r)\n        return T[o];\n    if (x > r || y < l)\n        return 0;\n    pushdown(o, l, r);\n    return query(lc, l, mid, x, y) + query(rc, mid + 1, r, x, y);\n}\n\ninline int queryPoint(int o, int l, int r, int x) {\n    if (l == x && r == x)\n        return T[o];\n    pushdown(o, l, r);\n    if (x <= mid)\n        return queryPoint(lc, l, mid, x);\n    else\n        return queryPoint(rc, mid + 1, r, x);\n}\n\ninline void update(int o, int l, int r, int x, int y, int val) {\n    if (x <= l && y >= r) {\n        T[o] = val * (r - l + 1);\n        lazy[o] = val ? 1 : -1;\n        return;\n    }\n    if (x > r || y < l)\n        return;\n    pushdown(o, l, r);\n    update(lc, l, mid, x, y, val);\n    update(rc, mid + 1, r, x, y, val);\n    T[o] = T[lc] + T[rc];\n}\n\ninline bool check(int x) {\n    build(1, 1, n, x);\n    for (int i = 1; i <= m; i++) {\n        int cnt1 = query(1, 1, n, L[i], R[i]);\n        if (ch[i] == 0) {\n            update(1, 1, n, R[i] - cnt1 + 1, R[i], 1);\n            update(1, 1, n, L[i], R[i] - cnt1, 0);\n        } else {\n            update(1, 1, n, L[i], L[i] + cnt1 - 1, 1);\n            update(1, 1, n, L[i] + cnt1, R[i], 0);\n        }\n    }\n    return queryPoint(1, 1, n, p);\n}\n\nint main() {\n    freopen(\"sort.in\",\"r\",stdin);\n    freopen(\"sort.out\",\"w\",stdout);\n    n = read();\n    m = read();\n    for (int i = 1; i <= n; i++) a[i] = read();\n    for (int i = 1; i <= m; i++) {\n        ch[i] = read();\n        L[i] = read();\n        R[i] = read();\n    }\n    p = read();\n    int ll = 1, rr = n, midd, ans;\n    while (ll <= rr) {\n        midd = (ll + rr) >> 1;\n        if (check(midd))\n            ans = midd, ll = midd + 1;\n        else\n            rr = midd - 1;\n    }\n    printf(\"%d\\n\", rr);\n    return 0;\n}\n```\n\n`My version`\n\n```cpp\n#include<cstdio>\n// #define FILEOI\n#define lc (i<<1)\n#define rc (i<<1|1)\n#define rep(i,__l,__r) for(int i=__l,i##_end_=__r;i<=i##_end_;++i)\n#define dep(i,__l,__r) for(int i=__l,i##_end_=__r;i>=i##_end_;--i)\n#define cg (c=getchar())\ntemplate<class T>inline void qread(T& x){\n\tx=0;char c;bool f=0;\n\twhile(cg<'0'||'9'<c)if(c=='-')f=1;\n\tfor(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n\tif(f)x=-x;\n}\ntemplate<class T,class... Args>inline void qread(T& x,Args&... args){qread(x),qread(args...);}\ninline int qread(){\n\tint x=0;char c;bool f=1;\n\twhile(cg<'0'||'9'<c)if(c=='-')f=0;\n\tfor(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n\treturn f?x:-x;\n}\n#undef cg\ntemplate<class T>inline T Max(const T x,const T y){return x>y?x:y;}\ntemplate<class T>inline T Min(const T x,const T y){return x<y?x:y;}\ntemplate<class T>inline T fab(const T x){return x>0?x:-x;}\ntemplate<class T>void fwrit(T x){\n\tif(x<0)return (void)(putchar('-'),fwrit(-x));\n\tif(x>10)fwrit(x/10);\n\treturn (void)(putchar(x%10^48));\n}\n\nconst int MAXN=1e5;\nconst int MAXM=1e5;\n\nstruct change{int op,l,r;}p[MAXM+5];\nstruct node{\n\tint l,r,mid,t1,lazy;\n\tnode(){lazy=-1;}\n\tnode(const int L,const int R,const int M):l(L),r(R),mid(M){lazy=-1;}\n}tre[(MAXN<<2)+5];\nint n,m,a[MAXN+5],t[MAXN+5],q;\n\ninline void init(){\n\tqread(n,m);\n\trep(i,1,n)qread(a[i]);\n\tfor(int i=1;i<=m;++i)p[i]=change{qread(),qread(),qread()};\n\tqread(q);\n}\n\ninline void pushup(const int i){tre[i].t1=tre[lc].t1+tre[rc].t1;}\n\ninline void pushdown(const int i){\n\tif(tre[i].l^tre[i].r){\n\t\tif(tre[i].lazy==1){\n\t\t\ttre[lc].lazy=tre[rc].lazy=1;\n\t\t\ttre[lc].t1=(tre[lc].r-tre[lc].l+1);\n\t\t\ttre[rc].t1=(tre[rc].r-tre[rc].l+1);\n\t\t}\n\t\telse if(tre[i].lazy==0){\n\t\t\ttre[lc].lazy=tre[rc].lazy=0;\n\t\t\ttre[lc].t1=tre[rc].t1=0;\n\t\t}\n\t}\n\ttre[i].lazy=-1;\n}\n\ninline void buildtre(const int i,const int l,const int r,const int x){\n\t// printf(\"buildtre : %d %d %d %d\\n\",i,l,r,x);\n\tint mid=(l+r)>>1;\n\ttre[i]=node(l,r,mid);\n\tif(l==r)return (void)(tre[i].t1=(a[l]>=x));\n\tbuildtre(lc,l,mid,x);\n\tbuildtre(rc,mid+1,r,x);\n\tpushup(i);\n}\n\ninline int query(const int i,const int l,const int r){\n\t// printf(\"query : %d %d %d\\n\",i,l,r);\n\tif(l<=tre[i].l&&tre[i].r<=r)return tre[i].t1;\n\tif(tre[i].lazy!=-1)pushdown(i);\n\tint ret=0;\n\tif(l<=tre[i].mid)ret+=query(lc,l,r);\n\tif(tre[i].mid<r)ret+=query(rc,l,r);\n\tpushup(i);\n\treturn ret;\n}\n\ninline void update(const int i,const int l,const int r,const int var){\n\t// if(l>r)return;\n\t// printf(\"update : %d to %d, %d\\n\",l,r,var);\n\tif(l<=tre[i].l&&tre[i].r<=r){\n\t\ttre[i].lazy=var;\n\t\ttre[i].t1=(tre[i].r-tre[i].l+1)*var;\n\t\treturn;\n\t}\n\tif(tre[i].lazy!=-1)pushdown(i);\n\tif(l<=tre[i].mid)update(lc,l,r,var);\n\tif(tre[i].mid<r)update(rc,l,r,var);\n\tpushup(i);\n}\n\ninline int query(const int i,const int p){\n\t// printf(\"update : %d %d\\n\",i,p);\n\tif(tre[i].l==tre[i].r)return tre[i].t1;\n\tif(tre[i].lazy!=-1)pushdown(i);\n\tint ret;\n\tif(p<=tre[i].mid)ret=query(lc,p);\n\telse ret=query(rc,p);\n\tpushup(i);\n\treturn ret;\n}\n\ninline bool check(const int x){\n\t// printf(\"Now check : x == %d\\n\",x);\n\tbuildtre(1,1,n,x);\n\t// for(int i=1;i<=13;++i)printf(\"tre[%d] : %d %d %d %d %d\\n\",i,tre[i].l,tre[i].r,tre[i].mid,tre[i].t1,tre[i].lazy);\n\trep(i,1,m){\n\t\tint cnt1=query(1,p[i].l,p[i].r);\n\t\tint cnt0=p[i].r-p[i].l+1-cnt1;\n\t\t// printf(\"query : %d %d, cnt1 == %d, cnt0 == %d\\n\",p[i].l,p[i].r,cnt1,cnt0);\n\t\tif(p[i].op==0){\n\t\t\tif(cnt0)update(1,p[i].l,p[i].l+cnt0-1,0);\n\t\t\tif(cnt1)update(1,p[i].l+cnt0,p[i].r,1);\n\t\t\t// printf(\"update : %d to %d, %d\\n\",p[i].l,p[i].l+cnt0-1,0);\n\t\t\t// printf(\"update : %d to %d, %d\\n\",p[i].l+cnt0,p[i].r,1);\n\t\t}\n\t\telse{\n\t\t\tif(cnt1)update(1,p[i].l,p[i].l+cnt1-1,1);\n\t\t\tif(cnt0)update(1,p[i].l+cnt1,p[i].r,0);\n\t\t\t// printf(\"update : %d to %d, %d\\n\",p[i].l,p[i].l+cnt1-1,0);\n\t\t\t// printf(\"update : %d to %d, %d\\n\",p[i].l+cnt1,p[i].r,1);\n\t\t}\n\t\t// printf(\"Now The info of the tre :\\n\");\n\t\t// for(int j=1;j<=13;++j)printf(\"tre[%d] : %d %d %d %d %d\\n\",j,tre[j].l,tre[j].r,tre[j].mid,tre[j].t1,tre[j].lazy);\n\t}\n\t// printf(\"When x == %d,ans == %d\\n\",x,query(1,q));\n\treturn query(1,q);\n}\n\ninline void biSearch(){\n\tint l=0,r=n,x=0,ans;\n\twhile(l<=r){\n\t\tx=(l+r)>>1;\n\t\tif(check(x))ans=x,l=x+1;\n\t\telse r=x-1;\n\t}\n\tfwrit(ans),putchar('\\n');\n}\n\nsigned main(){\n#ifdef FILEOI\n\tfreopen(\"sort.in\",\"r\",stdin);\n\tfreopen(\"sort.out\",\"w\",stdout);\n#endif\n\tinit();\n\tbiSearch();\n\treturn 0;\n}\n```\n",
        "postTime": 1573638467,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P2824)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5047\u5982\u6211\u4eec\u7528\u4e00\u4e2a\u503c$k$\u6765\u5361\u8fd9\u4e2a\u5e8f\u5217\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6784\u5efa\u4e00\u4e2a\u65b0\u5e8f\u5217$b_i$\uff0c$b_i=\\begin{cases}1&a_i\\ge k\\\\0&a_i<k\\end{cases}$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217$b_i$\uff0c\u5982\u679c\u6700\u540e\u6392\u5e8f\u5b8c\u4e86\uff0c$b_q$\u4e3a$1$\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u77e5\u9053\uff0c\u7b54\u6848$\\ge k$\uff0c\u5426\u5219\u7b54\u6848\u5c31\u662f$<k$\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u6211\u4eec**\u627e\u5230\u7684\u6700\u5927\u7684\u6ee1\u8db3$b_q$\u4e3a$1$\u7684$k$\u5c31\u662f\u7b54\u6848**\u3002\u663e\u7136\uff0c\u786e\u5b9a\u8fd9\u4e2a\u6700\u5927\u7684$k$\u53ef\u4ee5\u7528\u4e8c\u5206\u5feb\u901f\u641e\u6389\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u73b0\u5728\u8003\u8651\u5bf9\u4e8e$b_i$\uff0c\u600e\u4e48\u5bf9\u5b83\u5feb\u901f\u6392\u5e8f\u3002\u5347\u5e8f\u964d\u5e8f\u7684\u533a\u522b\u4e0d\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8003\u8651\u5347\u5e8f\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u4e00\u4e2a$01$\u5e8f\u5217\uff0c\u5347\u5e8f\u6392\u5e8f\u7684\u65f6\u5019$0$\u4f1a\u6392\u524d\u9762\uff0c$1$\u4f1a\u6392\u540e\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u67e5\u8be2\u533a\u95f4\u7684$1$\u7684\u4e2a\u6570\uff0c\u7136\u540e\u533a\u95f4\u8986\u76d6\u3002\u8fd9\u6837\u505a\u5230\u4e86\u5355\u6b21\u201c\u6392\u5e8f\u201d$O(\\log_2n)$\uff0c\u4e00\u6b21\u68c0\u67e5\u5c31\u662f$O(m\\log_2n)$\u3002\u603b\u65f6\u95f4\u5c31\u662f$O(m\\log_2n\\log_2\\{\\max\\{a_i\\}\\})$\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n\n#define isLeaf( a ) ( segTree[a].l == segTree[a].r )\n#define siz( a ) ( segTree[a].r - segTree[a].l + 1 )\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 1e5 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s < '0' || '9' < s ){ if( s == '-' ) f = -1; s = getchar(); }\n\twhile( '0' <= s && s <= '9' ){ x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar(); }\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ x = -x, putchar( '-' ); }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct oper\n{\n\tint l, r, type;\n}P[MAXN];\n\nstruct segmentTreeNode\n{\n\tint l, r;\n\tint cnt;\n\tint tag;\n}segTree[MAXN << 2];\n\nint a[MAXN];\nint splt;\nint N, M, Q;\n\nvoid upt( const int now )\n{\n\tsegTree[now].cnt = segTree[now << 1].cnt + segTree[now << 1 | 1].cnt;\n}\n\nvoid build( const int now, const int left, const int right )\n{\n\t#ifdef _DEBUG\n\tsegmentTreeNode &node3 = segTree[now];\n\t#endif\n\tsegTree[now].l = left, segTree[now].r = right, segTree[now].tag = 0;\n\tif( isLeaf( now ) ) { segTree[now].cnt = a[left] >= splt; return ; }\n\tbuild( now << 1, left, left + right >> 1 ), build( now << 1 | 1, ( left + right >> 1 ) + 1, right );\n\tupt( now );\n}\n\nvoid nCover( const int now, const int type )\n{\n\tif( type > 0 ) segTree[now].cnt = siz( now );\n\telse if( type < 0 ) segTree[now].cnt = 0;\n\tsegTree[now].tag = type;\n}\n\nvoid normalize( const int now )\n{\n\tif( ! segTree[now].tag ) return ;\n\tnCover( now << 1, segTree[now].tag ), nCover( now << 1 | 1, segTree[now].tag );\n\tsegTree[now].tag = 0;\n}\n\nvoid cover( const int now, const int segL, const int segR, const int type ) \n{\n\t#ifdef _DEBUG\n\tsegmentTreeNode &node1 = segTree[now];\n\t#endif\n\tif( segR < segTree[now].l || segTree[now].r < segL ) return ;\n\tif( segL <= segTree[now].l && segTree[now].r <= segR ){ nCover( now, type ); return ; }\n\tif( isLeaf( now ) ) return ; normalize( now );\n\tcover( now << 1, segL, segR, type ), cover( now << 1 | 1, segL, segR, type );\n\tupt( now );\n}\n\nint count( const int now, const int segL, const int segR )\n{\n\t#ifdef _DEBUG\n\tsegmentTreeNode &node2 = segTree[now];\n\t#endif\n\tif( segR < segTree[now].l || segTree[now].r < segL ) return 0;\n\tif( segL <= segTree[now].l && segTree[now].r <= segR ) return segTree[now].cnt;\n\tif( isLeaf( now ) ) return 0; normalize( now );\n\treturn count( now << 1, segL, segR ) + \n\t\t   count( now << 1 | 1, segL, segR );\n}\n\nbool chk( const int val )\n{\n\tsplt = val;\n\tbuild( 1, 1, N );\n\tint cnt;\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tcnt = count( 1, P[i].l, P[i].r );\n\t\tif( P[i].type == 0 ) cover( 1, P[i].l, P[i].r - cnt, -1 ), cover( 1, P[i].r - cnt + 1, P[i].r, 1 );\n\t\telse cover( 1, P[i].l, P[i].l + cnt - 1, 1 ), cover( 1, P[i].l + cnt, P[i].r, -1 );\n\t}\n\treturn count( 1, Q, Q );\n}\n\nint main()\n{\n\tint l = INF, r = -INF;\n\tread( N ), read( M );\n\tfor( int i = 1 ; i <= N ; i ++ ) read( a[i] ), l = MIN( l, a[i] ), r = MAX( r, a[i] );\n\tfor( int i = 1 ; i <= M ; i ++ ) read( P[i].type ), read( P[i].l ), read( P[i].r );\n\tread( Q );\n\tint mid;\n\twhile( r - l > 1 )\n\t{\n\t\tmid = l + r >> 1;\n\t\tif( chk( mid ) ) l = mid;\n\t\telse r = mid - 1;\n\t}\n\tif( chk( r ) ) write( r );\n\telse write( l );\n\tputchar( '\\n' ); \n\treturn 0;\n}\n```",
        "postTime": 1573603078,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[HEOI2016/TJOI2016]\u6392\u5e8f"
    },
    {
        "content": "\n## \u4e00\u3001\u9898\u76ee\n\n[\u70b9\u6b64\u770b\u9898](https://www.luogu.org/problem/P2824)\n\n## \u4e8c\u3001\u89e3\u6cd5\n\n\u5176\u5b9e\u672c\u9898\u7684\u7a81\u7834\u53e3\u5728\u53ea\u6709\u4e00\u4e2a\u8be2\u95ee\u4e0a\uff0c\u56e0\u4e3a\u6ca1\u6709\u6392\u5e8f\u7b97\u6cd5\u80fd\u8fbe\u5230$O(\\log n)$\u3002\n\n\u8003\u8651$\\log$\u7684\u590d\u6742\u5ea6\u6392\u5e8f\uff0c\u53d1\u73b0\u5b83\u53ea\u80fd\u5bf9$01$\u4e32\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u5c1d\u8bd5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a$01$\u4e32\u7684\u6392\u5e8f\u3002\n\n\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u5206\u754c\u503c$x$\uff0c\u90a3\u4e48\u5c0f\u4e8e$x$\u7684\u662f$0$\uff0c\u5426\u5219\u662f$1$\uff0c\u6392\u5e8f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5b9e\u73b0\uff0c\u7ef4\u62a4$0$\u7684\u4e2a\u6570\uff0c\u652f\u6301\u533a\u95f4\u8d4b\u503c\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5173\u4e8e\u5927\u5c0f\u7684\u63cf\u8ff0\uff0c\u6211\u4eec\u770b\u6700\u540e$q$\u4f4d\u662f\u5426\u4e3a$1$\uff0c\u5982\u679c\u4e3a$1$\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a$a[q]\\leq x$\uff0c\u6240\u4ee5\u6211\u4eec\u4e8c\u5206$x$\uff0c\u627e\u5230\u4e00\u4e2a\u80fd\u4f7f$q$\u4f4d\u4e3a$1$\u7684\u6700\u5927\u7684$x$\uff0c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log^2 n)$\u3002\n\n\n```cpp\n#include <cstdio>\n#define Len(i) (tr[i].r-tr[i].l+1)\nconst int MAXN = 100005;\nint read()\n{\n    int x=0,flag=1;char c;\n    while((c=getchar())<'0' || c>'9') if(c=='-') flag=-1;\n    while(c>='0' && c<='9') x=(x<<3)+(x<<1)+(c^'0'),c=getchar();\n    return x*flag;\n}\nint n,m,q,ans,a[MAXN];\nstruct node\n{\n    int op,l,r;\n}s[MAXN];\nstruct tree\n{\n    int l,r,sum,lazy;//1->0 2->1\n}tr[MAXN*4];\nvoid build(int i,int l,int r)\n{\n    tr[i]=tree{l,r,0,0};\n    if(l==r) return ;\n    int mid=(l+r)>>1;\n    build(i<<1,l,mid);\n    build(i<<1|1,mid+1,r);\n}\nvoid down(int i)\n{\n    if(tr[i].lazy==1)\n    {\n        tr[i<<1].sum=Len(i<<1),tr[i<<1].lazy=1;\n        tr[i<<1|1].sum=Len(i<<1|1),tr[i<<1|1].lazy=1;\n    }\n    else\n    {\n        tr[i<<1].sum=0,tr[i<<1].lazy=2;\n        tr[i<<1|1].sum=0,tr[i<<1|1].lazy=2;\n    }\n    tr[i].lazy=0;\n}\nvoid updata(int i,int l,int r,int t)\n{\n    if(l>r || tr[i].l>r || tr[i].r<l)\n        return ;\n    if(l<=tr[i].l && tr[i].r<=r)\n    {\n        if(t==0) tr[i].sum=Len(i),tr[i].lazy=1;\n        else tr[i].sum=0,tr[i].lazy=2;\n        return ;\n    }\n    if(tr[i].lazy) down(i);\n    updata(i<<1,l,r,t);\n    updata(i<<1|1,l,r,t);\n    tr[i].sum=tr[i<<1].sum+tr[i<<1|1].sum;\n}\nint query(int i,int l,int r)\n{\n    if(tr[i].l>r || tr[i].r<l)\n        return 0;\n    if(l<=tr[i].l && tr[i].r<=r)\n        return tr[i].sum;\n    if(tr[i].lazy) down(i);\n    return query(i<<1,l,r)+query(i<<1|1,l,r);\n}\nbool check(int x)\n{\n    build(1,1,n);\n    for(int i=1;i<=n;i++)\n        updata(1,i,i,a[i]>=x);\n    for(int i=1;i<=m;i++)\n    {\n        int op=s[i].op,l=s[i].l,r=s[i].r;\n        int t=query(1,l,r);\n        if(op==0)\n        {\n            updata(1,l,l+t-1,0);\n            updata(1,l+t,r,1);\n        }\n        else\n        {\n            updata(1,l,r-t,1);\n            updata(1,r-t+1,r,0);\n        }\n    }\n    return query(1,q,q)==0;\n}\nvoid dich(int l,int r)\n{\n    if(l>r) return ;\n    int mid=(l+r)>>1;\n    if(check(mid))\n    {\n        ans=mid;\n        dich(mid+1,r);\n    }\n    else\n        dich(l,mid-1);\n}\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=n;i++)\n        a[i]=read();\n    for(int i=1;i<=m;i++)\n        s[i]=node{read(),read(),read()};\n    q=read();\n    dich(1,n);\n    printf(\"%d\\n\",ans);\n}\n\n```\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u66b4\u529b\u6876\u6392\u7136\u540e\u5f00$O2$\u4e5f\u80fd\u8fc7qwq\u3002\n\n",
        "postTime": 1573571899,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "[\u70b9\u51fb\u98df\u7528\u66f4\u4f73](https://www.cnblogs.com/hbxblog/p/11708862.html)\n\n### $Solution$\n\n\u8fd9\u9053\u9898\u5728\u7ebf\u7684\u505a\u6cd5\u4e0d\u4f1a\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u53ea\u8bb2\u79bb\u7ebf\u7684\u505a\u6cd5\u3002\n\n\u56e0\u4e3a\u76f4\u63a5\u6392\u5e8f\u7684\u8bdd\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u5bf9.\u4f46\u662f\u5982\u679c\u6570\u5217\u4e3a$01$\u4e32\u7684\u8bdd\u5c31\u53ef\u4ee5\u8ba9\u590d\u6742\u5ea6\u53d8\u6210\u5bf9\u7684\u4e86\n\n\u90a3\u4e48$01$\u4e32\u600e\u4e48\u505a\u5462?\n\n\u6211\u4eec\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f.\n\n\u5047\u8bbe\u6211\u4eec\u8981\u5c06$[l,r]$\u6392\u5e8f\n\n\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u51fa$[l,r]$\u4e2d$1$\u7684\u4e2a\u6570,\u6211\u4eec\u4ee4\u4ed6\u4e3a$w$\n\n\u5982\u679c\u5347\u5e8f\u5c31\u5c06$[r-x+1,r]$\u8bbe\u4e3a1,\u5176\u4f59\u4e3a$0$\n\n\u5982\u679c\u964d\u5e8f\u5c31\u5c06$[l,l+x-1]$\u8bbe\u4e3a1,\u5176\u4f59\u4e3a$0$\n\n\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u600e\u4e48\u53d8\u6210\u4e0a\u8ff0\u60c5\u51b5\u5462?\n\n\u6211\u4eec\u4e8c\u5206\u6700\u540e\u7684\u7b54\u6848\uff0c\u4ee4\u8fd9\u4e2a\u6570\u4e3a$mid$\u3002\n\n\u5bf9\u4e8e\u5e8f\u5217\u4e2d\u7684\u6570\uff0c\u5982\u679c\u5c0f\u4e8e$mid$\u5c31\u4e3a$0$\uff0c\u5927\u4e8e$mid$\u5c31\u4e3a$1$\n\n\u7136\u540e\u64cd\u4f5c\u6839\u4e0a\u8ff0\u8fc7\u7a0b\u4e00\u6837.\n\n\u6700\u540e\u5224\u65ad\u4e0b$q$\u4f4d\u7f6e\u662f\u5426\u4e3a$1$\n\n\u662f\uff0c$l=mid+1$\n\n\u5426\uff0c$r=mid-1$\n\n\u73b0\u5728\u6765\u8bc1\u660e\u4e00\u4e0b\u8fd9\u4e2a\u5355\u8c03\u6027\u3002\n\n\u5982\u679c$q$\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570\u4e3a$1$\uff0c\u90a3\u4e48\u7b54\u6848\u80af\u5b9a\u4e3a$x+1,x+2,x+3...$\u6240\u4ee5\u533a\u95f4\u53f3\u79fb\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\n\n### $Code$\n\n``` cpp\n#include<bits/stdc++.h>\n#define rg register\n#define file(x) freopen(x\".in\",\"r\",stdin);freopen(x\".out\",\"w\",stdout);\nusing namespace std;\nint read(){\n    int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9') f=(c=='-')?-1:1,c=getchar();\n    while(c>='0'&&c<='9') x=x*10+c-48,c=getchar();\n    return f*x;\n}\nstruct node {\n\tint lazy,v;\n}a[1000001];\nint c[1000001];\nvoid pushup(int k){\n\ta[k].v=a[k<<1].v+a[k<<1|1].v;\n}\nvoid build(int k,int l,int r){\n\ta[k].lazy=-1,a[k].v=0;\n\tif(l==r)\n\t\treturn;\n\tint mid=(l+r)>>1;\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n}\nvoid pushdown(int k,int l,int r){\n\tif(a[k].lazy==-1) return;\n\tint mid=(l+r)>>1;\n\ta[k<<1].v=(mid-l+1)*a[k].lazy;\n\ta[k<<1|1].v=(r-mid)*a[k].lazy;\n\ta[k<<1].lazy=a[k<<1|1].lazy=a[k].lazy;\n\ta[k].lazy=-1;\n}\nvoid update(int k,int l,int r,int begin,int end,int v){\n\tif(r<begin||l>end) return ;\n\tif(r<=end&&l>=begin){\n\t\ta[k].v=(r-l+1)*v;\n\t\ta[k].lazy=v;\n\t\treturn ;\n\t}\n\tpushdown(k,l,r);\n\tint mid=(l+r)>>1;\n\tupdate(k<<1,l,mid,begin,end,v);\n\tupdate(k<<1|1,mid+1,r,begin,end,v);\n\tpushup(k);\n}\nint find(int k,int l,int r,int begin,int end){\n\tif(r<begin&&l>end) return 0;\n\tif(r<=end&&l>=begin) return a[k].v;\n\tpushdown(k,l,r);\n\tint mid=(l+r)>>1;\n\tif(end<=mid)\n\t\treturn find(k<<1,l,mid,begin,end);\n\telse if(begin>mid)\n\t\treturn find(k<<1|1,mid+1,r,begin,end);\n\telse return find(k<<1,l,mid,begin,mid)+find(k<<1|1,mid+1,r,mid+1,end);\n}\nstruct ans{\n\tint opt,x,y;\n}b[1000001];\nint n,m,ans,l,r,q;\nbool check(int x){\n\tbuild(1,1,n);\n\tfor(int i=1;i<=n;i++)\n\t\tupdate(1,1,n,i,i,c[i]>=x);\n\tfor(int i=1;i<=m;i++){\n\t\tint opt=b[i].opt,x=b[i].x,y=b[i].y;\n\t\tint w1=find(1,1,n,x,y),w0=y-x+1-w1;\n\t\tif(opt==0)\n\t\t\tupdate(1,1,n,x,y,1),update(1,1,n,x,x+w0-1,0);\n\t\telse update(1,1,n,x,y,0),update(1,1,n,x,x+w1-1,1);\n\t}\n\treturn find(1,1,n,q,q)==1;\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++) c[i]=read();\n\tfor(int i=1;i<=m;i++) b[i].opt=read(),b[i].x=read(),b[i].y=read();\n\tl=1,r=n,q=read();\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)) l=mid+1,ans=mid;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1571572917,
        "uid": 19805,
        "name": "\u64a4\u4e91",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "\u4e0d\u96be\u60f3\u5230\u53bb\u4e8c\u5206\u6211\u4eec\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u6bcf\u6b21\u68c0\u67e5\u7684\u65f6\u5019\u628a\u6240\u6709\u6bd4\u6211\u4eec\u4e8c\u5206\u51fa\u6765\u7684\u7b54\u6848\u5c0f\u7684\u6570\u8bbe\u4e3a $0$ \uff0c\u5176\u4ed6\u7684\u6570\u8bbe\u4e3a $1$ \u3002\n\n\u6bcf\u6b21\u5347\u5e8f\u6392\u5e8f\u5c31\u662f\u628a\u8fd9\u6bb5\u533a\u95f4\u91cc $0$ \u653e\u5230\u524d\u9762\uff0c $1$ \u653e\u5230\u540e\u9762\u3002\n\n\u964d\u5e8f\u540c\u7406\u3002\n\n\u6ce8\u610f\u5230\u653e $0,1$ \u7684\u64cd\u4f5c\u5c31\u662f\u6211\u4eec\u559c\u95fb\u4e50\u89c1\u7684\u533a\u95f4\u63a8\u5e73\uff0c\u8003\u8651\u7528 $ODT$ \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u6574\u4e2a\u6570\u5217\u7684\u503c\u57df\u5f88\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u6bcf\u6b21\u64cd\u4f5c\u4ee5\u540e\u5c1d\u8bd5\u628a\u65b0\u51fa\u73b0\u7684\u4e24\u4e2a\u533a\u95f4\u548c\u65c1\u8fb9\u7684\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u3002\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5f00\u4e86 $O2$ \u4ee5\u540e\u8fd8\u8981\u8dd1 $1s$ \u591a\uff0c\u6216\u8bb8\u662f\u4eba\u4e11\u5e38\u6570\u5927\u5427\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <class T>\ninline void write(T x)\n{\n    if(x>9)\n    {\n        write(x/10);\n    }\n    putchar(x%10+'0');\n}\n\ninline char nc()\n{\n    static char buf[1000000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;\n}\n\ninline void read(int &sum)\n{\n    char ch=nc();\n    int tf=0;\n    sum=0;\n    while((ch<'0'||ch>'9')&&(ch!='-')) ch=nc();\n    tf=((ch=='-')&&(ch=nc()));\n    while(ch>='0'&&ch<='9') sum=sum*10+(ch-48),ch=nc();\n    (tf)&&(sum=-sum);\n}\n\nconst int MAXN=1e5+10;\n\nstruct node\n{\n    int l,r,v;\n    node(){}\n    node(int L,int R=-1,int V=0):l(L),r(R),v(V){}\n    bool operator <(const node &o) const\n    {\n        return l<o.l;\n    }\n};\n\nset<node> s;\n\ninline void merge(int l)\n{\n    set<node>::iterator it1,it2,it3;\n    it2=s.lower_bound(l);\n    if(it2==s.begin())\n        return;\n    it1=it2,it3=it2;\n    --it1,++it3;\n    bool pd3=(it3!=s.end());\n    if(pd3&&it1->v==it2->v&&it2->v==it3->v&&it1->v==it3->v)\n    {\n        int l=it1->l,r=it3->r,v=it2->v;\n        s.erase(it1,++it3);\n        s.insert(node(l,r,v));\n    }\n    else if(it1->v==it2->v)\n    {\n        int l=it1->l,r=it2->r,v=it2->v;\n        s.erase(it1,++it2);\n        s.insert(node(l,r,v));\n    }\n    else if(pd3&&it2->v==it3->v)\n    {\n        int l=it2->l,r=it3->r,v=it2->v;\n        s.erase(it2,++it3);\n        s.insert(node(l,r,v));\n    }\n}\n\ninline set<node>::iterator split(int pos)\n{\n    set<node>::iterator it=s.lower_bound(node(pos));\n    if(it!=s.end()&&it->l==pos) return it;\n    --it;\n    int L=it->l,R=it->r,V=it->v;\n    s.erase(it);\n    s.insert(node(L,pos-1,V));\n    return s.insert(node(pos,R,V)).first;\n}\n\ninline void assignval(int l,int r,int v)\n{\n    set<node>::iterator itr=split(r+1),itl=split(l);\n    s.erase(itl,itr);\n    s.insert(node(l,r,v));\n}\n\ninline int query(int l,int r)\n{\n    set<node>::iterator itr=split(r+1),itl=split(l);\n    int ret=0;\n    for(;itl!=itr;++itl)\n        if(itl->v==1) ret+=(itl->r-itl->l+1);\n    return ret;\n}\n\nstruct qnode\n{\n    int l,r,lx;\n};\n\nqnode q[MAXN];\nint a[MAXN];\nint n,m,k;\n\ninline bool check(int x)\n{\n    s.clear();\n    for(int i=1;i<=n;++i)\n        s.insert(node(i,i,a[i]>=x));\n    s.insert(node(n+1,n+1,-1));\n    s.insert(node(0,0,-1));\n    for(int i=1;i<=m;++i)\n    {\n        int cnt1=query(q[i].l,q[i].r);\n        if(!q[i].lx)\n        {\n            assignval(q[i].r-cnt1+1,q[i].r,1);\n            assignval(q[i].l,q[i].r-cnt1,0);\n        }\n        else\n        {\n            assignval(q[i].l,q[i].l+cnt1-1,1);\n            assignval(q[i].l+cnt1,q[i].r,0);\n        }\n        merge(q[i].l);\n        merge(q[i].r+1);\n    }\n    set<node>::iterator itl=split(k);\n    return itl->v==1;\n}\n\nint main()\n{\n    read(n),read(m);\n    for(int i=1;i<=n;++i)\n        read(a[i]);\n    for(int i=1;i<=m;++i)\n        read(q[i].lx),read(q[i].l),read(q[i].r);\n    read(k);\n    int l=1,r=n,ans;\n    while(l<=r)\n    {\n        int mid=(l+r)>>1;\n        if(check(mid)) ans=mid,l=mid+1;\n        else r=mid-1;\n    }\n    write(ans);\n    return 0;\n}\n```\n",
        "postTime": 1571312619,
        "uid": 102473,
        "name": "Setsugesuka",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "\u7b54\u6848\u7684\u533a\u95f4\u662f$[1,n]$\uff0c\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\n\n\u5728check\u7684\u65f6\u5019\u6211\u4eec\u628a\u5f53\u524d\u5047\u8bbe\u7684\u7b54\u6848\u8bb0\u4e3a$u$\uff0c\u6bd4$u$\u5927\u7684\u4f4d\u7f6e\u8bb0\u4e3a$1$\uff0c\u5426\u5219\u8bb0\u4e3a$0$\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u768401\u5e8f\u5217\uff0c\u7528\u8fd9\u4e2a\u5e8f\u5217\u5efa\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u548c\u3002\u5f53\u6211\u4eec\u9047\u5230\u5bf9\u4e00\u4e2a\u533a\u95f4\u987a\u5e8f\u6392\u5e8f\u7684\u8be2\u95ee\uff0c\u5c31\u662f\u628a\u533a\u95f4\u91cc\u76841\u653e\u5230\u533a\u95f4\u7684\u6700\u540e\uff0c\u5426\u5219\u628a0\u653e\u5728\u533a\u95f4\u6700\u540e\u3002\u6bcf\u6b21check\u9700\u8981\u505a$m$\u4e2a\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7ed3\u675f\u4e4b\u540e\u5982\u679c\u76ee\u6807\u4f4d\u7f6e\u7684\u503c\u4e3a$1$\uff0c\u5c31\u8bf4\u660e\u7b54\u6848\u5927\u4e8e$u$\uff0c\u5426\u5219\u5c0f\u4e8e\u7b49\u4e8e$u$\u3002\n\n\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6$O((n + m) \\log ^2 n )$\u3002\n\n\u7c7b\u4f3c\u9898\u76ee\uff1a[Gym \u2013 101234A](https://codeforces.com/gym/101234/problem/A)\n\n\u6211\u7684\u535a\u5ba2\uff1a[SweetCigarettes\n](http://www.cfzhao.com)\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int MAX_N = 100000 + 5;\nint n, m, a[MAX_N], b[MAX_N], tree[MAX_N << 2], tag[MAX_N << 2];\nint op[MAX_N], opL[MAX_N], opR[MAX_N];\nint pos;\n\nvoid makeTag(int u) {\n    for (int i = 1; i <= n; ++i) b[i] = (a[i] > u ? 1 : 0); \n    // printf(\"u = %d\\n\", u);\n    // for (int i = 1; i <= n; ++i) printf(\"%d%c\", b[i], i == n ? '\\n' : ' ');\n}\n\ninline int ls(int o) {\n    return o << 1;\n}\n\ninline int rs(int o) {\n    return o << 1 | 1;\n}\n\ninline void pushUp(int o) {\n    tree[o] = tree[ls(o)] + tree[rs(o)];\n}\n\ninline void pushDown(int o, int l, int r) {\n    if (tag[o] == -1) return;\n    tag[ls(o)] = tag[rs(o)] = tag[o];\n    int mid = (l + r) >> 1;\n    tree[ls(o)] = tag[o] * (mid - l + 1); \n    tree[rs(o)] = tag[o] * (r - mid); \n    tag[o] = -1;\n}\n\nvoid build(int o, int l, int r) {\n    tag[o] = -1;\n    if (l == r) {\n        tree[o] = b[l];\n        return;\n    }\n    int mid = (l + r) >> 1;\n    build(ls(o), l, mid);\n    build(rs(o), mid + 1, r);\n    pushUp(o);\n}\n\nvoid update(int o, int l, int r, int L, int R, int v) {\n    if (L <= l && r <= R) {\n        tag[o] = v;\n        tree[o] = v * (r - l + 1);\n        return;\n    }\n    int mid = (l + r) >> 1;\n    pushDown(o, l, r);\n    if (L <= mid) update(ls(o), l, mid, L, R, v);\n    if (R > mid) update(rs(o), mid + 1, r, L, R, v);\n    pushUp(o);\n}\n\nint query(int o, int l, int r, int L, int R) {\n    if (L <= l && r <= R) return tree[o];\n    int mid = (l + r) >> 1, ret = 0;\n    pushDown(o, l, r);\n    if (L <= mid) ret += query(ls(o), l, mid, L, R);\n    if (R > mid) ret += query(rs(o), mid + 1, r, L, R);\n    return ret;\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i) scanf(\"%d\", a + i);\n    for (int i = 1; i <= m; ++i) scanf(\"%d%d%d\", op + i, opL + i, opR + i);\n    scanf(\"%d\", &pos);\n    int l = 1, r = n;\n    while (l < r) {\n        // printf(\"l = %d, r = %d\\n\", l, r);\n        int mid = (l + r) >> 1;\n        makeTag(mid);\n        build(1, 1, n);\n        for (int i = 1; i <= m; ++i) {\n            int sum = query(1, 1, n, opL[i], opR[i]);\n            // printf(\"sum = %d\\n\", sum);\n            switch (op[i]) {\n                case 0: {\n                    int k = opR[i] - sum + 1;\n                    if (opL[i] <= k - 1) update(1, 1, n, opL[i], k - 1, 0);\n                    if (opR[i] >= k) update(1, 1, n, k, opR[i], 1);\n                    break;\n                }\n                case 1: {\n                    int k = opL[i] + sum - 1;\n                    if (opL[i] <= k) update(1, 1, n, opL[i], k, 1);\n                    if (opR[i] >= k + 1) update(1, 1, n, k + 1, opR[i], 0);\n                    break;\n                }\n            }\n        }\n        if (query(1, 1, n, pos, pos)) l = mid + 1;\n        else r = mid;\n    }\n    printf(\"%d\\n\", l);\n    return 0;\n}\n```",
        "postTime": 1564857175,
        "uid": 19957,
        "name": "zhaoyuweijsnt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016/TJOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "\u6ce8\u610f\u5230\u503c\u57df\u90a3\u4e48\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u6876\u6392\uff0c\u800c\u4e14\u56e0\u4e3a\u662f\u6392\u5217\uff0c\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528bool\u7c7b\u578b\u5b58\uff0c\u7136\u540e8\u4e2abit\u538b\u6210\u4e00\u4e2aunsigned char\uff0c\u5c82\u4e0d\u7f8e\u54c9\u3002 \u7136\u800c\u76f4\u63a5\u8fd9\u6837\u4f1aT\u4e24\u4e2a\u70b9\uff0c\u6240\u4ee5\u8fd8\u8981\u52a0\u4e2a\u7279\u5224\uff1a\u5982\u679c\u5f53\u524d\u7684unsigned char\u4e3a\u7a7a\uff0c\u5c31\u76f4\u63a5\u8df3\u8fc7\u3002\n\n```cpp\n#pr\\\nagma GCC optimize(\"O2\")\n#include<cstdio> \n#include<cstring>\n#include<cctype>\ninline char read() {\n    static const int IN_LEN = 1000000;\n    static char buf[IN_LEN], *s, *t;\n    if (s == t) {\n        t = (s = buf) + fread(buf, 1, IN_LEN, stdin);\n        if (s == t) return -1;\n    }\n    return *s++;\n}\ntemplate<class T>\ninline void read(T &x) {\n    static bool iosig;\n    static char c;\n    for (iosig = false, c = read(); !isdigit(c); c = read()) {\n        if (c == '-') iosig = true;\n        if (c == -1) return;\n    }\n    for (x = 0; isdigit(c); c = read())\n        x = (x + (x << 2) << 1) + (c ^ '0');\n    if (iosig) x = -x;\n}\nint n,m,a[30005],i,j,o,l,r,z,x,y,j1,j2,j3,j4;\nunsigned char b[4000];\nint main(){\n    read(n);\n    read(m);\n    z=n>>3;\n    for(i=1;i<=n;++i)read(a[i]);\n    while(m--){\n        read(o);\n        read(l);\n        read(r);\n        memset(b,0,sizeof b);\n        for(j1=l,j2=j1+1,j3=j2+1,j4=j3+1;j4<=r;j1+=4,j2+=4,j3+=4,j4+=4){\n            b[a[j1]>>3]|=1<<(a[j1]&7);\n            b[a[j2]>>3]|=1<<(a[j2]&7);\n            b[a[j3]>>3]|=1<<(a[j3]&7);\n            b[a[j4]>>3]|=1<<(a[j4]&7);\n        } \n        for(j=j1;j<=r;++j)b[a[j]>>3]|=1<<(a[j]&7);\n        x=l;\n        if(o&1){\n            y=(z<<3)+7;\n            for(j=z;j>=0;--j){\n                while(!b[j] && j) --j,y-=8;\n                b[j]&128?a[x++]=y--:y--;\n                b[j]&64?a[x++]=y--:y--;\n                b[j]&32?a[x++]=y--:y--;\n                b[j]&16?a[x++]=y--:y--;\n                b[j]&8?a[x++]=y--:y--;\n                b[j]&4?a[x++]=y--:y--;\n                b[j]&2?a[x++]=y--:y--;\n                b[j]&1?a[x++]=y--:y--;\n            }\n        }else{    \n            y=0;\n            for(j=0;j<=z;++j){\n                while(!b[j] && j<z)++j,y+=8;\n                b[j]&1?a[x++]=y++:y++;\n                b[j]&2?a[x++]=y++:y++;\n                b[j]&4?a[x++]=y++:y++;\n                b[j]&8?a[x++]=y++:y++;\n                b[j]&16?a[x++]=y++:y++;\n                b[j]&32?a[x++]=y++:y++;\n                b[j]&64?a[x++]=y++:y++;\n                b[j]&128?a[x++]=y++:y++;\n            }\n        }\n    }\n    read(m);\n    printf(\"%d\\n\",a[m]);\n    return 0;\n}\n```",
        "postTime": 1501045446,
        "uid": 23750,
        "name": "kimi0503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016]\u6392\u5e8f\u3011"
    },
    {
        "content": "\u9996\u5148\u5148\u58f0\u660e\u4e00\u4e0b\uff0c\u65b9\u6cd5\u4e0eDrench\u5927\u4f6c\u7684\u5dee\u4e0d\u591a\uff0c\u6b64\u7bc7\u9898\u89e3\u586b\u4e86\u4e00\u4e9b\u89e3\u91ca\uff0c\u8ba9\u4ee3\u7801\u66f4\u5bb9\u6613\u7406\u89e3\u3002\uff08P.S.\uff1a\u6211\u7684\u4ee3\u7801\u4e0d\u77e5\u9053\u4e3a\u5565\u5728\u4e3b\u7ad9\u4f1aT\u7b2c10\u4e2a\u70b9\uff0c\u5728\u5927\u725b\u5206\u7ad9\u4ea4\u8fc7\u4e86\uff0c\u80fd\u6709\u5927\u4f6c\u60f3\u5230\u4e00\u4e9b\u4f18\u5316\u7684\u65b9\u6cd5\u5f53\u7136\u662f\u66f4\u597d\uff0c\u8fd9\u9898\u89e3\u4e3b\u8981\u662f\u4ecb\u7ecd\u601d\u8def\u548c\u4ee3\u7801\u542b\u4e49\uff09\n\n###SOLUTION\uff1a\n\nFirst\uff1a\u4e3b\u4f53\u601d\u8def\uff1a\u4e8c\u5206\u7b54\u6848+\u7ebf\u6bb5\u6811\u64cd\u4f5c\n\nSecond\uff1a\u4ee3\u7801\u5b8c\u6210\u601d\u8def\n\n1.\u8bfb\u5165\uff0c\u5b58\u50a8\u6570\u503c\n\n2.\u4e8c\u5206\u7b2cQ\u4e2a\u503c\u7684\u7b54\u6848\n\n3.\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\n\n1)\u5efa\u6811   2)\u8fdb\u884cm\u6b21\u64cd\u4f5c  3)\u627e\u5230\u7b2cq\u4e2a\u70b9\n\n4.\u4e8c\u5206left \u548c right\u7684\u66f4\u6539\n\nThird\uff1a\u7ebf\u6bb5\u6811\u64cd\u4f5c\u65b9\u6cd5\u53ca\u80fd\u5b9e\u73b0\u7684\u539f\u56e0\n\n1.\u4e8c\u5206\u51faq\uff0c\u5efa\u6811\u65f6\u5927\u4e8e\u7b49\u4e8eq\u53f6\u5b50\u8282\u70b9\u4e3a1\uff0c\u53cd\u4e4b\u4e3a0\uff0c\u7136\u540e\u5229\u7528\u7ebf\u6bb5\u6811\u5904\u7406\u7684sum\uff08\u548c\uff09\u3002\n\n2.\u5bf9\u4e8e\u7b2ci\u6b65\u4fee\u6539\u64cd\u4f5c\u4e2d\uff0c\u533a\u95f4l-r\u4e2d\u7684\u548c\u53ca\u5927\u4e8e\u7b49\u4e8eq\u7684\u4e2a\u6570(1)\uff0cr-l+1\u4e3a\u533a\u95f4\u6570\u7684\u4e2a\u6570\uff0c\u6c42\u5dee\u5c31\u662f\u5c0f\u4e8eq\u7684\u4e2a\u6570(0)\u3002\n\n3.\u6c42\u51fal-r\u533a\u95f4num0\u4e0enum1\u4e2a\u6570\u540e\uff0c\u82e5\u4ece\u5c0f\u5230\u5927\uff0c\u5219\u5c06l-(l+num0-1)\u8d4b\u503c\u4e3a0\uff0c(l+num0-r)\u8d4b\u503c\u4e3a1\n\n\u53cd\u4e4b\uff0c\u5219\u5c06l-(l+num1-1)\u8d4b\u503c\u4e3a1\uff0c(l+num1-r)\u8d4b\u503c\u4e3a0\n\n4.\u4e0a\u8ff0\u6b65\u9aa4\u91cd\u590dm\u6b21\u540e\uff0c\u5c31\u53ef\u4ee5\u53bb\u67e5\u8be2\u7b2cQ\u4e2a\u6570\uff0c\u5982\u679c\u4e3a1\u8bf4\u660e\u4e8c\u5206\u51fa\u6765\u7684q\u5927\u4e8e\u7b49\u4e8e\u7b54\u6848\uff0c\u5982\u679c\u4e3a0\u8bf4\u660e\u4e8c\u5206\u51fa\u6765\u7684q\u5c0f\u4e8eq\n\n\u4e0b\u9762\u5c31\u662f\u6211\u7684\u4ee3\u7801\u4e86\uff0c\u4ee3\u7801\u4e2d\u6709\u4e00\u4e9b\u6ce8\u91ca\uff1a\n\n```cpp\n//It is coded by Ning_Mew on 10.17\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint read(){//\u8bfb\u5165\u4f18\u5316\n    int x=0;char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x=(x*10)+ch-'0',ch=getchar();\n    return x;\n}\nint n,m,q,top=0,tail,mid;\nstruct Operation{\n    int type,l,r;\n}ope[100000+10];//\u50a8\u5b58\u66f4\u6539\u64cd\u4f5c\nstruct Node{\n    int l,r,sum,lazy;\n}node[400000+10];//\u7ebf\u6bb5\u6811\u50a8\u5b58\nint a[100000+10];//\u50a8\u5b58\u6bcf\u4e2a\u503c\nvoid build(int num,int nl,int nr){//\u5efa\u6811\n    if(nl==nr){\n        node[num].l=nl; node[num].r=nr;\n        if(a[nl]>=mid)node[num].sum=1;\n        else node[num].sum=0;//\u5bf9\u5e94Third\u4e2d\u7684\u7b2c\u4e00\u70b9\n        return;\n    }\n    int nmid=(nl+nr)/2;\n    build(num*2,nl,nmid);\n    build(num*2+1,nmid+1,nr);\n    node[num].l=nl; node[num].r=nr;\n    node[num].sum=(node[num*2].sum+node[num*2+1].sum);\n    return;\n}\nvoid pushdown(int num,int nl,int nr){//\u4e0b\u653elazy\u64cd\u4f5c\n    if(node[num].lazy!=-1){\n        node[num*2].lazy=node[num].lazy;\n        node[num*2+1].lazy=node[num].lazy;//\u56e0\u4e3alazy\u662f\u5c06\u8fd9\u4e2a\u8282\u70b9\u4e2d\u7684\u6570\u5168\u90e8\u66f4\u6539\u4e3a0\u62161\uff0c\u6240\u4ee5lazy\u662f\u76f4\u63a5\u88ab\u8986\u76d6\u800c\u4e0d\u662f+=\n        node[num*2].sum=node[num].lazy*(node[num*2].r-node[num*2].l+1);\n        node[num*2+1].sum=node[num].lazy*(node[num*2+1].r-node[num*2+1].l+1);//\u540c\u6837\u56e0\u4e3a\u662f\u5168\u88ab\u66f4\u6539\uff0c\u6240\u4ee5\u76f4\u63a5\u8986\u76d6\n        node[num].lazy=-1;\n    }\n    return;\n}\nint count(int num,int nl,int nr,int ql,int qr){//\u6c42\u533a\u95f4\u548c\n    if(qr<nl||nr<ql)return 0;\n    if(ql<=nl&&nr<=qr){\n        return node[num].sum;\n    }\n    pushdown(num,nl,nr);\n    int nmid=(nl+nr)/2;\n    return count(num*2,nl,nmid,ql,qr)+count(num*2+1,nmid+1,nr,ql,qr);\n}\nvoid change(int num,int nl,int nr,int ql,int qr,int add){//\u533a\u95f4\u66f4\u6539\n    if(qr<nl||nr<ql||ql>qr)return;\n    if(ql<=nl&&nr<=qr){\n        node[num].sum=add*(node[num].r-node[num].l+1);//\u88ab\u9632\u6b62\u4e86lazy\u7684\u70b9\u672c\u8eab\u5e94\u5df2\u88ab\u66f4\u6539\uff0c\u4e0b\u6b21\u5c31\u53ea\u7528\u4e0b\u653elazy\u4e86\n        node[num].lazy=add;\n        return;\n    }\n    pushdown(num,nl,nr);\n    int nmid=(nl+nr)/2;\n    change(num*2,nl,nmid,ql,qr,add);\n    change(num*2+1,nmid+1,nr,ql,qr,add);\n    node[num].sum=node[num*2].sum+node[num*2+1].sum;//\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\u5df2\u66f4\u6539\u6240\u4ee5\u66f4\u65b0\u6b64\u8282\u70b9sum\u503c\n    return;\n}\nbool judge(){//\u68c0\u67e5q\u503c\n    build(1,1,n);\n    for(int i=1;i<=4*n+1;i++)node[i].lazy=-1;\n    for(int i=1;i<=m;i++){\n        int ll=ope[i].l,rr=ope[i].r;\n        int num1=count(1,1,n,ll,rr),num0;\n            num0=rr-ll+1-num1;\n        if(ope[i].type==0){//\u5bf9\u5e94Third 3\u70b9\n            change(1,1,n,ll,ll+num0-1,0);\n            change(1,1,n,ll+num0,rr,1);\n        }\n        else{\n            change(1,1,n,ll,ll+num1-1,1);\n            change(1,1,n,ll+num1,rr,0);\n        }\n    }\n    if(count(1,1,n,q,q))return true;//1-->true\n    return false;//0-->false\n}\nint main(){\n    n=read();m=read();\n    for(int i=1;i<=n;i++){\n        a[i]=read();\n    }\n    for(int i=1;i<=m;i++){\n        ope[i].type=read();\n        ope[i].l=read();\n        ope[i].r=read();\n    }\n    q=read();\n    top=0;tail=n+1;\n    do{\n        mid=(top+tail)/2;\n        if(judge()){top=mid;}\n        else {tail=mid;}\n    }while(top<tail-1);\n    cout<<top;    \n    return 0;\n}\n```\n\n\u9898\u89e3\u5c31\u5199\u5230\u8fd9\u5566\uff0c\u597d\u597d\u7406\u89e3\u8fd8\u662f\u4e0d\u96be\u7684\uff5e\n",
        "postTime": 1508251740,
        "uid": 45207,
        "name": "Ning_Mew",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2824 \u3010[HEOI2016]\u6392\u5e8f\u3011"
    }
]