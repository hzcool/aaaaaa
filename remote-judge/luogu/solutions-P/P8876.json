[
    {
        "content": "### \u9898\u89e3\r\n\r\n\u641c\u7d22\u9898\u3002\r\n\r\n\u6ce8\u610f\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\uff1a**\u6c34\u6d41\u4e4b\u95f4\u53ef\u89c6\u4e3a\u4e92\u4e0d\u5e72\u6270\u7684**\u3002\u867d\u7136\u786e\u5b9e\u6709\u5f3a\u5ea6\u66f4\u5927\u7684\u6c34\u6d41\u53ef\u4ee5\u8986\u76d6\u5f3a\u5ea6\u66f4\u5c0f\u7684\u6c34\u6d41\u8fd9\u6837\u7684\u8bbe\u5b9a\uff0c\u4f46\u5bb9\u6613\u53d1\u73b0\u5f3a\u5ea6\u66f4\u5927\u7684\u6c34\u6d41\uff0c\u53ef\u4ee5\u6d41\u5230\u7684\u7a7a\u95f4\uff0c\u5305\u542b\u4e86\u5f3a\u5ea6\u66f4\u5c0f\u7684\u6c34\u6d41\u3002\r\n\r\n\uff08\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff09\r\n\r\n\u4e8e\u662f\u53ef\u4ee5\u8003\u8651\uff0c\u4ece\u9ad8\u5230\u4f4e\u8ba1\u7b97\u6bcf\u4e2a\u9ad8\u5ea6\u6709\u54ea\u4e9b\u4f4d\u7f6e\u662f\u6709\u6c34\u6d41\u7684\u3002\u4e0b\u9762\u5b9a\u4e49\u7ed3\u6784\u4f53 $\\text{Pos2}$ \u7528\u6765\u5b58\u50a8\u4e8c\u7ef4\u5750\u6807\uff0c\u7ed3\u6784\u4f53 $\\text{Pos3}$ \u7528\u6765\u5b58\u50a8\u4e09\u7ef4\u5750\u6807\u3002\r\n\r\n- \u5148\u5f00\u4e00\u4e2a $\\text{map}\\lang \\text{Pos3},\\text{bool}\\rang$ \u5b58\u4e00\u4e0b\u6574\u4e2a\u7a7a\u95f4\u91cc\u6709\u54ea\u4e9b\u4f4d\u7f6e\u662f\u6709\u5b9e\u4f53\u65b9\u5757\u7684\uff0c\u8bb0\u4f5c $B$\u3002\r\n- \u518d\u5f00\u4e00\u4e2a $\\text{map}\\lang \\text{Pos2},\\text{bool}\\rang$ \u5b58\u4e00\u4e0b\u5f53\u524d\u9ad8\u5ea6\u6709\u54ea\u4e9b\u65b9\u5757\u662f\u6709\u6c34\u65b9\u5757\u7684\uff0c\u8bb0\u4f5c $W$\u3002\r\n\r\n\u5bf9\u4e8e\u8f93\u5165\u8fdb\u6765\u7684\u6bcf\u4e2a\u5b9e\u4f53\u65b9\u5757 $(x,y,h)$\uff0c\u90fd\u585e\u5230 $B$ \u91cc\u3002$B(x,y,h)\\gets\\text{true}$\uff1b\u5bf9\u4e8e\u8d77\u59cb\u6c34\u65b9\u5757\u7684\u4f4d\u7f6e $(x_0,y_0)$\uff0c\u585e\u5230 $W$ \u91cc\uff0c$W(x_0,y_0)\\gets\\text{true}$\u3002\r\n\r\n\u9996\u5148\u5c06\u6240\u6709\u5b9e\u4f53\u65b9\u5757\u6309\u7167 $h$ \u503c\u7684\u5927\u5c0f\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u679a\u4e3e\u6bcf\u4e2a\u9ad8\u5ea6 $h$\u3002\u8bb0\u9ad8\u5ea6\u4e3a $h$ \u7684\u65b9\u5757\u7ec4\u6210\u7684\u96c6\u5408\u4e3a $B_h$\uff0c\u90a3\u4e48 $W$ \u4e2d\u7684\u6c34\u67f1\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u6d41\u5230\u4e86 $B_h$ \u91cc\u7684\u67d0\u4e9b\u65b9\u5757\u4e0a\uff0c\u53d1\u751f\u4e86\u6269\u6563\u3002**\u4ece $\\bm {B_h}$ \u51fa\u53d1**\uff0c\u7b97\u51fa\u8fd9\u4e9b\u4f1a\u53d1\u751f\u6269\u6563\u7684\u4e8c\u7ef4\u5750\u6807\u4f4d\u7f6e\uff0c\u653e\u5230\u961f\u5217 $P$ \u91cc\u3002\u5f53\u7136\uff0c\u5982\u679c $(x,y)$ \u4f4d\u7f6e\u4f1a\u53d1\u751f\u6269\u6563\uff0c\u90a3\u5c31\u4ee3\u8868\u6269\u6563\u5b8c\u540e $(x,y,h)$ \u4f4d\u7f6e\u80af\u5b9a\u6ca1\u6709\u6c34\u65b9\u5757\uff0c\u4e8e\u662f $W$ \u91cc\u8981\u5220\u9664 $(x,y)$ \u4f4d\u7f6e\u3002\r\n\r\n\u4e3a\u4ec0\u4e48\u4e0d\u679a\u4e3e $W$ \u5185\u7684\u5750\u6807\u6765\u786e\u5b9a\u6709\u54ea\u4e9b\u4f4d\u7f6e\u4f1a\u53d1\u751f\u6269\u6563\uff1f\u56e0\u4e3a\u8fd9\u4e48\u505a\u590d\u6742\u5ea6\u662f $\\mathcal O(|W|\\log |W|)$ \u7684\uff0c\u800c\u679a\u4e3e $B_h$ \u5185\u7684\u5750\u6807\u590d\u6742\u5ea6\u662f $\\mathcal O(|B_h|\\log |B|)$ \u7684\u3002\u524d\u8005\u5bb9\u6613\u6784\u9020\u51fa\u4e00\u4e2a $|W|$ \u8f83\u5927\uff0c\u5e76\u4e14\u4e0d\u540c\u7684\u9ad8\u5ea6\u591f\u591a\u7684\u6570\u636e\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u5361\u5230 $\\mathcal O(n^2)$\uff0c\u662f\u4e0d\u53ef\u4ee5\u7684\u3002\u540e\u8005\u5219\u662f\u6b63\u786e\u7684\u590d\u6742\u5ea6\u3002\r\n\r\n\u73b0\u5728\u6211\u4eec\u8981\u5bf9 $P$ \u91cc\u7684\u6c34\u6d41\u8fdb\u884c\u6269\u6563\u4e86\u3002\u4e3a\u4e86\u6269\u6563\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u7b2c $h$ \u5c42\u6bcf\u4e2a\u70b9\u5230\u8fbe\u76ee\u6807\u4f4d\u7f6e\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u5bf9\u4e8e $P$ \u91cc\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u7b97\u4e00\u6b21\u8fd9\u4e2a\u8ddd\u79bb\uff0c\u590d\u6742\u5ea6\u8fbe\u5230\u4e86 $\\mathcal O(|P|\\log|P|\\cdot |B_h|\\log|B|)$\uff0c\u8fd9\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\r\n\r\n\u4f46\u662f\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e00\u5c42\u5b9e\u9645\u6709\u7528\u7684\u76ee\u6807\u4f4d\u7f6e\uff08\u7d27\u6328\u5728\u4e00\u4e2a\u5b9e\u4f53\u65b9\u5757\u65c1\u8fb9\uff09\u662f\u4e0d\u591a\u7684\uff0c\u4e2a\u6570\u662f $\\mathcal O(|B_h|)$ \u7ea7\u522b\u3002\u8003\u8651\u627e\u5230\u8fd9\u4e9b\u6709\u7528\u7684\u76ee\u6807\u4f4d\u7f6e\uff0c\u653e\u5230\u961f\u5217 $Q$ \u91cc\u3002\u600e\u4e48\u627e\u76ee\u6807\u4f4d\u7f6e\u5462\uff1f\u8fd8\u662f\u8981\u679a\u4e3e $B_h$ \u5185\u7684\u5750\u6807\uff0c\u68c0\u67e5\u4e00\u4e0b\u5b83\u56db\u5468\u662f\u4e0d\u662f\u6ca1\u6709\u5b9e\u4f53\u65b9\u5757\u3002\u5982\u679c\u6ca1\u6709\u5b9e\u4f53\u65b9\u5757\u90a3\u5c31\u4e22 $Q$ \u91cc\u3002\u53ef\u4ee5\u53bb\u91cd\uff0c\u4e0d\u53bb\u91cd\u5e94\u8be5\u4e5f\u6ca1\u5565\u95ee\u9898\u3002\u5982\u679c\u60f3\u8981\u53bb\u91cd\uff0c\u90a3\u8fd8\u8981\u5f00\u4e00\u4e2a $\\text{map}\\lang \\text{Pos2},\\text{bool}\\rang$\uff08\u8bb0\u4e3a $V$\uff09\u5b58\u4e00\u4e0b\u6709\u90a3\u4e9b\u4f4d\u7f6e\u5df2\u7ecf\u653e\u8fdb $Q$ \u91cc\u4e86\u3002\r\n\r\n\u5f53 $Q$ \u521d\u59cb\u503c\u6c42\u597d\u540e\uff0c\u5c31\u53ef\u4ee5\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u8ba1\u7b97\u51fa $B_h$ \u5185\u6bcf\u4e2a\u70b9\u5230\u8fbe\u76ee\u6807\u7ed3\u70b9\u7684\u6700\u77ed\u957f\u5ea6\u3002\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a\u4e86 $\\mathcal O(|B_h|\\log |B|)$\u3002\r\n\r\n- \u5148\u8981\u5f00\u4e00\u4e2a $\\text{map}\\lang \\text{Pos2},\\text{int}\\rang$ \u5b58\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u5230\u8fbe\u76ee\u6807\u4f4d\u7f6e\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8bb0\u4e3a $D$\u3002\r\n- \u8fd8\u8981\u5f00\u4e00\u4e2a $\\text{map}\\lang \\text{Pos2},\\text{int}\\rang$ \u5b58\u4e00\u4e0b $P$ \u91cc\u9762\u6bcf\u4e2a\u4f4d\u7f6e\u5b83\u7684\u6c34\u65b9\u5757\u7684\u5f3a\u5ea6\uff0c\u8bb0\u4e3a $K$\u3002\r\n\r\n\u63a5\u7740\u4ece $P$ \u91cc\u7684\u4f4d\u7f6e\u5f00\u59cb\u8fdb\u884c\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u4ece $(x,y)$ \u4f4d\u7f6e\u53ef\u4ee5\u5230\u8fbe $(x',y')$ \u4f4d\u7f6e\uff0c\u5f53\u4e14\u4ec5\u5f53 $(x',y',h+1)$ \u4f4d\u7f6e\u6ca1\u6709\u5b9e\u4f53\u65b9\u5757\uff0c\u5e76\u4e14 $D(x',y')=D(x,y)-1$\uff0c\u5e76\u4e14 $K(x,y)>1$\u3002\r\n\r\n\u5f53\u7136\uff0c\u5982\u679c $(x,y)$ \u4f4d\u7f6e\u5df2\u7ecf\u662f\u76ee\u6807\u4f4d\u7f6e\uff0c\u90a3\u5c31\u4ee4 $W(x,y)\\gets \\text{true}$\u3002\r\n\r\n\u6700\u540e\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u3002\u4e0a\u9762\u51fa\u73b0\u7684\u4e09\u4e2a\u8fc7\u7a0b\u65f6\u95f4\u590d\u6742\u5ea6\u5168\u90e8\u90fd\u662f $\\mathcal O(|B_h|\\log |B|)$\uff0c\u76f4\u63a5\u6c42\u548c\uff0c\u5f97\u5230\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n\\log n)$\u3002\r\n\r\n### \u53c2\u8003\u4ee3\u7801\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define up(l,r,i) for(int i=l,END##i=r;i<=END##i;++i)\r\n#define dn(r,l,i) for(int i=r,END##i=l;i>=END##i;--i)\r\nusing namespace std;\r\ntypedef long long i64;\r\nconst int INF =2147483647;\r\nstruct Pos2{\r\n    int x, y;\r\n    Pos2(int _x = 0, int _y = 0):x(_x), y(_y){}\r\n    const bool operator < (const Pos2 &t) const {\r\n        if(x != t.x) return x < t.x;\r\n        return y < t.y;\r\n    }\r\n    const bool operator > (const Pos2 &t) const {\r\n        if(x != t.x) return x > t.x;\r\n        return y > t.y;\r\n    }\r\n    const bool operator ==(const Pos2 &t) const {\r\n        return x == t.x && y == t.y;\r\n    }\r\n};\r\nstruct Pos3{\r\n    int x, y, z;\r\n    Pos3(int _x = 0, int _y = 0, int _z = 0):\r\n        x(_x), y(_y), z(_z){}\r\n    const bool operator < (const Pos3 &t) const {\r\n        if(x != t.x) return x < t.x;\r\n        if(y != t.y) return y < t.y;\r\n        return z < t.z;\r\n    }\r\n    const bool operator > (const Pos3 &t) const {\r\n        if(x != t.x) return x > t.x;\r\n        if(y != t.y) return y > t.y;\r\n        return z > t.z;\r\n    }\r\n    const bool operator ==(const Pos3 &t) const {\r\n        return x == t.x && y == t.y && z == t.z;\r\n    }\r\n};\r\nconst int BASE = 13331;\r\nstruct Hash{\r\n    unsigned operator ()(const Pos2 t) const{\r\n        return t.x * BASE + t.y;\r\n    }\r\n    unsigned operator ()(const Pos3 t) const{\r\n        return (t.x * BASE + t.y) * BASE + t.z;\r\n    }\r\n};\r\nunordered_map<Pos3, bool, Hash> B;   // \u5b58 (x, y, z) \u662f\u5426\u6709\u65b9\u5757\r\nunordered_map<Pos2, bool, Hash> V;   // \u5b58 (x, y, h + 1) \u6709\u6ca1\u6709\u4f7f\u7528\u8fc7\r\nunordered_map<Pos2, int , Hash> D;   // \u5b58 (x, y) \u7684\u6700\u77ed\u8def\u7a0b\r\nunordered_map<Pos2, bool, Hash> W;   // \u5b58 (x, y, h + 1) \u4f4d\u7f6e\u6709\u6ca1\u6709\u6c34\u65b9\u5757\r\nunordered_map<Pos2, int , Hash> K;   // \u5b58 (x, y, h + 1) \u4f4d\u7f6e\u6c34\u65b9\u5757\u7684\u5f3a\u5ea6\r\nconst int DIR[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\r\nconst int MAXN = 2e5 + 3;\r\nint n, p, X[MAXN], Y[MAXN], Z[MAXN], I[MAXN];\r\nint qread(){\r\n    int w = 1, c, ret;\r\n    while((c = getchar()) >  '9' || c <  '0') w = (c == '-' ? -1 : 1); ret = c - '0';\r\n    while((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + c - '0';\r\n    return ret * w;\r\n}\r\nbool cmp(int a, int b){ return Z[a] > Z[b]; }\r\nint _x0, _y0;\r\nint main(){\r\n    n = qread(), p = qread(), _x0 = qread(), _y0 = qread();\r\n    W[Pos2(_x0, _y0)] = true;\r\n    up(1, n, i){\r\n        X[i] = qread(), Y[i] = qread(), Z[i] = qread(), I[i] = i;\r\n        B[Pos3(X[i], Y[i], Z[i])] = true;\r\n    }\r\n    sort(I + 1, I + 1 + n, cmp);\r\n    up(1, n, i){\r\n        int h = Z[I[i]], j;\r\n        queue <Pos2> P, Q;\r\n        for(j = i;j <= n && Z[I[j]] == h;++ j){\r\n            int o = I[j], x = X[o], y = Y[o];\r\n            Pos2 u(x, y);\r\n            if(W.count(u))\r\n                P.push(u), K[u] = p, W.erase(u);\r\n            up(0, 3, k){\r\n                int nx = x + DIR[k][0];\r\n                int ny = y + DIR[k][1];\r\n                Pos2 v(nx, ny);\r\n                if(!V.count(v) && !B.count(Pos3(nx, ny, h))\r\n                    && !B.count(Pos3(nx, ny, h + 1)))\r\n                    V[v] = true, D[v] = 0, Q.push(v);\r\n            }\r\n        }\r\n        while(!Q.empty()){\r\n            Pos2 u = Q.front(); Q.pop(); int x = u.x, y = u.y;\r\n            up(0, 3, k){\r\n                int nx = x + DIR[k][0];\r\n                int ny = y + DIR[k][1];\r\n                Pos2 v(nx, ny);\r\n                if(!D.count(v) && B.count(Pos3(nx, ny, h))\r\n                    && !B.count(Pos3(nx, ny, h + 1)))\r\n                    D[v] = D[u] + 1, Q.push(v);\r\n            }\r\n        }\r\n        while(!P.empty()){\r\n            Pos2 u = P.front(); P.pop(); int x = u.x, y = u.y;\r\n            int d = D[u], s = K[u];\r\n            if(!B.count(Pos3{x, y, h})){\r\n                W[u] = true; continue;\r\n            }\r\n            if(s == 1) continue;\r\n            up(0, 3, k){\r\n                int nx = x + DIR[k][0];\r\n                int ny = y + DIR[k][1];\r\n                Pos2 v(nx, ny);\r\n                if( D[v] == d - 1)\r\n                if(!K.count(v) && !B.count(Pos3(nx, ny, h + 1)))\r\n                    K[v] = s - 1, P.push(v);\r\n            }\r\n        }\r\n        i = j - 1, D.clear(), K.clear(), V.clear();\r\n    }\r\n    printf(\"%u\\n\", W.size());\r\n    return 0;\r\n}\r\n```\r\n\r\n\u53c2\u8003\u4ee3\u7801 $2$\uff1a\r\n\r\n```java\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public static class Vec2d {\r\n        public int x, y;\r\n\r\n        public Vec2d(int x, int y) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return Arrays.hashCode(new int[] {x, y});\r\n        }\r\n\r\n        public boolean equals(Vec2d vec2d) {\r\n            return this.x == vec2d.x && this.y == vec2d.y;\r\n        }\r\n        @Override\r\n        public boolean equals(Object vec2d) {\r\n            if (!(vec2d instanceof Vec2d))\r\n                return false;\r\n            return this.x == ((Vec2d) vec2d).x && this.y == ((Vec2d) vec2d).y;\r\n        }\r\n    }\r\n\r\n    public static class Vec3d {\r\n        public int x, y, z;\r\n\r\n        public Vec3d(int x, int y, int z) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.z = z;\r\n        }\r\n        @Override\r\n        public int hashCode() {\r\n            return Arrays.hashCode(new int[] {x, y, z});\r\n        }\r\n        public boolean equals(Vec3d vec2d) {\r\n            return this.x == vec2d.x && this.y == vec2d.y && this.z == vec2d.z;\r\n        }\r\n        @Override\r\n        public boolean equals(Object vec2d) {\r\n            if (!(vec2d instanceof Vec3d))\r\n                return false;\r\n            return this.x == ((Vec3d) vec2d).x && this.y == ((Vec3d) vec2d).y && this.z == ((Vec3d) vec2d).z;\r\n        }\r\n    }\r\n\r\n    public static class Scanner {\r\n        public BufferedReader in;\r\n        public StringTokenizer tok;\r\n\r\n        public String next() {\r\n            hasNext();\r\n            return tok.nextToken();\r\n        }\r\n\r\n        public String nextLine() {\r\n            try {\r\n                return in.readLine();\r\n            } catch (Exception e) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        public long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        public int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        public PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\r\n\r\n        public boolean hasNext() {\r\n            while (tok == null || !tok.hasMoreTokens()) try {\r\n                tok = new StringTokenizer(in.readLine());\r\n            } catch (Exception e) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        public Scanner(InputStream inputStream) {\r\n            in = new BufferedReader(new InputStreamReader(inputStream));\r\n        }\r\n    }\r\n\r\n    public static Map<Vec3d, Boolean> isblock = new HashMap<>();\r\n    public static Map<Vec2d, Boolean> isused = new HashMap<>();\r\n    public static Map<Vec2d, Integer> dist = new HashMap<>();\r\n    public static Map<Vec2d, Boolean> iswater = new HashMap<>();\r\n    public static Map<Vec2d, Integer> strwater = new HashMap<>();\r\n\r\n\r\n    public static final int[] dx = {1, -1, 0, 0}, dy = {0, 0, 1, -1};\r\n\r\n    public static int n, k, _x0, _y0;\r\n    public static int[] x = new int[100050], y = new int[100050], z = new int[100050];\r\n    public static List<Integer> var_id = new ArrayList<>();\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        n = scanner.nextInt();\r\n        k = scanner.nextInt();\r\n        _x0 = scanner.nextInt();\r\n        _y0 = scanner.nextInt();\r\n        iswater.put(new Vec2d(_x0, _y0), true);\r\n        for (int i = 1; i <= n; i++) {\r\n            x[i] = scanner.nextInt();\r\n            y[i] = scanner.nextInt();\r\n            z[i] = scanner.nextInt();\r\n            isblock.put(new Vec3d(x[i], y[i], z[i]), true);\r\n            var_id.add(i);\r\n        }\r\n        var_id.sort((x, y) -> z[y] - z[x]);\r\n        List<Integer> id = new ArrayList<>();\r\n        id.add(0);\r\n        for (int i = 0; i < n; ++i)\r\n            id.add(var_id.get(i));\r\n        for (int i = 0; i < 5; ++i)\r\n            id.add(0);\r\n        for (int i = 1; i <= n; i++) {\r\n            int height = z[id.get(i)];\r\n            Queue<Vec2d> p = new LinkedList<>(), q = new LinkedList<>();\r\n            // spread at the same height\r\n            for (int nid = id.get(i); i <= n && z[nid] == height; ) {\r\n                int nx = x[nid], ny = y[nid];\r\n                Vec2d u = new Vec2d(nx, ny);\r\n                if (iswater.getOrDefault(u, false)) {\r\n                    iswater.put(u, false);\r\n                    p.add(u);\r\n                    strwater.put(u, k);\r\n                }\r\n                for (int j = 0; j < 4; j++) {\r\n                    int nx1 = nx + dx[j], ny1 = ny + dy[j];\r\n                    Vec2d v = new Vec2d(nx1, ny1);\r\n                    Vec3d v1 = new Vec3d(nx1, ny1, height);\r\n                    Vec3d v2 = new Vec3d(nx1, ny1, height + 1);\r\n                    if (!isused.getOrDefault(v, false) && !isblock.getOrDefault(v1, false) && !isblock.getOrDefault(v2, false)) {\r\n                        isused.put(v, true);\r\n                        dist.put(v, 0);\r\n                        q.add(v);\r\n                    }\r\n                }\r\n                i++;\r\n                nid = id.get(i);\r\n            }\r\n            i--;\r\n            // spread water in Q\r\n            while (!q.isEmpty()) {\r\n                Vec2d var1 = q.element();\r\n                q.remove();\r\n                int x = var1.x, y = var1.y;\r\n                Vec2d u = new Vec2d(x, y);\r\n                for (int j = 0; j < 4; j++) {\r\n                    int nx = x + dx[j], ny = y + dy[j];\r\n                    Vec2d v = new Vec2d(nx, ny);\r\n                    Vec3d v1 = new Vec3d(nx, ny, height);\r\n                    Vec3d v2 = new Vec3d(nx, ny, height + 1);\r\n                    if (dist.getOrDefault(v, 0) == 0 && isblock.getOrDefault(v1, false) && !isblock.getOrDefault(v2, false)) {\r\n                        dist.put(v, dist.get(u) + 1);\r\n                        q.add(v);\r\n                    }\r\n                }\r\n            }\r\n            //spread water in P\r\n            while (!p.isEmpty()) {\r\n                Vec2d var1 = p.element();\r\n                p.remove();\r\n                int x = var1.x, y = var1.y;\r\n                Vec2d u = new Vec2d(x, y);\r\n                Vec3d u1 = new Vec3d(x, y, height);\r\n                int d = dist.getOrDefault(u, 0), s = strwater.getOrDefault(u, 0);\r\n                if (!isblock.getOrDefault(u1, false)) {\r\n                    iswater.put(u, true);\r\n                    continue;\r\n                }\r\n                if (s == 1)\r\n                    continue;\r\n                for (int j = 0; j < 4; j++) {\r\n                    int nx = x + dx[j], ny = y + dy[j];\r\n                    Vec2d v = new Vec2d(nx, ny);\r\n                    Vec3d v1 = new Vec3d(nx, ny, height + 1);\r\n                    if (dist.getOrDefault(v, 0) == d - 1 && strwater.getOrDefault(v, 0) == 0 && !isblock.getOrDefault(v1, false)) {\r\n                        strwater.put(v, s - 1);\r\n                        p.add(v);\r\n                    }\r\n                }\r\n            }\r\n            isused.clear();\r\n            dist.clear();\r\n            strwater.clear();\r\n        }\r\n        int cnt = 0;\r\n        for (boolean i : iswater.values()) {\r\n            cnt += i ? 1 : 0;\r\n        }\r\n        System.out.println(cnt);\r\n    }\r\n}\r\n```",
        "postTime": 1669510738,
        "uid": 68344,
        "name": "\u79bb\u6563\u5c0f\u6ce2\u53d8\u6362\u00b0",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P8876 \u3010[\u4f20\u667a\u676f #5 \u521d\u8d5b] H-\u4e8c\u4eba\u7684\u4e16\u754c\u3011"
    }
]