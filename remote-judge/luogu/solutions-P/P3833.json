[
    {
        "content": "\u524d\u7f6e\u9898\u76ee\uff1aP3384\r\n\r\n\u8fd9\u9053\u9898\u76ee\u662f\u4e00\u4e2a\u6a21\u677f\u9898\uff08\u7701\u9009\u8003\u6a21\u677f\uff1f\uff09\r\n\r\n\u4f5c\u4e3a\u4e00\u4e2a STL \u7684\u5fe0\u5b9e\u62e5\u62a4\u8005\uff0c\u600e\u4e48\u80fd\u53ea\u6709\u6570\u7ec4\u5199\u94fe\u5f0f\u524d\u5411\u661f\u7684\u9898\u89e3\u5462\uff1f\r\n\r\n\u8fd9\u9053\u9898\u7684\u6570\u636e\u8fd8\u662f\u6bd4\u8f83\u6c34\u7684\uff0c\u56e0\u6b64\u6709\u4e24\u79cd\u505a\u6cd5\u3002\r\n\r\n\u7b2c\u4e00\u79cd\u505a\u6cd5\uff1a\u500d\u589e\u8df3 LCA\uff0c\u7136\u540e\u7528\u6811\u72b6\u6570\u7ec4\u6216\u8005\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u5b50\u6811\u548c\u94fe\u5c31\u53ef\u4ee5\u4e86\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\uff0c\u5e38\u6570\u8f83\u5927\r\n\r\n\uff08\u5176\u5b9e\u6570\u636e\u51fa\u597d\u4e00\u70b9\u8fd9\u4e2a\u5c31\u771f\u7684\u4e0d\u884c\u4e86\uff0c\u4e0d\u4fe1\u7528\u8fd9\u79cd\u65b9\u6cd5\u505a P3384\uff09\r\n\r\n\u7b2c\u4e8c\u79cd\u505a\u6cd5\uff1a\u6811\u94fe\u5256\u5206\r\n\r\n\u5728\u8fd9\u91cc\u987a\u4fbf\u8bf4\u4e00\u4e0b\u6811\u94fe\u5256\u5206\uff1a\r\n\r\n\u6811\u94fe\u5256\u5206\u662f\u628a\u4e00\u4e2a\u6811\u5206\u6210\u82e5\u5e72\u6761\u94fe\uff0c\u6700\u5e38\u7528\u7684\u662f\u8f7b\u91cd\u94fe\u5256\u5206\u3002\u4e00\u4e2a\u8282\u70b9 $u$ \u7684\u91cd\u94fe\u6240\u8fde\u63a5\u7684\u8282\u70b9 $v$\uff0c\u6709\u4e00\u4e2a\u7279\u5f81\uff0c\u5c31\u662f $v$ \u7684\u5b50\u6811\u662f\u6700\u5927\u7684\uff0c\u5176\u4ed6\u7684\u8fb9\u5168\u90fd\u662f\u8f7b\u94fe\u3002\u901a\u8fc7\u4e00\u4e9b\u5904\u7406\uff08\u4e24\u6b21dfs\uff09\u53ef\u4ee5\u6c42\u51fa\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u3001\u6df1\u5ea6\u548c\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684 $id$\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u505a\u8fd9\u9053\u9898\u76ee\u4e86\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log^2 n)$ \u5e38\u6570\u8f83\u5c0f\uff0c\u5982\u679c\u628a\u7ebf\u6bb5\u6811\u6539\u6210\u6811\u72b6\u6570\u7ec4\u5c31\u6700\u597d\u4e86\r\n\r\n\r\n\u6211\u8fd9\u91cc\u7684\u4ee3\u7801\u5bf9\u4e8e\u8f93\u5165\u7684\u6570\u636e\u505a\u4e86\u5904\u7406\uff0c\u5373\u6bcf\u4e2a\u8bfb\u5165\u7684\u8282\u70b9\u7684\u7f16\u53f7\u52a0 $1$\uff0c\u5f53\u7136\u4e0d\u8fd9\u6837\u5904\u7406\u4e5f\u53ef\u4ee5\uff0c\u628a\u7b2c\u4e00\u6b21\u5904\u7406\u65f6\u7684 $fa$ \u53d8\u6210\u4e00\u4e2a\u5f88\u5927\u7684\u6570\uff0c\u6bd4\u5982 $n+100$ \u4e4b\u7c7b\u7684\u3002\u4e0d\u8fc7\u4e00\u822c\u7684\u9898\u76ee\u6570\u636e\u4e0d\u4f1a\u5361\u7684\u3002\r\n\r\n\u7136\u540e\u518d\u4ecb\u7ecd\u4e00\u4e2a\u5c0f\u6280\u5de7\r\n\r\n```cpp\r\nchar c;\r\nscanf(\"%s\",&c);\r\n```\r\n\u53ef\u4ee5\u6709\u6548\u5730\u53bb\u9664\u7a7a\u683c\r\n\r\n\r\n\u597d\u4e86\u4ee3\u7801\u5982\u4e0b\uff1a\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nint n,m,r,father[100050],depth[100050],size[100050],son[100050],top[100050],ide[100050],rid[100050],cnt=0;\r\n\r\nlong long val[100050],p;\r\n\r\nvector <int> graph[100050];\r\n\r\nstruct SegTree\r\n{\r\n    int left,right;\r\n    long long value,tag;\r\n}t[500050];\r\n\r\nvoid dfs1(int u,int fa)\r\n{\r\n    father[u]=fa;\r\n    depth[u]=depth[fa]+1;\r\n    size[u]=1;\r\n    for (int i=0;i<graph[u].size();i++)\r\n    {\r\n        int v=graph[u][i];\r\n        if (v!=fa)\r\n        {\r\n            dfs1(v,u);\r\n            size[u]+=size[v];\r\n            if (size[v]>size[son[u]])\r\n                son[u]=v;\r\n        }\r\n    }\r\n}\r\n\r\nvoid dfs2(int now,int fir)\r\n{\r\n    cnt++;\r\n    top[now]=fir;\r\n    ide[now]=cnt;\r\n    rid[ide[now]]=now;\r\n    if (!son[now]) \r\n        return;\r\n    dfs2(son[now],fir);\r\n    for (int i=0;i<graph[now].size();i++)\r\n    {\r\n        int v=graph[now][i];\r\n        if (v!=father[now] && v!=son[now])\r\n            dfs2(v,v);\r\n    }\r\n}\r\n\r\nvoid Push_Up(int id)\r\n{\r\n    t[id].value=t[id<<1].value+t[id<<1|1].value;\r\n}\r\n\r\nvoid Push_Down(int id)\r\n{\r\n    t[id<<1].tag+=t[id].tag;\r\n    t[id<<1|1].tag+=t[id].tag;\r\n    t[id<<1].value+=t[id].tag*(t[id<<1].right-t[id<<1].left+1);\r\n    t[id<<1|1].value+=t[id].tag*(t[id<<1|1].right-t[id<<1|1].left+1);\r\n    t[id].tag=0;\r\n}\r\n\r\nvoid Build(int id,int left,int right)\r\n{\r\n    t[id].left=left;\r\n    t[id].right=right;\r\n    if (left==right)\r\n    {\r\n        t[id].value=val[rid[left]];\r\n        return;\r\n    }\r\n    int mid=(left+right)>>1;\r\n    Build(id<<1,left,mid);\r\n    Build(id<<1|1,mid+1,right);\r\n    Push_Up(id);\r\n}\r\n\r\nvoid Update(int id,int left,int right,long long value)\r\n{\r\n    if (t[id].left>=left && t[id].right<=right)\r\n    {\r\n        t[id].tag+=value;\r\n        t[id].value+=value*(t[id].right-t[id].left+1);\r\n        return;\r\n    }\r\n    Push_Down(id);\r\n    int mid=(t[id].left+t[id].right)>>1;\r\n    if (right<=mid)\r\n        Update(id<<1,left,right,value);\r\n    else if (left>mid)\r\n        Update(id<<1|1,left,right,value);\r\n    else\r\n    {\r\n        Update(id<<1,left,mid,value);\r\n        Update(id<<1|1,mid+1,right,value); \r\n    }\r\n    Push_Up(id);\r\n}\r\n\r\nlong long Query(int id,int left,int right)\r\n{\r\n    if (t[id].left>=left && t[id].right<=right)\r\n        return t[id].value;\r\n    else\r\n    {\r\n        int mid=(t[id].left+t[id].right)>>1;\r\n        Push_Down(id);\r\n        if (right<=mid)\r\n            return Query(id<<1,left,right);\r\n        if (left>mid)\r\n            return Query(id<<1|1,left,right);\r\n        else\r\n            return Query(id<<1,left,mid)+Query(id<<1|1,mid+1,right);\r\n    }\r\n}\r\n\r\nvoid SubTreeChange(int id,int value)\r\n{\r\n    int x=ide[id];\r\n    int y=ide[id]+size[id]-1;\r\n    Update(1,x,y,value);\r\n}\r\n\r\nlong long SubTreeQuery(int id)\r\n{\r\n    int x=ide[id];\r\n    int y=ide[id]+size[id]-1;\r\n    return Query(1,x,y);\r\n}\r\n\r\nvoid LinkChange(int x,int y,int value)\r\n{\r\n    int tx=top[x];\r\n    int ty=top[y];\r\n    while (tx!=ty)\r\n    {\r\n        if (depth[tx]<depth[ty])\r\n        {\r\n            swap(x,y);\r\n            swap(tx,ty);\r\n        }\r\n        Update(1,ide[tx],ide[x],value);\r\n        x=father[tx];\r\n        tx=top[x];\r\n    }\r\n    if (depth[x]>depth[y])\r\n        swap(x,y);\r\n    Update(1,ide[x],ide[y],value);\r\n}\r\n\r\nlong long LinkQuery(int x,int y)\r\n{\r\n    int tx=top[x];\r\n    int ty=top[y];\r\n    long long ans=0;\r\n    while (tx!=ty)\r\n    {\r\n        if (depth[tx]<depth[ty])\r\n        {\r\n            swap(x,y);\r\n            swap(tx,ty);\r\n        }\r\n        ans+=Query(1,ide[tx],ide[x]);\r\n        x=father[tx];\r\n        tx=top[x];\r\n    }\r\n    if (depth[x]>depth[y])\r\n        swap(x,y);\r\n    ans+=Query(1,ide[x],ide[y]);\r\n    return ans;\r\n}\r\n\r\nint main()\r\n{\r\n    scanf(\"%d\",&n);\r\n    for (int i=1;i<n;i++)\r\n    {\r\n        int u,v;\r\n        scanf(\"%d%d\",&u,&v);\r\n        graph[u+1].push_back(v+1);\r\n        graph[v+1].push_back(u+1);\r\n    }\r\n    dfs1(1,0);\r\n    dfs2(1,1);\r\n    scanf(\"%d\",&m);\r\n    Build(1,1,cnt);\r\n    for (int i=1;i<=m;i++)\r\n    {\r\n        int u,v,d;\r\n        char c;\r\n        scanf(\"%s\",&c);\r\n        if (c=='A')\r\n        {\r\n            scanf(\"%d%d%d\",&u,&v,&d);\r\n            LinkChange(u+1,v+1,d);\r\n        }\r\n        else\r\n        {\r\n            scanf(\"%d\",&u);\r\n            printf(\"%lld\\n\",SubTreeQuery(u+1));\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n```\r\n\r\n\u500d\u589e+\u7ebf\u6bb5\u6811\u505a\u6cd5\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nstruct Seg_Tree\r\n{\r\n    int left,right,add;\r\n    long long value;\r\n}son[400050];\r\n\r\nint n,m;\r\n\r\nvector <int> graph[100050];\r\n\r\nint fa[100050][16],size[100050],depth[100050];\r\n\r\nint Time,pos[100050],belong[100050];\r\n\r\nlong long delta[500050];\r\n\r\nbool vis[100050];\r\n\r\nint read()\r\n{\r\n    int w=0,c=1; \r\n    char ch=getchar();\r\n    while (ch<'0' || ch>'9')\r\n    {\r\n        if (ch=='-') \r\n            c=-1;\r\n        ch=getchar();\r\n    }\r\n    while (ch>='0' && ch<='9')\r\n    {\r\n        w=w*10+ch-'0';\r\n        ch=getchar();\r\n    }\r\n    return w*c;\r\n}\r\n\r\nvoid Build(int id,int left,int right)\r\n{\r\n    son[id].value=son[id].add=0;\r\n    son[id].left=left;\r\n    son[id].right=right;\r\n    if (left==right)\r\n        return;\r\n    Build(id<<1,left,(left+right)>>1);\r\n    Build(id<<1|1,((left+right)>>1)+1,right);\r\n    son[id].value=son[id<<1].value+son[id<<1|1].value;\r\n}\r\n\r\nvoid Change_delta(int id,long long value,int left,int right)\r\n{\r\n    son[id].value+=value*(right-left+1);\r\n    delta[id]+=value;\r\n}\r\n\r\nvoid Push_Up(int id)\r\n{\r\n    son[id].value=son[id<<1].value+son[id<<1|1].value;\r\n}\r\n\r\nvoid Push_Down(int id,int left,int right)\r\n{\r\n    int mid=(left+right)/2;\r\n    Change_delta(id<<1,delta[id],left,mid);\r\n    Change_delta(id<<1|1,delta[id],mid+1,right);\r\n    delta[id]=0;\r\n}\r\n\r\nvoid Update(int id,int left,int right,long long value,int pos1,int pos2)\r\n{\r\n    int mid=(left+right)/2;\r\n    //cout << id << \" \" << left << \" \" << right << \" \" << value << \" \" << pos1 << \" \" << pos2 << endl;\r\n    //system(\"pause\");\r\n    if (pos1<=left && pos2>=right)\r\n    {\r\n        Change_delta(id,value,left,right);\r\n        return;\r\n    }\r\n    Push_Down(id,left,right);\r\n    if (pos1<=mid)\r\n        Update(id<<1,left,mid,value,pos1,pos2);\r\n    if (pos2>mid)\r\n        Update(id<<1|1,mid+1,right,value,pos1,pos2);\r\n    Push_Up(id);\r\n}\r\n\r\nvoid getlca(int u)\r\n{\r\n    vis[u]=true;\r\n    size[u]=1;\r\n    for (int i=1;i<=16;i++)\r\n    {\r\n        if (depth[u]<(1<<i))\r\n            break;\r\n        fa[u][i]=fa[fa[u][i-1]][i-1];\r\n    }\r\n    for (int i=0;i<graph[u].size();i++)\r\n    {\r\n        int v=graph[u][i];\r\n        if (vis[v])\r\n            continue;\r\n        depth[v]=depth[u]+1;\r\n        fa[v][0]=u;\r\n        getlca(v);\r\n        size[u]+=size[v];\r\n    }\r\n}\r\n\r\nvoid dfs(int k,int num)\r\n{\r\n    int x=0;\r\n    //cout << k << \" \" << num << endl;\r\n    //system(\"pause\");\r\n    Time++;\r\n    pos[k]=Time;\r\n    belong[k]=num;\r\n    for (int i=0;i<graph[k].size();i++)\r\n    {\r\n        int v=graph[k][i];\r\n        if (depth[v]>depth[k] && size[v]>size[x])\r\n            x=v;\r\n    }\r\n    if (x==0)\r\n        return;\r\n    dfs(x,num);\r\n    for (int i=0;i<graph[k].size();i++)\r\n    {\r\n        int v=graph[k][i];\r\n        if (depth[v]>depth[k] && x!=v)\r\n            dfs(v,v);\r\n    }\r\n}\r\n\r\nvoid Insert(int x,int y,long long z)\r\n{\r\n    for (;belong[x]!=belong[y];x=fa[belong[x]][0])\r\n    {\r\n        //cout << x << \" \" << y << endl;\r\n        if (depth[belong[x]]<depth[belong[y]])\r\n            swap(x,y);\r\n        Update(1,1,n,z,pos[belong[x]],pos[x]);\r\n    }\r\n    if (depth[x]<depth[y])\r\n        swap(x,y);\r\n    //cout << x << \" \" << y << \" \" << pos[x] << \" \" << pos[y] << endl;\r\n    Update(1,1,n,z,pos[y],pos[x]);\r\n}\r\n\r\nlong long Query(int id,int left,int right,int pos1,int pos2)\r\n{\r\n    int mid=(left+right)/2;\r\n    long long ans=0;\r\n    //cout << id << \" \" << left << \" \" << right << \" \" << son[id].value << \" \" << pos1 << \" \" << pos2 << endl;\r\n    if (pos1<=left && pos2>=right)\r\n        return son[id].value;\r\n    Push_Down(id,left,right);\r\n    if (pos1<=mid)\r\n        ans+=Query(id<<1,left,mid,pos1,pos2);\r\n    if (pos2>mid)\r\n        ans+=Query(id<<1|1,mid+1,right,pos1,pos2);\r\n    Push_Up(id);\r\n    return ans;\r\n}\r\n\r\nint main()\r\n{\r\n    //freopen(\"tree.in\",\"r\",stdin);\r\n    //freopen(\"tree.out\",\"w\",stdout);\r\n    scanf(\"%d\",&n);\r\n    for (int i=1;i<n;i++)\r\n    {\r\n        int u,v;\r\n        scanf(\"%d%d\",&u,&v);\r\n        u++;\r\n        v++;\r\n        graph[u].push_back(v);\r\n        graph[v].push_back(u);\r\n    }\r\n    getlca(1);\r\n    dfs(1,1);\r\n    Build(1,1,n);\r\n    m=read();\r\n    //for (int i=1;i<=n;i++)\r\n    //    cout << belong[i] << endl;\r\n    for (int i=1;i<=m;i++)\r\n    {\r\n        char chr;\r\n        int x;\r\n        scanf(\"%s\",&chr);\r\n        scanf(\"%d\",&x);\r\n        x++;\r\n        if (chr=='A')\r\n        {\r\n            int y,z;\r\n            scanf(\"%d%d\",&y,&z);\r\n            y++;\r\n            Insert(x,y,z);\r\n        }\r\n        if (chr=='Q')\r\n            printf(\"%lld\\n\",Query(1,1,n,pos[x],pos[x]+size[x]-1));\r\n    }\r\n    return 0;\r\n}\r\n\r\n/*4\r\n0 1\r\n1 2\r\n2 3\r\n4\r\nA 1 3 1\r\nQ 0\r\nQ 1\r\nQ 2\r\n*/\r\n```\r\n**\u5b9e\u6d4b\u500d\u589e\u6bd4\u6811\u94fe\u5256\u5206\u61621000ms**\r\n",
        "postTime": 1510300878,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "\u8fd9\u662f\u672c\u83dc\u9e21\u7b2c\u4e00\u6b21\u70b8\u51fa[ chen_zhe ](https://www.luogu.com.cn/user/8457)\uff0c\u7eaa\u5ff5\u4e00\u4e0b555\u3002\n\n\u672c\u6765\u662f\u60f3\u8ba9[ chen_zhe ](https://www.luogu.com.cn/user/8457)\u5927\u5927\u4fee\u4e00\u4e0b\u9898\u9762\uff0c\u7ed3\u679c[ chen_zhe ](https://www.luogu.com.cn/user/8457)\u5927\u5927\u4e0d\u4ec5\u4fee\u6539\u4e86\u9898\u9762\uff0c\u8fd8\u76f4\u63a5\u6539\u4e86\u96be\u5ea6\uff08\u84dd\u6389\u7eff\uff09\u2026\u2026\n\n[\u5e16\u5b50\u5730\u5740](https://www.luogu.com.cn/discuss/show/212175)\n\n[ chen_zhe ](https://www.luogu.com.cn/user/8457)\u5927\u5927\u5c5e\u5b9enb\uff01\uff01\uff01\n\n\u63a5\u4e0b\u6765\u8fdb\u5165\u6b63\u9898\uff0c\u9996\u5148\u4e00\u770b\u5230\u8fd9\u9898\u4f60\u4e00\u5b9a\u4f1a\u60f3\u5230\u6811\u94fe\u5256\u5206\uff0c\u5e76\u4e14\u8fd8\u4f1a\u4e0d\u5c51\u5730\u8bf4\uff1a\u5207\uff0c\u8fd9\u4e0d\u5c31\u662f\u6a21\u677f\u9898\u5417\uff1f\uff01\n\n\u7136\u800c\u6211\u4eec\u8fd9\u79cd\u4e0d\u4f1a\u6811\u94fe\u5256\u5206\u7684\u83dc\u9e21\u6b63\u5728\u745f\u745f\u53d1\u6296\u2026\u2026\uff08\u6ca1\u6709\u6b67\u89c6\u6811\u94fe\u5256\u5206\u7684\u610f\u601d\uff0c\u5f53\u7136\u5efa\u8bae\u5927\u5bb6\u53bb\u5b66\u6811\u94fe\u5256\u5206\uff0c\u672c\u83dc\u9e21\u4e5f\u6b63\u5728\u5b66\u4e60\u4e2d\uff09\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u4f1a\u60f3\u5230\u4e00\u9053\u7c7b\u4f3c\u7684\u9898\uff1a[[HAOI2015]\u6811\u4e0a\u64cd\u4f5c](https://www.luogu.com.cn/problem/P3178)\n\n\u5728[[HAOI2015]\u6811\u4e0a\u64cd\u4f5c](https://www.luogu.com.cn/problem/P3178)\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u641e\u4e00\u4e2adfs\u5e8f\u7136\u540e\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u8fd9\u9053\u9898\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u505a\u3002\n\n\u6211\u4eec\u8003\u8651\u7528\u4e00\u79cd\u795e\u5947\u7684dfs\u5e8f\uff1a[\u6b27\u62c9\u5e8f](https://www.cnblogs.com/stxy-ferryman/p/7741970.html)\n\n\u8fd9\u4e2a[\u6b27\u62c9\u5e8f](https://www.cnblogs.com/stxy-ferryman/p/7741970.html)\u7684\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff1a\n>\u5982\u679c\u628a\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u51fa\u73b0\u8bb0\u4f5c +\uff0c\u7b2c\u4e8c\u6b21\u51fa\u73b0\u8bb0\u4f5c -\uff0c\u90a3\u4e48\u6839\u8282\u70b9\u5230\u4efb\u610f\u8282\u70b9\u7684\u6743\u503c\u548c\u5728\u6b27\u62c9\u5e8f\u4e0a\u5bf9\u5e94\u4e00\u4e2a\u524d\u7f00\u548c\u3002\u2014\u2014\u6458\u81ea[YJZoier\u5de8\u4f6c\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/user31635/solution-p3178)\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u628a\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u51fa\u73b0\u8bb0\u4f5c +\uff0c\u7b2c\u4e8c\u6b21\u51fa\u73b0\u8bb0\u4f5c -\uff0c\u90a3\u4e48\u4efb\u610f\u8282\u70b9\u5230\u5b83\u7684\u7956\u5148\u7684\u6743\u503c\u548c\u5728\u6b27\u62c9\u5e8f\u4e0a\u5bf9\u5e94\u4e00\u6bb5\u533a\u95f4\u7684\u548c\u3002\n\n\u8bbe\u4e00\u4e2a\u70b9 $x$ \u548c\u5b83\u7684\u7956\u5148 $y$ \uff0c\u90a3\u4e48\u6811\u4e0a $x$ \u5230 $y$ \u7684\u6743\u503c\u548c\u5c31\u662f\u6b27\u62c9\u5e8f\u4e0a $+x$ \u5230 $+y$ \u7684\u548c\n\n\u6bd4\u5982\u6837\u4f8b\uff0c[\u6b27\u62c9\u5e8f](https://www.cnblogs.com/stxy-ferryman/p/7741970.html)\u662f $+0,+1,+2,+3,-3,-2,-1,-0$\n\n\u90a3\u4e48\u6211\u4eec\u770b $3$ \u8fd9\u4e2a\u70b9\uff0c\u5b83\u7684\u7956\u5148\u4e2d\u6709 $1$ \uff0c\u90a3\u4e48\u6b27\u62c9\u5e8f\u4e0a $+1$ \u5230 $+3$ \u90e8\u5206\u7684\u548c\u5373\u4e3a\u6811\u4e0a $1$ \u5230 $3$ \u7684\u548c\u3002\n\n\u4f60\u53ef\u80fd\u4f1a\u8bf4\uff1a\u4f60\u8fd9\u4e2a\u4f8b\u5b50\u4e0d\u5168\u9762\u554a\uff0c\u6837\u4f8b\u53ea\u662f\u4e2a\u94fe\u554a\u3002\n\n\u5176\u5b9e\u5f88\u7b80\u5355\u5c31\u80fd\u8bc1\u660e\uff0c\u5982\u679c $y$ \u8fd8\u6709\u522b\u7684\u5b50\u6811\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5b50\u6811\u8981\u4e48\u662f\u8fd8\u6ca1\u6709\u5728\u8fd9\u6bb5\u6b27\u62c9\u5e8f\u533a\u95f4\u4e2d\u51fa\u73b0\u8fc7\uff0c\u8981\u4e48\u662f\u4e00\u4e2a $+$ \u4e00\u4e2a $-$ \u5df2\u7ecf\u505a\u5b8c\u62b5\u6d88\u4e86\u3002\u63a5\u4e0b\u6765\u7684\u8282\u70b9\u540c\u7406\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f88\u660e\u786e\u7684\u505a\u6cd5\uff1a\n\n1.\u9884\u5904\u7406\u8dd1\u5b8c\u6b27\u62c9\u5e8f\u548c \n$\\operatorname{lca}$ \u7684\u9884\u5904\u7406\u3002\n\n2.\u5bf9\u4e8e\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u5c06 $+\\operatorname{lca}(x,y)$ \u5230 $+x$ \u4e0e $+\\operatorname{lca}(x,y)$ \u5230 $+y$ \u90e8\u5206\u8fdb\u884c\u5904\u7406\uff0c**\u7136\u540e\u5343\u4e07\u5343\u4e07\u522b\u5fd8\u4e86\u5c06$+\\operatorname{lca}(x,y)$\u5904\u7406\uff01\uff01\uff01**\u3002\u8fd9\u4e1c\u897f\u663e\u7136\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u53ea\u4e0d\u8fc7\u8981\u6ce8\u610f\u4e0b $+$ \u548c $-$ \u7684\u5904\u7406\u3002\n\n3.\u67e5\u8be2\u64cd\u4f5c\uff0c\u663e\u7136\u7b54\u6848\u662f $+x$ \u5230 $-x$ \u90e8\u5206\u7684\u548c\u3002\n\n\u63a5\u4e0b\u6765\u653e\u4e0a\u4ee3\u7801\uff1a\n\n```pascal\nuses math;\ntype rec=record\n     l,r:longint;\n     sum,lz:int64;\n     end;\n     edge=record\n     x,y,next:longint;\n     end;\n     ou=record\n     z,u:longint;\n     end;\nvar tree:array[0..1000000]of rec;\n    zf,a,shang,xia,h,dep:array[0..1000000]of int64;\n    e:array[0..1000000]of edge;\n    ol:array[0..1000000]of ou;\n    f:array[0..500000,0..20]of longint;\n    cnt,cnt1,n,m,i,k:longint;\n    a1,x,y:int64;\n    ch,ch1:char;\nprocedure push_up(k:longint);\nbegin\n  tree[k].sum:=tree[k*2].sum+tree[k*2+1].sum;\nend;\nprocedure push_down(k:longint);\nbegin\n  if tree[k].lz<>0 then\n  begin\n    tree[k*2].sum:=tree[k*2].sum+(zf[tree[k*2].r]-zf[tree[k*2].l-1])*tree[k].lz;\n    tree[k*2].lz:=tree[k*2].lz+tree[k].lz;\n    tree[k*2+1].sum:=tree[k*2+1].sum+(zf[tree[k*2+1].r]-zf[tree[k*2+1].l-1])*tree[k].lz;\n    tree[k*2+1].lz:=tree[k*2+1].lz+tree[k].lz;\n    tree[k].lz:=0;\n  end;\nend;\nprocedure build(k,l,r:longint);\nbegin\n  tree[k].l:=l;tree[k].r:=r;\n  if l=r then tree[k].sum:=ol[l].z*a[ol[l].u] else\n  begin\n    build(k*2,l,l+(r-l) div 2);\n    build(k*2+1,l+(r-l) div 2+1,r);\n    push_up(k);\n  end;\nend;\nprocedure xg1(k,l,r,a:longint);\nvar mid:longint;\nbegin\n  if (tree[k].l=l)and(tree[k].r=r) then\n  begin\n    tree[k].sum:=tree[k].sum+(zf[r]-zf[l-1])*a;//\u53ea\u5c06\n    tree[k].lz:=tree[k].lz+a;\n    exit;\n  end;\n  mid:=tree[k].l+(tree[k].r-tree[k].l) div 2;\n  push_down(k);\n  if l<=mid then xg1(k*2,l,min(r,mid),a);\n  if r>mid then xg1(k*2+1,max(mid+1,l),r,a);\n  push_up(k);\nend;\nfunction cx(k,l,r:longint):int64;\nvar mid:longint;\nbegin\n  if (tree[k].l=l)and(tree[k].r=r) then exit(tree[k].sum);\n  mid:=tree[k].l+(tree[k].r-tree[k].l) div 2;\n  push_down(k);\n  cx:=0;\n  if l<=mid then cx:=cx+cx(k*2,l,min(r,mid));\n  if r>mid then cx:=cx+cx(k*2+1,max(mid+1,l),r);\n  push_up(k);\nend;\nprocedure ad(x,y:longint);\nbegin\n  inc(cnt);\n  e[cnt].x:=y;\n  e[cnt].next:=h[x];\n  h[x]:=cnt;\nend;\nprocedure olx(now,fa:longint);\nvar t:longint;\nbegin\n  inc(cnt1);\n  ol[cnt1].z:=1;\n  ol[cnt1].u:=now;\n  xia[now]:=cnt1;\n  t:=h[now];\n  while t>0 do\n  begin\n    if e[t].x<>fa then olx(e[t].x,now);\n    t:=e[t].next;\n  end;\n  inc(cnt1);\n  ol[cnt1].z:=-1;\n  ol[cnt1].u:=now;\n  shang[now]:=cnt1;\nend;\nprocedure dfs(k,l:longint);\nvar t,i:longint;\nbegin\n  dep[k]:=dep[l]+1;\n  f[k,0]:=l;\n  for i:=1 to trunc(log2(dep[k])) do\n    f[k,i]:=f[f[k,i-1],i-1];\n  t:=h[k];\n  while t>0 do\n  begin\n    if e[t].x<>l then dfs(e[t].x,k);\n    t:=e[t].next;\n  end;\nend;\nfunction lca(x,y:longint):longint;\nvar i,t:longint;\nbegin\n  if dep[x]<dep[y] then\n  begin\n    t:=x;x:=y;y:=t;\n  end;\n  for i:=20 downto 0 do\n  begin\n    if dep[f[x,i]]>=dep[y] then x:=f[x,i];\n    if x=y then exit(x);\n  end;\n  for i:=20 downto 0 do\n    if f[x,i]<>f[y,i] then\n    begin\n      x:=f[x,i];\n      y:=f[y,i];\n    end;\n  exit(f[x,0]);\nend;\nbegin\n  readln(n);\n  for i:=1 to n-1 do\n  begin\n    readln(x,y);\n    inc(x);inc(y);\n    ad(x,y);\n    ad(y,x);\n  end;\n  readln(m);\n  olx(1,0);\n  dfs(1,0);\n  for i:=1 to 2*n do zf[i]:=zf[i-1]+ol[i].z;\n  build(1,1,2*n);\n  for i:=1 to m do\n  begin\n    read(ch,ch1);\n    case ch of\n    'A':begin\n        readln(x,y,a1);inc(x);inc(y);\n        xg1(1,xia[lca(x,y)],xia[x],a1);\n        xg1(1,xia[lca(x,y)],xia[y],a1);\n        xg1(1,xia[lca(x,y)],xia[lca(x,y)],-a1);\n      end;\n    'Q':begin\n        readln(x);  inc(x);\n        writeln(cx(1,xia[x],shang[x]));\n      end;\n    end;\n  end;\nend.\n\n```\n\u9898\u89e3\u5982\u6709\u9519\u8bef\u8bf7\u6307\u51fa\uff0c\u611f\u6fc0\u4e0d\u5c3d\uff01\uff01\uff01\n",
        "postTime": 1586186010,
        "uid": 120911,
        "name": "Lynkcat",
        "ccfLevel": 9,
        "title": "\u3010\u9898\u89e3\u3011P3833 [SHOI2012]\u9b54\u6cd5\u6811"
    },
    {
        "content": "[\u65e0\u803b\u5730\u5b89\u5229\u535a\u5ba2](https://www.cnblogs.com/soledadstar/p/11521865.html)\n\n## \u6b64\u9898\u7406\u8bba\u6700\u4f18\u89e3\n> \u9898\u76ee\u5927\u610f\uff1a\u8def\u5f84\u4fee\u6539\uff0c\u5b50\u6811\u6c42\u548c\n\n\u660e\u663e\u662f\u6811\u5256\u7684\u6a21\u677f\uff0c\u4f46\u6811\u5256\u7684\u65f6\u95f4\u590d\u6742\u5ea6~~\u9ad8~~\u8fbe\u4e86\u4f18\u79c0\u7684$\\Theta(Q \\;log^2n)$\uff0c\u800c\u5b9e\u9645\u4e0a\u6811\u4e0a\u5dee\u5206\u53ef\u4ee5\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230$\\Theta(Q \\;logn)$\u3002\n\n\u8bbe$tag[x]$\u4e3a$1$\u5230$x$\u7684\u8def\u5f84\u4e0a\u5168\u90fd\u52a0\u4e86\u8fd9\u4e2a\u503c\uff0c~~\u663e\u7136~~\u5bf9\u4e8e$(x,y)$\u8fd9\u6761\u8def\u5f84\u52a0$d$\u7684\u64cd\u4f5c\u53ef\u4ee5\u770b\u4f5c\n$$tag[x]+=d,tag[y]+=d,tag[LCA(x,y)]-=d,tag[prt[LCA(x,y)]]-=d$$\n\n\u82e5\u67e5\u8be2\u4ee5$root$\u4e3a\u6839\u7684\u5b50\u6811\u548c\uff0c\u8003\u8651\u5b50\u6811\u5185\u6bcf\u4e2a\u70b9$x$\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\n$$(dep[x]-dep[root]+1)\\times tag[x]$$\n\u4e0a\u5f0f\u7684\u610f\u4e49\u662f\u5728$(x,root)$\u8fd9\u6761\u8def\u5f84\u6bcf\u4e2a\u70b9\u90fd\u88ab\u52a0\u4e86$tag[x]$\uff0c\u5bf9\u4e0a\u5f0f\u6c42\u548c\u5f97\u5230\n$$\\sum \\;((dep[x]-dep[root]+1)\\times tag[x])$$\n$$\\sum \\;(dep[x]\\times tag[x]-(dep[root]-1)\\times tag[x])$$\n$$\\sum \\;(dep[x]\\times tag[x])-(dep[root]-1)\\times\\sum\\;(tag[x])$$\n\n\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4$dep[x]\\times tag[x]$\u548c$tag[x]$\u5c31\u597d\u4e86\uff0c\u56e0\u4e3a\u5728$DFS$\u5e8f\u4e0a\u5b50\u6811\u662f\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u76f4\u63a5\u67e5\u8be2\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u6211\u7684\u4e11\u4ee3\u7801\u5e38\u6570\u592a\u5927\uff0c\u628a\u7406\u8bba\u6700\u4f18\u89e3\u8dd1\u8fd8\u5f97\u4e0d\u5982\u6811\u5256\n```cpp\n#include<iostream>\n#include<iomanip>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n#define int long long\ninline int read() {\n\tchar ch;\n\tbool bj=0;\n\twhile(!isdigit(ch=getchar()))\n\t\tbj|=(ch=='-');\n\tint res=ch^(3<<4);\n\twhile(isdigit(ch=getchar()))\n\t\tres=(res<<1)+(res<<3)+(ch^(3<<4));\n\treturn bj?-res:res;\n}\nvoid printnum(int x) {\n\tif(x>9)printnum(x/10);\n\tputchar(x%10+'0');\n}\ninline void print(int x,char ch) {\n\tif(x<0) {\n\t\tputchar('-');\n\t\tx=-x;\n\t}\n\tprintnum(x);\n\tputchar(ch);\n}\nconst int MAXN=1e5+5;\nint n,m,h[MAXN],cnt;\nint top[MAXN],size[MAXN],prt[MAXN],son[MAXN],dep[MAXN],tot,tid[MAXN];\nstruct Edge {\n\tint to,nxt;\n} w[MAXN<<1];\nint c1[MAXN],c2[MAXN];\ninline void AddEdge(int x,int y) {\n\tw[++cnt].nxt=h[x];\n\tw[cnt].to=y;\n\th[x]=cnt;\n}\nvoid DFS1(int x,int fa,int depth) {\n\tdep[x]=depth;\n\tprt[x]=fa;\n\tsize[x]=1;\n\tfor(int i=h[x]; i; i=w[i].nxt) {\n\t\tint v=w[i].to;\n\t\tif(v==fa)continue;\n\t\tDFS1(v,x,depth+1);\n\t\tif(size[v]>size[son[x]])son[x]=v;\n\t\tsize[x]+=size[v];\n\t}\n}\nvoid DFS2(int x,int sp) {\n\ttop[x]=sp;\n\ttid[x]=++tot;\n\tif(!son[x])return;\n\tDFS2(son[x],sp);\n\tfor(int i=h[x]; i; i=w[i].nxt) {\n\t\tint v=w[i].to;\n\t\tif(v==prt[x]||v==son[x])continue;\n\t\tDFS2(v,v);\n\t}\n}\ninline int LCA(int x,int y) {\n\twhile(top[x]^top[y]) {\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tx=prt[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\treturn x;\n}\ninline int lowbit(int x) {\n\treturn x&(-x);\n}\ninline void update(int x,int d,int c[]) {\n\tif(!x)return;\n\twhile(x<=n)c[x]+=d,x+=lowbit(x);\n}\ninline int query(int x,int c[]) {\n\tint sum=0;\n\twhile(x)sum+=c[x],x-=lowbit(x);\n\treturn sum;\n}\ninline void add(int x,int d) {\n\tupdate(tid[x],d,c1);\n\tupdate(tid[x],dep[x]*d,c2);\n}\ninline int ask(int x,int y,int c[]) {\n\treturn query(y,c)-query(x-1,c);\n}\nsigned main() {\n\tn=read();\n\tint x,y,d;\n\tfor(int i=1; i<n; i++) {\n\t\tx=read()+1;\n\t\ty=read()+1;\n\t\tAddEdge(x,y);\n\t\tAddEdge(y,x);\n\t}\n\tDFS1(1,0,1);\n\tDFS2(1,1);\n\tm=read();\n\tchar ch;\n\twhile(m--) {\n\t\tdo ch=getchar();\n\t\twhile(ch!='A'&&ch!='Q');\n\t\tif(ch=='A') {\n\t\t\tx=read()+1;\n\t\t\ty=read()+1;\n\t\t\td=read();\n\t\t\tint u=LCA(x,y);\n\t\t\tadd(x,d);\n\t\t\tadd(y,d);\n\t\t\tadd(u,-d);\n\t\t\tadd(prt[u],-d);\n\t\t} else {\n\t\t\tx=read()+1;\n\t\t\tint tmp=ask(tid[x],tid[x]+size[x]-1,c1);\n\t\t\tprint(ask(tid[x],tid[x]+size[x]-1,c2)-tmp*(dep[x]-1),'\\n');\n\t\t}\n\t}\n\treturn 0;\n}\n```\n~~\u4e3a\u4ec0\u4e48\u8fd8\u662f\u5199\u4e86\u4e24\u4e2aDFS\uff1f\u56e0\u4e3a\u6211\u8981\u6811\u5256\u6c42LCA~~",
        "postTime": 1568523993,
        "uid": 76873,
        "name": "Soledad_S",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "\u8bb2\u4e00\u4e0b\u5982\u4f55\u7528$LCT$\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\n\n\u4f17\u6240\u5468\u77e5\uff0c$LCT$\u5f3a\u5728\u7ef4\u62a4\u94fe\u4fe1\u606f\u800c\u5f31\u5728\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\n\n\u4f46\u662f\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u5e94\u5bf9\u4e00\u4e9b\u51fa\u9898\u4eba\u6bd4\u8f83\u6bd2\u7624\u7684\u60c5\u51b5\uff08\u6bd4\u5982\u53c8\u52a0\u8fb9\u5220\u8fb9\u8fd8\u67e5\u8be2\u5b50\u6811\uff09\n\n\u5b9a\u4e49$vir$\u4e3a\u67d0\u4e2a\u8282\u70b9\u865a\u5b50\u6811\u7684\u6743\u503c\u548c\uff0c$tot$\u4e3a\u603b\u6743\u503c\u548c\u3002\n\n\u5f53$access$\u5bfc\u81f4\u865a\u5b9e\u8f6c\u6362\u65f6\uff0c$vir$\u5c31\u8981\u52a0\u4e0a\u5f53\u524d\u5b9e\u513f\u5b50\uff08\u5c06\u8981\u6210\u4e3a\u865a\u513f\u5b50\uff09\u7684$tot$\uff0c\u51cf\u53bb\u5c06\u8981\u6210\u4e3a\u5b9e\u513f\u5b50\u7684$tot$\n\n\u8fd9\u9898\u56e0\u4e3a\u521d\u59cb\u6ca1\u6709\u70b9\u6743\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5728$link$\u7684\u65f6\u5019\u52a0\u4e0a\u865a\u5b50\u6811\u7684\u503c\uff0c\u4f46\u6211\u8fd9\u91cc\u4e3a\u4e86\u6307\u51fa\u5728\u6709\u6743\u65f6\u7684\u505a\u6cd5\u52a0\u4e0a\u4e86\u3002\n\n\u8fd8\u6709\u5c31\u662f\u6ce8\u610f\u6709\u6839\u6811\u6bcf\u6b21\u67e5\u627e\u8981$makeroot$\u539f\u6811\u7684\u6839\u3002\n\nCode\uff1a \n\n```cpp\n#include <algorithm>\n#include <tuple>\n#include <bitset>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <vector>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define int long long\nconst int inf = 0x3f3f3f3f;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\ntemplate <class Read>\ninl Read read() {\n\tRead x = 0;\n\tregister bool w = 0;\n\tregister char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\nstruct node {\n\tint tot, vir, w, fa, child[2], tag, size;\n\tbool filp;\n} t[100001];\ninl void maintain(int x) {\n\tt[x].tot = t[x].vir + t[x].w + t[ls(x)].tot + t[rs(x)].tot;\n\tt[x].size = t[ls(x)].size + t[rs(x)].size + 1;\n}\ninl bool nroot(int x) {\n\treturn ls(fa(x)) == x || rs(fa(x)) == x;\n}\ninl bool poi(int x) {\n\treturn rs(fa(x)) == x;\n}\ninl void rotate(int x) {\n\tre f = fa(x), gf = fa(f), fs = poi(x), gfs = poi(f), s = t[x].child[fs ^ 1];\n\tif (nroot(f)) t[gf].child[gfs] = x;\n\tt[f].child[fs] = s, t[x].child[fs ^ 1] = f;\n\tif (s) fa(s) = f;\n\tfa(f) = x, fa(x) = gf;\n\tmaintain(f);\n}\ninl void reverse(int x) {\n\tswap(ls(x), rs(x));\n\tt[x].filp ^= 1;\n}\ninl void sum(int x, int w) {\n\tt[x].tag += w, t[x].tot += w * t[x].size, t[x].w += w;\n}\ninl void pushdown(int x) {\n\tif (t[x].filp) {\n\t\tif (ls(x)) reverse(ls(x));\n\t\tif (rs(x)) reverse(rs(x));\n\t\tt[x].filp = 0;\n\t}\n\tif (t[x].tag) {\n\t\tif (ls(x)) sum(ls(x), t[x].tag);\n\t\tif (rs(x)) sum(rs(x), t[x].tag);\n\t\tt[x].tag = 0;\n\t}\n}\ninl void push(int x) {\n\tif (nroot(x)) push(fa(x));\n\tpushdown(x);\n}\ninl void splay(int x) {\n\tpush(x);\n\twhile (nroot(x)) {\n\t\tif (nroot(fa(x))) poi(fa(x)) == poi(x) ? rotate(fa(x)) : rotate(x);\n\t\trotate(x);\n\t}\n\tmaintain(x);\n}\ninl void access(int x) {\n\tfor (re i = 0; x; x = fa(i = x)) {\n\t\tsplay(x), t[x].vir += t[rs(x)].tot, t[x].vir -= t[rs(x) = i].tot, maintain(x);\n\t}\n}\ninl void makeroot(int x) {\n\taccess(x), splay(x), reverse(x);\n}\ninl void split(int x, int y) {\n\tmakeroot(y), access(x), splay(x);\n}\ninl void link(int x, int y) {\n\tsplit(x, y), fa(y) = x, t[x].vir += t[y].w;\n}\ninl bool spread() {\n\tregister char c = getchar();\n\twhile (c != 'A' && c != 'Q')\n\t\tc = getchar();\n\treturn c == 'Q';\n}\nsigned main() {\n\tre n = read<int>();\n\tfor (re i = 1; i < n; i++) {\n\t\tre x = read<int>() + 1, y = read<int>() + 1;\n\t\tlink(x, y);\n\t}\n\tre m = read<int>();\n\twhile (m--) {\n\t\tre op = spread(), x = read<int>() + 1;\n\t\tif (!op) {\n\t\t\tre y = read<int>() + 1, w = read<int>();\n\t\t\tsplit(x, y), sum(x, w);\n\t\t}\n\t\telse {\n\t\t\tmakeroot(1), access(x), splay(x);\n\t\t\tprintf(\"%lld\\n\", t[x].tot - t[ls(x)].tot);\n\t\t}\n\t}\n}\n```\n\n",
        "postTime": 1555652104,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P3833 \u9b54\u6cd5\u6811 LCT\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f"
    },
    {
        "content": "\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6811\u5256\u7684\u88f8\u9898\u3002\n\n\u6ce8\u610f\uff0c\u4e00\u9897\u5b50\u6811\u5185\u7684dfs\u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u76f4\u63a5+size \u67e5\u627e\u5c31\u53ef\u4ee5\u3002\n\n\u8fd9\u91cc\u91c7\u7528\u6570\u7ec4\u5199\u6cd5\uff0c\u6307\u9488\u5199\u6cd5\u8be6\u89c1[\u6211\u535a\u5ba2](https://www.luogu.org/blog/Treaker/#)\u5176\u4ed6\u6811\u5256\u9898\u3002\n\n\u987a\u4fbf\u63a8\u8350\u505a\u4e00\u4e0b\u6a21\u677f[\u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206](https://www.luogu.com.cn/problem/P3384)  \n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nconst int N = 100100;\nint ls(int x) {return x << 1;}\nint rs(int x) {return x << 1 | 1;}\nint n , m , cnt;\nint head[N] , top[N] , fa[N] , dfn[N] , id[N] , size[N] , dep[N] , hs[N];\nlong long sum[N << 2] , tag[N << 2];\nchar s[10];\nstruct Edge\n{\n\tint to , nxt;\n}e[N << 1];\nvoid add(int from,int to)\n{\n\te[++cnt] = (Edge){to,head[from]};\n\thead[from] = cnt;\n}\nvoid get_tree(int now)\n{\n\tsize[now] = 1;\n\tfor(int i = head[now] , to;i;i = e[i].nxt)\n\t{\n\t\tto = e[i].to;\n\t\tif(dep[to])\tcontinue;\n\t\tdep[to] = dep[now] + 1;\n\t\tfa[to] = now;\n\t\tget_tree(to);\n\t\tsize[now] = size[now] + size[to];\n\t\tif(size[to] > size[hs[now]])\ths[now] = to;\n\t}\n}\nvoid dfs(int now,int topfa)\n{\n\tdfn[now] = ++cnt;\n\tid[cnt] = now;\n\ttop[now] = topfa;\n\tif(hs[now])\t\tdfs(hs[now],topfa);\n\tfor(int i = head[now] , to;i;i = e[i].nxt)\n\t{\n\t\tto = e[i].to;\n\t\tif(to == fa[now] || to == hs[now])\tcontinue;\n\t\tdfs(to,to);\n\t}\n}\nvoid push_down(int p,int l,int r)\n{\n\tint mid = (l + r) >> 1;\n\tsum[ls(p)] = sum[ls(p)] + (mid - l + 1) * tag[p];\n\tsum[rs(p)] = sum[rs(p)] + (r - mid) * tag[p];\n\ttag[ls(p)] = tag[ls(p)] + tag[p];\n\ttag[rs(p)] = tag[rs(p)] + tag[p];\n\ttag[p] = 0;\n}\nvoid chenge(int p,int l,int r,int x,int y,int k)\n{\n\tif(x <= l && r <= y)\n\t{\n\t\tsum[p] = sum[p] + (r - l + 1) * k;\n\t\ttag[p] = tag[p] + k;\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(tag[p])\tpush_down(p,l,r);\n\tif(x <= mid)\tchenge(ls(p),l,mid,x,y,k);\n\tif(y > mid)\t\tchenge(rs(p),mid+1,r,x,y,k);\n\tsum[p] = sum[ls(p)] + sum[rs(p)];\n}\nvoid sec_add(int x,int y,int k)\n{\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]])\tswap(x,y);\n\t\tchenge(1,1,n,dfn[top[x]],dfn[x],k);\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] < dep[y])\tswap(x,y);\n\tchenge(1,1,n,dfn[y],dfn[x],k);\n}\nlong long query(int p,int l,int r,int x,int y)\n{\n\tif(x <= l && r <= y)\treturn sum[p];\n\tint mid = (l + r) >> 1;\n\tlong long res = 0;\n\tif(tag[p])\tpush_down(p,l,r);\n\tif(x <= mid)\tres = res + query(ls(p),l,mid,x,y);\n\tif(y > mid)\t\tres = res + query(rs(p),mid+1,r,x,y);\n\treturn res;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i = 1 , x , y; i < n;i ++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tx ++; y ++;\n\t\tadd(x,y); add(y,x);\n\t}\n\tcnt = 0;  dep[1] = 1;\n\tget_tree(1);\n\tdfs(1,1);\n\tscanf(\"%d\",&m);\n\tfor(int i = 1 , u , v , d;i <= m;i ++)\n\t{\n\t\tscanf(\"%s%d\",s,&u);\n\t\tu ++;\n\t\tif(s[0] == 'A')\n\t\t{\n\t\t\tscanf(\"%d%d\",&v,&d);\n\t\t\tv ++;\n\t\t\tsec_add(u,v,d);\n\t\t}\n\t\telse\tprintf(\"%lld\\n\",query(1,1,n,dfn[u],dfn[u] + size[u] - 1));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1568809279,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "### \u653e\u5728\u524d\u9762\u7684\u524d\u9762\uff1a\u672c\u6587\u6709\u6811\u5256\u56fe\u89e3\n\n\u653e\u5728\u524d\u9762\uff1a\u4e00\u9053\u6811\u5256\u677f\u5b50\u9898\uff0c\u5173\u4e8e\u6811\u5256\u7684\u6559\u7a0b\u7f51\u4e0a\u6570\u4e0d\u80dc\u6570\uff0c\u6211\u5c31\u53ea **\u6982\u8ff0** \u4e00\u4e0b\uff0c\u5c31\u4e0d\u9020\u8f6e\u5b50\u4e86\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1 [OI WIKI](https://oi-wiki.org/graph/hld/)\u3002\n\n## \u4e00. \u8fc7\u7a0b\u6982\u8ff0\n\n#### 0. \u57fa\u7840\uff1a\u90bb\u63a5\u8868\uff0c\u7ebf\u6bb5\u6811\u3002\n\n#### 1. \u7b2c\u4e00\u6b21 dfs\uff1a\n\n\u6c42\u51fa\u8be5\u6709\u6839\u6811\uff08\u5982\u679c\u9898\u76ee\u6ca1\u660e\u786e\u6839\u5c31\u4efb\u9009\u4e00\u4e2a\uff09\u6240\u6709\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u6df1\u5ea6\uff0c\uff08\u4ee5\u4ed6\u4e3a\u6839\u7684\uff09\u5b50\u6811\u7684\u5927\u5c0f\uff0c \u91cd\u513f\u5b50\u3002\n\n#### 2. \u7b2c\u4e8c\u6b21 dfs\uff1a\n\n\u6c42\u51fa\u8be5\u6709\u6839\u6811\u6240\u6709\u8282\u70b9\u7684 dfs \u5e8f\u2014\u2014 $dfs$\uff0c\u6bcf\u4e2a dfs \u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\u2014\u2014 $dfsidx$\uff08$i=dfsidx_{dfs_i}$\uff09\uff0c\u6240\u5728\u91cd\u94fe\u7684\u94fe\u9876\u2014\u2014 $top$\uff0c\u5176\u5b50\u6811\u4e2d\u8282\u70b9\u4e2d dfs \u5e8f\u6700\u5927\u7684\u4e00\u4e2a\u2014\u2014 $bottom$\u3002\u7528\u9014\uff1a\n\n$dfs$\uff1a\u82e5\u8fd9\u68f5\u6811\u4e0a\u672c\u6765\u5c31\u6709\u6743\u503c\u9700\u8981\u7528\u5b83\u8f85\u52a9\u7ed9\u7ebf\u6bb5\u6811\u5efa\u6811\u3002\u672c\u9898\u4e2d\u65e0\u7528\u3002\n\n$dfsidx$\uff1a\u7528\u4ed6\u5c06\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u7684\u7f16\u53f7\u8f6c\u5316\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u7684\u7f16\u53f7\u3002\n\n$top$\uff1a\u8fdb\u884c\u6811\u94fe\u4e0a\u64cd\u4f5c\u65f6\u9700\u8981\u3002\uff08\u8be6\u89c1\u6211\u7684\u4ee3\u7801\u548c[OI WIKI](https://oi-wiki.org/graph/hld/)\uff09\n\n$bottom$\uff1a\u8fdb\u884c\u5b50\u6811\u4e0a\u64cd\u4f5c\u65f6\u9700\u8981\u3002\uff08\u8be6\u89c1\u6211\u7684\u4ee3\u7801\u548c[OI WIKI](https://oi-wiki.org/graph/hld/)\uff09\n\n#### 3. \u6743\u503c\u589e\u51cf\u4e0e\u67e5\u8be2\uff1a\n\n\u8be6\u89e3\u89c1[OI WIKI](https://oi-wiki.org/graph/hld/)\uff0c\u8fd9\u91cc\u53ea\u653e\u4e24\u5f20\u56fe\uff1a\n\n![\u6811\u548cdfs\u5e8f](https://cdn.luogu.com.cn/upload/image_hosting/ct1tktum.png)\n\n\uff08madeby\uff1a\u5927\u4f6c EternalAlexander \u7684 [OI Painter](https://www.luogu.com.cn/discuss/show/41151)\uff09\n\n![\u53e6\u4e00\u5f20dfs\u56fe](https://cdn.luogu.com.cn/upload/image_hosting/j7clempb.png)\n\n\u6709\u70b9\u5148\u5e8f\u904d\u5386\u5185\u5473\u4e86\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u662f\u6839\u5de6\u53f3\uff0c\u800c\u662f\u6839\u91cd\u8f7b\u3002\n\u7531\u6b64\u4e5f\u53ef\u53d1\u73b0\uff1a\u6811\u4e0a\u4e00\u6761\u91cd\u94fe\u6216\u4e00\u68f5\u5b50\u6811\u90fd\u662f\u7ebf\u6bb5\u6811\u4e0a\u8fde\u7eed\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u6b63\u662f\u6811\u5256\u7684\u6838\u5fc3\u3002\n\n## \u4e8c. \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define re register\ntypedef long long LL;\n\nconst int MAXn = 1e5;\nconst int MAXm = MAXn - 1;\n\ntemplate <class T>\ninline void read(T &x) {\n    register char c;while (c = getchar(), c < '0' || c >'9');register T s(c - '0');while (c = getchar(), c >= '0' && c <= '9') {s = (s << 1) + (s << 3) + c - '0';}x = s;\n}\n\nint cntnext, head[MAXn + 10], nex[MAXm + 10], to[MAXm + 10];//////\ninline void Insert(int from, int too) {\t\t\t\t\t\t\t//\n\tnex[++cntnext] = head[from];\t\t\t\t\t\t\t\t//\u90bb\u63a5\u8868 \n\thead[from] = cntnext;\t\t\t\t\t\t\t\t\t\t//\n\tto[cntnext] = too;\t\t\t\t\t\t\t\t\t\t//////\n} \n\nstruct Node {\t\t\t\t\t\t\t\t\t\t\t\t//////\u7ebf\u6bb5\u6811 \n    LL sum;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    int l;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    int r;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    LL add;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n};\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nNode stt[MAXn * 4 + 10];\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nvoid _BuildUseArray_(int nodeid, int l, int r, LL *array) {\t\t//\n    stt[nodeid].l = l;\t\t\t\t\t\t\t\t\t\t\t//\n    stt[nodeid].r = r;\t\t\t\t\t\t\t\t\t\t\t//\n    if (l == r) {\t\t\t\t\t\t\t\t\t\t\t\t//\n        stt[nodeid].sum = array[l];\t\t\t\t\t\t\t\t//\n        return;\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    int mid = (l + r) >> 1;\t\t\t\t\t\t\t\t\t\t//\n    _BuildUseArray_((nodeid << 1), l, mid, array);\t\t\t\t//\n    _BuildUseArray_((nodeid << 1) + 1, mid + 1, r, array);\t\t//\n    stt[nodeid].sum = (stt[(nodeid << 1)].sum + stt[(nodeid << 1) + 1].sum);\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\t\nvoid _Build0_(int nodeid, int l, int r) {\t\t\t\t\t\t//\n\tstt[nodeid].l = l;\t\t\t\t\t\t\t\t\t\t\t//\n\tstt[nodeid].r = r;\t\t\t\t\t\t\t\t\t\t\t//\n\tif (l == r) {\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\treturn;\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\tint mid = (l + r) >> 1;\t\t\t\t\t\t\t\t\t\t//\n\t_Build0_((nodeid << 1), l, mid);\t\t\t\t\t\t\t//\n\t_Build0_((nodeid << 1) + 1, mid + 1, r);\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nvoid _Spread_(int nodeid) {\t\t\t\t\t\t\t\t\t\t//\n    stt[(nodeid << 1)].sum = ( stt[(nodeid << 1)].sum + ((stt[(nodeid << 1)].r - stt[(nodeid << 1)].l + 1) * stt[nodeid].add) );\n    stt[(nodeid << 1) + 1].sum = ( stt[(nodeid << 1) + 1].sum + (stt[nodeid].add * (stt[(nodeid << 1) + 1].r - stt[(nodeid << 1) + 1].l + 1)) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    stt[(nodeid << 1)].add = (stt[(nodeid << 1)].add + stt[nodeid].add);\n    stt[(nodeid << 1) + 1].add = (stt[(nodeid << 1) + 1].add + stt[nodeid].add);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    stt[nodeid].add = 0;\t\t\t\t\t\t\t\t\t\t/// \n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t////////// \u7ebf\u6bb5\u6811 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t///\nvoid _Add_(int nodeid, int l, int r, LL k) {\t\t\t\t\t//\n    if (stt[nodeid].l >= l && stt[nodeid].r <= r) {\t\t\t\t//\n        stt[nodeid].add = (stt[nodeid].add + k);\t\t\t\t//\n        stt[nodeid].sum = (stt[nodeid].sum + k * (stt[nodeid].r - stt[nodeid].l + 1));\n        return;\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    _Spread_(nodeid);\t\t\t\t\t\t\t\t\t\t\t//\n    int mid = (stt[nodeid].l + stt[nodeid].r) >> 1;\t\t\t\t//\n    if (l <= mid)   _Add_((nodeid << 1), l, r, k);\t\t\t\t//\n    if (mid < r)    _Add_((nodeid << 1) + 1, l, r, k);\t\t\t//\n    stt[nodeid].sum = (stt[(nodeid << 1)].sum + stt[(nodeid << 1) + 1].sum);\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nLL _Eva_(int nodeid, int l, int r) {\t\t\t\t\t\t\t//\n    if (stt[nodeid].l >= l && stt[nodeid].r <= r)\t\t\t\t//\n        return stt[nodeid].sum;\t\t\t\t\t\t\t\t\t//\n    _Spread_(nodeid);\t\t\t\t\t\t\t\t\t\t\t//\n    LL val = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t//\n    int mid = (stt[nodeid].l + stt[nodeid].r) >> 1;\t\t\t\t//\n    if (l <= mid)   val = (val + _Eva_((nodeid << 1), l, r));\t//\n    if (mid < r)    val = (val + _Eva_((nodeid << 1) + 1, l, r));\n    return val;\t\t\t\t\t\t\t\t\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nvoid BuildUseArray(int l, int r, LL *array) {\t\t\t\t\t//\n\t_BuildUseArray_(1, l, r, array);\t\t\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nvoid Build0(int l, int r) {\t\t\t\t\t\t\t\t\t\t//\n\tmemset(stt, 0, sizeof(stt));\t\t\t\t\t\t\t\t//\n\t_Build0_(1, l, r);\t\t\t\t\t\t\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nvoid Add(int l, int r, LL k) {\t\t\t\t\t\t\t\t\t//\n\t_Add_(1, l, r, k);\t\t\t\t\t\t\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nLL Eva(int l, int r) {\t\t\t\t\t\t\t\t\t\t\t//\n\treturn _Eva_(1, l, r);\t\t\t\t\t\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//////\u7ebf\u6bb5\u6811 \n\nint fa[MAXn + 10], dep[MAXn + 10], siz[MAXn + 10], hson[MAXn + 10];//\u6811\u5256 \nint Dfs1(int nodeid, int fat, int deep) {\t\t\t\t\t\t////\n\tint size = 1;\t\t\t\t\t\t\t\t\t\t\t\t///\n\tint maxsiz = 0;\t\t\t\t\t\t\t\t\t\t\t\t//\n\tint maxer = 0;\t\t\t\t\t\t\t\t\t\t\t\t//\n\tint eachsiz;\t\t\t\t\t\t\t\t\t\t\t\t//\n\tfa[nodeid] = fat;\t\t\t\t\t\t\t\t\t\t\t//\n\tdep[nodeid] = deep;\t\t\t\t\t\t\t\t\t\t\t//\n\tfor (re int i = head[nodeid]; i; i = nex[i]) {\t\t\t\t//\n\t\teachsiz = Dfs1(to[i], nodeid, deep + 1);\t\t\t\t//\n\t\tsize += eachsiz;\t\t\t\t\t\t\t\t\t\t//\n\t\tif (eachsiz > maxsiz) {\t\t\t\t\t\t\t\t\t//\n\t\t\tmaxsiz = eachsiz;\t\t\t\t\t\t\t\t\t//\n\t\t\tmaxer = to[i];\t\t\t\t\t\t\t\t\t\t//\n\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\tsiz[nodeid] = size;\t\t\t\t\t\t\t\t\t\t\t//\n\thson[nodeid] = maxer;\t\t\t\t\t\t\t\t\t\t//\n\treturn size;\t\t\t\t\t\t\t\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nint cntdfs, dfs[MAXn + 10], dfsidx[MAXn + 10], top[MAXn + 10], bottom[MAXn + 10];\t\t\nvoid Dfs2(int nodeid, int topp) {\t\t\t\t\t\t\t\t//\n\tdfs[++cntdfs] = nodeid;\t\t\t\t\t\t\t\t\t\t//\n\tdfsidx[nodeid] = cntdfs;\t\t\t\t\t\t\t\t\t//\n\ttop[nodeid] = topp;\t\t\t\t\t\t\t\t\t\t\t//\n\tif (hson[nodeid]) {\t\t\t\t\t\t\t\t\t\t\t//\n\t\tDfs2(hson[nodeid], topp);\t\t\t\t\t\t\t\t//\n\t\tfor (int i = head[nodeid]; i; i = nex[i]) {\t\t\t\t//\n\t\t\tif (to[i] != fa[nodeid] && to[i] != hson[nodeid]) {\t//\n\t\t\t\tDfs2(to[i], to[i]);\t\t\t\t\t\t\t\t//\n\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\tbottom[nodeid] = dfs[cntdfs];\t\t\t\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t///\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t////////// \u6811\u5256 \nvoid TreePathAdd(int x, int y, int k) {\t\t\t\t\t\t\t///\n\twhile (top[x] != top[y]) {\t\t\t\t\t\t\t\t\t//\n\t\tif (dep[top[x]] > dep[top[y]]) {\t\t\t\t\t\t//\n\t\t\tswap(x, y);\t\t\t\t\t\t\t\t\t\t\t//\n\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\tAdd(dfsidx[top[y]], dfsidx[y], k);\t\t\t\t\t\t//\n\t\ty = fa[top[y]];\t\t\t\t\t\t\t\t\t\t\t//\n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\tif (dep[x] > dep[y]) {\t\t\t\t\t\t\t\t\t\t//\n\t\tswap(x, y);\t\t\t\t\t\t\t\t\t\t\t\t//\n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\tAdd(dfsidx[x], dfsidx[y], k);\t\t\t\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nLL TreePathEva(int x, int y) {\t\t\t\t\t\t\t\t\t//\n\tLL sum = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\twhile (top[x] != top[y]) {\t\t\t\t\t\t\t\t\t//\n\t\tif (dep[top[x]] > dep[top[y]]) {\t\t\t\t\t\t//\n\t\t\tswap(x, y);\t\t\t\t\t\t\t\t\t\t\t//\n\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\tsum += Eva(dfsidx[top[y]], dfsidx[y]);\t\t\t\t\t//\n\t\ty = fa[top[y]];\t\t\t\t\t\t\t\t\t\t\t//\n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\tif (dep[x] > dep[y]) {\t\t\t\t\t\t\t\t\t\t//\n\t\tswap(x, y);\t\t\t\t\t\t\t\t\t\t\t\t//\n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\tsum += Eva(dfsidx[x], dfsidx[y]);\t\t\t\t\t\t\t//\n\treturn sum;\t\t\t\t\t\t\t\t\t\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nvoid SonTreeAdd(int rootid, int k) {\t\t\t\t\t\t\t//\n\tAdd(dfsidx[rootid], dfsidx[bottom[rootid]], k);\t\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\nLL SonTreeEva(int rootid) {\t\t\t\t\t\t\t\t\t\t//\n\treturn Eva(dfsidx[rootid], dfsidx[bottom[rootid]]);\t\t\t//\n}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//////\u6811\u5256 \n\nint n, q;\nint main() {\n\tread(n);\n\tBuild0(1, n);\n\tfor (re int i = 1, from, to; i < n; ++i) {\n\t\tread(from), read(to);\n\t\tInsert(from + 1, to + 1);\n\t}\n\tDfs1(1, 0, 1);\n\tDfs2(1, 1);\t\n\tread(q);\n\tfor (re int i = 1, from, to, val, opt, root; i <= q; ++i) {\n\t\tgetchar();\n\t\topt = getchar();\n\t\tswitch (opt) {\n\t\tcase 'A':\n\t\t\tread(from), read(to), read(val);\n\t\t\tTreePathAdd(from + 1, to + 1, val);\n\t\t\tbreak;\n\t\tcase 'Q':\n\t\t\tread(root);\n\t\t\tprintf(\"%lld\\n\", SonTreeEva(root + 1));\n\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n\u6700\u540e\uff1a\u5b89\u5229\u4e00\u6ce2\u6211\u7684[\u535a\u5ba2](https://rsdbkhusky.github.io/)\u3002\n\n",
        "postTime": 1624964670,
        "uid": 392727,
        "name": "rsdbk_husky",
        "ccfLevel": 8,
        "title": "Luogu P3833 [SHOI2012]\u9b54\u6cd5\u6811"
    },
    {
        "content": "~~\u8fd9\u662f\u4e00\u7bc7\u826f\u5fc3\u9898\u89e3~~\uff08\u5e9f\u8bdd\n\n\u770b\u5230\u9898\u76ee\uff0c\u60f3\u5230\u8fd9\u662f\u6811\u5256\u7684\u677f\u5b50\u9898\n\n\u56e0\u4e3a\u522b\u7684\u9898\u89e3\u628a\u6811\u5256\u8fc7\u7a0b\u8bb2\u5f97\u5f88\u6e05\u695a\n\n\u90a3\u4e48\u6811\u5256\u7684\u5177\u4f53\u8fc7\u7a0b\u6211\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\n\n\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u66f4\u65b0\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6743\u503c\uff0c\u8fd9\u4e00\u70b9\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\n\n\u770b\u4e86\u4e00\u4e0b\uff0c\u6ca1\u6709\u9898\u89e3\u8be6\u7ec6\u4ecb\u7ecd\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u7684\uff0c\u6765\u7ed9\u5927\u5bb6\u666e\u53ca\u4e00\u4e0b\n\n## \u672c\u9898\u89e3\u91cd\u70b9\uff1a \u5982\u4f55\u7528\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u6a21\u62df\u7ebf\u6bb5\u6811\n\n\u5b89\u5229\u4e00\u4e0b\u5927\u4f6c\u7684[\u535a\u5ba2](https://www.cnblogs.com/RabbitHu/p/BIT.html)\n\n\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u4fee\u6539\u4e3b\u8981\u901a\u8fc7\u5dee\u5206\u5b9e\u73b0\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u51fb\u4e0a\u9762\u535a\u5ba2\u4f7f\u7528\n\n### \u5173\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u901f\u5ea6\uff1a\n\n\u7b54\uff1a\u6811\u72b6\u6570\u7ec4\u7684\u901f\u5ea6\u8fdc\u8fdc\u9ad8\u4e8e\u7ebf\u6bb5\u6811\n\n\u540c\u6837\u662f[P3372](https://www.luogu.com.cn/problem/P3372)\u7ebf\u6bb5\u6811\u677f\u5b50\n\n**\u6811\u72b6\u6570\u7ec4 170 ms**\n\n**\u7ebf\u6bb5\u6811 400+ ms**\n\n\u6240\u4ee5\u5728\u5904\u7406\u4e00\u4e9b\u6c42\u548c\u95ee\u9898\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u6811\u72b6\u6570\u7ec4\n\n\u90a3\u4e48\u8fdb\u5165\u6b63\u9898\uff1a\n\n\u5173\u4e8e $A$ \u64cd\u4f5c\u524d\u6587\u5df2\u7ecf\u63d0\u53ca\uff0c\u7528\u6811\u5256\u7ef4\u62a4\n\n\u5173\u4e8e $Q$ \u64cd\u4f5c,\u6613\u5f97\uff0c\u4e00\u9897\u5b50\u6811\u7684dfs\u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5bf9dfs\u5e8f\u6c42\u548c\uff0c\u8fd9\u662f\u6811\u4e0a\u95ee\u9898\u7684\u5e38\u7528\u6280\u5de7\n\n\u8fd9\u91cc\u6ce8\u610f\u4e00\u4e0b\uff0c\u56e0\u4e3a\u4e2a\u4eba\u4e60\u60ef\uff0c\u6211\u5c06\u8282\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb \n\n\u5927\u5bb6\u5199\u7684\u65f6\u5019\u4e0d\u5fc5\u7167\u7740\u6211\u7684\u4e60\u60ef\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u7f16\u53f7\u4ece0\u5f00\u59cb\uff0c\u6ca1\u6709\u5f71\u54cd\u7684\n\n\u6700\u540e\u6ce8\u610f\u4e00\u4e0b\u7ec6\u8282\uff0cAC\u5f88\u7b80\u5355\u7684 \uff08\u6211\u4e00\u904dAC\u7684 \uff08\u9003\n\n# \u4ee3\u7801\n\n```\n\n#include<bits/stdc++.h>\n//PS \u8bf7\u7ba1\u7406\u5458\u5927\u5927\u81ea\u52a8\u5ffd\u7565\u8fd9\u4e00\u957f\u4e32\u7684\u677f\u5b50\uff0c\u5199\u4e60\u60ef\u4e86\u3002\u3002\nnamespace my_std\n{\n\tusing namespace std;\n\t#define int long long\n\t#define rep(i,a,b) for (int i=(a);i<=(b);i++)\n\t#define drep(i,a,b) for (int i=(a);i>=(b);i--)\n\t#define go(u) for (int i=head[(u)];i;i=e[i].nxt)\n\t#define pf printf\n\t#define writeln(x) write(x),putchar('\\n')\n\t#define writesp(x) write(x),putchar(' ')\n\t#define mem(x,v) memset(x,v,sizeof(x))\n\ttypedef long long ll;\n\tconst int INF=0x7fffffff;\n\tinline int read()\n\t{\n\t\tint sum=0,f=1;\n\t\tchar c=0;\n\t\twhile (!isdigit(c))\n\t\t{\n\t\t\tif (c=='-') f=-1;\n\t\t\tc=getchar();\n\t\t}\n\t\twhile (isdigit(c))\n\t\t{\n\t\t\tsum=(sum<<1)+(sum<<3)+(c^48);\n\t\t\tc=getchar();\n\t\t}\n\t\treturn sum*f;\n\t}\n\tvoid write(int k)\n\t{\n\t\tif (k<0) putchar('-'),k=-k;\n\t\tif (k>=10) write(k/10);\n\t\tputchar(k%10+'0');\n\t}\n}\nusing namespace my_std;\nconst int N=100010;\nint n,cnt,head[N];\nint tree1[N],tree2[N];\nint in[N],num[N],f[N];\nint size[N],son[N],top[N];\nint idx,dep[N];\nstruct edge\n{\n\tint to,nxt;\n}e[N<<1];\ninline int lowbit(int x)\n{\n\treturn x&(-x);\n}\nvoid update(int x,int y)\n{\n\tfor (int i=x;i<=n;i+=lowbit(i))\n\t{\n\t\ttree1[i]+=y;\n\t\ttree2[i]+=x*y;\n\t}\n   //\u6811\u72b6\u6570\u7ec4\u7cbe\u9ad3\u64cd\u4f5c*1 \u4fee\u6539\n}\nvoid modify(int x,int y,int z)\n{\n\tupdate(x,z);\n\tupdate(y+1,-z);\n   //\u6811\u72b6\u6570\u7ec4\u7cbe\u9ad3\u64cd\u4f5c*2 \u5dee\u5206\n}\nint getsum(int x)\n{\n\tint res=0;\n\tfor (int i=x;i>0;i-=lowbit(i))\n\t{\n\t\tres+=tree1[i]*(x+1)-tree2[i];\n\t}\n\treturn res;\n   //\u6811\u72b6\u6570\u7ec4\u7cbe\u9ad3\u64cd\u4f5c*3 \u6c42\u548c\n}\nint query(int l,int r)\n{\n\treturn getsum(r)-getsum(l-1);\n}\nvoid add(int u,int v)\n{\n\te[++cnt].to=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nvoid dfs1(int u,int fa)\n{\n\tdep[u]=dep[fa]+1;\n\tf[u]=fa;\n\tsize[u]=1;\n\tgo(u)\n\t{\n\t\tint v=e[i].to;\n\t\tif (v==fa) continue;\n\t\tdfs1(v,u);\n\t\tsize[u]+=size[v];\n\t\tif (size[son[u]]<size[v])\n\t\t{\n\t\t\tson[u]=v;\n\t\t}\n\t}\n}\nvoid dfs2(int u,int t)\n{\n\tin[u]=++idx;\n\tnum[idx]=u;\n\ttop[u]=t;\n\tif (!son[u]) return;\n\tdfs2(son[u],t);\n\tgo(u)\n\t{\n\t\tint v=e[i].to;\n\t\tif (v==son[u]||v==f[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}\nvoid mark(int x,int y,int z)\n{\n\twhile (top[x]!=top[y])\n\t{\n\t\tif (dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tmodify(in[top[x]],in[x],z);\n\t\tx=f[top[x]];\n\t}\n\tif (dep[x]<dep[y]) swap(x,y);\n\tmodify(in[y],in[x],z);\n}\nsigned main()\n{\n\tn=read();\n\tint u,v,d;\n\trep(i,1,n-1)\n\t{\n\t\tu=read()+1,v=read()+1;\n\t\tadd(u,v),add(v,u);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tint quiz=read();\n\tchar opt;\n\trep(i,1,quiz)\n\t{\n\t\tscanf(\"%s\",&opt);\n\t\tif (opt=='A')\n\t\t{\n\t\t\tu=read()+1,v=read()+1;\n\t\t\td=read();\n\t\t\tmark(u,v,d);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tu=read()+1;\n\t\t\tint ans=query(in[u],in[u]+size[u]-1);\n\t\t\twriteln(ans);\n\t\t}\n\t}\n}\n\n```\n\n\u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u80fd\u7ed9\u5927\u5bb6\u6d88\u9664\u4e00\u4e9b\u56f0\u60d1\n\n\u7801\u5b57\u4e0d\u6613\uff0c\u6c42\u6c42\u7ba1\u7406\u5458\u5927\u5927\u7ed9\u8fc7\uff08QAQ\uff09",
        "postTime": 1581788768,
        "uid": 287850,
        "name": "ZSH_ZSH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "[P3833 [SHOI2012]\u9b54\u6cd5\u6811](https://www.luogu.com.cn/problem/P3833)\n\n\u6811\u94fe\u5256\u5206\u6a21\u677f\u9898\u3002\n\n\u95ee\u9898\u5c31\u662f\u7ef4\u62a4\u6811\u4e0a\u4e00\u4e2a\u70b9\u5230\u53e6\u5916\u4e00\u4e2a\u70b9\u7684\u548c\u4e0e\u4e2d\u9014\u6bcf\u4e2a\u70b9\u7684\u533a\u95f4\u4fee\u6539\u3002\n\n\u5c06\u6574\u4e2a\u6811\u5148 dfs \u4e00\u904d\uff0c\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\uff0c\u7236\u4eb2\uff0c\u91cd\u513f\u5b50\u548c\u5b50\u6811\u5927\u5c0f\u3002\n\n\u63a5\u7740\u518d dfs \u4e00\u904d\uff0c\u8fd9\u4e00\u6b21\u4f7f\u7528\u201c\u91cd\u94fe\u4f18\u5148\u641c\u7d22\u201d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\uff0c\u5148\u5bf9\u5b83\u7684\u91cd\u513f\u5b50\u8fdb\u884c dfs \uff0c\u5c06\u6574\u4e2a\u6811\u91cd\u65b0\u7f16\u53f7\uff0c\u70b9\u503c\u6620\u5c04\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u63a5\u7740\u4f60\u5c31\u4f1a\u53d1\u73b0\uff0c\u6bcf\u4e00\u6761\u91cd\u94fe\u7684\u7f16\u53f7\u90fd\u662f\u8fde\u7eed\u7684\u3002\u8fd9\u6837\u4f60\u7684\u7ef4\u62a4\u6811\u5c31\u53d8\u6210\u4e86\u8bb8\u591a\u6761\u94fe\uff0c\u4f60\u53ea\u9700\u8981\u7ef4\u62a4\u8fd9\u4e9b\u94fe\u5373\u53ef\u3002\u94fe\u4e0a\uff0c\u7ebf\u6027\u7ed3\u6784\u3002\u81ea\u7136\u5c31\u662f\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9898\u540e\u9762\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u533a\u95f4\u4fee\u6539\u7684\u7ef4\u62a4\u548c\u7684\u7ebf\u6bb5\u6811\uff0c\u5199\u5199\u5c31\u8fc7\u4e86\u3002\n\n\u81f3\u4e8e\u6811\u94fe\u5256\u5206\u7684\u64cd\u4f5c\uff0c\u5c31\u662f\u5148\u5728\u8fd9\u4e00\u6761\u94fe\u4e0a\u4fee\u6539\uff0c\u4e0d\u505c\u7684\u5f80\u4e0a\u8df3\u5230\u4e0b\u4e00\u6761\u94fe\u3002\n\nCode\n\n```cpp\n# include <iostream>\n# include <cstdio>\n# define int long long\nusing namespace std;\n\ntypedef long long ll;\n\nconst int N = 2e6 + 5;\n\ntypedef struct {\n    int x , y , next;\n}Edge;\nEdge edge[N];\n\nint E = 0 , elast[N];\n\nvoid add(int x , int y ) {\n    E ++;\n    edge[E].x = x;\n    edge[E].y = y;\n    edge[E].next = elast[x];\n    elast[x] = E;\n}\n\nint f[N] , dep[N] , son[N] , siz[N];\n\nvoid dfs1(int x , int fa) {\n    dep[x] = dep[fa] + 1;\n    f[x] = fa;\n    siz[x] = 1;\n    int maxv = -1;\n    for (int i = elast[x] ; i ; i = edge[i].next) {\n        int y = edge[i].y;\n        if (y != fa) {\n            dfs1(y , x);\n            siz[x] += siz[y];\n            if (siz[y] > maxv) son[x] = y , maxv = siz[y];\n        }\n    }\n}\n\nint top[N] , id[N] , w[N] , W[N] , Cnt = 0;\n\nint n , m , root;\n\nvoid dfs2(int x , int Top) {\n    id[x] = ++ Cnt;\n    w[Cnt] = W[x];\n    top[x] = Top;\n    if (!son[x]) return ;\n    dfs2(son[x] , Top);\n    for (int i = elast[x] ; i ; i = edge[i].next) {\n        int y = edge[i].y;\n        if (y != f[x] && y != son[x]) dfs2(y , y);\n    }\n}\n\ntypedef struct {\n    int l , r , sum , lazy;\n}Node;\nNode tr[N * 4];\n\nvoid pushup(int p) {\n    tr[p].sum = tr[p << 1].sum + tr[p << 1 | 1].sum;\n}\n\nvoid pushdown(int p) {\n    if (tr[p].lazy) {\n        tr[p << 1].lazy += tr[p].lazy;\n        tr[p << 1 | 1].lazy += tr[p].lazy;\n        tr[p << 1].sum += (tr[p << 1].r - tr[p << 1].l + 1) * tr[p].lazy;\n        tr[p << 1 | 1].sum += (tr[p << 1 | 1].r - tr[p << 1 | 1].l + 1) * tr[p].lazy;\n        tr[p].lazy = 0;\n    }\n}\n\nvoid modify(int p , int x , int y , int d) {\n    if (x <= tr[p].l && tr[p].r <= y) {\n        tr[p].lazy += d;\n        tr[p].sum += d * (tr[p].r - tr[p].l + 1);\n        return ;\n    } else {\n        pushdown(p);\n        int mid = (tr[p].l + tr[p].r) >> 1;\n        if (x <= mid) modify(p << 1 , x , y , d);\n        if (y > mid) modify(p << 1 | 1 , x , y , d);\n        pushup(p);\n    }\n}\n\nint query(int p , int x , int y) {\n    if (x <= tr[p].l && tr[p].r <= y) return tr[p].sum;\n    else {\n        pushdown(p);\n        int mid = (tr[p].l + tr[p].r) >> 1 , ans = 0;\n        if (x <= mid) ans += query(p << 1 , x , y);\n        if (y > mid) ans += query(p << 1 | 1 , x , y);\n        return ans;\n    }\n}\n\nvoid build(int p , int x , int y) {\n    tr[p].l = x , tr[p].r = y;\n    if (x == y) {\n        tr[p].sum = w[x];\n        return ;\n    } else {\n        int mid = (x + y) >> 1;\n        build(p << 1 , x , mid) , build(p << 1 | 1 , mid + 1 , y);\n        pushup(p);\n    }\n}\n\nvoid change(int x , int y , int z) {\n\twhile (top[x] != top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]]) swap(x , y);\n\t    modify(1 , id[top[x]] , id[x] , z);\n\t\tx = f[top[x]];\n\t}\n\tif (dep[x] > dep[y]) swap(x , y);\n\tmodify(1 , id[x] , id[y] , z);\n}\n\nsigned main() {\n\tcin >> n;\n\tfor (int i = 1 ; i <= n - 1 ; i ++) {\n\t\tint x , y;\n\t\tcin >> x >> y;\n\t\tx ++ , y ++;\n\t\tadd(x , y);\n\t}\n\tdfs1(1 , 0);\n\tdfs2(1 , 1);\n\tbuild(1 , 1 , n);\n\tcin >> m;\n\twhile (m --) {\n\t\tchar opt;\n\t\tcin >> opt;\n\t\tint x , y , z;\n\t\tif (opt == 'A') {\n\t\t\tcin >> x >> y >> z;\n\t\t\tx ++ , y ++;\n\t\t\tchange(x , y , z);\n\t\t} else {\n\t\t\tcin >> x;\n\t\t\tx ++;\n\t\t\tcout << query(1 , id[x] , id[x] + siz[x] - 1) << endl;\n\t\t}\n\t}\n}\n```",
        "postTime": 1629272280,
        "uid": 335477,
        "name": "ker_xyxyxyx_xxs",
        "ccfLevel": 0,
        "title": "P3833 [SHOI2012]\u9b54\u6cd5\u6811"
    },
    {
        "content": "### \u9898\u610f\n\n\u4e00\u68f5\u6811\uff0c $q$ \u6b21\u8be2\u95ee\uff0c\u82e5 $op = A$ \u5219\u4ee4\u6811\u4e0a $x$ \u5230 $y$ \u8282\u70b9\u6bcf\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u52a0 $d$ \uff0c\u82e5 $op = Q$ \uff0c\u5219\u67e5\u8be2\u4ee5 $u$ \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u548c\u3002\n\n### \u89e3\u6cd5\n\n**\u6811\u5256**\u88f8\u9898\u3002\n\n\u5148\u4ecb\u7ecd\u4e00\u4e0b\u6811\u94fe\u5256\u5206\uff1a\n\n\u6811\u94fe\u5256\u5206\u7528\u4e8e\u5c06\u6574\u68f5\u6811\u5256\u5206\u4e3a\u82e5\u5e72\u6761\u94fe\uff0c\u4f7f\u5b83\u7ec4\u5408\u6210\u7ebf\u6027\u7ed3\u6784\uff0c\u7136\u540e\u7528\u5176\u4ed6\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4fe1\u606f\u3002\n\n\u6811\u94fe\u5256\u5206\u53ef\u4ee5\u5c06\u6811\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8def\u5f84\u5212\u5206\u6210\u4e0d\u8d85\u8fc7 $ log_2n $ \u6761\u8fde\u7eed\u7684\u94fe\uff0c\u6bcf\u6761\u94fe\u4e0a\u7684\u70b9\u6df1\u5ea6\u4e92\u4e0d\u76f8\u540c\u3002\n\n\u5b9a\u4e49\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n**\u91cd\u5b50\u8282\u70b9** \u8868\u793a\u5176\u5b50\u8282\u70b9\u4e2d\u5b50\u6811\u6700\u5927\u7684\u5b50\u7ed3\u70b9\u3002\n\n**\u8f7b\u5b50\u8282\u70b9** \u8868\u793a\u5269\u4f59\u7684\u6240\u6709\u5b50\u7ed3\u70b9\u3002\n\n\u4ece\u8fd9\u4e2a\u7ed3\u70b9\u5230\u91cd\u5b50\u8282\u70b9\u7684\u8fb9\u4e3a **\u91cd\u8fb9**\u3002\n\n\u5230\u5176\u4ed6\u8f7b\u5b50\u8282\u70b9\u7684\u8fb9\u4e3a **\u8f7b\u8fb9**\u3002\n\n\u82e5\u5e72\u6761\u9996\u5c3e\u8854\u63a5\u7684\u91cd\u8fb9\u6784\u6210 **\u91cd\u94fe**\u3002\n\n\u628a\u843d\u5355\u7684\u7ed3\u70b9\u4e5f\u5f53\u4f5c\u91cd\u94fe\uff0c\u90a3\u4e48\u6574\u68f5\u6811\u5c31\u88ab\u5256\u5206\u6210\u82e5\u5e72\u6761\u91cd\u94fe\u3002\n\n\u4f8b\u5982\uff0c\u4e0b\u9762\u8fd9\u68f5\u6811\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/elqshy0n.png)\n\n\u6807\u7ea2\u7684\u662f\u5bf9\u5e94\u8282\u70b9\u7684\u91cd\u513f\u5b50\u548c\u91cd\u94fe\uff1a\n\n\u5bf9\u4e8e\u8282\u70b9 $1$ \uff1a\u91cd\u513f\u5b50\u4e3a $3$\uff1b\n\n\u5bf9\u4e8e\u8282\u70b9 $2$ \uff1a\u91cd\u513f\u5b50\u4e3a $7$\uff1b\n\n\u5bf9\u4e8e\u8282\u70b9 $3$ \uff1a\u91cd\u513f\u5b50\u4e3a $5$\uff1b\n\n\u5bf9\u4e8e\u8282\u70b9 $4$ \uff1a\u91cd\u513f\u5b50\u4e3a $6$\uff1b\n\n\u5bf9\u4e8e\u8282\u70b9 $5$ \uff1a\u91cd\u513f\u5b50\u4e3a $9$\uff1b\n\n\u5bf9\u4e8e\u8282\u70b9 $6$ \uff1a\u91cd\u513f\u5b50\u4e3a $10$\uff1b\n\n\u5bf9\u4e8e\u8282\u70b9 $9$ \uff1a\u91cd\u513f\u5b50\u4e3a $11$\u3002\n\n#### \u5b9e\u73b0\n\n\u6811\u94fe\u5256\u5206\u4e3a\u5c06\u6811\u7ec4\u5408\u6210\u7ebf\u6027\u7ed3\u6784\uff0c\u9700\u8981\u901a\u8fc7\u4e24\u6b21$DFS$\u7ef4\u62a4\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n1.$ fa_x $ \uff1a\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\n\n2.$dep_x$ \uff1a\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\n\n3.$siz_x$ \uff1a\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f(\u542b\u5b83\u81ea\u5df1)\n\n4.$son_x$ \uff1a\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7684\u91cd\u513f\u5b50\u7f16\u53f7\n\n\u7b2c\u4e00\u6b21$DFS$\uff1a\n\n```c++\nvoid dfs1(int u, int F) {\n    fa[u] = F, dep[u] = dep[F] + 1, siz[u] = 1;\n    for (int i = head[u]; i; i = e[i].nxt) {\n        int v = e[i].to; \n\t\tif (v == F) continue;\n        dfs1(v, u);\n        siz[u] += siz[v];\n        if (siz[son[u]] < siz[v]) son[u] = v;\n    }\n}\n```\n\n\u5904\u7406\u5b8c\u4ee5\u4e0a\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u518dDFS\u4e00\u904d\uff0c\u5904\u7406\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u94fe\u9876$top_x$\u3002\n\n\u987a\u5e8f\uff1a**\u5148\u91cd\u540e\u8f7b**\n\n\u7b2c\u4e8c\u6b21$DFS$\uff1a\n\n```cpp\nvoid dfs2(int u, int F) {\n    top[u] = F;\n    if (!son[u]) return;\n    dfs2(son[u], F);\n    for (int i = head[u]; i; i = e[i].nxt) {\n        int v = e[i].to;\n        if (v != fa[u] && v != son[u]) dfs2(v, v);\n    }\n}\n```\n\n\u56de\u5230\u672c\u9898\u2014\u2014\u600e\u6837\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684\u4fe1\u606f\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\uff0c\u5e76\u66f4\u6539\u3002\n\n\u6211\u4eec\u9700\u8981\u5148\u5728dfs2\u4e2d\u52a0\u4e00\u4e2a\u6b65\u9aa4\uff1a\n\n```c++\nint id[N],dfn;//\u65f6\u95f4\u6233\n//in dfs2:\nid[u]=++dfn;//\u8bb0\u5f55\u8be5\u8282\u70b9\u7684\u65f6\u95f4\u6233\n```\n\n\u5728dfs\u65f6\uff0c**\u65f6\u95f4\u6233\u90fd\u662f\u8fde\u7eed\u7684**\uff0c\u6240\u4ee5\u5728\u4fee\u6539\u533a\u95f4\u65f6\uff0c\u53ef\u4ee5\u8fb9\u5f80\u94fe\u9876\u8df3\u8fb9\u66f4\u65b0\u4fe1\u606f\u3002\n\n```cpp\nvoid update_range(int x, int y, int k) {\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]]) swap(x, y);\n        update(1, 1, n, id[top[x]], id[x], k);//\u8fb9\u8df3\u8fb9\u66f4\u65b0\n        x = fa[top[x]];\n    }\n    if (dep[x] > dep[y]) swap(x, y);\n    update(1, 1, n, id[x], id[y], k);\n}\n```\n\n\u540c\u6837\u7684\uff0c\u7531\u4e8e\u65f6\u95f4\u6233\u8fde\u7eed\uff0c\u53ef\u4ee5\u6307\u5b9a\u67e5\u8be2\u7684\u5de6\u7aef\u70b9\u4e3a $id[u]$ \uff0c\u53f3\u7aef\u70b9\u4e3a $id[u]+siz[u]-1$ \u6765\u67e5\u8be2\uff1a\n\n```cpp\nint query_son(int u) { return query(1, 1, n, id[u], id[u] + siz[u] - 1); }\n// siz[u] \u662f\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\uff0cid \u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u67e5 u \u7684\u5b50\u6811\u548c\u5c31\u7b49\u4ef7\u4e8e\u67e5\u8be2 id[u]~id[u]+siz[u]-1\uff08\u6839\u8282\u70b9\u7b97\u4e86\u4e24\u6b21\uff0c\u6240\u4ee5\u51cf\u4e00\uff09\u7684\u533a\u95f4\u548c\u3002\n```\n\n### Code\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define ri register int\nconst int N = 1e5 + 10;\ninline int read() {\n    int x = 0;\n    char ch = getchar();\n    bool f = 1;\n    while (!isdigit(ch)) {\n        if (ch == '-') f = 0;\n        ch = getchar();\n    }\n    while (isdigit(ch)) {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return f ? x : -x;\n}\nstruct Edge {\n    int to, nxt;\n} e[N << 1];\nint head[N], cnt;\ninline void add(int u, int v) {\n    e[++cnt].to = v;\n    e[cnt].nxt = head[u];\n    head[u] = cnt;\n}\nint n;\n#define Ergodic(u) for (ri i = head[u]; i; i = e[i].nxt)\nnamespace SegmentTree {\nstruct segmenttree {\n    int v, tag;\n} t[N << 2];\n#define ls u << 1\n#define rs u << 1 | 1\n#define mid ((l + r) >> 1)\ninline void push_up(int u) { t[u].v = t[ls].v + t[rs].v; }\ninline void push_down(int u, int l, int r) {\n    t[ls].tag += t[u].tag, t[rs].tag += t[u].tag;\n    t[ls].v += t[u].tag * (mid - l + 1);\n    t[rs].v += t[u].tag * (r - mid);\n    t[u].tag = 0;\n}\nvoid update(int u, int l, int r, int ql, int qr, int k) {\n    if (ql > r || qr < l) return;\n    if (ql <= l && r <= qr) {\n        t[u].tag += k;\n        t[u].v += k * (r - l + 1);\n        return;\n    }\n    push_down(u, l, r);\n    update(ls, l, mid, ql, qr, k);\n    update(rs, mid + 1, r, ql, qr, k);\n    push_up(u);\n}\nint query(int u, int l, int r, int ql, int qr) {\n    if (ql > r || qr < l) return 0;\n    if (ql <= l && r <= qr) return t[u].v;\n    push_down(u, l, r);\n    int lson = query(ls, l, mid, ql, qr);\n    int rson = query(rs, mid + 1, r, ql, qr);\n    return lson + rson;\n}\n}  // namespace SegmentTree\nusing namespace SegmentTree;\nnamespace Tree_Chain_Divide {\nint dep[N], son[N], fa[N], top[N], siz[N];\nvoid dfs1(int u, int F) {\n    siz[u] = 1, fa[u] = F, dep[u] = dep[F] + 1;\n    Ergodic(u) {\n        int v = e[i].to;\n        if (v == F) continue;\n        dfs1(v, u);\n        siz[u] += siz[v];\n        if (siz[v] > siz[son[u]]) son[u] = v;\n    }\n}\nint id[N], dfn;\nvoid dfs2(int u, int topf) {\n    top[u] = topf;\n    id[u] = ++dfn;\n    if (!son[u]) return;\n    dfs2(son[u], topf);\n    Ergodic(u) {\n        int v = e[i].to;\n        if (v == son[u] || v == fa[u]) continue;\n        dfs2(v, v);\n    }\n}\nvoid update_range(int x, int y, int k) {\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]]) swap(x, y);\n        update(1, 1, n, id[top[x]], id[x], k);\n        x = fa[top[x]];\n    }\n    if (dep[x] > dep[y]) swap(x, y);\n    update(1, 1, n, id[x], id[y], k);\n}\nint query_son(int u) { return query(1, 1, n, id[u], id[u] + siz[u] - 1); }\n}  // namespace Tree_Chain_Divide\nusing namespace Tree_Chain_Divide;\nsigned main() {\n    n = read();\n    for (ri i = 1; i < n; i++) {\n        int u = read(), v = read();\n        add(u + 1, v + 1), add(v + 1, u + 1);\n    }\n    dfs1(1, 0), dfs2(1, 1);\n    int q = read();\n    while (q--) {\n        char op;\n        scanf(\" %c\", &op);\n        if (op == 'A') {\n            int u = read(), v = read(), d = read();\n            update_range(u + 1, v + 1, d);\n        } else {\n            int u = read();\n            printf(\"%lld\\n\", query_son(u + 1));\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1624967101,
        "uid": 375030,
        "name": "CG__HeavenHealer",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011 P3833  \u9b54\u6cd5\u6811"
    },
    {
        "content": "\u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a\u6811\u94fe\u5256\u5206\uff0c\u53ef\u4ee5\u5148\u5c1d\u8bd5\u8fd9\u9053\u6a21\u677f\u9898\uff1a[\u3010\u6a21\u677f\u3011\u8f7b\u91cd\u94fe\u5256\u5206](https://www.luogu.com.cn/problem/P3384)  \n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u8bf4\u662f\u6811\u94fe\u5256\u5206\u5957\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\u9898\uff0c\u849f\u84bb\u7684\u6211\u82b1\u4e86\u4e00\u4e0b\u5348\u65f6\u95f4\u6765\u7ec3\u6811\u94fe\u5256\u5206\u540e\u7ec8\u4e8e~~\u597d\u50cf~~\u641e\u61c2\u4e86\u5462\uff01\u867d\u7136\u770b\u5230\u5176\u4ed6\u9898\u89e3\u6709\u7528LCT\u505a\uff0c\u4f46\u662f\u849f\u84bb\u7684\u6211\u8868\u793a\u6211\u5e76\u4e0d\u4f1a\u3002\n\n## \u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u6811\u94fe\u5256\u5206\uff1a\n\n![\u56fe\u72471.png](https://cdn.luogu.com.cn/upload/image_hosting/2ad9tlva.png)\n\n\n\u6839\u636e\u6811\u7684\u6982\u5ff5\uff0c\u6811\u4e0a\u5b58\u5728\u7740\u8bb8\u591a\u7684\u94fe\uff0c\u5982\u672c\u56fe\u4e2d\uff0c\u5c31\u542b\u6709\u5f88\u591a\u7684\u94fe\uff0c\u4f8b\u59823-2-1-9-10-11\u5c31\u662f\u5176\u4e2d\u4e00\u6761\u94fe\u3002\n\n\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u627e\u51fa\u4e86\u4e00\u6761\u94fe\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u5728\u94fe\u4e0a\u7684\u64cd\u4f5c\u662f\u7ebf\u6027\u7684\u3002\u6b64\u5916\uff0c\u4e00\u6761\u94fe\u5468\u56f4\u70b9\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6761\u94fe\u5b9e\u73b0\u5feb\u901f\u7684\u7ef4\u62a4\u3002\n\n\u4f8b\u5982\uff0c\u8fd8\u662f\u4e0a\u56fe\u4e2d\u76843-2-1-9-10-11\u8fd9\u4e00\u6761\u94fe\uff0c\u5f53\u6211\u4eec\u627e\u51fa\u5b83\u65f6\uff0c\u4fbf\u53ef\u4ee5\u5feb\u901f\u7684\u7ef4\u62a44\u8fd9\u4e2a\u70b9\uff08\u63074\u5411\u4e0a\u4e00\u6b65\u5c31\u53ef\u4ee5\u8fdb\u5165\u94fe\u4e2d\uff0c\u590d\u6742\u5ea6\u51e0\u4e4e\u5c5e\u4e8e\u5e38\u6570\uff09\uff0c\u51cf\u5c11\u4e86\u6811\u578b\u7ed3\u6784\u7684\u590d\u6742\u5ea6\u3002\n\n\u7efc\u4e0a\u53ef\u77e5\uff0c\u94fe\u5728\u6811\u578b\u7ed3\u6784\u4e2d\u7684\u5730\u4f4d\u975e\u5e38\u91cd\u8981\uff0c\u4e00\u9897\u6811\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u5256\u5206\u6210\u591a\u6761\u94fe\uff0c\u4ece\u800c\u5c06\u6811\u578b\u7ed3\u6784\u4f18\u5316\u6210\u63a5\u8fd1\u7ebf\u6027\u7ed3\u6784\uff0c\u8fdb\u800c\u8fd0\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\n\n\u6811\u94fe\u5256\u5206\u5206\u4e3a\uff1a\u91cd\u94fe\u5256\u5206\u3001\u957f\u94fe\u5256\u5206\u3001\u5b9e\u94fe\u5256\u5206\uff0c\u4e00\u822c\u8bf4\u6811\u94fe\u5256\u5206\u6307\u7684\u662f\u91cd\u94fe\u5256\u5206\u3002\n\n\u6211\u4eec\u7ed9\u51fa\u4e00\u4e9b\u5b9a\u4e49\uff0c\u5e76\u6309\u4ee5\u4e0b\u89c4\u5219\u5212\u5206\u4e00\u9897\u6811\uff1a\n\n### \u5b9a\u4e49\uff1a\n\n\n **\u91cd\u5b50\u8282\u70b9**\u2014\u2014\u8868\u793a\u5176\u5b50\u8282\u70b9\u4e2d\u5b50\u6811\u6700\u5927\u7684\u5b50\u7ed3\u70b9\u3002\u5982\u679c\u6709\u591a\u4e2a\u5b50\u6811\u6700\u5927\u7684\u5b50\u7ed3\u70b9\uff0c\u53d6\u5176\u4e00\u3002\u5982\u679c\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5c31\u65e0\u91cd\u5b50\u8282\u70b9\u3002\n \n**\u8f7b\u5b50\u8282\u70b9**\u2014\u2014\u8868\u793a\u5269\u4f59\u7684\u6240\u6709\u5b50\u7ed3\u70b9\u3002\n\n\u4ece\u8fd9\u4e2a\u7ed3\u70b9\u5230\u91cd\u5b50\u8282\u70b9\u7684\u8fb9\u4e3a\u91cd\u8fb9\u3002\n\n\u5230\u5176\u4ed6\u8f7b\u5b50\u8282\u70b9\u7684\u8fb9\u4e3a\u8f7b\u8fb9\u3002\n\n\u82e5\u5e72\u6761\u9996\u5c3e\u8854\u63a5\u7684\u91cd\u8fb9\u6784\u6210\u91cd\u94fe\u3002\n\n\u628a\u843d\u5355\u7684\u7ed3\u70b9\u4e5f\u5f53\u4f5c\u91cd\u94fe\uff0c\u90a3\u4e48\u6574\u68f5\u6811\u5c31\u88ab\u5256\u5206\u6210\u82e5\u5e72\u6761\u91cd\u94fe\u3002\n\n\u5982\u56fe\u6240\u793a\uff0c\u5f53\u524d\u4e00\u9897\u6811\u5df2\u7ecf\u88ab\u6309\u4e0a\u8ff0\u8981\u6c42\u5206\u6210\u4e86\u82e5\u5e72\u6761\u94fe\u3002\n\n![\u56fe\u72472.png](https://cdn.luogu.com.cn/upload/image_hosting/cjl04brb.png)\n\n### \u4ee3\u7801\u5b9e\u73b0\uff1a\u4e24\u6b21dfs\n\n\n**\u7b2c\u4e00\u6b21dfs\uff1a**\n\nfa\uff1a\u8bb0\u5f55\u7236\u8282\u70b9\n\ndep\uff1a\u8bb0\u5f55\u5f53\u524d\u6df1\u5ea6\n\nsize\uff1a\u8bb0\u5f55\u5b50\u6811\u89c4\u6a21\n\nson\uff1a\u5f53\u524d\u91cd\u513f\u5b50\u662f\u8c01,\u8fd9\u91cc\u4e3b\u8981\u5904\u7406\u51fa\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u89c4\u6a21\u4ee5\u53ca\u627e\u51fa\u4e86\u91cd\u513f\u5b50\uff0c\u4e3a\u63a5\u4e0b\u6765\u5256\u5206\u505a\u51c6\u5907\n```cpp\nvoid dfs1(int x,int Fa)\n{\n\tfa[x]=Fa;\n\tsize[x]=1;\n\tdep[x]=dep[Fa]+1;\n\tfor(int i=head[x];i;i=nxt[i])\n\tif(to[i]!=fa[x])\n\t{\n\t\tdfs1(to[i]);\n\t\tsize[x]+=size[to[i]];\n\t\tif(size[son[x]]<size[to[i]])son[x]=to[i];\n\t}\n}\n```\n**\u7b2c\u4e8c\u6b21dfs\uff1a**\n\ntop\uff1a\u5f53\u524d\u6bcf\u4e2a\u70b9\u6240\u5728\u94fe\u7684\u9876\u7aef\u8282\u70b9\n\nseg\u3001rev\uff1a\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u6309\n\u6309\u94fe\u7684\u987a\u5e8f\u91cd\u65b0\u7f16\u53f7\uff0c\u8fd9\u6837\u540c\u4e00\u94fe\u4e0a\u7684\u70b9\u7f16\u53f7\u76f8\u90bb\n\n\u8fd9\u91cc\u627e\u51fa\u4e86\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u94fe\u7684\u9876\u70b9\uff0c\u4ee5\u6b64\u5212\u5206\u94fe\n\n```cpp\nvoid dfs2(int x)\n{\n\tif(son[fa[x]]!=x)top[x]=x;\n\telse top[x]=top[fa[x]];\n\tseg[x]=++dfn;\n\trev[dfn]=x;\n\tif(son[x])dfs2(son[x]);\n\tfor(rg i=head[x];i;i=nxt[i])\n\tif(to[i]!=fa[x]&&to[i]!=son[x])\n\tdfs2(to[i]);\n}\n```\n### \u91cd\u94fe\u5256\u5206\u7684\u6027\u8d28:\n\n\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u6761\u91cd\u94fe \u3002\n\n\u6240\u6709\u7684\u91cd\u94fe\u5c06\u6574\u68f5\u6811 \u5b8c\u5168\u5256\u5206 \u3002\n\n\u5728\u5256\u5206\u65f6\u4f18\u5148\u904d\u5386\u91cd\u513f\u5b50\uff0c\u6700\u540e\u91cd\u94fe\u7684 DFS \u5e8f\u5c31\u4f1a\u662f\u8fde\u7eed\u7684\u3002\n\n\u4e00\u9897\u5b50\u6811\u5185\u7684 DFN \u5e8f\u662f\u8fde\u7eed\u7684\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u5411\u4e0b\u7ecf\u8fc7\u4e00\u6761 \u8f7b\u8fb9 \u65f6\uff0c\u6240\u5728\u5b50\u6811\u7684\u5927\u5c0f\u81f3\u5c11\u4f1a\u9664\u4ee5\u4e8c\u56e0\u6b64\u6bcf\u8fc7\u4e00\u6761\u94fe\u590d\u6742\u5ea6\u81f3\u5c11\u9664\u4ee5\u4e8c\uff0c\u6700\u7ec8\u590d\u6742\u5ea6\u4e3alogn\u7ea7\u522b\u3002\n\n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6811\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8def\u5f84\uff0c\u628a\u5b83\u62c6\u5206\u6210\u4ecelca\u5206\u522b\u5411\u4e24\u8fb9\u5f80\u4e0b\u8d70\uff0c\u5206\u522b\u6700\u591a\u8d70logn\u6b21\uff0c\u56e0\u6b64\uff0c\u6811\u4e0a\u7684\u6bcf\u6761\u8def\u5f84\u90fd\u53ef\u4ee5\u88ab\u62c6\u5206\u6210\u4e0d\u8d85\u8fc7logn\u6761\u91cd\u94fe\u3002\n\n _<\u6b64\u5904\u4ecb\u7ecd\u5927\u591a\u5f15\u7528xj\u5b66\u957f\u7684\u7ec6\u5fc3\u8bb2\u89e3\u5566~~~>_ \n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5e72\u5f88\u591a\u4e8b\u60c5\uff0c\u4f8b\u5982 \n\n### \u5957\u7ebf\u6bb5\u6811\uff01\uff01\n\n\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\u6253\u4e0a\u53bb\u4e86\uff01\uff01\n\n\u8fd9\u9053\u9898\u5c31\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u4ee5\u53ca\u533a\u95f4\u6700\u5927\u503c\uff0c\u4f46\u56e0\u4e3a\u6811\u94fe\u5256\u5206\u540e\u6bcf\u6b21change_son\u4fee\u6539\u7684\u7684\u533a\u95f4\u662f\u4eceseg[ x ]\u5230seg[ x ]+size[ x ]-1\uff08\u76f8\u5f53\u4e8eseg\u8bb0\u5f55\u7684\u662fdfs\u5e8f\u5566\uff09\n\n\n\uff08\u5e76\u4e14\u8fd9\u9053\u9898\u8981\u8bb0\u5f97\u5f00long long\u5466\uff09\n\n# Code:\n\n~~< \u63d0\u4f9b\u81ea\u8ba4\u4e3a\u6bd4\u8f83\u6e05\u65b0\u7684\u7801\u98ce >~~\n\n```cpp\n#define Flowery\n#define maxn 400000\n#define ll long long\n#define rg register long long\n#include<bits/stdc++.h>\nusing namespace std;\nint T,n;\nstruct node\n{\n\tll l,r,val,maxx,lazy;\n}gy[maxn];\nint to[maxn],head[maxn],nxt[maxn],cnt;\ninline void add(ll x,ll y)\n{\n\tto[++cnt]=y;\n\tnxt[cnt]=head[x];\n\thead[x]=cnt;\n}\nint fa[maxn],dep[maxn],size[maxn],son[maxn];\nvoid dfs1(ll x)\n{\n\tsize[x]=1;\n\tdep[x]=dep[fa[x]]+1;\n\tfor(rg i=head[x];i;i=nxt[i])\n\tif(to[i]!=fa[x])\n\t{\n\t\tdfs1(to[i]);\n\t\tsize[x]+=size[to[i]];\n\t\tif(size[son[x]]<size[to[i]])son[x]=to[i];\n\t}\n}\nint top[maxn],seg[maxn],rev[maxn],dfn;\nvoid dfs2(ll x)\n{\n\tif(son[fa[x]]!=x)top[x]=x;\n\telse top[x]=top[fa[x]];\n\tseg[x]=++dfn;\n\trev[dfn]=x;\n\tif(son[x])dfs2(son[x]);\n\tfor(rg i=head[x];i;i=nxt[i])\n\tif(to[i]!=fa[x]&&to[i]!=son[x])dfs2(to[i]);\n}\nvoid push_up(ll x)\n{\n\tgy[x].val=gy[2*x].val+gy[2*x+1].val;\n}\nvoid push_down(ll x)\n{\n\tif(gy[x].lazy)\n\t{\n\t\tgy[2*x].lazy+=gy[x].lazy;\n\t\tgy[2*x+1].lazy+=gy[x].lazy;\n\t\tgy[2*x].val+=(gy[2*x].r-gy[2*x].l+1)*gy[x].lazy;\n\t\tgy[2*x+1].val+=(gy[2*x+1].r-gy[2*x+1].l+1)*gy[x].lazy;\n\t\tgy[x].lazy=0;\n\t}\n}\nvoid build(ll x,ll l,ll r)\n{\n\tgy[x].l=l;gy[x].r=r;\n\tif(l==r)return;\n\tll mid=(l+r)>>1;\n\tbuild(2*x,l,mid);\n\tbuild(2*x+1,mid+1,r);\n\tpush_up(x);\n}\nvoid modify(ll x,ll l,ll r,ll v)\n{\n\tif(gy[x].l>r||gy[x].r<l)return;\n\tif(l<=gy[x].l&&gy[x].r<=r)\n\t{\n\t\tgy[x].lazy+=v;\n\t\tgy[x].val+=(gy[x].r-gy[x].l+1)*v;\n\t\treturn;\n\t}\n\tpush_down(x);\n\tmodify(2*x,l,r,v);\n\tmodify(2*x+1,l,r,v);\n\tpush_up(x);\n}\nll query(ll x,ll l,ll r)\n{\n\tif(gy[x].l>r||gy[x].r<l)return 0;\n\tif(l<=gy[x].l&&gy[x].r<=r)return gy[x].val;\n\tpush_down(x);\n\treturn query(2*x,l,r)+query(2*x+1,l,r);\n}\nvoid change(ll u,ll v,ll val)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tmodify(1,seg[top[u]],seg[u],val);\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]<dep[v])swap(u,v);\n\tmodify(1,seg[v],seg[u],val);\n}\nll u,v,d;\nchar opt[2];\nint main()\n{\n\tscanf(\"%lld\",&n);fa[1]=-1;\n\tfor(rg i=1;i<n;i++)\n\t{\n\t\tscanf(\"%lld%lld\",&u,&v);u++;v++;\n\t\tadd(u,v);add(v,u);\n\t\tfa[v]=u;\n\t}\n\tdep[1]=1;dfs1(1);dfs2(1);build(1,1,n);\n\tscanf(\"%lld\",&T);\n\twhile(T--)\n\t{\n\t\tscanf(\"%s\",opt);\n\t\tif(opt[0]=='A')\n\t\t{\n\t\t\tscanf(\"%lld%lld%lld\",&u,&v,&d);u++;v++;\n\t\t\tchange(u,v,d);\n\t\t}\n\t\tif(opt[0]=='Q')\n\t\t{\n\t\t\tscanf(\"%lld\",&u);u++;\n\t\t\tprintf(\"%lld\\n\",query(1,seg[u],seg[u]+size[u]-1));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n(11-3 modify:\u56fe\u7247\u4e0d\u5c0f\u5fc3\u5d29\u5566)\n\n[my blog](https://www.luogu.com.cn/blog/flowery/)",
        "postTime": 1604233217,
        "uid": 240952,
        "name": "Flowery",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "## \u9898\u89e3\uff1a\n\n\u4e00\u9053\u6811\u94fe\u5256\u5206\u7684\u88f8\u9898\u3002\n\n\u5f53\u7136\uff0c\u500d\u589eLCA\u7684\u8f83\u6734\u7d20\u505a\u6cd5\u5982\u679c\u6570\u636e\u6c34\u4e00\u4e9b\u7684\u8bdd\u662f\u8fc7\u4e0d\u53bb\u7684\uff0c\u5efa\u8bae\u5927\u5bb6\u501f\u6b64\u673a\u4f1a\u5b66\u4e00\u4e0b\u6811\u94fe\u5256\u5206\u3002\n\n\uff08\u987a\u4fbf\u63a8\u4e0b\u81ea\u5df1\u8bb2\u6811\u94fe\u5256\u5206\u7684~~\u6bd4\u8f83\u597d~~\u7684\u535a\u5ba2,\u535a\u5ba2\u9605\u8bfb\u53e3\u5473\u66f4\u4f73\uff09\uff1a\n\n\n\n[\u6d45\u8c08\u6811\u94fe\u5256\u5206](https://www.cnblogs.com/fusiwei/p/11519470.html)\n\n\n\n# \u6d45\u8c08\u6811\u94fe\u5256\u5206\n\n\u672c\u7bc7\u968f\u7b14\u8bb2\u89e3\u56fe\u8bba\u4e2d\u7684\u6811\u94fe\u5256\u5206\u76f8\u5173\u5185\u5bb9\u3002\n\n\u6811\u94fe\u5256\u5206\u662f\u6811\u4e0a\u95ee\u9898\u7684\u6781\u5e38\u7528\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8bf4\u4e0d\u4f1a\u6811\u94fe\u5256\u5206\uff0c\u4e00\u534a\u4ee5\u4e0a\u7684\u6811\u4e0a\u96be\u9898\u90fd\u6beb\u65e0\u601d\u8def\u3002\u5176\u91cd\u8981\u6027\u4e0d\u8a00\u800c\u55bb\u3002\u60f3\u8981\u6d41\u7545\u9605\u8bfb\u672c\u7bc7\u535a\u5ba2\u5e76\u5b66\u4e60\u6811\u94fe\u5256\u5206\uff0c\u9700\u8981\u8bfb\u8005\u5177\u6709\u4e00\u5b9a\u7684\u56fe\u8bba\u57fa\u7840\uff0c\u5e76\u5bf9\u6811\u5f62\u7ed3\u6784\u548c\u6df1\u641c\u7b97\u6cd5\u6709\u57fa\u672c\u7684\u8ba4\u8bc6\u3002\u7531\u4e8e\u672c\u849f\u84bb\u7684\u6c34\u5e73\u53ef\u80fd\u4e0d\u8db3\u652f\u6301\u5f3a\u5927\u7684\u6811\u5256\u7684\u8bb2\u89e3\uff0c\u6240\u4ee5\u9898\u89e3\u4e2d\u7684\u4e00\u4e9b\u4e0d\u8db3\u4e4b\u5904\u656c\u8bf7\u5927\u4f6c\u4eec\u6307\u6b63\u3002\n\n---\n\n## \u6811\u94fe\u5256\u5206\u7684\u57fa\u672c\u6982\u5ff5\n\n\u6811\u94fe\u5256\u5206\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u628a\u6811\u62c6\u6210\u94fe\u3002\u6839\u636e\u6811\u7684\u5f62\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u53d1\u73b0\uff0c\u4efb\u4f55\u4e00\u68f5\u6811\u90fd\u4f1a\u6709\u5f88\u591a\u6761\u94fe\u6b63\u597d\u628a\u6811\u5b8c\u5168\u62c6\u5206\u3002\u4f46\u662f\u6811\u94fe\u5256\u5206\u5e76\u4e0d\u662f\u5355\u5355\u5730\u628a\u6811\u62c6\u6210\u94fe\u3002\u5b83\u62c6\u51fa\u7684\u94fe\u6709**\u201c\u8f7b\u91cd\u4e4b\u5206\u201d**\u3002\n\n\u90a3\u4e48\u4ec0\u4e48\u662f\u8f7b\u91cd\u94fe\u5462\uff1f\n\n\u8fd9\u5c31\u6d89\u53ca\u5230\u4e86\u6811\u94fe\u5256\u5206\u7684\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u540d\u8bcd\uff0c\u5982\u4e0b\u8ff0\u3002\n\n* **\u91cd\u513f\u5b50**\uff1a\u6211\u4eec\u77e5\u9053\uff0c\u9664\u53f6\u5b50\u8282\u70b9\u4e4b\u5916\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u6709\u82e5\u5e72\u4e2a\u513f\u5b50\u8282\u70b9\uff0c\u800c\u53ea\u8981\u8fd9\u4e2a\u8282\u70b9\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5b83\u90fd\u662f\u4e00\u68f5\u5b50\u6811\u7684\u6839\u3002\u90a3\u4e48\uff0c\u8fd9\u4e2a\u7236\u4eb2\u8282\u70b9\u5c31\u6709\u5f88\u591a\u4e2a\u513f\u5b50\uff0c\u800c\u4e00\u5b9a\u4f1a\u6709\u4e00\u4e2a\u513f\u5b50\u7684\u513f\u5b50\u6700\u591a\uff0c\u4e5f\u5c31\u662f\u5b50\u6811\u6700\u5927\u3002\u90a3\u4e48\u8fd9\u4e2a\u513f\u5b50\u8282\u70b9\u5c31\u53eb\u505a$x$\u7684\u91cd\u513f\u5b50\u3002\n* **\u8f7b\u513f\u5b50**\uff1a\u4e0e\u91cd\u513f\u5b50\u5bf9\u7167\u7406\u89e3\uff0c\u91cd\u513f\u5b50\u662f\u552f\u4e00\u7684\uff0c\u9664\u4e86\u91cd\u513f\u5b50\u4e4b\u5916\u7684\u6240\u6709\u513f\u5b50\u90fd\u662f\u8f7b\u513f\u5b50\u3002\n* **\u91cd\u8fb9**\uff1a\u7236\u8282\u70b9\u4e0e\u91cd\u513f\u5b50\u7ec4\u6210\u7684\u8fb9\uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u7236\u8282\u70b9\u4e0d\u4e00\u5b9a\u4e5f\u662f\u91cd\u513f\u5b50\uff09\n* **\u8f7b\u8fb9**\uff1a\u9664\u91cd\u8fb9\u4e4b\u5916\u7684\u8fb9\u3002\n* **\u91cd\u94fe**\uff1a\u7531\u91cd\u8fb9\u8fde\u8d77\u6765\u7684\u94fe\u53eb\u505a\u91cd\u94fe\uff0c\u7279\u522b\u5730\uff0c\u4e00\u6761\u91cd\u94fe\u7684\u9876\u90e8\u662f\u4e00\u4e2a\u8f7b\u513f\u5b50\u3002\n* **\u8f7b\u94fe**\uff1a\u7531\u8f7b\u8fb9\u8fde\u8d77\u6765\u7684\u94fe\u53eb\u505a\u8f7b\u94fe\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u5f20\u56fe\u6765\u76f4\u89c2\u7406\u89e3\uff1a\n\n![](https://img2018.cnblogs.com/blog/1738131/201909/1738131-20190917105354236-601205151.png)\n\n\n\n---\n\n## \u6811\u94fe\u5256\u5206\u89e3\u51b3\u7684\u95ee\u9898\n\n\u6811\u94fe\u5256\u5206\u662f\u6811\u72b6\u7ed3\u6784\u7684\u64cd\u4f5c\uff0c\u81ea\u7136\u89e3\u51b3\u7684\u662f\u6811\u4e0a\u95ee\u9898\u3002\u6839\u636e\u6211\u4eec\u4ee5\u4e0a\u8bb2\u8ff0\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u68f5\u6811\u8fdb\u884c\u8f7b\u91cd\u94fe\u7684\u6811\u94fe\u5256\u5206\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u4e00\u6761\u94fe\u4e0a\u7684\u8282\u70b9\u5904\u7406\u6210\u533a\u95f4\u7684\u5f62\u5f0f\uff08\u8fd9\u4e2a\u7406\u89e3\u975e\u5e38\u91cd\u8981\uff01\uff09\u4ece\u800c\u628a\u6811\u4e0a\u7684\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u533a\u95f4\u95ee\u9898\u8fdb\u884c\u6c42\u89e3\u3002\u81f3\u4e8e\u533a\u95f4\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6c42\u89e3\uff0c\u6bd4\u5982\u7ebf\u6bb5\u6811\u3001\u6811\u72b6\u6570\u7ec4\u7b49\u3002\n\n\u4e00\u822c\u6765\u8bb2\uff0c\u6811\u94fe\u5256\u5206\u53ef\u4ee5\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898\uff1a\n\n* \u4fee\u6539\u4e24\u70b9\u8def\u5f84\u4e0a\u5404\u70b9\u7684\u503c\n\n* \u67e5\u8be2\u4e24\u70b9\u8def\u5f84\u4e0a\u5404\u70b9\u7684\u503c\n\n* \u4fee\u6539\u67d0\u70b9\u5b50\u6811\u4e0a\u5404\u70b9\u7684\u503c\n\n* \u67e5\u8be2\u67d0\u70b9\u5b50\u6811\u4e0a\u5404\u70b9\u7684\u503c\n\n* \u6c42\u89e3LCA\u95ee\u9898\n\n---\n\n## \u6811\u94fe\u5256\u5206\u7684\u6df1\u641c\u9884\u5904\u7406\n\n\u6839\u636e\u4ee5\u4e0a\u7684\u6982\u5ff5\u7406\u89e3\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u82e5\u8981\u6c42\u89e3\u4ee5\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u7528\u6811\u94fe\u5256\u5206\u7684\u597d\u5904\u5c31\u662f\u628a\u6811\u4e0a\u95ee\u9898\u53d8\u6210\u533a\u95f4\u95ee\u9898\uff0c\u800c\u533a\u95f4\u95ee\u9898\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\u6c42\u89e3\uff0c\u6bd4\u5982\u7ebf\u6bb5\u6811\u3002\u4f46\u662f\u533a\u95f4\u9700\u8981\u7f16\u53f7\u8fde\u7eed\uff0c\u5982\u679c\u7528\u539f\u6811\u7684\u8282\u70b9\u7f16\u53f7\u6765\u8fdb\u884c\u201c\u533a\u95f4\u6c42\u89e3\u201d\uff0c\u90a3\u663e\u7136\u662f\u4e0d\u884c\u7684\u3002\u56e0\u4e3a\u4e00\u6761\u94fe\u4e0a\u7684\u8282\u70b9\u53ef\u80fd\u662f\u201c3.5.7.8.2.1\u201d\u8fd9\u6837\u7684\u4e71\u5e8f\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u4e00\u6bb5\u201c\u8fde\u7eed\u7684\u6570\u5217\u201d\uff0c\u6240\u4ee5\u8fd9\u65f6\u4e0d\u80fd\u8f6c\u6362\u6210\u7ebf\u6bb5\u6811\u6c42\u89e3\u3002\u4e3a\u4e86\u8ba9\u533a\u95f4\u8fde\u7eed\uff0c\u6211\u4eec\u5bf9\u6574\u68f5\u6811\u8fdb\u884c**\u9884\u5904\u7406**\u3002\n\n\u6811\u94fe\u5256\u5206\u7684\u6838\u5fc3\u64cd\u4f5c\u4e5f\u662f\u9884\u5904\u7406\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9$x$\uff0c\u6211\u4eec\u901a\u8fc7DFS\u5904\u7406\u51fa\u5b83\u7684**\u6df1\u5ea6\uff0c\u5b50\u6811\u5927\u5c0f\uff0c\u91cd\u513f\u5b50\u7f16\u53f7\u548c\u7236\u8282\u70b9\u7f16\u53f7**\u3002\u8fd9\u4e9b\u4e1c\u897f\u53ef\u4ee5\u7528\u4e00\u6b21\u6df1\u641c\u5904\u7406\u51fa\u6765\u3002\u5b9e\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u6811\u4e0a\u904d\u5386\u7684\u8fc7\u7a0b\u3002\n\n\u6211\u4eec\u7528$deep[]$\u8868\u793a\u6df1\u5ea6\uff0c$size[]$\u8868\u793a\u5b50\u6811\u5927\u5c0f\uff0c$son[]$\u8868\u793a\u91cd\u513f\u5b50\u662f\u8c01\uff08\u7f16\u53f7\uff09\uff0c\u4ee5\u53ca$fa[]$\u8868\u793a\u7236\u8282\u70b9\u662f\u8c01\uff08\u7f16\u53f7\uff09\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nvoid dfs1(int x,int f)\n{\n    fa[x]=f;\n    size[x]=1;\n    deep[x]=deep[f]+1;\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==f)\n            continue;\n        dfs1(y,x);\n        size[x]+=size[y];\n        if(son[x]==0 || size[y]>size[son[x]])\n            son[x]=y;\n    }\n}\n```\n\n\u4f46\u662f\u4e3a\u4e86\u8fdb\u884c\u6811\u94fe\u5256\u5206\u7684\u76f8\u5173\u64cd\u4f5c\uff0c\u4ec5\u4ec5\u5904\u7406\u51fa\u8fd9\u4e9b\u6570\u636e\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\u3002\u56e0\u4e3a\u6709\u4e86\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u53ea\u77e5\u9053\u4e86\u91cd\u94fe\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5374\u4f9d\u7136\u4e0d\u80fd\u7ef4\u62a4\u51fa\u6211\u4eec\u9700\u8981\u7684\u90a3\u6bb5\u201c\u8fde\u7eed\u7684\u533a\u95f4\u201d\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u7b2c\u4e8c\u904d\u6df1\u641c\u3002\n\n\u5982\u4f55\u5728\u6df1\u641c\u4e2d\u4fdd\u8bc1\u94fe\u4e0a\u8282\u70b9\u7f16\u53f7\u8fde\u7eed\u5462\uff1f\n\n\u6839\u636e\u6df1\u641c\u7684\u6027\u8d28\u548c\u91cd\u94fe\u7684\u6027\u8d28\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u9690\u9690\u7ea6\u7ea6\u7684\u731c\u5230\uff1a\u7528**DFS\u5e8f**\u5373\u53ef\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5fc5\u7136\u4f1a\u8fdb\u884c\u7b2c\u4e8c\u904dDFS\uff0c\u800c\u7b2c\u4e8c\u904dDFS\u8981\u5904\u7406\u51fa\u7684\u4e1c\u897f\u5c31\u662f\uff1a**\u6bcf\u6761\u94fe\u7684\u9876\u7aef\u8282\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7684DFS\u5e8f\u65b0\u7f16\u53f7**\u3002\n\n\u6211\u4eec\u7528$top[]$\u6570\u7ec4\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u6240\u5728\u94fe\u7684\u9876\u7aef\u662f\u8c01\uff0c$id[]$\u6570\u7ec4\u8868\u793a\u8282\u70b9\u7684DFS\u5e8f\u65b0\u7f16\u53f7\u3002\n\n\u6240\u4ee5\u6709\u4e86\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\n```cpp\nvoid dfs2(int x,int t)\n{\n    id[x]=++cnt;\n    top[x]=t;\n    if(!son[x])\n        return;\n    dfs2(son[x],t);\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==fa[x] || y==son[x])\n            continue;\n        dfs2(y,y);\n    }\n}\n```\n\n\u8fd9\u91cc\u6709\u5fc5\u8981\u8bf4\u660e\u4e00\u4e0b\uff1a\n\n\u6211\u4eec\u5148\u5904\u7406\u91cd\u513f\u5b50\u540e\u5904\u7406\u8f7b\u513f\u5b50\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u628a\u94fe\u7684\u65b0\u7684DFS\u7f16\u53f7\u53d8\u6210\u8fde\u7eed\u7684\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5148\u5904\u7406\u91cd\u94fe\u518d\u5904\u7406\u8f7b\u94fe\uff0c\u5c31\u80fd\u505a\u5230\uff1a\u6bcf\u4e00\u6761\u91cd\u94fe\u4e0a\u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u540c\u65f6\uff0c\u6bcf\u4e00\u68f5\u5b50\u6811\u4e0a\u7684\u7f16\u53f7\u4e5f\u662f\u8fde\u7eed\u7684\u3002\n\n\u4ee5\u4e0a\u5c31\u662f\u6811\u94fe\u5256\u5206\u7684\u6838\u5fc3\u64cd\u4f5c\uff1a\u9884\u5904\u7406~~\uff08\u9884\u5904\u7406\u7adf\u7136\u53d8\u6210\u4e86\u6838\u5fc3\u64cd\u4f5c\uff09~~\n\n---\n\n## \u6811\u94fe\u5256\u5206\u64cd\u4f5c\u8be6\u89e3\n\n\u4e4b\u540e\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u6811\u94fe\u5256\u5206\u6240\u89e3\u51b3\u7684\u95ee\u9898\uff1a\n\n* \u4fee\u6539\u4e24\u70b9\u8def\u5f84\u4e0a\u5404\u70b9\u7684\u503c\n\n* \u67e5\u8be2\u4e24\u70b9\u8def\u5f84\u4e0a\u5404\u70b9\u7684\u503c\n\n* \u4fee\u6539\u67d0\u70b9\u5b50\u6811\u4e0a\u5404\u70b9\u7684\u503c\n\n* \u67e5\u8be2\u67d0\u70b9\u5b50\u6811\u4e0a\u5404\u70b9\u7684\u503c\n\n\u901a\u8fc7\u521a\u624d\u7684\u9884\u5904\u7406\uff0c\u6211\u4eec\u5df2\u7ecf\u628a\u6811\u4e0a\u8282\u70b9\u7684\u65b0\u7f16\u53f7\u53d8\u6210\u4e86\u8fde\u7eed\u7684\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u9488\u5bf9\u533a\u95f4\uff08\u94fe\uff09\u628a\u539f\u6811\u53d8\u6210\u7ebf\u6bb5\u6811\u6765\u8fdb\u884c\u6211\u4eec\u8981\u505a\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002\n\n\u5148\u6765\u4e00\u4efd\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u4ee3\u7801\uff1a\n\n(\u5305\u62ec\u5efa\u6811\u3001\u9012\u5f52\u4fee\u6539\u3001\u9012\u5f52\u67e5\u8be2\u3001lazy\u6807\u8bb0)\n\n```cpp\nvoid build(int pos,int l,int r)\n{\n    int mid=(l+r)>>1;\n    if(l==r)\n    {\n        tree[pos]=w[l];\n        return;\n    }\n    build(lson,l,mid);\n    build(rson,mid+1,r);\n    tree[pos]=(tree[lson]+tree[rson]);\n}\nvoid mark(int pos,int l,int r,int k)\n{\n    tree[pos]+=(r-l+1)*k;\n    lazy[pos]+=k;\n}\nvoid pushdown(int pos,int l,int r)\n{\n    int mid=(l+r)>>1;\n    mark(lson,l,mid,lazy[pos]);\n    mark(rson,mid+1,r,lazy[pos]);\n    lazy[pos]=0;\n}\nvoid update(int pos,int l,int r,int x,int y,int k)\n{\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n    {\n        mark(pos,l,r,k);\n        return;\n    }\n    pushdown(pos,l,r);\n    if(x<=mid)\n        update(lson,l,mid,x,y,k);\n    if(y>mid)\n        update(rson,mid+1,r,x,y,k);\n    tree[pos]=(tree[lson]+tree[rson]);\n}\nint query(int pos,int l,int r,int x,int y)\n{\n    int mid=(l+r)>>1;\n    int ret=0;\n    if(x<=l && r<=y)\n        return tree[pos];\n    pushdown(pos,l,r);\n    if(x<=mid)\n        ret+=query(lson,l,mid,x,y);\n    if(y>mid)\n        ret+=query(rson,mid+1,r,x,y);\n    return ret;\n}\n```\n\n\u5982\u679c\u8bfb\u8005\u5df2\u7ecf\u5bf9\u7ebf\u6bb5\u6811\u975e\u5e38\u719f\u6089\uff0c\u90a3\u4e48\u5c31\u4f1a\u53d1\u73b0\uff1a\u5728\u7ecf\u8fc7\u6811\u94fe\u5256\u5206\u7684\u9884\u5904\u7406\u4e4b\u540e\uff0c\u5bf9\u4e8e\u4e0a\u8ff0\u76844\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u8282\u70b9\u7684\u65b0\u7f16\u53f7\uff08\u65b0\u7f16\u53f7\u5728\u6811\u4e0a\u662f\u6309\u94fe\u8fde\u7eed\u7684\uff09\u6620\u5c04\u5230\u4e00\u4e2a\u6570\u5217\u4e0a\uff0c\u7136\u540e\u5bf9\u6570\u5217\u8fdb\u884c\u7ebf\u6bb5\u6811\u7684\u4e0a\u8ff0\u64cd\u4f5c\u5373\u53ef\u3002\n\n---\n\n### \u6811\u94fe\u5256\u5206\u6c42LCA\n\n\u8bb2\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4e3a\u4e0b\u9762\u7684\u94fe\u4e0a\u4fee\u6539\u505a\u94fa\u57ab\u3002\n\n\u6811\u94fe\u5256\u5206\u6c42LCA\u662f\u6bd4\u8f83\u5feb\u901f\u7684\u505a\u6cd5\uff0c\u5b83\u7684\u5b9e\u73b0\u539f\u7406\u4e5f\u6bd4\u8f83\u597d\u7406\u89e3\uff1a\n\n\u6211\u4eec\u6bcf\u6b21\u6c42LCA\uff08x,y\uff09\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5224\u65ad\u4e24\u70b9\u662f\u5426\u5728\u540c\u4e00\u94fe\u4e0a\n\n\u5982\u679c\u4e24\u70b9\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u6211\u4eec\u53ea\u8981\u627e\u5230\u8fd9\u4e24\u70b9\u4e2d\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\u8f93\u51fa\u5c31\u884c\u4e86~~\uff08\u5e9f\u8bdd\uff09~~\n\n\u5982\u679c\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff1a\n\n\u90a3\u5c31\u627e\u5230\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u4ee4\u5b83\u7b49\u4e8e\u5b83\u6240\u5728\u7684\u94fe\u9876\u7aef\u7684\u7236\u8282\u70b9\u5373\u4e3ax=fa[top[x]]\uff1a\n\n\u76f4\u5230\u4e24\u70b9\u5230\u8fbe\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u8f93\u51fa\u4e24\u70b9\u4e2d\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\u5373\u53ef\u3002\n\n---\n\n### \u94fe\u4e0a\u4fee\u6539\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4fee\u6539\u4efb\u610f\u4e24\u70b9\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u7684\u4e00\u4e2a\u6734\u7d20\u601d\u8def\u662f\u6c42\u51fa\u4e24\u70b9\u7684LCA\uff0c\u7136\u540e\u8fdb\u884c\u4fee\u6539\u3002\n\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8bb2\u6811\u94fe\u5256\u5206\u6c42LCA\u3002\u56e0\u4e3a\u94fe\u4e0a\u4fee\u6539\u662f\u57fa\u4e8e\u6c42LCA\u64cd\u4f5c\u7684\u3002\n\n\u76f8\u6bd4\u4e8e\u6811\u94fe\u5256\u5206\u6c42LCA\uff0c\u94fe\u4e0a\u4fee\u6539\u53ea\u662f\u52a0\u4e86\u4e2a\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u800c\u5df2\u3002\n\n\u6216\u8bb8\u4ee3\u7801\u80fd\u5e2e\u4f60\u7406\u89e3\u4e00\u4e0b\uff1a\n\n```cpp\nvoid upd_chain(int x,int y,int k)\n{\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]<deep[top[y]])\n            swap(x,y);\n        update(1,1,n,id[top[x]],id[x],k);//attention\n        x=fa[top[x]];\n    }\n    if(deep[x]<deep[y])\n        swap(x,y);\n    update(1,1,n,id[y],id[x],k);//attention\n}\n```\n\n#### ATTENTION\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662fupdate\u65f6\u7684\u8282\u70b9\u7f16\u53f7\u95ee\u9898\uff0c\u4ee5\u4e3a\u91cd\u65b0\u7f16\u53f7\u662f\u57fa\u4e8eDFS\u5e8f\u7684\u57fa\u7840\u7684\uff0c\u6240\u4ee5\u6839\u636e\u6df1\u641c\u7684\u6027\u8d28\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684$top[]$\u80af\u5b9a\u8981\u6bd4\u8fd9\u4e2a\u8282\u70b9\u7684\u65b0\u7f16\u53f7\u5c0f\u3002\n\n\u4e0b\u9762\u7684$id[x],id[y]$\u4e5f\u662f\u8fd9\u4e2a\u9053\u7406\uff0c**\u5343\u4e07\u4e0d\u8981\u5199\u53cd**\uff01\uff01\n\n---\n\n### \u94fe\u4e0a\u67e5\u8be2\n\n\u94fe\u4e0a\u67e5\u8be2\u7684\u57fa\u672c\u5b9e\u73b0\u601d\u8def\u4e0e\u94fe\u4e0a\u4fee\u6539\u5927\u540c\u5c0f\u5f02\u3002\n\n\u76f4\u63a5\u653e\u4ee3\u7801\uff1a\n\n```cpp\nint q_chain(int x,int y)\n{\n    int ret=0;\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]<deep[top[y]])\n            swap(x,y);\n        (ret+=query(1,1,n,id[top[x]],id[x]))%=mod;\n        x=fa[top[x]];\n    }\n    if(deep[x]<deep[y])\n        swap(x,y);\n    (ret+=query(1,1,n,id[y],id[x]))%=mod;\n    return ret;\n}\n```\n\n---\n\n### \u6811\u4e0a\u4fee\u6539/\u67e5\u8be2\n\n\u6811\u4e0a\u4fee\u6539/\u67e5\u8be2\u5e76\u4e0d\u9700\u8981\u90a3\u4e48\u590d\u6742\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u8fdb\u884c\u6811\u4e0a\u4fee\u6539/\u67e5\u8be2\u4e3b\u8981\u8fd0\u7528\u4e86\u6811\u94fe\u5256\u5206\u7684\u4e00\u4e2a\u6027\u8d28\uff1a\n\n\u4ee5\u67d0\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7f16\u53f7\u662f\u8fd9\u4e2a\u8282\u70b9+\u8fd9\u4e2a\u8282\u70b9\u7684$size[]$-1.\n\n\u5373\u65b0\u6811\u6620\u5c04\u5230\u6570\u5217\u4e0a\uff0c\u4e00\u68f5\u5b50\u6811\u6240\u5360\u7684\u533a\u95f4\u662f\uff1a$[id[x],id[x]+size[x]-1]$.\n\n\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u5199\u6811\u4e0a\u4fee\u6539/\u67e5\u8be2\u7684\u4ee3\u7801\u4e86\uff1a\n\n```cpp\nvoid upd_subtree(int x,int k)\n{\n    update(1,1,n,id[x],id[x]+size[x]-1,k);\n}\nint q_subtree(int x)\n{\n    return query(1,1,n,id[x],id[x]+size[x]-1);\n}\n```\n\n---\n\n\u5728\u8fd9\u91cc\u518d\u5411\u5927\u5bb6\u63a8\u8350\u6a21\u677f\u4f8b\u9898\uff1a\u6d1b\u8c373384\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.cnblogs.com/fusiwei/p/11529844.html)\n\n\u719f\u7ec3\u8fd0\u7528\u6811\u94fe\u5256\u5206\u5e76\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u662f\u4e00\u4e2a\u63d0\u9ad8\u7ec4/\u7701\u9009\u9009\u624b\u6240\u5fc5\u987b\u7684\u4e00\u4e2a\u7d20\u8d28\u3002\u5e0c\u671b\u8fd9\u7bc7\u968f\u7b14\u80fd\u5e2e\u5230\u6b63\u5728$OI$\u8def\u4e0a\u594b\u6597\u7684\u4f60\uff08\u8036\u6bd4\uff09\u3002\n\n\n\n## \u672c\u9898\u4ee3\u7801\u5728\u8fd9\uff01\uff01\n\n\u518d\u8d4b\u4e0a\u672c\u9898\u7684\u4ee3\u7801\uff1a\n\n\u987a\u4fbf\u8d4b\u4e0a\u81ea\u5df1\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#define int long long\n#define lson pos<<1\n#define rson pos<<1|1\nusing namespace std;\nconst int maxn=1e5+1;\nint n,tot,cnt,q;\nint head[maxn],nxt[maxn<<1],to[maxn<<1];\nint fa[maxn],deep[maxn],size[maxn],son[maxn];\nint id[maxn],top[maxn];\nint tree[maxn<<2],lazy[maxn<<2];\nvoid add(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid dfs1(int x,int f)\n{\n    deep[x]=deep[f]+1;\n    fa[x]=f;\n    size[x]=1;\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==f)\n            continue;\n        dfs1(y,x);\n        size[x]+=size[y];\n        if(!son[x]||size[son[x]]<size[y])\n            son[x]=y;\n    }\n}\nvoid dfs2(int x,int t)\n{\n    id[x]=++cnt;\n    top[x]=t;\n    if(!son[x])\n        return;\n    dfs2(son[x],t);\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==fa[x]||y==son[x])\n            continue;\n        dfs2(y,y);\n    }\n}\nvoid mark(int pos,int l,int r,int k)\n{\n    tree[pos]+=(r-l+1)*k;\n    lazy[pos]+=k;\n}\nvoid pushdown(int pos,int l,int r)\n{\n    int mid=(l+r)>>1;\n    mark(lson,l,mid,lazy[pos]);\n    mark(rson,mid+1,r,lazy[pos]);\n    lazy[pos]=0;\n}\nvoid update(int pos,int l,int r,int x,int y,int k)\n{\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n    {\n        mark(pos,l,r,k);\n        return;\n    }\n    pushdown(pos,l,r);\n    if(x<=mid)\n        update(lson,l,mid,x,y,k);\n    if(y>mid)\n        update(rson,mid+1,r,x,y,k);\n    tree[pos]=tree[lson]+tree[rson];\n}\nvoid upd_chain(int x,int y,int k)\n{\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]<deep[top[y]])\n            swap(x,y);\n        update(1,1,n,id[top[x]],id[x],k);\n        x=fa[top[x]];\n    }\n    if(deep[x]<deep[y])\n        swap(x,y);\n    update(1,1,n,id[y],id[x],k);\n}\nint query(int pos,int l,int r,int x,int y)\n{\n    int ret=0;\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n        return tree[pos];\n    pushdown(pos,l,r);\n    if(x<=mid)\n        ret+=query(lson,l,mid,x,y);\n    if(y>mid)\n        ret+=query(rson,mid+1,r,x,y);\n    return ret;\n}\nint q_subtree(int x)\n{\n    return query(1,1,n,id[x],id[x]+size[x]-1);\n}\nsigned main()\n{\n    scanf(\"%lld\",&n);\n    for(int i=1;i<n;i++)\n    {\n        int x,y;\n        scanf(\"%lld%lld\",&x,&y);\n        x++,y++;\n        add(x,y);\n        add(y,x);\n    }\n    dfs1(1,0);\n    dfs2(1,1);\n    scanf(\"%lld\",&q);\n    while(q--)\n    {\n        char k;\n        cin>>k;\n        if(k=='A')\n        {\n            int x,y,d;\n            scanf(\"%lld%lld%lld\",&x,&y,&d);\n            x++,y++;\n            upd_chain(x,y,d);\n        }\n        else\n        {\n            int x;\n            scanf(\"%lld\",&x);\n            x++;\n            printf(\"%lld\\n\",q_subtree(x));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1569738099,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "## Disciption\n\u8fd9\u662f\u4e00\u9053\u5f88\u677f\u7684\u6811\u5256\u9898\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. \u66f4\u65b0 $u,v$ \u8def\u5f84\u4e0a\u70b9\u7684\u70b9\u6743\n2. \u67e5\u8be2\u5b50\u6811\u70b9\u6743\u548c\n\n## Solution\n### P1\n\u9996\u5148\u662f\u4e24\u4e2a\u5bf9\u6811\u7684 dfs\uff0c\u9884\u5904\u7406\u6811\u5256\u4fe1\u606f\uff08\u8fd9\u91cc\u4e0d\u9700\u8981\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u521d\u59cb\u70b9\u6743\u90fd\u4e3a $0$\uff09\uff0c\u7ed9\u51fa\u4ee3\u7801\uff1a\n```cpp\nvoid dfs1(int p,int f)\n{\n\tregister int i;\n\tfa[p]=f;\n\tsiz[p]=1;\n\tdep[p]=dep[f]+1;\n\tfor(i=head[p];i;i=nxt[i])\n\t{\n\t\tif(to[i]==f) continue;\n\t\tdfs1(to[i],p);\n\t\tsiz[p]+=siz[to[i]];\n\t\tif(siz[to[i]]>siz[son[p]]) son[p]=to[i];\n \t}\n}\nvoid dfs2(int p,int tp)\n{\n\tregister int i;\n\ttop[p]=tp;\n\tdfn[p]=(++tot);\n\tif(!son[p]) return;\n\tdfs2(son[p],tp);\n\tfor(i=head[p];i;i=nxt[i]) if(to[i]!=son[p]&&to[i]!=fa[p]) dfs2(to[i],to[i]);\n}\n```\n### P2\n\u7136\u540e\u5199\u51fa\u7ebf\u6bb5\u6811\u64cd\u4f5c\u4ee3\u7801\uff0c\u6b64\u5904\u6211\u7528 `struct` \u6253\u5305\uff0c\u4fdd\u8bc1\u51fd\u6570\u540d\u4e0d\u4f1a\u51b2\u7a81\uff08\u6ce8\u610f\uff0c\u672c\u9898\u8981\u5f00 `long long`\uff09\uff0c\u7ed9\u51fa\u4ee3\u7801\uff1a\n```cpp\nstruct Sugment_Tree{\n\tinline int lc(int p){return p<<1;}\n\tinline int rc(int p){return p<<1|1;}\n\tlong long int val[Maxn<<2],tag[Maxn<<2];\n\tinline void push_up(int p){val[p]=val[lc(p)]+val[rc(p)];}\n\tinline void tging(int p,int l,int r,long long int v)\n\t{\n\t\ttag[p]+=v;\n\t\tval[p]+=(r-l+1)*v;\n\t}\n\tinline void push_down(int p,int l,int r)\n\t{\n\t\tif(tag[p])\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\ttging(lc(p),l,mid,tag[p]);\n\t\t\ttging(rc(p),mid+1,r,tag[p]);\n\t\t\ttag[p]=0;\n\t\t}\n\t}\n\tinline void upd(int p,int l,int r,int ul,int ur,long long int v)\n\t{\n\t\tif(ul<=l&&r<=ur)\n\t\t{\n\t\t\ttging(p,l,r,v);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tpush_down(p,l,r);\n\t\tif(mid>=ul) upd(lc(p),l,mid,ul,ur,v);\n\t\tif(mid<ur) upd(rc(p),mid+1,r,ul,ur,v);\n\t\tpush_up(p);\n\t}\n\tinline long long int query(int p,int l,int r,int ql,int qr)\n\t{\n\t\tif(ql<=l&&r<=qr) return val[p];\n\t\tpush_down(p,l,r);\n\t\tlong long int ans=0,mid=(l+r)>>1;\n\t\tif(mid>=ql) ans+=query(lc(p),l,mid,ql,qr);\n\t\tif(mid<qr) ans+=query(rc(p),mid+1,r,ql,qr);\n\t\treturn ans;\n\t}\n}T;\n```\n\u6211\u8ddf\u522b\u4eba\u4e0d\u4e00\u6837\u7684\u70b9\u5c31\u5728\u4e8e\u8282\u70b9 `l,r` \u662f\u5728\u64cd\u4f5c\u65f6\u4f20\u53c2\u7684\uff0c\u5f88\u5bb9\u6613\u88ab\u5361\u5e38\u3002\n### P3\n\u4f9d\u636e\u6811\u5256\u9884\u5904\u7406\u597d\u7684\u4fe1\u606f\uff0c\u5bf9\u7ebf\u6bb5\u6811\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u7ed9\u51fa\u4e24\u79cd\u64cd\u4f5c\u7684\u4ee3\u7801\uff1a\n```cpp\nint tmp;\n#define swap(a,b) tmp=a,a=b,b=tmp\nvoid upd(int u,int v,long long int w)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tT.upd(1,1,n,dfn[top[u]],dfn[u],w);\n\t\tu=fa[top[u]]; \n\t}\n\tif(dep[u]>dep[v]) swap(u,v);\n\tT.upd(1,1,n,dfn[u],dfn[v],w);\n}\nlong long int query(int u)\n{\n\treturn T.query(1,1,n,dfn[u],dfn[u]+siz[u]-1);\n}\n```\n\u5bf9\u4e8e\u64cd\u4f5c $1$\uff0c\u4f7f\u7528 `while` \u5faa\u73af\u89e3\u51b3\uff0c~~\u907f\u514d\u88ab\u5361\u5e38~~\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $2$\uff0c\u5b50\u6811\u7684\u5e8f\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u8282\u70b9 $u$ \u7684\u5b50\u6811\u7684 \n` dfn` \u5c31\u5728 $[dfn_u,dfn_u+siz_u-1]$ \u5185\uff0c\u5176\u4e2d `siz` \u4e3a\u5b50\u6811\u5927\u5c0f\u3002\n\n\n\u6ce8\uff1a\u6ce8\u610f\u7684\u4e00\u70b9\u5c31\u662f\uff0c\u540c\u4e00\u4e2a\u94fe\u4e0a\uff0c`dep` \u8d8a\u5c0f\uff0c`dfn` \u8d8a\u5c0f\uff0c\u4e0d\u8981\u641e\u9519\u987a\u5e8f\uff0c\u7ebf\u6bb5\u6811\u4f1a\u70b8\u3002\n### P4 \u8bfb\u5165\n\u8bfb\u5165\u5c0f\u6280\u5de7\u6765\u81ea cz \u5927\u4f6c\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vucwiwkl.png)",
        "postTime": 1628594500,
        "uid": 486187,
        "name": "2000VOLT",
        "ccfLevel": 0,
        "title": "Luogu P3833 [SHOI2012]\u9b54\u6cd5\u6811 \u9898\u89e3"
    },
    {
        "content": "## \u9898\u9762\n\n>\u6811\u94fe\u5256\u5206\u677f\u5b50\u9898\u76ee\n\n>\u8def\u5f84\u4fee\u6539 \uff0c\u5b50\u6811\u67e5\u8be2\n\n## \u601d\u8def\n\n- \u9898\u76ee\u660e\u786e\uff0c\u503c\u5f97\u5173\u6ce8\u7684\u70b9\u662f\u5b50\u6811\u7684\u66f4\u6539\u662f\u5728**\u70b9**\u4e0a\uff0c\u6bd4\u8f83\u597d\u5b9e\u73b0 \n\n- \u5176\u6b21\u6811\u662f\u4ece $0$ \u53f7\u70b9\u5f00\u59cb\uff0c\u5728\u8bb0\u5f55\u7684\u65f6\u5019\u6bcf\u4e2a\u6570\u90fd\u52a0 $1$ \u5373\u53ef\n\n## \u7b97\u6cd5\u4ecb\u7ecd\n\n- \u5e2e\u52a9\u8bfb\u8005\u66f4\u597d\u7684\u7406\u89e3\u4ee3\u7801\n\n- \u9884\u5904\u7406 $01$\n\n```cpp\nvoid dfs1(int u,int pre,int d){//\u9884\u5904\u7406\u7236\u4eb2\u8282\u70b9\uff0c\u91cd\u513f\u5b50,\u6df1\u5ea6 \n    fa[u] = pre ;size_[u] = 1 ;dep[u] = d;\n    for (int i = head[u] ;i ;i = e[i].nxt){\n        int v = e[i].v;\n        if(v != pre){\n            dfs1(v,u,d+1);//\u5148\u641c\u540e\u5bb6 \n            size_[u]+=size_[v];//\u5f97\u5230\u5f53\u524d\u8282\u70b9u\u7684\u5b50\u6811\u4e2a\u6570 \n            if(!hson[u] || size_[hson[u]]<size_[v]){\n                hson[u] = v;//\u66f4\u65b0\u91cd\u513f\u5b50 \n            }\n        }\n    }\n}\n```\n- \u9884\u5904\u7406 $02$\n\n```cpp\nvoid dfs2(int u,int top){//\u5bfb\u627e\u91cd\u94fe\uff0c\uff08\u5220\u94fe\u64cd\u4f5c\uff09\uff0c \n    tp[u] = top;//\u94fe\u9876 \n    l[u] = ++js;// dfsn,\u5bf9\u5e94\u7684\u5e8f\u53f7 \n    pre[js] = u;//\u5bf9\u5e94\u5e8f\u53f7\u7684\u6570\uff0c\u4e3b\u8981\u653e\u5728\u7ebf\u6bb5\u6570\u4e0a \n    if(!hson[u])return;\n    dfs2(hson[u],top);// \u6cbf\u7740\u91cd\u513f\u5b50\u4e00\u76f4\u795e\u641c\u4e0b\u53bb\uff0c\u627e\u5230\u9876\u70b9\u7684\u91cd\u94fe \n    for(int i = head[u];i;i = e[i].nxt){//\u5b8c\u6210\u91cd\u94fe\u540e\u53bb\u627e\u8f7b\u94fe \n        int v = e[i].v;\n        if(v!=hson[u]&&v!=fa[u]){\n            dfs2(v,v);//\u65b0\u7684\u91cd\u94fe \n        }\n    }\n}\n\n```\n\n- \u8def\u5f84\u4fee\u6539\uff08\u5305\u542b\u8fb9\u6743\u4fee\u6539\uff0c\u7528\u5174\u8da3\u7684\u53ef\u8d77\u53bb\u4e86\u89e3\u4e00\u4e0b\uff09\n\n```cpp\nvoid path_add(int u,int v,int w){//\u94fe\u4fee\u6539 \n    \n    while(tp[u]!=tp[v]){//\u4ee5\u94fe\u9876\u6df1\u5ea6\u66f4\u6df1\u7684\u5f80\u4e0a\u8df3 \n        if(dep[tp[u]] < dep[tp[v]]) swap(u,v);//\u90fd\u64cd\u4f5c\u540c\u4e00\u4e2a\u53d8\u91cf\uff0c\u65b9\u4fbf\u4e66\u5199 \n        Seg::all_date(1,l[tp[u]],l[u],w);//\u66f4\u6df1\u7684\u94fe\u5148\u64cd\u4f5c \n        u = fa[tp[u]];//\u94fe\u9876\u7684\u7236\u4eb2\uff0c \n    }\n    if(dep[u] > dep[v]) swap(u,v);//\u6700\u540e\u5728\u540c\u4e00\u94fe\u4e0a\uff0c\u4ea4\u6362\u7684\u539f\u56e0\u540c\u4e0a \n    Seg::all_date(1,l[u],l[v],w);//\u70b9\u6743\u5199\u6cd5 \n     /*\n        Seg::all_date(1,l[u]+1,l[v],w)\n        \u6c42\u7684\u662f\u5f53\u524d u-v \u7684\u8ddd\u79bb\u6216\u6700\u503c\uff0c\u800cl[u]\u8868\u793au\u70b9\u7684\u4e0a\u4e00\u6761\u8fb9 \n        \u8fb9\u6743\u5199\u6cd5\uff0c\uff08\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u7684\u662f\u8fde\u63a5\u4ed6\u7236\u4eb2\u7684\u8fb9\uff09 \n    */ \n}\n```\n## \u6b63\u89e3\u4ee3\u7801\n\n```cpp\n//\u4e0d\u53ef\u4ee5 copy ~~~\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n#define int long long\n\nconst int manx=1e6+10;\nconst int mamx = 1e6 + 11;\nconst int mod = 2123400401301379571;\nconst int inf = 0x3f3f3f3f;\n\ninline int read() {\n  char c = getchar(); int x = 0, f = 1;\n  for ( ; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n  for ( ; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n  return x * f;\n}\nstruct node{\n\tint v,nxt,w;\n}e[manx<<1];\nint head[manx],cnt,n,m,val[manx],pr[manx],dfn[manx],pre[manx],fa[manx],dep[manx],size_[manx],hson[manx];\nvoid add(int u,int v){\n\te[++cnt].v = v;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\nnamespace Tree{\n\t#define ls i<<1\n\t#define rs i<<1|1\n\tstruct tree{\n\t\tint r;\n\t\tint l;\n\t\tint sum;\n\t\tint lazy;\n\t}tr[manx<<2];\n\tinline void up(int i){\n\t  tr[i].sum = tr[ls].sum + tr[rs].sum ;\n\t}\n\tinline void down(int i){\n\t\tif(tr[i].lazy){\n\t\t\tint x = tr[i].lazy;\n\t\t\ttr[ls].sum += (tr[ls].r - tr[ls].l + 1) * x;\n\t\t\ttr[rs].sum += (tr[rs].r - tr[rs].l + 1) * x;\n\t\t\ttr[ls].lazy += x;\n\t\t\ttr[rs].lazy += x;\n\t\t\ttr[i].lazy = 0;\n \t\t}\n\t}\n\tinline void build(int i,int l,int r){\n\t\ttr[i].l = l;tr[i].r = r;\n\t\tif(l == r){\n\t\t\ttr[i].sum = val[pre[l]];\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(ls,l,mid);\n\t\tbuild(rs,mid+1,r);\n\t\tup(i);\n\t}\n\tinline void all_add(int i,int l,int r,int x){\n\t\tif(tr[i].l >= l && tr[i].r <= r){\n\t\t\ttr[i].sum += (tr[i].r - tr[i].l + 1) * x;\n\t\t\ttr[i].lazy += x;\n\t\t\treturn;\n\t\t}\n\t\tdown(i);\n\t\tint mid = (tr[i].r + tr[i].l ) >> 1;\n\t\tif(mid >= r) all_add(ls,l,r,x);\n\t\telse if(mid < l) all_add(rs,l,r,x);\n\t\telse all_add(ls,l,mid,x),all_add(rs,mid+1,r,x);\n\t\tup(i);\n\t}\n\tinline int query(int i,int l,int r){\n\t\tif(tr[i].l >= l && tr[i].r <= r){\n\t\t\treturn tr[i].sum;\n\t\t}\n\t\tdown(i);\n\t\tint mid = (tr[i].r + tr[i].l ) >> 1;\n\t\tif(mid >= r) return query(ls,l,r);\n\t\telse if(mid < l) return query(rs,l,r);\n\t\telse return query(ls,l,mid) + query(rs,mid+1,r);\n\t//\tup(i);\n\t}\n}\nnamespace Seg{\n\tint js = 0;\n\tinline void dfs1(int u,int pre,int d){\n\t\tfa[u] = pre;size_[u] = 1;dep[u] = d;\n\t\tfor(int i = head[u]; i ;i = e[i].nxt){\n\t\t\tint v = e[i].v;\n\t\t\tif(v != pre){\n\t\t\t\tdfs1(v,u,d+1);\n\t\t\t\tsize_[u] += size_[v];\n\t\t\t\tif(!hson[u] || size_[hson[u]] < size_[v]){\n\t\t\t\t\thson[u] = v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tinline void dfs2(int u,int p){\n\t\tpr[u] = p;\n\t\tdfn[u] = ++js;\n\t\tpre[js] = u;\n\t\tif(!hson[u]) return;\n\t\tdfs2(hson[u],p);\n\t\tfor(int i = head[u];i;i = e[i].nxt){\n\t\t\tint v = e[i].v ;\n\t\t\tif(v != fa[u] && v != hson[u]){\n\t\t\t\tdfs2(v,v);\n\t\t\t}\n\t\t} \n\t}\n\tinline void add(int u,int v,int x){\n\t\twhile(pr[u] != pr[v]){\n\t\t\tif( dep[pr[u]] < dep[pr[v]])swap(u,v);\n\t\t\tTree::all_add(1,dfn[pr[u]],dfn[u],x);\n\t\t\tu = fa[pr[u]];\n\t\t}\n\t\tif(dep[u] > dep[v]) swap(u,v);\n\t\tTree::all_add(1,dfn[u],dfn[v],x);\n\t}\n}\n main(){\n\tn = read();\n\tfor(int i = 1,x,y;i < n; i++){\n\t\tx = read()+1,y = read()+1;\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\t//cout<<1<<endl;\n\tSeg::dfs1(1,0,1),Seg::dfs2(1,1),Tree::build(1,1,n);\n\tm = read();\n\tfor(int i = 1;i <= m; i++){\n\t\tchar a;\n\t\tint b,c,d;\n\t\tcin >> a;\n\t\tif(a == 'A'){\n\t\t\tb = read()+1;\n\t\t\tc = read()+1;\n\t\t\td = read();\t\n\t\t\tSeg::add(b,c,d);\n\t\t}else{\n\t\t\n\t\t\td = read()+1;\n\t\t\tcout<<Tree::query(1,dfn[d],dfn[d] + size_[d] - 1)<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n```\n\n\n",
        "postTime": 1606294009,
        "uid": 230808,
        "name": "Zxsoul",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "## Description\n\n\u6811\u94fe\u5256\u5206\u677f\u5b50\u9898\n\n\u8003\u67e5\u4e24\u79cd\u64cd\u4f5c\n\n- **A u v w** \u628a u \u8282\u70b9\u5230 v \u8282\u70b9\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u6743\u503c\u52a0 w\n- **Q u** \u6c42\u4ee5 u \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u6743\u503c\u4e4b\u548c\n\n\n------------\n\u9996\u5148\u9700\u8981\u4e86\u89e3\u7ebf\u6bb5\u6811\u548c dfs \u5e8f\uff0c\u6211\u8fd9\u91cc\u6ca1\u6709\u5f88\u597d\u7684\u94fe\u63a5\uff0c\u4e0d\u719f\u6089\u7684\u518d\u81ea\u884c\u767e\u5ea6\u5427\n\n\u53e6\u5916\u4e86\u89e3\u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\uff08\u91cd\u513f\u5b50\u7b49\u7b49\uff09\uff0c\u5426\u5219\u4f1a\u51fa\u5f88\u591a\u5343\u5947\u767e\u602a\u7684\u9519\u8bef\n\n\n------------\n### \u6811\u94fe\u5256\u5206\u7684\u6784\u6210\n\n \nDFS1 \u6765\u5904\u7406\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\uff0c\u4ed6\u7684\u7236\u8282\u70b9\u4ee5\u53ca\u4ed6\u7684\u91cd\u513f\u5b50\n\nDFS2 \u6765\u5904\u7406\u6bcf\u6761\u94fe\u7684\u94fe\u9876\uff0c\u6bcf\u4e2a\u70b9\u7684 dfs \u5e8f\u548c\u4ed6\u4eec\u7684 pre\uff08\u5efa\u6811\u65f6\u7528\uff09\n\n\u7136\u540e\u5c31\u662f\u5404\u79cd\u64cd\u4f5c\u51fd\u6570\n\n------------\n\n\u8fd9\u91cc\u5c31\u4e0d\u6b62\u8bf4\u8fd9\u4e2a\u9898\u4e86\uff0c\u987a\u4fbf\u8bf4\u4e00\u4e0b\u6811\u94fe\u5256\u5206\u7684\u5176\u4ed6\u51e0\u79cd\u64cd\u4f5c\n\n\u7ebf\u6bb5\u6811\u4e5f\u6709\u5f88\u591a\u64cd\u4f5c\uff0c\u4e00\u4e9b\u9898\u53ef\u80fd\u4f1a\u540c\u65f6\u8003\u5230\n\n\u4f46\u7ebf\u6bb5\u6811\u5c31\u4e0d\u8bf4\u4e86\uff0c\u56de\u53bb\u7ffb\u677f\u5b50\u9898\u7684\u6559\u7a0b\u5427\n\n\u5206\u4eab\u51e0\u4e2a\u6811\u5256\u5178\u578b\u9898\u76ee **[P2590](https://www.luogu.com.cn/problem/P2590)** **[P3178](https://www.luogu.com.cn/problem/P3178)** \u548c **[P4315](https://www.luogu.com.cn/problem/P4315#submit)**\n\n------------\n## Solution\n\n### \u64cd\u4f5c\u4e00   \u533a\u95f4\u52a0\n\n\u6811\u94fe\u5256\u5206\u6700\u5e38\u7528\u64cd\u4f5c\u4e4b\u4e00\n```cpp\nvoid change1(int x,int y,int val){\n\t\twhile(top[x]!=top[y]){\n\t\t    if(depth[top[x]]<depth[top[y]]) swap(x,y);\n\t\t\tupdate(1,1,n,val,dfn[top[x]],dfn[x]);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dfn[x]>dfn[y]) swap(x,y);\n\t\tupdate(1,1,n,val,dfn[x],dfn[y]);\n\t}\n```\n\n### \u64cd\u4f5c\u4e8c \u533a\u95f4\u6c42\u548c\n```cpp\nint qsum1(int x,int y){\n\t\tint ans=0;\n\t\twhile(top[x]!=top[y]){\n\t\t    if(depth[top[x]]<depth[top[y]]) swap(x,y);\n\t\t\tans+=query(1,1,n,dfn[top[x]],dfn[x]);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dfn[x]>dfn[y]) swap(x,y);\n\t\tans+=query(1,1,n,dfn[x],dfn[y]);\n\t\treturn ans; \n\t}\n```\n\n### \u64cd\u4f5c\u4e09 \u533a\u95f4\u53d6\u6700\u5927\u503c\n```cpp\nint qmax(int x,int y){\n\t\tint ans=-101010101;\n\t\twhile(top[x]!=top[y]){\n\t\t    if(depth[top[x]]<depth[top[y]]) swap(x,y);\n\t\t\tans=max(ans,qmax(1,1,n,dfn[top[x]],dfn[x]));\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dfn[x]>dfn[y]) swap(x,y);\n\t\tans=max(ans,qmax(1,1,n,dfn[x],dfn[y]));\n\t\treturn ans; \n\t}\n```\n\u53d6\u6700\u5c0f\u503c\u4e5f\u662f\u4e00\u6837\u7684\n\n\u4e0d\u8fc7\u5efa\u6811\u7684\u65f6\u5019\u6ce8\u610f\u5904\u7406\u6700\u5927\u503c\n\n### \u64cd\u4f5c\u56db \u5b50\u6811\u4e0a\u52a0\n\u5728\u4ee5\u67d0\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e0a\u52a0\u503c\n```cpp\n\tvoid change2(int x,int val){update(1,dfn[x],dfn[x]+size[x]-1,val,1,n);}\n\n```\n\u770b\u8d77\u6765\u5f88\u7b80\u5355\u5bf9\u5427\uff0c\u5176\u5b9e\u53ea\u9700\u8981\u77e5\u9053\u4ed6\u7684\u601d\u60f3\u5c31\u597d\u4e86\n\n### \u64cd\u4f5c\u4e94 \u5b50\u6811\u53d6\u548c\n```cpp\n\tint qsum2(int x){return query(1,dfn[x],dfn[x]+size[x]-1,1,n);}\n\n```\n------------\n\u8fd9\u662f\u6211\u89c1\u7684\u6bd4\u8f83\u5e38\u7528\u7684\u51e0\u79cd\u64cd\u4f5c\n\n\u800c\u4e14\u4e00\u4e9b\u6811\u94fe\u5256\u5206\u7684\u64cd\u4f5c\u662f\u4e0d\u7528\u4e13\u95e8\u6765\u5199\u51fd\u6570\u7684\n\n\u5c31\u50cf\u4e0a\u9762\u7684\u5b50\u6811\u4e0a\u64cd\u4f5c\u4e00\u6837\n\n------------\n## Code\n\n\u518d\u7ed9\u4e0b\u672c\u9898\u7684\u4ee3\u7801\uff0c\u5176\u5b9e\u4e0d\u662f\u5f88\u5fc5\u8981\u4e86\n\n\u6ca1\u5199\u6ce8\u91ca\uff0c\u5927\u5bb6\u5c06\u5c31\u770b\u5427\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<queue>\n#include<cmath>\n#define maxn 10001000\n#define INF 0x3f3f3f3f\n#define int long long\n#define lson x<<1\n#define rson x<<1|1\n\nusing namespace std;\n\nchar s;\nint n,q,cnt,tot,lazy[maxn],head[maxn],sum[maxn],a[maxn],size[maxn],dfn[maxn],depth[maxn],top[maxn],fa[maxn],pre[maxn],mmax[maxn],son[maxn];\n\nstruct edge{int fr,to,nxt;}e[maxn*2];\n\nvoid addedge(int fr,int to){e[++tot].to=to;e[tot].nxt=head[fr];head[fr]=tot;}\n\nint read(){\n\tint s=0,w=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') w=-1;ch=getchar();}\n\twhile(ch>='0' &&ch<='9'){s=(s<<1)+(s<<3)+ch-'0';ch=getchar();}\n\treturn s*w;\n}\n\nnamespace Seg{\n\tvoid pushup(int x){sum[x]=sum[lson]+sum[rson];}\n\t\n\tvoid pushdown(int x,int ln,int rn){\n\t\tif(lazy[x]){\n\t\t    lazy[lson]+=lazy[x];\n\t\t\tlazy[rson]+=lazy[x];\n\t\t\tsum[lson]+=lazy[x]*ln;\n\t\t\tsum[rson]+=lazy[x]*rn;\n\t\t\tlazy[x]=0;\n\t\t}\n\t}\n\t\n\tvoid build(int x,int l,int r){\n\t\tlazy[x]=0;\n\t\tif(l==r){sum[x]=0;return;}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(lson,l,mid);build(rson,mid+1,r);\n\t\tpushup(x); \n\t}\n\t\n\tvoid update(int x,int l,int r,int val,int L,int R){\n\t\tif(L<=l &&r<=R){sum[x]+=(r-l+1)*val;lazy[x]+=val;return;}\n\t\tint mid=(l+r)>>1;\n\t\tpushdown(x,mid-l+1,r-mid);\n\t\tif(L<=mid) update(lson,l,mid,val,L,R);\n\t\tif(R>mid) update(rson,mid+1,r,val,L,R);\t\t\t\n\t\tpushup(x);\n\t}\n\t\n\tint query(int x,int l,int r,int L,int R){\n\t\tif(L<=l &&r<=R) return sum[x];\n\t\tint ans=0;\n\t\tint mid=(l+r)>>1;\n\t\tpushdown(x,mid-l+1,r-mid);\n        if(l>R||r<L) return 0;\n\t\tif(L<=mid) ans+=query(lson,l,mid,L,R);\n\t\tif(R>mid) ans+=query(rson,mid+1,r,L,R);\n\t\treturn ans;\n\t}\n}\n\nnamespace Cut{\n\tvoid dfs1(int x,int fat){\n\t\tsize[x]=1;depth[x]=depth[fat]+1;fa[x]=fat;\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint to=e[i].to;\n\t\t\tif(to==fat) continue;\n\t\t\tdfs1(to,x);\n\t\t\tsize[x]+=size[to];\n\t\t\tif(size[son[x]]<size[to]) son[x]=to;\n\t\t}\n\t}\n\t\n\tvoid dfs2(int x,int tp){\n\t\ttop[x]=tp;dfn[x]=++cnt;pre[cnt]=x;\n\t\tif(son[x]) dfs2(son[x],tp);\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint to=e[i].to;\n\t\t\tif(to==son[x]||to==fa[x]) continue;\n\t\t\tdfs2(to,to);\n\t\t}\n\t}\n\t\n\tvoid change1(int x,int y,int val){\n\t\twhile(top[x]!=top[y]){\n\t\t    if(depth[top[x]]<depth[top[y]]) swap(x,y);\n\t\t\tSeg::update(1,1,n,val,dfn[top[x]],dfn[x]);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dfn[x]>dfn[y]) swap(x,y);\n\t\tSeg::update(1,1,n,val,dfn[x],dfn[y]);\n\t}\n\t\n\tint qsum1(int x,int y){\n\t\tint ans=0;\n\t\twhile(top[x]!=top[y]){\n\t\t    if(depth[top[x]]<depth[top[y]]) swap(x,y);\n\t\t\tans+=Seg::query(1,1,n,dfn[top[x]],dfn[x]);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dfn[x]>dfn[y]) swap(x,y);\n\t\tans+=Seg::query(1,1,n,dfn[x],dfn[y]);\n\t\treturn ans; \n\t}\n\t\n\tvoid change2(int x,int val){Seg::update(1,1,n,val,dfn[x],dfn[x]+size[x]-1);}\n\tint qsum2(int x){return Seg::query(1,1,n,dfn[x],dfn[x]+size[x]-1);}\n}\n\nsigned main(){\n\tn=read();\n//\tfor(int i=1;i<=n;i++) a[i]=i-1;\n\tfor(int i=1,fs,es;i<n;i++){fs=read()+1;es=read()+1;addedge(fs,es);addedge(es,fs);}\n\tCut::dfs1(1,0);Cut::dfs2(1,1);Seg::build(1,1,n);\n\tq=read();\n\tfor(int i=1,fs,es,ds;i<=q;i++){\n\t    cin>>s;\n\t    if(s =='A'){\n\t    \tfs=read()+1;es=read()+1;ds=read();\n\t\t\tCut::change1(fs,es,ds); \n\t\t}\n\t\tif(s =='Q'){\n\t\t\tfs=read()+1;\n\t\t\tprintf(\"%lld\\n\",Cut::qsum2(fs));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n**ps\uff1a**\n\n\u672c\u9898\u6bcf\u4e2a\u70b9\u7684\u521d\u59cb\u6743\u503c\u662f 0 \uff0c\u5e8f\u53f7\u662f 1 \u5230 n\uff0c\n\n\u6211\u770b\u6210\u4e86\u521d\u59cb\u6743\u503c\u4e3a 1 \u5230 n \uff0c\u7136\u540e\u5c31 D \u4e86\u597d\u4e45 \n\n\u53e6\u5916\u6ce8\u610f\u7f16\u53f7\u4ece 0 \u5f00\u59cb\uff0c\u8981\u5728\u8f93\u5165\u52a0\u8fb9\u6216\u8005 dfs \u5efa\u6811\u7684\u5730\u65b9\u5904\u7406\u4e00\u4e0b\n\n------------\n\n\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9",
        "postTime": 1605355956,
        "uid": 281497,
        "name": "KEBrantily",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "upd: \u7ba1\u7406\u8bf4\u6ca1\u4ee3\u7801\u4e0d\u597d\u7406\u89e3\uff0c\u4e8e\u662f\u6211\u5c31\u628a\u4ee3\u7801\u653e\u4e0a\u6765\u4e86\uff08\n\n\u5f3a\u70c8\u8981\u6c42\u7ba1\u7406\u5361\u4e00\u5361\u6811\u5256\uff0c\u56e0\u4e3a\u51fa\u9898\u4eba\u8bf4\u6b63\u89e3\u4e0d\u662f\u6811\u5256\uff08\n\n\u5927\u5bb6\u5e94\u8be5\u5b66\u6811\u72b6\u6570\u7ec4\u7684\u65f6\u5019\u90fd\u5b66\u8fc7\u5982\u4f55\u7528\u6811\u72b6\u6570\u7ec4\u5904\u7406\u533a\u95f4\u52a0\u533a\u95f4\u67e5\u7684\u95ee\u9898 \uff08POJ3468\uff09\n\n\u505a\u5b8c\u90a3\u4e2a\u9898\u518d\u505a\u8fd9\u4e2a\u9898\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c\u601d\u60f3\u662f\u76f8\u540c\u7684\uff0c\u90fd\u662f\u7ef4\u62a4\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\n\n\u5f53\u6211\u4eec\u8981\u4fee\u6539\u4e00\u6761\u8def\u5f84 $u\\to v$ \u7684\u65f6\u5019\uff0c\u5728 $u$ \u8282\u70b9\u4e0a\u589e\u52a0 $d$\uff0c\u5728 $v$ \u8282\u70b9\u4e0a\u589e\u52a0 $d$ \uff0c\u5728 $u$ \u548c $v$ \u7684 LCA \u51cf\u5c11 $d$\uff0c\u5728 LCA \u7684\u7236\u4eb2\u8282\u70b9\u51cf\u5c11 $d$\n\n\u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\u4e0a\u7684\u503c\u5373\u4e3a\u5b50\u6811\u548c\n\n\u4f46\u662f\u8981\u6c42\u67e5\u8be2\u7684\u662f\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u6240\u6709\u5b50\u6811\u7684\u548c\n\n\u53d1\u73b0\u8981\u6c42\u7684\u4e1c\u897f\u5373\u4e3a $\\sum dep_{u,v}\\times tag_u$\n\n$tag_u$ \u5373\u4e3a\u4e00\u4e2a\u8282\u70b9\u4e0a\u7684\u5dee\u5206\u503c\uff0c$dep_{u,v}$ \u5373\u4e3a $u$ \u76f8\u5bf9\u4e8e $v$ \u7684\u6df1\u5ea6\u3002\u8fd9\u91cc\u89c4\u5b9a $u$ \u76f8\u5bf9\u4e8e $u$ \u7684\u6df1\u5ea6\u4e3a 1\n\n\u7136\u540e\u8f6c\u5316\u4e00\u4e0b\uff0c\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55 $\\sum dep_v\\times tag_v$\n\n\u8fd9\u91cc $dep_v$ \u6307 $v$ \u7684\u7edd\u5bf9\u6df1\u5ea6\uff0c\u4e5f\u5c31\u662f\u76f8\u5bf9\u4e8e\u6839\u8282\u70b9\u7684\u6df1\u5ea6\n\n\u53e6\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55 $\\sum tag_u$\n\n\u4e8e\u662f\u5f88\u660e\u663e\u7b54\u6848\u5c31\u662f\u7b2c\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7684\u67e5\u8be2\u7ed3\u679c**\u51cf\u53bb**\u7b2c\u4e8c\u4e2a\u6811\u72b6\u6570\u7ec4\u7684\u67e5\u8be2\u7ed3\u679c $\\times (dep_u-1)$\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\uff0c\u5e38\u6570\u4e0d\u5927\uff0c\u5728\u76ee\u524d\u7684\u8bc4\u6d4b\u73af\u5883\u4e0b\u7528 O2 \u6ca1\u5361\u5e38\u80fd\u5230 900 ms \u5de6\u53f3\uff0c\u5e94\u8be5\u4f18\u4e8e\u5e38\u6570\u5de8\u5927\u8fd8\u591a\u4e00\u4e2a $\\log$ \u7684\u7ebf\u6bb5\u6811+\u6811\u5256\n\n\n\uff08\u9898\u89e3\u4e2d\u95f4\u90a3\u4e00\u6bb5\u662f\u4ece\u6211\u7684\u505a\u9898\u7b14\u8bb0\u90a3\u91cc\u66b4\u529b ctrl+c/v \u8fc7\u6765\u7684\uff09\n\ncode:\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100010\n#define ll long long\nusing namespace std;\nint n,Q,fa[MAXN],son[MAXN],bro[MAXN];\nint in[MAXN],out[MAXN],tot,dep[MAXN];\nvoid dfs(int u){\n\tin[u]=++tot;dep[u]=dep[fa[u]]+1;\n\tfor(int v=son[u];v;v=bro[v])dfs(v);\n\tout[u]=tot;\n}\nnamespace LCA{\n\tint sz[MAXN],hev[MAXN],top[MAXN];\n\tvoid dfs1(int u){\n\t\tsz[u]=1;int mx=-114514;\n\t\tfor(int v=son[u];v;v=bro[v]){\n\t\t\tdfs1(v);sz[u]+=sz[v];\n\t\t\tif(mx<sz[v])mx=sz[v],hev[u]=v;\n\t\t}\n\t}\n\tvoid dfs2(int u,int ct){\n\t\ttop[u]=ct;\n\t\tif(hev[u])dfs2(hev[u],ct);\n\t\tfor(int v=son[u];v;v=bro[v])\n\t\t\tif(v!=hev[u])dfs2(v,v);\n\t}\n\tint lca(int u,int v){\n\t\twhile(top[u]!=top[v]){\n\t\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\t\tu=fa[top[u]];\n\t\t}return dep[u]>dep[v]?v:u;\n\t}\n}\nusing LCA::dfs1;using LCA::dfs2;using LCA::lca;\nstruct BIT{\n\tll t[MAXN];\n\tint lowbit(int x){return x&(-x);}\n\tvoid update(int x,ll y){for(;x<=n;x+=lowbit(x))t[x]+=y;}\n\tll query(int x){\n\t\tll ret=0;\n\t\tfor(;x;x-=lowbit(x))ret+=t[x];\n\t\treturn ret;\n\t}\n}T1,T2;\nvoid update(int u,int v,ll d){\n\tint lc=lca(u,v),lcf=fa[lc];\n\tT1.update(in[u],d*dep[u]);\n\tT1.update(in[v],d*dep[v]);\n\tT1.update(in[lc],-d*dep[lc]);\n\tT2.update(in[u],d);\n\tT2.update(in[v],d);\n\tT2.update(in[lc],-d);\n\tif(!lcf)return;\n\tT1.update(in[lcf],-d*dep[lcf]);\n\tT2.update(in[lcf],-d);\n}\nll query(int u){\n\tll ret=T1.query(out[u])-T1.query(in[u]-1);\n\tret-=(dep[u]-1)*(T2.query(out[u])-T2.query(in[u]-1));\n\treturn ret;\n}\nchar opt[10];\nsigned main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++){\n\t\tint pa,u;scanf(\"%d%d\",&pa,&u);pa++;u++;\n\t\tfa[u]=pa;bro[u]=son[pa];son[pa]=u;\n\t}scanf(\"%d\",&Q);\n\tdfs(1);dfs1(1);dfs2(1,1);\n\twhile(Q--){\n\t\tscanf(\"%s\",opt+1);\n\t\tif(opt[1]=='Q'){\n\t\t\tint u;scanf(\"%d\",&u);u++;\n\t\t\tprintf(\"%lld\\n\",query(u));\n\t\t}else{\n\t\t\tint u,v;ll d;scanf(\"%d%d%lld\",&u,&v,&d);\n\t\t\tu++;v++;update(u,v,d);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1596553003,
        "uid": 65681,
        "name": "UltiMadow",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "\n\u770b\u9898\u9762\u8fd9\u4e48\u6709\u610f\u601d~~\u76f8\u5bf9\u800c\u8a00~~\uff0c\u7ed3\u679c\u662f\u4e2a\u6a21\u677f\u9898\uff08\u53c8\u53ef\u4ee5\u6c34\u7ecf\u9a8c\u4e86\u5462\n\n\u65e0\u826f\u5ba3\u4f20\u4e00\u4e0b\u81ea\u5df1\u7684\u535a\u5ba2\uff0c\u5e0c\u671b\u6709\u6240\u5e2e\u52a9\n\n[\u6811\u94fe\u5256\u5206](https://www.cnblogs.com/Silymtics/p/13868056.html)\n\n\n# Solution\n\n\u5206\u4e3a\u4e24\u4e2a\u64cd\u4f5c\uff0c\u54b1\u4eec\u5206\u5f00\u6765\u770b\n\n## \u2018A\u2019\u64cd\u4f5c\n\n\u5c06\u70b9 $u$ \u548c $v$ \u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684\u679c\u5b50\u4e2a\u6570\u90fd\u52a0\u4e0a $d$\n\n\u6811\u94fe\u5256\u5206\u6a21\u677f\u64cd\u4f5c\uff0c\u76f4\u63a5\u641e\u5c31\u597d\u4e86\n\n## \u2018Q\u2019\u64cd\u4f5c\n\n\u548c\u6a21\u677f\u9898\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u6c42\u7684\u662f\u5b50\u6811\u4e2a\uff0c\u60f3\u4e00\u60f3\u6211\u4eec\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u662f\u600e\u4e48\u904d\u5386\u7684\n\n\"dfs\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u628a\u5b83\u7684\u513f\u5b50\u90fd\u904d\u5386\u4e00\u904d\uff0c\u7136\u540e\u7edf\u8ba1\u4e00\u4e0b\u8be5\u8282\u70b9\u7684\u5927\u5c0f\"\n\n\u770b\uff0c\u5728dfs\u5e8f\u4e0a\uff0c\u6211\u4eec\u628a\u5b83\u4eec\u7684\u513f\u5b50\u653e\u5728\u4e86\u4e00\u8d77\uff0c\u5e76\u4e14\u957f\u5ea6\u662f\u8fd9\u68f5\u5b50\u6811\u7684\u6839\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u6c42\u548c\u5c31\u597d\u4e86\n\n# AC\u4ee3\u7801\n\n\uff08\u6211\u77e5\u9053\u4f60\u4eec\u6700\u60f3\u770b\u8fd9\uff0c\u4f46\u61c2\u4e86\u4e0a\u9762\u7684\u601d\u8def\u5e94\u8be5\u80fd\u81ea\u5df1\u6253\u51fa\u6765\uff09\n\n```cpp\n/*\nWork by: Suzt_ilymics\nKnowledge: ??\nTime: O(??)\n*/\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define int long long\nusing namespace std;\nconst int MAXN = 1e5+5;\n\nint n, Q, cnt;\nint fath[MAXN], dfn[MAXN], pre[MAXN], top[MAXN], siz[MAXN], dep[MAXN], son[MAXN];\n\nint read(){\n    int w = 1, s = 0;\n    char ch = getchar();\n    while(ch < '0' || ch > '9') { if(ch == '-') w = -1; ch = getchar(); }\n    while(ch >= '0' && ch <= '9') s = (s << 1) + (s << 3) + ch - '0', ch = getchar();\n    return s * w;\n}\n\nnamespace Seg{\n    #define lson i << 1\n    #define rson i << 1 | 1\n    struct Tree{\n        int len, lazy, sum;\n    }tree[MAXN << 2];\n    void push_up(int i){\n        tree[i].sum = tree[lson].sum + tree[rson].sum;\n        return ;\n    }\n    void push_down(int i){\n        if(tree[i].lazy){\n            tree[lson].lazy += tree[i].lazy;\n            tree[rson].lazy += tree[i].lazy;\n            tree[lson].sum += tree[lson].len * tree[i].lazy;\n            tree[rson].sum += tree[rson].len * tree[i].lazy;\n            tree[i].lazy = 0;\n        }\n        return ;\n    }\n    void build(int i, int l, int r){\n        tree[i].len = r - l + 1;\n        tree[i].lazy = 0;\n        if(l == r){ tree[i].sum = 0; return ;}\n        int mid = (l + r) >> 1;\n        build(lson, l, mid), build(rson, mid + 1, r);\n        push_up(i);\n        return ;\n    }\n    void add(int i, int l, int r, int L, int R, int k){\n        if(L <= l && r <= R){\n            tree[i].sum += tree[i].len * k;\n            tree[i].lazy += k;\n            return ;\n        }\n        push_down(i);\n        int mid = (l + r) >> 1;\n        if(mid >= L) add(lson, l, mid, L, R, k);\n        if(mid < R) add(rson, mid + 1, r, L, R, k);\n        push_up(i);\n        return ;\n    }\n    int get_sum(int i, int l, int r, int L, int R){\n        if(L <= l && r <= R){\n            return tree[i].sum; \n        }\n        push_down(i);\n        int mid = (l + r) >> 1, ans = 0;\n        if(mid >= L) ans += get_sum(lson, l, mid, L, R);\n        if(mid < R) ans += get_sum(rson, mid + 1, r, L, R);\n        return ans;\n    }\n}\n\nnamespace Cut{\n    struct edge{\n        int to, nxt;\n    }e[MAXN << 1];\n    int head[MAXN], num_edge;\n    void add_edge(int from ,int to){\n        e[++num_edge] = (edge){to, head[from]}, head[from] = num_edge;\n    }\n    void dfs(int x, int fa){\n        siz[x] = 1, fath[x] = fa, dep[x] = dep[fa] + 1;\n        for(int i = head[x]; i; i = e[i].nxt){\n            int v = e[i].to;\n            if(v == fa) continue;\n            dfs(v, x);\n            siz[x] += siz[v];\n            if(siz[v] > siz[son[x]]){ son[x] = v; }\n        }\n    }\n    void dfs2(int x, int tp){\n        dfn[x] = ++cnt, pre[cnt] = x, top[x] = tp;\n        if(son[x]) dfs2(son[x], tp);\n        for(int i = head[x]; i; i = e[i].nxt){\n            int v = e[i].to;\n            if(v == fath[x] || v == son[x]) continue;\n            dfs2(v, v);//\n        }\n    }\n    void change(int x, int y, int k){\n        while(top[x] != top[y]){\n            if(dep[top[x]] < dep[top[y]]){ swap(x, y); }\n            Seg::add(1, 1, n, dfn[top[x]], dfn[x], k);\n            x = fath[top[x]];\n        }\n        if(dep[x] > dep[y]) swap(x, y);\n        Seg::add(1, 1, n, dfn[x], dfn[y], k);\n    }\n}\n\nsigned main(){\n    n = read();\n    for(int i = 1, u, v; i < n; ++i){\n        u = read(), v = read();\n        Cut::add_edge(u + 1, v + 1), Cut::add_edge(v + 1, u + 1);\n    }\n    Cut::dfs(1, 0), Cut::dfs2(1, 1), Seg::build(1, 1, n);\n    Q = read();\n    for(int i = 1, x, y, k; i <= Q; ++i){\n        char opt;\n        cin>>opt;\n        if(opt == 'A'){\n            x = read() + 1, y = read() + 1, k = read();\n            Cut::change(x, y, k);\n        }\n        if(opt == 'Q'){\n            x = read() + 1;\n            printf(\"%lld\\n\", Seg::get_sum(1, 1, n, dfn[x], dfn[x] + siz[x] - 1));\n        }\n    }\n    return 0;\n}\n```\n\n\u6700\u540e\u63a8\u8350\u51e0\u4e2a\u4f8b\u9898\uff1a\n\n[P4315 \u6708\u4e0b\u6bdb\u666f\u6811](https://www.luogu.com.cn/problem/P4315)\n\n[P2590 \u6811\u7684\u7edf\u8ba1](https://www.luogu.com.cn/problem/P2590)\n\n[P3178 \u6811\u4e0a\u64cd\u4f5c](https://www.luogu.com.cn/problem/P3178)\n\n\u6811\u94fe\u5256\u5206\u867d\u7136\u7801\u91cf\u5927\uff0c\u4f46\u5728\u6811\u4e0a\u64cd\u4f5c\u786e\u5b9e\u6709\u4f18\u52bf\uff0c\n\n\u5efa\u8bae\u5728\u521a\u5f00\u59cb\u5b66\u7684\u65f6\u5019\u8981\u591a\u6253\u51e0\u904d\uff0c\u4e0d\u8981\u603b\u60f3\u7740\u590d\u5236\u4ee5\u524d\u7684\u4ee3\u7801~~\u8bf4\u7684\u5c31\u662f\u6211~~\uff0c\n\n\u53ef\u4ee5\u5e2e\u52a9\u52a0\u6df1\u7406\u89e3\uff0c\u63d0\u9ad8\u7801\u901f\uff0c\uff08~~\u987a\u4fbf\u8fd8\u80fd\u628a\u7ebf\u6bb5\u6811\u7ec3\u4e86~~\uff09",
        "postTime": 1606309794,
        "uid": 230580,
        "name": "Suzt_ilymtics",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5c31\u662f\u4e00\u9053\u6811\u5256\u7684\u6a21\u677f\uff0c\u6ca1\u6709\u4ec0\u4e48\u591a\u8bf4\u7684\uff0c\u53ea\u8981\u4f1a\u6253\u6811\u5256\u5c31\u80fd\u79d2\u8fd9\u9053\u9898\uff0c\u4f46\u662f\u6811\u5256\u91cc\u9762\u8fd8\u662f\u6709\u8bb8\u591a\u9700\u8981\u6ce8\u610f\u7684\u4e1c\u897f\uff0c\u4e0d\u7136\u5f88\u6709\u53ef\u80fd\u4f1a\u8c03\u51e0\u4e2a\u5c0f\u65f6\u90fd\u627e\u4e0d\u5230\u9519\u5728\u54ea\u91cc\uff0c\u4ee5\u4e0b\u662f\u4ee3\u7801\uff0c\u521a\u5b66\u6811\u5256\u6216\u8005\u627e\u4e0d\u51fa\u4ee3\u7801\u9519\u8bef\u7684\u5927\u4f6c\u4eec\u53ef\u4ee5\u770b\u770b\uff0c\u5185\u542b\u8be6\u7ec6\u6ce8\u91ca\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\ntypedef long long ll;\nstruct node{\n    int lef;\n    int rig;\n    ll sum;//\u533a\u95f4\u5185\u679c\u5b50\u548c\n    ll aim;//pushdown\u61d2\u6807\u8bb0\n} Tree[1000000];\nint n;\nint head[1000000];\nint nxt[1000000];\nint ver[1000000];\nint cnt;\nint idx;\nint id[1000000];\nint siz[1000000];\nint top[1000000];\nint dep[1000000];\nint father[1000000];\nint son[1000000];\nvoid add(int x,int y)\n{\n    nxt[++cnt] = head[x];\n    head[x] = cnt;\n    ver[cnt] = y;\n}\nvoid dfs1(int now,int fa,int depth)\n{\n    father[now] = fa;\n    dep[now] = depth;\n    siz[now] = 1;\n    for (int i = head[now]; i;i=nxt[i])\n    {\n        int v0 = ver[i];\n        if(v0==fa)\n            continue;\n        dfs1(v0, now, depth + 1);\n        siz[now] += siz[v0];\n        if(siz[son[now]]<siz[v0])\n            son[now] = v0;//\u5b50\u6811\u6700\u5927\u7684\u5373\u4e3a\u8be5\u8282\u70b9\u7684\u91cd\u513f\u5b50\n    }\n}\nvoid dfs2(int now,int t)\n{\n    top[now] = t;//\u8be5\u8282\u70b9\u6240\u5904\u7684\u94fe\u7684\u94fe\u9876\n    id[now]=++idx;\n    if(!son[now])\n        return;\n    dfs2(son[now], t);//\u641c\u7d22\u91cd\u513f\u5b50\n    for (int i = head[now]; i;i=nxt[i])\n    {\n        int v0 = ver[i];\n        if(v0==father[now]||v0==son[now])\n            continue;\n        dfs2(v0, v0);\n    }\n}\nvoid pushup(int now)\n{\n    Tree[now].sum = Tree[now << 1].sum + Tree[now << 1 | 1].sum;\n}\nvoid build(int now,int l,int r)\n{\n    Tree[now] = {l, r, 0, 0};\n    if(l==r)\n        return;\n    int mid = l + r >> 1;\n    build(now << 1, l, mid);\n    build(now << 1 | 1, mid + 1, r);\n    pushup(now);\n}\nvoid pushdown(int now)\n{\n    if(Tree[now].aim)\n    {\n        Tree[now << 1 | 1].sum += (Tree[now << 1 | 1].rig - Tree[now << 1 | 1].rig + 1) * Tree[now].aim;\n        Tree[now << 1].sum += (Tree[now << 1].rig - Tree[now << 1].lef + 1) * Tree[now].aim;\n        Tree[now << 1].aim += Tree[now].aim;\n        Tree[now << 1 | 1].aim += Tree[now].aim;\n        Tree[now].aim = 0;\n    }\n}//pushdown\nvoid modify(int now,int l,int r,int k)\n{\n    if(l<=Tree[now].lef&&r>=Tree[now].rig)\n    {\n        Tree[now].sum = (Tree[now].sum+k * (Tree[now].rig - Tree[now].lef + 1));\n        Tree[now].aim = (Tree[now].aim + k) ;\n        return;\n    }\n    pushdown(now);\n    int mid = Tree[now].lef + Tree[now].rig >> 1;\n    if(l<=mid)\n        modify(now << 1, l, r, k);\n    if(r>mid)\n        modify(now << 1 | 1, l, r, k);\n    pushup(now);\n}\nll query(int now,int l,int r)\n{\n    if(l<=Tree[now].lef&&Tree[now].rig<=r)\n        return Tree[now].sum;\n    pushdown(now);//\u8bb0\u5f97pushdown\uff0c\u6211\u7ecf\u5e38\u5fd8\u8bb0\u5bfc\u81f4\u5f88\u4e45\u67e5\u4e0d\u51fa\u6765\n    int mid = Tree[now].lef + Tree[now].rig >> 1;\n    ll res = 0;\n    if(l<=mid)\n        res = (res+query(now << 1, l, r));\n    if(r>mid)\n        res = (res+query(now << 1 | 1, l, r));\n    return res;\n}//\u5e38\u89c4\u7ebf\u6bb5\u6811\u64cd\u4f5c\nvoid modify_path(int now,int to,int k)\n{\n    while(top[now]!=top[to])\n    {\n        if(dep[top[now]]<dep[top[to]])\n            swap(now, to);\n        modify(1, id[top[now]], id[now], k);\n        now = father[top[now]];\n    }//\u500d\u589e\u8df3\u8dc3\u4fee\u6539\uff0c\u4fee\u6539\u8def\u5f84\u4e0a\u7684\u6240\u6709\u679c\u5b50\u7684\u6570\u91cf\n    if(dep[now]<dep[to])\n        swap(now, to);\n    modify(1, id[to], id[now], k);//\u8bb0\u4f4f\u6240\u6709\u7684modify\u91cc\u9762\u7684\u53c2\u6570\u90fd\u662fdfs\u5e8f\uff0c\u5426\u5219\u53ef\u80fd\u5f88\u4e45\u67e5\u4e0d\u51fa\u6765\uff0c\u672c\u849f\u84bb\u5c31\u56e0\u4e3a\u8fd9\u4e2a\u67e5\u4e86\u5f88\u4e45\n}\nll query_tree(int now)\n{\n    return query(1, id[now], id[now] + siz[now] - 1);//\u5b50\u6811\u7684\u5de6\u8fb9\u754c\u5373\u4e3a\u5f53\u524d\u8282\u70b9\u56e0\u4e3a\u8d8a\u5728\u4e0a\u9762\u7684\u70b9\u7684dfs\u5e8f\u8d8a\u5c0f\uff0c\u800c\u53f3\u8fb9\u754c\u5373\u4e3a\u5f53\u524d\u8282\u70b9+\u5b50\u6811\u8282\u70b9\u4e2a\u6570-1\n}\nint main()\n{\n    scanf(\"%d\", &n);\n    for (int i = 1; i < n;i++)\n    {\n        int a, b;\n        scanf(\"%d%d\", &a, &b);\n        a++;\n        b++;//\u8bb0\u5f97++\uff0c\u8282\u70b9\u7684\u7f16\u53f7\u4ece0\u5f00\u59cb\n        add(a, b);\n        add(b, a);\n    }\n    dfs1(1, -1, 1);\n    dfs2(1, 1);\n    build(1, 1, n);//\u6811\u5256\u521d\u59cb\u5316\n    int q;\n    scanf(\"%d\", &q);\n    for (int i = 1; i <= q;i++)\n    {\n        char op[2];\n        scanf(\"%s\", op);\n        if(*op=='A')\n        {\n            int u, v, d;\n            scanf(\"%d%d%d\", &u, &v, &d);\n            u++, v++;//\u540c\u4e0a\uff0c\u8bb0\u5f97++\n            modify_path(u, v, d);\n        }\n        else \n        {\n            int u;\n            scanf(\"%d\", &u);\n            u++;\n            printf(\"%lld\\n\",query_tree(u));//\u6ce8\u610f\u9898\u9762\u5df2\u7ecf\u63d0\u793a\u8be5\u9898\u9700\u8981\u4f7f\u7528longlong\uff0c\u5426\u5219\u4f1a\u70b8\n        }\n    }\n}\n```\n",
        "postTime": 1605444045,
        "uid": 278481,
        "name": "Link_Space",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "#### \u6c34\u8bdd\n\u4e0d\u662f\u5f88\u61c2\u4e3a\u4ec0\u4e48\u7701\u9009\u4f1a\u8003\u8fd9\u79cd\u6a21\u677f\u9898\uff0c\u800c\u4e14\u660e\u663e\u8fd9\u4e2a\u6a21\u677f\u6bd4\u6811\u94fe\u5256\u5206\u7684\u677f\u5b50\u8fd8\u597d\u6253\uff0c\u56e0\u4e3a\u6811\u94fe\u5256\u5206\u7684\u677f\u5b50\u652f\u6301\u7684\u64cd\u4f5c\u6bd4\u8f83\u591a.....\n\n\n\u4e00\u540d\u63d0\u9ad8\u7ec4\u7206\u96f6\u9009\u624b:\n\n$20$\u5206\u949f\u6253\u5b8c\u4e86\uff0c\u7136\u540e\u7f16\u8bd1\u4e00\u904d\u8fc7\u4e86\uff0c\u4ea4\u4e0a\u53bbA\u4e86\u3002\n\n\u597d\u50cf\u8fd9\u4e5f\u662f\u6211\u4e3a\u6570\u4e0d\u591a\u7684\u4e00\u904d\u8fc7\u6811\u5256\u7684\u9898\u76ee\uff08\u8bb0\u5f97\u4e0d\u9519\u7684\u8bdd\u8fd9\u662f\u7b2c5\u6b21\n\n#### \u505a\u6cd5\n\n\u8fd9\u9053\u9898\u770b\u4e0a\u53bb\u6ca1\u4ec0\u4e48\u60f3\u60f3\uff0c\u76f4\u63a5\u4e0a\u6811\u94fe\u5256\u5206\u4e86\u3002\n\n\u5173\u4e8e\u6811\u94fe\u5256\u5206\u6211\u4e5f\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u8bb2\u4e86\uff0c\u6709\u8bb8\u591a\u535a\u5ba2\u6bd4\u6211\u8bb2\u5f97\u597d\uff0c\u5982\u679c\u4f60\u662f\u8fd8\u6ca1\u6709\u5b66\u4e60\u6811\u94fe\u5256\u5206\u7684\u540c\u5b66\u7684\u8bdd\uff0c\u5728\u8fd9\u91cc\u5b89\u5229\u535a\u5ba2\uff1a\n\n[OIWIKI](https://oi-wiki.org/graph/hld/)\n\n[\u67d0\u4e2a\u795e\u4f6c\u7684\u535a\u5ba2,\u8bb2\u5f97\u5f88\u6e05\u6670](https://www.luogu.com.cn/blog/yjpiaomiao/shulianpoufen)\n\n\uff08\u8fd9\u91cc\u6307\u7684\u662f\u8f7b\u91cd\u94fe\u5256\u5206\uff09\n\n\u8fd9\u91cc\u603b\u7ed3\u4e00\u4e0b\uff1a\n\n#### \u9002\u7528\u60c5\u51b5\n+ \u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u503c\u8fdb\u884c\u4fee\u6539\n\n+ \u67e5\u8be2\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u4e00\u4e9b\u5177\u6709\u53ef\u4ee5\u8fdb\u884c\u533a\u95f4\u7ef4\u62a4\u7684\u6027\u8d28\u7684\u4e1c\u897f(\u6bd4\u5982\u6c42\u548c\uff0c\u6700\u5927\u503c)\n\n##### \u989d\u5916\u7684\u4f8b\u5b50:\n\n\u67e5\u8be2\u4e00\u6761\u8def\u5f84\u4e2d\u7684\u5143\u7d20\u79cd\u7c7b\u603b\u6570\n\n\u67e5\u8be2\u4e00\u6761\u8def\u5f84\u4e2d\u5927\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u503c\u7684\u6570\u7684\u4e2a\u6570(\u6811\u94fe\u5256\u5206\u540e\u5957\u6743\u503c\u7ebf\u6bb5\u6811 or \u4e3b\u5e2d\u6811)\n\n\u67e5\u8be2\u8def\u5f84\u4e2d\u7b2c$k$\u5927\u7684\u6570\n\n+ \u5bf9\u4e8e\u4e00\u68f5\u5b50\u6811\u4e2d\u7684\u503c\u8fdb\u884c\u4fee\u6539\n\n+ \u67e5\u8be2\u4e00\u68f5\u5b50\u6811\u4e2d\u7684\u4e00\u4e9b\u5177\u6709\u53ef\u4ee5\u8fdb\u884c\u533a\u95f4\u7ef4\u62a4\u7684\u6027\u8d28\u7684\u4e1c\u897f(\u6bd4\u5982\u6c42\u548c\uff0c\u6700\u5927\u503c)\n\n\u4e0a\u9762\u56db\u79cd\u662f\u6700\u88f8\u7684\u6811\u94fe\u5256\u5206\u3002\u76f4\u63a5\u4e0a\u6811\u94fe\u5256\u5206\u52a0\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\n#### \u7b97\u6cd5\u590d\u6742\u5ea6\uff1a\n\n\u5bf9\u4e8e\u8def\u5f84\u4e0a\u7684\u66f4\u65b0\u6743\u503c/\u6c42\u548c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO($log^2n$)\u3002\n\n\u56e0\u4e3a\u91cd\u94fe\u7684\u6761\u6570\u4e0d\u8d85\u8fc7$log_2n$\u6761(\u4e00\u822c\u7684\u8bdd\u6570\u91cf\u53ef\u80fd\u8fdc\u8fdc\u4f4e\u4e8e\u8fd9\u4e2a\u503c)\uff0c\u6bcf\u6b21\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f:O($log_2n$)\u7684\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662fO$(log^2n)$\u7684\u3002\n\n\u5b50\u6811\u4fee\u6539/\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6:O$(logn)$\uff0c\u5f88\u660e\u663e\uff0c\u56e0\u4e3a$DFS$\u540e\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u7ebf\u6bb5\u6811\u505a\u533a\u95f4\u67e5\u8be2/\u4fee\u6539\u7684\u590d\u6742\u5ea6\n\n**\u5982\u4f55\u6784\u9020\u4e00\u68f5\u6811\u4f7f\u5f97\u8f7b\u91cd\u94fe\u5256\u5206\u540e\u91cd\u94fe\u6761\u6570\u8fbe\u5230$log2(n)$**\n\n\u5b8c\u5168\u4e8c\u53c9\u6811\u5373\u53ef\u3002\u4f60\u53ef\u4ee5\u81ea\u5df1\u753b\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u7136\u540e\u4f60\u5c31\u4f1a\u53d1\u73b0\u91cd\u94fe\u5f88\u591a\uff0c\u4f46\u662f\u56e0\u4e3a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u90a3\u5b83\u7684\u6df1\u5ea6\u4e5f\u4e0d\u4f1a\u5f88\u6df1\uff0c\u6240\u4ee5\u57fa\u672c\u4e0a\u5361\u4e0d\u6b7b\u8f7b\u91cd\u94fe\u5256\u5206\u3002\n\n\u56e0\u4e3a\u8fd9\u662f\u4e00\u7bc7\u9898\u89e3\uff0c\u6240\u4ee5\u653e\u4e0a\u8fd9\u4e00\u9898\u7684\u4ee3\u7801\u5427\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int MAXN = 100005;\nint n;\n\nint cnt = 0, start[MAXN];\nint dfn[MAXN],siz[MAXN],fa[MAXN],tp[MAXN];\nint id_dfn[MAXN],deep[MAXN],son[MAXN],now = 0;\n\nstruct Edge {\n\tint next,to;\n} edge[MAXN * 2];\n\nstruct Node {\n\tint l,r,sum,laz;\n} T[MAXN * 4];\n\nvoid add(int from,int to)\n{\n\tcnt ++;\n\tedge[cnt].to = to;\n\tedge[cnt].next = start[from];\n\tstart[from] = cnt;\n}\n//\u4e0b\u9762\u662f\u7ebf\u6bb5\u6811\nvoid build_tree(int x,int l,int r)\n{\n\tT[x].l = l , T[x].r = r;\n\tT[x].sum = T[x].laz = 0;\n\tif(l == r)return ;\n\tint mid = (l + r) >> 1;\n\tbuild_tree(x << 1 , l , mid);\n\tbuild_tree(x << 1 | 1 , mid + 1 , r);\n\treturn ;\n}\n\nvoid ad(int x,int k)\n{\n\tT[x].laz += k;\n\tT[x].sum += (T[x].r - T[x].l + 1) * k;\n\treturn ;\n}\n\nvoid pushdown(int x)\n{\n\tif(T[x].laz == 0)return ;\n\tad(x << 1 , T[x].laz);\n\tad(x << 1 | 1 , T[x].laz);\n\tT[x].laz = 0;\n\treturn ;\n}\n\nvoid change(int x,int l,int r,int k)\n{\n\tif(T[x].l >= l && T[x].r <= r){ad(x,k);return ;}\n\tpushdown(x);\n\tint mid = (T[x].l + T[x].r) >> 1;\n\tif(l <= mid)change(x << 1 , l , r , k);\n\tif(r  > mid)change(x << 1 | 1 , l , r , k );\n\tT[x].sum = T[x << 1].sum + T[x << 1 | 1].sum;\n\treturn ;\n}\n\nint GetSum(int x,int l,int r)\n{\n\tint sum = 0;\n\tif(T[x].l >= l && T[x].r <= r)return T[x].sum;\n\tpushdown(x);\n\tint mid = (T[x].l + T[x].r) >> 1;\n\tif(l <= mid)sum += GetSum(x << 1 , l , r);\n\tif(r  > mid)sum += GetSum(x << 1 | 1 , l, r );\n\treturn sum;\n}\n//\u7ebf\u6bb5\u6811end\n\n//\u6811\u94fe\u5256\u5206\u7684\u6838\u5fc3\uff1a\u4e24\u4e2aDFS\nint DFS1(int x,int from)\n{\n\tfa[x] = from;deep[x] = deep[from] + 1;\n\tsiz[x] = 1 ; son[x] = 0;\n\tfor(int i = start[x] ; i ; i = edge[i].next)\n\t{\n\t\tint to = edge[i].to;\n\t\tif(deep[to])continue;\n\t\tint v = DFS1(to,x);\n\t\tsiz[x] += v;\n\t\tif(v > siz[son[x]])son[x] = to;\n\t}//\u7b2c\u4e00\u4e2aDFS\u6c42\u7236\u8282\u70b9\uff0c\u8282\u70b9\u6df1\u5ea6\u4ee5\u53ca\u5b50\u6811\u5927\u5c0f\u8fd8\u6709\u91cd\u513f\u5b50\u7684\u7f16\u53f7\n\treturn siz[x];\n}\n\nvoid DFS2(int x , int top)\n{\n\tdfn[x] = ++ now;\n\tid_dfn[now] = x;\n\ttp[x] = top;\n\tif(son[x])DFS2(son[x],top);\n\tfor(int i = start[x] ; i ; i = edge[i].next)\n\t{\n\t\tint to = edge[i].to;\n\t\tif(to == fa[x] || to == son[x] || dfn[to])continue;\n\t\tDFS2(to,to);\n\t}\n\treturn ;\n}\n//DFS end\n\nvoid deal(int x,int y,int k)\n{\n\twhile(tp[x] != tp[y])\n\t{\n\t\tif(deep[tp[x]] < deep[tp[y]])swap(x,y);\n\t\tchange(1,dfn[tp[x]],dfn[x] , k);\n\t\tx = fa[tp[x]];\n\t}\n\tchange(1,min(dfn[x],dfn[y]),max(dfn[x],dfn[y]),k);\n\treturn ;\n}\n\nsigned main()\n{\n\tcin >> n;\n\tfor(int i = 1 ; i <= n - 1 ; i ++)\n\t{\n\t\tint u , v;\n\t\tcin >> u >> v;\n\t\tadd(u + 1,v + 1);\n\t\tadd(v + 1,u + 1);\n\t}\n\tDFS1(1,0);\n\tDFS2(1,1);\n\tbuild_tree(1,1,n);\n\tint Q;\n\tcin >> Q;\n\twhile(Q)\n\t{\n\t\tint u , v , w;\n\t\tchar op;\n\t\tcin >> op;\n\t\tif(op == 'A')cin >> u >> v >> w, deal(u+1,v+1,w);\n\t\telse cin >> u ,cout << GetSum(1,dfn[u + 1] , dfn[u + 1] + siz[u + 1] - 1) << endl;\n\t\tQ --;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605232292,
        "uid": 67817,
        "name": "MuYC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "\u6811\u5256\u6a21\u677f\u9898\u4e00\u9053\uff0c\u5efa\u8bae\u521a\u5b66\u5b8c\u6811\u5256\u4e4b\u540e\u6765\u6253\u4e00\u4e0b\u8fd9\u9053\u9898\u7ec3\u7ec3\u624b\u3002\n\n[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://yunqian-qwq.github.io/post/p3833)\n\n------------\n\n\u8fd9\u9898\u8bf4\u767d\u4e86\u5c31\u662f\u7ef4\u62a4\u4e00\u68f5\u70b9\u6743\u6811\uff0c\u652f\u6301\uff1a\n\n- \u7ed9\u4e00\u6761\u94fe\u4e0a\u7684\u6240\u6709\u70b9\u7684\u6743\u503c\u52a0\u4e0a $d$\u3002\n- \u7edf\u8ba1\u5b50\u6811\u6743\u503c\u548c\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u8f7b\u91cd\u94fe\u5256\u5206\u4e00\u4e0b\uff0c\u5c31\u53d8\u6210\u4e86\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\u52a0\u4e0e\u533a\u95f4\u6c42\u548c\u3002\u5176\u5b9e\u6811\u72b6\u6570\u7ec4\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\n\n------------\n\n\u7b80\u5355\u8bf4\u4e24\u53e5\u6811\u5256\uff1a\n\n\u5982\u679c\u8981\u652f\u6301\u5728\u4e00\u4e2a\u5e8f\u5217\u4e0a\u8fdb\u884c\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u6c42\u548c\uff0c\u90a3\u4e48\u505a\u6cd5\u5341\u5206\u663e\u7136\u3002\u76f4\u63a5\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u4f46\u662f\u5f53\u95ee\u9898\u8f6c\u5230\u6811\u4e0a\u4e4b\u540e\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u5c31\u4e0d\u884c\u4e86\u3002\n\n\u4e00\u79cd\u76f4\u63a5\u7684\u60f3\u6cd5\u5c31\u662f\uff1a\u7c7b\u4f3c\u5e8f\u5217\u4e0a\u7684\u4e00\u7ef4\u5e73\u8861\u6811/\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u4e5f\u5728\u6811\u4e0a\u641e\u4fe1\u606f\u5408\u5e76&\u61d2\u6807\u8bb0\uff01\n\n\u7136\u540e\u987a\u7740\u8fd9\u4e2a\u601d\u8def\u60f3\u4e0b\u53bb\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u719f\u7ec3\u638c\u63e1 LCT&Splay\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u7c7b\u4f3c [top tree](https://negiizhao.blog.uoj.ac/blog/4912) \u4e00\u6837\u7684\u73a9\u610f\u3002\u5bf9\uff0c\u5c31\u662f\u90a3\u4e2a[\u6a21\u677f\u9898](https://www.luogu.com.cn/problem/P5649)\u9ed1\u9898\u7684\u73a9\u610f\u3002\n\n\u7136\u800c\u6211\u4eec\u8981\u8bb2\u7684\u662f\u6811\u94fe\u5256\u5206\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u8bf4 top tree \u4e86\u3002\n\n\u518d\u60f3\uff1a\u5df2\u7ecf\u53ef\u4ee5\u5728\u5e8f\u5217\u4e0a\u8fdb\u884c\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\uff0c\u600e\u4e48\u5728\u6811\u4e0a\u8fdb\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u4e1c\u6539\u6539\u897f\u6539\u6539\uff0c\u628a\u8fd9\u68f5\u6811\u641e\u6210\u4e00\u4e2a\u5e8f\u5217\u4e0d\u5c31\u884c\u4e86\u561b\uff01\n\n\u4e0d\u8fc7\uff0c\u8fd9\u53ef\u4e0d\u80fd\u4e71\u6539\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u76f4\u63a5\u7528 BFS \u5e8f\uff08\u5373\u6df1\u5ea6\uff09\u6765\u641e\uff0c\u90a3\u4e48\u53ef\u80fd\u51fa\u73b0\u52a0\u7684\u65f6\u5019\u533a\u95f4\u4e0d\u8fde\u7eed\u7684\u60c5\u51b5\uff0c\u4ece\u800c\u590d\u6742\u5ea6\u7206\u70b8\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528**\u8f7b\u91cd\u94fe\u5256\u5206**\uff0c\u628a\u6574\u68f5\u6811\u5256\u5206\u6210\u5f88\u591a\u6761\u94fe\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9 $u$\uff0c\u5b83\u7684\u91cd\u94fe\u6240\u8fde\u63a5\u7684\u5b50\u8282\u70b9 $v$\uff0c\u6ee1\u8db3 $v$ \u5728 $u$ \u7684\u6240\u6709\u5b50\u8282\u70b9\u4e2d\uff0c\u5b57\u6570\u5927\u5c0f\u662f\u6700\u5927\u7684\uff0c\u7136\u540e\u6240\u6709\u8282\u70b9\u540c\u7406\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u628a\u6574\u68f5\u6811\u5206\u5272\u6210\u4e86\u5f88\u591a\u6761\u94fe\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e24\u6b21 DFS \u6765\u641e\u51fa\u6765\u6bcf\u4e2a\u8282\u70b9\u5728\u7ebf\u6bb5\u6811\u91cc\u9762\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\u3002\n\n------------\n\nCode:\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<iostream>\n\n#define MAXN 100005\n#define lson(o) (o<<1)\n#define rson(o) (o<<1|1)\n#define int long long\n\nusing namespace std;\n\nvector<int>v[MAXN];\nint fa[MAXN],hson[MAXN],sz[MAXN],top[MAXN],dfn[MAXN],d[MAXN];\nint n,m;\n\nint DFS1(int u,int dep){\n\td[u]=dep;\n\tsz[u]=1;\n\thson[u]=0;\n\tsz[hson[u]]=0;\n\tfor(int i=0,s=v[u].size();i<s;i++){\n\t\tif(v[u][i]==fa[u])continue;\n\t\tfa[v[u][i]]=u;\n\t\tsz[u]+=DFS1(v[u][i],dep+1);\n\t\tif(sz[hson[u]]<sz[v[u][i]]){\n\t\t\thson[u]=v[u][i];\n\t\t}\n\t}\n\treturn sz[u];\n}\n\nint tot=0;\n\nvoid DFS2(int u,int tp){\n\ttop[u]=tp;\n\tdfn[u]=++tot;\n\tif(hson[u]!=0){\n\t\tDFS2(hson[u],tp);\n\t\tfor(int i=0,s=v[u].size();i<s;i++){\n\t\t\tif(v[u][i]!=fa[u]&&v[u][i]!=hson[u]){\n\t\t\t\tDFS2(v[u][i],v[u][i]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nstruct SMT{\n\t\n\tint d[MAXN<<2],plz[MAXN<<2];\n\t\n\tinline void pushup(int o){\n\t\td[o]=d[lson(o)]+d[rson(o)];\n\t}\n\t\n\tinline void build(){\n\t\tmemset(d,0,sizeof(d));\n\t\tmemset(plz,0,sizeof(plz));\n\t}\n\t\n\tinline void pushdown(int ql,int qr,int o){\n\t\tint mid=(ql+qr)>>1;\n\t\tif(plz[o]){\n\t\t\td[lson(o)]+=(mid-ql+1)*plz[o];\n\t\t\td[rson(o)]+=(qr-mid)*plz[o];\n\t\t\tplz[lson(o)]+=plz[o];\n\t\t\tplz[rson(o)]+=plz[o];\n\t\t\tplz[o]=0;\n\t\t}\n\t}\n\t\n\tinline void change(int l,int r,int k,int ql,int qr,int o){\n\t\tif(l<=ql&&qr<=r){\n\t\t\tplz[o]+=k;\n\t\t\td[o]+=(qr-ql+1)*k;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(ql+qr)>>1;\n\t\tpushdown(ql,qr,o);\n\t\tif(l<=mid)change(l,r,k,ql,mid,lson(o));\n\t\tif(r>mid)change(l,r,k,mid+1,qr,rson(o));\n\t\tpushup(o);\n\t}\n\t\n\tinline int query(int l,int r,int ql,int qr,int o){\n\t\tif(l<=ql&&qr<=r){\n\t\t\treturn d[o];\n\t\t}\n\t\tpushdown(ql,qr,o);\n\t//\tputs(\"1\");\n\t\tint mid=(ql+qr)>>1,ans=0;\n\t//\tputs(\"2\");\n\t\tif(l<=mid)ans+=query(l,r,ql,mid,lson(o));\n\t//\tputs(\"3\");\n\t\tif(r>mid)ans+=query(l,r,mid+1,qr,rson(o));\n\t//\tputs(\"4\");\n\t\treturn ans;\n\t}\n\t\n};\n\nSMT tree;\n\nvoid modify(int x,int y,int k){\n\twhile(top[x]!=top[y]){\n\t\tif(d[top[x]]<d[top[y]])swap(x,y);\n\t\ttree.change(dfn[top[x]],dfn[x],k,1,n,1);\n\t\tx=fa[top[x]];\n\t}\n\tif(d[x]>d[y])swap(x,y);\n\ttree.change(dfn[x],dfn[y],k,1,n,1);\n}\n\nint queryson(int x){\n\treturn tree.query(dfn[x],dfn[x]+sz[x]-1,1,n,1);\n}\n\nsigned main(void){\n\t\n\tcin>>n;\n\tfor(int i=2;i<=n;i++){\n\t\tint p,q;\n\t\tcin>>p>>q;\n\t\tp++,q++;\n\t\tv[p].push_back(q);\n\t\tv[q].push_back(p);\n\t}\n\t\n\tDFS1(1,1);\n\tDFS2(1,1);\n\ttree.build();\n\t\n\tcin>>m;\n\twhile(m--){\n\t\tchar opt;\n\t\tint x,y,k;\n\t\tcin>>opt;\n\t\tif(opt=='Q'){\n\t\t\tcin>>x;\n\t\t\tx++;\n\t\t\tcout<<queryson(x)<<endl;\n\t\t}\n\t\telse{\n\t\t\tcin>>x>>y>>k;\n\t\t\tx++,y++;\n\t\t\tmodify(x,y,k);\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1603100215,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "\u6b64\u9898\u5373\u4e3a\u6a21\u677f[P3384\u6811\u94fe\u5256\u5206](https://www.luogu.org/problem/P3384)\n\n\u521a\u770b\u5230\u8fd9\u9898\u4ee5\u4e3a\u6709\u4ec0\u4e48\u5751\uff08\u6bd5\u7adf\u7701\u9009D2T3\uff09\uff0c\u4ed4\u7ec6\u4e00\u770b\uff0c\u6811\u5256\u88f8\u9898\uff1f\u6700\u8fd1\u4e24\u4e09\u5929\u521a\u5b66\u6811\u5256\uff0c\u9a6c\u4e0a\u7801\u4e86\u8fd9\u9898\u3002\n\n\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5728\u8bfb\u5165\u70b9\u7f16\u53f7\u7684\u65f6\u5019\uff0c\u90fd\u628a\u5b83\u4eec$+1$\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u9898\u76ee\u4e2d\u6240\u8bf4\u7684**\u8bfb\u5165\u65f6\uff0c$a$\u662f$b$\u7684\u7236\u4eb2**\uff0c\u8fd9\u6839\u672c\u4e0d\u9700\u7406\uff0c\u5728\u7b2c\u4e00\u904d$DFS$\u65f6\u5019\u548c\u5176\u4ed6\u9898\u5904\u7406\u76f8\u540c\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u548c\u6811\u5256\u6a21\u677f\u76f8\u540c\uff0c\u6240\u4ee5\u6ca1\u6709\u592a\u591a\u53ef\u4ee5\u8bb2\uff0c\u4e0d\u8fc7\u8fd8\u662f\u8981\u63d0\u9192\u5404\u4f4d\u7801\u4ee3\u7801\u65f6\u4e00\u5b9a\u8981\u4ed4\u7ec6\u3002\u6211\u5199\u7684\u65f6\u5019\u7b2c\u4e00\u904d\u56e0\u4e3a\u5feb\u8bfb\u6253\u9519\u4e86\u800c\u7206\u96f6\uff08\u597d\u50cf\u4e0d\u7528\u5feb\u8bfb$Qw\nQ$\uff09\n\n\u5728\u8fd9\u91cc\u7ed9\u548c\u6211\u4e00\u6837\u521a\u5b66\u6811\u5256\u7684\u540c\u5b66\u5b89\u5229\u51e0\u9053\u9898\uff08\u8bdd\u8bf4$OI$ $Wiki$\u4e0a\u5c31\u6709\u8bb2\uff09\n\n[[ZJOI2008]\u6811\u7684\u7edf\u8ba1](https://www.luogu.org/problem/P2590)\n\n[[USACO11DEC]\u7267\u8349\u79cd\u690dGrass Planting](https://www.luogu.org/problem/P3038)\n\n[[HAOI2015]\u6811\u4e0a\u64cd\u4f5c](https://www.luogu.org/problem/P3178)\n\n[[NOI2015]\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668](https://www.luogu.org/problem/P2146)\n\n[[SDOI2011]\u67d3\u8272](https://www.luogu.org/problem/P2486)\n\n[[SDOI2014]\u65c5\u884c](https://www.luogu.org/problem/P3313)\n\n[[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6](https://www.luogu.org/problem/P3258)\n\n\u4ee5\u4e0a\u7b49\u7b49\uff0c\u5982**\u67d3\u8272**\u8fd9\u9898\u5c31\u5f88\u9002\u5408\u6811\u5256\u7a0d\u5fae\u8fdb\u9636\u4e00\u4e9b\u7684\u7ec3\u4e60\uff08\u6211\u4e5f\u662f\u4eca\u5929\u624d$AC$\u6389\uff09\n\n\u540c\u65f6\uff0c\u5b89\u5229\u4e00\u6ce2\u6211\u4e00\u4e2a\u670b\u53cb\u7684\u6811\u5256\u535a\u5ba2\uff0c\u5199\u7684\u771f\u7684\u5f88\u6e05\u695a\u5566[\u5de8\u4f6c\u7684\u535a\u5ba2](https://www.luogu.org/blog/zyxxs/post-xiao-yi-jiang-tan-dfs-xu-yu-shu-lian-pou-fen)\n\n\u6700\u540e\u653e$\u4ee3\u7801$\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int N=410000;\nint n,q,f[N],d[N],son[N],size[N],id[N],nowid,top[N],leaf[N],flag[N],head[N],maxE;\nstruct Edge{int nxt,to;}e[N];\ninline int read()\n{\n\tint s=0,w=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') w=-1; ch=getchar();}\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar(); return s*w;\n}\ninline void Add(int u,int v) {e[++maxE].nxt=head[u];head[u]=maxE;e[maxE].to=v;}\ninline int LeftChild(int x) {return x<<1;}\ninline int RightChild(int x) {return x<<1|1;}\ninline void Push_Up(int x) {leaf[x]=leaf[LeftChild(x)]+leaf[RightChild(x)];}\nvoid DFS1(int x,int before)\n{\n\td[x]=d[before]+1; f[x]=before; size[x]=1;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to==before) continue;\n\t\tDFS1(e[i].to,x); size[x]+=size[e[i].to];\n\t\tif(size[e[i].to]>size[son[x]]) son[x]=e[i].to;\n\t}\n}\nvoid DFS2(int x,int topf)\n{\n\tid[x]=++nowid; top[x]=topf;\n\tif(!son[x]) return; DFS2(son[x],topf);\n\tfor(int i=head[x];i;i=e[i].nxt) if(e[i].to!=f[x]&&e[i].to!=son[x]) DFS2(e[i].to,e[i].to);\n}\ninline void Change(int x,int l,int r,int k) {flag[x]+=k; leaf[x]+=k*(r-l+1);}\ninline void Push_Down(int x,int l,int r)\n{\n\tChange(LeftChild(x),l,(l+r)>>1,flag[x]);\n\tChange(RightChild(x),((l+r)>>1)+1,r,flag[x]);\n\tflag[x]=0;\n}\nvoid UpDate(int u,int v,int l,int r,int x,int k)\n{\n\tif(l>=u&&r<=v) {Change(x,l,r,k); return;}\n\tPush_Down(x,l,r);\n\tif(u<=(l+r)>>1) UpDate(u,v,l,(l+r)>>1,LeftChild(x),k);\n\tif(v>(l+r)>>1) UpDate(u,v,((l+r)>>1)+1,r,RightChild(x),k);\n\tPush_Up(x);\n}\nvoid UpDate_Road(int x,int y,int k)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]<d[top[y]]) swap(x,y);\n\t\tUpDate(id[top[x]],id[x],1,n,1,k);\n\t\tx=f[top[x]];\n\t}\n\tif(d[x]>d[y]) swap(x,y);\n\tUpDate(id[x],id[y],1,n,1,k);\n}\nint Ask(int u,int v,int l,int r,int x)\n{\n\tif(l>=u&&r<=v) return leaf[x];\n\tPush_Down(x,l,r);int ans=0;\n\tif(u<=(l+r)>>1) ans+=Ask(u,v,l,(l+r)>>1,LeftChild(x));\n\tif(v>(l+r)>>1) ans+=Ask(u,v,((l+r)>>1)+1,r,RightChild(x));\n\treturn ans;\n}\nsigned main()\n{\n\tn=read();\n\tfor(int i=1,u,v;i<n;i++)\n\t{\n\t\tu=read();v=read();u++,v++;\n\t\tAdd(u,v); Add(v,u);\n\t}\n\tDFS1(1,0);DFS2(1,1);q=read();\n\tfor(int i=1,u,v,d;i<=q;i++)\n\t{\n\t\tchar op;\n\t\tcin>>op>>u;u++;\n\t\tif(op=='A') cin>>v>>d,v++,UpDate_Road(u,v,d);\n\t\tif(op=='Q') printf(\"%lld\\n\",Ask(id[u],id[u]+size[u]-1,1,n,1));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1570191489,
        "uid": 98618,
        "name": "Provicy",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3833"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u5f88\u597d\u7ec3\u4e60\u6811\u5256\u7684\u6a21\u677f\u9898\uff0c~~\u867d\u7136\u6811\u5256\u6709\u6a21\u7248\u9898\u7684\u8bf4~~\uff0c\u9996\u5148\u8f93\u5165\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u7136\u540e\u90bb\u63a5\u8868\u5efa\u6811\uff1b\n\n\u7136\u540e\u4fbf\u662f\u6811\u94fe\u5256\u5206\u7684\u91cd\u70b9\uff0cdfs\u5206\u91cd\u94fe\u8f7b\u94fe\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid dfs(int u,int ff,int deep)\n{\n\tdep[u]=deep;fa[u]=ff;\n\tsize[u]=1;int maxson=-1;\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==ff) continue;\n\t\tdfs(v,u,deep+1);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>maxson){\n\t\t\tmaxson=size[v];son[u]=v;\n\t\t}\n\t}\n}\nvoid DFS(int u,int topf)\n{\n\tid[u]=++num;top[u]=topf;\n\tif(son[u]) DFS(son[u],topf);\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa[u]||v==son[u]) continue;\n\t\tDFS(v,v);\n\t}\n}\n```\n\u7136\u540e\u5efa\u6811\uff0c\u6811\u5efa\u597d\u540e\u4fee\u6539\u548c\u56de\u7b54\u95ee\u9898\u5373\u53ef\uff1b\n\u5bf9\u4e86\u7ebf\u6bb5\u6811\u7684\u6570\u7ec4\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u4e584\uff0c\u5343\u4e07\u4e0d\u8981\u8d70\u4e0a\u6211\u8fd9\u540d\u849f\u84bb\u7684\u8001\u8def\uff1b\u8bdd\u4e0d\u591a\u8bf4\u4e86\uff0c\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int N=1e6+1e4;\nint n,m,fa[N],dep[N],son[N],size[N];\nstruct edge{\n\tint v,nxt;\n}e[N<<1];\nint head[N],cnt,num,id[N],top[N];\nll dat[N],add[N];\nvoid fk(int u,int v){\n\te[++cnt]=(edge){v,head[u]};head[u]=cnt;\n}\nvoid dfs(int u,int ff,int deep)\n{\n\tdep[u]=deep;fa[u]=ff;\n\tsize[u]=1;int maxson=-1;\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==ff) continue;\n\t\tdfs(v,u,deep+1);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>maxson){\n\t\t\tmaxson=size[v];son[u]=v;\n\t\t}\n\t}\n}\nvoid DFS(int u,int topf)\n{\n\tid[u]=++num;top[u]=topf;\n\tif(son[u]) DFS(son[u],topf);\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa[u]||v==son[u]) continue;\n\t\tDFS(v,v);\n\t}\n}\nvoid build(int q,int l,int r)\n{\n\tif(l==r){\n\t\tdat[q]=0;return;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(q*2,l,mid);\n\tbuild(q*2+1,mid+1,r);\n}\nvoid spread(int q,int l,int r)\n{\n\tint mid=(l+r)>>1;\n\tdat[q*2]+=add[q]*(mid-l+1);\n\tdat[q*2+1]+=add[q]*(r-mid);\n\tadd[q*2]+=add[q];\n\tadd[q*2+1]+=add[q];\n\tadd[q]=0;\n\treturn;\n}\nvoid change(int q,int l,int r,int ql,int qr,int k)\n{\n\tif(l>=ql&&r<=qr){\n\t\tdat[q]+=(ll)k*(r-l+1);\n\t\tadd[q]+=k;return;\n\t}\n\tint mid=(l+r)>>1;\n\tspread(q,l,r);\n\tif(mid>=ql) change(q*2,l,mid,ql,qr,k);\n\tif(mid<qr) change(q*2+1,mid+1,r,ql,qr,k);\n\tdat[q]=dat[q*2]+dat[q*2+1];\n}\nll query(int q,int l,int r,int ql,int qr)\n{\n\tll ans=0;\n\tif(l>=ql&&r<=qr) return dat[q];\n\tint mid=(l+r)>>1;\n\tspread(q,l,r);\n\tif(mid>=ql) ans+=query(q*2,l,mid,ql,qr);\n\tif(mid<qr) ans+=query(q*2+1,mid+1,r,ql,qr);\n\treturn ans;\n}\nvoid qchange(int x,int y,int z)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tchange(1,1,num,id[top[x]],id[x],z);\n\t\tx=fa[top[x]];\n\t}\n\tif(id[x]>id[y]) swap(x,y);\n\tchange(1,1,num,id[x],id[y],z);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tfk(u,v);fk(v,u);\n\t}\n\tdfs(0,-1,1);DFS(0,0);build(1,1,n);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tchar c;\n\t\tscanf(\"%s\",&c);\n\t\tif(c=='A')\n\t\t{\n\t\t\tint x,y,z;\n\t\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\t\tqchange(x,y,z);\n\t\t}\n\t\tif(c=='Q')\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tprintf(\"%lld\\n\",query(1,1,n,id[x],id[x]+size[x]-1));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\u5982\u679c\u5bf9\u6811\u5256\u611f\u5174\u8da3\u7684dalao\u53ef\u4ee5\u518d\u53bb\u7ec3\u7ec3 \nP3384\n\u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206\n\nP2590\n[ZJOI2008]\u6811\u7684\u7edf\u8ba1\n\u8fd9\u4e24\u9053\u9898\u76ee\uff0c\u5982\u679c\u6211\u7684\u4ee3\u7801\u6709\u4efb\u4f55\u95ee\u9898\u7684\u8bdd\uff0c\u6b22\u8fce\u8e29\u6211\uff1b\n",
        "postTime": 1567166813,
        "uid": 203867,
        "name": "\u82cf\u5e55\u5bd2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "## \u524d\u7f6e\u77e5\u8bc6\uff1a[\u6811\u94fe\u5256\u5206](https://www.luogu.org/problemnew/show/P3384)\n## \u9898\u76ee\u89e3\u6790\n\n\u6b64\u9898\u5c31\u662f\u6811\u94fe\u5256\u5206\u7684\u4e00\u4e2a\u6a21\u677f\u9898\u3002\n\u5305\u62ec\u4e86\u8def\u5f84\u4fee\u6539\u4e0e\u5b50\u6811\u67e5\u8be2\u3002\n\n\u5176\u5b9e\u5b50\u6811\u7684\u67e5\u8be2\u5c31\u662f\u4eceid[i]\u5f00\u59cb\u5230id[i]+si[i]-1\u7684\u548c\uff0c\u5176\u4e2did\u8868\u793adfs\u5e8f\uff0csi\u8868\u793a\u5b50\u6811\u5927\u5c0f\u3002\n\n\u7ebf\u6bb5\u6811\u5199\u6cd5\u5219\u662f\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u6c42\u548c\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define N 100001\n#define ll long long\nusing namespace std;\n\nstruct node{\n    ll to, ne;\n}e[N];\n\nll n, m, cnt;\nll he[N], si[N], son[N], fa[N], up[N], id[N], rk[N], de[N], tree[N << 2], tag[N << 2];\nchar s[10];\n\nvoid add(ll x, ll y)\n{\n    e[++cnt] = {y, he[x]};\n    he[x] = cnt;//\u90bb\u63a5\u8868\u50a8\u5b58\n}\n\nvoid dfs1(ll x)\n{\n    si[x] = 1;//\u5b50\u6811\u5927\u5c0f\n    for(ll i = he[x]; i; i = e[i].ne)\n    {\n        ll y = e[i].to;\n        fa[y] = x, de[y] = de[x] + 1;//\u6df1\u5ea6\u4e0e\u7236\u8282\u70b9\n        dfs1(y);\n        si[x] += si[y];\n        if(si[y] > si[son[x]]) son[x] = y;//\u91cd\u513f\u5b50\n    }\n}\n\nvoid dfs2(ll x, ll f)\n{\n    id[x] = ++cnt, rk[cnt] = x, up[x] = f;//dfs\u5e8f\u3001id[cnt]\u6240\u5bf9\u5e94\u7684cnt\u3001\u4e00\u6761\u91cd\u94fe\u4e0a\u6700\u4e0a\u9762\u7684\u70b9\n    if(!son[x]) return;\n    dfs2(son[x], f);\n    for(ll i = he[x]; i; i = e[i].ne)\n    {\n        ll y = e[i].to;\n        if(y == son[x]) continue;\n        dfs2(y, y);\n    }\n}\n\nvoid pushup(ll rt)//\u4e0a\u4f20\u6807\u8bb0\n{\n    tree[rt] = tree[rt << 1] + tree[rt << 1 | 1];\n}\n\nvoid se(ll rt, ll l, ll r, ll tmp)\n{\n    tree[rt] += (r - l + 1) * tmp;\n    tag[rt] += tmp;\n}\n\nvoid pushdown(ll rt, ll l, ll r)//\u4e0b\u4f20\u6807\u8bb0\n{\n    ll mid = (l + r) >> 1;\n    se(rt << 1, l, mid, tag[rt]);\n    se(rt << 1 | 1, mid + 1, r, tag[rt]);\n    tag[rt] = 0;\n}\n\nvoid change(ll rt, ll l, ll r, ll x, ll y, ll z)\n{\n    if(x <= l && r <= y)\n    {\n        tree[rt] += (r - l + 1) * z;\n        tag[rt] += z;\n        return;\n    }\n    pushdown(rt, l, r);\n    ll mid = (l + r) >> 1;\n    if(x <= mid) change(rt << 1, l, mid, x, y, z);//\u5de6\u533a\u95f4\n    if(y > mid) change(rt << 1 | 1, mid + 1, r, x, y, z);//\u53f3\u533a\u95f4\n    pushup(rt);\n}\n\nll query(ll rt, ll l, ll r, ll x, ll y)\n{\n    if(x <= l && r <= y) return tree[rt];\n    pushdown(rt, l, r);\n    ll mid = (l + r) >> 1, res = 0;\n    if(x <= mid) res += query(rt << 1, l, mid, x, y);//\u5de6\u533a\u95f4\n    if(y > mid) res += query(rt << 1 | 1, mid + 1, r, x, y);//\u53f3\u533a\u95f4\n    return res;\n}\n\nvoid qchange(ll x, ll y, ll z)//\u67e5\u8be2\n{\n    while(up[x] != up[y])\n    {\n        if(de[up[x]] < de[up[y]]) swap(x, y);//\u627e\u8df3\u7684\u6df1\u7684\n        change(1, 1, n, id[up[x]], id[x], z);//\u533a\u95f4\u4fee\u6539\n        x = fa[up[x]];\n    }\n    if(id[x] > id[y]) swap(x, y);\n    change(1, 1, n, id[x], id[y], z);\n}\n\nint main()\n{\n    scanf(\"%lld\", &n);\n    for(ll i = 1; i < n; i++)\n    {\n        ll x, y;\n        scanf(\"%lld%lld\", &x, &y), x++, y++;\n        add(x, y);\n    }\n    dfs1(1), cnt = 0;\n    dfs2(1, 1);\n    scanf(\"%lld\", &m);\n    for(int i = 1; i <= m; i++)\n    {\n        ll x, y, z;\n        scanf(\"%s%lld\", s, &x), x++;\n        if(s[0] == 'A')\n        {\n            scanf(\"%lld%lld\", &y, &z), y++;\n            qchange(x, y, z);//\u8def\u5f84\u4fee\u6539\n        }\n        else printf(\"%lld\\n\", query(1, 1, n, id[x], id[x] + si[x] - 1));//\u5b50\u6811\u67e5\u8be2\n    }\n    return 0;\n}\n```\n",
        "postTime": 1559115310,
        "uid": 98468,
        "name": "abs001",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206\u3002\u7ef4\u62a4\u5b50\u6811\u548c\u3001\u64cd\u4f5c\u533a\u95f4\u52a0\uff0c\u65e0\u8111\u4e0a\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n$\\text{P.S.}$ \u4f20\u6807\u8bb0\u7ed9 $sum$ \u7684\u65f6\u5019\u8bb0\u5f97\u628a $tag$ \u4e58\u4e0a $(len-(len>>1))$ \u548c $(len>>1)$\uff0c\u4ee5\u53ca\u4fee\u6539\u7684\u65f6\u5019\u4e5f\u8981\u4e58\u4e0a\u533a\u95f4\u957f\u5ea6\uff0c\u800c $tag$ \u4e0d\u7528\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define MAXN 100005\nusing namespace std;\nint cnt,fst[MAXN],nxt[MAXN<<1],to[MAXN<<1];\nint n,Q;\nint siz[MAXN],son[MAXN],dfn[MAXN],Index,top[MAXN],dep[MAXN],faz[MAXN];\nll t[MAXN<<2],tag[MAXN<<2];\nvoid AddEdge(int u,int v)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=fst[u];\n\tfst[u]=cnt;\n}\nvoid Dfs1(int u)\n{\n\tsiz[u]=1;\n\tson[u]=0;\n\tfor(int i=fst[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==faz[u]) continue;\n\t\tdep[v]=dep[u]+1;\n\t\tfaz[v]=u;\n\t\tDfs1(v);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[son[u]]<siz[v]) son[u]=v;\n\t}\n}\nvoid Dfs2(int u,int rt)\n{\n\tdfn[u]=++Index;\n\ttop[u]=rt;\n\tif(son[u]) Dfs2(son[u],rt);\n\tfor(int i=fst[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==faz[u] || v==son[u]) continue;\n\t\tDfs2(v,v);\n\t}\n}\nvoid PushUp(int rt)\n{\n\tt[rt]=t[rt<<1]+t[rt<<1|1];\n}\nvoid PushDown(int rt,int len)\n{\n\tt[rt<<1]+=tag[rt]*1ll*(len-(len>>1));\n\tt[rt<<1|1]+=tag[rt]*1ll*(len>>1);\n\ttag[rt<<1]+=tag[rt];\n\ttag[rt<<1|1]+=tag[rt];\n\ttag[rt]=0;\n}\nvoid BuildSegmentTree(int rt,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tt[rt]=0;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tBuildSegmentTree(rt<<1,l,mid);\n\tBuildSegmentTree(rt<<1|1,mid+1,r);\n\tPushUp(rt);\n}\nvoid Modify(int rt,int l,int r,int tl,int tr,ll val)\n{\n\tif(tl<=l && r<=tr)\n\t{\n\t\tt[rt]+=val*(r-l+1);\n\t\ttag[rt]+=val;\n\t\treturn;\n\t}\n\tPushDown(rt,r-l+1);\n\tint mid=l+r>>1;\n\tif(tl<=mid) Modify(rt<<1,l,mid,tl,tr,val);\n\tif(tr>mid) Modify(rt<<1|1,mid+1,r,tl,tr,val);\n\tPushUp(rt);\n}\nll Query(int rt,int l,int r,int tl,int tr)\n{\n\tif(tl<=l && r<=tr) return t[rt];\n\tPushDown(rt,r-l+1);\n\tint mid=l+r>>1;\n\tll res=0;\n\tif(tl<=mid) res+=Query(rt<<1,l,mid,tl,tr);\n\tif(tr>mid) res+=Query(rt<<1|1,mid+1,r,tl,tr);\n\treturn res;\n}\nvoid ModifyOnTree(int u,int v,ll val)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tModify(1,1,n,dfn[top[u]],dfn[u],val);\n\t\tu=faz[top[u]];\n\t}\n\tif(dep[u]>dep[v]) swap(u,v);\n\tModify(1,1,n,dfn[u],dfn[v],val);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tx++;\n\t\ty++;\n\t\tAddEdge(x,y);\n\t\tAddEdge(y,x);\n\t}\n\tDfs1(1);\n\tDfs2(1,1);\n\tBuildSegmentTree(1,1,n);\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tint x,y;\n\t\tll z;\n\t\tchar opt;\n\t\tcin>>opt;\n\t\tscanf(\"%d\",&x);\n\t\tx++;\n\t\tif(opt=='A')\n\t\t{\n\t\t\tscanf(\"%d %lld\",&y,&z);\n\t\t\ty++;\n\t\t\tModifyOnTree(x,y,z);\n\t\t}\n\t\telse printf(\"%lld\\n\",Query(1,1,n,dfn[x],dfn[x]+siz[x]-1));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1547037270,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "### \u9898\u76ee\u94fe\u63a5\n[SHOI2012 \u9b54\u6cd5\u6811](https://www.luogu.org/problemnew/show/P3833)  \n### \u9898\u76ee\u5927\u610f\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u6bcf\u6b21\u53ef\u4ee5\u67e5\u8be2\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u70b9\u6743\u548c\u6216\u8005\u5c06\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u548c\u5168\u90e8\u589e\u52a0$v$\n### \u9898\u76ee\u601d\u8def\n\u6811\uff0c\u5b50\u6811\uff0c\u8def\u5f84\uff0c\u6811\u5256\u89e3\u51b3\uff01  \n\u6811\u5256\u53ea\u8981\u6ce8\u610f\u4e0d\u624b\u6b8b\u5199\u9519\u5c31\u884c\u4e86~~\uff08\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u56e0\u4e3a\u8fd9\u4e2aT\u4e863\u53d1\uff09~~\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=100010,M=100010;\n\nint head[N],ver[M],nxt[M];\nint n,m,tot=0,num=0;\nint d[N],f[N],size[N],son[N],id[N],rk[N],top[N];\n\ninline void add_edge(int x,int y)\n{\n\tver[++tot]=y,nxt[tot]=head[x],head[x]=tot;\n}\n\nstruct SegmentTree{\n\tint l,r;\n\tll sum,add;\n\t#define l(x) tree[x].l\n\t#define r(x) tree[x].r\n\t#define sum(x) tree[x].sum\n\t#define add(x) tree[x].add\n} tree[N<<2];\ninline void pushup(int p)\n{\n\tsum(p)=sum(p<<1)+sum(p<<1|1);\n}\ninline void build(int p,int l,int r)\n{\n\tl(p)=l,r(p)=r,add(p)=sum(p)=0;\n\tif(l==r) return ;\n\tint mid=(l+r)>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n}\ninline void spread(int p)\n{\n\tif(add(p))\n\t{\n\t\tsum(p<<1)+=add(p)*(r(p<<1)-l(p<<1)+1);\n\t\tsum(p<<1|1)+=add(p)*(r(p<<1|1)-l(p<<1|1)+1);\n\t\tadd(p<<1)+=add(p);\n\t\tadd(p<<1|1)+=add(p);\n\t\tadd(p)=0;\n\t}\n}\ninline void update(int p,int l,int r,int v)\n{\n\tif(l<=l(p)&&r(p)<=r)\n\t{\n\t\tadd(p)+=v;\n\t\tsum(p)+=(ll)v*(r(p)-l(p)+1);\n\t\treturn ;\n\t}\n\tspread(p);\n\tint mid=(l(p)+r(p))>>1;\n\tif(l<=mid) update(p<<1,l,r,v);\n\tif(r>mid) update(p<<1|1,l,r,v);\n\tpushup(p);\n}\ninline ll query(int p,int l,int r)\n{\n\tif(l<=l(p)&&r(p)<=r) return sum(p);\n\tspread(p);\n\tint mid=(l(p)+r(p))>>1;\n\tll ans=0;\n\tif(l<=mid) ans+=query(p<<1,l,r);\n\tif(r>mid) ans+=query(p<<1|1,l,r);\n\treturn ans;\n}\n\ninline void dfs1(int x,int fa)\n{\n\tsize[x]=1;\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(y==fa) continue;\n\t\tf[y]=x;\n\t\td[y]=d[x]+1;\n\t\tdfs1(y,x);\n\t\tsize[x]+=size[y];\n\t\tif(size[y]>size[son[x]]) son[x]=y;\n\t}\n}\n\ninline void dfs2(int x,int t)\n{\n\ttop[x]=t;\n\tid[x]=++num;\n\trk[num]=x;\n\tif(!son[x]) return ;\n\tdfs2(son[x],t);\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(y==f[x]||y==son[x]) continue;\n\t\tdfs2(y,y);\n\t}\n}\ninline void upRange(int x,int y,int v)\n{\n\tint fx=top[x],fy=top[y];\n\twhile(fx!=fy)\n\t{\n\t\tif(d[fx]>d[fy])\n\t\t{\n\t\t\tupdate(1,id[fx],id[x],v);\n\t\t\tx=f[fx],fx=top[x];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate(1,id[fy],id[y],v);\n\t\t\ty=f[fy],fy=top[y];\n\t\t}\n\t}\n\tif(d[x]>d[y]) update(1,id[y],id[x],v);\n\telse update(1,id[x],id[y],v);\n}\ninline ll qSon(int x)\n{\n\treturn query(1,id[x],id[x]+size[x]-1);\n}\n\ninline int read()\n{\n\tint s=0;\n\tbool flag=false;\n\tchar ch=getchar();\n\tfor(;ch<'0'||ch>'9';ch=getchar()) if(ch=='-') flag=true;\n\tfor(;'0'<=ch&&ch<='9';ch=getchar()) s=(s<<3)+(s<<1)+(ch^48);\n\tif(flag) return -s;\n\treturn s;\n}\ninline void write(ll x)\n{\n\tif(!x)\n\t{\n\t\tputchar('0');\n\t\treturn ;\n\t}\n\tchar ch[20];\n\tint cnt=0;\n\twhile(x) ch[++cnt]=x%10+'0',x/=10;\n\tfor(int i=cnt;i;i--) putchar(ch[i]);\n}\ninline void writeln(ll x)\n{\n\twrite(x);\n\tputchar('\\n');\n}\n\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint a=read()+1,b=read()+1;\n\t\tadd_edge(a,b);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\tm=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tchar ch=getchar();\n\t\twhile(ch!='A'&&ch!='Q') ch=getchar();\n\t\tif(ch=='A')\n\t\t{\n\t\t\tint a=read()+1,b=read()+1,c=read();\n\t\t\tupRange(a,b,c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint a=read()+1;\n\t\t\twriteln(qSon(a));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1540954998,
        "uid": 54728,
        "name": "wangxuye",
        "ccfLevel": 0,
        "title": "[SHOI2012]\u9b54\u6cd5\u6811 \uff08\u987a\u4fbf\u7eaa\u5ff5\u4e00\u4e0bAC500\uff09"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206\u6a21\u677f\u3002\u3002\u3002\n\n\u8bdd\u8bf4\u7701\u9009\u7adf\u7136\u8003\u4e86\u6a21\u677f\uff0c\u60ca\u5947\u3002\u3002\u3002\n\n\u697c\u4e0a\u51e0\u4f4d\u5de8\u4f6c\u5df2\u7ecf\u89e3\u91ca\u4e86\u6811\u94fe\u5256\u5206\uff0c\u8fd9\u91cc\u7ed9\u51fa\u53e6\u4e00\u79cd\u6a21\u677f\uff0c\u5b8f\u5b9a\u4e49\u3002\n\n\u5b8f\u5b9a\u4e49 \u662f\u4e2a\u597d\u4e1c\u4e1c\uff0c\u80fd\u8ba9\u4f60\u7684\u7a0b\u5e8f\u66f4\u52a0\u6e05\u6670\uff0c\u65b9\u4fbf\u8c03\u8bd5\uff08\u5c24\u5176\u662f \u7ebf\u6bb5\u6811 \u8fd9\u79cd\u5bb9\u6613\u624b\u6ed1\u7684\u6570\u636e\u7ed3\u6784\u3002\u3002\u3002\uff09\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define LSON rt<<1//\u4ee5\u4e0b\u4e3a\u5b8f\u5b9a\u4e49\n#define RSON rt<<1|1\n#define DATA(x) b[x].data\n#define SIGN(x) b[x].c\n#define LSIDE(x) b[x].l\n#define RSIDE(x) b[x].r\n#define WIDTH(x) (RSIDE(x)-LSIDE(x)+1)//\u4ee5\u4e0a\u4e3a\u5b8f\u5b9a\u4e49\n#define MAXN 100010//\u6570\u7ec4\u5927\u5c0f\nusing namespace std;\nint n,m,c=1,d=1;\nint head[MAXN],deep[MAXN],son[MAXN],size[MAXN],fa[MAXN],id[MAXN],top[MAXN];//\u6811\u5256\u4e4b\u6570\u7ec4\nstruct node1{//\u524d\u5411\u661f\uff08\u56e0\u4e3a\u5efa\u5355\u5411\u8fb9\uff0c\u53ef\u4ee5\u53ea\u5f00\u4e00\u500d\uff09\n    int next,to;\n}a[MAXN<<1];\nstruct node2{//\u7ebf\u6bb5\u6811\uff0c\u8bb0\u5f97\u5f00 long long\n    long long data,c;\n    int l,r;\n}b[MAXN<<2];\ninline int read(){//\u8bfb\u4f18\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\ninline void add(int x,int y){//\u52a0\u8fb9\n    a[c].to=y;\n    a[c].next=head[x];\n    head[x]=c++;\n}\nvoid dfs1(int rt){//\u6811\u94fe\u5256\u5206\u4e24\u4e2a dfs\uff0c\u5e94\u8be5\u90fd\u4f1a\uff0c\u6ca1\u6709\u4ec0\u4e48\u5947\u5947\u602a\u602a\u7684\u5730\u65b9\n    son[rt]=0;size[rt]=1;\n    for(int i=head[rt];i;i=a[i].next){\n        int will=a[i].to;\n        if(!deep[will]){\n            deep[will]=deep[rt]+1;\n            fa[will]=rt;\n            dfs1(will);\n            size[rt]+=size[will];\n            if(size[son[rt]]<size[will])son[rt]=will;\n        }\n    }\n}\nvoid dfs2(int rt,int f){\n    id[rt]=d++;top[rt]=f;\n    if(son[rt])dfs2(son[rt],f);\n    for(int i=head[rt];i;i=a[i].next){\n        int will=a[i].to;\n        if(will!=fa[rt]&&will!=son[rt])\n        dfs2(will,will);\n    }\n}//\u4ee5\u4e0a\u4e3a\u6811\u5256\ninline void pushup(int rt){//\u4e0a\u4f20\n    DATA(rt)=DATA(LSON)+DATA(RSON);\n}\ninline void pushdown(int rt){//\u6807\u8bb0\u4e0b\u4f20\n    if(!SIGN(rt)||LSIDE(rt)==RSIDE(rt))return;\n    SIGN(LSON)+=SIGN(rt);\n    DATA(LSON)+=SIGN(rt)*WIDTH(LSON);\n    SIGN(RSON)+=SIGN(rt);\n    DATA(RSON)+=SIGN(rt)*WIDTH(RSON);\n    SIGN(rt)=0;//\u8bb0\u5f97\u6e050\n}\nvoid buildtree(int l,int r,int rt){//\u5efa\u6811\n    int mid;\n    LSIDE(rt)=l;\n    RSIDE(rt)=r;\n    if(l==r){\n        DATA(rt)=0;//\u521d\u503c\u4e3a0\n        return;\n    }\n    mid=l+r>>1;\n    buildtree(l,mid,LSON);\n    buildtree(mid+1,r,RSON);\n    pushup(rt);\n}\nvoid update(int l,int r,long long c,int rt){//\u4fee\u6539\n    int mid;\n    if(l<=LSIDE(rt)&&RSIDE(rt)<=r){\n        SIGN(rt)+=c;//\u6253\u4e0a\u6807\u8bb0\n        DATA(rt)+=c*WIDTH(rt);\n        return;\n    }\n    pushdown(rt);//\u4e0b\u4f20\n    mid=LSIDE(rt)+RSIDE(rt)>>1;//\u5206\u5de6\u53f3\n    if(l<=mid)update(l,r,c,LSON);\n    if(mid<r)update(l,r,c,RSON);\n    pushup(rt);//\u8bb0\u5f97\u4e0a\u4f20\n}\nlong long query(int l,int r,int rt){//\u6c42\u548c\n    int mid;\n    long long ans=0;\n    if(l<=LSIDE(rt)&&RSIDE(rt)<=r)\n    return DATA(rt);\n    pushdown(rt);//\u4e0b\u4f20\n    mid=LSIDE(rt)+RSIDE(rt)>>1;\n    if(l<=mid)ans+=query(l,r,LSON);\n    if(mid<r)ans+=query(l,r,RSON);\n    return ans;\n}//\u4ee5\u4e0a\u4e3a\u7ebf\u6bb5\u6811\nvoid work1(int x,int y,int k){//\u6c42 LCA+\u6c42\u548c\uff0c\u5e94\u8be5\u662f\u677f\u5b50\u4e86\n    while(top[x]!=top[y]){\n        if(deep[top[x]]<deep[top[y]])swap(x,y);\n        update(id[top[x]],id[x],k,1);\n        x=fa[top[x]];\n    }\n    if(deep[x]>deep[y])swap(x,y);\n    update(id[x],id[y],k,1);//\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u4e86\n    return;\n}\nvoid work(){//\u5de5\u4f5c\n    char ch[2];\n    int x,y,k;\n    m=read();\n    while(m--){\n        scanf(\"%s\",ch);x=read()+1;\n        if(ch[0]=='A'){//\u5206\u7c7b\n            y=read()+1;k=read();\n            work1(x,y,k);\n        }\n        if(ch[0]=='Q')printf(\"%lld\\n\",query(id[x],id[x]+size[x]-1,1));\n    }//\u67d0\u8282\u70b9\u5b50\u6811\u533a\u95f4\uff1a[ id[x] , id[x]+size[x]-1 ] , size[x]\u4e3a\u5b50\u6811\u5927\u5c0f\n}\nvoid init(){//\u8bfb\u5165+\u9884\u5904\u7406\n    int x,y;\n    n=read();\n    for(int i=1;i<n;i++){\n        x=read()+1;y=read()+1;//\u4e60\u60ef\u4e8e\u4e0b\u6807\u4ece1\u5f00\u59cb\n        add(x,y);\n    }\n    deep[1]=1;\n    dfs1(1);\n    dfs2(1,1);//\u6811\u5256\n    buildtree(1,n,1);//\u5efa\u7ebf\u6bb5\u6811\n}\nint main(){//\u4e3b\u51fd\u6570So easy!\n    init();\n    work();\n\treturn 0;\n}\n\n```",
        "postTime": 1519464161,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "\u6ca1\u6709\u9898\u89e3\uff0c\u6c34\u4e00\u6ce2\n\n\u8fd9\u9053\u9898\u5f88\u660e\u663e\u662f\u6811\u5256 23333\n\n\u4e0d\u4f1a\uff0c\u8bf7\u81ea\u884c\u767e\u5ea6  \uff08\u6811\u94fe\u5256\u5206\uff09\n\nfirst  \u5904\u7406\u51fa\u5404\u4e2a\u70b9\u7684\u91cd\u513f\u5b50\uff0c\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u6df1\u5ea6\uff0c\u4ee5\u8fd9\u4e2a\u70b9\u6cbf\u91cd\u94fe\u5411\u4e0a\u722c\u7684\u6700\u8001\u7956\u5148\u3002\u6700\u91cd\u8981\u7684\u662f\u5904\u7406dfs\u5e8f\n\n\u7136\u540e\n\u5bf9\u4e8eu\uff0cv\u4e4b\u95f4\u7684\u8def\u5f84   \u5982\u679c top[u]!=top[v]  \u5c31\u8ba9top\u7684\u6df1\u5ea6\u5927\u7684\u5f80\u4e0a\u722c\uff0c\u76f4\u5230top[u]==top[v]   ,\u5728\u722c\u7684\u9014\u4e2d\uff0c\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3010top[x],x\u3011\u7684\u503c\u5c31\u597d\u4e86\n\n\u603b\u4e4b\uff0c\u53ea\u8981\u7406\u89e3\u4e86\u6811\u5256\uff0c\u8fd9\u9053\u9898\u5c31\u8fce\u5203\u800c\u89e3\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n\n\n        \n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nstruct data\n{\n    int pre,to;\n}p[220010];\nint head[200100],tot;\nint n;\nint son[200100],siz[200100],father[200100];\nint deep[200100];\nint top[200100];  \nint in[200100],num;  //i\u5728dfs\u5e8f \u4e2d\u7684\u4f4d\u7f6e \nlong long s[400100];  //\u7ebf\u6bb5\u6811 \nlong long tag[400100];\nvoid add(int x,int y)\n{\n    p[++tot].pre=head[x];\n    p[tot].to=y;\n    head[x]=tot;\n}\nvoid dfs(int x)\n{\n    siz[x]++;\n    for(int i=head[x];i;i=p[i].pre)\n    {\n        int v=p[i].to;\n        deep[v]=deep[x]+1;\n        dfs(v);\n        siz[x]+=siz[v];\n        if(son[x]==0||siz[v]>siz[son[x]])  son[x]=v;\n    }\n}\nvoid dfs2(int x)   //\u627etop\u662f\u5173\u952e \n{\n    in[x]=++num;\n    if(son[x]>0)\n    top[son[x]]=top[x],dfs2(son[x]);\n    for(int i=head[x];i;i=p[i].pre)\n    {\n        int v=p[i].to;\n        if(v!=son[x])\n        {\n            top[v]=v;\n            dfs2(v);\n        }\n    }\n}\nvoid df(int rt,int l,int r)\n{\n    if(tag[rt])\n    {\n        int mid=(l+r)>>1;\n        long long t=tag[rt];\n        tag[rt]=0;\n        s[rt<<1]+=(mid-l+1)*t;\n        s[rt<<1|1]+=(r-mid)*t;\n        tag[rt<<1]+=t;\n        tag[rt<<1|1]+=t;\n    }\n}\nvoid addans(int rt,int l,int r,int x,int y,int z)\n{\n    if(l>=x&&y>=r)  tag[rt]+=z*1ll,s[rt]+=1ll*(r-l+1)*z;\n    else\n    {\n        int mid=(l+r)>>1;\n        df(rt,l,r);\n        if(x<=mid)  addans(rt<<1,l,mid,x,y,z);\n        if(y>mid)  addans(rt<<1|1,mid+1,r,x,y,z);\n        s[rt]=s[rt<<1]+s[rt<<1|1];\n    }\n}\nvoid hp(int x,int y,int z)\n{\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]>deep[top[y]])\n        {\n            addans(1,1,n,in[top[x]],in[x],z);\n            x=father[top[x]];\n        }\n        else\n        {\n            addans(1,1,n,in[top[y]],in[y],z);\n            y=father[top[y]];\n        }\n    }\n    if(deep[x]>deep[y])    //\u8fd9\u4e00\u6b65\u5fc5\u4e0d\u53ef\u5c11 \n    {\n        addans(1,1,n,in[y],in[x],z);\n    }\n    else\n    {\n        addans(1,1,n,in[x],in[y],z);\n    }\n}\nlong long Query(int x,int y,int l,int r,int rt)\n{\n    if(l>=x&&r<=y)  return s[rt];\n    else\n    {\n        int mid=(l+r)>>1;\n        df(rt,l,r);\n        long long ans=0;\n        if(x<=mid)  ans+=Query(x,y,l,mid,rt<<1);\n        if(y>mid)  ans+=Query(x,y,mid+1,r,rt<<1|1);\n        return ans;\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    int x,y,z;\n    for(int i=1;i<=n-1;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        father[y]=x;\n        add(x,y);\n    }\n    dfs(0);\n    top[0]=0;\n    dfs2(0);\n    int q;\n    scanf(\"%d\",&q);\n    char c;\n    for(int i=1;i<=q;i++)\n    {\n        cin>>c;\n        if(c=='A')  \n        {\n            scanf(\"%d%d%d\",&x,&y,&z);\n            hp(x,y,z);\n        }\n        else\n        {\n            scanf(\"%d\",&x);\n            printf(\"%lld\\n\",Query(in[x],in[x]+siz[x]-1,1,n,1));\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1508056208,
        "uid": 22236,
        "name": "\u65e5\u6708\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u7f16\u53f7\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u3002\uff08\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\uff09\n\n\u7136\u540e\u7136\u540e\u5c31\u662f\u6811\u5256\u6a21\u677f\u9898\u4e86\u3002\n\n\n\uff08\u4ee3\u7801\uff0c\u81ea\u5df1\u7801\u5427\uff01\uff09\n\n\uff08\u4e3a\u4ec0\u4e48\u8fd9\u9898\u8bc4\u5206\u8fd9\u4e48\u96be\u554a\uff1f\uff09\n",
        "postTime": 1509442790,
        "uid": 19863,
        "name": "1234KID",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3833 \u3010[SHOI2012]\u9b54\u6cd5\u6811\u3011"
    }
]