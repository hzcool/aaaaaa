[
    {
        "content": "\u4e00\u4e2a\u7740\u5b9e\u5f88\u6c34\u4f46\u662f\u7ec6\u8282\u9887\u591a\u7684Tarjan\u9898~~ \r\n\r\n\u6069\u6ca1\u9519\uff0c\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5176\u5b9e\u5e76\u4e0d\u662f\u5f88\u591a\uff0c\u4f46\u662f\u7531\u4e8e\u5176\u7ec6\u8282\u975e\u5e38\u591a\uff0c\u4e8e\u662f\u5bfc\u81f4\u8fd9\u9053\u9898\u7684AC\u7387\u6bd4\u8f83\u4f4e\u3002\u3002   \r\n\r\n\u6211\u4eec\u6765\u5206\u6790\u8fd9\u9053\u9898\u76ee\uff1a\u600e\u4e48\u8ddfTarjan\u626f\u4e0a\u4e86\u5173\u7cfb\u5462\uff1f\uff1f  \r\n\r\n\u9996\u5148\u6211\u4eec\u8003\u8651\u5efa\u56fe\uff1a\u5173\u4e8e\u8fd9\u4e09\u4e2a\u95e8\uff0c\u6211\u4eec\u6309\u7167\u6700\u5e73\u5e38\u7684\u601d\u8def\u5e94\u8be5\u662f\u5bf9\u4e8e\u4e09\u79cd\u95e8\u65e0\u4e00\u4f8b\u5916\u66b4\u529b\u524d\u5411\u661fadd()\u3002  \r\n\r\n\u4f46\u662f\u60f3\u50cf\u4e00\u4e0b\u5047\u5982\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u7ec4\u6570\u636e\u4f7f\u67d0\u4e00\u884c\u5168\u90e8\u90fd\u662f\u6a2a\u5929\u95e8\uff0c\u6216\u8005\u8bf4\u67d0\u4e00\u5217\u5168\u90e8\u90fd\u662f\u7eb5\u5bf0\u95e8\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u5efa\u56fe\u5c31\u4f1a\u8dd1\u5230\u5927\u6982$O(n^{2})$\u6216\u8005$O(n^{2})$\u7684\u901f\u5ea6\uff0c\u5efa\u56fe\u90fd\u6210$n^{2}$\u4e86\u8fd9\u8fd8\u505a\u5565\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4f18\u5316\u3002\r\n\r\n\u90a3\u4e48\u7531\u4e8e\u5404\u81ea\u7684\u95e8\u7684\u7279\u6b8a\u6027\uff0c\u6211\u80af\u5e94\u8be5\u5206\u5f00\u5efa\u56fe\uff0c\u4e5f\u5c31\u662f\u4e09\u79cd\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u884c\u7684\u6a2a\u5929\u95e8\uff0c\u6211\u4eec\u5c06\u5176\u5efa\u6210\u4e00\u4e2a\u73af\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5217\u7684\u7eb5\u5bf0\u95e8\uff0c\u6211\u4eec\u4e5f\u5c06\u5176\u5efa\u6210\u4e00\u4e2a\u73af\u3002\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\uff1a\u6bcf\u4e00\u884c\u7684\u6240\u6709\u6a2a\u5929\u95e8\u4e4b\u95f4\u80af\u5b9a\u90fd\u662f\u76f8\u4e92\u901a\u8fbe\uff0c\u800c\u6bcf\u4e00\u5217\u7684\u6240\u6709\u7eb5\u5bf0\u95e8\u4e4b\u95f4\u4e5f\u80af\u5b9a\u662f\u76f8\u4e92\u901a\u8fbe\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8bf4\uff1a\r\n\r\n\u5f53\u4f60\u5230\u8fbe\u4e86\u67d0\u4e00\u884c\u7684\u4e00\u4e2a\u6a2a\u5929\u95e8\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u5230\u8fbe\u4e86\u8fd9\u4e00\u884c\u6240\u6709\u7684\u6a2a\u5929\u95e8\uff0c\u5f53\u4f60\u5230\u8fbe\u4e86\u67d0\u4e00\u5217\u7684\u7eb5\u5bf0\u95e8\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u5230\u8fbe\u4e86\u8fd9\u4e00\u5217\u6240\u6709\u7684\u7eb5\u5bf0\u95e8\u3002\r\n\r\n\u4e8e\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5c06\u5176\u5efa\u6210\u4e00\u4e2a\u73af\u3002\u800cTarjan\u7684\u7528\u9014\u5c31\u6765\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528Tarjan\u5c06\u8fd9\u4e24\u79cd\u73af\u7f29\u6210\u70b9\u3002\u800c\u5bf9\u4e8e\u81ea\u7531\u95e8\u672c\u4eba\u5e76\u6ca1\u6709\u60f3\u5230\u6bd4\u66b4\u529b\u5efa\u8fb9\u66f4\u597d\u7684\u65b9\u6cd5\uff0c\u4e8e\u662f\u5c31\u66b4\u529b\u5efa\u8fb9\u5566~~~\u3002  \r\n\r\n\u800c\u5bf9\u4e8e\u8fd9\u4e2a\u5efa\u73af\u7684\u8fc7\u7a0b\u5176\u5b9e\u6211\u4eec\u4e5f\u662f\u53ef\u4ee5\u6709\u4e00\u5b9a\u7684\u4f18\u5316\u7684\uff0c\u6bd4\u5982sort\u3002\u5f53\u6211\u4eec\u8981\u5efa\u6a2a\u5929\u95e8\u7684\u65f6\u5019\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u60f3\u5feb\u70b9\u5faa\u73af\u5230\u5f53\u524d\u884c\u6240\u6709\u7684\u6a2a\u5929\u95e8\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u6709\u4e86\u8fd9\u4e48\u4e00\u4e2asort\u51fd\u6570\uff1a\r\n```\r\n//\u6211\u4eec\u8fd9\u4e2asort\u51fd\u6570\u7684\u610f\u601d\u5c31\u662f\u5c06\u540c\u4e00\u884c\u7684\u6240\u6709\u6a2a\u5929\u95e8\u653e\u5230\u524d\u9762\u3002 \r\nbool xf_cmp(st1 a,st1 b){\r\n    if(a.x!=b.x) return a.x<b.x;\r\n    //\u4e0d\u662f\u540c\u4e00\u884c\u6211\u4eec\u81ea\u7136\u4e0d\u7528\u7ba1 \r\n    if(a.opt==1) return 1;\r\n    //\u5982\u679c\u662f\u6a2a\u5929\u95e8\u5c31\u5148\u628a\u4ed6\u653e\u5728\u524d\u9762 \r\n    if(b.opt==1) return 0; \r\n    return a.y<b.y;\r\n}\r\n```\r\n\u7136\u540e\u5bf9\u4e8e\u7eb5\u5bf0\u95e8\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a\u9053\u7406\u3002\r\n```\r\nbool yf_cmp(st1 a,st1 b){\r\n    if(a.y!=b.y) return a.y<b.y;\r\n    if(a.opt==2) return 1;\r\n    //\u5982\u679c\u662f\u7eb5\u5bf0\u95e8\u5c31\u5148\u628a\u4ed6\u653e\u5728\u524d\u9762 \r\n    if(b.opt==2) return 0;\r\n    return a.x<b.x;\r\n}\r\n```\r\n\r\n\u63a5\u4e0b\u6765\u662f\u771f\u6b63\u7684\u5efa\u73af\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e00\u4e2afirst:\u8868\u793a\u6bcf\u4e00\u6b21\u5faa\u73af\u5230\u7684\u7b2c\u4e00\u4e2a\u6a2a\u95e8\u3002last:\u8868\u793a\u4e0a\u4e00\u6b21\u626b\u5230\u7684\u6a2a\u95e8\u3002\r\n```\r\n    sort(point+1,point+all+1,xf_cmp);\r\n    //\u6211\u4eec\u60f3\u5c3d\u91cf\u5feb\u7684\u5faa\u73af\u5230\u6240\u6709\u6a2a\u5929\u95e8\uff0c\u4e8e\u662f\u8fd9\u4e2asort\u5c31\u662f\u4e3a\u4e86\u5427\u6240\u6709\u7684\u6a2a\u5929\u95e8\u653e\u5728\u524d\u9762\r\n\tint first=1,last=1;\r\n    //\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u5faa\u73af\u5230\u7684\u7b2c\u4e00\u4e2a\u6a2a\u95e8\uff0c\u6211\u4eec\u8bb0\u4e3afirst\r\n    //\u89c4\u5b9alast\u53d8\u91cf\u662f\u4e0a\u4e00\u4e2a\u626b\u5230\u7684\u6a2a\u95e8\r\n    for(int i=1;i<=all;i++){ //\u6a2a\u5411\u5efa\u73af (\u6a2a\u5929\u95e8)\r\n        if(point[i].x!=point[i+1].x){//\u76f8\u90bb\u4e24\u4e2a\u8f93\u5165\u7684\u5750\u6807\u4e0d\u5728\u540c\u4e00\u884c\r\n            if(first!=last)\r\n            add(point[last].number,point[first].number);\r\n            //\u6211\u4eec\u8fde\u8fb9\u80af\u5b9a\u8981\u8fde\u521d\u59cb\u5e8f\u53f7\u7684\u5566\r\n            last=first=i+1;\r\n        }\r\n        else{//\u5728\u540c\u4e00\u884c\r\n            if(point[last].opt==1)\r\n            //\u5982\u679ci\u548ci+1\u5728\u540c\u4e00\u884c\u5e76\u4e14i\u662f\u6a2a\u5929\u95e8\u5c31\u628alast\u548ci+1\u8fde\u8d77\u6765\r\n            add(point[last].number,point[i+1].number);\r\n            if(point[i+1].opt==1)//\u5982\u679ci+1\u70b9\u662f\u6a2a\u5929\u95e8\r\n            last=i+1;//\u56e0\u4e3alast\u662f\u6307\u4e0a\u4e00\u4e2a\u626b\u5230\u7684\u6a2a\u5929\u95e8\uff0c\u800c\u4e14i+1\u662f\u6a2a\u5929\u95e8\uff0c\u6240\u4ee5\u5c31\u66f4\u65b0last\r\n            if(point[first].opt!=1)//\u5982\u679cfirst\u70b9\u4e0d\u662f\u6a2a\u5929\u95e8 \r\n            //first\u8981\u66f4\u65b0\uff0clast\u80af\u5b9a\u4e5f\u8981\u66f4\u65b0 \r\n            last=first=i+1;//\u90a3\u4e48\u66f4\u65b0last\u548cfirst \r\n        }\r\n    }\r\n```\r\n\r\n\u5176\u5b9e\u4ee5\u4e0a\u7684\u8fc7\u7a0b\u5c31\u662f\u5229\u7528\u4e86\u8fd9\u4e2afirst\u548clast\u7684\u4e0d\u65ad\u53d8\u6362\u7684\u8fc7\u7a0b\u8fdb\u884c\u5efa\u8fb9.....\u7136\u540e\u7eb5\u5bf0\u95e8\u4e5f\u662f\u4e00\u6837\u3002\r\n\r\n\u66b4\u529b\u5efa\u8fb9\u81ea\u4e0d\u5fc5\u8bf4\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u6709\u4e00\u4e2a\u5f88\u5934\u75bc\u7684\u95ee\u9898\uff0c\u5c31\u662f\u5b9d\u85cf\u516c\u5ba4\u7684\u8bb0\u5f55\u3002\u56e0\u4e3a\u8fd9\u91cc\u662f\u4e00\u4e2a\u6709x,y\u7684\u56fe\uff0c\u6240\u4ee5\u56fe\u7684\u8fde\u8fb9\u5305\u62ec\u5b9d\u85cf\u5bab\u5ba4\u7684\u8bb0\u5f55\u90fd\u6bd4\u8f83\u9ebb\u70e6\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5f15\u5165\u4e00\u4e2aSTL\u91cc\u9762\u7684pair\u5c31\u5f88\u597d\u89e3\u51b3\u4e86\u3002pair\u5c31\u662f\u5bf9\u7ec4\uff0c\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u5b9a\u4e49\u4e3a\u662f\u4e00\u4e2a\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f88\u6109\u5feb\u7684\u7528map\u4e86\u3002\r\n\r\n\u56e0\u4e3apair\u548cmap\u7684\u5f15\u7528\uff0c\u8fd9\u4e2atarjan\u7684\u5efa\u56fe\u5c31\u4f1a\u5f88\u6076\u5fc3\uff08~~\u56e0\u4e3aYeasion\u5e76\u4e0d\u559c\u6b22\u7528\u6307\u9488.....~~\uff09\u4f46\u5176\u5b9e\u5982\u679c\u660e\u767d\u4e86Tarjan\u7684\u539f\u7406\uff0c\u4e00\u5207\u90fd\u5e76\u4e0d\u96be\u4e86\u3002\r\n\r\n\u6211\u4eec\u9996\u5148\u626b\u63cfTarjan\u4e4b\u540e\u7684\u6574\u4e2a\u524d\u5411\u661f\uff0c\u8bb0\u5f55from\u548cto\u5728\u65e7\u56fe\u4e2d\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u70b9\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u53ef\u4ee5\u518d\u5b9a\u4e49\u4e00\u4e2amap\uff1amat\u8fdb\u884c\u8bb0\u5f55\uff0c\u7136\u540e\u6e05\u7a7a\u524d\u5411\u661f\u7684head\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2amap\u6307\u9488\u4ecemat\u7684\u5934\u6307\u5411\u5c3e\u7136\u540e\u6dfb\u52a0\u3002\u5f53\u7136\u8fd9\u4e2amat\u7684pair\u6307\u7684\u5c31\u662f\u539f\u6765\u7b26\u5408\u6761\u4ef6\u7684\u524d\u5411\u661f\u54af(belong[edge[i].from],belong[edge[i].to])\u3002\r\n```\r\nfor(int i=1;i<=total;i++){//for\u6574\u4e2a\u524d\u5411\u661f \r\n        int f=edge[i].from;\r\n        int t=edge[i].to;\r\n        if(belong[f]!=belong[t])//\u5982\u679c\u5728\u65b0\u56fe\u4e2d\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u70b9 \r\n        mat[pir(belong[f],belong[t])]=1;\r\n    }\r\n    memset(head,0,sizeof(head)); total=0;\r\n    //\u6e05\u7a7a\u524d\u5411\u661f\u7559\u4e0b\u5728\u65b0\u56fe\u63a5\u7740\u7528\u54af~~ \r\n    for(it=mat.begin();it!=mat.end();it++){\r\n        add(it->first.first,it->first.second); \r\n        //it->first.first\u8868\u793amat\u8fd9\u4e2amap\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684pair\u4e2d\u7684\u524d\u9762 \r\n        //it->first.second\u8868\u793amat\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684pair\u4e2d\u7684\u540e\u9762\u90a3\u4e2a\u5143\u7d20 \r\n        ind[it->first.second]++;\r\n    }\r\n```\r\n\u7136\u540e\u6211\u4eec\u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u7684\u56fe\uff0c\u7136\u540e\u6211\u4eec\u8981\u5728\u8fd9\u4e0a\u9762\u8dd1\u6700\u957f\u8def\uff08\u8fb9\u6743\u4e3a1\u561b\uff09\uff0c\u7136\u540e\u5927\u5bb6\u80af\u5b9a\u5c31\u90fd\u77e5\u9053\u600e\u4e48\u505a\u4e86...DP\u554a\uff0cDAG\u4e0a\u8dd1DP\u5c31\u662f\u4e86\uff01\r\n```\r\n for(int i=1;i<=cnt;i++){\r\n        if(ind[i]==0){//\u5165\u5ea6\u4e3a0 \u4ece\u5165\u5ea6\u4e3a0\u5f00\u59cb\u8dd1 \r\n        //\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ece\u5165\u5ea6\u4e0d\u4e3a0\u7684\u8282\u70b9\u5f00\u59cb\u8dd1\u7684ans\u4e00\u5b9a\u5c0f\u4e8e\u4ece\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\u5f00\u59cb\u8dd1\u7684ans \r\n            dfs(i,0);//\u5165\u5ea6\u4e3a0\u5f53\u7136\u6ca1\u6709\u524d\u524d\u9a71\u8282\u70b9\u54af \r\n            ans=max(ans,dp[i]);//\u53d6max \r\n        }\r\n    }\r\nvoid dfs(int now,int fa){//\u52a8\u89c4 \r\n//now\u662f\u5f53\u524d\u8282\u70b9\uff0cfa\u662f\u4ece\u54ea\u91cc\u6765\u7684\u8282\u70b9\u3002\u53ef\u4ee5\u7406\u89e3\u4e3a\u6811\u4e0a\u7684\u7236\u4eb2\u8282\u70b9\u3002 \r\n    if(dp[now]>sum[now])return ;\r\n    dp[now]=sum[now];\r\n    for(int i=head[now];i;i=edge[i].next){\r\n        if(edge[i].to==fa) continue;\r\n        dfs(edge[i].to,now);\r\n        dp[now]=max(dp[now],dp[edge[i].to]+sum[now]);\r\n        //\u8981\u77e5\u9053\uff0c\u5728\u65b0\u56fe\u4e2d\u8dd1\u8fc7\u4e86i\u8282\u70b9\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u5c31\u56fe\u4e2d\u8dd1\u4e86sum[i]\u4e2a\u5b9d\u85cf\u5ba4\r\n    }\r\n}\r\n```\r\n\u6069\u6ca1\u9519\u5c31\u662f\u8fd9\u6837\uff0c\u90a3\u4e48\u6211\u4eec\u6574\u4e2a\u9898\u5c31\u8dd1\u5b8c\u4e86\uff0c\u6700\u540e\u6211\u4eec\u8f93\u51faans\u5c31\u53ef\u4ee5\u4e86\u3002\r\n```\r\n#include<iostream>\r\n#include<cstring>\r\n#include<cstdio>\r\n#include<algorithm>\r\n#include<utility>\r\n#include<map>\r\n#define MAXN 100010\r\n#define pir pair<int,int> \r\nusing namespace std;\r\nint all,n,m,ind[MAXN];\r\nmap<pir,bool>mat;//\u5c31\u662f\u8bb0\u5f55\u65b0\u56fe\u7684\u8fde\u8fb9\u3002\u54ea\u4e9b\u8fb9\u53ef\u4ee5\u8fde\uff08\u57fa\u4e8e\u65b0\u56fe\u3002\r\nmap<pir, int>tre;//\u7528\u6765\u8bb0\u5f55\u67d0\u4e00\u4e2a\u6709\u5b9d\u85cf\u7684\u5750\u6807\u4f4d\u7f6e\u7684\u5e8f\u53f7\r\nmap<pir,bool>::iterator it;//::iterator\u662fSTL\u91cc,\u4ee3\u8868\u6307\u9488\r\nint dx[9]={0,-1,-1,-1,0,0,1,1,1};\r\nint dy[9]={0,-1,0,1,-1,1,-1,0,1};\r\nstruct st1{\r\n    int x;//\u6a2a\u5750\u6807 \r\n    int y;//\u7eb5\u5750\u6807 \r\n    int opt;//\u95e8\u7684\u7c7b\u578b \r\n    int number;//\u56e0\u4e3a\u8981sort\u6240\u4ee5\u80af\u5b9a\u8981\u8bb0\u5f55\u521d\u59cb\u5e8f\u53f7\u5566 \r\n}point[MAXN];\r\nstruct st2{//\u524d\u5411\u661f\u7528 \r\n    int from;\r\n    int to;\r\n    int next;\r\n}edge[MAXN*100];\r\nint total,head[MAXN];\r\nvoid add(int f,int t){//\u524d\u5411\u661f \r\n    total++;\r\n    edge[total].from=f;\r\n    edge[total].to=t;\r\n    edge[total].next=head[f];\r\n    head[f]=total;\r\n}\r\nbool xf_cmp(st1 a,st1 b){\r\n    if(a.x!=b.x) return a.x<b.x;\r\n    if(a.opt==1) return 1;\r\n    //\u5982\u679c\u662f\u6a2a\u5929\u95e8\u5c31\u5148\u628a\u4ed6\u653e\u5728\u524d\u9762 \r\n    if(b.opt==1) return 0; \r\n    return a.y<b.y;\r\n}\r\nbool yf_cmp(st1 a,st1 b){\r\n    if(a.y!=b.y) return a.y<b.y;\r\n    if(a.opt==2) return 1;\r\n    //\u5982\u679c\u662f\u7eb5\u5bf0\u95e8\u5c31\u5148\u628a\u4ed6\u653e\u5728\u524d\u9762 \r\n    if(b.opt==2) return 0;\r\n    return a.x<b.x;\r\n}\r\ninline int read()\r\n{  \r\n   int s=0,w=1;  \r\n   char ch=getchar();  \r\n   while(ch<='0'||ch>'9')\r\n   {\r\n        if(ch=='-')\r\n            w=-1;\r\n        ch=getchar();\r\n    }  \r\n   while(ch>='0'&&ch<='9')\r\n   s=s*10+ch-'0',ch=getchar();  \r\n   return s*w;  \r\n} \r\nint Yeasion[MAXN];//Yeasion[i]\u8868\u793ai\u7684dfs\u5e8f \r\nint Nein[MAXN];//Nein[i]\u8868\u793ai\u8282\u70b9\u6240\u80fd\u56de\u5230\u7684\u6700\u65e9\u7684\u8282\u70b9\u7684\u7f16\u53f7 \r\nint ken,top,stack[MAXN];\r\nbool insta[MAXN];//flag[i]\u8868\u793ai\u662f\u4e0d\u662f\u88ab\u8bbf\u95ee\u8fc7\uff0cinsta[i]\u8868\u793a\u5728\u4e0d\u5728\u6808\u4e2d\u3002 \r\nint belong[MAXN],cnt;\r\nint sum[MAXN];\r\nvoid Tarjan(int now){//\u57fa\u672c\u7684Tarjan \r\n    Yeasion[now]=Nein[now]=++ken;\r\n    stack[++top]=now; insta[now]=1;\r\n    for(int i=head[now];i;i=edge[i].next){\r\n        if(!Yeasion[edge[i].to]){\r\n            Tarjan(edge[i].to);\r\n            Nein[now]=min(Nein[now],Nein[edge[i].to]);\r\n        }\r\n        else if(!belong[edge[i].to])\r\n        Nein[now]=min(Nein[now],Yeasion[edge[i].to]);\r\n    }\r\n    if(Yeasion[now]==Nein[now]){\r\n        cnt++; int pass;\r\n        do{\r\n            pass=stack[top--];\r\n            belong[pass]=cnt;\r\n            sum[cnt]++; //\u8bb0\u5f55cnt\u542b\u539f\u56fe\u4e2d\u70b9\u7684\u4e2a\u6570 \r\n            insta[pass]=0;\r\n        }while(pass!=now);\r\n    }\r\n}\r\nint ans,dp[MAXN];       \r\nvoid dfs(int now,int fa){//\u52a8\u89c4 \r\n//now\u662f\u5f53\u524d\u8282\u70b9\uff0cfa\u662f\u4ece\u54ea\u91cc\u6765\u7684\u8282\u70b9\u3002\u53ef\u4ee5\u7406\u89e3\u4e3a\u6811\u4e0a\u7684\u7236\u4eb2\u8282\u70b9\u3002 \r\n    if(dp[now]>sum[now])return ;\r\n    dp[now]=sum[now];\r\n    for(int i=head[now];i;i=edge[i].next){\r\n        if(edge[i].to==fa) continue;\r\n        dfs(edge[i].to,now);\r\n        dp[now]=max(dp[now],dp[edge[i].to]+sum[now]);\r\n        //\u8981\u77e5\u9053\uff0c\u5728\u65b0\u56fe\u4e2d\u8dd1\u8fc7\u4e86i\u8282\u70b9\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u5c31\u56fe\u4e2d\u8dd1\u4e86sum[i]\u4e2a\u5b9d\u85cf\u5ba4\r\n    }\r\n}\r\nint main(){\r\n    all=read(); n=read(); m=read();\r\n    for(int i=1;i<=all;i++){\r\n        point[i].x=read();\r\n        point[i].y=read();\r\n        point[i].opt=read();\r\n        point[i].number=i;\r\n        tre[pir(point[i].x,point[i].y)]=i;\r\n        //\u8bb0\u5f55\u5750\u6807\u4e3a(point[x],point[y])\u7684\u70b9\u7684\u5e8f\u53f7\u4e3ai\r\n    }\r\n    sort(point+1,point+all+1,xf_cmp);\r\n    //\u6211\u4eec\u60f3\u5c3d\u91cf\u5feb\u7684\u5faa\u73af\u5230\u6240\u6709\u6a2a\u5929\u95e8\uff0c\u4e8e\u662f\u8fd9\u4e2asort\u5c31\u662f\u4e3a\u4e86\u5427\u6240\u6709\u7684\u6a2a\u5929\u95e8\u653e\u5728\u524d\u9762\r\n    int first=1,last=1;\r\n    //\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u5faa\u73af\u5230\u7684\u7b2c\u4e00\u4e2a\u6a2a\u95e8\uff0c\u6211\u4eec\u8bb0\u4e3afirst\r\n    //\u89c4\u5b9alast\u53d8\u91cf\u662f\u4e0a\u4e00\u4e2a\u626b\u5230\u7684\u6a2a\u95e8\r\n    for(int i=1;i<=all;i++){ //\u6a2a\u5411\u5efa\u73af (\u6a2a\u5929\u95e8)\r\n        if(point[i].x!=point[i+1].x){//\u76f8\u90bb\u4e24\u4e2a\u8f93\u5165\u7684\u5750\u6807\u4e0d\u5728\u540c\u4e00\u884c\r\n            if(first!=last)\r\n            add(point[last].number,point[first].number);\r\n            //\u6211\u4eec\u8fde\u8fb9\u80af\u5b9a\u8981\u8fde\u521d\u59cb\u5e8f\u53f7\u7684\u5566\r\n            last=first=i+1;\r\n        }\r\n        else{//\u5728\u540c\u4e00\u884c\r\n            if(point[last].opt==1)\r\n            //\u5982\u679ci\u548ci+1\u5728\u540c\u4e00\u884c\u5e76\u4e14i\u662f\u6a2a\u5929\u95e8\u5c31\u628alast\u548ci+1\u8fde\u8d77\u6765\r\n            add(point[last].number,point[i+1].number);\r\n            if(point[i+1].opt==1)//\u5982\u679ci+1\u70b9\u662f\u6a2a\u5929\u95e8\r\n            last=i+1;//\u56e0\u4e3alast\u662f\u6307\u4e0a\u4e00\u4e2a\u626b\u5230\u7684\u6a2a\u5929\u95e8\uff0c\u800c\u4e14i+1\u662f\u6a2a\u5929\u95e8\uff0c\u6240\u4ee5\u5c31\u66f4\u65b0last\r\n            if(point[first].opt!=1)//\u5982\u679cfirst\u70b9\u4e0d\u662f\u6a2a\u5929\u95e8 \r\n            //first\u8981\u66f4\u65b0\uff0clast\u80af\u5b9a\u4e5f\u8981\u66f4\u65b0 \r\n            last=first=i+1;//\u90a3\u4e48\u66f4\u65b0last\u548cfirst \r\n        }\r\n    }\r\n    sort(point+1,point+all+1,yf_cmp);\r\n    first=1,last=1;//\u522b\u5fd8\u4e86\u91cd\u7f6efirst\u548clast \r\n    //\u540c\u7406\uff0c\u6211\u4eec\u8981\u60f3\u5c3d\u5feb\u7684\u5faa\u73af\u5b8c\u6240\u6709\u7684\u7eb5\u5bf0\u95e8\uff0c\u90a3\u4e48sort\u5427\u6240\u6709\u7684\u7eb5\u5bf0\u95e8\u6392\u5728\u524d\u9762\r\n    //\u7136\u540e\u5faa\u73af\u7ed3\u6784\u57fa\u672c\u548c\u4e0a\u9762\u662f\u5b8c\u5168\u4e00\u6837\u7684qwq \r\n    for(int i=1;i<=all;i++){  //\u7eb5\u5411\u5efa\u73af (\u7eb5\u5bf0\u95e8) \r\n        if(point[i].y!=point[i+1].y){\r\n        //\u7eb5\u5bf0\u95e8\u53ef\u4e0d\u8981\u6253\u6210point[i].x\uff01\uff01\u7167\u642c\u4e0a\u6587\u662f\u4e0d\u884c\u6ef4 \r\n            if(first!=last)\r\n            add(point[last].number,point[first].number);\r\n            last=i+1; first=i+1;\r\n            //\u5c06last\u548cfirst\u90fd\u66f4\u65b0\u4e3ai+1\u3002 \r\n        }\r\n        else{\r\n            if(point[last].opt==2)\r\n            add(point[last].number,point[i+1].number);\r\n            if(point[i+1].opt==2)\r\n            last=i+1;\r\n            if(point[first].opt!=2)\r\n            last=first=i+1;\r\n        }\r\n    } \r\n \tfor(int i=1;i<=all;i++)\r\n     if(point[i].opt==3){\r\n     \tfor(int j=1;j<=8;j++)\r\n     \tif(tre.count(pir(point[i].x+dx[j],point[i].y+dy[j])))\r\n     \tadd(point[i].number,tre[pir(point[i].x+dx[j],point[i].y+dy[j])]);\r\n     }    \r\n    for(int i=1;i<=all;i++)\r\n    //\u56e0\u4e3a\u4e00\u884c\u4e0a\u7684\u6a2a\u5929\u95e8\u548c\u4e00\u5217\u4e0a\u7684\u7eb5\u5bf0\u95e8\u6211\u4eec\u90fd\u5df2\u7ecf\u8fde\u6210\u4e86\u4e00\u4e2a\u73af\u3002\r\n    //\u6240\u4ee5\u80af\u5b9a\u662f\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528Tarjan\u8fdb\u884c\u7f29\u70b9 \r\n    if(!Yeasion[i]) Tarjan(i);\r\n    //\u56e0\u4e3a\u4e00\u6b21tarjan\u4e0d\u4e00\u5b9a\u80fd\u591f\u904d\u5386\u5b8c\u6240\u6709\u7684\u70b9 \u6240\u4ee5\u653e\u5728for\u91cc\u9762\r\n    //\u56e0\u4e3atarjan\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u6240\u4ee5\u4e0b\u9762\u6211\u4eec\u7528\u5230\u65b0\u56fe\u7684\u8282\u70b9\u90fd\u5e94\u8be5\u5728belong[]\u91cc\u9762\u3002 \r\n    for(int i=1;i<=total;i++){//for\u6574\u4e2a\u524d\u5411\u661f \r\n        int f=edge[i].from;\r\n        int t=edge[i].to;\r\n        if(belong[f]!=belong[t])//\u5982\u679c\u5728\u65b0\u56fe\u4e2d\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u70b9 \r\n        mat[pir(belong[f],belong[t])]=1;\r\n    }\r\n    memset(head,0,sizeof(head)); total=0;\r\n    //\u6e05\u7a7a\u524d\u5411\u661f\u7559\u4e0b\u5728\u65b0\u56fe\u63a5\u7740\u7528\u54af~~ \r\n    for(it=mat.begin();it!=mat.end();it++){\r\n        add(it->first.first,it->first.second); \r\n        //it->first.first\u8868\u793amat\u8fd9\u4e2amap\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684pair\u4e2d\u7684\u524d\u9762 \r\n        //it->first.second\u8868\u793amat\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684pair\u4e2d\u7684\u540e\u9762\u90a3\u4e2a\u5143\u7d20 \r\n        ind[it->first.second]++;\r\n    }\r\n    //\u4e0a\u9762\u7684\u64cd\u4f5c\u7b80\u800c\u8a00\u4e4b\u5c31\u662f\uff1a\u65e7\u56fe\u4e2d\u7684edge\u5982\u679c\u5728\u65b0\u56fe\u4e2d\u4f9d\u7136\u53ef\u4ee5\u8fde\uff0c\u5c31\u628a\u4ed6\u4eec\u8fde\u8d77\u6765\u3002\r\n    for(int i=1;i<=cnt;i++){\r\n        if(ind[i]==0){//\u5165\u5ea6\u4e3a0 \u4ece\u5165\u5ea6\u4e3a0\u5f00\u59cb\u8dd1 \r\n        //\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ece\u5165\u5ea6\u4e0d\u4e3a0\u7684\u8282\u70b9\u5f00\u59cb\u8dd1\u7684ans\u4e00\u5b9a\u5c0f\u4e8e\u4ece\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\u5f00\u59cb\u8dd1\u7684ans \r\n            dfs(i,0);//\u5165\u5ea6\u4e3a0\u5f53\u7136\u6ca1\u6709\u524d\u524d\u9a71\u8282\u70b9\u54af \r\n            ans=max(ans,dp[i]);//\u53d6max \r\n        }\r\n    }\r\n    printf(\"%d\",ans); return 0;\r\n}\r\n```\r\nBlog's Address\uff1awww.cnblogs.com/Yeasio-Nein",
        "postTime": 1529650463,
        "uid": 60528,
        "name": "Sue_Shallow",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u5982\u679c\u6211\u4eec\u80fd\u628a\u6574\u5f20\u56fe\uff08$R \\times C$\uff09\u5f00\u51fa\u6765\u7684\u8bdd\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff1a\u7ed9\u51fa\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6c42\u6700\u591a\u4e00\u6b21\u80fd\u7ecf\u8fc7\u7684\u70b9\u7684\u6570\u91cf\uff0c\u5176\u4e2d\u70b9\u53ef\u4ee5\u91cd\u590d\u7ecf\u8fc7\u3002\n\n\u7531\u4e8e\u70b9\u53ef\u4ee5\u91cd\u590d\u7ecf\u8fc7\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7f29\u70b9\uff0c\u7f29\u70b9\u4ee5\u540e\u76f4\u63a5\u5728 *DAG* \u4e0a $DP$ \u5373\u53ef\uff0c\u65b9\u7a0b\uff1a\n$$\ndp[v] = \\max\\{dp[u] + val[v]\\}\n$$\n\u5176\u4e2d $val[v]$ \u8868\u793a $v$ \u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u7684\u6570\u91cf\u3002\n\n\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u7531\u4e8e $R, C$ \u975e\u5e38\u5927\uff0c\u8fb9\u7684\u6570\u91cf\u975e\u5e38\u5927\uff08\u8fb9\u6570 $O(n^2)$\uff09\uff0c\u4e0d\u80fd\u76f4\u63a5\u5b58\u4e0b\u3002\u8fb9\u7684\u6570\u91cf\u7684\u74f6\u9888\u5728\u4e8e\u201c\u6a2a\u5929\u95e8\u201d\u548c\u201c\u7eb5\u5bf0\u95e8\u201d\uff0c\u6240\u4ee5\u4e00\u4e2a\u5e38\u89c4\u7684\u601d\u8def\u5bf9\u4e8e\u6bcf\u884c\u548c\u6bcf\u5217\u5efa\u4e00\u4e2a\u7279\u6b8a\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u70b9\u5230\u70b9\u7684\u8fde\u8fb9\uff0c\u8fb9\u7684\u6570\u91cf\u964d\u5230\u4e86 $O(n)$\u3002\n\n> \uff08\u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\uff09\n>\n> [![luo2403.png](https://i.loli.net/2019/05/14/5cda801045d3725916.png)](https://i.loli.net/2019/05/14/5cda801045d3725916.png)\n\n### \u5b9e\u73b0\n\n$1$ ~ $R$ \u662f\u6bcf\u4e00\u884c\u7684\u7279\u6b8a\u70b9\uff1b\n\n$R+1$ ~ $R + C$ \u662f\u6bcf\u4e00\u5217\u7684\u7279\u6b8a\u70b9\uff1b\n\n$R+C+1$ ~ $R + C + n$ \u662f\u85cf\u5b9d\u5bab\u5ba4\u3002\n\n```c++\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nconst int N = 100007, T = 2100007, M = 1000007;\nconst int dx[8] = {1, 1, 1, 0, 0, -1, -1, -1};\nconst int dy[8] = {1, 0, -1, 1, -1, 1, 0, -1};\nint n, r, c, t, edc, edu[M], edv[M];\nint ecnt, head[T], nxt[M], vet[M];\nint qhead, qtail, que[T], f[T], in[T];\nint stac[T], top, val[T], col[T], stamp, dfn[T], low[T], cnt;\nbool instac[T];\nstruct Node {\n\tint x, y, t;\n\tbool operator <(const Node &ano) const { \n\t\treturn x < ano.x || x == ano.x && y < ano.y;\n\t}\n} a[N]; \n\ninline void add(int u, int v) {\n\tedu[++edc] = u; edv[edc] = v;\n\t\n\tvet[++ecnt] = v; nxt[ecnt] = head[u];\n\thead[u] = ecnt;\n}\n\ninline void eadd(int u, int v) {\n\tvet[++ecnt] = v; nxt[ecnt] = head[u];\n\thead[u] = ecnt;\n}\n\nvoid tarjan(int u) {\n\tdfn[u] = low[u] = ++stamp;\n\tstac[++top] = u; instac[u] = true;\n\tfor (int e = head[u]; e; e = nxt[e]) {\n\t\tint v = vet[e];\n\t\tif (!dfn[v]) {\n\t\t\ttarjan(v); low[u] = min(low[u], low[v]);\n\t\t} else if (instac[v]) \n\t\t\tlow[u] = min(low[u], dfn[v]);\n\t}\n\tif (dfn[u] == low[u]) {\n\t\tcol[u] = ++cnt; val[cnt] = u > r + c;\n\t\twhile (stac[top] != u) {\n\t\t\tcol[stac[top]] = cnt;\n\t\t\tval[cnt] += (stac[top] > r + c);\n\t\t\tinstac[stac[top--]] = false;\n\t\t}\n\t\tinstac[stac[top--]] = false;\n\t}\n}\n\nint getid(int x, int y) {\n\tint l = 1, r = n;\n\twhile (l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (a[mid].x == x && a[mid].y == y) return mid;\n\t\telse if (a[mid].x < x || a[mid].x == x && a[mid].y < y) l = mid + 1;\n\t\telse r = mid - 1;\n\t}\n\treturn -1;\n}\n\nint main() {\n\tscanf(\"%d%d%d\", &n, &r, &c);\n\tfor (int i = 1; i <= n; ++i) \n\t\tscanf(\"%d%d%d\", &a[i].x, &a[i].y, &a[i].t);\n\tsort(a + 1, a + 1 + n);\n\tfor (int i = 1; i <= n; ++i) {\n\t\t//\u5904\u7406\u989d\u5916\u70b9\u5bf9\u5f53\u524d\u70b9\u7684\u8fde\u8fb9\n\t\tadd(a[i].x, r + c + i); \n\t\tadd(r + a[i].y, r + c + i);\n\t\t//\u5904\u7406\u5f53\u524d\u70b9\u5bf9\u5176\u5b83\u70b9\u7684\u8fde\u8fb9\n\t\tif (a[i].t == 1) add(r + c + i, a[i].x);\n\t\telse if (a[i].t == 2) add(r + c + i, r + a[i].y);\n\t\telse {\n\t\t\tfor (int k = 0; k < 8; ++k) {\n\t\t\t\tint x = a[i].x + dx[k], y = a[i].y + dy[k];\n\t\t\t\tif (x >= 1 && x <= r && y >= 1 && y <= c) {\n\t\t\t\t\tint id = getid(x, y);\n\t\t\t\t\tif (id != -1) add(r + c + i, r + c + id);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t}\n\t//\u7f29\u70b9 \n\tt = r + c + n; \n\tfor (int i = 1; i <= t; ++i)\n\t\tif (!dfn[i]) tarjan(i);\n\tecnt = 0; memset(head, 0, sizeof(head));\n\tfor (int i = 1; i <= edc; ++i)\n\t \tif (col[edu[i]] != col[edv[i]]) {\n\t\t \teadd(col[edu[i]], col[edv[i]]);\n\t\t \t++in[col[edv[i]]];\n\t\t }\n\t//\u62d3\u6251\u6392\u5e8f\n\tqhead = 0; qtail = -1;\n\tfor (int i = 1; i <= cnt; ++i) \n\t\tif (!in[i]) {\n\t\t\tque[++qtail] = i;\n\t\t\tf[i] = val[i];\n\t\t}\n\twhile (qhead <= qtail) {\n\t\tint u = que[qhead++];\n\t\tfor (int e = head[u]; e; e = nxt[e]) {\n\t\t\tint v = vet[e];\n\t\t\tf[v] = max(f[v], f[u] + val[v]);\n\t\t\tif (--in[v] == 0) que[++qtail] = v;\n\t\t}\n\t}\n\t//\u7edf\u8ba1\u7b54\u6848\n\tint ans = 0;\n\tfor (int i = 1; i <= cnt; ++i)\n\t\tans = max(ans, f[i]);\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1557824779,
        "uid": 31635,
        "name": "yingjz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "## \u5176\u5b9e\u4e3b\u8981\u96be\u5ea6\u5728\u5efa\u56fe&&\u5b58\u56fe\n## \u5b58\u5b8c\u56fe\u540e\u5c31\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9+\u62d3\u6251\u6392\u5e8f\u5c31\u884c\u4e86\n### \u90a3\u600e\u4e48\u5b58\u56fe\u5462QAQ??\n#### \u56e0\u4e3a$R*C$\u6700\u5927\u662f$10^{12}$\n#### \u6240\u4ee5\u76f4\u63a5\u786c\u5b58\u80af\u5b9a\u4e0d\u884c\n### \u673a\u667a\u7684\u6211\u60f3\u5230\u4e86\u8fd9\u6837\u4e00\u4e2a\u5b58\u56fe\u65b9\u6cd5\uff1a\n1. \u81ea\u7531\u95e8\u76f4\u63a5\u770b\u4e00\u4e0b\u5468\u56f4\u6709\u6ca1\u6709\u70b9\u5c31\u884c\u4e86\n1. \u5bf9\u4e8e\u6bcf\u884c\uff08\u5217\uff09\u90fd\u5efa\u4e00\u4e2a\u65b0\u7684\u70b9\uff08\u8fd9\u4e00\u884c\uff08\u5217\uff09\u4ee3\u8868\u7684\u70b9\uff09\uff0c\u8fd9\u4e2a\u70b9\u8fde\u63a5\u7740\u884c\uff08\u5217\uff09\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\n1. \u6a2a\u5929\u95e8\u5411\u4ed6\u6240\u5728\u7684\u8fd9\u4e00\u884c\u4ee3\u8868\u70b9\u8fde\u4e00\u6761\u8fb9\n1. \u7eb5\u5bf0\u95e8\u5411\u4ed6\u6240\u5728\u7684\u8fd9\u4e00\u5217\u4ee3\u8868\u70b9\u8fde\u4e00\u6761\u8fb9\n\n### \u8fd9\u6837\u5c31OK\u4e86\uff01\uff01\n### \u597d\u4e86\u4e0d\u8bf4\u5e9f\u8bdd\u4e86\uff0c\u4e0a\u4ee3\u7801\uff1a\n```c++\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\n#include <cstdlib>\n#include <queue>\n#include <cassert>\n#define N 2500000\nusing namespace std;\nint n,r,c,target[N],last[N],prev[N],cnt;\nbool used[N],used1[N];\nint target1[N],last1[N],prev1[N],cnt1,s[N],cnts;\nint size[N];\nint fa[N];\nint target2[N],last2[N],prev2[N],cnt2,ind[N],fro[N];\nint dp[N];\nint dx[8]={0,1,1,1,0,-1,-1,-1},dy[8]={1,1,0,-1,-1,-1,0,1};\nint q[N];\nstruct gz{\n    int x,y,type,id;\n    long long z;\n}a[200000];\nlong long count(long long x,long long y)\n{\n    return (x-1)*c+y;\n}\nvoid add1(int x,int y)\n{\n    target[++cnt]=y;\n    fro[cnt]=x;\n    prev[cnt]=last[x];\n    last[x]=cnt;\n}\nvoid add2(int x,int y)\n{\n    target1[++cnt1]=y;\n    prev1[cnt1]=last1[x];\n    last1[x]=cnt1;\n}\nvoid add3(int x,int y)\n{\n    ind[y]++;\n    target2[++cnt2]=y;\n    prev2[cnt2]=last2[x];\n    last2[x]=cnt2;\n}\nbool cmp(gz a,gz b)\n{\n    return ((long long)(a.x-1)*c+a.y)<((long long)(b.x-1)*c+b.y);\n}\nint ef(long long x)\n{\n    int l=1,r=n;\n    while(l<r-1)\n    {\n        int mid=(l+r)/2;\n        if(a[mid].z<=x)\n            l=mid;\n        else\n            r=mid-1;\n    }\n    if(a[r].z==x)\n        return r;\n    if(a[l].z==x)\n        return l;\n    return 0;\n}\nvoid dfs(int x)\n{\n    used[x]=1;\n    int ptr=last[x];\n    while(ptr)\n    {\n        int y=target[ptr];\n        if(used[y]!=1)\n        {\n            dfs(y);\n        }\n        ptr=prev[ptr];\n    }\n    s[++s[0]]=x;\n}\nvoid dfs1(int x,int fat)\n{\n    used1[x]=1;\n    fa[x]=fat;\n    int ptr=last1[x];\n    while(ptr)\n    {\n        int y=target1[ptr];\n        if(used1[y]==0)\n        {\n            dfs1(y,fat);\n        }\n        ptr=prev1[ptr];\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&r,&c);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].type);\n        a[i].z=count(a[i].x,a[i].y);\n        a[i].id=i;\n        add1(n+a[i].x,i);\n        add2(i,n+a[i].x);\n        add1(n+r+a[i].y,i);\n        add2(i,n+r+a[i].y);\n        if(a[i].type==1)\n        {\n            add1(i,n+a[i].x);\n            add2(n+a[i].x,i);\n        }\n        if(a[i].type==2)\n        {\n            add1(i,n+r+a[i].y);\n            add2(n+r+a[i].y,i);\n        }\n    }\n    sort(a+1,a+n+1,cmp);\n    for(int i=1;i<=n;i++)\n    {\n        if(a[i].type==3)\n        {\n            for(int j=0;j<=7;j++)\n            {\n                long long x=a[i].x+dx[j];\n                long long y=a[i].y+dy[j];\n                int k=ef(count(x,y));\n                if(k!=0)\n                {\n                    add1(a[i].id,a[k].id);\n                    add2(a[k].id,a[i].id);\n                }\n            }\n        }\n    }\n    n=n+r+c;\n    for(int i=1;i<=n;i++)\n    {\n        if(used[i]==0)\n            dfs(i);\n    }\n    for(int i=s[0];i>=1;i--)\n    {\n        if(used1[s[i]]==0)\n            dfs1(s[i],s[i]);\n    }\n    for(int i=1;i<=n-r-c;i++)\n    {\n        size[fa[i]]++;\n    }\n    for(int i=1;i<=cnt;i++)\n    {\n        int x=target[i];\n        int y=fro[i];\n        if(fa[x]!=fa[y])\n            add3(fa[y],fa[x]);\n    }\n    int h=1,t=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(fa[i]==i&&ind[i]==0)\n        {\n            dp[i]=size[i];\n            q[++t]=i;\n        }\n    }\n    int ans=0;\n    while(h<=t)\n    {\n        int x=q[h++];\n        ans=max(ans,dp[x]);\n        int ptr=last2[x];\n        while(ptr)\n        {\n            int y=target2[ptr];\n            dp[y]=max(dp[y],dp[x]+size[y]);\n            ind[y]--;\n            if(ind[y]==0)\n            {\n                q[++t]=y;\n            }\n            ptr=prev2[ptr];\n        }\n    }\n    printf(\"%d\",ans);\n    \n    return 0;\n}\n```",
        "postTime": 1541345175,
        "uid": 137610,
        "name": "\u7231\u8fea\u751f",
        "ccfLevel": 0,
        "title": "P2403 [SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf"
    },
    {
        "content": "\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u7531\u4e09\u79cd\u4f20\u9001\u95e8\u7684\u5b9a\u4e49\u5f97\u51fa\u4e00\u4e2a\u5927\u81f4\u7684\u56fe\u8bba\u6a21\u578b\u2014\u2014\u628a\u6bcf\u4e2a\u5bab\u5ba4\u770b\u4f5c\u4e00\u4e2a\u70b9\uff0c\u6709\u5b9d\u85cf\u7684\u5bab\u5ba4\u53ef\u4ee5\u901a\u8fc7\u4f20\u9001\u95e8\u5411\u5176\u4ed6\u5bab\u5ba4\u8fde\u51fa\u6709\u5411\u8fb9\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6709\u5b9d\u85cf\u7684\u5bab\u5ba4\u70b9\u6743\u4e3a  $1$\uff0c\u5176\u4ed6\u5bab\u5ba4\u70b9\u6743\u4e3a\u3002\u7b54\u6848\u5373\u4e3a\u6240\u6709\u8def\u5f84\u4e2d\u70b9\u6743\u548c\u7684\u6700\u5927\u503c\u3002\n\n\u800c\u5bf9\u4e8e\u4f20\u9001\u95e8\u7684\u8fde\u8fb9\u6211\u4eec\u5bb9\u6613\u60f3\u5230\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n\n1. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u201c\u6a2a\u5929\u95e8\u201d\uff0c\u6211\u4eec\u5411\u540c\u4e00\u884c\u7684\u6240\u6709\u5bab\u5ba4\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n2. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u201c\u7eb5\u5bf0\u95e8\u201d\uff0c\u6211\u4eec\u5411\u540c\u4e00\u5217\u7684\u6240\u6709\u5bab\u5ba4\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n3. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u201c\u4efb\u610f\u95e8\u201d\uff0c\u6211\u4eec\u5411\u201c\u4e5d\u5bab\u683c\u201d\u5185\u7684\u53e6\u5916\u516b\u4e2a\u5bab\u5ba4\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u5bab\u5ba4\u53ef\u4ee5\u7ecf\u8fc7\u591a\u6b21\uff0c\u6bcf\u4e2a\u4f20\u9001\u95e8\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u7684\u70b9\u4e00\u5b9a\u53ef\u4ee5\u5f52\u5230\u540c\u4e00\u6761\u8def\u5f84\u4e0a\uff0c\u5e76\u4e14\u4e0d\u5f71\u54cd\u5176\u4ed6\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u51b3\u7b56\u3002\u6240\u4ee5\uff0c\u5c06\u5efa\u597d\u7684\u56fe Tarjan \u7f29\u70b9\u540e\u5efa\u65b0\u56fe\u62d3\u6251 DP \u6c42\u6700\u957f\u94fe\u3002\u8bb0\u8fb9\u6570\u4e3a $E$ \uff0c\u7f29\u70b9 + DP \u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6 $O(N+E)$\uff0c\u5efa\u56fe\u90e8\u5206\u65f6\u7a7a\u590d\u6742\u5ea6 $O(E)$\u3002\u6309\u4e0a\u8ff0\u5efa\u56fe\u65b9\u6cd5\u53ef\u901a\u8fc7\u6d4b\u8bd5\u70b9 $1\\sim 4$\uff0c\u5f97 $40$ \u5206\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u672c\u9898\u7684\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e $E$\uff0c\u6240\u4ee5\u8003\u8651\u7f29\u5c0f $E$ \u7684\u89c4\u6a21\u3002\u5bb9\u6613\u60f3\u5230\uff1a\u6ca1\u6709\u5b9d\u85cf\u7684\u5bab\u5ba4\uff0c\u65e2\u6ca1\u6709\u5bf9\u5176\u4ed6\u5bab\u5ba4\u7684\u51fa\u8fb9\uff0c\u4e5f\u6ca1\u6709\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u7684\u70b9\u6743\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\uff0c\u4e0d\u53c2\u4e0e\u5efa\u56fe\u3002\n\n\u5219\u5efa\u8fb9\u65b9\u6cd5\u8f6c\u5316\u4e3a\uff1a\n\n1. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u201c\u6a2a\u5929\u95e8\u201d\uff0c\u6211\u4eec\u5411\u540c\u4e00\u884c\u7684\u6240\u6709\u6709\u5b9d\u85cf\u7684\u5bab\u5ba4\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n2. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u201c\u7eb5\u5bf0\u95e8\u201d\uff0c\u6211\u4eec\u5411\u540c\u4e00\u5217\u7684\u6240\u6709\u6709\u5b9d\u85cf\u7684\u5bab\u5ba4\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n3. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u201c\u4efb\u610f\u95e8\u201d\uff0c\u6211\u4eec\u5411\u201c\u4e5d\u5bab\u683c\u201d\u5185\u7684\u53e6\u5916\u516b\u4e2a\u5bab\u5ba4\u4e2d\u6709\u5b9d\u85cf\u7684\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c$E$ \u7684\u89c4\u6a21\u5927\u5927\u4e0b\u964d\u3002\u53ef\u5f97 $40\\sim 70$ \u5206\u4e0d\u7b49\u3002\n\n\u663e\u7136\uff0c\u5bf9\u4e8e\u6ee1\u5206\u505a\u6cd5\u800c\u8a00\uff0c$E$ \u7684\u89c4\u6a21\u4ecd\u9700\u8fdb\u4e00\u6b65\u7f29\u5c0f\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6700\u521d\u7684\u5efa\u8fb9\u65b9\u6cd5\u7ecf\u8fc7\u4f18\u5316\u540e\u6548\u7387\u5df2\u7ecf\u63d0\u9ad8\u4e0d\u5c11\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u7279\u6b8a\u7684\u6570\u636e\u4e0b\u53d1\u751f\u9000\u5316\u3002\u4f8b\u5982\u6240\u6709\u7684\u4f20\u9001\u95e8\u5747\u4e3a\u201d\u6a2a\u5929\u95e8\u201c\uff0c\u5e76\u4e14\u6240\u6709\u4f20\u9001\u95e8\u90fd\u5728\u540c\u4e00\u884c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c$E$ \u7684\u89c4\u6a21\u4ecd\u7136\u8fbe\u5230\u4e86 $N^2$ \u7ea7\u522b\uff0c\u663e\u7136\u4e0d\u80fd\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002\n\n\u8003\u8651\u5982\u4f55\u4f18\u5316\u8be5\u79cd\u60c5\u51b5\u4e0b\u7684\u5efa\u8fb9\u590d\u6742\u5ea6\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u7ecf\u5178\u7684\u601d\u60f3\uff0c\u6211\u4eec\u65b0\u5efa\u51fa $R+C$ \u4e2a\u8282\u70b9\u3002\u4ee4\u8282\u70b9 $1\\sim R$ \u8868\u793a\u6bcf\u4e00\u884c\uff0c\u8282\u70b9 $R+1\\sim R+C$ \u8868\u793a\u6bcf\u4e00\u5217\uff0c\u8282\u70b9 $R+C+1\\sim R+C+N$ \u8868\u793a\u6709\u5b9d\u85cf\u7684\u5bab\u5ba4\u3002\n\n\u90a3\u4e48\uff0c\u5efa\u8fb9\u65b9\u5f0f\u53d1\u751f\u5982\u4e0b\u53d8\u5316\uff1a\n\n1. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u201c\u6a2a\u5929\u95e8\u201d\uff0c\u6211\u4eec\u5411\u8868\u793a\u8fd9\u4e00\u884c\u7684\u8282\u70b9\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n2. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u201c\u7eb5\u5bf0\u95e8\u201d\uff0c\u6211\u4eec\u5411\u8868\u793a\u8fd9\u4e00\u5217\u7684\u8282\u70b9\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n3. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u201c\u4efb\u610f\u95e8\u201d\uff0c\u6211\u4eec\u5411\u201c\u4e5d\u5bab\u683c\u201d\u5185\u7684\u53e6\u5916\u516b\u4e2a\u5bab\u5ba4\u4e2d\u6709\u5b9d\u85cf\u7684\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n4. \u5bf9\u4e8e\u8282\u70b9 $1\\sim R$\uff0c\u5411\u8fd9\u4e00\u884c\u6240\u6709\u6709\u5b9d\u85cf\u7684\u5bab\u5ba4\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n5. \u5bf9\u4e8e\u8282\u70b9 $R+1\\sim R+C$\uff0c\u5411\u8fd9\u4e00\u5217\u6240\u6709\u6709\u5b9d\u85cf\u7684\u5bab\u5ba4\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u5bf9\u4e8e $4,5$ \u4e24\u4e2a\u64cd\u4f5c\uff0c\u8fde\u51fa\u7684\u8fb9\u7684\u603b\u6570\u56fa\u5b9a\u5728 $2\\times N$ \u6761\u3002\u800c\u5bf9\u4e8e $1,2$ \u4e24\u4e2a\u64cd\u4f5c\uff0c\u4e00\u4e2a\u201c\u6a2a\u5929\u95e8\u201c\u6216\u4e00\u4e2a\u201d\u7eb5\u5bf0\u95e8\u201c\u663e\u7136\u53ea\u4f1a\u5bf9\u5916\u8fde\u51fa\u4e00\u6761\u8fb9\u3002\u5bf9\u4e8e\u64cd\u4f5c $3$ \u663e\u7136\u8fde\u51fa\u7684\u8fb9\u4e0d\u4f1a\u8d85\u8fc7 $8\\times N$ \u6761\u3002\u90a3\u4e48\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c$E=2\\times N+8\\times N=10\\times N\\leq 10\\times 10^5$ \u3002 \u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u90e8\u5206\u7ec6\u8282\u95ee\u9898\uff1a\n\n1. \u6570\u7ec4\u5927\u5c0f\u5e94\u5f00\u81f3 $R+C+N\\le 10^6+10^6+10^5=2.1\\times 10^6$ \u3002\n2. \u5bf9\u4e8e\u201d\u4efb\u610f\u95e8\u201c\u5468\u56f4\u7684\u5bab\u5ba4\u662f\u5426\u6709\u5b9d\u85cf\u53ef\u4ee5\u4f7f\u7528 STL map \u50a8\u5b58\uff0c\u4f46\u5e38\u6570\u8f83\u5927\uff0c\u9700\u8981\u5f00\u542f O2 \u4f18\u5316\uff0c\u6709\u5174\u8da3\u7684\u9009\u624b\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u54c8\u5e0c\u8868\u8fdb\u4e00\u6b65\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u53c2\u8003\u7a0b\u5e8f\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register\n#define ll long long\ninline int read()\n{\n\tint f=1,lzx=0;char c=getchar();\n\twhile(c>'9'||c<'0'){if(c=='-')f=-f;c=getchar();}\n\twhile(c<='9'&&c>='0'){lzx=lzx*10+c-'0';c=getchar();}\n\treturn lzx*f;\n}\nmap<pair<int,int>,int> mapp;\nint dx[10]={-1,-1,-1,0,0,1,1,1},dy[10]={-1,0,1,-1,1,-1,1,0};\nconst int N=1e7+10;\nint xx[N],yy[N],from[N],to[N],cnt,head[N],dis[N],dfn[N],low[N],stak[N],top,Time,col[N],disa[N],col_cnt;\ninline void add(int x,int y)\n{\n\tfrom[++cnt]=head[x];\n\thead[x]=cnt;\n\tto[cnt]=y;\n\treturn;\n}\nint from_new[N],to_new[N],cnt_new,head_new[N],f[N],ru[N];\ninline void add_new(int x,int y)\n{\n\tfrom_new[++cnt_new]=head_new[x];\n\thead_new[x]=cnt_new;\n\tto_new[cnt_new]=y;\n\treturn;\n}\ninline void Tarjan(int x)\n{\n\tdfn[x]=low[x]=++Time;stak[++top]=x;\n\tfor(re int i=head[x];i;i=from[i])\n\t{\n\t\tint v=to[i];\n\t\tif(!dfn[v])\n\t\t{\n\t\t\tTarjan(v);\n\t\t\tlow[x]=min(low[x],low[v]);\n\t\t}\n\t\telse if(!col[v])low[x]=min(low[x],dfn[v]);\n\t}\n\tif(dfn[x]==low[x])\n\t{\n\t\tcol[x]=++col_cnt;\n\t\tdisa[col[x]]=dis[x];\n\t\twhile(stak[top]!=x)\n\t\t{\n\t\t\tcol[stak[top]]=col[x];\n\t\t\tdisa[col[x]]+=dis[stak[top]];\n\t\t\ttop--;\n\t\t}\n\t\ttop--;\n\t}\n\treturn;\n}\nint main()\n{\n\tint n=read(),r=read(),c=read();\n\tfor(re int i=1;i<=n;i++)\n\t{\n\t\tdis[r+c+i]=1;\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,r+c+i);add(y+r,r+c+i);\n\t\tif(z==1)add(r+c+i,x);\n\t\tif(z==2)add(r+c+i,y+r);\n\t\tif(z==3)xx[i]=x,yy[i]=y;\n\t\tmapp[make_pair(x,y)]=i;\n\t}\n\tfor(re int i=1;i<=n;i++)if(xx[i])\n\t\tfor(re int j=0;j<8;j++)\n\t\t\tif(mapp[make_pair(xx[i]+dx[j],yy[i]+dy[j])])\n\t\t\t\tadd(r+c+i,mapp[make_pair(xx[i]+dx[j],yy[i]+dy[j])]+r+c);\t\t\n\tfor(re int i=1;i<=r+c+n;i++)\n\t\tif(!dfn[i])\n\t\t\tTarjan(i);\n\tfor(re int i=1;i<=n+r+c;i++)\n\t\tfor(re int j=head[i];j;j=from[j])\n\t\t{\n\t\t\tint v=to[j];\n\t\t\tif(col[i]!=col[v])\n\t\t\t{\n\t\t\t\tadd_new(col[i],col[v]);\n\t\t\t\tru[col[v]]++;\n\t\t\t}\n\t\t}\n\tqueue<int> q;\n\tfor(re int i=1;i<=col_cnt;i++)\n\t\tif(!ru[i])\n\t\t{\n\t\t\tf[i]=disa[i];\n\t\t\tq.push(i);\n\t\t}\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tfor(re int i=head_new[u];i;i=from_new[i])\n\t\t{\n\t\t\tint v=to_new[i];ru[v]--;\n\t\t\tf[v]=max(f[v],f[u]+disa[v]);\n\t\t\tif(!ru[v])q.push(v);\n\t\t}\n\t\tq.pop();\n\t}\n\tint ans=0;\n\tfor(re int i=1;i<=col_cnt;i++)\n\t\tans=max(ans,f[i]);\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1595982146,
        "uid": 130602,
        "name": "lzx2005",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "\u9898\u89e3\u5728\u535a\u5ba2[\u98df\u7528](https://www.cnblogs.com/YoungNeal/p/9123725.html)\u6548\u679c\u66f4\u4f73\u54e6~\n\n\n## Solution\n\n\u4e00\u773c $Tarjan$ \u7f29\u70b9\u62d3\u6251\u6c42\u6700\u957f\u8def\u3002\n\n\u7136\u800c\u5982\u679c\u76f4\u63a5\u66b4\u529b\u5efa\u8fb9\u7684\u8bdd\u4f1a$T$\u4e0a\u5929\uff0c\u56e0\u4e3a\u8fd9\u9898\u8981\u5efa\u7684\u8fb9\u8d3c\u591a\uff0c\u6bd4\u5982\u8bf4\u4e00\u884c\u5168\u662f\u6a2a\u95e8\uff0c\u66b4\u529b\u5efa\u8fb9\u662f\u4e24\u4e24\u4e4b\u95f4\u90fd\u5efa\u7684\uff0c\u6700\u574f\u590d\u6742\u5ea6 $O(n^2)$\u3002\n\n\u8003\u8651\u4f18\u5316\u5efa\u56fe\u3002\n\n\u89c2\u5bdf\u5230\u4e00\u884c\u7684\u6a2a\u95e8\u6216\u8005\u4e00\u5217\u7684\u7eb5\u95e8\u4e00\u5b9a\u662f\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u91cc\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u540c\u4e00\u884c\u7684\u6a2a\u95e8\u6216\u8005\u540c\u4e00\u884c\u7684\u7eb5\u95e8\u5c31\u6ca1\u5fc5\u8981\u4e24\u4e24\u8fde\u8fb9\u4e86\uff0c\u4fdd\u8bc1\u76f4\u63a5\u8fde\u6210\u4e00\u4e2a\u73af\u5c31\u597d\u4e86\u3002\n\n\u4f46\u662f\u5982\u679c\u4e00\u884c\u4e2d\u6709\u5f88\u591a\u6a2a\u95e8\uff0c\u540c\u65f6\u4e5f\u6709\u5f88\u591a\u5176\u4ed6\u7684\u95e8\uff0c\u90a3\u4e48\u8fd8\u662f\u4f1a\u6bcf\u4e2a\u6a2a\u95e8\u5411\u6bcf\u4e2a\u522b\u7684\u79cd\u7c7b\u7684\u95e8\u8fde\u8fb9\uff0c\u8fb9\u6570\u8fd8\u662f\u592a\u591a\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u4e00\u884c\u4e2d\u7684\u6a2a\u95e8\u662f\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u884c\u4e2d\u7684\u5176\u5b83\u5bab\u5ba4\uff0c\u53ea\u9700\u4ece\u73af\u4e0a\u5411\u8fd9\u4e2a\u5bab\u5ba4\u8fde\u4e00\u6761\u8fb9\u5c31\u591f\u4e86\u3002\n\n\u4e8e\u662f\u5f97\u5230\u4e86\u4e0b\u9762\u6210\u578b\u7684\u7b97\u6cd5\u601d\u8def\uff1a\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u884c\u7684\u6a2a\u95e8\uff0c\u6bcf\u4e00\u5217\u7684\u7eb5\u95e8\uff0c\u8fd8\u6709\u81ea\u7531\u95e8\u5206\u5f00\u5efa\u56fe\u3002\n\n\u7b2c\u4e00\u904d\u5efa\u51fa\u6a2a\u95e8\u5411\u5916\u8fde\u7684\u6240\u6709\u8fb9\u3002\u7b2c\u4e8c\u904d\u5efa\u51fa\u7eb5\u95e8\u5411\u5916\u8fde\u7684\u6240\u6709\u8fb9\u3002\u7b2c\u4e09\u904d\u5efa\u51fa\u81ea\u7531\u95e8\u5411\u5916\u8fde\u7684\u6240\u6709\u8fb9\u3002\n\n\u6211\u4eec\u6a21\u62df\u7b2c\u4e00\u6b21\u5efa\u8fb9\u3002\n\n\u56e0\u4e3a\u8981\u4f18\u5316\u5efa\u8fb9\u8fc7\u7a0b\u7684\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u60f3\u5c3d\u53ef\u80fd\u7684\u5148\u5faa\u73af\u5230\u6a2a\u95e8\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u6392\u5e8f\u4e00\u904d\uff0c\u8fd9\u6837\u7684\u8bdd\u5982\u679c\u5f53\u524d\u4e0d\u662f\u6a2a\u95e8\u5c31\u53ef\u4ee5\u76f4\u63a5 $break$ \u6389\u4e86\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u5bab\u5ba4\uff0c\u6211\u4eec\u6309\u7167\u884c\u6570\u6392\u5e8f\uff0c\u4fdd\u8bc1\u4e00\u884c\u4e0a\u7684\u6240\u6709\u5bab\u5ba4\u90fd\u4f1a\u4e00\u5757\u5faa\u73af\u5230\u3002\u5982\u679c\u884c\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u4f18\u5148\u5c06\u6a2a\u95e8\u6392\u5728\u524d\u9762\u3002\n\n\u5bf9\u4e8e\u5faa\u73af\u5230\u7684\u6bcf\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6a2a\u95e8\uff0c\u6211\u4eec\u5c06\u5176\u8bb0\u4e3a $first$\uff0c\u540c\u65f6\u89c4\u5b9a $last$ \u53d8\u91cf\u662f\u4e0a\u4e00\u4e2a\u626b\u5230\u7684\u6a2a\u95e8\u3002\n\n\u7136\u540e\u5f00\u59cb\u626b\u8fd9\u4e00\u884c\u7684\u5bab\u5ba4\u3002\n\n\u5982\u679c\u5f53\u524d\u5bab\u5ba4\u662f\u6a2a\u95e8\uff0c\u90a3\u4e48 $add(last,now)$,\u540c\u65f6\u4ee4 $last=now$\u3002\n\n\u5426\u5219\uff0c$add(last,now)$\u3002\n\n\u6700\u540e\uff0c$add(last,first)$\u3002\n\n\u8fd9\u5c31\u5b8c\u6210\u4e86\u4e00\u884c\u7684\u626b\u63cf\u3002\n\n\u7eb5\u95e8\u4e5f\u662f\u540c\u7406\u3002\n\n\u5bf9\u4e8e\u81ea\u7531\u95e8\uff0c\u6211\u6ca1\u6709\u60f3\u51fa\u592a\u597d\u7684\u5efa\u8fb9\u65b9\u6848\uff0c\u4e8e\u662f\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u81ea\u7531\u95e8\u5468\u56f4\u7684\u516b\u4e2a\u683c\u5b50\u662f\u5426\u6709\u5b9d\u85cf\u3002\u8fd9\u91cc\u53ef\u4ee5\u7528 $STL$ \u7684 $map$ \u6765\u5b58\u50a8\u6bcf\u4e2a\u70b9\u662f\u5426\u6709\u5b9d\u85cf\uff0c\u4f46\u662f\u6211\u8fd9\u91cc\u56e0\u4e3a\u5bb3\u6015\u88ab\u5361\u5e38\uff0c\u624b\u5199\u4e86\u4e2a $Hash$ \u8868\u3002\n\n\u5176\u5b83\u5c31\u6ca1\u4ec0\u4e48\u4e86\u3002\n\n~~\u6211\u8fd8\u6bd2\u7624\u7684\u52a0\u4e0a\u4e86fread\u5feb\u8bfb~~    \n~~\u6bd2\u7624\u7684cnblogs\u8bf4\u81ea\u7531\u95e8\u662f\u654f\u611f\u8bcd\u6c47qwq~~\n\n## Code\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#define N 100005\n#define mod 10007\n#define ll long long\n#define min(A,B) ((A)<(B)?(A):(B))\n#define max(A,B) ((A)>(B)?(A):(B))\n\nint x,n,m;\nbool in[N];\nint cnt,tot,sum;\nint head2[N],deg[N];\nstd::queue<int> topo;\nint stk[N],top,dis[N];\nint head[N],belong[N];\nint dfn[N],low[N],sze[N];\nint hshhead[mod+2],hshcnt;\n\nint dx[]={-1,0,1,0,1,1,-1,-1};\nint dy[]={0,1,0,-1,1,-1,1,-1};\n\nstruct Edge{\n    int to,nxt;\n}edge[N<<3],edge2[N<<3];\n\nstruct HASH{\n    ll data;\n    int nxt,idx;\n}h[N<<2];\n\nvoid hshadd(ll x,ll z,int i){\n    h[++hshcnt].data=z;\n    h[hshcnt].idx=i;\n    h[hshcnt].nxt=hshhead[x];\n    hshhead[x]=hshcnt;\n}\n\nstruct Node{\n    int a,b,c,id;\n}type[N];\n\nbool cmp1(Node x,Node y){\n    if(x.a!=y.a) return x.a<y.a;\n    if(x.c==1) return 1;\n    if(y.c==1) return 0;\n    return x.b<y.b;\n}\n\nbool cmp2(Node x,Node y){\n    if(x.b!=y.b) return x.b<y.b;\n    if(x.c==2) return 1;\n    if(y.c==2) return 0;\n    return x.a<y.a;\n}\n\nvoid add(int x,int y){\n    edge[++cnt].to=y;\n    edge[cnt].nxt=head[x];\n    head[x]=cnt;\n}\n\nvoid add2(int x,int y){\n    edge2[++cnt].to=y;\n    edge2[cnt].nxt=head2[x];\n    head2[x]=cnt;\n}\n\ninline char nc(){\n    static const int BS=1<<22;\n    static unsigned char buf[BS],*st,*ed;\n    if(st==ed) ed=ed+fread(st=buf,1,BS,stdin);\n    return ed==st?EOF:*st++;\n}\n//#define nc getchar\ninline int getint(){\n    int x=0;char ch;\n    while(!isdigit(ch=nc()));\n    while(isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=nc();\n    return x;\n}\n\nvoid tarjan(int now){\n    dfn[now]=low[now]=++sum;\n    stk[++top]=now;in[now]=1;\n    for(int i=head[now];i;i=edge[i].nxt){\n        int to=edge[i].to;\n        if(!dfn[to]){\n            tarjan(to);\n            low[now]=min(low[now],low[to]);\n        }\n        else if(in[to])\n            low[now]=min(low[now],dfn[to]);\n    }\n    if(low[now]==dfn[now]){\n        int y;belong[now]=++tot;\n        do{\n            sze[tot]++;\n            y=stk[top--];\n            in[y]=0;\n            belong[y]=tot;\n        }while(y!=now);\n    }\n}\n\nvoid Hash(){\n    for(int i=1;i<=x;i++){\n        ll p=1LL*(type[i].a-1)*m+type[i].b;\n        ll q=p%mod;\n        hshadd(q,p,i);\n    }\n}\n\nint hsh(ll q){\n    ll p=q%mod;\n    for(int i=hshhead[p];i;i=h[i].nxt){\n        if(h[i].data==q)\n            return h[i].idx;\n    }\n    return 0;\n}\n\nsigned main(){\n    x=getint(),n=getint(),m=getint();\n    for(int i=1;i<=x;i++){\n        type[i].a=getint();\n        type[i].b=getint();\n        type[i].c=getint();\n        type[i].id=i;\n    }\n    Hash();\n    std::sort(type+1,type+1+x,cmp1);\n    for(int i=1;i<=x;i++){\n        if(type[i].c==1){\n            int fina=0;\n            int fist,last=0;\n            for(int j=i;j<=x and type[i].a==type[j].a;j++){\n                fina=j;\n                if(type[i].c==type[j].c){\n                    if(!last){\n                        last=type[j].id;\n                        fist=last;\n                        continue;\n                    }\n                    add(last,type[j].id);\n                    last=type[j].id;\n                }\n                else add(type[i].id,type[j].id);\n            }\n            if(last!=fist)\n                add(last,fist);\n            i=fina;\n        }\n    }\n    std::sort(type+1,type+1+x,cmp2);\n    for(int i=1;i<=x;i++){\n        if(type[i].c==2){\n            int fina=0;\n            int fist,last=0;\n            for(int j=i;j<=x and type[i].b==type[j].b;j++){\n                fina=j;\n                if(type[i].c==type[j].c){\n                    if(!last){\n                        last=type[j].id;\n                        fist=type[j].id;\n                        continue;\n                    }\n                    add(last,type[j].id);\n                    last=type[j].id;\n                }\n                else add(type[i].id,type[j].id);\n            }\n            if(last!=fist)\n                add(last,fist);\n            i=fina;\n        }\n    }\n    for(int i=1;i<=x;i++){\n        for(int k=0;k<8;k++){\n            if(type[i].c!=3) continue;\n            int nx=type[i].a+dx[k];\n            int ny=type[i].b+dy[k];\n            int p=hsh(1LL*(nx-1)*m+ny);\n            if(!p)\n                continue;\n            add(type[i].id,p);\n        }\n    }    \n    for(int i=1;i<=x;i++){\n        if(!dfn[i]) \n            tarjan(i);\n    }\n    cnt=0;\n    for(int i=1;i<=x;i++){\n        for(int p=head[i];p;p=edge[p].nxt){\n            int to=edge[p].to;\n            if(belong[i]==belong[to]) continue;\n            deg[belong[to]]++;\n            add2(belong[i],belong[to]);\n        }\n    }\n    int ans=0;\n    for(int i=1;i<=tot;i++){\n        if(!deg[i]){\n            topo.push(i);\n            dis[i]=sze[i];\n            ans=max(ans,sze[i]);\n        }\n    }\n    while(topo.size()){\n        int u=topo.front();topo.pop();\n        for(int i=head2[u];i;i=edge2[i].nxt){\n            int to=edge2[i].to;\n            dis[to]=max(dis[to],dis[u]+sze[to]);\n            ans=max(ans,dis[to]);\n            deg[to]--;\n            if(!deg[to])\n                topo.push(to);\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1527861747,
        "uid": 56778,
        "name": "YoungNeal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "# \u6211\u70ed\u7231\u6839\u53f7\u6570\u636e\u7ed3\u6784,\u6240\u4ee5\u6211\u7528\u4e86kdtree\u6765\u505a\u6b64\u9898\n\n\u8003\u8651\u8fd9\u4e09\u79cd\u8fde\u8fb9\u5206\u522b\u4e3a:\n\n1,\u6a2a\u5929\u95e8\u5373\u4e00\u4e2a$1\\times c$\u7684\u77e9\u9635\u5185\u7684\u70b9\u8fde\u8fb9\n\n2,\u7eb5\u5bf0\u95e8\u5373\u4e00\u4e2a$r \\times 1$\u7684\u77e9\u9635\u5185\u7684\u70b9\u8fde\u8fb9\n\n3,\u4efb\u610f\u95e8\u5373\u4e00\u4e2a$3 \\times 3$\u7684\u77e9\u9635\u5185\u7684\u70b9\u8fde\u8fb9\n\n\u8fd9\u4e0d\u5c31\u662f\u77e9\u9635\u8fde\u8fb9\u5417????\n\n\u76f4\u63a5\u4e0a\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u6216\u8005$kdtree$\u5373\u53ef\n\n\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u8fde\u8fb9\u53ef\u4ee5\u53c2\u8003[\u70b8\u5f39(\u4e00\u7ef4\u7ebf\u6bb5\u6811\u8fde\u8fb9+\u7f29\u70b9)](https://www.luogu.org/problem/P5025)\n\n\u5bf9\u4e8e$kdtree$\u5982\u679c\u50cf\u7ebf\u6bb5\u6811\u4e00\u6837\u76f4\u63a5\u7528$kdtree$\u4e0a\u7684\u5bf9\u5e94\u70b9\u8fde\u5411\u5176\u4ed6\u70b9,\u4e14\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\u4e3a$1$,\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u6839\u6240\u6709\u70b9\u90fd\u53ef\u4ee5\u5230\u8fbe\u4f1a\u65e0\u9650\u8f93\u51fa$n$,\u6240\u4ee5\u9700\u8981\u8003\u8651\u53e6\u5916\u4e00\u79cd\u5efa\u56fe\u65b9\u5f0f\n\n\u5bf9\u4e8e$kdtree$\u4e0a\u7684\u70b9\u53ef\u4ee5\u662f\u4f5c\u4e3a\u865a\u70b9,\u6bcf\u4e2a\u865a\u70b9\u90fd\u5bf9\u5e94\u4e0a\u4e86\u539f\u6709\u7684\u5b9e\u70b9(\u5373\u8f93\u51fa\u7ed9\u51fa\u7684\u70b9)\n\n\u5bf9\u4e8e\u521d\u59cb\u5316,\u6bcf\u4e2a\u865a\u70b9\u5411\u5176\u4e24\u4e2a\u513f\u5b50\u548c\u5bf9\u4e8e\u5b9e\u70b9\u8fde\u8fb9\u5373\u53ef\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7684\u95e8\u7c7b\u578b\u518d\u6bcf\u4e2a\u5b9e\u70b9\u5411\u53ef\u8fde\u8fb9\u865a\u70b9\u8fde\u8fb9\u5373\u53ef\n\n\u7136\u540e\u5c31\u50cf\u666e\u901a\u7684\u4e00\u6837\u8dd1$tarjan+Dp$\u5373\u53ef\n\n\u590d\u6742\u5ea6$O(n\\sqrt n)$\n\n~~\u4e0d\u5f00O2\u8fd8\u8fc7\u4e0d\u4e86~~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\ntypedef long long ll;\n#define inc(i) (++ (i))\n#define dec(i) (-- (i))\n#define Rep(i , a , b) for(int i = (a) , i##Limit = (b) ; i <= i##Limit ; inc(i))\n#define rep(i , a , b) for(int i = (a) , i##Limit = (b) ; i >= i##Limit ; dec(i))\nusing namespace std;\n\ninline int read() {\n\tint Num = 0; char C = getchar();\n\twhile(!isdigit(C)) C = getchar();\n\twhile(isdigit(C)) Num = Num * 10 + C - 48 , C = getchar();\n\treturn Num;\n}\nconst int N = 200000 + 7;\nint n , r , c , opt[N] , D , tot , Root , Id[N] , P[N] , Cnt , W[N] , In[N];\nstruct YYZ {\n\tint X[2] , id;\n}A[N];\nstruct NFO {\n\tint L[2] , R[2] , Son[2];\n\tYYZ x;\n}T[N];\nvector <int> E[N] , F[N];\ninline void Add(int u , int v) {\n\tif(u && v) F[u].push_back(v);\n}\ninline void Update(int u) {\n\tRep(i , 0 , 1) {\n\t\tT[u].L[i] = T[u].R[i] = T[u].x.X[i];\n\t\tRep(j , 0 , 1) if(T[u].Son[j])\n\t\t\tT[u].L[i] = min(T[u].L[i] , T[T[u].Son[j]].L[i]) , T[u].R[i] = max(T[u].R[i] , T[T[u].Son[j]].R[i]);\n\t}\n}\nint Build(int l , int r , int DD) {\n\tif(l > r) return 0;\n\tint u = inc(tot) , Mid = (l + r) >> 1;\n\tD = DD , nth_element(A + l , A + 1 + Mid , A + 1 + r , [](YYZ A , YYZ B){ return A.X[D] < B.X[D]; });\n\tT[u].x = A[Mid] , T[u].Son[0] = Build(l , Mid - 1 , DD ^ 1) , T[u].Son[1] = Build(Mid + 1 , r , DD ^ 1);\n\tAdd(u , T[u].Son[0]) , Add(u , T[u].Son[1]) , Add(u , T[u].x.id);\n\tUpdate(u);\n\treturn u;\n}\nvoid Get(int u , int l , int r , int d , int U) {\n\tif(min(T[u].R[0] , r) < max(T[u].L[0] , l) || min(T[u].R[1] , U) < max(T[u].L[1] , d)) return;\n\tif(l <= T[u].L[0] && r >= T[u].R[0] && d <= T[u].L[1] && U >= T[u].R[1]) {\n\t\tP[inc(Cnt)] = u;\n\t\treturn;\n\t}\n\tif(T[u].x.X[0] >= l && T[u].x.X[0] <= r && T[u].x.X[1] >= d && T[u].x.X[1] <= U) P[inc(Cnt)] = T[u].x.id;\n\tGet(T[u].Son[0] , l , r , d , U) , Get(T[u].Son[1] , l , r , d , U);\n}\nint DFN[N] , Low[N] , Nowtime , Col[N] , col , Stack[N] , top , Dp[N] , Ans;\nbool ins[N] , Book[N];\nvoid Tarjan(int u) {\n\tDFN[u] = Low[u] = inc(Nowtime);\n\tStack[inc(top)] = u , ins[u] = 1;\n\tfor(auto v: F[u]) {\n\t\tif(!DFN[v]) {\n\t\t\tTarjan(v);\n\t\t\tLow[u] = min(Low[u] , Low[v]);\n\t\t}\n\t\telse if(ins[v]) Low[u] = min(Low[u] , DFN[v]);\n\t}\n\tif(Low[u] == DFN[u]) {\n\t\tCol[u] = inc(col) , W[col] += (u <= n) , ins[u] = 0;\n\t\twhile(Stack[top] != u) Col[Stack[top]] = col , W[col] += (Stack[top] <= n) , ins[Stack[top]] = 0 , dec(top);\n\t\tdec(top);\n\t}\n}\nvoid DP(int u) {\n\tBook[u] = 1 , Dp[u] = W[u];\n\tfor(auto v : E[u]) {\n\t\tif(!Book[v]) DP(v);\n\t\tDp[u] = max(Dp[u] , Dp[v] + W[u]);\n\t} Ans = max(Ans , Dp[u]);\n}\n\nint main() {\n\tn = read() , r = read() , c = read() , tot = n;\n\tRep(i , 1 , n) A[i].X[0] = read() , A[i].X[1] = read() , opt[i] = read() , A[i].id = i;\n\tRoot = Build(1 , n , 0);\n\tRep(i , 1 , n) {\n\t\tCnt = 0;\n\t\tif(opt[A[i].id] == 1) Get(Root , A[i].X[0] , A[i].X[0] , 1 , c);\n\t\telse if(opt[A[i].id] == 2) Get(Root , 1 , r , A[i].X[1] , A[i].X[1]);\n\t\telse Get(Root , A[i].X[0] - 1 , A[i].X[0] + 1 , A[i].X[1] - 1 , A[i].X[1] + 1);\n\t\tRep(j , 1 , Cnt) Add(A[i].id , P[j]);\n\t}\n\tRep(i , 1 , tot) if(!DFN[i]) Tarjan(i);\n\tRep(i , 1 , tot) for(auto v: F[i]) if(Col[i] != Col[v]) E[Col[i]].push_back(Col[v]) , inc(In[Col[v]]);\n\tRep(i , 1 , col) if(!In[i]) DP(i);\n\tprintf(\"%d\\n\" , Ans);\n\treturn 0;\n}\n```",
        "postTime": 1573354745,
        "uid": 47959,
        "name": "\u78b3\u516d\u7075",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5f88\u660e\u663e\u662fTarjan\u7f29\u70b9+DAG\u4e0aDP\uff0c\u4f46\u8fd9\u9898\u7684\u96be\u70b9\u5728\u4e8e\u4f18\u5316\u5efa\u8fb9\n\n\u5bf9\u4e8e\u524d40\u5206\uff0c\u8fd8\u662f\u6bd4\u8f83\u597d\u62ff\u7684\uff0c\u53ea\u8981n\u65b9\u5efa\u8fb9\uff0c\u8dd1\u4e00\u904dTarjan\uff0c\u5efa\u51faDAG\u5c31\u53ef\u4ee5\u4e86\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u5f88\u591a\u4eba\u90fd\u8bf4\u8981\u62d3\u6251\u6392\u5e8f\uff0c\u4f46\u6211\u8ba4\u4e3a\u76f4\u63a5\u5728DAG\u4e0a\u8dd1DP\u5c31\u53ef\u4ee5\u4e86\uff0c\u6392\u8fd9\u4e2a\u5e8f\u6709\u4ec0\u4e48\u610f\u4e49\u5462\uff1f\n\n\u90a3\u4e48\u5728DAG\u4e0aDP\u65f6\uff0c\u4e3a\u4e86\u8fbe\u5230O(n)\u7ea7\u522b\uff0c\u9700\u8981\u6ce8\u610f\u526a\u679d\u3002\u8bbedp[x]\u8868\u793a\u4ecex\u51fa\u53d1\u7684\u8def\u5f84\u4e2d\uff0c\u70b9\u6743\u548c\u6700\u5927\u7684\u8def\u5f84\u7684\u70b9\u6743\u548c\uff0c\u90a3\u4e48\u53ef\u4ee5\u5217\u51faDP\u65b9\u7a0b\uff1adp[x]=max{w[x]+dp[y]}\uff08x\u6709\u4e00\u6761\u8fb9\u76f4\u63a5\u5230y\uff09\uff0c\u5176\u4e2dw[x]\u8868\u793a\u7f29\u70b9\u540e\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u6240\u5305\u542b\u7684\u539f\u70b9\u6570\u91cf\u3002\u4e0d\u96be\u60f3\u5230\uff0c\u5982\u679cdp[x]>w[x]\uff0c\u8bf4\u660ex\u70b9\u5df2\u7ecf\u5b8c\u6210\u4e86DP\uff0c\u6ca1\u5fc5\u8981\u91cd\u590d\u8fdb\u884c\uff0c\u56e0\u6b64DP\u8fc7\u7a0b\u4e2d\u641c\u7d22\u5230\u4e00\u4e2a\u8fd9\u6837\u7684\u70b9\u65f6\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\n\n\u90a3\u4e48\u8981AC\u8fd9\u9898\uff0c\u9700\u8981\u4f18\u5316\u5efa\u8fb9\u3002\u8bd5\u60f3\uff0c\u6839\u636e\u66b4\u529b\u5efa\u8fb9\u6cd5\uff0c\u5047\u5982\u6240\u6709\u7684\u95e8\u90fd\u5728\u540c\u4e00\u884c\uff0c\u4e14\u90fd\u662f\u201c\u6a2a\u5929\u95e8\u201d\uff0c\u90a3\u4e48\u5c31\u4f1a\u5efa\u51faN\u00b2\u6761\u8fb9\u6765\uff0c\u4f46\u5176\u5b9e\u7f29\u70b9\u540e\u8fd9\u4e9b\u8fb9\u90fd\u6ca1\u6709\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8fb9\u80af\u5b9a\u6709\u5f88\u591a\u662f\u5197\u4f59\u7684\n\n\u8003\u8651\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6784\u6210\uff0c\u4e0d\u96be\u60f3\u5230\uff0c\u5982\u679c\u8ba9\u6240\u6709\u53ef\u4ee5\u4e92\u76f8\u8054\u901a\u7684\u70b9\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u800c\u4e0d\u662f\u4e24\u4e24\u8fde\u8fb9\uff0c\u5b83\u4eec\u6700\u7ec8\u8fd8\u662f\u4f1a\u5f62\u6210\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u4e14\u8fb9\u6570\u5927\u5927\u51cf\u5c11\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u540c\u4e00\u884c\u7684\u201c\u6a2a\u5929\u95e8\u201d\u5efa\u6210\u4e00\u4e2a\u73af\uff0c\u540c\u4e00\u5217\u7684\u201c\u7eb5\u5bf0\u95e8\u201d\u5efa\u6210\u4e00\u4e2a\u73af\uff0c\u81f3\u4e8e\u201c\u81ea\u7531\u95e8\u201d\uff0c\u66b4\u529b\u5efa\u8fb9\u672a\u5c1d\u4e0d\u53ef\u3002\u5efa\u8fb9\u8fc7\u7a0b\u7ec6\u8282\u9887\u591a\uff0c\u9700\u8981\u6ce8\u610f\u4e0d\u80fd\u5efa\u4e86\u73af\u5c31\u5ffd\u7565\u4e86\u53ef\u4ee5\u5230\u8fbe\u7684\u5176\u5b83\u95e8\u3002\u5c06\u4e24\u79cd\u95e8\u5206\u5f00\u6765\u5efa\u8fb9\uff0c\u5efa\u8fb9\u524d\u8fdb\u884c\u6392\u5e8f\uff0c\u662f\u4e00\u79cd\u6bd4\u8f83\u597d\u7684\u5904\u7406\u529e\u6cd5\uff0c\u4e5f\u4e0d\u6392\u9664\u6709\u66f4\u5999\u7684\u65b9\u6cd5\n\n```cpp\n#include<bits/stdc++.h>\n#define pii pair<int,int>\nusing namespace std;\n\nint read()\n{\n\tint x=0;char c=getchar();\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n\treturn x;\n}\n\nconst int N=100010;\nstruct Edge{int from,to,next;} e[100*N];\nint h[N],sum=0;\nstruct DOOR{int x,y,ty,id;} door[N];\nint pre[N],low[N],dfn=0;\nint scc[N],w[N],tot=0;\nstack<int> sta;\nint deg[N],dp[N];\nmap<pii,int> H;\nmap<pii,bool> mat;\nmap<pii,bool>::iterator it;\n\nbool cmp1(const DOOR &a,const DOOR &b)\n{\n\tif(a.x!=b.x) return a.x<b.x;\n\tif(a.ty==1) return 1;\n\tif(b.ty==1) return 0;\n\treturn a.y<b.y;\n}\n\nbool cmp2(const DOOR &a,const DOOR &b)\n{\n\tif(a.y!=b.y) return a.y<b.y;\n\tif(a.ty==2) return 1;\n\tif(b.ty==2) return 0;\n\treturn a.x<b.x;\n}\n\nvoid add_edge(int u,int v)\n{\n\tsum++;\n\te[sum].from=u;\n\te[sum].to=v;\n\te[sum].next=h[u];\n\th[u]=sum;\n}\n\nvoid Tarjan(int u)\n{\n\tpre[u]=low[u]=++dfn;\n\tsta.push(u);\n\tfor(int tmp=h[u];tmp;tmp=e[tmp].next)\n\t\tif(!pre[e[tmp].to])\n\t\t{\n\t\t\tTarjan(e[tmp].to);\n\t\t\tlow[u]=min(low[u],low[e[tmp].to]);\n\t\t}\n\t\telse if(!scc[e[tmp].to]) low[u]=min(low[u],pre[e[tmp].to]);\n\tif(pre[u]==low[u])\n\t{\n\t\tint o;\n\t\ttot++;\n\t\tdo{\n\t\t\to=sta.top();\n\t\t\tscc[o]=tot;\n\t\t\tw[tot]++;\n\t\t\tsta.pop();\n\t\t}while(u!=o);\n\t}\n}\n\nvoid dfs(int u,int fa)\n{\n\tif(dp[u]>w[u]) return;\n\tdp[u]=w[u];\n\tfor(int tmp=h[u];tmp;tmp=e[tmp].next)\n\t{\n\t\tint v=e[tmp].to;\n\t\tif(v==fa) continue;\n\t\tdfs(v,u);\n\t\tdp[u]=max(dp[u],dp[v]+w[u]);\n\t}\n}\n\nint main()\n{\n\tint n=read(),r=read(),c=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tdoor[i].x=read();\n\t\tdoor[i].y=read();\n\t\tdoor[i].ty=read();\n\t\tdoor[i].id=i;\n\t\tH[pii(door[i].x,door[i].y)]=i;\n\t}\n\tsort(door+1,door+1+n,cmp1);\n\tint first=1,last=1;\n\tfor(int i=1;i<=n;i++)\n\t\tif(door[i].x!=door[i+1].x)\n\t\t{\n\t\t\tif(last!=first) add_edge(door[last].id,door[first].id);\n\t\t\tlast=first=i+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(door[last].ty==1) add_edge(door[last].id,door[i+1].id);\n\t\t\tif(door[i+1].ty==1) last=i+1;\n\t\t\tif(door[first].ty!=1) last=first=i+1;\n\t\t}\n\tsort(door+1,door+1+n,cmp2);\n\tfirst=1,last=1;\n\tfor(int i=1;i<=n;i++)\n\t\tif(door[i].y!=door[i+1].y)\n\t\t{\n\t\t\tif(last!=first) add_edge(door[last].id,door[first].id);\n\t\t\tlast=first=i+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(door[last].ty==2) add_edge(door[last].id,door[i+1].id);\n\t\t\tif(door[i+1].ty==2) last=i+1;\n\t\t\tif(door[first].ty!=2) last=first=i+1;\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(door[i].ty==3)\n\t\t{\n\t\t\tint x=door[i].x,y=door[i].y;\n\t\t\tif(H.count(pii(x-1,y-1))) add_edge(door[i].id,H[pii(x-1,y-1)]);\n\t\t\tif(H.count(pii(x-1,y))) add_edge(door[i].id,H[pii(x-1,y)]);\n\t\t\tif(H.count(pii(x-1,y+1))) add_edge(door[i].id,H[pii(x-1,y+1)]);\n\t\t\tif(H.count(pii(x,y-1))) add_edge(door[i].id,H[pii(x,y-1)]);\n\t\t\tif(H.count(pii(x,y+1))) add_edge(door[i].id,H[pii(x,y+1)]);\n\t\t\tif(H.count(pii(x+1,y-1))) add_edge(door[i].id,H[pii(x+1,y-1)]);\n\t\t\tif(H.count(pii(x+1,y))) add_edge(door[i].id,H[pii(x+1,y)]);\n\t\t\tif(H.count(pii(x+1,y+1))) add_edge(door[i].id,H[pii(x+1,y+1)]);\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!pre[i]) Tarjan(i);\n\tfor(int i=1;i<=sum;i++)\n\t{\n\t\tint u=e[i].from,v=e[i].to;\n\t\tif(scc[u]!=scc[v]) mat[pii(scc[u],scc[v])]=1;\n\t}\n\tmemset(h,0,sizeof(h));sum=0;\n\tfor(it=mat.begin();it!=mat.end();it++)\n\t{\n\t\tadd_edge(it->first.first,it->first.second);\n\t\tdeg[it->first.second]++;\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=tot;i++)\n\t\tif(deg[i]==0)\n\t\t{\n\t\t\tdfs(i,0);\n\t\t\tans=max(ans,dp[i]);\n\t\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1528596992,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "## \u5206\u6790\n\u5148\u653e\u4e00\u5f20\u56fe\u4fbf\u4e8e\u7406\u89e3\n![](https://img2020.cnblogs.com/blog/1996139/202007/1996139-20200725192052969-1367869743.png)\n\n\u8fd9\u4e00\u9053\u9898\u5982\u679c\u66b4\u529b\u5efa\u56fe\u4f1a\u88ab\u5361\u6210$n^{2}$\n\n\u5b9e\u9645\u4e0a\uff0c\u5728\u6211\u4eec\u66b4\u529b\u5efa\u56fe\u7684\u65f6\u5019\uff0c\u6709\u5f88\u591a\u8fb9\u90fd\u662f\u91cd\u590d\u7684\n\n\u5047\u5982\u4e00\u884c\u5f53\u4e2d\u6709\u8bb8\u591a\u6a2a\u5929\u95e8\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u4e0d\u5fc5\u8981\u628a\u8fd9\u4e00\u884c\u5f53\u4e2d\u7684\u6240\u6709\u70b9\u548c\u6bcf\u4e00\u4e2a\u6a2a\u5929\u95e8\u90fd\u8fde\u4e0a\u4e00\u6761\u8fb9\n\n\u56e0\u4e3a\u6a2a\u5929\u95e8\u4e4b\u95f4\u662f\u76f8\u4e92\u8054\u901a\u7684\uff0c\u65e0\u8bba\u6211\u4eec\u8d70\u5230\u54ea\u4e00\u4e2a\u6a2a\u5929\u95e8\uff0c\u90fd\u53ef\u4ee5\u8d70\u5230\u540c\u4e00\u884c\u7684\u53e6\u4e00\u4e2a\u6a2a\u5929\u95e8\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u8fd9\u4e9b\u6a2a\u5929\u95e8\u8fde\u6210\u4e00\u4e2a\u73af\uff0c\u5728\u8fd9\u4e9b\u6a2a\u5929\u95e8\u4e2d\u9009\u53d6\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u4ee3\u8868\uff0c\u8fde\u5411\u540c\u4e00\u884c\u4e2d\u4e0d\u662f\u6a2a\u5929\u95e8\u7684\u70b9\n\n\u5bf9\u4e8e\u7eb5\u5bf0\u95e8\u4e5f\u662f\u5982\u6b64\n\n\u5269\u4e0b\u7684\u4efb\u610f\u95e8\u76f4\u63a5\u66b4\u529b\u626b\u4e00\u904d\u5efa\u8fb9\u5373\u53ef\n## \u4ee3\u7801\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=2e6+5;\nint head[maxn],tot=1;\ninline int read(){\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9'){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9'){\n        x=(x<<1)+(x<<3)+(ch^48);\n        ch=getchar();\n    }\n    return x*f;\n}\nint dx[10]={0,0,1,-1,1,1,-1,-1};\nint dy[10]={1,-1,0,0,-1,1,-1,1};\nstruct asd{\n    int to,next;\n}b[maxn];\nvoid ad(int aa,int bb){\n    b[tot].to=bb;\n    b[tot].next=head[aa];\n    head[aa]=tot++;\n}\nstruct jll{\n    int jlx,jly,jlb,id;\n}jl[maxn];\nint n,r,c,nx,ny,nb,rd[maxn];\nint dfn[maxn],low[maxn],dfnc,sta[maxn],top,js,shuyu[maxn],siz[maxn];\nvoid tar(int xx){\n    dfn[xx]=low[xx]=++dfnc;\n    sta[++top]=xx;\n    for(int i=head[xx];i!=-1;i=b[i].next){\n        int u=b[i].to;\n        if(!dfn[u]){\n            tar(u);\n            low[xx]=min(low[u],low[xx]);\n        } else if(!shuyu[u]){\n            low[xx]=min(low[xx],dfn[u]);\n        }\n    }\n    if(dfn[xx]==low[xx]){\n        js++;\n        while(1){\n            int now=sta[top--];\n            shuyu[now]=js;\n            siz[js]++;\n            if(now==xx) break;\n        }\n    }\n}\nmap<pair<int,int>,bool> mp;\nstruct asd2{\n    int to,next,val;\n}b2[maxn];\nint h2[maxn],t2=1;\nvoid ad2(int aa,int bb,int cc){\n    b2[t2].to=bb;\n    b2[t2].next=h2[aa];\n    b2[t2].val=cc;\n    h2[aa]=t2++;\n}\nint f[maxn],ans=0;\nvoid tp(){\n    queue<int> q;\n    q.push(0);\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        for(int i=h2[now];i!=-1;i=b2[i].next){\n            int u=b2[i].to;\n            rd[u]--;\n            f[u]=max(f[u],f[now]+b2[i].val);\n            if(rd[u]==0) q.push(u);\n        }\n    }\n}\nbool cmplh(jll aa,jll bb){\n    if(aa.jlb==bb.jlb && aa.jlx==bb.jlx) return aa.jly<bb.jly;\n    if(aa.jlb==bb.jlb) return aa.jlx<bb.jlx;\n    return aa.jlb<bb.jlb;\n}\nbool cmpll(jll aa,jll bb){\n    if(aa.jlb==bb.jlb && aa.jly==bb.jly) return aa.jlx<bb.jlx;\n    if(aa.jlb==bb.jlb) return aa.jly<bb.jly;\n    if(aa.jlb==2) return 1;\n    return 0;\n}\nbool cmpry(jll aa,jll bb){\n    return aa.jlb>bb.jlb;\n}\nmap<pair<int,int>,int> mpp;\nint htm[maxn],ztm[maxn];\nint main(){\n    memset(head,-1,sizeof(head));\n    memset(h2,-1,sizeof(h2));\n    n=read(),r=read(),c=read();\n    for(int i=1;i<=n;i++){\n        jl[i].jlx=read();\n        jl[i].jly=read();\n        jl[i].jlb=read();\n        jl[i].id=i;\n        mpp[make_pair(jl[i].jlx,jl[i].jly)]=jl[i].id;\n    }\n    sort(jl+1,jl+1+n,cmplh);\n    for(int i=1;i<=n;i++){\n        if(jl[i].jlb!=1) break;\n        int ks=jl[i].id;\n        while(jl[i].jlx==jl[i+1].jlx && jl[i+1].jlb==1){\n            ad(jl[i].id,jl[i+1].id);\n            i++;\n        }\n        ad(jl[i].id,ks);\n        htm[jl[i].jlx]=jl[i].id;\n    }\n    sort(jl+1,jl+1+n,cmpll);\n    for(int i=1;i<=n;i++){\n        if(jl[i].jlb!=2) break;\n        int ks=jl[i].id;\n        while(jl[i].jly==jl[i+1].jly && jl[i+1].jlb==2){\n            ad(jl[i].id,jl[i+1].id);\n            i++;\n        }\n        ad(jl[i].id,ks);\n        ztm[jl[i].jly]=jl[i].id;\n    }\n    sort(jl+1,jl+1+n,cmpry);\n    for(int i=1;i<=n;i++){\n        if(jl[i].jlb!=3) break;\n        int nx=jl[i].jlx,ny=jl[i].jly;\n        for(int j=0;j<8;j++){\n            int mx=nx+dx[j];\n            int my=ny+dy[j];\n            if(mpp[make_pair(mx,my)]){\n                ad(jl[i].id,mpp[make_pair(mx,my)]);\n            }\n        }\n    }\n    for(int i=1;i<=n;i++){\n        if(jl[i].jlb==1) continue;\n        int ks=jl[i].id;\n        if(htm[jl[i].jlx]!=0) ad(htm[jl[i].jlx],jl[i].id);\n    }\n    for(int i=1;i<=n;i++){\n        if(jl[i].jlb==2) continue;\n        int ks=jl[i].id;\n        if(ztm[jl[i].jly]!=0) ad(ztm[jl[i].jly],jl[i].id);\n    }\n    for(int i=1;i<=n;i++){\n        if(!dfn[i]) tar(i);\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=head[i];j!=-1;j=b[j].next){\n            int u=b[j].to;\n            if(shuyu[i]!=shuyu[u] && mp[make_pair(shuyu[i],shuyu[u])]==0){\n                ad2(shuyu[i],shuyu[u],siz[shuyu[u]]);\n                rd[shuyu[u]]++;\n                mp[make_pair(shuyu[i],shuyu[u])]=1;\n            }\n        }\n    }\n    for(int i=1;i<=js;i++){\n        if(rd[i]==0){\n            ad2(0,i,siz[i]);\n            rd[i]++;\n        }\n    }\n    tp();\n    for(int i=1;i<=js;i++){\n        ans=max(ans,f[i]);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1595677172,
        "uid": 316322,
        "name": "hzoi_liuchang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "\u9898\u610f\u7b80\u660e \u770b\u5b8c\u9898\u76ee\u5fc3\u4e2d\u7a83\u559c\u4ee5\u4e3a\u662f\u7f29\u70b9\u6c34\u9898\n\n\u5927\u4f53\u7684\u601d\u8def\u662f \u5efa\u8fb9 \u7f29\u70b9 \u4e4b\u540e topsort\n\n\u4e4b\u540e\u770b\u5b8c\u6570\u636e\u8303\u56f4  ~~~~ \n\n\u4e3a\u4ec0\u4e48 R C \u8303\u56f4\u662f1000000 \u554a\n\n\u4e3a\u4ec0\u4e48 N \u7684\u8303\u56f4\u662f 100000 \u554a\n\n\u8fd9\u4e2a\u6570\u636e\u5f88\u5927 \n\n\u5efa\u8fb9\u662f\u6700\u5927\u7684\u95ee\u9898 \n\n\u56e0\u4e3a N^2 \u7684\u679a\u4e3e\u662f\u6211\u4eec\u65e0\u6cd5\u627f\u53d7\u7684\n\n\u80af\u5b9a\u9700\u8981\u4f18\u5316 \n\n\u849f\u84bb\u5c31\u60f3\u5230\u4e00\u79cd\u65b9\u6cd5 \n\n\u5f00\u4e24\u4e2a vector xi \u548c yi\n\nxi [ x ]  \u5c31\u8868\u793a \u6a2a\u5750\u6807\u4e3ax\u7684\u6240\u6709\u70b9\u4e0b\u6807\n\nyi [ y ]  \u5c31\u8868\u793a \u7eb5\u5750\u6807\u4e3ay\u7684\u6240\u6709\u70b9\u4e0b\u6807\n\n\u90a3\u4e48\u5efa\u8fb9\u5c31\u53d8\u5f97\u7b80\u5355 \n\n\u5047\u5982\u6211\u5728\u5750\u6807\u4e3a x y \u7684\u5730\u65b9\u6709\u6a2a\u5929\u95e8 \n\n\u6211\u53ea\u9700\u8981\u628a xi [ x ] \u91cc\u9762\u7684\u6240\u6709\u7684\u70b9 \u5efa\u4e00\u6761\u8fb9 \n\n\u7eb5\u5929\u95e8\u4ee5\u6b64\u7c7b\u63a8 \u4e0d\u4e88\u4ee5\u4f8b\u5b50 \n\n\u4efb\u610f\u95e8\u7684\u505a\u6cd5\u5c31\u4e0e\u9898\u89e3\u533a\u91cc\u6240\u6709\u505a\u6cd5\u90fd\u4e0d\u76f8\u540c \n\n\u849f\u84bb\u7684\u65b9\u6cd5\u662f \u679a\u4e3e \u6a2a\u5750\u6807\u4e3ax x-1 x+1 \u7684\u6240\u6709\u70b9 \n\n\u518d\u5224\u65ad\u7eb5\u5750\u6807\u662f\u5426\u80fd\u88ab\u4efb\u610f\u95e8\u6240\u8fbe\u5230 \n\n\u8fd9\u4e2a\u65b9\u6cd5\u6709\u70b9\u8822 \u4f46\u662f\u53ef\u4ee5\u514d\u53bb\u4e8c\u5206\u548c\u6392\u5e8f\u7684\u4ee3\u7801\u91cf \n\n\u6709\u4e9b\u5927\u4f6c\u7528 map \u4e4b\u540e\u88ab\u5361 MLE \n\n\u5176\u5b9e\u5173\u4e8e\u4efb\u610f\u95e8\u7684\u5efa\u8fb9\u89e3\u6cd5 \n\n\u6700\u597d\u7684\u5e94\u8be5\u662f\u5343\u5e74\u4e4b\u72d0\u5927\u4f6c\u7684hash \u53ef\u4ee5\u5de6\u8f6c\u89c2\u6469 \n\ntarjan \u7c98\u4e00\u904d\u677f\u5b50 \u62d3\u6251\u6392\u5e8f\u524d\u7684\u91cd\u5904\u7406\u8fb9\u4e0d\u8981\u51fa\u9505\n\n\u57fa\u672c\u4e0a\u4e5f\u5c31\u6ca1\u4ec0\u4e48\u95ee\u9898\u4e86 \n\n\u8fd8\u6709\u7591\u95ee\u7684\u5728\u5176\u4ed6\u5927\u4f6c\u7684\u9898\u89e3\u4e2d\u5df2\u7ecf\u5341\u5206\u8be6\u7ec6 \u8fd9\u91cc\u5c31\u4e0d\u518d\u732e\u4e11\n\n[\u4ee3\u7801](https://www.luogu.org/paste/g2ikdk1a) \u8981\u6284\u7684\u8bf7\u81ea\u4fbf\n\n~~\u7a9d\u7adf\u71361h1A\u7701\u9009\u9898 \u86e4\u86e4\u86e4~~\n",
        "postTime": 1569589464,
        "uid": 100114,
        "name": "hater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e4d\u4e00\u770b\u8c8c\u4f3c\u4e0d\u96be\uff0c\u4e0d\u5c31\u662f\u5efa\u56fe-->\u627e\u5f3a\u8fde\u901a\u5206\u91cf-->\u5efa\u51fa$DAG$-->$DP$ \u561b...\u505a\u6cd5\u57fa\u672c\u4e0a\u548c$P3387$ \u6a21\u677f  \u7f29\u70b9 \u4e00\u6a21\u4e00\u6837\uff01\n\n\u4f46\u662f\u5b83\u6ca1\u6709\u8bf4\u6709\u591a\u5c11\u6761\u8fb9\u554a\uff1f\u8bd5\u60f3\u4e00\u4e0b\uff0c\u5047\u8bbe\u6240\u6709\u70b9\u90fd\u5728\u540c\u4e00\u884c\uff0c\u6240\u6709$T$\u90fd\u4e3a$1$\uff0c\u90a3\u4e48\u5c31\u4e00\u5171\u6709$n*(n-1)$\u6761\u8fb9\uff01$(n==10^5)$\n\n\u7a0d\u4f5c\u601d\u8003\uff0c\u6211\u5f00\u59cb**\u7b2c\u4e00\u6b21\u5c1d\u8bd5**\uff1a\n\n- \u5185\u5fc3$OS$\uff1a\u867d\u7136\u8bf4\u7406\u8bba\u4e0a\u8fb9\u6570\u5f88\u591a\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u80af\u5b9a\u6ca1\u6709\u90a3\u4e48\u591a\uff0c\u4e0d\u7136\u5185\u5b58\u4e0d\u591f\u3002\n\n  \u6240\u4ee5\u8003\u8651\u7528$STL$\u4e2d\u7684$vector$\u6765\u50a8\u5b58\u6bcf\u4e2a\u70b9\u51fa\u53d1\u80fd\u591f\u5230\u8fbe\u7684\u6240\u6709\u70b9\uff0c\u7136\u540e\u5957\u7528$P3387$\u7684\u6a21\u677f\n\n- \u5f97\u5230$60$\u5206\uff0c\u5269\u4e0b$4$\u4e2a\u70b9$TLE$\n\n\u4e8e\u662f\u6211\u5f00\u59cb**\u7b2c\u4e8c\u6b21\u5c1d\u8bd5**(\u5b9e\u9645\u4e0a\u662f\u5bf9\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u7684\u6539\u8fdb)\n\n- \u6211\u628a\u56fe\u4e2d\u7684\u8fb9\u6539\u7528\u90bb\u63a5\u8868\u50a8\u5b58\uff0c\u90bb\u63a5\u8868\u7684\u5927\u5c0f\u5f00\u4e3a$maxN*x$\uff0c\u601d\u8def\u662f\u5728\u4e0d$TLE$\u7684\u524d\u63d0\u4e0b\u5c3d\u53ef\u80fd\u5f00\u66f4\u5927\u7684\u90bb\u63a5\u8868\u3002\n- \u5f97\u5230$80$\u5206\uff0c\u5269\u4e0b$2$\u4e2a\u70b9$TLE$\n\n\u7136\u540e\uff0c\u7ee7\u7eed\u601d\u8003\uff0c\u5f00\u59cb**\u7b2c\u4e09\u6b21\u5c1d\u8bd5**\uff1a\n\n\u60f3\u4e00\u60f3\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48$TLE$\uff1f\u8fb9\u6570\u592a\u591a\uff01\u4e3a\u4ec0\u4e48$MLE$\uff1f\u8fb9\u6570\u592a\u591a\uff01\n\n\u5047\u8bbe$1$\u5230$k$\u5904\u4e8e\u540c\u4e00\u884c\uff0c\u4e14\u5b83\u4eec\u7684$T$\u90fd\u4e3a$1$\uff0c\u90a3\u4e48\u6211\u4eec\u5efa\u51fa\u6765\u7684\u8fb9\u6570\u5c31\u6709$k*(k-1)$\u6761\u3002\u6211\u4eec\u4f7f\u6bcf\u4e2a\u70b9\u72ec\u7acb\u7684\u5230\u8fbe\u5176\u4ed6\u70b9\uff0c\u4ece\u800c\u8fb9\u6570\u8fc7\u591a\u3002\n\n\u662f\u4e0d\u662f\u5f88\u50cf\u7f51\u72b6\u62d3\u6251\u7ed3\u6784\uff1f\n\n![](https://img.grouplus.com/admin-files/23410/ueditor_image/zc_20171007125632438)\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u8054\u60f3\u5230\u7528\u661f\u578b\u62d3\u6251\u7ed3\u6784\u53bb\u4f18\u5316\u5b83\u3002\n\n![](https://hexingxing.cn/wp-content/uploads/2017/10/star.gif)\n\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u90fd\u5efa\u7acb\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u4e2d\u8f6c\u7ad9\u7684\u865a\u62df\u70b9$x$\uff0c\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u8fd9\u4e00\u884c(\u5217)\u91cc\u9762\u7684\u6240\u6709\u70b9\uff0c\u800c\u5f53\u6211\u4eec\u9700\u8981\u4f7f\u70b9$i$\u80fd\u591f\u5230\u8fbe\u5b83\u6240\u5728\u884c(\u5217)\u91cc\u9762\u7684\u6240\u6709\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5efa\u4e00\u6761$i$-->$x$\u7684\u8fb9\uff0c\u7136\u540e\u901a\u8fc7$x$\u4e2d\u8f6c\u5411\u5176\u5b83\u8282\u70b9\u3002\n\n$n = N + r + c$(\u5b9e\u9645\u7528\u5230\u7684\u70b9\u6570 $=$ \u771f\u5b9e\u70b9\u6570 $+$ \u865a\u62df\u70b9\u6570)\n\n\u4f46\u662f\uff0c\u6ce8\u610f\u6570\u636e\u8303\u56f4\uff1a$R<=10^6,C<=10^6$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u90fd\u5efa\u7acb\u865a\u62df\u8282\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5efa\u51fa\u6765\u7684\u56fe\u4e2d\u7684\u70b9\u6570\u5c06\u4f1a\u975e\u5e38\u591a\uff0c\u90a3\u4e48$1.$\u53ef\u80fd$MLE;2.$\u53ef\u80fd$TLE$(\u7b2c\u4e00\u6b21\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\u7684\u65f6\u5019\uff0c\u6211\u4fbf\u5efa\u7acb\u4e86$r+c$\u4e2a\u865a\u62df\u8282\u70b9\uff0c\u5bfc\u81f4\u4e86$MLE+TLE$)\n\n\u6240\u4ee5\u8003\u8651\u4f18\u5316\u3002\n\n\u56e0\u4e3a$N<=10^5$,\u6240\u4ee5\u8bf4\uff0c\u6709\u7528\u7684\u884c\u6700\u591a\u53ea\u6709$10^5$\u884c\uff0c\u6709\u7528\u7684\u5217\u6700\u591a\u4e5f\u53ea\u6709$10^5$\u5217\uff01\n\n$n = N + r + c - cut$($cut$\u8bb0\u5f55\u65e0\u7528\u7684\u884c\u548c\u5217\u7684\u603b\u6570\uff0c\u4f18\u5316\u540e\uff0c$n$\u6700\u591a\u53ea\u6709$3*10^5$)\n\n\u7136\u540e\u6765\u8ba1\u7b97\u8fd9\u79cd\u5199\u6cd5\u6700\u591a\u6709\u591a\u5c11\u6761\u8fb9\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u771f\u5b9e\u70b9$i$\uff0c\u6211\u4eec\u9700\u8981\u5efa\u7acb\u4e00\u6761\u5b83\u6240\u5728\u7684\u884c\u548c\u5217\u7684\u865a\u62df\u70b9\u5230\u5b83\u7684\u8fb9\u3002 \u8fb9\u6570\uff1a$n*2$\n\n\u540c\u65f6\uff0c$T ==  1/2$ \u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u4ece \u5b83\u5f15\u4e00\u6761\u5230\u5b83\u6240\u5728\u884c(\u5217)\u7684\u865a\u62df\u70b9\u7684\u8fb9 \uff1b $T == 3$ \u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u5f15$8$\u6761\u8fb9\n\n\u6240\u4ee5\uff0c\u8fb9\u6570$<=n * 10$ \uff0c\u662f\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\n\n$code$\n```cpp\n#include<map>\n#include<queue>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define R register int\nusing namespace std ;\nconst int maxN = 300005 ;\nint n,N,r,c,T[maxN],X[maxN],Y[maxN],ans ;\nint h[maxN],l[maxN] ;\nint xx[8] = {-1,-1,-1, 0, 0, 1 ,1, 1} ;\nint yy[8] = {-1, 0, 1,-1, 1,-1, 0, 1} ;\nmap<pair<int,int>,int > mp ;\nstruct EDGE{\n\tint head[maxN],cnt ;\n\tstruct edge{\n\t\tint to,nex ;\n\t}e[maxN*10];\n\tinline void add(int u,int v){\n\t\te[++cnt].to = v , e[cnt].nex = head[u] , head[u] = cnt ;\n\t}\n}G1,G2,E ;\nint color[maxN],cor_val[maxN],cor_num ;\n\ntemplate<typename T>inline void read(T &s){\n\ts = 0 ;char ch ; int f = 1 ;\n\tdo{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n\tdo{s=s*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n\ts *= f;\n}\n\nstruct Kosaraju{\n\tint vis[maxN],d[maxN],p ;\n\tvoid dfsONE(int u){\n\t\tvis[u] = true ;\n\t\tfor(R i = G1.head[u] ; i ; i = G1.e[i].nex){\n\t\t\tint v = G1.e[i].to ;\n\t\t\tif(!vis[v]) dfsONE(v) ;\n\t\t}\n\t\td[++p] = u ;\n\t} \n\tvoid dfsTWO(int u){\n\t\tcolor[u] = cor_num ;\n\t\tif(u <= N) cor_val[cor_num] += 1 ;\n\t\tfor(R i = G2.head[u] ; i ; i = G2.e[i].nex){\n\t\t\tint v = G2.e[i].to ;\n\t\t\tif(!color[v]) dfsTWO(v) ;\n\t\t}\n\t}\n\tvoid kosaraju(){\n\t\tfor(R i = 1 ; i <= n ; ++i)\n\t\tif(!vis[i]) dfsONE(i) ;\n\t\tfor(R i = n ; i >= 1 ; --i)\n\t\tif(!color[d[i]]){\n\t\t\tcor_num ++ ;\n\t\t\tdfsTWO(d[i]) ;\n\t\t}\n\t}\n}K;\n\nint dp[maxN],f[maxN],in[maxN] ;\nqueue<int> Q ;\nvoid DAGdp(){\n\tfor(R i = 1 ; i <= cor_num ; ++i)\n\tif(!in[i]){\n\t\tQ.push(i) ;\n\t\tdp[i] = cor_val[i] ;\n\t}\n\twhile(!Q.empty()){\n\t\tint u = Q.front() ; Q.pop() ;\n\t\tfor(R i = E.head[u] ; i ; i = E.e[i].nex){\n\t\t\tint v = E.e[i].to ;\n\t\t\tin[v] -- ;\n\t\t\tdp[v] = max(dp[v],dp[u] + cor_val[v]) ;\n\t\t\tif(!in[v]) Q.push(v) ;\n\t\t}\n\t}\n}\n\nvoid solve(){\n\tK.kosaraju() ;\n\tfor(R i = 1 ; i <= n ; ++i)\n\t\tfor(R j = G1.head[i] ; j ; j = G1.e[j].nex){\n\t\t\tint v = G1.e[j].to ;\n\t\t\tif(color[i] != color[v]) {\n\t\t\t\tE.add(color[i],color[v]) ;\n\t\t\t\tin[color[v]]++ ;\n\t\t\t}\n\t\t}\n\tDAGdp() ;\n\tfor(R i = 1 ; i <= cor_num ; ++i)\n\t\tans = max(ans,dp[i]) ;\n\tprintf(\"%d\",ans) ;\n}\n\nint nocut[maxN*10],cut,max_h ;\n//\u6ca1\u6709\u70b9\u7684\u884c\u6216\u5217\u9700\u8981\u88abcut\u6389 \nvoid init(){\n\tread(N); read(r); read(c) ;\n\tcut = r + c ;//\u5047\u5b9a\u6240\u6709\u7684\u884c\u548c\u5217\u90fd\u9700\u8981\u88abcut \n\tfor(R i = 1 ; i <= N ; ++i){\n\t\tread(X[i]) ; read(Y[i]) ; read(T[i]) ;\n\t\tif(!nocut[X[i]]) cut-- ;//\u5f53\"\u884c\"\u6216\u8005\"\u5217\"\u7b2c\u4e00\u6b21\u88ab\u4f7f\u7528\u7684\u65f6\u5019 \n\t\tif(!nocut[r+Y[i]]) cut-- ;//cut--\uff0c\u8bf4\u660e\u5b83\u662f\u6709\u7528\u7684\"\u884c\"\u6216\u8005\"\u5217\"\n\t\tnocut[X[i]] = nocut[r+Y[i]] = true ;\n\t\tmp[make_pair(X[i],Y[i])] = i ;//\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5750\u6807 \n\t}\n\tn = N + r + c - cut ;//\u5b9e\u9645\u7528\u5230\u7684\u70b9\u6570 = \u771f\u5b9e\u70b9\u6570 + \u865a\u62df\u70b9\u6570 \n\tfor(R i = 1,j = 1 ; i <= r ; ++i)//\u7b2ci\u884c,\u5728\u5220\u53bb\u4e86\u65e0\u7528\u7684\u884c\u4e4b\u540e\u4e3a\u7b2ch[i]\u884c \n\tif(nocut[i]){\n\t\th[i] = j ;j++ ;\n\t\tmax_h = max(max_h,j - 1) ;\n\t}\n\tfor(R i = 1,j = 1 ; i <= c ; ++i)//\u7b2ci\u5217,\u5728\u5220\u53bb\u4e86\u65e0\u7528\u7684\u5217\u4e4b\u540e\u4e3a\u7b2cl[i]\u5217 \n\tif(nocut[r + i]){\n\t\tl[i] = j ; j++ ;\n\t}\n\tfor(R i = 1 ; i <= N ; ++i){\n\t\tG1.add(N + h[X[i]],i) ;//\u6bcf\u4e00\u884c\u7684\u4ee3\u8868\u70b9\u53ef\u4ee5\u5230\u8fbe\u8fd9\u4e00\u884c\u6240\u6709\u70b9 \n\t\tG2.add(i,N + h[X[i]]) ;//\u539f\u56fe\u7684\u53cd\u56fe \n\t\tG1.add(N + max_h + l[Y[i]],i) ;//\u6bcf\u4e00\u5217\u7684\u4ee3\u8868\u70b9\u53ef\u4ee5\u5230\u8fbe\u8fd9\u4e00\u5217\u6240\u6709\u70b9\n\t\tG2.add(i,N + max_h + l[Y[i]]) ;\n\t\tif(T[i] == 1){\n\t\t\tG1.add(i,N + h[X[i]]) ;//\u5efa\u7acb\u70b9i\u5230X[i]\u8fd9\u4e00\u884c\u7684\u4ee3\u8868\u70b9\u4e4b\u95f4\u7684\u8fb9 \n\t\t\tG2.add(N + h[X[i]],i) ;//\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4e2d\u8f6c\u7ad9 \n\t\t}\n\t\telse if(T[i] == 2){\n\t\t\tG1.add(i,N + max_h + l[Y[i]]) ;//\u540c\u4e0a \n\t\t\tG2.add(N + max_h + l[Y[i]],i) ;\n\t\t}\n\t\telse if(T[i] == 3){//\u6734\u7d20\u627e\u5468\u56f48\u4e2a\u70b9 \n\t\t\tfor(R j = 0 ; j < 8 ; ++j){\n\t\t\t\tint nx = X[i] + xx[j] ;\n\t\t\t\tint ny = Y[i] + yy[j] ;\n\t\t\t\tif(mp[make_pair(nx,ny)]){\n\t\t\t\t\tint v = mp[make_pair(nx,ny)] ;\n\t\t\t\t\tG1.add(i,v) ;\n\t\t\t\t\tG2.add(v,i) ;\n\t\t\t\t}\t\t\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tinit() ;\n\tsolve() ;\n\treturn 0 ;\n}\n```\n",
        "postTime": 1566555167,
        "uid": 123152,
        "name": "lsfer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "\u6700\u76f4\u63a5\u7684\u60f3\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u76f4\u63a5\u5411\u5b83\u80fd\u5230\u8fbe\u7684\u70b9\u8fde\u8fb9\n\n\u7136\u540e\u53d1\u73b0 $n\\le 100000,R,C \\le 1000000$ \n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u5728\u540c\u4e00\u884c\u7684\u6bcf\u4e2a\u201d\u6a2a\u5929\u95e8\u201c\uff08\u4e0b\u79f0\u6a2a\u95e8\uff09\uff0c\u6216\u8005\u5728\u540c\u4e00\u5217\u7684\u6bcf\u4e2a\u201d \u7eb5\u5bf0\u95e8 \u201c\uff08\u4e0b\u79f0\u7eb5\u95e8\uff09\uff0c\u5b83\u4eec\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u90fd\u662f\u4e00\u6837\u7684\u3002\n\n\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u884c\u5efa\u4e00\u4e2a\u70b9\u4ee3\u8868\u672c\u884c\u7684\u6a2a\u95e8\uff0c\u5c06\u8be5\u70b9\u5411\u6240\u6709\u540c\u4e00\u884c\u7684\u70b9\u8fde\u8fb9\uff0c\u5bf9\u4e8e\u672c\u884c\u7684\u6240\u6709\u6a2a\u95e8\uff0c\u5efa\u4e00\u6761\u5230\u8be5\u70b9\u7684\u8fb9\uff0c\u7eb5\u95e8\u540c\u7406\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u95e8\uff0c\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u4e0e\u6700\u591a $8$ \u4e2a\u70b9\u76f8\u8fde\uff0c\u76f4\u63a5\u66b4\u529b\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f7f\u7528 map \u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u70b9\u7684\u7f16\u53f7\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u9996\u5148\u5c06\u5bf9\u5e94\u884c\u4ee3\u8868\u6a2a\u95e8\u548c\u5bf9\u5e94\u5217\u4ee3\u8868\u7eb5\u95e8\u7684\u70b9\u5411\u5176\u8fde\u8fb9\u3002\n\n\u7136\u540e\u5982\u679c\u8be5\u70b9\u662f\u4e00\u4e2a\u6a2a\u95e8/\u7eb5\u95e8\uff0c\u5411\u8be5\u70b9\u5bf9\u5e94\u884c/\u5217\u4ee3\u8868\u6a2a\u95e8/\u7eb5\u95e8\u7684\u70b9\u8fde\u8fb9\u3002\n\n\u5982\u679c\u662f\u4efb\u610f\u95e8\uff0c\u679a\u4e3e\u5468\u56f4\u7684 $8$ \u4e2a\u5750\u6807\uff0c\u5982\u679c\u8be5\u5750\u6807\u5bf9\u5e94\u4e00\u4e2a\u70b9\u5219\u5411\u5176\u8fde\u8fb9\u3002\n\n\u5efa\u5b8c\u8fb9\u4e4b\u540e\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5b83\u5185\u90e8\u6240\u6709\u7684\u70b9\u90fd\u53ef\u4ee5\u88ab\u7ecf\u8fc7\u3002\n\n\u8003\u8651\u7f29\u70b9\uff0c\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6743\u503c\u4e3a\u5176\u5185\u90e8**\u5b9e\u70b9**\u7684\u6570\u91cf\uff08\u56e0\u4e3a\u6211\u4eec\u5efa\u4e86\u4e00\u90e8\u5206\u865a\u70b9\uff08\u6a2a\u95e8/\u7eb5\u95e8\uff09\uff0c\u8fd9\u4e9b\u70b9\u4e0d\u5e94\u7b97\u5165\u7b54\u6848\uff0c\u6240\u4ee5\u5728\u7f29\u70b9\u65f6\u5e94\u5224\u65ad\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u865a\u70b9\u5c31\u4e0d\u52a0\u5165\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6743\u503c\uff09\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5728DAG\u4e0a\u62d3\u6251\u6392\u5e8f\u4e86\u3002\n\n\u4f46\u662f\u4ecd\u7136\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u53ea\u80fd\u4ece\u67d0\u4e2a\u5bab\u5ba4\uff08\u5b9e\u70b9\uff09\u8fdb\u5165\u3002\n\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u62d3\u6251\u6392\u5e8f\u65f6\uff0c\u4e0d\u80fd\u76f4\u63a5\u8fdb\u5165\u4e00\u4e2a\u865a\u70b9\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e0d\u5305\u542b\u4efb\u4f55\u5b9e\u70b9\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5176\u6743\u503c\u4e00\u5b9a\u4e3a $0$ \u3002\n\n\u6211\u4eec\u5728\u7edf\u8ba1\u5b8c\u5165\u5ea6\u65f6\uff0c\u6807\u8bb0\u6240\u6709**\u5165\u5ea6\u4e3a $0$ \u4e14\u6743\u503c\u4e3a $0$** \u7684\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u91cd\u65b0\u7edf\u8ba1\u5165\u5ea6\uff0c\u5728\u91cd\u65b0\u7edf\u8ba1\u65f6\u8df3\u8fc7\u6240\u6709\u88ab\u6807\u8bb0\u7684\u70b9\u5373\u53ef\u3002\n\n\u5728\u62d3\u6251\u6392\u5e8f\u6700\u5f00\u59cb\u5165\u961f\u7684\u65f6\u5019\u4e5f\u8981\u8fdb\u884c\u5224\u65ad\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<stack>\n#include<map>\nusing namespace std;\nconst int N=100003;\nconst int Maxn=2100003;\nconst int dx[8]={1,-1,0,0,1,1,-1,-1};\nconst int dy[8]={0,0,1,-1,1,-1,1,-1};\nint n,m,r,c;\nstruct Node{\n\tint x,y,k;\n}p[N];\nint cnt;\nint head[Maxn];\nstruct Edge{\n\tint nxt,from,to;\n}e[N*10];\nmap<pair<int,int>,int> poi;\nint idx,num;\nint dfn[Maxn],low[Maxn],scc[Maxn],w[Maxn],dp[Maxn],in[Maxn];\nstack<int> s;\nbool v[Maxn];\nvoid add(int u,int v)\n{\n\te[++cnt].nxt=head[u];\n\te[cnt].from=u;\n\te[cnt].to=v;\n\thead[u]=cnt;\n}\nvoid build(int id,int x,int y,int k)\n{\n\tadd(m+x,id);\n\tadd(m+r+y,id);\n\tif(k==1) add(id,m+x);\n\telse if(k==2) add(id,m+r+y);\n\telse\n\t{\n\t\tfor(int i=0;i<8;i++)\n\t\t{\n\t\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\t\tif(poi.find(make_pair(xx,yy))==poi.end()) continue;\n\t\t\tint to=poi[make_pair(xx,yy)];\n\t\t\tadd(id,to);\n\t\t}\n\t}\n}\nvoid Init()\n{\n\tscanf(\"%d%d%d\",&m,&r,&c);\n\tn=m+r+c;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&p[i].x,&p[i].y,&p[i].k);\n\t\tpoi[make_pair(p[i].x,p[i].y)]=i;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tbuild(i,p[i].x,p[i].y,p[i].k);\n}\nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=++idx;\n\ts.push(x);\n\tv[x]=true;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint to=e[i].to;\n\t\tif(!dfn[to])\n\t\t{\n\t\t\ttarjan(to);\n\t\t\tlow[x]=min(low[x],low[to]);\n\t\t}\n\t\telse if(v[to]) low[x]=min(low[x],dfn[to]);\n\t}\n\tif(dfn[x]==low[x])\n\t{\n\t\tnum++;\n\t\twhile(true)\n\t\t{\n\t\t\tint k=s.top();\n\t\t\ts.pop();\n\t\t\tv[k]=false;\n\t\t\tscc[k]=num;\n\t\t\tif(k<=m) w[num]++;\n\t\t\tif(k==x) break;\n\t\t}\n\t}\n}\nvoid rebuild()\n{\n\tmemset(head,0,sizeof(head));\n\tint t=cnt;cnt=0;\n\tfor(int i=1;i<=t;i++)\n\t\tif(scc[e[i].from]!=scc[e[i].to])\n\t\t{\n\t\t\tadd(scc[e[i].from],scc[e[i].to]);\n\t\t\tin[scc[e[i].to]]++;\n\t\t}\n\tfor(int i=1;i<=num;i++)\n\t\tif(in[i]==0&&w[i]==0) v[i]=true;\n\tmemset(in,0,sizeof(in));\n\tfor(int i=1;i<=num;i++)\n\t{\n\t\tif(v[i]) continue;\n\t\tfor(int j=head[i];j;j=e[j].nxt)\n\t\t\tin[e[j].to]++;\n\t}\n}\nvoid topsort()\n{\n\tqueue<int> q;\n\tfor(int i=1;i<=num;i++)\n\t\tif(in[i]==0&&w[i]) q.push(i),dp[i]=w[i];\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[x];i;i=e[i].nxt)\n\t\t{\n\t\t\tint to=e[i].to;\n\t\t\tdp[to]=max(dp[to],dp[x]+w[to]);\n\t\t\tin[to]--;\n\t\t\tif(in[to]==0) q.push(to);\n\t\t}\n\t}\n}\nint main()\n{\n\tInit();\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i]) tarjan(i);\n\trebuild();\n\ttopsort();\n\tint ans=0;\n\tfor(int i=1;i<=num;i++)\n\t\tans=max(ans,dp[i]);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1572951741,
        "uid": 91889,
        "name": "Dirt\u3001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "## \u8fd9\u662f\u4e00\u4e2a\u849f\u84bb\u7684\u9898\u89e3\n### \u6709\u5927\u4f6c\u8ba4\u4e3a\u8fd9\u9898\u5f88\u6c34\uff0c\u5728\u4e00\u4e2a\u849f\u84bb\u7684\u89d2\u5ea6\u770b\u8fd9\u9898\u8fd8\u662f\u6709\u4e9b\u96be\u7684\n\u5728\u672c\u4eba\u770b\u6765\uff0c\u8fd9\u9898\u8f83\u5927\u56f0\u96be\u662f\u5efa\u56fe  \n\u5206\u6790\u4e00\u4e0b\u9898\u76ee\uff0c\u7b97\u6cd5\u6807\u7b7e\u90fd\u770b\u8fc7\uff0c\u5e94\u8be5\u90fd\u77e5\u9053\u7528\u4ec0\u4e48\u7b97\u6cd5\u3002\u8fd9\u9898\u770b\u5230\u5750\u6807\uff0c\u5fc3\u91cc\u8fd8\u60f3\u7740\u66b4\u529b\u5efa\u56fe\uff0c\u770b\u5230\u77e9\u9635\u957f\u5c31\u653e\u5f03\u4e86\uff0c\u90a3\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u5230\u6392\u5e8f\u5efa\u56fe\uff0c\u4f46\u4efb\u610f\u95e8\u600e\u4e48\u5efa\u5462\uff1f\u66b4\u529b\uff01\uff1f\u60f3\u591a\u4e86  \n\u5728\u8fd9\u91cc\u6211\u4eec\u7528map\u6765\u5904\u7406\u4efb\u610f\u95e8\uff0c\u5bf9\u4e8e\u5269\u4e0b\u4e24\u4e2a\u95e8\u6211\u4eec\u7528vector\u4fdd\u5b58  \n\u5927\u6982\u662f\u8fd9\u6837\uff1a  \n```cpp\nconst int N=100001;\nconst int M=1000001;\nstruct node\n{\n    int op;//\u4ec0\u4e48\u7c7b\u578b\u7684\u95e8\n    int id;//\u8fd9\u4e2a\u95e8\u7684\u7f16\u53f7\n    int wz;//\u5728\u7b2c\u51e0\u884c\u7684\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\n    //\u6bd4\u5982 \u8f93\u5165 2 2 1\n    //\u90a3\u8fd9\u4e2a\u6a2a\u5929\u95e8\u5c31\u662f\u5728\u7b2c\u4e8c\u884c\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0cwz=2\uff0c\u5728h[2]\u4e2d\n    node(int oo,int ii,int ww)\n    {\n        op=oo;\n        id=ii;\n        wz=ww;\n    }\n    node()\n    {\n    }\n};\nvector <node> l[N]; //\u8fd9\u4e2a\u95e8\u5728\u7b2c\u51e0\u5217\nvector <node > h[N];//\u8fd9\u4e2a\u95e8\u5728\u7b2c\u51e0\u884c\n```\n\u4e0b\u9762\u662f\u5efa\u56fe\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u6570\u7ec4\u628a\u95e8\u7684\u4fe1\u606f\u4fdd\u5b58\u8d77\u6765\uff1a\n```\nstruct edge\n{\n    int x,y,op;\n}d[N];\nlong long get_v(int x,int y)\n{\n    return 1ll*(x-1)*c+y; //\u53ef\u4ee5\u628along long\u4e58\u7206\u7684\u6570\u5b57\n    //\u4e0d\u7528\u54c8\u5e0c\u5c31\u53bb\u4e16\u4e86\n}\nmap <long long ,int> mp;//\u8fd9\u4e2a\u662f\u4efb\u610f\u95e8\u7684\u54c8\u5e0c\n\nconst int py[8][2]={{-1,-1},{-1,0},{-1,1},{0,1},{0,-1},{1,-1},{1,0},{1,1}};\n//py\u6570\u7ec4\u662f\u4e3a\u4e86\u5efa\u4efb\u610f\u95e8\u65f6\u7528\u7684\nscanf(\"%d %d %d\",&n,&r,&c);\nfor(int i=1;i<=n;i++)\n{\n \tint x,y,op;\n   scanf(\"%d %d %d\",&x,&y,&op);\n   l[y].push_back(node(op,i,x));\n   h[x].push_back(node(op,i,y));\n   mp[get_v(x,y)]=i;\n   d[i].x=x,d[i].y=y,d[i].op=op;\n}\nfor(int i=1;i<=n;i++)\n{\n    if(d[i].op==1)\n    {\n        int size=h[d[i].x].size();\n        for(int j=0;j<size;j++)\n        {\n            if(h[d[i].x][j].wz!=d[i].y)\n               g[i].push_back(h[d[i].x][j].id);\n        }\n    }\n    if(d[i].op==2)\n    {\n        int size=l[d[i].y].size();\n        for(int j=0;j<size;j++)\n        {\n            if(l[d[i].y][j].wz!=d[i].x)\n              g[i].push_back(l[d[i].y][j].id);\n        }\n    }\n    if(d[i].op==3)\n    {\n        for(int j=0;j<8;j++)\n        {\n            int new_x=d[i].x+py[j][0];\n            int new_y=d[i].y+py[j][1];\n            if(mp.find(get_v(new_x,new_y))!=mp.end())\n    \t        g[i].push_back(mp[get_v(new_x,new_y)]);\n            //\u6ce8\u610f\u4e00\u4e0b\u8fd9\u91cc\n            //\u4e0d\u8981\u50cf\u8fd9\u6837\u5199\n            //if(mp[get_v(new_x,new_y)]==0)\n            //g[i].push_back(mp[get_v(new_x,new_y)]);\n            //\u8fd9\u4e48\u5199\u7206\u7a7a\u95f4\u4e0d\u8981\u602a\u6211\u6ca1\u8bf4\n        }\n     }\n }\n```\n\u597d\u4e86\uff0c\u7ec8\u4e8e\u628a\u56fe\u5efa\u597d\u4e86\uff0c\u56fe\u5efa\u5b8c\u4e86\u540e\u9898\u76ee\u5c31\u6e05\u6670\u4e86\uff0c\u6765\u4e00\u904dtarjan\u7f29\u70b9\uff0c\u62d3\u6251\u4e00\u4e0b\uff0c\u6700\u540edp\u5f97\u51fa\u7b54\u6848\uff1a\n```\nvoid tarjan(int pos)//\u7f29\u70b9\n{\n    low[pos]=dfn[pos]=++cnt;\n    flag[pos]=true,s.push(pos);\n    //\u8fd9\u4e2as\u662f\u4e00\u4e2a\u6808\uff0c\u7528\u6765\u4fdd\u5b58\u5f3a\u8fde\u901a\u7684\u70b9\n    int size=g[pos].size();\n    for(int i=0;i<size;i++)\n    {\n        int to=g[pos][i];\n        if(!dfn[to])\n        {\n            tarjan(to);\n            low[pos]=min(low[pos],low[to]);\n        }\n        else if(flag[to])\n            low[pos]=min(low[pos],dfn[to]);\n    }\n    if(dfn[pos]==low[pos])\n    {\n        col[pos]=++tot;\n        flag[pos]=false;\n        //flag\u662fbool\u578b\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e0d\u5728\u6808\u4e2d\u7684\u6807\u8bb0\n        gr[col[pos]].push_back(pos);\n        while(!s.empty() && s.top()!=pos)\n        {\n            flag[s.top()]=false;\n            col[s.top()]=tot;\n            //col\u6570\u7ec4\u662f\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u5f3a\u8fde\u901a\u7684\u7f16\u53f7\n            gr[col[pos]].push_back(s.top());\n        //gr\u662f\u4e2avector\uff0c\u7528\u6765\u4fdd\u5b58\u5f3a\u4fdd\u5b58\u5f3a\u8fde\u901a\u4e2d\u6bcf\u4e00\u4e2a\u70b9\n            s.pop();\n        }\n        s.pop();//\u628apos\u5f39\u6389\n    }\n    return;\n}\nvoid topu()\n{\n\t  //dp\u662f\u7528\u6765\u52a8\u5f52\u7684\u6570\u7ec4\uff0c\u5b58\u653e\u7b54\u6848\n     //siz\u662f\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5185\u70b9\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662fgr[col[i]].size()\n     //in\u4e3a\u5165\u5ea6\n    for(int i=1;i<=tot;i++)//tot\u4e3a\u5f3a\u8fde\u901a\u603b\u6570\n        if(!in[i])\n            q.push(i),dp[i]=siz[i];\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        int size=v[t].size();\n        //v\u4e3a\u7f29\u70b9\u540e\u65b0\u5efa\u7684\u56fe\n        for(int i=0;i<size;i++)\n        {\n            int to=v[t][i];\n            in[to]--;\n            dp[to]=max(dp[t]+siz[to],dp[to]);\n            //\u53bb\u90a3\u4e2a\u5f3a\u8fde\u901a\u8fd8\u662f\u4e0d\u53bb\n            if(!in[to])\n                q.push(to);\n        }\n    }\n    return;\n}\n//\u8fd9\u662f\u4e3b\u51fd\u6570\u91cc\u7684\uff0c\u5efa\u7f29\u70b9\u540e\u7684\u65b0\u56fe\nfor(int i=1;i<=tot;i++)\n{\n    int s1=gr[i].size();\n    siz[i]=s1;\n    for(int j=0;j<s1;j++)\n    {\n    \tint size=g[gr[i][j]].size();\n    \tfor(int k=0;k<size;k++)\n        {\n            int to=col[g[gr[i][j]][k]];\n            if(to!=i && use.count(get_v(i,to))==0)\n                v[i].push_back(to),use.insert(get_v(i,to)),in[to]++;\n        //use\u662f\u4e00\u4e2aset<long long>,\u7528\u4f5c\u53bb\u91cd\u8fb9\n        }\n    }\n}\ned=tot+1;//\u8fd9\u91cc\u6211\u4eec\u5efa\u4e00\u4e2a\u865a\u7ed3\u675f\u70b9\uff0c\u8ba9\u5b83\u4e0e\u6bcf\u4e00\u4e2a\u70b9\u5efa\u8fb9\nfor(int i=1;i<=tot;i++)\n    v[i].push_back(ed),in[ed]++;\ntopu();\n\n```\n\u5927\u529f\u544a\u6210\uff0c\u8fd9\u9898\u7ec8\u4e8e\u5199\u5b8c\u4e86\uff0c\u4e0b\u9762\u662f\u5b8c\u6574AC\u4ee3\u7801\uff1a  \n\u4e4b\u524d\u6709\u6ce8\u91ca\u7684\u6211\u5c31\u4e0d\u518d\u52a0\u4e86\uff0c\u53ef\u80fd\u6ca1\u6709\u5176\u4ed6\u5927\u4f6c\u7684\u4ee3\u7801\u5feb\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=100001;\nconst int M=1000001;\nconst int py[8][2]={{-1,-1},{-1,0},{-1,1},{0,1},{0,-1},{1,-1},{1,0},{1,1}};\nint n,r,c,tot,low[N],dfn[N],in[N],cnt,col[N],dp[N],ed,siz[N];\n//cnt\u53ea\u662f\u4e00\u4e2a\u7528\u6765\u7f16\u53f7\u7684\nbool flag[N];\nset <long long > use;\nstack <int > s;\nmap <long long ,int> mp;\nstruct edge\n{\n    int x,y,op;\n}d[N];\nstruct node\n{\n    int op;\n    int id;\n    int wz;\n    node(int oo,int ii,int ww)\n    {\n        op=oo;\n        id=ii;\n        wz=ww;\n    }\n    node()\n    {\n    }\n};\nvector <node> l[N];\nvector <node > h[N];\nqueue <int > q;//\u62d3\u6251\u7528\u7684\nvector <int > gr[N];\nvector <int > g[N];//\u65e7\u56fe\nvector <int > v[N];//\u7f29\u70b9\u540e\u56fe\nlong long get_v(int x,int y)\n{\n    return 1ll*(x-1)*c+y;\n}\nvoid tarjan(int pos)\n{\n    low[pos]=dfn[pos]=++cnt;\n    flag[pos]=true,s.push(pos);\n    int size=g[pos].size();\n    for(int i=0;i<size;i++)\n    {\n        int to=g[pos][i];\n        if(!dfn[to])\n        {\n            tarjan(to);\n            low[pos]=min(low[pos],low[to]);\n        }\n        else if(flag[to])\n            low[pos]=min(low[pos],dfn[to]);\n    }\n    if(dfn[pos]==low[pos])\n    {\n        col[pos]=++tot;\n        flag[pos]=false;\n        gr[col[pos]].push_back(pos);\n        while(!s.empty() && s.top()!=pos)\n        {\n            flag[s.top()]=false;\n            col[s.top()]=tot;\n            gr[col[pos]].push_back(s.top());\n            s.pop();\n        }\n        s.pop();\n    }\n    return;\n}\nvoid topu()\n{\n    for(int i=1;i<=tot;i++)\n        if(!in[i])\n            q.push(i),dp[i]=siz[i];\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        int size=v[t].size();\n        for(int i=0;i<size;i++)\n        {\n            int to=v[t][i];\n            in[to]--;\n            dp[to]=max(dp[t]+siz[to],dp[to]);\n            if(!in[to])\n                q.push(to);\n        }\n    }\n    return;\n}\nint main()\n{\n    scanf(\"%d %d %d\",&n,&r,&c);\n    for(int i=1;i<=n;i++)\n    {\n        int x,y,op;\n        scanf(\"%d %d %d\",&x,&y,&op);\n        l[y].push_back(node(op,i,x));\n        h[x].push_back(node(op,i,y));\n        mp[get_v(x,y)]=i;\n        d[i].x=x,d[i].y=y,d[i].op=op;\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(d[i].op==1)\n        {\n            int size=h[d[i].x].size();\n            for(int j=0;j<size;j++)\n            {\n                if(h[d[i].x][j].wz!=d[i].y)\n                    g[i].push_back(h[d[i].x][j].id);\n            }\n        }\n        if(d[i].op==2)\n        {\n            int size=l[d[i].y].size();\n            for(int j=0;j<size;j++)\n            {\n                if(l[d[i].y][j].wz!=d[i].x)\n                    g[i].push_back(l[d[i].y][j].id);\n            }\n        }\n        if(d[i].op==3)\n        {\n            for(int j=0;j<8;j++)\n            {\n                int new_x=d[i].x+py[j][0];\n                int new_y=d[i].y+py[j][1];\n                if(mp.find(get_v(new_x,new_y))!=mp.end())\n                    g[i].push_back(mp[get_v(new_x,new_y)]);\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(!dfn[i])\n            tarjan(i);\n    }\n    for(int i=1;i<=tot;i++)\n    {\n        int s1=gr[i].size();\n        siz[i]=s1;\n        for(int j=0;j<s1;j++)\n        {\n            int size=g[gr[i][j]].size();\n            for(int k=0;k<size;k++)\n            {\n                int to=col[g[gr[i][j]][k]];\n                if(to!=i && use.count(get_v(i,to))==0)\n                    v[i].push_back(to),use.insert(get_v(i,to)),in[to]++;\n            }\n        }\n    }\n    ed=tot+1;\n    for(int i=1;i<=tot;i++)\n        v[i].push_back(ed),in[ed]++;\n    topu();\n    printf(\"%d\\n\",dp[ed]);\n    return 0;\n}\n```",
        "postTime": 1560840926,
        "uid": 118388,
        "name": "Polar_Night",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "- \u5bb9\u6613\u60f3\u5230\uff0c\u5982\u679c\u5728\u7b2c$i$\u4e2a\u85cf\u5b9d\u5bab\u5ba4\u53ef\u4ee5\u4f20\u9001\u5230\u7b2c$j$\u4e2a\u85cf\u5b9d\u5bab\u5ba4\uff0c\u5c31\u8fde\u4e00\u6761$i->j$\u7684\u6709\u5411\u8fb9\uff0c$Tarjan$\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\u4e4b\u540e\uff0c\u5728**\u65b0\u56fe**\u4e0a\u627e\u51fa\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u5bf9\u5e94\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5927\u5c0f\u4e4b\u548c\u6700\u5927\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u6309\u7167\u62d3\u6251\u5e8f\u8fdb\u884c\u9012\u63a8\u6765\u5b9e\u73b0\u3002\n\n- \u4f46\u662f\uff0c\u5728\u5efa\u56fe\u4e0a\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c**\u4ece\u6a2a\u5929\u95e8\u6216\u7eb5\u5bf0\u95e8\u5f15\u51fa\u7684\u8fb9\u53ef\u80fd\u7279\u522b\u591a**\u3002\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c$10^5$\u4e2a\u6a2a\u5929\u95e8\u5728\u540c\u4e00\u884c\u91cc\u51fa\u73b0\uff0c\u8fd9\u6837\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u662f\u65e0\u6cd5\u627f\u53d7\u7684\u3002\u8003\u8651\u8fd9\u4e00\u70b9\u8fdb\u884c\u4f18\u5316\uff1a\u7531\u4e8e\u5728\u540c\u4e00\u884c\u7684\u6a2a\u5929\u95e8\u4e00\u5b9a\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u5728\u5efa\u8fb9\u65f6\uff0c\u53ea\u9700\u8981\u5bf9\u5728\u540c\u4e00\u884c\u7684\u6a2a\u5929\u95e8\u6784\u5efa\u51fa\u4e00\u4e2a\u73af\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u4e24\u4e24\u8fdb\u884c\u8fde\u8fb9\u3002\u800c\u6b64\u884c\u5185\u7684\u5176\u4ed6\u5bab\u5ba4\uff0c\u53ea\u9700\u8981\u4ece\u8fd9\u4e2a\u73af\u4e2d\u7684\u4efb\u610f\u4e00\u70b9\u5411\u8fd9\u4e2a\u5bab\u5ba4\u8fde\u8fb9\u5373\u53ef\u3002\u5bf9\u4e8e\u7eb5\u5bf0\u95e8\u4e5f\u662f\u4e00\u6837\u3002\n\n- \u6b64\u5916\uff0c\u5728\u5efa\u56fe\u7684\u5b9e\u73b0\u4e0a\u6709\u4e00\u4e9b\u5c0f\u6280\u5de7\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\nconst int N = 1e5 + 5, M = 2e6 + 5, R = 1e6 + 5;\nint n, ecnt, nxt[M], adj[N], go[M], dfn[N], low[N], times, sum, num[N],\ntop, stk[N], bel[N], ecnt2, nxt2[M], adj2[N], go2[M], tot, st[N], ed[N],\nlas[R], now[R], nex[R], row[N], cnt[N], res[N], H, T, Q[N]; bool ins[N];\nstruct cyx {int x, y, t, id;} a[N];\nvoid add_edge(int u, int v) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v;\n}\nvoid add_edge2(int u, int v) {\n    nxt2[++ecnt2] = adj2[u]; adj2[u] = ecnt2; go2[ecnt2] = v;\n}\nbool comp1(cyx a, cyx b) {\n    if (a.x != b.x) return a.x < b.x;\n    return a.t < b.t;\n}\nbool comp2(cyx a, cyx b) {\n    if (a.y != b.y) return a.y < b.y;\n    return a.t < b.t;\n}\nbool comp3(cyx a, cyx b) {\n    if (a.x != b.x) return a.x < b.x;\n    return a.y < b.y;\n}\nvoid Tarjan(int u) {\n    dfn[u] = low[u] = ++times; ins[stk[++top] = u] = 1;\n    for (int e = adj[u], v; e; e = nxt[e])\n        if (!dfn[v = go[e]]) {\n            Tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (ins[v]) low[u] = min(low[u], dfn[v]);\n    if (dfn[u] == low[u]) {\n        num[bel[u] = ++sum] = 1; ins[u] = 0; int v;\n        while (v = stk[top--], v != u) num[bel[v] = sum]++, ins[v] = 0;\n    }\n}\nvoid topo() {\n    int i; H = T = 0;\n    for (i = 1; i <= sum; i++) if (!cnt[i]) Q[++T] = i, res[i] = num[i];\n    while (H < T) {\n        int u = Q[++H];\n        for (int e = adj2[u], v; e; e = nxt2[e]) {\n            if (!(--cnt[v = go2[e]])) Q[++T] = v;\n            res[v] = max(res[v], res[u] + num[v]);\n        }\n    }\n}\nint main() {\n    int i, j; n = read(); read(); read();\n    for (i = 1; i <= n; i++) a[i].x = read(), a[i].y = read(),\n        a[i].t = read(), a[i].id = i;\n    sort(a + 1, a + n + 1, comp1);\n    for (i = 1; i <= n;) {\n        int fir = 0, lst = 0;\n        for (j = i; j <= n && a[i].x == a[j].x; j++) if (a[j].t == 1) {\n            if (!fir) fir = j; lst = j;\n            if (j < n && a[i].x == a[j + 1].x && a[j + 1].t == 1)\n                add_edge(a[j].id, a[j + 1].id);\n        }\n        if (lst) {\n            if (lst != fir) add_edge(a[lst].id, a[fir].id);\n            for (j = i; j <= n && a[i].x == a[j].x; j++) if (a[j].t != 1)\n                add_edge(a[lst].id, a[j].id);\n        }\n        i = j;\n    }\n    sort(a + 1, a + n + 1, comp2);\n    for (i = 1; i <= n;) {\n        int fir = 0, lst = 0;\n        for (j = i; j <= n && a[i].y == a[j].y; j++) if (a[j].t == 2) {\n            if (!fir) fir = j; lst = j;\n            if (j < n && a[i].y == a[j + 1].y && a[j + 1].t == 2)\n                add_edge(a[j].id, a[j + 1].id);\n        }\n        if (lst) {\n            if (lst != fir) add_edge(a[lst].id, a[fir].id);\n            for (j = i; j <= n && a[i].y == a[j].y; j++) if (a[j].t != 2)\n                add_edge(a[lst].id, a[j].id);\n        }\n        i = j;\n    }\n    sort(a + 1, a + n + 1, comp3);\n    for (i = 1; i <= n;) {\n        st[++tot] = i; row[tot] = a[i].x;\n        for (j = i; j <= n && a[i].x == a[j].x; j++);\n        ed[tot] = j - 1; i = j;\n    }\n    for (i = 1; i <= tot; i++) {\n        if (i > 1) for (j = st[i - 1]; j <= ed[i - 1]; j++)\n            las[a[j].y] = a[j].id;\n        for (j = st[i]; j <= ed[i]; j++) now[a[j].y] = a[j].id;\n        if (i < tot) for (j = st[i + 1]; j <= ed[i + 1]; j++)\n            nex[a[j].y] = a[j].id;\n        for (j = st[i]; j <= ed[i]; j++) {\n            if (a[j].t != 3) continue;\n            if (i > 1 && row[i - 1] + 1 == row[i]) {\n                if (las[a[j].y - 1]) add_edge(a[j].id, las[a[j].y - 1]);\n                if (las[a[j].y]) add_edge(a[j].id, las[a[j].y]);\n                if (las[a[j].y + 1]) add_edge(a[j].id, las[a[j].y + 1]);\n            }\n            if (now[a[j].y - 1]) add_edge(a[j].id, now[a[j].y - 1]);\n            if (now[a[j].y + 1]) add_edge(a[j].id, now[a[j].y + 1]);\n            if (i < tot && row[i + 1] - 1 == row[i]) {\n                if (nex[a[j].y - 1]) add_edge(a[j].id, nex[a[j].y - 1]);\n                if (nex[a[j].y]) add_edge(a[j].id, nex[a[j].y]);\n                if (nex[a[j].y + 1]) add_edge(a[j].id, nex[a[j].y + 1]);\n            }\n        }\n        if (i > 1) for (j = st[i - 1]; j <= ed[i - 1]; j++)\n            las[a[j].y] = 0;\n        for (j = st[i]; j <= ed[i]; j++) now[a[j].y] = 0;\n        if (i < tot) for (j = st[i + 1]; j <= ed[i + 1]; j++)\n            nex[a[j].y] = 0;\n    }\n    for (i = 1; i <= n; i++) if (!dfn[i]) Tarjan(i);\n    for (i = 1; i <= n; i++) for (int e = adj[i]; e; e = nxt[e])\n        if (bel[i] != bel[go[e]]) add_edge2(bel[i], bel[go[e]]),\n            cnt[bel[go[e]]]++;\n    int ans = 0; topo();\n    for (i = 1; i <= sum; i++) ans = max(ans, res[i]);\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1503548559,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "\u76f4\u63a5\u4e0a\u7b97\u6cd5\u5427\uff1a\n\ntarjan\u7f29\u70b9+\u62d3\u6251\u6392\u5e8f+DP\u6c42\u89e3\u6700\u957f\u8def\n\n\u4e00\u770b\u8fd9\u9898\u6709\u53ef\u80fd\u6709\u597d\u591a\u597d\u591a\u7684\u73af\u2026\u2026\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u5148\u7f29\u4e2a\u70b9\u2026\u2026\u7136\u540e\u5c31\u4f1a\u5f88\u60ca\u5947\u7684\u53d1\u73b0\u2026\u2026\u54c7\uff01\u8fd9\u662f\u4e2aDAG\u4e8e\u662f\u60f3\u5230\u8981\u6c42\u6700\u957f\u8def\u6211\u4eec\u5c31\u81ea\u7136\u800c\u7136\u7684\u60f3\u5230\u4e86\u6c42\u4e2a\u62d3\u6251\u5e8f\u53bb\u4e2a\u540e\u6548\u6027\u76f4\u63a5DP\u2026\u2026\n\n\u60f3\u6cd5\u771f\u7684\u5f88\u66b4\u2026\u2026\u5199\u8d77\u6765\u86ee\u70e6\u7684\u2026\u2026\n\n\u8d34\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<stack>\n#define mem(a,b) memset(a,b,sizeof(a)) \nusing namespace std;\nconst int MAXN=100010;\nconst int MAXT=1000010;\nint n,r,c;\nint dx[]={0,1,0,-1,1,1,-1,-1};\nint dy[]={1,0,-1,0,-1,1,-1,1};\nstruct NODE{\n    int x,y,t;\n}op[MAXN];\nint list_x[MAXT],list_y[MAXT];\nint ne_x[MAXN],ne_y[MAXN];\nint rudu[MAXN];\nint num[MAXN],rank[MAXN],top;\nint head[MAXN],nex[MAXN*50],to[MAXN*50],top1;\nint head1[MAXN],nex1[MAXN*50],to1[MAXN*50],top2;\nvoid init(){\n     mem(list_x,-1);mem(list_y,-1);mem(head,-1);mem(head1,-1);\n}\nvoid add1(int x,int y){nex[top1]=head[x];head[x]=top1;to[top1++]=y;}\nvoid add2(int x,int y){nex1[top2]=head1[x];head1[x]=top2;to1[top2++]=y;}\nvoid addedge1(){\n     for(int i=0;i<n;i++){\n         if(op[i].t==1)\n             for(int j=list_x[op[i].x];j!=-1;j=ne_x[j]){\n                 if(i==j) continue;\n                 add1(i,j);\n             }\n         if(op[i].t==2)\n             for(int j=list_y[op[i].y];j!=-1;j=ne_y[j]){\n                 if(i==j) continue;\n                 add1(i,j);\n             }\n         if(op[i].t==3)\n             for(int k=0;k<8;k++){\n                 int xx=op[i].x+dx[k];\n                 for(int j=list_x[xx];j!=-1;j=ne_x[j]){\n                     if(i==j) continue;\n                     if(abs(op[j].y-op[i].y)<=1) add1(i,j);\n                 }\n             }\n     }\n}\nint dfn[MAXN],low[MAXN],tot;\nbool in_stack[MAXN];\nstack<int> s;\nint dnf[MAXN],rank1[MAXN],ttt;\nvoid tarjan(int here){\n     dfn[here]=low[here]=++tot;\n     in_stack[here]=1;s.push(here);\n     for(int i=head[here];i!=-1;i=nex[i]){\n         if(!dfn[to[i]]){\n             tarjan(to[i]);\n             low[here]=min(low[here],low[to[i]]);\n         }\n         else if(in_stack[to[i]]){\n             low[here]=min(low[here],dfn[to[i]]);\n         }\n     }\n     if(low[here]==dfn[here]){\n         int tttt(-1);//charu dian top\n         while(tttt!=here){\n             tttt=s.top();s.pop();in_stack[tttt]=0;\n             rank[tttt]=top;num[top]++;\n         }\n         ++top;\n     }\n}\nvoid tuopu(){\n    while(!s.empty()) s.pop();\n    for(int i=0;i<top;i++)\n        if(!rudu[i]) s.push(i);\n    while(!s.empty()){\n        int tmp=s.top();s.pop();\n        rank1[tmp]=ttt;dnf[ttt++]=tmp;\n        for(int i=head1[tmp];i!=-1;i=nex1[i]){\n            if(rudu[to1[i]]){\n                --rudu[to1[i]];\n                if(!rudu[to1[i]]) s.push(to1[i]);\n            }\n        }\n    }\n}\nvoid input(){\n     init();\n     cin>>n>>r>>c;\n     for(int i=0;i<n;i++){\n         cin>>op[i].x>>op[i].y>>op[i].t;\n         ne_x[i]=list_x[op[i].x];list_x[op[i].x]=i;\n         ne_y[i]=list_y[op[i].y];list_y[op[i].y]=i;\n     }\n     addedge1();\n}\nint dp[MAXN];\nvoid xxj(){\n     for(int i=0;i<n;i++){\n         if(dfn[i]) continue;\n         tarjan(i);\n     }\n     for(int i=0;i<n;i++){\n         for(int j=head[i];j!=-1;j=nex[j]){\n             if(rank[i]!=rank[to[j]]){\n                 add2(rank[i],rank[to[j]]);\n                 ++rudu[rank[to[j]]];\n             }\n         }\n     }\n     tuopu();\n     for(int i=0;i<n;i++)\n         dp[i]=num[i];\n     for(int i=0;i<ttt;i++){\n         int tmp=dnf[i];\n         for(int j=head1[tmp];j!=-1;j=nex1[j]){\n             dp[to1[j]]=max(dp[to1[j]],dp[tmp]+num[to1[j]]);\n         }\n     }\n}\nvoid output()\n{\n     int imax(0);\n     for(int i=0;i<top;i++){\n         imax=max(dp[i],imax);\n     }\n     cout<<imax<<endl;\n}\nint main()\n{\n    input();\n    xxj();\n    output();\n    //system(\"pause\");\n    return 0;\n}\n```",
        "postTime": 1482908078,
        "uid": 26051,
        "name": "Xiaojian_xiang",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P2403)\n\n\u53ef\u4ee5\u53d1\u73b0\u6700\u540e\u7531 $n$ \u4e2a\u70b9\u7ec4\u6210\u7684\u56fe\u662f\u6709\u73af\u7684\uff0c\u6211\u4eec\u7ee7\u800c\u8fdb\u884c\u7f29\u70b9\u540e DP\n\n#### step 1: \u5efa\u56fe\n\n\u66b4\u529b\u662f $\\mathcal{O}(n^2)$ \u7684\uff0c\u4f18\u5316\n\n\u53ef\u4ee5\u53d1\u73b0\u540c\u4e00\u884c\u7684\u6807\u53f7\u5747\u4e3a 1 \u7684\u70b9\u53ef\u4ee5\u5f62\u6210\u73af\n\n\u540c\u4e00\u5217\u7684\u6807\u53f7\u5747\u4e3a 2 \u7684\u70b9\u53ef\u4ee5\u5f62\u6210\u73af\n\n\u6709\u4ee5\u4e0b\u601d\u8def:\n\n\u5148\u5c06\u884c\u6570\u6392\u5e8f\u4f5c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u5c06\u662f\u5426\u6807\u53f7\u4e3a 1 \u4f5c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u5bf9\u4e8e\u70b9\u6392\u5e8f\n\n\u53d6\u7b2c\u6bcf\u4e00\u884c\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u94fe\u8868\u5934\uff0c\u94fe\u4e0a\u6709\u8fd9\u4e00\u884c\u4e0a\u6807\u53f7\u4e3a 1 \u7684\u70b9\uff0c\u6700\u540e\u5c06\u94fe\u5934\u548c\u94fe\u5c3e\u76f8\u63a5\uff0c\u5c31\u6210\u529f\u5f97\u5230\u4e86\u4e00\u4e2a\u73af\n\n\u5bf9\u4e8e\u8fd9\u4e00\u884c\u4e0a\u6807\u53f7\u4e0d\u4e3a 1 \u7684\u70b9\uff0c\u76f4\u63a5\u4e0a\u4e00\u6761\u94fe\u5934\u5230\u8be5\u70b9\u7684\u8fb9\u5373\u53ef\n\n\u5bf9\u4e8e\u6807\u53f7\u4e3a 2 \u548c\u5217\u7684\u5904\u7406\u4e0e\u5bf9\u4e8e\u884c\u7684\u5904\u7406\u76f8\u4f3c\n\n\u5bf9\u4e8e\u6807\u53f7\u4e3a 3 \u7684\u70b9\uff0c\u8003\u8651\u66b4\u529b\u52a0\u8fb9\uff0c\u53ef\u4f7f\u7528`std::map`\u6216 Hash \u4f18\u5316\n\n#### step 2: \u7f29\u70b9 & \u5efa DAG\n\n\u70b9\u6743\u5373\u4e3a\u73af\u4e0a\u70b9\u7684\u6570\u91cf\uff0c\u5176\u4ed6\u90fd\u662f\u677f\u5b50\n\n#### step 3: \u62d3\u6251\u6392\u5e8f + DP\n\n$num_v$ \u4e3a\u70b9\u6743\n\n$$f_v = \\max_{(u,v)\\in DAG} f_u + num_v$$\n\n\u7b54\u6848 $Ans = \\max f_i$\n\n\u603b\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log n)$\n\nCode(C++):\n```cpp\n#include<bits/stdc++.h>\n#define forn(i,s,t) for(int i=(s);i<=(t);++i)\nusing namespace std;\ntypedef long long LL;\nconst int N = 1e5+3,Mod = 1e6+7;\nconst int dxx[] = {1,1,1,-1,-1,-1,0,0};\nconst int dyy[] = {0,1,-1,1,0,-1,1,-1};\nstruct List {\n\tint dir,nxt;\n}E[N<<3],DAG[N<<3];\nint G[N],cnt,G1[N],cnt1,ind[N];\ninline void Add(int u,int v) {\n\tE[++cnt].dir = v,E[cnt].nxt = G[u],G[u] = cnt;\n}\ninline void AddDAG(int u,int v)  {\n\tDAG[++cnt1].dir = v,DAG[cnt1].nxt = G1[u],G1[u] = cnt1,ind[v]++;\n}\nint n,R,C,id[N],x[N],y[N],t[N];\nstruct Hash {                                                // \u4e71\u641eHash\n\tLL val[N<<2];\n\tint nxt[N<<2],id[N<<2],head[Mod+2],cnt;\n\tinline void Add(int x,int y,int nd) {\n\t\tLL A = 1ll*(x-1)*C+y;\n\t\tLL B = A%Mod;\n\t\tval[++cnt] = A,id[cnt] = nd,nxt[cnt] = head[B];\n\t\thead[B] = cnt;\n\t}\n\tinline int Fnd(int x,int y) {\n\t\tLL A = (1ll*(x-1)*C+y) %Mod;\n\t\tLL B = 1ll*(x-1)*C+y;\n\t\tfor(int i=head[A];i;i=nxt[i]) \n\t\t\tif(val[i] == B) return id[i];\n\t\treturn -1;\n\t}\n}H;\nint dfn[N],ord,stk[N],h,clr[N],col,num[N],f[N],Ans;\nbool vis[N];\nint tarjan(int u) {\n\tint low = dfn[u] = ++ord;\n\tstk[++h] = u,vis[u] = 1;\n\tfor(int i=G[u];i;i=E[i].nxt) {\n\t\tint v = E[i].dir;\n\t\tif(!dfn[v]) low = min(tarjan(v),low);\n\t\telse if(vis[v]) low = min(low,dfn[v]);\n\t}\n\tif(low == dfn[u]) {\n\t\t++col;\n\t\tdo num[col]++,vis[stk[h]]=0,clr[stk[h]]=col;\n\t\twhile(stk[h--]!=u);\n\t}\n\treturn low;\n}\nqueue<int> q;\ninline bool cmp(int A,int B) {return x[A]!=x[B]?(x[A]<x[B]):((t[A]==1)?1:(!t[B]));}\ninline bool cmp1(int A,int B){return y[A]!=y[B]?(y[A]<y[B]):((t[A]==2)?1:(!t[B]));}\nint main() {\n\tscanf(\"%d%d%d\",&n,&R,&C);\n\tforn(i,1,n) scanf(\"%d%d%d\",&x[i],&y[i],&t[i]);\n\tforn(i,1,n) H.Add(x[i],y[i],i);\n\t/*--------\u5efa\u56fe part----------*/\n\tforn(i,1,n) id[i] = i;\n\tsort(id+1,id+n+1,cmp);\n\tforn(i,1,n) if(t[id[i]] == 1) {            // situation 1\n\t\tint llst=i,lst=id[i],fir=id[i];\n\t\tfor(int j=i+1;j<=n;++j) {\n\t\t\tif(x[id[j]]!=x[id[i]]) break ;\n\t\t\tllst = j;\n\t\t\tif(t[id[j]] == 1) Add(lst,id[j]),lst = id[j];\n\t\t\telse Add(id[i],id[j]);\n\t\t}\n\t\tif(lst^fir) Add(lst,fir);\n\t\ti = llst;\n\t}\n\tsort(id+1,id+n+1,cmp1);\n\tforn(i,1,n) if(t[id[i]] == 2) {           // situation 2\n\t\tint llst = i,lst=id[i],fir=id[i];\n\t\tfor(int j=i+1;j<=n;++j) {\n\t\t\tif(y[id[i]]!=y[id[j]]) break ;\n\t\t\tllst = j;\n\t\t\tif(t[id[j]] == 2) Add(lst,id[j]),lst = id[j];\n\t\t\telse Add(id[i],id[j]);\n\t\t}\n\t\tif(lst^fir) Add(lst,fir);\n\t\ti = llst;\n\t}\n\tint v;\n\tforn(i,1,n) if(t[i] == 3)               // situation 3\n\t\tforn(j,0,7) if((v=H.Fnd(x[i]+dxx[j],y[i]+dyy[j])) != -1) \n\t\t\tAdd(i,v);\n      /*--------\u7f29\u70b9 Part--------*/\n\tforn(i,1,n) if(!dfn[i]) tarjan(i);\n\tforn(u,1,n) for(int i=G[u];i;i=E[i].nxt) {\n\t\tv = E[i].dir;\n\t\tif(clr[v] == clr[u]) continue ;\n\t\tAddDAG(clr[u],clr[v]); \n\t}\n     /*---------DP Part-------*/\n\tforn(i,1,col) if(!ind[i]) q.push(i),f[i] = num[i];\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i=G1[u];i;i=DAG[i].nxt) {\n\t\t\tv = DAG[i].dir;\n\t\t\tf[v] = max(f[v],f[u]+num[v]);\n\t\t\tif(!--ind[v]) q.push(v);\n\t\t}\n\t}\n\tforn(i,1,col) Ans = max(Ans,f[i]);\n\tprintf(\"%d\\n\",Ans);\n\treturn 0;\n}\n```",
        "postTime": 1606659461,
        "uid": 223884,
        "name": "AxDea",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "### \u9898\u89e3:Tarjan + \u62d3\u6251\u6392\u5e8f + \u5efa\u56fe\u5c0f\u6280\u5de7\n\n\t\u89c2\u5bdf\u9898\u76ee\u6027\u8d28\uff0c\u5927\u6982\u5c31\u662f\u8981Tarjan\u7f29\u70b9\u540e\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u6c42\u51fa\u4e00\u4e2a\u4e00\u6761\u6700\u957f\u8def\u5f84\uff08\u7ecf\u8fc7\u7684\u70b9\u6700\u591a\uff09\n    \u96be\u5ea6\u5c31\u5728\u5efa\u56fe\u8fd9\u91cc.\n### \u6211\u7740\u91cd\u5206\u4eab\u4e00\u4e2a\u6211\u7684\u5efa\u56fe\u6280\u5de7\uff1a\n\n\u9996\u5148\u5c06\u7ed9\u51fa\u7684\u95e8\u6309\u6a2a\u5750\u6807\u6392\u5e8f\uff0c\u5148\u5904\u7406\u6a2a\u95e8\u3002         \u5982\u679c\u5f53\u524d\u6709\u4e00\u4e2a\u6a2a\u95e8\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u5b83\u4e0e\u540c\u4e00\u6a2a\u884c\u7684\u6240\u6709\u8fb9\u8fde\u8fb9\uff0c\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u95e8\u7684\u7f16\u53f7\uff0c\u63a5\u4e0b\u6765\uff0c\u540c\u4e00\u884c\u7684\u6a2a\u95e8\u53ea\u9700\u8981\u5411\u5b83\u8fde\u8fb9\u5c31\u884c\u4e86\u3002\u8fd9\u6837\u5b50\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u800c\u4e14\u5927\u5927\u51cf\u5c11\u4e86\u65e0\u7528\u8fb9\u3002\n\n\u540c\u6837\u7684\u9053\u7406\uff0c\u63a5\u7740\u91cd\u65b0\u628a\u7ed9\u51fa\u7684\u95e8\u6309\u7eb5\u5750\u6807\u6392\u5e8f\uff0c\u5904\u7406\u7eb5\u95e8\u3002\u5982\u679c\u5f53\u524d\u662f\u4e00\u4e2a\u7eb5\u95e8\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u5411\u6240\u6709\u540c\u4e00\u7eb5\u884c\u7684\u95e8\u8fde\u8fb9\uff08\u56e0\u4e3a\u662f\u6392\u8fc7\u5e8f\u7684\uff0c\u6240\u4ee5\u6bd4\u8f83\u597d\u5904\u7406\uff09\u3002\u7136\u540e\u540c\u4e00\u884c\u7684\u7eb5\u95e8\u5411\u5b83\u8fde\u8fb9\u5c31\u884c\u4e86\u3002\n\n\u5bf9\u4e8e\u81ea\u7531\u95e8\u7684\u5904\u7406\u6211\u4eec\u4f7f\u7528STL\u4e2d\u7684map\uff0c\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u95e8\u7684\u5750\u6807\uff0c\u5c06Map\u4e2d\u6bcf\u4e2a\u95e8\u5bf9\u5e94\u7684\u503c\u90fd\u8bbe\u4e3a\u8fd9\u4e2a\u95e8\u7684\u7f16\u53f7,\u7136\u540e\u5faa\u73af\u4ece1\u5230n\u6bcf\u6b21\u66b4\u529b\u7684\u770b\u516b\u4e2a\u65b9\u5411\u6709\u6ca1\u6709\u95e8\u5c31\u884c\u4e86\uff0c\u6709\u5c31\u8fde\u4e0a\u3002\n\n\u8fd9\u6837\u5b50\u5c31\u5efa\u597d\u56fe\u4e86\uff0c\u7136\u540e\u8dd1\u4e00\u904dtarjan\u548c\u62d3\u6251\u6392\u5e8f\u5c31\u597d\u4e86\u3002\n\n### \u5bf9\u4e8emap\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\uff1a\n\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u6570\u7ec4,\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u4e0b\u6807\u6bd4\u8f83\u5947\u602a\uff0c\u5b83\u7684\u4e0b\u6807\u53ef\u4ee5\u662f\u4e00\u4e2a\"pair\" \u7c7b\u578b\u3002\u7c7b\u4f3c\u4e8e\u53ef\u4ee5\u628a\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u538b\u7f29\u4e3a\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u62ff\u4e0a\u9762\u8bb0\u5f55\u5750\u6807\u6765\u770b,\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\n\n```cpp\npair <int,int> p\n\np.first = x\n\np.second = y;\n```\n\n\n\u90a3\u4e48\u6211\u4eec\u7684 \n```cpp\nmap <pair<int,int> , int> mp,mp[p] <-----\u8fd9\u91ccmp\u7684\u4e0b\u6807\u662f\u4e00\u4e2apair\n```\n\u5c31\u53ef\u4ee5\u76f4\u63a5\u7ed9mp[p]\u8d4b\u503c.\n\n\u524d\u9762\u7684pair\u53ef\u4ee5\u6709\u5176\u4ed6\u5f88\u591a\u79cd\u7c7b\u578b\uff0c\u6839\u636e\u9898\u76ee\u9700\u8981\u53ef\u4ee5\u8fdb\u884c\u4fee\u6539\n\n\u5982\u679c\u7528\u666e\u901a\u7684\u6570\u7ec4\u6211\u4eec\u663e\u7136\u5f97\u5199\u4e3amp[x][y]\uff0c\u8fd9\u6837\u5b50\u7684\u8bdd\u6211\u4eec\u5c31\u5f97\u5f00\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e86.\n\nmap\u7684\u672c\u8d28\u662f\u4e00\u68f5\u7ea2\u9ed1\u6811\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fo(NlogN)\u7684\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(\u5143\u7d20\u4e2a\u6570)\u7684\uff0c\u6240\u4ee5\u5728\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4f1a\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u66f4\u4f18\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u4e2dR\u4ee5\u53caC\u90fd\u662f <= 1e6\u7684\uff0c\u6211\u4eec\u663e\u7136\u5f00\u4e0d\u4e0b\u4e00\u4e2amp[R][C] ,\u6240\u4ee5\uff0c\u8fd9\u65f6\u5019\u5e94\u8be5\u7528map\n\ntarjan\u4ee5\u53ca\u62d3\u6251\u6392\u5e8f\u5c31\u4e0d\u7740\u91cd\u8bb2\u4e86\uff08\u5e94\u8be5\u505a\u8fd9\u9053\u9898\u4e0d\u5e94\u8be5\u4e0d\u4f1atarjan\u4e86\u5427\u3002\u4e0d\u4f1a\u5427\uff0c\u4e0d\u4f1a\u5427\uff0c\u4f1a\u5427\uff0c\u5427...\u5982\u679c\u4e0d\u4f1a\u7684\u8bdd\u5eb7\u5eb7\u4ee3\u7801\u5427\uff09\u5410\u69fd\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u9898\u7684\u4ee3\u7801\u662f\u771f\u7684\u957f\u554a\uff01\u6076\u5fc3\uff01\u6076\u5fc3\uff01\n\n## Code\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\npair<int, int> p;\nmap<pair<int, int>, int> mp;\nint n, m = 0, R, C;\nstruct ask {\n    int x, y, z, num;\n} q[100005];\nstruct node {\n    int u, v;\n} r[10000005], T[10000005];\nint start[100005], Fx[100005], Fy[100005], dfn[100005], low[100005], color[100005];\nint cmpa(ask A, ask B) { return A.x < B.x; }\nint cmpb(ask A, ask B) { return A.y < B.y; }\nvoid add(int u, int v) {\n    if (u == v)\n        return;\n    m++;\n    r[m].u = u, r[m].v = v;\n}\nvoid build_graph() {\n    sort(q + 1, q + 1 + n, cmpa);\n    int ls = -1;\n    for (int i = 1; i <= n; i++)\n        if (ls != q[i].x)\n            ls = q[i].x, start[ls] = i;\n    for (int i = 1; i <= n; i++) {\n        if (q[i].z == 1 && Fx[q[i].x] == 0) {\n            for (int j = start[q[i].x]; j <= n && q[j].x == q[i].x; j++)\n                if (i != j)\n                    add(q[i].num, q[j].num);\n            Fx[q[i].x] = q[i].num;\n        }\n        if (q[i].z == 1 && Fx[q[i].x] != 0)\n            add(q[i].num, Fx[q[i].x]);\n    }\n    sort(q + 1, q + 1 + n, cmpb);\n    memset(start, 0, sizeof(start));\n    ls = -1;\n    for (int i = 1; i <= n; i++)\n        if (ls != q[i].y)\n            ls = q[i].y, start[ls] = i;\n    for (int i = 1; i <= n; i++) {\n        if (q[i].z == 2 && Fy[q[i].y] == 0) {\n            for (int j = start[q[i].y]; j <= n && q[j].y == q[i].y; j++)\n                if (i != j)\n                    add(q[i].num, q[j].num);\n            Fy[q[i].y] = q[i].num;\n        }\n        if (q[i].z == 2 && Fy[q[i].y] != 0)\n            add(q[i].num, Fy[q[i].y]);\n    }\n    memset(start, 0, sizeof(start));\n}\nint d1[9] = { 0, 1, -1, 0, 0, 1, -1, 1, -1 };\nint d2[9] = { 0, 0, 0, 1, -1, -1, 1, 1, -1 };\nint now = 0, tot = 0;\nint tack[100005], tail = 0, z = 0, Siz[100005], LCNB[100005];\nint tarjan(int x) {\n    now++;\n    low[x] = dfn[x] = now;\n    tail++, tack[tail] = x;\n    LCNB[x] = 1;\n    for (int i = start[x]; i <= m && r[i].u == x; i++) {\n        int to = r[i].v;\n        if (!dfn[to]) {\n            tarjan(to);\n            low[x] = min(low[x], low[to]);\n        } else if (LCNB[to])\n            low[x] = min(low[x], dfn[to]);\n    }\n    if (low[x] == dfn[x]) {\n        z++;\n        while (tack[tail + 1] != x && tail >= 1)\n            color[tack[tail]] = z, LCNB[tack[tail]] = 0, Siz[z]++, tail--;\n    }\n    return 0;\n}\nint cmp(node A, node B) { return A.u < B.u; }\nint mm = 0, locked[1000005], sum[100005] = { 0 };\nvoid newadd(int u, int v) {\n    if (u == v)\n        return;\n    mm++;\n    T[mm].u = u, T[mm].v = v;\n}\nint topsort() {\n    queue<int> q;\n    for (int i = 1; i <= n; i++)\n        if (locked[i] == 0 && Siz[i] != 0)\n            q.push(i);\n    for (int i = 1; i <= n; i++) sum[i] = Siz[i];\n    while (!q.empty()) {\n        int k = q.front();\n        q.pop();\n        for (int i = start[k]; i <= m && r[i].u == k; i++) {\n            int v = r[i].v;\n            sum[v] = max(sum[v], sum[k] + Siz[v]);\n            locked[v]--;\n            if (locked[v] == 0)\n                q.push(v);\n        }\n    }\n    int ans = 0;\n    for (int i = 1; i <= n; i++) ans = max(ans, sum[i]);\n    return ans;\n}\nint main() {\n    cin >> n >> R >> C;\n    for (int i = 1; i <= n; i++) {\n        cin >> q[i].x >> q[i].y >> q[i].z;\n        p.first = q[i].x;\n        q[i].num = i;\n        p.second = q[i].y;\n        mp[p] = q[i].num;\n    }\n    build_graph();\n    for (int i = 1; i <= n; i++) {\n        if (q[i].z == 3) {\n            for (int k = 1; k <= 8; k++) {\n                p.first = q[i].x + d1[k];\n                p.second = q[i].y + d2[k];\n                if (mp[p] != 0)\n                    add(q[i].num, mp[p]);\n            }\n        }\n    }\n    sort(r + 1, r + 1 + m, cmp);\n    int ls = -1;\n    for (int i = 1; i <= m; i++)\n        if (ls != r[i].u)\n            ls = r[i].u, start[ls] = i;\n    for (int i = 1; i <= n; i++)\n        if (!dfn[i])\n            tarjan(i);\n    mp.clear();\n    for (int i = 1; i <= m; i++) {\n        p.first = color[r[i].u];\n        p.second = color[r[i].v];\n        if (mp[p] == 0)\n            newadd(color[r[i].u], color[r[i].v]);\n        mp[p] = 1;\n    }\n    m = mm;\n    memset(start, 0, sizeof(start));\n    for (int i = 1; i <= m; i++) r[i] = T[i];\n    sort(r + 1, r + 1 + m, cmp);\n    ls = -1;\n    for (int i = 1; i <= m; i++)\n        if (ls != r[i].u)\n            ls = r[i].u, start[ls] = i;\n    for (int i = 1; i <= m; i++) locked[r[i].v]++;\n    cout << topsort();\n    return 0;\n}\n```\n\n\u5b8c\u7ed3\u6492\u82b1\uff01O(\u2229_\u2229)O~~ \uff0c (\uff1b\u2032\u2312`)\u70b9\u4e2a\u8d5e\u5457\u3002\uff08\u4ee3\u7801\u5199\u8fd9\u4e48\u4e11\u8fd8\u8981\u8d5e\u7684\u771f\u662f~~\u81ed\u4e0d\u8981\u8138~~ \u5408\u60c5\u5408\u7406",
        "postTime": 1602746117,
        "uid": 67817,
        "name": "MuYC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "### \u601d\u8def\n\u8fd9\u9053\u9898\u662f\u4e00\u9053\u5f88\u660e\u663e\u7684Tar\u7f29\u70b9\uff0c\u7136\u540e\u8dd1\u62d3\u6251\u7684\u9898\u76ee\uff0c\u5c31\u662f\u5b58\u56fe\u6709\u4e00\u70b9\u70b9\u9ebb\u70e6\uff0c\u7528vector\u5f00\u6570\u7ec4\u4ee3\u8868\u6bcf\u4e00\u884c\uff0c\u6bcf\u4e00\u5217\uff0c\u8bb0\u5f55\u6bcf\u4e00\u884c\uff08\u6216\u8005\u6bcf\u4e00\u5217\uff09\u4e2d\u6709\u7279\u6b8a\u95e8\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5bf9\u4e8e\u201c\u6a2a\u5929\u95e8\u201d\u548c\u201c\u7eb5\u5bf0\u95e8\u201d\u5c31\u5f88\u597d\u5904\u7406\u4e86\uff0c\u4e3b\u8981\u5c31\u662f\u201c\u4efb\u610f\u95e8\u201d\uff0c\u53ef\u4ee5\u628a\u5f53\u524d\u70b9\u7684\u5f53\u524d\u884c\u548c\u4e0a\u4e00\u884c\uff0c\u4ee5\u53ca\u4e0b\u4e00\u884c\u8dd1\u4e00\u904d\uff08\u5c0f\u83dc\u9e21\u53ea\u4f1a\u66b4\u529b\u5efa\u8fb9\u4e86\uff09\uff0c\u6c42\u7b26\u5408\u60c5\u51b5\u7684\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540eTarjan\u7f29\u70b9\uff0c\u62d3\u6251\u6c42\u89e3\u5c31OK \u4e86\n### \u8fd8\u4e0d\u592a\u6e05\u695a\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u4ee3\u7801\n```cpp\n\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e5 + 5;\nstruct Edge {\n\tint to, next;\n}edge[maxn * 50], edge2[maxn * 50];\nint n, r, c, kind[maxn], x[maxn], y[maxn], head[maxn], cnt;\nint dfn[maxn], low[maxn], dfn_num, ins[maxn], stk[maxn], top;\nint tot, belong[maxn], cnt2, in[maxn], f[maxn], head2[maxn];\nvector<int> v1[maxn * 10], v2[maxn * 10], scc[maxn];\nvoid Add(int u, int v) {\n\tedge[++cnt].to = v;\n\tedge[cnt].next = head[u];\n\thead[u] = cnt;\n}\nvoid Add2(int u, int v) {\n\tedge2[++cnt2].to = v;\n\tedge2[cnt2].next = head2[u];\n\thead2[u] = cnt2;\n}\nvoid Init() {\n\tscanf(\"%d%d%d\", &n, &r, &c);\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d%d%d\", &x[i], &y[i], &kind[i]);\n\t\tv1[x[i]].push_back(i);\n\t\tv2[y[i]].push_back(i);\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (kind[i] == 1) {\n\t\t\tfor (int j = 0; j < v1[x[i]].size(); j++) {\n\t\t\t\tint v = v1[x[i]][j];\n\t\t\t\tif (v == i) continue;\n\t\t\t\tAdd(i, v);\n\t\t\t}\n\t\t}\n\t\tif (kind[i] == 2) {\n\t\t\tfor (int j = 0; j < v2[y[i]].size(); j++) {\n\t\t\t\tint v = v2[y[i]][j];\n\t\t\t\tif (v == i) continue;\n\t\t\t\tAdd(i, v);\n\t\t\t}\n\t\t}\n\t\tif (kind[i] == 3) {\n\t\t\tfor (int k = max(1, x[i] - 1); k <= min(x[i] + 1, r); k++) {\n\t\t\t\tfor (int j = 0; j < v1[k].size(); j++) {\n\t\t\t\t\tint v = v1[k][j];\n\t\t\t\t\tif (x[i] == x[v] && y[i] == y[v]) continue;\n\t\t\t\t\tif (abs(y[v] - y[i]) <= 1) Add(i, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\nvoid Tarjan(int rt) {\n\tlow[rt] = dfn[rt] = ++dfn_num;\n\tstk[++top] = rt;\n\tins[rt] = 1;\n\tfor (int i = head[rt]; i; i = edge[i].next) {\n\t\tint v = edge[i].to;\n\t\tif (!dfn[v]) {\n\t\t\tTarjan(v);\n\t\t\tlow[rt] = min(low[rt], low[v]);\n\t\t}\n\t\telse if (ins[v])\n\t\t\tlow[rt] = min(low[rt], dfn[v]);\n\t}\n\tif (low[rt] == dfn[rt]) {\n\t\ttot++;\n\t\twhile (1) {\n\t\t\tint cur = stk[top--];\n\t\t\tscc[tot].push_back(cur);\n\t\t\tbelong[cur] = tot;\n\t\t\tins[cur] = 0;\n\t\t\tif (cur == rt) break;\n\t\t}\n\t}\n}\nvoid Topo() {\n\tqueue<int> q;\n\tfor (int i = 1; i <= tot; i++) {\n\t\tif (in[i] == 0) q.push(i), f[i] = scc[i].size();\n\t}\n\twhile (q.size()) {\n\t\tint cur = q.front();\n\t\tq.pop();\n\t\tfor (int i = head2[cur]; i; i = edge2[i].next) {\n\t\t\tint v = edge2[i].to;\n\t\t\tf[v] = max(f[v], f[cur] + (int)scc[v].size());\n\t\t\tin[v]--;\n\t\t\tif (!in[v]) q.push(v);\n\t\t}\n\t}\n}\nvoid Solve() {\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!dfn[i]) Tarjan(i);\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = head[i]; j; j = edge[j].next) {\n\t\t\tint v = edge[j].to;\n\t\t\tif (belong[i] != belong[v]) {\n\t\t\t\tAdd2(belong[i], belong[v]);\n\t\t\t\tin[belong[v]]++;\n\t\t\t}\n\t\t}\n\t}\n\tTopo();\n\tint ans = 0;\n\tfor (int i = 1; i <= tot; i++) {\n\t\tans = max(ans, f[i]);\n\t}\n\tprintf(\"%d\\n\", ans);\n}\nint main() {\n\tInit();\n\tSolve();\n\treturn 0;\n}\n```",
        "postTime": 1595941123,
        "uid": 345927,
        "name": "sodak",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "[\u5728\u6211\u7684 blog \u4e2d\u98df\u7528](https://www.cnblogs.com/suxxsfe/p/12727803.html)\n\n**tarjan+DAG \u4e0a\u7684 dp**  \n\u96be\u70b9\u5728\u4e8e\u5efa\u56fe\u548c\u8fde\u8fb9\uff0c\u5176\u5b9e\u4e5f\u4e0d\u96be\uff0c\u5c31\u662f\u7ec6\u8282\u633a\u6076\u5fc3  \n~~\u6211\u548c\u6b63\u89e3\u5bf9\u62cd\u62cd\u51fa\u6765 3 \u4e2a\u9519\u8bef\u3002\u3002\u3002~~  \n\n\u4f20\u9001\u95e8\uff1a[luogu](https://www.luogu.com.cn/problem/P2403)  \n[bzoj](http://www.lydsy.com/JudgeOnline/problem.php?id=1924)  \n\n## \u9898\u76ee\u63cf\u8ff0\n\u6709\u5ea7\u5bab\u6bbf\u5448\u77e9\u9635\u72b6\uff0c\u7531 $R\\times C$ \u95f4\u77e9\u5f62\u5bab\u5ba4\u7ec4\u6210\uff0c\u5176\u4e2d\u6709 $N$ \u95f4\u5bab\u5ba4\u91cc\u57cb\u85cf\u7740\u5b9d\u85cf\uff0c\u79f0\u4f5c\u85cf\u5b9d\u5bab\u5ba4\u3002\u5bab\u6bbf\u91cc\u5916\u3001\u76f8\u90bb\u5bab\u5ba4\u95f4\u90fd\u7531\u575a\u786c\u7684\u5b9e\u4f53\u5899\u963b\u9694\uff0c\u7531\u4e00\u95f4\u5bab\u5ba4\u5230\u8fbe\u53e6\u4e00\u95f4\u53ea\u80fd\u901a\u8fc7\u4f20\u9001\u95e8\u3002\u8fd9 $N$ \u95f4\u85cf\u5b9d\u5bab\u5ba4\u6bcf\u95f4\u90fd\u67b6\u8bbe\u4e86\u4e00\u6247\u4f20\u9001\u95e8\uff0c\u6ca1\u6709\u5b9d\u85cf\u7684\u5bab\u5ba4\u4e0d\u8bbe\u4f20\u9001\u95e8\uff0c\u6240\u6709\u7684\u5bab\u5ba4\u4f20\u9001\u95e8\u5206\u4e3a\u4e09\u79cd\uff1a  \n\n1. \u201c\u6a2a\u5929\u95e8\u201d\uff1a\u7531\u8be5\u95e8\u53ef\u4ee5\u4f20\u9001\u5230\u540c\u884c\u7684\u4efb\u4e00\u5bab\u5ba4\uff1b  \n2. \u201c\u7eb5\u5bf0\u95e8\u201d\uff1a\u7531\u8be5\u95e8\u53ef\u4ee5\u4f20\u9001\u5230\u540c\u5217\u7684\u4efb\u4e00\u5bab\u5ba4\uff1b\n3. \u201c\u4efb\u610f\u95e8\u201d\uff1a\u7531\u8be5\u95e8\u53ef\u4ee5\u4f20\u9001\u5230\u4ee5\u8be5\u95e8\u6240\u5728\u5bab\u5ba4\u4e3a\u4e2d\u5fc3\u5468\u56f4 $8$ \u683c\u4e2d\u4efb\u4e00\u5bab\u5ba4\uff08\u5982\u679c\u76ee\u6807\u5bab\u5ba4\u5b58\u5728\u7684\u8bdd\uff09\u3002  \n\n\u521d\u59cb\u65f6\uff0c\u53ef\u4ee5\u7531\u4efb\u610f\u4e00\u95f4\u85cf\u5b9d\u5bab\u5ba4\u8fdb\u5165\uff0c\u5e76\u7531\u4efb\u610f\u4e00\u95f4\u85cf\u5b9d\u5bab\u5ba4\u79bb\u5f00\uff0c\u4f46\u53ea\u80fd\u8fdb\u5165\u79bb\u5f00\u4e00\u6b21  \n\n## \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u7ed9\u51fa\u4e09\u4e2a\u6b63\u6574\u6570 $N,R,C$\u3002  \n\u4ee5\u4e0b $N$ \u884c\uff0c\u6bcf\u884c\u7ed9\u51fa\u4e00\u6247\u4f20\u9001\u95e8\u7684\u4fe1\u606f\uff0c\u5305\u542b\u4e09\u4e2a\u6b63\u6574\u6570 $x_i, y_i, T_i$\uff0c\u8868\u793a\u8be5\u4f20\u9001\u95e8\u8bbe\u5728\u4f4d\u4e8e\u7b2c $x_i$ \u884c\u7b2c $y_i$ \u5217\u7684\u85cf\u5b9d\u5bab\u5ba4\uff0c\u7c7b\u578b\u4e3a $T_i$\u3002$T_i$ \u662f\u4e00\u4e2a $[1,3]$ \u95f4\u7684\u6574\u6570\uff0c$1$ \u8868\u793a\u53ef\u4ee5\u4f20\u9001\u5230\u7b2c $x_i$ \u884c\u4efb\u610f\u4e00\u5217\u7684\u201c\u6a2a\u5929\u95e8\u201d\uff0c$2$ \u8868\u793a\u53ef\u4ee5\u4f20\u9001\u5230\u4efb\u610f\u4e00\u884c\u7b2c $y_i$ \u5217\u7684\u201c\u7eb5\u5bf0\u95e8\u201d\uff0c$3$ \u8868\u793a\u53ef\u4ee5\u4f20\u9001\u5230\u5468\u56f4 $8$ \u683c\u5bab\u5ba4\u7684\u201c\u4efb\u610f\u95e8\u201d\u3002  \n\n\u4fdd\u8bc1 $1\\le x_i\\le R,1\\le y_i\\le C$\uff0c\u6240\u6709\u7684\u4f20\u9001\u95e8\u4f4d\u7f6e\u4e92\u4e0d\u76f8\u540c\u3002  \n\n## \u8f93\u51fa\u683c\u5f0f  \n\u53ea\u6709\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u4f60\u786e\u5b9a\u7684\u8def\u7ebf\u6240\u7ecf\u8fc7\u4e0d\u540c\u85cf\u5b9d\u5bab\u5ba4\u7684\u6700\u5927\u6570\u76ee\u3002  \n\n----------------  \n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u53ea\u8981\u5230\u8fbe\u5b83\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5269\u4e0b\u7684\u70b9\u5c31\u90fd\u53ef\u4ee5\u5230\u8fbe  \n\u6240\u4ee5\u6211\u4eec\u53ea\u8981 tarjan \u7f29\u70b9\u4ee5\u540e\uff0c\u6309\u7167\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u95f4\u7684\u8fb9\u7684\u5173\u7cfb\uff0c\u91cd\u65b0\u8fde\u8fb9\uff0c\u7136\u540e\u8fd9\u4e2a\u5c31\u662f\u4e00\u4e2a DAG  \n\u8fd9\u4e2a DAG \u4e0a\u7684\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u5e94\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8d70\u5230\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u80fd\u5bf9\u7b54\u6848\u4ea7\u751f\u591a\u5927\u8d21\u732e  \n\u7136\u540e\u505a\u4e2a\u7b80\u5355\u7684 dp \u5c31\u597d\u4e86\uff0c\u7528 $f_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u70b9\uff08DAG \u4e0a\u7684\uff09\u7ed3\u5c3e\uff0c\u6700\u591a\u53ef\u4ee5\u4ea7\u751f\u591a\u5927\u7684\u7b54\u6848  \n\u6700\u7ec8\u7b54\u6848\u5c31\u662f $\\max_{i=1}^{scccnt} f_i$\uff0c\u5176\u4e2d\uff0c$scccnt$ \u5f53\u7136\u5c31\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570  \n\u540c\u65f6\u4e5f\u662f\u65b0\u5efa\u7684 DAG \u7684\u70b9\u6570  \n\n---------------  \n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u8fde\u8fb9\uff0c\u76f4\u63a5\u8fde\u80af\u5b9aT\u98de  \n\n\u5bf9\u4e8e\u6bcf\u4e00\u884c\uff0c\u6240\u4ee5\u7c7b\u578b\u4e3a $1$ \u7684\u70b9\uff08\u6a2a\u7740\u7684\u95e8\uff09\uff0c\u53ef\u4ee5\u8fde\u4e00\u4e2a\u73af\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86\u4ece\u4efb\u610f\u4e00\u4e2a\u6a2a\u7740\u7684\u95e8\u8fdb\u5165\uff0c\u90fd\u80fd\u53bb\u5f80\u540c\u4e00\u884c\u7684\u5176\u5b83\u6240\u6709\u7c7b\u578b\u4e3a $1$ \u7684\u95e8  \n\u7136\u540e\u5bf9\u4e8e\u7c7b\u578b\u4e0d\u662f $1$ \u7684\u95e8\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u7c7b\u578b\u662f $1$ \u7684\u95e8\uff0c\u5411\u5b83\u4eec\u8fde\u8fb9\uff0c\u4fdd\u8bc1\u4e86\u4ece\u4efb\u610f\u4e00\u4e2a\u6a2a\u7740\u7684\u95e8\uff0c\u90fd\u53ef\u4ee5\u53bb\u5f80\u540c\u4e00\u884c\u4e2d\uff0c\u4e0d\u662f\u7c7b\u578b $1$ \u7684\u95e8  \n\u5c31\u7b26\u5408\u8981\u6c42\u4e86  \n\u5177\u4f53\u5b9e\u73b0\u8981\u5148\u5bf9\u6240\u4ee5\u95e8\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u6bcf\u4e00\u884c\u679a\u4e3e  \n\u7ec6\u8282\u6bd4\u8f83\u591a\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u4e2d\u7684\u6ce8\u91ca  \n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u5217\u4e5f\u662f\u5982\u6b64  \n\n\u5bf9\u4e8e\u90a3\u79cd\u201c\u4efb\u610f\u95e8\u201d\u66f4\u7b80\u5355\u90a3\u4e86\uff0c\u7528 `map` \u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u4e0d\u662f\u85cf\u5b9d\u5bab\u5ba4\uff0c\u5982\u679c\u662f\u5c31\u8fde\u8fb9\u5c31\u884c\u4e86  \n\n```cpp  \n#include<cstdio>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<map>\n#include<utility>\n#include<iomanip>\n#include<queue>\n#include<cstring>\n#define reg register\n#define EN std::puts(\"\")\n#define LL long long\ninline int read(){\n\tregister int x=0;register int y=1;\n\tregister char c=std::getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') y=0;c=std::getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+(c^48);c=std::getchar();}\n\treturn y?x:-x;\n}\nint n;\n#define N 100006\n#define M 1000006\nstruct data{\n\tint x,y,id,type;\n}p[N];\nint have_1[1000006],have_2[1000006];\nint fir[N],nex[M],to[M],tot;\nint fir_[N],nex_[M],to_[M],tot_;\nstd::map<std::pair<int,int>,int>map;\nint dfn[N],low[N],dfscnt;\nint scc[N],size[N],scccnt;\nint stack[N],top;\nint in[N];\nvoid debug(){\n\tint a;\n\treturn;\n}\ninline void add(int u,int v){\n\t\tif(u==4&&v==1) debug();\n\tto[++tot]=v;\n\tnex[tot]=fir[u];fir[u]=tot;\n}\ninline void add_(int u,int v){\n\tto_[++tot_]=v;\n\tnex_[tot_]=fir_[u];fir_[u]=tot_;\n}\ninline int cmpx(data x,data y){\n\tif(x.x==y.x) return x.type<y.type;//\u6a2a\u5728\u524d\n\treturn x.x<y.x; \n}\ninline int cmpy(data x,data y){\n\tif(x.y==y.y) return x.type>y.type;\n\treturn x.y<y.y;\n}\nvoid tarjan(int u){\n\tdfn[u]=low[u]=++dfscnt;stack[top++]=u;\n\tfor(reg int v,i=fir[u];i;i=nex[i]){\n\t\tv=to[i];\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);low[u]=std::min(low[u],low[v]);\n\t\t}\n\t\telse if(!scc[v]) low[u]=std::min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u]){\n\t\tscccnt++;\n\t\tdo{\n\t\t\tsize[scccnt]++;scc[stack[--top]]=scccnt;\n\t\t}while(stack[top]!=u);\n\t}\n}\ninline void build(){\n\tstd::sort(p+1,p+1+n,cmpx);\n\tfor(reg int i=1;i<=n;){\n\t\tif(!have_1[p[i].x]){\n\t\t\t//\u5982\u679c\u8fd9\u4e00\u884c\u6ca1\u6709 1 \u7c7b\u578b\u7684\u95e8\uff08\u6a2a\u7684\u95e8\uff09\uff0c\u90a3\u4e48\u8fd9\u4e00\u884c\u5185\u80af\u5b9a\u4e0d\u4f1a\u6709\u8fde\u8fb9\n\t\t\t//\u8fd9\u91cc\u5982\u679c\u4e0d\u7279\u5224\u540e\u9762\u4f1a\u51fa\u95ee\u9898\uff0c\u5728\u8fd9\u4e00\u884c\u4e00\u4e2a 1 \u7684\u95e8\u90fd\u6ca1\u6709\u7684\u60c5\u51b5\u4e0b \n\t\t\tint now_x=p[i].x;\n\t\t\tfor(i++;p[i].x==now_x;i++);\n\t\t\tcontinue;\n\t\t}\n\t\tint now_x=p[i].x,now=p[i].id;\n\t\tint last_i=i;//last_i \u662f\u73af\u4e2d\u7b2c\u4e00\u4e2a\u70b9\uff0c\u540c\u65f6\u6211\u95e8\u4e5f\u9009\u8fd9\u4e2a\u70b9\uff0c\u5411\u5176\u5b83\u7c7b\u578b\u4e0d\u662f 1 \u7684\u95e8\u8fde\u8fb9 \n\t\tfor(i++;p[i].x==now_x&&p[i].type==1&&i<=n;i++) add(p[i-1].id,p[i].id);//\u6a2a\u7684\u8fde\u6210\u73af \n\t\tadd(p[i-1].id,p[last_i].id);//\u8fde\u56de\u53bb\uff0c\u624d\u80fd\u6784\u6210\u4e00\u4e2a\u73af \n\t\tfor(;p[i].x==now_x&&i<=n;i++) add(now,p[i].id);\n\t}\n\tstd::sort(p+1,p+1+n,cmpy);\n\tfor(reg int i=1;i<=n;){\n\t\tif(!have_2[p[i].y]){//\u540c\u7406 \n\t\t\tint now_y=p[i].y;\n\t\t\tfor(i++;p[i].y==now_y;i++);\n\t\t\tcontinue;\n\t\t}\n\t\tint now_y=p[i].y,tmp=i;//\u8bb0\u5f55\u8fd9\u4e00\u5217\u662f\u4ece\u54ea\u6807\u53f7\u5f00\u59cb\u7684 \n\t\tfor(;p[i].y==now_y&&i<=n&&p[i].type==3;i++);\n\t\tint now=p[i].id,last_i=i;//last_i \u662f\u73af\u4e2d\u7b2c\u4e00\u4e2a\u70b9\uff0cnow \u5373\u4e3a\u6211\u95e8\u9009\u53d6\u7684\u90a3\u4e2a\u7c7b\u578b\u4e3a 2 \u7684\u95e8\uff0c\u4ece\u4ed6\u5411\u5176\u5b83\u7c7b\u578b\u4e0d\u4e3a 2 \u7684\u95e8\u8fde\u8fb9 \n\t\tfor(i++;p[i].y==now_y&&i<=n&&p[i].type==2;i++) add(p[i-1].id,p[i].id);//\u540c\u7406\uff0c\u7eb5\u7684\u8fde\u6210\u73af \n\t\tadd(p[i-1].id,p[last_i].id);//\u8fde\u56de\u53bb\uff0c\u624d\u80fd\u6784\u6210\u4e00\u4e2a\u73af\n\t\tfor(;p[i].y==now_y&&i<=n;i++) add(now,p[i].id);\n\t\tfor(reg int j=tmp;p[j].y==now_y&&j<=n&&p[j].type==3;j++) add(now,p[j].id);\n\t\t//\u4e0a\u9762\u4e00\u884c\u8fd9\u662f\u7c7b\u578b\u662f 3 \u7684\u95e8\uff0c\u56e0\u4e3a\u6392\u5e8f\u65f6\u628a\u4ed6\u4eec\u653e\u5728\u4e86\u6700\u524d\u9762\uff0c\u6240\u4ee5\u5148\u8bb0\u5f55\u4e0b\u8d77\u59cb\u70b9\uff0c\u8981\u5728\u786e\u5b9a\u4e86\u4e00\u4e2a\u7c7b\u578b 2 \u7684\u95e8\u4ee5\u540e\u518d\u91cd\u65b0\u4ece\u8d77\u59cb\u70b9\u5f00\u59cb\u5faa\u73af\uff0c\u8fde\u8fb9 \n\t}\n}\nconst int dx[8]={0,0,1,1,1,-1,-1,-1};\nconst int dy[8]={-1,1,-1,0,1,-1,0,1};\ninline void build_8(){\n\tstd::pair<int,int>pair;\n\tfor(reg int i=1;i<=n;i++)if(p[i].type==3){\n\t\treg int x=p[i].x,y=p[i].y,id=p[i].id,x_,y_;\n\t\tfor(reg int k=0;k<8;k++){\n\t\t\tx_=x+dx[k];y_=y+dy[k];\n\t\t\tpair=std::make_pair(x_,y_);\n\t\t\tif(map.find(pair)!=map.end()) add(id,map[pair]);\n\t\t}\n\t}\n}\ninline void rebuild(){\n\tfor(reg int i=1;i<=n;i++)\n\t\tfor(reg int j=fir[i];j;j=nex[j])if(scc[i]!=scc[to[j]])\n\t\t\tadd_(scc[i],scc[to[j]]),in[scc[to[j]]]++;\n}\nstd::queue<int>q;\nint f[100006];\ninline void topo(){\n\tfor(reg int i=1;i<=scccnt;i++)if(!in[i])\n\t\tq.push(i),f[i]=size[i];\n\treg int u,v;\n\twhile(!q.empty()){\n\t\tu=q.front();q.pop();\n\t\tfor(reg int i=fir_[u];i;i=nex_[i]){\n\t\t\tv=to_[i];\n\t\t\tf[v]=std::max(f[v],f[u]);\n\t\t\tif(!--in[v]) f[v]+=size[v],q.push(v);\n\t\t}\n\t}\n}\nint main(){\n//\t\tstd::freopen(\"1.in\",\"r\",stdin);\n\tn=read();read();read();\n\tfor(reg int i=1;i<=n;i++){\n\t\tp[i].x=read();p[i].y=read();p[i].type=read();p[i].id=i;\n\t\tmap[std::make_pair(p[i].x,p[i].y)]=i;\n\t\tif(p[i].type==1) have_1[p[i].x]=1;\n\t\tif(p[i].type==2) have_2[p[i].y]=1;\n\t}\n\tbuild();build_8();\n\tfor(reg int i=1;i<=n;i++)if(!dfn[i]) tarjan(i);\n\trebuild();\n\ttopo();\n\treg int ans=0;\n\tfor(reg int i=1;i<=scccnt;i++) ans=std::max(ans,f[i]);\n\tstd::printf(\"%d\",ans);\n//\t\tEN;EN;EN;\n//\t\tfor(reg int i=1;i<=n;i++){\n//\t\t\tstd::printf(\"%d : \",i);\n//\t\t\tfor(reg int j=fir[i];j;j=nex[j]) std::printf(\"%d \",to[j]);\n//\t\t\tEN;\n//\t\t}\n//\t\tfor(reg int i=1;i<=n;i++) std::printf(\"%d \",scc[i]);EN;\n//\t\tstd::puts(\"new : \");\n//\t\tfor(reg int i=1;i<=n;i++){\n//\t\t\tstd::printf(\"%d : \",i);\n//\t\t\tfor(reg int j=fir_[i];j;j=nex_[j]) std::printf(\"%d \",to_[j]);\n//\t\t\tEN;\n//\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1587212133,
        "uid": 164432,
        "name": "suxxsfe",
        "ccfLevel": 9,
        "title": "[bzoj1924]P2403 [SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf"
    },
    {
        "content": "\u5c0f\u5e38\u6570\u54c8\u5e0c\u8868\u505a\u6cd5\uff0c\u4e0d\u7528\u6392\u5e8f\uff0c\u7ea6300msAC\n\n\u7ec6\u8282\u9898\uff0c\u601d\u8def\u5f88\u597d\u60f3\u4f46\u4ee3\u7801\u4e0d\u597d\u8c03\uff0c\u4ec5\u6570\u7ec4\u5c31\u5f00\u4e8629\u4e2a\n\n\u601d\u8def\uff1a\n\n\u5bf9\u6240\u6709\u51fa\u73b0\u7684\u884c\u548c\u5217\u5404\u5efa\u4e00\u4e2a\u865a\u70b9\uff0c\u5bf9\u4e8e\u6a2a\u5929\u95e8\uff0c\u5411\u884c\u865a\u70b9\u8fde\u8fb9\uff0c\u5bf9\u4e8e\u7eb5\u5bf0\u95e8\uff0c\u5411\u5217\u865a\u70b9\u8fde\u8fb9\u3002\u4efb\u610f\u95e8\u8f83\u4e3a\u590d\u6742\uff0c\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u51fa\u73b0\u7684\u5750\u6807\uff0c\u4f9d\u6b21\u5224\u65ad8\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u6709\u70b9\u5c31\u8fde\u8fb9\u3002\u8fde\u5b8c\u8fb9\u8dd1tarjan\uff0c\u7136\u540e\u62d3\u6251\u3002\n\n\u6ce8\u610f\u4e8b\u9879\uff1a\n\n1.\u4efb\u610f\u95e8\u5fc5\u987b\u5728\u8bfb\u5165\u6240\u6709\u70b9\u4ee5\u540e\u518d\u8fde\u8fb9\uff0c\u5426\u5219\u4f1a\u5c11\u8fde\n\n2.\u7edf\u8ba1\u5f3a\u8fde\u901a\u5206\u91cf\u5927\u5c0f\u65f6\u4e0d\u8981\u7edf\u8ba1\u865a\u70b9\n\n\u8be6\u7ec6\u6ce8\u91ca\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\nconst int N=300009,M=1000009,Q=100009;\nint f1[M],f2[M];//\u5b58\u50a8\u865a\u70b9\u5e8f\u53f7\nint ne[M],to[M],he[N];//\u8fde\u8fb9\nint n1[Q],t1[Q],u1[Q],v1[Q],h1[N];//\u54c8\u5e0c\u8868\nint s1[N],s2[N],s3[N];//\u5b58\u50a8\u4efb\u610f\u95e8\nbool b[N];//\u5224\u65ad\u662f\u5426\u4e3a\u865a\u70b9\nint find(const int&x,const int&y){\n\tregister int z=((x<<5)+y)&262143,i;//\u4e71\u5199\u7684\u54c8\u5e0c\n\tfor(i=h1[z];i;i=n1[i])if(t1[i]==x&&u1[i]==y)return v1[i];\n\treturn 0;\n}\nint dfn[N],low[N],fa[N],st[N],tp,id,c,sz[N];//\u8dd1tarjan\u7528\u7684\uff0csz\u4e3a\u5206\u91cf\u5927\u5c0f\nvoid tarjan(const int&x){\n\tdfn[x]=low[x]=++id,st[++tp]=x;\n\tfor(register int i=he[x],j;i;i=ne[i]){\n\t\tif(!dfn[j=to[i]]){\n\t\t\ttarjan(j);\n\t\t\tif(low[j]<low[x])low[x]=low[j];\n\t\t}else if(!fa[j]&&dfn[j]<low[x])low[x]=dfn[j];\n\t}\n\tif(dfn[x]==low[x]){\n\t\t++c;\n\t\twhile(st[tp]!=x)sz[c]+=b[st[tp]],fa[st[tp--]]=c;\n\t\tsz[c]+=b[st[tp]],fa[st[tp--]]=c;\n\t}\n}\nint n2[M],t2[M],u2[M],h2[N],tt;//\u7b2c\u4e8c\u6b21\u54c8\u5e0c\uff0c\u9632\u6b62\u7ed9DAG\u8fde\u8fb9\u65f6\u8fde\u91cd\u8fb9\nbool qry(const int&x,const int&y){\n\tregister int z=((x<<5)+y)&262143,i;\n\tfor(i=h2[z];i;i=n2[i])if(t2[i]==x&&u2[i]==y)return 0;\n\tn2[++tt]=h2[z],t2[tt]=x,u2[tt]=y,h2[z]=tt;\n\treturn 1;\n}\nint dg[N],q[N],dp[N];//\u62d3\u6251\u6392\u5e8f\u7528\u7684\nint h3[N],t3[M],n3[M];//DAG\u7684\u8fde\u8fb9\nint main(){\n    register int n,i,j,k,l,g,h,t=0,v=0,w=0,qh=0,qt=0;\n    scanf(\"%d%*d%*d\",&n),++n;\n    while(--n){\n    \tscanf(\"%d%d%d\",&i,&j,&k);\n    \tif(!f1[i])f1[i]=++v;\n    \tif(!f2[j])f2[j]=++v;//\u589e\u52a0\u65b0\u7684\u865a\u70b9\n    \tg=f1[i],h=f2[j],l=((i<<5)+j)&262143,++v;\n\t\tn1[n]=h1[l],t1[n]=i,u1[n]=j,v1[n]=v,h1[l]=n,b[v]=1;//\u5c06\u70b9\u5b58\u5165\u54c8\u5e0c\u8868\n\t\tne[++t]=he[g],to[t]=v,he[g]=t;\n\t\tne[++t]=he[h],to[t]=v,he[h]=t;//\u4ece\u865a\u70b9\u8fde\u8fb9\n    \tif(k==1)ne[++t]=he[v],to[t]=g,he[v]=t;\n    \telse if(k==2)ne[++t]=he[v],to[t]=h,he[v]=t;//\u5411\u865a\u70b9\u8fde\u8fb9\n    \telse s1[++w]=i,s2[w]=j,s3[w]=v;//\u5b58\u50a8\u4efb\u610f\u95e8\n\t}\n\tfor(l=1;l<=w;++l){\n\t\ti=s1[l],j=s2[l],g=s3[l];\n\t\tif(k=find(i-1,j-1),k)ne[++t]=he[g],to[t]=k,he[g]=t;\n    \tif(k=find(i-1,j),k)ne[++t]=he[g],to[t]=k,he[g]=t;\n    \tif(k=find(i-1,j+1),k)ne[++t]=he[g],to[t]=k,he[g]=t;\n    \tif(k=find(i,j-1),k)ne[++t]=he[g],to[t]=k,he[g]=t;\n    \tif(k=find(i,j+1),k)ne[++t]=he[g],to[t]=k,he[g]=t;\n    \tif(k=find(i+1,j-1),k)ne[++t]=he[g],to[t]=k,he[g]=t;\n    \tif(k=find(i+1,j),k)ne[++t]=he[g],to[t]=k,he[g]=t;\n    \tif(k=find(i+1,j+1),k)ne[++t]=he[g],to[t]=k,he[g]=t;//\u4efb\u610f\u95e8\u8fde\u8fb9\n\t}\n\tfor(i=1;i<=v;++i)if(!dfn[i])tarjan(i);\n\tfor(i=1,t=0;i<=v;++i){\n\t\tfor(k=fa[i],j=he[i];j;j=ne[j]){\n\t\t\tl=fa[to[j]];\n\t\t\tif(k!=l&&qry(k,l))n3[++t]=h3[k],t3[t]=l,h3[k]=t,++dg[l];//DAG\u8fde\u8fb9\uff0c\u7edf\u8ba1\u5165\u5ea6\n\t\t}\n\t}\n\tfor(i=1;i<=c;++i)if(!dg[i])q[++qt]=i,dp[i]=sz[i];//\u521d\u59cb\u5165\u961f\n\twhile(qh!=qt){\n\t\tfor(j=h3[i=q[++qh]];j;j=n3[j]){\n\t\t\t--dg[k=t3[j]];\n\t\t\tif(!dg[k])q[++qt]=k;\n\t\t\tl=dp[i]+sz[k];\n\t\t\tif(dp[k]<l)dp[k]=l;\n\t\t}\n\t}//\u62d3\u6251\u6392\u5e8f\n\tfor(i=1,t=0;i<=c;++i)if(t<dp[i])t=dp[i];\n\tprintf(\"%d\",t);\n    return 0;\n}\n```\n",
        "postTime": 1573051491,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "### \u6211\u8981\u8bf4\uff1a\n## \u8bb0\u4f4f\uff01map\u4e00\u5b9a\u8981\u8fd9\u4e48\u7528\uff1a\n```\nif(mp[x[i]+dx[j]].find(y[i]+dy[j])!=mp[x[i]+dx[j]].end()) \nadd(i,mp[x[i]+dx[j]][y[i]+dy[j]]);\n```\n#### \u3000\u3000\u800c\u4e0d\u662f\n```\nR tmp=mp[x[i]+dx[j]][y[i]+dy[j]];\nif(tmp) add(i,tmp);\n```\n## \u5426\u5219\u4f60~~\u53ef\u80fd~~\u4f1aMLE\n#### ~~\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48QAQ~~\n\n### \u53e6\uff1a\u6211\u7684\u4ee3\u7801\u53ea\u670970\u884c\uff0c\u56e0\u4e3a\u6ca1\u6709\u5404\u79cd\u6392\u5e8f\uff0c\u76f4\u63a5\u5efa\u56fe\uff0c\u8dd1\u7684\u4e5f\u5f88\u5feb\n\n\u5efa\u56fe\uff1a\u9009\u5b9a\u4e00\u4e2a\u6a2a\u5929\u95e8\uff0c\u5411\u5728\u8fd9\u4e00\u884c\u4e0a\u7684\u6a2a\u5929\u95e8\u8fde\u65e0\u5411\u8fb9\uff0c\u5269\u4e0b\u7684\u95e8\u8fde\u6709\u5411\u8fb9\uff1b\u7eb5\u5bf0\u95e8\u4e00\u6837\u7684\u65b9\u6cd5\n\n\u7528map\u5224\u81ea\u7531\u95e8\u65c1\u8fb9\u516b\u4e2a\u70b9\u662f\u5426\u5b58\u5728\uff0c\u5b58\u5728\u5c31\u8fde\u8fb9\uff1b\n\n\u6700\u540etarjan\u7f29\u70b9\uff0c\u7528dp\u6c42\u6700\u957f\u8def\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<vector>\n#include<map>\n#define R register int\nconst int dx[]={0,1,1,1,0,-1,-1,-1},dy[]={1,1,0,-1,-1,-1,0,1};\nusing namespace std;\ninline int g() {\n\tR ret=0; register char ch; while(!isdigit(ch=getchar())) ;\n\tdo ret=ret*10+(ch^48); while(isdigit(ch=getchar())); return ret;\n}\n#define pb(x) push_back(x) \nint k,n,m,cnt=1,ind,cc,top,ans,num;\nint lst[100010],lst2[100010],x[100010],y[100010],op[100010],d[100010];\nint vr[1000010],nxt[1000010],fir[1000010],dfn[100010],scc[100010],stk[100010],low[100010],c[100010];\nvector<int>a[1000010],b[1000010];\nmap<int,int> mp[1000010];\nbool vis[100010];\ninline void add(int u,int v) {if(u==v) return ;vr[++cnt]=v,nxt[cnt]=fir[u],fir[u]=cnt;}\ninline void init() {\n\tfor(R i=1;i<=n;++i) {\n\t\tR x=0,sz=a[i].size();\n\t\tfor(R j=0;j<sz;++j) if(op[a[i][j]]==1) {x=a[i][j]; break;}\n\t\tfor(R j=0;j<sz;++j) {add(x,a[i][j]); if(op[a[i][j]]==1) add(a[i][j],x);}\n\t}\n\tfor(R i=1;i<=m;++i) {\n\t\tR x=0,sz=b[i].size();\n\t\tfor(R j=0;j<sz;++j) if(op[b[i][j]]==2) {x=b[i][j]; break;}\n\t\tfor(R j=0;j<sz;++j) {add(x,b[i][j]); if(op[b[i][j]]==2) add(b[i][j],x);}\n\t}\n\tfor(R i=1;i<=k;++i) if(op[i]==3) for(R j=0;j<8;++j) \n\t\tif(mp[x[i]+dx[j]].find(y[i]+dy[j])!=mp[x[i]+dx[j]].end()) add(i,mp[x[i]+dx[j]][y[i]+dy[j]]);\n}\nvoid tarjan(int u) { low[u]=dfn[u]=++num; stk[++top]=u,vis[u]=true;\n\tfor(R i=fir[u];i;i=nxt[i]) { R v=vr[i];\n\t\tif(!dfn[v]) {\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t} else if(vis[v]) low[u]=min(low[u],dfn[v]);\n\t} if(low[u]==dfn[u]) {\n\t\tR tmp; ++cc;\n\t\tdo tmp=stk[top],--top,vis[tmp]=false,c[tmp]=cc,++scc[cc]; while(tmp!=u);\n\t}\n}\nint vv[1000010],nn[1000010],ff[1000010];\ninline void addc(int u,int v) {vv[++cnt]=v,nn[cnt]=ff[u],ff[u]=cnt;}\ninline void solve() {\n\tcnt=1; for(R u=1;u<=k;++u) for(R i=fir[u];i;i=nxt[i]) \n\t\tif(c[u]!=c[vr[i]]) addc(c[u],c[vr[i]]);\n}\ninline void dp(int u) { vis[u]=true;\n\tfor(R i=ff[u];i;i=nn[i]) { R v=vv[i];\n\t\tif(!vis[v]) dp(v);\n\t\td[u]=max(d[v],d[u]);\n\t} d[u]+=scc[u]; ans=max(d[u],ans);\n}\nsigned main() {\n\tk=g(),n=g(),m=g();\n\tfor(R i=1;i<=k;++i) {\n\t\tx[i]=g(),y[i]=g(),op[i]=g();\n\t\tmp[x[i]][y[i]]=i;\n\t\ta[x[i]].pb(i),b[y[i]].pb(i);\n\t} init(); for(R i=1;i<=k;++i) if(!dfn[i]) tarjan(i);\n\tsolve(); memset(vis,false,sizeof(vis));\n\tfor(R i=1;i<=cc;++i) if(!vis[i]) dp(i);\n\tprintf(\"%d\\n\",ans); return 0;\n}\n```",
        "postTime": 1555847382,
        "uid": 115086,
        "name": "Tari",
        "ccfLevel": 7,
        "title": "Jack's \u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u771f\u662f\u4e00\u9053\u597d(gou)\u9898\uff0c\u6211\u7684\u505a\u6cd5\u4f3c\u4e4e\u6709\u70b9\u5947\u602a\uff0c\u4e0d\u662f\u50cf\u7f51\u4e0a\u90a3\u6837\u62d3\u6251dp\uff0c\u800c\u662f\u8dd1\u6700\u957f\u8def\u3002\u9996\u5148\u5f3a\u8054\u901a\u7f29\u70b9\uff0c\u907f\u514d\u51fa\u73b0\u73af\u7684\u60c5\u51b5\uff0c\u4e4b\u540e\u6211\u4eec\u628a\u8054\u901a\u8fde\u5728\u4e00\u8d77\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0cx\u8fdey\uff0c\u5219\u8fb9\u6743\u4e3ay\u7684\u8282\u70b9\u6570\u3002\u518d\u8bbe\u4e24\u4e2a\u70b9st\u4e0eed\uff0c\u522b\u770b\u9898\u76ee\u8bf4\u53ef\u4ee5\u4ece\u4efb\u610f\u5bab\u5ba4\u8fdb\u5165\uff0c\u4efb\u610f\u5bab\u5ba4\u51fa\u53bb\uff0c\u4f46\u5176\u5b9e\u53ea\u9700\u628ast\u4e0e\u5165\u5ea6\u4e3a0\u7684\u8054\u901a\u5757\u76f8\u8fde\uff08\u8fb9\u6743\u4e3a\u8054\u901a\u5757\u70b9\u6570\uff09\uff0c\u51fa\u5ea6\u4e3a0\u7684\u70b9\u4e0eed\u76f8\u8fde\uff08\u8fb9\u6743\u4e3a0\uff09\u5c31\u53ef\u4ee5\u4e86\u3002\u4e3a\u4ec0\u4e48\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u8d70\u7684\u6700\u957f\uff0c\u5f88\u597d\u7406\u89e3\u5427\u3002\u6700\u540e\u518d\u63d0\u9192\u4e00\u70b9\uff0c\u5efa\u8fb9\u8981\u4f18\u5316\uff0c\u4e0d\u7136\u5c31\u7b97\u4f60\u5176\u5b83\u90fd\u6253\u5bf9\u4e86\uff0c\u4e5f\u53ea\u670940\u5206\uff0c\u4e0d\u8981\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\nint dx[8]={1,0,-1,0,1,1,-1,-1};\nint dy[8]={0,1,0,-1,1,-1,1,-1};\nstruct node\n{\n    int x,y,next;\n}a[4110000];int len,last[210000];\nstruct bian\n{\n    int x,y,c,bl;\n}tr[210000];\nstruct edge\n{\n    int x,y,c,next;\n}b[3110000];int trlen,trlast[210000];\nvoid trins(int x,int y,int c)\n{\n    trlen++;\n    b[trlen].x=x;b[trlen].y=y;b[trlen].c=c;\n    b[trlen].next=trlast[x];trlast[x]=trlen;\n}\nvoid ins(int x,int y)\n{\n    len++;\n    a[len].x=x;a[len].y=y;\n    a[len].next=last[x];last[x]=len;\n}\nint id,cnt,top;\nint low[210000],dfn[210000];\nint sta[210000],belong[210000],tot[210000],list[210000];\nint chu[210000],ru[210000],ss[210000];\nbool v[210000];\nvoid dfs(int x)\n{\n    dfn[x]=low[x]=++id;\n    sta[++top]=x;v[x]=true;\n    for(int k=last[x];k;k=a[k].next)\n    {\n        int y=a[k].y;\n        if(dfn[y]==-1)\n        {\n            dfs(y);\n            low[x]=min(low[x],low[y]);\n        }\n        else\n        {\n            if(v[y]==true)low[x]=min(low[x],dfn[y]);\n        }\n    }\n    if(low[x]==dfn[x])\n    {\n        cnt++;int i;\n        do\n        {\n            i=sta[top--];\n            v[i]=false;\n            tot[cnt]++;\n            belong[i]=cnt;\n        }while(i!=x);\n    }\n}\nint cmp1(const void *xx,const void *yy)\n{\n    bian n1=*(bian *)xx;\n    bian n2=*(bian *)yy;\n    if(n1.x==n2.x)\n    {\n        if(n1.y>n2.y)return 1;\n        if(n1.y<n2.y)return -1;\n        return 0;\n    }\n    if(n1.x>n2.x)return 1;\n    if(n1.x<n2.x)return -1;\n    return 0;\n}\nint cmp2(const void *xx,const void *yy)\n{\n    bian n1=*(bian *)xx;\n    bian n2=*(bian *)yy;\n    if(n1.y>n2.y)return 1;\n    if(n1.y<n2.y)return -1;\n    return 0;\n}\nint n;\nint erfen(int xx,int yy)\n{\n    int l=1,r=n;\n    while(l<=r)\n    {\n        int mid=(l+r)/2;\n        if(tr[mid].x>xx)r=mid-1;\n        else if(tr[mid].x<xx)l=mid+1;\n        else if(tr[mid].y>yy)r=mid-1;\n        else if(tr[mid].y<yy)l=mid+1;\n        else return tr[mid].bl;\n    }\n    return -1;\n}\nint main()\n{\n    len=0;memset(last,0,sizeof(last));\n    int R,C;\n    scanf(\"%d%d%d\",&n,&R,&C);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d%d\",&tr[i].x,&tr[i].y,&tr[i].c);\n        tr[i].bl=i;\n    }   \n    qsort(tr+1,n,sizeof(bian),cmp2);\n    for(int i=1;i<=n;i++)\n    {\n        if(tr[i].c==2)\n        {\n            int j=i+1;\n            while(tr[i].y==tr[j].y)ins(tr[i].bl,tr[j].bl),j++;\n            j=i-1;\n            while(tr[i].y==tr[j].y)ins(tr[i].bl,tr[j].bl),j--;\n        }\n    }\n    qsort(tr+1,n,sizeof(bian),cmp1);\n    for(int i=1;i<=n;i++)\n    {\n        if(tr[i].c==1)\n        {\n            int j=i+1;\n            while(tr[i].x==tr[j].x)ins(tr[i].bl,tr[j].bl),j++;\n            j=i-1;\n            while(tr[i].x==tr[j].x)ins(tr[i].bl,tr[j].bl),j--;\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(tr[i].c==3)\n        {\n            for(int j=0;j<8;j++)\n            {\n                int xx=tr[i].x+dx[j],yy=tr[i].y+dy[j];\n                if(xx<1 || xx>R || yy<1 || yy>C)continue;\n                int ans=erfen(xx,yy);\n                if(ans!=-1)ins(tr[i].bl,ans);\n            }\n        }\n    }               \n    id=cnt=top=0;\n    memset(dfn,-1,sizeof(dfn));\n    memset(low,0,sizeof(low));\n    memset(belong,0,sizeof(belong));\n    memset(v,false,sizeof(v));\n    memset(sta,0,sizeof(sta));\n    memset(tot,0,sizeof(tot));\n    for(int i=1;i<=n;i++)\n    {\n        if(dfn[i]==-1)dfs(i);\n    }\n    trlen=0;memset(trlast,0,sizeof(trlast));\n    for(int i=1;i<=len;i++)\n    {\n        if(belong[a[i].x]!=belong[a[i].y])\n        {\n            chu[belong[a[i].x]]++;\n            ru[belong[a[i].y]]++;\n            trins(belong[a[i].x],belong[a[i].y],tot[belong[a[i].y]]);\n        }\n    }\n    memset(ss,-1,sizeof(ss));\n    memset(v,false,sizeof(v));\n    int st=cnt+1,ed=cnt+2;\n    for(int i=1;i<=cnt;i++)\n    {\n        if(chu[i]==0)trins(i,ed,0);\n        if(ru[i]==0)trins(st,i,tot[i]);\n    }\n    int head=1,tail=2;ss[st]=0;\n    list[head]=st;v[st]=true;\n    while(head<=tail)\n    {\n        int x=list[head];\n        for(int k=trlast[x];k;k=b[k].next)\n        {\n            int y=b[k].y;\n            if(ss[y]<ss[x]+b[k].c)\n            {\n                ss[y]=ss[x]+b[k].c;\n                if(v[y]==false)\n                {\n                    v[y]=true;\n                    list[tail++]=y;\n                }\n            }\n        }\n        v[x]=false;\n        head++;\n    }\n    printf(\"%d\\n\",ss[ed]);\n    return 0;\n}   \n```",
        "postTime": 1518419261,
        "uid": 29342,
        "name": "galiqing",
        "ccfLevel": 7,
        "title": "P2403 [SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf"
    },
    {
        "content": "# \u849f\u84bb\u53d1\u7bc7\u9898\u89e3\u3002\u3002\u3002\n\n### Tarjan\u7f29\u70b9\uff0c\u62d3\u6251\u6392\u5e8f\u697c\u4e0b\u5927\u4f6c\u4eec\u5df2\u7ecf\u8bf4\u5f97\u5f88\u6e05\u695a\u4e86\n\n\u90a3\u6211\u6765\u8bf4\u4e00\u4e0b\u81ea\u5df1\u5efa\u56fe\u7684\u601d\u8def\u5427\n\n\u9996\u5148\u5728\u6bcf\u884c\u6bcf\u5217\u5404\u5efa\u4e00\u4e2a\u70b9\uff0c\u5411\u8fd9\u4e00\u884c\u6216\u8fd9\u4e00\u5217\u7684\u6bcf\u4e00\u4e2a\u70b9\u5efa\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u6a2a\u95e8\u6216\u7eb5\u95e8\u5c31\u53ef\u4ee5\u5411\u8fd9\u4e00\u884c\u6216\u8fd9\u4e00\u5217\u7684\u70b9\u5efa\u4e00\u6761\u6709\u5411\u8fb9\n\n\u800c\u81ea\u7531\u95e8\uff0c\u6211\u5efa\u4e86\u4e00\u4e2amap\n```\nmap<pair<int,int>,int>mp;\n```\npair\u5b58\u7684\u662f\u5750\u6807\uff0c\u6620\u5c04\u7684\u662f\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7\u3002\n\u5982\u679c\u4e00\u4e2a\u70b9\u6709\u81ea\u7531\u95e8\uff0c\u5c06\u5468\u56f4\u516b\u4e2a\u70b9\u5750\u6807\u8d70\u4e00\u904d\uff0c\u5982\u679cmap\u6709\u5bf9\u5e94\u5c31\u5411\u90a3\u4e2a\u70b9\u5efa\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u65b0\u5efa\u4e00\u4e2a\u70b9\n\n\u7a7a\u95f4\u4f3c\u4e4e\u6709\u70b9\u5927\u3002\u3002\u3002\u62d3\u6251\u7684\u6570\u7ec4\u90fd\u662f\u7528\u7684\u4e4b\u524dTarjan\u7684\n\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<map> \nusing namespace std;\nstruct Edg{\n    int to,nxt,from;\n}p[10000100];\nmap<pair<int,int>,int>mp;\ninline int read(){\n    int x=0,f=1; char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1; ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-48; ch=getchar();}\n    return f*x;    \n}\nint dfn[3000100],low[3000100],e[3000100];\nint head[3000100],st[3000100],po[3000100];\nint col[3000100],op[3000100],num,mun,xi,yi,mag;\nint sor,cnt,top,n,m,s,t,alg,maxa,r,c;\nint dir[2][8]={{-1,-1,-1,0,0,1,1,1},{-1,0,1,-1,1,-1,0,1}};\nbool vis[3000100];\nvoid add(int from,int to){\n    p[++num].to=to;\n    p[num].from=from;\n    p[num].nxt=head[from];\n    head[from]=num;\n}\nvoid ad(int from,int to){\n    p[++mun].to=to;\n    p[mun].nxt=head[from];\n    head[from]=mun;\n}\nvoid tarjan(int i){\n    dfn[i]=low[i]=++cnt;\n    st[++top]=i;\n    vis[i]=1;\n    for(int x=head[i];x;x=p[x].nxt){\n        if(!dfn[p[x].to]){\n            tarjan(p[x].to);\n            low[i]=min(low[i],low[p[x].to]);\n        }\n        else if(vis[p[x].to]){\n            low[i]=min(low[i],dfn[p[x].to]);\n        }\n    }\n    if(low[i]==dfn[i]){\n        sor++;\n        while(i!=st[top]){\n            po[sor]+=op[st[top]];col[st[top]]=sor;vis[st[top]]=0;top--;\n        }\n        po[sor]+=op[st[top]];col[st[top]]=sor;vis[st[top]]=0;top--;\n    }\n}\nvoid topo(){\n    int j=0,k=0;\n    for(int x=1;x<=sor;x++){\n    \tif(!e[x])dfn[++j]=x;low[x]=po[x];\n    }\n    while(k<j){\n        int u=dfn[++k];\n        for(int x=head[u];x;x=p[x].nxt){\n            if(!(--e[p[x].to]))dfn[++j]=p[x].to;\n            low[p[x].to]=max(low[p[x].to],low[u]+po[p[x].to]);\n        }\n    }\n}\nint main(){\n    cin>>n>>r>>c;\n    int mu=r+c;\n    for(int x=1;x<=n;x++){\n    \txi=read();yi=read();mag=read();\n    \tint w;\n    \tif(mp.count(make_pair(xi,yi))){\n    \t\tw=mp[make_pair(xi,yi)];\n        }\n        else w=++mu,mp[make_pair(xi,yi)]=mu;\n        op[w]=1;\n        add(xi,w);add(yi+r,w);\n        if(mag==1)add(w,xi);\n        if(mag==2)add(w,yi+r);\n        if(mag==3){\n            for(int y=0;y<8;y++){\n                if(xi+dir[0][y]>0 and xi+dir[0][y]<=r and yi+dir[1][y]>0 and yi+dir[1][y]<=c){\n                    if(!mp.count(make_pair(xi+dir[0][y],yi+dir[1][y])))mp[make_pair(xi+dir[0][y],yi+dir[1][y])]=++mu;\n                    add(w,mp[make_pair(xi+dir[0][y],yi+dir[1][y])]);\n                }\n            }\n        }\n    }\n    for(int x=1;x<=r+c+n;x++){\n        if(!dfn[x])tarjan(x);\n    }\n    memset(head,0,sizeof(head));\n    for(int x=1;x<=num;x++){\n        if(col[p[x].from]!=col[p[x].to])e[col[p[x].to]]++,ad(col[p[x].from],col[p[x].to]);\n    }\n    topo();\n    for(int x=1;x<=sor;x++)maxa=max(maxa,low[x]);\n    cout<<maxa<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1528089867,
        "uid": 49262,
        "name": "The_Phoenix",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2403 \u3010[SDOI2010]\u6240\u9a7c\u95e8\u738b\u7684\u5b9d\u85cf\u3011"
    }
]