[
    {
        "content": "\n[\u4fde\u9f0e\u529b\u5927\u725b\u7684\u8bfe\u4ef6](http://www.docin.com/p-1387370338.html)\n\n\u5bf9\u4e8e\u539f\u56fe\u4ee5 $t$ \u4e3a\u6839\u5efa\u51fa\u4efb\u610f\u4e00\u68f5\u6700\u77ed\u8def\u5f84\u6811 $T$\uff0c\u5373\u53cd\u7740\u4ece $t$ \u8dd1\u51fa\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def $dis$\n\n\u5b83\u6709\u4e00\u4e9b\u6027\u8d28\uff1a\n\n**\u6027\u8d281\uff1a**\n\n\u5bf9\u4e8e\u4e00\u6761 $s$ \u5230 $t$ \u7684\u8def\u5f84\u7684\u8fb9\u96c6 $P$\uff0c\u53bb\u6389 $P$ \u4e2d\u548c $T$ \u7684\u4ea4\u96c6\uff0c\u8bb0\u4e3a $P'$\u3002\n\n\u90a3\u4e48 $P'$ \u5bf9\u4e8e\u4e2d\u4efb\u610f\u76f8\u90bb(\u4ece $s$ \u5230 $t$ \u7684\u987a\u5e8f)\u7684\u4e24\u6761\u8fb9 $e,f$\uff0c\u6ee1\u8db3 $f$ \u7684\u8d77\u70b9\u5728 $T$ \u4e2d\u4e3a $e$ \u7684\u7ec8\u70b9\u7684\u7956\u5148\u6216\u8005\u4e3a\u76f8\u540c\u70b9\u3002\n\n\u56e0\u4e3a $P$ \u4e2d $e,f$ \u4e4b\u95f4\u7531\u6811\u8fb9\u76f8\u8fde\u6216\u8005\u76f4\u63a5\u76f8\u8fde\u3002\n\n**\u6027\u8d282\uff1a**\n\n\u5bf9\u4e8e\u4e0d\u5728 $T$ \u4e2d\u7684\u8fb9 $e$ \uff0c\u8bbe $u$ \u4e3a\u8d77\u70b9\uff0c$v$ \u4e3a\u7ec8\u70b9\uff0c$w$\u4e3a\u6743\u503c\u3002\n\n\u5b9a\u4e49 $\\Delta_e=dis_v+w-dis_u$\uff0c\u5373\u9009\u8fd9\u6761\u8fb9\u7684\u8def\u5f84\u548c\u6700\u77ed\u8def\u7684\u957f\u5ea6\u7684\u5dee\n\n\u8bbe $L_P$ \u8868\u793a\u8def\u5f84\u957f\u5ea6\uff0c\u5219\u6709\n\n$$L_P=dis_s+\\sum_{e\\in p'}\\Delta_e$$\n\n\u8fd9\u5f88\u663e\u7136\u3002\n\n**\u6027\u8d283\uff1a**\n\n\u5bf9\u4e8e\u6ee1\u8db3\u6027\u8d28 $1$ \u7684 $P'$\u7684\u5b9a\u4e49\u7684\u8fb9\u96c6 $S$\uff0c\u6709\u4e14\u4ec5\u6709\u4e00\u6761 $s$ \u5230 $t$ \u7684\u8def\u5f84\u7684\u8fb9\u96c6 $P$\uff0c\u4f7f\u5f97 $P'=S$\u3002\n\n\u56e0\u4e3a\u6811 $T$ \u4e0a\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8def\u5f84\u3002\n\n**\u95ee\u9898\u8f6c\u5316**\n\n\u6c42\u7b2c $k$ \u5c0f\u7684\u6ee1\u8db3\u6027\u8d28 $1$ \u7684 $P'$\u7684\u5b9a\u4e49\u7684\u8fb9\u96c6\n\n**\u7b97\u6cd5**\n\n\u7528\u5c0f\u6839\u5806\u7ef4\u62a4\u8fb9\u96c6 $P$\n\n\u521d\u59cb $P$ \u4e3a\u7a7a\u96c6\uff08\u5b9e\u9645\u4e0a\u53ea\u8981\u7ef4\u62a4\u8fb9\u96c6\u5f53\u524d\u5c3e\u90e8\u7684\u8fb9\u7684\u8d77\u70b9\u662f\u54ea\u4e00\u4e2a\u5c31\u597d\u4e86\uff0c\u7a7a\u96c6\u5373 $s$\uff09\n\n\u6bcf\u6b21\u53d6\u51fa\u6700\u5c0f\u6743\u503c\u7684\u8fb9\u96c6 $P$\uff0c\u8bbe\u5f53\u524d\u5c3e\u90e8\u7684\u8fb9\u7684\u8d77\u70b9\u4e3a $x$\n\n\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u8fb9\u96c6\uff1a\n\n**1.**\u66ff\u6362 $x$ \u4e3a\u8d77\u70b9\u7684\u8fd9\u6761\u8fb9\u4e3a\u4e00\u6761\u521a\u597d\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u975e\u6811\u8fb9\u3002\n\n**2.**\u5c3e\u90e8\u63a5\u4e0a\u4e00\u6761\u8d77\u70b9\u4e3a\u4ee5 $x$ \u4e3a\u8d77\u70b9\u7684\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\u5728 $T$ \u4e2d\u7956\u5148(\u5305\u62ec\u81ea\u5df1)\u8fde\u51fa\u53bb\u7684\u6240\u6709\u975e\u6811\u8fb9\u7684\u6700\u5c0f\u8fb9\u3002\n\n\u7136\u540e\u5c31\u662f\u600e\u4e48\u7ef4\u62a4\u7956\u5148\u51fa\u53bb\u7684\u6240\u6709\u975e\u6811\u8fb9\u7684\u6700\u5c0f\u8fb9\uff1a\n\n\u663e\u7136\u53ef\u4ee5\u4ece\u7956\u5148\u8f6c\u79fb\u8fc7\u6765\uff0c\u76f4\u63a5\u53ef\u5e76\u5806\u5373\u53ef\u3002\n\n\u53c8\u56e0\u4e3a\u8981\u4fdd\u7559\u6bcf\u4e2a\u70b9\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u5408\u5e76\u7684\u65f6\u5019\u53ef\u6301\u4e45\u5316\u5373\u53ef\n\n\u548c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u53ef\u6301\u4e45\u5316\u4e00\u6837\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n\u5efa\u8bae\u53ef\u4ee5\u770b\u4e00\u770b\u8bfe\u4ef6\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\ntemplate <class Num> inline void Cmax(Num &x, const Num y) {\n\tx = y > x ? y : x;\n}\n\ntemplate <class Num> inline void Cmin(Num &x, const Num y) {\n\tx = y < x ? y : x;\n}\n\nconst int maxn(5005);\nconst int maxm(2e5 + 5);\nconst double eps(1e-8);\n\nint n, m, first[maxn], cnt, vis[maxn], rt[maxn], tot, cov[maxm << 1], ans, fa[maxn];\ndouble se, e, dis[maxn];\npriority_queue < pair <double, int> > q;\n\nstruct Heap {\n\tint ls, rs, dis, ed;\n\tdouble w;\n} tr[maxm * 20];\n\nstruct Edge {\n\tint to, next;\n\tdouble w;\n} edge[maxm << 1];\n\ninline void Add(int u, int v, double w) {\n\tedge[cnt] = (Edge){v, first[u], w}, first[u] = cnt++;\n\tedge[cnt] = (Edge){u, first[v], w}, first[v] = cnt++;\n}\n\ninline int NewNode(double w, int ed) {\n\tint x = ++tot;\n\ttr[x].w = w, tr[x].dis = 1, tr[x].ed = ed;\n\treturn x;\n}\n\nint Merge(int x, int y) {\n\tif (!x || !y) return x + y;\n\tif (tr[x].w - tr[y].w >= eps) swap(x, y);\n\tint p = ++tot;\n\ttr[p] = tr[x], tr[p].rs = Merge(tr[p].rs, y);\n\tif (tr[tr[p].ls].dis < tr[tr[p].rs].dis) swap(tr[p].ls, tr[p].rs);\n\ttr[p].dis = tr[tr[x].rs].dis + 1;\n\treturn p;\n}\n\nvoid Dfs(int u) {\n\tvis[u] = 1;\n\tfor (int e = first[u], v; e != -1; e = edge[e].next)\n\t\tif (e & 1) {\n\t\t\tdouble w = edge[e].w;\n\t\t\tif (fabs(dis[u] + w - dis[v = edge[e].to]) < eps && !vis[v])\n\t\t\t\tfa[v] = u, cov[e ^ 1] = 1, Dfs(v);\n\t\t}\n}\n\nint main() {\n\tmemset(first, -1, sizeof(first));\n\tmemset(dis, 127, sizeof(dis));\n\tscanf(\"%d%d%lf\", &n, &m, &se);\n\tfor (int i = 1, u, v; i <= m; ++i) scanf(\"%d%d%lf\", &u, &v, &e), Add(u, v, e);\n\tdis[n] = 0, q.push(make_pair(0, n));\n\twhile (!q.empty()) {\n\t\tint u = q.top().second;\n\t\tq.pop();\n\t\tif (vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor (int e = first[u]; ~e; e = edge[e].next)\n\t\t\tif (e & 1) {\n\t\t\t\tint v = edge[e].to;\n\t\t\t\tif (dis[v] - (dis[u] + edge[e].w) >= eps)\n\t\t\t\t\tq.push(make_pair(-(dis[v] = dis[u] + edge[e].w), v));\n\t\t\t}\n\t}\n\tfor (int i = 1; i <= n; ++i) vis[i] = 0;\n\tDfs(n);\n\tfor (int e = 0, u, v; e < cnt; e += 2)\n\t\tif (!cov[e]) {\n\t\t\tu = edge[e ^ 1].to, v = edge[e].to;\n\t\t\tif (dis[u] == dis[0] || dis[v] == dis[0]) continue;\n\t\t\trt[u] = Merge(rt[u], NewNode(dis[v] + edge[e].w - dis[u], v));\n\t\t}\n\tfor (int i = 1; i <= n; ++i) q.push(make_pair(-dis[i], i));\n\tfor (int i = 1, u; i <= n; ++i) {\n\t\tu = q.top().second, q.pop();\n\t\tif (fa[u]) rt[u] = Merge(rt[u], rt[fa[u]]);\n\t}\n\tif (dis[1] - se < eps) se -= dis[1], ++ans;\n\tif (rt[1]) q.push(make_pair(-tr[rt[1]].w, rt[1]));\n\twhile (!q.empty()) {\n\t\tint ed = q.top().second;\n\t\tdouble cur = q.top().first, w = dis[1] - cur;\n\t\tif (w - se >= eps) break;\n\t\tq.pop(), se -= w, ++ans;\n\t\tfor (int i = 0; i < 2; ++i) {\n\t\t\tint nxt = i ? tr[ed].rs : tr[ed].ls;\n\t\t\tif (nxt) q.push(make_pair(cur + tr[ed].w - tr[nxt].w, nxt));\n\t\t}\n\t\tif (rt[tr[ed].ed]) q.push(make_pair(cur - tr[rt[tr[ed].ed]].w, rt[tr[ed].ed]));\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1537350407,
        "uid": 47640,
        "name": "Cyhlnj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2483 \u3010\u3010\u6a21\u677f\u3011k\u77ed\u8def\uff08[SDOI2010]\u9b54\u6cd5\u732a\u5b66\u9662\uff09\u3011"
    },
    {
        "content": "#### **\u9898\u610f\u5206\u6790**\uff1a\n\n\u200b\t\t\u672c\u9898\u6c42\u7684\u662f\u5728\u8def\u5f84\u6743\u503c\u4e4b\u548c\u4e0d\u8d85\u8fc7 $E$ \u7684\u524d\u63d0\u4e0b\uff0c\u9009\u62e9\u6700\u591a\u7684\u4e0d\u540c\u8def\u5f84\uff0c\u6c42\u53ef\u9009\u62e9\u7684\u6700\u591a\u7684\u8def\u5f84\u6570\u3002\u5f88\u660e\u663e\uff0c\u6839\u636e\u8d2a\u5fc3\u601d\u60f3\uff0c\u6211\u4eec\u80af\u5b9a\u8981\u662f\u6c42\u8def\u5f84\u6743\u503c\u6392\u540d\u4e3a\u7b2c $k$ \u77ed\u7684\u8def\u5f84\u3002\n\n\n\n#### **\u7b97\u6cd5\u5206\u6790**\uff1a\n\n\u200b\t\t\u5bf9\u4e8e\u6700\u77ed\u8def\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u8f7b\u677e\u641e\u5b9a\u7684\u3002\u56e0\u6b64\u6211\u4eec\u8003\u8651\u5bf9\u6700\u77ed\u8def\u5f84\u8fdb\u884c\u4fee\u6539\uff0c\u4ee5\u6b64\u5f97\u5230\u524d $k$ \u77ed\u8def\u3002\u6211\u4eec\u8003\u8651\u5728\u53cd\u56fe $R$ \u4e0a\u4ee5\u8282\u70b9 $n$ \u4e3a\u6839\u8282\u70b9\uff0c\u5efa\u7acb**\u6700\u77ed\u8def\u6811**\u3002\u6700\u77ed\u8def\u6811\u5c31\u662f\u4ee5\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u6784\u6210\u7684\u56fe\u3002\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $x$ \uff0c\u5b83\u53ef\u80fd\u4f1a\u6709\u591a\u6761\u6700\u77ed\u8def\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u7559\u4e00\u6761\u6700\u77ed\u8def\u5c31\u884c\u3002\u56e0\u6b64\u8fd9\u6837\u5efa\u51fa\u6765\u7684\u6700\u77ed\u8def\u6811\u4e00\u5b9a\u662f\u4e00\u68f5\u6811\u3002\u81f3\u4e8e\u5efa\u6700\u77ed\u8def\u6811\uff0c\u53ea\u9700\u5728\u53cd\u56fe $R$ \u4e0a\u4f7f\u7528 Dijkstra \u7b49\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\u89e3\u51b3\u5373\u53ef~~\uff08\u4f60\u8981\u7528 SPFA \u6211\u4e5f\u4e0d\u62e6\u4f60\uff09~~\u3002\n\n\u200b\t\t\u5efa\u51fa\u6700\u77ed\u8def\u6811\u540e\uff0c\u6211\u4eec\u5b9a\u4e49\u6700\u77ed\u8def\u6811\u4e0a\u7684\u8fb9\u4e3a\u6811\u8fb9\uff0c\u975e\u6700\u77ed\u8def\u6811\u4e0a\u7684\u8fb9\u4e3a\u975e\u6811\u8fb9\u3002\u6b64\u65f6\uff0c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u5b83\u4e00\u5b9a\u662f\u7531\u82e5\u5e72\u6761\u6811\u8fb9\u548c\u975e\u6811\u8fb9\u7ec4\u6210\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528**\u7531\u975e\u6811\u8fb9\u7ec4\u6210\u7684\u5e8f\u5217**\u6765\u8868\u793a\u3002\u5047\u5982\u5f53\u524d\u5df2\u7ecf\u5f97\u5230\u4e86\u4e00\u6761\u8def\u5f84\u7684\u975e\u6811\u8fb9\u5e8f\u5217\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u5982\u4f55\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5176\u4ea7\u751f\u65b0\u7684\u975e\u6811\u8fb9\u5e8f\u5217\u3002\u5f88\u660e\u663e\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a**\u66ff\u6362**\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u6216**\u65b0\u6dfb**\u4e00\u6761\u975e\u6811\u8fb9\u3002\u6211\u4eec\u53ea\u8003\u8651\u5728\u975e\u6811\u8fb9\u5e8f\u5217**\u672b\u5c3e**\u8fdb\u884c\u4fee\u6539\u548c\u65b0\u6dfb\u3002\n\n\u200b\t\t\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e9b\u91cf\uff1a\n\n\u200b\t\t $dis_i$  \uff1a\u70b9 $i$ \u5230\u70b9 $n$ \u7684\u6700\u77ed\u8def\u6743\u503c\u4e4b\u548c\u3002\n\n\u200b\t\t$e.u,e.v,e.w$ \uff1a\u975e\u6811\u8fb9 $e$ \u7684\u8d77\u70b9\uff0c\u7ec8\u70b9\u548c\u6743\u503c\u3002\n\n\u200b\t\t$\\Delta e$ \uff1a**\u5c06\u975e\u6811\u8fb9 $e$ \u52a0\u5165\u975e\u6811\u8fb9\u5e8f\u5217\u6240\u589e\u52a0\u7684\u6743\u503c**\u3002\u5f88\u660e\u663e\uff0c$\\Delta e=e.w+dis_{e.v}-dis_{e.u}$ \u3002\n\n\u200b\t\t\u9996\u5148\u8003\u8651\u65b0\u6dfb\u4e00\u6761\u975e\u6811\u8fb9\u3002\u6b64\u65f6\u6709\u54ea\u4e9b\u975e\u6811\u8fb9\u53ef\u4ee5\u52a0\u5165\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u6811\u8fb9\u4e0a\u8d70\u4e00\u6bb5\u8ddd\u79bb\u540e\u518d\u8d70\u5176\u4ed6\u7684\u975e\u6811\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4ece\u4ee5\u6700\u540e\u4e00\u6761\u975e\u6811\u8fb9\u6240\u6307\u5411\u7684\u70b9\u4ee5\u53ca\u8fd9\u4e2a\u70b9\u5728\u6700\u77ed\u8def\u6811\u4e0a\u7684\u7956\u5148\u4e3a\u8d77\u70b9\u7684\u975e\u6811\u8fb9\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\n\n\u200b\t\t\u518d\u8003\u8651\u66ff\u6362\u4e00\u6761\u975e\u6811\u8fb9\u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u4ece\u4ee5\u8be5\u975e\u6811\u8fb9\u7684\u8d77\u59cb\u70b9\u4ee5\u53ca\u5b83\u5728\u6700\u77ed\u8def\u6811\u4e0a\u7684\u7956\u5148\u4e3a\u8d77\u70b9\u7684\u975e\u6811\u8fb9\u4e2d\u8fdb\u884c\u9009\u62e9\u66ff\u6362\u3002\n\n\u200b\t\t\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u5bfb\u627e$k$\u77ed\u8def\u7684\u7b97\u6cd5\uff1a\u6211\u4eec\u91c7\u7528\u7c7b\u4f3c\u4e8e Dijkstra \u7684\u8d2a\u5fc3\u601d\u8def\uff0c\u7528\u4e00\u4e2a**\u5806**\u7ef4\u62a4**\u5f53\u524d**\u6240\u6709\u7684\u975e\u6811\u8fb9\u5e8f\u5217\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u975e\u6811\u8fb9\u5e8f\u5217\uff08 $\\Sigma e$ \u6700\u5c0f\uff09\uff0c\u540c\u65f6\u6211\u4eec\u8fd8\u8981\u8bb0\u5f55\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u6700\u540e\u4e00\u6761\u975e\u6811\u8fb9\u7684\u7f16\u53f7\uff08\u5728\u4e0b\u6587\u4e2d\u7684\u5806\u4e2d\u7684\u8282\u70b9\u7f16\u53f7\uff09\u3002\u6211\u4eec\u6bcf\u6b21\u9009\u53d6\u5f53\u524d\u6743\u503c\u6700\u5c0f\u7684\u8def\u5f84\u7edf\u8ba1\u7b54\u6848\uff0c\u5e76\u4f7f\u7528\u8fd9\u6761\u8def\u5f84\u62d3\u5c55\u51fa\u65b0\u7684\u8def\u5f84\u3002\u4e3a\u4e86\u4e0d\u9057\u6f0f\u5730\u627e\u51fa\u6bcf\u6761\u8def\u5f84\uff0c\u6211\u4eec\u5bf9\u6700\u540e\u4e00\u6761\u975e\u6811\u8fb9\u8fdb\u884c\u66ff\u6362\u65f6\uff0c\u8981\u9009\u62e9\u6743\u503c\u4e0d\u5c0f\u4e8e\u5f53\u524d\u975e\u6811\u8fb9\u7684\u6743\u503c\u6700\u5927\u7684\u7b26\u5408\u6761\u4ef6\u7684\u975e\u6811\u8fb9\u8fdb\u884c\u66ff\u6362\uff0c\u7136\u540e\u518d\u5c06\u65b0\u4ea7\u751f\u7684\u975e\u6811\u8fb9\u5e8f\u5217\u7684 $\\Sigma e$ \u4ee5\u53ca\u6700\u540e\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff08\u540c\u4e0a\u6587\uff09\u653e\u5165\u5806\u4e2d\uff1b\u5728\u65b0\u6dfb\u975e\u6811\u8fb9\u65f6\uff0c\u4e5f\u8981\u4ece\u5f53\u524d\u6743\u503c\u6700\u5c0f\u7684\u7b26\u5408\u6761\u4ef6\u7684\u975e\u6811\u8fb9\u4e2d\u9009\u53d6\u51fa\u4e00\u6761\u8fb9\u8fdb\u884c\u62d3\u5c55\uff0c\u518d\u5c06\u65b0\u4ea7\u751f\u7684\u975e\u6811\u8fb9\u5e8f\u5217\u7684\u76f8\u5173\u4fe1\u606f\uff08\u540c\u66ff\u6362\uff09\u653e\u5165\u5806\u4e2d\u3002\u5bf9\u4e8e\u5bfb\u627e\u4ee5\u4e00\u4e2a\u8282\u70b9\u4ee5\u53ca\u5176\u6700\u77ed\u8def\u6811\u4e0a\u7684\u7956\u5148\u4e3a\u8d77\u70b9\u7684\u975e\u6811\u8fb9\uff0c\u6211\u4eec\u8003\u8651\u4ee5\u6bcf\u6761\u975e\u6811\u8fb9\u7684 $\\Delta e$ \u4e3a\u5173\u952e\u5b57\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u7528\u4e00\u4e2a\u5806\u7ef4\u62a4\u8fd9\u4e9b\u4fe1\u606f\u3002\u56e0\u4e3a\u7236\u8282\u70b9\u548c\u5b50\u8282\u70b9\u4e4b\u95f4\u7684\u5305\u542b\u5173\u7cfb\uff0c\u6211\u4eec\u9009\u62e9\u7528**\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811**\u8fdb\u884c\u7ef4\u62a4\u3002\u8be6\u7ec6\u6ce8\u91ca\u89c1\u4ee3\u7801\u3002\n\n\n\n#### **\u6ce8\u610f**\uff1a\n\u200b\t\t\u7531\u4e8e\u5230\u8fbe\u70b9 $n$ \u5c31\u5fc5\u987b\u7acb\u5373\u7ed3\u675f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a\u6240\u6709\u4ee5 $n$ \u4e3a\u8d77\u70b9\u7684\u8fb9\u53bb\u6389\u3002\n\n\n\n#### **\u4ee3\u7801**\uff1a\n\n```c++\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n\n#define ll long long\n\nusing namespace std;\n\ninline int read()\n{\n\tint s=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*f;\n}\n\nconst int N=5e4+5,M=2e5+3;\n\nstruct edge{int net,to;double w;};\nstruct Graph\n{\n\tint tot,head[N];edge Edge[M];\n\tvoid add(int x,int y,double z){Edge[++tot]=(edge){head[x],y,z};head[x]=tot;}\n}G,R;\n\nint n,m,ans=0;double E;\n\nstruct node\n{\n\tint id;double dis;\n\tfriend bool operator<(node x,node y){return x.dis>y.dis;}\n};\nint vis[N],fa[N];double dis[N];\nvoid dijkstra()//\u6c42\u5176\u4ed6\u70b9\u5230\u8fben\u7684\u6700\u77ed\u8def\uff0c\u5e76\u5efa\u7acb\u6700\u77ed\u8def\u6811 \n{\n\tpriority_queue<node>q;q.push((node){n,0});\n\tmemset(dis,127,sizeof(dis));dis[n]=0;\n\twhile(!q.empty())\n\t{\n\t\tnode u=q.top();q.pop();\n\t\tif(vis[u.id])continue;\n\t\tvis[u.id]=1;\n\t\tfor(int i=R.head[u.id];i;i=R.Edge[i].net)\n\t\t{\n\t\t\tnode v=(node){R.Edge[i].to,u.dis+R.Edge[i].w};\n\t\t\tif(dis[v.id]>v.dis)\n\t\t\t{\n\t\t\t\tdis[v.id]=v.dis;\n\t\t\t\tfa[v.id]=i;//\u8bb0\u5f55\u6700\u77ed\u8def\u6811\u4e0a\u6307\u5411\u70b9v.id\u7684\u8fb9\u7684\u7f16\u53f7 \n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint seq[N],rt[N];\nbool cmp(const int x,const int y){return dis[x]<dis[y];}\n\n//\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811 \nstruct heap{int l,r,dist,fa;double key;}tree[21*N];\nint cnt=0;\nint make_new(int f,double val)\n{\n\tint k=++cnt;\n\ttree[k].l=tree[k].r=tree[k].dist=0;\n\ttree[k].fa=f;tree[k].key=val;\n\treturn k;\n}\nint merge(int x,int y)\n{\n\tif(!x||!y)return x+y;\n\tif(tree[x].key-tree[y].key>0)swap(x,y);\n\tint k=++cnt;\n\ttree[k]=tree[x];\n\ttree[k].r=merge(tree[k].r,y);\n\tif(tree[tree[k].l].dist<tree[tree[k].r].dist)swap(tree[k].l,tree[k].r);\n\ttree[k].dist=tree[tree[k].r].dist+1;\n\treturn k;\n}\n\nstruct ing\n{\n\tint x;double ans;\n\tfriend bool operator<(ing x,ing y){return x.ans>y.ans;}\n};\n\nint main()\n{\n\tn=read();m=read();scanf(\"%lf\",&E);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read();double z;scanf(\"%lf\",&z);\n\t\tif(x==n){i--;m--;continue;}//\u53bb\u6389\u4ee5n\u4e3a\u8d77\u70b9\u7684\u8fb9 \n\t\tG.add(x,y,z);R.add(y,x,z);\n\t}\n\t\n\tdijkstra();\n\t\n\tfor(int i=1;i<=n;i++)seq[i]=i;\n\tsort(seq+1,seq+1+n,cmp);\n\t\n\t//\u5efa\u7acb\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u6765\u7ef4\u62a4\u4e0e\u6bcf\u4e2a\u70b9\u53ca\u5176\u6700\u77ed\u8def\u6811\u4e0a\u7684\u7956\u5148\u76f8\u8fde\u7684\u975e\u6811\u8fb9 \n\ttree[0].dist=-1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint u=seq[i];\n\t\tfor(int j=G.head[u];j;j=G.Edge[j].net)\n\t\tif(fa[u]!=j)rt[u]=merge(rt[u],make_new(G.Edge[j].to,G.Edge[j].w+dis[G.Edge[j].to]-dis[u]));\n\t\trt[u]=merge(rt[u],rt[G.Edge[fa[u]].to]);\n\t}\n\t\n\tpriority_queue<ing>q;\n\tif(E-dis[1]<0){printf(\"0\\n\");return 0;}\n\tE-=dis[1];ans++;\n\tif(rt[1])q.push((ing){rt[1],tree[rt[1]].key});\n\twhile(!q.empty())\n\t{\n\t\ting u=q.top();q.pop();\n\t\tif(E-(u.ans+dis[1])<0)break;\n\t\tE-=u.ans+dis[1];ans++;\n\t\tif(tree[u.x].l)q.push((ing){tree[u.x].l,u.ans-tree[u.x].key+tree[tree[u.x].l].key});\n\t\tif(tree[u.x].r)q.push((ing){tree[u.x].r,u.ans-tree[u.x].key+tree[tree[u.x].r].key});\n\t\t//\u5bf9\u6700\u540e\u4e00\u6761\u975e\u6811\u8fb9\u8fdb\u884c\u66ff\u6362 \n\t\tif(rt[tree[u.x].fa])q.push((ing){rt[tree[u.x].fa],u.ans+tree[rt[tree[u.x].fa]].key});\n\t\t//\u65b0\u6dfb\u4e00\u6761\u975e\u6811\u8fb9 \n\t}\n\t\n\tprintf(\"%d\\n\",ans);\n\t\n\treturn 0;\n\t\n}\n```\n\n\n\n#### **\u53c2\u8003\u535a\u5ba2**\uff1a\n\n\u200b\t\thttps://www.mina.moe/archives/2777",
        "postTime": 1582797687,
        "uid": 65861,
        "name": "kekeke",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2483 \u3010\u3010\u6a21\u677f\u3011k\u77ed\u8def / [SDOI2010]\u9b54\u6cd5\u732a\u5b66\u9662\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n\u9274\u4e8e\u6b64\u9898\u6709\u66f4\u4f18\u79c0\u590d\u6742\u5ea6\u7684\u53ef\u5e76\u5806\u505a\u6cd5\u4f46\u672a\u88ab\u9898\u89e3\u7ed9\u51fa\uff0c\u6545\u5728\u6b64\u8865\u5145\u4e00\u4e0b\u3002\n\n\u672c\u6587\u91cd\u70b9\u5728\u4e8e\u53ef\u5e76\u5806\u5982\u4f55\u4f18\u5316\u7684\u7ec6\u8282\u4e0a\uff0c\u4e00\u822c\u7684\u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\u8bf7\u53c2\u8003\u5176\u4ed6\u9898\u89e3\u3002\n\n## \u6b63\u6587\n\n\u5206\u90e8\u5206\u6765\u8003\u8651\u590d\u6742\u5ea6\uff1a\n\n1. \u5efa\u53cd\u56fe\u8dd1\u6700\u77ed\u8def\u6811\uff1a\n\n   \u5982\u679c\u4f60\u4f7f\u7528\u4e86\u666e\u901a\u5806\u4f18\u5316\u7684 Dijkstra\uff0c\u606d\u559c\u4f60\uff0c\u4f60\u7684\u590d\u6742\u5ea6\u5df2\u7ecf\u4e3a $O(m\\log{m})$\uff0c\u6ca1\u5fc5\u8981\u8fdb\u884c\u540e\u9762\u7684\u4f18\u5316\u4e86\u3002\n   \n   \u4e8e\u662f\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5e7f\u4e3a\u4eba\u77e5~~\u4e14\u4e0d\u96be~~\u79d1\u6280\uff1a\u6590\u6ce2\u90a3\u5951\u5806\u4f18\u5316 Dijkstra\uff0c\u53ef\u4ee5\u8f7b\u677e\u505a\u5230 $O(m+n\\log{n})$\u3002[\u6233\u6211\u770b\u849f\u84bb\u7684Fib\u5806\u4f18\u5316Dij](https://www.luogu.com.cn/paste/hsur4u5x)\n   \n1. \u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\n\n   \u4e00\u822c\u7684\u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\u5c06 $m$ \u6761\u8fb9\u90fd\u63d2\u5165\u4e86\u8fdb\u53bb\uff0c\u590d\u6742\u5ea6\u663e\u7136 $O(m\\log{m})$\uff0c\u770b\u4f3c\u6ca1\u6709\u4f18\u5316\u7684\u7a7a\u95f4\u3002\n   \n   \u4f46\u6211\u4eec\u53d1\u73b0\uff0c\u5efa\u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6bcf\u6b21\u4f1a\u5c06\u81ea\u5df1\u8fde\u51fa\u53bb\u7684\u6240\u6709\u975e\u6811\u8fb9\u5e76\u5165\u53ef\u5e76\u5806\uff0c\u6211\u4eec\u5c06\u6700\u77ed\u8def\u6811\u4e0a\u7684 $n$ \u4e2a\u70b9\u7528 $m\\log{m}$ \u7684\u4ee3\u4ef7\u5e76\u8d77\u6765\u663e\u7136\u8840\u4e8f\u3002\n   \n   \u5982\u679c\u6211\u4eec\u5c06\u6bcf\u4e2a\u70b9\u7684\u8fb9\u63d0\u524d\u5efa\u4e00\u4e2a\u5806\uff0c\u6bcf\u6b21\u53ea\u4e22\u4e00\u4e2a\u5806\u9876\u8fdb\u53bb\u4e0d\u5c31\u53ea\u6709 $n\\log{n}$ \u4e86\u561b\u3002\u53ea\u8981\u6211\u4eec\u52a8\u7528\u4e00\u70b9\u5c0f\u5c0f\u7684\u9ed1\u79d1\u6280\uff1a$O(n)$ \u5efa\u5927\u5c0f\u4e3a $n$ \u7684\u4e8c\u53c9\u5806\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u5230 $O(m+n\\log{n})$\u3002\n   \n   \u5148\u6765\u770b [$O(n)$ \u5efa\u5806](https://www.luogu.com.cn/paste/vh8z0g2i)\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u539f\u7406\u5c31\u662f\u4ece\u4e0b\u5f80\u4e0a\u5c06\u6bcf\u4e2a\u70b9\u4e0d\u505c\u5411\u4e0b\u6362\uff0c\u51b7\u9759\u5206\u6790[\u590d\u6742\u5ea6](https://www.luogu.com.cn/paste/4degkoit)\u53ef\u4ee5\u53d1\u73b0\u662f $O(n)$ \u7684\u3002\n   \n   \u518d\u8bf4\u53ef\u6301\u4e45\u5316\u5806\uff0c\u5176\u5b9e\u662f\u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\u5957\u5806(\u5f62\u8c61\u5427)\uff0c\u56e0\u4e3a\u5b83\u5916\u5c42\u662f\u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\uff0c\u5185\u5c42\u8fd8\u6709\u4e00\u4e2a\u5806\u3002\u5b83\u4eec\u4ee5\u5806\u9876\u76f8\u5173\u8054\uff0c\u6545\u5806\u9876\u65e2\u662f\u5916\u5c42\u5806\u8282\u70b9\uff0c\u53c8\u662f\u5185\u5c42\u5806\u5806\u9876\u3002\n   \n   \u539f\u6765\u5806\u7684\u610f\u4e49\u662f\u4e00\u4e2a\u8282\u70b9\u53ca\u540e\u7ee7\u8282\u70b9\u7684\u6240\u6709\u975e\u6811\u8fb9\uff0c\u800c\u73b0\u5728\u5916\u5c42\u5806\u662f\u4e00\u4e2a\u8282\u70b9\u53ca\u540e\u7ee7\u8282\u70b9\u7684\u975e\u6811\u8fb9\u5806\u9876\uff0c\u4e00\u4e2a\u5185\u5c42\u5806\u7684\u8282\u70b9\u53ca\u5806\u9876\u90fd\u4ee3\u8868\u4e00\u6761\u8fb9\u3002\n   \n   \u8fd9\u91cc\u5b9e\u9645\u4e0a\u5229\u7528\u4e86\u6bcf\u4e2a\u70b9\u975e\u6811\u51fa\u8fb9\u90fd\u662f\u76f8\u540c\u7684\u6027\u8d28\u63d0\u524d\u5efa\u5806\u8fdb\u884c\u4e86\u4f18\u5316\u3002\n   \n1. K \u77ed\u8def\uff1a\n   \n   \u539f\u6765\u6211\u4eec\u9009\u62e9\u5806\u4e2d\u4e00\u4e2a\u8282\u70b9\u7684\u513f\u5b50\uff0c\u4ee3\u8868\u7528\u4e00\u4e2a\u66f4\u5927\u7684\u540e\u7ee7\u975e\u6811\u8fb9(\u540d\u8bcd\u53ef\u80fd\u4e0d\u4e25\u8c28)\u66ff\u4ee3\u5b83\u3002\n   \n   \u800c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4ece\u4e00\u4e2a\u5806\u9876(\u4e5f\u5373\u5916\u5c42\u8282\u70b9)\u5f80\u5185\u5c42\u5806\u7684\u513f\u5b50\u91cc\u8d70\uff0c\u4ee3\u8868\u7528\u8fd9\u4e2a\u8282\u70b9\u8fde\u51fa\u7684\u66f4\u5927\u975e\u6811\u8fb9\uff0c\u6216\u662f\u9009\u62e9\u5916\u5c42\u5806\u7684\u513f\u5b50\uff0c\u4ee3\u8868\u7528\u66f4\u5927\u7684\u540e\u7ee7\u8282\u70b9\u7684\u8fb9\u6765\u4ee3\u66ff\u3002\n   \n   \u5982\u679c\u4e0d\u662f\u66ff\u6362\u800c\u662f\u52a0\u65b0\u8fb9\u5c31\u548c\u4e00\u822c\u505a\u6cd5\u4e00\u6837\u4e22\u5165\u4e0b\u4e00\u4e2a\u70b9\u7684\u5806\u9876\u5373\u53ef\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u5916\u5c42\u5806\u9876\u3002\n   \n   \u65f6\u95f4\u4ecd\u4e3a $O(k\\log{k})$\uff0c\u56e0\u4e3a\u6bcf\u6b21\u51fa\u5806\u5fc5\u5b9a\u4ee3\u8868\u4e00\u6761\u8def\uff0c\u800c\u5165\u5806\u7684\u53ea\u662f\u5176\u4e8c\u53c9\u5806\u7684\u513f\u5b50\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e0d\u5927\u7684\u5e38\u6570\u3002\n   \n\u6545\u6211\u4eec\u6574\u4f53\u4e0a\u53ef\u4ee5\u5b9e\u73b0 $O(n\\log{n}+m+k\\log{k})$ \u7684\u590d\u6742\u5ea6\u901a\u8fc7\u6b64\u9898\uff0c\u76f8\u8f83\u4e8e\u4e00\u822c\u7b97\u6cd5\u7684 $O(n\\log{n}+m\\log{m}+k\\log{k})$ \u5b9e\u73b0\u4e86\u6700\u7a84\u74f6\u9888\u5904\u7684\u4f18\u5316\uff0c\u5728\u6b64\u9898\u7684\u6570\u636e\u8303\u56f4\u4e2d\u53ef\u4ee5\u663e\u7136\u770b\u51fa\u4f18\u5316\u4e4b\u5927\u3002\n\n[\u6838\u5fc3\u4ee3\u7801](https://www.luogu.com.cn/paste/godj3yua)\n\nUpd:\u4fee\u590d\u4e86\u4e00\u70b9\u5c0f\u95ee\u9898(?)\n\nUpd:\u8865\u4e0a\u4e86Fib\u5806\u4f18\u5316Dij\u7684\u5927\u5751\u3002\u3002\u3002",
        "postTime": 1616407732,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "P2483 \u3010\u6a21\u677f\u3011k\u77ed\u8def / [SDOI2010]\u9b54\u6cd5\u732a\u5b66\u9662"
    },
    {
        "content": "\u9898\u89e3\u533a\u600e\u4e48\u88abA*\u5360\u9886\u4e86\u554a\n\n\u53d1\u4e00\u53d1\u6bd4\u8f83\u6709\u9053\u7406\u7684\u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\u505a\u6cd5\n\n\u6211\u4eec\u5148\u6c42\u51fa\u53cd\u5411\u7684\u4ee5t\u4e3a\u6839\u7684\u6700\u77ed\u8def\u6811\u3002\u90a3\u4e48\u4e00\u6761\u4eces\u5230t\u7684\u8def\u5f84\u5c31\u4f1a\u7ecf\u8fc7\u82e5\u5e72\u975e\u6811\u8fb9\u548c\u6811\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u975e\u6811\u8fb9\u5e8f\u5217\u6765\u8868\u793a\u4e00\u6761\u8def\u5f84\u3002\n\n\u6211\u4eec\u7528\u4f18\u5148\u961f\u5217\u6765\u5b58\u50a8\u5f53\u524d\u62d3\u5c55\u51fa\u7684\u975e\u6811\u8fb9\u5e8f\u5217\uff0c\u6bcf\u6b21\u9009\u51fa\u4e00\u6761\u6700\u5c0f\u7684\uff0c\u7136\u540e\u6269\u5c55\u3002\n\n\u6269\u5c55\u7684\u65b9\u5f0f\u662f\u4e24\u79cd\uff1a\u7b2c\u4e00\u79cd\u662f\u6211\u4eec\u5728\u5e8f\u5217\u540e\u52a0\u4e0a\u4e00\u6761\u8fb9\uff0c\u7b2c\u4e8c\u79cd\u662f\u6211\u4eec\u628a\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u7ed9\u6362\u6389\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u4ecex\u5230t\u7684\u6811\u8fb9\u6240\u8fde\u51fa\u53bb\u7684\u975e\u6811\u8fb9\u7684\u5806\uff0c(u\u2192v,w)\u7684\u6743\u503c\u662f\u2212dis[u]+w+dis[v]\uff0c\u5373\u9009\u62e9\u8fd9\u6761\u8fb9\u6240\u9700\u8981\u591a\u82b1\u8d39\u7684\u4ee3\u4ef7\u3002\u8fd9\u4e2a\u53ef\u4ee5\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\u5b9e\u73b0\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\uff0c\u6211\u4eec\u662f\u8981\u628a\u5c06\u8fd9\u4e2a\u65b9\u6848\u653e\u5165\u4f18\u5148\u961f\u5217\u65f6\u7684\u53ef\u5e76\u5806\u4fdd\u7559\u4e0b\u6765\uff0c\u53bb\u6389\u4e4b\u524d\u9009\u62e9\u5143\u7d20\u540e\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f\u628a\u6839\u5220\u9664,\u53ef\u4ee5\u76f4\u63a5\u628a\u6839\u7684\u4e24\u4e2a\u513f\u5b50merge\u8d77\u6765\u4f5c\u4e3a\u65b0\u7684\u5806;\n\n\u672c\u83dc\u9e21\u8c03\u4e86\u8fd1\u4e4e2h\u624d\u53d1\u73b0\u6700\u77ed\u8def\u6302\u4e86\n\n\u5e94\u8be5\u6bcf\u6b21\u627e\u6700\u5c0f\u7684\u70b9\u51fa\u6765\u677e\u5f1b,\u800c\u4e0d\u662f\u6bcf\u6b21\u677e\u5f1b\u627e\u6700\u5c0f\u503c\u4e22\u5c31\u961f\u5217\n\n\u5e0c\u671b\u80fd\u5404\u4f4d\u80fd\u4e0d\u8981\u50cf\u6211\u8fd9\u6837\u77f3\u4e50\u5fd7\u5427\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=5010,M=200010;\nstruct edge{\n\tint x,y,nex;\n\tdouble c;\n\tbool op;\n}now[2][M];\nstruct node{\n\tint ls,rs,dis,y;\n\tdouble t;\n}tr[10000010];\nstruct point{\n\tint num;\n\tdouble sum;\n\tbool operator<(const point q)const{\n\t\treturn sum>q.sum;\n\t}\n}X,Y;\npriority_queue<point> f;\nedge*s;\nint fir[2][N],l[2],n,m,T,rt[5005010],ans,dfn;\ndouble dis[N],E;\nbool tf[N],we[N];\nint*first;\nconst double eps=1e-8;\n\nvoid ins(int x,int y,double c,int&len){s[++len]=(edge){x,y,first[x],c,false};first[x]=len;}\nvoid new_node(double c,int y){tr[++T].dis=1;tr[T].t=c;tr[T].y=y;}\n\nint merge(int x,int y){\n\tif(!x || !y) return x+y;\n\tif(tr[x].t>=tr[y].t-eps) swap(x,y);\n\tint p=++T;tr[p]=tr[x];\n\ttr[p].rs=merge(tr[p].rs,y);\n\tif(tr[tr[p].rs].dis>tr[tr[p].ls].dis) swap(tr[p].ls,tr[p].rs);\n\ttr[p].dis=tr[tr[p].rs].dis+1;\n\treturn p;\n}\n\nvoid dfs(int x){\n\twe[x]=true;\n\tif(x!=n) for(int i=fir[0][x];i!=0;i=now[0][i].nex) if(!now[0][i].op) \n\t\tnew_node(now[0][i].c-dis[x]+dis[now[0][i].y],now[0][i].y),rt[x]=merge(rt[x],T);\n\tfor(int i=first[x];i!=0;i=s[i].nex) if(!we[s[i].y] && dis[s[i].y]==dis[x]+s[i].c)\n\t\tnow[0][i].op=true,rt[s[i].y]=rt[x],dfs(s[i].y);\n}\n\nvoid Dijkstra(){\n\tfor(int i=1;i<n;i++) dis[i]=2000000000000.0;\n\tdis[n]=0;\n\tfirst=fir[1],s=now[1];\n\twhile(1){\n\t\tint x=0,pos=0;\n\t\tdouble mmin=2000000000000.0;\n\t\tfor(int i=1;i<=n;i++) if(!tf[i] && dis[i]<mmin) mmin=dis[i],x=i;\n\t\tif(!x) break;tf[x]=true;\n\t\tfor(int i=first[x];i!=0;i=s[i].nex) if(!tf[s[i].y] && dis[x]+s[i].c<dis[s[i].y])\n\t\t\tdis[s[i].y]=dis[x]+s[i].c;\n\t}\n\tdfs(n);\n}\n\nvoid solve(){\n\tf.push((point){0,0});tr[0].y=1;\n\twhile(!f.empty()){\n\t\tX=f.top();f.pop();\n\t\tif(E<dis[1]+X.sum) break;\n\t\tans++;E-=dis[1]+X.sum;Y=X;\n\t\tif(tr[rt[X.num]].y!=n) X.sum+=tr[rt[X.num=tr[rt[X.num]].y]].t,f.push(X);\n\t\tif(tr[rt[Y.num]].ls || tr[rt[Y.num]].rs){\n\t\t\tY.sum-=tr[rt[Y.num]].t;rt[++dfn]=merge(tr[rt[Y.num]].ls,tr[rt[Y.num]].rs);\n\t\t\tY.sum+=tr[rt[Y.num=dfn]].t;f.push(Y);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n\nint main(){\n\tscanf(\"%d %d %lf\",&n,&m,&E);\n\tint x,y;double c;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d %d %lf\",&x,&y,&c);\n\t\ts=now[0],first=fir[0],ins(x,y,c,l[0]);\n\t\ts=now[1],first=fir[1],ins(y,x,c,l[1]);\n\t}\n\tDijkstra();dfn=n;solve();\n}\n```\n",
        "postTime": 1599115824,
        "uid": 29093,
        "name": "Deep_Kevin",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2483 \u3010\u3010\u6a21\u677f\u3011k\u77ed\u8def / [SDOI2010]\u9b54\u6cd5\u732a\u5b66\u9662\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u7a0d\u5fae\u8865\u5145\u4e00\u4e9b\u5176\u4ed6\u9898\u89e3\u6ca1\u5199\u5230\u7684\n\n# \u4e00. \u9898\u76ee\u5206\u6790\n\n## 1. \u5173\u4e8e k\n\n\u9996\u5148\u6839\u636e\u8d2a\u5fc3\u539f\u7406\uff0c\u6211\u4eec\u80af\u5b9a\u9009\u51fa\u82e5\u5e72\u6761\u6700\u77ed\u7684\u4e0d\u540c\u7684\u8def\u5f84\uff0c\u8bbe\u8fd9\u4e2a\u6570\u4e3a $k$\uff0c\u53ef\u4ee5\u5148\u6765\u8003\u8651\u4e00\u4e0b $k$ \u7684\u4e0a\u754c\u3002\u5982\u679c\u6709 $m$ \u6761 $1\\to n$ \u6743\u503c\u4e3a $1$ \u7684\u8fb9\uff0c\u6b64\u65f6 $k=2\\times 10^5$\uff1b\u4f46\u662f\u5982\u679c\u5c06 $\\frac{m}{2}$ \u6761\u8fb9\u4ece $1$ \u8fde\u5230 $2$\uff0c\u5269\u4e0b $\\frac{m}{2}$ \u6761\u8fb9\u4ece $2$ \u8fde\u5230 $n$\uff0c\u8fd9\u6837\u6211\u4eec\u83b7\u5f97\u4e86 $\\frac{m^2}{4}$ \u6761 $1 \\to n$ \u7684\u8def\u5f84\uff0c\u4e14\u957f\u5ea6\u90fd\u4e3a $2$\uff0c$E$ \u7684\u6700\u5927\u503c\u53c8\u4e3a $10^7$ \u6240\u4ee5 $k$ \u53ef\u4ee5\u8fbe\u5230 $5\\times 10^6$\u3002\n\n~~\u4e5f\u5c31\u662f\u8bf4\u7406\u8bba\u4e0a\u5b58\u5728\u4e00\u79cd\u6784\u9020\u65b9\u6cd5\u5361\u6389 $O((n+m)\\log n +k\\log k)$ \u7684\u53ef\u6301\u7eed\u5316\u53ef\u5e76\u5806\u505a\u6cd5\uff0c\u9274\u4e8e\u8fd9\u6837\u597d\u50cf\u4f1a\u8ba9\u8fd9\u9898\u4e0d\u53ef\u505a\u6240\u4ee5\u6570\u636e\u4e2d $k$ \u6700\u5927\u5728 $2\\times 10^5$ \u7ea7\u522b\u3002~~\n\n## 2. \u505a\u6cd5\n\n\u7136\u540e\u6211\u4eec\u8981\u83b7\u53d6\u524d $k$ \u77ed\u7684\u8def\u5f84\u957f\u5ea6\u3002\u6211\u4eec\u5148\u5efa\u53cd\u56fe\uff0c\u8dd1\u51fa\u4ee5 $n$ \u4e3a\u6e90\u70b9\u7684\u6700\u77ed\u8def\u751f\u6210\u6811\uff0c\u79f0\u5728\u6811\u4e0a\u7684\u8fb9\u4e3a\u6811\u8fb9\uff0c\u90a3\u4e0d\u5728\u6811\u4e0a\u7684\u8fb9\u4e3a\u975e\u6811\u8fb9\u3002\n\n\u8fd9\u6837 $1 \\to n$ \u7684\u8def\u5f84\u4e0a\u80af\u5b9a\u6709\u4e9b\u8fb9\u662f\u6811\u8fb9\uff0c\u6709\u4e9b\u662f\u975e\u6811\u8fb9\u3002\u82e5\u6309\u8def\u5f84\u4e0a\u7ecf\u8fc7\u8fb9\u7684\u987a\u5e8f\u83b7\u53d6\u975e\u6811\u8fb9\u5e8f\u5217\uff0c\u540e\u4e00\u6761\u8fb9\u7684\u8d77\u70b9\u80af\u5b9a\u662f\u524d\u4e00\u6761\u8fb9\u7ec8\u70b9\u7684\u7956\u5148\uff08\u56e0\u4e3a\u6811\u8fb9\u90fd\u662f\u6307\u5411\u7236\u4eb2\u7684\uff09\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u83b7\u5f97\u4e00\u4e2a $1\\to n$ \u7684\u524d $k$ \u77ed\u7684\u8def\u5f84\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8def\u5f84\u4fee\u6539\u6210\u5c3d\u53ef\u80fd\u77ed\u7684\u66f4\u957f\u7684\u8def\u5f84\u3002\u5b9e\u9645\u4e0a\u53ef\u4ee5\u628a\u4e00\u6761\u8def\u5f84\u770b\u6210\u4e00\u4e2a\u72b6\u6001\uff0c\u7136\u540e\u901a\u8fc7\u4fee\u6539\u4ed6\u62d3\u5c55\u51fa\u53bb\uff0c\u4f7f\u5f97\u80fd\u591f\u4e0d\u91cd\u590d\u4e14\u4e0d\u9057\u6f0f\u5730\u904d\u5386\u6240\u6709\u524d $k$ \u77ed\u8def\uff0c\u7c7b\u4f3c\u4e8e\u4f18\u5148\u961f\u5217 BFS\u3002\n\n\u8fd9\u6837\u7684\u904d\u5386\u65b9\u6cd5\u662f\u5b58\u5728\u7684\uff0c\u6bd4\u5982\u4ece\u4f18\u5148\u961f\u5217\u961f\u5934\u83b7\u53d6\u4e00\u4e2a\u957f\u5ea6\u6700\u5c0f\u7684\u8def\u5f84 $l$\uff0c\u8bbe\u975e\u6811\u8fb9\u5e8f\u5217\u4e3a $S$\uff0c\u5012\u6570\u7b2c\u4e8c\u6761\u8fb9\u4e3a $p$\uff0c\u6700\u540e\u4e00\u6761\u8fb9\u4e3a $q$\uff1a\n\n1. \u5c06 $q$ \u66ff\u6362\u6210\u8d77\u70b9\u4e3a $t_p$ \u7956\u5148\u7684\u53e6\u5916\u4e00\u6761\u8fb9\n\n2. \u5728 $S$ \u6700\u540e\u52a0\u5165\u8d77\u70b9\u4e3a $t_q$ \u7956\u5148\u4e00\u6761\u8fb9\n\n\u90a3\u600e\u6837\u4f7f\u5f97 $l$ \u957f\u5ea6\u7684\u53d8\u5316\u91cf\u5c3d\u53ef\u80fd\u5c0f\u5462\u3002$l$ \u7684\u957f\u5ea6\u53ef\u4ee5\u8868\u8fbe\u4e3a\n\n$$ \\sum_{i\\in S} e_i-d_{s_i}+d_{t_i} $$\n\n\u5176\u4e2d $d_i$ \u4e3a\u7ed3\u70b9 $i$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u6761\u975e\u6811\u8fb9\u7684\u8d21\u732e\u8bb0\u4e3a $v_i=e_i-d_{s_i}+d_{t_i}$\uff0c\u66ff\u6362\u64cd\u4f5c\u9700\u8981\u627e\u51fa\u6700\u5c0f\u7684 $v$ \u5927\u4e8e\u7b49\u4e8e $v_q$ \u7684\u8fb9\uff1b\u8ffd\u52a0\u64cd\u4f5c\u9700\u8981\u627e\u51fa $v$ \u6700\u5c0f\u7684\u8fb9\u3002\n\n\u8bbe\u201c\u8d77\u70b9\u4e3a $i$ \u7684\u7956\u5148\u7684\u975e\u6811\u8fb9\u96c6\u5408\u201d\u4e3a $U_i$\uff0c\u90a3\u4e48\u66ff\u6362\u64cd\u4f5c\u5c31\u662f\u4ee5 $v$ \u4e3a\u5173\u952e\u5b57\u627e $q$ \u5728 $U_{t_p}$ \u7684\u540e\u7ee7\uff1b\u8ffd\u52a0\u64cd\u4f5c\u662f\u627e\u51fa $U_{t_q}$ \u7684\u6700\u5c0f\u5143\u7d20\u3002\u7531\u4e8e\u66b4\u529b\u5efa\u51fa\u6240\u6709\u7ed3\u70b9\u7684 $U$ \u590d\u6742\u5ea6\u662f $O(nm)$\uff0c\u6211\u4eec\u9700\u8981\u5feb\u901f\u8868\u8fbe\u51fa\u8fd9\u4e9b\u96c6\u5408\u3002\n\n## 3. \u53ef\u6301\u7eed\u5316\u6570\u636e\u7ed3\u6784\n\n$U$ \u6709\u9012\u63a8\u5173\u7cfb\uff0c$U_i$ \u53ef\u4ee5\u5728 $U_{fa_i}$ \u7684\u57fa\u7840\u4e0a\u63d2\u5165\u6240\u6709\u4ee5 $i$ \u4e3a\u8d77\u70b9\u7684\u975e\u6811\u8fb9\u3002\u9274\u4e8e\u96c6\u5408\u9700\u8981\u67e5\u540e\u7ee7\uff0c\u53ef\u4ee5\u9009\u62e9\u4ece\u5927\u5230\u5c0f\u63d2\u5165\u975e\u6811\u8fb9\u5efa\u7acb\u53ef\u6301\u7eed\u5316\u5806\uff0c\u8fd9\u6837\u540e\u7ee7\u5c31\u662f\u6839\u7684\u5de6\u53f3\u513f\u5b50\uff1b\u6216\u8005\u76f4\u63a5\u4e00\u70b9\uff0c\u4f7f\u7528\u53ef\u6301\u7eed\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\u3002\n\n\u53ef\u6301\u7eed\u5316\u5806\u7684\u5efa\u6811\u590d\u6742\u5ea6\u662f $O(m\\log m+n)$ \u7684\uff0c\u6c42 $k$ \u77ed\u8def\u662f $O(k \\log k)$ \u7684\uff08\u67e5\u540e\u7ee7 $O(1)$\uff09\u3002\n\n\u53ef\u6301\u7eed\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\u7684\u5efa\u6811\u590d\u6742\u5ea6\u662f $O(m\\log m+n)$ \u7684\uff0c\u6c42 $k$ \u77ed\u8def $O(k(\\log k +\\log m))$\u3002\n\n\u90a3\u4e3a\u5565\u8981\u7528\u53ef\u5e76\u5806\u5462\uff0c\u56e0\u4e3a $U$ \u7684\u5efa\u7acb\u4e5f\u53ef\u4ee5\u770b\u4f5c\u5c06\u201c\u4ee5 $i$ \u4e3a\u8d77\u70b9\u7684\u975e\u6811\u8fb9\u201d\u96c6\u5408\u4e0e $U_{fa_i}$ \u5408\u5e76\u7684\u8fc7\u7a0b\uff0c\u5efa\u5806\u80fd\u7ebf\u6027\uff0c\u5408\u5e76 $O(\\log m)$\uff0c\u4e8e\u662f\u5efa\u6811\u88ab\u4f18\u5316\u4e3a $O(m+n\\log m)$\u3002\u4e0d\u8fc7\u8dd1\u6700\u77ed\u8def\u8fd8\u6709\u74f6\u9888\uff0c\u53ef\u4ee5\u7528\u6590\u6ce2\u90a3\u5951\u5806\u4f18\u5316\u6210 $O(m+ n\\log n)$\u3002\n\n\u53ef\u6301\u7eed\u5316\u9700\u8981\u53ef\u5e76\u5806\u4e0d\u662f\u5747\u644a\u6570\u636e\u7ed3\u6784\uff08\u5728\u8fd9\u9898\u91cc\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u6210\u8ddf\u666e\u901a\u5806\u4e00\u6837\uff09\uff0c\u4f46\u662f\u4fde\u9f0e\u529b\u7684\u8bfe\u4ef6\u91cc\u4f3c\u4e4e\u628a\u5de6\u504f\u6811\u5f52\u4e3a\u4e86\u5747\u644a\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u9645\u4e0a\u975e\u4e5f\u3002\n\n\u4ee5\u4e0a\u505a\u6cd5\u7a7a\u95f4\u90fd\u662f $O(n+k+m\\log m)$\u3002\n\n## 4. \u6570\u636e\n\n\u6837\u4f8b\u8bf4\u660e\u4e2d\u4ee5\u7ecf\u8fc7\u7ed3\u70b9\u7684\u987a\u5e8f\u8868\u8fbe\u8def\u5f84\uff0c\u5b9e\u9645\u4e0a\u5728\u6d4b\u8bd5\u6570\u636e\u4e2d\u662f\u6709\u91cd\u8fb9\u7684\u3002\n\n# \u4e8c. \u4ee3\u7801\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u53ef\u6301\u7eed\u5316\u7ebf\u6bb5\u6811\uff0c\u8dd1\u5f97\u4e0d\u662f\u5f88\u5feb\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define Lson(x) node[x].Son[0]\n#define Rson(x) node[x].Son[1]\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN=5e3,MAXM=2e5,LOGM=18;\nconst double MAXV=1e15;\n\nstruct DE\n{\n\tint x,y;\n\tdouble val;\n\tvoid Scan() {scanf(\"%d %d %lf\",&x,&y,&val);}\n\tvoid Print() {printf(\"%d %d %.2lf\\n\",x,y,val);}\n}E[MAXM+5];\n\nbool cmp(DE a,DE b) {return a.val<b.val;}\n\nstruct Emsg\n{\n\tint nxt,Enum;\n\tdouble val;\n};\n\nint n,m,ans;double ALL;\nvector<Emsg> inv[MAXN+5];\n\nint fa[MAXN+5];\npriority_queue< pair<double,int> > Q;\nbool V[MAXN+5],Edel[MAXM+5];\nint delE[MAXN+5];\ndouble Dis[MAXN+5];\nvoid Dijkstra()\n{\n\tfor(int i=1;i<=n;i++) Dis[i]=MAXV;\n\tDis[n]=0;\n\tQ.push(make_pair(0,n));\n\tfor(int now,rear;!Q.empty();)\n\t{\n\t\tnow=Q.top().second,Q.pop();\n\t\tif(V[now]) continue;\n\t\tV[now]=1;\n\t\tfor(int i=0;i<inv[now].size();i++)\n\t\t{\n\t\t\trear=inv[now][i].nxt;\n\t\t\tdouble cost=inv[now][i].val;\n\t\t\tif(Dis[rear]>Dis[now]+cost)\n\t\t\t{\n\t\t\t\tDis[rear]=Dis[now]+cost;\n\t\t\t\tdelE[rear]=inv[now][i].Enum;\n\t\t\t\tfa[rear]=now;\n\t\t\t\tQ.push(make_pair(-Dis[rear],rear));\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++) Edel[delE[i]]=1;\n}\n\nstruct msg\n{\n\tdouble len;\n\tint loc,Enum,rnk;//\u5012\u6570\u7b2c\u4e8c\u6761\u8fb9\u7684\u7ec8\u70b9\uff0c\u5012\u6570\u7b2c\u4e00\u6761\u8fb9\u548c\u6392\u540d \n\tbool operator > (const msg &a) const {return len<a.len;}\n\tbool operator < (const msg &a) const {return len>a.len;}\n};priority_queue<msg> p;\n\nstruct SegTree\n{\n\tint Son[2],Size;\n}node[MAXM*LOGM*2+5];int Tail,root[MAXN+5];\n\nvoid New(int now,bool t)\n{\n\tif(node[now].Son[t]) return;\n\tnode[now].Son[t]=++Tail;\n}\n\nvoid PushUp(int now) {node[now].Size=node[Lson(now)].Size+node[Rson(now)].Size;}\n\nvoid Insert(int a,int b,int L,int R,int x)//\u63d2\u5165\u8fb9 x\n{\n\tif(L==R) {node[b].Size=1;return;}\n\tint mid=(L+R)>>1;\n\tif(x<=mid)\n\t{\n\t\tNew(b,0),Rson(b)=Rson(a);\n\t\tInsert(Lson(a),Lson(b),L,mid,x);\n\t}\n\telse\n\t{\n\t\tLson(b)=Lson(a),New(b,1);\n\t\tInsert(Rson(a),Rson(b),mid+1,R,x);\n\t}\n\tPushUp(b);\n}\n\nint Ask(int now,int L,int R,int k)//\u6392\u540d\u4e3a k\n{\n\tif(L==R) return L;\n\tint mid=(L+R)>>1;\n\tif(k<=node[Lson(now)].Size) return Ask(Lson(now),L,mid,k);\n\treturn Ask(Rson(now),mid+1,R,k-node[Lson(now)].Size);\n}\n\nvector<int> nxt[MAXN+5],S[MAXN+5];//\u51fa\u8fb9\u96c6\u5408 \nvoid Build(int now)\n{\n\troot[now]=root[fa[now]];\n\tfor(int i=0;i<S[now].size();i++)\n\t{\n\t\tint cnt=++Tail;\n\t\tInsert(root[now],cnt,1,m,S[now][i]);\n\t\troot[now]=cnt;\n\t}\n\tfor(int i=0;i<nxt[now].size();i++) Build(nxt[now][i]);\n}\n\nint main()\n{\n\t//freopen(\"P2483_1.in\",\"r\",stdin);\n\t//freopen(\"mine.txt\",\"w\",stdout);\n\tscanf(\"%d %d %lf\",&n,&m,&ALL);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tE[i].Scan();\n\t\tinv[E[i].y].push_back(Emsg{E[i].x,i,E[i].val});\n\t}\n\tDijkstra();\n\t//printf(\"Dis:\");for(int i=1;i<=n;i++) printf(\" %.2lf\",Dis[i]);printf(\"\\n\");\n\t//printf(\"fa:\");for(int i=1;i<=n;i++) printf(\" %d\",fa[i]);printf(\"\\n\");\n\t\n\tint End=m;\n\tm=0;\n\tfor(int i=1;i<=End;i++)\n\t{\n\t\tif(E[i].x==n) continue;\n\t\tif(Edel[i]) continue;\n\t\tE[++m]=E[i];\n\t}\n\t//printf(\"E:\\n\");\n\t//for(int i=1;i<=m;i++) E[i].Print();\n\t\n\tfor(int i=1;i<=m;i++) E[i].val=-Dis[E[i].x]+E[i].val+Dis[E[i].y];\n\tsort(E+1,E+m+1,cmp);\n\tfor(int i=1;i<=m;i++) S[E[i].x].push_back(i);\n\tfor(int i=1;i<n;i++) nxt[fa[i]].push_back(i);\n\tBuild(n);\n\t\n\tp.push(msg{Dis[1],0,0,0});//\u8def\u5f84\u957f\u5ea6\u548c\u6700\u540e\u4e00\u6761\u8fb9 \n\tfor(msg now;!p.empty();)\n\t{\n\t\tnow=p.top(),p.pop();\n\t\tif(ALL<now.len) break;\n\t\t++ans;\n\t\tALL-=now.len;\n\t\tint s=now.loc,t=E[now.Enum].y;\n\t\tdouble cost=E[now.Enum].val;\n\t\tint temp;\n\t\tif(!now.Enum)//1 \u4e4b\u540e\u8ffd\u52a0\u8fb9 \n\t\t{\n\t\t\tif(!node[root[1]].Size) continue;\n\t\t\ttemp=Ask(root[1],1,m,1);\n\t\t\tp.push(msg{now.len+E[temp].val,1,temp,1});\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//\u66ff\u6362\u8fb9 \n\t\t\tif(node[root[s]].Size>now.rnk)\n\t\t\t{\n\t\t\t\ttemp=Ask(root[s],1,m,now.rnk+1);\n\t\t\t\tp.push(msg{now.len-cost+E[temp].val,s,temp,now.rnk+1});\n\t\t\t}\n\t\t\tif(node[root[t]].Size)\n\t\t\t{\n\t\t\t\ttemp=Ask(root[t],1,m,1);\n\t\t\t\tp.push(msg{now.len+E[temp].val,t,temp,1});\n\t\t\t}\n\t\t} \n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1646987802,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "[SDOI2010] \u9b54\u6cd5\u732a\u5b66\u9662 \u7684\u9898\u89e3"
    },
    {
        "content": "\u5c31\u662f\u4e0d\u7528\u5de6\u504f\u6811\uff01\u5c31\u662f\u4e0d\u7528\u4f18\u5148\u961f\u5217\uff01\u8fd9\u662f\u4e00\u7bc7\u6ca1\u6709\u5de6\u504f\u6811\uff0c\u53ea\u4f7f\u7528\u4e86 $\\text{vector}$ \u7684\u9898\u89e3\uff01\n\n\u5148\u5efa\u51fa\u4ee5 $n$ \u4e3a\u6839\u5728\u53cd\u56fe\u4e0a\u7684\u6700\u77ed\u8def\u5f84\u6811\uff0c\u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1\u6709\u89e3\uff0c\u6240\u4ee5\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u7684\u6700\u77ed\u8def\u8def\u53ef\u4ee5\u662f\u7684\u4e00\u4e2a\u7b54\u6848\uff0c\u8003\u8651\u5982\u4f55\u751f\u6210\u4e0b\u4e00\u4e2a\u7b54\u6848\u3002\n\n\u8bb0 $u$ \u5230 $n$ \u7684\u8ddd\u79bb\u4e3a $dis_u$\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9 $(u,v,w)$\uff0c\u4f7f\u7528\u5b83\u4e4b\u540e\u4f1a\u5bfc\u81f4\u8def\u5f84\u7684\u957f\u5ea6\u589e\u52a0 $w-dis_u+dis_v$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u5b83\u4eec\u5230 $n$ \u5728\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u6240\u6709\u8282\u70b9\u51fa\u8fb9\u4e2d\u7684\u975e\u6811\u8fb9\u5bf9\u8def\u5f84\u957f\u5ea6\u7684\u5f71\u54cd\u503c\uff0c\u53ef\u4ee5\u7528\u5806\u6765\u7ef4\u62a4\u3002\n\n\u6bcf\u6b21\u627e\u51fa\u5f53\u524d\u603b\u5f71\u54cd\u503c\u6700\u5c0f\u7684\uff0c\u8bb0\u5176\u4e3a $(w,ed)$\uff0c\u5176\u4e2d $w$ \u4e3a\u5f71\u54cd\u503c\uff0c$ed$\uff0c\u4e3a\u8be5\u8fb9\u96c6\u7684\u6700\u540e\u4e00\u6761\u8fb9\u5728\u5806\u4e0a\u7684\u8282\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u62d3\u5c55\u5230\u4e0b\u4e00\u6761\u8def\u5f84\uff0c\u5373\u5c06 $ed$ \u66ff\u6362\u6210\u5728\u5806\u4e0a\u7684\u540e\u7ee7\uff08\u8fd9\u91cc\u5c06\u5de6\u53f3\u513f\u5b50\u90fd\u8003\u8651\u4ee5\u4e0b\u5c31\u53ef\u4ee5\uff09\uff0c\u6216\u8005\u627e\u5230 $ed$ \u5bf9\u5e94\u8fb9\u7684\u7ec8\u70b9\uff0c\u5c06\u5b83\u6240\u5bf9\u5e94\u7684\u5806\u7684\u6839\u8282\u70b9\u52a0\u5165\u3002\n\n\u7531\u4e8e\u5806\u8981\u652f\u6301\u590d\u5236\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u91c7\u7528\u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\u6765\u7ef4\u62a4\u3002\n\n\u4f46\u662f\uff0c\u53ef\u5e76\u5806\u53ef\u4e0d\u53ea\u6709\u5de6\u504f\u6811\uff01\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u9ad8\u6548\uff08\u671f\u671b $O(\\log_2n)$\uff0c\u7a7a\u95f4\u5e38\u6570\u5c0f\uff08\u4e0d\u9700\u8981\u8bb0\u5f55 $dis$\uff09)\u7684\u53ef\u6301\u4e45\u5316\u53ef\u5e76\u5806\uff0c\u968f\u673a\u5806\uff1a\n```cpp\nvoid mg(int &x,int y){\n        static mt19937 rg(1919810u^time(0));\n        if(!x||!y){x|=y;return;}\n        if(cmp(y,x))x^=y^=x^=y;\n        cp(x),mg(rg()&1?l[x]:r[x],y);\n    }\n```\n\u4ee5\u4e0a\u4ee3\u7801\u89e3\u91ca\u4e86\u53ef\u6301\u4e45\u5316\u968f\u673a\u5806\u7684\u5408\u5e76\u8fc7\u7a0b\uff0c\u5176\u4e2d `cp` \u51fd\u6570\u8868\u793a\u590d\u5236\u8282\u70b9\uff0c\u662f\u53ef\u6301\u4e45\u5316\u7684\u5e38\u7528\u64cd\u4f5c\u3002\n\n\u5176\u5b9e\u4e0d\u7528\u5de6\u504f\u6811\u7684\u539f\u56e0\u662f\u7ebf\u6027\u5efa\u5806\u65f6 $dis$ \u4e0d\u597d\u5904\u7406\u3002\n\n\u5728\u8dd1\u6700\u77ed\u8def\u65f6\uff0c\u7531\u4e8e\u672c\u9898 $m->\\sqrt n$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4fee\u6539 $O(1)$\uff0c\u67e5\u8be2 $O\\sqrt n$ \u7684\u6570\u636e\u7ed3\u6784\uff0c\u5206\u5757\u3002\n\n\u6700\u540e\u67e5\u627e\u6240\u9700\u8981\u7684\u4f18\u5148\u961f\u5217\uff0c\u6211\u4f7f\u7528\u4e86\u63d2\u5165 $O(1)$ \u7684\u4e8c\u9879\u5806\u3002\n\n\u603b\u590d\u6742\u5ea6\uff1a\u65f6\u95f4\uff1a$O(n\\sqrt{n}+m+k\\log_2k)$\uff0c\u7a7a\u95f4\uff1a$O(n\\log_2m+m+k)$\u3002\n\n\u6700\u540e\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<vector>\nusing std::vector;\nusing ll=long long;\nconst int N=5005,M=2e5+5,T=2222222,P=5e5+5;\nconst ll INf=2e18;\nstatic inline char gc(){\n    static char buf[M+5];\n    static int it,ed;\n    if(it==ed)ed=(it=0)+fread(buf,1,M,stdin);\n    return it==ed?EOF:buf[it++];\n}\nstatic inline int read(int x){\n    static char c;for(c=gc();c<48;c=gc());\n    while(c>47)x=x*10+(48^c),c=gc();return x;\n}\ninline void swap(int &x,int &y){\n    static int z;\n    z=x,x=y,y=z;\n}\nstatic inline ll read(){\n    static ll x,f;static char c;\n    for(c=gc();c<48;c=gc());\n    for(x=0;c>47;x=x*10+(48^c),c=gc());\n    x*=10000000;\n    if(c=='.')for(f=1000000,c=gc();c>47;x+=f*(c^48),c=gc(),f/=10);\n    return x;\n}\nvector<int>lk[N],bl[105];\nint n,m,wd[M],pr[N],mn[105],ans;\nll E,w[M],dis[N];\nstruct G{int u,v;ll w;}g[M];\nint l[P],r[P],cnt,d[P],ds[P];\ninline bool cmp(const int &x,const int &y){\n    return g[d[x]].w<g[d[y]].w;\n}\ninline void cp(int &x){\n    l[++cnt]=l[x],r[cnt]=r[x];\n    d[cnt]=d[x];x=cnt;\n}\nvoid mg(int &x,int y){\n    if(!x||!y){x|=y;return;}\n    if(cmp(y,x))x^=y^=x^=y;\n    cp(x),mg(r[x],y);\n    if(ds[r[x]]>ds[l[x]])swap(l[x],r[x]);\n    ds[x]=ds[r[x]]+1;\n}\nstruct LT{\n    int rt;\n    inline void build(vector<int>&D){\n        if(D.empty())return;\n        int sz=D.size(),i,lc,rc,x,mx;\n        for(i=1;i<=sz;++i)d[cnt+i]=D[i-1];\n        for(i=1;i<=sz;++i){\n            lc=i<<1,rc=lc|1;\n            if(lc>sz)break;\n            else l[cnt+i]=cnt+lc;\n            if(rc>sz)break;\n            else r[cnt+i]=cnt+rc;\n        }\n        for(i=sz>>1;i;--i){\n            x=cnt+i,lc=l[x],rc=r[x];\n            ds[x]=ds[rc]+1;\n            while((lc&&cmp(lc,x))||(rc&&cmp(rc,x))){\n                if(rc&&cmp(rc,lc)){\n                    swap(d[x],d[rc]),x=rc;\n                }else{\n                    swap(d[x],d[lc]),x=lc;\n                }lc=l[x],rc=r[x];\n            }\n        }rt=cnt+1,cnt+=sz;\n    }\n    inline void join(LT &y){mg(rt,y.rt);}\n}tr[N];\nstruct Tp{\n    ll w;int ed;\n    inline bool operator<(const Tp &y)\n    const{return w<y.w;}\n}dt[T];\nvector<int>hp[25];\nvector<int>::iterator it;\nint sg[T],hs[T],ed[T],to[T],tot,top,stk[T],tp;\ninline void push(const Tp data){\n    int x=tp?stk[tp--]:++tot;\n    dt[x]=data,hp[0].push_back(x);\n    if(dt[x]<dt[top])top=x;return;\n}\ninline void Merge(int x,int y){\n    if(dt[y]<dt[x])x^=y^=x^=y;\n    if(ed[x])to[ed[x]]=y,ed[x]=y;\n    else hs[x]=ed[x]=y;\n    hp[++sg[x]].push_back(x);\n}\ninline void Init(){\n    dt[0]={INf,0};\n    if(tr[1].rt)push({g[d[tr[1].rt]].w,tr[1].rt});\n    return;\n}\ninline ll pop(){\n    int i,x=dt[top].ed;ll res=dt[top].w;\n    if(l[x])push({res+g[d[l[x]]].w-g[d[x]].w,l[x]});\n    if(r[x])push({res+g[d[r[x]]].w-g[d[x]].w,r[x]});\n    if(x=tr[g[d[x]].v].rt)push({res+g[d[x]].w,x});\n    for(it=hp[sg[top]].begin();*it!=top;++it);\n    hp[sg[top]].erase(it),x=hs[top];\n    stk[++tp]=top,hs[top]=ed[top]=to[top]=sg[top]=0;\n    for(top=0;x;i=to[x],to[x]=0,x=i)\n        hp[sg[x]].push_back(x);\n    for(i=0;i<24;++i){\n        while(hp[i].size()>1){\n            x=hp[i].back(),hp[i].pop_back();\n            Merge(x,hp[i].back()),hp[i].pop_back();\n        }\n        if(hp[i].size()&&dt[hp[i][0]]<dt[top])top=hp[i][0];\n    }\n    return res;\n}\nint main(){\n    n=read(0),m=read(0),E=read();\n    int i,q=n+1,k=n/q,x,y,T,l,r;\n    for(i=1;i<=m;++i){\n        g[i]={read(0),read(0),read()};\n        wd[i]=g[i].u,w[i]=g[i].w;\n        lk[g[i].v].push_back(i);\n    }\n    for(i=1;i<=n;++i)\n        dis[i]=INf,bl[i/q].push_back(i);\n    dis[mn[k]=T=n]=0,dis[0]=INf;\n    while(--T){\n        for(x=0,i=1;i<=k;++i)\n            if(dis[mn[i]]<dis[mn[x]])x=i;\n        if(mn[x])y=mn[x],mn[x]=0;\n        else break;\n        bl[x].erase(lower_bound(bl[x].begin(),bl[x].end(),y));\n        for(int p:bl[x])\n            if(dis[p]<dis[mn[x]])mn[x]=p;x=y;\n        for(int i:lk[x])\n            if(dis[y=wd[i]]>dis[x]+w[i]){\n                dis[y]=dis[x]+w[i],pr[y]=i;\n                if(dis[y]<dis[mn[y/q]])mn[y/q]=y;\n            }\n    }\n    for(x=1;x<=n;++x)lk[x].clear();\n    for(i=1;i<=m;++i){\n        g[i].w-=dis[g[i].u]-dis[g[i].v];\n        if(pr[g[i].u]!=i)lk[g[i].u].push_back(i);\n    }\n    for(x=1;x<n;++x){\n        tr[x].build(lk[x]);\n        lk[x].clear();\n    }lk[n].clear();\n    for(x=1;x<=n;++x)\n        if(pr[x])lk[g[pr[x]].v].push_back(x);\n    pr[l=r=1]=n;\n    while(l<=r){\n        x=pr[l++];\n        for(int y:lk[x])\n            tr[pr[++r]=y].join(tr[x]);\n    }\n    if(E>=dis[1]){\n        E-=dis[1],ans=1;\n        for(Init();top;++ans)\n            if((E-=pop()+dis[1])<0)break;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\u5173\u4e8e `typedef long long db;` \u7684\u89e3\u91ca\uff1a\u6211\u4e4b\u524d\u505a\u8fd9\u9053\u9898\u4e00\u76f4\u8fc7\u4e0d\u4e86\u540e\u4e24\u4e2a Hack \u6570\u636e\uff0c\u6700\u540e\u624d\u53d1\u73b0\u88ab\u5361\u7cbe\u5ea6\u4e86\uff0c\u5c31\u5f3a\u5236\u8f6c\u6362\u6210\u4e86 `long long`\u3002",
        "postTime": 1648032179,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u795e\u5947\u7684 K \u77ed\u8def"
    },
    {
        "content": "\u8ba9\u6211\u4eec\u76f4\u63a5\u5feb\u8fdb\u5230\u8fd9\u91cc\uff1a\n\n\u4e00\u6761 $s\\to t$ \u7684\u8def\u5f84\u53ef\u4ee5\u7528\u4e00\u4e2a\u8fb9\u5e8f\u5217 $e_1,\\ldots,e_k$ \u6765\u63cf\u8ff0\uff0c\u6ee1\u8db3\uff1a\n\n- $e_i$ \u4e0d\u5728\u6700\u77ed\u8def\u6811\u4e0a\uff1b\n- $e_i$ \u7684\u7ec8\u70b9\u5728\u6700\u77ed\u8def\u6811\u4e0a\u662f $e_{i+1}$ \u8d77\u70b9\u7684\u7956\u5148\uff0c\u7279\u522b\u5730 $e_1$ \u7684\u8d77\u70b9\u662f $s$ \u7684\u7956\u5148\uff1b\n- \u8def\u5f84\u957f\u5ea6\u7b49\u4e8e $dis(s,t)+\\sum\\delta(e_i)$\u3002\n\n\u8fd9\u6761\u8def\u5f84\u7684\u5f62\u5f0f\u5c31\u662f\u4f9d\u6b21\u7ecf\u8fc7\u6bcf\u4e2a $e_i$\uff0c\u5728\u76f8\u90bb $e_i$ \u4e4b\u95f4\u53ea\u8d70\u6700\u77ed\u8def\u6811\u4e0a\u7684\u8fb9\u3002\n\n---\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u8fb9\u5e8f\u5217\u6c42\u7b2c $k$ \u5c0f\u6743\u503c\u548c\u5373\u53ef\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e00\u4e2a\u5e26\u6269\u5c55\u8d2a\u5fc3\u6765\u89e3\u51b3\uff1a\n\n\u5e26\u6269\u5c55\u8d2a\u5fc3\u7684\u4e00\u822c\u5f62\u5f0f\u5c31\u662f\u4ece\u4e00\u4e2a\u6700\u521d\u72b6\u6001\u5f00\u59cb\u4f9d\u6b21\u6269\u5c55\u51fa\u6bcf\u4e2a\u53ef\u80fd\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u53ea\u80fd\u7531\u5c0f\u7684\u72b6\u6001\u6269\u5c55\u5230\u5927\u7684\u72b6\u6001\uff0c\u6bcf\u4e2a\u72b6\u6001\u7684\u6269\u5c55\u65b9\u5f0f\u552f\u4e00\uff0c\u90a3\u4e48\u518d\u5229\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u6bcf\u6b21\u53d6\u51fa\u961f\u9996\u8fdb\u884c\u6269\u5c55\uff0c\u8fde\u7eed $k$ \u6b21\u5c31\u53ef\u4ee5\u6c42\u51fa\u7b54\u6848\u4e86\u3002\n\n\u5728\u8be5\u95ee\u9898\u4e2d\uff0c\u6269\u5c55\u65b9\u5f0f\u5982\u4e0b\uff1a\n\n- \u5bf9\u4e8e\u5e8f\u5217 $e_1,\\ldots,e_{k}$\uff0c\u5b83\u53ef\u4ee5\u5728\u540e\u9762\u6dfb\u52a0\u4e00\u6761\u8fb9 $e_{k+1}$\uff0c\u6269\u5c55\u51fa $e_1,\\ldots,e_k,e_{k+1}$\uff1b\n- \u5bf9\u4e8e\u5e8f\u5217 $e_1,\\ldots,e_k$\uff0c\u8bbe $e_{k-1}$ \u7684\u7ec8\u70b9\u4e3a $a$\uff0c\u6211\u4eec\u5c06 $e_k$ \u66ff\u6362\u4e3a\u6743\u503c\u66f4\u5927\u7684\u4e00\u6761\u8fb9\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u552f\u4e00\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u89c4\u5b9a\u53ea\u6269\u5c55**\u8d77\u70b9\u662f $a$ \u7956\u5148\u7684\u6240\u6709\u975e\u6811\u8fb9\u4e2d\uff0c\u6743\u503c\u662f $e_k$ \u540e\u7ee7\u7684\u90a3\u4e00\u4e2a**\u3002\n\n\u8fd9\u6837\u663e\u7136\u6bcf\u4e2a\u72b6\u6001\u7684\u6269\u5c55\u65b9\u5f0f\u552f\u4e00\uff0c\u5373\u4e0d\u4f1a\u6709\u4e00\u4e2a\u65b9\u6848\u7b97\u4e24\u6b21\uff08\u56e0\u4e3a\u6bcf\u4e2a\u72b6\u6001\u7684\u524d\u9a71\u552f\u4e00\uff09\u3002\n\n\u53ef\u4ee5\u7528**\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811**\u5b9e\u73b0\u4e0a\u8ff0\u7b97\u6cd5\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a $a$ \u6c42\u51fa\u6240\u6709\u8d77\u70b9\u662f $a$ \u7684\u7956\u5148\u7684\u975e\u6811\u8fb9\u6743\u503c\u6784\u6210\u7684\u7ebf\u6bb5\u6811\uff0c\u7531\u4e8e\u8981\u652f\u6301\u7684\u64cd\u4f5c\u4ec5\u4ec5\u662f\u6c42\u67d0\u68f5\u7ebf\u6bb5\u6811\u4e0a\u67d0\u503c\u7684\u540e\u7ee7\u548c\u6c42\u67d0\u68f5\u7ebf\u6bb5\u6811\u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u90fd\u53ef\u4ee5 $O(\\log n)$ \u5b8c\u6210\u3002\n\n\u5916\u9762\u518d\u5957\u4e00\u4e2a `priority_queue` \u7ef4\u62a4\u5f53\u524d\u6240\u6709\u72b6\u6001\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n+m\\log n+k(\\log k+\\log n))$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(m\\log n+k)$\u3002\n\n---\n\n\u5bf9\u6bd4\u4e00\u4e0b\u5176\u4ed6\u4eba\u8bf4\u7684\u5806\u7684\u505a\u6cd5\uff1a\n\n\u8003\u8651\u5c06\u4e0a\u8ff0\u7b97\u6cd5\u4e2d\u7684\u7ebf\u6bb5\u6811\u6362\u6210\u5806\uff0c\u90a3\u4e48\u7b2c\u4e8c\u79cd\u6269\u5c55\u5c31\u4e0d\u7528\u662f\u6c42\u540e\u7ee7\u4e86\uff0c\u800c\u662f\u53d6\u51fa\u5806\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\u540e\u52a0\u5165\u5b83\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\uff08\u8fd9\u6837\u4e5f\u6ee1\u8db3\u5927\u7684\u72b6\u6001\u603b\u662f\u88ab\u66f4\u5c0f\u7684\u72b6\u6001\u6269\u5c55\u51fa\uff09\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2a\u5806\u4ee5\u4e00\u79cd\u62d3\u6251\u5e8f\u904d\u5386\u3002\n\n\u8fd9\u91cc\u9700\u8981\u4f7f\u7528\u4e00\u79cd\u53ef\u6301\u4e45\u5316\u7684\u5806\uff08\u4e0d\u4e00\u5b9a\u662f\u53ef\u5e76\u5806\uff0c\u548c\u7ebf\u6bb5\u6811\u4e00\u6837\u53ea\u9700\u8981\u5355\u70b9\u52a0\u5165\u5373\u53ef\uff09\uff0c\u4ee5\u6700\u5bb9\u6613\u5199\u7684\u5de6\u504f\u6811\u4e3a\u4f8b\uff0c\u7531\u4e8e\u5806\u7684\u7a7a\u95f4\u7ebf\u6027\uff0c\u800c\u4e14\u6c42\u51fa\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7684\u8fc7\u7a0b $O(1)$\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u6bd4\u4e0a\u9762\u66f4\u597d\u4e00\u4e9b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n+m\\log n+k\\log k)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n+m+k)$\u3002\n\n\u53ef\u89c1\u5806\u505a\u6cd5\u662f\u66f4\u4f18\u8d8a\u7684\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u7ebf\u6bb5\u6811\u7b97\u6cd5\u5b9e\u9645\u4e0a\u6ca1\u4ec0\u4e48\u7528\uff0c\u4f46\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u601d\u8def\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=5010,MAXM=200010,MAXD=4000010;\nconst double eps=1e-8;\ndouble res,z,dis[MAXN];\nint n,m,x,y,tot,cnt,ans,rt[MAXN],ch[MAXD][2],vis[MAXN];\npair <double,pair<int,int> > eg[MAXM];\nvector <int> add[MAXN];\nvector < pair<pair<int,int>,double> > v[MAXN];\npriority_queue < pair<double,pair<int,int> > > q;\nvoid dfs (int x) {\n\tvis[x]=1;\n\tint len=v[x].size();\n\tfor (int i=0;i<len;i++) {\n\t\tint y=v[x][i].first.first;\n\t\tdouble z=v[x][i].second;\n\t\tif (vis[y]) {continue;}\n\t\tif (fabs(dis[y]-dis[x]-z)<=eps) {\n\t\t\tv[x][i].first.second=1;\n\t\t\tdfs(y);\n\t\t}\n\t}\n}\nint modify (int rt,int l,int r,int v) {\n\tint p=++tot;\n\tif (l==r) {return p;}\n\tint mid=(l+r)>>1;\n\tif (v<=mid) {\n\t\tch[p][0]=modify(ch[rt][0],l,mid,v),ch[p][1]=ch[rt][1];\n\t} else {\n\t\tch[p][1]=modify(ch[rt][1],mid+1,r,v),ch[p][0]=ch[rt][0];\n\t}\n\treturn p;\n}\nint queryfir (int rt,int l,int r) {\n\tif (l==r) {return (rt?l:0);}\n\tint mid=(l+r)>>1;\n\tif (ch[rt][0]) {return queryfir(ch[rt][0],l,mid);}\n\telse {return queryfir(ch[rt][1],mid+1,r);}\n}\nint querynx (int rt,int l,int r,int v) {\n\tif (l==r) {return (rt?(l>v?l:0):0);}\n\tint mid=(l+r)>>1;\n\tif (mid<=v) {return querynx(ch[rt][1],mid+1,r,v);}\n\telse {\n\t\tint tmp=querynx(ch[rt][0],l,mid,v);\n\t\tif (tmp) {return tmp;}\n\t\treturn querynx(ch[rt][1],mid+1,r,v);\n\t}\n}\nvoid dfs2 (int x) {\n\tint len=add[x].size();\n\tfor (int i=0;i<len;i++) {rt[x]=modify(rt[x],1,cnt,add[x][i]);}\n\tlen=v[x].size();\n\tfor (int i=0;i<len;i++) {\n\t\tint y=v[x][i].first.first;\n\t\tif (v[x][i].first.second) {\n\t\t\trt[y]=rt[x];\n\t\t\tdfs2(y);\n\t\t}\n\t}\n}\nvoid print (int rt,int l,int r) {\n\tprintf(\"%d  %d  %d\\n\",rt,l,r);\n\tif (l==r) {return;}\n\tint mid=(l+r)>>1;\n\tprint(ch[rt][0],l,mid);\n\tprint(ch[rt][1],mid+1,r);\n\treturn;\n}\nint main () {\n\tscanf(\"%d%d%lf\",&n,&m,&res);\n\tfor (int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d%lf\",&x,&y,&z);\n\t\tif (x==n) {continue;}\n\t\tv[y].push_back(make_pair(make_pair(x,0),z));\n\t}\n\tfor (int i=1;i<=n-1;i++) {dis[i]=1e12;}\n\tq.push(make_pair(0,make_pair(n,0)));\n\twhile (q.size()) {\n\t\tpair<double,pair<int,int> > a=q.top();\n\t\tq.pop();\n\t\tint nw=a.second.first;\n\t\tif (vis[nw]) {continue;}\n\t\tvis[nw]=1;\n\t\tint len=v[nw].size();\n\t\tfor (int i=0;i<len;i++) {\n\t\t\tint y=v[nw][i].first.first;\n\t\t\tdouble z=v[nw][i].second;\n\t\t\tif (dis[y]>dis[nw]+z) {\n\t\t\t\tdis[y]=dis[nw]+z;\n\t\t\t\tq.push(make_pair(-dis[y],make_pair(y,0)));\n\t\t\t}\n\t\t}\n\t}\n\tmemset(vis,0,sizeof(vis));\n\tdfs(n);\n\tfor (int i=1;i<=n;i++) {\n\t\tint len=v[i].size();\n\t\tfor (int j=0;j<len;j++) {\n\t\t\tint y=v[i][j].first.first;\n\t\t\tdouble z=v[i][j].second;\n\t\t\tif (!v[i][j].first.second) {eg[++cnt]=make_pair(dis[i]+z-dis[y],make_pair(y,i));}\n\t\t}\n\t}\n\tsort(eg+1,eg+cnt+1);\n\tfor (int i=1;i<=cnt;i++) {\n\t\t//printf(\"%d   %.6f   %d  %d\\n\",i,eg[i].first,eg[i].second.first,eg[i].second.second);\n\t\tadd[eg[i].second.first].push_back(i);\n\t}\n\tdfs2(n);\n\t//print(rt[1],1,cnt);\n\tres-=dis[1],ans=1;\n\tint tmp=queryfir(rt[1],1,cnt);\n\tif (tmp) {q.push(make_pair(-eg[tmp].first,make_pair(1,tmp)));}\n\twhile (q.size()) {\n\t\tpair<double,pair<int,int> > a=q.top();\n\t\tq.pop();\n\t\tdouble val=dis[1]-a.first;\n\t\tif (res-val<=-eps) {break;}\n\t\tres-=val,ans++;\n\t\tint c=a.second.first,d=a.second.second;\n\t\tint nx=querynx(rt[c],1,cnt,d),tmp=eg[d].second.second;\n\t\tif (nx) {q.push(make_pair(a.first+eg[d].first-eg[nx].first,make_pair(c,nx)));}\n\t\tnx=queryfir(rt[tmp],1,cnt);\n\t\tif (nx) {q.push(make_pair(a.first-eg[nx].first,make_pair(tmp,nx)));}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1655441559,
        "uid": 113546,
        "name": "ix35",
        "ccfLevel": 10,
        "title": "\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6c42 k \u77ed\u8def"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811](https://oi-wiki.org/ds/persistent-heap/)\uff0c[\u6700\u77ed\u8def](https://www.luogu.com.cn/problem/P4779)\n\n\u5bf9\u4e8e\u56fe $G$\uff0c\u5efa\u7acb\u5b83\u7684\u53cd\u56fe $G'$\uff0c\u5728 $G'$ \u4e2d\u4ee5 $n$ \u4e3a\u8d77\u70b9\u8dd1\u4efb\u610f\u5355\u6e90\u6700\u77ed\u8def\uff0c\u5efa\u7acb\u6700\u77ed\u8def\u6811 $T$\uff08\u5373\u5176\u4e2d\u4efb\u610f\u8282\u70b9\u5230\u6811\u6839\u7684\u8def\u5f84\u90fd\u662f\u5b83\u7684\u6700\u77ed\u8def\uff09\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u4ece $1$ \u5230 $n$ \u7684\u8def\u5f84 $P$\uff0c\u53d6 $P'=P/T$\uff0c\u5373 $P$ \u4e2d\u7684\u975e\u6811\u8fb9\u6784\u6210\u7684\u8fb9\u96c6\u3002\n\n\u9996\u5148\uff0c\u4e24\u6761\u8fb9 $e_1=(u_1,v_1),e_2=(u_2,v_2)$\uff0c\u5982\u679c\u5b83\u4eec\u5728 $P'$ \u4e2d\u76f8\u90bb\uff0c\u90a3\u4e48\u53ea\u4f1a\u51fa\u73b0\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. $v_1=u_2$\uff0c\u5373\u5b83\u4eec\u76f8\u63a5\n\n2. $u_2$ \u662f $v_1$ \u5728\u6811\u4e0a\u7684\u7956\u5148\uff0c\u5219\u8fde\u63a5\u5b83\u4eec\u7684 $P$ \u4e2d\u7684\u8fb9\u5373\u4e3a $v_1$ \u5230 $u_2$ \u5728 $T$ \u4e0a\u7684\u7b80\u5355\u8def\u5f84\u3002\n\n\u6240\u4ee5\uff0c \u5408\u6cd5\u7684 $P'$ \u53ef\u4ee5\u552f\u4e00\u5730\u786e\u5b9a\u4e00\u4e2a $P$\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u8ba1\u7b97 $P$ \u7684\u957f\u5ea6\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u5728 $P'$ \u4e2d\u7684\u8fb9 $e=(u,v)$\uff0c\u539f\u672c\u53ef\u4ee5\u76f4\u63a5\u4ee5 $dist_u$ \u8d70\u5230\u6811\u6839\uff0c\u5374\u62d0\u4e86\u4e00\u4e2a\u5f2f\uff0c\u82b1\u8d39 $dist_v+w_e$\uff0c\u6240\u4ee5 $\\Delta w_e=dist_v+w_e-dist_u$\uff0c\u90a3\u4e48\u603b\u7684 $w=dist_1+\\sum_{e\\in P'}\\Delta w_e$\uff0c\u4e3a\u65b9\u4fbf\uff0c\u6211\u4eec\u4ee4 $\\sum_{e\\in P'}\\Delta w_e=\\Sigma$\uff0c$w$ \u7b2c $k$ \u5c0f\u5373\u4e3a $\\Sigma$ \u7b2c $k$ \u5c0f\u3002\n\n\u4ece $1\\to n$ \u7684\u6700\u77ed\u8def\u5f00\u59cb(\u5373 $P'=\\emptyset$)\uff0c\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u5df2\u6709 $P'$\u3002\u5c06\u4e00\u4e2a $P'$ \u66f4\u65b0\u4e3a\u6bd4\u5b83\u7684 $\\Sigma$ \u66f4\u5927\u7684\u8def\u5f84\u4e2d $\\Sigma$ \u6700\u5c0f\u7684\u3002\u6709\u4e24\u79cd\u66f4\u65b0\u65b9\u6cd5\uff1a\n\n1. \u5728 $P'$ \u5c3e\u90e8\u65b0\u52a0\u4e00\u6761\u975e\u6811\u8fb9\n\n2. \u5c06 $P'$ \u5c3e\u90e8\u7684\u8fb9\u66ff\u6362\u4e3a\u53e6\u4e00\u6761\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u5982\u4f55\u5feb\u901f\u5bfb\u627e\u5b83\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u7ef4\u62a4\u6574\u4e2a\u56fe\uff0c\u6bcf\u4e2a\u8282\u70b9\u5de6\u513f\u5b50\u662f\u4ed6\u81ea\u5df1\u8eab\u4e0a\u7684\u8fb9\uff0c\u53f3\u513f\u5b50\u662f\u4ed6\u7684\u7956\u5148\u3002\n\n\u5177\u4f53\u7684\u5b9e\u73b0\u95ee\u9898\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<typename zqw>inline void qr(zqw&x){\n\tbool f=x=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)) f|=c=='-',c=getchar();\n\twhile(isdigit(c)) x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\tx=f?(x-1):x;\n}\ntemplate<typename zqw>void wr(zqw x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>9)wr(x/10);\n\tputchar((x%10)^48);\n}\nconst int MAXN=5e3+5,MAXM=2e5+5;\nconst double eps=1e-6;\nstruct node{\n\tint lc,rc,dis,to;\n\tdouble key;\n}tr[MAXN*310];\nstruct path{//\u5176\u5b9e\u8def\u5f84\u53ea\u9700\u8981\u5b58\u6700\u540e\u4e00\u6761\u8fb9\u7684\u5bf9\u5e94\u8282\u70b9\n\tint x;\n\tdouble val;\n\tinline bool operator<(const path&o)const{return val>o.val;}\n};\nint cnt,cnte,ans,n,m,hd[MAXN][2],to[MAXM][2],fa[MAXN],nxt[MAXM][2],seq[MAXN],rt[MAXN];\ndouble R,ww[MAXM][2],dist[MAXN];\nbool vis[MAXN];\ninline int newnode(int t,double key){\n\ttr[++cnt]={0,0,0,t,key};\n\treturn cnt;\n}\ninline void add(int u,int v,double w){\n\t++cnte;\n\tto[cnte][0]=v,nxt[cnte][0]=hd[u][0],hd[u][0]=cnte,ww[cnte][0]=w;\n\tto[cnte][1]=u,nxt[cnte][1]=hd[v][1],hd[v][1]=cnte,ww[cnte][1]=w;\n}\ninline bool cmp(int x,int y){return dist[x]<dist[y];}\nint merge(int x,int y){\n\tif(!x||!y)return x^y;\n\tif(tr[x].key>tr[y].key)swap(x,y);\n\tint p=++cnt;\n\ttr[p]=tr[x];\n\ttr[p].rc=merge(tr[p].rc,y);\n\tif(tr[tr[p].lc].dis<tr[tr[p].rc].dis)swap(tr[p].lc,tr[p].rc);\n\ttr[p].dis=tr[tr[p].rc].dis+1;\n\treturn p;\n}\nvoid dijk(){//\u6700\u77ed\u8def+\u8fde\u6811\u8fb9\n\tfor(int i=1;i<=n;++i)dist[i]=0x3f3f3f3f;\n\tpriority_queue<pair<double,int> >Q;\n\tQ.push({0,n});\n\tdist[n]=0;\n\twhile(Q.size()){\n\t    int u=Q.top().second;\n\t    Q.pop();\n\t    if (vis[u]) continue;\n\t    vis[u]=1;\n\t    for(int i=hd[u][1];i;i=nxt[i][1]){\n\t    \tconst int v=to[i][1];\n\t\t\tconst double w=ww[i][1];\n\t        if (dist[u]+w-dist[v]<-eps) {\n\t        \tdist[v]=dist[u]+w;\n\t        \tfa[v]=i;\n\t            Q.push({-dist[v],v});\n\t\t\t}\n\t    }\n\t}\n}\nint main(){\n\tqr(n),qr(m),scanf(\"%lf\",&R);\n\tfor(int i=1,u,v;i<=m;++i){\n\t\tdouble w;\n\t\tqr(u),qr(v),scanf(\"%lf\",&w);\n\t\tif(u==n){\n\t\t\t--i,--m;\n\t\t\tcontinue;\n\t\t}\n\t\tadd(u,v,w);\n\t}\n\tdijk();\n\tfor(int i=1;i<=n;++i)seq[i]=i;\n\tsort(seq+1,seq+n+1,cmp);\n\tfor(int i=1;i<=n;++i){//\u7c7b\u4f3c\u4e8ebfs\n\t\tint u=seq[i];\n\t\tfor(int e=hd[u][0];e;e=nxt[e][0]){\n\t\t\tif(fa[u]!=e){\n\t\t\t\tconst int v=to[e][0];\n\t\t\t\trt[u]=merge(rt[u],newnode(v,dist[v]+ww[e][0]-dist[u]));\n\t\t\t}\n\t\t}\n\t\trt[u]=merge(rt[u],rt[to[fa[u]][0]]);\n\t}\n\tpriority_queue<path>Q;\n\tif(R-dist[1]<-eps)return puts(\"0\"),0;\n\tR-=dist[1],ans=1;\n\tif(rt[1])Q.push({rt[1],tr[rt[1]].key});\n\twhile(Q.size()){\n\t\tpath u=Q.top();//\u6ce8\uff1a\u8282\u70b9\u53ea\u5f80\u4e0b\u8df3\u5373\u53ef\u6ee1\u8db3\u6362\u8fb9\u65f6\u4e0d\u91cd\u590d\u9009\n\t\tQ.pop();\n\t\tif(R-(u.val+dist[1])<-eps)break;\n\t\tR-=u.val+dist[1],++ans;\n\t\t//\u6362\u8fb9\n\t\tif(tr[u.x].lc)Q.push({tr[u.x].lc,u.val-tr[u.x].key+tr[tr[u.x].lc].key});\n\t\tif(tr[u.x].rc)Q.push({tr[u.x].rc,u.val-tr[u.x].key+tr[tr[u.x].rc].key});\n\t\t//\u52a0\u8fb9\n\t\tif(rt[tr[u.x].to])Q.push({rt[tr[u.x].to],u.val+tr[rt[tr[u.x].to]].key});\n\t}\n\twr(ans);\n} \n```",
        "postTime": 1644653450,
        "uid": 383785,
        "name": "Hagasei",
        "ccfLevel": 6,
        "title": "P2483\u9898\u89e3"
    },
    {
        "content": "[$\\text{Link.}$](https://www.luogu.com.cn/problem/P2483)\n\n[\u6700\u77ed\u8def\u6811](https://oi-wiki.org/graph/kth-path/#%E6%9C%80%E7%9F%AD%E8%B7%AF%E6%A0%91%E4%B8%8E%E4%BB%BB%E6%84%8F%E8%B7%AF%E5%BE%84) + [\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811](https://oi-wiki.org/ds/persistent-heap/)\u3002\n\n## Solution\n\n### 1\n\n\u57fa\u4e8e\u6700\u77ed\u8def\u6811\u7684\u6784\u5efa\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7ec8\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u3002\u5e76\u4ee5\u6b64\u4e3a\u57fa\u7840\u5efa\u6811\u3002\n\n\u4e5f\u5373\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6811\u4e0a\u7684\u8fb9\uff0c\u4e00\u5b9a\u88ab\u5305\u542b\u5728\u7ec8\u70b9\u5230\u67d0\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5f97\u5230\u7b2c $k$ \u5927\u7684\u8def\u5f84\u5462\uff1f\u65e0\u975e\u5c31\u662f\u66ff\u6362\u6389\u8fd9\u4e9b\u6811\u8fb9\uff0c\u4ee5\u6b64\u8ba1\u7b97\u989d\u5916\u7684\u4ee3\u4ef7\uff0c\u8fd9\u4e5f\u662f\u5efa\u6700\u77ed\u8def\u6811\u7684\u76ee\u7684\u3002\n\n\u663e\u7136\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u7528\u5176\u4ed6\u8fb9\u66ff\u6362\u5f53\u524d\u7684\u6811\u8fb9\u4e00\u5b9a\u662f\u4e0d\u4f18\u7684\uff0c\u5373\u4ee3\u4ef7\u4e00\u5b9a\u4f1a\u589e\u5927\u3002\n\n### 2\n\n\u8fd9\u91cc\u5176\u5b9e\u662f\u6ee1\u8db3\u6211\u81ea\u5df1\u7684\u601d\u8003\u7684\uff1a\n\n* \u5bf9\u4e8e\u8def\u5f84\u7684\u6784\u9020\uff0c\u8fd9\u4e9b\u8def\u5f84\u7684\u4ee3\u4ef7\u4e00\u5b9a\u662f\u76f8\u5bf9\u6709\u5e8f/\u5355\u8c03\u7684\u3002\n  \n* \u6211\u4eec\u5f04\u4e00\u4e2a\u5c0f\u6839\u5806\u7ef4\u62a4\u7b54\u6848\uff0c\u6bcf\u6b21\u53d6\u961f\u5934\u5f97\u5230\u524d $k$ \u5c0f\u6761\u8def\u5f84\u3002\u56e0\u4e3a\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u4e25\u683c\u4fdd\u8bc1\u5f97\u5230\u7684\u7b54\u6848\u662f\u4e25\u683c\u5355\u8c03\u7684\u3002\n  \n\n\u5b9e\u73b0\u7b2c\u4e8c\u4e2a\uff0c\u5176\u5b9e\u5c31\u8981\u6ee1\u8db3\u6bcf\u6b21\u6211\u4eec\u53d6\u51fa\u7684\u961f\u5934\u4e00\u5b9a\u8981\u66f4\u65b0\u65b0\u7684\u72b6\u6001\uff08\u56e0\u4e3a $k$ \u7684\u4e0a\u9650\u5728\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u5b9a\u7684\uff09\uff0c\u800c\u6bcf\u6b21\u66f4\u65b0\u7684\u65b0\u72b6\u6001\u4e00\u5b9a\u662f\u6bd4\u8fd9\u4e2a\u88c5\u586b\u8981\u66f4\u52a3\u7684\u3002\n\n\u5728\u6211\u7684\u63a8\u8bba\u4e2d\uff0c\u8fd8\u5b58\u5728\u4e00\u4e2a\u68d8\u624b\u7684\u95ee\u9898\uff1a\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u5c0f\u6839\u5806\u5f97\u5230\u7b54\u6848\uff0c\u5c31\u9700\u8981\u628a\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\u52a0\u8fdb\u53bb\u3002\n\n\u90a3\u4e48\u663e\u7136\u6211\u4eec\u4e0d\u53ef\u80fd\u540c\u65f6\u5f97\u5230\u6240\u6709\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u53ea\u80fd\u662f\u4ece\u4e00\u4e2a\u6700\u4f18\u8def\u5f84\u5f00\u59cb\uff0c\u653e\u5165\u4f18\u5148\u961f\u5217\uff0c\u53d6\u51fa\u961f\u5934\uff0c\u4ee5\u961f\u5934\u7684\u72b6\u6001\u4e3a\u57fa\u7840\u66f4\u65b0\u51fa\u82e5\u5e72\u4e2a\u7a0d\u52a3\u7684\u8def\u5f84\u65b9\u6848\u5e76\u52a0\u5165\u961f\u5217\u3002\u8fd9\u4e0e\u4e0a\u9762\u7684\u63a8\u8bba\u76f8\u7b26\u5408\u3002\n\n### 3\n\n\u6700\u4f18\u65b9\u6848\u662f\u663e\u7136\u53ef\u4ee5\u5f97\u5230\u7684\uff0c\u5c31\u662f\u666e\u901a\u6700\u77ed\u8def\u3002\u5173\u952e\u5728\u4e8e\u5982\u4f55\u53bb\u4e0d\u65ad\u66f4\u65b0\u51fa\u90a3\u4e2a\u201c\u7a0d\u52a3\u7684\u65b9\u6848\u201c\u3002\n\n\u8fd9\u91cc\u5c31\u63d0\u5230\u4e86\u5f00\u5934\u7684\u6700\u77ed\u8def\u6811\u3002\n\n\u8bf4\u767d\u4e86\uff0c\u6700\u77ed\u8def\u6811\u6ee1\u8db3\u8fd9\u6837\u4e00\u4e2a\u6027\u8d28\uff1a\n\n> \u6811\u6839 $T$ \u5230\u70b9 $i$ \u7684\u7b80\u5355\u8def\u5f84\u5c31\u662f $T$ \u5230 $i$ \u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u8bf4\u660e\u4e0d\u5728\u6700\u77ed\u8def\u6811\u4e0a\u7684\u8fb9\uff0c\u4e00\u5b9a\u5b58\u5728\u6bd4\u5b83\u66f4\u4f18\u7684\u8def\u5f84\u80fd\u66ff\u4ee3\u5b83\uff0c\u6211\u4eec\u4e14\u53eb\u5b83\u975e\u6811\u8fb9\u3002\n\n\u4e3a\u4e86\u66f4\u65b0\u72b6\u6001\uff0c\u6211\u4eec\u9700\u8981\u7684\u663e\u7136\u5c31\u662f\u8fd9\u4e9b\u975e\u6811\u8fb9\u3002\n\n\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u662f\uff1a\u5982\u4f55\u9002\u5f53\u5730\u9009\u62e9\u8fd9\u4e9b\u975e\u6811\u8fb9\u53bb**\u66ff\u4ee3\u6811\u8fb9**\uff0c\u80fd\u4f7f\u65b0\u65b9\u6848\u7a0d\u52a3\u5462\uff1f\n\n\u66ff\u4ee3\u4e0d\u514d\u8fc7\u4e8e\u9ebb\u70e6\uff0c\u6211\u4eec\u4e0d\u59a8\u8f6c\u5316\u4e00\u4e0b\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u9009\u51fa\u4e00\u4e2a\u975e\u6811\u8fb9\u8fb9\u96c6\uff0c\u5373\u4e3a $S$\u3002\u6bcf\u6b21\u7684\u65b9\u6848\u4f7f\u7528\u7684\u975e\u6811\u8fb9\u5373\u4e3a $S$\u3002\u800c\u5c06\u8fd9\u4e9b\u975e\u6811\u8fb9\u8fde\u63a5\u8d77\u6765\u7684\uff0c\u5c31\u662f\u6811\u8fb9\u3002\n\n\u8fdb\u4e00\u6b65\u7b80\u5316\uff0c\u6211\u4eec\u6bcf\u6b21\u8ba1\u7b97\u7684\u90fd\u662f\u5f53\u524d\u65b9\u6848\u6bd4\u6700\u4f18\u65b9\u6848\u591a\u51fa\u591a\u5c11\u82b1\u8d39\u3002\n\n\u8fd9\u6837\u4ee5\u6765\u6211\u4eec\u65e0\u9700\u8003\u8651\u6811\u8fb9\u7684\u9009\u7528\u4e0e\u4ee3\u4ef7\u4e4b\u548c\u3002\u6211\u4eec\u53ea\u5173\u5fc3\u8fb9\u96c6 $S$ \u4e2d\u975e\u6811\u8fb9\u7684\u4ee3\u4ef7\u4e4b\u548c\u3002\n\n\u540c\u65f6\uff0c\u6bcf\u6761\u975e\u6811\u8fb9\u7684\u4ee3\u4ef7\u6211\u4eec\u628a\u5b83\u8f6c\u5316\u4e3a $e_i.w' = e_i.w - (dis_u-dis_v) = e_i.w-dis_u+dis_v$\u3002\u610f\u4e3a\u4f7f\u7528\u4e86\u8fd9\u6761\u975e\u6811\u8fb9\u540e\uff0c\u6bd4\u6700\u4f18\u65b9\u6848\u591a\u51fa\u591a\u5c11\u4ee3\u4ef7\u3002\n\n### 4\n\n\u5bf9\u4e8e\u961f\u5934\u5f39\u51fa\u6765\u7684\u65b9\u6848\u8fb9\u96c6 $S$\uff0c\u6211\u4eec\u4e0d\u59a8\u53d6\u51fa\u5b83\u6700\u665a\u52a0\u5165\u7684\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u66ff\u6362\u6210\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u82b1\u8d39\u591a\u3001\u540c\u8d77\u70b9\u7684\u975e\u6811\u8fb9\uff0c\u6216\u8005\u4fdd\u7559\u5e76\u65b0\u52a0\u5165\u4e00\u6761\u975e\u6811\u8fb9\u3002\n\n\u6613\u8bc1\u8fd9\u6837\u662f\u5408\u6cd5\u7684\u3001\u80fd\u8986\u76d6\u6240\u6709\u60c5\u51b5\u3001\u4e14\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u7684\u3002\n\n\u5173\u952e\u662f\u6211\u4eec\u8981\u600e\u6837\u7528\u5c0f\u6839\u5806\u7ef4\u62a4\uff0c\u5728\u6700\u77ed\u8def\u6811\u4e0a\uff0c\u4e00\u4e2a\u70b9\u5230\u5b83\u7684\u7956\u5148\u4eec\u7684\u6240\u6709\u975e\u6811\u8fb9\u3002\n\n\u6545\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\uff1a\n\n1. \u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u8d77\u70b9\u7684\u6240\u6709\u6709\u5411\u8fb9\uff0c\u7528\u4e00\u4e2a\u6700\u5c0f\u5806\u7ef4\u62a4\u3002\n  \n2. \u8fd9\u4e2a\u70b9\u548c\u5b83\u6240\u6709\u7956\u5148\u7684\u5806\u7684\u5e76\u96c6\u3002\n  \n\n\u5bf9\u4e8e\u8fd9\u4e2a\u4e1c\u897f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u9898\u76ee\u80cc\u666f\u5df2\u7ecf\u63d0\u5230\uff0c\u662f $O((n+m)logn+klogk)$ \u7684\u3002\u76f8\u6bd4 A* \u7684 $O(nk\\log n)$\uff0c\u5176\u4f18\u8d8a\u6027\u663e\u7136\u3002\n\n## Code\n\n$\\text{2.6 KB}$\uff0c\u538b\u884c\u89c1\u8c05\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef double db;\n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define pii pair<db, int>\n#define mp make_pair\n#define fr first\n#define se second\nconst int maxn = 5e5 + 5, maxm = 2e5 + 5;\nint n, m; db E;\ndb dis[maxn]; int Fa[maxn], ans; bool vis[maxn];\nint sec[maxn], rt[maxn];\nstruct Edge{\n\tint cnt, hd[maxn];\n\tstruct edge{\n\t\tint to, nxt; db w;\n\t}e[maxm];\n\tinline edge& operator [](int x){ return e[x];}\n\tinline void add(int u, int v, db w){ e[++cnt] = {v, hd[u], w}, hd[u] = cnt;}\n}g, f;\nstruct tree{\n\tint ls, rs; db vl; int td, fa;\n};\nstruct Leftist_Tree{\n\ttree t[maxn << 1]; int tot;\n\tinline tree& operator [](int x){ return t[x];}\n\tinline int nw(int f, db v){ t[++tot] = {0, 0, v, 0, f}; return tot;}\n\tinline int merge(int a, int b){\n\t\tif(!a or !b) return a + b;\n\t\tif(t[a].vl > t[b].vl) swap(a, b);\n\t\tint nw = ++tot; t[nw] = t[a];\n\t\tt[nw].rs = merge(t[nw].rs, b);\n\t\tif(t[t[nw].ls].td <= t[t[nw].rs].td) swap(t[nw].ls, t[nw].rs);\n\t\tt[nw].td = t[nw].rs ? t[t[nw].rs].td + 1 : 0;\n\t\treturn nw;\n\t}\n}T;\n\ninline void dijkstra(){\n\tpriority_queue<pii, vector<pii>, greater<pii> > pq;\n\trep(i, 1, n) dis[i] = 1e8 * 1.0;\n\tpq.push(mp(0.0, n)), dis[n] = 0;\n\twhile(pq.size()){\n\t\tpii nw = pq.top(); pq.pop();\n\t\tif(vis[nw.se]) continue; vis[nw.se] = 1;\n\t\tfor(int i = f.hd[nw.se]; i; i = f[i].nxt){\n\t\t\tint v = f[i].to; \n\t\t\tif(dis[v] > nw.fr + f[i].w)\n\t\t\t\tdis[v] = nw.fr + f[i].w, Fa[v] = i,\n\t\t\t\tpq.push(mp(dis[v], v));\n\t\t}\n\t}\n}\ninline bool cmp(int a, int b){ return dis[a] < dis[b];}\n\npriority_queue<pii, vector<pii>, greater<pii> > pq;\nint main(){\n\tscanf(\"%d%d%lf\", &n, &m, &E); rep(i, 1, n) sec[i] = i;\n\trep(i, 1, m){\n\t\tint u, v; db w; scanf(\"%d%d%lf\", &u, &v, &w);\n\t\tif(u == n){ i -= 1, m -= 1; continue;}\n\t\tg.add(u, v, w), f.add(v, u, w);\n\t}\n\tdijkstra();\n\tsort(sec + 1, sec + n + 1, cmp);\n\tT[0].td = -1;\n\trep(j, 1, n){ \n\t\tint x = sec[j];\n\t\tfor(int i = g.hd[x]; i; i = g[i].nxt) if(i != Fa[x]){\n\t\t\tint v = g[i].to; \n\t\t\trt[x] = T.merge(rt[x], T.nw(g[i].to, -dis[x] + g[i].w + dis[g[i].to]));\n\t\t} rt[x] = T.merge(rt[x], rt[g[Fa[x]].to]);\n\t}\n\t\n\tE -= dis[1], ans += 1;\n\tpq.push(mp(T[rt[1]].vl, rt[1]));\n\twhile(pq.size()){\n\t\tpii nw = pq.top(); pq.pop();\n\t\tif(E < nw.fr + dis[1]) return printf(\"%d\", ans), 0;\n\t\tE -= nw.fr + dis[1], ans += 1;\n\t\tif(T[nw.se].ls) pq.push(mp(nw.fr - T[nw.se].vl + T[T[nw.se].ls].vl, T[nw.se].ls));\n\t\tif(T[nw.se].rs) pq.push(mp(nw.fr - T[nw.se].vl + T[T[nw.se].rs].vl, T[nw.se].rs));\n\t\tif(rt[T[nw.se].fa]) pq.push(mp(nw.fr + T[rt[T[nw.se].fa]].vl, rt[T[nw.se].fa]));\n\t}\n\treturn printf(\"%d\", ans), 0;\n}\n```\n\n\n------------\n\nThanks for reading.",
        "postTime": 1685021910,
        "uid": 469672,
        "name": "\u4f0d\u53c1\u58f9",
        "ccfLevel": 7,
        "title": "\u3010P2483 [\u6a21\u677f] k \u77ed\u8def / [SDOI2010]\u3011\u9b54\u6cd5\u732a\u5b66\u9662 \u9898\u89e3"
    }
]