[
    {
        "content": "\u6211\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u4e2a\u9898\u65f6\uff0c\u7acb\u9a6c\u5c31\u60f3\u5230\u4e86\u66b4\u529b\u3002\n\n\u679a\u4e3e $k$ \uff0c\u628a\u524d $k$ \u4e2a\u6570\u548c\u63a5\u4e0b\u6765 $k$ \u4e2a\u6570\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7136\u540e\u4e00\u4e00\u6bd4\u5927\u5c0f\uff0c\u51fa\u73b0\u524d\u9762 $k$ \u4e2a\u91cc\u7684\u7b2c\u51e0\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e\u540e\u9762 $k$ \u4e2a\u91cc\u7684\u7b2c\u51e0\u4e2a\u6570\u5c31\u6392\u9664\u6389\u3002\n\n\u7136\u540e\u60f3\u5230\u4f18\u5316\uff1a\n\n1. \u4ece\u540e\u5f80\u524d\u679a\u4e3e\uff0c\u6700\u5148\u627e\u5230\u7684\u6b63\u786e\u7684\u90a3\u4e2a\u5c31\u662f\u7b54\u6848\u3002\n\n2. $k$ \u7684\u6700\u5927\u503c\u4e3a $n/2$  \uff0c\u56e0\u4e3a\u5982\u679c\u5927\u4e8e\u8fd9\u4e2a\u6570\uff0c\u52a0\u4e0b\u6765\u7684\u6570\u5c31\u51d1\u4e0d\u9f50k\u4e2a\u4e86\u3002\n\n3. \u65e2\u7136\u7ed9\u4e86 $m$ \u90a3\u5c31\u4e00\u5b9a\u662f\u6709\u7528\u7684\uff0c\u8bb0\u5f55\u4e0b\u6700\u65e9\u7684\u90a3\u4e2a $m$ , $k$ \u503c\u4e00\u5b9a\u662f\u6bd4\u8fd9\u4e2a $m$ \u6240\u5728\u5e8f\u53f7\u5c0f\u7684\uff0c\u56e0\u4e3a\u540e\u9762\u4e0d\u53ef\u80fd\u5230\u6bd4\u6700\u5927\u503c\u8fd8\u5927\u7684\u6570\u3002\n\n4. \u7528\u6876\u6392\u3002 $sort$ \u4e00\u5b9a\u662f\u4f1a\u70b8\u7684\u3002\n\n\u5c31\u4e0b\u6765\u5c31\u662f\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint m,n,ji=1000000000,f[20010],fa[2010],fb[2010],chu,o;\ninline int read(){\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\nint check(int x){\n    int oo=1;\n\tfor(int i=1;i<=x;i++)\n\t\tfa[f[i]]+=1;\n\tfor(int i=x+1;i<=2*x;i++)\n\t\tfb[f[i]]+=1;\n\tint a=1,b=1;\n\tfor(int i=1;i<=x;i++){\n\t\twhile(!fa[a])a++;\n\t\twhile(!fb[b])b++;\n\t\tif(a>=b)oo=0;\n\t\tfa[a]--;\n\t\tfb[b]--;\n\t}\n\treturn oo;\n}\nint main(){\n\tm=read();\n\tn=read();\n\tfor(int i=1;i<=n;i++){\n\t\tf[i]=read();\n\t\tif(f[i]==m&&o==0){\n\t\t\to=1;\n\t\t\tji=i;\n\t\t}\n\t}\n\tji=min(ji-1,n/2);\n\tfor(int i=ji;i>=1;i--)\n\t\tif(check(i)){\n\t\t\tchu=i;\n\t\t\tbreak;\n\t\t}\n\tcout<<chu;\n\treturn 0;\n}\n```\n",
        "postTime": 1600263187,
        "uid": 236970,
        "name": "yewanxingkong",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6807 \u3010[BalticOI 2010 Day2] Matching Bins\u3011"
    },
    {
        "content": "[My Blog](https://www.cnblogs.com/lyttt/p/14050220.html)\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P6807)\n\n### \u9898\u76ee\u89e3\u6790\n\n\u662f\u8003\u8bd5\u7684\u9898\u76ee\u3002\n\n~~\u867d\u7136\u662f\u4e2a\u7b7e\u5230\u9898\u4f46\u6211\u8fd8\u662f\u6323\u624e\u4e86\u5f88\u4e45\uff0c\u800c\u4e14\u6211\u4e2a\u667a\u969c\u628a\u6587\u4ef6\u540d\u6253\u9519\u4e86\uff0c\u7b7e\u5230\u5931\u8d25\u5624\u5624\u5624~~\n\n------\n\n\u9996\u5148\u7b80\u5316\u4e00\u4e0b\u9898\u610f\uff1a\u627e\u5230\u4e00\u4e2a\u6700\u5927\u7684$k$\uff0c\u4f7f\u5f97$a[k+1]$\u81f3$a[2k]$\u4e2d\u7684\u6570\u90fd\u80fd\u5728$a[1]$\u5230$a[k]$\u4e2d\u5339\u914d\u5230\u4e00\u4e2a\u6bd4\u5b83\u4e25\u683c\u5c0f\u7684\u6570\uff08\u6bcf\u4e2a\u6570\u90fd\u53ea\u80fd\u548c\u4e00\u4e2a\u6570\u5339\u914d\uff09\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684$k$\uff0c\u8f93\u51fa$0$\u3002\n\n\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u5de6\u534a\u8fb9\u7684\u6570\u53bb\u5728\u53f3\u534a\u8fb9\u627e\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u6570\uff0c\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u8fc7\u9898\u610f\u7406\u89e3\u4e0d\u540c\u540e\u9762\u7684\u601d\u8003\u5206\u6790\u5e94\u8be5\u4e5f\u4f1a\u76f8\u5e94\u6709\u6240\u53d8\u5316\uff09\n\n\u9996\u5148\u8003\u8651\u66b4\u529b\u679a\u4e3e$k$\uff0c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u7136\u540e\u53bb$check$\u5b83\u662f\u5426\u7b26\u5408\u60c5\u51b5\u3002\n\n$k$\u7684\u8303\u56f4\u662f$min(\\frac n 2,pos)$ \n\n$pos$\u662f\u6700\u5927\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u6700\u5927\u503c\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728\u524d\u534a\u90e8\u5206\uff0c\u6ca1\u6709\u7bb1\u5b50\u53ef\u4ee5\u88c5\u5b83\u3002\u6ce8\u610f\u5b58\u5728\u6574\u4e2a\u6570\u5217\u6ca1\u6709$m$\u7684\u6570\u636e\u3002\n\n------\n\n\u4e0b\u9762\u6765\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a$check$\u8be5\u600e\u4e48\u5199\u3002\n\n\u8d2a\u5fc3\u5730\u60f3\uff0c\u6211\u4eec\u5e94\u8be5\u7ed9\u6bcf\u4e2a\u53f3\u534a\u90e8\u5206\u7684\u6570\u5b89\u6392\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u6700\u5927\u7684\u6570\uff0c\u66b4\u529b\u505a\u8fd9\u4e2a\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u8981\u6bcf\u6b21\u6392\u5e8f\uff0c\u7136\u540e$lower\\_bound$\uff0c\u60f3\u60f3\u5c31\u5f88\u53ef\u6015\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u67e5\u627e\u5de6\u8fb9\u5c0f\u4e8e\u67d0\u4e2a\u6570\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u6743\u503c\u6811\u72b6\u6570\u7ec4\u3002\n\n\u6211\u4eec\u628a\u5de6\u534a\u8fb9\u7684\u6570\u63d2\u8fdb\u6743\u503c$BIT$\u91cc\u9762\uff0c\u7136\u540e\u5bf9\u4e8e\u53f3\u534a\u8fb9\u7684\u6570\u67e5\u8be2\u6709\u591a\u5c11\u4e2a\u6bd4\u5b83\u5c0f\u7684\u503c\u3002\n\u7531\u4e8e\u5de6\u534a\u8fb9\u7684\u6570\u53ef\u80fd\u4f1a\u88ab\u201c\u7528\u6389\u201d\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u53f3\u534a\u8fb9\u7684\u6570\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u67e5\u8be2\u6709\u591a\u5c11\u4e2a\u6bd4\u5b83\u5c0f\u7684\u5de6\u534a\u8fb9\u7684\u6570\u3002\n\u800c\u5bf9\u4e8e\u7b2c$i$\u4e2a\u6570\u800c\u8a00\uff0c\u5b83\u524d\u9762\u6709$i-1$\u4e2a\u6570\u7528\u6389\u4e86\u5de6\u534a\u8fb9\u7684\u4e00\u4e9b\u6570\uff0c\u800c\u4e14\u7528\u6389\u7684\u8fd9\u4e9b\u6570\u4e00\u5b9a\u662f\u5c0f\u4e8e\u5b83\u81ea\u5df1\u7684\uff08\u7528\u6389\u7684\u8fd9\u4e9b\u6570\u5c0f\u4e8e\u5b83\u524d\u9762\u7684\u6570\uff09\uff0c\u6240\u4ee5\u67e5\u5230\u7684\u6570\u7684\u4e2a\u6570\u51cf\u53bb$i-1$\u662f\u7b2c$i$\u4e2a\u6570\u53ef\u4ee5\u7528\u5230\u7684\u6570\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u503c\u5c0f\u4e8e$0$\uff0c\u90a3\u4e48\u8fd9\u4e2a$k$\u662f\u4e0d\u53ef\u884c\u7684\u3002\n\n\u7136\u540e\u4f60\u5c31\u5f97\u5230\u4e86$75pts$\u7684\u597d\u6210\u7ee9\u3002\n\n```cpp\nbool check(int x)\n{\n\tif(x==0) return 1;\n\t//memset(tree,0,sizeof(tree));\n\t//for(int i=1;i<=x;i++)\n\t//\tUpdate(a[i],1);\n\tif(x!=lim) Update(a[x+1],-1);\n\tmemcpy(b,a,sizeof(a));\n\tsort(b+x+1,b+2*x+1);\n\tfor(int i=x+1;i<=2*x;i++)\n\t{\n\t\tint tmp=Query(b[i]-1)-(i-x-1);\n\t\tif(tmp<=0) return 0;\n\t}\n\treturn 1;\n}\n```\n\n\u800c\u6574\u4e2a$k$\u53d8\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5de6\u534a\u8fb9\u7684\u6570\u53ef\u4ee5\u901a\u8fc7\u6743\u503c$BIT$\u7ef4\u62a4\uff0c\u53ef\u4ee5\u53ef\u6301\u7eed\u53d1\u5c55\u3002\u4f46\u662f\u53f3\u8fb9\u7684\u6570\u7684\u8bdd\uff0c\u6211\u4eec\u6bcf\u6b21\u8981\u6392\u5e8f\uff0c\u8981\u67e5\u8be2\uff0c\u6700\u574f\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230$n^2$\u3002\u800c\u6211\u4eec\u53c8\u5fc5\u987b\u8981\u91cd\u65b0\u6392\u5e8f\u518d\u679a\u4e3e\u53f3\u534a\u8fb9\u7684\u6570\u624d\u80fd\u77e5\u9053\u5b83\u5177\u4f53\u80fd\u4e0d\u80fd\u5339\u914d\u5f97\u5230\u4e00\u4e2a\u6570\u5b57\u3002\n\n------\n\n\u6211\u4eec\u60f3\u60f3\u80fd\u4e0d\u80fd\u8ba9\u53f3\u534a\u8fb9\u7684\u6570\u4e5f\u53ef\u6301\u7eed\u53d1\u5c55\u4e00\u4e0b\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u80fd\u4e0d\u80fd\u8ba9\u67e5\u8be2\u4e0e\u6392\u5e8f\u65e0\u5173\u3002\n\n\u8fd8\u662f\u5229\u7528\u6743\u503c$BIT$\uff0c\u628a\u53f3\u8fb9\u7684\u6570\u7684\u67e5\u8be2\u53d8\u6210\u4e00\u4e2a\u4fee\u6539$(a[i]-1,-1)$\uff0c\u800c\u73b0\u5728$k$\u7684\u53d8\u5316\u53ea\u4f1a\u5f71\u54cd\u5230\u8fd9\u4e9b\u4f4d\u7f6e\uff1a\uff08\u5047\u8bbe$k-1$\u53d8\u6210$k $\uff0c\u8fd9\u91cc\u663e\u7136\u987a\u7740\u505a\u8981\u987a\u4e00\u70b9\uff0c\u4e0d\u7528\u63d0\u524d\u63d2\u5165\u4e00\u4e9b\u5143\u7d20\n\n1. $a[2k-1],a[2k]$\u52a0\u5165\u53f3\u534a\u90e8\u5206\n2. $a[k]$\u4ece\u524d\u534a\u90e8\u5206\u8df3\u5230\u4e86\u53f3\u534a\u90e8\u5206\n\n\u5bf9\u5e94\u4e00\u4e0b\u4fee\u6539\uff1a\n\n1. $(a[2k-1]-1,-1)$\n2. $(a[2k]-1,-1)$\n3. $(a[k]-1,1)$\uff08$a[k]$\u8dd1\u8d70\u4e86\uff0c\u6240\u4ee5\u628a\u5b83\u4e4b\u524d\u7684\u67e5\u8be2\u64a4\u56de\n4. $(a[k],1)$\n\n\u5982\u4f55\u5224\u65ad\u5f53\u524d\u7684$k$\u662f\u5426\u53ef\u884c\u5462\uff1f\n\n\u67e5\u8be2\u6743\u503c$BIT$\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff08\u7684\u524d\u7f00\u548c\uff09\uff0c\u5982\u679c\u6709\u5c0f\u4e8e\u96f6\u7684\u5730\u65b9\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u53f3\u534a\u90e8\u5206\u7684\u6570\u627e\u4e0d\u5230\u5339\u914d\u7684\u6570\uff0c\u4e0d\u53ef\u884c\uff0c\u5426\u5219\u5c31\u53ef\u884c\u3002\n\n\u6240\u6709\u53ef\u884c\u89e3\u53d6$max$\u5373\u53ef\u3002\n\n------\n\n\u770b\u4e86\u4e00\u5708\u6ca1\u6709\u548c\u6211\u5199\u6cd5\u4e00\u6837\u7684\uff0c\u5012\u662f\u6709\u4e24\u4f4d\u521d\u4e09\u7684\u540c\u5b66\u5199\u4e86\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4e00\u4e2a$60pts$\uff0c\u4e00\u4e2a$100pts$\uff0c\u4e0d\u8fc7\u6211\u770b\u4e86\u4e00\u4e0b\uff0c\u4fee\u6539\u7684\u67e5\u8be2\u7684$\u00b11$\u6b63\u597d\u548c\u6211\u662f\u76f8\u53cd\u7684\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u6743\u503c\u7ebf\u6bb5\u6811\u662f\u533a\u95f4\u52a0\u51cf\uff0c\u6240\u4ee5\u8f83\u5927\u7684\u533a\u95f4\u5e94\u8be5\u4e3a$+1$\u624d\u80fd\u4fdd\u8bc1\u67d0\u4e00\u6bb5\u533a\u95f4\u548c\u5c0f\u4e8e\u96f6\u65f6\u4e0d\u6210\u7acb\u5427\u3002\n\n\u522b\u4eba\u7684\u5199\u6cd5\u597d\u5de7\u5999\u7684\uff0c\u4f46\u5bf9\u4e8e\u6211\u6765\u8bf4\u4e0d\u592a\u81ea\u7136\u3002\n\n\u77aa\u4e86\u597d\u4e45\u624d\u60f3\u5230\u4f18\u5316\uff0c\u4e0d\u8fc7\u6700\u540e\u81ea\u5df1\u72ec\u7acb\u77aa\u51fa\u6765\u4e86\uff0c~~\u8fd8\u987a\u624b\u62ff\u4e86\u4e2a\u6700\u4f18\u89e3~~\uff0c~~\u5728\u6d1b\u8c37\u4eab\u53d7\u5230\u4e86coding\u7684\u5feb\u4e50~~\uff08\u867d\u7136\u8fd9\u9898\u5f88\u6c34\n\n\u7406\u8bba\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(nmlogm)$\uff0c\u8dd1\u5f97\u6bd4$O(nm)$\u7684\u7b97\u6cd5\u5feb\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\n\n------\n\n### \u25baCode View\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n#define N 20005\n#define M 1005\n#define LL long long\nint rd()\n{\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') f=-1; c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c^48); c=getchar();}\n\treturn f*x;\n}\nint m,n,lim=-1,ans=0;\nint a[N],b[N];\nint tree[M];\ninline int lowbit(int x)\n{\n\treturn x&(-x);\n}\ninline int Query(int x)\n{\n\tint res=0;\n\tfor(;x;x-=lowbit(x))\n\t\tres+=tree[x];\n\treturn res;\n}\ninline void Update(int x,int val)\n{\n\tfor(;x<M-5;x+=lowbit(x))\n\t\ttree[x]+=val;\n}\nint main()\n{\n\t//freopen(\"bins.in\",\"r\",stdin);\n\t//freopen(\"bins.out\",\"w\",stdout);\n\tm=rd(),n=rd();\n\tm++; \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[i]=rd()+1;\n\t\tif(a[i]==m&&lim==-1)\n\t\t\tlim=i;\n\t}\n\tlim=min(lim,n/2);\n\t//if(lim==-1) lim=n/2;\n\t//\u6570\u636e\u91cc\u5c45\u7136\u6709\u6574\u4e2a\u6570\u5217\u90fd\u6ca1\u6709m\u7684 \u51fa\u9898\u4eba\u5927\u9a97\u5b50\u5624\u5624\u5624\n\t//\u5176\u5b9e\u8fd9\u4e2am\u5c31\u662f\u6765\u544a\u8bc9\u4f60\u503c\u57df\u5f88\u5c0f\u7684\u5427 \u53ef\u8fd9\u4e5f\u4e0d\u9700\u8981\u4e13\u95e8\u8f93\u5165\u4e00\u4e2am\u554a \u76f4\u63a5\u5728\u6570\u636e\u8303\u56f4\u91cc\u8bf4\u4e0d\u597d\u4e48233 \n\tfor(int k=1;k<=lim;k++)\n\t{\n\t\tUpdate(a[2*k]-1,-1);\n\t\tUpdate(a[2*k-1]-1,-1);\n\t\tUpdate(a[k]-1,1);//a[k]\u4e0d\u5728\u540e\u534a\u90e8\u5206\u4e86 \u5f97\u64a4\u56de\n\t\tUpdate(a[k],1);\n\t\tbool flag=0;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tint tmp=Query(i);\n\t\t\tif(tmp<0)\n\t\t\t{\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!flag) ans=max(ans,k);\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n### \u25baCode View 75pts TLE\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n#define N 20005\n#define M 1005\n#define LL long long\nint rd()\n{\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') f=-1; c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c^48); c=getchar();}\n\treturn f*x;\n}\nint m,n,lim=-1;\nint a[N],b[N];\nint tree[M];\ninline int lowbit(int x)\n{\n\treturn x&(-x);\n}\ninline int Query(int x)\n{\n\tint res=0;\n\tfor(;x;x-=lowbit(x))\n\t\tres+=tree[x];\n\treturn res;\n}\ninline void Update(int x,int val)\n{\n\tfor(;x<M-5;x+=lowbit(x))\n\t\ttree[x]+=val;\n}\nbool check(int x)\n{\n\tif(x==0) return 1;\n\t//memset(tree,0,sizeof(tree));\n\t//for(int i=1;i<=x;i++)\n\t//\tUpdate(a[i],1);\n\tif(x!=lim) Update(a[x+1],-1);\n\tmemcpy(b,a,sizeof(a));\n\tsort(b+x+1,b+2*x+1);\n\tfor(int i=x+1;i<=2*x;i++)\n\t{\n\t\tint tmp=Query(b[i]-1)-(i-x-1);\n\t\tif(tmp<=0) return 0;\n\t}\n\treturn 1;\n}\nint main()\n{\n\t//freopen(\"bins.in\",\"r\",stdin);\n\t//freopen(\"bins.out\",\"w\",stdout);\n\tm=rd(),n=rd();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[i]=rd();\n\t\tif(a[i]==m&&lim==-1)\n\t\t\tlim=i;\n\t}\n\tlim=min(lim,n/2);\n\tif(lim==-1) lim=n/2; \n\tfor(int i=1;i<=lim;i++)\n\t\tUpdate(a[i],1);\n\tfor(int k=lim;k>=0;k--)\n\t{\n\t\tif(check(k))\n\t\t{\n\t\t\tprintf(\"%d\\n\",k);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1606480826,
        "uid": 41165,
        "name": "Starlight_Glimmer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6807 \u3010[BalticOI 2010 Day2] Matching Bins\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u4e2a\u9898\u7684\u7ffb\u8bd1\u5f88\u4ee4\u4eba\u8ff7\u60d1\uff0c\u6211\u4e5f\u662f\u770b\u4e86\u5f88\u4e45\u53c8\u53c2\u8003\u539f\u9898\u76ee\u624d\u770b\u61c2\u7684\u3002\n\n\u9898\u610f\u6307\u7684\u662f\u5f00\u59cb\u7684k\u4e2a\u6570\u5728\u63a5\u4e0b\u6765\u7684k\u4e2a\u6570\u91cc\uff0c\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5927\u4e8e\u8fd9\u4e2a\u6570\u7684\u6570\uff0c\u4f8b\u5982\u6837\u4f8b\uff0c\u5f53$k$=4\u65f6\uff0c2 2 1 4\u8fd9\u56db\u4e2a\u6570\u90fd\u53ef\u4ee5\u5728\u4e4b\u540e3 2 5 4\u8fd9\u56db\u4e2a\u6570\u91cc\u627e\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u6570![\u6837\u4f8b\u8bf4\u660e](https://cdn.luogu.com.cn/upload/image_hosting/txwe42yd.png)\n\u800c\u5f53$k$=5\u65f6\uff0c\u65e0\u8bba\u5982\u4f55\u90fd\u6709\u81f3\u5c11\u4e00\u4e2a\u6570\u5728\u4e4b\u540e\u7684k\u4e2a\u6570\u4e2d\u627e\u4e0d\u5230\u66f4\u5927\u7684\u6570\u3002\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u5c31\u5f88\u660e\u663e\u4e86\uff0c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e$k$\uff0c\u7136\u540e\u5c06\u524dk\u4e2a\u6570b[ k ]\u4e0ek+1\u52302 * k\u8fd9k\u4e2a\u6570c[ k ]\u6392\u5e8f\uff0c\u5982\u679c\u6bcf\u4e00\u4e2ab[i]\u90fd\u5c0f\u4e8ec[i]\uff0c\u5219\u5408\u6cd5\uff0ck\u4e3a\u7b54\u6848\uff0c\u5426\u5219\u7ee7\u7eed\u5411\u4e0b\u679a\u4e3e\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5199\u4f1at\u6389\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u8003\u8651\u4f18\u5316\uff0c\u9996\u5148k\u4e0d\u5fc5\u4ece\u6700\u540e\u5f00\u59cb\u679a\u4e3e\uff0c\u6700\u5927\u4ece\u4e2d\u95f4\u5f00\u59cb\u5373\u53ef\uff0c\u56e0\u4e3a\u5f53k\u5927\u4e8e\u6570\u5b57\u6570\u91cf\u4e00\u534a\u7684\u65f6\u5019\uff0c\u5269\u4e0b\u7684\u6570\u7684\u4e2a\u6570\u5c0f\u4e8ek\uff0c\u80af\u5b9a\u4e0d\u4f1a\u6709k\u4e2a\u5927\u4e8e\u524d\u9762\u7684\u6570\u3002\n\n\u5176\u6b21\uff0c\u5f53\u524d\u534a\u6bb5\u6709\u6700\u5927\u503c\u7684\u65f6\u5019\u5fc5\u5b9a\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u540e\u9762\u6700\u5927\u4e5f\u53ea\u80fd\u548c\u4ed6\u76f8\u7b49\uff0c\u4e0d\u53ef\u80fd\u6709\u6bd4\u5b83\u5927\u7684\u6570\uff0c\u5426\u5219\u6700\u5927\u503c\u5c31\u4e0d\u662f\u5b83\u4e86\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u70b9\u4e0e\u6700\u5927\u503c\u6240\u5728\u70b9\u8f83\u9760\u524d\u8005\u5f00\u59cb\u679a\u4e3e\uff0c\u4f46\u662f\u52a0\u4e0a\u8fd9\u4e2a\u4f18\u5316\u540e\u8fd8\u662f\u4f1at\u4e24\u4e2a\u70b9\uff0c\u5269\u4e0b\u552f\u4e00\u53ef\u4ee5\u4f18\u5316\u7684\u5c31\u53ea\u6709\u6392\u5e8f\u4e86\uff0c\u6211\u4eec\u4f7f\u7528\u6876\u6392\u5e8f\u4ee3\u66ffsort\uff0c\u5c31\u53ef\u4ee5a\u6389\u8fd9\u9053\u9898\u4e86\u3002\n\n\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint m,n,a[20010],maxn=-1,maxx,b[20010],c[20010],bj;//a\u4e3a\u539f\u6570\u7ec4\uff0ctb\uff0ctc\u4e3a\u6876\u6392\u5e8f\u6570\u7ec4\uff0cb\uff0cc\u4e3a\u6392\u5e8f\u4e4b\u540e\u7684\u524dk\u4e2a\u6570\u4e0e\u4e4b\u540e\u7684k\u4e2a\u6570\nint tb[20010],tc[20010]; \nint main()\n{\n\tscanf(\"%d%d\",&m,&n);\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t\tif(a[i]>maxn)\n\t\t{\n\t\t\tmaxn=a[i];\n\t\t\tmaxx=i;\n\t\t}\n\t}\n\tint st=min(maxx,n/2);\n\tfor(int i=st;i>=0;i--)\n\t{\n\t\tfor(int j=0;j<i;j++)\n\t\t\ttb[a[j]]++;\n\t\tfor(int j=i;j<i*2;j++)\n\t\t\ttc[a[j]]++;\n\t\tint cnt=0;\n\t\tfor(int j=0;j<=maxn;j++)\n\t\t{\n\t\t\t\n\t\t\twhile(tb[j])\n\t\t\t{\n\t\t\t\ttb[j]--;\n\t\t\t\tb[cnt++]=j;\n\t\t\t}\n\t\t}\n\t\tcnt=0;\n\t\tfor(int j=0;j<=maxn;j++)\n\t\t{\n\t\t\twhile(tc[j])\n\t\t\t{\n\t\t\t\ttc[j]--;\n\t\t\t\tc[cnt++]=j;\n\t\t\t}\n\t\t}\n\t\tfor(int j=0;j<i;j++)\n\t\t{\n\t\t\tif(b[j]>=c[j])\n\t\t\t{\n\t\t\t\tbj=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bj)\n\t\t{\n\t\t\tbj=0;\n\t\t\tcontinue;\n\t\t}\n\t\tcout<<i;\n\t\treturn 0;\n\t}\n\treturn 0;\n} ",
        "postTime": 1600350900,
        "uid": 235121,
        "name": "wzkdh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6807 \u3010[BalticOI 2010 Day2] Matching Bins\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u627e\u5230\u4e00\u4e2a\u6700\u5927\u7684\u6574\u6570 $K$ \uff0c\u4f7f\u5f97\u4ece\u5de6\u81f3\u53f3\u5171 $K$ \u4e2a\u6570\u90fd\u603b\u80fd\u5728\u63a5\u4e0b\u6765\u7684 $K$ \u4e2a\u6570\u627e\u5230\u5927\u4e8e\u5b83\u7684\u6570\u5b57\uff0c\u8981\u6c42\u4e00\u4e00\u5bf9\u5e94\u3002[$QWQ$](https://www.luogu.com.cn/blog/xzc/solution-p6807)\n## \u5206\u6790\n- \u8fd9\u4e2a\u503c\u57df\u662f\u53ef\u4ee5\u5f00\u4e2a\u6876\u6765\u8bb0\u5f55\u7684\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u662f\u4e00\u5b9a\u6709\u89e3\u7684\u3002\u90a3\u4e48\u6709\u4e2a\u521d\u6b65\u7684\u60f3\u6cd5\u3002\n\n- \u679a\u4e3e $K$ \uff0c\u628a\u5de6\u8fb9\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7531\u5927\u5230\u5c0f\u8003\u8651\u662f\u5426\u53ef\u4ee5\u5728\u53f3\u8fb9\u627e\u5230\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2m)$ \u3002\u8003\u8651\u5982\u4f55\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\n\n- \u90a3\u4e48\u6839\u636e\u4e0d\u7b49\u53f7\u7684\u4f20\u9012\u6027\uff0c\u9e3d\u5de2\u539f\u7406\u3002\u5982\u679c\u505a\u4e00\u4e2a\u540e\u7f00\u548c $sumL_i,sumR_i$ \u5206\u522b\u4ece $m$ \u5230 $i$ \u7684\u4e2a\u6570\uff0c\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u90fd\u6ee1\u8db3 $sumL_i \\le sumR_{i+1}$ \u90a3\u4e48\u8fd9\u4e2a\u5c31\u662f\u53ef\u884c\u7684 $K$ \u3002\u90a3\u4e48\u6211\u4eec\u4ece\u5927\u5230\u5c0f\u679a\u4e3e $K$ \uff0c\u627e\u5230\u5408\u6cd5\u7684\u5c31\u9000\u51fa\uff0c\u8fd9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\n## \u4ee3\u7801\n\n```cpp\n\n\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 4e6+1000;\nint read(){\n\tint x=0,f=0;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=1;ch=getchar();}\n\twhile(isdigit(ch)) {x=x*10+ch-'0';ch=getchar();}\n\treturn f?-x:x;\n\n}\nint l[N],r[N],c[N][2],n,m,a[N];\nint main()\n{\n\tm = read();n = read();\n\tfor(int i = 1;i <= n;i++) a[i] = read();\n\tfor(int i = 1;i <= n/2;i++) l[a[i]]++,r[a[i+n/2]]++;\n\tfor(int i = n/2;i;i--){\n\t\tint vis = 0;\n\t\tfor(int j = m;j >= 1;j--)\n\t\t{\n\t\t\tc[j][0] = c[j+1][0] + l[j];\n\t\t\tc[j][1] = c[j+1][1] + r[j]; \n\t\t}\n\t\tfor(int j = m;j >= 1;j--){\n\t\t\tif(c[j][0] > c[j+1][1]) vis=1;\n\t\t}\n\t\tif(!vis) {\n\t\t\tcout << i << endl;\n\t\t\treturn 0;\n\t\t}\n\t\tl[a[i]]--;r[a[i]]++;\n\t\tr[a[i*2]]--;r[a[i*2-1]]--;\n\t}\n\tcout << \"0\" <<endl;\n\treturn 0;\n}\n\n\n\n\n\n\n```\n\n",
        "postTime": 1598775826,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6807 \u3010[BalticOI 2010 Day2] Matching Bins\u3011"
    }
]