[
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u4e8e\u662f\u6211\u60f3\u5230\u4e86\u4e24\u79cd\u505a\u6cd5\u3002\n\n\u6cd51\uff1a\u5e8f\u5217\u5e73\u8861\u6811\uff0c\u5bf9\u4e8e\u505a\u8fc7\u6587\u827a\u5e73\u8861\u6811\u7684\u4eba\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u7ef4\u62a4\u4e00\u4e2a\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u6807\u8bb0\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u91cc\u4e0d\u7740\u91cd\u63cf\u8ff0\u3002\n\n\u6cd52\uff1a\u6709\u4e00\u4e2a\u5f88\u7b80\u5355\u66b4\u529b\u7684\u65b9\u6cd5\u2014\u2014\u7528\u7ebf\u6bb5\u6811\u3002\u4e00\u4e2a\u68d8\u624b\u7684\u95ee\u9898\u5c31\u662f\u7ebf\u6bb5\u6811\u662f\u9759\u6001\u7684\uff0c\u600e\u4e48\u652f\u6301\u5220\u9664\uff1f\u6211\u4eec\u6839\u672c\u4e0d\u8981\u5728\u7ed3\u6784\u4e2d\u5220\u53bb\u8282\u70b9\uff0c\u6211\u4eec\u53ea\u8981\u5c06\u8be5\u8282\u70b9\u7684min\u8bbe\u7f6e\u6210INT_MAX\uff0cmax\u8bbe\u7f6e\u6210INT_MIN\uff0c\u5c31\u53ef\u4ee5\u6d88\u9664\u6389\u8be5\u8282\u70b9\u7684\u8d21\u732e\uff0c\u4ece\u800c\u5728\u5f62\u5f0f\u4e0a\u201c\u5220\u53bb\u201d\u4e86\u6b21\u8282\u70b9\u3002\n\n\u90a3\u4e48\uff0c\u6709\u4e00\u4e2a\u6df1\u9083\u7684\u95ee\u9898\uff0c\u5220\u7684\u8fc7\u7a0b\u4e2d\u6570\u7ec4\u4e0b\u6807\u5728\u53d8\u5316\uff0c\u6240\u4ee5\u8981\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4pos\u4e4b\u524d\u5220\u53bb\u4e86\u51e0\u4e2a\u6570\uff0c\u4ece\u800c\u5f97\u5230\u771f\u6b63\u7684idx\u3002\n\n\u4f46\u662f\uff0c\u9898\u76ee\u662f\u7ed9\u4f60\u771f\u6b63\u7684\u4e0b\u6807idx\uff0c\u4f60\u8981\u5012\u7740\u6c42pos\uff0c\u8fd9\u5c31\u9700\u8981\u4e8c\u5206\u4e86\uff0c\u6ce8\u610f\uff0c\u4e8c\u5206\u65f6\u53ef\u80fd\u6709\u591a\u4e2a\u6ee1\u8db3\u503c\uff0c\u8981\u53d6\u6700\u5927\u7684\u90a3\u4e00\u4e2a\uff0c\u56e0\u4e3a\u524d\u9762\u7684\u90fd\u662f\u5df2\u5220\u53bb\u7684\u6570\u3002\n\nLast but not the least\uff0ccode is here:\n\n```cpp\nconst int Maxn = 1e6 + 5; int n, m, a[Maxn];\nstruct SegmentTree {\n\tint tmin[Maxn << 2 | 1], tmax[Maxn << 2 | 1];\n\tSegmentTree(void) {}\n\tinline void pushup(int pos) {\n\t\ttmin[pos] = min(tmin[pos << 1], tmin[pos << 1 | 1]);\n\t\ttmax[pos] = max(tmax[pos << 1], tmax[pos << 1 | 1]);\n\t}\n\n\tinline void build(int pos, int l, int r) {\n\t\tif (l == r) { tmin[pos] = tmax[pos] = a[l]; return; }\n\t\tint mid = l + r >> 1;\n\t\tbuild(pos << 1, l, mid),\n\t\tbuild(pos << 1 | 1, mid + 1, r);\n\t\tpushup(pos);\n\t}\n\n\tinline void remove(int pos, int l, int r, int idx) {\n\t\tif (l == r) { tmin[pos] = INT_MAX, tmax[pos] = INT_MIN; return; }\n\t\tint mid = l + r >> 1;\n\t\tif (idx <= mid) remove(pos << 1, l, mid, idx);\n\t\telse remove(pos << 1 | 1, mid + 1, r, idx);\n\t\tpushup(pos);\n\t}\n\t\n\tinline int querymin(int pos, int l, int r, int L, int R) {\n\t\tif (L <= l && R >= r) return tmin[pos];\n\t\tint mid = l + r >> 1, ret = INT_MAX;\n\t\tif (L <= mid) ret = querymin(pos << 1, l, mid, L, R);\n\t\tif (R > mid) chkmin(ret, querymin(pos << 1 | 1, mid + 1, r, L, R));\n\t\treturn ret;\n\t}\n\n\tinline int querymax(int pos, int l, int r, int L, int R) {\n\t\tif (L <= l && R >= r) return tmax[pos];\n\t\tint mid = l + r >> 1, ret = INT_MIN;\n\t\tif (L <= mid) ret = querymax(pos << 1, l, mid, L, R);\n\t\tif (R > mid) chkmax(ret, querymax(pos << 1 | 1, mid + 1, r, L, R));\n\t\treturn ret;\n\t}\n} sgt;\n\nstruct BinaryIndexTree {\n\tint c[Maxn];\n\tBinaryIndexTree(void) { Ms(c, 0); return; }\n\tinline void update(int pos) { for (; pos <= n; pos += lowbit(pos)) ++c[pos]; }\n\tinline int query(int pos) { int ret = 0; for (; pos; pos -= lowbit(pos)) ret += c[pos]; return ret; }\n} bit;\n\ninline int Index(int pos) {\n\tint l = 1, r = n, ans;\n\twhile (l <= r) {\n\t\tint mid = l + r >> 1;\n\t\tif (mid - bit.query(mid) == pos) ans = mid;\n\t\tif (mid - bit.query(mid) > pos) r = mid - 1;\n\t\telse l = mid + 1;\n\t} return ans;\n}\n\nsigned main(void) {\n//\tfile(\"\");\n\tread(n), read(m);\n\tfor (int i = 1; i <= n; i++) read(a[i]);\n\tsgt.build(1, 1, n);\n\tfor (int opt, l, r; m; m--) {\n\t\tread(opt), read(l);\n\t\tif (opt == 1) { l = Index(l);\n\t\t\tsgt.remove(1, 1, n, l);\n\t\t\tbit.update(l + 1);\n\t\t} else {\n\t\t\tread(r); l = Index(l), r = Index(r);\n\t\t\twriteln(sgt.querymin(1, 1, n, l, r), ' ');\n\t\t\twriteln(sgt.querymax(1, 1, n, l, r));\n\t\t}\n\t}\n//\tfwrite(pf, 1, o1 - pf, stdout);\n\treturn 0;\n}\n```\n",
        "postTime": 1590051320,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6011 \u3010[SCOI2006]\u52a8\u6001\u6700\u503c\u3011"
    },
    {
        "content": "\u65e2\u7136\u697c\u4e0b\u5927\u4f6c\u5199\u4e86\u4e00\u7bc7\u7ebf\u6bb5\u6811\u52a0\u6811\u72b6\u6570\u7ec4\u7684\u9898\u89e3\uff0c\u90a3\u4e0d\u4f1a\u6811\u72b6\u6570\u7ec4\u7684\u849f\u84bb\u6211\u5c31\u6765\u5199\u4e00\u7bc7\u4e24\u9897\u7ebf\u6bb5\u6811\u7684\u89e3\u6cd5\uff08\u771f\u00b7\u6700\u6162\uff09\n \n\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u533a\u95f4\u5185\u67e5\u8be2\u6700\u5927\u6700\u5c0f\u503c\uff0c\u8fd9\u4e00\u773c\u5c31\u770b\u51fa\u6765\u7ebf\u6bb5\u6811\u53ef\u4ee5\u89e3\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7ebf\u6bb5\u6811\u53ef\u4ee5\u89e3\u51b3\u533a\u95f4\u4e2d\u7684\u5927\u90e8\u5206\u95ee\u9898\u3002\u7f3a\u70b9\u4e5f\u5f88\u660e\u786e\uff0c\u5c31\u662f\u901f\u5ea6\u6162\u3002\u5bf9\u4e8e\u840c\u65b0\u6765\u8bf4\uff0c\u7ebf\u6bb5\u6811\u8fdc\u6bd4\u6811\u72b6\u6570\u7ec4\u597d\u4e0a\u624b\u3002\n\n\u90a3\u4e48\uff0c\u63a5\u4e0b\u6765\u600e\u4e48\u5904\u7406\u79fb\u52a8\u7684\u95ee\u9898\u5462\uff1f\n### \u539f\uff1a1 2 3 4 5 6 7 8\n### \u5220\uff1a1 2 4 5 6 8\n### \u73b0\uff1a1 2 3 4 5 6\n\u5bf9\u4e8e\u539f\u6765\u76844\u53f7\u4f4d\uff0c \u524d\u9762\u6709\u4e00\u4e2a3\u53f7\u4f4d\u88ab\u5220\u4e86\uff0c\u6240\u4ee5\u5411\u524d1\u4e2a\n\n\u5bf9\u4e8e\u539f\u6765\u76848\u53f7\u4f4d\uff0c\u524d\u9762\u6709\u4e24\u4e2a\u4f4d\u7f6e\u88ab\u5220\u4e86\uff0c\u6240\u4ee5\u5411\u524d2\u4e2a\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u539f\u6765\u7684\u4f4d\u7f6e\u524d\u5220\u9664\u4e86x\u4e2a\u6570\uff0c\u5219\u5411\u524d\u79fb\u52a8x\u4f4d\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u73b0\u5728\u77e5\u9053\u4e86\u73b0\u5728\u7684\u4f4d\u7f6e\uff0c\u600e\u4e48\u63a8\u51fa\u539f\u6765\u7684\u4f4d\u7f6e\u5462\uff1f\n\n\u8003\u8651\u518d\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u8bb0\u5f55\u4f4d\u7f6ex\u524d\u4e00\u5171\u5220\u4e86\u51e0\u4e2a\u6570\u3002\u7136\u540e\u7528\u4e8c\u5206\u53bb\u6a21\u62df\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u4e0d\u65ad\u9760\u8fd1x\uff0c\u5c31\u80fd\u627e\u5230\u539f\u6765\u7684\u4f4d\u7f6e\u4e86\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\ninline void read(T &x) {\n\tx = 0;\n\tT f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n\tfor (; isdigit(c); c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n\tx *= f;\n}\ninline void d_read(double &x) {\n\tx = 0.0;\n\tint f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n\tif (c == '.'){\n\t\tdouble num = 1.0;\n\t\tc = getchar();\n\t\tfor (; isdigit(c); c = getchar()) x = x + (num /= 10) * (c ^ 48);\n\t}\n\tx *= f;\n}\n\ntemplate <typename T>\ninline void w(T x) {\n\tif (x > 9) w(x / 10);\n\tputchar(x % 10 + 48);\n}\ntemplate <typename T>\ninline void write(T x, char c) {\n\tif (x < 0){\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tw(x);\n\tputchar(c);\n}\nconst int M = 1e6 + 5;\nint n, m, a[M], s[M * 4], sum, t[M * 4], q[M * 4], mini, maxi;\ninline void update(int p, int l, int r, int k) {\n\tif (l == r && l == k) {\n\t\ts[p] ++;\n\t}\n\telse {\n\t\tint mid = l + r >> 1;\n\t\tif (mid >= k) update(p << 1, l, mid, k);\n\t\telse update(p << 1 | 1, mid + 1, r, k);\n\t\ts[p] = s[p << 1] + s[p << 1 | 1];\n\t}\n} \ninline void ask(int p, int l, int r, int ql, int qr) {\n\tif (l >= ql && r <= qr) {\n\t\tsum += s[p];\n\t}\n\telse {\n\t\tint mid = l + r >> 1;\n\t\tif (mid >= ql) ask(p << 1, l, mid, ql, qr);\n\t\tif (mid < qr) ask(p << 1 | 1, mid + 1, r, ql, qr);\n\t}\n\treturn;\n}\ninline void modify(int p, int l, int r, int k) {\n\tif (l == r && l == k) {\n\t\tt[p] = INT_MIN;\n\t\tq[p] = INT_MAX;\n\t}\n\telse {\n\t\tint mid = l + r >> 1;\n\t\tif (mid >= k) modify(p << 1, l, mid, k);\n\t\telse modify (p << 1 | 1, mid + 1, r, k);\n\t\tt[p] = max(t[p << 1], t[p << 1 | 1]);\n\t\tq[p] = min(q[p << 1], q[p << 1 | 1]);\n\t}\n}\ninline void query(int p, int l, int r, int ql, int qr) {\n\tif (l >= ql && r <= qr) {\n\t\tmini = min(mini, q[p]);\n\t\tmaxi = max(maxi, t[p]);\n\t}\n\telse {\n\t\tint mid = l + r >> 1;\n\t\tif (mid >= ql) query(p << 1, l, mid, ql, qr);\n\t\tif (mid < qr) query(p << 1 | 1, mid + 1, r, ql, qr);\n\t}\n}\ninline int binary(int x) {\n\tint l = 1, r = n, res = 0;\n\twhile (l <= r) {\n\t\tint mid = l + r >> 1;\n\t\tsum = 0;\n\t\task(1, 1, n, 1, mid);\n\t\tif (mid - sum == x) {\n\t\t\tres = mid;\n\t\t}\n\t\tif (mid - sum > x) r = mid - 1;\n\t\telse l = mid + 1;\n\t}\n\treturn res;\n}\ninline void build(int p, int l, int r) {\n\tif (l == r) {\n\t\tt[p] = q[p] = a[l];\n\t}\n\telse {\n\t\tint mid = l + r >> 1;\n\t\tbuild(p << 1, l, mid);\n\t\tbuild(p << 1 | 1, mid + 1, r);\n\t\tt[p] = max(t[p << 1], t[p << 1 | 1]);\n\t\tq[p] = min(q[p << 1], q[p << 1 | 1]);\n\t}\n}\nint main() {\n\tread(n); read(m);\n\tfor (int i = 1; i <= n; i ++) {\n\t\tread(a[i]);\n\t}\n\tbuild(1, 1, n);\n\tint opt, x, y, del;\n\tfor (int i = 1; i <= m; i ++) {\n\t\tread(opt);\n\t\tif (opt == 1) {\n\t\t\tread(del);\n\t\t\tx = binary(del);\n\t\t\tmodify(1, 1, n, x);\n\t\t\tupdate(1, 1, n, x + 1);\n\t\t}\n\t\telse {\n\t\t\tread(x); read(y);\n\t\t\tmini = INT_MAX;\n\t\t\tmaxi = INT_MIN;\n\t\t\tquery(1, 1, n, binary(x), binary(y));\n\t\t\twrite(mini, ' ');\n\t\t\twrite(maxi, '\\n');\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1590053099,
        "uid": 46820,
        "name": "Wall_breaker",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6011 \u3010[SCOI2006]\u52a8\u6001\u6700\u503c\u3011"
    },
    {
        "content": "$\\ \\ \\ \\ \\ \\ \\ $\u7ebf\u6bb5\u6811\u7684\u53d8\u79cd\u597d\u9898\u3002\n\n$\\ \\ \\ \\ \\ \\ \\ $\u8003\u8651\u5230\u67e5\u8be2\u52a8\u6001\u7684\u6700\u503c\u95ee\u9898\uff0c\u6240\u4ee5\u6392\u9664 ST \u8868\u548c\u5355\u8c03\u961f\u5217\u3002\u6240\u4ee5\u5f88\u5bb9\u6613\u5730\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u3002\n\n$\\ \\ \\ \\ \\ \\ \\ $`query` \u64cd\u4f5c\u5012\u662f\u5f88\u597d\u5199\uff0c\u7531\u4e8e `delete` \u64cd\u4f5c\u5bfc\u81f4\u7684\u4e0b\u6807\u53d8\u52a8\uff0c\u8003\u8651\u7ef4\u62a4\u5b50\u6811\u5927\u5c0f\u8fdb\u884c\u64cd\u4f5c\u3002\n\n$\\ \\ \\ \\ \\ \\ \\ $\u7ef4\u62a4\u5b50\u6811\u7684\u6700\u5927\u503c `maxn`\uff0c\u6700\u5c0f\u503c `minn`\uff0c\u5b50\u6811\u5927\u5c0f `sizen`\uff0c\u5176\u4f59\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u76f8\u540c\u3002\n\n$\\ \\ \\ \\ \\ \\ \\ $\u5220\u9664\u8282\u70b9\u65f6\uff0c\u4fee\u6539 `minn` \u4e3a\u6781\u5927\u503c\uff0c`maxn` \u4e3a\u6781\u5c0f\u503c\uff0c`sizen` \u6e05\u96f6\u3002\u7136\u540e\u5f80\u4e0a `push_up`\uff0c`sizen` \u51cf\u4e00\u3002\n\n$\\ \\ \\ \\ \\ \\ \\ $\u7136\u540e\u4fee\u6539 `query`\u3002\u5f53\u6211\u4eec\u5728\u67e5\u8be2\u533a\u95f4 $[l,r]$ \u7684\u65f6\u5019\uff1a\n\n- \u5982\u679c $r < st_{lc(now)}.sizen$\uff0c\u9012\u5f52\u67e5\u8be2\u5de6\u513f\u5b50\u3002\n\n- \u5982\u679c $l > st_{lc(now)}.sizen$\uff0c\u9012\u5f52\u67e5\u8be2\u53f3\u513f\u5b50\u7684\u533a\u95f4 $[l-st_{lc(now)}.sizen,r-st_{lc(now)},sizen]$\u3002\n\n- \u7279\u6b8a\u7684\uff0c\u5982\u679c\u533a\u95f4\u6a2a\u8de8\u4e24\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u4e24\u8fb9 `query` \u533a\u95f4 $[l,st_{lc(now)}.sizen]$ \u548c $[1,r-st_{lc(now)}.sizen]$\u3002\n\n$\\ \\ \\ \\ \\ \\ \\ $\u5176\u4e2d $lc(now)$ \u4ee3\u8868 $now$ \u7684\u5de6\u5b50\u6811\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<iostream>\n#define MM int mid=(l+r)>>1\n#define lc(x) (x<<1)\n#define rc(x) ((x<<1)|1)\nusing namespace std;\nstruct node{\n\tint sizen,l,r,maxn,minn;\n\tnode(){minn=2147483647,maxn=-2147483647,sizen=l=r=0;}\n}st[4000005];\nint n,T,a[1000005];\nvoid push_up(int now)\n{\n\tst[now].sizen=st[lc(now)].sizen+st[rc(now)].sizen;\n\tst[now].minn=min(st[lc(now)].minn,st[rc(now)].minn);\n\tst[now].maxn=max(st[lc(now)].maxn,st[rc(now)].maxn);\n}\nvoid build(int l,int r,int now)\n{\n\tst[now].l=l,st[now].r=r;\n\tif(l==r)\n\t{\n\t\tst[now].maxn=st[now].minn=a[l];\n\t\tst[now].sizen=1;\n\t\treturn ;\n\t}\n\tMM;\n\tbuild(l,mid,lc(now));\n\tbuild(mid+1,r,rc(now));\n\tpush_up(now);\n}\nvoid query(int l,int r,int now,int &minn,int &maxn)\n{\n\tif(l==1 && r==st[now].sizen)\n\t{\n\t\tminn=min(minn,st[now].minn);\n\t\tmaxn=max(maxn,st[now].maxn);\n\t\treturn ;\n\t}\n\tint lchild=st[lc(now)].sizen,rchild=st[rc(now)].sizen;\n\tif(l<=lchild && r>lchild)\tquery(l,lchild,lc(now),minn,maxn),query(1,r-lchild,rc(now),minn,maxn);\n\telse if(l<=lchild && r<=lchild)\tquery(l,r,lc(now),minn,maxn);\n\telse if(l>lchild && r<=lchild+rchild)\tquery(l-lchild,r-lchild,rc(now),minn,maxn);\n}\nvoid revoke(int where,int now)\n{\n\tif(st[now].l==st[now].r)\n\t{\n\t\t--st[now].sizen;\n\t\tst[now].minn=2147483647,st[now].maxn=-2147483647;\n\t\treturn ;\n\t}\n\tint lchild=st[lc(now)].sizen;\t\n\tif(where<=lchild)\trevoke(where,lc(now));\n\telse\trevoke(where-lchild,rc(now));\n\tpush_up(now);\n}\nint main(){\n\tscanf(\"%d %d\",&n,&T);\n\tfor(int i=1;i<=n;++i)\tscanf(\"%d\",&a[i]);\n\tbuild(1,n,1);\n\twhile(T-->0)\n\t{\n\t\tint op;\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\trevoke(x,1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint minn=2147483647,maxn=-2147483647,c,d;\n\t\t\tscanf(\"%d %d\",&c,&d);\n\t\t\tquery(c,d,1,minn,maxn);\n\t\t\tprintf(\"%d %d\\n\",minn,maxn);\n\t\t}\n\t}\n//\tfor(int i=1;i<=4*n;++i)\tprintf(\"%d %d %d %d %d\\n\",st[i].sizen,st[i].l,st[i].r,st[i].maxn,st[i].minn);//debug\n\treturn 0;\n}\n```",
        "postTime": 1580042411,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6011 \u3010[SCOI2006]\u52a8\u6001\u6700\u503c\u3011"
    },
    {
        "content": "\u6628\u5929\u8003\u8bd5\u8003\u5230\u4e86\u8fd9\u9053\u9898\uff0c\u90a3\u5c31\u6765\u8865\u4e00\u4e0b\u9898\u89e3\u5427\u3002\n\n\u9898\u610f\u7b80\u5355\u4e0d\u518d\u9610\u8ff0\u3002\n\n\u9996\u5148\u5220\u9664\u4e4b\u540e\u8fd8\u8981\u5411\u5de6\u79fb\u52a8\uff0c\u5f88\u5bb9\u6613\u60f3\u5230 ~~ODT~~ \u5e73\u8861\u6811\uff0c\u8fd9\u4e2a\u8fc7\u4e8e\u4e00\u773c\uff0c\u4e0d\u518d\u9610\u8ff0\u3002\n\n\u91cd\u70b9\u8bf4\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u3002\n\n\u5411\u5de6\u5e73\u79fb\u7684\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u7528\u522b\u7684\u65b9\u6cd5\u4ee3\u66ff\u5462\uff1f\n\n\u6bd4\u5982\u4e0d\u5411\u5de6\u5e73\u79fb\uff0c\u540e\u9762\u7684\u64cd\u4f5c\u65f6\u201c\u4fee\u6b63\u201d\u4e0b\u6807\u3002\n\n\u5bf9\u4e8e\u201c\u4fee\u6b63\u201d\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4e8c\u5206\u3002\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206/\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u500d\u589e\uff08\u4e5f\u5c31\u662f\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u4e8c\u5206\uff09\u3002\n\n\u4e8c\u5206\u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u7ec6\u8282\u662f\uff1a\u5982\u679c\u4e8c\u5206\u7684\u662f\u6700\u53f3\u8fb9\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u7aef\u70b9\uff0c\u8bb0\u5f97\u4e0d\u8981 Find(x) \u800c\u662f Find(x-1)+1\u3002\n\n\u67e5\u8be2\u548c\u4fee\u6539\u64cd\u4f5c\u5c31\u662f\u7ebf\u6bb5\u6811\u677f\u5b50\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdlib>\n#include<cstdio>\n#include<cctype>\nconst int M=1e6+5,INF=0x7fffffff;\nint n,m,G,tmp,t[M],a[M];\nstruct Node{\n\tint mx,mi;\n\tNode(const int&mx=-INF,const int&mi=INF):mx(mx),mi(mi){}\n}zkw[M<<2],it;\ninline int min(const int&a,const int&b){\n\treturn a>b?b:a;\n}\ninline int max(const int&a,const int&b){\n\treturn a>b?a:b;\n}\ninline void Add(register int id){\n\tfor(;id<=n;id+=id&-id)++t[id];\n}\ninline int Find(const int&id){\n\tint len,ans=0,num=0;\n\tfor(len=tmp;len;len>>=1){\n\t\tif(ans+len<=id+num+t[ans+len])num+=t[ans+=len];\n\t}\n\treturn ans;\n}\ninline Node merge(const Node&a,const Node&b){\n\treturn Node(max(a.mx,b.mx),min(a.mi,b.mi));\n}\ninline void update(const int&u){\n\tzkw[u]=merge(zkw[u<<1],zkw[u<<1|1]);\n}\ninline void Build(){\n\tregister int i;\n\tfor(G=1;G<=n+1;G<<=1);\n\tfor(i=1;i<=n;++i)zkw[G+i]=Node(a[i],a[i]);\n\tfor(i=G-1;i;--i)update(i);\n}\ninline void Modify(int id){\n\tAdd(id);\n\tfor(zkw[id+=G]=Node(),id>>=1;id;id>>=1)update(id);\n}\ninline Node Query(int L,int R){\n\tNode ans=Node();\n\tfor(L+=G-1,R+=G+1;L^R^1;L>>=1,R>>=1){\n\t\tif(~L&1)ans=merge(ans,zkw[L^1]);\n\t\tif(R&1)ans=merge(ans,zkw[R^1]);\n\t}\n\treturn ans;\n}\nsigned main(){\n\tregister int i,x,L,R,opt;\n\tscanf(\"%d%d\",&n,&m);tmp=n;\n\tfor(i=1;i<=n;++i)scanf(\"%d\",a+i);\n\twhile(tmp^(tmp&-tmp))tmp^=tmp&-tmp;Build();\n\tfor(i=1;i<=m;++i){\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==1){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tModify(Find(x-1)+1);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d%d\",&L,&R);\n\t\t\tit=Query(Find(L-1)+1,Find(R-1)+1);\n\t\t\tprintf(\"%d %d\\n\",it.mi,it.mx);\n\t\t}\n\t}\n}\n```",
        "postTime": 1611994161,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u636e\u7ed3\u6784 \u7ebf\u6bb5\u6811+\u6811\u72b6\u6570\u7ec4 P6011\u9898\u89e3"
    },
    {
        "content": "\u88f8\u7684\u5e73\u8861\u6811\uff08\u6211\u5e76\u4e0d\u77e5\u9053\u4e0d\u7528\u7ebf\u6bb5\u6811\u548b\u505a\n\n\u53ea\u8981\u7528\u5230\u533a\u95f4\u5220\u9664\u548c\u533a\u95f4\u67e5\u627e\u3002\u3002\u3002\n\n---\n\n\u6709\u4eba\u5199\u8fc7splay\u4e86\uff0c\u8fd9\u91cc\u7ed9\u4e2afhq-treap\u4f9b\u53c2\u8003\u3002\uff08\u6211\u7ec8\u4e8e\u6e10\u6e10\u6709\u4e86\u5e73\u8861\u6811\u4e0d\u8c03\u8bd5\u4e00\u904d\u8fc7\u7684\u80fd\u529b\uff0c\u5f00\u5fc3w\n\n\u901f\u5ea6\u6781\u6162\uff0c\u4e0d\u5f00O2\u970015s\u8fc7\u6240\u6709\u70b9\uff0c\u5f00\u4e86\u5927\u5e45\u4e0b\u964d\u81f35s\u3002\n\n---\n\n```cpp\n#include<cstdio>\n#include<ctime>\n#include<cstdlib>\n#include<algorithm>\n\nstruct Node\n{\n    int val,min_s,max_s,size,pri;\n    Node *lc,*rc;\n\n    Node(int _Value):\n        val(_Value),\n        min_s(val),\n        max_s(val),\n        size(1),\n        pri(rand()),\n        lc(NULL),\n        rc(NULL)\n        {}\n\n    void maintain()\n    {\n        size=1;\n        min_s=val;\n        max_s=val;\n        if(lc!=NULL)\n        {\n            size+=lc->size;\n            min_s=std::min(min_s,lc->min_s);\n            max_s=std::max(max_s,lc->max_s);\n        }\n        if(rc!=NULL)\n        {\n            size+=rc->size;\n            min_s=std::min(min_s,rc->min_s);\n            max_s=std::max(max_s,rc->max_s);\n        }\n    }\n};\nNode *root;\n\nauto merge(Node *l,Node *r)\n{\n    if(l==NULL)return r;\n    if(r==NULL)return l;\n    if(l->pri>r->pri)\n    {\n        l->rc=merge(l->rc,r);\n        l->maintain();\n        return l;\n    }\n    else\n    {\n        r->lc=merge(l,r->lc);\n        r->maintain();\n        return r;\n    }\n}\n\nvoid split(Node *rt,int k,Node *&l,Node *&r)\n{\n    if(rt==NULL)\n    {\n        l=NULL;\n        r=NULL;\n        return;\n    }\n    int s=1;\n    if(rt->lc!=NULL)s+=rt->lc->size;\n    if(s<k)\n    {\n        l=rt;\n        split(l->rc,k-s,l->rc,r);\n        l->maintain();\n    }\n    else\n    {\n        r=rt;\n        split(r->lc,k,l,r->lc);\n        r->maintain();\n    }\n}\n\nvoid erase(int pos)\n{\n    Node *p1,*p2,*p3;\n    split(root,pos+1,p2,p3);\n    split(p2,pos,p1,p2);\n    root=merge(p1,p3);\n    delete p2;\n}\n\nauto query(int l,int r)\n{\n    Node *p1,*p2,*p3;\n    split(root,r+1,p2,p3);\n    split(p2,l,p1,p2);\n    auto res=std::make_pair(p2->min_s,p2->max_s);\n    root=merge(merge(p1,p2),p3);\n    return res;\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0;i<n;++i)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        root=merge(root,new Node(x));\n    }\n    while(m--)\n    {\n        int op;\n        scanf(\"%d\",&op);\n        if(op==1)\n        {\n            int pos;\n            scanf(\"%d\",&pos);\n            erase(pos);\n        }\n        if(op==2)\n        {\n            int l,r;\n            scanf(\"%d%d\",&l,&r);\n            auto res=query(l,r);\n            printf(\"%d %d\\n\",res.first,res.second);\n        }\n    }\n}\n```\n\n",
        "postTime": 1580455785,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6011 \u3010[SCOI2006]\u52a8\u6001\u6700\u503c\u3011"
    },
    {
        "content": "\u5e8f\u5217\u5e73\u8861\u6811\u6a21\u677f\u9898\u3002  \n\n\u770b\u5230\u8fd9\u9898\u4e2d\u7684\u5220\u9664\u79fb\u4f4d\u64cd\u4f5c\uff0c\u5bb9\u6613\u60f3\u5230\u4f7f\u7528 $\\verb!FHQ-Treap!$ \u5c06\u533a\u95f4\u5206\u88c2\u6210\u4e09\u6bb5\uff1a\u5728\u88ab\u5220\u9664\u7684\u70b9\u4e4b\u524d\u7684\u4e00\u6bb5\uff0c\u8981\u88ab\u5220\u9664\u7684\u90a3\u4e00\u4e2a\u70b9\uff0c\u4ee5\u53ca\u5220\u9664\u7684\u70b9\u4e4b\u540e\u7684\u4e00\u6bb5\u3002\u5e76\u6700\u540e\u6254\u6389\u88ab\u5220\u9664\u7684\u90a3\u4e00\u4e2a\u70b9\u5408\u5e76\u5269\u4e0b\u7684\u4e24\u6bb5\u3002\n\n\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u6700\u5c0f\u503c\u65f6\uff0c\u53ea\u9700\u8981\u989d\u5916\u5f00\u4e24\u4e2a\u53d8\u91cf\uff0c\u5e76\u5728 $\\verb!pushup!$ \u7684\u65f6\u5019\u66f4\u65b0\u5373\u53ef\u3002\n\n\u5199\u8fc7\u6587\u827a\u5e73\u8861\u6811\u7684\u8bdd\u5e94\u8be5\u5f88\u8f7b\u677e\u3002\n\n\u8bf4\u53e5\u95f2\u8bdd\uff1a\u8fd9\u4e2a\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u662f $O((n+m)\\log n)$ \u7684\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u7684\u5b9e\u73b0\u539f\u56e0\u5e38\u6570\u5de8\u5927\uff0c\u88ab\u4e00\u4e9b\u795e\u7287\u7684 $O(m\\log^2 n)$ [\u505a\u6cd5](https://www.luogu.com.cn/record/88865414)\u7206\u6740\u529b\u3002~~\u7684\u786e\u5e73\u8861\u6811\u53ef\u4ee5\u88ab\u5404\u79cd\u4e71\u641e\u4ee3\u66ff~~\u3002\u5982\u679c\u8fd9\u9898\u662f\u533a\u95f4\u5220\u9664\u7684\u8bdd\u5e94\u8be5\u5e73\u8861\u6811\u66f4\u80dc\u4e00\u7b79\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nmt19937 rnd(time(0));\nint n,m,a[1000005];\nstruct node{\n\tint lc,rc,val,size,seed,maxn,minn;\n};\nstruct treap{\n\tnode tree[4000005];\n\tint root;\n\tvoid pushup(int p)\n\t{\n\t\tif(!p) return ;\n\t\ttree[p].size=tree[tree[p].lc].size+tree[tree[p].rc].size+1;\n\t\ttree[p].maxn=max({tree[p].val,tree[tree[p].lc].maxn,tree[tree[p].rc].maxn});\n\t\ttree[p].minn=min({tree[p].val,tree[tree[p].lc].minn,tree[tree[p].rc].minn});\n\t}\n\tint merge(int x,int y)\n\t{\n\t\tif(!x||!y) return x+y;\n\t\tif(tree[x].seed<tree[y].seed)\n\t\t{\n\t\t\ttree[x].rc=merge(tree[x].rc,y);\n\t\t\tpushup(x);\n\t\t\treturn x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttree[y].lc=merge(x,tree[y].lc);\n\t\t\tpushup(y);\n\t\t\treturn y;\n\t\t}\n\t}\n\tpair<int,int> split(int p,int k)\n\t{\n\t\tif(!p)\n\t\t{\n\t\t\treturn {0,0};\n\t\t}\n\t\tif(tree[tree[p].lc].size>=k)\n\t\t{\n\t\t\tpair<int,int> t=split(tree[p].lc,k);\n\t\t\ttree[p].lc=t.second;\n\t\t\tpushup(p);\n\t\t\treturn {t.first,p};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpair<int,int> t=split(tree[p].rc,k-tree[tree[p].lc].size-1);\n\t\t\ttree[p].rc=t.first;\n\t\t\tpushup(p);\n\t\t\treturn {p,t.second};\n\t\t}\n\t}\n\tvoid build(int l,int r)\n\t{\n\t\tfor(int i=l;i<=r;i++)\n\t\t{\n\t\t\ttree[i].lc=0;\n\t\t\ttree[i].rc=0;\n\t\t\ttree[i].size=1;\n\t\t\ttree[i].val=a[i];\n\t\t\ttree[i].seed=rnd();\n\t\t\ttree[i].minn=a[i];\n\t\t\ttree[i].maxn=a[i];\n\t\t\troot=merge(root,i);\n\t\t}\n\t}\n\tvoid del(int x)\n\t{\n\t\tpair<int,int> a=split(root,x-1),b=split(a.second,1);\n\t\troot=merge(a.first,b.second); \n\t}\n\tpair<int,int> query(int l,int r)\n\t{\n\t\tpair<int,int> a=split(root,l-1),b=split(a.second,r-l+1);\n\t\tpushup(b.first);\n\t\tpair<int,int> res={tree[b.first].minn,tree[b.first].maxn};\n\t\troot=merge(a.first,merge(b.first,b.second));\n\t\treturn res;\n\t}\n\tvoid sort(int p)\n\t{\n\t\tif(!p) return ;\n\t\tpushup(p);\n\t\tsort(tree[p].lc);\n\t\tcout<<tree[p].val<<\" \";\n\t\tsort(tree[p].rc);\n\t}\n}T;\nint main()\n{\n\tT.tree[0]={0,0,0,0,0,-1000000000,1000000000};\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t}\n\tT.build(1,n);\n\twhile(m--)\n\t{\n\t\tint opt;\n\t\tcin>>opt;\n\t\tif(opt==1)\n\t\t{\n\t\t\tint x;\n\t\t\tcin>>x;\n\t\t\tT.del(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint l,r;\n\t\t\tcin>>l>>r;\n\t\t\tpair<int,int> res=T.query(l,r);\n\t\t\tcout<<res.first<<\" \"<<res.second<<\"\\n\";\n\t\t}\n\t}\n}\n```",
        "postTime": 1665058077,
        "uid": 122836,
        "name": "World_Creater",
        "ccfLevel": 0,
        "title": "P6011 [SCOI2006]\u52a8\u6001\u6700\u503c"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6011)\n## \u601d\u8def\n\u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u7ebf\u6bb5\u6811\uff0c\u4e8e\u662f\u6211\u7528\u7ebf\u6bb5\u6811+\u4e8c\u5206+\u6811\u72b6\u6570\u7ec4\u8fc7\u4e86\u8fd9\u9053\u9898\u3002\n\n\u6211\u4eec\u9996\u5148\u770b\u5230\u4e86\u533a\u95f4\u6700\u5927\u503c\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u533a\u95f4\u6700\u5927\u503c\u6700\u7b80\u5355\u7684\u505a\u6cd5\u5c31\u662f\u500d\u589e/\u7ebf\u6bb5\u6811\u4e86\uff0c\u4f46\u662f\u8fd9\u9898\u9700\u8981\u8d44\u74f7\u4fee\u6539\uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u52a8\u6001\u7684\u8fc7\u7a0b\u975e\u5e38\u96be\u53d7\uff0c\u8bbe $f_i$ \u8868\u793a $1$ \u81f3 $i$ \u53ef\u7528\u7684\u4f4d\u7f6e\u4e2a\u6570\uff0c\u663e\u7136\uff0c$f_i$ \u662f\u5355\u8c03\u4e0d\u4e0b\u964d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u6765\u6811\u72b6\u6570\u7ec4+\u4e8c\u5206\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u4f4d\u7f6e\uff0c\u7136\u540e\u4f7f\u7528\u524d\u7f00\u548c\u6811\u72b6\u6570\u7ec4\u5728 $\\log$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u6c42\u51fa\u5f53\u524d\u53ef\u7528\u7684\u4f4d\u7f6e\u4e2a\u6570\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m \\log^2 n)$\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint const N=1e6+10;\nint a[N],n;\nstruct node{int minx,maxx;};\nstruct Segment_Tree{\n    #define ls (x<<1)\n    #define rs (x<<1|1)\n    #define mid ((l+r)>>1)\n    int minx[N<<2],maxx[N<<2];\n    inline void build(int x,int l,int r){\n        if (l==r){minx[x]=maxx[x]=a[l];return;}\n        build(ls,l,mid);build(rs,mid+1,r);\n        minx[x]=min(minx[ls],minx[rs]);\n        maxx[x]=max(maxx[ls],maxx[rs]);\n    }\n    inline node query(int x,int l,int r,int ll,int rr){\n        if (ll<=l && r<=rr) return {minx[x],maxx[x]};\n        node xx;xx.minx=1e9;xx.maxx=-1e9;\n        if (ll<=mid){\n            node le=query(ls,l,mid,ll,rr);\n            xx.minx=min(xx.minx,le.minx);\n            xx.maxx=max(xx.maxx,le.maxx);\n        }\n        if (mid<rr){\n            node ri=query(rs,mid+1,r,ll,rr);\n            xx.minx=min(xx.minx,ri.minx);\n            xx.maxx=max(xx.maxx,ri.maxx);\n        }\n        return xx;\n    }\n    inline void update(int x,int l,int r,int p){\n        if (l==r){minx[x]=1e9,maxx[x]=-1e9;return;}\n        if (p<=mid) update(ls,l,mid,p);else update(rs,mid+1,r,p);\n        maxx[x]=max(maxx[ls],maxx[rs]);minx[x]=min(minx[ls],minx[rs]);\n    }\n}T;\nstruct Tree_Array{\n    int c[N];\n    inline int lowbit(int x){return x&-x;}\n    inline void update(int x,int v){while (x<=n) c[x]+=v,x+=lowbit(x);}\n    inline int query(int x){int res=0;while (x) res+=c[x],x-=lowbit(x);return res;}\n}t;\ninline int lower(int x){\n    int l=1,r=n,res=0;\n    while (l<=r){\n        int now=t.query(mid);\n        if (mid-now==x) res=mid;\n        if (mid-now>x) r=mid-1;\n        else l=mid+1;\n    }\n    return res;\n}\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    int m;cin>>n>>m;\n    for (int i=1;i<=n;++i) cin>>a[i];\n    T.build(1,1,n);\n    while (m--){\n        int opt;cin>>opt;\n        if (opt==1){\n            int k;cin>>k;k=lower(k);\n            t.update(k+1,1);T.update(1,1,n,k);\n        }\n        else{\n            int x,y;cin>>x>>y;\n            x=lower(x);y=lower(y);\n            node p=T.query(1,1,n,x,y);\n            cout<<p.minx<<' '<<p.maxx<<'\\n';\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1665040948,
        "uid": 253608,
        "name": "Tx_Lcy",
        "ccfLevel": 7,
        "title": "P6011 [SCOI2006]\u52a8\u6001\u6700\u503c"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u7684\u7ec3\u624b\u597d\u9898\u3002\n\n### \u9898\u610f\n\u4f60\u9700\u8981\u5199\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u63d2\u5165\u64cd\u4f5c\u548c\u5bfb\u627e\u533a\u95f4\u6700\u5927\u503c\u7684\u64cd\u4f5c\n\n### \u65b9\u6cd5\n\u5176\u5b9e\u4e00\u822c\u6765\u8bf4\u7ebf\u6bb5\u6811\u662f\u65e0\u6cd5\u8fdb\u884c\u63d2\u5165\u4e0e\u5220\u9664\u64cd\u4f5c\u7684\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u7684\u6027\u8d28\u4f9d\u8d56\u4e8e\u5b83\u7684\u7ed3\u6784\uff0c\u4f60\u4e00\u65e6\u63d2\u5165\u6216\u8005\u5220\u9664\u5b83\u7684\u7ed3\u6784\u5c31\u4f1a\u6539\u53d8\uff0c\u90a3\u4e48\u5b83\u7684\u6027\u8d28\u4e5f\u4f1a\u6539\u53d8\u3002\u4f46\u4e5f\u6709\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982\u8bf4\u8fd9\u9053\u9898\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u539f\u5e8f\u5217\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u53ea\u7ef4\u62a4\u6700\u5927\u503c\u5c31\u662f\u4e00\u4e2a\u88f8\u9898\uff0c\u4f46\u8981\u652f\u6301\u5220\u9664\u64cd\u4f5c\u7684\u8bdd\u8be5\u600e\u4e48\u529e\uff1f\u66b4\u529b\u5220\u7edd\u5bf9\u4e0d\u884c\uff0c\u4e0d\u4ec5\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u5927\u4e86\uff0c\u7ebf\u6bb5\u6811\u7684\u5f62\u6001\u4e5f\u6539\u53d8\u4e86\uff1f\u90a3\u6211\u4eec\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5728\u666e\u901a\u7ebf\u6bb5\u6811\u7684\u57fa\u7840\u4e0a\u591a\u7ef4\u62a4\u4e00\u4e2a\u503c\u2014\u2014\u8fd9\u6bb5\u533a\u95f4\u771f\u5b9e\u503c\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u67e5\u8be2\u4e0e\u4fee\u6539\u7684\u65f6\u5019\u5c31\u4e0d\u662f\u4e0emid\u6bd4\u8f83\u4e86\uff0c\u800c\u662f\u4e0e\u5de6\u513f\u5b50\u7684\u771f\u5b9e\u503c\u7684\u4e2a\u6570\u4f5c\u6bd4\u8f83\u3002\n\n### \u5b9e\u73b0\n\u9996\u5148\uff0c\u5efa\u6811\u7684\u65f6\u5019\u8981\u591a\u51fa\u4e00\u4e2a\u771f\u5b9e\u503c\u7684\u4fe1\u606f\u3002\uff08\u6211\u7528tr\u8bb0\u5f55\u771f\u5b9e\u503c\uff09\n```\nvoid build(int id,int l,int r)\n{\n    t[id].l=l,t[id].r=r;\n    t[id].len=t[id].tr=r-l+1;\n    if (l==r)\n    {\n        t[id].maxx=t[id].minn=a[l];\n        return ;\n    }\n    int mid=(l+r)/2;\n    build(id*2,l,mid);\n    build(id*2+1,mid+1,r);\n    renew(id);\n}\n```\n\n\u7136\u540e\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u5019\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u628a\u5b83\u7684tr--\uff0c\u503c\u8d4b\u4e3a-inf\uff0c\u4e3b\u8981\u6ce8\u610f\u8981\u4e0e\u5de6\u513f\u5b50\u7684\u771f\u5b9e\u503c\u6bd4\u8f83\u3002\n```\nvoid delet(int id,int s)\n{\n    if (t[id].l==t[id].r)\n    {\n        t[id].maxx=-inf,t[id].minn=inf;\n        t[id].tr--;\n        return ;\n    }\n    if (s<=t[id*2].tr)delet(id*2,s);\n    else delet(id*2+1,s-t[id*2].tr);\n    renew(id);\n}\n```\n\n### \u5b8c\u6574\u4ee3\u7801\n```\n#include<cstdio>\n#include <algorithm>\n#define inf 0x3f3f3f3f\nusing namespace std;\nconst int N=3e6;\nint n,m,a[N];\nstruct node{\n    int l,r,len,tr,maxx,minn;\n}t[N*3];\nvoid renew(int id)\n{\n    t[id].maxx=max(t[id*2].maxx,t[id*2+1].maxx);\n    t[id].minn=min(t[id*2].minn,t[id*2+1].minn);\n    t[id].tr=t[id*2].tr+t[id*2+1].tr;\n}\nvoid build(int id,int l,int r)\n{\n    t[id].l=l,t[id].r=r;\n    t[id].len=t[id].tr=r-l+1;\n    if (l==r)\n    {\n        t[id].maxx=t[id].minn=a[l];\n        return ;\n    }\n    int mid=(l+r)/2;\n    build(id*2,l,mid);\n    build(id*2+1,mid+1,r);\n    renew(id);\n}\nvoid delet(int id,int s)\n{\n    if (t[id].l==t[id].r)\n    {\n        t[id].maxx=-inf,t[id].minn=inf;\n        t[id].tr--;\n        return ;\n    }\n    if (s<=t[id*2].tr)delet(id*2,s);\n    else delet(id*2+1,s-t[id*2].tr);\n    renew(id);\n}\nint ask1(int id,int l,int r)\n{\n    l=l<1?1:l;\n    r=r<t[id].tr?r:t[id].tr;\n    if (r-l+1==t[id].tr)return t[id].maxx;\n    int t1=-inf,t2=-inf;\n    if(r>t[id*2].tr)t1=ask1(id*2+1,l-t[id*2].tr,r-t[id*2].tr);\n    if (l<=t[id*2].tr)t2=ask1(id*2,l,r);\n    return max(t1,t2);\n}\nint ask2(int id,int l,int r)\n{\n    l=l<1?1:l;\n    r=r<t[id].tr?r:t[id].tr;\n    if (r-l+1==t[id].tr)return t[id].minn;\n    int t1=inf,t2=inf;\n    if(r>t[id*2].tr)t1=ask2(id*2+1,l-t[id*2].tr,r-t[id*2].tr);\n    if (l<=t[id*2].tr)t2=ask2(id*2,l,r);\n    return min(t1,t2);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    build(1,1,n);\n    int opt,l,r;\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&opt);\n        if (opt==1)\n        {\n            scanf(\"%d\",&l);\n            delet(1,l);\n        }\n        else\n        {\n            scanf(\"%d%d\",&l,&r);\n            printf(\"%d %d\\n\",ask2(1,l,r),ask1(1,l,r));\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1601121479,
        "uid": 227436,
        "name": "\u5e74\u534e\u5929\u5730",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6011 \u3010[SCOI2006]\u52a8\u6001\u6700\u503c\u3011"
    },
    {
        "content": "# \u9898\u89e3\uff1a\n\u8fd9\u9053\u9898\u662f\u8981\u6c42\u4ee5\u4e0b\u4e24\u4e2a\u64cd\u4f5c\uff1a\u5220\u9664\u5e8f\u5217\u4e0a\u7684\u4e00\u4e2a\u6570\u6216\u67e5\u8be2\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u503c\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6c42\u89e3\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u7684\u771f\u5b9e\u8282\u70b9\u6570\u91cf\u4ee5\u53ca\u6700\u503c\u3002\u5f53\u5220\u9664\u8282\u70b9\u65f6\uff0c\u5982\u679c\u5f85\u5220\u9664\u7684\u8282\u70b9\u5c0f\u4e8e\u8be5\u8282\u70b9\u5de6\u513f\u5b50\u7684\u5927\u5c0f\uff0c\u5728\u5de6\u5b50\u6811\u9012\u5f52\u6c42\u89e3\uff0c\u53cd\u4e4b\u5728\u53f3\u5b50\u6811\u6c42\u89e3\u3002\u5f53\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\u65f6\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f\u4fee\u6539\u4e3a0\uff0c\u5206\u522b\u628a\u6781\u5927\u503c\u548c\u6781\u5c0f\u503c\u8d4b\u4e3a-inf\u548cinf\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u7b54\u6848\u9519\u8bef\u3002\u67e5\u8be2\u64cd\u4f5c\u4e5f\u662f\u540c\u7406\uff0c\u6839\u636e\u5b50\u6811\u7684\u5927\u5c0f\u5224\u65ad\u5e94\u8be5\u5f80\u90a3\u9897\u5b50\u6811\u904d\u5386\u3002\n# \u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1e6+10,inf=0x7f7f7f7f;\nint n,m;\nint a[maxn];\nstruct node{\n    int _max,_min,size,l,r;\n}tree[maxn*4];\nvoid build(int id,int l,int r)\n{\n    tree[id].l=l,tree[id].r=r;\n    if(l==r){\n        tree[id]._min=tree[id]._max=a[l];\n        tree[id].size=1;\n        return ;\n    }\n    int mid=(l+r)/2;\n    build(id*2,l,mid),build(id*2+1,mid+1,r);\n    tree[id]._max=max(tree[id*2]._max,tree[id*2+1]._max);\n    tree[id]._min=min(tree[id*2]._min,tree[id*2+1]._min);\n    tree[id].size=tree[id*2].size+tree[id*2+1].size;\n}\nvoid update(int id,int x)\n{\n    if(tree[id].size==1){\n        tree[id].size=0;\n        tree[id]._min=inf;\n        tree[id]._max=-inf;\n        return ;\n    }\n    if(x<=tree[id*2].size)update(id*2,x);\n    else update(id*2+1,x-tree[id*2].size);\n    tree[id].size=tree[id*2].size+tree[id*2+1].size;\n    tree[id]._max=max(tree[id*2]._max,tree[id*2+1]._max);\n    tree[id]._min=min(tree[id*2]._min,tree[id*2+1]._min);\n}\nnode query(int id,int l,int r)\n{\n    if(tree[id].size==r-l+1)return tree[id];\n    if(r<=tree[id*2].size)return query(id*2,l,r);\n    else if(l>tree[id*2].size)return query(id*2+1,l-tree[id*2].size,r-tree[id*2].size);\n    else {\n        node t1=query(id*2,l,tree[id*2].size),t2=query(id*2+1,1,r-tree[id*2].size),t3;\n        t3._max=max(t1._max,t2._max),t3._min=min(t1._min,t2._min);\n        return t3;\n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]);\n    build(1,1,n);\n    for(int i=1,opt,x,y;i<=m;i++)\n    {\n        scanf(\"%d\",&opt);\n        if(opt==1){\n            scanf(\"%d\",&x);\n            update(1,x);\n        }else{\n            scanf(\"%d%d\",&x,&y);\n            node t=query(1,x,y);\n            printf(\"%d %d\\n\",t._min,t._max);\n        }\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1601121220,
        "uid": 231120,
        "name": "YinyuDream",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6011 \u3010[SCOI2006]\u52a8\u6001\u6700\u503c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6076\u5fc3\u7684\u662f\u5220\u9664\u540e\u7684\u79fb\u4f4d\u64cd\u4f5c\u3002\n\n\u4e0d\u8fc7\u53ef\u4ee5\u628a\u6c42\u533a\u95f4\u6700\u503c\u7684 $l,r$ \u8f6c\u79fb\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u7684\u865a\u62df\u8282\u70b9\u3002\u5c31\u662f\u8bf4\uff0c\u5148\u5f04\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u503c\uff0c\u7136\u540e\u5220\u9664\u7684\u65f6\u5019\u53ea\u662f\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u5728\u67e5\u8be2\u7684\u65f6\u5019\u5229\u7528\u6570\u636e\u7ed3\u6784\u628a $[l,r]$ \u6620\u5c04\u5230\u7ebf\u6bb5\u6811\u7684 $[l',r']$ \u4e0a\u3002\n\n\u8f6c\u79fb\u4e5f\u5f88\u7b80\u5355\u3002\n\n\u5199\u4e00\u4e2a\u5e73\u8861\u6811\u7ef4\u62a4\u6570\u7ec4\u4e0b\u6807\u3002\u5728\u5220\u9664\u7684\u65f6\u5019\u5220\u9664 $rank(k)$\uff08\u5e73\u8861\u6811\u4e2d\u6392\u540d\u7b2c $k$ \u7684\u4e0b\u6807\uff09\u3002\u6ce8\u610f\u5220\u9664\u7684\u65f6\u5019\u8981\u5728\u7ebf\u6bb5\u6811\u4e2d\u5254\u9664 $a_{rank(k)}$ \u7684\u5f71\u54cd\u3002\u7136\u540e\u533a\u95f4 $[l,r]$ \u5c31\u662f\u7ebf\u6bb5\u6811\u4e2d\u7684 $[rank(l),rank(r)]$\u3002\n\n~~\u8fd9\u8fd8\u4e0d\u5982\u5199\u4e00\u4e2a\u6587\u827a\u5e73\u8861\u6811\u5462~~\n\n\u8fd9\u4e2a\u5e73\u8861\u6811\u6bd4\u8f83\u7279\u6b8a\uff0c\u4f60\u628a\u5b83\u5efa\u51fa\u6765\u540e\u5c31\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u5b9e\u73b0\u8fd9\u68f5\u5e73\u8861\u6811\uff0c\u548c\u7ef4\u62a4\u533a\u95f4\u6700\u503c\u7684\u7ebf\u6bb5\u6811\u7684\u6837\u5b50\u5b8c\u5168\u4e00\u6837\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u987a\u4fbf\u7528\u7ef4\u62a4\u533a\u95f4\u6700\u503c\u7684\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u4e00\u4e0b\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n\u4e0d\u8fc7\u7528\u6743\u503c\u6811\u72b6\u6570\u7ec4\u53ef\u80fd\u4f1a\u5e38\u6570\u5c0f\u4e00\u4e9b\u3002\n\n\u4e0b\u9762\u662f\u90e8\u5206\u4ee3\u7801\uff1a\n\n```cpp\n\tif(opt==1) \n\t\t{\n\t\t\tmadd(*f.find_by_order(l-1));//\u66f4\u65b0\u7ebf\u6bb5\u6811\n\t\t\tf.erase(f.find_by_order(l-1));//\u5220\u9664\u4e0b\u6807\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\",&r);\n\t\t\tl=*f.find_by_order(l-1),r=*f.find_by_order(r-1);//\u6620\u5c04\n\t\t\tprintf(\"%d %d\\n\",min(1,l,r),max(1,l,r));//\u7ebf\u6bb5\u6811\u6c42\u6700\u503c\n\t\t}\n```\n\n\u6211\u6ca1\u6709\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u5199\uff0c\u800c\u662f\u7528\u4e86 pb_ds\u3002\u56e0\u4e3a\u65e2\u7136\u7528\u53e6\u5916\u7684\u5e73\u8861\u6811\u53ef\u4ee5\u7ef4\u62a4\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u5e94\u8be5\u4e5f\u53ef\u4ee5\u3002",
        "postTime": 1587293254,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6011 \u3010[SCOI2006]\u52a8\u6001\u6700\u503c\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e0d\u662f\u88f8\u5e73\u8861\u6811\u5417 \u4e00\u4e2alog\u554a\n\nSplay\u7ef4\u62a4\u6700\u5c0f\u6700\u5927\u503c \u5220\u9664\u90fd\u662f\u57fa\u672c\u64cd\u4f5c\u4e86 \u627e\u524d\u9a71\u540e\u7ee7splay\u4e00\u4e0b\u5c31\u5b8c\u4e86\n\n\u8bb0\u5f97\u6dfb\u52a0\u4e24\u4e2a\u54e8\u5175 \n\n$O(m \\log n)$\n```cpp\n#include<cstdio>\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch(getchar());bool f(0);\n\twhile (ch<48||ch>57){if (ch=='-')f=1;ch=getchar();}\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n\tif (f)in=-in;\n}\ntemplate<class type>inline const type min(const type &a,const type &b)\n{\n\treturn a<b?a:b;\n}\ntemplate<class type>inline const type max(const type &a,const type &b)\n{\n\treturn a>b?a:b;\n}\nconst int N(1e6+10),inf(1e9+10);\nint n,m,a[N];\nnamespace Splay\n{\n\tstruct tree\n\t{\n\t\ttree *fa,*son[2];\n\t\tstatic tree *null;\n\t\tint val,mn,mx,size;\n\t\tvoid *operator new(size_t size);\n\t\tvoid operator delete(void *ptr);\n\t\tinline tree():val(0),mn(inf),mx(-inf),size(0)\n\t\t{\n\t\t\tstatic bool init(0);\n\t\t\tif (!init)\n\t\t\t\tinit=1,\n\t\t\t\tnull=new tree,\n\t\t\t\tnull->son[0]=null->son[1]=null->fa=null;\n\t\t\tson[0]=son[1]=fa=null;\n\t\t}\n\t\tinline const void pushup()\n\t\t{\n\t\t\tsize=son[0]->size+1+son[1]->size;\n\t\t\tmn=min(val,min(son[0]->mn,son[1]->mn));\n\t\t\tmx=max(val,max(son[0]->mx,son[1]->mx));\n\t\t}\n\t\tinline const bool id()\n\t\t{\n\t\t\treturn fa->son[1]==this;\n\t\t}\n\t\tinline const void set(tree *p,const bool &d)\n\t\t{\n\t\t\tif (p!=null)p->fa=this;\n\t\t\tif (this!=null)son[d]=p;\n\t\t}\n\t\tinline const void rotate()\n\t\t{\n\t\t\tconst bool f(id());\n\t\t\ttree *fa(this->fa);\n\t\t\tfa->fa->set(this,fa->id());\n\t\t\tfa->set(son[f^1],f);\n\t\t\tset(fa,f^1);\n\t\t\tfa->pushup();pushup();\n\t\t}\n\t\tinline const void splay(tree *goal);\n\t}*tree::null,*root;\n\t#define null tree::null\n\tchar memory_pool[N*sizeof(tree)],*tail(memory_pool+sizeof memory_pool);\n\tvoid *recycle[N],**top(recycle);\n\tinline void *tree::operator new(size_t size){return top!=recycle?*--top:tail-=size;}\n\tinline void tree::operator delete(void *ptr){*top++=ptr;}\n\tinline const void tree::splay(tree *goal=null)\n\t{\n\t\tfor (;fa!=goal;rotate())\n\t\t\tif (fa->fa!=goal)\n\t\t\t\t(fa->id()^id()?this:fa)->rotate();\n\t\tif (goal==null)root=this;\n\t}\n\tinline tree *findrank(int k)\n\t{\n\t\ttree *p(root);k++;\n\t\twhile (1)\n\t\t\tif (k<=p->son[0]->size)p=p->son[0];\n\t\t\telse if (!(k-=p->son[0]->size+1))return p;\n\t\t\t\telse p=p->son[1];\n\t}\n\tinline const void remove(const int &pos)\n\t{\n\t\ttree *pre(findrank(pos-1)),*nxt(findrank(pos+1));\n\t\tpre->splay();nxt->splay(pre);\n\t\tdelete nxt->son[0];\n\t\tnxt->son[0]=null;\n\t\tnxt->pushup();pre->pushup();\n\t}\n\tinline const void query(const int &l,const int &r)\n\t{\n\t\ttree *pre(findrank(l-1)),*nxt(findrank(r+1));\n\t\tpre->splay();nxt->splay(pre);\n\t\tprintf(\"%d %d\\n\",nxt->son[0]->mn,nxt->son[0]->mx);\n\t}\n\tinline tree *build(const int &l,const int &r,tree *fa)\n\t{\n\t\tif (l>r)return null;\n\t\tconst int mid(l+r>>1);\n\t\ttree *p(new tree);\n\t\tp->val=a[mid];if (fa)p->fa=fa;\n\t\tif (l==r)return p->pushup(),p;\n\t\tp->son[0]=build(l,mid-1,p);\n\t\tp->son[1]=build(mid+1,r,p);\n\t\tp->pushup();\n\t\treturn p;\n\t}\n}using namespace Splay;\nint main()\n{\n\tread(n);read(m);\n\tfor (int i(1);i<=n;i++)read(a[i]);\n\troot=build(0,n+1,null);\n\tfor (int opt,l,r;m--;)\n\t\tif (read(opt),read(l),opt&1)remove(l);\n\t\telse read(r),query(l,r);\n\treturn 0;\n}\n```",
        "postTime": 1580102227,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6011 \u3010[SCOI2006]\u52a8\u6001\u6700\u503c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u7684\u65f6\u95f4\u9650\u5236\u67095\u79d2\uff0c$O(m\\log^2n)$ \u7684\u7ebf\u6bb5\u6811+\u6811\u72b6\u6570\u7ec4+\u4e8c\u5206\u662f\u53ef\u4ee5AC\u672c\u9898\u7684\uff0c\u4e0d\u8fc7\u6211\u8c8c\u4f3c\u662fAC\u7684\u4eba\u4e2d\u8dd1\u7684\u6700\u6162\u7684\u3002\n### \u505a\u6cd5\uff1a\n\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u7684\u6700\u503c\uff0c\u6bcf\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u5c06\u8fd9\u4e2a\u8282\u70b9\u7684\u6700\u5927\u503c\u53d8\u6210-INF\uff0c\u6700\u5c0f\u503c\u53d8\u6210INF\uff0c\u518d\u66f4\u65b0\u8282\u70b9\u3002\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e0b\u6807\u7684\u8f6c\u79fb\u91cf\uff0c\u6bcf\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u5728\u539f\u4e0b\u6807\u51cf\u53bb\u524d\u7f00\u548c\u4e0e\u8fd9\u4e2a\u4e0b\u6807\u76f8\u7b49\u7684\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u7684\u540e\u4e00\u4e2a\u4e0b\u6807\u52a0\u4e00\u3002\u7528\u4e8c\u5206\u67e5\u627e\u539f\u4e0b\u6807\u51cf\u53bb\u524d\u7f00\u548c\u4e0e\u8fd9\u4e2a\u4e0b\u6807\u76f8\u7b49\u7684\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\uff0c\u63a5\u7740\u518d\u4ee5\u8fd9\u4e2a\u4e0b\u6807\u5220\u9664\u8282\u70b9\u548c\u4fee\u6539\u503c\u3002\n### \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 1000000 + 10;\nconst int INF = 1 << 30;\nFILE *fin, *fout;//\u540e\u9762\u8981\u7528\u5230\u7684\uff0c\u6682\u65f6\u4e0d\u7528\u7ba1\ninline int read(int &x) {//\u5feb\u8bfb\u548c\u5feb\u5199\u90e8\u5206\uff0c\u4e0d\u7528\u7ba1\n\tchar c = 0;\n\tint f = x = 0;\n\twhile (c < 48 || c > 57) {\n\t\tif (c == -1) return 0;\n\t\tif (c == '-')\n\t\t\tf = 1;\n\t\tc = fgetc(fin);\n\t}\n\twhile (c > 47 && c < 58) x = (x << 3) + (x << 1) + (c & 15), c = fgetc(fin);\n\tif (f) x = -x;\n\treturn 1;\n}\ntemplate<class T, class... Args> inline int read(T &x, Args&... args) {\n\treturn read(x) + read(args...);\n}\ninline void write(int x) {\n\tif (x < 0) {\n\t\tfputc(45, fout);\n\t\twrite(-x);\n\t\treturn;\n\t}\n\tif (x > 9) write(x / 10);\n\tfputc((x % 10) | 48, fout);\n}\ninline void write(char c) {\n\tfputc(c, fout);\n}\ninline void write(string s) {\n\tint len = s.length();\n\tfor (int i = 0; i < len; ++i)\n\t\tfputc(s[i], fout);\n}\n#define l(p) t[p].l//\u5b8f\u5b9a\u4e49\uff0c\u5199\u8d77\u6765\u65b9\u4fbf\n#define r(p) t[p].r\n#define ma(p) t[p].maxn\n#define mi(p) t[p].minn\nstruct SegmentTree {\n\tint l, r, maxn, minn;\n} t[N << 2];//\u6570\u7ec4\u522b\u5fd8\u8bb0\u5f00\u56db\u500d\nint n, m, x, y, opt, a[N], c[N];\ninline void build(int p, int l, int r) {\n\tl(p) = l, r(p) = r;\n\tif (l == r) {//\u53ea\u6709\u4e00\u4e2a\u6570\u503c\uff0c\u76f4\u63a5\u8d4b\u503c\n\t\tma(p) = mi(p) = a[l];\n\t\treturn;\n\t}\n\tint m = (l + r) >> 1;\n\tbuild(p << 1, l, m);//\u9012\u5f52\u5b50\u6811\n\tbuild(p << 1 | 1, m + 1, r);\n\tma(p) = max(ma(p << 1), ma(p << 1 | 1));\n\tmi(p) = min(mi(p << 1), mi(p << 1 | 1));\n}\ninline void erase(int p, int x) {//\u5220\u9664x\u8282\u70b9\n\tif (l(p) == r(p)) {//\u4fee\u6539\u6700\u503c\uff0c\u76f8\u5f53\u4e8e\u5220\u9664\n\t\tma(p) = -INF;\n\t\tmi(p) = INF;\n\t\treturn;\n\t}\n\tint m = (l(p) + r(p)) >> 1;\n\tif (x <= m) erase(p << 1, x);\n\telse erase(p << 1 | 1, x);\n\tma(p) = max(ma(p << 1), ma(p << 1 | 1));//\u522b\u5fd8\u8bb0\u66f4\u65b0\u6700\u503c\n\tmi(p) = min(mi(p << 1), mi(p << 1 | 1));\n}\ninline int QueryMax(int p, int l, int r) {//\u67e5\u8be2\u6700\u5927\u503c\uff0c\u67e5\u8be2\u6700\u5c0f\u503c\u5982\u6cd5\u70ae\u5236\n\tif (l <= l(p) && r >= r(p)) return ma(p);//\u53ea\u6709\u4e00\u4e2a\u6570\u636e\uff0c\u76f4\u63a5\u8fd4\u56de\n\tint m = (l(p) + r(p)) >> 1, res = -INF;//\u8fd9\u91cc\u8981\u5148\u8d4b\u4e3a-INF\uff0c\u67e5\u8be2\u6700\u5c0f\u503c\u65f6\u8981\u8d4b\u4e3aINF\n\tif (l <= m) res = max(res, QueryMax(p << 1, l, r));//\u4e0d\u7528\u62c5\u5fc3\u65f6\u95f4\u590d\u6742\u5ea6\u9000\u5316\u4e3aO(n)\uff0c\u5373\u4f7f\u4e24\u4e2a\u90fd\u9012\u5f52\u4e86\uff0c\u4e0b\u4e00\u6b21\u4e5f\u53ea\u4f1a\u9012\u5f52\u4e00\u4e2a\n\tif (r > m) res = max(res, QueryMax(p << 1 | 1, l, r));//\u7b49\u53f7\u4e0d\u80fd\u6709\uff0c\u5426\u5219TLE\n\treturn res;\n}\ninline int QueryMin(int p, int l, int r) {//\u540c\u4e0a\n\tif (l <= l(p) && r >= r(p)) return mi(p);\n\tint m = (l(p) + r(p)) >> 1, res = INF;\n\tif (l <= m) res = min(res, QueryMin(p << 1, l, r));\n\tif (r > m) res = min(res, QueryMin(p << 1 | 1, l, r));\n\treturn res;\n}\ninline void add(int p, int x) {//\u6811\u72b6\u6570\u7ec4\u7684\u4fee\u6539\u64cd\u4f5c\n\tfor (; p <= n; p += p & -p) c[p] += x;\n}\ninline int ask(int p) {//\u6811\u72b6\u6570\u7ec4\u7684\u67e5\u8be2\u524d\u7f00\u548c\u64cd\u4f5c\n\tint res = 0;\n\tfor (; p; p -= p & -p) res += c[p];\n\treturn res;\n}\ninline int find(int x) {//\u4e8c\u5206\u67e5\u627e\u539f\u4e0b\u6807\n\tint l = 1, r = n, m, res;\n\twhile (l <= r) {\n\t\tm = (l + r) >> 1;\n\t\tif (m - ask(m) == x) res = m;//\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de\n\t\tif (m - ask(m) > x) r = m - 1;\n\t\telse l = m + 1;\n\t}\n\treturn res;//\u8fd4\u56de\u503c\u5fc5\u5b9a\u6b63\u786e\n}\nsigned main() {\n\t#ifdef ONLINE_JUDGE\n\tfin = stdin;//\u8bc4\u6d4b\u673a\u4e0a\u4f7f\u7528\u6807\u51c6\u8f93\u5165\u8f93\u51fa\uff0c\u672c\u673a\u4e0a\u4f7f\u7528\u6587\u4ef6\u8f93\u5165\u8f93\u51fa\uff0c\u53ef\u5220\u53bb\n\tfout = stdout;\n\t#else\n\tfin = fopen(\"P6011.in\", \"rb\");\n\tfout = fopen(\"P6011.out\", \"wb\");\n\t#endif\n\tread(n, m);\n\tfor (int i = 1; i <= n; ++i)\n\t\tread(a[i]);\n\tbuild(1, 1, n);//\u5148\u8fdb\u884c\u9884\u5904\u7406\n\tfor (int i = 1; i <= m; ++i) {\n\t\tread(opt);\n\t\tif (opt == 1) {\n\t\t\tread(x), x = find(x);//\u5361\u5e38\uff0c\u5426\u5219\u53ef\u80fdTLE\uff0c\u4e0b\u540c\n\t\t\terase(1, x);\n\t\t\tadd(x + 1, 1);\n\t\t}\n\t\telse {\n\t\t\tread(x, y), x = find(x), y = find(y);\n\t\t\twrite(QueryMin(1, x, y)), write(' ');\n\t\t\twrite(QueryMax(1, x, y)), write('\\n');\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1580044477,
        "uid": 181378,
        "name": "Alarm5854",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6011 \u3010[SCOI2006]\u52a8\u6001\u6700\u503c\u3011"
    }
]