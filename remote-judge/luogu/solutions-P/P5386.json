[
    {
        "content": "**\u7b80\u8ff0\u9898\u610f:**  \n\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217\uff0c\u591a\u6b21\u8be2\u95ee\uff0c\u6c42\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u6709\u591a\u5c11\u4e2a\u5b50\u533a\u95f4\u7684\u503c\u90fd\u5728\u533a\u95f4 $[x,y]$ \u5185\u3002\n\n--------\n**\u7b97\u6cd51:**\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u66b4\u529b\u679a\u4e3e\u5b50\u533a\u95f4\uff0c\u7136\u540e\u66b4\u529b\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(qn^3)$\u3002\n\n\u7528ST\u8868\u9884\u5904\u7406, $O(1)$\u67e5\u8be2\u533a\u95f4\u6700\u503c\u53ef\u4ee5\u505a\u5230 $O(qn^2+nlogn)$\u3002\n\n\u671f\u671b\u5f97\u5206: $0$\n\n**\u7b97\u6cd52:**\n\n\u6211\u4eec\u53d1\u73b0\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u65f6\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6ee1\u8db3\u6240\u6709\u5143\u7d20\u90fd\u5728 $[x,y]$ \u5185\u7684 **\u6781\u957f\u5b50\u533a\u95f4** \u7684\u8d21\u732e\u4e3a $\\frac{t(t+1)}{2}$, \u5176\u4e2d $t$ \u4e3a\u8be5\u5b50\u533a\u95f4\u7684\u957f\u5ea6\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u65f6\u626b\u63cf\u51fa\u6240\u6709\u6781\u957f\u5b50\u533a\u95f4\u5373\u53ef\u505a\u5230 $O(qn)$\u3002\n\n\u671f\u671b\u5f97\u5206: $0$ ~ $34$\n\n(\u867d\u7136\u6784\u9020\u6570\u636e\u5361\u4e86\uff0c\u4f46\u8fd8\u662f\u88ab\u4e00\u4f4d\u5c0f\u5e38\u6570\u73a9\u5bb6\u5361\u8fc7\u53bb\u4e86\u7b2c\u4e00\u6863\u5206)\n\n**\u7b97\u6cd53:**\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u8981\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u4e86\u83ab\u961f\uff0c\u4f46\u662f \u503c\u57df$[x,y]$ \u4e00\u76f4\u5728\u53d8\uff0c\u4f3c\u4e4e\u5f88\u96be\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u8f6c\u53d8\u601d\u8def\u3002\n\n\u7531\u4e8e\u9898\u76ee\u7ed9\u7684\u5e8f\u5217\u65f6\u4e00\u4e2a\u6392\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5728\u503c\u57df\u4e0a\u83ab\u961f\uff0c\u6bcf\u6b21\u79fb\u52a8\u53ea\u4f1a\u6539\u53d8\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5426\u6709\u6548\u3002\u7136\u540e\u8003\u8651\u7ef4\u62a4\u7b54\u6848\uff0c\u5f88\u663e\u7136\u53ef\u4ee5\u7ebf\u6bb5\u6811\u3002\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e0b\n\u5de6\u3001\u53f3\u7aef\u5f00\u59cb\u7684\u6781\u957f\u6709\u6548\u533a\u95f4\u957f\u5ea6\uff0c\u533a\u95f4\u7b54\u6848\uff0c\u4e0e\u533a\u95f4\u662f\u5426\u5168\u90e8\u6709\u6548\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt{q}\\ logn)$\n\n\u671f\u671b\u5f97\u5206: $34$\n\n**\u7b97\u6cd54:**\n\n\u8003\u8651\u53e6\u4e00\u79cd $O(qn)$\u7684\u505a\u6cd5\uff0c\u6bcf\u6b21\u8be2\u95ee\u626b\u63cf\u503c\u57df\uff0c\u5224\u65ad\u503c\u57df\u5185\u6bcf\u4e2a\u503c\u662f\u5426\u5728\u533a\u95f4\u5185\uff0c\u5728\u5c31\u66f4\u65b0\u7b54\u6848\u3002\u66f4\u65b0\u7b54\u6848\u65f6\u9700\u8981\u7528\u94fe\u8868\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u6781\u5927\u6709\u6548\u533a\u95f4\u3002\n\n\u671f\u671b\u7684\u5206 $0$\n\n**\u7b97\u6cd55:**\n\n\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u74f6\u9888\u5728\u4e8e\u67e5\u8be2\u65f6\u9700\u8981\u7ebf\u6bb5\u6811\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5bf9\u5e8f\u5217\u5206\u5757,\u7ed3\u5408\u7b97\u6cd5\u56db\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u5757\u5185\u5355\u72ec\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\u548c\u533a\u95f4\u7684\u7b54\u6848\uff0c\u7531\u4e8e\u7ef4\u62a4\u7684\u4fe1\u606f\u96be\u4ee5\u64a4\u9500\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u56de\u6eda\u83ab\u961f\u7ef4\u62a4\u503c\u57df\uff0c\u533a\u95f4\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $2\\sqrt{n}$\u7684\u4f7f\u7528\u7b97\u6cd54\u66b4\u529b\uff0c\u5927\u4e8e\u7684\u90e8\u5206\u6bcf\u6b21 $O(\\sqrt{n})$\u67e5\u8be2\uff0c\u6bcf\u6b21\u83ab\u961f\u79fb\u52a8\u65f6$O(1)$\u7ef4\u62a4\u6240\u5728\u5757\u7684\u94fe\u8868\uff0c\u56de\u6eda\u65f6\u4f7f\u7528\u65f6\u95f4\u6233$O(1)$\u56de\u6eaf\u3002\n\n\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt{n})$,\u4ee3\u7801\u91cf4k\u5de6\u53f3\u3002\n\n\u671f\u671b\u5f97\u5206: $100$\n\n\u603b\u4f53\u6765\u8bf4\u8fd9\u662f\u4e00\u9053\u7b80\u5355\u7684\u9898\uff0c\u89e3\u6cd5\u81ea\u7136\uff0c\u7801\u91cf\u9002\u4e2d\uff0c\u601d\u7ef4\u96be\u5ea6\u9002\u4e2d\uff0c\u8003\u5bdf\u4e86\u7ebf\u6bb5\u6811\u3001\u83ab\u961f\u3001\u5206\u5757\u3001\u94fe\u8868\u7b49\u591a\u79cd\u521d\u7b49\u6570\u636e\u7ed3\u6784\uff0c\u662f\u4e00\u9053\u4e0d\u6298\u4e0d\u6263\u7684\u5c0f\u6e05\u65b0\u6570\u636e\u7ed3\u6784\u597d\u9898\u3002\n\n\u9644std\uff1a\n\n```cpp\n// \u9632\u6284\u88ad\u7247\u6bb5\u5df2\u6df7\u5165\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef unsigned char LL;\n\nLL que_range( int x ) { return 1ll * x * (x + 1) / 2; }\n\ntemplate<int _size>\nstruct stamp{\n    //int A[ _size ];\n    //int B[ _size ];\n    //int T[ _size ];\n    //int cnt = 1;\n    //bool bind = false;\n    \n    //void Roll() { cnt ++; }\n    //void Bind() { bind = true; Roll(); }\n    //void Unte() { bind = false; }\n    \n    //void Set0() { memset( B, 0, sizeof(B) ); Roll(); }\n    \n    int& operator []( int index ) {\n        if( bind ) {\n            if( T[index] ^ cnt ) T[index] = cnt, A[index] = B[index];\n            return A[index];\n        } else return B[ index ];\t\n    }\n};\n\nint block = 10;\nint belong[200005];\nint beg[405];\n\nstruct que{\n    int l, r, x, y, id;\t\n    que() {}\n    que( int _id ) { cin >> l >> r >> x >> y; id = _id; }\n    bool operator <( que& from ) const\n      { return belong[x] == belong[ from.x ] ? y < from.y : x < from.x; }\n};\n\nint n, q; \nvector<que> Q;\n\nint c [200005];\nint uc[200005];\n\nstamp<200005> pre;\nstamp<200005> nxt;\nstamp<405> mid;\n\nint bf1( que& x ) { \n    int ans = 0, lst = 0;\n    for( int i = x.l; i <= x.r; i ++ ) {\n        if( c[i] <= x.y and c[i] >= x.x ) lst ++;\n        else lst = 0;\n        ans += lst;\n    }\n    return ans;\n}\n\nint bf2( que& x ) {\n    int ans = 0;\n    for(int i = x.x;i <= x.y;i ++) {\n        int p = uc[i];\n        if( p < x.l or p > x.r ) continue;\n        ans -= que_range( p - pre[p - 1] );\n        ans -= que_range( nxt[p + 1] - p );\n        nxt[ pre[p - 1] ] = nxt[p + 1];\n        pre[ nxt[p + 1] ] = pre[p - 1];\n        ans += que_range( nxt[p + 1] - pre[p - 1] + 1 );\n    }\n    pre.Roll(); nxt.Roll();\n    return ans;\n}\n\nvoid updata( int x ) {\n    int p = uc[x], b = belong[p];\n    if( p ^ beg[b] ) {\n        if( pre[p - 1] != beg[b] ) mid[b] -= que_range( p - pre[p - 1] );\n        if( p != beg[b + 1] - 1 )nxt[ pre[p - 1] ] = nxt[p + 1];\n        else nxt[p] = p, pre[p] = pre[p - 1], nxt[ pre[p - 1] ] = p;\n    }\n    if( p ^ beg[b + 1] - 1 ) {\n        if( nxt[p + 1] != beg[b + 1] - 1 ) mid[b] -= que_range( nxt[p + 1] - p );\n        if( p != beg[b] ) pre[ nxt[p + 1] ] = pre[p - 1];\n        else pre[p] = p, nxt[p] = nxt[p + 1], pre[ nxt[p + 1] ] = p;\n    }\n    if( p != beg[b] and p != beg[b + 1] - 1 and pre[p - 1] != beg[b] and nxt[p + 1] != beg[b + 1] - 1 ) \n        mid[b] += que_range( nxt[p + 1] - pre[p - 1] + 1 );\n}\n\nLL ans[200005];\n\nint main(){\n    cin >> n >> q; \n    \n    for(int i = 1;i <= n;i ++) {\n        cin >> c[i]; uc[ c[i] ] = i;\n        belong[i] = i / block + 1;\n        if( belong[i] > belong[i - 1] ) beg[ belong[i] ] = i;\n    }\n    if( beg[ belong[n] ] == n ) belong[n] --;\n    beg[ belong[n] + 1 ] = n + 1; belong[ n + 1 ] = belong[n] + 1;\n    \n    for(int i = 0;i <= n + 1;i ++) pre[i] = i + 1, nxt[i] = i - 1;\n    nxt.Bind(); pre.Bind(); mid.Bind();\n    \n    for(int i = 1;i <= q;i ++) {\n        que x = que(i);\n        if     ( x.r - x.l <= block * 2 ) ans[i] = bf1( x );\n        else if( x.y - x.x <= block * 2 ) ans[i] = bf2( x ); \n        else Q.push_back( x );\n    }\n    sort( Q.begin(), Q.end() );\n    int pt = 0;\n    for(int i = 1;i < belong[n];i ++) {\n        int r = beg[i + 1] - 1;\n        \n        nxt.Unte(); pre.Unte(); mid.Unte();\n        for(int j = 0;j <= n + 1;j ++) pre[j] = j + 1, nxt[j] = j - 1; mid.Set0();\n        \n        while( pt < Q.size() and belong[ Q[pt].x ]  == i ) {\n            auto &P = Q[pt];\n            \n            nxt.Unte(); pre.Unte(); mid.Unte();\n            while( r < P.y ) updata( ++ r );\n            \n            nxt.Bind(); pre.Bind(); mid.Bind();\n            for( int j = P.x; j < beg[i + 1]; j ++ ) updata( j );\n            \n            long long Ans = 0, lst = 0; \n            int bl = belong[ P.l - 1 ] + 1;\n            int br = belong[ P.r + 1 ] - 1;\n            \n            for( int j = P.l; belong[j] < bl; j ++ ) {\n                if( c[j] >= P.x and c[j] <= P.y ) lst ++;\n                else Ans += que_range( lst ), lst = 0;\n            }\n            \n            for( int j = bl; j <= br; j ++ ) {\n                if( nxt[ beg[j] ] == beg[j + 1] - 1 ) lst += beg[j + 1] - beg[j];\n                else {\n                    lst += nxt[ beg[j] ] - beg[j] + 1;\n                    Ans += que_range(lst); Ans += mid[j];\n                    lst = beg[j + 1] - pre[ beg[j + 1] - 1 ];\n                }\n            }\n            \n            for( int j = beg[br + 1]; j <= P.r; j ++ ) {\n                if( c[j] >= P.x and c[j] <= P.y ) lst ++;\n                else Ans += que_range( lst ), lst = 0;\n            }\n            \n            Ans += que_range( lst );\n            ans[ P.id ] = Ans;\n            \n            nxt.Roll(); pre.Roll(); mid.Roll();\n            pt ++;\n        }\n    }\n    for(int i = 1;i <= q;i ++) cout << ans[i] << \"\\n\";\n    return 0;\n}\n```\n",
        "postTime": 1561463326,
        "uid": 47240,
        "name": "bzy369258147",
        "ccfLevel": 0,
        "title": "\u300cCNOI2019\u300d\u6570\u5b57\u6e38\u620f \u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\n\n[P5386 [Cnoi2019]\u6570\u5b57\u6e38\u620f](https://www.luogu.com.cn/problem/P5386)\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u8be2\u95ee\uff1a\u7ed9\u5b9a $l,r,x,y$ \uff0c\u95ee $[l,r]$ \u6709\u591a\u5c11\u4e2a\u5b50\u533a\u95f4\u6ee1\u8db3\u5176\u533a\u95f4\u6240\u6709\u6570\u4f7f\u5f97 $x\\leq a_i \\leq y$\u3002\n\n$n,q\\leq 10^5$\u3002\n\n\uff08\u548c [\u7b2c\u5341\u5206\u5757](https://www.luogu.com.cn/problem/P6578) \u7684\u5206\u5757\u7ef4\u62a4\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u3002\uff09\n\n## \u5206\u6790\n\n\u56de\u6eda\u83ab\u961f+\u5e8f\u5217\u5206\u5757\u3002\n\n\u9996\u5148\u8fd9\u9053\u9898\u9650\u5236\u5f88\u591a\uff0c\u4f46\u662f\u53ef\u4ee5\u79bb\u7ebf\uff0c\u6570\u636e\u8303\u56f4\u53c8\u662f $1e5$ \uff0c\u4e8e\u662f\u7406\u6240\u5f53\u7136\u53ef\u4ee5\u60f3\u4e00\u4e0b\u83ab\u961f\u3002\n\n\u53d1\u73b0\u76f4\u63a5\u83ab\u961f\u5c31\u53ef\u4ee5\u53bb\u9664 $l,r$ \u7684\u9650\u5236\u6761\u4ef6\uff0c\u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\uff0c\u8be2\u95ee\u5f53\u524d\u5e8f\u5217\u6709\u591a\u5c11\u4e2a\u8fd9\u6837\u7684\u5b50\u533a\u95f4\u6ee1\u8db3 $x\\leq a_i \\leq y$\u3002\n\n\u7531\u4e8e $x,y$ \u90fd\u662f\u4e00\u4e2a\u9759\u6001\u7684\u7ed9\u5b9a\u503c\uff0c\u4e8e\u662f\u53ef\u4ee5\u60f3\u5230\u628a\u8fd9\u4e2a\u4e0d\u7b49\u5173\u7cfb\u53d8\u6210 01 \u53d8\u91cf\u6765\u8868\u793a\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u53ef\u4ee5\u8fd9\u6837\u8f6c\u5316\u6210\uff1a\n\n\u5b9a\u4e49 $b_i=(x\\leq a_i \\leq y)$ \uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u8be2\u95ee\u6240\u6709\u6781\u957f\u8fde\u7eed 1 \u5b50\u533a\u95f4\u7684 $siz*(siz+1)/2$ \u7684\u548c\uff0c\u540c\u65f6\u8fd8\u6709\u5355\u70b9\u4fee\u6539\uff0c\u6bcf\u6b21 $0->1$ \u6216\u8005 $1->0$\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u6211\u4eec\u8981\u652f\u6301\u8fd9\u6837 $O(1)$ \u7684\u5355\u70b9\u4fee\u6539\u548c $O(\\sqrt{n})$ \u7684\u5355\u6b21\u67e5\u8be2\u624d\u884c\uff0c\u53ef\u4ee5\u8003\u8651\u5e8f\u5217\u5206\u5757\u6216\u8005\u94fe\u8868\uff0c\u8fd9\u91cc\u4f7f\u7528\u5e8f\u5217\u5206\u5757\u3002\n\n\u56e0\u4e3a $1->0$ \u975e\u5e38\u7684\u4e0d\u597d\u5904\u7406\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u60f3\u600e\u4e48\u628a\u8fd9\u4e2a\u4e1c\u897f\u53bb\u6389\u3002\n\n\u53d1\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u53ea\u4f1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u51fa\u73b0\uff1a\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u666e\u901a\u83ab\u961f\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u5bfc\u81f4\u6709\u4e00\u4e2a\u5220\u9664\u64cd\u4f5c\uff0c\u5c31\u662f\u8fd9\u4e2a\u5220\u9664\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u6709 $1->0$ \u8fd9\u79cd\u60c5\u51b5\u3002\n\n\u90a3\u4e48\u4e0d\u5220\u9664\u4e0d\u5c31\u597d\u4e86\uff1f\u518d\u52a0\u4e0a\u5206\u5757\u53ef\u4ee5\u652f\u6301\u64a4\u56de\u64cd\u4f5c\uff08\u53ef\u64a4\u9500\u5206\u5757\uff08\u96fe\uff09\uff09\uff08\u50cf\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u4e00\u6837\u62ff\u4e00\u4e2a\u6808\u8bb0\u5f55\u64cd\u4f5c\u5c31\u597d\u4e86\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u76f4\u63a5\u56de\u6eda\u83ab\u961f\u6765\u628a\u5220\u9664\u64cd\u4f5c\u53d8\u6210\u64a4\u9500\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u5757\u5927\u5c0f\u53d6 $\\sqrt{n}$\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\sqrt{n})$ \uff08\u5047\u8bbe $n,q$ \u540c\u9636\uff09\u3002\n\n## \u4ee3\u7801\n\n\n\u8981\u7684\u53ef\u4ee5\u79c1\u4fe1\u6211 $QWQ$ \u3002\n",
        "postTime": 1619448786,
        "uid": 130387,
        "name": "_Anchor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3P5386 [Cnoi2019]\u6570\u5b57\u6e38\u620f"
    },
    {
        "content": "\u8fd9\u9898\u548c[\u7b2c\u5341\u5206\u5757](https://www.luogu.com.cn/problem/P6578)\u795e\u4f3c\u3002\n# \u9898\u76ee\u5927\u610f\n\u5728\u6307\u5b9a\u533a\u95f4\u5185\u6709\u591a\u5c11\u5b50\u533a\u95f4\u7684\u503c\u57df\u5728 $[x,y]$ \u5185\u3002\n# \u601d\u8def\n\u8fd9\u9898\u6211\u5c31\u8bb2\u8bb2\u600e\u6837\u7528\u56de\u6eda\u83ab\u961f\u505a\uff0c\u5177\u4f53\u7ef4\u62a4\u65b9\u6cd5\u8bf7\u53c2\u8003\u6211\u7684[\u7b2c\u5341\u5206\u5757\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/abcdefghijklmnopqrst/solution-p6578)\u3002\n\n\u8fd9\u9898\u4e5f\u4e0d\u597d\u50cf\u7b2c\u5341\u5206\u5757\u4e00\u6837\u5c06\u67e5\u8be2\u7684\u503c\u57df\u6392\u5e8f\uff08\u56e0\u4e3a\u6709 $y$ \u5f53\u4e0a\u9650\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5728\u503c\u57df\u4e0a\u7528\u56de\u6eda\u83ab\u961f\uff0c\u5373\u5728\u503c\u57df\u4e0a\u5206\u5757\u3002\u8fd9\u9898\u6709\u4e2a\u975e\u5e38\u5999\u7684\u5730\u65b9\u5c31\u662f $a$ \u5e8f\u5217\u662f 1 \u5230 $n$ \u7684\u5e8f\u5217\uff0c\u6240\u4ee5\u503c\u57df\u5206\u5757\u53ef\u4ee5\u548c\u5e8f\u5217\u5206\u5757\u6df7\u5728\u4e00\u8d77\u3002\u9898\u6253 $O(1)$ \u4fee\u6539\uff0c$O(\\sqrt n)$\u67e5\u8be2\u7684\u5206\u5757\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u5230 $O(n\\sqrt n)$\uff0c\u6211\u770b\u51fa\u9898\u4eba\u5c06\u65f6\u95f4\u8df3\u7684\u8fd9\u4e48\u9ad8\u5c31\u662f\u4e3a\u4e86\u9002\u5e94 $O(n\\sqrt n \\log n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u4e5f\u5c31\u4e0d\u7528\u50cf\u7b2c\u5341\u5206\u5757\u4e00\u6837\u5927\u529b\u5361\u5e38\u4e86 qwq\u3002\n\n\u7ed9\u7ed9\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=200005,sn=1505;\nint n,m,s,l=1,r,a[maxn],idx[maxn],L[sn],R[sn],head[maxn],nxt[maxn],to[maxn],cnt,block;\nint pos[maxn],sum[sn],top;\nbool flag[maxn];\nlong long ans[maxn],gx[maxn];\nstruct query{\n\tint l,r,x,y,id;\n}p[maxn];\nstruct node{\n\tint ll,lr,rr,rl,x;\n\tbool type;\n\tlong long val;\n}sta[maxn],tmp;\nbool cmp(query x,query y){\n\treturn idx[x.x]==idx[y.x]?x.y<y.y:x.x<y.x;\n}\nvoid add(int u,int v){\n\tnxt[++cnt]=head[u],head[u]=cnt,to[cnt]=v;\n}\nvoid modify(int x,bool type){\n\tpos[x]=x,flag[x]=1,tmp.x=x;\n\tint last=x-1,next=x+1,Tmp=pos[last];\n\tbool flag1=(flag[last]&&L[idx[x]]!=x),flag2=(flag[next]&&R[idx[x]]!=x);\n\tif(!flag1&&!flag2) tmp.type=tmp.ll=tmp.rr=tmp.lr=tmp.rl=0,tmp.val=1;\n\telse{\n\t\ttmp.type=1;\n\t\tif(flag1&&flag2) {\n            tmp.val=(next-pos[last])*(pos[next]-last);\n            tmp.ll=pos[last],tmp.lr=last,pos[pos[last]]=pos[next];\n\t\t\ttmp.rr=pos[next],tmp.rl=next,pos[pos[next]]=Tmp;\n\t\t}else{\n\t\t\tif(flag1){\n                tmp.val=next-pos[last];\n                tmp.ll=x,tmp.lr=x,pos[x]=pos[last];\n                tmp.rr=pos[last],tmp.rl=last,pos[pos[last]]=x;\n\t\t\t}else{\n                tmp.val=pos[next]-last;\n                tmp.ll=x,tmp.lr=pos[x],pos[x]=pos[next]; \n                tmp.rr=pos[next],tmp.rl=next,pos[pos[next]]=x;\n\t\t\t}\n\t\t}\n\t}\n\tsum[idx[x]]+=tmp.val;\n\tif(type) sta[++top]=tmp;\n}\nlong long Q(int l,int r){\n\tlong long tot=0,len=0;\n\tif(idx[l]==idx[r]){\n\t\tfor(int i=l;i<=r;++i){\n\t\t\tif(flag[i]) ++len;\n\t\t\telse tot+=gx[len],len=0;\n\t\t}\n\t\treturn tot+gx[len];\n\t}\n\tfor(int i=l;i<=R[idx[l]];++i){\n\t\tif(flag[i]) ++len;\n\t\telse tot+=gx[len],len=0;\n\t}\n\tfor(int i=idx[l]+1;i<idx[r];++i){\n\t\tif(pos[L[i]]==R[i]) len+=R[i]-L[i]+1;\n\t\telse{\n\t\t\tif(flag[L[i]]) len+=pos[L[i]]-L[i]+1,tot-=gx[pos[L[i]]-L[i]+1];\n\t\t\ttot+=gx[len]+sum[i],len=0;\n\t\t\tif(flag[R[i]]) len+=R[i]-pos[R[i]]+1,tot-=gx[R[i]-pos[R[i]]+1];\n\t\t}\n\t}\n\tfor(int i=L[idx[r]];i<=r;++i){\n\t\tif(flag[i]) ++len;\n\t\telse tot+=gx[len],len=0;\n\t}\n\treturn tot+gx[len];\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\ts=sqrt(n);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",&a[i]);\n\t\tadd(a[i],i);\n\t\tidx[i]=(i+s-1)/s,gx[i]=1ll*i*(i+1)/2;\n\t\tif(idx[i]!=idx[i-1]){\n\t\t\tR[idx[i-1]]=i-1;\n\t\t\tL[idx[i]]=i;\n\t\t}\n\t}\n\tR[idx[n]]=n;\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d%d%d%d\",&p[i].l,&p[i].r,&p[i].x,&p[i].y);\n\t\tp[i].id=i;\n\t}\n\tsort(p+1,p+m+1,cmp);\n\tblock=0;\n\tfor(int i=1;i<=m;++i){\n\t\tif(idx[p[i].x]==idx[p[i].y]){\n\t\t\tmemset(flag,0,sizeof(flag));\n\t\t\tmemset(sum,0,sizeof(sum));\n\t\t\tmemset(pos,0,sizeof(pos));\n\t\t\tfor(int j=p[i].x;j<=p[i].y;++j) for(int k=head[j];k;k=nxt[k]) modify(to[k],0);\n\t\t\tans[p[i].id]=Q(p[i].l,p[i].r);\n\t\t\tcontinue;\n\t\t}\n\t\tl=R[idx[p[i].x]];\n\t\tif(idx[p[i].x]!=block){\n\t\t\tmemset(flag,0,sizeof(flag));\n\t\t\tmemset(sum,0,sizeof(sum));\n\t\t\tmemset(pos,0,sizeof(pos));\n\t\t\tr=l-1,block=idx[p[i].x];\n\t\t}\n\t\twhile(r<p[i].y) for(int j=head[++r];j;j=nxt[j]) modify(to[j],0);\n\t\twhile(l>p[i].x) for(int j=head[--l];j;j=nxt[j]) modify(to[j],1);\n\t\tans[p[i].id]=Q(p[i].l,p[i].r);\n\t\twhile(top){ \n\t        tmp=sta[top--],sum[idx[tmp.x]]-=tmp.val,flag[tmp.x]=0;\n\t\t\tif(tmp.type) pos[tmp.rr]=tmp.rl,pos[tmp.ll]=tmp.lr;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;++i) printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1629273395,
        "uid": 383791,
        "name": "Others",
        "ccfLevel": 7,
        "title": "P5386\u9898\u89e3"
    },
    {
        "content": "\u5173\u4e8e\u6211\u7528 $n\\sqrt n \\log n$ \u7684\u83ab\u961f\u5957\u534a\u7fa4\u4fe1\u606f\u7ef4\u62a4\u65b9\u5f0f\u8fc7\u4e86\u7684\u4e8b\u60c5.jpg\n\n\u8bb2\u4e00\u4e2a\u5f88\u5b9e\u7528\u7684\u8fd9\u4e00\u7c7b\u7684\u5361\u5e38\u65b9\u6cd5\u3002\n\n\u4e0b\u9762\u8ba4\u4e3a $q=n$\u3002\n\n\u8fd9\u9898\u7684\u83ab\u961f\u7b49\u4e00\u6bb5\u5e26\u8fc7\uff1a\u5728\u503c\u57df\u4e0a\u505a\u83ab\u961f\uff0c\u6bcf\u6b21\u5c06\u6240\u6709 $x\\le a_i\\le y$ \u7684 $i$ \u6807\u8bb0\u4e3a $1$\uff0c\u5426\u5219\u4e3a $0$\u3002\u5f97\u5230\u4e00\u4e2a $01$ \u5e8f\u5217\uff0c\u5f97\u51fa\u533a\u95f4 $[l,r]$ \u4e2d\u6240\u6709\u6781\u957f $1$ \u8fde\u7eed\u6bb5\uff0c\u8bbe\u5176\u957f\u5ea6\u4e3a $len$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u7684\u8d21\u732e\u5c31\u662f $\\dfrac {len(len+1)} 2$\u3002\u7b54\u6848\u5373\u4e3a\u533a\u95f4\u4e2d\u6240\u6709\u7684\u6781\u957f\u8fde\u7eed\u6bb5\u7684\u8d21\u732e\u4e4b\u548c\u3002\u6b63\u786e\u6027\u663e\u7136\uff1a\u672c\u9898\u7684\u9650\u5236\u6761\u4ef6\u7b49\u4ef7\u4e8e\u5b50\u6bb5\u4e2d\u6240\u6709\u6570 $\\in[x,y]$\uff0c\u5728\u4e00\u4e2a $1$ \u7684\u6781\u957f\u8fde\u7eed\u6bb5\u5185\u7684\u4efb\u610f\u5b50\u6bb5\u90fd\u662f\u5408\u6cd5\u7684\u3002\n\n\u6240\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u662f\u4ece\u5de6\u5f00\u59cb\u7684\u6781\u957f\u8fde\u7eed $1$ \u7684\u957f\u5ea6\uff0c\u4ece\u53f3\u5f00\u59cb\u7684\u6781\u957f\u8fde\u7eed $1$ \u7684\u957f\u5ea6\uff0c\u533a\u95f4\u662f\u5426\u5168\u90e8\u4e3a $1$ \u548c\u533a\u95f4\u7684\u7b54\u6848\u3002\n\n\u4f46\u662f\u7ebf\u6bb5\u6811\u7684\u5e38\u6570\u592a\u5927\u4e86\uff01\n\n\u6240\u4ee5\u8003\u8651\u5e8f\u5217\u5206\u5757\uff0c\u6bcf\u5757\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u8bbe\u5757\u5927\u5c0f\u4e3a $b$\uff0c\u90a3\u4e48\u66f4\u65b0\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\u4e3a $O(\\log b)$\u3002\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6563\u5757\u548c\u6574\u5757\u7684\u4fe1\u606f\u90fd\u4ece\u7ebf\u6bb5\u6811\u91cc\u9762\u67e5\u3002\n\n\u67e5\u8be2\u6574\u5757\u7684\u590d\u6742\u5ea6\u662f $O(1)$ \u7684\uff08\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u7684\u4fe1\u606f\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u8fd9\u65f6\u5019\u7684\u590d\u6742\u5ea6\u662f\n $O(\\dfrac {n^2} b+n\\sqrt n \\log b)$\u3002\n \n\u8bbe $b=n^k,k\\in(0,1]$\u3002\n\n\u90a3\u4e48\u590d\u6742\u5ea6\u662f $O(n^{2-k}+n^{1.5} k \\log n)$\u3002\n\n\u8981\u6700\u5c0f\u5316\u4e0a\u503c\uff0c\u63d0\u51fa\u4e00\u4e2a $n^{1.5}$\uff0c\u5f97\u51fa\u4e86 $O(n^{1.5}(\\max(n^{0.5-k},1) k \\log n))$\u3002\n\n\u663e\u7136\u4e0a\u67ff\u5728\u6e10\u8fdb\u610f\u4e49\u4e0b $k\\ge0.5$ \u65f6\u6700\u4f18\u3002\u3002\u800c\u663e\u7136 $k$ \u5e94\u5f53 $=0.5$ \u624d\u80fd\u4f7f\u4e0a\u67ff\u6700\u5c0f\u3002\u3002\n\n\u90a3\u5c82\u4e0d\u662f\u6ca1\u6709\u7528\uff1f\uff1f\n\n\u5f53\u7136\u4e0d\u662f\uff01\u6211\u4eec\u5c06\u74f6\u9888\u2014\u2014\u66f4\u65b0\u7ebf\u6bb5\u6811\u7684\u8fd0\u7b97\u6b21\u6570\u4e0b\u964d\u5230\u4e86 $\\log \\sqrt n=\\dfrac 1 2 \\log n$\uff01\n\n\u4f46\u8fd9\u6837\u4ecd\u7136\u8fc7\u4e0d\u4e86\u9898\u5440\u3002\u3002\n\n\u6240\u4ee5\u8981\u5728\u5408\u5e76\u4fe1\u606f\u4e0a\u641e\u4e00\u4e0b\u3002\n\n\u8bbe\u7ebf\u6bb5\u6811\u4e0a\u5de6\u513f\u5b50\u7684\u4ece\u53f3\u5f00\u59cb\u7684\u6781\u957f\u8fde\u7eed $1$ \u7684\u957f\u5ea6\u4e3a $a$\uff0c\u53f3\u513f\u5b50\u7684\u4ece\u5de6\u5f00\u59cb\u7684\u6781\u957f\u8fde\u7eed $1$ \u7684\u957f\u5ea6\u4e3a $b$\uff0c\u5de6\u513f\u5b50\u7684\u7b54\u6848\u4e3a $s1$\uff0c\u53f3\u513f\u5b50\u7684\u7b54\u6848\u4e3a $s2$\uff0c\u8be5\u8282\u70b9\u7684\u7b54\u6848\u4e3a $s$\uff0c\u90a3\u4e48\u6709\uff1a\n\n$s=s1+s2-\\dfrac {a(a+1)} 2-\\dfrac {b(b+1)} 2+-\\dfrac {(a+b)(a+b+1)} 2$\u3002\u8fd9\u4e2a\u67ff\u5b50\u7684\u610f\u4e49\u662f\u51cf\u53bb\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u8d21\u732e\u518d\u52a0\u4e0a\u4ed6\u4eec\u5408\u8d77\u6765\u7684\u8d21\u732e\u3002\n\n$=s1+s2+\\dfrac 1 2 (a^2+2ab+b^2+a+b-a^2-a-b^2-b)$\n\n$=s1+s2+\\dfrac 1 2(2ab)$\n\n$=s1+s2+ab$\u3002\n\n~~\u592a\u795e\u5947\u4e86\u3002~~\n\n\uff08upd\uff1a\u8fd9\u4e1c\u897f\u7406\u89e3\u4e3a\u4ece $a,b$ \u4e2d\u5206\u522b\u4e00\u4e2a $l,r$ \u66f4\u597d\u4e9b\uff09\n\n\u7136\u540e\u524a\u6389\u4e86\u4e00\u5927\u5757\u5e38\u6570\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int maxn=2e5+5;\nint a[maxn];\nint id[maxn];\nstruct ask\n{\n\tint w,l,r,x,y;\n}w[maxn];\nll ans[maxn];\nint read()\n{\n\tint s=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') ch=getchar();\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n\treturn s;\n}\nint len,n;\nconst int b=500;\nbool cmp(ask a,ask b)\n{\n\treturn (a.x/len^b.x/len)?a.x/len<b.x/len:((a.x/len&1)?a.y<b.y:a.y>b.y);\n}\nstruct node\n{\n\tint l,r;\n\tbool full;\n\tll s;\n\tfriend node operator +(const node &x,const node &y)\n\t{\n\t\tnode ret;\n\t\tret.s=x.s+y.s+1ll*x.r*y.l;\n\t\tret.l=x.l+x.full*y.l;\n\t\tret.r=y.r+y.full*x.r;\n\t\tret.full=x.full&y.full;\n\t\treturn ret;\n\t}\n};\nint wz[b+5];\nstruct segment_tree\n{\n\t#define ls w<<1\n\t#define rs ls|1\n\tstruct seg\n\t{\n\t\tint l,r;\n\t\tnode s;\n\t}t[b*4+5];\n\tvoid build(int w,int l,int r)\n\t{\n\t\tt[w].l=l,t[w].r=r;\n\t\tif(l<r)\n\t\t{\n\t\t\tint mid=l+r>>1;\n\t\t\tbuild(ls,l,mid);\n\t\t\tbuild(rs,mid+1,r);\n\t\t}\n\t\telse wz[l]=w;\n\t}\n\tnode ask()\n\t{\n\t\treturn t[1].s;\n\t}\n\tnode ask(int w,int l,int r)\n\t{\n\t\tif(t[w].l>=l&&t[w].r<=r) return t[w].s;\n\t\tif(t[ls].r>=l&&t[rs].l<=r) return ask(ls,l,r)+ask(rs,l,r);\n\t\tif(t[ls].r>=l) return ask(ls,l,r);\n\t\treturn ask(rs,l,r);\n\t}\n\tvoid add(int w,bool v)\n\t{\n\t\tw=wz[w];\n\t\tt[w].s=node({v,v,v,v});\n\t\tfor(w>>=1;w;w>>=1)\n\t\t{\n\t\t\tt[w].s.s=t[ls].s.s+t[rs].s.s+1ll*t[ls].s.r*t[rs].s.l;\n\t\t\tt[w].s.l=t[ls].s.l+t[ls].s.full*t[rs].s.l;\n\t\t\tt[w].s.r=t[rs].s.r+t[rs].s.full*t[ls].s.r;\n\t\t\tt[w].s.full=t[ls].s.full&t[rs].s.full;\n\t\t}\n\t}\n}t[maxn/b+5];\nint cnt;\nint fl[maxn],fr[maxn];\nint be[maxn];\nvoid init()\n{\n\tint i,j;\n\tfor(i=1;i<=n;i+=b)\n\t\tfl[++cnt]=i,fr[cnt]=min(i+b-1,n);\n\tfor(i=1;i<=cnt;i++)\n\t{\n\t\tfor(j=fl[i];j<=fr[i];j++)\n\t\t\tbe[j]=i;\n\t\tt[i].build(1,1,b);\n\t}\t\n}\nvoid add(int x,int v)\n{\n\tt[be[x]].add(x-fl[be[x]]+1,v);\n}\nint l=1,r;\nnode ask(int pl,int pr)\n{\n\tint bl=be[pl],br=be[pr];\n\tif(bl==br) return t[bl].ask(1,pl-fl[bl]+1,pr-fl[bl]+1);\n\tnode s=ask(pl,fr[bl]);\n\tfor(int i=bl+1;i<br;i++)\n\t\ts=s+t[i].ask();\n\treturn s+ask(fl[br],pr);\n}\nint main()\n{\n\tint i,m;\n\tn=read(),m=read();\n\tlen=n/(sqrt(m)*2/3);\n\tfor(i=1;i<=n;i++)\n\t\tid[a[i]=read()]=i;\n\tfor(i=0;i<m;i++)\n\t\tw[i].l=read(),w[i].r=read(),w[i].x=read(),w[i].y=read(),w[i].w=i;\n\tsort(w,w+m,cmp);\n\tinit();\n\tfor(i=0;i<m;i++)\n\t{\n\t\twhile(r<w[i].y) add(id[++r],1);\n\t\twhile(l<w[i].x) add(id[l++],0);\n\t\twhile(l>w[i].x) add(id[--l],1);\n\t\twhile(r>w[i].y) add(id[r--],0);\n\t\tans[w[i].w]=ask(w[i].l,w[i].r).s;\n\t}\n\tfor(i=0;i<m;i++)\n\t\tprintf(\"%lld\\n\",ans[i]);\n}\n```\n",
        "postTime": 1631258010,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5386 [Cnoi2019]\u6570\u5b57\u6e38\u620f"
    },
    {
        "content": "\u4e0d\u4f1a\u83ab\u961f+\u94fe\u8868\uff0c\u5199\u4e86\u4e2a\u83ab\u961f+\u5e76\u67e5\u96c6\uff0c\u8fc7\u4e86\u3002\n\n\u4e4d\u770b\u597d\u50cf\u4e24\u5c42\u9650\u5236\uff0c\u76f4\u63a5\u83ab\u961f\u662f $\\mathcal{O}(n^{5/3}\\log n)$\u3002\u5982\u679c\u83ab\u961f+\u7ebf\u6bb5\u6811 $\\mathcal{O}(n\\sqrt{n}\\log n)$ \u5e38\u6570\u592a\u5927\u4e0d\u80fd\u8fc7\uff0c\u90a3\u4e48\u5c31\u5f00\u53d1\u53e6\u4e00\u79cd\u5e38\u6570\u5c0f\u7684 $\\mathcal{O}(n\\sqrt{n}\\log n)$\u3002\n\n\u5148\u5bf9\u503c\u57df\u5206\u5757\uff0c\u5bf9\u4e8e\u6bcf\u5757\u8dd1\u56de\u6eda\u83ab\u961f\uff0c\u4f7f\u5f97\u5e76\u67e5\u96c6\u80fd\u591f\u64a4\u9500\u4e0a\u6b21\u64cd\u4f5c\u3002\u63a5\u4e0b\u6765\u8003\u8651 $[l,r]$ \u7684\u9650\u5236\u3002\u82e5\u533a\u95f4\u6574\u4e2a\u88ab\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\u6240\u6709\u6570\u5bf9\u3002\u5426\u5219\uff0c\u6211\u4eec\u5148\u628a\u5305\u542b $l$ \u548c $r$ \u7684\u533a\u95f4\u6c42\u51fa\u6765\uff0c\u8bbe $l_1\\le l\\le r_1,l_2\\le r\\le r_2$\uff0c\u7279\u5224\u6389\u4e24\u4e2a\u533a\u95f4\u540e\u52a0\u4e0a $(r_1,l_2)$ \u7684\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u662f $\\Large \\frac {L(L+1)}{2}$\u3002\u6211\u4eec\u5728\u5e76\u67e5\u96c6\u4e0a\u7ef4\u62a4\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9 $[l,r]$\u3002\u6c42\u4e00\u6bb5\u533a\u95f4\u5305\u542b\u533a\u95f4\u7684\u7b54\u6848\u76f8\u5f53\u4e8e\u6bcf\u6b21\u6211\u4eec\u5728\u4e00\u6bb5\u533a\u95f4\u7684\u6839\u4e0a\u52a0\u4e00\u4e0b\uff0c\u7136\u540e\u533a\u95f4\u6c42\u548c\u3002\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u7279\u5224\u6389\u4e86\u4e24\u4e2a\u76f8\u4ea4\u7684\u533a\u95f4\uff0c\u6240\u4ee5\u8fd9\u6837\u4e0d\u7528\u7ba1\u4e00\u6bb5\u533a\u95f4\u7684\u6839\u5728\u54ea\u91cc\u3002\n\n\u8fd9\u6837\u7528\u5e8f\u5217\u5206\u5757\u6765\u7ef4\u62a4\u5355\u70b9\u52a0\u533a\u95f4\u67e5\uff0c\u65f6\u95f4 $\\mathcal{O}(n\\sqrt{n}\\log n)$\u3002\u5b9e\u9645\u5e38\u6570\u5f88\u5c0f\uff0c\u6700\u5927\u7684\u70b9\u4e5f\u53ea\u6709 $\\text{5.76s}$\uff0c\u5e38\u6570\u5927\u6982\u662f\u94fe\u8868\u7684 $2\\sim 3$ \u500d\u3002",
        "postTime": 1583193236,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5386 \u3010[Cnoi2019]\u6570\u5b57\u6e38\u620f\u3011"
    },
    {
        "content": "### \u5199\u5728\u524d\u9762\u7684\u5e9f\u8bdd\n~~\u81ea\u5df1\u5199\u4e86\u4e24\u5929\uff0c\u8c03\u4e86\u534a\u5929\uff0c\u7136\u540ejzp\u6765\u5e2e\u5fd9\u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u7ec8\u4e8e\u8fc7\u4e86~~\n\n~~\u8fc7\u7684\u65f6\u5019\u8033\u673a\u91cc\u653e\u7740\u6850\u59e5\u7237\u7684bgm\uff0c\u5c31\u5dee\u54ed\u51fa\u6765\u4e86~~\n# \u9898\u89e3\n\u9996\u5148\u8fd9\u9898\u6ca1\u6709\u90e8\u5206\u5206\u5dee\u8bc4\uff08\n\n1. \u503c\u57df\u4e0d\u53d8\n\n\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u5168\u90e8\u90fd\u5728\u503c\u57df\u5185\uff08\u957f\u5ea6\u4e3a $ len $\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u662f $ \\frac {len \\times (len+1)} 2 $\u3002\n\n\u7136\u540e\u6211\u4eec\u5f88\u5feb\u80fd\u53d1\u73b0\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u5c31\u662f\u8fd9\u6837\u7684\u533a\u95f4\u7684\u7b54\u6848\u4e4b\u548c\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u80fd\u7528\u7ebf\u6bb5\u6811\u505a\u5230 $ O(logn) $\n\n2. \u533a\u95f4\u4e0d\u53d8\n\n\u6b64\u65f6\u6211\u4eec\u5728\u503c\u57df\u4e0a\u8fdb\u884c\u83ab\u961f\u3002\n\n\u8bb0\u5f55\u6bcf\u4e2a\u503c\u5bf9\u5e94\u7684\u533a\u95f4\u4e0b\u6807\uff0c\u7136\u540e\u53ef\u4ee5\u89c6\u4e3a\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\n1. \u52a0\u8fb9\n2. \u8be2\u95ee\u6240\u6709\u8054\u901a\u5757\u7684\u8d21\u732e\u4e4b\u548c\n\n\u6211\u4eec\u5f53\u7136\u80fd\u591f\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u505a\u5230 $ O(m\\sqrt n\\log n) $\u3002\n\n\u4f46\u4ed4\u7ec6\u60f3\u60f3\uff0c\u628a\u83ab\u961f\u6539\u4e3a\u56de\u6eda\u83ab\u961f\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u5e76\u67e5\u96c6\u505a\u5230 $ O(m\\sqrt n) $\u3002\n\n3. \u539f\u95ee\u9898\n\n\u5bf9\u5e8f\u5217\u5206\u5757\uff0c\u5728\u83ab\u961f\u65f6\u7ef4\u62a4\u5757\u5185\u7b54\u6848\u548c\u5e76\u67e5\u96c6\u5373\u53ef\u3002\n\n\u6574\u5757\u548c\u6563\u5757\u4e4b\u95f4\u7684\u7b54\u6848\u4f7f\u7528\u7b97\u6cd5 $ 1 $ \u7684\u65b9\u6cd5\u5373\u53ef\u6c42\u89e3\u3002\n\n\u590d\u6742\u5ea6 $ O(m\\sqrt n) $\uff0c\u4f46\u662f\u56e0\u4e3a\u6211\u5e76\u67e5\u96c6\u6302\u6389\u4e86\u6240\u4ee5\u53ea\u52a0\u4e86\u4e00\u4e2a\u4f18\u5316\uff08\n\n\u4e0d\u8fc7\u8fd9\u9898\u6570\u636e\u597d\u50cf\u6ca1\u5361\uff0c$ O(m\\sqrt n\\log n) $ \u8fc7\u53bb\u4e86\u3002\n\n\u9644\u4e0a AC \u524d\u7684\u6700\u540e\u4e00\u7248\u4ee3\u7801\uff1a\n```cpp\n#include<algorithm>\n#include<cstdio>\nconst int M=2e5+5,p=448,SIZ=p+5;\nint n,m,len,a[M];long long ans[M];\nint L[SIZ],R[SIZ],id[M],pos[M];\nint top,valp[M],vald[M],vals[M];\nbool vs[SIZ],vis[SIZ][SIZ];int t,pv[M],as[M];\nstruct Query{\n\tint L,R,x,y,p,id;\n\tinline bool operator<(const Query&it)const{\n\t\treturn p==it.p?y<it.y:x<it.x;\n\t}\n}q[M];\nstruct data{\n\tint L,R,len;long long ans;\n\tinline data operator*(const data&it)const{\n\t\treturn (data){L+(L==len)*it.L,(it.R==it.len)*R+it.R,len+it.len,ans+it.ans+R*it.L};\n\t}\n\tinline void AddL(const bool&val){\n\t\tif(val){\n\t\t\tans+=++L;if(R==len)++R;\n\t\t}\n\t\telse L=0;++len;\n\t}\n\tinline void AddR(const bool&val){\n\t\tif(val){\n\t\t\tans+=++R;if(L==len)++L;\n\t\t}\n\t\telse R=0;++len;\n\t}\n};\nstruct Block{\n\tint ans,len,f[SIZ],siz[SIZ];bool v[SIZ];\n\tinline void init(){\n\t\tfor(register int i=0;i<=len;++i)siz[f[i]=i]=1,v[i]=false;ans=0;\n\t}\n\tinline void merge(const int&u,const int&v){\n\t\tif(siz[u]>siz[v])siz[f[v]=u]+=siz[v];\n\t\telse siz[f[u]=v]+=siz[u];\n\t}\n\tinline int Find(const int&u){\n\t\treturn f[u]==u?u:f[u]=Find(f[u]);\n\t}\n\tinline void Add(const int&id){\n\t\tans+=siz[Find(id-1)]*siz[Find(id)];merge(Find(id-1),Find(id));v[id]=true;\n\t}\n\tinline data Q(){\n\t\treturn (data){siz[Find(0)]-1,siz[Find(len)]-1,len,ans};\n\t}\n}B[SIZ];\ninline void Update(const int&bid,const int&pos){\n\tif(vis[pos][bid])return;vis[pos][bid]=true;\n\tif(!vs[pos])++t,vs[pos]=true,as[t]=B[pv[t]=pos].ans;\n\t++top;vals[top]=B[valp[top]=pos].siz[vald[top]=bid];\n}\ninline void Modify(const int&l,const int&r){\n\tregister int i,p;\n\tfor(i=l;i<=r;++i){\n\t\tp=pos[a[i]];Update(B[p].Find(id[a[i]]),p);Update(B[p].Find(id[a[i]]-1),p);\n\t}\n\tfor(i=l;i<=r;++i)B[pos[a[i]]].Add(id[a[i]]);\n}\ninline void clear(const int&L,const int&R){\n\tfor(register int i=L;i<=R;++i)B[pos[a[i]]].v[id[a[i]]]=false;\n}\ninline void Add(const int&val){\n\tB[pos[val]].Add(id[val]);\n}\ninline long long Q(const int&l,const int&r){\n\tconst int&q=pos[l],&p=pos[r];\n\tregister int i;data ans=(data){0,0,0,0};\n\tif(q==p){\n\t\tfor(i=l;i<=r;++i)ans.AddR(B[q].v[id[i]]);\n\t}\n\telse{\n\t\tfor(i=q+1;i<p;++i)ans=ans*B[i].Q();\n\t\tfor(i=R[q];i>=l;--i)ans.AddL(B[q].v[id[i]]);\n\t\tfor(i=L[p];i<=r;++i)ans.AddR(B[p].v[id[i]]);\n\t}\n\treturn ans.ans;\n}\ninline void init(){\n\tregister int i,x;\n\tscanf(\"%d%d\",&n,&m);len=(n+p-1)/p;\n\tfor(i=1;i<=n;++i){\n\t\tscanf(\"%d\",&x);a[x]=i;\n\t\tpos[i]=(i-1)/p+1;id[i]=(i-1)%p+1;\n\t}\n\tfor(i=1;i<=len;++i){\n\t\tL[i]=R[i-1]+1;R[i]=p*i;\n\t\tif(i==len)R[i]=n;B[i].len=R[i]-L[i]+1;\n\t}\n\tfor(i=1;i<=m;++i){\n\t\tscanf(\"%d%d%d%d\",&q[i].L,&q[i].R,&q[i].x,&q[i].y);\n\t\tq[i].p=pos[q[i].x];q[i].id=i;\n\t}\n}\ninline void Mo_queue(){\n\tregister int i,j,b,d,id;\n\tstd::sort(q+1,q+m+1);\n\tfor(i=1;i<=m;++i){\n\t\tconst int&QL=q[i].x,&QR=q[i].y;\n\t\tif(i==1||q[i].p!=q[i-1].p){\n\t\t\tfor(j=1;j<=len;++j)B[j].init();id=q[i].p*p;\n\t\t}\n\t\tif(pos[QL]==pos[QR])Modify(QL,QR);\n\t\telse{\n\t\t\twhile(id<QR)Add(a[++id]);\n\t\t\tModify(QL,q[i].p*p);\n\t\t}\n\t\tans[q[i].id]=Q(q[i].L,q[i].R);\n\t\tdo{\n\t\t\tb=valp[top];d=vald[top];\n\t\t\tB[b].f[d]=d;B[b].siz[d]=vals[top];vis[b][d]=false;\n\t\t}while(--top);\n\t\tdo B[pv[t]].ans=as[t],vs[pv[t]]=false;while(--t);\n\t\tif(pos[QL]==pos[QR])clear(QL,QR);else clear(QL,q[i].p*p);\n\t}\n}\nsigned main(){\n\tinit();Mo_queue();\n\tfor(register int i=1;i<=m;++i)printf(\"%lld\\n\",ans[i]);\n}\n```",
        "postTime": 1619501471,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u636e\u7ed3\u6784 \u56de\u6eda\u83ab\u961f+\u5e76\u67e5\u96c6 P5386\u9898\u89e3"
    },
    {
        "content": "## \u524d\u8a00\n\u5199\u5b8c\u4e86\u7b2c\u5341\u5206\u5757\uff0c\u53d1\u73b0\u8fd9\u4e2a\u9898\u548c\u7b2c\u5341\u5206\u5757\u5f88\u50cf\uff0c\u4e8e\u662f\u60f3\u6765\u5207\u4e00\u4e0b\uff0c\u7ed3\u679c\u53d1\u73b0\u6c34\u7684\u4e00\u6279\n## \u524d\u7f6e\u77e5\u8bc6\n[\u7b2c\u5341\u5206\u5757\u9898\u89e3](https://www.luogu.com.cn/blog/111055/solution-p6578)\n## \u6b63\u7247\n~~\u76f8\u4fe1\u4f60\u5df2\u7ecf\u4f1a\u4e86\uff0c\u6211\u5c31\u4e0d\u8bb2\u4e86(~~\n\n\u7531\u4e8e\u6ca1\u6709\u4fee\u6539\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0a\u56de\u6eda\u83ab\u961f\u4e86\uff0c\u7ef4\u62a4\u503c\u57df\uff0c\u6309\u7167 $x,y$ \u4f5c\u4e3a\u7aef\u70b9\u6392\u5e8f\uff0c$y$ \u5355\u8c03\u589e\u4e14 $x$ \u5728\u540c\u4e00\u5757\u4e2d\u3002\n\n\u7136\u540e\u5957\u8def\u7ef4\u62a4 $x$ \u6240\u5728\u5757\u53f3\u7aef\u70b9\u5230 $y$ \u8fd9\u6bb5\u503c\u57df\u5bf9\u5e94\u7684 $1$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u518d\u52a0\u4e0a\u5de6\u8fb9\u7684 $1$\u3002\u8fd9\u8fb9\u7ef4\u62a4 $1$ \u7684\u65b9\u6cd5\u8bf7\u770b\u524d\u7f6e\u77e5\u8bc6\u3002\n\n\u672c\u6765\u6211\u4ee5\u4e3a $l$ \u548c $r$ \u5728\u540c\u4e00\u5757\u6bd4\u8f83\u96be\u641e\uff0c\u540e\u6765\u53d1\u73b0\u7ed9\u51fa\u7684\u662f\u4e00\u4e2a\u6392\u5217\uff0c\u4e8e\u662f\u5176\u5b9e\u4e5f\u5f88\u597d\u641e\uff0c\u76f4\u63a5\u628a\u5bf9\u5e94\u533a\u95f4\u63d0\u51fa\u6765\u6392\u4e2a\u5e8f\uff0c\u8fd9\u9898\u5c31\u8fd9\u4e48\u5feb\u4e50\u5730\u505a\u5b8c\u4e86\u3002\n## \u95f2\u8bdd\n\u76ee\u524d\u7684\u6700\u4f18\u89e3\uff0c\u4f60\u4eec\u5e38\u6570\u600e\u4e48\u90fd\u8fd9\u4e48\u5927\u554a/yun\n\n\u9ed1\u9898-\u9ed1\u9898\u7684\u53cc\u500d\u7ecf\u9a8c\u5c31\u662f\u723d\u554a\uff08\n\n\u4e0d\u61c2\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u9898\u8303\u56f4\u6bd4 Ynoi \u8fd8\u5c0f\u4f46\u662f\u662f 7s\u2026\u2026\n\n\u62d2\u7edd\u6284\u88ad \u4e0d\u7ed9\u4ee3\u7801 \u8981\u4ee3\u7801\u8bf7\u79c1\u4fe1\uff08",
        "postTime": 1607930936,
        "uid": 111055,
        "name": "dead_X",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5386 \u3010[Cnoi2019]\u6570\u5b57\u6e38\u620f\u3011"
    }
]