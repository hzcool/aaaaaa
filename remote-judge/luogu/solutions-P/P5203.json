[
    {
        "content": "## Solution\n\n### \u524d\u8bb0\n\n\u7b2c\u4e00\u6b21\u60f3\u7684\u65f6\u5019\u731c\u4e86\u5404\u79cd\u7384\u5b66\u7ed3\u8bba\uff0c\u4f46\u4e5f\u6ca1\u60f3\u660e\u767d\uff0c\u540e\u6765\u770b\u4e86\u5b98\u65b9\u89e3\u6cd5\u4e5f\u6ca1\u592a\u61c2\uff0c\u540e\u6765\u4ed4\u7ec6\u63a8\u6572\u540e\u624d\u60f3\u660e\u767d\u3002\n\n### \u7ed3\u8bba\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u666e\u901a\u8fb9\u6784\u6210\u4e00\u68f5\u6811\u30022\u6761\u975e\u666e\u901a\u8fb9\u52a0\u6811\u8fb9\u80fd\u5f62\u6210\u73af\uff0c\u6761\u4ef6\u5982\u4e0b\u3002\n\n\u4e24\u6761\u975e\u666e\u901a\u8fb9\u8fde\u63a5\u6811\u4e0a\u4e24\u70b9\uff0c\u80fd\u6210\u73af\u5f53\u4e14\u4ec5\u5f53\uff0c\u4e00\u5bf9\u70b9\u5728\u6811\u4e0a\u7684\u8def\u5f84\u4e0e\u53e6\u4e00\u5bf9\u70b9\u5728\u6811\u4e0a\u7684\u8def\u5f84\u6709\u91cd\u5408\u3002\u753b\u4e2a\u56fe\u89e3\u91ca+\u7c97\u7cd9\u8bc1\u660e\u4e00\u4e0b\u3002\n\n![\u56fe\u89e3](https://i.loli.net/2019/02/24/5c724fab85694.png)\n\n### \u8f6c\u5316\n\n\u95ee\u9898\u53d8\u4e3a\u6c42\u6709\u591a\u5c11\u4e2a\u8fd9\u6837\u7684\u6811\u4e0a\u8def\u5f84\u4e4b\u95f4\u76f8\u4e92\u91cd\u5408\u3002\n\n### \u62c6\u8def\u5f84\n\n\u628a\u8def\u5f84\u62c6\u6210\u4e24\u90e8\u5206\uff0c\n\n1. $u->lca(u,v)$\n2. $v->lca(u,v)$\n\n\u8fd9\u6837\u5c31\u53d8\u6210\u4e24\u6761\u76f4\u4e0a\u76f4\u4e0b\u7684\u8def\u5f84\u4e86\uff0c\u4e5f\u5c31\u597d\u8bb0\u6570\u4e86\u3002\n\n### \u8ba1\u6570\n\n\u6211\u4eec\u60f3\u5728\u4e00\u4e2a\u5e8f\u5217\u4e0a\uff0c\u6211\u4eec\u5982\u4f55\u8ba1\u7b97\u91cd\u53e0\u5e8f\u5217\u7684\u4e2a\u6570\u3002\u4e3a\u4e86\u907f\u514d\u7b97\u91cd\u590d\uff0c\u6211\u4eec\u5c31\u8ba1\u7b97\u5206\u522b\u6bcf\u4e00\u6761\u7ebf\u6bb5\uff0c\u4e0e\u81ea\u5df1\u91cd\u53e0\u4e14\u5f00\u59cb\u5728\u81ea\u5df1\u4e4b\u540e\u7684\uff0c\u52a0\u8d77\u6765\u5373\u53ef\u3002\u5c31\u662f\uff08\u5f00\u59cb\u5728\u7ebf\u6bb5\u53f3\u7aef\u70b9\u524d\u7684\uff09-\uff08\u5f00\u59cb\u5728\u7ebf\u6bb5\u5de6\u7aef\u70b9\u524d\u7684\uff09\u3002\n\n\u5bf9\u4e8e\u6811\u4e0a\u95ee\u9898\u540c\u6837\u53ef\u4ee5\u8fd9\u6837\u505a\u3002\u6211\u4eec\u628a\u6bcf\u4e00\u6761\u8fb9\u548c\u5b83\u5411\u4e0b\u5bf9\u5e94\u7684\u70b9\u7ed1\u5b9a\u5728\u4e00\u8d77\u3002\u540c\u6837\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u8ba1\u7b97\n\n\uff08\u5f00\u59cb\u5728$u/v$\u7684\uff09-\uff08\u5f00\u59cb\u5728$lca(u,v)$\u7684\uff09\u3002\u56e0\u4e3a\u4ece\u4e00\u4e2a\u70b9\u5411\u4e0a\u6709\u4e14\u53ea\u6709\u4e00\u6761\u8def\u5f84\uff0c\u6240\u4ee5\u6240\u6709\u548c\u5b83\u91cd\u53e0\u7684\u8def\u5f84\uff0c\u8d77\u70b9\u90fd\u5728lca\u548c\u5b83\u672c\u8eab\u4e4b\u95f4\u3002 \n\n### \u53bb\u91cd\n\n1. \u5982\u679c\u4e00\u4e2a\u8def\u5f84\u4e0e\u4e24\u8fb9\u7684\u8def\u5f84\u5206\u522b\u90fd\u76f8\u4ea4\uff0c\u90a3\u5b83\u5c31\u4f1a\u88ab\u8ba1\u7b97\u4e24\u6b21\u3002\u6211\u4eec\u9700\u8981\u51cf\u6389\u91cd\u590d\u7684\u3002\u65b9\u6cd5\u5c31\u662f\u7528map\uff0c\u6211\u4eec\u8bb0\u5f55topx\uff0ctopy\uff08top\u5c31\u662f\u5c5e\u4e8e\u7956\u5148\u5411\u4e0b\u7684\u54ea\u4e00\u652f\uff09\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u540c\uff0c\u5c31\u8bc1\u660e\u4ed6\u4eec\u662f\u4e24\u4fa7\u76f8\u4ea4\u3002\u8981\u51cf\u53bb\u3002\u5bf9\u4e8e\u4e00\u5bf9(topx,topy),\u6211\u4eec\u8981\u51cf\u53bb$(\u51fa\u73b0\u6b21\u6570)*(\u51fa\u73b0\u6b21\u6570-1)/2$\n\n2. \u5982\u679c\u4e24\u6761\u76f4\u4e0a\u76f4\u4e0b\u7684\u8def\u5f84\u4ed6\u4eec\u5f00\u59cb\u5728\u540c\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e00\u5bf9\u5c31\u4f1a\u88ab\u7b97\u4e24\u6b21\uff0c\u76f8\u5f53\u4e8e$n * n$\u6b21\uff0c\u4f46\u5176\u5b9e\u53ea\u6709\n\n   $n * (n-1)/2$\u6b21\uff0c\u6240\u4ee5\u8981\u51cf\u53bb\u591a\u4f59\u7684\u3002\n\n### \u590d\u6742\u5ea6O(nlogn)\n\nLca\uff0ctop\u90fd\u662flog\u590d\u6742\u5ea6\u3002\n\n## Code\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <vector>\n#include <map>\n#define MAXN 200005\nusing namespace std;\n\nvector<int>G[MAXN];\nint n,m,cnt;\nint a[MAXN],b[MAXN];\nint fa[MAXN][20],dep[MAXN];\n\nvoid dfs(int u,int father,int depth)\n{\n    fa[u][0]=father;dep[u]=depth;\n    for(int i=1;(1<<i)<=depth;i++)\n    {\n        fa[u][i]=fa[fa[u][i-1]][i-1];\n    }\n    for(int i=0;i<G[u].size();i++)\n    {\n        int v=G[u][i];\n        if(v==father)continue;\n        dfs(v,u,depth+1);\n    }\n}\n\nint lca(int u,int v)\n{\n    if(dep[u]<dep[v])swap(u,v);\n    for(int i=18;i>=0;i--)\n    {\n        if(dep[fa[u][i]]>=dep[v])\n        {\n            u=fa[u][i];\n        }\n    }\n    if(u==v)return u;\n    for(int i=18;i>=0;i--)\n    {\n        if(fa[u][i]!=fa[v][i])\n        {\n            u=fa[u][i];\n            v=fa[v][i];\n        }\n    }\n    return fa[u][0];\n}\n\nint GetTop(int u,int anc)\n{\n    if(u==anc)return -1;\n    for(int i=18;i>=0;i--)\n    {\n        if(dep[fa[u][i]]>dep[anc])\n            u=fa[u][i];\n    }\n    return u;\n}\n\nmap<pair<int,int>,int>Q;\nint sum[MAXN],siz[MAXN];\nlong long ans=0;\n\nvoid dfs2(int u,int father,int cur)\n{\n    siz[u]=cur;\n    for(int i=0;i<G[u].size();i++)\n    {\n        int v=G[u][i];\n        if(v==father)continue;\n        dfs2(v,u,cur+sum[v]);\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n-1;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        G[x].push_back(y);\n        G[y].push_back(x);\n    }\n    dfs(1,0,1);\n    for(int i=n;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a[i],&b[i]);\n        int anc=lca(a[i],b[i]);\n        int topx=GetTop(a[i],anc);\n        int topy=GetTop(b[i],anc);\n        if(topx!=-1)\n        {\n            sum[topx]++;\n            ans-=sum[topx];\n        }\n        if(topy!=-1)\n        {\n            sum[topy]++;\n            ans-=sum[topy];\n        }\n        if(topx!=-1 && topy!=-1)\n        {\n            if(topx>topy)swap(topx,topy);\n            ans-=Q[make_pair(topx,topy)];\n            Q[make_pair(topx,topy)]++;\n        }\n    }\n    dfs2(1,1,0);\n    for(int i=n;i<=m;i++)\n    {\n        ans+=siz[a[i]]+siz[b[i]]-2*siz[lca(a[i],b[i])];\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1550995491,
        "uid": 63925,
        "name": "joe19025",
        "ccfLevel": 0,
        "title": "LCA+DFS\u2014\u2014P5203 [USACO19JAN]Exercise Route"
    },
    {
        "content": "**\u9898\u76ee\u5927\u610f\uff1a**\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\uff0c\u5176\u4e2d $n-1$ \u6761\u8fb9\u4e3a\u666e\u901a\u8fb9\uff0c\u8fd9\u4e9b\u666e\u901a\u8fb9\u6784\u6210\u4e86\u4e00\u68f5\u6811\uff0c\u5269\u4e0b\u7684\u8fb9\u4e3a\u7279\u6b8a\u8fb9\u3002\u95ee\u56fe\u4e2d\u6709\u591a\u5c11\u7b80\u5355\u73af\u6070\u5305\u542b\u4e24\u6761\u7279\u6b8a\u8fb9\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\le n\\le 2\\times10^5,1\\le m\\le 2\\times 10^5,m\\ge n-1,1\\le a_i,b_i\\le n$ .\n\n> \u77e5\u8bc6\u50a8\u5907\uff1aLCA\n\n> \u9898\u76ee\u96be\u5ea6\uff1a\u7701\u9009/USACO Platinum\n\n**\u89e3\u6790\uff1a**\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u7b80\u5355\u73af\u7684\u5f62\u5f0f\u662f\u4e24\u6761\u7279\u6b8a\u8fb9\u52a0\u4e0a\u82e5\u5e72\u6811\u4e0a\u8fb9\u3002\u5982\u679c\u8bbe\u8fd9\u4e24\u6761\u7279\u6b8a\u8fb9\u4e3a  $(u_1,v_1),(u_2,v_2)$ \uff0c\u5f53\u4e14\u4ec5\u5f53\u6811\u4e0a\u8def\u5f84 $[u_1,v_1],[u_2,v_2]$ \u6709\u8fb9\u91cd\u5408\u65f6\u624d\u80fd\u6784\u9020\u51fa\u7b80\u5355\u73af\u3002\n\n\u4e0b\u9762\u601d\u8003\u5982\u4f55\u5bf9\u91cd\u5408\u7684\u6811\u4e0a\u8def\u5f84\u8fdb\u884c\u8ba1\u6570\u3002\u5148\u8003\u8651\u4e00\u6761\u94fe\u4e0a\u7684\u60c5\u51b5\uff0c\u5373\u5e8f\u5217\u4e0a\u8ba1\u7b97\u91cd\u5408\u533a\u95f4\u7684\u6570\u91cf\u3002\u53ef\u4ee5\u626b\u4e00\u904d\u5e8f\u5217\uff0c\u5bf9\u4e8e\u5f53\u524d\u533a\u95f4 $[l_i,r_i]$ \uff0c\u8ba1\u7b97\u5176\u4ed6\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u88ab\u8be5\u533a\u95f4\u5305\u542b\u7684\u6570\u91cf\u5373\u53ef\u3002\n\n\u6811\u4e0a\u8def\u5f84\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u5c06 $[u,v]$ \u62c6\u5206\u4e3a $[u,L],[v,L]$ \uff0c\u5176\u4e2d $L$ \u4e3a $u,v$ \u7684 LCA \u3002\u8fd9\u6837\u6bcf\u4e2a $[u,v]$ \u5c31\u88ab\u62c6\u5206\u4e3a\u4e86\u4e24\u4e2a\u94fe\u4e0a\u7684\u60c5\u51b5\uff0c\u7c7b\u4f3c\u5904\u7406\u5e8f\u5217\u7684\u65b9\u6cd5\u5c31\u53ef\u4ee5\u8ba1\u6570\u3002\n\n\u7136\u800c\u8fd9\u53ef\u80fd\u5e26\u6765\u4e00\u5b9a\u91cd\u590d\uff1a\n\n- $[u_i,v_i],[u_j,v_j]$ \u5728\u4e24\u6761\u94fe\u4e0a\u90fd\u6709\u4ea4\uff1a\n\n\u8003\u8651 $[u,L],[v,L]$ \u94fe\u4e0a $L$ \u7684\u513f\u5b50 topx, topy \uff0c\u90a3\u4e48\u4e24\u6761\u94fe\u90fd\u6709\u4ea4\u7b49\u4ef7\u4e8e $i,j$ \u7684 topx, topy \u76f8\u540c\u3002\u7528 map \u5b58\u6709\u76f8\u540c topx, topy \u7684 $[u,v]$ \u6570\u91cf $k$ \uff0c\u7b54\u6848\u51cf\u53bb $\\binom{k}{2}$ \u5373\u53ef\u3002\n\n- \u67d0\u6761\u94fe\u4e0a\u7684\u8d77\u59cb\u70b9\u76f8\u540c\uff1a\n\n\u82e5\u8fd9\u4e2a\u8d77\u59cb\u70b9\u6709 $k$ \u6761\u94fe\uff0c\u90a3\u4e48\u4f1a\u7b97 $k^2$ \u6b21\uff0c\u6211\u4eec\u5e0c\u671b\u7b97 $\\binom k2$ \u6b21\uff0c\u51cf\u53bb\u7b97\u591a\u7684\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\log n)$ .\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);++i)\n#define per(i,a,b) for(int i=(a);i>=(b);--i)\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define ll long long\nusing namespace std;\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n    while (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n    return x*f;\n}\nconst int N=2e5+5;\nint n,m,fa[N][20],Log[N],dep[N];\nint a[N],b[N],L[N],siz[N],sum[N];\nll ans;\nvector <int> G[N];\nvoid dfs(int u,int f){\n    dep[u]=dep[f]+1,fa[u][0]=f;\n    for(int x:G[u])if(x!=f)dfs(x,u);\n}\nint lca(int x,int y) {\n\tif(dep[x]<dep[y])swap(x,y);\n\twhile(dep[x]>dep[y]){\n\t    x=fa[x][Log[dep[x]-dep[y]]];\n\t}\n    if(x==y)return x;\n    per(i,18,0){\n        if(fa[x][i]!=fa[y][i]){\n            x=fa[x][i];\n            y=fa[y][i];\n        }\n    }\n    return fa[x][0];\n}\nint Top(int x,int anc){\n    if(x==anc)return -1;\n    per(i,18,0){\n        if(dep[fa[x][i]]>dep[anc])x=fa[x][i];\n    }\n    return x;\n}\nmap <pii,int> mp;\nvoid dfs2(int u,int f,int now){\n    siz[u]=now;\n    for(int v:G[u])if(v!=f){\n        dfs2(v,u,now+sum[v]);\n    }\n}\nvoid init(){\n    Log[0]=-1;\n    rep(i,1,n)Log[i]=Log[i>>1]+1;\n    rep(i,1,18){\n        rep(j,1,n)fa[j][i]=fa[fa[j][i-1]][i-1];\n    }\n}\nint main(){\n    //freopen(\"disrupt.in\",\"r\",stdin);\n    //freopen(\"disrupt.out\",\"w\",stdout);\n    n=read(),m=read();\n    rep(i,1,n-1){\n        int u=read(),v=read();\n        G[u].pb(v),G[v].pb(u);\n    }\n    dfs(1,0);\n    init();\n    rep(i,n,m){\n        a[i]=read(),b[i]=read();\n        L[i]=lca(a[i],b[i]);\n    }\n    rep(i,n,m){\n        int topx=Top(a[i],L[i]),topy=Top(b[i],L[i]);\n        if(topx!=-1){\n            sum[topx]++;\n            ans-=sum[topx];\n        }\n        if(topy!=-1){\n            sum[topy]++;\n            ans-=sum[topy];\n        }\n        if(topx!=-1&&topy!=-1){\n            if(topx>topy)swap(topx,topy);\n            ans-=mp[{topx,topy}];\n            mp[{topx,topy}]++;\n        }\n        //cout<<i<<\" \"<<topx<<\" \"<<topy<<\" \"<<ans<<endl;\n    }\n    dfs2(1,0,0);\n    rep(i,n,m){\n        ans+=siz[a[i]]+siz[b[i]]-2*siz[L[i]];\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1625621048,
        "uid": 218501,
        "name": "ETHANK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5203 [USACO19JAN]Exercise Route P"
    },
    {
        "content": "\n\u4ec0\u4e48\u65f6\u5019,\u4e24\u6761\u975e\u5e38\u89c4\u8fb9\u53ef\u4ee5\u5728\u6811\u4e0a\u7ec4\u6210\u4e00\u4e2a\u7b80\u5355\u73af?\n\u5047\u8bbe\u8fd9\u6761\u4e24\u8fb9\u5206\u522b\u4e3a $(u_1,v_1),(u_2,v_2)$ ,\u7ecf\u8fc7~~\u7b80\u5355~~\u7814\u7a76\u53d1\u73b0,\u5728\u6811\u4e0a\u4ee5 $u_1,v_1$ \u4e3a\u8d77\u6b62\u70b9\u7684\u8def\u5f84\u4e0e\u4ee5 $u_2,v_2$ \u4e3a\u8d77\u6b62\u70b9\u7684\u8def\u5f84\u6709\u516c\u5171\u8fb9\u7684\u65f6\u5019,\u5373\u6709\u8fb9\u4ea4,\u90a3\u4e48\u5c31\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u7b80\u5355\u73af.\n\n\u90a3\u4e48\u539f\u9898\u9898\u610f\u5c31\u53d8\u6210\u4e86\u7ed9\u4f60\u4e00\u4e9b\u6811\u4e0a\u7684\u8def\u5f84,\u6c42\u8fd9\u4e9b\u8def\u5f84\u4e4b\u95f4\u6709\u591a\u5c11\u5bf9\u6709\u8fb9\u4ea4.\n\n\u9996\u5148,\u6811\u4e0a\u7684\u8def\u5f84\u662f\u4ece $u$ -> $lca$ -> $v$ \u8fd9\u79cd\u5f62\u5f0f\u7684. \u8fd9\u5e76\u4e0d\u5229\u4e8e\u6211\u4eec\u7814\u7a76.\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5427\u6bcf\u6761\u8def\u5f84\u62c6\u6210\u4e24\u4e2a: $u$ -> $lca$ \u4e0e $v$ -> $lca$,\u8fd9\u6837\u5c31\u65b9\u4fbf\u7814\u7a76. \u867d\u7136\u8fd9\u6837\u4f1a\u6709\u4e00\u4e9b\u91cd\u590d\u8ba1\u7b97,\u4f46\u662f\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\u5f88\u597d\u5254\u9664. \n\n\u4e0d\u96be\u53d1\u73b0\u53ea\u6709\u5f53\u4e24\u6761\u8def\u5f84\u7684 $lca$ \u76f8\u540c, \u4e14\u4e24\u6761\u8def\u5f84\u4e0e $lca$ \u76f8\u8fde\u7684\u4e24\u6761\u8fb9\u662f\u4e00\u6837\u7684,\u8fd9\u65f6\u624d\u4f1a\u91cd\u590d\u8ba1\u7b97.\n\n\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50:\n![enter image description here](https://leanote.com/api/file/getImage?fileId=5c7aaa23ab64410dee00783f)\n\u7ea2\u8272,\u84dd\u8272\u4e24\u6761\u8def\u5f84\u88ab\u62c6\u5206\u540e,\u4e24\u4e2a\u90e8\u5206\u5206\u522b\u90fd\u4f1a\u6709\u4ea4,\u6240\u4ee5\u7b54\u6848\u5c31\u591a\u4e861.\n\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84\u90fd\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e24\u6761\u4e0e $lca$ \u76f8\u8fde\u7684\u8fb9,\u653e\u5728\u4e00\u4e2a $map$ \u91cc\u5c31\u884c\u4e86.\n\n \u5177\u4f53\u7684\u8ba1\u6570\u65b9\u6cd5,\u53ef\u4ee5\u5148\u8003\u8651\u4e00\u4e2a\u4e00\u7ef4\u7a7a\u95f4,\u4e5f\u5c31\u662f\u76f4\u7ebf\u4e0a\u7684\u4e00\u4e9b\u7ebf\u6bb5 $[L_i,R_i]$ \u76f8\u4ea4\u8ba1\u6570.\n \n\u4e3a\u4e86\u9632\u6b62\u91cd\u590d,\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6bb5 $x$ ,\u6211\u4eec\u53ea\u6570\u4e0e\u5b83\u76f8\u4ea4,\u4e14 $L_i > L_x$ \u7684\u7ebf\u6bb5 $i$.\n\n\u8fd9\u6837\u5c31\u6709\u4e00\u4e2a\u7b80\u5355\u505a\u6cd5. \u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5 $x$, \u5728 $L_x$ \u65f6\u628a\u7b54\u6848\u51cf\u53bb\u6ee1\u8db3 $L_i < L_x$ \u7684 $i$ \u7684\u4e2a\u6570,\u5728 $R_x$ \u65f6\u628a\u7b54\u6848\u52a0\u4e0a\u6ee1\u8db3 $L_i<R_x$ \u7684 $i$ \u7684\u4e2a\u6570. \u8fd9\u6837\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\u6211\u4eec\u90fd\u7b97\u51fa\u4e86\u4e0e\u5b83\u76f8\u4ea4,\u4e14 $L_i > L_x$ \u7684\u7ebf\u6bb5 $i$ \u7684\u4e2a\u6570.\n\n\u5b9e\u73b0\u65b9\u6cd5\u7c7b\u4f3c\u5dee\u5206, \u5728\u6bcf\u4e2a $L_i$ \u4f4d\u7f6e +1, \u505a\u4e00\u6b21\u524d\u7f00\u548c, $sum[R_x]-sum[L_x-1]$ \u5c31\u662f \u7ebf\u6bb5 $x$ \u7684\u7b54\u6848.\n\n\u6ce8\u610f\u5f53\u6709 $L$ \u76f8\u7b49\u7684\u60c5\u51b5\u65f6,\u4f1a\u91cd\u590d\u8ba1\u7b97,\u9700\u8981\u51cf\u53bb\u591a\u7b97\u7684.\n\n\u90a3\u4e48,\u6211\u4eec\u5728\u6811\u4e0a\u505a\u7684\u4e8b\u60c5\u4e5f\u662f\u5b8c\u5168\u4e00\u6837\u7684.\n\u4e3a\u4e86\u65b9\u4fbf,\u6211\u4eec\u628a\u8fde\u63a5 $x$ \u4e0e\u5b83\u7236\u4eb2\u7684\u8fb9\u7684\u6743\u503c\u653e\u5728 $x$ \u4e0a.\n\u5bf9\u4e8e\u4e00\u6761\u62c6\u5206\u540e\u7684\"\u7b80\u5355\"\u8def\u5f84 $(u,v)[dep_u < dep _v]$, \u7ed9\u8fd9\u6761\u8def\u5f84\u4e0a\u6700\u6d45\u7684\u8fb9 $(u,u_{son})$ \u7684\u6743\u503c+1,(\u653e\u5728 $w[u_{son}]$\u4e0a) \u7136\u540e\u505a\u4e00\u6b21\u6811\u4e0a\u7684\u524d\u7f00\u548c, \u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u7684\u7b54\u6848\u5c31\u662f $sum[v]-sum[u]$.\n\n\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3: \u4e00\u4e2a\u62c6\u5206\u540e\u7684\u8def\u5f84\u7684\u6700\u6d45\u8fb9\u76f8\u5f53\u4e8e\u4e00\u7ef4\u6a21\u578b\u4e2d\u7684 $L_x$ , \u6700\u6df1\u8fb9\u76f8\u5f53\u4e8e $R_x$, \u90a3\u4e48 $L_x-1$ \u5373\u4e3a\u8def\u5f84\u4e2d\u6700\u6d45\u8fb9\u4e0a\u9762\u7684\u8fb9, \u5373\u8fde\u63a5\u6700\u9ad8\u70b9 $u$ \u4e0e\u5176\u7236\u4eb2\u7684\u8fb9.\n\n\u6ce8\u610f\u4e00\u4e0b\u6700\u6d45\u8fb9\u91cd\u5408\u7684\u60c5\u51b5, \u5373 $L$ \u76f8\u7b49\u7684\u60c5\u51b5, \u5904\u7406\u65b9\u5f0f\u548c\u4e00\u7ef4\u65e0\u5dee\u522b.\n\n----------\n\u8d34\u4e0a\u4ee3\u7801:\n```\n#include<cstdio>\n#include<cstdlib>\n#include<map>\n#include<algorithm>\n#define maxn 400005\n#define ll long long\nusing namespace std;\nint pre[maxn],to[maxn],las[maxn],mk[maxn],sum[maxn],inc;\nint fa[maxn][22],dep[maxn],st[maxn],en[maxn],lca[maxn],n,m;\nll ans=0;\nvoid ins(int a,int b){pre[++inc]=las[a],las[a]=inc,to[inc]=b;}\nvoid GetFa(int x,int f)\n{\n    dep[x]=dep[f]+1,fa[x][0]=f;\n    for(int i=1;i<=21;i++) fa[x][i]=fa[fa[x][i-1]][i-1];\n    for(int i=las[x],y=to[i];i;i=pre[i],y=to[i])\n        if(y!=f) GetFa(y,x);\n}\nvoid dfs(int x,int f,int now)\n{\n    sum[x]=(now+=mk[x]);\n    for(int i=las[x],y=to[i];i;i=pre[i],y=to[i])\n        if(y!=f) dfs(y,x,now);\n}\nint LCA(int x,int y)\n{\n    if(dep[x]<dep[y]) swap(x,y);\n    int delta=dep[x]-dep[y];\n    for(int i=21;i>=0;i--)\n        if((delta>>i)&1) x=fa[x][i];\n    if(x==y) return x;\n    for(int i=21;i>=0;i--)\n        if(fa[x][i]!=fa[y][i])\n            x=fa[x][i],y=fa[y][i];\n    return fa[x][0];\n}\nint Close(int x,int anc)\n{\n    if(x==anc) return -1;\n    for(int i=21;i>=0;i--)\n        if(fa[x][i]&&dep[fa[x][i]]>dep[anc]) x=fa[x][i];\n    return x;\n}\nmap<pair<int,int>,int> mp;\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1,u,v;i<n;i++)\n        scanf(\"%d%d\",&u,&v),ins(v,u),ins(u,v);\n    GetFa(1,0);\n    for(int i=n;i<=m;i++)\n    {\n        scanf(\"%d%d\",&st[i],&en[i]);\n        lca[i]=LCA(st[i],en[i]);\n        int ux=Close(st[i],lca[i]);\n        int uy=Close(en[i],lca[i]);\n        if(ux!=-1) ans-=(++mk[ux]);\n        if(uy!=-1) ans-=(++mk[uy]);\n        if(ux!=-1&&uy!=-1)\n        {\n            if(ux>uy) swap(ux,uy);\n            ans-=(mp[make_pair(ux,uy)]++);\n        }\n    }\n    dfs(1,0,0);\n    for(int i=n;i<=m;i++)\n        ans+=sum[st[i]]+sum[en[i]]-2*sum[lca[i]];\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1551545038,
        "uid": 20815,
        "name": "PhantasmDragon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5203 \u3010[USACO19JAN]Exercise Route\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u53bb\u91cd\u7ed9\u5199\u9ebb\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u663e\u7136\u5bf9\u4e8e\u4e24\u6761\u975e\u6811\u8fb9\uff0c\u5176\u53ea\u80fd\u7ec4\u6210\u6700\u591a\u4e00\u6761\u56de\u8def\u3002\u6784\u9020\u65b9\u5f0f\u662f\u5c06\u4e24\u6761\u975e\u6811\u8fb9\u5728\u6811\u4e0a\u7684\u8def\u5f84\u4e2d\u91cd\u590d\u7684\u90e8\u5206\u53bb\u6389\uff0c\u518d\u52a0\u4e0a\u4e24\u6761\u975e\u6811\u8fb9\u5373\u53ef\u3002\n\n\u4e8e\u662f\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u91cd\u5408\u7684\u8def\u5f84\u3002\n\n\u8003\u8651\u5c06\u4e00\u6761\u94fe\u62c6\u6210\u4e24\u6761\u4ece\u7956\u5148\u5230\u5b59\u5b50\u7684\u94fe\u3002\u7edf\u8ba1\u8fd9\u4e9b\u94fe\u76f8\u4ea4\u7684\u60c5\u51b5\u3002\n\n\u53ef\u4ee5\u6ce8\u610f\u5230\u53ea\u6709\u4e00\u4e2a\u60c5\u51b5\u4f1a\u7b97\u91cd\uff1aLCA \u76f8\u540c\uff0c\u4e14\u5bf9\u4e8e\u4e24\u7ec4\u94fe\u800c\u8a00\uff0c\u5de6\u8fb9\u90e8\u5206\u7684\u94fe\u548c\u53f3\u8fb9\u90e8\u5206\u7684\u94fe\u5747\u6709\u91cd\u5408\u3002\n\n\u5373 $u,v$ \u7684\u7956\u5148\u4e2d\u6df1\u5ea6\u5927\u4e8e $LCA(u,v)$ \u4e2d\u6700\u6df1\u7684\u4e00\u5bf9\u7956\u5148\uff0c\u82e5\u4e24\u6761\u94fe\u7684\u8fd9\u73a9\u610f\u513f\u76f8\u540c\u4f1a\u88ab\u7b97\u91cd\u3002\n\n\u76f4\u63a5\u6c42\u51fa\u8fd9\u4e24\u4e2a\u7956\u5148\u7136\u540e\u4e22\u5230 map \u91cc\u9762\u5c31\u884c\u4e86\u3002\n\n\u8003\u8651\u4e00\u5806\u7956\u5148\u5230\u5b59\u5b50\u7684\u94fe\u5982\u4f55\u7edf\u8ba1\u91cd\u5408\u60c5\u51b5\u3002\n\n\u5bf9\u6df1\u5ea6\u5f00\u4e00\u4e2a\u6876\uff0c\u5bf9\u4e8e $u$\uff0c\u6811\u72b6\u6570\u7ec4\u4e0a\u6709\u503c\u7684\u4f4d\u7f6e\u8868\u793a\u6709 $CB[x]$ \u6761\u94fe\u6ee1\u8db3\uff0c\u6df1\u7684\u90a3\u4e2a\u8282\u70b9\u4e0e $u$ \u7684 LCA \u7684\u6df1\u5ea6\u4e3a $x$\uff0c\u4e14\u6d45\u7684\u90a3\u4e2a\u8282\u70b9\u662f $u$ \u7684\u7956\u5148\u3002\n\n\u505a\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u56de\u6eaf\u4e4b\u540e\u5c06\u8fd9\u4e2a\u6df1\u5ea6\u7684\u6876\u7684\u503c\u79fb\u52a8\u5230\u7236\u4eb2\u5373\u53ef\u3002\u7531\u4e8e\u9700\u8981\u67e5\u8be2\u533a\u95f4\u548c\u6240\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\n\n\u4f46\u662f\u6ce8\u610f\u5230\uff0c\u5982\u679c\u5b58\u5728 $(u1,v1),(u2,v2)$ \uff08\u4e8c\u5143\u7ec4\u4e2d\u540e\u8005\u4e3a\u524d\u8005\u7684\u7956\u5148\uff09\u6ee1\u8db3 $v2$ \u662f $v1$ \u7684\u7956\u5148\u4e14 $v1$ \u662f $u2$ \u7684\u7956\u5148\u4f1a\u88ab\u7b97\u4e24\u904d\uff0c\u9700\u8981\u53bb\u6389\u8fd9\u79cd\u60c5\u51b5\u3002\n\n\u8fd9\u79cd\u60c5\u51b5\u518d\u5bf9\u6df1\u5ea6\u5f00\u4e00\u4e2a\u6876\uff0c\u4ecd\u7136\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<vector>\n#include<map>\nconst int M=2e5+5;\nint n,m,ege,dfc,s[M],a[M],b[M],L[M],R[M],h[M],u[M],v[M];int f[M],d[M],siz[M],top[M],son[M];long long ans;\nstd::map<long long,int>CB;std::vector<int>q[M];int BIT[M],V[M];\nstruct Edge{\n\tint v,nx;\n}e[M<<1];\ninline void Add(const int&u,const int&v){\n\te[++ege]=(Edge){v,h[u]};h[u]=ege;\n\te[++ege]=(Edge){u,h[v]};h[v]=ege;\n}\ninline void DFS1(const int&u){\n\tsiz[u]=1;d[u]=d[f[u]]+1;\n\tfor(int v,E=h[u];E;E=e[E].nx)if((v=e[E].v)^f[u])f[v]=u,DFS1(v),siz[u]+=siz[v],siz[v]>siz[son[u]]&&(son[u]=v);\n}\ninline void DFS2(const int&u,const int&tp){\n\ttop[u]=tp;L[u]=++dfc;if(!son[u])return void(R[u]=dfc);DFS2(son[u],tp);\n\tfor(int E=h[u];E;E=e[E].nx)if(e[E].v^f[u]&&e[E].v^son[u])DFS2(e[E].v,e[E].v);R[u]=dfc;\n}\ninline int LCA(int u,int v){\n\twhile(top[u]^top[v])d[top[u]]>d[top[v]]?u=f[top[u]]:v=f[top[v]];return d[u]>d[v]?v:u;\n}\ninline int Find(int u,const int&v){\n\twhile(top[u]^top[v]){\n\t\tif(f[top[u]]==v)return top[u];u=f[top[u]];\n\t}\n\treturn son[v];\n}\ninline int read(){\n\tint n(0);char s;while(!isdigit(s=getchar()));while(n=n*10+(s&15),isdigit(s=getchar()));return n;\n}\ninline void Mdf(int x,const int&V){\n\tif(!x)return;::V[x]+=V;while(x<=n)BIT[x]+=V,x+=x&-x;\n}\ninline int Qry(int x){\n\tint ans(0);while(x>=1)ans+=BIT[x],x-=x&-x;return ans;\n}\ninline void DFSX(const int&u){\n\tMdf(d[u],b[u]);for(int v,E=h[u];E;E=e[E].nx)if((v=e[E].v)^f[u])DFSX(v);\n\tfor(int&x:q[u])ans+=Qry(d[u])-Qry(x)-1;Mdf(d[u]-1,a[u]);Mdf(d[u]-1,V[d[u]]);Mdf(d[u],-V[d[u]]);\n}\ninline void DFSY(const int&u){\n\tMdf(d[u],b[u]);for(int v,E=h[u];E;E=e[E].nx)if((v=e[E].v)^f[u])DFSY(v);\n\tfor(int&x:q[u])ans-=Qry(d[u])-Qry(x)-1;Mdf(d[u],-b[u]);\n}\ninline void swap(int&a,int&b){\n\tint c=a;a=b;b=c;\n}\nsigned main(){\n\tn=read();m=read()-n+1;for(int u,v,i=1;i<n;++i)u=read(),v=read(),Add(u,v);\n\tfor(int i=1;i<=m;++i)u[i]=read(),v[i]=read();DFS1(1);DFS2(1,1);\n\tfor(int i=1;i<=m;++i){\n\t\tconst int&lca=LCA(u[i],v[i]);if(L[u[i]]<L[v[i]])swap(u[i],v[i]);\n\t\tif(L[v[i]]<=L[u[i]]&&R[u[i]]<=R[v[i]]){\n\t\t\t--a[Find(u[i],v[i])];++b[u[i]];q[u[i]].push_back(d[v[i]]);++s[u[i]];continue;\n\t\t}\n\t\tconst int&x=Find(u[i],lca),&y=Find(v[i],lca);ans-=CB[(n+1ll)*x+y];++CB[(n+1ll)*x+y];++CB[(n+1ll)*y+x];\n\t\t--a[x];--a[y];++b[u[i]];++b[v[i]];q[u[i]].push_back(d[lca]);q[v[i]].push_back(d[lca]);++s[u[i]];++s[v[i]];\n\t}\n\tDFSX(1);DFSY(1);for(int i=1;i<=n;++i)ans+=s[i]*(s[i]-1ll)/2;printf(\"%lld\",ans);\n}\n```",
        "postTime": 1660206308,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u636e\u7ed3\u6784 \u6811\u72b6\u6570\u7ec4 P5203\u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u4e24\u6761\u975e\u6811\u8fb9\u53ef\u4ee5\u9009\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u5728\u6811\u4e0a\u7684\u8def\u5f84\u6709\u4ea4\n\n\u8003\u8651\u628a\u4e00\u6761\u8def\u5f84\u62c6\u6210\u76f4\u4e0a\u76f4\u4e0b\u7684\u4e24\u6761\n\n\u73b0\u5728\u7684\u95ee\u9898\u662f\u8ba1\u7b97\u8fd9\u6837\u7684\u8def\u5f84\u4e4b\u95f4\u6709\u51e0\u4e2a\u4ea4\u96c6\n\n\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u7b97\u91cd\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84\u53ea\u7edf\u8ba1\u8d77\u59cb\u70b9\u5728\u4ed6\u4e0b\u9762\u4e14\u548c\u4ed6\u6709\u4ea4\u96c6\u7684\n\n\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u53ea\u9700\u8981\u628a $x$ \u8df3\u5230 $lca$ \u7684\u513f\u5b50 $topx$ \u5728\u8fd9\u91cc\u6253\u4e0a\u6807\u8bb0\uff0c\u6700\u540e\u7edf\u8ba1\u4e00\u4e0b\u524d\u7f00\u548c\u8ba1\u7b97\u7b54\u6848\u5c31\u53ef\u4ee5\n\n\u4f46\u662f\u5bf9\u4e8e $(x,lca)$ \u548c $(y,lca)$ \u90fd\u6709\u4ea4\u96c6\u7684\u90e8\u5206\uff0c\u6211\u4eec\u4f1a\u7b97\u91cd\n\n\u6240\u4ee5\u5f00\u4e00\u4e2a map \u8bb0\u5f55\u4e8c\u5143\u7ec4 $(topx,topy)$ \u7684\u4e2a\u6570\uff0c\u6bcf\u6b21\u51cf\u6389\u5373\u53ef\n\n\u5bf9\u4e8e\u4e24\u6761\u8d77\u70b9\u76f8\u540c\u5e76\u4e14\u6709\u516c\u5171\u90e8\u5206\u7684\u94fe\uff0c\u6211\u4eec\u4f1a\u7b97\u4e24\u6b21\uff0c\u8fd9\u79cd\u4e5f\u76f4\u63a5\u5229\u7528\u6807\u8bb0\u6570\u7ec4\u51cf\u6389\u5c31\u53ef\u4ee5\u4e86\n\n$\\mathcal O(n\\log n)$\n\n```cpp\nint n,m;\nint head[N],cnt;\nint st[N][20],dep[N];\nint cf[N];\nint X[N<<1],Y[N<<1],tot;\nmap<PII,int> var;\nll ans;\n\nstruct Edge{\n\tint to,next;\t\n}e[N<<1];\n\nvoid add(int x,int y){\n\te[++cnt]=(Edge){y,head[x]},head[x]=cnt;\t\n}\n\nint lca(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y); \n\t_Rep(i,19,0)if(dep[st[x][i]]>=dep[y])x=st[x][i];\n\tif(x==y)return x;\n\t_Rep(i,19,0)if(st[x][i]!=st[y][i])x=st[x][i],y=st[y][i];\n\treturn st[x][0];\n}\n\nvoid dfs1(int u,int fa){\n\tdep[u]=dep[fa]+1;\n\tst[u][0]=fa;\n\tRep(i,1,19)st[u][i]=st[st[u][i-1]][i-1];\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==fa)continue;\n\t\tdfs1(v,u);\t\n\t}\n}\n\nvoid dfs2(int u,int fa){\n\tcf[u]+=cf[fa];\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==fa)continue;\n\t\tdfs2(v,u);\t\n\t}\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tread(n),read(m);\n\tRep(i,1,n-1){\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tadd(x,y),add(y,x);\n\t}\n\tdfs1(1,0);\n\tRep(qwq,n,m){\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tint tpx=-1,tpy=-1;\n\t\tint LCA=lca(x,y);\n\t\tif(x!=LCA){\n\t\t\tint xx=x;\n\t\t\t_Rep(i,19,0)if(dep[st[xx][i]]>dep[LCA])xx=st[xx][i];\n\t\t\ttpx=xx;\t\n\t\t}\n\t\tif(y!=LCA){\n\t\t\tint yy=y;\n\t\t\t_Rep(i,19,0)if(dep[st[yy][i]]>dep[LCA])yy=st[yy][i];\t\n\t\t\ttpy=yy;\n\t\t}\n\t\tif(~tpx){\n\t\t\tcf[tpx]++;\t\n\t\t\tans-=cf[tpx];\n\t\t\tX[++tot]=LCA,Y[tot]=x;\n\t\t}\n\t\tif(~tpy){\n\t\t\tcf[tpy]++;\n\t\t\tans-=cf[tpy];\n\t\t\tX[++tot]=LCA,Y[tot]=y;\n\t\t}\n\t\tif(~tpx&&~tpy){\n\t\t\tif(tpx>tpy)swap(tpx,tpy);\n\t\t\tans-=var[mkp(tpx,tpy)];\t\n\t\t\tvar[mkp(tpx,tpy)]++;\n\t\t}\n\t}\n\tdfs2(1,0);\n\tRep(i,1,tot)ans+=cf[Y[i]]-cf[X[i]];\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1632614677,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "P5203 [USACO19JAN]Exercise Route P"
    },
    {
        "content": "\u8fd9\u9898\u4f3c\u4e4e\u505a\u6cd5\u5f88\u591a\u554a\u2026\u2026\n\n~~\u624b\u73a9\u53ef\u77e5~~\u6211\u4eec\u8981\u6c42\u6709\u591a\u5c11\u5bf9\u8fb9\u76f8\u4ea4\u7684\u88ab\u975e\u6811\u8fb9\u8986\u76d6\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9\u6bcf\u6761\u8def\u5f84\u6c42\u6709\u591a\u5c11\u8def\u5f84\u548c\u4ed6\u4e0d\u76f8\u4ea4\uff0c\u7136\u540e\u6211\u4eec\u5f00\u59cb\u5927\u529b\u8ba8\u8bba\u2014\u2014\n\n![](https://cdn.luogu.com.cn/upload/pic/56554.png)\n\n\u5176\u4e2dA\u662f\u5f53\u524d\u7684\u8fb9\uff0cB\u662f\u8981\u7edf\u8ba1\u7684\u8fb9\uff0c\u6211\u4eec\u4ee4$f[i]$\u4e3aLCA\u5728i\u5b50\u6811\u7684\u8def\u5f84\u7684\u4e2a\u6570\uff0c\u5bf9\u4e8e\u60c5\u51b56\u76f4\u63a5\u4e0a$f[i]$\uff0c\u5bf9\u4e8e\u60c5\u51b51\u548c\u60c5\u51b52\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6362\u6839dp\uff0c\u8bbe$g[i]$\u4e3ai\u5230\u6839\u7684\u4e00\u6761\u94fe\u4e0a\uff0c\u4e0d\u5728i\u5b50\u6811\u4e14\u4e0e\u8fd9\u6761\u94fe\u65e0\u8fb9\u4ea4\u7684\u8def\u5f84\u6570\uff0c\u8fd9\u4e2a\u4ece\u4e0a\u5230\u4e0b\u8f6c\u79fb\uff0c\u4f46\u662f\u8fd9\u4e2a\u8981\u7b97\u4e00\u68f5\u5b50\u6811\u5230\u53e6\u4e00\u68f5\u5b50\u6811\u4e4b\u95f4\u6709\u591a\u5c11\u8def\u5f84\uff0c\u8fd9\u4e2a\u6211\u4eec\u6c42\u51fadfs\u5e8f\u7136\u540e\u4e8c\u7ef4\u6570\u70b9\uff0c\u8fd9\u4e2a\u7528\u4e3b\u5e2d\u6811\u6765\u505a\uff0c\u6c42\u51fa$g$\u4e4b\u540e\u5c31\u80fd\u7b97\u4e86\u3002\u5bf9\u4e8e\u60c5\u51b53\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u5728\u7aef\u70b9\u7684\u5b50\u6811\u4e0a\u8fdb\u884c\u533a\u95f4\u52a0\uff0c\u5728LCA\u4e0a\u7edf\u8ba1\u3002\u60c5\u51b54\u548c\u60c5\u51b55\u6bd4\u8f83\u7279\u6b8a\uff0c\u4ed6\u6d89\u53ca\u5230\u5230\u6839\u7684\u8fd9\u6761\u94fe\u7684\u7ec6\u679d\u672b\u8282\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u6211\u4eec\u7528$h[i]$\u8fdb\u884c\u7edf\u8ba1\uff0c\u5728\u6362\u6839dp\u7684\u65f6\u5019\u628a\u5176\u4ed6\u513f\u5b50\u4e0e\u5b50\u6811\u5916\u7684\u90e8\u5206\u4e8c\u7ef4\u6570\u70b9\u7edf\u8ba1\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\u6ce8\u610f\u7279\u5224\u76f4\u4e0a\u76f4\u4e0b\u7684\u8def\u5f84\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#define ll long long\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 - c + '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t} bian;\n\tbian memchi[500001];\n\tint gn = 1, heads[200001];\n\tinline void add(int s, int t) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].nxt = heads[s];\n\t    heads[s] = gn;\n\t    gn++;\n\t}\n\tint lef[5000001], rgh[5000001], data[5000001], gseg = 1, root[200001], dfn[200001], c[300001], gdfn = 1;\n\tint query(int rl, int rr, int l, int r, int tree1, int tree2) {\n\t    if (rl == l && rr == r)\n\t        return (data[tree2] - data[tree1]);\n\t    int mid = (l + r) >> 1;\n\t    if (rl > mid)\n\t        return (query(rl, rr, mid + 1, r, rgh[tree1], rgh[tree2]));\n\t    if (rr <= mid)\n\t        return (query(rl, rr, l, mid, lef[tree1], lef[tree2]));\n\t    return (query(rl, mid, l, mid, lef[tree1], lef[tree2]) +\n\t            query(mid + 1, rr, mid + 1, r, rgh[tree1], rgh[tree2]));\n\t}\n\tint insert(int l, int r, int tree, int pt) {\n\t    int me = gseg;\n\t    gseg++;\n\t    data[me] = data[tree] + 1;\n\t    if (l == r)\n\t        return (me);\n\t    int mid = (l + r) >> 1;\n\t    if (pt <= mid)\n\t        lef[me] = insert(l, mid, lef[tree], pt), rgh[me] = rgh[tree];\n\t    else\n\t        lef[me] = lef[tree], rgh[me] = insert(mid + 1, r, rgh[tree], pt);\n\t    return (me);\n\t}\n\tint fan[200001];\n\tvector<int> vec[200001];\n\tint size[200001];\n\tinline int Ewsd(int l1, int r1, int l2, int r2) {\n\t    if (l1 > r1 || l2 > r2)\n\t        return (0);\n\t    if (l1 < l2)\n\t        swap(l1, l2), swap(r1, r2);\n\t    return (query(l1, r1, 1, gdfn - 1, root[l2 - 1], root[r2]));\n\t}\n\tint deep[200001], ance[200001][19], lg[200001];\n\tvoid dfs(int pt, int baba) {\n\t    size[pt] = 1;\n\t    dfn[pt] = gdfn;\n\t    fan[gdfn] = pt;\n\t    gdfn++;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba)\n\t            continue;\n\t        ance[memchi[i].dest][0] = pt;\n\t        deep[memchi[i].dest] = deep[pt] + 1;\n\t        dfs(memchi[i].dest, pt);\n\t        size[pt] += size[memchi[i].dest];\n\t    }\n\t}\n\tinline int lca(int a, int b) {\n\t    if (deep[a] > deep[b])\n\t        swap(a, b);\n\t    for (register int i = lg[deep[b]]; i >= 0; i--) {\n\t        if (deep[ance[b][i]] >= deep[a])\n\t            b = ance[b][i];\n\t    }\n\t    if (a == b)\n\t        return (a);\n\t    for (register int i = lg[deep[a]]; i >= 0; i--) {\n\t        if (ance[a][i] != ance[b][i])\n\t            a = ance[a][i], b = ance[b][i];\n\t    }\n\t    return (ance[a][0]);\n\t}\n\tint f[200001], g[200001], ss[400001], ts[400001], ls[200001], c1[200011], dh[200001];\n\tvoid efs(int pt, int baba) {\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba)\n\t            continue;\n\t        efs(memchi[i].dest, pt);\n\t        f[pt] += f[memchi[i].dest];\n\t    }\n\t}\n\tint dg[200001];\n\tvoid ffs(int pt, int baba) {\n\t    int sig = 0;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba)\n\t            continue;\n\t        dg[memchi[i].dest] +=\n\t            Ewsd(1, dfn[pt] - 1, dfn[memchi[i].dest], dfn[memchi[i].dest] + size[memchi[i].dest] - 1);\n\t        dg[memchi[i].dest] += Ewsd(dfn[memchi[i].dest], dfn[memchi[i].dest] + size[memchi[i].dest] - 1,\n\t                                   dfn[pt] + size[pt], gdfn - 1);\n\t        sig += dg[memchi[i].dest];\n\t    }\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba)\n\t            continue;\n\t        dh[memchi[i].dest] = dh[pt] + sig - dg[memchi[i].dest];\n\t        g[memchi[i].dest] = g[pt] + f[pt] - f[memchi[i].dest];\n\t        g[memchi[i].dest] -= Ewsd(dfn[pt], dfn[memchi[i].dest] - 1, dfn[memchi[i].dest],\n\t                                  dfn[memchi[i].dest] + size[memchi[i].dest] - 1);\n\t        g[memchi[i].dest] -= Ewsd(dfn[memchi[i].dest], dfn[memchi[i].dest] + size[memchi[i].dest] - 1,\n\t                                  dfn[memchi[i].dest] + size[memchi[i].dest], dfn[pt] + size[pt] - 1);\n\t    }\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba)\n\t            continue;\n\t        ffs(memchi[i].dest, pt);\n\t    }\n\t}\n\tinline int chget(int pt, int yeye) {\n\t    for (register int i = lg[deep[pt]]; i >= 0; i--)\n\t        if (deep[ance[pt][i]] > deep[yeye])\n\t            pt = ance[pt][i];\n\t    return (pt);\n\t}\n\tvoid ywymain() {\n\t    deep[0] = -1;\n\t    int n = get(), m = get();\n\t    lg[0] = -1;\n\t    for (register int i = 1; i < n; i++) {\n\t        int s = get(), t = get();\n\t        add(s, t);\n\t        add(t, s);\n\t        lg[i] = lg[i - 1];\n\t        if (i == (i & -i))\n\t            lg[i]++;\n\t    }\n\t    dfs(1, 0);\n\t    for (register int i = 1; i <= lg[n - 1]; i++) {\n\t        for (register int j = 1; j <= n; j++) ance[j][i] = ance[ance[j][i - 1]][i - 1];\n\t    }\n\t    int all = 0;\n\t    for (register int i = n; i <= m; i++) {\n\t        int s = get(), t = get();\n\t        if (s == t)\n\t            continue;\n\t        int l = lca(s, t);\n\t        if (dfn[s] > dfn[t])\n\t            swap(s, t);\n\t        ss[i] = s;\n\t        ts[i] = t;\n\t        ls[i] = l;\n\t        all++;\n\t        vec[dfn[s]].push_back(dfn[t]);\n\t        if (s != l) {\n\t            for (register int j = dfn[s]; j <= n; j += (j & -j)) c1[j]++;\n\t            for (register int j = dfn[s] + size[s]; j <= n; j += (j & -j)) c1[j]--;\n\t        }\n\t        for (register int j = dfn[t]; j <= n; j += (j & -j)) c1[j]++;\n\t        for (register int j = dfn[t] + size[t]; j <= n; j += (j & -j)) c1[j]--;\n\t        f[l]++;\n\t    }\n\t    for (register int i = 1; i <= n; i++) {\n\t        root[i] = root[i - 1];\n\t        for (register int j = 0; j < vec[i].size(); j++) {\n\t            root[i] = insert(1, n, root[i], vec[i][j]);\n\t        }\n\t    }\n\t    efs(1, 0);\n\t    ffs(1, 0);\n\t    ll ans = 0;\n\t    for (register int i = n; i <= m; i++) {\n\t        if (!ss[i])\n\t            continue;\n\t        int tot = 0;\n\t        for (register int j = dfn[ls[i]]; j > 0; j -= (j & -j)) tot += c1[j];\n\t        tot++;\n\t        if (ss[i] == ls[i]) {\n\t            tot += g[ts[i]];\n\t            tot += f[ts[i]];\n\t            tot += dh[chget(ts[i], ss[i])];\n\t        } else {\n\t            int ds = chget(ss[i], ls[i]), dt = chget(ts[i], ls[i]);\n\t            tot += (g[ts[i]] - g[dt]);\n\t            tot += (g[ss[i]] - (g[ds] - g[ls[i]]));\n\t            tot += f[ls[i]];\n\t            tot -= f[ds];\n\t            tot -= f[dt];\n\t            tot += Ewsd(dfn[ds], dfn[ds] + size[ds] - 1, dfn[dt], dfn[dt] + size[dt] - 1);\n\t            tot -= Ewsd(dfn[ls[i]], dfn[ds] - 1, dfn[ds], dfn[ds] + size[ds] - 1);\n\t            tot -= Ewsd(dfn[ds], dfn[ds] + size[ds] - 1, dfn[ds] + size[ds], dfn[ls[i]] + size[ls[i]] - 1);\n\t            tot -= Ewsd(dfn[ls[i]], dfn[dt] - 1, dfn[dt], dfn[dt] + size[dt] - 1);\n\t            tot -= Ewsd(dfn[dt], dfn[dt] + size[dt] - 1, dfn[dt] + size[dt], dfn[ls[i]] + size[ls[i]] - 1);\n\t            tot += dh[ds];\n\t            tot -= dg[dt];\n\t            tot += f[ss[i]];\n\t            tot += f[ts[i]];\n\t        }\n\t        ans += (all - tot);\n\t    }\n\t    cout << ans / 2 << endl;\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1555161072,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5203 \u3010[USACO19JAN]Exercise Route\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P5203)\n\n\u8fd9\u9898\u7684\u6570\u636e\u6709\u70b9\u6c34\uff0c\u66b4\u529b\u5408\u5e76$set$\u597d\u50cf\u8fc7\u4e86\n\n\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u9898\u7684\u6027\u8d28\uff0c\u53d1\u73b0\u6211\u4eec\u4e00\u6761\u975e\u6811\u8fb9\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u800c\u6211\u4eec\u8981\u6c42\u9009\u62e9\u4e24\u4e2a\u975e\u6811\u8fb9\uff0c\u5c31\u4f1a\u5f62\u6210\u4e24\u4e2a\u73af\uff0c\u8981\u6c42\u4e0d\u8d70\u91cd\u590d\u7684\u70b9\uff0c\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u8d70\u4e00\u4e2a\u5927\u73af\uff0c\u4e14\u5fc5\u987b\u7ecf\u8fc7\u8fd9\u4e24\u4e2a\u5c0f\u73af\n\n\u663e\u7136\u9700\u8981\u8fd9\u4e24\u4e2a\u5c0f\u73af\u6709\u81f3\u5c11\u4e00\u6761\u516c\u5171\u8fb9\n\n\u53d1\u73b0\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u6c42**\u6709\u591a\u5c11\u5bf9\u8def\u5f84\uff0c\u8fd9\u5bf9\u8def\u5f84\u6709\u516c\u5171\u8fb9**\n\n\u5e94\u8be5\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u5927\u529b\u8ba8\u8bba\u7684\uff0c\u5f53\u7136\u6811\u4e0a\u5dee\u5206\u7684\u6b63\u89e3\u601d\u8def\u4e5f\u975e\u5e38\u5999\n\n~~\u4e8e\u662f\u6211\u4eec\u5199\u4e2a\u66b4\u529b\u5427\uff01~~\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6211\u7b2c\u4e00\u60f3\u6cd5\u662f\u542f\u53d1\u5f0f\u5408\u5e76$set$\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u540c\u6811\u4e0a\u5dee\u5206\u90a3\u6837\u7684\u65b9\u5f0f\uff0c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84$(u,v)$\uff0c\u6211\u4eec\u5728$u,v$\u5904\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\uff0c\u5728$lca(u,v)$\u518d\u6253\u4e0a\u4e00\u4e2a\u5220\u9664\u6807\u8bb0\uff0c\u6bcf\u6b21\u5408\u5e76$set$\u7684\u65f6\u5019\uff0c\u5f80$set$\u91cc\u63d2\u5165\u7684\u6240\u6709\u6807\u8bb0\u90fd\u8868\u660e**\u8fd9\u4e2a\u6807\u8bb0\u4ee3\u8868\u7684\u8def\u5f84\u7ecf\u8fc7\u4e86\u8fd9\u6761\u8fb9**\uff0c\u8fd9\u6837\u8fd9\u6761\u8def\u5f84\u5c31\u53ef\u4ee5\u548c\u539f\u6765$set$\u91cc\u7684\u6807\u8bb0\u4efb\u610f\u7ec4\u5408\u4e86\uff0c\u5c31\u53ef\u4ee5\u7edf\u8ba1\u7b54\u6848\u4e86\n\n\u4f46\u662f\u4f1a\u548c\u6b63\u89e3\u6811\u4e0a\u5dee\u5206\u9047\u5230\u4e00\u6837\u7684\u95ee\u9898\uff0c\u5c31\u662f\u5982\u679c\u4e24\u6761\u8def\u5f84\u7684\u516c\u5171\u8fb9\u5f62\u6210\u7684\u4e0d\u662f\u4e00\u6761\u94fe\uff0c\u8fd9\u5bf9\u8def\u5f84\u6211\u4eec\u4f1a\u8ba1\u7b97\u4e24\u6b21\n\n\u8fd9\u91cc\u91c7\u7528\u548c\u6b63\u89e3\u4e00\u6837\u7684\u65b9\u6cd5\u5c31\u597d\u4e86\uff0c\u5c31\u662f\u5229\u7528\u4e00\u4e2a$map$\u6765\u627e\u5230\u8fd9\u6837\u7684\u8def\u5f84\u6709\u591a\u5c11\u5bf9\n\n\u5230\u8fd9\u91cc\u590d\u6742\u5ea6\u8fd8\u975e\u5e38\u6b63\u5e38\uff0c\u662f\u6709\u70b9\u5927\u7684$O(nlog^2n)$\uff0c\u4f46\u662f\u6211\u4eec\u53c8\u53d1\u73b0\u6211\u4eec\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u529e\u6cd5\u53bb\u5229\u7528\u5220\u9664\u6807\u8bb0\n\n\u5982\u679c\u6bcf\u6b21\u5408\u5e76\u524d\u90fd\u8981\u626b\u4e00\u904d\u5220\u9664\u96c6\u5408\u7684\u8bdd\uff0c\u590d\u6742\u5ea6\u663e\u7136\u5c31\u4e0d\u5bf9\u4e86\uff0c\u83ca\u82b1\u6811\u968f\u4fbf\u5361\u6389\n\n\u4e8e\u662f\u6211\u4eec\u542f\u53d1\u5f0f\u5220\u9664\uff0c\u770b\u770b\u7ef4\u62a4\u5220\u9664\u96c6\u5408\u5c0f\u8fd8\u662f\u5f85\u5408\u5e76\u96c6\u5408\u5c0f\uff0c\u90a3\u4e2a\u5c0f\u5c31\u904d\u5386\u54ea\u4e00\u4e2a\n\n\u8fd8\u662f\u8fc7\u4e0d\u53bb\u600e\u4e48\u529e\uff0c\u90a3\u5c31\u628a$set$\u6362\u6210unordered_set\uff0c\u4fe1\u4ef0\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\n\n\u4ee3\u7801\n\n```cpp\n#include<tr1/unordered_set>\n#include<tr1/unordered_map>\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define maxn 200005\n#define re register\n#define LL long long\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define set_it unordered_set<int>::iterator\n# define getchar() (S==T&&(T=(S=BB)+fread(BB,1,1<<15,stdin),S==T)?EOF:*S++)\nusing namespace std::tr1;\nchar BB[1 << 18],*S=BB,*T=BB; \ninline int read() {\n    int x=0;char c=getchar();while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-48,c=getchar();return x;\n}\nstruct E{int v,nxt;}e[maxn<<1];\nint head[maxn],deep[maxn],sum[maxn],fa[maxn],top[maxn],son[maxn],f[maxn][19],st[maxn];\nint n,m,num,cnt,md,t;\nint rt[maxn];\nLL ans;\nunordered_set<int> s[maxn],del[maxn];\nunordered_map<LL,int> ma;\ninline void add(int x,int y) {e[++num].v=y;e[num].nxt=head[x];head[x]=num;}\nvoid dfs1(int x) {\n    sum[x]=1;int maxx=-1;\n    for(re int i=head[x];i;i=e[i].nxt) {\n        if(deep[e[i].v]) continue;\n        deep[e[i].v]=deep[x]+1;fa[e[i].v]=x;f[e[i].v][0]=x;\n        for(re int j=1;j<=18;j++) f[e[i].v][j]=f[f[e[i].v][j-1]][j-1];\n        dfs1(e[i].v);\n        sum[x]+=sum[e[i].v];\n        if(sum[e[i].v]>maxx) maxx=sum[e[i].v],son[x]=e[i].v;\n    }\n}\nvoid dfs2(int x,int topf) {\n    top[x]=topf;\n    if(!son[x]) return;\n    dfs2(son[x],topf);\n    for(re int i=head[x];i;i=e[i].nxt) {\n        if(top[e[i].v]) continue;\n        dfs2(e[i].v,e[i].v);\n    }\n}\ninline int LCA(int x,int y) {\n    while(top[x]!=top[y]) {\n        if(deep[top[x]]<deep[top[y]]) std::swap(x,y);\n        x=fa[top[x]];\n    }\n    if(deep[x]<deep[y]) return x;return y;\n}\ninline void D(int a,int c) {\n    if(del[c].size()<s[a].size()) {\n    \tfor(set_it it=del[c].begin();it!=del[c].end();++it) {\n        \tint x=*it;\n        \ts[a].erase(x);\n    \t}\n    \treturn;\n    }\n    t=0;\n    for(set_it it=s[a].begin();it!=s[a].end();++it) \n        if(del[c].find(*it)!=del[c].end()) st[++t]=*it;\n    while(t) s[a].erase(st[t--]);\n}\ninline void merge(int a,int b,int c) {\n    int now=s[a].size();\n    for(set_it it=s[b].begin();it!=s[b].end();++it) {\n        int x=*it;\n        if(del[c].find(x)!=del[c].end()) continue;\n        ans+=now;s[a].insert(x);\n    }\n}\ninline int jump(int x,int y) {\n    for (re int i=18;i>=0;--i) if(deep[x]-(1<<i)>deep[y]) x=f[x][i];\n\treturn x;\n}\nvoid dfs(int x) {\n\tD(rt[x],x);\n    for(re int i=head[x];i;i=e[i].nxt) {\n        if(deep[e[i].v]<deep[x]) continue;\n        dfs(e[i].v);\n        if(s[rt[e[i].v]].size()<=s[rt[x]].size()) {\n            if(x!=1) merge(rt[x],rt[e[i].v],x);\n        }\n        else {\n            D(rt[e[i].v],x);\n            if(x!=1) merge(rt[e[i].v],rt[x],x),rt[x]=rt[e[i].v];\n        }\n    }\n}\nint main() {\n    n=read(),m=read();int x,y,z;\n    for(re int i=1;i<n;i++) x=read(),y=read(),add(x,y),add(y,x);\n    deep[1]=1,dfs1(1),dfs2(1,1);\n    for(re int i=1;i<=n;i++) rt[i]=i;\n    for(re int i=n;i<=m;i++) {\n        x=read(),y=read();z=LCA(x,y);\n        if(x==y) continue;\n        if(deep[x]<deep[y]) std::swap(x,y);\n        ans+=s[x].size();\n        if(z!=y) ans+=s[y].size();\n        s[x].insert(i);\n        if(z!=y) s[y].insert(i);\n        del[z].insert(i);\n        if(x==z||y==z) continue;\n        int xx=jump(x,z),yy=jump(y,z);\n        if(xx>yy) std::swap(xx,yy);\n        ans-=ma[(LL)xx*(LL)n+yy];ma[(LL)xx*(LL)n+yy]++;\n    }\n    dfs(1);\n    printf(\"%lld\\n\",ans);\n}\n```\n",
        "postTime": 1551103242,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5203 \u3010[USACO19JAN]Exercise Route\u3011"
    },
    {
        "content": "\u8ba9\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u8d1d\u831c\u53ef\u4ee5\u5229\u7528\u7684\u4e24\u6761\u975e\u6807\u51c6\u8def\u5f84\u3002\n\u8003\u8651\u7531\u6807\u51c6\u8def\u5f84\u7ec4\u6210\u7684\u6811\u3002\u6211\u4eec\u5c06\u628a\u975e\u6807\u51c6\u8ddf\u8e2a\u7684\u201c\u8def\u5f84\u201d\u770b\u4f5c\u5b83\u5728\u4e0a\u8ff0\u6811\u4e2d\u4e24\u4e2a\u76f8\u5e94\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u3002\u5982\u679c\u6211\u4eec\u6b63\u5728\u8003\u8651\u7684\u4e24\u4e2a\u975e\u6807\u51c6\u8def\u5f84\u5177\u6709\u8fb9\u4e0d\u76f8\u4ea4\u8def\u5f84\uff0c\u5219\u4e0d\u53ef\u80fd\u4f7f\u7528\u5b83\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\u3002\u7136\u800c\uff0c\u5982\u679c\u5b83\u4eec\u7684\u8def\u5f84\u786e\u5b9e\u91cd\u53e0\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\u3002\n\u73b0\u5728\u6211\u4eec\u6709\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5982\u4f55\u8ba1\u7b97\u8def\u5f84\u91cd\u53e0\u7684\u975e\u6807\u51c6\u8def\u5f84\u5bf9?\n\u6211\u4eec\u8ba4\u4e3a\u8fd9\u68f5\u6811\u662f\u4efb\u610f\u6839\u7684\u3002\n\u8ba9\u975e\u6807\u51c6\u7684\u8ddf\u8e2a\u4ece\u8282\u70b9A\u5f00\u59cb\u5230\u8282\u70b9B\u901a\u8fc7\u5176\u6700\u4f4e\u5171\u540c\u7956\u5148(LCA)\n\u8fd9\u662f\u4e00\u4e2a\u6709\u70b9\u96be\u5904\u7406\u7684\u5f62\u72b6\u3002\n\u5982\u679c\u6211\u4eec\u51b3\u5b9a\u5c06\u6bcf\u4e2a\u975e\u6807\u51c6\u8def\u5f84\u90fd\u62c6\u5206\u4e3a\u4eceA\u6765\u4ee5\u53ca\u4eceB\u6765\uff0c\u7136\u540e\u8ba1\u7b97\u91cd\u53e0\u8def\u5f84\u7684\u4e2a\u6570\n\u7528\u8fd9\u79cd\u8ba1\u6570\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6570\u5f97\u8fc7\u591a\u3002\u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5224\u65ad\u4e00\u5bf9\u662f\u5426\u4f1a\u88ab\u9ad8\u4f30\u3002\u6211\u4eec\u770b\u5230\uff0c\u53ea\u6709\u5f53\u4e24\u6761\u8def\u5f84\u90fd\u7ecf\u8fc7\u76f8\u540c\u7684LCA\u4e14\u8def\u5f84\u4e2d\u8fde\u63a5\u5230LCA\u7684\u4e24\u6761\u8fb9\u76f8\u540c\u65f6\uff0c\u624d\u4f1a\u51fa\u73b0\u5bf9\u7684\u8ba1\u6570\u8fc7\u591a\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u627e\u5230\u8fd9\u6837\u7684\u5bf9\u7684\u6570\u91cf\uff0c\u5e76\u5c06\u5176\u4ece\u6211\u4eec\u7684\u7b54\u6848\u4e2d\u5220\u9664\uff0c\u56e0\u4e3a\u8fd9\u5141\u8bb8\u6211\u4eec\u5ffd\u7565\u8fc7\u5ea6\u8ba1\u6570\uff0c\u5e76\u4f7f\u7528\u975e\u5e38\u7b80\u5355\u7684\u5f62\u72b6\u7684\u8def\u5f84\u3002\n\u6211\u4eec\u7684\u95ee\u9898\u73b0\u5728\u66f4\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u6709\u4ece\u67d0\u4e2a\u8282\u70b9\u5230\u5b83\u7684\u4e00\u4e2a\u7956\u5148\u8282\u70b9\u7684\u8def\u5f84\u6211\u4eec\u60f3\u8981\u8ba1\u7b97\u91cd\u53e0\u7684\u5bf9\u7684\u6570\u91cf\u3002\n\u4e00\u4e2a\u76f8\u4f3c\u7684\uff0c\u66f4\u5e7f\u4e3a\u4eba\u77e5\u7684\u95ee\u9898\u662f\u8fd9\u4e2a\uff0c\u4f46\u662f\u662f\u4ee5\u4e00\u7ef4\u7ebf\u6bb5\u7684\u5f62\u5f0f\u3002\n\u5f62\u5f0f[Ai,Bi]\u8868\u793a\u6709\u4e00\u6761\u76f4\u7ebf\u4eceAi\u5f00\u59cb\u548c\u7ed3\u675fBi\u6211\u4eec\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u89e3\u51b3\u5b83\u3002\u5728\u6bcf\u4e00\u6bb5\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u4ece\u4f60\u7684\u7b54\u6848\u4e2d\u51cf\u53bb\u5728\u5b83\u4e4b\u524d\u5f00\u59cb\u7684\u6bb5\u6570\uff0c\u800c\u5728\u6bcf\u4e00\u6bb5\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u52a0\u4e0a\u5728\u8fd9\u6bb5\u7ed3\u675f\u4e4b\u524d\u5f00\u59cb\u7684\u6bb5\u6570\u3002(\u5bf9\u4e8e\u5728\u76f8\u540c\u4f4d\u7f6e\u5f00\u59cb/\u7ed3\u675f\u7684\u6bb5\u5bf9\u8981\u7a0d\u5fae\u5c0f\u5fc3)\u3002\u5728\u6811\u5f62\u56fe\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u540c\u6837\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u9884\u8ba1\u7b97\u6765\u8ba1\u7b97\u4ece\u6bcf\u4e2a\u8282\u70b9\u7684\u7956\u5148\u5f00\u59cb\u7684\u8def\u5f84\u6570\u3002\u5bf9\u4e8e\u4ece\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\u7684\u6bcf\u6761\u8def\u5f84\u4e00\u4e2a\u7956\u5148B\uff0c\u6211\u4eec\u6dfb\u52a0(\u4ece\u7956\u5148\u7684\u8def\u5f84\u5f00\u59cb\u7684\u8def\u5f84\u6570B)\u6765\u56de\u7b54\u6211\u4eec\u7684\u95ee\u9898\u3002\n\u6211\u4eec\u5c0f\u5fc3\u5730\u4e0d\u53bb\u6570\u90a3\u4e9b\u5728\u8def\u5f84\u4e0a\u6709\u76f8\u540c\u6700\u4f4e\u8fb9\u7684\u5bf9\u3002\n\u611f\u8c22Dhruv Rohatgi\n\n\n\n```cpp\n\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <map>\nusing namespace std;\n#define MAXN 200000\n \nint N,Q;\nvector<int> edges[MAXN];\nint x[MAXN], y[MAXN], anc[MAXN];\nint p[MAXN][20];\nint d[MAXN];\n \nint numInters[MAXN];\nint psInters[MAXN];\nmap<pair<int,int>, int> MP;\n \nvoid dfs(int i,int par,int depth)\n{\n\tp[i][0] = par;\n\td[i] = depth;\n\tfor(int j=0;j<edges[i].size();j++)\n\t\tif(edges[i][j]!=par)\n\t\t\tdfs(edges[i][j],i, depth+1);\n}\n \nvoid dfsSum(int i, int ps)\n{\n\tpsInters[i] = ps;\n\tfor(int j=0;j<edges[i].size();j++)\n\t\tif(edges[i][j]!=p[i][0])\n\t\t\tdfsSum(edges[i][j], ps + numInters[edges[i][j]]);\n}\n \nvoid precompute()\n{\n\tdfs(0, -1, 0);\n\tfor(int j=1;j<20;j++)\n\t\tfor(int i=0;i<N;i++)\n\t\t{\n\t\t\tif(p[i][j-1]==-1)\n\t\t\t\tp[i][j] = -1;\n\t\t\telse\n\t\t\t\tp[i][j] = p[p[i][j-1]][j-1];\n\t\t}\n}\n \nint lca(int a,int b)\n{\n\tfor(int j=19;j>=0;j--)\n\t\tif(d[p[a][j]] >= d[b])\n\t\t\ta = p[a][j];\n\tfor(int j=19;j>=0;j--)\n\t\tif(d[p[b][j]] >= d[a])\n\t\t\tb = p[b][j];\n\tfor(int j=19;j>=0;j--)\n\t\tif(p[a][j]!=p[b][j])\n\t\t\ta = p[a][j], b = p[b][j];\n\tif(a==b) return a;\n\treturn p[a][0];\n}\n \nint topEdge(int top,int bot)\n{\n\tif(top==bot)\n\t\treturn -1;\n\tfor(int j=19;j>=0;j--)\n\t\tif(d[p[bot][j]] > d[top])\n\t\t\tbot = p[bot][j];\n\treturn bot;\n}\n \nlong long choose2(int m)\n{\n\treturn (((long long) m)*(m-1))/2;\n}\n \nint main()\n{\n\tint M,a,b;\n\tcin >> N >> M;\n\tQ = M - (N-1);\n\tfor(int i=0;i<N-1;i++)\n\t{\n\t\tcin >> a >> b;\n\t\ta--,b--;\n\t\tedges[a].push_back(b);\n\t\tedges[b].push_back(a);\n\t}\n\tprecompute();\n\tlong long ans = 0;\n\tfor(int i=0;i<Q;i++)\n\t{\n\t\tcin >> x[i] >> y[i];\n\t\tx[i]--,y[i]--;\n\t\tanc[i] = lca(x[i],y[i]);\n\t\tint topx = topEdge(anc[i], x[i]);\n\t\tif(topx != -1)\n\t\t{\n\t\t\tans -= numInters[topx] + 1;\n\t\t\tnumInters[topx]++;\n\t\t}\n\t\tint topy = topEdge(anc[i], y[i]);\n\t\tif(topy != -1)\n\t\t{\n\t\t\tans -= numInters[topy] + 1;\n\t\t\tnumInters[topy]++;\n\t\t}\n\t\tif(topx != -1 && topy != -1)\n\t\t{\n\t\t\tif(topx>topy) swap(topx,topy);\n\t\t\tans -= MP[make_pair(topx,topy)];\n\t\t\tMP[make_pair(topx,topy)]++;\n\t\t}\n\t}\n\tdfsSum(0,0);\n\tfor(int i=0;i<Q;i++)\n\t\tans += psInters[x[i]] + psInters[y[i]] - 2*psInters[anc[i]];\n\tcout << ans << '\\n';\n}\n```\n",
        "postTime": 1548923349,
        "uid": 30862,
        "name": "felixwu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5203 \u3010[USACO19JAN]Exercise Route\u3011"
    }
]