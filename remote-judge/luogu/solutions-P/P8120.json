[
    {
        "content": "~~\u4e0d\u8981\u5728\u610f\u6211\u7528\u8bb2\u8bc4\u7684\u7a3f\u5b50\u6765\u7cca\u9898\u89e3~~\n\n~~\u4e0d\u8981\u5410\u69fd\u9000\u5f79\u9009\u624b\u6574\u51fa\u6765\u7684\u975e\u5e38\u4e0d\u4e13\u4e1a\u7684\u8bb2\u7a3f~~\n\n>\u201c\u90a3\u4e48\uff0c\u8df3\u8fc7\u4e2d\u573a\u4f11\u606f\uff0c\u6211\u4eec\u6765\u8bb2\u6700\u540e\u4e00\u9898\u3002\u201d\n\n## 0x00 \u9898\u610f\u89c2\u5bdf\n- \u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217\uff0c\u503c\u57df\u5728 $[1,m]$\u3002\n- $B$ \u662f\u4e00\u4e2a\u6392\u5217\uff0c$A$ \u957f\u5ea6\u4e3a $n$\u3002\n- \u591a\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee $A$ \u7684\u4e00\u4e2a\u5b50\u533a\u95f4\uff0c\u5728\u5b50\u533a\u95f4\u91cc\u627e\u5230\u6700\u957f\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u5b83\u662f $B$ \u7684\u5b50\u4e32\u3002\n\n\u90a3\u4e48\u5f88\u663e\u7136\u7b2c\u4e00\u4e0b\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u6309\u7167\u7ed9\u5b9a\u7684 $B$ \u91cd\u65b0\u7f16\u53f7\uff0c\u4f7f\u5f97 $A$ \u4e2d\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u5728 $B$ \u4e2d\u7684**\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8**\uff0c\u540c\u65f6\u4f7f\u5f97 $B$ \u53d8\u4e3a**\u5347\u5e8f**\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u628a $A$ \u4e2d\u7684\u6240\u6709\u6570\u6362\u6210 $B$ \u4e2d\u5b83\u7684\u4e0b\u6807\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u5728 $A$ \u7684\u5b50\u533a\u95f4\u5185\u627e\u6700\u957f\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u5b83\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u9012\u589e\u6574\u6570\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a  \n$\\text{\\tt\\textcolor{blue}{B}:\\textcolor{blue}{1 2 5 4 3}}$  \n$\\text{\\tt\\textcolor{red}{A}:\\textcolor{red}{4 2 5 1 4 2 3}}$  \n\u53d8\u6362\u540e\uff1a  \n$\\text{\\tt\\textcolor{purple}{A}:\\textcolor{purple}{4 2 3 1 4 2 5}}$\n\n## 0x01 \u89e3\u9898\u601d\u8def\n\u524d\u6ce8\uff1a\u4e0b\u6587\u4e2d `dp` \u4ee3\u8868\u300c\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u300d\u65f6\u4e0d\u4f7f\u7528 $\\LaTeX$\uff0c\u4ee3\u8868\u300c\u4ee3\u7801\u4e2d\u7684\u6570\u7ec4\u300d\u65f6\u4f7f\u7528\u3002\n\n\u8003\u8651\u66b4\u529b\u6bcf\u6b21\u4ee5 $O(l)$ \u590d\u6742\u5ea6\u5f53\u505a dp \u505a\uff0c\u5176\u4e2d $l$ \u4e3a\u5f53\u524d\u8be2\u95ee\u533a\u95f4\u957f\u5ea6\u3002\n\n\u4ece\u5de6\u5f80\u53f3\u8fdb\u884c\u52a8\u6001\u89c4\u5212\uff0c\u8bb0 $ls_i$ \u4ee3\u8868 dp \u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u65f6\u5019**\u503c** $i$ \u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684**\u4f4d\u7f6e**\u3002\n```cpp\nfor(int i = 1; i <= n; ++i){\n    dp[i] = dp[ls[a[i] \u2212 1]] + 1;\n    ans = max(ans, dp[i]);\n    ls[a[i]] = i;\n}\n```\n\n\u590d\u6742\u5ea6 $O(qn)$\u3002\u53ef\u60dc~~\u6ca1\u6709\u90e8\u5206\u5206~~\u73b0\u5728\u6709\u4e86\uff0c\u671f\u671b\u5f97\u5206 10\u3002\n\n\u4e00\u770b\u9898\u76ee\u5176\u5b9e\u662f\u4e2a\u83ab\u961f\u677f\u5b50\uff0c\u53ea\u662f\u5728\u7ebf\uff0c\u4f46\u662f\u6709\u79bb\u7ebf\u90e8\u5206\u5206\uff0c\u671f\u671b\u5f97\u5206 40\uff08\u52a0\u4e0a\u66b4\u529b\uff09\u3002\n\n---\n\n\u8003\u8651\u4e00\u79cd\u7279\u6b8a\u7684\u5206\u5757\uff0c\u6c42\u51fa\u6bcf\u4e2a\u53ef\u80fd\u7684\u201c\u5b8c\u6574\u5757\u533a\u95f4\u201d\uff08\u5373\u6574\u5757\uff09\u7684\u7b54\u6848\uff0c\u5bf9\u4e8e\u4e0d\u5728\u5b8c\u6574\u5757\u4e2d\u7684\u90e8\u5206\uff0c\u7c7b\u6bd4\u83ab\u961f\uff0c\u5411\u5de6\u5411\u53f3\u6269\u5c55\u533a\u95f4\uff0c\u90a3\u4e48\u5411\u5de6\u5411\u53f3\u90fd\u53ea\u4f1a\u6700\u591a\u6269\u5c55\u4e00\u4e2a\u533a\u95f4\u957f\u5ea6\u3002\u663e\u7136\u5982\u679c\u9884\u5904\u7406\u5f97\u5f53\u590d\u6742\u5ea6\u53ef\u4ee5\u63a5\u53d7 ~~\uff08\u7136\u800c\u8981\u5361\u5e38\uff09~~\u3002\n\n\u7a0d\u7a0d\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u9996\u5148\u5904\u7406\u51fa\uff1a\n- $bel_i$\uff1a\u6bcf\u4e2a\u4f4d\u7f6e\u6240\u5c5e\u7684\u5757\n- $pans_{l,r}$\uff1a\u4e24\u4e2a\u5b8c\u6574\u5757\u4e4b\u95f4\u7684\u7b54\u6848\n- $ls_i$\uff1a$i$ \u5de6\u8fb9\u79bb\u5b83\u6700\u8fd1\u7684\u503c\u4e3a $a_i-1$ \u7684\u4e0b\u6807\n- $rs_i$\uff1a$i$ \u53f3\u8fb9\u79bb\u5b83\u6700\u8fd1\u7684\u503c\u4e3a $a_i+1$ \u7684\u4e0b\u6807\n\n\u5bf9\u4e8e\u533a\u95f4\u6ca1\u6709\u5305\u542b\u5b8c\u6574\u5757\u7684\u76f4\u63a5\u66b4\u529b\uff08\u663e\u7136\u957f\u5ea6\u6700\u5927\u4e5f\u5c31\u4e24\u500d\u5757\u957f\uff09\u3002\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86\uff0c\u548c\u524d\u9762\u7684\u66b4\u529b\u6ca1\u533a\u522b\u3002\n\n\u5305\u542b\u5b8c\u6574\u5757\u7684\uff0c\u53d6\u6700\u63a5\u8fd1\u5b83\u7684**\u6574\u5757\u5b50\u533a\u95f4**\u7136\u540e\u6269\u5c55\u3002  \n\u5148\u632a\u52a8\u53f3\u7aef\u70b9\uff0c\u8003\u8651\u53f3\u8fb9\u589e\u52a0\u7684\u5143\u7d20\u53ef\u80fd\u7684\u8d21\u732e\u3002\u8d21\u732e\u6765\u81ea\u4e24\u5904:  \n- \u4ee5\u5b8c\u6574\u5757\u4e2d\u5143\u7d20\u4e3a\u672b\u7aef\u70b9\u7684\u533a\u95f4  \n- \u4ee5\u53f3\u7aef\u70b9\u632a\u52a8\u7ecf\u8fc7\u7684\u5143\u7d20\u4e3a\u672b\u7aef\u70b9\u7684\u533a\u95f4  \n\n\uff08\u6709\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u8003\u8651 dp \u7684\u8fc7\u7a0b\uff0c\u672c\u8d28\u4e0a\u662f\u8003\u8651\u201c\u5982\u679c\u66b4\u529b dp \u5230\u8fd9\u4e00\u4f4d\u4e86\u4f1a\u600e\u4e48\u66f4\u65b0\u201d\uff09\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\uff0c\u76f4\u63a5\u5728\u5411\u53f3\u6269\u5c55\u65f6\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u5373\u53ef\uff0c\u505a\u8d77\u6765\u975e\u5e38\u5bb9\u6613\uff0c\u5c31\u4e0d\u7ec6\u8bb2\u4e86\u3002  \n\n---\n\n```cpp\nmemset(tmp, 0, sizeof(int) * (m + 1));\nfor(int i = 1; i <= n; ++i)\n    ls[i] = tmp[a[i] \u2212 1], tmp[a[i]] = i;\nmemset(tmp, 0, sizeof(int) * (m+1));\nfor(int i = n; i >= 1; \u2212\u2212i)\n    rs[i] = tmp[a[i] + 1], tmp[a[i]] = i;\nfor(int l = 1; l <= n; l += blsize) //prel \u7684\u5904\u7406 \n{\n    ans = 0;\n    int *const dp = predp[bel[l]];\n    memset(dp, 0, sizeof(int) * (n + 1)); //\u6e05\u7a7a\n    for(int r = l; r <= n; ++ r)\n    {\n        dp[r] = dp[ls[r]] + 1;\n        ans < dp[r] ? ans = dp[r] : 114514; //\uff08\n        if(r == n || bel[r] != bel[r + 1])\n        //dp \u5230\u672b\u5c3e\u4e86\u8bb0\u4e00\u4e0b\n        blkans[bel[l]][bel[r]] = ans;\n    }\n}\n```\n---\n\u90a3\u4e48\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u5462\uff1f\u9760\u73b0\u6709\u7684\u4e1c\u897f\u57fa\u672c\u6ca1\u6cd5\u7ef4\u62a4\u3002  \n\u5982\u679c\u66b4\u529b\uff0c\u90a3\u4e48\u8fd9\u4e00\u6bb5\u662f\u4e00\u4e2a\u66b4\u529b dp \u7684\u6536\u5c3e\u5de5\u4f5c\uff0c\u8003\u8651\u80fd\u4e0d\u80fd\u76f4\u63a5\u8df3\u8fc7\u524d\u9762\u7684 dp \u9636\u6bb5\u76f4\u63a5\u5904\u7406\u8fd9\u4e00\u5c0f\u6bb5\u7684\u8d21\u732e\u3002\n\n\u53d1\u73b0\u53ef\u4ee5\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u4e00\u6bb5 dp \u8fc7\u7a0b\u4e2d\u7684\u5de6\u7aef\u70b9\u4e00\u5b9a\u662f\u67d0\u4e2a\u5757\u7684\u5de6\u7aef\u70b9\u3002  \n\u7ef4\u62a4 $prel_{bl,r}$ \u4ee3\u8868\u5bf9\u4ece\u7b2c $bl$ \u4e2a\u5757\u7684\u5de6\u7aef\u70b9\u5230\u6570\u5217\u672b\u5c3e\u8fd9\u4e2a\u533a\u95f4\u8fdb\u884c dp \u65f6\u7684 $dp$ \u6570\u7ec4\u3002  \n\u5373\uff0c\u5de6\u7aef\u70b9\u5728\u7b2c $bl$ \u4e2a\u5757\u5f00\u5934\u6216\u540e\u8fb9\uff0c\u4ee5 $r$ \u7ed3\u5c3e\u7684\u6700\u957f\u6ee1\u8db3\u6761\u4ef6\u5e8f\u5217\u957f\u5ea6\u3002\n\n\u540c\u7406\uff0c\u7ef4\u62a4 $prer_{bl,l}$ \u4ee3\u8868\u5de6\u7aef\u70b9\u4e3a $l$\uff0c\u53f3\u7aef\u70b9\u5728\u7b2c $bl$ \u4e2a\u5757\u672b\u5c3e\u6216\u524d\u8fb9\u7684\u6700\u957f\u6ee1\u8db3\u6761\u4ef6\u5e8f\u5217\u957f\u5ea6\u3002\n\n\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u53cd\u8fc7\u6765\u7ef4\u62a4 $dp$ \u6570\u7ec4\u3002\n\u7ef4\u62a4\u4e00\u4e2a $f_i$ \u4ee3\u8868**\u5f53\u524d\u533a\u95f4\u5185**\uff0c**\u53cd\u5411**\u7684 $dp$ \u6570\u7ec4\uff0c\u5373\u5728\u5f53\u524d\u533a\u95f4\u5185\u4ee5 $i$ \u503c\u5f00\u5934\u7684\u6700\u957f\u6ee1\u8db3\u8981\u6c42\u7684\u5b50\u5e8f\u5217\u3002  \n\u6bcf\u5f53\u5728\u53f3\u8fb9\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u8003\u8651\u5b83\u5bf9\u5de6\u8fb9\u7684\u6240\u6709\u6570 $f_i$ \u7684\u5f71\u54cd\u3002\n\u6839\u636e\u5b9a\u4e49\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u6709\uff1a  \n$$f(a_i+1-prel_{bel(l),i})=\\max\\{f(a_i+1-prel_{bel(l),i}),prel_{bel(l),i}\\}$$\n\u8fd9\u4e2a\u597d\u7406\u89e3\uff0c\u7528\u9884\u5904\u7406\u51fa\u6765\u7684\u4fe1\u606f\u53bb\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u7684 $f$\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5411\u53f3\u6269\u5c55\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u8d21\u732e\u6765\u81ea\u4e24\u5904\uff1a\n\n- \u6574\u5757\u5230\u53f3\u6563\u5757\u7684\u8d21\u732e\uff1b\n- \u53f3\u6563\u5757\u4e2d\u4e00\u4e2a\u5143\u7d20\u5230\u53e6\u4e00\u4e2a\u5143\u7d20\u7684\u8d21\u732e\u3002\n\n\u90a3\u4e48\u5411\u5de6\u79fb\u52a8\u533a\u95f4\u7684\u8fc7\u7a0b\u5462\uff1f\u540c\u7406\u3002\u6ce8\u610f\u8981\u8003\u8651**\u5de6\u8fb9\u6269\u5f20\u7684\u533a\u95f4**\u548c\u53f3\u8fb9**\u5df2\u7ecf\u6269\u5f20**\u7684\u975e\u5b8c\u6574\u5757\u90e8\u5206\u4e00\u8d77\u9020\u6210\u5f71\u54cd\u3002  \n\u6211\u4eec\u53d1\u73b0\u8d21\u732e\u6765\u81ea\u4e09\u5904\uff1a\n\n- \u5de6\u6563\u5757\u5230\u6574\u5757\u7684\u8d21\u732e\uff1b\n- \u5de6\u6563\u5757\u4e2d\u4e00\u4e2a\u5143\u7d20\u5230\u53e6\u4e00\u4e2a\u5143\u7d20\u7684\u8d21\u732e\u3002\n- \u5de6\u6563\u5757\u5230\u53f3\u6563\u5757\u7684\u8d21\u732e\u3002\n$$f(a_i)=\\max\\{f(a_i),f(a_i+1)+1,prer_{bel(r),i}\\}$$\n\u5206\u522b\u5bf9\u5e94\u4e09\u79cd\u8d21\u732e\uff0c\u5f88\u597d\u7406\u89e3\u3002\n## 0x02 \u6ce8\u610f\u4e8b\u9879&\u590d\u6742\u5ea6\u5206\u6790\n- \u6ce8\u610f\u5982\u679c\u4e24\u4e2a $n\\sqrt n$ \u957f\u5ea6\u7684\u9884\u5904\u7406\u6570\u7ec4\u5206\u5f00\u5f00\u4f1a MLE\u3002\u8003\u8651\u5f00\u5728\u4e00\u8d77\uff0c\u7531\u4e8e `prel[bl+1]` \u4e0e `prer[bl]` \u7684\u7b2c\u4e8c\u7ef4\u4e0b\u6807\u4e0d\u91cd\u5408\uff0c\u53ef\u4ee5\u636e\u6b64\u538b\u7f29\u3002\n- \u6ce8\u610f\u64a4\u9500\u64cd\u4f5c\u4e0d\u80fd\u76f4\u63a5 `memset` \u54e6\uff0c\u4f1a\u6302 TLE \u7684\u3002\n- \u5b89\u6392\u4e00\u4e2a\u5feb\u901f\u7684 IO\uff0c\u5e76\u4e14\u4e0d\u8981\u8f7b\u6613\u5237\u65b0\u7f13\u51b2\u533a\uff0c\u65e0\u8bba\u662f\u52a0\u901f\u8fc7\u7684 `iostream` \u8fd8\u662f\u5e26\u5237\u65b0\u7684\u6a21\u677f\u3002\n\n\u590d\u6742\u5ea6\uff1a  \n\u65f6\u95f4 $O((n+q)\\sqrt n)$ \uff08\u5757\u957f\u53d6 $\\sqrt n$\uff09\u3002  \n\u7a7a\u95f4 $O(n\\sqrt n)$\u3002\n\n## 0x03 \u5f15\u7528\u8d44\u6599\n\n\u65e0\u3002\n\n\u5404\u4f4d\u53ef\u4ee5\u5728\u6708\u8d5b[\u8bb2\u8bc4\u9875\u9762](https://class.luogu.com.cn/course/lgr101)\u4e0b\u8f7d\u5230\u8bb2\u7a3f\u3002\n\n\u9a8c\u9898\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#include \"wdoi-fastio.hpp\" // \u7701\u7565\u5934\u6587\u4ef6\n#define cin fio\n#define cout fio\n#define endl _fios::endl\nfast_iostream<> fio;\nusing namespace std;\nconst int maxn=3e5+4,maxsqrtn=1304;\nint n,m,q;// as given.\nint a[maxn],b[maxn],p[maxn];// as above.\n// the array p will be used over and over again./tyt\nint ans;// lastans\nint ql,qr;// l and r for each query\nint blsize;// size of blocks\nint *const tmp=p;//\u522b\u540d\uff08\u9003\nint ls[maxn],rs[maxn];\nint blkans[maxsqrtn][maxsqrtn],bel[maxn];//\u5206\u5757\u57fa\u64cd\nint predp[maxsqrtn][maxn];//prel,prer\ninline int max(int a,int b) { return a<b?b:a; } \n\nint main()\n{\n    cin>>m>>n>>q;\n    blsize=sqrt(n)*0.8;\n    for(register int i=1;i<=m;++i) cin>>b[i],p[b[i]]=i;\n    for(register int i=1;i<=n;++i) cin>>a[i],a[i]=p[a[i]];\n    for(int i=1;i<=n;++i)\n        bel[i]=(i-1)/blsize+1;\n    // 2nk+2ql, k=Number of blocks, l = length of each block\n    memset(tmp,0,sizeof(int)*(m+1));\n    for(int i=1;i<=n;++i)\n        ls[i]=tmp[a[i]-1],tmp[a[i]]=i;\n    memset(tmp,0,sizeof(int)*(m+1));\n    for(int i=n;i>=1;--i)\n        rs[i]=tmp[a[i]+1],tmp[a[i]]=i;\n    for(int l=1;l<=n;l+=blsize)// prel\u7684\u5904\u7406\n    {\n        ans=0;\n        int *const dp=predp[bel[l]];\n        memset(dp,0,sizeof(int)*(n+1));//\u6e05\u7a7a\n        for(int r=l;r<=n;++r)\n        {\n            dp[r]=dp[ls[r]]+1;\n            ans<dp[r]?ans=dp[r]:114514;//\u4e0d\u8981\u5728\u610f\uff08\n            if(r==n || bel[r]!=bel[r+1]) //dp\u5230\u672b\u5c3e\u4e86\u8bb0\u4e00\u4e0b\n                blkans[bel[l]][bel[r]]=ans;\n        }\n    }\n    for(int i=1;i+blsize-1<=n;i+=blsize)\n    {\n        int r=i+blsize-1;//prer\n        int *const dp=predp[bel[r]+1];\n        //\u4e0d\u80fd\u7b80\u5355\u7684\u76f4\u63a5\u4f7f\u7528dp\u6570\u7ec4\u5e76\u6e05\u7a7a\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u5230\u524d\u9762\u7684prel\n        //\u5f53\u7136\u4f60\u7b97\u597d\u4e86\u54ea\u4e9b\u662fprer\u54ea\u4e9b\u662fprel\u4e5f\u884c\n        //\u6ce8\u610f\u4e00\u4e0b\uff0c\u672c\u6765\u6c42\u7684\u662fprer[bl][i]\n        //\u8fd9\u91cc\u5b58\u5728predp[bl+1][i]\u7684\u76ee\u7684\u662f\u9632\u6b62\u91cd\u53e0\n        //\u5f53\u7136\u7531\u4e8e\u5c0f\u4e8e\u4e24\u4e2a\u5757\u957f\u65f6\u66b4\u529b\u6240\u4ee5\u4f60\u5199predp[bl][i]\u4e5f\u6ca1\u5173\u7cfb\n        //\u4f46\u662f\u8fd9\u6837\u4e0d\u597d\uff08\n        //\u6211\u4e00\u5f00\u59cb\u9a8c\u9898\u7684\u65f6\u5019\u5c31\u662f\u8fd9\u4e48\u5199\u7684\uff0c\u73b0\u5728\u91cd\u6784\u8fd8\u662f\u5f97\u6539\u6539\n        memset(p,0,sizeof(int)*(n+1));\n        for(int l=r;l;--l)\n            p[l]=p[rs[l]]+1;\n        for(int l=r;l;--l)\n            dp[l]=p[l];//\u540c\u7406\u7684dp\n    }\n    ans=0;\n    memset(p,0,sizeof(p));//\u6e05\u4e00\u6e05\n    int *const dp=p;\n    while(q--)\n    {\n        cin>>ql>>qr;\n        ql^=ans,qr^=ans;\n        int lbel=bel[ql]+1,rbel=bel[qr]-1;\n        if(lbel<=rbel)//\u6269\u5c55\u7b54\u6848\n        {\n            ans=blkans[lbel][rbel];\n            for(int i=rbel*blsize+1;i<=qr;++i)//move right bound\n                ans=max(ans,dp[a[i]+1-predp[lbel][i]]=max(dp[a[i]+1-predp[lbel][i]],predp[lbel][i])); \n            for(int i=(lbel*blsize-blsize);i>=ql;--i)//move left bound\n            {\n                ans=max(ans,dp[a[i]]=max(dp[a[i]],\n                    max(\n                        predp[rbel+1][i],\n                        dp[a[i]+1]+1\n                    )\n                ));\n            }\n            //\u6ce8\u610f\u76f4\u63a5memset\u6e05\u7a7a\u4f1aT\n            for(int i=rbel*blsize+1;i<=qr;++i) dp[a[i]+1-predp[lbel][i]]=0;\n            for(int i=(lbel*blsize-blsize);i>=ql;--i) dp[a[i]]=0;\n            cout<<ans<<\"\\n\";//\u522bendl\n        }\n        else //\u66b4\u529b\n        {\n            ans=0;\n            for(int i=ql;i<=qr;++i)\n                if(dp[a[i]]<dp[a[i]-1]+1)\n                    dp[a[i]]=max(dp[a[i]],dp[a[i]-1]+1),\n                    ans=max(ans,dp[a[i]]);\n            for(int i=ql;i<=qr;++i) dp[a[i]]=0;\n            // \u6ce8\u610f\u64a4\u9500\u64cd\u4f5c\u4e0d\u80fd\u76f4\u63a5memset\u54e6\uff0c\u4f1a\u6302\u7684\n            cout<<ans<<\"\\n\";\n        }\n    }\n    fio.flush();\n    return 0;\n}\n```",
        "postTime": 1644403216,
        "uid": 100250,
        "name": "minstdfx",
        "ccfLevel": 7,
        "title": "P8120 \u300cRdOI R3.5\u300dRMSQ \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u51fa\u9898\u4eba\u5b98\u65b9\u9898\u89e3\u3002\n\n### \u8d85\u7ea7\u5927\u66b4\u529b\n\n\u6211\u4eec\u5148\u8003\u8651\u66b4\u529b\u548b\u505a\uff0c\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a $b$ \u5e8f\u5217\u91cd\u7f16\u4e2a\u53f7\uff0c\u8bbe $dp(i)$ \u4ee3\u8868\u4ee5\u4e0b\u6807 $i$ \u7ed3\u5c3e\u7684\u6700\u957f\u4f18\u7f8e\u5e8f\u5217\u957f\u5ea6\u3002\u5219\u6709\u4e2a\u5f88\u663e\u7136\u7684 dp\uff1a\n\n$$\ndp(i)=\\max_{j=1}^{i-1}dp(j)+1\\ (a_i=a_j+1).\n$$\n\n\u76f4\u63a5 $O(qn^2)$ \u641e\u5c31\u884c\u3002\n\n### \u5927\u66b4\u529b\n\n\u8fd9\u4e1c\u897f\u663e\u7136\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u6211\u4eec\u8bb0\u5f55 $lst(i)$ \u4ee3\u8868\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u503c $i$ \u7684\u4e0b\u6807\uff1a\n\n$$\ndp(i)=dp(lst(a_i))+1\\\\\nlst(a_i)=i.\n$$\n\n\u5373\u53ef\u4f18\u5316\u4e3a $O(qn)$\u3002\n\n### \u66b4\u529b\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5047\u5982\u4f60\u5f53\u524d\u5904\u7406\u7684\u533a\u95f4\u662f $[l,r]$\uff0c\u8be2\u95ee\u7684\u533a\u95f4\u662f $[l,r+1]$\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u7684 $dp$ \u503c\u548c $lst$ \u503c\u5f88\u65b9\u4fbf\u5730\u8f6c\u79fb\u5230\u8be2\u95ee\u533a\u95f4\u3002\u4f46\u662f\u5982\u679c\u8be2\u95ee\u7684\u533a\u95f4\u662f $[l+1,r]$\uff0c\u5904\u7406\u8d77\u6765\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\u3002\u4f60\u53d1\u73b0\u8fd9\u73a9\u610f\u5c31\u662f\u56de\u6eda\u83ab\u961f\u7684\u5957\u8def\uff0c\u76f4\u63a5\u62ff\u56de\u6eda\u83ab\u961f\u505a\u5c31\u884c\uff0c\u590d\u6742\u5ea6 $O(n \\sqrt n)$\u3002\n\n### \u6b63\u89e3\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u83ab\u961f\u7684\u601d\u60f3\uff0c\u5199\u4e00\u4e2a\u652f\u6301\u5728\u7ebf\u7684\u7b97\u6cd5\u3002\n\n\u8003\u8651\u5206\u5757\uff0c\u6211\u4eec\u628a\u5e8f\u5217\u5206\u6210 $\\sqrt n$ \u4e2a\u5757\u3002\u9884\u5904\u7406\u51fa\u8be2\u95ee\u7b2c $l$ \u4e2a\u6574\u5757\u5230\u7b2c $r$ \u4e2a\u6574\u5757\u7684\u7b54\u6848 $preans(l,r)$\uff0c\u8be2\u95ee\u540e $r$ \u4e2a\u6574\u5757\u7684 dp \u6570\u7ec4 $pref(r,i)$\u3002\n\n\u540c\u65f6\uff0c\u6211\u4eec\u628a\u90a3\u4e2a dp \u53cd\u8fc7\u6765\uff0c\u8bbe $dp'(i)$ \u4e3a\u4ee5\u4e0b\u6807 $i$ \u5f00\u5934\u7684\u6700\u957f\u4f18\u7f8e\u5e8f\u5217\u957f\u5ea6\uff0c\u8f6c\u79fb\u5f0f\u5c31\u4f1a\u53d8\u6210\u8fd9\u6837\uff1a\n$$\ndp'(i)=\\max_{j=i+1}^n dp(j)+1\\ (a_i=a_j-1).\n$$\n\u540c\u6837\u4f18\u5316\u4e00\u4e0b\uff0c\u7528\u8fd9\u4e2a\u53cd\u8fc7\u6765\u7684 dp \u9884\u5904\u7406\u51fa\u8be2\u95ee\u524d $l$ \u4e2a\u5757\u7684\u53cd\u5411 dp \u6570\u7ec4 $preg(l,i)$\u3002\n\n\u8be2\u95ee\u7684\u65f6\u5019\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u5f53\u8be2\u95ee\u533a\u95f4\u957f\u5ea6 $\\le 2\\sqrt n$ \u65f6\u76f4\u63a5\u66b4\u529b\u505a\u3002\u5426\u5219\u6211\u4eec\u91c7\u7528\u4e00\u4e2a\u6700\u63a5\u8fd1\u7684\u6574\u5757 $[bl_l,bl_r]$ \u4f5c\u4e3a\u521d\u59cb\u533a\u95f4\uff0c\u7136\u540e\u5148\u5411\u53f3\uff0c\u518d\u5411\u5de6\u6269\u5c55\u533a\u95f4\u3002\n\n\u5411\u53f3\u6269\u5c55\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u8d21\u732e\u6765\u81ea\u4e24\u5904\uff1a\n\n- \u6574\u5757\u5230\u53f3\u6563\u5757\u7684\u8d21\u732e\uff1b\n- \u53f3\u6563\u5757\u4e2d\u4e00\u4e2a\u5143\u7d20\u5230\u53e6\u4e00\u4e2a\u5143\u7d20\u7684\u8d21\u732e\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u9884\u5904\u7406\u51fa\u6765\u7684 $pref(bl_l,i)$ \u6765\u67e5\u8be2\u5373\u53ef\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\uff0c\u76f4\u63a5\u5728\u5411\u53f3\u6269\u5c55\u65f6\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u5411\u5de6\u6269\u5c55\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u8d21\u732e\u6765\u81ea\u4e09\u5904\uff1a\n\n- \u5de6\u6563\u5757\u5230\u6574\u5757\u7684\u8d21\u732e\uff1b\n- \u5de6\u6563\u5757\u4e2d\u4e00\u4e2a\u5143\u7d20\u5230\u53e6\u4e00\u4e2a\u5143\u7d20\u7684\u8d21\u732e\u3002\n- \u5de6\u6563\u5757\u5230\u53f3\u6563\u5757\u7684\u8d21\u732e\u3002\n\n\u5bf9\u4e8e\u524d\u4e24\u79cd\uff0c\u5904\u7406\u8d77\u6765\u548c\u53f3\u6563\u5757\u57fa\u672c\u4e00\u81f4\uff0c\u9ebb\u70e6\u5c31\u5728\u4e8e\u6700\u540e\u4e00\u79cd\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u65b9\u4fbf\u7684\u89e3\u51b3\u65b9\u6cd5\uff1a\u5728\u79fb\u52a8\u5de6\u53f3\u7aef\u70b9\u7684\u540c\u65f6\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 $f(i)$ \u4ee3\u8868\u4ee5**\u503c** $i$ \u5f00\u5934\u7684\u6700\u957f\u4f18\u7f8e\u5e8f\u5217\u957f\u5ea6\uff0c\u5219\u79fb\u52a8\u53f3\u7aef\u70b9\u81f3 $i$ \u65f6\uff0c\u6709\u5982\u4e0b\u8f6c\u79fb\uff1a\n$$\nf(a_i-pref(bl_l,i)+1) = \\max\\{f(a_i-pref(bl_l,i)+1),pref(bl_l,i)\\}.\n$$\n\u79fb\u52a8\u5de6\u7aef\u70b9\u81f3 $i$ \u65f6\uff0c\u6709\u5982\u4e0b\u8f6c\u79fb\uff1a\n$$\nf(a_i)=\\max\\{f(a_i),preg(bl_r,i),f(a_i+1)+1\\}.\n$$\n\u8fd9\u4e2a\u5f0f\u5b50\u5f88\u597d\u7406\u89e3\uff0c\u5927\u62ec\u53f7\u91cc\u7684\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u5bf9\u5e94\u4e09\u5904\u4e0d\u540c\u7684\u8d21\u732e\u4f4d\u7f6e\u3002\n\n\u9700\u8981\u5f3a\u8c03\u7684\u4e00\u70b9\u662f\uff0c\u8f93\u51fa\u7b54\u6848\u540e\uff0c\u4e0d\u8981\u7528 `memset` \u6e05\u7a7a $f$ \u6570\u7ec4\uff0c\u8981\u624b\u52a8\u8bb0\u5f55\u7528\u8fc7\u7684\u4e0b\u6807\u6e05\u96f6\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u4ee5\u65f6\u95f4 $O((n+q)\\sqrt n)$\uff0c\u7a7a\u95f4 $O(n\\sqrt n)$ \u7684\u590d\u6742\u5ea6\uff0c\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002",
        "postTime": 1644401866,
        "uid": 207996,
        "name": "yzy1",
        "ccfLevel": 9,
        "title": "P8120 \u9898\u89e3"
    },
    {
        "content": "# \u5206\u5757 RMSQ\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P8120)\n\n\u9898\u9762\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\uff0c\u6240\u4ee5\u5c31\u4e0d\u590d\u8ff0\u4e86\u3002\n\n## \u8f6c\u5316\n\n\u6211\u4eec\u53d1\u73b0\u6392\u5217\u4e0d\u9700\u8981\u5b58\u50a8\uff0c\u53ea\u8981\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e $Pos_i$ \u5373\u53ef\uff0c\u8bfb\u5165 $a$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u8f93\u5165\u7684\u7b2c $i$ \u6570\u5b57\u5728 $b$ \u4e2d\u7684\u4f4d\u7f6e $Pos_i$ \u5b58\u5165 $a_i$\u3002\u8fd9\u6837\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5728\u65b0\u7684 $a$ \u6570\u7ec4\u4e2d\u67e5\u8be2\u533a\u95f4\u7684\u6700\u957f\u8fde\u7eed\u4e0a\u5347\u5b50\u5e8f\u5217\u3002\n\n## \u79bb\u7ebf\n\n\u5bf9\u4e8e\u79bb\u7ebf\u7b97\u6cd5\uff0c\u6211\u4eec\u60f3\u5230\u83ab\u961f\u3002\u901a\u8fc7\u5b58\u50a8\u5f53\u524d\u533a\u95f4\u5185\uff0c\u4ee5 $a$ \u7684\u6bcf\u4e2a\u4f4d\u7f6e\u7ed3\u5c3e\u548c\u5f00\u5934\u7684\u5b50\u5e8f\u5217\u957f\u5ea6 $Len_{i, 0/1}$\uff0c\u53ef\u4ee5\u8fdb\u884c $O(1)$ \u7684\u8fb9\u754c\u4f38\u957f\u3002\u5229\u7528\u56de\u6eda\u83ab\u961f\uff0c\u8bbe\u7f6e\u5757\u957f\u4e3a $\\dfrac n{\\sqrt q}$ \u53ef\u4ee5\u505a\u5230 $O(m + n\\sqrt q)$ \u7684\u603b\u590d\u6742\u5ea6\u3002\n\n## \u5728\u7ebf\n\n\u540c\u6837\u662f\u5206\u5757\uff0c\u8bbe\u5757\u957f\u4e3a $B$\uff0c\u5757\u6570\u8bb0\u4e3a $A = \\lfloor \\frac nB \\rfloor$\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u548c\u51fa\u9898\u4eba\u7684\u5b98\u65b9\u7b97\u6cd5\u4e0d\u540c\uff0c\u6211\u9884\u5904\u7406\u4e86 $f$\uff0c$g$\uff0c$Mx$ \u4e09\u4e2a\u6570\u7ec4\u3002\n\n$f_{i, j, k}$ \u8868\u793a\u4ece\u7b2c $i$ \u4e2a\u5230\u7b2c $j$ \u4e2a\u6574\u5757\uff0c\u5916\u52a0\u53f3\u8fb9\u7d27\u6328\u7740\u7684 $k$ \u4e2a\u96f6\u6563\u5143\u7d20\u7ec4\u6210\u7684\u533a\u95f4 $[iB + 1, (j + 1)B + k]$ \u5185\uff0c\u4ee5 $k$ \u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\n\n$g_{i, j, k}$ \u8868\u793a\u4ece\u7b2c $i$ \u4e2a\u5230\u7b2c $j$ \u4e2a\u6574\u5757\uff0c\u5916\u52a0\u5de6\u8fb9\u7d27\u6328\u7740\u7684 $k$ \u4e2a\u96f6\u6563\u5143\u7d20\u7ec4\u6210\u7684\u533a\u95f4 $[iB + 1 - k, (j + 1)B]$ \u5185\uff0c\u4ee5 $k$ \u4e3a\u5f00\u5934\u7684\u6700\u957f\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\n\n$Mx_{i, j}$ \u8868\u793a\u4ece\u7b2c $i$ \u4e2a\u5230\u7b2c $j$ \u4e2a\u6574\u5757\u7ec4\u6210\u7684\u533a\u95f4 $[iB + 1, (j + 1)B]$ \u5185\u6700\u957f\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\n\u9884\u5904\u7406\u7684\u8fc7\u7a0b\u548c\u83ab\u961f\u533a\u95f4\u4f38\u957f\u662f\u4e00\u6837\u7684\u3002\u590d\u6742\u5ea6 $O(\\frac {n^2}B)$\u3002\n\n\u8be2\u95ee\u7684\u65f6\u5019\u628a\u67e5\u8be2\u7684\u5b50\u5e8f\u5217\u5206\u4e3a $3$ \u79cd:\n\n- \u53ea\u5b58\u5728\u4e8e\u6574\u5757\u533a\u95f4\u5185  \n  \u76f4\u63a5\u67e5\u8be2 $Mx$ \u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(1)$\u3002\n- \u5305\u542b\u6574\u5757\u53f3\u8fb9\u96f6\u6563\u5143\u7d20\n  \u56e0\u4e3a\u8fd9\u6837\u7684\u5b50\u5e8f\u5217\u53f3\u7aef\u4e00\u5b9a\u5728\u53f3\u8fb9\u96f6\u6563\u5143\u7d20\u4e2d\uff0c\u6211\u4eec\u679a\u4e3e\u53f3\u8fb9\u7684\u96f6\u6563\u5143\u7d20\u4f5c\u4e3a\u5b50\u5e8f\u5217\u7ed3\u5c3e\uff0c\u4e00\u5f00\u59cb\u9884\u5904\u7406\u7684 $f$ \u4fbf\u662f\u8fd9\u4e9b\u5b50\u5e8f\u5217\u53bb\u6389\u5de6\u8fb9\u96f6\u6563\u5143\u7d20\u7684\u957f\u5ea6 $TheL$\uff0c\u6839\u636e\u5b83\u4eec\u7684\u503c\u548c\u5b83\u4eec\u5bf9\u5e94\u7684 $f$ \u503c\u7b97\u51fa\u5f00\u5934\u5143\u7d20 $Le$\uff0c\u628a\u957f\u5ea6\u63d2\u5165\u8f85\u52a9\u6570\u7ec4 $Len_{Le}$\u3002\u8868\u793a\u53bb\u6389\u5de6\u8fb9\u96f6\u6563\u5143\u7d20\u7684\u533a\u95f4\u5185\u4ee5 $Le$ \u4e3a\u5f00\u5934\u7684\u6700\u957f\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3a $TheL$\u3002\u7136\u540e\u5728 $Len$ \u4e2d\u53ea\u5b58\u5728\u521a\u521a\u63d2\u5165\u7684 $O(B)$ \u4e2a\u5143\u7d20\uff0c\u5f53\u524d\u533a\u95f4\u548c\u5f85\u67e5\u533a\u95f4\u53f3\u7aef\u70b9\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u5f53\u524d\u533a\u95f4\u5de6\u7aef\u70b9\u4f38\u957f\u5230\u5f85\u67e5\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u3002\u6b64\u65f6\u7528 $Len$ \u4e2d\u6700\u5927\u503c\u66f4\u65b0\u7b54\u6848\u3002\u6700\u540e\u5c06 $Len$ \u56de\u6eda\u5230\u7a7a\u6570\u7ec4\u3002\u590d\u6742\u5ea6 $O(B)$\u3002\n- \u4e0d\u5305\u542b\u6574\u5757\u53f3\u8fb9\u96f6\u6563\u5143\u7d20\uff0c\u5305\u542b\u6574\u5757\u5de6\u8fb9\u96f6\u6563\u5143\u7d20  \n  \u8fd9\u4e2a\u65f6\u5019\u679a\u4e3e\u6bcf\u4e2a\u5de6\u8fb9\u7684\u96f6\u6563\u5143\u7d20\u4f5c\u4e3a\u5de6\u7aef\u70b9\uff0c\u67e5\u8be2\u5b83\u4eec\u5bf9\u5e94\u7684 $g$ \u503c\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(B)$\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u5728 $O(B)$ \u5185\u5b8c\u6210\u4e00\u6b21\u67e5\u8be2\u3002\u5757\u957f\u53d6 $\\dfrac n{\\sqrt q}$ \u7684\u65f6\u5019\u53ef\u4ee5\u5f97\u5230 $O(m + n\\sqrt q)$ \u7684\u590d\u6742\u5ea6\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n\u8fd9\u91cc\u6211\u628a $n$\uff0c$m$ \u7684\u610f\u4e49\u53cd\u8fc7\u6765\u4e86\uff0c\u8fd9\u91cc\u63d0\u9192\u4e00\u4e0b\u907f\u514d\u8bef\u4f1a\u3002\n\n\u5bf9\u4e8e $f$ \u548c $g$\uff0c\u7531\u4e8e\u7a7a\u95f4\u4e0d\u591f\uff0c\u6240\u4ee5\u91c7\u7528\u4e86\u516c\u7528\u7a7a\u95f4\u7684\u624b\u6bb5\u3002\u53d1\u73b0\u6240\u6709 $i > j$ \u7684 $f_{i, j, k}$ \u548c $g_{i, j, k}$ \u90fd\u4e0d\u5b58\u5728\u3002\u5bf9\u4e8e $f$ \u6765\u8bf4\uff0c$i$ \u7684\u53d6\u503c\u4e3a $[0, A)$\u3002\u800c $g$ \u7684 $i$ \u53d6\u503c\u4e3a $(1, A)$\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a $g_{i, j, k}$ \u7684\u503c\u5b58\u5230 $f_{A - i, A - j, k}$ \u4e2d\u53bb\u3002\u4e3a\u4e86\u9632\u6b62 $i = j$ \u7684\u65f6\u5019\uff0c$f$ \u548c $g$ \u51b2\u7a81\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u628a\u539f\u672c $f_{i, j, k}$ \u7684\u503c\u5b58\u5230 $f_{i, j + 1, k}$ \u4e2d\u53bb\u3002\u8fd9\u6837\u7b2c $i$ \u884c\uff0c$f$ \u5360\u7528\u7b2c $(i, j]$ \u5217\uff0c$g$ \u5360\u7528\u7b2c $(0, i]$ \u5217\u3002\u4e0d\u4ea7\u751f\u51b2\u7a81\u3002\n\n\u4f46\u662f\u968f\u7740\u5757\u957f\u7684\u53d8\u5316\uff0c\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u4e09\u7ef4\u6570\u7ec4\u7684\u884c\u4e3a\u65e0\u6cd5\u6ee1\u8db3\u7075\u6d3b\u53d8\u5316\u7684\u5757\u957f\u7684\u9700\u6c42\uff0c\u9891\u7e41\u7684\u8bbf\u95ee\u5bfb\u5740\u4e5f\u4f1a\u589e\u52a0\u5e38\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u5f00\u4e00\u4e2a\u5185\u5b58\u6c60\uff0c\u7136\u540e\u7075\u6d3b\u5730\u67e5\u8be2\u6211\u4eec\u60f3\u8981\u7684\u4f4d\u7f6e\u7684\u6307\u9488\uff0c\u5728\u8fde\u7eed\u8bbf\u95ee\u7684\u65f6\u5019\u53ea\u79fb\u52a8\u6307\u9488\u800c\u907f\u514d\u4e86\u4e09\u4e2a\u4e0b\u6807\u7684\u5bfb\u5740\u3002\n\n```cpp\nunsigned fPool[300000000], Len[300005], Mx[1005][1005];\nunsigned a[300005], Pos[300005], m, n, q;\nunsigned Stack[2005], STop(0);\nunsigned A, B, C, D, TmpM;\nunsigned PrA, PrB;\nunsigned Cnt(0), Ans(0), Tmp(0);\nchar Use(0);\ninline unsigned* f(const unsigned x, const unsigned y, const unsigned z) {\n  return fPool + x * PrA + y * PrB + z;\n}\nsigned main() {\n  n = RD(), m = RD(), q = RD(), Use = RD(), B = min(m, (unsigned)max((double)m * m / 300001000, (m / sqrt(q))) + 1), A = m / B;\n  PrB = B + 1, PrA = PrB * (A + 1);\n  for (unsigned i(1); i <= n; ++i) Pos[RD()] = i;\n  for (unsigned i(1); i <= m; ++i) a[i] = Pos[RD()];\n  for (unsigned i(0); i < A; ++i) {\n    memset(Len, 0, ((n + 1) << 2)), TmpM = 0;\n    for (unsigned j(i), k = (i * B + 1); j < A; ++j) {\n      unsigned* CuPo(f(i, j, 1));\n      for (unsigned Cou(1); Cou <= B; ++Cou, ++k, ++CuPo) {\n        unsigned Cur(a[k]), Pre(Len[Cur - 1] + 1);\n        Len[Cur] = max(Pre, Len[Cur]), TmpM = max(TmpM, Len[Cur]);\n        if (j > i) (*CuPo) = Len[Cur];\n      }\n      Mx[i][j] = TmpM;\n    }\n    unsigned* CuPo(f(i, A, 1));\n    for (unsigned k(A* B + 1); k <= m; ++k, ++CuPo) {\n      unsigned Cur(a[k]), Pre(Len[Cur - 1] + 1);\n      Len[Cur] = max(Pre, Len[Cur]), (*CuPo) = Len[Cur];\n    }\n  }\n  for (unsigned i(A - 1); i; --i) {\n    memset(Len, 0, ((n + 1) << 2));\n    for (unsigned j(i), k = ((i + 1) * B); ~j; --j) {\n      unsigned* CuPo(f(A - j - 1, A - i, 1));\n      for (unsigned Cou(1); Cou <= B; ++Cou, --k, ++CuPo) {\n        unsigned Cur(a[k]), Pre(Len[Cur + 1] + 1);\n        Len[Cur] = max(Pre, Len[Cur]);\n        if (j < i) (*CuPo) = Len[Cur];\n      }\n    }\n  }\n  memset(Len, 0, ((n + 1) << 2));\n  for (unsigned i(1); i <= q; ++i) {\n    if (!Use) Ans = 0;\n    C = (RD() ^ Ans), D = (RD() ^ Ans), Ans = 0;\n    unsigned L((C + B - 2) / B), R(D / B);\n    if (L >= R) {\n      for (unsigned i(C); i <= D; ++i) {\n        unsigned Cur(a[i]), Pre(Len[Cur - 1] + 1);\n        Stack[++STop] = Cur, Ans = max(Ans, Len[Cur] = max(Len[Cur], Pre));\n      }\n      while (STop) Len[Stack[STop--]] = 0;\n      printf(\"%u\\n\", Ans); continue;\n    }\n    --R, Ans = max(Ans, Mx[L][R]), C = (L * B) - C + 1, D -= (R + 1) * B;\n    unsigned* CuPo(f(L, R + 1, 1));\n    for (unsigned j(1), p(((R + 1)* B) + 1); j <= D; ++j, ++p, ++CuPo) {\n      unsigned TheL(*CuPo), Le(a[p] - TheL + 1);\n      Ans = max(Ans, TheL);\n      Stack[++STop] = Le, Len[Le] = max(Len[Le], TheL);\n    }\n    for (unsigned j(1), p(L* B); j <= C; ++j, --p) {\n      unsigned Cur(a[p]), Pre(Len[Cur + 1] + 1);\n      Stack[++STop] = Cur, Ans = max(Ans, Len[Cur] = max(Len[Cur], Pre));\n    }\n    while (STop) Len[Stack[STop--]] = 0;\n    CuPo = f(A - L, A - R, 1);\n    for (unsigned j(1); j <= C; ++j, ++CuPo) Ans = max(Ans, *CuPo);\n    printf(\"%u\\n\", Ans);\n  }\n  return Wild_Donkey;\n}\n```",
        "postTime": 1644412972,
        "uid": 143771,
        "name": "\u6bd4\u5229\u2642\u6d77\u7075\u987f",
        "ccfLevel": 8,
        "title": "\u6708\u8d5b 101 Div1D \u5206\u5757\u795e\u4ed9\u9898"
    }
]