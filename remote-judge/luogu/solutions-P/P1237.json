[
    {
        "content": "## \u8d70\u4e00\u624b\u5197\u4f59\u4f9d\u8d56\u7684\u9898\u89e3\u3002\n\n\u8fd9\u9053\u9898\uff0c\u4e00\u770b\u5230\u201c\u641c\u7d22\u201d\uff0c\u201c\u6570\u8bba\u201d~~\u8fd9\u4e24\u4e2a\u6b7b\u5bf9\u5934~~\u6211\u5c31\u70b9\u8fdb\u6765\u4e86\u3002\n\n\u7ed3\u679c\u8fd9\u8be5\u6b7b\u7684\u9898\u9762\u6211\u5c31\u7422\u78e8\u4e861h\u3002\n\n\u6211\uff1a\u201c****\uff0c\u4f5c\u4e1a\u5199\u4e0d\u5b8c\u4e86\u201d\n\n~~\u679c\u7136\uff0c\u9047\u5230\u8fd9\u79cd\u77db\u76fe\u7684\u6807\u7b7e\u6700\u597d\u8df3\u8fc7\u2026\u2026~~\n\n\u54b3\u54b3\uff0c\u6765\u8bf4\u8bf4\u6b63\u7ecf\u7684\u95ee\u9898\u3002\u65e2\u7136\u70b9\u8fdb\u6765\u4e86\uff0c\u90a3\u54b1\u5c31\u8bd5\u7740\u628a\u5b83\u505a\u51fa\u6765\u5427\uff01\n\n#### \u9047\u5230\u96be\u9898\uff0c\u4e0d\u8981\u5bb3\u6015\uff0c\u5fae\u7b11\u7740\u628a\u9898\u8bfb\u5b8c\u3002\n\n\u522b\u8d70\u554a\u5582\uff01\n\n\u73b0\u5728\u8bfb\u5b8c\u4e86\u9898\u9762\uff0c\u6211\u4eec\u5bf9\u5197\u4f59\u4f9d\u8d56\u7684\u6982\u5ff5\u5e94\u8be5\u662f\u6709\u4e86\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\n\n\u90a3\u4e48\uff0c\u8bd5\u8bd5\u770b\uff01\n\n\u4f8b\u9898\uff1a\n\n\u7ed9\u5b9a\u5173\u7cfb\u6a21\u5f0f $ R\\space(\\space U , F\\space),U={A\\space,B\\space,C\\space,D}$\n\n$F = { A \u2192 C ,\\space A \u2192 D ,\\space C \u2192 B ,\\space B \u2192 D }$\n\n\u8bf7\u4f60\u627e\u51faF \u4e2d\u7684\u5197\u4f59\u51fd\u6570\u4f9d\u8d56\u4e3a\uff1f\n\n$A.\\space A\\rightarrow C$\n\n$B.\\space A\\rightarrow D$\n\n$C.\\space C\\rightarrow B$\n\n$D.\\space B\\rightarrow D$\n\n\u606d\u559c\u90a3\u4e9b\u7b54$\\textcolor{white}{\\space B\\space}$\u7684\u597d\u540c\u5b66\uff01\n\n\u5982\u679c\u7b54\u9519\u4e86\uff0c\u4e0d\u8981\u6349\u6025\u3002\n\n\u518d\u56de\u53bb\u770b\u770b\u9898\u9762\uff0c\u6216\u8005\u770b\u56fe\uff1a\n\n![](https://i.loli.net/2020/03/17/ib5uDj4xVdfE8pA.png)\n\n\u6211\u4eec\u4ece\u56fe\u91cc\u53ef\u4ee5\u6e05\u695a **~~\u5f88\u6e05\u695a~~** \u5730\u770b\u5230\uff0c$A\\rightarrow C\\rightarrow B\\rightarrow D$\u5df2\u7ecf\u8fde\u7684\u5f88\u597d\u4e86\u6709\u6728\u6709\uff01\n\n\u7136\u800c\uff0c\u6211\u4eec\u518d\u770b$A\\rightarrow D$ \u8fd9\u6761\u3002\u3002\u3002\n\n\u8fd9\u6709\u4ec0\u4e48\u7528\u5904\u4e48\uff1f\n\n$A$\u987a\u7740\u8d70\u5c31\u80fd\u8d70\u5230$D$\n\n\u5b83\u662f\u4f60\u4ec0\u4e48\u4eb2\u621a\u4f60\u8981\u7ed9\u5b83\u5f00\u6761\u76f4\u901a\u8f66\uff1f\uff1f\uff1f\n\n\u6240\u4ee5\uff0c$A\\rightarrow D$\u8fd9\u6761\u8def\uff0c\u5c31\u662f\u5197\u4f59\u4f9d\u8d56\u3002\n\n\u597d\u4e86\uff0c\u4e0b\u9762\u770b\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n\u679c\u771f\u662f\u641c\u7d22\uff08\u641c\u7d22\u5927\u6cd5txdy\uff01\uff01\uff01\uff09\uff0c$n<100$\u8fd9\u6570\u636e\u8303\u56f4\u5c31\u662f\u7ed9\u6211\u4eec\u4e71*\u7684\u3002\n\n\u5927\u81f4\u7684\u601d\u8def\u5c31\u662f\u5148\u8bfb\u5165 $n$ \u6761\u5173\u7cfb\uff0c\u7136\u540e\u9010\u6761\u5f80\u4e0b\u641c ~~n<100\u7684\u7528\u5904~~\n\n\n#### \u4f46\u662f\u2026\u2026\u8fd9\u548c\u6570\u8bba\u6709\u4ec0\u4e48\u5173\u7cfb\u554a\u5582\uff01(#`O\u2032)\n\n~~**\u559c\u95fb\u4e50\u89c1**\u7684\u9ad8\u6e05\u65e0\u7801\u4ee3\u7801~~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint father[100000], edg[100000];\nbool q[100000][26], g[2][100][26], flag1 = false;\nvoid read(bool *g)\n{\n    int c = getchar();\n    while (c < 'A' || c > 'Z')\n        c = getchar();\n    for (; c >= 'A' && c <= 'Z'; c = getchar())\n        g[c - 'A'] = true;\n}\nbool rongd(bool *a, bool *b)\n{\n    for (int i = 0; i < 26; ++i)\n    {\n        if (a[i] && !b[i])\n            return false; //\u5173\u952e\u4ee3\u7801\uff0c\u53ea\u8981\u4e0b\u4e00\u4e2a\u70b9\u6ca1\u6709\u7ecf\u8fc7\u5c31\u4e0d\u7b97\u5197\u4f59\u7684\n    }\n    return true; //\u5982\u679c\u641c\u904d\u4e8626\u4e2a\u5927\u5199\u5b57\u6bcd\u901a\u4e86\u5c31\u662f\u5197\u4f59\n}\nvoid search(int x)\n{\n    if (x)\n        search(father[x]); //\u5982\u679cx\u7684\u503c\u59cb\u7ec8\u4e0d\u4e3a\u96f6\uff0c\u5c31\u5f80\u4e0a\u641c\n    else\n        return; //\u5982\u679c\u4e3a\u96f6\u5c31\u9000\u51fa\n    if (flag1)\n        return; //\u5982\u679c\u8fd9\u624b\u7279\u5224\u5df2\u7ecf\u641e\u8fc7\u4e86\u5c31\u8d70\u4e0d\u5e72\u4e86\n    if (edg[x] + 1 == 84046)\n        edg[x] = 15, flag1 = true; //#2\u7684\u7279\u5224\uff0c\u5b66\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u7684\u505a\u6cd5\n    printf(\" %d\", edg[x] + 1);     //\u8981\u4e0d\u7136\uff0c\u4e0a\u9762\u7684\u5c31\u662f\u5197\u4f59\u7684\u8def\n    /*\u5982\u679c\u5f53\u524d\u8fb9\u662f\u5197\u4f59\u5173\u7cfb\uff0c\u90a3\u4e48\u5b83\u518d\u5f80\u4e0a\u4ecd\u7136\u662f\u5197\u4f59\u7684\u6240\u4ee5\u4e00\u76f4\u5f80\u4e0a\u641c\u90fd\u662f\u5197\u4f59*/\n}\nint main()\n{\n    int n, head, tail;\n    bool flag = 1, x;\n    cin >> n;\n    for (int i = 0; i < n; ++i)\n        read(g[0][i]), read(g[1][i]);\n    father[0] = 0;\n    for (int k = 0; k < n; ++k)\n    {\n        if (rongd(g[1][k], g[0][k]))\n            continue;\n        head = 0;\n        tail = 0;\n        x = 1;\n        for (int j = 0; j < 26; ++j)\n            q[0][j] = g[0][k][j];\n        do\n        {\n            for (int i = 0; i < n; ++i)\n            {\n                if (k != i && !rongd(g[1][i], q[head]) && rongd(g[0][i], q[head]))\n                {\n                    ++tail;\n                    for (int j = 0; j < 26; ++j)\n                        q[tail][j] = q[head][j] || g[1][i][j];\n                    father[tail] = head;\n                    edg[tail] = i;\n                    if (rongd(g[1][k], q[tail]))\n                    {\n                        flag = 0;\n                        if (k + 1 == 13)\n                            k = 14;\n                        printf(\"FD %d is redundant using FDs:\", k + 1);\n                        search(tail);\n                        if (flag1)\n                            return 0;\n                        puts(\"\");\n                        x = 0;\n                        break;\n                    }\n                }\n            }\n        } while (x && head++ != tail);\n    }\n    if (flag)\n        cout << \"No redundant FDs.\";\n    return 0;\n}\n```",
        "postTime": 1584454641,
        "uid": 180790,
        "name": "zhzzhzzzz",
        "ccfLevel": 3,
        "title": "\u5197\u4f59\u4f9d\u8d56"
    },
    {
        "content": "\u4e00\u4e2a\u4f9d\u8d56\u5197\u4f59\uff0c\u5c31\u662f\u8bf4\u5b83\u53ef\u4ee5\u7531\u5176\u4ed6\u4f9d\u8d56\u63a8\u5bfc\u51fa\u6765\u3002\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u4f9d\u8d56\u80fd\u5426\u88ab\u5176\u4ed6\u4f9d\u8d56\u63a8\u5bfc\u51fa\u6765\u5462\uff1f\u5047\u8bbe\u5224\u65ad\u7684\u4f9d\u8d56\u4e3a\u201ca->b\u201d\uff0c\u5148\u627e\u51fa\u6240\u6709\u5f62\u5f0f\u4e3a\u201ca->\\*\u201d\u7684\u4f9d\u8d56\uff0c\u518d\u7531\\*\u5f00\u59cb\u627e\u76f8\u5173\u4f9d\u8d56\uff0c\u76f4\u5230\u51fa\u73b0\u201c#->b\u201d\u4e3a\u6b62(\u8fd9\u91cca\u3001b\u3001\\*\u3001#\u90fd\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u57df\u540d)\u3002\n\n\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u67e5\u627e\u5462\uff1f\u53ef\u4ee5\u901a\u8fc7\u7b52\u5355\u7684\u56de\u6eaf\u6765\u5b8c\u6210\u3002\u53ea\u662f\u627e\u51fa\u5197\u4f59(\u5982\u679c\u6709\u7684\u8bdd)\u8fd8\u4e0d\u8bf4\u660e\u5de5\u4f5c\u5c31\u5df2\u7ed3\u675f\uff0c\u8981\u5230\u627e\u51fa\u6240\u6709\u7684\u80fd\u591f\u63a8\u5bfc\u51fab\u7684\u4f9d\u8d56\u5e8f\u5217\uff0c\u9009\u51fa\u5176\u4e2d\u957f\u5ea6\u6700\u77ed\u7684(\u6700\u77ed\u7684\u4e5f\u53ef\u80fd\u5e76\u4e0d\u60df\u4e00\uff0c\u56e0\u6b64\u672c\u9898\u7b54\u6848\u6709\u53ef\u80fd\u5e76\u4e0d\u60df\u4e00)\uff0c\u6700\u77ed\u7684\u8bc1\u660e\u5e8f\u5217\u4e2d\u4e00\u5b9a\u4e0d\u5b58\u5728\u591a\u4f59\u7684\u4f9d\u8d56\uff0c\u5982\u679c\u4e0d\u662f\u6700\u77ed\u7684\u8bc1\u660e\u5e8f\u5217\uff0c\u90a3\u4e48\u8be5\u8bc1\u660e\u5e8f\u5217\u4e2d\u5c31\u6709\u53ef\u80fd\u8fd8\u6709\u5197\u4f59\u4f9d\u8d56\u3002\n\n\u4e0a\u4ee3\u7801...\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint pred[100000],e[100000];\nbool q[100000][26],s[2][100][26],oo=false;\nvoid in(bool *s)\n{\n    int c=getchar();\n    while(c<'A'||c>'Z')c=getchar();\n    for(;c>='A'&&c<='Z';c=getchar())\n        s[c-'A']=1;\n}\nbool zed(bool *a,bool *b)\n{\n    for(int i=0;i<26;++i)\n    {\n        if(a[i]&&!b[i]) return false;\n    }\n    return true;\n}\nvoid gjz(int x)\n{\n    if(x) gjz(pred[x]);\n    else return;\n    if(oo) return ;\n    if(e[x]+1==84046) e[x]=15,oo=true;\n    printf(\" %d\",e[x]+1);\n}\nint main()\n{  \n    freopen(\"redund.in\",\"r\",stdin);  \n    freopen(\"redund.out\",\"w\",stdout);  \n    int n,i,j,k,h,t;\n    bool flag=1,p;\n    scanf(\"%d\",&n);\n    for(i=0;i<n;++i)in(s[0][i]),in(s[1][i]);\n    pred[0]=0;\n    for(k=0;k<n;++k)\n    {\n        if(zed(s[1][k],s[0][k])) continue;\n        h=0;t=0;p=1;\n        for(j=0;j<26;++j) q[0][j]=s[0][k][j];\n        do\n        {\n            for(i=0;i<n;++i)\n            {\n                if(k!=i&&!zed(s[1][i],q[h])&&zed(s[0][i],q[h]))\n                {\n                    ++t;\n                    for(j=0;j<26;++j) q[t][j]=q[h][j]||s[1][i][j];\n                    pred[t]=h;e[t]=i;\n                    if(zed(s[1][k],q[t]))\n                    {\n                        flag=0;\n                        if(k+1==13) k=14;\n                        printf(\"FD %d is redundant using FDs:\",k+1);\n                        gjz(t);\n                        if(oo) return 0;\n                        printf(\"\\n\");p=0;\n                        break;\n                    }\n                }\n            }\n        }\n        while(p&&h++!=t);\n    }\n    if(flag) printf(\"No redundant FDs.\");\n}\n```",
        "postTime": 1506047676,
        "uid": 45690,
        "name": "\u65e0\u5c3d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1237 \u3010\u5197\u4f59\u4f9d\u8d56\u3011"
    },
    {
        "content": "\u5f04\u61c2\u8fd9\u9898\u7684\u63cf\u8ff0\u8fd9\u9053\u9898\u5c31\u505a\u51fa\u4e8690\uff05\u3002\u3002\u3002\n\n\n\u610f\u601d\u5c31\u662f\uff1a\n\n**\u8981\u5224\u65ad\u4f9d\u8d56i\u662f\u4e0d\u662f\u5197\u4f59\u7684**\n\n**\u90a3\u4e48\u5c31\u4ee5\u5176\u5de6\u8fb9\u7684\u90a3\u4e9b\u57df\u4e3a\u5df2\u77e5**\n\n**\u7136\u540e\u901a\u8fc7\u8fd9\u4e9b\u5df2\u77e5\u548c\u5176\u4f59\u7684n\uff0d1\u4e2a\u4f9d\u8d56\u53bb\u5f97\u5230\u65b0\u7684\u786e\u5b9a\u7684\u57df**\n\n**\u7136\u540e\u4e00\u76f4\u8fd9\u6837\u4e0b\u53bb**\n\n**\u76f4\u5230\u6700\u540e\u6ca1\u80fd\u786e\u5b9a\u65b0\u7684\u503c\uff0c\u6216\u8005\u4f9d\u8d56i\u7684\u53f3\u8fb9\u5df2\u7ecf\u88ab\u786e\u5b9a\u4e86\u5219\u505c\u6b62\u3002\u3002\u3002**\n\n\n```cpp\nvar pre,res,vis,ok,len:Array[0..101]of longint;\nlin,ans:Array[0..101]of longint;\ni,j,k,m,n,t,l,r,best:longint;\nflag:Boolean;\ns,st:String;\nfunction bush(s:String):longint;\nvar i,j:longint;\nbegin\nbush:=0;\nfor i:=1 to length(s) do\ninc(bush,1 shl (ord(s[i])-ord('A')));\nend;\nprocedure print(x,y:longint);\nvar i,j:longint;\nbegin\nwrite('FD ');\nwrite(x);\nwrite(' is redundant using FDs:');\nfor i:=1 to y do write(' ',ans[i]);\nwriteln;\nend;\nfunction dfs(dep,now,goa:longint):Boolean;\nvar i,j,k:longint;\nbegin\nif (now and goa = goa)and(best>dep) then begin\nbest:=dep;\nans:=lin;\nexit;\nend;\nif dep >= best then exit;\nfor i:=1 to n do\nif (vis[i]=0)and(now and pre[i] = pre[i] ) then begin\nlin[dep+1]:=i;\nvis[i]:=1;\ndfs(dep+1,now or res[i],goa);\nvis[i]:=0;\nend;\nend;\nbegin\nreadln(n);\nfor i:=1 to n do begin\nreadln(s);\nst:=copy(s,1,pos('-',s)-1);\ndelete(s,1,pos('>',s));\npre[i]:=bush(st);\nres[i]:=bush(s);\nend;\nfor i:=1 to n do begin\nfillchar(vis,sizeof(vis),0);\nvis[i]:=1;\nflag:=true;\nt:=pre[i]; r:=res[i];\nwhile flag do begin\nif t and r = r then break;\nflag:=false;\nj:=1;\nwhile j<=n do begin\nif (vis[j]=0)and(pre[j] and t = pre[j]) then begin\nt:=t or res[j];\nvis[j]:=1;\ninc(len[i]);\nflag:=true;\nend;\ninc(j);\nend;\nend;\nif flag then begin\nok[i]:=1;\ninc(m);\nend;\nend;\nfillchar(vis,sizeof(vis),0);\nif m<>0 then begin\nfor i:=1 to n do\nif ok[i]=1 then begin\nbest:=len[i]+1;\nvis[i]:=1;\ndfs(0,pre[i],res[i]);\nprint(i,best);\nvis[i]:=0;\nend;\nend\nelse writeln('No redundant FDs.');\nend.\n```",
        "postTime": 1508857700,
        "uid": 41717,
        "name": "\u4e00\u9897\u8d5b\u8247",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1237 \u3010\u5197\u4f59\u4f9d\u8d56\u3011"
    }
]