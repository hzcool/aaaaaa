[
    {
        "content": "#### **\u9996\u5148\u58f0\u660e\u8fd9\u4e0d\u662f\u4e00\u7bc7\u7b97\u6cd5\u72ec\u7279\u7684\u9898\u89e3\uff0c\u4ecd\u7136\u662f\u201cLCA+\u6876+\u6811\u4e0a\u5dee\u5206\u201d\uff0c\u4f46\u8fd9\u7bc7\u9898\u89e3\u662f\u4e3a\u4e86\u8ba9\u5f88\u591a\u5f88\u591a\u770b\u4e86\u5f88\u591a\u9898\u89e3\u4ecd\u7136\u770b\u4e0d\u61c2\u7684\u670b\u53cb\u4eec\u770b\u61c2\u7684\uff0c\u5176\u4e2d\u5c31\u5305\u62ec\u6211\uff0c\u6211\u4e5f\u5728\u52aa\u529b\u5730\u628a\u89e3\u9898\u7684\u201c\u601d\u7ef4\u8fc7\u7a0b\u201d\u5448\u73b0\u51fa\u6765\uff0c\u5e0c\u671b\u80fd\u5e2e\u52a9\u5230\u522b\u4eba\u3002\u5b9e\u5728\u662f\u4f69\u670d\u90a3\u4e9b\u8003\u573aAC\u7684\u5927\u725b\uff0c\u518d\u6b21\u5411\u4f60\u4eec\u732e\u4e0a\u656c\u610f\uff01**\n\n##### \u539f\u6587\u94fe\u63a5\uff08https://www.cnblogs.com/lfyzoi/p/10221884.html\uff09\n\n##### 1. \u7b2c\u4e00\u6b65\n\n- \u9996\u5148\u53ef\u4ee5\u521d\u6b65\u5224\u65ad\u8fd9\u4e2a\u9898\u80af\u5b9a\u8981\u8ba1\u7b97**LCA**\uff0c\u65b9\u6cd5\u6709**\u500d\u589e**/**Tarjan-DFS**\uff0c\u6211\u4eec\u5c31\u5199\u4e2a\u7b80\u5355\u7684\u500d\u589e\u5427\uff0c\u4f7f\u7528**\u94fe\u5f0f\u524d\u5411\u661f**\u5b58\u50a8\u8fb9\u3002\n- \u9009\u62e91\u53f7\u7ed3\u70b9\u5f00\u59cbdfs\uff0c\u522b\u7684\u7ed3\u70b9\u4e5f\u53ef\u4ee5\n- dfs\u8fc7\u7a0b\u4e2d\u8ba1\u7b97`fa[][]`\u6570\u7ec4\uff08`fa[x][i]`\u8868\u793a $x$ \u7ed3\u70b9\u7684 $2^i$ \u4ee3\u7956\u5148\u662f\u8c01\uff09\u548cdeep[]\u6570\u7ec4\uff08`deep[x]`\u8868\u793a\u7ed3\u70b9 $x$ \u5728\u6811\u4e2d\u7684\u6df1\u5ea6\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int SIZE=300000;\nint n, m, tot, h[SIZE], deep[SIZE], fa[SIZE][20], w[SIZE];      //w[i]\u8868\u793ai\u7ed3\u70b9\u51fa\u73b0\u89c2\u5bdf\u5458\u7684\u65f6\u95f4\nstruct edge\n{\n\tint to, next;\n}E[SIZE*2], e1[SIZE*2], e2[SIZE*2];                             //\u8fb9\u96c6\u6570\u7ec4e1\uff0ce2\u7559\u5f85\u5907\u7528\n\nvoid add(int x, int y)                                          //\u52a0\u8fb9\u51fd\u6570\n{\n\tE[++tot].to=y;\n\tE[tot].next=h[x];\n\th[x]=tot;\n}\n\nvoid dfs1(int x)                                                //dfs\u7684\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u201c\u5efa\u6811\u201d\uff0c\u9884\u5904\u7406fa[][]\u6570\u7ec4, \u8ba1\u7b97deep[]\u6570\u7ec4\n{\n\tfor(int i=1; (1<<i)<=deep[x]; i++)\n\t\tfa[x][i]=fa[fa[x][i-1]][i-1];                           //x\u76842^i\u4ee3\u7956\u5b97\u5c31\u662fx\u76842^{i-1}\u4ee3\u7956\u5b97\u76842^{i-1}\u4ee3\u7956\u5b97\n\tfor(int i=h[x]; i; i=E[i].next)\n\t{\n\t\tint y=E[i].to;\n\t\tif(y==fa[x][0])\tcontinue;                               //\u5982\u679cy\u662f\u7236\u7ed3\u70b9\uff0c\u8df3\u8fc7\n\t\tfa[y][0]=x;\n\t\tdeep[y]=deep[x]+1;\n\t\tdfs1(y);\n\t}\n}\n\nint get_lca(int x, int y)                                      //\u8ba1\u7b97x\u548cy\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n{\n\tif(x==y) return x;                                         //\u6ca1\u6709\u8fd9\u4e00\u884c\uff0c\u9047\u5230 lca(x, x) \u8fd9\u6837\u7684\u8be2\u95ee\u65f6\u4f1a\u6302\u6389\n\tif(deep[x]<deep[y]) swap(x, y);                            //\u4fdd\u6301x\u7684\u6df1\u5ea6\u5927\u4e8ey\u7684\u6df1\u5ea6\n\tint t=log(deep[x]-deep[y])/log(2);\n\tfor(int i=t; i>=0; i--)                                    //x\u5411\u4e0a\u8df3\u5230\u548cy\u540c\u6837\u7684\u6df1\u5ea6\n\t{\n\t\tif(deep[fa[x][i]]>=deep[y])\n\t\t\tx=fa[x][i];\n\t\tif(x==y)\n\t\t\treturn x;\n\t}\n\tt=log(deep[x])/log(2);\n\tfor(int i=t; i>=0; i--)                                    //x\u548cy\u4e00\u8d77\u5411\u4e0a\u8df3\n\t{\n\t\tif(fa[x][i]!=fa[y][i])\n\t\t\tx=fa[x][i], y=fa[y][i];\n\t}\n\treturn fa[x][0];\n}\n\nint main()                                                     //\u5148\u628a\u4e3b\u51fd\u6570\u5199\u4e0a\u4e00\u90e8\u5206\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i=1; i<n; i++)\n\t{\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tadd(u, v);\n\t\tadd(v, u);\n\t}\n\tdeep[1]=1;\n\tfa[1][0]=1;\n\tdfs1(1);\n\tfor(int i=1; i<=n; i++) scanf(\"%d\", &w[i]);\n\t\n    /////////////////////////////////////////////////////////////\n    ////////////////////////\u672a\u5b8c\u5f85\u7eed///////////////////////////\n    /////////////////////////////////////////////////////////////\n    \n\treturn 0;\n}\n```\n\n##### 2. \u7b2c\u4e8c\u6b65\n\n\u5927\u6982\u5206\u6790\u4e00\u4e0b\uff0cm\u4e2a\u73a9\u5bb6\u5bf9\u5e94m\u6761\u8def\u5f84\uff0c\u6709\u4e86\u8d77\u70b9\u548c\u7ec8\u70b9\u7684 lca \u540e\uff0c\u5982\u679c\u6211\u4eec\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\uff1a\n\n**\u76f4\u89c9**\n\n- \u4ece\u8d77\u70b9 $S_i$ \u8dd1\u5230 $LCA$ \u5728\u6811\u957f\u5f97\u5f88\u5300\u79f0\u7684\u60c5\u51b5\u4e0b\u4e3a $O(lgn)$\n- \u4ece\u8d77\u70b9 $LCA$ \u8dd1\u5230 $T_i$ \u5728\u6811\u957f\u5f97\u5f88\u5300\u79f0\u7684\u60c5\u51b5\u4e0b\u4e3a $O(lgn)$\n- \u56e0\u6b64\uff0c\u6a21\u62df\u4e00\u4e2a\u73a9\u5bb6\u7684\u8dd1\u6b65\u8fc7\u7a0b\u4e3a $O(lgn)$\uff0cm\u4e2a\u73a9\u5bb6\u4e3a $O(mlgn)$\n- \u7406\u60f3\u60c5\u51b5\u4e0b\u662f\u53ef\u884c\u7684\uff0c\u4f46\u73b0\u5b9e\u5c31\u662f\u4e0d\u7406\u60f3\n- \u9898\u76ee\u6e05\u695a\u544a\u8bc9\u4f60\uff0c\u6811\u4f1a\u9000\u5316\u6210\u4e00\u6761\u94fe\uff0c\u56e0\u6b64\u6a21\u62df\u4e00\u4e2a\u8fc7\u7a0b\u53d8\u6210 $O(n)$\uff0c\u603b\u7684\u5c31\u662f\u3002\u3002\u3002$O(mn)$\uff0c\u5fc5\u6302\u65e0\u7591\n- \u6b64\u6cd5\u4e0d\u662f\u6b63\u89e3\uff01\n\n**\u5c1d\u8bd5**\n\n- \u6211\u4eec\u80fd\u4e0d\u80fd\u6539\u53d8\u6a21\u62df\u8dd1\u6b65\u7684\u8fc7\u7a0b\uff0c\u4ece $O(n)$ \u4f18\u5316\u5230 $O(lgn)$ \u5462\uff1f\u601d\u524d\u60f3\u540e\u4e0d\u53ef\u80fd\uff0c\u6709 $n$ \u4e2a\u89c2\u5bdf\u5458\u77d7\u5728\u90a3\u91cc\uff0c\u4f60\u53ef\u4ee5\u5bf9\u54ea\u4e2a\u89c6\u800c\u4e0d\u89c1\uff1f\n- \u8def\u5df2\u8d70\u5230\u5c3d\u5934\n\n**\u8f6c\u6362**\n\n- \u8fd9\u65f6\u5019\u9700\u8981\u653e\u5927\u62db\uff0c\u8f6c\u6362\u601d\u60f3\uff01\u6216\u8bb8\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\u538b\u6839\u5c31\u4e0d\u662f\u4e00\u4e2a\u73a9\u5bb6\u4e00\u4e2a\u73a9\u5bb6\u6a21\u62df\uff0c\u800c\u662f\u6574\u4f53\u5904\u7406\u5462\uff1f\n- \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec**\u4e0d\u679a\u4e3e\u6bcf\u4e2a\u8fd0\u52a8\u5458**\uff0c**\u800c\u662f\u679a\u4e3e\u6bcf\u4e2a\u89c2\u5bdf\u5458i**\uff0c\u770b\u770b**\u54ea\u4e9b\u7ed3\u70b9\u4f1a\u4e3a\u8fd9\u4e2a\u89c2\u5bdf\u5458i**\u505a\u8d21\u732e\uff08\u521a\u597d\u5728$w_i$\u79d2\u8dd1\u5230\u4ed6\u8fd9\u513f\uff09\u3002\n- **\u679a\u4e3e\u89c2\u5bdf\u5458\u7684\u8fc7\u7a0b\u5c31\u662fDFS\u6574\u9897\u6811\u7684\u8fc7\u7a0b**\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 $O(n)$ \u5185\u641e\u5b9a\uff01\n- \u5bf9\u4e8e\u89c2\u5bdf\u5458i\uff0c\u54ea\u4e9b\u4eba\u4f1a\u4e3a\u4ed6\u505a\u8d21\u732e\u5462\uff1f\n\n**\u6df1\u5165\u5206\u6790**\n\n- \u5bf9\u4e8e\u7ed3\u70b9 $P$\uff0c \u5982\u679c\u4ed6\u4f4d\u4e8e\u4e00\u6761\u8d77\u70b9\u3001\u7ec8\u70b9\u5206\u522b\u4e3a $s_i$\uff0c $t_i$ \u7684\u8dd1\u6b65\u8def\u5f84\u4e0a\uff0c\u5982\u4f55\u5224\u65ad\u8fd9\u540d\u9009\u624b\u4f1a\u4e0d\u4f1a\u4e3a $P$ \u4f5c\u8d21\u732e\u5462\uff1f\n- \u5206\u60c5\u51b5\u8003\u8651\n- \u5982\u679c $P$ \u662f\u5728\u4ece $s_i$ \u5230 $LCA$ \u7684\u8def\u4e0a\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://img2018.cnblogs.com/blog/948343/201901/948343-20190104184757096-1095323337.png)\n\n- \u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff1a\u5f53\u8d77\u70b9 $ s_i $ \u6ee1\u8db3 $ deep[s_i]=w[P]+deep[P] $\u65f6\uff0c\u8d77\u70b9 $s_i$\u4f1a\u4e3a $P$ \u89c2\u5bdf\u5458\u505a\u4e00\u4e2a\u8d21\u732e\uff08\u8fd0\u52a8\u5458\u4ece$s_i$\u51fa\u53d1\uff0c\u53ef\u4ee5\u88ab$P$\u5904\u7684\u89c2\u5bdf\u5458\u5728$w[P]$\u79d2\u770b\u5230\uff09\n\n- \u5982\u679c $P$ \u662f\u5728\u4ece $LCA$ \u5230 $t_i$ \u7684\u8def\u4e0a\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://img2018.cnblogs.com/blog/948343/201901/948343-20190104184856525-918538990.png)\n\n- \u5b9a\u4e49 $dist[s_i, t_i]$\u4e3a\u4ece $s_i$\u51fa\u53d1\u5230$t_i$\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5982\u679c\u8fd0\u52a8\u5458\u4ece$s_i$\u51fa\u53d1\uff0c\u53ef\u4ee5\u88ab$P$\u5904\u7684\u89c2\u5bdf\u5458\u5728$w[P]$\u79d2\u89c2\u5bdf\u5230\uff0c\u53ef\u4ee5\u7531\u4e0a\u56fe\u5f97\u51fa\u4ee5\u4e0b\u5f0f\u5b50\uff1a\n- $dist[s_i, t_i]-w[P]=deep[t_i]-deep[P]$\uff0c\u79fb\u9879\u540e\u5f97\u5230\uff1a\n- $ dist[s_i, t_i]-deep[t_i]=w[P]-deep[P] $\n- \u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff1a\u5f53\u7ec8\u70b9 $ t_i $ \u6ee1\u8db3 $ dist[s_i, t_i]-deep[t_i]=w[P]-deep[P] $\u65f6\uff0c\u7ec8\u70b9 $t_i$\u4f1a\u4e3a $P$ \u89c2\u5bdf\u5458\u505a\u4e00\u4e2a\u8d21\u732e\n- \u505a\u4e00\u4e2a\u91cd\u8981\u7684\u603b\u7ed3\uff1a\u4e0a\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u8d77\u70b9\u53ef\u4ee5\u505a\u8d21\u732e\uff0c\u4e0b\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u7ec8\u70b9\u53ef\u4ee5\u505a\u8d21\u732e\uff0c\u4f46\u65e0\u8bba\u662f\u54ea\u4e00\u79cd\u60c5\u5f62\uff0c**\u80fd\u5bf9 $P$ \u505a\u8d21\u732e\u7684\u8d77\u70b9\u6216\u7ec8\u70b9\u4e00\u5b9a\u90fd\u5728\u4ee5$P$\u4e3a\u6839\u7684\u5b50\u6811\u4e0a**\uff0c\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u5728DFS\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\u5904\u7406\u4ee5\u4efb\u610f\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u3002\n\n##### 3. \u7b2c\u4e09\u6b65\n\n**\u5982\u4f55\u7edf\u8ba1\u5b50\u6811\u8d21\u732e**\n\n- \u9012\u5f52\u4ee5$P$\u4e3a\u6839\u7684\u5b50\u6811\u65f6\uff0c\u53ef\u4ee5\u7edf\u8ba1\u51fa\u5176\u5b50\u6811\u4e2d\u6240\u6709\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5bf9\u5b83\u7684\u8d21\u732e\n- \u8fd9\u91cc\u53c8\u9700\u8981\u8f6c\u6362\n- \u5b50\u6811\u4e2d\u6709\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5bf9$P$\u4ea7\u751f\u4e86\u8d21\u732e\uff0c\u6709\u4e9b\u4e0d\u5bf9\u5176\u4ea7\u751f\u8d21\u732e\u4f46\u5bf9$P$\u4ee5\u5916\u7684\u7ed3\u70b9\u4ea7\u751f\u4e86\u8d21\u732e\n- \u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff08\u5b50\u6811\u6839\uff09\uff0c\u627e\u5b50\u6811\u4e2d\u54ea\u4e9b\u70b9\u5bf9\u5176\u4ea7\u751f\u8d21\u732e\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u4e0a\u53bb\u4e86\n- \u800c\u662f\u5bf9\u4e8e\u6811\u4e0a\u7684\u4efb\u4f55\u4e00\u4e2a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u628a\u5176\u4ea7\u751f\u7684\u8d21\u732e\u653e\u5728\u6876\u91cc\u9762\uff0c\u56de\u6eaf\u5230\u5b50\u6811\u6839\u7684\u65f6\u5019\u518d\u5230\u6876\u91cc\u9762\u67e5\u8be2\u7ed3\u679c\n- \u6709\u4eba\u4ea7\u751f\u7591\u95ee\u4e86\uff0c\u4e5f\u662f\u5f88\u591a\u4eba\u770b\u4e0d\u61c2\u8fd9\u91cc\u6876\u7528\u6cd5\u7684\u5730\u65b9\uff0c\u7591\u95ee\u5982\u56fe\uff1a\n\n![](https://img2018.cnblogs.com/blog/948343/201901/948343-20190104184931060-1218903801.png)\n\n- $c$\u70b9\u4ea7\u751f\u8d21\u732e\u653e\u5728\u6876\u7684$deep[c]$\u4f4d\u7f6e\uff0c\u8ba1\u7b97$b$\u70b9\u83b7\u5f97\u7684\u8d21\u732e\u65f6\u5f53\u7136\u662f\u4ece$bucket1[deep[b]+w[b]]$\u4f4d\u7f6e\u83b7\u53d6\uff0c\u4e8e\u662f\u5f97\u52301\u4e2a\u8d21\u732e\uff0c\u4f60\u53d1\u73b0$a$\u7ed3\u70b9\u4e5f\u662f\u7528\u7684\u540c\u4e00\u4e2a\u6876\uff0c\u8fd9\u4e2a\u8fd8\u597d\uff0c\u56e0\u4e3a$c$\u786e\u5b9e\u7ed9\u4ed6\u505a\u4e86\u8d21\u732e\uff0c\u53ef\u662f$e$\u70b9\u5462\uff1f\u4ed6\u662f\u4e0d\u5e94\u8be5\u83b7\u5f97\u8d21\u732e\u7684\uff01\u65e2\u7136\u6211\u4f1a\u7ed9\u548c\u6211\u65e0\u5173\u7684\u7ed3\u70b9\u505a\u8d21\u732e\uff0c\u90a3\u4e48\u5176\u5b83\u65e0\u5173\u7684\u7ed3\u70b9\u96be\u514d\u4e5f\u4f1a\u7ed9\u6211\u505a\u8d21\u732e\uff01\n- \u95ee\u9898\u603b\u7ed3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9$P$\u6765\u8bf4\uff0c\u7a76\u7adf\u54ea\u4e9b\u70b9\u5728\u6876\u91cc\u9762\u4ea7\u751f\u7684\u8d21\u732e\u624d\u662f\u6709\u6548\u7684\u3002\n- \u7b54\u6848\u662f\uff1a**\u4ee5$P$\u4e3a\u6839\u9012\u5f52\u6574\u9897\u5b50\u6811\u8fc7\u7a0b\u4e2d\u5728\u6876\u5185\u4ea7\u751f\u7684\u5dee\u503c\u624d\u662f\u6709\u6548\u7684**\n\n\n**\u8fd8\u8981\u8003\u8651\u4e00\u79cd\u60c5\u51b5**\n\n- \u5148\u770b\u56fe\uff1a\n\n![](https://img2018.cnblogs.com/blog/948343/201901/948343-20190104184957939-1302319020.png)\n\n- \u770b\u61c2\u4e86\u5417\uff1f\u5bf9\u4e8e\u4ee5$P$\u4e3a\u6839\u7684\u5185\u90e8\u8def\u5f84\uff08\u4e0d\u7ecf\u8fc7$P$\uff09\uff0c\u8fd9\u6761\u8def\u5f84\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u4ea7\u751f\u7684\u8d21\u732e\u662f\u4e0d\u5e94\u8be5\u5c5e\u4e8e$P$\u7684\n- \u6240\u4ee5dfs\u8fc7\u7a0b\u4e2d\uff0c\u5728\u7edf\u8ba1\u5f53\u524d\u7ed3\u70b9\u4f5c\u4e3a\u8d77\u70b9\u548c\u7ec8\u70b9\u6240\u4ea7\u751f\u7684\u8d21\u732e\u540e\uff0c\u7ee7\u800c\u8ba1\u7b97\u51fa\u5f53\u524d\u7ed3\u70b9\u4f5c\u4e3a\u201c\u6839\u201d\u4e0a\u7684\u5dee\u503c\u540e\uff0c\u5728\u56de\u6eaf\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u8981\u51cf\u53bb\u4ee5\u5f53\u524d\u7ed3\u70b9\u4e3a$LCA$\u7684\u8d77\u70b9\u3001\u7ec8\u70b9\u5728\u6876\u91cc\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u8fd9\u90e8\u5206\u8d21\u732e\u5728\u79bb\u5f00\u8fd9\u4e2a\u5b50\u6811\u540e\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\u3002\n\n**\u4ee3\u7801\u8bf4\u660e**\n\n- `e1,tot1,h1,add1`\u662f\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u7684\u65b9\u6cd5\u5b58\u50a8**\u6bcf\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u7ec8\u70b9\u5bf9\u5e94\u7684\u8def\u5f84\u96c6\u5408**\n- `e2,tot2,h2,add2`\u662f\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u7684\u65b9\u6cd5\u5b58\u50a8**\u6bcf\u4e2a\u7ed3\u70b9\u4f5c\u4e3aLCA\u5bf9\u5e94\u7684\u8def\u5f84\u96c6\u5408**\n- `b1,b2`\u662f\u4e24\u7ec4\u6876\uff0c\u5206\u522b\u7528\u4e8e**\u4e0a\u884c\u9636\u6bb5**\u548c**\u4e0b\u884c\u9636\u6bb5**\u7684\u8d21\u732e\u7edf\u8ba1\n- `js[SIZE]`\u7528\u4e8e\u7edf\u8ba1**\u4ee5\u6bcf\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u8d77\u70b9\u7684\u8def\u5f84\u6761\u6570**\n- `dist[SIZE], s[SIZE], t[SIZE]`\u7528\u4e8e\u7edf\u8ba1m\u6761\u8def\u5f84\u5bf9\u5e94\u7684\u957f\u5ea6\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u4fe1\u606f\n- `ans[SIZE]`\u5b58\u50a8\u6700\u540e\u8f93\u51fa\u7684\u7b54\u6848\uff0c\u662f\u6bcf\u4e2a\u7ed3\u70b9\u89c2\u5bdf\u5458\u770b\u5230\u7684\u4eba\u6570\n\n```cpp\nint tot1, tot2, h1[SIZE], h2[SIZE];\nvoid add1(int x, int y)\n{\n\te1[++tot1].to=y;\n\te1[tot1].next=h1[x];\n\th1[x]=tot1;\n}\n\nvoid add2(int x, int y)\n{\n\te2[++tot2].to=y;\n\te2[tot2].next=h2[x];\n\th2[x]=tot2;\n}\n\nint b1[SIZE*2], b2[SIZE*2], js[SIZE], dist[SIZE], s[SIZE], t[SIZE], ans[SIZE];\n\nvoid dfs2(int x)\n{\n\tint t1=b1[w[x]+deep[x]], t2=b2[w[x]-deep[x]+SIZE];      //\u9012\u5f52\u524d\u5148\u8bfb\u6876\u91cc\u7684\u6570\u503c\uff0ct1\u662f\u4e0a\u884c\u6876\u91cc\u7684\u503c\uff0ct2\u662f\u4e0b\u884c\u6876\u7684\u503c\n\tfor(int i=h[x]; i; i=E[i].next)                         //\u9012\u5f52\u5b50\u6811\n\t{\n\t\tint y=E[i].to;\n\t\tif(y==fa[x][0]) continue;\n\t\tdfs2(y);\n\t}\n\tb1[deep[x]]+=js[x];                                     //\u4e0a\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u524d\u70b9\u4f5c\u4e3a\u8def\u5f84\u8d77\u70b9\u4ea7\u751f\u8d21\u732e\uff0c\u5165\u6876\n\tfor(int i=h1[x]; i; i=e1[i].next)                       //\u4e0b\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u524d\u70b9\u4f5c\u4e3a\u8def\u5f84\u7ec8\u70b9\u4ea7\u751f\u8d21\u732e\uff0c\u5165\u6876\n\t{\n\t\tint y=e1[i].to;\n\t\tb2[dist[y]-deep[t[y]]+SIZE]++;\n\t}\n\tans[x]+=b1[w[x]+deep[x]]-t1+b2[w[x]-deep[x]+SIZE]-t2;   //\u8ba1\u7b97\u4e0a\u3001\u4e0b\u884c\u6876\u5185\u5dee\u503c\uff0c\u7d2f\u52a0\u5230ans[x]\u91cc\u9762\n\tfor(int i=h2[x]; i; i=e2[i].next)                       //\u56de\u6eaf\u524d\u6e05\u9664\u4ee5\u6b64\u7ed3\u70b9\u4e3aLCA\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5728\u6876\u5185\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u5b83\u4eec\u5df2\u7ecf\u65e0\u6548\u4e86\n\t{\n\t\tint y=e2[i].to;\n\t\tb1[deep[s[y]]]--;                                   //\u6e05\u9664\u8d77\u70b9\u4ea7\u751f\u7684\u8d21\u732e\n\t\tb2[dist[y]-deep[t[y]]+SIZE]--;                      //\u6e05\u9664\u7ec8\u70b9\u4ea7\u751f\u7684\u8d21\u732e\n\t}\n}\n\nint main()\n{\n////////////////\u91cd\u590d\u90e8\u5206\u8df3\u8fc7////////////\n////////////////\u6587\u672b\u63d0\u4f9b\u5b8c\u6574\u4ee3\u7801////////\n\tfor(int i=1; i<=m; i++)                                 //\u8bfb\u5165m\u6761\u8be2\u95ee\n\t{\n\t\tscanf(\"%d%d\", &s[i], &t[i]);\n\t\tint lca=get_lca(s[i], t[i]);                        //\u6c42LCA\n\t\tdist[i]=deep[s[i]]+deep[t[i]]-2*deep[lca]];         //\u8ba1\u7b97\u8def\u5f84\u957f\u5ea6\n\t\tjs[s[i]]++;                                         //\u7edf\u8ba1\u4ee5s[i]\u4e3a\u8d77\u70b9\u8def\u5f84\u7684\u6761\u6570\uff0c\u4fbf\u4e8e\u7edf\u8ba1\u4e0a\u884c\u8fc7\u7a0b\u4e2d\u8be5\u7ed3\u70b9\u4ea7\u751f\u7684\u8d21\u732e\n\t\tadd1(t[i], i);                                      //\u7b2ci\u6761\u8def\u5f84\u52a0\u5165\u5230\u4ee5t[i]\u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u96c6\u5408\u4e2d\n\t\tadd2(lca, i);                                       //\u628a\u6bcf\u6761\u8def\u5f84\u5f52\u5230\u5bf9\u5e94\u7684LCA\u96c6\u5408\u4e2d\n\t\tif(deep[lca]+w[lca]==deep[s[i]]) ans[lca]--;        //\u89c1\u4e0b\u9762\u7684\u89e3\u91ca\n\t}\n\tdfs2(1);                                                //dfs\u5427\uff01\n\tfor(int i=1; i<=n; i++) printf(\"%d \", ans[i]); \n\treturn 0;\n}\n```\n\n**\u4e00\u4e9b\u91cd\u8981\u8865\u5145**\n\n- \u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6709\u4e00\u884c\u672a\u52a0\u89e3\u91ca`if(deep[lca]+w[lca]==deep[s[i]]) ans[lca]--;`\n- \u8003\u8651\u8def\u5f84\u662f\u8fd9\u6837\u7684\uff0c\u5982\u56fe\uff1a\n\n![](https://img2018.cnblogs.com/blog/948343/201901/948343-20190104185028628-1134207080.png)\n\n- \u8fd9\u4e2a\u56fe\u53ef\u80fd\u4e0d\u592a\u597d\u61c2\uff0c\u610f\u601d\u662f\uff1a\n- \u5982\u679c\u8def\u5f84\u8d77\u70b9\u6216\u7ec8\u70b9\u521a\u597d\u4e3aLCA\u4e14LCA\u5904\u662f\u53ef\u89c2\u5bdf\u5230\u8fd0\u52a8\u5458\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u4e0a\u884c\u7edf\u8ba1\u8fc7\u7a0b\u4e2d\u548c\u4e0b\u884c\u7edf\u8ba1\u8fc7\u7a0b\u4e2d\u90fd\u4f1a\u5bf9\u8be5LCA\u4ea7\u751f\u8d21\u732e\uff0c\u8fd9\u6837\u5c31\u91cd\u590d\u8ba1\u6570\u4e00\u6b21\uff01\n- \u597d\u5728\u8fd9\u79cd\u60c5\u51b5\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u6211\u4eec\u63d0\u524d\u9884\u6d4b\u5230\uff0c\u5bf9\u76f8\u5e94\u7684\u7ed3\u70b9\u8fdb\u884c`ans[x]--`\u5373\u53ef\u3002\n\n\n- \u6b64\u5916\uff0c\u5728\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u6876\u65f6\uff0c\u4e0b\u6807\u662f`w[x]-deep[x]`\u4f1a\u6210\u4e3a\u8d1f\u6570\uff0c\u6240\u4ee5\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u6876\u65f6\uff0c\u4e0b\u6807\u7edf\u4e00`+SIZE`\uff0c\u5411\u53f3\u5e73\u79fb\u4e00\u6bb5\u533a\u95f4\uff0c\u9632\u6b62\u4e0b\u6ea2\u3002\n\n\n\n##### 4. \u7ed3\u675f\n\n\u6211\u4e0d\u77e5\u9053\u81ea\u5df1\u8bf4\u6e05\u695a\u6ca1\u6709\uff0c\u4f46\u613f\u5927\u5bb6\u4e0d\u8981\u62cd\u7816\u5934\uff01\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int SIZE=300000;\nint n, m, tot, h[SIZE], deep[SIZE], fa[SIZE][20], w[SIZE];\nstruct edge\n{\n\tint to, next;\n}E[SIZE*2], e1[SIZE*2], e2[SIZE*2];\n\nvoid add(int x, int y)\n{\n\tE[++tot].to=y;\n\tE[tot].next=h[x];\n\th[x]=tot;\n}\n\nint tot1, tot2, h1[SIZE], h2[SIZE];\nvoid add1(int x, int y)\n{\n\te1[++tot1].to=y;\n\te1[tot1].next=h1[x];\n\th1[x]=tot1;\n}\nvoid add2(int x, int y)\n{\n\te2[++tot2].to=y;\n\te2[tot2].next=h2[x];\n\th2[x]=tot2;\n}\n\nvoid dfs1(int x)\n{\n\tfor(int i=1; (1<<i)<=deep[x]; i++)\n\t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\tfor(int i=h[x]; i; i=E[i].next)\n\t{\n\t\tint y=E[i].to;\n\t\tif(y==fa[x][0])\tcontinue;\n\t\tfa[y][0]=x;\n\t\tdeep[y]=deep[x]+1;\n\t\tdfs1(y);\n\t}\n}\n\nint get_lca(int x, int y)\n{\n\tif(x==y) return x;\n\tif(deep[x]<deep[y]) swap(x, y);\n\tint t=log(deep[x]-deep[y])/log(2);\n\tfor(int i=t; i>=0; i--)\n\t{\n\t\tif(deep[fa[x][i]]>=deep[y])\n\t\t\tx=fa[x][i];\n\t\tif(x==y)\n\t\t\treturn x;\n\t}\n\tt=log(deep[x])/log(2);\n\tfor(int i=t; i>=0; i--)\n\t{\n\t\tif(fa[x][i]!=fa[y][i])\n\t\t\tx=fa[x][i], y=fa[y][i];\n\t}\n\treturn fa[x][0];\n}\n\nint b1[SIZE*2], b2[SIZE*2], js[SIZE], dist[SIZE], s[SIZE], t[SIZE], l[SIZE], ans[SIZE];\nvoid dfs2(int x)\n{\n\tint t1=b1[w[x]+deep[x]], t2=b2[w[x]-deep[x]+SIZE];\n\tfor(int i=h[x]; i; i=E[i].next)\n\t{\n\t\tint y=E[i].to;\n\t\tif(y==fa[x][0]) continue;\n\t\tdfs2(y);\n\t}\n\tb1[deep[x]]+=js[x];\n\tfor(int i=h1[x]; i; i=e1[i].next)\n\t{\n\t\tint y=e1[i].to;\n\t\tb2[dist[y]-deep[t[y]]+SIZE]++;\n\t}\n\tans[x]+=b1[w[x]+deep[x]]-t1+b2[w[x]-deep[x]+SIZE]-t2;\n\tfor(int i=h2[x]; i; i=e2[i].next)\n\t{\n\t\tint y=e2[i].to;\n\t\tb1[deep[s[y]]]--;\n\t\tb2[dist[y]-deep[t[y]]+SIZE]--;\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i=1; i<n; i++)\n\t{\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tadd(u, v);\n\t\tadd(v, u);\n\t}\n\tdeep[1]=1;\n\tfa[1][0]=1;\n\tdfs1(1);\n\tfor(int i=1; i<=n; i++) scanf(\"%d\", &w[i]);\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d%d\", &s[i], &t[i]);\n\t\tint lca=get_lca(s[i], t[i]);\n\t\tdist[i]=deep[s[i]]+deep[t[i]]-2*deep[lca];\n\t\tjs[s[i]]++;\n\t\tadd1(t[i], i);\n\t\tadd2(lca, i);\n\t\tif(deep[lca]+w[lca]==deep[s[i]]) ans[lca]--;\n\t}\n\tdfs2(1);\n\tfor(int i=1; i<=n; i++) printf(\"%d \", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1546599174,
        "uid": 1034,
        "name": "greenlcat",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "[\u4f7f\u7528csdn\u4f53\u9a8c\u66f4\u4f73](https://blog.csdn.net/SSH_oj/article/details/83476085)\n\n~~\u4e3a\u4e4b\u524d\u4e00\u5768\u5c4e\u7684\u4ee3\u7801\u5411\u5927\u5bb6\u9053\u6b49\uff0c\u6211\u53d1\u73b0\u540e\u7acb\u5373\u91cd\u5199\u4e86\u4e00\u4efd\uff0c\u5e0c\u671b\u80fd\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3 QwQ~~\n\n\u5728\u8fd9\u91cc\u7ed9\u5927\u5bb6\u63d0\u4f9b\u4e00\u79cd\u975e\u5e38\u7b80\u5355\u7684\u65b9\u6cd5\u3002\n\n\u6211\u4eec\u5148\u6765\u8f6c\u5316\u4e00\u4e0b\u9898\u9762\uff1a\u9898\u76ee\u8981\u6c42\u6211\u4eec\u6c42\u6bcf\u4e00\u4e2a\u70b9\u5728\u67d0\u4e2a\u65f6\u95f4\u80fd\u770b\u5230\u7684\u4eba\u6570\uff0c\u90a3\u6211\u4eec\u4e5f\u53ef\u4ee5\u5206\u522b\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u4eba\u5bf9\u4e8e\u4ed6\u8dd1\u6b65\u7684\u90a3\u6761\u8def\u5f84\u4e0a\u7684\u8d21\u732e\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\uff1a\u8fd9\u6761\u8def\u7ecf\u4e00\u5b9a\u7531\u4e00\u6bb5\u4e0a\u884c\u548c\u4e00\u6bb5\u4e0b\u884c\u7ec4\u6210\u3002\u800c\u4e14\u6709\u4e14\u53ea\u6709\u8fd9\u4e24\u6761\u8def\u5f84\u3002\u6240\u4ee5\u6211\u4eec\u5206\u5f00\u6765\u770b\u8fd9\u4e24\u6761\u8def\u5f84\uff1a\n\n1. \u5982\u679c\u8fd9\u6761\u8def\u5f84\u662f\u4e0a\u884c\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u8bbe\u8fd9\u4e2a\u4eba\u8dd1\u4e86 $T$ \u79d2\uff0c\u8d77\u70b9\u6df1\u5ea6\u4e3a $dep_{st}$\uff0c\u5219\u4e00\u5b9a\u6709 $dep_{now}=dep_{st}-T$\uff08$now$ \u8868\u793a\u5f53\u524d\u7b2c $T$ \u79d2\u7684\u4f4d\u7f6e\uff09\n2. \u540c\u7406\uff0c\u5982\u679c\u662f\u4e0b\u884c\u7684\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 $dep_{now}=dep_{st}+T$\u3002\n\n\u79fb\u9879\u53d1\u73b0\uff1a$dep_{st}=dep_{now}+T$ \uff0c $dep_{st}=dep_{now}-T$\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8d77\u70b9 $st$ \uff0c\u4ed6\u5bf9 $dep_i+T_i=dep_{st}$ \u3001$dep_i-T_i=dep_{st}$ \u7684\u70b9\u90fd\u4f1a\u4ea7\u751f1\u7684\u8d21\u732e\u3002\n\n\u6240\u4ee5\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u4eba\u7684\u8def\u5f84\u90fd\u62c6\u5206\u6210\u4e0a\u884c\u548c\u4e0b\u884c\u4e24\u6bb5\uff0c\u7136\u540e\u5206\u522b\u6309\u7167 $T_i+dep_i$ \u548c $dep_i-T_i$ \u6392\u5e8f\u5c31\u884c\u4e86\u3002\n\n\u65e2\u7136\u6211\u4eec\u73b0\u5728\u5904\u7406\u51fa\u4e86\u6bcf\u4e00\u6bb5\u8def\u5f84\u7684\u51fa\u53d1\u70b9\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u89c2\u5bdf\u8005\u6309\u7167 $dep_i$ \u6392\u5e8f\uff0c\u7136\u540e\u5bfb\u627e\u90a3\u4e9b\u80fd\u591f\u89c2\u5bdf\u5230\u7684\u70b9\u5373\u53ef\u3002\n\n\u73b0\u5728\u7b2c\u4e8c\u4e2a\u95ee\u9898\u53c8\u6765\u4e86\uff1a\u600e\u4e48\u5bf9\u4e8e\u4e48\u4e00\u4e2a\u89c2\u5bdf\u70b9\uff0c\u5904\u7406\u51fa\u6240\u6709\u4fe1\u606f\u4e0e\u5b83\u7684 $dep$ \u76f8\u7b49\u7684\u70b9\u5462\uff1f\n\n\u8fd9\u4e2a\u5176\u5b9e\u5f88\u597d\u60f3\uff0c\u56e0\u4e3a\u6211\u4eec\u5176\u5b9e\u5c31\u662f\u5728\u6c42\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u6570\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6bcf\u6761\u8def\u5f84\u7684\u4e0b\u7aef\u70b9\u505a\u5dee\u5206\uff0c\u7136\u540e\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u89c2\u5bdf\u70b9\u7684\u5b57\u6570\u548c\u8ba1\u53ef\u3002\uff08\u7528$dfs$\u5e8f+\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u5b50\u6811\u548c\u5927\u5bb6\u5e94\u8be5\u90fd\u4f1a\u5427\uff09\u6700\u540e\u8bb0\u5f97\u7edf\u8ba1\u5b8c\u6bcf\u4e00\u4e2a\u4fe1\u606f\u4e0d\u540c\u7684\u89c2\u5bdf\u70b9\u540e\u66b4\u529b\u5c06\u521a\u624d\u63d2\u5165\u7684\u5dee\u5206\u503c\u5220\u9664\u5c31\u884c\u4e86\u3002**\u590d\u6742\u5ea6\uff1a$O(n\u00b7log n)$**\n\n\u4e0b\u9762\u9644\u4e0a\u4ee3\u7801\uff08\u672c\u4eba\u4eb2\u624b\u91cd\u5199\u8fc7\u7684\uff0c\u4f53\u9a8c\u66f4\u4f73\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define N 1000005\nusing namespace std;\nint cnt[2],n,m,tot,s[N],e[N],ans[N],siz[N],dfn[N],dep[N],vis[N],t[N],sum[N],fa[N][21];\nvector<int> edge[N];\nstruct nod{\n\tint p,q,r;\n\tnod(){;}\n\tnod(int _p,int _q){p=_p,q=_q;}\n\tnod(int _p,int _q,int _r){p=_p,q=_q,r=_r;}\n}a[N],b[2][N];\nstack<nod> sk;\nbool cmp(nod x,nod y){return x.q<y.q;}\nbool cmp2(nod x,nod y){return x.r<y.r;}\nvoid addedge(int u,int v) {\n\tedge[u].push_back(v);\n\tedge[v].push_back(u);\n}\nint lowbit(int x){return x&(-x);}\nvoid ins(int x,int v) {\n\tif(x==0)\treturn;\n\tfor(int i=x;i<=n;i+=lowbit(i))\n\t\tsum[i]+=v;\n}\nint ques(int x) {\n\tint Ans=0;\n\tfor(int i=x;i>0;i-=lowbit(i))\n\t\tAns+=sum[i];\n\treturn Ans;\n}\nvoid dfs(int x)\n{\n\tfor(int i=1;i<=20;i++)\n\t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\tsiz[x]=vis[x]=1,dfn[x]=++tot;\n\tfor(int i=0;i<edge[x].size();i++)\n\t{\n\t\tint nex=edge[x][i];\n\t\tif(!vis[nex])\n\t\t{\n\t\t\tfa[nex][0]=x;\n\t\t\tdep[nex]=dep[x]+1;\n\t\t\tdfs(nex),siz[x]+=siz[nex];\n\t\t}\n\t}\n}\nint lca(int x,int y)\n{\n\tif(x==y)    return x;\n\tif(dep[x]<dep[y])\tswap(x,y);\n\tfor(int i=20;i>=0;i--)\n\t\tif(dep[fa[x][i]]>=dep[y])\n\t\t\tx=fa[x][i];\n\tif(x==y)    return x;\n\tfor(int i=20;i>=0;i--)\n\t\tif(fa[x][i]!=fa[y][i])\n\t\t\tx=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nvoid insedge(int st,int en,int k,int minus) {b[k][++cnt[k]]=nod(st,en,dep[k?en:st]-minus);}\nint main()\n{\n\tint u,v;\n\tcin>>n>>m;\n\tfor(int i=1;i<n;i++)\n\t\tcin>>u>>v,addedge(u,v);\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>t[i];\n\tfor(int i=1;i<=m;i++)\n\t\tcin>>s[i]>>e[i];\n\tdep[1]=1,dfs(1);\n\tfor(int i=1;i<=n;i++)\n\t\ta[i]=nod(i,t[i]+dep[i]);\n\tfor(int i=1;i<=n;i++)\n\t\ta[i+n]=nod(i,dep[i]-t[i]);\n\tsort(a+1,a+n+1,cmp),sort(a+n+1,a+n*2+1,cmp);\n\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint st=s[i],en=e[i],pre=lca(st,en);\n\t\tif(st==pre)\t\t\tinsedge(en,st,1,0);\n\t\telse if(en==pre)\tinsedge(st,en,0,0);\n\t\telse\n\t\t{\n\t\t\tint low=st;\n\t\t\tfor(int i=20;i>=0;i--)\n\t\t\t\tif(dep[fa[low][i]]>dep[pre])\n\t\t\t\t\tlow=fa[low][i];\n\t\t\tinsedge(st,low,0,0);\n\t\t\tinsedge(en,pre,1,dep[st]-dep[pre]);\n\t\t}\n\t}\n\tsort(b[0]+1,b[0]+cnt[0]+1,cmp2);\n\tsort(b[1]+1,b[1]+cnt[1]+1,cmp2);\n\tint x=1,y=1;\n\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint cur=a[i].p;\n\t\tif(a[i].q!=a[i-1].q)\n\t\t\twhile(!sk.empty()) {\n\t\t\t\tnod now=sk.top(); sk.pop();\n\t\t\t\tins(now.p,-1),ins(now.q,1);\n\t\t\t}\n\t\tfor(;x<=cnt[0] && b[0][x].r<=a[i].q;x++)\n\t\t\tif(a[i].q!=a[i-1].q && b[0][x].r==a[i].q)\n\t\t\t{\n\t\t\t\tint lo=b[0][x].p,hi=b[0][x].q;\n\t\t\t\tins(dfn[lo],1),ins(dfn[fa[hi][0]],-1);\n\t\t\t\tsk.push(nod(dfn[lo],dfn[fa[hi][0]]));\n\t\t\t}\n\t\tans[cur]+=ques(dfn[cur]+siz[cur]-1)-ques(dfn[cur]-1);\n\t}\n\twhile(!sk.empty()) {\n\t\tnod now=sk.top(); sk.pop();\n\t\tins(now.p,-1),ins(now.q,1);\n\t}\n\n\tfor(int i=n+1;i<=n*2;i++)\n\t{\n\t\tint cur=a[i].p;\n\t\tif(a[i].q!=a[i-1].q)\n\t\t\twhile(!sk.empty()) {\n\t\t\t\tnod now=sk.top(); sk.pop();\n\t\t\t\tins(now.p,-1),ins(now.q,1);\n\t\t\t}\n\t\tfor(;y<=cnt[1] && b[1][y].r<=a[i].q;y++)\n\t\t\tif(a[i].q!=a[i-1].q && b[1][y].r==a[i].q)\n\t\t\t{\n\t\t\t\tint lo=b[1][y].p,hi=b[1][y].q;\n\t\t\t\tins(dfn[lo],1),ins(dfn[fa[hi][0]],-1);\n\t\t\t\tsk.push(nod(dfn[lo],dfn[fa[hi][0]]));\n\t\t\t}\n\t\tans[cur]+=ques(dfn[cur]+siz[cur]-1)-ques(dfn[cur]-1);\n\t}\n\twhile(!sk.empty()) {\n\t\tnod now=sk.top(); sk.pop();\n\t\tins(now.p,-1),ins(now.q,1);\n\t}\n\n\tfor(int i=1;i<=n;i++)\n\t\tcout<<ans[i]<<\" \";\n\treturn 0;\n}\n```\n\n",
        "postTime": 1540717085,
        "uid": 41262,
        "name": "SSHhh",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u6211\u4eec\u4e00\u6863\u4e00\u6863\u90e8\u5206\u5206\u6765\u770b\u3002\n\n\u56e0\u4e3a\u4e0b\u9762\u8981\u8ddf\u968f\u6d4b\u8bd5\u70b9\u8d34\u4ee3\u7801\uff0c\u8fd9\u91cc\u5148\u628amain\u51fd\u6570\u548c\u9884\u5904\u7406\u90e8\u5206\u8d34\u51fa\n\n```cpp\n#include<vector>\n#include<cstdio>\n#include<algorithm>\n#define rg register\n#define ci const int\n#define cl const long long int\n\ntypedef long long int ll;\n\nnamespace IO {\n    char buf[90];\n}\n\ntemplate<typename T>\ninline void qr(T &x) {\n    char ch=getchar(),lst=' ';\n    while(ch>'9'||ch<'0') lst=ch,ch=getchar();\n    while(ch>='0'&&ch<='9') x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    if(lst=='-') x=-x;\n}\n\ntemplate<typename T>\ninline void write(T x,const char aft,const bool pt) {\n    if(x<0) x=-x,putchar('-');\n    int top=0;\n    do {\n        IO::buf[++top]=x%10+'0';\n        x/=10;\n    } while(x);\n    while(top) putchar(IO::buf[top--]);\n    if(pt) putchar(aft);\n}\n\ntemplate<typename T>\ninline T mmax(const T a,const T b) {if(a>b) return a;return b;}\ntemplate<typename T>\ninline T mmin(const T a,const T b) {if(a<b) return a;return b;}\ntemplate<typename T>\ninline T mabs(const T a) {if(a<0) return -a;return a;}\n\ntemplate<typename T>\ninline void mswap(T &a,T &b) {\n    T temp=a;a=b;b=temp;\n}\n\nconst int maxn = 1000010;\nconst int maxm = 1000010;\nconst int ZAY = 300004;\n\nstruct Edge {\n    int to,nxt;\n};\nEdge edge[maxm];int hd[maxn],ecnt;\ninline void cont(ci from,ci to) {\n    Edge &e=edge[++ecnt];\n    e.to=to;e.nxt=hd[from];hd[from]=ecnt;\n}\n\nstruct M {\n    int s,t,an,sum,tk;\n    inline bool operator<(const M &_others) const {\n        return this->sum < _others.sum;\n    }\n};\nM MU[maxn];\n\nstruct W {\n    int v,num,ans;\n    inline bool operator<(const W &_others) const {\n        return this->v < _others.v;\n    }\n};\nW w[maxn];\n\nstruct C {\n    int ud,v,tp;\n    C (int _ud=0,int _v=0,int _tp=0) {ud=_ud,v=_v,tp=_tp;}\n};\nstd::vector<C>cg[maxn];\n\nint n,m;\nint deepth[maxn],fa[maxn],LCA[30][maxn],pos[maxn],lft[maxn],rt[maxn];\n\nvoid t1();\nvoid s1();\nvoid lian();\nvoid baoli();\nvoid zhengjie();\nvoid dfs(ci,ci);\nint ask(int,int);\nint dfsearch(ci,ci);\nvoid deepfs(ci,ci);\nvoid dfirsts(ci,ci);\n\ninline bool cmp(const W &_a,const W & _b) {\n    return _a.num < _b.num;\n}\n\nint main() {\n    qr(n);qr(m);\n    rg int a,b;\n    for(rg int i=1;i<n;++i) {\n        a=b=0;qr(a);qr(b);\n        cont(a,b);cont(b,a);\n    }\n    for(rg int i=1;i<=n;++i) {\n        qr(w[i].v);w[i].num=i;\n    }\n    for(rg int i=1;i<=m;++i) {\n        qr(MU[i].s);qr(MU[i].t);\n    }\n\tint _num=n%10;\n    if(_num < 4) baoli();\n    else if(_num == 4) lian();\n    else if(_num == 5) s1();\n    else if(_num == 6) t1();\n    else zhengjie();\n    return 0;\n}\n\nvoid dfs(ci u,ci fat) {\n    deepth[u]=deepth[fa[u]=fat]+1;\n    LCA[0][u]=fat;\n    for(rg int i=0;LCA[i][u];++i) {\n        LCA[i+1][u]=LCA[i][LCA[i][u]];\n    }\n    for(rg int i=hd[u];i;i=edge[i].nxt) if(edge[i].to != fat)\n        dfs(edge[i].to,u);\n}\n\nint ask(int x,int y) {\n    if(deepth[x] < deepth[y]) mswap(x,y);\n    rg int delta=deepth[x]-deepth[y];\n    for(rg int i=25;delta;--i) if(delta & (1<<i)) {\n        x=LCA[i][x],delta^=(1<<i);\n    }\n    if(x == y) return x;\n    for(rg int i=25;i != -1;--i) if(LCA[i][x] != LCA[i][y]) {\n        x=LCA[i][x],y=LCA[i][y];\n    }\n    return LCA[0][x];\n}\n```\n\n#### \u6d4b\u8bd5\u70b9$1$\u3001$2$\n\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\uff0c\u90a3\u4e48\u53ea\u4f1a\u5728\u7b2c\u96f6\u79d2\u88ab\u89c2\u6d4b\u5230\u3002\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709$W_j=0$\u7684\u70b9\u7edf\u8ba1\u6709\u591a\u5c11\u6761\u8def\u5f84\u4e3a\u8fd9\u4e2a\u70b9\u5373\u53ef\u3002\u671f\u671b\u5f97\u5206$10$\u5206\n\n#### \u6d4b\u8bd5\u70b9$3$\u3001$4$\n\u6bcf\u4e2a\u89c2\u5bdf\u5458\u90fd\u662f0\uff0c\u6240\u4ee5\u76f4\u63a5\u5bf9\u6bcf\u6761\u8def\u5f84\u8d77\u70b9\u7684\u8ba1\u6570\u5668++\u5373\u53ef\u3002\u671f\u671b\u5f97\u5206$20$\u5206\n\n#### \u6d4b\u8bd5\u70b9$5$\n\u53d1\u73b0\u79d2\u6570\u4e0d\u8d85\u8fc71000\uff0c\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u79d2\uff0c\u5728\u6bcf\u4e00\u79d2\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u73a9\u5bb6\u5728\u4ec0\u4e48\u4f4d\u7f6e\u3002\u5177\u4f53\u7684\uff0c\u5bf9\u6bcf\u6761\u8def\u5f84\u6c42LCA\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u73a9\u5bb6\uff0c\u5982\u679c\u5f53\u524d\u65f6\u95f4\u6bd4\u8d77\u70b9\u5230LCA\u7684\u8ddd\u79bb\u5c0f\uff0c\u90a3\u4e48\u70b9$u$\u7684\u4f4d\u7f6e\u53d8\u6210$father[u]$\u3002\u5426\u5219\u82e5\u5f53\u524d\u662f\u7b2c$k$\u79d2\uff0c\u5219\u4ed6\u7684\u4f4d\u7f6e\u662f\u7ec8\u70b9$t$\u5411\u4e0a$l-k-1$\u4e2a\u6df1\u5ea6\u3002\u5176\u4e2d$l$\u662f\u8def\u5f84\u957f\u5ea6\u3002\u671f\u671b\u5f97\u5206$25$\u5206\n\n#### \u6d4b\u8bd5\u70b9$6$\u3001$7$\u3001$8$\n\u5f53\u6811\u662f\u4e00\u6761\u94fe\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u4ece$s$\u51fa\u53d1\u53ea\u6709\u5411\u5de6\u548c\u5411\u53f3\u4e24\u79cd\u53ef\u80fd\u3002\u5177\u4f53\u7684\uff0c$s~\\leq~t$\u5219\u5411\u53f3\uff0c\u5426\u5219\u5411\u5de6\u3002\u8003\u8651\u5bf9\u4e8e\u5728\u70b9$j$\u7684\u89c2\u5bdf\u5458\uff0c\u4e0d\u59a8\u8bbe\u88ab\u4ed6\u89c2\u5bdf\u7684\u73a9\u5bb6\u5411\u53f3\u884c\u8d70\uff08\u5411\u5de6\u540c\u7406\uff09\uff0c\u5219\u6709\n$$s+w_j=j$$\n\u79fb\u9879\u53ef\u5f97\n$$s=j-W_j$$\n\u7c7b\u4f3c\u7684\u5bf9\u5411\u5de6\u884c\u8d70\u7684\u6ee1\u8db3\n$$s=j+W_j$$\n\u8fd9\u6837\u7684\u8ba1\u6570\u95ee\u9898\u663e\u7136\u662f\u9700\u8981\u6876\u7684\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u901a\u8fc7\u8fd9\u51e0\u4e2a\u6d4b\u8bd5\u70b9\u3002\n>1 \u6392\u5e8f\n\n\u5c06\u6bcf\u4e2a\u70b9\u6309\u7167\u89c2\u5bdf\u5458\u51fa\u73b0\u7684\u65f6\u95f4\u6392\u5e8f\uff0c\u628a\u6240\u6709$s$\u538b\u5165\u6876\u4e2d\uff0c\u5c06\u6bcf\u6761\u8def\u5f84\u6309\u7167\u957f\u5ea6\u6392\u5e8f\u3002\u679a\u4e3e\u6bcf\u4e2a\u89c2\u5bdf\u5458\u51fa\u73b0\u7684\u65f6\u95f4\uff0c\u5bf9\u4e8e\u7b2c$j$\u4e2a\u89c2\u5bdf\u5458\uff0c\u5b83\u7684\u7b54\u6848\u5373\u4e3a$lft[j+w_j]+rt[j-w_j]$\uff0c\u6bcf\u8fc7\u4e00\u4e2a\u65f6\u523b\u5220\u9664\u6876\u4e2d\u5df2\u7ecf\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u3002\u7531\u4e8e\u4e00\u5171\u6709$n$\u4e2a\u89c2\u5bdf\u5458\uff0c\u6bcf\u6761\u8def\u5f84\u88ab\u679a\u4e3e$1$\u6b21\uff0c\u5171$n$\u6b21\u3002\u52a0\u4e0a\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlogn)$\u3002\n```cpp\nvoid lian() {\n    for(rg int i=1;i<=m;++i) {\n        if(MU[i].t >= MU[i].s) ++rt[MU[i].s],MU[i].sum=MU[i].t-MU[i].s;\n        else ++lft[MU[i].s],MU[i].sum=MU[i].s-MU[i].t;\n    }\n    std::sort(MU+1,MU+1+m);\n    std::sort(w+1,w+1+n);\n    rg int j=0;\n    for(rg int i=1;i<=n;++i) {\n        while(j <= m) {\n            if(MU[j].sum >= w[i].v) break;\n            if(MU[j].s <= MU[j].t) --rt[MU[j].s];\n            else --lft[MU[j].s];\n            ++j;\n        }\n        int _d=w[i].num-w[i].v;\n        if(_d > 0) w[i].ans+=rt[_d];\n        _d=w[i].num+w[i].v;\n        if(_d <= n) w[i].ans+=lft[_d];\n    }\n    std::sort(w+1,w+1+n,cmp);\n    for(rg int i=1;i<n;++i) write(w[i].ans,' ',true);\n    write(w[n].ans,'\\n',true);\n}\n```\n\n>2 \u5dee\u5206\n\n\u76f4\u63a5\u626b\u63cf\u6574\u6761\u94fe\u3002\u5148\u4ece\u5de6\u5411\u53f3\u626b\u63cf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u70b9$i$\uff0c\u5411\u6876\u4e2d\u52a0\u5165\u4f1a\u4ece\u8be5\u70b9\u51fa\u53d1\u7684\u5411\u53f3\u7684\u8def\u5f84\u6761\u6570\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ec8\u70b9\uff0c\u628a\u6240\u6709\u7ec8\u70b9\u4e3a\u5b83\u7684\u5411\u53f3\u7684\u8def\u5f84\u7684\u8d77\u70b9\u4f4d\u7f6e\u7684\u6876$--$\u3002\u8fd9\u6837\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7edf\u8ba1\u7b54\u6848\u65f6\u7edf\u8ba1\u7684\u5c31\u662f\u5f53\u524d\u5408\u6cd5\uff08\u6ca1\u6709\u7ed3\u675f\uff09\u7684\u8282\u70b9$s$\u7684\u4e2a\u6570\u3002\u7136\u540e\u4ece\u53f3\u5411\u5de6\u626b\u63cf\uff0c\u65b9\u6cd5\u540c\u7406\u3002\u626b\u63cf\u7ed3\u675f\u540e\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002\n\u590d\u6742\u5ea6$O(n)$\u3002\n\n\u671f\u671b\u5f97\u520640\u5206\u3002\n\n#### \u6d4b\u8bd5\u70b9$9$~$12$\n\n\u8fd94\u4e2a\u6d4b\u8bd5\u70b9\u8d77\u70b9\u90fd\u662f1\u3002\u6211\u4eec\u4e0d\u59a8\u94a6\u5b9a\u8fd9\u68f5\u68111\u662f\u6839\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9$j$\u7684\u89c2\u5bdf\u5458\uff0c\u80fd\u89c2\u5bdf\u5230\u70b9\u663e\u7136\u5f53\u4e14\u4ec5\u5f53$w_j==deepth_j$\u3002\u90a3\u4e48\u4ed6\u80fd\u89c2\u5bdf\u5230\u7684\u70b9\u7684\u4e2a\u6570\u663e\u7136\u662f\u5b83\u5b50\u6811\u4e2d\u7684\u7ec8\u70b9\u4e2a\u6570\u3002\u76f4\u63a5dfs\u7edf\u8ba1\u5373\u53ef\u3002\n\n```cpp\nvoid s1() {\n    deepth[0]=-1;\n    dfs(1,0);\n    for(rg int i=1;i<=m;++i) {\n        ++lft[MU[i].t];\n    }\n    int _cnt=dfsearch(1,0);\n    if(!w[1].v) w[1].ans=_cnt;\n    for(rg int i=1;i<n;++i) write(w[i].ans,' ',true);\n    write(w[n].ans,'\\n',true);\n}\n\nint dfsearch(ci u,ci fat) {\n    rg int _cnt=lft[u];\n    for(rg int i=hd[u];i;i=edge[i].nxt) if(edge[i].to != fat) \n        _cnt+=dfsearch(edge[i].to,u);\n    if(w[u].v == deepth[u]) w[u].ans=_cnt;\n    return _cnt;\n}\n```\n\n#### \u6d4b\u8bd5\u70b9$13$~$16$\n\u8fd9\u4e9b\u6d4b\u8bd5\u70b9\u7684\u7ec8\u70b9\u662f1\u3002\u4f9d\u7136\u4e0d\u59a8\u94a6\u5b9a1\u4e3a\u6839\u3002\n\u8003\u8651\u4e00\u4e2a\u70b9$j$\u80fd\u770b\u5230\u4e00\u6761\u8def\u5f84$i$\u663e\u7136\u8be5\u8def\u5f84\u7684\u8d77\u70b9\u662f$j$\u7684\u5b50\u6811\u5e76\u4e14$w_j+deepth_j=l$\uff0c\u5176\u4e2d$l$\u4e3a\u94fe\u957f\u3002\u8fd9\u6837\u4f9d\u7136\u53ef\u4ee5dfs\u7edf\u8ba1$j$\u7684\u5b50\u6811\u7684\u4fe1\u606f\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u5168\u5c40\u7684\u6876\uff0c\u5982\u679c\u60f3\u4f7f\u7528\u5b83\u8bb0\u5f55\u4e00\u6b21dfs\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u5219\u5728\u8fdb\u5165dfs\u65f6\u8bb0\u5f55\u521d\u59cb\u91cf\uff0cdfs\u7ed3\u675f\u65f6\u6c42\u6700\u7ec8\u91cf\uff0c\u4e2d\u95f4\u7684\u589e\u91cf\u5373\u4e3a\u8fd9\u6b21dfs\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\u5728\u8fd9\u91cc\u589e\u91cf\u5c31\u662f$j$\u7684\u5b50\u6811\u4e2d\u6ee1\u8db3\u4e0a\u5f0f\u7684\u94fe\u7684\u6761\u6570\u3002\n\n```cpp\nvoid deepfs(ci u,ci fat) {\n    rg int _c=lft[w[u].v+deepth[u]+ZAY];\n    lft[deepth[u]+ZAY]+=rt[u];\n    for(rg int i=hd[u];i;i=edge[i].nxt) if(edge[i].to != fat)\n        deepfs(edge[i].to,u);\n    w[u].ans=lft[w[u].v+deepth[u]+ZAY]-_c;\n}\n\nvoid t1() {\n    deepth[0]=-1;\n    for(rg int i=1;i<=m;++i) ++rt[MU[i].s];\n    dfs(1,0);\n    deepfs(1,0);\n    for(rg int i=1;i<n;++i) write(w[i].ans,' ',true);\n    write(w[n].ans,'\\n',true);\n}\n```\n\n#### \u6d4b\u8bd5\u70b9$17$~$20$\n\n\u628a\u4e0a\u9762\u7684\u601d\u8def\u6574\u7406\u4e00\u4e0b\u3002\u521a\u624d\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5206\u522b\u4e3a\u6839\u5df2\u7ecf\u63d0\u793a\u6211\u4eec\u5c06\u8def\u5f84\u5206\u4e3a\u5411\u4e0a\u8d70\u7684\u548c\u5411\u4e0b\u8d70\u7684\u4e24\u79cd\u3002\u5bf9\u4e8e\u5411\u4e0a\u8d70\u7684\uff0c\u4e00\u4e2a\u73a9\u5bb6\u80fd\u88ab\u70b9$j$\u770b\u89c1\u7684\u5fc5\u8981\u6761\u4ef6\u662f$deepth_j+w_j=deepth_s$\uff0c\u5176\u4e2ds\u662f\u8d77\u70b9\n\u5bf9\u4e8e\u5411\u4e0b\u8d70\u7684\u73a9\u5bb6\uff0c\u80fd\u88ab$j$\u7684\u5fc5\u8981\u6761\u4ef6\u662f$deepth_j+w_j=deepth_t-l+1$\uff0c\u5176\u4e2d$l$\u4e3a\u94fe\u957ft\u662f\u7ec8\u70b9\u3002\u6ce8\u610f\u5230\u4e0a\u9762\u7684\u6761\u4ef6\u90fd\u662f\u5fc5\u8981\u6761\u4ef6\uff0c\u4e00\u4e2a\u73a9\u5bb6\u88ab\u4fdd\u8bc1\u80fd\u770b\u89c1\u9700\u8981\u4fdd\u8bc1\u8be5\u8def\u5f84\u7ecf\u8fc7\u8be5\u70b9\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5dfs\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7edf\u8ba1\u7ecf\u8fc7\u4ed6\u7684\u8def\u5f84\u4e2d\u7684\u7b54\u6848\u3002\u5982\u679c\u5feb\u901f\u7684\u5bf9\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\u8fdb\u884c\u5220\u9664\u5462\uff1f\u8003\u8651\u662f\u94fe\u7684\u90e8\u5206\u5e26\u7ed9\u6211\u4eec\u7684\u601d\u8def\uff0c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u6211\u4eec\u5c06\u5176\u5206\u4e3a\u5411\u4e0a\u7684\u4e3a$s$\u5230$LCA\u7684\u513f\u5b50$\uff0c\u5411\u4e0b\u7684\u4e3a$LCA$\u5230$t$\u3002\u8fd9\u6837\u5bf9\u4e8e\u5411\u4e0a\u7684\u5728$s$\u5904\u5bf9\u6876\u4e2d\u7684\u7b54\u6848$++$\uff0c\u5728LCA\u5904(LCA\u7684\u513f\u5b50\u7684\u7236\u4eb2)\u5bf9\u7b54\u6848$--$\u3002\u5411\u4e0b\u7684\u8def\u5f84\u5728$t$\u5904\u5bf9\u6876\u4e2d\u7684\u7b54\u6848$++$\uff0c\u5728$LCA$\u7684\u7236\u4eb2\u5904$--$\u3002\u5373\u53ef\u901a\u8fc7\u672c\u9898\n\n```cpp\nvoid zhengjie() {\n    dfs(1,0);\n    for(rg int i=1;i<=n;++i) {\n        MU[i].an=ask(MU[i].s,MU[i].t);\n        MU[i].sum=deepth[MU[i].s]-2*deepth[MU[i].an]+deepth[MU[i].t]+1;\n        cg[MU[i].s].push_back(C(1,deepth[MU[i].s],1));\n        cg[MU[i].t].push_back(C(2,deepth[MU[i].t]-MU[i].sum+1+ZAY,1));\n        cg[MU[i].an].push_back(C(1,deepth[MU[i].s],-1));\n        cg[fa[MU[i].an]].push_back(C(2,deepth[MU[i].t]-MU[i].sum+1+ZAY,-1));\n    }\n    dfirsts(1,0);\n    for(rg int i=1;i<n;++i) write(w[i].ans,' ',true);\n    write(w[n].ans,'\\n',true);\n}\n\nvoid dfirsts(ci u,ci fat) {\n    int _temp=lft[deepth[u]+w[u].v]+rt[deepth[u]-w[u].v+ZAY];\n    rg unsigned int _s=cg[u].size();\n    for(rg unsigned i=0;i<_s;++i) {\n        int _ud=cg[u][i].ud;\n        if(_ud == 1) {\n            lft[cg[u][i].v]+=cg[u][i].tp;\n        }\n        else rt[cg[u][i].v]+=cg[u][i].tp;\n    }\n    for(rg int i=hd[u];i;i=edge[i].nxt) if(edge[i].to != fat) \n        dfirsts(edge[i].to,u);\n    w[u].ans=lft[deepth[u]+w[u].v]+rt[deepth[u]-w[u].v+ZAY]-_temp;\n}\n```\n\n## Code\n\u8fd9\u5176\u4e2d\u5305\u542b\u6240\u6709\u7684\u90e8\u5206\u5206\u3002\u4e8b\u5b9e\u4e0a\u76f4\u63a5\u8dd1\u6b63\u89e3\u5373\u53ef\n```cpp\n#include<vector>\n#include<cstdio>\n#include<algorithm>\n#define rg register\n#define ci const int\n#define cl const long long int\n\ntypedef long long int ll;\n\nnamespace IO {\n    char buf[90];\n}\n\ntemplate<typename T>\ninline void qr(T &x) {\n    char ch=getchar(),lst=' ';\n    while(ch>'9'||ch<'0') lst=ch,ch=getchar();\n    while(ch>='0'&&ch<='9') x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    if(lst=='-') x=-x;\n}\n\ntemplate<typename T>\ninline void write(T x,const char aft,const bool pt) {\n    if(x<0) x=-x,putchar('-');\n    int top=0;\n    do {\n        IO::buf[++top]=x%10+'0';\n        x/=10;\n    } while(x);\n    while(top) putchar(IO::buf[top--]);\n    if(pt) putchar(aft);\n}\n\ntemplate<typename T>\ninline T mmax(const T a,const T b) {if(a>b) return a;return b;}\ntemplate<typename T>\ninline T mmin(const T a,const T b) {if(a<b) return a;return b;}\ntemplate<typename T>\ninline T mabs(const T a) {if(a<0) return -a;return a;}\n\ntemplate<typename T>\ninline void mswap(T &a,T &b) {\n    T temp=a;a=b;b=temp;\n}\n\nconst int maxn = 1000010;\nconst int maxm = 1000010;\nconst int ZAY = 300004;\n\nstruct Edge {\n    int to,nxt;\n};\nEdge edge[maxm];int hd[maxn],ecnt;\ninline void cont(ci from,ci to) {\n    Edge &e=edge[++ecnt];\n    e.to=to;e.nxt=hd[from];hd[from]=ecnt;\n}\n\nstruct M {\n    int s,t,an,sum,tk;\n    inline bool operator<(const M &_others) const {\n        return this->sum < _others.sum;\n    }\n};\nM MU[maxn];\n\nstruct W {\n    int v,num,ans;\n    inline bool operator<(const W &_others) const {\n        return this->v < _others.v;\n    }\n};\nW w[maxn];\n\nstruct C {\n    int ud,v,tp;\n    C (int _ud=0,int _v=0,int _tp=0) {ud=_ud,v=_v,tp=_tp;}\n};\nstd::vector<C>cg[maxn];\n\nint n,m;\nint deepth[maxn],fa[maxn],LCA[30][maxn],pos[maxn],lft[maxn],rt[maxn];\n\nvoid t1();\nvoid s1();\nvoid lian();\nvoid baoli();\nvoid zhengjie();\nvoid dfs(ci,ci);\nint ask(int,int);\nint dfsearch(ci,ci);\nvoid deepfs(ci,ci);\nvoid dfirsts(ci,ci);\n\ninline bool cmp(const W &_a,const W & _b) {\n    return _a.num < _b.num;\n}\n\nint main() {\n    qr(n);qr(m);\n    rg int a,b;\n    for(rg int i=1;i<n;++i) {\n        a=b=0;qr(a);qr(b);\n        cont(a,b);cont(b,a);\n    }\n    for(rg int i=1;i<=n;++i) {\n        qr(w[i].v);w[i].num=i;\n    }\n    for(rg int i=1;i<=m;++i) {\n        qr(MU[i].s);qr(MU[i].t);\n    }\n\tint _num=n%10;\n    if(_num < 4) baoli();\n    else if(_num == 4) lian();\n    else if(_num == 5) s1();\n    else if(_num == 6) t1();\n    else zhengjie();\n    return 0;\n}\n\nvoid dfs(ci u,ci fat) {\n    deepth[u]=deepth[fa[u]=fat]+1;\n    LCA[0][u]=fat;\n    for(rg int i=0;LCA[i][u];++i) {\n        LCA[i+1][u]=LCA[i][LCA[i][u]];\n    }\n    for(rg int i=hd[u];i;i=edge[i].nxt) if(edge[i].to != fat)\n        dfs(edge[i].to,u);\n}\n\nint ask(int x,int y) {\n    if(deepth[x] < deepth[y]) mswap(x,y);\n    rg int delta=deepth[x]-deepth[y];\n    for(rg int i=25;delta;--i) if(delta & (1<<i)) {\n        x=LCA[i][x],delta^=(1<<i);\n    }\n    if(x == y) return x;\n    for(rg int i=25;i != -1;--i) if(LCA[i][x] != LCA[i][y]) {\n        x=LCA[i][x],y=LCA[i][y];\n    }\n    return LCA[0][x];\n}\n\nvoid baoli() {\n    dfs(1,0);\n    for(rg int i=1;i<=m;++i) {\n        MU[i].an=ask(MU[i].s,MU[i].t);\n        pos[i]=MU[i].s;\n    }\n    std::sort(w+1,w+1+n);\n    rg int j=1;\n    for(rg int i=0;i<n;++i) {\n        while(j <= n) {\n            if(w[j].v != i) break;\n            for(rg int k=1;k<=m;++k) if(pos[k] == w[j].num) ++w[j].ans;\n            ++j;\n        }\n        for(rg int k=1;k<=m;++k) if(deepth[MU[k].s]+deepth[MU[k].t]-2*deepth[MU[k].an] > i) {\n            int _d=deepth[MU[k].s]-deepth[MU[k].an];\n            if(_d > i) {\n                pos[k]=fa[pos[k]];\n            }\n            else {\n                _d=deepth[MU[k].s]-deepth[MU[k].an]+deepth[MU[k].t]-deepth[MU[k].an]-i-1;\n                int _t=MU[k].t;\n                for(rg int h=25;_d;--h) if(_d & (1<<h)) {\n                    _t=LCA[h][_t],_d^=(1<<h);\n                }\n                pos[k]=_t;\n            }\n        }\n        else pos[k]=0;\n    }\n    while(j <= n) {\n        for(rg int k=1;k<=m;++k) if(pos[k] == w[j].num) ++w[j].ans;\n        ++j;\n    }\n    std::sort(w+1,w+1+n,cmp);\n    for(rg int i=1;i<n;++i) write(w[i].ans,' ',true);\n    write(w[n].ans,'\\n',true);\n}\n\nvoid lian() {\n    for(rg int i=1;i<=m;++i) {\n        if(MU[i].t >= MU[i].s) ++rt[MU[i].s],MU[i].sum=MU[i].t-MU[i].s;\n        else ++lft[MU[i].s],MU[i].sum=MU[i].s-MU[i].t;\n    }\n    std::sort(MU+1,MU+1+m);\n    std::sort(w+1,w+1+n);\n    rg int j=0;\n    for(rg int i=1;i<=n;++i) {\n        while(j <= m) {\n            if(MU[j].sum >= w[i].v) break;\n            if(MU[j].s <= MU[j].t) --rt[MU[j].s];\n            else --lft[MU[j].s];\n            ++j;\n        }\n        int _d=w[i].num-w[i].v;\n        if(_d > 0) w[i].ans+=rt[_d];\n        _d=w[i].num+w[i].v;\n        if(_d <= n) w[i].ans+=lft[_d];\n    }\n    std::sort(w+1,w+1+n,cmp);\n    for(rg int i=1;i<n;++i) write(w[i].ans,' ',true);\n    write(w[n].ans,'\\n',true);\n}\n\nvoid s1() {\n    deepth[0]=-1;\n    dfs(1,0);\n    for(rg int i=1;i<=m;++i) {\n        ++lft[MU[i].t];\n    }\n    int _cnt=dfsearch(1,0);\n    if(!w[1].v) w[1].ans=_cnt;\n    for(rg int i=1;i<n;++i) write(w[i].ans,' ',true);\n    write(w[n].ans,'\\n',true);\n}\n\nint dfsearch(ci u,ci fat) {\n    rg int _cnt=lft[u];\n    for(rg int i=hd[u];i;i=edge[i].nxt) if(edge[i].to != fat) \n        _cnt+=dfsearch(edge[i].to,u);\n    if(w[u].v == deepth[u]) w[u].ans=_cnt;\n    return _cnt;\n}\n\nvoid deepfs(ci u,ci fat) {\n    rg int _c=lft[w[u].v+deepth[u]+ZAY];\n    lft[deepth[u]+ZAY]+=rt[u];\n    for(rg int i=hd[u];i;i=edge[i].nxt) if(edge[i].to != fat)\n        deepfs(edge[i].to,u);\n    w[u].ans=lft[w[u].v+deepth[u]+ZAY]-_c;\n}\n\nvoid t1() {\n    deepth[0]=-1;\n    for(rg int i=1;i<=m;++i) ++rt[MU[i].s];\n    dfs(1,0);\n    deepfs(1,0);\n    for(rg int i=1;i<n;++i) write(w[i].ans,' ',true);\n    write(w[n].ans,'\\n',true);\n}\n\nvoid zhengjie() {\n    dfs(1,0);\n    for(rg int i=1;i<=n;++i) {\n        MU[i].an=ask(MU[i].s,MU[i].t);\n        MU[i].sum=deepth[MU[i].s]-2*deepth[MU[i].an]+deepth[MU[i].t]+1;\n        cg[MU[i].s].push_back(C(1,deepth[MU[i].s],1));\n        cg[MU[i].t].push_back(C(2,deepth[MU[i].t]-MU[i].sum+1+ZAY,1));\n        cg[MU[i].an].push_back(C(1,deepth[MU[i].s],-1));\n        cg[fa[MU[i].an]].push_back(C(2,deepth[MU[i].t]-MU[i].sum+1+ZAY,-1));\n    }\n    dfirsts(1,0);\n    for(rg int i=1;i<n;++i) write(w[i].ans,' ',true);\n    write(w[n].ans,'\\n',true);\n}\n\nvoid dfirsts(ci u,ci fat) {\n    int _temp=lft[deepth[u]+w[u].v]+rt[deepth[u]-w[u].v+ZAY];\n    rg unsigned int _s=cg[u].size();\n    for(rg unsigned i=0;i<_s;++i) {\n        int _ud=cg[u][i].ud;\n        if(_ud == 1) {\n            lft[cg[u][i].v]+=cg[u][i].tp;\n        }\n        else rt[cg[u][i].v]+=cg[u][i].tp;\n    }\n    for(rg int i=hd[u];i;i=edge[i].nxt) if(edge[i].to != fat) \n        dfirsts(edge[i].to,u);\n    w[u].ans=lft[deepth[u]+w[u].v]+rt[deepth[u]-w[u].v+ZAY]-_temp;\n}\n```\n\n## Summary\n1\u3001\u6811\u4e0a\u64cd\u4f5c\u95ee\u9898\u5728\u5355\u70b9\u8fdb\u884c\u52a0\u51cf\u64cd\u4f5c\u65f6\u5e38\u8003\u8651\u4f7f\u7528\u5dee\u5206\u8fdb\u884c\u5b8c\u6210\n2\u3001\u6839\u636e\u90e8\u5206\u5206\u63a8\u5230\u6b63\u89e3\u662f\u4e00\u79cd\u975e\u5e38\u4e0d\u9519\u7684\u59ff\u52bf\n3\u3001\u5bf9\u4e8e\u5168\u5c40\u6876\u7684\u5e94\u7528\uff1a\u8bb0\u5f55\u5b83\u5bf9\u67d0\u6b21\u8ba1\u7b97\u7684\u8d21\u732e\u53ef\u4ee5\u7edf\u8ba1\u4ed6\u7684\u589e\u91cf\u3002\n\n",
        "postTime": 1537521259,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u6211\u535a\u5ba2\u770b\uff1ahttp://www.cnblogs.com/bingdada/p/7744200.html\n\n\u6b63\u89e3\uff1a\n\nLCA+\u6876+\u5dee\u5206\uff08\u4e5f\u4e0d\u80fd\u8bf4\u662f\u5dee\u5206\u4f46\u53c8\u548c\u5dee\u5206\u7c7b\u4f3c\uff09\n\n\n\n\u5728\u8bf4\u6b63\u89e3\u4e4b\u524d\uff0c\u5148\u58f0\u660e\u4e00\u4e9b\u53d8\u91cf\n\nV1[x] : \u4ee5x\u4e3aLCA\u7684\u8def\u5f84\u7684\u8d77\u70b9\u7684\u96c6\u5408\u3002\n\nSpn[x]: \u4ee5x\u4e3a\u8def\u5f84\u8d77\u70b9\u7684\u8def\u5f84\u6761\u6570\u3002\n\nV2[x]: \u4ee5x\u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u7684\u8d77\u70b9\u96c6\u5408\u3002\n\nV3[x]: \u4ee5x\u4e3aLCA\u7684\u8def\u5f84\u7684\u7ec8\u70b9\u7684\u96c6\u5408\u3002\n\n\n\u53e6\u5916\uff0c\u9996\u5148\u8fd8\u8981\u8ba9\u8bfb\u8005\u6452\u5f03\u4e00\u4e2a\u89c2\u5ff5\u3002\n\n\u6b63\u89e3\u5e76\u4e0d\u662f\u5bf9\u4e00\u4e2a\u4e2a\u73a9\u5bb6\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u800c\u662f\u5148\u5bf9\u5168\u90e8\u73a9\u5bb6\u8fdb\u884c\u4e00\u4e9b\u9884\u5904\u7406\uff0c\u7136\u540e\u7528\u4e24\u4e2a\u7c7b\u4f3c\u7684dfs\u51fd\u6570\u5bf9\u6574\u68f5\u6811\u5904\u7406\u3002\n\n\u6700\u540e\u518d\u505a\u4e00\u4e9b\u5fae\u8c03\uff0c\u5c31\u8f93\u51fa\u7b54\u6848\u3002\n\n\n\u7531\u4e8e\u4f5c\u8005\u4e0d\u77e5\u4ee5\u4ec0\u4e48\u6837\u7684\u65b9\u5f0f\u5f15\u8fdb\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u7528\u5230\u7684\u201c\u6876\u201d\u7684\u6982\u5ff5\uff0c\u6211\u4eec\u6682\u65f6\u5148\u6765\u8003\u8651\u4e0b\u9762\u4e00\u4e2a\u95ee\u9898\u3002\n\n\n\u7ed9\u5b9a\u4e00\u6761\u94fe\uff0c\u94fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u6709k\u4e2a\u8d21\u732e\u503c\uff0c\u8be5\u8d21\u732e\u503c\u53ea\u80fd\u5411\u94fe\u9996\u65b9\u5411\u4f20\u64ad\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9i\uff0c\u5f53\u4e14\u4ec5\u5f53\u67d0\u8282\u70b9j\u4e0ei\u8282\u70b9\u7684\u8ddd\u79bb\u7b49\u4e8ei\u8282\u70b9\u7684\u8d21\u732e\u503c\u65f6\uff0ci\u8282\u70b9\u5bf9j\u8282\u70b9\u5c06\u4ea7\u751f1\u7684\u8d21\u732e\u3002\n\n\u7ed9\u51fa\u94fe\u4e0a\u8282\u70b9\u7684k\u4e2a\u8d21\u732e\u503c\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u80fd\u5f97\u5230\u591a\u5c11\u8d21\u732e\u3002\n\n\u5982\u679c\u65e0\u8d21\u732e\u5e94\u8f93\u51fa0\u3002\n\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u94fe\u5c3e\u8282\u70b9\u5f00\u59cb\u5bf9\u94fe\u8fdb\u884cDfs\uff0c\u6bcf\u5f53\u8bbf\u95ee\u4e00\u4e2a\u70b9\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5f53\u524d\u70b9\u5bf9\u54ea\u4e9b\u70b9\u662f\u6709\u8d21\u732e\u7684\u3002\n\n\n\u6211\u4eec\u8bbedeep[i]\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u6df1\u5ea6\uff0cG[i]\u4e3ai\u70b9\u7684\u8d21\u732e\u503c\u96c6\u5408\u3002\n\n\u5219\u5bf9\u4e8ei\u70b9\u6765\u8bf4\uff0c\u5b83\u80fd\u5bf9\u6df1\u5ea6\u4e3adeep[i]+G[i][k]\u7684\u70b9\u4ea7\u751f\u8d21\u732e\u3002\n\n\u90a3\u4e48\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4bucket[i]\u6765\u7ef4\u62a4\u8fd9\u4e2a\u8d21\u732e\u3002\n\n\u4e8e\u9898\u610f\u6211\u4eec\u80fd\u5199\u51fa\u4e0b\u9762\u4f2a\u4ee3\u7801\n\n\nDfs(i)\nFor p in G[i] ----   ++bucket[deep[i] + p]\n\nDfs (i.children)\n\n\u6700\u540e\u53ea\u8981\u9006\u5e8f\u8f93\u51fabucket[i]\u5c31\u884c\u4e86\u3002\n\n\n\u5982\u679c\u5bf9\u4e0a\u9762\u7684\u95ee\u9898\u7406\u89e3\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6876\u8fd9\u4e2a\u6982\u5ff5\uff0c\u5c31\u80fd\u5927\u6982\u7406\u89e3\u3002\n\n\n\u90a3\u4e48\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u5165\u6b63\u9898\u3002\n\n\u5bf9\u4e8e\u73a9\u5bb6\u5728\u6811\u4e0a\u7684\u8def\u5f84\uff08u\uff0cv\uff09\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u62c6\u5206\u3002\n\n\u62c6\u5206\u6210\uff1a  u ---> LCA(u,v)   \u4e0e  LCA(u,v) ---> v  \u4e24\u6761\u8def\u5f84\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e00\u6b65\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u4e00\u5f00\u59cb\u5df2\u7ecf\u8bf4\u660e\u662f\u5148\u5bf9\u6bcf\u4e2a\u73a9\u5bb6\u8fdb\u884c\u9884\u5904\u7406\uff0c\n\n\u6240\u4ee5\u5728\u8fd9\u4e00\u6b65\u6211\u4eec\u9009\u62e9Tarjan\u7248\u672c\u7684LCA\u4f1a\u66f4\u597d\u4e00\u4e9b\uff0c\u56e0\u4e3a\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u66f4\u5c11\uff0c\n\n\u4e0d\u8fc7\uff0c\u7528\u500d\u589e\u6c42LCA\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\u4e5f\u662f\u4e0d\u4f1a\u5361\u7684\uff08\u4f5c\u8005\u4eb2\u6d4b\uff0c\u65f6\u95f4\u6700\u957f\u7684\u4e00\u4e2a\u70b9\u662f0.5s\u5de6\u53f3\uff09\u3002\n\n\n\u6211\u4eec\u5148\u8003\u8651  u ---> LCA(u\uff0cv) \u8fd9\u6761\u8def\u5f84\uff0c\u8fd9\u662f\u4e00\u6761\u5411\u201c\u4e0a\u201d\u8dd1\u7684\u8def\u5f84\u3002\n\n\u5bf9\u4e0e\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9i\u6765\u8bf4\uff0c\u5f53\u4e14\u4ec5\u5f53deep[i]+w[i] = deep[u]\u65f6\uff0cu\u8282\u70b9\u5bf9i\u8282\u70b9\u662f\u6709\u8d21\u732e\u7684\u3002\n\n\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u7b26\u5408deep[i]+w[i]\u7684\u5168\u90e8\u662f\u73a9\u5bb6\u8d77\u70b9\u7684\u70b9\uff0c\u5c31\u80fd\u5bf9i\u70b9\u4ea7\u751f\u8d21\u732e\u3002\n\n\u6240\u4ee5\u6709\u4e0b\u5217\u4f2a\u4ee3\u7801\uff1a\n\nDfs1(i)\n\n\u00b7prev = bucket[deep[i]+w[i]]\n\n\u00b7Dfs1(i.children)\n\n\u00b7bucket[deep[i]] += spn[i]\n\n\u00b7ans[i] += bucket[deep[i]+w[i]] - prev\n\n\u00b7for k in V1[i] ---do  --bucket[deep[k]]\n\n\n\u5176\u4e2d\nans[i] \u4e3ai\u8282\u70b9\u7684\u6700\u540e\u7b54\u6848\u3002\n\nSpn\u4e0eV1\u6570\u7ec4\u5728\u6587\u7ae0\u5f00\u5934\u5df2\u7ecf\u58f0\u660e\n\nPrev\u4e3a\u521a\u8bbf\u95eei\u8282\u70b9\u65f6bucket[deep[i]+w[i]]\u91cc\u7684\u503c\u3002\n\n\u5728\u8fd9\u89e3\u91ca\u4e00\u4e0b\u4f2a\u4ee3\u7801\u4e2d\u4e0d\u597d\u7406\u89e3\u7684\u6700\u540e\u4e24\u6761\u8bed\u53e5\u3002\n\n\u5bf9\u4e8e\u5012\u6570\u7b2c\u4e8c\u6761\u8bed\u53e5\uff0cans[i]\u52a0\u4e0a\u7684\u5176\u5b9e\u5c31\u662fi\u7684\u5b50\u6811\u5bf9i\u7684\u8d21\u732e\uff0c\u4e3a\u4ec0\u4e48\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u5728\u5904\u7406\u597d\u5b50\u6811\u4e4b\u540e\u7684\uff0c\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u597d\u4e86\u5bf9i\u6709\u5f71\u54cd\u7684\u8282\u70b9\uff0c\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u52a0\u4e0a\u5148\u540e\u4e4b\u95f4\u7684\u6876\u5dee\u503c\u5c31\u76f8\u5f53\u4e8e\u7edf\u8ba1\u4e86\u7b54\u6848\u3002\n\n\u5176\u4f5c\u7528\u662f\u5220\u53bb\u6876\u4e2d\u4ee5i\u4e3aLCA\u7684\u8def\u5f84\u7684\u8d77\u70b9\u6df1\u5ea6\u6876\u7684\u503c\uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u904d\u5386\u5b8ci\u8282\u70b9\u7684\u5b69\u5b50\u65f6\uff0c\n\n\u5bf9\u4e8e\u4ee5i\u8282\u70b9\u4e3aLCA\u7684\u8def\u5f84\u6765\u8bf4\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\u5bf9i\u7684\u7956\u5148\u8282\u70b9\u662f\u4e0d\u4f1a\u6709\u5f71\u54cd\u7684\u3002\n\n\u6240\u4ee5\u8981\u5c06\u5176\u5220\u53bb\u3002\n\n\u5728\u8fd9\u4e0d\u6253\u7b97\u89e3\u91ca\u5176\u4ed6\u7684\u4f2a\u4ee3\u7801\uff0c\u56e0\u4e3a\u4f5c\u8005\u8ba4\u4e3a\uff0c\u5728\u6570\u7ec4\u548c\u53d8\u91cf\u7ed9\u51fa\u7684\u60c5\u51b5\u4e0b\n\n\uff0c\u8bfb\u8005\u5982\u679c\u81ea\u5df1\u80fd\u53bb\u8fdb\u884c\u63a8\u5bfc\u4e0e\u6a21\u62df\uff0c\u53ef\u80fd\u4f1a\u5bf9\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u6709\u66f4\u6df1\u7684\u4e86\u89e3\u3002\n\n\u53e6\u5916\uff0c\u8bf7\u518d\u6b21\u8bb0\u4f4f\u6587\u7ae0\u5f00\u5934\u9700\u8981\u8bfb\u8005\u6452\u5f03\u7684\u6982\u5ff5\uff0c\u8fd9\u5f88\u91cd\u8981\u3002\n\n\n\u5728\u53d9\u8ff0\u5b8c\u5411\u4e0a\u7684\u8def\u5f84\u540e\uff0c\u6211\u4eec\u518d\u6765\u8003\u8651\u5411\u4e0b\u7684\u8def\u5f84\uff0c\u5373LCA(u,v) --->v\u3002\n\n\u5bf9\u4e8e\u5411\u4e0b\u8d70\u7684\u8def\u5f84\uff0c\u6211\u4eec\u4e5f\u601d\u8003\uff0c\u5728\u4ec0\u4e48\u6761\u4ef6\u4e0b\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u4f1a\u83b7\u5f97\u8d21\u732e\u5462\uff1f\n\n\u5f88\u660e\u663e\u7684\uff0c\u5f53  dis(u,v)-deep[v] = w[i]-deep[i]  \u7b49\u5f0f\u6210\u7acb\u7684\u65f6\u5019\uff0c\u8fd9\u6761\u8def\u5f84\u5c06\u4f1a\u5bf9i\u70b9\u6709\u8d21\u732e\u3002\n\n\u6240\u4ee5\uff0c\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u7b2c\u4e8c\u4e2aDfs\u4f2a\u4ee3\u7801\u3002\n\nDfs2(i)\n\n\u00b7prev = bucket[w[i]-deep[i]]\n\n\u00b7Dfs2(i.children)\n\n\u00b7for  k  in  V2[i]  --do  ++bucket[dis(k,i)-deep[i]]\n\n\u00b7ans[i]  += bucket[w[i]-deep[i]] - prev\n\n\u00b7for  k  in  V3[i]   --do  --bucket[dis(i,k)-deep[k]]\n\n\u5176\u4e2d\n\u00b7dis(u,v)\u8868\u793a\u4eceu\u8282\u70b9\u5230v\u8282\u70b9\u7684\u8ddd\u79bb\n\n\u00b7 V3\u4e0eV2\u5982\u6587\u7ae0\u5f00\u5934\u6240\u5b9a\u4e49\u3002\n\n\u00b7\u5173\u4e8e\u4e24\u6761for \u8bed\u53e5\uff1a\u7b2c\u4e00\u6761\u662f\u52a0\u4e0a\u4ee5i\u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u7684\u8d21\u732e\u3002\n\n\u7b2c\u4e8c\u6761\u4e0e\u7b2c\u4e00\u4e2aDfs\u4e2d\u6700\u540e\u4e00\u6761\u8bed\u53e5\u7c7b\u4f3c\u3002\n\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u73b0\u5728\u6211\u4eec\u4e3b\u8981\u7684\u601d\u8def\u5df2\u7ecf\u5b8c\u5168\u8bb2\u5b8c\u4e86\u3002\n\n\u4f46\u662f\uff0c\u5bf9\u4e8e\u5b9e\u73b0\u6765\u8bf4\uff0c\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\u3002\n\n\u00b7\u5bf9\u4e8e\u6876bucket\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u8ba1\u7b97\u7684\u8fc7\u7a0b\u4e2d\u5176\u4e0b\u6807\u53ef\u80fd\u662f\u8d1f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u64cd\u4f5c\u6876\u65f6\u8981\u5c06\u5176\u4e0b\u6807\u53f3\u79fb MAXN  \u5373\u70b9\u6570\u3002\n\n\u00b7\u5982\u679c\u4e00\u6761\u8def\u5f84\u7684LCA\u80fd\u89c2\u5bdf\u5230\u8fd9\u6761\u8def\u4e0a\u7684\u4eba\uff0c\u6211\u4eec\u8fd8\u9700\u5c06\u8be5LCA\u53bb\u91cd\u3002\n\n\u6761\u4ef6\u662f\uff1a  if(deep[u] == deep[lca]+w[i])ans[lca]--;\n\n\n\u4e0b\u9762\u8d34\u4e0b\u4ee3\u7801\uff08LCA\u7528\u7684\u662f\u500d\u589e\uff09\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n       \n\n\n    \n    \n    \n\n    \n    \n    \n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<vector>\n#include<algorithm> \n#define N 300009\n#define M 600009\nusing namespace std;\nint en,n,m;\nint w[N],spn[M],bucket[N+M],ans[N];\nvector<int> v1[M],v2[M],v3[M];\nstruct nod{\n    int u,v,dis,lca;\n}p[N];\nstruct edge{\n    int e;\n    edge *next;\n}*v[N],ed[M];\ninline void add_edge(int s,int e){\n    en++;\n    ed[en].next = v[s],v[s] = ed+en,v[s]->e =e;\n}\nint read(){\n    int x = 0;\n    char ch = getchar();\n    while(ch < '0' || ch > '9')ch = getchar();\n    while(ch >= '0' && ch <= '9'){\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x;\n}\nint deep[N],f[N][25],dist[N];\nbool use[N];\nvoid dfs(int now,int dep){\n    use[now] = true;\n    deep[now] = dep;\n    for(int k = 1;k <= 22; k++){\n        int j = f[now][k-1];\n        f[now][k] = f[j][k-1];\n    }\n    for(edge *e = v[now];e;e=e->next)\n      if(!use[e->e]){\n           f[e->e][0] = now;\n           dist[e->e] = dist[now]+1;\n           dfs(e->e,dep+1);\n      }\n    use[now] = false;\n}\ninline int jump(int u,int step){\n    for(int k = 0; k <= 22; k++)\n      if((step & (1<<k)))u = f[u][k];\n    return u;\n}\ninline int qlca(int u,int v){\n    if(deep[u] < deep[v])swap(u,v);\n    u = jump(u,deep[u]-deep[v]);\n    for(int k = 22; k >= 0; k--)\n      if(f[u][k] != f[v][k])u = f[u][k],v = f[v][k];\n    return u == v ? u : f[u][0];\n}\nvoid LCA(){                        //\u5173\u4e8eLCA\u7684\u7ec4\u4ef6\n    f[1][0] = 1;\n    dfs(1,0);\n}\ninline void dfs1(int now){\n    use[now] = true;\n    int prev = bucket[deep[now]+w[now]+N];\n    for(edge *e = v[now];e;e=e->next)\n        if(!use[e->e])dfs1(e->e);\n    bucket[deep[now]+N] += spn[now];\n    ans[now] += bucket[deep[now]+w[now]+N]-prev;\n    int len = v1[now].size();\n    for(int k = 0; k < len;k++)\n      --bucket[deep[v1[now][k]]+N];\n    use[now] = false;\n}\ninline void dfs2(int now){\n    use[now] = true;\n    int prev = bucket[w[now]-deep[now]+N];\n    for(edge *e = v[now];e;e=e->next)\n      if(!use[e->e])dfs2(e->e);\n    int len = v2[now].size();\n    for(int k = 0; k < len; k++)\n       ++bucket[v2[now][k]+N];\n    ans[now] += bucket[w[now]-deep[now]+N] - prev;\n    len = v3[now].size();\n    for(int k = 0; k < len; k++)\n       --bucket[v3[now][k]+N];\n    use[now] = false;\n}\nint main(){\n    n = read(),m = read();\n    for(int i = 1; i <= n-1; i++){\n        int u = read(), v = read();\n        add_edge(u,v);\n        add_edge(v,u);\n    }\n    for(int i = 1; i <= n; i++)w[i] = read();\n    LCA();                    \n    for(int i = 1; i <= m; i++){                //\u9884\u5904\u7406 \n        int u = read(),v = read();\n        p[i].u = u;\n        p[i].v = v;\n        p[i].lca = qlca(u,v);\n        p[i].dis = dist[u]+dist[v]-dist[p[i].lca]*2;\n        spn[u]++;\n        v1[p[i].lca].push_back(u);\n        v2[v].push_back(p[i].dis-deep[p[i].v]);\n        v3[p[i].lca].push_back(p[i].dis-deep[p[i].v]);\n    }\n    dfs1(1);        //\u4ece\u4e0b\u81f3\u4e0a\n    dfs2(1);        //\u4ece\u4e0a\u81f3\u4e0b\n    for(int i = 1; i <= m; i++)\n       if(deep[p[i].u] == deep[p[i].lca]+w[p[i].lca]) ans[p[i].lca]--;\n    for(int i = 1; i <= n; i++)\n      printf(\"%d \",ans[i]);\n    printf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1509095040,
        "uid": 32526,
        "name": "\u9648\u65b0\u6708",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u535a\u5ba2\u4f20\u9001\u95e8\uff1a[\u5b51\u884c](https://www.cnblogs.com/wmq12138/p/11166413.html)\n## \u7ebf\u6bb5\u6811\u5408\u5e76+\u6811\u4e0a\u5dee\u5206\n\n\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9053\u9898\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u505a\u6cd5\u662f\u6700\u7b80\u5355\u7684\n\n**\u9898\u610f**\uff1a\u7ed9\u4e00\u68f5\u6811\u548c m\u6761\u8def\u5f84\uff0c\u6811\u4e0a\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u503c $W_i$ \u3002\u95ee\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u8be2\u95ee\u6709\u591a\u5c11\u6761\u8def\u5f84\u7684\u7b2c $W_i+1$\u4e2a\u70b9\u662f\u8fd9\u4e2a\u70b9\u3002$n,m \\leqslant 1e5$\n\n\u5047\u8bbe\u5f53\u524d\u8def\u5f84\u4e3a$s$->$t$\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u51fa$lca$\n\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u5efa\u7acb\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4ee5$dep$\u4e3a\u4e0b\u6807\uff0c\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58\u6570\u503ci\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u53f6\u5b50\u7ed3\u70b9\u4e0a\u7684\u4fe1\u606f\n\n\u7528\u6811\u4e0a\u5dee\u5206\u628a\u94fe\u7684\u4fe1\u606f\u8f6c\u5316\u4e3a\u70b9\n\n\u73b0\u5728\u5bf9\u4e8e$s$->$lca$\u7684\u8def\u5f84\uff0c\u53ea\u9700\u8981\u5728$s$\u5904\u7684\u7ebf\u6bb5\u6811\u8ba9$dep[s]$+1\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u7edf\u8ba1\u7b54\u6848\u65f6\u67e5\u8be2$dep[x]+w[x]$\u51fa\u73b0\u4e86\u51e0\u6b21\u5373\u53ef\u5373\u53ef\n\n\u5bf9\u4e8e$lca$->$t$\u7684\u8def\u5f84\uff0c\u6211\u4eec\u60f3\u529e\u6cd5\u628a$s$\u5173\u4e8e$lca$\u7ffb\u4e0a\u53bb\uff0c\u5728\u5728\u6bcf\u4e2a\u70b9\u7edf\u8ba1dep=dep[x]-w[x]\u7684\u70b9\u6709\u51e0\u4e2a\n\n\u6ce8\u610f\u7ffb\u4e0a\u53bb\u540ed\u53ef\u80fd\u53d8\u4e3a\u8d1f\u7684\uff0c\u6240\u4ee5\u8981\u6574\u4f53\u5e73\u79fb\u4e00\u4e0b\u503c\u57df\uff0c\u90fd\u52a0\u4e0an\u5373\u53ef(~~\u5176\u5b9e\u4e0d\u5e73\u79fb\u5e94\u8be5\u4e5f\u53ef\u4ee5~~)\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n#define rint register int\n#define il inline\nconst int N=3e5+5;\nil int read(int x=0,int f=1,char ch='0')\n{\n    while(!isdigit(ch=getchar())) if(ch=='-') f=-1;\n    while(isdigit(ch)) x=x*10+ch-'0',ch=getchar();\n    return f*x;\n}\nint n,m,w[N];\n\nint head[N],ver[N<<1],nxt[N<<1],tot;\nil void add(int x,int y){ ver[++tot]=y; nxt[tot]=head[x]; head[x]=tot; }\n\nint dep[N],top[N],son[N],siz[N],fa[N];\nvoid dfs1(int x,int ff)\n{\n    fa[x]=ff; dep[x]=dep[ff]+1; siz[x]=1;\n    for(rint i=head[x];i;i=nxt[i])\n    {\n        int y=ver[i]; if(y==ff) continue;\n        dfs1(y,x); siz[x]+=siz[y];\n        if(siz[y]>siz[son[x]]) son[x]=y;\n    }\n}\nvoid dfs2(int x,int topf)\n{\n    top[x]=topf;\n    if(!son[x]) return ;\n    dfs2(son[x],topf);\n    for(rint i=head[x];i;i=nxt[i])\n    {\n        int y=ver[i]; if(y==fa[x]||y==son[x]) continue;\n        dfs2(y,y);\n    }\n}\nil int LCA(int x,int y)\n{\n    while(top[x]!=top[y])\n    {\n        if(dep[top[x]]<dep[top[y]]) swap(x,y);\n        x=fa[top[x]];\n    }\n    return dep[x]>dep[y] ? y : x;\n}\n\nconst int M=N*55;\nint root[N],lc[M],rc[M],val[M],num;\nvoid update(int &x,int l,int r,int v,int d)\n{\n    if(!x) x=++num;\n    if(l==r) return (void)(val[x]+=d);\n    int mid=l+r>>1;\n    if(v<=mid) update(lc[x],l,mid,v,d);\n    else update(rc[x],mid+1,r,v,d);\n}\nint query(int x,int l,int r,int p)\n{\n    if(!x) return 0;\n    if(l==r) return val[x];\n    int mid=l+r>>1;\n    if(p<=mid) return query(lc[x],l,mid,p);\n    else return query(rc[x],mid+1,r,p);\n}\nint merge(int a,int b,int l,int r)\n{\n    if(!a || !b) return a+b;\n    if(l==r)\n        val[a]+=val[b];\n    else\n    {\n        int mid=l+r>>1;\n        lc[a]=merge(lc[a],lc[b],l,mid);\n        rc[a]=merge(rc[a],rc[b],mid+1,r);\n    }\n    return a;   \n}\nint ans[N];\nvoid dfs(int x)\n{\n    for(rint i=head[x];i;i=nxt[i])\n    {\n        int y=ver[i]; if(y==fa[x]) continue;\n        dfs(y); \n        root[x]=merge(root[x],root[y],1,n<<1);\n    }\n    if(w[x] && n+dep[x]+w[x]<=2*n)//\u6ce8\u610f\u8981\u5224\u65ad\u6ca1\u6709\u8d8a\u754c\n        ans[x]+=query(root[x],1,n<<1,n+dep[x]+w[x]);\n    ans[x]+=query(root[x],1,n<<1,n+dep[x]-w[x]);\n}\n\nint main()\n{\n    n=read(); m=read();\n    for(rint i=1,x,y;i<n;++i) x=read(),y=read(),add(x,y),add(y,x);\n    dfs1(1,0); dfs2(1,1);\n    for(rint i=1;i<=n;++i) w[i]=read();\n    for(rint i=1;i<=m;++i)\n    {\n        int x=read(),y=read(); int lca=LCA(x,y);\n        update(root[x],1,n<<1,n+dep[x],1);\n        update(root[y],1,n<<1,n+dep[lca]*2-dep[x],1);\n        update(root[lca],1,n<<1,n+dep[x],-1);\n        update(root[fa[lca]],1,n<<1,n+dep[lca]*2-dep[x],-1);\n    }\n    dfs(1);\n    for(rint i=1;i<=n;++i)\n        printf(\"%d \",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1562762955,
        "uid": 123553,
        "name": "robin12138",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "# \u7ecf\u5178\u91cd\u6e29\u2014\u2014NOIP2016\u6700\u6bd2\u7624\u7684\u9898\u76ee\u5929\u5929\u7231\u8dd1\u6b65\n\n[\u9898\u76ee\u94fe\u63a5\u6233\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P1600)\n\n~~\u5f53\u5e74\u7b2c\u4e00\u6b21\u8003\u63d0\u9ad8\u7ec4\u672c\u6765\u8fd9\u9898\u60f3\u9a97\u5206\u7ed3\u679c\u6210\u529f\u7684\u628a\u7a7a\u95f4\u5f00\u7206\u4e86\u53ef\u89c1\u6211\u8fd8\u662f\u592a\u83dc\u4e86~~\n\n## \u603b\u4f53\u601d\u8def:\u6811\u4e0a\u64cd\u4f5c(\u6c42$LCA$)+\u6876(\u5dee\u5206\u601d\u60f3\u7edf\u8ba1\u7b54\u6848)\n\n## \u5177\u4f53\u601d\u8def\u5982\u4e0b:\n\n\u5bf9\u4e8e\u67d0\u6761\u6811\u4e0a\u8def\u5f84$u \\to v$,\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u5176\u62c6\u6210\u4e24\u6bb5,\u5373\u7531\u4e0b\u81f3\u4e0a\u7684\u8def\u5f84$u\\to lca_{u,v}$\u548c\u7531\u4e0a\u81f3\u4e0b\u7684\u8def\u5f84$lca_{u,v}\\to v$,\u5bf9\u4e8e\u6811\u4e0a\u7684\u67d0\u4e2a\u89c2\u5bdf\u70b9$i$,\u8bb0\u5176\u89c2\u5bdf\u65f6\u95f4\u4e3a$w_i$\n\n#### \u6211\u4eec\u9996\u5148\u8003\u8651\u7531\u4e0b\u81f3\u4e0a\u7684\u8def\u5f84$u\\to lca_{u.v}$:\n\n\u82e5\u8be5\u6761\u8def\u5f84\u7684\u73a9\u5bb6\u80fd\u88ab\u89c2\u5bdf\u5458$i$\u89c2\u5bdf\u5230,\u5373\u5bf9$i$\u70b9\u4ea7\u751f\u8d21\u732e,\u5219\u5176\u7b49\u4ef7\u6761\u4ef6\u4e3a:\n\n* \u8d77\u70b9$u$\u5728\u4ee5$i$\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\n* $lca_{u,v}$\u4e0d\u5728\u4ee5$i$\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\n* $depth_{u}=depth_i+w_i$\n\n\u6211\u4eec\u501f\u7528\u6876\u7684\u601d\u60f3,\u7528$bucket_p$\u8bb0\u5f55\u5f53\u524d\u6ee1\u8db3\u8d77\u70b9\u6df1\u5ea6$depth_u=p$\u7684\u8def\u5f84\u6570\u91cf.\n\n\u5177\u4f53\u7684\u7edf\u8ba1\u65b9\u6cd5\u4e3a\u641c\u7d22\u5230\u67d0\u4e00\u8282\u70b9\u65f6\u8bb0\u5f55\u5f53\u524d\u6ee1\u8db3$p=depth_i+w_i$\u7684\u8def\u5f84\u6761\u6570,\u968f\u540e\u4f9d\u6b21\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u8be5\u8282\u70b9\u6240\u6709\u7684\u5b50\u8282\u70b9.\u56de\u6eaf\u65f6\u5220\u53bb$bucket$\u4e2d\u8bb0\u5f55\u7684\u4ee5\u8be5\u8282\u70b9\u4e3a$lca$\u7684\u8def\u5f84\u5e76\u5c06\u4ee5\u8be5\u8282\u70b9\u4e3a\u8d77\u59cb\u8282\u70b9\u7684\u8def\u5f84\u538b\u5165\u6876\u4e2d,\u7531\u4e8e\u6b64\u65f6\u5df2\u7ecf\u5904\u7406\u6240\u6709\u53ef\u80fd\u5bf9\u8be5\u89c2\u5bdf\u70b9\u4ea7\u751f\u8d21\u732e\u7684\u8def\u5f84,\u56e0\u6b64\u5f53\u524d$bucket[depth_i+w_i]$\u7684\u589e\u91cf\u5373\u4e3a\u5bf9\u6700\u7ec8\u7b54\u6848\u7684\u8d21\u732e.\n\n\u9644\u4e0a\u5177\u4f53\u7247\u6bb5\u4ee3\u7801\n\n```cpp\ninline void dfs1(int x) {\n\tint bef=bucket1[w[x]+dep[x]];\n\tfor (int i=last[x];i;i=e[i].next) {if (e[i].go==fa[x][0]) continue; dfs1(e[i].go);}\n    for (int i=0;i<(int)opt1[x].size();i++) bucket1[opt1[x][i].t+dep[x]]+=opt1[x][i].d;\n\tint aft=bucket1[w[x]+dep[x]];\n\tans[x]+=aft-bef;\n}\t\nfor (int i=1; i<=m; i++) {\n\tca[i]=LCA(s[i],t[i]); \n\topt1[s[i]].push_back(PII(0,1));//\u5b9e\u73b0\u5c06\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u8def\u5f84\u538b\u5165\u6876\u4e2d\n\topt1[ca[i]].push_back(PII(dep[s[i]]-dep[ca[i]],-1));//\u53bb\u9664\u4ee5\u8be5\u8282\u70b9\u4e3alca\u7684\u8def\u5f84\n}\ndfs1(1); \t\n```\n\n#### \u63a5\u4e0b\u6765\u8003\u8651\u7531\u4e0a\u81f3\u4e0b\u7684\u8def\u5f84$lca_{u,v}\\to v$\n\n\u540c\u6837\u82e5\u8be5\u6761\u8def\u5f84\u7684\u73a9\u5bb6\u80fd\u88ab\u89c2\u5bdf\u5458$i$\u89c2\u5bdf\u5230,\u5373\u5bf9$i$\u70b9\u4ea7\u751f\u8d21\u732e,\u5219\u5176\u7b49\u4ef7\u6761\u4ef6\u4e3a:\n\n* \u8def\u5f84\u7ec8\u70b9$v$\u5728\u4ee5$i$\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\n* $lca_{u,v}$\u4e0d\u5728\u4ee5$i$\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\n* $w_i-depth_i=dist(u \\to v)-depth_v$~~\u8fd9\u4e2a\u5f0f\u5b50\u4e00\u70b9\u4e5f\u6ca1\u6709\u770b\u8d77\u6765\u90a3\u4e48\u663e\u7136\u6240\u4ee5\u6700\u597d\u81ea\u5df1\u753b\u4e2a\u56fe\u8bd5\u4e00\u4e0b~~\n\n\u5728\u8fd9\u91cc\u6211\u4eec\u7528$bucket[p]$\u8868\u793a\u6ee1\u8db3$p=dist(u,v)-depth_v$\u7684\u8def\u5f84\u6570\u76ee\n\n\u7edf\u8ba1\u601d\u8def\u548c\u4e4b\u524d\u76f8\u8fd1,\u641c\u7d22\u5230\u67d0\u4e00\u8282\u70b9\u65f6\u8bb0\u5f55\u5f53\u524d\u7684$bucket[w_i-depth_i]$,\u4f9d\u6b21\u904d\u5386\u5176\u6240\u6709\u7684\u5b50\u8282\u70b9\u5e76\u5728\u56de\u6eaf\u65f6\u5c06\u4ee5\u8be5\u8282\u70b9\u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u538b\u5165\u6876\u4e2d\u76f8\u5e94\u7684$dist_{u,v}-depth_v$\u5904,\u5220\u9664\u6240\u6709\u4ee5\u8be5\u8282\u70b9\u4e3a$lca$\u7684\u8def\u5f84,\u6700\u540e$bucket[w_i-depth_i]$\u7684\u589e\u91cf\u5373\u4e3a\u5bf9\u6700\u7ec8\u7b54\u6848\u7684\u8d21\u732e.\n\n\u4f46\u5b9e\u9645\u4e0a\u8fd9\u6837\u8fd8\u662f\u6709\u95ee\u9898\u7684,\u5728\u4e24\u6b21\u7edf\u8ba1\u4e2d\u6211\u4eec\u90fd\u5220\u9664\u4e86\u8def\u5f84\u53ef\u80fd\u7684\u5bf9\u5176$lca$\u89c2\u5bdf\u70b9\u7684\u8d21\u732e,\u56e0\u6b64\u5728\u5bf9\u9884\u5904\u7406\u6570\u7ec4$opt$\u8fdb\u884c\u64cd\u4f5c\u65f6\u6211\u4eec\u8003\u8651\u5c06\u5220\u9664\u6807\u8bb0\u7f6e\u4e8e$lca$\u8282\u70b9\u7684\u7236\u8282\u70b9\u5904\n\n\u518d\u6b21\u9644\u4e0a\u5177\u4f53\u7247\u6bb5\u4ee3\u7801\n\n```cpp\ninline void dfs2(int x) {\n\tint bef=bucket2[w[x]-dep[x]+N];\n\tfor (int i=0;i<(int)opt2[x].size();i++) bucket2[opt2[x][i].t-dep[x]+N]+=opt2[x][i].d;\n\tfor (int i=last[x];i;i=e[i].next) {if (e[i].go==fa[x][0]) continue; dfs2(e[i].go);} \n\tint aft=bucket2[w[x]-dep[x]+N];\n\tans[x]+=aft-bef;\n}\nfor (int i=1; i<=m; i++) {\n\topt2[t[i]].push_back(PII(dep[s[i]]+dep[t[i]]-2*dep[ca[i]],1));\n\tif (fa[ca[i]][0]) opt2[fa[ca[i]][0]].push_back(PII(dep[s[i]]-dep[ca[i]]-1,-1));\n\t/*\u5de8\u4f6c\u7684\u7a0b\u5e8f\u8fd9\u53e5\u8bdd\u770b\u4e86\u6211\u5f88\u4e45 \n\t\u5728\u8fd9\u91cc\u63a8\u5bfc\u4e00\u4e0b\u538b\u5165opt[fa[ca[i]][0].t\u7684\u503c\n\t\u5bf9\u8be5\u6761\u8def\u5f84(u,v),\u5728\u8be5\u6761\u8def\u5f84lca\u7684\u7236\u8282\u70b9\u5220\u9664\u8be5\u6761\u8def\u5f84\u5f71\u54cd\u65f6, \n\t\u7531\u4e8e\u5728\u641c\u7d22\u65f6\u7684\u4e0d\u533a\u5206\u5199\u6cd5,\u5728\u8fd9\u91cc\u6211\u4eec\u5b9e\u9645\u4e0a\u8981\u4f7f\u5f97opt[fa[ca[i]][0].t-dep[fa[ca[i]]=dist(u,v)-dep[v]\n\t\u628adep[fa[ca[i]]\u6362\u4f5cdep[ca[i]]+1,\u5f97opt[fa[ca[i]][0].t=dist(u,v)dep[v]+dep[ca[i]]-1\n\t\u7b49\u6548\u4e8e\u7a0b\u5e8f\u4e2d\u7684dep[u]-dep[ca[i]]-1*/\n}\ndfs2(1);\n```\n\n\u7ed3\u675f\u4e86\u5417?\u5176\u5b9e\u5e76\u6ca1\u6709.\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fd8\u8981\u6ce8\u610f\u4e00\u70b9,\u5373$bucket$\u6570\u7ec4\u4e0b\u6807\u53ef\u80fd\u51fa\u73b0\u8d1f\u6570,\u5219\u6211\u4eec\u9700\u8981\u5c06\u6570\u7ec4\u4e0b\u6807\u6574\u4f53\u5e73\u79fb$maxn$\u5373\u53ef\n\n#### \u6700\u540e\u9644\u4e0a\u849f\u84bb\u81ea\u5df1\u7684\u4e11\u964b\u4ee3\u7801\n\n~~(\u5176\u5b9e\u611f\u89c9\u5de8\u4f6c\u5199\u590d\u6742\u4e86\u4e0d\u8fc7\u4e00\u4e2a\u849f\u84bb\u53c8\u6709\u4ec0\u4e48\u8d44\u683c\u8bc4\u4ef7\u5462)~~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=301000;\nstruct EDGE{int to, nxt;}edge[2*maxn];\nstruct OPT{\n\tint d, tmp;\t\n\tOPT(){}\n    //OPT(){} means an empty constructor. It does not need any argument, and does nothing.\n\tOPT(const int &_d,const int &_tmp):d(_d),tmp(_tmp){}\n    //OPT(){_d, _tmp):d(_d),tmp(_tmp){}. It receives two arguments and it gives the value of _d to the member d, and _tmp to tmp\n\n};\nint n, m, head[maxn], low[maxn], f[maxn][25], depth[maxn], ans[maxn], ancestor[maxn], cnt=0, w[maxn], s[maxn], t[maxn];\nint bucket1[maxn], bucket2[maxn<<1];\nvector <OPT> opt1[maxn], opt2[maxn];\n\nvoid pre_dfs(int now) {\n\tfor (int i=head[now]; i; i=edge[i].nxt) \n\t\tif (edge[i].to!=f[now][0]) {\n\t\t\tdepth[edge[i].to]=depth[now]+1; f[edge[i].to][0]=now;\n\t\t\tfor (int j=1; j<=low[depth[edge[i].to]]; j++) f[edge[i].to][j]=f[f[edge[i].to][j-1]][j-1];\n\t\t\tpre_dfs(edge[i].to);\n\t\t}\n}\nvoid addedge(int a, int b) {edge[++cnt].nxt=head[a]; edge[cnt].to=b; head[a]=cnt;}\nvoid init() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i=1, a, b; i<n; i++) {scanf(\"%d%d\", &a, &b); addedge(a, b); addedge(b, a);}\n\tfor (int i=1; i<=n; i++) scanf(\"%d\", &w[i]);\n\tfor (int i=1; i<=m; i++) scanf(\"%d%d\", &s[i], &t[i]);\n\tlow[1]=0; for (int i=2; i<=n; i++) low[i]=low[i/2]+1;\n\tdepth[1]=0; f[1][0]=0; pre_dfs(1);\n}\nint LCA(int a, int b) {\n    if (depth[a]<depth[b]) swap(a, b);\n    while (depth[a]>depth[b]) a=f[a][low[depth[a]-depth[b]]];\n    if (a==b) return b;\n    for (int i=low[depth[a]]; i>=0; i--)\n        if (f[a][i]!=f[b][i]) a=f[a][i], b=f[b][i];\n    return f[a][0];\n}\nvoid dfs1(int now) {\n\tint former=bucket1[depth[now]+w[now]];\n\tfor (int i=head[now]; i; i=edge[i].nxt) if (edge[i].to!=f[now][0]) dfs1(edge[i].to);\n\tfor (int i=0; i<(int)opt1[now].size(); i++) bucket1[opt1[now][i].d]+=opt1[now][i].tmp;\n\tint latter=bucket1[depth[now]+w[now]];\n\tans[now]+=latter-former;\n}\nvoid work_up() {\n\tfor (int i=1; i<=m; i++) {\n\t\tancestor[i]=LCA(s[i], t[i]);\n\t\topt1[s[i]].push_back(OPT(depth[s[i]], 1));\n\t\topt1[ancestor[i]].push_back(OPT(depth[s[i]], -1));\n\t}\n\tdfs1(1);\n}\nvoid dfs2(int now) {\n\tint former=bucket2[w[now]-depth[now]+maxn];\n\tfor (int i=head[now]; i; i=edge[i].nxt) if (edge[i].to!=f[now][0]) dfs2(edge[i].to);\n\tfor (int i=0; i<(int)opt2[now].size(); i++) bucket2[opt2[now][i].d+maxn]+=opt2[now][i].tmp;\n\tint latter=bucket2[w[now]-depth[now]+maxn];\n\tans[now]+=latter-former;\n}\t\nvoid work_down() {\n\tfor (int i=1; i<=m; i++) {\n\t\tint dist=depth[s[i]]+depth[t[i]]-2*depth[ancestor[i]];\n\t\topt2[t[i]].push_back(OPT((dist-depth[t[i]]), 1));\n\t\tif (f[ancestor[i]][0]) opt2[f[ancestor[i]][0]].push_back(OPT((dist-depth[t[i]]), -1));\n\t}\n\tdfs2(1);\n}\nint main() {\n\tinit();\n\twork_up();\n\twork_down();\n\tfor (int i=1; i<n; i++) printf(\"%d \", ans[i]);\n\tprintf(\"%d\\n\", ans[n]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1540570805,
        "uid": 26242,
        "name": "AuSquare",
        "ccfLevel": 0,
        "title": "\u53ef\u6015\u7684\u5929\u5929\u7231\u8dd1\u6b65"
    },
    {
        "content": "\u8fd9\u662f\u832b\u832bC++\u4e2d\u7684pascal\uff0c\u96be\u9053pascal\u7ec8\u8981\u6ca1\u843d\uff1f\n\n\u597d\u4e86\uff0c\u8bb2\u9898\n\n##first\n\n\u9996\u5148\u6211\u4eec\u5148\u5c06\u9898\u76ee\u7b80\u5316\u6765\u770b\u770b\u3002\u5f53\u6811\u9000\u5316\u4e3a\u4e00\u6761\u94fe\uff08\u8282\u70b9\u8bb0\u4f5ca[0]..a[n]\uff09\uff0c\u4e14\u73a9\u5bb6\u53ea\u5f80\u53f3\u8d70\u65f6\uff0c\u6211\u4eec\u5bb9\u6613\u63a8\u5f97u\u53f7\u70b9\u4e0a\u7684\u89c2\u5bdf\u5458\u8981\u89c2\u5bdf\u5230v\u53f7\u70b9\u5f00\u59cb\u7684\u73a9\u5bb6\uff0c\u90a3\u4e48\u663e\u7136\u6709v + w[u] = u\u3002\n\n##second\n\n\u6211\u4eec\u5f88\u81ea\u7136\u5730\u5c06\u65e0\u6839\u6811\u53d8\u4e3a\u6709\u6839\u6811\uff08\u7a0b\u5e8f\u4e2d\u8282\u70b91\u4e3a\u6839\uff0c\u6df1\u5ea6\u4e3a0\uff09\u3002\u4e8e\u662f\u4eces->t\u7684\u8def\u5f84\u53ef\u4ee5\u8868\u793a\u4e3as->lca(s,t)->t\u3002\u5bf9\u4e8es->lca(s,t)\uff0c\u6211\u4eec\u5bf9\u5e94\u4e0a\u4e00\u6761\u4e2d\u7684\u7ed3\u8bba\uff0c\u5355\u72ec\u8003\u8651s\u3001lca(s,t)\u6240\u5728\u7684\u90a3\u6761\u94fe\uff0c\u4e0d\u96be\u53d1\u73b0\u82e5\u5728\u8fd9\u6761\u94fe\u4e0a\u7684\u70b9u\u8981\u89c2\u5bdf\u5230\u8fd9\u4e2a\u73a9\u5bb6\uff0c\u5c31\u6709deep[u] - deep[s] = w[u]\uff08\u8def\u5f84\u957f\u5ea6\uff0c\u5373\u6df1\u5ea6\u5dee\u7b49\u4e8ew[u]\uff09\u3002\u53ef\u63a8\u5f97deep[u] + w[u] = deep[s]\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cu\u8282\u70b9\u5b50\u6811\u4e0a\u70b9v\u80fd\u591f\u88ab\u89c2\u5bdf\u5230\u7684\u5fc5\u8981\u6761\u4ef6\u662fdeep[u] + w[u] = deep[s]\u3002\u5bf9\u4e8elca(s,t)->t\u4e5f\u6709\u7c7b\u4f3c\u7ed3\u8bba\uff08\u81ea\u5df1\u7b97\uff09\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u6876\uff08vector\uff0cC++\u515a\u4e0d\u8981\u55b7\u6211\uff09\uff0c\u8bb0\u5f55deep[s]\uff0c\u7136\u540e\u505a\u5b8c\u4e86\u5b50\u6811\uff0c\u56de\u5230u\u4ee5\u540e\u7edf\u8ba1deep[u] + w[u]\u3002\n\n##third\n\n\u4f9d\u65e7\u5bf9\u4e8es->lca\u3002\u4e0a\u4e00\u6761\u4e2d\uff0c\u6211\u4eec\u63d0\u5230u\u8282\u70b9\u5b50\u6811\u4e0a\u70b9v\u80fd\u591f\u88ab\u89c2\u5bdf\u5230\u7684\u5fc5\u8981\u6761\u4ef6\u662fdeep[u] + w[u] = deep[s]\u3002\u663e\u7136\u82e5\u662f\u518d\u52a0\u4e0alca(s,t)\u662fu\u6216\u5b83\u7684\u7956\u5148\uff0c\u90a3\u4e48\u5c31\u53d8\u6210\u4e86\u5145\u8981\u6761\u4ef6\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u505a\u5230s\u7684\u65f6\u5019\u6539\u53d8vector\u7684\u540c\u65f6\u5728lca(s,t)\u4e0a\u6253\u4e00\u4e2adeep[s]\u7684\u6807\u8bb0\uff0c\u56de\u5230lca(s,t)\u65f6\u5220\u9664\u5373\u53ef\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u53ef\u4ee5\u7528\u94fe\u8868\u3002\u5bf9\u4e8elca(s,t)->t\u540c\u6837\u505a\u6cd5\u3002\n\n##fourth\n\n\u90a3\u4e48\u8fd8\u6709\u4e00\u4e2a\u5f88\u4e25\u8083\u7684\u95ee\u9898\u3002\u5982\u4e0a\u7edf\u8ba1\u65b9\u6cd5\uff0c\u53ef\u80fd\u4f1a\u201c\u8de8\u5b50\u6811\u8fd0\u7b97\u201d\u3002\u5373s\u548cu\u6ee1\u8db3deep[s] = deep[u] + w[u]\u4e14lca(s,t)\u662fu\u6216\u5b83\u7684\u7956\u5148\uff08\u8fd9\u91cc\u4e00\u5b9a\u662f\u5b83\u7684\u7956\u5148\uff09\uff0c\u4f46\u662f\u4e0d\u6ee1\u8db3s\u5728u\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e0a\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u795e\u5947\u7684\u5dee\u5206\uff08\u597d\u50cf\u662f\u8fd9\u4e48\u53eb\u7684\uff09\u5c31\u767b\u573a\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cdfs\u65f6\uff0c\u5728\u8fdb\u5165\u5230u\u4e4b\u524d\u4e00\u5b9a\u6ca1\u505a\u8fc7u\u5b50\u6811\u5185\u7684\u70b9\uff1b\u5728\u56de\u5230u\u65f6\uff0c\u4e00\u5b9a\u5df2\u7ecf\u505a\u5b8c\u4e86u\u5b50\u6811\u5185\u7684\u70b9\u4e14\u6ca1\u6709\u505au\u5b50\u6811\u5916\u7684\u70b9\u3002\u7136\u540e\u53d1\u73b0\u5176\u5b9eu\u9700\u8981\u7edf\u8ba1\u7684\u6570\uff08\u8fd8\u662f\u62ffs->lca(s,t)\u4e3e\u4f8b\uff09\u53ea\u662fdeep[u] + w[u]\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8fdb\u5165u\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u6876\u7684\u503c\uff0c\u51fa\u53bb\u7684\u65f6\u5019\u518d\u526a\u4e00\u526a\u5c31\u597d\u4e86\u3002\n\n##fifth\n\n\u4e24\u6761\u94fe\u7684\u7126\u70b9\uff0clca(s,t)\uff0c\u6709\u53ef\u80fd\u88ab\u7b97\u5230\u4e24\u6b21\u3002\u90a3\u4e48\u5982\u4f55\u89e3\u51b3\uff1f\u6211\u770b\u5230\u5927\u90e8\u5206\u9898\u89e3\u90fd\u662f\u6700\u540e\u7edf\u8ba1\uff0c\u4f46\u662f\u672c\u4eba\u61d2\u5230\u61d2\u5f97\u63a8\u6700\u540e\u7684\u5f0f\u5b50\uff0c\u5c31\u8fd9\u4e48\u505a\u4e86\uff1a\u5728\u505as->lca(s,t)\u65f6\uff0c\u56de\u5230u\u5148\u5220\u6253\u7684\u6807\u8bb0\u518d\u7edf\u8ba1\uff1b\u505alca(s,t)->t\u65f6\uff0c\u56de\u5230u\u5148\u7edf\u8ba1\u518d\u5220\u6807\u8bb0\uff0c\u90a3\u4e48lca(s,t)\u5c31\u53ea\u88ab\u7b97\u5230\u4e86\u4e00\u6b21\u3002\n\n##\u5177\u4f53\u5b9e\u73b0\u770b\u7a0b\u5e8f\u3002\n\n```pascal\nvar\n        n,m,i,x,y,max_deep:longint;\n        l1,l2,l3,l4:longint;\n        f1,f2,f3,f4,next2,value,next3,goto3,next4,goto4,s,t :array[0..300010] of longint;\n        next1,goto1:array[0..600010] of longint;\n        vector:array[-300010..600010] of longint;\n        b:array[0..300010,0..20] of longint;\n        ans,lca,deep,w,len:array[0..300010] of longint;\n\n\nprocedure add1(x,y:longint);//\u8fd9\u53ea\u662f4\u4e2a\u6570\u7ec4\u6a21\u62df\u94fe\u8868\nbegin\n        inc(l1);\n        next1[l1] := f1[x];\n        f1[x] := l1;\n        goto1[l1] := y;\nend;\n\n\nprocedure add2(x,y:longint);\nbegin\n        inc(l2);\n        next2[l2] := f2[x];\n        f2[x] := l2;\n        value[l2] := y;\nend;\n\n\nprocedure add3(x,y:longint);\nbegin\n        inc(l3);\n        next3[l3] := f3[x];\n        f3[x] := l3;\n        goto3[l3] := y;\nend;\n\n\nprocedure add4(x,y:longint);\nbegin\n        inc(l4);\n        next4[l4] := f4[x];\n        f4[x] := l4;\n        goto4[l4] := y;\nend;\n\n\nprocedure load_lca(u,fa,depth:longint);//\u5efa\u6811\uff0c\u987a\u4fbf\u521d\u59cb\u5316\u4e00\u4e0b\u6811\u4e0a\u500d\u589e\u6c42lca\uff08\u53ef\u4ee5\u7528Tarjan\uff09\nvar\n        x,i:longint;\nbegin\n        if depth > max_deep then max_deep := depth;\n        deep[u] := depth;\n        b[u][0] := fa;\n        for i := 1 to 19 do\n         b[u][i] := b[b[u][i - 1]][i - 1];\n        x := f1[u];\n        while x <> 0 do\n         begin\n                if goto1[x] <> fa then load_lca(goto1[x],u,depth + 1);\n                x := next1[x];\n         end;\nend;\n\n\nprocedure dfs1(u,fa:longint);//s->lca\nvar\n        x,t:longint;\nbegin\n        if deep[u] + w[u] <= max_deep then\n         t := vector[deep[u] + w[u]];\n        x := f1[u];\n        while x <> 0 do\n         begin\n                if goto1[x] <> fa then dfs1(goto1[x],u);\n                x := next1[x];\n         end;\n        x := f3[u];\n        while x <> 0 do//\u6539\u6876\uff0c\u5728lca\u4e0a\u6253\u6807\u8bb0\n         begin\n                inc(vector[deep[u]]);\n                add2(lca[goto3[x]],deep[u]);\n                x := next3[x];\n         end;\n        x := f2[u];\n        while x <> 0 do//\u5220\u6807\u8bb0\n         begin\n                dec(vector[value[x]]);\n                x := next2[x];\n         end;\n        if deep[u] + w[u] <= max_deep then//\u7edf\u8ba1\n         inc(ans[u],vector[deep[u] + w[u]] - t);\nend;\n\n\nprocedure dfs2(u,fa:longint);\nvar\n        x,t:longint;\nbegin\n         t := vector[deep[u] - w[u]];\n        x := f1[u];\n        while x <> 0 do\n         begin\n                if goto1[x] <> fa then dfs2(goto1[x],u);\n                x := next1[x];\n         end;\n        x := f4[u];\n        while x <> 0 do\n         begin\n                inc(vector[deep[u] - len[goto4[x]]]);\n                add2(lca[goto4[x]],deep[u] - len[goto4[x]]);\n                x := next4[x];\n         end;\n         inc(ans[u],vector[deep[u] - w[u]] - t);\n        x := f2[u];\n        while x <> 0 do\n         begin\n                dec(vector[value[x]]);\n                x := next2[x];\n         end;\nend;\n\n\nfunction get_lca(x,y:longint):longint;//\u8fd4\u56delca(x,y)\nvar\n        t,i:longint;\nbegin\n        if deep[x] < deep[y] then\n         begin\n                t := x;\n                x := y;\n                y := t;\n         end;\n        t := deep[x] - deep[y];\n        for i := 0 to 19 do\n         if ((t >> i) and 1) = 1 then\n          x := b[x][i];\n        if x = y then exit(x);\n        for i := 19 downto 0 do\n         if b[x][i] <> b[y][i] then\n          begin\n                x := b[x][i];\n                y := b[y][i];\n          end;\n        exit(b[x][0]);\nend;\n\n\nbegin\n        read(n,m);\n        for i := 1 to n - 1 do\n         begin\n                read(x,y);\n                add1(x,y);\n                add1(y,x);\n         end;\n        load_lca(1,1,0);\n        for i := 1 to n do read(w[i]);\n        for i := 1 to m do\n         begin\n                read(s[i],t[i]);\n                lca[i] := get_lca(s[i],t[i]);\n                add3(s[i],i);\n                add4(t[i],i);//\u8fd9\u6837\u53ef\u4ee5\u5feb\u901f\u5730\u627e\u5230\u90a3\u4e9b\u73a9\u5bb6\u5728\u67d0\u4e2a\u70b9\u5f00\u59cb/\u7ed3\u675f\n                len[i] := deep[s[i]] + deep[t[i]] - 2 * deep[lca[i]];\n         end;\n        dfs1(1,1);\n        fillchar(f2,sizeof(f2),0);\n        l2 := 0;\n        fillchar(next2,sizeof(next2),0);\n        fillchar(vector,sizeof(vector),0);\n        fillchar(value,sizeof(value),0);\n        dfs2(1,1);\n        for i := 1 to n do write(ans[i],' ');\nend.\n```",
        "postTime": 1509120102,
        "uid": 27685,
        "name": "chy2003",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "### \u63d0\u4f9b\u4e00\u79cd\u7ebf\u6bb5\u6811\u7684\u5199\u6cd5\n\n\u4e0b\u9762\u90a3\u4e9b\u5f0f\u5b50\u5c31\u4e0d\u63a8\u5230\u4e86\uff0c\u770b\u4e86\u4e0b\u9762\u7684\u9898\u89e3\u4f60\u5c31\u4f1a\u53d1\u73b0\u5176\u5b9e\u6876\u7684\u505a\u6cd5\u662f\u6bd4\u8f83\u96be\u7ef4\u62a4\u7684\u56e0\u4e3a\u6811\u4e0a\u5dee\u5206\u8fd9\u79cd\u4e1c\u897f\u6bd5\u7adf\u601d\u7ef4\u96be\u5ea6\u8fd8\u662f\u6bd4\u8f83\u9ad8\n\n\u56e0\u4e3a\u6876\u505a\u6cd5\u7684\u672c\u8d28\u8fd8\u662f\u5728dfs\u8fc7\u7a0b\u4e2d\u5230i\u8282\u70b9\uff0c\u770bi\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6876\u6709\u591a\u5c11\u4e2a\u8d77\u70b9\u6ee1\u8db3\u8981\u6c42\uff0c\u7ec8\u70b9\u6ee1\u8db3\u8981\u6c42\n\n\u7136\u540e\u5728\u8003\u8651lca\u53d6\u4e0d\u53d6\uff0c\u53bb\u91cd\u590d\u4e4b\u7c7b\u7684\u5df4\u62c9\u5df4\u62c9\n\n\u6240\u4ee5\u667a\u5546\u4e0d\u591f\u6570\u636e\u7ed3\u6784\u6765\u51d1\n\n\u56e0\u4e3a\u6876\u505a\u6cd5\u4e4b\u6240\u4ee5\u9ebb\u70e6\u5c31\u662f\u56e0\u4e3a\u5728\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u65f6\u4f1a\u628a\u5176\u4ed6\u5b50\u6811\u4e2d\u6df1\u5ea6\u76f8\u540c\u7684\u70b9\u4e5f\u7b97\u8fdb\u6765\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5f00n+1\u9897\u7ebf\u6bb5\u6811\uff0c\u6bcf\u9897\u7ebf\u6bb5\u6811\u4ee3\u8868\u67d0\u4e00\u6df1\u5ea6\u7684\u70b9\u7684\u96c6\u5408\uff0c\u52a8\u6001\u5f00\u70b9\n\n\u7136\u540e\u8003\u8651\u67d0\u4e00\u8def\u5f84\u4e0a\u7684\u70b9\u80fd\u5bf9\u54ea\u4e00\u4e2a\u6df1\u5ea6\u7684\u70b9\u4ea7\u751f\u5f71\u54cd\n\n\u5bf9\u4e8es\u5230lca\u7684\u8def\u5f84\uff0c\u4e0b\u9762\u5df2\u7ecf\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u5373 s\u7684\u6df1\u5ea6\u7684\u70b9\n\n\u90a3\u4e48\u5c31\u5728root[de[s]]\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u4e0a\uff0c\u4ecelca\u5230s\u7684\u8def\u5f84\u4e0a\u6240\u7ecf\u8fc7\u7684\u70b9+1\n\n\u8fd9\u4e2a\u8def\u5f84+1\u7684\u5904\u7406\u662f\u53ef\u4ee5\u6811\u5256\u641e\u5b9a\u7684\uff0clca\u4e5f\u53ef\u4ee5\u7528\u6811\u5256\u987a\u4fbf\u6c42\u4e86\n\n\u7136\u540e\u662flca\u5230t\u7684\u8def\u5f84\u4e0a\uff0c\u4e5f\u662f\u4e00\u6837\u7684\u9053\u7406\uff0c\u6ce8\u610f\u53f3\u79fbMax\u4f4d\n\n\u6ce8\u610f\u6700\u540e\u5728de[s]\u7ebf\u6bb5\u6811\u4e2d\u5355\u70b9\u51cf\u53bblca\u7684\u8d21\u732e\uff0c\u4f1a\u91cd\u590d\u4e00\u6b21\u7684\u3002\n\n\u4fee\u6539\u5e94\u5f53\u662f\u533a\u95f4\u4fee\u6539\uff0c\u6700\u540e\u67e5\u8be2\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u8bb0\u5f97\u4e0b\u65b9lazy\n\n\u4e3a\u4e86\u65b9\u4fbf\u4f60\u53ef\u4ee5\u5f00\u4e24\u9897\u4e3b\u5e2d\u6811\uff0c\u5206\u5f00\u8003\u8651s\u5230lca\u548clca\u5230t\n\n\u4f46\u662fval\uff0cls\uff0crs\u51e0\u4e2a\u6570\u7ec4\u53ef\u4ee5\u5171\u7528\n\n\u53ef\u4ee5\u5728\u6811\u5256\u7684\u65f6\u5019\u5c31\u628a\u6539\u5f00\u7684\u70b9\u5168\u90e8\u5f00\u4e86\n\n\u6700\u540e\u9644\u4e0a\u4ee3\u7801\uff0c\u770b\u4e0d\u61c2\u53ef\u4ee5\u79c1\u4fe1\n\n```\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#define il inline\n#define rg register\n#define ll long long\n#define ld long double\n#define N 300000\n#define inf 2147483647\nusing namespace std;\nint n,m,u,v,cnt,num;\nint hd[N],w[N],s[N],t[N];\nint de[N],top[N],son[N],tot[N];\nint fa[N],idx[N];\nstruct Edge{\n    int nt,to;\n}edge[N<<1];\nint rt1[N*2],rt2[N*2],ls[N*40],rs[N*40],val[N*40];\nil void re(rg int &x);\nil void link(rg int fm,rg int to);\nvoid Dfs1(rg int i,rg int fm);\nvoid Dfs2(rg int i,rg int head);\nint lca(rg int x,rg int y);\nil void work(rg int s,rg int t);\nvoid add(rg int now,rg int le,rg int ri,rg int pos);\nvoid update(rg int now,rg int le,rg int ri,rg int L,rg int R,rg int w);\nint query(rg int now,rg int le,rg int ri,rg int pos);\nint main(){\n\tfreopen(\"s.in\",\"r\",stdin);\n    re(n),re(m);\n    for(rg int i=1;i<n;++i){\n        re(u),re(v);\n        link(u,v),link(v,u);\n    }\n    for(rg int i=1;i<=n;++i)\n        re(w[i]);\n    for(rg int i=1;i<=m;++i)\n        re(s[i]),re(t[i]);\n    cnt=0,Dfs1(1,0),Dfs2(1,1);\n    for(rg int i=1;i<=m;++i)\n        work(s[i],t[i]);\n    for(rg int i=1;i<=n;++i){\n        int ans1=query(rt1[de[i]+w[i]],1,n,idx[i]);\n        int ans2=query(rt2[w[i]-de[i]+N],1,n,idx[i]);\n        printf(\"%d \",ans1+ans2);\n    }\n    return 0;\n}\nint query(rg int now,rg int le,rg int ri,rg int pos){\n    if(!now)return 0;\n    if(le==ri)return val[now];\n    if(val[now]){\n        if(ls[now])val[ls[now]]+=val[now];\n        if(rs[now])val[rs[now]]+=val[now];\n        val[now]=0;\n    }\n    rg int mid=((le+ri)>>1);\n    if(pos<=mid)return query(ls[now],le,mid,pos);\n    else return query(rs[now],mid+1,ri,pos);\n}\nil void work(rg int s,rg int t){\n    rg int Lca=lca(s,t),u=s;\n    while(top[u]!=top[Lca]){\n        update(rt1[de[s]],1,n,idx[top[u]],idx[u],1);\n        u=fa[top[u]];\n    }\n    update(rt1[de[s]],1,n,idx[Lca],idx[u],1);\n    u=t;\n    while(top[u]!=top[Lca]){\n        update(rt2[de[s]-2*de[Lca]+N],1,n,idx[top[u]],idx[u],1);\n        u=fa[top[u]];\n    }\n    update(rt2[de[s]-2*de[Lca]+N],1,n,idx[Lca],idx[u],1);\n    update(rt1[de[s]],1,n,idx[Lca],idx[Lca],-1);\n}\nvoid add(rg int now,rg int le,rg int ri,rg int pos){\n    if(le==ri)return;\n    rg int mid=((le+ri)>>1);\n    if(pos<=mid){\n        if(!ls[now])ls[now]=(++num);\n        add(ls[now],le,mid,pos);\n    }\n    else{\n        if(!rs[now])rs[now]=(++num);\n        add(rs[now],mid+1,ri,pos);\n    }\n}\nvoid update(rg int now,rg int le,rg int ri,rg int L,rg int R,rg int w){\n    if(!now)return;\n    if(L==le&&R==ri){val[now]+=w;return;}\n    rg int mid=((le+ri)>>1);\n    if(R<=mid)update(ls[now],le,mid,L,R,w);\n    else if(L>mid)update(rs[now],mid+1,ri,L,R,w);\n    else update(ls[now],le,mid,L,mid,w),update(rs[now],mid+1,ri,mid+1,R,w);\n}\nint lca(rg int x,rg int y){\n    while(top[x]!=top[y]){\n        if(de[top[x]]<de[top[y]])swap(x,y);\n        x=fa[top[x]];\n    }\n    if(de[x]>de[y])return y;\n    else return x;\n}\t\nvoid Dfs1(rg int i,rg int fm){\n    de[i]=de[fm]+1,fa[i]=fm;\n    tot[i]=1;\n    rg int maxn=0;\n    for(rg int k=hd[i];k;k=edge[k].nt){\n        rg int qw=edge[k].to;\n        if(qw==fm)continue;\n        Dfs1(qw,i),tot[i]+=tot[qw];\n        if(tot[qw]>maxn)maxn=tot[qw],son[i]=qw;\n    }\n}\nvoid Dfs2(rg int i,rg int head){\n    idx[i]=(++cnt),top[i]=head;\n\tif(!rt1[de[i]+w[i]])rt1[de[i]+w[i]]=(++num);\n    add(rt1[de[i]+w[i]],1,n,idx[i]);\n    if(!rt2[w[i]-de[i]+N])rt2[w[i]-de[i]+N]=(++num);\n    add(rt2[w[i]-de[i]+N],1,n,idx[i]);\n    if(!son[i])return;\n    Dfs2(son[i],head);\n    for(rg int k=hd[i];k;k=edge[k].nt)\n        if(!idx[edge[k].to])\n            Dfs2(edge[k].to,edge[k].to);\n}\nil void re(rg int &x){\n    rg int res=0;rg int w=1;char c=getchar();\n    while((c<'0'||c>'9')&&c!='-')c=getchar();\n    if(c=='-')w=-1,c=getchar();\n    while(c>='0'&&c<='9')res=(res<<3)+(res<<1)+c-'0',c=getchar();\n    x=w*res;\n}\nil void link(rg int fm,rg int to){\n    edge[++cnt].nt=hd[fm];\n    edge[cnt].to=to;\n    hd[fm]=cnt;\n}\n\n```",
        "postTime": 1526999933,
        "uid": 66915,
        "name": "Tyher",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u665a\u4e0a\uff0c\u5386\u65f64h\uff0c\u7ec8\u4e8e\u628aNOIP2016\u8fd9\u6700\u6076\u5fc3\u7684\u9898\u505a\u51fa\u6765\u4e86\u3002\n\n\u5176\u5b9e\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9j\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u5b83\u4e3a\u6839\u7684\u8fd9\u9897\u5b50\u6811\u641e\u3002\n\n\u80fd\u5bf9\u8282\u70b9j\u6709\u6240\u8d21\u732e\u7684\u70b9\u5206\u4e24\u79cd\uff1a\n\n1.\u8d77\u70b9\u4f4d\u4e8e\u8fd9\u68f5\u5b50\u6811\u5185\uff1a\u5373\u5f53dep[s[i]]=dep[j]+w[j]\u65f6\uff0c\u6211\u4eec\u7ef4\u62a4\u4e0bdep[s[i]]\u5c31\u884c\u4e86(s[i]\u8868\u793a\u7b2ci\u4e2a\u4eba\u7684\u8d77\u70b9\uff0cdep[i]\u8868\u793a\u7b2ci\u4e2a\u70b9\u7684\u6df1\u5ea6)\n\n2.\u7ec8\u70b9\u4f4d\u4e8e\u8fd9\u68f5\u5b50\u6811\u5185\uff1a\u8fd9\u4e2a\u6211\u4eec\u9700\u8981\u4ece\u65f6\u95f4\u6765\u8003\u8651\uff0c\u6211\u4eec\u4e0d\u59a8\u8bbe\u8fd9\u4e2a\u73a9\u5bb6\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u65f6\u95f4\u4e3at[i]\uff0c\u90a3\u4e48\uff0c\u6613\u5f97\uff1at[i]=(dep[i]-dep[j])+w[j]\uff0c\u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u5f88\u96be\u641e\u554a\u3002\u3002\u6211\u4eec\u53ef\u4ee5\u79fb\u9879\uff0c\u5f97:t[i]-dep[i]=w[j]-dep[j]\uff0c\u8fd9\u6837\u6211\u4eec\u7ef4\u62a4\u4e0bt[i]-dep[i]\u5c31\u884c\u4e86\n\n\u7136\u540e\u4ece\u53f6\u5b50\u8282\u70b9\u4e00\u5c42\u4e00\u5c42\u5f80\u4e0a\u641e\uff0c\u7ebf\u6bb5\u6811\u4e00\u8def\u5408\u5e76\u4e0a\u53bb\u3002\u3002\u3002\n\n\u601d\u8def\u5176\u5b9e\u4e0d\u662f\u5f88\u96be\u3002\u3002\u3002\u5b9e\u73b0\u3002\u3002\u3002\u54b3\u54b3\uff0c\u4e0d\u8bf4\u4e86\u3002\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<set>\n#include<vector>\n#include<map>\n#define For(i,x,y) for (int i=(x);i<=(y);i++)\n#define Dow(i,x,y) for (int i=(x);i>=(y);i--)\n#define cross(i,k) for (int i=first[k];i;i=last[i])\n#define il inline\n#define vd void\n#define ll long long\n#define N 300010\nusing namespace std;\nil int read(){\n    int x=0;int ch=getchar(),f=1;\n    while (!isdigit(ch)&&(ch!='-')&&(ch!=EOF)) ch=getchar();\n    if (ch=='-'){f=-1;ch=getchar();}\n    while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n    return x*f;\n}\nil vd write(int x){\n    if (x<0) putchar('-'),x=-x;\n    if (x>=10) write(x/10),putchar(x%10+'0');\n        else putchar(x+'0');\n}\nint n,m,x,y,LCA,t_tot,head,tail,q[N],t_top[2],rt[N*30][2],v[N*30][2],lson[N*30][2],rson[N*30][2],ans[N],w[N],s[N],t[N],dis[N],b[N],t_first[N],t_last[N],t_v[N];\nint tot,first[N],last[N<<1],to[N<<1];\nil vd add(int x,int y){to[++tot]=y,last[tot]=first[x],first[x]=tot;}\nint sons[N],size[N],fa[N],dep[N],son[N];\nil vd dfs1(int k){\n    size[k]=1,dep[k]=dep[fa[k]]+1;\n    cross(i,k){\n        int v=to[i];\n        if (v==fa[k]) continue;\n        fa[v]=k,dfs1(v);\n        size[k]+=size[v],sons[k]++;\n        if (!son[k]||size[son[k]]<size[v]) son[k]=v;\n    }\n}\nint top[N],idx[N],tree[N],idc;\nil vd dfs2(int k,int tp){\n    top[k]=tp,idx[k]=++idc,tree[idc]=k;\n    if (!son[k]) return;\n    dfs2(son[k],tp);\n    cross(i,k){\n        int v=to[i];\n        if (v==fa[k]||v==son[k]) continue;\n        dfs2(v,v);\n    }\n}\nil int lca(int x,int y){\n    while (top[x]!=top[y])\n        dep[top[x]]>=dep[top[y]]?x=fa[top[x]]:y=fa[top[y]];\n    return dep[x]<=dep[y]?x:y;\n}\nil vd insert(int &u,int l,int r,int ql,int x,int sum){\n    if (!u) u=++t_top[x];\n    v[u][x]+=sum;\n    if (l==r) return;\n    int mid=l+r>>1;\n    if (mid>=ql) insert(lson[u][x],l,mid,ql,x,sum);\n        else insert(rson[u][x],mid+1,r,ql,x,sum);\n}\nil int query(int u,int l,int r,int ql,int x){\n    if (l==r) return v[u][x];\n    int mid=l+r>>1;\n    if (mid>=ql) return query(lson[u][x],l,mid,ql,x);\n        else  return query(rson[u][x],mid+1,r,ql,x);\n}\nil vd merge(int &x,int y,int z){\n    if (!x){x=y;return;}\n    if (!y) return;\n    v[x][z]+=v[y][z];\n    merge(lson[x][z],lson[y][z],z);\n    merge(rson[x][z],rson[y][z],z);\n}\nint main(){\n    freopen(\"runninga.in\",\"r\",stdin);\n    freopen(\"runninga.out\",\"w\",stdout);\n    n=read(),m=read();\n    For(i,1,n-1){\n        x=read(),y=read();\n        add(x,y),add(y,x);\n    }\n    For(i,1,n) w[i]=read();\n    dfs1(1);\n    dfs2(1,1);\n    For(i,1,m){\n        s[i]=read(),t[i]=read();\n        LCA=lca(s[i],t[i]);\n        dis[i]=dep[s[i]]+dep[t[i]]-dep[LCA]*2;\n        insert(rt[s[i]][1],1,n+N,dep[s[i]],1,1);\n        insert(rt[t[i]][0],1,n+N,dis[i]-dep[t[i]]+N,0,1);\n        //printf(\"%d 233\\n\",dis[i]-dep[t[i]]+N);\n        t_v[++t_tot]=i,t_last[t_tot]=t_first[LCA],t_first[LCA]=t_tot;\n    }\n    For(i,1,n)\n        if (!son[i]){\n            q[++tail]=i;\n            for(int j=t_first[i];j;j=t_last[j]) insert(rt[i][0],1,n+N,dis[t_v[j]]-dep[t[t_v[j]]]+N,0,-1);\n            ans[i]=query(rt[i][1],1,n+N,dep[i]+w[i],1)+query(rt[i][0],1,n+N,w[i]-dep[i]+N,0);\n            for(int j=t_first[i];j;j=t_last[j]) insert(rt[i][1],1,n+N,dep[s[t_v[j]]],1,-1);\n        }\n    while (head<tail){\n        int father=fa[q[++head]];\n        merge(rt[father][1],rt[q[head]][1],1),merge(rt[father][0],rt[q[head]][0],0);\n        sons[father]--;\n        if (!sons[father]){\n            for(int j=t_first[father];j;j=t_last[j]) insert(rt[father][0],1,n+N,dis[t_v[j]]-dep[t[t_v[j]]]+N,0,-1);\n            ans[father]=query(rt[father][1],1,n+N,dep[father]+w[father],1)+query(rt[father][0],1,n+N,w[father]-dep[father]+N,0);\n            //printf(\"%d %d\\n\",query(rt[father][1],1,n,dep[father]+w[father],1),query(rt[father][0],1,n+N,w[father]-dep[father]+N,0));\n            for(int j=t_first[father];j;j=t_last[j]) insert(rt[father][1],1,n+N,dep[s[t_v[j]]],1,-1);\n            q[++tail]=father;\n        }\n    }\n    For(i,1,n) {\n        write(ans[i]);\n        if (i!=n) printf(\" \");\n    }\n}\n```",
        "postTime": 1516026328,
        "uid": 25355,
        "name": "\u590f\u8272\u796d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "## \u5b89\u5229\u535a\u5ba2\uff1a[Judge's Class](https://www.cnblogs.com/Judge/p/9678173.html)\n\n\n\n\u6765\u4e00\u53d1\u6e05\u65b0\u768480\u884c \u6811\u5256 $LCA$  +  \u6811\u4e0a\u5dee\u5206 \u9898\u89e3\u3002\n\n### -----from Judge\n\n\n\u672c\u9898\u9898\u610f\u5927\u6982\u662f\u7ed9\u51fa\u4e00\u68f5 n \u4e2a\u8282\u70b9\u7684\u6811\u4ee5\u53ca m \u6761\u6709\u5411\u8def\u5f84\uff0c\n\n\u5e76\u4e14\u6bcf\u4e2a\u70b9 i \u90fd\u6709\u4e00\u4e2a\u6743\u503c $w[i]$\uff0c\u5982\u679c\u67d0\u6761\u8def\u5f84\u5305\u542b\u4e86 i \u53f7\u8282\u70b9\uff0c\u5e76\u4e14 i \u53f7\u8282\u70b9\u662f\u8be5\u8def\u5f84\u4e0a\u7684\u7b2c $w[i]$ \u4e2a\u8282\u70b9\u7684\u8bdd\u5c31\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u3002\n\n# \u8003\u8651\u66b4\u529b\u505a\u6cd5\n\n\u6211\u4eec\u53ef\u4ee5\u5341\u5206\u7406\u6240\u5f53\u7136\u7684\u60f3\u5230\u4e00\u4e2a\u66b4\u529b\uff1a u \u548c v \u5411\u4e0a\u8dd1\uff0c\u6cbf\u8def\u5224\u65ad\u6761\u4ef6\u5e76\u7d2f\u52a0\uff0c\u76f4\u5230\u8dd1\u5230 $LCA$ \u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u66b4\u529b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\u4e86\uff1a $O (n + m )$ \u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u522b\u7684\u65b9\u6cd5\u3002\n\n\u9996\u5148\u6211\u4eec\u770b $n$ \u548c $m$ \u90fd\u662f $3e5$ \u7684\u6570\u636e\u8303\u56f4\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e $m$ \u6761\u8def\u5f84\u7684\u5904\u7406\u5f53\u7136\u4e0d\u80fd\u592a\u5927\uff0c \u90a3\u4e48\u6211\u4eec\u5c31\u8003\u8651\uff1a\u7528 **\u8d77\u70b9** \u548c **\u7ec8\u70b9** \u6765\u7d2f\u52a0\u7b54\u6848\u3002\n\n# \u8003\u8651\u8def\u5f84\u7684\u62c6\u5206\n\n\u90a3\u4e48\u5982\u4f55\u7d2f\u52a0\uff1f \u6211\u4eec\u5148\u8003\u8651\uff1a\u6bcf\u4e2a\u8282\u70b9\u8981\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u5219\u5fc5\u7136\u51fa\u73b0\u5728\u4e00\u6761\u8def\u5f84$(u->v)$ \u4e0a\uff0c\u53c8\u56e0\u4e3a $u$ \u5148\u4f1a\u8dd1\u5230 $LCA(u,v)$ ,\u7136\u540e\u518d\u8dd1\u5230 $v$\u3002\n\n\u5373\uff1a$u$ -> $LCA(u,v)$ -> $v$\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8def\u5f84\u62c6\u6210\u4e24\u6761\uff0c\u5206\u522b\u5904\u7406 $u$ \u5230 $lca$ \u8def\u5f84\u4e0a\u70b9\u7684\u8d21\u732e\uff0c\u4ee5\u53ca $lca$ \u5230 $v$ \u8def\u5f84\u4e0a\u70b9\u7684\u8d21\u732e\n\n### \u8003\u8651\u7b2c\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u70b9\n\n\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u51fa\uff0c\u5728 $dep[i] + w[i] = dep[u]$ \u7684\u60c5\u51b5\u5148\uff0c i \u53f7\u8282\u70b9\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u3002\n\n\u5373\uff1a\u5728 i \u7684\u5b50\u6811\u5185\uff0c\u82e5\u6709 $dep[u] = dep[i] + w[i]$ \uff08\u81f3\u4e8e i \u4e0d\u5728 $u -> LCA$ \u7684\u8def\u5f84\u4e0a\u7684\u60c5\u51b5\u6211\u4eec\u53ef\u4ee5\u7528\u5dee\u5206\u601d\u60f3\u89e3\u51b3\uff09\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad i \u7684\u5b50\u6811\u5185 \u6709\u65e0 $dep[u]$ \u6ee1\u8db3\u8be5\u5f0f\u5373\u53ef\uff0c\u5bf9\u6b64\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u8ba1\u6570\u6570\u7ec4 $cnt$ \u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u5f53\u524d\u70b9\u51fa\u53d1\u7684\u8282\u70b9\u6570\uff0c\u6bcf\u6b21\u6df1\u641c\u5230\u8be5\u70b9\u5c31\u5bf9\u8ba1\u6570\u6570\u7ec4\u7d2f\u52a0\uff0c\n\n\u540c\u65f6\u6211\u4eec\u626b\u63cf\u5f53\u524d\u8282\u70b9\u4f5c\u4e3a\u54ea\u4e9b\u5b50\u8282\u70b9\u7684 $LCA$ \u51fa\u73b0\u8fc7\uff0c\u5c06\u8fd9\u4e9b\u5b50\u8282\u70b9\u7684 $dep$ \u51cf\u6389\u5c31\u53ef\u4ee5\u8fbe\u5230\u5dee\u5206\u7684\u6548\u679c\u4e86\u3002\n\n### \u8003\u8651\u7b2c\u4e8c\u6761\u8def\u5f84\u4e0a\u7684\u70b9\n\n\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u51fa\u5173\u4e8e u,v \u548c i \u7684\u7b49\u5f0f\uff1a\n$dep[i] - w[i] = dep[v] - dis(u,v)$\n\n\u90a3\u4e48\u8fd9\u91cc dep \u51cf\u6389 w[i] \u540e\u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u5bf9\u6b64\u6211\u4eec\u5c06\u5de6\u53f3\u5f0f\u540c\u65f6\u52a0\u4e0a n \u5373\u53ef\uff08\u9898\u76ee\u6761\u4ef6\uff1a$w[i]<=n$\uff09\u3002\n\n\u90a3\u4e48\u8fd9\u6837\u6211\u4eec\u5c31\u8981\u5224\u65ad i \u7684\u5b50\u6811\u5185\u662f\u5426\u6709 $dep[v] - dis(u,v) = dep[i] - w[i]$ \u5373\u53ef\u3002\n\n\u7136\u540e\u540c\u4e0a\u64cd\u4f5c\u3002\n\n### \u8003\u8651\u904d\u5386\u5904\u7406\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6811\u8fdb\u884c\u4e24\u6b21\u904d\u5386\u5c31\u53ef\u4ee5\u5904\u7406\u51fa\u4ee5\u4e0a\u4fe1\u606f\u4e86\u3002\n\n# \u8003\u8651\u91cd\u590d\u8d21\u732e\u7684\u5220\u9664\n\n\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5982\u679c\u67d0\u4e2a\u8282\u70b9 $i$ \u5c31\u662f $u$ \u3001$v$ \u7684 $LCA$\n\u90a3\u4e48\u8be5\u8282\u70b9\u7684\u8d21\u732e\u662f\u4f1a\u88ab\u7d2f\u52a0\u4e24\u6b21\u7684\u3002\u5bf9\u6b64\u6211\u4eec\u5982\u4f55\u6d88\u9664\u591a\u4f59\u8d21\u732e\uff1f\u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n### \u8003\u8651\u66b4\u529b\u5220\u9664\n\u5728\u7a0b\u5e8f\u6700\u540e\u66b4\u529b\u679a\u4e3e m \u6761\u8def\u5f84 \u7684 LCA \u5e76\u5224\u65ad\u5176\u662f\u5426\u5728\u8be5\u8def\u5f84\u4e0a\uff0c\u5728\u7684\u8bdd\u5c31\u51cf\u8d21\u732e\u3002\n\n### \u8003\u8651\u4fee\u6539\u904d\u5386\u6811\u7684\u65b9\u5f0f\n\u5176\u5b9e\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5728\u7b2c\u4e8c\u6b21\u904d\u5386\u6811\u7684\u65f6\u5019\u5148\u5bf9\u4ee5 $i$ \u4e3a $LCA$ \u7684\u8def\u5f84\u4e0a\u7684\u7ec8\u70b9\u4fe1\u606f\u5148\u5220\u9664\uff0c\u7136\u540e\u518d\u7d2f\u52a0\u7b54\u6848\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u5728\u505a\u7b2c\u4e8c\u6761\u8def\u5f84\u7684\u65f6\u5019\u5ffd\u7565\u6389 $LCA$ \u8fd9\u4e2a\u8282\u70b9\u3002\u90a3\u4e48\u5bf9\u6b64\u7684\u64cd\u4f5c\u4e5f\u5f88\u7b80\u5355\uff0c\u7a0b\u5e8f\u6267\u884c\u987a\u5e8f\u6362\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\n```cpp\n//by Judge\n#include<iostream>\n#include<vector>\n#include<cstdio>\n#define ll long long\nusing namespace std;\nconst int M=3e5+11;\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} char sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(int x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]=' ';\n} int n,m,pat,mx;\nint w[M],s[M],cnt1[M],cnt2[M<<1],ans[M],siz[M],dep[M],son[M],f[M],top[M],head[M];\nvector<int> q1[M],q2[M],q3[M];\nstruct operation{ int u,v,lca,dis; }a[M];\nstruct Edge{ int to,next; Edge(int to,int next):to(to),next(next){} Edge(){} }e[M<<1];\ninline void add(int u,int v){\n\te[++pat]=Edge(v,head[u]),head[u]=pat;\n\te[++pat]=Edge(u,head[v]),head[v]=pat;\n}\n#define v e[i].to\nvoid dfs(int u,int fa){\n\tsiz[u]=1,dep[u]=dep[f[u]=fa]+1;\n\tfor(int i=head[u];i;i=e[i].next) if(v^fa){\n\t\tdfs(v,u),siz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]]) son[u]=v;\n\t}\n} void dfs(int u){\n\tif(!top[u]) top[u]=u; if(!son[u]) return ;\n\ttop[son[u]]=top[u], dfs(son[u]);\n\tfor(int i=head[u];i;i=e[i].next)\n\t\tif(v^f[u] && v^son[u]) dfs(v);\n} void dfs1(int u){\n\tint now=w[u]+dep[u],cun; if(now<=mx) cun=cnt1[now];\n\tfor(int i=head[u];i;i=e[i].next) if(v^f[u]) dfs1(v);\n\tcnt1[dep[u]]+=s[u]; if(now<=mx) ans[u]=cnt1[now]-cun;\n\tfor(int i=0;i<q1[u].size();++i) --cnt1[dep[q1[u][i]]];\n} void dfs2(int u){\n\tint now=dep[u]-w[u]+n,cum=cnt2[now];\n\tfor(int i=head[u];i;i=e[i].next) if(v^f[u]) dfs2(v);\n\tfor(int i=0;i<q2[u].size();++i) ++cnt2[q2[u][i]+n];\n\tans[u]+=cnt2[now]-cum;\n\tfor(int i=0;i<q3[u].size();++i) --cnt2[q3[u][i]+n];\n}\n#undef v\ninline int LCA(int u,int v){\n\twhile(top[u]^top[v]){\n\t\tdep[top[u]]>dep[top[v]]?u=f[top[u]]:v=f[top[v]];\n\t} return dep[u]<dep[v]?u:v;\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1,u,v;i<n;++i)\n\t\tu=read(),v=read(),add(u,v);\n\tfor(int i=1;i<=n;++i) w[i]=read();\n\tfor(int i=1;i<=m;++i) a[i].u=read(),a[i].v=read();\n\tdep[1]=1,dfs(1,0),dfs(1); for(int i=1;i<=n;++i) mx=max(mx,dep[i]);\n\tfor(int i=1;i<=m;++i){\n\t\ta[i].lca=LCA(a[i].u,a[i].v),++s[a[i].u];\n\t\ta[i].dis=dep[a[i].u]+dep[a[i].v]-dep[a[i].lca]*2;\n\t\tq1[a[i].lca].push_back(a[i].u);\n\t} dfs1(1);\n\tfor(int i=1;i<=m;++i){\n\t\tq2[a[i].v].push_back(dep[a[i].v]-a[i].dis);\n\t\tq3[a[i].lca].push_back(dep[a[i].v]-a[i].dis);\n\t} dfs2(1);\n\tfor(int i=1;i<=m;++i) if(dep[a[i].u]-dep[a[i].lca]==w[a[i].lca]) --ans[a[i].lca];\n\tfor(int i=1;i<=n;++i) print(ans[i]); return Ot(),putchar('\\n'),0;\n}\n```\n",
        "postTime": 1537368286,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "## P1600\u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011\n\n\u4e2a\u4eba\u611f\u89c9\u9898\u89e3\u533a\u76ee\u524d\u597d\u50cf\u57fa\u672c\u4e0a\u90fd\u7528\u4e00\u4e2a\u795e\u5947\u7684\u6876+\u6811\u4e0a\u5dee\u5206\u7684\u65b9\u6cd5\uff0c\u867d\u7136\u6709\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4f46\u597d\u50cf\u6ca1\u6709\u8bb2\u7684\u6bd4\u8f83\u6e05\u695a\u7684\u3002\n\n\u6240\u4ee5\u6211\u51b3\u5b9a\u5199\u4e00\u7bc7\u6bd4\u8f83\u8be6\u7ec6\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u9898\u89e3~~\u56e0\u4e3a\u6211\u4e0d\u4f1a\u90a3\u4e2a\u6876~~\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u9898\u7684\u9898\u89e3\u533a\u8fd8\u6ca1\u88ab\u5173\uff08\n\n\n------------\n\u4e0d\u59a8\u8bbe\u8fd9\u68f5\u6811\u4ee5 $1$ \u4e3a\u6839\uff0c$i$ \u53f7\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a $dep_i$\u3002\u8bbe\u67d0\u73a9\u5bb6\u7684\u7ebf\u8def\u4e3a $u$ \u5230 $v$\uff0c$u,v$ \u4e24\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a $lca$\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5c06\u4e00\u6761\u8def\u7ebf\u5206\u4e3a\u4e0a\u884c\u548c\u4e0b\u884c\u4e24\u6bb5\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u5411\u4e0a\u8d70\u548c\u5411\u4e0b\u8d70\u7684\u4e24\u6bb5\uff09\u3002\u5bf9\u4e8e $lca$ \u8fd9\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4eba\u4e3a\u5b9a\u4e49\u5b83\u5728\u4efb\u610f\u4e00\u6bb5\u4e2d\uff08\u6ca1\u6709\u533a\u522b\uff09\u3002\u4e0d\u59a8\u8bbe\u5176\u5c5e\u4e8e\u4e0a\u884c\u6bb5\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u70b9 $k$\uff0c\u5982\u679c $k$ \u5728\u8fd9\u6761\u8def\u7ebf\u7684\u4e0a\u884c\u6bb5\u4e2d\uff0c\u5219\u8fd9\u4e2a\u70b9\u4e0a\u7684\u89c2\u5bdf\u5458\u53ef\u4ee5\u89c2\u6d4b\u5230\u8fd9\u4f4d\u73a9\u5bb6\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662f $dep_u=dep_k+w_k$\u3002\n\n\u8fd9\u5176\u5b9e\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u5728\u4e0a\u884c\u6bb5\u4e2d\uff0c\u6240\u4ee5\u6bcf\u4e00\u79d2\u949f\u8fd9\u4e2a\u73a9\u5bb6\u90fd\u4f1a\u5411\u4e0a\u8d70\u4e00\u6b65\uff0c\u90a3\u4e48\u5230\u8fbe\u8be5\u70b9\u4e00\u5171\u8d70\u4e86 $dep_u-dep_k$ \u6b65\uff0c\u6240\u4ee5\u7528\u65f6\u5c31\u662f $dep_u-dep_k$\u3002\n\n\u5f53\u8fd9\u4e2a\u6570\u7b49\u4e8e $w_k$\uff0c\u5373 $dep_u=dep_k+w_k$ \u65f6\u53ef\u88ab\u89c2\u6d4b\u3002\n\n\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/903lzeje.png)\n\n\u7531\u4e8e\u4e0a\u884c\u6bb5\u7684\u533a\u95f4\u662f $u$ \u5230 $lca$\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8fd9\u4e2d\u95f4\u7684\u6bcf\u4e00\u70b9\u6240\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e0a\u90fd\u63d2\u5165\u4e00\u4e2a $dep_u$\uff0c\u7136\u540e\u67e5\u8be2 $dep_k+w_k$ \u6570\u91cf\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8be5\u70b9\u7edf\u8ba1\u5230\u7684\u4e0a\u884c\u6bb5\u7684\u6570\u91cf\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u6bcf\u4e2a\u70b9\u4e0a\u63d2\u5165\u4e00\u4e2a $dep_u$ \u53ef\u4ee5\u6539\u53d8\u6210\u5728 $u$ \u8282\u70b9\u63d2\u5165 $dep_u$\uff0c\u5728 $fa_{lca}$ \u8282\u70b9\u63d2\u5165 $-1$ \u4e2a $dep_u$\uff0c\u7136\u540e\u5f80\u4e0a\u5408\u5e76\uff0c\u4e5f\u5c31\u662f\u6811\u4e0a\u5dee\u5206\u3002\n\n\u4e8e\u662f\u6211\u4eec\u89e3\u51b3\u4e86\u4e0a\u884c\u6bb5\u7684\u95ee\u9898\uff0c\u4f46\u63a5\u4e0b\u6765\u7684\u4e0b\u884c\u6bb5\u5c31\u6bd4\u8f83\u68d8\u624b\u4e86\u3002\n\n\u6211\u4eec\u4e0d\u592a\u53ef\u80fd\u4ece $v$ \u70b9\u5411\u4e0a\u63a8\uff0c\u56e0\u4e3a\u4ece $u$ \u51fa\u53d1\u65f6\u6240\u6709\u6570\u90fd\u662f $0$ \u65f6\u523b\uff0c\u4f46\u5230\u8fbe $v$ \u70b9\u65f6\u6bcf\u4e2a\u6570\u7684\u65f6\u95f4\u4e0d\u540c\u3002 \n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e00\u79cd\u7ffb\u8f6c\u7684\u601d\u60f3\u3002\u65e2\u7136\u662f\u6c42\u4e0b\u884c\uff0c\u90a3\u8fd9\u6bb5\u7684\u4e0a\u884c\u7528\u4e0d\u5230\uff0c\u6211\u4eec\u5c31\u6539\u53d8\u4e00\u4e0b\uff0c\u5c06\u5b83\u53d8\u6210\u4ece\u8fd9\u4e2a\u70b9\u7684\u7956\u5148\u8dd1\u4e0b\u6765\u3002\n\n\u4f8b\u5982 $dep_u=5,dep_{lca}=3$ \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5148\u7528 $2$ \u7684\u65f6\u95f4\u8dd1\u5230\u4e86 $lca$\uff0c\u518d\u5f80\u4e0b\u884c\u6bb5\u8dd1\u3002\u90a3\u6211\u4eec\u4e0d\u59a8\u8ba9\u5b83\u53d8\u6210\u4ece\u4e00\u4e2a $dep=1$ \u7684\u7956\u5148\uff0c\u540c\u6837\u662f\u4e5f\u82b1 $2$ \u7684\u65f6\u95f4\u8dd1\u5230 $lca$ \u518d\u5f80\u4e0b\u8dd1\u3002\n\n\u4e0d\u59a8\u8bbe\u6211\u4eec\u7ffb\u4e0a\u53bb\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u662f $nt$\uff0c\u5219\u6709 $dep_u-dep_{lca}=dep_{lca}-nt$\u3002\n\n\u5bf9\u4e8e $k$ \u53f7\u8282\u70b9\uff0c\u5982\u679c $k$ \u53f7\u8282\u70b9\u5728\u4e0b\u884c\u6bb5\u4e0a\uff0c\u5219\u89c2\u5bdf\u5230\u5bf9\u5e94\u8282\u70b9\u7684\u6761\u4ef6\u662f $dep_u-dep_{lca}+dep_k-dep_{lca}=w_i$\uff0c\u5373 $dep_{lca}-nt+dep_k-dep_{lca}=dep_k-nt=w_i$\uff0c\u5373 $dep_k-w_i=nt$\u3002\n\n\u8fd9\u4e2a\u5f0f\u5b50\u7684\u610f\u601d\u662f\uff0c\u6211\u4eec\u5148\u7528 $dep_u-dep_{lca}=dep_{lca}-nt$ \u7684\u65f6\u95f4\u8dd1\u5230 $lca$\uff0c\u7136\u540e\u7528 $dep_k-dep_{lca}$ \u7684\u65f6\u95f4\u8dd1\u5230 $k$\u3002\n\n\u5982\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/tatjnncm.png)\n\n\uff08\u597d\u4e11\uff0c\u4f46\u633a\u76f4\u89c2\u7684\uff09\n\n\u6211\u4eec\u5728 $lca$ \u5230 $v$ \u7684\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u70b9\uff08\u4e0d\u5305\u542b $lca$\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5728\u4e0a\u884c\u6bb5\u7edf\u8ba1\u8fc7\u4e86\uff09\u4e0a\u7684\u7ebf\u6bb5\u6811\u63d2\u5165\u4e00\u4e2a $nt$\uff0c\u7136\u540e\u67e5\u8be2 $dep_k-w_k$ \u7684\u503c\uff0c\u5c31\u53ef\u4ee5\u67e5\u5230\u4e0b\u884c\u6bb5\u7684\u6570\u91cf\u3002\n\n\u540c\u6837\u7684\uff0c\u7528\u6811\u4e0a\u5dee\u5206\u7684\u601d\u60f3\uff0c\u6539\u6210\u5728 $v$ \u70b9\u63d2\u5165\u4e00\u4e2a $nt$\uff0c\u5728 $lca$ \u70b9\u63d2\u5165 $-1$ \u4e2a $nt$\uff0c\u7136\u540e\u5408\u5e76\u4e0a\u53bb\u3002\n\n\u6ce8\u610f\u8fd9\u4e2a\u65f6\u5019\u7684 $nt$ \u53ef\u80fd\u4f1a\u662f\u8d1f\u7684\uff0c\u4f46\u6ca1\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ffb\u8f6c\u662f\u6211\u4eec\u5047\u50cf\u7684\uff0c\u5373\u4f7f\u662f\u6df1\u5ea6\u662f\u8d1f\u6570\u4e5f\u4e0d\u5f71\u54cd\u6211\u4eec\u505a\u9898\u3002\u4f46\u5728\u7ebf\u6bb5\u6811\u5904\u7406\u65f6\u8981\u6ce8\u610f\u521d\u59cb\u6570\u636e\u8303\u56f4\u4e3a $-n$ \u5230 $n$\u3002\n\n\u53e6\u5916\uff0c\u5982\u679c\u67d0\u4e2a\u70b9\u7684 $w_i$ \u503c\u4e3a $0$\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u7edf\u8ba1\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u5c06\u6240\u6709\u7684\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u90fd\u7edf\u8ba1\u4e24\u904d\uff0c\u5373\u7edf\u8ba1\u4e0a\u884c\u548c\u4e0b\u884c\u662f\u90fd\u7edf\u8ba1\u5230\u4e86\u3002\u5bf9\u4e8e\u8fd9\u7c7b\u70b9\u6211\u4eec\u8981\u5c06\u7b54\u6848\u9664\u4ee5 $2$\u3002\n\n\u8d34\u4e2a\u4ee3\u7801\uff0c\u4e00\u5171\u82b1\u4e86 15min \u5c31\u5199\u51fa\u6765\u4e86\uff0c\u5e94\u8be5\u7b97\u662f\u8fd9\u4e2a\u9898\u6700\u7b80\u5355\u7684\u505a\u6cd5\u4e86\u5427\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tregister int x=0;\n\tregister bool f=0;\n\tregister char ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-') f=1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=x*10+ch-48;\n\t\tch=getchar();\n\t}\n\treturn f?-x:x;\n} \nchar str[300];int kkk;\ninline void print(register int x,register char k='\\n'){\n\tif(!x) putchar('0');\n\tif(x<0) putchar('-'),x=-x;\n\twhile(x){\n\t\tstr[++kkk]=x%10+48;\n\t\tx/=10;\n\t}\n\twhile(kkk){\n\t\tputchar(str[kkk--]);\n\t}\n\tputchar(k); \n}\nconst int maxn=3e5+10;\nvector<int> e[maxn];\nint n,m,ans[maxn],tim[maxn];\nint top[maxn],fa[maxn],son[maxn],dep[maxn],sz[maxn];\nvoid dfs1(int u,int f){\n\tdep[u]=dep[f]+1;\n\tfa[u]=f;\n\tsz[u]=1;\n\tfor(int v:e[u]){\n\t\tif(v==fa[u]) continue;\n\t\tdfs1(v,u);\n\t\tsz[u]+=sz[v];\n\t\tif(sz[son[u]]<sz[v]){\n\t\t\tson[u]=v;\n\t\t}\n\t}\n}\nvoid dfs2(int u,int o){\n\ttop[u]=o;\n\tif(!son[u]) return;\n\tdfs2(son[u],o);\n\tfor(int v:e[u]){\n\t\tif(v==fa[u]||v==son[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}\nint lca(int u,int v){\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]>dep[v]) swap(u,v);\n\treturn u;\n}\nstruct seg{\n\tint v,ls,rs;\n}t[maxn*75];int st[maxn*75],tops,rt[maxn],cnt;\nint nnd(){\n\treturn tops?st[tops--]:++cnt;\n}\nvoid del(int &o){\n\tif(!t[o].v&&!t[o].ls&&!t[o].rs){\n\t\tst[++tops]=o;\n\t\to=0;\n\t} \n}\nvoid pushup(int o){\n\tt[o].v=t[t[o].ls].v+t[t[o].rs].v;\n}\nvoid change(int &o,int l,int r,int q,int v){\n\tif(!o) o=nnd();\n\tif(l==r){\n\t\tt[o].v+=v;\n\t\tdel(o);\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(q<=mid) change(t[o].ls,l,mid,q,v);\n\telse change(t[o].rs,mid+1,r,q,v);\n\tpushup(o);del(o);\n}\nint query(int o,int l,int r,int q){\n\tif(q>r||q<l||!o) return 0;\n\tif(l==r){\n\t\treturn t[o].v;\n\t}\n\tint mid=l+r>>1;\n\tif(q<=mid) return query(t[o].ls,l,mid,q);\n\telse return query(t[o].rs,mid+1,r,q);\n}\nvoid merge(int &o1,int &o2,int l,int r){\n\tif(!o2) return;\n\tif(!o1){\n\t\to1=o2;\n\t\treturn;\n\t}\n\tif(l==r){\n\t\tt[o1].v+=t[o2].v;\n\t\tt[o2].v=0;\n\t\tdel(o2);del(o1);\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tmerge(t[o1].ls,t[o2].ls,l,mid);\n\tmerge(t[o1].rs,t[o2].rs,mid+1,r);\n\tpushup(o1);t[o2].v=0;\n\tdel(o1);del(o2);\n}\nvoid dfs(int u){\n\tfor(int v:e[u]){\n\t\tif(v==fa[u]) continue;\n\t\tdfs(v);\n\t\tmerge(rt[u],rt[v],-n,n);\n\t}\n\tans[u]+=query(rt[u],-n,n,dep[u]+tim[u]);\n\tans[u]+=query(rt[u],-n,n,dep[u]-tim[u]);\n\tif(tim[u]==0) ans[u]>>=1; \n}\nsigned main(){\n\tn=read();m=read();\n\tfor(int i=1;i<n;i++){\n\t\tint u=read(),v=read();\n\t\te[u].push_back(v);\n\t\te[v].push_back(u);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\ttim[i]=read();\n\t}\n\tdfs1(1,0);dfs2(1,1);\n\tfor(int i=1;i<=m;i++){\n\t\tint u=read(),v=read();\n\t\tint l=lca(u,v);\n\t\tint nt=dep[l]*2-dep[u];\n\t\tchange(rt[u],-n,n,dep[u],1);\n\t\tchange(rt[v],-n,n,nt,1);\n\t\tchange(rt[l],-n,n,nt,-1);\n\t\tchange(rt[fa[l]],-n,n,dep[u],-1);\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=n;i++){\n\t\tprint(ans[i],' ');\n\t}\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1606310044,
        "uid": 120074,
        "name": "BFqwq",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "## Solution \u5929\u5929\u7231\u8dd1\u6b65\n\n**[Last_Reinarnation](https://www.luogu.org/blog/Rcylj/)**\n\n\u672c\u9898\u662f\u4e00\u9053\u8003\u9a8c\u601d\u7ef4\u7684\u9898\uff0c\u770b\u5566\u4e00\u4e2a\u665a\u4e0a\u548c\u4e00\u4e2a\u4e0a\u5348\u624d\u5f04\u660e\u767d\u6b63\u89e3\uff0c\u6b63\u89e3\u662f$LCA$ $+$ \u5dee\u5206$ +$ \u6876\uff0c\u5dee\u5206\u4e5f\u4e0d\u662f\u5e73\u5e38\u7684\u6811\u4e0a\u5dee\u5206\uff0c\u7b97\u662f\u4e00\u79cd\u53d8\u5f62\u7684\u6811\u4e0a\u5dee\u5206\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u6811\u4e0a\u5dee\u5206\uff0c[\u6a21\u677f\u9898](https://www.luogu.org/problem/P3128)\uff0c~~\u5176\u5b9e\u8fd9\u9053\u9898\u7684\u5dee\u5206\u548c\u666e\u901a\u7684\u70b9\u5dee\u5206\u6709\u5f88\u5927\u533a\u522b~~\n\n\n------------\n\n**\u9996\u5148\u8003\u8651\u90e8\u5206\u5206\u7684\u601d\u8def**\n\n\u524d\u4e24\u4e2a\u6d4b\u8bd5\u70b9\uff1a\u7531\u4e8e\u6bcf\u4e2a\u4eba $si == ti$ \uff0c\u6240\u4ee5\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709\u79fb\u52a8\uff0c\u53ea\u9700\u5f00\u4e00\u4e2a\u6876\uff0c\u8bb0\u5f55\u6811\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u7684\u4eba\u7684\u4e2a\u6570\uff0c\u5982\u679c\u89c2\u5bdf\u5458\u7684$wj$\u7b49\u4e8e$0$\uff0c\u5219\u53ef\u4ee5\u770b\u5230\uff0c\u5426\u5219\u770b\u4e0d\u5230\u3002\n\n\u4e09 \u56db\u6d4b\u8bd5\u70b9\uff1a\u7531\u4e8e\u6bcf\u4e2a\u89c2\u5bdf\u5458\u7684$wj = 0$\uff0c\u6240\u4ee5\u53ea\u9700\u5c06\u6bcf\u4e2a\u73a9\u5bb6\u51fa\u53d1\u7684\u70b9\u7684\u5f00\u4e2a\u6876\u5373\u53ef\u3002\n\n\u7b2c\u4e94\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6b64\u65f6$n$\u5f88\u5c0f\uff0c\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84\u4e0a\u66b4\u529b\u6a21\u62df\uff0c\u7ecf\u8fc7\u67d0\u4e2a\u70b9\u65f6\u53ef\u4ee5\u770b\u4e00\u4e0b\u5f53\u524d\u65f6\u523b\uff0c\u662f\u5426\u8ddf\u7ecf\u8fc7\u7684\u70b9\u7684$w$\u76f8\u7b49\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u8d21\u732e\u52a0\u4e00\u3002\n\n\uff08\u5176\u5b9e\u524d\u4e94\u4e2a\u70b9\u662f\u66b4\u529b\u548c\u6a21\u62df\u9001\u5206\u7684\u70b9\uff09\n\n\u7b2c\u516d\u5230\u516b\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6b64\u65f6\u7684$n$\u548c$m$\u7684\u8303\u56f4\u53d8\u5927\u4e86\uff0c\u66b4\u529b\u80af\u5b9a\u8fc7\u4e0d\u4e86\uff0c\u4f46\u662f\u8fd9\u662f\u4e00\u6761\u94fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7279\u6b8a\u505a\u6cd5\uff0c\u7531\u4e8e\u662f\u94fe\uff0c\u6240\u4ee5\u6709\u4e24\u79cd\u60c5\u51b5\t\n\n1.\u5411\u4e0b\u8d70 $depth[s] + w[j] = depth[j]$; \n\n$--->$     $depth[j] - w[j] = depth[s]$;\n\n2.\u5411\u4e0a\u8d70 $depth[s] - w[j] = depth[j]$;\n\n$ --->$    $ depth[j] + w[j] = depth[s]$;\n\n\n\u6240\u4ee5\uff0c\u5f00\u4e2a\u6876$z[maxn]$\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a$z[s[i]]++$,$z[t[i]]--$,\u7136\u540e\u66f4\u65b0\u4e00\u904d\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u4e2a\u89c2\u5bdf\u5458\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u89c2\u5bdf\u5458\uff0c\u6839\u636e\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\uff0c\u52a0\u4e0a$z[depth[j]-w[j]]$ \u548c $z[depth[j]+w[j]]$\u5c31\u53ef\u4ee5\u4e86\n\n\n\u7b2c\u4e5d\u5230\u5341\u4e8c\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6b64\u65f6\u7684$si$\u5168\u90fd\u662f1\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u89c2\u5bdf\u5458j\u53ef\u4ee5\u89c2\u5bdf\u5230\u5176\u4ed6\u73a9\u5bb6\u65f6\uff0c\u5fc5\u987b\u6ee1\u8db3$w[j] = depth[j]$\u5e76\u4e14\u73a9\u5bb6\u5728\u6b64\u89c2\u5bdf\u5458\u7684\u5b50\u6811\u4e2d\uff08\u5305\u62ec\u89c2\u5bdf\u5458\u8fd9\u4e2a\u70b9\uff09\uff0c\u5f00\u4e2a\u6876\uff0c$++z[to[i]]$, \u4e00\u8fb9Dfs\u5904\u7406\u5f97\u5230\u7b54\u6848\n\n\n\u7b2c\u5341\u4e09\u5230\u7b2c\u5341\u516d\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6b64\u65f6$ti$\u5168\u90fd\u662f1\uff0c\u4e00\u4e2a\u89c2\u5bdf\u5458j\u53ef\u4ee5\u770b\u5230\u73a9\u5bb6i\u9700\u6ee1\u8db3$depth[j]+w[j] = depth[i]$,\u5e76\u4e14\u73a9\u5bb6i\u5728\u5176\u5b50\u6811\u4e2d\uff08\u5305\u62ec\u89c2\u5bdf\u5458\u8fd9\u4e2a\u70b9\uff09\uff0c\u5f00\u4e2a\u6876\uff0c$++z[s[i]]$, \u901a\u8fc7\u4e00\u8fb9Dfs\u5f97\u5230\u6bcf\u4e2a\u89c2\u5bdf\u5458\u7b54\u6848\n\n------------\n\u7ec8\u4e8e\u5230\u6b63\u89e3\u4e86\n\n\n\u771f\u6b63\u7684\u96be\u9898\u662f\u8bb8\u591a\u77e5\u8bc6\u70b9\u7ed3\u5408\u5f97\u5230\u7684\uff0c\u6574\u7406\u4e0a\u9762\u7684\u5168\u90e8\u601d\u8def\uff0c\u53d1\u73b0\u6b63\u89e3\u53ef\u4ee5\u7528\u5230\u5dee\u5206\u548c\u6876\u3002\n\n\n\u4f46\u6b63\u89e3\u601d\u8def\u975e\u5e38\u5de7\u5999\uff0c\u4e0d\u662f\u5e73\u65f6\u7684\u6811\u4e0a\u5dee\u5206\n\n\n1.\u8003\u8651$n$, $m$\u5f88\u5927\uff0c\u800c\u4e14\u6839\u636e\u7b2c\u516d\u9053\u516b\u6d4b\u8bd5\u70b9\u7684\u89e3\u6cd5\uff0c\u5e94\u8be5\u53ef\u4ee5\u60f3\u5230\u7528\u6811\u4e0a\u5dee\u5206\uff0c\u4f46\u662f\u7b80\u5355\u7684\u5dee\u5206\u601d\u8003\u540e\u4e0d\u53ef\u4ee5\u89e3\u51b3\u6b64\u9898\uff08\u6211\u5f53\u65f6\u4ee5\u4e3a\u662f\u666e\u901a\u6811\u4e0a\u5dee\u5206\uff0c\u60f3\u4e86\u597d\u957f\u65f6\u95f4\u624d\u60f3\u5230$n * m * logn$\u7684\u7b97\u6cd5\uff09\uff0c\u6240\u4ee5\u5e94\u53e6\u5916\u60f3\u7b97\u6cd5\n\n\n2.\u501f\u9274\u94fe\u505a\u6cd5\uff0c\u6bcf\u4e2a\u73a9\u5bb6\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e0a\u884c\u548c\u4e0b\u884c\n\n\n\u4e0a\u884c \uff1a$w[x] + depth[x] = depth[s];$\n\n\n\u4e0b\u884c \uff1a$w[x] - depth[x] = dis[s~t] - depth[t];$\n\n\u89c2\u5bdf\u53ef\u77e5\u8ddf\u94fe\u7684\u505a\u6cd5\u975e\u5e38\u76f8\u4f3c\uff0c\u7136\u540e\u601d\u8003\u4e00\u4e0b\uff0c\u4e0a\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u8d77\u70b9\u53ef\u4ee5\u505a\u8d21\u732e\uff0c\u4e0b\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u7ec8\u70b9\u53ef\u4ee5\u505a\u8d21\u732e\uff0c\u4f46\u65e0\u8bba\u662f\u54ea\u4e00\u79cd\u60c5\u5f62\uff0c\u80fd\u5bf9 $x$ \u505a\u8d21\u732e\u7684\u8d77\u70b9\u6216\u7ec8\u70b9\u4e00\u5b9a\u90fd\u5728\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\uff08\u753b\u753b\u56fe\u601d\u8003\u4e00\u4e0b\uff09\uff0c\u8fd9\u4f7f\u5f97\u53ef\u4ee5\u5728$Dfs$\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\u5904\u7406\u4ee5\u4efb\u610f\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u3002\uff08\u8fd9\u91cc\u975e\u5e38\u91cd\u8981\uff09\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u73a9\u5bb6\uff0c\u6c42\u51fa$s[i]$, $t[i]$\u7684\u8ddd\u79bb\u548c$LCA$\uff0c\u7136\u540e\u6839\u636e\u4e0a\u9762\u7684\u516c\u5f0f\uff0c\u53ef\u4ee5\u60f3\u5230\uff0c\u6839\u636e\u6876\u6765\u7ef4\u62a4\u7b54\u6848\uff0c \u6240\u4ee5\u53ef\u4ee5\u501f\u9274\u94fe\u7684\u6876\uff0c\u5f00\u4e24\u4e2a\u6876$z1[]$, $z2[]$\u3002\n\n\u7136\u540e\u8fdb\u884c\u6811\u4e0a\u5dee\u5206\uff0c\u8fd9\u91cc\u6709\u4e9b\u4e0d\u540c\uff0c\u5148\u679a\u4e3e\u6bcf\u4e00\u4e2a\u73a9\u5bb6\uff0c\u5c06  $in[s[i]]++$ ,\u518d\u5c06\u7ec8\u70b9\u4e3a$t[i]$\u7684\u70b9\u6254\u5230 $vector[t[i]]$ \u540e\u9762\uff0c\u5c06\u7b2ci\u540d\u73a9\u5bb6\u6254\u5230$vector[LCA]$\u540e\u9762, \u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5462\uff1f\n\n\u56e0\u4e3a\u5728$Dfs$\u65f6\uff0c\u82e5$x$\u8282\u70b9\u662f\u8d77\u70b9\uff0c\u5219\u8ba9$z1[depth[x]] += in[x]$,\u5982\u679c\u6b64\u65f6$depth[x] == depth[j]+w[j]$, \u5219\u8fd9\u4e2a\u73a9\u5bb6\u53ef\u4ee5\u5bf9$j$\u8fd9\u4e2a\u89c2\u5bdf\u5458\u505a\u8d21\u732e\uff0c\u6b64\u65f6\u52a0\u4e0a\u4e86\u8d77\u70b9\u8def\u5f84\u7684\u8d21\u732e\uff0c \u82e5$x$\u662f\u7ec8\u70b9\uff0c\u5219\u904d\u5386$x$\u7684\u540e\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u8ba9$z2[dis[*it] - depth[t[*it]]+maxn]++$, \u5982\u679c\u6b64\u65f6$w[j] - depth[j] == dis[*it] - depth[t[*it]]$,\u5219\u8fd9\u4e2a\u73a9\u5bb6\u53ef\u4ee5\u5bf9$j$\u89c2\u5bdf\u5458\u505a\u8d21\u732e\uff0c\u6b64\u65f6\u7b97\u4e0a\u4e86\u7ec8\u70b9\u7684\u8d21\u732e\uff0c\u7136\u540e\u82e5\u5f53\u524d\u70b9$x$\u662f\u67d0\u4e2a$s[i]$\u548c$t[i]$\u7684$LCA$\n\uff0c\u5219\u904d\u5386\u5176\u540e\u9762\u6bcf\u4e2a\u70b9\uff0c\u8ba9$z1[depth[s[*it]]--$, $z2[dis[*it] - depth[t[*it]] + maxn]--$,\u4e3a\u4ec0\u4e48\u53c8\u8981\u8fd9\u6837\u5462\uff08\u6211\u611f\u89c9\u89e3\u91ca\u633a\u8be6\u7ec6\u7684\uff0c\u5e94\u8be5\u80fd\u81ea\u5df1\u60f3\u51fa\u6765\uff09?\n\n\u8fd9\u5c31\u662f\u672c\u9898\u6811\u4e0a\u5dee\u5206\u7684\u7cbe\u534e\u6240\u5728\uff0c\u56e0\u4e3a\u5728\u4f60\u7b97\u7b54\u6848\u7684\u65f6\u5019\uff0c\u4f9d\u9760\u6876\u5c06\u7b54\u6848\u5b58\u5728\u6bcf\u4e2a\u6df1\u5ea6\u4e2d\uff0c\u7531\u4e8e\u6211\u4eec\u8fdb\u884c\u7684\u662f$Dfs$,\u6211\u4eec\u53ef\u4ee5\u5148\u641c\u5230\u5e95\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u80fd\u5bf9\u6bcf\u4e2a\u70b9\u505a\u8d21\u732e\u7684\u70b9\u4e00\u5b9a\u5728\u5176\u5b50\u6811\u91cc\uff0c\n\u6240\u4ee5\u53ea\u9700\u8ba1\u7b97\u4e0a\u8d21\u732e\u5373\u53ef\uff0c\u4f46\u662f\u5728\u8d70\u8fc7\u6bcf\u4e00\u4e2a$LCA$\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u8bb0\u5f97\u5c06s\u548ct\u7684\u8d21\u732e\u53bb\u6389\u3002\u4f46\u6709\u4e00\u4e2a\u7ec6\u8282\u5982\u679c\u8d77\u70b9\u6216\u7ec8\u70b9\u4e3a$LCA$\u4e14$LCA$\u662f\u53ef\u4ee5\u89c2\u5bdf\u73a9\u5bb6\u7684\uff0c\u5728\u4e0a\u884c\u548c\u4e0b\u884c\u7edf\u8ba1\u7684\u65f6\u5019\u90fd\u4f1a\u5bf9\u8be5$LCA$\u4ea7\u751f\u8d21\u732e\u4f1a\u91cd\u590d\u8ba1\u6570\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u679a\u4e3e\u6bcf\u4e2a\u73a9\u5bb6\u65f6\u52a0\u4e0a\u8fd9\u53e5\u8bdd$if (depth[lca] + w[lca] == depth[s[i]]) --ans[lca];$\u5c31\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u8ba1\u6570\u7684\u95ee\u9898\n\n\u5177\u4f53\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\u8fd8\u9700\u5927\u5bb6\u4ee3\u7801\u7684\u5b9e\u73b0\uff0c\u4ee3\u7801\u91cc\u8bf4\u660e\n\n$code$\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <vector>\n#define Re register\nusing namespace std;\n\nconst int maxn = 300010;\n\nint n, m, u, v;\nint cnt, lgg, lca;\nint head[maxn], depth[maxn], fa[maxn][21];\nint dis[maxn], w[maxn], s[maxn], t[maxn], in[maxn], z1[maxn << 1], z2[maxn << 1], ans[maxn];\n\n//dis[] \u6bcf\u4e2a\u73a9\u5bb6s\u548ct\u7684\u8ddd\u79bb \n//in[] \u5dee\u5206\u7528\u7684 \n//s[],t[]\u73a9\u5bb6\u8d77\u70b9\u7ec8\u70b9\n//z1[],z2[]\u662f\u6876 \n\nvector<int>endt[maxn << 1]; //\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u4ee5t[i]\u7ed3\u5c3e\u7684\u73a9\u5bb6 \nvector<int>slca[maxn << 1]; //\u8bb0\u5f55\u6bcf\u4e00\u4e2aLCA\u4e3alca\u7684\u73a9\u5bb6 \nvector<int>::iterator it;\n\nint f_;\nchar ch_;\ntemplate <class T>\n\tinline T read (T &x_){\n\t\tx_ = 0, f_ = 1, ch_ = getchar();\n\t\twhile (ch_ > '9' || ch_ < '0'){if (ch_ == '-') f_ = -1; ch_ = getchar();}\n\t\twhile (ch_ >= '0' && ch_ <= '9') x_ = (x_ << 3) + (x_ << 1) + ch_ - 48, ch_ = getchar();\n\t\treturn x_ *= f_;\n\t}\n\nstruct Edge{\n\tint u, v, nxt;\n\tEdge(int _u, int _v, int _nxt){\n\t\tthis -> u = _u;\n\t\tthis -> v = _v;\n\t\tthis -> nxt = _nxt;\n\t}Edge(){};\n}e[maxn << 1];\n\nvoid add (int u, int v){\n\te[++cnt] = Edge(u, v, head[u]);\n\thead[u] = cnt;\n}\n//------------------\u500d\u589eLCA----------------// \nvoid Dfs (int x, int f){\n\tdepth[x] = depth[f] + 1;\n\tfa[x][0] = f;\n\tfor (Re int i = 1;(1 << i) <= depth[x]; ++i) fa[x][i] = fa[fa[x][i-1]][i-1];\n\tfor (Re int i = head[x]; i;i = e[i].nxt){\n\t\tif (e[i].v == f) continue;\n\t\tDfs (e[i].v, x);\n\t}\n}\n\nint QLCA (int x, int y){\n\tif (depth[x] > depth[y]) swap(x, y);\n\tfor (Re int i = lgg;i >= 0; --i){\n\t\tif (depth[fa[y][i]] >= depth[x])\n\t\t\ty = fa[y][i];\n\t}\n\tif (x == y) return x;\n\tfor (Re int i = lgg;i >= 0; --i){\n\t\tif (fa[x][i] != fa[y][i]){\n\t\t\tx = fa[x][i];\n\t\t\ty = fa[y][i];\n\t\t}\n\t}\n\treturn fa[x][0];\n}\n//-------------------------------------------//\nvoid Dfss (int x, int f){\n\tint dis1 = z1[depth[x] + w[x]];\n\tint dis2 = z2[w[x] - depth[x] + maxn];//\u6570\u7ec4\u53ef\u80fd\u8d8a\u754c \n\tfor (Re int i = head[x]; i;i = e[i].nxt){\n\t\tif (e[i].v == f) continue;\n\t\tDfss (e[i].v, x);\n\t}\n\tz1[depth[x]] += in[x]; //\u5f53\u524d\u70b9\u4e3a\u8def\u5f84\u8d77\u70b9\uff0c\u4ea7\u751f\u8d21\u732e \n\tfor (it = endt[x].begin(); it != endt[x].end(); ++it){//\u5f53\u524d\u70b9\u4f4d\u8def\u5f84\u7ec8\u70b9\uff0c\u4ea7\u751f\t\u8d21\u732e \n\t\t++z2[dis[*it] - depth[t[*it]] + maxn];\n\t}\n\tans[x] += z1[depth[x] + w[x]] - dis1 + z2[w[x] - depth[x] + maxn] - dis2;\n\tfor (it = slca[x].begin(); it != slca[x].end(); ++it){//\u82e5\u5f53\u524d\u70b9\u4e3a\u73a9\u5bb6\u8d77\u70b9\u548c\u7ec8\u70b9\u7684lca\uff0c\u6d88\u9664s\u548ct\u7684\u8d21\u732e \n\t\t--z1[depth[s[*it]]];\n\t\t--z2[dis[*it] - depth[t[*it]] + maxn];\n\t}\n}\n//w[x] + depth[x] = depth[s] \u5411\u4e0a\u8d70  \n//w[x] - depth[x] = dis[s~t] - depth[t]; \u5411\u4e0b\u8d70 \n\nint main(){\n\tread(n); read(m);\n\twhile ((1 << lgg) < n) ++lgg;\n\tfor (Re int i = 1;i < n; ++i){\n\t\tread(u); read(v);\n\t\tadd (u, v);\n\t\tadd (v, u);\n\t}\n\tDfs (1, 1);\n\tfor (Re int i = 1;i <= n; ++i) read(w[i]);\n\tfor (Re int i = 1;i <= m; ++i){\n\t\tread(s[i]); read(t[i]);\n\t\tlca = QLCA(s[i], t[i]);\n\t\t++in[s[i]];\n\t\tdis[i] = depth[s[i]] + depth[t[i]] - (depth[lca] << 1);\n\t\tendt[t[i]].push_back(i);\n\t\tslca[lca].push_back(i);\n\t\tif (depth[lca] + w[lca] == depth[s[i]]) --ans[lca]; \n\t\t//\u8d77\u70b9\u6216\u7ec8\u70b9\u521a\u597d\u4e3aLCA\u4e14LCA\u5904\u662f\u53ef\u89c2\u5bdf\u5230\u73a9\u5bb6\u7684\uff0c\u5728\u4e0a\u884c\u7edf\u8ba1\u8fc7\u7a0b\u4e2d\u548c\u4e0b\u884c\u7edf\u8ba1\u8fc7\u7a0b\u4e2d\u90fd\u4f1a\u5bf9\u8be5LCA\u4ea7\u751f\u8d21\u732e\u4f1a\u91cd\u590d\u8ba1\u6570\u4e00\u6b21\n\t}\n\tDfss(1, 0);\n\tfor (Re int i = 1;i <= n; ++i) printf(\"%d \", ans[i]);\n\treturn 0;\n}\n```\n\u795d\u5927\u5bb6$CSP 2019$ \uff0c $RP++$\n\n\n",
        "postTime": 1572836278,
        "uid": 168317,
        "name": "Last_Reincarnation",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "## \u672c\u4eba\u975e\u5e38\u559c\u6b22\u6570\u636e\u7ed3\u6784\uff0c\u4e8e\u662f\u6b64\u9898\u4e00\u4e0b\u5c31\u80fd\u60f3\u51fa\u6765\u7528splay\u7684\u601d\u8def\n\n[\u9898\u76ee](https://www.luogu.org/problemnew/show/P1600)\n\n\u6b64\u9898\u5e94\u8be5\u8bf4\u5982\u679c\u4f60\u60f3\u5230\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u8bdd\u5c31\u548cAC\u6b64\u9898\u4e0d\u8fdc\u4e86\u5427\uff1f\uff08\u4f46\u662f\u6211\u76f4\u5230\u505a\u5230\u8fd9\u9898\u624d\u77e5\u9053\u6211~~\u4ee5\u524d\u5b66\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u662f\u5047\u7684~~\uff09\n\n\u5047\u5982\u6709\u4e2a\u4eba\u4ece$a$\u70b9\u5230$b$\u70b9\uff0c\u4ee4$lca$\u4e3ac\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5728$a$\u5230$c$\u52a0\u4e00\u4e2a\u521d\u59cb\u503c\u4e3a$0$\u7684\uff0c\u6bcf\u6b21\u5f80\u4e0a\u8d70\u5c31$+1$\u7684\u70b9\uff0c\u518d\u5728$fa[lca]$(\u4f60\u522b\u8bf4fa\u4f60\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48)\u6253\u4e2adel\u6807\u8bb0\uff0c\u5220\u9664$dep_a-dep_c+1$($dep:$\u6df1\u5ea6)\u7684\u4e00\u4e2a\u70b9\uff08$a$\u5411\u4e0a\u8df3\u5230$fa[lca]$\u5c31\u5220\u53bb\u7684\u610f\u601d\u5566,\u5c31\u4e0d\u4f1a\u5728\u4e0a\u9762\u7b97\u8d21\u732e\u4e86\uff09\u3002\u5728$b$\u52a0\u4e0a\u4e00\u4e2a\u5411\u4e0a\u8d70\u5c31$-1$\u7684\u70b9\uff08\u6ce8\u610f\u662f$-1$\uff09\uff0c\u521d\u59cb\u503c\u4e3a$dep_a+dep_b-2*dep_c+1$\u5c31\u662f$a$\u5230$b$\u7684\u8ddd\u79bb\uff0c\u518d\u5728$lca$\u5904\u6253\u4e2a$del$\u6807\u8bb0\uff0c\u5220\u53bb\u503c\u4e3a$dep_a-dep_c$\u7684\u4e00\u4e2a\u70b9(\u5c31\u662f\u5f53b\u8df3\u5230c\u662f\u6743\u503c\u53d8\u4e3a\u4e86$dep_a-dep_c$\uff0c\u8fd9\u662f\u8981\u5220\u53bb\uff0c\u5426\u5219$lca$\u5904\u4e00\u4e2a\u4eba\u4f1a\u88ab\u7b97\u4e24\u6b21\u8d21\u732e)\n\n\u4e0b\u9762\u9644\u4e0a\u56fe\u7247\u8bb2\u89e3\n\n![](https://cdn.luogu.com.cn/upload/pic/53316.png)\n\n\u90a3\u4e48\u5bf9\u4e8e\u591a\u4e2a\u4eba\uff0c\u4e5f\u53ef\u4ee5\u8fdb\u884c\u8fd9\u79cd\u64cd\u4f5c\uff0c\u81ea\u4e0b\u800c\u4e0adfs,\u5c06\u6240\u6709\u513f\u5b50\u7684splay\u5408\u5e76\u8d77\u6765\uff0c\u518d\u5c06\u5f53\u524d\u8282\u70b9\u8981\u52a0\u5165\uff0c\u5220\u9664\u7684\u70b9\u64cd\u4f5c\u5b8c\uff0c\u66f4\u65b0\u5f53\u524d\u70b9\u7684\u89c2\u5bdf\u5458\u7b54\u6848\u5373\u53ef\uff0c\u67e5\u8be2$w[x]$\u7684\u70b9\u6709\u51e0\u4e2a\u5c31\u597d\u4e86\n\n\u8fd9\u91cc\u4e00\u5b9a\u8981\u4f1a\u542f\u53d1\u5f0f\u5408\u5e76\uff01\uff01\uff08\u8bf7\u6ce8\u610f\uff0c\u5426\u5219\u4f1a\u50cf\u6211\u4e00\u6837T\u7684\u4e0d\u660e\u4e0d\u767d\uff09\n\n\u6ce8\u610f\u4e8b\u9879\uff1a\n\n1. \u4e0d\u7528fhq_treap\uff0c\u8fd9\u91ccsplay\u6bd4fhq_treap\u5feb3,4\u500d\uff08\u4eb2\u81ea\u6d4b\u8bd5\uff09\n\n1. \u76f8\u540c\u6743\u503c\u7684\u70b9\u6700\u597d\u4e0d\u8981\u5efa\u591a\u4e2a\u70b9\uff0c\u76f4\u63a5\u4e00\u4e2a\u70b9\u8bb0\u5f55\u8be5\u6743\u503c\u6709\u51e0\u4e2a\u4f1a\u5feb\u4e00\u4e9b\n\n1. \u57282\u7684\u524d\u63d0\u4e0b\uff0c\u66f4\u65b0$x$\u8282\u70b9\uff08\u6811\u4e0a\u7684\uff09\u7684siz\u65f6\u5c31\u4e0d\u80fd\u7b80\u5355\u7684$+\\sum siz_u$\u4e86\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u6ca1\u6709\u65b0\u5efa\u51fa\u8282\u70b9\u6765\uff08\u5982\u679c\u6b64\u65f6\u5f53\u505a\u6709\u7b97\u4e86\uff0c\u606d\u559c\u4f60\uff0c\u6162\u4e86\u597d\u591a\uff0c~~\u5176\u5b9e\u5c31200ms~~\uff09\n\n1. \u5220\u9664\u8282\u70b9\u540c\u7406\uff0c\u6ca1\u6709\u53bb\u6389\u70b9\u5c31\u4e0d\u80fd$siz[x]--$\n\n1. \u5173\u4e8e\u5b58\u6bcf\u4e2a\u70b9\u52a0\u90a3\u4e9b\u70b9\uff0c\u5220\u54ea\u4e9b\u70b9\uff0c\u53ef\u4ee5\u7528\u524d\u5411\u661f\u7684\uff0c\u4f1a\u6bd4vector\u5feb200\u591ams\uff08\u603b\u65f6\u95f4\uff09\n\n1. \u51fa\u9898\u4eba\u6bd2\u7624\uff01\u6bcf\u6b21Insert,del,\u4ea6\u6216\u8005\u662f\u67e5\u8be2$w[x]$\u90fd\u8981\u5c06\u8be5\u8282\u70b9splay\u5230\u6839\uff0c\u5426\u5219T\u5230\u98de\u8d77\uff08\u53ef\u4ee5\u8fc780\u5206\uff0c\u94fe\u7684\u6570\u636e\u8fc7\u4e0d\u4e86\uff09\n\n1. \u4e2d\u5e8f\u904d\u5386\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u9700\u8981\u6ce8\u610f\u6e05\u9664$x$\u7684\u5de6\u53f3\u513f\u5b50\u548c\u7236\u4eb2\n\n1. \u542f\u53d1\u5f0f\u5408\u5e76\u662f\u628a\u5c0f\u7684splay\u5408\u5230\u5927\u7684splay\u4e0a\uff08\u6ce8\u610f\u8fd9\u4e0d\u662f\u66b4\u529b\uff0c\u590d\u6742\u5ea6\u662f$mlogm$\u7684\uff0c\u975e\u542f\u53d1\u5f0f\u662f$mlog^2m$\u7684\uff09\n\n1. \u542f\u53d1\u5f0f\u5408\u5e76$swap(a,b)$\u56e0\u4e3a\u4ea4\u6362\u4e86\u4e24\u4e2a\u70b9\uff0c\u5982\u679c\u4ea4\u6362\u4e86\uff0c\u4ee4rt[b]=rt[a],siz[b]=siz[a]\u5c31\u597d\u4e86\uff0c\u5426\u5219RE(\u56e0\u4e3a\u6211\u4eec\u4e00\u5f00\u59cb\u8981\u5c06b\u5408\u5230a\uff0cswap\u540ea\u53d8b,b\u53d8a)\n\n1. pushdown\u4f4d\u7f6e\u6ce8\u610f\u4e0b\n\n1. \u6c42lca\u8981\u4e48tarjan\u7b97\u6cd5\u6c42\uff08\u4ec0\u4e48\u4f60\u8ba4\u4e3atarjan\u53ea\u662f\u7528\u6765\u7f29\u70b9\u7684\uff1f\u5176\u5b9etarjan\u662f\u4e2a~~\u81ea\u604b\u7684\u4eba\uff0c\u4ec0\u4e48\u7b97\u6cd5\u90fd\u559c\u6b22\u53ebtarjan\u7b97\u6cd5~~\uff0c\u6ed1\u7a3d\uff09\u8981\u4e48\u5199\u4e2a\u6811\u5256\u5427\uff08\u65e2\u7136\u8981\u7528\u6570\u636e\u7ed3\u6784\u521a\u5230\u5e95\uff0c\u8fd9\u7b97\u4ec0\u4e48\u5462\uff09\n\n1. \u8bf7\u6ce8\u610f **splay\u867d\u597d\uff0c\u53ef\u4e0d\u8981\u5e38\u7528\u54e6**\uff08\u5e38\u6570\u8fc7\u5927\uff0c\u6b64\u9898\u505a\u5feb\u624d1400ms\uff09\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\nusing namespace std;\ninline void read(int &x){x=0;char ch=getchar();while(!isdigit(ch))ch=getchar();while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}}\nconst int N=300010,M=N<<1;\nint dep[N],d[M],nxt[M],to[M],tot;\ninline void ins(int a,int b){to[++tot]=b;nxt[tot]=d[a];d[a]=tot;}\nstruct HDL{\n    int top[N],son[N],siz[N],fa[N];\n    inline void dfs_1(int x){\n        siz[x]=1;\n        for(int i=d[x];i;i=nxt[i]){\n            int u=to[i];\n            if(u==fa[x])continue;\n            fa[u]=x;dep[u]=dep[x]+1;\n            dfs_1(u);siz[x]+=siz[u];\n            if(siz[u]>siz[son[x]])son[x]=u;\n        }\n    }inline void dfs_2(int x){\n        if(!son[x])return;\n        top[son[x]]=top[x];\n        dfs_2(son[x]);\n        for(int i=d[x];i;i=nxt[i]){\n            int u=to[i];\n            if(u==son[x]||u==fa[x])continue;\n            top[u]=u;dfs_2(u);\n        }\n    }inline void init(){dep[1]=1;dfs_1(1);top[1]=1;dfs_2(1);}\n    inline int Lca(int x,int y){\n        int tx=top[x],ty=top[y];\n        while(tx!=ty){\n            if(dep[tx]>=dep[ty]){x=fa[tx];tx=top[x];}\n            else {y=fa[ty];ty=top[y];}\n        }return dep[x]<=dep[y]?x:y;\n    }\n}T;\nint head[N][2],v[M<<1],nt[M<<1],opt[M<<1],cnt;\ninline void insert(int a,int b,int c,int d){v[++cnt]=c;opt[cnt]=d;nt[cnt]=head[a][b];head[a][b]=cnt;}\nint st[N],L,R;\nstruct Splay{\n    int ch[N][2],fa[N],v[N],num[N],rt[N],tag[N],siz[N],cnt;\n    #define lc ch[x][0]\n    #define rc ch[x][1]\n    inline void pushr(int x,int va){v[x]+=va;tag[x]+=va;}\n    inline void pushdown(int x){if(tag[x]){pushr(lc,tag[x]);pushr(rc,tag[x]);tag[x]=0;}}\n    inline void push(int x){if(fa[x])push(fa[x]);pushdown(x);}\n    inline void rotate(int x){\n        int y=fa[x],z=fa[y],k=ch[y][1]==x;\n        ch[z][ch[z][1]==y]=x;fa[x]=z;\n        fa[ch[y][k]=ch[x][k^1]]=y;\n        ch[x][k^1]=y;fa[y]=x;\n    }inline void splay(int x,int goal){\n        int y,z;push(x);\n        while(fa[x]!=goal){\n            y=fa[x];z=fa[y];\n            if(z!=goal){(ch[y][1]==x)^(ch[z][1]==y)?rotate(x):rotate(y);}\n            rotate(x);\n        }\n    }inline void get_rt(int x,int y){splay(y,0);rt[x]=y;}\n    inline void Insert(int x,int y){//\u5c06y\u8282\u70b9\u63d2\u5165x splay\u4e2d\n        int now=rt[x];\n        if(!now){rt[x]=y;siz[x]++;return;}\n        int ff=0;\n        while(now){\n            ff=now;pushdown(now);\n            if(v[now]==v[y]){get_rt(x,now);num[now]+=num[y];return;}\n            now=ch[now][v[y]>=v[now]];\n        }siz[x]++;\n        fa[y]=ff;ch[ff][v[y]>=v[ff]]=y;get_rt(x,y);\n        return;\n    }inline void Del(int y,int x){\n        int k=0;\n        if(!lc&&!rc){rt[y]=0;return;}\n        else if(lc)k=0;\n        else k=1;\n        int p=ch[x][k];\n        while(ch[p][k^1])p=ch[p][k^1];\n        splay(p,x);ch[p][k^1]=ch[x][k^1];\n        fa[ch[x][k^1]]=p;fa[p]=0;rt[y]=p;\n    }\n    inline void del(int x,int va){\n        int now=rt[x];\n        while(now){\n            pushdown(now);\n            if(v[now]==va){get_rt(x,now);num[now]--;if(!num[now]){Del(x,now);siz[x]--;}return;}\n            now=ch[now][va>=v[now]];\n        }return;\n    }inline int get(int x,int va){\n        int now=rt[x];\n        while(now){\n            pushdown(now);\n            if(v[now]==va){get_rt(x,now);return num[now];};\n            now=ch[now][va>=v[now]];\n        }return 0;\n    }inline void modify(int x,int va){pushr(rt[x],va);}\n    inline int new_(int va){int p=++cnt;v[p]=va;num[p]=1;return p;}\n    inline void dfs(int x){if(!x)return;pushdown(x);dfs(lc);st[++R]=x;dfs(rc);lc=rc=fa[x]=0;}\n    inline void merge(int a,int b){\n    \tint p=a;\n     \tif(siz[a]<siz[b])swap(a,b);\n        L=1;R=0;dfs(rt[b]);\n        while(L<=R){\n            int x=st[L++];\n            Insert(a,x);\n        }if(p!=a){rt[b]=rt[a];siz[b]=siz[a];}\n    }\n}my[2];\nint n,m,w[N],ans[N];\nstruct query{int a,b;}P[N];\ninline void get_pre(){\n    T.init();\n    for(int i=1;i<=m;++i){\n        int lca=T.Lca(P[i].a,P[i].b),d1=dep[P[i].a]-dep[lca]+1,d2=dep[P[i].b]-dep[lca];\n        insert(P[i].a,0,0,1);insert(T.fa[lca],0,d1,-1);\n        if(lca!=P[i].b){insert(P[i].b,1,d1+d2-1,1);insert(lca,1,d1-1,-1);}\n    }\n}inline void dfs(int x){\n    for(int i=d[x];i;i=nxt[i]){\n        int u=to[i];\n        if(u==T.fa[x])continue;\n        dfs(u);\n        for(int j=0;j<2;++j){\n            my[j].modify(u,(j==0?1:-1));\n            my[j].merge(x,u);\n        }\n    }\n    for(int i=0;i<2;++i){\n        for(int j=head[x][i];j;j=nt[j]){\n            if(opt[j]==1){int p=my[i].new_(v[j]);my[i].Insert(x,p);}\n            else my[i].del(x,v[j]);\n        }\n    }\n    ans[x]=my[0].get(x,w[x])+my[1].get(x,w[x]);\n}\ninline void work(){dfs(1);for(int i=1;i<=n;++i)printf(\"%d \",ans[i]);}\nint main(){\n    read(n);read(m);int a,b;\n    for(int i=1;i<n;++i){read(a);read(b);ins(a,b);ins(b,a);}\n    for(int i=1;i<=n;++i)read(w[i]);\n    for(int i=1;i<=m;++i){read(P[i].a);read(P[i].b);}\n    get_pre();work();\n    return 0;\n}\n\n```\n",
        "postTime": 1551881531,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "------------\n\n~~\u4eca\u5e74\u662f\u4e0d\u662f\u8981\u5929\u5929\u8dd1\u6b65\u901b\u516c\u56ed\u6316\u5b9d\u85cf\u6392\u961f\u5217\u4e86....\u9003\uff9a(\uff9f\u2200\uff9f;)\uff8d=3=3=3~~\n\n------------\n\n\u5386\u65f6\u4e24\u5929\uff0c\u5728\u4e0b\u9762\u5404\u4f4d\u5de8\u4f6c\u795e\u7287\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u7ec8\u4e8e\u770b\u61c2\u4e86\u8fd9\u9053\u9898\u7684\u601d\u8def...\u65e2\u7136\u662f\u5728\u6d1b\u8c37\u4e0a\uff0c\u90a3\u5c31\u4e0d\u8bb2\u90e8\u5206\u5206\u601d\u8def\u4e86~~\u5176\u5b9e\u662f\u6211\u4e0d\u4f1a~~\u3002\u4e0b\u9762\u76f4\u5954\u4e3b\u9898\n\n### \u672c\u9898\u7684\u505a\u6cd5\u662f\u6839\u636e\u6811\u7684\u7279\u6027\uff1a\u5373\u8d77\u70b9\u4e0e\u7ec8\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u552f\u4e00\u4e14\u5fc5\u5b9a\u901a\u8fc7LCA\uff0c\u901a\u8fc7\u8ba1\u7b97\u76f4\u63a5\u7edf\u8ba1\u67d0\u70b9\u89c2\u5bdf\u5458\u89c2\u5bdf\u5230\u7684\u4eba\u6570\u3002\n\n1\u3001\u9996\u5148\u8981\u7406\u89e3\u600e\u4e48\u5c06\u4e00\u6761\u8def\u5f84(u, v)\uff08\u5373\u4e00\u4e2a\u4eba\u8dd1\u6b65\u7684\u8def\u7ebf\uff0c\u4e0b\u540c\uff09\u5206\u6210(u, lca(u, v))\u548c(lca(u, v), v)\u7684\u3002\u5bf9\u4e8e\u9898\u76ee\u6240\u7ed9\u7684\u65e0\u6839\u6811\uff0c\u6211\u4eec\u4e0d\u59a8\u5047\u5b9a1\u53f7\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/39967.png)\n\n2\u3001\u5bf9\u4e8e\u4ece\u4e0b\u5411\u4e0a\u7684\u8fb9(u, lca(u, v))\uff0c\u6211\u4eec\u53d1\u73b0\u5b83\u5bf9\u4e8e\u54ea\u4e2a\u89c2\u5bdf\u5458\u5177\u6709\u8d21\u732e\u662f\u6709\u89c4\u5f8b\u7684\uff1a\u5373\u5f53u\u5728watcher\u7684\u5b50\u6811\u4e2d\u4e14lca(u, v)\u4e0d\u5728watcher\u7684\u5b50\u6811\u4e2d\uff0cdepth[watcher] + time[watcher] = depth[begin]\u7684\u70b9\u5bf9\u4e8e\u8be5watcher\u6709\u8d21\u732e\u3002\u6d89\u53ca\u5230\u5b50\u6811\u53ca\u6c42\u548c\uff0c\u6211\u4eec\u4fbf\u60f3\u5230\u6811\u4e0a\u5dee\u5206~~\u8fd9\u8c01\u60f3\u5f97\u5230~~\u3002\n\n3\u3001\u5bf9\u4e8e\u6bcf\u4e2adepth\uff0c\u6211\u4eec\u5f00\u4e00\u4e2abucket\u5b58\u50a8\u5f53\u524d\u56de\u6eaf\u8fc7\u7684\u6df1\u5ea6\u4e3adepth\u7684begin\u7684\u4e2a\u6570\u3002dfs\u8bbf\u95ee\u5b50\u6811\uff0c\u56de\u6eaf\u65f6bucket[node.depth]\u52a0\u4e0a\u4ee5node\u4e3abegin\u7684\u8def\u5f84\u6761\u6570\uff0c\u5e76\u4f7fans[node] += bucket[depth[watcher] + time[watcher]]\uff0c\u5373\u7edf\u8ba1node\u7684\u5b50\u6811\u5411\u4e0a\u7684\u8fb9\u5bf9\u4e8enode\u7684\u8d21\u732e\u3002\u56e0\u4e3anode\u53ef\u80fd\u4f5c\u4e3a\u5176\u5b50\u6811begin\u7684lca\uff0c\u6240\u4ee5\u8981\u51cf\u53bb\u4ee5node\u4e3alca\u7684begin\u5bf9\u4e8ebucket\u7684\u8d21\u732e\u3002\u4e0b\u9762\u624b\u52a8\u6a21\u62df\u4e00\u4e0b~~233333~~\n\n![](https://cdn.luogu.com.cn/upload/pic/40156.png)\n\n\u4ece1\u53f7\u8282\u70b9\u5411\u53f3dfs\uff0c\u6ca1\u6709\u4ec0\u4e48\u64cd\u4f5c\uff1b\n\n\u4ece1\u53f7\u8282\u70b9\u5411\u5de6dfs\u81f33\u53f7\u8282\u70b9\uff0c\u56de\u6eaf2\u53f7\u8282\u70b9\uff0cbucket[depth[2]]\u52a0\u4e0a\u4ee52\u53f7\u8282\u70b9\u4e3a\u8d77\u70b9\u7684\u8def\u5f84\u6761\u6570\uff0c\u6b64\u65f6bucket[1] = 1;\n\n\u56de\u6eaf\u81f31\u53f7\u8282\u70b9\uff0c\u540c\u4e0a\u64cd\u4f5c\uff0c\u6b64\u65f6bucket[0] = 2;\n\n\u6b64\u65f6ans[1] += bucket[depth[1] + time[1]],\u5373\u7edf\u8ba11\u53f7\u8282\u70b9\u4e0a\u884c\u7b54\u6848\u3002\n\n\u6700\u540e1\u53f7\u8282\u70b9\u4f5c\u4e3a\u4e09\u6761\u8def\u5f84\u7684lca\uff0c\u64a4\u9500\u5bf9\u5e94\u7684bucket\u4e2d\u7684\u503c\uff08\u4ee3\u7801\u91cc\u6709\u5bf9\u5e94\u7684\u6ce8\u91ca\uff0c\u7528vector\u5b58\u4f5c\u4e3alca\u65f6\u7684\u8def\u5f84\u7f16\u53f7\uff09\n\n### \u6ce8\uff1a\u5176\u4ed6\u8282\u70b9\u4e0d\u662f\u4e0d\u66f4\u65b0ans\u548c\u64a4\u9500bucket\uff0c\u800c\u662f\u5bf9\u5e94\u7684bucket\u91cc\u7684\u503c\u4e3a0\uff0c\u6216\u8005\u4e0d\u662f\u8def\u5f84lca\uff1b\n\n\u81f3\u6b64\uff0c\u57fa\u672c\u601d\u8def\u5df2\u7ecf\u8bb2\u5b8c\uff0c\u4ece\u4e0a\u5411\u4e0b\u7684\u8fb9(lca(u, v), v)\u5982\u4f55\u7edf\u8ba1\u4ea4\u7ed9\u5927\u5bb6\u81ea\u5df1\u60f3~~\u5176\u5b9e\u662f\u61d2~~\u4e0d\u8fc7\u7ed9\u51fa\u5f0f\u5b50\uff1adepth[watcher] - time[watcher] = depth[end] - len[(u, v)]\uff1blen[(u, v)]\u8868\u793a\u8be5\u8def\u5f84\u957f\u5ea6\u3002\n\n### \u6ce8\uff1a\u8fd9\u91cc\u5176\u5b9e\u6709\u4e2a\u601d\u7ef4\u6f0f\u6d1e\uff0c\u5373\u8de8\u5b50\u6811\u7684bucket\u7edf\u8ba1\u4e5f\u88ab\u7b97\u5728\u5185\uff0c\u4ee3\u7801\u4e2d\u6709\u6ce8\u91ca\u8bb2\u89e3fix\uff0c\u7528\u4e0a\u56fe\u611f\u6027\u601d\u8003\u5373\u53ef\uff08~~\u95f2\u5f97\u614c~~\u60f3\u6df1\u5165\u7406\u89e3\u7684\u5de8\u4f6c\u53ef\u4ee5\u8bd5\u8bd5\u624b\u52a8\u63a8\u6c42\u5411\u4e0b\u8def\u5f84\u5148\u8bbf\u95ee\u5b8c\u53f3\u5b50\u6811\u540e\u5728\u5de6\u5b50\u68112\u53f7\u8282\u70b9\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u5982\u679c\u6ca1\u6709fix\u4f1a\u53d1\u751f\u4ec0\u4e48~~\u8fd9\u53e5\u8bdd\u7d2f\u6b7b\u4e86~~\uff09\n\u849f\u84bb\u4ee3\u7801\uff0c\u7801\u98ce\u5947\u7279\uff1a\uff08\u90e8\u5206\u7ed3\u6784\u4f53\u58f0\u660e\u7701\u7565\uff0c\u9700\u8981\u7684\u5de8\u4f6c\u53ef\u4ee5\u70b9\u8fdb\u535a\u5ba2\u770b...~~\u56e0\u4e3a\u5199\u5f97\u592a\u70c2\u4e86~~\uff09\n```\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nconst int MAXN = 300000 + 5;\n\nstruct Edge{\n    int to;\n    Edge* nxt;\n    Edge(int to = 0, Edge* nxt = NULL):\n        to(to), nxt(nxt){};\n};\n\nstruct Node{\n    Edge* first;\n};\n\nstruct Tree{\n    Node node[MAXN];\n    void connect(int x, int y){\n        node[x].first = new Edge(y, node[x].first);\n        node[y].first = new Edge(x, node[y].first);\n    }\n}tree;\n\nstruct Lca{\n    int lca[MAXN][20], depth[MAXN], father[MAXN];\n    Lca(){\n        memset(lca, 0, sizeof(lca));\n        memset(depth, 0, sizeof(depth));\n        memset(father, 0, sizeof(father));\n    }\n    void init(Tree& tree, int now){\n        for(Edge* i = tree.node[now].first; i != NULL; i = i -> nxt){\n            if(i -> to == father[now]) continue;\n            depth[i -> to] = depth[now] + 1;\n            lca[i -> to][0] = father[i -> to] = now;\n            for(int j = 1; j < 20; ++j) lca[i -> to][j] = lca[lca[i -> to][j - 1]][j - 1];\n            init(tree, i -> to);\n        }\n    }\n    int LCA(int x, int y){\n        if(depth[x] < depth[y]) swap(x, y);\n        int jump = depth[x] - depth[y], base = 0;\n        while(jump){\n            if(jump & 1) x = lca[x][base];\n            jump >>= 1;\n            ++base;\n        }\n        if(x == y) return x;\n        for(int i = 19; i >= 0; --i){\n            if(lca[x][i] != lca[y][i]){\n                x = lca[x][i];\n                y = lca[y][i];\n            }\n        }\n        return lca[x][0];\n    }\n}lca;\n\n//\u849f\u84bb\u7684\u8fa3\u9e21\u7ed3\u6784\u4f53\uff0c\u671b\u8f7b\u55b7233\n\nstruct Peo{//\u8def\u5f84\n    int begin, end, len, anc;\n    Peo(int begin = 0, int end = 0, int len = 0, int anc = 0):\n        begin(begin), end(end), len(len), anc(anc){};\n}people[MAXN];\n\nint buc[MAXN << 1], *bucket = &buc[MAXN];//\u795e\u5947\u64cd\u4f5c\uff0c\u8d1f\u6570\u4e0b\u6807\u6570\u7ec4\uff0c\u8be6\u89c1\u6d1b\u8c37\u65e5\u62a5\nint watcher[MAXN], bg[MAXN], ans[MAXN];//bg[i]\u5b58\u50a8\u4ee5i\u4e3abegin\u7684\u8def\u5f84\u6761\u6570\nvector<int> L[MAXN], E[MAXN];//L[i]\u5b58\u50a8\u4ee5i\u4e3alca\u7684\u8def\u5f84\u7f16\u53f7\uff1bE\u5b58\u50a8\u4ee5i\u4e3aend\u7684\u8def\u5f84\u7f16\u53f7\n\nvoid dfs1(Tree& tree, int now){//\u5411\u4e0a\u8def\u5f84\u7edf\u8ba1\n    int fix = bucket[lca.depth[now] + watcher[now]];//\u4fee\u6b63\u8de8\u5b50\u6811\u7edf\u8ba1\uff0c\u5373\u4e0b\u9762\u7edf\u8ba1\u7684\u7684bucket\u5bf9\u4e8enode\u7684\u8d21\u732e\u786e\u5b9e\u662fnode\u5b50\u6811\u7684\uff0c\u800c\u4e0d\u662fnode\u7684\u5144\u5f1f\u6216\u8005\u7956\u5148\u4eb2\u621a\u7684\u3002\n    for(Edge* i = tree.node[now].first; i != NULL; i = i -> nxt){\n        if(i -> to == lca.father[now]) continue;\n        dfs1(tree, i -> to);\n    }\n    bucket[lca.depth[now]] += bg[now];\n    ans[now] += bucket[lca.depth[now] + watcher[now]] - fix;\n    for(int i = 0; i < L[now].size(); ++i)\n        --bucket[lca.depth[people[L[now][i]].begin]];\n}\n\nvoid dfs2(Tree& tree, int now){//\u5411\u4e0b\u8def\u5f84\u7edf\u8ba1\n    int fix = bucket[lca.depth[now] - watcher[now]];//\u540c\u4e0a\uff0c\u5efa\u8bae\u5148\u5411\u53f3dfs\u624b\u63a82\u53f7\u8282\u70b9\u4ee5\u7406\u89e3\n    for(Edge* i = tree.node[now].first; i != NULL; i = i -> nxt){\n        if(i -> to == lca.father[now]) continue;\n        dfs2(tree, i -> to);\n    }\n    for(int i = 0; i < E[now].size(); ++i)\n    \t++bucket[lca.depth[people[E[now][i]].end] - people[E[now][i]].len];//\u6682\u672a\u53d1\u73b0\u6709\u66f4\u597d\u7684\u7edf\u8ba1\u4e0b\u884c\u8def\u7ebfbucket\u7684\u65b9\u6cd5\uff0c\u5982\u6709\u5efa\u8bae\uff0c\u6b22\u8fce\u79c1\u4fe123333\n    ans[now] += bucket[lca.depth[now] - watcher[now]] - fix;\n    for(int i = 0; i < L[now].size(); ++i)\n        --bucket[lca.depth[people[L[now][i]].end] - people[L[now][i]].len];\n}\n\nint main(){\n    memset(bg, 0, sizeof(bg));\n    memset(ans, 0, sizeof(ans));\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1; i < n; ++i){\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        tree.connect(u, v);\n    }\n    lca.init(tree, 1);//lca\u521d\u59cb\u5316\n    for(int i = 1; i <= n; ++i)\n        scanf(\"%d\", &watcher[i]);\n    for(int i = 1; i <= m; ++i){\n        int begin, end, lc;\n        scanf(\"%d%d\", &begin, &end);\n        lc = lca.LCA(begin, end);\n        people[i] = Peo(begin, end, lca.depth[begin] + lca.depth[end] - 2 * lca.depth[lc], lc);\n        L[lc].push_back(i);\n        E[end].push_back(i);\n        ++bg[begin];\n    }\n    dfs1(tree, 1);\n    dfs2(tree, 1);\n    for(int i = 1; i <= m; ++i)//\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u67d0\u6761\u8def\u5f84\u7684lca\uff0c\u90a3\u4e48\u4e0a\u884c\u8def\u7ebf\u548c\u4e0b\u884c\u8def\u7ebf\u65f6\u91cd\u590d\u7edf\u8ba1\u4e86\uff0c\u64a4\u9500\n    \tif(lca.depth[people[i].anc] + watcher[people[i].anc] == lca.depth[people[i].begin])\n            --ans[people[i].anc];\n    for(int i = 1; i <= n; ++i) printf(\"%d \", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1540571823,
        "uid": 10337,
        "name": "ZPC2048",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u5199\u4e862\u4e2a\u591a\u5c0f\u65f6\uff0c\u7ec8\u4e8eA\u4e86\n\n\u8fd9\u9898\u6709100000000+\u79cd\u505a\u6cd5\uff0c\u4e0d\u8fc7\u6211\u80fd\u60f3\u5230\u7684\u8fd8\u662f\u6811\u4e0a\u5dee\u5206\u6700\u7b80\u4fbf\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u73a9\u5bb6\uff0c\u8bb0u\u4e3a\u8d77\u70b9\uff0cv\u4e3a\u7ec8\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fata\u8d77\u70b9\u4e0e\u7ec8\u70b9\u7684lca\uff0c\u7136\u540e\u5c06\u8def\u5f84\u62c6\u6210\u4e24\u90e8\u5206\uff0c\u5206\u522b\u4e3au->lca lca->v(\u6ce8\u610f\u6b64\u5904lca\u4e0d\u80fd\u7edf\u8ba1\u4e24\u6b21)\u3002\n\n\u5bf9\u4e8e\u8d77\u70b9\u5230lca\u5904\u7684\u6bcf\u4e00\u4e2a\u89c2\u5bdf\u5458\uff0c\u80fd\u89c2\u5bdf\u5230\u7684\u6761\u4ef6\u662f:\n\ndep[u]-dep[i]=w[i] (dep\u4e3a\u6df1\u5ea6)\n\n\u5373\n\ndep[u]=dep[i]+w[i]\n\n\u5bf9\u4e8elca\u5230\u7ec8\u70b9\u7684\uff0c\u6761\u4ef6\u4e3a:\n\n(dep[u]+dep[v]-dep[lca(u,v)]*2)-(dep[v]-dep[i])=w[i]\n\n\u6574\u7406\u4e00\u4e0b\n\ndep[u]-dep[lca(u,v)]*2=w[i]-dep[i]\n\n\u6ce8\u610f\u5230\u7b49\u5f0f\u5de6\u8fb9\u6bcf\u4e2a\u91cf\u5bf9\u4e8e\u6bcf\u4e2a\u73a9\u5bb6\u662f\u56fa\u5b9a\u7684\uff0c\u7b49\u5f0f\u53f3\u5bf9\u4e8e\u89c2\u5bdf\u5458\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a\u73a9\u5bb6\u4e0e\u6bcf\u4e2a\u89c2\u5bdf\u5458\u7684\u8fd9\u4e2a\u503c\uff0c\u9898\u76ee\u5c31\u8f6c\u5316\u4e3a\u5bf9\u4e8e\u6811\u4e0a\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6709\u591a\u6761\u8def\u5f84\uff0c\u6c42\u4e2a\u70b9\u88ab\u591a\u5c11\u6743\u503c\u4e3ax\u7684\u8def\u5f84\u8986\u76d6\n\n\u505a\u5230\u8fd9\u5e94\u8be5\u5c31\u6bd4\u8f83\u597d\u89e3\u51b3\u4e86\u3002dalao\u4eec\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\uff0c\u7ebf\u6bb5\u6811\uff0cLCT\uff0c\u8fd8\u6709\u7b49\u7b49\u672c\u849f\u84bb\u90fd\u6ca1\u542c\u8bf4\u8fc7\u7684\u7b97\u6cd5\u3002\n\n\u6211\u5728\u8fd9\u513f\u7528\u7684\u662f\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5177\u4f53\u662f\u6c42\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684f[i]\uff0c\u8868\u793a\u6709\u591a\u5c11\u6743\u503c\u4e3ai\u7684\u8def\u5f84\u901a\u8fc7\u6b64\u8282\u70b9\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u7684f\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u5176\u6700\u5927\u7684\u5b50\u6811\u4e3a\u4e3b\u4f53\uff0c\u5176\u4ed6\u7684\u6811\u7684f\u503c\u5168\u90e8\u52a0\u8fc7\u6765\uff0c\u8fd9\u6837\u6700\u540e\u7684f\u6570\u7ec4\u5c31\u662f\u8be5\u8282\u70b9\u7684f\u6570\u7ec4\u8fa3\uff01\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u4e2a\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u8d85\u8fc7O(nlogn)\n\n\u6240\u4ee5\u590d\u6742\u5ea6\u5c31\u662fO(nlogn)\u5566\u3002\n\nCode:\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nconst int N=300005;\nint n,i,j,s,m,u,v,k,head[N],Next[N*2],adj[N*2],qhead[N],qNext[N*2],qadj[N*2],num[N*2],w[N],qu[N],qv[N],lca[N],vis[N],siz[N],son[N],dep[N];\nint f[N*5],dhead[N],dNext[N*2],dadj[N*2],add[N],ans[N];\nvoid Push(int u,int v)\n{\n\tNext[++k]=head[u];\n\thead[u]=k;\n\tadj[k]=v;\n}\nvoid qPush(int u,int v,int w)\n{\n\tqNext[++k]=qhead[u];\n\tqhead[u]=k;\n\tqadj[k]=v;\n\tnum[k]=w;\n}\nvoid dPush(int u,int v)\n{\n\tdNext[++k]=dhead[u];\n\tdhead[u]=k;\n\tdadj[k]=v;\n}\nint Find(int u)\n{\n\tif(f[u]==0)\n\t\treturn u;\n\treturn f[u]=Find(f[u]);\n}\nvoid uniot(int u,int v)\n{\n\tint x=Find(u),y=Find(v);\n\tif(x!=y)\n\t\tf[x]=y;\n}\nvoid tarjan(int i)\n{\n\tint j;\n\tvis[i]=1;\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(vis[adj[j]]==0)\n\t\t{\n\t\t\ttarjan(adj[j]);\n\t\t\tuniot(adj[j],i);\n\t\t}\n\tfor(j=qhead[i];j!=0;j=qNext[j])\n\t\tif(vis[qadj[j]]==1)\n\t\t\tlca[num[j]]=Find(qadj[j]);\n}\nvoid dfs(int i,int fa)\n{\n\tint j,mx=0;\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(adj[j]!=fa)\n\t\t{\n\t\t\tdep[adj[j]]=dep[i]+1;\n\t\t\tdfs(adj[j],i);\n\t\t\tif(siz[adj[j]]>siz[mx])\n\t\t\t\tmx=adj[j];\n\t\t\tsiz[i]+=siz[adj[j]];\n\t\t}\n\tson[i]=mx;\n}\nvoid dele1(int i,int fa)\n{\n\tint j;\n\tf[dep[i]]=0;\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(adj[j]!=fa)\n\t\t\tdele1(adj[j],i);\n}\nvoid tot1(int i,int fa)\n{\n\tint j;\n\tf[dep[i]]+=add[i];\n\tfor(j=dhead[i];j!=0;j=dNext[j])\n\t\tf[dadj[j]]--;\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(adj[j]!=fa)\n\t\t\ttot1(adj[j],i);\n}\nvoid dfs1(int i,int fa)\n{\n\tint j;\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(adj[j]!=fa&&adj[j]!=son[i])\n\t\t{\n\t\t\tdfs1(adj[j],i);\n\t\t\tdele1(adj[j],i);\n\t\t}\n\tif(son[i]!=0)\n\t\tdfs1(son[i],i);\n\tf[dep[i]]+=add[i];\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(adj[j]!=fa&&adj[j]!=son[i])\n\t\t\ttot1(adj[j],i);\n\tans[i]+=f[dep[i]+w[i]];\n\tfor(j=dhead[i];j!=0;j=dNext[j])\n\t\tf[dadj[j]]--;\n}\nvoid dele2(int i,int fa)\n{\n\tint j;\n\tfor(j=qhead[i];j!=0;j=qNext[j])\n\t\tf[qadj[j]+N*2]=0;\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(adj[j]!=fa)\n\t\t\tdele2(adj[j],i);\n}\nvoid tot2(int i,int fa)\n{\n\tint j;\n\tfor(j=qhead[i];j!=0;j=qNext[j])\n\t\tf[qadj[j]+N*2]++;\n\tfor(j=dhead[i];j!=0;j=dNext[j])\n\t\tf[dadj[j]+N*2]--;\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(adj[j]!=fa)\n\t\t\ttot2(adj[j],i);\n}\nvoid dfs2(int i,int fa)\n{\n\tint j;\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(adj[j]!=fa&&adj[j]!=son[i])\n\t\t{\n\t\t\tdfs2(adj[j],i);\n\t\t\tdele2(adj[j],i);\n\t\t}\n\tif(son[i]!=0)\n\t\tdfs2(son[i],i);\n\tfor(j=head[i];j!=0;j=Next[j])\n\t\tif(adj[j]!=fa&&adj[j]!=son[i])\n\t\t\ttot2(adj[j],i);\n\tfor(j=qhead[i];j!=0;j=qNext[j])\n\t\tf[qadj[j]+N*2]++;\n\tfor(j=dhead[i];j!=0;j=dNext[j])\n\t\tf[dadj[j]+N*2]--;\n\tans[i]+=f[w[i]-dep[i]+N*2];\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tfor(i=1;i<n;i++)\n\t{\n\t\tscanf(\"%d %d\",&u,&v);\n\t\tPush(u,v);\n\t\tPush(v,u);\n\t}\n\tfor(i=1;i<=n;i++)\n\t\tscanf(\"%d\",&w[i]);\n\tk=0;\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d %d\",&qu[i],&qv[i]);\n\t\tadd[qu[i]]++;\n\t\tqPush(qu[i],qv[i],i);\n\t\tqPush(qv[i],qu[i],i);\n\t}\n\ttarjan(1);\n\tmemset(f,0,sizeof(f));\n\tfor(i=1;i<=n;i++)\n\t\tsiz[i]=1;\n\tk=0;\n\tfor(i=1;i<=m;i++)\n\t\tsiz[lca[i]]++;\n\tdfs(1,0);\n\tfor(i=1;i<=m;i++)\n\t\tdPush(lca[i],dep[qu[i]]);\n\tdfs1(1,0);\n\tmemset(qhead,0,sizeof(qhead));\n\tmemset(dhead,0,sizeof(dhead));\n\tk=0;\n\tfor(i=1;i<=m;i++)\n\t\tqPush(qv[i],dep[qu[i]]-2*dep[lca[i]],0);\n\tk=0;\n\tfor(i=1;i<=m;i++)\n\t\tdPush(lca[i],dep[qu[i]]-2*dep[lca[i]]);\n\tfor(i=1;i<=n;i++)\n\t\tsiz[i]=1;\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tsiz[qv[i]]++;\n\t\tsiz[lca[i]]++;\n\t}\n\tmemset(f,0,sizeof(f));\n\tdfs(1,0);\n\tdfs2(1,0);\n\tfor(i=1;i<=n;i++)\n\t\tprintf(\"%d \",ans[i]);\n}\n\n```",
        "postTime": 1538465713,
        "uid": 26800,
        "name": "Sshenyyyu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "### dalao\u540c\u684c\u544a\u8bc9\u6211\u8fd9\u9898\u8981\u63a8 \u67ff\u5b50\uff01\n\n\u5176\u5b9e\u5c31\u662f\u8ba1\u7b97\u7b54\u6848\u7684\u65b9\u6cd5\n\n\u4e00\u4e00\u53f7\u70b9\u4e3a\u6839\uff0c\u9996\u5148\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u662f\uff1a$s->t$\u5b83\u7684$dis$\u4e3a\n\n$dep[s]+dep[t]-2*dep[LCA]$\n\n\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848$ans[i]$\u662f\u7b2c$i$\u4e2a\u89c2\u5bdf\u5458\u6240\u80fd\u770b\u5230\u7684\u4eba\u6570\n\n\u4ed6\u80fd\u89c2\u5bdf\u5230\u5f53\u4e14\u4ec5\u5f53$dis[i]==w[i]-dep[i]+dep[t]$\n\n\u6bd4\u5982\uff1a![](https://cdn.luogu.com.cn/upload/image_hosting/im7qc9mk.png)\n\n$s$\u4e3a4\uff0c$t$\u4e3a6\uff0c$w[i]$\u4e3a5\n\n\u53ea\u6709\u5f53\u8fd9\u4e2a\u4eba\u5728time = 3\u7684\u65f6\u5019\u624d\u80fd\u88ab\u89c2\u5bdf\u5230\uff0c\u800ctime\u7684\u8ba1\u7b97\u65b9\u6cd5\n\n\u4fbf\u662f\u4e0a\u8ff0\uff08\u53ef\u4ee5\u518d\u624b\u52a8\u5f0f\u51e0\u4e2a\uff09\n\n\u7279\u6b8a\u7684\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u8d77\u70b9\uff08$w[i]==0$\u7684\u65f6\u5019\uff09\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u89c2\u5bdf\u5458\uff0c\u6211\u4eec\u8ba1\u7b97\u6709\u591a\u5c11\n\n\u4eba\u4ece\u4ed6\u8fd9\u91cc\u7ecf\u8fc7\uff0c\u5982\u679c\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5bf9\u7b54\u6848\u9020\u6210\u8d21\u732e\u4e86\n\n\u56e0\u6b64\u6211\u4eec\u5f00\u4e24\u4e2a\u6876\u8bb0\u5f55\u4e00\u4e0b\u4ece$s->LCA$ \u4ee5\u53ca\u4ece $t->LCA$\u7684\u503c\n\n\u4e3a\u4ec0\u4e48\u5f00\u4e24\u4e2a\u6876\uff0c~~\u5f88\u663e\u7136\u5427\uff0c\u56e0\u4e3a\u5f00\u4e00\u4e2a\u80af\u5b9a\u4f1a\u6302~~\n\n\u671f\u95f4\u4f1a\u6709\u7b97\u91cd\u590d\u7684\u9700\u8981\u6211\u4eec\u51cf\u6389\uff0c\u53ef\u4ee5\u5f00\u4e24\u4e2avector\uff0c\u8bb0\u5f55\n\nLCA \u4e0e $t[i]$ \u7684\u8def\u5f84\u5177\u4f53\u64cd\u4f5c\u8bf7\u770b\u4ee3\u7801\uff0c\u8fd8\u6709\u4e00\u70b9\n\n$w[i]-dep[i]$\u53ef\u80fd\u4f1a\u51fa\u8d1f\u6570\uff0c\u6211\u4eec\u9700\u8981\u52a0\u4e0a$n$\uff08\u56e0\u4e3a\u5b83\u662f\u4e0b\u6807\uff09\n\n\u6c42LCA\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u7528\u4e86\u6811\u5256\uff0c\u5982\u679c\u4e0d\u559c\u6b22\u7684\u8bdd\u53ef\u4ee5\u770b\u770b\n\ndalao [Treaker](https://www.luogu.org/blog/Treaker/) \u7684\u9898\u89e3\uff0c\u4ed6\u8bb2\u7684\u5f88\u6e05\u695a\uff0c\u5e76\u4e14\u7528\u7684\u662f\u500d\u589e\n\n\u6700\u540e\u662f\u4ee3\u7801\u65f6\u95f4\uff1a\n\n## code\n```cpp\n#include<bits/stdc++.h>\n#define R register\n\nusing namespace std;\nconst int N = 3e5+5;\nint n,m,head[N],cnt;\nint fa[N],son[N],dep[N],top[N],size[N],ton[N],bst[N<<1];\nint ans[N],dis[N],sta[N],s[N],t[N],w[N];\nstruct saber {\n\tint nxt,to;\n}rin[N<<1];\nvector<int> path[N],last[N];\n\ninline int read() {\n\tint x = 0,f = 1;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9') { if(c == '-') f = -1;c = getchar(); }\n\twhile(c >= '0' && c <= '9') { x = x * 10 + c - '0';c = getchar(); }\n\treturn x * f;\n}\n\ninline void add(int from,int to) {\n\trin[++cnt].to = to;\n\trin[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\n//--------\u6811\u5256\u6c42LCA---------//\nvoid dfs1(int now,int f) {\n\tsize[now] = 1;\n\tfa[now] = f;\n\tdep[now] = dep[f] + 1;\n\tfor(R int i = head[now]; i ;i = rin[i].nxt) {\n\t\tR int vc = rin[i].to;\n\t\tif(vc == f) continue;\n\t\tdfs1(vc,now);\n\t\tsize[now] += size[vc];\n\t\tif(size[vc] > size[son[now]]) son[now] = vc;\n\t}\n}\n\nvoid dfs2(int now,int tp) {\n\ttop[now] = tp;\n\tif(son[now]) dfs2(son[now],tp);\n\tfor(R int i = head[now]; i ;i = rin[i].nxt) {\n\t\tint vc = rin[i].to;\n\t\tif(vc == fa[now] || vc == son[now]) continue;\n\t\tdfs2(vc,vc);\n\t}\n}\n\ninline int LCA(int x,int y) {\n\tif(x == y) return x;\n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x,y);\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y]) swap(x,y);\n\treturn x;\n}\n//----------------------//\n\nvoid get_ans(int x) {\n\tR int pre1 = ton[dep[x] + w[x]];\n\tR int pre2 = bst[w[x] - dep[x] + n];\n\tfor(R int i = head[x]; i ;i = rin[i].nxt) {\n\t\tR int vc = rin[i].to;\n\t\tif(vc == fa[x]) continue;\n\t\tget_ans(vc);\n\t}\n\tton[dep[x]] += sta[x];\n\tfor(R int i = 0;i < path[x].size();++ i) {\n\t\tint vc = path[x][i];\n\t\tbst[dis[vc]] ++; \n\t}\n\tfor(R int i = 0;i < last[x].size();++ i) {\n\t\tR int vc = last[x][i];\n\t\tton[dep[s[vc]]] --;\n\t}\n\tans[x] += ton[dep[x] + w[x]] - pre1 + bst[w[x] - dep[x] + n] - pre2;\n\tfor(R int i = 0;i < last[x].size();++ i) {\n\t\tR int vc = last[x][i];\n\t\tbst[dis[vc]] --;\n\t}\n}\n\nint main() {\n\tn = read(),m = read();\n\tfor(R int i = 1,u,v;i < n;++ i) {\n\t\tu = read(),v = read();\n\t\tadd(u,v),add(v,u);\n\t}\n\tdfs1(1,0),dfs2(1,1);\n\tfor(R int i = 1;i <= n;++ i) w[i] = read();\n\tfor(R int i = 1;i <= m;++ i) {\n\t\ts[i] = read(),t[i] = read();\n\t\tR int x = LCA(s[i],t[i]);\n\t\tdis[i] = dep[s[i]] + n - 2 * dep[x];\n\t\tsta[s[i]] ++;\n\t\tpath[t[i]].push_back(i);\n\t\tlast[x].push_back(i);\n\t}\n\tget_ans(1);\n\tfor(R int i = 1;i <= n;++ i) printf(\"%d \",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1568721435,
        "uid": 160654,
        "name": "\u707c\u773c\u7684\u590f\u5a1c",
        "ccfLevel": 4,
        "title": "P1600 \u5929\u5929\u7231\u8dd1\u6b65"
    },
    {
        "content": "## \u8c28\u4ee5\u6b64\u9898\u89e3\u7eaa\u5ff5NOIP\u53f2\u4e0a\u6700\u6bd2\u7624\u7684\u9898\n### \u5148\u8bf4\u4e00\u4e0b\u601d\u8def\u5427\n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u8003\u8651\u7ec8\u70b9\u548c\u8d77\u70b9\u7684\u8bdd\uff0c\u9700\u8981\u628a\u8fd9\u6761\u8def\u5f84\u904d\u5386\uff0c\u6700\u4f18\u60c5\u51b5\u4e0b\u662f$O(nlogn)$\u7684\uff0c\u4f46\u9898\u76ee\u660e\u786e\u4f1a\u51fa\u73b0\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u5c31\u662f$O(n^2)$\u7684\u4e86\u3002\n\n\u8f6c\u6362\u4e00\u4e0b\u601d\u60f3\uff0c\u53d1\u73b0\u8def\u5f84\u5206\u6210\u4e86\u4e24\u6bb5\uff0c\u4e00\u6bb5\u662f\u5411\u4e0a\u8d70\uff0c\u4e00\u6bb5\u662f\u5411\u4e0b\u8d70\uff0c\u6211\u4eec\u8003\u8651\u6bcf\u4e2a\u89c2\u5bdf\u5458\u7684\u89c2\u5bdf\u7279\u70b9\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u6709\u4e24\u4e2a\u7279\u70b9\uff1b\n\n1.\u5f53\u89c2\u5bdf\u5458\u5728\u8d77\u70b9\u5230LCA\u7684\u8def\u5f84\u4e0a\u65f6\uff0c\u89c2\u5bdf\u5458x\u80fd\u89c2\u5bdf\u5230\u7684\u4eba\uff0c\u5f53\u4e14\u4ec5\u5f53$dep[x] + w[x] = dep[s]$\u65f6\n\n2.\u5f53\u89c2\u5bdf\u5458\u5728LCA\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u4e0a\u65f6\uff0c\u80fd\u89c2\u5bdf\u5230\u7684\u4eba\uff0c\u5f53\u4e14\u4ec5\u5f53$dis - dep[t] = w[x] - dep[x]$ \u65f6\u3002\n\n\u6709\u4e86\u8fd9\u4e24\u4e2a\u5f0f\u5b50\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u4e86\u3002\n\u5bf9\u4e8e\u4e24\u79cd\u60c5\u51b5\uff0c\u5206\u522b\u7ef4\u62a4\u4e00\u4e2a\u6876\u3002\n\n\u4e00\u4e2a\u4e8b\u5b9e\u662f\uff0c\u70b9x\u7684\u8d21\u732e\u4e00\u5b9a\u662f\u4e00\u6761\u5728\u7ecf\u8fc7x\u7684\u8def\u5f84\u6240\u5e26\u6765\u7684\u7684\uff08\u89c2\u5bdf\u4e00\u4e0b\uff0c\u601d\u8003\u4e00\u4e0b\uff09\u3002\n\n\u6240\u4ee5\u5728\u8ba1\u7b97\u65f6\uff0c\u6211\u4eec\u8981\u5148\u628a\u9012\u5f52\u5230\u8fd9\u5c42\u4e4b\u524d\u7684\u6876\u91cc\u539f\u6765\u7684\u503c\u8bb0\u5f55\u4e0b\u6765\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u662f\u4e0d\u80fd\u7b97\u5230x\u7684\u8d21\u732e\u91cc\u7684\uff0c\u8981\u7528\u540e\u9762\u7684\u51cf\u53bb\u539f\u6765\u7684\u3002\n\n\u8fd8\u6709\uff0cx\u7684\u8d21\u732e\u662f\u4e0d\u5305\u542b\u5728p\u5b50\u6811\u5185\u7684\u8def\u5f84\u7684\uff08\u8fd9\u4e9b\u8d21\u732e\u4e0d\u80fd\u7b97\u4e0a\uff09\uff0c\u6240\u4ee5\u5728\u5904\u7406\u5b8c\u4e00\u4e2a\u8282\u70b9\u540e\uff0c\u6211\u4eec\u8981\u628a\u4ee5\u8fd9\u4e2a\u70b9\u4e3aLCA\u7684\u8def\u5f84\u5728\u6876\u91cc\u7684\u8d21\u732e\u51cf\u53bb\u3002\n\n\u8fd8\u6709\u4e00\u70b9\uff1a\u5c31\u662f\u5f53\u8d77\u70b9\u6216\u7ec8\u70b9\u5c31\u662fLCA\u65f6\uff0c\u6211\u4eec\u4f1a\u5728\u4e0a\u884c\u8def\u548c\u4e0b\u884c\u8def\u90fd\u4f1a\u8ba1\u7b97\uff08\u91cd\u590d\u4e86\uff09\uff0c\u8981\u51cf\u53bb\u4e00\u4e2a\u3002\u4e5f\u5c31\u662f\u5012\u6570\u7b2c6\u884c\u7684if\u8bed\u53e5\u3002\n\u4ee3\u7801\u5982\u4e0b\uff1a\uff08\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\uff09\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\nusing namespace std;\nconst int N = 300000;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nvector<int> path[N] , lcafa[N];\nint n , m;\nint w[N] , s[N] , t[N] , dis[N] , num[N] , dep[N] , fa[N][22] , tong[N] , bact[N << 1] , ans[N];\nstruct Edge\n{\n\tint to; Edge *nxt;\n\tEdge(int to = 0,Edge *nxt = NULL) : to(to) , nxt(nxt) {}\n}*head[N];\ninline void add(int from,int to) {head[from] = new Edge(to,head[from]);}\nvoid get_tree(int now)\n{\n\tfor(int i = 1;(1 << i) <= dep[now];i ++)\tfa[now][i] = fa[fa[now][i-1]][i-1];\n\tfor(Edge *i = head[now];i;i = i -> nxt)\n\t{\n\t\tint to = i -> to;\n\t\tif(dep[to] || to == 1)\tcontinue;\n\t\tdep[to] = dep[now] + 1;\n\t\tfa[to][0] = now;\n\t\tget_tree(to);\n\t}\n}\ninline int LCA(int x,int y)\n{\n\tif(dep[x] < dep[y])\tswap(x,y);\n\tfor(int i = 20;i >= 0;i --)\tif(dep[fa[x][i]] >= dep[y])\tx = fa[x][i];\n\tif(x == y)\treturn x;\n\tfor(int i = 20;i >= 0;i --)\n\t{\n\t\tif(fa[x][i] == fa[y][i])\tcontinue;\n\t\tx = fa[x][i]; y = fa[y][i];\n\t}\n\treturn fa[x][0];\n}\nvoid dfs(int now)\n{\n\tint l = tong[dep[now] + w[now]] , r = bact[w[now] - dep[now] + N];\n\tfor(Edge *i = head[now];i;i = i -> nxt)\n\t{\n\t\tint to = i -> to;\n\t\tif(to != fa[now][0]) dfs(to);\n\t}\n\ttong[dep[now]] += num[now];\n\tfor(int i = 0;i < path[now].size();i ++)\t\n\t{\n\t\tint to = path[now][i];\n\t\tbact[dis[to] - dep[t[to]] + N] ++;\n\t}\n\tans[now] += tong[dep[now] + w[now]] - l + bact[w[now] - dep[now] + N] - r;\n\tfor(int i = 0;i < lcafa[now].size();i ++)\n\t{\n\t\tint to = lcafa[now][i];\n\t\ttong[dep[s[to]]] --;\n\t\tbact[dis[to] - dep[t[to]] + N] --;\n\t}\n}\nint main()\n{\n\tn = read(); m = read();\n\tfor(int i = 1 , u , v;i < n;i ++) u = read() , v = read() , add(u,v) , add(v,u);\n\tdep[1] = 1;\n\tget_tree(1);\n\tfor(int i = 1;i <= n;i ++)\tw[i] = read();\n\tfor(int i = 1 , lca;i <= m;i ++)\t\n\t{\n\t\ts[i] = read(); t[i] = read();\n\t\tlca = LCA(s[i],t[i]);\n\t\tdis[i] = dep[s[i]] + dep[t[i]] - 2 * dep[lca];\n\t\tnum[s[i]] ++;\n\t\tpath[t[i]].push_back(i);\n\t\tlcafa[lca].push_back(i);\n\t\tif(dep[lca] + w[lca] == dep[s[i]])\tans[lca] --;\n\t}\n\tdfs(1);\n\tfor(int i = 1;i <= n;i ++)\tprintf(\"%d \",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1568677642,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "~~\u53f7\u79f0\u662fNOIP\u53f2\u4e0a\u6700\u96be\u7684\u4e00\u9898\uff0c\u7ec8\u4e8e\u88ab\u6211\u75284h\u62ff\u4e0b\u4e86\uff0c\u7136\u800c\u6211\u89c9\u5f97\u5e76\u6ca1\u6709\u90a3\u4e48\u96be~~\n\n\u9898\u610f\u5c31\u81ea\u5df1\u770b\u5427\uff1b\n\n~~\u90fd\u8bf4\u8fd9\u4e2a\u9898\u548c\u6811\u4e0a\u5dee\u5206\u6709\u5173\u7cfb\uff0c\u7136\u800c\u6211\u611f\u89c9\u4e0d\u662f~~\n\n\u663e\u7136\u4e00\u6761\u8def\u7ebfi\u80fd\u88abx\u89c2\u5bdf\u5230\u5f53\u4e14\u4ec5\u5f53$dis(st[i],x)+time[i]==w[x]$\uff0c\u5176\u4e2d$time[i]$\u662f\u51fa\u53d1\u65f6\u95f4\uff1b\n\n\u5bf9\u8be2\u95ee\u7684\u5904\u7406\uff1a\n\n1.st==en\uff0c\u7279\u5224\u89e3\u51b3\uff1b\n\n2.\u8def\u7ebf\u6ca1\u6709\u62d0\u5f2f\uff1b\n\n3.\u8def\u7ebf\u5728lca\u5904\u62d0\u5f2f\uff1b\n\n\u5bf9\u4e8e\u60c5\u51b53\uff0c\u53ef\u4ee5\u628a\u5b83\u62c6\u6210\u4e24\u90e8\u5206\uff0cst-lca,lca-en\uff0c\u51fa\u53d1\u65f6\u95f4\u4e0d\u4e00\u6837\uff1b\n\n\u8fd9\u6837\u6211\u4eec\u8981\u5904\u7406\u7684\u5c31\u53ea\u6709\u76f4\u4e0a\u76f4\u4e0b\u7684\u8def\u7ebf\u4e86\uff1b\n\n**\u8003\u8651\u5411\u4e0a\u8d70\u7684\uff1a$w[x]+dep[x]=time[i]+dep[st[i]]$**\n\n\u5f88\u663e\u7136$st[i]$\u5728x\u7684\u5b50\u6811\u91cc\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7edf\u8ba1\uff0cx\u7684\u5b50\u6811\u5185\uff0c\u6ca1\u6709\u7ed3\u675f\u7684\u8def\u7ebf\uff08\u5982\u679c\u8def\u7ebf\u5728\u5b50\u6811\u5185\u7ed3\u675f\u4e86\uff0c\u663e\u7136\u6ca1\u6709\u8d21\u732e\uff09\u7684\u6570\u91cf\uff1b\u7136\u800c\u4e3a\u4e86\u65b9\u4fbf\u7edf\u8ba1\uff0c\u6211\u4eec\u7684\u7b54\u6848\u5176\u5b9e\u662f \u79bb\u5f00x\u65f6\u7684\u6570\u91cf-\u8fdb\u5165x\u65f6\u7684\u6570\u91cf\uff0c\u8fd9\u4e9b\u624d\u662fx\u7684\u5b50\u6811\u91cc\u7684\uff1b\n\n\u5bf9\u4e8e\u5411\u4e0a\u8d70\u7684\u8def\u7ebf\uff0c\u5728st\u5904++\uff0cen\u5904--\uff1b\n\n**\u8003\u8651\u5411\u4e0b\u8d70\u7684\uff1a$w[x]-dep[x]=time[i]-dep[st[i]]$**\n\n\u65b9\u6cd5\u5dee\u4e0d\u591a\uff1b\u4f46\u662f\uff0cx\u4e0a\u65b9\u51fa\u53d1\u7684\u70b9\uff0c\u5728x\u5904\u5f88\u96be\u7edf\u8ba1\uff0c\u600e\u4e48\u529e\uff1f\n\n\u8003\u8651\u5411\u4e0b\u7ecf\u8fc7x\u7684\u8def\u7ebf\uff0c\u4e00\u5b9a\u4f1a\u5728x\u7684\u5b50\u6811\u5185\u7ed3\u675f\uff0c\u800c\u8fd9\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\uff1b\n\n\u5bf9\u4e8e\u5411\u4e0b\u8d70\u7684\u8def\u7ebf\uff0c\u5728en\u5904++\uff0cst\u5904--\uff1b\n\n\u7531\u4e8e\u4e0b\u6807\u53ef\u80fd\u51fa\u73b0\u8d1f\u6570\uff0c\u9700\u8981\u504f\u79fb\u91cf\uff1b\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<deque>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n// #define inf 0x3f3f3f3f\n#define ri register int\n#define il inline\n#define fi first\n#define se second\n#define mp make_pair\n#define pi pair<int,int>\n#define mem0(x) memset((x),0,sizeof (x))\n#define mem1(x) memset((x),0x3f,sizeof (x))\nil char gc() {\n\tstatic const int BS = 1 << 22;\n\tstatic unsigned char buf[BS], *st, *ed;\n\tif (st == ed) ed = buf + fread(st = buf, 1, BS, stdin);\n\treturn st == ed ? EOF : *st++;\n}\n#define gc getchar\ntemplate<class T>void in(T &x) {\n\tx = 0;\n\tbool f = 0;\n\tchar c = gc();\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = 1;\n\t\tc = gc();\n\t}\n\twhile ('0' <= c && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = gc();\n\t}\n\tif (f) x = -x;\n}\n#undef gc\n#define pb push_back\n#define N 300005\n#define M N<<1\nint v[M], nx[M];\nint cnt, head[N];\nil void add(int uu, int vv) {\n\tv[++cnt] = vv, nx[cnt] = head[uu];\n\thead[uu] = cnt;\n}\nint n, m;\nint w[N];\nvector< pi > st[N];\nvector< pi > en[N];\nint dep[N];\nint fa[N][20];  // max 2^18\nvoid pdfs(int x, int f, int d) {\n\tfa[x][0] = f, dep[x] = d;\n\tfor (ri i = 1; i <= 18; ++i) {\n\t\tfa[x][i] = fa[fa[x][i - 1]][i - 1];\n\t\tif (fa[x][i] == 0) break;\n\t}\n\tfor (ri i = head[x]; i; i = nx[i]) {\n\t\tif (v[i] == f) continue;\n\t\tpdfs(v[i], x, d + 1);\n\t}\n}\nint lca(int x, int y) {\n\tif (dep[x] < dep[y]) swap(x, y);\n\tif (dep[x] != dep[y])\n\t\tfor (ri i = 18; i >= 0; --i)\n\t\t\tif (dep[fa[x][i]] >= dep[y]) x = fa[x][i];\n\tif (x == y) return x;\n\tfor (ri i = 18; i >= 0; --i)\n\t\tif (fa[x][i] != fa[y][i]) {\n\t\t\tx = fa[x][i], y = fa[y][i];\n\t\t}\n\treturn fa[x][0];\n}\nint ans[N];\nint csn[N], cfa[N << 1];\nconst int z = N;\nvoid dfs(int x) {\n\tint ps = csn[dep[x] + w[x]], pf = cfa[z - dep[x] + w[x]];\n\tfor (ri i = head[x]; i; i = nx[i]) {\n\t\tif (v[i] == fa[x][0]) continue;\n\t\tdfs(v[i]);\n\t}\n\tfor (ri i = 0; i < en[x].size(); ++i) {\n\t\tif (dep[en[x][i].fi] < dep[x])\n\t\t\t++cfa[z - dep[en[x][i].fi] + en[x][i].se];\n\t}\n\tfor (ri i = 0; i < st[x].size(); ++i) {\n\t\tif (dep[st[x][i].fi] < dep[x])\n\t\t\t++csn[dep[x] + st[x][i].se];\n\t}\n\tans[x] += csn[dep[x] + w[x]] - ps + cfa[z - dep[x] + w[x]] - pf;\n\tfor (ri i = 0; i < st[x].size(); ++i) {\n\t\tif (dep[st[x][i].fi] > dep[x])\n\t\t\t--cfa[z - dep[x] + st[x][i].se];\n\t}\n\tfor (ri i = 0; i < en[x].size(); ++i) {\n\t\tif (dep[en[x][i].fi] > dep[x])\n\t\t\t--csn[dep[en[x][i].fi] + en[x][i].se];\n\t}\n}\nsigned main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.in\", \"r\", stdin);\n#endif\n\tin(n), in(m);\n\tfor (ri i = 1, a, b; i < n; ++i) {\n\t\tin(a), in(b);\n\t\tadd(a, b);\n\t\tadd(b, a);\n\t}\n\tpdfs(1, 0, 1);\n\tfor (ri i = 1; i <= n; ++i) in(w[i]);\n\tfor (ri i = 1, a, b, t; i <= m; ++i) {\n\t\tin(a), in(b);\n\t\tif (a == b) {\n\t\t\tans[a] += (w[a] == 0);\n\t\t\tcontinue;\n\t\t}\n\t\tt = lca(a, b);\n\t\tif (t != a && t != b) {\n\t\t\tst[a].pb(mp(t, 0));\n\t\t\ten[t].pb(mp(a, 0));\n\t\t\tst[t].pb(mp(b, dep[a] - dep[t]));\n\t\t\ten[b].pb(mp(t, dep[a] - dep[t]));\n\t\t\tif (dep[a] - dep[t] == w[t]) --ans[t];\n\t\t}\n\t\telse {\n\t\t\tst[a].pb(mp(b, 0));\n\t\t\ten[b].pb(mp(a, 0));\n\t\t}\n\t}\n\tdfs(1);\n\tfor (ri i = 1; i <= n; ++i)\n\t\tprintf(\"%d \", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1533895597,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "\u5929\u5929\u7231\u8dd1\u6b65-\u6876+\u5dee\u5206-\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n\u5927\u610f\uff1a\u7ed9\u4e00\u9897$n$\u4e2a\u70b9\u7684\u6709\u6839\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u671f\u5f85\u7684\u6570\u503c$w[i]$\u3002$m$\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5f80 $s$ \u5230 $t$ \u7684\u8def\u5f84\u4e0a\u63d2\u5165\u4e00\u4e2a\u9996\u9879\u4e3a$0$\u516c\u5dee\u4e3a$1$\u7684\u7b49\u5dee\u6570\u5217\u3002\u7ed3\u675f\u540e\u95ee\u6bcf\u4e2a\u70b9\u5904\u6709\u591a\u5c11\u4e2a\u503c\u7b49\u4e8e\u8fd9\u4e2a\u70b9\u671f\u5f85\u7684\u6570\u503c\u3002\n## \u5206\u6790\n\u6211\u4eec\u6765\u89c2\u5bdf\u4e00\u4e0b\u63d2\u5165\u64cd\u4f5c\u3002\u8003\u8651\u63d2\u5165\u64cd\u4f5c\u80fd\u591f\u5bf9\u54ea\u4e9b\u70b9\u4ea7\u751f\u5f71\u54cd\uff0c\u9996\u5148\uff0c\u9700\u8981\u5728\u8fd9\u4e2a\u8def\u5f84\u4e0a\uff0c\u4e14\u671f\u671b\u503c\u9700\u8981\u548c\u7b49\u5dee\u6570\u5217\u5bf9\u5e94\u9879\u76f8\u540c\u3002\u524d\u4e00\u4e2a\u9650\u5236\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u6ce8\u610f\u540e\u4e00\u4e2a\u9650\u5236\u3002\u5bb9\u6613\u60f3\u5230\u5c06\u8fd9\u4e2a\u8def\u5f84\u5206\u6210\u4e24\u90e8\u5206\u8003\u8651\uff0c\u5411\u4e0a\u7684($s$\u5230$lca$)\u548c\u5411\u4e0b\u7684($lca$\u5230$t$)\u3002\n\n\u5411\u4e0a\u8d70\u7684\u94fe\u662f\u5426\u6709\u4ec0\u4e48\u6027\u8d28\u5462\uff1f\u6bcf\u5411\u4e0a\u8d70\u4e00\u4e2a\uff0c\u7b49\u5dee\u6570\u5217\u503c$+1$\uff0c\u6df1\u5ea6$-1$\uff0c\u4e8e\u662f\u6df1\u5ea6\u548c\u7b49\u5dee\u6570\u5217\u503c\u4e4b\u548c\u4e3a\u5b9a\u503c\uff0c\u4e14\u7b49\u4e8e\u8d77\u70b9\u7684\u6df1\u5ea6\u3002\u4e8e\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5411\u4e0a\u8d70\u7684\u94fe\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e2a\u94fe\u4e0a\u7684\u70b9$u$\u6ee1\u8db3\u4ee5\u4e0b\u7b49\u5f0f\uff0c\u8be5\u94fe\u4f1a\u5bf9\u4ed6\u4ea7\u751f\u8d21\u732e\uff1a$dep[u]+w[u]=dep[s]$\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5bf9\u70b9\u8fdb\u884c\u5206\u7c7b\uff0c$dep[u]+w[u]$\u76f8\u540c\u7684\u5728\u4e00\u7c7b\u4e2d\u3002\u4e8e\u662f\u6bcf\u6b64\u64cd\u4f5c\u6211\u4eec\u53ea\u9700\u5728\u5bf9\u5e94\u7c7b\u522b\u4e2d\u627e\u5230\u5728\u8be5\u94fe\u4e0a\u7684\uff0c\u5e76\u5bf9\u5176$+1$\u5373\u53ef\u3002\u5904\u7406\u4e00\u6761\u94fe\u4e0a\u7684\u70b9\uff0c\u6811\u94fe\u5256\u5206\u662f\u5bb9\u6613\u60f3\u5230\u7684\u3002\u4e8e\u662f\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a$dep[u]+w[u]$\u7684\u503c\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7531\u4e8e\u7a7a\u95f4\u9650\u5236\uff0c\u52a8\u6001\u5f00\u70b9\u5373\u53ef\u3002\u6bcf\u6b21\u5728$dep[u]+w[u] = dep[s]$\u5904\u627e\u5230\u5bf9\u5e94\u94fe\u5e76$+1$\u3002\n\u73b0\u5728\u8003\u8651\u5411\u4e0b\u8d70\u7684\u94fe\u3002\u65b9\u5411\u53d8\u5316\u4e4b\u540e\uff0c\u6bcf\u6b21\u5411\u4e0b\u4e00\u5c42\uff0c\u7b49\u5dee\u6570\u5217\u503c\u4e5f\u52a0\u4e00\u3002\u4e8e\u662f\u7b49\u5dee\u6570\u5217\u503c\u4e0e\u6df1\u5ea6\u7684\u5dee\u662f\u5b9a\u503c\uff0c\u4e14\u7b49\u4e8e$lca$\u5904\u7684\u503c\uff0c\u5373\u4e3a$(dep[s]-dep[lca])-dep[lca] = dep[s] - 2*dep[lca]$\u3002\u6240\u4ee5\u5f53\u70b9$u$\u6ee1\u8db3\u5982\u4e0b\u5f0f\u5b50\u65f6\uff0c\u53ef\u4ee5\u5bf9\u5176\u4ea7\u751f\u8d21\u732e\uff1a$w[u]-dep[u]=(dep[s]-2*dep[lca])$\u3002\u90a3\u4e48\u6309\u7167$w[u]-dep[u]$\u4e5f\u8fdb\u884c\u5206\u7c7b\uff0c\u5f00\u82e5\u5e72\u9897\u7ebf\u6bb5\u6811\uff0c\u8fd0\u7528\u6811\u5256\u5728\u5bf9\u5e94\u7c7b\u91cc\u4fee\u6539\u3002\u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u8d1f\u6570\uff0c\u6211\u4eec\u628a\u6240\u6709$w[u]-dep[u]$\u52a0\u4e0a\u4e00\u4e2an\u5373\u53ef\u3002\n\n\u73b0\u5728\u8003\u5bdf\u4e00\u4e9b\u7ec6\u8282\u3002\u6811\u5256\u4fee\u6539\u7684\u90e8\u5206\u5982\u4f55\u80fd\u6b63\u786e\u533a\u5206\u8fd9\u662f\u5411\u4e0a\u8d70\u8fd8\u662f\u5411\u4e0b\u8d70\u5462\uff1f\u4e00\u79cd\u65b9\u5f0f\u662f\u5206\u522b\u4ece$s$\u8df3\u5230$lca$\u627e\u5bfb\u4e0a\u5347\u90a3\u6761\u94fe\u7684\u7ebf\u6bb5\u6811\uff0c\u4ece$t$\u8df3\u5230$lca$\u627e\u5bfb\u4e0b\u964d\u90a3\u6761\u94fe\u7684\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u6700\u540e\u5220\u53bb\u4e00\u6b21lca(\u56e0\u4e3a\u8fd9\u6837\u7b97\u4e86\u4e24\u904d)\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u4e5f\u662f\u6211\u91c7\u53d6\u7684\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\u3002\u5b58\u4e0b\u5411\u4e0a\u8df3\u65f6\u8981\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u7f16\u53f7\uff0c\u8bb0\u4e3a$RT1$\uff0c\u548c\u5411\u4e0b\u8d70\u65f6\u8981\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u7f16\u53f7\uff0c\u8bb0\u4e3a$RT2$\u3002\u5728\u6811\u5256\u4e2d$swap(u, v)$\u65f6\uff0c\u540c\u65f6$swap(RT1, RT2)$\u3002\u8fd9\u5728\u524d\u9762\u8df3\u7684\u8fc7\u7a0b\u4e2d\u662f\u663e\u7136\u6b63\u786e\u7684\u3002\u73b0\u5728\u8003\u8651\u6700\u540e\u4e00\u6bb5\u3002\u5982\u679c\u5f53\u524d\u6211\u4eec\u662f\u6700\u540e\u4e00\u6b21\u8df3\u5230\u7684$top$\u6bd4\u8f83\u9ad8\uff0c\u90a3\u4e48\u8fd9\u65f6\u5e94\u8be5\u53bb\u8df3\u53e6\u4e00\u4fa7\u7684\uff0c\u6b64\u65f6\u8981$swap(u, v), swap(RT1, RT2)$\uff1b\u53e6\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4ecd\u7136\u5e94\u8be5\u8df3\u8fd9\u4e00\u4fa7\u7684\uff0c\u4e0d\u5fc5\u4ea4\u6362\u3002\n## \u4ee3\u7801\n\n```\n#include <iostream>\n#include <cstdio>\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <cstdlib>\n#include <queue>\n#include <set>\n#define MAXN 300050\n#define ri register int\nusing namespace std;\nint n, m, ecnt, tcnt, idcnt, w[MAXN], ans[MAXN];\nint fa[MAXN], dep[MAXN], top[MAXN], size[MAXN], son[MAXN], id[MAXN], rt[MAXN<<2], rt2[MAXN<<2];\nstruct node {\n    int v; \n    node *next;\n}pool[MAXN<<2], *h[MAXN];\nstruct Node {\n    int ls, rs, lazy;\n}t[MAXN<<5];\ninline void adde(int u, int v) {\n    node *p = &pool[ecnt++], *q = &pool[ecnt++];\n    *p = node {v, h[u]}, h[u] = p;\n    *q = node {u, h[v]}, h[v] = q;\n}\nvoid ins(int &u, int l, int r, int x) {\n    if(!u) u = ++tcnt;\n    if(l == r) return ;\n    int mid = (l+r)>>1;\n    if(x <= mid) ins(t[u].ls, l, mid, x);\n    else ins(t[u].rs, mid+1, r, x);\n}\nvoid dfs1(int u) {\n    size[u] = 1;\n    for(node *p = h[u]; p; p = p->next) {\n        if(p->v != fa[u]) {\n            fa[p->v] = u, dep[p->v] = dep[u]+1;\n            dfs1(p->v);\n            size[u] += size[p->v];\n            if(size[son[u]] <= size[p->v]) son[u] = p->v;\n        }\n    }\n}\nvoid dfs2(int u, int t) {\n    top[u] = t;\n    id[u] = ++idcnt;\n    ins(rt[dep[u]+w[u]], 1, n, id[u]);\n    ins(rt2[w[u]-dep[u]+n], 1, n, id[u]);\n    if(!son[u]) return ;\n    dfs2(son[u], t);\n    for(node *p = h[u]; p; p = p->next)\n        if(!id[p->v]) dfs2(p->v, p->v);\n}\nvoid change(int u, int l, int r, int tl, int tr, int w) {\n    if(!u) return ;\n    if(tl <= l && r <= tr) return (void)(t[u].lazy += w);\n    int mid = (l+r)>>1;\n    if(tl <= mid) change(t[u].ls, l, mid, tl, tr, w);\n    if(mid < tr) change(t[u].rs, mid+1, r, tl, tr, w);\n}\nint Get(int u, int v) {\n    while(top[u] != top[v]) {\n        if(dep[top[u]] < dep[top[v]]) swap(u, v);\n        u = fa[top[u]];\n    }\n    if(id[u] > id[v]) swap(u, v);\n    return u;\n}\nvoid Change(int u, int v) {\n    int lca = Get(u, v);\n    int RT1 = rt[dep[u]], RT2 = rt2[dep[u]-2*dep[lca]+n];\n    while(top[u] != top[v]) {\n        if(dep[top[u]] < dep[top[v]]) swap(u, v), swap(RT1, RT2);\n        change(RT1, 1, n, id[top[u]], id[u], 1);\n        u = fa[top[u]];\n    }\n    if(id[v] > id[u]) swap(u, v), swap(RT1, RT2);\n    change(RT1, 1, n, id[v], id[u], 1);\n}\nint query(int u, int l, int r, int x) {\n    if(l == r) return t[u].lazy;\n    int mid = (l+r)>>1;\n    if(t[u].lazy) \n\t    t[t[u].ls].lazy += t[u].lazy, t[t[u].rs].lazy += t[u].lazy, t[u].lazy = 0;\n    if(x <= mid) return query(t[u].ls, l, mid, x);\n    return query(t[u].rs, mid+1, r, x);\n}\nint main () {\n    int u, v;\n    scanf(\"%d%d\", &n, &m);\n    for(ri i = 1; i < n; ++i) scanf(\"%d%d\", &u, &v), adde(u, v);\n    for(ri i = 1; i <= n; ++i) scanf(\"%d\", &w[i]);\n    dfs1(1), dfs2(1, 1);\n    while(m--) {\n        scanf(\"%d%d\", &u, &v);\n        Change(u, v);\n    }\n    for(ri i = 1; i <= n; ++i) {\n        ans[i] = query(rt[dep[i]+w[i]], 1, n, id[i]);\n        ans[i] += query(rt2[w[i]-dep[i]+n], 1, n, id[i]);\n        printf(\"%d \", ans[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1535456464,
        "uid": 3369,
        "name": "hychyc",
        "ccfLevel": 0,
        "title": "P1600 \u5929\u5929\u7231\u8dd1\u6b65"
    },
    {
        "content": "\u597d\u50cf\u8fd8\u6ca1\u4eba\u5199dsu on tree\uff1f\n\n\u5927\u81f4\u601d\u8def\u4e5f\u662f\u7528\u6811\u4e0a\u5dee\u5206\uff0c\u5982\u679c\u4e00\u4e2a\u89c2\u5bdf\u8005 $i$ \u53ef\u4ee5\u89c2\u5bdf\u5230\u4e00\u4e2a\u8dd1\u6b65\u4eba\uff0c\u90a3\u4e48\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u4e0b\u3002\n\n\u4e00\u79cd\u662f\u5728 $i$ \u5230\u8fbe\u5b83\u4e0e\u7ec8\u6b62\u8282\u70b9\u7684LCA\u524d\u88ab\u89c2\u5bdf\u5230\u7684\uff0c\u53e6\u4e00\u79cd\u662f\u5728\u90a3\u4e4b\u540e\u88ab\u89c2\u5bdf\u5230\u7684\u3002\u7136\u540e\u6211\u4eec\u5217\u4e0b\u8fd9\u4e24\u79cd\u60c5\u51b5\u7684\u5f0f\u5b50\u3002\n\n\u8bbe $t_i$ \u4e3a $i$ \u8fd9\u4e2a\u70b9\u7684\u89c2\u5bdf\u65f6\u95f4\u3002\n\n$depth[S]-depth[i] = t_i$\n\n$depth[S]+depth[i]-2depth[LCA]=t_i$\n\n\u7136\u540e\u6211\u4eec\u628a\u5f0f\u5b50\u5de6\u8fb9\u6539\u7684\u548c $i$ \u65e0\u5173\n\n$depth[S] = t_i + depth[i]$\n\n$depth[S]-2depth[LCA]=t_i-depth[i]$\n\n\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e24\u4e2a $vector$ \uff0c\u4e00\u4e2aup\u5b58\u7b2c\u4e00\u79cd\u60c5\u51b5 $depth[S]$ \uff0c\u53e6\u4e00\u4e2adown\u5b58\u7b2c\u4e8c\u79cd\u60c5\u51b5 $depth[S]-2depth[LCA]$ \uff0c\u7136\u540e\u6811\u4e0a\u5dee\u5206\u601d\u60f3\u5728 $LCA$ \u548c $LCA$ \u7684\u7238\u7238\u4e0a\u5206\u522b\u51cf\u6389\u4e00\u79cd\u60c5\u51b5\uff0c\u7136\u540e\u5c31\u53ef\u4ee5dsu on tree\uff0c\u5f00\u4e24\u4e2a\u6876\u6765\u5b58\u4f60up\u548cdown\u4e0a\u9762\u7684\u503c\uff0c\u67e5\u8be2\u7684\u8bdd\u7b54\u6848\u5c31\u76f4\u63a5\u662f $up[t[i]+depth[i]] + down[t[i]-depth[i]]$ \n\n\u8bb0\u5f97\u9632\u6b62\u4e0b\u6807\u51fa\u73b0\u8d1f\u6570\u3002\n\n\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#define maxn 600005\n\nint n,m,up[maxn],down[maxn],nex[maxn],head[maxn],to[maxn],w[maxn],tot,ans[maxn],f[maxn][30],size[maxn],hson[maxn],dep[maxn];\n\nstd::vector <int > aup[maxn],ado[maxn],bup[maxn],bdo[maxn];\n\nvoid add(int x,int y) {\n\tto[++tot] = y; nex[tot] = head[x]; head[x] = tot;\n}\nvoid dfs1(int x,int fa) {\n\tf[x][0] = fa; size[x] = 1; dep[x] = dep[fa] + 1;\n\tfor (int i = 1;(1 << i) <= n;i++) f[x][i] = f[f[x][i - 1]][i - 1];\n\tfor (int i = head[x];i;i = nex[i]) {\n\t\tint y = to[i];\n\t\tif (y == fa) continue;\n\t\tdfs1(y,x);\n\t\tsize[x] += size[y];\n\t\tif (size[y] > size[hson[x]]) hson[x] = y;\n\t}\n}\nint LCA(int x,int y) {\n\tif (dep[x] < dep[y]) std::swap(x,y);\n\tfor (int i = 25;i >= 0;i--) if (dep[f[x][i]] >= dep[y]) x = f[x][i];\n\tfor (int i = 25;i >= 0;i--) if (f[x][i] != f[y][i]) x = f[x][i],y = f[y][i];\n\tif (x == y) return x;\n\treturn f[x][0];\n}\nvoid calc(int x,int d) {\n\tfor (int i = 0;i < aup[x].size();i++) {\n\t\tup[aup[x][i]] += d;\n\t}\n\tfor (int i = 0;i < ado[x].size();i++) {\n\t\tdown[ado[x][i]] += d;\n\t}\n\tfor (int i = 0;i < bup[x].size();i++) {\n\t\tup[bup[x][i]] -= d;\n\t}\n\tfor (int i = 0;i < bdo[x].size();i++) {\n\t\tdown[bdo[x][i]] -= d;\n\t}\n\tfor (int i = head[x];i;i = nex[i]) {\n\t\tint y = to[i];\n\t\tif (y == f[x][0]) continue;\n\t\tcalc(y,d);\n\t}\n}\nvoid dfs(int x) {\n\tfor (int i = head[x];i;i = nex[i]) {\n\t\tint y = to[i];\n\t\tif (y == f[x][0] || y == hson[x]) continue;\n\t\tdfs(y);\n\t}\n\tif (hson[x]) dfs(hson[x]);\n\tfor (int i = head[x];i;i = nex[i]) {\n\t\tint y = to[i];\n\t\tif (y == f[x][0] || y == hson[x]) continue;\n\t\tcalc(y,1);\n\t}\n\tfor (int i = 0;i < aup[x].size();i++) {\n\t\tup[aup[x][i]]++;\n\t}\n\tfor (int i = 0;i < ado[x].size();i++) {\n\t\tdown[ado[x][i]]++;\n\t}\n\tfor (int i = 0;i < bup[x].size();i++) {\n\t\tup[bup[x][i]]--;\n\t}\n\tfor (int i = 0;i < bdo[x].size();i++) {\n\t\tdown[bdo[x][i]]--;\n\t}\n\tans[x] = up[w[x] + dep[x] + n] + down[w[x] - dep[x] + n];\n\tif (hson[f[x][0]] != x) calc(x,-1);\n}\n\nint  main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i = 1;i < n;i++) {\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y); add(y,x);\n\t}\n\tfor (int i = 1;i <= n;i++) scanf(\"%d\",&w[i]);\n\tdfs1(1,0);\n\tfor (int i = 1;i <= m;i++) {\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tint d = LCA(x,y);\n\t\taup[x].push_back(dep[x] + n);\n\t\tado[y].push_back(dep[x] - 2 * dep[d] + n);\n\t\tbup[d].push_back(dep[x] + n);\n\t\tbdo[f[d][0]].push_back(dep[x] - 2 * dep[d] + n);\n\t}\n\tdfs(1);\n\tfor (int i = 1;i <= n;i++) printf(\"%d \",ans[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n\n```\n",
        "postTime": 1615605096,
        "uid": 47994,
        "name": "5u0i5n11i",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011\u5929\u5929\u7231\u8dd1\u6b65"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u9898\u5e72\uff1a[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1600)\n\n\t\t\u8fd9\u9053\u9898\uff0c\u6b38\u3002\u662f\u6211\u89c1\u8fc7\u6700\u5b59\u7684\u9898\uff0c\u867d\u7136\u90e8\u5206\u5206\u5206\u5f97\u5f88\u8be6\u7ec6\uff0c\u4f46\u662f\u6bcf\u4e00\u79cd\u90e8\u5206\u5206\u4e4b\u95f4\u6ca1\u6709\u76f4\u63a5\u7684\u8054\u7cfb\uff08\u5f53\u7136\uff0c\u5982\u679c\u6709\u5927\u4f6c\u4eec\u4f1a\u6b63\u89e3\u7684\u8bdd\u5f53\u7136\u662f\u6709\u8054\u7cfb\u7684\u554a\uff09\n        \u597d\u4e86\uff0c\u8a00\u5f52\u6b63\u4f20\uff0c\u5f00\u59cb\u89e3\u6211\u4eec\u7684\u5b59\u5b50\u9898\u76ee\u4e86:\n1.20\u5206\u7684\u505a\u6cd5\uff1a\n\t\t\n        \u4e00\u770b\u6570\u636e\u7684\u7c7b\u578b\uff0c\u5c31\u77e5\u9053\u524d20\u5206\u662f\u9001\u7684\uff0c1~2\u4e2a\u70b9\u7684s[x]=t[x],\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1w[x]=0\u7684\u70b9\u6709\u591a\u5c11\u4e2a\u51fa\u53d1\u70b9\u662f\u8fd9\u91cc\u7684\u554a\u30023~4\u4e2a\u70b9\u7684\u6240\u6709w[x]=0\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1s[x]\u5728\u54ea\u91cc\u51fa\u53d1\u7684\uff0c\u90a3\u4e2a\u70b9\u7684ans\u503c\u5c31++\uff1b\n        \u597d\u4e86\uff0c\u4e8c\u8bdd\u4e0d\u8bf4\uff0c\u642c\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nconst int maxM=300100;\nstruct bian{\n\tint po,next;\n}edge[maxM*2];\nint head[maxM],tot;\nint n,m;\nint w[maxN],s[maxM],t[maxM],ans[maxN];\nbool flag1,flag2;\n\nvoid insert(int x,int y)\n{\n\tedge[++tot].po=y;\n\tedge[tot].next=head[x];\n\thead[x]=tot;\n}\n\nvoid readin()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n-1;++i){\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tinsert(u,v);\n\t\tinsert(v,u);\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tcin>>w[i];\n\t\tif(w[i]!=0)\n\t\t\tflag1=true;\n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tcin>>s[i]>>t[i];\n\t\tif(s[i]!=t[i])\n\t\t\tflag2=true;\n\t}\n}\n\nint main()\n{\n//\tfreopen(\"running.in\",\"r\",stdin);\n//\tfreopen(\"running.out\",\"w\",stdout);\n\treadin();\n\tif(flag2==false){\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tif(w[i]==0){\n\t\t\t\tfor(int j=1;j<=m;++j){\n\t\t\t\t\tif(s[j]==i)\n\t\t\t\t\t\tans[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tcout<<ans[i]<<\" \";\n\t}\n\telse if(flag1==false){\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tfor(int j=1;j<=m;++j){\n\t\t\t\tif(s[j]==i)\n\t\t\t\t\tans[i]++;\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tcout<<ans[i]<<\" \";\n\t}\n\treturn 0;\n}\n```\n\n2.25\u5206\u505a\u6cd5\uff1a\n\t\t\n        \u4e00\u770b\u6570\u636e\uff0c\u53d1\u73b0\u7b2c\u4e94\u4e2a\u6570\u636e\u70b9\u548c\u540e\u9762\u7684\u5dee\u4e86\u51e0\u4e2a\u6570\u91cf\u7ea7\u3002\u4e8e\u662f\u5c31\u60f3\uff1a\u5e94\u8be5\u662f\u53ef\u4ee5\u7528\u6df1\u641c\u6765\u89e3\u51b3\u7684\u3002\u7528\u4e00\u4e2afrom\u6570\u7ec4\u6765\u8bb0\u5f55\u662f\u4ece\u54ea\u91cc\u6765\u7684\uff0cdis\u6570\u7ec4\u8868\u793a\u6df1\u5ea6\uff0c\u8fd9\u6837\uff0c\u552f\u4e00\u7684\u8def\u5f84\u5c31\u5f97\u5230\u4e86\uff0c\u4e4b\u540e\uff0c\u5229\u7528\u8bb0\u5f55\u7684from\u6570\u7ec4\u6765\u786e\u5b9a\u8fd9\u6761\u8def\u5f84\uff0c\u4e4b\u540e\uff0c\u518d\u7edf\u8ba1\u8def\u5f84\u4e0a\u9762\u7684\u65f6\u95f4\u662f\u5426\u76f8\u540c\u5c31\u597d\u4e86~~~\n        \u9644\u4e0a\u4ee3\u7801\uff08\u597d\u5427\uff0c\u8fd9\u4e2a\u4ee3\u7801\u53ef\u4ee5\u89e3\u51b3\u524d5\u4e2a\u70b9\uff09\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nconst int maxM=300100;\nstruct bian{\n\tint po,next;\n}edge[maxM*2];\nint head[maxM],tot;\nint n,m;\nint from[maxN],dis[maxN];\nint b[maxN],qwq=1,st;\nint w[maxN],s[maxM],t[maxM],ans[maxN];\nbool flag1,flag2;\n\nvoid insert(int x,int y)\n{\n\tedge[++tot].po=y;\n\tedge[tot].next=head[x];\n\thead[x]=tot;\n}\n\nvoid init(int x)\n{\n\tmemset(dis,127,sizeof(dis));\n\tmemset(b,0,sizeof(b));\n\tmemset(from,0,sizeof(from));\n\tqwq=1;\n\tdis[x]=0;\n}\n\nvoid bfs(int x,int en)\n{\n\tint st=1;\n\tb[st]=x;\n\twhile(st<=qwq){\n\t\tint t=head[b[st]];\n\t\twhile(t!=0){\n\t\t\tint y=edge[t].po;\n\t\t\tif(dis[y]>dis[b[st]]+1){\n\t\t\t\tfrom[y]=st;\n\t\t\t\tdis[y]=dis[b[st]]+1;\n\t\t\t\tb[++qwq]=y;\n\t\t\t\tif(y==en)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tt=edge[t].next;\n\t\t}\n\t\tst++;\n\t}\n}\n\nvoid count(int en,int st)\n{\n\tint step=dis[st];\n\tint k=st;\n\twhile(step>=0){\n\t\tif(w[k]==step)\n\t\t\tans[k]++;\n\t\tk=b[from[k]];\n\t\tstep--;\n\t}\n}\n\nvoid work(int x,int y)\n{\t\n\t\n\tinit(x);\n\tbfs(x,y);\n/*\t\tint k=t[i];\n\twhile(k!=s[i]){\n\t\tcout<<k<<\" \";\n\t\tk=from[k];\n\t}\n\tcout<<k<<endl;\n\tcout<<dis[t[i]]<<endl;*/ \n\tcount(x,y);\n\t\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n-1;++i){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tinsert(x,y);\n\t\tinsert(y,x);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tcin>>w[i];\n\tfor(int i=1;i<=m;++i){\n\t\tcin>>s[i]>>t[i];\n\t\twork(s[i],t[i]);\n\t} \n\tfor(int i=1;i<=n;++i)\n\t\tcout<<ans[i]<<\" \";\n\treturn 0;\n}\n```\n\n3.40\u5206\u505a\u6cd5\uff1a\n\n\t\t\u518d\u770b\u6570\u636e\uff0c\u53d1\u73b06~8\u8fd9\u4e09\u4e2a\u6570\u636e\u70b9\u662f\u4e00\u6761\u94fe\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u76f4\u63a5\u5c31\u53ef\u4ee5\u77e5\u9053\u4eces[x]\u5230t[x]\u7684\u8def\u5f84\u5728\u54ea\u91cc\uff0c\u4f46\u662f\u5982\u679c\u76f4\u63a5\u679a\u4e3e\u4e4b\u95f4\u7684\u6bcf\u4e00\u4e2a\u70b9\u7684\u65f6\u95f4\u662f\u5426\u5339\u914d\u7684\u8bdd\uff0c\u5c31\u4f1a\u8d85\u65f6\u3002\n    \u9996\u5148\uff0c\u6211\u4eec\u5148\u8003\u8651s[x]<=t[x]\u7684\u60c5\u51b5\uff1a\n    \t\u5f53\u4e14\u4ec5\u5f53x-s[i]=w[x]\u65f6\u624d\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u6052\u7b49\u53d8\u5f62\u4e00\u4e0b\uff0c\u5c31\u662fs[i]=x-w[x]\u7684\u65f6\u5019\u53ef\u4ee5\u88ab\u89c2\u5bdf\u5230\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u7684s[i]\u6392\u5e8f\uff08\u5047\u5982s[i]\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u5c31\u6309t[i]\u7684\u7684\u5927\u5c0f\u6392\u5e8f\uff09\uff0c\u6240\u4ee5\uff0c\u5f53\u6211\u4eec\u8bbf\u95ee\u6bcf\u4e00\u4e2ax-w[x]\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u5f88\u5feb\u7684\u77e5\u9053\u4e0e\u5176\u76f8\u7b49\u7684s[i]\u662f\u7b2c\u51e0\u4e2a\u5230\u7b2c\u51e0\u4e2a\u3002\uff08\u8fd9\u4e2a\u662f\u7528\u4e00\u4e2ap\u6570\u7ec4\u6765\u5b9e\u73b0\u7684\uff0cp[s[i]][0]\u5230p[s[i]][1]\u7684\u503c\u90fd\u662fs[i]\uff08\u5176\u4f59\u7684\u5c31\u4e0d\u662fs[i]\uff09\uff09\uff0c\u8fd9\u65f6\u5019s[i]=x-w[x]\u7684\u6761\u4ef6\u6ee1\u8db3\u4e86\uff0c\u4f46\u662f\u5e76\u4e0d\u4fdd\u8bc1\u8fd9\u4e2ax\u5728t[i]\u7684\u8303\u56f4\u5185\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u5206\u5feb\u901f\u5730\u627e\u51fa\u6700\u540e\u4e00\u4e2a\u4e0d\u5927\u4e8et[i]\u7684x\u7684\u503c\uff0c\u8fd9\u4e9bx\u76f8\u5bf9\u5e94\u7684ans\u7684\u503c\u90fd\u8981\u6539\u53d8\u3002\n        \u4e4b\u540e\uff0cs[x]>t[x]\u7684\u65b9\u5f0f\u662f\u5927\u540c\u5c0f\u5f02\uff0c\u5c31\u662fx-w[x]\u53d8\u6210\u4e86x+w[x],\u5176\u4ed6\u7684\u5730\u65b9\u90fd\u662f\u76f8\u540c\u7684\n        \u6240\u4ee5\uff0c\u5c31\u76f4\u63a5\u9644\u4e0a\u4ee3\u7801\u5427\uff1a\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<utility>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nconst int maxM=300100;\nstruct bian{\n    int po,next;\n}edge[maxM*2];\nint head[maxM],tot;\nint n,m,num;\nint from[maxN],dis[maxN];\nint b[maxN],qwq=1,st;\nint a[maxN][2];\nint compute[maxN],p[maxN][2];\nint w[maxN],s[maxM],t[maxM],ans[maxN];\nbool flag1,flag2;\n\nvoid insert(int x,int y)\n{\n    edge[++tot].po=y;\n    edge[tot].next=head[x];\n    head[x]=tot;\n}\n\nvoid qsort(int l,int r)\n{\n    if(l>=r)\n        return;\n    int o=rand()%(r-l+1)+l;\n    int k=a[o][0];\n    int p=a[o][1];\n    int i=l,j=r;\n    while(i<=j){\n        while(a[i][0]<k||(a[i][0]==k&&a[i][1]<p))i++;\n        while(a[j][0]>k||(a[j][0]==k&&a[j][1]>p))j--;\n        if(i<=j){\n            swap(a[i][0],a[j][0]);\n            swap(a[i][1],a[j][1]);\n            i++;\n            j--;\n        }\n    }\n    qsort(l,j);\n    qsort(i,r);\n}\n\nint erfen(int l,int r,int target)\n{\n    while(l<=r){\n        int mid=(l+r)/2;\n        if(a[mid][1]<target)\n            l=mid+1;\n        else\n            r=mid-1;\n    }\n    return l;\n}\n\nint erfen2(int l,int r,int target)\n{\n    while(l<=r){\n        int mid=(l+r)/2;\n        if(a[mid][1]<=target)\n            l=mid+1;\n        else\n            r=mid-1;\n    }\n    return r;\n}\n\nvoid work(int k)\n{\n    srand(10000000);\n    qsort(1,num);\n    p[a[1][0]][0]=p[a[1][0]][1]=1;\n    for(int i=2;i<=m;++i){\n        if(a[i][0]==a[i-1][0])\n            p[a[i][0]][1]=i;\n        else\n            p[a[i][0]][0]=p[a[i][0]][1]=i;\n    }\n    for(int i=1;i<=n;++i){\n        compute[i]=i+k*w[i];\n        if(p[compute[i]][0]==0)\n            continue;\n        int q1=erfen(p[compute[i]][0],p[compute[i]][1],i);\n        int q2=erfen2(p[compute[i]][0],p[compute[i]][1],i);\n        //cout<<p[compute[i]][0]<<\" \"<<p[compute[i]][1]<<endl;\n        //cout<<\"i: \"<<i<<\" \"<<compute[i]<<\" \"<<q1<<\" \"<<q2<<endl;\n        if(k==1)\n            ans[i]+=q2-p[compute[i]][0]+1;\n        else{\n            //cout<<compute[i]<<\" \"<<q1<<\" \"<<<<endl;\n            ans[i]+=p[compute[i]][1]-q1+1;\n        }\n    }\n}\n\nvoid init(int x)\n{\n    memset(dis,127,sizeof(dis));\n    memset(b,0,sizeof(b));\n    memset(from,0,sizeof(from));\n    qwq=1;\n    dis[x]=0;\n}\n\nvoid bfs(int x,int en)\n{\n    int st=1;\n    b[st]=x;\n    while(st<=qwq){\n        int t=head[b[st]];\n        while(t!=0){\n            int y=edge[t].po;\n            if(dis[y]>dis[b[st]]+1){\n                from[y]=st;\n                dis[y]=dis[b[st]]+1;\n                b[++qwq]=y;\n                //cout<<y<<\" \"<<st<<\" \"<<qwq<<endl;\n                //for(int i=st;i<=qwq;++i)\n                //\tcout<<b[i]<<\" \";\n                //cout<<endl;\n                if(y==en)\n                    return;\n            }\n            t=edge[t].next;\n        }\n        st++;\n    }\n}\n\nvoid count(int en,int st)\n{\n    int step=dis[st];\n    int k=st;\n    while(step>=0){\n        if(w[k]==step)\n            ans[k]++;\n        k=b[from[k]];\n        step--;\n    }\n}\n\nvoid work1()\n{\n    for(int i=1;i<=m;++i){\n        int x=s[i],y=t[i];\n        init(x);\n        bfs(x,y);\n        count(x,y);\n    }\n}\n\nint main()\n{\n    //freopen(\"running.in\",\"r\",stdin);\n    //freopen(\"running.out\",\"w\",stdout);\n    cin>>n>>m;\n    for(int i=1;i<=n-1;++i){\n        int x,y;\n        cin>>x>>y;\n        insert(x,y);\n        insert(y,x);\n    }\n    for(int i=1;i<=n;++i)\n        cin>>w[i];\n    for(int i=1;i<=m;++i)\n        cin>>s[i]>>t[i];\n    if(m<=993){\n        work1();\n    }\n    else{\n        for(int i=1;i<=m;++i){\n            if(s[i]<=t[i]){\n                a[++num][0]=s[i];\n                a[num][1]=t[i];\n            }\n        }\n        work(-1);\n        memset(a,0,sizeof(a));\n        memset(compute,0,sizeof(compute));\n        memset(p,0,sizeof(p));\n        num=0;\n        for(int i=1;i<=m;++i){\n            if(s[i]>t[i]){\n                a[++num][0]=s[i];\n                a[num][1]=t[i];\n            }\n        }\n        work(1);\n    }\n    for(int i=1;i<=n;++i)\n        cout<<ans[i]<<\" \";\n    return 0;\n}\n```\n      \n4.60\u5206\u505a\u6cd5\uff1a\n\n\t\t\u89c2\u5bdf\u7b2c9~12\u7684\u6570\u636e\uff0c\u53d1\u73b0\u6240\u6709\u7684s[i]\u90fd\u7b49\u4e8e1\uff0c\u4e0d\u59a8\u4ee51\u4e3a\u6839\u5efa\u4e00\u68f5\u6811\u3002\u7531\u4e8e1\u6c38\u8fdc\u90fd\u662f\u51fa\u53d1\u70b9\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u70b9\u7684\u6df1\u5ea6\u5c31\u662f\u4ece1\u8fc7\u6765\u7684\u65f6\u95f4\u3002\u9996\u5148\uff0c\u6211\u4eec\u7528\u4e00\u4e2af\u6570\u7ec4\u6765\u7edf\u8ba1\u4ee5\u6bcf\u4e00\u4e2a\u70b9\u4e3a\u7ec8\u70b9\u7684\u4e2a\u6570\uff08\u540e\u9762\u4ecb\u7ecd\u662f\u5e72\u4ec0\u4e48\u7684\uff09\u3002\u6211\u4eec\u60f3\u5230\u53ef\u4ee5\u7528\u6811\u5f62DP\u6765\u5b9e\u73b0\uff0c\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u4ee5x\u8fd9\u4e2a\u70b9\u4e3a\u6839\uff0c\u5728\u4ed6\u7684\u5b50\u6811\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u7ec8\u70b9\uff08\u5305\u62ec\u4ed6\u81ea\u5df1\uff09\u3002\n        \u6240\u4ee5\uff0c\u6211\u4eec\u4e4b\u524d\u5b9a\u4e49\u7684f\u6570\u7ec4\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u7531\u4e8e\u662f\u7528\u641c\u7d22\u6765\u5b9e\u73b0\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u4ed6\u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u662f\u54ea\u4e2a\u4ee5\u53ca\u5b83\u7684f\u6570\u7ec4\u7684\u503c\uff0c\u6839\u8282\u70b9\u7684f\u7684\u503c\u4e3a\u5b83\u7684\u6240\u6709\u7684\u5b50\u6811\u7684f\u7684\u548c\u52a0\u4e0a\u672c\u8eab\u7684\u503c\u3002\n        \u6700\u540e\uff0c\u5f53dis[x]=w[x]\u7684\u65f6\u5019\uff0cans\u7684\u503c\u5c31\u662f\u6240\u5bf9\u5e94\u7684f\u6570\u7ec4\u7684\u503c\uff08\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\uff1f\u5c31\u662f0\u554a\u3002\u3002\u3002\uff09\n        \u9644\u4e0aWindows\u7cfb\u7edf\u4e0a\u7206\u4e86\u6808\u7684dfs\u4ee3\u7801\uff08Linix\u5c31\u4e0d\u4f1a\u3002\u3002\u3002\uff09\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nconst int maxM=300100;\nstruct bian{\n\tint po,next;\n}edge[maxM*2];\nint head[maxM],tot;\nint n,m;\nint dis[maxN],f[maxN];\nint w[maxN],s[maxM],t[maxM],ans[maxN];\nbool flag1,flag2;\n\nvoid insert(int x,int y)\n{\n\tedge[++tot].po=y;\n\tedge[tot].next=head[x];\n\thead[x]=tot;\n}\n\ninline int dfs(int x,int fa)\n{\n\tint add=0;\n\tint k=head[x];\n\twhile(k!=0){\n\t\tint y=edge[k].po;\n\t\tif(y!=fa&&dis[y]>dis[x]+1){\n\t\t\tdis[y]=dis[x]+1;\n\t\t\tadd+=dfs(y,x);\n\t\t}\n\t\tk=edge[k].next;\n\t}\n\tf[x]+=add;\n\treturn f[x];\n}\n\nint main()\n{\n\tfreopen(\"running.in\",\"r\",stdin);\n\tfreopen(\"running.out\",\"w\",stdout);\n\tcin>>n>>m;\n\tfor(int i=1;i<=n-1;++i){\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tinsert(u,v);\n\t\tinsert(v,u);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tcin>>w[i];\n\tfor(int i=1;i<=m;++i){\n\t\tcin>>s[i]>>t[i];\n\t\tf[t[i]]++;\n\t}\n\tmemset(dis,127,sizeof(dis));\n\tdis[1]=0;\n\tf[1]=dfs(1,0);\n\tfor(int i=1;i<=n;++i){\n\t\tif(w[i]==dis[i])\n\t\t\tans[i]=f[i];\n\t\tcout<<ans[i]<<\" \";\n\t}\n\treturn 0;\n}\n```\n\n4.80\u5206\u505a\u6cd5\uff1a\n\n\t\t\u518d\u770b\u7b2c13~16\u7684\u6570\u636e\uff0c\u6240\u6709\u7684t[i]\u90fd\u7b49\u4e8e1\uff0c\u5efa\u6811\u7684\u65b9\u5f0f\u4e0es[i]\u4e3a1\u7684\u65b9\u5f0f\u4e00\u6837\uff0c\u4f46\u662f\u5728\u7edf\u8ba1\u7684\u8fc7\u7a0b\u4e2d\u5c31\u6709\u5f88\u5927\u7684\u5dee\u522b\u4e86\u3002\n        \u8fd9\u4e2a\u4e5f\u9700\u8981\u8bb0\u5f55\u4e00\u4e2af2\u6570\u7ec4\uff0c\u8868\u793a\u4ee5\u4e00\u4e2a\u70b9\u5f00\u59cb\u7684\u4e2a\u6570\uff0c\u518d\u7ef4\u62a4\u4e00\u4e2af2\u7684\u524d\u7f00\u548csum[i]\u3002\n        \u9996\u5148\uff0c\u7531\u4e8es[i]\u7684\u65f6\u95f4\u70b9\u662f0\uff0ct[i]\u7684\u65f6\u95f4\u70b9\u662ft[i]-s[i]\u6240\u4ee51\u7684\u65f6\u95f4\u70b9\u4e3at[i]-s[i]\uff0c\u5728\u4e00\u6761\u8def\u4e0a\u5982\u679c\u60f3\u8981\u88ab\u89c2\u5bdf\u5230\uff0c\u5c31\u5fc5\u987b\u6ee1\u8db3d[y]=d[x]+w[x].\n        \u4f46\u662f\u4ec5\u4ec5\u6ee1\u8db3\u7740\u4e00\u4e2a\u6761\u4ef6\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\uff0c\u9996\u5148\uff0c\u5fc5\u987b\u8981\u4fdd\u8bc1y\u5728x\u7684\u5b50\u6811\u4e2d\u3002\u9996\u5148\u4ecb\u7ecd\u4e00\u4e2a\u65b0\u7684\u77e5\u8bc6\uff0c\u53eb\u505adfs\u5e8f\uff0c\u5728\u6211\u4eec\u8fdb\u884c\u6df1\u641c\u7684\u65f6\u5019\uff0c\u90fd\u6709\u4e00\u4e2a\u987a\u5e8f\uff0c\u6211\u4eec\u5c06\u641c\u7d22\u7684\u70b9\u6309\u7167\u987a\u5e8f\u7f16\u53f7\uff0c\u540c\u65f6\u8bb0\u5f55\u4e00\u4e2aseq[i][0]\u4e0eseq[i][1],\u8fd9\u4e24\u4e2a\u6570\u8868\u793a\u4eceseq[i][0]\u5230seq[i][1]\u8fd9\u4e9b\u6570\u662f\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u3002\n        \u5047\u5982\u8fd8\u4e0d\u7406\u89e3\u7684\u8bdd\uff0c\u5c31\u770b\u4e0b\u9762\u8fd9\u4e2a\u56fe\uff1a\n![\u89e3\u91ca](https://cdn.luogu.com.cn/upload/pic/38341.png )\n\n\t\t\u5728\u8fd9\u4e2a\u56fe\u4e2d\uff0c1~13\u7684dfs\u5e8f\u5206\u522b\u4e3a\uff08\u5708\u4e2d\u7684\u662f\u672c\u8eab\u7684dfs\u5e8f\uff09\n\t\t1 3 2 6 5 4 11 10 9 8 7 13 12\n        \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4ee51\u4e3a\u6839\u7684\u5b50\u6570\u8303\u56f4\u662f1~13\uff0c\u4ee53\u4e3a\u6839\u7684\u5b50\u6570\u8303\u56f4\u5c31\u662f2~4\uff0c\u540c\u7406\uff0c\u5176\u4ed6\u7684\u70b9\u4e5f\u662f\u540c\u6837\u7684\u505a\u6cd5\u3002\n        \u4e4b\u540e\uff0c\u6211\u4eec\u8fd8\u662f\u5148\u5c06\u70b9\u6309\u7167dis\u7684\u5927\u5c0f\u6765\u6392\u5e8f\uff08dis\u76f8\u540c\u65f6\uff0c\u6309\u7167\u6bcf\u4e2a\u70b9\u672c\u8eab\u7684\u7684dfs\u5e8f\u7684\u987a\u5e8f\u6765\u6392\u5e8f\uff09\u3002\u6392\u5b8c\u5e8f\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5feb\u901f\u7684\u627e\u5230\u54ea\u4e9bdis[y]=dis[x]+w[x]\u4e86\uff0c\u4e4b\u540e\uff0c\u518d\u5224\u65ad\u5728\u4e0d\u5728\u8fd9\u4e2a\u8303\u56f4\u91cc\u9762\uff0c\u5148\u4e8c\u5206\u627e\u51fa\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8eseq[i][0]\u7684\u70b9p1\uff0c\u518d\u4e8c\u5206\u627e\u51fa\u6700\u540e\u4e00\u4e2a\u4e0d\u5927\u4e8eseq[i][1]\u7684\u70b9p2\u3002\u6240\u4ee5\uff0cans[i]\u7684\u503c\u5c31\u662fsum[p2]-sum[p1-1]\uff0c\u8fd9\u6837\u5c31\u6c42\u51fa\u6765\u4e86\uff08\u6492\u82b1~~~\uff09\n        \u6700\u540e\uff0c\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<utility>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nconst int maxM=300100;\nstruct bian{\n\tint po,next;\n}edge[maxM*2];\nint head[maxM],tot;\nint n,m,num;\nint from[maxN],dis[maxN];\nint b[maxN],qwq=1,st;\nint a[maxN][2];\nint f[maxN];\nint f2[maxN],tim,seq[maxN][2],rank[maxN];\nint sum[maxN],p2[maxN][2];\nint compute[maxN],p[maxN][2];\nint w[maxN],s[maxM],t[maxM],ans[maxN];\nbool flag1,flag2;\n\nvoid insert(int x,int y)\n{\n\tedge[++tot].po=y;\n\tedge[tot].next=head[x];\n\thead[x]=tot;\n}\n\nvoid dfs(int x,int fa)\n{\n\tseq[x][0]=++tim;\n\tint k=head[x];\n\twhile(k!=0){\n\t\tint y=edge[k].po;\n\t\tif(y!=fa){\n\t\t\tdis[y]=dis[x]+1;\n\t\t\tdfs(y,x);\n\t\t}\n\t\tk=edge[k].next;\n\t}\n\tseq[x][1]=tim;\n}\n\nvoid qsort2(int l,int r)\n{\n\tif(l>=r)\n\t\treturn;\n\tint o=rand()%(r-l+1)+l;\n\tint k=dis[rank[o]];\n\tint q=seq[rank[o]][0];\n\tint i=l,j=r;\n\twhile(i<=j){\n\t\twhile(dis[rank[i]]<k||(dis[rank[i]]==k&&seq[rank[i]][0]<q))i++;\n\t\twhile(dis[rank[j]]>k||(dis[rank[j]]==k&&seq[rank[j]][0]>q))j--;\n\t\tif(i<=j){\n\t\t\tswap(rank[i],rank[j]);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\tqsort2(l,j);\n\tqsort2(i,r);\n}\n\nint dich1(int l,int r,int target)\n{\n\twhile(l<=r){\n\t\tint mid=(l+r)/2;\n\t\tif(seq[rank[mid]][0]<target)\n\t\t\tl=mid+1;\n\t\telse\n\t\t\tr=mid-1;\n\t}\n\treturn l;\n}\n\nint dich2(int l,int r,int target)\n{\n\twhile(l<=r){\n\t\tint mid=(l+r)/2;\n\t\tif(seq[rank[mid]][0]<=target)\n\t\t\tl=mid+1;\n\t\telse\n\t\t\tr=mid-1;\n\t}\n\treturn r;\n}\n\nvoid prepare()\n{\n\tp2[dis[rank[1]]][0]=p2[dis[rank[1]]][1]=1;\n\tfor(int i=2;i<=n;++i){\n\t\tif(dis[rank[i]]==dis[rank[i-1]])\n\t\t\tp2[dis[rank[i]]][1]=i;\n\t\telse\n\t\t\tp2[dis[rank[i]]][0]=p2[dis[rank[i]]][1]=i;\n\t}\n}\n\nvoid operate2(int x)\n{\n\tint deep=dis[x]+w[x];\n\tint left=p2[deep][0],right=p2[deep][1];\n\tif(left==0)\n\t\treturn;\n\tint pre1=dich1(left,right,seq[x][0]);\n\tint pre2=dich2(left,right,seq[x][1]);\n\tans[x]=sum[pre2]-sum[pre1-1];\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n-1;++i){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tinsert(x,y);\n\t\tinsert(y,x);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tcin>>w[i];\n\tfor(int i=1;i<=m;++i){\n\t\tcin>>s[i]>>t[i];\n\t\tf2[s[i]]++;\n\t}\n\tdis[1]=0;\n\tdfs(1,0);\n\tfor(int i=1;i<=n;++i)\n\t\trank[i]=i;\n\tsrand(100000000);\n\tqsort2(1,n);\n\tsum[1]=f[rank[1]];\n\tfor(int i=2;i<=n;++i)\n\t\tsum[i]=sum[i-1]+f2[rank[i]];\n\tprepare();\n\tfor(int i=1;i<=n;++i)\n\t\toperate2(i);\n\tfor(int i=1;i<=n;++i)\n\t\tcout<<ans[i]<<\" \";\n\treturn 0;\n}\n```\n\n\u6700\u540e\uff0c\u9644\u4e0a\u56db\u4e2a\u7a0b\u5e8f\u5408\u5e76\u4e4b\u540e\u7684\u5b59\u7a0b\u5e8f\uff1a\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<utility>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int maxN=300100;\nconst int maxM=300100;\nstruct bian{\n\tint po,next;\n}edge[maxM*2];\nint head[maxM],tot;\nint n,m,num;\nint from[maxN],dis[maxN];\nint b[maxN],qwq=1,st;\nint a[maxN][2];\nint f[maxN];\nint f2[maxN],tim,seq[maxN][2],rank[maxN];\nint sum[maxN],p2[maxN][2];\nint compute[maxN],p[maxN][2];\nint w[maxN],s[maxM],t[maxM],ans[maxN];\nbool flag1,flag2;\n\nvoid insert(int x,int y)\n{\n\tedge[++tot].po=y;\n\tedge[tot].next=head[x];\n\thead[x]=tot;\n}\n\nvoid qsort(int l,int r)\n{\n\tif(l>=r)\n\t\treturn;\n\tint o=rand()%(r-l+1)+l;\n\tint k=a[o][0];\n\tint p=a[o][1];\n\tint i=l,j=r;\n\twhile(i<=j){\n\t\twhile(a[i][0]<k||(a[i][0]==k&&a[i][1]<p))i++;\n\t\twhile(a[j][0]>k||(a[j][0]==k&&a[j][1]>p))j--;\n\t\tif(i<=j){\n\t\t\tswap(a[i][0],a[j][0]);\n\t\t\tswap(a[i][1],a[j][1]);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\tqsort(l,j);\n\tqsort(i,r);\n}\n\nint erfen(int l,int r,int target)\n{\n\twhile(l<=r){\n\t\tint mid=(l+r)/2;\n\t\tif(a[mid][1]<target)\n\t\t\tl=mid+1;\n\t\telse\n\t\t\tr=mid-1;\n\t}\n\treturn l;\n}\n\nint erfen2(int l,int r,int target)\n{\n\twhile(l<=r){\n\t\tint mid=(l+r)/2;\n\t\tif(a[mid][1]<=target)\n\t\t\tl=mid+1;\n\t\telse\n\t\t\tr=mid-1;\n\t}\n\treturn r;\n}\n\nvoid work(int k)\n{\n\tsrand(10000000);\n\tqsort(1,num);\n\tp[a[1][0]][0]=p[a[1][0]][1]=1;\n\tfor(int i=2;i<=m;++i){\n\t\tif(a[i][0]==a[i-1][0])\n\t\t\tp[a[i][0]][1]=i;\n\t\telse\n\t\t\tp[a[i][0]][0]=p[a[i][0]][1]=i;\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tcompute[i]=i+k*w[i];\n\t\tif(p[compute[i]][0]==0)\n\t\t\tcontinue;\n\t\tint q1=erfen(p[compute[i]][0],p[compute[i]][1],i);\n\t\tint q2=erfen2(p[compute[i]][0],p[compute[i]][1],i);\n\t\t//cout<<p[compute[i]][0]<<\" \"<<p[compute[i]][1]<<endl;\n\t\t//cout<<\"i: \"<<i<<\" \"<<compute[i]<<\" \"<<q1<<\" \"<<q2<<endl;\n\t\tif(k==1)\n\t\t\tans[i]+=q2-p[compute[i]][0]+1;\n\t\telse{\n\t\t\t//cout<<compute[i]<<\" \"<<q1<<\" \"<<<<endl;\n\t\t\tans[i]+=p[compute[i]][1]-q1+1;\n\t\t}\n\t}\n}\n\nvoid init(int x)\n{\n\tmemset(dis,127,sizeof(dis));\n\tmemset(b,0,sizeof(b));\n\tmemset(from,0,sizeof(from));\n\tqwq=1;\n\tdis[x]=0;\n}\n\nvoid bfs(int x,int en)\n{\n\tint st=1;\n\tb[st]=x;\n\twhile(st<=qwq){\n\t\tint t=head[b[st]];\n\t\twhile(t!=0){\n\t\t\tint y=edge[t].po;\n\t\t\tif(dis[y]>dis[b[st]]+1){\n\t\t\t\tfrom[y]=st;\n\t\t\t\tdis[y]=dis[b[st]]+1;\n\t\t\t\tb[++qwq]=y;\n\t\t\t\t//cout<<y<<\" \"<<st<<\" \"<<qwq<<endl;\n\t\t\t\t//for(int i=st;i<=qwq;++i)\n\t\t\t\t//\tcout<<b[i]<<\" \";\n\t\t\t\t//cout<<endl;\n\t\t\t\tif(y==en)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tt=edge[t].next;\n\t\t}\n\t\tst++;\n\t}\n}\n\nvoid count(int en,int st)\n{\n\tint step=dis[st];\n\tint k=st;\n\twhile(step>=0){\n\t\tif(w[k]==step)\n\t\t\tans[k]++;\n\t\tk=b[from[k]];\n\t\tstep--;\n\t}\n}\n\nvoid work1()\n{\n\tfor(int i=1;i<=m;++i){\n\t\tint x=s[i],y=t[i];\n\t\tinit(x);\n\t\tbfs(x,y);\n\t\tcount(x,y);\n\t}\n}\n\ninline void dfs(int x,int fa)\n{\n\tint k=head[x];\n\twhile(k!=0){\n\t\tint y=edge[k].po;\n\t\tif(y!=fa){\n\t\t\tdis[y]=dis[x]+1;\n\t\t\tdfs(y,x);\n\t\t\tf[x]+=f[y];\n\t\t}\n\t\tk=edge[k].next;\n\t}\n}\n\nvoid dfs2(int x,int fa)\n{\n\tseq[x][0]=++tim;\n\tint k=head[x];\n\twhile(k!=0){\n\t\tint y=edge[k].po;\n\t\tif(y!=fa){\n\t\t\tdis[y]=dis[x]+1;\n\t\t\tdfs2(y,x);\n\t\t}\n\t\tk=edge[k].next;\n\t}\n\tseq[x][1]=tim;\n}\n\nvoid qsort2(int l,int r)\n{\n\tif(l>=r)\n\t\treturn;\n\tint o=rand()%(r-l+1)+l;\n\tint k=dis[rank[o]];\n\tint q=seq[rank[o]][0];\n\tint i=l,j=r;\n\twhile(i<=j){\n\t\twhile(dis[rank[i]]<k||(dis[rank[i]]==k&&seq[rank[i]][0]<q))i++;\n\t\twhile(dis[rank[j]]>k||(dis[rank[j]]==k&&seq[rank[j]][0]>q))j--;\n\t\tif(i<=j){\n\t\t\tswap(rank[i],rank[j]);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\tqsort2(l,j);\n\tqsort2(i,r);\n}\n\nint dich1(int l,int r,int target)\n{\n\twhile(l<=r){\n\t\tint mid=(l+r)/2;\n\t\tif(seq[rank[mid]][0]<target)\n\t\t\tl=mid+1;\n\t\telse\n\t\t\tr=mid-1;\n\t}\n\treturn l;\n}\n\nint dich2(int l,int r,int target)\n{\n\twhile(l<=r){\n\t\tint mid=(l+r)/2;\n\t\tif(seq[rank[mid]][0]<=target)\n\t\t\tl=mid+1;\n\t\telse\n\t\t\tr=mid-1;\n\t}\n\treturn r;\n}\n\nvoid prepare()\n{\n\tp2[dis[rank[1]]][0]=p2[dis[rank[1]]][1]=1;\n\tfor(int i=2;i<=n;++i){\n\t\tif(dis[rank[i]]==dis[rank[i-1]])\n\t\t\tp2[dis[rank[i]]][1]=i;\n\t\telse\n\t\t\tp2[dis[rank[i]]][0]=p2[dis[rank[i]]][1]=i;\n\t}\n}\n\nvoid operate2(int x)\n{\n\tint deep=dis[x]+w[x];\n\tint left=p2[deep][0],right=p2[deep][1];\n\tif(left==0)\n\t\treturn;\n\tint pre1=dich1(left,right,seq[x][0]);\n\tint pre2=dich2(left,right,seq[x][1]);\n\t//cout<<deep<<\" \"<<left<<\" \"<<right<<\" \"<<pre1<<\" \"<<pre2<<\" \"<<x<<endl;\n\tans[x]=sum[pre2]-sum[pre1-1];\n}\n\nint main()\n{\n\t//freopen(\"running.in\",\"r\",stdin);\n\t//freopen(\"running.out\",\"w\",stdout);\n\tcin>>n>>m;\n\tfor(int i=1;i<=n-1;++i){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tinsert(x,y);\n\t\tinsert(y,x);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tcin>>w[i];\n\tfor(int i=1;i<=m;++i){\n\t\tcin>>s[i]>>t[i];\n\t\tf[t[i]]++;\n\t\tf2[s[i]]++;\n\t}\n\tif(m<=993){\n\t\twork1();\n\t}\n\telse if(m==99995){\n\t\tmemset(dis,127,sizeof(dis));\n\t\tdis[1]=0;\n\t\tdfs(1,0);\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tif(w[i]==dis[i])\n\t\t\t\tans[i]=f[i];\n\t\t\tcout<<ans[i]<<\" \";\n\t\t}\n\t\treturn 0;\n\t}\n\telse if(m%10==6){\n\t\tmemset(dis,0,sizeof(0));\n\t\tdis[1]=0;\n\t\tdfs2(1,0);\n\t\tfor(int i=1;i<=n;++i)\n\t\t\trank[i]=i;\n\t\tsrand(100000000);\n\t\tqsort2(1,n);\n\t\tsum[1]=f2[rank[1]];\n\t\tfor(int i=2;i<=n;++i)\n\t\t\tsum[i]=sum[i-1]+f2[rank[i]];\n\t\tprepare();\n\t\tfor(int i=1;i<=n;++i)\n\t\t\toperate2(i);\n\t}\n\telse{\n\t\tfor(int i=1;i<=m;++i){\n\t\t\tif(s[i]<=t[i]){\n\t\t\t\ta[++num][0]=s[i];\n\t\t\t\ta[num][1]=t[i];\n\t\t\t}\n\t\t}\n\t\twork(-1);\n\t\tmemset(a,0,sizeof(a));\n\t\tmemset(compute,0,sizeof(compute));\n\t\tmemset(p,0,sizeof(p));\n\t\tnum=0;\n\t\tfor(int i=1;i<=m;++i){\n\t\t\tif(s[i]>t[i]){\n\t\t\t\ta[++num][0]=s[i];\n\t\t\t\ta[num][1]=t[i];\n\t\t\t}\n\t\t}\n\t\twork(1);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tcout<<ans[i]<<\" \";\n\treturn 0;\n}\n```",
        "postTime": 1539828663,
        "uid": 112221,
        "name": "Nirvana_Xero",
        "ccfLevel": 0,
        "title": "P1600 \u5929\u5929\u7231\u8dd1\u6b65"
    },
    {
        "content": "NOIP2016\u63d0\u9ad8\u6700\u96be\u7684\u4e00\u9898\u554a\uff01\u867d\u8bf480\u5206\u5f88\u5bb9\u6613\u62ff\uff0c\u4f46\u60f3AC\u5374\u771f\u7684\u5f88\u96be\uff01w(\uff9f\u0414\uff9f)w\n\n\n\u505a\u6cd5\u57fa\u672c\u5c31\u8fd9\u4e48\u4e24\u79cd\uff1a\u2460\u6811\u94fe\u5256\u5206\uff1b\u2461LCA+\u6811\u4e0a\u5dee\u5206\u3002\n\n\n\u6811\u5256\u6211\u638c\u63e1\u5f97\u5e76\u4e0d\u719f\u7ec3\uff08\u6211\u4ec5\u7528\u5b83\u5199\u8fc7LCA\u800c\u4e14\u5df2\u7ecf\u5fd8\u4e86\uff09\uff0c\u6240\u4ee5\u6211\u53ea\u80fd\u7528\u2461\u4e86\u3002\n\n\n\u5148\u8bb2\u601d\u8def\u3002\u9996\u5148\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4eba\u8d70\u7684\u8def\u5f84s->t\uff0c\u53ef\u62c6\u5206\u4e3as->lca(s,t)\u548clca(s,t)->t\u3002\u6211\u4eec\u5bf9\u5176\u5206\u522b\u8003\u8651\u3002\n\n\n\u5bf9\u4e8es->lca(s,t)\u4e4b\u95f4\u4efb\u4f55\u4e00\u4e2a\u70b9i\uff0c\u5b83\u80fd\u89c2\u6d4b\u5230\u5f53\u524d\u8fd9\u4e2a\u4eba\u5fc5\u987b\u6ee1\u8db3deep[s]-w[i]=deep[i]\uff08\u5176\u4e2ddeep[i]\u8868\u793a\u8282\u70b9i\u5230\u6839\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u4e0b\u540c\uff09\uff0c\u79fb\u9879\u5f97deep[s]=deep[i]+w[i]\uff0c\u8fd9\u6837\u5de6\u8fb9\u53ea\u548cs\u6709\u5173\uff0c\u53f3\u8fb9\u53ea\u548ci\u6709\u5173\u3002\n\n\n\u518d\u6765\u8003\u8651lca(s,t)->t\u4e4b\u95f4\u4efb\u4f55\u4e00\u4e2a\u70b9i\uff0c\u5b83\u80fd\u89c2\u6d4b\u5230\u5f53\u524d\u8fd9\u4e2a\u4eba\u5fc5\u987b\u6ee1\u8db3deep[t]-deep[i]=len-w[i](len\u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u4eba\u7684\u8def\u5f84\u7684\u603b\u957f\u5ea6)\uff0c\u79fb\u9879\u5f97deep[t]-len=deep[i]-w[i]\uff0c\u8fd9\u6837\u5de6\u8fb9\u53ea\u548ct\u6709\u5173\uff0c\u53f3\u8fb9\u53ea\u548ci\u6709\u5173\u3002\n\n\n\u7136\u540e\u5206\u522b\u5bf9\u4e24\u79cd\u8def\u5f84\u8fdb\u884c\u5dee\u5206\u3002dfs\u904d\u5386\u6811\uff0c\u7136\u540e\u5f53\u524d\u8282\u70b9\u4e3ai\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6876(tong)\u7edf\u8ba1\u3002tong\u7684\u4e0b\u6807\u5373\u4e3a\u7b49\u5f0f\u53f3\u8fb9\u7684\u8868\u8fbe\u5f0f\uff08\u7528i\u5373\u53ef\u7b97\u51fa\uff09\uff0c\u8bb0\u5f55\u7684\u5373\u4e3a\u7b49\u5f0f\u5de6\u8fb9\u7684\u8868\u8fbe\u5f0f\uff08\u7edf\u8ba1\u7b54\u6848\uff09\u3002\n\n\n\u7531\u4e8edeep[t]-len=deep[i]-w[i]\u4e2d\uff0c\u7b49\u5f0f\u5de6\u3001\u53f3\u53ef\u80fd\u51fa\u73b0\u8d1f\u6570\uff0c\u53ea\u9700\u628a\u6876\u7684\u4e0b\u6807\u7edf\u4e00\u5f80\u540e\u79fb300000\u5373\u53ef\uff08Pascal\u8bf7\u5ffd\u7565\uff09\u3002\n\n\n\u6700\u540e\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u5728lca\u4e0a\u88ab\u7edf\u8ba1\u5230\uff0c\u90a3\u4e48\u5b83\u5728s->lca(s,t)\u548clca(s,t)->t\u4e2d\u90fd\u88ab\u7edf\u8ba1\u4e86\u4e00\u904d\uff0c\u9700\u8981\u51cf\u53bb\u3002\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aTarjan\u6c42LCA\u5219 O(n+m)\uff0c\u500d\u589e\u7b49\u6c42LCA\u5219O(m log n)\uff0c\u5dee\u5206\u662fO(n)\u7684\u3002\u6211\u9009\u7528\u901f\u5ea6\u8f83\u5feb\u7684Tarjan\u6c42LCA\u3002\n\n\n\u4e3a\u65b9\u4fbf\u5927\u5bb6\uff08\u6211\uff09\u7406\u89e3\uff0c\u6211\u5728\u4ee3\u7801\u6838\u5fc3\u90e8\u5206\u589e\u6dfb\u4e86\u4e00\u4e9b\u6ce8\u91ca\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<cctype>\nusing namespace std;\n#define C c=getchar()\n#define N 300010\nint n,m,ne=0,nq=0,maxdeep=0;\nbool vis[N];\nint f[N],head[N],que[N],w[N],deep[N],mk[N],ans[N],tong[N<<1];\nvector<int>js[N],js2[N],js3[N];//\u7528\u4e8e\u5dee\u5206\u3002\u7531\u4e8e\u76f4\u63a5\u5f00\u6570\u7ec4\u4f1a\u70b8\uff0c\u800c\u5b9e\u9645\u8981\u7528\u7684\u7a7a\u95f4\u4e0d\u591a\uff0c\u6240\u4ee5\u7528vector \nstruct query{\n    int same,nxt,to,num;\n    bool flag;\n}q[N<<1];\nstruct edge{\n    int to,nxt;\n}e[N<<1];\nstruct men{\n    int x,y,len,lca;\n}a[N];\ninline int readint(){\n    char C;\n    for(;!isdigit(c);C);\n    int d=0;\n    for(;isdigit(c);C)\n    d=(d<<3)+(d<<1)+(c^'0');\n    return d;\n}\ninline void add_edge(int x,int y){\n    e[++ne].to=y;\n    e[ne].nxt=head[x];\n    head[x]=ne;\n    e[++ne].to=x;\n    e[ne].nxt=head[y];\n    head[y]=ne;\n}\ninline void add_que(int x,int y,int z){\n    q[++nq].to=y;\n    q[nq].same=nq+1;\n    q[nq].num=z;\n    q[nq].nxt=que[x];\n    que[x]=nq;\n    q[++nq].to=x;\n    q[nq].same=nq-1;\n    q[nq].num=z;\n    q[nq].nxt=que[y];\n    que[y]=nq;\n}\nint find(int x){\n    if(f[x]==x)return x;\n    return f[x]=find(f[x]);\n}\nvoid tarjan(int root){\n    for(int i=head[root];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(deep[v])continue;\n        if(maxdeep<(deep[v]=deep[root]+1))maxdeep=deep[v];//\u6c42\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u548c\u6811\u7684\u6700\u5927\u6df1\u5ea6 \n        tarjan(v);\n        f[v]=root;\n        vis[v]=true;\n    }\n    for(int i=que[root];i;i=q[i].nxt)\n    if(vis[q[i].to]&&!q[i].flag){\n        int p=q[i].num;\n        a[p].len=deep[a[p].x]+deep[a[p].y]-(deep[a[p].lca=find(q[i].to)]<<1);//\u987a\u4fbf\u7b97\u51fa\u6bcf\u4e2a\u4eba\u8dd1\u7684\u603b\u957f\u5ea6 \n        q[i].flag=q[q[i].same].flag=true;\n    }\n}//Tarjan\u6c42LCA \nvoid dfs1(int rt){//deep[s]=deep[i]+w[i]\n    int now=deep[rt]+w[rt],pre;//now\u8bb0\u5f55\u7b49\u5f0f\u53f3\u8fb9\uff0ctong\u7edf\u8ba1\u7b49\u5f0f\u5de6\u8fb9\u3002pre\u8bb0\u5f55\u5f00\u59cb\u65f6\u7684tong[now] \n    if(now<=maxdeep)pre=tong[now];//\u5f53now\u8d85\u8fc7\u6700\u5927\u6df1\u5ea6\u5219\u65e0\u9700\u8ba1\u7b97 \n    for(int i=head[rt];i;i=e[i].nxt)\n    if(deep[rt]<deep[e[i].to])dfs1(e[i].to);\n    tong[deep[rt]]+=mk[rt];\n    if(now<=maxdeep)ans[rt]+=tong[now]-pre;//\u5f53now\u8d85\u8fc7\u6700\u5927\u6df1\u5ea6\u5219\u65e0\u9700\u8ba1\u7b97\uff0c\u5426\u5219\u66f4\u65b0\u7b54\u6848\n    //\u7531\u4e8etong[now]\u5728\u6df1\u641c\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u53d8\u5316\uff0c\u90a3\u4e48\u53d8\u5316\u7684\u503c\u5c31\u662f\u53ef\u88ab\u89c2\u6d4b\u5230\u7684\u4eba\u6570\u3002 \n    for(int i=js[rt].size()-1;i>=0;--i)--tong[js[rt][i]];//\u628alca\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u51cf\u53bb \n}\nvoid dfs2(int rt){//deep[t]-len=deep[i]-w[i]\n    int now=deep[rt]-w[rt]+300000,pre;//now\u3001tong\u3001pre\u540c\u4e0a \n    pre=tong[now];\n    for(int i=head[rt];i;i=e[i].nxt)\n    if(deep[rt]<deep[e[i].to])dfs2(e[i].to);\n    for(int i=js2[rt].size()-1;i>=0;--i)++tong[js2[rt][i]+300000];//\u52a0\u4e0a\u7b49\u5f0f\u5de6\u8fb9\u7684\u4e1c\u897f \n    ans[rt]+=tong[now]-pre;//\u539f\u7406\u540c\u4e0a \n    for(int i=js3[rt].size()-1;i>=0;--i)--tong[js3[rt][i]+300000];//\u628a\u65e0\u7528\u8282\u70b9\u51cf\u53bb \n}\nint main(){\n    n=readint(),m=readint();\n    memset(vis,0,sizeof vis);\n    memset(deep,0,sizeof deep);\n    memset(ans,0,sizeof ans);\n    deep[1]=1;\n    for(int i=1;i<n;i++){\n        int u=readint(),v=readint();\n        add_edge(u,v);\n    }\n    for(int i=1;i<=n;++i)w[f[i]=i]=readint();\n    for(int i=1;i<=m;i++){\n        a[i].x=readint();\n        a[i].y=readint();\n        if(a[i].x!=a[i].y)\n        add_que(a[i].x,a[i].y,i);else{\n            a[i].len=0;\n            a[i].lca=a[i].x;\n        }\n    }//\u4fdd\u5b58LCA\u8be2\u95ee\uff0cTarjan \n    tarjan(1);\n    memset(tong,0,sizeof tong);\n    memset(mk,0,sizeof mk);//mk[i]\u8868\u793a\u7b2ci\u4e2a\u8282\u70b9\u4f5c\u4e3a\u8d77\u70b9\u591a\u5c11\u6b21 \n    for(int i=1;i<=m;++i){\n        ++mk[a[i].x];\n        js[a[i].lca].push_back(deep[a[i].x]);//js[i]\u5b58\u50a8lca\u4e3ai\u7684\u4eba\u7684\u8d77\u70b9\u7684\u6df1\u5ea6 \n    }\n    dfs1(1);//\u5904\u7406s->lca(s,t)\u8def\u5f84 \n    memset(tong,0,sizeof tong);\n    for(int i=1;i<=m;++i){\n        int f=deep[a[i].y]-a[i].len;\n        js2[a[i].y].push_back(f);//js2[i]\u5b58\u50a8\u7ec8\u70b9\u4e3ai\u7684\u4eba\u7684\u7ec8\u70b9\u7684\u6df1\u5ea6\u51cf\u53bb\u8fd9\u4e2a\u4eba\u8d70\u7684\u603b\u957f \n        js3[a[i].lca].push_back(f);//js3[i]\u5b58\u50a8lca\u4e3ai\u7684\u4eba\u7684\u7ec8\u70b9\u7684\u6df1\u5ea6\u51cf\u53bb\u8fd9\u4e2a\u4eba\u8d70\u7684\u603b\u957f\n        //\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7528\u6765\u5dee\u5206 \n    }\n    dfs2(1);\n    for(int i=1;i<=m;++i)\n    if(deep[a[i].x]-deep[a[i].lca]==w[a[i].lca])--ans[a[i].lca];\n    //\u5f53lca(s,t)\u6b63\u597d\u53ef\u4ee5\u89c2\u6d4b\u5230\u8fd9\u4e2a\u4eba\u65f6\uff0c\u5b83\u5728s->lca(s,t)\u548clca(s,t)->t\u90fd\u4f1a\u88ab\u7edf\u8ba1\u4e00\u6b21\uff0c\u6240\u4ee5\u53bb\u91cd\u3002\n    for(int i=1;i<n;++i)printf(\"%d \",ans[i]);\n    printf(\"%d\\n\",ans[n]);\n    return 0;\n}\n```\n[blog](http://www.cnblogs.com/Mrsrz/p/7688293.html)\n",
        "postTime": 1508324886,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "~~\u7eaa\u5ff5\u4e00\u4e0bnoip\u795e\u9898~~\n\n\u7ed3\u5408\u4ee3\u7801\u8bfb\u6587\u7ae0\u662f\u597d\u4e60\u60ef \u3002\n# [\u9898\u76ee](https://www.luogu.com.cn/problem/P1600)\n\n\u597d\u50cf\u7b80\u8ff0\u548c\u6ca1\u7b80\u8ff0\u5dee\u4e0d\u591a \u3002\n~~\u6240\u4ee5\u5077\u5de5\u51cf\u6599\u4e00\u4e0b~~ \u3002\n\n# \u5206\u6790\n\n\u9996\u5148\uff0c\u89c2\u5bdf\u90e8\u5206\u5206 \u3002\u6211\u4eec\u53d1\u73b0\u5b83\u6709\u6d4b\u8bd5\u70b9\u53ea\u4e0a\u884c\u6216\u8005\u4e4b\u4e0b\u884c \u3002\n\n\u7531\u6b64\u6211\u4eec\u5f97\u5230\u542f\u53d1 \uff0c\u6211\u4eec\u5c06\u4e00\u6bb5\u8fd0\u52a8**\u62c6\u5206\u4e3a\u4e0a\u884c\u548c\u4e0b\u884c**\u4e24\u4e2a\u90e8\u5206 \u3002\n\n\u663e\u7136\u4ed6\u4eec\u7684\u4e2d\u8f6c\u70b9\u662f\u4ed6\u4eec\u7684[\u6700\u8fd1\u516c\u5171\u7956\u5148](https://www.luogu.com.cn/problem/P3379) \u3002\n\n\u4f46\u8981\u6ce8\u610f**\u4e0d\u8981\u591a\u6b21\u5904\u7406\u516c\u5171\u7956\u5148** \u3002\u672c\u6587\u91c7\u7528\u5982\u4e0b\u62c6\u5206\uff08~~\u4e11\u964b\u52ff\u55b7~~ \uff09\uff1a\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vv00w3ox.png)\n\n\u63d0\u4f9b\u4ee3\u7801\uff1a\n\nLCA:\n```\nvoid lca1(int a,int f){\n\tfa[a][0]=f;\n\tdep[a]=dep[f]+1;\n\tfor(int i=1;i<=20;++i){\n\t\tfa[a][i]=fa[fa[a][i-1]][i-1];\n\t}\n\tfor(int i=ves[a];i;i=st[i].next){\n\t\tif(st[i].v!=f)lca1(st[i].v,a);\n\t}\n}\nint lca(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y);\n\tfor(int i=20;i>=0;i--){\n\t\tif(dep[fa[x][i]]<dep[y])continue;\n\t\tx=fa[x][i];\n\t}\n\tif(x==y)return y;\n\tfor(int i=20;i>=0;i--){\n\t\tif(fa[x][i]==fa[y][i])continue;\n\t\tx=fa[x][i],y=fa[y][i];\n\t}\n\treturn fa[x][0];\n}\n```\n\u62c6\u5206\u7a0b\u5e8f\uff1a\n```\nfor(int i=1;i<=m;++i){//add\u64cd\u4f5c\u540e\u9762\u89e3\u91ca\n\t\tint a,b,c;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tc=lca(a,b);int d=a;\n\t\tadd(c,dep[c]*2-dep[a],1);//\u6dfb\u52a0\u94fe\u8868\n\t\tadd(b,dep[c]*2-dep[a],2);//\u6b64\u4e3a\u4e0b\u884c\n\t\tif(c==a)continue;//\u4e0d\u5b58\u5728\u4e0a\u884c\n\t\tfor(int i=20;i>=0;i--){\n\t\t\tif(dep[fa[d][i]]<=dep[c])continue;\n\t\t\td=fa[d][i];\n\t\t}//\u500d\u589e\u6cd5\u6c42\u9876\u90e8\u7ed3\u70b9 \u3002\n\t\tadd(d,dep[a],1);\n\t\tadd(a,dep[a],2);//\u4e0a\u884c\u6dfb\u52a0\n\t}\n```\n\u5bf9\u4e8e\u4e0a\u884c\u6765\u8bf4\uff0c\u5176\u5f00\u59cb\u70b9\u4fbf\u662f\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9 ,\u5373\u4ee3\u7801\u4e2d\u7684 $a$ \uff0c\u8d21\u732e\u7684\u5c42\u6570\u4fbf\u662f $a$ \u7684\u5c42\u6570 \u3002 \u5bf9\u4e8e\u4e0b\u884c\u6765\u8bf4 \uff0c \u5176\u8d21\u732e\u7684\u5c42\u6570\u76f8\u5f53\u4e8e $dep[c]-(dep[a]-dep[c])$ \uff08\u8fd9\u4e2a\u503c\u53ef\u80fd\u4f1a\u7206\u8d1f\u6570\u7528 $y$ \u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\uff09\u53ef\u4ee5\u7406\u89e3\u4e3a\u5c06 $a$ \u70b9\u5f80\u4e0a\u7ffb\u540e\u6240\u5728\u7684\u5c42\u6570 \u3002\n\n\u4e3a\u4e86\u9632\u6b62\u7ed3\u70b9\u91cd\u590d\u88ab\u5206\u5230\u4e0a\u884c\u548c\u4e0b\u884c\u4e2d \uff0c\u4f7f\u7528\u70b9 $d$ \u8868\u662f\u7b2c\u4e00\u6bb5\u7684\u7ed3\u675f\u70b9 \u3002\n\u663e\u7136 $d$ \u4e3a $c$ \u7684\u513f\u5b50\u8282\u70b9\uff08\u6700\u8fd1\u7684\u90a3\u4e2a\uff09\uff0c\u4e14\u4e3a $a$ \u7684\u7956\u5148 \uff08\u53ef\u80fd\u4f1a\u6bd4\u8f83\u8fdc\uff09\u3002\n\n\u5728 $c=a$ \u65f6\u5219\u6ca1\u6709\u4e0a\u884c\u6bb5\u3002\n\n\u5982\u4f55\u6dfb\u52a0\u8def\u5f84\u4fe1\u606f\u5462\uff1f\n\n\u4e3a\u4e86\u540e\u671fdfs\u7684\u67e5\u627e \uff0c\u6211\u4eec\u4f7f\u7528\u94fe\u8868\u7ed3\u6784 \uff0c\u7c7b\u4f3c\u94fe\u5f0f\u524d\u5411\u5fc3\u7684\u65b9\u6cd5 \u3002\n\u5728\u9012\u5f52\u5230\u8be5\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u67e5\u627e \u3002\n\n```\nvoid add(int a,int b,int type){//\u4fe1\u606f\u4ec0\u4e48\u7528\u540e\u9762\u89e3\u91ca\u3002\n\tk++;\n\tw[k].u=a;//\u8be5\u8282\u70b9\n\tw[k].type=type;//\u7c7b\u578b\u4f4d\u4e8e\u4e0a\u65b9\u7684\u7ed3\u70b9\u4e3a1\uff0c\u4e0b\u65b9\u7684\u4e3a2.\n\tw[k].dep=b;//\u5bf9\u7b2c\u51e0\u5c42\u6709\u8d21\u732e\uff0c\u53ef\u80fd\u4f1a\u6709\u8d1f\u6570\n\tw[k].next=vesv[a];//\u94fe\u8868\u64cd\u4f5c\n\tvesv[a]=k;\n}\n```\n\u63a5\u4e0b\u6765\u5c31\u5269\u4e0b $dfs$ \u904d\u5386\u6811\u4e86\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u8be5\u70b9\u7684\u89c2\u5bdf\u5458\u7b2c $k$ \u79d2\u51fa\u73b0 \uff0c\u90a3\u4e48\u5b83\u89c2\u5bdf\u5230\u7684\u4eba\u4e00\u5b9a\u4f1a\u4ece\u79bb\u4ed6 $k$ \u8fdc\u7684\u7ed3\u70b9\u8dd1\u6765 \u3002\u4e8e\u662f\u6211\u4eec\u7528 $x$ \u6570\u7ec4\u8868\u793a\u6574\u6570\u8d21\u732e \uff0c$y$ \u8868\u793a\u8d1f\u6570\u8d21\u732e \uff08\u53ef\u80fd\u4f1a\u51fa\u73b0,\u5728\u4e0b\u884c\u65f6\uff09\u3002\n\n\u7531\u4e8e\u4e0d\u597d\u76f4\u63a5\u5728\u8def\u5f84\u4e0a\u7edf\u8ba1 \uff0c\u6240\u4ee5\u4f7f\u7528\u5dee\u5206\u5bf9\u5176\u7ef4\u62a4\u3002\n\u7ed9\u5f20\u56fe\u5427\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/kta95qyy.png)\n\n\u5927\u81f4\u662f\u8fd9\u6837\u7684 \u3002\n\n\u5148\u6c42\u5927\u8303\u56f4\uff0c\u5982\u4f55\u5220\u53bb\u591a\u4f59\u7684\u90e8\u5206 \u3002\n\n\u5177\u4f53\u70b9\u662f\u4ec0\u4e48\u5462 \uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u6765\u8bf4 \uff0c\u5176\u7b54\u6848\u8981\u4e0d\u7136\u4ece\u4e0a\u5f80\u4e0b\u8d70 \uff08\u5373\u4ece   $dep[a]-see[a]$ \u5f80\u4e0b\u8d70\uff09\uff0c\u8981\u4e48\u4ece\u4e0b\u5f80\u4e0a\u8d70\uff08\u5373 $dep[a]-see[a]$ \u5f80\u4e0a\u8d70\uff09\u3002\u7b54\u6848\u76f4\u63a5\u4ece\u4e4b\u524d\u8d21\u732e\u7684\u503c\u4e2d\u63d0\u53d6 \u3002\n\n\u753b\u4e2a\u56fe\u6a21\u62df\u4e00\u4e0b \uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u5728\u9012\u5f52\u5b50\u8282\u70b9\u524d\u63d0\u53d6\u7b54\u6848 \u6211\u4eec\u66f4\u65b0\u7684\u7ed3\u70b9\u662f\u5927\u8303\u56f4\u7684 \uff0c\u800c\u5728\u9012\u5f52\u5b50\u8282\u70b9\u540e \u6211\u4eec\u66f4\u65b0\u7684\u8282\u70b9\u662f\u5c0f\u8303\u56f4\u7684 \u3002\n\n\u54e6\u543c\uff01\u628a\u8fd9\u4e24\u4e2a\u4e00\u76f8\u51cf\u4e0d\u5c31\u662f\u6211\u4eec\u8981\u7684\u7b54\u6848\u4e86\u5417 \u3002\u5999\uff01\n\n\u770b\u4ee3\u7801\u6bd4\u8f83\u5f62\u8c61 \uff1a\n```\nvoid dfs(int a){\n\tfor(int i=vesv[a];i;i=w[i].next){\n\t\tif(w[i].type==1){\n\t    \tif(w[i].dep>=0)x[w[i].dep]++;//\u8d21\u732e\u589e\u52a0\n\t\t\telse y[-w[i].dep]++;}//\u8d1f\u6570\u5904\u7406\n\t}\n\tif(see[a]==0)ans[a]+=x[dep[a]];//\u4e3a0\u7279\u6b8a\u4f20\u9012\uff0c\u5426\u5219\u4f1a\u7ffb\u500d \u3002\n\telse{//\u6b64\u6b65\u6c42\u5927\u8303\u56f4\n\t\tans[a]+=x[dep[a]+see[a]];\n\t\tif(dep[a]-see[a]>=0)//\u5224\u65ad\u662f\u5426\u7279\u6b8a\u5904\u7406\n\t\t   ans[a]+=x[dep[a]-see[a]];\n\t\telse ans[a]+=y[see[a]-dep[a]];\n\t}\n\tfor(int i=ves[a];i;i=st[i].next)\n\t    if(st[i].v!=fa[a][0])dfs(st[i].v);\n\tfor(int i=vesv[a];i;i=w[i].next){\n\t\tif(w[i].type==2){\t//\u8d21\u732e\u7ed3\u675f\uff0c\u4e0d\u5bf9\u540e\u9762\u7684\u6570\u518d\u6709\u8d21\u732e\n\t\t    if(w[i].dep>=0)x[w[i].dep]--;\n\t\t\telse y[-w[i].dep]--;\n\t\t}\n\t}\n\tif(see[a]==0)ans[a]-=x[dep[a]];\n\telse{//\u5220\u53bb\u591a\u4f59\u90e8\u5206\n\t\tif(dep[a]-see[a]>=0)ans[a]-=x[dep[a]-see[a]];\n\t\telse ans[a]-=y[see[a]-dep[a]];\n\t\tans[a]-=x[dep[a]+see[a]];\n\t}\n}\n```\n# \u5b8c\u6574\u4ee3\u7801\n\n100\u884c\u4ee3\u7801 \uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n+n+m)$ ~~\u5982\u679c\u6c34\u5e73\u53ef\u4ee5\u7684\u8bdd~~\n(LCA+\u7b54\u6848\u7edf\u8ba1+\u8d21\u732e\u589e\u52a0) \u3010\u5ffd\u7565\u5e38\u6570\u3011\n\n\u89e3\u91ca\u5747\u5728\u4e0a\u6587\u5448\u73b0\u3002\n\n\uff08\u53ea\u662f\u4e3a\u4e86\u5b8c\u6574\u6027\uff09\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=600009;\nstruct ss{\n\tint u,v,next;\n}st[maxn*4];\nint k,ves[maxn],fa[maxn][25],see[maxn],dep[maxn],vesv[maxn],x[maxn*4],y[maxn*4],ans[maxn];\nvoid cc(int a,int b){//\u5efa\u8fb9 \n\tk++;\n\tst[k].u=a;\n\tst[k].v=b;\n\tst[k].next=ves[a];\n\tves[a]=k;\n}\nstruct way{\n\tint u,dep,next,type;\n}w[maxn*4];\nvoid add(int a,int b,int type){//\u4fe1\u606f\u4ec0\u4e48\u7528\u540e\u9762\u89e3\u91ca\u3002\n\tk++;\n\tw[k].u=a;//\u8be5\u8282\u70b9\n\tw[k].type=type;//\u7c7b\u578b\u4f4d\u4e8e\u4e0a\u65b9\u7684\u7ed3\u70b9\u4e3a1\uff0c\u4e0b\u65b9\u7684\u4e3a2.\n\tw[k].dep=b;//\u5bf9\u7b2c\u51e0\u5c42\u6709\u8d21\u732e\n\tw[k].next=vesv[a];//\u94fe\u8868\u64cd\u4f5c\n\tvesv[a]=k;\n}\nvoid lca1(int a,int f){//LCA\u81ea\u884c\u67e5\u770b\u6a21\u677f \n\tfa[a][0]=f;\n\tdep[a]=dep[f]+1;\n\tfor(int i=1;i<=20;++i){\n\t\tfa[a][i]=fa[fa[a][i-1]][i-1];\n\t}\n\tfor(int i=ves[a];i;i=st[i].next){\n\t\tif(st[i].v!=f)lca1(st[i].v,a);\n\t}\n}\nint lca(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y);\n\tfor(int i=20;i>=0;i--){\n\t\tif(dep[fa[x][i]]<dep[y])continue;\n\t\tx=fa[x][i];\n\t}\n\tif(x==y)return y;\n\tfor(int i=20;i>=0;i--){\n\t\tif(fa[x][i]==fa[y][i])continue;\n\t\tx=fa[x][i],y=fa[y][i];\n\t}\n\treturn fa[x][0];\n}\nvoid dfs(int a){\n\tfor(int i=vesv[a];i;i=w[i].next){\n\t\tif(w[i].type==1){\n\t    \tif(w[i].dep>=0)x[w[i].dep]++;//\u8d21\u732e\u589e\u52a0\n\t\t\telse y[-w[i].dep]++;}//\u8d1f\u6570\u5904\u7406\n\t}\n\tif(see[a]==0)ans[a]+=x[dep[a]];//\u4e3a0\u7279\u6b8a\u4f20\u9012\uff0c\u5426\u5219\u4f1a\u7ffb\u500d \u3002\n\telse{//\u6b64\u6b65\u6c42\u5927\u8303\u56f4\n\t\tans[a]+=x[dep[a]+see[a]];\n\t\tif(dep[a]-see[a]>=0)//\u5224\u65ad\u662f\u5426\u7279\u6b8a\u5904\u7406\n\t\t   ans[a]+=x[dep[a]-see[a]];\n\t\telse ans[a]+=y[see[a]-dep[a]];\n\t}\n\tfor(int i=ves[a];i;i=st[i].next)\n\t    if(st[i].v!=fa[a][0])dfs(st[i].v);\n\tfor(int i=vesv[a];i;i=w[i].next){\n\t\tif(w[i].type==2){\t//\u8d21\u732e\u7ed3\u675f\uff0c\u4e0d\u5bf9\u540e\u9762\u7684\u6570\u518d\u6709\u8d21\u732e\n\t\t    if(w[i].dep>=0)x[w[i].dep]--;\n\t\t\telse y[-w[i].dep]--;\n\t\t}\n\t}\n\tif(see[a]==0)ans[a]-=x[dep[a]];\n\telse{//\u5220\u53bb\u591a\u4f59\u90e8\u5206\n\t\tif(dep[a]-see[a]>=0)ans[a]-=x[dep[a]-see[a]];\n\t\telse ans[a]-=y[see[a]-dep[a]];\n\t\tans[a]-=x[dep[a]+see[a]];\n\t}\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n-1;++i){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tcc(a,b);\n\t\tcc(b,a);\n\t}\n\tdep[1]=1;k=0;\n\tlca1(1,0);\n\tfor(int i=1;i<=n;++i)scanf(\"%d\",&see[i]);//\u89c2\u5bdf\u65f6\u95f4 \n\tfor(int i=1;i<=m;++i){\n\t\tint a,b,c;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tc=lca(a,b);int d=a;\n\t\tadd(c,dep[c]*2-dep[a],1);//\u6dfb\u52a0\u94fe\u8868\n\t\tadd(b,dep[c]*2-dep[a],2);//\u6b64\u4e3a\u4e0b\u884c\n\t\tif(c==a)continue;//\u4e0d\u5b58\u5728\u4e0a\u884c\n\t\tfor(int i=20;i>=0;i--){\n\t\t\tif(dep[fa[d][i]]<=dep[c])continue;\n\t\t\td=fa[d][i];\n\t\t}//\u500d\u589e\u6cd5\u6c42\u9876\u90e8\u7ed3\u70b9 \u3002\n\t\tadd(d,dep[a],1);\n\t\tadd(a,dep[a],2);//\u4e0a\u884c\u6dfb\u52a0\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=n;i++){\n\t\tprintf(\"%d \",ans[i]);//\u8f93\u51fa \n\t} \n\treturn 0;\n} \n```\n\n\u611f\u8c22\u9605\u8bfb \uff0c\u6b22\u8fce\u7ea0\u9519 \uff08\u8bc4\u8bba\u70b9\u8d5e\uff09\u3002\n\n\n",
        "postTime": 1585735400,
        "uid": 220140,
        "name": "hekaiyu",
        "ccfLevel": 4,
        "title": "P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "# \u5929\u5929\u7231\u8dd1\u6b65 \u9898\u89e3\n\n### \u7c7b\u4f3c\u9898\u76ee\u63a8\u8350\n\n&emsp;&emsp;\u8fd9\u4e00\u9053\u9898\u5176\u5b9e\u6709\u4e00\u9053\u7c7b\u4f3c\u7684\u9898\u76ee\uff1a\u96e8\u5929\u7684\u5c3e\u5df4\u3002\u5728\u5206\u6790\u7684\u65f6\u5019\u4e24\u8005\u7684\u533a\u522b\u4ec5\u5728\u4e8e\uff1a\n\n- \u96be\u5ea6\uff1a\u96e8\u5929\u7684\u5c3e\u5df4$<$\u5929\u5929\u7231\u8dd1\u6b65\n\n- \u4ee3\u7801\u590d\u6742\u7a0b\u5ea6\uff1a\u96e8\u5929\u7684\u5c3e\u5df4$<$\u5929\u5929\u7231\u8dd1\u6b65\n\n- \u7406\u89e3\u96be\u6613\u7a0b\u5ea6\uff1a\u96e8\u5929\u7684\u5c3e\u5df4$<<$\u5929\u5929\u7231\u8dd1\u6b65\n\n&emsp;&emsp;\u6240\u4ee5\u8bf4\u8fd9\u4e24\u9053\u9898\u6709\u70b9\u77db\u76fe\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u5148\u5199\u4e00\u4e0b\u96e8\u5929\u7684\u5c3e\u5df4\u3002\uff08\u8fd9\u662f\u4e2a\u4eba\u89c2\u70b9\uff0c\u53ef\u80fd\u6bcf\u4f4d\u540c\u5b66\u60f3\u6cd5\u4e0d\u4e00\u6837\u6ef4\uff09\n\n### \u6b63\u6587\n\n&emsp;&emsp;\u4f17\u6240\u5468\u77e5\uff0c\u8fd9\u4e00\u9053\u9898\u6700\u539f\u59cb\u7684\u601d\u8def\u4fbf\u662fdfs\u3002\n\n&emsp;&emsp;\u5bf9\u4e8e**\u6bcf\u4e00\u4e2a\u89c2\u5bdf\u5458**\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684\u73a9\u5bb6\u3002\u5bf9\u4e8e**\u6bcf\u4e00\u4e2a\u73a9\u5bb6**\u8fdb\u884c\u4e00\u904d**\u641c\u7d22**\uff0c\u770b\u770b\u5728\u5f53\u524d\u89c2\u5bdf\u5458\u51fa\u73b0\u7684\u65f6\u95f4\u70b9\u6709\u591a\u5c11\u4e2a\u73a9\u5bb6\u7ecf\u8fc7\uff1b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n^{3})$\uff08\u6bcf\u4e00\u4e2a\u9ed1\u4f53\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n)$\uff09\n\n&emsp;&emsp;\u90a3\u4e48\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e0b\u4f18\u5316\u5462\uff1f\n\n&emsp;&emsp;\u8fd9\u662f\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u90a3\u4e48**\u5bf9\u4e8e\u641c\u7d22**\u6765\u8bf4\u53ef\u4ee5\u4f7f\u7528Lca\u4f18\u5316\uff0c\u5229\u7528\u500d\u589e\u7684\u65b9\u6cd5\u53ef\u4ee5\u628a**\u5355\u6b21\u65f6\u95f4\u590d\u6742\u5ea6**\u964d\u4f4e\u5230$O(log_{2}n)$\u3002\n\n&emsp;&emsp;\u90a3\u4e48**\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u73a9\u5bb6**\u53ef\u4e0d\u53ef\u4ee5\u8fdb\u884c\u67d0\u79cd\u4f18\u5316\u5462\uff1f\n\n&emsp;&emsp;\u597d\u50cf\u6709\u70b9\u8270\u96be\u2026\u2026\u770b\u6765\u66b4\u529b+\u4f18\u5316\u8fd9\u6761\u8def\u8d70\u4e0d\u4e0b\u53bb\u4e86\u3002\n\n&emsp;&emsp;\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u79cd\u601d\u8def\uff0c\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u79cd\u60f3\u6cd5\uff1a\n\n&emsp;&emsp;\u5bf9\u4e8e**\u6bcf\u4e00\u4e2a\u89c2\u5bdf\u5458**\uff0c\u8bb0\u5f55**\u603b\u5171\u6709\u591a\u5c11\u4e2a\u73a9\u5bb6**\u5bf9\u5f53\u524d\u8282\u70b9\u7684\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u3002\n\n&emsp;&emsp;\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u201c\u603b\u5171\u6709\u591a\u5c11\u4e2a\u73a9\u5bb6\u201d\u4e0e\u201c\u6bcf\u4e00\u4e2a\u73a9\u5bb6\u201d\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\uff08\u5176\u5b9e\u5c31\u662f\u6697\u793a\u4e86\u8981\u8fdb\u884c\u6811\u4e0a\u5dee\u5206\uff09\n\n&emsp;&emsp;\u6211\u4eec\u6765\u770b\u770b\u600e\u4e48\u8fdb\u884c\u6811\u4e0a\u5dee\u5206\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u6e38\u620f\u73a9\u5bb6\u8d70\u8fc7\u7684\u8def\u5f84\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a\u4ece\u4e0b\u5411\u4e0a\u7684\u90e8\u5206\u548c\u4ece\u4e0a\u5411\u4e0b\u7684\u90e8\u5206\u3002\n\n&emsp;&emsp;\u4e25\u8c28\u7684\u8bf4\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u70b9$u$\uff0c\u5176\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a$v$\uff0c$dep_x$\u8868\u793a\u70b9$x$\u7684\u6df1\u5ea6\uff0c\u90a3\u4e48\n\n\u4ece\u4e0b\u5411\u4e0a\uff1a$dep_u > dep_v$\n\n\u4ece\u4e0a\u5411\u4e0b\uff1a$dep_u < dep_v$\n\n&emsp;&emsp;\u6211\u4eec\u628a\u4e24\u4e2a\u8282\u70b9$u,v$\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u8bb0\u4f5c$Lca(u,v)$\uff0c\u90a3\u4e48\u6709\uff1a\n\n\u4ece\u4e0b\u5411\u4e0a\u7684\u90e8\u5206\uff1a$Path : u,Lca(u,v)$\n\n\u4ece\u4e0a\u5411\u4e0b\u7684\u90e8\u5206\uff1a$(Path : Lca(u,v),v)-Lca(u,v)$\n\n&emsp;&emsp;\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u4e0a\u5411\u4e0b\u7684\u90e8\u5206\u4e0d\u5305\u542b$Lca(u,v)$\u3002\n\n&emsp;&emsp;\u6211\u4eec\u518d\u6765\u770b\u770b\u600e\u6837\u7684\u8282\u70b9\u80fd\u591f\u5bf9\u5f53\u524d\u8282\u70b9\u4ea7\u751f\u8d21\u732e\u3002\n\n&emsp;&emsp;\u753b\u56fe\u6a21\u62df\u5f97\uff1a\u4e00\u4e2a\u70b9$s$\u80fd\u591f\u5bf9\u5f53\u524d\u8282\u70b9$x$\u505a\u51fa\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n\u4ece\u4e0b\u5411\u4e0a\u7684\u90e8\u5206\uff1a\n\n$dep_s=dep_x+w_x$\n\n\u4ece\u4e0a\u5411\u4e0b\u7684\u90e8\u5206\uff1a\n\n$dep_s + dep_x - 2 \\times dep_{Lca(s,x)}=w_x \\Leftrightarrow dep_s-2\\times dep_{Lca(s,x)}=w_x-d_x$\n\n&emsp;&emsp;\u89c2\u5bdf\u6211\u4eec\u5bfc\u51fa\u7684\u4e24\u4e2a\u5f0f\u5b50\uff0c\u6211\u4eec\u53d1\u73b0\uff1a**\u7b49\u53f7\u7684\u53f3\u8fb9\u53ea\u8ddfx\u6709\u5173**\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u51e0\u4e2a\u6876\uff0c\u5206\u522b\u8bb0\u5f55\u4ece\u4e0b\u5411\u4e0a\u7684\u90e8\u5206\u548c\u4ece\u4e0a\u5411\u4e0b\u7684\u90e8\u5206\u5728\u5f53\u524d\u503c\uff08\u5373$dep_x+w_x$\u6216$w_x-dep_x$\uff09\u7684\u5dee\u5206\u7ed3\u679c\u3002\u5728\u5dee\u5206\u7edf\u8ba1\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5206\u522b\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u6876\u7684\u72b6\u6001\u518d\u8fdb\u884c\u56de\u6eaf\u3002\n\n\u6ce8\uff1aa1\u3001a2\u4e3a\u4ece\u4e0b\u5411\u4e0a\uff0cb1\u3001b2\u4e3a\u4ece\u4e0a\u5411\u4e0b\u3002a\u4e3a\uff0bb\u4e3a$-$\u3002\n\n&emsp;&emsp;\u53ef\u4ee5\u4e0a\u4ee3\u7801\u4e86\uff1a\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#include <vector>\n#include <iostream>\n#include <stack>\nusing namespace std;\nconst int MAXN=300010;\nconst int LOGN=21;\nint cntEdge,head[MAXN],nxt[MAXN<<1],ver[MAXN<<1];\nint c1[MAXN<<1],c2[MAXN<<1],ans[MAXN];\nvector <int> a1[MAXN],b1[MAXN],a2[MAXN],b2[MAXN];\nint f[MAXN][LOGN],dep[MAXN],w[MAXN];\nbool vis[MAXN];\nint n,m;\ninline void add(int from,int to)\n{\n\tcntEdge++;\n\tnxt[cntEdge]=head[from];\n\thead[from]=cntEdge;\n\tver[cntEdge]=to;\n}\ninline void bfs()\n{\n\tqueue <int> q;\n\tmemset(vis,0,sizeof(vis));\n\tq.push(1); dep[1]=1;\n\twhile (!q.empty())\n\t{\n\t\tint h=q.front(); q.pop();\n\t\tvis[h]=true;\n\t\tfor (int i=head[h],j;i;i=nxt[i])\n\t\t{\n\t\t\tj=ver[i];\n\t\t\tif (vis[j]) continue;\n\t\t\tf[j][0]=h;\n\t\t\tdep[j]=dep[h]+1;\n\t\t\tq.push(j);\n\t\t}\n\t\tfor (int i=1;i<LOGN;i++)\n\t\t\tif (f[h][i-1])\n\t\t\t\tf[h][i]=f[f[h][i-1]][i-1];\n\t}\n}\nint lca(int a,int b)\n{\n\tif (dep[a]>dep[b]) swap(a,b);\n\tfor (int i=LOGN-1;i>=0;i--)\n\t\tif (dep[f[b][i]]>=dep[a])\n\t\t\tb=f[b][i];\n\tif (a==b) return a;\n\tfor (int i=LOGN-1;i>=0;i--)\n\t\tif (f[a][i]!=f[b][i])\n\t\t\ta=f[a][i],b=f[b][i];\n\treturn f[a][0];\n}\nvoid dfs(int x)\n{\n\tint val1=c1[w[x]+dep[x]],val2=c2[w[x]-dep[x]+n];\n\tvis[x]=true;\n\tfor (int i=head[x],j;i;i=nxt[i])\n\t{\n\t\tj=ver[i];\n\t\tif (vis[j]) continue;\n\t\tdfs(j);\n\t}\n\tfor (vector<int>::iterator i=a1[x].begin();i!=a1[x].end();i++) c1[*i]++;\n\tfor (vector<int>::iterator i=b1[x].begin();i!=b1[x].end();i++) c1[*i]--;\n\tfor (vector<int>::iterator i=a2[x].begin();i!=a2[x].end();i++) c2[*i]++;\n\tfor (vector<int>::iterator i=b2[x].begin();i!=b2[x].end();i++) c2[*i]--;\n\tans[x]+=c1[w[x]+dep[x]]-val1+c2[w[x]-dep[x]+n]-val2;\n}\nint main()\n{\n\t//freopen(\"in.txt\",\"r\",stdin);\n\t//freopen(\"out2.txt\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1,u,v;i<n;i++)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v); add(v,u);\n\t}\n\tbfs();\n\tfor (int i=1;i<=n;i++) scanf(\"%d\",&w[i]);\n\tfor (int i=1,s,t,l;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&s,&t);\n\t\tl=lca(s,t);\n\t\t//printf(\"%d %d %d\\n\",s,t,l);\n\t\ta1[s].push_back(dep[s]);\n\t\tb1[f[l][0]].push_back(dep[s]);\n\t\ta2[t].push_back(dep[s]-2*dep[l]+n);\n\t\tb2[l].push_back(dep[s]-2*dep[l]+n);\n\t}\n\tmemset(vis,0,sizeof(vis));\n\tdfs(1);\n\tfor (int i=1;i<=n;i++)\n\t\tprintf(\"%d%c\",ans[i],i==n?'\\n':' ');\n}\n```\n",
        "postTime": 1573049074,
        "uid": 113476,
        "name": "Gorun",
        "ccfLevel": 4,
        "title": "\u9898\u89e3\u3010P1600\u3011 \u5929\u5929\u7231\u8dd1\u6b65"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u521d\u6b65\u5224\u65ad\u8fd9\u4e2a\u9898\u80af\u5b9a\u8981\u8ba1\u7b97LCA\uff0c\u6211\u4eec\u3001\u5c31\u5199\u4e2a\u7b80\u5355\u7684\u500d\u589e\u53ea\u4f1a\u8fd9\u4e2a\u5427\uff0c\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8\u8fb9\u3002\n\n\u9009\u62e91\u53f7\u7ed3\u70b9\u5f00\u59cbdfs\n\ndfs\u8fc7\u7a0b\u4e2d\u8ba1\u7b97up[ ][ ]\u6570\u7ec4\uff08up[x][i]\u8868\u793a x \u7ed3\u70b9\u7684 2^i\u4ee3\u7956\u5148\u662f\u8c01\uff09\u548cdeep[ ]\u6570\u7ec4\uff08deep[x]\u8868\u793a\u7ed3\u70b9 x \u5728\u6811\u4e2d\u7684\u6df1\u5ea6\uff09\n\n\u7136\u540e\u6211\u4eec\u4e0d\u4ece\u8fd0\u52a8\u5458\u5165\u624b\uff0c\u800c\u662f\u679a\u4e3e\u89c2\u5bdf\u5458\u3002\u770b\u770b\u54ea\u4e9b\u7ed3\u70b9\u4f1a\u4e3a\u8fd9\u4e2a\u89c2\u5bdf\u5458i\u505a\u8d21\u732e\uff08\u521a\u597d\u5728wi\u79d2\u8dd1\u5230\u4ed6\u8fd9\u513f\uff09\u3002\n\n\u5927\u5934\u620f\u6765\u4e86\n\n# AC\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<list>\n#include<map> \n#include<queue> \n#include<set>\n#include<stack>\n#include<string>\n#include<typeinfo>\n#include<vector>\n#define maxn 900000//\u672c\u849f\u84bb\u5230\u73b0\u5728\u90fd\u60f3\u4e0d\u901a\u4e3a\u4ec0\u4e48\u8981\u5f00\u8fd9\u4e48\u5927 \nusing namespace std;\n\nstruct node1\n{\n    int begin,end,lca,len;\n}p[maxn];\n\nstruct node2\n{\n    int next,to;\n}q[maxn*2];\n\nstruct node3\n{\n    int nxt,v;\n}q1[maxn*4];\n\nstruct node4\n{\n    int ct1,ct2;\n}o[maxn*2];//\u672c\u849f\u84bb\u89c9\u5f97\u7ed3\u6784\u4f53\u597d\u7406\u89e3\u5c31\u5199\u4e86\u56db\u4e2a\n//\u5f53\u7136\u5927\u4f6c\u4eec\u7684\u601d\u7ef4\u80af\u5b9a\u4e0d\u9700\u8981 \n\nint n, m,cnt,cnt1,val[maxn];\nint first[maxn],ans[maxn];\nint ins1[maxn],del1[maxn],ins2[maxn],del2[maxn];\nint deep[maxn],up[maxn][20];//\u6700\u91cd\u8981\u7684\u7684\u4e24\u4e2a\u6570\u7ec4 \n\ninline void add(int a,int b)\n{\n    q[++cnt].next=first[a];\n    q[cnt].to=b;\n    first[a]=cnt;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9 \n\ninline void add1(int a,int b,int c)\n{\n    q1[++cnt1].nxt=ins1[a];\n    q1[cnt1].v=c;\n    ins1[a]=cnt1;\n    q1[++cnt1].nxt=del1[b];\n    q1[cnt1].v=c;\n    del1[b]=cnt1;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n\ninline void add2(int a,int b,int c)\n{\n    q1[++cnt1].nxt=ins2[a];\n    q1[cnt1].v=c;\n    ins2[a]=cnt1;\n    q1[++cnt1].nxt=del2[b];\n    q1[cnt1].v=c;\n    del2[b]=cnt1;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n\nvoid dfs(int x)\n{\n    for(int i=1;(1<<i)<=deep[x];i++)\n        up[x][i]=up[up[x][i-1]][i-1];\n    for(int i=first[x];i;i=q[i].next)\n    {\n        if(q[i].to==up[x][0]) continue;\n        up[q[i].to][0]=x;\n        deep[q[i].to]=deep[x]+1;\n        dfs(q[i].to);\n    }\n}//\u5efa\u6811\uff0c\u9884\u5904\u7406fa[][]\u6570\u7ec4, \u8ba1\u7b97deep[]\u6570\u7ec4\n\ninline void dfs1(int x)\n{\n    ans[x]=-o[deep[x]+val[x]].ct1-o[deep[x]-val[x]+n].ct2;\n    for(int i=first[x];i;i=q[i].next)\n    {\n        if(q[i].to==up[x][0]) continue;\n        dfs1(q[i].to);\n    }\n    for(int i=ins1[x];i;i=q1[i].nxt)\n        o[q1[i].v].ct1++;\n    for(int i=del1[x];i;i=q1[i].nxt)\n        o[q1[i].v].ct1--;\n    for(int i=ins2[x];i;i=q1[i].nxt)\n        o[q1[i].v+n].ct2++;\n    for(int i=del2[x];i;i=q1[i].nxt)\n        o[q1[i].v+n].ct2--;\n    ans[x]+=o[deep[x]+val[x]].ct1+o[deep[x]-val[x]+n].ct2;\n}//\u627e\u201c\u8d21\u732e\u201d \n\nint main()\n{\n    freopen(\"running.in\",\"r\",stdin);\n    freopen(\"running.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;i++)\n    {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a,b),add(b,a);\n    }\n    deep[1]=1;\n    dfs(1);\n    for(int i=1;i<=n;i++) \n        scanf(\"%d\",&val[i]);\n    for(int i=1;i<=m;i++) \n        scanf(\"%d%d\",&p[i].begin,&p[i].end); \n    for(int i=1;i<=m;i++)\n    {\n        int x=p[i].begin,y=p[i].end;\n        if(deep[x]<deep[y]) \n            swap(x,y);\n        if(deep[x]!=deep[y])\n            for(int i=18;i>=0;i--)\n                if(deep[up[x][i]]>=deep[y]) \n                    x=up[x][i];\n        if(x!=y)\n        {\n            for(int j=18;j>=0;j--)\n                if(up[x][j]!=up[y][j]) \n                    x=up[x][j],y=up[y][j];\n            x=up[x][0];\n        }\n        p[i].lca=x;\n        p[i].len=deep[p[i].begin]-deep[x]+deep[p[i].end]-deep[x];\n    }//ICA(x\u548cy\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148) \u5b9e\u5728\u4e0d\u60f3\u518d\u5f00\u51fd\u6570\u4e86\uff0c\u800c\u4e14\u8fd9\u6837\u663e\u5f97\u4e3b\u51fd\u6570\u6ca1\u90a3\u4e48\u7a7a\u865a \n    for(int i=1;i<=m;i++)\n    {\n        add1(p[i].begin,up[p[i].lca][0],deep[p[i].begin]);\n        add2(p[i].end,p[i].lca,deep[p[i].end]-p[i].len);\n    }\n    dfs1(1);\n    for(int i=1;i<=n;i++)\n        printf(\"%d \",ans[i]);//\u5b8c\u7f8e\u8f93\u51fa\n    //\u7ec8\u4e8e\u7ed3\u675f\u4e86 QAQ \n    return 0;\n}\n```\n\n#### \u6700\u540e\u5410\u69fd\u4e00\u4e0b\u6211\u5230\u73b0\u5728\u8fd8\u6ca1\u8fc72016\u5e74\u7684\u6bd2\u7624\u4f18\u79c0\u6570\u636e\n",
        "postTime": 1571926866,
        "uid": 71174,
        "name": "PXY_lover",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u7528\u7684\u662f\u4e00\u79cd\u5f88\u5bb9\u6613\u7406\u89e3\u4f46\u5199\u8d77\u6765\u5374\u6709\u70b9\u5c0f\u70e6\u7684\u5dee\u5206\u3002\n## \u601d\u8def\n\u7b97\u6cd5\u6a21\u578b\u6784\u5efa\uff1a\n\t\u672c\u9898\u5b9e\u9645\u4e0a\u6c42\u7684\u662f\u4e24\u79cd\u60c5\u51b5\uff1a\n\t\t\t\t\t\t\t\t\n\t1.\u5728i\u8282\u70b9\u4e0b\u65b9\u7684Wi\u5c42\u6709\u591a\u5c11\u4e2a \u8d77\u70b9,\n\t2.\u5728i\u8282\u70b9\u4e0b\u65b9\u7684\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u7684\u7ec8\u70b9\u3002\n\n\u60c5\u51b51\uff1a![\u60c5\u51b5\u4e00](https://img-blog.csdnimg.cn/20190801110255214.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjIxNjA3,size_16,color_FFFFFF,t_70)\u60c5\u51b52\uff1a\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20190801111025512.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjIxNjA3,size_16,color_FFFFFF,t_70)\u73b0\u5728\u8003\u8651\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u4f5c\u7528\u57df\uff1a\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20190801111623937.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjIxNjA3,size_16,color_FFFFFF,t_70)\u63a5\u7740\u6211\u4eec\u8003\u8651\u5982\u4f55\u5904\u7406\uff0c\u5982\u679c\u662f\u94fe\u72b6\u63a5\u6784\u662f\u53ef\u4ee5\u76f4\u63a5\u5dee\u5206\u7684\uff0c\u5728\u6811\u4e0a\uff0c\u6211\u4eec\u540c\u6837\u4e5f\u53ef\u4ee5\u5dee\u5206\u3002\n\u4e5f\u5c31\u662f\u5728\u672b\u8282\u70b9\u7684\u518d\u4e0a\u4e00\u4e2a\u8282\u70b9\u6253\u4e0a\u4e00\u4e2adel\u6807\u8bb0\u3002\n\n\t\u800c\u6211\u4eec\u7684\u7b54\u6848\u5c31\u662f\u6b64\u8282\u70b9\u7684\u5b50\u6811\u7684\u8d77\u70b9\u96c6\u7fa4\u4e2d\uff1a\n\t\tdep[j]=dep[i]+W[i] \u7684j\u8282\u70b9\u7684\u4e2a\u6570\n\t\t\u5373cnt1[ dep[i]+W[i] ]\n\t\u6b64\u8282\u70b9\u4e2d\u7ec8\u70b9\u96c6\u7fa4\u4e2d\uff1a\n\t\tdep[j]-dep[i]=Len-W[i]\u7684\u8282\u70b9j\u7684\u4e2a\u6570\n\t\t\u5316\u7b80\u5f97\uff1a dep[j]-Len=dep[i]-W[i]\n\t\t\u5bf9\u4e8e\u7ec8\u70b9\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6211\u4eec\u5b58\u50a8\u4ed6\u7684Dep[j]-Len\n\t\t\u5219\u7b54\u6848\u4e3acnt2[ dep[i]-W[i] ]\n\t\u6700\u540e\u518d\u51cf\u53bb\u8be5\u5b50\u6811\u4e2d\u7684del1\u548cdel2\n\u5982\u4f55\u5904\u7406\u5b50\u6811\u4fe1\u606f\uff1a\n\t\n\t\u5c06\u6bcf\u4e2a\u8282\u70b9\u8fdb\u5165\u65f6\u7684cnt1,cnt2,del1,del2\u4fe1\u606f\u8bb0\u5f55\n\t\u5728\u626b\u63cf\u5b8c\u4ed6\u7684\u5b50\u6811\u540e\u7684cnt1,cnt2,del1,del2\u76f8\u51cf\n\t\u5373\u53ef\u5f97\u5230\u5b50\u6811\u4e0a\u7684cnt1,cnt2,del1,del2\n\t\u4f46\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u53ea\u4f1a\u5173\u5fc3cnt1,del1\u7684dep[i]+W[i]\n\t                  \u548ccnt2,del2\u7684Dep[i]-W[i]\n\t\u6240\u4ee5\u53ea\u8981\u7ef4\u62a4\u8fd9\u4e9b\u503c\u7684\u4fe1\u606f\u5c31\u884c\u4e86\u3002\n\n\u561f\u561f\u565c\uff0c\u63d0\u5230\u73b0\u5728\u5df2\u7ecf\u57fa\u672c\u4e0a\u505a\u5b8c\u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5b58\u50a8\u90a3\u4e9b\u4fe1\u606f\uff0c\u5c06\u6bcf\u4e2a\u8d77\u70b9\u3001\u7ec8\u70b9\u3001LCA\u7684\u4fe1\u606f\u653e\u5230\u6bcf\u4e2a\u8282\u70b9\u662f\u4e0d\u73b0\u5b9e\u7684\uff08\u7a7a\u95f4\u8981\u5f00n^2\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u4ed6\u4eec\u5168\u90e8\u5b58\u50a8\u4e0b\u6765\uff0c\u518d\u6309\u7167\u4ed6\u4eec\u79bb\u5f00dfs\u641c\u7d22\u6808\u65f6\u7684\u65f6\u95f4\u6233\u6392\u5e8f\uff0c\u4e4b\u540e\u7528while\u628a\u6392\u5b8c\u5e8f\u7684\u6570\u7ec4\u7684\u5c3e\u90e8\u4f9d\u6b21\u53d6\u51fa\u5373\u53ef\u3002\n## Code\n\n```cpp\n#include<bits/stdc++.h>\n#define FOR(i,a,b) for(int i=a;i<=b;++i)\n#define LL long long\n#define Maxn 300000\n#define Ban 300000\n#define IL inline\n\nusing namespace std;\n\nint read(){\n    char c=getchar(); int flag=1, x=0;\n    while(!isdigit(c)){ if(c=='-') flag=-1; c=getchar(); }\n    while(isdigit(c) ){ x=x*10+(c-'0'); c=getchar(); }\n    return flag*x;\n}\n\nint n,m;\n\nstruct Graph_Type{\n    struct LINE{\n        int st,en,pre;\n    }line[Maxn*2+10];\n    int head[Maxn+10], tot=0;\n    IL void add(int a,int b){\n        line[++tot]=(LINE){ a,b,head[a] }; head[a]=tot;\n        line[++tot]=(LINE){ b,a,head[b] }; head[b]=tot;\n    }\n    int Fa[Maxn+10][30], dep[Maxn+10]; int dfn[Maxn+10], cnt=0;\n    int ord[Maxn+10],cnt2=0;\n    IL void dfs1(int now,int F){\n        Fa[now][0]=F; dfn[now]=++cnt; dep[now]=dep[F]+1;\n        FOR(i,1,20) Fa[now][i]=Fa[ Fa[now][i-1] ][i-1];\n        for(int i=head[now];i;i=line[i].pre){\n            int E=line[i].en;\n            if(E==F) continue;\n            dfs1(E,now);\n        }\n        ord[now]=++cnt2;\n    }\n    IL int LCA(int x,int y){\n        if(dfn[x]<dfn[y]) swap(x,y);\n        for(int i=20;i>=0;i--)\n            if(dfn[Fa[x][i]]>dfn[y])\n                x=Fa[x][i];\n        return Fa[x][0];\n    }\n}S;\n\nint T[Maxn+10];\nint data[Maxn+10];\nstruct Chg_Type{\n    int id,data;\n}add1[Maxn+10],add2[Maxn+10],del1[Maxn+10],del2[Maxn+10];\nint cnt;\nbool cmp(Chg_Type a,Chg_Type b){\n    return S.ord[a.id]<S.ord[b.id];\n}\n\nint Ans[Maxn+10];\nint A1[Maxn+10],A2[2*Maxn+10],D1[Maxn+10],D2[2*Maxn+10];\nint nA1,nA2,nD1,nD2;\nIL void dfs(int now){\n    //cout<<\" ^ \"<<now<<\" \"<<S.dfn[now]<<endl;\n    int data1=S.dep[now]+T[now]; int data2=S.dep[now]-T[now]+Ban;\n    int tA1=A1[data1], tA2=A2[data2], tD1=D1[data1], tD2=D2[data2];\n    \n    for(int i=S.head[now];i;i=S.line[i].pre){\n        int E=S.line[i].en;\n        if(E==S.Fa[now][0]) continue;\n        dfs(E);\n    }\n    \n    while( nA1<=cnt && add1[nA1].id==now )\n        A1[add1[nA1].data]++, nA1++;\n    while( nA2<=cnt && add2[nA2].id==now )\n        A2[add2[nA2].data]++, nA2++;\n    while( nD1<=cnt && del1[nD1].id==now )\n        D1[del1[nD1].data]++, nD1++;\n    while( nD2<=cnt && del2[nD2].id==now )\n        D2[del2[nD2].data]++, nD2++;\n\n    \n    Ans[now] = ( A1[data1]-tA1 )+( A2[data2]-tA2 )-( D1[data1]-tD1 )-( D2[data2]-tD2 );\n    \n    return;\n}\n\nint main(){\n    \n    n=read(); m=read();\n    FOR(i,1,n-1){\n        int a=read(), b=read();\n        S.add(a,b);\n    }\n    S.dfs1(1,0);\n    FOR(i,1,n) T[i]=read();\n    FOR(i,1,m){\n        int a=read(); int b=read(); int L=S.LCA(a,b);\n        int Len=S.dep[a]+S.dep[b]-2*S.dep[L];\n        ++cnt;\n        add1[cnt].id=a; add1[cnt].data=S.dep[a];\n        add2[cnt].id=b; add2[cnt].data=S.dep[b]-Len+Ban;\n        del1[cnt].id=S.Fa[L][0]; del1[cnt].data=S.dep[a];\n        del2[cnt].id=L; del2[cnt].data=S.dep[b]-Len+Ban;\n    }  \n    sort(add1+1,add1+cnt+1,cmp);\n    sort(add2+1,add2+cnt+1,cmp);\n    sort(del1+1,del1+cnt+1,cmp);\n    sort(del2+1,del2+cnt+1,cmp);\n\n    nA1=1; nA2=1; nD1=1; nD2=1;\n    S.ord[0]=n+10;\n    dfs(1);\n\n    FOR(i,1,n) cout<<Ans[i]<<\" \";\n    \n    return 0;\n}\n```\n\n\t\n\n",
        "postTime": 1564630937,
        "uid": 29304,
        "name": "DYI_ZJZGC",
        "ccfLevel": 0,
        "title": "p1600 \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "#### \u9898\u610f\n\n\u7ed9\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u503c $W_i$\n\n\u7ed9 $m$ \u6761\u8def\u5f84\uff0c\u4ece $S_i$ \u5230 $T_i$\uff0c\u8d70\u4e00\u6761\u8fb9\u8981\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0c\u5982\u679c\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u8d70\u8def\u5e76\u6070\u5728 $W_u$ \u65f6\u95f4\u8d70\u5230 $u$ \u70b9\uff0c\u5bf9 $u$ \u7684\u7b54\u6848\u8d21\u732e $1$\n\n\u6c42\u6700\u540e\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\n\n$n, m\\le 300000, 0\\le W_i\\le n$\n\n#### \u5f0f\u5b50\n\n\u770b\u5230\u9898\u76ee\u7684\u7b2c\u4e00\u6b65\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u901a\u8fc7\u4e00\u4e2a\u5f0f\u5b50\u6765\u8868\u8fbe\u51fa $ans[u]$ \u7684\u503c\uff0c\u800c\u4e0d\u662f\u679a\u4e3e\u6bcf\u6761\u8def\u5f84\u5e76\u8003\u8651\u5bf9\u54ea\u4e9b\u70b9\u505a\u4e86\u8d21\u732e\u3002\n\n\u6211\u4eec\u4f1a\u601d\u8003\u4ec0\u4e48\u6837\u7684\u8def\u5f84\u4f1a\u8fc7 $u$\uff0c\u62ff\u6837\u4f8b\u4e3e\u4f8b\uff1a\n\n![](https://i.niupic.com/images/2019/06/08/_50.png)\n\n\u8fc7\u70b9 $4$ \u7684\u8def\u5f84\u4f1a\u6709 $1\\rightarrow 6, 2\\rightarrow 6, 3\\rightarrow 6, 6\\rightarrow 1, 5\\rightarrow 6\\cdots$\n\n\u7ecf\u8fc7\u5206\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u8def\u5f84 $S,T$ \u8fc7\u70b9 $u$ \u5f53\u4e14\u4ec5\u5f53\uff1a\n\n- $lca(S,T)$ \u662f $u$ \u7684\u7956\u5148 \uff08\u6216 $lca(S,T)=u$\uff09\n- $S,T$ \u4e0d\u4f1a\u90fd\u4e0d\u5728 $u$ \u7684\u5b50\u6811\u4e2d\n\n\u6bd4\u5982\u6837\u4f8b\u4e2d\u8fc7\u70b9 $4$ \u7684\u8def\u5f84\uff0c$1\\rightarrow 6,2\\rightarrow 6$ \u6ee1\u8db3 $T$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\uff0c$6\\rightarrow 1$ \u6ee1\u8db3 $S$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\uff0c$5\\rightarrow 6$ \u6ee1\u8db3 $S,T$ \u90fd\u5728 $u$ \u7684\u5b50\u6811\u4e2d\u3002\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u5230 $u$ \u7684\u65f6\u95f4\u6070\u597d\u662f $W_u$\n\n\u5f53\u53ea\u6709 $S$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\uff0c\u6211\u4eec\u80fd\u5f88\u5bb9\u6613\u5730\u53d1\u73b0\u5230 $u$ \u7684\u65f6\u95f4\u662f $dep_u-dep_S$\uff0c\u6240\u4ee5\u65f6\u95f4\u662f $W_u$ \u5f53\u4e14\u4ec5\u5f53 $dep_S=dep_u+W_u$ \u4e86\u3002\n\n\u5f53\u53ea\u6709 $T$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\uff0c\u8fd9\u6761\u8def\u5f84\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n![](https://i.niupic.com/images/2019/06/08/_51.png)\n\n\u90a3\u4e48\u663e\u7136\u5230 $u$ \u6240\u9700\u65f6\u95f4 $2dep_{lca}-dep_S-dep_u$\uff0c\u6240\u4ee5\u65f6\u95f4\u662f $W_u$ \u5f53\u4e14\u4ec5\u5f53 $dep_u+W_u=2dep_{lca}-dep_S$ \uff08\u4e0d\u77e5\u9053\u4f60\u662f\u5426\u6ce8\u610f\u5230\u5173\u4e8e\u672a\u77e5\u7684 $S,T$ \u7684\u53d8\u91cf\u653e\u5728\u4e00\u8fb9\uff0c\u800c $dep_u+W_u$ \u653e\u5728\u4e86\u53e6\u4e00\u8fb9\uff09\n\n\u5f53 $S,T$ \u90fd\u5728 $u$ \u7684\u5b50\u6811\u4e2d\uff0c\u65f6\u95f4\u662f $W_u$ \u5f53\u4e14\u4ec5\u5f53 $dep_S=dep_u+W_u$\n\n\u90a3\u4e48\u7b54\u6848\u547c\u4e4b\u6b32\u51fa\uff1a $ans[u]$ \u7684\u7b54\u6848\u7531\u4e0b\u9762\u4e09\u4e2a\u90e8\u5206\u6c42\u51fa\uff08\u9996\u5148\u6211\u4eec\u5047\u5b9a $S\\rightarrow T$ \u6ee1\u8db3 $lca$ \u662f $u$ \u7684\u7956\u5148\u6216\u8005 $lca=u$\uff09\n\n- $A = $ \u6240\u6709 $S$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\u4e14 $dep_S=dep_u+W_u$ \u7684\u8def\u5f84 $S\\rightarrow T$ \u4e2a\u6570\u3002\n- $B=$ \u6240\u6709 $T$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\u4e14 $2dep_{lca}-dep_S=dep_u+W_u$ \u7684\u8def\u5f84 $S\\rightarrow T$ \u4e2a\u6570\u3002\n- $C = $ \u6240\u6709 $S,T$ \u90fd\u5728 $u$ \u7684\u5b50\u6811\u4e2d\u4e14 $dep_S=dep_u+W_u$ \u7684\u8def\u5f84 $S\\rightarrow T$ \u4e2a\u6570\u3002\n\n\u7b54\u6848\u662f $ans[u]=A+B-C$\uff0c\u8fd9\u662f\u5bb9\u65a5\u5f97\u5230\u3002\n\n#### \u6c42 C\n\n$S,T$ \u90fd\u5728 $u$ \u7684\u5b50\u6811\u4e2d\u4e14 \"$lca(S,T)$ \u662f $u$ \u7684\u7956\u5148\u6216 $lca(S,T)=u$\" \u610f\u5473\u7740 $lca(S,T)=u$.\n\n\u6240\u4ee5\u6211\u4eec\u679a\u4e3e\u6240\u6709 $u$\uff0c\u5e76\u679a\u4e3e\u6240\u6709 $lca(S,T)=u$ \u7684\u8def\u5f84\uff0c\u518d\u5224\u65ad $dep_S=dep_u+W_u$\uff0c\u5c31\u80fd\u628a\u8fd9\u4e00\u90e8\u5206\u7684\u7b54\u6848\u6c42\u51fa\u6765\u3002\n\n\u6362\u4e2a\u89d2\u5ea6\uff1a\u679a\u4e3e\u6240\u6709 $lca(S,T)$\uff0c\u5224\u65ad $dep_S=dep_{lca(S,T)}+W_{lca(S,T)}$\uff0c\u5e76\u5bf9 $ans[lca(S,T)]$ \u505a\u8d21\u732e\u3002\n\n\u6c42 C\uff1a\n\n```cpp\nfor (i = 1; i <= M; ++i)\n{\n    int u = Q[i].lc;\n    if (dep[u] + W[u] == dep[Q[i].u]) --ans[u];\n}\n```\n\n#### \u4e00\u4e2a\u79d1\u6280\n\n\u5728\u6c42 A \u4e4b\u524d\uff0c\u5148\u770b\u4e00\u4e2a\u4e8b\uff1a\u5feb\u901f\u5730\u679a\u4e3e\u6240\u6709 $S=$ \u5b9a\u503c\u7684\u8def\u5f84 $S\\rightarrow T$ \u679a\u4e3e\u4e00\u904d\u3002\n\n\u5982\u679c\u4f60\u77e5\u9053\u90bb\u63a5\u8868\u7684\u672c\u8d28\uff1a $n$ \u4e2a\u94fe\u8868\u3002\n\n\u90a3\u4e48\u4f60\u5c31\u4f1a\u8fd9\u4e2a\u64cd\u4f5c\u4e86\u3002\n\n```cpp\nstruct query\n{\n    int u, v, lc, next; //u,v \u8868\u793a\u8def\u5f84 u - >v\uff0clc = lca(u, v)\n} Q[MAXN];\nstruct vector\n{\n    query E[MAXN]; int head[MAXN], Elen;\n    void add(int u, const query& k)\n    {\n        ++Elen, E[Elen] = k, E[Elen].next = head[u], head[u] = Elen;\n    } // \u5728\u7b2c u \u4e2a\u90bb\u63a5\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n    void clear()\n    {\n        for (int i = 1; i <= N; ++i) head[i] = 0;\n        Elen = 0;\n    } // \u91cd\u7f6e\n    query operator[] (int t) { return E[t]; } //\u65b9\u4fbf\n} V;\n```\n\n#### \u6c42 A\n\n$dep_u+W_u$ \u662f\u5b9a\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u4efb\u52a1\u770b\u8d77\u6765\u50cf\u662f\u627e\u4e00\u4e2a\u8303\u56f4\u5185 $dep_S=$ \u4e00\u4e2a\u5b9a\u503c\u7684 $S$ \u7684\u4e2a\u6570\u3002\n\n\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u6876\uff0c\u5982\u679c\u6876\u4e0d\u884c\u6211\u4eec\u518d\u601d\u8003\u5176\u5b83\u79d1\u6280\u3002\n\n\u6211\u4eec\u4f1a\u6df1\u641c\uff0c\u5177\u4f53\u662f\u50cf\u8fd9\u6837\uff1a\n\n```cpp\n// \u8bbe B \u4e3a\u6876\uff0cB[i] \u8868\u793a dep[S]=i \u7684 S->T \u7684\u8def\u5f84\u4e2a\u6570\nvoid dfs1(int u, int ff)\n{\n    1. ans[u] -= B[dep[u] + W[u]];\n    2. \u904d\u5386\u5176\u5b83\u8282\u70b9\n    3. \u5bf9\u6240\u6709\u8def\u5f84 S->T \u6ee1\u8db3 S=u\uff0c++B[dep[S]]\n    4. ans[u] += B[dep[u] + W[u]];\n    5. \u5bf9\u6240\u6709\u8def\u5f84 S->T \u6ee1\u8db3 lca=u, --B[dep[S]]\n}\n```\n\n\u90a3\u4e48\u6211\u5230\u5e95\u5728\u8bf4\u4ec0\u4e48\u5462\uff1f\n\n\u4e8b\u5b9e\u4e0a\u8fd9\u662f\u4e2a\u7c7b\u4f3c\u52a8\u6001\u89c4\u5212\u7684\u8fc7\u7a0b\uff0c\u5408\u5e76\u513f\u5b50\u7684\u4e00\u5806\u72b6\u6001\uff0c\u5e76\u505a\u6539\u52a8\uff0c\u4e3a\u7956\u5148\u8bb0\u5f55\u7b54\u6848\u505a\u51c6\u5907\u3002\n\n\u7b2c $2$ \u6b65\u505a\u5b8c\u540e\uff0c\u6240\u6709\u6ee1\u8db3 $dep_{lca}\\le u$\uff0c$S$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\uff08$S\\not= u$\uff09 \u7684 $S\\rightarrow T$ \u7684 $dep_S$ \u90fd\u88ab\u653e\u8fdb\u4e86\u6876\u3002\n\n\u7b2c $3$ \u6b65\u505a\u5b8c\u540e\uff0c\u6211\u4eec\u52a0\u5165\u4e86 $S=u$ \u7684 $S\\rightarrow T$.\n\n\u90a3\u4e48\u6b64\u65f6\u770b\u8d77\u6765 $B[dep_u+W_u]$ \u76f4\u63a5\u662f\u7b54\u6848\u3002\n\n\u4f46\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u505a\u7b2c $1$ \u6b65\uff1f\n\n![](https://i.niupic.com/images/2019/06/08/_50.png)\n\n\u6bd4\u5982\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u7b97 $ans[1]$ \u7684 $A$ \u90e8\u5206\u65f6\uff0c\u5148\u53bb\u4e86 $2$\uff0c\u518d\u53bb $4$ \u65f6\uff0c\u6876\u4e2d\u4e0d\u4ec5\u542b\u4e86 $S$ \u5728 $4$ \u5b50\u6811\u5185\u60c5\u51b5\uff0c\u4e5f\u542b $S$ \u5728 $2$ \u5b50\u6811\u5185\u60c5\u51b5\u3002\n\n\u4e3a\u4e86\u6392\u9664\u5144\u5f1f\u8282\u70b9\u7684\u7b54\u6848\uff0c\u5148\u505a\u7b2c $1$ \u6b65\u628a\u5144\u5f1f\u8282\u70b9\u7684\u7b54\u6848\u53bb\u6389\uff0c\u7b2c $2$ \u6b65\u5c06\u7b54\u6848\u52a0\u4e0a\u3002\n\n\u7b2c $5$ \u6b65\u4e2d\uff0c\u6240\u6709\u6ee1\u8db3 $dep_{lca}=u$ \u7684 $S\\rightarrow T$ \u5168\u4ece\u6876\u4e2d\u5220\u9664\u3002\n\n\u5728\u505a\u5b8c\u6240\u6709\u7684\u4e8b\u60c5\u540e\uff0c\u6240\u6709\u6ee1\u8db3 $dep_{lca}< u$\uff0c$S$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\u7684 $S\\rightarrow T$ \u7684 $dep_S$ \u90fd\u88ab\u653e\u8fdb\u4e86\u6876\u3002\n\n\u90a3\u4e48\u8dd1\u5230 $u$ \u7684\u7236\u4eb2\u4e0a\u65f6\uff0c\u6876\u4e2d\u53c8\u662f \"\u6240\u6709\u6ee1\u8db3 $dep_{lca}\\le u$\uff0c$S$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\uff08$S\\not= u$\uff09 \u7684 $S\\rightarrow T$ \u7684 $dep_S$ \" \u4e86\u3002\n\n#### \u6c42 B\n\n\u5176\u5b9e\u5dee\u4e0d\u591a\u3002\u53ea\u9700\u8981\u6ce8\u610f $2dep_{lca}-dep_S\\in [-N,2N]$\uff0c\u5728\u7528\u6876\u7684\u65f6\u5019\u8ba9 $B[i]$ \u8868\u793a $dep=i-N$ \u7684\u4e2a\u6570\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n\ntypedef long long ll;\nll read()\n{\n    ll ret = 0; char c = getchar();\n    while (c < '0' || c > '9') c = getchar();\n    while (c >= '0' && c <= '9') ret = ret * 10 + c - '0', c = getchar();\n    return ret;\n}\n\ntemplate <typename T>\nvoid swap(T& a, T& b) { T t = a; a = b, b = t; }\n\n#define MAXN 300005\nstruct node\n{\n    int v, next;\n} E[MAXN << 1]; int head[MAXN], Elen;\nvoid add(int u, int v)\n{\n    ++Elen, E[Elen].v = v, E[Elen].next = head[u], head[u] = Elen;\n}\n\nint fa[MAXN][21], dep[MAXN], siz[MAXN];\nvoid dfs(int u, int ff)\n{\n    int i; fa[u][0] = ff, dep[u] = dep[ff] + 1, siz[u] = 1;\n    for (i = 1; i <= 20; ++i) fa[u][i] = fa[fa[u][i - 1]][i - 1];\n    for (i = head[u]; i; i = E[i].next) if (E[i].v != ff) dfs(E[i].v, u), siz[u] += siz[E[i].v];\n}\nint lca(int u, int v)\n{\n    int i; if (dep[u] < dep[v]) swap(u, v);\n    for (i = 20; i >= 0; --i) if (dep[fa[u][i]] >= dep[v]) u = fa[u][i];\n    if (u == v) return u;\n    for (i = 20; i >= 0; --i) if (fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];\n    return fa[u][0];\n}\n\nint N, M, W[MAXN], B[MAXN << 2], ans[MAXN];\n\nstruct query\n{\n    int u, v, lc, next;\n} Q[MAXN];\nstruct vector\n{\n    query E[MAXN]; int head[MAXN], Elen;\n    void add(int u, const query& k)\n    {\n        ++Elen, E[Elen] = k, E[Elen].next = head[u], head[u] = Elen;\n    }\n    void clear()\n    {\n        for (int i = 1; i <= N; ++i) head[i] = 0;\n        Elen = 0;\n    }\n    query operator[] (int t) { return E[t]; }\n} Vu, Vv, Vl;\n\nvoid dfs1(int u, int ff)\n{\n    int i;\n    ans[u] -= B[dep[u] + W[u]];\n    for (i = head[u]; i; i = E[i].next) if (E[i].v != ff) dfs1(E[i].v, u);\n    for (i = Vu.head[u]; i; i = Vu[i].next) ++B[dep[Vu[i].u]], Vl.add(Vu[i].lc, Vu[i]);\n    ans[u] += B[dep[u] + W[u]];\n    for (i = Vl.head[u]; i; i = Vl[i].next) --B[dep[Vl[i].u]];\n}\nvoid dfs2(int u, int ff)\n{\n    int i;\n    ans[u] -= B[dep[u] - W[u] + N];\n    for (i = head[u]; i; i = E[i].next) if (E[i].v != ff) dfs2(E[i].v, u);\n    for (i = Vv.head[u]; i; i = Vv[i].next) ++B[(dep[Vv[i].lc] << 1) - dep[Vv[i].u] + N], Vl.add(Vv[i].lc, Vv[i]);\n    ans[u] += B[dep[u] - W[u] + N];\n    for (i = Vl.head[u]; i; i = Vl[i].next) --B[(dep[Vl[i].lc] << 1) - dep[Vl[i].u] + N];\n}\n\nint main()\n{\n\t#ifndef ONLINE_JUDGE\n\tfreopen(\"input.in\", \"r\", stdin);\n\tfreopen(\"output.out\", \"w\", stdout);\n\t#endif\n\n    N = read(), M = read(); int i, u, v;\n    for (i = 1; i < N; ++i) u = read(), v = read(), add(u, v), add(v, u);\n    for (i = 1; i <= N; ++i) W[i] = read();\n    dfs(1, 0);\n    for (i = 1; i <= M; ++i)\n    {\n        Q[i].u = read(), Q[i].v = read(), Q[i].lc = lca(Q[i].u, Q[i].v);\n        Vu.add(Q[i].u, Q[i]), Vv.add(Q[i].v, Q[i]);\n    }\n    dfs1(1, 0);\n    Vl.clear();\n    for (i = 1; i <= N; ++i) B[i] = 0;\n    dfs2(1, 0);\n    for (i = 1; i <= M; ++i)\n    {\n        int u = Q[i].lc;\n        if (dep[u] + W[u] == dep[Q[i].u]) --ans[u];\n    }\n    for (i = 1; i <= N; ++i) printf(\"%d \", ans[i]);\n    return 0;\n}\n```\n\n",
        "postTime": 1559991956,
        "uid": 62308,
        "name": "Mr_Wu",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "# \u95f2\u8bdd\n\u4e3a\u4e86\u7406\u6e05\u8fd9\u9053\u9898\u76ee\u7684\u601d\u8def\uff0c\u6211\u662f\u8fb9\u5199\u535a\u5ba2\u8fb9\u505a\u9898\u7684\uff0cqwq\u3002\n# \u9898\u76ee\u94fe\u63a5  \n[\u6d1b\u8c37](https://www.luogu.org/problemnew/show/P1600)\n\n# \u9898\u89e3  \n\u9996\u5148\u5bf9\u53d8\u91cf\u8fdb\u884c\u58f0\u660e\n```cpp\ndep[i]  \u8868\u793ai\u53f7\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u662f\u5230\u6839\u8282\u70b9\u7684\u6df1\u5ea6\nw[i]    \u8868\u793ai\u53f7\u89c2\u6d4b\u70b9\u89c2\u6d4b\u7684\u65f6\u95f4\ndfn[i]  \u8868\u793ai\u53f7\u70b9\u7684dfn\u5e8f\nsz[i]   \u8868\u793ai\u53f7\u70b9\u7684\u5b50\u6811\u5927\u5c0f\n```\n\n---\n![p1](https://s2.ax1x.com/2019/05/01/EY3shT.png)  \n\u4ee5\u4e0a\u56fe\u4e3a\u4f8b\uff0c\u84dd\u8272\u70b9\u8868\u793a\u4e00\u4e2a\u73a9\u5bb6\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u3002  \n\u4e0d\u59a8\u5148\u5047\u8bbe\u5de6\u8fb9\u7684\u70b9\u662f\u8d77\u70b9\uff0c\u53f3\u8fb9\u7684\u70b9\u662f\u7ec8\u70b9\uff0c\u5206\u522b\u7528$s$\u548c$t$\u6765\u8868\u793a   \n\u90a3\u4e48\u53ef\u80fd\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u7684\u70b9\u4e00\u5b9a\u662f\u5728\u8fd9\u4e2a\u4ece$s$\u5230$t$\u4e0a\u7684\u89c2\u6d4b\u70b9\u3002  \n\u8bb0\u89c2\u6d4b\u70b9\u4e3a$g$\u3002  \n\u5bf9\u8fd9\u4e2a\u95ee\u9898\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba  \n\n---\n## Case 1\uff1a\u89c2\u6d4b\u70b9\u5728\u8d77\u70b9\u5230$LCA$\u7684\u8def\u5f84\u4e0a  \n![p2](https://s2.ax1x.com/2019/05/01/EY8HI0.png)  \n\u6211\u4eec\u628a\u8fd9\u4e2a\u60c5\u51b5\u8bb0\u4e3a\u89c2\u6d4b\u70b9\u5728$A$\u79cd\u8def\u7ebf\u4e0a\u3002  \n\u5982\u679c\u8fd9\u4e2a\u89c2\u6d4b\u70b9\u80fd\u591f\u89c2\u6d4b\u5230\u8fd9\u4e2a\u8d77\u70b9\uff0c\u90a3\u4e48\u4e00\u5b9a\u6ee1\u8db3\u4ee5\u4e0b\u7684\u5f0f\u5b50\n\n$$dep[s]-dep[g]=w[g]$$\n\n\u53ef\u4ee5\u4ece\u56fe\u4e2d\u89c2\u5bdf\u5230\uff0c$dep[s]-dep[g]$\u7684\u503c\u5c31\u662f$s$\u5230\u89c2\u6d4b\u70b9$g$\u7684\u65f6\u95f4\u957f\u5ea6\u3002  \n\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981$\u00b11$\uff0c\u662f\u56e0\u4e3a\u65f6\u95f4\u4e00\u5f00\u59cb\u662f\u4ece$0$\u5f00\u59cb\u8ba1\u6570\u7684\u3002  \n\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5b9e\u9645\u7684\u901a\u8fc7\u65f6\u95f4\u5c31\u662f\u901a\u8fc7\u8fb9\u7684\u6570\u91cf\u6216\u8005\u662f\u8def\u5f84\u4e0a\u7ecf\u8fc7\u70b9\u7684\u6570\u91cf$-1$\u3002  \n\u5bf9\u4e8e\u73b0\u6709\u5f0f\u5b50\u8fdb\u884c\u53d8\u5f62\u3002  \n\n$$dep[s]=dep[g]+w[g]$$\n\n\u53ef\u4ee5\u53d1\u73b0\u7b49\u5f0f\u7684\u53f3\u8fb9\u662f\u9898\u76ee\u7ed9\u5b9a\u7684\u5b9a\u503c\u3002  \n\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5728$A$\u7c7b\u8def\u5f84\u4e0a\u7684\u89c2\u6d4b\u70b9\uff0c\u8d77\u70b9\u7684\u6df1\u5ea6\u7b49\u4e8e$dep[g]+w[g]$\u7684\u4e2a\u6570\u3002  \n\u66b4\u529b\u6c42\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u590d\u6742\u5ea6\u5dee\u4e0d\u591a\u662f$n\\times (dep[g]+w[g]-dep[s])$\uff0c\u660e\u663e\u8fc7\u4e0d\u4e86\uff0c\uff08\u522b\u5fd8\u4e86\u540e\u9762\u8fd8\u6709\u4e00\u4e2a\u60c5\u51b5\u9700\u8981\u8ba8\u8bba\uff09  \n\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u95ee\u9898\u53d8\u4e00\u4e0b\uff0c\u53d8\u6210\u5728\u4ee5$g$\u4e3a\u6839\u7684\u5b50\u6811\u5185\uff0c\u6709\u591a\u5c11\u4e2a\u8d77\u70b9\u6ee1\u8db3\u4ee5\u4e0a\u7684\u6027\u8d28\u3002  \n\u8f6c\u6362\u6210\u5b50\u6811\u7684\u95ee\u9898\u5c31\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u4e86\u3002  \n**\u5148\u626f\u4e00\u4e2a\u5e38\u8bc6**\uff1a\u5728\u6811\u4e0a\uff0c\u4e00\u68f5\u4ee5$u$\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u533a\u95f4\u662f$[dfn[u],sz[u]+dfn[u]-1]$  \n\u95ee\u9898\u8f6c\u5316\u6210\u4e86\uff1a\u5728\u533a\u95f4$[dfn[u],sz[u]+dfn[u]-1]$\u4e2d\u6709\u591a\u5c11\u4e2a\u6df1\u5ea6\u7b49\u4e8e$dep[g]+w[g]$\u7684\u8d77\u70b9\u7684\u4e2a\u6570\u3002  \n\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u6df1\u5ea6\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\uff08\u52a8\u6001\u5f00\u70b9\uff0c\u5426\u5219\u4f1aMT\u98de\u6389\uff09  \n\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5728\u6df1\u5ea6\u4e3a$dep[g]+w[g]$\u7684\u7ebf\u6bb5\u6811\u4e2d\u5728\u533a\u95f4$[dfn[u],sz[u]+dfn[u]-1]$\u4e2d\u6709\u591a\u5c11\u4e2a\u8d77\u70b9\u3002 \n\u5982\u679c\u66b4\u529b\u4fee\u6539\u533a\u95f4\u5e76\u4e14\u67e5\u8be2\uff0c\u4fee\u6539\u7684\u590d\u6742\u5ea6\u662f$O(nlog^2n)$\uff0c\u6765\u4e00\u6761\u94fe\u5c31\u7206\u70b8\u4e86\u3002   \n\u8003\u8651\u6811\u4e0a\u5dee\u5206\uff0c\u5176\u5b9e\u8fd9\u4e2a\u4e1c\u897f\u6211\u4e5f\u60f3\u4e86\u5f88\u4e45\uff0c\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u5dee\u5206\uff0c\u4f46\u662f\u5176\u5b9e\u633a\u7b80\u5355\u7684\u3002 \n\n![](https://s2.ax1x.com/2019/05/02/EYqux1.png)\n\n### \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u5dee\u5206\uff1f\n\u5dee\u5206\u662f\u4ec0\u4e48\uff1f  \n\u5dee\u5206\u53ea\u7684\u524d\u4e00\u4e2a\u7b54\u6848\u548c\u540e\u4e00\u4e2a\u7b54\u6848\u4e4b\u95f4\u7684\u5dee\u503c\u3002  \n\u5728\u6811\u4e0a\u4e5f\u5c31\u53d8\u6210\u4e86\u7956\u5148\u548c\u513f\u5b50\u4e4b\u95f4\u7684\u5173\u7cfb\u3002  \n\u5148\u4e0d\u8981\u7ba1\u7ebf\u6bb5\u6811\u8fd9\u4e2a\u4e1c\u897f\uff0c\u4f1a\u59a8\u788d\u6211\u4eec\u601d\u8003\u3002  \n\u56e0\u4e3a\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u5982\u679c\u7528\u5dee\u5206\u8ba1\u7b97\u4e00\u68f5\u6811\u4e0a\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u5c31\u662f\u8fd9\u9897\u6811\u91cc\u9762\u6240\u6709\u5dee\u5206\u503c\u5168\u90e8$+$\u8d77\u6765\u3002  \n\u5728\u8fd9\u91cc\u56e0\u4e3a\u8def\u5f84$s->lca$\u7684\u7b54\u6848\u53ea\u6709$s$\u8fd9\u4e2a\u8d77\u70b9\u6709\u8d21\u732e\u3002  \n\u6a21\u62df\u4e00\u4e0b\uff0c\u5982\u679c\u662f$s$\u7684\u5b50\u6811\uff0c\u5f88\u660e\u663e\u8fd9\u4e2a\u7b54\u6848\u4e0d\u4f1a\u4ea7\u751f\u8d21\u732e\u3002\n\u5982\u679c\u662f$s->lca$\u7684\u94fe\u4e0a\uff0c\u8fd9\u4e2a\u7b54\u6848\u4f1a\u5bf9$g$\u8d21\u732e$+1$\u3002\n\u5982\u679c\u662flca\u4ee5\u4e0a\u7684\u7956\u5148\uff0c\u90a3\u4e48\u5c31\u5728$lca$\u4e0a\u6253\u4e00\u4e2a$-1$\u7684\u6807\u8bb0\u3002  \n\u62bd\u8c61\u7684\u6982\u5ff5\u5c31\u662f\uff1a\u5728\u8fd9\u4e2a\u6df1\u5ea6\u4e0a\u53ea\u6709$s->lca$\u8fd9\u4e00\u6bb5\u533a\u95f4\u7684\u7b54\u6848\u53ef\u4ee5$+1$\u3002  \n\u90a3\u4e48\u5957\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86\u3002  \n\n## Case 2\uff1a\u89c2\u6d4b\u70b9\u5728$LCA$\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u4e0a  \n\u4e0b\u9762\u4e00\u534a\u5c31\u7b80\u5355\u4e86\uff0c\u56fe\u6211\u5c31\u4e0d\u753b\u4e86\u3002  \n\u5f97\u5230\u4ea7\u751f\u8d21\u732e\u7684\u5f0f\u5b50\n$$dep[s]+dep[g]-2\\times dep[lca]=w[g]$$\n\u524d\u4e00\u534a\u7684\u5f0f\u5b50\u5176\u5b9e\u5c31\u662f\u6c42$s->g$\u7684\u6700\u77ed\u8ddd\u79bb\u3002  \n\u63a8\u5bfc\u5f97\u5230\n\n$$dep[s]-2dep[lca]=w[g]-dep[g]$$\n\n\u7b49\u5f0f\u53f3\u8fb9\u53c8\u662f\u4e00\u4e2a\u5b9a\u503c\u3002  \n\u4eff\u7167\u4e0a\u9762\u7684\u5957\u8def\uff1a\u5bf9\u4e8e\u6df1\u5ea6\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u6253\u6811\u4e0a\u5dee\u5206\u6807\u8bb0\u3002  \n\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\uff1a$O(nlogn)$  \n\n**tips**  \n* Case 2\u4e2d\u7684\u5dee\u503c\u53ef\u80fd<0\uff0c\u9700\u8981\u6574\u4f53\u53f3\u79fb\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u4e5f\u8981\u6574\u4f53\u53f3\u79fb\uff0c\u5927\u5c0f\u81ea\u5df1\u63a7\u5236\u3002  \n* \u4e0d\u8981\u4e24\u6b21\u90fd\u628a$-1$\u7684\u6807\u8bb0\u90fd\u6253\u5728$lca$\u4e0a\uff0c\u8fd9\u6837\u4f1a\u51cf\u6389$lca$\u7684\u7b54\u6848\uff0c\u6709\u4e00\u4e2a\u6807\u8bb0\u6253\u5728$lca$\u7684\u7236\u4eb2\u4e0a\u3002  \n* \u505a\u5b8c\u4e00\u904d\u540e\u8981\u8bf7\u7a7a\u6570\u7ec4\u3002  \n\n---\n# Code\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace IOstream {\n    #define gc getchar\n    template <typename T> inline void read(T &x) {\n        x = 0; T fl = 1; char c = 0;\n        for (; c < '0' || c > '9'; c = gc()) if (c == '-') fl = -1;\n        for (; c >= '0' && c <= '9'; c = gc()) x = (x << 1) + (x << 3) + (c ^ 48);\n        x *= fl;  \n    }\n    template <typename T> inline void write(T x) {\n        if (x < 0) putchar('-'), x *= -1;\n        if (x > 9) write(x / 10);\n        putchar(x % 10 + '0');\n    }\n    template <typename T> inline void writeln(T x) { write(x); puts(\"\"); }\n    template <typename T> inline void writesp(T x) { write(x); putchar(' '); }\n    #undef gc\n} using namespace IOstream;\nconst int N = 3e6 + 5;\nstruct edge {\n    int to, nt;\n} E[N << 1];\nstruct pl {\n    int s, t, lca;\n} a[N];\nint H[N];\nint sz[N], fa[N], dep[N], son[N], top[N], dfn[N], rt[N];\nint ecnt, n, m, __dfn = 0; \nint w[N], ans[N];\nvoid add_edge(int u, int v) {\n    E[++ ecnt] = (edge) {v, H[u]}; \n    H[u] = ecnt;\n}\nvoid dfs1(int u, int ft = 0) {\n    fa[u] = ft; sz[u] = 1; dep[u] = dep[ft] + 1;\n    int maxson = -1; \n    for (int e = H[u]; e; e = E[e].nt) {\n        int v = E[e].to; \n        if (v == fa[u]) continue;\n        dfs1(v, u);\n        sz[u] += sz[v];\n        if (sz[v] > maxson) maxson = sz[v], son[u] = v;\n    }\n}\nvoid dfs2(int u, int tp = 1) {\n    top[u] = tp; \n    dfn[u] = ++ __dfn;\n    if (!son[u]) return;\n    dfs2(son[u], top[u]);\n    for (int e = H[u]; e; e = E[e].nt) {\n        int v = E[e].to;\n        if (v == fa[u] || v == son[u]) continue;\n        dfs2(v, v);\n    }\n}\nint LCA(int u, int v) {\n    while (top[u] != top[v]) {\n        if (dep[top[u]] < dep[top[v]]) swap(u, v);\n        u = fa[top[u]];\n    }\n    return dep[u] < dep[v] ? u : v;\n}\nnamespace seg {\n    int tot;\n    struct node {\n        int lc, rc, s;\n    } tr[N * 10];\n    void clear() { tot = 0; memset(tr, 0, sizeof(tr)); }\n    void upd(int &nod, int l, int r, int k, int val) {\n        if (!k) return;\n        if (!nod) nod = ++ tot;\n        tr[nod].s += val;\n        if (l == r) return;\n        int mid = (l + r) >> 1;\n        if (k <= mid) upd(tr[nod].lc, l, mid, k, val);\n        else upd(tr[nod].rc, mid + 1, r, k, val);\n    }\n    int query(int nod, int l, int r, int ql, int qr) {\n        if (!nod) return 0;\n        if (ql <= l && r <= qr) return tr[nod].s;\n        int mid = (l + r) >> 1, res = 0;\n        if (ql <= mid) res += query(tr[nod].lc, l, mid, ql, qr);\n        if (qr > mid) res += query(tr[nod].rc, mid + 1, r, ql, qr);\n        return res; \n    }\n}\nsigned main() {\n    read(n); read(m);\n    for (int i = 1, u, v; i < n; i ++) {\n        read(u); read(v); \n        add_edge(u, v); add_edge(v, u);\n    }\n    dep[0] = 0; dfs1(1);  \n    dfs2(1); \n    for (int i = 1; i <= n; i ++) read(w[i]);\n    for (int i = 1; i <= m; i ++) {\n        read(a[i].s); read(a[i].t);\n        a[i].lca = LCA(a[i].s, a[i].t);\n    }\n    seg::clear(); memset(rt, 0, sizeof(rt));\n    for (int i = 1; i <= m; i ++) { \n        int root = dep[a[i].s];\n        seg::upd(rt[root], 1, n, dfn[a[i].s], 1);\n        seg::upd(rt[root], 1, n, dfn[fa[a[i].lca]], -1);\n    } \n    for (int i = 1; i <= n; i ++) \n        ans[i] += seg::query(rt[dep[i] + w[i]], 1, n, dfn[i], sz[i] + dfn[i] - 1);\n    seg::clear(); memset(rt, 0, sizeof(rt));\n    for (int i = 1; i <= m; i ++) {\n        int root = dep[a[i].s] - dep[a[i].lca] * 2 + 2 * n;\n        seg::upd(rt[root], 1, n, dfn[a[i].t], 1);\n        seg::upd(rt[root], 1, n, dfn[a[i].lca], -1);\n    } \n    for (int i = 1; i <= n; i ++) \n        ans[i] += seg::query(rt[w[i] - dep[i] + 2 * n], 1, n, dfn[i], sz[i] + dfn[i] - 1);\n\tfor (int i = 1; i <= n; i ++) \n        writesp(ans[i]);\n    return 0;\n}\n```",
        "postTime": 1556761241,
        "uid": 35567,
        "name": "Ayers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u9996\u5148\u5217\u51fa\u4e24\u4e2a\u65b9\u7a0b\uff1a\u5982\u679ci\u8282\u70b9\u7684\u89c2\u5bdf\u5458\u80fd\u591f\u89c2\u5bdf\u5230\u7531s->t\u7684\u90a3\u4e2a\u4eba\uff0c\u90a3\u4e48:\n\n$$dep[s] - dep[i] = w[i], dep[t] - dep[i] = len - w[i]$$\n\n\u6574\u7406\u5f97\u5230\uff1a$$dep[s] = w[i] + dep[i] (1), dep[t] - len = dep[i] - w[i] (2)$$\n\n\u4e5f\u5c31\u662f\u8bf4\uff1a\u53ea\u8981\u8d77\u70b9\u6ee1\u8db3\u65b9\u7a0b(1)\u548c\u7ec8\u70b9\u6ee1\u8db3\u65b9\u7a0b(2)\u7684\u90fd\u80fd\u88abi\u770b\u5230\uff0c\u4e0b\u9762\u8003\u8651\u4e0b\u5dee\u5206\uff1a\u56e0\u4e3a\u6811\u7684dfs\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u4ee5\u8282\u70b9i\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u7b54\u6848\u5c31\u662f\uff1a\u626b\u63cf\u5b50\u6811\u540e\u7684 - \u626b\u63cf\u5b50\u6811\u524d\u7684\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4eba\u4eces->t\uff0c\u5728s\u8282\u70b9+dep[s]\uff0c\u5728t\u8282\u70b9+dep[t] - len\uff0c\u5728lca\u8282\u70b9-dep[s], \u5728fa[lca]\u8282\u70b9-(dep[t] - len)\uff08s+, t+, lca-, fa[lca]-\uff0c\u8fd9\u6837\u624d\u80fd\u505a\u5230\u8865\u5145\u4e0d\u6f0f\uff0c\u81ea\u884c\u8111\u8865\uff09\uff0c\u6bcf\u6b21\u5904\u7406\u8be5\u70b9\u7684\u5dee\u5206\u6807\u8bb0\u66f4\u65b0cnt1\u548ccnt2\u6570\u7ec4\uff08cnt1\u8868\u793a\u5173\u4e8e\u8d77\u70b9\u7684\u5dee\u5206\u503c\u7684\u4e2a\u6570\uff0ccnt2\u8868\u793a\u5173\u4e8e\u7ec8\u70b9\u7684\u5dee\u5206\u503c\u7684\u4e2a\u6570\uff0c\u5bf9\u5e94\u4e0a\u9762\u7684\u65b9\u7a0b\uff09\uff0c\u8282\u70b9i\u7684\u7b54\u6848\u5c31\u662f:$$(\u626b\u63cf\u540e\u7684cnt1[w[i] + dep[i]] + \u626b\u63cf\u540e\u7684cnt2[dep[i] - w[i]]) - (\u626b\u63cf\u524d\u7684cnt1[w[i] + dep[i]] + \u626b\u63cf\u524d\u7684cnt2[dep[i] - w[i]])$$\n\n\u6700\u540e\u8fd8\u8981\u6ce8\u610fcnt\u6570\u7ec4\u8bb0\u5f55\u7684\u5dee\u5206\u503c\u53ef\u80fd\u51fa\u73b0\u8d1f\u6570\uff0c\u6240\u4ee5\u8981\u7ed9\u4f5c\u5dee\u7684\u5dee\u5206\u503c+offset\uff0c\u6765\u4fdd\u8bc1\u4e0b\u6807\u662f\u5408\u6cd5\u7684\u3002\n\n\n# code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nnamespace IO{\n    inline ll read(){\n        ll i = 0, f = 1; char ch = getchar();\n        for(; (ch < '0' || ch > '9') && ch != '-'; ch = getchar());\n        if(ch == '-') f = -1, ch = getchar();\n        for(; ch >= '0' && ch <= '9'; ch = getchar()) i = (i << 3) + (i << 1) + (ch - '0');\n        return i * f;\n    }\n    inline void wr(ll x){\n        if(x < 0) putchar('-'), x = -x;\n        if(x > 9) wr(x / 10);\n        putchar(x % 10 + '0');\n    }\n}using namespace IO;\n\nconst int N = 3e5 + 5, M = 3e5 + 5;\nint n, m, ecnt, adj[N], nxt[M << 1], go[M << 1];\nint cnt1[N * 3], cnt2[N * 3], w[N], offset;\nint fa[N][25], dep[N], ans[N];\nstruct node{int type, val, flag;};\nvector<node> tag[N];\n\ninline void addEdge(int u, int v){nxt[++ecnt] = adj[u], adj[u] = ecnt, go[ecnt] = v;}\n\ninline void pre(int u, int f){\n    dep[u] = dep[f] + 1;\n    fa[u][0] = f;\n    for(int i = 1; i <= 20; i++) fa[u][i] = fa[fa[u][i - 1]][i - 1];\n    for(int v, e = adj[u]; e; e = nxt[e]){\n        if((v = go[e]) == f) continue;\n        pre(v, u);\n    }\n}\n\ninline int getLca(int u, int v){\n    if(dep[u] < dep[v]) swap(u, v);\n    int delta = dep[u] - dep[v];\n    for(int i = 20; i >= 0; i--) if((1 << i) & delta) u = fa[u][i];\n    if(u == v) return u;\n    for(int i = 20; i >= 0; i--) if(fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];\n    return fa[u][0];\n}\n\ninline void addTag(int u, int v){\n    int lca = getLca(u, v), len = dep[u] + dep[v] - 2 * dep[lca];\n    tag[u].push_back((node){1, dep[u], 1}), tag[v].push_back((node){2, dep[v] - len + offset, 1});\n    tag[lca].push_back((node){1, dep[u], -1}), tag[fa[lca][0]].push_back((node){2, dep[v] - len + offset, -1});\n}\n\ninline void dfs(int u, int f){\n    int cur = cnt1[w[u] + dep[u]] + cnt2[dep[u] - w[u] + offset];\n    for(int i = 0; i < tag[u].size(); i++){\n        if(tag[u][i].type == 1) cnt1[tag[u][i].val] += tag[u][i].flag;\n        else cnt2[tag[u][i].val] += tag[u][i].flag;\n    }\n    for(int v, e = adj[u]; e; e = nxt[e]){\n        if((v = go[e]) == f) continue;\n        dfs(v, u);\n    }\n    ans[u] = -cur + cnt1[w[u] + dep[u]] + cnt2[dep[u] - w[u] + offset];\n}\n\nint main(){\n    freopen(\"h.in\", \"r\", stdin);\n    n = read(), m = read(); offset = n * 3;\n    for(int i = 1; i < n; i++){int x = read(), y = read(); addEdge(x, y), addEdge(y, x);}\n    pre(1, 0);\n    for(int i = 1; i <= n; i++) w[i] = read();\n    for(int i = 1; i <= m; i++){int u = read(), v = read(); addTag(u, v);}\n    dfs(1, 0);\n    for(int i = 1; i <= n; i++) wr(ans[i]), putchar(' ');\n    return 0;\n}\n```",
        "postTime": 1508079243,
        "uid": 33459,
        "name": "ZaiYiOnline",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u8fd9\u6050\u6015\u662f\u7b2c\u4e00\u9053\u4e0a\u4e86BZOJ\u7684NOIP\u9898\uff0c\u4e5f\u662f\u7b2c\u4e00\u9053\u5728\u5404\u5927\u9898\u5e93\u4e2d\uff0c\u57fa\u672c\u90fd\u662f\u7701\u9009+\u7684\u96be\u5ea6\u6807\u7b7e\u3002\n\n\u8fd9\u9898\u8003\u5bdf\u4e86\u4e09\u4e2a\u6280\u5de7\u7684\u5d4c\u5957\uff0c\u5373\u6811\u4e0a\u5dee\u5206+LCA+\u6876\u5f62\u7ebf\u6bb5\u6811\uff08\u4e5f\u53ef\u4ee5\u662f\u6811\u94fe\u5256\u5206\uff09\u3002\n\n\u8fd9\u4e09\u4e2a\u6280\u5de7\u6211\u5728\u8003\u573a\u4e0a\u90fd\u60f3\u5230\u4e86\uff0c\u4f46\u662f\u90fd\u6ca1\u6709\u540c\u65f6\u60f3\u5230\uff0c\u6ca1\u6709\u60f3\u5230\u628a\u4ed6\u4eec\u653e\u5728\u4e00\u8d77\u7528\uff0c\u5c31\u662f\u8bf4\uff0c\u6211\u5148\u60f3\u5230\u4e86LCA\uff0c\u53d1\u73b0\u505a\u4e0d\u51fa\u6765\uff0c\u7136\u540e\u5c31\u8003\u8651\u5f04\u4e2a\u6811\u94fe\u5256\u5206\uff0c\u53d1\u73b0\u8fd8\u662f\u4e0d\u884c\uff0c\u4e8e\u662f\u53e6\u5bfb\u5b83\u6cd5\uff0c\u6211\u63a5\u7740\u5c1d\u8bd5\u76f4\u63a5\u5728S\u548cT\u6253+1\u7684\u6807\u8bb0\uff0c\u7136\u540e\u5728LCA\u6253-1\u7684\u6807\u8bb0\uff0c\u53d1\u73b0\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u7136\u540e\u6211\u6709\u82e6\u82e6\u601d\u7d22\u4e862\u4e2a\u5c0f\u65f6\uff0c\u6700\u7ec8\u653e\u5f03\uff0c\u9a97\u5206\u90fd\u6ca1\u6253\u5168\u3002\n\n\u9996\u5148\u8003\u8651LCA\uff0c\u56e0\u4e3a\u6bd5\u7adf\u662f\u4e00\u4e2a\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5176\u62c6\u5206\u6210S\u5230LCA\uff0c\u7136\u540eLCA\u5230T\u7684\u4e24\u6761\u94fe\u8003\u8651\u5c31\u7b80\u5355\u591a\u4e86\u3002\n\n\u8fd9\u9898\u6700\u91cd\u8981\u7684\u4e00\u70b9\u5c31\u662f\u4e0d\u80fd\u5c40\u9650\u5728\u679a\u4e3e\u8def\u5f84\u6240\u80fd\u4ea7\u751f\u7684\u8d21\u732e\u7684\u89c2\u5bdf\u5458\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u59cb\u7ec8\u662fO(nm)\u7684\uff01\n\n\u6211\u4eec\u8003\u8651\u5728\u4e00\u4e2a\u8def\u5f84S\u5230LCA\u4e2d\uff0c\u4e00\u4e2a\u89c2\u5bdf\u5458i\uff08i\u5728S\u5230LCA\u7684\u8def\u5f84\u4e0a\uff0c\u4e0d\u7136\u65e0\u610f\u4e49\uff09\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u624d\u80fd\u89c2\u5bdf\u5230\u8fd9\u4e2a\u8def\u5f84\u3002\n\n\u6613\u6709\uff1adep[S]=dep[i]+w[i]\uff08\u5373\u4eceS\u5f00\u59cb\uff0c\u521a\u597d\u5728w[i]\u7684\u65f6\u95f4\u5230\u8fbei\uff0c\u8981\u77e5\u9053\uff0c\u5728\u6811\u4e0a\uff0c\u540c\u4e00\u94fe\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u6df1\u5ea6\u4e4b\u5dee\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff09\n\n\u800cdep[i]+w[i]\u662f\u4e00\u4e2a\u5b9a\u503c\uff01\uff01\uff01\n\n\u8fd9\u662f\u4e00\u4e2a\u5b9a\u503c\uff01\u8fd9\u662f\u4e00\u4e2a\u5b9a\u503c\uff01\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u7edf\u8ba1\u5728i\u7684\u5b50\u6811\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u8def\u5f84\u8d77\u70b9S\u6ee1\u8db3dep[S]=dep[i]+w[i]\uff08\u8fd9\u65f6\u5c31\u5c5e\u4e8e\u6811\u94fe\u5256\u5206\u7684\u6a21\u677f\u9898\u4e86\uff0c\u4f46\u4e5f\u9700\u8981\u5dee\u5206\uff0c\u5e76\u4e14\u8fc7\u4e8e\u590d\u6742\uff0c\u6ca1\u6709\u6876\u5f62\u7ebf\u6bb5\u6811\u597d\uff09\uff01\u90a3\u4e48\u6211\u4eec\u8003\u8651\u8bbe\u7acb\u4e00\u4e2a\u6876root[x]\uff0c\u8868\u793a\u5f53x=dep[i]+w[i]\u65f6\uff0ci\u7684\u5b50\u6811\u4e2d\u8def\u5f84\u8d77\u70b9\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u4e2a\u6570\u5373\u4e3aroot[x]\u3002\u53ef\u8fd9\u4e9bS\u5e76\u4e0d\u90fd\u662f\u6709\u8d21\u732e\u7684\uff08\u53ef\u80fd\u6ca1\u5230i\u5c31\u8d70\u8f6c\u6298\u65b9\u5411\u4e0a\u53bb\u4e86\uff09\uff0c\u90a3\u600e\u4e48\u6d88\u9664LCA\u4f5c\u4e3a\u7ec8\u70b9\u7684\u5f71\u54cd\u5462\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5dee\u5206\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5982\u4f55\u5c06\u6811\u4e0a\u7684\u70b9\u8f6c\u5316\u4e3a\u4e00\u4e2a\u533a\u95f4\u4ece\u800c\u8fdb\u884c\u5dee\u5206\u3002\u4e00\u79cd\u5f53\u7136\u5c31\u662f\u6811\u94fe\u5256\u5206\uff0c\u53e6\u4e00\u79cd\u5c31\u662f\u6811\u6700\u795e\u5947\u7684DFS\u5e8f\uff01\u6211\u4eec\u5bf9\u8fd9\u4e2a\u6811\u8fdb\u884c\u4e00\u4e2adfs\u904d\u5386\uff08\u5148\u5e8f\u904d\u5386\uff09\uff0c\u7136\u540e\u6211\u4eec\u8bb0\u5f55\u7b2c\u4e00\u6b21\u5230\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u6233in[u],\u8bb0\u5f55\u79bb\u5f00\u8fd9\u4e2a\u70b9\uff0c\u53bb\u5f80\u5b83\u7684\u5144\u5f1f\u7684\u65f6\u95f4\u6233out[u],\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684in\u65f6\u95f4\u6233\u5c31\u4e00\u5b9a\u662f[in[u],out[u]]\u8fd9\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u4e0a\u8ff0\u7684\u6876\u6539\u4e3a\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u7684\u5199\u6cd5\u5341\u5206\u7c7b\u4f3c\u4e8e\u4e3b\u5e2d\u6811\uff08\u53ef\u4ee5\u770b\u770b\u6211\u7684\u5176\u4ed6blog\uff09\uff0c\u9700\u8981\u52a8\u6001\u7684\u5efa\u70b9\uff08\u4e0d\u7136\u7edd\u5bf9MLE\uff09\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8def\u5f84\uff0c\u6211\u4eec\u5728root[dep[S]]\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u4e2d\uff0c\u5728in[S]\u8fd9\u4e2a\u70b9+1\uff0c\u5728in[LCA]\u8fd9\u4e2a\u70b9-1\uff08in[S]>in[LCA]\uff09\uff0c\u90a3\u4e48\u5982\u679c\u4e00\u4e2a\u70b9i,\u5176in[i]<in[LCA]\uff0c\u5373LCA\u662fi\u7684\u5b50\u6811\u4e2d\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8def\u5f84\u663e\u7136\u5bf9i\u4e0d\u4f1a\u4ea7\u751f\u8d21\u732e\u3002\u5982\u679c\u5176in[S]>in[i]>in[LCA]\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8def\u5f84\u53ef\u80fd\u4f1a\u5bf9i\u4ea7\u751f\u8d21\u732e\uff0c\u6211\u4eec\u53ea\u9700\u67e5\u8be2root[dep[i]+w[i]]\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u4e2din[i]~out[i]\u8fd9\u6bb5\u533a\u95f4\u548c\u5c31\u597d\u4e86\u3002\u5982\u679c\u5176in[i]>in[S],\u90a3\u4e48i\u5c31\u662fS\u5b50\u6811\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u6216\u662fS\u7684\u5144\u5f1f\u8282\u70b9\uff0c\u603b\u4e4b\u8fd9\u4e2a\u8def\u5f84\u5bf9i\u4e5f\u4e0d\u4f1a\u6709\u8d21\u732e\u3002\n\n\u5bf9\u4e8eLCA~T\u7684\u5904\u7406\u7c7b\u4f3c\uff0c\u8fd9\u6bb5\u8def\u5f84\u4e0a\u4f1a\u6709\u8d21\u732e\u7684i\uff0c\u53ea\u4f1a\u662f\uff1a\n\ndep[S]+dep[i]-2\\*dep[LCA]=w[i]\n\n\u5373dep[S]-2\\*dep[LCA]=w[i]-dep[i]\n\n\u4e0eS~LCA\u5904\u7406\u7c7b\u4f3c\u3002\n\n\u66f4\u8be6\u7ec6\u7684\u5728\u8fd9\u91cc\uff1ahttp://blog.csdn.net/no1\\_terminator/article/details/78128597\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>  \n#include<algorithm>  \n#include<cstring>  \n#define re register  \n#define REP(i,a,b) for (re int i=(a);i<=(b);++i)  \n#define For(i,x) for (re int i=(x);i;i=e[i].next)  \n#define clear(a) memset((a),0,sizeof((a)))  \nusing namespace std;  \nconst int N=304001;  \nint dfs_clock=0,EdgeCnt=0;  \nint n,m,Bit,Tot=0;  \nstruct Edge{  \n    int to,next;  \n}e[N<<1];  \nint dep[N],f[N][25],in[N],out[N];  \nint root[N*3],a[N],w[N],ret[N];  \nstruct SegTree{  \n    int L,R,sum;  \n}T[N*25];  \ninline int read(){  \n    int x=0,f=1;char ch=getchar();  \n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}  \n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}  \n    return x*f;  \n}  \ninline void adde(int u,int v){  \n    int &p=EdgeCnt;  \n    e[++p].to=v;e[p].next=a[u];a[u]=p;  \n    e[++p].to=u;e[p].next=a[v];a[v]=p;  \n}  \ninline int query(int u,int v){  \n    if (dep[u]<dep[v])swap(u,v);  \n    for (re int j=21;j>=0;j--)  \n        if (dep[f[u][j]]>=dep[v])u=f[u][j];  \n    if (u==v)return u;  \n    for (re int j=21;j>=0;j--)  \n        if (f[u][j]!=f[v][j])u=f[u][j],v=f[v][j];  \n    return f[u][0];  \n}  \ninline void adpre(int u){  \n    in[u]=++dfs_clock;  \n    For(p,a[u]){  \n        int v=e[p].to;  \n        if (v!=f[u][0]){  \n            f[v][0]=u;  \n            dep[v]=dep[u]+1;  \n            adpre(v);  \n        }  \n    }  \n    out[u]=dfs_clock;  \n}  \nstruct Question{  \n    int s,t,Lca,Q;  \n    inline void in(){  \n        s=read(),t=read(),Lca=query(s,t);  \n        Q=dep[s]-2*dep[Lca];  \n    }  \n}q[N];  \ninline void insert(int &p,int ql,int x,int l=1,int r=n){  \n    if (!ql)return;if (!p)p=++Tot;  \n    T[p].sum+=x;  \n    if (l==r)return;  \n    int mid=(l+r)>>1;  \n    if (ql<=mid)insert(T[p].L,ql,x,l,mid);  \n        else insert(T[p].R,ql,x,mid+1,r);  \n}  \ninline int count(int p,int ql,int qr,int l,int r){  \n    if (!p)return 0;  \n    if (ql<=l && r<=qr)return T[p].sum;  \n    int mid=(l+r)>>1,s=0;  \n    if (ql<=mid)s=count(T[p].L,ql,qr,l,mid);  \n    if (mid<qr)s+=count(T[p].R,ql,qr,mid+1,r);  \n    return s;  \n}  \nint main(){  \n    n=read(),m=read();  \n    REP(i,1,n-1)adde(read(),read());  \n    REP(i,1,n)w[i]=read();  \n    dep[1]=1;adpre(1);  \n    REP(j,1,21)REP(i,1,n)f[i][j]=f[f[i][j-1]][j-1];  \n    REP(i,1,m)q[i].in();  \n    REP(i,1,m){  \n        int x=dep[q[i].s];  \n        insert(root[x],in[q[i].s],1);  \n        insert(root[x],in[f[q[i].Lca][0]],-1);  \n    }  \n    REP(i,1,n)ret[i]=count(root[dep[i]+w[i]],in[i],out[i],1,n);  \n    Bit=2*n;Tot=0;clear(root);clear(T);  \n    REP(i,1,m){  \n        int x=q[i].Q+Bit;  \n        insert(root[x],in[q[i].t],1);  \n        insert(root[x],in[q[i].Lca],-1);  \n    }  \n    REP(i,1,n)ret[i]+=count(root[w[i]-dep[i]+Bit],in[i],out[i],1,n);  \n    REP(i,1,n)printf(\"%d \",ret[i]);  \n    return 0;  \n}\n```",
        "postTime": 1506689006,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u9898\u610f\u5373\u5bf9\u6bcf\u4e2a\u70b9j\uff0c\u8be2\u95ee\u6709\u591a\u5c11\u6761\u8def\u5f84i\u6ee1\u8db3\uff1a1 Si\u4e0ej\u8ddd\u79bb\u4e3aWj\uff0c2 \u7ecf\u8fc7j\u3002\n\n\nN,M\u8f83\u5c0f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u6bcf\u4e2a\u70b9j\u4e3a\u6839\u5efa\u6811\uff0c\u4e4b\u540e1<=>deep(Si)=Wj,\n\n2<=>deep(Si)+deep(Ti)=len(i)\u3002\u5176\u4e2dlen(i)\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6765\u3002\u65f6\u95f4O(N(N+M))\n\n\n\u9000\u5316\u4e3a\u94fe\u65f6\uff0c1<=>|Si-j|=Wj,\u5373Si=j+-Wj;2<=>Si<j\u65f6,Ti>=j,\u53cd\u4e4bTi<=j\u3002\u53ea\u8981\u5bf9\u6bcf\u4e2aSi\u76f8\u540c\u7684Ti\u6392\u4e00\u4e0b\u5e8f\uff0c\u5c31\u53ef\u4ee5\u4e8c\u5206\u67e5\u627e\u4e86\u3002\u65f6\u95f4O(NlogM)\n\n\u6240\u6709Si=1\u65f6\uff0c\u6211\u4eec\u4ee51\u4e3a\u6839\u5efa\u6811\uff0c1<=>Wj=deep(j),2<=>Ti>=j\u3002\u4e5f\u5c31\u662f\u95ee\u5b50\u6811\u91cc\u6709\u591a\u5c11\u4e2aTi(\u5f53\u7136\uff0c\u5982\u679c1\u4e0d\u6ee1\u8db3\u5c31=0)\uff0c\u6211\u4eec\u7ed9\u6bcf\u4e2aTi\u5904+1\uff0c\u4e4b\u540e\u904d\u5386\u4e00\u904d\u5373\u53ef\u3002\n\n\n\u6240\u6709Ti=1\u65f6\uff0c\u6211\u4eec\u4e5f\u4ee51\u4e3a\u6839\u5efa\u6811\uff0c1,2<=>deep(Si)=deep(j)+Wj\u3002\u4e5f\u5c31\u662f\u95ee\u5b50\u6811\u91cc\u6709\u591a\u5c11\u4e2adeep=deep(j)+Wj\u7684Si\u3002\u7ed9\u6bcf\u4e2aSi\u6253\u6807\u8bb0\uff0c\u7ecf\u8fc7\u65f6+1\uff1b\u904d\u5386\u65f6\u8bb0\u5f55deep\uff0c\u8ba1\u7b97\u8fdb\u51faj\u7684\u5b50\u6811\u65f6\u5bf9\u5e94deep\u7684\u53d8\u5316\u91cf\u5373\u53ef\u3002\n\n\n\u6211\u4eec\u9ad8\u5174\u7684\u770b\u5230\u53ef\u4ee5\u9a9780\u5206(\u7136\u800c\u6211\u65f6\u95f4\u4e0d\u591f\u53ea\u6253\u4e8660)\u3002\u540e\u6765\u5b66\u957f\u6559\u4e86\u6211\u6b63\u89e3\u3002\n\n\n\u5bf9\u4e8e\u81ea\u4e0b\u5411\u4e0a\u7684\u8def\u5f84\uff0c\u6211\u4eec\u7ed9Si\u6253deep(Si)+1\u6807\u8bb0\u7684\u540c\u65f6\uff0c\u8981\u7ed9f(Ti)\u6253deep(Si)-1\u7684\u6807\u8bb0\u3002\u6bcf\u4e2a\u70b9j\u8ba1\u7b97deep(j)+Wj\u53d8\u5316\u91cf\u3002\n\n\u5bf9\u4e8e\u81ea\u4e0a\u5411\u4e0b\u7684\u8def\u5f84\uff0c\u6211\u4eec\u7ed9Ti\u6253deep(Si)+1\u6807\u8bb0\uff0c\u7ed9f(Si)\u6253deep(Si)-1\u7684\u6807\u8bb0\u3002\u6bcf\u4e2a\u70b9j\u8ba1\u7b97deep(j)-Wj\u53d8\u5316\u91cf\u3002\n\n\n\u5bf9\u4e8e\u4e00\u822c\u7684\u5148\u4e0a\u540e\u4e0b\u7684\u8def\u5f84\uff0c\u6211\u4eec\u62c6\u6210\u5411\u4e0a\u4e0e\u5411\u4e0b\u7684\u4e24\u6761\u3002\u5411\u4e0a\u7684Si\u4e0d\u53d8\uff1b\u5411\u4e0b\u7684\u6211\u4eec\u53ef\u4ee5\u5c06Si\u7ffb\u4e0a\u53bb\uff0c\u4e5f\u5c31\u662fdeep(S)=2\\*deep(lca)-deep(Si)\u3002\n\n\n\u8003\u8651tarjan\u6c42lca\u662fO(N+M)\u7684\uff0c\u603b\u65f6\u95f4O(N+M)\u3002\n",
        "postTime": 1479644618,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206+\u5dee\u5206\u3002\n\n\n\u5199\u5b8c\u540e\u53d1\u73b0\u6ca1\u6709\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u5c31\u6765\u53d1\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u6211\u7684\u5207\u5165\u70b9\u662f\uff0c\u5728\u4e00\u6761\u94fe\u4e2d\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u8dd1\u6b65\u7684\u4eba\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4ed6\u5230\u94fe\u9876\u6216\u94fe\u5e95\u7684\u65f6\u95f4\uff0c\u540c\u65f6\u7ef4\u62a4\u5728\u4ed6\u4e0d\u7ecf\u8fc7\u7684\u4f4d\u7f6e\u662f\u6ca1\u6709\u4ed6\u7684\u72b6\u6001\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5728\u94fe\u4e0a\u4f7f\u7528\u5dee\u5206\uff0c\u5728\u9047\u5230\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u628a\u4ed6\u5230\u94fe\u9876\u7684\u65f6\u95f4\u6233\u7684\u8d21\u732e\u589e\u52a0\uff0c\u7136\u540e\u6309\u987a\u5e8f\u6c42\u51fa\u94fe\u4e0a\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\uff0c\u5c31\u662f\u5f53\u524d\u7684\u7b26\u5408\u7684\u70b9\u4e2d\uff0c\u5230\u8fbe\u8fd9\u4e2a\u94fe\u9876\u7684\u65f6\u95f4\u4e0e\u4ed6\u7406\u5e94\u5230\u94fe\u9876\u7684\u65f6\u95f4\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u5c31\u80fd $O(1)$ \u5730\u6c42\u51fa\u7b54\u6848\u3002\n\n\u4f46\u662f\u5728\u6811\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u76f4\u63a5\u4f7f\u7528\u8fd9\u6837\u7684\u5dee\u5206\u5c31\u4f1a\u5bfc\u81f4\u64cd\u4f5c\u6b21\u6570\u5927\u91cf\u589e\u52a0\u800c\u59cb\u590d\u6742\u5ea6\u5f97\u4e0d\u5230\u4fdd\u8bc1\u3002\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u6811\u94fe\u5256\u5206\uff0c\u628a\u6811\u5206\u6210\u591a\u6761\u94fe\uff0c\u5bf9\u4e8e\u6bcf\u6761\u94fe\u5355\u72ec\u4f7f\u7528\u5dee\u5206\u548c\u6c42\u503c\u3002\n\n\u90a3\u4e48\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u4f9d\u7136\u662f $O(1)$\uff0c\u800c\u8ba1\u7b97\u5dee\u5206\u7684\u70b9\u6700\u591a\u6709 $mlogn$ \u4e2a\uff08\u5373\u6240\u6709\u4eba\u4f1a\u7ecf\u8fc7\u7684\u94fe\u7684\u603b\u6570\uff09\u3002\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5f97\u5230\u4e86\u4fdd\u8bc1\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define N 300005\n#define M 5500005\nusing namespace std;\nint n,m,sz[N],de[N],son[N],fa[N],L[N],ans[N],cnt,top[N],st[N],en[N],ti,Ti,g[N],q[N],T[N*2];\nchar IO;\ninline int rd(){\n\tint res=0;\n\twhile(IO=getchar(),IO<48||IO>57);\n\tdo res=(res<<1)+(res<<3)+(IO^48);\n\twhile(IO=getchar(),IO>=48&&IO<=57);\n\treturn res;\n}\nint hd[N],nex[N*2],to[N*2],tot;\nvoid add(int x,int y){\n\tnex[++tot]=hd[x],hd[x]=tot,to[tot]=y;\n}\nvoid dfs(int x,int p){\n\tsz[x]=1,de[x]=de[p]+1,fa[x]=p;\n\tfor(int y,i=hd[x];i;i=nex[i]){\n\t\ty=to[i];\n\t\tif(y==p)continue;\n\t\tdfs(y,x);\n\t\tsz[x]+=sz[y];\n\t\tif(sz[y]>sz[son[x]])son[x]=y;\n\t}\n}\nvoid rdfs(int x,int p){\n\tL[x]=++cnt,top[x]=p,g[cnt]=x;\n\tif(x==p)st[x]=L[x];\n\ten[p]=L[x];\n\tif(son[x])rdfs(son[x],p);\n\tfor(int y,i=hd[x];i;i=nex[i]){\n\t\ty=to[i];\n\t\tif(y==fa[x]||y==son[x])continue;\n\t\trdfs(y,y);\n\t}\n}\nint Lca(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(de[top[x]]>de[top[y]])Ti+=(L[x]-st[top[x]]+1),x=fa[top[x]];\n\t\telse Ti+=(L[y]-st[top[y]]+1),y=fa[top[y]];\n\t}\n\tTi+=abs(L[x]-L[y]);\n\tif(de[x]>de[y])return y;\n\treturn x;\n}\nint hd1[N],nex1[M*2],w1[M*2],tot1;\nvoid add1(int x,int y){\n\tnex1[++tot1]=hd1[x],hd1[x]=tot1,w1[tot1]=y;\n}\nint hd2[N],nex2[M*2],w2[M*2],tot2;\nvoid add2(int x,int y){\n\tnex2[++tot2]=hd2[x],hd2[x]=tot2,w2[tot2]=y;\n}//\u4f7f\u7528\u4e24\u4e2a\u524d\u5411\u661f\u6765\u7ef4\u62a4\u4e0d\u540c\u7684\u65b9\u5411\nvoid up(int x,int y){\n\twhile(top[x]!=top[y]){//\u4ece\u8d77\u70b9\u5f80\u540e\u66f4\u65b0\u5230\u94fe\u5e95\u7684\u65f6\u95f4\n\t\tint w=L[x]-en[top[x]]+ti;\n\t\tadd2(L[x],w);\n\t\tti+=(L[x]-st[top[x]]+1);\n\t\tx=fa[top[x]];\n\t}\n\tint w=L[x]-en[top[x]]+ti;\n\tti+=abs(L[x]-L[y]);\n\tadd2(L[x],w);\n\tif(y!=top[x])add2(L[y]-1,-w);\n}\nvoid down(int x,int y){\n\twhile(top[x]!=top[y]){//\u4ece\u7ec8\u70b9\u5f80\u540e\u66f4\u65b0\u5230\u94fe\u9876\u7684\u65f6\u95f4\n\t\tint w=Ti-L[x]+st[top[x]];\n\t\tadd1(st[top[x]],w);\n\t\tif(L[x]!=en[top[x]])add1(L[x]+1,-w);\n\t\tTi-=(L[x]-st[top[x]]+1);\n\t\tx=fa[top[x]];\n\t}\n\tif(x==y)return;\n\tint w=Ti-L[x]+st[top[x]];\n\tadd1(L[y]+1,w);if(L[x]!=en[top[x]])add1(L[x]+1,-w);\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int x,y,i=1;i<n;++i)x=rd(),y=rd(),add(x,y),add(y,x);\n\tfor(int i=1;i<=n;++i)q[i]=rd();\n\tdfs(1,0);rdfs(1,1);\n\twhile(m--){\n\t\tint s=rd(),e=rd();\n\t\tTi=0;\n\t\tint lca=Lca(s,e);\n\t\tti=300000,Ti+=300000;\n\t\tup(s,lca);\n\t\tdown(e,lca);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint j;\n\t\tfor(j=i+1;j<=n;j++)if(top[g[j]]!=top[g[i]])break;\n\t\tj--;\n\t\tfor(int k=i;k<=j;k++){\n\t\t\tfor(int o=hd1[k];o;o=nex1[o]){\n\t\t\t\tif(w1[o]>0)T[w1[o]]++;\n\t\t\t\telse T[-w1[o]]--;\n\t\t\t}\n\t\t\tans[g[k]]+=T[q[g[k]]-(k-i)+300000];\n\t\t}\n\t\tfor(int k=i;k<=j;k++)for(int o=hd1[k];o;o=nex1[o])if(w1[o]>0)T[w1[o]]=0;\n\t\tfor(int k=j;k>=i;k--){\n\t\t\tfor(int o=hd2[k];o;o=nex2[o]){\n\t\t\t\tif(w2[o]>0)T[w2[o]]++;\n\t\t\t\telse T[-w2[o]]--;\n\t\t\t}\n\t\t\tans[g[k]]+=T[q[g[k]]-(j-k)+300000];\n\t\t}\n\t\tfor(int k=i;k<=j;k++)for(int o=hd2[k];o;o=nex2[o])if(w2[o]>0)T[w2[o]]=0;\n\t\ti=j;\n\t}\n\tfor(int i=1;i<=n;i++)cout<<ans[i]<<\" \";\n}\n```\n",
        "postTime": 1602891957,
        "uid": 253552,
        "name": "\u591c\u4e34",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9 $x$ \uff0c\u8003\u8651\u5c06\u5176\u5728\u4e00\u6761\u8def\u5f84\u7684 $S_i \\rightarrow LCA$ \u6216 $LCA \\rightarrow T_i$ \u4e24\u7aef\u6765\u5206\u522b\u8003\u8651\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84 $i$ \u4e00\u5b9a\u6709 $dep_{S_i} - dep_x=w_x$\uff0c\u79fb\u9879\u5f97 $dep_x+w_x=dep_{S_i}$\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84 $i$ \u4e00\u5b9a\u6709 $dep_{S_i}-dep_{LCA_i}+dep_x-dep_{LCA_i}=w_x$\uff0c\u79fb\u9879\u5f97 $w_x-dep_x=dep_{S_i}-2 \\cdot dep_{LCA_i}$\u3002\n\n\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u8ba1\u7b97\uff0c\u6bcf\u6b21\u7ef4\u62a4\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e00\u68f5\u91cc\u5b58 $dep_{S_i}$ \u7684\u4e2a\u6570\uff0c\u4e00\u9897\u91cc\u5b58 $dep_{S_i}-2 \\cdot dep_{LCA_i}$ \u7684\u4e2a\u6570\uff08\u6743\u503c\u7ebf\u6bb5\u6811\uff09\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5728\u7ebf\u6bb5\u6811\u5411\u4e0a\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u5f53\u524d\u7ed3\u70b9\u662f\u4e00\u4e2a $T$\uff08\u7ec8\u70b9\uff09\uff0c\u5c31\u628a\u76f8\u5e94\u8def\u5f84\u7684 $S$\uff08\u8d77\u70b9\uff09\u4e0e $LCA$ \u52a0\u5165\u7b2c\u4e8c\u68f5\u7ebf\u6bb5\u6811\uff0c\u5982\u679c\u662f $S$ \u4e5f\u540c\u7406\u3002\u56e0\u4e3a\u6bcf\u6761\u8def\u5f84\u7684\u4fe1\u606f\u53ea\u80fd\u5bf9\u5728\u5176\u8def\u5f84\u4e0a\u7684\u7ed3\u70b9\u9020\u6210\u5f71\u54cd\uff0c\u6240\u4ee5\u8981\u50cf\u6811\u4e0a\u5dee\u5206\u90a3\u6837\u5728\u6bcf\u6761\u8def\u5f84\u7684 $LCA$ \u5904\u5220\u53bb\u76f8\u5e94\u7684\u4fe1\u606f\u3002\u6ce8\u610f\u7b2c\u4e8c\u68f5\u7ebf\u6bb5\u6811\u4e2d\u7ef4\u62a4\u7684\u4fe1\u606f\u53ef\u80fd\u4e3a\u8d1f\u6570\uff0c\u6240\u4ee5\u6574\u4f53\u7684\u6743\u503c\u90fd\u8981\u52a0\u4e0a\u4e00\u4e2a $n$\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n\nconst int MAXN = 3e5;\n\nint n, m, edge;\nint ans[MAXN | 1], S[MAXN | 1], T[MAXN | 1], W[MAXN | 1];\nint firstE[MAXN | 1], dfn[MAXN | 1], son[MAXN | 1], topf[MAXN | 1], size[MAXN | 1], father[MAXN | 1], depth[MAXN | 1], lca[MAXN | 1];\nstd::vector < std::pair < int, int >  > player[MAXN | 1];\n\nstruct Edge {\n  int to, nxt;\n  Edge() {}\n  Edge(int a, int b) : to(b), nxt(firstE[a]) {}\n} e[MAXN << 1];\n\ninline int read() {\n  register int x = 0;\n  register char ch = getchar();\n  while (!isdigit(ch)) ch = getchar();\n  while (isdigit(ch)) {\n    x = x * 10 + ch - '0';\n    ch = getchar();\n  }\n  return x;\n}\n\ninline void addEdge(int a, int b) {\n  e[++edge] = Edge(a, b);\n  firstE[a] = edge;\n}\n\nnamespace HLD {\n  void dfs1(int x, int fa) {\n    father[x] = fa;\n    depth[x] = depth[fa] + 1;\n    size[x] = 1;\n    for (int k = firstE[x]; k; k = e[k].nxt) {\n      int to = e[k].to;\n      if (to == fa) continue;\n      dfs1(to, x);\n      size[x] += size[to];\n      if (size[to] > size[son[x]]) son[x] = to;\n    }\n  }\n  \n  void dfs2(int x, int ftop) {\n    topf[x] = ftop;\n    if (!son[x]) return;\n    dfs2(son[x], ftop);\n    for (int k = firstE[x]; k; k = e[k].nxt) {\n      int to = e[k].to;\n      if (to != father[x] && to != son[x]) dfs2(to, to);\n    }\n  }\n\n  int LCA(int x, int y) {\n    while (topf[x] != topf[y]) {\n      if (depth[topf[x]] < depth[topf[y]]) std::swap(x, y);\n      x = father[topf[x]];\n    }\n    return depth[x] < depth[y] ? x : y;\n  }\n}\n\nnamespace SegTree {\n  struct Node {\n    int sumv;\n    Node *ch[2];\n    Node() {}\n  } *root[2][MAXN | 1], *null;\n\n  void init() {\n    null = new Node;\n    null -> sumv = 0;\n    null -> ch[0] = null -> ch[1] = null;\n  }\n\n  Node *newNode() {\n    Node *o = new Node;\n    o -> sumv = 0;\n    o -> ch[0] = o -> ch[1] = null;\n    return o;\n  }\n\n  void insert(Node *&o, int l, int r, int pos, int val) {\n    if (o == null) o = newNode();\n    o -> sumv += val;\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    if (pos <= mid) insert(o -> ch[0], l, mid, pos, val);\n    else insert(o -> ch[1], mid + 1, r, pos, val);\n  }\n\n  int query(Node *o, int l, int r, int pos) {\n    if (o == null) return 0;\n    if (l == r) return o -> sumv;\n    int mid = (l + r) >> 1;\n    if (pos <= mid) return query(o -> ch[0], l, mid, pos);\n    return query(o -> ch[1], mid + 1, r, pos);\n  }\n\n  Node *merge(Node *&x, Node *&y) {\n    if (x == null) return y;\n    if (y == null) return x;\n    Node *o = newNode();\n    o -> ch[0] = merge(x -> ch[0], y -> ch[0]);\n    o -> ch[1] = merge(x -> ch[1], y -> ch[1]);\n    o -> sumv = x -> sumv + y -> sumv;\n    delete x;\n    delete y;\n    x = null;\n    y = null;\n    return o;\n  }\n}\n\nusing namespace SegTree;\n\nvoid dfs(int x) {\n  for (int k = firstE[x]; k; k = e[k].nxt) {\n    int to = e[k].to;\n    if (to == father[x]) continue;\n    dfs(to);\n    root[0][x] = merge(root[0][x], root[0][to]);\n    root[1][x] = merge(root[1][x], root[1][to]);\n  }\n  for (std::vector < std::pair < int, int > > :: iterator it = player[x].begin(); it != player[x].end(); ++it) {\n    int opt = it -> first, id = it -> second;\n    if (opt == 0) insert(root[0][x], 1, n, depth[S[id]], 1);\n    else if (opt == 1) insert(root[1][x], 1, 2 * n, depth[S[id]] - 2 * depth[lca[id]] + n, 1);\n    else {\n      insert(root[0][x], 1, n, depth[S[id]], -1);\n      insert(root[1][x], 1, 2 * n, depth[S[id]] - 2 * depth[lca[id]] + n, -1);\n    }\n  }\n  if (depth[x] + W[x] <= n) ans[x] += query(root[0][x], 1, n, depth[x] + W[x]);\n  if (W[x] - depth[x] <= n) ans[x] += query(root[1][x], 1, 2 * n, W[x] - depth[x] + n);\n}\n\nint main() {\n  n = read();\n  m = read();\n  for (int i = 1, u, v; i < n; ++i) {\n    u = read();\n    v = read();\n    addEdge(u, v);\n    addEdge(v, u);\n  }\n  HLD::dfs1(1, 0);\n  HLD::dfs2(1, 1);\n  for (int i = 1; i <= n; ++i) W[i] = read();\n  for (int i = 1; i <= m; ++i) {\n    S[i] = read();\n    T[i] = read();\n    lca[i] = HLD::LCA(S[i], T[i]);\n    player[S[i]].push_back(std::make_pair(0, i));\n    player[T[i]].push_back(std::make_pair(1, i));\n    player[father[lca[i]]].push_back(std::make_pair(2, i));\n  }\n  SegTree::init();\n  for (int i = 1; i <= n; ++i) {\n    root[0][i] = null;\n    root[1][i] = null;\n  }\n  dfs(1);\n  for (int i = 1; i <= m; ++i) {\n    if (depth[S[i]] - depth[lca[i]] == W[lca[i]]) {\n      --ans[lca[i]];\n    }\n  }\n  for (int i = 1; i <= n; ++i) printf(\"%d \", ans[i]);\n  return 0;\n}\n```\n\n",
        "postTime": 1554450829,
        "uid": 24878,
        "name": "iodwad",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "**Description**\n\n\u5c0fc\u540c\u5b66\u8ba4\u4e3a\u8dd1\u6b65\u975e\u5e38\u6709\u8da3,\u4e8e\u662f\u51b3\u5b9a\u5236\u4f5c\u4e00\u6b3e\u53eb\u505a\u300a\u5929\u5929\u7231\u8dd1\u6b65\u300b\u7684\u6e38\u620f\u3002?\u5929\u5929\u7231\u8dd1\u6b65?\u662f\u4e00\u4e2a\u517b\u6210\u7c7b\u6e38\u620f,\u9700\u8981\u73a9\u5bb6\u6bcf\u5929\u6309\u65f6\u4e0a\u7ebf,\u5b8c\u6210\u6253\u5361\u4efb\u52a1\u3002\u8fd9\u4e2a\u6e38\u620f\u7684\u5730\u56fe\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e00\u68f5\u5305\u542b N\u4e2a\u7ed3\u70b9\u548cN-1 \u6761\u8fb9\u7684\u6811, \u6bcf\u6761\u8fb9\u8fde\u63a5\u4e24\u4e2a\u7ed3\u70b9,\u4e14\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u5b58\u5728\u4e00\u6761\u8def\u5f84\u4e92\u76f8\u53ef\u8fbe\u3002\u6811\u4e0a\u7ed3\u70b9\u7f16\u53f7\u4e3a\u4ece1\u5230N\u7684\u8fde\u7eed\u6b63\u6574\u6570\u3002\u73b0\u5728\u6709\u4e2a\u73a9\u5bb6,\u7b2c\u4e2a\u73a9\u5bb6\u7684\u8d77\u70b9\u4e3aSi ,\u7ec8\u70b9\u4e3aTi  \u3002\u6bcf\u5929\u6253\u5361\u4efb\u52a1\u5f00\u59cb\u65f6,\u6240\u6709\u73a9\u5bb6\u5728\u7b2c0\u79d2\u540c\u65f6\u4ece\u81ea\u5df1\u7684\u8d77\u70b9\u51fa\u53d1, \u4ee5\u6bcf\u79d2\u8dd1\u4e00\u6761\u8fb9\u7684\u901f\u5ea6,\u4e0d\u95f4\u65ad\u5730\u6cbf\u7740\u6700\u77ed\u8def\u5f84\u5411\u7740\u81ea\u5df1\u7684\u7ec8\u70b9\u8dd1\u53bb, \u8dd1\u5230\u7ec8\u70b9\u540e\u8be5\u73a9\u5bb6\u5c31\u7b97\u5b8c\u6210\u4e86\u6253\u5361\u4efb\u52a1\u3002 (\u7531\u4e8e\u5730\u56fe\u662f\u4e00\u68f5\u6811, \u6240\u4ee5\u6bcf\u4e2a\u4eba\u7684\u8def\u5f84\u662f\u552f\u4e00\u7684)\u5c0fC\u60f3\u77e5\u9053\u6e38\u620f\u7684\u6d3b\u8dc3\u5ea6, \u6240\u4ee5\u5728\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u90fd\u653e\u7f6e\u4e86\u4e00\u4e2a\u89c2\u5bdf\u5458\u3002 \u5728\u7ed3\u70b9\u7684\u89c2\u5bdf\u5458\u4f1a\u9009\u62e9\u5728\u7b2cWj\u79d2\u89c2\u5bdf\u73a9\u5bb6, \u4e00\u4e2a\u73a9\u5bb6\u80fd\u88ab\u8fd9\u4e2a\u89c2\u5bdf\u5458\u89c2\u5bdf\u5230\u5f53\u4e14\u4ec5\u5f53\u8be5\u73a9\u5bb6\u5728\u7b2cWj\u79d2\u4e5f\u7406\u5230\u8fbe\u4e86\u7ed3\u70b9J  \u3002 \u5c0fC\u60f3\u77e5\u9053\u6bcf\u4e2a\u89c2\u5bdf\u5458\u4f1a\u89c2\u5bdf\u5230\u591a\u5c11\u4eba?\u6ce8\u610f: \u6211\u4eec\u8ba4\u4e3a\u4e00\u4e2a\u73a9\u5bb6\u5230\u8fbe\u81ea\u5df1\u7684\u7ec8\u70b9\u540e\u8be5\u73a9\u5bb6\u5c31\u4f1a\u7ed3\u675f\u6e38\u620f, \u4ed6\u4e0d\u80fd\u7b49\u5f85\u4e00 \u6bb5\u65f6\u95f4\u540e\u518d\u88ab\u89c2\u5bdf\u5458\u89c2\u5bdf\u5230\u3002 \u5373\u5bf9\u4e8e\u628a\u7ed3\u70b9J\u4f5c\u4e3a\u7ec8\u70b9\u7684\u73a9\u5bb6: \u82e5\u4ed6\u5728\u7b2cWj\u79d2\u91cd\u5230\u8fbe\u7ec8\u70b9,\u5219\u5728\u7ed3\u70b9J\u7684\u89c2\u5bdf\u5458\u4e0d\u80fd\u89c2\u5bdf\u5230\u8be5\u73a9\u5bb6;\u82e5\u4ed6\u6b63\u597d\u5728\u7b2cWj\u79d2\u5230\u8fbe\u7ec8\u70b9,\u5219\u5728\u7ed3\u70b9\u7684\u89c2\u5bdf\u5458\u53ef\u4ee5\u89c2\u5bdf\u5230\u8fd9\u4e2a\u73a9\u5bb6\u3002\n\n**Input**\n\n\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570N\u548cM \u3002\u5176\u4e2dN\u4ee3\u8868\u6811\u7684\u7ed3\u70b9\u6570\u91cf, \u540c\u65f6\u4e5f\u662f\u89c2\u5bdf\u5458\u7684\u6570\u91cf, M\u4ee3\u8868\u73a9\u5bb6\u7684\u6570\u91cf\u3002\n\u63a5\u4e0b\u6765n-1 \u884c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570U\u548cV ,\u8868\u793a\u7ed3\u70b9U \u5230\u7ed3\u70b9V \u6709\u4e00\u6761\u8fb9\u3002\n\u63a5\u4e0b\u6765\u4e00\u884cN \u4e2a\u6574\u6570,\u5176\u4e2d\u7b2c\u4e2a\u6574\u6570\u4e3aWj , \u8868\u793a\u7ed3\u70b9\u51fa\u73b0\u89c2\u5bdf\u5458\u7684\u65f6\u95f4\u3002\n\u63a5\u4e0b\u6765 M\u884c,\u6bcf\u884c\u4e24\u4e2a\u6574\u6570Si\u548cTi,\u8868\u793a\u4e00\u4e2a\u73a9\u5bb6\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\n\u5bf9\u4e8e\u6240\u6709\u7684\u6570\u636e,\u4fdd\u8bc1 \u3002\n1<=Si,Ti<=N,0<=Wj<=N\n\n**Output**\n\n\u8f93\u51fa1\u884cN \u4e2a\u6574\u6570,\u7b2c\u4e2a\u6574\u6570\u8868\u793a\u7ed3\u70b9\u7684\u89c2\u5bdf\u5458\u53ef\u4ee5\u89c2\u5bdf\u5230\u591a\u5c11\u4eba\u3002\n\n**Sample Input**\n```\n6 3\n2 3\n1 2\n1 4\n4 5\n4 6\n0 2 5 1 2 3\n1 5\n1 3\n2 6\n```\n**Sample Output**\n```\n2 0 0 1 1 1\n```\n**HINT**\n\n\u5bf9\u4e8e1\u53f7\u70b9\uff0cW1=0\uff0c\u6545\u53ea\u6709\u8d77\u70b9\u4e3a1\u53f7\u70b9\u7684\u73a9\u5bb6\u624d\u4f1a\u88ab\u89c2\u5bdf\u5230\uff0c\u6240\u4ee5\u73a9\u5bb61\u548c\u73a9\u5bb62\u88ab\u89c2\u5bdf\u5230\uff0c\u51712\u4eba\u88ab\u89c2\u5bdf\u5230\u3002\n\n\u5bf9\u4e8e2\u53f7\u70b9\uff0c\u6ca1\u6709\u73a9\u5bb6\u5728\u7b2c2\u79d2\u65f6\u5728\u6b64\u7ed3\u70b9\uff0c\u51710\u4eba\u88ab\u89c2\u5bdf\u5230\u3002\n\n\u5bf9\u4e8e3\u53f7\u70b9\uff0c\u6ca1\u6709\u73a9\u5bb6\u5728\u7b2c5\u79d2\u65f6\u5728\u6b64\u7ed3\u70b9\uff0c\u51710\u4eba\u88ab\u89c2\u5bdf\u5230\u3002\n\n\u5bf9\u4e8e4\u53f7\u70b9\uff0c\u73a9\u5bb61\u88ab\u89c2\u5bdf\u5230\uff0c\u51711\u4eba\u88ab\u89c2\u5bdf\u5230\u3002\n\n\u5bf9\u4e8e5\u53f7\u70b9\uff0c\u73a9\u5bb61\u88ab\u89c2\u5bdf\u5230\uff0c\u51711\u4eba\u88ab\u89c2\u5bdf\u5230\u3002\n\n\u5bf9\u4e8e6\u53f7\u70b9\uff0c\u73a9\u5bb63\u88ab\u89c2\u5bdf\u5230\uff0c\u51711\u4eba\u88ab\u89c2\u5bdf\u5230\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u7684\u6570\u636e\u89c4\u6a21\u53ca\u7279\u70b9\u5982\u4e0b\u8868\u6240\u793a\u3002 \u63d0\u793a: \u6570\u636e\u8303\u56f4\u7684\u4e2a\u4f4d\u4e0a\u7684\u6570\u5b57\u53ef\u4ee5\u5e2e\u52a9\u5224\u65ad\u662f\u54ea\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/3441.png)\n\n**\u89e3\u9898\u601d\u8def\uff1a**\n\n\u8fd9\u9898\u6211\u4eec\u4ece\u90e8\u5206\u5206\u5f00\u59cb\u505a...\n\n\u5bf9\u4e8e\u8d77\u70b9\u7b49\u4e8e\u7ec8\u70b9\u7684\u60c5\u51b5\uff0c\u5c31\u7edf\u8ba1\u4e00\u4e0b$w[i]$\u4e2d\u7b49\u4e8e$0$\u7684\u5c31\u597d\u4e86\u3002\n\n\u5bf9\u4e8e$w[i]=0$\u7684\u60c5\u51b5\uff0c\u5c31\u628a\u6240\u6709\u8def\u5f84\u7684\u8d77\u70b9\u6240\u5728\u7684\u4f4d\u7f6e\u7b54\u6848$+1$\u5c31\u597d\u4e86\u3002\n\n**code:**\n\n```cpp\nnamespace Luvwgyx1{\n    int f[maxn];\n    void solve(){\n        if(!flag1){for(int i=1;i<=m;i++)if(!w[road[i].u])f[road[i].u]++;}//\u8d77\u70b9\u7b49\u4e8e\u7ec8\u70b9\n        else for(int i=1;i<=m;i++)f[road[i].u]++;//w[i]=0\n        for(int i=1;i<=n;i++)printf(\"%d \",f[i]);puts(\"\");\n    }\n}\n```\n\n\u5bf9\u4e8e\u6240\u6709\u8d77\u70b9\u90fd\u4e3a$1$\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5dee\u5206\u4e00\u4e0b\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u88ab\u591a\u5c11\u6761\u8def\u5f84\u7ecf\u8fc7\u5c31\u597d\u4e86\u3002\u56e0\u4e3a\u90fd\u4ece$1$\u51fa\u53d1\uff0c\u6240\u4ee5\u53ea\u8981$w[i]=dep[i]-1$\u90a3\u4e48\u6240\u6709\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u90fd\u80fd\u5bf9\u5b83\u505a\u51fa\u8d21\u732e\u3002\n\n**code:**\n\n```cpp\nnamespace Luvwgyx2{\n    int f[maxn],cnt[maxn];\n    void dfs(int x){\n        for(int i=head[x],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n            if(v!=fa[x])dfs(v),cnt[x]+=cnt[v];\n    }\n    void solve(){\n        HLD.build(1,1);HLD.dfs(1);\n        for(int i=1;i<=m;i++){\n            int u=road[i].u,v=road[i].v,lca=HLD.query(u,v);\n            cnt[u]++;cnt[v]++;cnt[lca]--;cnt[fa[lca]]--;\n        }dfs(1);\n        for(int i=1;i<=n;i++)if(w[i]==HLD.dep[i]-1)f[i]+=cnt[i];\n        for(int i=1;i<=n;i++)printf(\"%d \",f[i]);puts(\"\");\n    }\n}\n```\n\n\u5176\u5b9e\u4e0a\u9762\u6240\u6709\u90e8\u5206\u5206\u5bf9\u4f60\u5199\u51fa\u6b63\u89e3\u6ca1\u4ec0\u4e48\u5e2e\u52a9....\n\nemmmm\n\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u6765\u5173\u6ce8\u4e00\u4e0b\u5176\u5b83\u7684\u90e8\u5206\u5206\u4e86...\n\n\u663e\u7136\uff0c\u6211\u4eec\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84$u->v$\uff0c\u5982\u679c\u4ed6\u53d1\u751f\u4e86\u8f6c\u6298\uff0c\u6bd4\u5982\u8bf4\u4e0b\u56fe\u4e2d\u7684\u4e00\u6761\u8def\u5f84$3->5$\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u770b\u505a\u5b83\u662f\u4e24\u6761\u8def\u5f84\u5408\u5728\u4e00\u8d77\u7684\uff0c\u4e5f\u5c31\u662f$3->2$\u548c$2->5$\uff0c\u53ea\u4e0d\u8fc7\u540e\u9762\u8fd9\u6bb5$2->5$\u4e0a\u9762\u6240\u6709\u70b9\u5728$3->5$\u8fd9\u6761\u603b\u8def\u5f84\u4e0a\u7684\u4f4d\u7f6e\u8981\u7b49\u4e8e\u5728\u8def\u5f84$2->5$\u4e0a\u7684\u4f4d\u7f6e\u52a0\u4e0a\u8def\u5f84$3->2$\u7684\u957f\u5ea6\u3002\u53ef\u80fd\u6709\u70b9\u62d7\u53e3\uff0c\u4ed4\u7ec6\u770b\u770b\u5c31\u660e\u767d\u4e86\u3002\n\n![](https://luvwgyx.com/wp-content/uploads/2018/12/tree.png)\n\n\u800c\u6211\u4eec\u4e0a\u8ff0\u7684\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u628a\u4e00\u6761\u8def\u5f84\u5206\u6210\u4e24\u6761\u94fe\u6765\u89e3\u51b3\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6765\u5173\u6ce8\u4e00\u4e0b\u94fe\u7684\u90e8\u5206\u5206\u5e94\u8be5\u600e\u4e48\u505a\u3002\n\n\u5bf9\u4e8e\u6811\u9000\u5316\u6210\u94fe\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u70b9$i$\u6765\u8bf4\uff0c\u53ea\u6709\u5f53$dep[i]-w[i]==S$\u7684\u65f6\u5019\u6211\u4eec\u624d\u53ef\u4ee5\u5bf9$i$\u8fd9\u4e2a\u70b9\u4ea7\u751f\u8d21\u732e\uff0c\u5176\u4e2d$S$\u8868\u793a$i$\u6240\u5728\u7684\u8fd9\u6761\u8def\u5f84\u7684\u8d77\u70b9\u3002\n\n\u90a3\u4e48\u77e5\u9053\u4e86\u8fd9\u4e2a\u5c31\u53d8\u5f97\u7b80\u5355\u4e86\u3002\u6211\u4eec\u5c06\u6240\u6709\u8def\u5f84$u->v$\u62c6\u6210\u4e24\u90e8\u5206\uff0c\u5206\u522b\u5904\u7406$u->lca$\u548c$lca->v$\u8fd9\u4e24\u90e8\u5206\u8def\u5f84\u4e0a\u7684\u70b9\u6240\u4ea7\u751f\u7684\u8d21\u732e\u5c31\u597d\u4e86\u3002\n\n\u7531\u94fe\u7684\u90e8\u5206\u6211\u4eec\u53ef\u63a8\u5bfc\u800c\u77e5\u5bf9\u4e8e$u->lca$\u8fd9\u90e8\u5206\u8def\u5f84\u4e0a\u7684\u70b9\u6765\u8bf4\uff0c\u53ea\u6709$dep[i]+w[i]==dep[u]$\u7684\u65f6\u5019$i$\u4f1a\u4ea7\u751f\u8d21\u732e\uff0c\u90a3\u4e48\u82e5\u662f\u5728$i$\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u4e5f\u6709$dep[u]$\u6ee1\u8db3\u4e0a\u5f0f\u7684\u8bdd\uff0c\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u5904\u7406\u51fa\u6765\uff0c\u81f3\u4e8e$i$\u4e0d\u5728$u->lca$\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5dee\u5206\u89e3\u51b3\u3002\u540c\u7406\uff0c\u6211\u4eec\u5bf9\u4e8e$lca->v$\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u6765\u8bf4\uff0c\u53ea\u9700\u8981\u627e\u51fa\u6240\u6709\u6ee1\u8db3$dep[i]-w[i]==dep[v]-dis(u,v)$\u7684\u70b9\u5c31\u597d\u4e86\uff0c\u6ce8\u610f\u8fd9\u91cc$dep$\u51cf\u53bb$w[i]$\u53ef\u80fd\u8d8a\u754c\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5f0f\u5b50\u4e24\u8fb9\u540c\u65f6\u52a0\u4e0a$n$\u5c31\u597d\u4e86\u3002\n\n\u81f3\u4e8e\u5dee\u5206\u8fc7\u7a0b\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u4e0b\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u6765\u8bf4\uff0c\u6709\u591a\u5c11\u6761\u8def\u5f84\u4ee5\u5b83\u4e3a\u8d77\u70b9\uff0c\u7136\u540e\u7d2f\u52a0\u5c31\u597d\u4e86\u3002\u540c\u65f6\u6211\u4eec\u641c\u7d22\u5230\u7684\u5f53\u524d\u7684\u8282\u70b9\u4f5c\u4e3a\u8fc7\u54ea\u4e9b\u8def\u5f84\u7ed3\u675f\u8282\u70b9\u7684$lca$\uff0c\u5c06\u5b83\u51cf\u6389\u5c31\u597d\u4e86\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u641c\u7d22\u4e24\u904d\u5c31\u80fd\u5904\u7406\u51fa\u4e0a\u8ff0\u6240\u6709\u4fe1\u606f\u4e86\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c$i$\u662f$u->v$\u8fd9\u6761\u8def\u5f84\u8f6c\u6298\u7684\u90a3\u4e2a\u70b9\uff0c\u4e5f\u5c31\u662f$u$\u548c$v$\u7684$lca$\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u7684\u8d21\u732e\u5c06\u4f1a\u88ab\u591a\u7b97\u4e00\u6b21\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u66b4\u529b\u679a\u4e3e\u6240\u6709\u8def\u5f84\uff0c\u7136\u540e\u770b\u6709\u6ca1\u6709\u8f6c\u6298\uff0c\u5982\u679c\u6709\u8f6c\u6298\u5c31\u51cf\u53bb\u591a\u4f59\u8d21\u732e\u5c31\u597d\u4e86\u3002\n\n\u81f3\u6b64\uff0c\u8fd9\u9053\u9898\u76ee\u5c31\u5706\u6ee1\u7ed3\u675f\u4e86\uff01\n\n**code:**\n\n```cpp\n/*Program from Luvwgyx*/\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=3e5+10;\nstruct node{int to,nxt;}e[maxn<<1];\nstruct edge{int u,v,lca,dis;}a[maxn];\nvector<int >v1[maxn],v2[maxn],v3[maxn];\nint n,m,tot,ret,idx,head[maxn],fa[maxn],dfn[maxn];\nint w[maxn],f[maxn],ans[maxn],cnt1[maxn],cnt2[maxn<<1];\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid print(int x){\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)print(x/10);\n    putchar(x%10+'0');\n}\nvoid write(int x){print(x);puts(\"\");}\nvoid add(int u,int v){e[++tot].to=v;e[tot].nxt=head[u];head[u]=tot;}\nstruct Heavy_Light_Decomposition{\n    int dep[maxn],son[maxn],top[maxn],size[maxn];\n    void build(int x,int deep){\n        dep[x]=deep;size[x]=1;int mx=0;\n        for(int i=head[x],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n            if(v!=fa[x]){\n                fa[v]=x;build(v,deep+1);size[x]+=size[v];\n                if(size[v]>mx)mx=size[v],son[x]=v;\n            }\n    }\n    void dfs(int x){\n        if(!x)return ;dfn[x]=++idx;\n        top[x]=son[fa[x]]==x?top[fa[x]]:x;\n        dfs(son[x]);\n        for(int i=head[x],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n            if(v!=fa[x]&&v!=son[x])dfs(v);\n    }\n    int query(int u,int v){\n        while(top[u]!=top[v]){\n            if(dep[top[u]]<dep[top[v]])swap(u,v);\n            u=fa[top[u]];\n        }if(dep[u]>dep[v])swap(u,v);\n        return u;\n    }\n}HLD;\nvoid dfs1(int u){\n    int x=w[u]+HLD.dep[u],tmp;if(x<=ret)tmp=cnt1[x];\n    for(int i=head[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to)if(v!=fa[u])dfs1(v);\n    cnt1[HLD.dep[u]]+=f[u];if(x<=ret)ans[u]=cnt1[x]-tmp;\n    for(int i=0;i<v1[u].size();i++)cnt1[HLD.dep[v1[u][i]]]--;\n}\nvoid dfs2(int u){\n    int x=HLD.dep[u]-w[u]+n,tmp=cnt2[x];\n    for(int i=head[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to)if(v!=fa[u])dfs2(v);\n    for(int i=0;i<v2[u].size();i++)cnt2[v2[u][i]+n]++;\n    ans[u]+=cnt2[x]-tmp;//puts(\"ok\");\n    for(int i=0;i<v3[u].size();i++)cnt2[v3[u][i]+n]--;\n}\nint main(){\n    n=read();m=read();\n    for(int i=1,u,v;i<n;i++)u=read(),v=read(),add(u,v),add(v,u);\n    for(int i=1;i<=n;i++)w[i]=read();\n    for(int i=1;i<=m;i++)a[i].u=read(),a[i].v=read();\n    HLD.build(1,1);HLD.dfs(1);\n    for(int i=1;i<=n;i++)ret=max(ret,HLD.dep[i]);\n    //for(int i=1;i<=n;i++)printf(\"%d \",HLD.dep[i]);puts(\"\");\n    for(int i=1;i<=m;i++){\n        a[i].lca=HLD.query(a[i].u,a[i].v);f[a[i].u]++;\n        //write(a[i].lca);\n        a[i].dis=HLD.dep[a[i].u]+HLD.dep[a[i].v]-2*HLD.dep[a[i].lca];\n        v1[a[i].lca].push_back(a[i].u);\n        v2[a[i].v].push_back(HLD.dep[a[i].v]-a[i].dis);\n        v3[a[i].lca].push_back(HLD.dep[a[i].v]-a[i].dis);\n    }dfs1(1);dfs2(1);\n    for(int i=1;i<=m;i++)if(HLD.dep[a[i].u]-HLD.dep[a[i].lca]==w[a[i].lca])--ans[a[i].lca];\n    for(int i=1;i<=n;i++)printf(\"%d \",ans[i]);puts(\"\");\n    return 0;\n}\n```",
        "postTime": 1545562564,
        "uid": 43012,
        "name": "Luvwgyx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u597d\u50cf\u6211\u7684\u601d\u8def\u548c\u5927\u90e8\u5206\u9898\u89e3\u4e0d\u4e00\u6837\uff1f\n\n![](https://cdn.luogu.com.cn/upload/pic/34438.png)\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u7edf\u8ba1\u6bcf\u68f5\u5b50\u6811\u5185\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u7684\u51fa\u53d1\u70b9\u548c\u7ec8\u70b9\u4e2a\u4e2a\u6570\u3002\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u7684\u4e0d\u540c\u5b50\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4ed6\u4eec\u5408\u5e76\u8d77\u6765\u3002\n\u5176\u4ed6\u89c1\u4ee3\u7801\u3002\n\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <cmath>\n#include <assert.h>\n#include <utility>\nusing int_t = int;\nusing pair_t = std::pair<struct Node *, struct Node *>;\nusing std::cin;\nusing std::cout;\nusing std::endl;\n// #define DEBUG\n\n#define debug(x) std::cout << #x << \" = \" << x << std::endl;\n\nconst int_t LARGE = 300000;\nconst int_t INF = 0x7ffffff;\nconst int_t ROOT = 1;\n\nstd::vector<int_t> graph[LARGE + 1];\nint_t n, m;\nstd::vector<int_t> numbers;\n\n//\u6b27\u62c9\u5e8f\u5217\u5904\u7406LCA\nnamespace LCA\n{\nint_t count = 0;\nint_t first[LARGE + 1];\nint_t parent[LARGE + 1];\nstruct Pair\n{\n    int_t depth;\n    int_t vertex;\n    Pair(int_t depth = -1, int_t vertex = -1)\n    {\n        this->depth = depth;\n        this->vertex = vertex;\n    }\n\n} seq[LARGE * 2 + 1][20];\nbool operator<(const LCA::Pair &a, const LCA::Pair &b)\n{\n    return a.depth < b.depth;\n}\nvoid DFS(int_t vertex, int_t depth = 1, int_t from = 0)\n{\n    parent[vertex] = from;\n    count++;\n    seq[count][0] = Pair{depth, vertex};\n    if (first[vertex] == 0)\n    {\n        // cout << \"first \" << vertex << \" set to \" << count << endl;\n        first[vertex] = count;\n    }\n    for (int_t to : graph[vertex])\n    {\n        if (to != from)\n        {\n            DFS(to, depth + 1, vertex);\n            count++;\n            seq[count][0] = Pair{depth, vertex};\n        }\n    }\n}\nvoid init()\n{\n    DFS(ROOT);\n    for (int_t i = 1; (1 << i) <= count; i++)\n    {\n        for (int_t j = 1; j + (1 << i) - 1 <= count; j++)\n        {\n            seq[j][i] = std::min(seq[j][i - 1], seq[j + (1 << (i - 1))][i - 1]);\n        }\n    }\n}\nint_t depth(int_t x)\n{\n    return seq[first[x]][0].depth;\n}\nint_t getLCA(int_t v1, int_t v2)\n{\n    v1 = first[v1];\n    v2 = first[v2];\n    if (v1 > v2)\n        std::swap(v1, v2);\n\n    int_t length = log2(v2 - v1 + 1);\n    return std::min(seq[v1][length], seq[v2 - (1 << length) + 1][length]).vertex;\n}\n} // namespace LCA\n//\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u8282\u70b9\nstruct Node\n{\n    int_t begin;\n    int_t end;\n    int_t value;\n    Node *left = nullptr;\n    Node *right = nullptr;\n    Node(int_t begin, int_t end)\n    {\n        this->begin = begin;\n        this->end = end;\n        value = 0;\n    }\n    int_t query(int_t pos)\n    {\n        int_t mid = (begin + end) / 2;\n        if (begin == end && pos == mid)\n        {\n            return value;\n        }\n        if (pos <= mid)\n        {\n            if (left != nullptr)\n                return left->query(pos);\n            return 0;\n        }\n        else\n        {\n            if (right != nullptr)\n                return right->query(pos);\n            return 0;\n        }\n    }\n    void add(int_t pos, int_t value)\n    {\n        int_t mid = (begin + end) / 2;\n        if (begin == end && pos == mid)\n        {\n            this->value += value;\n            return;\n        }\n        if (pos <= mid)\n        {\n            if (left == nullptr)\n            {\n                left = new Node(begin, mid);\n            }\n\n            left->add(pos, value);\n        }\n        else\n        {\n            if (right == nullptr)\n            {\n                right = new Node(mid + 1, end);\n            }\n            right->add(pos, value);\n        }\n    }\n};\n//\u5408\u5e76\u4e24\u68f5\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\nNode *merge(Node *left, Node *right)\n{\n    if (left == nullptr)\n        return right;\n    if (right == nullptr)\n        return left;\n    left->left = merge(left->left, right->left);\n    left->right = merge(left->right, right->right);\n    left->value += right->value;\n    return left;\n}\n//\u8868\u793a\u4e00\u4e2a\u73a9\u5bb6\nstruct Player\n{\n    int_t from;\n    int_t to;\n    int_t lca;\n} players[LARGE + 1];\n//\u8868\u793a\u4e00\u4e2a\u8282\u70b9\u4e0a\u7684\u4e0a\u884c\u548c\u4e0b\u884c\u6807\u8bb0\nstruct Mark\n{\n    //\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u8d77\u70b9\u7684\u6807\u8bb0\uff08\u4e0a\u884c\u6807\u8bb0\uff09\n    std::vector<int_t> up;\n    //\u8fd9\u4e2a\u70b9\u4e3a\u7ec8\u70b9\u7684\u8be2\u95ee\u6807\u8bb0\uff08\u4e0b\u884c\u6807\u8bb0\uff09\n    std::vector<int_t> down;\n} marks[LARGE + 1];\n//\u8868\u793a\u4e00\u4e2a\u8be2\u95ee\u70b9\u7684\u8be2\u95ee\u6807\u8bb0\nstruct Query\n{\n    //\u8fd9\u4e2a\u70b9\u6240\u8be2\u95ee\u7684\u7684\u4e0a\u884c\u6807\u8bb0\n    //\u5373time(w)+dep(w)\n    //\u4f1a\u5728\u8fd9\u68f5\u5b50\u6811\u5185\u67e5\u8be2\u6ee1\u8db3dep(s)\u7b49\u4e8e\u8fd9\u4e2a\u6807\u8bb0\u7684\u8282\u70b9\u6570\u91cf\n    int_t up = 0;\n    //\u8fd9\u4e2a\u70b9\u6240\u8be2\u95ee\u7684\u4e0b\u884c\u6807\u8bb0\n    //\u5373time(w)-dep(w)\n    //\u4f1a\u5728\u5b50\u6811\u5185\u67e5\u8be2\u6ee1\u8db3dep(s)-2*dep(lca)\u7b49\u4e8e\u8fd9\u4e2a\u6807\u8bb0\u7684\u8282\u70b9\u6570\u91cf\n    int_t down = 0;\n} querys[LARGE + 1];\n//\u5230\u4e86\u67d0\u4e2a\u70b9\u5e94\u8be5\u5220\u9664\u7684\u6807\u8bb0\n//\u5230\u4e86\u8fd9\u4e2a\u70b9\uff0c\u5728\u7edf\u8ba1\u8fd9\u68f5\u5b50\u6811\u7684\u7b54\u6848\u524d\uff0c\u4f1a\u5148\u628a\u8fd9\u4e9b\u6807\u8bb0\u5220\u53bb\nstruct Remove\n{\n    //\u8981\u5220\u6389\u7684\u4e0a\u884c\u6807\u8bb0\n    std::vector<int_t> up;\n    //\u8981\u5220\u6389\u7684\u4e0b\u884c\u6807\u8bb0\n    std::vector<int_t> down;\n} removes[LARGE + 1];\n//\u7528\u4e8e\u79bb\u6563\u5316\ninline int_t rank(int_t x)\n{\n    return std::lower_bound(numbers.begin(), numbers.end(), x) -\n           numbers.begin() + 1;\n}\ninline void setRank(int_t &x)\n{\n    x = rank(x);\n}\npair_t DFS(int_t vertex, int_t *result, int_t from = 0)\n{\n    Node *up = new Node(1, numbers.size());\n    Node *down = new Node(1, numbers.size());\n    for (int_t to : graph[vertex])\n    {\n        if (to != from)\n        {\n            //\u9996\u5148\u9012\u5f52\u67e5\u8be2\u5b50\u6811\u7b54\u6848\n            auto x = DFS(to, result, vertex);\n            up = merge(up, x.first);\n            down = merge(down, x.second);\n        }\n    }\n\n    //\u6253\u4e0a\u5f53\u524d\u8282\u70b9\u7684\u6807\u8bb0\n    {\n        auto &mark = marks[vertex];\n        for (int_t x : mark.up)\n        {\n            up->add(x, 1);\n        }\n        for (int_t x : mark.down)\n        {\n            down->add(x, 1);\n        }\n    }\n    //\u5220\u9664\u5e94\u8be5\u5220\u9664\u7684\u6807\u8bb0\n    {\n        auto &removing = removes[vertex];\n        for (int_t x : removing.up)\n        {\n\n            assert(up->query(x) >= 1);\n            up->add(x, -1);\n        }\n        for (int_t x : removing.down)\n        {\n            assert(down->query(x) >= 1);\n            down->add(x, -1);\n        }\n    }\n    //\u7edf\u8ba1\u5f53\u524d\u8282\u70b9\u7684\u7b54\u6848\n    result[vertex] = up->query(querys[vertex].up) + down->query(querys[vertex].down);\n    return pair_t(up, down);\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int_t i = 1; i <= n - 1; i++)\n    {\n        int_t from, to;\n        scanf(\"%d%d\", &from, &to);\n        graph[from].push_back(to);\n        graph[to].push_back(from);\n    }\n    LCA::init();\n    for (int_t i = 1; i <= n; i++)\n    {\n        int_t time;\n        scanf(\"%d\", &time);\n        auto &query = querys[i];\n        query.up = time + LCA::depth(i);\n        query.down = time - LCA::depth(i);\n        numbers.push_back(query.up);\n        numbers.push_back(query.down);\n    }\n    for (int_t i = 1; i <= m; i++)\n    {\n        auto &player = players[i];\n        scanf(\"%d%d\", &player.from, &player.to);\n        player.lca = LCA::getLCA(player.from, player.to);\n        //\u8bb0\u5f55\u4e00\u4e0b\u6807\u8bb0\n\n        marks[player.from].up.push_back(LCA::depth(player.from));\n        marks[player.to].down.push_back(LCA::depth(player.from) - 2 * LCA::depth(player.lca));\n        //\u8bb0\u5f55\u4e00\u4e0b\u5220\u9664\u6807\u8bb0\n        //\u4e4b\u6240\u4ee5\u9700\u8981\u8fd9\u4e2a\u4e1c\u897f\uff0c\u662f\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u73a9\u5bb6\u7684\u8d77\u70b9\u548c\u4e2d\u70b9\u90fd\u5728\u4e00\u68f5\u5b50\u6811\u5185\uff0c\u90a3\u4e48\u7edf\u8ba1\u7b54\u6848\u65f6\u53ef\u80fd\u4f1a\u7edf\u8ba1\u4e24\u904d\n        //\u628a\u8fd9\u4e2a\u73a9\u5bb6\u7684\u4e0a\u884c\u6807\u8bb0\u5728\u8d77\u70b9\u548c\u7ec8\u70b9\u7684LCA\u5904\u5220\u6389\uff0c\u800c\u4e0b\u884c\u6807\u8bb0\u5728LCA\u7684\u7236\u8282\u70b9\u5904\u5220\u6389\uff0c\u4ee5\u9632\u6b62\u8fd9\u4e2a\u73a9\u5bb6\u6070\u597d\u80fd\u88ab\u8d77\u70b9\u548c\u7ec8\u70b9\u7684LCA\u7edf\u8ba1\u5230\u65f6\u88ab\u7edf\u8ba1\u4e24\u904d\n        removes[player.lca].up.push_back(LCA::depth(player.from));\n        //\u628a\u8fd9\u4e2a\u73a9\u5bb6\u7684\u53e6\u4e00\u4e2a\u6807\u8bb0\u5728LCA\u7684\u7236\u8282\u70b9\u5904\u5220\u6389\n        removes[LCA::parent[player.lca]].down.push_back(LCA::depth(player.from) - 2 * LCA::depth(player.lca));\n        numbers.push_back(LCA::depth(player.from));\n        numbers.push_back(LCA::depth(player.from) - 2 * LCA::depth(player.lca));\n    }\n    //\u8fdb\u884c\u79bb\u6563\u5316\n    std::sort(numbers.begin(), numbers.end());\n    numbers.resize(std::unique(numbers.begin(), numbers.end()) - numbers.begin());\n    for (int_t i = 1; i <= n; i++)\n    {\n        {\n            auto &query = querys[i];\n            setRank(query.up);\n            setRank(query.down);\n        }\n        {\n            auto &mark = marks[i];\n            std::for_each(mark.up.begin(), mark.up.end(), setRank);\n            std::for_each(mark.down.begin(), mark.down.end(), setRank);\n        }\n        {\n            auto &removing = removes[i];\n            std::for_each(removing.up.begin(), removing.up.end(), setRank);\n            std::for_each(removing.down.begin(), removing.down.end(), setRank);\n        }\n    }\n    static int_t result[LARGE + 1];\n    DFS(ROOT, result, 0);\n    for (int_t i = 1; i <= n; i++)\n    {\n        cout << result[i] << \" \";\n    }\n    return 0;\n}\n```",
        "postTime": 1537975430,
        "uid": 56891,
        "name": "officeyutong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "### \u6811\u5256\u52a0\u66b4\u529b\uff0c\u65f6\u95f4\u5168\u9760\u5361\n\n\u60f3\u4e86\u597d\u4e45\u4e0d\u7528\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u6700\u7ec8\u8fd8\u662f\u56de\u5230\u66b4\u529b\u4e0a\u6765\u4e86\u3002\u65f6\u7a7a\u590d\u6742\u5ea6\u5de8\u5927\uff0c\u80fd\u5361\u8fc7\u4e5f\u662f\u5947\u8ff9\uff08\u9996\u6b21A\u65f6\u6700\u540e\u4e00\u4e2a\u70b9\u79bb\u65f6\u9650\u4ec5\u5dee\u5341\u51e0ms\uff0c\u5176\u4ed6\u70b9\u603b\u7528\u65f6\u90fd\u6bd4\u5b83\u5c0f\uff09\n\n#### #1~#5\n\n\u7528\u4ec0\u4e48\u7b97\u6cd5\u90fd\u884c\uff0cdfs\u7206\u641c\u8def\u5f84\u90fd\u80fd\u8fc7\uff0c\u5f53\u7136\u6811\u5256\u80af\u5b9a\u66f4\u5feb\n\n#### #6~#8\n\n\u8fd9\u56de\u66b4\u529b\u8dd1\u94fe\u5c31\u4e0d\u884c\u4e86\u3002\u5982\u679c\u4ee5\u6bcf\u4eba\u8dd1\u7684\u94fe\u4e3a\u5355\u4f4d\u7edf\u8ba1\uff0c\u90a3\u4e48\u7edf\u8ba1\u4e00\u6761\u94fe\u7684\u590d\u6742\u5ea6\u4e00\u5b9a\u662fO(n)\u7ea7\u522b\u7684\uff0c\u663e\u7136\u4e0d\u884c\u3002\u90a3\u4e48\u53ea\u80fd\u4ee5\u70b9\u4e3a\u5355\u4f4d\u7edf\u8ba1\n\n\u901a\u8fc7\u81ea\u9020\u6570\u636e\u753b\u56fe\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u6240\u6709\u7684\u94fe\u90fd\u662fn->1\uff0c\u90a3\u4e48\u5bf9\u4e8e\u70b9i\uff0c\u5b83\u7edf\u8ba1\u7684\u662f**\u4ece\u70b9i+w[i]\u51fa\u53d1\u5e76\u7ecf\u8fc7i**\u7684\u94fe\u6570\u3002\u4ece\u67d0\u70b9\u51fa\u53d1\u7684\u94fe\u5f88\u597d\u6c42\u554a\uff0c\u76f4\u63a5\u5f00\u4e2a\u6876b[]\uff0c\u6bcf\u52a0\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u5c31\u8ba9b[s[i]]++\u3002\u600e\u4e48\u5904\u7406\u94fe\u5728\u67d0\u70b9\u79bb\u5f00\u800c\u4e0d\u518d\u53c2\u4e0e\u7edf\u8ba1\u5462\uff1f\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b\u7b56\u7565\uff0c\u7528\u7c7b\u4f3c\u524d\u5411\u661f\u7684\u73a9\u610f\u5b58\u4e00\u4e0b\u5728\u6bcf\u70b9\u8fdb\u5165\u3001\u51fa\u53bb\u7684\u94fe\u3002i:n->1\u626b\u4e00\u904d\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5148\u5bf9\u8fdb\u5165\u7684\u94fej\u8fdb\u884c\u52a0\uff08\u76f4\u63a5b[j]++\uff09\uff0c\u7136\u540ecnt[i]+=b[i+w[i]]\uff0c\u518d\u5904\u7406\u51fa\u53bb\u7684\u94fej\uff08b[s[j]]++\uff09\u3002\n\n1->n\u7684\u94fe\u540c\u7406\uff0ccnt[i]+=b[i-w[i]]  \u4e24\u79cd\u60c5\u51b5\u5206\u5f00\u6765\u5904\u7406\u5c31\u884c\uff0c\u8bb0\u5f97\u5224i\u00b1w[i]\u6709\u6ca1\u6709\u8d8a\u754c\n\n\u6ce8\u610f\u8981\u5224\u65ad\u94fe\u7684\u65b9\u5411 s<t\u65f6\u662f1->n\uff0cs>=t\u65f6\u662fn->1\n\n#### #9~#12, #13~#16\n\n\u6709\u597d\u591a\u90e8\u5206\u5206\u53ef\u4ee5\u62ff\u8036\u3002\u4e0d\u8fc7\u6211\u59cb\u7ec8\u6ca1\u60f3\u51fa\u6b63\u89e3\u2026\u2026\n\n#### 100pts\n\n\u6ca1\u9519\u4e00\u4e2a\u66b4\u529b\u76f4\u63a5\u5e72\u6389\u6240\u6709\u70b9\n\n\u6811\u5256\u662f\u5565\uff1f\u628a\u4e00\u68f5\u6811\u62c6\u5206\u6210\u5f88\u591a\u6761\u91cd\u94fe\u3002\u8003\u8651\u5230\u7ed9\u51fan\u6761\u94fe\uff0c\u800c\u6bcf\u6761\u94fe\u53ef\u5728\u91cd\u94fe\u4e0a\u5206\u89e3\u51fa\u4e0d\u8d85\u8fc7logn\u6761\u94fe\uff0c\u53c8\u8981\u8bb0\u5f55\u5206\u89e3\u51fa\u7684\u94fe\uff0c\u6240\u4ee5\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3anlogn\uff0c\u53ef\u4ee5\u63a5\u53d7\uff08\u5c31\u662f\u592a\u5927\u4e86\uff0c\u5e38\u6570\u4e5f\u5de8\u5927\uff09\n\n#\u8b66\u544a\uff01 \u6811\u5256\u6570\u7ec4\u548c\u539f\u6570\u7ec4\u522b\u641e\u6df7\uff0c\u5426\u5219\u4f1a\u6b7b\u5f97\u5f88\u60e8\n\n\u7531\u4e8e\u6811\u4e0a\u7684\u5904\u7406\u90fd\u662f\u4ee5\u91cd\u94fe\u4e3a\u5355\u4f4d\u7684\uff0c\u90a3\u4e48\u4e3a\u4e86\u786e\u4fdd\u4e0b\u6807\u8fde\u7eed\uff0c\u5c31\u5f97\u7528dfs\u5e8f\u4f5c\u4e3a\u65b0\u7684\u4e0b\u6807\uff0c\u522b\u548c\u7ed3\u70b9\u5e8f\u53f7\u641e\u6df7\u3002\u5229\u7528pos[]\u548cseq[]\u6765\u56de\u8f97\u8f6c\u3002\u94fe\u4e0a\u7edf\u8ba1\u4e0d\u518d\u7528\u539f\u5e8f\u53f7\uff01\n\n\u4efb\u52a1\u5f88\u660e\u786e\uff1a\u5c06\u94fe\u5206\u89e3\uff0c\u7136\u540e\u5bf9\u6bcf\u6761\u91cd\u94fe\u5229\u7528#6~#8\u7684\u66b4\u529bO(n)\u65b9\u6cd5\u5904\u7406\n\n\u6ce8\u610f\uff1a\u6bcf\u6761\u94fe\u9700\u9644\u5e26\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u8bb0\u5f55\u5b83\u662f\u4f55\u65f6\u5230\u94fe\u7684\u8d77\u70b9\u7684\u3002\u5b50\u94fe\u8868\u793a\u4e3a(s,t,stime)\uff0c\u5373\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u5728\u8d77\u70b9\u7684\u65f6\u523b\n\n\u5177\u4f53\u6b65\u9aa4\uff1a\n\n1. \u6811\u5256\u3002\u8fd9\u4e2a\u6ca1\u5565\u597d\u8bf4\u7684\u3002\u548c\u5e38\u89c4\u6811\u5256\u4e0d\u540c\uff0c\u8fd9\u91cc\u8981\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u6240\u5904\u91cd\u94fe\u7684\u5e8f\u53f7\u3002\u867d\u7136\u7528top\u4ee3\u66ff\u4e5f\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u8fd9\u6837\u91cd\u94fe\u5e8f\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u6709\u4e00\u5b9a\u65b9\u4fbf\n\n2. \u627e\u51fa\u6bcf\u6761\u91cd\u94fe\u7684\u533a\u95f4[cl,cr]\u3002\u56e0\u4e3a\u5df2\u7ecf\u6709\u4e86dfs\u5e8f\uff0c\u5012\u7740\u904d\u5386seq\u6570\u7ec4\uff0c\u4ee5pos[seq[i]](\u5373i)\u4e3a\u53f3\u7aef\u70b9\uff0c\u4ee5pos[top[seq[i]]]\u4e3a\u5de6\u7aef\u70b9\uff0c\u533a\u95f4\u7f16\u53f7\u5373\u4e3a\u91cd\u94fe\u7f16\u53f7hid[seq[i]]\u3002\u8fd9\u4e2a\u533a\u95f4\u4ec5\u7528\u4e8e\u5bf9\u6bcf\u6761\u91cd\u94fe\u6765\u56de\u626b\u63cf\u4e00\u904d\u7684\u5faa\u73af\u8303\u56f4\u3002\n\n3. \u4e00\u8fb9\u8bfbs,t\u4e00\u8fb9\u66b4\u529b\u62c6\u94fe\u3002\u7528\u7684\u662f\u6811\u5256\u7684\u5957\u8def\uff0c\u4e24\u70b9\u5f80\u4e0a\u722c\u3002\u56e0\u4e3a\u6709\u65f6\u95f4\u6233\uff0c\u6240\u4ee5\u9700\u6709tu=0,tv=(u-v\u8def\u5f84\u7684\u957f\u5ea6)\uff0c\u4e3a\u4e86\u6c42\u957f\u5ea6\u8fd8\u5f97\u5148\u6c42\u4e00\u4e0blca\uff0c\u5c31\u5927\u7ea65\u884c\u7684\u4e8b\u3002\u56e0\u4e3a\u94fe\u5b58\u5728\u65b9\u5411\uff0c\u4e0d\u80fd\u968f\u4fbf\u4ea4\u6362u,v\u3002\u8fd9\u91cc\u6211\u4eec\u8fd9\u6837\u505a\uff1a\u5982\u679ctop[u]\u5728\u4e0b\u9762\uff0c\u52a0\u5165\u94fe(pos[u],pos[top[u]],tu)\uff0cu\u5728\u5f80\u4e0a\u8df3\u7684\u540c\u65f6\uff0ctu\u52a0\u4e0a\u8df3\u7684\u8ddd\u79bbpos[u]-pos[top[u]]+1\u3002\u5982\u679ctop[v]\u5728\u4e0a\u9762\uff0c\u52a0\u5165\u94fe(pos[top[v]],pos[v],tv-(pos[v]-pos[top[v]]))\uff0cu\u5728\u5f80\u4e0a\u8df3\u7684\u540c\u65f6\uff0ctv\u51cf\u53bb\u5f80\u4e0a\u8df3\u7684\u8ddd\u79bbpos[v]-pos[top[v]]+1\u3002\u5982\u679cu,v\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\uff0c\u76f4\u63a5\u52a0\u94fe(pos[u],pos[v],tu)\u3002\n\n4. \u5bf9\u6bcf\u6761\u91cd\u94fe\u8fdb\u884c\u66b4\u529b\u5904\u7406\u3002\u65b9\u6cd5\u548c\u94fe\u5f62\u6811\u5dee\u4e0d\u591a\uff0c\u53ea\u6709\u51e0\u5904\u4fee\u6539\uff1a\n\n  1. \u904d\u5386\u7684\u533a\u95f4\u662f[cl,cr]\u6216\u5176\u53cd\u5411\n   \n  2. \u6ce8\u610f\u6570\u7ec4\u8fb9\u754c\u95ee\u9898\u3002c[p].s+c[p].stime\u548cc[p].s-c[p].stime\u90fd\u4e0d\u80fd\u8d8a\u754c\u3002c[p]\u8868\u793a\u7684\u662f\u7b2cp\u6761\u5b50\u94fe\u3002\u540c\u6837\uff0c\u7edf\u8ba1\u7b54\u6848cnt\u7684\u65f6\u5019\u4e5f\u8981\u6ce8\u610fi+w[seq[i]]\u548ci-w[seq[i]]\u4e0d\u80fd\u8d8a\u754c\u3002\n \n\n\u867d\u7136\u6309nlogn\u7b97\u5b50\u94fe\u6570\u53ef\u4ee5\u8fbe\u52305460000\uff0c\u4f46\u5b9e\u9645\u4e0a\u6570\u636e\u6ca1\u90a3\u4e48\u6781\u7aef\uff0c\u4e0d\u52304500000\u3002\n\n\u5f88\u597d\uff0c\u5230\u6b64\u4f60\u62ff\u5230\u6ee1\u5206\u2026\u2026\u4e86\u5417\uff1f\n\n#### True End\n\n\u5982\u679c\u5c31\u6309\u4e0a\u8ff0\u65b9\u6cd5\u5904\u7406\uff0c\u90a3\u4e48\u5e94\u8be5\u80fd\u62ff\u523080pts\u621660pts\uff0c\u7528\u6570\u636e\u81ea\u6d4b\u7684\u8bdd\uff08\u8bb0\u5f97\u8c03\u6808\u7a7a\u95f4\uff09\u4f1a\u53d1\u73b0\u6700\u540e4\u4e2a\u70b9\u5168\u70b8\u4e86\uff0c\uff08s=1\u7684\u70b9\u4e5f\u53ef\u80fd\u70b8\uff09\u800c\u4e14\u90fd\u662f\u5c40\u90e8\u5c11\u89e3\n\n\u4ed4\u7ec6\u60f3\u60f3\uff0c\u771f\u7684\u4e0d\u80fd\u8d8a\u754c\u5417\uff1f\n\n\u4e0a\u754c\u7684\u5904\u7406\uff0c\u7528<300010\uff08\u6570\u7ec4\u5927\u5c0f\uff09\u5b9e\u6d4b\u662f\u6ca1\u95ee\u9898\u7684\uff08\u7406\u8bba\u53ef\u80fd\u66f4\u5927\uff1f\uff09\n\n\u4e0b\u754c\u5176\u5b9e\u53ef\u4ee5\u4e3a\u8d1f\u2026\u2026\u8003\u5bdfc[p].s-c[p].stime\uff0cs=1\u65f6\u968f\u968f\u4fbf\u4fbf\u53d8\u8d1f\u2026\u2026\u4e8e\u662f\u5c31\u5f00\u4e00\u4e2a\u8d1f\u6876\uff0c\u4e0b\u6807\u53d6\u53cd\u3002\u7136\u540e\u778e\u641e\u5927\u6982\u5c31\u80fdA\u4e86\n\n\u6700\u540e\u5982\u679c\u5feb\u8bfb+register\u5361\u5e38\u4e0d\u591f\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1aT\u6389\u6700\u540e1\u4e2a\u70b9\n\n\u2014\u2014\u2014\u2014\n\n\u6240\u4ee5\u8bf4\u5566\uff0c\u8fd9\u771f\u7684\u662f\u8d85\u7ea7\u66b4\u529b\u53c8\u96be\u8c03\u7684\u7b97\u6cd5\uff0c\u4ee3\u7801\u4e5f\u5f88\u957f\u2026\u2026\n\n\u4e0d\u60f3\u4f5c\u6b7b\u5c31\u522b\u7528\u8fd9\u79cd\u8be1\u5f02\u7684\u65b9\u6cd5\n\n```cpp\n#include <cstdio>\n#define MAXN 300010\n#define MAXNN 5000000\nusing namespace std;\nint n,m,w[MAXN],cnt[MAXN];\nint b[MAXN]; //\u5b9e\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u51fa\u53d1\u7684\u672a\u79bb\u5f00\u7684\u4eba\u6570\nint b2[MAXN]; //\u540c\u4e0a\uff0c\u4e0b\u6807\u53d6\u8d1f\nint fa[MAXN],dep[MAXN],siz[MAXN],son[MAXN],top[MAXN],pos[MAXN],seq[MAXN];\nint hid[MAXN],hcnt=1,cl[MAXN],cr[MAXN]; //\u6bcf\u4e2a\u70b9\u6240\u5904\u91cd\u94fe\u7684\u7f16\u53f7\uff0c\u91cd\u94fe\u6570\uff0c\u7b2ci\u6761\u91cd\u94fe\u7684\u7aef\u70b9\nint ctot; //\u5b50\u94fe\u6570\nstruct chain {\n\tint s,t,stime; //\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u76f8\u5bf9\u8d77\u70b9\u65f6\u523b\n} c[MAXNN]; //\u5b50\u94fe\nint head[MAXN],tot;\nstruct edge {\n\tint next,to;\n} e[MAXN<<1];\nstruct bucket { //\u4e00\u4e2a\u7ed3\u6784\u7c7b\u4f3c\u56fe\u7684\u8be1\u5f02\u7684\u6876\n\tint head[MAXN],next[MAXNN],val[MAXNN],tot;\n\tinline void add(int i,int x) {\n\t\tnext[++tot]=head[i];\n\t\thead[i]=tot;\n\t\tval[tot]=x; //\u8bb0\u5f55\u5b50\u94fe\u7684\u5e8f\u53f7\n\t}\n} bin,bout; //\u8bb0\u5f55\u5728\u67d0\u70b9\u8fdb/\u51fa\u53bb\u7684\u94fe\ninline void addEdge(int u,int v) {\n\te[++tot]=(edge){head[u],v};\n\thead[u]=tot;\n}\ninline void addChain(int u,int v,int t) {\n\tc[++ctot]=(chain){u,v,t};\n\tbin.add(u,ctot);\n\tbout.add(v,ctot);\n}\nint read() {\n\tint x=0;\n\tchar ch=getchar();\n\twhile (ch<'0' || ch>'9') ch=getchar();\n\twhile (ch>='0' && ch<='9') x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn x;\n}\ninline void swap(int &a,int &b) {\n\ta^=b, b^=a, a^=b;\n}\nvoid dfs1(int u,int d) {\n\tdep[u]=d;\n\tsiz[u]=1;\n\tfor (int i=head[u];i;i=e[i].next) {\n\t\tint v=e[i].to;\n\t\tif (!dep[v]) {\n\t\t\tfa[v]=u;\n\t\t\tdfs1(v,d+1);\n\t\t\tsiz[u]+=siz[v];\n\t\t\tif (siz[son[u]]<siz[v]) son[u]=v;\n\t\t}\n\t}\n}\nvoid dfs2(int u,int t) {\n\tstatic int ord=0;\n\tseq[pos[u]=++ord]=u;\n\ttop[u]=t;\n\tif (son[u]) hid[son[u]]=hid[u], dfs2(son[u],t);\n\tfor (int i=head[u];i;i=e[i].next) {\n\t\tint v=e[i].to;\n\t\tif (v!=fa[u] && v!=son[u]) {\n\t\t\thid[v]=++hcnt;\n\t\t\tdfs2(v,v);\n\t\t}\n\t}\n}\nint LCA(int u,int v) {\n\twhile (top[u]!=top[v]) {\n\t\tif (dep[top[u]]>dep[top[v]]) swap(u,v);\n\t\tv=fa[top[v]];\n\t}\n\treturn dep[u]<dep[v] ? u : v;\n}\nvoid dismantle(int u,int v) { //\u5c06u-v\u94fe\u8fdb\u884c\u62c6\u89e3\uff0c\u9ed8\u8ba4\u662f\u4eceu\u5230v\n\tint tu=0,tv=dep[u]+dep[v]-2*dep[LCA(u,v)];\n\twhile (top[u]!=top[v]) {\n\t\tif (dep[top[u]]>dep[top[v]]) {\n\t\t\taddChain(pos[u],pos[top[u]],tu);\n\t\t\ttu+=pos[u]-pos[top[u]]+1;\n\t\t\tu=fa[top[u]];\n\t\t} else {\n\t\t\taddChain(pos[top[v]],pos[v],tv-(pos[v]-pos[top[v]]));\n\t\t\ttv-=pos[v]-pos[top[v]]+1;\n\t\t\tv=fa[top[v]];\n\t\t}\n\t}\n\taddChain(pos[u],pos[v],tu);\n}\nvoid process(int k) { //\u5bf9\u6bcf\u6761\u94fe\u8fdb\u884c\u66b4\u529b\u5904\u7406\n\t//\u6bcf\u6761\u94fe\u4e00\u5b9a\u662fl\u79bb\u6839\u8fd1\n\t//r->l \u5f80\u5de6\u8dd1  s>=t\n\tfor (register int i=cr[k];i>=cl[k];i--) {\n\t\tfor (register int j=bin.head[i];j;j=bin.next[j]) { //\u8fdb\u5165\n\t\t\tint p=bin.val[j]; //\u5b50\u94fe\n\t\t\tif (c[p].s<c[p].t) continue; //\u662f\u5f80\u53f3\u8dd1\u7684 \u4e0d\u7b26\n\t\t\tif (i+c[p].stime<MAXN) b[i+c[p].stime]++;\n\t\t}\n\t\tif (i+w[seq[i]]<MAXN) cnt[seq[i]]+=b[i+w[seq[i]]];\n\t\tfor (register int j=bout.head[i];j;j=bout.next[j]) { //\u79bb\u5f00\n\t\t\tint p=bout.val[j]; //\u5b50\u94fe\n\t\t\tif (c[p].s<c[p].t) continue; //\u662f\u5f80\u53f3\u8dd1\u7684 \u4e0d\u7b26\n\t\t\tif (c[p].s+c[p].stime<MAXN) b[c[p].s+c[p].stime]--;\n\t\t}\n\t}\n\t//l->r \u5f80\u53f3\u8dd1  s<t\n\tfor (register int i=cl[k];i<=cr[k];i++) {\n\t\tfor (register int j=bin.head[i];j;j=bin.next[j]) { //\u8fdb\u5165\n\t\t\tint p=bin.val[j]; //\u5b50\u94fe\n\t\t\tif (c[p].s>=c[p].t) continue; //\u662f\u5f80\u5de6\u8dd1\u7684 \u4e0d\u7b26\n\t\t\tif (i-c[p].stime>=0) b[i-c[p].stime]++;\n\t\t\telse b2[-i+c[p].stime]++;\n\t\t}\n\t\tif (i-w[seq[i]]>=0) cnt[seq[i]]+=b[i-w[seq[i]]];\n\t\telse cnt[seq[i]]+=b2[-i+w[seq[i]]];\n\t\tfor (register int j=bout.head[i];j;j=bout.next[j]) { //\u79bb\u5f00\n\t\t\tint p=bout.val[j]; //\u5b50\u94fe\n\t\t\tif (c[p].s>=c[p].t) continue; //\u662f\u5f80\u5de6\u8dd1\u7684 \u4e0d\u7b26\n\t\t\tif (c[p].s-c[p].stime>=0) b[c[p].s-c[p].stime]--;\n\t\t\telse b2[-c[p].s+c[p].stime]--;\n\t\t}\n\t}\n}\nint main() {\n\tn=read(), m=read();\n\tfor (register int i=1;i<n;++i) {\n\t\tint u,v;\n\t\tu=read(),v=read();\n\t\taddEdge(u,v);\n\t\taddEdge(v,u);\n\t}\n\tfor (register int i=1;i<=n;++i) w[i]=read();\n\t//\u6811\u5256\n\tdfs1(1,1);\n\thid[1]=1;\n\tdfs2(1,1);\n\t//\u5904\u7406\u91cd\u94fe\u7684\u7aef\u70b9\n\tfor (register int i=n;i>=1;i=pos[top[seq[i]]]-1) {\n\t\tcr[hid[seq[i]]]=i;\n\t\tcl[hid[seq[i]]]=pos[top[seq[i]]];\n\t}\n\t//\u62c6\u94fe\n\tfor (register int i=0;i<m;++i) {\n\t\tint s=read(),t=read();\n\t\tdismantle(s,t);\n\t}\n\t//\u5bf9\u6bcf\u6761\u94fe\u5904\u7406\n\tfor (register int i=1;i<=hcnt;i++) process(i);\n\t//\u8f93\u51fa\n\tfor (register int i=1;i<=n;++i) printf(\"%d \",cnt[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```",
        "postTime": 1533873149,
        "uid": 32771,
        "name": "\u554a\u561e\u561e\u561e\u561e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u7b97\u6cd5\uff1atarjan\\_LCA\uff0c\u6811\u4e0a\u5dee\u5206\uff0c\u6876+DFS\u7ef4\u62a4\u9759\u6001\u5b50\u6811\u4fe1\u606f\n\n\u7ecf\u8fc7\u4e24\u5929\u591a\u7684\u52aa\u529b\uff0c\u7ec8\u4e8e\u628a\u8fd9\u9053noip2016\u6700\u96be\u7684\u9898\u653b\u4e0b\u6765\u4e86\uff0c\u81f3\u6b64\uff0cnoip2016\u5df2\u6539\u6210\u6ee1\u5206\n\n\n\u9898\u76ee\u672c\u8eab\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\uff1a\u7ed9\u5f88\u591a\u6761\u8def\u5f84\uff0c\u95ee\u5bf9\u4e8e\u6811\u4e0a\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5728\u7ed9\u5b9a\u7684\u67d0\u65f6\u523b\u5230\u8fbe\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u6709\u591a\u5c11\n\n\u5982\u679c\u601d\u8def\u8ddf\u7740\u4eba\u8dd1\uff0c\u90a3\u4e48\u6c38\u8fdc\u90fd\u4f1a\u662fO(nm)\u7684\uff08\u66b4\u529b\u6811\u5256\u9664\u5916\uff09\n\n\u5c1d\u8bd5\u8df3\u51fa\u8dd1\u7684\u8fc7\u7a0b\u3002\n\n\u5148\u8003\u8651\u5411\u4e0a\u7684\u4e00\u6bb5\u3002\u53d1\u73b0\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u8d77\u70b9u\u4e0e\u89c2\u5bdf\u70b9x\u5b58\u5728\u6df1\u5ea6\u5173\u7cfb\uff1a\n\n    de[x]+w[x]=de[u]\n\n\u5de6\u8fb9\u662f\u5b9a\u503c\uff0c\u6240\u4ee5\u663e\u7136\uff0c\u5728x\u5b50\u6811\u91cc\u6ee1\u8db3de[u]\u7b49\u4e8e\u8fd9\u4e2a\u5b9a\u503c\u7684\u70b9\u5c31\u662f\u53ef\u4ee5\u89c2\u5bdf\u5230\u7684\u3002\n\n\u518d\u8003\u8651\u5411\u4e0b\u7684\u3002\u4e3a\u4e86\u5904\u7406\u65b9\u4fbf\uff0c\u80af\u5b9a\u8fd8\u662f\u8981\u60f3\u529e\u6cd5\u628a\u4ee3\u8868\u4e00\u6761\u8def\u5f84\u7684\u70b9\u653e\u5728x\u5b50\u6811\u91cc\u3002\u53ef\u4ee5\u8003\u8651\u7ec8\u70b9v\u3002\n\n\u540c\u7406\u4e8e\u4e0a\uff0c\u53ef\u5f97\n\n    w[x]-de[x]=dis[u,v]-de[v]\n\n\u4e8e\u662f\uff0c\u4e24\u4e2a\u65b9\u5411\u4e0a\u80fd\u89c2\u5bdf\u5230\u7684\u6761\u4ef6\u90fd\u5df2\u7ecf\u89e3\u51b3\n\n\n\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u662f\u5982\u4f55\u7edf\u8ba1\u3002\n\n\uff08\u4ee5\u4e0b\u5c06\u201c\u67d0\u4e2a\u4e0b\u6807\u7684\u6876\u91cc\u7684\u503c\u201d\u79f0\u4e3a\u8fd9\u4e2a\u4e0b\u6807\u7684\u201c\u6876\u503c\u201d\uff09\n\n\u5982\u679c\u6ca1\u6709\u201c\u5728x\u5b50\u6811\u91cc\u201d\u7684\u9650\u5236\uff0c\u65b9\u6cd5\u5c31\u5f88\u663e\u7136\u4e86\uff1a\u5efa\u7acb\u4e24\u4e2a\u4ee5\u7b49\u5f0f\u53f3\u8fb9\u503c\u4e3a\u4e0b\u6807\u7684\u6876\uff0c\u7136\u540e\u7528\u6bcf\u4e2a\u89c2\u5bdf\u70b9\u4f9d\u6b21\u53bb\u6876\u91cc\u627e\u6570\u5373\u53ef\n\n\u4f46\u662f\u201c\u5728x\u5b50\u6811\u91cc\u201d\u8fd9\u662f\u4e00\u4ef6\u5f88\u9ebb\u70e6\u7684\u4e8b\n\n\u53ef\u4ee5\u505adfs\u5e8f\uff0c\u7136\u540e\u7528\u6570\u636e\u7ed3\u6784\u89e3\u51b3\u201c\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u67d0\u6570\u201d\u7684\u95ee\u9898\uff0c\u4f46\u662f\u592a\u4e0d\u4f18\u7f8e\u4e86\uff08\u6211\u4e0d\u4f1a\uff0c\u4ee5\u540e\u8fd8\u662f\u8981\u5b66\u7684\uff09\n\n\n\u65e2\u7136\u4e0d\u53ef\u80fd\u7ed9\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u90fd\u7ef4\u62a4\u4e00\u4e2a\u6876\uff0c\u90a3\u5c31\u8003\u8651\u5171\u7528\u4e00\u4e2a\u6876\uff0c\u76f4\u63a5\u53d6\u7528\u6876\u503c\uff0c\u518d\u51cf\u53bb\u4e0d\u5728\u5b50\u6811\u91cc\u7684\u90e8\u5206\u5c31\u884c\u4e86\n\n\n\u5f53\u8fdb\u5165\u4e00\u4e2a\u5b50\u6811x\u65f6\uff0c\u628a\u76ee\u524d\u4e3a\u6b62x\u5bf9\u5e94\u7684\u4e24\u4e2a\u503c\u7684\u6876\u503c\u4f20\u7ed9x\uff0c\u8fd9\u6837\uff0c\u5f53\u904d\u5386\u4e86\u4e00\u904dx\u5b50\u6811\uff0c\u56de\u6eaf\u56de\u6765\u65f6\uff0c\n\n\u73b0\u5728\u7684\u6876\u503c\u51cf\u53bb\u90a3\u4e24\u4e2a\u503c\uff0c\u5f97\u5230\u3010\u6876\u503c\u7684\u53d8\u5316\u91cf\u3011\uff0c\u5c31\u662fx\u5b50\u6811\u91cc\u7684\u503c\n\n\n\u8d77\u70b9\u7ec8\u70b9\u7684\u94fe\u8868\u662f\u6cbf\u7528\u7684tarjan\u7684\uff0clca\u9700\u8981\u53e6\u5f00\u4e00\u4e2a\u94fe\u8868\n\n\u8fd8\u6709lca\u4f4d\u7f6e\u4f1a\u628a\u5f53\u524d\u8def\u5f84\u8ba1\u7b97\u4e24\u6b21\uff0c\u56e0\u6b64\u5904\u7406lca\u65f6\u8fd8\u9700\u8981\u51cf\u53bb\u4e00\u6b21\n\n\nbyAPT\n\n```pascal\n//NOIP2016 D1T2 \u201c\u5929\u5929\u7231\u8dd1\u6b65\u201d byAPT 2016.12.10\n//\u4ec5\u4f9b\u5b66\u4e60\uff0c\u7981\u6b62\u76f4\u63a5\u7c98\u4e0a\u53bb\u63d0\u4ea4\nvar\n    n,m,x,y,\n    totl,totq,tlca         :longint;\n    i,j,k               :longint;\n    last,lca,lastq,fth,w,de,dis,\n    plca,lalca,\n    ans                 :array[0..300010]of longint;\n    vis                 :array[0..300010]of boolean;\n    pre,oth,preq,othq   :array[0..600010]of longint;\n    a,b                 :array[-400005..400005]of longint; //Buckets\n\nprocedure conn(a,b:longint);\nbegin\n    inc(totl);\n    pre[totl]:=last[a];\n    last[a]:=totl;\n    oth[totl]:=b;\nend;\n\nprocedure addlca(c:longint);\nbegin\n    inc(tlca);\n    plca[tlca]:=lalca[c];\n    lalca[c]:=tlca;\nend;\n\n{--CLASS tarjan_lca}\nprocedure addq(a,b:longint);\nbegin\n    inc(totq);\n    preq[totq]:=lastq[a];\n    lastq[a]:=totq;\n    othq[totq]:=b;\nend;\n\nfunction getfth(x:longint):longint;inline;\nbegin\n    if x=fth[x] then exit(x);\n    fth[x]:=getfth(fth[x]);\n    exit(fth[x]);\nend;\n\nprocedure tarjan(x:longint);\nvar p,r:longint;\nbegin\n    vis[x]:=true;\n    p:=last[x];\n    while p>0 do begin\n        r:=oth[p];\n        if not vis[r] then begin\n            de[r]:=de[x]+1;\n            tarjan(r);\n            fth[r]:=x;\n        end;\n        p:=pre[p];\n    end;\n\n    p:=lastq[x];\n    while p>0 do begin\n        r:=othq[p];\n        if vis[r] then lca[p>>1]:=getfth(r);\n        p:=preq[p];\n    end;\nend;\n{--END}\n\nprocedure dfs(x,sa,sb:longint);\nvar p,r:longint;\nbegin\n    vis[x]:=true;\n\n    p:=lastq[x];\n    while p>0 do begin\n        //if x=5 then writeln(';;;');\n        if p and 1=0 then begin\n            inc(a[de[x]]);\n        end else begin\n            inc(b[dis[p>>1]-de[x]]);\n        end;\n        p:=preq[p];\n    end;\n\n    p:=last[x];\n    while p>0 do begin\n        r:=oth[p];\n        if not vis[r] then begin\n            dfs(r,a[w[r]+de[r]],b[w[r]-de[r]]);\n        end;\n        p:=pre[p];\n    end;\n\n    ans[x]:=a[w[x]+de[x]]+b[w[x]-de[x]]-sa-sb;\n    //writeln(ans[5]);\n    {if ans[5]=1 then begin\n        p:=1;\n    end;}\n\n    p:=lalca[x];\n    while p>0 do begin\n        //writeln('dele',p,' ',othq[p<<1 or 1],' ',othq[p<<1]);\n        dec(a[de[othq[p<<1 or 1]]]);\n        dec(b[dis[p]-de[othq[p<<1]]]);\n        if de[othq[p<<1 or 1]]-de[x]=w[x] then dec(ans[x]);\n        p:=plca[p];\n    end;\nend;\n\nbegin\n    read(n,m);\n    for i:=1 to n-1 do begin\n        read(x,y);\n        conn(x,y); conn(y,x);\n    end;\n\n    for i:=1 to n do read(w[i]);\n\n    totq:=1;\n    for i:=1 to m do begin\n        read(x,y);\n        addq(x,y); addq(y,x);\n    end;\n\n    for i:=1 to n do fth[i]:=i;\n    tarjan(1);\n    //for i:=1 to m do write(lca[i],' ');\n\n    for i:=1 to m do\n        dis[i]:=de[othq[i<<1]]+de[othq[i<<1 or 1]]-de[lca[i]]*2;\n\n    for i:=1 to m do addlca(lca[i]);\n\n    {for i:=1 to n do write(lalca[i],' ');\n    writeln; }\n\n\n    fillchar(vis,sizeof(vis),0);\n    dfs(1,0,0);\n\n    for i:=1 to n do write(ans[i],' ');\n\n    //for i:=-5 to 5 do writeln(i,'::',a[i],' ',b[i]);\n\nend.\n```",
        "postTime": 1481369314,
        "uid": 14769,
        "name": "apt123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "# \u6811\u4e0a\u5dee\u5206\uff08LCA\u8f85\u52a9(\u6811\u4e0a\u500d\u589e\u7248)\uff09\n### \u9898\u9762\u56de\u987e\n\u6709\u4e00\u68f5$n$\u4e2a\u8282\u70b9\uff0c\u8fb9\u6743\u4e3a$1$\u7684\u6811\uff0c\u6709$m$\u4e2a\u4eba\u5728$S[i]$\u548c$T[i]$\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u4ece$0$\u65f6\u523b\u51fa\u53d1\u5f00\u59cb\u8dd1\u6b65\uff0c\u6bcf\u4e2a\u8282\u70b9$i$\u4e0a\u90fd\u6709\u4e00\u4e2a\u89c2\u5bdf\u5458\uff0c\u89c2\u5bdf\u7b2c$w[i]$\u79d2\u6070\u597d\u7ecf\u8fc7\u8be5\u8282\u70b9\u7684\u4eba\u6570\u3002\u95ee\uff1a\u6bcf\u4e2a\u89c2\u5bdf\u5458\u53ef\u4ee5\u770b\u5230\u591a\u5c11\u4eba\uff1f\n### \u601d\u8def\u5206\u6790\n~~\uff08\u89e3\u91ca\u4e00\u6ce2lyd\u5927\u4f6c\u7684\u601d\u8def\uff09~~\n\n\u7531\u4e8e\u6bcf\u4e2a\u4eba\u8fd0\u52a8\u7684\u8def\u5f84\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u6bcf\u4e2a\u4eba\u7684\u8def\u5f84\u5206\u4e3a\u4e24\u6bb5\uff1a\u8d77\u70b9$s$\u5230$lca$\uff0c$lca$\u5230\u7ec8\u70b9$t$\n\n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u89c2\u6d4b\u70b9$x$,\u6709\u4e24\u79cd\u60c5\u51b5\u53ef\u4ee5\u89c2\u5bdf\u5230\u7b2c$i$\u4e2a\u4eba(\u5176\u4e2d$d$\u6570\u7ec4\u8868\u793a\u6df1\u5ea6\uff0c\u53ef\u4ee5\u7528bfs\u4e00\u904d\u5904\u7406\u500d\u589e\u65f6\u8fdb\u884c\u9884\u5904\u7406)\n\n1. $x$\u5728$s[i]$\u5230$lca(s[i],t[i])$\u7684\u8def\u5f84\u4e0a\uff0c$w[x]=d[s[i]]-d[x]$\n\n2. $x$\u5728$lca(s[i],t[i])$\u5230$t[i]$\u7684\u8def\u5f84\u4e0a\uff0c$w[x]=d[s[i]]+d[x]-2* d[lca(s[i],t[i])] $\n\n\u8fd9\u4e24\u79cd\u60c5\u51b5\u5176\u5b9e\u662f\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u4e0d\u59a8\u5148\u6765\u8003\u8651\u7b2c\u4e00\u79cd\n\n\u79fb\u9879\u5f97 $w[x]+d[x]=d[s[i]]$\n\n\u8fd9\u5c31\u76f8\u5f53\u4e8e\u5728$s[i]$\u5230$lca(s[i],t[i])$\u7684\u8def\u5f84\u4e0a\u6bcf\u4e2a\u8282\u70b9\u653e\u4e00\u4e2a\u7c7b\u578b\u4e3a$d[s[i]]$\u7684\u7269\u54c1\uff0c\u6c42\u6700\u7ec8\u6bcf\u4e2a\u8282\u70b9\u4e0a\u653e\u6709\u591a\u5c11\u4e2a\u7c7b\u578b\u4e3a$d[x]+w[x]$\u7684\u7269\u54c1\n\n\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86[\u96e8\u5929\u7684\u5c3e\u5df4](https://www.luogu.com.cn/problem/P4556)\uff0c\u4f46\u662f\u90a3\u9053\u7ebf\u6bb5\u6811\u5408\u5e76\u6a21\u677f\u9898\u662f\u56e0\u4e3a\u8981\u6c42\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u7684\u79cd\u7c7b\u662f\u4ec0\u4e48\uff0c\u8fd9\u9053\u9898\u5219\u662f\u6c42\u7ed9\u5b9a\u7684\u79cd\u7c7b\u6709\u591a\u5c11\u4e2a\u7269\u54c1\n\n\u56e0\u6b64\u53ef\u4ee5\u4e0d\u7528\u6572\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\u3002\u3002\n\n**\u4e0b\u9762\u662f\u505a\u6cd5\uff1a**\n\n1. \u5bf9\u6bcf\u4e2a\u8282\u70b9\u5efa\u7acb\u4e24\u4e2a$vector$\u6570\u7ec4\uff0c\u5206\u522b\u8868\u793a\u5728\u8fd9\u4e2a\u8282\u70b9\u4ea7\u751f\u6216\u6d88\u5931\u7684\u7269\u54c1\u7684\u7c7b\u578b\n\n2. \u5efa\u7acb\u5168\u5c40\u6570\u7ec4$c$\uff0c\u8bb0\u5f55\u6bcf\u79cd\u7c7b\u578b\u7269\u54c1\u7684\u6570\u91cf\uff08\u76f8\u5f53\u4e8e\u6876\uff09\n\n3. \u5f00\u59cb\u505adfs\uff0c\u5f53\u9047\u5230\u4e00\u4e2a\u70b9$x$\u65f6\uff0c\u5148\u4fdd\u5b58\u5f53\u524d$c[w[x]+d[x]]$\u7684\u503c\uff0c\u8bb0\u4e3a$cnt$\n\n4. \u7136\u540e\u626b\u63cf$x$\u7684\u4e24\u4e2a$vector$\uff0c\u4ea7\u751f\u6570\u7ec4\u4e2d\u51fa\u73b0$z$\u5c31\u8ba9$c[z]++$,\u6d88\u5931\u6570\u7ec4\u4e2d\u51fa\u73b0$z$\u5c31\u8ba9$c[z]--$\u3002\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u8fd9\u4e2a\u7269\u54c1\u5728$x$\u7684\u5b50\u6811\u4e2d\u5373\u4ea7\u751f\u53c8\u6d88\u5931\uff0c\u90a3\u4e48\u5bf9$x$\u65e0\u5f71\u54cd\uff1b\u5982\u679c\u53ea\u4ea7\u751f\u4e0d\u6d88\u5931\uff0c\u8bf4\u660e\u6d88\u5931\u7684\u5730\u65b9\u5728$x$\u4e0a\u9762\uff0c\u90a3\u4e48$x$\u4e0a\u5c31\u4f1a\u653e\u4e0b\u8fd9\u4e2a\u7269\u54c1\uff1b\u7531\u4e8e\u89c4\u5b9a\u4e0b\u4ea7\u751f\uff0c\u4e0a\u6d88\u5931\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u51fa\u73b0\u6d88\u5931\u4e86\u4f46\u6ca1\u6709\u4ea7\u751f\u7684\u60c5\u51b5\uff08~~\u4f60\u5728\u65e0\u4e2d\u751f\u6709\u6697\u5ea6\u9648\u4ed3\u3002\u3002\u3002~~\uff09\n\n5. \u7136\u540e\u626b\u5b8c\u5b50\u8282\u70b9\u8fd4\u56de$x$,\u7528\u5f53\u524d\u7684$c[w[x]+d[x]]$\u51cf\u53bb\u626b\u63cf\u524d\u7684$c[w[x]+d[x]]$\uff08\u4e5f\u5c31\u662f\u5b58\u597d\u7684$cnt$\uff09\uff0c\u8bb0\u4e3a$x$\u5904\u7684$w[x]+d[x]$\u7c7b\u7269\u54c1\u7684\u6570\u91cf\n\n\u4e0b\u9762\u662f\u51e0\u4e2a\u6817\u5b50\n![](https://cdn.luogu.com.cn/upload/image_hosting/30wyycra.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ikv3y8h9.png)\n\n\u7136\u540e\u521a\u624d\u8bf4\u8fc7\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e5f\u5dee\u4e0d\u591a\uff0ct[i]\u5230$lca$\u8def\u5f84\u4e0a\u589e\u52a0\u7684\u7269\u54c1\u7c7b\u578b\u4e3a$d[s[i]]-2* d[lca(s[i],t[i])]$, \u6700\u540e\u7edf\u8ba1\u6bcf\u4e2a\u7ed3\u70b9$x$\u5904\u7269\u54c1$w[x]-d[x]$\u7684\u6570\u91cf\n\n\u6700\u540e\u5c31\u53ef\u4ee5\u4e0a\u4ee3\u7801\u4e86\uff08\u4e00\u4e9b\u7ec6\u8282\u4f1a\u5728\u4ee3\u7801\u91cc\u8bb2\uff09\n\n### \u4ee3\u7801\u6765\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define fr(i,a,b) for(int i=a;i<=b;i++)\n#define fo(i,a,b) for(int i=a;i>=b;i--)//\u4e2a\u4eba\u4e60\u60ef\u800c\u5df2\uff0c\u522b\u592a\u5728\u610f\n#pragma GCC optimize(2)\nconst int M=300005;\nint n,m,v[M],p,f[M][20],s[M],t[M],lca[M],w[M],c1[2*M],c2[2*M],ans[M],d[M];\nint head[M],Next[2*M],ver[2*M],tot;\nvector<int> ap1[M],dap1[M],ap2[M],dap2[M];\n//ap\u5373appear\u51fa\u73b0\uff0cdap\u5373disappear\u6d88\u5931\uff0c1\u548c2\u5206\u522b\u662f\u4eces\u5230lca\u548ct\u5230lca\nqueue<int> q;\nvoid add(int x,int y) {\n\tNext[++tot]=head[x],head[x]=tot,ver[tot]=y;\n}\nvoid bfs() {\n\tq.push(1); d[1]=1;\n\twhile(q.size()) {\n\t\tint x=q.front(); q.pop();\n\t\tfor(int i=head[x];i;i=Next[i]) {\n\t\t\tint y=ver[i];\n\t\t\tif(d[y]) continue;\n\t\t\td[y]=d[x]+1;\n\t\t\tf[y][0]=x;\n\t\t\tfr(j,1,p) f[y][j]=f[f[y][j-1]][j-1];\n         \t\t//LCA\u7684\u500d\u589e\u9884\u5904\u7406\uff08\u8fd9\u4e2a\u4e0d\u7528\u6211\u591a\u8bf4\u4e86\u5427\uff09\n\t\t\tq.push(y);\n\t\t}\n\t}\n} \nint LCA(int x,int y) {\n\tif(d[x]>d[y]) swap(x,y);\n\tfo(i,p,0) if(d[f[y][i]]>=d[x]) y=f[y][i];\n\tif(x==y) return x;\n\tfo(i,p,0) if(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\nvoid dfs(int x) {\n\tv[x]=1;\n\tint cnt1=c1[w[x]+d[x]],cnt2=c2[w[x]-d[x]+M];\n   \t//cnt2\u52a0\u8fd9\u4e2aM\u662f\u56e0\u4e3aw[x]-d[x]\u6709\u53ef\u80fd\u662f\u8d1f\u7684\uff0c\u8981\u52a0\u504f\u79fb\u503c\u6216\u79bb\u6563\u5316\n   \t//\u5148\u4fdd\u5b58\u597d\u626b\u63cf\u524d\u7684\u6570\u91cf\n\tfor(int i=0;i<ap1[x].size();i++) c1[ap1[x][i]]++;\n\tfor(int i=0;i<dap1[x].size();i++) c1[dap1[x][i]]--;\n\tfor(int i=0;i<ap2[x].size();i++) c2[ap2[x][i]+M]++;\n   \t//\u5f53\u7136\u540e\u9762\u7684\u4e5f\u8981\u52a0\u504f\u79fb\u503c\n\tfor(int i=0;i<dap2[x].size();i++) c2[dap2[x][i]+M]--;\n   \t//\u5176\u5b9e\u5c31\u662f\u4e2a\u5dee\u5206\u5427\n\tfor(int i=head[x];i;i=Next[i]) {\n\t\tint y=ver[i];\n\t\tif(v[y]) continue;\n\t\tdfs(y);\n\t}\n\tans[x]=c1[w[x]+d[x]]-cnt1+c2[w[x]-d[x]+M]-cnt2;\n   \t//\u76f8\u51cf\u5373\u4e3a\u7b54\u6848\n   \t//\u5bb9\u6613\u53d1\u73b0\u4ece\u4e24\u4e2a\u7aef\u70b9\u5230lca\u662f\u4e92\u4e0d\u5e72\u6270\u7684\n}\nint main(){\n\tstd::ios::sync_with_stdio(false);\n\tscanf(\"%d%d\",&n,&m);\n\tp=(int)log(n)/log(2)+1;\n\tfr(i,1,n-1) {\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y); add(y,x);\n\t}\n\tbfs();\n\tfr(i,1,n) scanf(\"%d\",&w[i]);\n\tfr(i,1,m) {\n\t\tint s,t;\n\t\tscanf(\"%d%d\",&s,&t);\n\t\tint lca=LCA(s,t);\n\t\tap1[s].push_back(d[s]);\n\t\tdap1[f[lca][0]].push_back(d[s]);\n\t\tap2[t].push_back(d[s]-2*d[lca]);\n\t\tdap2[lca].push_back(d[s]-2*d[lca]);\n      \t\t//\u8bb0\u5f55\u7269\u54c1\u51fa\u73b0\u548c\u6d88\u5931\u7684\u7c7b\u578b\n\t}\n\tdfs(1);\n\tfr(i,1,n) printf(\"%d \",ans[i]);\n\treturn 0;\n}\n\n```\n\uff08~~\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6bcf\u884c\u4ee3\u7801\u90fd\u7a7a\u56db\u683c\u4e86QWQ~~\uff09",
        "postTime": 1594910311,
        "uid": 91369,
        "name": "JACK_POT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u9996\u5148\u8981\u8003\u8651\u5165\u624b\u70b9\u3002\u5148\u8003\u8651\u4e00\u4e2a\u4e00\u4e2a\u73a9\u5bb6\u5904\u7406\uff0c\u663e\u7136\u4e0d\u52a0\u4f18\u5316\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\u7684\u3002\u53d1\u73b0\u5bf9\u4e8e\u73a9\u5bb6\u8def\u5f84\u4e0a\u7684\u70b9\u90fd\u6709\u4e00\u4e2a\u89c2\u5bdf\u5458\uff0c\u4e00\u4e2a\u90fd\u4e0d\u80fd\u5ffd\u89c6\uff0c\u770b\u8d77\u6765\u662f\u5f88\u96be\u4f18\u5316\u4e86\u3002\u5728\u505a\u9898\u65f6\uff0c\u53d1\u73b0\u4e00\u4e2a\u601d\u8def\u5f88\u96be\u60f3\uff0c\u5c31\u5e94\u8be5\u8003\u8651\u4e00\u4e0b\u6362\u4e2a\u89d2\u5ea6\u601d\u8003\u3002OI\u4e2d\u5982\u6b64\uff0c\u751f\u6d3b\u4ea6\u662f\u5982\u6b64\u3002\n\n\u3000\u3000\u90a3\u5c31\u5c1d\u8bd5\u4ece\u89c2\u5bdf\u5458\u5165\u624b\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u73a9\u5bb6\uff0c\u4ed6\u4eec\u5728\u6811\u4e0a\u7684\u8def\u5f84\u4e00\u5b9a\u80fd\u5206\u4e3a\u5411\u4e0a\u548c\u5411\u4e0b\u7684\u4e24\u6bb5\uff08\u5206\u7684\u6bb5\u957f\u5ea6\u53ef\u4ee5\u4e3a0\uff09\uff0c\u8bbe\u5f53\u524d\u73a9\u5bb6x\u7684\u8def\u5f84\u7684\u8d77\u70b9\u4e3ast\uff0c\u7ec8\u70b9\u4e3aed\uff0cst\u548ced\u7684LCA\u4e3aca\uff0c\u8def\u5f84\u957f\u5ea6\u4e3adis\uff0c\u5f53\u89c2\u5bdf\u5458u\u5728\u73a9\u5bb6x\u5411\u4e0a\u8d70\u7684\u90a3\u4e00\u6bb5\u65f6\uff0c\u82e5\u73a9\u5bb6\u80fd\u5728Wu\u79d2\u65f6\u6b63\u597d\u88ab\u89c2\u5bdf\u5458\u770b\u5230\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709dep st-W u=dep u\uff1b\u5f53\u89c2\u5bdf\u5458u\u5728\u73a9\u5bb6x\u4ececa\u5411ed\u8d70\uff08\u5373\u5411\u4e0b\u8d70\uff09\u7684\u90a3\u4e00\u6bb5\u65f6\uff0c\u82e5\u73a9\u5bb6\u80fd\u5728Wu\u79d2\u65f6\u6b63\u597d\u88ab\u89c2\u5bdf\u5458\u770b\u5230\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709dep ed-dep u=dis-W u\u3002\u56e0\u4e3a\u6211\u4eec\u8981\u4ece\u89c2\u5bdf\u5458\u5165\u624b\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u4e0a\u9762\u7684\u4e24\u4e2a\u5f0f\u5b50\u4e2d\u4e0eu\u6709\u5173\u7684\u79fb\u9879\u5230\u5de6\u8fb9\uff0c\u65e0\u5173\u7684\u79fb\u9879\u5230\u53f3\u8fb9\uff0c\u5c31\u5f97\u5230\u4e86\u4e24\u4e2a\u5f0f\u5b50\uff1a1\u5f0f\uff1adep u+W u=dep st\uff1b2\u5f0f\uff1adep u+ W u=dis-dep ed\u3002\u5176\u5b9e\u5230\u8fd9\u91cc\u5c31\u6709\u4e00\u4e2a\u663e\u660e\u7684\u601d\u8def\u4e86\uff1a\u6211\u4eec\u679a\u4e3e\u6bcf\u4e2a\u89c2\u5bdf\u5458u\uff0c\u770b\u4e00\u4e0b\u6709\u591a\u5c11\u7ecf\u8fc7u\u7684\u8def\u5f84\u7684dep st \u7b49\u4e8edep u+W u\u3001\u6709\u591a\u5c11\u7ecf\u8fc7u\u7684\u8def\u5f84\u7684dis-dep ed\u7b49\u4e8edep u+ W u\u3002\u8fd9\u4e24\u4e2a\u201c\u591a\u5c11\u201d\u7684\u548c\u53bb\u91cd\u540e\uff08\u6d88\u53bb\u540c\u4e00\u6761\u8def\u5f84\u540c\u65f6\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\u4ece\u800c\u8ba1\u7b972\u6b21\u5e26\u6765\u7684\u5f71\u54cd\uff09\u5c31\u662f\u89c2\u5bdf\u5458u\u80fd\u89c2\u5bdf\u5230\u7684\u73a9\u5bb6\u6570\uff08\u7b54\u6848\uff09\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\u82e5\u8be5\u8def\u5f84\u7684dep st \u7b49\u4e8edep u+W u\uff0c\u90a3\u4e48\u8be5\u8def\u5f84\u7684st\u80af\u5b9a\u4e0d\u80fd\u6bd4u\u8fd8\u6d45\uff0c\u90a3u\u80af\u5b9a\u5728\u8fd9\u4e2a\u8def\u5f84\u5411\u4e0a\u8d70\u7684\u534a\u6bb5\uff1b\u82e5\u8be5\u8def\u5f84\u7684dis-dep ed\u7b49\u4e8edep u+ W u\uff0c\u5373dep ed-dep u=dis-W u\uff0c\u82e5u\u5728\u8be5\u8def\u5f84\u5411\u4e0a\u8d70\u7684\u534a\u6bb5\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u663e\u7136\u4e0d\u4f1a\u6210\u7acb\uff08dis-Wu\u5c31\u662f\u73a9\u5bb6\u8d70\u5230u\u540e\u518d\u8d70\u5230ed\u9700\u8981\u7684\u65f6\u95f4\uff0c\u5f53u\u5728\u8def\u5f84\u7684\u4e0b\u534a\u6bb5\u65f6\uff0cdep ed-dep u\u6b63\u597d\u5c31\u662f\u4eceu\u8d70\u5230ed\u6240\u9700\u7684\u65f6\u95f4\uff0c\u82e5u\u5728\u8def\u5f84\u7684\u4e0a\u534a\u6bb5\uff0cdep ed-dep u\u53ea\u4f1a\u6bd4\u6240\u9700\u65f6\u95f4\u5c0f\uff09\uff0c\u6240\u4ee5u\u53ea\u80fd\u5728\u8be5\u8def\u5f84\u5411\u4e0b\u8d70\u7684\u53e6\u534a\u6bb5\u3002\u3000\u3000\n\n\u3000\u3000\u8003\u8651\u600e\u4e48\u5bfb\u627e\u7b54\u6848\uff0c\u663e\u7136\u5bf9\u6bcf\u4e2au\u90fd\u66b4\u529b\u4e00\u904d\u6240\u6709\u7684\u8def\u5f84\u662f\u4e0d\u884c\u7684\u4e86\u3002\u7ecf\u8fc7\u8fdb\u4e00\u6b65\u7684\u601d\u8003\uff0c\u53d1\u73b0\u82e5\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86u\uff0c\u90a3\u4e48\u5b83\u7684\u8d77\u70b9st\u548c\u7ec8\u70b9ed\u81f3\u5c11\u6709\u4e00\u4e2a\u4f1a\u5728u\u7684\u5b50\u6811\u7acb\uff0c\u82e5st\u5728u\u7684\u5b50\u6811\u91cc\uff0c\u90a3\u4e48u\u5c31\u5728\u8def\u5f84\u5411\u4e0a\u7684\u534a\u6bb5\uff1b\u82e5ed\u5728u\u7684\u5b50\u6811\u91cc\uff0c\u90a3\u4e48u\u5c31\u5728\u8def\u5f84\u5411\u4e0b\u7684\u534a\u6bb5\uff1b\u7279\u6b8a\u5730\uff0c\u82e5st\u548ced\u90fd\u5728u\u7684\u5b50\u6811\u91cc\uff0c\u90a3\u4e48u\u540c\u65f6\u5728\u8def\u5f84\u5411\u4e0a\u548c\u5411\u4e0b\u7684\u534a\u6bb5\uff0c\u5373u\u662f\u8fd9\u6761\u8def\u5f84\u7684lca\uff0c\u6b64\u65f6\u5e94\u6ce8\u610f\u4e0a\u6587\u7684\u53bb\u91cd\u3002\u800c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bf9\u591a\u4e2au\u4ea7\u751f\u7b54\u6848\u7684\u8d21\u732e\uff0c\u4f46\u6bcf\u6b21\u4ea7\u751f\u8d21\u732e\u65f6\u90fd\u6709\u4e00\u4e2a\u5171\u540c\u70b9\uff0c\u5c31\u662f\u8fd9\u6761\u8def\u5f84\u7684depst \u6216 dis - dep ed \u4ea7\u751f\u4e86\u4e00\u6b21\u76f8\u5e94\u7684\u76f8\u7b49\u3002\u7531\u6b64\u53ef\u4ee5\u8003\u8651\u5efa2\u4e2a\u5168\u5c40\u7684\u6876\uff0c\u5206\u522b\u8bb0\u5f55dep st\u7b49\u4e8e\u6876\u4e0b\u6807\u503c\u7684\u8def\u5f84\u6761\u6570\u548c dis - dep ed \u7b49\u4e8e\u4e0b\u6807\u503c\u7684\u8def\u5f84\u6761\u6570\u3002\u4f46\u662f\u5bf9\u4e8edis - dep ed\uff0c\u53d1\u73b0\u5b83\u53ef\u80fd\u5c0f\u4e8e0\uff0c\u4e3a\u4e86\u9632\u6b62\u7b2c\u4e8c\u4e2a\u6876\u7684\u4e0b\u6ea2\u51fa\uff0c\u7b2c\u4e8c\u4e2a\u6876\u7ef4\u62a4\u4fe1\u606f\u7684\u610f\u4e49\u5e94\u6539\u4e3adis - dep ed+N \u7b49\u4e8e\u4e0b\u6807\u503c\u7684\u8def\u5f84\u6761\u6570\uff08N\u662f\u4e00\u4e2a\u8f83\u5927\u7684\u6b63\u6574\u6570\uff0c\u53ea\u8981\u4fdd\u8bc1dis - dep ed+N\u6052\u975e\u8d1f\uff0cN\u53ef\u4ee5\u5728\u7a7a\u95f4\u8db3\u591f\u7684\u60c5\u51b5\u4e0b\u968f\u4fbf\u53d6\uff09\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u89c2\u5bdf\u5458u\uff0c\u76f4\u63a5\u53bb2\u4e2a\u6876\u91cc\u76f8\u5e94\u4e0b\u6807\u5904\u627e\u7b54\u6848\u5c31\u884c\u4e86\u3002\n\n\u3000\u3000\u4f46\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u6876\u91cc\u8bb0\u5f55\u7684\u8def\u5f84\u6761\u6570\u6240\u5305\u542b\u7684\u8def\u5f84\u4e2d\uff0c\u6709\u53ef\u80fd\u6709\u8def\u5f84\u662f\u4e0d\u7ecf\u8fc7u\u7684\u3002\u8fd9\u597d\u529e\uff0c\u53ef\u4ee5\u4ece\u6839dfs\uff0c\u5f53dfs\u5230\u67d0\u4e2a\u8def\u5f84\u7684\u8d77\u70b9\u65f6\u5165\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u6876\u3001\u7ec8\u70b9\u65f6\u5165\u4e00\u4e0b\u7b2c\u4e8c\u4e2a\u6876\uff0c\u7b49\u5230\u56de\u6eaf\u5230\u8fd9\u6761\u8def\u5f84\u7684\u6700\u9ad8\u70b9\uff08\u5373\u8fd9\u6761\u8def\u5f84\u7684ca\uff09\u65f6\u8ba9\u5148\u524d\u5165\u7684\u6876\u7684\u76f8\u5e94\u4f4d\u7f6e\u5904\u5206\u522b--\uff08\u51fa\u6876\uff09\u5c31\u597d\u4e86\u3002\n\n\u3000\u3000\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u5982\u679c\u53ea\u901a\u8fc7\u4e0a\u9762\u7684\u64cd\u4f5c\u7684\u8bdd\uff0c\u8fd8\u662f\u53ef\u80fd\u4f1a\u78b0\u5230\u6876\u91cc\u8fd8\u8bb0\u5f55\u7740\u8fd9\u6761\u8def\u5f84\uff0c\u4f46\u8fd9\u6761\u8def\u5f84\u4ecd\u6ca1\u7ecf\u8fc7u\uff0c\u8fd9\u65f6\u53ea\u6709\u4e00\u79cd\u53ef\u80fd\uff0c\u5c31\u662f\u8fd9\u6761\u8def\u5f84\u7684\u8d77\u70b9\u6216\u7ec8\u70b9\u5728u\u7684\u5144\u5f1f\u7684\u5b50\u6811\u4e2d\uff0c\u4f46ca\u5728u\u7684\u4e0a\u9762\u3002u\u7684\u7b54\u6848\u5e94\u8be5\u662f\u904d\u5386\u5b8c\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u540e\u6876\u5185\u7684\u76f8\u5e94\u4e0b\u6807\u5904\u7684\u589e\u91cf\uff0c\u5373\u904d\u5386\u5b8c\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u540e\uff0c2\u4e2a\u6876\u4f1a\u6709\u4e00\u4e9b\u4e0b\u6807\u5904\u7684\u503c\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u8fd9\u4e9b\u53d8\u5316\u6b63\u662f\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u5bf9\u6876\u7684\u5f71\u54cd\uff0c\u800c\u53ea\u6709\u8fd9\u4e9b\u5f71\u54cd\u91cf\u624d\u53ef\u80fd\u662fu\u7684\u7b54\u6848\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5f71\u54cd\u91cf\u5176\u5b9e\u5c31\u662f\u5728u\u7684\u5b50\u6811\u4e2d\u7684\u8def\u5f84\u8d77\u70b9\u6216\u7ec8\u70b9\u5165\u6876\u3001ca\u5728u\u7684\u5b50\u6811\u4e2d\u7684\u8def\u5f84\u51fa\u6876\u9020\u6210\u7684\u7ed3\u679c\uff0c\u522b\u5fd8\u4e86\u53ea\u6709\u8def\u5f84\u8d77\u70b9\u6216\u7ec8\u70b9\u5728u\u7684\u5b50\u6811\u4e2d\uff0c\u4e14ca\u4e3au\u6216\u662fu\u7684\u7956\u5148\u7684\u8def\u5f84\u624d\u80fd\u5bf9u\u4ea7\u751f\u8d21\u732e\u3002\u800c\u8fd9\u4e9b\u5f71\u54cd\u91cf\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bb0\u5f55\u6876\u7684\u589e\u91cf\u6765\u8bb0\u5f55\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n\n#define swap(x,y) (x^=y,y^=x,x^=y)\n\nusing namespace std;\n\nconst int N=300005,M=300005;\n\nint n,m,w[N],son[N],top[N],siz[N],f[N],lst[N];\nint nxt[N<<1],to[N<<1],cnt,dep[N],dis[M],ans[N];\nint t1[N],t2[N<<1],st[N];\n\nchar ch;\n\nvector<int> lcau[N],lenv[N];\n\nstruct node{\n\tint num,ord;\n};\n\nvector<node> lcav[N];\n\ninline int read()\n{\n\tint x=0;\n\tch=getchar();\n\twhile(!isdigit(ch)) ch=getchar();\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x;\n}\n\ninline void addedge(int u,int v)\n{\n\tnxt[++cnt]=lst[u];\n\tlst[u]=cnt;\n\tto[cnt]=v;\n}\n\nvoid dfs1(int u,int fa)//\u5904\u7406f,dep,son,siz    \u6811\u5256\u9884\u5904\u7406\u7b2c\u4e00\u904ddfs \n{\n\tsiz[u]=1;\n\tdep[u]=dep[fa]+1;\n\tint t;\n\tfor(int e=lst[u];e;e=nxt[e])\n\t\tif((t=to[e])!=fa)\n\t\t{\n\t\t\tf[t]=u;\n\t\t\tdfs1(t,u);\n\t\t\tif(siz[t]>siz[son[u]])\n\t\t\t\tson[u]=t;\n\t\t\tsiz[u]+=siz[t];\n\t\t}\n}\n\nvoid dfs2(int u,int bos)//\u5904\u7406top    \u6811\u5256\u9884\u5904\u7406\u7b2c\u4e8c\u904ddfs \n{\n\ttop[u]=bos;\n\tif(son[u])\n\t{\n\t\tdfs2(son[u],bos);\n\t\tint t;\n\t\tfor(int e=lst[u];e;e=nxt[e])\n\t\t{\n\t\t\tif((t=to[e])!=son[u]&&t!=f[u])\n\t\t\t\tdfs2(t,t);\n\t\t}\n\t}\n}\n\ninline int lca(int x,int y)//\u6811\u5256\u6c42LCA\u8fc7\u7a0b \n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]>dep[top[y]])\n\t\t\tx=f[top[x]];\n\t\telse\n\t\t\ty=f[top[y]];\n\t}\n\treturn dep[x]>dep[y]?y:x;\n}\n\nvoid dfs(int u)//\u627e\u7b54\u6848\u7684dfs \n{\n\tint aft=t1[dep[u]+w[u]]+t2[w[u]-dep[u]+N];//\u8bb0\u5f55\u539f\u6765\u6876\u7684\u91cf \n\tfor(int e=lst[u];e;e=nxt[e])\n\t{\n\t\tif(to[e]!=f[u])\n\t\t\tdfs(to[e]);\n\t}\n\tif(st[u])//\u5165\u7b2c\u4e00\u4e2a\u6876 \n\t{\n\t\tt1[dep[u]]+=st[u];\n\t}\n\tif(lenv[u].size())//\u5165\u7b2c\u4e8c\u4e2a\u6876 \n\t{\n\t\tint l=lenv[u].size(),t;\n\t\tfor(int i=0;i<l;++i)\n\t\t{\n\t\t\tt=lenv[u][i];\n\t\t\tt2[t-dep[u]+N]++;\n\t\t}\n\t}\n\tans[u]=t1[dep[u]+w[u]]+t2[w[u]-dep[u]+N]-aft;//\u7528\u5f53\u524d\u6876\u7684\u91cf\u51cf\u539f\u6765\u6876\u7684\u91cf\u5f97\u5230\u589e\u91cf\uff0c\u5f97\u5f53\u524d\u70b9u\u7684\u7b54\u6848 \n\tif(lcau[u].size())//\u56de\u6eaf\u5230u\u7684\u7236\u4eb2\u540e\u4ee5u\u4e3aca\u7684\u8def\u5f84\u5c31\u6ca1\u7528\u4e86\uff0c\u8981\u51fa\u6876 \n\t{\n\t\tint l=lcau[u].size(),x,y;\n\t\tfor(int i=0;i<l;++i)\n\t\t{\n\t\t\tx=lcau[u][i];\n\t\t\ty=lcav[u][i].num;\n\t\t\tif(dep[u]+w[u]==dep[x]&&w[u]-dep[u]==dis[lcav[u][i].ord]-dep[y])//\u53bb\u91cd \n\t\t\t\tans[u]--;\n\t\t\tt1[dep[x]]--;\n\t\t\tt2[dis[lcav[u][i].ord]-dep[y]+N]--;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tint u,v;\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tu=read(),v=read();\n\t\taddedge(u,v);\n\t\taddedge(v,u);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tw[i]=read();\n\tdfs1(1,0);dfs2(1,1);\n\tint ff,l;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tu=read(),v=read();\n\t\tff=lca(u,v);//\u6811\u94fe\u5256\u5206\u6c42LCA \n\t\tst[u]++;//\u8bb0\u5f55\u4ee5u\u4e3a\u8def\u5f84\u8d77\u70b9\u7684\u8def\u5f84\u6761\u6570 \n\t\tdis[i]=l=dep[u]+dep[v]-(dep[ff]<<1);\n\t\tlcau[ff].push_back(u);//\u8bb0\u5f55\u4ee5ff\u4e3aca\u7684\u8def\u5f84\u7684\u8d77\u70b9 \n\t\tlcav[ff].push_back((node){v,i});//\u8bb0\u5f55\u4ee5ff\u4e3aca\u7684\u8def\u5f84\u7684\u7ec8\u70b9\u548c\u7f16\u53f7 \n\t\tlenv[v].push_back(l);//\u8bb0\u5f55\u4ee5v\u4e3a\u8def\u5f84\u7684\u7ec8\u70b9\u7684\u8def\u5f84\u957f\u5ea6 \n\t}\n\tdfs(1);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tprintf(\"%d \",ans[i]);\n\t}\n\treturn 0;\n}\n```\n\u603b\u7ed3\uff1a\n\n\u3000\u3000\u5bf9\u4e8e\u4ea7\u751f\u5168\u5c40\u7b54\u6848\u8d21\u732e\u7684\u5904\u7406\u65b9\u5f0f\uff1a\u5efa\u5168\u5c40\u6876\u3002\n\n\u3000\u3000\u82e5\u60f3\u4ece\u4e00\u4e2a\u5b58\u50a8\u7ed3\u6784\u4e2d\u5f97\u5230\u7b54\u6848\uff0c\u5e94\u65f6\u523b\u7ef4\u62a4\u7ed3\u6784\u4ee5\u4fdd\u8bc1\u5176\u5b58\u50a8\u7684\u6570\u636e\u7684\u6b63\u786e\u6027\u3002\n\n\u3000\u3000\u4e0d\u5199\u51fa\u5f0f\u5b50/\u753b\u51fa\u56fe\u6765\uff0c\u96be\u4ee5\u66f4\u6df1\u5165\u5730\u4f18\u5316\u6216\u601d\u8003\u3002\n\n\u3000\u3000\n\n\u611f\u89c9\u8fd9\u9053\u9898\u8ddf\u5dee\u5206\u7684\u5173\u7cfb\u4e0d\u5927\u3002\u53ea\u4e0d\u8fc7\u4fee\u6539\u7684\u590d\u6742\u5ea6\u4e0e\u5dee\u5206\u7684\u533a\u95f4\u4fee\u6539\u90fd\u662fO(1)\uff0c\u5927\u90e8\u5206\u9898\u76ee\u7684\u4fee\u6539\u590d\u6742\u5ea6\u5f88\u96be\u6709O(1)\uff0c\u6545\u4f1a\u89c9\u5f97\u8fd9\u9053\u9898\u4e0e\u5dee\u5206\u6709\u70b9\u50cf\u5427\u3002\n\n\uff08\u5199\u4e86\u8fd9\u4e48\u591a\uff0c\u5e94\u8be5\u80fd\u61c2\u5427\u3002\u540c\u6b65\u53d1\u8868\u4e8e[\u535a\u5ba2\u56ed](https://www.cnblogs.com/InductiveSorting-QYF/p/11791310.html)\uff09\n\n\uff08\u61c2\u4e86\u7684\u8bdd\u8bf7\u7559\u4e2a\u8d5e\uff0c\u8ba9\u66f4\u591a\u4eba\u770b\u5230\uff1b\u4e0d\u61c2\u7684\u8bdd\uff1f\u95ee\u5c31\u597d\u4e86~\uff09",
        "postTime": 1572945393,
        "uid": 45543,
        "name": "YHASDY",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u4f20\u9001\u95e8](https://www.cnblogs.com/topsecret/p/noip2016-running.html)\n\n## \u89e3\u7b54\n\n\u8bbe\u7b2c$j$\u53f7\u73a9\u5bb6\u5728$V_j$\u65f6\u523b\u51fa\u53d1\u3002\n\n\u5f31\u5316\u95ee\u9898\uff1a\u5982\u679c\u6811\u9000\u5316\u6210\u4e86\u4e00\u6761\u94fe\u3002\u5219\u5728$j$\u5904\u7684\u89c2\u5bdf\u5458\u80fd\u89c2\u5bdf\u5230\u7684$i$\u53f7\u73a9\u5bb6\u5f53\u4e14\u4ec5\u5f53\n$$\ni\u73a9\u5bb6\u7ecf\u8fc7j\uff0c\u4e14\n\\begin{cases}\ndep_j - W_j = dep_{S_i} - V_j, &i\u5411\u4e0b\u8dd1\u6b65 \\\\\ndep_j + W_j = dep_{S_i} + V_j, &i\u5411\u4e0a\u8dd1\u6b65\n\\end{cases}\n$$\n\u4e00\u4e2a\u70b9\u5728\u6811\u4e0a\u7684\u8d21\u732e\u662f\u8fde\u7eed\u7684\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u8def\u5f84\u5728LCA\u5904\uff08\u500d\u589e\u627eLCA\uff09\u62c6\u6210\u4e24\u6761\u94fe\u7528\u79bb\u7ebf+\u6811\u4e0a\u5dee\u5206\u7edf\u8ba1\u4eba\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u7684\u65f6\u523b\u3002\n\n### \u6811\u4e0a\u5dee\u5206\n\n\u5982\u4f55\u53ea\u8ba9\u4e00\u6bb5\u6811\u4e0a\u7684\u94fe\u88ab\u66f4\u65b0\u5462\uff1f\uff08\u7c7b\u6bd4\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0c\u8003\u8651\u4e0b\u7aef\u4e3a\u201c\u95ed\u201d\u8282\u70b9\uff0c\u4e0a\u7aef\u4e3a\u201c\u5f00\u201d\u8282\u70b9\u7684\u94fe\uff09\n\n\u8003\u8651\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u53ea\u6709\u94fe\u7684\u4e00\u7aef\u5728\u5b83\u7684\u5b50\u6811\u5185\u90e8\u65f6\u624d\u88ab\u94fe\u8986\u76d6\u3002\n\u6240\u4ee5\u5728dfs\u5b50\u6811\u4e4b\u524d\u8bb0\u4e0b\u7b54\u6848\uff0c\u5728dfs\u4e4b\u540e\u66f4\u65b0\u94fe\u7aef\u70b9\uff0c\u5b9e\u9645\u7684\u7b54\u6848\u5c31\u662f\u7b54\u6848\u7684\u5dee\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int mx = 3e5+10, LOG = 20, inf = 1e9;\n\nint n, m, ans[mx], s[mx], t[mx], w[mx];\nint head[mx], nxt[mx<<1], to[mx<<1], tot;\nint dep[mx] = {-1}, fa[mx][LOG];\nint down[mx<<2], up[mx<<1];\nvector<pair<int, int> > v[mx];\n\nvoid add(int u, int v) {\n\t++tot;\n\tnxt[tot] = head[u];\n\tto[tot] = v;\n\thead[u] = tot;\n}\n\nvoid dfs0(int u) {\n\tfor (int i = 1; i < LOG; ++i) {\n\t\tfa[u][i] = fa[fa[u][i-1]][i-1];\n\t}\n\tfor (int e = head[u], v; e; e = nxt[e]) {\n\t\tif ((v=to[e]) == fa[u][0]) continue;\n\t\tfa[v][0] = u;\n\t\tdep[v] = dep[u]+1;\n\t\tdfs0(v);\n\t}\n}\n\nint lca(int u, int v) {\n\tif (dep[u] < dep[v]) swap(u, v);\n\tfor (int i = LOG-1; ~i; --i)\n\t\tif (dep[fa[u][i]] >= dep[v])\n\t\t\tu = fa[u][i];\n\tif (u == v) return u;\n\tfor (int i = LOG-1; ~i; --i)\n\t\tif (fa[u][i] != fa[v][i])\n\t\t\tu = fa[u][i], v = fa[v][i];\n\treturn fa[u][0];\n}\n\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n\nvoid addr(int s, int t, int w=0) {\n\tassert(dep[s] != dep[t]);\n\tif (dep[s] < dep[t]) w += inf, swap(s, t);\n\tv[s].pb(mp(w, 1));\n\tv[t].pb(mp(w, -1));\n}\n\nvoid dfs(int u) {\n\tans[u] -= up[dep[u]+w[u]] + down[(mx<<1) + dep[u]-w[u]];\n\tfor (int e = head[u]; e; e = nxt[e]) {\n\t\tif (to[e] == fa[u][0]) continue;\n\t\tdfs(to[e]);\n\t}\n\tfor (int i = 0; i < (int)v[u].size(); ++i) {\n\t\tif (v[u][i].fi > inf/2) down[(mx<<1) + v[u][i].fi-inf] += v[u][i].se;\n\t\telse up[v[u][i].fi] += v[u][i].se;\n\t}\n\tans[u] += up[dep[u]+w[u]] + down[(mx<<1) + dep[u]-w[u]];\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tint u, v;\n\tfor (int i = 0; i < n-1; ++i) {\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tadd(u, v), add(v, u);\n\t}\n\tdfs0(1);\n\tfor (int i = 1; i <= n; ++i) scanf(\"%d\", w+i);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d%d\", s+i, t+i);\n\t\tu = lca(s[i], t[i]);\n\t\tif (u == s[i]) addr(fa[s[i]][0], t[i], dep[s[i]]);\n\t\telse if (u == t[i]) addr(s[i], fa[t[i]][0], dep[s[i]]);\n\t\telse {\n\t\t\taddr(s[i], fa[u][0], dep[s[i]]);\n\t\t\taddr(u, t[i], dep[u] - (dep[s[i]]-dep[u]));\n\t\t}\n\t}\n\tdfs(1);\n\tfor (int i = 1; i <= n; ++i) printf(\"%d%c\", ans[i], \" \\n\"[i==n]);\n}\n```",
        "postTime": 1572938685,
        "uid": 73915,
        "name": "frank3215",
        "ccfLevel": 9,
        "title": "[NOIP2016]\u5929\u5929\u7231\u8dd1\u6b65"
    },
    {
        "content": "\u5c06\u6bcf\u4e2a\u73a9\u5bb6\u8def\u7ebf\u62c6\u6210\u4e24\u6bb5,$s->lca(s,t)$,$lca(s,t)->t$\n\n\u6709\u5982\u4e0b\u5f0f\u5b50\n\n$ dep[s]-dep[x]=t[x](s->lca(s,t))$\n\n$ dep[s]+dep[x]-2*dep[lca(s,t)]=t[x](lca(s,t)->t)$\n\n1.$s->t$\n\n\u79fb\u9879\uff1a\n\n$ dep[s]=t[x]+dep[x]$\n\n\u8f6c\u6362\u4e3a\u4ee5\u4e0b\u6a21\u578b\uff1a\u5bf9\u4e8e\u7b2ci\u4e2a\u73a9\u5bb6\uff0c`s`\u5230`lca(si,ti)`\n\u8def\u5f84\u4e0a\u6bcf\u4e2a\u70b9\u589e\u52a0\u4e00\u4e2a\u7c7b\u578b\u4e3a`d[s]`\u7684\u7269\u54c1\uff08\u4e5f\u53ef\u4ee5\u4e3a\u88ab`d[s]`\u8986\u76d6\u4e86\u4e00\u6b21\uff09\uff0c\u6700\u7ec8\u8f6c\u6362\u6210\u6c42\n$t[x]+d[x]$\u7684\u7269\u54c1\u6709\u591a\u5c11\u4e2a\n\n\u5c31\u53ef\u4ee5\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff\u8ba1\u6570\u6570\u7ec4\uff0c\u5373\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u8868\u88ab`d[s]`\u8986\u76d6\u7684\u6b21\u6570\uff0c\u7136\u540e\u7528\u6811\u4e0a\u5dee\u5206\u5373\u53ef\uff0c\u6700\u540edfs\u7edf\u8ba1\u5b50\u6811\u5373\u53ef\n\n\u6ce8\u610f\u6c42$t[x]+d[x]$\u7684\u7269\u54c1\u6709\u591a\u5c11\u4e2a\u5c31\u53ef\u4ee5\u8f6c\u6362\u4e3a\u67e5\u8be2$t[x]+d[x]$\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u533a\u95f4\u548c\u5c31\u884c\u4e86\n\n2.$lca(s,t)->t$\n\n\u79fb\u9879\uff1a\n\n$ dep[s]-2*dep[lca(s,t)]=t[x]-dep[x]$\n\n\u6e05\u7a7a\u7ebf\u6bb5\u6811\uff0c\u50cf\u4e0a\u9762\u4e00\u6837\u505a\u4e00\u904d\u7ebf\u6bb5\u6811\uff0c\u518d\u67e5\u4e00\u904d$t[x]-dep[x]$~~\u7684\u6c34\u8868~~\u5c31\u884c\u4e86\n\n## \u5751\u70b9\n\n\u7a7a\u95f4\u5f0040-45\u500d\u5427,\u4e0d\u7136\u5f00\u5c0f\u4e86\u4f1a[MLE](https://www.luogu.org/record/list?pid=P1600&user=57823)\n\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define re register int\n#define MAXN 300005\n#define maxn 4000100\nusing namespace std;\ninline int read(){\n    int out=0,flag=1;char c=getchar();\n    while(c<48||c>57) {if(c=='-') flag=-1;c=getchar();}\n    while(c>=48&&c<=57){out=out*10+c-48;c=getchar();}\n    return out*flag;\n}\nstruct tu{\n\tint u,v,nxt;\n}e[MAXN*2];\nint lc[maxn],rc[maxn],sum[maxn];\nint f[MAXN][19],head[MAXN],dep[MAXN],x[MAXN],y[MAXN],z[MAXN];\nint t[MAXN],ff[MAXN];\nint mmax;\nint ans[MAXN];\nint n,m,rt[maxn],cnt,tot;\nvoid add(int u,int v){\n\te[++cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nvoid dfs(int u,int fa){\n\tdep[u]=dep[fa]+1;\n\tf[u][0]=fa;\n\tfor(re i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v==fa)continue;\n\t\tdfs(v,u);\t\n\t}\n}\n\n\nint insert(int now,int l,int r,int pos,int val){\n\tif(!now)now=++tot;\n\n\tif(l==r){\tsum[now]+=val;return now;}\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)lc[now]=insert(lc[now],l,mid,pos,val);\n\telse rc[now]=insert(rc[now],mid+1,r,pos,val);\n\treturn now;\n}\nint merge(int p,int q,int l,int r){\n\tif(!p)return q;\n\tif(!q)return p;\n\tif(l==r){\n\t\tsum[p]+=sum[q];\n\t}\n\tint mid=(l+r)>>1;\n\tlc[p]=merge(lc[p],lc[q],l,mid);\n\trc[p]=merge(rc[p],rc[q],mid+1,r);\n\treturn p;\n}\nint query(int now,int l,int r,int p){\n\tif(!now)return 0;\n\tif(l==r)return sum[now];\n\tint mid=(l+r)>>1;\n\tif(p<=mid)return query(lc[now],l,mid,p);\n\telse return query(rc[now],mid+1,r,p);\n}\n\n\nint lca(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y);\n\tfor(re i=18;i>=0;i--)\n\t\tif(dep[f[x][i]]>=dep[y])x=f[x][i];\n\tif(x==y)return x;\n\tfor(re i=18;i>=0;i--)\n\t\tif(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\nvoid dfs1(int u){\n\tfor(re i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==f[u][0])continue;\n\t\tdfs1(v);\n\t\trt[u]=merge(rt[u],rt[v],1,n<<1);\n\t}\n\t if(n+dep[u]+t[u]<=2*n)ans[u]+=query(rt[u],1,n<<1,n+t[u]+dep[u]);\n}\nvoid dfs2(int u){\n\tfor(re i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==f[u][0])continue;\n\t\tdfs2(v);\n\t\trt[u]=merge(rt[u],rt[v],1,n<<1);\n\t}\n\tans[u]+=query(rt[u],1,n<<1,n-t[u]+dep[u]);\n}\nint main(){\n\tn=read();\n\tm=read();\n\tfor(re i=1;i<=n-1;i++)\n\t{\n\t\tint a1,a2;\n\t\ta1=read();\n\t\ta2=read();\n\t\tadd(a1,a2);\n\t\tadd(a2,a1);\n\t}\n\tfor(re i=1;i<=n;i++)\n\t\tt[i]=read();\n\tfor(re i=1;i<=m;i++)\n\t\tx[i]=read(),y[i]=read();\n\tdfs(1,0);\n\tfor(re j=1;j<=18;j++)\n\t\tfor(re i=1;i<=n;i++)\n{\n\t\tf[i][j]=f[f[i][j-1]][j-1];\n}\n\tfor(re i=1;i<=m;i++){\n\t\t ff[i]=lca(x[i],y[i]);\n\t\trt[x[i]]=insert(rt[x[i]],1,n<<1,n+dep[x[i]],1);\n\t\trt[f[ff[i]][0]]=insert(rt[f[ff[i]][0]],1,n<<1,n+dep[x[i]],-1);\n\t}\n\tdfs1(1);\n\tmemset(rt,0,sizeof(rt));\n\tmemset(sum,0,sizeof(sum));\n\tmemset(lc,0,sizeof(lc));\n\tmemset(rc,0,sizeof(rc));\n\ttot=0;\n\tfor(re i=1;i<=m;i++){\n\t\trt[y[i]]=insert(rt[y[i]],1,n<<1,n-dep[x[i]]+2*dep[ff[i]],1);\n\t\trt[ff[i]]=insert(rt[ff[i]],1,n<<1,n-dep[x[i]]+2*dep[ff[i]],-1);\n\t}\n\tdfs2(1);\n\tfor(re i=1;i<=n;i++){\n\t\tprintf(\"%d \",ans[i]);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1566191056,
        "uid": 57823,
        "name": "\u7ea2\u8272OI\u518d\u4e34",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u628a\u8def\u5f84\u62c6\u5f00\uff0c\u62c6\u6210s->lca\u548clca->t\u7684\u4e24\u6761\n\n\u5bf9\u4e8e\u7b2c\u4e00\u6761,\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u7684\u7b54\u6848\u5c31\u662f\u6ee1\u8db3dep[s]==W[i]+dep[i]\u7684\u8def\u5f84\u6761\u6570\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u6761,\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u7684\u7b54\u6848\u5c31\u662f\u6ee1\u8db3dep[s]-2*dep[lca]==W[i]-dep[i]\u7684\u8def\u5f84\u6761\u6570\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u6761\u7684\u5904\u7406\u65b9\u5f0f\u5c31\u662f\uff0c\u628adep[s]-2*dep[lca]\u8bb0\u5728t\u8282\u70b9\u4e0a\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f\u5728lca\u5904\u7b54\u6848\u4f1a\u88ab\u7b97\u4e24\u6b21\uff0c\u6240\u4ee5\u8981\u51cf\u53bb\u3002\n\n\u7528\u7ebf\u6bb5\u6811+\u6811\u94fe\u5256\u5206\u8fdb\u884c\u7ef4\u62a4\uff0c\u4f60\u53ef\u4ee5\u5f97\u523095\u5206\uff0c\u518d\u52a0\u4e0a\u6807\u8bb0\u6c38\u4e45\u5316\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\u4e24\u4e2alog\u8dd1\u7684\u4e0d\u6162\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define ls a[k].son[0]\n#define rs a[k].son[1] \nusing namespace std;\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\twhile (c<'0'||c>'9') c=getchar();\n\twhile (c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n\treturn x*f;\n}\nvoid write(int x){\n\tif (x>=10) write(x/10);\n\tputchar(x%10+'0');\n}\ninline void writeln(int x){\n\twrite(x); puts(\"\");\n}\nconst int N=3e5+5;\nstruct edge{\n\tint link,next;\n}e[N<<1];\nstruct node{\n\tint son[2],plu;\n}a[N*60];\nint ans,fa[N],n,m,head[N],tot,W[N],size[N],Son[N],top[N],dfn[N],cnt,pos[N],dep[N],root[N*4];\ninline void add_edge(int u,int v){\n\te[++tot]=(edge){v,head[u]}; head[u]=tot;\n}\ninline void insert(int u,int v){\n\tadd_edge(u,v); add_edge(v,u);\n}\ninline void init(){\n\tn=read(); m=read();\n\tfor (int i=1;i<n;i++){\n\t\tinsert(read(),read());\n\t}\n\tfor (int i=1;i<=n;i++){\n\t\tW[i]=read();\n\t}\n}\nvoid dfs1(int u){\n\tsize[u]=1; dep[u]=dep[fa[u]]+1;\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (v!=fa[u]){\n\t\t\tfa[v]=u; dfs1(v);\n\t\t\tsize[u]+=size[v];\n\t\t\tif (!Son[u]||size[Son[u]]<size[v]){\n\t\t\t\tSon[u]=v;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs2(int u,int Top){\n\ttop[u]=Top; dfn[u]=++cnt; pos[cnt]=u;\n\tif (Son[u]) dfs2(Son[u],Top);\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (v!=fa[u]&&v!=Son[u]){\n\t\t\tdfs2(v,v);\n\t\t}\n\t}\n}\ninline int LCA(int u,int v){\n\twhile (top[u]!=top[v]){\n\t\tif (dep[top[u]]<dep[top[v]]) {\n\t\t\tswap(u,v);\n\t\t}\n\t\tu=fa[top[u]];\n\t}\n\tif (dep[u]>dep[v]) swap(u,v);\n\treturn u;\n}\nvoid update(int &k,int l,int r,int x,int y,int v){\n\tif (!k) k=++tot;\n\tif (l==x&&r==y){\n\t\ta[k].plu+=v; return; \n\t}\n\tint mid=(l+r)>>1;\n\tif (mid>=y) update(ls,l,mid,x,y,v);\n\t\telse if (mid<x) update(rs,mid+1,r,x,y,v);\n\t\t\telse update(ls,l,mid,x,mid,v),update(rs,mid+1,r,mid+1,y,v);\n}\nvoid query(int k,int l,int r,int x){\n\tif (!k) return;\n\tans+=a[k].plu;\n\tif (l==r) return;\n\tint mid=(l+r)>>1;\n\tif (mid>=x) query(ls,l,mid,x);\n\t\telse query(rs,mid+1,r,x);\n}\ninline void Update(int u,int v,int w){\n\twhile (top[u]!=top[v]){\n\t\tif (dep[top[u]]<dep[top[v]]){\n\t\t\tswap(u,v);\n\t\t}\n\t\tupdate(root[w],1,n,dfn[top[u]],dfn[u],1);\n\t\tu=fa[top[u]];\n\t}\n\tif (dep[u]>dep[v]) swap(u,v);\n\tupdate(root[w],1,n,dfn[u],dfn[v],1);\n}\ninline void solve(){\n\tdfs1(1); dfs2(1,1); tot=0; int p=600000;\n\tfor (int i=1;i<=m;i++){\n\t\tint s=read(),t=read(),lca=LCA(s,t);\n\t\tUpdate(s,lca,dep[s]);\n\t\tUpdate(t,lca,2*dep[lca]-dep[s]+p);\n\t\tupdate(root[dep[s]],1,n,dfn[lca],dfn[lca],-1);\n\t}\n\tfor (int i=1;i<=n;i++){\n\t\tans=0;\n\t\tquery(root[W[i]+dep[i]],1,n,dfn[i]); query(root[dep[i]-W[i]+p],1,n,dfn[i]);\n\t\twrite(ans); putchar(' ');\n\t}\n\tputs(\"\");\n}\nint main(){\n\tinit(); solve();\n\treturn 0;\n} \n```",
        "postTime": 1541314643,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e0b\u4f3c\u4e4e\u6ca1\u6709\u8bb2\u5982\u4f55\u62ff\u6ee1\u7279\u6b8a\u6d4b\u8bd5\u70b9\u90e8\u5206\u5206\u7684\u9898\u89e3\uff0c\u7136\u800c\u8fd9\u9898\u7684\u90e8\u5206\u5206\u8bbe\u8ba1\u975e\u5e38\u6709\u610f\u601d\uff0c\u7ed9\u7684\u4e5f\u5f88\u8db3\uff0880\u5206\uff09  \n\n\u8fd9\u91cc\u8be6\u7ec6\u8bf4\u4e00\u4e0b80\u7684\u90e8\u5206\u5206\u5206\u522b\u662f\u600e\u4e48\u505a\u7684  \n\n\u9996\u5148\uff0c\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6811\u7684\u6839\u662f1  \n\u4e0b\u9762\u662f\u5c06\u8981\u7528\u5230\u7684\u4e00\u4e9b\u53d8\u91cf\u58f0\u660e  \n```cpp\nint nt[N], p[N], b[N], num/*\u524d\u5411\u661f\u5b58\u50a8\uff0c\u5206\u522b\u662f\u4e0b\u4e00\u6761\u8fb9\u3001\u7b2c\u4e00\u6761\u8fb9\u3001\u8fb9\u7684\u672b\u7aef\u3001\u8fb9\u6570*/, w[N], ans[N], ssize[N]/*\u5b50\u6811\u5927\u5c0f*/, son[N]/*\u91cd\u94fe*/, fa[N][21]/*\u500d\u589e\u7956\u5148*/, deep[N], belong[N], now[N], lca[N], maxdep;\nint nt2[N], p2[N], b2[N], num2, sum[N], flag[N], pos[N]/*\u641c\u7d22\u5e8f*/, id;\nstruct Node {\n\tint a, b, out, same;\n}play[N]/*\u73a9\u5bb6*/;\nvector<int>point[N]/*\u540c\u4e00\u6df1\u5ea6\u7684\u6240\u6709\u8282\u70b9*/;\n```\n\n1)\u6d4b\u8bd5\u70b91~2 10\u5206  \n\u201c\u6240\u6709\u4eba\u7684\u7ec8\u70b9\u7b49\u4e8e\u8d77\u70b9\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b\u4eba\u5728\u4e00\u79d2\u540e\u5c31\u4f1a\u9000\u51fa\u6e38\u620f\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u770b\u4e00\u4e0b\u6bcf\u4e2a\u4eba\u8d77\u70b9\u4f4d\u7f6ei\u7684\u89c2\u5bdf\u5458\u7c97\u7ebf\u7684\u65f6\u95f4w[i]\uff0c\u5982\u679cw[i]\u4e3a0\u90a3\u4e48\u8fd9\u4e2a\u4eba\u5bf9\u4f4d\u7f6ei\u7684\u7b54\u6848\u662f\u6709\u8d21\u732e\u7684\uff0c\u7edf\u8ba1\u4e00\u4e0b\u8f93\u51fa\u5c31\u884c\u4e86\n```cpp\nif (n % 10 == 1)\n{\n\tfor (register int i = 1; i <= m; ++i)\n\tif (!w[play[i].a])++ans[play[i].a];\n\tfor (register int i = 1; i <= n; ++i)printf(\"%d \", ans[i]);\n}\n```\n\n2)\u6d4b\u8bd5\u70b93~4 10\u5206  \n\u6761\u4ef6\u662fw[j]=0,\u6bcf\u4e2a\u89c2\u5bdf\u5458\u4e00\u5f00\u59cb\u5c31\u51fa\u6765\u4e86\uff0c\u6240\u4ee5\u53ea\u6709\u6bcf\u4e2a\u73a9\u5bb6\u7684\u8d77\u70b9\u4f4d\u7f6e\u6709\u8d21\u732e\uff0c\u7edf\u8ba1\u8f93\u51fa\u5373\u53ef\n```cpp\nelse if (n % 10 == 2)\n{\n\tfor (register int i = 1; i <= m; ++i)++ans[play[i].a];\n\tfor (register int i = 1; i <= n; ++i)printf(\"%d \", ans[i]);\n}\n```  \n\n3)\u6d4b\u8bd5\u70b95 5\u5206\n\u66b4\u529b\u6a21\u62df\uff0c\u5148\u505a\u6811\u94fe\u5256\u5206\u6c42lca\u4fbf\u4e8e\u5bfb\u627e\u8def\u5f84\uff0c\u4e3a\u4e86\u65b9\u4fbf\u987a\u7740\u8def\u5f84\u4ece\u4e0a\u5f80\u4e0b\u8d70\uff0c\u505a\u6811\u5256\u7684\u65f6\u5019\u987a\u4fbf\u5904\u7406\u51fa\u500d\u589e  \n\n\u6811\u5256\u3001\u500d\u589e\u9884\u5904\u7406\uff08\u6ca1\u5565\u8bf4\u7684\uff09\n```cpp\ninline void dfs(register int x)\n{\n\tssize[x] = 1;\n\tpoint[deep[x]].push_back(x);\n\tfor (register int i = 1; i <= 20; ++i)\n\t{\n\t\tif ((1 << i) > deep[x])break;\n\t\tfa[x][i] = fa[fa[x][i - 1]][i - 1];\n\t}\n\tregister int e = p[x];\n\twhile (e)\n\t{\n\t\tregister int k = b[e];\n\t\tif (fa[x][0] != k)\n\t\t{\n\t\t\tfa[k][0] = x;\n\t\t\tdeep[k] = deep[x] + 1;\n\t\t\tif (deep[k] > maxdep)maxdep = deep[k];\n\t\t\tdfs(k);\n\t\t\tif (ssize[son[x]] < ssize[k])son[x] = k;\n\t\t\tssize[x] += ssize[k];\n\t\t}\n\t\te = nt[e];\n\t}\n}\ninline void dfs2(register int x, register int chain_number)\n{\n\tbelong[x] = chain_number;\n    pos[x] = ++id;//\u5728\u6b64\u5904\u6ca1\u7528\uff0c6)\u624d\u4f1a\u7528\u5230\n\tif (son[x])dfs2(son[x], chain_number);\n\tregister int e = p[x];\n\twhile (e)\n\t{\n\t\tregister int k = b[e];\n\t\tif (k != son[x] && k != fa[x][0])dfs2(k, k);\n\t\te = nt[e];\n\t}\n}\n```\n\u6811\u5256LCA\uff08\u6ca1\u5565\u8bf4\u7684\uff09\n```cpp\ninline int LCA(register int x, register int y)\n{\n\twhile (belong[x] != belong[y])\n\t{\n\t\tif (deep[belong[x]] < deep[belong[y]])jh(x, y);\n\t\tx = fa[belong[x]][0];\n\t}\n\tif (deep[x] < deep[y])return x;\n\treturn y;\n}\n```\n\u6c42x\u5230y\u8def\u5f84\u4e0ax\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff08\u4fdd\u8bc1deep[x]<deep[y]\uff09  \n\u8fd9\u91cc\u500d\u589e\u76f4\u63a5\u5f80\u4e0a\u8df3 \u6df1\u5ea6\u5dee-1 \u6765\u627e\u5230\u6240\u6c42\u70b9\uff0c\u9700\u8981\u7279\u5224\u70b9\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u8fd4\u56de\n```cpp\ninline int get(register int x, register int y)\n{\n\tregister int cha = deep[y] - deep[x] - 1;\n\tif (cha == -1)return y;\n\tfor (register int i = 20; i >= 0; --i)\n\t\tif (cha&(1 << i))\n\t\t\ty = fa[y][i];\n\treturn y;\n}\n```\n\u7136\u540e\u5c31\u662f\u6a21\u62df\u4e86\uff0c\u8fd9\u91cc\u6211\u76f4\u63a5\u7528\u7684play[i].a\u8868\u793a\u7b2ci\u4e2a\u73a9\u5bb6\u7684\u5f53\u524d\u4f4d\u7f6e\uff0cplay[i].same\u8868\u793a\u8d77\u70b9\u7ec8\u70b9\u662f\u5426\u5728\u540c\u4e00\u4fa7\uff0c\u5982\u679c\u5728\u540c\u4e00\u4fa7\u5c31\u76f4\u63a5a\u5230b\uff0c\u5426\u5219\u8981\u5148\u5230lca\uff0c\u5176\u4ed6\u7684\u5c31\u6839\u636e\u9898\u610f\u6a21\u62df\u5373\u53ef\n```cpp\nelse if (n % 10 == 3)\n{\n\tdfs(1);\n\tdfs2(1, 1);\n\tfor (register int i = 1; i <= m; ++i)lca[i] = LCA(play[i].a, play[i].b), play[i].same = lca[i] == play[i].a;\n\tregister int tot = m, tim = 0;\n\twhile (tot)\n\t{\n\t\tfor (register int i = 1; i <= n; ++i)\n\t\t\tif (w[i] == tim)ans[i] = now[i];\n\t\tfor (register int i = 1; i <= m; ++i)\n\t\t{\n\t\t\tif (play[i].out)continue;\n\t\t\t--now[play[i].a];\n\t\t\tif (play[i].a == play[i].b)\n\t\t\t{\n\t\t\t\tplay[i].out = 1;\n\t\t\t\t--tot;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (play[i].same)\n\t\t\t\tplay[i].a = get(play[i].a, play[i].b);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ((play[i].a = fa[play[i].a][0]) == lca[i])\n\t\t\t\t\tplay[i].same = 1;\n\t\t\t}\n\t\t\t++now[play[i].a];\n\t\t}\n\t\t++tim;\n\t}\n\tfor (register int i = 1; i <= n; ++i)printf(\"%d \", ans[i]);\n}\n```\n\n4)\u6d4b\u8bd5\u70b96~8 15\u5206  \n\u8fd9\u4e2a\u60c5\u51b5\u662f\u76f8\u5f53\u4e8e\u7ed9\u4f60\u4e00\u4e2a1~n\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5bf9\u4e8e\u4f4d\u7f6ei\u7684\u89c2\u5bdf\u5458\u6765\u8bf4\uff0c\u53ea\u6709\u8ddd\u79bb\u4ed6w[i]\u7684\u73a9\u5bb6\u6709\u53ef\u80fd\u88ab\u89c2\u5bdf\u5230\uff0c\u6240\u4ee5\u5bf9i\u6709\u8d21\u732e\u7684\u4f4d\u7f6e\u5e94\u8be5\u662fi+w[i]\u548ci-w[i]\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u5982\u4f55\u5bf9i\u4ea7\u751f\u8d21\u732e\u5462\uff1f  \n\n\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u533a\u95f41~5(a\u8868\u793a\u8d77\u70b9\uff0c_\u8868\u793a\u5565\u90fd\u4e0d\u662f\uff0cb\u8868\u793a\u7ec8\u70b9\uff0ci\u8868\u793a\u67d0\u89c2\u5bdf\u5458)  \n\na _ i b _  \n\n\u5047\u8bbew[i]\u662f2\uff0c\u90a3\u4e48i+w[i]=5\u548ci-w[i]=1\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u5bf9i\u6709\u8d21\u732e\uff0c5\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c1\u7684\u4f4d\u7f6e\u6709\u4e00\u4e2a\u73a9\u5bb6\uff0c\u8fd9\u4e2a\u73a9\u5bb6\u7ecf\u8fc7\u7684\u8def\u5f84\u4e2d\u5305\u542b\u4e86i\uff0c\u6240\u4ee5\u8fd9\u4e2a\u73a9\u5bb6\u4f1a\u88ab\u89c2\u5bdf\u5458\u89c2\u5bdf\u5230  \n\n\u90a3\u4e48\u7ed3\u8bba\u5c31\u5f88\u660e\u786e\u4e86\uff0c\u53ea\u8981\u8d77\u70b9\u4e3ai-w[i]\u7684\u73a9\u5bb6\u7ec8\u70b9b>=i,\u6216\u8005\u8d77\u70b9\u4e3ai+w[i]\u7684\u73a9\u5bb6\u7ec8\u70b9b<=i\uff0c\u8fd9\u4e2a\u73a9\u5bb6\u5c31\u5bf9i\u6709\u8d21\u732e\u3002  \n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8d77\u70b9a\u548c\u7ec8\u70b9b\u8fde\u8d77\u6765\uff0c\u4ecea\u8fde\u5230b\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6ei\uff0c\u6211\u4eec\u904d\u5386\u4e0ei+w[i]\u548ci-w[i]\u76f8\u90bb\u7684\u6240\u6709\u70b9\uff0c\u6309\u7167\u4e0a\u8ff0\u7ed3\u8bba\u5224\u65ad\u662f\u5426\u6709\u8d21\u732e\uff0c\u7edf\u8ba1\u7b54\u6848\uff08\u5b58\u90bb\u63a5\u70b9vector\u4e5f\u53ef\u4ee5\uff09  \n\n\u6700\u540e\u4e00\u70b9\u5c31\u662f\u8981\u6ce8\u610f\u8fb9\u754c\u95ee\u9898(i+w[i]\u548ci-w[i])\n```cpp\nelse if (n % 10 == 4)\n{\n\tfor (register int i = 1; i <= m; ++i)add2(play[i].a, play[i].b);\n\tfor (register int i = 1; i <= n; ++i)\n\t{\n\t\tif (i - w[i] > 0)\n\t\t{\n\t\t\tregister int loc = i - w[i];\n\t\t\tregister int e = p2[loc];\n\t\t\twhile (e)\n\t\t\t{\n\t\t\t\tregister int k = b2[e];\n\t\t\t\tif (k >= i)++ans[i];\n\t\t\t\te = nt2[e];\n\t\t\t}\n\t\t}\n\t\tif (i + w[i] <= n)\n\t\t{\n\t\t\tregister int loc = i + w[i];\n\t\t\tregister int e = p2[loc];\n\t\t\twhile (e)\n\t\t\t{\n\t\t\t\tregister int k = b2[e];\n\t\t\t\tif (k <= i)++ans[i];\n\t\t\t\te = nt2[e];\n\t\t\t}\n\t\t}\n    }\n\tfor (register int i = 1; i <= n; ++i)printf(\"%d \", ans[i]);\n}\n```  \n\n5)\u6d4b\u8bd5\u70b99~12 20\u5206\n\u201c\u6240\u6709\u7684\u8d77\u70b9\u90fd\u662f1\u201d\uff0c\u8fd9\u4f1a\u8ba9\u6211\u4eec\u60f3\u5230\u4ec0\u4e48\uff1f\u5047\u8bbe\u7ecf\u8fc7\u4e86t\u79d2\u6240\u6709\u73a9\u5bb6\u90fd\u8fd8\u6ca1\u9000\u51fa\u6e38\u620f\uff0c\u90a3\u4e48\u6240\u6709\u73a9\u5bb6\u5e94\u8be5\u90fd\u4f1a\u8d70\u5230\u6df1\u5ea6\u4e3at\u7684\u5730\u65b9\u3002  \n\u6240\u4ee5\u5bf9\u4e8e\u89c2\u5bdf\u5458i\uff0c\u5047\u8bbei\u7684\u6df1\u5ea6\u4e3at\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u4e00\u662ft!=w[i]\uff0c\u90a3\u4e48t\u65f6\u523b\u6ca1\u6709\u4eba\u4f1a\u8d70\u5230i\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u6df1\u5ea6\u90fd\u4e0d\u6ee1\u8db3\uff0c\u8fd9\u79cd\u60c5\u51b5\u7b54\u6848\u5c31\u76f4\u63a5\u662f0\uff1b\u4e8c\u662ft==w[i]\uff0c\u7531\u4e8e\u8d77\u70b9\u90fd\u662f1\uff0c\u73a9\u5bb6j\u88abi\u89c2\u5bdf\u5230\u7684\u5fc5\u8981\u6761\u4ef6\u662f\u7ec8\u70b9\u5728\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4flag[]\u6765\u8bb0\u5f55\u5f53\u524d\u70b9\u662f\u591a\u5c11\u4e2a\u73a9\u5bb6\u7684\u7ec8\u70b9\uff0csum[]\u4e3a\u6bcf\u4e2a\u70b9\u5728\u591a\u5c11\u73a9\u5bb6\u7684\u8def\u5f84\u4e2d\uff0c\u56de\u6eaf\u4e00\u904d\u5c31\u53ef\u5f97\u5230sum[]  \n```cpp\ninline int dfs1(register int x)\n{\n\tsum[x] = flag[x];\n\tregister int e = p[x];\n\twhile (e)\n\t{\n\t\tregister int k = b[e];\n\t\tif (k != fa[x][0])sum[x] += dfs1(k);\n\t\te = nt[e];\n\t}\n\treturn sum[x];\n}\n```  \n\u4e0b\u9762\u7684\u4ee3\u7801\u7528dfs(1)\u4e3b\u8981\u662f\u4e3a\u4e86\u5f97\u5230deep\uff0c\u6211\u4eec\u4e5f\u6ca1\u5fc5\u8981\u518d\u5199\u4e00\u4e2a  \n```\nelse if (n % 10 == 5)\n{\n\tdfs(1);\n\tfor (register int i = 1; i <= m; ++i)++flag[play[i].b];\n\tdfs1(1);\n\tfor (register int i = 1; i <= n; ++i)\n\t\tif (w[i] != deep[i])printf(\"0 \");\n\t\telse printf(\"%d \", sum[i]);\n}\n```  \n\n6)\u6d4b\u8bd5\u70b913~16 20\u5206  \n\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u90e8\u5206\u5206\u4e2d\u6700\u96be\u62ff\u7684\uff0c\u4e5f\u662f\u6211\u8c03\u4e86\u6700\u4e45\u7684\uff08\u5176\u5b9e\u662f\u4e8c\u5206\u6253\u6302\u4e86\uff0c\u6539\u6210\u66b4\u529b\u624d\u8fc7\uff0c\u6211\u592a\u83dc\u4e86QAQ\uff09  \n\n\u6761\u4ef6\u5f88\u660e\u786e\uff1a\u7ec8\u70b9\u90fd\u4e3a1\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\uff1a\u5bf9\u4e8e\u89c2\u5bdf\u5458i\u6765\u8bf4\uff0c\u8981\u60f3\u5728w[i]\u65f6\u523b\u89c2\u5bdf\u5230\u4e00\u73a9\u5bb6j\uff0cj\u5fc5\u987b\u5728w[i]\u65f6\u523b\u521a\u597d\u8d70\u5230i\uff0c\u800c\u7531\u4e8e\u7ec8\u70b9\u662f\u6839\u8282\u70b9\uff0cj\u4e00\u5b9a\u662f\u5f80\u4e0a\u8d70\u7684\uff0c\u6362\u8a00\u4e4b\uff0cj\u7684\u8d77\u70b9\u6df1\u5ea6\u5e94\u8be5\u662fdeep[i]+w[i]\uff0c\u5e76\u4e14j\u4e00\u5b9a\u5728i\u7684\u5b50\u6811\u4e2d\u3002\u6211\u4eec\u53ea\u8981\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u8282\u70b9\u662f\u591a\u5c11\u4e2a\u73a9\u5bb6\u7684\u8d77\u70b9\uff0c\u8bb0\u4f5cflag[]\uff0c\u5bf9\u4e8e\u89c2\u5bdf\u5458i\uff0c\u7b54\u6848\u5c31\u662fi\u7684\u5b50\u6811\u4e2d\u6df1\u5ea6\u4e3adeep[i]+w[i]\u7684\u6240\u6709\u8282\u70b9\u7684flag[]\u4e4b\u548c  \n\n\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\uff1a\u5982\u4f55\u627e\u5230\u5b50\u6811\u4e2d\u6df1\u5ea6\u4e3adeep[i]+w[i]\u7684\u8282\u70b9\uff1f\u8003\u8651\u5230\u5b50\u6811\u7684\u641c\u7d22\u5e8f\uff08\u8bb0\u4f5cpos[]\uff09\u662f\u8fde\u7eed\u7684\uff08\u6bd4\u5982\u641c\u7d22\u5e8f\u4e3a3\uff0c\u5b50\u6811\u5927\u5c0f\u4e3a4\u7684\u8282\u70b9\uff0c\u5b50\u6811\u5185\u7684\u641c\u7d22\u5e8f\u662f3~6\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u540c\u4e00\u6df1\u5ea6\u7684\u6240\u6709\u8282\u70b9\uff0c\u7136\u540e\u6839\u636e\u641c\u7d22\u5e8f\u8fdb\u884c\u6392\u5e8f\uff0c\u627e\u4e24\u4e2a\u7aef\u70b9\uff1a\u4e00\u4e2a\u662f\u641c\u7d22\u5e8f\u4e0d\u5c0f\u4e8epos[i]\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u4e00\u4e2a\u662f\u641c\u7d22\u5e8f\u4e0d\u5927\u4e8epos[i]+ssize[i]-1\u7684\u6700\u5927\u8282\u70b9\u3002\u5176\u4e2dssize[i]\u4e3ai\u7684\u5b50\u6811\u5927\u5c0f\u3002\u90a3\u4e48\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u70b9\uff08\u5728\u6392\u8fc7\u5e8f\u7684\u5e8f\u5217\u4e2d\uff09\uff08\u5305\u542b\u7aef\u70b9\uff09\u7684flag[]\u4e4b\u548c\u5373\u4e3a\u7b54\u6848\u3002\uff08\u627e\u4e24\u4e2a\u7aef\u70b9\u5e94\u8be5\u662f\u53ef\u4ee5\u4e8c\u5206\u7684\uff0c\u53ef\u662f\u6211\u592a\u83dc\u4e86\u4e0d\u4f1a\uff0c\u8fd9\u91cc\u66b4\u529b\u53bb\u627e\u4e5f\u4e0d\u4f1a\u6709\u592a\u5927\u533a\u522b\uff0c\u56e0\u4e3a\u6570\u636e\u91cc\u9762\u540c\u4e00\u6df1\u5ea6\u7684\u70b9\u4e0d\u662f\u5f88\u591a\uff09  \n```cpp\nelse if (n % 10 == 6)\n{\n\tdfs(1);\n\tdfs2(1, 1);\n\tfor (register int i = 1; i <= m; ++i)++flag[play[i].a];\n\tfor (register int i = 0; i <= maxdep; ++i)\n\t{\n\t\tpoint[i].push_back(0);//\u672c\u4eba\u4e60\u60ef\u4ece1\u5f00\u59cb\uff0c\u6240\u4ee5\u8865\u4e00\u4e2a\u7a7a\u5143\u7d20\u8fdb\u6765\uff0c\u4e0d\u8865\u4e5f\u884c\n\t\tsort(point[i].begin(), point[i].end(), cmp);\n\t}\n\tfor (register int i = 1; i <= n; ++i)\n\t{\n\t\tregister int loc = deep[i] + w[i];\n\t\tif (loc > maxdep)\n\t\t{\n\t\t\tprintf(\"0 \");\n\t\t\tcontinue;\n\t\t}\n\t\tregister int zuo = 0, you = 0, l = 1, r = point[loc].size() - 1;\n\t\tfor (register int j = 1; j <= r; ++j)\n\t\t{\n\t\t\tif (pos[point[loc][j]] >= pos[i])\n\t\t\t{\n\t\t\t\tzuo = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!zuo)\n\t\t{\n\t\t\tprintf(\"0 \");\n\t\t\tcontinue;\n\t\t}\n\t\tfor (register int j = r; j >= 1; --j)\n\t\t{\n\t\t\tif (pos[point[loc][j]] < pos[i] + ssize[i])\n\t\t\t{\n\t\t\t\tyou = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!you)\n\t\t{\n\t\t\tprintf(\"0 \");\n\t\t\tcontinue;\n\t\t}\n\t\tregister int ans = 0;\n\t\twhile (zuo <= you)ans += flag[point[loc][zuo++]];\n\t\tprintf(\"%d \", ans);\n\t}\n}\n```  \n\n\u7efc\u5408\u4ee5\u4e0a\u7b97\u6cd5\uff0c\u4f60\u5c31\u53ef\u4ee5\u83b7\u5f9780\u5206\u7684\u597d\u6210\u7ee9  \n\n\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801  \n```cpp\n#include <bits/stdc++.h>\n#define jh(x,y) x^=y^=x^=y\nconst int N = 600010;\nusing namespace std;\ninline long long read()\n{\n\tregister long long num = 0;\n\tregister char ch;\n\tregister bool flag = false;\n\twhile ((ch = getchar()) == ' ' || ch == '\\n' || ch == '\\r');\n\tif (ch == '-')flag = true; else num = ch ^ 48;\n\twhile ((ch = getchar()) != ' '&&ch != '\\n'&&ch != '\\r'&&~ch)\n\t\tnum = num * 10 + (ch ^ 48);\n\tif (flag)return -num; return num;\n}\nint nt[N], p[N], b[N], num, w[N], ans[N], ssize[N], son[N], fa[N][21], deep[N], belong[N], now[N], lca[N], maxdep;\nint nt2[N], p2[N], b2[N], num2, sum[N], flag[N], pos[N], id;\nstruct Node {\n\tint a, b, out, same;\n}play[N];\nvector<int>point[N];\ninline void add(register int x, register int y)\n{\n\tb[++num] = y;\n\tnt[num] = p[x];\n\tp[x] = num;\n\tb[++num] = x;\n\tnt[num] = p[y];\n\tp[y] = num;\n}\ninline void add2(register int x, register int y)\n{\n\tb2[++num2] = y;\n\tnt2[num2] = p2[x];\n\tp2[x] = num2;\n}\ninline void dfs(register int x)\n{\n\tssize[x] = 1;\n\tpoint[deep[x]].push_back(x);\n\tfor (register int i = 1; i <= 20; ++i)\n\t{\n\t\tif ((1 << i) > deep[x])break;\n\t\tfa[x][i] = fa[fa[x][i - 1]][i - 1];\n\t}\n\tregister int e = p[x];\n\twhile (e)\n\t{\n\t\tregister int k = b[e];\n\t\tif (fa[x][0] != k)\n\t\t{\n\t\t\tfa[k][0] = x;\n\t\t\tdeep[k] = deep[x] + 1;\n\t\t\tif (deep[k] > maxdep)maxdep = deep[k];\n\t\t\tdfs(k);\n\t\t\tif (ssize[son[x]] < ssize[k])son[x] = k;\n\t\t\tssize[x] += ssize[k];\n\t\t}\n\t\te = nt[e];\n\t}\n}\ninline void dfs2(register int x, register int chain_number)\n{\n\tbelong[x] = chain_number;\n\tpos[x] = ++id;\n\tif (son[x])dfs2(son[x], chain_number);\n\tregister int e = p[x];\n\twhile (e)\n\t{\n\t\tregister int k = b[e];\n\t\tif (k != son[x] && k != fa[x][0])dfs2(k, k);\n\t\te = nt[e];\n\t}\n}\ninline int dfs1(register int x)\n{\n\tsum[x] = flag[x];\n\tregister int e = p[x];\n\twhile (e)\n\t{\n\t\tregister int k = b[e];\n\t\tif (k != fa[x][0])sum[x] += dfs1(k);\n\t\te = nt[e];\n\t}\n\treturn sum[x];\n}\ninline int LCA(register int x, register int y)\n{\n\twhile (belong[x] != belong[y])\n\t{\n\t\tif (deep[belong[x]] < deep[belong[y]])jh(x, y);\n\t\tx = fa[belong[x]][0];\n\t}\n\tif (deep[x] < deep[y])return x;\n\treturn y;\n}\ninline int get(register int x, register int y)\n{\n\tregister int cha = deep[y] - deep[x] - 1;\n\tif (cha == -1)return y;\n\tfor (register int i = 20; i >= 0; --i)\n\t\tif (cha&(1 << i))\n\t\t\ty = fa[y][i];\n\treturn y;\n}\ninline bool cmp(register int a, register int b) { return pos[a] < pos[b]; }\n\nint main()\n{\n\tregister int n = read(), m = read();\n\tfor (register int i = 1; i != n; ++i)add(read(), read());\n\tfor (register int i = 1; i <= n; ++i)w[i] = read();\n\tfor (register int i = 1; i <= m; ++i)++now[play[i].a = read()], play[i].b = read();\n\tif (n % 10 == 1)\n\t{\n\t\tfor (register int i = 1; i <= m; ++i)\n\t\t\tif (!w[play[i].a])++ans[play[i].a];\n\t\tfor (register int i = 1; i <= n; ++i)printf(\"%d \", ans[i]);\n\t}\n\telse if (n % 10 == 2)\n\t{\n\t\tfor (register int i = 1; i <= m; ++i)++ans[play[i].a];\n\t\tfor (register int i = 1; i <= n; ++i)printf(\"%d \", ans[i]);\n\t}\n\telse if (n % 10 == 3)\n\t{\n\t\tdfs(1);\n\t\tdfs2(1, 1);\n\t\tfor (register int i = 1; i <= m; ++i)lca[i] = LCA(play[i].a, play[i].b), play[i].same = lca[i] == play[i].a;\n\t\tregister int tot = m, tim = 0;\n\t\twhile (tot)\n\t\t{\n\t\t\tfor (register int i = 1; i <= n; ++i)\n\t\t\t\tif (w[i] == tim)ans[i] = now[i];\n\t\t\tfor (register int i = 1; i <= m; ++i)\n\t\t\t{\n\t\t\t\tif (play[i].out)continue;\n\t\t\t\t--now[play[i].a];\n\t\t\t\tif (play[i].a == play[i].b)\n\t\t\t\t{\n\t\t\t\t\tplay[i].out = 1;\n\t\t\t\t\t--tot;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (play[i].same)\n\t\t\t\t\tplay[i].a = get(play[i].a, play[i].b);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ((play[i].a = fa[play[i].a][0]) == lca[i])\n\t\t\t\t\t\tplay[i].same = 1;\n\t\t\t\t}\n\t\t\t\t++now[play[i].a];\n\t\t\t}\n\t\t\t++tim;\n\t\t}\n\t\tfor (register int i = 1; i <= n; ++i)printf(\"%d \", ans[i]);\n\t}\n\telse if (n % 10 == 4)\n\t{\n\t\tfor (register int i = 1; i <= m; ++i)add2(play[i].a, play[i].b);\n\t\tfor (register int i = 1; i <= n; ++i)\n\t\t{\n\t\t\tif (i - w[i] > 0)\n\t\t\t{\n\t\t\t\tregister int loc = i - w[i];\n\t\t\t\tregister int e = p2[loc];\n\t\t\t\twhile (e)\n\t\t\t\t{\n\t\t\t\t\tregister int k = b2[e];\n\t\t\t\t\tif (k >= i)++ans[i];\n\t\t\t\t\te = nt2[e];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i + w[i] <= n)\n\t\t\t{\n\t\t\t\tregister int loc = i + w[i];\n\t\t\t\tregister int e = p2[loc];\n\t\t\t\twhile (e)\n\t\t\t\t{\n\t\t\t\t\tregister int k = b2[e];\n\t\t\t\t\tif (k <= i)++ans[i];\n\t\t\t\t\te = nt2[e];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (register int i = 1; i <= n; ++i)printf(\"%d \", ans[i]);\n\t}\n\telse if (n % 10 == 5)\n\t{\n\t\tdfs(1);\n\t\tfor (register int i = 1; i <= m; ++i)++flag[play[i].b];\n\t\tdfs1(1);\n\t\tfor (register int i = 1; i <= n; ++i)\n\t\t\tif (w[i] != deep[i])printf(\"0 \");\n\t\t\telse printf(\"%d \", sum[i]);\n\t}\n\telse if (n % 10 == 6)\n\t{\n\t\tdfs(1);\n\t\tdfs2(1, 1);\n\t\tfor (register int i = 1; i <= m; ++i)++flag[play[i].a];\n\t\tfor (register int i = 0; i <= maxdep; ++i)\n\t\t{\n\t\t\tpoint[i].push_back(0);\n\t\t\tsort(point[i].begin(), point[i].end(), cmp);\n\t\t}\n\t\tfor (register int i = 1; i <= n; ++i)\n\t\t{\n\t\t\tregister int loc = deep[i] + w[i];\n\t\t\tif (loc > maxdep)\n\t\t\t{\n\t\t\t\tprintf(\"0 \");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tregister int zuo = 0, you = 0, l = 1, r = point[loc].size() - 1;\n\t\t\tfor (register int j = 1; j <= r; ++j)\n\t\t\t{\n\t\t\t\tif (pos[point[loc][j]] >= pos[i])\n\t\t\t\t{\n\t\t\t\t\tzuo = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!zuo)\n\t\t\t{\n\t\t\t\tprintf(\"0 \");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (register int j = r; j >= 1; --j)\n\t\t\t{\n\t\t\t\tif (pos[point[loc][j]] < pos[i] + ssize[i])\n\t\t\t\t{\n\t\t\t\t\tyou = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!you)\n\t\t\t{\n\t\t\t\tprintf(\"0 \");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tregister int ans = 0;\n\t\t\twhile (zuo <= you)ans += flag[point[loc][zuo++]];\n\t\t\tprintf(\"%d \", ans);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1538495544,
        "uid": 87283,
        "name": "Zechariah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "//\u6b22\u8fce\u6765newuser\u5c0f\u7ad9VAN![Newuser\u5c0f\u7ad9](http://www.newuser.top/2018/06/23/%E3%80%90noip2016d1t2%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5%E3%80%91%E6%A0%91%E4%B8%8A%E5%B7%AE%E5%88%86dfs%E5%BA%8F%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9%E7%BA%BF%E6%AE%B5%E6%A0%91/)\n\n\u77e5\u8bc6\uff08\u59ff\u52bf\uff09\u9884\u5907:\u6811\u94fe\u5256\u5206\uff0c\u6811\u4e0a\u5dee\u5206\uff0cdfs\u5e8f\u57fa\u7840\u4e86\u89e3\uff0c\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n\n\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u6761\u8def\u5f84\u62c6\u5206\u6210\u4ecestart \u5230 lca \u548c \u4ecelca \u5230end\u4e24\u6761\u8def\u5f84\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u62c6\u5f00\u6765\u8ba8\u8bba\u4e86\u3002\n\n\u4ecestart\u5230lca\uff08\u5411\u4e0a\u7684\u8def\uff09\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9x\uff0c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\u7684s\uff08\u5f00\u59cb\u70b9\uff09\uff0c\u6709dep[s]-dep[x]==w[x] \n\u6211\u4eec\u79fb\u4e00\u4e0b\u9879\u53ef\u4ee5\u7684\u5f97\u5230 dep[s]==dep[x]+w[x]\u3002\u800c\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u70b9x\uff0c\u4ed6\u7684dep[x]\u548cw[x]\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u9700\u8981\u7684\u5c31\u662f\u627e\u51fa\u6240\u6709\u5728\u81ea\u5df1\u5b50\u6811\u91cc\u9762\u7684\u6df1\u5ea6\u4e3adep[x]+w[x]\u4e2d\u6240\u6709\u7ecf\u8fc7x\u7684s\u70b9\u3002\n\n\u800c\u6211\u4eec\u770bx\u70b9\u662f\u5426\u88ab\u5b50\u6811\u91cc\u9762\u6df1\u5ea6\u4e3adep[x]+w[x] \u7684s\u70b9\u7ecf\u8fc7\u4e5f\u5f88\u5bb9\u6613\uff0c\u56de\u8fc7\u5934\u6765\uff0c\u6211\u4eec\u5148\u6811\u94fe\u5256\u5206\uff08\u6216\u8005\u76f4\u63a5dfs\u5e8f\uff0c\u53ea\u662f\u7528\u6811\u94fe\u53ef\u4ee5\u987a\u4fbf\u5c31\u628alca\u7ed9\u6c42\u4e86\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a,dfsx[s]\u7684\u4f4d\u7f6e+1\uff0c\u5728dfsx[fa[lca]]\u7684\u4f4d\u7f6e-1\u5c31\u5b8c\u6210\u4e86\u5dee\u5206\uff08\u597d\u597d\u60f3\u60f3\u4e3a\u751a\u4e48\u662f\u5728fa[lca]\u5904-1\uff0cs\u5904+1\u800c\u4e0d\u662ffa[lca]+1,s\u5904-1,\u8fd9\u548c\u6211\u4eec\u67e5\u8be2\u5b50\u6811\u6709\u5173\uff09\u3002\u6211\u4eec\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u67e5\u8be2\u81ea\u5df1\u7684\u5b50\u6811\u4eceid[x]\u5230id[x]+siz[x]-1\u8fd9\u6761\u7ebf\u6bb5\u4e0a\u7684sum\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5bf9\u4e8e\u5f80\u4e0a\u89c2\u5bdf\u7684\u70b9\u4e5f\u662f\u540c\u7406\uff0c\u6709\u5bf9\u4e8e\u4e00\u4e2a\u5f80\u4e0a\u7684\u89c2\u5bdf\u70b9\u6709dep[s]-2*dep[lca]==w[x]-dep[x]\n\n\u6211\u4eec\u8fd9\u91cc\u5bf9\u4e0d\u540c\u7684dep[x]-2*dep[lca]\u641e\u7ebf\u6bb5\u6811\uff0c\u5728id[e]+1,id[fa[lca]-1\uff0c\uff08\u5c0f\u5fc3\u8fd9\u91cc\u53ef\u80fd\u4e3a\u8d1f\u7684\uff0c\u8bb0\u5f97\u8bbe\u5b9a\u504f\u79fb\uff09\uff0c\u5bf9x\u67e5\u8be2\u65f6\uff0c\u67e5\u8be2w[x]-dep[x]\u8fd9\u9897\u7ebf\u6bb5\u6811\uff0c\u518d\u5728\u91cc\u9762\u6c42sum[id[x]---->id[x]+siz[x]-1]\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5c31\u8fd9\u6837\u5c31\u641e\u597d\u4e86\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8eLCA\u7684\u5730\u65b9\u8c8c\u4f3c\u6211\u4eec\u7b97\u8fc7\u4e24\u6b21\uff1f\u5176\u5b9e\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8f93\u5165\u65f6\u5c31\u5224\u5b9alca\u5904\u53ef\u4e0d\u53ef\u4ee5\u89c2\u5bdf\u5230\u8fd9\u6761\u8dd1\u6b65\u7136\u540e\u63d0\u524dans[lca]-1\u5c31\u53ef\u4ee5\u4e86\u3002\n\ncode:\n```cpp\n/*\n\u5c06\u6bcf\u4e2a\u73a9\u5bb6\u8def\u5f84\u770b\u505a\u4e24\u6761\u8def\u5f84\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u89c2\u5bdf\u70b9\u6709dep[s]-dep[x]==w[x]\n\u90a3\u4e48\u6709dep[s]==w[x]+dep[x]\u65f6\uff0c\u6709\u8d21\u732e\n\u5bf9\u4e8e\u4e00\u4e2a\u5f80\u4e0a\u7684\u89c2\u5bdf\u70b9\u6709dep[s]-2*dep[lca]==w[x]-dep[x]\uff0c\u6811\u5256\u5e8f+\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\u5bf9\u4e8e\u6bcf\u4e2adep[s]\uff08dep[s]-2*dep[lca]\u4f5c\u4e3a\u4e00\u9897\u6811\uff0c\u5728id[s]\u5230id[fa[LCA]]\u4e4b\u95f4\u641e\u4e00\u4e2a\u5dee\u5206 \n\u7136\u540e\u67e5\u8be2\u81ea\u5df1\u7684\u6240\u9700\u8981\u7684\u5bf9\u5e94\u6df1\u5ea6\u5168\u90e8\u5b50\u6811\u6709\u591a\u5c11\u4e2a\u8fd9\u6837\u7684\u7ebf\u6bb5\uff08\u7ecf\u8fc7\u81ea\u5df1\uff09\u5c31\u53ef\u4ee5\u4e86 \ngogogo\uff01 \n*/\n#include<stdio.h>\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 300005;\nconst int py = 600000;\nint n,m;\nvector<int>ve[maxn];\nint rt[maxn*3],ls[maxn*34],rs[maxn*34],sum[maxn*34],tot,id[maxn];\nint dep[maxn],dfx,top[maxn],fa[maxn],zerz[maxn],siz[maxn];\nint S[maxn],T[maxn],W[maxn],LCA[maxn];\nint ans[maxn];\nvoid add(int &p,int l,int r,int pos,int d)\n{\n\tif(!p) {p = ++tot; ls[p]=rs[p]=sum[p]=0; }\n\tsum[p]+=d;\n\tif(l==r) return;\n\tint mid = (l+r)>>1;\n\tif(pos<=mid) add(ls[p],l,mid,pos,d);\n\telse add(rs[p],mid+1,r,pos,d);\n}\nint query(int &p,int l,int r,int x,int y)\n{\n\tif(!p) return 0;\n\tif(x<=l&&r<=y) return sum[p];\n\tint mid = (l+r)>>1;\n\tif(x>mid) return query(rs[p],mid+1,r,x,y);\n\telse if(y<=mid) return query(ls[p],l,mid,x,y);\n\telse return query(ls[p],l,mid,x,y) + query(rs[p],mid+1,r,x,y);\n}\nvoid dfs1(int x,int ba)\n{\n\tfa[x] = ba; dep[x] = dep[ba]+1;\n\tint ss = ve[x].size(); siz[x] = 1;\n\tfor(int i=0;i<ss;i++) \n\t{\n\t\tif(ve[x][i]==ba) continue;\n\t\tdfs1(ve[x][i],x); siz[x]+=siz[ve[x][i]];\n\t\tif(siz[ve[x][i]]>siz[zerz[x]]) zerz[x] = ve[x][i];\n\t}\n}\nvoid dfs2(int x,int ace)\n{\n\tid[x] = ++dfx; top[x] = ace;\n\tif(zerz[x]) dfs2(zerz[x],ace);\n\tint ss = ve[x].size();\n\tfor(int i=0;i<ss;i++)\n\t{\n\t\tif(ve[x][i]==zerz[x]||ve[x][i]==fa[x]) continue;\n\t\tdfs2(ve[x][i],ve[x][i]);\n\t}\n}\nint getlca(int x,int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x]>dep[y]) return y;\n\treturn  x;\n} \n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tve[x].push_back(y);\n\t\tve[y].push_back(x);\n\t}\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&W[i]);\n\tdfs1(1,0); dfs2(1,1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&S[i],&T[i]);\n\t\tLCA[i] = getlca(S[i],T[i]);\n\t\tif(dep[S[i]]-dep[LCA[i]]==W[LCA[i]]) --ans[LCA[i]];\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tadd(rt[dep[S[i]]],1,n,id[S[i]],1);\n\t\tif(fa[LCA[i]])add(rt[dep[S[i]]],1,n,id[fa[LCA[i]]],-1);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tans[i] +=  query(rt[W[i]+dep[i]],1,n,id[i],id[i]+siz[i]-1);\n\t}\n\tmemset(rt,0,sizeof rt);\n\ttot = 0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tadd(rt[py+dep[S[i]]-2*dep[LCA[i]]],1,n,id[T[i]],1);\n\t\tif(fa[LCA[i]])add(rt[py+dep[S[i]]-2*dep[LCA[i]]],1,n,id[fa[LCA[i]]],-1);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tans[i] +=  query(rt[W[i]-dep[i]+py],1,n,id[i],id[i]+siz[i]-1);\n\t}\n\tfor(int i=1;i<=n;i++) printf(\"%d \",ans[i]);\n}\n```\n",
        "postTime": 1529755178,
        "uid": 55343,
        "name": "Newuser",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\n\u6811\u94fe+\u6876+\u795e\u5947\u7684\u5dee\u5206 \u6ce8\u91ca\u90fd\u5728\u4ee3\u7801\u4e0a\u4e86\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n    \n    \n\n  \n  \n\n\n\n  \n  \n```cpp\n#include <bits/stdc++.h> \n#define N 600001\nusing namespace std;\nint n,m,root=1,w[N],ans[N];   \nvector <int> que[N]; //\u95ee\u9898\u8fde\u63a5\nvector <int> numq[N]; //\u95ee\u9898\u5e8f\u53f7 \nstruct node   //\u90bb\u63a5\u8868\u6784\u6811 \n{\n    int to,next; \n}e[N]; int len,last[N]; \nstruct LCAnode //LCA\u6570\u636e \n{\n    int st,ed,lca; \n}q[N]; int f[N];  bool vis[N]; \nvoid ins(int x,int y) { e[++len].to=y; e[len].next=last[x]; last[x]=len; } //\u52a0\u8fb9 \nint tot[N],son[N],fa[N],dep[N];  \nvoid dfs1(int x) //\u8bb0\u5f55\u6811\u7684\u6570\u636e \n{\n  tot[x]=1; \n  for(int i=last[x];i;i=e[i].next) //\u8bbf\u95ee\u4eb2\u670b\u597d\u53cb \n  {\n      int y=e[i].to; \n      if(y!=fa[x]) \n      {\n        fa[y]=x; \n        dep[y]=dep[x]+1; \n        dfs1(y); \n        son[x]=tot[son[x]]>tot[y]?son[x]:y; //\u627e\u51fa\u91cd\u5b59\u5b50\n      tot[x]+=tot[y]; \n    }\n  } \n}\nint pos[N],Tm,top[N],rpos[N]; //\u627e\u7956\u5148\uff0c\u6784\u5efa\u94fe\u5b50\uff0cdfs\u5e8f \nvoid dfs2(int x,int tp) \n{\n  pos[x]=++Tm; top[x]=tp; rpos[Tm]=x; \n  if(!son[x]) return ; \n  dfs2(son[x],tp); \n  for(int i=last[x];i;i=e[i].next) //\u8bbf\u95ee\u4eb2\u670b\u597d\u53cb \n  {\n      int y=e[i].to; \n    if(y!=fa[x]&&y!=son[x]) \n      dfs2(y,y); \n  }\n} \nint findfa(int x) { return f[x]==x?x:f[x]=findfa(f[x]); } //\u5e76\u67e5\u96c6\u627e\u7956\u5148(\u5408\u5e76\uff09  \nvoid Tarjan_LCA(int x) //\u516c\u5171\u7956\u5148 \n{  \n  f[x]=x; vis[x]=1; \n  int ii=que[x].size(); \n  for(int i=0;i<ii;i++) \n  { \n      if(vis[que[x][i]]&&q[numq[x][i]].lca==0)  \n        q[numq[x][i]].lca=findfa(que[x][i]);  \n  }\n  for(int i=last[x];i;i=e[i].next) \n  {\n      int y=e[i].to;   \n    if(y!=fa[x]) \n    {\n        Tarjan_LCA(y); \n        f[y]=x; \n    }\n  } \n} \nint s[N]; \nvector <int> st[N]; \nvector <int> ed[N]; \nvoid Swap(int &a,int &b) { int y=a; a=b; b=y; } //\u4ea4\u6362  \nvoid add(int x,int y,int fn)  //\u6811\u94fe\u8df3\u8dc3 \n{\n    if(dep[x]<dep[y]) Swap(x,y);   //\u8c03\u6574\u9ad8\u5ea6 \n    while(top[x]!=top[y]) \n    {\n        if(dep[top[x]]<dep[top[y]]) Swap(x,y);  \n        st[pos[top[x]]].push_back(fn); \n        ed[pos[x]+1].push_back(fn); \n        x=fa[top[x]]; \n    } \n    if(dep[x]<dep[y]) Swap(x,y); \n    st[pos[y]].push_back(fn); \n    ed[pos[x]+1].push_back(fn); \n } \nvoid cnt1()  //\u5148\u505aed\u5230lca w[i]=(dep[s]-dep[lca])+(dep[i]-dep[lca])\n{  //\u8f6c\u6362\u5f97 w[i]-dep[i]=dep[s]-2*dep[lca]  \n    for(int i=1;i<=n;i++) w[i]-=dep[i];  \n    for(int i=1;i<=m;i++) //\u4f9d\u6b21\u5904\u7406\u6bcf\u4e00\u4e2a\u8be2\u95ee  \n    {\n        //\u7956\u5148\u70b9\u5018\u82e5\u6210\u7acb\u7684 \u5148\u51cf\u4e00\u91cd\u590d\u59cb\u70b9\u505a\u7684\u4e00\u6b21     \n        if(w[q[i].lca]==dep[q[i].st]-2*dep[q[i].lca]) \n          ans[q[i].lca]--; \n        add(q[i].lca,q[i].ed,dep[q[i].st]-2*dep[q[i].lca]);  //\u5c06\u533a\u95f4\u6807\u53f7  \n    } \n    for(int i=1;i<=n;i++)  //\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u4e2a\u89c2\u5bdf\u8005 \n    {  //\u5dee\u5206\u601d\u60f3   \n        for(int j=0;j<st[i].size();j++) s[st[i][j]]++; //\u4ee5\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\u7684++ \n        for(int j=0;j<ed[i].size();j++) s[ed[i][j]]--; //\u4ee5\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u672b\u70b9\u7684--  \n        ans[rpos[i]]+=s[w[rpos[i]]]; //\u6ee1\u8db3\u5f53\u524d\u7684\u6761\u4ef6\u7684\u70b9\u6570 \n    }\n } \nvoid cnt2()  //st\u5230lca w[i]=dep[st]-dep[i]  \n{   //\u8f6c\u6362\u5f97 w[i]+dep[i]=dep[st];   \n    for(int i=0;i<=n;i++) \n    { \n      st[i].clear(); \n      ed[i].clear(); \n    }\n    memset(s,0,sizeof(s));  //\u521d\u59cb\u5316 \n      for(int i=1;i<=n;i++) w[i]+=2*dep[i];  //\u4e0a\u4e00\u6b21\u51cf\u5f97\u8981\u52a0\u56de\u6765 \n    for(int i=1;i<=m;i++) //\u4f9d\u6b21\u5904\u7406\u6bcf\u4e00\u4e2a\u8be2\u95ee  \n        add( q[i].lca , q[i].st , dep[q[i].st]);    \n    for(int i=1;i<=n;i++) \n    { //\u5dee\u5206  \n        for(int j=0;j<st[i].size();j++) s[st[i][j]]++; \n        for(int j=0;j<ed[i].size();j++) s[ed[i][j]]--; \n        ans[rpos[i]]+=s[w[rpos[i]]]; \n    }\n}\nint main()\n{\n  scanf(\"%d%d\",&n,&m); \n  int x,y; //\u52a0\u8fb9\u6784\u6811,\u7ba1\u7406\u6743\u503c \n  for(int i=1;i<n;i++){ scanf(\"%d%d\",&x,&y); ins(x,y); ins(y,x); } \n  for(int i=1;i<=n;i++) scanf(\"%d\",&w[i]);  \n  for(int i=1;i<=m;i++) //\u8f93\u5165\u95ee\u9898\n  {\n      scanf(\"%d%d\",&x,&y); \n      que[x].push_back(y); que[y].push_back(x); //\u95ee\u9898\u53cc\u5411  \n      numq[x].push_back(i);  numq[y].push_back(i);  //\u8be5\u95ee\u9898\u7684\u6b21\u5e8f  \n      q[i].st=x; q[i].ed=y; \n   }  \n  dep[root]=1; dfs1(root);  dfs2(root,root); //\u6811\u94fe\u5256\u5206  \n  Tarjan_LCA(root); \n  cnt1(); cnt2(); //\u6e90\u70b9\u5230\u7956\u5148\uff0c\u7956\u5148\u5230\u6c47\u70b9 \uff1b  \n  //\u8f93\u51fa \n  for(int i=1;i<n;i++) \n    printf(\"%d \",ans[i]); \n  printf(\"%d\\n\",ans[n]);  \n  system(\"pause\");    \n  return 0;\n}\n\n```",
        "postTime": 1508331770,
        "uid": 42727,
        "name": "PiCaHor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u5176\u4ed6\u9898\u89e3\u5199\u7684\u597d\u795e\uff08mi\uff09\u554a\uff0c\u849f\u84bb\u5199\u4e00\u53d1\u81ea\u5df1\u80fd\u7406\u89e3\u7684\u9898\u89e3,\n\n$s-t$ \u6811\u4e0a\u7684\u8def\u5f84\u4e3a $s-lca-t$\n\n\u8003\u8651$s-lca$\u4ec0\u4e48\u60c5\u51b5\u8dd1\u6b65\u8005\u4f1a\u5bf9\u94fe\u4e0a\u7684\u7ed3\u70b9\u4ea7\u751f\u8d21\u732e\u5462\n\n ![](https://cdn.luogu.com.cn/upload/pic/9217.png) \n\n\u5373$dep[s]=w[i]+dep[i]$\n\n\u540c\u7406\u5728$lca-t$ \u4e0a\u6709 $dis(s,t)-dep[t]=w[i]-dep[i]$\n\n\u600e\u4e48\u6c42\u5462\n\n\u5bf9\u4e8e$s-lca$ \u6211\u4eecDFS\u904d\u5386\u6bcf\u4e2a\u89c2\u5bdf\u5458 \u8bbe\u5f53\u524d\u89c2\u5bdf\u5458\u4e3au\n\n\u5176\u5b50\u6811\u4e2d\u6df1\u5ea6\u4e3a$dep[u]+w[u]$\u7684\u8dd1\u6b65\u8005\u5bf9\u5176\u6709\u8d21\u732e\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5efa\u7acb\u4e00\u4e9b\u5173\u4e8e\u6df1\u5ea6\u7684\u6876 \u6bcf\u4e2a\u6876i\u7ef4\u62a4\u6df1\u5ea6\u4e3ai\u7684\u8282\u70b9\u4e2a\u6570\n\n\u5982\u679c\u89c2\u5bdf\u5458\u6070\u597d\u5728$lca(s,t)$\u4e0a\uff0c\u90a3\u4e48s\u5c31\u5bf9\u4e0a\u9762\u70b9\u7684\u8d21\u732e\u5c31\u7edf\u8ba1\u5b8c\u6bd5\u4e86\uff0c\u63a5\u4e0b\u6765\u4ed6\u8981\u5f80\u4e0b\u8d70\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6253\u4e00\u4e2a-1\u6807\u8bb0\uff0c\u4e5f\u5c31\u662f\u5728\u6876\u91cc\u51cf\u53bb\n\n\u5bf9\u4e8e$lca-t$ \u6211\u4eec\u8fd8\u662fDFS\u904d\u5386\u6bcf\u4e2a\u89c2\u5bdf\u5458 \u8bbe\u5f53\u524d\u89c2\u5bdf\u5458\u4e3au\n\n\u5176\u5b50\u6811\u4e2d\u6df1\u5ea6\u4e3a$dep[u]-w[u]$\u7684\u8dd1\u6b65\u8005\u5bf9\u5176\u6709\u8d21\u732e,\u4e0d\u8fc7\u8fd9\u6b21\u662f\u4ece\u4e0b\u5f80\u4e0a\u641e\uff0c\u5f53\u6211\u4eec\u8bbf\u95ee$t$\u65f6,\u518d\u5728\u7236\u8f88\u7684\u5b50\u6811\u4e2d\u6253\u6807\u8bb0\uff0c\u6240\u4ee5\u6211\u4eec\u518d\u4e8b\u5148\u5904\u7406\u597d\u8bbf\u95ee\u5230t\u65f6\u8981\u6253\u4e0a\u6807\u8bb0\u7684\u70b9\uff0c\u7136\u540e\u56de\u6eaf\u7684\u65f6\u5019\u5728\u7236\u8f88\u4e2d\u8ba1\u7b97\u5c31\u597d\u4e86\u3002\n\n\u540c\u6837\u7684\u6211\u4eec\u4e5f\u4e0d\u80fd\u5fd8\u8bb0\u7ed9$lca(s,t)$\u6253\u4e0a-1\u6807\u8bb0\n\n\u6253\u6807\u8bb0\u90e8\u5206\n\n```cpp\nfor(int i=1; i<=m; i++) {\n    sTag[P[i].s]++;\n    lcaTag[P[i].lca].push_back(dep[P[i].s]);//\u4e8b\u5148\u8bb0\u5f55\n}\nUpDFS(1);\nmemset(bucket,0,sizeof(bucket));\nfor(int i=1; i<=n; i++) lcaTag[i].clear();\nfor(int i=1; i<=m; i++) {\n    tTag[P[i].t].push_back(P[i].dis-dep[P[i].t]+MAXM);//+MAXM \u5904\u7406\u8d1f\u6570\n    lcaTag[P[i].lca].push_back(P[i].dis-dep[P[i].t]+MAXM);\n}\nDownDFS(1);\n```\n\u4e24\u6b21DFS\u904d\u5386\n\n```cpp\ninline void UpDFS(int u) { //dep[s]=dep[u]+w[u]\n    int val=dep[u]+w[u],lastBucket=0;\n    if(val<=maxdep) lastBucket=bucket[val];\n    for(int i=head[u],v=E[i].v; i!=-1; i=E[i].nxt,v=E[i].v) if(v!=fa[u]) UpDFS(v);\n    bucket[dep[u]]+=sTag[u];\n    if(val<=maxdep) ans[u]+=bucket[val]-lastBucket;//\u7edf\u8ba1\u5b50\u6811\u4e2d\u7684\u8282\u70b9\n    int len=lcaTag[u].size();\n    for(int i=0; i<len; i++) bucket[lcaTag[u][i]]--;\n}\ninline void DownDFS(int u) { //L-dep[t]=w[u]-dep[u]\n    int val=w[u]-dep[u]+MAXN,lastBucket=bucket[val];\n    for(int i=head[u],v=E[i].v; i!=-1; i=E[i].nxt,v=E[i].v) if(v!=fa[u]) DownDFS(v);\n    int len=tTag[u].size();\n    for(int i=0; i<len; i++) bucket[tTag[u][i]]++;\n    ans[u]+=bucket[val]-lastBucket;\n    len=lcaTag[u].size();\n    for(int i=0; i<len; i++) bucket[lcaTag[u][i]]--;\n}\n```\n\u66f4\u8be6\u7ec6\u7684NOIP2016\u9898\u89e3\u53ef\u4ee5\u53c2\u770b\u6211\u7684\u535a\u5ba2 [oi.ozem.xyz/Contests/noip-2016/T2.html][1]\n\n\n\n[1]: https://oi.ozem.xyz/Contests/noip-2016/T2.html\n",
        "postTime": 1508239005,
        "uid": 16225,
        "name": "EkiXu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u4e2a\u9898\u8981\u7528\u5230\u4e24\u4e2a\u77e5\u8bc6\u70b9\u3002\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\u548c\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\u697c\u4e0b\u7684\u4ee3\u7801\u5f88\u597d\u4f46\u662f\u7f3a\u4e4f\u89e3\u91ca\n\n\n\n\u9996\u5148\uff0c\u6bcf\u4e00\u68f5\u5723\u8bde\u6811\u90fd\u662f\u6df1\u5ea6\u4e00\u6837\u7684\u70b9\u7684\u96c6\u5408\u3002\n\n\n\u4ed6\u4eec\u7684\u53f6\u5b50\u8282\u7535\u90fd\u662f\u6df1\u5ea6\u4e00\u6837\u3002\n\n\u90a3\u4e48\u52a8\u6001\u5f00\u4e00\u70b9\u7684\u6838\u5fc3\u5c31\u662f\u3002\n\n\u8fd9\u4e2a\u70b9\u5728\u8fd9\u4e2a\u533a\u95f4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5c31\u8981\u6253\u5f00\u3002\n\n\u4f8b\u5982\u73b0\u5728\u6709\u4e00\u523010\n\n\u6b63\u597d\u6709\u4e00\u68f5\u5723\u8bde\u6811\u6807\u5fd7\u6df1\u5ea6\u4e3a\u4e09\u7684\u3002\n\n\u4e00\u53f7\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a\u4e09\uff1b\n\n\uff081,10\uff09 \uff081,5\uff09 \uff081,3\uff09\uff081,2\uff09\uff081\uff0c1\uff09\n\n\u8fd9\u4e9b\u533a\u95f4\u5c31\u4f1a\u5efa\u7acb\uff1b\n\n\n\n\n```cpp\n#include\"algorithm\"\n#include\"iostream\"\n#include\"string.h\"\n#include\"stdlib.h\"\n#include\"stdio.h\"\n#include\"math.h\"\n#include\"vector\"\n#include\"queue\"\n#include\"set\"\nusing namespace std;\nint k;\ntemplate<class MyInt>\nvoid readi(MyInt&x){\n    x=0;int f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=0,ch=getchar();\n    x*=f;\n}\nconst int N=300005,LG=20;\nint s[N],t[N],h[N],nxt[N*2],to[N*2],tmp,w[N],n,m;\nvoid addedge(int u,int v){nxt[++tmp]=h[u],h[u]=tmp,to[tmp]=v;}\nint dfn[N],rel[N],fa[N][LG],sz[N],dep[N],son[N],tot;\nvoid dfs1(int x){\n    sz[x]=1;for(int i=0;fa[x][i];fa[x][i+1]=fa[fa[x][i]][i],i++);\n    for(int i=h[x];i;i=nxt[i])if(to[i]!=fa[x][0]){\n        dep[to[i]]=dep[x]+1,fa[to[i]][0]=x;dfs1(to[i]);\n        sz[x]+=sz[to[i]];if(sz[son[x]]<sz[to[i]])son[x]=to[i];\n    }\n}\nint r1[N*2],r2[N*2],ls[2*N*LG],rs[2*N*LG],tag[2*N*LG],c;\nvoid add(int x,int l,int r,int pos){//\u52a8\u6001\u5f00\u70b9\u6838\u5fc3 \n    if(l==r)return;\n    int mid=(l+r)>>1;\n    if(pos<=mid)//\u5728\u5c31\u5f00\uff0c\u4e0d\u5728\u4e0d\u5f00 \n    {\n        if(!ls[x]) ls[x]=++k;\n        add(ls[x],l,mid,pos);\n    }\n    else \n    {    if(!rs[x]) rs[x]=++k;\n        add(rs[x],mid+1,r,pos);\n    }\n}\nvoid update(int x,int l,int r,int L,int R,int W){\n    if(!x)return;if(L==l&&R==r){tag[x]+=W;return;}int mid=(l+r)>>1;\n    if(R<=mid)update(ls[x],l,mid,L,R,W);else if(L>mid)update(rs[x],mid+1,r,L,R,W);\n    else update(ls[x],l,mid,L,mid,W),update(rs[x],mid+1,r,mid+1,R,W);\n}\nint qry(int x,int l,int r,int pos){\n    if(!x||l==r)return tag[x];\n    if(tag[x]){\n        if(ls[x])tag[ls[x]]+=tag[x];\n        if(rs[x])tag[rs[x]]+=tag[x];\n        tag[x]=0;\n    }\n    int mid=(l+r)>>1;\n    if(pos<=mid)return qry(ls[x],l,mid,pos);\n    return qry(rs[x],mid+1,r,pos);\n}\nvoid dfs2(int x,int r){// \u5728\u52a0\u7684\u540c\u65f6\u8981\u6ce8\u610f\u628aX\u52a0\u5165\u7ebf\u6bb5\u6811\n    dfn[x]=++tot,rel[x]=r;if(son[x])dfs2(son[x],r);\n    for(int i=h[x];i;i=nxt[i])if(to[i]!=fa[x][0]&&to[i]!=son[x])dfs2(to[i],to[i]);\n    if(!r1[dep[x]+w[x]])r1[dep[x]+w[x]]=++k;\n    add(r1[dep[x]+w[x]],1,n,dfn[x]);\n    if(!r2[w[x]-dep[x]+N])r2[w[x]-dep[x]+N]=++k;\n    add(r2[w[x]-dep[x]+N],1,n,dfn[x]);\n}\nint lca(int x,int y){\n    if(dep[x]<dep[y])swap(x,y);int l=dep[x]-dep[y];\n    for(int i=0;l;i++)if(l&(1<<i))x=fa[x][i],l^=1<<i;\n    for(int i=LG-2;i>=0;i--)if(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];\n    return x==y?x:fa[x][0];\n}\nvoid work(int u,int v){\n    int f=lca(u,v);int x=u;\n    while(rel[u]!=rel[f]){\n        update(r1[dep[x]],1,n,dfn[rel[u]],dfn[u],1);\n        u=fa[rel[u]][0];\n    }\n    update(r1[dep[x]],1,n,dfn[f],dfn[u],1);//dfn[f] \u88ab\u52a0\u4e86\u4e00\u6b21\uff1b \n    while(rel[v]!=rel[f]){\n        update(r2[dep[x]-2*dep[f]+N],1,n,dfn[rel[v]],dfn[v],1);\n        v=fa[rel[v]][0];\n    }\n    update(r2[dep[x]-2*dep[f]+N],1,n,dfn[f],dfn[v],1);//\u4ecedfn[f]\u5230fdn[v] \u8981+1 \n    update(r1[dep[x]],1,n,dfn[f],dfn[f],-1);//\u4f46\u662f dfn[f]\u53ea\u80fd\u52a0\u4e00\u6b21\uff1b \n}\nint main(){\n    tmp=0;int x,y;readi(n),readi(m);\n    for(int i=1;i<n;i++){\n        readi(x),readi(y);\n        addedge(x,y),addedge(y,x);\n    }\n    for(int i=1;i<=n;i++)readi(w[i]);\n    dfs1(1);dfs2(1,1);//\u5c31\u662f\u6811\u94fe\u5256\u5206\u7684\u53d8\u5f62 \n    for(int i=1;i<=m;i++){\n        readi(s[i]),readi(t[i]);\n        work(s[i],t[i]);\n    }\n    for(int i=1;i<=n;i++){\n        int ansx=qry(r1[dep[i]+w[i]],1,n,dfn[i]);\n        int ansy=qry(r2[w[i]-dep[i]+N],1,n,dfn[i]);\n        printf(\"%d \",ansx+ansy);\n    }\n    return 0;\n}\n```",
        "postTime": 1503998693,
        "uid": 37443,
        "name": "cy2023",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u601d\u8def\uff0c\u6811\u94fe\u5256\u5206\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53f6\u5b50\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u52a8\u6001\u5f00\u70b9\uff08\u7c7b\u4f3c\u4e3b\u5e2d\u6811\uff09\uff0c\u6df1\u5ea6\u76f8\u540c\u653e\u5728\u4e00\u68f5\u7ebf\u6bb5\u6811\u91cc\uff0c\u65f6\u95f4\uff1ao\uff08nlog^2n\uff09\uff0c\u6709\u70b9\u7c7b\u4f3csdoi2014\u65c5\u884c\u7684\u505a\u6cd5\n\n```cpp\n#include\"algorithm\"\n#include\"iostream\"\n#include\"string.h\"\n#include\"stdlib.h\"\n#include\"stdio.h\"\n#include\"math.h\"\n#include\"vector\"\n#include\"queue\"\n#include\"set\"\nusing namespace std;\ntemplate<class MyInt>\nvoid readi(MyInt&x){\n    x=0;int f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=0,ch=getchar();\n    x*=f;\n}\nconst int N=300005,LG=20;\nint s[N],t[N],h[N],nxt[N*2],to[N*2],tmp,w[N],n,m;\nvoid addedge(int u,int v){nxt[++tmp]=h[u],h[u]=tmp,to[tmp]=v;}\nint dfn[N],rel[N],fa[N][LG],sz[N],dep[N],son[N],tot;\nvoid dfs1(int x){\n    sz[x]=1;for(int i=0;fa[x][i];fa[x][i+1]=fa[fa[x][i]][i],i++);\n    for(int i=h[x];i;i=nxt[i])if(to[i]!=fa[x][0]){\n        dep[to[i]]=dep[x]+1,fa[to[i]][0]=x;dfs1(to[i]);\n        sz[x]+=sz[to[i]];if(sz[son[x]]<sz[to[i]])son[x]=to[i];\n    }\n}\nint r1[N*2],r2[N*2],ls[2*N*LG],rs[2*N*LG],tag[2*N*LG],c;\nvoid add(int&x,int l,int r,int pos){\n    if(!x)x=++c;if(l==r)return;int mid=(l+r)>>1;\n    if(pos<=mid)add(ls[x],l,mid,pos);else add(rs[x],mid+1,r,pos);\n}\nvoid update(int x,int l,int r,int L,int R,int W){\n    if(!x)return;if(L==l&&R==r){tag[x]+=W;return;}int mid=(l+r)>>1;\n    if(R<=mid)update(ls[x],l,mid,L,R,W);else if(L>mid)update(rs[x],mid+1,r,L,R,W);\n    else update(ls[x],l,mid,L,mid,W),update(rs[x],mid+1,r,mid+1,R,W);\n}\nint qry(int x,int l,int r,int pos){\n    if(!x||l==r)return tag[x];\n    if(tag[x]){\n        if(ls[x])tag[ls[x]]+=tag[x];\n        if(rs[x])tag[rs[x]]+=tag[x];\n        tag[x]=0;\n    }\n    int mid=(l+r)>>1;\n    if(pos<=mid)return qry(ls[x],l,mid,pos);\n    return qry(rs[x],mid+1,r,pos);\n}\nvoid dfs2(int x,int r){\n    dfn[x]=++tot,rel[x]=r;if(son[x])dfs2(son[x],r);\n    for(int i=h[x];i;i=nxt[i])if(to[i]!=fa[x][0]&&to[i]!=son[x])dfs2(to[i],to[i]);\n    add(r1[dep[x]+w[x]],1,n,dfn[x]);add(r2[w[x]-dep[x]+N],1,n,dfn[x]);\n}\nint lca(int x,int y){\n    if(dep[x]<dep[y])swap(x,y);int l=dep[x]-dep[y];\n    for(int i=0;l;i++)if(l&(1<<i))x=fa[x][i],l^=1<<i;\n    for(int i=LG-2;i>=0;i--)if(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];\n    return x==y?x:fa[x][0];\n}\nvoid work(int u,int v){\n    int f=lca(u,v);int x=u;\n    while(rel[u]!=rel[f]){\n        update(r1[dep[x]],1,n,dfn[rel[u]],dfn[u],1);\n        u=fa[rel[u]][0];\n    }\n    update(r1[dep[x]],1,n,dfn[f],dfn[u],1);\n    while(rel[v]!=rel[f]){\n        update(r2[dep[x]-2*dep[f]+N],1,n,dfn[rel[v]],dfn[v],1);\n        v=fa[rel[v]][0];\n    }\n    update(r2[dep[x]-2*dep[f]+N],1,n,dfn[f],dfn[v],1);\n    update(r1[dep[x]],1,n,dfn[f],dfn[f],-1);\n}\nint main(){\n//    freopen(\"running.in\",\"r\",stdin);\n//    freopen(\"running.out\",\"w\",stdout);\n    tmp=0;int x,y;readi(n),readi(m);\n    for(int i=1;i<n;i++){\n        readi(x),readi(y);\n        addedge(x,y),addedge(y,x);\n    }\n    for(int i=1;i<=n;i++)readi(w[i]);\n    dfs1(1);dfs2(1,1);\n    for(int i=1;i<=m;i++){\n        readi(s[i]),readi(t[i]);\n        work(s[i],t[i]);\n    }\n    for(int i=1;i<=n;i++){\n        int ansx=qry(r1[dep[i]+w[i]],1,n,dfn[i]);\n        int ansy=qry(r2[w[i]-dep[i]+N],1,n,dfn[i]);\n        printf(\"%d \",ansx+ansy);\n    }\n    return 0;\n}\n```",
        "postTime": 1503968432,
        "uid": 24764,
        "name": "Leo_Riddle",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "Sc 6\u4e2a\u4eba\u505a\u51fa\u6765\u7684\u9898\u5427\uff0c\u7ed9\u51fan\u6761\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u8be2\u95ee\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5230\u8fd9\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e3a\u5b9a\u503c\u7684\u8d77\u70b9\uff0c\u5e76\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u6761\u6570\u3002\n\n\u8bbe\u8d77\u70b9\u4e3au,v\uff1b\n\n    \u8003\u8651\u5230\u8def\u5f84\u4e3a\u6811\u4e0a\u7684\u94fe\uff08 lca (u,v)==u || lca (u,v)==v \uff09 \u6216\u8005\u7ecf\u8fc7lca\u7684\u8def\u5f84\n\uff08    lca(u,v)!= u ,v    \uff09\uff0c\u540e\u4e00\u79cd\u53ef\u4ee5\u7edf\u8ba1\u6210\u524d\u4e24\u79cd\u60c5\u51b5\uff1af=lca(u,v):\n\n\u5206\u6210: (u,f)\u548c(f,v);\n\n\u8fd9\u6837\u4e4b\u540e\uff0c\u5c31\u53ea\u7528\u5904\u7406\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9 x;\u6ee1\u8db3\uff08dep[x]-dep[u]==tm[x] || dep[u]-dep[x]==tm[x]\uff09&& x\u2208(u,v))\n\u7684u\u7684\u6570\u91cf\u4e86\uff1b\n\n\u8003\u8651\u4e3a\u94fe\uff0c\u6240\u4ee5\u5982\u679c\u6ee1\u8db3\u5c5e\u4e8e\uff0c\u90a3\u4e48\u8def\u5f84\u7684\u7ec8\u70b9\uff08\u6216\u8005\u8d77\u70b9\uff09\u4e00\u5b9a\u5728x\u7684\u5b50\u6811\u91cc\uff1b\n\n\u6240\u4ee5\u4f60\u5728\u6811\u4e0a\u5dee\u5206\uff1a\n\n\u5177\u4f53\u662f\u8fd9\u6837\u7684:\n\n\u4ee5lca\uff08u\uff0cv\uff09==u\u4e3a\u4f8b\uff1b\n\n\u5373dep[x]==dep[u]+tm[x];\n\n\u5728v\u5904\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u4f7f\u6df1\u5ea6\u4e3adep[u]\u7684\u8ba1\u6570+1\uff1b(cnt[dep[u]]++)\n\n\u5728u\u5904\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u4f7f\u6df1\u5ea6\u4e3adep[u]\u7684\u8ba1\u6570-1\uff08cnt[dep[u]]--\uff09\n\n\u7b54\u6848\u7edf\u8ba1\u65f6\uff0c\n\n    Ans[x]=cnt[dep[x]-tm[x]];\n\n\u5176\u5b9e\u8fd9\u6837\u662f\u9519\u7684\uff0c\n\n\u56e0\u4e3a\u8be5\u70b9\u7684\u7236\u4eb2\u7684\u5b50\u6811\uff08\u8fd8\u6709\u66f4\u591a\u7684\uff09\u7b54\u6848\u653e\u4e86\u8fdb\u53bb\u6ca1\u6709\u6e05\u7a7a\uff08-1\u6807\u8bb0\u5728\u66f4\u4e0a\u5c42\uff09\uff0c\u7edf\u8ba1\u65f6\u5c31\u4f1a\u51fa\u9519\u3002\n\n\u5982\u4f55\u89e3\u51b3\uff1f\n\n\u7b80\u5355\uff1a\u8fdb\u53bb\u8be5\u70b9\u65f6\uff0c\u5148\u51cf\u53bbcnt[dep[x]-tm[x]]\u5373\u53ef\uff0c\u540e\u9762\u518d+= cnt[dep[x]-tm[x]];\n\n\u7b54\u6848\u7684\u589e\u52a0\u53ea\u4f1a\u5728\u5b50\u6811\u5185\u8fdb\u884c\uff0c\u6240\u4ee5\u589e\u52a0\u7684\u70b9\u4e00\u5b9a\u662f\u6709\u6548\u7684\uff1b\n\n    Lca(v,u)==v\u65f6\u540c\u7406\uff0c\u5373dep[x]==dep[u]-tm[x];\n\n\u8fb9\u754c\u5904\u7406\uff0cdep[x]-tm[x]\u53ef\u80fd\u5c0f\u4e8e0\uff0c\u5f3a\u884c\u52a0\u6700\u5927\u503c\uff08299999\uff09\u5373\u53ef\uff1b\n\nT3:\n\u505a\u5b8c\u7b2c\u4e8c\u9898\u8fd8\u67091\u4e2a\u5c0f\u65f6\uff0c\u592a\u81ea\u4fe1\u4e86\u6ca1\u6709\u5199\u5b83\uff08\u5176\u5b9e\u662f\u770b\u5230\u671f\u671b\u592a\u6076\u5fc3\u4e86\uff09\n\nDay1\u5b8c\u4e86\u4e4b\u540e\u5c31\u53bb\u770b\u7535\u5f71\uff0c\u5fc3\u91cc\u8fd8\u662f\u6709\u4e00\u70b9\u62c5\u5fc3\uff0c\u4e0d\u8fc7\uff0coier\u9700\u8981\u6d6a\uff0c\u53cd\u6b63\u4e00\u5207\u5df2\u7ecf\u8dea\u4e86\uff08\u5982\u679c\u4f60\u5fd7\u5728\u7701\u9009\uff0c\u8bf7\u5ffd\u7565\uff09\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#define maxn 300009\n#define name \"running\"\nusing namespace std;\nint que[maxn];\nstruct edge_ {\n    int v;\n    int next;\n    edge_():v(0),next(0){};\n}line[maxn*2];\nint fi[maxn],fa[maxn][20],dep[maxn],wj[maxn],cnt[3*maxn],ans[maxn];\nvector <int> add[maxn],del[maxn],add2[maxn],del2[maxn];\nint tot;\nvoid add_edge(int u,int v)    {\n    line[++tot].v=v;\n    line[tot].next=fi[u];\n    fi[u]=tot;\n}\nvoid dfs(int u)    {\n    for(int k=fi[u];k;k=line[k].next)    {\n        int v=line[k].v;\n        if(v==fa[u][0])\n            continue;\n        int cur=0;\n        dep[v]=dep[u]+1;\n        fa[v][cur]=u;\n        while(fa[v][cur])    {\n            fa[v][cur+1]=fa[fa[v][cur]][cur];\n            cur++;\n        }\n        dfs(v);\n    }\n}\nint lca(int a,int b)    {\n    if(dep[a]<dep[b])\n        swap(a,b);\n    int p=dep[a]-dep[b],step=0;\n    while(p)    {\n        if(p&1)\n            a=fa[a][step];\n        p>>=1;\n        step++;\n    }\n    step=0;\n    while(a!=b)    {\n        if(fa[a][step]!=fa[b][step]||(step==0&&fa[a][0]==fa[b][0]))    {\n            a=fa[a][step],b=fa[b][step];\n            step++;\n        }\n        else \n            step--;\n    }\n    return a;\n}\nvoid qans(int u)    {\n    ans[u]-=cnt[dep[u]-wj[u]];\n    for(int k=fi[u];k;k=line[k].next)    {\n        int v=line[k].v;\n        if(v==fa[u][0])\n            continue;\n        qans(v);\n    }\n    for(int i=0;i<add[u].size();i++)\n        cnt[add[u][i]]++;\n    ans[u]+=cnt[dep[u]-wj[u]];\n    for(int i=0;i<del[u].size();i++)\n        cnt[del[u][i]]--;\n}\nvoid qans2(int u){\n    ans[u]-=cnt[dep[u]+wj[u]];\n    for(int k=fi[u];k;k=line[k].next)    {\n        int v=line[k].v;\n        if(v==fa[u][0])\n            continue;\n        qans2(v);\n    }\n    for(int i=0;i<add2[u].size();i++)\n        cnt[add2[u][i]]++;\n    ans[u]+=cnt[dep[u]+wj[u]];\n    for(int i=0;i<del2[u].size();i++)\n        cnt[del2[u][i]]--;\n}\nusing namespace std;\nvoid get(int &y)    {\n    y=0;\n    char x=getchar();\n    while(x<'0'||x>'9')\n        x=getchar();\n    while('0'<=x&&x<='9')    {\n        y=y*10-'0'+x;\n        x=getchar();\n    }\n}\nint main()    {\n    freopen(name\".in\",\"r\",stdin);\n    freopen(name\".out\",\"w\",stdout);\n    int n,m,u,v;\n    get(n),get(m);\n    for(int i=1;i<n;i++)    {\n        get(u),get(v);\n        add_edge(u,v);\n        add_edge(v,u);\n    }\n    dfs(1);\n    for(int i=1;i<=n;i++)    {\n        get(wj[i]);\n        wj[i]-=maxn;\n    }\n    for(int i=1;i<=m;i++)    {\n        get(u),get(v);\n        int f=lca(u,v);\n        if(f==v)    {\n            add2[u].push_back(dep[u]+maxn);\n            del2[v].push_back(dep[u]+maxn);\n        }\n        else if(f==u){\n            add[v].push_back(dep[u]+maxn);\n            del[u].push_back(dep[u]+maxn);\n        }\n        else {\n            add2[u].push_back(dep[u]+maxn);\n            del2[f].push_back(dep[u]+maxn);\n            add[v].push_back(2*dep[f]-dep[u]+maxn);\n            del[f].push_back(2*dep[f]-dep[u]+maxn);\n            if(dep[f]==dep[u]-wj[f]-maxn)\n                ans[f]--;\n        }\n    }\n    qans(1);\n    for(int i=1;i<=n;i++)\n        wj[i]+=2*maxn;\n    qans2(1);\n    for(int i=1;i<=n;i++)\n        printf(\"%d \",ans[i]);\n}\n```",
        "postTime": 1480511858,
        "uid": 7364,
        "name": "what_trouble",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "## \u4e00\u3001\u9898\u76ee\n\n[\u70b9\u6b64\u770b\u9898](https://www.luogu.org/problem/P1600)\n\n**\u9898\u610f\uff1a**\n\n\u7ed9\u51fa\u4e00\u68f5\u6811\u548c\u82e5\u5e72\u4e2a\u8def\u5f84\uff0c\u95ee\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u662f\u591a\u5c11\u4e2a\u8def\u5f84\u7684$w_i+1$\u4e2a\u70b9\u3002\n\n## \u4e8c\u3001\u89e3\u6cd5\n\n\u5148\u6765\u63a8\u4e00\u63a8\u67ff\u5b50\uff0c\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff1a\n\n1\u3001$i$\u5728$(u,lca)$\u7684\u8def\u5f84\u4e0a\uff0c\u5982\u679c$dep[u]=dep[i]+w[i]$\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u5bf9$i$\u6709$1$\u7684\u8d21\u732e\u3002\n\n2\u3001$i$\u5728$(lca,v)$\u7684\u8def\u5f84\u4e0a\uff0c\u5982\u679c$w[i]-dis(u,lca)=dep[i]-dep[lca]$\uff0c\u4e5f\u5c31\u662f$dep[i]-w[i]=2*dep[lca]-dep[u]$\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u5bf9$i$\u6709$1$\u7684\u8d21\u732e\u3002\n\n\u8fd9\u50cf\u662f\u6811\u4e0a\u8def\u5f84\u95ee\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u6811\u4e0a\u5dee\u5206\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5f00\u4e2a\u6876\uff0c$t[u][\\thickspace]$\uff0c\u7136\u540e\u76f4\u63a5\u4fee\u6539\u6876\uff0c\u6700\u540e\u5927\u6cd5\u5e08\u4e00\u904d\u7edf\u8ba1\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7a7a\u95f4\u80af\u5b9a\u662f\u8981\u7206\u70b8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7684\u5f62\u5f0f\u8868\u793a\u6876\uff0c\u91c7\u53d6**\u52a8\u6001\u5f00\u70b9**\u7684\u65b9\u5f0f\uff0c\u6700\u540e\u5408\u5e76\u7684\u65f6\u5019\u4e5f\u6709\u6240\u8003\u7a76\uff0c\u5982\u679c\u9700\u8981\u5408\u5e76\u7684\u4e24\u4e2a\u7ebf\u6bb5\u6811\u4e3a$(x,y)$\uff0c\u90a3\u4e48\u5982\u679c\u5b83\u4eec\u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\u90fd\u76f4\u63a5\u4fee\u6539\u7f16\u53f7\uff08\u7701\u65f6\u7701\u529b\uff09\uff0c\u5426\u5219\u66b4\u529b\u5408\u5e76\u3002\n\n\u6709\u4e24\u4e2a\u7ec6\u8282\uff0c\u4ee3\u7801\u4e2d\u4f1a\u6709\u6ce8\u91ca\u3002\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nconst int MAXN = 300005;\nint read()\n{\n    int x=0,flag=1;char c;\n    while((c=getchar())<'0' || c>'9') if(c=='-') flag=-1;\n    while(c>='0' && c<='9') x=(x<<3)+(x<<1)+(c^'0'),c=getchar();\n    return x*flag;\n}\nint n,m,tot,cnt,f[MAXN],dep[MAXN],fa[MAXN][20];\nint rt[MAXN][2],w[MAXN],ans[MAXN];\nstruct edge\n{\n\tint v,next;\n}e[2*MAXN];\nstruct tree\n{\n\tint ls,rs,v;\n}tr[MAXN*80];\nvoid dfs(int u,int par)\n{\n\tfa[u][0]=par;\n\tdep[u]=dep[par]+1;\n\tfor(int i=1;i<=19;i++)\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\tfor(int i=f[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==par) continue;\n\t\tdfs(v,u);\n\t}\n}\nint get(int u,int v)//\u500d\u589elca \n{\n\tif(dep[u]<dep[v]) swap(u,v);\n\tfor(int i=19;i>=0;i--)\n\t\tif(dep[fa[u][i]]>=dep[v])\n\t\t\tu=fa[u][i];\n\tif(u==v) return u;\n\tfor(int i=19;i>=0;i--)\n\t\tif(fa[u][i]^fa[v][i])\n\t\t\tu=fa[u][i],v=fa[v][i];\n\treturn fa[u][0];\n}\nvoid add(int &x,int l,int r,int f,int v)\n{\n\tif(!x) x=++cnt;//\u52a8\u6001\u5f00\u70b9 \n\tif(l==r) {tr[x].v+=f;return ;}\n\tint mid=(l+r)>>1;\n\tif(mid>=v)\n\t\tadd(tr[x].ls,l,mid,f,v);\n\telse\n\t\tadd(tr[x].rs,mid+1,r,f,v);\n\ttr[x].v=tr[tr[x].ls].v+tr[tr[x].rs].v;\n}\nint query(int x,int l,int r,int v)\n{\n\tif(!x || v>r) return 0;//\u7ec6\u82821\uff1a\u8981\u5224\uff0c\u56e0\u4e3adep+w\u53ef\u80fd\u5927\u4e8en \n\tif(l==r) return tr[x].v;\n\tint mid=(l+r)>>1;\n\tif(mid>=v)\n\t\treturn query(tr[x].ls,l,mid,v);\n\treturn query(tr[x].rs,mid+1,r,v);\n}\nvoid merge(int &x,int y)\n{\n\tif(!x||!y) {x=x+y;return ;}\n\ttr[x].v+=tr[y].v;\n\tmerge(tr[x].ls,tr[y].ls);\n\tmerge(tr[x].rs,tr[y].rs);\n}\nvoid count(int u)\n{\n\tfor(int i=f[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa[u][0]) continue;\n\t\tcount(v);\n\t\tmerge(rt[u][0],rt[v][0]);\n\t\tmerge(rt[u][1],rt[v][1]);\n\t}\n\tans[u]+=query(rt[u][0],1,n,dep[u]+w[u]);\n\tans[u]+=query(rt[u][1],1,2*n,dep[u]-w[u]+n);\n\t//\u7ec6\u82822\uff1a\u4e00\u5b9a\u8981\u5728\u8fd9\u91cc\u5b58\u7b54\u6848\uff0c\u56e0\u4e3a\u4fee\u6539\u8282\u70b9\u7f16\u53f7\u7684\u8bdd\u53ef\u80fd\u4f1a\u5728\u4ee5\u540e\u503c\u88ab\u518d\u6b21\u4fee\u6539 \n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\te[++tot]=edge{v,f[u]},f[u]=tot;\n\t\te[++tot]=edge{u,f[v]},f[v]=tot;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tw[i]=read();\n\tdfs(1,0);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\tint lca=get(u,v),t=2*dep[lca]-dep[u]+n;//\u907f\u514d\u8d1f\u6570 \n\t\tadd(rt[u][0],1,n,1,dep[u]);\n\t\tadd(rt[fa[lca][0]][0],1,n,-1,dep[u]);\n\t\tadd(rt[v][1],1,2*n,1,t);\n\t\tadd(rt[lca][1],1,2*n,-1,t);\n\t}\n\tcount(1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tprintf(\"%d \",ans[i]);\n\t}\n}\n```\n",
        "postTime": 1574323264,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "**\u4e2a\u4eba\u601d\u8def\uff1a**\n\n- \u7c7b\u4f3c\"\u96e8\u5929\u7684\u5c3e\u5df4\"\uff0c\u5728dfs\u7684\u8fc7\u7a0b\u4e2d\u5408\u5e76\u6570\u636e\u5373\u53ef\u3002\u53ef\u4ee5\u6ce8\u610f\u5230W\u8303\u56f4\u8f83\u5927\uff0c\u4e14\u533a\u95f4\u5177\u6709\u53ef\u5408\u5e76\u6027\uff08\u975e\u6700\u5927/\u5c0f\u503c\u7b49\u64cd\u4f5c\uff09.\n\n- \u56e0\u6b64\uff0c\u53ef\u5229\u7528**vector\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u4e0a\"\u73a9\u5bb6\"\u7684\u589e\u52a0/\u51cf\u5c11\u60c5\u51b5**\uff0c\u518d\u5728dfs\u7684\u8fc7\u7a0b\u4e2d\u5229\u7528**\u5168\u5c40\u6570\u7ec4**\u5408\u5e76\u5373\u53ef.\n\n- \u5177\u4f53\u5730\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u73a9\u5bb6\uff0c\u5206\u6210\u4e24\u6bb5\u5206\u522b\u8003\u8651\uff0c\u5373S->LCA\u548cLCA->T\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\u6ee1\u8db3W[x]-d[x]=d[s]\uff1b\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\u6ee1\u8db3W[x]-d[x]=d[s]-2*d[lca(s,t)].\n\n- \u4ee3\u5165\u6811\u4e0a\u5dee\u5206\u7684\u57fa\u672c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u53d1\u73b0\uff1a\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5229\u7528\u533a\u95f4\u5408\u5e76\u4f7f\u5f97lca(s,t)\u4e0es\u4e4b\u95f4\u7684\u70b9\u53ef\u4ee5\u5229\u7528\u8be5\u60c5\u51b5\u7684\u6570\u636e\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u540c\u7406\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u4e24\u4e2a\u5c40\u90e8\u53d8\u91cfcnt1,cnt2\u5206\u522b\u7ef4\u62a4W[x]-d[x],W[x]+d[x]\uff0c\u5e76\u5728\u4e00\u6b21dfs\u4e2d\u6c42\u5f97\u7ed3\u679c.\n\n------------\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<vector>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=1000010,MAXM=1000010;\nstruct Edge{\n\tint from,to,nxt;\n}e[MAXM];\nint head[MAXN],edgeCnt=1;\nvoid addEdge(int u,int v){\n\te[++edgeCnt].from=u;\n\te[edgeCnt].to=v;\n\te[edgeCnt].nxt=head[u];\n\thead[u]=edgeCnt;\n}\nint dep[MAXN],f[MAXN][21];\nvoid dfs_Lca(int x){\n\tdep[x]=dep[f[x][0]]+1;\n\tfor(int i=1;i<=20;i++){\n\t\tf[x][i]=f[f[x][i-1]][i-1];\n\t}\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!dep[v]){\n\t\t\tf[v][0]=x;\n\t\t\tdfs_Lca(v);\n\t\t}\n\t}\n}\nint lca(int a,int b){\n\tif(dep[a]>dep[b])swap(a,b);\n\tfor(int i=20;i>=0;i--){\n\t\tif(dep[b]-(1<<i)>=dep[a])b=f[b][i];\n\t}\n\tif(a==b)return a;\n\tfor(int i=20;i>=0;i--)\n\t\tif(f[a][i]!=f[b][i])\n\t\t\ta=f[a][i],b=f[b][i];\n\treturn f[a][0];\n}\n \nint w[MAXN];\nstruct player{\n\tint s,t;\n}players[MAXN];\nstruct item{\n\tint pos,value;\n};\nvector<item> vecs_First[MAXN];\nint c[MAXN],ans[MAXN];\nvoid dfs_Solve_First(int x){\n\tint cnt=c[w[x]+dep[x]];\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v!=f[x][0]){\n\t\t\tdfs_Solve_First(v);\n\t\t}\n\t}\n\twhile(!vecs_First[x].empty()){\n\t\titem nowItem=vecs_First[x].back();vecs_First[x].pop_back();\n\t\tint nowPos=nowItem.pos,nowValue=nowItem.value;\n\t\tc[nowPos]+=nowValue;\n\t}\n\tans[x]+=c[w[x]+dep[x]]-cnt;\n}\nvoid init(){\n\tmemset(c,0,sizeof(c));\n\t\n}\nvector<item> vecs_Second[MAXN];\nvoid dfs_Solve_Second(int x){\n\tint cnt=c[w[x]-dep[x]];\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v!=f[x][0]){\n\t\t\tdfs_Solve_Second(v);\n\t\t}\n\t}\n\twhile(!vecs_Second[x].empty()){\n\t\titem nowItem=vecs_Second[x].back();vecs_Second[x].pop_back();\n\t\tint nowPos=nowItem.pos,nowValue=nowItem.value;\n\t\tc[nowPos]+=nowValue;\n\t}\n\tans[x]+=c[w[x]-dep[x]]-cnt;\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n-1;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\taddEdge(u,v);\n\t\taddEdge(v,u);\n\t}\n\tf[1][0]=0;\n\tdfs_Lca(1);\n\t\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&w[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&players[i].s,&players[i].t);\n\t\tvecs_First[players[i].s].\n\t\tpush_back(item{dep[players[i].s],1});\n\t\tvecs_First[f[lca(players[i].s,players[i].t)][0]].\n\t\tpush_back(item{dep[players[i].s],-1});\n\t\tvecs_Second[players[i].t].\n\t\tpush_back(item{dep[players[i].s]-2*dep[lca(players[i].s,players[i].t)],1});\n\t\tvecs_Second[lca(players[i].s,players[i].t)].\n\t\tpush_back(item{dep[players[i].s]-2*dep[lca(players[i].s,players[i].t)],-1});\n\t}\n\tdfs_Solve_First(1);\n\tinit();\n\tdfs_Solve_Second(1);\n\tfor(int i=1;i<=n-1;i++){\n\t\tcout<<ans[i]<<\" \";\n\t}\n\tprintf(\"%d\\n\",ans[n]);\n\treturn 0;\n}\n```\n",
        "postTime": 1573093629,
        "uid": 115758,
        "name": "Object_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\n\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u6cd5\n\n\u6709\u8def\u5f84$u_i->lca(u_i,v_i)->v_i$\uff0c\u5c06\u8def\u5f84\u5206\u4e3a\u4e24\u534a\u5206\u5f00\u8ba8\u8bba\u3002\n\n\u5148\u8003\u8651$u_i->lca(u_i,v_i)$\u524d\u4e00\u534a\u8def\u5f84\uff1a\n\n\u5bf9\u8282\u70b9$x$\u6709\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53$dep[u_i]-dep[x]=w[x]$\uff0c\u79fb\u9879\u4f7f\u542b$x$\u7684\u5728\u4e00\u8fb9\u4f7f\u7edf\u8ba1\u66f4\u65b9\u4fbf$dep[u_i]=w[x]+dep[x]$\uff0c\u8fd9\u6837\u53ea\u9700\u7edf\u8ba1\u8282\u70b9$x$\u5b50\u6811\u5185\u8def\u5f84\u8d77\u70b9\u6df1\u5ea6\u4e3a$w[x]+dep[x]$\u7684\u4e2a\u6570\u3002\n\n$lca->v_i$\u540e\u4e00\u534a\u8def\u5f84\u540c\u7406\uff1a\n\n\u5bf9\u8282\u70b9$x$\u6709\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53$dep[v_i]-dep[x]=dis-w[x]$\uff0c\u5176\u4e2d$dis$\u4e3a$u,v$\u8def\u5f84\u957f\u5ea6\uff0c\u540c\u6837\u7684\uff0c\u4e3a\u7edf\u8ba1\u65b9\u4fbf\uff0c~~\u8fd0\u7528\u53c2\u53d8\u5206\u79bb\u601d\u60f3~~\uff0c\u6211\u4eec\u79fb\u9879\u5f97$dep[v_i]-dis=dep[x]-w[x]$\uff0c\u7136\u540e\u53c8\u53ef\u4ee5\u628a$dis$\u62c6\u5f00\uff0c\u5f97\u5230$-dep[u_i]+2*dep[lca]=dep[x]-w[x]$\u8fd9\u6837\u53ea\u9700\u8981\u7edf\u8ba1\u8282\u70b9$x$\u5b50\u6811\u5185\u90a3\u4e9b\u8def\u5f84\u7ec8\u70b9$v_i$\u6ee1\u8db3$dep[u_i]-2*dep[lca]$\u4e3a$w[x]-dep[x]$\u7684\u4e2a\u6570\u5373\u53ef\u3002\t\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u3002\u66b4\u529b\u679a\u4e3e\u5b50\u6811\u8ddf\u7edf\u8ba1\u5b50\u6811\u7b54\u6848\u80af\u5b9a\u70b8\uff0c\u53ef\u4ee5\u7528\u6876\u6216\u8005\u7ebf\u6bb5\u6811\u5408\u5e76\u6216\u8005DSU on Tree\u7edf\u8ba1\u3002\n\n\u8fd9\u91cc\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u56e0\u4e3a~~\u4e0a\u763e\u4e86~~\u53ef\u4ee5\u76f4\u63a5\u5957\u4e0a\u6811\u4e0a\u5dee\u5206\u7684\u677f\u5b50\u4e0d\u9700\u8981\u5404\u79cd\u8ba8\u8bba\u6240\u4ee5\u601d\u7ef4\u96be\u5ea6\u5f88\u5c0f\u3002\n\n\u4e24\u6761\u8def\u5f84\u5404\u5f00\u4e00\u7ec4\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4e0b\u6807\u4e3a$dep$\uff0c\u518d\u8fd0\u7528\u5dee\u5206\u601d\u60f3\u3002\u5728$u->lca$\u8def\u5f84\u4e0a\u7684\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5728$u$\u5904+1\uff0c\u518d\u5728$lca$\u5904-1\uff1b\u5728$lca->v$\u8def\u5f84\u4e0a\uff0c\u5728$v$\u5904+1\uff0c$fa[lca]$\u5904-1\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u4e24\u6761\u8def\u5f84\u5408\u5e76\u7684\u4fe1\u606f\u3002\n\n\u7136\u540e\u8282\u70b9$x$\u7684\u7b54\u6848\u5373\u4e3a\u4e24\u7ec4\u7ebf\u6bb5\u6811\u67e5\u8be2\u7ed3\u679c\u4e4b\u548c\u3002\n\n\u53e6\u5916\u5b9e\u73b0\u65f6\u4e3a\u4e86\u907f\u514d\u4e0b\u6807\u51fa\u73b0\u8d1f\u6570\uff0c\u6574\u4f53\u52a0$n$\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define MAXN 300003\nusing namespace std;\ninline int read(){\n    char ch=getchar();int s=0;bool w=0;\n    while((ch<'0'||ch>'9')&&(ch!='-')) ch=getchar();\n    if(ch=='-'){w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9') s=s*10+(ch^'0'),ch=getchar();\n    if(w) return -s;\n    return s;\n}\nint head[MAXN],nxt[MAXN*2],vv[MAXN*2],tot;\ninline void add_egde(int u, int v){\n    vv[++tot]=v;\n    nxt[tot]=head[u];\n    head[u]=tot;\n}\nint dep[MAXN],mxs[MAXN],sz[MAXN],f[MAXN];\nvoid dfs(int u, int fa){\n    sz[u]=1;\n    dep[u]=dep[fa]+1;\n    f[u]=fa;\n    int mxsz=-1;\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i];\n        if(v==fa) continue;\n        dfs(v, u);\n        sz[u]+=sz[v];\n        if(sz[v]>mxsz){\n            mxsz=sz[v];\n            mxs[u]=v;\n        }\n    }\n}\nint topf[MAXN];\nvoid dfs2(int u, int top){\n    topf[u]=top;\n    if(mxs[u]==0) return;\n    dfs2(mxs[u], top);\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i];\n        if(v==f[u]||v==mxs[u]) continue;\n        dfs2(v, v);\n    }\n}\nint lca(int a,int b){\n    while(topf[a]!=topf[b]){\n        if(dep[topf[a]]<dep[topf[b]]) swap(a,b);\n        a=f[topf[a]];\n    }\n    if(dep[a]<dep[b]) return a;\n    else return b;\n}\nint cnt;\n#define MAXM MAXN*2*18*2\nint tre[MAXM],sl[MAXM],sr[MAXM];\nvoid change(int &x, int l, int r, int pos, int val){\n    if(x==0) x=++cnt;\n    if(l==r){\n        tre[x]+=val;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(pos<=mid) change(sl[x], l, mid, pos, val);\n    else change(sr[x], mid+1, r, pos, val);\n}\nint query(int x, int l, int r, int pos){\n    if(x==0) return 0;\n    if(l==r) return tre[x];\n    int mid=(l+r)>>1;\n    if(pos<=mid) return query(sl[x], l, mid, pos);\n    else return query(sr[x], mid+1, r, pos);\n}\nint merge(int a, int b, int l, int r){\n    if(a==0||b==0) return a+b;\n    if(l==r){\n        tre[a]+=tre[b];\n        return a;\n    }\n    int mid=(l+r)>>1;\n    sl[a]=merge(sl[a], sl[b], l, mid);\n    sr[a]=merge(sr[a], sr[b], mid+1, r);\n    return a;\n}\nint n,m,w[MAXN],rot1[MAXN],rot2[MAXN];\nint ans[MAXN];\nvoid solve(int u, int fa){\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i];\n        if(v==fa) continue;\n        solve(v, u);\n        rot1[u]=merge(rot1[u], rot1[v], 1, n*2);\n        rot2[u]=merge(rot2[u], rot2[v], 1, n*2);\n    }\n    ans[u]=query(rot1[u], 1, n*2, dep[u]+w[u])+query(rot2[u], 1, n*2, n+w[u]-dep[u]);\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<n;++i){\n        int u=read(),v=read();\n        add_egde(u, v);\n    }\n    dfs(1, 0);\n    dfs2(1, 1);\n    for(int i=1;i<=n;++i) w[i]=read();\n    for(int i=1;i<=m;++i){\n        int s=read(),t=read();\n        int tmp=lca(s, t);\n        change(rot1[s], 1, n*2, dep[s], 1);\n        change(rot1[tmp], 1, n*2, dep[s], -1);\n        change(rot2[t], 1, n*2, n+dep[s]-dep[tmp]*2, 1);\n        change(rot2[f[tmp]], 1, n*2, n+dep[s]-dep[tmp]*2, -1);\n    }\n    solve(1, 1);\n    for(int i=1;i<=n;++i) printf(\"%d \", ans[i]);\n    return 0;\n}\n```\n\n\n\n\n\n\n",
        "postTime": 1572493491,
        "uid": 63896,
        "name": "Santiego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u539f\u672c\u770b\u9519\u9898\u4e86\uff0c\u60f3\u4e86\u4e2a\u6811\u5256\u505a\u6cd5\uff0c\u540e\u6765\u9898\u770b\u5bf9\u4e86\u53d1\u73b0\u4e0d\u7528\u6811\u5256\n\n\u8bbe$D$\u8868\u793a\u4ece$S_i$\u5230$lca(S_i,T_i)$\u7684\u8ddd\u79bb\uff0c\u5bf9\u4e8e$S_i\\rightarrow lca(S_i,T_i)$\uff08\u5411\u4e0a\uff09\u8fd9\u6bb5\u8ddd\u79bb\uff0c\u4e00\u4e2a\u70b9$x$\u80fd\u88ab\u89c2\u6d4b\u5230\u5f53\u4e14\u4ec5\u5f53$D-(dep[x]-dep[lca(S_i,T_i)])=w[x]$\n\n\u79fb\u9879\u5f97\uff0c$D+dep[lca(S_i,T_i)]=w[x]+dep[x]$\n\n\u5bf9\u4e8e$lca(S_i,T_i)\\rightarrow T_i$\uff08\u5411\u4e0b\uff09\u7684\u8def\u5f84\u4e0a\u7684$x$\uff0c\u540c\u7406\u6709$D-dep[lca(S_i,T_i)]=w[x]-dep[x]$\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u94fe\u4e0a\u5bf9\u6bcf\u4e2a\u6743\u503c\u5927\u529b\u5dee\u5206\uff0c\u7136\u540e\u9898\u89e3\u7b2c\u4e00\u7bc7\u7684\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5dee\u5206\u6211\u6ca1\u770b\u61c2\u2026\u2026\n\n\u4e8e\u662f\u6211\u5c31\u5bf9\u6bcf\u4e2a\u70b9\u5f00\u4e24\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5206\u522b\u7ef4\u62a4\u5411\u4e0a/\u5411\u4e0b\u7684\u6bcf\u4e2a\u5dee\u5206\u503c\u7684\u4e2a\u6570\uff0c\u8f6c\u79fb\u5927\u529b\u7ebf\u6bb5\u6811\u5408\u5e76\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define N 300005\n#define ll long long\n#define db double\n#define For(i,x,y) for(int i=(x);i<=(y);++i)\n#define Rof(i,x,y) for(int i=(x);i>=(y);--i)\n#define Edge(x) for(int i=head[x];i;i=e[i].nxt)\n#define lson l,mid,o<<1\n#define rson mid+1,r,o<<1|1\n#define mset(x,y) memset(x,y,sizeof(y))\n#define mcpy(x,y) memcpy(x,y,sizeof(x))\n#define p_b push_back\nusing namespace std;\nint sz[N],dep[N],son[N],top[N],dfn[N],ans[N],_,cnt,tot,head[N],rt[N][2],fa[N],n,w[N];\nstruct ed{ int v,nxt; }e[N<<1];\nstruct qwq{ int ls,rs,num; }t[N*50];\nvoid add(int u,int v){\n\te[++tot]=(ed){v,head[u]},head[u]=tot;\n\te[++tot]=(ed){u,head[v]},head[v]=tot;\n}\nvoid rd(int &x){\n\tx=0;char c=getchar();\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c>='0' && c<='9') x=x*10+c-'0',c=getchar();\n}\nvoid dfs1(int x,int f){\n\tsz[x]=1,dep[x]=dep[f]+1,fa[x]=f;\n\tEdge(x)\n\t\tif(!sz[e[i].v]){ dfs1(e[i].v,x); if(sz[son[x]]<sz[e[i].v]) son[x]=e[i].v;sz[x]+=sz[e[i].v]; }\n}\nvoid dfs2(int x,int s){\n\ttop[x]=s,dfn[x]=++_;\n\tif(!son[x]) return;\n\tdfs2(son[x],s);\n\tEdge(x) if(!dfn[e[i].v]) dfs2(e[i].v,e[i].v);\n}\nint lca(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y]) return x;\n\telse return y;\n}\nvoid ins(int &o,int l,int r,int x,int y){\n\tif(!o) o=++cnt;t[o].num+=y;\n\tif(l==r){ return; }\n\tint mid=(l+r)>>1;\n\tif(x<=mid) ins(t[o].ls,l,mid,x,y);\n\telse ins(t[o].rs,mid+1,r,x,y);\n}\nvoid mrg(int &o,int x,int y){\n\tif(!x || !y){ o=x+y;return; }\n\tif(!o) o=++cnt;\n\tt[o].num=t[x].num+t[y].num;\n\tmrg(t[o].ls,t[x].ls,t[y].ls);\n\tmrg(t[o].rs,t[x].rs,t[y].rs);\n}\nint qry(int o,int l,int r,int x){\n\tif(l==r) return t[o].num;\n\tint mid=(l+r)>>1;\n\tif(x<=mid) return qry(t[o].ls,l,mid,x);\n\telse return qry(t[o].rs,mid+1,r,x);\n}\nvoid dfs3(int x){\n\tEdge(x) if(fa[x]!=e[i].v){\n\t\tdfs3(e[i].v);\n\t\tmrg(rt[x][0],rt[x][0],rt[e[i].v][0]);\n\t\tmrg(rt[x][1],rt[x][1],rt[e[i].v][1]);\n\t}\n\tans[x]=qry(rt[x][0],-n,2*n,w[x]+dep[x])+qry(rt[x][1],-n,2*n,w[x]-dep[x]);\n}\nint main(){\n//\tfreopen(\"testdata(1).in\",\"r\",stdin);\n//\tfreopen(\"qwq.out\",\"w\",stdout);\n\tint m,u,v;rd(n),rd(m);\n\tFor(i,1,n-1)\n\t\trd(u),rd(v),add(u,v);\n\tFor(i,1,n) scanf(\"%d\",&w[i]);\n\tdfs1(1,0),dfs2(1,1);\n\tFor(i,1,m){\n\t\trd(u),rd(v);\n\t\tint z=lca(u,v),dis=dep[u]-dep[z];\n\t\tins(rt[u][0],-n,2*n,dis+dep[z],1);\n\t\tins(rt[fa[z]][0],-n,2*n,dis+dep[z],-1);\t\t\t \n\t\tins(rt[v][1],-n,2*n,dis-dep[z],1);\n\t\tins(rt[z][1],-n,2*n,dis-dep[z],-1);\n\t}\n\tdfs3(1);\n\tFor(i,1,n) printf(\"%d \",ans[i]);\n}\n```\n",
        "postTime": 1571552066,
        "uid": 240351,
        "name": "CHU2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "```cpp\n```cpp\n/*\n\u8fd9\u9053\u9898\u7684\u5927\u6982\u601d\u8def\u5c31\u662f\u6709\u4e24\u6bb5 \uff0c \u7b2c\u4e00\u6bb5d[Si] = w[x]+d[x]\n\u7b2c\u4e8c\u6bb5d[Si] - 2 * d[lca(Si,Ti)] = w[x] - d[x]\n\u8bbe A\u7c7b\u6570 \u5c31\u662f\u76f8\u5f53\u4e8e\u5728d[si]\u5904\u51fa\u73b0\u4e86\u4e00\u4e2a\u7269\u54c1\u5728lca(S , T\uff09\u51fa\u6d88\u5931\n\u8bbe B\u7c7b\u6570 d[Si] - 2 * d[lca(Si,Ti)] \u5728  lca(S , T\uff09\u6d88\u5931\n\u4e5f\u5c31\u662f\u8981\u6c42\uff21\u7c7b\u6570\u52a0\u4e0a\uff22\u7c7b\u6570\u7684\u548c\n\u4e4b\u540e\u6211\u4eec\u7edf\u8ba1\u5b50\u6811\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86 \uff0c \u4e5f\u5c31\u662f\u8bf4\u8981\u7528\u6811\u4e0a\u5dee\u5206 \u6216\u662f \u7ebf\u6bb5\u6811\u548c\u5e76\n\u4f46\u662f\u6211\u4eec\u9009\u7528vector\uff0c\u56e0\u4e3a\u6811\u5256\u592a\u96be\u6253\uff08\u849f\u84bb\u4e0d\u4f1a\uff09\uff0c \u7ebf\u6bb5\u6811\u548c\u5e76\u70b8\u7a7a\u95f4\uff08\u849f\u84bb\u4e5f\u4e0d\u4f1a\uff09\n\u7136\u540e\u5177\u4f53\u600e\u4e48\u5b9e\u73b0\u5462?\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u5427\uff0c\uff08\u6309\u7167\u674e\u715c\u4e1c\u8bf4\u7684\uff09 \u5728\u8fdb\u6765\u7684\u65f6\u5019\u5148\u8bb0\u4e00\u4e2acnt \u3002\u3002\u3002 \u770b\u4ee3\u7801\u5427 \n\u90a3\u662f\u4e0d\u662f\u53ef\u4ee5\u5f00\u4e00\u4e2acnt\u6570\u7ec4\u6765\u7edf\u8ba1\u4e00\u4e0b\u5b50\u6811\u4e2d\u7b49\u4e8e\u53f3\u5f0f\u7684\u51fa\u53d1\u70b9\u548c\u7ed3\u675f\u70b9\u7684\u4e2a\u6570\u5462\uff1f \n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u90a3\u5c31\u662f\u4e3a\u4ec0\u4e48\u6c42A\u7c7b\u6811\u548cB\u7c7b\u6570\u8fd9\u4e2a\u662f\u5408\u6cd5\u7684\n\uff1a\u9996\u5148\u770b\u7b2c\u4e00\u70b9  d[Si] = w[x]+d[x]\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u6709\u5f53w[x] + d[x]\u7684\u6df1\u5ea6\u7b49\u4e8ed[Si]\u65f6\n\u624d\u80fd\u4ea7\u751f\u8d21\u732e \uff0c\u6240\u4ee5\u4ecesi\u8fd9\u4e2a\u70b9\u51fa\u53d1\u90fd\u53ef\u4ee5\u4ea7\u751f\u8d21\u732e\n\u4e4b\u540e\u4e3a\u4ec0\u4e48\u7b2c\u4e8c\u4e2a\u662f\u5bf9\u7684 \uff0c \u6211\u4eec\u5148\u60f3\u4e24\u4e2a\u5b50\u8282\u70b9 \uff0c  \n*/\n```\n![](https://img-blog.csdnimg.cn/20181030100032675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FfZm9yZXZlcl9kcmVhbQ==,size_16,color_FFFFFF,t_70)```cpp\n\u4e4b\u540e\u5462 \uff0c \u7528len \u8868\u793a\u4ed6\u4eec\u4e4b\u95f4\u7684\u957f\u5ea6\uff0c\u73b0\u5728\u5427s\u70b9\u5bf9\u79f0\u8fc7\u53bb \uff0c\u73b0\u5728deep[t] - len\u8868\u793a\u7684\n\u6b63\u597d\u5c31\u662fS'\u7684\u6df1\u5ea6 \uff0c \u7136\u540e\u53f3\u8fb9\u8868\u793a\u7684\u4e5f\u662f\u8fd9\u4e2a\u610f\u601d \uff0c \u610f\u4e49\u5c31\u662f\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1  \uff0c \u7ecf\u8fc7\nW[i]\u7684\u65f6\u95f4\u5c31\u80fd\u5230\u8fbe i \u70b9 \u88ab\u770b\u89c1 \uff0c \u7136\u540e\u778e\u9e21\u5df4\u641e\uff1f\uff1f \n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing  namespace std;\nconst int N = 1000029;\nint head[N] , Next[N] ,  f[N][20] ,ver[N];\nint tot;\nvector<int>a1[N] , a2[N] , b1[N] , b2[N];\nint ans[N];\nint n  , m ;\nint w[N];\nint sum1[N] , sum2[N];\nvoid add(int x ,int y){\n\ttot ++;\n\tNext[tot] = head[x];\n\thead[x] = tot;\n\tver[tot] = y;\n}  \nint d[N];\nvoid dfs(int x , int fa){\n\tf[x][0] = fa;\n\tfor(int i = 1; i < 20 ; i ++){\n\t\tf[x][i] = f[f[x][i - 1]][i - 1];\n\t}\n\tfor(int i = head[x]; i ; i = Next[i]){\n\tint y = ver[i];\n\tif(y == fa)continue;\n\td[y] = d[x] + 1;\n\tdfs(y , x);\n\t}\n}\nint lca(int x , int y){\n\tif(d[x] < d[y]){\n\t\tswap(x , y);\n\t}\n\tint dd = d[x] - d[y];\n\tfor(int i = 0 ; i < 20  ; i ++){\n\t\tif(dd >> i & 1){\n\t\t\tx = f[x][i];\n\t\t}\n\t}\n\tif(x == y){\n\t\treturn x;\n\t}\n\tfor(int i = 19 ; i >= 0 ; i --){\n\t\tif(f[x][i] != f[y][i]){\n\t\t\tx = f[x][i];\n\t\t\ty = f[y][i];\n\t\t}\n\t}\n\treturn f[x][0];\n}\nint tmp1 , tmp2;\nvoid  missw(int x){\nint tmp1=sum1[d[x]+w[x]],tmp2=sum2[w[x] - d[x] + n];\n\tfor(int i = head[x] ; i ; i = Next[i]){\n\t    int  y = ver[i];\n\t   if(y == f[x][0])continue;\n\t   missw(y);\n}  //\u7c7b\u4f3c\u4e8e\u6811\u4e0a\u5dee\u5206 \n\t   for(int i = 0 ; i < a1[x].size() ; i ++){\n\t   \t++sum1[a1[x][i]];\n\t   }\n\t   for(int i = 0 ; i < a2[x].size() ; i ++){\n\t   \t--sum1[a2[x][i]];\n\t   }\n\t   for(int i = 0; i < b1[x].size() ; i ++){\n\t   \t++sum2[b1[x][i]+n];\n\t   }\n\t   for(int i = 0 ; i < b2[x].size() ; i ++){\n\t   \t--sum2[b2[x][i]+n];\n\t   }\n\t   ans[x] += sum1[d[x] + w[x]] + sum2[w[x] - d[x] + n] - tmp1 - tmp2;\n}\nsigned main () {\n       scanf(\"%lld%lld\" , &n , &m);\n\t   for(int i = 1; i < n ; i ++){\n\t   \tint x ,y;\n\t   \tscanf(\"%lld%lld\",&x , &y);\n\t   \tadd(x , y);\n\t   \tadd(y , x);\n\t   }\n\t   for(int i = 1 ; i <= n ; i ++){\n\t   \tscanf(\"%lld\" , &w[i]);\n\t   }\n\t   dfs(1 , 0);\n\t   for(int i = 1; i <= m ; i ++){\n\t   \t  int s , t;\n\t   \t  scanf(\"%lld%lld\" , &s , &t);\n\t   \t  int LCA = lca(s , t);\n\t   \t  int wjz = d[s] - 2 * d[LCA];\n\t   \t // cout << LCA << endl;\n\t\t\t //cout << wjz << endl;\n\t\t  a1[s].push_back(d[s]); \n\t   \t  a2[f[LCA][0]].push_back(d[s]);\n\t   \t  b1[t].push_back(wjz);\n\t   \t  b2[LCA].push_back(wjz);\n\t   //\u8bb0\u5f55\u51fa\u73b0\u548c\u6d88\u5931\u7684\u4f4d\u7f6e\u53ed \n\t   }\n\t   missw(1);\n\t   for(int i = 1; i <= n ; i ++){\n\t   \tcout << ans[i] << \" \";\n\t   }\t\n}\n\n\n```\n",
        "postTime": 1571216807,
        "uid": 155958,
        "name": "wmjlzw1314",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u672c\u6587\u540c\u6b65\u53d1\u8868\u4e8e\u6211\u7684\u535a\u5ba2\uff1a[**\u8fd9\u91cc\u8fd9\u91cc**](https://www.cnblogs.com/wo-shi-zhen-de-cai/p/11319754.html)\n\n\u771f$\u2122$\u662f$NOIP$\u8fd1\u51e0\u5e74\u4e2d\u6700\u96be\u7684\u4e00\u9053\u2026\u2026\n\n\u5148\u770b\u4e00\u4e0b\u90e8\u5206\u5206\uff0c\u6709\u8d77\u70b9\u7ec8\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5206\u503c\uff0c\u60f3\u5230\u62c6\u8def\u5f84\uff0c\u5bf9\u4e8e\u8def\u5f84$(S,T)$\uff0c\u62c6\u4e3a$(S,LCA)$\u548c$(T,LCA)$\u3002\n\n\u9996\u5148\u660e\u786e\u4e00\u70b9\uff0c\u53ef\u80fd\u6709\u591a\u6761\u8def\u5f84\u6709\u76f8\u540c\u7684\u8d77\u70b9\uff0c$LCA$\u6216\u7ec8\u70b9\u3002\n\n\u5148\u8003\u8651$(S,LCA)$\u8fd9\u4e00\u534a\uff0c\u4e00\u6761\u8def\u5f84\u53ea\u4f1a\u5bf9\u8def\u5f84\u4e0a\u7684\u70b9\u4ea7\u751f\u8d21\u732e\uff0c\u4e0d\u59a8\u8bbe\u6709\u4e00\u4e2a\u70b9$x$\u5728\u8fd9\u4e00\u534a\u4e0a\u3002\n\n\u5219\u8fd9\u6761\u8def\u5f84\u5bf9$x$\u6709\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3$d[u]=w[x]+d[x]$\u65f6\uff0c\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff08\u89c2\u5bdf\u5458\uff09\uff0c$w[x]+d[x]$\u4e3a\u5b9a\u503c\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9$x$\uff0c\u4e00\u6761\u8def\u5f84\u5bf9\u5176\u6709\u8d21\u732e\u5f53\u4e14\u4ec5\u5f53\u8fd9\u6761\u8def\u5f84\u7684$LCA$\u4e3a$x$\u6216\u8fd9\u6761\u8def\u5f84\u4ec5\u6709\u4e00\u4e2a\u7aef\u70b9\u5728$x$\u7684\u5b50\u6811\u4e2d\uff08\u8fd9\u6837\u7684\u8def\u5f84$LCA$\u5728$x$\u4e4b\u4e0a\uff09\n\n![](https://s2.ax1x.com/2019/08/08/eogbvR.png)\n\n\u5982\u56fe\uff0c\u84dd\u8272\u548c\u7eff\u8272\u7684\u8def\u5f84\u4f1a\u4ea7\u751f\u8d21\u732e\uff0c\u800c\u7ea2\u8272\u5219\u4e0d\u4f1a\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5$Dfs$\u7edf\u8ba1\u7b54\u6848\uff0c\u5373\u67e5\u770b\u6709\u591a\u5c11\u4e2a\u5728$x$\u7684\u5b50\u6811\u4e2d\u7684\u8def\u5f84\u8d77\u70b9\u7684$d[u]$\u7b49\u4e8e$w[x]+d[x]$\uff0c\u8fd9\u6837\u7edf\u8ba1\u51fa\u7684\u7b54\u6848\u53ea\u4f1a\u591a\u4e0d\u4f1a\u5c11\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u53bb\u6389\u591a\u4f59\u7684\u7b54\u6848\u3002\n\n\u5148\u770b\u4e00\u4e0b\u5b9e\u73b0\u8fc7\u7a0b\uff0c\u5148\u5f00\u4e00\u4e2a$Bag[]$\u8bb0\u5f55\u50cf$d[u]$\u8fd9\u6837\u7684\u503c\uff0c\u5728$x$\u7684\u5b50\u6811\u4e2d\u5904\u7406\u5b8c\u4e4b\u540e\u53ea\u8981\u63d0\u51fa$Bag[w[x]+d[x]]$\u7684\u7b54\u6848\u5373\u53ef\uff0c\u4f46\u8fd9\u6837\u6211\u4eec\u4f1a\u53d1\u73b0\u4f1a\u7edf\u8ba1\u8fdb\u8d77\u70b9\u6839\u672c\u4e0d\u662f$x$\u5b50\u6811\u4e2d\u7684\u8def\u5f84\uff0c\u56e0\u6b64\u6211\u4eec\u5148\u8bb0\u5f55\u4e0b\u5230$x$\u65f6$Bag[w[x]+d[x]]$\u7684\u503c\uff0c\u5728\u5904\u7406\u5b8c\u5b50\u6811\u4e4b\u540e\u518d\u5c06$Bag[w[x]+d[x]]$\u7684\u503c\u548c\u539f\u503c\u76f8\u51cf\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd8\u6709\u50cf\u7ea2\u8272\u8fd9\u6837\u7684\u8def\u5f84\u4f1a\u88ab\u8003\u8651\uff0c\u6240\u4ee5\u5728\u8dd1$x$\u7684\u5b50\u6811\u4e2d\u7684\u8282\u70b9\uff08\u8bbe\u4e3a$y$\uff09\u65f6\uff0c\u6211\u4eec\u5c06\u4ee5$y$\u4e3a$LCA$\u7684\u8def\u5f84\u4ece\u6876\u4e2d\u51cf\u53bb\u5373\u53ef\uff0c\u8fd9\u6837\u6211\u4eec\u7edf\u8ba1\u5230\u7684\u7b54\u6848\u5c31\u6ca1\u6709\u591a\u4f59\u7684\u4e86\u3002\n\n\u540c\u6837\uff0c\u8003\u8651$(T,LCA)$\u65f6\uff0c\u6211\u4eec\u8981\u6ee1\u8db3\u7684\u5f0f\u5b50\u4e3a\uff1a$w[x]-d[x]=d[u]-2*d[LCA]$\u5373\u53ef\u3002\uff08\u6ce8\u610f\u8fd9\u91cc\u53ef\u80fd\u51fa\u73b0\u8d1f\u6570\uff0c\u6211\u4eec\u52a0\u4e0a$N_{max}$\uff09\u5373\u53ef\u3002\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u5728\u8ba1\u7b97$x$\u7684\u7b54\u6848\u65f6\uff0c\u4e0d\u8981\u5fd8\u4e86\u4ee5$x$\u4e3a\u8def\u5f84\u8d77\u70b9\u6216\u7ec8\u70b9\u65f6\u53ef\u4ee5\u5bf9\u4e0a\u9762\u4ea7\u751f\u8d21\u732e\uff0c\u8981\u540c\u65f6\u66f4\u65b0$Bac$\u4e2d\u7684\u503c\u3002\n\n\u505a\u5b8c\u4e4b\u540e\uff0c\u6240\u6709\u8def\u5f84$LCA$\u7684\u70b9\u7b54\u6848\u4f1a\u88ab\u7b97\u4e24\u6b21\uff0c\u8981\u51cf\u6389\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\ninline int read()\n{\n    int f=1,w=0;char x=0;\n    while(x<'0'||x>'9') {if(x=='-') f=-1; x=getchar();}\n    while(x!=EOF&&x>='0'&&x<='9') {w=(w<<3)+(w<<1)+(x^48);x=getchar();}\n    return w*f;\n}\nconst int N=300010,M=1000010;\nint n,m,num_edge,MD;\nint las[N][21],ans[N],boki[N];\nvector<int> Lex[N],End[N],LCA[N];\nint head[N],Dep[N],W[N],Bag[M];\nstruct Edge{int next,to;} edge[N<<1];\nstruct Group{int from,to,lca;} Ply[N];\ninline void Add(int from,int to)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].to=to;\n\thead[from]=num_edge;\n}\ninline void Dfs(int pos,int fa)\n{\n\tlas[pos][0]=fa;Dep[pos]=Dep[fa]+1;\n\tfor(int i=0;i<20;i++) las[pos][i+1]=las[las[pos][i]][i];\n\tfor(int i=head[pos];i;i=edge[i].next)\n\t\tif(edge[i].to!=fa) Dfs(edge[i].to,pos);\n}\ninline int LCA_Ask(int u,int v)\n{\n\tif(Dep[u]<Dep[v]) swap(u,v);\n\tfor(int i=20;i>=0;i--) if(Dep[v]<=Dep[u]-(1<<i)) u=las[u][i];\n\tif(u==v) return u;\n\tfor(int i=20;i>=0;i--) if(las[u][i]!=las[v][i]) u=las[u][i],v=las[v][i];\n\treturn las[u][0];\n}\ninline void Dfs_For_From(int pos,int fa)//\u7edf\u8ba1\u8def\u5f84(S,LCA)\u7684\u7b54\u6848\n{\n\tint Num=Dep[pos]+W[pos],Now;if(Num<=MD) Now=Bag[Num];\n\tfor(int i=head[pos];i;i=edge[i].next)\n\t\tif(edge[i].to!=fa) Dfs_For_From(edge[i].to,pos);\n\tBag[Dep[pos]]+=boki[pos];//\u4ee5pos\u4e3a\u8d77\u70b9\u7684\u8def\u5f84\u5bf9\u4e0a\u9762\u7684\u70b9\u4ea7\u751f\u7684\u8d21\u732e\n    if(Num<=MD) ans[pos]=Bag[Num]-Now;\n\tfor(int i=0;i<(int)Lex[pos].size();i++) Bag[Dep[Lex[pos][i]]]--;//\u4ee5pos\u4e3aLCA\u7684\u8def\u5f84\u5bf9\u4e0a\u9762\u7684\u70b9\u4e0d\u4f1a\u5728\u4ea7\u751f\u8d21\u732e\u4e86\n}\ninline void Dfs_For_To(int pos,int fa)//\u7edf\u8ba1\u8def\u5f84(LCA,T)\u7684\u7b54\u6848\n{ \n\tint Num=Dep[pos]-W[pos]+N,Now;Now=Bag[Num];\n\tfor(int i=head[pos];i;i=edge[i].next)\n\t\tif(edge[i].to!=fa) Dfs_For_To(edge[i].to,pos);\n\tfor(int i=0;i<(int)End[pos].size();i++) Bag[N+End[pos][i]]++;//\u4ee5pos\u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u5bf9\u4e0a\u9762\u7684\u70b9\u4ea7\u751f\u7684\u8d21\u732e\n\tans[pos]+=Bag[Num]-Now;\n\tfor(int i=0;i<(int)LCA[pos].size();i++) Bag[N+LCA[pos][i]]--;//\u4ee5pos\u4e3aLCA\u7684\u8def\u5f84\u5bf9\u4e0a\u9762\u7684\u70b9\u4e0d\u4f1a\u5728\u4ea7\u751f\u8d21\u732e\u4e86\n}\nmain(){\n#ifndef ONLINE_JUDGE\n    freopen(\"A.in\",\"r\",stdin);//Ans=2 0 0 1 1\n\t//freopen(\"B.in\",\"r\",stdin);//Ans=1 2 1 0 1\n\tfreopen(\"A.out\",\"w\",stdout);\n#endif\n\tn=read(),m=read();MD=-1;\n\tfor(int i=1,u,v;i<n;i++)\n\t\tu=read(),v=read(),Add(u,v),Add(v,u);\n\tfor(int i=1;i<=n;i++) W[i]=read();Dfs(1,0);\n\tfor(int i=1;i<=n;i++) MD=max(MD,Dep[i]);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tPly[i].from=read(),Ply[i].to=read();boki[Ply[i].from]++;\n\t\tPly[i].lca=LCA_Ask(Ply[i].from,Ply[i].to);\n\t\tLex[Ply[i].lca].push_back(Ply[i].from);\n\t\tEnd[Ply[i].to].push_back(2*Dep[Ply[i].lca]-Dep[Ply[i].from]);\n\t\tLCA[Ply[i].lca].push_back(2*Dep[Ply[i].lca]-Dep[Ply[i].from]);\n\t}\n\tDfs_For_From(1,0);memset(Bag,0,sizeof(Bag));Dfs_For_To(1,0);\n\tfor(int i=1;i<=m;i++)\n\t\tif(Dep[Ply[i].from]-Dep[Ply[i].lca]==W[Ply[i].lca])\n\t\t\tans[Ply[i].lca]--;//\u51cf\u53bb\u8def\u5f84LCA\u7b54\u6848\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\n\tfor(int i=1;i<=n;i++) printf(\"%lld \",ans[i]);\n}\n```\n\n\n",
        "postTime": 1565232057,
        "uid": 92496,
        "name": "\u6587\u6b66\u6b66\u667a\u969c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c$QwQ$](https://ctz45562.github.io/2019/02/26/%E9%A2%98%E8%A7%A3-%E6%B4%9B%E8%B0%B7-P1600-%E3%80%90%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5%E3%80%91/)\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1600)\n\n\u6765\u4e00\u79cd$O(nlogn)$\u7684~~\u6bd2\u7624~~\u505a\u6cd5\u3002\n\n\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u4e3b\u89d2\uff1a$dsu\\ on\\ tree$ \u3002\u5176\u539f\u7406\u662f\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u5b83\u652f\u6301$O(nlogn)$\u65e0\u4fee\u6539\u5b50\u6811\u4fe1\u606f\u7edf\u8ba1\u3002\n\n\u5b9e\u73b0\uff1a\u6811\u5256\u5212\u5206\u51fa\u8f7b\u91cd\u513f\u5b50\u3002\u5bf9\u4e8e\u67d0\u4e2a\u8282\u70b9\uff0c\u5148\u9012\u5f52\u5904\u7406\u8f7b\u513f\u5b50\uff0c\u5e76\u6e05\u9664\u8f7b\u5b50\u6811\u7684\u5f71\u54cd\u3002\u7136\u540e\u5904\u7406\u91cd\u513f\u5b50\uff0c\u4fdd\u7559\u91cd\u5b50\u6811\u7684\u5f71\u54cd\u3002\u518d\u6b21\u7edf\u8ba1\u8f7b\u5b50\u6811\u7684\u5f71\u54cd\uff0c\u5c31\u80fd\u5f97\u5230\u8be5\u70b9\u6574\u4e2a\u5b50\u6811\u7684\u4fe1\u606f\u3002\n\n\u4f2a\u4ee3\u7801\uff1a\n\n```cpp\nvoid dfs(int x,bool remain){\n    //remain\u8868\u793a\u662f\u5426\u4fdd\u7559\u8be5\u70b9\u5b50\u6811\u7684\u4fe1\u606f\n    int f=fa[x],s=son[x];//s\u4e3a\u91cd\u513f\u5b50\n\tfor(int i=h[x];i;i=e[i].pre){\n        int y=e[i].to;\n\t\tif(x!=f&&x!=s)dfs(y,0);//\u9012\u5f52\u5904\u7406\u8f7b\u513f\u5b50\uff0c\u5220\u9664\u4fe1\u606f\n    }\n    if(s)dfs(s,1);//\u9012\u5f52\u5904\u7406\u91cd\u513f\u5b50\u5e76\u4fdd\u7559\u4fe1\u606f\n    count(x);//\u8fd9\u91cc\u7684count\u662f\u7edf\u8ba1x\u7684\u8f7b\u5b50\u6811\u7684\u4fe1\u606f\n    ans[x]=...;//\u8bb0\u5f55\u7b54\u6848\n    if(!remain)clear(x);//\u6e05\u9664x\u6574\u4e2a\u5b50\u6811\u7684\u5f71\u54cd\n}\n```\n\n\u590d\u6742\u5ea6\uff1a\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u88ab\u5256\u6210\u4e86\u6700\u591a$logn$\u6761\u91cd\u94fe\uff0c\u800c\u5176\u4e2d\u6bcf\u4e2a\u8f7b\u8fb9\u90fd\u4f1a\u4f7f\u8be5\u70b9\u88ab\u7528\u81f3\u591a$O(n)$\u7684\u65f6\u95f4\u7edf\u8ba1\u4e00\u6b21\uff0c\u53ea\u8981\u5355\u70b9\u7684\u4fe1\u606f\u7edf\u8ba1\u4e0e\u5220\u9664\u662f$O(1)$\u7684\uff0c\u603b\u590d\u6742\u5ea6\u5c31\u4e3a$O(nlogn)$\n\n\u53c2\u8003\uff1a\n\nhttp://www.cnblogs.com/zzqsblog/p/6146916.html\n\nhttps://www.cnblogs.com/zcysky/p/6822395.html\n\n\u56de\u5230\u8fd9\u4e2a\u9898\u4e0a\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u73a9\u5bb6$(x->y)$\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u534a\uff1a$(x->lca(x,y))+(lca(x,y)->y)$\uff0c\u56e0\u4e3a\u524d\u8005\u662f\u5f80\u4e0a\u8dd1\uff0c\u540e\u8005\u662f\u5f80\u4e0b\u8dd1\uff0c\u5206\u5f00\u597d\u5904\u7406\u3002\n\n\u653e\u4e2a\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/52786.png )\n\n\u7ea2\u8272\u7684\u6570\u5b57\u662f\u8dd1\u5230\u8be5\u70b9\u7684\u65f6\u95f4\u3002\n\n\uff08\u4ee5\u4e0b\u7528$deep$\u4ee3\u8868\u70b9\u7684\u6df1\u5ea6\uff09\n\n\u5148\u5904\u7406$(x->lca(x,y))$\n\n\u5bf9\u4e8e\u5f80\u4e0a\u8dd1\u7684\u8def\u5f84\u6765\u8bf4\uff0c\u53ea\u8981\u6ee1\u8db3$deep[x]-deep[i]=w[i]$\uff0c\u4e14\u8be5\u8def\u5f84\u80fd\u8986\u76d6\u5230$i$\uff0c$i$\u5c31\u80fd\u89c2\u6d4b\u5230\u8be5\u540d\u73a9\u5bb6\u3002\n\n\u5373$deep[i]+w[i]=deep[x]$\n\n\u518d\u5904\u7406$(lca(x,y)->y)$\n\n\u5982\u56fe\u5bb9\u6613\u53d1\u73b0\uff1a\u4ece\u70b9$y$\u5f80\u4e0a\u8df3\uff0c\u6bcf\u8df3\u4e00\u6b65\uff0c\u65f6\u95f4\u5c31\u4f1a$-1$\uff0c\u800c\u4e00\u5f00\u59cb\u65f6\u95f4\u4e3a$dis(x,y)$\u3002\n\n\u5219\u4e00\u4e2a\u70b9$i$\u80fd\u89c2\u6d4b\u5230$y$\u7684\u6761\u4ef6\u662f\uff1a\n\n$deep[y]-deep[i]=dis(x,y)-w[i]$\u4e14\u8be5\u8def\u5f84\u4e5f\u8981\u8986\u76d6$i$\u3002\n\n\u5176\u4e2d$dis(x,y)=deep[x]+deep[y]-2*deep[lca(x,y)]$\n\n\u79fb\u9879\u6574\u7406\u5f97\uff1a\n\n$deep[x]-2*deep[lca(x,y)]=w[i]-deep[i]$\n\n\u7efc\u4e0a\uff0c\u8fd0\u7528\u6811\u4e0a\u5dee\u5206\u7684\u601d\u60f3\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u73a9\u5bb6$(x->y)$\uff0c\u7528\u4e24\u4e2a\u6570\u7ec4$up$\u548c$down$\uff1a\n\n- \u5c06\u70b9$x$\u7684$up$\u63d2\u5165\u4e00\u4e2a$deep[x]$\u3002\n\n- \u5c06\u70b9$y$\u7684$down$\u63d2\u5165\u4e00\u4e2a$deep[x]-2*deep[lca(x,y)]$\u3002\n\n- $lca(x,y)$\u4f1a\u7edf\u8ba1\u4e24\u904d\u8be5\u8def\u5f84\uff0c\u5728$up$\u4e2d\u6253\u4e0a\u5220\u9664$deep[x]$\u7684\u6807\u8bb0\n\n- \u4e3a\u4e86\u4fdd\u8bc1\u8def\u5f84\u4e0d\u8986\u76d6\u7684\u70b9\u4e0d\u4f1a\u7edf\u8ba1\uff0c\u5c06$fa[lca(x,y)$]\u6253\u4e0a\u5220\u9664$deep[x]-2*deep[lca(x,y)]$\u7684\u6807\u8bb0\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9$i$\uff0c\u7edf\u8ba1\u5176\u5b50\u6811\u7684$up$\u3001$down$\u6240\u6709\u63d2\u5165\u8fc7\u7684\u6570\uff0c\u7b54\u6848\u5373\u4e3a$up$\u4e2d$(deep[i]+w[i])$\u7684\u6570\u91cf\u52a0\u4e0a$down$\u4e2d$(w[i]-deep[i])$\u7684\u6570\u91cf\u3002\n\n\u600e\u4e48\u7edf\u8ba1\u5462\uff1f$dsu\\ on\\ tree$\u5c31\u51fa\u573a\u4e86\uff01\u76f4\u63a5\u7edf\u8ba1\u5c31\u597d\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6bcf\u4f4d\u73a9\u5bb6\u6700\u591a\u5f71\u54cd\u56db\u4e2a\u70b9\uff0c\u5747\u644a\u4e0b\u6765\u5355\u70b9\u7edf\u8ba1\u8fd8\u662f$O(1)$\u7684\uff0c\u603b\u590d\u6742\u5ea6$O(nlogn)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <vector>\n\n#define maxn 300005\n#define inf 0x3f3f3f\n#define pn putchar('\\n')\n#define px(x) putchar(x)\n#define ps putchar(' ')\n#define pd puts(\"======================\")\n#define pj puts(\"++++++++++++++++++++++\")\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\ntemplate<typename T>\ninline T read(){\n\tT x=0;\n\tint y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\nint h[maxn],w[maxn],top[maxn],deep[maxn],fa[maxn],siz[maxn],son[maxn],num,n,m,ans[maxn];\nbool vis[maxn];\nint upi[maxn];\nvector<int>doi[maxn],dod[maxn],upd[maxn];\n//upi\uff1aup insert\uff0c\u5411\u4e0a\u8def\u5f84\u7684\u63d2\u5165\u3002\u56e0\u4e3a\u8be5\u63d2\u5165\u53ea\u4f1a\u63d2\u5165\u67d0\u4e2a\u70b9\u7684deep\uff0c\u6240\u4ee5\u538b\u6210\u4e86\u666e\u901a\u7684\u6570\u7ec4\n//upd\uff1aup delete\uff0c\u5411\u4e0a\u8def\u5f84\u7684\u5220\u9664\n//doi\u3001dod\u540c\u7406\nstruct edge{\n\tint pre,to;\n}e[maxn<<1];\ninline void add(int from,int to){\n\te[++num].pre=h[from],h[from]=num,e[num].to=to;\n}\nstruct Tree_Chain_Split{\n\tvoid dfs1(int node=1){\n\t\tsiz[node]=1;\n\t\tfor(register int i=h[node];i;i=e[i].pre){\n\t\t\tint x=e[i].to;\n\t\t\tif(!siz[x]){\n\t\t\t\tfa[x]=node,deep[x]=deep[node]+1;\n\t\t\t\tdfs1(x);\n\t\t\t\tif(siz[x]>siz[son[node]])son[node]=x;\n\t\t\t\tsiz[node]+=siz[x];\t\n\t\t\t}\n\t\t}\n\t}\n\tvoid dfs2(int node=1){\n\t\tvis[node]=1;\n\t\tif(son[node]){\n\t\t\ttop[son[node]]=top[node];\n\t\t\tdfs2(son[node]);\n\t\t\tfor(register int i=h[node];i;i=e[i].pre){\n\t\t\t\tint x=e[i].to;\n\t\t\t\tif(!vis[x]){\n\t\t\t\t\ttop[x]=x;\n\t\t\t\t\tdfs2(x);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint lca(int x,int y){\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(deep[top[x]]<deep[top[y]])swap(x,y);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\treturn deep[x]<deep[y]?x:y;\n\t}\n}tcs;\n//\u6811\u94fe\u5256\u5206\uff0c\u987a\u4fbf\u7528\u7684\u6811\u5256\u7684lca\nint upcnt[maxn],CNT[maxn<<1],*downcnt=&CNT[maxn];\n//upcnt\u662f\u5411\u4e0a\u8def\u5f84\u7edf\u8ba1\u6570\u7ec4\uff0cdowncnt\u53cd\u4e4b\u3002\u4e24\u79cd\u8def\u5f84\u7edf\u8ba1\u4f9d\u636e\u4e0d\u540c\uff0c\u6240\u4ee5\u5206\u5f00\n//\u56e0\u4e3aw[i]-deep[i]\u53ef\u80fd\u4e3a\u8d1f\u6570\uff0c\u6240\u4ee5\u7528\u4e86\u6307\u9488\u5c0f\u6280\u5de7\u4f7fdowncnt\u80fd\u4f7f\u7528\u8d1f\u6570\u4e0b\u6807\nbool in[maxn];\n//\u7528\u4e8edsu on tree\u7684\u6570\u7ec4\u3002\u6807\u8bb0\u4e0a\u7684\u70b9\u5728\u7edf\u8ba1\u5b50\u6811\u4fe1\u606f\u65f6\u4e0d\u4f1a\u8bbf\u95ee\u8be5\u70b9\u7684\u5b50\u6811\uff08\u89c1count\u51fd\u6570\uff09\nvoid count(int node){\n\tint f=fa[node];\n\tfor(register int i=h[node];i;i=e[i].pre){\n\t\tint x=e[i].to;\n\t\tif(x!=f&&!in[x])count(x);\n\t}\n\tupcnt[deep[node]]+=upi[node];\n\tfor(register int i=0;i<upd[node].size();++i)\n\t\t--upcnt[upd[node][i]];\n\tfor(register int i=0;i<doi[node].size();++i)\n\t\t++downcnt[doi[node][i]];\n\tfor(register int i=0;i<dod[node].size();++i)\n\t\t--downcnt[dod[node][i]];\n}//\u7edf\u8ba1\u4fe1\u606f\nvoid clear(int node){\n\tint f=fa[node];\n\tfor(register int i=h[node];i;i=e[i].pre){\n\t\tint x=e[i].to;\n\t\tif(x!=f)clear(x);\n\t}\n\tupcnt[deep[node]]-=upi[node];\n\tfor(register int i=0;i<upd[node].size();++i)\n\t\t++upcnt[upd[node][i]];\n\tfor(register int i=0;i<doi[node].size();++i)\n\t\t--downcnt[doi[node][i]];\n\tfor(register int i=0;i<dod[node].size();++i)\n\t\t++downcnt[dod[node][i]];\n}\nvoid dfs(int node=1,bool remain=0){\n\tint s=son[node],f=fa[node];\n\tif(s){\n\t\tfor(register int i=h[node];i;i=e[i].pre){\n\t\t\tint x=e[i].to;\n\t\t\tif(x!=s&&x!=f)dfs(x,0);\n\t\t}\n\t\tdfs(s,1);\n\t\tin[s]=1;//count\u65f6\u4e0d\u4f1a\u7edf\u8ba1\u4e0a\u5b83\u7684\u91cd\u5b50\u6811\n\t}\n\tcount(node);//\u7edf\u8ba1\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\n\tif(deep[node]+w[node]<=n)ans[node]=upcnt[deep[node]+w[node]];\n    //\u5224\u4e00\u4e0b\u4e0d\u80fd\u8d8a\u754c\n\tans[node]+=downcnt[w[node]-deep[node]];\n    //\u83b7\u53d6\u7b54\u6848\n\tin[s]=0;//\u4e00\u5b9a\u8981\u6e05\u6389\u6807\u8bb0\n\tif(!remain)clear(node);//\u6e05\u9664\u6574\u4e2a\u5b50\u6811\u7684\u4fe1\u606f\n}\nvoid init(){\n\twhile(m--){\n\t\tint a=read(),b=read(),l=tcs.lca(a,b);\n\t\t++upi[a];\n\t\tdoi[b].push_back(deep[a]-(deep[l]<<1));\n\t\tupd[l].push_back(deep[a]);\n\t\tdod[fa[l]].push_back(deep[a]-(deep[l]<<1));\n\t}\n}//\u8bfb\u5165\u6bcf\u540d\u73a9\u5bb6\u5e76\u5904\u7406\nint main(){\n\tn=read(),m=read();\n\tfor(register int i=1;i<n;++i){\n\t\tint a=read(),b=read();\n\t\tadd(a,b),add(b,a);\n\t}\n\tfor(register int i=1;i<=n;++i)\n\t\tw[i]=read();\n\ttcs.dfs1(),tcs.dfs2();\n\tinit(),dfs();\n\tfor(register int i=1;i<=n;++i)\n\t\tprintf(\"%d \",ans[i]);\n}\n\n```\n\n\u7801\u91cf\u786e\u5b9e\u6709\u70b9\u5927\u3002\u4e0d\u8fc7$dsu\\ on\\ tree$\u5728\u67d0\u4e9b\u9898\u4e2d\u8fd8\u662f\u5f88\u9ad8\u6548\u7684$QwQ$\u3002",
        "postTime": 1551172994,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\u6ca1\u600e\u4e48\u770b\u61c2\u6807\u7b97\uff0c\u778e\u626f\u4e00\u4e2a\u89e3\u6cd5\u3002\n\n\u597d\u50cf\u8fd8\u6ca1\u6709\u8fd9\u4e48\u505a\u7684\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u4f60\u7a0d\u5fae\u63a8\u4e00\u63a8\u7136\u540e\u79fb\u4e2a\u9879\u7136\u540e\u4f1a\u53d1\u73b0\u672c\u8d28\u662f\u4e0a\u7ed9\u5b9a\u4e00\u68f5\u6811\u4e0a\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743$wi$\uff0c\u8981\u6c42\u652f\u6301\u5728\u6811\u4e0a\u5c06\u67d0\u6761\u94fe\u4e0a\u6240\u6709\u70b9\u6743\u7b49\u4e8e\u67d0\u4e2a\u6570\u7684\u70b9\u7684\u503c+1\uff0c\u6700\u540e\u4e00\u6b21\u67e5\u8be2\u6240\u6709\u70b9\u7684\u503c\u3002\n\n\u8003\u8651\u5dee\u5206\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u5f00\u4e24\u4e2a\u94fe\u8868\u6216\u8005vector\uff0c\u5206\u522b\u5b58\u52a0\u6807\u8bb0\u548c\u51cf\u6807\u8bb0\uff0c\u70b9u\u6709\u4e00\u4e2a\u4e3aw\u7684\u52a0\u6807\u8bb0\u610f\u601d\u662fu\u5230\u6839\u4e2d\u6240\u6709\u6743\u503c\u4e3aw\u7684\u70b9\u7684\u503c\u90fd+1\uff0c\u51cf\u6807\u8bb0\u4e3a-1\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21u\u5230v\u4e4b\u95f4\u6240\u6709\u6743\u503c\u4e3aw\u7684\u70b9\u503c+1\u7684\u64cd\u4f5c\uff0c\u7ed9u\u548cv\u5404\u63a8\u4e00\u4e2a\u503c\u4e3aw\u7684\u52a0\u6807\u8bb0\uff0c\u7ed9lca\u548clca\u7684\u7236\u4eb2\u63a8\u4e00\u4e2a\u503c\u4e3aw\u7684\u51cf\u6807\u8bb0\uff0c\u7136\u540e\u6700\u540edfs\u4e00\u6b21\u628a\u6240\u6709\u70b9\u7684\u503c\u6839\u636e\u6807\u8bb0\u6c42\u51fa\u6765\u3002\n\ndfs\u5904\u7406\u6807\u8bb0\u7684\u65f6\u5019\u5f00\u4e00\u4e2a\u6876\uff0cdfs\u5230\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u76f4\u63a5\u628a\u5b83\u7684\u6240\u6709\u6807\u8bb0\u52a0\u5165\u6876\u4e2d\uff0c\u5bf9\u4e8e\u52a0\u6807\u8bb0\u628a\u6876\u4e2d\u5bf9\u5e94\u4f4d\u7f6e+1,\u51cf\u6807\u8bb0-1\uff0c\u7136\u540e\u6839\u636e\u6876\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u7b97\u51fa\u5f53\u524ddfs\u5230\u7684\u70b9\u7684\u503c\u3002\u5bf9\u4e8e\u7ed9\u51fa\u7684\u6bcf\u4e00\u6761\u8def\u5f84\uff08\u8dd1\u6b65\u7684\u4eba\uff09\u6253\u7684\u6807\u8bb0\u4e2a\u6570\u4e3a4\uff0c\u603b\u590d\u6742\u5ea6$O(m)$,\u6700\u540e\u63a8\u6807\u8bb0$O(n)$,$O(m+n)$\u505a\u5b8c\u4e86\u3002\u54e6\u4e0d\u5bf9\u597d\u50cf\u8fd8\u8981\u6c42lca\uff0c\u90a3\u5c31\u662f$O(mlogn)$\u3002\n\n\u7136\u540e\u4f60\u53d1\u73b0\u8fd9\u7b97\u6cd5\u5176\u5b9e\u662f\u4f2a\u7684\uff0cdfs\u7684\u65f6\u5019\u4e0d\u597d\u63a8\u6807\u8bb0\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u5982\u679c\u4e0d\u6b62\u6709\u4e00\u68f5\u5b50\u6811\u7684\u8bdd\u90a3\u4e48\u5728dfs\u7684\u65f6\u5019\u8981O(n)\u8fd8\u539f\u6876\uff0c\u5426\u5219\u5b50\u6811\u4e4b\u95f4\u7684\u6807\u8bb0\u4f1a\u4e92\u76f8\u5f71\u54cd\u3002\n\n\u7136\u540e\u5c31\u662f\u8fd9\u91cc\u6807\u7b97\u7684\u5dee\u5206\u65b9\u6cd5\u6211\u6ca1\u641e\u61c2\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u60a8\u4eec\u8fd9\u4e9b\u795e\u4ed9\u662f\u600e\u4e48\u5c31\u89e3\u51b3\u4e86\u4e0d\u8fd8\u539f\u6876\u65f6dfs\u7684\u5b50\u6811\u95f4\u5f71\u54cd\u7684\u95ee\u9898\u3002\n\n\u8fd9\u65f6\u5019\u4f60\u7a81\u7136\u53d1\u73b0\u94fe\u4e0a\u53ef\u4ee5\u76f4\u63a5\u8dd1\u8fd9\u4e2a\u4f2a\u7b97\u6cd5\u3002\u7136\u540e\u4f60\u8003\u8651\u6811\u5256\uff0c\u7528\u6811\u5256\u4ee5\u4e00\u4e2a$log$\u7684\u4ee3\u4ef7\u628a\u8fd9\u73a9\u610f\u5f3a\u884c\u641e\u6210\u4e00\u6761\u94fe\uff0c\u7136\u540e\u6bcf\u6b21\u6700\u591a\u6253$logn$\u4e2a\u6807\u8bb0\uff0c\u7136\u540e\u76f4\u63a5\u7528\u4e0a\u9762\u8fd9\u79cd\u66b4\u529b\u65b9\u6cd5\uff0c\u7136\u540e\u4f60\u5c31\u8fc7\u4e86\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3a$O(mlogn)$\u3002\n\n\u4ee3\u7801\u6781\u5176\u66b4\u529b\u3002\n\n```cpp\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#define maxn 400005\n\nusing namespace std;\nint son[maxn], depth[maxn], top[maxn], size[maxn], vb[maxn], val[maxn], fa[maxn];\nint w[maxn], w1[maxn], w2[maxn], w3[maxn]={0};\n\nvector <int> add1[maxn]; vector <int> add2[maxn]; vector <int> minu1[maxn]; vector <int> minu2[maxn];\nint delta1[maxn*2]={0}, delta2[maxn*2]={0};\nint  index[maxn] = {0};\nint cnt = 0;\nint n, m, s, p;\nvector <int> edges[maxn];\n\nstruct path {\n    int a, b, lca;\n}paths[maxn];\n\nint dfs1(int dep,int f,int now)\n{\n    depth[now]=dep;\n    fa[now]=f;\n    size[now]=1;\n    int maxson=-1;\n    int len = edges[now].size(); int v;\n    for (int i = 0; i < len; ++i) \n    {\n        v=edges[now][i];\n        if(v==f) continue;\n        size[now]+=dfs1(dep+1, now, v);\n        if(size[v]>maxson) maxson=size[v],son[now]=v;\n    }\n    return size[now];\n}\nvoid dfs2(int now,int topf)\n{\n    index[now]=++cnt;\n    val[cnt]=vb[now];\n    top[now]=topf;\n    if(!son[now]) return ;\n    dfs2(son[now],topf); int v;\n    int len = edges[now].size();\n    for (int i = 0; i < len; ++i) {\n        v=edges[now][i];\n        if(!index[v])\n            dfs2(v,v);\n    }\t\n}\n\nvoid TreeAdd1(int x,int y,int val)\n{\n    while(top[x]!=top[y])\n    {\n        if(depth[top[x]]<depth[top[y]]) swap(x,y);\n        add1[index[top[x]]].push_back(val);\n        minu1[index[x]+1].push_back(val);\n      //  array.add(index[ top[x] ],index[x],val, 1);\n       // printf(\"add %d<->%d %d\\n\", index[top[x]], index[x], val);\n        x=fa[ top[x] ];\n    }\n    if(depth[x]>depth[y]) swap(x,y);\n    add1[index[x]].push_back(val); minu1[index[y]+1].push_back(val);\n  //  printf(\"add %d<->%d %d\\n\", index[x], index[y], val);\n    //array.add(index[x],index[y],val, 1);\n}void TreeAdd2(int x,int y,int val)\n{\n    while(top[x]!=top[y])\n    {\n        if(depth[top[x]]<depth[top[y]]) swap(x,y);\n        add2[index[top[x]]].push_back(val);\n        minu2[index[x]+1].push_back(val);\n       // printf(\"add2 %d<->%d %d\\n\", index[top[x]], index[x], val);\n      //  array.add(index[ top[x] ],index[x],val, 1);\n        x=fa[ top[x] ];\n    }\n    if(depth[x]>depth[y]) swap(x,y);\n    add2[index[x]].push_back(val); minu2[index[y]+1].push_back(val);\n    //printf(\"add2 %d<->%d %d\\n\", index[x], index[y], val);\n    //array.add(index[x],index[y],val, 1);\n}\n\nvoid LCA(int p)  {\n    int x=paths[p].a, y=paths[p].b;\n    while(top[x]!=top[y]) {\n        if(depth[top[x]]<depth[top[y]]) std::swap(x,y);\n        x=fa[top[x]];\n    } if(depth[x]>depth[y]) std::swap(x,y);\n    paths[p].lca=x;\n}\n\nint main() {\n    int a, b, c, d;\n    scanf(\"%d %d\", &n, &m);\n    for (int i = 0; i < n-1; ++i) {\n        scanf(\"%d %d\", &a, &b);\n        edges[a].push_back(b);\n        edges[b].push_back(a);\n    } dfs1(1, 0, 1);\n    dfs2(1, 1);for (int i=1;i<=n;++i) {\n       scanf(\"%d\", &w[i]); w1[index[i]]=w[i]+depth[i]; w2[index[i]]=w[i]-depth[i];\n       \n    }//for (int i=1;i<=n;++i) printf(\"%d %d\\n\", w1[i], w2[i]);\n    for (int i=1;i<=m;++i) {\n        scanf(\"%d %d\", &paths[i].a, &paths[i].b);\n        LCA(i);\n        //printf(\"%d %d %d\\n\", paths[i].a, paths[i].b, paths[i].lca);\n    }//std::memset(w3, 0, sizeof(w3));\n    for (int i=1;i<=m;++i) {\n        //depth[a]-t=depth[u]\n        //depth[a]-depth[lca]+depth[u]-depth[lca]=t\n        TreeAdd1(paths[i].a, paths[i].lca, depth[paths[i].a]);\n        TreeAdd2(paths[i].lca, paths[i].b, depth[paths[i].a]-2*depth[paths[i].lca]);\n        if (depth[paths[i].lca]+w[paths[i].lca]==depth[paths[i].a]) w3[index[paths[i].lca]]--;\n    }for (int i=1;i<=n;++i) {\n        for (int j=0;j<add1[i].size();++j) delta1[add1[i][j]+200002]++;\n        for (int j=0;j<add2[i].size();++j) delta2[add2[i][j]+200002]++;\n        for (int j=0;j<minu1[i].size();++j) delta1[minu1[i][j]+200002]--;\n        for (int j=0;j<minu2[i].size();++j) delta2[minu2[i][j]+200002]--;\n        w3[i]+=delta1[w1[i]+200002]+delta2[w2[i]+200002];\n    }for (int i=1;i<=n;++i) printf(\"%d \", w3[index[i]]);\n}\n```\n",
        "postTime": 1539354858,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u9898\u610f\u8fd8\u7b97\u6e05\u695a\u3002\n\n## \u9898\u89e3\n\n\u4e00\u4e2a\u4e5f\u8bb8\u6bd4 @\u4e16\u754c\u7b2c\u4e00\u80a5\u5b85BF \u8fd8\u8981\u7b80\u5355\u4e00\u70b9\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u6cd5\uff08\u4e3b\u8981\u5728\u5904\u7406 $(x,v]$ \u7684\u5c42\u9762\uff09\u3002\n\n\u5148\u6253\u4e2a\u6df1\u5ea6\u6570\u7ec4 $d$\uff0c\u7136\u540e $\\text{dist}(u,v)=d_{u}+d_{v}-2\\times d_{\\text{lca}(u,v)}$\u3002\n\n\u6211\u4eec\u5047\u8bbe\u70b9 $u$ \u5728\u5de6\u8fb9\uff0c\u70b9 $v$ \u5728\u53f3\u8fb9\uff0c\u4ee4 $x=\\text{lca}(u,v)$\uff08$u,v$ \u5206\u522b\u662f\u4e00\u4f4d\u73a9\u5bb6\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\u3002\n\n\u5148\u8003\u8651 $[u,x]$ \u8fd9\u6761\u8def\u5f84\uff0c\u8bbe\u4e00\u4e2a\u70b9 $k$ \u5728\u8fd9\u6761\u94fe\u4e0a\u3002\n\n\u90a3\u4e48\u70b9 $k$ \u7684\u89c2\u5bdf\u5458\u89c2\u5bdf\u5230\u73a9\u5bb6\u9700\u8981\u6ee1\u8db3 $w_{k}=d_{u}-d_{k}$\u3002\n\n\u518d\u8003\u8651 $(x,v]$ \u8fd9\u6761\u8def\u5f84\uff0c\u4e5f\u8bbe\u4e00\u4e2a\u70b9 $k$ \u5728\u8fd9\u6761\u94fe\u4e0a\u3002\n\n\u90a3\u4e48\u70b9 $k$ \u7684\u89c2\u5bdf\u5458\u89c2\u5bdf\u5230\u73a9\u5bb6\u9700\u8981\u6ee1\u8db3 $w_{k}=d_{u}-2\\times d_{x}+d_{k}$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u8f6c\u5316\u4e00\u4e0b\u95ee\u9898\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u7684\u89c2\u5bdf\u5458\u8003\u8651\u6ee1\u8db3\u6761\u4ef6\u7684\u73a9\u5bb6\u6570\u91cf\u7136\u540e\u518d\u628a\u7b54\u6848\u52a0\u8d77\u6765\u3002\n\n\u628a $[u,x]$ \u8def\u5f84\u7684\u6761\u4ef6\u8f6c\u5316\u4e00\u4e0b $w_{k}=d_{u}-d_{k}\\Longrightarrow d_{u}=d_{k}+w_{k}$\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u628a $[u,x]$ \u8def\u5f84\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u70b9\u6743 $d_{u}$\uff0c\u7136\u540e\u8be2\u95ee $d_{k}+w_{k}$ \u7684\u6570\u91cf\u3002\n\n\u81f3\u4e8e $(x,v]$ \u7684\u60c5\u51b5\u548c $[u,x]$ \u5dee\u4e0d\u591a\u3002\n\n\u628a $(x,v]$ \u8def\u5f84\u7684\u6761\u4ef6\u8f6c\u5316\u4e00\u4e0b $w_{k}=d_{u}-2\\times d_{x}+d_{k}\\Longrightarrow w_{k}-d_{k}=d_{u}-2\\times d_{x}$\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u628a $(x,v]$ \u8def\u5f84\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u70b9\u6743 $d_{u}-2\\times d_{x}$\uff0c\u7136\u540e\u8be2\u95ee $w_{k}-d_{k}$ \u7684\u6570\u91cf\u3002\n\n\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u90fd\u53ef\u4ee5\u7528\u52a8\u6001\u5f00\u70b9\u6743\u503c\uff08\u6df1\u5ea6\uff09\u7ebf\u6bb5\u6811\u7136\u540e\u7ebf\u6bb5\u6811\u5408\u5e76\u89e3\u51b3\uff0c\u5dee\u5206\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u54e6\u5bf9\u4e86\u60c5\u51b5\u4e8c\u6709\u53ef\u80fd\u6df1\u5ea6\u51cf\u51fa\u8d1f\u6570\u6240\u4ee5\u9700\u8981\u52a0\u4e2a $n$ \u54e6\u3002\n\n```cpp\n#include <cstdio>\n\nconst int MAXN = 3e5 + 5;\n\nint rint () {\n\tint x = 0, f = 1; char c = getchar ();\n\tfor ( ; c < '0' || c > '9'; c = getchar () )\tf = c == '-' ? -1 : f;\n\tfor ( ; c >= '0' && c <= '9'; c = getchar () )\tx = ( x << 3 ) + ( x << 1 ) + ( c & 15 );\n\treturn x * f;\n}\n\ntemplate<typename _T>\nvoid wint ( _T x ) {\n\tif ( x < 0 )\tputchar ( '-' ), x = ~ x + 1;\n\tif ( x > 9 )\twint ( x / 10 );\n\tputchar ( x % 10 + '0' );\n}\n\ntemplate<typename _T> void swapp ( _T &x, _T &y ) { _T w = x; x = y; y = w; }\n\nstruct GraphSet {\n\tint to, nx;\n\tGraphSet ( int T = 0, int N = 0 ) { to = T, nx = N; }\n} as[MAXN * 2];\n\nstruct SegmentTree {\n\tint lch, rch, val;\n\tSegmentTree ( int L = 0, int R = 0, int V = 0 ) { lch = L, rch = R, val = V; }\n} nodes[MAXN * 18 * 4];\n\nint n, m, cnt, tot, upper, begin[MAXN], depth[MAXN], kfa[MAXN][21], weight[MAXN];\nint oneR[MAXN], anotherR[MAXN], ans[MAXN];\n\nvoid makeEdge ( const int u, const int v ) { as[++ cnt] = GraphSet ( v, begin[u] ), begin[u] = cnt; }\n\nvoid dfs ( const int u, const int lst ) {\n\tdepth[u] = depth[lst] + 1, kfa[u][0] = lst;\n\tfor ( int i = 1; i <= 20; ++ i )\tkfa[u][i] = kfa[kfa[u][i - 1]][i - 1];\n\tfor ( int i = begin[u]; i; i = as[i].nx ) {\n\t\tint v = as[i].to;\n\t\tif ( v == lst )\tcontinue;\n\t\tdfs ( v, u );\n\t}\n}\n\nint calcLCA ( int u, int v ) {\n\tif ( depth[u] < depth[v] )\tswapp ( u, v );\n\tfor ( int i = 20; ~ i; -- i ) {\n\t\tif ( depth[kfa[u][i]] >= depth[v] )\tu = kfa[u][i];\n\t}\n\tif ( u == v )\treturn u;\n\tfor ( int i = 20; ~ i; -- i ) {\n\t\tif ( kfa[u][i] != kfa[v][i] )\tu = kfa[u][i], v = kfa[v][i];\n\t}\n\treturn kfa[u][0];\n}\n\nvoid Upt ( const int x ) { nodes[x].val = nodes[nodes[x].lch].val + nodes[nodes[x].rch].val; }\nvoid Modify ( int &x, const int l, const int r, const int segP, const int segW ) {\n\tif ( ! x )\tx = ++ tot;\n\tif ( l == r )\treturn void ( nodes[x].val += segW );\n\tint mid = ( l + r ) >> 1;\n\tif ( mid >= segP )\tModify ( nodes[x].lch, l, mid, segP, segW );\n\telse\tModify ( nodes[x].rch, mid + 1, r, segP, segW );\n\tUpt ( x );\n}\n\nint Query ( const int x, const int l, const int r, const int segP ) {\n\tif ( l == r )\treturn nodes[x].val;\n\tint mid = ( l + r ) >> 1;\n\tif ( mid >= segP )\treturn Query ( nodes[x].lch, l, mid, segP );\n\telse\treturn Query ( nodes[x].rch, mid + 1, r, segP );\n}\n\nint Merge ( const int x, const int y, const int l, const int r ) {\n\tif ( ! x || ! y )\treturn x | y;\n\tif ( l == r )\treturn ( nodes[x].val += nodes[y].val, x );\n\tint mid = ( l + r ) >> 1;\n\tnodes[x].lch = Merge ( nodes[x].lch, nodes[y].lch, l, mid );\n\tnodes[x].rch = Merge ( nodes[x].rch, nodes[y].rch, mid + 1, r );\n\tUpt ( x );\n\treturn x;\n}\n\nvoid Solve ( const int u, const int lst ) {\n\tfor ( int i = begin[u]; i; i = as[i].nx ) {\n\t\tint v = as[i].to;\n\t\tif ( v == lst )\tcontinue;\n\t\tSolve ( v, u );\n\t\toneR[u] = Merge ( oneR[u], oneR[v], 1, upper );\n\t\tanotherR[u] = Merge ( anotherR[u], anotherR[v], 1, upper );\n\t}\n\tans[u] = Query ( oneR[u], 1, upper, depth[u] + weight[u] ) + Query ( anotherR[u], 1, upper, weight[u] - depth[u] + n );\n}\n\nint main () {\n\tn = rint (), m = rint ();\n\tfor ( int i = 1, u, v; i < n; ++ i ) {\n\t\tu = rint (), v = rint ();\n\t\tmakeEdge ( u, v ), makeEdge ( v, u );\n\t}\n\tfor ( int i = 1; i <= n; ++ i )\tweight[i] = rint ();\n\tdfs ( 1, 0 );\n\tupper = ( n << 1 );\n\tfor ( int i = 1, u, v; i <= m; ++ i ) {\n\t\tu = rint (), v = rint ();\n\t\tint x = calcLCA ( u, v );\n\t\tModify ( oneR[u], 1, upper, depth[u], 1 );\n\t\tModify ( oneR[x], 1, upper, depth[u], -1 );\n\t\tModify ( anotherR[v], 1, upper, depth[u] - 2 * depth[x] + n, 1 );\n\t\tModify ( anotherR[kfa[x][0]], 1, upper, depth[u] - 2 * depth[x] + n, -1 );\n\t}\n\tSolve ( 1, 0 );\n\tfor ( int i = 1; i <= n; ++ i )\twint ( ans[i] ), putchar ( ' ' );\n\treturn 0;\n}\n```",
        "postTime": 1606371883,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    },
    {
        "content": "\n\n    \u6b63\u89e3\uff1a\n\n    LCA+\u6876+\u6811\u4e0a\u5dee\u5206\uff08\u4e5f\u4e0d\u80fd\u8bf4\u662f\u5dee\u5206\u4f46\u53c8\u548c\u5dee\u5206\u7c7b\u4f3c\uff09\n\n\u5728\u8bf4\u6b63\u89e3\u4e4b\u524d\uff0c\u5148\u58f0\u660e\u4e00\u4e9b\u53d8\u91cf\uff1a\n```cpp\n    lcafrom [x]: \u4ee5x\u4e3aLCA\u7684\u8d77\u70b9\u96c6\u5408\u3002\n    tofrom [x]: \u4ee5x\u4e3a\u7ec8\u70b9\u7684\u8d77\u70b9\u96c6\u5408\u3002\n    lcato [x]: \u4ee5x\u4e3aLCA\u7684\u7ec8\u70b9\u96c6\u5408\u3002\n    roadcount[x]: \u4ee5x\u4e3a\u8d77\u70b9\u7684\u8def\u5f84\u6761\u6570\u3002\n```\n\n\u53e6\u5916\uff0c\u8bf7\u8bb0\u4f4f\uff1a\n### \u6b63\u89e3\u5e76\u4e0d\u662f\u5bf9\u4e00\u4e2a\u4e2a\u73a9\u5bb6\u8fdb\u884c\u64cd\u4f5c,\u800c\u662f\u5148\u5bf9\u5168\u90e8\u73a9\u5bb6\u8fdb\u884c\u4e00\u4e9b\u9884\u5904\u7406\uff0c\u7136\u540e\u7528\u4e24\u4e2a\u7c7b\u4f3c\u7684dfs\u51fd\u6570\u5bf9\u6574\u68f5\u6811\u5904\u7406,\u6700\u540e\u518d\u505a\u4e00\u4e9b\u5fae\u8c03\uff0c\u5c31\u8f93\u51fa\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u73a9\u5bb6\u5728\u6811\u4e0a\u7684\u8def\u5f84\uff08u\uff0cv\uff09\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u62c6\u5206\u3002\n\n\u62c6\u5206\u6210\uff1a u ---> LCA(u,v) \u4e0e LCA(u,v) ---> v \u4e24\u6761\u8def\u5f84\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e00\u6b65\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u4e00\u5f00\u59cb\u5df2\u7ecf\u8bf4\u660e\u662f\u5148\u5bf9\u6bcf\u4e2a\u73a9\u5bb6\u8fdb\u884c\u9884\u5904\u7406\uff0c\n\n\u6240\u4ee5\u5728\u8fd9\u4e00\u6b65\u6211\u4eec\u9009\u62e9Tarjan\u7248\u672c\u7684LCA\u4f1a\u66f4\u597d\u4e00\u4e9b\uff0c\u56e0\u4e3a\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u66f4\u5c11\uff0c\n\n\u4e0d\u8fc7\uff0c\u7528\u500d\u589e\u6c42LCA\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\u4e5f\u662f\u4e0d\u4f1a\u5361\u7684\uff08\u6211\u81ea\u5df1\u5728\u6d1b\u8c37\u4e0a\u65f6\u95f4\u6700\u957f\u7684\u4e00\u4e2a\u70b9\u662f0.7s\u5de6\u53f3\uff09\u3002\n\n\u6211\u4eec\u5148\u8003\u8651 u ---> LCA(u\uff0cv) \u8fd9\u6761\u8def\u5f84\uff0c\u8fd9\u662f\u4e00\u6761\u5411\u201c\u4e0a\u201d\u8dd1\u7684\u8def\u5f84\u3002\n\n\u5bf9\u4e0e\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9i\u6765\u8bf4\uff0c\u5f53\u4e14\u4ec5\u5f53deep[i]+w[i] = deep[u]\u65f6\uff0cu\u8282\u70b9\u5bf9i\u8282\u70b9\u662f\u6709\u8d21\u732e\u7684\u3002\n\n\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u7b26\u5408deep[i]+w[i]\u7684\u5168\u90e8\u662f\u73a9\u5bb6\u8d77\u70b9\u7684\u70b9\uff0c\u5c31\u80fd\u5bf9i\u70b9\u4ea7\u751f\u8d21\u732e\u3002\n\n\u5728\u53d9\u8ff0\u5b8c\u5411\u4e0a\u7684\u8def\u5f84\u540e\uff0c\u6211\u4eec\u518d\u6765\u8003\u8651\u5411\u4e0b\u7684\u8def\u5f84\uff0c\u5373LCA(u,v) --->v\u3002\n\n\u5bf9\u4e8e\u5411\u4e0b\u8d70\u7684\u8def\u5f84\uff0c\u6211\u4eec\u4e5f\u601d\u8003\uff0c\u5728\u4ec0\u4e48\u6761\u4ef6\u4e0b\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u4f1a\u83b7\u5f97\u8d21\u732e\u5462\uff1f\n\n\u5f88\u660e\u663e\u7684\uff0c\u5f53 dis(u,v)-deep[v] = w[i]-deep[i] \u7b49\u5f0f\u6210\u7acb\u7684\u65f6\u5019\uff0c\u8fd9\u6761\u8def\u5f84\u5c06\u4f1a\u5bf9i\u70b9\u6709\u8d21\u732e\u3002\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u73b0\u5728\u6211\u4eec\u4e3b\u8981\u7684\u601d\u8def\u5df2\u7ecf\u5b8c\u5168\u8bb2\u5b8c\u4e86\u3002\n\n\u4f46\u662f\uff0c\u5bf9\u4e8e\u5b9e\u73b0\u6765\u8bf4\uff0c\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\u3002\n\n    \u5bf9\u4e8e\u6876bucket\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u8ba1\u7b97\u7684\u8fc7\u7a0b\u4e2d\u5176\u4e0b\u6807\u53ef\u80fd\u662f\u8d1f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u64cd\u4f5c\u6876\u65f6\u8981\u5c06\u5176\u4e0b\u6807\u53f3\u79fb MAXN \u5373\u70b9\u6570\u3002\n    \u5982\u679c\u4e00\u6761\u8def\u5f84\u7684LCA\u80fd\u89c2\u5bdf\u5230\u8fd9\u6761\u8def\u4e0a\u7684\u4eba\uff0c\u6211\u4eec\u8fd8\u9700\u5c06\u8be5LCA\u53bb\u91cd\u3002\n\n\u6761\u4ef6\u662f\uff1a if(deep[u] == deep[lca]+w[i])ans[lca]--;\n\n### Code\uff08LCA\u7528\u7684\u662f\u500d\u589e\uff09\n```cpp\n1 /*\n  2     Problem: P1600 \u5929\u5929\u7231\u8dd1\u6b65\n  3     Author: \u67e0\u6aac\u8349\u82cf\u6253\u6c34\n  4     Date: 2020/10/19\n  5     Description: \u4e00\u4e2a\u6076\u5fc3\u7684\uff0c\u56f0\u96be\u7684\u95ee\u9898\uff0c\u54a9~\u54a9~\u54a9~~~\n  6 */\n  7 \n  8 // \u6ce8\uff1a\u4e2a\u4eba\u4e60\u60ef\uff0c\u6570\u7ec4\u5143\u7d20\u4e0b\u6807\u4e00\u822c\u4ece1\u5f00\u59cb \n  9 //#pragma GCC optimize(\"O1\")\n 10 //#pragma GCC optimize(\"O2\")\n 11 //#pragma GCC optimize(\"O3\")\n 12 // \u4e0d\u8981\u7ba1\u6211\uff0c\u6211\u5c31\u8981\u76ae\uff0co1o2o3\u9f50\u5f00\uff0c\u54a9~~~ \n 13 #include <stdio.h>\n 14 #include <string.h>\n 15 #include <malloc.h>\n 16 #include <vector>\n 17 #include <map>\n 18 #define Char_Int(a) ((a) & 15)\n 19 #define Int_Char(a) ((a) + '0')\n 20 #define rg register\n 21 \n 22 namespace hkxa {\n 23     template <typename _TpInt> inline _TpInt read();\n 24     template <typename _TpInt> inline void write(_TpInt x);\n 25     template <typename _TpSwap> inline void swap(_TpSwap &x, _TpSwap &y);\n 26     \n 27 #    define SizeN 300007\n 28 #    define SizeLogN 22\n 29 #    define tong(a) bucket[a + SizeN]\n 30     \n 31     int n, m;\n 32     int bucket[SizeN * 3]; \n 33     /* \u4f7f\u7528 tong(a) \u6765\u8bfb\u53d6\u6876 bucket \u91cc\u9762\u7684\u6570\u636e\uff0c\u9632\u6b62\u8d8a\u754c\uff0c\u56e0\u4e3a\u5728\u6570\u7ec4\u201c\u6876\u201d\u7684\u4f7f\n 34        \u7528\u8fc7\u7a0b\u4e2d\uff0c\u4e0b\u6807\u6709\u53ef\u80fd\u6210\u4e3a\u8d1f\u6570\u3002 */\n 35     std::vector<int> lcafrom[SizeN * 2], tofrom[SizeN * 2], lcato[SizeN * 2];\n 36     int roadcount[SizeN * 2];\n 37     /* lcafrom    [x]:    \u4ee5x\u4e3aLCA\u7684\u8d77\u70b9\u96c6\u5408 \n 38        tofrom    [x]:    \u4ee5x\u4e3a\u7ec8\u70b9\u7684\u8d77\u70b9\u96c6\u5408 \n 39        lcato    [x]:    \u4ee5x\u4e3aLCA\u7684\u7ec8\u70b9\u96c6\u5408  \n 40        roadcount[x]:    \u4ee5x\u4e3a\u8d77\u70b9\u7684\u8def\u5f84\u6761\u6570 */\n 41     int w[SizeN], ans[SizeN];\n 42     /* w  [x]:    \u89c2\u5bdf\u5458x\u89c2\u5bdf\u7684\u65f6\u95f4\u8282\u70b9\n 43        ans[x]:    \u89c2\u5bdf\u5458x\u89c2\u5bdf\u5230\u7684\u73a9\u5bb6\u4eba\u6570 */ \n 44     int f[SizeN][SizeLogN + 1], deep[SizeN], dist[SizeN];\n 45     bool use[SizeN] = {0};\n 46     /* LCA\u7528\u54c1 : f \u7a0b\u5e8f\u7b97\u6cd5\u7528\u54c1 : deep, dist \n 47        f : \u4e0d\u7528\u8bf4\u4e86\u5427\uff0c\u5927\u5bb6\u90fd\u61c2\uff0c\u500d\u589e\u6c42LCA\u7684\u7236\u4eb2\u6570\u7ec4 \n 48        deep : \u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\n 49        dist : \u8ddd\u79bb */\n 50     \n 51     struct EDGE { // \u5b58\u50a8\u8fb9\u4fe1\u606f\n 52         int e; \n 53         // \u901a\u5f80e\u7684\u9053\u8def \n 54         EDGE *next_edge;\n 55         // \u4e0b\u4e00\u6761\u8fb9\u7684\u6307\u9488 \n 56         EDGE() : e(0), next_edge(NULL) {}\n 57         // \u521d\u59cb\u5316\n 58     } *v[SizeN], edges[SizeN * 2];\n 59     int ct_edges = 0;\n 60     /* v\u6570\u7ec4\u5b58\u50a8\u4e86\u6bcf\u4e2a\u70b9\u6700\u540e\u7684\u8fde\u63a5\u7684\u8fb9(\u6307\u9488)\uff0cedges\u6570\u7ec4\u662f\u6811\u4e0a\u8fb9\u7684\u96c6\u5408\uff0cct_edges \n 61        \u662fedges\u7684top\uff08\u5373\uff1a\u4e0a\u6b21\u5728edges\u6570\u7ec4\u7684ct_edges\u4f4d\u7f6e\u6dfb\u52a0\u4e86\u8fb9\uff09 */ \n 62        \n 63     struct Person {\n 64         int s, t;\n 65         int lca;\n 66         int dis;\n 67     } p[SizeN];\n 68     /* \u5b58\u50a8\u4eba\u7684\u4fe1\u606f\n 69        s, t: \u5982\u9898\u610f\n 70        lca : s, t\u7684\u516c\u5171\u7956\u5148LCA \n 71        dis : s, t\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u8ddd\u79bb */\n 72     \n 73     inline void Add_edge(int s, int e) // \u6dfb\u52a0\u4e00\u6761\u4eces\u5230e\u7684\u8fb9 \n 74     {\n 75         ct_edges++;  \n 76         edges[ct_edges].next_edge = v[s];\n 77         v[s] = edges + ct_edges; // \u5730\u5740\u8d4b\u503c \n 78         v[s]->e = e; \n 79     }\n 80     \n 81     inline void link(int x, int y) // \u6dfb\u52a0\u4e00\u6761x\u4e0ey\u4e4b\u95f4\u7684\u53cc\u5411\u8fb9\n 82     {\n 83         Add_edge(x, y);\n 84         Add_edge(y, x);\n 85     } \n 86     \n 87     void dfs_LCA(int now, int depth) // \u500d\u589e\u6c42LCA\u7684\u9884\u5904\u7406\u51fd\u6570 \n 88     {\n 89         use[now] = true;\n 90         deep[now] = depth;\n 91         for (rg int k = 1; k <= SizeLogN; k++){\n 92             int j = f[now][k - 1];\n 93             f[now][k] = f[j][k - 1];\n 94         }\n 95         for (rg EDGE *nxt = v[now]; nxt; nxt = nxt->next_edge) {\n 96         /* \u8fd9\u4e00\u884c\u7b49\u4ef7\u4e8e for (EDGE *nxt = v[now]; nxt != NULL; nxt = nxt->next),\n 97            C++\u91cc\u975e0\u4e3a\u771f\uff08NULL = 0\uff09 */ \n 98             if(!use[nxt->e]) {\n 99                f[nxt->e][0] = now;\n100                dist[nxt->e] = dist[now] + 1;\n101                dfs_LCA(nxt->e, depth + 1);\n102             }\n103         }\n104         use[now] = false;\n105     } \n106     \n107     inline int jump(int u, int depth) {\n108         for (rg int k = 0; k <= SizeLogN; k++) {\n109             if ((depth & (1 << k))) u = f[u][k];\n110         }\n111         return u;\n112     }\n113     \n114     inline int LCA(int u, int v){\n115         if (deep[u] < deep[v]) swap(u, v);\n116         u = jump(u, deep[u] - deep[v]);\n117         for (rg int k = SizeLogN; k >= 0; k--) {\n118             if (f[u][k] != f[v][k]) u = f[u][k], v = f[v][k]; // \u500d\u589e\uff0c\u4e00\u8dc3\u800c\u4e0a \n119         }\n120         return u == v ? u : f[u][0];\n121     }\n122     \n123     inline void dfs_fromLCA(int now)  // \u4ecefrom\u5230LCA\u7684\u8def\u7ebf \n124     {\n125         use[now] = true; // \u6253\u4e0atag\n126         int prev = tong(deep[now] + w[now]);\n127         for (rg EDGE *g = v[now]; g; g = g->next_edge) {\n128             if (!use[g->e]) dfs_fromLCA(g->e);\n129         }\n130         tong(deep[now]) += roadcount[now];\n131         ans[now] += tong(deep[now] + w[now]) - prev;\n132         int len = lcafrom[now].size();\n133         for (rg int k = 0; k < len; k++) {\n134             tong(deep[lcafrom[now][k]])--;\n135         }\n136         use[now] = false; // \u5220\u9664tag\n137     }\n138     \n139     inline void dfs_LCAto(int now) // \u4eceLCA\u5230to\u7684\u8def\u7ebf \n140     {\n141         use[now] = true; // \u6253\u4e0atag\n142         int prev = tong(w[now] - deep[now]);\n143         for (rg EDGE *g = v[now]; g; g = g->next_edge) {\n144             if(!use[g->e]) dfs_LCAto(g->e);    \n145         }\n146         int len = tofrom[now].size();\n147         for (rg int k = 0; k < len; k++) {\n148             tong(tofrom[now][k])++;\n149         }\n150         ans[now] += tong(w[now] - deep[now]) - prev;\n151         len = lcato[now].size();\n152         for (rg int k = 0; k < len; k++) {\n153            tong(lcato[now][k])--;\n154         }\n155         use[now] = false;\n156     }\n157     \n158     inline int main()\n159     {    \n160         n = read<int>();\n161         m = read<int>();\n162         for (rg int i = 1; i <= n - 1; i++) {\n163             link(read<int>(), read<int>());\n164         }\n165         for (rg int i = 1; i <= n; i++)\n166             w[i] = read<int>(); \n167         f[1][0] = 1;\n168         dfs_LCA(1, 0); // \u500d\u589e\u6c42LCA\u7684\u9884\u5904\u7406 \n169         int S, T; \n170         for(rg int i = 1; i <= m; i++) { // \u6838\u5fc3\u7b97\u6cd5\u4e4b\u9884\u5904\u7406\n171             S = read<int>();  \n172             T = read<int>();\n173             p[i].s = S;\n174             p[i].t = T;\n175             p[i].lca = LCA(S, T);\n176             p[i].dis = dist[S] + dist[T] - dist[p[i].lca] * 2;\n177             roadcount[S]++;\n178             lcafrom[p[i].lca].push_back(S);\n179             tofrom[T].push_back(p[i].dis - deep[T]);\n180             lcato[p[i].lca].push_back(p[i].dis - deep[T]);\n181         }\n182         // \u6838\u5fc3\u7b97\u6cd5 - \u5f00\u59cb \n183         dfs_fromLCA(1);      // \u4ece\u4e0b\u81f3\u4e0a\uff08\u4ecefrom\u5230LCA\uff09 \n184         dfs_LCAto(1);        // \u4ece\u4e0a\u81f3\u4e0b\uff08\u4eceLCA\u5230to\uff09 \n185         for (rg int i = 1; i <= m; i++) {\n186             if(deep[p[i].s] == deep[p[i].lca] + w[p[i].lca]) {\n187                 ans[p[i].lca]--;\n188             }\n189         } \n190         for (rg int i = 1; i <= n; i++) {\n191             write<int>(ans[i]);\n192             putchar(32); \n193         }\n194         return 0;\n195     } \n196     \n197     template <typename _TpInt>\n198     inline _TpInt read()       \n199     {\n200         register _TpInt flag = 1;\n201         register char c = getchar();\n202         while ((c > '9' || c < '0') && c != '-') \n203             c = getchar();\n204         if (c == '-') flag = -1, c = getchar();\n205         register _TpInt init = Char_Int(c);\n206         while ((c = getchar()) <= '9' && c >= '0') \n207             init = (init << 3) + (init << 1) + Char_Int(c);\n208         return init * flag;\n209     }\n210     \n211     template <typename _TpInt>\n212     inline void write(_TpInt x)\n213     {\n214         if (x < 0) {\n215             putchar('-');\n216             write<_TpInt>(~x + 1);\n217         }\n218         else {\n219             if (x > 9) write<_TpInt>(x / 10);    \n220             putchar(Int_Char(x % 10));\n221         }\n222     }\n223     \n224     template <typename _TpSwap>\n225     inline void swap(_TpSwap &x, _TpSwap &y)\n226     {\n227         _TpSwap t = x;\n228         x = y;\n229         y = t;\n230     }\n231 }\n232 \n233 int main()\n234 {\n235 //    system(\"ulimit -s 1048576\"); \n236     hkxa::main();\n237     return 0;\n238 }",
        "postTime": 1603109313,
        "uid": 225990,
        "name": "\u67e0\u6aac\u8349\u82cf\u6253\u6c34",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1600 \u3010\u5929\u5929\u7231\u8dd1\u6b65\u3011"
    }
]