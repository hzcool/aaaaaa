[
    {
        "content": "\u8fd9\u9898\u7684\u9898\u76ee\u80cc\u666f\u4f7f\u6211\u4eec\u660e\u767d\uff0c\u539f\u6765\u795e\u9898\u90fd\u662f\u591a\u6b21\u52a0\u5f3a\u9020\u51fa\u6765\u7684\uff08\u5212\u6389\n\n\u89c2\u5bdf\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u8fd9\u4e2a\u5f97\u5206\u7684\u6027\u8d28\uff0c\u53d1\u73b0\u968f\u7740 $x$ \u7684\u589e\u5927\uff0c\u5e76\u4e0d\u5b58\u5728\u4efb\u4f55\u5355\u8c03\u6027\uff0c\u662f\u4e00\u4e2a\u591a\u5cf0\u51fd\u6570\u3002\u76f4\u63a5\u8003\u8651\u66b4\u529b\u679a\u4e3e $x$\uff0c\u5e76\u5904\u7406\u51fa\u5bf9\u4e8e $x$ \u7684\u6bcf\u4e2a\u53d6\u503c\u4e0b\uff0c\u88ab\u6807\u8bb0\u7684\u533a\u95f4\u957f\u5ea6\u7684\u5e73\u65b9\u548c\u548c\u533a\u95f4\u4e2a\u6570\u3002\n\n\u5bf9\u4e8e\u9650\u5b9a\u533a\u95f4\u4e2a\u6570 $tot$ $\\in [l,r]$ \u7684\u8be2\u95ee\uff0c\u5728\u9884\u5904\u7406\u540e\uff0c\u5df2\u77e5 $x$ \u7684\u6bcf\u4e2a\u53d6\u503c\u80fd\u591f\u53d6\u5230\u7684\u533a\u95f4\u4e2a\u6570\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u533a\u95f4\u4e2a\u6570\u53d6\u4e00\u4e2a\u6700\u503c\uff0c\u518d\u7ef4\u62a4\u533a\u95f4\u4e2a\u6570\u5728 $\\in [l,r]$ \u7684\u6700\u503c\u5373\u53ef\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811/$\\text{ST}$ \u8868\u7b49 $\\text{RMQ}$ \u6570\u636e\u7ed3\u6784\u90fd\u53ef\uff0c\u4f46\u6bd2\u7624\u51fa\u9898\u4eba $\\color{black}\\text{C}\\color{red}\\text{Yjian}$ \u5361\u7a7a\u95f4\uff0c\u53ea\u80fd\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n + \\sqrt n)$ \u7684\u5206\u5757\uff08~~\u5206\u5757\u4ec0\u4e48\u65f6\u5019\u662f\u6570\u636e\u7ed3\u6784\u4e86~~\n\n\u5bf9\u4e8e\u4e00\u4e2a\u786e\u5b9a\u7684 $x$ \uff0c\u5904\u7406\u51fa\u88ab\u6807\u8bb0\u7684\u533a\u95f4\u957f\u5ea6\u7684\u5e73\u65b9\u548c\u548c\u533a\u95f4\u4e2a\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a\u8fde\u901a\u6027\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e26\u6743\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u6807\u8bb0\u4e5f\u5f88\u597d\u5b9e\u73b0\uff0c\u4ece\u5c0f\u5230\u5927\u6807\u8bb0\u3002\u5e76\u4e14\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06 $a_i$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4e00\u4e2a $\\exists i\\geq 1,a_{i-1}<x<a_i$ \u7684 $x$ \u5bf9\u7b54\u6848\u4e0d\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5f71\u54cd\u4e5f\u540c\u6837\u4ea7\u751f\u5728 $x=a_{i-1}$\u3002\u90a3\u4e48\u79bb\u6563\u5316\u540e\u6309\u7167\u4e0a\u8ff0\u601d\u8def\u5904\u7406\u5373\u53ef\u3002\n\n**Show the Code**\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cmath>\n#include<algorithm>\n#define get_block(x) (x-1)/block+1 \n#define min(a,b) ((a)<(b)? (a):(b))\ntypedef long long ll;\nstd::vector<int> t[1000001];\nll v[1000001];\nint fa[1000001],size[1000001],a[1000001],c[1000001],mx[1000001],maxn[1001];\ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline void swap(int &x,int &y) {int tmp=y;y=x;x=tmp;}\ninline int find(int x) {return x==fa[x]? x:fa[x]=find(fa[x]);}\ninline void merge(int x,int y,ll &res1,int &res2) {\n\tint fx=find(x),fy=find(y);\n\tif(fx!=fy) {\n\t\tres1-=(ll)size[fx]*size[fx]+(ll)size[fy]*size[fy]; --res2;\n\t\tfa[fy]=fx;size[fx]+=size[fy];res1+=(ll)size[fx]*size[fx];\n\t}\n}\ninline bool cmp(int x,int y) {return v[x]*1ll*c[y]<v[y]*1ll*c[x];}\nint main() {\n\tint n=read(),T=read(),num=0,block=sqrt(n);\n\tfor(register int i=1;i<=n;++i) c[++num]=a[i]=read(),fa[i]=i;\n\tstd::sort(c+1,c+1+num); num=std::unique(c+1,c+1+num)-c-1; \n\tfor(register int i=1;i<=n;++i) {a[i]=std::lower_bound(c+1,c+1+num,a[i])-c;t[a[i]].push_back(i);}\n\tll now=0; int tot=0;\n\tv[0]=-1,c[0]=1;\n\tfor(register int x=1;x<=num;++x) {\n\t\tfor(register int i=0;i<t[x].size();++i) {size[t[x][i]]=1; ++now; ++tot;}\n\t\tfor(register int i=0;i<t[x].size();++i) {\n\t\t\tif(t[x][i]!=1&&a[t[x][i]-1]<=x) merge(t[x][i],t[x][i]-1,now,tot);\n\t\t\tif(t[x][i]!=n&&a[t[x][i]+1]<=x) merge(t[x][i],t[x][i]+1,now,tot);\n\t\t}\n\t\tv[x]=now;\n\t\tif(cmp(mx[tot],x)) {\n\t\t\tmx[tot]=x;\n\t\t\tif(cmp(maxn[get_block(tot)],x)) maxn[get_block(tot)]=x;\n\t\t}\n\t}\n\tll ans=0;\n\twhile(T--) {\n\t\tint a=read()%n,b=read()%n,x=read()%n,y=read()%n;\n\t\tint l=((a*1ll*ans%n+x-1)%n+n)%n+1,r=((b*1ll*ans%n+y-1)%n+n)%n+1;\n\t\tif(l>r) swap(l,r);\n\t\tint bl=get_block(l),br=get_block(r),id=0;\n\t\tif(bl==br) {for(register int i=l;i<=r;++i) if(cmp(id,mx[i])) id=mx[i];}\n\t\telse {\n\t\t\tfor(register int i=l;i<=min(bl*block,n);++i) if(cmp(id,mx[i])) id=mx[i];\n\t\t\tfor(register int i=bl+1;i<br;++i) if(cmp(id,maxn[i])) id=maxn[i];\n\t\t\tfor(register int i=(br-1)*block+1;i<=r;++i) if(cmp(id,mx[i])) id=mx[i];\n\t\t}\t\t\n\t\tif(id==0) {printf(\"-1 -1\\n%d %d %d\\n\",l,r,ans);ans=1%n;}\n\t\telse {printf(\"%lld %d\\n%d %d %d\\n\",v[id],c[id],l,r,ans);ans=(v[id]%n)*1ll*(c[id]%n)%n;}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1599291986,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5012 \u3010\u6c34\u306e\u6570\u5217\u3011"
    },
    {
        "content": "\u9898\u76ee\u4e0d\u5e26\u4fee\uff0c\u6545 $x$ \u7684\u53d6\u503c\u53ea\u6709 $O(n)$ \u79cd\u3002\u8003\u8651\u9884\u5904\u7406\u51fa\u6240\u6709 $x$ \u5bf9\u5e94\u7684\u7b54\u6848\u3002\u4ece\u5c0f\u5230\u5927\u679a\u4e3e $x$\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u7eed\u6bb5\u7684\u6570\u91cf\uff0c\u957f\u5ea6\uff0c\u4ee5\u53ca\u957f\u5ea6\u7684\u5e73\u65b9\u548c\u3002\u8fd9\u6837\u4f1a\u5f97\u5230 $O(n)$ \u4e2a\u4e09\u5143\u7ec4 $(cnt,y,x)$ \u8868\u793a\u6240\u9009\u6570\u4e3a $x$ \u65f6\u6709 $cnt$ \u4e2a\u8fde\u7eed\u6bb5\uff0c\u5176\u957f\u5ea6\u7684\u5e73\u65b9\u548c\u4e3a $y$\uff0c\u5bf9\u5e94\u7684\u7b54\u6848\u4e3a $\\frac{y}{x}$\u3002\u628a\u6240\u6709 $cnt$ \u76f8\u540c\u7684\u4e09\u5143\u7ec4\u653e\u5728\u4e00\u8d77\u6309\u7b54\u6848\u53d6 max\uff0c\u95ee\u9898\u8f6c\u4e3a rmq\u3002\n\n\u4f7f\u7528\u666e\u901a\u7684 st \u8868\u6216\u7ebf\u6bb5\u6811\u5bb9\u6613\u88ab\u5361\u7a7a\u95f4\u3002\u8fd9\u91cc\u91c7\u7528\u5206\u5757+ st \u8868\u7684\u65b9\u5f0f\uff0c\u6bcf log \u4e2a\u70b9\u5206\u4e3a\u4e00\u5757\uff0c\u6574\u5757\u4e4b\u95f4\u7528 st \u8868\u7ef4\u62a4\uff0c\u96f6\u6563\u70b9\u66b4\u529b\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u70b9\u4e2a\u8d5e\u518d\u8d70\u5427QAQ\uff0c\u4e07\u5206\u611f\u8c22\uff01\uff09\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<vector>\n#include<queue>\n#include<map>\n#define pb push_back\n#define sml(x,y) (x=min(x,y))\n#define big(x,y) (x=max(x,y))\n#define ll long long\n#define db double\n#define fo(i,x,y) for(register int i=x;i<=y;++i)\n#define go(i,x,y) for(register int i=x;i>=y;--i)\nusing namespace std;\ninline int read(){int x=0,fh=1; char ch=getchar(); while(!isdigit(ch)){if(ch=='-') fh=-1; ch=getchar();} while(isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0'; ch=getchar();} return x*fh;}\ninline void out(int *a,int n){fo(i,1,n) printf(\"%d \",*(a+i));puts(\"\");}\n\nconst int N=1e6+5;\nint a[N],od[N],n,siz[N],fa[N],cnt,vis[N],T,lg,tot,bel[N];\nll ans,lst;\nstruct frac{\n\tll fz;\n\tint fm;\n\tfrac(){fz=0,fm=1;}\n\tfrac(ll x,int y){fz=x,fm=y;} \n\tbool operator<(const frac&x)const{return fz*x.fm<fm*x.fz;} \n}A[N],st[N/19+5][20],Ans;\n\nint fin(int x){return fa[x]==x?x:fa[x]=fin(fa[x]);} \nbool cmp(int x,int y){return a[x]<a[y];} \ninline void merge(int x,int y){\n\tint fx=fin(x),fy=fin(y);\n\tif(fx==fy) return;\n\tif(siz[fx]<siz[fy]) fa[fx]=fy,siz[fy]+=siz[fx];\n\telse fa[fy]=fx,siz[fx]+=siz[fy];\n}\n\nvoid rmq(){\n\tfo(i,1,n) bel[i]=(i-1)/lg+1,big(st[bel[i]][0],A[i]);\n\tfo(i,1,lg)\n\t\tfo(j,1,tot) st[j][i]=max(st[j][i-1],st[min(j+(1<<i-1),tot)][i-1]);\n}\n\ninline frac query(int l,int r){\n\tint x=log2(r-l+1); \n\treturn max(st[l][x],st[r-(1<<x)+1][x]);\n}\n\nint main(){\n\tcin>>n>>T;lg=log2(n);tot=(n-1)/lg;\n\tfo(i,1,n) a[i]=read(),od[i]=i,fa[i]=i,siz[i]=1;\n\tsort(od+1,od+1+n,cmp);\n\tfo(i,1,n){\n\t\tint R=i;\n\t\twhile(a[od[R]]==a[od[R+1]]) R++;\n\t\tfo(j,i,R){\n\t\t\tint k=od[j];\n\t\t\tll sum=0;\n\t\t\tvis[k]=1;\n\t\t\tif(vis[k-1]) cnt--,sum+=(ll)siz[fin(k-1)]*siz[fin(k-1)],merge(k-1,k);\n\t\t\tif(vis[k+1]) cnt--,sum+=(ll)siz[fin(k+1)]*siz[fin(k+1)],merge(k+1,k);\n\t\t\tcnt++;\n\t\t\tans+=(ll)siz[fin(k)]*siz[fin(k)]-sum;\n\t\t}\n\t\t//cnt:\u8fde\u7eed\u6bb5\u7684\u4e2a\u6570\uff0cans:\u957f\u5ea6\u5e73\u65b9\u548c\uff0ca[od[i]]:\u6240\u9009\u6570 \n\t\tbig(A[cnt],frac(ans,a[od[i]]));\n\t\t//printf(\"%d:%lld/%d\\n\",cnt,ans,a[od[i]]);\n\t\ti=R;\n\t}\n\t//fo(i,1,n) printf(\"%d:%lld/%d\\n\",i,A[i].fz,A[i].fm);\n\trmq();\n\twhile(T--){\n\t\tint a=read(),b=read(),x=read(),y=read();\n\t\tint l=(a*lst+x-1)%n+1,r=(b*lst+y-1)%n+1;\n\t\tif(l>r) swap(l,r);\n\t\tx=bel[l],y=bel[r];\n\t\tAns=frac();\n\t\tif(y-x<=1) fo(i,l,r) big(Ans,A[i]);\n\t\telse{\n\t\t\tfo(i,l,lg*bel[l]) big(Ans,A[i]);\n\t\t\tfo(i,lg*(bel[r]-1)+1,r) big(Ans,A[i]);\n\t\t\tbig(Ans,query(bel[l]+1,bel[r]-1));\n\t\t}\n\t\tif(Ans.fz) printf(\"%lld %d\\n\",Ans.fz,Ans.fm);\n\t\telse puts(\"-1 -1\");\n\t\tprintf(\"%d %d %lld\\n\",l,r,lst);\n\t\tif(Ans.fz) lst=Ans.fz*Ans.fm%n;\n\t\telse lst=1;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1632197913,
        "uid": 238408,
        "name": "vectorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5012 \u6c34\u306e\u6570\u5217"
    },
    {
        "content": "\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6bcf\u4e00\u4e2a\u9009\u62e9\u7684\u6570 $x$\uff0c\u6c42\u51fa\u6b64\u65f6\u88ab\u6807\u8bb0\u7684\u533a\u95f4\u6570\u91cf $cnt$ \u4ee5\u53ca\u6240\u6709\u533a\u95f4\u957f\u5ea6\u7684\u5e73\u65b9\u548c $sum$\u3002\u4f7f\u7528RMQ\u6216\u8005\u7ebf\u6bb5\u6811\uff08\u6211\u7528\u7684\u662fRMQ\uff09\u7ef4\u62a4\u533a\u95f4\u6570\u91cf $cnt$ \u5728\u67d0\u4e00\u8303\u56f4\u5185\u65f6\uff0c$max(sum/x)$ \u4ee5\u53ca $x$ \u7684\u503c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u76f4\u63a5\u67e5\u8be2\u5373\u53ef\u3002\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\u3002\n\n\u672c\u9898\u6709\u4e00\u4e9b\u5751\u70b9\uff1a\n\n1.RMQ\u505a\u6cd5\u53ef\u80fd\u4f1a\u88ab\u5361\u7a7a\u95f4\uff0c\u5982\u679c\u4f60\u5f00 $1e6*20$ \u7684\u6570\u7ec4\u7684\u8bdd\u3002\u6ce8\u610f\u5230\u533a\u95f4\u6570\u91cf\u4e0d\u53ef\u80fd\u8d85\u8fc7 $ceil(n/2)$\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5f00 $5e5*20$ \u7684\u6570\u7ec4\u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u7ebf\u6bb5\u6811\u5e94\u8be5\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\uff09\n\n2.\u672c\u9898\u6709\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u6b64\u65f6 $lastans$ \u5e94\u8be5\u66f4\u65b0\u4e3a $1$ \uff01 \u672c\u849f\u84bb\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0WA\u4e86\u4e09\u6b21\uff01\n\n\u4ee5\u4e0b\u662f\u849f\u84bb\u7684\u4e11\u964b\u538b\u884c\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\n#define LL long long\n#define PII pair<LL,int>\nusing namespace std;\n\nconst int N=1e6+7;\nint n,T,A[N];\nLL Ans[N];  //\u8868\u793a\u9009\u62e9\u7684\u6570\u4e3ax\u65f6\uff0c\u6240\u6709\u533a\u95f4\u957f\u5ea6\u7684\u5e73\u65b9\u548c\nint RMQ[N>>1][20];  //RMQ\u6570\u7ec4\uff0c\u8868\u793a\u533a\u95f4[ i,i+(1<<j) )\u5185\uff0c\u4f7f\u5f97sum/x\u6700\u5927\u7684x\nint lg2[N>>1];\n\ninline int read() {\n\tint x=0,f=1;char ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar())if(ch=='-')f=-1;\n\tfor(;isdigit(ch);ch=getchar())x=x*10+ch-'0';\n\treturn x*f;\n}\n\nint Check(int x,int y){\n\tif(!x)return y;\n\tif(!y)return x;\n\tif(Ans[x]*y>Ans[y]*x)return x;\n\telse if(Ans[x]*y<Ans[y]*x)return y;\n\telse return (x>y ? x : y);\n}\n\nvector<int> vec[N];  //\u5b58\u50a8\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u4f4d\u7f6e\nint len[N];  //\u8868\u793a\u7b2ci\u4e2a\u6570\u6240\u5728\u533a\u95f4\u7684\u957f\u5ea6\uff08\u53ea\u9700\u8981\u66f4\u65b0\u533a\u95f4\u4e24\u7aef\u7684\u503c\uff09\nvoid Prework() {\n\tint mx=0;\n\tfor(int i=1;i<=n;++i)vec[A[i]].push_back(i),mx=max(mx,A[i]);\n\tLL val=0;\n\tint cnt=0;\n\tfor(int i=1;i<=mx;++i)if(vec[i].size()) {\n\t\tfor(int j=0;j<(int)vec[i].size();++j){\n\t\t\tint v=vec[i][j];\n\t\t\tif(!len[v-1] && !len[v+1]) {\n\t\t\t\t++val;++cnt;len[v]=1;\n\t\t\t} else if(len[v-1] && len[v+1]) {\n\t\t\t\tval+=2LL*len[v-1]*len[v+1]+2LL*len[v-1]+2LL*len[v+1]+1;\n\t\t\t\t--cnt;\n\t\t\t\tlen[v-len[v-1]]=len[v+len[v+1]]=len[v-1]+len[v+1]+1;\n\t\t\t} else if(len[v-1]) {\n\t\t\t\tval+=2LL*len[v-1]+1;\n\t\t\t\tlen[v-len[v-1]]=len[v]=len[v-1]+1;\n\t\t\t} else {\n\t\t\t\tval+=2LL*len[v+1]+1;\n\t\t\t\tlen[v+len[v+1]]=len[v]=len[v+1]+1;\n\t\t\t}\n\t\t}\n\t\tAns[i]=val;\n\t\tRMQ[cnt][0]=Check(i,RMQ[cnt][0]);\n\t}\n\tfor(int i=2;i<=(n+1)/2;++i)lg2[i]=lg2[i>>1]+1;\n\tfor(int j=1;j<=19;++j) {\n\t\tfor(int i=1;i+(1<<j)-1<=(n+1)/2;++i) {\n\t\t\tRMQ[i][j]=Check(RMQ[i][j-1],RMQ[i+(1<<(j-1))][j-1]);\n\t\t}\n\t}\n}\nint Query(int L,int R) {\n\tif(L>(n+1)/2)return 0;\n\tif(R>(n+1)/2)R=(n+1)/2;\n\tint x=lg2[R-L+1];\n\treturn Check(RMQ[L][x],RMQ[R-(1<<x)+1][x]);\n}\n\nint main() {\n\tn=read(),T=read();\n\tfor(int i=1;i<=n;++i)A[i]=read();\n\tPrework();\n\tint lastans=0;\n\twhile(T--) {\n\t\tint a=read()%n,b=read()%n,x=read()%n,y=read()%n;\n\t\tint L=(1LL*a*lastans%n+x-1+2*n)%n+1,R=(1LL*b*lastans%n+y-1+2*n)%n+1;\n\t\tif(L>R)swap(L,R);\n\t\tint ans=Query(L,R);\n\t\tif(!ans)puts(\"-1 -1\");else printf(\"%lld %d\\n\",Ans[ans],ans);\n\t\tprintf(\"%d %d %d\\n\",L,R,lastans);\n\t\tif(!ans)lastans=1;else lastans=Ans[ans]%n*ans%n;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1541728361,
        "uid": 27003,
        "name": "Bruteforces",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5012 \u3010\u6c34\u306e\u6570\u5217\u3011"
    },
    {
        "content": "### \u201c\u5f97\u5206\u6539\u6210\u4e86\u539f\u6765\u7684\u5f97\u5206\u9664\u4ee5\u4f60\u9009\u62e9\u7684\u6570\u201d\n\u8bbe\u6bcf\u4e00\u4e2a\u539f\u59cb\u5f97\u5206 $sco$ \u6240\u5bf9\u5e94\u7684\u9009\u62e9\u7684\u6570\u662f $x$\u3002\u539f\u59cb\u5f97\u5206\u6bd4\u8f83\u5927\u5c0f\u65f6\uff0c\u628a\u5224\u65ad\u6761\u4ef6\u6539\u4e3a $\\dfrac{sco_{\\text{old}}}{x_{\\text{old}}}<\\dfrac{sco_{\\text{new}}}{x_{\\text{new}}}$ \u5373\u53ef\u3002\u800c\u4e14\u663e\u7136\u9009\u62e9\u7684\u6570\u662f\u6570\u5217\u4e2d\u7684\u6570\u624d\u66f4\u4f18\u3002\n\n### \u201c\u9009\u62e9\u7684\u6570\u5f97\u5230\u7684\u533a\u95f4\u7684\u4e2a\u6570\u5728 $l\\sim r$ \u7684\u8303\u56f4\u5185\u201d\n\u9884\u5904\u7406 $res[i]$\uff1a\u5f97\u5230\u7684\u533a\u95f4\u4e2a\u6570\u662f $i$ \u7684\u6700\u5927\u6700\u7ec8\u5f97\u5206\u6240\u5bf9\u5e94\u7684\u539f\u59cb\u5f97\u5206 $sco$ \u548c\u9009\u62e9\u7684\u6570 $x$\u3002\u518d\u5728 $res$ \u4e0a\u5efa\u7acb ST \u8868\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5728\u7ebf\u8be2\u95ee $(l,r)$\uff0cST \u8868\u67e5\u8be2 $res[l\\sim r]$ \u7684\u6700\u5927\u503c\u3002\n\n### $O(N)$ \u9884\u5904\u7406 $res[i]$\uff1a\n\n\u8bbe $sco$\uff1a\u5f53\u524d\u7684\u539f\u59cb\u5f97\u5206\uff1b$cnt$\uff1a\u5f53\u524d\u7684\u533a\u95f4\u4e2a\u6570\u3002\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6570\u5217\u4e2d\u7684\u6570 $x$\uff1a\n\n\u5176\u5728\u6570\u5217\u4e2d\u7684\u4e0b\u6807\u4e3a $i$\uff0c\u589e\u52a0\u533a\u95f4 $[i,i]$\u3002\u4ee4 $sco\\leftarrow sco+1\\times 1,cnt\\leftarrow cnt+1$\u3002\u56e0\u4e3a\u8fde\u7eed\u6807\u8bb0\u7684\u4f4d\u7f6e\u8981\u5408\u5e76\u6210\u4e00\u4e2a\u533a\u95f4\uff0c\u6240\u4ee5\u7136\u540e\u8981\u68c0\u9a8c\u662f\u5426\u5b58\u5728\u5df2\u6709\u533a\u95f4\u7aef\u70b9\u7684\u4e0b\u6807\u4e3a $i-1,i+1$\uff0c\u82e5\u5b58\u5728\u5219\u8981\u4e0e\u4e4b\u5408\u5e76\u3002\u7531\u516c\u5f0f $(a+b)^2=a^2+b^2+2\\times a\\times b$\uff0c\u8bbe $prod$ \u8868\u793a\u4e24\u4e2a\u533a\u95f4\u539f\u5927\u5c0f\u7684\u4e58\u79ef\uff0c\u6bcf\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u65f6\u8981\u4ee4 $sco\\leftarrow sco+prod\\times 2,cnt\\leftarrow cnt-1$\u3002\u6ce8\u610f\u5408\u5e76\u533a\u95f4\u65f6\u7edf\u4e00\u4ece\u53f3\u5f80\u5de6\u6216\u4ece\u5de6\u5f80\u53f3\u5408\u5e76\uff0c\u8fd9\u6837\u4fe1\u606f\u4e0d\u4f1a\u5408\u5e76\u9519\u3002\n\n**\u628a\u6570\u5217\u4e2d\u5927\u5c0f\u4e3a $x$ \u7684\u6570\u5168\u90e8\u4e00\u8d77\u6309\u4e0a\u9762\u7684\u64cd\u4f5c\u589e\u52a0\u533a\u95f4\u540e** \uff0c\u518d\u7528\u6b64\u65f6\u7684 $sco,x$ \u66f4\u65b0 $res[cnt]$\uff01\uff01\uff01\n\n### \u603b\u7ed3\n\n1. \u201c\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6570\u5217\u4e2d\u7684\u6570 $x$ \u201d \u9700\u8981\u6392\u5e8f $O(N\\log N)$\u3002\n2. \u9884\u5904\u7406 $res[i]$ $O(N)$\u3002\n3. \u5728 $res$ \u4e0a\u5efa\u7acb ST \u8868 $O(N\\log N)$\u3002\n4. ST \u8868\u56de\u7b54\u8be2\u95ee $O(T)$\u3002\n\n\u6ce8\u610f\u9898\u76ee\u4e2d\u7684\u8981\u6c42 **\u201c\u5982\u679c\u6709\u591a\u89e3\u5219\u8f93\u51fa\u9009\u62e9\u7684\u6570\u6700\u5927\u7684\u4e00\u7ec4\u201d** \uff01\uff01\uff01\n\n### \u5361\u7a7a\u95f4\u6280\u5de7\n\u82e5 ST \u8868\u8981\u5728 `struct` \u4e0a\u5efa\u7acb\uff0c\u5f00 $O(N\\log N)$ \u7684 `struct` \u53ef\u80fd\u4f1a\u7206\u7a7a\u95f4\u3002\u5176\u5b9e\u53ea\u8981\u5f00 $O(N)$ \u7684 `struct` \u5b58\u539f\u5e8f\u5217\uff0cST \u8868\u5f00 $O(N\\log N)$ \u7684 `int` \u5b58\u6700\u503c\u5bf9\u5e94\u7684\u4e0b\u6807\u5373\u53ef\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef long double LD;\ntypedef pair<int,int> PII;\ntypedef pair<LL,int> PLI;\nconst int N=1e6+10;\nint n,t;\nLL ans;\nPII num[N],vis[N];  //num={\u6570\u503c,\u4e0b\u6807}\uff1bvis[i]={\u4ee5i\uff08\u6570\u5217\u7684\u4e0b\u6807\uff09\u4e3a\u4e00\u4e2a\u7aef\u70b9\u7684\u533a\u95f4\u7684\u5927\u5c0f,\u8be5\u533a\u95f4\u7684\u53e6\u4e00\u4e2a\u7aef\u70b9}\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8be5\u533a\u95f4\u5219vis[i]={0,0}\nint lg2[N];\nPLI res[N]; //res[i]={\u5f97\u5230\u7684\u533a\u95f4\u4e2a\u6570\u662fi\u7684\u6700\u5927\u6700\u7ec8\u5f97\u5206\u6240\u5bf9\u5e94\u7684\u539f\u59cb\u5f97\u5206,\u9009\u62e9\u7684\u6570}\nint st[N][20];  //\u5361\u7a7a\u95f4\u6280\u5de7\uff1ast\u8868\u5b58\u6700\u503c\u5bf9\u5e94\u7684\u4e0b\u6807\n\ninline int cmp(LD x,LD y)\n{\n    if(fabs(x-y)<1e-15) return 0;\n    if(x>y) return 1;\n    return -1;\n}\n\nvoid st_pre()\n{\n    for(int i=2;i<=n;i++) lg2[i]=lg2[i>>1]+1;\n    for(int l=1;l<=n;l++) st[l][0]=l;\n    for(int k=1;1+(1<<k)-1<=n;k++)\n        for(int l=1;l+(1<<k)-1<=n;l++)\n        {\n            int c=cmp(1.0*res[st[l][k-1]].first/res[st[l][k-1]].second,1.0*res[st[l+(1<<(k-1))][k-1]].first/res[st[l+(1<<(k-1))][k-1]].second);\n            if(c==1) st[l][k]=st[l][k-1];\n            else if(c==0)   //\u5982\u679c\u6709\u591a\u89e3\u5219\u8f93\u51fa\u9009\u62e9\u7684\u6570\u6700\u5927\u7684\u4e00\u7ec4\n            {\n                if(res[st[l][k-1]].second>res[st[l+(1<<(k-1))][k-1]].second) st[l][k]=st[l][k-1];\n                else st[l][k]=st[l+(1<<(k-1))][k-1];\n            }\n            else st[l][k]=st[l+(1<<(k-1))][k-1];\n        }\n    return ;\n}\n\nPLI st_max(int l,int r)\n{\n    int k=lg2[r-l+1];\n    int c=cmp(1.0*res[st[l][k]].first/res[st[l][k]].second,1.0*res[st[r-(1<<k)+1][k]].first/res[st[r-(1<<k)+1][k]].second);\n    if(c==1) return res[st[l][k]];\n    else if(c==0)\n    {\n        if(res[st[l][k]].second>res[st[r-(1<<k)+1][k]].second) return res[st[l][k]];\n        return res[st[r-(1<<k)+1][k]];\n    }\n    else return res[st[r-(1<<k)+1][k]];\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&t);\n    for(int i=1;i<=n;i++) res[i]={-1,1};\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&num[i].first);\n        num[i].second=i;\n    }\n    sort(num+1,num+n+1);\n    LL sco=0,cnt=0;\n    for(int i=1;i<=n;i++)\n    {\n        int x=num[i].first,id=num[i].second;\n        vis[id]={1,id};\n        sco+=1;\n        cnt++;\n\n        //\u628a\u53f3\u533a\u95f4\u5408\u5e76\u5230\u5de6\u533a\u95f4\n        if(vis[id-1].first!=0)\n        {\n            //\u6ce8\u610f\u5148\u66f4\u65b0sco\u548ccnt\uff0c\u5426\u5219vis[id-1].first,vis[id].first\u7684\u4fe1\u606f\u662f\u5408\u5e76\u540e\u7684\n            sco+=2ll*vis[id-1].first*vis[id].first;\n            cnt--;\n\n            //\u753b\u56fe\u6a21\u62df\u4fbf\u4e8e\u7406\u89e3\n            int backup=vis[id].first;\n            vis[id].first+=vis[id-1].first;\n            vis[id].second=vis[id-1].second;\n            vis[vis[id-1].second].first+=backup;\n            vis[vis[id-1].second].second=id;\n        }\n        if(vis[id+1].first!=0)\n        {\n            sco+=2ll*vis[id].first*vis[id+1].first;\n            cnt--;\n            int backup1=vis[vis[id+1].second].first,backup2=vis[id+1].second;   //\u6ce8\u610f\u5907\u4efdvis[id+1].second\uff01\uff01\uff01\n            vis[vis[id+1].second].first+=vis[id].first;\n            vis[vis[id+1].second].second=vis[id].second;\n            vis[vis[id].second].first+=backup1;\n            vis[vis[id].second].second=backup2;\n        }\n        if(i!=n && num[i].first==num[i+1].first) continue;  //\u628a\u6570\u5217\u4e2d\u5927\u5c0f\u4e3ax\u7684\u6570\u5168\u90e8\u4e00\u8d77\u6309\u4e0a\u9762\u7684\u64cd\u4f5c\u589e\u52a0\u533a\u95f4\u540e\uff0c\u518d\u7528\u6b64\u65f6\u7684sco,x\u66f4\u65b0res[cnt]\uff01\uff01\uff01\n        if(cmp(1.0*res[cnt].first/res[cnt].second,1.0*sco/x)<=0) res[cnt]={sco,x};\n    }\n    st_pre();\n    while(t--)\n    {\n        int a,b,x,y;\n        scanf(\"%d%d%d%d\",&a,&b,&x,&y);\n        int l=(__int128(a)*ans+x-1)%n+1;\n        int r=(__int128(b)*ans+y-1)%n+1;\n        if(l>r) swap(l,r);\n        PLI cur=st_max(l,r);\n        if(cur.first<0)\n        {\n            printf(\"-1 -1\\n%d %d %lld\\n\",l,r,ans%n);\n            ans=1;\n            continue;\n        }\n        printf(\"%lld %d\\n%d %d %lld\\n\",cur.first,cur.second,l,r,ans%n);\n        ans=cur.first*cur.second;\n    }\n    return 0;\n}\n```",
        "postTime": 1667633125,
        "uid": 557756,
        "name": "Brilliance_Z",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5012"
    },
    {
        "content": "[\u4f20\u9001\u95e8\uff08\u9898\u76ee\u94fe\u63a5\uff09](https://www.luogu.com.cn/problem/P5012)\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u968f\u7740\u4f60\u9009\u62e9\u7684 $x$ \u589e\u5927\uff0c\u573a\u4e0a\u88ab\u6807\u8bb0\u7684\u5143\u7d20\u4f1a\u8d8a\u6765\u8d8a\u591a\u3002\n\n\u867d\u7136\u7b54\u6848\u4e0d\u5177\u6709\u5355\u8c03\u6027\uff0c\u4f46\u662f\u5047\u8bbe\u6211\u4eec\u904d\u5386 $w\\in[1,W]$\uff08\u5176\u4e2d $W$ \u4e3a\u503c\u57df\u5927\u5c0f\uff09\uff0c\u7136\u540e\u5c06\u6240\u6709\u5143\u7d20\u7b49\u4e8e $w$ \u7684\u5143\u7d20\u6807\u8bb0\u3002\u5f53\u7136\uff0c\u5b83\u6709\u53ef\u80fd\u548c\u65c1\u8fb9\u7684\u5143\u7d20\u201c\u8fde\u8d77\u6765\u201d\u3002\n\n\u968f\u7740\u65f6\u95f4\u7684\u589e\u52a0\uff08\u904d\u5386 $w$ \uff09\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u70b9\uff08\u6b64\u5904\u7684\u5143\u7d20\uff09\u88ab\u52a0\u5165\u5230\u5f53\u524d\u5c40\u9762\u4e2d\uff0c\u4e14\u5b83\u4eec\u4e2d\u5b58\u5728\u8fde\u901a / \u4e0d\u8fde\u901a\u7684\u5173\u7cfb\uff0c\u8981\u4f60\u67e5\u8be2\u8fde\u901a\u5757\u7684\u5927\u5c0f\uff08\u8fde\u7eed\u6bb5\u7684\u957f\u5ea6\uff09\u3002\n\n\u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u8fde\u901a\u6027\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u89e3\u51b3\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 `std::vector` \u5b58\u50a8\u6bcf\u4e2a\u503c\u4e3a $w$ \u7684\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u53bb\u6807\u8bb0\u5143\u7d20\u4eec\u3002\n\n\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u7edf\u8ba1\u51fa\u9009\u62e9 $w$ \u65f6\u7684\u7b54\u6848 $now$ \u4ee5\u53ca\u8fde\u7eed\u6bb5\u6570 $segs$\u3002\n\n---\n\u9898\u76ee\u8981\u6c42\u6211\u4eec\u6c42\u51fa $segs$ \u5728 $[L,R]$ \u8303\u56f4\u5185\u7684\uff0c\u5f53 $\\dfrac{now}{w}$ \u6700\u5927\u65f6\u7684 $now$ \u548c $w$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4e0d\u5173\u5fc3\u9009\u62e9\u4ec0\u4e48\u5143\u7d20\u7684\u65f6\u5019\u8fde\u7eed\u6bb5\u6570\u4e3a $segs$\uff0c\u53ea\u5173\u7cfb\u8fde\u7eed\u6bb5\u6570\u4e3a $segs$ \u65f6\u7684\uff0c\u5f53 $\\dfrac{now}{w}$ \u6700\u5927\u65f6\u7684 $now$ \u548c $w$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u8bb0\u5f55\u5f53\u8fde\u7eed\u6bb5\u6570\u4e3a $segs$ \u7684\u65f6\u5019\u7684\u5f53 $\\dfrac{now}{w}$ \u6700\u5927\u65f6\u7684 $now$ \u548c $w$\u3002\n\n\u6211\u4eec\u8fd9\u4e00\u90e8\u5206\u5b8c\u5168\u53ef\u4ee5\u5168\u90e8**\u9884\u5904\u7406**\u51fa\u6765\uff0c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n+Wt+n\\alpha(n))$\uff0c\u5176\u4e2d $n$ \u4e3a\u4ee5\u503c\u57df\u904d\u5386\u5e8f\u5217\u7684\u590d\u6742\u5ea6\uff0c$t$ \u4e3a\u4fee\u6539\u8fde\u7eed\u6bb5\u6570\u4e3a $seg$ \u65f6\u7684\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\uff08\u5982\u679c\u76f4\u63a5\u4fee\u6539\u7ebf\u6bb5\u6811\u7684\u8bdd $t=\\mathcal{O}(\\log n)$\uff0c\u79bb\u7ebf\u4e0b\u6765\u7684\u8bdd\u5c31\u662f $t=\\mathcal{O}(1)$\uff09\uff0c$n\\alpha(n)$ \u4e3a\u4f7f\u7528\u8def\u5f84\u538b\u7f29 + \u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u53e6\u5916\u7531\u4e8e\u8fd9\u91cc\u8981\u67e5\u8be2\u96c6\u5408\u5927\u5c0f\uff0c\u6240\u4ee5\u63a8\u8350\u5c06\u79e9\u6307\u5b9a\u4e3a\u96c6\u5408\u5927\u5c0f\u800c\u975e\u6df1\u5ea6\uff08\u8fd9\u6837\u53ef\u4ee5\u5c11\u5f00\u4e00\u4e2a\u6570\u7ec4\uff09\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u67e5\u8be2\u5f53 $segs\\in[L,R]$ \u65f6\u7684\u7b54\u6848\uff0c\u806a\u660e\u7684\u4f60\u53ef\u80fd\u770b\u51fa\u6765\u4e86\uff0c\u8fd9\u662f\u6211\u4eec\u7684\u8001\u670b\u53cb\uff0c\u9759\u6001\u533a\u95f4\u6700\u5927\u503c\u95ee\u9898\uff08 RMQ \u95ee\u9898\uff09\uff0c\u4e8e\u662f\u5982\u679c\u9009\u62e9 ST \u8868\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u505a\u5230 $\\mathcal{O}(n\\log n)-\\mathcal{O}(1)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u6b63\u5f53\u95ee\u9898\u5feb\u8981\u89e3\u51b3\u7684\u65f6\u5019\uff0cSubtask 3 \u5168\u5458\u8e66\u51fa\u4e86 MLE\uff0c\u8fd9\u662f\u56e0\u4e3a ST \u8868\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n\\log n)$ \u7684\uff0c\u800c\u663e\u7136\u4f60\u4e3a\u4e86\u8bb0\u5f55\u8fbe\u5230 `long long` \u7ea7\u522b\u7684 $now$ \u548c\u4e0d\u80fd\u4f7f\u7528 `short` \u8bb0\u5f55\u7684 $w$\uff0c\u4f7f\u4f60\u5355\u5355\u5728 ST \u8868\u4e0a\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u5230\u8fbe\u4e86 $(8+4)\\times 20\\times 10^6\\,\\text{Byte}=234575\\text{KB}\\approx 228.88\\text{MB} $\uff0c\u800c\u9898\u76ee\u53ea\u7ed9\u4e86 $125\\text{MB}\\sim 128\\text{MB}$ \u7684\u7a7a\u95f4\u3002\n\n\u6240\u4ee5\u53ea\u80fd\u9000\u800c\u6c42\u5176\u6b21\uff0c\u9009\u62e9\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u90a3\u4e48\u4f18\u79c0\uff0c\u4f46\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n)$ \u7684\u7ebf\u6bb5\u6811\u4e86\u3002\n\n\u7136\u540e\u5361\u8fc7\u53bb\u4e86\u3002\n\n---\n\u4e00\u70b9\u5361\u7a7a\u95f4\u7684\u5c0f\u5efa\u8bae\uff1a\n\n1. \u4f7f\u7528 `std::vector`\uff0c`resize()` \u548c `clear()`\u3002\n\n2. \u4f7f\u7528\u7ebf\u6bb5\u6811\u4e0d\u8981\u5f00\u51fa\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u800c\u662f\u653e\u5230\u53c2\u6570\u5217\u8868\u4e2d\u3002\n\n3. \u4fee\u6539 / \u8be2\u95ee\u56fa\u5b9a\u7684\u5143\u7d20\uff0c\u5373\u4fee\u6539\u7528\u7684\u5143\u7d20\uff0c\u4fee\u6539\u7684\u4f4d\u7f6e\u548c\u8be2\u95ee\u7684\u533a\u95f4\u4e0d\u8981\u653e\u5230\u53c2\u6570\u5217\u8868\u91cc\uff0c\u800c\u662f\u72ec\u7acb\u51fa\u6765\uff0c\u8fd9\u6837\u53ef\u4ee5\u53bb\u6389\u4e00\u70b9\u70b9\u7a7a\u95f4\u3002\n\n\n\n\u6700\u540e\u4ee5 $111.1\\text{MB}$ \u5361\u8fc7\u53bb\u4e86\u3002\n\n\u4e00\u4e2a\u4f1a\u8ba9\u4f60\u6302\u6210 $5\\text{pts}$ \u7684\u5751\u70b9\uff1a$lastans$ \u7684\u6570\u91cf\u7ea7\u5927\u7ea6\u662f $(10^6)^2\\times 10^6=10^{18}$\uff0c\u800c\u8f93\u5165\u7684 $a\\leqslant 2\\times 10^9$\uff0c\u6240\u4ee5 $a\\times lastans\\approx 2\\times 10^{27}$\uff0c\u4f1a\u7a76\u6781\u6ea2\u51fa\uff0c\u6240\u4ee5\u8bf7\u4f7f\u7528 `__int128`\u3002\n\n---\n\n- \u5173\u4e8e\u4ee3\u7801\u4e2d\u9884\u5904\u7406 `go()` \u51fd\u6570\u7684\u8be6\u7ec6\u8bb2\u89e3\n\n```cpp\nvoid go(void)\n{\n    pa.resize(n + 1), large.resize(n + 1);\n    // \u5206\u914d\u7a7a\u95f4\uff0c\u6bd5\u7adf\u8fd9\u662f\u9053\u5361\u7a7a\u95f4\u7684\u9898\n    for (int i = 1; i <= n; ++ i)\n        pa[i] = i, large[i] = -1;\n    // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\u7684\u4ee3\u8868\u5143\u7d20\u6570\u7ec4\uff1a pa \u6570\u7ec4\n    // large[x] \uff0c\u5f53 x \u4e3a\u5176\u81ea\u8eab\u7684\u4ee3\u8868\u5143\u7d20\u65f6\uff0c\u8868\u793a\u5305\u542b\u4f4d\u7f6e x \u7684\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u7684\u957f\u5ea6\n    // \u7279\u522b\u5730\uff0c\u5f53 large[x] = -1 \u65f6\u8be5\u5143\u7d20\u8fd8\u672a\u88ab\u6807\u8bb0\n    i64 now = 0; int segs = 0;\n    for (int i = 1; i <= maxn; ++ i)\n    {\n        int up = pos[i].size();\n        segs += up, now += up;\n        // \u5c06 up \u4e2a\u6563\u70b9\u52a0\u5165\u5176\u4e2d\n        // \u56e0\u4e3a\u6682\u65f6\u6ca1\u6709\u8003\u8651\u8fd9\u4e9b\u6563\u70b9\u548c\u5468\u56f4\u6bb5\u7684\u5408\u5e76\uff0c\u6240\u4ee5 segs \u9700\u8981\u589e\u52a0 up\n        // \u800c\u589e\u52a0\u7684 up \u4e2a\u6bb5\uff0c\u6bcf\u4e2a\u6bb5\u957f\u5ea6\u90fd\u4e3a 1 \uff0c\u6240\u4ee5 now \u4e5f\u9700\u8981\u589e\u52a0 up \n        for (int j = 0; j < up; ++ j)\n        {\n            int x = pos[i][j], f, p;\n            large[x] = 1;\n            if (x > 1 && large[x - 1] != -1)\n            // \u5f53\u4f4d\u7f6e x \u5de6\u8fb9\u6709\u5143\u7d20\u4e14\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86\n            {\n                f = bcj_find(x), p = bcj_find(x - 1);\n                // \u67e5\u8be2\u5176\u4ee3\u8868\u5143\u7d20\uff0c\u51c6\u5907\u5408\u5e76\u5305\u542b\u8fd9\u4e24\u4e2a\u4ee3\u8868\u5143\u7d20\u7684\u4e24\u6bb5\n                if (p != f)\n                // \u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u7eed\u6bb5\u5185\n                {\n                    now -= 1ll * large[p] * large[p], now -= 1ll * large[f] * large[f];\n                    // \u6263\u9664\u8fd9\u4e24\u4e2a\u8fde\u7eed\u6bb5\u5bf9\u7b54\u6848\u7684\u8d21\u732e\n                    if (large[p] < large[f]) pa[p] = f, large[f] += large[p];\n                    else pa[f] = p, large[p] += large[f];\n                    // \u5e76\u67e5\u96c6\u6309\u79e9\u5408\u5e76\n                    now += 1ll * large[pa[f]] * large[pa[f]];\n                    // \u52a0\u4e0a\u8fd9\u4e2a\u5408\u5e76\u540e\u7684\u8fde\u7eed\u6bb5\u5bf9\u7b54\u6848\u7684\u8d21\u732e\n                    -- segs;\n                    // \u4e24\u4e2a\u6bb5\u5408\u5e76\u4e3a\u4e00\u6bb5\uff0c\u8fde\u7eed\u6bb5\u4e2a\u6570\u51cf\u53bb 1\n                }\n            }\n            if (x < n && large[x + 1] != -1)\n            // \u8fd9\u4e2a\u90e8\u5206\u662f\u548c\u53f3\u8fb9\u5408\u5e76\uff0c\u662f\u540c\u7406\u7684\n            {\n                f = bcj_find(x), p = bcj_find(x + 1);\n                if (p != f)\n                {\n                    now -= 1ll * large[p] * large[p], now -= 1ll * large[f] * large[f];\n                    if (large[p] < large[f]) pa[p] = f, large[f] += large[p];\n                    else pa[f] = p, large[p] += large[f];\n                    now += 1ll * large[pa[f]] * large[pa[f]];\n                    -- segs;\n                }\n            }\n        }\n        t.modify(segs, std::make_pair(now, i));\n        // \u66f4\u65b0\u8fde\u7eed\u6bb5\u4e2a\u6570\u4e3a segs \u65f6\u7684\u7b54\u6848\n    }\n    for (int i = 1; i <= maxn; ++ i)\n        pos[i].clear();\n    pa.clear(), large.clear();\n    pa.shrink_to_fit(), large.shrink_to_fit();\n    // \u6e05\u7a7a\u6570\u7ec4\uff0c\u907f\u514d\u4ea7\u751f\u7a7a\u95f4\u6d6a\u8d39\n    return;\n}\n```\n\n---\n\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u53c2\u89c1\u793a\u4f8b\u4ee3\u7801\uff1a\n\n```cpp\n// Luogu P5012\n#include <bits/stdc++.h>\nusing i64 = long long;\nusing i128 = __int128;\n\nconst int N = 1000010;\nint n, m, maxn = -1;\nstd::vector<int> pos[N];\nstd::vector<int> pa, large;\n\ninline void update(std::pair<i64, int> &x, const std::pair<i64, int> &y)\n{\n    if (y.first == -1) return;\n    if (x.first == -1 || 1ll * y.first * x.second > 1ll * y.second * x.first || (1ll * y.first * x.second == 1ll * y.second * x.first && y.second > x.second))\n        x = y;\n    return;\n}\n\nstruct Segment_Tree\n{\n    std::pair<i64, int> dats[N << 2];\n    std::pair<i64, int> cur;\n    int change_x, ask_x, ask_y;\n\n    void init(void)\n    {\n        fill(dats, dats + (n << 2) + 1, std::make_pair(-1, -1));\n        return;\n    }\n    void change(int p, int inl, int inr)\n    {\n        if (inl == inr)\n        {\n            update(dats[p], cur);\n            return;\n        }\n        int mid = (inl + inr) >> 1;\n        if (change_x <= mid) change(p << 1, inl, mid);\n        else change(p << 1 | 1, mid + 1, inr);\n        update(dats[p], dats[p << 1]), update(dats[p], dats[p << 1 | 1]);\n        return;\n    }\n    void modify(int x, std::pair<i64, int> now)\n    {\n        cur = now, change_x = x;\n        change(1, 0, n);\n        return;\n    } \n    void ask(int p, int inl, int inr)\n    {\n        if (ask_x <= inl && inr <= ask_y)\n        {\n            update(cur, dats[p]);\n            return;\n        }\n        int mid = (inl + inr) >> 1;\n        if (ask_x <= mid) ask(p << 1, inl, mid);\n        if (ask_y > mid) ask(p << 1 | 1, mid + 1, inr);\n        return;\n    }\n    std::pair<i64, int> query(int l, int r)\n    {\n        cur = std::make_pair(-1, -1);\n        ask_x = l, ask_y = r, ask(1, 0, n);\n        return cur;\n    }\n}t;\n\ntemplate<typename types>\nvoid read(types &x)\n{\n    x = 0; int f = 1; char ch = getchar();\n    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}\n    while (isdigit(ch)) x = x * 10 + ch - 48, ch = getchar();\n    x *= f; return;\n}\ntemplate<typename types>\nvoid write(types x)\n{\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + '0'); return;\n}\nint bcj_find(const int &x)\n{\n    return (x == pa[x]) ? pa[x] : (pa[x] = bcj_find(pa[x]));\n}\nvoid go(void)\n{\n    pa.resize(n + 1), large.resize(n + 1);\n    for (int i = 1; i <= n; ++ i)\n        pa[i] = i, large[i] = -1;\n    i64 now = 0; int segs = 0;\n    for (int i = 1; i <= maxn; ++ i)\n    {\n        int up = pos[i].size();\n        segs += up, now += up;\n        for (int j = 0; j < up; ++ j)\n        {\n            int x = pos[i][j], f, p;\n            large[x] = 1;\n            if (x > 1 && large[x - 1] != -1)\n            {\n                f = bcj_find(x), p = bcj_find(x - 1);\n                if (p != f)\n                {\n                    now -= 1ll * large[p] * large[p], now -= 1ll * large[f] * large[f];\n                    if (large[p] < large[f]) pa[p] = f, large[f] += large[p];\n                    else pa[f] = p, large[p] += large[f];\n                    now += 1ll * large[pa[f]] * large[pa[f]];\n                    -- segs;\n                }\n            }\n            if (x < n && large[x + 1] != -1)\n            {\n                f = bcj_find(x), p = bcj_find(x + 1);\n                if (p != f)\n                {\n                    now -= 1ll * large[p] * large[p], now -= 1ll * large[f] * large[f];\n                    if (large[p] < large[f]) pa[p] = f, large[f] += large[p];\n                    else pa[f] = p, large[p] += large[f];\n                    now += 1ll * large[pa[f]] * large[pa[f]];\n                    -- segs;\n                }\n            }\n        }\n        t.modify(segs, std::make_pair(now, i));\n    }\n    for (int i = 1; i <= maxn; ++ i)\n        pos[i].clear();\n    pa.clear(), large.clear();\n    pa.shrink_to_fit(), large.shrink_to_fit();\n    return;\n}\n\nint main(void)\n{\n    read(n), read(m);\n    for (int i = 1, inpx; i <= n; ++ i)\n        read(inpx), pos[inpx].push_back(i), maxn = std::max(maxn, inpx);\n    t.init(), go();\n\n    i64 inpa, inpb, inpx, inpy, inpl, inpr, last = 0;\n    for (int i = 1; i <= m; ++ i)\n    {\n        read(inpa), read(inpb), read(inpx), read(inpy);\n        inpl = (i128(inpa) * last + inpx - 1) % n + 1;\n        inpr = (i128(inpb) * last + inpy - 1) % n + 1;\n        if (inpl > inpr) std::swap(inpl, inpr);\n        std::pair<i64, int> ans = t.query(inpl, inpr);\n        write(ans.first), putchar(' '), write(ans.second), putchar('\\n');\n        write(inpl), putchar(' '), write(inpr), putchar(' '), write(last % n), putchar('\\n');\n        last = ans.first * ans.second;\n    }\n\n    return 0;\n}\n```",
        "postTime": 1667573577,
        "uid": 552165,
        "name": "ComplexPlanck",
        "ccfLevel": 0,
        "title": "P5012-Solution"
    },
    {
        "content": "[\u6c34\u306e\u6570\u5217](https://www.luogu.com.cn/problem/P5012)\n\n### \u9898\u76ee\u5927\u610f\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570\u5217 $a$\uff0c\u9009\u62e9\u4e00\u4e2a\u6570 $x$\uff0c\u5b9a\u4e49\u5176\u5f97\u5206\u4e3a\u6570\u5217\u4e2d\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u6570\u5f62\u6210\u7684\u82e5\u5e72\u4e2a\u8fde\u7eed\u533a\u95f4\u7684\u5e73\u65b9\u548c\u9664\u4ee5 $x$ \u6240\u5f97\u5230\u7684\u6570\u3002\n\n\u73b0\u8fdb\u884c\u591a\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a\u4e24\u4e2a\u6570 $l,r$\uff0c\u8981\u6c42\u51fa\u4e00\u4e2a\u5f97\u5206\u6700\u5927\u7684 $x$\uff0c\u6ee1\u8db3\u6570\u5217\u4e2d\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u6570\u5f62\u6210\u7684\u82e5\u5e72\u4e2a\u8fde\u7eed\u533a\u95f4\u7684\u4e2a\u6570\u5728 $l$ \u5230 $r$ \u4e4b\u95f4\u3002\n\n\u5f3a\u5236\u5728\u7ebf\u3002\n\n### \u601d\u8def\u5206\u6790\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u5f97\u5206\u6700\u5927\u7684 $x$ \u4e00\u5b9a\u662f\u6570\u5217\u4e2d\u7684\u4e00\u4e2a\u6570\u3002\u8003\u8651\u53cd\u8bc1\u6cd5\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u7684\u5f97\u5206\u6700\u5927\u7684 $x$ \u4e0d\u662f\u6570\u5217\u4e2d\u7684\u6570\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u5c06 $x$ \u53d8\u6210\u6570\u5217\u4e2d\u6700\u5927\u7684\u5c0f\u4e8e $x$ \u7684\u6570\uff0c\u5206\u5b50\u4e0d\u53d8\uff0c\u5206\u6bcd\u53d8\u5c0f\uff0c\u5f97\u5206\u589e\u5927\u3002\n\n\u90a3\u4e48\u8fd9\u5c31\u610f\u5473\u7740 $x$ \u7684\u53d6\u503c\u53ea\u6709 $O(n)$ \u7ea7\u522b\uff0c\u53c8\u56e0\u4e3a\u5f97\u5206\u6ca1\u6709\u5355\u8c03\u6027\uff08\u5bb9\u6613\u6784\u9020\uff0c\u6bd4\u5982 `1 100 4 3`\uff09\uff0c\u6240\u4ee5\u8003\u8651\u4ece\u5c0f\u5230\u5927\u679a\u4e3e $x$ \u7684\u53d6\u503c\u3002\n\n\u7531\u4e8e $x$ \u5355\u8c03\uff0c\u90a3\u4e48\u6570\u5217\u4e2d\u88ab\u6807\u8bb0\u7684\u6570\u7684\u4e2a\u6570\u4e5f\u4e00\u5b9a\u5355\u8c03\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u6570\u5f62\u6210\u7684\u8fde\u901a\u5757\uff0c$O(n\\log n)$ \u9884\u5904\u7406\u51fa\u5bf9\u4e8e $x$ \u7684\u6bcf\u4e00\u4e2a\u53d6\u503c\uff0c\u5f97\u5230\u7684\u5f97\u5206\u548c\u8fde\u901a\u5757\u7684\u5757\u6570\u3002\n\n\u5177\u4f53\u7684\u8bf4\uff0c\u5148\u5c06\u539f\u6570\u5217\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u679a\u4e3e $x$\uff08\u8fd9\u91cc\u6307\u7684\u662f\u679a\u4e3e $x$ \u7684\u53ef\u80fd\u53d6\u503c\uff09\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u5217\u4e2d\u7b49\u4e8e $x$ \u7684\u6570\uff0c\u5224\u65ad\u662f\u5426\u4e0e\u5176\u5de6\u53f3\u7684\u6570\u5408\u5e76\u5373\u53ef\u3002\u5408\u5e76\u65f6\u53ef\u4ee5 $O(1)$ \u66f4\u65b0\u4fe1\u606f\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u9884\u5904\u7406\u65f6\uff0c\u5df2\u7ecf\u5f97\u5230\u4e86\u6bcf\u4e00\u4e2a $x$ \u6240\u5bf9\u5e94\u7684\u533a\u95f4\u4e2a\u6570\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\u957f\u5ea6\u7684\u6240\u6709\u53ef\u80fd\u7684 $x$ \u6240\u5bf9\u5e94\u7684\u5f97\u5206\u53d6\u4e00\u4e2a\u6700\u503c\uff0c\u518d\u5bf9\u4e8e\u533a\u95f4\u957f\u5ea6\u7684\u5f97\u5206 RMQ \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7531 RMQ \u7684\u6570\u636e\u7ed3\u6784\u51b3\u5b9a\uff0c\u4f46\u4e0d\u4f4e\u4e8e $O(n\\log n)$\u3002\n\n- \u4e00\u4e9b\u7ec6\u8282\n\n\u6570\u636e\u5728\u89e3\u5bc6\u65f6\u53ef\u80fd\u7206 `long long`\uff0c\u53ef\u4ee5\u5f00 `__int128` \u6216\u8bfb\u5165\u540e\u5148\u53d6\u6a21\u3002\n\n\u5728\u65e0\u89e3\u65f6\u8f93\u51fa `-1 -1` \u540e\u5c06 `lastans` \u8bbe\u4e3a $1$\u3002\n\n\u521d\u59cb\u65f6 `lastans` \u4e3a $0$\u3002\n\n### \u4ee3\u7801\n\n```\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nconst int N=1001000,M=1010;\ntypedef long long ll;\n\nint T,n,tot,S,m,in1,in2,in3,in4;\nint fa[N],siz[N],a[N],c[N];\nint maxn[N],maxi[M],l[M],r[M],pos[N];//\u7a7a\u95f4\u4e00\u5b9a\u8981\u5f00\u591f\nll now,ans[N],lastans;\n\nvector <int> v[N];\n\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nvoid merge(int x,int y){\n    x=find(x);y=find(y);\n    if(x==y) return ;\n    now-=1ll*siz[x]*siz[x]+siz[y]*siz[y];//\u53bb\u9664\u8d21\u732e\n    tot--;siz[x]+=siz[y];fa[y]=x;\n    now+=1ll*siz[x]*siz[x];//\u589e\u52a0\u8d21\u732e\n}\n\nbool compare(int x,int y){return 1ll*ans[x]*c[y]<1ll*ans[y]*c[x];}//\u5206\u6570\u6bd4\u8f83\u5927\u5c0f\uff0cc[x] \u662f\u5b9e\u9645\u7684 x\uff0cans[x] \u662f\u5f97\u5206\u7684\u5206\u5b50\n\nvoid query_t(int &res,int x,int y,int g[]){\n    for(int i=x;i<=y;i++)\n        if(compare(res,g[i])) res=g[i];\n}\n\nint query(int x,int y){//RMQ\n    int res=0;\n    if(pos[x]==pos[y]){query_t(res,x,y,maxn);return res;}\n    query_t(res,x,r[pos[x]],maxn);\n    query_t(res,l[pos[y]],y,maxn);\n    query_t(res,pos[x]+1,pos[y]-1,maxi);\n    return res;\n}\n\nint main(){\n    memset(l,0x3f,sizeof l);\n    scanf(\"%d%d\",&n,&T);\n    S=sqrt(n);m=n;//RMQ \u4f7f\u7528\u5206\u5757\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&a[i]);\n        c[i]=a[i];\n        pos[i]=(i-1)/S+1;//\u6bcf\u4e2a\u6570\u6240\u5728\u5757\n    }\n    for(int i=1;i<=n;i++){//\u521d\u59cb\u5316\u5757\u7aef\u70b9\u548c\u5e76\u67e5\u96c6\n        fa[i]=i;siz[i]=1;\n        l[pos[i]]=min(l[pos[i]],i);\n        r[pos[i]]=max(r[pos[i]],i);\n    }\n    sort(c+1,c+m+1);//\u79bb\u6563\u5316\n    m=unique(c+1,c+m+1)-c-1;\n    for(int i=1;i<=n;i++){\n        a[i]=lower_bound(c+1,c+m+1,a[i])-c;\n        v[a[i]].push_back(i);//\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u79bb\u6563\u5316\u540e\u7684\u503c\u5f00\u4e00\u4e2a vector \u5b58\u4e0b\u6807\n    }\n    ans[0]=-1;\n    c[0]=1;\n    for(int x=1;x<=m;x++){\n        now+=v[x].size();tot+=v[x].size();//\u7b49\u4e8e x \u7684\u6570\u6709 v[x].size() \u4e2a\n        //now \u8868\u793a\u5e73\u65b9\u548c\uff0ctot \u8868\u793a\u4e2a\u6570\n        for(auto it:v[x]){//\u904d\u5386\u6240\u6709\u7b49\u4e8e x \u7684\u6570\n            if(it!=1&&a[it-1]<=x) merge(it,it-1);//\u7279\u5224\u8fb9\u754c\n            if(it!=n&&a[it+1]<=x) merge(it,it+1);//\u5982\u679c\u65c1\u8fb9\u7684\u6570 <= x \u5c31\u4e00\u5b9a\u88ab\u6807\u8bb0\u6216\u5373\u5c06\u88ab\u6807\u8bb0\n        }\n        ans[x]=now;\n        if(compare(maxn[tot],x)){\n            maxn[tot]=x;//\u66f4\u65b0\u5355\u70b9\u7b54\u6848\n            if(compare(maxi[pos[tot]],x))\n                maxi[pos[tot]]=x;//\u66f4\u65b0\u5757\u5185\u7b54\u6848\n        }\n    }\n    while(T--){\n        scanf(\"%d%d%d%d\",&in1,&in2,&in3,&in4);\n        in1%=n;in2%=n;in3%=n;in4%=n;//\u8bfb\u5165\u540e\u53d6\u6a21\n        int l=(1ll*in1*lastans%n+in3-1+n)%n+1;\n        int r=(1ll*in2*lastans%n+in4-1+n)%n+1;\n        if(l>r) swap(l,r);\n        int res=query(l,r);\n        if(!res){printf(\"-1 -1\\n%d %d %lld\\n\",l,r,lastans);lastans=1;}\n        else{\n            printf(\"%lld %d\\n%d %d %lld\\n\",ans[res],c[res],l,r,lastans);\n            lastans=1ll*(ans[res]%n)*(c[res]%n)%n;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1683869806,
        "uid": 986683,
        "name": "_Ponder_",
        "ccfLevel": 0,
        "title": "P5012 \u6c34\u306e\u6570\u5217 \u9898\u89e3"
    }
]