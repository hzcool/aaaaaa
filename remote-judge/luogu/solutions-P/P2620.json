[
    {
        "content": "#### \u603b\u4f53\u601d\u8def\uff1a\u79bb\u6563\u5316 + \u5efa\u56fe + \u5355\u6e90\u6700\u77ed\u8def\n######  \uff08~~\u770b\u89c1\u4eba\u5c11\u849f\u84bb\u624d\u6562\u53d1\u9898\u89e3QAQ~~\uff09\n---\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\n+ \u8003\u8651\u5230w\u8303\u56f4\u8f83\u5927\uff0c\u800c\u5b9e\u9645\u866b\u6d1e\u6570\u91cf\u8f83\u5c0f\uff0c\u5c31\u53ea\u8bb0\u5f55\u866b\u6d1e\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\u6765\u5efa\u56fe\u3002\n+ \u5efa\u56fe\u65f6\uff0c\u866b\u6d1e\u8d77\u70b9\u53ef\u4ee5\u53bb\u91cd\u3002\n+ \u5728\u5efa\u56fe\u65f6b\u3001e\u4e24\u70b9\u7684\u8ddd\u79bb\u5e76\u4e0d\u4e00\u5b9a\u4e3a\uff08e-b+s-1\uff09/s\u3002\u6bd4\u5982\u5f53\u6211\u4ece0\u5904\u8d70\u52306\u5904\uff0c\u9650\u5b9a\u6b65\u6570\u4e3a3\u65f6\uff0c\u7406\u8bba\u4e0a\u662f\u8d702\u6b65\uff0c\u4f46\u5982\u679c3\u5904\u6709\u866b\u6d1e\u65e0\u6cd5\u505c\u7559\uff0c\u5219\u53ea\u80fd0->2->5->6\u8d704\u6b65\u3002\n```cpp\n#include <bits/stdc++.h>\n#define r(x) scanf(\"%d\",&x)\nconst int I=50;\nusing namespace std;\nset<int>s;//\u53bb\u91cd\nint w,st,p,c;\nint l[I*2],x[I],y[I];//l[]\u4e3a\u79bb\u6563\u5316\u6570\u7ec4\uff0cx[]\u4e3a\u866b\u6d1e\u8d77\u70b9,y[]\u4e3a\u866b\u6d1e\u7ec8\u70b9\nint d[I*2][I*2];\nint F(int b,int e){//\u6c42\u89e3\u4e24\u70b9\u95f4\u8ddd\u79bb\n\t\tif(b==e)return 0;\n\t\tif(s.count(b))return 0x3fffffff;\n\t\tint k=e;\n      for(int i=1;i<=p;i++)\n          if(b<x[i]&&x[i]<k&&(x[i]-b)%st==0)k=x[i];//\u67e5\u627e\u7b2c\u4e00\u4e2a\u843d\u811a\u70b9\n      while(k!=e&&s.count(k))k--;\n      if(k==b)return 0x3fffffff;\n      return F(k,e)+(k-b+st-1)/st;\n}\nint Q(int x) {//\u7531\u539f\u70b9\u627e\u79bb\u6563\u5316\u540e\u7684\u70b9\n      return lower_bound(l+1,l+c+1,x)-l;\n}\nvoid Floyd(){//\u6c42\u89e3\u6700\u77ed\u8def\n      for(int k=1;k<=c;k++)\n      for(int i=1;i<=c;i++)\n      for(int j=1;j<=c;j++)\n          d[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n}\nint main(){\n      r(w);\n      while(w!=0){\n          r(st);r(p);\n          s.clear();\n          memset(l,0,sizeof l);\n          memset(x,0,sizeof x);\n          memset(y,0,sizeof y);\n          c=0;\n          l[++c]=0;l[++c]=w;\n          for(int i=1;i<=p;i++)\n              r(x[i]),r(y[i]),s.insert(x[i]),l[++c]=x[i],l[++c]=y[i];\n          sort(l+1,l+c+1);\n          c=unique(l+1,l+c+1)-l-1;\n          memset(d,0x3f,sizeof d);\n          for(int i=1;i<=p;i++)\n              d[Q(x[i])][Q(y[i])]=0;//\u866b\u6d1e\u8d77\u7ec8\u70b9\u8ddd\u79bb\u4e3a0\n          for(int i=1;i<c;i++)\n          for(int j=i+1;j<=c;j++)\t\n              d[i][j]=min(d[i][j],F(l[i],l[j]));//\u521d\u59cb\u5316\n          Floyd();\n          cout<<d[1][c]<<endl;\n          r(w);\n      }\n      return 0;\n}\n```",
        "postTime": 1564730101,
        "uid": 81777,
        "name": "JNK_DOG",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2620 \u3010\u866b\u6d1e\u3011"
    },
    {
        "content": "\u770b\u8d77\u6765\u8fd9\u9898\u6211\u662f\u7b2c\u4e00\u4e2aAC\u7684\u3002\u597d\u5427\uff0c\u8fd9\u9898\u9898\u610f\u786e\u5b9e\u6bd4\u8f83\u5751\u3002\n\n\u9996\u5148\u8bf4\u4e00\u4e0b\u9898\u76ee\u80cc\u666f\uff1a\u8fd9\u672c\u6765\u662f\u77f3\u5bb6\u5e84\u4e8c\u4e2d\u6821\u5185\u96c0\u5de2\u5496\u5561\u676f\u6a21\u62df\u8d5b\u7684\u9898\u76ee\uff0c\u539f\u672c\u6709\u6807\u7a0b\u6ca1\u6709\u9898\u89e3......\n\n\u6211\u4eec\u90fd\u662f\u5543\u751f\u8089\u5543\u8fc7\u6765\u7684......(\u7ba1\u7406\u5458\u539f\u8c05\u6211\u8fd9\u4e48\u591a\u5e9f\u8bddQAQ)\n\n\u597d\u5427\uff0c\u8bf4\u6b63\u4e8b\uff1a\n\n\u8fd9\u9053\u9898\u76ee\u5b9a\u4e49\u866b\u6d1e\u53ef\u4ee5\u4e0d\u8fdb\u53bb\u7684\u524d\u63d0\uff0c\u662f\u4eba\u7269\u53ef\u4ee5 \u901a\u8fc7\u8c03\u6574\u6b65\u957f \u4ece \u4e00\u4e2a\u6ca1\u6709\u866b\u6d1e\u7684\u70b9 \u76f4\u63a5\u8df3\u5230 \u53e6\u4e00\u4e2a\u6ca1\u6709\u866b\u6d1e\u7684\u70b9 \u3002\n\n\u6240\u4ee5\uff0c\u5982\u679c\u5728 \u67d0\u4e00\u4e2a\u4f4d\u7f6e\u524d\u9762 \u7684 \u6700\u5927\u6b65\u957f\u7684\u4f4d\u7f6e \u5168\u90fd\u6709\u866b\u6d1e\u7684\u8bdd\uff0c\u4ed6\u5fc5\u987b\u8fdb\u53bb\u4e00\u4e2a\u3002\n\n\u90a3\u4e48\uff0c\u8fd9\u4e00\u6bb5\u4e4b\u540e\u7684\u866b\u6d1e\u4fbf\u5168\u90fd\u65e0\u6cd5\u76f4\u63a5\u5230\u8fbe\u3002\n\n\u5efa\u51fa\u56fe\u6765\u76f4\u63a5SPFA\u5c31\u884c\u4e86\u3002\n\n\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u5efa\u56fe\u8fde\u8fb9\u7684\u65f6\u5019\u5224\u4e00\u4e0b\u3002\u6ce8\u610f\u5230\u6b65\u957f\u5f88\u5c0f\uff0c\u6211\u4e8e\u662f\u6211\u9009\u62e9\u5728\u540c\u4f59\u7cfb\u4e0bDP\u5b9e\u73b0\u3002\n\n\u5177\u4f53\u7ec6\u8282\u770b\u4ee3\u7801\u5427\u3002\n\n\n\u6700\u540e\u4e0a\u4ee3\u7801\uff1a\n\n \n \n \n \n \n \n \n \n     \n         \n \n \n \n     \n             \n         \n         \n             \n         \n         \n         \n         \n         \n         \n     \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<cmath>\n#define lli long long int\n#define debug cout\nusing namespace std;\nconst int maxn=4e1+1e1,maxm=1.6e3+5e2;\nconst int inf=0x3f3f3f3f;\nint s[maxn],t[maxm],nxt[maxm],l[maxm],cnt;\nint st[maxn],ed[maxn];\nint w,dv,n,lam;\nlli dis[maxn];\nbool inq[maxn];\nint f[20],g[20];\nstruct node\n{\n    int st,ed;\n    friend bool operator < (const node &a,const node &b)\n    {\n        return a.st<b.st;\n    }\n}ns[maxn];\ninline void addedge(int from,int to,int len)\n{\n    t[++cnt]=to;\n    l[cnt]=len;\n    nxt[cnt]=s[from];\n    s[from]=cnt;\n}\ninline int ceildiv(int x)\n{\n    return (x+dv-1)/dv;\n}\nbool judge(int x)\n{\n    for(int i=0;i<dv;i++)\n        if(x-i>=0&&*lower_bound(st+1,st+1+n,x-i)!=x-i) return 0;\n    return 1;\n}\ninline void core_add(int x)\n{\n    f[0]=0;\n    for(int i=1;i<dv;i++) f[i]=1;\n    int lst=0,nlst,delta;\n    for(int i=1;i<=n;i++)\n        if(i!=x&&st[i]>=ed[x])\n        {\n            memset(g,0x3f,sizeof(g));\n            delta=st[i]-ed[x];\n            nlst=delta/dv;\n            for(int k=0;k<dv;k++)\n                for(int j=0;j<dv;j++)\n                    if(nlst*dv+k>=lst*dv+j)\n                    {\n                        g[k]=min(g[k],f[j]+ceildiv(nlst*dv+k-lst*dv-j));\n                    }\n            addedge(x,i,g[delta%dv]);\n            g[delta%dv]=inf;\n            for(int k=0;k<dv;k++) f[k]=g[k];\n            lst=nlst;\n            if(judge(st[i])) return;\n        }\n}\ninline void spfa(int st)\n{\n    memset(inq,0,sizeof(inq));\n    memset(dis,0x3f,sizeof(dis));\n    queue<int> q;\n    dis[st]=0;\n    inq[st]=1;\n    q.push(st);\n    while(!q.empty())\n    {\n        const int pos=q.front();\n        q.pop();\n        inq[pos]=0;\n        int at=s[pos];\n        while(at)\n        {\n            if(dis[t[at]]>dis[pos]+l[at])\n            {\n                dis[t[at]]=dis[pos]+l[at];\n                if(!inq[t[at]])\n                {\n                    q.push(t[at]);\n                    inq[t[at]]=1;\n                }\n            }\n            at=nxt[at];\n        }\n    }\n}\ninline int getint()\n{\n    int ret=0,fix=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-') fix=-1; ch=getchar();}\n    while(ch>='0'&&ch<='9')\n        ret=ret*10+(ch-'0'),\n        ch=getchar();\n    return ret*fix;\n}\ninline void init()\n{\n    memset(t,0,sizeof(t));\n    memset(nxt,0,sizeof(nxt));\n    memset(l,0,sizeof(l));\n    memset(inq,0,sizeof(inq));\n    memset(s,0,sizeof(s));\n    memset(st,0,sizeof(st));\n    memset(ed,0,sizeof(ed));\n    cnt=0;\n}\nint main()\n{\n    int cse;\n    while(w=getint())\n    {\n        init();\n        dv=getint(),n=getint();\n        lam=dv-1;\n        for(int i=1;i<=n;i++)\n            ns[i].st=getint(),ns[i].ed=getint();\n        sort(ns+1,ns+1+n);\n        for(int i=1;i<=n;i++)\n            st[i]=ns[i].st,ed[i]=ns[i].ed;\n        st[n+1]=ed[n+1]=0;\n        st[n+2]=ed[n+2]=w;\n        n+=2;\n        for(int i=1;i<=n;i++)\n        {\n            core_add(i);\n        }\n        spfa(n-1);\n        printf(\"%lld\\n\",dis[n]);\n    }\n    return 0;\n}\n```",
        "postTime": 1510191143,
        "uid": 31907,
        "name": "cmd2001",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2620 \u3010\u866b\u6d1e\u3011"
    },
    {
        "content": "\u9996\u5148\u5b89\u5229\u6211\u7684\u535a\u5ba2\u56ed\uff0c\u5c31\u5feb\u5199\u597d\u4e86\u8fd8\u6709\u4e00\u70b9\u7ec6\u8282\u9700\u8981\u5b8c\u5584\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.cnblogs.com/suxxsfe/p/12571137.html)\u83b7\u5f97\u66f4\u597d\u9605\u8bfb\u4f53\u9a8c  \n\n\u8fd9\u4e2a\u9898\u89e3\u6bd4\u8f83\u8be6\u7ec6\u6bd4\u8f83\u957f\uff0c\u9002\u5408\u840c\u65b0  \n\n------------\n\n## \u9898\u76ee\u80cc\u666f\napplepi \u60f3\u8fdb\u884c\u5b87\u5b99\u65c5\u884c\u3002\u5f53\u7136\uff0capplepi \u77e5\u9053\u8fd9\u662f\u6709\u53ef\u80fd\u7684\uff0c\u56e0\u4e3aapplepi \u7684\u7279\u6b8a\u80fd\u529b\u80fd\u4f7f\u4ed6\u89c2\u6d4b\u5230\u5b87\u5b99\u4e2d\u7684\u866b\u6d1e\u3002\u6240\u8c13\u866b\u6d1e\u5c31\u662f\u4e00\u4e2a\u5728\u4e09\u7ef4\u4e4b\u5916\u7684\u7ef4\u5ea6\u6253\u5f00\u7684\u5feb\u6377\u901a\u9053\uff0c\u901a\u8fc7\u866b\u6d1e\u80fd\u591f\u4ece\u4e00\u4e2a\u5730\u65b9\u77ac\u95f4\u79fb\u52a8\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\u3002  \n\n## \u9898\u76ee\u63cf\u8ff0\n\u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u4e00\u7ef4\u5750\u6807\u7cfb\uff0c\u5730\u7403\u7684\u4f4d\u7f6e\u4e3a$0$\uff0c\u800capplepi \u7684\u76ee\u7684\u5730\u7684\u4f4d\u7f6e\u662f\u4e00\u4e2a\u6b63\u6574\u6570W\u3002\u5728\u6bcf\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u91cc\uff0capplepi\u53ef\u4ee5\u5411\u6b63\u65b9\u5411\u79fb\u52a8\u4e0d\u8d85\u8fc7$S$ \u7684\u4e00\u4e2a\u6574\u6570\u3002\u866b\u6d1e\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u4e8c\u5143\u7ec4$(B, E)$\uff0c\u5373\u5982\u679c\u5728\u67d0\u6b21\u79fb\u52a8\u4e4b\u540eapplepi \u5728\u4f4d\u7f6e$B$\uff0c\u90a3\u4e48applepi \u5c31\u4f1a\u88ab\u7acb\u523b\u4f20\u9001\u5230\u4f4d\u7f6e$E$\u3002\u6ce8\u610f\uff0capplepi \u5728\u79fb\u52a8\u8fc7\u7a0b\u4e2d\u5982\u679c\u7ecf\u8fc7\u4f4d\u7f6e$B$\uff0c\u7531\u4e8eapplepi \u7684\u901f\u5ea6\u6781\u5feb\u662f\u4e0d\u4f1a\u88ab\u4f20\u9001\u7684\u3002\u800c\u4e14\uff0capplepi \u4e0d\u80fd\u591f\u5411\u8d1f\u65b9\u5411\u79fb\u52a8\uff0c\u4f46\u662f\u866b\u6d1e\u5f15\u8d77\u7684\u9664\u5916\u3002\u73b0\u5728applepi \u60f3\u8bf7\u4f60\u5e2e\u52a9\u4ed6\u8ba1\u7b97\u4e00\u4e0b\u4ed6\u81f3\u5c11\u9700\u8981\u591a\u5c11\u4e2a\u5355\u4f4d\u65f6\u95f4\u624d\u80fd\u591f\u5230\u8fbe\u76ee\u7684\u5730\u3002  \n\n## \u8f93\u5165\u683c\u5f0f  \n\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002  \n\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e09\u4e2a\u6b63\u6574\u6570 $W,S,P$\uff0c\u8868\u793a\u76ee\u7684\u5730\u4f4d\u7f6e\uff0c\u79fb\u52a8\u9650\u5236\u548c\u866b\u6d1e\u7684\u6570\u76ee\u3002\u4e4b\u540e $P$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570$B$ \u548c$E$\uff0c\u8868\u793a\u4e00\u4e2a\u866b\u6d1e\u3002  \n\n\u8f93\u5165\u6587\u4ef6\u7684\u6700\u540e\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 $0$\uff0c\u8868\u793a\u8f93\u5165\u7684\u7ed3\u675f\u3002  \n\n## \u8f93\u51fa\u683c\u5f0f\n\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u5728\u5355\u72ec\u7684\u4e00\u884c\u5185\u8f93\u51fa\u7ed3\u679c\u3002  \n\n\u5bf9\u4e8e $100%$ \u7684\u6570\u636e\uff0c$W\\leq 10^9,2\\leq S\\leq 6,1\\leq p\\leq 40$\uff0c\u6ca1\u6709$B = 0$ \u6216\u8005$B = W$ \u7684\u866b\u6d1e\uff0c\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u76ee\u7684\u5730\u53ef\u8fbe\u3002  \n\n---------  \n\n\u4ece[\u7b80\u5355\u56fe\u8bba](https://www.luogu.com.cn/training/3112#information)\u90a3\u4e2a\u9898\u5355\u70b9\u8fdb\u6765\u7684\uff0c\u672c\u6765\u60f3A\u4e86\u4ee5\u540e\u5c31\u53bb\u505a\u5176\u5b83\u56fe\u8bba\u9898\u5355\u4e0a\u7684\u9898\uff0c\u7ed3\u679c\u4e00\u5929\u5c31\u8c03\u51fa\u6765\u8fd9\u4e00\u4e2a\u3002\u3002\u3002  \n\u9996\u5148\uff0c\u6211\u89c9\u5f97\u8fd9\u4e0d\u80fd\u662f\u4e00\u4e2a\u7eff\u9898\uff0c\u5dee\u4e0d\u591a\u8981\u662f\u84dd\uff0c\u867d\u7136\u601d\u8def\u4e0d\u96be\uff0c\u4f46\u5b9e\u73b0\u9700\u8981\u70b9\u529f\u592b\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u7ba1\u7406\u5458\u770b\u89c1\u5e0c\u671b\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u96be\u5ea6\u662f\u5426\u6070\u5f53~~\u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u662f\u6211\u592a\u84bb~~  \n\n-------------  \n\n## \u9996\u5148\u79bb\u6563\u5316\uff1a\n\u8a00\u5f52\u6b63\u4f20\uff0c\u89c2\u5bdf\u5230\uff0c$w$\u7279\u522b\u5927\uff0c\u4f46$p,s$\u5f88\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4ece$p,s$\u5165\u624b~~\u5f00\u59cb\u4e71\u641e~~  \n\u5efa\u56fe\u80af\u5b9a\u4e0d\u80fd\u4e00\u4e2a\u6570\u8f74\u70b9\u5bf9\u5e94\u4e00\u4e2a\u8282\u70b9\u4e86\uff0c\u8003\u8651\u5230\u8d77\u8f83\u5927\u4f5c\u7528\u7684\u70b9\u53ea\u6709\u866b\u6d1e\u7684\u4e24\u4e2a\u7aef\u70b9  \n\u6240\u4ee5\u7528\u4e00\u4e0b\u79bb\u6563\u5316\uff0c\u53ea\u4fdd\u7559\u866b\u6d1e\u5165\u53e3\u548c\u51fa\u53e3\uff0c\u5f53\u7136\u8fd8\u8981\u4fdd\u7559\u8d77\u70b9$(0)$\u548c\u7ec8\u70b9$(w)$\u8fd9\u6837\u70b9\u6570\u662f$2p+2$\uff0c\u505a\u5b8c\u79bb\u6563\u5316\u540e\u5b58\u5728$map$\u6570\u7ec4\u4e2d  \n\n\u5173\u4e8e\u79bb\u6563\u5316\uff0c\u901a\u4fd7\u7684\u8bb2\uff0c\u5c31\u662f\u628a\u6ca1\u7528\u7684\u5143\u7d20\u53bb\u6389\uff0c\u6bd4\u5982\u8fd9\u4e2a\u9898\u4e24\u4e2a\u866b\u6d1e\u7684\u7aef\u70b9\u4e4b\u95f4\u7684\u90a3\u4e00\u5806\u70b9\uff0c\u5c31\u662f\u6ca1\u7528\u7684\uff0c\u4e0d\u5fc5\u4fdd\u5b58\u4e0b\u6765\uff0c\u53ea\u4fdd\u5b58\u6709\u7528\u7684\u70b9\uff08\u866b\u6d1e\u7aef\u70b9\uff0c\u8d77\u70b9\u7ec8\u70b9\uff09\uff0c\u5b58\u4e0b\u4ed6\u4eec\u7684\u5750\u6807\u5c31\u884c\uff08\u5b58\u5750\u6807\u7684\u90a3\u4e2a$map$\u6570\u7ec4\u7684\u4e0b\u6807\u4e5f\u5c31\u662f\u5efa\u56fe\u65f6\u7684\u8282\u70b9\u7f16\u53f7\uff09  \n\u7136\u540e\u8fd8\u8981\u6392\u4e2a\u5e8f\uff0c\u65b9\u4fbf\u4e0b\u9762\u64cd\u4f5c  \n\u8fd9\u73a9\u610f\u4e5f\u542c\u5e38\u7528\uff0c\u66f4\u4e3a\u6df1\u5165\u7684\u81ea\u5df1\u53bb\u767e\u5ea6\u5427\uff0c\u771f\u7684\u4e0d\u96be  \n\n## \u7136\u540e\u60f3\u529e\u6cd5\u5efa\u56fe\uff1a  \n\u90a3\u4e48\u5982\u4f55\u5efa\u56fe\uff1f  \n\u9996\u5148\u866b\u6d1e\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u80af\u5b9a\u662f\u8981\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a$0$\u7684\u8fb9\uff0c\u81f3\u4e8e\u5982\u4f55\u901a\u8fc7\u70b9\u7684\u7ec4\u6807\u786e\u5b9a\u5176\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u7528\u4e8c\u5206\u5b9e\u73b0\uff0c\u8fd9\u662f\u79bb\u6563\u5316\u7684\u4f20\u7edf\u6280\u80fd  \n\n\u56e0\u4e3a\u6211\u4eec\u8d70\u8def\u80af\u5b9a\u8981\u501f\u52a9\u866b\u6d1e\uff0c\u4e0d\u7528\u866b\u6d1e\u8d70\u7684\u8def\u5c31\u662f\uff1a\u4ece\u4e00\u4e2a\u866b\u6d1e\u7684\u7ec8\u70b9\uff0c\u8d70\u5230\u53e6\u4e00\u4e2a\u866b\u6d1e\u7684\u8d77\u70b9  \n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e24\u4e2a\u6709\u7528\u7684\u70b9\uff0c\u8ba1\u7b97\u4ed6\u4eec\u7684\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u70b9\u7684\u5750\u6807\u662f\u4e00\u4e2a\u8d77\u70b9\uff0c\u5c31\u4e0d\u8ba1\u7b97\u76f4\u63a5\u8fd4\u56de\u65e0\u7a77\u5927  \n\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u4ece\u4e00\u4e2a\u8d77\u70b9\u5f00\u59cb\u8d70\uff0c\u8d70\u5230\u90a3\u4f1a\u63a5\u7740\u88ab\u4f20\u9001\u8d70\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8d70\u5230\u4e00\u4e2a\u8d77\u70b9\uff0c\u8d70\u5230\u90a3\u4ee5\u540e\u63a5\u7740\u4f1a\u4ece\u8fb9\u957f\u4e3a$0$\u7684\u866b\u6d1e\u8fb9\u8d70\u5230\u5b83\u5bf9\u5e94\u7684\u7ec8\u70b9  \n\n\u5bf9\u4e8e\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u662f\u8d77\u70b9\uff0c\u6211\u7528\u7684`map<int,int>`\uff0c\u5bf9\u6bcf\u4e2a\u8d77\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u9898\u89e3\u533a\u597d\u591a\u5927\u4f6c\u7528\u5230\u662f`set`\uff0c\u4e0d\u8fc7\u672c\u8d28\u4e00\u6837  \n\n## \u518d\u8003\u8651\u975e\u866b\u6d1e\u8fb9\u7684\u8fb9\u6743\u548b\u8ba1\u7b97\uff1a  \n\u8bbe$x,y$\u5206\u522b\u662f\u8981\u8ba1\u7b97\u7684\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\uff0c\u7ec8\u70b9  \n\u9996\u5148\u60f3\u5230\u7684\u662f$\\lceil\\dfrac{y-x}{s}\\rceil$  \n\u7136\u800c\u8fd9\u6837\u5199\u5b8c\u4ee5\u540e\u5c31\u4f1a~~\u50cf\u6211\u4e00\u6837~~\u5f97\u523010\u5206\u7684\u597d\u6210\u7ee9  \n\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5728$[x,y]$\u4e2d\uff0c\u8fd8\u6709\u4e00\u4e9b\u70b9\u662f\u866b\u6d1e\u5165\u53e3\uff0c\u662f\u4e0d\u80fd\u8e29\u7684\uff0c\u4e00\u8e29\u5c31\u88ab\u4f20\u9001\u8d70\u4e86  \n\u4f8b\u5b50\u697c\u4e0a\u6709\u5927\u4f6c\u7ed9\u51fa\u4e86  \n\n\u90a3\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u9012\u5f52\u7684\u8ba1\u7b97\uff08\u5176\u5b9e\u4e00\u5f00\u59cb\u60f3\u5199\u6210\u975e\u9012\u5f52\uff0c\u70b8\u4e86\uff0c\u770b\u6765\u9898\u89e3\u5c31\u5199\u7684\u9012\u5f52  \n\u5148\u8d2a\u5fc3\u7684\u6bcf\u6b65\u90fd\u8d70$s$\uff0c\u770b\u770b\u8fd9\u6837\u8d70\u7b2c\u4e00\u4e2a\u9047\u5230\u7684\u866b\u6d1e\u5165\u53e3\u662f\u54ea\u4e2a  \n\u81f3\u4e8e\u5982\u4f55\u5b9e\u73b0\uff0c\u80af\u5b9a\u5c31\u662f\u679a\u4e3e\u6bcf\u4e2a\u866b\u6d1e\uff0c~~\u90fd\u8bf4\u4e86p\u5f88\u5c0f~~  \n\n\u9047\u5230\u4e86\u866b\u6d1e\u5165\u53e3\uff0c\u5c31\u8981\u4e00\u683c\u4e00\u683c\u5f80\u56de\u9000\uff0c\u76f4\u5230\u9047\u89c1\u4e86\u4e0d\u662f\u866b\u6d1e\u5165\u53e3\u7684\u683c\u5b50  \n\u90a3\u5982\u679c\u6211\u53c8\u9000\u56de\u6765\u8d77\u70b9\uff0c\u8bf4\u660e\u600e\u4e48\u8d70\u90fd\u767d\u642d\uff0c\u8d70\u4e0d\u4e86\u8fd4\u56de\u65e0\u7a77\u5927  \n\u6ca1\u6709\u9000\u56de\u5230\u8d77\u70b9\uff0c\u5047\u8bbe\u9000\u5230$y'$\uff0c\u90a3\u4e48\u4ece$x$\u5230$y'$\u80af\u5b9a\u5c31\u662f$\\lceil\\dfrac{y'-x}{s}\\rceil$\u4e86  \n\u90a3\u4e48$y'\\rightarrow y$\u7684\u8d39\u7528\uff0c\u5c31\u53ef\u4ee5\u9012\u5f52\u8ba1\u7b97\u4e86\uff0c\u9012\u5f52\u5230$x=y$\uff0c\u8d39\u7528\u80af\u5b9a\u4e3a$0$\uff0c\u5c31\u8fd4\u56de  \n\n\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\u5c31\u662f\uff0c\u5f53\u9047\u5230\u4e86\u866b\u6d1e\u8d77\u70b9\u8981\u5f00\u59cb\u5f80\u56de\u9000\u7684\u65f6\u5019\uff0c\u8981\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u8fd9\u4e2a\u5165\u53e3\u662f\u4e0d\u662f\u5c31\u662f$y$\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u8bf4\u660e\u5df2\u7ecf\u8d70\u5230\u4e86\u5730\u65b9\uff0c\u5c31\u4e0d\u9000\u4e86  \n\n## \u6700\u540e\u8dd1\u6700\u77ed\u8def  \n\u968f\u4fbf\u7528\u4ec0\u4e48\u7b97\u6cd5\u8dd1\u4e2a\u6700\u77ed\u8def\u5c31\u884c\uff0c\u8303\u56f4\u5f88\u5c0f  \n~~\u5982\u679c\u4f60\u7528dfs\u5c31\u5f53\u6211\u6ca1\u8bf4~~  \n\n\u6700\u540e\u653e\u4e0a\u4ee3\u7801\uff0c~~\u53ef\u4ee5\u4ece\u6ce8\u91ca\u4e2d\u4f53\u4f1a\u4e00\u4e0b\u6211\u8c03\u4ee3\u7801\u65f6\u7684\u5fc3\u60c5~~  \n\n```cpp  \n#include<cstdio>\n#include<map>\n#include<queue>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#define reg register\n#define EN std::puts(\"\")\ninline int read(){\n\tint x=0,y=1;\n\tchar c=std::getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') y=-1;c=std::getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+(c^48);c=std::getchar();}\n\treturn x*y;\n}\nint n,p,s;\nint map[106],tmp[106],tot;\nstd::map<int,int>start;\nint dis[105][105];\nint from[105],to[105];\ninline int isstart(int x){//\u5224\u65adpos\u662f\u4e0d\u662f\u4e00\u4e2a\u8d77\u70b9 \n\treturn start.find(x)==start.end()?0:1;\n}\ninline int find(int pos){//\u8fd9\u4e2a\u51fd\u6570\u4e8c\u5206\u67e5\u627epos\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u6570\u7ec4\u4e0b\u6807 \n\treg int l=1,r=tot,mid,ret;\n\twhile(l<=r){\n\t\tmid=(l+r)>>1;\n\t\tif(map[mid]>=pos) ret=mid,r=mid-1;\n\t\telse l=mid+1;\n\t}\n\treturn ret;\n}\ninline int getdis(int x,int y){\n\tif(x==y) return 0;\n\tif(isstart(x)) return 0x3f3f3f3f;//x\u662f\u4e2a\u8d77\u70b9\uff0c\u4e0d\u884c \n\tint yy=y;\n\tfor(reg int i=1;i<=p;i++)if(from[i]>x){\n\t\tif(yy>from[i]&&(from[i]-x)%s==0) yy=from[i];\n\t}\n\twhile(yy!=y&&isstart(yy)) yy--;//\u5982\u679cyy\u5df2\u7ecf\u7b49\u4e8ey\u4e86\uff0c\u5c31\u7b97\u662f\u4e00\u4e2a\u8d77\u70b9\u4e5f\u4e0d\u518d\u9000\u4e86 \n\tif(yy==x) return 0x3f3f3f3f;//\u9000\u56de\u4e86\u8d77\u70b9\uff0c\u6c38\u8fdc\u5230\u4e0d\u4e86\u4e86qwq \n\treturn getdis(yy,y)+std::ceil((double)(yy-x)/s);\n}\nint main(){for(;;){\n\tn=read();\n\tif(!n) return 0;\n\ts=read();p=read();\n\ttot=0;start.clear();\n\ttmp[++tot]=0;tmp[++tot]=n;\n\tfor(reg int i=1;i<=p;i++){\n\t\ttmp[++tot]=from[i]=read();tmp[++tot]=to[i]=read();\n\t\tstart[from[i]]=1;\n//\t\tstd::printf(\"%d %d\\n\",start.find(from[i]),start.end());\n\t}\n\t//\u5f00\u59cb\u6392\u5e8f\u548c\u53bb\u91cd\n\tstd::sort(tmp+1,tmp+1+tot);\n\treg int hq=tot;tot=0;\n\tmap[++tot]=tmp[1];\n\tfor(reg int i=2;i<=hq;i++)if(tmp[i]!=tmp[i-1])\n\t\tmap[++tot]=tmp[i];\n\t//\u4e0b\u9762\u5f00\u59cb\u5efa\u8fb9\n\tstd::memset(dis,0x3f,sizeof dis);\n\tfor(reg int i=1;i<=p;i++) dis[find(from[i])][find(to[i])]=0;\n\tfor(reg int i=1;i<=tot;i++)\n\t\tfor(reg int j=i+1;j<=tot;j++)\n\t\t\tdis[i][j]=std::min(dis[i][j],getdis(map[i],map[j]));\n\t//floyd\n\tfor(reg int k=1;k<=tot;k++)\n\t\tfor(reg int i=1;i<=tot;i++)\n\t\t\tfor(reg int j=1;j<=tot;j++) dis[i][j]=std::min(dis[i][j],dis[i][k]+dis[k][j]);\n\tstd::printf(\"%d\\n\",dis[1][tot]);\n\n//\tfor(reg int i=1;i<=tot;i++) std::printf(\"%d \",map[i]);std::puts(\"\");\n//\tfor(reg int i=1;i<=p;i++) std::printf(\"%d %d\\n\",find(from[i]),find(to[i]));std::puts(\"\");\n//\tfor(reg int i=1;i<=tot;i++){\n//\t\tstd::printf(\"%d: \",i);\n//\t\tfor(reg int j=1;j<=tot;j++) std::printf(\"%d \",dis[i][j]);\n//\t\tstd::puts(\"\");\n//\t}\n}\n}\n```",
        "postTime": 1585147073,
        "uid": 164432,
        "name": "suxxsfe",
        "ccfLevel": 9,
        "title": "P2620 \u866b\u6d1e"
    },
    {
        "content": "### [P2620 \u866b\u6d1e](https://www.luogu.org/problem/P2620)\n\u8003\u8bd5\u7684\u9898\u76ee\u5076\u7136\u53d1\u73b0\u5728\u6d1b\u8c37\u4e0a\u6709\uff0c\u8fd8\uff08\u66fe\u7ecf\uff09\u662f\u4e00\u9053\u9ed1\u9898\uff08~~\u7eaa\u5ff5\u5df2\u6b7b\u9ed1\u9898~~\uff09\uff08~~\u8001\u5e08\u771f\u90aa\u6076~~\uff09\uff0c\u5728\u8003\u573a\u4e0a\u53ea\u521a\u4e86\u8fd9\u4e00\u9053\u9898\uff0c\u7136\u9e45\u6700\u540e\u603b\u520610\u5206\uff08\u673a\u623f\u66b4\u96f6\u4eba\u6570\u6700\u591a\u7684\u4e00\u6b21\u8003\u8bd5\uff09\uff0c\u4f5c\u4e3a\u94bb\u7814\u4e86\u8fd9\u9053\u9898\u76ee\u7684\u849f\u84bb\uff0c\u5728\u81ea\u8ba4\u4e3a\u641e\u61c2\u7684\u60c5\u51b5\u4e0b\u5c31\u8d76\u5feb\u6765\u5230\u6d1b\u8c37~~\u6c34\u7ecf\u9a8c~~\u5199\u9898\u89e3\u6765\u9020\u798f\u5927\u4f17\u8fa3233\n\n\n\n------------\n### \u4e3b\u8981\u7b97\u6cd5\n \u79bb\u6563\u5316+\u5efa\u56fe+\u6700\u77ed\u8def\n#### \u4ec0\u4e48\u662f\u79bb\u6563\u5316\uff08DALAO\u8bf7\u7ee7\u7eed\u5411\u4e0b\u4e00\u5c42\u8d70\uff09\n\u901a\u4fd7\u70b9\u6765\u8bf4\uff0c\u5c31\u662f\u628a\u4e0d\u6539\u53d8\u6570\u636e\u76f8\u5bf9\u5927\u5c0f\u7684\u524d\u63d0\u4e0b\u5bf9\u6570\u636e\u8fdb\u884c\u76f8\u5e94\u7684\u7f29\u5c0f\uff0c\u628a\u65e0\u9650\u7a7a\u95f4\u7684\u4e2a\u4f53\u6620\u5c04\u5230\u6709\u9650\u7a7a\u95f4\u91cc\u53bb\uff08\u6458\u81ea\u767e\u5ea6\uff09\uff0c\u672c\u9898\u89e3\u4f7f\u7528\u4e86STL\u7b97\u6cd5\u79bb\u6563\u5316(\u5176\u5b9e\u5c31\u662f\u6392\u5e8f\u4e0e\u53bb\u91cd)\uff0c\u60f3\u6df1\u5165\u4e86\u89e3\u7684\u7ae5\u978b[\u53ef\u4ee5\u6765\u8fd9\u5eb7\u5eb7](https://baike.baidu.com/item/%E7%A6%BB%E6%95%A3%E5%8C%96/10501557)\n\n\n\n------------\n### \u9898\u76ee\u5206\u6790\n\n~~\u8003\u573a\u4e0a\u7684\u601d\u60f3\u662f\u8d2a\u5fc3+DP\uff0c\u7136\u540e\u60f3\u7740\u8fd9\u9898\u771f\u6c34\uff0c\u540e\u6765\u53d1\u73b0W\u53ef\u8fbe\u523010^9\uff0c\u7136\u540e\u4fbf\u8bd5\u56fe\u5404\u79cd\u4f18\u5316\uff0c\u7ed3\u679c\u540e\u6765\u53d1\u73b0\u548c\u6b63\u89e3\u6ca1\u6328\u4e0a\u8fb9qwq~~\n\n- W<=10^9\uff0c\u5982\u6b64\u5927\u7684\u6570\u636e\u6211\u4eec\u81ea\u7136\u4e0d\u80fd\u6b63\u5e38\u7684\u62ff\u6570\u7ec4\u5b58\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u79bb\u6563\u5316\u8fd9\u4e2a\u597d\u4e1c\u897f\uff0c\u56e0\u4e3a\u666e\u901a\u7684\u70b9\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u4e0d\u90a3\u4e48\u91cd\u89c6\uff0c\u91cd\u8981\u7684\u53ea\u6709\u8d77\u70b9\u7ec8\u70b9\u548c\u866b\u6d1e\u7684\u5165\u53e3\u548c\u51fa\u53e3\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u8003\u8651\u5b83\u4eec\uff0c\u5c06\u4ed6\u4eec\u5b58\u5165\u6570\u7ec4\uff0c\u6392\u5e8f\u540e\u53bb\u91cd\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4e3a\u5efa\u56fe\u4f5c\u51c6\u5907\n\n- \u6ce8\u610f\uff01\u9898\u76ee\u4e2d\u6709\u6ca1\u8bf4\u660e\u7684\u6761\u4ef6\uff08\u5b9e\u6d4b\u5f97\u51fa\uff09\uff0c\u5373\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u866b\u6d1e\u7684\u5165\u53e3\u548c\u51fa\u53e3\u4f1a\u5728\u7ec8\u70b9\u540e\u9762\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u653e\u5fc3\u6392\u5e8f+\u53bb\u91cd\n\n- \u53bb\u5b8c\u91cd\u540e\u5c31\u662f\u6838\u5fc3\u7684\u5b58\u8fb9\uff0c\u9996\u5148\u540c\u4e00\u866b\u6d1e\u7684\u8d77\u70b9\u5230\u7ec8\u70b9\u8ddd\u79bb\u4e3a0\uff0c\u5728\u7528\u6709\u4e00\u70b9\u70b9\u8d2a\u5fc3\u601d\u60f3\u7684\u65b9\u6cd5\u5b58\u8fb9\uff08\u8be6\u7ec6\u89e3\u91ca\u8bf7\u89c1\u6807\u7a0b\uff09\n\n- ~~\u56e0\u4e3a\u6570\u636e\u597d\u50cf\u6709\u70b9\u6c34\uff0c\u6240\u4ee5~~\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u7684floyd\u5566\n\n- \u4ee3\u7801\u91cc\u8fd8\u6709\u70b9\u7384\u5b66\uff0c\u4e0d\u8fc7\u90fd\u6709\u8d85\u8be6\u7ec6\u7684\u6ce8\u91ca\n------------\n### \u4ee3\u7801\u5b9e\u73b0\n\u545c\u545c\u545c\uff0c\u8fd9\u4e2a\u8f9b\u8f9b\u82e6\u82e6\u7406\u89e3\u4e86\u597d\u4e45\u5462\uff0c\u53ef\u80fd\u8fd9\u4ee3\u7801\u7684\u6ce8\u91ca\u662f\u6211\u5199\u8fc7\u4ee3\u7801\u4e2d\u6700\u591a\u7684\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std; \nint l[100],c;//l\u5b58\u8fb9,c\u5f85\u7528 \nint x[50],y[50];//x\u5b58\u866b\u6d1e\u5165\u53e3\uff0cy\u5b58\u51fa\u53e3 \nint d[100][100];//\u5192\u5145\u90bb\u63a5\u77e9\u9635\u5b58\u8fb9233 \nint w,s,p;//\u5f85\u7528 \nset<int>se;//\u7528\u4e8e\u5b58\u866b\u6d1e\u8d77\u70b9\u3002\u4f5c\u7528\uff1a\u4fbf\u4e8e\u67e5\u8be2(\u7136\u9e45\u6211\u7528\u7684\u662fmap,\u597d\u50cf\u8fd8\u66f4\u65b9\u4fbf) \nint F(int b,int e)//\u6838\u5fc3\u4ee3\u7801:\u5b58\u8fb9 \n{\n\tif(b==e)//\u82e5\u8d77\u70b9\u5c31\u662f\u7ec8\u70b9,\u81ea\u7136\u5c31\u8fd4\u56de0 \n\t\treturn 0;\n\tif(se.count(b))//\u82e5\u8d77\u70b9\u6709\u866b\u6d1e,\u76f4\u63a5\u8fd4\u56de \n\t\treturn 0x3fffffff;\n\tint f=e;\n\tfor(int i=0;i<p;i++)//\u679a\u4e3e\u866b\u6d1e \n\t{\n\t\tif(b<x[i]&&x[i]<f&&(x[i]-b)%s==0)\n\t\t\tf=x[i];//\u627e\u5982\u679c\u4e0d\u505c\u6309\u6700\u5927\u503c(s)\u8d70\u7684\u8bdd\u7b2c\u4e00\u4e2a\u9047\u89c1\u7684\u866b\u6d1e\u5165\u53e3\u7684\u4f4d\u7f6e \n\t}\n\twhile(f!=e&&se.count(f))//\u5982\u679c\u6309\u6700\u5927\u503cs\u8d70\u4f1a\u6709\u866b\u6d1e \n\t\tf--;//\u59d4\u66f2\u6c42\u5168233  \u4e5f\u5c31\u662f\u628a\u7ec8\u70b9\u5012\u9000\u81f3\u65e0\u866b\u6d1e\u5904   \u8fd9\u4fbf\u662fset\u7684\u5999\u7528 \n\tif(f==b)//\u5982\u679cf\u5c31\u662fb,\u5c31\u5230\u4e0d\u4e86 \n\t\treturn 0x3fffffff;\n\treturn (f-b+s-1)/s+F(f,e);//\u6b63\u5e38\u7684\u8ba1\u7b97(\u9012\u5f52),\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u4e8c\u5206(\u96fe)\n\t//\u6709\u5411\u4e0a\u53d6\u6574\u7684\u6280\u5de7 \n\t//assert(0);\n\t//assert\u7684\u4f5c\u7528\u662f\u5148\u8ba1\u7b97\u8868\u8fbe\u5f0f(\u62ec\u53f7\u91cc\u7684\u4e1c\u897f)\n\t//\u82e5\u503c\u4e3a0(\u5047)\u5219\u7ec8\u6b62\u8fd0\u884c  (\u597d\u50cf\u662f\u66f4\u65b9\u4fbf\u8c03\u8bd5)\n}\nint Q(int x)//\u627e\u51fa\u866b\u6d1e\u7684\u8d77\u70b9or\u7ec8\u70b9(x)\u5728\u6392\u5b8c\u5e8f\u540e\u7684l\u7684\u4f4d\u7f6e \n{\n\treturn lower_bound(l,l+c,x)-l;\n\t//\u6c42\u51fa\u4e0d\u964d\u5b50\u5e8f\u5217\u4e2d\u7b2c\u4e00\u4e2a>=x\u7684\u6570\u5728l\u4e2d\u7684\u4f4d\u7f6e \n\t//lower_bound\u7684\u590d\u6742\u5ea6\u4e3aO(logn) \n\t//\u5982\u679c\u627e\u5230\u8fd4\u56de\u627e\u5230\u5143\u7d20\u7684\u5730\u5740,\u5426\u5219\u8fd4\u56del+c\u7684\u5730\u5740\n}\nint main()\n{\n\t//freopen(\"wormhole.in\",\"r\",stdin);freopen(\"wormhole.out\",\"w\",stdout);\n\twhile(scanf(\"%d %d %d\",&w,&s,&p),w)//\u7b80\u5199+\u8f93\u5165 \n\t{\n\t\tse.clear();//\u6e05\u7a7aset\u4e2d\u7684\u5143\u7d20 \n\t\tc=0;//\n\t\tfor(int i=0;i<p;i++)//\u8f93\u5165\u866b\u6d1e \n\t\t{\n\t\t\tscanf(\"%d %d\",x+i,y+i),se.insert(x[i]);//\u6307\u9488\u64cd\u4f5c,\u5c06\u6709\u866b\u6d1e\u8d77\u70b9\u7684\u70b9\u653e\u5165\u96c6\u5408\u4e2d \n\t\t\tl[c++]=x[i],l[c++]=y[i];//\u201dc++\u201c\u4f1a\u6267\u884c\u4e24\u6b21 \n\t\t}\n\t\tl[c++]=0,l[c++]=w;//\u786e\u4fdd\u6392\u5e8f\u540e\u8d77\u70b9\u662f0 \n\t\tsort(l,l+c);//\u6392\u5e8f\u4e0b\uff0c\u96be\u9053\u4e0d\u4f1a\u6253\u4e71\u5417qwq(\u849f\u84bb\u601d\u60f3)     \u7136\u800c\u5b9e\u9645\u4e0a\u662f\u4fbf\u4e8e\u4e0b\u9762\u7684unique\u5143\u7d20\u53bb\u91cd233\n\t\tc=unique(l,l+c)-l;//\u66f4\u65b0\u540e\u7684\u7684c\u662f\u53bb\u91cd\u540e\u7684\u6570\u7ec4\u957f\u5ea6 \n\t\t/*unique:STL\u4e2d\u7684\u5e38\u7528\u51fd\u6570\uff0c\u529f\u80fd\u662f\u5143\u7d20\u53bb\u91cd\u3002\n\t\t\u5373\u201d\u5220\u9664\u201d\u5e8f\u5217\u4e2d\u6240\u6709\u76f8\u90bb\u7684\u91cd\u590d\u5143\u7d20(\u53ea\u4fdd\u7559\u4e00\u4e2a)\u3002\t\t\n\t\t\u6b64\u5904\u7684\u5220\u9664\uff0c\u5e76\u4e0d\u662f\u771f\u7684\u5220\u9664\uff0c\u800c\u662f\u6307\u91cd\u590d\u5143\u7d20\u7684\u4f4d\u7f6e\u88ab\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u7ed9\u5360\u9886\u4e86\u3002 \n\t\t\u7531\u4e8e\u5b83\u201d\u5220\u9664\u201d\u7684\u662f\u76f8\u90bb\u7684\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u5728\u4f7f\u7528unique\u51fd\u6570\u4e4b\u524d\uff0c\u4e00\u822c\u90fd\u4f1a\u5c06\u76ee\u6807\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f\u3002(\u8f7d\u5f55)*/\n\t\tmemset(d,0x3f,sizeof d);//\u521d\u59cb\u5316d\u6570\u7ec4\u81f3\u65e0\u7a77\u5927 \n\t\tfor(int i=0;i<p;i++)\n\t\t\td[Q(x[i])][Q(y[i])]=0;\n\t\t\t//\u4f20\u5165\u866b\u6d1e\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9x[i],y[i]; \n\t\t\t//\u627e\u51fa\u866b\u6d1e\u7684\u8d77\u70b9or\u7ec8\u70b9\u5728l\u4e2d\u7684\u4f4d\u7f6e\u540e\uff0c\u7528\u4e8c\u7ef4\u6570\u7ec4d\u6807\u8bb0\u4f4d\u7f6e(\u5373\u5728l\u4e2d\u7684\u4e0b\u6807) \n\t\tfor(int i=0;i<c;i++)// \n\t\t\tfor(int j=i+1;j<c;j++)\n\t\t\t//c=\u866b\u6d1e\u6570\u76ee+2(\u8d77\u70b9\u4e0e\u7ec8\u70b9)\n\t\t\t\td[i][j]=min(d[i][j],F(l[i],l[j]));//\u5b58\u8fb9 \n\t\tfor(int k=0;k<c;k++)//floyd\u7ecf\u5178\u6700\u77ed\u8def\u7b97\u6cd5 \n\t\t\tfor(int i=0;i<c;i++)\n\t\t\t\tfor(int j=0;j<c;j++)\n\t\t\t\t\td[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n\t\tprintf(\"%d\\n\",d[0][c-1]);\n\t}\n\treturn 0;\n}\n```\n\n\n------------\n\nDALAO\u4eec\u591a\u591a\u5173\u7167\u5440QAQ",
        "postTime": 1564752637,
        "uid": 206941,
        "name": "MurderChara",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2620 \u3010\u866b\u6d1e\u3011"
    },
    {
        "content": "\u94fe\u63a5:[\u866b\u6d1e](https://www.luogu.org/problem/P2620)  \nupd2020.4.4:\u628a\u6ce8\u91ca\u6539\u4e86/ch  \n**\u79bb\u6563\u5316** \u5efa **\u6811**\uff0c\u7136\u540e\u8dd1floyd(\u5f53\u7136SPFA\u548cdijkstra\u90fd\u662f\u53ef\u4ee5\u7684)\u3002  \n\u79bb\u6563\u5316\u5c31\u662f\u5c06\u4e00\u4e2a\u7ebf\u6027\u7ed3\u6784\u4e0a\u79bb\u5f97\u5f88\u8fdc\u7684\u6709\u6548\u70b9\u7f29\u77ed\u6210\u4e00\u4e2a\u4e0d\u8d85\u8fc7\u70b9\u6570\u91cf\u957f\u5ea6\u7684\u7ebf\u6027\u7ed3\u6784\u4ee5\u6ee1\u8db3\u67d0\u4e9b\u7b97\u6cd5(\u53d8\u6001)\u8981\u6c42\u3002(\u5982\u679c\u5927\u4f6c\u6709\u66f4\u597d\u7684\u7406\u89e3\u7684\u8bdd\u6b22\u8fce\u666e\u53ca)  \n\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include<iostream>\n#include<algorithm>\n#include<set>\n#define f(i,a,b) for(register int i=a;i<b;++i)\n#define inhash(a,b) __hash[c++]=a,__hash[c++]=b\n#define min(a,b) a<b?a:b\nusing namespace std;\nconst int N = 100;\ntemplate <class T> inline void read(T &n) {\n\tn=0;register char ch;while(!isdigit(ch=getchar()));\n\tfor(n=ch^48;isdigit(ch=getchar());n=(n<<3)+(n<<1)+(ch^48));\n}\n\nint w,s,p,__hash[N];\nint c,x[N],y[N];\nint dis[N][N];\nset<int>__set;\n\nint Find_path(int t,int e) {\n//\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u5efa\u8fb9\uff0c\u5e76\u4e14\u8981\u9632\u6b62\u5728s\u6b65\u98de\u901f\u5954\u5411\u866b\u6d1e\u7684\u65f6\u5019\u6389\u8fdb\u866b\u6d1e\uff0c\u6bcf\u6b21\u53ea\u5904\u7406\u4e00\u4e2a\u975e\u6cd5\n\tif(t == e)return 0;\n\tint cls = e;\n\tf(i,0,p) if( t<x[i] && x[i]<cls && (x[i]-t)%s == 0)\n\t\tcls = x[i];//find the closest path with no wormhole seperates\n\twhile(cls != e && __set.count(cls))--cls;\n\tif(cls == t)return 0x3fffffff;\n\treturn (cls - t + s - 1) / s + Find_path(cls,e);\n}\n\nint Q(int i){return lower_bound(__hash,__hash+c,i) - __hash;}\n\nint main() {\n    while(1) {\n    \tread(w);\n    \tif(!w)return 0;\n    \tread(s);\n    \tread(p);\n    \t//\u521d\u59cb\u5316(\u975e\u5e38\u91cd\u8981)\n    \t__set.clear();\n\t\tmemset(dis, 0x3f, sizeof dis); \n\t\tc=0;\n    \t//\u5b58\u8fb9\n    \tf(i,0,p) {\n\t\t\tread(x[i]), read(y[i]);\n\t\t\t__set.insert(x[i]);//\u7528\u6765\u5224\u65ad\u662f\u4e0d\u662f\u866b\u6d1e\u5165\u53e3\n\t\t\tinhash(x[i],y[i]);//\u6254\u8fdbhash\u79bb\u6563\u5316(\u8fd9\u53ea\u662f\u4e2a\u5b8f\u5b9a\u4e49)\n\t\t}\n    \tinhash(0,w);//\u3002\u3002\u3002\n    \t\n    \tsort(__hash,__hash+c);\n    \t//c = unique(__hash,__hash+c) -__hash;\u53bb\u91cd(\u8fd9\u53ef\u4ee5\u4e0d\u8981)\n    \t//\u5efa\u7acb\u5e76\u4f18\u5316\u6bcf\u6761\u8fb9\u6700\u77ed\u8def\uff0c\u662f\u6c42\u89e3\u7684\u524d\u7f6e\u8981\u6c42 (\u4e00\u5b9a\u4ece\u5c0f\u5f80\u5927\u8d70)\n    \t// 1>6 9>3 ==> 1>3 \n    \tf(i,0,p) dis[ Q(x[i]) ][ Q(y[i]) ] = 0;//\u7ed9\u866b\u6d1e\u5355\u72ec\u5904\u7406\n    \tf(i,0,c) if( !__set.count(__hash[i]) )//\u662f\u866b\u6d1e\u5165\u53e3\u7684\u8bdd\u53ea\u80fd\u8fde\u5411\u51fa\u53e3\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u518d\u8fde\u8fb9\u4e86\n    \tf(j,i+1,c) dis[i][j] = min(dis[i][j], Find_path(__hash[i], __hash[j])); //i<j:No way to go back! \n    \t//floyd\n    \tf(k,0,c) f(i,0,c) f(j,0,c) dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n    \tprintf(\"%d\\n\",dis[0][c-1]);\n    }\n    return 0;\n}\n\n\n```\n",
        "postTime": 1564747770,
        "uid": 30048,
        "name": "\u4e5d\u601d",
        "ccfLevel": 0,
        "title": "P2620 [\u866b\u6d1e](\u79bb\u6563\u5316+\u6700\u77ed\u8def)"
    },
    {
        "content": "[\u300a\u866b\u6d1e\u300b\u9898\u76eeurl](https://www.luogu.org/problem/P2620)\n\n\u601d\u8def\uff1a\n1. \u79bb\u6563\u5316:\u7528map-mp\u8bb0\u70b9,\u7528map-be\u8bb0\u6240\u6709\u8d77\u70b9,\u7528\u6570\u7ec4fp\u4f5c\u53cd\u6620\u5c04,\u8bb0\u70b9\u7684\u539f\u503c\n2. \u6700\u77ed\u8def:\u8bb0\u5b8c\u70b9\u4e4b\u540e\u5efa\u56fe\uff0c\u771f\u8d77\u70b9\u5411\u6240\u6709\u866b\u6d1e\u8d77\u70b9\u4e0e\u7ec8\u70b9\u8fde\u8fb9\uff0c\u6240\u6709\u866b\u6d1e\u7ec8\u70b9\u5bf9\u6240\u6709\u866b\u6d1e\u8d77\u70b9\u8fde\u8fb9\uff0c\u6240\u6709\u866b\u6d1e\u7ec8\u70b9\u5411\u771f\u7ec8\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u8fde\u5b8c\u4e4b\u540e\u8dd1\u4e2a\u6700\u77ed\u8def\n3. \u8fde\u8fb9:**dis(x,y)!=(y-x+s-1)/s**\u56e0\u4e3a\u4e2d\u95f4\u53ef\u80fd\u8e29\u5230\u8d77\u70b9\u4f20\u9001\uff0c\u6240\u4ee5\u8981\u5c3d\u91cf\u907f\u514d\u8e29\u5230\u8d77\u70b9\uff0c\u5982\u679c\u4e0d\u80fd\u907f\u514d\u5219\u4e0d\u8fde\u8be5\u8fb9\n\n\n```cpp\n#include<iostream>\n#include<map>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define ms(x,y) memset(x,y,sizeof(x))\nusing namespace std;\nconst int maxn = 95;\nconst long long INF =0x3f3f3f3f3f3f3f3f;\nlong long e[maxn][maxn];\nmap<long long,int>mp;\nmap<long long,bool>be;\nlong long fp[maxn];\nlong long begin[maxn],end[maxn]; \nint cnt,s;\nint p;\nlong long getDis(int x,int y)\n{\n\tlong long tt=y;\n\tif(x==y)return 0;\n\tif(be[x])\n\t\treturn INF;\n\tfor(int i=0;i<p;i++)\n\t\tif(begin[i]>x&&begin[i]<tt&&(begin[i]-x)%s==0)\n\t\t\ttt=begin[i];\n\twhile(be[tt]&&tt!=y)tt--;\n\tif(tt==x)return INF;\n\telse return (tt-x+s-1)/s+getDis(tt,y);\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\twhile(1)\n\t{\n\t\tbe.clear();\n\t\tmp.clear();\n\t\tint w;\n\t\tcin>>w;\n\t\tif(w==0)\n\t\t\treturn 0;\n\t\tcin>>s>>p;\n\t\tcnt=1;\n\t\tms(e,0x3f);\n\t\tmp[0]=cnt;\n\t\tfp[cnt]=0;\n\t\tfor(int i=0;i<p;i++)\n\t\t{\n\t\t\tint b,ee;\n\t\t\tcin>>b>>ee;\n\t\t\tbe[b]=true;\n\t\t\tbegin[i]=b;\n\t\t\tend[i]=ee;\n\t\t\tif(!mp[b]){\n\t\t\t\tmp[b]=++cnt;\n\t\t\t\tfp[cnt]=b;\n\t\t\t}\n\t\t\tif(!mp[ee]){\n\t\t\t\tmp[ee]=++cnt;\n\t\t\t\tfp[cnt]=ee;\n\t\t\t}\n\t\t\te[mp[b]][mp[ee]]=0;\n\t\t}\n\t\tif(!mp[w])\n\t\t{\n\t\t\tmp[w]=++cnt;\n\t\t\tfp[cnt]=w;\n\t\t}\n\t\tlong long dis[maxn];\n\t\te[1][cnt]=getDis(0,w);\n\t\tfor(int i=2;i<cnt;i++)\n\t\t{\n\t\t\tif(fp[i]>0)\n\t\t\t\te[1][i]=getDis(0,fp[i]);\n\t\t}\n\t\tfor(int i=0;i<p;i++)\n\t\t\tif(end[i]<w&&!be[end[i]])\n\t\t\t\te[mp[end[i]]][cnt]=getDis(end[i],w);\n\t\tfor(int i=0;i<p;i++)\n\t\t\tfor(int j=0;j<p;j++)\n\t\t\t{\n\t\t\t\tint u=begin[i];\n\t\t\t\tint v=end[j];\n\t\t\t\tif(be[v])continue;\n\t\t\t\tif(e[mp[v]][mp[u]]!=0&&v<u)\n\t\t\t\t\te[mp[v]][mp[u]]=getDis(v,u);\n\t\t\t}\n\t\tfor(int i=2;i<=cnt;i++){\n\t\t\tdis[i]=e[1][i];\n\t\t}\n\t\tbool vis[maxn];\n\t\tms(vis,false);\n\t\tvis[1]=true;\n\t\tdis[1]=0;\n\t\tfor(int i=0;i<cnt;i++)\n\t\t{\n\t\t\tint k=-1;\n\t\t\tlong long Min=INF;\n\t\t\tfor(int j=2;j<=cnt;j++)\n\t\t\t\tif(!vis[j]&&dis[j]<Min)\n\t\t\t\t{\n\t\t\t\t\tk=j;\n\t\t\t\t\tMin=dis[j];\t\n\t\t\t\t} \n\t\t\tif(k==-1)break;\n\t\t\tvis[k]=true;\n\t\t\tfor(int j=2;j<=cnt;j++)\n\t\t\t\tif(!vis[j]&&dis[j]>dis[k]+e[k][j])\n\t\t\t\t\tdis[j]=dis[k]+e[k][j];\n\t\t}\n\t\tcout<<dis[cnt]<<endl;\n\t}\n} \n```\n",
        "postTime": 1569161582,
        "uid": 65212,
        "name": "s15172528531",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2620 \u3010\u866b\u6d1e\u3011"
    }
]