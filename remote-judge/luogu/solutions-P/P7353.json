[
    {
        "content": "ix35 \u8bba\u6587\u300a\u7efc\u8ff0\u56fe\u8bba\u4e2d\u8fde\u901a\u6027\u53ca\u76f8\u5173\u95ee\u9898\u7684\u4e00\u4e9b\u5904\u7406\u65b9\u6cd5\u300b\u4e2d\u7684\u4e00\u9053\u9898\u3002\n\n\u6ce8\u610f\u5230\u70b9\u53cc\u6709\u4e00\u4e2a\u826f\u597d\u7684\u6027\u8d28\uff1a\u5728\u70b9\u53cc\u4e2d\uff0c\u4ece\u4efb\u610f\u4e00\u70b9\u80fd\u591f\u4e0d\u7ecf\u8fc7\u6307\u5b9a\u70b9\u5230\u8fbe\u53e6\u4e00\u70b9\u3002\u8fd9\u4e2a\u6027\u8d28\u4fdd\u8bc1\u4e86 Jerry \u80fd\u591f\u5728\u70b9\u53cc\u4e2d\u4efb\u610f\u884c\u8d70\uff0c\u4e5f\u63d0\u793a\u6211\u4eec\u7528\u70b9\u53cc\u7684\u89d2\u5ea6\u601d\u8003\u95ee\u9898\u3002\n\n\u8003\u8651\u5efa\u51fa\u5706\u65b9\u6811\uff0c\u5047\u8bbe Tom \u6240\u5728\u7684\u7ed3\u70b9 $a$ \u4e3a\u6839\u3002\u5982\u679c Tom \u80fd\u591f\u6cbf\u7740\u5706\u65b9\u6811\u4e2d $a\\to b$ \u7684\u8def\u5f84\u4e00\u76f4\u8d70\u4e0b\u53bb\uff0c\u5fc5\u7136\u662f\u80fd\u591f\u6349\u4f4f Jerry \u7684\u3002\u5426\u5219\uff0c\u5b83\u4e00\u5b9a\u4f1a\u8d70\u5230\u8def\u5f84\u4e2d\u7684\u4e00\u4e2a\u5206\u652f\u7ed3\u70b9\uff0c\u7ed9 Jerry \u6e9c\u8d70\u7684\u673a\u4f1a\u3002\n\n\u7528\u5f62\u5f0f\u5316\u7684\u8bed\u8a00\u6765\u63cf\u8ff0\u5b83\uff1a\u8bbe $(x,y)$ \u662f\u597d\u7684\u5f53\u524d\u4ec5\u5f53\u5706\u65b9\u6811 $x\\to y$ \u7684\u8def\u5f84\u4e2d\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u7684\u5706\u70b9\u5728\u539f\u56fe\u4e2d\u662f\u76f8\u90bb\u7684\u3002\u90a3\u4e48\u4e0a\u8ff0\u7684\u83b7\u80dc\u6761\u4ef6\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a**\u5bf9\u4e8e\u5220\u6389\u70b9 $a$ \u540e $b$ \u6240\u5728\u8fde\u901a\u5757\u4e2d\u7684\u4efb\u610f\u4e00\u70b9 $x$\uff0c\u90fd\u6709 $(a,x)$ \u662f\u597d\u7684**\u3002\n\n\u4e0d\u8fc7\uff0c\u5982\u679c\u80fd\u591f **\u627e\u5230\u4e00\u4e2a\u70b9 $u$\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u70b9 $x$\uff0c$(u,x)$ \u90fd\u662f\u597d\u7684** \u8bdd\uff0c\u90a3\u4e48 Tom \u4e5f\u53ef\u4ee5\u79fb\u81f3 $u$ \u6240\u5728\u70b9\uff0c\u7136\u540e\u7c7b\u4f3c\u7684\u6349\u4f4f Jerry\u3002\n\n\u8fd9\u4e24\u4e2a\u5c31\u662f\u5168\u90e8\u7684\u83b7\u80dc\u6761\u4ef6\u4e86\u5417\uff1f\u786e\u5b9e\u662f\u7684\uff0c\u4e0b\u9762\u6211\u4eec\u8003\u8651\u8bc1\u660e\u5fc5\u8981\u6027\u3002\u5982\u679c\u4e24\u4e2a\u6761\u4ef6\u5747\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48 Tom \u5fc5\u7136\u4f1a\u8d70\u5230\u4e00\u4e2a\u5206\u652f\u7ed3\u70b9 $p$\uff0c\u6b64\u65f6\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u70b9 $q$ \u6ee1\u8db3 $(p,q)$ \u4e0d\u662f\u597d\u7684\uff0c\u6b64\u65f6 Jerry \u53ef\u4ee5\u8dd1\u5230 $q$\u3002\u4f46\u5982\u679c $p$ \u5728 $b\\to q$ \u7684\u5fc5\u7ecf\u4e4b\u8def\u4e0a\u600e\u4e48\u529e\uff1f\u90a3\u5c31\u5728 Tom \u5230\u8fbe $p$ \u70b9\u4e4b\u524d\u5230\u8fbe $q$ \u5373\u53ef\u3002\u65e2\u7136 $(p,q)$ \u4e0d\u662f\u597d\u7684\uff0c\u90a3\u4e48 $(a,q)$ \u5f53\u7136\u4e5f\u4e0d\u662f\u597d\u7684\u3002\u53ea\u8981 Jerry \u4e00\u76f4\u6709\u673a\u4f1a\u505c\u5728\u4e0d\u597d\u7684\u70b9\u4e0a\uff0c\u90a3 Tom \u5c31\u6c38\u8fdc\u8ffd\u4e0d\u4e0a Jerry\u3002\n\n\u8003\u8651\u7528 DP \u6765\u5224\u65ad\u8fd9\u4e24\u4e2a\u6761\u4ef6\u7684\u53ef\u884c\u6027\u3002\u8bbe $f(x)$ \u8868\u793a\u5b83\uff08\u5706\u70b9\uff09\u6216\u5b83\u7684\u7236\u4eb2\uff08\u65b9\u70b9\uff09\u5230\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u662f\u5426\u90fd\u662f\u597d\u7684\uff0c$g(x)$ \u8868\u793a\u5b83\uff08\u5706\u70b9\uff09\u5230\u7236\u4eb2\u6240\u5728\u90a3\u68f5\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u662f\u5426\u90fd\u662f\u597d\u7684\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u6362\u6839 DP\u3002\n\n\u5bf9\u4e8e $f(x)$\uff0c\u663e\u7136\u6709\n\n- \u5706\u70b9\uff1a$f(x)=1$ \u5f53\u4e14\u4ec5\u5f53\u5b83\u7684\u6240\u6709\u65b9\u513f\u5b50 $y$ \u90fd\u6709 $f(y)=1$\u3002\n- \u65b9\u70b9\uff1a$f(x)=1$ \u5f53\u4e14\u4ec5\u5f53\u5b83\u7684\u6240\u6709\u5706\u513f\u5b50 $y$ \u90fd\u6709 $f(y)=1$\uff0c\u4e14 $(fa_x,y)$ \u662f\u597d\u7684\u3002\n\n\u5bf9\u4e8e $g(x)$\uff0c\u8003\u8651\u4ece\u7236\u4eb2\u7ed3\u70b9\u9012\u63a8\u8fc7\u6765\u3002\u7531\u4e8e $g(x)$ \u53ea\u5728\u5706\u70b9\u6709\u5b9a\u4e49\uff0c\u6240\u4ee5\u5b83\u7684\u7236\u4eb2\u5fc5\u7136\u662f\u65b9\u70b9\u3002$g(x)=1$ \u5f53\u4e14\u4ec5\u5f53\u4ee5\u4e0b\u6761\u4ef6\u5168\u90e8\u6ee1\u8db3\uff1a\n\n- $g(fa_{fa_x})=1$\uff0c\u4e5f\u5c31\u662f\u5b83\u4e0a\u9762\u90a3\u4e2a\u5706\u70b9\u7684 $g=1$\u3002\n- $x$ \u80fd\u5728\u539f\u56fe\u4e2d\u4e0e\u8fd9\u4e2a\u70b9\u53cc\u4e2d\u7684\u5176\u5b83\u6240\u6709\u70b9\u5747\u76f8\u90bb\u3002\n- \u5bf9\u4e8e $fa_x$ \u9664 $x$ \u4ee5\u5916\u7684\u5176\u5b83\u5b50\u6811 $y$ \u5747\u6ee1\u8db3 $f(y)=1$\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u53ea\u9700\u8981\u6ee1\u8db3\u8fd9\u4e2a\u70b9\u5728\u8be5\u70b9\u53cc\u4e2d\u7684\u5ea6\u6570\u7b49\u4e8e\u8282\u70b9\u6570\u51cf\u4e00\u5373\u53ef\uff0c\u56e0\u4e3a\u539f\u56fe\u662f\u65e0\u91cd\u8fb9\u548c\u81ea\u73af\u7684\u3002\n\n\u90a3\u4e48\u4e24\u4e2a\u83b7\u80dc\u89c4\u5219\u7684\u5224\u5b9a\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u7b2c\u4e8c\u4e2a\u5c31\u662f\u80fd\u591f\u627e\u5230\u4e00\u4e2a\u70b9 $x$ \u4f7f\u5f97 $f(x)=g(x)=1$\u3002\u7b2c\u4e00\u4e2a\u7b80\u5355\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff1a\u5982\u679c $b$ \u5728 $a$ \u7684\u7236\u4eb2\u5b50\u6811\uff0c\u5c31\u9700\u8981 $g(a)=1$\uff1b\u5426\u5219\uff0c\u5c31\u9700\u8981\u627e\u5230 $b$ \u5728 $a$ \u7684\u54ea\u68f5\u5b50\u6811\u4e2d\uff0c\u770b\u5b83\u7684 $f$ \u503c\u662f\u5426\u7b49\u4e8e\u4e00\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u9ed8\u8ba4 $n,m,q$ \u540c\u9636\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=2e5;\n\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nstruct Node{int frm,to,nxt;} Edge[Maxn*2+5];\nint tot=1,Head[Maxn+5];\ninline void Addedge(int x,int y) {Edge[++tot]=(Node){x,y,Head[x]},Head[x]=tot;}\n\nint n,m,q,dfn[Maxn+5],low[Maxn+5],st[Maxn+5],top,cur,tmp;\nint dep[Maxn+5],f[Maxn+5],g[Maxn+5],anc[Maxn+5][20],cnt[Maxn+5];\nvector<int> v[Maxn+5];\nvector<pair<int,int>> w[Maxn+5];\nmap<int,int> mp[Maxn+5];\n\ninline int Get(int x,int y) {return dep[x]>dep[y]?anc[x][0]:anc[y][0];}\ninline int LCA(int x,int y)\n{\n    if(dep[x]<dep[y]) swap(x,y);\n    Rof(i,19,0) if(dep[anc[x][i]]>=dep[y]) x=anc[x][i];\n    if(x==y) return x;\n    Rof(i,19,0) if(anc[x][i]==anc[y][i]) x=anc[x][i],y=anc[y][i];\n    return anc[x][0];\n}\ninline int Jump(int x,int y) {Rof(i,19,0) if(y&(1<<i)) x=anc[x][i]; return x;}\ninline void dfs(int x,int fa)\n{\n    dep[x]=dep[fa]+1,f[x]=1,anc[x][0]=fa;\n    For(i,1,19) anc[x][i]=anc[anc[x][i-1]][i-1];\n    if(x<=n) {for(auto y:v[x]) if(y!=fa) dfs(y,x),f[x]&=f[y];}\n    else\n    {\n        for(auto y:v[x]) if(y!=fa)\n        {\n            dfs(y,x),f[x]&=f[y];\n            if(mp[fa].find(y)==mp[fa].end()) f[x]=0;\n        }\n    }\n}\ninline void dfs2(int x,int fa)\n{\n    if(!g[x]) {for(auto y:v[x]) if(y!=fa) g[y]=0,dfs2(y,x); return;}\n    if(x<=n)\n    {\n        int pre=1; for(auto y:v[x]) if(y!=fa) g[y]&=pre,pre&=f[y];\n        reverse(v[x].begin(),v[x].end()),pre=1;\n        for(auto y:v[x]) if(y!=fa) g[y]&=pre,pre&=f[y];\n        reverse(v[x].begin(),v[x].end());\n        for(auto y:v[x]) if(y!=fa) dfs2(y,x);\n        return;\n    }\n    int ch=0,now=0;\n    for(auto y:v[x]) if(y!=fa) ch++,now+=f[y],cnt[y]=0;\n    for(auto i:w[x]) cnt[i.first]++,cnt[i.second]++;\n    for(auto y:v[x]) if(cnt[y]==ch && now-f[y]==ch-1) g[y]=1;\n    for(auto y:v[x]) if(y!=fa) dfs2(y,x);\n}\ninline void Tarjan(int x)\n{\n    dfn[x]=low[x]=++cur,st[++top]=x;\n    for(int i=Head[x];i;i=Edge[i].nxt)\n    {\n        int y=Edge[i].to;\n        if(!dfn[y])\n        {\n            Tarjan(y),low[x]=min(low[x],low[y]);\n            if(low[y]==dfn[x])\n            {\n                v[x].push_back(++tmp),v[tmp].push_back(x);\n                while(1)\n                {\n                    int k=st[top--]; v[k].push_back(tmp),v[tmp].push_back(k);\n                    if(y==k) break;\n                }\n            }\n        }\n        else low[x]=min(low[x],dfn[y]);\n    }\n}\n\nint main()\n{\n    n=read(),m=read(),q=read(),tmp=n;\n    For(i,1,m)\n    {\n        int a=read(),b=read();\n        Addedge(a,b),Addedge(b,a);\n        mp[a][b]=mp[b][a]=1;\n    }\n    Tarjan(1),dfs(1,0);\n    For(i,1,m)\n    {\n        int a=Edge[i*2].frm,b=Edge[i*2].to;\n        w[Get(a,b)].emplace_back(a,b);\n    }\n    g[1]=1,dfs2(1,0);\n    For(i,1,n) if(f[i] && g[i]) {while(q--) printf(\"Yes\\n\"); return 0;}\n    while(q--)\n    {\n        int a=read(),b=read(),l=LCA(a,b);\n        if(l!=a) printf(\"%s\\n\",g[a]?\"Yes\":\"No\");\n        else l=Jump(b,dep[b]-dep[a]-1),printf(\"%s\\n\",f[l]?\"Yes\":\"No\");\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1682254271,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P7353 [2020-2021 \u96c6\u8bad\u961f\u4f5c\u4e1a] Tom & Jerry"
    },
    {
        "content": "\u770b\u5230\u201c\u4e0d\u80fd\u7ecf\u8fc7 Tom \u6240\u5728\u7684\u70b9\u201d\uff0c\u4e0d\u96be\u60f3\u5230\u5272\u70b9\u3002\n\n\u5bf9\u4e8e Tom \u800c\u8a00\uff0c\u9996\u5148\u53ef\u4ee5\u6ce8\u610f\u5230\u4e00\u79cd\u7b80\u5355\u7684\u7b56\u7565\uff1a\n\n- \u903c\u7740 Jerry \u5f80\u67d0\u4e2a\u5b50\u8fde\u901a\u5757\u91cc\u8d70\u3002\n\n\u73b0\u5728\u6765\u5177\u4f53\u5730\u63cf\u8ff0\u8fd9\u4e2a\u201c\u903c\u201d\u7684\u8fc7\u7a0b\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5728\u8fd9\u79cd\u7b56\u7565\u4e0b\uff0c\u5f53 Tom \u83b7\u80dc\u65f6\uff0cTom \u521d\u59cb\u4e00\u5b9a\u5904\u4e8e\u4e00\u4e2a\u5272\u70b9\uff0c\u6bcf\u4e00\u6b65\u90fd\u4f1a\u8d70\u8fdb\u4e00\u4e2a\u8ba9 Jerry \u6d3b\u52a8\u8303\u56f4\u66f4\u5c0f\u7684\u5272\u70b9\uff0c\u4ece\u800c Jerry \u88ab\u8feb\u5728\u4e00\u4e2a\u66f4\u5c0f\u7684\u5b50\u8fde\u901a\u5757\u5185\u8d70\uff0c\u6700\u7ec8\u88ab\u6293\u5230\u3002\n\n\u8003\u8651\u5efa\u51fa\u539f\u56fe\u7684\u5706\u65b9\u6811\uff0c\u73b0\u5728\u628a $a$ \u63d0\u8d77\u6765\u5f53\u5706\u65b9\u6811\u7684\u6839\uff0c\u8bbe $b$ \u5728\u6362\u6839\u540e\u7684\u6811\u4e0a\u4f4d\u4e8e $a$ \u7684 $b'$ \u5b50\u6811\uff0c\u5219 $b$ \u4e00\u5f00\u59cb\u53ea\u80fd\u5728 $b'$ \u5b50\u6811\u5185\u7684\u5706\u70b9\u5185\u6d3b\u52a8\u3002\n\n\u73b0\u5728 Tom \u60f3\u8981\u628a\u5f53\u524d\u4f4d\u7f6e $p$ \u79fb\u5230\u4e00\u4e2a $q$\uff0c\u6ee1\u8db3\uff1a\n\n- $q$ \u4e3a\u5272\u70b9\u6216\u53ef\u4ee5\u5728 $q$ \u6293\u5230 Jerry\u3002\n- \u5706\u65b9\u6811\u4e0a $q$ \u5728 $p$ \u5b50\u6811\u4e2d\u3002\n- \u539f\u56fe\u4e0a $p, q$ \u6709\u8fb9\u3002\n\n\u8fd9\u4e2a\u51e0\u4e2a\u6761\u4ef6\u540c\u65f6\u4e5f\u544a\u8bc9\u6211\u4eec $q$ \u4e00\u5b9a\u662f $p$ **\u6240\u5728\u7684\u67d0\u4e2a\u70b9\u53cc\u7684\u9664 $p$ \u4ee5\u5916\u7684\u70b9**\uff08\u79f0\u6b64\u4e3a\u6761\u4ef6 $P$\uff09\uff0c\u8fd9\u6837\u624d\u53ef\u80fd\u6ee1\u8db3\u8ddd\u79bb\u4e3a $1$\u3002\n\n\u6ce8\u610f\u5230 Jerry \u5728\u7b2c\u4e00\u6b21\u64cd\u4f5c\u65f6\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u70b9\uff0c\u6240\u4ee5 $\\forall u \\in subtree_{b'}$\uff0c\u90fd\u9700\u8981\u6ee1\u8db3\u5728\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u64cd\u4f5c\u540e\uff0c\u5b58\u5728\u4e00\u79cd\u65b9\u6848\u4f7f\u5f97 Tom \u6700\u7ec8 $p = u$\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c$\\forall p \\in subtree_{b'}$ \u4e14 $q$ \u6ee1\u8db3\u6761\u4ef6 $P$\uff0c$p, q$ \u5728\u539f\u56fe\u4e0a\u6709\u8fb9\u3002\n\n\u6211\u4eec\u80af\u5b9a\u4e0d\u53ef\u80fd\u628a\u6bcf\u4e2a $a$ \u62ff\u51fa\u6765\u5f53\u6839\u8ba8\u8bba\uff0c\u4e8e\u662f\u8003\u8651\u6362\u6839 dp\uff0c\u9884\u5904\u7406 $f_u, g_u$ \u8868\u793a\u4ee5 $1$ \u4e3a\u6839\u65f6\u5185 / \u5916\u5b50\u6811\u662f\u5426\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u56de\u7b54\u8be2\u95ee\u65f6\u8ba8\u8bba\u4e00\u4e0b $b$ \u662f\u5426\u5728 $a$ \u7684\u5b50\u6811\u4e2d\u5373\u53ef\u3002\n\n\u4f46\u56e0\u4e3a $a$ \u4e00\u5f00\u59cb\u53ef\u80fd\u4e0d\u662f\u5272\u70b9\uff0c\u4e00\u5f00\u59cb Jerry \u53ef\u4ee5\u5904\u5728\u4e00\u4e2a\u4efb\u610f\u70b9\u3002\n\n\u6ce8\u610f\u5230\u6b64\u65f6 Tom \u5e76\u975e\u5fc5\u8d25\uff0c\u56e0\u4e3a\u6b64\u65f6 Tom \u8fd8\u6709\u53e6\u4e00\u79cd\u7b56\u7565\uff1a\n\n- \u8d70\u5230\u4e00\u4e2a\u70b9 $r$\uff0c\u6ee1\u8db3\u4ee5 $r$ \u4e3a\u6839\uff0c\u65e0\u8bba Jerry \u4f4d\u4e8e\u54ea\u4e2a\u975e $r$ \u70b9\uff0c\u90fd\u53ef\u4ee5\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u88ab\u6293\u5230\u3002\n\n\u5728\u6362\u6839 dp \u7ed3\u675f\u540e\u770b\u4e00\u4e0b\u6709\u6ca1\u6709\u70b9 $u$ \u6ee1\u8db3 $f_u = g_u = \\operatorname{true}$\uff0c\u5982\u679c\u6709\u5219\u7b54\u6848\u4e3a\u5168 `Yes`\uff0c\u5426\u5219\u8be5\u7b56\u7565\u4e00\u5b9a\u4e0d\u53ef\u884c\u3002\n\n\u7efc\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m + (n + q) \\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <set>\n#include <stack>\n#include <cmath>\n\nusing namespace std;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n} Edge;\n\nint cnt1 = 0, cnt2 = 0;\nint head1[100007], dfn[100007], low[100007], head2[200007], depth[200007], in[200007], fa[200007][27], out[200007];\nbool vis[100007], dp1[200007], dp2[200007];\nEdge edge1[200007], edge2[400007];\nset<int> se1;\nstack<int> stk;\nset<int> se2[100007];\n\ninline void add_edge1(int start, int end){\n\tcnt1++;\n\tedge1[cnt1].nxt = head1[start];\n\thead1[start] = cnt1;\n\tedge1[cnt1].end = end;\n}\n\ninline void add_edge2(int start, int end){\n\tcnt2++;\n\tedge2[cnt2].nxt = head2[start];\n\thead2[start] = cnt2;\n\tedge2[cnt2].end = end;\n}\n\nvoid tarjan(int u, int father, int n, int &id, int &bcc_cnt){\n\tint son_cnt = 0;\n\tdfn[u] = low[u] = ++id;\n\tvis[u] = true;\n\tstk.push(u);\n\tfor (register int i = head1[u]; i != 0; i = edge1[i].nxt){\n\t\tint x = edge1[i].end;\n\t\tif (!vis[x]){\n\t\t\tson_cnt++;\n\t\t\ttarjan(x, u, n, id, bcc_cnt);\n\t\t\tlow[u] = min(low[u], low[x]);\n\t\t\tif (low[x] >= dfn[u]){\n\t\t\t\tint pos = ++bcc_cnt + n, cur;\n\t\t\t\tadd_edge2(pos, u);\n\t\t\t\tadd_edge2(u, pos);\n\t\t\t\tdo {\n\t\t\t\t\tcur = stk.top();\n\t\t\t\t\tstk.pop();\n\t\t\t\t\tadd_edge2(pos, cur);\n\t\t\t\t\tadd_edge2(cur, pos);\n\t\t\t\t} while (cur != x);\n\t\t\t}\n\t\t} else {\n\t\t\tlow[u] = min(low[u], dfn[x]);\n\t\t}\n\t}\n\tif (father == 0 && son_cnt == 0){\n\t\tint pos = ++bcc_cnt + n;\n\t\tadd_edge2(pos, u);\n\t\tadd_edge2(u, pos);\n\t}\n}\n\nvoid dfs1(int u, int father, int n, int &id){\n\tint t;\n\tdepth[u] = depth[father] + 1;\n\tt = log2(depth[u]);\n\tin[u] = ++id;\n\tfa[u][0] = father;\n\tfor (register int i = 1; i <= t; i++){\n\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];\n\t}\n\tdp1[u] = true;\n\tfor (register int i = head2[u]; i != 0; i = edge2[i].nxt){\n\t\tint x = edge2[i].end;\n\t\tif (x != father){\n\t\t\tdfs1(x, u, n, id);\n\t\t\tdp1[u] &= dp1[x];\n\t\t\tif (u > n) dp1[u] &= se2[father].count(x);\n\t\t}\n\t}\n\tout[u] = id;\n}\n\nvoid dfs2(int u, int n){\n\tint cnt1 = 0, size;\n\tse1.clear();\n\tif (fa[u][0] != 0) se1.insert(fa[u][0]);\n\tfor (register int i = head2[u]; i != 0; i = edge2[i].nxt){\n\t\tint x = edge2[i].end;\n\t\tif (x != fa[u][0]){\n\t\t\tse1.insert(x);\n\t\t\tif (!dp1[x]) cnt1++;\n\t\t}\n\t}\n\tsize = se1.size();\n\tfor (register int i = head2[u]; i != 0; i = edge2[i].nxt){\n\t\tint x = edge2[i].end;\n\t\tif (x != fa[u][0]){\n\t\t\tdp2[x] = dp2[u] && (cnt1 == 0 || (cnt1 == 1 && !dp1[x]));\n\t\t\tif (u > n){\n\t\t\t\tint cnt2 = 0;\n\t\t\t\tfor (register int j = head1[x]; j != 0; j = edge1[j].nxt){\n\t\t\t\t\tif (se1.count(edge1[j].end)) cnt2++;\n\t\t\t\t}\n\t\t\t\tdp2[x] &= cnt2 + 1 == size;\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = head2[u]; i != 0; i = edge2[i].nxt){\n\t\tint x = edge2[i].end;\n\t\tif (x != fa[u][0]) dfs2(x, n);\n\t}\n}\n\ninline bool check(int u, int v){\n\treturn in[u] <= in[v] && in[v] <= out[u];\n}\n\ninline int jump(int u, int k){\n\tfor (register int i = 0; (1 << i) <= k; i++){\n\t\tif (k >> i & 1) u = fa[u][i];\n\t}\n\treturn u;\n}\n\nint main(){\n\tint n, m, q, dfn_id1 = 0, bcc_cnt = 0, dfn_id2 = 0;\n\tcin >> n >> m >> q;\n\tfor (register int i = 1; i <= m; i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tse2[x].insert(y);\n\t\tse2[y].insert(x);\n\t\tadd_edge1(x, y);\n\t\tadd_edge1(y, x);\n\t}\n\ttarjan(1, 0, n, dfn_id1, bcc_cnt);\n\tdfs1(1, 0, n, dfn_id2);\n\tdp2[1] = true;\n\tdfs2(1, n);\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (dp1[i] && dp2[i]){\n\t\t\tfor (register int j = 1; j <= q; j++){\n\t\t\t\tcout << \"Yes\" << endl;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor (register int i = 1; i <= q; i++){\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\tif (!check(a, b)){\n\t\t\tif (dp2[a]){\n\t\t\t\tcout << \"Yes\" << endl;\n\t\t\t} else {\n\t\t\t\tcout << \"No\" << endl;\n\t\t\t}\n\t\t} else if (dp1[jump(b, depth[b] - depth[a] - 1)]){\n\t\t\tcout << \"Yes\" << endl;\n\t\t} else {\n\t\t\tcout << \"No\" << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1680097471,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P7353 \u3010[2020-2021 \u96c6\u8bad\u961f\u4f5c\u4e1a] Tom & Jerry\u3011"
    }
]