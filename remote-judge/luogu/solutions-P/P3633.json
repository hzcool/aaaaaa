[
    {
        "content": "\n\n## \u5206\u6790\n\n\u8fd9\u662f\u4e00\u4e2a\u4e00\u79cd A \u3001 B \u95f4\u7684\u535a\u5f08\uff0c\u4f46\u4e0d\u662f\u516c\u5e73\u7ec4\u5408\u6e38\u620f\u3002\u9762\u5bf9\u8fd9\u79cd\u9898\u76ee\uff0c\u9996\u5148\u5e94\u5f53\u601d\u8003\u4e00\u79cd\u66b4\u529b\u7b97\u6cd5\uff0c\u5e76\u8111\u7b97\u4e00\u7ec4\u5c0f\u89c4\u6a21\u6570\u636e\uff0c\u4ee5\u6b64\u6765\u68c0\u9a8c\u8bfb\u9898\u662f\u5426\u51c6\u786e\uff0c\u540c\u65f6\uff0c\u8fd9\u4e2a\u66b4\u529b\u7b97\u6cd5\u4e5f\u5f88\u53ef\u80fd\u8fd8\u662f\u4e00\u4e2a\u53ef\u5f97\u5206\u7684\u7b97\u6cd5\u3002\n\n## \u66b4\u529b\u89e3\u6cd5\n\n\u4e0b\u9762\u6765\u68b3\u7406\u4e00\u4e0b\u51b3\u7b56\u8fc7\u7a0b\uff1a\n\n- A \u9009\u62e9\u5355\u8bcd\u7684\u957f\u5ea6\u3002\n\n- B \u9009\u62e9\u731c\u7684\u5b57\u6bcd\u3002\n\n- \u5728\u4fdd\u8bc1\u4ecd\u6709\u5355\u8bcd\u7684\u60c5\u51b5\u4e0b\uff0cA \u9009\u62e9\u662f\u5426\u8ba9 B \u5bf9,\u82e5\u8ba9 B \u5bf9\uff0c\u5219\u8fd8\u5e94\u7ed9\u51fa\u5355\u8bcd\u7684\u4f4d\u7f6e\u3002\n\t\n- \u91cd\u590d\u4e0a\u4e24\u6b65\uff0c\u76f4\u81f3\u51fa\u73b0\uff1a\n\t\n    1.B \u731c\u51fa\u5355\u8bcd\u2014\u2014B\u8d62\u3002\n\t\n    2.B \u731c\u9519\u6570\u4e25\u683c\u5927\u4e8e\u5355\u8bcd\u957f\u5ea6\u2014\u2014A\u8d62\u3002\n    \n\u7531\u4e8e\u662f\u8981\u6c42\u5fc5\u80dc\u7b56\u7565\uff0c\u91c7\u7528\u641c\u7d22\u679a\u4e3e\u6240\u6709\u60c5\u51b5\u3002\u5177\u4f53\u5730\uff0c\u5f53\u505a\u51b3\u7b56\u65f6\uff0c\u5f53\u524d\u4e00\u65b9\u5fc5\u80dc\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u51b3\u7b56\u4e2d\u5b58\u5728\u5fc5\u80dc\u7684\u9009\u9879\u3002\n\n## \u590d\u6742\u5ea6\u5206\u6790\n\u5927\u6982\u662f$O(k \\cdot len^{len})$\uff08\u5b9e\u6d4b\u53ef\u8fc7\u7684\uff09\n\n## \u5177\u4f53\u5b9e\u73b0\n```cpp\n#include <bits/stdc++.h>\n\n#define For(i,a,b) for(int i = a ; i <= b ; i ++)\n#define FoR(i,a,b) for(int i = a ; i >= b ; i --)\ntypedef long long ll;\nconst int MAXK = 1123;\nconst int MAXL = 11;\nusing namespace std;\n\nint C , K;\nchar words[MAXK][MAXL];\nbool can_use[MAXK];//\u5355\u8bcd\u662f\u5426\u53ef\u7528\nbool cannot_use[29];//\u5b57\u6bcd\u662f\u5426\u53ef\u731c\nint stk[MAXK] , tp;\nint cnt , len;\n\nint findch(char *s , char c) {\n\tfor (int i = 0 ; s[i] ; i ++)\n\t\tif (s[i] == c)\n\t\t\treturn i;\n\treturn -1; \n}\n\nbool win_A(int blank , int p = 0) {//A \u662f\u5426\u5fc5\u80dc\n\tif (blank < 0) \n\t\treturn true;\n\tif (cnt <= 1)\n\t\treturn false;\n\tFor (ch , 0 , 25) {//B \u51b3\u7b56\n\t\tbool flag = false;\n\t\tif (cannot_use[ch] == true)\n\t\t\tcontinue;\n\t\tregister int nw = tp;\n\t\tFor (i , 1 , K)//A\u51b3\u7b56\n\t\t\tif (can_use[i] && (~findch(words[i] , ch + 'A')))\n\t\t\t\tcan_use[cnt -- , stk[++ tp] = i] = false;\n\t\tif (win_A(blank - 1 , p + 1))\n\t\t\tflag = true;\n\t\t//cout << \"asdf\" << flag << endl;\n\t\twhile (tp > nw)\n\t\t\tcan_use[cnt ++ , stk[tp --]] = true;\n\t\tif (flag)\n\t\t\tcontinue;\n\t\t\t\n\t\tFor (k , 0 , len - 1) {\n\t\t\tFor (i , 1 , K)\n\t\t\t\tif (can_use[i] && findch(words[i] , ch + 'A') != k)\n\t\t\t\t\tcan_use[cnt -- , stk[++ tp] = i] = false; \n\t\t\tcannot_use[ch] = true;\n\t\t\tif (win_A(blank , p + 1))\n\t\t\t\tflag = true;\n\t\t\tcannot_use[ch] = false;\n\t\t\twhile (tp > nw)\n\t\t\t\tcan_use[cnt ++ , stk[tp --]] = true;\n\t\t\tif (flag)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (!flag)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\nvoid work() {\n\tscanf (\"%d\" , &K);\n\tFor (i , 1 , K) {\n\t\tscanf (\"%s\" , words[i]);\n\t}\n\tfor (len = 1 ; len <= 7 ; len ++) {\n\t\tcnt = 0;\n\t\tFor (i , 1 , K)\n\t\t\tcnt += (int)(can_use[i] = (len == strlen(words[i])));\n\t\ttp = 0; \n\t\tmemset(cannot_use , false , sizeof(cannot_use)); \n\t\tif (cnt > 0 && win_A(len)) {\n\t\t\tprintf (\"Yes\\n\");\n\t\t\treturn;\n\t\t}\n\t}\n\tprintf (\"No\\n\");\n}\n\nint main() {\n\tscanf (\"%d\" , &C);\n\twhile (C --) \n\t\twork();\n\treturn 0;\n}\n```\n\n## \u603b\u7ed3\n\u4f60\u770b\uff0c\u8fd9\u9a6c\u8702\u6e05\u65b0\u3001\u4f18\u7f8e\u3001\u53ef\u8bfb\u6027\u5f3a\u3001\u77ed\u5c0f\u7cbe\u608d\u3002\u5982\u679c\u4f60\u60f3\u5728\u901a\u8fc7\u7684\u524d\u63d0\u4e0b\uff0c\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u53ef\u4ee5\n\n- \u82e5\u5269\u4f59\u5355\u8bcd\u6570\u5927\u4e8e A \u51b3\u7b56\u6570\u7684\u5269\u4f59\u7a7a\u683c\u6b21\u65b9\uff0c\u5219 A \u5fc5\u80dc\u3002\n- \u82e5\u5269\u4f59\u5355\u8bcd\u6570\u5c0f\u4e8e\u7b49\u4e8e\u5269\u4f59\u7a7a\u683c\u6570 + 1 , \u5219 B \u5fc5\u80dc\u3002\n\n### Q:\n\u8fd9\u9898\u4f5c\u4e3a\u4e00\u4e2a\u6734\u7d20\u7684\u641c\u7d22\u6709\u4ec0\u4e48\u610f\u4e49\u5462\uff1f\n### A:\n\u63d0\u9ad8\u5bf9\u5197\u957f\u95ee\u9898\u7684\u5206\u6790\u80fd\u529b\u4e0e\u4ee3\u7801\u80fd\u529b\u3002",
        "postTime": 1620652929,
        "uid": 219202,
        "name": "code_hunter",
        "ccfLevel": 0,
        "title": "P3633 [APIO2011]\u731c\u5355\u8bcd \u9898\u89e3"
    }
]