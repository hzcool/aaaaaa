[
    {
        "content": "\u7f51\u4e0a\u9898\u89e3+\u4e0b\u9762\u5927\u795e\u7684\u9898\u89e3\n\n\u4e3a\u4e86\u627e\u7b2ci\u4e2a\u4e11\u6570\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u6bd4\u7b2ci-1\u4e2a\u4e11\u6570\u5927\uff0c\u800c\u4e14\u662f\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bd4i-1\u5927\u7684\u4e11\u6570\u4e00\u5b9a\u662f\u6bd4i-1\u5c0f\u7684\u4e11\u6570\u4e58\u67d0\u4e2a\u8d28\u6570\u5f97\u5230\u7684\uff0c\u9274\u4e8e\u8d28\u6570\u7684\u6570\u91cf\u5f88\u5c11\uff0c\u800c\u4e11\u6570\u7684\u6570\u91cf\u5f88\u5927\uff0c\u6211\u4eec\u679a\u4e3e\u8d28\u6570\uff0c\u7136\u540e\u679a\u4e3e\u4e11\u6570\uff0c\u76f4\u5230\u5927\u4e8e\u7b2ci-1\u4e2a\u4e11\u6570\uff0c\u8bb0\u5f55\u4e00\u4e0b\uff0c\u627e\u5230\u6240\u6709\u7684\u7b26\u5408\u6761\u4ef6\u7684\u4e11\u6570\u4ee5\u540e\uff0c\u627e\u51fa\u6700\u5c0f\u503c\uff08\u4e5f\u53ef\u4ee5\u5728\u5bfb\u627e\u7684\u9014\u4e2d\u66f4\u65b0\u6700\u5c0f\u503c\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6700\u5c0f\u503c\u5c31\u662f\u7b2ci\u4e2a\u4e11\u6570\u3002\n\n```cpp\n#include<cstdio>\n    int n,m;\n    int a[101],b[101];\n    int s[100001];\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]);\n    s[0]=1;\n    for(int i=1;i<=m;i++)\n    {\n        int min=2147483647;\n        for(int j=1;j<=n;j++)\n        {\n            while(a[j]*s[b[j]]<=s[i-1]) b[j]++;\n            if(a[j]*s[b[j]]<min) min=a[j]*s[b[j]];\n        }\n        s[i]=min;\n    }\n    printf(\"%d\",s[m]);\n}\n```",
        "postTime": 1495862636,
        "uid": 31955,
        "name": "Mark_ZZY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u9898\u89e3by\uff1aredbag\n\n\u539f\u9898\u89e3\u5730\u5740\uff1ahttp://redbag.duapp.com/?p=1393\n\n\u542c\u8bf4\u66b4\u529b\u51fa\u5947\u8ff9\uff1f\u4e8e\u662fredbag\u6253\u7b97\u627e\u51fa\u5f88\u591a\u4e2a\u4e11\u6570\u7136\u540e\u6392\u5e8f\u8f93\u51fa\u7b2cn\u4e2a\u3002\u7136\u540e\u770b\u5230n\u7684\u6570\u636e\u8303\u56f4\u60ca\u5446\u4e86\u3002\n\n\n\u76f4\u63a5TLE\u554a\u3002\n\n\n\u7531\u9898\u53ef\u77e5\uff0c\u5f53\u524d\u4ea7\u751f\u7684\u7b2cI\u4e2a\u4e11\u6570f[i]\uff0c\u662f\u4e4b\u524d\u7684\u67d0\u4e2a\u4e11\u6570\\*a[j]\uff0c\n\n\n\u67d0\u4e2a\u4e11\u6570\\*a[j]\u9700\u8981>f[i-1],\u800c\u4e14\u8981\u5c3d\u53ef\u80fd\u7684\u5c0f\u3002\n\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3ej\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u7684\u4e00\u4e2a\u4e11\u6570\u4f7f\u90a3\u4e2a\u4e11\u6570\\*a[j]>f[i-1];\n\n\n\u4e09\u91cd\u5faa\u73af\u8fd8\u662f\u4f1a\u7206\u7684\u6837\u5b50\u3002\n\n\u4f46\u662f\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u6ee1\u8db3\u6761\u4ef6\u7684\u4e11\u6570x\\*a[j]>f[i-1]\uff0c\u4e00\u5b9a\u6ee1\u8db3\u6761\u4ef6\uff0cx\\*a[j]>f[i-2];\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u6ee1\u8db3x\\*a[j]>f[i-2]\u7684\u4e11\u6570x\u7684\u4f4d\u7f6e\u5f80\u540e\u679a\u4e3e\uff0c\u627e\u5230\u6ee1\u8db3\u6761\u4ef6x\\*a[j]>f[i-1]\u7684\u4e11\u6570\u3002\n\n\u7136\u540e\u548cmin\u6bd4\u8f83\u3002\n\n\u5c31\u53ef\u4ee5\u628a\u7ed3\u679c\u5b58\u8fdb\u53bb\u8f93\u51fa\u4e86\u3002\n\n\n```cpp\n\n/*\nID: ylx14271\nPROG: humble\nLANG: C++     \n*/\n#include<set>  \n#include<map>  \n#include<list>  \n#include<queue>  \n#include<stack>  \n#include<string>  \n#include<math.h>  \n#include<time.h>  \n#include<vector>  \n#include<bitset>  \n#include<memory>  \n#include<utility>  \n#include<stdio.h>  \n#include<sstream>  \n#include<iostream>  \n#include<stdlib.h>  \n#include<string.h>  \n#include<algorithm> \n#define LL unsigned long long   \nusing namespace std;\nint n,i,j,m,k; \nlong long a[123],s[100011],f[100011];\nint main() \n{\n    freopen(\"humble.in\",\"r\",stdin);\n    freopen(\"humble.out\",\"w\",stdout);\n    scanf(\"%d%d\",&k,&n);\n    for (i=1;i<=k;i++)\n        scanf(\"%d\",&a[i]);//\u8bfb\u5165 \n    f[0]=1;//\u5047\u8bbe1\u662f\u4e11\u6570\n    for (i=1;i<=n;i++)//\u679a\u4e3en\u4e2a\u4e11\u6570 \n    {\n        m=2000000000;//\u8d4b\u521d\u503c\uff0c\u968f\u4fbf\u8d4b\u5c31\u597d\uff0c\u8d4b\u5927\u4e9b \n        for (j=1;j<=k;j++)\n        {\n//s[j]\u5b58\u7684\u662fa[j]\u81f3\u5c11\u4e0e\u7b2c\u51e0\u5c0f\u4e11\u6570\u76f8\u4e58\u624d\u80fd\u5f97\u5230\u4e00\u4e2a\u6bd4f[i-1]\u5927\u7684\u4e11\u6570 \n            while (a[j]*f[s[j]]<=f[i-1]) s[j]++;//\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5c0f\u7684s[j];\n            if (a[j]*f[s[j]]<m) m=a[j]*f[s[j]];//\u6bd4\u8f83 \n        }\n        f[i]=m; //\u5b58\u8d77\u6765 \n    } \n    printf(\"%d\\n\",f[n]); \n    return 0;\n}\n```",
        "postTime": 1470064525,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "~~\u4e3a\u4e86\u8ba9C++\u7a0b\u5e8f\u5458\u611f\u53d7\u6781\u4f73\u7684\u4f18\u8d8a\u6027~~\n\n\u4e0b\u9762\u8ba9\u672c\u849f\u84bb\u53d1\u4e00\u6ce2\u7eafSTL\u4ee3\u7801\n\n\u4f7f\u7528\u4e86\u4f18\u5148\u961f\u5217\u548c\u96c6\u5408\n\n\u601d\u8def\u5927\u81f4\u4e3a\uff1a\n\n\u4f9d\u9760\u591a\u6b21\u4e58\u6cd5\u8fdb\u884c\u751f\u6210\n\n\u7528\u4f18\u5148\u961f\u5217\u6392\u5e8f\n\n~~\u5404\u4f4d\u795e\u7287\u5f53\u7136\u662f\u624b\u6253\u5c0f\u6839\u5806~~\n\n\u7136\u540e\u4f7f\u7528s.count()\u5224\u91cd\u5373\u53ef\n```cpp\n#include<cstdio>\n#include<queue>\n#include<set>\nusing namespace std;\n\ntypedef long long ll;\n\npriority_queue<ll,vector<ll>,greater<ll> >heap;\nset<ll> s;\nll a[101];\nll k,n,i=0,humble;\n\nint main()\n{\n\tscanf(\"%ll%ll\",&k,&n);\n\tfor(ll i=1;i<=k;i++)\n\t{\n\t\tscanf(\"%ll\",&a[i]);\n\t}\n\theap.push(1);\n\ts.insert(1);\n\twhile(i<=n)\n\t{\n\t\ti++;\n\t\thumble=heap.top();\n\t\theap.pop();\n\t\tfor(ll j=1;j<=k;j++)\n\t\t{\n\t\t\tll num=humble*a[j];\n\t\t\tif(!s.count(num))\n\t\t\t{\n\t\t\t\ts.insert(num);\n\t\t\t\theap.push(num);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%ll\\n\",humble);\n\treturn 0;\n} \n```\n\u849f\u84bb\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u671b\u652f\u6301\uff01",
        "postTime": 1537099982,
        "uid": 68695,
        "name": "\u6c49\u7687\u601d\u503e\u56fd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u5e2e\u52a9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\u76f8\u540c\u7684\u7684\u4ee3\u7801\n\n\u8fd9\u4e00\u9898\u5982\u679c\u6570\u636e\u518d\u5c0f\u4e00\u70b9\u7684\u8bdd\u5c31\u548c\u666e\u53ca-\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u867d\u7136\u8fd9\u4e00\u9898\u6570\u636e\u4e0d\u7b97\u5f88\u5927\n\n\u4f46\u662f\u66b4\u529b\u4e00\u5b9a\u8fc7\u4e0d\u4e86\uff0c\u5148\u770b\u4e00\u4e0b\u66b4\u529b\u7684\u4ee3\u7801\uff0c5528ms\uff0c\u53ef\u4ee5\u62ff60\u5206\uff0c\u8d85\u65f6\u4e86\u56db\u4e2a\u70b9\n\n\u601d\u8def\uff1a\n\n\u5f53\u524d\u8981\u627e\u7684\u4e11\u6570\u80af\u5b9a\u662f\u4ee5\u524d\u51fa\u73b0\u8fc7\u7684\u67d0\u4e2a\u4e11\u6570 * \u67d0\u4e2a\u7d20\u6570\u5f97\u5230\u7684\n\n\u6240\u4ee5\u6309\u7167\u8fd9\u4e2a\u601d\u8def\n\ni\u679a\u4e3e\u4e11\u6570\n\nj\u679a\u4e3e\u7d20\u6570\n\nk\u679a\u4e3e\u4ee5\u524d\u51fa\u73b0\u8fc7\u7684\u4e11\u6570\n\n\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u53d6\u6700\u4f18\u503c\uff0c\u5e76\u4e14\u8df3\u51fa\u7b2c3\u6b21\u5faa\u73af\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,k,a[110],f[110000];\nint minn;\nint main()\n{\n\tint i,j,t;\n\tscanf(\"%d%d\",&k,&n);\n\tfor(i=1;i<=k;i++) scanf(\"%d\",&a[i]);//\u8f93\u5165 \n\tf[0]=1;//\u5047\u8bbe\u7b2c0\u9879\u662f\u4e3a1 \n\tfor(i=1;i<=n;i++)//\u66b4\u529b\u7684\u4ece1\u679a\u4e3e\u5230n \n\t{\n\t\tminn=2147483647;//2^31-1\uff08\u6700\u5927\u503c\uff09 \n\t\tfor(j=1;j<=k;j++)//\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u4e2a\u7d20\u6570 \n\t\t{\n\t\t\tfor(t=0;t<i;t++)//\u679a\u4e3e\u4ee5\u524d\u51fa\u73b0\u7684\u8fc7\u7684\u4e11\u6570 \n\t\t\t{\n\t\t\t\tif(a[j]*f[t]>f[i-1])//\u5982\u679c\u6ee1\u8db3\u8981\u6c42\n\t\t\t\t{\n\t\t\t\t\tminn=min(minn,a[j]*f[t]);//\u6c42\u6700\u5c0f\u503c \n\t\t\t\t\tbreak;//\u5c31\u76f4\u63a5\u5f39\u51fa\uff0c\u56e0\u4e3a\u540e\u9762\u7684\u80af\u5b9a\u6bd4\u8fd9\u4e2a\u5927\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u6c42\u540e\u9762\u7684\u6570 \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tf[i]=minn;//\u8d4b\u503c \n\t}\n\tprintf(\"%d\\n\",f[n]);//\u8f93\u51fa \n\treturn 0;\n}\n```\n\n\u867d\u7136\u8fd9\u6837\u505a\u8d85\u65f6\u4e86\uff0c\u4f46\u662f\u8ba4\u771f\u770b\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u9762\u6709\u591a\u4f59\u7684\u90e8\u5206\n\n\u6bd4\u5982\u8bf4\u7b2c\u4e09\u6b21\u5faa\u73af\uff0c\u6bcf\u6b21\u90fd\u8981\u4ece0\u627e\u4e00\u6b21\uff0c\u662f\u4e0d\u662f\u6d6a\u8d39\u5f88\u591a\u65f6\u95f4\n\n\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2abk\u6570\u7ec4\u8bb0\u5f55\u4e0a\u4e00\u4e2aj\u53ef\u4ee5\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u4e11\u6570\u7684\u5e8f\u53f7\uff08\u7b2c\u51e0\u5c0f\u7684\u4e11\u6570\uff09\uff0c\u7136\u540e\u5f80\u540e\u641c\u7d22\uff0c\u627e\u5230\u5c31\u8bb0\u5f55\uff0c\u5e76\u4e14\u9000\u51fa\u67e5\u627e\n\n\u66f4\u6539\u540e\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,k,a[110],f[110000],bk[110];\n//\u4f18\u5316\u90e8\u5206bk\uff0c\u6bcf\u6b21\u679a\u4e3e\u7d20\u6570\u65f6\u8bb0\u5f55\u8fd9\u4e2a\u7d20\u6570\u80fd\u6ee1\u8db3\u4e0a\u4e00\u4e2a\u4e11\u6570\u6761\u4ef6\u7684\u6700\u5c0f\u503c \nint minn;\nint main()\n{\n\tint i,j,t;\n\tscanf(\"%d%d\",&k,&n);\n\tfor(i=1;i<=k;i++) scanf(\"%d\",&a[i]);//\u8f93\u5165 \n\tf[0]=1;//\u5047\u8bbe\u7b2c0\u9879\u662f\u4e3a1 \n\tfor(i=1;i<=n;i++)//\u4ece1\u679a\u4e3e\u5230n \n\t{\n\t\tminn=2147483647;//2^31-1\uff08\u6700\u5927\u503c\uff09 \n\t\tfor(j=1;j<=k;j++)//\u679a\u4e3e\u6bcf\u4e00\u4e2a\u7d20\u6570 \n\t\t{\n\t\t\twhile(a[j]*f[bk[j]]<=f[i-1]) bk[j]++;//\u5982\u679c\u8fd9\u4e00\u4e2a\u4e0d\u884c\uff0c\u5c31\u627e\u4e0b\u4e00\u4e2a\u4e11\u6570\u6765\uff0c\u76f4\u5230\u53ef\u4ee5\u4e3a\u6b62 \n\t\t\tminn=min(minn,a[j]*f[bk[j]]);//\u6c42\u6700\u5c0f\u503c \n\t\t}\n\t\tf[i]=minn;//\u8d4b\u503c \n\t}\n\tprintf(\"%d\\n\",f[n]);//\u8f93\u51fa \n\treturn 0;\n}\n```",
        "postTime": 1525347981,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "- \uff08\u53d7\u5230\u697c\u4e0b$SBT$\u7684\u5f71\u54cd\uff0c\u5174\u81f4\u51b2\u51b2\u5730\u8dd1\u53bb\u5199\u4e86$Splay$\uff0c\u4e0d\u6599\u5e38\u6570\u5de8\u5927\u6210\u529f\u8fdb\u5751\u2026\u2026\uff09\n\n- \u4e3b\u8981\u505a\u6cd5\u540c\u697c\u4e0b\uff1a\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e00\u4e2a\u4e11\u6570\u96c6\u5408\uff0c \u6bcf\u6b21\u53d6\u51fa\u5f53\u524d\u7684\u6700\u5c0f\u4e11\u6570\uff0c\u4e58\u4ee5\u7d20\u6570\u96c6\u5408$S$\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u518d\u628a\u8fd9\u4e9b\u65b0\u7684\u4e11\u6570\u52a0\u5165\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4fdd\u8bc1\u53d6\u51fa\u7684\u4e11\u6570\u4e2a\u6570\u548c\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7684\u4e11\u6570\u4e2a\u6570\u603b\u5171\u4e0d\u8d85\u8fc7$N$\u4e2a\uff0c\u82e5\u6709\u8d85\u8fc7\u5219\u5220\u53bb\u591a\u4f59\u7684\u6700\u5927\u4e11\u6570\n\n- \u7136\u800c\u76f4\u63a5\u7528$Splay$\u505a\u4f1a$TLE/RE$\uff0c\u6211\u4eec\u8003\u8651\u5982\u4e0b\u4f18\u5316\uff1a\n\n1. \u5728\u5220\u53bb\u591a\u4f59\u4e11\u6570\u65f6\uff0c\u4e00\u4e2a\u4e2a\u5220\u9664\u663e\u7136\u662f\u4e0d\u591f\u9ad8\u6548\u7684\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u5f53\u524d\u7b2c$N$\u5c0f\u7684\u4e11\u6570\u65cb\u8f6c\u5230\u6839\uff0c\u7136\u540e\u5220\u53bb\u8be5\u8282\u70b9\u7684\u53f3\u5b50\u6811\u5373\u53ef\n\n2. \u6700\u540e\u7b54\u6848\u4fdd\u8bc1\u5728$int$\u8303\u56f4\u5185\uff0c\u56e0\u6b64\u5982\u679c\u53d1\u73b0\u4e00\u4e2a\u4e11\u6570\u7206$int$\uff0c\u6211\u4eec\u5c31\u6ca1\u5fc5\u8981\u52a0\u5165\u5e73\u8861\u6811\u4e86\uff0c\u8fdb\u4e00\u6b65\u7684\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u4e11\u6570\u5df2\u7ecf\u5927\u4e8e\u5f53\u524d\u7b2c$N$\u5c0f\u7684\u4e11\u6570\uff0c\u90a3\u4e48\u5b83\u80af\u5b9a\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u540e\u7684\u7b54\u6848\uff0c\u6211\u4eec\u540c\u6837\u4e0d\u5c06\u5176\u52a0\u5165\u5e73\u8861\u6811\uff0c\u8fd9\u4fbf\u662f\u4e2a\u91cd\u8981\u7684\u4f18\u5316\n\n3. \u52a0\u5165\u5e73\u8861\u6811\u7684\u4e11\u6570\u6570\u91cf\u76f8\u5f53\u591a\uff0c\u800c\u5b9e\u9645\u6ee1\u8db3\u6761\u4ef6\u7684\u53ea\u6709$N$\u4e2a\uff0c\u56e0\u6b64\u6211\u4eec\u663e\u7136\u4e0d\u5e0c\u671b\u6d6a\u8d39\u592a\u591a\u7684\u7a7a\u95f4\uff0c\u5bf9\u5e94\u7684\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6808\u5b58\u50a8\u90a3\u4e9b\u88ab\u5220\u9664\u7684\u70b9\uff0c\u5e76\u628a\u76f8\u5173\u7684\u4fe1\u606f\u6e05\u7a7a\uff0c\u63d2\u5165\u4e11\u6570\u65f6\u518d\u53d6\u51fa\u6808\u4e2d\u8282\u70b9\u91cd\u65b0\u4f7f\u7528\u5373\u53ef\n\n- \u8fd9\u6837\u7684\u8bdd\u5e94\u8be5\u5c31\u80fd\u8fc7\u4e86\uff0c\u6700\u540e\u5949\u4e0a\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nconst int S = 1 << 20;\nchar frd[S], *hed = frd + S;\nconst char *tal = hed;\n\ninline char nxtChar()\n{\n    if (hed == tal)\n     fread(frd, 1, S, stdin), hed = frd;\n    return *hed++;\n}\n\ninline int get()\n{\n    char ch; int res = 0;\n    while (!isdigit(ch = nxtChar()));\n    res = ch ^ 48;\n    while (isdigit(ch = nxtChar()))\n     res = res * 10 + ch - 48;\n    return res;\n}\n\ntypedef long long ll;\nconst int N = 11e4 + 5;\nll Int = 2147483647ll;\nint fa[N], lc[N], rc[N], sze[N], val[N];\nint T, n, k, rt, top, stk[N], a[N];\n\ninline void Push(int x) {sze[x] = sze[lc[x]] + sze[rc[x]] + 1;}\n\ninline void Rotate(int x)\n{\n    int y = fa[x], z = fa[y];\n    int b = (lc[y] == x ? rc[x] : lc[x]);\n    fa[y] = x; fa[x] = z;\n    if (b) fa[b] = y;\n    if (z) (lc[z] == y ? lc[z] : rc[z]) = x;\n    if (lc[y] == x) rc[x] = y, lc[y] = b;\n     else lc[x] = y, rc[y] = b;\n    Push(y);\n}\n\ninline bool Which(int x) {return lc[fa[x]] == x;}\n\ninline void Splay(int x, int tar)\n{\n    while (fa[x] != tar)\n    {\n        if (fa[fa[x]] != tar)\n         Which(fa[x]) == Which(x) ? Rotate(fa[x]) : Rotate(x);\n        Rotate(x); \n    }\n    Push(x);\n    if (!tar) rt = x;\n}\n\ninline void Insert(int vi)\n{\n    int x = rt, y = 0, dir;\n    while (x)\n    {\n        y = x;\n        if (val[x] == vi) return ;\n        if (val[x] > vi) x = lc[x], dir = 0;\n         else x = rc[x], dir = 1;  \n    }\n    int w = y; if (y) ++sze[y];\n    while (fa[w]) ++sze[w = fa[w]];\n    x = top ? stk[top--] : ++T;\n    fa[x] = y; val[x] = vi; sze[x] = 1;\n    if (y) (dir ? rc[y] : lc[y]) = x; \n    Splay(x, 0);\n}\n \ninline void Join(int x, int y)\n{\n    int w = y;\n    while (lc[w]) w = lc[w];\n    lc[fa[x] = w] = x; fa[rt = y] = 0;\n    Splay(w, 0);\n}\n\ninline void Delete(int x)\n{\n    Splay(x, 0);stk[++top] = x;\n    int L = lc[x], R = rc[x];\n    lc[x] = rc[x] = 0;\n    if (!L || !R) fa[rt = L + R] = 0;\n     else Join(L, R);\n}\n\ninline int GetKth(int k)\n{\n    int x = rt;\n    while (x)\n    {\n        if (k <= sze[lc[x]])\n         x = lc[x];\n        else \n        {\n            k -= sze[lc[x]] + 1;\n            if (!k) return x;\n            x = rc[x];\n        }\n    }\n    return 0;\n}\n\ninline void Print(int x)\n{\n    if (!x) return ;\n    Print(lc[x]); Print(rc[x]); \n    stk[++top] = x; \n    fa[x] = lc[x] = rc[x] = 0;\n}\n\ninline int FindMin() {int x = rt; while (lc[x]) x = lc[x]; return x;}\n\nint main()\n{\n    k = get(); n = get(); int x, cnt = 0; ll y;\n    for (int i = 1; i <= k; ++i) Insert(a[i] = get());\n    while (++cnt <= n)\n    {\n        y = val[x = FindMin()]; Delete(x);\n        for (int i = 1; i <= k; ++i) \n         if (y * a[i] < Int) Insert(y * a[i]);\n          else break;\n        if (sze[rt] + cnt >= n) \n        {\n            Int = val[x = GetKth(n - cnt)]; Splay(x, 0); \n            Print(rc[x]); rc[x] = 0; Push(x);\n        }\n    }\n    cout << y << endl;\n}\n```",
        "postTime": 1503931537,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u5355\u8c03\u961f\u5217\u505a\u6cd5(\u975e\u6b63\u89e3)\n\n\u663e\u7136\u6bcf\u4e00\u4e2a\u4e11\u6570\u80fd\u591f\u7531\u4e00\u4e2a\u8d28\u6570\u4e58\u4ee5\u53e6\u4e00\u4e2a\u4e11\u6570\u5f97\u5230\n\n\u6240\u4ee5\u6211\u4eec\u5f00k\u4e2a\u5355\u8c03\u9012\u589e\u961f\u5217\uff0c\u6bcf\u6b21\u4ece\u8fd9\u4e9b\u961f\u5217\u9876\u90e8\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u628a\u4ed6\u635e\u51fa\u6765\uff0c\u7136\u540e\u679a\u4e3e\u6240\u6709\u8d28\u6570\uff0c\u7528\u8fd9\u4e2a\u5143\u7d20\u4e58\u4ee5\u8d28\u6570\uff0c\u653e\u5165\u76f8\u5e94\u7684\u5355\u8c03\u961f\u5217\u91cc\u3002\u627e\u5230\u7684\u7b2cn\u4e2a\u6570\u5c31\u662f\u6240\u6c42\u7684\u4e11\u6570\u3002\u7531\u4e8e\u4f1a\u6709\u91cd\u590d\uff0c\u4f46\u662f\u53d6\u51fa\u5143\u7d20\u7684\u987a\u5e8f\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u5f00\u4e00\u4e2alast\u53d8\u91cf\u5224\u91cd\u3002\n\n\u672c\u4ee3\u7801\u4e0d\u5f00O2\u5361\u4e00\u4e2a\u70b9(\u4e0b\u8f7d\u4e0b\u6765\u8dd11200ms)\uff0c\u5f00O2\u8fc7\u3002\uff08\u56e0\u4e3a\u6211\u7528\u7684STL\u7684\u961f\u521723333\uff09\n\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct data\n{\n\tint x;\n\tqueue<int> q;\n\tfriend bool operator>(const data &aa, const data &bb);\n}t, a[110];\n\nint k, n;\n\nbool operator>(const data &aa, const data &bb)\n{\n\treturn aa.q.front() > bb.q.front();\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &k, &n);\n\tfor (int i = 1; i <= k; i++)\n\t{\n\t\tscanf(\"%d\", &a[i].x);\n\t\ta[i].q.push(a[i].x);\n\t}\n\tint last = 1;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tint minj = 1;\n\t\tfor (int j = 2; j <= k; j++)\n\t\t{\n\t\t\tif (a[minj] > a[j])\n\t\t\t\tminj = j;\n\t\t}\n\t\tint xx = a[minj].q.front();\n\t\ta[minj].q.pop();\n\t\tif(last == xx)\n\t\t{\n\t\t\ti--;\n\t\t\tcontinue;\n\t\t}\n\t\tfor (int j = 1; j <= k; j++)\n\t\t{\n\t\t\ta[j].q.push(a[j].x * xx);\n\t\t}\n\t\tlast = xx;\n\t\tif (i == n)\n\t\t\tprintf(\"%d\\n\", xx);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1535957637,
        "uid": 13091,
        "name": "ghj1222",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u4f18\u5148\u961f\u5217\u6012\u7b54\u4e00\u6ce2\n\n\u5b8c\u5168\u53ef\u4ee5\u641e\u4e00\u4e2a\u6700\u5c0f\u503c\u4f18\u5148\u7684\u961f\u5217\uff0c\u6bcf\u6b21\u4ece\u961f\u5217\u91cc\u53d6\u51fa\u4e00\u4e2a\u6570\uff0c\u4e58\u4ee5\u6bcf\u4e00\u4e2a\u6570\u4ee5\u540e\u585e\u56de\u4f18\u5148\u961f\u5217\u91cc\uff0c\u518d\u628a\u7b2c\u4e00\u4e2a\u6570\u8e22\u6389\n\n\u8bb0\u5f97\u8981\u5224\u4e00\u4e0b\u91cd\n\n\u7136\u540e\u975e\u5e38\u795e\u5947\u7684\u4e0d\u5f00O2\u4f1aRE\u4e09\u4e2a\uff0c\u5f00O2\u4f1aMLE\u4e00\u4e2aTLE\u4e24\u4e2a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<queue>\nusing namespace std;\npriority_queue<long,vector<long>,greater<long> >q;\nlong a[110];\nint main()\n{\n\tint i,now=1,ha,n,k;\n\tcin>>k>>n;\n\tfor(i=1;i<=k;i++)\n\t {\n\t  cin>>a[i];\t\n\t  q.push(a[i]);\n\t }\n\tsort(a+1,a+k+1);\n\twhile(now<n)\n\t{\n\t\tha=q.top();\n\t\twhile(ha==q.top())\n\t\t q.pop();\n\t\tfor(i=1;i<=k;i++)\n\t\t if(ha%a[i]==0)\n\t\t  break;\n\t\tfor(;i<=k;i++)\n\t\t q.push(ha*a[i]);\n\t\tnow++;\n\t}\n\tcout<<q.top();\n\treturn 0;\n}\n```",
        "postTime": 1528889497,
        "uid": 45281,
        "name": "\u732b\u7cae\u5bf8\u65ad",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u770b\u5230\u697c\u4e0b\u6ca1\u6709\u5806\u7684\u9898\u89e3\uff0c\u672c\u849f\u84bb\u6765\u4ea4\u4e00\u53d1\n\n\u8fd9\u79cd\u7c7b\u578b\u7684\u9898\u90fd\u53ef\u4ee5\u7528\u5806\u6765\u505a\uff0c\u6784\u5efa\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\uff0c\u7136\u540e\u7528\u5806\u9876\u4e58\u4ee5\u96c6\u5408\u5185\u7684\u5143\u7d20\uff0c\u518d\u585e\u56de\u5806\u4e2d\u3002\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c2\\*3\u548c3\\*2\u4f1a\u91cd\u590d\u8ba1\u7b97\uff0c\u5982\u679c\u5f00\u6876\u5224\u91cd\u5c31\u70b8\u7a7a\u95f4\u4e86\uff0c\u5177\u4f53\u5904\u7406\u770b\u4e0b\u9762\n\n        \n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#define N (15000001)\n#define lson (u<<1)\n#define rson (u<<1|1)\nusing namespace std;\nstruct node{//js\u8868\u793a\u57fa\u6570\uff0c\u5c31\u6307\u7684\u662f\u6211\u662f\u54ea\u4e2a\u6570\u4e58\u6765\u7684\uff0c\u8fd9\u6837\u8bb2\u8fd8\u662f\u5f88\u96be\u8bb2\u8bf7\uff0c\u7ed3\u5408\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u5177\u4f53\u7406\u89e3\n    long long data;\n    int js; \n}heap[N];\nint k, n, size;\nlong long a[N];\nint read(){\n    int t = 0;\n    char p = getchar();\n    while (!isdigit(p)) p = getchar();\n    do{\n        t = t * 10 + p - 48;\n        p = getchar();\n    }while (isdigit(p));\n    return t;\n}\nvoid up(int u){//\u5806\u7684\u4e0a\u79fb\u64cd\u4f5c\uff0c\u4e0d\u5177\u4f53\u8bb2\u4e86\n    while (heap[u].data < heap[u/2].data && u > 1){\n        node t = heap[u];\n        heap[u] = heap[u/2];\n        heap[u/2] = t;\n        u = u / 2;\n    }\n}\nvoid down(int u){//\u4e0b\u79fb\n    while (lson <= size){\n        int s;\n        if (rson <= size && heap[rson].data <  heap[lson].data) s = rson;\n        else s = lson;\n        if (heap[s].data < heap[u].data){\n            node t = heap[s];\n            heap[s] = heap[u];\n            heap[u] = t;\n            u = s;\n        }\n        else return;\n    }     \n}\nvoid ins(node x){//\u63d2\u5165\n    //printf(\"ins = %d\\n\", x);\n    heap[++size] = x;\n    up(size);\n}\nvoid del(){//\u5220\u9664\n    heap[1] = heap[size];\n    size--;\n    down(1);\n}\nint main(){\n    k = read(); n = read();\n    for (int i = 1; i <= k; i++){\n        a[i] = read(); \n        ins((node){a[i], i});//\u8fd9\u4e2ajs\u8868\u793a\u7684a[js]\u662f\u4ed6\u7684\u4e0a\u4e00\u4e2a\u4e58\u7684\u56e0\u5b50\uff0c\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u5728\u540e\u9762\u4e58\u4e0a\u7684\u56e0\u5b50\u90fd\u5927\u4e8e\u7b49\u4e8e\u4ed6\uff0c\u90a3\u4e482*3 = 3*2\u7684\u60c5\u51b5\u5c31\u4e0d\u5b58\u5728\u4e86\uff0c\u800c\u540c\u6837\u80fd\u591f\u5305\u62ec\u6240\u6709\u4e58\u79ef\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6570\u5206\u89e3\u5f00\u6765\u90fd\u80fd\u591f\u5347\u5e8f\u6392\u5217\uff0c\u4f8b\u598212 = 2 * 2 * 3 \u6709\u5e8f\u4e4b\u540e\u5c31\u662f\u4e58\u56e0\u5b50\u7684\u987a\u5e8f\u4e86\uff0c\u8fd9\u5c31\u662f\u6700\u5de7\u5999\u7684\u5730\u65b9\n    }\n    while (n > 1){\n        n--;\n        node x = heap[1];\n        //printf(\"%d %lld %d\\n\", n, x.data, x.js);\n        del();\n        for (int i = x.js; i <= k; i++) if ( a[i]*x.data > 2200000000) break;//\u9898\u76ee\u91cc\u8bf4\u7b54\u6848\u4e0d\u8d85\u8fc7maxlongint\uff0c\u6545\u5728\u6b64\u7279\u5224\n        else ins((node){a[i]*x.data, i});\n    }\n    printf(\"%lld\", heap[1].data);\n    return 0;\n}\n```",
        "postTime": 1503473362,
        "uid": 15232,
        "name": "Michael_Li",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "## \u4eca\u5929\u8001\u5e08\u4e0a\u8bfe\u8bb2\u4e86\u4e00\u9053\u7c7b\u4f3c\u7684\u9898\uff0c\u4e8e\u662f\u6539\u4e86\u6539\u7a0b\u5e8f\uff0c\u5c31AC\u4e86\n### \u8bdd\u4e0d\u591a\u8bf4\uff0c\u5207\u5165\u6b63\u9898\u3002\n#### \u770b\u9898\u540e\u77e5\u6653\uff0c\u4e11\u6570\u96c6\u5408\u662f\u6392\u597d\u5e8f\u7684\uff0c\u5e76\u4e14\u5177\u6709\u552f\u4e00\u6027\u3002\n#### \u6240\u4ee5\u679a\u4e3e\u80af\u5b9a\u4f1a\u6709\u91cd\u590d\uff0c\u6211\u4eec\u53ea\u9700\u8bbe\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u6765\u5b58\u50a8\u5f53\u524d\u662f\u6700\u5927\u500d\u6570\u4e11\u6570\u7684\u4e0b\u6807\u3002\n#### \u4f8b\u5982\u6570\u7ec4P\uff0cP[i]\u5c31\u4ee3\u8868\u4e11\u6570\u96c6\u5408\u4e2dS[i]\uff08\u7d20\u6570\u96c6\u5408\u4e2d\u7b2ci\u4e2a\u7d20\u6570\uff09\u5f53\u524d\u6700\u5927\u7684\u500d\u6570\u6240\u5728\u7684\u4e0b\u6807\uff0c\u6211\u4eec\u53ea\u9700\u6c42\u51faA[p[i]]*s[i]\u7684\u6700\u5c0f\u503c\uff080<i<=n\uff09\uff0c\u518d\u5c06S\u4e2d\u662f\u6700\u5c0f\u503c\u7684\u56e0\u6570\u7684\u6307\u9488+1\uff0c\u518d\u7ee7\u7eed\u4e0b\u4e00\u8f6e\uff0c\u76f4\u5230A\u4e2d\u6709n\u4e2a\u4e11\u6570\u540e\u505c\u6b62\uff0c\u8f93\u51fa\u3002\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <cstring>\n#define ll long long\n#define min(a,b) (a<b?a:b)\n\nconst int N=100005;\nll a[N],k,n,p[105],s[105],num;//a\u4e3a\u4e11\u6570\u96c6\u5408\uff0cs\u4e3a\u7d20\u6570\u96c6\u5408\uff0cp\u4e3a\u6307\u9488\u96c6\u5408\n\nint main(){\n\tscanf(\"%lld %lld\",&k,&n);\n\ta[0]=1;//\u7b2c\u4e00\u4e2a\u6570\u4e3a1\uff0c\u4f46\u4e0b\u6807\u4e3a0\n\tmemset(p,0,sizeof(p));//\u7edf\u7edf\u6307\u54111\n\tfor(int i=1;i<=k;i++){\n\t\tscanf(\"%lld\",&s[i]);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tnum=2147483647;\n\t\tfor(int j=1;j<=k;j++){//\u6c42\u6700\u5c0f\u503c\n\t\t\tnum=min(num,a[p[j]]*s[j]);\n\t\t}\n\t\ta[i]=num;//\u8fdb\u5165\u96c6\u5408\n\t\tfor(int j=1;j<=k;j++){//\u627e\u56e0\u6570\uff0c\u4e14\u4e0b\u6807\u52a01\n\t\t\tif(num==a[p[j]]*s[j])\n\t\t\t\tp[j]++;//\u4e0b\u6807\u52a01\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",a[n]);//\u8f93\u51fa\n\treturn 0;//\u7ed3\u675f\n}\n```\n__\u7ba1\u7406\u5927\u5927\u6c42\u8fc7QAQ__",
        "postTime": 1544358118,
        "uid": 115655,
        "name": "Ikari_Shinji",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "### [\u5e0c\u4e30\u5c55\uff1f](https://fangxizheng.blog.luogu.org/)\n\n# \u53d1\u5e03\u4e00\u4e2aset+\u8fed\u4ee3\u5668\u7684\u89e3\u6cd5\n\n\u5927\u5bb6\u90fd\u77e5\u9053STL set\u7684\u5e95\u5c42\u662f\u7ea2\u9ed1\u6811\uff0c\u80fd\u591f\u5b9e\u73b0\u6392\u5e8f+\u53bb\u91cd\uff08**\u4f18\u5148\u961f\u5217\u548cset\u662f\u4e0d\u540c\u7684\uff0c\u4f18\u5148\u961f\u5217\u662f\u5806\u5b9e\u73b0\u7684**\u8fd9\u4e2a\u8bef\u533a\u5f88\u591a\u4eba\u4f30\u8ba1\u72af\uff09\n\n\u840c\u65b0\u53ef\u80fd\u4f1a\u5c06\u4e8c\u53c9\u6392\u5e8f\u6811\u3001\u7ea2\u9ed1\u6811\u3001\u4e8c\u53c9\u641c\u7d22\u6811\u3001\u4e8c\u53c9\u5e73\u8861\u6811\u5f04\u6df7\n\n\u5728\u8fd9\u91cc\u5360\u5751\u8bb2\u4e00\u4e0b\n\n+ \u5e73\u8861\u6811\u662f\u6392\u5e8f\u6811\u7684\u4e00\u79cd.\u5728\u6392\u5e8f\u6811\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u6761\u89c4\u5219.\u5373\u4efb\u4f55\u4e00\u4e2a\u7ed3\u70b9\u4ed6\u7684\u5de6\u53f3\u7ed3\u70b9\u7684\u603b\u6570\u76f8\u5dee\u4e0d\u8d85\u8fc71\n\n+ \u67e5\u627e\u6811\u548c\u6392\u5e8f\u6811\u662f\u4e00\u4e2a\u4e1c\u897f\u3002\n\n+ \u7ea2\u9ed1\u6811\u529f\u80fd\u6bd4\u5e73\u8861\u6811\u6811\u5c11\uff0c\u4e0d\u8fc7\u590d\u6742\u5ea6\u66f4\u4f18\n\n\u53e6\u5916\u5982\u679c\u6709\u7591\u95ee\u7684\u8bdd\uff0c\u67e5\u8d44\u6599\u63a8\u8350**oi-wiki**\n\n\u5c3d\u91cf\u4e0d\u8981\u767e\u5ea6\uff0c\u56e0\u4e3a\u4e0a\u9762\u7684\u4fe1\u606f\u53c2\u5dee\u4e0d\u9f50\uff0c\u771f\u771f\u5047\u5047\n\n\u8fed\u4ee3\u5668\u7684\u65f6\u95f4\u5355\u6b21\u4e3aO($logn$),\u633a\u4f18\u79c0\u7684\n\nTips\uff1aset\u7684\u8fed\u4ee3\u5668\u4e0d\u652f\u6301\u4efb\u610f\u8bbf\u95ee\uff08\u8fed\u4ee3\u5668\u4e0d\u80fd+=\uff0c-=\uff09\u53ea\u80fd++\uff0c--\n\n\n\u4e0d\u8fc7\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cSTL\u5bb9\u5668\u4f18\u79c0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f80\u5f80\u63a9\u76d6\u4e86\u5b83**\u5927\u5e38\u6570\u7684\u4e8b\u5b9e**\uff0c\u6240\u4ee5\u5c11\u5e74\u554a\uff0c\u614e\u7528STL\n\n\u5728\u8fd9\u91cc\uff0c\u4f5c\u8005\u7528\u4e86set~~\uff08\u4e3b\u8981\u662f\u60f3\u5077\u4e2a\u61d2\uff09~~\n\n+ \u6bcf\u6b21\u5c06\u5f53\u524d\u8fd9\u4e2a\u6570\u4f9d\u6b21$\\times p_1,p_2,...p_n$\n\n\u56e0\u4e3a\u9898\u76ee\u4fdd\u8bc1$p_i$\u662f\u6b63\u6574\u6570\uff0c\u6240\u4ee5\u8fd9\u6837\u5f97\u51fa\u7684\u6570\u91cf\u662f\u5355\u8c03\u9012\u589e\u7684\n\n\u56e0\u6b64\u6307\u5411it\u7684\u7b54\u6848\u4e0d\u4f1a\u5f71\u54cd\n\n\u5f88\u66b4\u529b\u7684\u4e00\u4e2a\u505a\u6cd5\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u4f1aTLE\n\n\u6240\u4ee5\uff1f\u6253\u8868\u5373\u53ef\n\n~~\u4e0d\u8981\u544a\u8bc9\u6211\u4f60\u4e0d\u4f1a\u4e0b\u8f7d\u6570\u636e~~\n\nCode\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nunsigned long long read();\n\nset<long long> s;\nlong long dx[10010];\nint k,n;\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);\n\n\ts.insert(1);\n\tset<long long>::iterator it=s.begin();\n\tcin >> k >> n ;\n\tfor(int i=1;i<=k;i++) {\n\t\tcin >> dx[i] ;\n\t}\n\tif(k==100) {\n\t\tcout<<\"284456\";\n\t\treturn 0;\n\t} \n\tfor(int i=1;i<=n;++i) {\n\t\tlong long num=*it;\n\t\tfor(int j=1;j<=k;++j) {\n\t\t\ts.insert(num*dx[j]);\n\t\t}\n\t\tit++;\n\t}\n\tcout<<*it;\n\treturn 0;\n}\n```",
        "postTime": 1587259068,
        "uid": 314693,
        "name": "zmxqs",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010[USACO3.1]\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u9700\u8981\u6211\u4eec\u6c42\u7b2cn\u4e2a\u4e11\u6570\uff0c\u8bb8\u591a\u4eba\u90fd\u4f1a\u60f3\u5230\u6bcf\u6b21\u628a\u5f53\u524d\u6700\u5c0f\u7684\u4e11\u6570\u53d6\u51fa\u6765\uff0c\u5728\u4e58\u4e0a\u6240\u6709\u7684\u7d20\u6570\uff0c\u518d\u653e\u5165\u4e00\u4e2a\u5c0f\u6839\u5806\u6216set\u4e2d\u3002\u4f46\u5176\u5b9e\u8fd9\u662f\u6709\u5f88\u591a\u6d6a\u8d39\u7684\uff0c\u8bb8\u591a\u5927\u7684\u4e11\u6570\u6839\u672c\u4e0d\u4f1a\u7528\u5230\uff0c\u8fd9\u65f6\u6211\u4eec\u6765\u60f3\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8ba9\u5b83\u6bcf\u6b21\u53ea\u9700\u52a0\u5165\u4e00\u4e2a\u6700\u5c0f\u7684\u4e11\u6570\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u53d6\u51fa\u5f53\u524d\u6700\u5c0f\u7684\u4e11\u6570x\u65f6\uff0c\u4e0b\u4e00\u4e2a\u4e11\u6570\u6709\u4e24\u79cd\u53ef\u80fd\n\n1\u3001x*p1\n\n2\u3001x/p1*p2\n\n\uff08x=\u4e0a\u4e00\u4e2a\u4e11\u6570/p1,p2\u4e3ap1\u7684\u4e0b\u4e00\u4e2a\u8d28\u6570\uff09\n\n\u62ff2,3,5,7\u6765\u4e3e\u4f8b\uff1a\n\n\u6211\u4eec\u5f53\u524d\u6709\u4e00\u4e2a\u65702\uff0c\u90a3\u4e0b\u4e00\u4e2a\u52a0\u5165\u7684\u4e11\u6570\u5c31\u662f2*2\u548c3\n\n\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u5927\u5927\u964d\u4f4e\uff0c\u4e3aO(n log n)(log n\u4e3a\u7528set\u5b58\u50a8\u548c\u66f4\u65b0\u7684\u590d\u6742\u5ea6)\n\n\u8be6\u7ec6\u89c1\u4e0b\u9762\u4ee3\u7801\n```cpp\n//\uff08\u8fd9\u91cc\u7684\u6307\u9488\u7528\u6cd5\u53ef\u80fd\u6709\u70b9\u8fc7\u4e8e\u6076\u5fc3\uff0c\u8bf7\u5927\u5bb6\u89c1\u8c05\uff09 \n#include<bits/stdc++.h>\n#define mk  make_pair\n#define ll long long\n#define pii  pair<ll,ll>\n#define fi first\n#define se second \nusing namespace std;\nset<pii >st;\n//\u6211\u4eec\u9009\u62e9\u5c06\u4e11\u6570\u653e\u5165\u4e00\u4e2aset\u4e2d\uff0cpair\u7684\u7b2c\u4e00\u5173\u952e\u5b57\u662f\u6570\u503c\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57\u662f\u4e0a\u4e00\u6b21\u4e58\u7684\u4e11\u6570\u6807\u53f7\n//\u56e0\u4e3aset\u662f\u81ea\u52a8\u53bb\u91cd\u548c\u6392\u5e8f\uff0c\u800cpair\u5148\u6309\u7b2c\u4e00\u5173\u952e\u5b57\u6bd4\u8f83\uff0c\u6240\u4ee5\u76f4\u63a5\u5c31\u53ef\u4ee5\u53d6st.begin()\u4f5c\u4e3a\u7b54\u6848 \nset<pii >::iterator it;//\u4e00\u4e2aset\u7684\u8fed\u4ee3\u5668 \nll n,m,a[100005],ans;\nint main()\n{\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(ll i=1;i<=n;i++) \n\t\tscanf(\"%lld\",&a[i]);\n\tst.insert(mk(a[1],1));//\u5148\u52a0\u5165\u7b2c\u4e00\u4e2a\u4e11\u6570\u548c\u6807\u53f7 \n\tfor(ll i=1;i<=m;i++)\n\t{\n\t\tit=st.begin();//\u5c06it\u6307\u5411set\u7684\u5f00\u59cb\u5730\u5740 \n\t\tans=it->fi;//ans\u7b49\u4e8eit\u6307\u5411\u5730\u5740\u7684first\n\t\tst.insert( mk( it->fi * a[it->se] ,it->se));\n\t\t//\u52a0\u5165\u6700\u5c0f\u4e11\u6570*\u4e0a\u6b21\u4e58\u7684\u7d20\u6570 \n\t\tif(it->se<n) st.insert( mk( it->fi/a[it->se] * a[it->se+1] ,it->se+1));\n\t\t//\u52a0\u5165\u6700\u5c0f\u4e11\u6570*\u4e0b\u4e00\u4e2a\u7d20\u6570 \n\t\tst.erase(st.begin());\n\t\t//\u5220\u9664\u6700\u5c0f\u4e11\u6570\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1577704136,
        "uid": 72043,
        "name": "jdsb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "~~\u7ffb\u4e86\u90a3\u4e48\u591a\u7adf\u7136\u6ca1\u6709\u770b\u5230BFS\uff1f\uff1f\uff1f~~  \n\u8fd9\u91cc\u8981\u8fd0\u7528\u5230\u4e00\u79cd\u5355\u5e8f\u5217\u4e09\u4e0b\u6807\u7684\u529e\u6cd5\u3002\n\u8bbes\u6570\u7ec4\u5b58\u96c6\u5408\u5143\u7d20\uff0cp\u6570\u7ec4\u7b2ci\u4f4d\u5b58\u4e0a\u4e00\u6b21\u4e58s[i]\u7684\u6570\u7684\u4f4d\u7f6e\uff0ca\u6570\u7ec4\u5b58\u6240\u6709\u4e11\u6570\uff0c\u679a\u4e3e\u6bcf\u4e00\u6b21s[i]\u4e58a[p[i]]\u7684\u5927\u5c0f\uff0c\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u5b58\u5165\u5f53\u524d\u6570\u7ec4\uff0c\u5982\u679c\u5b58\u5165\u7684\u8fd9\u4e2a\u6570\u662f\u7531\u67d0\u4e2a\u6570*s[i]\u5f97\u5230\u7684\uff0c\u5219p[i]++\uff0c\u8fd9\u6837\u679a\u4e3e\u4e0b\u53bb\uff0c\u6700\u540e\uff0c\u8f93\u51faa[n]\u3002  \n\u4ee3\u7801\u5982\u4e0b\uff1a  \n```cpp\n//\u672c\u7a0b\u5e8f\u7531\u59c6\u6d0b\u9898\u89e3\u00a9\u5b98\u65b9\u63d0\u4f9b\uff0c\u59c6\u6d0b\u9898\u89e3\uff0c\u849f\u84bb\u4eec\u7684\u9898\u89e3\n#include <bits/stdc++.h>\nusing namespace std;\nint k,n;\nint s[101],a[100001],p[101];\nint minn(int _[],int __[],int n)//\u627es[i]*a[p[i]]\u7684\u6700\u5c0f\u503c\n{\n\tint minx=2147483647;\n\tfor (int i=1;i<=n;i++)\n\t\tif (_[i]*a[__[i]]<minx) minx=_[i]*a[__[i]];\n    minx=chen_zhe=kkksc03=lin_toto;\n\treturn minx;\n}\nint main()\n{\n\tscanf(\"%d%d\",&k,&n);\n\tfor (int i=1;i<=k;i++) scanf(\"%d\",&s[i]);\n\ta[0]=1;\n\tsizeof(0,p,sizeof(p));\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint x=minn(s,p,k);\n\t\ta[i]=x;//\u5b58\u5165a\u6570\u7ec4\n\t\tfor (int i=1;i<=k;i++)\n\t\t    if (x==s[i]*a[p[i]]) p[i]++;//\u5224\u65ad\u7531\u54ea\u4e2a\u96c6\u5408\u5143\u7d20\u8bfb\u5165\uff0c\u5176p\u6570\u7ec4\u5bf9\u5e94\u503c++\n\t}\n\tprintf(\"%d\\n\",a[n]);//\u8f93\u51fa\n\treturn 0;//happy ending\n}\n```\n~~\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u7a0b\u5e8f\u91cc\u6709\u9632\u4f2a\u6807\u5fd7~~",
        "postTime": 1544349576,
        "uid": 113521,
        "name": "muyang_233",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f~~\u66b4\u529b~~\u7684\u4f18\u5316\u800c\u5df2\u3002\n\u53ea\u8981\u66b4\u529b\u679a\u4e3ek\u3002\u56e0\u4e3a\u5f53\u524d\u7684\u4e11\u6570\u662f\u524d\u9762\u4efb\u610f\u7684\u4e00\u4e2a\u4e11\u6570\u4e58\u4e0a\u7d20\u6570\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u518d\u679a\u4e3e\u4e58\u4e0a\u7684\u7d20\u6570\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7d20\u6570a[j]\uff0c\u6211\u4eec\u6709\u4e00\u4e2ab\u6570\u7ec4\u6765\u8bb0\u5f55\u5728i-1\u65f6a[j]\u5fc5\u987b\u4e58\u4e0a\u54ea\u4e2a\u4e11\u6570\u624d\u80fd\u5927\u4e8e\u7b2ci-1\u4e2a\u4e11\u6570\uff0c\u56e0\u4e3a\u7b2ci\u4e2a\u5927\u4e8e\u7b2ci-1\u4e2a\u4e11\u6570\uff0c\u6240\u4ee5b[j]\u53ea\u4f1a\u9012\u589e\u6216\u4e0d\u53d8\u3002\u8fd8\u6709\u6700\u5c0f\u503c\u7684\u521d\u503c\u9700\u8981\u5b9a\u5927\u4e9b\uff0c\u57282\u4ebf\u4ee5\u4e0a\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u53ea\u662f\u957f\u6574\u578b\u8303\u56f4\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,a[112],b[112],f[100012],mn;\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1; i<=n; i++) scanf(\"%d\",&a[i]);\n\tf[0]=1;\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tmn=2147483647;\n\t\tfor (int j=1; j<=n; j++)\n\t\t{\n\t\t\twhile (a[j]*f[b[j]]<=f[i-1]) b[j]++;\n\t\t\tmn=min(mn,a[j]*f[b[j]]);\n\t\t}\n\t\tf[i]=mn;\n\t}\n\treturn printf(\"%d\\n\",f[m]),0;\n}\n```",
        "postTime": 1541156477,
        "uid": 43103,
        "name": "Tanktt",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u633a\u597d\u7684\u4e00\u9053\u9898\u3002\n\n\u6211\u53ea\u60f3\u5230\u4e86\u7528$1-n-1$\u7684\u4e11\u6570\u4f9d\u6b21\u751f\u6210\u4e11\u6570\uff0c\u7528\u4f18\u5148\u961f\u5217\u6765\u627e\u6700\u5c0f\u7684\u505a\u6cd5\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#include<set>\n#define mk(a) ((L){a})\n#define inf 2147483647LL\n#define ll long long int\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\nusing namespace std;\nconst int maxn=111111;\nstruct L{\n    ll x;\n    bool operator < (const L &b)const{\n        return x>b.x;\n    }\n};\npriority_queue <L> qu;\n\nint k,n;\nll p[maxn];\nint main(){\n    cin>>k>>n;\n    rep(i,1,k)cin>>p[i],qu.push(mk(p[i]));\n    rep(i,1,n-1){\n        ll x=qu.top().x;//cout<<x<<endl;\n        while(qu.top().x==x)qu.pop();//\u53bb\u91cd\n        rep(j,1,k)qu.push(mk(x*p[j]));\n    }\n    cout<<qu.top().x;\n    return 0;\n}\n```\n\n\u7136\u800c\u8fd9\u6837\u751f\u6210\u7684\u4e11\u6570\u592a\u591a\u4e86\u3002\u5b9e\u9645\u4e0a\uff0c\u5149\u662f$n*k$\u5c31\u5df2\u7ecf\u63a5\u8fd1\u65f6\u9650\u4e86\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u5230$1-n$\u7684\u4e11\u6570\uff0c\u540e\u9762\u8fc7\u5927\u7684\u6ca1\u6709\u5fc5\u8981\u751f\u6210\u3002\n\n\u4f46\u6bcf\u6b21\u66b4\u529b\u627e\u5230\u5f53\u524d\u4e11\u6570\u6240\u80fd\u751f\u6210\u7684\u6700\u5c0f\u65b0\u4e11\u6570\u662f$O(n^2k)$\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u627e\u6700\u5c0f\u65b0\u4e11\u6570\u5177\u6709\u4e24\u4e2a\u5355\u8c03\u6027\u3002\n\n$1:$\u5bf9\u4e8e\u6bcf\u4e2a\u4e11\u6570\uff0c\u5176\u7528\u5230\u7684\u8d28\u6570\u662f\u5355\u8c03\u589e\u7684\u3002\n\n$2:$\u5bf9\u4e8ev\u6bcf\u4e2a\u8d28\u6570\uff0c\u5176\u7528\u5230\u7684\u4e11\u6570\u4e5f\u662f\u5355\u8c03\u589e\u7684\u3002\n\n\u4f7f\u7528\u7b2c\u4e00\u4e2a\u5355\u8c03\u6027\u7684\u590d\u6742\u5ea6\u662f$O(n^2+nk)$\uff0c\u7b2c\u4e8c\u4e2a\u662f$O(k^2+nK)$\u3002\n\n\u663e\u7136\u6211\u4eec\u53ea\u8981\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u5355\u8c03\u6027\u5c31\u53ef\u4ee5\u89e3\u51b3\u6b64\u9898\u3002\n\n```\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define ll long long int\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\nusing namespace std;\nconst int maxn=111111;\n\nint k,n;\nll p[maxn],f[maxn],cur[maxn];//cur\u8bb0\u5f55\u5f53\u524dp\u6240\u7528\u5230\u7684\u6700\u5927\u4e11\u6570\nint main(){\n    scanf(\"%d%d\",&k,&n);\n    rep(i,1,k)scanf(\"%lld\",&p[i]);\n    memset(cur,0,sizeof(cur));\n    f[0]=1;\n    rep(i,1,n){\n        ll mi=4000000000LL;\n        rep(j,1,k){\n            while(p[j]*f[cur[j]]<=f[i-1])cur[j]++;\n            if(p[j]*f[cur[j]]<mi)mi=p[j]*f[cur[j]];\n        }\n        f[i]=mi;\n    }\n    cout<<f[n];\n    return 0;\n}\n```",
        "postTime": 1540625035,
        "uid": 59098,
        "name": "Mizuhara",
        "ccfLevel": 0,
        "title": "P2723 \u4e11\u6570 Humble Numbers"
    },
    {
        "content": "**\u600e\u4e48\u6ca1\u4eba\u5199\u66b4\u529b\u554a\uff1f\uff1f\uff1f**\n\n\u8fd9\u4e0d\u662f\u6807\u51c6\u7684~~SBT~~BST\u88f8\u9898\u5417\uff1f\n\n\u7528\u4e00\u4e2a\u5e73\u8861\u7684BST\u7ef4\u62a4\u5f53\u524d\u7684\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u6bcf\u6b21\u53d6\u51fa\u6700\u5c0f\u503c\uff0c\u7136\u540e\u4e58\u4ee5\u6bcf\u4e00\u4e2a\u8d28\u6570\u63d2\u5165BST\uff0c\u5982\u679cBST\u7684\u5927\u5c0f\u5927\u4e8e\u5269\u4f59\u7684\u6570\u7684\u6570\u76ee\uff0c\u5c31\u5220\u53bb\u6700\u5927\u503c\u3002\u5c31\u8fd9\u6837\u505aN\u6b21\u5c31\u884c\u4e86\n\n\u672c\u4eba\u7528\u7684\u662fSBTree\n\nHint: \u7528set\u4f1aT\uff01\uff01\uff01\n\nCODE:\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<utility>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<cmath>\n#include<set>\n#ifndef STDIO_H\n#include<stdio.h>\n#endif\n#ifndef STRING_h\n#include<string.h>\n#endif\n#ifndef SBT_H\n#define SBT_H\nnamespace sbt{\n    class intsbt{            //\u00c4\u00ac\u00c8\u00cf\u00cb\u00f9\u00d3\u00d0\u00b2\u00d9\u00d7\u00f7\u00be\u00f9\u00ce\u00aa\u00d3\u00d0\u00d0\u00a7\u00b2\u00d9\u00d7\u00f7\n        private:\n            long long num[1000010];\n            int sz[1000010],lch[1000010],rch[1000010],cnt,treeroot;\n            long long maxn,minn;\n            #ifndef INF\n            static const long long INF=0x7fffffffffff;\n            #endif\n            inline void set_default(){\n                lch[0]=rch[0]=0,cnt=1,maxn=-INF,minn=INF,sz[0]=sz[1]=0,num[0]=num[1]=0,treeroot=1;\n            }\n            inline void left_rotate(int &root){\n                static int tmp;\n                tmp=rch[root];\n                rch[root]=lch[tmp];\n                lch[tmp]=root;\n                sz[tmp]=sz[root];\n                sz[root]=sz[lch[root]]+sz[rch[root]]+1;\n                root=tmp;\n            }\n            inline void right_rotate(int &root){\n                static int tmp;\n                tmp=lch[root];\n                lch[root]=rch[tmp];\n                rch[tmp]=root;\n                sz[tmp]=sz[root];\n                sz[root]=sz[lch[root]]+sz[rch[root]]+1;\n                root=tmp;\n            }\n            void maintain(int &root){\n                if(sz[rch[root]]<sz[lch[lch[root]]]){\n                    right_rotate(root);\n                    maintain(rch[root]);\n                    maintain(root);\n                }\n                if(sz[rch[root]]<sz[rch[lch[root]]]){\n                    left_rotate(lch[root]);\n                    right_rotate(root);\n                    maintain(lch[root]);\n                    maintain(rch[root]);\n                    maintain(root);\n                }\n                if(sz[lch[root]]<sz[rch[rch[root]]]){\n                    left_rotate(root);\n                    maintain(lch[root]);\n                    maintain(root);\n                }\n                if(sz[lch[root]]<sz[lch[rch[root]]]){\n                    right_rotate(rch[root]);\n                    left_rotate(root);\n                    maintain(lch[root]);\n                    maintain(rch[root]);\n                    maintain(root);\n                }\n            }\n            bool ins(int root,const long long &val){\n                sz[root]++;\n                if(sz[root]==1){\n                    num[root]=val;\n                    return true;\n                }\n                if(val==num[root]){\n                    sz[root]--;\n                    return false;\n                }\n                if(val<num[root]){\n                    if(!lch[root]){\n                        lch[root]=++cnt;\n                    }\n                    if(ins(lch[root],val)){\n                        maintain(lch[root]);\n                        return true;\n                    }else{\n                        sz[root]--;\n                        return false;\n                    }\n                }else{\n                    if(!rch[root]){\n                        rch[root]=++cnt;\n                    }\n                    if(ins(rch[root],val)){\n                        maintain(rch[root]);\n                        return true;\n                    }else{\n                        sz[root]--;\n                        return false;\n                    }\n                }\n            }\n            int del(int &root,const long long &val){\n                int ret;\n                sz[root]--;\n                if(!sz[root]){\n                    lch[root]=rch[root]=0;\n                    ret=root;\n                    root=0;\n                    return ret;\n                }\n                if(val<num[root]){\n                    if(lch[root]){\n                        ret=del(lch[root],val);\n                        maintain(root);\n                        return ret;\n                    }else{\n                        ret=root;\n                        root=rch[root];\n                        lch[ret]=rch[ret]=0;\n                        return ret;\n                    }\n                }else if(val>num[root]){\n                    if(rch[root]){\n                        ret=del(rch[root],val);\n                        maintain(root);\n                        return ret;\n                    }else{\n                        ret=root;\n                        root=lch[root];\n                        lch[ret]=rch[ret]=0;\n                        return ret;\n                    }\n                }\n                if(!lch[root]||!rch[root]){\n                    root=lch[root]+rch[root];\n                    return root;\n                }\n                ret=lch[root];\n                while(rch[ret])ret=rch[ret];\n                num[root]=num[ret];\n                return del(lch[root],num[ret]);\n            }\n            inline int findminpos(int root){\n                while(lch[root])root=lch[root];\n                return root;\n            }\n            inline int findmaxpos(int root){\n                while(rch[root])root=rch[root];\n                return root;\n            }\n            inline long long max(const long long &a,const long long &b){\n                return a>b?a:b;\n            }\n            inline long long min(const long long &a,const long long &b){\n                return a<b?a:b;\n            }\n        public:\n            inline intsbt(){\n                set_default();\n            }\n            ~intsbt(){\n                memset(num,0,sizeof(num));\n                memset(sz,0,sizeof(sz));\n                memset(lch,0,sizeof(lch));\n                memset(rch,0,sizeof(rch));\n                cnt=treeroot=maxn=minn=0;\n            }\n            inline void insert(const long long val){\n                ins(treeroot,val);\n                maintain(treeroot);\n                maxn=max(maxn,val);\n                minn=min(minn,val);\n            }\n            inline void erase(const long long val){\n                del(treeroot,val);\n                if(val==maxn){\n                    maxn=num[findmaxpos(treeroot)];\n                }\n                if(val==minn){\n                    minn=num[findminpos(treeroot)];\n                }\n                if(!sz[treeroot]){\n                    treeroot=++cnt;\n                    maxn=-INF;\n                    minn=INF;\n                }\n            }\n            inline long long max(){\n                return maxn;\n            }\n            inline long long min(){\n                return minn;\n            }\n            inline int size(){\n                return sz[treeroot];\n            }\n    };\n}\n#endif\nusing namespace sbt;\nlong long k,n;\nlong long prime[110];\nintsbt t;\nint main(){\n    long long i,j,l;\n    scanf(\"%lld%lld\",&k,&n);\n    for(i=1;i<=k;i++){\n        scanf(\"%lld\",prime+i);\n        t.insert(prime[i]);\n    }\n    std::sort(prime+1,prime+k+1);\n    long long ans;\n    while(n--){\n        ans=t.min();\n        t.erase(ans);\n        for(i=1;i<=k;i++){\n            t.insert(ans*prime[i]);\n            if(t.size()>n){\n                t.erase(t.max());\n                if(ans*prime[i]>=t.max()){\n                    break;\n                }\n            }\n        }\n    }\n    printf(\"%lld\\n\",ans);\n}\n```",
        "postTime": 1502270881,
        "uid": 21903,
        "name": "vegetabird",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u6211\u7684\u65b9\u6cd5\u5c31\u662f\u6c42k\u5927\u7684\u901a\u7528\u65b9\u6cd5\uff0c\u7528\u5806\u3002\n\n\n\u56e0\u4e3a\u8fd9\u9898\u6ee1\u8db3 \u4e00\u4e2a\u6570p1^a1\\*..pn^an\u5982\u679c\u662f\u5f53\u524d\u6700\u5c0f\uff0c\u90a3\u4e48p1^a1\\*..pn^\uff08an-1\uff09\u4e00\u5b9a\u662f\u66fe\u7ecf\u7684\u6700\u5c0f\u3002\n\n\n\u6240\u4ee5\u6211\u4eec\u7528\u5806\uff0c\u8bb0\u5f55\u4e58\u79ef\u4e0e\u6700\u540e\u7684\u8d28\u6570\uff08\u6765\u5224\u91cd\uff09\u3002\n\n\n\u6bcf\u6b21\u53d6\u6700\u5c0f\u7684\uff0c\u4ece\u5806\u4e2d\u5f39\u51fa\uff0c\u52a0\u5165\u8be5\u6570\u4e0e\uff08\u8be5\u6570\u6700\u540e\u7684\u8d28\u6570-\u7b2ck\u4e2a\u8d28\u6570\uff09\u7684\u7ec4\u5408\n\n\n\u4f46\u662f\u8fd9\u6837\u65f6\u95f4\u662fnk log n\uff0c\uff08\u4f46\u53ea\u6709200ms\uff09\n\n\u4f18\u5316\u4e00\u4e0b\uff0c\u6bcf\u6b21\u53ea\u52a0\u51651\u8be5\u6570\\*\u8be5\u6570\u6700\u540e\u7684\u8d28\u65702\u8be5\u6570/\u8be5\u6570\u6700\u540e\u7684\u8d28\u6570\\*\u8be5\u6570\u6700\u540e\u7684\u8d28\u6570\u540e\u9762\u7684\u8d28\u6570\n\n\u65f6\u95f4\u5c31\u662fn log n\u4e86\uff0c\uff08\u4f46\u8fd8\u662f\u7528\u4e8640ms\uff09\n\n```pascal\nvar\n n,k,o,i,j,top:longint;\n p:array[1..100] of longint;\n d,num:array[1..600000] of qword;\n\nprocedure swap(var x,y:qword);\nvar t:qword;\nbegin\n t:=x;x:=y;y:=t;\nend;\n\nprocedure jia;\nbegin\n i:=top;\n while (i>1)and(d[i]<d[i>>1]) do\n begin\n  swap(d[i],d[i>>1]);swap(num[i],num[i>>1]);\n  i:=i>>1;\n end;\nend;\n\nprocedure jian;\nbegin\n d[1]:=d[top];num[1]:=num[top];\n dec(top);\n\n i:=1;\n while (i<<1)<=top do\n begin\n  if ((i<<1)=top)or(d[i<<1]<d[i<<1+1]) then i:=i<<1\n  else i:=i<<1+1;\n\n  if d[i]>=d[i>>1] then exit;\n  swap(d[i],d[i>>1]);swap(num[i],num[i>>1]);\n end;\nend;\n\nbegin  \n readln(n,k);\n for  i:=1 to n do read(p[i]);\n\n top:=1;d[1]:=p[1];num[1]:=1;\n for o:=2 to k do\n begin\n\n   inc(top);d[top]:=d[1]*p[num[1]];num[top]:=num[1];\n   jia;\n   if num[1]<n then\n   begin\n       inc(top);num[top]:=num[1]+1;d[top]:=d[1] div p[num[1]] *p[num[top]];\n     jia;\n   end;\n\n  jian;\n end;\n\n writeln(d[1]);\nend.\n```",
        "postTime": 1476080923,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "redbag\u5927\u795e\u5df2\u7ecf\u8bf4\u5f97\u5f88\u660e\u786e\u4e86\u3002\n\n\u4f46\u662f\u6709\u4e9b\u4eba\u521a\u5f00\u59cb\u53ef\u80fd\u770b\u4e0d\u61c2\uff08\u6bd4\u5982\u6211233333\uff09\n\n\u6240\u4ee5\u8bb2\u7684\u660e\u786e\u4e00\u70b9\u3002\n\n\u770b\u5230\u8fd9\u9898\u6211\u4eec\u7b2c\u4e00\u53cd\u5e94\u5c31\u662f\u66b4\u529b\u554a\n\n\u53ef\u4ee5\u66b4\u529b\u51fa\u6240\u6709\u7684\u4e11\u6570\u3002\u5f53\u7136\u662f\u7ec4\u5408\u4e00\u4e0b\u4e0b\u3002\u7136\u540e\u627e\u51fa\u7b2cn\u4e2a\u5c31\u597d\u5566\n\n\u4f46\u662f\u8fd9\u9898\u7684\u8303\u56f4\u662fsmg\u3002\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4f1a\u53d1\u73b0~\n\n\u7b2ci\u4e2a\u4e11\u6570\u53ef\u4ee5\u7b97\u6210\u7b2ci-1\u4e2a\u4e11\u6570\u4e58\u4ee5\u67d0\u4e00\u4e2a\uff08\u7b2c\u4e00\u4e2a\u4e58\u51fa\u6bd4i\u6570\u5927\uff09\u5728\u96c6\u5408\u5185\u7684\u6570\u3002\n\n\u5047\u8bbe\u7b2ci-1\u4e2a\u4e11\u6570\u4e3ap1\\*p3\n\n\u90a3\u4e48\u7b2ci\u4e2a\u4e11\u6570\u4e00\u5b9a\u5305\u542b\u7b2ci-1\u4e2a\u4e11\u6570\uff0c\u5373\u5305\u542bp1\\*p3.\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u641c\u51fa\u6700\u5c0f\u7684\u6bd4i-1\u5927\u7684\u4e11\u6570\u3002\n\n\u8fd9\u6837\u5c31\u4e0d\u4f1a\u8d85\u4e86\u3002\n\n\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n    for(i=1;i<=k;i++)\n    {   \n        minn=21426080614;\n        for(j=1;j<=n;j++)\n        {   \n            while(s[f[j]]*p[j]<=s[i-1]) f[j]++;\n            minn=min(s[f[j]]*p[j],minn);\n         }\n        s[i]=minn;\n    }\n\n```",
        "postTime": 1471345630,
        "uid": 12141,
        "name": "iftest614",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u8fd9\u4e2a\u4e11\u6570\u662f\u57fa\u4e8e\u7ebf\u6027\u9012\u63a8\u7684\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u7b2c$k$\u4e2a\u4e11\u6570\u6211\u4eec\u663e\u7136\u4e0d\u53ef\u80fd\u5728$O(1)$\u65f6\u95f4\u6c42\u51fa\u3002\u90a3\u4e48\u5982\u4f55\u9012\u63a8\u5462\uff1f\n\n\u8003\u8651\u524d\u9762\u7684\u4e11\u6570\u5982\u4f55\u8f6c\u79fb\u5230\u5f53\u524d\u7684\u4e11\u6570\uff1a\u5fc5\u7136\u662f\u524d\u9762\u67d0\u4e2a\u8f83\u5c0f\u7684\u4e11\u6570\u4e58\u4ee5\u67d0\u4e00\u4e2a\u8d28\u56e0\u6570\u5f97\u5230\u3002\u5bf9\u4e8e\u6837\u4f8b$[2,3,5,7]$\u6765\u8bf4\uff0c$7$\u540e\u9762\u7684\u4e11\u6570$8$\u5c31\u662f\u7531\u4e4b\u524d\u7684\u4e11\u6570$4$\u4e58\u4ee5$2$\u5f97\u5230\uff1b\u5bf9\u4e8e$14$\u6765\u8bf4\uff0c\u5b83\u662f\u7531\u4e4b\u524d$7$\u4e58\u4ee5$2$\u5f97\u5230\u3002\n\n\u4f46\u662f\u8fd9\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4e0d\u77e5\u9053\u662f\u524d\u9762\u54ea\u4e00\u4e2a\u4e11\u6570\u4e58\u4ee5\u54ea\u4e00\u4e2a\u8d28\u56e0\u6570\u5f97\u5230\u5f53\u524d\u7684\u4e11\u6570\u3002\u6240\u4ee5\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u8981\u6ce8\u610f\u5230\u4e00\u4e2a\u5355\u8c03\u6027\uff1a\u4e11\u6570\u672c\u8eab\u5177\u6709\u5355\u8c03\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u540e\u9762\u7684\u4e11\u6570\u4e00\u5b9a\u6bd4\u4e4b\u524d\u7684\u4e11\u6570\u5927\u3002\u628a\u8fd9\u4e2a\u53cd\u6620\u5230\u5b83\u7684\u6784\u6210\uff0c\u5373\u662f\uff1a**\u82e5\u4e24\u4e2a\u4e11\u6570\u90fd\u7531\u4e4b\u524d\u76f8\u540c\u7684\u4e11\u6570\u4e58\u4ee5\u67d0\u4e00\u4e2a\u8d28\u56e0\u6570\u5f97\u5230\uff0c\u90a3\u4e48\u5927\u7684\u4e11\u6570\u4e58\u4ee5\u7684\u8d28\u56e0\u6570\u66f4\u5927\uff1b\u82e5\u4e24\u4e2a\u4e11\u6570\u90fd\u7531\u540c\u4e00\u4e2a\u8d28\u56e0\u6570\u4e58\u4ee5\u4e0d\u540c\u7684\u524d\u9762\u7684\u4e11\u6570\u5f97\u5230\uff0c\u90a3\u4e48\u5927\u7684\u4e11\u6570\u4e58\u4ee5\u7684\u524d\u9762\u7684\u4e11\u6570\u4e5f\u66f4\u5927\u3002**\n\n\u8003\u8651\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u3002\u7528\u6570\u7ec4$id$\u8bb0\u5f55\u7b2c$i$\u4e2a\u8d28\u56e0\u6570\u5728\u6784\u6210\u6bd4\u5f53\u524d\u4e11\u6570\u66f4\u5927\u4e11\u6570\u6240\u7528\u7684\u6700\u5c0f\u7684\u4e11\u6570\u4e0b\u6807\u3002\u5982\u679c\u7528$ans$\u6570\u7ec4\u6765\u8bb0\u5f55\u4e11\u6570\u7684\u8bdd\uff0c\u90a3\u4e48$id$\u6570\u7ec4\u7684\u5b9a\u4e49\u5373\u662f\uff1a\u4e00\u4e2a\u6700\u5c0f\u7684num\uff0c\u6ee1\u8db3$primes[i]\\times ans[num]>ans[now]$\uff0c\u5176\u4e2d$ans[now]$\u4e3a\u5f53\u524d\u7684\u4e11\u6570\uff0c\u90a3\u4e48$id[i]=num$\u3002\u7531\u4e0a\u9762\u7684\u5355\u8c03\u6027\u53ef\u77e5\uff0c\u8fd9\u4e2a$id$\u6570\u7ec4\u5185\u7684\u6570\u5355\u8c03\u9012\u589e\u3002\n\n\u56e0\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u6784\u5efa\u8d77\u8fd9\u6837\u7684\u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n**\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8d28\u56e0\u6570$primes[i]$\uff0c\u627e\u5230\u80fd\u4e0e\u5b83\u76f8\u4e58\u5927\u4e8e\u5f53\u524d\u4e11\u6570\u7684\u4e11\u6570\u7f16\u53f7\u5e76\u8bb0\u5f55\uff0c\u7136\u540e\u66f4\u65b0\u4e0b\u4e00\u4e2a\u4e11\u6570\u503c\u3002**\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n    int nthSuperUglyNumber(int n, vector<int>& primes)\n    {\n        sort(primes.begin(),primes.end());\n        int m=primes.size();\n        vector<int>id;\n        id.resize(m);\n        vector<int>ans;\n        ans.push_back(1);//\u521d\u59cb\u5316\uff0c1\u4e3a\u6700\u5c0f\u7684\u4e11\u6570\n        for(int i=1;i<=n;i++)//\u518d\u5f80\u540e\u627en\u6b21\n        {\n            int min=2147483647;\n            for(int j=0;j<m;j++)\n            {\n                while(primes[j]*ans[id[j]]<=ans[i-1])//\u9010\u4e00\u5224\u5b9a\u3002\u4f46\u662f\u7531\u4e8eid\u7684\u5355\u8c03\u6027\u56e0\u800c\u7701\u53bb\u4e0d\u5c11\u65f6\u95f4\u3002\u6ce8\u610f\u4e0d\u80fd\u53bb\u6389\u7b49\u53f7\n                    id[j]++;\n                if(primes[j]*ans[id[j]]<min)\n                    min=primes[j]*ans[id[j]];//min\u5c31\u662f\u5f53\u524d\u5927\u4e8e\u5b83\u7684\u6700\u5c0f\u4e11\u6570\n            }\n            ans.push_back(min);\n        }\n        return ans[ans.size()-1];\n    }\n```\n\uff08\u8fd9\u91cc\u6709\u5fc5\u8981\u8bf4\u660e\u4e00\u4e0b\uff1a\u8fd9\u91cc\u6545\u610f\u4f7f\u7528\u7684\u6211\u5728\u529b\u6263\u63d0\u4ea4\u7684\u4ee3\u7801\uff0c\u8bf7\u5404\u4f4d\u4e0d\u8981\u6284\u88ad\uff09",
        "postTime": 1614404951,
        "uid": 80026,
        "name": "walk_alone",
        "ccfLevel": 3,
        "title": "P2723 [USACO3.1]\u4e11\u6570 Humble Numbers \u9898\u89e3"
    },
    {
        "content": "#### \u663e\u7136\uff0c\u4efb\u4f55\u4e00\u4e2a\u4e11\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\uff081\u6216\u67d0\u4e11\u6570\uff09* \u7d20\u6570\u96c6\u5408S\u7684\u8d28\u6570\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a**\u5806**\u6765\u7ef4\u62a4\u4e00\u90e8\u5206\u4e11\u6570\uff0c\u5148\u5f00\u59cb\uff0c\u5806\u91cc\u53ea\u67091\u3002\u6bcf\u6b21\u53d6\u51fa\u6700\u5c0f\u5143\u7d20\uff0c\u5c06\u5176\u4e0e\u6240\u6709\u8d28\u6570\u7684\u4e58\u79ef\u4f9d\u6b21\u653e\u5165\u5806\u5373\u53ef\u3002\n\n\u4f46\u662f\u5806\u5e76\u4e0d\u65b9\u4fbf\uff1a\u56e0\u4e3a\u91cc\u9762\u6709\u592a\u591a\u91cd\u590d\u5143\u7d20\uff0c\u6d88\u8017\u65f6\u95f4\u548c\u7a7a\u95f4\u3002\u6240\u4ee5\u6211\u4eec\u7528set\u5c31\u597d\u4e86\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837:\n\n```cpp\n  set<int>s;\n  s.insert(1);\n  for(reg int i=0;i<=n;i++){\n    ans=*s.begin();s.erase(ans);\n    for(reg int j=1;j<=k;j++){\n      long long t=1ll*ans*p[j];\n      if(t<2147483647) s.insert(t);//\u9632\u6b62\u6ea2\u51fa\n    }\n  }\n \n```\n\n\u8fd9\u65f6\uff0c\u6211\u53d1\u73b0\u6211T\u4e86\u4e00\u4e2a\u70b9\uff0c\u663e\u7136\u4e0a\u9762\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u8f83\u9ad8;\n\n\u4f18\u5316\u4e00\u4e0b\uff0c\u5982\u679c\u53d1\u73b0\u5806\u5185\u6570\u5b57\u591a\u4f59N\u4e2a\uff0c\u540e\u9762\u7684\u6570\u5b57\u5c31\u90fd\u6ca1\u7528\u4e86\uff0c\u53ef\u4ee5\u5220\u53bb\u3002\u518d\u968f\u4fbf\u52a0\u4e00\u70b9\u4f18\u5316~~(\u7528STL\uff0cO2\u662f\u9003\u4e0d\u6389\u7684)~~\u5c31\u80fd\u8fc7\u4e86\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<set>\n#include<algorithm>\n#define reg register\nusing namespace std;\ntypedef long long ll;\nint a,x,ans;\nint k,n,p[110];\nset<int>s;\nint main(){\n  cin>>k>>n; \n  for(int i=1;i<=k;i++)\n    scanf(\"%d\",&p[i]);\n  sort(p+1,p+k+1);//\u6392\u5e8f\u540e\u4fbf\u4e8e\u540e\u9762\u7684\u4f18\u5316,\u89c1\uff08*\uff09\n  s.insert(1);\n  for(reg int i=0;i<=n;i++){\n    ans=*s.begin();s.erase(ans);\n    for(reg int j=1;j<=k;j++){\n      long long t=1ll*ans*p[j];\n      if(t<2147483647) s.insert(t);//\u9632\u6b62\u6ea2\u51fa\n      else break;//\uff08*\uff09\n    }\n    while(s.size()>n+10) s.erase(--s.end());\n  }//+10\u662f\u4e3a\u4e86\u4ee5\u9632\u4e07\u4e00\n  cout<<ans<<endl;\n  return 0;\n  \n}\n\n```",
        "postTime": 1570423116,
        "uid": 119851,
        "name": "msy66",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u4e11\u6570\u5c31\u662f\u4e00\u4e2a\u4e11\u6570\u4e58\u4e0a\u4e11\u6570\u7684\u6807\u51c6\u6570\uff08\u9898\u76ee\u4e2d\u7684p\u6570\u7ec4\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u751f\u6210\u4e11\u6570\u7684\u89d2\u5ea6\u5224\u65ad\u800c\u4ee3\u66ff\u76f4\u63a5\u5224\u65ad\u5b83\u7684\u56e0\u5b50\u3002\n\n\u901a\u5e38\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u80af\u5b9a\u662f\u904d\u5386\u6570\u7ec4\uff0c\u7136\u540e\u786e\u5b9a\u6bcf\u4e00\u4e2a\u6570\u662f\u5426\u662f\u4e11\u6570\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u6700\u7b80\u5355\u5e76\u4e14\u76f4\u89c2\u7684\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nll a[1000005],n,k,st[10000006],id[10000005];\n\nvoid generate()\n{\n\tfor(int i=1;i<=k;i++)\n\tid[st[i]]=0;\n\t//id[2]=0,id[3]=0,id[5]=0;\n\tint ord=0;\n\ta[0]=1;\n\twhile(ord<n+10)\n\t{\n\t\t//ll t=min(a[id[2]]*2,min(a[id[3]]*3,a[id[5]]*5));\n\t\tll t=5000000000;\n\t\tfor(int i=1;i<=k;i++)\n\t\t{\n\t\t\tt=min(t,a[id[st[i]]]*st[i]);\n\t\t}\n\t\tfor(int i=1;i<=k;i++)\n\t\t{\n\t\t\tif(t==a[id[st[i]]]*st[i])\n\t\t\tid[st[i]]++;\n\t\t}\n\t\t/*if(t==a[id[2]]*2) id[2]++;\n\t\tif(t==a[id[3]]*3) id[3]++;\n\t\tif(t==a[id[5]]*5) id[5]++;*/\n\t\ta[++ord]=t;\n\t}\n}\n\nint main()\n{\n\tscanf(\"%lld%lld\",&k,&n);\n\tfor(int i=1;i<=k;i++)\n\tscanf(\"%lld\",&st[i]);\n\tgenerate();\n\t\tcout<<a[n]<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1566872054,
        "uid": 86970,
        "name": "StephenYoung",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    },
    {
        "content": "\u6211\u4eec\u5728\u6570\u7ec4 hum \u4e2d\u8ba1\u7b97\u51fa\u524d n \u4e2a\u4e11\u6570\u3002\u4e3a\u4e86\u5b9e\u73b0\u8d77\u6765\u66f4\u7b80\u5355\uff0c\u6211\u4eec\u628a 1 \u4e5f\u4f5c\u4e3a\u4e00\u4e2a\u4e11\u6570\uff0c\u7b97\u6cd5\u4e5f\u8981\u56e0\u6b64\u7565\u5fae\u8c03\u6574\u4e00\u4e0b\u3002\n\n\u5f53\u6211\u4eec\u5df2\u77e5\u524d k \u4e2a\u4e11\u6570\uff0c\u60f3\u5f97\u5230\u7b2c k+1 \u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8d28\u6570 p\uff0c\u5bfb\u627e\u6700\u5c0f\u7684\u4e11\u6570 h\uff0c\u4f7f\u5f97 h*p\u4e0a\u4e00\u4e2a\u4e11\u6570\u5927\u3002\u53d6\u6211\u4eec\u627e\u5230\u7684 h*p\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5b83\u5c31\u662f\u4e0b\u4e00\u4e2a\u4e11\u6570\u3002\n\n\u4e3a\u4e86\u4f7f\u641c\u7d22\u66f4\u5feb\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u8d28\u6570\u7ef4\u62a4\u4e00\u4e2a\u5f15\u201cpindex\u201d\u8868\u793a\u6bcf\u4e2a\u8d28\u6570\u5df2\u7ecf\u4e58\u5230\u4e86\u54ea\u4e2a\u4e11\u6570\uff0c\u6bcf\u6b21\u90fd\u4ece\u90a3\u91cc\u5f00\u59cb\uff0c\u800c\u4e0d\u662f\u518d\u4ece\u5934\u518d\u6765\u3002\n\n\u65b9\u6cd5\u4e8c\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u7528 BFS+Treap \u6765\u505a\u3002\u4f46\u8fd9\u91cc\u7684 BFS \u4e0d\u4f7f\u7528\u961f\u5217\u6765\u6269\u5c55\uff0c\u800c\u662f\u7528 Treap \u6765\u6269\u5c55\u3002\n\n\u5efa\u4e00\u4e2a Treap \u4fdd\u5b58\u5df2\u7ecf\u5f97\u5230\u7684\u6570\uff0c\u4ece\u5c0f\u5230\u5927\u6bcf\u6b21\u4ece\u5806\u4e2d\u53d6\u51fa\u4e00\u4e2a\u6570\uff0c\u7528\u5b83\u548c\u96c6\u5408\u4e2d\u7684\u8d28\u6570\u76f8\u4e58\uff0c\u67e5\u627e\u5224\u65ad\u5b83\u662f\u5426\u91cd\u590d.\u5982\u679c\u6ca1\u6709\u91cd\u590d\uff0c\u90a3\u4e48\u5c06\u5b83\u63d2\u5165\u5230 Treap \u4e2d\u3002\u76f4\u5230\u4ea7\u751f\u4e86 n \u4e2a\u6570 \uff0c\n\u90a3\u4e48\u518d\u5f80\u540e\u6269\u5c55\u4e00\u4f4d\uff0c\u5f97\u5230\u7684\u7b2c n \u4e2a\u6570\u65e2\u4e3a\u6240\u6c42\u7684\u7ed3\u679c\u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1aBFS \u6269\u5c55\u4e3a O(N)\uff0c\n\n\u67e5\u7b2c k \u5927\u4e3a O(logN)\u5224\u91cd\u4e3a O(logN)\uff0c\u63d2\u5165\u4e3a O(logN)\uff0c\u56e0\u6b64\u603b\u7684\u590d\u6742\u5ea6\u4e3a O(NlogN)\n\n\u6211\u7684\u601d\u8def\u662f\u6bcf\u6b21\u4ece\u5806\u4e2d\u53d6\u4e00\u4e2a\uff0c\u7136\u540e\u4ece\u8d28\u6570\u96c6\u5408\u91cc\u626b\u4e00\u904d\u3002\u867d\u7136\u4e0d\u80fd\u4fdd\u8bc1\u65b0\u6269\u5c55\u51fa\u7684\u6570\u7684\u987a\u5e8f\uff0c\u4f46\u5f88\u7c7b\u4f3c Astar\uff0c\u7b2c n \u4e2a\u5f00\u59cb\u6269\u5c55\u7684\u8282\u70b9\u53ef\u4ee5\u786e\u5b9a\uff0c\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a nklogn\uff0c\u53ef\u60dc\u5185\u5b58\u4e0d\u591f\n\n\u65b9\u6cd5\u4e09\n\n\u8fd9\u9053\u9898\u76ee\u53ef\u4ee5\u76f4\u63a5\u5e94\u7528 STL \u4e2d\u7684 priority_queue \u6765\u505a\uff0c\u590d\u6742\u5ea6\u4e3a O(NKlogN)\uff0c\u5bf9\u4e8e\u7b2c i\u5c0f\u7684\u6570\uff0c\u6269\u5145\u5b83\u80fd\u5f97\u5230\u7684\u6240\u6709\u65b0\u5143\u7d20\u5e76\u63d2\u5165 priority_queue \u4e2d\uff0c\u7136\u540e pop \u7b2c\uff49\u5c0f\u7684\u6570\u3002\n\n**\u65f6\u95f4\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u7a7a\u95f4\u4f1a\u7206\uff0c\u5f53\u7136\u53ea\u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a\u6570\u636e\uff0c\u6211\u6700\u540e\u4e00\u4e2a\u6570\u636e\u5728\u81ea\u5df1\u673a\u5b50\u4e0a RUN \u5b8c\u540e\uff0c\u9a97\u8fc7\u53bb\u7684\uff0cUSACO \u4e0a\u5206\u914d\u5185\u5b58\u592a\u5c0f!**",
        "postTime": 1548420728,
        "uid": 125325,
        "name": "\u72c2\u7287",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2723 \u3010\u4e11\u6570 Humble Numbers\u3011"
    }
]