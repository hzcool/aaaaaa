[
    {
        "content": "# ~~\u771f\u6bd2\u7624~~\n\n### \u8fd9\u4e2a\u9898\u76ee\u8017\u4e86\u6211\u534a\u5929\u3002\u3002\u7ed3\u679c\u662f\u7ebf\u6bb5\u6811\u6253\u9519\u4e86\u3002\u3002\u3002\n\n### \u7565\u5fae\u4fee\u6539\u4e86\u4e00\u4e0b\uff0c\u5e0c\u671b\u80fd\u8fc7\u5ba1$qwq$\n****\n# \u56de\u5f52\u6b63\u9898\uff1a\n\n\u672c\u849f\u84bb\u7528\u7684\u8ddf\u697c\u4e0a$dalao$\u4eec\u4e00\u6837:** \u7ebf\u6bb5\u6811$+dp$**\n\n\u9996\u5148\u5f53\u7136\u662f\u5148\u8003\u8651\u6734\u7d20$dp$\u5566\uff0c\u76f8\u4fe1\u4f60\u65e2\u7136\u90fd\u6765\u505a\u8fd9\u9898\u4e86\uff0c\u6734\u7d20\u7684\u65b9\u7a0b\u81ea\u7136\u4e0d\u7528\u6211\u591a\u8bf4\uff0c\u8bbe$f[i][j]$\u8868\u793a\u5728\u524d$i$\u4e2a\u6751\u5e84\u5185\uff0c\u7b2c$j$\u4e2a\u57fa\u7ad9\u5efa\u5728$i$\u5904\u7684\u6700\u5c0f\u8d39\u7528\uff08\u4e0d\u8003\u8651$i$~$n$\u7684\u8d54\u507f\u8d39\u7528\u7b49\uff09\n\n\u65b9\u7a0b\u4e3a\uff1a\n$$f[i][j]=min(f[k][j-1]+pay[k][i])$$\n\u5176\u4e2d$pay[k][i]$\u8868\u793a\u4ece\u7b2c$k$\u4e2a\u6751\u5e84\u5230\u7b2c$i$\u4e2a\u6751\u5e84\u7684\u8d54\u507f\u8d39\u7528\u4e4b\u548c\n\n\u90a3\u4e48\u6211\u4eec\u89c2\u5bdf\u4e0a\u9762\u8fd9\u4e2a\u65b9\u7a0b\uff0c\u8fd9\u4e2a\u65b9\u7a0b\u662f$O(n^2k)$\u7684,\u53ef\u4ee5\u53d1\u73b0\u7c7b\u4f3c\u4e8e\u80cc\u5305\u95ee\u9898\uff0c\u662f\u53ef\u4ee5\u6eda\u6389\u4e00\u7ef4\uff0c\u56e0\u4e3a\u53d1\u73b0$f$\u6570\u7ec4\u7b2c\u4e8c\u7ef4\u53ea\u8ddf\u4e0a\u6b21\u7684\u503c\u4e5f\u5c31\u662f$j-1$\u6b21\u7684\u503c\u6709\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u76f4\u63a5\u5229\u7528\u4e0a\u4e00\u6b21\u6c42\u51fa\u6765\u7684\u503c\u7ee7\u7eed$dp$\u5c31\u884c\u4e86\uff0c\u4e0d\u9700\u8981\u591a\u5f00\u4e00\u7ef4\uff0c\u6240\u4ee5$dp$\u65b9\u7a0b\u81ea\u7136\u5c31\u5316\u4e3a$$f[i]=min(f[k]+pay[k][i])$$\n\n\u90a3\u4e48\u6211\u4eec\u7ee7\u7eed\u601d\u8003\uff1a\u4e3b\u8981\u7684\u65f6\u95f4\u6d88\u8017\u5728\u4e86\u54ea\u91cc\uff1f\u81ea\u7136\u662f\u600e\u4e48\u5feb\u901f\u8ba1\u7b97$pay[k][i]$\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u601d\u8003\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6751\u5e84\uff0c\u90fd\u6709\u4e00\u4e2a\u8303\u56f4\u5185\u9700\u8981\u5efa\u7acb\u57fa\u7ad9\uff0c\u5426\u5219\u5c31\u8981\u8d54\u507f\uff0c\u90a3\u4e48\u6211\u4eec\u8bbe\u7b2c$i$\u4e2a\u6751\u5e84\u7684\u8303\u56f4\u4e3a$[L,R]$,\u5982\u679c\u6b63\u5728\u8003\u8651$R$\u5904\u5efa\u4e0d\u5efa\u57fa\u7ad9\uff0c\u90a3\u4e48\u6709\u4e0b\u5217\u60c5\u51b5\uff1a\n\n$1$\u3001\u4e0d\u5728$R$\u5904\u8bbe\u7acb\u57fa\u7ad9\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6751\u5e84$i$\u6765\u8bf4\uff0c\u4e0a\u4e00\u4e2a\u57fa\u7ad9\u5728$[1,L-1]$\u8fd9\u4e2a\u533a\u95f4\u7684\u8bdd\uff0c\u5c31\u8981\u8d54\u507f\u6751\u5e84$i$\u4e86\uff0c\u56e0\u4e3a$[L,R]$\u8fd9\u4e2a\u533a\u95f4\u6ca1\u6709\u5efa\u57fa\u7ad9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5feb\u901f\u7684\u5728$[1,L-1]$\u4e2d\u533a\u95f4\u52a0\u6751\u5e84$i$\u7684\u8d54\u507f\u8d39\u7528\u4e86\uff0c\u6211\u4eec\u5c31\u4ee5\u7ebf\u6bb5\u6811\u4e3a\u4f8b\u5566\n\n$2$\u3001\u5728$R$\u5904\u5efa\u7acb\u57fa\u7ad9\uff0c\u90a3\u4e48\u4e5f\u5c31\u76f8\u5f53\u4e8e\u6700\u540e\u4e00\u4e2a\u57fa\u7ad9\u8bbe\u7acb\u5728$[1,R-1]$\u8fd9\u4e2a\u533a\u95f4\u4e2d\uff0c\u627e\u4e00\u4e2a\u8d39\u7528\u6700\u5c0f\u503c\u6765\u8f6c\u79fb\u561b\uff0c\u8fd8\u662f\u7ebf\u6bb5\u6811$qwq$\n\n\u6240\u4ee5\u6211\u4eec\u8981\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4$f+pay$\u7684\u6700\u5c0f\u503c\uff0c\u8981\u6709\u533a\u95f4\u52a0\u6cd5\u548c\u533a\u95f4\u67e5\u8be2\u7684\u64cd\u4f5c\n\n\u90a3\u4e48\u4e3a\u4e86\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u8fd8\u8981\u5f00\u51e0\u4e2a\u6570\u7ec4\u8f85\u52a9\uff08~~\u5982\u679c\u4f60\u662f$dalao$\u5f53\u6211\u6ca1\u8bf4~~\uff09\n\n$st[i]$\u8868\u793a\u7b2c$i$\u4e2a\u6751\u5e84\u5bf9\u5e94\u533a\u95f4\u7684\u5de6\u7aef\u70b9$L$\n\n$ed[i]$\u8868\u793a\u7b2c$i$\u4e2a\u6751\u5e84\u5bf9\u5e94\u533a\u95f4\u7684\u53f3\u7aef\u70b9$R$\n\n\u90a3\u4e48\u5f53$ed_x=i$\u7684\u65f6\u5019\uff0c\u5982\u679c$i$\u5904\u4e0d\u5efa\uff0c\u90a3\u4e48\u5c31\u8981\u533a\u95f4\u52a0\u4e0a$pay[x]$\u7684\u503c\uff0c\u7136\u800c\u53ef\u80fd\u6709\u5f88\u591a\u70b9\u7684$ed$\u90fd\u662f$i$\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u94fe\u5f0f\u524d\u5411\u661f\u6765\u4fdd\u5b58\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u5b9e\u73b0\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u7f8e\u6ecb\u6ecb\u7684\u4ee3\u7801\u65f6\u95f4~~~\n~~~cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 20007\n#define int long long\n#define inf 0x3f3f3f3f3f3f3f3f\nusing namespace std;\nstruct Edge\n{\n\tint to,nxt;\n}edge[N<<2];\nstruct Tree\n{\n\tint date,mark;\n}tr[N<<2];\nint n,k,cnt;\nint dis[N],val[N],range[N],pay[N],st[N],ed[N],head[N],f[N];\nvoid Add(int u,int v)\n{\n\tedge[++cnt]=(Edge){v,head[u]};\n\thead[u]=cnt;\n}\nvoid Get()\n{\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tst[i]=lower_bound(dis+1,dis+1+n,dis[i]-range[i])-dis;\n\t\ted[i]=lower_bound(dis+1,dis+1+n,dis[i]+range[i])-dis;\n\t\tif(dis[ed[i]]>dis[i]+range[i])\n\t\t\t--ed[i];\n\t\tAdd(ed[i],i);\n\t}\n}\nvoid Pushup(int rt)\n{\n\ttr[rt].date=min(tr[rt<<1].date,tr[rt<<1|1].date);\n}\nvoid Build(int rt,int l,int r)\n{\n\ttr[rt].mark=0;\n\tif(l==r)\n\t{\n\t\ttr[rt].date=f[l];\n\t\treturn;\n\t}\n\tint mid=l+((r-l)>>1);\n\tBuild(rt<<1,l,mid);\n\tBuild(rt<<1|1,mid+1,r);\n\tPushup(rt);\n}\nvoid Pushdown(int rt)\n{\n\tif(tr[rt].mark)\n\t{\n\t\ttr[rt<<1].date+=tr[rt].mark;\n\t\ttr[rt<<1|1].date+=tr[rt].mark;\n\t\ttr[rt<<1].mark+=tr[rt].mark;\n\t\ttr[rt<<1|1].mark+=tr[rt].mark;\n\t\ttr[rt].mark=0;\n\t}\n}\nint Search(int rt,int l,int r,int L,int R)\n{\n//\tcout<<\"l:\"<<l<<\" r:\"<<r<<\" L:\"<<L<<\" R:\"<<R<<endl;\n\tif(L>R)\n\t\treturn inf;\n\tif(L<=l&&r<=R)\n\t\treturn tr[rt].date;\n\tint mid=l+((r-l)>>1);\n\tPushdown(rt);\n\tint num=inf;\n\tif(L<=mid)\n\t\tnum=min(num,Search(rt<<1,l,mid,L,R));\n\tif(mid<R)\n\t\tnum=min(num,Search(rt<<1|1,mid+1,r,L,R));\n\treturn num;\n}\nvoid Update(int rt,int l,int r,int L,int R,int c)\n{\n//\tcout<<\"l:\"<<l<<\" r:\"<<r<<endl;\n\tif(L>R)\n\t\treturn;\n\tif(L<=l&&r<=R)\n\t{\n\t\ttr[rt].date+=c;\n\t\ttr[rt].mark+=c;\n\t\treturn;\n\t}\n\tPushdown(rt);\n\tint mid=l+((r-l)>>1);\n\tif(L<=mid)\n\t\tUpdate(rt<<1,l,mid,L,R,c);\n\tif(mid<R)\n\t\tUpdate(rt<<1|1,mid+1,r,L,R,c);\n\tPushup(rt);\n}\nvoid Dp()\n{\n\tint now=0;\n\tfor(int j=1;j<=n;++j)\n\t{\n\t\tf[j]=now+val[j];\n\t\tfor(int p=head[j];p;p=edge[p].nxt)\n\t\t{\n\t\t\tint v=edge[p].to;\n\t\t\tnow+=pay[v];\n\t\t}\n\t}\n\tint ans=f[n];\n//\tfor(int i=1;i<=n;++i)\n//\t{\n//\t\tprintf(\"%d \",f[i]);\n//\t}\n\tfor(int i=2;i<=k;++i)\n\t{\n\t\tBuild(1,1,n);\n\t\tfor(int j=1;j<=n;++j)\n\t\t{\n\t\t\tf[j]=Search(1,1,n,1,j-1)+val[j];\n\t\t//\tcout<<f[j]<<\" \";\n\t\t\tfor(int p=head[j];p;p=edge[p].nxt)\n\t\t\t{\n\t\t\t\tint v=edge[p].to;\n\t\t\t\tUpdate(1,1,n,1,st[v]-1,pay[v]);\n\t\t\t}\n\t\t}\n\t\tans=min(ans,f[n]);//cout<<\"ans:\"<<ans<<endl;\n\t}\n\tprintf(\"%lld\",ans);\n}\nvoid Init()\n{\n\tscanf(\"%lld%lld\",&n,&k);\n\tfor(int i=2;i<=n;++i)\n\t\tscanf(\"%lld\",&dis[i]);\n\tfor(int i=1;i<=n;++i)\n\t\tscanf(\"%lld\",&val[i]);\n\tfor(int i=1;i<=n;++i)\n\t\tscanf(\"%lld\",&range[i]);\n\tfor(int i=1;i<=n;++i)\n\t\tscanf(\"%lld\",&pay[i]);\n\t++n;++k;\n\tdis[n]=pay[n]=inf;\n}\nsigned main()\n{\n\tInit();\n\tGet();\n\tDp();\n\treturn 0;\n}\n~~~",
        "postTime": 1547466427,
        "uid": 96968,
        "name": "3493441984zz",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "##**Solution** DP + \u7ebf\u6bb5\u6811\u4f18\u5316\n\n- \u8bb0$f[i][j]$\u8868\u793a\u5728\u7b2c$i$\u4e2a\u6751\u5e84\u4fee\u5efa\u7b2c$j$\u4e2a\u57fa\u7ad9\u4e14\u4e0d\u8003\u8651\u7b2c$i + 1$~$n$\u4e2a\u6751\u5e84\u6240\u9700\u7684\u6700\u5c0f\u8d39\u7528\u3002\n\n- \u5219\u8f6c\u79fb\u65b9\u7a0b\u4e3a$f[i][j] = Min(f[k][j - 1] + cst[k][i]) + c[i](j - 1 \\le k < i)$\u3002\u5176\u4e2d$cst[k][i]$\u8868\u793a\u7b2c$i$~$k$\u4e2a\u6751\u5e84\u4e4b\u95f4\u6ca1\u6709\u88ab\u57fa\u7ad9$i, k$\u8986\u76d6\u7684\u6751\u5e84\u6240\u9700\u7684\u8d54\u507f\u8d39\u7528\uff0c\u8ba1\u7b97\u8d39\u7528\u7684\u590d\u6742\u5ea6\u4e3a$O(n)$\uff0c\u5219\u603b\u590d\u6742\u5ea6\u4e3a$O(n^2k)$\u3002\n\n- \u8fd9\u6837\u663e\u7136\u662f\u4e0d\u80fd\u901a\u8fc7\u7684\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u4f18\u5316\uff1a\n\n- \u9996\u5148\u6211\u4eec\u53d1\u73b0\u4e4b\u524d\u7684\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u53bb\u6389\u4e00\u7ef4$j$\uff0c\u5b9e\u9645\u4e0a\u53ea\u8981\u5728\u6700\u5916\u5c42\u679a\u4e3e$j$\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e5f\u5c31\u662f$f[i] = Min(f[k] + cst[k][i]) + c[i](j - 1 \\le k < i)$\u3002\n\n- \u800c\u4e3b\u8981\u7684\u6d88\u8017\u5728\u8ba1\u7b97$cst[k][i]$\u4e0a\uff0c\u4e5f\u5c31\u662f\u6709\u591a\u5c11\u4e2a\u6751\u5e84\u9700\u8981\u8d54\u507f\u3002\n\n- \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u6751\u5e84$i$\uff0c\u8bb0\u5b83\u6240\u80fd\u88ab\u8986\u76d6\u7684\u5de6\u53f3\u8fb9\u754c$st[i], ed[i]$\uff08**\u6700\u5de6\u7aef\u3001\u6700\u53f3\u7aef\u53ef\u4ee5\u8986\u76d6\u5230$i$\u7684\u57fa\u7ad9\u4f4d\u7f6e**\uff0c\u53ef\u7528\u4e8c\u5206\u67e5\u627e\u5904\u7406\uff09\uff0c\u7136\u540e\u5728\u7528\u90bb\u63a5\u8868\u8bb0\u5f55$ed$\u503c\u4e3a$i$\u7684\u6751\u5e84\u6709\u54ea\u4e9b\uff0c\u5728\u8fd9\u4e9b\u6751\u5e84\u4e4b\u524d\u5efa\u7acb\u57fa\u7ad9\u5c31\u8986\u76d6\u4e0d\u5230$i$\u4e86\u3002\n\n- \u8fd9\u6837\u5f53\u6211\u4eec\u63a8\u5bfc$i + 1$\u65f6\uff0c\u82e5\u4ece\u6751\u5e84$1$~$st[k] - 1(ed[k] = i)$\u8f6c\u79fb\u8fc7\u6765\u5219\u5fc5\u5b9a\u8981\u8d54\u507f\u6751\u5e84$k$\u7684\u8d39\u7528\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4$f[k] + cst[k][i]$\u7684\u503c\uff0c\u5373\u5728\u533a\u95f4$[1, st[k] - 1]$\u52a0\u4e0a\u6751\u5e84$k$\u7684\u8d39\u7528\uff0c\u800c\u8f6c\u79fb\u5373\u5728\u533a\u95f4$[1, i - 1]$\u627e$f[k] + cst[k][i]$\u7684\u6700\u5c0f\u503c\uff0c\u603b\u590d\u6742\u5ea6\u4e3a$O(nlogn \\times k)$\u3002\n\n##**Code**\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define sL (s << 1)\n#define sR (s << 1 | 1)\n\nusing namespace std;\nconst int Maxn = 0x3f3f3f3f;\nconst int N = 2e4 + 5, M = N << 2;\nint d[N], c[N], w[N], s[N], st[N], ed[N], f[N]; \nint n, k, Ans, val[M], tag[M];\n\nstruct point\n{\n    int to; point *nxt;\n}a[M], *T = a, *lst[N]; \n\ninline void addEdge(const int &x, const int &y) {T->nxt = lst[x]; T->to = y; lst[x] = T++;} \ntemplate <class T> inline T Min(const T &a, const T &b) {return a < b? a : b;}\ntemplate <class T> inline void CkMin(T &a, const T &b) {if (a > b) a = b;}\n\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\n\ninline void put(int x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\n\ninline void Push(const int &s) {val[s] = Min(val[sL], val[sR]);}\ninline void Add(const int &s, const int &z) \n{val[s] += z; tag[s] += z;}\n\ninline void Down(const int &s)\n{\n    if (!tag[s]) return ;\n    Add(sL, tag[s]); Add(sR, tag[s]); tag[s] = 0;\n}\n\ninline void Build(const int &s, const int &l, const int &r)\n{\n    tag[s] = 0;\n    if (l == r) return (void)(val[s] = f[l]);\n    int mid = l + r >> 1;\n    Build(sL, l, mid); Build(sR, mid + 1, r);\n    Push(s);\n}\n\ninline int Query(const int &s, const int &l, const int &r, const int &x, const int &y)\n{ \n    if (l == x && r == y) return val[s];\n    Down(s); int mid = l + r >> 1; \n    if (y <= mid) return Query(sL, l, mid, x, y);\n     else if (x > mid) return Query(sR, mid + 1, r, x, y);\n      else return Min(Query(sL, l, mid, x, mid),\n                         Query(sR, mid + 1, r, mid + 1, y));\n}\n\ninline void Modify(const int &s, const int &l, const int &r, const int &x, const int &y, const int &z)\n{\n    if (l == x && r == y) return Add(s, z);\n    Down(s); int mid = l + r >> 1;\n    if (y <= mid) Modify(sL, l, mid, x, y, z);\n     else if (x > mid) Modify(sR, mid + 1, r, x, y, z);\n      else \n      {\n          Modify(sL, l, mid, x, mid, z);\n          Modify(sR, mid + 1, r, mid + 1, y, z);\n      }\n    Push(s);\n}\n\nint main()\n{\n    n = get(); k = get() + 1;\n    for (int i = 2; i <= n; ++i) d[i] = get();\n    for (int i = 1; i <= n; ++i) c[i] = get();\n    for (int i = 1; i <= n; ++i) s[i] = get();\n    for (int i = 1; i <= n; ++i) w[i] = get();\n    ++n; d[n] = w[n] = Maxn;  \n    //\u5f53\u6211\u4eec\u63a8\u5bfci\u65f6\uff0c\u6211\u4eec\u53ea\u8003\u8651\u4e86\u5b83\u548c\u524d\u9762\u7684\u57fa\u7ad9\u4ea7\u751f\u7684\u5f71\u54cd\n    //\u8fd9\u65f6\u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a\u57fa\u7ad9\u6211\u4eec\u4e0d\u4f1a\u8003\u8651\u5b83\u548c\u4e4b\u540e\u7684\u6751\u5e84\u4ea7\u751f\u7684\u5f71\u54cd\n    //\u5219\u6211\u4eec\u53ef\u4ee5\u5728\u6700\u540e\u589e\u52a0\u4e00\u4e2a\u6751\u5e84\n    //\u4fdd\u8bc1\u5b83\u5fc5\u5b9a\u88ab\u4f5c\u4e3a\u57fa\u7ad9\uff08\u65e0\u5efa\u8bbe\u8d39\u7528\uff09\u4e14\u4e0d\u5bf9\u524d\u9762\u4ea7\u751f\u5f71\u54cd\n    //\u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709\u9057\u6f0f\u7684\u4e86 \n    for (int i = 1; i <= n; ++i)\n    {\n        st[i] = lower_bound(d + 1, d + n + 1, d[i] - s[i]) - d;\n        ed[i] = lower_bound(d + 1, d + n + 1, d[i] + s[i]) - d;\n        if (d[ed[i]] > d[i] + s[i]) ed[i]--; addEdge(ed[i], i);\n        //lower_bound\u67e5\u627e\u7684\u662f\u5927\u4e8e\u7b49\u4e8ex\u7684\u7b2c\u4e00\u4e2a\u6570\n        //\u800ced[i]\u8981\u6c42\u7684\u662f\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u6700\u540e\u4e00\u4e2a\u6570\n        //\u6240\u4ee5\u5224\u65ad\u4e00\u4e0b\u51cf\u4e00\u5c31\u53ef\u4ee5\u4e86 \n    }\n    for (int i = 1; i <= k; ++i)\n    if (i == 1)\n    {\n        int res = 0;\n        for (int j = 1; j <= n; ++j)\n        {\n            f[j] = res + c[j];\n            for (point *e = lst[j]; e; e = e->nxt)\n             res += w[e->to];\n         }\n         Ans = f[n];\n    }\n    else \n    {\n        Build(1, 1, n); int y;\n        for (int j = 1; j <= n; ++j)\n        {\n            //\u6ce8\u610f\u7ebf\u6bb5\u6811\u533a\u95f4\u7684\u8fb9\u754c\u6761\u4ef6\n            f[j] = (j > i - 1 ? Query(1, 1, n, i - 1, j - 1) : 0) + c[j];\n            for (point *e = lst[j]; e; e = e->nxt)\n             if (st[y = e->to] > 1) Modify(1, 1, n, 1, st[y] - 1, w[y]);\n            //\u8fd9\u91cc\u5176\u5b9e\u53ea\u8981\u4fee\u6539\u533a\u95f4[i, st[y] - 1]\u5c31\u884c\u4e86\n            //\u4e0d\u8fc7\u8be2\u95ee/\u4fee\u6539\u7684\u533a\u95f4\u957f\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u5176\u5b9e\u66f4\u5feb \n        }\n        CkMin(Ans, f[n]);\n    }\n    return put(Ans), 0;\n}\n\n```",
        "postTime": 1501733456,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "# P2605\n\uff08\u4e0d\u6127\u662f\u6d59\u6c5f\uff0c\u5341\u5e74\u524d\u7684\u9898\u90fd\u8fd9\u4e48\u96be\uff09\n\n## \u601d\u8def\n\u770b\u5230\u8fd9\u6837\u7684\u9898\u76ee\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u60f3\u6cd5\u5e94\u8be5\u662f\u5206\u5c42dp\u3002\n\n\u4ee4 $f_{i,j}$\u8868\u793a\u5728 $i$ \u4f4d\u7f6e\u5efa\u7acb\u7b2c $j$ \u4e2a\u57fa\u7ad9\u7684\u6700\u5c0f\u8d39\u7528\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u8f6c\u79fb\u662f\u663e\u7136\u7684:\n\n$$f_{i,j}=\\min(f_{k,j-1}+cost_{k,i})(k\\in[1,i-1])$$\n\n\u5176\u4e2d $cost_{k,i}$ \u4e3a\u5728 $k,i$ \u4e24\u4e2a\u70b9\u4e2d\u95f4\u6ca1\u6709\u57fa\u7ad9\u6240\u9700\u8981\u7684\u8d54\u507f\u8d39\u7528\uff0c\n\n\u800c\u672c\u9898\u6700\u96be\u4e4b\u5904\u4e5f\u5c31\u5728\u8fd9\u3002\n\n\u5176\u5b9e\u697c\u4e0a\u7684\u9898\u89e3\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u5728\u8fd9\u513f\u5c31\u505a\u4e00\u4e2a\u81ea\u5df1\u7684\u9610\u91ca\u5427\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408 $A_i$\uff0c\n\n\u82e5 $j\\in A_i$ \u5219\u8868\u793a\u5728 $j$ \u5efa\u7acb\u57fa\u7ad9\u53ef\u4ee5\u8986\u76d6\u5230 $i$\u3002\n\n\u7136\u540e $st_i,ed_i$ \u5206\u522b\u8868\u793a $A_i$ \u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002\n\n\uff08\u611f\u89c9\u8fd9\u4e00\u70b9\u5176\u4ed6\u51e0\u7bc7\u9898\u89e3\u8bb2\u7684\u4e0d\u6e05\u695aqaq\uff09\n\n\u6211\u4eec\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u4e00\u4e0b\u5230\u73b0\u5728\u4e3a\u6b62\u7684 $\\min(f_{k,j-1}+cout_{k,i})$\uff0c\n\n\u5177\u4f53\u7684\u65b9\u6cd5\u5c31\u662f\uff1a\u7b2c $j$ \u5c42\u5efa\u6811\u7684\u65f6\u5019\uff0c\u4ee5 $f_{i,j-1}$ \u4e3a\u521d\u59cb\u503c\uff0c\n\n\u5982\u679c $i=ed_k$ \uff0c\u90a3\u4e48\u5728\u7ebf\u6bb5\u6811\u4e0a $[1,st_k-1]$ \u7684\u533a\u95f4 $+w[k]$($w$ \u542b\u4e49\u89c1\u9898\u76ee)\n\n\u56e0\u4e3a\u5bf9\u4e8e\u540e\u9762\u7684\u70b9\uff0c\u8981\u662f\u4ece $[1,st_k-1]$ \u7684\u70b9\u8f6c\u79fb\u8fc7\u6765\uff0c\n\n\u90a3\u4e48 $k$ \u5c31\u65e0\u6cd5\u88ab\u8986\u76d6\u5230\uff0c\u6240\u4ee5\u8981\u52a0\u4e0a\u8d54\u507f\u8d39\u7528\u3002\n\n\u7136\u540e\u6211\u4eec\u53ea\u8981\u533a\u95f4\u67e5\u8be2 $\\min(f_{k,j-1}+cout_{k,i})$ \u5c31\u597d\u4e86\u3002\n\n\u4e00\u4e2a\u5c0f\u5c0f\u7684\u4f18\u5316\uff1a\n\n\u6211\u4eec\u5728 $inf$ \u4f4d\u7f6e\u5efa\u7acb\u4e00\u4e2a\u5efa\u7acb\u57fa\u7ad9\u8d39\u7528\u4e3a $0$\uff0c\u8986\u76d6\u8ddd\u79bb\u4e3a $0$ \u7684\u57fa\u7ad9\uff0c\u5c31\u53ef\u4ee5\u8d77\u5230\u7edf\u8ba1\u7b54\u6848\u7684\u4f5c\u7528\u3002\n\n\u5bf9\u5e94\u7684\uff0c$n$ \u548c $k$ \u90fd\u8981\u52a0\u4e00\u3002\n\n## code\n\u597d\u50cf\u9898\u89e3\u533a\u90fd\u662f\u4e0b\u653e\u6807\u8bb0\u7684\u3002\n\n\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u5199\u6cd5\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\ninline int read(){\n\tregister int x=0;\n\tregister bool f=0;\n\tregister char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-') f=1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+c-48;\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nvoid write(int x){\n    if(x<0) putchar('-'), x=-x;\n    if(x>=10) write(x/10);\n    putchar('0'+x%10);\n}\nconst int maxn=114514;\nconst int inf=2333333333333333333;\nstruct seg{\n\tint v,tag;\n}t[maxn<<2];\nstruct Edge {               \n    int to,nxt;\n}e[maxn<<2];\nint h[110005],cnt,n,m;\ninline void add(int from,int to) {\n    cnt++;\n    e[cnt].nxt=h[from];\n    e[cnt].to=to;\n    h[from]=cnt;\n}\nint st[maxn],ed[maxn],f[maxn],d[maxn],c[maxn],s[maxn],w[maxn];\nvoid build(int o,int l,int r){\n\tt[o].tag=0;\n\tif(l==r){\n\t\tt[o].v=f[l];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(o<<1,l,mid);\n\tbuild(o<<1|1,mid+1,r);\n\tt[o].v=min(t[o<<1].v,t[o<<1|1].v);\n}\nvoid change(int o,int l,int r,int ql,int qr,int v){\n\tif(ql>qr) return;\n\tif(ql<=l&&r<=qr){\n\t\tt[o].v+=v;\n\t\tt[o].tag+=v;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(ql<=mid) change(o<<1,l,mid,ql,qr,v);\n\tif(qr>mid) change(o<<1|1,mid+1,r,ql,qr,v);\n\tt[o].v=min(t[o<<1].v,t[o<<1|1].v)+t[o].tag;\n}\nint query(int o,int l,int r,int ql,int qr,int tag){\n\tif(ql>qr) return inf;\n\tif(ql<=l&&r<=qr){\n\t\treturn t[o].v;\n\t}\n\tint mid=l+r>>1,res=inf;\n\tif(ql<=mid) res=min(res,query(o<<1,l,mid,ql,qr,tag+t[o].tag));\n\tif(qr>mid) res=min(res,query(o<<1|1,mid+1,r,ql,qr,tag+t[o].tag));\n\treturn res;\n}\n\nsigned main(){\n\tn=read();m=read();\n\tfor(int i=2;i<=n;i++) d[i]=read();\n\tfor(int i=1;i<=n;i++) c[i]=read();\n\tfor(int i=1;i<=n;i++) s[i]=read();\n\tfor(int i=1;i<=n;i++) w[i]=read();\n\tn++;m++;\n\td[n]=w[n]=inf;\n\tfor(int i=1;i<=n;i++){\n        st[i]=lower_bound(d+1,d+1+n,d[i]-s[i])-d;\n        ed[i]=lower_bound(d+1,d+1+n,d[i]+s[i])-d;\n        if(d[ed[i]]>d[i]+s[i])ed[i]--;\n        add(ed[i],i);\n    }\n    int now=0;\n    for(int i=1;i<=n;i++){\n    \tf[i]=now+c[i];\n    \tfor(int j=h[i];j;j=e[j].nxt){\n            int v=e[j].to;\n            now+=w[v];\n        }\n\t}\n\tint res=f[n];\n\tfor(int i=2;i<=m;i++){\n\t\tbuild(1,1,n);\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tf[j]=query(1,1,n,1,j-1,0)+c[j];\n\t\t\tfor(int k=h[j];k;k=e[k].nxt){\n                int v=e[k].to;\n                change(1,1,n,1,st[v]-1,w[v]);\n            }\n\t\t}\n\t\tres=min(res,f[n]);\n\t}\n\twrite(res);\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1581562070,
        "uid": 120074,
        "name": "BFqwq",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/chenxiaoran666/p/Luogu2605.html)\n\n**\u5927\u81f4\u9898\u610f\uff1a** \u6709$n$\u4e2a\u6751\u5e84\uff0c\u6bcf\u4e2a\u6751\u5e84\u6709$4$\u4e2a\u5c5e\u6027\uff1a$D_i$\u8868\u793a\u4e0e\u6751\u5e84$1$\u7684\u8ddd\u79bb\uff0c$C_i$\u8868\u793a\u5efa\u7acb\u57fa\u7ad9\u7684\u8d39\u7528\uff0c$S_i$\u8868\u793a\u80fd\u5c06\u5176\u8986\u76d6\u7684\u5efa\u57fa\u7ad9\u8303\u56f4\uff0c$W_i$\u8868\u793a\u6ca1\u5efa\u8bbe\u57fa\u7ad9\u6240\u8981\u4ed8\u51fa\u7684\u4ee3\u4ef7\u3002\n\n### \u66b4\u529b$DP$\n\n\u9996\u5148\u6211\u4eec\u6765\u8003\u8651\u4e00\u6ce2\u66b4\u529b$DP$\u3002\n\n\u8bbe$f_{i,j}$\u4e3a**\u5728\u524d$i$\u6751\u5e84\u5171\u5efa$j$\u4e2a\u57fa\u7ad9\u4e14\u7b2c$i$\u4e2a\u6751\u5e84\u5fc5\u9009**\u6240\u9700\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5b9a\u4e49\u5b83\u4e0d\u7ba1\u5176\u4e4b\u540e\u7684\u4ee3\u4ef7\u3002\n\n\u800c\u8fd9\u6837\u7edf\u8ba1\u7b54\u6848\u53c8\u7565\u663e\u9ebb\u70e6\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u6700\u540e\u589e\u52a0\u4e00\u4e2a\u8282\u70b9\uff08$++n$\u5373\u53ef\uff09\uff0c\u521d\u59cb\u5316\u5176\u5230\u6751\u5e84$1$\u7684\u8ddd\u79bb$D_i$\u548c\u6ca1\u5efa\u8bbe\u57fa\u7ad9\u6240\u8981\u4ed8\u51fa\u7684\u4ee3\u4ef7$W_i$\u4e3a$INF$\uff0c\u4e14\u5efa\u7acb\u57fa\u7ad9\u7684\u8d39\u7528$C_i$\u548c\u80fd\u5c06\u5176\u8986\u76d6\u7684\u5efa\u57fa\u7ad9\u8303\u56f4$S_i$\u4e3a$0$\u3002\n\n\u8fd9\u6837\u521d\u59cb\u5316\u7684\u597d\u5904\u5728\u4e8e\uff0c\u9009\u62e9\u8fd9\u4e2a\u6751\u5e84\u4e0d\u4f1a\u53d7\u5230\u524d\u9762\u67d0\u4e2a\u6751\u5e84\u7684\u5f71\u54cd\uff0c\u800c\u9009\u62e9\u8fd9\u4e2a\u6751\u5e84\u53c8\u4e0d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u4efb\u4f55\u5f71\u54cd\u3002\n\n\u56e0\u6b64\uff0c\u8fd9\u4e2a\u65b0\u7684\u8282\u70b9\u7684\u7b54\u6848$f_{n,k+1}$\uff0c\u5c31\u662f\u6700\u7ec8\u7b54\u6848\uff08\u4e4b\u6240\u4ee5\u8981\u5c06$k+1$\uff0c\u662f\u56e0\u4e3a\u9009\u62e9\u8fd9\u4e2a\u65b0\u589e\u7684\u8282\u70b9\u5c31\u76f8\u5f53\u4e8e\u989d\u5916\u591a\u9009\u62e9\u4e86\u4e00\u4e2a\u6751\u5e84\u5efa\u57fa\u7ad9\uff09\u3002\n\n\u800c\u5c31\u6613\u63a8\u5f97\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$f_{i,j}=C_i+min_{k=j-1}^if_{k,j-1}+GetW(k,i)$$\n\n\u5176\u4e2d$GetW$\u8868\u793a$k$\u4e0e$i$\u4e4b\u95f4\u6ca1\u80fd\u88ab\u8986\u76d6\u3001\u8981\u4ed8\u51fa\u989d\u5916\u4ee3\u4ef7\u7684\u6751\u5e84\u7684$W_i$\u4e4b\u548c\u3002\n\n\u8fd9\u5e94\u8be5\u6bd4\u8f83\u663e\u7136\uff0c\u5c31\u76f8\u5f53\u4e8e\u679a\u4e3e\u4e00\u4e2a\u8282\u70b9$k$\u4f5c\u4e3a\u4e0a\u4e2a\u5efa\u7acb\u57fa\u7ad9\u7684\u8282\u70b9\uff0c\u7136\u540e\u5927\u529b\u8f6c\u79fb\u5373\u53ef\u3002\n\n\u800c$k$\u4ece$j-1$\u5f00\u59cb\u679a\u4e3e\u5e94\u8be5\u4e5f\u662f\u6bd4\u8f83\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u4f60\u81f3\u5c11\u8981\u6709$j-1$\u4e2a\u8282\u70b9\u624d\u80fd\u5efa$j-1$\u4e2a\u57fa\u7ad9\u3002\n\n\u7136\u800c\u8fd9\u4e2a\u5f0f\u5b50\u65f6\u95f4\u590d\u6742\u5ea6\u5dee\u4e0d\u591a\u662f$O(N^2k)$\uff0c\u538b\u6839\u4e0d\u53ef\u80fd\u8fc7\u3002\n\n\u6240\u4ee5\u5c31\u9700\u8981\u4f18\u5316\u3002\n\n### \u8003\u8651\u4f18\u5316\n\n\u8003\u8651\u5230$i$\u4e0e$j$\u7684\u679a\u4e3e\u987a\u5e8f\u5176\u5b9e\u4e0d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u4efb\u4f55\u5f71\u54cd\uff0c\u4e14$i$\u7684\u8f6c\u79fb\u663e\u7136\u6bd4$j$\u7684\u8f6c\u79fb\u66f4\u5bb9\u6613\u4f18\u5316\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06$j$\u63d0\u51fa\u5230\u6700\u5916\u9762\u4e00\u5c42\uff0c\u4ece\u800c\u8f6c\u5316\u5f97\u5230\u5982\u4e0b\u5f0f\u5b50\uff1a\n\n$$f_i=C_i+min_{k=j-1}^iLastf_k+GetW(k,i)$$\n\n\u5176\u4e2d$Lastf_k$\u8868\u793a\u7684\u662f\u4e0a\u4e00\u8f6e$DP$\u540e$f_k$\u7684\u503c\u3002\n\n\u5219\u5bf9\u4e8e\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u663e\u7136\u662f\u8981\u4f18\u5316\u540e\u9762\u6c42$min$\u7684\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u8003\u8651\u4e00\u4e2a\u70b9\u5728\u4ec0\u4e48\u65f6\u5019\u4e0d\u4f1a\u88ab\u8986\u76d6\u3002\n\n~~\u8fd9\u8c8c\u4f3c\u662f\u4e2a\u667a\u969c\u7684\u95ee\u9898~~\uff0c\u9898\u76ee\u4e2d\u5df2\u7ecf\u544a\u8bc9\u6211\u4eec\uff0c\u5bf9\u4e8e\u7b2c$i$\u4e2a\u57fa\u7ad9\uff0c\u5f53\u8ddd\u79bb\u5b83$S_i$\u8303\u56f4\u5185\u6ca1\u6709\u57fa\u7ad9\u65f6\uff0c\u5b83\u5c31\u4e0d\u4f1a\u88ab\u8986\u76d6\u3002\n\n\u5219\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa$L_x$\u548c$R_x$\u4e24\u4e2a\u53d8\u91cf\uff0c\u5206\u522b\u8868\u793a**\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9\u80fd\u8986\u76d6\u5230\u5b83\u7684\u8282\u70b9\u7f16\u53f7**\u3002\uff08\u53ef\u7528$lower\\_bound$\u76f4\u63a5\u6c42\uff0c\u53ef\u60dc\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u5904\u7406\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u4e8e\u662f\u624b\u5199\u4e8c\u5206\uff09\n\n\u90a3\u4e48\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c\u5f53\u4f60\u5230\u7b2c$R_x+1$\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u5982\u679c\u4e0a\u4e00\u4e2a\u57fa\u7ad9\u7684\u4f4d\u7f6e$<L_x$\uff0c\u5219\u6211\u4eec\u5c31\u9700\u8981\u5c06\u4ee3\u4ef7\u52a0\u4e0a$W_x$\u3002\n\n\u4e8e\u662f\u4e4e\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u6b21\u4ee3\u4ef7\u9700\u589e\u52a0\u7684\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7b97\u6cd5\u6216\u6570\u636e\u7ed3\u6784\uff0c\u80fd\u591f\u652f\u6301\u533a\u95f4\u52a0\u6cd5\u548c\u533a\u95f4\u6c42\u548c\u4e24\u79cd\u64cd\u4f5c\u3002\n\n\u663e\u7136\u7ebf\u6bb5\u6811\u3002\n\n### \u7ebf\u6bb5\u6811\u4f18\u5316\n\n\u8003\u8651\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u66f4\u65b0$j$\uff0c\u521d\u59cb\u5316\u5176\u4e3a$j-1$\u65f6\u7684$f$\u6570\u7ec4\u3002\n\n\u7136\u540e\uff0c\u5f53\u6211\u4eec\u64cd\u4f5c\u5b8c\u4e00\u4e2a$i$\u4e4b\u540e\uff0c\u5c31\u8981\u7528\u6240\u6709$R_x=i$\u7684$x$\u53bb\u66f4\u65b0\u9009\u62e9\u6bcf\u4e2a\u70b9\u7684\u4ee3\u4ef7\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u4e0a\u5c06$[j-1,L_x-1]$\u8fd9\u6bb5\u533a\u95f4\u6743\u503c\u52a0$W_x$\u3002\n\n\u800c\u4f60\u8981\u627e\u5230\u6240\u6709$R_x=i$\u7684$x$\uff0c\u90bb\u63a5\u8868\u5373\u53ef\u3002\n\n\u6700\u540e\u6bcf\u6b21\u66f4\u65b0\uff0c\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u4e2d\u8be2\u95ee\u533a\u95f4$[j-1,i-1]$\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u52a0\u4e0a$C_i$\u5373\u53ef\u5f97\u5230$f_i$\u3002\n\n\u8fd8\u6709\uff0c$j=1$\u65f6\u7684\u7b54\u6848\u9700\u8981\u5355\u72ec\u9884\u5904\u7406\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u53ef\u89c1\u4ee3\u7801\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define Reg register\n#define RI Reg int\n#define Con const\n#define CI Con int&\n#define I inline\n#define W while\n#define N 20000\n#define K 100\n#define INF 1e9\n#define Gmin(x,y) (x>(y)&&(x=(y)))\n#define add(x,y) (e[++ee].nxt=lnk[x],e[lnk[x]=ee].to=y)\nusing namespace std;\nint n,k,ee,d[N+5],c[N+5],s[N+5],w[N+5],L[N+5],R[N+5],f[N+5],lnk[N+5];\nstruct edge {int to,nxt;}e[N<<1];\nclass FastIO\n{\n    private:\n        #define FS 100000\n        #define tc() (A==B&&(B=(A=FI)+fread(FI,1,FS,stdin),A==B)?EOF:*A++)\n        #define tn (x<<3)+(x<<1)\n        #define D isdigit(c=tc())\n        char c,*A,*B,FI[FS];\n    public:\n        I FastIO() {A=B=FI;}\n        Tp I void read(Ty& x) {x=0;W(!D);W(x=tn+(c&15),D);}\n        Ts I void read(Ty& x,Ar&... y) {read(x),read(y...);}\n}F;\nclass SegmentTree//\u7ebf\u6bb5\u6811\n{\n    private:\n        #define STO l,hl,rt<<1\n        #define ORZ hl+1,r,rt<<1|1\n        #define PU(x) (O[x]=O[x<<1]+O[x<<1|1])\n        #define PD(x) (O[x].F&&(O[x<<1]+=O[x].F,O[x<<1|1]+=O[x].F,O[x].F=0))\n        int n,v[N+5];\n        struct Il\n        {\n            int V,F;I Il (CI v=0,CI f=0):V(v),F(f){}\n            I Il operator + (Con Il& t) Con {return Il(min(V,t.V));}\n            I void operator += (CI x) {V+=x,F+=x;}\n        }O[N<<2];\n        I void Build(CI l,CI r,CI rt)\n        {\n            if(!(l^r)) return (void)(O[rt]=Il(v[l]));\n            RI hl=l+r>>1;Build(STO),Build(ORZ),PU(rt);\n        }\n        I void upt(CI l,CI r,CI rt,CI ul,CI ur,CI v)//\u533a\u95f4\u52a0\u6cd5\n        {\n            if(ul<=l&&r<=ur) return O[rt]+=v;RI hl=l+r>>1;PD(rt);\n            ul<=hl&&(upt(STO,ul,ur,v),0),ur>hl&&(upt(ORZ,ul,ur,v),0),PU(rt);\n        }\n        I int qry(CI l,CI r,CI rt,CI ql,CI qr)//\u533a\u95f4\u6c42\u548c\n        {\n            if(ql<=l&&r<=qr) return O[rt].V;RI hl=l+r>>1,res=INF,t;PD(rt);\n            return ql<=hl&&(t=qry(STO,ql,qr),Gmin(res,t)),qr>hl&&(t=qry(ORZ,ql,qr),Gmin(res,t)),res;\n        }\n    public:\n        I void Init(CI x,int* s) {for(RI i=1;i<=x;++i) v[i]=s[i];Build(1,n=x,1);}\n        I void Update(CI l,CI r,CI v) {l<=r&&(upt(1,n,1,l,r,v),0);}\n        I int Query(CI l,CI r) {return l<=r?qry(1,n,1,l,r):0;} \n        #undef STO\n        #undef ORZ\n}S;\nI int GP(CI x)\n{\n    RI STO=1,hl,ORZ=n;\n    W(STO<=ORZ) d[hl=STO+ORZ>>1]<x?(STO=hl+1):ORZ=hl-1;\n    return STO;\n}\nint main()\n{\n    RI i,j,p,t,ans;for(F.read(n,k),i=2;i<=n;++i) F.read(d[i]);\n    for(i=1;i<=n;++i) F.read(c[i]);for(i=1;i<=n;++i) F.read(s[i]);for(i=1;i<=n;++i) F.read(w[i]);\n    for(++n,d[n]=w[n]=INF,i=1;i<=n;++i) L[i]=GP(d[i]-s[i]),R[i]=GP(d[i]+s[i]+1)-1,add(R[i],i);//\u521d\u59cb\u5316L[i]\u548cR[i]\uff0c\u7136\u540e\u5efa\u8fb9\n    for(t=0,i=1;i<=n;++i) for(f[i]=t+c[i],p=lnk[i];p;p=e[p].nxt) t+=w[e[p].to];ans=f[n];//\u9884\u5904\u7406j=1\u65f6\u7684\u7b54\u6848\n    for(j=2;j<=k+1;++j,Gmin(ans,f[n])) for(S.Init(n,f),i=1;i<=n;++i)//\u679a\u4e3e\u72b6\u6001\u8fdb\u884c\u8f6c\u79fb\n        for(f[i]=S.Query(j-1,i-1)+c[i],p=lnk[i];p;p=e[p].nxt) S.Update(j-1,L[e[p].to]-1,w[e[p].to]);//\u8f6c\u79fb\uff0c\u5e76\u66f4\u65b0\u6bcf\u4e2a\u70b9\u7684\u4ee3\u4ef7\n    return printf(\"%d\",ans),0;//\u8f93\u51fa\u7b54\u6848\n}\n```\n\n",
        "postTime": 1553091578,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "# \u9898\u89e3 [ZJOI2010] \u57fa\u7ad9\u9009\u5740\n\n10\u5e74\u540e\u7684\u83dc\u9e21AlanSP\u505a\u8fd9\u4e2a\u9898\uff0c\u8fd8\u662f\u611f\u5230\u795e\u4ed9\u2026\u2026\n\n### **Description**\n\n \u6709 N \u4e2a\u6751\u5e84\u5750\u843d\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u7b2c i(i>1) \u4e2a\u6751\u5e84\u8ddd\u79bb\u7b2c 1\u4e2a\u6751\u5e84\u7684\u8ddd\u79bb\u4e3a $D_i$\u3002\u9700\u8981\u5728\u8fd9\u4e9b\u6751\u5e84\u4e2d\u5efa\u7acb\u4e0d\u8d85\u8fc7 *K*\u4e2a\u901a\u8baf\u57fa\u7ad9\uff0c\u5728\u7b2c i\u4e2a\u6751\u5e84\u5efa\u7acb\u57fa\u7ad9\u7684\u8d39\u7528\u4e3a $C_i$\u3002\u5982\u679c\u5728\u8ddd\u79bb\u7b2c i \u4e2a\u6751\u5e84\u4e0d\u8d85\u8fc7 $S_i$ \u7684\u8303\u56f4\u5185\u5efa\u7acb\u4e86\u4e00\u4e2a\u901a\u8baf\u57fa\u7ad9\uff0c\u90a3\u4e48\u5c31\u6751\u5e84\u88ab\u57fa\u7ad9\u8986\u76d6\u4e86\u3002\u5982\u679c\u7b2c i \u4e2a\u6751\u5e84\u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u5219\u9700\u8981\u5411\u4ed6\u4eec\u8865\u507f\uff0c\u8d39\u7528\u4e3a $W_i$\u3002\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u9009\u62e9\u57fa\u7ad9\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002\n\n---\n\n### **Solution**\n\n\u8bbe$f[i][j]$\u8868\u793a\u524di\u4e2a\u6751\u5e84\u5efa\u7acbj\u4e2a\u57fa\u7ad9\uff0c\u7b2ci\u4e2a\u5f3a\u5236\u9009\u7684\u6700\u5c0f\u4ef7\u503c\u3002\n\n\u7ecf\u8fc7\u4e00\u756a\u8003\u8651\uff0c\u6211\u4eec\u5bb9\u6613\u5f97\u5230\u4e00\u4e0b\u7684DP\u65b9\u7a0b\uff1a\n$$\nf[i][j]=\\min_{k\\in[1,i-1]}\\{f[k][j-1]+cost(k,i)\\}+c[i]\n$$\n\u5176\u4e2d$cost(k,i)$ \u8868\u793a $ \\sum_{D_k<D_p-S_p\\And D_i>D_p+S_p}W[p]$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2k)$\u3002\n\n\u53d1\u73b0j\u8fd9\u4e00\u7ef4\u53ea\u6709j-1\u6709\u5173\uff0c\u53ef\u4ee5\u63d0\u51fa\u5230\u5916\u9762\uff0c\u5206\u5c42\u8fdb\u884cdp\uff0c\u7c7b\u4f3c01\u80cc\u5305\u3002\n\n\u74f6\u9888\u5728\u4e8e\u5982\u4f55\u8ba1\u7b97$cost(k,i)$\u3002\n\n---\n\n**\u89c4\u7ea6\uff1a**$L[i]$\u8868\u793a\u80fd\u591f\u8986\u76d6\u5230i\u7684\u5de6\u7aef\u70b9\uff0c$R[i]$\u8868\u793a\u80fd\u591f\u8986\u76d6\u5230i\u7684\u53f3\u7aef\u70b9\u3002\n\n$L[i],R[i]$\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\uff08\u5c0f\u4e8e\u7b49\u4e8e\uff09$S_i+D_i$\u7684\u6570\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u968f\u7740i\u7684\u53f3\u79fb\uff0c\u5de6\u8fb9\u7684\u67d0\u4e9b\u57fa\u7ad9\u4fbf\u4e0d\u518d\u80fd\u8986\u76d6\u5f53\u524d\u7684i\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21i\u6709\u79fb\u52a8\uff0c\u90a3\u4e48$[1,L[i]-1]$\u91cc\u9762\u7684f\u503c\u80af\u5b9a\u8981\u52a0\u4e0a$W_i$\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21f[i]\u7684\u8f6c\u79fb\uff0c\u53ef\u4ee5\u4e0d\u7528\u679a\u4e3e\uff0c\u82e5\u662f\u80fd\u67e5\u8be2\u5230$[1,i-1]$\u4e2df\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u4fbf\u53ef\u4ee5\u76f4\u63a5\u8f6c\u79fb\u3002\n\n\u5b9e\u73b0\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u533a\u95f4\u67e5\u8be2&\u533a\u95f4\u52a0\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\n\n\u8fd9\u6837\u80fd\u591f\u505a\u5230$O(nk\\log n)$\u3002\n\n\u800c\u5bf9\u4e8e\u7ef4\u62a4i\u79fb\u52a8\u540e\u54ea\u4e9b\u70b9\u4f1a\u6536\u5230\u5f71\u54cd\uff0c\u4e5f\u5c31\u662f\u7ef4\u62a4i\u662f\u54ea\u4e9b\u70b9\u7684R\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6\u90bb\u63a5\u8868\u3002\n\n\u56e0\u4e3a\u53ea\u8981i\u79fb\u52a8\uff0c\u90a3\u4e9b\u70b9\u5bf9\u4e8e\u540e\u6765\u7684i\uff0c\u80af\u5b9a\u8981\u4ed8\u51fa$W_i$\u4ee3\u4ef7\u3002\n\n\u800c\u90bb\u63a5\u8868\u6709\u6548\u7684\u8282\u7701\u4e86\u7a7a\u95f4\uff0c\u540c\u6837\u4fbf\u4e8e\u63d2\u5165\u3002\n\n\u6700\u540e\u8865\u4e00\u5f20\u56fe\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/px5oz7np.png)\n\n\uff08P.S. \u7ebf\u6bb5\u6811\u53ef\u4ee5\u91cd\u590d\u5229\u7528\uff0c\u6bcf\u4e2aj\u51b3\u7b56\u66f4\u65b0\u4e00\u904d\uff09\n\n---\n\n### **code**\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n#define int long long\n#define ls (x<<1)\n#define rs (x<<1|1)\nconst int N=20009,INF=0x3f3f3f3f;\nint n,k,d[N],s[N],w[N],c[N],f[N],L[N],R[N],ans,sum;\nint nxt[N<<2],ver[N<<2],h[N],tot;\nstruct Segment_Tree \n{\n\tint tag,val;\n} tr[N<<2];\n\ninline void add(int x,int y)\n{\n\tver[++tot]=y,nxt[tot]=h[x],h[x]=tot;\n}\n\ninline void build(int x,int l,int r)\n{\n\ttr[x].tag=0;\n\tif(l==r)\n\t{\n\t\t// tr[x].tag=0;\n\t\ttr[x].val=f[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\ttr[x].val=min(tr[ls].val,tr[rs].val);\n}\n\ninline void down(int x,int l,int r)\n{\n\tint c=tr[x].tag;\n\ttr[ls].tag+=c;\n\ttr[rs].tag+=c;\n\ttr[ls].val+=c;\n\ttr[rs].val+=c;\n\ttr[x].tag=0;\n}\n\ninline int query(int x,int l,int r,int L,int R)\n{\n\tif(L<=l&&r<=R) return tr[x].val;\n\tint mid=(l+r)>>1,res=INF;\n\tif(tr[x].tag) down(x,l,r);\n\tif(L<=mid) res=min(res,query(ls,l,mid,L,R));\n\tif(R>mid) res=min(res,query(rs,mid+1,r,L,R));\n\treturn res;\n}\n\ninline void change(int x,int l,int r,int L,int R,int c)\n{\n\tif(L<=l&&r<=R)\n\t{\n\t\ttr[x].tag+=c;\n\t\ttr[x].val+=c;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(tr[x].tag) down(x,l,r);\n\tif(L<=mid) change(ls,l,mid,L,R,c);\n\tif(R>mid) change(rs,mid+1,r,L,R,c);\n\ttr[x].val=min(tr[ls].val,tr[rs].val);\n}\n\nsigned main()\n{\n\tscanf(\"%lld%lld\",&n,&k);\n\tfor(int i=2;i<=n;i++) scanf(\"%lld\",&d[i]);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld\",&c[i]);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld\",&s[i]);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld\",&w[i]);\n\tk++,n++;\n\td[n]=w[n]=INF;\n\ts[n]=c[n]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tL[i]=lower_bound(d+1,d+1+n,d[i]-s[i])-d;\n\t\tR[i]=lower_bound(d+1,d+1+n,d[i]+s[i])-d;\n\t\tif(d[R[i]]>d[i]+s[i]) R[i]--;\n\t\t// if(i==n) printf(\"%lld\\n\",R[n]);\n\t\tadd(R[i],i);\n\t}\n\t// printf(\"%d %d\\n\",L[n],R[n]);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tf[i]=sum+c[i];//\u8bb0f[i]\u4e3a\u5f3a\u5236\u9009i\u5efa\u57fa\u7ad9\u6240\u6700\u5c0f\u4ef7\u503c\n\t\tfor(int j=h[i];j;j=nxt[j])\n\t\t{\n\t\t\tsum+=w[ver[j]];\t\n\t\t}//sum\u8fdb\u884c\u7d2f\u52a0\n\t}\n\tans=f[n];\n\t// for(int i=1;i<=n;i++) printf(\"%d \",f[i]);\n\tfor(int j=2;j<=k;j++)\n\t{\n\t\tbuild(1,1,n);//\u6bcf\u6b21\u91cd\u65b0\u5efa\u6811\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\t// puts(\"DEBUG\");\n\t\t\tif(i>1) f[i]=query(1,1,n,1,i-1)+c[i];\n\t\t\telse f[i]=INF;\n\t\t\tfor(int u=h[i];u;u=nxt[u])\n\t\t\t{\n\t\t\t\tint v=ver[u];\n\t\t\t\tif(L[v]>1) change(1,1,n,1,L[v]-1,w[v]);\n\t\t\t}\n\t\t}\n\t\tans=min(ans,f[n]);\n\t\t// printf(\"%d\\n\",f[n]);\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n---\n\n",
        "postTime": 1594129421,
        "uid": 237308,
        "name": "AlanSP",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "\u9898\u89e3\u7b2c\u4e00\u904d\u63d0\u4ea4\u6ca1\u6709\u8fc7\uff0c\u5728\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b\u3002\n\n\u5173\u4e8e\u201c\u91cd\u590d\u505a\u6cd5\u201d\uff0c\u6211\u7684\u786e\u4e0d\u4f1a\u522b\u7684\u505a\u6cd5\uff0c\u5927\u6982\u4e5f\u6ca1\u6709\u522b\u7684\u505a\u6cd5\u3002\n\n\u63d0\u4ea4\u8fd9\u7bc7\u9898\u89e3\u662f\u56e0\u4e3a\uff0c\u6211~~\u81ea\u4ee5\u4e3a~~\u5728\u4e00\u4e9b\u7ec6\u8282\u4e0a\u8bb2\u7684\u66f4\u52a0\u6e05\u6670\uff0c\u7ec6\u81f4\uff0c\u524d\u9762\u7684\u9898\u89e3\u4e3b\u9898\u601d\u8def\u8bb2\u7684\u5f88\u597d\uff0c\u4f46\u662f\u7f3a\u4e4f\u5bf9\u7ec6\u8282\u7684\u7167\u987e\uff0c\u4e0d\u592a\u5bb9\u6613\u7406\u89e3\u3002\n\n\n\n------------\n\n\n~~\u6211\u8fd8\u662f\u592a\u5e74\u8f7b\u4e86\uff0c\u6211\u66fe\u7ecf\u4ee5\u4e3a\u8fd9\u9053\u9898\u5f88\u6c34\uff0c\u4f46\u6211\u9519\u4e86\u3002~~\n\n\u663e\u7136\u53ef\u4ee5\u5f97\u5230\u66b4\u529b$dp$\u5f0f\u5b50\n\n$f[i][j]=min \\{ f[k][j-1]+cost(k,i) \\}+c[i]$\n\n\u5176\u4e2d\uff0c$cost(k,i)$\u8868\u793a$k,i$\u4e4b\u95f4\u63a5\u6536\u4e0d\u5230\u4fe1\u53f7\u7684\u60e9\u7f5a\u91d1\u989d\u3002\n\n\u5982\u679c\u5355\u5355\u6709$min \\{ f[k][j-1] \\}+c[i]$\u81ea\u7136\u5f88\u597d\u5904\u7406\uff0c\u4f46\u662f\u52a0\u4e0a\u4e86$cost$\u5c31\u6bd4\u8f83\u96be\u53d7\u4e86\u3002\n\n\u8fd8\u662f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u3002\n\n\u7ebf\u6bb5\u6811\u4e0a\u80af\u5b9a\u8981\u653e\u4e0a$f[k][j-1]$\uff0c\u4e0d\u5fc5\u591a\u8bf4\u3002\n\n\u5b9a\u4e49$pre[x],nxt[x]$\u5206\u522b\u8868\u793a\u524d\u9762\u7b2c\u4e00\u4e2a\u80fd\u8986\u76d6$x$\u7684\u57fa\u7ad9\u4f4d\u7f6e\u548c\u540e\u9762\u7b2c\u4e00\u4e2a\u4e0d\u80fd\u8986\u76d6$x$\u7684\u57fa\u7ad9\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u7528\u4e8c\u5206\u67e5\u627e\u5b9e\u73b0\u3002\n\n\u5f53\u4e00\u4e2a\u6751\u5e84\u518d\u4e5f\u65e0\u6cd5\u88ab\u540e\u9762\u7684\u57fa\u7ad9\u8986\u76d6\u65f6\uff0c\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4e0d\u9009$[pre[x],nxt[x]]$\u4e4b\u95f4\u7684\u6751\u5e84\u5c31\u5fc5\u987b\u652f\u4ed8\u7f5a\u6b3e\u4e86\uff0c\u6240\u4ee5\u8fd9\u4e4b\u540e\u7684\u57fa\u7ad9\u5efa\u8bbe\u65f6\uff0c\u5c31\u5e94\u5f53\u5728$[1,pre[x]-1]$\u4e0a\u52a0\u4e0a$w[x]$\u3002\n\n\u8fd9\u8868\u793a$x$\u65e0\u6cd5\u5728\u4e0d\u9009$[pre[x],nxt[x]]$\u65f6\uff0c\u5373\u53ea\u80fd\u5728$[1,pre[x]-1]$\u548c$[nxt[x]+1,n]$\u4e0a\u9009\u62e9\u65f6\uff0c\u5fc5\u987b\u652f\u4ed8\u7f5a\u6b3e\u2014\u2014\u8fd9~~\u5b8c\u7f8e\u5730~~\u4e0e\u6211\u4eec\u60f3\u8981\u8fbe\u6210\u7684\u6548\u679c\u76f8\u4e00\u81f4\u3002\n\n\u4ee5\u4e0a\u79f0\u4e3a\u64cd\u4f5c$A$\u3002\n\n\u5f53\u6211\u4eec\u904d\u5386\u5230\u70b9$i$\u65f6\uff0c\u5c31\u5e94\u5f53\u5bf9\u4ee5$i$\u4e3a$nxt[x]$\u7684$x$\u8fdb\u884c\u64cd\u4f5c$A$\uff0c\u800c\u4ee5$i$\u4e3a$nxt[x]$\u7684$x$\u53ef\u4ee5\u7528$vector$\u5b58\u50a8\u3002\n\n\u800c\u5f53$j=1$\u65f6\uff0c\u6211\u4eec\u6ca1\u6709$f[k][j-1]$\u53ef\u4f9b\u9009\u62e9\uff0c\u5e94\u5f53\u5355\u72ec\u5904\u7406\u3002\n\n\u7a7a\u95f4\u65b9\u9762\uff0c\u8f6c\u79fb\u65f6\u4f7f\u7528\u7684\u90fd\u662f$f[k][j-1]$\uff0c\u53ef\u4ee5\u4f18\u5316\u6389\u7b2c\u4e8c\u7ef4\u3002\n\n\u6700\u540e\uff0c\u5b9e\u9645\u4e0a\u7684\u8f6c\u79fb\u65b9\u7a0b\u5c31\u6210\u4e86\uff1a\n\n$f[i]=query(1,1,n,1,i-1)+c[i]$\n\n$query$\u91cc\u9762\u67e5\u8be2\u7684\uff0c\u81ea\u7136\u662f$f[k][j-1]+cost(k,i)$\u7684\u6700\u5c0f\u503c\u4e86\u3002\n\n\u6700\u540e\uff0c\u6bcf\u6b21\u8fdb\u884c\u4e0b\u4e00\u6b21\uff0c\u5373\u4ece$j$\u5230\u679a\u4e3e$j+1$\u662f\uff0c\u90fd\u8981\u91cd\u5efa\u7ebf\u6bb5\u6811\uff0c\u628a\u5e8f\u5217\u8d4b\u503c\u4e3a$f[i]$\u3002\n\n------------\n\n\u4ee5\u4e0b\u4e3a\u4ee3\u7801\uff0c~~\u81ea\u8ba4\u4e3a~~\u80fd\u89e3\u91ca\u5176\u4ed6\u9898\u89e3\u91cc\u6ca1\u6709\u89e3\u91ca\u7684\u4e00\u4e0b\u7ec6\u8282\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\n#define int long long\n#define inf (1ll<<62)\n#define chk_digit(c) (c>='0'&&c<='9')\ninline int read() {\n\treg int x=0,f=1;reg char c=getchar();\n\twhile(!chk_digit(c)) { if(c=='-') f=-1;c=getchar(); }\n\twhile(chk_digit(c)) x=x*10+c-'0',c=getchar();\n\treturn x*f;\n} \nint n,k,d[20002],w[20002],c[20002],s[20002],h[20002],f[20002],tim,l[20002],r[20002],pre[20002],nxt[20002],cnt,ans=inf;\nvector<int> p[20002];//p[i]\u8868\u793a\u4ee5i\u4e3a\u6700\u540e\u4e00\u4e2a\u53ef\u8986\u76d6\u7684\u57fa\u7ad9\u7684\u6751\u5e84\u7684\u96c6\u5408 \nstruct node{ int minn,tag; }tr[20005<<2];\ninline int mymin(int x,int y) { return x>=y?y:x; } \n#define mid (al+ar>>1)\n#define lc rt<<1,al,mid\n#define rc rt<<1|1,mid+1,ar\ninline void pushup(int rt) { tr[rt].minn=mymin(tr[rt<<1].minn,tr[rt<<1|1].minn); } \ninline void pushdown(int rt,int al,int ar) { tr[rt<<1].minn+=tr[rt].tag,tr[rt<<1|1].minn+=tr[rt].tag,tr[rt<<1].tag+=tr[rt].tag,tr[rt<<1|1].tag+=tr[rt].tag,tr[rt].tag=0; }\ninline void rebuild(int rt,int al,int ar) {\n\tif(al==ar) { tr[rt].minn=f[al],tr[rt].tag=0;return; }\n\tif(tr[rt].tag) pushdown(rt,al,ar);\n\trebuild(lc),rebuild(rc),pushup(rt);\n}\ninline void update(int rt,int al,int ar,int ql,int qr,int val) {\n\tif(al>qr||ar<ql) return;\n\tif(al>=ql&&ar<=qr) { tr[rt].minn+=val,tr[rt].tag+=val;return; }\n\tif(tr[rt].tag) pushdown(rt,al,ar);\n\tupdate(lc,ql,qr,val),update(rc,ql,qr,val),pushup(rt);\n}\ninline int query(int rt,int al,int ar,int ql,int qr) {\n\t\n\tif(al>qr||ar<ql) return inf;\n\tif(al>=ql&&ar<=qr) { return tr[rt].minn; }\n\tif(tr[rt].tag) pushdown(rt,al,ar);\n\tint x=mymin(query(lc,ql,qr),query(rc,ql,qr));\n\treturn x;\n}//\u7ebf\u6bb5\u6811 \nsigned main() {\n\tn=read(),k=read();\n\tfor(reg int i=2;i<=n;++i) d[i]=read();d[1]=0;\n\tfor(reg int i=1;i<=n;++i) c[i]=read();\n\tfor(reg int i=1;i<=n;++i) s[i]=read(),l[i]=d[i]-s[i],r[i]=d[i]+s[i];//l[i]\u8868\u793a\u8981\u60f3\u8986\u76d6\u5230i\uff0c\u57fa\u7ad9\u7684\u5de6\u4fa7\u6700\u8fdc\u4f4d\u7f6e r[i]\u8868\u793a\u8981\u60f3\u8986\u76d6\u5230i\uff0c\u57fa\u7ad9\u7684\u53f3\u4fa7\u6700\u8fdc\u4f4d\u7f6e \n\tfor(reg int i=1;i<=n;++i) w[i]=read(); \n\t++n,++k,d[n]=w[n]=inf,l[n]=r[n]=d[n];\n\t/*\n\t\t\u8fd9\u91cc\u89e3\u91ca\u4e0b\u4e3a\u4ec0\u4e48\u8981++n,++k\n\t\t++n\u662f\u4e3a\u4e86\u65b9\u4fbf\u5bf9f[1->n-1][k-1]\u8fdb\u884c\u201c\u603b\u7ed3\u201d\uff0c\u56e0\u4e3an\u5904\u5efa\u57fa\u7ad9\u662f\u4e0d\u8017\u8d39\u91d1\u94b1\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cf[n]\u6700\u540e\u7684\u53d6\u503c\u5b9e\u9645\u4e0a\u662f\u4e0a\u4e00\u4e2ak\u4e0b\u7684\u6700\u5c0f\u82b1\u8d39\n\t\t++k\u662f\u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u63d0\u5230\u7684f[n]\u6307k-1\u65f6\u7684\u6700\u5c0f\u503c\u7684\u95ee\u9898\uff0c++k\u5c31\u53ef\u4ee5\u5f97\u5230k\u5904\u7684\u6700\u5c0f\u503c \n\t*/\n\tfor(reg int i=1;i<=n;++i) pre[i]=lower_bound(d+1,d+n+1,l[i])-d,nxt[i]=upper_bound(d+1,d+n+1,r[i])-d-1,p[nxt[i]].push_back(i);//pre \u8868\u793a\u524d\u9762\u7b2c\u4e00\u4e2a\u80fd\u8986\u76d6i\u7684\u57fa\u7ad9 nxt\u8868\u793a\u540e\u9762\u6700\u540e\u4e00\u4e2a\u80fd\u8986\u76d6i\u7684\u57fa\u7ad9 \n\tint sum=0;\n    //k=1\u9636\u6bb5\n\tfor(reg int i=1;i<=n;++i) {//\u72b6\u6001\n\t\tf[i]=sum+c[i];//\u51b3\u7b56\n\t\tint siz=p[i].size();\n\t\tfor(reg int j=0;j<siz;++j) sum+=w[p[i][j]];//\u66f4\u65b0cost \n\t}\n\tans=f[n];\n\tfor(reg int t=2;t<=k;++t) {//\u9636\u6bb5\n\t\trebuild(1,1,n);\n\t\tfor(reg int i=1;i<=n;++i) {  //\u72b6\u6001\n\t\t\tif(t!=k||i==n) f[i]=query(1,1,n,1,i-1)+c[i]/*\u51b3\u7b56*/;//\u5728t=k\u5904\uff0c\u6ca1\u5fc5\u8981\u5bf9\u666e\u901a\u7684\u70b9\u7ee7\u7eed\u6c42\u503c\uff0c\u53ea\u9700\u603b\u7ed3t=k-1\u65f6\u7684\u6700\u5c0f\u503c\uff0c\u4f46\u8fd8\u9700\u8981\u7ef4\u62a4cost \n\t\t\tint siz=p[i].size();\n\t\t\tfor(reg int j=0;j<siz;++j) update(1,1,n,1,pre[p[i][j]]-1,w[p[i][j]]);//\u66f4\u65b0cost \n\t\t}\n\t\tans=mymin(ans,f[n]);\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n```\n",
        "postTime": 1586868488,
        "uid": 134640,
        "name": "zsaskk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "~~\u611f\u89c9\u6ca1\u6709\u9ed1\u9898\u7684\u96be\u5ea6\u5427.......~~\n\n\u6211\u4eec\u9996\u5148\u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 DP\uff0c\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u60f3\u6cd5\u5c31\u662f\u8ba9 $dp_{i,j}$ \u8868\u793a\u524d $i$ \u4e2a\u4f4d\u7f6e\uff0c\u653e\u4e86 $j$ \u4e2a\u57fa\u7ad9\uff0c\u8865\u507f\u4ec5\u8003\u8651\u4e0b\u6807 $[1,i]$ \u4e2d\u7684\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u3002\n\n\u8fd9\u6837\u6211\u4eec\u518d\u4ece $i'$ \u8f6c\u79fb\u5230 $i$ \u7684\u65f6\u5019\uff0c\u518d\u7edf\u8ba1\u4e0b\u6807\u5728 $[i'+1,i-1]$ \u4e2d\u7684\u70b9\u7684\u8865\u507f\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u96be\u5217\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$\ndp_{i,j}=\\min_{1\\le i'<i}\\{dp_{i',j-1}+\\operatorname{cost}(i'+1)\\}+c_i\n$$\n\n\u5176\u4e2d $\\operatorname{cost}(i'+1)$ \u8868\u793a\u5728\u4e0b\u6807\u5728 $[i'+1,i-1]$ \u4e2d\u7684\u70b9\u9700\u8981\u652f\u4ed8\u7684\u8865\u507f\u548c\u3002\n\n\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u66b4\u529b $O(n)$ \u6c42\u89e3 $\\operatorname{cost}$ \u7684\u8bdd\uff0c\u603b\u7684\u590d\u6742\u5ea6\u662f $O(n^2k)$ \u7684\uff0c\u65e0\u6cd5\u901a\u8fc7\u3002\n\n\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u8f6c\u79fb\u7684\u74f6\u9888\u662f\u5728\u6c42\u89e3 $\\operatorname{cost}$ \u4e0a\u7684\uff0c\u6211\u4eec\u4e0d\u59a8\u5c06\u5176\u548c $dp_{i',j-1}$ \u4e00\u8d77\u770b\u5f85\uff0c\u518d\u91c7\u7528\u67d0\u79cd\u65b9\u6cd5\u7684\u5728\u8f6c\u79fb\u7684\u8fc7\u7a0b\u4e2d\u52a8\u6001\u7ef4\u62a4\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u4ee4\u6700\u5de6\u8fb9\uff08$dis$ \u503c\u6700\u5c0f\u7684\uff09\u80fd\u591f\u8986\u76d6\u5230 $i$ \u70b9\u7684\u57fa\u7ad9\u4f4d\u7f6e\u4e3a $L_i$\uff0c\u540c\u7406\u6700\u53f3\u8fb9\uff08$dis$ \u503c\u6700\u5927\u7684\uff09\u80fd\u591f\u8986\u76d6\u5230\u70b9 $i$ \u7684\u57fa\u7ad9\u4f4d\u7f6e\u4e3a $R_i$\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u5728\u4e0b\u6807\u5728 $[L_i,R_i]$ \u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\u653e\u7f6e\u4e86\u57fa\u7ad9\uff0c\u70b9 $i$ \u5c06\u88ab\u8986\u76d6\uff0c\u4e0d\u4f1a\u4ea7\u751f\u8865\u507f\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a $L_i,R_i$\uff0c\u5728\u4ec0\u4e48\u65f6\u5019\u4ed6\u4f1a\u5bf9 $dp_{i',j-1}+\\operatorname{cost}(i'+1)$ \u7684\u503c\u4ea7\u751f\u8d21\u732e\u5462\uff1f\u4e00\u5b9a\u662f\u5f53 $[L_i,R_i]$ \u8fd9\u4e2a\u533a\u95f4\u88ab $[i'+1,i-1]$ \u8fd9\u4e2a\u533a\u95f4\u5305\u542b\u7684\u65f6\u5019\u4f1a\u4ea7\u751f\u8d21\u732e\u3002\u518d\u8fdb\u4e00\u6b65\uff0c\u5f53\u5bf9 $[R_i+1,n]$ \u4e2d\u7684 $i$ \u8fdb\u884c\u8f6c\u79fb\u65f6\uff0c\u4f1a\u5bf9 $[1,L_i-1]$ \u4e2d\u7684 $i'$ \u4ea7\u751f\u5f71\u54cd\u3002\n\n\u7531\u4e8e\u6211\u4eec\u662f\u987a\u5e8f\u679a\u4e3e $i$\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728 $i=R_i$ \u5b8c\u6210\u8f6c\u79fb\u4ee5\u540e\uff0c\u5c06 $[1,L_i-1]$ \u4e2d\u6240\u6709 $i'$ \u7684 $\\operatorname{cost}$ \u52a0\u4e0a $W_i$ \u5373\u53ef\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u52a8\u6001\u7ef4\u62a4\u4e86 $\\operatorname{cost}$ \u7684\u503c\u3002\n\n\u6211\u4eec\u9700\u8981\u533a\u95f4\u52a0\u3001\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u6700\u540e\u7b54\u6848\u5e76\u4e0d\u662f $dp_{n,k}$\uff0c\u800c\u5e94\u8be5\u662f $\\min_{1\\le i\\le n}dp_{i,k}+\\operatorname{cost}(i)$\u3002\n\n\u603b\u7684\u590d\u6742\u5ea6 $O(nk\\log n)$\u3002\n\ncode\uff08\u9700\u8981 `c++11`\uff09:\n\n```cpp\n\n// Problem: P2605 [ZJOI2010]\u57fa\u7ad9\u9009\u5740\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P2605\n// Memory Limit: 125 MB\n// Time Limit: 1000 ms ~ 5000 ms\n// Powered by CP Editor (https://github.com/cpeditor/cpeditor)\n\n//By luogu @longer_name\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n#define fi first\n#define se second\n#define rg register\n#define mp make_pair\n#define pb push_back\n#define pf push_front\n\n#define rep(i, s, t) for(rg int i = s; i <= t; i++)\n#define per(i, s, t) for(rg int i = t; i >= s; i--)\n#define debug(x) cerr << (#x) << \" = \" << (x) << \"\\n\"\n#define OK cerr << \"OK!\\n\"\n\n\nnamespace fastio {\n\tconst int SIZE = (1 << 20) + 1;\n\tchar ibuf[SIZE], *iS, *iT, obuf[SIZE],*oS = obuf, *oT = obuf + SIZE - 1;\n\tchar _st[55];\n\tint _qr = 0;\n\n\tinline char getchar() {\n\t\treturn (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS++) : *iS++);\n\t}\n\tinline void qread() {}\n\ttemplate <typename T1, typename... T2>\n\tinline void qread(T1 &x, T2 &...ls) {\n\t\tx = 0;\n\t\trg char ch = ' ';\n\t\trg int ps = 1;\n\t\twhile (!isdigit(ch) && ch != '-') ch = getchar();\n\t\tif (ch == '-') ps = -1, ch = getchar();\n\t\twhile (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n\t\tx *= ps;\n\t\tqread(ls...);\n\t}\n\n\tinline void flush() {\n\t\tfwrite(obuf, 1, oS - obuf, stdout);\n\t\toS = obuf;\n\t\treturn ;\n\t}\n\tinline void putchar(char _x) {\n\t\t*oS++ = _x;\n\t\tif(oS == oT) flush();\n\t}\n\ttemplate <typename T>\n\tinline void qwrite(T x) {\n\t\tif (x < 0) putchar('-'), x = -x;\n\t\tif (x < 10) return putchar('0' + x), void();\n\t\tqwrite(x / 10), putchar('0' + (x % 10));\n\t}\n\n\ttemplate <typename T>\n\tinline void qwrite(T x, char ch) {\n\t\tqwrite(x), putchar(ch);\n\t}\n}; //namespace fastio\n\nll qpow(ll x, ll p, ll mod) {\n\trg ll base = x, res = 1;\n\twhile(p) {\n\t\tif(p & 1) res = (res * base) % mod;\n\t\tbase = (base * base) % mod;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n\nconst int N = 2e4 + 5;\nconst int K = 105;\nconst ll inf = 1e18;\n\nll dp[N];\nll mi[N << 2], lazy[N << 2];\nll c[N], s[N], dis[N], w[N];\nint n, k;\nvector<pair<int, int> > st[N];\n\nvoid Lazy(int cur, int x) {\n\tmi[cur] += x;\n\tlazy[cur] += x;\n}\n\nvoid PushDown(int cur) {\n\tLazy(cur << 1, lazy[cur]);\n\tLazy(cur << 1 | 1, lazy[cur]);\n\tlazy[cur] = 0;\n}\n\nvoid PushUp(int cur) {\n\tmi[cur] = min(mi[cur << 1], mi[cur << 1 | 1]);\n}\n\nvoid Build(int cur, int l, int r) {\n\tlazy[cur] = 0;\n\tif(l == r) return mi[cur] = dp[l], void();\n\trg int mid = l + r >> 1;\n\tBuild(cur << 1, l, mid);\n\tBuild(cur << 1 | 1, mid + 1, r);\n\tPushUp(cur);\n}\n\nll Query(int cur, int ql, int qr, int l, int r) {\n\tif(ql <= l && r <= qr) return mi[cur];\n\tPushDown(cur);\n\trg int mid = l + r >> 1;\n\trg ll res = inf;\n\tif(ql <= mid) res = min(res, Query(cur << 1, ql, qr, l, mid));\n\tif(mid < qr) res = min(res, Query(cur << 1 | 1, ql, qr, mid + 1, r));\n\treturn res;\n}\n\nvoid Modify(int cur, int ql, int qr, int l, int r, ll x) {\n\tif(ql <= l && r <= qr) return Lazy(cur, x), void();\n\tPushDown(cur);\n\trg int mid = l + r >> 1;\n\tif(ql <= mid) Modify(cur << 1, ql, qr, l, mid, x);\n\tif(mid < qr) Modify(cur << 1 | 1, ql, qr, mid + 1, r, x);\n\tPushUp(cur);\n}\n\nint main() {\n\tfastio::qread(n, k);\n\trep(i, 2, n) fastio::qread(dis[i]);\n\tdis[0] = -inf, dis[n+1] = inf; //\u7ed9 lower_bound \u548c upper_bound \u7684\u8fb9\u754c\u8d4b\u503c\uff0c\u907f\u514d\u8d8a\u754c\n\trep(i, 1, n) fastio::qread(c[i]);\n\trep(i, 1, n) fastio::qread(s[i]);\n\trep(i, 1, n) fastio::qread(w[i]);\n\trep(i, 1, n) {\n\t\tint L = lower_bound(dis, dis + n + 1, dis[i] - s[i]) - dis;\n\t\tint R = upper_bound(dis, dis + n + 1, dis[i] + s[i]) - dis - 1;\n\t\tst[R].pb(mp(L, i)); //\u5c06 Ri \u6302\u5728 vector \u4e0a\n\t}\n\tll res = 0, ans = inf;\n\trep(i, 1, n) {\n\t\tdp[i] = res + c[i];\n\t\tfor(auto x : st[i]) res += w[x.se];\n\t}\n\tans = min(ans, dp[n]);\n\trep(j, 1, k) {\n\t\tBuild(1, 0, n);\n\t\trep(i, 1, n) {\n\t\t\tdp[i] = Query(1, 0, i-1, 0, n) + c[i];\n\t\t\tfor(auto x : st[i]) Modify(1, 0, x.fi - 1, 0, n, w[x.se]);\n\t\t}\n\t\tans = min(ans, Query(1, 0, n, 0, n));\n\t}\n\tfastio::qwrite(ans, '\\n');\n\tfastio::flush();\n\treturn 0;\n}\n```",
        "postTime": 1609077497,
        "uid": 95103,
        "name": "KellyFrog",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "\u7531$S,D$\u53ef\u6c42\u51fa$L(i)$\u8868\u793a\u6700\u5de6\u7684\u80fd\u8986\u76d6\u5230$i$\u7684\u57fa\u7ad9\uff0c$R(i)$\u8868\u793a\u6700\u53f3\u7684\u80fd\u8986\u76d6\u5230$i$\u7684\u57fa\u7ad9\uff0c\u663e\u7136\u53ef\u4ee5$\\mathcal O(n\\log n)$\u9884\u5904\u7406\u3002\u5982\u679c$[L(i),R(i)]$\u4e2d\u6ca1\u6709\u57fa\u7ad9\uff0c\u5219\u4f1a\u6709$w(i)$\u7684\u4ee3\u4ef7\u3002\n\n\u8003\u8651dp\u3002$f(i,k)$\u8868\u793a\u5728$[1,i]$\u5efa\u7acb\u4e86$k$\u4e2a\u57fa\u7ad9\u7684\u6700\u5c0f\u4ee3\u4ef7\uff08\u4e14$i$\u5fc5\u987b\u5efa\uff0c\u82e5\u4e0d\u5408\u6cd5\uff08\u5982$i<k$\uff09\u5219\u4e3aINF\uff09  \n\u679a\u4e3e\u524d\u4e00\u4e2a\u57fa\u7ad9\u6240\u5728\u4f4d\u7f6e$j$,\u5219\u6709\u8f6c\u79fb\uff1a\n$$f(i,k)=\\min_{j<i}\\{f(j,k-1)+\\sum_{j<L(p),R(p)<i}w(p)\\}$$\n\u76f4\u63a5\u66b4\u529b\u505a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(n^3k)$\uff0c\u9700\u8981\u4f18\u5316.  \n\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\uff0c\u4f46\u5bf9\u4f18\u5316\u65f6\u95f4\u6ca1\u4ec0\u4e48\u5b9e\u9645\u6548\u679c\u3002\n\n\u8003\u8651\u6c42\u51fa$R$\u540e\uff0c\u5728\u6bcf\u4e2a$i$\u4fdd\u5b58$Base(i)=\\{j|R(j)=i\\}$,\u663e\u7136$\\sum_i|Base(i)|=n$,\u53ef\u4ee5$\\mathcal O(n)$\u9884\u5904\u7406\u3002  \n\u8003\u8651\u5b8c$i$\u540e\uff0c\u8003\u8651$Base(i)$\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20$x$\uff0c\u5982\u679c\u5efa\u7684\u57fa\u7ad9$j<L(x)$,\u5219\u4f1a\u6709$w(x)$\u7684\u8d21\u732e\u3002\u8bb0$val(i,j,k)$\u8868\u793a\u5728$i$\u5efa\u7b2c$k$\u4e2a\u57fa\u7ad9\uff0c\u4e14\u7b2c$k-1$\u4e2a\u57fa\u7ad9\u662f$j$,\u5219$[j+1,i-1]$\u4e2d\u7684\u6ca1\u6709\u88ab\u4fe1\u53f7\u8986\u76d6\u7684\u57fa\u7ad9\u7684\u4ee3\u4ef7\u3002  \n\u90a3\u4e48\n$$val(i,j,k)=val(i-1,j,k)+\\sum_{x\\in Base(i),j<L(x)}w(x)$$\n$$f(i,k)=\\min_{j<i}\\{f(j,k-1)+cost(i,j,k)\\}$$\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5$\\mathcal O(n^2k)$\u505a\u4e86\uff0c\u8d34\u4e00\u4e0b\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\uff1a  \nPS\uff1a\u53ef\u4ee5\u5efa\u4e00\u4e2a\u865a\u70b9$n+1$,\u5e76\u5f3a\u5236\u5efa\u7acb\u57fa\u7ad9\uff0c\u5219\u7b54\u6848\u5c31\u662f$\\min_k\\{f(n+1,k)\\}$\n```cpp\nbool umin(ll& a,ll b)\n{\n\tif(b<a)return a=b,1;\n\treturn 0;\n}\n#define MAXN 50011\nll d[MAXN],c[MAXN],s[MAXN],w[MAXN],begin[MAXN];//begin[i]\u5c31\u662fL[i]\nll n,K;\nstd::vector<ll>base[MAXN];\nll f[MAXN],cost[MAXN];//cost[j]\u8868\u793af(j,k)+val(i,j,k)\nint main()\n{\n\tn=read(),K=read();\n\tfor(ll i=2;i<=n;++i)d[i]=read();\n\tfor(ll i=1;i<=n;++i)c[i]=read();\n\tfor(ll i=1;i<=n;++i)\n\t{\n\t\ts[i]=read();\n\t\tbegin[i]=std::lower_bound(d+1,d+n+1,d[i]-s[i])-d;\n\t\tll to=std::upper_bound(d+1,d+n+1,d[i]+s[i])-d-1;\n\t\tbase[to].push_back(i);//\u9884\u5904\u7406base\n\t}\n\tfor(ll i=1;i<=n;++i)w[i]=read();\n\t++n;++K;d[n]=w[n]=INF;//\u865a\u70b9\uff0c\u8ddd\u79bb\u4e3aINF\uff0c\u5efa\u7acb\u8d39\u7528\u4e3a0\uff0c\u4e0d\u5efa\u7684\u4ee3\u4ef7\u4e3aINF\uff0c\u6240\u4ee5\u4e00\u5b9a\u5efa\u7acb\n\t//dp\n\tll sum=0;\n\tfor(ll i=1;i<=n;++i)//\u5efa\u7acb\u7b2c\u4e00\u4e2a\u57fa\u7ad9\n\t{\n\t\tf[i]=sum+c[i];\n\t\tfor(std::vector<ll>::iterator it=base[i].begin();it!=base[i].end();++it)\n\t\t\tsum+=w[*it];\n\t}\n\tll ans=f[n];\n\tfor(ll k=2;k<=K;++k)//\u5efa\u7acb\u7b2c2,3,...k\u4e2a\u57fa\u7ad9\n\t{\n\t\tfor(ll i=1;i<=n;++i)cost[i]=f[i];//f(j,k)\n\t\tfor(ll i=1;i<=n;++i)\n\t\t{\n\t\t\tll minv=INF;\n\t\t\tfor(ll j=1;j<i;++j)umin(minv,cost[j]);\n\t\t\tf[i]=minv+c[i];//\u8f6c\u79fb\n\t\t\tfor(std::vector<ll>::iterator it=base[i].begin();it!=base[i].end();++it)\n\t\t\t{\n\t\t\t\tfor(ll j=1;j<begin[*it];++j)cost[j]+=w[*it];//\u66f4\u65b0val\n\t\t\t}\n\t\t}\n\t\tumin(ans,f[n]);\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n\u4ecd\u7136\u65e0\u6cd5AC\u3002\u4f46\u5176\u5b9e\u5230\u8fd9\u4e00\u6b65\uff0c\u6700\u7ec8\u7684\u6b63\u89e3\u5c31\u6bd4\u8f83\u663e\u7136\u3002  \n`for(ll j=1;j<i;++j)umin(minv,cost[j]);`\u5c31\u662f\u4e00\u4e2a\u533a\u95f4min\u7684\u67e5\u8be2\uff1b   \n`for(ll j=1;j<begin[*it];++j)cost[j]+=w[*it];`\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u52a0\u3002\n\n\u7528\u4e00\u4e2a\u533a\u95f4\u52a0\uff0c\u67e5\u8be2\u533a\u95f4min\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4$f(j,k-1)+val(i,j,k)$\u5373\u53ef\u5728$\\mathcal O(kn\\log n)$\u7684\u65f6\u95f4\u5185\u89e3\u51b3\u3002\n\n\u53e6\uff0c`for(ll i=1;i<=n;++i)cost[i]=f[i];`\u5bf9\u5e94\u7ebf\u6bb5\u6811\u7684\u5efa\u7acb\u64cd\u4f5c\u3002\n```cpp\nbool umin(ll& a,ll b)\n{\n\tif(b<a)return a=b,1;\n\treturn 0;\n}\n\n/**********/\n#define MAXN 50011\nll n,K;\nstruct Segment_Tree//\u533a\u95f4\u52a0\uff0c\u67e5\u8be2\u533a\u95f4min\u7684\u7ebf\u6bb5\u6811\n{\n\tstruct node\n\t{\n\t\tll minv,tag;\n\t}t[MAXN<<2|1];\n\t#define rt t[num]\n\t#define tl t[num<<1]\n\t#define tr t[num<<1|1]\n\tvoid pushup(un num)\n\t{\n\t\trt.minv=min(tl.minv,tr.minv);\n\t}\n\tvoid pushdown(un l,un r,un num)\n\t{\n\t\tif(!rt.tag)return;\n\t\tun mid=(l+r)>>1;\n\t\ttl.minv+=rt.tag,tl.tag+=rt.tag;\n\t\ttr.minv+=rt.tag,tr.tag+=rt.tag;\n\t\trt.tag=0;\n\t}\n\tvoid build(ll* a,un l=1,un r=n,un num=1)\n\t{\n\t\trt.tag=0;\n\t\tif(l==r)rt.minv=a[l];\n\t\telse\n\t\t{\n\t\t\tun mid=(l+r)>>1;\n\t\t\tbuild(a,l,mid,num<<1);build(a,mid+1,r,num<<1|1);\n\t\t\tpushup(num);\n\t\t}\n\t}\n\tvoid modify(un ql,un qr,ll val,un l=1,un r=n,un num=1)\n\t{\n\t\tif(ql<=l&&r<=qr)\n\t\t{\n\t\t\trt.minv+=val;\n\t\t\trt.tag+=val;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(l,r,num);\n\t\tun mid=(l+r)>>1;\n\t\tif(ql<=mid)modify(ql,qr,val,l,mid,num<<1);\n\t\tif(qr>mid)modify(ql,qr,val,mid+1,r,num<<1|1);\n\t\tpushup(num);\n\t}\n\tll Qmin(un ql,un qr,un l=1,un r=n,un num=1)\n\t{\n\t\tif(ql>qr)return INF;//\u533a\u95f4\u4e3a\u7a7a\u5219\u4e3aINF\n\t\tif(ql<=l&&r<=qr)return rt.minv;\n\t\tpushdown(l,r,num);\n\t\tun mid=(l+r)>>1;\n\t\tll ans=INF;\n\t\tif(ql<=mid)umin(ans,Qmin(ql,qr,l,mid,num<<1));\n\t\tif(qr>mid)umin(ans,Qmin(ql,qr,mid+1,r,num<<1|1));\n\t\treturn ans;\n\t}\n}sgt;\n\nll d[MAXN],c[MAXN],s[MAXN],w[MAXN],begin[MAXN];\nstd::vector<ll>base[MAXN];\nll f[MAXN],cost[MAXN];\nint main()\n{\n\tn=read(),K=read();\n\tfor(ll i=2;i<=n;++i)d[i]=read();\n\tfor(ll i=1;i<=n;++i)c[i]=read();\n\tfor(ll i=1;i<=n;++i)\n\t{\n\t\ts[i]=read();\n\t\tbegin[i]=std::lower_bound(d+1,d+n+1,d[i]-s[i])-d;\n\t\tll to=std::upper_bound(d+1,d+n+1,d[i]+s[i])-d-1;\n\t\tbase[to].push_back(i);\n\t}\n\tfor(ll i=1;i<=n;++i)w[i]=read();\n\t++n;++K;d[n]=w[n]=INF;\n\t//dp\n\tll sum=0;\n\tfor(ll i=1;i<=n;++i)\n\t{\n\t\tf[i]=sum+c[i];\n\t\tfor(std::vector<ll>::iterator it=base[i].begin();it!=base[i].end();++it)\n\t\t\tsum+=w[*it];\n\t}\n\tll ans=f[n];\n\tfor(ll k=2;k<=K;++k)\n\t{\n\t\tsgt.build(f);//f(j,k)\n\t\tfor(ll i=1;i<=n;++i)\n\t\t{\n\t\t\tf[i]=sgt.Qmin(1,i-1)+c[i];//\u6ce8\u610f\u5224\u65ad\u533a\u95f4\u662f\u5426\u4e3a\u7a7a\n\t\t\tfor(std::vector<ll>::iterator it=base[i].begin();it!=base[i].end();++it)\n\t\t\t{\n\t\t\t\tif(1<begin[*it])sgt.modify(1,begin[*it]-1,w[*it]);//\u533a\u95f4\u52a0\n\t\t\t}\n\t\t}\n\t\tumin(ans,f[n]);\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n\u4e3a\u4e86\u53ef\u8bfb\u6027\u6ca1\u6709\u5361\u5e38\uff0c\u4f46\u5b8c\u5168\u53ef\u4ee5AC\u3002",
        "postTime": 1582351057,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "## \u514d\u8d23\u58f0\u660e\uff0c\u542b\u501f\u9274\u6210\u5206\uff0c\u4e0d\u559c\u52ff\u55b7\n\n**\u9e23\u8c22\u4e8c\u697cdalao\u601d\u8def\uff0c\u548c\u4e00\u697c\u5927\u4f6c\u4e00\u53e5\u8bdd\u70b9\u9192\u68a6\u4e2d\u4eba**\n\n[\u9898\u9762](https://www.luogu.org/problem/P2605)\n\n**\u4e00\u53e5\u8bdd\u9898\u610f\uff0c$n$\u4e2a\u6751\u5b50\uff0c\u6700\u591a\u5efa$K$\u4e2a$B$\u7ad9\uff0c\u6bcf\u4e2a\u6751\u5b50\u6709\u4e00\u4e2a\u63a5\u53d7\u8303\u56f4\uff0c\u9893\u4e0d\u4e86$B$\u7ad9\u5c31\u8981\u53d1\u60a8\u7684\u6b3e\uff0c\u5efa$B$\u7ad9\u8981\u82b1\u94b1\u3002**\n\n\u4e00\u9053\u6570\u636e\u7ed3\u6784\u4f18\u5316Dp\u7684\u597d\u9898\u554a\u3002\n\n\u65e2\u7136\u662fDp\u4f18\u5316\uff0c\u6211\u4eec\u5c31\u4e00\u6b65\u4e00\u6b65\u7684\u6765\u3002\n\n\u6211\u4eec\u8bbe$dp_{i,j}$\u4ece$1$\u5f00\u59cb\u5230$i$\u4e3a\u5efa$j$\u4e2a$B$\u7ad9\u4e14$i$\u70b9\u5efa$B$\u7ad9\u7684\u6700\u5c0f\u8d39\u7528\n\n\u8bbe$Sum_{i,k}$\u4e3a$i$\u5230$j$\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u6751\u5b50\u7684\u7f5a\u6b3e\u548c\u3002\n\n\u65b9\u7a0b\uff1a$dp_{i,j} = max(dp_{k,j-1},Sum_{k,i})+C_i$\n\n\u590d\u6742\u5ea6\u4e3a$O(n^2k)$\u81f3\u4e8e\u90a3\u4e2a$Sum_{k,i}$\u8fd9\u4e1c\u897f\u60a8\u968f\u4fbf\u641e\uff0c\u60f3\u548b\u641e\u548b\u641e\u3002\n\n\u8fd9\u663e\u7136\u5927\u6570\u636e\u8dd1\u4e00\u8f88\u5b50\n\n**\u4f18\u5316**\n\n\u6211\u4eec\u5728\u601d\u8003\u8fc7\u4e4b\u540e\uff0c\u53d1\u73b0\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u6c42\u89e3\u4e0a\u9762\u90a3\u4e2a\u60f3\u548b\u641e\u548b\u641e\u7684\u4e1c\u897f\u3002\n\n\u6211\u4eec\u5148\u6c42\u51fa\u4e00\u4e2a\u6751\u5b50\u7684\u6781\u9650\u63a5\u6536\u8303\u56f4\uff0c\u8fd9\u4e1c\u897f\u80af\u5b9a\u6709\u7528\uff0c\u4e8c\u5206\u8f7b\u677e\u5904\u7406\u3002\n\n\u65e2\u7136\u662f\u6700\u503c\uff0c\u6211\u4eec\u5c31\u50cf$set$\u5355\u8c03\u961f\u5217\u7ebf\u6bb5\u6811\uff0c\u4e00\u5f00\u59cb\u6211\u662f\u60f3\u5230\u5355\u8c03\u961f\u4e0a\u53bb\u4e86\uff0c\u7136\u540e\u53d1\u73b0\uff0c\u5367\u69fd\u770b\u9519\u9898\u4e86\u3002\n\n\u6211\u4eec\u8003\u8651\u90a3\u4e9b\u8981\u7f5a\u6b3e\u7684\u5f71\u54cd\uff0c\u9996\u5148\u4ece1\u5230\u5de6\u8fb9\u754c-1\u7684\u8f6c\u79fb\u7684\u80af\u5b9a\u8986\u76d6\u4e0d\u5230\u5b83\u4e86\uff0c**\u5982\u679c$i$\u7684\u4e5f\u76d6\u4e0d\u5230\u5b83\u5c31\u8981\u7f5a\u6b3e\u4e86\u3002\u4e8e\u662f\u4e00\u4e2a\u6751\u5b50\u5bf9\u5176\u4e4b\u524d\u7684\u5f71\u54cd\u662f\u5728\u53f3\u7aef\u70b9\u4e0d\u9009\u65f6\u66f4\u65b0\u7684**\u3002\n\n\u4e8e\u662f**\u6211\u4eec\u5c06\u6240\u6709\u53f3\u7aef\u70b9\u4e3a$i$\u7684\u70b9\u6302\u5728\u4e00\u4e2a\u8fb9\u8868\u4e0a**\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u5728\u4e0d\u9009\u70b9$i$\u65f6\u524d\u9762\u7684\u5f71\u54cd\u3002\n\n\u6211\u4eec\u5728**\u66f4\u65b0\u4e0d\u9009$i$\u70b9\u4e4b\u524d\u5148\u66f4\u65b0$f_i$\u7684\u503c\uff0c\u4e4b\u540e\u6211\u4eec\u53bb\u904d\u5386\u5b83\u7684\u8fb9\u8868\uff0c\u5bf9\u6bcf\u4e2a\u8fb9\u8868\u4e0a\u503c\u7684\u5de6\u7aef\u70b9\u4e4b\u524d\u7684\u533a\u95f4\u52a0\u4e0a\u6751\u5b50$i$\u7684\u7f5a\u6b3e**\u3002\n\n\u611f\u6027\u7684\u7406\u89e3\u4e00\u4e0b\u5c31\u662f\uff0c$f_i$\u5c31\u76f8\u5f53\u4e8e$i$\u5230$j$\u4e2d\u95f4\u4e0d\u9009\u7167\u6210\u7684\u5f71\u54cd\u52a0\u4e0a$f_j$\n\n\u5728\u914d\u5408\u8fd9\u4ee3\u7801\u5e94\u8be5\u53ef\u4ee5\u660e\u767d$90%$\u7684\uff0c\u7ec6\u8282\u518d\u7422\u78e8\u4e00\u4e0b\u5e94\u8be5\u8fd8\u662f\u53ef\u4ee5\u5b8c\u5168\u6d88\u5316\u7684\u3002\n\n***Code***\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <map>\n#include <set>\n#include <vector>\n#define int long long\nusing namespace std;\nint read(){\n\tint w=1,x=0,ch=getchar();\n\tfor(;ch<'0'||ch>'9';ch=getchar())if(ch=='-')w=-1;\n\tfor(;ch>='0'&&ch<='9';ch=getchar())x=x*10+ch-'0';\n\treturn x*w;\n}\nconst int MAXN = (int)2e4+10;\nint n,m,D[MAXN],C[MAXN],S[MAXN],W[MAXN],f[MAXN];\nint t[MAXN<<2],tag[MAXN<<2];\n#define lson rt<<1\n#define rson rt<<1|1\nvoid Add(const int &rt,const int &val){\n\tt[rt] += val;\n\ttag[rt] += val;\n}\nvoid pushdown(const int &rt){\n\tif(!tag[rt])return;\n\tAdd(lson,tag[rt]),Add(rson,tag[rt]);\n\ttag[rt] = 0;\n}\nvoid updata(const int &rt){\n\tt[rt] = min(t[lson],t[rson]);\n}\nvoid build(const int &rt,const int &l,const int &r){\n\ttag[rt] = 0;\n\tif(l==r){\n\t\tt[rt] = f[l];\n\t\treturn;\n\t}\n\tint mid = l+r >> 1;\n\tbuild(lson,l,mid);\n\tbuild(rson,mid+1,r);\n\tupdata(rt);\n}\nvoid modify(const int &rt,const int &l,const int &r,const int &x,const int &y,const int &val){\n\tif(x<=l&&r<=y){\n\t\tAdd(rt,val);\n\t\treturn;\n\t}\n\tpushdown(rt);\n\tint mid = l+r >> 1;\n\tif(x<=mid)modify(lson,l,mid,x,y,val);\n\tif(y>mid)modify(rson,mid+1,r,x,y,val);\n\tupdata(rt);\n}\nint query(const int &rt,const int &l,const int &r,const int &x,const int &y){\n\tif(x<=l&&r<=y){\n\t\treturn t[rt];\n\t}\n\tpushdown(rt);\n\tint mid = l+r >> 1,ans = 0x3f3f3f3f;\n\tif(x<=mid)ans = min(ans,query(lson,l,mid,x,y));\n\tif(y>mid)ans = min(ans,query(rson,mid+1,r,x,y));\n\treturn ans;\n}\nstruct Edge{\n\tint from,to,nxt;\n\tEdge(const int &a,const int &b,const int &c){\n\t\tfrom = a;\n\t\tto = b;\n\t\tnxt = c;\n\t}Edge(){\n\t}\n}E[MAXN];\nint head[MAXN],tot;\ninline void Add_Edge(const int &x,const int &y){\n\tE[++tot] = Edge(x,y,head[x]),head[x] = tot;\n}\nint st[MAXN],ed[MAXN];\nsigned main(){\n\tn = read(),m = read()+1;\n\tD[1] = 0;\n\tfor(int i=2;i<=n;i++)D[i] = read();\n\tfor(int i=1;i<=n;i++)C[i] = read();\n\tfor(int i=1;i<=n;i++)S[i] = read();\n\tfor(int i=1;i<=n;i++)W[i] = read();\n\t++n;D[n] = W[n] = 0x3f3f3f3f;\n\tfor(int i=1;i<=n;i++){\n\t\tst[i] = lower_bound(D+1,D+1+n,D[i]-S[i]) - D;\n\t\ted[i] = upper_bound(D+1,D+1+n,D[i]+S[i]) - D - 1;\n\t\tAdd_Edge(ed[i],i);\n\t}\n\tint Ans = 0x3f3f3f3f;\n\tfor(int j=1;j<=m;j++){\n\t\tif(j==1){\n\t\t\tint res = 0;\n\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tf[i] = res + C[i];\n\t\t\t\tfor(int k = head[i];k;k=E[k].nxt){\n\t\t\t\t\tres += W[E[k].to];\n\t\t\t\t}\n\t\t\t}\n\t\t\tAns = f[n];\n\t\t}else {\n\t\t\tbuild(1,1,n);\n\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tf[i] = (i>(j-1)?query(1,1,n,j-1,i-1):0)+C[i];\n\t\t\t\tfor(int k = head[i];k;k=E[k].nxt){\n\t\t\t\t\tif(st[E[k].to]>1)modify(1,1,n,1,st[E[k].to]-1,W[E[k].to]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tAns = min(Ans,f[n]);\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",Ans);\n\treturn 0;\n}\n```\n***\u898b\u3066\u304f\u308c\u3066\u3042\u308a\u304c\u3068\u3046***",
        "postTime": 1569332239,
        "uid": 165030,
        "name": "Sweetie_Liu",
        "ccfLevel": 6,
        "title": "P2605 [ZJOI2010]\u57fa\u7ad9\u9009\u5740"
    },
    {
        "content": "## \u5b89\u5229\u535a\u5ba2$\\Longrightarrow\\Longrightarrow\\Longrightarrow$[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/y2823774827y/p/10274063.html)\n\n\u7b80\u5316\u9898\u76ee\uff1a1~n\u4e2a\u6751\u5e84\uff0c\u6bcf\u4e2a\u6751\u5e84\u6709\u8303\u56f4\uff0c\u8981\u6c42\u8303\u56f4\u5185\u6709\u6751\u5e84\u88ab\u9009\uff08\u4e0d\u8d85\u8fc7$k$\u4e2a\uff09\uff0c\u5426\u5219\u88ab\u7f5a\u6b3e\uff0c\u9009\u6751\u5e84\u6709\u4e00\u5b9a\u82b1\u8d39\uff0c\u6c42\u6700\u5c0f\u603b\u82b1\u8d39\n\n\n\u8bb2\u4e00\u8bb2\u5fc3\u8def\u5386\u7a0b\u5427\uff0c\u5e94\u8be5\u4f1a\u597d\u7406\u89e3\u7684\uff1a\n\n**\u6734\u7d20**\n$dp_{i,j}$\u7b2c$j$\u4e2a\u88ab\u9009\u7684\u6751\u5e84\u4e3a$i$\u7684\u6700\u5c0f\u82b1\u8d39\uff1a$dp_{i,k}=min\\{dp_{j,k-1}+cost_{i,j}\\}+w_i$\n\n\u679a\u4e3e$k$(\u51c6\u5907\u9009\u7b2c$k$\u4e2a)\uff0c$i$(\u5177\u4f53\u9009$i$)\uff0c$j$(\u4e0a\u4e00\u4e2a\u88ab\u9009\u7684)\uff0c\u663e\u7136$cost_{i,j}$\u9884\u5904\u7406$O(n^2)$\uff0c\u679a\u4e3e\u65b9\u7a0b$O(n^2k)$\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5ea6\u4f30\u4e3a$O(n^2k)$\n\n**\u4f18\u5316**\n\u4e60\u60ef\u5730\uff0c\u53ea\u51fa\u73b0$k$\u4e0e$k-1$\uff0c\u5012\u5e8f\u679a\u4e3e$j$\uff1a$dp_{i}=min\\{dp_{j}+cost_{i,j}\\}+w_i$\uff0c\u8fd8\u53ea\u662f\u4f18\u5316\u4e86\u70b9\u7a7a\u95f4\u800c\u5df2\n\n\u6700\u5916\u5c42$k$\u5176\u5b9e\u5dee\u4e0d\u591a\u53ef\u4ee5\u4e0d\u7ba1\u4e86$(k<=100)$\uff0c\u4e3b\u8981\u662f\u4f18\u5316\u521a\u624d\u7684\u8fd9\u4e2a\u65b9\u7a0b\n\n\u65e0\u540e\u6548\u6027\uff0c\u987a\u5e8f\u4e5f\u663e\u7136$(j<i)$\uff0c\u8003\u8651\u8fd9\u90e8\u5206$min\\{dp_{j}+cost_{i,j}\\}$\uff0c\u6700\u503c\u6709\u5173\u7684\uff08$BIT$/\u7ebf\u6bb5\u6811\uff0c\u5355\u8c03\u961f\u5217\uff0c\u659c\u7387\u4f18\u5316......\uff09\n\n\u6709\u54ea\u4e9b\u76f8\u540c\u7684\u90e8\u5206\u53ef\u4ee5\u5229\u7528\u5462\uff1f\n\n\u5047\u8bbe\u8fd9\u6b21\u662f\u9009$x$\uff0c\u4e0a\u4e00\u6b21\u9009$i$\uff0c\u90a3$i$\u524d\u9762\u7684\u6211\u4eec\u6682\u65f6\u4e0d\u7ba1\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86\uff0c\u6211\u4eec\u53ea\u7528\u8003\u8651$i$~$k$\u4e2d\u95f4\u7684\u8d54\u6b3e\n\n\u5bf9\u4e8e\u4e0a\u4e00\u6b21\u9009\u7684\u4f4d\u7f6e$i$\u548c$j$\uff0c\u5982\u679c$i<j$\uff0c\u4e0a\u4e00\u4e2a\u9009$i$\u7684\u8d54\u6b3e\u80af\u5b9a\u5305\u62ec\u4e86$\\longrightarrow$\u4e0a\u4e00\u4e2a\u9009$j$\u7684\u8d54\u6b3e\n\n\u7406\u89e3\uff1a$i$~$x$\u6bd4$j$~$x$\u4e2d\u95f4\u7684\u7a7a\u533a\u6bd4\u8f83\u591a\n\n\u5df2\u7ecf\u63a5\u8fd1\u4e86\u6211\u4eec\u7684\u6700\u7ec8\u601d\u8def\uff0c\u5047\u8bbe\u6211\u4eec\u8fd9\u6b21\u5728\u505a\u7b2c$k$\u4e2a\u9009$i$\uff0c\u8bbe\u4ee5$i$\u4e3a\u53f3\u7aef\u70b9\u7684\u6751\u5e84\u4e3a$x$\uff0c\u5176\u5de6\u7aef\u70b9\u4e3a$L$\uff0c\u90a3\u6211\u4eec\n\n\u5c06$1$~$L-1$\u90fd\u52a0\u4e0a$pay_{x}$\u6751\u5e84$x$\u7684\u8d54\u6b3e\uff1a\u9009$1$~$L-1$\u7684\u6751\u5e84\u5c31\u4e0d\u7b26\u5408$x$\n\n\u8bf6\uff01\uff01\u533a\u95f4\u67e5\u8be2\u6700\u5c0f\u503c\u53ca\u4f4d\u7f6e\uff0c\u533a\u95f4\u4fee\u6539\u597d\u50cf\u7ebf\u6bb5\u6811\u505a\u4f1a\u6bd4\u8f83\u7b80\u5355\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u6700\u7ec8\u89e3\u6cd5\uff1a\u6700\u5916\u5c42\u679a\u4e3e$k$(\u9009\u7b2ck\u4e2a)\uff0c\u7b2c\u4e8c\u5c42\u679a\u4e3e\u9009$i$(\u9009\u7b2ci\u4e2a\u6751\u5e84)\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u7ef4\u62a4\u9009\u6bcf\u4e2a\u70b9\u7684\u8d54\u6b3e\u53ca\u533a\u95f4\u6700\u5c0f\u503c\n\n### [Code](https://www.cnblogs.com/y2823774827y/p/10274063.html)",
        "postTime": 1547593935,
        "uid": 88804,
        "name": "y2823774827y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "\u679c\u7136\uff0c\u6211\u7701\u5341\u5e74\u524d\u7684\u9898\u76ee\u653e\u73b0\u5728\u8fd8\u662f\u5f88\u96be\uff0c\u50cf\u6211\u8fd9\u79cd**\u849f\u84bb**\u8981\u770b\u8001\u534a\u5929\u9898\u89e3\u624d\u80fd\u61c2\uff0c\u4e0d\u8fc7\u9898\u89e3\u91cc\u5927\u90e8\u5206\u8bed\u8a00\u90fd\u96f7\u540c\uff0c\u8fd9\u7bc7\u5c31\u6362\u79cd\u8bf4\u6cd5\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u8fd9\u9053\u826f\u5fc3\u597d\u9898\u5427\uff0c\u5982\u679c\u6ca1\u6709\u6709\u5730\u65b9\u6ca1\u6709\u770b\u660e\u767d\u7684\u6b22\u8fce\u79c1\u4fe1\u6216\u8005\u8bc4\u8bba\u533a\u7559\u8a00\n\n------------\n\n\n\u9996\u5148\uff0c\u66b4\u529b$DP$\u8fd8\u662f\u6bd4\u8f83\u597d\u60f3\u5230\u7684\uff1a\n\n$\\quad \\Large f_{i,j}=f_{k,j-1}+cost_{k+1,i}$\n\n\u5176\u4e2d\uff1a\n\n- $\\large f_{i,j}$ \uff1a \u524d$i$\u4e2a\u6751\u5efa\u4e86$j$\u4e2a\u57fa\u7ad9\uff0c\u5176\u4e2d\u7b2c$i$\u4e2a\u6751\u5fc5\u5efa\uff0c\u6240\u9700\u7684\u6700\u5c0f\u8d39\u7528\n\n\n- $\\large cost_{k,j}$: $\\large \\sum\\limits_{i=k}^j w_{i}[d_{k}<d_{i}+s_{i}<d_{j}]$\uff0c\u5373\u4e2d\u95f4\u9700\u8981\u8865\u507f\u6751\u5b50\u7684\u8d39\u7528\n\n\u6613\u53d1\u73b0\uff0c$j$\u7684\u90a3\u4e00\u5c42\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u751a\u81f3\u53ef\u4ee5**\u76f4\u63a5\u53bb\u6389**\uff0c\u8fd9\u6837\u7a7a\u95f4\u5c31\u7701\u4e0b\u6765\u7684\uff0c\u4e0d\u8fc7\u65f6\u95f4\u8fd8\u662f\u6ca1\u53d8\uff0c\u7a33\u5b9a$T$\u98de\n\n\u8fd9\u4e2a\u65b9\u7a0b\u5df2\u7ecf\u5f88\u96be\u518d\u5316\u7b80\u4e86\uff0c\u6211\u4eec\u4e0d\u59a8\u6362\u4e2a\u89d2\u5ea6\u6765\u601d\u8003\u95ee\u9898\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6751\u5e84\u6765\u8bf4\uff0c**\u5982\u679c\u8fd9\u4e2a\u6751\u5e84\u5b58\u5728\u8d21\u732e\uff0c\u5373$d_{i}-s_{i}$\u5230$d_{i}+s_{i}$\u4e4b\u95f4\u90fd\u6ca1\u6709\u5efa\u57fa\u7ad9\uff0c\u663e\u7136\u8fd9\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u4e0d\u59a8\u8bbe$S_{i}$\u548c$T_{i}$\u4e3a\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u7aef**\n\n\u524d\u9762\u90fd\u4e0d\u96be\uff0c\u4e0b\u9762\u8fd9\u4e00\u6b65\u662f**\u6700\u6700\u6700\u5173\u952e\u7684\u4e00\u6b65**\uff0c\u597d\u597d\u6d88\u5316\u4e00\u4e0b\u3002\n\n\u8003\u8651**\u5f53\u524d\u679a\u4e3e\u5230$T_{i}$\u4f4d\u7f6e**\uff1a\n\n\u6211\u4eec\u53ef\u4ee5**\u628a$f_{1}$\u5230$f_{S_{i}-1}$\u5168\u90e8\u52a0\u4e0a$w_{i}$\uff0c\u8fd9\u6837\u5982\u679c\u4e4b\u540e\u8f6c\u79fb\u65f6\u627e\u5230\u7684\u4e0a\u4e00\u4e2a\u57fa\u7ad9\u4f4d\u7f6e\u662f\u5c0f\u4e8e$S_{i}$\u7684\uff0c\u90a3\u4e48\u5c31\u4ee5\u4e3a\u8fd9\u5bf9\u4e8e$i$\u6751\u5e84\uff0c$d_{i}-s_{i}$\u5230$d_{i}+s_{i}$\u8fd9\u6bb5\u533a\u95f4\u662f\u6ca1\u6709\u5efa\u57fa\u7ad9\u7684\uff0c\u6240\u4ee5\u8981\u52a0\u4e0a$w_{i}$**\uff08\u975e\u5e38\u91cd\u8981\u7684\u4e00\u6b65\uff0c\u597d\u597d\u7406\u89e3\uff09\n\n\u8fd9\u6837\u4e00\u6765\uff0c**\u539f\u66b4\u529b\u65b9\u7a0b\u4e2d\u6240\u6709\u7684$cost_{k+1}{i}$\u5168\u90e8\u90fd\u8f6c\u79fb\u5230\u4e86$f_{k}$\u4e0a**\uff0c\u6211\u4eec\u53ea\u9700\u8981**\u627e\u5230$1$\u5230$i-1$\u4e2d\u7684\u6700\u5c0f\u7684$f_{j}$\u5373\u53ef**\n\n\u800c**\u533a\u95f4\u6700\u5c0f\u503c\u548c\u533a\u95f4\u52a0\u90fd\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811**\u5feb\u901f\u5b9e\u73b0\uff0c**\u4ee5$T_{i}$\u4e3a\u53f3\u7aef\u70b9\u7684\u6751\u5e84\u53ef\u4ee5\u7528\u52a8\u6001\u6570\u7ec4\u6216\u8005\u90bb\u63a5\u8868\u5b58\u8d77\u6765**\n\n\u4e0b\u9762\u662f$AC$\u4ee3\u7801\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u7406\u89e3\uff1a\n```\n#include<bits/stdc++.h>\n#define maxn 20005\n#define ll long long\nusing namespace std;\nint S[maxn],T[maxn],n,Size,k,d[maxn],c[maxn],s[maxn],w[maxn],L,R;\nll Ans=1e18,f[maxn],x,Now;\nvector<int> Q[maxn];\nstruct lc{\n\tint L,R;\n\tll x,k;\n}tree[maxn<<2];\ninline ll read(){\n\tint ret=0,f=1;char ch=getchar();\n\twhile (ch<'0'||ch>'9'){if (ch=='-') f=-f;ch=getchar();}\n\twhile (ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\ninline void Pre(){\n\tfor (int i=1;i<=n;i++){\n\t\tS[i]=lower_bound(d+1,d+n+1,d[i]-s[i])-d;\n        T[i]=lower_bound(d+1,d+n+1,d[i]+s[i])-d;\n        if (d[T[i]]>d[i]+s[i]) T[i]--;Q[T[i]].push_back(i);\n\t}\n}\ninline void down(int k){\n\ttree[k<<1].x+=tree[k].k;\n\ttree[k<<1].k+=tree[k].k;\n\ttree[k<<1|1].x+=tree[k].k;\n\ttree[k<<1|1].k+=tree[k].k;\n\ttree[k].k=0;\n}\ninline void build(int k,int L,int R){\n\ttree[k].L=L,tree[k].R=R,tree[k].k=tree[k].x=0;\n\tif (L==R){tree[k].x=f[L];return;}\n\tint mid=L+R>>1;\n\tbuild(k<<1,L,mid),build(k<<1|1,mid+1,R);\n\ttree[k].x=min(tree[k<<1].x,tree[k<<1|1].x);\n}\ninline ll Get(int k){\n\tif (R<L) return 1e18;\n\tif (tree[k].L>=L&&tree[k].R<=R) return tree[k].x;\n\tif (tree[k].k) down(k);\n\tll Cnt=1e18;int mid=tree[k].L+tree[k].R>>1;\n\tif (L<=mid) Cnt=min(Cnt,Get(k<<1));\n\tif (R>mid) Cnt=min(Cnt,Get(k<<1|1));\n\ttree[k].x=min(tree[k<<1].x,tree[k<<1|1].x);\n\treturn Cnt;\n}\ninline void change(int k){\n\tif (R<L) return;\n\tif (tree[k].L>=L&&tree[k].R<=R){tree[k].k+=x,tree[k].x+=x;return;}\n\tif (tree[k].k) down(k);\n\tint mid=tree[k].L+tree[k].R>>1;\n\tif (L<=mid) change(k<<1);\n\tif (R>mid) change(k<<1|1);\n\ttree[k].x=min(tree[k<<1].x,tree[k<<1|1].x);\n}\nint main(){  \n\tn=read()+1,k=read()+1;\n\tfor (int i=2;i<n;i++) d[i]=read();\n\tfor (int i=1;i<n;i++) c[i]=read();\n\tfor (int i=1;i<n;i++) s[i]=read();\n\tfor (int i=1;i<n;i++) w[i]=read();\n\td[n]=1<<30,w[n]=1<<30;\n\tPre();Now=0;\n\tfor (int i=1;i<=n;i++){\n\t\tf[i]=Now+c[i],Size=Q[i].size();\n\t\tfor (int j=0;j<Size;j++) Now+=w[Q[i][j]];\n\t}\n\tAns=f[n];\n\tfor (int t=1;t<k;t++){\n\t\tbuild(1,1,n);\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tL=1,R=i-1;f[i]=Get(1)+c[i],Size=Q[i].size();\n\t\t    for (int j=0;j<Size;j++) L=1,R=S[Q[i][j]]-1,x=w[Q[i][j]],change(1);\n\t\t}\n\t\tAns=min(Ans,f[n]);\n\t}\n\tprintf(\"%lld\",Ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1590145135,
        "uid": 108047,
        "name": "LlLlCc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "# ZJOI2010]\u57fa\u7ad9\u9009\u5740\n **NOI/NOI+/CTSC**   ~~\u80c6\u5c0f\u52ff\u5165~~ \n \n[\u9898\u76ee\u53cb\u60c5\u94fe\u63a5-lougu](https://www.luogu.org/problemnew/show/P2605)\n\n\n## \u4e00\u3001\u9898\u76ee\u53ca\u6570\u636e\u8303\u56f4\n\u6709N\u4e2a\u6751\u5e84\u5750\u843d\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u7b2ci(i>1)\u4e2a\u6751\u5e84\u8ddd\u79bb\u7b2c1\u4e2a\u6751\u5e84\u7684\u8ddd\u79bb\u4e3aDi\u3002\u9700\u8981\u5728\u8fd9\u4e9b\u6751\u5e84\u4e2d\u5efa\u7acb\u4e0d\u8d85\u8fc7K\u4e2a\u901a\u8baf\u57fa\u7ad9\uff0c\u5728\u7b2ci\u4e2a\u6751\u5e84\u5efa\u7acb\u57fa\u7ad9\u7684\u8d39\u7528\u4e3aCi\u3002\u5982\u679c\u5728\u8ddd\u79bb\u7b2ci\u4e2a\u6751\u5e84\u4e0d\u8d85\u8fc7Si\u7684\u8303\u56f4\u5185\u5efa\u7acb\u4e86\u4e00\u4e2a\u901a\u8baf\u57fa\u7ad9\uff0c\u90a3\u4e48\u5c31\u6751\u5e84\u88ab\u57fa\u7ad9\u8986\u76d6\u4e86\u3002\u5982\u679c\u7b2ci\u4e2a\u6751\u5e84\u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u5219\u9700\u8981\u5411\u4ed6\u4eec\u8865\u507f\uff0c\u8d39\u7528\u4e3aWi\u3002\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u9009\u62e9\u57fa\u7ad9\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002\n\n40%\u7684\u6570\u636e\u4e2d\uff0cN<=500\uff1b\n100%\u7684\u6570\u636e\u4e2d\uff0cK<=N\uff0cK<=100\uff0cN<=20,000\uff0cDi<=1000000000\uff0cCi<=10000\uff0cSi<=1000000000\uff0cWi<=10000\u3002\n\n## \u4e8c\u3001\u66b4\u529b\u505a\u6cd5\n\u8fd9\u9898\u4e00\u770b\u5c31\u662fdp(\u66b4\u529b\u4e5f\u5f97\u4e0d\u4e86\u5206)\uff0c\u8bbe\u8ba1dp[i][j]\u4e3a\u524di\u4e2a\u70b9\u5747\u88ab\u8986\u76d6\uff0c\u5efa\u4e86j\u4e2a\u57fa\u7ad9\uff0c**\u4e14\u6700\u540e\u4e00\u4e2a\u57fa\u7ad9\u88ab\u5efa\u7acb\u5728i\u70b9**\u7684\u6700\u5c0f\u82b1\u8d39\n\u5219**dp[i][j]=min(dp[i][j],dp[k][j-1]+cost+c[i])**,cost\u4e3ak\u5230i\u4e2d\u6ca1\u88ab\u8986\u76d6\u7684\u70b9\u7684w\u4e4b\u548c\u3002\n\n\u73b0\u5728\u7684\u96be\u70b9\u5728\u4e8e\u6c42cost\u3002\u6211\u4eec\u53ef\u4ee5\u8ba9k\u4ecei-1\u9012\u51cf\uff0c\u5b9a\u4e49l[x]\u548cr[x]\u4e3ak\u70b9\u80fd\u88ab\u8986\u76d6\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\uff0c\u5219\u5f53r[x]<i\u65f6\uff0c\u8bf4\u660e\u5b83\u4e0d\u80fd\u88abi\u70b9\u8986\u76d6\uff0c\u53ea\u80fd\u88ab\u5728l[x]\u5230x\u7684\u8303\u56f4\u88ab\u8986\u76d6\uff08\u6211\u4eec\u6b64\u65f6\u7684k\u5728x\u70b9\uff09\uff0c\u6240\u4ee5\u5c0f\u4e8el[x]-1\u7684k\u70b9\u8981\u989d\u5916\u652f\u4ed8w[x]\u7684\u8d39\u7528\uff0c\u6211\u4eec\u53ef\u4ee5O(n)\u7684\u65f6\u95f4\u5904\u7406\u6bcf\u4e2a\u70b9\u7684cost\u4fe1\u606f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^2*k)\uff0c\u5f97\u520650\uff0c\u9644\u4e0a\u4ee3\u7801\u3002\n\n```\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define INF 2e9+5\n#define min(x,y) ((x)<(y)?(x):(y))\nconst int MAXN = 20005, MAXK = 105;\nint n,k,d[MAXN],c[MAXN],s[MAXN],w[MAXN],l[MAXN],r[MAXN];\nint dp[MAXN][MAXK],cost[MAXN],ans;\nint main()\n{\n    scanf(\"%d %d\",&n,&k);\n    for(int i=2; i<=n; i++)\n        scanf(\"%d\",&d[i]);\n    for(int i=1; i<=n; i++)\n        scanf(\"%d\",&c[i]);\n    for(int i=1; i<=n; i++)\n        scanf(\"%d\",&s[i]);\n    for(int i=1; i<=n; i++)\n        scanf(\"%d\",&w[i]);\n    for(int i=1; i<=n; i++)\n    {\n        l[i]=lower_bound(d+1,d+1+n,d[i]-s[i])-d;\n        r[i]=lower_bound(d+1,d+1+n,d[i]+s[i])-d;\n        r[i]-=(d[i]+s[i]<d[r[i]]);\n    }\n    for(int i=1; i<=n; i++)\n    {\n        for(int j=1; j<=k; j++)\n            dp[i][j]=INF;\n        dp[i][0]=dp[i-1][0]+w[i];\n    }\n    ans=dp[n][0];\n    for(int i=1; i<=n; i++)\n    {\n        memset(cost,0,sizeof cost);\n        for(int j=i-1; j>=1; j--) //\u8fd9\u91cc\u7684j\u5c31\u662f\u4e0a\u6587\u7684k\uff0c\u904d\u5386\u6240\u6709k\u5904\u7406\u51facost\n        {\n            if(r[j]<i)\n                cost[l[j]-1]+=w[j];\n        }\n        for(int j=i-1; j>=0; j--)\n            cost[j]+=cost[j+1];//\u7528\u540e\u7f00\u548c\u7edf\u8ba1w\u548c\n        for(int j=1; j<=k && j<=i; j++) //\u57fa\u7ad9\u6570\u91cf\n        {\n            if(j==1)\n                dp[i][1]=cost[0]+c[i];\n            else\n                for(int p=i-1; p>=j-1; p--) //\u679a\u4e3ek\u70b9\n                    dp[i][j]=min(dp[i][j],dp[p][j-1]+cost[p]+c[i]);\n            int sum=0;\n            for(int p=i+1; p<=n; p++) //\u7edf\u8ba1\u540e\u9762\u7684w\u548c\n                if(l[p]>i)\n                    sum+=w[p];\n            ans=min(ans,dp[i][j]+sum);\n        }\n    }\n    printf(\"%d\\n\",ans);\n}\n```\n\n***\n\n## \u4e09\u3001\u7ebf\u6bb5\u6811\u4f18\u5316\n1.\u6211\u4eec\u53d1\u73b0\u65f6\u95f4\u4e3b\u8981\u7528\u5728\u904d\u5386k\u548c\u7edf\u8ba1cost\u4e0a\uff0c\u518d\u89c2\u5bdf\u72b6\u8f6c\u65b9\u7a0b\uff0cdp[i][j]\u7684\u72b6\u6001\u53ea\u53d6\u51b3\u4e8e[j-1]\u91cc\u9762\u7684\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u780d\u6389\u7b2c\u4e8c\u7ef4\uff0c\u65b9\u7a0b\u5c31\u53d8\u6210\u4e86**dp[i]=min(dp[i],dp[k]+cost+c[i])**\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u5427j\u7684\u679a\u4e3e\u653e\u6700\u5916\u5c42\uff0c\u4ee5\u9650\u5236\u57fa\u7ad9\u6570\u91cf\u3002\u8fd9\u6837\u8fd8\u4e0d\u591f\uff0c\u6211\u4eec\u53d1\u73b0cost\u7684\u7edf\u8ba1\u6709\u70b9\u533a\u95f4\u7684\u611f\u89c9\uff0c\u5373\u5bf9\u4e8e1\u5230l[x]-1\u7684\u533a\u95f4\u52a0w[x],\u8fd9\u5c31\u60f3\u5230\u4e86\u7528\u7ebf\u6bb5\u6811\u6765\u641e\uff0c\u8fd9\u4e5f\u6b63\u597d\u65b9\u4fbf\u67e5\u8be2\uff0c\u6700\u5916\u5c42\u8dd1\u57fa\u7ad9\u6570j\uff0c\u6bcf\u6b21\u518d\u628a\u65b0\u7684dp\u5b58\u8fdb\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8ej\u4e2a\u57fa\u7ad9\u7684i\u70b9\uff0c\u6709**dp[i]=query(j-1,i-1)+c[i]**\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u627ek\u7684n\u76f4\u63a5\u5361\u6210logn\uff0c\u7a7a\u95f4\u4e5f\u5f88\u8282\u7701\u3002\uff08\u6ce8\u610fj=1\u65f6\u5355\u72ec\u5904\u7406\uff0c\u56e0\u4e3a\u6ca1\u6709\u7b2c\u4e8c\u4e2a\u57fa\u7ad9\u7ed9i\u8f6c\u79fb\uff09\n\n2.\u771f\u7684\u4e0d\u8981\u7528define\u6253min\uff0c\u6211\u67e5\u8be2\u65f6\u7528min\u6bd4\u8f83query\u8fd4\u56de\u503c\uff0c\u56e0\u4e3adefine\u662f\u76f4\u63a5\u66ff\u6362\uff0c\u4e09\u76ee\u4f1a\u591a\u6b21\u89e6\u53d1\u9012\u5f52\u62ff\u503c\uff0c**\u6bd4\u5982min\uff08query(1),query(2)) \u5c31\u53d8\u6210\u4e86 query(1)<query(2)?query(1):query(2)\uff0c\u65f6\u95f4\u4f1a\u5927\u5927\u81a8\u80c0**\uff01\uff01\u5bfc\u81f4\u6211\u4e00\u76f4TLE\uff0c\u611f\u8c22\uff08WXK dalao\uff09\n\n\u7b2c\u4e00\u79cd\u5199\u6cd5\uff0c\u5168\u662f\u6211\u81ea\u5df1\u60f3\u7684\uff08~~\u83dc\u9e21+\u65e0\u8111~~ \uff09    \u3002\u5728\u66f4\u65b0\u7ebf\u6bb5\u6811\u7684\u503c\u65f6\uff0c\u5148\u5224r[x]=i\uff0c\u5373\u540e\u9762\u7684i\u90fd\u4e0d\u80fd\u8986\u76d6\u5230\u5b83\uff0c\u5c31\u628a1\u5230l[x]-1\u5168\u52a0w[x],\u53ef\u4ee5\u5148\u628a\u6240\u4ee5x\u548cr[x]\u5b58\u8fdba\u91cc\uff0c\u6309r[x]\u9012\u589e\u6392\u5e8f\uff0c\u5728a\u4e2dlower_bound\u5927\u4e8e\u7b49\u4e8ei\u503c\u7684\u4e0b\u6807loc\uff0c\u5982\u679ca[loc].val=i\u7684\u8bdd\uff0c\u5c31while\u5f80\u540e\u626b\uff08~~\u7279\u522b\u83dc~~ \uff09\u3002\u53e6\u5916\uff0c\u6211\u4eec\u91cd\u65b0\u5904\u7406cost\uff0c\u628a\u5b83\u5f53\u6210\u5728\u7b2ci\u4e2a\u70b9\u5efa\u57fa\u7ad9\u7684i\u5230n\u7684w\u503c\u4e4b\u548c\uff0c\u66f4\u65b0\u65f6\u7528**ans=min(ans,dp[i]+cost[i])**\uff0c\u8fd9\u4e2a\u505a\u6cd5\u5b9e\u6d4b\u6709\u6548\uff0c\u770b\u4ee3\u7801\u5427\u3002\n\n```\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define INF 2047483647\nconst int MAXN = 20005, MAXK = 105;\nint read()\n{\n    int num=0,flag=1;\n    char c;\n    while((c=getchar())<'0'||c>'9')if(c=='-')flag=-1;\n    while(c>='0'&&c<='9')num=(num<<3)+(num<<1)+(c^48),c=getchar();\n    return num*flag;\n}\nint n,k,d[MAXN],c[MAXN],s[MAXN],w[MAXN],l[MAXN],r[MAXN];\nint dp[MAXN],cost[MAXN],ans;\nstruct node\n{\n    int val,pos;\n    bool operator < (node x) const\n    {\n        return val<x.val;\n    }\n} a[MAXN];\nstruct tree\n{\n    int l,r,val,lazy;\n} tr[MAXN*4];\nint min(int a,int b)\n{\n    return a<b?a:b;\n}//\u4e00\u5b9a\u8981\u5c0f\u5fc3\nvoid build(int l,int r,int i)\n{\n    tr[i]=tree{l,r,0,0};\n    if(l==r)\n    {\n        tr[i].val=dp[l];\n        return ;\n    }\n    int mid=(l+r)>>1;\n    build(l,mid,i<<1);\n    build(mid+1,r,i<<1|1);\n    tr[i].val=min(tr[i<<1].val,tr[i<<1|1].val);\n}\nvoid down(int i)\n{\n    if(!tr[i].lazy)\n        return ;\n    tr[i<<1].val+=tr[i].lazy;\n    tr[i<<1].lazy+=tr[i].lazy;\n    tr[i<<1|1].val+=tr[i].lazy;\n    tr[i<<1|1].lazy+=tr[i].lazy;\n    tr[i].lazy=0;\n}\nvoid add(int l,int r,int i,int c)\n{\n    if(l>r) return ;\n    if(l<=tr[i].l && tr[i].r<=r)\n    {\n        tr[i].val+=c;\n        tr[i].lazy+=c;\n        return ;\n    }\n    if(tr[i].r<l || tr[i].l>r || tr[i].l==tr[i].r)\n        return ;\n    down(i);\n    add(l,r,i<<1,c);\n    add(l,r,i<<1|1,c);\n    tr[i].val=min(tr[i<<1].val,tr[i<<1|1].val);\n}\nint query(int l,int r,int i)\n{\n    if(l<=tr[i].l && tr[i].r<=r)\n        return tr[i].val;\n    if(tr[i].r<l || tr[i].l>r || tr[i].l==tr[i].r)\n        return INF;\n    down(i);\n    return min(query(l,r,i<<1),query(l,r,i<<1|1));\n}\nint main()\n{\n    n=read();\n    k=read();\n    for(int i=2; i<=n; i++)\n        d[i]=read();\n    for(int i=1; i<=n; i++)\n        c[i]=read();\n    for(int i=1; i<=n; i++)\n        s[i]=read();\n    for(int i=1; i<=n; i++)\n        w[i]=read();\n    for(int i=1; i<=n; i++)\n    {\n        l[i]=lower_bound(d+1,d+n+1,d[i]-s[i])-d;\n        r[i]=lower_bound(d+1,d+n+1,d[i]+s[i])-d;\n        r[i]-=(d[i]+s[i]<d[r[i]]);\n        a[i]=node{r[i],i};\n    }\n    sort(a+1,a+1+n);\n    for(int i=1; i<=n; i++)\n        ans+=w[i];\n    for(int i=n; i>=1; i--)//\u628an\u70b9\u5f53\u6210\u5efa\u57fa\u7ad9\uff08\u5176\u5b9e\u5b83\u6ca1\u5efa\uff09\uff0c\u6240\u4ee5\u4e0d\u5224\u65ad\uff08\u7c7b\u6bd4\u4e0a\u4efd\u4ee3\u7801\u7684cost\uff09\n        cost[l[i]-1]+=w[i];\n    for(int i=n; i>=1; i--)\n        cost[i]+=cost[i+1];//\u6c42\u540e\u7f00\u548c\n    int now=0;\n    for(int i=1; i<=n; i++)\n    {\n        dp[i]=now+c[i];\n        int loc=lower_bound(a+1,a+n+1,node{i,0})-a;\n        while(a[loc].val==i)\n        {\n            now+=w[a[loc].pos];\n            loc++;\n        }\n        ans=min(ans,dp[i]+cost[i]);\n    }\n    for(int j=2; j<=k; j++)\n    {\n        build(1,n,1);//\u6bcf\u6b21\u91cd\u65b0\u7528\u4e0a\u4e00\u6b21\u7684dp\u5efa\u7ebf\u6bb5\u6811\n        for(int i=j; i<=n; i++)\n        {\n            dp[i]=query(j-1,i-1,1)+c[i];//\u72b6\u8f6c\n            ans=min(ans,dp[i]+cost[i]);\n            int loc=lower_bound(a+1,a+n+1,node{i,0})-a;\n            while(a[loc].val==i)//\u66f4\u65b0\n            {\n                add(1,l[a[loc].pos]-1,1,w[a[loc].pos]);\n                loc++;\n            }\n        }\n    }\n    printf(\"%d\\n\",ans);\n}\n\n```\n\n\u7b2c\u4e8c\u79cd\u5199\u6cd5\uff0c\u67d0\u4e9b\u795e\u4ed9\u60f3\u51fa\u6765\u7684\uff0c\u6211\u4eec\u5efa\u4e00\u4e2a\u7406\u60f3\u6751\uff08~~\u4e4c\u6258\u90a6~~ \uff09\uff0c\u7528\u5b83\u6765\u5e2e\u6211\u4eec**\u7edf\u8ba1\u6700\u4f18\u72b6\u6001**\uff0c\u6709**ans=min(ans,dp[n])**\uff08\u6ce8\u610f\u8fd9\u91cc\u7684n\u662f\u52a0\u8fc7\u4e00\u7684\uff09\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628an\u548ck\u52a01\uff0c\u628ad\u548cw\u8d4b\u6210INF\uff0c\u5c31\u884c\u4e86\uff08\u4e0d\u7528cost\uff09\uff0c\u4ee3\u7801\u91cf\u4e5f\u51cf\u5c11\u4e86\u5f88\u591a\u3002\u53e6\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u56fe\u8bba\u7684\u65b9\u5f0f\u66f4\u65b0\u7ebf\u6bb5\u6811\uff08what hell\uff1f\uff1f\uff09\uff0c\u5728lower_bound\u7684\u65f6\u5019\uff0c**\u628ai\u548cr[i]\u8fde\u4e00\u6761\u6709\u5411\u8fb9**\uff0c\u8bbf\u95eer[i]\u65f6\u53ef\u4ee5\u76f4\u63a5\u53d6\u5230i\uff08\u4e0d\u77e5\u9053\u65b9\u4fbf\u4e86\u591a\u5c11\uff09\n\n```\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n#define INF 2e9+5\nconst int MAXN = 20005;\nint n,k,d[MAXN],c[MAXN],s[MAXN],w[MAXN],l[MAXN],r[MAXN];\nint f[MAXN],tot,dp[MAXN];\nstruct node\n{\n    int v,next;\n} e[MAXN];\nstruct tree\n{\n    int val,lazy;\n} tr[MAXN*4];\nint min(int a,int b)\n{\n    return a<b?a:b;\n}\nvoid build(int i,int l,int r)\n{\n    tr[i].val=tr[i].lazy=0;\n    if(l==r)\n    {\n        tr[i].val=dp[l];\n        return ;\n    }\n    int mid=(l+r)>>1;\n    build(i<<1,l,mid);\n    build(i<<1|1,mid+1,r);\n    tr[i].val=min(tr[i<<1].val,tr[i<<1|1].val);\n}\nvoid down(int i)\n{\n    if(!tr[i].lazy) return ;\n    tr[i<<1].val+=tr[i].lazy;\n    tr[i<<1].lazy+=tr[i].lazy;\n    tr[i<<1|1].val+=tr[i].lazy;\n    tr[i<<1|1].lazy+=tr[i].lazy;\n    tr[i].lazy=0;\n}\nvoid add(int l,int r,int L,int R,int i,int c)\n{\n    if(l>r) return;\n    if(l<=L && R<=r)\n    {\n        tr[i].val+=c;\n        tr[i].lazy+=c;\n        return ;\n    }\n    if(R<l || r<L) return ;\n    down(i);\n    int mid=(L+R)>>1;\n    add(l,r,L,mid,i<<1,c);\n    add(l,r,mid+1,R,i<<1|1,c);\n    tr[i].val=min(tr[i<<1].val,tr[i<<1|1].val);\n}\nint query(int l,int r,int L,int R,int i)\n{\n    if(l<=L && R<=r)\n        return tr[i].val;\n    if(R<l || r<L)\n        return INF;\n    down(i);\n    int mid=(L+R)>>1;\n    return min(query(l,r,L,mid,i<<1),query(l,r,mid+1,R,i<<1|1));\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&k);\n    for(int i=2; i<=n; i++)\n        scanf(\"%d\",&d[i]);\n    for(int i=1; i<=n; i++)\n        scanf(\"%d\",&c[i]);\n    for(int i=1; i<=n; i++)\n        scanf(\"%d\",&s[i]);\n    for(int i=1; i<=n; i++)\n        scanf(\"%d\",&w[i]);\n    n++;\n    k++;\n    d[n]=INF;\n    w[n]=INF;\n    for(int i=1; i<=n; i++)\n    {\n        l[i]=lower_bound(d+1,d+1+n,d[i]-s[i])-d;\n        r[i]=lower_bound(d+1,d+1+n,d[i]+s[i])-d;\n        r[i]-=(d[i]+s[i]<d[r[i]]);\n        e[++tot]=node{i,f[r[i]]},f[r[i]]=tot;\n    }\n    int now=0,ans=0;\n    for(int i=1; i<=n; i++)\n    {\n        dp[i]=now+c[i];\n        for(int p=f[i]; p; p=e[p].next)\n            now+=w[e[p].v];\n    }\n    ans=dp[n];\n    for(int j=2; j<=k; j++)\n    {\n        build(1,1,n);\n        for(int i=j; i<=n; i++)\n        {\n            dp[i]=query(j-1,i-1,1,n,1)+c[i];\n            for(int p=f[i]; p; p=e[p].next)\n                add(1,l[e[p].v]-1,1,n,1,w[e[p].v]);\n        }\n        ans=min(ans,dp[n]);\n    }\n    printf(\"%d\\n\",ans);\n}\n\n```\n",
        "postTime": 1563355175,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "// $Dear$\u7ba1\u7406\u5458, \u521a\u4fee\u4e86\u4e00\u4e0b\u9519, \u8bb0\u5f97\u8fd8\u662f\u653e\u5728\u7b2c\u4e00\u7bc7\u54df!(~~\u6ed1\u7a3d~~)\n\n## DP + \u6bd4DP\u957f\u51e0\u500d\u7684\u4f18\u5316---\u7ebf\u6bb5\u6811\n\u7ec8\u4e8e\u627e\u5230\u8003\u8bd5\u7684\u539f\u9898, \u8003\u573a\u4e0a\u4e5f\u4e00\u773c\u770b\u51fa\u6765\u662fDP:  \n**\u8bbe$dp(i,j)$\u4e3a\u5904\u7406\u5b8c\u524d$i$\u4e2a\u6751\u5b50, \u4e14\u4f7f\u7528\u4e86$j$\u5ea7\u57fa\u7ad9\u7684\u6700\u5c0f\u82b1\u8d39**, \u5219:\n$$\ndp(i,j)=min\\lbrace dp(k,j-1)+\\sum_{k<p<i}w_p[d_k<d_p-s_p\\&\\&d_p+s_p<d_i]+c_i \\rbrace\n$$\n\u5176\u4e2d$1\\leq k<i$, ~~\u6613\u77e5\u6b64\u4e3a\u663e\u7136~~, \u6ca1\u6709\u601d\u8def\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u8fd9\u6837\u7684\u66b4\u529b$DP$, \u4f46\u6bd5\u7adf$O(kn^2)$ \u7684\u671f\u671b\u5f97\u5206\u4ec5$40$\u5206 ( \u5b9e\u6d4b$50$\u5206 ), \u6211\u4eec\u9700\u8981\u60f3\u60f3**\u4f18\u5316**.  \n  \n  \u9996\u5148, \u53ef\u4ee5\u53d1\u73b0$dp$\u6570\u7ec4\u53ef\u4ee5**\u5316\u7b80\u6210\u4e00\u7ef4**, \u56e0\u4e3a$dp(i,j)$\u4ec5\u4e0e$dp(i,j-1)$\u6709\u5173. ( \u8fd9\u7c7b\u4f3c\u4e8e\u80cc\u5305\u95ee\u9898\u7684\u5316\u7b80 ). \u90a3\u4e48:  \n$$\ndp(i)=min\\lbrace dp(k)+\\sum_{k<p<i}w_p[...]+c_i \\rbrace\n$$\n\u5f53\u7136\u5566, \u8bb0\u5f97**\u628a\u679a\u4e3e\u4f7f\u7528\u57fa\u7ad9\u6570(\u88ab\u6d88\u53bb\u7684$j$)\u7684\u5faa\u73af\u4e22\u5230\u6700\u5916\u5c42**.  \n  \n~~\u5185\u5b58\u4e0d\u614c\u4e86, \u65f6\u95f4\u4ecd\u7136\u6ed1\u7a3d.~~  \n\u89c2\u5bdf\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b, $\\sum_{k<p<i}w_p[...]$\u660e\u663e\u975e\u5e38\u8ba8\u538c. \u5982\u4f55\u7ef4\u62a4\u4e00\u4e2a\u4e0d\u505c\u66f4\u65b0\u7684\u533a\u95f4\u6761\u4ef6\u6c42\u548c\u7684\u6700\u5c0f\u503c\u5462?  \n**\u7ebf\u6bb5\u6811!**(\u8003\u9a8c\u8bf8\u541b\u7b2c\u516d\u611f\u7684\u65f6\u95f4\u5230\u4e86$qwq$)  \n\u5982\u679c\u4e00\u9897\u5df2\u7ecf\u7ef4\u62a4\u5230$i$\u7684\u7ebf\u6bb5\u6811\u6446\u5728\u9762\u524d, \u6211\u4eec\u9700\u8981\u4e22\u8fdb\u53bb\u54ea\u4e9b\u4e1c\u897f\u4ee5\u7ef4\u62a4$i+1$\u5462?  \n\u7b54\u6848: \u9700\u8981\u8003\u8651**\u6070\u597d\u80fd\u88ab\u7b2c$i$\u4e2a\u6751\u5b50\u7684\u57fa\u7ad9\u8986\u76d6\u5374\u4e0d\u80fd\u88ab\u7b2c$i+1$\u4e2a\u8986\u76d6\u5230\u7684\u60c5\u51b5**.  \n\n\u4e8e\u662f\u5b9a\u4e49\u4e24\u4e2a\u6570\u7ec4$L, R$, \u5206\u522b\u4fdd\u5b58\u7b2c$i$\u4e2a\u6751\u5b50**\u6700\u8fdc\u80fd\u88ab\u5de6\u4fa7\u7684$L_i$, \u53f3\u4fa7\u7684$R_i$\u6240\u8986\u76d6**.  \n\u8f93\u5165\u5b8c\u6bd5\u4e4b\u540e, \u8fd9\u4e24\u4e2a\u6570\u7ec4\u4fbf\u53ef\u4ee5**\u4e8c\u5206**\u6c42\u5f97\u4e86.  \n( \u4f5c\u4e3a\u4e8c\u5206\u6b7b\u6d3b\u6253\u4e0d\u5bf9\u7684\u975e\u914b, \u5b89\u5229\u4e00\u4e0b[$lower\\_bound$\u51fd\u6570](https://baike.baidu.com/item/lower_bound/8620039?fr=aladdin). )  \n\u6b64\u540e, \u6211\u4eec\u8fd8\u9700\u8981**\u4fdd\u5b58\u53f3\u4fa7 ( \u56e0\u4e3a\u5faa\u73af\u662f\u4ece\u5de6\u81f3\u53f3\u7684 ) \u6700\u8fdc\u88ab$i$\u8986\u76d6\u7684\u6240\u6709\u6751\u5b50\u7684\u7f16\u53f7**.  \n( \u53ef\u4ee5\u76f4\u63a5\u5efa\u5355\u5411\u8fb9$<R_i,i>$, \u4ea6\u6216\u7528$vector$\u50a8\u5b58. )  \n\nAfter that, \u5f53\u7ef4\u62a4\u51fa$dp(i)$\u4e4b\u540e, \u6211\u4eec\u679a\u4e3e\u6bcf\u4e2a\u53f3\u4fa7\u6700\u8fdc\u88ab$i$\u8986\u76d6\u7684\u6751\u5b50 ( \u4ee4\u4e3a$v$ ), \u9996\u5148\u660e\u786e: **$v$\u4e0d\u4f1a\u518d\u53d7\u5230\u53f3\u4fa7\u57fa\u7ad9\u7684\u8986\u76d6\u4e86**.  \n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a**\u4e0d\u80fd\u4ece\u5de6\u4fa7\u8986\u76d6**$v$\u7684$k$\u53f7\u6751, ( \u5373, \u6240\u6709$k\\in\\lbrack 1,L_v)$ ), \u90fd\u9700\u8981\u4e3a$v$\u989d\u5916\u652f\u4ed8$w_i$\u7684\u8865\u507f\u91d1, \u628a\u7ebf\u6bb5\u6811\u4e0a$\\lbrack 1,L_v)$\u7684\u70b9\u90fd\u52a0\u4e0a$w_i$\u5373\u53ef.  \n  \n\u6700\u540e\u8ba8\u8bba$dp(i)$\u7684\u8f6c\u79fb, \u76f8\u4fe1\u7b54\u6848\u5df2\u7ecf\u5f88\u660e\u663e\u4e86, \u8bbe\u4ee5$Query(l,r)$\u8be2\u95ee\u6811\u4e0a$l$\u5230$r$\u7684\u6700\u5c0f\u503c, \u5219:\n$$\ndp(i)=Query(1,i-1)+c_i\n$$\n\u6ce8\u610f\u5f53**\u53ea\u7acb\u4e00\u4e2a\u57fa\u7ad9\u65f6\u8981\u7279\u6b8a\u5904\u7406**,\u540e\u4ee4\u7b54\u6848$Ans=dp(n)$, \u6bcf\u6b21\u5916\u5c42\u5faa\u73af\u90fd\u4fdd\u7559\u4e00\u6b21$dp(n)$\u7684\u6700\u5c0f\u503c\u5373\u53ef.  \n  \n\u5b8c\u7ed3\u6492\u82b1, \u5e76\u4e14, $long\\,long!$ $long\\,long!$ $long\\,long!$  \n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nnamespace Optimize { // \u8bf7\u8df3\u8fc7\u8fd9\u6bb5\u98ce\u9a9a\u7684\u4f18\u5316\u6a21\u677f\u5427! \n\t#define Eps 1e-8\n\t#define Int register int\n\t#define INTMAX 0x7fffffff\n\t#define LLMAX 0x7fffffffffffffff\n\t#define Type template<typename _T>\n\n\t#ifdef _GLIBCXX_MAP\n\t#define mapiter( _Tk, _Tv ) map<_Tk, _Tv> :: iterator\n\t#define map_foreach( keytype, valuetype, mapname, itname )\\\n\t\tfor ( mapiter ( keytype, valuetype ) itname = mapname.begin (); it != mapname.end (); ++ it )\n\t#endif\n\n\t#ifdef _GLIBCXX_SET\n\t#define setiter( _T ) set<_T> :: iterator\n\t#define set_foreach( settype, setname, itname )\\\n\t\tfor ( setiter ( settype ) itname = setname.begin (); it != setname.end (); ++ it )\n\t#endif\n\n\t#ifdef _GLIBCXX_VECTOR\n\t#define veciter( _T ) vector<_T> :: iterator\n\t#define vec_foreach( vectype, vecname, itname )\\\n\t\tfor ( veciter ( vectype ) itname = vecname.begin (); it != vecname.end (); ++ it )\n\t#endif\n\t\n\t#define FileClose() fclose ( stdin ), fclose ( stdout )\n\t#define FileOpen( fname ) freopen ( fname\".in\", \"r\", stdin ), freopen ( fname\".out\", \"w\", stdout )\n\n\ttypedef long double LD;\n\ttypedef long long int LL;\n\ttypedef unsigned long long int uLL;\n\n\tType inline _T Abs ( const _T x ) { return x < 0 ? -x : x; }\n\tType inline _T Max ( const _T a, const _T b ) { return a > b ? a : b; }\n\tType inline _T Min ( const _T a, const _T b ) { return a < b ? a : b; }\n\tType inline void Swap ( _T& a, _T& b ) { _T t = a; a = b, b = t; }\n\tType inline _T rint () {\n\t\t_T x = 0; int f = 1; char s = getchar ();\n\t\twhile ( s < '0' || '9' < s ) f = s == '-' ? -1 : 1, s = getchar ();\n\t\twhile ( '0' <= s && s <= '9' ) x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar ();\n\t\treturn x * f;\n\t}\n\t#define rll rint<LL> ()\n\t#define rint rint<int> ()\n\tType inline void wint ( _T x ) {\n\t\tif ( x < 0 ) putchar ( '-' ), x = ( ~ x ) + 1;\n\t\tif ( 9 < x ) wint ( x / 10 );\n\t\tputchar ( x % 10 + '0' );\n\t}\n}\n\nusing namespace std;\nusing namespace Optimize;\n\nconst int MAXN = 20000, MAXC = 10000, MAXD = 1000000000, MAXW = 100000, MAXK = 100;\nint N, K, D[MAXN + 5] = {}, C[MAXN + 5] = {}, S[MAXN + 5] = {}, W[MAXN + 5] = {}, L[MAXN + 5] = {}, R[MAXN + 5] = {};\n// \u4e3a\u4e86\u907f\u514d\u82b1\u5f0f\u91cd\u540d, \u8bf7\u5fcd\u8010\u8fd9\u5947\u7279\u7684\u5927\u5199\u5b57\u6bcd\u4eec\nint Cnte, Head[MAXN + 5] = {}; // \u8fd9\u91cc\u91c7\u7528\u5efa\u8fb9\u7684\u65b9\u5f0f\u50a8\u5b58 \nLL DP[MAXN + 5] = {};\n\nstruct Edge {\n\tint To, _nxt;\n} Graph[MAXN + 5] = {};\n\nstruct Segment_Tree { // \u7ebf\u6bb5\u6811 \n\tstruct Node {\n\t\tint l, r; // \u6240\u7ef4\u62a4\u7684\u533a\u95f4 \n\t\tLL Val, Lazy; // Val\u8868\u793a\u6700\u5c0f\u503c, Lazy\u4e3a\u61d2\u6807\u8bb0 \n\t\tNode () {}\n\t} *Tree;\n\tinline void Build ( const int i, const int l, const int r, const int SizeofTree = 0 ) { // \u5efa\u6811 \n\t\tif ( i == 1 ) {\n\t\t\tdelete Tree; // \u5982\u679c\u7528\u6307\u9488\u7684\u8bdd, \u56e0\u4e3a\u8981\u53cd\u590d\u5efa\u6811, \u8bb0\u5f97\u5220\u9664\u539f\u6765\u7684\u90a3\u9897! \n\t\t\tTree = new Node[SizeofTree] ();\n\t\t}\n\t\tTree[i].l = l, Tree[i].r = r, Tree[i].Lazy = 0; // \u57fa\u672c\u4fe1\u606f \n\t\tif ( l == r ) {\n\t\t\tTree[i].Val = DP[l]; // \u7ee7\u627f\u4e0a\u4e00\u5c42DP\u7684\u7b54\u6848 \n\t\t\treturn ;\n\t\t}\n\t\tint Mid = ( l + r ) >> 1;\n\t\tthis -> Build ( i << 1, l, Mid );\n\t\tthis -> Build ( i << 1 | 1, Mid + 1, r );\n\t\tTree[i].Val = Min ( Tree[i << 1].Val, Tree[i << 1 | 1].Val ); // \u5408\u5e76 \n\t}\n\tinline void Spread ( const int i ) { // \u61d2\u6807\u8bb0\u4e0b\u4f20(\u6211\u89c9\u5f97Spread\u8fd9\u4e2a\u8bcd\u6bd4Pushdown\u597d\u770bqwq) \n\t\tif ( ! Tree[i].Lazy ) return ;\n\t\tTree[i << 1].Val += Tree[i].Lazy;\n\t\tTree[i << 1 | 1].Val += Tree[i].Lazy;\n\t\tTree[i << 1].Lazy += Tree[i].Lazy;\n\t\tTree[i << 1 | 1].Lazy += Tree[i].Lazy;\n\t\tTree[i].Lazy = 0;\n\t}\n\tinline void Update ( const int i, const int l, const int r, const int x ) { // \u66f4\u65b0 \n\t\tif ( r < Tree[i].l || l > Tree[i].r ) return ;\n\t\tif ( l <= Tree[i].l && Tree[i].r <= r ) {\n\t\t\tTree[i].Val += x;\n\t\t\tTree[i].Lazy += x;\n\t\t\treturn ;\n\t\t}\n\t\tthis -> Spread ( i );\n\t\tthis -> Update ( i << 1, l, r, x );\n\t\tthis -> Update ( i << 1 | 1, l, r, x );\n\t\tTree[i].Val = Min ( Tree[i << 1].Val, Tree[i << 1 | 1].Val ); // \u8bb0\u5f97\u5408\u5e76 \n\t}\n\tinline LL Query ( const int i, const int l, const int r ) {\n\t\tif ( l > r || r < Tree[i].l || l > Tree[i].r ) return LLMAX - INTMAX; // \u56e0\u4e3a\u51fa\u53bb\u8981\u52a0\u4e0a\u5efa\u57fa\u7ad9\u7684\u82b1\u8d39, \u76f4\u63a5return LLMAX\u4f1a\u51fa\u4e8b\u60c5 \n\t\tif ( l <= Tree[i].l && Tree[i].r <= r ) {\n\t\t\treturn Tree[i].Val;\n\t\t}\n\t\tthis -> Spread ( i );\n\t\tLL lret = this -> Query ( i << 1, l, r );\n\t\tLL rret = this -> Query ( i << 1 | 1, l, r );\n\t\treturn Min ( lret, rret );\n\t}\n} SegTree;\n\ninline void Link ( const int From, const int To ) { // \u8fde(\u5355\u5411)\u8fb9 \n\tGraph[++ Cnte].To = To;\n\tGraph[Cnte]._nxt = Head[From];\n\tHead[From] = Cnte;\n}\n\ninline void Work () { // (\u4e0d\u8981\u95ee\u4e3a\u4ec0\u4e48rint\u8fde\u62ec\u53f7\u90fd\u4e0d\u6253, \u5b83\u5c31\u662f\u4e00\u4e2a\u4e56\u5de7\u7684\u5feb\u8bfbqwq) \n\tN = rint, K = rint; \n\tfor ( Int i = 2; i <= N; ++ i ) {\n\t\tD[i] = rint;\n\t}\n\tfor ( Int i = 1; i <= N; ++ i ) {\n\t\tC[i] = rint;\n\t}\n\tfor ( Int i = 1; i <= N; ++ i ) {\n\t\tS[i] = rint;\n\t}\n\tfor ( Int i = 1; i <= N; ++ i ) {\n\t\tW[i] = rint;\n\t}\n\t++ N, ++ K, D[N] = MAXD + 5, W[N] = MAXW + 5; // \u4e3a\u4e86\u8ba1\u7b97\u9760\u540e\u6751\u5b50\u7684\u82b1\u8d39, \u9ed8\u8ba4\u4e00\u4e2a\u8ddd\u79bb\u65e0\u9650\u8fdc\u7684\u6751\u5b50(\u6897\u738b: \u5e7b\u60f3\u4e61?) \n\tfor ( Int i = 1; i <= N; ++ i ) {\n\t\tL[i] = lower_bound ( D + 1, D + N + 1, D[i] - S[i] ) - D;\n\t\tR[i] = lower_bound ( D + 1, D + N + 1, D[i] + S[i] ) - D;\n\t\tR[i] -= ( D[R[i]] > D[i] + S[i] ); \n\t\tLink ( R[i], i ); // \u50a8\u5b58, \u5efa\u8fb9 \n\t}\n\tLL Sum = 0;\n\tfor ( Int i = 1; i <= N; ++ i ) { // \u9884\u5904\u7406\u4e00\u4e2a\u57fa\u7ad9 \n\t\tDP[i] = Sum + C[i];\n\t\tfor ( Int j = Head[i]; j; j = Graph[j]._nxt ) {\n\t\t\tSum += W[Graph[j].To]; \n\t\t}\n\t}\n\tLL Ans = DP[N];\n\tfor ( Int i = 2; i <= K; ++ i ) { // \u91cd\u5934\u620fDP! \n\t\tSegTree.Build ( 1, 1, N, N << 2 ); // \u5efa\u6811 \n\t\tfor ( Int j = 1; j <= N; ++ j ) { // \u679a\u4e3e\u524dj\u4e2a\u6751\u5b50 \n\t\t\tDP[j] = SegTree.Query ( 1, 1, j - 1 ) + C[j]; // \u8f6c\u79fb\u7684DP[j] \n\t\t\tint v;\n\t\t\tfor ( Int k = Head[j]; k; k = Graph[k]._nxt ) { // \u904d\u5386\u5373\u5c06\u88ab\"\u629b\u5f03\"\u7684\u6751\u5b50 \n\t\t\t\tif ( L[v = Graph[k].To] > 1 ) {\n\t\t\t\t\tSegTree.Update ( 1, 1, L[v] - 1, W[v] ); // \u589e\u52a0\u8865\u507f\u91d1 \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tAns = Min ( Ans, DP[N] ); // \u4fdd\u7559\u6700\u4f18\u89e3 \n\t}\n\twint ( Ans ), putchar ( '\\n' ); // \u8f93\u51fa \n}\n\nint main () {\n\tWork ();\n\treturn 0;\n}\n```",
        "postTime": 1561797771,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "my\\_blog: <http://blog.csdn.net/miaomiao\\_ymxl/article/details/54710869>\n\n\u601d\u8def\uff1a\n\n\u4e00.\n\u5e94\u8be5\u4e0d\u96be\u60f3\u5230DP, f[i][j]\u8868\u793a\u7b2ci\u4e2a\u6751\u5e84\u4e0a\u5efa\u7b2cj\u4e2a\u57fa\u7ad9\uff0c\u4e0d\u8003\u8651i\u540e\u9762\u7684\u6751\u5e84\uff0c\u6240\u9700\u6700\u5c0f\u8d39\u7528\n\n\u8f6c\u79fb\uff1a f[i][j] = f[k][j-1] + solve(i\u4e0ek\u4e4b\u95f4\u6ca1\u6709\u8986\u76d6\u7684\u6751\u5e84\u6240\u9700\u8d39\u7528)(1<=k< i)\n\n\u6548\u7387\uff1aO(n2k)\uff0c40\u5206\u505a\u6cd5\n\n\n\u4e8c.\n\u8003\u8651\u4f18\u5316\uff0c\u96be\u70b9\u5728\u4e8esolve\u7684\u8ba1\u7b97\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5728\u6751\u5e84i\u524d\u7684\u6751\u5e84k\uff0c\u8003\u8651i\u5bf9\u5b83\u7684\u5f71\u54cd\uff0c\u968f\u7740i\u7684\u589e\u5927\uff0c\u5b83\u7684\u53f3\u7aef\u70b9\u53ef\u80fd\u4e0d\u53ef\u8fbe\u5230i\u3002\u6240\u4ee5\u5f53\u8fbe\u4e0d\u5230i\u65f6\uff0c\u8003\u8651\u524d\u9762\u7684\u6751\u5e84\u5bf9\u5b83\u7684\u5f71\u54cd\uff0c\u5f53i\u7684\u524d\u4e00\u4e2a\u5efa\u57fa\u7ad9\u7684\u6751\u5e84\u7684\u4f4d\u7f6e\u5728k\u7684\u5de6\u7aef\u70b9\u5de6\u65b9\u65f6\uff0c\u8fd9\u4e2a\u6751\u5e84\u4e0d\u80fd\u88ab\u8986\u76d6\uff0c\u9700\u52a0\u4e0aW[k]\u3002\n\n\u56e0\u6b64\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u6bcf\u6b21\u5bf9\u4e8e\u4e00\u4e2ai\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2a\u4ee5i\u4e3a\u53f3\u7aef\u70b9\u7684t\uff0c\u7528\u533a\u95f4\u52a0\u6cd5\u5728\u7ebf\u6bb5\u6811\u4e2d\u628at\u7684\u5de6\u7aef\u70b9\u5de6\u65b9\u7684\u6751\u5e84\u52a0\u4e0aw[t]\n\n\u6548\u7387\uff1aO(nlog(n)k)\uff0c100\u5206\u505a\u6cd5\n\n\u5176\u4ed6\u7ec6\u8282\u53ca\u5b9e\u73b0\u89c1\u4ee3\u7801\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define lc (o<<1)\n#define rc (o<<1|1)\n#define pb push_back\n#define Set(a, v) memset(a, v, sizeof(a))\n#define For(i, a, b) for(int i = (a); i <= (int)(b); i++)\n#define MAXK (100+5)\n#define MAXN (20000+5)\n#define INF 0x3f3f3f3f\nvoid read(int &x){\n    char ch = getchar();\n    while(ch < '0' || ch > '9') ch = getchar();\n    x = 0;\n    while(ch >= '0' && ch <= '9'){\n        x = x*10+ch-'0';\n        ch = getchar();\n    }\n}\nint D[MAXN], C[MAXN], S[MAXN], W[MAXN], lr[MAXN], rr[MAXN], f[MAXN];\nvector<int> vq[MAXN];\nint ql, qr;\nstruct Seg_tree{\n    int Min[MAXN*4], add[MAXN*4];\n    void build(int o, int L, int R){\n        if(L == R){\n            add[o] = 0; Min[o] = f[L]; return;\n        }\n        int mid = (L+R)>>1;\n        build(lc, L, mid); build(rc, mid+1, R);\n        add[o] = 0; Min[o] = min(Min[lc], Min[rc]);\n    }\n    void maintain(int o, int L, int R){\n        if(L!=R) Min[o] = min(Min[lc], Min[rc]); Min[o] += add[o];\n    }\n    void update(int o, int L, int R, int v){\n        if(ql <= L && qr >= R) add[o] += v;\n        else{\n            int mid = (L+R)>>1;\n            if(ql <= mid) update(lc, L, mid, v);\n            if(qr > mid) update(rc, mid+1, R, v);  \n           }\n        maintain(o, L, R);\n    }\n    int query(int o, int L, int R, int Add){\n        if(ql <= L && qr >= R) return Min[o]+Add;\n        int ret = INF, mid = (L+R)>>1;\n        if(ql <= mid) ret = min(ret, query(lc, L, mid, Add+add[o]));\n        if(qr > mid) ret = min(ret, query(rc, mid+1, R, Add+add[o]));\n        return ret;\n    }\n}ST;\nint main(){\n#ifndef ONLINE_JUDGE\n    freopen(\"test.in\", \"r\", stdin);\n    freopen(\"test.out\", \"w\", stdout);\n#endif\n    int n, k;\n    read(n); read(k);\n    For(i, 2, n) read(D[i]); For(i, 1, n) read(C[i]);\n    For(i, 1, n) read(S[i]); For(i, 1, n) read(W[i]); \n    n++; k++;\n    D[n] = INF;\n    For(i, 1, n){\n        lr[i] = lower_bound(D+1, D+n+1, D[i]-S[i])-D;\n        rr[i] = lower_bound(D+1, D+n+1, D[i]+S[i])-D;\n        if(D[i]+S[i] < D[rr[i]]) rr[i]--;\n        vq[rr[i]].pb(i);\n    }\n    int ans = INF;\n    For(j, 1, k){\n        if(j == 1){\n            int tot = 0;\n            For(i, 1, n){\n                f[i] = tot+C[i];\n                For(tmp, 0, vq[i].size()-1) tot += W[vq[i][tmp]];\n            }\n            ans = min(ans, f[n]);\n            continue;\n        }\n        ST.build(1, 1, n);\n        For(i, 1, n){\n            ql = 1; qr = i-1;\n            int add = qr? ST.query(1, 1, n, 0): 0;\n            f[i] = add+C[i];\n            For(tmp, 0, vq[i].size()-1){\n                ql = 1; qr = lr[vq[i][tmp]]-1;\n                if(qr > 0) ST.update(1, 1, n, W[vq[i][tmp]]);\n            }\n        }\n        ans = min(ans, f[n]);\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1485268434,
        "uid": 8925,
        "name": "miaowey",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    },
    {
        "content": "DP+\u7ebf\u6bb5\u6811\n\n\u5148\u8003\u8651\u6734\u7d20\u7684 DP \uff0c\u8bbe $f_{i,j}$ \u8868\u793a\u5728 $i$ \u5efa\u7b2c $j$ \u4e2a\u57fa\u7ad9\uff0c\u524d $i$ \u4e2a\u6751\u5e84\u7684\u6d88\u8017\u3002\n\n\u663e\u7136\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b $f_{i,j}=min\\{f_{k,j-1}+cost(k,i)\\}+c_i$\u3002\u5176\u4e2d $cost(i,j)$ \u8868\u793a\u5bf9\u4e8e $i,j$ \u4e4b\u95f4\u7684\u6751\u5e84\u53ea\u6709 $i$ \u548c $j$ \u5efa\u7acb\u4e86\u57fa\u7ad9\u7684\u8865\u507f\u8d39\u7528\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u7edf\u8ba1\u7b54\u6848\uff0c\u5728\u65e0\u7a77\u8fdc\u5904\u6211\u4eec\u65b0\u5efa\u7acb\u4e00\u4e2a\u6751\u5e84\uff0c\u5728\u5b83\u4e0a\u5efa\u7acb\u57fa\u7ad9\u7684\u8d39\u7528\u4e3a $0$ \uff0c\u8865\u507f\u8d39\u7528\u4e3a\u6b63\u65e0\u7a77\uff0c\u88ab\u8986\u76d6\u7684\u8303\u56f4\u4e3a $0$\uff0c\u5bf9\u5e94\u7684 $n$ \u548c $m$ \u90fd\u8981 $+1$ \uff0c\u6700\u7ec8\u7684\u7b54\u6848\u4e3a $min\\{f_{n,j}\\}$\u3002\n\n\u7531\u4e8e\u8f6c\u79fb\u53ea\u7528\u5230\u4e86 $f_{k,j-1}$ \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5206\u5c42\u8fdb\u884c DP \uff0c\u628a\u7b2c\u4e8c\u7ef4\u538b\u6389\uff0c\u5373 $f_{i}=min\\{f_{k}+cost(k,i)\\}+c_i $\u3002\n\n\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u5982\u4f55\u5feb\u901f\u8ba1\u7b97 $cost(k,i)$\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6751\u5e84\uff0c\u5efa\u7acb\u57fa\u7ad9\u540e\u80fd\u8986\u76d6\u5b83\u7684\u6751\u5e84\u5e94\u8be5\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u533a\u95f4\uff0c\u8bbe\u8fd9\u4e2a\u533a\u95f4\u8d77\u59cb\u70b9\u4e3a $st_i$ \uff0c\u7ed3\u675f\u70b9\u4e3a $ed_i$ \uff0c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u53ef\u4ee5\u4e8c\u5206\u6c42\u51fa\u3002\n\n\u5f53\u7b2c $i$ \u4e2a\u6751\u5e84\u51b3\u7b56\u5b8c\u6bd5\u540e\uff0c\u6211\u4eec\u679a\u4e3e\u6240\u6709 $ed_k=i$ \u7684\u6751\u5e84 $k$ \uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u94fe\u8868\u6765\u679a\u4e3e\uff0c\u90a3\u5982\u679c\u540e\u9762\u7684\u70b9\u5728 $1$ \u5230 $st_k-1$ \u8fd9\u4e2a\u533a\u95f4\u5185\u51b3\u7b56\uff0c\u5fc5\u7136\u8981\u52a0\u4e0a\u70b9 $k$ \u7684\u8d54\u507f\uff0c\u4e8e\u662f\u5728\u7ebf\u6bb5\u6811\u4e2d $1$ \u5230 $st_k-1$ \u8fd9\u4e2a\u533a\u95f4\u52a0\u4e0a $w_k$\uff0c\u5bf9\u7b2c $i$ \u4e2a\u6751\u5e84\u8fdb\u884c\u51b3\u7b56\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u6c42\u51fa\u524d\u9762\u7684\u6700\u5c0f\u503c\u518d\u52a0\u4e0a $c_i$ \u5373\u4e3a\u5f53\u524d\u5c42\u7684 $f_i$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(m\\times n\\log n)$\n\n$\\sf{Code}$\n```cpp\n#include<bits/stdc++.h>\n#define N 2001001\n#define MAX 2001\n#define inf 1e18\n#define re register\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst ll maxn=200000;\ninline void read(register ll &ret)\n{\n    ret=0;register ll pd=0;register char c=getchar();\n    while(!isdigit(c)){pd|=c=='-';c=getchar();}\n    while(isdigit(c)){ret=(ret<<1)+(ret<<3)+(c&15);c=getchar();}\n    ret=pd?-ret:ret;\n    return;\n}\nll n,m,d[N],c[N],s[N],w[N],st[N],ed[N],f[N],ans;\nvector<ll>v[N];\nstruct node\n{\n\tll l,r,mid,val;\n\tll tag;\n}seg[N];\ninline void pushup(re ll pos)\n{\n\tseg[pos].val=min(seg[pos<<1].val,seg[pos<<1|1].val);\n\treturn;\n}\ninline void build(re ll pos,re ll l,re ll r)\n{\n\tseg[pos].l=l,seg[pos].r=r,seg[pos].mid=l+r>>1,seg[pos].tag=0;\n\tif(l==r)\n\t\tseg[pos].val=f[l];\n\telse\n\t{\n\t\tbuild(pos<<1,l,seg[pos].mid);\n\t\tbuild(pos<<1|1,seg[pos].mid+1,r);\n\t\tpushup(pos);\n\t}\n\treturn;\n}\ninline void add(re ll pos,re ll num)\n{\n\tseg[pos].val+=num,seg[pos].tag+=num;\n\treturn;\n}\ninline void pushdown(re ll pos)\n{\n\tadd(pos<<1,seg[pos].tag);\n\tadd(pos<<1|1,seg[pos].tag);\n\tseg[pos].tag=0;\n\treturn;\n}\ninline void upgrade(re ll pos,re ll l,re ll r,re ll num)\n{\n\tif(seg[pos].l>=l&&seg[pos].r<=r)\n\t\treturn add(pos,num);\n\telse if(seg[pos].l>r||seg[pos].r<l)\n\t\treturn;\n\tpushdown(pos);\n\tupgrade(pos<<1,l,r,num);\n\tupgrade(pos<<1|1,l,r,num);\n\tpushup(pos);\n\treturn;\n}\ninline ll query(re ll pos,re ll l,re ll r)\n{\n\tif(seg[pos].l>=l&&seg[pos].r<=r)\n\t\treturn seg[pos].val;\n\telse if(seg[pos].l>r||seg[pos].r<l)\n\t\treturn inf;\n\tpushdown(pos);\n\treturn min(query(pos<<1,l,r),query(pos<<1|1,l,r));\n}\nsigned main()\n{\n\tread(n);\n\tread(m);\n\tfor(re int i=2;i<=n;i++)\n\t\tread(d[i]);\n\tfor(re int i=1;i<=n;i++)\n\t\tread(c[i]);\n\tfor(re int i=1;i<=n;i++)\n\t\tread(s[i]);\n\tfor(re int i=1;i<=n;i++)\n\t\tread(w[i]);\n\tn++,m++;\n\td[n]=w[n]=inf;\n\tfor(re int i=1;i<=n;i++)\n\t{\n\t\tst[i]=lower_bound(d+1,d+n+1,d[i]-s[i])-d;\n\t\ted[i]=upper_bound(d+1,d+n+1,d[i]+s[i])-d-1;\n\t\tv[ed[i]].push_back(i);\n\t}\n\tre ll now=0;\n\tfor(re int i=1;i<=n;i++)\n\t{\n\t\tf[i]=now+c[i];\n\t\tfor(re int j=0;j<v[i].size();j++)\n\t\t{\n\t\t\tre ll to=v[i][j];\n\t\t\tnow+=w[to];\n\t\t}\n\t}\n\tans=f[n];\n\tfor(re int i=2;i<=m;i++)\n\t{\n\t\tbuild(1,1,n);\n\t\tfor(re int j=1;j<=n;j++)\n\t\t{\n\t\t\tf[j]=query(1,1,j-1)+c[j];\n\t\t\tfor(re int k=0;k<v[j].size();k++)\n\t\t\t{\n\t\t\t\tre ll to=v[j][k];\n\t\t\t\tupgrade(1,1,st[to]-1,w[to]);\n\t\t\t}\n\t\t}\n\t\tans=min(ans,f[n]);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\texit(0);\n}\n```\n\n",
        "postTime": 1610463118,
        "uid": 176990,
        "name": "Celtic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2605 \u3010[ZJOI2010]\u57fa\u7ad9\u9009\u5740\u3011"
    }
]