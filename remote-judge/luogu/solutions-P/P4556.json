[
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P4556)\n\n\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u677f\u5b50\u9898\u76ee\u4e86\uff0c\u5199\u4e00\u5199\u5bf9\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7406\u89e3\n\n\u9996\u5148\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u662f\u628a\u4e00\u5927\u5806\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u8d77\u6765\u7684\u7b97\u6cd5\n\n\u5c3d\u7ba1\u590d\u6742\u5ea6\u770b\u8d77\u6765\u5e76\u4e0d\u662f\u975e\u5e38\u79d1\u5b66\uff0c\u4f46\u662f\u786e\u662f\u975e\u5e38\u4f18\u79c0\u7684$O(nlogn)$\n\n\u4e3b\u8981\u7684\u5199\u6cd5\u4e24\u79cd\n\n```cpp\nint merge(int a,int b,int x,int y) {\n\tif(!a) return b;if(!b) return a;\n\tif(x==y) {d[a]+=d[b];t[a]=x;return a;}\n\tint mid=x+y>>1;\n\tl[a]=merge(l[a],l[b],x,mid),r[a]=merge(r[a],r[b],mid+1,y);\n\tpushup(a);return a;\n}\n```\n\n\u628a$b$\u5408\u5e76\u5230$a$\u4e0a\n\n\u4f46\u662f\u6211\u4eec\u8fd9\u6837\u76f4\u63a5\u628a$b$\u5408\u5e76\u8fc7\u6765\u7684\u8bdd\uff0c\u5728\u4ee5\u540e\u7ee7\u7eed\u5408\u5e76$a$\u7684\u65f6\u5019\u53ef\u80fd\u5408\u5e76\u8fc7\u7a0b\u4e2d\u5c31\u4f1a\u7834\u574f$b$\u7684\u7ed3\u6784\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u53ea\u9002\u5408\u4e8e\u79bb\u7ebf\u4e0b\u6765\uff0c\u5408\u5e76\u5b8c\u6210\u4e4b\u540e\u7acb\u523b\u8be2\u95ee\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u50cf\u4e3b\u5e2d\u6811\u90a3\u6837\uff0c\u5408\u5e76\u4e0d\u5728\u539f\u6765\u7684\u6811\u4e0a\u800c\u662f\u65b0\u5f00\u8282\u70b9\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u79bb\u7ebf\u4e86\uff0c\u4e00\u8fb9\u8be2\u95ee\u4e00\u8fb9\u7528\n\n```cpp\nint merge(int a,int b,int x,int y) {\n\tif(!a) return b;if(!b) return a;\n\tint root=++cnt;\n\tif(x==y) {d[root]=d[a]+d[b];t[root]=x;return root;}\n\tint mid=x+y>>1;\n\tl[root]=merge(l[a],l[b],x,mid),r[root]=merge(r[a],r[b],mid+1,y);\n\tpushup(root);return root;\n}\n```\n\n\u7f3a\u70b9\u5c31\u662f\u975e\u5e38\u70b8\u7a7a\u95f4\n\n\u8fd9\u9053\u9898\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u76f4\u63a5\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4e4b\u540e\u6211\u4eec\u628a\u4e00\u4e2a\u8be2\u95ee\u53d8\u6210\u4e00\u6b21\u6811\u4e0a\u5dee\u5206\u7684\u5f62\u5f0f\uff0c\u4e4b\u540e\u76f4\u63a5\u5411\u4e0a\u5408\u5e76\u7ebf\u6bb5\u6811\u5c31\u597d\u4e86\n\n\u7531\u4e8e\u7a7a\u95f4\u5361\u5f97\u7d27\u8fd9\u91cc\u91c7\u7528\u4e86\u7b2c\u4e00\u79cd\u65b9\u5f0f\u79bb\u7ebf\u8be2\u95ee\n\n\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define maxn 100005\n#define M 6000005\n#define re register\n#define LL long long\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\ninline int read()\n{\n    char c=getchar();int x=0;while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-48,c=getchar();\n    return x;\n}\nstruct E{int v,nxt;}e[maxn<<1];\nint l[M],r[M],d[M],t[M];\nint top[maxn],fa[maxn],head[maxn],deep[maxn],son[maxn],sum[maxn],X[maxn],Y[maxn],Z[maxn],Ans[maxn];\nint n,m,rt[maxn],cnt,R,num;\ninline void add(int x,int y) {e[++num].v=y;e[num].nxt=head[x];head[x]=num;}\nvoid dfs1(int x) {\n    sum[x]=1;int maxx=-1;\n    for(re int i=head[x];i;i=e[i].nxt)\n    if(!deep[e[i].v])\n    {\n        deep[e[i].v]=deep[x]+1,fa[e[i].v]=x;\n        dfs1(e[i].v);\n        sum[x]+=sum[e[i].v];\n        if(sum[e[i].v]>maxx) maxx=sum[e[i].v],son[x]=e[i].v;\n    }\n}\nvoid dfs2(int x,int topf) {\n    top[x]=topf;\n    if(!son[x]) return;\n    dfs2(son[x],topf);\n    for(re int i=head[x];i;i=e[i].nxt) if(!top[e[i].v]) dfs2(e[i].v,e[i].v);\n}\ninline int LCA(int x,int y) {\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]<deep[top[y]]) std::swap(x,y);\n        x=fa[top[x]];\n    }\n    if(deep[x]<deep[y]) return x;return y;\n}\ninline void pushup(int a) {\n    if(d[l[a]]>=d[r[a]]) d[a]=d[l[a]],t[a]=t[l[a]];\n        else d[a]=d[r[a]],t[a]=t[r[a]];\n}\nint change(int a,int x,int y,int pos,int val) {\n    if(!a) a=++cnt;\n    if(x==y) {d[a]+=val,t[a]=x;return a;}\n    int mid=x+y>>1;\n    if(pos<=mid) l[a]=change(l[a],x,mid,pos,val);\n        else r[a]=change(r[a],mid+1,y,pos,val);\n    pushup(a);\n    return a;\n}\nint merge(int a,int b,int x,int y) {\n    if(!a) return b;if(!b) return a;\n    if(x==y) {d[a]+=d[b];t[a]=x;return a;}\n    int mid=x+y>>1;\n    l[a]=merge(l[a],l[b],x,mid),r[a]=merge(r[a],r[b],mid+1,y);\n    pushup(a);return a;\n}\nvoid Redfs(int x) {\n    for(re int i=head[x];i;i=e[i].nxt)\n    if(deep[e[i].v]>deep[x]) Redfs(e[i].v),rt[x]=merge(rt[x],rt[e[i].v],1,R);\n    if(d[rt[x]]) Ans[x]=t[rt[x]];\n}\nint main()\n{\n    n=read(),m=read();int x,y,z;\n    for(re int i=1;i<n;i++) x=read(),y=read(),add(y,x),add(x,y);\n    deep[1]=1,dfs1(1),dfs2(1,1);\n    for(re int i=1;i<=m;i++) X[i]=read(),Y[i]=read(),Z[i]=read(),R=max(R,Z[i]);\n    for(re int i=1;i<=m;i++)\n    {\n        int lca=LCA(X[i],Y[i]);\n        rt[X[i]]=change(rt[X[i]],1,R,Z[i],1),rt[Y[i]]=change(rt[Y[i]],1,R,Z[i],1);\n        rt[lca]=change(rt[lca],1,R,Z[i],-1);\n        if(fa[lca]) rt[fa[lca]]=change(rt[fa[lca]],1,R,Z[i],-1);\n    }\n    Redfs(1);\n    for(re int i=1;i<=n;i++) printf(\"%d\\n\",Ans[i]);\n    return 0;\n}\n```",
        "postTime": 1547646262,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5408\u5e76\u677f\u5b50\u9898\n\n _\u5bf9\u4e86\uff0c\u697c\u4e0b\u7684\u9898\u89e3\u662f\u5047\u7684\u53ef\u4ee5\u88abhack\u6389_ \n_____________\n\n\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u7ebf\u6bb5\u6811\u5408\u5e76\u8fd9\u79cd\u795e\u5947\u7684\u64cd\u4f5c\u4e86\n\n## \u524d\u7f6e\u829d\u58eb\uff1a\u7ebf\u6bb5\u6811\u5408\u5e76\n\n\u6240\u8c13\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u662f\u5c06\u4e24\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u6210\u4e00\u9897\u7ebf\u6bb5\u6811\u7684\u7b97\u6cd5\n\n\u4e0b\u9762\u7684\u5408\u5e76\u6682\u65f6\u53ef\u4ee5\u7406\u89e3\u6210\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\u4e24\u4e2a\u6570\u7ec4\u7684\u4e00\u4e9b\u4fe1\u606f(\u6bd4\u5982\u533a\u95f4\u548c\uff0c\u533a\u95f4\u6700\u5927\u503c\u4e4b\u7c7b\u7684)\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e24\u4e2a\u6570\u7ec4\u6309\u4f4d\u76f8\u52a0\uff0c\u540c\u65f6\u5f97\u5230\u8fd9\u4e2a\u6570\u7ec4\u6240\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\n\n\u95ee\u9898\u6765\u4e86\u7ebf\u6bb5\u6811\u660e\u660e\u662f\u597d\u597d\u7684\u7ebf\u6bb5\u6811\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u5408\u5e76\u5b83\u5462?\n\n\u663e\u7136\u4e24\u4e2a\u666e\u901a\u7684\u7ebf\u6bb5\u6811(\u4e5f\u5c31\u662f\u90a3\u79cd\u5de6\u513f\u5b50\u662fp<<1\u53f3\u513f\u5b50\u662fp<<1|1\u7684\u7ebf\u6bb5\u6811)\u6ca1\u6709\u5fc5\u8981\u4e13\u95e8\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u5408\u5e76\u5b83\u4eec\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5df2\u7ecf\u6ee1\u4e86\uff0c\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u76f4\u63a5\u628a\u4e24\u4e2a\u6570\u7ec4\u6309\u4f4d\u76f8\u52a0\u7136\u540e\u91cd\u65b0\u5efa\u4e00\u904d\u7ebf\u6bb5\u6811\u53ef\u80fd\u662f\u6700\u5feb\u7684\u65b9\u6cd5\u4e86\n\n\u4f46\u662f\u7ebf\u6bb5\u6811\u4f17\u6240\u5468\u77e5\u6709\u5f88\u591a\u7684\u53d8\u4f53\uff0c\u6bd4\u5982\u8bf4\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u8fd9\u79cd\u7ebf\u6bb5\u6811\u5f88\u6709\u53ef\u80fd\u4e0d\u662f\u6ee1\u7684\uff0c\u751a\u81f3\u53ea\u6709\u4e00\u6761\u94fe$O(logn)$\u4e2a\u8282\u70b9\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5408\u5e76\u4e24\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u63a5\u7740\u7528\u521a\u624d\u7684\u65b9\u6cd5\u5408\u5e76\u53ef\u80fd\u5c31\u6709\u4e9b\u4e0d\u5999\u4e86\n\n\u90a3\u4e48\u5f53\u7136\u8fd9\u91cc\u6709\u4e00\u4e2a\u51e0\u4e4e\u5bf9\u4e8e\u6240\u6709\u6570\u636e\u7ed3\u6784\u90fd\u9002\u7528\u7684\u5408\u5e76\u7b97\u6cd5\u53eb\u505a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5f53\u6211\u4eec\u5408\u5e76\u4e24\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u6211\u4eec\u5c31\u66b4\u529b\u7684\u628a\u5c0f\u7684\u7ebf\u6bb5\u6811\u4e2d\u7684\u5143\u7d20\u63d2\u5165\u5230\u5927\u7684\u7ebf\u6bb5\u6811\u91cc\u9762\u53bb\u3002\n\n\u4e0d\u8fc7\u6211\u4eec\u4f1a\u89c9\u5f97\u5176\u5b9e\u8fd9\u4e2a\u7b97\u6cd5\u4e5f\u662f\u6709\u70b9\u66b4\u529b\u7684\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b97\u6cd5\u628an\u4e2a\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5408\u5e76\u6210\u4e00\u9897\u5b8c\u6574\u7684\u5927\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\u662fO(nlog^2n)\u7684\n\n\u90a3\u8fd9\u91cc\u5c31\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\u8fd9\u4e2a\u7b97\u6cd5\u51fa\u573a\u7684\u65f6\u5019\u4e86\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5408\u5e76\u4e24\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\u662fO(\u4e24\u4e2a\u7ebf\u6bb5\u6811\u91cd\u53e0\u90e8\u5206)\u7684\n\n\u90a3\u4e48\u6211\u4eec\u662f\u5982\u4f55\u5b9e\u73b0\u4e24\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u8d77\u6765\u7684\u64cd\u4f5c\u5462\uff1f\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u628a\u7ebf\u6bb5\u68112\u6240\u5bf9\u5e94\u7684\u6570\u7ec4\u52a0\u5230\u7ebf\u6bb5\u68111\u4e0a\n\n\u90a3\u4e48\u6211\u4eec\u5728\u4e24\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u540c\u65f6\u8fdb\u884cdfs\uff0c\u7136\u540e\u6211\u4eecdfs\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u5de6\u513f\u5b50\u662f\u5426\u540c\u65f6\u6709\u4e24\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u540c\u65f6\u6709\u7684\u8bdd\u5c31\u8fdb\u53bbdfs\uff0c\u5426\u5219\u6211\u4eec\u770b\u4e00\u4e0b\u662f\u7ebf\u6bb5\u68111\u6ca1\u6709\u5de6\u513f\u5b50\u8fd8\u662f\u7ebf\u6bb5\u68112\u6ca1\u6709\u5de6\u513f\u5b50\uff0c\u5982\u679c\u662f\u7ebf\u6bb5\u68112\u6ca1\u6709\u5de6\u513f\u5b50\u7684\u8bdd\u6211\u4eec\u4ec0\u4e48\u4e8b\u4e5f\u4e0d\u7528\u5e72\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u68112\u5bf9\u5e94\u7684\u8fd9\u90e8\u5206\u533a\u95f4\u5168\u662f0\u52a0\u4e86\u4e5f\u767d\u52a0\u3002\n\n\u7136\u540e\u5982\u679c\u662f\u7ebf\u6bb5\u68111\u6ca1\u6709\u5de6\u513f\u5b50\u7684\u8bdd\uff0c\u6211\u4eec\u53d1\u73b0\u6b64\u65f6\u7684\u76f8\u52a0\u64cd\u4f5c\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e00\u6bb5\u533a\u95f4\u5168\u90e8\u6362\u6210\u7ebf\u6bb5\u68112\u6240\u5bf9\u5e94\u7684\u533a\u95f4\uff0c\u56e0\u6b64\u6211\u4eec\u76f4\u63a5\u8ba9\u7ebf\u6bb5\u68111\u7684\u5de6\u513f\u5b50\u7b49\u4e8e\u7ebf\u6bb5\u68112\u7684\u5de6\u513f\u5b50\u5c31\u53ef\u4ee5\u4e86(\u8fd9\u4e00\u90e8\u5206\u6709\u70b9\u50cf\u4e3b\u5e2d\u6811\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u56e0\u4e3a\u8fd9\u6837\u5408\u5e76\u4e4b\u540e\u7ebf\u6bb5\u68111\u548c\u7ebf\u6bb5\u68112\u5c06\u4f1a\u5171\u7528\u4e00\u4e9b\u8282\u70b9)\n\n\u5f53\u7136\u5bf9\u4e8e\u53f3\u513f\u5b50\u4e5f\u8981\u91c7\u53d6\u540c\u6837\u7684\u5904\u7406\u65b9\u5f0f\u4e86\n\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u662f\u8fd9\u4e24\u4e2a\u8282\u70b9\u90fd\u662f\u53f6\u5b50\uff0c\u65e2\u6ca1\u6709\u5de6\u513f\u5b50\u4e5f\u6ca1\u6709\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5c06\u8282\u70b92\u52a0\u5230\u8282\u70b91\u4e0a\u7136\u540e\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86\n\n\u6700\u540e\u5c31\u662f\u56e0\u4e3a\u7ebf\u6bb5\u68111\u4e0a\u5de6\u53f3\u513f\u5b50\u7684\u4fe1\u606f\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e2a\u8282\u70b9\u8fdb\u884c\u4e00\u6b21$update/pushup/merge$\u64cd\u4f5c(\u4e0d\u540c\u4eba\u8d77\u4e0d\u4e00\u6837\u7684\u51fd\u6570\u540d\uff0c\u4f46\u662f\u5e72\u7684\u5e94\u8be5\u90fd\u662f\u540c\u4e00\u4ef6\u4e8b\u60c5)\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u6210\u529f\u5b8c\u6210\u4e86\u5c06\u4e24\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u64cd\u4f5c\u8fa3~\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u5c06n\u4e2a\u53ea\u67091\u4e2a\u5143\u7d20\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u62101\u4e2a\u6709n\u4e2a\u5143\u7d20\u7684\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\u5c31\u662fO(nlogn)\u7684\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u8003\u8651\u6211\u4eec\u521a\u624d\u7684\u7b97\u6cd5\u6d41\u7a0b\uff0c\u6211\u4eec\u6bcf\u6b21dfs\u4e00\u4e2a\u8282\u70b9\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5dfs\u5230\u8fd9\u4e2a\u8282\u70b9\u5c31\u8bc1\u660e\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u90fd\u6709\u8282\u70b9,\u6211\u4eec\u53d1\u73b0\u5408\u5e76\u4e4b\u540e\u5c5e\u4e8e\u7ebf\u6bb5\u68112\u7684\u8282\u70b9\u5c31\u4e0d\u4f1a\u88abdfs\u5230\u4e86(\u56e0\u4e3a\u7ebf\u6bb5\u68111\u7684\u8282\u70b9\u66ff\u6362\u4e86\u5b83\u7684\u4f4d\u7f6e)\uff0c\u53ef\u80fd\u88abdfs\u5230\u7684\u5c5e\u4e8e\u7ebf\u6bb5\u68112\u7684\u8282\u70b9\u662f\u88ab\u63a5\u5230\u7ebf\u6bb5\u68111\u7684\u90a3\u4e00\u90e8\u5206\uff0c\u4f46\u662f\u90a3\u90e8\u5206\u8282\u70b9\u6839\u672c\u5c31\u6ca1\u88abdfs\u5230\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u88abdfs\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u5c31\u662fO(nlogn)\u4e86\n\n_____________________\n\n## \u672c\u9898\u9898\u89e3\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bb2\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u663e\u7136\u7684\u66b4\u529b\u662f\u5229\u7528\u6811\u4e0a\u5dee\u5206\u7684\u601d\u60f3\uff0c\u628a$u,v$\u4e0a\u53d1\u653e\u4e00\u4e2a\u6570\u5b57\u6539\u6210u\u52301\u53d1\u653e\u4e00\u4e2a\u6570\u5b57\uff0cv\u52301\u53d1\u653e\u4e00\u4e2a\u6570\u5b57\uff0cu,v\u7684lca\u52301\u64a4\u56de\u4e00\u4e2a\u6570\u5b57\n\uff0cu,v\u7684lca\u7684father\u52301\u64a4\u56de\u4e00\u4e2a\u6570\u5b57\u8fd94\u4e2a\u64cd\u4f5c\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6bcf\u4e2a\u8282\u70b9\u4e0a\u5f00\u4e00\u4e2acnt\u6570\u7ec4$cnt_{i}$\u8868\u793ai\u8fd9\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u90a3\u4e48\u8282\u70b9i\u4e0a\u51fa\u73b0\u6700\u591a\u7684\u6570\u5b57\u5c31\u662fcnt\u6570\u7ec4\u7684\u6700\u5927\u503c(\u8fd9\u4e0d\u662f\u5e9f\u8bdd\u561b)\n\n\u90a3\u4e48\u6211\u4eec\u6c42i\u8282\u70b9\u7684cnt\u6570\u7ec4\u53ef\u4ee5\u66b4\u529b\u7684\u628a\u5b83\u7684\u6240\u6709\u5b69\u5b50\u7684cnt\u6570\u7ec4\u6309\u4f4d\u76f8\u52a0\u8d77\u6765\u6765\u8fdb\u884c\u6c42\u89e3\uff0c\u7136\u540e\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u4e0a\u6709\u63d2\u5165\u6216\u8005\u5220\u9664\u6570\u5b57\u7684\u64cd\u4f5c\u6211\u4eec\u518d\u5bf9cnt\u6570\u7ec4\u8fdb\u884c\u51e0\u6b21\u64cd\u4f5c\u5c31\u884c\u4e86~\n\n\u4e0d\u8fc7\u8fd9\u6837\u592a\u6162\u4e86\u2026\u2026\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u6162\u4e3b\u8981\u662f\u6570\u7ec4\u6309\u4f4d\u76f8\u52a0\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u5b9e\u73b0\u6570\u7ec4\u6309\u4f4d\u76f8\u52a0\u8fd9\u4e2a\u64cd\u4f5c\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u6bcf\u4e2a\u70b9\u5f00\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u8868\u793a\u8fd9\u4e2a\u70b9\u4e0a\u6709\u4ec0\u4e48\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u51e0\u6b21\uff0c\u7136\u540e\u6c42\u70b9i\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u5c31\u662f\u5c06\u5b83\u6240\u6709\u5b69\u5b50\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u4e00\u8d77\u7136\u540e\u518d\u5bf9\u5408\u5e76\u51fa\u6765\u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u4e00\u4e9b\u5728\u8fd9\u4e2a\u8282\u70b9\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\n\n\u90a3\u4e48\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u5c31\u662f\u533a\u95f4\u7684\u6700\u5927\u503c\uff0c\u6211\u4eec\u6700\u540e\u67e5\u627ei\u70b9\u6700\u5927\u7684\u6570\u5b57\u7684\u65f6\u5019\u5c31\u5728\u70b9i\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u67e5\u4e00\u4e0b$1-10^5$\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u5c31\u884c\u4e86\n\n\u7136\u540e\uff0c\u8fd9\u9898131mb\uff0c\u867d\u7136\u7a7a\u95f4\u590d\u6742\u5ea6$O(nlogn)$\u4f46\u662f\u7565\u5fae\u7b97\u7b97\u7a7a\u95f4\u8fd8\u662f\u53ef\u4ee5\u5361\u8fc7\u53bb\u7684\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;const int N=1e5+10;typedef long long ll;\nint n;int m;int v[2*N];int x[2*N];int ct;int al[N];int fa[N][22];int dep[N];int ans[N];\nstruct data//\u5b58\u6700\u5927\u503c\u7684\u7ed3\u6784\u4f53 \n{\n    int u;int cnt;\n    friend bool operator <(data a,data b){return (a.cnt==b.cnt)?a.u>b.u:a.cnt<b.cnt;}\n    friend data operator +(data a,data b){return (data){a.u,a.cnt+b.cnt};}\n};vector <data> ve[N];\ninline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\nstruct linetree//\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5408\u5e76 \n{\n    int s[40*N][2];data v[40*N];int ct;\n    inline void ih(){ct=n;}\n    inline void ins(int p,int l,int r,data va)//\u63d2\u5165 \n    {\n        if(r-l==1){v[p]=va+v[p];return;}int mid=(l+r)/2;\n        if(va.u<=mid)ins(s[p][0]=s[p][0]?s[p][0]:++ct,l,mid,va);\n        else ins(s[p][1]=s[p][1]?s[p][1]:++ct,mid,r,va);v[p]=max(v[s[p][0]],v[s[p][1]]);\n    }\n    inline void mg(int p1,int p2,int l,int r)//\u5408\u5e76 \n    {\n        if(r-l==1){v[p1]=v[p1]+v[p2];return;}int mid=(l+r)/2;//\u5206\u60c5\u51b5\u8ba8\u8bba\u4e0b \n        if(s[p1][0]&&s[p2][0])mg(s[p1][0],s[p2][0],l,mid);else if(s[p2][0])s[p1][0]=s[p2][0];\n        if(s[p1][1]&&s[p2][1])mg(s[p1][1],s[p2][1],mid,r);else if(s[p2][1])s[p1][1]=s[p2][1];\n        v[p1]=max(v[s[p1][0]],v[s[p1][1]]);\n    }\n}lt;\ninline void dfs1(int u)//\u5904\u7406lca \n{\n    for(int i=0;fa[u][i];i++)fa[u][i+1]=fa[fa[u][i]][i];dep[u]=dep[fa[u][0]]+1;\n    for(int i=al[u];i;i=x[i])if(v[i]!=fa[u][0])fa[v[i]][0]=u,dfs1(v[i]);\n}\ninline int lca(int u,int v)//\u6c42lca \n{\n    if(dep[u]<dep[v])swap(u,v);for(int d=dep[u]-dep[v],i=0;d;d>>=1,i++)if(d&1)u=fa[u][i];\n    if(u==v)return u;for(int i=18;i>=0;i--)if(fa[u][i]!=fa[v][i])u=fa[u][i],v=fa[v][i];\n    return fa[u][0];\n}\ninline void dfs2(int u)//\u7ebf\u6bb5\u6811\u5408\u5e76 \n{\n    for(int i=al[u];i;i=x[i])if(v[i]!=fa[u][0])dfs2(v[i]),lt.mg(u,v[i],0,1e5);\n    vector <data> :: iterator it;\n    for(it=ve[u].begin();it!=ve[u].end();++it){lt.ins(u,0,1e5,*it);}\n    ans[u]=lt.v[u].u;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);lt.ih();\n    for(int i=1,u,v;i<n;i++){scanf(\"%d%d\",&u,&v);add(u,v),add(v,u);}dfs1(1);\n    for(int i=1,u,v,va;i<=m;i++)//\u62c6\u62104\u4e2a\u64cd\u4f5c \n    {\n        scanf(\"%d%d%d\",&u,&v,&va);int lc=lca(u,v);\n        ve[u].push_back((data){va,1});ve[v].push_back((data){va,1});\n        ve[lc].push_back((data){va,-1});ve[fa[lc][0]].push_back((data){va,-1});\n    }dfs2(1);for(int i=1;i<=n;i++)printf(\"%d\\n\",ans[i]);return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n\n```\n\n\n\n\n\n\n\n",
        "postTime": 1537421655,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u600e\u4e48\u4f60\u8c37\u4eba\u5747\u7ebf\u6bb5\u6811\u5408\u5e76\u554a\u2026\u2026\u6765\u4e00\u53d1\u867d\u7136$\\log^2 n$\u4f46\u662f\u5e38\u6570\u5c0f\u5f88\u591a\u7684\u6811\u5256\u89e3\u6cd5\u5427\u3002\n\n\u6811\u5256\u89e3\u6cd5\u7684\u6838\u5fc3\u5185\u5bb9\u662f\uff1a\n\n- \u628a\u6811\u641e\u6210\u4e00\u4e2a\u5e8f\u5217\uff1b\n\n- \u628a\u4e00\u6b21\u94fe\u4fee\u6539\u641e\u6210$\\log n$\u6b21\u65b0\u5e8f\u5217\u4e0a\u7684\u533a\u95f4\u4fee\u6539\uff1b\n\n- \u7136\u540e\u6109\u5feb\u5dee\u5206\u3002\n\n\u628a\u6811\u641e\u6210\u5e8f\u5217\u548c\u628a\u94fe\u4fee\u6539\u641e\u6210\u533a\u95f4\u4fee\u6539\uff08\u4e00\u4e2a\u4e2a\u533a\u95f4\u6b63\u662f\u94fe\u4fee\u6539\u5206\u5272\u51fa\u7684\u4e00\u6761\u6761\u91cd\u94fe\u5728\u65b0\u5e8f\u5217\u4e0a\u7684\u6620\u5c04\uff09\u6b63\u662f\u6811\u5256\u7684\u610f\u4e49\u6240\u5728\uff0c\u5982\u679c\u4f60\u4e0d\u4f1a\uff0c\u6211\u5f3a\u70c8\u63a8\u8350[\u8fd9\u4e2a\u535a\u5ba2](https://www.luogu.org/blog/zyxxs/post-xiao-yi-jiang-tan-dfs-xu-yu-shu-lian-pou-fen)\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u4ed6\u8bb2\u7684\u8fd8\u662f\u4e0d\u9519\u7684\u3002~~\uff08\u6211\u5439\u6211\u81ea\u5df1\uff09~~\n\n\u8fd9\u65f6\uff0c\u4e00\u6761\u94fe$(x,y)$\u7684\u4fee\u6539\u5df2\u7ecf\u88ab\u641e\u6210\u533a\u95f4$[a_1,b_1],[a_2,b_2]...[a_k,b_k]$\u7684\u4fee\u6539\u3002\u8003\u8651\u4e00\u4e0b\u5dee\u5206\u601d\u60f3\uff0c\u533a\u95f4\u4fee\u6539\u53ef\u4ee5\u8f6c\u53d8\u6210\u5728$a_i$\u6253\u4e00\u4e2a\u201c\u589e\u52a0\u7b2c$z$\u79cd\u6551\u6d4e\u7cae\u201d\u7684\u6807\u8bb0\uff0c\u5728$b_i+1$\u5904\u6253\u4e00\u4e2a\u201c\u51cf\u5c11\u7b2c$z$\u79cd\u6551\u6d4e\u7cae\u201d\u7684\u6807\u8bb0\uff0c\u7136\u540e\u4ece$1$\u626b\u63cf\u5230$N$\u7d2f\u52a0\u4e00\u904d\u6240\u6709\u8fd9\u79cd\u6807\u8bb0\u3002\u5982\u679c\u53ea\u6709\u4e00\u79cd\u6551\u6d4e\u7cae\uff0c\u6211\u4eec\u76f4\u63a5\u8bbe\u4e00\u4e2a\u6574\u6570$S$\u4e0d\u65ad\u7d2f\u52a0\u5c31\u884c\u4e86\u3002\u7136\u800c\u6551\u6d4e\u7cae\u79cd\u7c7b\u592a\u591a\uff0c\u5f04\u4e00\u4e2a\u5927\u5c0f\u4e3a$10^5$\u7684\u6876\u53c8\u5f88\u96be\u67e5\u8be2\u6700\u5927\u503c\uff0c\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u7528\u4ec0\u4e48\u4e1c\u897f\u7d2f\u52a0\u6807\u8bb0\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u589e\u52a0\u3001\u51cf\u5c11\u6551\u6d4e\u7cae\u5e76\u5728\u7ebf\u67e5\u8be2\u6700\u591a\u7684\u6551\u6d4e\u7cae\u54c1\u79cd\uff0c\u6240\u4ee5\u4f60\u4f1a\u5f88\u5bb9\u6613\u5730\u60f3\u5230\u6743\u503c\u7ebf\u6bb5\u6811\uff1a\u5b83\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u6876\u5e8f\u5217$A[i]$\uff0c\u7b2c$i$\u79cd\u6551\u6d4e\u7cae\u6709$A[i]$\u4e2a\u3002\u4e0a\u6587\u7684\u201c\u7d2f\u52a0\u6807\u8bb0\u201d\u4e8e\u662f\u4e5f\u5c31\u53d8\u6210\u5728\u8fd9\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u4fee\u6539\u3002\u589e\u52a0\u7b2c$z$\u79cd\u6551\u6d4e\u7cae\u5c31\u662f\u5728\u8fd9\u68f5\u7ebf\u6bb5\u6811\u4e0a\u7684\u7b2c$z$\u4f4d\u7f6e+1\uff0c\u51cf\u5c11\u5219\u53cd\u4e4b\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u68f5\u7ebf\u6bb5\u6811\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u6700\u5927\u503c\u3002\n\n\u6211\u521a\u624d\u53ef\u80fd\u8bb2\u7684\u6709\u70b9\u4e71\uff0c\u6240\u4ee5\u6211\u4eec\u7406\u4e00\u4e0b\uff0c\u603b\u7ed3\u4e00\u4e0b\u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n```\n- \u6811\u5256\u521d\u59cb\u5316\n- \u628a\u6bcf\u4e00\u6b21\u5728\u94fe(x,y)\u6295\u653e\u6551\u6d4e\u7cae\u62c6\u6210\u5728\u533a\u95f4[a[1],b[1]],[a[2],b[2]]...[a[k],b[k]]\u4e0a\u7684\u4fee\u6539\n~ \uff08\u5bf9\u533a\u95f4[a[i],b[i]]\u7684\u4fee\u6539\u53d8\u6210\u5f53\u6743\u503c\u7ebf\u6bb5\u6811\u626b\u5230a[i]\u5904\u65f6\u589e\u52a0\u4e00\u4e2az\u54c1\u79cd\u6551\u6d4e\u7cae\uff0c\u5728b[i]+1\u5904\u51cf\u5c11\u4e00\u4e2a\uff09\n- \u6743\u503c\u7ebf\u6bb5\u6811\u4ece1\u4f4d\u7f6e\u5411\u540e\u5f00\u59cb\u626b\u63cf\uff0c\u6bcf\u5230\u4e00\u4e2a\u70b9\u5c31\u5904\u7406\u8fd9\u4e2a\u70b9\u7684\u4fee\u6539\uff08\u589e\u52a0/\u51cf\u5c11z\u79cd\u6551\u6d4e\u7cae\uff09\uff08\u7ffb\u8bd1\uff1a\u628a\u7ebf\u6bb5\u6811\n  \u7684z\u4f4d\u7f6e\u589e\u52a0/\u51cf\u5c111\uff09\uff0c\u7136\u540e\u8f93\u51fa\u6700\u591a\u7684\u6551\u6d4e\u7cae\n```\n\n\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std; \n\nconst int maxN=1000005;\n\nint N,M;\n\nint lnk[maxN];\nint pre[maxN<<1],tgt[maxN<<1],cnt;\nvoid add_E(int u,int v){pre[++cnt]=lnk[u],tgt[cnt]=v,lnk[u]=cnt;}\n\n//\u975e\u5e38\u6a21\u677f\u7684\u6811\u5256\u521d\u59cb\u5316\nint fa[maxN],A[maxN],siz[maxN],son[maxN],dep[maxN],\n    top[maxN],seg[maxN],rev[maxN],idx;\nvoid DFS1(int u,int f){\n    fa[u]=f;siz[u]=1;dep[u]=dep[f]+1;\n    for(int e=lnk[u];e;e=pre[e])if(tgt[e]!=f){\n        DFS1(tgt[e],u);\n        siz[u]+=siz[tgt[e]];\n        if(siz[tgt[e]]>siz[son[u]]||!son[u]) son[u]=tgt[e];\n    }\n}\nvoid DFS2(int u,int f){\n    seg[u]=++idx;rev[idx]=u;\n    if(son[u]) top[son[u]]=top[u],DFS2(son[u],u);\n    for(int e=lnk[u];e;e=pre[e])if(tgt[e]!=f&&tgt[e]!=son[u]){\n        top[tgt[e]]=tgt[e];\n        DFS2(tgt[e],u);\n    }\n}\n\nint Lnk[maxN];\nint Pre[maxN*20],Val[maxN*20],Cnt;\nvoid add_O(int x,int val){    //\u8fd9\u91cc\u91c7\u7528\u7c7b\u4f3c\u524d\u5411\u661f\u7684\u65b9\u5f0f\u5b58\u50a8\u4fee\u6539\n    Pre[++Cnt]=Lnk[x],Val[Cnt]=val,Lnk[x]=Cnt;\n}\n\nvoid CHAI(int u,int v,int c){  //\u62c6\uff01\n    int fu=top[u],fv=top[v];\n    while(fu!=fv){\n        if(dep[fu]<dep[fv]) swap(u,v),swap(fu,fv);\n        add_O(seg[fu],c);add_O(seg[u]+1,-c);  //-c\u8868\u793a\u51cf\u5c11c\u4f4d\u7f6e\u6551\u6d4e\u7cae\n        u=fa[fu],fu=top[u];\n    }\n    if(dep[u]<dep[v]) swap(u,v);\n    add_O(seg[v],c);add_O(seg[u]+1,-c);\n}\n\n//\u7ebf\u6bb5\u6811\u90e8\u5206\nint Max_cnt[maxN<<2],Max_pos[maxN<<2];\nvoid push_up(int x){\n    if(Max_cnt[x*2]>=Max_cnt[x*2+1]) Max_cnt[x]=Max_cnt[x*2],Max_pos[x]=Max_pos[x*2];\n    //\u5c0f\u4e8e\u7b49\u4e8e\u5f88\u5173\u952e\uff0c\u628a\u5c0f\u4e8e\u7b49\u4e8e\u6539\u6210\u5c0f\u4e8e\u4f60\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\n    else Max_cnt[x]=Max_cnt[x*2+1],Max_pos[x]=Max_pos[x*2+1];\n}\nvoid Build(int x,int l,int r){\n    if(l==r){Max_cnt[x]=0;Max_pos[x]=l;return;}\n    int mid=(l+r)>>1;\n    Build(x*2,l,mid);Build(x*2+1,mid+1,r);\n    push_up(x);\n}\nvoid Update(int x,int l,int r,int pos,int K){\n    if(l==r){Max_cnt[x]+=K;return;}\n    int mid=(l+r)>>1;\n    if(pos<=mid) Update(x*2,l,mid,pos,K);\n    else Update(x*2+1,mid+1,r,pos,K);\n    push_up(x);\n}\n\nint ans[maxN];\n\nint main(){\n    scanf(\"%d%d\",&N,&M);\n    for(int i=1;i<N;i++){\n        int u,v;scanf(\"%d%d\",&u,&v);\n        add_E(u,v);add_E(v,u);\n    }\n    DFS1(1,0);top[1]=1;DFS2(1,0);  //\u6811\u5256\u521d\u59cb\u5316\n    while(M--){\n        int x,y,z;scanf(\"%d%d%d\",&x,&y,&z);\n        CHAI(x,y,z);  //\u62c6\u6389\uff01\n    }\n    Build(1,1,100000);  //\u6743\u503c\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\n    for(int i=1;i<=N;i++){\n        for(int e=Lnk[i];e;e=Pre[e]){  //\u201c\u524d\u7f00\u548c\u201d\u7684\u201c\u7d2f\u52a0\u201d\n            if(Val[e]>0) Update(1,1,100000,Val[e],1);\n            else Update(1,1,100000,-Val[e],-1);\n        }\n        ans[rev[i]]=Max_cnt[1]?Max_pos[1]:0;  //\u9898\u76ee\u5f3a\u8c03\u8fc7\u4e86\n    }\n    for(int i=1;i<=N;i++) cout<<ans[i]<<endl;\n}\n```",
        "postTime": 1563358689,
        "uid": 58567,
        "name": "x\u4e49x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4e0b\u6807\u4e3a\u6551\u6d4e\u7cae\u79cd\u7c7b\uff0c\u533a\u95f4\u7ef4\u62a4\u6570\u91cf\u6700\u591a\u7684\u6551\u6d4e\u7cae\u7f16\u53f7\uff08\u4e0b\u6807\uff09\u3002\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u7b54\u6848\u5373\u4e3a$tre[rot[x]]$\u3002\n\n\u7136\u540e\u8fd0\u7528\u6811\u4e0a\u70b9\u7684\u5dee\u5206\u601d\u60f3\uff0c\u5bf9\u4e8e\u5206\u53d1\u8def\u5f84$u,v$\uff0c\u6211\u4eec\u5728$u$\u4e0a+1\uff0c\u5728$v$+1\uff0c\u5728$lca(u,v)$\u5904-1\uff0c\u5728$fa(lca)$\u5904-1\uff0c\u6700\u540e\u7edf\u8ba1\u65f6\u81ea\u5e95\u5411\u4e0a\u505a\u6811\u4e0a\u524d\u7f00\u548c\u3001\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u5f97\u5f53\u524d\u8282\u70b9\u4fe1\u606f\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5408\u5e76\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0$tre[rot[x]]$\u4e0d\u4e3a$0$\uff0c\u4f46\u662f$sum[rot[x]]$\u4e3a$0$\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u8868\u793a\u7f16\u53f7\u4e3a$tre[rot[x]]$\u7684\u6551\u6d4e\u7cae\u6570\u91cf\u4e3a$0$\uff0c\u6240\u4ee5\u6b64\u65f6\u5e94\u8be5\u5c06$ans[x]$\u66f4\u65b0\u4e3a$0$\uff08\u6839\u636e\u9898\u610f\uff09\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define MAXN 100001\n#define LOG 19\n#define mxr 100000\nusing namespace std;\ninline int read(){\n    char ch=getchar();int s=0;\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') s=s*10+(ch^'0'),ch=getchar();\n    return s;\n}\nint head[MAXN],nxt[MAXN*2],vv[MAXN*2],tot;\ninline void add_edge(int u, int v){\n    vv[++tot]=v;\n    nxt[tot]=head[u];\n    head[u]=tot;\n}\nint n,m;\n#define MAXM MAXN*80\nint tre[MAXM],sum[MAXM],sl[MAXM],sr[MAXM],cnt;\nvoid push_up(int x){\n    if(sl[x]==0){\n        sum[x]=sum[sr[x]];\n        tre[x]=tre[sr[x]];\n        return;\n    }\n    if(sr[x]==0){\n        sum[x]=sum[sl[x]];\n        tre[x]=tre[sl[x]];\n        return;\n    }\n    if(sum[sl[x]]>=sum[sr[x]]){\n        sum[x]=sum[sl[x]];\n        tre[x]=tre[sl[x]];\n    }else{\n        sum[x]=sum[sr[x]];\n        tre[x]=tre[sr[x]];\n    }\n}\nvoid change(int &x, int l, int r, int pos, int val){\n    if(x==0) x=++cnt;\n    if(l==r){\n        sum[x]+=val;\n        tre[x]=pos;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(pos<=mid) change(sl[x], l, mid, pos, val);\n    else change(sr[x], mid+1, r, pos, val);\n    push_up(x);\n}\nint merge(int a, int b, int l, int r){\n    if(a==0||b==0) return a+b;\n    if(l==r){\n        sum[a]+=sum[b];\n        return a;\n    }\n    int mid=(l+r)>>1;\n    sl[a]=merge(sl[a], sl[b], l, mid);\n    sr[a]=merge(sr[a], sr[b], mid+1, r);\n    push_up(a);\n    return a;\n}\nint f[MAXN][LOG],dep[MAXN];\nvoid dfs(int u, int fa){\n    f[u][0]=fa;\n    dep[u]=dep[fa]+1;\n    for(int i=1;i<LOG;++i)\n        f[u][i]=f[f[u][i-1]][i-1];\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i];\n        if(v==fa) continue;\n        dfs(v, u);\n    }\n}\nint lca(int a, int b){\n    if(dep[a]<dep[b]) swap(a, b);\n    for(int i=LOG-1;i>=0;--i)\n        if(dep[f[a][i]]>=dep[b])\n            a=f[a][i];\n    if(a==b) return a;\n    for(int i=LOG-1;i>=0;--i)\n        if(f[a][i]!=f[b][i])\n            a=f[a][i],b=f[b][i];\n    return f[a][0];\n}\nint rot[MAXN],ans[MAXN];\nvoid calc(int u, int fa){\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i];\n        if(v==fa) continue;\n        calc(v, u);\n        rot[u]=merge(rot[u], rot[v], 1, mxr);\n    }\n    ans[u]=tre[rot[u]];\n    if(sum[rot[u]]==0) ans[u]=0;\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<n;++i){\n        int a=read(),b=read();\n        add_edge(a, b);\n        add_edge(b, a);\n    }\n    dfs(1, 0);\n    for(int i=1;i<=m;++i){\n        int a=read(),b=read(),x=read();\n        int l=lca(a, b);\n        change(rot[a], 1, mxr, x, 1);\n        change(rot[b], 1, mxr, x, 1);\n        change(rot[l], 1, mxr, x, -1);\n        change(rot[f[l][0]], 1, mxr, x, -1);\n    }\n    calc(1, 0);\n    for(int i=1;i<=n;++i) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n\n",
        "postTime": 1572503896,
        "uid": 63896,
        "name": "Santiego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u611f\u8c22 @cx233666 \u7ed9\u6211\u63d0\u4f9b\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u6bd2\u7624\u9898\n\n\u9996\u5148\u697c\u4e0a\u7684\u90a3\u4e2a\u4ee3\u7801\u88ab\u67d0\u4f4d\u5927\u4f6c$Hack$\u4e86\uff0c\u6211\u5f00\u59cb\u88ab\u5361\u7a7a\u95f4\u6765\u770b\u9898\u89e3\u7ed3\u679c\u53d1\u73b0\u697c\u4e0a\u8ddf\u6211\u5dee\u4e0d\u591a\u8fc7\u4e86\u5f88\u60ca\u8bb6\uff1f\uff1f\uff1f\uff08\u61f5\u903c\u72b6\u6001\uff09\n\n\u6211\u5f53\u65f6\u4ee5\u4e3a\u6211\u5b66\u4e86\u4e2a\u5047\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4e00\u770b\u53f3\u8fb9\uff0c\u8bf6\u88ab$Hack$\u4e86\u5c31\u5f88\u8212\u670d\u3002\n\n\u53cd\u6b63\u6211\u662f\u53ea\u4f1a\u65b0\u5efa\u8282\u70b9\u7684\u90a3\u79cd\uff0c\u6709\u8c01\u4f1a\u4e0d\u65b0\u5efa\u7684\u53ef\u4ee5\u6765\u6559\u6211\u3002\n\n$Update$\uff1a\u8fd9\u9053\u9898\u8fd8\u662f\u53ef\u4ee5\u4e0d\u65b0\u5efa\u7684\u597d\u50cf\uff0c\u540c\u7406\u4e8e\u4fee\u6539\u4e0d\u7528\u65b0\u5efa\uff0c\u7406\u89e3\u4e86\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u8c8c\u4f3c\u8fd8\u662f\u5bf9\u904d\u5386\u987a\u5e8f\u6709\u8981\u6c42\u3002\n\n\u672c\u6587\u7740\u91cd\u8bb2\u89e3\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7a7a\u95f4\u4f18\u5316\u95ee\u9898\uff0c\u5b58\u5728\u5176\u4ed6\u5199\u6cd5\u4e0d\u9700\u8981\u6d89\u53ca\u672c\u6587\u5199\u6cd5\u3002\n\n----\n\n\n## \u672c\u9898\u601d\u8def (\u524d\u7f6e\u6280\u80fd \u7ebf\u6bb5\u6811\u5408\u5e76\uff09\n\n\u9996\u5148\u80af\u5b9a\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f**\u6811\u4e0a\u5dee\u5206\u7136\u540e\u7ebf\u6bb5\u6811\u5408\u5e76**\u662f\u5427\uff0c\u5177\u4f53\u5c31\u662f\u5bf9\u4e8e\u4e00\u6761$(u,v)$\u7684\u8def\u5f84\uff0c\u5728$u$\u548c$v$\u4e0a\u653e\u4e0b$+1$\u7684\u6807\u8bb0\uff0c\u7136\u540e\u5728$lca$\u4e0e$lca$\u7236\u4eb2\u5904\u653e\u4e0a$-1$\u7684\u6807\u8bb0\uff0c\u6700\u540e\u4e00\u904d$dfs$\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7edf\u8ba1\u6240\u6709\u7b54\u6848\uff08\u7ebf\u6bb5\u6811\u6c42\u5168\u5c40\u6700\u5927\u503c\u5e94\u8be5\u4f1a\u5427\uff09\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u6839\u8282\u70b9\u5904\u5f97\u5230\u7b54\u6848\u4e86\u3002\n\n\n\u7136\u540e\u4f60\u53d1\u73b0\u8fd9\u9053\u9898\u7684**\u7a7a\u95f4\u53ea\u6709\u82e6\u903c\u7684$128MB$**\uff0c\u5bf9\u554a\uff0c\u95ee\u9898\u5c31\u5728\u8fd9\u91cc\uff0c\u4e0d\u7136\u6211\u8fd8\u8bb2\u4ec0\u4e48\u3002\n\n\u6211\u5f00\u59cb\u50cf\u4e0a\u9762\u90a3\u6837\u6253\u4e86\uff0c\u662f\u6700\u539f\u59cb\u7684\u505a\u6cd5\uff0c\u653e\u6807\u8bb0\u5c31\u76f4\u63a5\u5728$Dfs$\u4e4b\u524d\u653e\u5b8c\u4e86\uff0c\u800c\u4e14\u7528\u7684\u8fd8\u662f\u65b0\u589e\u8282\u70b9\u7684\u90a3\u79cd$Update$\uff0c\u7136\u540e\u4e00\u6ce2\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u8fd9\u6837$100$\u500d\u7a7a\u95f4\u597d\u50cf\u90fd\u8fc7\u4e0d\u4e86\u3002\n\n\u8fd9\u6837\u7b97\u4e00\u6ce2\u7a7a\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662f $O(nlogn*4)$ \u7ea7\u522b\u7684\n\n\u7136\u540e\u8fd9\u4e2a\u662f\u5904\u7406\u653e\u6807\u8bb0\u7684\u4e00\u4e2a\u6570\u7ec4\uff0c\u5f00\u56db\u4e2a\u603b\u5171\u662f$100MB$\u5de6\u53f3\uff0c\u7136\u540e\u4f60\u8fd8\u8981\u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u6ce2\uff0c\u540c\u6837\u662f\u8fd9\u4e48\u5927\uff0c\u6240\u4ee5\u5927\u6982\u8981$200MB$\uff0c\u6211\u53ea\u662f\u7b97\u4e86\u4e2a\u5927\u6982\uff0c\u6ca1\u4ed4\u7ec6\u5206\u6790\uff0c\u4f46\u4e5f\u5dee\u4e0d\u591a\u4e86\u3002\u5982\u679c\u6709\u54ea\u4f4d\u5927\u4f6c\u53ef\u4ee5\u6709\u66f4\u597d\u7684\u5904\u7406\u7a7a\u95f4\u65b9\u5f0f\u53ef\u4ee5\u544a\u8bc9\u6211\u4e00\u4e0b\uff0c\u76ee\u524d\u8fd9\u6837\u662f\u5b8c\u5168\u4e0d\u884c\u7684\u3002\n\n\u7136\u540e\u6211\u5c31\u5728\u7f51\u4e0a\u627e\u6807\u7a0b\uff0c\u7ed3\u679c\u53d1\u73b0\u81ea\u5df1\u5f88\u8822\u3002\n\n----\n## \u7ebf\u6bb5\u6811\u5408\u5e76\u7a7a\u95f4\u4f18\u5316\n\uff08\u90e8\u5206\u5185\u5bb9\u4ec5\u9650\u62e5\u6709\u67d0\u79cd\u6027\u8d28\u7684\u9898\u76ee\uff09\n\n\u9996\u5148\u6700\u57fa\u672c\u7684\u4e00\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u5148\u4fee\u6539\u518d\u5408\u5e76\u5427\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5df2\u7ecf\u5b58\u5728\u7684\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8be5\u8282\u70b9\u7684\u503c\uff0c\u800c\u4e0d\u662f\u65b0\u5efa\u8282\u70b9\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4f18\u5316\u4e00\u90e8\u5206\u7a7a\u95f4\uff0c\u4f46\u662f\u4ec5\u4ec5\u662f\u5e38\u6570\u7ea7\u522b\u7684\u4f18\u5316\u3002\n\n\u4f46\u662f\u522b\u7740\u6025\u3002\n\n\u7b2c\u4e8c\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u6253\u4e00\u4e2a\u5783\u573e\u56de\u6536\uff08\u5927\u6982\u662f\u53eb\u8fd9\u4e2a\uff09\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u4e4b\u540e\uff0c\u5e76\u4e0d\u9700\u8981\u67e5\u8be2\u67d0\u68f5\u6811\u7684\u4fe1\u606f\uff0c\u800c\u5bf9\u4e8e\u6240\u6709\u7684\u7b54\u6848\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u4e0b\u6765\uff0c\u6240\u4ee5\u4e8b\u5b9e\u4e0a\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u68f5\u6811\u5408\u5e76\u5230\u4e86\u5b83\u7236\u4eb2\u8282\u70b9\u4e0a\uff0c\u5e76\u4e14\u6211\u4eec\u8bb0\u5f55\u4e86\u8fd9\u68f5\u6811\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u8fd9\u68f5\u6811\u5c31\u6ca1\u7528\u4e86\uff0c\u5b83\u7684\u7a7a\u95f4\u5c31\u53ef\u4ee5\u7a7a\u51fa\u6765\u7559\u7ed9\u540e\u9762\u7528\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8bb0\u4e00\u4e0b\u53ef\u4ee5\u91cd\u590d\u5229\u7528\u7684\u70b9\uff0c\u6bcf\u6b21\u65b0\u5efa\u8282\u70b9\u7684\u65f6\u5019\u5c31\u4f18\u5148\u7528\u8fd9\u4e9b\u70b9\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\u3002\n\n```cpp\n\tinline int New() { if(tot) return rab[tot--]; return ++cnt; }\n\tinline void Throw(int x) { rab[++top]=x,ls[x]=rs[x]=Max[x]=id[x]=0; }\n\n```\n\n$rab$\u6570\u7ec4\u662f\u5783\u573e\u6570\u7ec4\uff0c\u4e5f\u5c31\u662f\u8bb0\u5f55\u6240\u6709\u53ef\u4ee5\u91cd\u590d\u5229\u7528\u7684\u70b9\u3002\n\n$tot$\u662f\u5783\u573e\u6570 $cnt$\u662f\u6240\u6709\u8282\u70b9\u7684\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u65b0\u5efa\u5168\u65b0\u7684\u8282\u70b9\u3002\n\n$New$ \u51fd\u6570\u5728\u4f60\u9700\u8981\u65b0\u5efa\u8282\u70b9\u7684\u65f6\u5019\u7528\uff0c\u8fd4\u56de\u8282\u70b9\u7f16\u53f7\u3002\n\n$Throw$ \u610f\u5473\u7740\u8fd9\u4e2a\u8282\u70b9\u6ca1\u7528\u4e86\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4e22\u6389\u5b83\u3002\n\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6781\u5927\u7684\u63d0\u9ad8\u7a7a\u95f4\u7684\u5229\u7528\u7387\u3002\n\n**\u4f46\u662f\u4f60\u53d1\u73b0\u5355\u7eaf\u52a0\u8fd9\u4e2a\u4f9d\u7136\u8fc7\u4e0d\u4e86\u3002**\n\n\uff08\u5982\u679c\u4f60\u662f$Dfs$\u4e4b\u524d\u52a0\u6807\u8bb0\u7684\u8bdd\uff09\n\n\u8fd9\u6837\u6211\u4eec\u770b\u8d77\u6765\u4f18\u5316\u4e86\u5927\u6982\u4e00\u534a\u7684\u7a7a\u95f4\uff0c\u770b\u8d77\u6765\u662f\u8fc7\u4e86\u7684\uff0c\u5b9e\u9645\u4e0a\uff0c\u662f\u5047\u7684\uff0c\u770b\u8d77\u6765\u5927\u6982\u662f\u5408\u5e76\u65f6\u4fdd\u7559\u7684\u8282\u70b9\u6570\u53ea\u6709\u5f53\u524d\u51e0\u4e2a\u7ebf\u6bb5\u6811\uff1f\u518d\u60f3\u60f3\uff0c\u4e0d\u53ea\u662f\u8fd9\u4e9b\uff0c\u6240\u6709\u8be2\u95ee\u7684\u7a7a\u95f4\u8fd8\u5728\u91cc\u9762\uff0c\u4f60\u4f1a\u5e26\u7740\u8fd9\u4e9b\u7a7a\u95f4\u4e00\u8d77\u8dd1\uff0c\u800c\u8fd9\u6837\u7684\u7a7a\u95f4\u5e76\u4e0d\u662f\u4e00\u5c42\uff0c\u800c\u662f\u6240\u6709\u7684\u7a7a\u95f4\u6162\u6162\u51cf\u5c0f\uff0c\u6700\u540e\u53ea\u5269\u4e0b\u6839\u8282\u70b9\u90a3\u68f5\u6811\u7684\u7a7a\u95f4\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u8fb9$Dfs$\u8fb9\u653e\u6807\u8bb0\uff0c\u5f53\u7136\u8fd9\u91cc\u6307\u628a\u6807\u8bb0\u4e22\u8fdb\u7ebf\u6bb5\u6811\u91cc\uff0c\u4e0d\u8fc7\u5982\u679c\u4f60\u662f\u5c06\u513f\u5b50\u5408\u5e76\u5411\u81ea\u5df1\u7684\u8bdd\uff0c\u4f9d\u65e7\u662f\u5047\u7684\uff0c\u83ca\u82b1\u6811\u5927\u6982\u5c31\u51c9\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u8981\u628a\u81ea\u5df1\u5408\u5e76\u5411\u7236\u4eb2\uff0c\u8fd9\u6837\u6211\u4eec\u6bcf\u6b21\u5c31\u662f\u7528\u5230\u4e86\u5f53\u524d\u8fd9\u4e2a\u70b9\u7684\u7ebf\u6bb5\u6811\u548c\u6b63\u5728\u88ab\u5408\u5e76\u7684\u7236\u4eb2\u7684\u90a3\u68f5\u7ebf\u6bb5\u6811\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u6700\u5927\u5c31\u662f\u4e24\u500d\u7684$nlogn$\u5427\uff0c\u800c\u5b9e\u9645\u4e0a\u53d6\u51b3\u4e8e\u4fe1\u606f\u7684\u5bc6\u5ea6\uff0c\u5b9e\u9645\u6bd4\u8fd9\u4e2a\u597d\u50cf\u8981\u5c0f\u5f88\u591a\uff0c\u672c\u9898\u6570\u636e\u5f00$40$\u500d\u7a7a\u95f4\u662f\u5b8c\u5168\u8db3\u591f\u7684\uff0c\u7f51\u4e0a\u770b\u89c1\u4e00\u4e2a\u4e8c\u5341\u500d\u7a7a\u95f4\u7684\u5199$Bfs$\u7684\u8fc7\u4e86\uff0c\u5c31\u5f88\u5f3a\u3002\n\n\u5173\u4e8e\u7a7a\u95f4\u95ee\u9898\uff0c\u5982\u679c\u6709\u66f4\u52a0\u8be6\u7ec6\u7684\u8bc1\u660e\u53ef\u4ee5\u6559\u6211\u4e00\u4e0b\uff0c\u672c\u4eba\u5e76\u4e0d\u662f\u7279\u522b\u80fd\u591f\u7406\u89e3\u8fd9\u4e2a\u3002\u672c\u6587\u4ec5\u5f53\u629b\u7816\u5f15\u7389\uff0c\u6216\u662f\u7ed9\u4e88\u4e3a\u7a7a\u95f4\u95ee\u9898\u800c\u70e6\u607c\u7684\u9009\u624b\u6307\u5f15\u9053\u8def\u3002\n\n\u4e0b\u9762\u662f\u901a\u8fc7\u4ee3\u7801\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\n#include<ctime>\nusing namespace std;\n#define ll long long\n#define N 101000\n#define Z 100000\n#define inf 1e9\n#define RG register\ninline ll read(){\n    RG ll x=0,t=1;RG char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\n\nint n,m,top,first[N],ans[N];\nstruct mona { int nxt,en; } s[N<<1];\nstruct joker { int nxt,en,op; } ;\ninline void Insert(int x,int y) { s[++top]=(mona) { first[x],y },first[x]=top; }\nstruct SeqTree{\n\tint cnt,ls[N*40],rs[N*40],Max[N*40],id[N*40],rt[N],rab[N*40],tot,top,first[N]; joker s[N<<2]; \n\tinline void Insert(int x,int y,int op) { s[++top]=(joker) { first[x],y,op },first[x]=top; }\n\tinline int New() { if(tot) return rab[tot--]; return ++cnt; }\n\tinline void Throw(int x) { rab[++top]=x,ls[x]=rs[x]=Max[x]=id[x]=0; }\n\tinline void Pushup(int x){\n\t\tif(Max[ls[x]]>=Max[rs[x]]) Max[x]=Max[ls[x]],id[x]=id[ls[x]];\n\t\telse Max[x]=Max[rs[x]],id[x]=id[rs[x]];\n\t}\n\tinline void Modify(int l,int r,int &x,int pos,int val){\n\t\tif(!x) x=New(); if(l==r) { Max[x]+=val,id[x]=l;  }\n\t\telse{int mid=l+r>>1;\n\t\tif(pos<=mid) Modify(l,mid,ls[x],pos,val);\n\t\telse Modify(mid+1,r,rs[x],pos,val);\n\t\tPushup(x);} if(!Max[x]) id[x]=0;\n\t}\n\tinline int Merge(int l,int r,int u,int v){\n\t\tif(!u||!v) return u|v;\n\t\tint now=New(),mid=l+r>>1; if(l==r) Max[now]=Max[u]+Max[v],id[now]=l;\n\t\telse ls[now]=Merge(l,mid,ls[u],ls[v]),rs[now]=Merge(mid+1,r,rs[u],rs[v]),Pushup(now);\n\t\tThrow(u),Throw(v); return now;\n\t}\n} T;\n\nstruct Tree{\n\tint top[N],son[N],siz[N],fa[N],dep[N];\n\tinline void Dfs(int k,int Fa){\n\t\tfa[k]=Fa,siz[k]=1,dep[k]=dep[Fa]+1;\n\t\tfor(RG int i=first[k];i;i=s[i].nxt){\n\t\t\tint en=s[i].en; if(en==Fa) continue ;\n\t\t\tDfs(en,k),siz[k]+=siz[en];\n\t\t\tif(siz[son[k]]<siz[en]) son[k]=en;\n\t\t}   return ;\n\t}\n\tinline void Dfs2(int k,int to){\n\t\ttop[k]=to; if(son[k]) Dfs2(son[k],to);\n\t\tfor(RG int i=first[k];i;i=s[i].nxt){\n\t\t\tint en=s[i].en; if(en==fa[k]||en==son[k]) continue ;\n\t\t\tDfs2(en,en);\n\t\t}\n\t}\n\tinline int Lca(int u,int v){\n\t\twhile(top[u]!=top[v]){\n\t\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\t\tu=fa[top[u]];\n\t\t}   return dep[u]<dep[v]?u:v;\n\t}\n} S;\n\ninline void Dfs(int k,int fa){\n\tfor(RG int i=first[k];i;i=s[i].nxt) if(s[i].en!=fa) Dfs(s[i].en,k);\n\tfor(RG int i=T.first[k];i;i=T.s[i].nxt) T.Modify(1,Z,T.rt[k],T.s[i].en,T.s[i].op);\n\tans[k]=T.id[T.rt[k]];\n\tif(S.fa[k]) T.rt[S.fa[k]]=T.Merge(1,Z,T.rt[S.fa[k]],T.rt[k]);\n\treturn ;\n}\n\nint main(){\n\tn=read(),m=read();\n\tfor(RG int i=1;i<n;++i){\n\t\tint x=read(),y=read();\n\t\tInsert(x,y),Insert(y,x);\n\t}   S.Dfs(1,0),S.Dfs2(1,1);\n\tfor(RG int i=1;i<=m;++i){\n\t\tint u=read(),v=read(),val=read();\n\t\tint lca=S.Lca(u,v),Flca=S.fa[lca];\n\t\tT.Insert(u,val,1),T.Insert(v,val,1),T.Insert(lca,val,-1),T.Insert(Flca,val,-1);\n\t}   Dfs(1,0); for(RG int i=1;i<=n;++i) printf(\"%d\\n\",ans[i]);\n}\n\n```",
        "postTime": 1537261131,
        "uid": 66636,
        "name": "mona",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "### $dsu\\ on\\ tree$\u7684\u505a\u6cd5\uff1a\n(\u5982\u679c\u6ca1\u5199\u8fc7$dsu$\u53ef\u4ee5\u770b[\u8fd9\u91cc](https://blog.csdn.net/QAQ__QAQ/article/details/53455462))\n\n\u5bf9\u4fee\u6539\u64cd\u4f5c\u505a\u4e00\u4e0b\u5dee\u5206\u653e\u5230\u5bf9\u5e94\u70b9\u4e0a\uff0c\u5c31\u6210\u4e86\u6c42\u6bcf\u4e2a\u70b9\u5b50\u6811\u5185\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\uff0c\u8fd9\u5c31\u548c[CF600E](http://codeforces.com/contest/600/problem/E)\u7c7b\u4f3c\u4e86\u3002\u76f4\u63a5\u7528$dsu$\u3002\n\n\u4fee\u6539\u67d0\u4e2a\u989c\u8272\u51fa\u73b0\u6b21\u6570\u7684\u65f6\u5019\uff0c\u6700\u5927\u503c\u4e0d\u80fd$O(1)$\u6c42\u51fa\uff0c\u5f97\u5957\u4e2a$set$\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f$O(q\\log^2n)$\uff0c\u7a7a\u95f4\u662f$O(n)$\u7684\u3002\u4f46\u5e38\u6570\u5e76\u4e0d\u5927\u3002\n\n> \u5173\u4e8e\u590d\u6742\u5ea6\uff0c\u5728CF600E\u4e2d\u5bf9\u4e00\u4e2a\u70b9\u7684\u4fee\u6539\u662f$O(1)$\u7684\uff0c\u800c\u672c\u9898\u4e2d\u53ef\u80fd\u662f$O(q)$\uff08\u4e00\u4e2a\u70b9\u4e0a\u6302\u7740\u5f88\u591a\u6b21\u4fee\u6539\uff09\u3002\u4f46$dsu$\u7684\u590d\u6742\u5ea6\u4fdd\u8bc1\u5728\u4e8e\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u7edf\u8ba1$O(\\log n)$\u6b21\uff0c\u6240\u4ee5\u4e0d\u7b97$set$\u590d\u6742\u5ea6\u4f9d\u65e7\u662f$O(q\\log n)$\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\uff1a\n\n\u8ba1\u7b97\u8f7b\u513f\u5b50\u5b50\u6811\u8d21\u732e\u7684\u65f6\u5019\u5fc5\u987b\u81ea\u53f6\u5b50\u5411\u4e0a\u66f4\u65b0\uff0c\u5426\u5219\u5728\u4e2d\u95f4\u4f1a\u51fa\u73b0\u67d0\u79cd\u989c\u8272\u51fa\u73b0\u6b21\u6570$<0$\u7684\u60c5\u51b5\u5bfc\u81f4RE...\uff08\u56e0\u4e3a\u5dee\u5206\u7684\u51cf\u6807\u8bb0\u5728\u4e0a\u9762\uff0c\u52a0\u6807\u8bb0\u5728\u5e95\u5c42\uff09\uff1b\n\n\u5bf9\u5b50\u6811\u7684DFS\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3eDFS\u5e8f\u4ee3\u66ff\uff0c\u5e94\u8be5\u80fd\u4f18\u5316\u4e0d\u5c11\u5e38\u6570\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <set>\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n#define gc() getchar()\ntypedef long long LL;\nconst int N=1e5+5;\n\nint dep[N],fa[N],sz[N],son[N],top[N],L[N],R[N],A[N],Max,tm[N],cnt[N],Ans[N];\nstd::set<int> st[N];\nstruct Graph\n{\n\tint Enum,H[N],nxt[N<<2],to[N<<2];\n\tinline void AE(int u,int v)\n\t{\n\t\tto[++Enum]=v, nxt[Enum]=H[u], H[u]=Enum;\n\t\tto[++Enum]=u, nxt[Enum]=H[v], H[v]=Enum;\n\t}\n\tinline void AQ(int u,int v)\n\t{\n\t\tto[++Enum]=v, nxt[Enum]=H[u], H[u]=Enum;\n\t}\n}T,Q;\n\ninline int read()\n{\n\tint now=0;register char c=gc();\n\tfor(;!isdigit(c);c=gc());\n\tfor(;isdigit(c);now=now*10+c-'0',c=gc());\n\treturn now;\n}\ninline int LCA(int u,int v)\n{\n\twhile(top[u]!=top[v]) dep[top[u]]>dep[top[v]]?u=fa[top[u]]:v=fa[top[v]];\n\treturn dep[u]<dep[v]?u:v;\n}\nvoid DFS1(int x)\n{\n\tint mx=0; sz[x]=1;\n\tfor(int i=T.H[x],v; i; i=T.nxt[i])\n\t\tif((v=T.to[i])!=fa[x])\n\t\t\tfa[v]=x, dep[v]=dep[x]+1, DFS1(v), sz[x]+=sz[v], sz[v]>mx&&(mx=sz[v],son[x]=v);\n}\nvoid DFS2(int x,int tp)\n{\n\tstatic int Index=0;\n\tA[L[x]=++Index]=x, top[x]=tp;\n\tif(son[x])\n\t{\n\t\tDFS2(son[x],tp);\n\t\tfor(int i=T.H[x],v; i; i=T.nxt[i])\n\t\t\tif((v=T.to[i])!=fa[x] && v!=son[x]) DFS2(v,v);\n\t}\n\tR[x]=Index;\n}\ninline void Add(int c)\n{\n\tint t=tm[c]; ++tm[c];\n\t--cnt[t], ++cnt[t+1], st[t].erase(c), st[t+1].insert(c);\n\tif(t+1>tm[Max]||(t+1==tm[Max] && c<Max)) Max=c;\n}\ninline void Subd(int c)\n{\n\tint t=tm[c]; --tm[c];\n\t--cnt[t], ++cnt[t-1], st[t].erase(c), st[t-1].insert(c);\n\tif(c==Max) !cnt[t] ? Max=*st[t-1].begin() : Max=*st[t].begin();\n}\ninline void Upd(int x)\n{\n\tfor(int i=Q.H[x]; i; i=Q.nxt[i])\n\t\ti&1 ? Add(Q.to[i]) : Subd(Q.to[i]);\n}\nvoid Solve(int x,bool keep)\n{\n\tstatic int Time,vis[N];\n\tfor(int i=T.H[x],v; i; i=T.nxt[i])\n\t\tif((v=T.to[i])!=fa[x] && v!=son[x]) Solve(v,0);\n\tif(son[x]) Solve(son[x],1);\n\n\tfor(int i=T.H[x],v; i; i=T.nxt[i])\n\t\tif((v=T.to[i])!=fa[x] && v!=son[x])\n\t\t\tfor(int j=R[v]; j>=L[v]; --j) Upd(A[j]);//\u8981\u5012\u5e8f\u679a\u4e3e\n\tUpd(x), Ans[x]=tm[Max]?Max:0;\n\n\tif(!keep)\n\t{\n\t\tMax=0, ++Time;\n\t\tfor(int u=L[x]; u<=R[x]; ++u)\n\t\t\tfor(int i=Q.H[A[u]]; i; i=Q.nxt[i])\n\t\t\t{\n\t\t\t\tint c=Q.to[i];\n\t\t\t\tif(vis[c]!=Time) vis[c]=Time, --cnt[tm[c]], st[tm[c]].erase(c), ++cnt[tm[c]=0], st[0].insert(c);\n\t\t\t}\n\t}\n}\n\nint main()\n{\n\tint n=read(),m=read();\n\tfor(int i=1; i<n; ++i) T.AE(read(),read());\n\tDFS1(1), DFS2(1,1);\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tint x=read(),y=read(),z=read(),w=LCA(x,y);\n\t\tQ.AQ(x,z), Q.AQ(w,z), Q.AQ(y,z), Q.AQ(fa[w],z);\n\t}\n\tfor(int i=1; i<=n; ++i) st[0].insert(i);\n\tMax=0, cnt[0]=n, Solve(1,1);\n\tfor(int i=1; i<=n; ++i) printf(\"%d\\n\",Ans[i]);\n\n\treturn 0;\n}\n```",
        "postTime": 1546827034,
        "uid": 39887,
        "name": "SovietPower\u2728",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u6b22\u8fce\u5e38\u6765[\u849f\u84bb\u7684blog](https://www.cnblogs.com/flashhu/p/9651161.html)\u8f6c\u8f6c\n\n\u61d2\u5f97\u603b\u7ed3\u4e86\uff0c\u53ef\u4ee5%%%mona%%%\n\n\u4e3b\u6d41\u505a\u6cd5\u662f\u6811\u5256\uff0c\u636e\u8bf4\u4e24\u4e2a$\\log$\uff0c\u849f\u84bb\u4f5c\u4e3aG2\u51c6AFO\u9009\u624b\u8fd8\u4e0d\u592a\u4f1a\u5c31\u4e0d\u591a\u63d0\u4e86\u3002\n\n\u7136\u800c\u8fd9\u9898\u53ef\u4ee5\u5165\u95e8\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u590d\u6742\u5ea6\u4e00\u4e2a$\\log$\uff0c\u4e8e\u662f\u849f\u84bb\u5c31\u5199\u4e86\u4e00\u4e0b\u3002\n\n~~\u5bf9\u849f\u84bb\u6765\u8bf4\u5c11\u6709\u76841A\uff08flashess\u6709\u4e00\u6b21\u50bb\u903c\u5fd8\u52a0pushup\u4e0d\u7b97\u5427\uff09~~\n\n\u6811\u4e0a\u5dee\u5206\u601d\u60f3\uff0c\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4fee\u6539\u7b49\u4e8e\u5728\u94fe\u4e24\u7aef\u4e0b\u6807$z$\u5904$+1$\uff0c\u5728$LCA$\u548c$LCA$\u7684\u7236\u4eb2\u5904$-1$\uff0c\u7136\u540e\u81ea\u5e95\u5411\u4e0a\u5408\u5e76\u3002LCA\u53ef\u4ee5\u76f4\u63a5Tarjan\u6c42\u3002\n\n\u7136\u800c\u8981\u7b97\u7b97\u7a7a\u95f4\u3002\u52a8\u6001\u5f00\u70b9\u603b\u6570$n\\log n$\uff08\u8ba4\u4e3a$n,m,$\u503c\u57df\u540c\u9636\uff09\uff0c\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u5de6\u53f3\u513f\u5b50\u548c\u533a\u95f4$max$\uff0cint\u53604\u5b57\u8282\uff0c\u603b\u5171\u5feb80MB\u4e86\uff0c\u518d\u52a0\u4e0a\u90bb\u63a5\u8868\uff0c\u6808\u7a7a\u95f4\u4ec0\u4e48\u4e71\u4e03\u516b\u7cdf\u7684\uff0c\u867d\u8bf4\u5e94\u8be5\u52c9\u5f3a\u4e0d\u4f1a\u70b8\uff0c\u4f46\u4e5f\u591f\u5361\u4e86\u3002\n\n\u6709\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u6211\u4eec\u5728$LCA$\u548c$LCA$\u7236\u4eb2\u5904\u505a\u51cf\u6cd5\u7684\u65f6\u5019\uff0c\u5bf9\u5e94\u4e0b\u6807\u7684\u8282\u70b9\u80af\u5b9a\u5df2\u7ecf\u5b58\u5728\u4e86\u3002\u6240\u4ee5\u505a\u51cf\u6cd5\u7684\u90e8\u5206\u76f4\u63a5\u7528vector\uff08\u849f\u84bb\u624b\u5199\u4e86\u94fe\u8868\uff09\u5b58\u4e0b\u9700\u8981$-1$\u7684\u4e0b\u6807\u5373\u53ef\u3002\u7ebf\u6bb5\u6811\u90e8\u5206\u7684\u7a7a\u95f4\u9a6c\u4e0a\u5c11\u4e86\u4e00\u534a\uff0c\u4e00\u70b9\u4e5f\u4e0d\u5361\u4e86\u3002\n\n\u4ee3\u7801\u77ed\uff081.8k\uff09\uff0c\u5e38\u6570\u6709\u70b9\u5927\uff0c\u6bd4\u6811\u5256\u6162\uff0c\u8ddf\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5927\u4e8e\u6811\u5256\u4e0d\u65e0\u5173\u7cfb\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\n#define RG register\n#define R RG int\n#define G if(++ip==ie)fread(ip=buf,1,SZ,stdin)\n#define Pushup mx[x]=max(mx[lc[x]],mx[rc[x]])\nusing namespace std;\nconst int SZ=1<<19,N=1e5+1,M=6e5+9,L=3.5e6;\nchar buf[SZ],*ie=buf+SZ,*ip=ie-1;\nint p=1,ehe[N],qhe[N],dhe[N],ne[M],to[M],id[M];bool fl[M];//\u6ce8\u610f\u8fd9\u91cc\u7684\u4e09\u4e2a\u8868\u5934\nint q,rt[N],lc[L],rc[L],mx[L];\nint tmp,updv=1,f[N],fa[N],ans[N];\ninline int in(){\n    G;while(*ip<'-')G;\n    R x=*ip&15;G;\n    while(*ip>'-'){x*=10;x+=*ip&15;G;}\n    return x;\n}\ninline int gf(R x){//\u5e76\u67e5\u96c6\n    return x==f[x]?x:f[x]=gf(f[x]);\n}\ninline int qry(R x){//\u627e\u51fa\u6700\u5927\u503c\u4e0b\u6807\n    R l=0,r=N,m;\n    while(l<r){\n        m=(l+r)>>1;\n        if(mx[lc[x]]>=mx[rc[x]])r=m,x=lc[x];\n        else l=m+1,x=rc[x];\n    }\n    return l;\n}\nvoid upd(R&x,R l,R r){//\u5355\u70b9\u66f4\u65b0\n    if(!x)x=++q;\n    if(l==r){mx[x]+=updv;return;}\n    R m=(l+r)>>1;\n    tmp<=m?upd(lc[x],l,m):upd(rc[x],m+1,r);\n    Pushup;\n}\nvoid mer(R x,R y,R l,R r){//\u7ebf\u6bb5\u6811\u5408\u5e76\n    if(l==r){mx[x]+=mx[y];return;}\n    R m=(l+r)>>1;\n    if(lc[x]&&lc[y])mer(lc[x],lc[y],l,m);\n    else lc[x]+=lc[y];\n    if(rc[x]&&rc[y])mer(rc[x],rc[y],m+1,r);\n    else rc[x]+=rc[y];\n    Pushup;\n}\nvoid dfs(R x){//\u4e00\u904ddfs\u4e00\u6c14\u5475\u6210\n    for(R i=ehe[x];i;i=ne[i])\n        if(to[i]!=fa[x]){\n            fa[to[i]]=x;dfs(to[i]);\n            mer(rt[x],rt[to[i]],1,N);\n        }\n    for(R i=qhe[x];i;i=ne[i])//Tarjan-LCA\n        if(fl[i>>1]){//\u51cf\u6cd5\u76f4\u63a5\u94fe\u8868\u5b58\u4e0b\u6807\n            ne[++p]=dhe[tmp=gf(to[i])];id[dhe[tmp]=p]=id[i];\n            ne[++p]=dhe[tmp=fa[tmp]]  ;id[dhe[tmp]=p]=id[i];\n        }\n        else fl[i>>1]=1;\n    for(R i=dhe[x];i;i=ne[i])//\u51cf\u6cd5\u5f00\u59cb\n        tmp=id[i],upd(rt[x],0,N);\n    ans[x]=qry(rt[x]);f[x]=fa[x];\n}\nint main(){\n    R n=in(),m=in(),i,x,y;\n    for(i=1;i<n;++i){\n        x=in();y=in();\n        ne[++p]=ehe[x];to[ehe[x]=p]=y;\n        ne[++p]=ehe[y];to[ehe[y]=p]=x;\n    }\n    for(i=1;i<=n;++i)\n        f[i]=i,rt[i]=++q;//\u849f\u84bb\u7684\u8fd9\u79cdmerge\u5199\u6cd5\u9700\u8981\u6839\u8282\u70b9\u975e\u7a7a\n    for(i=1;i<=m;++i){\n        x=in();y=in();tmp=in();\n        upd(rt[x],0,N);upd(rt[y],0,N);\n        ne[++p]=qhe[x];to[qhe[x]=p]=y;id[p]=tmp;\n        ne[++p]=qhe[y];to[qhe[y]=p]=x;id[p]=tmp;\n    }\n    updv=-1;dfs(1);\n    for(i=1;i<=n;++i)printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1538146222,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "**\u600e\u4e48\u6ca1\u4eba\u5199Splay\u542f\u53d1\u5f0f\u5408\u5e76\u554a\uff0c\u6211\u6765\u5199\u4e00\u4e2a**\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n1. \u6811\u4e0a\u5dee\u5206\u3002\u4e00\u8a00\u4ee5\u853d\u4e4b\uff0c**\u5f53\u5bf9$x$\uff0c$y$\u7684\u8def\u5f84\u6dfb\u52a0\u8d21\u732e\u65f6\uff0c\u8f6c\u5316\u4e3a\u5bf9$x$\uff0c$y$\u6dfb\u52a0\u8d21\u732e\uff0c\u5bf9$lca$\uff0c\u548c$lca$\u7684\u7236\u4eb2\u6dfb\u52a0\u8d1f\u8d21\u732e\uff0c\u6700\u540e\u8ba1\u7b97\u65f6\uff0c\u8ba1\u7b97$x$\u4e3a\u6839\u7684\u5b50\u6811\u7684\u7b54\u6848\uff0c\u5c31\u662f$x$\u7684\u7b54\u6848\u3002**\n\n2. $Splay$\u3002\u4e0d\u4f1a\u7684\u53bb\u666e\u901a\u5e73\u8861\u6811\u5199\u5199\u5427\u3002\u4e4b\u524d\u5728\u6d1b\u8c37QQ\u7fa4\u8ba4\u8bc6\u7684\u4e00\u4e2a\u5927\u4f6c\u8ddf\u6211\u8bf4\uff0c$Splay$\u542f\u53d1\u5f0f\u5408\u5e76\u65f6\uff0c\u5982\u679c\u6bcf\u6b21\u6309\u5347\u5e8f\u63d2\u5165\uff0c\u6709\u4e00\u79cd\u53eb\u505a\u201cFinger Search\u201d\u7684\u6027\u8d28\uff0c\u5b83\u4f1a\u8ba9\u6700\u540e\u603b\u590d\u6742\u5ea6\u53ea\u6709\u4e00\u4e2a$\\log$\u3002\u6211\u4e0d\u4f1a\u8bc1\uff0c\u4f30\u8ba1\u4e5f\u5f97\u52bf\u80fd\u5206\u6790\u3002\u5e76\u4e14\u4ed6\u8ddf\u6211\u8bf4\u53ea\u6709$Splay$\u542f\u53d1\u5f0f\u5408\u5e76\u662f\u4e00\u4e2a$\\log$\uff0c\u5176\u4ed6\u5e73\u8861\u6811\u90fd\u662f\u4e24\u4e2a$\\log$\u3002\n\n## \u672c\u9898\u89e3\u6cd5\n\n\u6bcf\u4e00\u4e2a\u70b9\u5f00\u4e24\u4e2a`vector`\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u90fd\u52a0\u4e86\u4ec0\u4e48\uff0c\u5220\u4e86\u4ec0\u4e48\u3002\n\n\u5f53\u5bf9$x$\uff0c$y$\u8def\u5f84\u5206\u53d1$z$\u65f6\uff0c\u8f6c\u5316\u4e3a\u5bf9$x$\u6dfb\u52a0$z$\uff0c\u5bf9$y$\u6dfb\u52a0$z$\uff0c\u5bf9$lca$\u548c$lca$\u7684\u7236\u4eb2\u5220\u9664$z$\u3002\u6bcf\u4e00\u4e2a\u70b9\u5f00\u4e00\u4e2a`Splay`\u8bb0\u5f55\u7b54\u6848\u3002\n\n\u8ba1\u7b97\u4e00\u4e2a\u70b9$x$\u7684\u7b54\u6848\u65f6\uff0c\u5148`DFS`$x$\u7684\u6240\u6709\u513f\u5b50\uff0c\u7136\u540e\u628a\u513f\u5b50\u7684`Splay`\u542f\u53d1\u5f0f\u5408\u5e76\u8fdb$x$\u7684`Splay`\uff0c\u518d\u904d\u5386$x$\u7684\u4e24\u4e2a`vector`\u8fdb\u884c\u6dfb\u52a0\u5220\u9664\uff0c\u5c31\u662f$x$\u7684\u7b54\u6848\u3002\n\n\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c31\u662f\u628a`size`\u5c0f\u7684\u5e73\u8861\u6811\u91cc\u7684\u6240\u6709\u5143\u7d20\u4e00\u4e2a\u4e00\u4e2a\u5f80\u5927\u7684\u91cc\u9762\u585e\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\ntypedef pair<int, int> poi;\nconst int MAXN = 2e5 + 5;\n\nstruct SplayTree{\n\tstruct Node{\n\t\tNode *fa, *ch[2];\n\t\tint val, cnt;\n\t\tpoi res;\n\t\tNode() {}\n\t\t\n\t\tNode(Node *fa, int val, int cnt) : fa(fa), val(val), cnt(cnt) {\n\t\t\tres = make_pair(cnt, -val);\n\t\t\tch[0] = ch[1] = NULL;\n\t\t}\n\t};\n\t\n\tNode *rt;\n\tint size;\n\tNode *New(Node*, int, int);\n\tSplayTree() {rt = NULL; size = 0;}\n\tvoid Del(Node*);\n\t\n\tvoid Update(Node *x) {\n\t\tx->res = make_pair(x->cnt, -x->val);\n\t\tif (x->ch[0]) x->res = max(x->res, x->ch[0]->res);\n\t\tif (x->ch[1]) x->res = max(x->res, x->ch[1]->res);\n\t}\n\t\n\tvoid Rotate(Node *now) {\n\t\tNode *fa = now->fa, *anc = fa->fa;\n\t\tint d = (now == fa->ch[1]);\n\t\tif (anc) anc->ch[fa == anc->ch[1]] = now;\n\t\tnow->fa = anc;\n\t\tfa->fa = now;\n\t\tfa->ch[d] = now->ch[!d];\n\t\tnow->ch[!d] = fa;\n\t\tif (fa->ch[d]) fa->ch[d]->fa = fa;\n\t\tUpdate(fa); Update(now);\n\t\tif (!now->fa) rt = now;\n\t}\n\t\n\tvoid Splay(Node *now) {\n\t\tif (!now) return;\n\t\twhile (now->fa) {\n\t\t\tNode *fa = now->fa, *anc = fa->fa;\n\t\t\tif (anc) {\n\t\t\t\tif ((fa == anc->ch[1]) ^ (now == fa->ch[1])) Rotate(now);\n\t\t\t\telse Rotate(fa);\n\t\t\t}\n\t\t\tRotate(now);\n\t\t}\n\t}\n\t\n\tvoid Insert(int val, int cnt) {\n\t\tsize += cnt;\n\t\tif (!rt) {\n\t\t\trt = New(NULL, val, cnt);\n\t\t\treturn;\n\t\t}\n\t\tNode *now = rt;\n\t\twhile (now) {\n\t\t\tif (val < now->val) {\n\t\t\t\tif (now->ch[0]) {\n\t\t\t\t\tnow = now->ch[0];\n\t\t\t\t} else {\n\t\t\t\t\tnow->ch[0] = New(now, val, cnt);\n\t\t\t\t\tnow = now->ch[0];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (val == now->val) {\n\t\t\t\tnow->cnt += cnt;\n\t\t\t\tUpdate(now);\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tif (now->ch[1]) {\n\t\t\t\t\tnow = now->ch[1];\n\t\t\t\t} else {\n\t\t\t\t\tnow->ch[1] = New(now, val, cnt);\n\t\t\t\t\tnow = now->ch[1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSplay(now);\n\t}\n\t\n\tvoid Find(int val) {\n\t\tNode *now = rt;\n\t\twhile (now) {\n\t\t\tif (val < now->val) {\n\t\t\t\tnow = now->ch[0];\n\t\t\t} else if (val == now->val) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tnow = now->ch[1];\n\t\t\t}\n\t\t}\n\t\tSplay(now);\n\t}\n\t\n\tvoid Remove(int val) {\n\t\tFind(val);\n\t\tif (!rt || rt->val != val) return;\n\t\tsize--;\n\t\trt->cnt--;\n\t\tUpdate(rt);\n\t\treturn;\n\t}\n\t\n\tvoid Merge(Node *now) {\n\t\tif (!now) return;\n\t\tMerge(now->ch[0]);\n\t\tif (now->cnt) Insert(now->val, now->cnt);\n\t\tMerge(now->ch[1]);\n\t\tDel(now);\n\t}\n\t\n\tvoid Join(SplayTree &T) {\n\t\tif (size < T.size) {\n\t\t\tswap(size, T.size);\n\t\t\tswap(rt, T.rt);\n\t\t}\n\t\tMerge(T.rt);\n\t}\n};\n\nSplayTree::Node npool[1000000];\nSplayTree::Node* tra[MAXN << 1];\nint ncnt, tcnt;\n\nSplayTree::Node* SplayTree::New(SplayTree::Node *fa, int val, int cnt) {\n\tSplayTree::Node *res = tcnt ? tra[tcnt--] : &npool[ncnt++];\n\t*res = SplayTree::Node(fa, val, cnt);\n\treturn res;\n}\n\nvoid SplayTree::Del(SplayTree::Node *now) {\n\ttra[++tcnt] = now;\n}\n//----------\nint n, m;\nint to[MAXN], nxt[MAXN], head[MAXN], ecnt;\n\nvoid Add(int u, int v) {\n\tto[++ecnt] = v; nxt[ecnt] = head[u]; head[u] = ecnt;\n\tto[++ecnt] = u; nxt[ecnt] = head[v]; head[v] = ecnt;\n}\n//----------\nint stt[20][MAXN], tot, id1[MAXN], lg2[MAXN], fa[MAXN];\nint dep[MAXN];\n\nvoid DFS1(int u, int last, int depth) {\n\tstt[0][++tot] = u;\n\tid1[u] = tot;\n\tdep[u] = depth;\n\tfa[u] = last;\n\tfor (int i = head[u]; i; i = nxt[i]) {\n\t\tint v = to[i];\n\t\tif (v == last) continue;\n\t\tDFS1(v, u, depth + 1);\n\t\tstt[0][++tot] = u;\n\t}\n}\n\nint Lower(int x, int y) {\n\treturn dep[x] < dep[y] ? x : y;\n}\n\nvoid GetST() {\n\tfor (int i = 2; i <= tot; i++) lg2[i] = lg2[i >> 1] + 1;\n\tfor (int i = 1; (1 << i) <= tot; i++) {\n\t\tint w = (1 << i);\n\t\tfor (int j = 1; j + w - 1 <= tot; j++) {\n\t\t\tstt[i][j] = Lower(stt[i - 1][j], stt[i - 1][j + w / 2]);\n\t\t}\n\t}\n}\n\nint LCA(int x, int y) {\n\tx = id1[x]; y = id1[y];\n\tif (x > y) swap(x, y);\n\tint i = lg2[y - x + 1], w = (1 << i);\n\treturn Lower(stt[i][x], stt[i][y - w + 1]);\n}\n//----------\nvector<int> add[MAXN];\nvector<int> del[MAXN];\nSplayTree T[MAXN];\nint ans[MAXN];\n\nvoid Ins(int x, int y, int val) {\n\tint lca = LCA(x, y);\n\tadd[x].push_back(val);\n\tadd[y].push_back(val);\n\tdel[lca].push_back(val);\n\tdel[fa[lca]].push_back(val);\n}\n\nvoid DFS2(int u) {\n\tT[u].Insert(0, 0);\n\tfor (int i = head[u]; i; i = nxt[i]) {\n\t\tint v = to[i];\n\t\tif (v == fa[u]) continue;\n\t\tDFS2(v);\n\t\tT[u].Join(T[v]);\n\t}\n\tfor (unsigned i = 0; i < add[u].size(); i++) T[u].Insert(add[u][i], 1);\n\tfor (unsigned i = 0; i < del[u].size(); i++) T[u].Remove(del[u][i]);\n\tans[u] = -T[u].rt->res.second;\n}\n\nint main() {\n\tios::sync_with_stdio(false); cin.tie(NULL);\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n - 1; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tAdd(x, y);\n\t}\n\tDFS1(1, 0, 0);\n\tGetST();\n\tfor (int i = 1; i <= m; i++) {\n\t\tint x, y, z;\n\t\tcin >> x >> y >> z;\n\t\tIns(x, y, z);\n\t}\n\tDFS2(1);\n\tfor (int i = 1; i <= n; i++) cout << ans[i] << '\\n';\n\treturn 0;\n}\n```\n\n~~`Splay`\u8fd9\u79cd\u4e1c\u897f\u5e38\u6570\u6781\u5927\uff0c\u4ee5\u524d\u6a21\u62df\u8d5b\u6211\u5199`Splay`\u4e00\u4e2a$\\log$\u88ab`BIT`\u7684\u4e24\u4e2a$\\log$\u540a\u6253\u4e86\u3002\u8fd9\u9053\u9898\u4e5f\u662f\uff0c\u5982\u679c\u4e0d\u5438\u6c27\u7684\u8bdd\uff0c\u5c31\u5f97\u770b\u8bc4\u6d4b\u59ec\u7ed9\u4e0d\u7ed9\u9762\u5b50~~\n\n**12.27 Update**\n\n\u8c8c\u4f3c\u505a\u9ebb\u70e6\u4e86\uff0c\u6839\u672c\u4e0d\u7528\u79bb\u7ebf\uff0c`Splay`\u7684\u4e00\u4e2a\u8282\u70b9\u4e2d\u7684`cnt`\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\u662f\u8d1f\u6570\u5176\u5b9e\u4e00\u70b9\u95ee\u9898\u90fd\u6ca1\u6709\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u901a\u8fc7\u79bb\u7ebf\u4fdd\u8bc1\u5220\u9664\u65f6\u4e00\u5b9a\u5b58\u5728\uff0c\u76f4\u63a5\u64cd\u4f5c\u5c31OK\u4e86\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\ntypedef pair<int, int> poi;\nconst int MAXN = 2e5 + 5;\n\nstruct SplayTree{\n    struct Node{\n        Node *fa, *ch[2];\n        int val, cnt;\n        poi res;\n        Node() {}\n\n        Node(Node *fa, int val, int cnt) : fa(fa), val(val), cnt(cnt) {\n            res = make_pair(cnt, -val);\n            ch[0] = ch[1] = NULL;\n        }\n    };\n\n    Node *rt;\n    int size;\n    Node *New(Node*, int, int);\n    SplayTree() {rt = NULL; size = 0;}\n    void Del(Node*);\n\n    void Update(Node *x) {//\u66f4\u65b0\u7b54\u6848\n        x->res = make_pair(x->cnt, -x->val);\n        if (x->ch[0]) x->res = max(x->res, x->ch[0]->res);\n        if (x->ch[1]) x->res = max(x->res, x->ch[1]->res);\n    }\n\n    void Rotate(Node *now) {\n        Node *fa = now->fa, *anc = fa->fa;\n        int d = (now == fa->ch[1]);\n        if (anc) anc->ch[fa == anc->ch[1]] = now;\n        now->fa = anc;\n        fa->fa = now;\n        fa->ch[d] = now->ch[!d];\n        now->ch[!d] = fa;\n        if (fa->ch[d]) fa->ch[d]->fa = fa;\n        Update(fa); Update(now);\n        if (!now->fa) rt = now;\n    }\n\n    void Splay(Node *now) {\n        if (!now) return;\n        while (now->fa) {\n            Node *fa = now->fa, *anc = fa->fa;\n            if (anc) {\n                if ((fa == anc->ch[1]) ^ (now == fa->ch[1])) Rotate(now);\n                else Rotate(fa);\n            }\n            Rotate(now);\n        }\n    }\n\n    void Insert(int val, int cnt) {//\u628acnt\u4e2aval\u52a0\u8fdb\u6765\n        size += cnt;\n        if (!rt) {\n            rt = New(NULL, val, cnt);\n            return;\n        }\n        Node *now = rt;\n        while (now) {\n            if (val < now->val) {\n                if (now->ch[0]) {\n                    now = now->ch[0];\n                } else {\n                    now->ch[0] = New(now, val, cnt);\n                    now = now->ch[0];\n                    break;\n                }\n            } else if (val == now->val) {\n                now->cnt += cnt;\n                Update(now);\n                break;\n            } else {\n                if (now->ch[1]) {\n                    now = now->ch[1];\n                } else {\n                    now->ch[1] = New(now, val, cnt);\n                    now = now->ch[1];\n                    break;\n                }\n            }\n        }\n        Splay(now);\n    }\n\n    void Find(int val) {\n        Node *now = rt;\n        while (now) {\n            if (val < now->val) {\n                now = now->ch[0];\n            } else if (val == now->val) {\n                break;\n            } else {\n                now = now->ch[1];\n            }\n        }\n        Splay(now);\n    }\n\n    void Remove(int val) {\n        Find(val);\n        if (!rt || rt->val != val) return;\n        size--;\n        rt->cnt--;\n        Update(rt);\n        return;\n    }\n\n    void Merge(Node *now) {\n        if (!now) return;\n        Merge(now->ch[0]);\n        if (now->cnt) Insert(now->val, now->cnt);\n        Merge(now->ch[1]);\n        Del(now);\n    }\n\n    void Join(SplayTree &T) {\n        if (size < T.size) {\n            swap(size, T.size);\n            swap(rt, T.rt);\n        }\n        Merge(T.rt);\n    }\n};\n\nSplayTree::Node npool[1000000];\nSplayTree::Node* tra[MAXN << 1];\nint ncnt, tcnt;\n\nSplayTree::Node* SplayTree::New(SplayTree::Node *fa, int val, int cnt) {\n    SplayTree::Node *res = tcnt ? tra[tcnt--] : &npool[ncnt++];\n    *res = SplayTree::Node(fa, val, cnt);\n    return res;\n}\n\nvoid SplayTree::Del(SplayTree::Node *now) {\n    tra[++tcnt] = now;\n}\n//----------\nint n, m;\nint to[MAXN], nxt[MAXN], head[MAXN], ecnt;\n\nvoid Add(int u, int v) {\n    to[++ecnt] = v; nxt[ecnt] = head[u]; head[u] = ecnt;\n    to[++ecnt] = u; nxt[ecnt] = head[v]; head[v] = ecnt;\n}\n//----------\nint stt[20][MAXN], tot, id1[MAXN], lg2[MAXN], fa[MAXN];\nint dep[MAXN];\n\nvoid DFS1(int u, int last, int depth) {\n    stt[0][++tot] = u;\n    id1[u] = tot;\n    dep[u] = depth;\n    fa[u] = last;\n    for (int i = head[u]; i; i = nxt[i]) {\n        int v = to[i];\n        if (v == last) continue;\n        DFS1(v, u, depth + 1);\n        stt[0][++tot] = u;\n    }\n}\n\nint Lower(int x, int y) {\n    return dep[x] < dep[y] ? x : y;\n}\n\nvoid GetST() {\n    for (int i = 2; i <= tot; i++) lg2[i] = lg2[i >> 1] + 1;\n    for (int i = 1; (1 << i) <= tot; i++) {\n        int w = (1 << i);\n        for (int j = 1; j + w - 1 <= tot; j++) {\n            stt[i][j] = Lower(stt[i - 1][j], stt[i - 1][j + w / 2]);\n        }\n    }\n}\n\nint LCA(int x, int y) {\n    x = id1[x]; y = id1[y];\n    if (x > y) swap(x, y);\n    int i = lg2[y - x + 1], w = (1 << i);\n    return Lower(stt[i][x], stt[i][y - w + 1]);\n}\n//----------\nSplayTree T[MAXN];\nint ans[MAXN];\n\nvoid Ins(int x, int y, int val) {\n    int lca = LCA(x, y);\n    T[x].Insert(val, 1);\n    T[y].Insert(val, 1);\n    T[lca].Insert(val, -1);\n    T[fa[lca]].Insert(val, -1);\n}\n\nvoid DFS2(int u) {\n    T[u].Insert(0, 0);//\u9632\u6b62\u51fa\u73b0\u7a7a\u6811\n    for (int i = head[u]; i; i = nxt[i]) {\n        int v = to[i];\n        if (v == fa[u]) continue;\n        DFS2(v);\n        T[u].Join(T[v]);\n    }\n    ans[u] = -T[u].rt->res.second;\n}\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(NULL);\n    cin >> n >> m;\n    for (int i = 1; i <= n - 1; i++) {\n        int x, y;\n        cin >> x >> y;\n        Add(x, y);\n    }\n    DFS1(1, 0, 0);\n    GetST();\n    for (int i = 1; i <= m; i++) {\n        int x, y, z;\n        cin >> x >> y >> z;\n        Ins(x, y, z);\n    }\n    DFS2(1);\n    for (int i = 1; i <= n; i++) cout << ans[i] << '\\n';\n    return 0;\n}\n```\n\n~~\u4f46\u662f\u8fd9\u79cd\u5728\u7ebf\u7684\u5199\u6cd5\u4f1a\u4ea7\u751f\u5f88\u591a\u591a\u4f59\u7684\u70b9\uff0c\u6240\u4ee5\u6bd4\u79bb\u7ebf\u8981\u6162\uff0c\u5373\u4f7f\u5438\u6c27\u4e86\u8fd8\u662f\u8981\u770b\u8bc4\u6d4b\u59ec\u7ed9\u4e0d\u7ed9\u9762\u5b50~~",
        "postTime": 1577366558,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4 /\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811\u5408\u5e76\u3011"
    },
    {
        "content": "## \u601d\u8def\n> \u4e0e\u7b2c\u51e0\u7c7b\u6709\u5173\uff0c\u90a3\u4e48\u5f88\u81ea\u7136\u7684\u60f3\u5230\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u518d\u770b\u4e0b\u53bb\uff0c\u53d1\u73b0\u53c8\u6709\u5bf9\u4e8e\u6811\u4e0a\u4e00\u6761\u8def\u5f84\u7684\u64cd\u4f5c\uff0c\u6811\u4e0a\u5dee\u5206\u5c31\u53ef\u4ee5\u5566\u3002\u6700\u540e\u53d1\u73b0\u8be2\u95ee\u7684\u65f6\u5019\u8981\u6c42\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u6700\u5927\u503c\u7684\u662f\u54ea\u79cd\u6551\u6d4e\u7cae\uff0c\u53ef\u4ee5\u4ece\u4e0b\u5411\u4e0a\u5408\u5e76\u7ebf\u6bb5\u6811\u518d\u6c42\u503c\u3002\n\n> \u63a5\u7740\u53c8\u770b\u5230\u6bcf\u6b21\u64cd\u4f5c\u53ea\u4fee\u6539\u4e00\u4e2a\u70b9\uff0c\u4e3b\u5e2d\u6811\u6b63\u597d\u5566\u3002\n\n### \u6811\u4e0a\u5dee\u5206\n\n> \u5dee\u5206\u5c31\u662f\u5728\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4[x, y], \u5c06x - 1\u6807\u4e0a\u51cf\u4e00\u6807\u8bb0\uff0c\u5728y\u4e0a\u6807\u52a0\u4e00\u6807\u8bb0\uff0c\u4e4b\u540e\u4ece\u540e\u5f80\u524d\u5c31\u53ef\u4ee5\u7edf\u8ba1[x, y]\u533a\u95f4\u5185\u7684\u503c\u3002\n\n> \u5bf9\u4e8e\u8fd9\u9053\u9898\u800c\u8a00\uff0c\u8981\u4fee\u6539x\u5230y\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u5206\u4e3ax\u5230lca(x, y) \u548c y \u5230 lca(x, y) \u4e24\u6bb5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728x\u548cy\u4e0a\u6807\u52a0\u4e00\uff0c\u5728lca(x, y)\u548cfa[lca(x, y)]\u5c31\u662flca(x, y)\u7684\u7236\u4eb2\u4e0a\u6807\u51cf\u4e00\u6807\u8bb0\u5c31\u53ef\u4ee5\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\n\n### LCA\n\n> \u76f4\u63a5\u5728\u5f00\u59cb\u65f6\u7528dfs\u76f4\u63a5\u9884\u5904\u7406\u51fa\u500d\u589e\u8868\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define N 100001\n#define tl 100000\nusing namespace std;\n\nstruct node{\n\tint to, ne;\n}e[N << 1];\n\nint n, m, top, cnt;\nint he[N], rt[N], ans[N], f[N][21], de[N], val[N * 600], lc[N * 600], rc[N * 600];\n\nvoid add(int x, int y)\n{\n\te[++cnt] = {y, he[x]};\n\the[x] = cnt;\n}\n\nvoid dfs(int x, int fa)//\u9884\u5904\u7406\n{\n\tf[x][0] = fa, de[x] = de[fa] + 1;\n\tfor(int i = 1; i <= 20; i++) f[x][i] = f[f[x][i - 1]][i - 1];\n\tfor(int i = he[x]; i; i = e[i].ne)\n\t{\n\t\tint y = e[i].to;\n\t\tif(y == fa) continue;\n\t\tdfs(y, x);\n\t}\n}\n\nint lca(int x, int y)//\u500d\u589elca\n{\n\tif(de[x] > de[y]) swap(x, y);\n\tfor(int i = 20; i >= 0; i--) if(de[f[y][i]] >= de[x]) y = f[y][i];\n\tif(x == y) return x;\n\tfor(int i = 20; i >= 0; i--) if(f[x][i] != f[y][i]) x = f[x][i], y = f[y][i];\n\treturn f[x][0]; \n}\n\n\nint change(int rt, int l, int r, int x, int y)//\u6743\u503c\u4e3b\u5e2d\u6811\n{\n\tint now = ++top, mid = (l + r) >> 1;//\u52a8\u6001\u5f00\u70b9\n\tlc[now] = lc[rt], rc[now] = rc[rt];\n\tif(l == r)\n\t{\n\t\tval[now] = val[rt] + y;\n\t\treturn now;\n\t}\n\tif(x <= mid) lc[now] = change(lc[rt], l, mid, x, y);\n\telse rc[now] = change(rc[rt], mid + 1, r, x, y);\n\tval[now] = max(val[lc[now]], val[rc[now]]);\n\treturn now;\n}\n\nint merge(int u, int v)//\u7ebf\u6bb5\u6811\u5408\u5e76\n{\n\tif(!u) return v;\n\tif(!v) return u;\n\tlc[u] = merge(lc[u], lc[v]);//\u76f4\u63a5\u628av\u5408\u5e76\u5230u\u4e0a\n\trc[u] = merge(rc[u], rc[v]);\n\tif(!lc[u] && !rc[u])//\u5982\u679c\u662f\u53f6\u5b50\u8282\u70b9\n\t{\n\t\tval[u] += val[v];\n\t\treturn u;\n\t}\n\tval[u] = max(val[lc[u]], val[rc[u]]);//\u6700\u5927\u503c\n\treturn u;\n}\n\nint bina(int rt, int l, int r)//\u6700\u5927\u503c\n{\n\tif(l == r) return l;\n\tint mid = (l + r) >> 1;\n\tif(val[lc[rt]] >= val[rc[rt]]) return bina(lc[rt], l, mid);\n\telse return bina(rc[rt], mid + 1, r);\n}\n\nvoid solve(int x, int fa)//\u7ed3\u7b97\n{\n\tfor(int i = he[x]; i; i = e[i].ne)\n\t{\n\t\tint y = e[i].to;\n\t\tif(y == fa) continue;\n\t\tsolve(y, x);\n\t\trt[x] = merge(rt[x], rt[y]);\n\t}\n\tif(val[rt[x]] == 0) ans[x] = 0;\n\telse ans[x] = bina(rt[x], 1, tl);\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadd(x, y), add(y, x);\n\t}\n\tdfs(1, 0);//\u9884\u5904\u7406\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint x, y, z, t;\n\t\tscanf(\"%d%d%d\", &x, &y, &z), t = lca(x, y);\n\t\trt[x] = change(rt[x], 1, tl, z, 1), rt[y] = change(rt[y], 1, tl, z, 1);\n\t\trt[t] = change(rt[t], 1, tl, z, -1), rt[f[t][0]] = change(rt[f[t][0]], 1, tl, z, -1);\n\t}\n\tsolve(1, 0);\n\tfor(int i = 1; i <= n; i++) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1568018591,
        "uid": 98468,
        "name": "abs001",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u5206\u4eab\u4e00\u4e2a**\u4e0d\u5199\u4efb\u4f55\u6570\u636e\u7ed3\u6784**\u5c31\u80fd++\u8fc7\u53bb\u7684\u65b9\u6cd5\u3002\n\n------------\n\n\u539f\u7406\u540c\u7ebf\u6bb5\u6811\u5408\u5e76\u89e3\u6cd5\uff0c\u53ef\u4ee5\u79fb\u6b65\u5176\u5b83\u5927\u4f6c\u9898\u89e3\u3002\n\n\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u600e\u4e48\u4e0d\u5199\u7ebf\u6bb5\u6811\u5408\u5e76\u8fc7\u8fd9\u9053\u9898\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u89e3\u6cd5\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u5176\u5b9e\u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4(**\u79cd\u7c7b\uff0c\u6570\u91cf**)\uff0c\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5c31\u662f(**\u4f4d\u7f6e\uff0c\u503c**)\uff0c\u800c\u4f4d\u7f6e\u5728\u7ebf\u6bb5\u6811\u4e0a\u56fa\u5b9a\u4e86\u4e0b\u6765\uff0c\u6240\u4ee5\u5728\u5b50\u8282\u70b9\u7ef4\u62a4\u503c\uff0c\u4e0a\u5c42\u9636\u70b9\u7ef4\u62a4\u6700\u5927\u7684\u503c\u548c\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002~~\u7136\u540e\u5361\u4e00\u5361\u7a7a\u95f4\u5c31\u597d\u4e86\u3002~~\n\n\u4f46\u662f\u5bf9\u4e8e\uff08**\u4f4d\u7f6e\uff0c\u503c**\uff09\u8fd9\u4e2a\u4e8c\u5143\u7ec4\uff0c\u6362\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u663e\u7136\u4e5f\u662f\u5b8c\u5168\u53ef\u4ee5\u7684\uff0c\u800c\u4e14\u7a7a\u95f4\u590d\u6742\u5ea6\u8981\u66f4\u4f18\u3002\n\n~~\u5199\u5e73\u8861\u6811\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u80fd\u4e0d\u5199\u5e73\u8861\u6811\u5c31\u4e0d\u5199\u5e73\u8861\u6811\u7684\uff0c\u53ea\u6709\u7528stl\u624d\u80fd\u6c34\u9898\u7684\u6837\u5b50\uff0c\u91cc\u9762\u7684\u4e1c\u897f\u90fd\u8d85\u597d\u7528\u7684\uff0c\u6211\u8d85\u559c\u6b22stl\u7684\u3002~~\n\n\u95ee\u9898\u662fstl\u91cc\u7684\u5e73\u8861\u6811\u663e\u7136\u6ca1\u6cd5\u62d3\u5c55\uff0c\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u7528\u5b83\u7ef4\u62a4\u7b54\u6848\u5462\u3002\n\nstl\u7684map\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u7ef4\u62a4(**\u4f4d\u7f6e,\u503c**)\u8fd9\u4e2a\u4e8c\u5143\u7ec4\uff0c\u5374\u4e0d\u652f\u6301\u6839\u636e\u7b2c\u4e8c\u7ef4\u7ef4\u62a4\u7b54\u6848\u3002\n\n\u5176\u5b9e\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7684\u8bdd\uff0c\u662f\u53ef\u4ee5\u67e5\u51fa\u4efb\u610f(l,r)\u7684\u7b54\u6848\u7684\uff0c\u4e0d\u8fc7\u8fd9\u9053\u9898\u53ea\u9700\u8981(1,n)\u7684\u7b54\u6848\u3002\n\n\u90a3\u6709\u6ca1\u6709\u4ec0\u4e48\u53ea\u80fd\u67e5\u51fa(1,n)\u7684\u7b54\u6848\uff0c\u4ee3\u7801\u66f4\u7b80\u5355\u7684\u5199\u6cd5\u5462\u3002\n\n\u5047\u5982\u73b0\u5728\u6709\u4e86\u6240\u6709\u7684\u4e8c\u5143\u7ec4(**\u4f4d\u7f6e\uff0c\u503c**)\uff0c\u4e14\u6ca1\u6709\u76f8\u540c\u7684\u503c\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6309\u7167\u7b2c\u4e8c\u7ef4\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u5982\u679c\u6709\u76f8\u540c\u7684\u503c\uff0c\u90a3\u53ea\u8981\u8ba9\u7b2c\u4e8c\u7ef4\u5347\u5e8f\uff0c\u7b2c\u4e8c\u7ef4\u76f8\u540c\u65f6\u7b2c\u4e00\u7ef4\u964d\u5e8f\uff0c\u6392\u5e8f\u540e\u6700\u5927\u7684\u4e00\u4e2a\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u9700\u8981\u8ba9\u8fd9\u4e2a\u6709\u5e8f\u5e8f\u5217\u5e26\u4fee\uff0c\u6240\u4ee5\u7528set\u7ef4\u62a4\u3002\n\n\u73b0\u5728\u603b\u7ed3\u4e00\u4e0b\uff0c\u5c31\u6709\u5b9e\u73b0\u601d\u8def\u4e86\uff1a\n1. map\u7ef4\u62a4\uff08\u4f4d\u7f6e\uff0c\u503c\uff09\u4e8c\u5143\u7ec4\n\n1. set\u7ef4\u62a4\uff08\u503c\uff0c\u4f4d\u7f6e\uff09\u4e8c\u5143\u7ec4\uff0c\u5373set\u7ef4\u62a4map\u7684\u7ffb\u8f6c\n\n1. \u5f53\u4fee\u6539\u4e00\u4e2a\u503c\u7684\u65f6\u5019\uff0cmap\u4e2d\u67e5\u627e\u5230\u4f4d\u7f6e\u5bf9\u5e94\u7684\u4e8c\u5143\u7ec4\uff0c\u5728set\u4e2d\u5220\u9664\u7ffb\u8f6c\u540e\u7684\u4e8c\u5143\u7ec4\uff0c\u4fee\u6539map\u7684\u4e8c\u5143\u7ec4\uff0c\u5728set\u4e2d\u63d2\u5165\u7ffb\u8f6c\u7684\u65b0\u4e8c\u5143\u7ec4\u3002\n\n\u81f3\u4e8e\u5408\u5e76\uff0c\u5c31\u662f\u6807\u51c6\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n~~\u6240\u4ee5\u8fd9\u9898\u53ef\u4ee5\u51fa\u6210noip\u9898\u3002~~\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982O(nlog^2n)\u7684\u6837\u5b50\u3002\n\n~~\u5438\u53e3\u6c27\u5c31\u8fc7\u4e86\u3002~~ \n\n\u8dd1\u7684\u548c\u6211\u5438\u6c27\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5dee\u4e0d\u591a\uff0c\u90fd\u57284300ms\u5de6\u53f3\u3002\uff08\u5747\u4e3a\u6811\u5256lca\uff09\n\n## \u500d\u589elca+stl\u4ee3\u7801\uff1a\uff08\u500d\u589e\u77ed\u4e00\u4e9b\uff09\n```cpp\n#include <cstdio>\n#include <map> \n#include <vector>\n#include <set>\nusing namespace std;\nconst int kmaxn=100000+5;\nconst int kmaxlog=20;\nvector<int> head[kmaxn];\nint n,m;\nint lg[kmaxn];\nint fa[kmaxn][kmaxlog];\nint dep[kmaxn];\nvoid init()\n{\n    for(int i=1;i<=n;++i)\n        lg[i]=lg[i-1]+((1<<lg[i-1])==i);\n}\nvoid dfs(int now,int f)\n{\n    dep[now]=dep[(fa[now][0]=f)]+1;\n    for(int i=1;i<lg[dep[now]];++i)\n        fa[now][i]=fa[fa[now][i-1]][i-1];\n    vector<int>& e=head[now];\n    for(int t=0,len=e.size();t<len;++t)\n        if(e[t]!=f)dfs(e[t],now);\n}\ninline int lca(int a,int b)\n{\n    if(dep[a]<dep[b])swap(a,b);\n    while(dep[a]>dep[b])\n        a=fa[a][lg[dep[a]-dep[b]]-1];\n    if(a==b)return a;\n    for(int i=lg[dep[a]]-1;i>=0;--i)\n        if(fa[a][i]!=fa[b][i])\n            a=fa[a][i],b=fa[b][i];\n    return fa[a][0];\n}\nstruct unit\n{\n    int a,b;\n    unit(int _a=0,int _b=0):a(_a),b(_b){}\n    const bool operator<(const unit& u)const{return a==u.a?b>u.b:a<u.a;}\n};\nclass data_struct\n{\n    public:\n        map<int,int> mp;\n        map<int,int>::iterator itr;\n        set<unit> st;\n        inline void add(int pos,int k)\n        {\n            itr=mp.insert(make_pair(pos,0)).first;\n            if(itr->second!=0)\n                st.erase(unit(itr->second,itr->first));\n            itr->second+=k;\n            if(itr->second!=0)\n                st.insert(unit(itr->second,itr->first));\n            else\n                mp.erase(itr);\n        }\n        void _merge(map<int,int>& tmp,set<unit>& tst,map<int,int>::iterator t)\n        {\n            if(tmp.size()>mp.size()){\n                swap(tmp,mp);\n                swap(tst,st);\n            }\n            t=tmp.begin();\n            while(t!=tmp.end()){\n                add(t->first,t->second);\n                ++t;\n            }\n            tmp.clear();\n            tst.clear();\n        }\n        inline void merge(data_struct& ds){_merge(ds.mp,ds.st,ds.itr);}\n}trees[kmaxn];\ninline void mod(int x,int y,int z)\n{\n    trees[x].add(z,1);\n    trees[y].add(z,1);\n    int a=lca(x,y);\n    trees[a].add(z,-1);\n    trees[fa[a][0]].add(z,-1);\n}\nvoid solve(int now)\n{\n    vector<int> &e=head[now];\n    int t=0,len=e.size();\n    while(t<len){\n        if(e[t]!=fa[now][0]){\n            solve(e[t]);\n            trees[now].merge(trees[e[t]]);\n        }\n        ++t;\n    }\n    if(trees[now].st.empty())\n    \tdep[now]=0;\n    else\n    \tdep[now]=(--trees[now].st.end())->b;\n}\nint a,b,c;\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;++i){\n        scanf(\"%d%d\",&a,&b);\n        head[a].push_back(b);\n        head[b].push_back(a); \n    }\n    init();\n    dfs(1,0);\n    while(m--){\n        scanf(\"%d%d%d\",&a,&b,&c);\n        mod(a,b,c);\n    }\n    solve(1);\n    for(int i=0;i<=n;)\n        printf(\"%d\\n\",dep[i++]);\n    return 0;\n}\n```\n\n~~\u4f17\u6240\u5468\u77e5set\u548cmap\u4e0d\u662f\u6570\u636e\u7ed3\u6784\u3010\u5927\u8bef~~\n\n## \u4e5f\u5206\u4eab\u4e00\u4e2a\u666e\u901a\u7684\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u6cd5\u3002\n\n```cpp\n#include <cstdio>\n#include <vector>\nusing namespace std;\nenum SONS\n{\n    ls,rs\n};\nclass node;\nclass autoptr\n{\n    static node* bpos;\n    public:\n    int offset;\n    inline node& operator*();\n    inline node* operator->();\n    inline const autoptr& operator=(const autoptr& a)\n    {\n        offset=a.offset;\n        return *this;\n    }\n    inline const autoptr& operator=(const int o)\n    {\n        offset=o;\n        return *this;\n    }\n    inline operator node*()const;\n    inline operator bool()const\n    {\n        return offset;\n    }\n    inline operator int()const\n    {\n        return offset;\n    }\n};\nclass node\n{\n    public:\n        int v;\n        int pos;\n        autoptr son[2];\n        node()\n        {\n            v=0;\n            son[ls]=son[rs]=0;\n        }\n        inline void clear()\n        {\n            v=0;\n            son[ls]=son[rs]=0;\n        }\n        inline void update()\n        {\n            v=0;\n            if(!(son[ls]||son[rs]))\n                return;\n            if(!son[ls]||!son[rs])\n            {\n                pos=son[(bool)son[rs]]->pos;\n                v=son[(bool)son[rs]]->v;\n            }\n            else\n            {\n                bool dir=!(son[ls]->v>=son[rs]->v);\n                v=son[dir]->v;\n                pos=son[dir]->pos;\n            }\n        }\n};\ninline node& autoptr::operator*()\n{\n    return *(bpos+offset);\n}\ninline node* autoptr::operator->()\n{\n    return (bpos+offset);\n}\ninline autoptr::operator node*()const\n{\n    return bpos+offset;\n}\nconst int kmaxpool=100000*50;\nint npt;\nnode mpool[kmaxpool];\nnode* autoptr::bpos=mpool;\ninline int alloc_node()\n{\n    return ++npt;\n}\nconst int kmaxz=100000+5;\nclass segment_tree\n{\n    static const int L,R;\n    public:\n    autoptr root;\n    autoptr _merge(int l,int r,autoptr a,autoptr b)\n    {\n        if(!a||!b)\n            return a?a:b;\n        if(l==r)\n        {\n            a->v+=b->v;\n            return a;\n        }\n        int mid=(l+r)>>1;\n        a->son[ls]=_merge(l,mid,a->son[ls],b->son[ls]);\n        a->son[rs]=_merge(mid+1,r,a->son[rs],b->son[rs]);\n        a->update();\n        return a;\n    }\n    segment_tree merge(segment_tree& st)\n    {\n        root=_merge(L,R,root,st.root);\n        return *this;\n    }\n    void _add(int l,int r,int pos,int k,autoptr& p)//add\n    {\n        if(!p)\n            p=alloc_node();\n        if(l==r)\n        {\n            p->v+=k;\n            p->pos=l;\n            return;\n        }\n        int mid=(l+r)>>1;\n        if(pos<=mid)\n            r=mid;\n        else\n            l=mid+1;\n        _add(l,r,pos,k,p->son[pos>mid]);\n        p->update();\n    }\n    void add(int pos,int k)\n    {\n        _add(L,R,pos,k,root);\n    }\n};\nconst int segment_tree::L=1;\nconst int segment_tree::R=kmaxz;\nstruct edge\n{\n    int d;\n    edge *nt;\n};\nconst int kmaxn=100000+5;\nvector<int> head[kmaxn];\nvoid add_edge(int s,int d)\n{\n    head[s].push_back(d);\n}\nint top[kmaxn],fa[kmaxn],dep[kmaxn],hs[kmaxn],size[kmaxn];\nvoid dfs1(int now,int f)\n{\n    fa[now]=f;\n    dep[now]=dep[f]+1;\n    size[now]=1;\n    vector<int> &e=head[now];\n    int t=0,len=e.size();\n    int ms=0;\n    while(t<len)\n    {\n        if(e[t]!=f)\n        {\n            dfs1(e[t],now);\n            size[now]+=size[e[t]];\n            if(size[e[t]]>size[ms])\n                ms=e[t];\n        }\n        ++t;\n    }\n    hs[now]=ms;\n}\nvoid dfs2(int now,int tp)\n{\n    top[now]=tp;\n    if(!hs[now])return;\n    dfs2(hs[now],tp);\n    vector<int> &e=head[now];\n    int t=0,len=e.size();\n    while(t<len)\n    {\n        if(e[t]!=hs[now]&&e[t]!=fa[now])\n            dfs2(e[t],e[t]);\n        ++t;\n    }\n}\ninline int lca(int a,int b)\n{\n    while(top[a]!=top[b])\n    {\n        if(dep[top[a]]<dep[top[b]])\n            swap(a,b);\n        a=fa[top[a]];\n    }\n    return dep[a]<dep[b]?a:b;\n}\nsegment_tree trees[kmaxn];\ninline void mod(int x,int y,int z)\n{\n    trees[x].add(z,1);\n    trees[y].add(z,1);\n    int a=lca(x,y);\n    trees[a].add(z,-1);\n    trees[fa[a]].add(z,-1);\n}\nvoid solve(int now)\n{\n    vector<int> &e=head[now];\n    int t=0,len=e.size();\n    while(t<len)\n    {\n        if(e[t]!=fa[now])\n        {\n            solve(e[t]);\n            trees[now].merge(trees[e[t]]);\n        }\n        ++t;\n    }\n    if(trees[now].root&&trees[now].root->v>0)\n        hs[now]=trees[now].root->pos;\n    else\n        hs[now]=0;\n}\nint n,m;\nint a,b,c;\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;++i)\n    {\n        scanf(\"%d%d\",&a,&b);\n        add_edge(a,b);\n        add_edge(b,a);\n    }\n    dfs1(1,0);\n    dfs2(1,1);\n    ++m;\n    while(--m)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        mod(a,b,c);\n    }\n    solve(1);\n    for(int i=0;i<=n;)\n    {\n        printf(\"%d\\n\",hs[i++]);\n    }\n    return 0;\n}\n```\n\u7ebf\u6bb5\u6811\u6307\u9488\u88ab\u5361\u5185\u5b58\u4e86\u6240\u4ee5\u5199\u4e86\u4e2aautoptr\n\n~~\u7136\u800c\u54ea\u91ccauto\u4e86~~\n\n\n\n\n\n\n",
        "postTime": 1558091942,
        "uid": 56184,
        "name": "_\u8679_",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u91cc\u90fd\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4f46\u6811\u94fe\u5256\u5206\u624d\u662f\u6700\u4f18\u89e3\uff08\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u590d\u6742\u5ea6\u5728\u7406\u8bba\u4e0a\u662f\u6700\u4f18\u7684\uff0c\u4f46\u5e38\u6570\u8fc7\u4e8e\u5de8\u5927\uff09  \n\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u6811\u4e0a\u64cd\u4f5c\uff0c\u76f4\u63a5\u6811\u5256\u6210$log_2N$\u4e2a\u5e8f\u5217\u64cd\u4f5c\uff0c\u628a\u6811\u4e0a\u95ee\u9898\u8f6c\u5316\u4e3a\u5e8f\u5217\u95ee\u9898\uff1a\n>\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u5728\u4e00\u6bb5\u533a\u95f4\u91cc\u52a0\u5165\u4e00\u79cd\u989c\u8272\uff0c\u8be2\u95ee\u67d0\u4e2a\u4f4d\u7f6e\u51fa\u73b0\u6700\u591a\u7684\u989c\u8272\uff0c\u79bb\u7ebf\n\n\n\u6211\u4eec\u501f\u52a9\u5e8f\u5217\u5dee\u5206\uff0c\u5c06\u5e8f\u5217\u64cd\u4f5c\u8f6c\u5316\u4e3a\u5355\u70b9\u64cd\u4f5c\n>\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u5728\u4e00\u4e2a\u4f4d\u7f6e\u589e\u52a0\u4e00\u79cd\u989c\u8272\u6216\u51cf\u5c11\u4e00\u79cd\u989c\u8272\uff0c\u8be2\u95ee\u524d\u7f00\u548c\u91cc\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272  \n\n\n\u663e\u7136\u662f\u7ebf\u6bb5\u6811\u4e86\uff0c\u6211\u4eec\u6839\u636e$Z$\u5efa\u7acb\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u64cd\u4f5c\n\n\u7ebf\u6bb5\u6811\u6211\u4eec\u8fd9\u4e48\u5efa\n```cpp\nstruct node{\n\tint l,r,ans;\n\tint data;\n}a[N<<2];\n#define ls(x) (x<<1)\n#define rs(x) ((x<<1)|1)\nvoid build(int x,int l,int r){\n\ta[x].l=l;a[x].r=r;\n\ta[x].data=0;a[x].ans=0;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tbuild(ls(x),l,mid);\n\tbuild(rs(x),mid+1,r);\n}\nvoid add(int x,int to,int data){\n\tif(a[x].l==a[x].r){\n\t\ta[x].data+=data;\n\t\ta[x].data?a[x].ans=to:a[x].ans=0;\n\t\treturn;\n\t}\n\tint mid=(a[x].l+a[x].r)>>1;\n\tif(mid>=to)add(ls(x),to,data);\n\telse add(rs(x),to,data);\n\ta[x].data=max(a[ls(x)].data,a[rs(x)].data);\n\tif(a[x].data==a[ls(x)].data)a[x].ans=a[ls(x)].ans;\n\telse a[x].ans=a[rs(x)].ans;\n}\n//\u4e0d\u9700\u8981\u67e5\u8be2\uff0ca[0].ans\u5373\u662f\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848\n```\n\n\u518d\u914d\u5408\u4e0a\u6811\u94fe\u5256\u5206\u5373\u53ef\u5b8c\u7f8e\u89e3\u51b3\u672c\u9898\n\n```cpp\n#include<bits/stdc++.h>\n#define N 100005\nusing namespace std;\nstruct edge{\n\tint to;\n\tint next;\n}e[N<<1];\nint n,m,h[N],pop=0;\nvoid add(int x,int y){\n\te[++pop].to=y;\n\te[pop].next=h[x];\n\th[x]=pop;\n}\ninline int read(){\n\tint X=1,sum=0;char ch=getchar();\n\twhile(ch>'9'||ch<'0')X=(ch=='-'?-1:1),ch=getchar();\n\twhile(ch<='9'&&ch>='0')sum=(sum<<3)+(sum<<1)+ch-'0',ch=getchar();\n\treturn X*sum;\n} \nint fa[N],size[N],dist[N],son[N],L[N],top[N],pt[N],tot=0;\nvoid dfs1(int x,int f){\n\tfa[x]=f;size[x]=1;dist[x]=dist[f]+1;\n\tint Max=0;\n\tfor(int i=h[x];i;i=e[i].next){\n\t\tif(e[i].to!=f){\n\t\t\tdfs1(e[i].to,x);size[x]+=size[e[i].to];\n\t\t\tif(size[e[i].to]>Max)son[x]=e[i].to,Max=size[e[i].to];\n\t\t}\n\t} \n}\nvoid dfs2(int x,int tp){\n\ttop[x]=tp;L[x]=++tot;pt[tot]=x;\n\tif(!son[x])return;\n\tdfs2(son[x],tp);\n\tfor(int i=h[x];i;i=e[i].next)\n\t  if(e[i].to!=son[x]&&e[i].to!=fa[x])\n\t    dfs2(e[i].to,e[i].to);\n}\nstruct node{\n\tint l,r,ans;\n\tint data;\n}a[N<<2];\n#define ls(x) (x<<1)\n#define rs(x) ((x<<1)|1)\nvoid build(int x,int l,int r){\n\ta[x].l=l;a[x].r=r;\n\ta[x].data=0;a[x].ans=0;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tbuild(ls(x),l,mid);\n\tbuild(rs(x),mid+1,r);\n}\nvoid add(int x,int to,int data){\n\t//cout<<x<<\" \"<<a[x].l<<\" \"<<a[x].r<<endl;\n\tif(a[x].l==a[x].r){\n\t\ta[x].data+=data;\n\t\ta[x].data?a[x].ans=to:a[x].ans=0;\n\t\treturn;\n\t}\n\tint mid=(a[x].l+a[x].r)>>1;\n\tif(mid>=to)add(ls(x),to,data);\n\telse add(rs(x),to,data);\n\ta[x].data=max(a[ls(x)].data,a[rs(x)].data);\n\tif(a[x].data==a[ls(x)].data)a[x].ans=a[ls(x)].ans;\n\telse a[x].ans=a[rs(x)].ans;\n}\nvector<pair<int,int> >t[N];\nvoid tree(int x,int y,int z){\n\twhile(top[x]!=top[y]){\n\t\tif(dist[top[x]]<dist[top[y]])swap(x,y);\n\t\tt[L[top[x]]].push_back(make_pair(z,1));\n\t\tt[L[x]+1].push_back(make_pair(z,-1));\n\t\tx=fa[top[x]];\n\t}\n\tif(dist[x]>dist[y])swap(x,y);\n\tt[L[x]].push_back(make_pair(z,1));\n\tt[L[y]+1].push_back(make_pair(z,-1));\n}\nint ans[N];\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;x=read();y=read();\n\t\tadd(x,y);add(y,x);\n\t}\n\tdfs1(1,0);dfs2(1,1);\n\t//for(int i=1;i<=n;i++){\n\t\t//printf(\"%d %d %d %d\\n\",L[i],size[i],dist[i],top[i]);\n\t//}\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tx=read();y=read();z=read();\n\t\ttree(x,y,z);\n\t}\n\tbuild(1,1,N-5);\n\tfor(int i=1;i<=n;i++){\n\t\tint sz=t[i].size();\n\t\t//cout<<i<<endl;\n\t\tfor(int j=0;j<sz;j++){\n\t\t    //cout<<t[i][j].first<<\" \"<<t[i][j].second<<endl;\n\t\t    add(1,t[i][j].first,t[i][j].second);\n\t\t}\n\t\tans[pt[i]]=a[1].ans;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t  printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1556280247,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u5bf9\u6bcf\u79cd\u989c\u8272\u5206\u522b\u5904\u7406\u3002\r\n\r\n\u5bf9\u6bcf\u79cd\u989c\u8272\u7684\u64cd\u4f5c\u5efa\u7acb\u865a\u6811\u3002\u8fd9\u91cc\u5bf9\u539f\u6811\u9884\u5904\u7406 $O(n)-O(1)$ LCA \u5373\u53ef\u7ebf\u6027\u3002\r\n\r\n\u90a3\u4e48\u5bf9\u865a\u6811\u4e0a\u6bcf\u4e00\u6761\u8fb9\u5373\u539f\u6811\u4e0a\u7684\u4e00\u6761\u94fe\uff0c\u53ef\u4ee5\u6c42\u51fa\u4ed6\u88ab\u52a0\u5165\u8fd9\u79cd\u989c\u8272\u591a\u5c11\u6b21\uff0c\u8bbe\u4e3a\u8fb9\u6743\u3002\r\n\r\n\u90a3\u4e48\u76f8\u5f53\u4e8e\u82e5\u5e72\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5bf9\u4e00\u6761\u94fe\u53d6 $\\max$\u3002\r\n\r\n\u628a\u6240\u6709\u865a\u6811\u4e0a\u7684\u8fb9\u6309\u6743\u6392\u5e8f\u3002\u4ece\u5927\u5230\u5c0f\u626b\u63cf\uff0c\u7ef4\u62a4\u6811\u4e0a\u5e76\u67e5\u96c6\u3002\u5373\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u6700\u6df1\u7684\u6ca1\u6709\u88ab\u64cd\u4f5c\u8fc7\u7684\u7956\u5148\u3002\u6bcf\u6b21\u53d6 $\\max$ \u76f8\u5f53\u4e8e\u4ece\u94fe\u5e95\u5411\u4e0a\u8df3\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u8df3\u8fc7\u5df2\u7ecf\u88ab\u64cd\u4f5c\u8fc7\u7684\u70b9\uff0c\u628a\u672a\u88ab\u64cd\u4f5c\u8fc7\u7684\u70b9 $\\max$ \u8bbe\u6210\u5f53\u524d\u865a\u6811\u8fb9\u7684\u6743\u503c\u5e76\u6807\u8bb0\u5373\u53ef\u3002\r\n\r\n\u8fd9\u4e2a\u6811\u4e0a\u5e76\u67e5\u96c6\u662f\u53ef\u4ee5\u7ebf\u6027\u7684\u3002\u6811\u5206\u5757\u540e\u56db\u6bdb\u5b50\u6216\u8005\u5229\u7528\u4f4d\u8fd0\u7b97\u5373\u53ef\u3002",
        "postTime": 1648293442,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "P4556 \u96e8\u5929\u7684\u5c3e\u5df4 \u7ebf\u6027\u7b97\u6cd5"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c$QwQ$](https://ctz45562.github.io/2019/03/03/%E9%A2%98%E8%A7%A3-%E6%B4%9B%E8%B0%B7-P4556-%E3%80%90-Vani%E6%9C%89%E7%BA%A6%E4%BC%9A-%E9%9B%A8%E5%A4%A9%E7%9A%84%E5%B0%BE%E5%B7%B4%E3%80%91/)\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P4556)\n\n\u9898\u89e3\u6ca1\u6709\u6811\u5256\u8f6c\u5316\u5e8f\u5217\u505a\u7684\uff1f\u6765\u6c34\u4e00\u53d1\u9898\u89e3\u3002\n\n\u9996\u5148\u7b80\u5316\u4e00\u4e0b\uff0c\u5982\u679c\u628a\u95ee\u9898\u6539\u6210\u5e8f\u5217\u4e0a\u505a\uff0c\u5373\uff1a\n\n> \u6bcf\u4e2a\u64cd\u4f5c\u5728\u4e00\u6bb5\u533a\u95f4\u4e0a\u52a0\u4e00\u79cd\u989c\u8272\uff0c\u6c42\u6bcf\u4e2a\u70b9\u6570\u91cf\u6700\u591a\u7684\u989c\u8272\u3002\n\n\u7528\u4e00\u4e0b\u5dee\u5206\u7684\u601d\u60f3\uff1a\u8bb0\u64cd\u4f5c\u533a\u95f4\u4e3a$[L,R]$\uff0c\u626b\u63cf\u6574\u4e2a\u5e8f\u5217\u3002\u5982\u679c**\u626b\u5230**\u67d0\u4e2a\u64cd\u4f5c\u7684$L$,\u5c31\u628a\u5b83\u7684\u989c\u8272$+1$\uff1b\u5982\u679c**\u626b\u8fc7**\u67d0\u4e2a\u64cd\u4f5c\u7684$R$\u5c31\u628a\u5b83\u7684\u989c\u8272$-1$\u3002\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u5c31\u662f\u626b\u5230\u8fd9\u4e2a\u70b9\u65f6\u989c\u8272\u6570\u91cf\u6700\u591a\u7684\u4e00\u4e2a\u3002\u8fd9\u4e9b\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\n\n\u73b0\u5728\u653e\u5230\u6811\u4e0a\u4e86\uff0c\u4e3a\u94fe\u64cd\u4f5c\u3002\u5c31\u80fd\u4f7f\u7528\u6811\u5256\u3002\u6811\u5256\u73c2\u4ee5\u628a\u4e00\u6761\u94fe\u5256\u6210$logn$\u4e2a**\u7f16\u53f7\u8fde\u7eed**\u7684\u94fe\u3002\u8fd9\u6837\u5c31\u80fd\u628a\u6bcf\u4e2a\u64cd\u4f5c\u5256\u6210$logn$\u4e2a\u65b0\u64cd\u4f5c\uff0c\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u653e\u5230\u5e8f\u5217\u4e0a\u505a\u5c31\u884c\u4e86$QwQ$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6bcf\u4e2a\u64cd\u4f5c\u4f1a\u88ab\u5206\u6210$logn$\u4e2a\u65b0\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u65b0\u64cd\u4f5c\u4f1a\u6267\u884c\u4e00\u6b21$O(logn)$\u7684\u7ebf\u6bb5\u6811\u64cd\u4f5c\u3002\u603b\u590d\u6742\u5ea6$O(nlog^2n)$\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(nlogn)$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <vector>\n\n#define maxn 100005\n#define inf 0x3f3f3f3f\n#define pn putchar('\\n')\n#define px(x) putchar(x)\n#define ps putchar(' ')\n#define pd puts(\"======================\")\n#define pj puts(\"++++++++++++++++++++++\")\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\ntemplate<typename T>\ninline T read(){\n\tT x=0;\n\tint y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\nint h[maxn],num;\nstruct edge{\n\tint pre,to;\n}e[maxn<<1];\nstruct Question{\n\tint d,s;\n};\nvector<Question>q[maxn];\n//Question\u7528\u6765\u5b58\u64cd\u4f5c\nint seg[maxn],pos[maxn],son[maxn],siz[maxn],deep[maxn],fa[maxn],top[maxn],cnt[maxn],ans[maxn],all;\ninline void add(int from,int to){\n\te[++num].pre=h[from],h[from]=num,e[num].to=to;\n}\nstruct Segment_Tree{\n\tint dat[maxn<<2],wh[maxn<<2];\n#define ls(x) (x<<1)\n#define rs(x) (x<<1|1)\n\tinline void update(int node){\n\t\tif(!dat[ls(node)]&&!dat[rs(node)])dat[node]=wh[node]=0;\n\t\telse if(dat[ls(node)]>dat[rs(node)]||(dat[ls(node)]==dat[rs(node)]&&wh[ls(node)]<wh[rs(node)]))dat[node]=dat[ls(node)],wh[node]=wh[ls(node)];\n\t\telse dat[node]=dat[rs(node)],wh[node]=wh[rs(node)];\n\t}\n    //wh\u8868\u793a\u6700\u5927\u503c\u7684\u7f16\u53f7\n\tvoid build(int l,int r,int node){\n\t\tif(l==r){\n\t\t\twh[node]=l;\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tbuild(l,mid,ls(node));\n\t\tbuild(mid+1,r,rs(node));\n\t}\n\tvoid add(int poi,int l,int r,int node,int d){\n\t\tif(l==r){\n\t\t\tdat[node]+=d;\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tif(poi<=mid)add(poi,l,mid,ls(node),d);\n\t\telse add(poi,mid+1,r,rs(node),d);\n\t\tupdate(node);\n\t}\n}st;\nstruct Tree_Chain_split{\n\tvoid dfs1(int node=1){\n\t\tsiz[node]=1;\n\t\tfor(register int i=h[node];i;i=e[i].pre){\n\t\t\tint x=e[i].to;\n\t\t\tif(!siz[x]){\n\t\t\t\tfa[x]=node,deep[x]=deep[node]+1;\n\t\t\t\tdfs1(x);\n\t\t\t\tif(siz[x]>siz[son[node]])son[node]=x;\n\t\t\t\tsiz[node]+=siz[x];\n\t\t\t}\n\t\t}\t\n\t}\n\tvoid dfs2(int node=1){\n\t\tseg[node]=++all;\n\t\tpos[all]=node;\t\n\t\tif(son[node]){\n\t\t\ttop[son[node]]=top[node];\n\t\t\tdfs2(son[node]);\n\t\t\tfor(register int i=h[node];i;i=e[i].pre){\n\t\t\t\tint x=e[i].to;\n\t\t\t\tif(!seg[x])top[x]=x,dfs2(x);\n\t\t\t}\n\t\t}\n\t}\n\tvoid ask(int x,int y,int d){\n\t\tQuestion add,minus;\n\t\tadd.s=minus.s=d,add.d=1,minus.d=-1;\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(deep[top[x]]<deep[top[y]])swap(x,y);\n\t\t\tq[seg[top[x]]].push_back(add),q[seg[x]+1].push_back(minus);\n            //\u6ce8\u610f\u51cf\u53bb\u7684\u8981\u52a01\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(deep[x]<deep[y])swap(x,y);\n\t\tq[seg[y]].push_back(add),q[seg[x]+1].push_back(minus);\n\t}//\u62c6\u5206\u64cd\u4f5c\u51fd\u6570\n}tcs;\nint main(){\n\tint n=read(),m=read(),tp=0;\n\tfor(register int i=1;i<n;++i){\n\t\tint a=read(),b=read();\n\t\tadd(a,b),add(b,a);\n\t}\n\ttcs.dfs1(),tcs.dfs2();\n\twhile(m--){\n\t\tint a=read(),b=read(),d=read();\n\t\ttp=max(tp,d);\n\t\ttcs.ask(a,b,d);\n\t}\n\tst.build(1,tp,1);\n\tfor(register int i=1;i<=n;++i){\n\t\tfor(register int j=0;j<q[i].size();++j)\n\t\t\tst.add(q[i][j].s,1,tp,1,q[i][j].d);\n\t\tans[pos[i]]=st.wh[1];\n\t}\n\tfor(register int i=1;i<=n;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n}\n```\n\n",
        "postTime": 1551599903,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u5e7f\u544a\uff1a\n\n[$\\huge\\texttt{BLOG}$](https://stevebraveman.github.io/)\n\n\u770b\u4e86\u770b\u9898\u89e3\u533a\u9664\u4e86\u6811\u5256\u505a\u6cd5\u5c31\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u56e0\u4e3a\u6700\u8fd1\u5728\u7ec3\u5e73\u8861\u6811\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u6240\u4ee5\u6211\u5c31\u6765\u5199\u4e00\u7bc7\u5e73\u8861\u6811\u542f\u53d1\u5f0f\u5408\u5e76\u505a\u6cd5\u7684\u9898\u89e3\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\uff0c\u5e73\u8861\u6811\u7684\u8282\u70b9\u4fdd\u5b58\u7684\u4fe1\u606f\u6709\uff1a\u7cae\u98dfid\uff0c\u8fd9\u4e2a\u7cae\u98df\u7684\u6570\u91cf\uff0c\u5e73\u8861\u6811\u5185\u5b50\u6811\u4e2d\u6700\u591a\u7684\u7cae\u98df\u7684id\uff0c\u5e73\u8861\u6811\u5185\u5b50\u6811\u4e2d\u6700\u591a\u7684\u7cae\u98df\u7684\u6570\u91cf\u3002\n\n\u6211\u4eec\u9700\u8981\u628a`update`\u51fd\u6570\u53d8\u6362\u4e00\u4e0b\uff0c\u8ba9\u4ed6\u4e0d\u4ec5\u66f4\u65b0\u5b50\u6811\u5927\u5c0f\u8fd8\u66f4\u65b0\u5173\u4e8e\u7cae\u98df\u7684\u4fe1\u606f\u3002\n\n\u90a3\u4e48\u5982\u4f55\u4fee\u6539\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8fd0\u7528\u6811\u4e0a\u5dee\u5206\u8fdb\u884c\u4fee\u6539\uff0c\u6700\u540e\u518d\u8fdb\u884c\u5e73\u8861\u6811\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n### Code\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <ctime>\n#define MAXN 101000\n#define LOG 20\nstruct Treap {\n\tint v, dat, num;\n\tint cnt, siz, maxx, maxid;\n\tint l, r;\n}a[MAXN * LOG << 2];\nstruct Edge {\n\tint v, nx;\n}e[MAXN << 1];\nint tot, rt[MAXN], head[MAXN], ecnt, anc[MAXN][LOG + 1], dep[MAXN], ans[MAXN], fa[MAXN];\nvoid add(int f, int t) {\n\te[++ecnt] = (Edge) {t, head[f]};\n\thead[f] = ecnt;\n}\nint New(int val, int num) {\n\ttot++;\n\ta[tot].v = val;\n\ta[tot].num = num;\n\ta[tot].dat = rand();\n\ta[tot].cnt = a[tot].siz = 1;\n\ta[tot].maxx = num;\n\ta[tot].maxid = val;\n\treturn tot;\n}\nvoid update(int p) {\n\ta[p].siz = a[p].cnt + a[a[p].l].siz + a[a[p].r].siz;\n\ta[p].maxx = a[p].num;\n\ta[p].maxid = a[p].v;\n\tint maxx = a[p].maxx, maxid = a[p].maxid;\n\tif (a[a[p].l].maxx > maxx || (a[a[p].l].maxx == maxx && a[a[p].l].maxid < maxid)) {\n\t\tmaxx = a[a[p].l].maxx;\n\t\tmaxid = a[a[p].l].maxid;\n\t}\n\tif (a[a[p].r].maxx > maxx || (a[a[p].r].maxx == maxx && a[a[p].r].maxid < maxid)) {\n\t\tmaxx = a[a[p].r].maxx;\n\t\tmaxid = a[a[p].r].maxid;\n\t}\n\ta[p].maxx = maxx;\n\ta[p].maxid = maxid;\n}\nvoid zig(int &p) {\n\tint q = a[p].l;\n\ta[p].l = a[q].r, a[q].r = p, p = q;\n\tupdate(a[p].r), update(p);\n}\nvoid zag(int &p) {\n\tint q = a[p].r;\n\ta[p].r = a[q].l, a[q].l = p, p = q;\n\tupdate(a[p].l), update(p);\n}\nvoid insert(int &p, int val, int num) {\n\tif (!p) {\n\t\tp = New(val, num);\n\t\treturn;\n\t}\n\tif (val == a[p].v) {\n\t\ta[p].num += num;\n\t\tupdate(p);\n\t\treturn;\n\t}\n\tif (val < a[p].v) {\n\t\tinsert(a[p].l, val, num);\n\t\tif (a[p].dat < a[a[p].l].dat) zig(p);\n\t}\n\telse {\n\t\tinsert(a[p].r, val, num);\n\t\tif (a[p].dat < a[a[p].r].dat) zag(p);\n\t}\n\tupdate(p);\n}\nint find(int x) {\n\tif (x == fa[x]) return x;\n\telse return fa[x] = find(fa[x]);\n}\nvoid merge(int x, int y) {\n\tif (!y) return;\n\tinsert(rt[x], a[y].v, a[y].num);\n\tmerge(x, a[y].l);\n\tmerge(x, a[y].r);\n}\nvoid dfs(int f, int u, int d) {\n\tdep[u] = d;\n\tfor (int i = head[u]; i; i = e[i].nx) {\n\t\tint to = e[i].v;\n\t\tif (to == f) continue;\n\t\tanc[to][0] = u;\n\t\tdfs(u, to, d + 1);\n\t}\n}\nvoid swim(int &x, int h) {\n\tfor (int i = 0; h; i++) {\n\t\tif (h & 1) x = anc[x][i];\n\t\th >>= 1;\n\t}\n}\nint LCA(int x, int y) {\n\tif (dep[x] < dep[y]) std::swap(x, y);\n\tswim(x, dep[x] - dep[y]);\n\tif (x == y) return x;\n\tfor (int i = LOG; i >= 0; i--) {\n\t\tif (anc[x][i] != anc[y][i]) {\n\t\t\tx = anc[x][i];\n\t\t\ty = anc[y][i];\n\t\t}\n\t}\n\treturn anc[x][0];\n}\nvoid dfs1(int f, int u) {\n\tfor (int i = head[u]; i; i = e[i].nx) {\n\t\tint to = e[i].v;\n\t\tif (to == f) continue;\n\t\tdfs1(u, to);\n\t\tint x = find(u);\n\t\tint y = find(to);\n\t\tif (a[rt[x]].siz < a[rt[y]].siz) std::swap(x, y);\n\t\tfa[y] = x;\n\t\t// printf(\"Merge: %d --> %d\\n\", y, x);\n\t\tmerge(x, rt[y]);\n\t}\n\tint q = find(u);\n\tans[u] = a[rt[q]].maxid;\n}\nint n, m, x, y, z;\nint main() {\n\tsrand(time(NULL));\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i < n; i++) {\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadd(x, y);\n\t\tadd(y, x);\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tfa[i] = i;\n\t}\n\tdfs(1, 1, 1);\n\tfor (int i = 1; i <= LOG; i++) {\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tanc[j][i] = anc[anc[j][i - 1]][i - 1];\n\t\t}\n\t}\n\twhile (m--) {\n\t\tscanf(\"%d%d%d\", &x, &y, &z);\n\t\tinsert(rt[x], z, 1);\n\t\tinsert(rt[y], z, 1);\n\t\tint lc = LCA(x, y);\n\t\t// printf(\"%d\\n\", lc);\n\t\tinsert(rt[lc], z, -1);\n\t\t// if (lc == 1) continue;\n\t\tinsert(rt[anc[lc][0]], z, -1);\n\t}\n\tdfs1(1, 1);\n\tfor (int i = 1; i <= n; i++) {\n\t\tprintf(\"%d\\n\", ans[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1573355737,
        "uid": 96570,
        "name": "RiverFun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u8ddf\u5929\u5929\u7231\u8dd1\u6b65\u4e00\u6837\uff0c\u8fd9\u9898\u4e5f\u53ef\u4ee5\u8f6c\u5230\u6811\u4e0a\u5dee\u5206\n\n\u8bbeb\u4e3a\u8ba1\u6570\u6570\u7ec4\n\n\u6bcf\u6b21$b[x][z]++,b[y][z]++,b[lca(x,y)][z]--,b[f[lca(x,y)][0]][z]--$\n\n\u7136\u540e\u53ef\u4ee5\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff\u4e8c\u7ef4\u6570\u7ec4\uff0c\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u6240\u5728\u4f4d\u7f6e\uff0c\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O((n+m)log(n+m))$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define re register int\n#define MAXN 100005\nusing namespace std;\nstruct tu{\n\tint u,v,nxt;\n}e[MAXN*2];\nint lc[MAXN*50],rc[MAXN*50],d[MAXN*50],t[MAXN*50];//\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u7684\u4f4d\u7f6e\nint f[MAXN][16],head[MAXN],dep[MAXN],x[MAXN],y[MAXN],z[MAXN];\nint mmax;\nint ans[MAXN];\nint n,m,rt[MAXN*50],cnt,tot;\nvoid add(int u,int v){\n\te[++cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nvoid dfs(int u,int fa){\n\tdep[u]=dep[fa]+1;\n\tf[u][0]=fa;\n\tfor(re i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v==fa)continue;\n\t\tdfs(v,u);\t\n\t}\n}\nvoid pushup(int x){\n\tif(d[lc[x]]>=d[rc[x]])d[x]=d[lc[x]],t[x]=t[lc[x]];\n\telse d[x]=d[rc[x]],t[x]=t[rc[x]];\n}\n//\u5c06pos+val\uff0c\u5e76\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\nint insert(int x,int l,int r,int pos,int val){\n\tif(!x)x=++tot;\n\tif(l==r){d[x]+=val,t[x]=l;return x;}\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)lc[x]=insert(lc[x],l,mid,pos,val);\n\telse rc[x]=insert(rc[x],mid+1,r,pos,val);\n\tpushup(x);\n\treturn x;\n}\nint merge(int p,int q,int l,int r){\n\tif(!p)return q;\n\tif(!q)return p;\n\tif(l==r){\n\t\td[p]+=d[q];\n\t\tt[p]=l;\n\t\treturn p;\n\t\t//\u5220\u9664q\n\t}\n\tint mid=(l+r)>>1;\n\tlc[p]=merge(lc[p],lc[q],l,mid);\n\trc[p]=merge(rc[p],rc[q],mid+1,r);\n\tpushup(p);\n\treturn p;\n}//\u7ebf\u6bb5\u6811\u5408\u5e76\nint lca(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y);\n\tfor(re i=15;i>=0;i--)\n\t\tif(dep[f[x][i]]>=dep[y])x=f[x][i];\n\tif(x==y)return x;\n\tfor(re i=15;i>=0;i--)\n\t\tif(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\nvoid dfs1(int u){\n\tfor(re i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==f[u][0])continue;\n\t\tdfs1(v);\n\t\trt[u]=merge(rt[u],rt[v],1,mmax);\n\t}\n\tif(d[rt[u]])ans[u]=t[rt[u]];\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(re i=1;i<=n-1;i++)\n\t{\n\t\tint a1,a2;\n\t\tscanf(\"%d%d\",&a1,&a2);\n\t\tadd(a1,a2);\n\t\tadd(a2,a1);\n\t}\n\tdfs(1,0);\n\tfor(re j=1;j<=15;j++)\n\t\tfor(re i=1;i<=n;i++)\n{\n\t\tf[i][j]=f[f[i][j-1]][j-1];\n}\n\tfor(re i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&x[i],&y[i],&z[i]),mmax=max(mmax,z[i]);\n\tfor(re i=1;i<=m;i++){\n\t\tint ff=lca(x[i],y[i]);\n\t\trt[x[i]]=insert(rt[x[i]],1,mmax,z[i],1);\n\t\trt[y[i]]=insert(rt[y[i]],1,mmax,z[i],1);\n\t\trt[ff]=insert(rt[ff],1,mmax,z[i],-1);\n\t\trt[f[ff][0]]=insert(rt[f[ff][0]],1,mmax,z[i],-1);\n\t}\n\tdfs1(1);\n\tfor(re i=1;i<=n;i++)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1566980787,
        "uid": 57823,
        "name": "\u7ea2\u8272OI\u518d\u4e34",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "**\u6613\u9519\u70b9\uff1a**\n\n- merge()\u65f6\u5982\u679cval==0\u5e94\u5f53\u628apos\u4e5f\u8bbe\u4e3a0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6ca1\u6709\u6551\u6d4e\u7cae\u7684\u60c5\u51b5\u4e0b\u8f93\u51fa\u503c\u4e3a0.\n- \u6bcf\u6b21insert\u540eval\u548cpos\u4e00\u5b9a\u90fd\u8981\u66f4\u65b0.\n- \u7531\u4e8e\u8981\u6c42\u7f16\u53f7\u5c3d\u91cf\u5c0f\uff0cpos\u66f4\u65b0\u65f6\u82e5tr[tr[p].ls].val>=tr[tr[p].rs].val\u5219tr[p].pos=tr[tr[p].ls].pos.\n- dfs\u5408\u5e76\u6bcf\u4e2a\u70b9\u7684\u7ebf\u6bb5\u6811\u65f6\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u66f4\u65b0root[x]=merge(root[x],root[nowV],1,maxValue).\n\n------------\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int MAXN=2e5;\nstruct Edge{\n\tint from,to,nxt;\n}e[MAXN*2];\nint head[MAXN],edgeCnt=1;\nvoid addEdge(int u,int v){\n\te[++edgeCnt].from=u;\n\te[edgeCnt].to=v;\n\te[edgeCnt].nxt=head[u];\n\thead[u]=edgeCnt;\n}\nint dep[MAXN],f[MAXN][25];\nvoid bfs(){\n\tqueue<int> q;\n\tint s=1;\n\tq.push(s);\n\tdep[s]=1;\n\twhile(!q.empty()){\n\t\tint nowU=q.front();q.pop();\n\t\tfor(int i=head[nowU];i;i=e[i].nxt){\n\t\t\tint nowV=e[i].to;\n\t\t\tif(dep[nowV])continue;\n\t\t\tdep[nowV]=dep[nowU]+1;\n\t\t\tf[nowV][0]=nowU;\n\t\t\tfor(int j=1;j<=20;j++){\n\t\t\t\tf[nowV][j]=f[f[nowV][j-1]][j-1];\n\t\t\t}\n\t\t\tq.push(nowV);\n\t\t}\n\t}\n}\nint lca(int a,int b){\n\tif(dep[a]>dep[b])swap(a,b);\n\tfor(int i=20;i>=0;i--){\n\t\tif(dep[f[b][i]]>=dep[a])b=f[b][i];\n\t}\n\tif(a==b)return a;\n\tfor(int i=20;i>=0;i--){\n\t\tif(f[a][i]!=f[b][i])\n\t\t\ta=f[a][i],b=f[b][i];\n\t}\n\treturn f[a][0];\n}\nstruct Node{\n\tint ls,rs;\n\tint val,pos;\n}tr[MAXN*20*4];\nint nodeCnt=0;\nvoid insert(int &p,int l,int r,int x,int val){\n\tif(!p)p=++nodeCnt;\n\tif(l==r){\n\t\ttr[p].val+=val;\n\t\ttr[p].pos=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)insert(tr[p].ls,l,mid,x,val);\n\telse if(x>mid)insert(tr[p].rs,mid+1,r,x,val);\n\ttr[p].val=max(tr[tr[p].ls].val,tr[tr[p].rs].val);\n\ttr[p].pos=tr[tr[p].ls].val>=tr[tr[p].rs].val?tr[tr[p].ls].pos:tr[tr[p].rs].pos;\n}\nint merge(int p,int q,int l,int r){\n\tif(!p)return q;\n\tif(!q)return p;\n\tif(l==r){\n\t\ttr[p].val+=tr[q].val;\n\t\ttr[p].pos=tr[p].val?l:0;\n\t\treturn p;\n\t}\n\tint mid=(l+r)>>1;\n\ttr[p].ls=merge(tr[p].ls,tr[q].ls,l,mid);\n\ttr[p].rs=merge(tr[p].rs,tr[q].rs,mid+1,r);\n\ttr[p].val=max(tr[tr[p].ls].val,tr[tr[p].rs].val);\n\ttr[p].pos=tr[tr[p].ls].val>=tr[tr[p].rs].val?tr[tr[p].ls].pos:tr[tr[p].rs].pos;\n\treturn p;\n}\nint root[MAXN],ans[MAXN];\nint maxValue;\nvoid dfs(int x){\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint nowV=e[i].to;\n\t\tif(dep[nowV]>dep[x]){\n\t\t\tdfs(nowV);\n\t\t\troot[x]=merge(root[x],root[nowV],1,maxValue);\n\t\t}\n\t}\n\tans[x]=tr[root[x]].pos;\n}\nint X[MAXN],Y[MAXN],Z[MAXN];\nint vals[MAXN];\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n-1;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\taddEdge(u,v);\n\t\taddEdge(v,u);\n\t}\n\tbfs();\n\tfor(int i=1;i<=n;i++)\n\t\troot[i]=++nodeCnt;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&X[i],&Y[i],&Z[i]);\n\t\tvals[i]=Z[i];\n\t}\n\tsort(vals+1,vals+1+m);\n\tmaxValue=unique(vals+1,vals+1+m)-(vals+1);\n\tfor(int i=1;i<=m;i++){\n\t\tint x=X[i],y=Y[i];\n\t\tint z=lower_bound(vals+1,vals+maxValue+1,Z[i])-vals;\n\t\tint p=lca(x,y);\n\t\tinsert(root[x],1,maxValue,z,1);\n\t\tinsert(root[y],1,maxValue,z,1);\n\t\tinsert(root[p],1,maxValue,z,-1);\n\t\tif(f[p][0])\n\t\t\tinsert(root[f[p][0]],1,maxValue,z,-1);\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=n;i++){\n\t\tprintf(\"%d\\n\",vals[ans[i]]);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1569812609,
        "uid": 115758,
        "name": "Object_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    },
    {
        "content": "\u5173\u952e\u5728\u80fd\u5426\u60f3\u5230\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u5f53\u65f6\u60f3\u5230\u4e86\u79bb\u6563\u5316\uff08\u5f88\u614c\u6ca1\u6253\u51fa\u6765\u3002\u3002\u3002\uff09\uff0c\u6811\u4e0a\u5dee\u5206\uff0clca\u500d\u589e\uff0c\u5f53\u65f6\u89c9\u6ef4\u500d\u589e\u5f88\u96be\u6253\uff0c\u4e00\u770bn<100000,\u4e8e\u662f\u9009\u62e9\n\n\u7528\u5411\u4e0a\u6807\u8bb0\u6cd5\uff0c\u7136\u800c\u5c11\u4e86\u4e00\u884c\u4ee3\u7801\uff0c\uff0c\uff0c\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\u3002\u3002\n\n \n\n \n\n\u73b0\u5728\u770b\u6765\u500d\u589e\u771f\u662f\u4e00\u70b9\u4e0d\u96be\u554a\u597d\u6253\u6709\u597d\u7528\uff0c\u6240\u4ee5\u4e0d\u8981\u6709\u4e3a\u96be\u60c5\u7eea\uff0c\u521a\u5c31\u5b8c\u4e86\u3002\uff08\u5e73\u65e5\u677f\u5b50\u8981\u591a\u6253\u8bb0\u719f\u554a\uff09\n\n\u4e4b\u6240\u4ee5\u6ca1\u60f3\u5230\u7ebf\u6bb5\u6811\u5408\u5e76\u662f\u56e0\u4e3a\u5f53\u65f6\u771f\u7684\u6ca1\u6709\u900f\u5f7b\u7406\u89e3\uff0c\n\n\u6240\u4ee5\u65b0\u77e5\u8bc6\u70b9\u8fd8\u662f\u8981\u77e5\u9053\u5b83\u80fd\u5e72\u4ec0\u4e48\uff0c\u77e5\u9053\u5b83\u7684\u7528\u5904\u3002\n\n\u79bb\u6563\u5316\u7528\u6765\u5e72\u63891->10^9\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u771f\u7684\u50bb\u8ba4\u4e3a\u8981\u662f\u670910^9\u79cd\u4e0d\u5c31\u5b8c\u4e86\u5417\uff0c\uff0c\uff0c\u7136\u540e\u53d1\u73b0\u5fd8\u4e86\u8fd8\u6709m\u6b21\u64cd\u4f5c\u8fd9\u4e1c\u4e1c\uff0c\u6240\u4ee5z\u79bb\u6563\u5316\u540elen\u6700\u5927\u4e5f\u5c31m\u4e2a\u5361\u6389\u4e86\u5f88\u591a\n\n\u4ee5\u524d\u4e00\u4e2a\u7269\u54c1\u7684\u9898\u76f4\u63a5dfs,lca\u6811\u4e0a\u5dee\u5206\u5c31\u884c\uff0c\u73b0\u5728\u670910^9\u4e2a\uff08\u79bb\u6563\u540e10^5\u4e2a\uff09\uff0c\u7a7a\u95f4\u65f6\u95f4\u4e0d\u53ef\u80fd\u4e00\u4e2a\u4e00\u4e2a\u53bb\u7ef4\u62a4\u6240\u4ee5 \u5f97\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u6240\u4ee5\u5f97\u79bb\u7ebf\u6765\u505a\uff08\u6211\u627f\u8ba4\u73b0\u5728\u624d\u77e5\u9053\u79bb\u7ebf\u5728\u7ebf\u662f\u561b\u73a9\u610f\u3002\u3002\u4e22\u4eba\u554a\u3002\u3002\u3002\uff09\n\n\u6bcf\u4e2a\u70b9\u6709\u5f88\u591a\u4fe1\u606f\u6240\u4ee5\u6743\u503c\u7ebf\u6bb5\u6811\u7528\u6765\u4f18\u5316\u7a7a\u95f4\uff08\u5f53\u7136\u4e5f\u80fd\u4f18\u5316\u65f6\u95f4\uff09\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u52a8\u6001\u5f00\u6811\u63d2\u5165\u548c\u5220\u9664\uff08lca,f[lca]\uff09\uff0c\u6700\u540edfs,\u7236\u4eb2\u5408\u5e76\u513f\u5b50\u3002\n\n\u6240\u4ee5\u9700\u7ef4\u62a4\u533a\u95f4\u7684maxcnt\u4ee5\u53ca\u5176id\uff0c\u5728merge\u65f6\u5c31\u9700\u8981\u591a\u4f20\u4e00\u4e0bl,r(1,len)\uff0c\u5982\u679cl==r\u66f4\u65b0maxx\u503c\u548cid\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679cmaxx<=0,id\u5e72\u62100\uff08\u9898\u76ee\u8981\u6c42\uff09\u3002\n\nsd\u9519\u8bef\uff1amerge\u65f6\u5fd8\u4e86\u52a0\u4e0aroot[x]=merge,\u5982\u679croot[x]=0,\u5c31\u4f1a...\u70b8\u3002\u8fd8\u6709\u7a7a\u95f4\u6ca1\u5f00\u591f\u5f97\u5f00\u5230maxn*50\u3002\n\n\u4f18\u5316\uff1a\u63d2\u5165\u65f6\u5982\u679clca==x||lca==y,\u90a3\u5c31\u63d2\u5165\u4e86\u4e00\u6b21\u5220\u4e86\u4e00\u6b21\u6240\u4ee5\u5e72\u8106\u4e0d\u63d2\u5165\u3002\u3002\u3002",
        "postTime": 1564631462,
        "uid": 104755,
        "name": "three_D",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4\u3011"
    }
]