[
    {
        "content": "###\u8fd9\u7edd\u5bf9\u4e0d\u662f\u4e00\u9053\u5165\u95e8\u96be\u5ea6\u7684\u9898\uff01\n\n\u867d\u7136\u6211\u624b\u8d31\u5199\u4e86\u5165\u95e8\u3002\u3002\u3002\u3002\n\n\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\u6c42\u8f7b\u55b7\n\n\u4f60\u4f1a\u53d1\u73b0\u8fd9\u9053\u9898\u6539\u4e00\u4e0b\u4f1a\u53d8\u6210\u8fd9\u6837\n\n\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3aN-2\u7684\u5e8f\u5217\uff0c\u4f60\u80fd\u8fdb\u884cM\u6b21\u64cd\u4f5c\n\n\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u7ffb\u8f6c\u5176\u4e2d\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff08\u4e5f\u53ef\u4ee5\u4e0d\u53cd\u8f6c \u6d6a\u8d39\u4e00\u6b21\u64cd\u4f5c\uff09\n\n\u521d\u59cb\u503c\u5168\u4e3a0\n\n\u6c42M\u6b21\u64cd\u4f5c\u80fd\u83b7\u5f97\u7684\u53ef\u80fd\u7ed3\u679c\u6709\u591a\u5c11\u79cd\n\n\n\u7136\u540e\u5c31\u53d8\u6210\u4e86\u6c42\u7ec4\u5408\u6570\u7684\u548c\n\n\u4f60\u4f1a\u53d1\u73b0M\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4ea7\u751f\u76840\u6bb51\u6bb5\u7684\u6570\u91cf\u5c0f\u4e8e2\\*M+1\n\n\u5e8f\u5217\u6709N-3\u4e2a\u7a7a\n\n\u63d20~2\\*M\u6b21\u5c31\u53ef\u4ee5\u4e86\n\n\u6ce8\u610f\u9664\u4e862\\*M\u6b21 \u5176\u4ed6\u7684\u7ec4\u5408\u6570\u90fd\u662f\u8981\\*2\u7684\uff08\u4f60\u8fd8\u6709\u5269\u4f59\u64cd\u4f5c\u53ef\u4ee5\u628a\u5b83\u6574\u4f53\u7ffb\u8fc7\u6765\u561b\uff09\n\n\n\u9ad8\u7cbe\u6ca1\u4f18\u5316\u4e5f\u8fc7\u4e86\uff08\u6570\u636e\u5e76\u4e0d\u662f\u5f88\u5f3a \u6211\u751a\u81f3\u4e0d\u77e5\u9053\u9700\u4e0d\u9700\u8981\u9ad8\u7cbe \u4f46\u7406\u8bba\u4e0a\u8bb2\u662f\u8981\u7684\uff09\n\n\u4e0a\u4ee3\u7801\n\n\u2019\u2018\u2019cpp\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 105\nint ans[MAXN],f[MAXN];\nvoid cauculate1(int a)\n{for(int i=0;i<MAXN;i++) f[i]*=a;\n for(int i=MAXN-1;i>=1;i--)\n {f[i-1]+=f[i]/10;f[i]%=10;}\n return;}\n void cauculate2(int a)\n {int flag=0;\n  for(int i=0;i<MAXN;i++)\n  {flag*=10;flag+=f[i];\n   f[i]=flag/a;flag%=a;}\n   return;}\nvoid cauculate3(int k)\n{\n    for(int i=MAXN-1;i>=1;i--)\n    {\n       ans[i]+=k*f[i];    \n       ans[i-1]+=ans[i]/10;\n       ans[i]%=10; \n    }\n    return;\n}\nvoid cmn(int n,int m)\n{\n    f[MAXN-1]=1;\n    for(int i=0;i<m;i++) cauculate1(n-i);\n    for(int i=0;i<m;i++) cauculate2(1+i);\n    return;\n}\nint main()\n{\n    int op,l,i;\n    scanf(\"%d%d\",&l,&op);\n    l=l-2;\n    if(op==0)\n    {\n        printf(\"1\");\n        return 0;\n    }\n    if(op>(l-1)/2)\n    {\n        f[104]=1;\n        for(i=0;i<l;i++) cauculate1(2);\n        for(i=0;i<MAXN;i++) if(f[i]) break;\n        for(;i<MAXN;i++) printf(\"%d\",f[i]);\n    }\n    else\n    {\n        for(i=1;i<2*op;i++)\n        {\n            cmn(l-1,i);\n            cauculate3(2);\n            memset(f,0,sizeof(f));\n        }\n        cmn(l-1,2*op);\n        cauculate3(1);\n        memset(f,0,sizeof(f));\n        f[MAXN-1]=2;\n        cauculate3(1);\n        for(i=0;i<MAXN;i++) if(ans[i]) break;\n        for(;i<MAXN;i++) printf(\"%d\",ans[i]);\n    }\n    return 0;\n}\n\u2018\u2019\u2018\n```",
        "postTime": 1499776396,
        "uid": 19133,
        "name": "Purified",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2270 \u3010[HNOI2002]\u5976\u725b\u7684\u8fd0\u7b97\u3011"
    },
    {
        "content": "\u597d\u9898\uff0c\u4e0d\u8fc7\u770b\u9898\u89e3\u5168\u90fd\u662f\u63d2\u677f\u6cd5\u505a\u7684\uff0c\u90a3\u8fd9\u91cc\u8bf4\u53e6\u4e00\u79cd\u601d\u8def\u3002\n\n### \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a $n-2$ \u7684 01 \u5e8f\u5217\uff0c\u521d\u59cb\u5168\u662f $0$\u3002\uff08\u4e3a\u4ec0\u4e48\u662f $n-2$ \u5462\uff1f\u56e0\u4e3a $n$ \u4e2a\u6570\u5b57\uff0c$n-1$ \u4e2a\u7b26\u53f7\uff0c\u7136\u800c\u7b2c\u4e00\u4e2a\u65e0\u8bba\u5982\u4f55\u662f\u6539\u53d8\u4e0d\u4e86\u7684\uff0c\u6240\u4ee5\u53ef\u64cd\u4f5c\u7684\u5e8f\u5217\u957f\u5ea6\u4e3a $n-2$\u3002\uff09\n\n\u4f60\u6bcf\u6b21\u53ef\u4ee5\u7ffb\u8f6c\uff08flip\uff0c\u4e0d\u662f reverse\uff09\u5176\u4e2d\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u6700\u591a\u64cd\u4f5c $m$ \u6b21\u3002\n\n\u95ee\u4f60\u6700\u540e\u53ef\u80fd\u5f97\u5230\u7684\u7ed3\u679c\u6709\u591a\u5c11\u79cd\u3002\n\n### \u5206\u6790\n\n\u6211\u4eec\u8003\u8651\u8fde\u7eed\u7684\u4e24\u6b21\u64cd\u4f5c\uff0c\u6709\u56db\u79cd\u60c5\u51b5\uff1a\uff08\u4e0b\u9762\u7684\u5206\u6790\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u53e6\u4f5c\u8bf4\u660e\uff0c\u7ffb\u8f6c\u7684\u5e8f\u5217\u5747\u975e\u7a7a\uff09\n\n1. \u4e24\u6b21\u64cd\u4f5c\u7684\u5e8f\u5217\u4e0d\u76f8\u4ea4\uff0c\u4e5f\u4e0d\u76f8\u90bb\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![\u5982\u679c\u4f60\u770b\u5230\u8fd9\u884c\u5b57\uff0c\u8bf4\u660e\u56fe\u6302\u4e86qwq](http://r.photo.store.qq.com/psc?/V53Jnu1D3vSo501VoEus464qox1MU2UT/45NBuzDIW489QBoVep5mcaosC*3eAlxsZiHNnJ7N.AZJhyIJD1Lezmojzt6ydiCUrS0X2fl6xa32LL*VWf44wno03GfT7AcRifv9mE8s1TU!/r)\n\n\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u7ffb\u8f6c\u4e86\u4e24\u4e2a\u533a\u95f4\uff0c\u800c\u4e14\u8fd9\u4e24\u4e2a\u533a\u95f4\u81f3\u5c11\u95f4\u9694 $1$\uff08\u8bb0\u4f4f\u8fd9\u53e5\u8bdd\uff0c\u540e\u9762\u6709\u7528\u5230\uff09\u3002\n\n2. \u4e24\u6b21\u64cd\u4f5c\u7684\u5e8f\u5217\u76f8\u90bb\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![\u5982\u679c\u4f60\u770b\u5230\u8fd9\u884c\u5b57\uff0c\u8bf4\u660e\u56fe\u6302\u4e86qwq](http://r.photo.store.qq.com/psc?/V53Jnu1D3vSo501VoEus464qox1MU2UT/45NBuzDIW489QBoVep5mcaosC*3eAlxsZiHNnJ7N.AaXaKMyy5GkxFNTz45sGO*KNpNnAItdJPi3LafPQMg1WdzP*QDeWuRd9JXgAMIG2Sc!/r)\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u79cd\u60c5\u51b5\u7b49\u4ef7\u4e8e\u4e00\u6b21\u64cd\u4f5c\u4e86\u4e00\u6574\u6bb5\uff0c\u7136\u540e\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u76f4\u63a5\u6d6a\u8d39\u6389\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u4ed6\u770b\u505a\u4e00\u6b21\u64cd\u4f5c\u3002\n\n3. \u4e24\u6b21\u64cd\u4f5c\u7684\u5e8f\u5217\u76f8\u4ea4\uff0c\u4e14\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u7684\u662f\u7b2c\u4e00\u6b21\u7684\u5b50\u533a\u95f4\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![\u5982\u679c\u4f60\u770b\u5230\u8fd9\u884c\u5b57\uff0c\u8bf4\u660e\u56fe\u6302\u4e86qwq](http://r.photo.store.qq.com/psc?/V53Jnu1D3vSo501VoEus464qox1MU2UT/45NBuzDIW489QBoVep5mcadIDSANkZMC.4BX5KRKbHDJWaC6wkkUZWuuL.GkQozRk6FZTRg6wv6Qbl1tczg9EzXLCGt01EFCbb.JdvFEgMM!/r)\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u4e2d\u95f4\u84dd\u8272\u90a3\u4e00\u6bb5\u88ab\u7ffb\u8f6c\u4e86\u4e24\u6b21\u56de\u53bb\u4e86\uff0c\u76f8\u5f53\u4e8e\u6839\u672c\u6ca1\u6709\u64cd\u4f5c\uff0c\u8fd9\u6837\u5c31\u628a\u6211\u4eec\u7684\u7ea2\u8272\u533a\u95f4\u5206\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![\u5982\u679c\u4f60\u770b\u5230\u8fd9\u884c\u5b57\uff0c\u8bf4\u660e\u56fe\u6302\u4e86qwq](http://r.photo.store.qq.com/psc?/V53Jnu1D3vSo501VoEus464qox1MU2UT/45NBuzDIW489QBoVep5mcaosC*3eAlxsZiHNnJ7N.AYfYzYjTSlihfeF0eJSR9*oNCEwU1tWwlwHkzNMaBkmARZWbCrh7kUEdx1tq1d0RE8!/r)\n\n\u5f88\u597d\uff0c\u6211\u4eec\u73b0\u5728\u628a\u5b83\u8f6c\u5316\u6210\u4e86\u60c5\u51b5 $1$\u3002\n\n\u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u53ef\u80fd\u662f\uff0c\u4e24\u6b21\u64cd\u4f5c\u533a\u95f4\u6709\u81f3\u5c11\u4e00\u4e2a\u7aef\u70b9\u91cd\u5408\u4e86\uff0c\u90a3\u6211\u4eec\u5c31\u770b\u505a\u64cd\u4f5c\u4e00\u6b21\u6216\u4e0d\u64cd\u4f5c\u7684\u60c5\u51b5\u3002\n\n4. \u4e24\u4e2a\u5e8f\u5217\u76f8\u4ea4\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![\u5982\u679c\u4f60\u770b\u5230\u8fd9\u884c\u5b57\uff0c\u8bf4\u660e\u56fe\u6302\u4e86qwq](http://r.photo.store.qq.com/psc?/V53Jnu1D3vSo501VoEus464qox1MU2UT/45NBuzDIW489QBoVep5mcadIDSANkZMC.4BX5KRKbHDqIOxvSjY.9wJa0MW9ZfOEjujMS1UjLSQ1c*rqG*UE3HtZe51CSZFFLn1ZRfMlJCk!/r)\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u7ffb\u8f6c\u4e24\u6b21\u7684\u7ffb\u56de\u6765\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8f6c\u5316\u4e3a\u60c5\u51b5 $1$\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u8fde\u7eed\u64cd\u4f5c\u4e24\u6b21\uff0c\u6700\u591a\u7ffb\u8f6c\u4e86\u4e24\u4e2a\u4e0d\u76f8\u90bb\u533a\u95f4\u3002\n\n\u6269\u5c55\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u5f53\u8fd9\u64cd\u4f5c\u6b21\u6570\u5927\u4e8e $2$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u53d1\u73b0\u7c7b\u4f3c\u7684\u6027\u8d28\uff1a\n\n#### \u8fde\u7eed\u7684 $m$ \u6b21\u64cd\u4f5c\u7b49\u4ef7\u4e8e\u7ffb\u8f6c\u6700\u591a $m$ \u4e2a\u4e0d\u76f8\u90bb\u7684\u533a\u95f4\u3002\n\n\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\uff0c\u9898\u610f\u5982\u4e0b\uff1a\n\n\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a $n-2$ \u7684 01 \u5e8f\u5217\uff0c\u521d\u59cb\u5168\u662f $0$\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u7ffb\u8f6c $m$ \u4e2a**\u4e92\u4e0d\u76f8\u90bb**\u7684\u533a\u95f4\uff0c\u95ee\u6700\u540e\u53ef\u80fd\u5f97\u5230\u7684\u7ed3\u679c\u6709\u591a\u5c11\u79cd\u3002\n\n\u56e0\u4e3a\u9009\u62e9\u7684\u533a\u95f4\u4e4b\u95f4\u81f3\u5c11\u9694\u4e86 $1$ \u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u62c5\u5fc3\u7ffb\u4e0d\u540c\u7684\u6b21\u6570\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002\u8fd9\u4e2a\u95ee\u9898\u7b49\u4ef7\u4e8e\u6c42\u65b9\u6848\u6570\u3002\n\n\u8003\u8651 DP\u3002\n\n### \u63a8\u5f0f\u5b50\n\n\u8bbe $f_{i,j,0/1}$ \u8868\u793a\u524d $i$ \u4e2a\u4f4d\u7f6e\u4e00\u5171\u9009\u4e86 $j$ \u6bb5\uff0c\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u662f\u5426\u7ffb\u8f6c\u7684\u65b9\u6848\u6570\u3002\n\n\u5982\u679c\u524d $i$ \u4e2a\u6570\u4e00\u4e2a\u90fd\u4e0d\u9009\uff0c\u5373 $j=0$\uff1a\n\n$$\n\\large f_{i,0,0}=1\n$$\n\n\u63a5\u4e0b\u6765\u5f00\u59cb\u679a\u4e3e $j$:\n\n- \u5047\u5982\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u4e0d\u9009\uff0c\u5219 $i-1$ \u4f4d\u7f6e\u53ef\u9009\u53ef\u4e0d\u9009\uff0c\u7ee7\u627f\u524d\u9762\u7684\u72b6\u6001\uff0c\u8fd9\u6837\u8f6c\u79fb\uff1a\n\n$$\n\\large f_{i,j,0}=f_{i-1,j,0}+f_{i-1,j,1}\n$$\n\n- \u5047\u5982\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u8981\u9009\uff0c\u90a3\u4e48\u7b2c $j$ \u6bb5\u533a\u95f4\u5fc5\u7136\u8981\u548c\u7b2c $j-1$ \u6bb5\u6709\u4e00\u4e2a\u5206\u5272\u70b9\u3002\u679a\u4e3e\u8fd9\u4e2a\u5206\u5272\u70b9\uff0c\u8fd9\u6837\u8f6c\u79fb\uff1a\n\n$$\n\\large f_{i,j,1}=\\sum\\limits_{k=0}^{i-1}f_{k,j-1,0}\n$$\n\n\u8fd9\u91cc $k$ \u8981\u4ece $0$ \u5f00\u59cb\u679a\u4e3e\u3002\n\n\u90a3\u4e48\uff0c\u6700\u7ec8\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\uff0c\u628a $f_i$ \u7684\u6240\u6709\u72b6\u6001\u5168\u52a0\u8d77\u6765\u5c31\u884c\u4e86\u3002\n\n\u590d\u6742\u5ea6\uff1a\u72b6\u6001 $n^2$\uff0c\u8f6c\u79fb $O(n)$\uff0c\u603b\u590d\u6742\u5ea6 $O(n^3)$\u3002\n\n\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u8fd9\u9053\u9898\u5728 $n=100,m=100$ \u7684\u60c5\u51b5\u4e0b\u7b54\u6848\u4e3a $316912650057057350374175801344$\uff0c\u7528 `__int128` \u5b58\u50a8\u5373\u53ef\u3002\n\n### Code:\n\n```cpp\n#include<bits/stdc++.h>\ninline void write(__int128 x)\n{\n\tif (x > 9)write(x / 10);\n\tputchar(x % 10 + '0');\n}\nconst int N = 105;\n__int128 f[N][N][2], ans;\nint n, m;\nint main()\n{\n\tstd::cin >> n >> m;\n\tn -= 2;\n\tf[0][0][0] = 1;\n\tfor (int i = 1;i <= n;i++)\n\t{\n\t\tf[i][0][0] = 1;\n\t\tfor (int j = 1;j <= m;j++)\n\t\t{\n\t\t\tf[i][j][0] = f[i - 1][j][0] + f[i - 1][j][1];\n\t\t\tfor (int k = 0;k < i;k++)\n\t\t\t{\n\t\t\t\tf[i][j][1] += f[k][j - 1][0];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0;i <= m;i++)\n\t{\n\t\tans += f[n][i][0];\n\t\tans += f[n][i][1];\n\t}\n\twrite(ans);\n}\n```",
        "postTime": 1636085511,
        "uid": 400781,
        "name": "Troubadour",
        "ccfLevel": 0,
        "title": "P2270 [HNOI2002]\u5976\u725b\u7684\u8fd0\u7b97 \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P2270)\n## Solution\n\u9648\u5e74\u8001\u9898\u4e86\uff0c\u4f46\u771f\u662f\u4e00\u9053\u7ec4\u5408\u6570\u597d\u9898\u3002\n\n\u6839\u636e\u6570\u5b66\u77e5\u8bc6\uff0c\u52a0\u62ec\u53f7\u5c31\u76f8\u5f53\u4e8e\u6539\u53d8\u91cc\u9762\u7684\u7b26\u53f7\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u770b\u4e3a\u5bf9\u7b26\u53f7\u7684\u4fee\u6539\uff0c\u95ee\u9898\u5c31\u53d8\u4e3a\uff1a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n-1$ \u7684\u7b26\u53f7\u5e8f\u5217\uff0c\u6bcf\u6b21\u53ef\u4ee5\u9009\u4e00\u4e2a\u533a\u95f4\u5c06\u5176\u7b26\u53f7\u53cd\u8f6c\uff0c\u95ee $k$ \u6b21\u64cd\u4f5c\u540e\uff0c\u80fd\u5f97\u5230\u591a\u5c11\u4e0d\u540c\u7684\u5e8f\u5217\u3002\n\n\u8981\u6ce8\u610f\u7b2c\u4e00\u4e2a\u7b26\u53f7\u6ca1\u6709\u529e\u6cd5\u6539\u53d8\uff0c\u8fd9\u5728\u6700\u540e\u4f1a\u63d0\u5230\u3002\n\n### \u5f15\u7406\n$k$ \u6b21\u5bf9\u4efb\u610f\u533a\u95f4\u7684\u64cd\u4f5c\u53ef\u4ee5\u770b\u4f5c**\u4e0d\u8d85\u8fc7** $k$ \u6b21\u5bf9**\u4e92\u4e0d\u76f8\u4ea4\u4e14\u4e0d\u76f8\u90bb**\u7684\u533a\u95f4\u7684\u64cd\u4f5c\u3002\n\n\u53ea\u8003\u8651 $2$ \u4e2a\u533a\u95f4\u7684\u60c5\u51b5\u5373\u53ef\u63a8\u5e7f\uff0c\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a\n1. \u5f53\u533a\u95f4\u4e0d\u4ea4\u65f6\u4e14\u4e0d\u76f8\u90bb\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u76f8\u540c\u7684\u64cd\u4f5c\u6b21\u6570\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\u3002\n2. \u5f53\u533a\u95f4\u6709\u76f8\u4ea4\u90e8\u5206\uff0c\u4f8b\u5982 $[1,5]$ \u548c $[3,7]$\uff0c\u5bb9\u6613\u53d1\u73b0\u5bf9\u4e8e\u76f8\u4ea4\u7684\u533a\u95f4 $[3,5]$ \u88ab\u6539\u4e86 $2$ \u6b21\u53c8\u88ab\u6539\u56de\u6765\u4e86\uff0c\u5c31\u76f8\u5f53\u4e8e\u53ea\u6539\u53d8\u4e86 $[1,2]$ \u548c $[6,7]$\u3002\u53ef\u4ee5\u901a\u8fc7\u76f8\u540c\u7684\u64cd\u4f5c\u6b21\u6570\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\uff0c\u6ce8\u610f\u8fd9\u91cc\u5305\u542b\u4e86\u4e00\u4e2a\u533a\u95f4\u662f\u53e6\u4e00\u4e2a\u533a\u95f4\u5b50\u96c6\u7684\u60c5\u51b5\u3002\n3. \u5f53\u533a\u95f4\u76f8\u90bb\uff0c\u5982 $[1,3]$ \u548c $[4,5]$\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21\u64cd\u4f5c $[1,5]$ \u5373\u53ef\u5b9e\u73b0\u76f8\u540c\u6548\u679c\u3002\n\n### \u7b54\u6848\n\u8fd9\u6837\u5c31\u5f88\u6e05\u695a\u4e86\uff0c\u7b54\u6848\u5c31\u662f\u9009\u62e9\u81f3\u591a $k$ \u4e2a\u4e0d\u4ea4\u4e5f\u4e0d\u76f8\u90bb\u533a\u95f4\u7684\u65b9\u6848\u6570\uff0c\u63d2\u677f\u6cd5\u5373\u53ef\u3002\n\n\u6ce8\u610f\u7b2c\u4e00\u4e2a\u7b26\u53f7\u662f\u4e0d\u80fd\u6539\u7684\uff0c\u4e8e\u662f\u5934\u4e0d\u80fd\u63d2\u677f\uff0c\u800c\u5c3e\u63d2\u677f\u6709\u610f\u4e49\uff0c\u6240\u4ee5\u6709 $n-1$ \u4e2a\u4f4d\u7f6e\uff0c\u63d2\u81f3\u591a $2\\times k$ \u4e2a\u5076\u6570\u677f\uff0c\u7ec4\u5408\u6570\u5373\u53ef\uff0c\u7b54\u6848\u4e3a\uff1a\n$$\n\\sum_{i=0}^{2k} \\binom{n-1}{i}\n$$\n\u6ce8\u610f\u589e\u91cf $\\Delta=2$\u3002\n## Code\n\u7b54\u6848\u4f1a\u5f88\u5927\uff0c\u7528\u9ad8\u7cbe\uff0c\u8fd9\u91cc\u4e3a\u4e86\u4e0d\u5360\u7248\u9762\u5c31\u4e0d\u52a0\u4e86\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvoid read(int &x)\n{\n\tchar ch=getchar();\n\tint r=0,w=1;\n\twhile(!isdigit(ch))w=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))r=(r<<3)+(r<<1)+(ch^48),ch=getchar();\n\tx=r*w;\n}\nint C(int n,int m)\n{\n\tif(m==0)return 1;\n\tif(n<m)return 0;\n\tint ans=1;\n\tfor(int i=1;i<=m;i++)\n\t\tans*=(n-i+1),ans/=i;\n\treturn ans;\n}\nint main()\n{\n\tint n,k;\n\tread(n);read(k);\n\tint ans=0;\n\tfor(int i=0;i<=2*k;i+=2)\n\t\tans+=C(n-1,i);\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1661156199,
        "uid": 415256,
        "name": "Epoch_L",
        "ccfLevel": 5,
        "title": "[HNOI2002]\u5976\u725b\u7684\u8fd0\u7b97"
    },
    {
        "content": "## \u6807\u7b7e\uff1a\u9ad8\u7cbe - \u7ec4\u5408\u6570\uff0c\u6321\u677f\u6cd5/DP\n\uff08\u770b\u8fc7\u9898\u89e3\u7684\u6211\u5199\u4e86\u4e24\u4efd\u4ee3\u7801\uff09\n\n\u9996\u5148\u4e0d\u96be\u53d1\u73b0\uff0c\u9898\u610f\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9\u4e00\u957f\u5ea6\u4e3an-2\u76840/1\u5e8f\u5217\uff0c\u8fdb\u884c**\u81f3\u591a**k\u6b21\u533a\u95f4\u7ffb\u8f6c\uff080->1,1->0\uff09\u64cd\u4f5c\uff0c\u95ee\u6700\u7ec8\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u5e8f\u5217\u3002\n\n\u4e3a\u4ec0\u4e48\u662fn-2\u76840/1\u5e8f\u5217\u5462\uff1f\u56e0\u4e3a\u603b\u5171\u6709n-1\u4e2a\u51cf\u53f7\uff0c\u9664\u4e86\u7b2c\u4e00\u4e2a\u4e4b\u5916\u90fd\u53ef\u4ee5\u52a0\u62ec\u53f7\u4f7f\u5176\u5c55\u5f00\u540e\u53d8\u4e3a\u52a0\u53f7\u3002\n\n\u4e3a\u4ec0\u4e48\u662f\u81f3\u591a\u5462\uff1f\u56e0\u4e3a\u4f60\u53ef\u4ee5 **(((((((A1))))))) - A2** \u7b49\u7b49\u6765\u6d6a\u8d39\u4f60\u7684\u62ec\u53f7\u3002\n\n\u7ec4\u5408\u6570\u7684\u65b9\u6cd5\u57fa\u4e8e\u5982\u4e0b\u7ed3\u8bba\uff1a\u5bf9\u4e8e\u4efb\u610fX\u6b21\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u6700\u7ec8\u4e00\u5b9a\u53ef\u4ee5\u7528Y\u4e2a\u4e92\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u63cf\u8ff0\uff0c\u4e14Y\u4e00\u5b9a\u4e0d\u5927\u4e8eX\u3002\n\n\u201c\u4e00\u5b9a\u53ef\u4ee5\u7528\u4e92\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u63cf\u8ff0\u201d\u6bd4\u8f83\u76f4\u89c2\uff0c\u800c\u540e\u534a\u53e5\u8bdd\u7684\u8bc1\u660e\u65b9\u6cd5\u662f\u5047\u8bbe\u521a\u5f00\u59cb\u5e8f\u5217\u5143\u7d20\u5168\u90e8\u4e3a0\uff0c\u800c\u5047\u5b9a\u6700\u7ec8\u7684\u5e8f\u5217\u4e2d\u6709x\u6bb5\u4e92\u4e0d\u76f8\u90bb\u76841\uff0c\u5219\u663e\u7136\u5c06\u6700\u7ec8\u7684\u5e8f\u5217\u7ffb\u8f6c\u56de\u53bb\u65f6**\u6bcf\u4e00\u6b21\u64cd\u4f5c\u6700\u591a\u53ea\u80fd\u51cf\u5c11\u4e00\u6bb5\u8fde\u7eed\u76841**\uff08\u82e5\u6070\u597d\u8986\u76d6n\u6bb51\uff0c\u5219\u5176\u4e2d\u5fc5\u7136\u540c\u65f6\u8986\u76d6\u4e86n-1\u6bb50\uff0c\u51c0\u7ed3\u679c\u4ecd\u4e3a-1\uff09\uff0c\u6545\u6700\u5c11\u7684\u7ffb\u8f6c\u64cd\u4f5c\u5c31\u662fx\u6b21\u3002\u7531\u4e8e**\u7ffb\u8f6c\u56de\u539f\u59cb\u72b6\u6001\u5373\u7ffb\u8f6c\u6210\u6700\u7ec8\u72b6\u6001\u7684\u9006\u64cd\u4f5c**\uff0c\u6240\u4ee5\u7ffb\u8f6c\u5230\u6700\u7ec8\u72b6\u6001\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u5c31\u662fx\uff0c\u4e8e\u662f\u7528x\u6bb5\u4e92\u8865\u76f8\u90bb\u7684\u533a\u95f4\u6765\u63cf\u8ff0\u8fd9\u4e00\u7cfb\u5217\u64cd\u4f5c\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u4e4b\u4e00\u3002\n\n\u7136\u540e\u663e\u7136\u8fd9\u6837\u4e00\u4e9b\u533a\u95f4\u53ef\u4ee5\u7528\u5e8f\u5217\u6765\u8868\u793a\uff0c\u5982[1,3][7,10]\u53ef\u4ee5\u5199\u4f5c(1,3,7,10)\u3002\u663e\u7136\uff0c**\u5e8f\u5217\u4e0d\u540c\uff0c\u5f97\u5230\u7684\u6700\u7ec8\u7ed3\u679c\u5c31\u4e0d\u540c**\u3002\n\n\u800c\u8fd9\u6837\u4e00\u4e2a\u5e8f\u5217\u7684\u4e2a\u6570\u53ef\u4ee5\u901a\u8fc7**\u6321\u677f\u6cd5**\u8ba1\u7b97\uff08\u5728\u4e00\u6392\u7403\u95f4\u4e0d\u91cd\u590d\u7684\u63d2\u5165\u6321\u677f)\u3002\u4e00\u4e2a\u677f\u6240\u4ee3\u8868\u7684\u6570\u5b57\u5373\u5b83\u524d\u9762\u7684**\u6240\u6709**\u7403\u7684\u4e2a\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u7528\u6321\u677f\u5f97\u5230\u7684\u6570\u5b57\u662f\u9012\u589e\u7684\uff0c\u6ee1\u8db3\u4e0a\u9762\u7684\u8981\u6c42\u3002\n\n\u4e8e\u662f\uff0c\u957f\u5ea6\u4e3an-2\u7684\u5e8f\u5217\u91cc\u6709n-1\u4e2a\u7a7a\uff08\u9996\u5c3e\u63d2\u5165\u677f\u662f\u6709\u610f\u4e49\u7684\uff09\uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u5f80\u91cc\u9762\u63d2\u5165**\u81f3\u591a**k\\*2\u4e2a\u677f\u7684\u65b9\u6848\u6570\u3002\u7ec4\u5408\u6570\u6c42\u4e00\u6c42\uff0c\u52a0\u8d77\u6765\u5c31\u597d\u4e86\u3002\n```cpp\n//\u6cd51\uff1a\u7ec4\u5408\u6570\uff0c\u6321\u677f\u6cd5\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\n#include <algorithm>\n\nconst int maxn(112);\nclass number {\n    public:\n        number() : len(0) { memset(all, 0, sizeof(all)); }\n        number(int l) : len(l) { memset(all, 0, sizeof(all)); }\n        \n        number operator=(int v) {\n            len = 0;\n            while (v) {\n                all[len++] = v % 10;\n                v /= 10;\n            } return *this;\n        }\n        number operator*(const number& n) const {\n            number ret;\n            for (int i(0); i != len; ++i) {\n                for (int j(0); j != n.len; ++j) {\n                    ret.all[i + j] += all[i] * n.all[j];\n                }\n            }\n            for (int i(0); i != len + n.len; ++i) {\n                if (ret.all[i] >= 10) {\n                    ret.all[i + 1] += ret.all[i] / 10;\n                    ret.all[i] %= 10;\n                    ret.len = i + 2;\n                } else if (ret.all[i]) ret.len = i + 1;\n            } return ret;\n        }\n        number& operator+=(const number& n) {\n            for (int i(0); i != std::max(len, n.len); ++i) {\n                all[i] += n.all[i];\n                if (all[i] >= 10) ++all[i + 1], all[i] -= 10;\n            }\n            len = std::max(len, n.len);\n            if (all[len]) ++len;\n            return *this;\n        }\n        number operator+(const number& n) const {\n            number v(len);\n            for (int i(0); i != len; ++i) v.all[i] = all[i];\n            return v += n;\n        }\n        bool operator!=(const number& n) const {\n            if (len != n.len) return true;\n            for (int i(0); i != len; ++i) if (all[i] != n.all[i]) return true;\n            return false;\n        }\n        void print() const { for (int i(len - 1); ~i; --i) printf(\"%d\", all[i]); printf(\"\\n\"); }\n        int all[112], len;\n};\nbool bVis[maxn][maxn];\nint n, k;\nnumber dp[maxn][maxn];\nint main() {\n    scanf(\"%d%d\", &n, &k);\n    for (int i(1); i <= n; ++i) {\n        dp[i][1] = i;\n        dp[i][i] = 1;\n        for (int j(2); j < i; ++j) {\n            dp[i][j] += dp[i - 1][j] + dp[i - 1][j - 1];\n        }\n    }\n    number ans;\n    ans = 1;\n    for (int i(1); i <= k && (i << 1) <= n - 1; ++i) {\n        ans += dp[n - 1][i << 1];\n    } ans.print();\n    return 0;\n}\n```\n\n\u6709\u6ca1\u6709\u66f4\u4e0d\u9700\u8981\u8111\u5b50\u7684\u65b9\u6cd5\u5462\uff1f\u5f53\u7136\u662f\u6709\u7684\u2014\u2014**DP**\u3002\n\n\u4ecd\u7136\u6309\u7167\u7ffb\u8f6c0/1\u5e8f\u5217\u7684\u65b9\u5f0f\u6765\u601d\u8003\u3002\u4ee4dp[a][b][c]\u4e3a\u201c\u5bf9\u957f\u5ea6\u4e3aa+1\u7684\u5e8f\u5217\u8fdb\u884cb\u6b21\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u4e3ac\u201d\u7684\u4e0d\u540c\u65b9\u6848\u6570\u3002\n\n\u5982\u679cc==true,\u90a3\u4e48\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u88ab\u7ffb\u8f6c\u7684\uff0c\u4e8e\u662f\u540e\u9762\u53ef\u4ee5\u8ddf\u4e0a\u4e00\u4e321\u800c\u4e0d\u9700\u8981\u6d88\u8017\u7ffb\u8f6c\u64cd\u4f5c\u6b21\u6570\uff0c\u56e0\u4e3a\u8fd9**\u4ec5\u4ec5\u662f\u6269\u5f20\u4e86\u524d\u9762\u6240\u4f7f\u7528\u7684\u533a\u95f4**\u3002\n\n\u6211\u4eec**\u53ea\u8003\u8651\u7b2c2\u4e2a\u5143\u7d20\u662f\u5426\u7ffb\u8f6c**\uff0c\u6309\u7167c\u7684\u503c\u8fdb\u884c\u8ba8\u8bba\u3002\u9012\u5f52\u8fb9\u754c\u662f(b==0\u4e14c==false)\u6216\u8005(n==0)\u3002\u6ce8\u610f\uff0c\u5373\u4f7fb==0\u4e86\uff0c\u82e5c\u4e3atrue\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7ee7\u7eed\u7ffb\u8f6c\u3002\n\ndp\u7684\u65b9\u6cd5\u8981\u66f4\u5bb9\u6613\u60f3\u5230\u4e00\u4e9b\uff0c\u5f53\u7136\u7531\u4e8e\u5404\u79cd\u9012\u5f52\u4e5f\u4f1a\u6162\u4e00\u4e9b\u3002\n\n```cpp\n//\u6cd52 \uff1a dp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\n#include <algorithm>\n\nconst int maxn(112);\nclass number {\n\tpublic:\n\t\tnumber() : len(0) { memset(all, 0, sizeof(all)); }\n\t\tnumber(int l) : len(l) { memset(all, 0, sizeof(all)); }\n\t\t\n\t\tnumber operator=(int v) {\n\t\t\tlen = 0;\n\t\t\twhile (v) {\n\t\t\t\tall[len++] = v % 10;\n\t\t\t\tv /= 10;\n\t\t\t} return *this;\n\t\t}\n\t\tnumber operator*(const number& n) const {\n\t\t\tnumber ret;\n\t\t\tfor (int i(0); i != len; ++i) {\n\t\t\t\tfor (int j(0); j != n.len; ++j) {\n\t\t\t\t\tret.all[i + j] += all[i] * n.all[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i(0); i != len + n.len; ++i) {\n\t\t\t\tif (ret.all[i] >= 10) {\n\t\t\t\t\tret.all[i + 1] += ret.all[i] / 10;\n\t\t\t\t\tret.all[i] %= 10;\n\t\t\t\t\tret.len = i + 2;\n\t\t\t\t} else if (ret.all[i]) ret.len = i + 1;\n\t\t\t} return ret;\n\t\t}\n\t\tnumber& operator+=(const number& n) {\n\t\t\tfor (int i(0); i != std::max(len, n.len); ++i) {\n\t\t\t\tall[i] += n.all[i];\n\t\t\t\tif (all[i] >= 10) ++all[i + 1], all[i] -= 10;\n\t\t\t}\n\t\t\tlen = std::max(len, n.len);\n\t\t\tif (all[len]) ++len;\n\t\t\treturn *this;\n\t\t}\n\t\tnumber operator+(const number& n) const {\n\t\t\tnumber v(len);\n\t\t\tfor (int i(0); i != len; ++i) v.all[i] = all[i];\n\t\t\treturn v += n;\n\t\t}\n\t\tbool operator!=(const number& n) const {\n\t\t\tif (len != n.len) return true;\n\t\t\tfor (int i(0); i != len; ++i) if (all[i] != n.all[i]) return true;\n\t\t\treturn false;\n\t\t}\n\t\tvoid print() const { for (int i(len - 1); ~i; --i) printf(\"%d\", all[i]); printf(\"\\n\"); }\n\t\tint all[112], len;\n};\nbool bVis[maxn][maxn][2];\nint n, k;\nnumber dp[maxn][maxn][2];\nnumber& dfs(int n, int k, bool h) {\n\tif (bVis[n][k][h]) return dp[n][k][h];\n\tbVis[n][k][h] = true;\n\tnumber& state(dp[n][k][h]);\n\tif (!h && k == 0) { state = 1; return state; }\n\tif (n == 0) { state = 1; return state; }\n\tif (h) {\n\t\tstate += dfs(n - 1, k, false);\n\t\tstate += dfs(n - 1, k, true);\n\t\treturn state;\n\t} else {\n\t\tstate += dfs(n - 1, k, false);\n\t\tif (k) state += dfs(n - 1, k - 1, true);\n\t\treturn state;\n\t}\n}\nint main() {\n\tscanf(\"%d%d\", &n, &k);\n\tdfs(n - 2, k, false).print();\n\treturn 0;\n}\n```",
        "postTime": 1556891332,
        "uid": 163894,
        "name": "kyel",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2270 \u3010[HNOI2002]\u5976\u725b\u7684\u8fd0\u7b97\u3011"
    }
]