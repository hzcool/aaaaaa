[
    {
        "content": "# P5460 [BJOI2016]IP\u5730\u5740 Solution\n\n## \u5206\u6790\n\n$\\bullet$ \u7531$IP$\u5730\u5740\u662f$01$\u4e32\uff0c\u5339\u914d\u7684\u662f$IP$\u5730\u5740\u7684\u524d\u7f00\u4e0d\u96be\u60f3\u5230\u7528$0-1 Trie$\u6811\n\n$\\bullet$ \u89c4\u5219\u7684\u96c6\u5408\u968f\u7740\u65f6\u95f4\u5728\u6539\u53d8\uff0c\u8003\u8651\u5bf9\u89c4\u5219\u7684\u96c6\u5408\u5efa$0-1 Trie$\u6811\n\n$\\bullet$ \u8be2\u95ee\u4e00\u4e2a$IP$\u5730\u5740\u5728\u65f6\u95f4$[l+1,r]$\uff08\u9898\u76ee\u8bf4\u7684\u662f\u201c\u5728\u7b2c$a$\u4e2a\u4e8b\u4ef6\u540e\u201d\uff09\u5185\u53d8\u5316\u4e86\u591a\u5c11\u6b21\uff0c\u53ef\u4ee5\u8f6c\u6362\u4e3a$[1,r]-[1,l]$\n\n$\\bullet$ \u5982\u679c\u53ea\u8be2\u95ee\u4e00\u4e2a$IP$\u5730\u5740\uff0c\u90a3\u4e48\u5c31\u975e\u5e38\u7684\u7b80\u5355\u76f4\u63a5\u66b4\u529b\u7edf\u8ba1\u5373\u53ef\uff0c\u6240\u4ee5\u73b0\u5728\u8981\u8003\u8651\u5982\u4f55\u540c\u65f6\u7ef4\u62a4\u591a\u4e2a$IP$\u5730\u5740\n\n$\\bullet$ \u8003\u8651\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u5bf9\u89c4\u5219\u8fdb\u884c\u4fee\u6539\uff08\u5305\u62ec\u6dfb\u52a0\u548c\u5220\u9664\uff09\u4f1a\u5f71\u54cd\u67d0\u4e00\u4e2a$IP$\u5730\u5740\u7684\u7b54\u6848\n\n&emsp; &emsp; $\\circ$ \u52a0\u5165\u65b0\u7684\u89c4\u5219\uff0c\u65b0\u7684\u89c4\u5219\u6bd4\u539f\u6765\u548c\u67d0\u4e2a$IP$\u5730\u5740\u5339\u914d\u7684\u89c4\u5219\u66f4\u4f18\n\n&emsp; &emsp; $\\circ$ \u5220\u9664\u4e0e\u67d0\u4e2a$IP$\u5730\u5740\u5df2\u5339\u914d\u7684\u89c4\u5219\n\n$\\bullet$ \u518d\u8003\u8651\u4fee\u6539\u4e00\u4e2a\u89c4\u5219\u4f1a\u5bf9\u54ea\u4e9b$IP$\u5730\u5740\u7684\u7b54\u6848\u4ea7\u751f\u5f71\u54cd\n\n&emsp; &emsp; $\\circ$ \u56e0\u4e3a\u5339\u914d\u7684\u662f\u6700\u4f18\u7684\u89c4\u5219\uff0c\u6240\u4ee5**\u5982\u679c\u89c4\u5219$B$\u662f\u89c4\u5219$A$\u7684\u4e00\u4e2a\u524d\u7f00\uff0c\u90a3\u4e48\u5bf9\u89c4\u5219$B$\u8fdb\u884c\u4fee\u6539\u5c06\u4e0d\u4f1a\u5f71\u54cd\u4e0e\u89c4\u5219$A$\u5339\u914d\u7684$IP$\u5730\u5740**\n\n![pic](https://cdn.luogu.com.cn/upload/image_hosting/rrog3ev4.png)\n\n&emsp; &emsp; $\\circ$ \u5982\u4e0a\u56fe\uff0c\u7c89\u8272\u6d82\u51fa\u6765\u7684$IP$\u5730\u5740\u53ef\u4ee5\u4e0e\u4ee5$2$\u8282\u70b9\u4e3a\u7ed3\u5c3e\u7684\u89c4\u5219\u4ee5\u53ca\u4ee5$5$\u8282\u70b9\u4e3a\u7ed3\u5c3e\u7684\u89c4\u5219\u5339\u914d\uff0c\u4f46\u5339\u914d\u7684\u662f\u6700\u4f18\u7684\uff0c\u6240\u4ee5\u662f\u4e0e\u4ee5$5$\u8282\u70b9\u4e3a\u7ed3\u5c3e\u7684\u89c4\u5219\u5339\u914d\u3002\n\n&emsp; &emsp; $\\circ$ \u6b64\u65f6\u5bf9\u4ee5$2$\u8282\u70b9\u4e3a\u7ed3\u5c3e\u7684\u89c4\u5219\u8fdb\u884c\u4fee\u6539\uff0c\u53d1\u73b0\u53d7\u5f71\u54cd\u7684$IP$\u5730\u5740\u53ea\u6709\u4ee5$2$\u8282\u70b9\u7ed3\u5c3e\u7684,\u4ee5$3$\u8282\u70b9\u7ed3\u5c3e\u7684\u548c\u4ee5$4$\u8282\u70b9\u7ed3\u5c3e\u7684$IP$\u5730\u5740\u3002\u6240\u4ee5\u8bf4**\u4fee\u6539\u4e00\u4e2a\u89c4\u5219\u4f1a\u5bf9\u4ee5\u5f53\u524d\u89c4\u5219\u7ed3\u5c3e\u4e0e\u4e0b\u4e00\u4e2a\u89c4\u5219\u7ed3\u5c3e\u4e4b\u95f4\u7684\u70b9\u4ea7\u751f\u5f71\u54cd**\n\n![pic](https://cdn.luogu.com.cn/upload/image_hosting/oe08acyf.png)\n\n&emsp; &emsp; $\\circ$ \u5982\u4e0a\u56fe\uff0c\u4fee\u6539$6$\u8282\u70b9\u7ed3\u5c3e\u7684\u89c4\u5219\uff0c\u5c06\u4e0d\u4f1a\u5bf9\u7c89\u8272\u6d82\u51fa\u6765\u4ee5$4$\u8282\u70b9\u7ed3\u5c3e\u7684$IP$\u5730\u5740\u4ea7\u751f\u5f71\u54cd\uff0c\u53ea\u4f1a\u5bf9\u4ee5$6$\u8282\u70b9\u7ed3\u5c3e\u7684$IP$\u5730\u5740\u548c\u4ee5$7$\u8282\u70b9\u7ed3\u5c3e\u7684$IP$\u5730\u5740\u4ea7\u751f\u5f71\u54cd\n\n$\\bullet$ \u4e8e\u662f\u5bf9\u4e8e$Tire$\u6811\u4e0a\u7684\u70b9\uff0c\u8bb0\u5f55\u4e00\u4e2a\u503c$times$\u8868\u793a**\u6267\u884c\u5b8c\u5f53\u524d\uff08\u5bf9\u89c4\u5219\u7684\uff09\u64cd\u4f5c\u4ee5\u8fd9\u4e2a\u70b9\u7ed3\u5c3e\u7684$IP$\u5730\u5740\u5c06\u4f1a\u88ab\u66f4\u6539\u591a\u5c11\u6b21**\uff0c\u5728\u8bb0\u5f55\u4e00\u4e2a\u61d2\u6807\u8bb0$tag$\u8868\u793a\u5bf9\u8fd9\u4e2a\u503c\u7684\u4fee\u6539\uff0c**\u8fd9\u4e2a\u6807\u8bb0\u9047\u5230\u5bf9\u89c4\u5219\u7ed3\u5c3e\u6253\u4e0a\u7684$end$\u6807\u8bb0\u5c31\u4f1a\u88ab\u6e05\u7a7a\uff08\u4e0d\u4f1a\u5bf9\u4e0b\u9762\u7684\u70b9\u4ea7\u751f\u5f71\u54cd\uff09**\n\n## \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<cctype>\n#include<iostream>\n#include<vector>\nusing namespace std;\n\nconst int MAXN = 1e5+5;\nconst int root = 0;\n\ntemplate <typename T>\ninline void read(T&x){\n\tx=0; char temp=getchar(); bool f=false;\n\twhile(!isdigit(temp)){if(temp=='-') f=true; temp=getchar();}\n\twhile(isdigit(temp)){x=(x<<1)+(x<<3)+temp-'0'; temp=getchar();}\n\tif(f) x=-x;\n}\ntemplate <typename T>\nvoid print(T x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) print(x/10);\n\tputchar(x%10+'0');\n}\n\n//basic\nint n,q,opt[MAXN],ans[MAXN];\nstring str[MAXN];\nstruct Question{\n\tstring ip; int id;\n}ques[MAXN];\nvector<int> del[MAXN],add[MAXN];\n\n//Trie\nstruct node{\n\tint son[2],end,times,tag;\n\tinline void Update(int val){times+=val,tag+=val;}\n#define ls(x) t[x].son[0]\n#define rs(x) t[x].son[1]\n#define end(x) t[x].end\n#define times(x) t[x].times\n#define tag(x) t[x].tag\n}t[MAXN*32];\nint cnt;\n\ninline void Pushdown(int id){\n\tif(!ls(id)) ls(id)=++cnt;\n\tif(!rs(id)) rs(id)=++cnt;\n\tif(tag(id)==0) return;\n\tif(!end(ls(id))) t[ls(id)].Update(tag(id));\n\tif(!end(rs(id))) t[rs(id)].Update(tag(id));\n\ttag(id)=0;\n}\n\ninline void Modify(string s,int val){\n\tint now=root,len=s.length();\n\tfor(register int i=0;i<len;i++){\n\t\tPushdown(now);\n\t\tnow=t[now].son[s[i]-'0'];\n\t}\n\tend(now)+=val,tag(now)++,times(now)++;\n}\n\ninline int Query(string s){\n\tint now=root,len=s.length();\n\tfor(register int i=0;i<len;i++){\n\t\tPushdown(now);\n\t\tnow=t[now].son[s[i]-'0'];\n\t}\n\treturn times(now);\n}\n\nint main(){\n\tread(n),read(q);\n\tfor(register int i=1;i<=n;i++){\n\t\tchar s[6]; scanf(\"%s\",s),cin>>str[i];\n\t\tif(s[0]=='A') opt[i]=1;\n\t\telse opt[i]=-1;\n\t}\n\tfor(register int i=1;i<=q;i++){\n\t\tcin>>ques[i].ip,ques[i].id=i;\n\t\tint l,r; read(l),read(r);\n\t\tdel[l].push_back(i),add[r].push_back(i);\n\t}\n\tfor(register int i=1;i<=n;i++){\n\t\tModify(str[i],opt[i]);\n\t\tfor(register int j=0,tmp=del[i].size();j<tmp;j++) ans[ques[del[i][j]].id]-=Query(ques[del[i][j]].ip);\n\t\tfor(register int j=0,tmp=add[i].size();j<tmp;j++) ans[ques[add[i][j]].id]+=Query(ques[add[i][j]].ip);\n\t}\n\tfor(register int i=1;i<=q;i++) print(ans[i]),puts(\"\");\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1600503863,
        "uid": 48316,
        "name": "\u6211\u53bb",
        "ccfLevel": 6,
        "title": "P5460 [BJOI2016]IP\u5730\u5740 Solution"
    },
    {
        "content": "\u8003\u8651\u641e\u51fa\u4e00\u4e2atrie\uff0c\u90a3\u4e48\u4e00\u6b21\u6dfb\u52a0\u6216\u8005\u5220\u9664\u64cd\u4f5c\u5bf9\u5e94\u5bf9\u4e00\u6574\u6bb5\u5b50\u6811\u6253\u4e0a+1\u7684tag\uff0c\u4f46\u662f\u5047\u5982\u67d0\u4e2a\u70b9\u4e0a\u5df2\u7ecf\u6709\u5339\u914d\u4e32\u4e86\uff0c\u90a3\u5c31\u4e0d\u80fd\u628a\u6807\u8bb0\u5f80\u4e0b\u9012\u3002\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b\uff0c\u76f4\u63a5\u6253tag\u4e0d\u4f1a\u6709\u95ee\u9898\uff0c\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u79bb\u7ebf\uff0c\u6bcf\u6b21\u4fee\u6539\u76f8\u5f53\u4e8e\u5bf9\u8be5\u89c4\u5219\u7684\u6240\u6709\u5339\u914d\u70b9\u7684\u503c+1\uff0c\u8003\u8651\u5728trie\u4e0a\u6253\u52a0\u6cd5\u6807\u8bb0\u548c\u5339\u914d\u6807\u8bb0\uff0c\u5339\u914d\u6807\u8bb0\u4e0d\u4e0b\u4f20\uff0c\u52a0\u6cd5\u6807\u8bb0\u4e0b\u4f20\u9047\u5230\u5339\u914d\u6807\u8bb0\u65f6\u6e05\u7a7a\u3002\n\nnext\uff0c\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\u6587\u4ef6\nusing namespace std;\n#define ll long long\n#define N 100010\nchar getc(){\nchar c=getchar();\nwhile ((c<'A'||c>'Z')&&(c<'a'||c>'z')&&(c<'0'||c>'9'))c=getchar();\nreturn c;\n}//\u8bfb\u5165\u5b57\u6bcd\nint gcd(int n,int m){return m==0?n:gcd(m,n%m);}//\u636e\u8bf4\u624b\u5199gcd\u4f1a\u5feb\u4e00\u70b9\nint read()\n{\n    int x=0,f=1;char c=getchar();\n    while (c<'0'||c>'9') {if (c=='-') f=-1;c=getchar();}\n    while (c>='0'&&c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    return x*f;\n}//\u5feb\u8bfb\nint n,m,cnt,ans[N],root;\nstruct data{\nint ch[2],x,tag,lazy;\n}tree[N<<6];//trie\nstruct bit{int x,n,id;};\nstruct data2{int op;bit ip;\n}q[N];\nbit gettwo()\n{\n    unsigned int x=0,cnt=0;char c=getchar();\n    while (c<'0'||c>'9') c=getchar();\n    while (c>='0'&&c<='1') x+=(c^48)<<cnt,cnt++,c=getchar();\n    return (bit){x,cnt};\n}//\u540c\u65f6\u5f97\u51fa\u4e24\u4e2a\u6574\u6570\nvector<bit> INS[N],DEL[N];//\u4f7f\u7528\u5411\u91cf\nvoid update(int k,int x){\nif (!tree[k].tag) tree[k].x+=x,tree[k].lazy+=x;\n}//\u66f4\u65b0\u64cd\u4f5c\nvoid down(int k)\n{\n    if (!tree[k].ch[0]) tree[k].ch[0]=++cnt;\n    update(tree[k].ch[0],tree[k].lazy);\n    if (!tree[k].ch[1]) tree[k].ch[1]=++cnt;\n    update(tree[k].ch[1],tree[k].lazy);\n    tree[k].lazy=0; \n}//push_down\u64cd\u4f5c\uff0c\u6ce8\u610flazytag\u7684\u4f7f\u7528\nvoid ins(int &k,bit x,int p)\n{\n    if (!k) k=++cnt;\n    if (p==x.n) {update(k,1),tree[k].tag++;return;}\n    if (tree[k].lazy) down(k);\n    ins(tree[k].ch[(x.x&(1<<p))>0],x,p+1);\n}//\u63d2\u5165\u64cd\u4f5c\nvoid del(int &k,bit x,int p)\n{\n    if (!k) k=++cnt;\n    if (p==x.n) {tree[k].tag--,update(k,1);return;}\n    if (tree[k].lazy) down(k);\n    del(tree[k].ch[(x.x&(1<<p))>0],x,p+1);\n}//\u5220\u9664\u64cd\u4f5c\nint query(int k,bit x,int p)\n{\n    if (!k) return 0;\n    if (p==x.n) return tree[k].x;\n    if (tree[k].lazy) down(k);\n    return query(tree[k].ch[(x.x&(1<<p))>0],x,p+1);\n}//\u67e5\u8be2\u64cd\u4f5c\n//\u6a21\u677f\nint main()\n{\n    n=read(),m=read();\n    for (int i=1;i<=n;i++)\n    {\n        char c=getc();if (c=='A') q[i].op=1;else q[i].op=-1;\n        q[i].ip=gettwo();\n    }\n    for (int i=1;i<=m;i++)\n    {\n        bit x=gettwo();x.id=i;\n        DEL[read()].push_back(x);\n        INS[read()].push_back(x);\n    }\n    for (int i=1;i<=n;i++)\n    {\n        if (q[i].op==1) ins(root,q[i].ip,0);else del(root,q[i].ip,0);\n        for (int j=0;j<INS[i].size();j++) ans[INS[i][j].id]+=query(root,INS[i][j],0); //\u63d2\u5165\n        for (int j=0;j<DEL[i].size();j++) ans[DEL[i][j].id]-=query(root,DEL[i][j],0);//\u5220\u9664\n    }\n    for (int i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);//\u8f93\u51fa\n    return 0;\n}\n```\n",
        "postTime": 1562835382,
        "uid": 111801,
        "name": "shentao1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5460 \u3010[BJOI2016]IP\u5730\u5740\u3011"
    },
    {
        "content": "https://www.luogu.com.cn/problem/P5460\n\n\u9996\u5148\u53d1\u73b0\u590d\u6742\u5ea6\u957f\u5ea6\u76f8\u5173\uff0c\u8fd9\u6837\u4e00\u6765\u5982\u679c\u8be2\u95ee\u53ea\u6709\u4e00\u4e2a ip \u5730\u5740\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u57fa\u672c\u4e0a\u968f\u4fbf\u505a\u505a\u2026\u2026\n\n\u6240\u4ee5\u8003\u8651\u5982\u4f55\u540c\u65f6\u505a\u591a\u4e2a ip \u5730\u5740\u3002\u8981\u60f3\u4e00\u8d77\u7ef4\u62a4\u52bf\u5fc5\u8981\u627e\u5230\u4e00\u4e9b\u76f8\u4f3c\u6216\u76f8\u540c\u7684\u4e1c\u897f\u5408\u5e76\u5230\u4e00\u8d77\uff0c\u800c \u5339\u914d \u8fc7\u7a0b\u53ea\u4e0e\u524d\u7f00\u76f8\u5173\uff0c\u6240\u4ee5\u5c06\u7ef4\u62a4 ip \u5730\u5740\u8f6c\u5316\u4e3a\u7ef4\u62a4\u524d\u7f00\u3002\u52a0\u4e0a **01 \u4e32**\uff0c**\u524d\u7f00**\uff0c**\u6700\u957f\u5339\u914d** \u8fd9\u6837\u7684\u5b57\u773c\u7684\u63d0\u793a\uff0c\u4e0d\u96be\u60f3\u5230\u4f7f\u7528 trie \u6811\u6765\u7ef4\u62a4\u3002\n\n\u518d\u770b\u53e6\u4e00\u65b9\u9762\uff0c\u89c4\u5219\u7684\u96c6\u5408\u59cb\u7ec8\u5728\u6539\u53d8\uff0c\u800c\u6bcf\u4e2a\u8be2\u95ee\u7684\u65f6\u95f4\u6bb5\u4e5f\u4e0d\u540c\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u89c4\u5219\u6253\u5165\u6570\u636e\u7ed3\u6784\uff0c\u6309\u65f6\u95f4\u987a\u5e8f\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u65f6\u523b\u7684\u72b6\u6001\uff0c\u8be2\u95ee\u81ea\u7136\u53d8\u6210\u4e86\u6c42\u89e3\u524d\u7f00\u548c\u3002\n\n\u7136\u540e\u5c31\u662f\u662f\u6838\u5fc3\u90e8\u5206\uff0c\u4ec0\u4e48\u60c5\u51b5\u4f1a\u4f7f\u5339\u914d\u53d8\u52a8\uff0c\u5373\u5f71\u54cd\u7b54\u6848\uff1f\n\n1. \u52a0\u5165\u65b0\u89c4\u5219\uff0c\u65b0\u89c4\u6bd4\u5f53\u524d\u5339\u914d\u7684\u89c4\u5219\u957f\u4e14\u80fd\u5339\u914d\n\n2. \u5220\u53bb\u6b63\u5728\u88ab\u5339\u914d\u7684\u89c4\u5219\n\n\u8003\u8651\u8fd9\u4e24\u79cd\u60c5\u51b5\u5728 trie \u4e0a\u7684\u8868\u73b0\uff1a\n\n\u5f71\u54cd\u7684\u5747\u662f\u7ed3\u5c3e \u5728 **\u64cd\u4f5c\u89c4\u5219\u7684\u7ed3\u5c3e** \u4e0e **\u64cd\u4f5c\u89c4\u5219\u7ed3\u5c3e\u5f80\u4e0b\u7684\u7b2c\u4e00\u4e2a\u7ed3\u5c3e** \u4e4b\u95f4\u7684 \u5168\u90e8\u8282\u70b9\u3002\u5168\u90e8 +1 \u3002\n\n\u6ce8\u610f\uff1a\u8fd9\u4e9b\u8282\u70b9\u6784\u6210\u7684\u662f\u8bb8\u591a\u6761\u4ece\u64cd\u4f5c\u89c4\u5219\u7ed3\u5c3e\u51fa\u53d1\u5411\u4e0b\u7684\u6709\u91cd\u53e0\u7684\u94fe\u3002\u6216\u8005\u8bf4\u662f trie \u6811\u4e0a\u7684\u4e00\u4e2a**\u533a\u95f4**\n\n\u53e6\u4e00\u65b9\u9762\u8be2\u95ee\u662f ip \u5730\u5740\u7684\u7ed3\u5c3e\u8282\u70b9\u5728\u76f8\u5e94\u65f6\u523b\u7684\u503c\u3002\n\n\u4f7f\u7528 **\u533a\u95f4 tag \u52a0\u6cd5**  \u7684\u65b9\u5f0f\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u8fd9\u9053\u9898\u7684\u601d\u8def\u5927\u4f53\u5230\u8fd9\u91cc\u5c31\u7ed3\u675f\u4e86\uff0c\u8fd8\u662f\u4e0d\u592a\u597d\u60f3\u7684\u3002\u53ef\u4ee5\u5f00\u59cb\u8003\u8651\u5b9e\u73b0\u4e0a\u7684\u7ec6\u8282\u4e86\u3002\n\n\u5bf9\u4e8e trie \u4e0a\u7684\u8282\u70b9\uff0c\u7ef4\u62a4\u5e38\u89c4\u7684 son0, son1, end_tag \u4ee5\u53ca\u8282\u70b9\u7684\u7b54\u6848 cnt \u4e0e\u52a0\u6cd5 tag : add_tag \u3002\n\n\u52a8\u6001\u5f00\u70b9\uff0cpushd \u7684\u65f6\u5019\u82e5\u6ca1\u6709\u5b69\u5b50\u9700\u65b0\u5efa\u5b50\u8282\u70b9\u3002\u82e5\u5b50\u8282\u70b9\u6709 end_tag \u5c31\u4e0d\u9700\u8981\u5c06 add_tag \u4f20\u9012\u4e0b\u53bb\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#define maxn 100005\n#define maxq 100005\n\nusing namespace std;\nint n,q;\nstring s[maxn];\nint op[maxn];\n\nvector<int> e[maxn];\nstring ip[maxn];\nint ansl[maxq],ansr[maxq];\n\nstruct node{\n\tnode *son[2];\n\tint add_tag;\n\tbool end_tag;\n\tint cnt;\n}pool[2000006],*rt;\nint pool_top=0;\n\nnode* newnode(){\n\treturn pool + (++pool_top);\n}\n\nvoid pushd(node *p){\n\tif(!p->son[0]) p->son[0] = newnode();\n\tif(!p->son[1]) p->son[1] = newnode();\n\t\n\tif( p->son[0]->end_tag == 0 ) p->son[0]->add_tag += p->add_tag;\n\tif( p->son[1]->end_tag == 0 ) p->son[1]->add_tag += p->add_tag;\n\t\n\tp->cnt += p->add_tag;\n\tp->add_tag=0;\n\treturn ;\n}\n\nvoid add(string s,int op){\n\tint x; node* p=rt;\n\tfor(int i=0;i<s.length();i++){\n\t\tx=s[i]-'0';\n\t\tpushd(p);\n\t\t\n\t\tp=p->son[x];\n\t\t\n\t\tif(i==s.length()-1) {\n\t\t\tp->end_tag+=op;\n\t\t\t++ p->add_tag;\n\t\t}\n\t}\n\treturn ;\n}\n\nint query(string s){\n\tint x,cnt=0; node *p=rt;\n\tfor(int i=0;i<s.length();i++){\n\t\tx=s[i]-'0';\n\t\tif( ! p->son[x] ) return p->cnt + p->add_tag; \n\t\tpushd(p);\n\t\t\n\t\tp=p->son[x];\n\t\tif(i==s.length()-1) return p->cnt + p->add_tag;\n\t}\n}\n\nint main(){\n\tcin>>n>>q;\n\t\n\tstring tp;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>tp>>s[i];\n\t\tif(tp==\"Add\") op[i]=1;\n\t\telse op[i]=-1;\n\t}\n\t\n\tint l,r;\n\tfor(int i=1;i<=q;i++){\n\t\tcin>>ip[i]>>l>>r;\n\t\te[l].push_back(i);\n\t\te[r].push_back(i);\n\t}\n\t\n\trt = newnode();\n\t\n\tmemset(ansl,-1,sizeof(ansl));\n\tfor(int i=1;i<=n;i++){\n\t\tadd(s[i],op[i]);\n\t\t\n\t\tfor(int k=0;k<e[i].size();k++){\n\t\t\tint id=e[i][k];\n\t\t\t\n\t\t\tint cnt=query(ip[id]);\n\t\t\tif(ansl[id]==-1) ansl[id]=cnt;\n\t\t\telse ansr[id]=cnt;\n\t\t}\n\t}\n\t\n\tfor(int i=1;i<=q;i++){\n\t\tcout<<ansr[i]-ansl[i]<<endl;\n\t}\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1584941457,
        "uid": 62950,
        "name": "Eric20521",
        "ccfLevel": 0,
        "title": "P5460 [BJOI2016]IP\u5730\u5740"
    }
]