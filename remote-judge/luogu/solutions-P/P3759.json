[
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u6211\u7528$O(n^2)$**\u66b4\u529b**\u8fc7\u4e86\u8fd9\u9053\u9898\uff0c\u7279\u5730\u6765\u5206\u4eab\u4e00\u6ce2\u5361\u5e38\u6280\u5de7\u3002\u4e0d\u559c\u8bf7\u8f7b\u55b7\u3002\n\n\n\u9996\u5148\u770b\u5230\u6570\u636e\u8303\u56f4\u53ea\u6709$5W$\uff0c\u800c\u4e14\u65f6\u95f4\u5c45\u7136\u5f00\u4e86$5s$\uff0c\u8fd9\u662f\u6211\u4eec\u66b4\u529b\u7684\u524d\u63d0\u3002\n\n\u8fd9\u91cc\u9ed8\u8ba4\u5927\u5bb6\u90fd\u7406\u89e3\u4e86\u8fd9\u9053\u9898\u7684\u610f\u601d\uff0c\u7136\u540e\u5c31\u662f\u6211\u7684\u4e00\u4e9b\u7ecf\u9a8c\u4e86\u3002\n\n1\u3001++i \u6bd4 i++ \u8981\u5feb\u3002\n\n2\u3001\u8bed\u53e5\u6570\u91cf\u8981\u5c3d\u91cf\u5c11\uff0c\u80fd\u538b\u6210\u4e00\u53e5\u8bdd\u5c31\u8981\u538b\u3002\n\n3\u3001\u80fd\u4e0d\u7528$ long\\;long $\u5c31\u522b\u7528\uff0c\u53ea\u6709\u5728\u9700\u8981\u7684\u5730\u65b9\u5f00\u3002\n\n4\u3001$while$ \u5faa\u73af\u901f\u5ea6\u8981\u6bd4 $for$ \u5faa\u73af\u901f\u5ea6\u5feb\u597d\u591a\u3002\n\n5\u3001**\u5c3d\u91cf\u4e0d\u8981\u53d6\u6a21!!**\uff0c\u5148\u4f30\u7b97\u4e00\u4e0b\u65f6\u673a\uff0c\u5230\u5feb\u8981\u7206$long\\;long$ \u7684\u65f6\u5019\u518d\u53d6\u6a21\uff01\uff08\u4f1a\u5feb\u5f88\u591a\uff09\n\n6\u3001\u522b\u5fd8\u4e86\u6253\u5f00\u5404\u79cd\u4f18\u5316\u5f00\u5173\u3002\u4ee5\u4e0b\u662f\u6a21\u677f\u3002\n\n```cpp\n%:pragma GCC optimize(3)\n%:pragma GCC optimize(\"Ofast\")\n%:pragma GCC optimize(\"inline\")\n%:pragma GCC optimize(\"-fgcse\")\n%:pragma GCC optimize(\"-fgcse-lm\")\n%:pragma GCC optimize(\"-fipa-sra\")\n%:pragma GCC optimize(\"-ftree-pre\")\n%:pragma GCC optimize(\"-ftree-vrp\")\n%:pragma GCC optimize(\"-fpeephole2\")\n%:pragma GCC optimize(\"-ffast-math\")\n%:pragma GCC optimize(\"-fsched-spec\")\n%:pragma GCC optimize(\"unroll-loops\")\n%:pragma GCC optimize(\"-falign-jumps\")\n%:pragma GCC optimize(\"-falign-loops\")\n%:pragma GCC optimize(\"-falign-labels\")\n%:pragma GCC optimize(\"-fdevirtualize\")\n%:pragma GCC optimize(\"-fcaller-saves\")\n%:pragma GCC optimize(\"-fcrossjumping\")\n%:pragma GCC optimize(\"-fthread-jumps\")\n%:pragma GCC optimize(\"-funroll-loops\")\n%:pragma GCC optimize(\"-fwhole-program\")\n%:pragma GCC optimize(\"-freorder-blocks\")\n%:pragma GCC optimize(\"-fschedule-insns\")\n%:pragma GCC optimize(\"inline-functions\")\n%:pragma GCC optimize(\"-ftree-tail-merge\")\n%:pragma GCC optimize(\"-fschedule-insns2\")\n%:pragma GCC optimize(\"-fstrict-aliasing\")\n%:pragma GCC optimize(\"-fstrict-overflow\")\n%:pragma GCC optimize(\"-falign-functions\")\n%:pragma GCC optimize(\"-fcse-skip-blocks\")\n%:pragma GCC optimize(\"-fcse-follow-jumps\")\n%:pragma GCC optimize(\"-fsched-interblock\")\n%:pragma GCC optimize(\"-fpartial-inlining\")\n%:pragma GCC optimize(\"no-stack-protector\")\n%:pragma GCC optimize(\"-freorder-functions\")\n%:pragma GCC optimize(\"-findirect-inlining\")\n%:pragma GCC optimize(\"-fhoist-adjacent-loads\")\n%:pragma GCC optimize(\"-frerun-cse-after-loop\")\n%:pragma GCC optimize(\"inline-small-functions\")\n%:pragma GCC optimize(\"-finline-small-functions\")\n%:pragma GCC optimize(\"-ftree-switch-conversion\")\n%:pragma GCC optimize(\"-foptimize-sibling-calls\")\n%:pragma GCC optimize(\"-fexpensive-optimizations\")\n%:pragma GCC optimize(\"-funsafe-loop-optimizations\")\n%:pragma GCC optimize(\"inline-functions-called-once\")\n%:pragma GCC optimize(\"-fdelete-null-pointer-checks\")\n```\n\u5f53\u4f60\u628a\u4e0a\u9762\u7684\u4f18\u5316\u90fd\u7528\u5230\u4e4b\u540e\uff0c\u4f60\u7684\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u8f7b\u677e $AC$ \u8fd9\u9053\u9898\u4e86\u3002\u6700\u6162\u4e00\u4e2a\u70b9\u53ea\u8dd1\u4e86 $4s$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define N 50001\nusing namespace std;\n\ninline void rd(int &X){\n    X=0;char ch=0;\n    while(!isdigit(ch))ch=getchar();\n    while( isdigit(ch))X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n}\n\nint n,m,p=1e9+7,i;\nlong long l1,r1,ans;\nint f[N],g[N],x[N],y[N],l,r;\n\ninline void add(int x,int y){\n    for(;x;x-=x&-x) f[x]+=y,g[x]++;\n}\ninline void ask(int x){\n    for(l1=r1=0;x<=n;x+=x&-x) l1+=f[x],r1+=g[x];\n}\nsigned main()\n{\n    rd(n);rd(m);\n    for(i=1;i<=n;++i) rd(x[i]),rd(y[i]),ask(x[i]),add(x[i],y[i]),ans+=l1+r1*y[i];\n    while(m--)\n    {\n          rd(l);rd(r); if(l>r) swap(l,r); i=l+1;\n          while(i<r)\n          {\n              if(x[i]>x[l]) ans+=y[i]+y[l];\n              if(x[i]<x[r]) ans+=y[i]+y[r];\n              if(x[i]<x[l]) ans-=y[i]+y[l];\n              if(x[i]>x[r]) ans-=y[i]+y[r];\n              ++i;\n          }\n          if(x[l]>x[r]) ans-=y[l]+y[r];\n          if(x[l]<x[r]) ans+=y[l]+y[r];\n          swap(x[l],x[r]);swap(y[l],y[r]);\n          printf(\"%lld\\n\",ans=(ans%p+p)%p);\n        }\n}\n```\n**\u540e\u8bb0\uff1a**\n\n\u66b4\u529b\u8fc7\u6570\u636e\u7ed3\u6784\u9898\uff0c\u4f60\u5e76\u4e0d\u4f1a\u6536\u83b7\u4ec0\u4e48\uff0c~~\u53ea\u80fd\u83b7\u5f97\u6210\u5c31\u611f~~\u3002\u6240\u4ee5\u6709\u65f6\u5019\u8fd8\u662f\u9700\u8981\u81ea\u5df1\u624b\u6572\u4ee3\u7801\u7684\uff0c\u8fd9\u7247\u9898\u89e3\u4ec5\u4f9b\u5927\u5bb6\u5a31\u4e50\u548c\u53c2\u8003\u3002\n\n\u4e0d\u8fc7\uff0c\u53cd\u6b63\u5feb\u4e50\u5c31\u884c\u4e86\u5457\uff08\u9003~",
        "postTime": 1536886547,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u2014\u2014\u66b4\u529b"
    },
    {
        "content": "\u88f8\u7684\u52a8\u6001\u9006\u5e8f\u5bf9,\u4f46\u7ef4\u62a4\u7684\u4e1c\u897f\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u4e66\u9875\u6570\uff0c\u4e00\u4e2a\u662f\u4e66\u6570\n\n\u4e00\u5f00\u59cb\u5199\u4e86\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\uff0cT\u6389\u4e86\uff0c\u4e8e\u662f\u6539\u4e3a\u4e8c\u7ef4\u7ebf\u6bb5\u6811,\u5916\u5c42\u533a\u95f4,\u5185\u5c42\u6743\u503c\uff08\u4e66\u7684\u4f18\u5148\u7ea7\uff09\n\n\u5bf9\u67d0\u4e00\u672c\u4e66\u7edf\u8ba1\u538c\u70e6\u5ea6\u65f6\u53ea\u9700ans+=\u7ed9\u5b83\u4f5c\u51fa\u8d21\u732e\u7684\u4e66\u7684\u603b\u9875\u6570+(\u7ed9\u5b83\u4f5c\u51fa\u8d21\u732e\u7684\u4e66\u7684\u4e2a\u6570*\u81ea\u5df1\u7684\u9875\u6570)\uff1b\n\n\u82e5\u4e24\u672c\u4e66\u7684\u4f4d\u7f6e\u662fx\u3001y\uff08x<y\uff09\uff0c\u5219\u4ea4\u6362\u5b83\u4eec\u65f61~\uff08x-1\uff09\u548c\uff08y+1\uff09~n\u7684\u4e66\u53ef\u4ee5\u4e0d\u4e88\u8003\u8651\n\n\u4ee3\u7801\u91cc\u6709\u6ce8\u91ca\n\n```cpp\n// P3759 [TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\n//\u4e8c\u7ef4\u7ebf\u6bb5\u6811 \n#include<bits/stdc++.h>\n#define Pli pair<ll,int>\n#define mp make_pair\n#define fir first\n#define sec second\nusing namespace std;\ntypedef long long ll;\nconst ll sz=50050,N=sz*256,mod=1e9+7,RNK=51000;\nvoid Plus(Pli &x,Pli y){x.fir+=y.fir;x.sec+=y.sec;}\n/**************************\u5185\u5c42\u7ebf\u6bb5\u6811**************************/\n//\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4e66\u672c\u4f18\u5148\u7ea7\u4e3a\u6743\u503c \nll size[N];//\u4e66\u9875\u6570 \nint ch[N][2],cnt[N],tot;//\u513f\u5b50\u8282\u70b9\uff0c\u4e66\u6570\uff0c\u52a8\u6001\u5f00\u70b9\u8ba1\u6570 \nqueue<int>rec;//\u5783\u573e\u56de\u6536 \n#define lson ch[k][0],l,mid\n#define rson ch[k][1],mid+1,r\nvoid destroy(int &k){size[k]=cnt[k]=ch[k][0]=ch[k][1]=0;rec.push(k);k=0;}\nint newnode()\n{\n    if (rec.empty()) return ++tot;\n    int ret=rec.front();\n    rec.pop();\n    return ret;\n}\nvoid add(int &k,int l,int r,int pos,ll x,int y)//\u4e8epos\u5904\u63d2\u5165x\u9875\u4e66\uff0cy\u672c\u4e66\uff0c\u53ef\u4ee5\u4e3a\u8d1f \n{\n    if (!k) k=newnode();\n    size[k]+=x;cnt[k]+=y;\n    size[k]=(size[k]+mod)%mod;\n    if (l==r)\n    {\n    \tif (!cnt[k]) destroy(k);\n    \treturn;\n    }\n    int mid=(l+r)>>1;\n    if (pos<=mid) add(lson,pos,x,y);\n    else add(rson,pos,x,y);\n    if (!cnt[k]) destroy(k);\n}\nPli Query(int k,int l,int r,int x,int y)//x~y\u533a\u95f4\u4e66\u9875\u6570\u3001\u4e66\u6570 \n{\n    if (!k) return mp(0ll,0ll);\n    if (x<=l&&r<=y) return mp(size[k],cnt[k]);\n    int mid=(l+r)>>1;\n    Pli ret;\n    ret.fir=0ll;ret.sec=0;\n    if (x<=mid) Plus(ret,Query(lson,x,y));\n    if (y>mid) Plus(ret,Query(rson,x,y));\n    return ret;\n}\n#undef lson\n#undef rson\n/*************************\u5916\u5c42\u7ebf\u6bb5\u6811***************************/ \n#define lson k<<1,l,mid\n#define rson k<<1|1,mid+1,r\nint root[N];\nvoid insert(int k,int l,int r,int pos,int x,int sum)\n{\n    add(root[k],1,RNK,x,sum,1);\n    if (l==r) return;\n    int mid=(l+r)>>1;\n    if (pos<=mid) insert(lson,pos,x,sum);\n    else insert(rson,pos,x,sum);\n}\nvoid del(int k,int l,int r,int pos,int x,int sum)\n{\n    add(root[k],1,RNK,x,-sum,-1);//\u8d1f\u6570\uff0c\u5373\u5220\u9664 \n    if (l==r) return;\n    int mid=(l+r)>>1;\n    if (pos<=mid) del(lson,pos,x,sum);\n    else del(rson,pos,x,sum);\n}\nPli Ask(int k,int l,int r,int x,int y,int L,int R)\n//x~y(\u4f4d\u7f6e\u533a\u95f4)\u5185L~R(\u6743\u503c\u533a\u95f4)\u7684\u4e66\u9875\u6570\u3001\u4e66\u6570  \n{\n    if (x<=l&&r<=y) return Query(root[k],1,RNK,L,R);\n    int mid=(l+r)>>1;\n    Pli ret;\n    ret.fir=0ll;ret.sec=0;\n    if (x<=mid) Plus(ret,Ask(lson,x,y,L,R));\n    if (y>mid) Plus(ret,Ask(rson,x,y,L,R));\n    ret.fir%=mod;\n    return ret;\n}\n#undef lson\n#undef rson\n/************************************************************/ \nint a[sz],n,m;\nll sum[sz],ans;\n//a[i] i\u4f4d\u7f6e\u4e0a\u7684\u4e66\u7684\u4f18\u5148\u7ea7\n//sum[i] i\u4f4d\u7f6e\u4e0a\u7684\u4e66\u7684\u4e66\u9875\u6570 \nll read()\n{\n    register ll ret=0;\n    register char ch=getchar();\n    while (ch>'9'||ch<'0') ch=getchar();\n    while (ch<='9'&&ch>='0') ret=(ret<<1)+(ret<<3)+(ch^48),ch=getchar();\n    return ret;\n}\nint main()\n{\n \tregister int i,x,y;\n \tn=read();m=read();\n \tfor (i=1;i<=n;i++) a[i]=read(),sum[i]=read()%mod;\n \tfor (i=1;i<=n;i++) insert(1,1,n,i,a[i],sum[i]);\n \tfor (i=1;i<=n;i++)\n \t{\n \t\tPli cur=Ask(1,1,n,i+1,n,1,a[i]);\n \t\tans+=sum[i]*cur.sec+cur.fir;\n \t\tans%=mod;\n \t}\n    while(m--)\n    {\n        x=read(),y=read();\n        if(x>y) swap(x,y);\n        if(x==y){printf(\"%lld\\n\",ans);continue;}//\u5e76\u6ca1\u6709\u4ea4\u6362 \n        int L=a[x],R=a[y],cnt,mn=min(L,R),mx=max(L,R);\n        ll size;\n        Pli cur;\n        \n        //x~y(\u4f4d\u7f6e)\u4e2d\u6743\u503c\u5927\u4e8emn\u800c\u5c0f\u4e8emx\u7684\u4e66\u4f1a\u4ea7\u751f\u8d21\u732e \n        cur=Ask(1,1,n,x,y,mn+1,mx-1);\n        size=cur.fir,cnt=cur.sec;\n        ans+=(mn==L?1:-1)*(2*size%mod+(ll)(cnt+1)*(sum[x]+sum[y])%mod)%mod;\n        ans%=mod;\n        \n        //x~y(\u4f4d\u7f6e)\u4e2d\u6743\u503c\u5c0f\u4e8emn\u7684\u4e66\u4f1a\u4ea7\u751f\u8d21\u732e \n        cur=Ask(1,1,n,x,y,1,mn-1);\n        cnt=cur.sec;\n        (ans+=(ll)cnt*(sum[y]-sum[x])%mod)%=mod;\n        \n        //x~y(\u4f4d\u7f6e)\u4e2d\u6743\u503c\u5927\u4e8emx\u7684\u4e66\u4f1a\u4ea7\u751f\u8d21\u732e \n        cur=Ask(1,1,n,x,y,mx+1,n);\n        cnt=cur.sec;\n        (ans+=(ll)cnt*(sum[x]-sum[y])%mod)%=mod;\n        \n        if(ans<0) ans+=mod;\n        \n \t\tdel(1,1,n,x,a[x],sum[x]);del(1,1,n,y,a[y],sum[y]);//\u5220\u6389\u539f\u6765\u7684 \n \t\tinsert(1,1,n,x,a[y],sum[y]);insert(1,1,n,y,a[x],sum[x]);//\u52a0\u4e0a\u65b0\u7684 \n        swap(a[x],a[y]);swap(sum[x],sum[y]);//\u6362 \n        \n        printf(\"%lld\\n\",ans);\n    }\n}\n```\n\n\u6211\u597d\u83dc\u554a\uff0c\u8fd9\u9898\u7adf\u7136\u8c03\u4e863\u5929qwq",
        "postTime": 1527924299,
        "uid": 76481,
        "name": "p_b_p_b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "\u9898\u76ee\u5728\u8fd9\uff1a[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3759)\u3002\n\n\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u4e00\u9898\u5751\u70b9\u6709\u5f88\u591a\uff0c\u5b9e\u5728\u96be\u8c03\u3002\n\n### \u505a\u6cd5\uff1a\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\uff08\u6811\u72b6\u6570\u7ec4\u5957\u52a8\u6001\u5f00\u70b9\u503c\u57df\u7ebf\u6bb5\u6811\uff09\u3002\n\n~~\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u6211\u8bed\u6587\u4e0d\u597d\uff0c\u611f\u89c9\u8fd9\u9898\u50cf\u4e2a\u8bed\u6587\u9898\u2026\u2026~~\n\n~~\u4e3a\u4e86\u907f\u514d\u6709\u50cf\u6211\u4e00\u6837\u8bed\u6587\u4e0d\u597d\u7684 dalao~~\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u8bb2\u4e00\u4e0b\u9898\u610f\uff1a\n\n\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217\uff0c\u7b2c i \u4e2a\u6570\u7684\u4f18\u5148\u7ea7\u4e3a $a_i$\uff0c\u6743\u503c\u4e3a $v_i$\uff0c\u8ba9\u4f60\u6c42\u51fa\u4ee5\u4f18\u5148\u7ea7 $a_i$ \u4e3a\u57fa\u51c6\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\uff0c\u5e76\u4e14 ans \u8981\u52a0\u4e0a\u6bcf\u4e00\u5bf9\u9006\u5e8f\u5bf9 x\uff0cy \u7684\u4e24\u4e2a\u6570\u7684\u6743\u503c $v_x$ \u548c $v_y$\uff0c\u6c42\u51fa\u6bcf\u4e00\u6b21\u4ea4\u6362 x \u548c y \u540e ans \u7684\u503c\u3002\n\n~~\u662f\u4e0d\u662f\u66f4\u4e0d\u61c2\u4e86\u3002~~\n\n\u7136\u540e\uff0c\u5f00\u59cb\u601d\u8003\u601d\u8def\uff1a\n\n\u9996\u5148\uff0c\u770b\u5230\u6c42\u9006\u5e8f\u5bf9\u3001\u4ea4\u6362\u4e24\u4e2a\u6570\uff0c\u6211\u60f3\u5230\u7684\u4fbf\u662f[\u8fd9\u9898](https://www.luogu.com.cn/problem/P3157)\u3002\n\n\u5f53 x \u4ea4\u6362\u5230 y \u5904\u540e\uff0c\u533a\u95f4 $[1,x-1]$ \u4e0e $a_x$ \u7684\u9006\u5e8f\u5bf9**\u4e0d\u4f1a\u6539\u53d8**\uff0c\u533a\u95f4 $[y+1,n]$ \u4e0e $a_x$ \u7684\u9006\u5e8f\u5bf9\u4e5f**\u4e0d\u4f1a\u6539\u53d8**\uff0c\u4f46\u662f\u533a\u95f4 $[x+1,y-1]$ \u4e0e $a_x$ \u7684\u9006\u5e8f\u5bf9**\u4f1a\u6539\u53d8**\uff0c\u56e0\u4e3a\u8fdb\u884c\u4ea4\u6362 x \u548c y \u540e\u8fd9\u6bb5\u533a\u95f4\u539f\u6765\u4e0e $a_x$ \u9006\u5e8f\u5bf9\u53d8\u6210\u4e86\u987a\u5e8f\u5bf9\uff0c\u539f\u6765\u4e0e $a_x$ \u7684\u987a\u5e8f\u5bf9\u53d8\u6210\u4e86\u9006\u5e8f\u5bf9\u3002\u800c y \u5219\u540c\u7406\u3002\u5982\u679c\u60f3\u505a\u7c7b\u4f3c\u8fd9\u79cd\u9898\u76ee\u800c\u4e0d\u9700\u8981\u7ef4\u62a4\u6743\u503c $v_i$\uff0c\u53ef\u4ee5\u53bb\u770b\u770b[\u8fd9\u9898](https://www.luogu.com.cn/problem/P1975)\u3002\n\n\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5224\u65ad x \u4e0e y \u7684\u5173\u7cfb\uff1a\u5982\u679c\u4ea4\u6362\u524d $a_x>a_y$\uff0c\u5373\u539f\u6765 $a_x$ \u4e0e $a_y$ \u662f\u9006\u5e8f\u5bf9\uff0c\u90a3\u4e48\u4ea4\u6362\u540e ans \u5219\u8981\u51cf\u53bb\u8fd9\u5bf9\u9006\u5e8f\u5bf9\u7684\u8d21\u732e\uff0c\u53cd\u4e4b\u5219\u52a0\u4e0a\u3002\n\n\u5927\u6982\u601d\u8def\u8bb2\u5b8c\u540e\uff0c\u6211\u4eec\u6765\u76d8\u70b9\u4e00\u4e0b**\u5751\u70b9**\uff1a\n\n1.  $x_j$ \u4f1a\u5927\u4e8e $y_j$ \uff0c\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u4ea4\u6362 $x_j$ \u548c $y_j$ \u518d\u8fdb\u884c\u64cd\u4f5c\u3002\n2. \u505a\u4e86 $\\bmod$ \u8fd0\u7b97\u540e\u518d\u51cf\u6570\u53ef\u80fd\u4f1a\u51cf\u6210\u8d1f\u6570\uff0c\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u5728\u8f93\u51fa\u524d\u628a ans \u52a0\u4e0a $\\bmod$ \u518d\u8f93\u51fa\u3002\n3. \u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u6211\u7684\u4ee3\u7801\u95ee\u9898\uff0c\u6b64\u9898\u5361\u7a7a\u95f4\u2026\u2026\u867d\u662f\u52a8\u6001\u5f00\u70b9\u7684\uff0c\u4f46\u8fd8\u662f\u8fc7\u4e0d\u53bb\u3002\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u8fdb\u884c**\u5783\u573e\u56de\u6536**\u6765\u8282\u7701\u4e00\u4e9b\u7a7a\u95f4\u3002\n4. \u5728\u6211\u7684\u5199\u6cd5\u4e2d\uff0c\u9700\u8981\u7279\u5224 $x_j=y_j$ \u7684\u60c5\u51b5\u3002~~\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u53cd\u6b63\u52a0\u4e0a\u6211\u5c31\u5bf9\u4e86\u3002~~\n\n\u53ef\u80fd\u6709\u4e9b dalao \u4f1a\u95ee\u4ec0\u4e48\u662f\u5783\u573e\u56de\u6536\uff0c\u6211\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a**\u8f83\u4e3a\u611f\u6027**\u7684\u56de\u7b54\uff1a\n\n\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4f1a\u5220\u9664\u8282\u70b9\uff0c\u4f46\u662f\u8282\u70b9\u5220\u9664\u4e4b\u540e\u53ef\u80fd\u4e4b\u540e\u90fd\u6ca1\u7528\u4e86\uff08\u64cd\u4f5c\u4e0d\u4f1a\u8c03\u7528\u5230\u8fd9\u4e2a\u8282\u70b9\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u6808\uff0c\u5b58\u653e\u6ca1\u7528\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u65b0\u5efa\u8282\u70b9\u65f6\u5148\u5224\u65ad\u6808\u4e2d\u6709\u6ca1\u6709\u6ca1\u7528\u7684\u8282\u70b9\uff0c\u5982\u679c\u6709\u5c31\u7528\u6808\u9876\u7684\u7f16\u53f7\uff0c\u518d\u5f39\u51fa\u6808\u9876\uff0c\u5426\u5219\u5c31\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u6211\u7684\u4ee3\u7801\uff08\u5e26\u6ce8\u91ca\uff09\uff1a\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\nusing namespace std;\nconst int N=5e4+10,mod=1e9+7;\nstruct segment_tree{\n\tint lson,rson;\n\tlong long sum;\n\tint val;\n};\nsegment_tree hjt[400*N];\nint root[N],p[N],v[N],sta[N];//sta\u5c31\u662f\u5783\u573e\u56de\u6536\u7684\u6808 \nint tmp[2][20];\nint n,m,tot,top;\ninline int lowbit(int x){\n\treturn x&-x;\n}\nvoid hjt_ins(int &now,int l,int r,int pos,int val){\n\tif(!now)\n\t\tnow=top?sta[top--]:++tot;//\u5783\u573e\u56de\u6536 \n\thjt[now].val++;\n\thjt[now].sum=(hjt[now].sum+val)%mod;\n\tif(l==r)\n\t\treturn ;\n\tint mid=l+r>>1;\n\tif(pos<=mid)\n\t\thjt_ins(hjt[now].lson,l,mid,pos,val);\n\telse\n\t\thjt_ins(hjt[now].rson,mid+1,r,pos,val);\n}\nvoid hjt_del(int &now,int l,int r,int pos,int val){\n\tif(!now)\n\t\tnow=top?sta[top--]:++tot;//\u5783\u573e\u56de\u6536 \n\thjt[now].val--;\n\thjt[now].sum=(hjt[now].sum-val)%mod;\n\tif(l==r)\n\t\treturn ;\n\tint mid=l+r>>1;\n\tif(pos<=mid)\n\t\thjt_del(hjt[now].lson,l,mid,pos,val);\n\telse\n\t\thjt_del(hjt[now].rson,mid+1,r,pos,val);\n\tif(!hjt[now].val)//\u5224\u65ad\u662f\u5426\u8981\u6254\u8fdb\u6808\u91cc \n\t\tsta[++top]=now,now=0;\n}\nlong long hjt_query1(int l,int r,int pos,int val){ \n\tif(l==r)\n\t\treturn 0;\n\tlong long key=0,sum=0;\n\tfor(int i=1;i<=tmp[0][0];i++)\n\t\tkey=(key+hjt[hjt[tmp[0][i]].rson].val)%mod;\n\tfor(int i=1;i<=tmp[1][0];i++)\n\t\tkey=(key-hjt[hjt[tmp[1][i]].rson].val)%mod;\n\tfor(int i=1;i<=tmp[0][0];i++)\n\t\tsum=(sum+hjt[hjt[tmp[0][i]].rson].sum)%mod;\n\tfor(int i=1;i<=tmp[1][0];i++)\n\t\tsum=(sum-hjt[hjt[tmp[1][i]].rson].sum)%mod;\n\tint mid=l+r>>1;\n\tif(pos<=mid){\n\t\tfor(int i=1;i<=tmp[0][0];i++)\n\t\t\ttmp[0][i]=hjt[tmp[0][i]].lson;\n\t\tfor(int i=1;i<=tmp[1][0];i++)\n\t\t\ttmp[1][i]=hjt[tmp[1][i]].lson;\n\t\treturn (key*val%mod+sum+hjt_query1(l,mid,pos,val))%mod;\n\t}\n\telse{\n\t\tfor(int i=1;i<=tmp[0][0];i++)\n\t\t\ttmp[0][i]=hjt[tmp[0][i]].rson;\n\t\tfor(int i=1;i<=tmp[1][0];i++)\n\t\t\ttmp[1][i]=hjt[tmp[1][i]].rson;\n\t\treturn hjt_query1(mid+1,r,pos,val);\n\t}\n}\nint hjt_query2(int l,int r,int pos,int val){\n\tif(l==r)\n\t\treturn 0;\n\tlong long key=0,sum=0;\n\tfor(int i=1;i<=tmp[0][0];i++)\n\t\tkey=(key+hjt[hjt[tmp[0][i]].lson].val)%mod;\n\tfor(int i=1;i<=tmp[1][0];i++)\n\t\tkey=(key-hjt[hjt[tmp[1][i]].lson].val)%mod;\n\tfor(int i=1;i<=tmp[0][0];i++)\n\t\tsum=(sum+hjt[hjt[tmp[0][i]].lson].sum)%mod;\n\tfor(int i=1;i<=tmp[1][0];i++)\n\t\tsum=(sum-hjt[hjt[tmp[1][i]].lson].sum)%mod;\n\tint mid=l+r>>1;\n\tif(pos<=mid){\n\t\tfor(int i=1;i<=tmp[0][0];i++)\n\t\t\ttmp[0][i]=hjt[tmp[0][i]].lson;\n\t\tfor(int i=1;i<=tmp[1][0];i++)\n\t\t\ttmp[1][i]=hjt[tmp[1][i]].lson;\n\t\treturn hjt_query2(l,mid,pos,val);\n\t}\n\telse{\n\t\tfor(int i=1;i<=tmp[0][0];i++)\n\t\t\ttmp[0][i]=hjt[tmp[0][i]].rson;\n\t\tfor(int i=1;i<=tmp[1][0];i++)\n\t\t\ttmp[1][i]=hjt[tmp[1][i]].rson;\n\t\treturn (key*val%mod+sum+hjt_query2(mid+1,r,pos,val))%mod;\n\t}\n}\nvoid bit_ins(int now,int pos,int val){\n\tfor(int i=now;i<=n;i+=lowbit(i))\n\t\thjt_ins(root[i],1,n,pos,val);\n}\nvoid bit_del(int now,int pos,int val){\n\tfor(int i=now;i<=n;i+=lowbit(i))\n\t\thjt_del(root[i],1,n,pos,val);\n}\nlong long bit_query1(int l,int r,int pos,int val){\n//\u67e5\u8be2l~r\u4e2d\u6240\u6709\u4f18\u5148\u7ea7>pos\u4e0eval\u7684\u8d21\u732e\u548c \n\tif(l>r)//\u7279\u5224 \n\t\treturn 0;\n\tfor(int i=0;i<20;i++)\n\t\ttmp[0][i]=tmp[1][i]=0;\n\tfor(int i=r;i;i-=lowbit(i))\n\t\ttmp[0][++tmp[0][0]]=root[i];\n\tfor(int i=l-1;i;i-=lowbit(i))\n\t\ttmp[1][++tmp[1][0]]=root[i];\n\treturn hjt_query1(1,n,pos,val);\n}\nlong long bit_query2(int l,int r,int pos,int val){\n//\u67e5\u8be2l~r\u4e2d\u6240\u6709\u4f18\u5148\u7ea7Kpos\u4e0eval\u7684\u8d21\u732e\u548c \n\tif(l>r)//\u7279\u5224 \n\t\treturn 0;\n\tfor(int i=0;i<20;i++)\n\t\ttmp[0][i]=tmp[1][i]=0;\n\tfor(int i=r;i;i-=lowbit(i))\n\t\ttmp[0][++tmp[0][0]]=root[i];\n\tfor(int i=l-1;i;i-=lowbit(i))\n\t\ttmp[1][++tmp[1][0]]=root[i];\n\treturn hjt_query2(1,n,pos,val);\n}\nint main(){\n\tcin>>n>>m;\n\tlong long ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>p[i]>>v[i];\n\t\tbit_ins(i,p[i],v[i]);//\u63d2\u5165\u8282\u70b9 \n\t\tans+=bit_query1(1,i-1,p[i],v[i]);//\u52a0\u4e0a\u65b0\u589e\u7684\u9006\u5e8f\u5bf9 \n\t\tans%=mod;\n\t}\n\tint x,y;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>x>>y;\n\t\tif(x>y)//\u7279\u5224x>y\u7684\u60c5\u51b5 \n\t\t\tswap(x,y);\n\t\tif(x==y)//\u7279\u5224x=y\u7684\u60c5\u51b5 \n\t\t\tgoto s;//goto\u7528\u6cd5\uff0c\u8868\u793a\u8df3\u5230s\u5904\uff0c\u4f46\u662f\u6700\u597d\u4e0d\u8981\u7528 \n\t\tans-=bit_query2(x+1,y-1,p[x],v[x]);//\u51cf\u53bb\u539f\u6765\u7684\u9006\u5e8f\u5bf9 \n\t\tans%=mod;\n\t\tans+=bit_query1(x+1,y-1,p[x],v[x]);//\u52a0\u4e0a\u65b0\u589e\u7684\u9006\u5e8f\u5bf9 \n\t\tans%=mod;\n\t\tans-=bit_query1(x+1,y-1,p[y],v[y]);//\u51cf\u53bb\u539f\u6765\u7684\u9006\u5e8f\u5bf9 \n\t\tans%=mod;\n\t\tans+=bit_query2(x+1,y-1,p[y],v[y]);//\u52a0\u4e0a\u65b0\u589e\u7684\u9006\u5e8f\u5bf9 \n\t\tans%=mod;\n\t\tif(p[x]>p[y])//\u539f\u6765p[x]\u4e0ep[y]\u662f\u9006\u5e8f\u5bf9 \n\t\t\tans-=v[x]+v[y];//\u51cf\u53bb\u8d21\u732e \n\t\telse//\u539f\u6765p[x]\u4e0ep[y]\u4e0d\u662f\u9006\u5e8f\u5bf9 \n\t\t\tans+=v[x]+v[y];//\u52a0\u4e0a\u8d21\u732e \n\t\tans%=mod;\n\t\tbit_del(x,p[x],v[x]);//\u5728x\u5904\u5220\u9664x \n\t\tbit_del(y,p[y],v[y]);//\u5728y\u5904\u5220\u9664y \n\t\tbit_ins(x,p[y],v[y]);//\u5728x\u5904\u63d2\u5165y \n\t\tbit_ins(y,p[x],v[x]);//\u5728y\u5904\u63d2\u5165x \n\t\tswap(p[x],p[y]);\n\t\tswap(v[x],v[y]);\n\t\t//\u4ee5\u4e0a\u6b65\u9aa4\u5b8c\u6210x\u4e0ey\u7684\u4ea4\u6362 \n\t\ts://goto\u5c31\u8df3\u5230\u8fd9\u91cc \n\t\tif(ans<0)//\u7279\u5224ans\u51cf\u6210\u8d1f\u6570\u7684\u60c5\u51b5 \n\t\t\tans+=mod;\n\t\tcout<<ans<<'\\n';\n\t}\n}\n```",
        "postTime": 1607136521,
        "uid": 204705,
        "name": "KiDDOwithTopTree",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "\u5148\u819c\u697c\u4e0bDalao\uff0c\u624b\u6253\u6811\u5957\u6811\u3002\n\n\n\u4e00\u5f00\u59cb\u60f3\u7ec3\u4e00\u7ec3\u7801\u6811\u5957\u6811\u7684\u80fd\u529b\uff0c\u5199\u4e86\u4e2a\u7ebf\u6bb5\u6811\u5957sbt\uff0c\u53d1\u73b0\u6709\u4e9b\u5220\u9664\u64cd\u4f5c\u7684\u6807\u8bb0\u66f4\u65b0\u597d\u9ebb\u70e6\u3002\n\n\n\u4e8e\u662f\u518d\u770b\u770b\u6570\u636e$n<=50000$,\u4e8e\u662f\u7528\u66b4\u529b\u5206\u5757+\u4e8c\u5206\u6c34\u8fc7\u53bb\u4e86\u3002\n\n\u5206\u5757\u5c31\u5f88\u66b4\u529b\u4e86\u54c8\u3002\n\n\n\u5148\u5efa$Block$\u4e2a\u5757\uff0c\u628a\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u4e66\u90fd\u585e\u8fdb\u5757\u91cc\uff0c\u7136\u540e\u628a\u5757\u5185\u6309\u4e66\u7684\u7f16\u53f7\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u548c\u3002\n\n\n\u81f3\u4e8e\u521d\u59cb\u72b6\u6001\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u8ba1\u7b97\u4e00\u4e0b\u5e26\u6743\u9006\u5e8f\u5bf9\u5c31\u597d\u4e86\u3002\n\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u5b9e\u9645\u4e0a\u6bcf\u6b21\u4fee\u6539\u7684$x_i,x_j$\u4e24\u4e2a\u4f4d\u7f6e\u7684\u4e66\u7684\u987a\u5e8f\uff0c\u53ea\u4f1a\u5bf9\u533a\u95f4$[x_i,x_j]$\u5185\u7684\u9006\u5e8f\u5bf9\u7684\u8d21\u732e\u4ea7\u751f\u5f71\u54cd\uff0c\u4e8e\u662f\u6211\u4eec\u66b4\u529b\u91cd\u65b0\u8ba1\u7b97\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u8d21\u732e\u3002\n\n\n\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u5904\u7406$[x_i+1,x_j-1]$\u8fd9\u4e2a\u533a\u95f4\u3002\n\n\u66b4\u529b\u679a\u4e3e\u4e24\u7aef\u4e0d\u662f\u6574\u4e2a\u5757\u7684\uff0c\n\n\u82e5\u5bf9\u4e8e\u67d0\u4e2a$k$\uff0c\u6709$x_i>x_k$\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u4e0a\u4e00\u6b21\u8ba1\u7b97\u51fa\u7684$ans-=v_i+v_k$\uff0c\u56e0\u4e3a$x_i$\u4e0e$x_j$\u4ea4\u6362\u4e86\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8fd9\u5bf9\u9006\u5e8f\u5bf9\u5c31\u6ca1\u6709\u8d21\u732e\u4e86\u3002\u540c\u7406\uff0c\u82e5\u5bf9\u4e8e\u67d0\u4e2a$k$,\u6709$x_i<x_k$,\u5219$ans+=v_i+v_k$\u3002\u5bf9\u4e8e$x_j$\u7684\u8d21\u732e\u5f71\u54cd\u5219\u53cd\u4e4b\u3002\n\n\n\u7136\u540e\u66b4\u529b\u679a\u4e3e\u4e2d\u95f4\u7684\u5b8c\u6574\u7684\u5757\uff0c\u5728\u5757\u4e2d\u4e8c\u5206\u627e\u5230\u6700\u5927\u7684\u7f16\u53f7\u5c0f\u4e8e$x_i$\u7684\u90a3\u4e2a\u4f4d\u7f6e\uff0c\u524d\u7f00\u548c\u5c31\u662f\u5728\u8fd9\u4e2a\u5757\u4e2d\u6807\u53f7\u5c0f\u4e8e$x_i$\u7684\u6240\u6709\u7684\u4e66\u7684$val$\u503c\u7684\u548c\u3002\u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff0c\u6211\u4eec\u7684$ans$\u9700\u8981\u51cf\u53bb\u5728\u8fd9\u4e2a\u5757\u4e2d\uff0c\u6807\u53f7\u5c0f\u4e8e$x_i$\u7684\u4e66\u7684$val$\u548c\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u7f16\u53f7\u5927\u4e8e$x_i$\u7684\u4e66\u7684$val$\u548c\u3002\u540c\u65f6\u51cf\u53bb\u8fd9\u4e2a\u5757\u4e2d\u7f16\u53f7\u5c0f\u4e8e$x_i$\u7684\u4e66\u7684\u4e2a\u6570\u4e58\u4ee5$v_i$\uff0c\u518d\u52a0\u4e0a\u8fd9\u4e2a\u5757\u4e2d\u6807\u53f7\u5927\u4e8e$x_i$\u7684\u4e66\u7684\u4e2a\u6570\u4e58\u4ee5$v_i$\u3002\n\n\n\u6ce8\u610f\u5230\u5176\u5b9e\u6211\u4eec\u4e8c\u5206\u51fa\u4e86\u4e0a\u9762\u7684\u90a3\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u8fd9\u6574\u4e2a\u5757\u7684\u548c\u51cf\u53bb\u8be5\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u5c31\u662f\u7f16\u53f7\u5927\u4e8e$x_i$\u7684\u4e66\u7684$val$\u548c\u3002\u6574\u4e2a\u5757\u7684\u5927\u5c0f\u51cf\u53bb\u8be5\u4f4d\u7f6e\u5c31\u662f\u7f16\u53f7\u5927\u4e8e$x_i$\u7684\u4e66\u7684\u4e2a\u6570\u3002\n\n\n\u90a3\u4e48\u5982\u679c\u4ee4$len=en-st+1,rank=binarysearch(st,en,x_i)-st$,$temp=sum[rank]$\n\n\u5219\u6839\u636e\u4e0a\u8ff0\uff0c\u5e94\u6709\n\n\n$ans+=(len-rank-rank)*v_i+sum[len]-temp-temp$\n\n\n\u8fd9\u91cc\u6709\u4e00\u70b9\u4e0d\u592a\u597d\u7406\u89e3\uff0c\u8fd9\u91cc\u7684$len-rank$\u5c31\u662f\u5927\u4e8e$x_i$\u7684\u4e66\u7684\u4e2a\u6570\uff0c\u518d$-rank$\u5c31\u662f\u5c0f\u4e8e$x_i$\u7684\u4e66\u7684\u4e2a\u6570\uff0c\u7136\u540e\u628a\u4e0a\u9762\u8bf4\u7684\u52a0\u51cf\u8fc7\u7a0b\u5408\u5e76\u4e86\u4e00\u4e0b\u5c31\u5f97\u5230\u8fd9\u4e2a\u5f0f\u5b50\u4e86\u3002\n\n\n\u5bf9\u4e8e$x_j$\u540c\u7406\u5373\u53ef\u3002\n\n\n\u7136\u540e\u6ce8\u610f\u4e00\u4e0b\u7279\u5224\u6574\u4e2a\u5757\u5185\u7684\u7f16\u53f7\u90fd\u5927\u4e8e$x_i$\u5c31\u597d\u4e86\u3002\n\n\n\u6700\u540e\u8fd8\u6709\u5982\u679c$x_i<x_j$,\u90a3\u4e48$ans+=v_i+v_j$,\u53cd\u4e4b\u5219\u51cf\u3002\n\n\n\u8ba1\u7b97\u5b8c\u65b0\u89e3\u540e\uff0c\u76f4\u63a5\u4ea4\u6362\u4e00\u4e0b$i,j$\u7136\u540e\u66b4\u529b\u91cd\u6784$i,j$\u6240\u5728\u7684\u5757\u5c31\u597d\u4e86\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#define rint register int\nusing namespace std;\ntypedef long long ll;\nconst int mod=1e9+7;\nconst int N=1e5+5;\nint n,m,block;\nstruct Answer{\n    int u;\n    ll v;\n    Answer(int u=0,ll v=0):u(u),v(v){}\n    inline bool operator < (const Answer &rhs) const {\n        return u<rhs.u;\n    }\n}a[N],b[N];\nint st[N],bl[N];\nll c2[N],c1[N];\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\ninline int find(int k,int ql,int qr){\n    rint l=ql,r=qr;\n    if (b[ql].u>k) return ql-1;\n    while (l<r){\n        rint mid=(l+r+1)>>1;\n        if (b[mid].u<=k) l=mid;\n        else r=mid-1;\n    }\n    return l;\n}\ninline void build(int x){\n    for (rint i=st[x];i<st[x+1];++i)\n        b[i]=a[i];\n    sort(b+st[x],b+st[x+1]);\n    for (rint i=st[x]+1;i<st[x+1];++i)\n        (b[i].v+=b[i-1].v)%=mod;\n}\ninline void add(int x,ll y){\n    for (rint i=x;i<=N-4;i+=i&(-i))\n        (c1[i]+=y)%=mod,\n        ++c2[i];\n}\ninline ll getsum(int x,ll y){\n    ll ret=0,sz=0;\n    for (rint i=x;i;i-=i&(-i))\n        (ret+=c1[i])%=mod,\n        sz+=c2[i];\n    return (ret+sz*y)%mod;    \n}    \nint main(){\n    n=read(),m=read();\n    rint block=floor(sqrt(n)/2);\n    for (rint i=1;i<=n;++i)\n        a[i].u=read(),a[i].v=read();\n    for (rint i=1;i<=n;++i,bl[i]=bl[i-1])\n        if (i%block==1) st[++bl[i]]=i;\n    bl[n+1]=bl[n]+1;\n    st[bl[n+1]]=n+1;\n    for (rint i=1;i<=bl[n];++i)\n        build(i);\n    ll ans=0;\n    for (rint i=n;i>=1;--i){\n        (ans+=getsum(a[i].u,a[i].v))%=mod;\n        add(a[i].u,a[i].v);\n    }\n    for (rint i=1;i<=m;++i){\n        rint x=read(),y=read();\n        if (x>y)swap(x,y);\n        rint fx=bl[x],fy=bl[y];\n        ll tt=0;\n        if (x!=y){\n            if (a[x].u<a[y].u) tt=a[x].v+a[y].v;\n                else tt=-a[x].v-a[y].v;\n        }\n        if (fx==fy){\n            for (rint i=x+1;i<y;++i){\n                if (a[i].u>a[x].u) tt+=a[i].v+a[x].v;\n                if (a[i].u<a[y].u) tt+=a[y].v+a[i].v;\n                //--//    \n                if (a[i].u<a[x].u) tt-=a[i].v+a[x].v;\n                if (a[i].u>a[y].u) tt-=a[y].v+a[i].v;\n                tt%=mod;\n            }\n        }else{\n            for (rint i=x+1;i<st[fx+1];++i){\n                if (a[i].u>a[x].u) tt+=a[i].v+a[x].v;\n                if (a[i].u<a[y].u) tt+=a[y].v+a[i].v;\n                //--//    \n                if (a[i].u<a[x].u) tt-=a[i].v+a[x].v;\n                if (a[i].u>a[y].u) tt-=a[y].v+a[i].v;\n                tt%=mod;\n            }\n            for (rint i=st[fy];i<y;++i){\n                if (a[i].u>a[x].u) tt+=a[i].v+a[x].v;\n                if (a[i].u<a[y].u) tt+=a[y].v+a[i].v;\n                //--//    \n                if (a[i].u<a[x].u) tt-=a[i].v+a[x].v;\n                if (a[i].u>a[y].u) tt-=a[y].v+a[i].v;\n                tt%=mod;\n            }\n            for (rint i=fx+1;i<fy;++i){\n                rint len=st[i+1]-st[i];\n                rint k=find(a[x].u,st[i],st[i+1]-1);\n                ll t1=0;rint rk;\n                if (k>=st[i]) t1=b[k].v,rk=k-st[i]+1;\n                    else t1=0,rk=0;\n                tt+=(len-rk-rk)*a[x].v%mod+b[st[i+1]-1].v-t1-t1;\n                tt%=mod;\n                //--//\n                k=find(a[y].u,st[i],st[i+1]-1);\n                if (k>=st[i]) t1=b[k].v,rk=k-st[i]+1;\n                    else t1=0,rk=0;\n                tt-=(len-rk-rk)*a[y].v%mod+b[st[i+1]-1].v-t1-t1;\n                tt%=mod;\n            }\n        }\n        ans=((ans+tt)%mod+mod)%mod;\n        swap(a[x],a[y]);\n        build(fx);\n        build(fy);\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1516851170,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u8fd8\u6ca1\u6709 BIT \u5957 Fhq \u7684\u9898\u89e3\uff1f\n\n\u90a3\u6211\u6765\u4e00\u53d1\u3002\n\n\u95ee\u9898\u4e3a\u5e26\u4ea4\u6362\u5168\u5c40\u5e26\u6743\u9006\u5e8f\u5bf9\u3002\n\n\u6211\u4eec\u6765\u5206\u6790\u6bcf\u6b21\u4ea4\u6362\u4e00\u5bf9\u6570 $(l,r)$ \u7684\u8d21\u732e\u3002\u9996\u5148\uff0c\u533a\u95f4 $[1,l-1]$ \u548c $[r+1,n]$ \u5185\u7684\u6570\u4e00\u5b9a\u4e0d\u4f1a\u4ea7\u751f\u8d21\u732e\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u7684\u8d21\u732e\u5b9e\u9645\u4e0a\u662f\u4ece\u5de6\u8fb9/\u53f3\u8fb9\u7684 **\u96c6\u5408** \u91cc\u9762\u8ba1\u7b97\u51fa\u6765\u7684\uff0c\u8fd9\u4e24\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u90fd\u662f\u96c6\u5408\u91cc\u9762\u7684\u4ea4\u6362\uff0c\u56e0\u4e3a\u96c6\u5408\u7684\u65e0\u5e8f\u6027\uff0c\u6240\u4ee5\u65e0\u8d21\u732e\u3002\n\n$l,r$ \u4e4b\u95f4\u7684\u8d21\u732e\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u3002\n\n\u5bf9\u4e8e $l,r$ \u5bf9 $[l+1,r-1]$ \u5185\u7684\u8d21\u732e\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u7684\u672c\u8d28\u5c31\u662f\u67e5\u8be2\u4e00\u6bb5\u533a\u95f4\u4e4b\u5185\u6709\u591a\u5c11\u4e2a\u6570\u6bd4\u4e00\u4e2a\u7ed9\u5b9a\u7684\u503c\u5927\u6216\u5c0f\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u5e26\u4fee\u6539\u7684\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u4f7f\u7528\u6811\u5957\u6811\u7ef4\u62a4\uff0c\u590d\u6742\u5ea6\u4e3a $O((m+n)\\log^2 n)$\u3002\n\n\u4f46\u662f\u5373\u4f7f\u8fd9\u4e2a\u9898\u7684\u65f6\u9650\u5df2\u7ecf\u653e\u5bbd\u5230\u4e86 5s \u8fd8\u662f\u6bd4\u8f83\u5361\u5e38~~\u8fd8\u4e0d\u662f\u56e0\u4e3a\u6811\u5957\u6811\u5e38\u6570\u592a\u5927\u3002~~\n\n\u6709\u4e00\u4e2a\u5361\u5e38\u6280\u5de7\uff0c\u56e0\u4e3a Fhq-Treap \u7684 split/merge \u64cd\u4f5c\u901f\u5ea6\u5f88\u6162\uff0c\u6240\u4ee5\u901a\u8fc7\u4e00\u6b21\u67e5\u8be2\u51fa\u591a\u4e2a\u503c\u6765\u51cf\u5c11 split/merge \u7684\u8c03\u7528\u6b21\u6570\uff0c\u53ef\u4ee5\u5c06 TLE \u7684\u4ee3\u7801\u4f18\u5316\u5230 4s\u3002\n\n\u7136\u540e\u2026\u2026\u5c31\u6ca1\u5565\u597d\u8bf4\u7684\u4e86\u3002\u770b\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nconst int mod = 1000000007;\nint n, a[100005], v[100005], ans = 0, m;\n\n#define GetSize(p) (p ? p->siz : 0)\n#define GetSum(p) (p ? p->sum : 0)\nstruct Node {\n\tint val, rnd, siz, k, sum;\n\tNode *l, *r;\n\tNode() {\n\t\tval = rnd = siz = k = sum = 0;\n\t\tl = r = NULL;\n\t}\n\tinline void Update() {\n\t\tsiz = GetSize(l) + GetSize(r) + 1;\n\t\tsum = ((GetSum(l) + GetSum(r)) % mod + k) % mod;\n\t}\n};\nstruct Result {\n\tint suml, sumr, sizel, sizer;\n\tResult() {}\n\tResult(int suml, int sumr, int sizel, int sizer) : suml(suml), sumr(sumr), sizel(sizel), sizer(sizer) {}\n\tinline Result operator + (const Result& b) const {\n\t\treturn Result((suml + b.suml) % mod, (sumr + b.sumr) % mod, (sizel + b.sizel) % mod, (sizer + b.sizer) % mod);\n\t}\n};\nNode nd[4000005];\nint top;\nstruct Fhqtreap {\n\tNode *_root;\n\tinline Node* New(int val, int k) {\n\t\tNode *p = &nd[++top];\n\t\tp->val = val;\n\t\tp->sum = p->k = k;\n\t\tp->rnd = rand();\n\t\tp->siz = 1;\n\t\treturn p;\n\t}\n\tinline void split(Node *p, int spk, Node *&lt, Node *&rt) {\n\t\tif (!p) {\n\t\t\tlt = rt = NULL;\n\t\t\treturn;\n\t\t}\n\t\tif (p->val <= spk) {\n\t\t\tlt = p;\n\t\t\tsplit(p->r, spk, p->r, rt);\n\t\t} else {\n\t\t\trt = p;\n\t\t\tsplit(p->l, spk, lt, p->l);\n\t\t}\n\t\tp->Update();\n\t}\n\tinline Node* merge(Node *lt, Node *rt) {\n\t\tif (!lt) return rt;\n\t\tif (!rt) return lt;\n\t\tif (lt->rnd < rt->rnd) {\n\t\t\tlt->r = merge(lt->r, rt);\n\t\t\tlt->Update();\n\t\t\treturn lt;\n\t\t} else {\n\t\t\trt->l = merge(lt, rt->l);\n\t\t\trt->Update();\n\t\t\treturn rt;\n\t\t}\n\t}\n\tinline void Ins(int val, int k) {\n\t\tNode *p1, *p2;\n\t\tsplit(_root, val, p1, p2);\n\t\t_root = merge(merge(p1, New(val, k)), p2);\n\t}\n\tinline void Del(int val) {\n\t\tNode *p1, *p2, *p3;\n\t\tsplit(_root, val - 1, p1, p2);\n\t\tsplit(p2, val, p2, p3);\n\t\tp2 = merge(p2->l, p2->r);\n\t\t_root = merge(merge(p1, p2), p3);\n\t}\n\tinline Result Query(int val) {\n\t\tNode *p1, *p2, *p3;\n\t\tsplit(_root, val - 1, p1, p2);\n\t\tsplit(p2, val, p2, p3);\n\t\tResult res(GetSum(p1), GetSum(p3), GetSize(p1), GetSize(p3));\n\t\t_root = merge(merge(p1, p2), p3);\n\t\treturn res;\n\t}\n\tinline int SumLess(int val) {\n\t\tNode *p1, *p2;\n\t\tsplit(_root, val - 1, p1, p2);\n\t\tregister int ans = GetSum(p1);\n\t\t_root = merge(p1, p2);\n\t\treturn ans;\n\t}\n\tinline int SumMore(int val) {\n\t\tNode *p1, *p2;\n\t\tsplit(_root, val, p1, p2);\n\t\tregister int ans = GetSum(p2);\n\t\t_root = merge(p1, p2);\n\t\treturn ans;\n\t}\n\tinline int SizeLess(int val) {\n\t\tNode *p1, *p2;\n\t\tsplit(_root, val - 1, p1, p2);\n\t\tregister int ans = GetSize(p1);\n\t\t_root = merge(p1, p2);\n\t\treturn ans;\n\t}\n\tinline int SizeMore(int val) {\n\t\tNode *p1, *p2;\n\t\tsplit(_root, val, p1, p2);\n\t\tregister int ans = GetSize(p2);\n\t\t_root = merge(p1, p2);\n\t\treturn ans;\n\t}\n};\nstruct BIT {\n\tFhqtreap tr[100005];\n\tinline int Lowbit(int x) {\n\t\treturn x & -x;\n\t}\n\tinline void Add(int i, int x, int y) {\n\t\tfor (register int j = i;j <= n;j += Lowbit(j)) tr[j].Ins(x, y);\n\t}\n\tinline void Del(int i, int x) {\n\t\tfor (register int j = i;j <= n;j += Lowbit(j)) tr[j].Del(x);\n\t}\n\tinline Result Query(int i, int x) {\n\t\tResult ans(0, 0, 0, 0);\n\t\tfor (register int j = i;j >= 1;j -= Lowbit(j)) ans = ans + tr[j].Query(x);\n\t\treturn ans;\n\t}\n\tinline int QueryLess(int i, int x) {\n\t\tregister int ans = 0;\n\t\tfor (register int j = i;j >= 1;j -= Lowbit(j)) ans = (ans + tr[j].SumLess(x)) % mod;\n\t\treturn ans;\n\t}\n\tinline int QueryMore(int i, int x) {\n\t\tregister int ans = 0;\n\t\tfor (register int j = i;j >= 1;j -= Lowbit(j)) ans = (ans + tr[j].SumMore(x)) % mod;\n\t\treturn ans;\n\t}\n\tinline int SizeLess(int i, int x) {\n\t\tregister int ans = 0;\n\t\tfor (register int j = i;j >= 1;j -= Lowbit(j)) ans = (ans + tr[j].SizeLess(x)) % mod;\n\t\treturn ans;\n\t}\n\tinline int SizeMore(int i, int x) {\n\t\tregister int ans = 0;\n\t\tfor (register int j = i;j >= 1;j -= Lowbit(j)) ans = (ans + tr[j].SizeMore(x)) % mod;\n\t\treturn ans;\n\t}\n};\nBIT tr;\n\ninline void Read() {\n\tn = qread(); m = qread();\n\tfor (register int i = 1;i <= n;i++) {\n\t\ta[i] = qread(); v[i] = qread();\n\t\tans = (ans + tr.QueryMore(i, a[i])) % mod;\n\t\tans = (ans + (long long)tr.SizeMore(i, a[i]) * (long long)v[i] % mod) % mod;\n\t\ttr.Add(i, a[i], v[i]);\n\t}\n}\n\ninline void Solve() {\n\t//printf(\"%d\\n\", ans);\n\twhile (m--) {\n\t\tregister int l = qread(), r = qread();\n\t\tif (l == r) {\n\t\t\tprintf(\"%d\\n\", ans);\n\t\t\tcontinue;\n\t\t}\n\t\tif (l > r) swap(l, r);\n\t\tif (l < r - 1) {\n\t\t\tResult res1 = tr.Query(r - 1, a[r]), res2 = tr.Query(r - 1, a[l]), res3 = tr.Query(l, a[r]), res4 = tr.Query(l, a[l]);\n\t\t\tans = ((((ans - res1.sumr) % mod + mod) % mod + res3.sumr)) % mod;\n\t\t\tans = ((ans - (long long)(res1.sizer - res3.sizer) * (long long)v[r] % (long long)mod) % mod + mod) % mod;\n\t\t\tans = (((ans + res2.sumr) % mod - res4.sumr) % mod + mod) % mod;\n\t\t\tans = (ans + (long long)(res2.sizer - res4.sizer) * (long long)v[l] % (long long)mod) % mod;\n\t\t\tans = ((((ans - res2.suml) % mod + mod) % mod + res4.suml)) % mod;\n\t\t\tans = ((ans - (long long)(res2.sizel - res4.sizel) * (long long)v[l] % (long long)mod) % mod + mod) % mod;\n\t\t\tans = (((ans + res1.suml) % mod - res3.suml) % mod + mod) % mod;\n\t\t\tans = (ans + (long long)(res1.sizel - res3.sizel) * (long long)v[r] % (long long)mod) % mod;\n\t\t}\n\t\ttr.Del(l, a[l]);\n\t\ttr.Del(r, a[r]);\n\t\ttr.Add(l, a[r], v[r]);\n\t\ttr.Add(r, a[l], v[l]);\n\t\tif (a[l] > a[r]) ans -= v[l] + v[r];\n\t\telse if (a[l] < a[r]) ans += v[l] + v[r];\n\t\tans = (ans % mod + mod) % mod;\n\t\tswap(a[l], a[r]);\n\t\tswap(v[l], v[r]);\n\t\tprintf(\"%d\\n\", ans);\n\t}\n}\n\nint main() {\n\tRead();\n\tSolve();\n\t#ifndef ONLINE_JUDGE\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1592047645,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "\u5148\u819c\u4e00\u6ce2\u697c\u4e0b\u7684\u4e24\u4e2a\u5927\u4f6c\u3002\n\n~~tutututu\u5927\u4f6c\u51c6\u96c6\u8bad\u961f~~\n\n\u5176\u5b9e\u53ea\u8981\u5199\u4e2aBIT\u5957\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86~~\u6bd4\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\u8981\u77ed\u548c\u5feb\u5f88\u591a~~\u3002\u5199\u6cd5\u548c\u52a8\u6001\u9006\u5e8f\u5bf9\u5f88\u50cf\uff0c\u611f\u89c9\u4e5f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\u3002\n\n```\n//by zykykyk\n#include<cstdio>\n#include<ctime>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<string>\n#define rg register\n#define il inline\n#define vd void\n#define ll long long\n#define mod 1000000007\n#define N 50010\n#define For(i,x,y) for (rg int i=(x);i<=(y);i++)\n#define Dow(i,x,y) for (rg int i=(x);i>=(y);i--)\n#define cross(i,k) for (rg int i=first[k];i;i=last[i])\nusing namespace std;\nil ll max(ll x,ll y){return x>y?x:y;}\nil ll min(ll x,ll y){return x<y?x:y;}\nil ll read(){\n    ll x=0;int ch=getchar(),f=1;\n    while (!isdigit(ch)&&(ch!='-')&&(ch!=EOF)) ch=getchar();\n    if (ch=='-'){f=-1;ch=getchar();}\n    while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n    return x*f;\n}\nint n,m,l,r,a[N],b[N],c[N],Cnt[N];\nll ans;\nil int lowbit(int x){return x&(-x);}\nil vd Add(int x,int y){\n\tfor (;x<=n;x+=lowbit(x)) c[x]+=y,Cnt[x]++;\n}\nil ll Sum_v(int x){\n\tll sum=0;\n\tfor (;x;x-=lowbit(x)) sum+=c[x];return sum;\n}\nil ll Sum_cnt(int x){\n\tll sum=0;\n\tfor (;x;x-=lowbit(x)) sum+=Cnt[x];return sum;\n}\nint tot,rt[N],cnt[N*256],lson[N*256],rson[N*256];\nll v[N*256];\nil vd insert(int &u,int l,int r,int ql,int k,int K){\n\tif (!u) u=++tot;v[u]+=k;cnt[u]+=K;\n\tif (l==r) return;int mid=l+r>>1;\n\tif (ql<=mid) insert(lson[u],l,mid,ql,k,K);\n\t\telse insert(rson[u],mid+1,r,ql,k,K);\n}\nil vd Add(int x,int ql,int k,int K){\n\tfor (;x<=n;x+=lowbit(x)) insert(rt[x],1,n,ql,k,K);\n}\nil int query_v(int u,int l,int r,int ql,int qr){\n\tif (!u) return 0;\n\tif (l>=ql&&r<=qr) return v[u];int mid=l+r>>1;\n\tif (qr<=mid) return query_v(lson[u],l,mid,ql,qr);\n\telse if (ql>mid) return query_v(rson[u],mid+1,r,ql,qr);\n\telse return query_v(lson[u],l,mid,ql,qr)+query_v(rson[u],mid+1,r,ql,qr);\n}\nil int query_cnt(int u,int l,int r,int ql,int qr){\n\tif (!u) return 0;\n\tif (l>=ql&&r<=qr) return cnt[u];int mid=l+r>>1;\n\tif (qr<=mid) return query_cnt(lson[u],l,mid,ql,qr);\n\telse if (ql>mid) return query_cnt(rson[u],mid+1,r,ql,qr);\n\telse return query_cnt(lson[u],l,mid,ql,qr)+query_cnt(rson[u],mid+1,r,ql,qr);\n}\nil ll Query_v(int l,int r,int ql,int qr){\n\tif (l>r||ql>qr) return 0;\n\tll sum=0;\n\tfor (;r;r-=lowbit(r)) sum+=query_v(rt[r],1,n,ql,qr);l--;\n\tfor (;l;l-=lowbit(l)) sum-=query_v(rt[l],1,n,ql,qr);return sum;\n}\nil ll Query_cnt(int l,int r,int ql,int qr){\n\tif (l>r||ql>qr) return 0;\n\tll sum=0;\n\tfor (;r;r-=lowbit(r)) sum+=query_cnt(rt[r],1,n,ql,qr);l--;\n\tfor (;l;l-=lowbit(l)) sum-=query_cnt(rt[l],1,n,ql,qr);return sum;\n}\nil vd Dec(ll &x,ll y){\n\twhile (x<y) x+=mod;x-=y;\n}\nint main(){\n\tfreopen(\"data.in\",\"r\",stdin);\n\tfreopen(\"m.out\",\"w\",stdout);\n\tn=read(),m=read();\n\tFor(i,1,n) a[i]=read(),b[i]=read();\n\tDow(i,n,1) Add(a[i],b[i]),(ans+=Sum_v(a[i]-1)+Sum_cnt(a[i]-1)*b[i])%=mod;\n\tFor(i,1,n) Add(i,a[i],b[i],1);\n\tFor(i,1,m){\n\t\tl=read(),r=read();\n\t\tif (l>r) swap(l,r);\n\t\tif (l==r){printf(\"%lld\\n\",ans);continue;}\n\t\t(ans+=Query_v(l+1,r-1,1,a[r]-1))%=mod;\n\t\t(ans+=Query_cnt(l+1,r-1,1,a[r]-1)*b[r])%=mod;\n\t\tDec(ans,Query_v(l+1,r-1,a[r]+1,n));\n\t\tDec(ans,Query_cnt(l+1,r-1,a[r]+1,n)*b[r]);\n\t\t(ans+=Query_v(l+1,r-1,a[l]+1,n))%=mod;\n\t\t(ans+=Query_cnt(l+1,r-1,a[l]+1,n)*b[l])%=mod;\n\t\tDec(ans,Query_v(l+1,r-1,1,a[l]-1));\n\t\tDec(ans,Query_cnt(l+1,r-1,1,a[l]-1)*b[l]);\n\t\tif (a[l]>a[r]) Dec(ans,b[l]+b[r]);\n\t\t\telse (ans+=b[l]+b[r])%=mod;\n\t\tAdd(l,a[l],-b[l],-1),Add(l,a[r],b[r],1);\n\t\tAdd(r,a[r],-b[r],-1),Add(r,a[l],b[l],1);\n\t\tswap(a[l],a[r]),swap(b[l],b[r]);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n}\n```",
        "postTime": 1520164449,
        "uid": 25355,
        "name": "\u590f\u8272\u796d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "# \u5514\u59c6\r\n------------\r\n\u5feb\u4e24\u5e74\u6ca1\u5199\u9898\u89e3\u4e86\u3002\u524d\u51e0\u5929\u770b\u7fa4\u53cb\u8ba8\u8bba\u8fd9\u9898\u7684CDQ\u505a\u6cd5\uff0c\u518d\u770b\u81ea\u5df1\u4e24\u5e74\u524d\u5c31\u7528\u6811\u5957\u6811\u5199\u4e86\u8fd9\u9898\uff08\u867d\u7136\u53ea\u670920\u5206\uff09\uff0c\u800c\u4e14\u8fd9\u9898\u4e5f\u6ca1\u6709CDQ\u7684\u9898\u89e3\uff0c\u4e8e\u662f\u6012\u6572\u4e00\u53d1CDQ\uff0c\u7ed3\u679c\u6700\u4f18\u89e3\u4e86\uff0c\u6545\u4f5c\u6b64\u9898\u89e3\r\n\r\n------------\r\n### \u6b63\u6587\r\n\r\n- \u9996\u5148\u662f\u9898\u610f\uff0c~~\u51fa\u9898\u4eba\u548c\u6211\u4e4b\u95f4\u603b\u6709\u4e00\u4e2a\u4eba\u8bed\u6587\u4e0d\u53ca\u683c\u3002~~ \u8fd9\u9898\u7684\u610f\u601d\u662f\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 $a[i]$ \u4ee5\u53ca\u6bcf\u4e2a\u4f4d\u7f6e\u6240\u5bf9\u5e94\u7684\u6743\u503c $v[i]$ \uff0c\u6c42\u5e8f\u5217\u7684\u6bcf\u5bf9\u9006\u5e8f\u5bf9\u7684**\u6743\u503c\u548c**\uff0c\u4e14\u652f\u6301\u4ea4\u6362\u5bf9\u5e94\u4f4d\u7f6e\u7684 $a[i]$ \u4e0e $v[i]$ \u3002\r\n- \u63a5\u7740\u4fbf\u662f\u89e3\u6cd5\u4e86\uff0c\u5176\u5b9e\u8fd9\u9898\u548c [P3157 [CQOI2011]\u52a8\u6001\u9006\u5e8f\u5bf9](https://www.luogu.com.cn/problem/P3157) \u6781\u5176\u7c7b\u4f3c\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u53bb\u5eb7\u5eb7\u3002\r\n- \u56de\u5230\u6b63\u9898\uff0c\u4eceCDQ\u7684\u57fa\u672c\u601d\u60f3\u51fa\u53d1\uff0c\u6211\u4eec\u7684\u9650\u5236\u5206\u522b\u662f\u201c\u65f6\u95f4\u201d \u201c\u4f4d\u7f6e\u201d\u548c \u201c\u952e\u503c\u201d\uff08\u59d1\u4e14\u53eb\u8fd9\u4e2a\u7f62\uff0c\u53cd\u6b63\u5c31\u662f$a[i]$\uff09\uff0c\u6211\u4eec\u8003\u8651\u628a\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u62c6\u6210\u8fd9\u4e09\u4e2a\u9650\u5236\u6784\u6210\u7684\u70b9\uff0c\u6bd4\u5982\u539f\u59cb\u6570\u7ec4\uff0c\u65f6\u95f4\u4e3a $0$ \uff0c\u4f4d\u7f6e\u4e3a\u4e0b\u6807\u3002\r\n\r\n- \u800c\u540e\u7eed\u7684\u4ea4\u6362\u64cd\u4f5c\uff0c\u4f8b\u5982\u7b2c $i$ \u6b21\u64cd\u4f5c\u4ea4\u6362\u4e86 $x$ \u548c $y$ \uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u628a\u8fd9\u4e2a\u64cd\u4f5c\u62c6\u6210\u56db\u4e2a\u64cd\u4f5c\uff1a\r\n\t1. $i$ \u65f6\u523b\uff0c\u5728 $x$ \u4f4d\u7f6e\uff0c\u6709\u4e00\u4e2a \u952e\u503c\u4e3a $a[x]$ \u6743\u503c\u4e3a $-v[x]$ \u7684\u70b9\r\n\t2. $i$ \u65f6\u523b\uff0c\u5728 $x$ \u4f4d\u7f6e\uff0c\u6709\u4e00\u4e2a \u952e\u503c\u4e3a $a[y]$ \u6743\u503c\u4e3a $v[y]$ \u7684\u70b9\r\n\t3. $i$ \u65f6\u523b\uff0c\u5728 $y$ \u4f4d\u7f6e\uff0c\u6709\u4e00\u4e2a \u952e\u503c\u4e3a $a[x]$ \u6743\u503c\u4e3a $v[x]$ \u7684\u70b9\r\n\t4. $i$ \u65f6\u523b\uff0c\u5728 $y$ \u4f4d\u7f6e\uff0c\u6709\u4e00\u4e2a \u952e\u503c\u4e3a $a[y]$ \u6743\u503c\u4e3a $-v[y]$ \u7684\u70b9\r\n   \r\n   \u53ef\u4ee5\u770b\u51fa\uff0c\u52a0\u5165\u8d1f\u6743\u70b9\uff0c\u5c31\u53ef\u4ee5\u53bb\u6389\u4e4b\u524d\u7684\u70b9\u7684\u8d21\u732e\u4e86\u3002\r\n- \u6700\u540e\uff0c\u8fd8\u5c31\u90a3\u7ecf\u5178CDQ\u64cd\u4f5c\uff0c\u67e5\u8be2\u6709\u591a\u5c11\u4e2a\u70b9\uff08\u6b63\u6743\u70b9\u6570$-$\u8d1f\u6743\u70b9\u6570\uff09\u7684\u65f6\u95f4\u5728\u8be5\u70b9\u4e4b\u524d\uff0c\u4f4d\u7f6e\u5728\u8be5\u70b9\u524d\u4e14\u952e\u503c\u6bd4\u8be5\u70b9\u5927\u6216\u4f4d\u7f6e\u5728\u8be5\u70b9\u540e\u4e14\u952e\u503c\u6bd4\u8be5\u70b9\u5c0f\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u70b9\u7684\u6743\u503c\u548c\u3002\u628a\u5176\u8d21\u732e\u7edf\u8ba1\u5230\u5bf9\u5e94\u7684\u64cd\u4f5c\u4e2d\uff0c\u5373\u4e3a\u8fd9\u6b21\u64cd\u4f5c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u8f93\u51fa\u65f6\u505a\u4e2a\u524d\u7f00\u548c\u5c31\u884c\u4e86\u3002\r\n\r\n# Code\uff1a\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\n#define MAXN 1000000\r\n#define MOD 1000000007\r\n#define int long long\r\nusing namespace std;\r\n\r\nint n,m;\r\n\r\nstruct data{\r\n\tint x,y,z,id,tp;\r\n}v[MAXN],tr[MAXN];\r\ninline int read(){\r\n    int x=0,f=1;\r\n    char ch=getchar();\r\n    while(ch<'0'||ch>'9'){\r\n        if(ch=='-')\r\n            f=-1;\r\n        ch=getchar();\r\n    }\r\n    while(ch>='0'&&ch<='9'){\r\n        x=(x<<1)+(x<<3)+(ch^48);\r\n        ch=getchar();\r\n    }\r\n    return x*f;\r\n}\r\n\r\nint a[MAXN],b[MAXN];\r\nint ord[MAXN],ans[MAXN];\r\n\r\nbool cmp1(data x,data y){\r\n\tif (x.id==y.id){\r\n\t\tif (x.x==y.x)\r\n\t\t\treturn x.y<y.y;\r\n\t\telse \r\n\t\t\treturn x.x<y.x;\r\n\t}\r\n\telse \r\n\t\treturn x.id<y.id;\r\n}\r\n\r\nbool cmp2(int x,int y){\r\n\tif (v[x].x==v[y].x){\r\n\t\tif (v[x].y==v[y].y)\r\n\t\t\treturn x<y;\r\n\t\telse return v[x].y<v[y].y;\r\n\t}\r\n\telse return v[x].x<v[y].x;\r\n} \r\n\r\ninline int lb(int x){\r\n\treturn x&(-x);\r\n}\r\n\r\nvoid upd(int pos,int x,int y){\r\n\tfor(int i=pos;i<=n;i+=lb(i))\r\n\t\ttr[i].z=((tr[i].z+x)%MOD+MOD)%MOD,tr[i].tp+=y;\r\n}\r\n\r\ndata ask(int pos){\r\n\tdata res;\r\n\tres.z=res.tp=0;\r\n\tif (!pos)\r\n\t\treturn res;\r\n\tfor(int i=pos;i;i-=lb(i))\r\n\t\tres.z=(res.z+tr[i].z)%MOD,res.tp+=tr[i].tp;\r\n\tres.z=(res.z+MOD)%MOD;\r\n\treturn res;\r\n}\r\nvoid solve(int l,int r){//CDQ\u672c\u4f53\r\n\tif(l>=r)return;\r\n\tint mid=(l+r)>>1;\r\n\tsolve(l,mid);\r\n\tsolve(mid+1,r);\r\n\tint cnt=0;\r\n\tfor(int i=l;i<=r;i++)\r\n\t\tord[++cnt]=i;\r\n\tsort(ord+1,ord+1+cnt,cmp2);//\u5077\u61d2\u76f4\u63a5\u7528\u7684sort\uff0c\u5f52\u5e76\u5e94\u8be5\u66f4\u5feb\r\n    \r\n\tfor(int i=1;i<=cnt;i++){//\u987a\u5e8f\u505a\u4e00\u904d\uff0c\u7edf\u8ba1\u4f4d\u7f6e\u5c0f\u4f46\u952e\u503c\u5927\u7684\u70b9\u7684\u8d21\u732e\r\n\t\tint x=ord[i];\r\n\t\tif (x<=mid)\r\n\t\t\tupd(n-v[x].y+1,v[x].z*v[x].tp,v[x].tp);\r\n\t\telse {\r\n\t\t\tdata tmp=ask(n-v[x].y);\r\n\t\t\tans[v[x].id]+=v[x].tp*(tmp.tp*v[x].z+tmp.z)%MOD;ans[v[x].id]%=MOD;\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=cnt;i++){\r\n\t\tint x=ord[i];\r\n\t\tif (x<=mid)\r\n\t\t\tupd(n-v[x].y+1,-v[x].z*v[x].tp,-v[x].tp);\r\n\t}\r\n\t\r\n\tfor(int i=cnt;i;i--){//\u5012\u53d9\u518d\u505a\u4e00\u904d\r\n\t\tint x=ord[i];\r\n\t\tif (x<=mid)\r\n\t\t\tupd(v[x].y,v[x].z*v[x].tp,v[x].tp);\r\n\t\telse {\r\n\t\t\tdata tmp=ask(v[x].y-1);\r\n\t\t\tans[v[x].id]+=v[x].tp*(tmp.tp*v[x].z+tmp.z)%MOD;ans[v[x].id]%=MOD;\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=cnt;i++){\r\n\t\tint x=ord[i];\r\n\t\tif (x<=mid)\r\n\t\t\tupd(v[x].y,-v[x].z*v[x].tp,-v[x].tp);\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\nsigned main(){\r\n\tn=read(),m=read();\r\n\tint tot=0;\r\n\tfor(int i=1;i<=n;i++)\r\n\t\tv[++tot].x=i,a[i]=v[tot].y=read(),b[i]=v[tot].z=read(),v[tot].id=0,v[tot].tp=1;\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tint x=read(),y=read();\r\n\t\tv[++tot].x=x,v[tot].y=a[x],v[tot].z=b[x],v[tot].id=i,v[tot].tp=-1;\r\n\t\tv[++tot].x=y,v[tot].y=a[y],v[tot].z=b[y],v[tot].id=i,v[tot].tp=-1;\r\n\t\t\r\n\t\tswap(a[x],a[y]);swap(b[x],b[y]);\r\n\t\tv[++tot].x=x,v[tot].y=a[x],v[tot].z=b[x],v[tot].id=i,v[tot].tp=1;\r\n\t\tv[++tot].x=y,v[tot].y=a[y],v[tot].z=b[y],v[tot].id=i,v[tot].tp=1;\r\n\t}\r\n\tsort(v+1,v+1+tot,cmp1);\r\n\tsolve(1,tot);\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tans[i]=((ans[i-1]+ans[i])%MOD+MOD)%MOD;\r\n\t\tprintf(\"%lld\\n\",ans[i]);\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n```\r\n\r\n\r\n------------\r\n\r\n\u5514\uff0c\u5c31\u662f\u8fd9\u6837\u5566\u3002\u7ec6\u8282\u53ef\u80fd\u8fd8\u662f\u6709\u70b9~~\u6216\u8005\u662f\u6211\u592a\u83dc\u4e86~~\uff0c\u6709\u95ee\u9898\u53ef\u4ee5\u76f4\u63a5\u79c1\u4fe1\u6211",
        "postTime": 1615216450,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "P3759 [TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458"
    },
    {
        "content": "## \u505a\u6cd5\uff1a\u6811\u72b6\u6570\u7ec4\u5957\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\u867d\u7136\u6709\u7bc7\u9898\u89e3\u5df2\u7ecf\u5199\u4e86\u8fd9\u4e2a\u4e86\uff0c\u4f46\u6211\u8fd9\u7bc7\u4f1a\u8bb2\u5f97\u66f4\u8be6\u7ec6~~\u4e14\u4ee3\u7801\u66f4\u77ed~~\u3002\n## \u9898\u76ee\u5206\u6790\n- \u8bbe\u6570\u7ec4 $a$ \u8868\u793a\u4f18\u5148\u7ea7\uff08\u9898\u9762\u4e2d\u7684\u4f4d\u7f6e\uff09\uff0c$b$ \u8868\u793a\u6743\u503c\uff08\u9898\u9762\u4e2d\u7684\u9875\u6570\uff09\u3002\n- \u8003\u8651 $swap(l,r)$ \u540e\u7b54\u6848\u7684\u53d8\u5316\u3002\n- \u53d1\u73b0\u4f1a\u6539\u53d8\u7684\u70b9\u5bf9\u53ea\u6709\u4e09\u79cd\uff1a\uff081\uff09\u4ee5 $l$ \u4e3a\u5de6\u7aef\u70b9\uff0c$i\\in[l+1,r-1]$ \u4e3a\u53f3\u7aef\u70b9\uff1b\uff082\uff09\u4ee5 $i\\in[l+1,r-1]$ \u4e3a\u5de6\u7aef\u70b9\uff0c$r$ \u4e3a\u53f3\u7aef\u70b9\uff1b\uff083\uff09\u4ee5 $l$ \u4e3a\u5de6\u7aef\u70b9\uff0c$r$ \u4e3a\u53f3\u7aef\u70b9\u3002\n- \uff083\uff09\u53ef\u4ee5\u76f4\u63a5\u7279\u5224\uff0c\u800c\uff081\uff09\u548c\uff082\uff09\u662f\u5bf9\u79f0\u7684\uff0c\u4e0b\u9762\u53ea\u8003\u8651\uff081\uff09\u3002\n- \u5bf9\u4e8e $i\\in[l+1,r-1]$\uff0c\u5982\u679c $a[l]< a[i]$\uff0c\u90a3\u4e48\u662f\u987a\u5e8f\u5bf9\u53d8\u9006\u5e8f\u5bf9\uff0c$ans \\gets ans+b[l]+b[i]$\uff1b\u5982\u679c $a[l]> a[i]$\uff0c\u90a3\u4e48\u662f\u9006\u5e8f\u5bf9\u53d8\u987a\u5e8f\u5bf9\uff0c$ans \\gets ans-(b[l]+b[i])$\u3002\n- \u5bf9\u8fd9\u4e9b\u8d21\u732e\u6c42\u548c\uff0c\u5f97\u5230\u4e00\u4e2a\u5f62\u5f0f\u5316\u7684\u516c\u5f0f\n$$ans \\gets ans+\\sum_{l+1\\le i\\le r-1,a_l<a_i}a[l]+a[i]-\\sum_{l+1\\le i\\le r-1,a_l>a_i}a[l]+a[i]$$\n- \u8981\u7b97\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u6211\u4eec\u9700\u8981\u652f\u6301\uff081\uff09\u67e5\u8be2\u533a\u95f4\u5185\u67d0\u4e2a\u503c\u57df\u4e2d \u6570\u7684\u548c\u53ca\u6570\u7684\u4e2a\u6570\uff1b\uff082\uff09\u5355\u70b9\u4fee\u6539\u3002\u81f3\u6b64\u7ec8\u4e8e\u53ef\u4ee5\u8bf7\u51fa\u6211\u4eec\u7684\u6811\u72b6\u6570\u7ec4\u5957\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u4e86\uff01\n## \u5177\u4f53\u505a\u6cd5\n- \u666e\u901a\u7684\u6811\u72b6\u6570\u7ec4\u5b58\u7684\u662f\u6570\uff0c\u6211\u4eec\u53ea\u8981\u628a\u6570\u6362\u6210\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86\uff0c\u5176\u5b83\u64cd\u4f5c\u5b8c\u5168\u4e00\u6837\u3002\n- \u76f8\u5f53\u4e8e\u6811\u72b6\u6570\u7ec4\u5957\u5728\u5916\u9762\u505a\u533a\u95f4\u7d22\u5f15\uff0c\u5185\u5c42\u7684\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u505a\u503c\u57df\u7d22\u5f15\u3002\n- \u53ef\u4ee5\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u6211\u4eec\u7ef4\u62a4\u7684\u4fe1\u606f\u5177\u6709\u53ef\u51cf\u6027\u3002\n- ~~\u4e3a\u4ec0\u4e48\u5177\u4f53\u505a\u6cd5\u8fd9\u4e48\u77ed\u5462\uff0c\u56e0\u4e3a\u771f\u7684\u4e00\u53e5\u8bdd\u5c31\u8bf4\u5b8c\u4e86\u3002~~\n## \u4ee3\u7801\n### \u522b\u5fd8\u4e86\u53d6\u6a21\uff01\uff01\uff01\n```cpp\n#include<bits/stdc++.h>\n#define pk push_back\n#define mk make_pair \nusing namespace std;\ntypedef long long LL;\nconst int N=5e4+5,M=200,mod=1e9+7;\n#define tl ls[id]\n#define tr rs[id]\n#define mid (l+r>>1) \n#define lson tl,l,mid\n#define rson tr,mid+1,r\nint tot,sz[N*M],ls[N*M],rs[N*M],s[N*M];\nvoid update(int &id,int l,int r,int p,int v,int fg){\n\tif(!id) id=++tot;\n\tif(l==r) return sz[id]+=fg,s[id]+=fg*v,void();\n\tp<=mid?update(lson,p,v,fg):update(rson,p,v,fg);\n\tsz[id]=sz[tl]+sz[tr];s[id]=(s[tl]+s[tr])%mod;\n}\nint qsz,qs;\nvoid query(int id,int l,int r,int ll,int rr,int fg){\n\tif(ll<=l&&r<=rr) return qsz+=fg*sz[id],(qs+=fg*s[id])%=mod,void();\n\tif(rr<=mid) query(lson,ll,rr,fg);\n\telse if(ll>mid) query(rson,ll,rr,fg);\n\telse query(lson,ll,rr,fg),query(rson,ll,rr,fg); \n} \nint n,m,a[N],b[N],rt[N];LL ans;\nvoid add(int x,int fg){\n\tint p=a[x],v=b[x];\n\tfor(;x<=n;x+=x&-x) update(rt[x],1,n,p,v,fg);\n}\nvoid ask(int l,int r,int ll,int rr){\n\tqsz=qs=0;\n\tif(l>r||ll>rr) return ;\n\tfor(;r;r-=r&-r) query(rt[r],1,n,ll,rr,1);\n\t--l;if(l) for(;l;l-=l&-l) query(rt[l],1,n,ll,rr,-1);\n}\nint f(int x){\n\treturn (qs+1ll*qsz*b[x]%mod)%mod;\n}\nint main(){\n\tios::sync_with_stdio(false);\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;++i){\n\t\tcin>>a[i]>>b[i],add(i,1);\n\t\task(1,i-1,a[i]+1,n);\n\t\tans+=f(i);ans%=mod;\n\t}\n\twhile(m--){\n\t\tint l,r;cin>>l>>r;\n\t\tif(l>r) swap(l,r);\n\t\tif(l!=r){\n\t\t\task(l+1,r-1,1,a[l]-1);ans-=f(l);ans%=mod;\n\t\t\task(l+1,r-1,a[l]+1,n);ans+=f(l);ans%=mod;\n\t\t\task(l+1,r-1,1,a[r]-1);ans+=f(r);ans%=mod;\n\t\t\task(l+1,r-1,a[r]+1,n);ans-=f(r);ans%=mod;\n\t\t\ta[l]>a[r]?ans-=b[l]+b[r]:ans+=b[l]+b[r];ans%=mod;\n\t\t\tadd(l,-1),add(r,-1);\n\t\t\tswap(a[l],a[r]),swap(b[l],b[r]);\n\t\t\tadd(l,1),add(r,1);\n\t\t} \n\t\tif(ans<0) ans+=mod;\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1599227292,
        "uid": 118092,
        "name": "\u9752\u541b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "\u524d\u8a00\uff0c\u76ee\u524d\u6700\u4f18\u89e3\uff0c\u5927\u7ea6\u4e24\u79d2\u5c31\u8fc7\u4e86\u3002\r\n\r\n[Link](https://www.luogu.com.cn/problem/P3759)\r\n\r\n## \u9898\u9762\u5927\u610f\r\n\r\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u6392\u5217\uff0c\u6bcf\u4e2a\u6570\u6709\u5bf9\u5e94\u7684\u4ef7\u503c\uff0c$m$ \u6b21\u4ea4\u6362\u5e8f\u5217\u4e2d\u4e24\u4e2a\u5143\u7d20\uff0c\u95ee\u6bcf\u6b21\u4ea4\u6362\u5b8c\u4e4b\u540e\u5168\u5c40\u8d21\u732e\u3002\r\n\r\n\u82e5\u4e24\u4e2a\u6570\u662f\u9006\u5e8f\u5bf9\uff0c\u5219\u4f1a\u63d0\u4f9b\u8fd9\u4e24\u4e2a\u6570\u4ef7\u503c\u548c\u7684\u8d21\u732e\u3002\r\n\r\n\u5176\u5b9e\u5efa\u8bae\u5927\u5bb6\u53bb\u770b\u770b\u8ba8\u8bba\u533a\u7684\u9898\u610f\u3002\r\n\r\n$1\\leq n,m\\leq 5\\times 10^4$\u3002\r\n\r\n## \u9898\u76ee\u5206\u6790\r\n\r\n\u4f17\u6240\u5468\u77e5\uff0c\u8fd9\u79cd\u4ea4\u6362\u4e24\u4e2a\u6570\u6c42\u9006\u5e8f\u5bf9\u7684\uff0c\u5f53\u524d\u4fee\u6539\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u8fb9\u4e0d\u4f1a\u6709\u5f71\u54cd\uff0c\u53ea\u9700\u8981\u77e5\u9053\u67e5\u8be2\u533a\u95f4\u4e2d\u95f4\u90e8\u5206\u4e0e\u5de6\u53f3\u7aef\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\u5373\u53ef\u3002\r\n\r\n\u73b0\u5728\u6bd4\u8f83\u9ebb\u70e6\u7684\u662f\u5982\u4f55\u5904\u7406\u4ef7\u503c\uff1f\r\n\r\n\u5176\u5b9e\u5982\u679c\u6709\u4eba\u770b\u8fc7\u6211\u8fd9\u7bc7[\u535a\u5ba2](https://www.luogu.com.cn/blog/yizhiming/ti-xie-p3157-cqoi2011-dong-tai-ni-xu-dui-post)\uff0c\u5927\u6982\u5c31\u6bd4\u8f83\u597d\u60f3\u4e86\uff0c\u6ca1\u770b\u8fc7\u4e5f\u6ca1\u5173\u7cfb\uff0c\u6211\u5728\u8fd9\u91cc\u91cd\u8bf4\u4e00\u904d\u3002\r\n\r\n\u8bbe $pre_{i,j}$ \u8868\u793a\u524d $i$ \u4e2a\u5e8f\u5217\u5757\u4e2d\uff0c\u503c\u57df\u5728\u5757 $j$ \u7684\u6570\u7684\u4ef7\u503c\u548c\u3002\r\n\r\n$cnt_{i,j}$ \u8868\u793a\u524d $i$ \u4e2a\u5e8f\u5217\u5757\u4e2d\uff0c\u503c\u57df\u5728\u5757 $j$ \u7684\u6570\u7684\u4e2a\u6570\u3002\r\n\r\n\u6ce8\u610f\u662f\u8981\u5c06\u503c\u57df\u548c\u5e8f\u5217\u90fd\u5206\u5757\u3002\u7531\u4e8e\u662f\u5355\u70b9\u4fee\u6539\uff08\u4ea4\u6362\u4e24\u4e2a\u548c\u63d2\u5165\uff09\uff0c\u6240\u4ee5\u524d\u7f00\u548c\u6570\u7ec4\u53ef\u4ee5\u76f4\u63a5 $\\sqrt{n}$ \u626b\u4e00\u904d\u6240\u6709\u7684\u5757\u66f4\u65b0\u524d\u7f00\u548c\u6570\u7ec4\u3002\r\n\r\n\u6709\u4e86\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u67e5\u8be2\u503c\u57df\u6574\u5757\u7684\u65f6\u5019 $O(1)$ \u8ba1\u7b97\u51fa\u5f53\u524d\u6574\u5e8f\u5217\u5757\uff0c\u503c\u57df\u6574\u5757\u7684\u7b54\u6848\u3002\r\n\r\n\u5229\u7528\u4e00\u4e2a\u4f18\u7f8e\u7684\u6027\u8d28\uff0c$a$ \u662f\u6392\u5217\uff0c\u6240\u4ee5\u5bf9\u4e8e\u96f6\u6563\u503c\u57df\u5757\u7684\u6570\uff0c\u5f53\u524d\u6240\u5728\u7684\u4f4d\u7f6e\u662f\u552f\u4e00\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8bb0\u5f55\u82e5 $a_x = i$\uff0c\u5219 $id_i = x$\uff0c\u6709\u4e86\u8fd9\u4e2a\u6570\u7ec4\uff0c\u5c31\u53ef\u4ee5\u67e5\u8be2\u96f6\u6563\u503c\u57df\u5757\uff0c\u662f\u5426\u5728\u6574\u5e8f\u5217\u5757\u5185\u3002\r\n\r\n\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u7684\u65f6\u5019\uff0c\u66b4\u529b\u6839\u53f7\u4fee\u6539\u4e24\u4e2a\u6570\u7ec4\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u679a\u4e3e\u96f6\u6563\u5e8f\u5217\u5757\uff0c\u5bf9\u4e8e\u6574\u5e8f\u5217\u5757\uff0c\u5206\u6210\u6574\u503c\u57df\u5757\u548c\u96f6\u6563\u503c\u57df\u5757\u7edf\u8ba1\u5373\u53ef\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt{n})$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\r\n\r\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u9053\u9898\u8dd1\u5f97\u6bd4 cdq \u5feb\uff0c\u4e0a\u9762\u90a3\u9053\u5c31\u88ab\u540a\u6253\u3002\r\n\r\n\u4f5c\u8005\u6587\u7b14\u4e0d\u592a\u597d\uff0c\u4f46\u60f3\u63a8\u5e7f\u4e00\u4e0b\u5206\u5757\u505a\u6cd5\uff0c\u671b\u6d77\u6db5\u3002\r\n\r\n## Code\r\n\r\n\u4ea4\u6362\u7684\u65f6\u5019\u8981\u8003\u8651\u5de6\u53f3\u7aef\u70b9\u76f8\u4e92\u662f\u5426\u6210\u4e3a\u9006\u5e8f\u5bf9\uff0c\u540c\u65f6\u6ce8\u610f\u628a\u5f53\u524d\u5de6\u53f3\u7aef\u70b9\u7684\u8d21\u732e\u5148\u5220\u6389\u5728\u67e5\u8be2\uff0c\u6700\u540e\u4ea4\u6362\u5b8c\u4e4b\u540e\u518d\u4fee\u6539\u524d\u7f00\u548c\u6570\u7ec4\u3002\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <algorithm>\r\n#include <cstdio>\r\n#include <cstring>\r\n#include <cmath>\r\n#include <queue>\r\n#define int long long\r\nusing namespace std;\r\nint read(){\r\n\tint x=0,f=1;char ch=getchar();\r\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\r\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\r\n\treturn x*f;\r\n}\r\nconst int N = 5e4+5;\r\nconst int Sn = 400;\r\nint Mod = 1e9+7;\r\nint a[N],v[N],bel[N],L[N],R[N],id[N];\r\nint pre[Sn][Sn],cnt[Sn][Sn];\r\nint ask1(int l,int r,int val,int w){\r\n\tint res = 0;\r\n\tfor(int i=l;i<=r;i++){\r\n\t\tres+=(a[i]>val)*(w+v[i]);\r\n\t} \r\n\treturn res;\r\n}\r\nint ask2(int l,int r,int val,int w){\r\n\tint res = 0;\r\n\tfor(int i=l;i<=r;i++){\r\n\t\tres+=((a[i]<val)&&(a[i]!=0))*(w+v[i]);\r\n\t}\r\n\treturn res;\r\n}\r\nint n,m,res;\r\nint qmax(int l,int r,int val,int w){\r\n\tif(l>r){\r\n\t\treturn 0;\r\n\t}\r\n\tint num = 0;\r\n\tif(bel[l]==bel[r]){\r\n\t\tnum = ask1(l,r,val,w);\r\n\t}else{\r\n\t\tnum+=ask1(l,R[bel[l]],val,w);\r\n\t\tnum+=ask1(L[bel[r]],r,val,w);\r\n\t\tint lx = bel[l],rx = bel[r]-1;\r\n\t\tfor(int i=bel[val]+1;i<=bel[n];i++){\r\n\t\t\tnum+=pre[rx][i]-pre[lx][i];\r\n\t\t\tnum+=(cnt[rx][i]-cnt[lx][i])*w;\r\n\t\t}\r\n\t\tfor(int i=val+1;i<=R[bel[val]];i++){\r\n\t\t\tnum+=((id[i]>=L[lx+1])&&(id[i]<=R[rx]))*(w+v[id[i]]);\r\n\t\t}\r\n\t}\r\n\treturn num;\r\n}\r\nint qmin(int l,int r,int val,int w){\r\n\tif(l>r){\r\n\t\treturn 0;\r\n\t}\r\n\tint num = 0;\r\n\tif(bel[l]==bel[r]){\r\n\t\tnum = ask2(l,r,val,w);\r\n\t}else{\r\n\t\tnum+=ask2(l,R[bel[l]],val,w);\r\n\t\tnum+=ask2(L[bel[r]],r,val,w);\r\n\t\tint lx = bel[l],rx = bel[r]-1;\r\n\t\tfor(int i=1;i<bel[val];i++){\r\n\t\t\tnum+=pre[rx][i]-pre[lx][i];\r\n\t\t\tnum+=(cnt[rx][i]-cnt[lx][i])*w;\r\n\t\t}\r\n\t\tfor(int i=L[bel[val]];i<val;i++){\r\n\t\t\tnum+=((id[i]>=L[lx+1])&&(id[i]<=R[rx]))*(w+v[id[i]]);\r\n\t\t}\r\n\t}\r\n\treturn num;\r\n}\r\nvoid ins(int id,int val,int w){\r\n\tres+=qmax(1,id-1,val,w);\r\n\tres+=qmin(id+1,n,val,w);\r\n\tfor(int i=bel[id];i<=bel[n];i++){\r\n\t\tpre[i][bel[val]]+=w;\r\n\t\tcnt[i][bel[val]]++;\r\n\t}\r\n}\r\nvoid add(int id,int x){\r\n\tint val = a[id];\r\n\tint w = v[id];\r\n\tfor(int i=bel[id];i<=bel[n];i++){\r\n\t\tpre[i][bel[val]]+=w*x;\r\n\t\tcnt[i][bel[val]]+=x;\r\n\t}\r\n}\r\nvoid Swap(int x,int y){\r\n\tif(x==y){\r\n\t\treturn;\r\n\t}\r\n\tif(x>y){\r\n\t\tswap(x,y);\r\n\t}\r\n\tadd(x,-1);add(y,-1);\r\n\tint c = a[x],d = a[y];\r\n\tif(c>d){\r\n\t\tres-=v[x]+v[y];\r\n\t}else{\r\n\t\tres+=v[x]+v[y];\r\n\t}\r\n\tid[a[x]] = 0;id[a[y]] = 0;\r\n\ta[x] = 0;a[y] = 0;\r\n\tres-=qmin(x+1,y-1,c,v[x]);\r\n\tres-=qmax(x+1,y-1,d,v[y]);\r\n\tres+=qmax(x+1,y-1,c,v[x]);\r\n\tres+=qmin(x+1,y-1,d,v[y]);\r\n\ta[x] = c;a[y] = d;\r\n\tid[a[x]] = x;id[a[y]] = y;\r\n\tswap(id[a[x]],id[a[y]]);\r\n\tswap(a[x],a[y]);\r\n\tswap(v[x],v[y]); \r\n\tadd(x,1);add(y,1);\r\n}\r\nsigned main(){\r\n\tn = read();m = read();\r\n\tint siz = sqrt(n);\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tbel[i] = (i-1)/siz+1;\r\n\t\tif(!L[bel[i]]){\r\n\t\t\tL[bel[i]] = i;\r\n\t\t}\r\n\t\tR[bel[i]] = i;\r\n\t}\r\n\tfor(int i=1;i<=n;i++){\r\n\t\ta[i] = read();v[i] = read();\r\n\t\tid[a[i]] = i;\r\n\t\tins(i,a[i],v[i]);\r\n\t}\r\n\tint x,y;\r\n\twhile(m--){\r\n\t\tx = read();y = read();\r\n\t\tSwap(x,y);\r\n\t\tcout<<res%Mod<<\"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n\r\n\u611f\u89c9\u8fd9\u79cd\u5355\u70b9\u4fee\u6539\u7684\u5206\u5757\uff0c\u5927\u5bb6\u57fa\u672c\u90fd\u4e0d\u600e\u4e48\u5199 $O(n\\sqrt{n})$ \u7684\u3002",
        "postTime": 1674700326,
        "uid": 369399,
        "name": "yizhiming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010P3759 [TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "\u6211\u4eec\u53d1\u73b0\uff0c**\u5b58\u5728\u4e71\u5e8f\u7684\u4e66\u5219\u5fc5\u7136\u5b58\u5728\u9006\u5e8f\u5bf9\uff0c\u800c\u538c\u70e6\u5ea6\u7edf\u8ba1\u5c31\u662f\u9006\u5e8f\u5bf9\u7684\u6743\u503c\u548c**\n\n\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u9053\u88f8\u7684\u52a8\u6001\u9006\u5e8f\u5bf9\u7684\u9898\u4e86\u3002\n\n\u4e0d\u4f1a\u52a8\u6001\u9006\u5e8f\u5bf9\u7684\u53ef\u4ee5\u53c2\u8003\\[CQOI2011\\]\u52a8\u6001\u9006\u5e8f\u5bf9\n\n\u53e6\u5916\uff0c\u6211\u7684\u52a8\u6001\u9006\u5e8f\u5bf9\u7528\u4e86\u7ebf\u6bb5\u6811\u5957\u4e3b\u5e2d\u6811\uff08\u6811\u72b6\u6570\u7ec4\u4e0d\u4f1a\u6253\u4e86\u3002\u3002\u3002\uff09\n\n\u4ee3\u7801\uff08\u8bf7\u5f00\u542f\u706b\u8f66\u5934\u4f7f\u7528\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\n#define pLL pair<ll,ll>\nusing namespace std;\n\nconst ll N=50010,mod=1000000007;\nll n,m,ans,cnt,a[N],sum[N];\n\ninline ll read(){\n\tll x=0,tmp=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-') tmp=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn tmp*x;\n}\n\ninline void write(ll x){\n\tif(x<0){\n\t\tputchar('-');\n\t\tx=-x;\n\t}\n\tll y=10,len=1;\n\twhile(y<=x){\n\t\ty=(y<<3)+(y<<1);\n\t\tlen++;\n\t}\n\twhile(len--){\n\t\ty/=10;\n\t\tputchar(x/y+48);\n\t\tx%=y;\n\t}\n}\n\ninline void add(pLL &x,pLL y){\n\tx.first+=y.first;\n\tx.second+=y.second;\n}\n\nnamespace Segment{//\u7ebf\u6bb5\u6811\n\tll root[N<<8];\n\tstruct SegmentTree{\n\t\tll lson,rson,size,val;\n\t}tree[N<<8];\n\tqueue<ll> trush;\n\tinline void Delete(ll &p){\n\t\ttree[p].size=tree[p].val=tree[p].lson=tree[p].rson=0;\n\t\ttrush.push(p); p=0;\n\t}\n\t\n\tinline ll New(){\n\t    if(trush.empty()) return ++cnt;\n\t    ll ans=trush.front(); trush.pop();\n\t    return ans;\n\t}\n\t\n\tvoid Insert(ll &p,ll l,ll r,ll pos,ll x,ll y){\n\t    if(!p) p=New();\n\t    tree[p].size=(tree[p].size+mod+x)%mod; tree[p].val+=y;\n\t    if(l==r){\n\t        if(!tree[p].val) Delete(p);\n\t        return;\n\t    }\n\t    ll mid=(l+r)>>1;\n\t    if(pos<=mid) Insert(tree[p].lson,l,mid,pos,x,y);\n\t    if(pos>mid) Insert(tree[p].rson,mid+1,r,pos,x,y);\n\t    if(!tree[p].val) Delete(p);\n\t}\n\t\n\tpLL query(ll p,ll l,ll r,ll x,ll y){\n\t    if(!p) return make_pair(0,0);\n\t    if(x<=l&&r<=y) return make_pair(tree[p].size,tree[p].val);\n\t    ll mid=(l+r)>>1;\n\t    pLL ans=make_pair(0,0);\n\t    if(x<=mid) add(ans,query(tree[p].lson,l,mid,x,y));\n\t    if(y>mid) add(ans,query(tree[p].rson,mid+1,r,x,y));\n\t    return ans;\n\t}\n}\n\nnamespace treap{//\u4e3b\u5e2d\u6811\n\tvoid Insert(ll p,ll l,ll r,ll pos,ll x,ll sum){\n\t    Segment::Insert(Segment::root[p],1,N,x,sum,1);\n\t    if(l==r) return;\n\t    ll mid=(l+r)>>1;\n\t    if(pos<=mid) Insert(p<<1,l,mid,pos,x,sum);\n\t    if(pos>mid) Insert(p<<1|1,mid+1,r,pos,x,sum);\n\t}\n\t\n\tvoid Delete(ll p,ll l,ll r,ll pos,ll x,ll sum){\n\t    Segment::Insert(Segment::root[p],1,N,x,-sum,-1);\n\t    if(l==r) return;\n\t    ll mid=(l+r)>>1;\n\t    if(pos<=mid) Delete(p<<1,l,mid,pos,x,sum);\n\t    if(pos>mid) Delete(p<<1|1,mid+1,r,pos,x,sum);\n\t}\n\t\n\tpLL query(ll p,ll l,ll r,ll x,ll y,ll L,ll R){\n\t    if(x<=l&&r<=y) return Segment::query(Segment::root[p],1,N,L,R);\n\t    if(x<=l&&r<=y) return Segment::query(Segment::root[p],1,N,L,R);\n\t    ll mid=(l+r)>>1;\n\t    pLL ans=make_pair(0,0);\n\t    if(x<=mid) add(ans,query(p<<1,l,mid,x,y,L,R));\n\t    if(y>mid) add(ans,query(p<<1|1,mid+1,r,x,y,L,R));\n\t    ans.first%=mod;\n\t    return ans;\n\t}\t\n}\n\nint main(){\n    n=read(); m=read();\n    for(ll i=1; i<=n; i++){\n    \ta[i]=read(); sum[i]=read()%mod;\n    \ttreap::Insert(1,1,n,i,a[i],sum[i]);\n\t}\n    for(ll i=1; i<=n; i++){\n        pLL cur=treap::query(1,1,n,i+1,n,1,a[i]);\n        ans=(ans+sum[i]*cur.second+cur.first)%mod;\n    }\n    while(m--){\n        ll x=read(),y=read();\n        if(x>y) swap(x,y);\n        if(x==y){\n\t\t\twrite(ans); putchar('\\n');\n\t\t\tcontinue;\n\t\t}\n        ll L=a[x],R=a[y],mn=min(L,R),mx=max(L,R);\n        pLL cur=treap::query(1,1,n,x,y,mn+1,mx-1);\n        ans=(ans+(mn==L?1:-1)*(2*cur.first+(cur.second+1)*(sum[x]+sum[y])))%mod;\n        ans=(ans+treap::query(1,1,n,x,y,1,mn-1).second*(sum[y]-sum[x]))%mod;\n        ans=(ans+treap::query(1,1,n,x,y,mx+1,n).second*(sum[x]-sum[y]))%mod;\n        while(ans<0) ans+=mod;\n        treap::Delete(1,1,n,x,a[x],sum[x]); treap::Delete(1,1,n,y,a[y],sum[y]);\n        treap::Insert(1,1,n,x,a[y],sum[y]); treap::Insert(1,1,n,y,a[x],sum[x]);\n        swap(a[x],a[y]); swap(sum[x],sum[y]);\n        write(ans); putchar('\\n');\n    }\n    return 0;\n}\n```",
        "postTime": 1579333724,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "[$\\Large\\color{violet}Blog$](http://geiz-revive.github.io/)\n\n\u8fd9\u9898\u7684\u9898\u9762\u771f\u7684\u6709\u6bd2\uff0c\u9898\u610f\u975e\u5e38\u4e0d\u6e05\u695a\uff0c\u8ba9\u4eba\u6000\u7591\u81ea\u5df1\u7684\u8bed\u6587\u6c34\u5e73\u2026\n\n\u8981\u6c42\u7684\u9006\u5e8f\u5bf9\u662f\u5173\u4e8e$a_i$\u7684\u2026\n\n\u4e4b\u540e\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u4ee5\u4e66\u672c\u7684\u7f16\u53f7\u4e3a\u4f4d\u7f6e\u7ef4\u5ea6\uff0c\u4ee5$a_i$\u4e3a\u9006\u5e8f\u5bf9\u7684\u6743\u503c\u7ef4\u5ea6\uff0c\u7136\u540e\u518d\u5e26\u4e0a\u6743\u5c31\u884c\u4e86\uff0c\u5e26\u6743\u7684\u64cd\u4f5c\u6bd4\u8f83\u597d\u60f3\uff0c\u540c\u65f6\u7ef4\u62a4\u6743\u503c\u548c(\u4ee5\u4e0b\u7684\u6743\u503c\u6307$v_i$)\u4e0e\u4e2a\u6570\uff0c\u8d21\u732e\u5c31\u662f\u6743\u503c\u548c $+$\uff08\u4e2a\u6570 $\\times$ \u5f53\u524d\u8ba1\u7b97\u7684\u70b9\u7684\u6743\u503c\uff09\u3002\n\n\u4e4b\u540e\u4e0a\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\u7684\u677f\u5b50\uff0c\u8fd9\u9898\u5c31\u5b8c\u4e86\uff0c\u56e0\u4e3a\u8bfb\u9519\u9898\u8c03\u4e86\u6574\u6574\u4e24\u4e2a\u4e0b\u5348\n\n$\\Large Code:$\n\n```cpp\n#pragma region revive\n#include <set>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define son(x,y) t[x].child[y]\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define ll long long\nconst int inf = 0x3f3f3f3f;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\n#ifndef _DEBUG\n#define getchar() (*(IOB.in.p++))\n#define putchar(c) (*(IOB.out.p++)=(c))\n#define io_eof() (IOB.in.p>=IOB.in.pend)\nstruct IOBUF { struct { char buff[1 << 26], *p, *pend; }in; struct { char buff[1 << 26], *p; }out; IOBUF() { in.p = in.buff; out.p = out.buff; in.pend = in.buff + fread(in.buff, 1, 1 << 26, stdin); }~IOBUF() { fwrite(out.buff, 1, out.p - out.buff, stdout); } }IOB;\n#endif\ntemplate<typename IO>\ninl void write(IO x) {\n\tif (x == 0) return (void)putchar('0');\n\tif (x < 0)putchar('-'), x = -x;\n\tstatic char buf[30];\n\tchar* p = buf;\n\twhile (x) {\n\t\t*(p++) = x % 10 + '0';\n\t\tx /= 10;\n\t}\n\twhile (p > buf)putchar(*(--p));\n}\ninl void writestr(const char *s) { while (*s != 0)putchar(*(s++)); }\ntemplate<typename IO>inl void writeln(IO x) { write(x), putchar('\\n'); }\ntemplate<typename IO>inl void writesp(IO x) { write(x), putchar(' '); }\ninl int readstr(char *s) {\n\tchar *begin = s, c = getchar();\n\twhile (c < 33 || c>127) {\n\t\tc = getchar();\n\t}\n\twhile (c >= 33 && c <= 127) {\n\t\t*(s++) = c;\n\t\tc = getchar();\n\t}\n\t*s = 0;\n\treturn s - begin;\n}\ntemplate<typename IO>\ninl IO read() {\n\tIO x = 0;\n\tregister bool w = 0;\n\tregister char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\n#pragma endregion\n#undef ls\n#undef rs\n#define ls(x) t[x].l\n#define rs(x) t[x].r\nconst int mod = 1e9 + 7;\nint root[1000001], cnt, pos[1000001], a[1000001], tmpl[51], tmpr[51], cntl, cntr, n;\nstruct node {\n\tint l, r, cnt;\n\tll w;\n}t[20000001];\ninl void maintain(int x) {\n\tt[x].w = (t[ls(x)].w + t[rs(x)].w) % mod;\n\tt[x].cnt = t[ls(x)].cnt + t[rs(x)].cnt;\n}\ninl void change(int &k, int l, int r, int p, int w, int op) {\n\tif (!k)k = ++cnt;\n\tif (l == r)return (void)(t[k].w = ((t[k].w + w) % mod + mod) % mod, t[k].cnt += op);\n\tre mid = l + r >> 1;\n\tif (p <= mid)change(ls(k), l, mid, p, w, op);\n\telse change(rs(k), mid + 1, r, p, w, op);\n\tmaintain(k);\n}\ninl int query(int l, int r, int x, int w, bool op) {\n\tcntl = cntr = 0;\n\tfor (re i = l - 1; i; i -= lowbit(i)) tmpl[++cntl] = root[i];\n\tfor (re i = r; i; i -= lowbit(i))tmpr[++cntr] = root[i];\n\tl = 1, r = n;\n\tre mid; ll ans = 0;\n\twhile (l != r) {\n\t\tmid = l + r >> 1;\n\t\tif (x <= mid) {\n\t\t\tif (op) {\n\t\t\t\tfor (re i = 1; i <= cntl; i++)ans -= (t[rs(tmpl[i])].w + t[rs(tmpl[i])].cnt*w) % mod;\n\t\t\t\tfor (re i = 1; i <= cntr; i++)ans += (t[rs(tmpr[i])].w + t[rs(tmpr[i])].cnt*w) % mod;\n\t\t\t}\n\t\t\tfor (re i = 1; i <= cntl; i++)tmpl[i] = ls(tmpl[i]);\n\t\t\tfor (re i = 1; i <= cntr; i++)tmpr[i] = ls(tmpr[i]);\n\t\t\tr = mid;\n\t\t}\n\t\telse {\n\t\t\tif (!op) {\n\t\t\t\tfor (re i = 1; i <= cntl; i++)ans -= (t[ls(tmpl[i])].w + t[ls(tmpl[i])].cnt*w) % mod;\n\t\t\t\tfor (re i = 1; i <= cntr; i++)ans += (t[ls(tmpr[i])].w + t[ls(tmpr[i])].cnt*w) % mod;\n\t\t\t}\n\t\t\tfor (re i = 1; i <= cntl; i++)tmpl[i] = rs(tmpl[i]);\n\t\t\tfor (re i = 1; i <= cntr; i++)tmpr[i] = rs(tmpr[i]);\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn (ans%mod + mod) % mod;\n}\nsigned main() {\n\tn = read<int>();\n\tre m = read<int>(), x, y, f, g;\n\tll ans = 0;\n\tfor (re i = 1; i <= n; i++) {\n\t\tpos[i] = read<int>(), a[i] = read<int>();\n\t\tans += query(1, i - 1, pos[i], a[i], 1);\n\t\tfor (re j = i; j <= n; j += lowbit(j)) change(root[j], 1, n, pos[i], a[i], 1);\n\t}\n\tans = (ans%mod + mod) % mod;\n\twhile (m--) {\n\t\tx = read<int>(), y = read<int>(), f = x, g = y, x = pos[x], y = pos[y];\n\t\tif (x == y) {\n\t\t\twriteln(ans);\n\t\t\tcontinue;\n\t\t}\n\t\tans -= query(1, f - 1, x, a[f], 1) + query(f + 1, n, x, a[f], 0);\n\t\tans -= query(1, g - 1, y, a[g], 1) + query(g + 1, n, y, a[g], 0);\n\t\tfor (re i = f; i <= n; i += lowbit(i))change(root[i], 1, n, x, -a[f], -1);\n\t\tfor (re i = g; i <= n; i += lowbit(i))change(root[i], 1, n, y, -a[g], -1);\n\t\tswap(pos[f], pos[g]), swap(x, y), swap(a[f], a[g]);\n\t\tfor (re i = f; i <= n; i += lowbit(i))change(root[i], 1, n, x, a[f], 1);\n\t\tfor (re i = g; i <= n; i += lowbit(i))change(root[i], 1, n, y, a[g], 1);\n\t\tans += query(1, f - 1, x, a[f], 1) + query(f + 1, n, x, a[f], 0);\n\t\tans += query(1, g - 1, y, a[g], 1) + query(g + 1, n, y, a[g], 0);\n\t\tans -= ((f > g && x < y) || (f < g && x > y))*(a[f] + a[g]);\n\t\tans += ((f > g && x > y) || (f < g && x < y))*(a[f] + a[g]);\n\t\tans = (ans%mod + mod) % mod;\n\t\twriteln(ans);\n\t}\n}\n```\n\n",
        "postTime": 1561452493,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P3759 [TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458"
    },
    {
        "content": "\u65e0\u6cd5\u53c2\u8003\u7f51\u4e0a\u7684\u4f17\u591a\u9898\u89e3.\n\n\u53ea\u770b\u5230\u8fc7\u5206\u5757+BIT\u7684\u9898\u89e3,\u4f46\u662f\u672c\u9898\u89e3\u662f\u6811\u5957\u6811\n\n\u9898\u76ee\u53ef\u4ee5\u8f6c\u5316\u4e3a\n\n1.\u533a\u95f4\u8be2\u95ee\u5173\u952e\u5b57<x\u7684\u5143\u7d20\u4e2a\u6570,\u548c\u8fd9\u4e9b\u5143\u7d20\u7684v\u4e4b\u548c\n\n2.\u5355\u70b9\u4fee\u6539\n\n\n\u663e\u7136\u53ef\u4ee5\u6811\u5957\u6811\u7ef4\u62a4\n\n\u5916\u5c42\u533a\u95f4\u7ebf\u6bb5\u6811,\u5185\u5c42treap,treap\u7ef4\u62a4\u5b50\u6811size\u548cv\u7684\u548c\u5c31\u53ef\u4ee5\u4e86\n\n\n\u62b1\u6b49,\u4ee3\u7801\u6ca1\u6ce8\u91ca\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<ctype.h>\n#include<string.h>\nusing namespace std;\n#define ll long long\n#define rt register int\n#define reep(i,x,y) for(rt i=(x);i<(y);++i)\n#define per(i,x,y) for(rt i=(x);i>=(y);--i)\n#define rep(i,x,y) for(rt i=(x);i<=(y);++i)\n#define travel(i,x) for(rt i=h[x];i;i=pre[i])\nnamespace fast_IO {\n    inline char read() {\n//        return getchar();\n        static const int IN_LEN = 1000000;\n        static char buf[IN_LEN], *s, *t;\n        if (s == t) {\n            t = (s = buf) + fread(buf, 1, IN_LEN, stdin);\n            if (s == t) return -1;\n        }\n        return *s++;\n    }\n    template<class T>\n    inline void read(T &x) {\n        static bool iosig;\n        static char c;\n        for (iosig = false, c = read(); !isdigit(c); c = read()) {\n            if (c == '-') iosig = true;\n            if (c == -1) return;\n        }\n        for (x = 0; isdigit(c); c = read())\n            x = ((x + (x << 2)) << 1) + (c ^ '0');\n        if (iosig) x = -x;\n    }\n    const int OUT_LEN = 10000000;\n    char obuf[OUT_LEN], *ooh = obuf;\n    inline void print(char c) {\n        if (ooh == obuf + OUT_LEN) fwrite(obuf, 1, OUT_LEN, stdout), ooh = obuf;\n        *ooh++ = c;\n    }\n    template<class T>\n    inline void print(T x) {\n        static int buf[30], cnt;\n        if (x == 0) {\n            print('0');\n        }\n        else {\n            if (x < 0) print('-'), x = -x;\n            for (cnt = 0; x; x /= 10) buf[++cnt] = x % 10 + 48;\n            while (cnt) print((char)buf[cnt--]);\n        }\n    }\n    inline void flush() {\n        fwrite(obuf, 1, ooh - obuf, stdout);\n    }\n}\nusing namespace fast_IO;\nconst int N = 50005, Size = N * 60, P = 1000000007;\nint n, m, L, R, s1[N], root[N << 2];\nll ans, s2[N];\n#define pr pair<int,ll>\ninline pr operator +(const pr &lhs, const pr &rhs) {\n    return make_pair(lhs.first + rhs.first, lhs.second + rhs.second);\n}\nstruct st {\n    int val, sec;\n    inline st() { val = sec = 0; }\n    inline st(int v, int s) { val = v, sec = s; }\n    inline bool operator <(const st &rhs) const { return val < rhs.val || val == rhs.val && sec < rhs.sec; }\n    inline bool operator ==(const st &rhs) const { return val == rhs.val && sec == rhs.sec; }\n    inline bool operator >(const st &rhs) const { return val > rhs.val || val == rhs.val && sec > rhs.sec; }\n}b[N];\nnamespace treap {\n    int tot;\n    struct node {\n        int lson, rson, size, p;\n        ll ssec;\n        st val;\n    }a[Size];\n    inline void update(int x) {\n        a[x].size = a[a[x].lson].size + a[a[x].rson].size + 1;\n        a[x].ssec = a[a[x].lson].ssec + a[a[x].rson].ssec + a[x].val.sec;\n    }\n    inline void lrotate(int &x) {\n        int tmp = a[x].rson;\n        a[x].rson = a[tmp].lson, a[tmp].lson = x;\n        update(x), update(tmp);\n        x = tmp;\n    }\n    inline void rrotate(int &x) {\n        int tmp = a[x].lson;\n        a[x].lson = a[tmp].rson, a[tmp].rson = x;\n        update(x), update(tmp);\n        x = tmp;\n    }\n    void ins(int &x, st y) {\n        if (!x) {\n            x = ++tot;\n            a[x].val = y;\n            a[x].p = rand();\n        }\n        else if (y > a[x].val) {\n            ins(a[x].rson, y);\n            if (a[a[x].rson].p > a[x].p) lrotate(x);\n        }\n        else {\n            ins(a[x].lson, y);\n            if (a[a[x].lson].p > a[x].p) rrotate(x);\n        }\n        update(x);\n    }\n    void del(int &x, st y) {\n        if (!x) return;\n        if (y > a[x].val) del(a[x].rson, y);\n        else if (y < a[x].val) del(a[x].lson, y);\n        else if (!a[x].lson || !a[x].rson) x = a[x].rson|a[x].rson;\n        else if (a[a[x].lson].p > a[a[x].rson].p) {\n            rrotate(x);\n            del(a[x].rson, y);\n        }\n        else {\n            lrotate(x);\n            del(a[x].lson, y);\n        }\n        if (x) update(x);\n    }\n    pr Rank(int x, st y) {\n        if (!x) return make_pair(0, 0ll);\n        if (y < a[x].val) return Rank(a[x].lson, y);\n        else {\n            pr tmp = Rank(a[x].rson, y);\n            return tmp + make_pair(a[a[x].lson].size + 1, a[a[x].lson].ssec + a[x].val.sec);\n        }\n    }\n};\ntemplate<class T> inline void modify(T *f, int x, int y) {\n    for (; x <= n; x += x&-x) f[x] += y;\n}\ntemplate<class T> inline T sum(T *f, int x) {\n    T ass = 0;\n    for (; x; x ^= x&-x) ass += f[x];\n    return ass;\n}\ninline void calc_start() {\n    per(i, n, 1) {\n        ans += (ll)sum(s1, b[i].val)*b[i].sec + sum(s2, b[i].val);\n        modify(s1, b[i].val, 1), modify(s2, b[i].val, b[i].sec);\n    }\n}\nvoid build(int l, int r, int t) {\n    rep(i, l, r) treap::ins(root[t], b[i]);\n    if (l != r) {\n        int mid = l + r >> 1, k = t << 1;\n        build(l, mid, k), build(mid + 1, r, k | 1);\n    }\n}\npr query(int l, int r, int t, const st &k) {\n//    printf(\"query:%d %d %d %d\\n\", l, r, k.val, treap::a[root[t]].ssec);\n    if (L <= l && r <= R) return treap::Rank(root[t], k);\n    int mid = l + r >> 1;\n    pr ass = make_pair(0, 0ll);\n    if (L <= mid) ass = ass + query(l, mid, t << 1, k);\n    if (R > mid) ass = ass + query(mid + 1, r, t << 1 | 1, k);\n    return ass;\n}\nvoid change(int l, int r, int t, int pos, int ppos) {\n    if(l>=L || r<=R) treap::del(root[t], b[pos]), treap::ins(root[t], b[ppos]);\n    if (l != r) {\n        int mid = l + r >> 1;\n        if (pos <= mid) change(l, mid, t << 1, pos, ppos);\n        else change(mid + 1, r, t << 1 | 1, pos, ppos);\n    }\n}\nint main() {\n    read(n), read(m);\n    rep(i, 1, n) read(b[i].val), read(b[i].sec);\n    calc_start();\n    build(1, n, 1);\n    //printf(\"------------------%d\\n\", treap::Rank(root[1], st(2, 2)).second);\n    memset(s2, 0, sizeof s2);\n    rep(i, 1, n) modify(s2, i, b[i].sec);\n//    printf(\"[%lld]\", ans);\n    while (m--) {\n        static int x, y;\n        read(x), read(y);\n        if(x==y){\n            print(ans%P), print('\\n');\n            continue;\n        }\n        if (x > y) swap(x, y);\n        L = x + 1, R = y - 1;\n        if (L <= R) {\n            pr tmp = query(1, n, 1, b[x]);\n            ans += (ll)(R - L + 1 - tmp.first - tmp.first)*b[x].sec + sum(s2, R) - sum(s2, L - 1) - tmp.second - tmp.second;\n//            printf(\">>>%d %lld     ans=%lld\\n\", tmp.first, tmp.second, ans);\n            tmp = query(1, n, 1, b[y]);\n            ans -= (ll)(R - L + 1 - tmp.first - tmp.first)*b[y].sec + sum(s2, R) - sum(s2, L - 1) - tmp.second - tmp.second;\n//            printf(\">>>%d %lld     ans=%lld\\n\", tmp.first, tmp.second, ans);\n        }\n        if (b[x].val < b[y].val) ans += b[x].sec + b[y].sec; else ans -= b[x].sec + b[y].sec;\n        modify(s2, x, b[y].sec - b[x].sec), modify(s2, y, b[x].sec - b[y].sec);\n        change(1, n, 1, x, y), change(1, n, 1, y, x);\n        swap(b[x], b[y]);\n        print(ans%P), print('\\n');\n    }\n    return flush(), 0;\n}\n```",
        "postTime": 1515415079,
        "uid": 21856,
        "name": "Cekavis",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "**\u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22trie**\uff0c\u6240\u4ee5\u8d21\u732e\u4e00\u4efd trie \u6765\u5b9e\u73b0\u7684\u5e26\u4fee\u4e3b\u5e2d\u6811\u3002trie \u76f8\u6bd4\u4e8e\u6743\u503c\u7ebf\u6bb5\u6811\u4e3b\u8981\u4f18\u70b9\u5728\u4e8e\u5bf9\u4e8e\u4e00\u4e9b\u9898\u76ee\u4e0d\u7528\u79bb\u6563\u5316\uff0c\u8fd8\u6709\u81ea\u5e26\u975e\u9012\u5f52\u52a8\u6001\u5f00\u70b9\u3002\n\n---\n\n\u52a8\u6001\u5e26\u6743\u9006\u5e8f\u5bf9\uff08\uff1f\uff09\uff0c\u548c\u52a8\u6001\u9006\u5e8f\u5bf9\u6ca1\u5565\u533a\u522b\u3002\u539f\u672c\u4e00\u4e2a\u6570\u7684\u8d21\u732e\u662f $1$\uff0c\u73b0\u5728\u8d21\u732e\u53d8\u6210\u4e86 $y_i$ \u7f62\u4e86\u3002\u600e\u4e48\u6539\u5462\uff1f\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a sz\uff0c\u8bb0\u5f55\u9875\u6570\u548c\uff0c\u7136\u540e\u518d\u7ef4\u62a4\u4e00\u4e2a cnt\uff0c\u8bb0\u5f55\u4e2a\u6570\u3002\u90a3\u4e48\u5e26\u6743\u9006\u5e8f\u5bf9\u5373\u4e3a $\\sum sz+\\sum cnt\\times y_i$\uff0c\u4e00\u8def\u4e0a\u7edf\u8ba1\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u6bcf\u6b21 query \u8981\u4f20\u5165 ```y```\uff0c\u7136\u540e\u662f ```ans+=(sz+cnt*y)``` \u800c\u4e0d\u662f ```ans+=sz``` \u5373\u53ef\u3002\u8fd8\u6709\u4e00\u4e9b\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff0c\u6bd4\u5982\u4e0d\u4fdd\u8bc1 $x_j\\le y_j$\uff0c\u6240\u4ee5\u9700\u8981\u7279\u5224\u4e00\u4e0b\u3002\n\n\uff08\u5361\u4e86\u7a7a\u95f4\uff0c\u4ee3\u7801\u4e0d\u5927\u597d\u770b\uff09\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst ll N=5e5+9;\n\nstruct TRIE {\n\tint ch[N*18][2],cnt[N*18],root[N*18]; int tot; \n\tll sz[N*18];\n\tvoid ins(int val,int rt,int k,int u=0) {\n\t\tif(!root[rt]) root[rt]=++tot;\n\t\tu=root[rt], sz[u]+=k, cnt[u]++;\n\t\tfor(int h=17;h>=0;h--) {\n\t\t\tbool p=val&(1ll<<h);\n\t\t\tif(!ch[u][p]) ch[u][p]=++tot;\n\t\t\tu=ch[u][p]; sz[u]+=k; cnt[u]++;\n\t\t}\n\t}\n\tvoid del(int val,int rt,int k,int u=0) {\n\t\tu=root[rt]; sz[u]-=k; cnt[u]--;\n\t\tfor(int h=17;h>=0;h--) {\n\t\t\tbool p=val&(1ll<<h);\n\t\t\tif(!ch[u][p]) return;\n\t\t\tu=ch[u][p]; sz[u]-=k; cnt[u]--;\n\t\t}\n\t}\n\tll rank_small(int val,vector<int>c1,vector<int>c2,int z,ll ans=0) {\n\t\tint len1=c1.size(); \n\t\tfor(int i=0;i<len1;i++) {\n\t\t\tfor(int h=17;h>=0;h--) {\n\t\t\t\tbool p=val&(1ll<<h);\n\t\t\t\tif(p&&ch[c1[i]][0]) ans-=sz[ch[c1[i]][0]],ans-=1ll*z*cnt[ch[c1[i]][0]];\n\t\t\t\tc1[i]=ch[c1[i]][p];\n\t\t\t\tif(!c1[i]) break;\n\t\t\t}\n\t\t}\n\t\tint len2=c2.size();\n\t\tfor(int i=0;i<len2;i++) {\n\t\t\tfor(int h=17;h>=0;h--) {\n\t\t\t\tbool p=val&(1ll<<h);\n\t\t\t\tif(p&&ch[c2[i]][0]) ans+=sz[ch[c2[i]][0]],ans+=1ll*z*cnt[ch[c2[i]][0]];\n\t\t\t\tc2[i]=ch[c2[i]][p];\n\t\t\t\tif(!c2[i]) break;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\tll rank_large(int val,vector<int>c1,vector<int>c2,int z,ll ans=0) {\n\t\tint len1=c1.size();\n\t\tfor(ll i=0;i<len1;i++) {\n\t\t\tfor(ll h=17;h>=0;h--) {\n\t\t\t\tbool p=val&(1ll<<h);\n\t\t\t\tif((!p)&&ch[c1[i]][1]) ans-=sz[ch[c1[i]][1]],ans-=1ll*z*cnt[ch[c1[i]][1]];\n\t\t\t\tc1[i]=ch[c1[i]][p];\n\t\t\t\tif(!c1[i]) break;\n\t\t\t}\n\t\t}\n\t\tint len2=c2.size();\n\t\tfor(int i=0;i<len2;i++) {\n\t\t\tfor(int h=17;h>=0;h--) {\n\t\t\t\tbool p=val&(1ll<<h);\n\t\t\t\tif((!p)&&ch[c2[i]][1]) ans+=sz[ch[c2[i]][1]],ans+=1ll*z*cnt[ch[c2[i]][1]];\n\t\t\t\tc2[i]=ch[c2[i]][p];\n\t\t\t\tif(!c2[i]) break;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}tr;\n\nint n,m,a[N],b[N];\n\n#define lb(i) (i&(-i))\nvoid add(ll x,ll a,ll k) {for(;x<=n;x+=lb(x)) tr.ins(a,x,k);}\nvoid rem(ll x,ll a,ll k) {for(;x<=n;x+=lb(x)) tr.del(a,x,k);}\nll query_small(int x,int y,int k,int z) {\n\tif(x>y) return 0; vector<int>c1,c2;\n\tfor(int j=x-1;j>=1;j-=lb(j)) c1.push_back(tr.root[j]);\n\tfor(int j=y;j>=1;j-=lb(j)) c2.push_back(tr.root[j]);\n\treturn tr.rank_small(k,c1,c2,z);\n}\nll query_large(int x,int y,int k,int z) {\n\tif(x>y) return 0; vector<int>c1,c2;\n\tfor(ll j=x-1;j>=1;j-=lb(j)) c1.push_back(tr.root[j]);\n\tfor(ll j=y;j>=1;j-=lb(j)) c2.push_back(tr.root[j]);\n\treturn tr.rank_large(k,c1,c2,z);\n}\n\nsigned main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d%d\",&a[i],&b[i]), add(i,a[i],b[i]);\n\tll ans=0;\n\tfor(int i=1;i<=n;i++) ans+=query_small(i+1,n,a[i],b[i]); \n\tfor(int i=1,x,y;i<=m;i++) {\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(x>y) swap(x,y);\n\t\tif(x==y) {printf(\"%lld\\n\",ans);continue;}\n\t\tif(x+1!=y) {\n\t\t\tans-=query_large(1,y-1,a[y],b[y])-query_large(1,x,a[y],b[y]),\n\t\t\tans-=query_small(1,y-1,a[x],b[x])-query_small(1,x,a[x],b[x]),\n\t\t\tans+=query_small(1,y-1,a[y],b[y])-query_small(1,x,a[y],b[y]),\n\t\t\tans+=query_large(1,y-1,a[x],b[x])-query_large(1,x,a[x],b[x]);\n\t\t}\n\t\tans+=(a[x]<a[y]? b[x]+b[y] : -b[x]-b[y]);\n\t\tans=(ans%1000000007+1000000007)%1000000007;\n\t\tprintf(\"%lld\\n\",ans);\n\t\trem(x,a[x],b[x]), rem(y,a[y],b[y]), add(x,a[y],b[y]), add(y,a[x],b[x]),\n\t\tswap(a[x],a[y]), swap(b[x],b[y]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1596619531,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    },
    {
        "content": "# \u7b97\u6cd5\uff1a \u6811\u72b6\u6570\u7ec4\u5957splay\n\n\u53d1\u73b0\u6b64\u9898\u8fd8\u6ca1\u6709BIT\u5957\u5e73\u8861\u6811\u5199\u6cd5\u7684\u9898\u89e3\uff08\u5176\u5b9e\u662f\u6211\u8fd8\u4e0d\u4f1a\u5927\u4f6c\u7528\u7684\u5206\u5757\u7b49\u2026\u2026\uff09\uff0c\u672c\u7bc7\u6587\u7ae0\u5728\u6b64\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u79cd\u5947\u8469\u53c8\u7a0d\u6162\u7684\u5199\u6cd5\n\n\u7b2c\u4e00\u6b65\uff0c\u5f04\u6e05\u9898\u610f\u3002\n- **\u9898\u610f\u7ed9\u51fa\u7684\u4e66\u521d\u59cb\u72b6\u6001\u662f\u6309\u7ed9\u51fa\u987a\u5e8f\uff08\u5373\u7f16\u53f7\uff09\u6392\u5217\uff0c\u800c\u975e\u6309a[i]\u6392\u5217**\n- **\u4ea4\u6362\u64cd\u4f5c\u662f\u4ea4\u6362\u5f53\u524d\u6392\u5217\u987a\u5e8f\u4e0b\u7684\u7b2cx\u672c\u548c\u7b2cy\u672c\uff0c\u800c\u975e\u7f16\u53f7\u4e3ax\u548c\u7f16\u53f7\u4e3ay\uff01**\n\n\u7b2c\u4e8c\u6b65\uff0c\u7406\u6e05\u601d\u8def\u3002\n\n\u4ea4\u6362\u7b2cx\u548cy\u4e24\u672c\u4e66\u540e\uff0c\u53ea\u5bf9x~y\u533a\u95f4\u5185\u7684\u9006\u5e8f\u5bf9\u4ea7\u751f\u5f71\u54cd\u3002\n\n\u5982\u679c\u53ea\u770b\u9006\u5e8f\u5bf9\u6570\u91cf\uff0c\u628ax\u8c03\u5230y\u7684\u8d21\u732e\u4e3a\uff1ax+1~y-1\u5185\u6bd4x\u5927\u7684\u4e2a\u6570-x+1~y-1\u5185\u6bd4x\u5c0f\u7684\u4e2a\u6570\uff0cy\u8c03\u5230x\u540c\u7406\u4e5f\u53ef\u4ee5\u63a8\u51fa\n\n\u4f46\u9898\u76ee\u8981\u6c42\u7684\u662f\u6240\u6709\u9006\u5e8f\u5bf9\u7684\u4e24\u672c\u4e66\u7684\u539a\u5ea6\u548c\uff0c\u4e8e\u662f\u8ba9splay\u540c\u65f6\u7ef4\u62a4\u4e2a\u6570\u548c\u6743\u503c\u548c\u5c31\u53ef\u4ee5\u4e86\n\n\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2\uff0c\u6211\u53ea\u5199\u4e86splay\u67e5\u8be2\u533a\u95f4\u5185\u6bd4v\u5c0f\u7684\u7b54\u6848\uff0c\u800c\u6bd4v\u5927\u7684\u7b54\u6848\u53ef\u4ee5\u5206\u522b\u7528\u603b\u6570\u51cf\u53bb\u6bd4v\u5c0f\u7684\u7b54\u6848\u5f97\u51fa\uff0c\u5176\u4e2d\u603b\u7684\u6743\u503c\u548c\u5c31\u662f\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u518d\u5f00\u4e00\u4e2a\u8f85\u52a9BIT\u7ef4\u62a4\n\n\u6700\u540e\uff0c\u6ce8\u610f\u7b54\u6848\u53d6\u6a21\u8fc7\u7a0b\u4e2d\u7684\u7ec6\u8282\uff0c\u4ee5\u53casplay\u7a7a\u95f4\u4e0d\u4ec5\u8981\u8003\u8651\u521d\u59cb\u5927\u5c0f\uff0c\u8fd8\u8981\u8003\u8651\u540e\u7eed\u4fee\u6539\u5e26\u6765\u7684\u5f00\u9500\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\uff0c\u4ee3\u7801\u4e2d\u6709\u5c11\u91cf\u6ce8\u91ca\uff0c\u4ee5\u9632\u7b14\u8005\u7801\u98ce\u8fc7\u4e8e\u5947\u8469\uff0c\u5bfc\u81f4\u4eb2\u7231\u7684\u8bfb\u8005\u4eec\u65e0\u6cd5\u7406\u89e3\n\n------------\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define lb(x) (x&(-x))\n#define mid ((l)+(r)>>(1))\n#define pil pair<int,long long>\n#define mkp make_pair\n#define fst first\n#define snd second\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\nusing namespace std;\nvoid read(int &x)\n{\n\tchar c=getchar();x=0;\n\twhile(!isdigit(c))c=getchar();\n\twhile(isdigit(c))x=x*10+c-'0',c=getchar();\n}\nvoid read(ll &x)\n{\n\tchar c=getchar();x=0;\n\twhile(!isdigit(c))c=getchar();\n\twhile(isdigit(c))x=x*10+c-'0',c=getchar();\n}\nconst int N=50005;\nconst ll mod=1e9+7;\nint n,m;\nll tot;\n//\u4e66\u7ed3\u6784\u4f53\uff0cv\u8868\u793a\u6392\u540d\uff0cw\u8868\u793a\u9875\u6570\nstruct book{\n\tint v;ll w;\n\tbool operator<(const book &a)const{return v<a.v;}\n}bks[N]; \n//\u8f85\u52a9\u6811\u72b6\u6570\u7ec4\uff0cpre1\u548cpre2\u7528\u4e8e\u9884\u5904\u7406\uff0cbit\u7528\u4e8e\u4e4b\u540e\u7684\u533a\u95f4\u67e5\u8be2 \nstruct BIT\n{\n\tll sum[N];\n\tvoid add(int x,int v){for(;x<=n;x+=lb(x))sum[x]+=v;}\n\tll ask(int x){ll ans=0;for(;x;x-=lb(x))ans=(ans+sum[x])%mod;return ans;}\n}bit,pre1,pre2;\n//\u9884\u5904\u7406\u51fa\u521d\u59cb\u503c \nvoid prepro()\n{\n\tfor(int i=n;i;i--)\n\t{\n\t\ttot=(tot+pre1.ask(bks[i].v-1)+pre2.ask(bks[i].v-1)*bks[i].w)%mod;\n\t\tpre1.add(bks[i].v,bks[i].w);\n\t\tpre2.add(bks[i].v,1);\n\t}\n}\n//pair<int,long long>\u4e3a\u67e5\u8be2\u8fd4\u56de\u7684\u7b54\u6848\uff0c\u7b2c\u4e00\u7ef4\u662f\u4e2a\u6570\uff0c\u7b2c\u4e8c\u7ef4\u662f\u6743\u503c\u548c \npil operator+(pil a,pil b){return mkp((a.fst+b.fst)%mod,(a.snd+b.snd)%mod);}\npil operator-(pil a,pil b){return mkp(((a.fst-b.fst)%mod+mod)%mod,((a.snd-b.snd)%mod+mod)%mod);}\n//\u5185\u5c42splay \nstruct splay_forest\n{\n\t//cnt[x]\u8868\u793a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\uff0cval[x]\u8868\u793ax\u8282\u70b9\u521d\u59cb\u4f4d\u7f6e\u6392\u540d \n\tint rt[N],totsz,val[N<<5],f[N<<5],s[N<<5][2],cnt[N<<5];\n\t//w[x]\u8868\u793ax\u8282\u70b9\u6240\u4ee3\u8868\u4e66\u7684\u9875\u6570\uff0csz[x]\u8868\u793a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u5185w[x]\u7684\u548c \n\tll w[N<<5],sz[N<<5];\n\tvoid clear(int &x){val[x]=f[x]=s[x][0]=s[x][1]=w[x]=sz[x]=cnt[x]=0;x=0;}\n\tbool pdson(int x){return s[f[x]][1]==x;}\n\tvoid update(int x){sz[x]=sz[s[x][0]]+sz[s[x][1]]+w[x];cnt[x]=cnt[s[x][0]]+cnt[s[x][1]]+1;}\n\tvoid build(int &x,int fa,book *a,int l,int r)\n\t{\n\t\tx=++totsz;\n\t\tf[x]=fa;\n\t\tval[x]=a[mid].v;\n\t\tw[x]=a[mid].w;\n\t\tif(l<mid)build(s[x][0],x,a,l,mid-1);\n\t\tif(r>mid)build(s[x][1],x,a,mid+1,r);\n\t\tupdate(x);\n\t}\n\tvoid rotate(int x)\n\t{\n\t\tint fa=f[x],gfa=f[fa],d=pdson(x);\n\t\ts[fa][d]=s[x][d^1];f[s[x][d^1]]=fa;\n\t\ts[x][d^1]=fa;f[fa]=x;\n\t\tf[x]=gfa;\n\t\tif(gfa)s[gfa][fa==s[gfa][1]]=x;\n\t\tupdate(fa);update(x);\n\t}\n\tvoid splay(int id,int x)\n\t{\n\t\tfor(int fa;(fa=f[x])!=0;rotate(x))\n\t\t\tif(f[fa])rotate((pdson(fa)==pdson(x)?fa:x));\n\t\trt[id]=x;\n\t}\n\tint find(int id,int v)\n\t{\n\t\tint now=rt[id];\n\t\twhile(now)\n\t\t{\n\t\t\tif(val[now]==v)break;\n\t\t\tnow=s[now][v>val[now]];\n\t\t}\n\t\tsplay(id,now);\n\t\treturn now;\n\t}\n\tint pre(int id)\n\t{\n\t\tint now=s[rt[id]][0];\n\t\twhile(s[now][1])now=s[now][1];\n\t\treturn now;\n\t}\n\tint nxt(int id)\n\t{\n\t\tint now=s[rt[id]][1];\n\t\twhile(s[now][0])now=s[now][0];\n\t\treturn now;\n\t}\n\tvoid insert(int id,int vl,ll wt)\n\t{\n\t\tif(!rt[id])\n\t\t{\n\t\t\trt[id]=++totsz;\n\t\t\tval[rt[id]]=vl;\n\t\t\tw[rt[id]]=wt;\n\t\t\tupdate(rt[id]);\n\t\t\treturn;\n\t\t}\n\t\tint now=rt[id],fa=0;\n\t\twhile(1)\n\t\t{\n\t\t\tfa=now;now=s[now][vl>val[now]];\n\t\t\tif(!now)\n\t\t\t{\n\t\t\t\tnow=++totsz;\n\t\t\t\tf[now]=fa;\n\t\t\t\ts[fa][vl>val[fa]]=now;\n\t\t\t\tval[now]=vl;\n\t\t\t\tw[now]=wt;\n\t\t\t\tupdate(now);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(totsz>=(N<<5))exit(0);\n\t\tsplay(id,now);\n\t}\n\tvoid erase(int id,int v)\n\t{\n\t\tint x=find(id,v);\n\t\tif(!s[x][0]&&!s[x][1])return clear(rt[id]);\n\t\tif(!s[x][0]||!s[x][1])\n\t\t{\n\t\t\trt[id]=s[x][0]?s[x][0]:s[x][1];\n\t\t\tf[rt[id]]=0;\n\t\t\treturn clear(x);\n\t\t}\n\t\tint prex=pre(id);\n\t\tsplay(id,prex);\n\t\ts[prex][1]=s[x][1];f[s[x][1]]=prex;\n\t\tclear(x);\n\t\tupdate(rt[id]);\n\t}\n\tpil query(int id,int v)\n\t{\n\t\tint now=rt[id];pil ans=mkp(0,0);\n\t\twhile(now)\n\t\t{\n\t\t\tif(v<val[now])now=s[now][0];\n\t\t\telse if(v==val[now])return ans+mkp(cnt[s[now][0]],sz[s[now][0]]);\n\t\t\telse ans=ans+mkp(cnt[s[now][0]]+1,sz[s[now][0]]+w[now]),now=s[now][1];\n\t\t}\n\t\treturn ans;\n\t}\n}tr;\nint pos[N],od[N];\nbook cur[N];\n//\u5916\u5c42\u6811\u72b6\u6570\u7ec4 \nvoid build()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=i-lb(i)+1;j<=i;j++)cur[j]=bks[j];\n\t\tsort(cur+i-lb(i)+1,cur+i+1);\n\t\ttr.build(tr.rt[i],0,cur,i-lb(i)+1,i);\n\t}\n}\nvoid exchange(int qx,int qy)\n{\n\tif(qx==qy)return;\n\tif(pos[qx]>pos[qy])swap(qx,qy);\n\tbit.add(pos[qx],bks[qy].w-bks[qx].w);\n\tbit.add(pos[qy],bks[qx].w-bks[qy].w);\n\tfor(int i=pos[qx];i<pos[qy];i+=lb(i))\n\t{\n\t\ttr.erase(i,bks[qx].v);\n\t\ttr.insert(i,bks[qy].v,bks[qy].w);\n\t}\n\tfor(int i=pos[qy];i<=n;i+=lb(i))if(i-lb(i)>=pos[qx])\n\t{\n\t\ttr.erase(i,bks[qy].v);\n\t\ttr.insert(i,bks[qx].v,bks[qx].w);\n\t}\n\tswap(pos[qx],pos[qy]);\n}\n//\u524d\u7f00\u67e5\u8be2 \npil ask(int x,int v)\n{\n\tpil ans;\n\tfor(;x;x-=lb(x))ans=ans+tr.query(x,v);\n\treturn ans;\n}\n//\u533a\u95f4\u67e5\u8be2 \nll query(int qx,int qy)\n{\n\tif(qx==qy)return 0;\n\tif(pos[qx]>pos[qy])swap(qx,qy);\n\tif(pos[qy]-pos[qx]==1)\n\t\treturn bks[qx].v<bks[qy].v?bks[qx].w+bks[qy].w:mod-bks[qx].w-bks[qy].w;\n\tll sum=bit.ask(pos[qy]-1)-bit.ask(pos[qx]);\n\tint len=pos[qy]-pos[qx]-1;\n\tpil ansy=ask(pos[qy]-1,bks[qy].v)-ask(pos[qx],bks[qy].v);\n\tpil ansx=ask(pos[qy]-1,bks[qx].v)-ask(pos[qx],bks[qx].v);\n\tll ans=sum-2*ansx.snd%mod+(len-2*ansx.fst)*bks[qx].w%mod;\n\tans+=2*ansy.snd%mod-sum+(2*ansy.fst-len)*bks[qy].w%mod;\n\tif(bks[qx].v<bks[qy].v)ans+=bks[qx].w+bks[qy].w;\n\telse ans-=bks[qx].w+bks[qy].w;\n\tans=(ans%mod+mod)%mod;\n\treturn ans;\n}\nint ax,ay;\nint main(){\n\tread(n);read(m);\n\tfor(int i=1;i<=n;i++)read(bks[i].v),read(bks[i].w);\n\tprepro();\n\tfor(int i=1;i<=n;i++)pos[i]=i,od[i]=i;\n\tbuild();\n\tfor(int i=1;i<=n;i++)bit.add(pos[i],bks[i].w);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tread(ax);read(ay);\n\t\ttot=(tot+query(od[ax],od[ay]))%mod;\n\t\tprintf(\"%d\\n\",tot);\n\t\texchange(od[ax],od[ay]);\n\t\tswap(od[ax],od[ay]);\n\t}\n\treturn 0;\n}\n```\n----------------\n\n\u6b64\u4ee3\u7801\u53ef\u80fd\u56e0\u4e3a\u5e38\u6570\u5de8\u5927\uff0c\u624b\u52a8\u5438\u4e86\u81ed\u6c27\u624d\u8fc7\n\n\u56e0\u6b64\uff0c\u4ec5\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u65b0\u7684\u601d\u8def\uff0c\u65e8\u5728\u5c55\u793a\u5bf9\u4e8e\u540c\u4e00\u9053\u6811\u5957\u6811\uff0c\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u5e0c\u671b\u8bfb\u8005\u4eec\u4ee5\u540e\u5728\u505a\u9898\u8fc7\u7a0b\u4e2d\u4e5f\u8981\u653e\u5f00\u601d\u8def\uff0c\u4e0d\u8fc7\u6709\u80fd\u529b\u7684\u8bdd\u6700\u540e\u8981\u9009\u62e9\u6700\u4f18\u7684\u65b9\u6848\u89e3\u51b3\n",
        "postTime": 1577846467,
        "uid": 68203,
        "name": "wyt2357",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3759 \u3010[TJOI2017]\u4e0d\u52e4\u52b3\u7684\u56fe\u4e66\u7ba1\u7406\u5458\u3011"
    }
]