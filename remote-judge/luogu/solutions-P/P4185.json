[
    {
        "content": "\u9898\u76ee\u5e76\u4e0d\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be2\u95ee\u6309 $k$ \u7684\u503c\u964d\u5e8f\u6392\u5e8f\u540e\u79bb\u7ebf\u89e3\u51b3\u672c\u9898\u3002\n\n\u6211\u4eec\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u5c06\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8e\u7ed9\u5b9a\u7684\u8fb9\u6743 $k$ \u7684\u8fb9\u52a0\u5165\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $v$\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u6570\u4e3a\u5176\u6240\u5728\u8fde\u901a\u5757\u5927\u5c0f $-1$\uff08\u4e0d\u5305\u62ec\u8fd9\u4e2a\u70b9\u672c\u8eab\uff09\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct edge\n{\n int u,v,w;\n}e[100005];\nstruct query\n{\n int k,v,id;\n}a[100005];\nint fa[100005],siz[100005],ans[100005];\nbool cmp1(const edge&a,const edge&b)\n{\n return a.w>b.w;\n}\nbool cmp2(const query&a,const query&b)\n{\n return a.k>b.k;\n}\nvoid unionn(int x,int y)\n{\n if(x==y)return;\n fa[y]=x;\n siz[x]+=siz[y];\n}\nint find(int x)\n{\n return fa[x]==x?x:fa[x]=find(fa[x]);\n}\nint main()\n{\n int n,q;\n scanf(\"%d%d\",&n,&q);\n for(int i=1;i<=n;i++)\n  fa[i]=i,siz[i]=1;\n for(int i=1;i<n;i++)\n  scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n for(int i=1;i<=q;i++)\n {\n  scanf(\"%d%d\",&a[i].k,&a[i].v);\n  a[i].id=i;\n }\n sort(e+1,e+n,cmp1);\n sort(a+1,a+q+1,cmp2);\n int cur=1;\n for(int i=1;i<=q;i++)\n {\n  while(cur<=n&&a[i].k<=e[cur].w)\n  {\n   unionn(find(e[cur].u),find(e[cur].v));\n   cur++;\n  }\n  ans[a[i].id]=siz[find(a[i].v)]-1;\n }\n for(int i=1;i<=q;i++)\n  printf(\"%d\\n\",ans[i]);\n return 0;\n}\n```\n",
        "postTime": 1581829397,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4185 \u3010[USACO18JAN]MooTube G\u3011"
    },
    {
        "content": "\u54c7\u6ca1\u60f3\u5230\u6211\u4e5f\u80fd\u505a\u63d0\u9ad8+\u7684\u9898\u597d\u5f00\u5fc3\n\n\u4e00\u5f00\u59cb\u5f88\u7b80\u5355\u7c97\u66b4\u5730\u60f3\u5230\u4e86\u90bb\u63a5\u77e9\u9635\uff0c\u505a\u523010\u5206\u624d\u53d1\u89c9\u8fd9\u4e48\u9ad8\u5927\u4e0a\u7684\u9898\u76ee\u4f60\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u505a\u662f\u4e0d\u662f\u5927\u50bbX\n\n\u770b\u4e86\u5927\u725b elijahqi \u7684\u9898\u89e3\u5c31\u60f3\u660e\u767d\u4e86\u539f\u6765\u662f\u5e76\u67e5\u96c6\u554a~~\u54c8\u54c8\u54c8~~\n\n\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u5c31\u4f60\u4e86\u54c8\u54c8\n\n\u601d\u8def\uff1a\n1. \u5728\u5e76\u67e5\u96c6\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u70b9\u6599\uff0c\u5e76\u67e5\u96c6\u539f\u6765\u662f\u6709\u8fb9\u5c31\u628a\u5b83\u8fde\u7684\u4e24\u4e2a\u70b9\u5408\u5e76\u561b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5427\u3001\u52a0\u4e00\u4e2a\u6761\u4ef6\uff0c\u8981>=k\u5373\u7b26\u5408\u6761\u4ef6\u7684\u8fb9\u624d\u7ed9\u5b83\u5408\u5e76\uff0c\u8fd9\u6837\u7684\u8bdd\u8fd9\u4e2a\u8fde\u901a\u5757\u4e2d\u6240\u6709\u7684\u70b9\u90fd\u7b26\u5408\u6761\u4ef6\u5566\n2. \u4f46\u662f\u5982\u679c\u6bcf\u6b21\u8be2\u95ee\u90fd\u91cd\u65b0\u5408\u5e76\u4e00\u6b21\u7684\u8bdd\u4f1a\u8d85\u65f6\u554a\u5b69\u7eb8\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u5230\u4e24\u4e2a\u5feb\u6392\uff0c\u628a\u6bcf\u6761\u8fb9\u4ece\u5927\u5230\u5c0f\u6392 \uff0c\u518d\u628a \u8be2\u95ee\u7684k\u4ece\u5927\u5230\u5c0f\u6392\uff0c\u5148\u505a\u6700\u5927\u7684k\uff0c\u628a\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u5408\u5e76\u540e\uff08\u4e0d\u8981\u5fd8\u8bb0\u7edf\u8ba1\u7ed3\u70b9\u6570\uff0c\u8fd9\u4e2a\u624d\u662f\u6211\u4eec\u60f3\u8981\u7684\u561b\uff09\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2ak\u80af\u5b9a\u6bd4\u8fd9\u4e2a\u5c0f\u5566\uff08\u6392\u5e8f\u4e86\u561b\uff09\uff0c\u90a3\u4e48\u7b26\u5408\u5927k\u7684\u70b9\u80af\u5b9a\u7b26\u5408\u5c0fk\u7684\u70b9\u5566\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u518d\u91cd\u590d\u5408\u5e76\u5566\uff0c\u505a\u5230\u7b2ci\u4e2ak\uff0c\u8fd9\u4e2a\u8fde\u901a\u5757\u4e2d\u7684\u7ed3\u70b9\u5c31\u7b26\u5408\u6761\u4ef6\u5566  ~~\u963f\u62c9\u62c9\u62c9~~\n\nemmm\u597d\u50cf\u5c31\u8fd9\u4e9b\u628a\uff0c\u6211\u80fd\u7406\u89e3\u7684\u60f3\u5fc5\u5927\u795e\u4eec\u90fd\u80fd\u7406\u89e3\u563b\u563b\n\n\u5982\u679c\u6211\u8bf4\u5f97\u6709\u4ec0\u4e48\u4e0d\u5bf9\u6216\u9057\u6f0f\u7684\u6b22\u8fce\u8bc4\u8bba\u54e6\n\n\u4e0dBB\u4e86\u4e0a\u9898\u89e3\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint j=1,n,q,number[110000],father[110000],ans[110000];\nstruct kind{\n\tint start;\n\tint end;\n\tint w;\n}bian[110000];\nstruct kind2  \n{\n\tint k;\n\tint v;\n\tint id;\n}ask[110000];\nint cmp(kind x,kind y){ return x.w>y.w; }\nint cmp2(kind2 x,kind2 y){ return x.k>y.k; }\nint getfather(int x) //\u5bfb\u627ex\u7684\u7236\u8282\u70b9 \n{\n\tif (father[x]!=x) father[x]=getfather(father[x]);\n\treturn father[x];\n}\nvoid onion(int x,int y)\n{\n\tx=getfather(x);\n\ty=getfather(y);\n\tif (x!=y)\n\t{\n      father[x]=y;  //\u5408\u5e76\u7236\u8282\u70b9\u5c31\u628a\u5b83\u4eec\u5408\u5e76\u5566\u5566\u5566 \n\t  number[y]+=number[x];  //\u7236\u4eb2\u53c8\u591a\u4e86\u51e0\u4e2a\u513f\u5b50\u54c8\u54c8 \n    }\n}\nint main()\n{\n\tcin>>n>>q;\n\tfor (int i=1;i<=n;i++) \n\t{ \n\t  father[i]=i;  \n\t  number[i]=1;  //number[]\u7edf\u8ba1\u8fde\u901a\u5757\u4e2d\u7684\u7ed3\u70b9\u6570\u91cf \n    }\n\tfor (int i=1;i<n;i++) \n\t  cin>>bian[i].start>>bian[i].end>>bian[i].w; //\u8bfb\u5165\u8d77\u59cb\u70b9\uff0c\u5230\u8fbe\u70b9\uff0c\u8fb9\uff08\u8fde\u81ea\u5df1\u90fd\u89c9\u5f97\u5e7c\u7a1a\u7684\u6570\u7ec4bian[]\uff09 \n\tfor (int i=1;i<=q;i++) \n\t{\n\t    cin>>ask[i].k>>ask[i].v;  \n\t    ask[i].id=i;\n\t}                    //\u201c\u79bb\u7ebf\u201d\u64cd\u4f5c \uff0c\u56e0\u4e3a\u540e\u9762\u8fd8\u8981\u5bf9\u8be2\u95ee\u4e2d\u7684k\u8fdb\u884c\u6392\u5e8f\uff08\u201c\u79bb\u7ebf\u201d\u662f\u6307\u8bfb\u5165\u5b8c\u540e\u518d\u64cd\u4f5c\uff0c\u201c\u5728\u7ebf\u201d\u662f\u6307\u8fb9\u8bfb\u5165\u8fb9\u64cd\u4f5c\uff09 \n    sort(bian+1,bian+n+1,cmp);  //\u5bf9bian[]\u6570\u7ec4\u8fdb\u884c\u5feb\u6392\uff0c\u628a\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\uff0c\u65b9\u4fbf\u540e\u9762\u5c06>=k\u7684\u8fb9\u8fde\u63a5\u7684\u70b9\u8fdb\u884c\u5408\u5e76 \n    sort(ask+1,ask+1+q,cmp2);  //\u5bf9ask[]\u8be2\u95ee\u6570\u7ec4\u8fdb\u884c\u5feb\u6392\uff0c\u628a\u8be2\u95ee\u7684k\u4ece\u5927\u5230\u5c0f\u6392\uff0c \n    for (int i=1;i<=q;i++)   //\u5bf9\u6bcf\u4e2a\u4e2a\u8be2\u95ee\u8fdb\u884c\u64cd\u4f5c \n    {\n    \twhile (j<n&&bian[j].w>=ask[i].k)  //\u4e5f\u53ef\u4ee5\u7528for\u8bed\u53e5\u4ee3\u66ff\uff0c\u4e0d\u8fc7\u8981\u628abian[j].w>=ask[i].k\u5199\u5728 for()\u62ec\u53f7\u91cc\uff0c\u907f\u514d\u591a\u4f59\u7684\u64cd\u4f5c\uff0c\u4e0d\u7136\u4f1aTLE\u7684\u554a\n\t\t//\u628a\u6bcf\u6761>=k\u7684\u8fb9\u8fde\u63a5\u7684\u70b9\u8fdb\u884c\u5408\u5e76\uff0c\u5373\u5c06\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u90fd\u62c9\u8fdb\u8fd9\u4e2a\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fde\u901a\u5757\u4e2d\u6240\u6709\u7684\u70b9\u90fd\u7b26\u5408\u6761\u4ef6 \n    \t//\u6ce8\u610f\uff1a\u53d8\u91cfj\u7684\u58f0\u660e\u4e00\u5b9a\u8981\u653e\u5728\u5916\u9762\u554a\uff0c\u4e0d\u7136\u4f1aTLE\uff0c\u4e3a\u4ec0\u4e48\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u628ak\u4ece\u5927\u505a\u5230\u5c0f\uff0ck=4\u8fd9\u4e2a\u8fde\u901a\u5757\u91cc\u7684\u7ed3\u70b9\u80af\u5b9a\u4e5f\u7b26\u5408k=3\u7684\u8fd9\u4e2a\u6761\u4ef6\uff0c\u6240\u4ee5\u5c31\u4e0d\u5fc5\u8981\u505a\u91cd\u590d\u7684\u7ed3\u5408\u5566  \n\t\t{\n\t\t    onion(bian[j].start,bian[j].end);\n\t\t    j++;\n\t\t}\n    \tans[ask[i].id]=number[getfather(ask[i].v)];  //ans[]\u5c31\u662f\u8981\u8f93\u51fa\u7684\u4e1c\u897f\u5566\uff0c\u8981\u4fdd\u8bc1\u539f\u6765\u7684\u8f93\u5165\u5bf9\u5e94\u8f93\u51fa\uff0c\u5c31\u9700\u8981ans[ask.id]\u8fd9\u4e2a\u4e1c\u897f\uff0c\u627e\u5230v\u70b9\u7684\u7236\u8282\u70b9\uff0c\u90a3\u4e48\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\u6570\u5c31\u5728number[]\u91cc\u9762\u5566\u5566\u5566 \n    }\n    for (int i=1;i<=q;i++) cout<<ans[i]-1<<endl;  //\u53bb\u6389\u81ea\u5df1\u4e00\u4e2a\u7ed3\u70b9\u540e\u8f93\u51fa  \n    return 0;  //Yeah~~ \n}\n```",
        "postTime": 1521895723,
        "uid": 78568,
        "name": "\u8521\u4fca\u9ee0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4185 \u3010[USACO18JAN]MooTube\u3011"
    },
    {
        "content": "\u535a\u4e3b\u8003\u8bd5\u7684\u65f6\u5019\u5931\u667a\u4e86 \u660e\u660e\u53ea\u5dee\u4e00\u53e5\u8bdd\u5c31\u53ef\u4ee5AC\u4e86\u7684 \u7136\u540e\u62bd\u98ce\u4e86\u4ea4\u4e86\u66b4\u529b\u4e0a\u53bb\n\n\u6807\u7b97\u662f\u79bb\u7ebf\u5e76\u67e5\u96c6 \u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cdKruskal\u91cd\u6784\u6811\u7684\u7b80\u5355\u505a\u6cd5\n\n\u5c06\u91cd\u6784\u6811\u5efa\u51fa\u6765\u540e \u6b64\u65f6\u662f\u4e00\u4e2a\u5c0f\u6839\u5806\n\n\u6211\u4eec\u500d\u589e\u7684\u5f80\u4e0a\u8df3 \u76f4\u5230\u627e\u5230\u4e00\u4e2a\u7956\u5148\u7684\u6743\u503c\u521a\u597d\u5927\u4e8eK \u663e\u7136 \u6b64\u65f6\u8fd9\u4e2a\u7956\u5148\u7684\u6240\u6709\u5b50\u8282\u70b9\u5230V\u7684\u8ddd\u79bb\u90fd\u662f\u5927\u4e8e\u7b49\u4e8eK\u7684\u3002\u56e0\u4e3a\u6b64\u65f6u\u5230v\u7684\u8ddd\u79bb\u662fLCA(u,v)\uff0c\u800c\u663e\u7136\uff0cLCA(u,v)\u4e00\u5b9a\u5c5e\u4e8e\u8fd9\u4e2a\u7956\u5148\u7684\u5b50\u6811\u3002\n\n```cpp\n#include<bits/stdc++.h>\nconst int N=100005;\nusing namespace std;\ntemplate<class T>\ninline void read(T &x)\n{\n\tx=0;\n\tstatic char ch=getchar();\n\twhile(!isdigit(ch))\tch=getchar();\n\twhile(isdigit(ch))\tx=x*10+ch-'0',ch=getchar();\n}\nint n,Q,cnt,first[2*N],tot,size[2*N];\nstruct Edge\n{\n\tint from,to,next,val;\n\tbool operator <(const Edge &p) const\n\t{\n\t\treturn this->val>p.val;\n\t}\n}e[N],edge[8*N];\ninline void addedge(int x,int y)\n{\n\ttot++;\n\tedge[tot].to=y; edge[tot].next=first[x]; first[x]=tot;\n}\nint father[2*N],up[2*N][22],val[2*N],depth[2*N];\ninline int getfather(int x)\n{\n\tif(father[x]==x)\treturn x;\n\treturn father[x]=getfather(father[x]);\n}\nvoid Kruskal_Rebuild()\n{\n\tsort(e+1,e+cnt+1);\n\tfor(register int i=1;i<=2*n;i++)\tfather[i]=i;\n\tint sign=n;\n\tfor(register int i=1;i<=cnt;i++)\n\t{\n\t\tint fx=getfather(e[i].from);\t\tint fy=getfather(e[i].to);\n\t\tif(fx==fy)\tcontinue;\n\t\tfather[fx]=father[fy]=++sign;\n\t\taddedge(fx,sign); addedge(sign,fx);\n\t\taddedge(fy,sign); addedge(sign,fy);\n\t\tval[sign]=e[i].val;\n\t}\n}\nvoid dfs(int now,int fa)\n{\n\tif(now<=n)\tsize[now]=1;\n\tdepth[now]=depth[fa]+1;\n\tup[now][0]=fa;\n\tfor(int i=1;i<=19;i++)\tup[now][i]=up[up[now][i-1]][i-1];\n\tfor(int u=first[now];u;u=edge[u].next)\n\t{\n\t\tint vis=edge[u].to;\n\t\tif(vis==fa)\tcontinue;\n\t\tdfs(vis,now);\n\t\tsize[now]+=size[vis];\n\t}\n}\nint main()\n{\n\tcin>>n>>Q;\n\tfor(register int i=1;i<=n-1;i++)\n\t{\n\t\tint x,y,z;\n\t\tread(x); read(y); read(z);\n\t\te[++cnt].from=x; e[cnt].to=y; e[cnt].val=z; \n\t}\n\tKruskal_Rebuild();\n\tdfs(2*n-1,0);\n\twhile(Q--)\n\t{\n\t\tint v,k;\n\t\tread(k); read(v);\n\t\tfor(int i=19;i>=0;i--)\n\t\t\tif(val[up[v][i]]>=k)\tv=up[v][i];\n\t\tcout<<size[v]-1<<'\\n';\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1548480928,
        "uid": 60299,
        "name": "Patrickpwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4185 \u3010[USACO18JAN]MooTube\u3011"
    },
    {
        "content": "~~\u8fd9\u662f\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u60f3\u4e0d\u5230\u7adf\u7136\u8fd9\u4e48\u9ad8\u5927\u4e0a\u54c8\u54c8\u54c8\uff0cdalao\u8bf7\u6307\u70b9~~\n\u8fd9\u662f\u8001\u5e08\u53eb\u505a\u7684\u9898\uff0c\u4e00\u5f00\u59cb\u5c31\u60f3\u5230\u7b80\u5355\u6a21\u62df\uff0c\u5148\u628a\u8fb9\u6743\u6700\u5c0f\u7684\u503c\u6309\u5927\u5c0f\u6392\u5e8f\uff0c\u5728\u8fb9\u8f93\u5165\u8fb9\u5904\u7406\uff0c\u4f46\u662f\u770b\u4e86\u770b\u6570\u636e\uff0c\u5f88\u663e\u7136\u7a7a\u95f4\u4f1a\u8fbe\u5230O\uff08n*n\uff09\uff08n*log2n\uff09\uff0c\u4f1aRE\u3002\n\u540e\u6765\u60f3\u4e86\u60f3\uff0c\u65e2\u7136\u5982\u679c\u6ee1\u8db3\u5927\u7684K\u5fc5\u7136\u4f1a\u6ee1\u8db3\u5c0f\u7684K\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u628a\u8be2\u95ee\u4e5f\u6392\u4e00\u6b21\u5e8f\u5c31\u53ef\u4ee5\u7701\u6389\u5f88\u591a\u65f6\u95f4\uff0c\u65e2\u7136\u8def\u5f84\u662f\u8fde\u901a\u7684\uff0c\u90a3\u5c31\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u8d77\u6765\uff0c\u4f46\u662f\u5408\u5e76\u662f\u6709\u6280\u5de7\u7684\uff0c\u53ea\u9700\u8981\u628a\u5927\u4e8eK\u7684\u6570\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u3002\u5176\u5b9e\u8fd9\u9053\u9898\u7528\u5230\u79bb\u7ebf\u89e3\u51b3\u7684\u65b9\u6cd5\u3002\n\u6240\u4ee5\uff0c\u8fd9\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42\u8fde\u901a\u5757\u3002\n\u5982\u56fe~~\u753b\u7684\u4e11\u8bf7\u89c1\u8c05~~\n![](\u6211\u7684\u6587\u6863)\n\u4ee3\u7801\u5982\u4e0b\n```\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nint N,Q;\nint ft[100005],size[100005],ans[100005];\nstruct edge{\n    int p,q,r;\n}a[100005];\nstruct ask{\n    int k,v,id;\n}b[100005];\nint cmp(edge x,edge y){return x.r>y.r;}\nint cmp1(ask x,ask y){return x.k>y.k;}\nint gf(int n){\n    if(ft[n]!=n)ft[n]=gf(ft[n]);\n    return ft[n];\n}\nint main(){\n    /*freopen(\"mootube.in\",\"r\",stdin);\n    freopen(\"mootube.out\",\"w\",stdout); */\n    cin>>N>>Q;\n    for(int i=1;i<N;i++)\n        cin>>a[i].p>>a[i].q>>a[i].r;\n    for(int i=1;i<=Q;i++){\n        cin>>b[i].k>>b[i].v;b[i].id=i;\n    }\n    sort(a+1,a+N+1,cmp);sort(b+1,b+Q+1,cmp1);//\u79bb\u7ebf\u89e3\u51b3 \n    for(int i=1;i<=N;i++){ft[i]=i;size[i]=1;}\n    int j=1;\n    for(int i=1;i<=Q;i++){\n        while(a[j].r>=b[i].k&&j<N){\n            int x=gf(a[j].p),y=gf(a[j].q);\n            j++;\n            if(x==y)continue;\n            ft[x]=y;\n            size[y]+=size[x];\n        }\n        ans[b[i].id]=size[gf(b[i].v)]-1;\n        //\u5728\u540c\u96c6\u91cc\u4e14\u6ee1\u8db3\u6761\u4ef6\uff0c\u5927\u7684\u6ee1\u8db3\uff0c\u5c0f\u7684\u4e5f\u6ee1\u8db3 \n    }\n    for(int i=1;i<=Q;i++) cout<<ans[i]<<endl;//\u6309\u987a\u5e8f\u8f93\u51fa \n    return 0;\n}\n```",
        "postTime": 1522228709,
        "uid": 78567,
        "name": "\u3055\u3087\u306a\u3061",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4185 \u3010[USACO18JAN]MooTube\u3011"
    },
    {
        "content": "\u524d\u7f6e\u7b97\u6cd5:\u5e76\u67e5\u96c6\u3002(\u4e3a\u4fdd\u8bc1\u60a8\u7684\u9605\u8bfb\u8d28\u91cf,\u9605\u8bfb\u6b64\u7bc7\u9898\u89e3\u524d\u8bf7\u5148\u5b66\u4e60\u5e76\u67e5\u96c6\u3002)\u3002\n## \u601d\u8def\n\u6211\u4eec\u628a\u8be2\u95ee\u6309k\u4ece\u5927\u5230\u5c0f\u6392\u5e8f,\u628a\u8fb9\u6309\u8fb9\u6743\u4ece\u5927\u5230\u6392\u5e8f\u3002\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee$i$,\u4f9d\u6b21\u5408\u5e76\u6240\u6709**\u4e0d\u5c0f\u4e8e**$k[i]$\u7684\u8fb9\u8fde\u63a5\u76842\u4e2a**\u8282\u70b9**(\u6ce8\u610f\u5bbe\u8bed\u662f**\u7ed3\u70b9**)\u3002\n\n\u5408\u5e76\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u3002\n\n## \u6f14\u793a\n\n\u4e0b\u9762\u6765\u6f14\u793a\u6b64\u7b97\u6cd5\u3002\u5c31\u62ff\u6837\u4f8b\u6765\u6f14\u793a\u5427\u3002\n```cpp\n4 3     \u6392\u5e8f\u540e:\n1 2 3   2 4 4\n2 3 2   1 2 3\n2 4 4   2 3 2\n1 2     4 1\n4 1     3 1\n3 1     1 2\n```\n\u521d\u59cb\u96c6\u5408{1},{2},{3},{4}\u3002\n\n\u8be2\u95ee$k=4,v=1$:\u5408\u5e76\u6240\u6709$>=4$\u3002$2$\u5408\u5e76\u5230$4$,\u96c6\u5408\u4e3a{$1$},{$3$},{$2,4$};\u6b64\u65f6$v(1)$\u6240\u5728\u7684\u96c6\u5408\u5143\u7d20\u4e2a\u6570\u4e3a$1$\u3002\n\n\u8be2\u95ee$k=3,v=1$:\u5408\u5e76\u6240\u6709$>=3$\u3002$1$\u5408\u5e76\u5230$2$,\u96c6\u5408\u4e3a{$3$},{$1,2,4$};\u6b64\u65f6$v(1)$\u6240\u5728\u7684\u96c6\u5408\u5143\u7d20\u4e2a\u6570\u4e3a$3$\u3002\n\n\u8be2\u95ee$k=4,v=1$:\u5408\u5e76\u6240\u6709$>=1$\u3002$2$\u5408\u5e76\u5230$3$,\u96c6\u5408\u4e3a{$1,2,3,4$};\u6b64\u65f6$v(2)$\u6240\u5728\u7684\u96c6\u5408\u5143\u7d20\u4e2a\u6570\u4e3a$4$\u3002\n\n\u81ea\u5df1\u4e0d\u80fd\u63a8\u8350\u81ea\u5df1\u3002\u6240\u4ee5\u628a\u6240\u6709\u7684\u7b54\u6848-1,\u7136\u540e\u8f93\u51fa\u3002\n## ac.code\n\u5df2\u7ecf\u8bb2\u5f97\u5f88\u5177\u4f53\u4e86,\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u5c31\u4e0d\u4f1a\u5f88\u591a\u4e86\u3002\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct ${ //\u5b58\u8be2\u95ee\u3002\n\tint k,v,id; //id\u8868\u793a\u8be2\u95ee\u7f16\u53f7\u3002\u597d\u5c06\u7b54\u6848\u5b58\u8d77\u6765\u3002\u6700\u540e\u4e00\u8d77\u8f93\u51fa\u3002\n}_[1000005];\nstruct xyq{\n\tint u,v,w;\n}e[1000005];\nstruct rule{ //\u5b58\u56fe\u3002\n\tbool operator()(const xyq &s1,const xyq &s2){\n\t\treturn s1.w>s2.w;\n\t}\n};\nstruct rule${ //\u81ea\u5b9a\u4e49\u6392\u5e8f\u3002\n\tbool operator()(const $ &s1,const $ &s2){\n\t\treturn s1.k>s2.k;\n\t}\n};\nint f[1000005],ans[1000005],size[1000005]; //f\u5b58\u5e76\u67e5\u96c6\u7684\u7236\u4eb2\u3002ans\u5b58\u7b54\u6848,size\u5b58\u5927\u5c0f\u3002\nint getfather(int iakioi){ //\u5e76\u67e5\u96c6\u627e\u7236\u4eb2\u3002\n\tif(f[iakioi]==iakioi){\n\t\treturn iakioi;\n\t}\n\tf[iakioi]=getfather(f[iakioi]); //\u8def\u5f84\u538b\u7f29\u3002\n\treturn f[iakioi];\n}\nint main(){\n\tint n,m,i,a,b,c,tot=0,sum=0;\n\tcin>>n>>m;\n\tfor(i=0;i<n-1;++i){\n\t\tcin>>e[i].u>>e[i].v>>e[i].w;\n\t}\n\tfor(i=0;i<m;++i){\n\t\tcin>>_[i].k>>_[i].v;\n\t\t_[i].id=i; //\u521d\u59cb\u5316\u7f16\u53f7\u522b\u6f0f\u6389\u3002\n\t}\n\tfor(i=0;i<=n;++i){\n\t\tf[i]=i; //\u4e00\u5f00\u59cb\u81ea\u5df1\u7684\u7236\u4eb2\u90fd\u662f\u81ea\u5df1\u3002\n\t\tsize[i]=1; //\u4e00\u5f00\u59cb\u5143\u7d20\u7684\u5927\u5c0f\u90fd\u662f1\u3002\n\t}\n\tsort(e,e+n,rule());\n\tsort(_,_+m,rule$());\n\tfor(i=0;i<m;++i){\n\t\twhile(_[i].k<=e[tot].w){\n\t\t\tsize[getfather(e[tot].v)]+=size[getfather(e[tot].u)];\n\t\t\tf[getfather(e[tot].u)]=getfather(e[tot].v);\n\t\t\t++tot;\n\t\t}\n\t\tans[_[i].id]=size[getfather(_[i].v)];\n\t}\n\tfor(i=0;i<m;++i){\n\t\tcout<<ans[i]-1<<endl; //\u51cf1\u662f\u56e0\u4e3a\u81ea\u5df1\u4e0d\u63a8\u8350\u81ea\u5df1\u3002\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1581986126,
        "uid": 87799,
        "name": "xh39",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4185 \u3010[USACO18JAN]MooTube G\u3011"
    },
    {
        "content": "# \u7b97\u6cd5\u6b65\u9aa4\uff1a\n1.\u6309\u8fb9\u6743\u4ece\u5927\u5c0f\u5230\u6392\u5e8f\n\n2.\u7136\u540e\u6309\u7167\u8be2\u95ee\u6240\u8981\u6c42\u7684\u8fb9\u6743\uff0c\u5c06\u5927\u4e8e\u5b83\u7684\u52a0\n\u5165\u8fdb\u53bb\u770b\u96c6\u5408\u4e2d\u6709\u591a\u5c11\u4e2a\u70b9\uff0c\u7b54\u6848\u5373\u4e3aans-1\n\n# \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint ans[100010];\nstruct tree{\n  int x,y,dis;\n}a[100010];\nstruct node{\n  int dis,v,pos;\n}b[100010],c[100010];\nint father[100010];\nint size[100010];\nbool cmp(tree xx,tree yy)\n{\n  return xx.dis>yy.dis;\n}\nbool cmp1(node xx,node yy)\n{\n  return xx.dis>yy.dis;\n}\nint find(int x)\n{\n  if(x!=father[x])\n    father[x]=find(father[x]);\n  return father[x];\n}\nvoid unionn(int x,int y)\n{\n  x=find(x);\n  y=find(y);\n  if(x!=y)\n  {\n    father[x]=y;\n    size[y]+=size[x];\n  }\n}\nint main()\n{\n  scanf(\"%d%d\",&n,&m);\n  for(int i=1;i<n;i++)\n    scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].dis);\n  for(int i=1;i<=m;i++)\n  {\n    scanf(\"%d%d\",&b[i].dis,&b[i].v);\n    b[i].pos=i;\n  }\n  sort(a+1,a+n+1-1,cmp);\n  sort(b+1,b+1+m,cmp1);\n  for(int i=1;i<=n;i++)\n  {\n    father[i]=i;\n    size[i]=1;\n  }\n  int t=1;\n  for(int i=1;i<=m;i++)\n  {\n    int dis=b[i].dis;\n    int v=b[i].v;\n    while(t<n&&a[t].dis>=dis)\n    {\n      unionn(a[t].x,a[t].y);\n      t++;\n    }\n    ans[b[i].pos]=size[find(v)]-1;\n    //printf(\"%d\\n\",size[find(v)]-1);\n  }\n  for(int i=1;i<=m;i++)\n    printf(\"%d\\n\",ans[i]);\n \n \n \n}\n```\n",
        "postTime": 1551490483,
        "uid": 95392,
        "name": "zengxr",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4185 \u3010[USACO18JAN]MooTube\u3011"
    },
    {
        "content": "http://www.elijahqi.win/2018/02/02/luogu4185-usaco18janmootube-gold/ \nhttp://blog.csdn.net/elijahqi/article/details/79243095\n\n\u9898\u76ee\u63cf\u8ff0\n\nIn his spare time, Farmer John has created a new video-sharing service, which he names MooTube. On MooTube, Farmer John's cows can record, share, and discover many amusing videos. His cows already have posted\nNN\n\nN videos (\n1\u2264N\u2264100,0001 \\leq N \\leq 100,000\n\n1\u2264N\u2264100,000 ), conveniently numbered\n1\u2026N1 \\ldots N\n\n1\u2026N . However, FJ can't quite figure out how to help his cows find new videos they might like.\n\nFJ wants to create a list of \"suggested videos\" for every MooTube video. This way, cows will be recommended the videos most relevant to the ones they already watch.\n\nFJ devises a metric of \"relevance,\" which determines, as the name suggests, how relevant two videos are to each other. He picks\nN\u22121N-1\n\nN\u22121 pairs of videos and manually computes their pairwise relevance. Then, FJ visualizes his videos as a network, where each video is a node and the\nN\u22121N-1\n\nN\u22121 pairs of videos he manually considered are connected. Conveniently, FJ has picked his\nN\u22121N-1\n\nN\u22121 pairs so that any video can be reached from any other video along a path of connections in exactly one way. FJ decides that the relevance of any pair of videos should be defined as the minimum relevance of any connection along this path.\n\nFarmer John wants to pick a value\nKK\n\nK so that next to any given MooTube video, all other videos with relevance at least\nKK\n\nK to that video will be suggested. However, FJ is worried that too many videos will be suggested to his cows, which could distract them from milk production! Therefore, he wants to carefully set an appropriate value of\nKK\n\nK . Farmer John would like your help answering a number of questions about the suggested videos for certain values of\nKK\n\nK .\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\nThe first line of input contains\nNN\n\nN and\nQQ\n\nQ (\n1\u2264Q\u2264100,0001 \\leq Q \\leq 100,000\n\n1\u2264Q\u2264100,000 ).\n\nThe next\nN\u22121N-1\n\nN\u22121 lines each describe a pair of videos FJ manually compares. Each line includes three integers\npip_i\n\npi\u200b ,\nqiq_i\n\nqi\u200b , and\nrir_i\n\nri\u200b (\n1\u2264pi,qi\u2264N,1\u2264ri\u22641,000,000,0001 \\leq p_i, q_i \\leq N, 1 \\leq r_i \\leq 1,000,000,000\n\n1\u2264pi\u200b,qi\u200b\u2264N,1\u2264ri\u200b\u22641,000,000,000 ), indicating that videos\npip_i\n\npi\u200b and\nqiq_i\n\nqi\u200b are connected with relevance\nrir_i\n\nri\u200b .\n\nThe next\nQQ\n\nQ lines describe Farmer John's\nQQ\n\nQ questions. Each line contains two integers,\nkik_i\n\nki\u200b and\nviv_i\n\nvi\u200b (\n1\u2264ki\u22641,000,000,000,1\u2264vi\u2264N1 \\leq k_i \\leq 1,000,000,000, 1 \\leq v_i \\leq N\n\n1\u2264ki\u200b\u22641,000,000,000,1\u2264vi\u200b\u2264N ), indicating that FJ's\nii\n\ni th question asks how many videos will be suggested to viewers of video\nviv_i\n\nvi\u200b if\nK=kiK = k_i\n\nK=ki\u200b .\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\nOutput\nQQ\n\nQ lines. On line\nii\n\ni , output the answer to FJ's\nii\n\ni th question.\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n\u8f93\u5165\u6837\u4f8b#1\uff1a \u590d\u5236\n\n4 3\n1 2 3\n2 3 2\n2 4 4\n1 2\n4 1\n3 1\n\n\u8f93\u51fa\u6837\u4f8b#1\uff1a \u590d\u5236\n\n3\n0\n2\nFarmer John finds that videos one and two have relevance three, that videos two and three have relevance two, and that videos two and four have relevance four. Based on this, videos one and three have relevance min(3, 2) = 2, videos one and four have relevance min(3, 4) = 3, and videos three and four have relevance min(2, 4) = 2.\n\nFarmer John wants to know how many videos will be suggested from video two if $K=1$, from video one if $K=3$, and from video one if $K=4$. We see that with $K=1$, videos 1, 3, and 4 will be suggested on video two. With $K=4$, no videos will be suggested from video one. With $K=3$, however, videos 2 and 4 will be suggested from video one.\n\n\u9898\u610f\uff1a\u6bcf\u6b21\u7ed9\u4e00\u4e2a\u8d77\u70b9 \u7136\u540e\u8be2\u95ee\u548c\u4ed6\u76f8\u8fde\u7684\u70b9\u7684\u8fb9\u6743\u6bd4k\u5927\u7684\u70b9\u6709\u51e0\u4e2a \u8def\u5f84\u8fb9\u6743\u662f\u4e24\u70b9\u8fde\u63a5\u7684\u6240\u6709\u8def\u5f84\u4e0a\u6700\u5c0f\u503c\n\n\u6240\u4ee5\u6211\u9488\u5bf9\u8be2\u95ee\u79bb\u7ebf\u7136\u540e \u4ece\u5927\u5230\u5c0f\u8fdb\u884c\u8be2\u95ee \u6bcf\u6b21\u628a\u4ed6\u52a0\u5165\u5e76\u67e5\u96c6\u65b9\u4fbf\u7edf\u8ba1\u7b54\u6848 \u4e00\u5f00\u59cb\u72b9\u8c6b \u8fd9\u4e2a\u5927\u5c0f\u600e\u4e48\u8bb0\u56e0\u4e3a\u6211\u6ca1\u6709\u9012\u5f52\u540e\u6765\u8ba4\u771f\u8003\u8651\u4e86\u4e0b \u5176\u5b9e\u65e0\u6240\u8c13\u6211\u53ea\u9700\u8981\u76f4\u5230\u4e00\u4e2a\u5b8c\u6574\u5757\u7684\u5927\u5c0f\u5373\u53ef\n\n```\n#include<cstdio>\n#include<algorithm>\n#define N 110000\nusing namespace std;\ninline char gc(){\n    static char now[1<<16],*S,*T;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n}\ninline int read(){\n    int x=0,f=1;char ch=gc();\n    while(ch<'0'||ch>'9'){if (ch=='-') f=-1;ch=gc();}\n    while(ch<='9'&&ch>='0') x=x*10+ch-'0',ch=gc();\n    return x*f;\n}\nstruct node{\n    int x,y,z;\n}data[N];\nstruct node1{\n    int k,v,id;\n}qr[N];\ninline bool cmp(const node1 &a,const node1 &b){return a.k>b.k;}\ninline bool cmp1(const node &a,const node &b){return a.z>b.z;}\nint fa[N],size[N],ans[N],n,q;\ninline int find(int x){while(x!=fa[x]) x=fa[x]=fa[fa[x]];return x;}\nint main(){\n//\tfreopen(\"mootube.in\",\"r\",stdin);\n//\tfreopen(\"mootube.out\",\"w\",stdout);\n    n=read();q=read();\n    for (int i=1;i<n;++i) data[i].x=read(),data[i].y=read(),data[i].z=read();\n    for (int i=1;i<=q;++i) qr[i].k=read(),qr[i].v=read(),qr[i].id=i;\n    sort(qr+1,qr+q+1,cmp);sort(data+1,data+n+1,cmp1);\n    for (int i=1;i<=n;++i) fa[i]=i,size[i]=1;int now=1;\n    for (int i=1;i<=q;++i){\n        while(now<=n&&data[now].z>=qr[i].k){\n            int x=find(data[now].x),y=find(data[now].y);++now;\n            if (x==y) continue;fa[x]=y;size[y]+=size[x];\n        }ans[qr[i].id]=size[find(qr[i].v)]-1;\n    }\n    for (int i=1;i<=q;++i) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```\n",
        "postTime": 1517576275,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4185 \u3010[USACO18JAN]MooTube\u3011"
    },
    {
        "content": "**\u5e76\u67e5\u96c6\u601d\u60f3\uff0c\u4e00\u5f00\u59cb\u6392\u5e8f\u540e\uff08\u4ece\u5927\u5230\u5c0f\u65b9\u4fbf\u5904\u7406\uff09\u3002\u7136\u540e\u5faa\u73af\uff0c\u5982\u679c\u7b26\u5408\u6761\u4ef6\uff08\u5173\u8054\u5ea6\u4e0d\u5c0f\u4e8ek\uff09\uff0c\u90a3\u4e48\u8fdb\u884c\u5408\u5e76\u3002\u6700\u540e\u8bb0\u5f55\u8fde\u901a\u5757\u7684\u6570\u91cf\uff0c\u4f46\u7b54\u6848\u8bb0\u5f97\u8981\u51cf\u53bb\u81ea\u5df1\uff08\u5f53\u65f6\u628a\u81ea\u5df1\u8fd9\u4e2a\u70b9\u7ed9\u7b97\u8fdb\u53bb\u4e86\uff09\u3002**\n\n**\u8be6\u89c1\u4ee3\u7801\uff1a**\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int MAX = 100001;\nstruct tree\n{\n\tint x,y,dis;\n}a[MAX];\nstruct node\n{\n\tint k,v,num;\n}b[MAX];\nint n,m,fa[MAX],size[MAX],ans[MAX] = {0};\nbool cmp(tree xx,tree yy);\nbool _cmp(node xx,node yy);\nvoid work(int xx,int yy);\nint getfather(int xx);\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1;i < n;i++)scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].dis);\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tscanf(\"%d%d\",&b[i].k,&b[i].v);\n\t\tb[i].num = i;\n\t}\n\tsort(a + 1,a + n + 1,cmp);\n\tsort(b + 1,b + m + 1,_cmp);\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tfa[i] = i;//\u7236\u4eb2 \n\t\tsize[i] = 1;//\u5173\u8054\u5757\u6570\u91cf \n\t}\n\tint j = 1;\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\twhile(j < n && a[j].dis >= b[i].k)//\u5173\u8054\u5ea6\u5927\u4e8ek \n\t\t{\n\t\t\twork(a[j].x,a[j].y);\n\t\t\tj++;\n\t\t}\n\t\tans[b[i].num] = size[getfather(b[i].v)];//size\u5373\u4e3a\u5173\u8054\u7684\u89c6\u9891\u6570\u91cf\uff0cnum\u8bb0\u5f55\u662f\u7b2c\u51e0\u4e2a(\u56e0\u4e3a\u6392\u5e8f\u8fc7\uff0c\u4f46\u9700\u6309\u539f\u5e8f\u8f93\u51fa) \n\t}\n\tfor(int i = 1;i <= m;i++)printf(\"%d\\n\",ans[i] - 1);//\u51cf\u53bb\u81ea\u5df1 \n\treturn 0;\n}\nbool cmp(tree xx,tree yy){return xx.dis > yy.dis;}\nbool _cmp(node xx,node yy){return xx.k > yy.k;}\nvoid work(int xx,int yy)//\u5408\u5e76\u64cd\u4f5c \n{\n\txx = getfather(xx);yy = getfather(yy);\n\tif(xx != yy)\n\t{\n\t\tfa[xx] = yy;\n\t\tsize[yy] += size[xx];\n\t}\n}\nint getfather(int xx)\n{\n\tif(fa[xx] != xx)fa[xx] = getfather(fa[xx]);\n\treturn fa[xx];\n}\n```\n",
        "postTime": 1564620844,
        "uid": 183603,
        "name": "SUNCHAOYI",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4185 \u3010[USACO18JAN]MooTube\u3011"
    },
    {
        "content": "\u5e7f\u544a\uff1a\u98df\u7528[$blog$](https://www.cnblogs.com/heyujun/p/10333375.html)\u4f53\u9a8c\u66f4\u4f73\n\n## \u9898\u89e3\uff1a\n\n\u5148\u5c06\u6240\u6709\u64cd\u4f5c\u548c\u8be2\u95ee\u79bb\u7ebf\n\n\u7136\u540e\u6309\u7167\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u5c06\u64cd\u4f5c\u548c\u8be2\u95ee\u6392\u5e8f\n\n\u5229\u7528$two\\;pointers$\uff0c\u6bcf\u6b21\u626b\u5230\u4e00\u4e2a\u8be2\u95ee\uff0c\u5c06\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u8fb9\u7684\u4e24\u70b9\u5168\u90e8\u90fd\u5e76\u8d77\u6765\n\n\u56e0\u4e3a\u8fb9\u6743\u5927\u7684\u6ee1\u8db3\uff0c\u90a3\u4e48\u8fb9\u6743\u5c0f\u7684\u4e00\u5b9a\u4e5f\u80fd\u6ee1\u8db3\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u76f4\u63a5\u67e5\u5b83\u8054\u901a\u5757\u7684$size$\u5373\u53ef\n\n\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring> \n#include <cmath> \n#include <algorithm>\nusing namespace std; \ninline int gi() {\n\tregister int data = 0, w = 1;\n\tregister char ch = 0;\n\twhile (!isdigit(ch) && ch != '-') ch = getchar(); \n\tif (ch == '-') w = -1, ch = getchar();\n\twhile (isdigit(ch)) data = 10 * data + ch - '0', ch = getchar();\n\treturn w * data; \n}\nconst int MAX_N = 1e5 + 5; \nstruct Query { int k, v, id; } q[MAX_N]; \nstruct Edge { int u, v, w; } e[MAX_N]; \nbool operator < (const Query &l, const Query &r) { return l.k > r.k; } \nbool operator < (const Edge &l, const Edge &r) { return l.w > r.w; } \nint N, Q, fa[MAX_N], size[MAX_N], ans[MAX_N]; \nint getf(int x) { return (x == fa[x]) ? x : (fa[x] = getf(fa[x])); }\nvoid unite(int x, int y) { x = getf(x), y = getf(y); if (x != y) fa[x] = y, size[y] += size[x]; } \nint main () { \n\tN = gi(), Q = gi(); \n\tfor (int i = 1; i < N; i++) e[i].v = gi(), e[i].u = gi(), e[i].w = gi(); \n\tfor (int i = 1; i <= Q; i++) q[i].k = gi(), q[i].v = gi(), q[i].id = i; \n\tsort(&e[1], &e[N]); sort(&q[1], &q[Q + 1]);\n\tfor (int i = 1; i <= N; i++) fa[i] = i, size[i] = 1; \n\tfor (int i = 1, j = 1; i <= Q; i++) { \n\t\twhile (e[j].w >= q[i].k && j < N) unite(e[j].u, e[j].v), ++j; \n\t\tans[q[i].id] = size[getf(q[i].v)] - 1; \n\t}\n\tfor (int i = 1; i <= Q; i++) printf(\"%d\\n\", ans[i]); \n\treturn 0; \n} \n```",
        "postTime": 1548733621,
        "uid": 42506,
        "name": "\u4f55\u4fde\u5747",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4185 \u3010[USACO18JAN]MooTube\u3011"
    }
]