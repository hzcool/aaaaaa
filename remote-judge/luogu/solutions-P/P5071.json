[
    {
        "content": "> \u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3002\u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\uff0c\u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4f17\u4eba\uff0c \u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\uff0c\u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\u3001\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\u3002\u6211\u56de\u6765\u4e86\uff0c\u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\uff0c\u76fc\u541b\u52ff\u5fd8\u3002\u2014\u2014\u2014\u2014\u4e16\u754c\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\r\n\r\n\u6211\u6c38\u8fdc\u559c\u6b22\u73c2\u6735\u8389\u3002\r\n\r\n---\r\n\r\n$10^9$\u4ee5\u5185\u7684\u6570\u6700\u591a\u670910\u4e2a**\u4e0d\u540c\u7684**\u8d28\u56e0\u5b50\u3002\r\n\r\n\u8003\u8651\u5bf9\u5176\u8d28\u56e0\u6570\u5206\u89e3\u3002\r\n\r\n\u7531\u4e8e\u503c\u57df\u8303\u56f4\u8fc7\u5927\uff0c\u8003\u8651\u4f7f\u7528Pollard-Rho\u7b97\u6cd5\u3002\r\n\r\n\u8fd9\u91cc\u666e\u901a\u7684Pollard-Rho\u7b97\u6cd5\u53ef\u80fd\u4f1aTLE\u3002\u5982\u679c\u4f60\u7684\u4ee3\u7801\u80fd\u901a\u8fc7\u6a21\u677f\u9898\uff0c\u90a3\u57fa\u672c\u4e0a\u6ca1\u95ee\u9898\uff08~~\u7a9d\u53cd\u6b63\u76f4\u63a5\u628a\u4ee5\u524d\u5199\u7684\u677f\u5b50\u62c9\u8fc7\u6765\u7136\u540e\u8c03\u4e86\u8c03\u53c2~~\uff09\u3002\r\n\r\n\u4e4b\u540e\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u6700\u591a$10n$\u4e2a\u4e0d\u540c\u7684\u8d28\u56e0\u6570\u3002\u5bf9\u5176\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u5f00\u6876\u8bb0\u5f55\u3002\r\n\r\n\u7136\u540e\u4e0a\u83ab\u961f\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u6307\u9488\u7684\u504f\u79fb\uff0c\u628a\u5b83\u6240\u6709\u7684\u8d28\u56e0\u6570\u52a0\u5230\u6876\u91cc\uff0c\u540c\u65f6\u7ef4\u62a4\u7ea6\u6570\u4e2a\u6570\u5373\u53ef\u3002\r\n\r\n\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6$O(10n\\sqrt n)$\uff0c\u52a0\u4e0a\u4e0a\u9762\u7684\u8d28\u56e0\u6570\u5206\u89e3\u7684\u7384\u5b66\u671f\u671b\u590d\u6742\u5ea6\uff0c\u53ea\u80fd\u83b7\u5f9782\u5206\u7684\u597d\u6210\u7ee9\u3002\r\n\r\n---\r\n\r\n\u6211\u4eec\u8003\u8651\u628a\u6bcf\u4e2a\u6570$1000$\u4ee5\u5185\u7684\u8d28\u56e0\u5b50\u5148\u53d6\u51fa\u6765\uff08$1000$\u4ee5\u5185\u5171168\u4e2a\u8d28\u6570\uff09\uff0c\u7136\u540e\uff0c\u5bf9\u5176\u505a\u524d\u7f00\u548c\uff0c\u8bb0\u5f55\u524d\u7f00\u7684\u51fa\u73b0\u6b21\u6570\u3002\r\n\r\n\u7136\u540e\uff0c\u7531\u4e8e$1001^3>10^9$\uff0c\u6240\u4ee5\u6bcf\u4e2a\u6570\u5269\u4e0b\u6700\u591a\u4e0d\u8d85\u8fc72\u4e2a\u8d28\u56e0\u5b50\u3002\u8fd9\u90e8\u5206\u7528Pollard_Rho\u627e\u5373\u53ef\u3002\r\n\r\n\u7136\u540e\u83ab\u961f\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u524d\u9762168\u4e2a\u8d28\u6570\u5c31\u53ef\u4ee5\u4e0d\u7528\u7ef4\u62a4\uff0c\u76f4\u63a5\u7528\u524d\u7f00\u548c\u3002\r\n\r\n\u800c\u5bf9\u4e8e\u540e\u9762\u7684\u5927\u8d28\u56e0\u5b50\uff0c\u518d\u79bb\u6563\u5316\u5904\u7406\u5373\u53ef\u3002\u7531\u4e8e\u6bcf\u4e2a\u6570\u6700\u591a\u4e24\u4e2a\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5\u5e38\u6570\u5c31\u5c0f\u4e86\u5f88\u591a\u3002\r\n\r\n\u800c\u7531\u4e8e\u7b5b\u6389\u4e86\u5f88\u591a\u5c0f\u7684\u8d28\u56e0\u5b50\uff0cPollard_Rho\u7684\u901f\u5ea6\u4e5f\u4f1a\u53d8\u5feb\u3002\u7136\u540e\u5c31\u8db3\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\r\n\r\n## Code\uff1a\r\n```cpp\r\n#include<cctype>\r\n#include<cstdio>\r\n#include<cstdlib>\r\n#include<algorithm>\r\n#include<vector>\r\n#include<cstring>\r\n#define ctz __builtin_ctz\r\nusing namespace std;\r\n#ifdef ONLINE_JUDGE\r\nstruct istream{\r\n    char buf[23333333],*s;\r\n    inline istream(){\r\n        buf[fread(s=buf,1,23333330,stdin)]='\\n';\r\n        fclose(stdin);\r\n    }\r\n    inline istream&operator>>(int&d){\r\n        d=0;\r\n        for(;!isdigit(*s);++s);\r\n        while(isdigit(*s))\r\n        d=(d<<3)+(d<<1)+(*s++^'0');\r\n        return*this;\r\n    }\r\n}cin;\r\nstruct ostream{\r\n    char buf[8000005],*s;\r\n    inline ostream(){s=buf;}\r\n    inline ostream&operator<<(int d){\r\n        if(!d){\r\n            *s++='0';\r\n        }else{\r\n            static int w;\r\n            for(w=1;w<=d;w*=10);\r\n            for(;w/=10;d%=w)*s++=d/w^'0';\r\n        }\r\n        return*this;\r\n    }\r\n    inline ostream&operator<<(const char&c){*s++=c;return*this;}\r\n    inline void flush(){\r\n        fwrite(buf,1,s-buf,stdout);\r\n        s=buf;\r\n    }\r\n    inline~ostream(){flush();}\r\n}cout;\r\n#else\r\n#include<iostream>\r\n#endif\r\nint pri[170],cct=0,sum[100005][169],num[1005];\r\nvoid sieve(){\r\n    for(int i=2;i<=1000;++i)num[i]=1;\r\n    for(int i=2;i<=1000;++i)\r\n    if(num[i]){\r\n        pri[num[i]=++cct]=i;\r\n        for(int j=i<<1;j<=1000;j+=i)num[j]=0;\r\n    }\r\n}\r\nusing LoveLive=long long;\r\nvector<int>tj;\r\nconst int pr[]={2,3,5,7,11,13,17};\r\nint gcd(int a,int b){\r\n    if(!a||!b)return a|b;\r\n    int t=ctz(a|b);\r\n    a>>=ctz(a);\r\n    do{\r\n        b>>=ctz(b);\r\n        if(a>b)swap(a,b);\r\n        b-=a;\r\n    }while(b);\r\n    return a<<t;\r\n}\r\ninline int power(int a,int b,const int&md){\r\n    int ans=1;\r\n    for(;b;b>>=1){\r\n        if(b&1)ans=(LoveLive)ans*a%md;\r\n        a=(LoveLive)a*a%md;\r\n    }\r\n    return ans;\r\n}\r\nint miller_rabin(int p){\r\n    if(p==2)return 1;\r\n    int b=p-1;\r\n    int t=0;\r\n    while(!(b&1))b>>=1,++t;\r\n    for(int i:pr){\r\n        int r=power(i%(p-2)+2,b,p);\r\n        if(r==1||r==p-1)continue;\r\n        int ok=1;\r\n        for(int j=1;j<=t&&ok;++j){\r\n            r=(LoveLive)r*r%p;\r\n            if(r==p-1)ok=0;\r\n        }\r\n        if(ok)return 0;\r\n    }\r\n    return 1;\r\n}\r\nvoid pollard_rho(int&n,int c){\r\n    int k=2,x=rand()%(n-1)+1,y=x,q=1,t=1;\r\n    for(;;k<<=1,y=x,q=1){\r\n        for(int i=1;i<=k;++i){\r\n            x=((LoveLive)x*x%n+c)%n;\r\n            q=(LoveLive)q*abs(x-y)%n;\r\n            if(!(i&63)){\r\n                t=gcd(q,n);\r\n                if(t>1)break;\r\n            }\r\n        }\r\n        if(t>1||(t=gcd(q,n))>1)break;\r\n    }\r\n    n=t;\r\n}\r\nvoid find(int n,int c){\r\n    if(n==1)return;\r\n    if(miller_rabin(n)){tj.push_back(n);return;}\r\n    int p=n;\r\n    while(p>=n)pollard_rho(p,c--);\r\n    n/=p;\r\n    tj.push_back(n),tj.push_back(p);\r\n}\r\n#define N 100005\r\nconst int md=19260817;\r\nint n,m,a[N],inv[N*3],cnt[N],tot[N*2],now=1,ans[N];\r\nint p[N][3];\r\nvector<int>lr;\r\nstruct que{\r\n    static const int siz=317;\r\n    int l,r,id;\r\n    inline bool operator<(const que&rhs)const{\r\n        return((l/siz!=rhs.l/siz)?(l<rhs.l):r<rhs.r);\r\n    }\r\n}q[N];\r\ninline void add(int id){\r\n    for(register int i=1;i<=cnt[id];++i)\r\n    now=(LoveLive)now*inv[tot[p[id][i]]]%md*(tot[p[id][i]]+1)%md,++tot[p[id][i]];\r\n}\r\ninline void del(int id){\r\n    for(register int i=1;i<=cnt[id];++i)\r\n    now=(LoveLive)now*inv[tot[p[id][i]]]%md*(tot[p[id][i]]-1)%md,--tot[p[id][i]];\r\n}\r\nint main(){\r\n    srand(19260817);\r\n    sieve();\r\n    cin>>n>>m;\r\n    inv[1]=1;\r\n    for(int i=2;i<=3*n;++i)inv[i]=(md-md/i)*1LL*inv[md%i]%md;\r\n    for(int i=1;i<=n;++i){\r\n        cin>>a[i];\r\n        memcpy(sum[i],sum[i-1],sizeof*sum);\r\n        for(int j=1;j<=cct&&pri[j]*pri[j]<=a[i];++j)\r\n        while(!(a[i]%pri[j])){\r\n            ++sum[i][j];\r\n            a[i]/=pri[j];\r\n        }\r\n        if(a[i]>1){\r\n            if(a[i]<=pri[cct]){\r\n                ++sum[i][num[a[i]]];\r\n                continue;\r\n            }\r\n            tj.clear();\r\n            find(a[i],23333);\r\n            for(int it:tj)\r\n            p[i][++cnt[i]]=it,lr.push_back(it);\r\n        }\r\n    }\r\n    sort(lr.begin(),lr.end());\r\n    lr.erase(unique(lr.begin(),lr.end()),lr.end());\r\n    for(int i=1;i<=n;++i)\r\n    for(int j=1;j<=cnt[i];++j)p[i][j]=lower_bound(lr.begin(),lr.end(),p[i][j])-lr.begin();\r\n    for(int i=1;i<=m;++i)cin>>q[q[i].id=i].l>>q[i].r;\r\n    sort(q+1,q+m+1);\r\n    for(int i=0;i<n<<1;++i)tot[i]=1;\r\n    for(int i=1,l=1,r=0;i<=m;++i){\r\n        while(r<q[i].r)add(++r);\r\n        while(r>q[i].r)del(r--);\r\n        while(l>q[i].l)add(--l);\r\n        while(l<q[i].l)del(l++);\r\n        int&out=ans[q[i].id];out=now;\r\n        for(int j=1;j<=cct;++j)\r\n        out=(LoveLive)out*(sum[r][j]-sum[l-1][j]+1)%md;\r\n    }\r\n    for(int i=1;i<=m;++i)\r\n    cout<<ans[i]<<'\\n';\r\n    return 0;\r\n}\r\n```",
        "postTime": 1544358039,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "\u6765\u7bc7\u8d56\u76ae\u4e00\u70b9\u7684\u9898\u89e3\uff0c\u5c31\u662f\u8ba9lxl\u65e0\u6bd4\u70e6\u8e81\u7684\u90a3\u79cd\u66b4\u529b\u3002\n\n\u601d\u8def\u5e94\u8be5\u975e\u5e38\u660e\u786e\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u8d28\u56e0\u5b50\u5f00\u6876\u8ba1\u6570\u8dd1\u83ab\u961f\u3002\n\n\u4f46\u590d\u6742\u5ea6 $\\operatorname{O}(n\\sqrt{n}\\log n)$ \u8fc7\u4e0d\u4e86\u3002\n\n\u8003\u8651\u5230\u7531\u4e8e\u5c0f\u7684\u8d28\u56e0\u5b50\u4f1a\u6bd4\u5927\u7684\u8d28\u56e0\u5b50\u5bc6\u96c6\u5f88\u591a\uff0c\u6240\u4ee5\u4e5f\u8bb8\u6709\u4e9b\u5c0f\u8d28\u56e0\u5b50\u53ef\u4ee5\u4e0d\u4e00\u4e2a\u4e00\u4e2a\u66f4\u65b0\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u7528\u5230\u4e00\u4e2a\u5e38\u89c1 trick \uff1a\u6839\u53f7\u5206\u6cbb\n\n~~\u597d\u50cf\u662f\u8fd9\u4e48\u5199\u3002~~\n\n\u5c31\u662f\u5bf9\u4e8e\u4e0d\u540c\u89c4\u6a21\u7684\u6570\u636e\u91c7\u7528\u4e0d\u540c\u7b97\u6cd5\u3002\n\n\u4e8e\u662f\u5c31\u60f3\u5230\u4e86\uff1a\u5c0f\u8d28\u56e0\u5b50\u524d\u7f00\u548c\u7ef4\u62a4\uff0c\u5927\u8d28\u56e0\u5b50\u8dd1\u83ab\u961f\u3002\n\n\u8003\u8651\u5230 $\\sqrt[3]{10^9}=10^3=1000$ \uff0c\u800c $1000$ \u4ee5\u5185\u7684\u7d20\u56e0\u5b50\u7ef4\u62a4\u524d\u7f00\u548c\u8fd8\u80fd\u63a5\u53d7\uff0c$1000$ \u4e0a\u7684\u7d20\u56e0\u5b50\u4e00\u4e2a\u6570\u81f3\u591a\u4e24\u4e2a\u3002\n\n\u4e8e\u662f\u5c31\u9009 $1000$ \u4e3a\u754c\u4e86\u3002\n\n\u6700\u540e\u8003\u8651\u7d20\u56e0\u6570\u5206\u89e3\u3002\uff08\u4e5f\u662f\u672c\u7bc7\u9898\u89e3\u533a\u522b\u4e8e\u5176\u4ed6\u9898\u89e3\u7684\u90e8\u5206\uff09\n\n\u7531\u4e8e\u6211\u4e0d\u4f1aPr\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u4e8e\u662f\u9700\u8981\u4e00\u4e9b\u66b4\u529b\u5206\u89e3\u7684\u4f18\u5316\u3002\n\n+ \u628a\u7d20\u6570\u8868\u6253\u51fa\u6765\u3002\n\n\u5bf9\uff0c\u5c31\u662f $1000$ \u4ee5\u5185\u548c $1001\\sim \\sqrt{10^9}$ \u7684\u4e24\u5f20\u8868\u3002\n\n\u628a $1000$ \u4ee5\u5185\u7684\u7d20\u56e0\u5b50\u5206\u5b8c\u4e4b\u540e\u5269\u4e0b\u7684\u6570\uff1a\n\n+ \u8981\u662f\u662f1\n\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u81ea\u5df1\u60f3\u3002\n\n+ \u8981\u662f\u662f\u7d20\u6570\uff08Mr\u5224\u65ad\uff09\n\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u76f4\u63a5\u65e0\u8111\u7d2f\u8ba1\u3002\n\n+ \u8981\u662f\u4e0d\u662f\u7d20\u6570\n\n\u91cd\u5934\u3002\n\n\u5982\u679c\u4e0d\u662f\u7d20\u6570\uff0c\u90a3\u5c31\u5fc5\u7136\u80fd\u5206\u89e3\u6210\u4e24\u4e2a\u7d20\u6570\u7684\u4e58\u79ef\u3002\uff08\u4e3a\u4ec0\u4e48\uff1f\uff09\n\n\u4e8e\u662f\u5728\u7d20\u6570\u8868\u91cc\u627e\u5c31\u597d\u4e86\u3002\n\n\u600e\u4e48\u627e\uff1f\n\n\u4e3a\u4e86\u9632\u6b62duliu\u91c7\u7528\u4ee5\u4e0b\u65b9\u5f0f\uff1a\n\n\u7b2c\u4e00\uff1a\u4e8c\u5206\u51fa\u8f83\u5c0f\u8d28\u56e0\u5b50\u5728\u8868\u91cc\u7684\u4f4d\u7f6e\u8fb9\u754c\uff08\u5f00\u6839\uff09\u3002\n\n\u7b2c\u4e8c\uff1a**\u4e24\u8def\u63a8\u8fdb\uff0c\u4e5f\u5c31\u662f\u4e24\u8fb9\u6bcf\u6b21\u5404\u8d70\u4e00\u6b65\u3002**\n\n\u7b2c\u4e09\uff1a\u6025\u6d41\u52c7\u9000\uff0c\u627e\u5230\u5c31`break`\u3002\n\n\u5514\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u5c31\u80fdAC\u4e86\uff0c\u6bd4\u9898\u89e3\u533a\u4e0d\u5c11TLE\u7684Pr\u5feb\u3002\n\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\u601d\u8003\u9898\uff1a\u600e\u4e48hack\uff1f\u5f88\u5bb9\u6613\u3002\n\n\u6700\u540e\u5c31\u662f\u4ee3\u7801\u5566\uff01\n\n```\n#include<bits/stdc++.h>\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#define int long long\n#pragma GCC optimize(3)\nusing namespace std;\nchar buf[1<<23],*p1=buf,*p2=buf;\nvoid read(int&x){\n\tregister char c(getchar());\n\twhile(!isdigit(c))c=getchar();\n\tx=c^48;\n\twhile(isdigit(c=getchar()))x=x*10+(c^48);\n}//\u5feb\u8bfb\nconst int primes[]={/*\u600e\u4e48\u66b4\u529b\u6253\u7d20\u6570\u8868\u8fd8\u8981\u6559\u4f60\uff1f*/};//1000\u4ee5\u5185\u7d20\u6570\u8868\nconst int bgp[]={/*\u540c\u4e0a*/};//\u5927\u7d20\u6570\u8868\n//\u8fd9\u4e24\u5f20\u8868\u521a\u8bb2\u8fc7\u7684\nconst int N=1e5+9;\nconst int sufn=((sizeof primes)/sizeof(long long))+9;//1000\u5185\u8d28\u6570\u6570\u91cf+9\nconst int mod=19260817;\nint n,m;\nint out[N];\nlong long answ=1;\nint inv[N<<1];//\u9006\u5143\uff0c\u6d89\u53ca\u5230\u9664\u6cd5\nint bigtwo[N][3];//\u6bcf\u4e2a\u6570\u8f83\u5927\u7684\u4e24\u4e2a\u7d20\u56e0\u5b50\nint tot[N];\nint suf[N][sufn];//1000\u4ee5\u5185\u524d\u7f00\u548c\nint tins[10009],to;//\u4e34\u65f6\u5b58\u50a8\nint totl;\nstruct query{int l,r,id;}q[N];\ninline int cmp(const query&a,const query&b){return a.l/317==b.l/317?(a.l/317&1)?a.r>b.r:a.r<b.r:a.l<b.l;}\nunordered_map<int,int>tag;//\u79bb\u6563\u5316\u4e13\u7528\nint cnt[N<<2];//\u8ba1\u6570\u5668\ninline void add(const int&x){\n\tfor(register int i=1;i<=tot[x];++i){\n\t\tint w=cnt[bigtwo[x][i]];\n\t\tansw=answ*inv[w]%mod*(w+1)%mod;\n\t\t++cnt[bigtwo[x][i]];\t\n\t}\n}//\u52a0\u6570\ninline void del(const int&x){\n\tfor(register int i=1;i<=tot[x];++i){\n\t\tint w=cnt[bigtwo[x][i]];\n\t\tansw=answ*inv[w]%mod*(w-1)%mod;\n\t\t--cnt[bigtwo[x][i]];\t\n\t}\n}//\u5220\u6570\ninline int qpow(register long long a,register int b,register int m){\n\tregister long long ans=1;\n\twhile(b){\n\t\tif(b&1)ans=ans*a%m;\n\t\ta=a*a%m,b>>=1;\n\t}\n\treturn ans;\n}\ninline bool MR(register int x,register int t){\n\tfor(register int k=x-1,cur;k;k>>=1){\n\t\tcur=qpow(t,k,x);\n\t\tif(cur!=1&&cur!=x-1)return 0;\n\t\tif((k&1)||cur==x-1)return 1;\n\t}\n\treturn 1;\n}\ninline bool isprime(register int x){\n    if(x<2)return 0;\n\tif(x==2||x==3||x==7||x==61||x==24251)return 1;\n    return MR(x,2)&&MR(x,61);\n}//\u7d20\u6570\u5224\u5b9a\ninline int number(const int&x){\n\treturn tag[x]?tag[x]:(tag[x]=++totl);\n}//\u79bb\u6563\u5316\ninline void fac(register int x){\n\tif(x<2)return;//1\n\tif(isprime(x)){\n        tins[++to]=number(x);\n        return;\n    }//\u7d20\u6570\n    int h=sqrt(x);\n    int pos=upper_bound(bgp,bgp+3263,h)-bgp;//\u4e8c\u5206\u4f4d\u7f6e\n\tfor(int i=0;i<=(pos>>1);i=pos+1-i){\n\t\tif(!(x%bgp[i])){\n\t\t\ttins[++to]=number(bgp[i]),tins[++to]=number(x/bgp[i]);\n\t\t\treturn;//\u6025\u6d41\u52c7\u9000\n\t\t}\n        i=pos-i;\n\t\tif(!(x%bgp[i])){\n\t\t\ttins[++to]=number(bgp[i]),tins[++to]=number(x/bgp[i]);\n\t\t\treturn;\n\t\t}\n\t}//\u4e24\u8def\u63a8\u8fdb\n}\nsigned main(){\n\tinv[0]=inv[1]=1; \n\tread(n),read(m);   \n\tfor(int i=2;i<=(n<<1|1);++i)inv[i]=(mod-mod/i)*(long long)inv[mod%i]%mod;//\u7ebf\u6027\u9006\u5143\n    for(int i=1;i<=n;++i){\n    \tint a=0;\n    \tto=0;\n\t\tread(a);\n    \tmemcpy(suf[i],suf[i-1],sizeof(suf[i]));//\u524d\u7f00\u548c\n    \tfor(int it=0;it<168;++it)while(!(a%primes[it]))a/=primes[it],++suf[i][it];//1000\u4ee5\u5185\n    \tfac(a);//1000\u4ee5\u4e0a\n    \tfor(int it=1;it<=to;++it)bigtwo[i][++tot[i]]=tins[it];//\u8bb0\u5f55\n\t}\n\tfor(int i=1;i<=m;++i)read(q[i].l),read(q[i].r),q[i].id=i;\n\tsort(q+1,q+m+1,cmp);\n\tfill(cnt,cnt+(n<<1|1),1);//\u8ba1\u6570\u5668\n\tfor(int l=1,r=0,i=1;i<=m;++i){\n\t\twhile(r<q[i].r)add(++r);\n        while(l>q[i].l)add(--l);\n        while(r>q[i].r)del(r--);\n        while(l<q[i].l)del(l++);\n        long long anss=answ;\n        for(int si=0;si<168;++si)anss=anss*(suf[r][si]-suf[l-1][si]+1)%mod;//\u524d\u7f00\u548c\u7684\u8d21\u732e\n        out[q[i].id]=anss;//\u8bb0\u5f55\n\t}//\u83ab\u961f\u677f\u5b50\n\tfor(int i=1;i<=m;++i)printf(\"%lld\\n\",out[i]);//\u8f93\u51fa\n\treturn 0;\n} \n```\nOver.\n\n\u795d\u5927\u5bb6AC\uff01",
        "postTime": 1587281303,
        "uid": 250637,
        "name": "UnyieldingTrilobite",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "\u4e0d\u96be\u53d1\u73b0\uff0c\u6211\u4eec\u8981\u6c42\u7684\u662f$\\prod_{i=1}^{n}(a_i+1)$\uff0c\u5176\u4e2d$a_i$\u8868\u793a\u7b2c$i$\u4e2a\u8d28\u56e0\u5b50\u7684\u51fa\u73b0\u6b21\u6570\u3002\n\n\u8003\u8651\u83ab\u961f\u3002\u9996\u5148\u4e00\u8d77\u7ef4\u62a4\u6240\u6709\u8d28\u56e0\u5b50\u7684\u51fa\u73b0\u6b21\u6570\u662f\u80af\u5b9aT\u98de\u7684\u3002\n\n\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u4e00\u4e2a\u6570\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5927\u4e8e$\\sqrt{v}$\u7684\u8d28\u56e0\u5b50\u3002\u4e00\u4e2a\u76f4\u63a5\u7684\u601d\u8def\u662f\u628a\u5c0f\u4e8e$\\sqrt{v}$\u7684\u8d28\u6570\u5148\u62ff\u51fa\u6765\u505a\u524d\u7f00\u548c\u3002\u4f5b\u8bf4\u4e0d\u884c\uff0c\u5c0f\u4e8e$\\sqrt{n}$\u7684\u8d28\u6570\u592a\u591a\u4e86\u3002\n\n\u6211\u8bf4\uff0c\u90a3\u5c31\u4e24\u4e2a\u3002\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u4e00\u4e2a\u6570\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u5927\u4e8e$^3\\sqrt{v}$\u7684\u8d28\u56e0\u5b50\u3002\u4e00\u4e2a\u76f4\u63a5\u7684\u601d\u8def\u662f\u628a\u5c0f\u4e8e$^3\\sqrt{v}$\u7684\u8d28\u6570\u5148\u62ff\u51fa\u6765\u505a\u524d\u7f00\u548c\uff0c\u5269\u4e0b\u7684\u53bb\u83ab\u961f\u7ef4\u62a4\u3002\n\n\u4f5b\u54ed\u4e86\uff0c\u8bf4\u8fd9\u6837\u53ef\u4ee5AC\u3002\n\n\u5177\u4f53\u7684\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8f93\u5165\u7684\u6570\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u5c06\u5c0f\u4e8e$^3\\sqrt{v}$\u7684\u8d28\u56e0\u5b50\u51fa\u73b0\u6b21\u6570\u505a\u524d\u7f00\u548c\uff0c\u5927\u4e8e$^3\\sqrt{v}$\u7684\u6570\u5b58\u8d77\u6765\u5728\u83ab\u961f\u65f6\u7ef4\u62a4\u3002\u83ab\u961f\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5148\u8f6c\u79fb\u51fa\u5927\u8d28\u56e0\u5b50\u7684\u4e58\u79ef\uff0c\u968f\u540e\u66b4\u529b\u904d\u5386\u6240\u6709\u5c0f\u4e8e$^3\\sqrt{v}$\u7684\u8d28\u56e0\u5b50\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\n//#include <unordered_map>\nusing namespace std;\nconst int SV = 32000, MAXN = 100050, siz = 317, P = 19260817, S = 320;\nvoid read(int &x) {\n\tchar ch; while(ch = getchar(), ch < '!'); x = ch - 48;\n\twhile(ch = getchar(), ch > '!') x = (x << 3) + (x << 1) + ch - 48;\n}\nstruct Qry {int l, r, id;} q[MAXN];\nint cmp(Qry a, Qry b) {return a.l/siz == b.l/siz ? a.r < b.r : a.l < b.l;}\nstruct PV {int p, v;};\nbool notp[SV+5]; int p[SV+5], cntp, pre[MAXN][S+5], inv[P+1], ima, n, m, a[MAXN], ans[MAXN], id[SV+5], cnt[MAXN << 1], tot, pos[MAXN];\nvector <PV> w[MAXN]; map <int, int> mp;\nvoid add(int x) {\n\tint l = w[x].size();\n\tfor(int i = 0; i < l; ++i) {\n\t\tint pp = w[x][i].p, v = w[x][i].v;\n\t\tima = 1ll * ima * inv[cnt[pp] % P] % P;\n\t\tcnt[pp] += v;\n\t\tima = 1ll * ima * (cnt[pp]) % P;\n\t}\n}\nvoid del(int x) {\n\tint l = w[x].size();\n\tfor(int i = 0; i < l; ++i) {\n\t\tint pp = w[x][i].p, v = w[x][i].v;\n\t\tima = 1ll * ima * inv[cnt[pp] % P] % P;\n\t\tcnt[pp] -= v;\n\t\tima = 1ll * ima * (cnt[pp] % P) % P;\n\t}\n}\nvoid init() {\n\tfor(int i = 2; i <= SV; ++i) {\n\t\tif(!notp[i]) p[++cntp] = i, id[i] = cntp;\n\t\tfor(int j = 1; j <= cntp && 1ll*i*p[j] <= SV; ++j) {\n\t\t\tnotp[i * p[j]] = 1;\n\t\t\tif(i % p[j] == 0) break;\n\t\t}\n\t} inv[1] = 1;\n\tfor(int i = 2; i <= P-1; ++i) inv[i] = 1ll*(P-P/i)*inv[P%i]%P;\n}\nvoid pus(int i, int x, int k) {\n\tif(x < p[S]) pre[i][id[x]] += k;\n\telse {\n\t\tif(!mp[x]) mp[x] = ++tot, pos[tot] = x;\n\t\tw[i].push_back((PV) {mp[x], k});\n\t}\n}\nvoid Getpre() {\n\tfor(int i = 1; i <= n; ++i) {\n\t\tint x = a[i];\n\t\tfor(int j = 1; p[j] * p[j] <= x && j <= cntp; ++j)\n\t\t\tif(x % p[j] == 0) {\n\t\t\t\tint cc = 0;\n\t\t\t\tfor(; x % p[j] == 0; ++cc, x /= p[j]);\n\t\t\t\tpus(i, p[j], cc);\n\t\t\t}\n\t\tif(x != 1) pus(i, x, 1);\n\t\tfor(int j = 1; j <= S; ++j) pre[i][j] += pre[i-1][j];\n\t}\n}\nint main() {\n\tread(n); read(m); for(int i = 1; i <= n; ++i) read(a[i]);\n\tfor(int i = 1; i <= m; ++i) read(q[q[i].id = i].l), read(q[i].r);\n\tsort(q+1, q+m+1, cmp); init(); Getpre(); ima = 1;\n\tfor(int i = 1; i <= tot; ++i) cnt[i] = 1;\n\tfor(int L = 1, R = 0, l, r, i = 1; i <= m; ++i) {\n\t\tl = q[i].l; r = q[i].r;\n\t\twhile(R < r) add(++R); while(L > l) add(--L);\n        while(R > r) del(R--); while(L < l) del(L++);\n\t\tans[q[i].id] = ima;\n\t\tfor(int j = 1; j <= S; ++j)\n\t\t\tans[q[i].id] = 1ll*ans[q[i].id]*(pre[r][j]-pre[l-1][j]+1)%P;\n\t}\n\tfor(int i = 1; i <= m; ++i) printf(\"%d\\n\", ans[i]);\n}\n\n```",
        "postTime": 1572011661,
        "uid": 2491,
        "name": "\u8bd7\u4e43",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "\u5404\u4f4d\u540c\u5b66\u5927\u5bb6\u597d\uff0c\u6211\u662f\u6708\u4e38\uff0c\u4eca\u5929\u6765\u7ed9\u5927\u5bb6\u770b\u770b\u8fd9\u9053 15 \u5e74\u7684 Ynoi \u9898\u3002\n\n\u4e00\u5f00\u9898\uff0c\u8fd9\u4e2a\u4e0d\u662f\u6c34\u9898\u5417\uff1f\u600e\u4e48\u8fd8\u8981\u5957\u4e2a Pollard-Rho \u7684\uff0c\u54ce\u5440\u6211\u4eca\u5929\u771f\u662f\u7206\u70b8\u4e86\u3002\n\n\u6211\u4e0d\u4f1a\u5199 Pollard-Rho\uff0c\u5373\u4f7f\u5199\u4e86\u4e5f\u7b49\u4e8e\u767d\u5199\uff0c\u6ca1\u6709\u5199\u51fa\u6765\u6216\u662f\u5e38\u6570\u7206\u70b8\uff0c\u5199\u5b8c\u4e86\u5c31\u653e\u8fdb\u4e86\u5e94\u8be5\u53bb\u7684\u5730\u65b9\uff08\u6307 TLE\uff09\u3002\n\n\u6240\u4ee5\u6211\u5c31\u7528\u4e86\u66b4\u529b $O(\\sqrt {a_i} + n \\cdot \\frac {\\sqrt{a_i}}{\\log a_i})$ \u5206\u89e3\u8d28\u56e0\u6570\u7684\u65b9\u6cd5\u3002\n\n\u5f53\u7136\u8fd9\u6837\u80af\u5b9a\u8fc7\u4e0d\u53bb\u7684\uff0c\u540e\u9762\u90a3\u73a9\u610f $10^5 \\times 3401 = 3.401 \\times 10^8$\uff0c\u5e26\u4e2a\u9664\u6cd5\u64cd\u4f5c\u4e0d\u5f97\u7206\u70b8\uff1f\u4f60\u8fd9\u5361\u5361\u5361\u5361\u4ec0\u4e48\u5361\u554a\uff0c\u8bc4\u6d4b\u673a\u6839\u672c\u9876\u4e0d\u4f4f\u3002\n\n\u4ed9\u5e03\u7740\u6025\uff0c\u52a0\u4e2a Exact Division \u5c31\u53ef\u4ee5\u4e86\u3002\u8dd1\u51fa\u6765\u8868\u73b0\u826f\u597d\uff0c\u8d28\u56e0\u6570\u5206\u89e3\u90e8\u5206\u65f6\u95f4\u4e0d\u8d85\u8fc7 250ms [R48632123](https://www.luogu.com.cn/record/48632123)\uff0c\u603b\u7a0b\u5e8f\u53ef\u5728\u4e0d\u52a0\u524d\u7f00\u548c / O2 \u4f18\u5316\u7684\u60c5\u51b5\u4e0b\u901a\u8fc7\u672c\u9898 [R48632082](https://www.luogu.com.cn/record/48632082)\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O((n + q)\\sqrt n + n\\frac {\\sqrt{a_i}}{\\log a_i} + \\sqrt {a_i})$\u3002\n\n### \u5bf9 Exact Divison \u7684\u7b80\u5355\u4ecb\u7ecd\nExact Division \u53ef\u7528\u4e8e\u4f18\u5316\u6574\u9664\u8ba1\u7b97\u7684\u5e38\u6570\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u6574\u6570 $0 \\leq a, b < 2^k$\uff0c\u4e14 $b$ \u4e3a\u5927\u4e8e $1$ \u7684\u5947\u6570\uff0c\u5219\u6709\uff1a$a \\bmod b = 0$ \u5f53\u4e14\u4ec5\u5f53\n\n$$ab' \\bmod 2^k \\leq \\lfloor \\frac {2^k}b \\rfloor$$\n\n\u5176\u4e2d $b' = b^{-1} \\pmod {2^k}$\uff0c\u4e14\u6b64\u65f6\u6709 $\\frac ab = ab' \\bmod 2^k$\u3002\n\n\u5bf9\u6bcf\u4e2a $b$\uff0c\u9884\u5904\u7406\u51fa $b'$ \u548c $r = \\lfloor \\frac {2^k}b \\rfloor$\uff0c\u5219\u5f53 $k = 32$ \u65f6\u8be5\u7b97\u6cd5\u53ea\u9700\u8981\u4e00\u6b21\u4e58\u6cd5\u548c\u4e00\u6b21\u6bd4\u8f83\u3002\u636e\u6d4b\u8bd5\uff0c\u6b64\u7b97\u6cd5\u6bd4\u901a\u5e38\u8ba1\u7b97\u5e38\u6570\u4f1a\u4f18\u5316 $8 \\sim 10$ \u500d\u3002\n\n\u5f53 $b$ \u4e3a\u5076\u6570\u65f6\uff0c\u53ef\u4ee5\u4ee4 $b = b_02^k$\uff0c\u5c06\u8be5\u7b97\u6cd5\u8f6c\u5316\u4e3a\u4e00\u6b21\u6309\u4f4d\u4e0e + \u4e00\u6b21\u53f3\u79fb + \u4e00\u6b21\u4e58\u6cd5 + \u4e00\u6b21\u6bd4\u8f83\u3002\u7531\u4e8e\u5927\u4e8e $2$ \u7684\u8d28\u6570\u5168\u4e3a\u5947\u6570\uff0c\u6240\u4ee5\u8be5\u7b97\u6cd5\u53ef\u4ee5\u5f88\u597d\u5730\u9002\u7528\u8d28\u56e0\u6570\u5206\u89e3\u7b49\u7b97\u6cd5\u3002\n\n\u4f18\u70b9\uff1a\n\n* \u5e38\u6570\u8f83\u5176\u4ed6\u7684\u4f18\u5316\u7b97\u6cd5\u90fd\u5c0f\uff0c\u6709\u663e\u8457\u7684\u4f18\u5316\u6548\u679c\n\n\u7f3a\u70b9\uff1a\n\n* \u9002\u7528\u8303\u56f4\u5c0f\uff0c\u591a\u7528\u4e8e\u66b4\u529b\u8d28\u56e0\u6570\u5206\u89e3 / \u90e8\u5206\u7b5b\u6cd5\uff08e.g. \u7ebf\u6027\u7b5b\uff09\u7684\u52a0\u901f\n\n\u53ef\u53c2\u89c1 [Exact division by constants \u7b80\u4ecb - hly1024](https://loj.ac/d/3068) / [\u9664\u7b97\u30fb\u5270\u4f59\u7b97\u306e\u9ad8\u901f\u5316 - Min_25](https://min-25.hatenablog.com/entry/2017/08/20/171214)\u3002\n\n### \u8bc1\u660e\u6b63\u786e\u6027\n\u5f53 $a = nb$ \u65f6\u663e\u7136\u6709 $ab' \\bmod 2^k = nbb' \\bmod 2^k = n \\bmod 2^k = n$\u3002\u6b64\u65f6\u6709\u9650\u5236 $a = nb \\leq 2^k$\uff0c\u5373 $n \\leq \\lfloor \\frac {2^k}b \\rfloor$\uff0c\u5373 $ab' \\bmod 2^k \\leq \\lfloor \\frac {2^k}b \\rfloor$\u3002\n\n\u540c\u7406\uff0c\u5f53 $ab' \\bmod 2^k \\leq \\lfloor \\frac {2^k}b \\rfloor$ \u65f6\u4e5f\u5fc5\u5b9a\u5b58\u5728 $n \\leq \\lfloor \\frac {2^k}b \\rfloor$ \u4f7f\u5f97 $a = nb$\u3002\n\n\u56e0\u6b64 $a \\bmod b = 0 \\Leftrightarrow ab' \\bmod 2^k \\leq \\lfloor \\frac {2^k}b \\rfloor$\uff0c\u4e14 $a = nb$ \u65f6\u6709 $n = ab' \\bmod 2^k$\u3002\n\n\u8bc1\u6bd5\u3002\n\n### \u5b9e\u73b0\u4f8b\n\u4e0b\u9762\u4ee3\u7801\u8282\u9009\u81ea [\u9664\u7b97\u30fb\u5270\u4f59\u7b97\u306e\u9ad8\u901f\u5316 - Min_25](https://min-25.hatenablog.com/entry/2017/08/20/171214)\u3002\n\n```cpp\nusing i64 = long long;\nusing u32 = unsigned;\nusing u64 = unsigned long long;\n\ntemplate <typename T>\nstruct ExactDiv {\n  ExactDiv() {}\n  ExactDiv(T n) : t(T(-1) / n), i(mul_inv(n)) {}\n  T mul_inv(T n) {\n    T x = n;\n    for (int i = 0; i < 5; ++i) x *= 2 - n * x;\n    return x;\n  }\n  friend T operator / (T n, ExactDiv d) { return n * d.i; };\n  bool divide(T n) { return n * this->i <= this->t; }\n  T t, i;\n};\n```\n\n### \u672c\u9898\u4ee3\u7801\n```cpp\n// In the name of\n//\n//      _/_/      _/_/_/        _/_/_/    _/_/_/_/    _/    _/    _/_/_/_/\n//    _/    _/    _/    _/    _/          _/          _/    _/    _/\n//    _/_/_/_/    _/_/_/_/    _/          _/_/_/_/    _/    _/    _/_/_/_/\n//    _/    _/    _/  _/      _/          _/          _/    _/          _/\n//    _/    _/    _/    _/      _/_/_/    _/_/_/_/    _/_/_/_/    _/_/_/_/\n//\n\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <vector>\n#include <bitset>\n\n#define For(i, l, r) for (i = int64(l); i <= int64(r); i++)\n#define Fo(i, n) For(i, 1, n)\n#define Rof(i, r, l) for (i = int64(r); i >= int64(l); i--)\n#define Ro(i, n) Rof(i, n, 1)\n#define clr(a) memset(a, 0, sizeof(a))\n#define cpy(a, b) memcpy(a, b, sizeof(b))\n#define fc(a, ch) memset(a, ch, sizeof(a))\n\ntypedef double real;\ntypedef long double extended;\ntypedef unsigned uint;\ntypedef unsigned long long uint64;\ntypedef long long int64;\n\n#define T1 template <class A>\n#define T2 template <class A, class B>\n#define T3 template <class A, class B, class C>\n#define T4 template <class A, class B, class C, class D>\ninline void read(char &x) {\n    do\n        x = getchar();\n\n    while (x <= ' ');\n}\ninline void read(char *s) {\n    char ch;\n\n    do\n        ch = getchar();\n\n    while (ch <= ' ');\n\n    while (ch > ' ') {\n        (*s) = ch;\n        s++;\n        ch = getchar();\n    }\n\n    (*s) = 0;\n}\ninline void read(std::string &s) {\n    char ch;\n\n    do\n        ch = getchar();\n\n    while (ch <= ' ');\n\n    while (ch > ' ') {\n        s.push_back(ch);\n        ch = getchar();\n    }\n}\nT1 inline void readint(A &x) {\n    bool neg = false;\n    char ch;\n\n    do\n        ch = getchar();\n\n    while (ch <= ' ');\n\n    if (ch == '-') {\n        neg = true;\n        ch = getchar();\n    }\n\n    x = 0;\n\n    while (ch > ' ') {\n        x = x * 10 + (ch & 15);\n        ch = getchar();\n    }\n\n    if (neg)\n        x = -x;\n}\ninline void read(int &x) { readint(x); }\ninline void read(uint &x) { readint(x); }\ninline void read(int64 &x) { readint(x); }\ninline void read(uint64 &x) { readint(x); }\n\nT2 inline void read(A &a, B &b) {\n    read(a);\n    read(b);\n}\nT3 inline void read(A &a, B &b, C &c) {\n    read(a);\n    read(b);\n    read(c);\n}\nT4 inline void read(A &a, B &b, C &c, D &d) {\n    read(a);\n    read(b);\n    read(c);\n    read(d);\n}\ninline void writeln() { putchar('\\n'); }\nT1 inline void writeint(A x) {\n    static char buf[20];\n    int top = 0;\n\n    if (!x) {\n        putchar('0');\n        return;\n    }\n\n    if (x < 0) {\n        putchar('-');\n        x = -x;\n    }\n\n    while (x) {\n        buf[++top] = (x % 10) | 48;\n        x /= 10;\n    }\n\n    while (top)\n        putchar(buf[top--]);\n}\ninline void write(int x) { writeint(x); }\ninline void write(uint x) { writeint(x); }\ninline void write(int64 x) { writeint(x); }\ninline void write(uint64 x) { writeint(x); }\ninline void write(char ch) { putchar(ch); }\ninline void write(char *s) {\n    while (*s) {\n        putchar(*s);\n        s++;\n    }\n}\ninline void write(const char *s) { printf(s); }\nT1 inline void write_(A x) {\n    write(x);\n    putchar(' ');\n}\nT1 inline void writeln(A x) {\n    write(x);\n    putchar('\\n');\n}\nT2 inline void write(A a, B b) {\n    write_(a);\n    write(b);\n}\nT2 inline void writeln(A a, B b) {\n    write_(a);\n    writeln(b);\n}\nT3 inline void writeln(A a, B b, C c) {\n    write_(a);\n    write_(b);\n    writeln(c);\n}\nT4 inline void writeln(A a, B b, C c, D d) {\n    write_(a);\n    write_(b);\n    write_(c);\n    writeln(d);\n}\n#undef T1\n#undef T2\n#undef T3\n#undef T4\n\n\nconst int N = 1e5 + 10;\nconst int M = N * 30;\nconst int A = 31622;\nconst int MOD = 19260817;\n\nint n, q, B;\n\nint pn;\nuint pc[N], pd[N];\nint p[N];\n\nint a[N][15], b[N][15], an[N];\n\nint c[N << 1];\nint inv[M];\nint qans[N];\n\nstd::map<int, int> idmap;\nint idcnt = A;\n\nstruct node{\n\tint id, l, r;\n\tbool operator < (const node &b) const { return (l / B != b.l / B) ? (l < b.l) : ((l / B & 1) == (r < b.r)); }\n};\nnode qs[N];\n\nuint inv32(uint n) {\n\tuint x = n, i;\n\tFo(i, 5) x *= 2 - n * x;\n\treturn x;\n}\n\ninline int qpow(int64 b, int p, int mod=MOD) {\n\tint res = 1;\n\twhile(p) {\n\t\tif(p & 1)\n\t\t\tres = res * b % mod;\n\t\tb = b * b % mod;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n\nvoid init() {\n\tstatic bool notp[N];\n\tint i, j, x;\n\t\n\tfor(i=2; i<=A; i++) {\n\t\tif(!notp[i]) {\n\t\t\tp[++pn] = i;\n\t\t\tpc[pn] = inv32(i);\n\t\t\tpd[pn] = uint(-1) / i;\n\t\t}\n\t\tfor(j=1; j<=pn and i*p[j]<=A; j++) {\n\t\t\tnotp[i*p[j]] = true;\n\t\t\tif(!(i % p[j])) break;\n\t\t}\n\t}\n\t\n\tinv[0] = x = 1;\n\tFo(i, M - 1) x = 1LL * x * i % MOD;\n\tinv[M - 1] = qpow(x, MOD - 2);\n\tRo(i, M - 2) inv[i] = inv[i + 1] * (i + 1LL) % MOD;\n\tx = 1; Fo(i, M - 1) inv[i] = 1LL * inv[i] * x % MOD, x = 1LL * x * i % MOD;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"a.in\", \"r\", stdin);\n\tfreopen(\"a.out\", \"w\", stdout);\n#endif\n\n\tint i, j, k;\n\tint l, r, ans = 1;\n\tuint x;\n\t\n\tinit();\n\t\n\tread(n, q);\n\tB = sqrt(n);\n\tFo(i, n) {\n\t\tread(x);\n\t\tk = 0;\n\t\tif(~x & 1) {\n\t\t\tk++;\n\t\t\ta[i][k] = 1;\n\t\t\tb[i][k] = 1;\n\t\t\tfor(x >>= 1; ~x & 1; x >>= 1) \n\t\t\t\tb[i][k]++;\n\t\t}\n\t\t\n\t\tFor(j, 2, pn) {\n\t\t\tif(pc[j] * x <= pd[j]) {\n\t\t\t\tk++;\n\t\t\t\ta[i][k] = j;\n\t\t\t\tb[i][k] = 1;\n\t\t\t\tx *= pc[j];\n\t\t\t\twhile(pc[j] * x <= pd[j]) {\n\t\t\t\t\tx *= pc[j];\n\t\t\t\t\tb[i][k]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(x > 1) {\n\t\t\tk++;\n\t\t\ta[i][k] = idmap[x] ? idmap[x] : (idmap[x] = ++idcnt);\n\t\t\tb[i][k] = 1;\n\t\t} \n\t\tan[i] = k;\n\t}\n\t\n\tFo(i, q) {\n\t\tqs[i].id = i;\n\t\tread(qs[i].l, qs[i].r);\n\t}\n\t\n\tstd::sort(qs+1, qs+1+q);\n\tl = 1;\n\tr = 0;\n\t#define inc(p)  Fo(i, an[p]) { \\\n\t\t\t\t        ans = 1LL * inv[c[a[p][i]] + 1] * ans % MOD; \\\n\t\t\t\t        c[a[p][i]] += b[p][i]; \\\n\t\t\t\t        ans = 1LL * (c[a[p][i]] + 1) * ans % MOD; \\\n\t\t\t\t\t}\n\t#define dec(p)  Fo(i, an[p]) { \\\n\t\t\t\t        ans = 1LL * inv[c[a[p][i]] + 1] * ans % MOD; \\\n\t\t\t\t        c[a[p][i]] -= b[p][i]; \\\n\t\t\t\t        ans = 1LL * (c[a[p][i]] + 1) * ans % MOD; \\\n\t\t\t\t\t}\n\tFo(k, q) {\n\t\twhile(r < qs[k].r) { r++; inc(r); }\n\t\twhile(l > qs[k].l) { l--; inc(l); }\n\t\twhile(r > qs[k].r) { dec(r); r--; }\n\t\twhile(l < qs[k].l) { dec(l); l++; }\n\t\tqans[qs[k].id] = ans;\n\t}\n\tFo(i, q) writeln(qans[i]);\n\treturn 0;\n}\n```\n\n*\u613f\u6211\u4eec\u7684\u771f\u4e3b\uff0c\u5b9d\u53ef\u68a6\u4e16\u754c\u4e4b\u552f\u4e00\u795e\uff0c\u963f\u5c14\u5b99\u65af\uff0c\u4fdd\u4f51\u4f60\u3002*",
        "postTime": 1616979619,
        "uid": 45398,
        "name": "Tsukimaru",
        "ccfLevel": 0,
        "title": "\u5173\u4e8e\u6211\u4e0d\u4f1a\u5199 PR \u8fd9\u4ef6\u4e8b || P5071 [Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89"
    },
    {
        "content": "\u524d\u7f6e\u77e5\u8bc6\uff1a\u7ea6\u6570\u4e2a\u6570\u5b9a\u7406\uff0cPollard-Rho\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u83ab\u961f\uff0c~~\u5361\u5e38~~\u3002\n\n\u79bb\u7ebf\u533a\u95f4\u8be2\u95ee\uff0c\u8003\u8651\u83ab\u961f\u3002\u67e5\u8be2\u7ea6\u6570\u4e2a\u6570\uff0c\u8003\u8651PR\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u7528\u7ea6\u6570\u4e2a\u6570\u5b9a\u7406\u3002\n\n\u4e00\u4e2a\u5f88\u597d\u60f3\u7684\u601d\u8def\uff1a\u5148\u9884\u5904\u7406\u51fa\u6240\u6709\u6570\u7684\u56e0\u6570\uff0c\u7528unordered_map\u7f29\u5c0f\u8303\u56f4\uff0c\u76f4\u63a5\u8dd1\u83ab\u961f\u3002\u53ef\u662f\u8fd9\u6837\u4f1aT\uff01\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5361\u5e38\uff1a\n\n\u9996\u5148\u662f\u6839\u53f7\u5206\u6cbb\u7684\u601d\u60f3\uff0c$1000$ \u4ee5\u5185\u7684\u8d28\u6570\uff08\u53ea\u6709 $168$ \u4e2a\uff09\u76f4\u63a5\u66b4\u529b\u524d\u7f00\u548c\uff0c\u6bcf\u6b21\u56de\u7b54\u8be2\u95ee\u7684\u65f6\u5019\u90fd\u4e58\u4e00\u904d\u5c31\u884c\u3002\u7531\u4e8e\u6570\u7684\u8303\u56f4\u662f $10^9$ \uff0c\u56e0\u6b64\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u8d85\u8fc71000\u7684\u56e0\u6570\uff0c\u8dd1\u83ab\u961f\u5c31\u4e0d\u4f1aT\u4e86\u3002\n\n\u6bd5\u7adf\u662fYnoi\u9898\uff0c\u80fd\u52a0\u7684\u4f18\u5316\u90fd\u52a0\u4e0a\uff0c\u6bd4\u5982\u500d\u589e\u4f18\u5316PR\uff08\u89c1P4718\u9898\u89e3\uff09\u548c\u9884\u5904\u7406\u9006\u5143\u3002\u6ce8\u610f\u6bcf\u4e2a\u6570\u6700\u591a\u4e24\u4e2a\u8d85\u8fc7 $1000$ \u7684\u56e0\u6570\uff0c\u56e0\u6b64\u9006\u5143\u81f3\u5c11\u8981\u9884\u5904\u7406\u5230 $n \\times 2$ \u3002\n\n\u8fd9\u9053\u9898\u601d\u8def\u4e0d\u96be\uff0c\u5c31\u662f\u4ee3\u7801\u4e0d\u597d\u5199\u3002\u6ce8\u610f\u6bcf\u4e2a\u6570\u6700\u591a\u4e24\u4e2a\u8d85\u8fc7 $1000$ \u7684\u56e0\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u7b80\u5316PR\u7684\u8fc7\u7a0b\uff0c\u53bb\u6389\u5206\u6cbb\u7684\u90e8\u5206\uff0c\u53ea\u9700\u627e\u51fa\u4e00\u4e2a\u56e0\u6570\u5373\u53ef\u3002\u6700\u7ec8\u7801\u91cf\u4e5f\u4e0d\u7b97\u5f88\u5927\uff0c\u5927\u7ea62.5KB\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<unordered_map>\nconst int p=19260817,N=100009;\nint pr[171],tot;\nbool f[1009];\nvoid getprime(int n){//\u7ebf\u6027\u7b5b1000\u4ee5\u5185\u7684\u8d28\u6570\n\tint i,j,k;\n\tf[1]=1; \n\tfor(i=2;i<=n;++i){\n\t\tif(!f[i])pr[++tot]=i;\n\t\tfor(j=1;k=i*pr[j],j<=tot&&k<=n;++j){\n\t\t\tf[k]=1;\n\t\t\tif(!(i%pr[j]))break;\n\t\t}\n\t}\n}\nint inv[N<<1];\nvoid getinv(int n){//\u7ebf\u6027\u6c42\u9006\u5143\n\tint i;\n\tinv[1]=1;\n\tfor(i=2;i<=n;++i)inv[i]=(p-p/i)*1ll*inv[p%i]%p;\n}\nint gcd(int x,int y){\n\treturn y?gcd(y,x%y):x;\n}\nint qp(int a,int b,int p){\n\tint r=1;\n\twhile(b){\n\t\tif(b&1)r=r*1ll*a%p;\n\t\ta=a*1ll*a%p,b>>=1;\n\t}\n\treturn r;\n}\nbool MR(int n){//Miller-Rabin\u5224\u65ad\u8d28\u6570\n\tif(n<1001)return f[n];\n\tint m=n-1,x,y,r=m,i,j,t=0;\n\twhile(!(r&1))r>>=1,++t;\n\tfor(i=1;i<11;++i){\n\t\tx=qp(pr[i],r,n);\n\t\tfor(j=0;j<t&&x>1;++j){\n\t\t\ty=x*1ll*x%n;\n\t\t\tif(y==1&&x!=m)return 1;\n\t\t\tx=y;\n\t\t}\n\t\tif(x!=1)return 1;\n\t}\n\treturn 0;\n}\nint PR(int n){//Pollard-Rho\u5206\u89e3\u8d28\u56e0\u6570\n\tint s=0,t=0,c=rand()%(n-1)+1,w=1,d,g,p;\n\tfor(g=1,p;;g<<=1,s=t,w=1){\n\t\tfor(p=0;p<g;++p){\n\t\t\tt=(t*1ll*t+c)%n,w=w*1ll*(t>s?(t-s):(s-t))%n;\n\t\t\tif(!(p&63)){\n\t\t\t\td=gcd(w,n);\n\t\t\t\tif(d>1)return d;\n\t\t\t}\n\t\t}\n\t\td=gcd(w,n);\n\t\tif(d>1)return d;\n\t}\n}\nint a[N],b[N],s[171][N],ans[N],now=1,g[N<<1];\nstruct Q{\n\tint l,r,bl,id;\n\tinline bool operator<(Q a)const{return bl<a.bl||(bl==a.bl&&((bl&1)?r<a.r:r>a.r));}\n}q[N];\nstd::unordered_map<int,int>mp;\ninline void add(int x){\n\tif(a[x]){\n\t\tnow=now*1ll*inv[g[a[x]]]%p*(g[a[x]]+1)%p,++g[a[x]];\n\t\tif(b[x])now=now*1ll*inv[g[b[x]]]%p*(g[b[x]]+1)%p,++g[b[x]];\n\t}\n}\ninline void del(int x){\n\tif(a[x]){\n\t\tnow=now*1ll*inv[g[a[x]]]%p*(g[a[x]]-1)%p,--g[a[x]];\n\t\tif(b[x])now=now*1ll*inv[g[b[x]]]%p*(g[b[x]]-1)%p,--g[b[x]];\n\t}\n}\nint main(){\n\tint i,j,k,n,m,bl,l=1,r=0,id=0;\n\tscanf(\"%d%d\",&n,&m),bl=sqrt(n);\n\tgetprime(1000),getinv(n<<1);\n\tfor(i=1;i<=n;++i){\n\t\tscanf(\"%d\",a+i);\n\t\tfor(j=1;j<=tot;++j){\n\t\t\twhile(!(a[i]%pr[j]))a[i]/=pr[j],++s[j][i];\n\t\t\ts[j][i]+=s[j][i-1];\n\t\t}\n\t\tif(a[i]>1&&MR(a[i])){\n\t\t\tb[i]=a[i];\n\t\t\twhile(b[i]==a[i])b[i]=PR(a[i]);\n\t\t\ta[i]/=b[i];\n\t\t}\n\t\tif(a[i]>1){\n\t\t\tif(b[i]){\n\t\t\t\tif(!mp.count(b[i]))mp[b[i]]=++id;\n\t\t\t\tb[i]=mp[b[i]];\n\t\t\t}\n\t\t\tif(!mp.count(a[i]))mp[a[i]]=++id;\n\t\t\ta[i]=mp[a[i]]; \n\t\t}else a[i]=0;\n\t}//\u9884\u5904\u7406\u90e8\u5206\n\tfor(i=1;i<=id;++i)g[i]=1;\n\tfor(i=1;i<=m;++i)scanf(\"%d%d\",&q[i].l,&q[i].r),q[i].bl=q[i].l/bl,q[i].id=i;\n\tstd::sort(q+1,q+m+1);\n\tfor(i=1;i<=m;++i){\n\t\twhile(l>q[i].l)add(--l);\n\t\twhile(r<q[i].r)add(++r);\n\t\twhile(l<q[i].l)del(l++);\n\t\twhile(r>q[i].r)del(r--);\n\t\tfor(j=1,k=now;j<=tot;++j)k=k*1ll*(s[j][r]-s[j][l-1]+1)%p;\n\t\tans[q[i].id]=k;\n\t}//\u83ab\u961f\u90e8\u5206\n\tfor(i=1;i<=m;++i)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1581340708,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "\u7b2c\u5341\u9053Ynoi\u5fc5\u987b\u796d.jpg\n\n\u9996\u5148\u8fd9\u9053\u9898\u4e00\u773c\u83ab\u961f\uff0c\u5bf9\u6bcf\u4e2a\u6570\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u79bb\u6563\u5316\u8d28\u56e0\u6570\uff0c\u83ab\u961f\u5f00\u6876\u7edf\u8ba1\u3002\n\n\u8bbe $v$ \u4e3a\u503c\u57df\uff0c\u5219\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt{n}\\log n+n\\sqrt{v})$\uff0c~~\u8dd1\u5f97\u98de\u5feb~~\n\n\u8003\u8651\u53e6\u4e00\u79cd\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u524d\u7f00\u548c\u7edf\u8ba1\uff0c\u8bb0 $sum[i][j]$ \u4e3a\u7b2c $[1,i]$ \u7684\u6570\u4e2d\u8d28\u56e0\u6570 $j$ \u51fa\u73b0\u7684\u6b21\u6570\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8be2\u95ee\u53ef\u4ee5\u66b4\u529b\u524d\u7f00\u548c\u3002\n\n\u4f46 $1\\sim 10^9$ \u4e2d\u7684\u56e0\u6570\u6709\u4ebf\u70b9\u591a\uff0c\u7136\u800c\u56e0\u6570\u8d8a\u5927\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u5b83\u5728\u8d28\u56e0\u6570\u4e00\u4e2a\u6570\u7684\u8d28\u56e0\u6570\u5206\u89e3\u5f0f\u91cc\u9762\u51fa\u73b0\u6b21\u6570\u8d8a\u5c11\u2026\u2026\n\n\u81ea\u7136\u60f3\u5230\u6839\u53f7\u5206\u6cbb\u3002\u8bbe\u4e00\u4e2a\u9608\u503c $k$\uff0c\u5219 $\\le k$ \u7684\u56e0\u6570\u524d\u7f00\u548c\u7edf\u8ba1\uff0c$>k$ \u7684\u83ab\u961f\u3002\n\n$k$ \u53d6\u5230 $\\sqrt{v}$ \u76f4\u63a5\u7a7a\u95f4\u7206\u70b8\uff0c\u6240\u4ee5\u53d6\u5230 $\\sqrt[3]v=1000$ \u662f\u8f83\u4e3a\u4f18\u79c0\u7684\u65b9\u6848\uff0c\u6bcf\u4e2a\u6570\u9664\u53bb\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e $1000$ \u7684\u8d28\u56e0\u5b50\u540e\uff0c\u53ea\u4f1a\u5269\u4e0b\u81f3\u591a\u4e24\u4e2a\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53bb\u6389\u4e86\u4e00\u4e2a $\\log$\uff0c\u590d\u6742\u5ea6 $O(nk+mk+n\\sqrt{v}+n\\sqrt{m})$\uff0c\u5373 $O(n\\sqrt{v}+n\\sqrt{m}+m\\sqrt{v})$\u3002\n\n\u8fd9\u91cc\u83ab\u961f\u7684\u65f6\u5019\u6d89\u53ca\u9664\u6cd5\uff0c\u6240\u4ee5\u8981\u5148\u9884\u5904\u7406\u51fa\u9006\u5143\u3002\n\n\u4ee3\u7801\u975e\u5e38\u597d\u5199\uff0c\u53ef\u4ee5\u5728\u65f6\u9650\u7684\u4e00\u534a\u5185\u901a\u8fc7\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5176\u5b83\u9898\u89e3\u90fd\u7528\u4e86PR\uff08\n\n~~\u5176\u5b9e\u662f\u6211\u4e0d\u4f1aPR~~\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <map>\n#define int unsigned int\n\nconst int K = 1000;\nconst int mod = 19260817;\nint a[100005], p[100005], ans[100005], cnt[500005], len, S, id, now = 1;\nint fac[100005][3], sum[100005][170], R[100005][12];\nint inv[200005];\nbool mark[40005];\nstd::map<int, int> mp;\nstruct Quest {\n\tint l, r, id;\n\tinline bool operator < (const Quest a) {\n\t\treturn (l - 1) / S == (a.l - 1) / S ? ((l - 1) / S & 1 ? r < a.r : r > a.r) : l < a.l;\n\t}\n} q[100005];\n\nint qpow(int a, int b) {\n\tint ret = 1LL;\n\twhile (b) {\n\t\tif (b & 1) ret = ret * a % mod;\n\t\ta = a * a % mod;\n\t\tb >>= 1;\n\t}\n\treturn ret;\n}\ninline void add(int x) {\n\tif (fac[x][1]) {\n\t\tnow = 1LL * now * inv[cnt[fac[x][1]] + 1] % mod;\n\t\tcnt[fac[x][1]] += R[x][1];\n\t\tnow = 1LL * now * (cnt[fac[x][1]] + 1) % mod;\n\t}\n\tif (fac[x][2]) {\n\t\tnow = 1LL * now * inv[cnt[fac[x][2]] + 1] % mod;\n\t\tcnt[fac[x][2]] += R[x][2];\n\t\tnow = 1LL * now * (cnt[fac[x][2]] + 1) % mod;\t\n\t}\n}\ninline void del(int x) {\n\tif (fac[x][1]) {\n\t\tnow = 1LL * now * inv[cnt[fac[x][1]] + 1] % mod;\n\t\tcnt[fac[x][1]] -= R[x][1];\n\t\tnow = 1LL * now * (cnt[fac[x][1]] + 1) % mod;\n\t}\n\tif (fac[x][2]) {\n\t\tnow = 1LL * now * inv[cnt[fac[x][2]] + 1] % mod;\n\t\tcnt[fac[x][2]] -= R[x][2];\n\t\tnow = 1LL * now * (cnt[fac[x][2]] + 1) % mod;\n\t}\n}\n\nsigned main() {\n\tint n, m, l = 1, r = 0;\n\tscanf(\"%u%u\", &n, &m);\n\tS = n / sqrt(m);\n\tinv[1] = 1;\n\tfor (int i = 2; i <= 2 * n; ++ i)\n\t\tinv[i] = 1LL * (mod - mod / i) * inv[mod % i] % mod;\n\tfor (int i = 1; i <= n; ++ i) scanf(\"%u\", a + i);\n\tfor (int i = 2; i <= 40000; ++ i) if (!mark[i]) {\n\t\tp[++ len] = i;\n\t\tfor (int j = i * i; j <= 40000; j += i) mark[j] = true;\n\t}\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tint t = 0;\n\t\tfor (int j = 1; j <= 168; ++ j) sum[i][j] = sum[i - 1][j];\n\t\tfor (int j = 1; j <= len && p[j] * p[j] <= a[i]; ++ j)\n\t\t\tif (a[i] % p[j] == 0) {\n\t\t\t\tint r = 0;\n\t\t\t\twhile (a[i] % p[j] == 0) a[i] /= p[j], ++ r;\n\t\t\t\tif (p[j] <= K) sum[i][j] += r;\n\t\t\t\telse fac[i][++ t] = p[j], R[i][t] = r;\n\t\t\t}\n\t\tif (a[i] != 1) {\n\t\t\tif (a[i] <= K) ++ sum[i][std::lower_bound(p + 1, p + len + 1, a[i]) - p];\n\t\t\telse fac[i][++ t] = a[i], R[i][t] = 1;\n\t\t}\n\t}\n\tfor (int i = 1; i <= m; ++ i) {\n\t\tscanf(\"%u%u\", &q[i].l, &q[i].r), q[i].id = i;\n\t\tint tmp = 1, l = q[i].l, r = q[i].r;\n\t\tfor (int j = 1; j <= 168; ++ j)\n\t\t\ttmp = 1LL * tmp * (sum[r][j] - sum[l - 1][j] + 1) % mod;\n\t\tans[i] = tmp;\n\t}\n\tfor (int i = 1; i <= n; ++ i)\n\tfor (int j = 1; j <= 2 && fac[i][j]; ++ j)\n\t\tif (mp.count(fac[i][j])) fac[i][j] = mp[fac[i][j]];\n\t\telse fac[i][j] = mp[fac[i][j]] = ++ id;\n\tstd::sort(q + 1, q + m + 1);\n\tfor (int i = 1; i <= m; ++ i) {\n\t\twhile (l > q[i].l) add(-- l);\n\t\twhile (r < q[i].r) add(++ r);\n\t\twhile (l < q[i].l) del(l ++);\n\t\twhile (r > q[i].r) del(r --);\n\t\tans[q[i].id] = 1LL * ans[q[i].id] * now % mod;\n\t}\n\tfor (int i = 1; i <= m; ++ i) printf(\"%u\\n\", ans[i]);\n}\n```",
        "postTime": 1625315968,
        "uid": 361308,
        "name": "Stinger",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 \u3010P5071 [Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "[$\\text{Link}$](https://www.luogu.com.cn/problem/P5071)\n\n\u6211\u5199\u7684\u7b2c 12 \u9053 $\\text{Ynoi}$\uff0c\u4e3a\u4e86\u9632\u6b62\u4ee5\u540e\u5fd8\u4e86\u5199\u7bc7\u9898\u89e3\u3002\n\n## \u9898\u610f\n\u533a\u95f4\u4e58\u79ef\u56e0\u6570\u4e2a\u6570\u3002\n\n$n,m\\le10^5,a_i\\le10^9$\n#### \u6709\u5173\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u7ea6\u5b9a\n\u672c\u7247\u9898\u89e3\u4e2d\uff0c$n,m$ \u9ed8\u8ba4\u540c\u9636\uff0c$w$ \u4ee3\u8868\u503c\u57df\uff0c$f(x)$ \u8868\u793a $x$ \u5185\u8d28\u6570\u4e2a\u6570\uff0c$g(x)$ \u8868\u793a $x$ \u4ee5\u5185\u6570\u8d28\u56e0\u6570\u4e2a\u6570\u6700\u591a\u4e3a\u591a\u5c11\u3002\n\n## \u601d\u8def\n\u663e\u7136\u53ef\u4ee5\u5206\u89e3\u8d28\u56e0\u6570+\u56e0\u6570\u4e2a\u6570\u5b9a\u7406\u641e\u4e00\u6b21\u64cd\u4f5c\u3002\u533a\u95f4\u67e5\u8be2\u53ef\u4ee5\u7528\u83ab\u961f\u3002\n\n\u8fd9\u6837\u76f4\u63a5\u505a\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n(\\sqrt{w}+g(w)\\sqrt{n}))$\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u5206\u89e3\u8d28\u56e0\u6570\u53ef\u4ee5\u7528 $\\text{Pollard-Rho}$ \u4f18\u5316\uff0c\u505a\u5230 $O(n(w^{\\frac 1 4}+g(w)\\sqrt{n}))$\u3002\n\n\u4f46\u8fd9\u6837\u8fd8\u662f\u4e0d\u591f\u5feb\uff0c\u8003\u8651\u8bbe\u7f6e\u9608\u503c $S$\uff0c\u5c0f\u4e8e $S$ \u7684\u8d28\u56e0\u6570\u66b4\u529b\u5206\u89e3\u51fa\u6765\u505a\u524d\u7f00\u548c\uff0c\u5927\u7684 $\\text{Pollard-Rho}$ \u83ab\u961f\u76f4\u63a5\u8f6c\u79fb\uff0c\u4e8e\u662f\u505a\u5230\u4e86\u65f6\u95f4\u590d\u6742\u5ea6 $O(n(w^{\\frac 1 4}+\\sqrt{n}(\\log_Sw+f(S))))$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(S+n(\\log_Sw+f(S)))$\u3002\n\n$S$ \u53d6 $1000$ \u5f88\u4e0d\u9519\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n(w^{\\frac 1 4}+\\sqrt{n}))$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\uff0c\u90fd\u5e26\u4e2a $170$ \u5de6\u53f3\u7684\u5e38\u6570\u3002\n\n$\\text{Pollard-Rho}$ \u7684\u500d\u589e\u4e0a\u754c\u4e3a $31$ \u65f6\u8868\u73b0\u6bd4\u8f83\u4f18\u79c0\u3002\n\n\u5982\u679c\u590d\u6742\u5ea6\u5206\u6790\u6709\u8bef\uff0c\u8bf7\u5728\u8ba8\u8bba\u533a\u4e2d\u6307\u51fa\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int N=1e5+10,size=170,mod=19260817;\nint pri[]={1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997};\nint num[1010];\nnamespace PR{\n\tvector<int>ans;\n\tinline int qpow(int x,int y,const int mod){\n\t\tint res=1;\n\t\twhile(y){\n\t\t\tif(y&1) res=1ll*res*x%mod;\n\t\t\tx=1ll*x*x%mod;\n\t\t\ty>>=1;\n\t\t}\n\t\treturn res;\n\t}\n\tinline bool Miller_Rabin(int x,int a){\n\t\tint y=x-1;\n\t\twhile(y){\n\t\t\tint res=qpow(a,y,x);\n\t\t\tif(res!=1&&res!=x-1) return 0;\n\t\t\tif(y&1||res==x-1) return 1;\n\t\t\ty>>=1;\n\t\t}\n\t\treturn 1;\n\t}\n\tinline bool Isprime(int x){\n\t\tif(x<2||x==46856248255981) return 0;\n\t\tif(x==2||x==3||x==7||x==61||x==24251) return 1;\n\t\tif(x%6!=1&&x%6!=5) return 0;\n\t\treturn Miller_Rabin(x,2)&&Miller_Rabin(x,61);\n\t}\n\tinline int f(int x,int c,int n){\n\t\treturn (1ll*x*x+c)%n;\n\t}\n\tinline int Pollard_Rho(int x){\n\t\tint s=0,t=0,c=1ll*rand()%(x-1)+1,val=1;\n\t\tint stp,g=1;\n\t\tfor(;;g<<=1,s=t,val=1){\n\t\t\tfor(stp=1;stp<=g;stp++){\n\t\t\t\tt=f(t,c,x);\n\t\t\t\tval=1ll*val*abs(t-s)%x;\n\t\t\t\tif(!(stp&31)){\n\t\t\t\t\tint q=__gcd(val,x);\n\t\t\t\t\tif(q>1) return q;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint q=__gcd(val,x);\n\t\t\tif(q>1) return q;\n\t\t}\t\n\t}\n\tinline void fj(int x,int cnt){\n\t\tif(x<2) return ;\n\t\tif(Isprime(x)) {for(int i=1;i<=cnt;i++)ans.push_back(x);/*printf(\"-%d\\n\",x);*/return ;}\n\t\tint pri=x;\n\t\tfor(;pri>=x;pri=Pollard_Rho(x));\n\t\tint s=0;\n\t\tfor(;x%pri==0;x/=pri)s++;\n\t\tfj(x,cnt),fj(pri,cnt*s);\n\t}\n}\nint inv[N*2],sum[N][size];\ninline void Prefix(int n){\n\tinv[1]=1;\n\tfor(int i=2;i<=n;i++){\n\t\tinv[i]=1ll*(mod-mod/i)*inv[mod%i]%mod;\n\t}\n\tfor(int i=1;i<=168;i++){\n\t\tnum[pri[i]]=i;\n\t}\n}\nint n,m,curL,curR,sz,cnt[N*2],p[N][3],a[N],now=1,divv[N],f[N],ss[N];\nint g[N];\nvector<int>appear;\nstruct que{\n\tint id,l,r; \n\tfriend bool operator<(const que &a,const que &b){\n\t\treturn divv[a.l]^divv[b.l]?a.l<b.l:a.r<b.r;\n\t}\n}ask[N];\ninline void add(int x){\n\tfor(int i=1;i<=ss[x];i++){\n\t\tnow=1ll*now*inv[cnt[p[x][i]]]%mod*(cnt[p[x][i]]+1)%mod;\n\t\tcnt[p[x][i]]++;\n\t}\n}\ninline void del(int x){\n\tfor(int i=1;i<=ss[x];i++){\n\t\tnow=1ll*now*inv[cnt[p[x][i]]]%mod*(cnt[p[x][i]]-1)%mod;\n\t\tcnt[p[x][i]]--;\n\t}\n}\ninline int getans(int l,int r){\n\tint ans=now;\n\tfor(int i=1;i<=168;i++){\n\t\tans=1ll*ans*(sum[r][i]-sum[l-1][i]+1)%mod;\n\t}\n\treturn ans;\n}\nint main(){\n//\tfreopen(\"test.in\",\"r\",stdin);\n\tn=read(),m=read();\n\tPrefix(n*2+10);\n\tsz=n/sqrt(m*2/3)+1;\n\tfor(int i=1;i<=n;i++){\n\t\ta[i]=read();\n\t\tdivv[i]=i/sz;\n\t\tmemcpy(sum[i],sum[i-1],sizeof(sum[0]));\n\t\tfor(int j=1;j<=168;j++){\n\t\t\twhile(a[i]%pri[j]==0){\n\t\t\t\tsum[i][j]++;\n\t\t\t\ta[i]/=pri[j];\n\t\t\t}\n\t\t}\n\t\tif(a[i]>1){\n\t\t\tPR::ans.clear();\n\t\t\tPR::fj(a[i],1);\n\t\t\tfor(auto j:PR::ans){\n\t\t\t\tp[i][++ss[i]]=j;\n\t\t\t\tappear.push_back(j);\n\t\t\t}\n\t\t}\n\t}\n\tsort(appear.begin(),appear.end());\n\tappear.erase(unique(appear.begin(),appear.end()),appear.end());\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=ss[i];j++){\n\t\t\tp[i][j]=lower_bound(appear.begin(),appear.end(),p[i][j])-appear.begin();\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint l=read(),r=read();\n\t\task[i]={i,l,r};\n\t}\n\tsort(ask+1,ask+m+1);\n\tcurL=1,curR=0;\n\tfor(int i=0;i<n*2;i++) cnt[i]=1;\n\tfor(int i=1;i<=m;i++){\n\t\tint L=ask[i].l,R=ask[i].r;\n        while(curL>L) add(--curL);\n        while(curR<R) add(++curR);\n\t\twhile(curL<L) del(curL++);\n        while(curR>R) del(curR--);\n\t\tg[ask[i].id]=getans(L,R);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\twrite(g[i]);\n\t\tputc('\\n');\n\t}\n\tflush();\n    return 0;\n}\n```\n\u518d\u89c1 qwq~",
        "postTime": 1620200814,
        "uid": 365127,
        "name": "cyffff",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "~~\u7a81\u7136\u53d1\u73b0\u6211\u4e00\u5468\u90fd\u6ca1\u6709\u5199\u9898\u89e3\uff0c\u8d76\u7d27\u6765\u6c34\u4e00\u6c34~~  \n## \u95f2\u8bdd\n\u505a\u8fd9\u9053\u9898\u6700\u5f00\u59cb\u662f\u56e0\u4e3a\u6709\u4e00\u4e2a\u5e16\u5b50\uff0c\u6c42\u52a9[\u8fd9\u9053\u9898](http://zijian-lv.com/problem/68)  \n\u5927\u610f\u662f\u6c42${n \\choose m}$ \u7684\u7d20\u56e0\u5b50\u4e2a\u6570\uff0c$n,m \\leq 10^5,q\\leq 10^5$  \n\u7136\u540e\u795e\u4ed9YLWang\u8bf4\u5c31\u662f\u8fd9\u4e00\u9053\u9898\uff0c\u73b0\u5728\u770b\u770b\u786e\u5b9e\u76f8\u4f3c\u3002  \n\n## \u9898\u9762  \n\n> \u73c2\u6735\u8389\u7ed9\u4f60\u4e86\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u6709 $m$ \u6b21\u67e5\u8be2\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e00\u6bb5\u533a\u95f4\u7684\u4e58\u79ef\u7684\u7ea6\u6570\u4e2a\u6570 \u200a$mod\\ 19260817$ \u7684\u503c\u3002\n\n## \u9898\u89e3  \n\u8fd9\u9898\u96be\u5ea6\u4e0d\u662f\u5f88\u5927\uff0clxl\u5bf9\u5b83\u7684\u8bc4\u4ef7\u4e3a3/11\n\n\u8fd9\u4e2a\u503c\u57df\u4e3a$1e9$\uff0c\u6211\u4eec\u5148\u8003\u8651\u503c\u57df\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u600e\u4e48\u505a\u3002  \n\u6bd4\u5982\u503c\u57df\u53ea\u6709$1e5$\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5148\u5904\u7406\u51fa$1e5$\u4ee5\u5185\u7684\u6240\u6709\u7d20\u56e0\u5b50\uff0c\u7136\u540e\u5bf9\u4e8e\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u90fd\u5904\u7406\u51fa\u5b83\u7684\u7d20\u56e0\u5b50\u62c6\u5206\u3002  \n\u7136\u540e\u79bb\u7ebf\u4e0b\u6765\u83ab\u961f  \n\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u5f53\u524d\u533a\u95f4\u7684\u6bcf\u4e2a\u7d20\u56e0\u5b50\u5206\u522b\u51fa\u73b0\u4e86\u51e0\u6b21\u548c\u5f53\u524d\u7684\u7b54\u6848$ans$  \n\u7136\u540e\u5220\u9664\u4e00\u4e2a\u6570\u5c31\u628a\u8fd9\u4e2a\u6570\u7684\u7d20\u56e0\u5b50\u6570\u51cf\u53bb\uff0c\u52a0\u5165\u4e00\u4e2a\u6570\u5c31\u52a0\u4e0a\uff0c\u7136\u540e\u91cd\u65b0\u8ba1\u7b97$ans$  \n\u8003\u8651\u5230$2\\times3\\times5\\times7\\times11\\times13>1e5$\uff0c\u90a3\u4e48\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002  \n\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u901a\u8fc7[\u8fd9\u9053\u9898](http://zijian-lv.com/problem/68)\uff0c\u53ea\u8981\u7565\u52a0\u6539\u52a8\u3002 \n```cpp\nwhile (l>Q[i].l){add(l);del(r-l+1);l--;}\nwhile (r>Q[i].r){add(r-l);del(r);r--;}\nwhile (r<Q[i].r){add(r+1);del(r-l+1);r++;}\nwhile (l<Q[i].l){add(r-l);del(l+1);l++;}\n```\n\n\u4f46\u662f\u8fd9\u9053\u9898\u503c\u57df$1e9$\uff0c\u56e0\u6b64\u5c31\u8981\u8003\u8651\u5176\u4ed6\u7684\u65b9\u6cd5\u4e86\u3002  \n\u867d\u7136\u503c\u57df\u8fbe\u5230\u4e86$1e9$\uff0c\u4f46\u662f\u6570\u8fd8\u662f\u53ea\u6709$1e5$\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u6570\u7684\u7d20\u56e0\u5b50\u79bb\u6563\u5316\u3002  \n\n\u7136\u540e\u662f\u600e\u4e48\u6c42\u7d20\u56e0\u5b50\u7684\u95ee\u9898\u3002  \n\u663e\u7136\u6b63\u5e38\u7684\u7b5b\u6cd5\u4e0d\u53ef\u884c\uff0c\u56e0\u4e3a$\\sqrt{1e9}$\u4e4b\u5185\u7684\u7d20\u56e0\u5b50\u4e2a\u6570\u8fbe\u5230\u4e86$1e4$\u5de6\u53f3\uff08\u597d\u50cf\u662f\u8fd9\u6837\uff0c\u53ef\u4ee5\u81ea\u5df1\u53bb\u7b5b\u4e00\u7b5b\u9a8c\u8bc1\u4e00\u4e0b\uff09  \n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528Pollard_Rho  \n```cpp\nI bool MR(int n)//MR\u5224\u662f\u4e0d\u662f\u5408\u6570\n{\n    if (n<1001) return vis[n];\n    int m=n-1,x,y,r=m,t=0;\n    while ((r&1)^1) r>>=1,t++;\n    for (int i=1;i<=7;i++)\n    {\n        x=ksm(prim[i],r,n);\n        for (int j=0;j<t && x>1;j++)\n        {\n            y=x*x%n;\n            if (y==1 && x!=m) return 1;\n            x=y;\n        }\n        if (x!=1) return 1;\n    }\n    return 0;\n}\nI int PR(int n)//PR\u7b5b\u56e0\u6570\n{\n    int s=0,t=0,c=rand()%(n-1)+1,w=1;\n    for (int i=1;;i<<=1,s=t,w=1)\n    {\n        for (int j=0;j<i;j++)\n        {\n            t=(t*t+c)%n,w=w*abs(t-s)%n;\n            if (!(p&63))\n            {\n                int g=gcd(w,n);\n                if (g>1) return g; \n            }\n        }\n        int g=gcd(w,n);\n        if (g>1) return g;\n    }\n}\n```\n\n\u8fd9\u6837\u8fd8\u662f\u8fc7\u4e0d\u4e86\u8fd9\u9053\u9898\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5e38\u6570\u4f18\u5316  \n\u4e00\u4e2a$1e9$\u4ee5\u5185\u7684\u6570\uff0c\u8d85\u8fc7$1e3$\u7684\u56e0\u6570\u6700\u591a\u53ea\u6709$2$\u4e2a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53ea\u4fdd\u7559\u8fd9\u4e24\u4e2a\u6570\uff0c\u5269\u4e0b\u7684\u8fdb\u884c\u524d\u7f00\u548c\u4f18\u5316\u3002\n```cpp\n\nvoid init2()\n{\n    //\u5904\u7406\u5904\u6bcf\u4e2a\u6570\u7684\u22651000\u7684\u7d20\u56e0\u5b50\n    for (int i=1;i<=n;i++)\n    {\n        for (int j=1;j<=cnt;j++)\n        {\n            \n            sum[j][i]=sum[j][i-1];\n            while (a[i]%prim[j]==0) a[i]/=prim[j],sum[j][i]++;\n        }\n        if (a[i]>1 && MR(a[i]))\n        {\n            b[i]=a[i];\n            while (b[i]==a[i]) b[i]=PR(a[i]);\n            a[i]/=b[i];\n        }\n        if (a[i]>1)\n        {\n            if (b[i])\n            {\n                if (!Map.count(b[i])) Map[b[i]]=++id;\n                b[i]=Map[b[i]];//\u8fdb\u884chash\u5904\u7406\uff0c\u4f7f\u6570\u7ec4\u80fd\u591f\u5f00\u4e0b\n            }\n            if (!Map.count(a[i])) Map[a[i]]=++id;\n            a[i]=Map[a[i]];\n        }\n        else a[i]=0;\n    }\n}\n\n\nI void add(int x,int dt)\n{\n    if (a[x])\n    {\n        ans=ans*inv[CNT[a[x]]]%p*(CNT[a[x]]+dt)%p,CNT[a[x]]+=dt;\n        if (b[x]) ans=ans*inv[CNT[b[x]]]%p*(CNT[b[x]]+dt),CNT[b[x]]+=dt;\n    }\n}\n\nvoid solve()\n{\n    for (int i=1;i<=id;i++) CNT[i]=1;//\u8003\u8651\u5230\u7d20\u56e0\u6570\u4e2a\u6570\u4e3a0\u662f\u8d21\u732e\u7684\u4e58\u6cd5\u4e3a1\n    for (int i=1,l=1,r=0;i<=q;i++)\n    {\n        while (r<Q[i].r){add(r+1,1);r++;}\n        while (r>Q[i].r){add(r,-1);r--;}\n        while (l<Q[i].l){add(l,-1);l++;}\n        while (l>Q[i].l){add(l-1,1);l--;}\n        int tmp=ans;\n        for (int j=1;j<=cnt;j++) tmp=tmp*(sum[j][r]-sum[j][l-1]+1)%p;\n        Q[i].res=tmp;\n    }\n    sort(Q+1,Q+q+1,CMP);\n}\n```  \n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define rd(x) x=read()\n#define I inline\n#define int long long\nusing namespace std;\ninline int read(){int x=0,f=1;char ch=getchar();while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}return x*f;}\nconst int N=2e5+5;\nconst int M=1002;\nconst int p=19260817;\n                                                                                                                                                                 \nI int gcd(int x,int y){if (x%y==0) return y;return gcd(y,x%y);}\nI int ksm(int x,int y,int z){int ret=1;while (y){if (y&1) ret=(ret*x)%z;x=(x*x)%z;y>>=1;}return ret;}\nint prim[N],vis[N],cnt,inv[N];\nvoid init()//\u7ebf\u6027\u7b5b\u662f\u4e2a\u4eba\u90fd\u77e5\u9053\n{\n    inv[1]=1;for(int i=2;i<N;++i)inv[i]=(p-p/i)*inv[p%i]%p;\n    for (int i=2;i<M;i++)\n    {\n        if (vis[i]==0) prim[++cnt]=i,vis[i]=i;\n        for (int j=1;j<=cnt;j++)\n        {\n            if (i*prim[j]>=M) break;\n            vis[i*prim[j]]=prim[j];\n            if (i%prim[j]==0) break;\n        }\n    }\n}\nI bool MR(int n)//MR\u5224\u662f\u4e0d\u662f\u5408\u6570\n{\n    if (n<1001) return vis[n];\n    int m=n-1,x,y,r=m,t=0;\n    while ((r&1)^1) r>>=1,t++;\n    for (int i=1;i<=7;i++)\n    {\n        x=ksm(prim[i],r,n);\n        for (int j=0;j<t && x>1;j++)\n        {\n            y=x*x%n;\n            if (y==1 && x!=m) return 1;\n            x=y;\n        }\n        if (x!=1) return 1;\n    }\n    return 0;\n}\nI int PR(int n)//PR\u7b5b\u56e0\u6570\n{\n    int s=0,t=0,c=rand()%(n-1)+1,w=1;\n    for (int i=1;;i<<=1,s=t,w=1)\n    {\n        for (int j=0;j<i;j++)\n        {\n            t=(t*t+c)%n,w=w*abs(t-s)%n;\n            if (!(p&63))\n            {\n                int g=gcd(w,n);\n                if (g>1) return g; \n            }\n        }\n        int g=gcd(w,n);\n        if (g>1) return g;\n    }\n}\n\nint pos[N],sz;\nstruct Query{int l,r,res,id;}Q[N];\nI bool cmp(Query a,Query b){if (pos[a.l]==pos[b.l]) return a.r<b.r;return a.l<b.l;}\nI bool CMP(Query a,Query b){return a.id<b.id;}\n\n\nint n,q,a[N],b[N];\nint sum[M][N];\nint l=1,r=1;\n\nunordered_map<int,int> Map;int id;\n\nvoid init2()\n{\n    //\u5904\u7406\u5904\u6bcf\u4e2a\u6570\u7684\u22651000\u7684\u7d20\u56e0\u5b50\n    for (int i=1;i<=n;i++)\n    {\n        for (int j=1;j<=cnt;j++)\n        {\n            \n            sum[j][i]=sum[j][i-1];\n            while (a[i]%prim[j]==0) a[i]/=prim[j],sum[j][i]++;\n        }\n        if (a[i]>1 && MR(a[i]))\n        {\n            b[i]=a[i];\n            while (b[i]==a[i]) b[i]=PR(a[i]);\n            a[i]/=b[i];\n        }\n        if (a[i]>1)\n        {\n            if (b[i])\n            {\n                if (!Map.count(b[i])) Map[b[i]]=++id;\n                b[i]=Map[b[i]];//\u8fdb\u884chash\u5904\u7406\uff0c\u4f7f\u6570\u7ec4\u80fd\u591f\u5f00\u4e0b\n            }\n            if (!Map.count(a[i])) Map[a[i]]=++id;\n            a[i]=Map[a[i]];\n        }\n        else a[i]=0;\n    }\n}\nint CNT[N],ans=1;\nI void add(int x,int dt)\n{\n    if (a[x])\n    {\n        ans=ans*inv[CNT[a[x]]]%p*(CNT[a[x]]+dt)%p,CNT[a[x]]+=dt;\n        if (b[x]) ans=ans*inv[CNT[b[x]]]%p*(CNT[b[x]]+dt),CNT[b[x]]+=dt;\n    }\n}\nvoid solve()\n{\n    for (int i=1;i<=id;i++) CNT[i]=1;//\u8003\u8651\u5230\u7d20\u56e0\u6570\u4e2a\u6570\u4e3a0\u662f\u8d21\u732e\u7684\u4e58\u6cd5\u4e3a1\n    for (int i=1,l=1,r=0;i<=q;i++)\n    {\n        while (r<Q[i].r){add(r+1,1);r++;}\n        while (r>Q[i].r){add(r,-1);r--;}\n        while (l<Q[i].l){add(l,-1);l++;}\n        while (l>Q[i].l){add(l-1,1);l--;}\n        int tmp=ans;\n        for (int j=1;j<=cnt;j++) tmp=tmp*(sum[j][r]-sum[j][l-1]+1)%p;\n        Q[i].res=tmp;\n    }\n    sort(Q+1,Q+q+1,CMP);\n}\nsigned main()\n{\n    init();\n    srand(19491001);\n    rd(n);rd(q);\n    for (int i=1;i<=n;i++) rd(a[i]);\n    sz=sqrt(n);\n    for (int i=1;i<=floor(n);i++) pos[i]=(i-1)/sz+1;\n    init2();\n    for (int i=1;i<=q;i++) {rd(Q[i].l);rd(Q[i].r);if(Q[i].l>Q[i].r) swap(Q[i].l,Q[i].r);Q[i].id=i;}\n    sort(Q+1,Q+q+1,cmp);\n    solve();\n    \n    for (int i=1;i<=q;i++) printf(\"%lld\\n\",Q[i].res);\n}\n```",
        "postTime": 1605338617,
        "uid": 70132,
        "name": "AsunderSquall",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "~~\u6211\u7ed9\u8fd9\u9053\u9898\u63d0\u4f9b\u4e86314\u6b21\u63d0\u4ea4qwq~~\n# \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3a $ n $ \u7684\u5e8f\u5217\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a\u4e00\u4e2a $ L $ \u548c $ R $\uff0c\u6c42 $ [ L , R ] $ \u4e2d\u6240\u6709\u6570\u4e58\u8d77\u6765\u7684\u8d28\u56e0\u6570\u4e2a\u6570\uff0c\u7b54\u6848\u5bf9 $ 19260817 $ \u53d6\u4f59\u3002\n\n\u9996\u5148\uff0c\u9759\u6001\u533a\u95f4\uff0c\u533a\u95f4\u8be2\u95ee\uff0c\u60f3\u5230\u83ab\u961f\u3002\n\n\u6240\u6709\u6211\u4eec\u9700\u8981\u5c06\u6240\u6709\u8d28\u56e0\u6570\u62c6\u51fa\u6765\uff0c\u83ab\u961f\u7684\u65f6\u5019\u8f6c\u79fb\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a $ O(n\\sqrt n) $\n\n\u4f60\u4ee5\u4e3a\u8fd9\u5c31\u5b8c\u4e86\uff1f~~\u5584\u826f~~\u6bd2\u7624\u7684lxl\u5361\u4e86\u5e38\u6570~~Ynoi\u5e38\u89c1\u64cd\u4f5c~~\uff0c\u6240\u6709\u6211\u4eec\u9700\u8981\u4f18\u5316\u3002\n\n\u62c6\u5206\u8d28\u56e0\u6570\uff0c\u53ef\u4ee5\u7528 $ \\rm PR $ \u6765\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u4e0d\u8fc7\u8fd8\u662f\u592a\u6162\u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u7ed9\u5b9a\u4e00\u4e2a\u5c0f\u8303\u56f4\uff0c\u628a\u8fd9\u4e2a\u8303\u56f4\u7684\u8d28\u6570\u90fd\u627e\u51fa\u6765\uff0c\u5269\u4e0b\u7684\u518d\u7528 $ \\rm PR $\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u8303\u56f4\u5e94\u8be5\u662f\u591a\u5c11\u5462\uff1f\n\n\u6211\u4eec\u8981\u8ba9 $ \\rm PR $ \u7684\u6b21\u6570\u5c3d\u91cf\u5c0f\uff0c\u7136\u800c $ a_i \\leq 10^9 $\uff0c\u53d6 $ 10^4 $ \u5c31\u5982\u540c\u66b4\u529b\uff0c\u53d6 $ 10^2 $ \u53c8\u8981\u5f88\u591a\u6b21 $ \\rm PR $\uff0c\u6240\u4ee5\u53d6 $ 10^3 $\u3002$ 1001^3 > 10^9 $\uff0c\u8bf4\u660e\u5728\u8fd9\u4e2a\u8303\u56f4\u4e2d\uff0c\u53bb\u6389\u5c0f\u7684\u56e0\u6570\u5c31\u53ea\u6709\u6700\u591a $ 2 $ \u4e2a\u56e0\u6570qwq\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4ea4\u4e0a\u53bb\uff1a[link](https://www.luogu.com.cn/record/35144292)\n\nT\u4e86\u3002~~\u8bf4\u660e\u8fd8\u80fd\u7ee7\u7eed\u5361\u3002~~\n\n\u5176\u5b9e\u53ef\u4ee5\u7528 $ 1 $ ~ $ 1000 $ \u4e2d\u7684\u8d28\u6570\u6765\u7b5b\uff0c\u6700\u5f00\u59cb\u6211\u4f7f\u7528\u7684\u662f\u6253\u8868\uff0c\u540e\u6765\u6362\u6210\u4e86xxs\u3002\n\n\u7136\u540e\u662f\u83ab\u961f\u7684\u8f6c\u79fb\u3002$ 10^9 $ \u7684\u8303\u56f4\u5185\uff0c\u4e00\u4e2a\u6570\u6700\u591a\u62e5\u6709 $ 10 $ \u4e2a\u8d28\u56e0\u6570\uff0c\u90a3\u4e48\u6bcf\u6b21\u8f6c\u79fb\u7684\u5e38\u6570\u5c31\u5f88\u5927\uff0c\u6240\u4ee5\u8003\u8651\u5f00\u6876\u8bb0\u5f55 $ 1 $ ~ $ 1000 $ \u4e2d\u6240\u6709\u8d28\u6570\u5728\u5e8f\u5217\u4e0a\u7684\u524d\u7f00\u548c\uff0c\u76f4\u63a5\u51cf\u3002\n\n\u7136\u540e\u6211\u4eec\u53d6\u5f97\u4e86[84\u5206](https://www.luogu.com.cn/record/35555048)\u7684\u597d\u6210\u7ee9\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4ec0\u4e48\uff1f\n\n\u9996\u5148\uff0c\u53ea\u8c03\u7528\u4e00\u6b21\u7684\u51fd\u6570\u62c6\u5c01\u88c5\uff0c\u4f1a\u5f71\u54cd\u6548\u7387\u3002\n\n\u5176\u6b21\uff0c\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5047\u5982\u6709\u4e00\u4e2a $ Tp $ \u7c7b\u578b\u7684\u53d8\u91cf\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u6211\u4eec\u5c31\u628a `Tp a` \u6539\u6210 `const Tp&a`\u3002\n\n\u7136\u540e\uff0c\u628a\u6240\u6709 `==` \u548c `!=` \u6362\u6210\u7528 `^` \u5b9e\u73b0\u7684\u3002\n\n\u6700\u540e\uff0c$ fread $ \u5feb\u8bfb\u548c $ fwrite $ \u5feb\u8f93\u662f\u4e00\u5b9a\u9700\u8981\u7684qwq\u3002\n\n\u6211\u4eec\u8fd8\u5dee\u4e9b\u4ec0\u4e48\uff1f\n\nrp\uff0c\u8bc4\u6d4b\u59ec\u3002\n\n\u4e8e\u662f\uff1a[link](https://www.luogu.com.cn/record/35555231)\n\n\u9ebb\u9ebb\u5feb\u770b\uff01\u6211A\u4e86\u4e00\u9053Ynoi\uff01\n\n\u8d34\u4e00\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#pragma GCC optimize(\"Ofast,unroll-loops,fast-math\")\n#include<unordered_map>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cctype>\n#include<cmath>\n#define DEBUG printf(\"Baylor AK IOI\\n\");\nint pcnt,prime[300005];bool zhi[1000005];\ninline int mo(const long long&a,const int&mod){\n\treturn a<mod?a:a-int(a/mod)*mod;\n}\ninline void sieve(const int&n){\n\tint i,j,x;\n\tfor(i=2;i<=n;++i){\n\t\tif(!zhi[i])prime[++pcnt]=i;\n\t\tfor(j=1;j<=pcnt&&(x=i*prime[j])<=n;++j){\n\t\t\tzhi[x]=true;\n\t\t\tif(!(i%prime[j]))break;\n\t\t}\n\t}\n}\nnamespace IO{\n\tconst int SIZE=1<<21;\n\tclass istream{\n\tprivate:\n\t\tchar buf[SIZE],*p1=buf,*p2=buf;\n\tpublic:\n\t\tinline char getchar(){\n\t\t\tif(p1==p2)p2=(p1=buf)+fread(buf,1,SIZE,stdin);\n\t\t\treturn p1==p2?-1:*p1++;\n\t\t}\n\t\tinline istream&operator>>(int&a){\n\t\t\tchar s;\n\t\t\ta=0;\n\t\t\twhile(!isdigit(s=getchar()));\n\t\t\twhile(a=a*10+(s^48),isdigit(s=getchar()));\n\t\t\treturn*this;\n\t\t}\n\t}cin;\n\tclass ostream{\n\tprivate:\n\t\tint p1=-1;\n\t\tchar buf[SIZE];\n\t\tconst int p2=SIZE-1;\n\tpublic:\n\t\tinline void flush(){\n\t\t\tfwrite(buf,1,p1+1,stdout);\n\t\t\tp1=-1;\n\t\t}\n\t\tinline void putchar(const char&s){\n\t\t\tif(p1==p2)flush();\n\t\t\tbuf[++p1]=s;\n\t\t}\n\t\tinline ostream&operator<<(int&n){\n\t\t\tstatic char s[33];\n\t\t\tint top=0;\n\t\t\twhile(s[++top]=(n%10)^48,n/=10);\n\t\t\twhile(putchar(s[top]),--top);\n\t\t\treturn*this;\n\t\t}\n\t}cout;\n}\nnamespace Pollard_Rho{\n\tinline int abs(const int&a){\n\t\treturn a>0?a:-a;\n\t}\n\tinline int Rand(const int&mod){\n\t\treturn mo(rand()*rand(),mod);\n\t}\n\tconst int Pcnt=2;\n\tconst int p[Pcnt]={61,103};\n\tinline int min(const int&a,const int&b){\n\t\treturn a>b?b:a;\n\t}\n\tinline int gcd(register int a,register int b){\n\t\twhile(b^=a^=b^=a%=b);\n\t\treturn a;\n\t}\n\tinline int pow(register int a,register int b,const register int&mod){\n\t\tregister int ans=1;\n\t\tfor(;b;b>>=1,a=mo(1ll*a*a,mod))if(b&1)ans=mo(1ll*ans*a,mod);\n\t\treturn ans;\n\t}\n\tbool IsPrimeIt(const register int&n){\n\t\tif(n%6^1&&n%6^5||n<2)return false;\n\t\tif(n<=1000000)return!zhi[n];\n\t\tregister int m=n-1,k=__builtin_ctz(m);m>>=k;\n\t\tfor(register int i,j=0;j^Pcnt;++j){\n\t\t\tregister int x=pow(p[j],m,n),y=x;\n\t\t\tfor(i=0;i^k;++i){\n\t\t\t\tx=mo(1ll*x*x,n);\n\t\t\t\tif(!(x^1)&&(y^1)&&(y^n-1))return false;\n\t\t\t\ty=x;\n\t\t\t}\n\t\t\tif(x^1)return false;\n\t\t}\n\t\treturn true;\n\t}\n\tinline int PR(const register int&x){\n\t\tregister int len=0,k=1;\n\t\tregister int v0=Rand(x-1)+1,v=v0,y=Rand(x-1)+1,d,s=1;\n\t\twhile(true){\n\t\t\tv=mo((mo(1ll*v*v,x)+y),x),s=mo(1ll*s*abs(v-v0),x);\n\t\t\tif(v==v0||!s)return x;\n\t\t\tif(++len==k){\n\t\t\t\tif((d=gcd(s,x))^1)return d;\n\t\t\t\tv0=v;k<<=1;\n\t\t\t}\n\t\t}\n\t}\n\tinline int dmp(const int&x){\n\t\tint d;\n\t\twhile((d=PR(x))==x);\n\t\treturn d;\n\t}\n}\nnamespace Main{\n\tconst int M=1e5+5,mod=19260817;\n\tint n,m,d[M],top[M],a[M][3],sum[M][169];\n\tstd::unordered_map<int,int>Dct;\n\tint tp,pri[M<<1],inv[M<<1];\n\tint p,cur=1,ans[M],cnt[M<<1];\n\tstruct Query{\n\t\tint L,R,p1,p2,id;\n\t\tinline bool operator<(const Query&a) const {\n\t\t\treturn p1^a.p1?L<a.L:p1&1?R<a.R:R>a.R;\n\t\t}\n\t}q[M];\n\tinline int abs(const int&a){\n\t\treturn (a>0?0:n<<1)+a;\n\t}\n\tinline void Add(const register int&id){\n\t\tfor(register int i=1;i<=top[id];++i){\n\t\t\tcur=1ll*cur*inv[abs(cnt[a[id][i]])]%mod*abs(++cnt[a[id][i]])%mod;\n\t\t}\n\t}\n\tinline void Del(const register int&id){\n\t\tfor(register int i=1;i<=top[id];++i){\n\t\t\tcur=1ll*cur*inv[abs(cnt[a[id][i]])]%mod*abs(--cnt[a[id][i]])%mod;\n\t\t}\n\t}\n\tinline void main(){\n\t\tregister int i,j,L=1,R=0;\n\t\tIO::cin>>n>>m;\n\t\tp=n/sqrt(2.0*m/3);\n\t\tfor(i=1;i<=n;++i){\n\t\t\tint&val=d[i],x;\n\t\t\tIO::cin>>val;\n\t\t\tmemcpy(sum[i],sum[i-1],676);\n\t\t\tfor(j=1;j<=168&&(x=prime[j])<=val;++j){\n\t\t\t\tif(!(val%x)){\n\t\t\t\t\twhile(!(val%x)){\n\t\t\t\t\t\t++sum[i][j];\n\t\t\t\t\t\tval/=x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!(val^1))continue;\n\t\t\tif(Pollard_Rho::IsPrimeIt(val)){\n\t\t\t\ta[i][++top[i]]=pri[++tp]=val;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\twhile(!((x=Pollard_Rho::PR(val))^val));\n\t\t\tif(x*x==val){\n\t\t\t\ta[i][++top[i]]=pri[++tp]=x;\n\t\t\t\ta[i][++top[i]]=x;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ta[i][++top[i]]=pri[++tp]=x;\n\t\t\ta[i][++top[i]]=pri[++tp]=val/x;\n\t\t}\n\t\tstd::sort(pri+1,pri+tp+1);\n\t\tfor(i=1;i<=tp;++i)cnt[Dct[pri[i]]=i]=1;\n\t\tfor(i=1;i<=n;++i){\n\t\t\tfor(j=1;j<=top[i];++j){\n\t\t\t\ta[i][j]=Dct[a[i][j]];\n\t\t\t}\n\t\t}\n\t\tinv[1]=1;\n\t\tfor(i=2;i<=(n<<1);++i)inv[i]=1ll*(mod-mod/i)*inv[mod%i]%mod;\n\t\tfor(i=1;i<=m;++i){\n\t\t\tIO::cin>>(q+i)->L>>(q+i)->R;\n\t\t\t(q+i)->p1=(q+i)->L/p;(q+i)->p2=(q+i)->R/p;\n\t\t\t(q+i)->id=i;\n\t\t}\n\t\tstd::sort(q+1,q+m+1);\n\t\tfor(i=1;i<=m;++i){\n\t\t\tint&QL=(q+i)->L,&QR=(q+i)->R;\n\t\t\twhile(L<QL)Del(L++);\n\t\t\twhile(R>QR)Del(R--);\n\t\t\twhile(L>QL)Add(--L);\n\t\t\twhile(R<QR)Add(++R);\n\t\t\tint&out=ans[(q+i)->id];out=cur;\n\t\t\tfor(j=1;j<=168;++j)out=mo(1ll*out*(sum[QR][j]-sum[QL-1][j]+1),mod);\n\t\t}\n\t\tfor(i=1;i<=m;++i)IO::cout<<ans[i],IO::cout.putchar(10);\n\t}\n}\nsigned main(){\n\tsrand(19260817);\n\tsieve(1000000);\n\tMain::main();\n\tIO::cout.flush();\n}\n```",
        "postTime": 1596901282,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u636e\u7ed3\u6784+\u6570\u8bba \u83ab\u961f+\u8d28\u56e0\u5b50\u5206\u89e3 P5071\u9898\u89e3"
    },
    {
        "content": "Update 2020.4.18\u53d1\u73b0\u66b4\u529b\u5206\u89e3SPFA\u4e86\uff0c\u66f4\u6b63\u3002\n\n\u4fee\u4e86\u4e0b\u6392\u7248/kk\n\n>\u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3002\u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\uff0c\u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4f17\u4eba\uff0c \u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\uff0c\u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\u3001\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\u3002\u6211\u56de\u6765\u4e86\uff0c\u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\uff0c\u76fc\u541b\u52ff\u5fd8\u3002\u2014\u2014\u2014\u2014\u4e16\u754c\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69 \u73c2\u6735\u8389\n\n\u73c2\u6735\u8389\uff0c\u6700\u53ef\u7231\u4e86\u3002\n\n~~\u542c\u8bf4\u7528\u8fd9\u4e2a\u53f7\u53d1\u9898\u89e3\u4e0d\u4f1a\u88ab\u4e71\u819c\u5462\u3002~~\n\n\u9996\u5148\uff0c\u601d\u8def\u5e94\u8be5\u5f88\u660e\u786e\u5427/kk\n\n\u5149\u662f\u770b\u5230\u56e0\u6570\u4e2a\u6570\u819c $19260817$ \u5c31\u80fd\u60f3\u5230\u80af\u5b9a\u662f\u7ef4\u62a4\u8d28\u56e0\u5b50&\u6b21\u6570\uff08\u5176\u5b9e\u5c31\u662f\u79bb\u6563\u5316\u540e\u7ef4\u62a4\u8ba1\u6570\u5668\uff09\u3002\u600e\u4e48\u5feb\u901f\u5206\u89e3\u8d28\u56e0\u6570\u7b49\u4e0b\u518d\u8bf4\u3002\n\n\u7136\u540e\u8fd9\u73a9\u610f\u5728\u4e24\u4e2a\u6570\u76f8\u4e58\u7684\u65f6\u5019\u662f\u6bcf\u4e00\u9879\u76f4\u63a5\u76f8\u52a0\u7684\uff0c**\u53ef\u4ee5\u5408\u5e76**\uff0c\u4e8e\u662f\u4e4e\u60f3\u5230\u5206\u5757\uff08Ynoi\u561b\uff09/\u7ebf\u6bb5\u6811\u3002\n\n\u4f46\u662f\u4ed4\u7ec6\u60f3\u60f3\uff0c\u4e24\u4e2a\u6570\u5408\u5e76\u8fd8\u597d\uff0c\u4e00\u4e2a\u6570\u81f3\u591a $\\log N$ \u4e2a\u7d20\u56e0\u5b50\u3002**\u7136\u9e45\u5408\u5e76\u540e\u5c31\u4e0d\u4e00\u5b9a\u4e86\uff0c\u539f\u56e0\u5728\u4e8e\u503c\u57df\u5de8\u5927\uff0c\u5185\u90e8\u8d28\u56e0\u5b50\u5206\u6563\uff0c\u4e5f\u5c31\u662f\u51e0\u6b21\u5408\u5e76\u540e\u518d\u5408\u5e76\u7684\u4ee3\u4ef7\u4f1a\u76f8\u5f53\u4e4b\u5927\u3002**\n\n\u4e00\u53e5\u8bdd\u6765\u8bf4\uff0c\u6781\u7aef\u6570\u636e\u4e0b\uff0c\u5206\u5757\u548c\u7ebf\u6bb5\u6811\u90fd\u80fd\u88ab\u5361\u5230\u66b4\u529b\u590d\u6742\u5ea6\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\u800c\u4e14\uff0c\u6c42\u51fa\u8ba1\u6570\u5668\u540e\u8fd8\u8981\u904d\u5386\u4e00\u904d\u7b97\u7b54\u6848\uff0c\u590d\u6742\u5ea6\u7206\u70b8/kk\n\n\u90a3\u8fd8\u6709\u4ec0\u4e48\u53ef\u4ee5\u7528\u7684\uff1f\n\n**\u57fa\u672c\u53ea\u5269\u83ab\u961f\u4e86\u3002**\n\n\u597d\u597d\u60f3\u60f3\uff0c\u533a\u95f4\u52a0\u533a\u95f4\u4f1a\u70b8\uff0c\u4f46\u533a\u95f4\u52a0\u5355\u70b9\u786e\u5b9e\u53ef\u4ee5\u6b63\u5e38 $\\operatorname{O}(\\log N)$ \u8bf6\uff0c\u4fdd\u8bc1\u4e86\u53ef\u4ee5\u8f83\u5feb\u7684\u4fee\u6539\u3002\n\n\u60f3\u60f3\u7ec6\u8282\uff1a\u600e\u4e48\u7b97\u7b54\u6848\uff1f\u9884\u5904\u7406\u9006\u5143\u4e00\u9664\u4e00\u4e58\u5c31\u597d\u4e86\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\u771f\u00b7\u7545\u901a\u65e0\u963b\u3002\n\n\u597d\u4e86\u795d\u5927\u5bb6AC\u3002\n\n~~\u53cd\u6b63\u6211\u6ca1AC/kk~~\n\n\u4e8e\u662f\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u4f18\u5316\u3002\n\n\u8fd8\u8bb0\u5f97\u5206\u5757/\u7ebf\u6bb5\u6811\u7684\u4f18\u52bf\u5417\uff1f\u533a\u95f4\u5408\u5e76\u5feb\u4e8e\u4e00\u4e2a\u4e2a\u5355\u70b9\u52a0\u533a\u95f4\u3002\u6211\u4eec\u53ef\u4ee5\u7a0d\u4f5c\u7ed3\u5408\uff08\u7b97\u6cd5\u4e0d\u80fd\u5b66\u6b7b\uff09\uff0c\u4e00\u4e9b\u51fa\u73b0\u9891\u7e41\u7684\u7d20\u6570\u76f4\u63a5\u7ef4\u62a4\u524d\u7f00\u548c\uff08\u5176\u5b9e\u8fd9\u91cc\u662f\u505a\u5dee\u4e86\uff0c\u4e0d\u8fc7\u53cd\u6b63\u53ef\u51cf\uff09\u3002\n\n\u53c8\u8981\u8db3\u591f\u9891\u7e41\u53c8\u4e0d\u80fd\u8fc7\u591a\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n**\u8fd9\u4e2a\u754c\u53ef\u4ee5\u5b9a $<1000$**\u3002\n\n\uff08$10^9=1000^3$ \u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u6570\u591a\u51fa\u6765\u7684\u7d20\u56e0\u5b50\u81f3\u591a\u4e24\u4e2a\uff09\u3002\n\n\u8bf6\u83ab\u961f\u8f6c\u79fb\u53d8 $\\operatorname O(1)$ \u4e86\u8036\u3002\n\n\u603b\u590d\u6742\u5ea6\uff1a$\\operatorname O(n\\sqrt{n})$\n\n\u7d20\u56e0\u6570\u5206\u89e3\u66b4\u529bSPFA\u4e86\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u53ea\u80fd\u7528\u5927\u5e38\u6570PR\u4e86/kk\u3002\n\n\u5361\u5e38\u65e0\u6bd4\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\u4ee3\u7801\u4e0d\u8d34\u4e86\uff0c\u89c9\u5f97\u8bb2\u7684\u8fd8\u7b97\u6e05\u695a\uff0c\u4e0d\u7406\u89e3\u7684\u79c1\u4fe1\u3002\n\n\u597d\u4e86\uff0c\u5927\u5bb6\u4e00\u5b9a\u80fdAC\u4e86\u5427\uff01\n\n\u518d\u89c1/kk\uff01",
        "postTime": 1587095831,
        "uid": 339370,
        "name": "uk_liptys",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "\u4e0b\u9762\u7ea6\u5b9a $V$ \u4ee3\u8868\u503c\u57df\u3002\n\n------------\n\n# Description\n\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u5e8f\u5217 $a$\uff0c\u6709 $m$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u67e5\u8be2\u533a\u95f4\u4e58\u79ef\u7ea6\u6570\u4e2a\u6570\u7684\u503c\uff0c\u7b54\u6848\u5bf9 $19260817$ \u53d6\u6a21\u3002\n\n$n,m \\le 10^5, V \\le 10^9$\uff0c\u65f6\u9650 2.5s\u3002\n\n# Solution\n\n\u663e\u7136\u7531\u7ea6\u6570\u4e2a\u6570\u5b9a\u7406\u77e5\uff0c\u628a\u533a\u95f4\u5185\u6570\u505a\u8d28\u56e0\u6570\u5206\u89e3\u540e\uff0c$\\prod (x_i+1)$ \u5373\u4e3a\u7b54\u6848\uff08\u5176\u4e2d $x_i$ \u4e3a\u8d28\u56e0\u6570\u6b21\u6570\uff09\u3002\n\n\u8003\u8651\u600e\u6837\u6734\u7d20\u5730\u505a\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 $\\sqrt V$ \u5185\u8d28\u6570\u7ebf\u6027\u7b5b\u51fa\uff0c\u7136\u540e $\\sqrt {a_i}$ \u5730\u679a\u4e3e\u8d28\u6570\uff0c\u5224\u65ad\u662f\u5426 $a_i \\bmod p_i=0$\u3002\u82e5 $a_i$ \u65e0\u6cd5\u88ab\u5206\u89e3\uff0c\u90a3\u4e48 $a_i$ \u5fc5\u5b9a\u662f\u4e2a\u8d28\u6570\uff08\u8fd9\u6837 $>\\sqrt V$ \u7684\u8d28\u6570\u4e2a\u6570\u4e0a\u754c\u662f $\\mathcal O(n)$\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u5c06\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u505a\u5230 $\\mathcal O(\\sqrt V+n \\dfrac{\\sqrt {a_i}}{\\log a_i})$\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\u7528\u83ab\u961f\u8fdb\u884c\u8f6c\u79fb\uff0c\u4e0d\u96be\u505a\u5230\u67e5\u8be2 $\\mathcal O((n+m) \\sqrt n)$ \u7684\u590d\u6742\u5ea6\uff08\u4e8b\u5b9e\u4e0a\uff0c\u8fd8\u6709\u4e00\u4e2a\u8f6c\u79fb\u65f6\u8d28\u56e0\u6570\u4e2a\u6570\u7684\u590d\u6742\u5ea6\uff0c\u4e0d\u8fc7 $10^9$ \u4ee5\u5185\u6700\u591a\u4e5f\u5c31 $9$ \u4e2a\u8d28\u56e0\u6570\uff0c\u5f71\u54cd\u4e0d\u5927\uff1b\u800c\u4e14\u5982\u679c\u5361\u5230\u4e86\u8fd9\u4e2a\u4e0a\u754c\u7684\u8bdd\uff0c\u90a3\u524d\u9762\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u5c31\u4f1a\u5927\u5927\u51cf\u5c0f\uff09\u3002\n\n\u5c06\u9898\u76ee\u7ed9\u51fa\u7684 $n,m,V$ \u7684\u4e0a\u754c\u4ee3\u5165\u540e\uff0c\u4f60\u4f1a\u53d1\u73b0\u524d\u9762\u7684\u590d\u6742\u5ea6\u57fa\u672c\u662f $3 .5 \\times 10^8$ \u5de6\u53f3\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u6211\u4eec\u5b9e\u73b0\u8db3\u591f\u7cbe\u7ec6\uff0c\u5b8c\u5168\u53ef\u4ee5\u6734\u7d20\u5730\u901a\u8fc7\u672c\u9898\u3002\n\n\u52a0\u4e0a\u52a0\u901f\u8d28\u56e0\u6570\u5206\u89e3\u7684 Exact Division \u548c\u83ab\u961f\u5947\u5076\u6027\u6392\u5e8f\u4f18\u5316\u540e\uff0c\u5b9e\u73b0\u4e0a\u8ff0\u601d\u8def\u7684\u4ee3\u7801[\u8f7b\u677e](https://www.luogu.com.cn/record/list?pid=P5071&orderBy=1&status=&page=1)\u5730\u8dd1\u8fdb\u4e86 2021 \u5e74 8 \u6708\u540e\u7684\u6700\u4f18\u89e3\u7b2c\u4e00\u9875\u3002\u914d\u5408 Pollard Rho \u548c\u6839\u53f7\u5206\u6cbb\uff0c\u8fd9\u4efd\u4ee3\u7801\u8fd8\u53ef\u4ee5\u5e94\u5bf9 $V$ \u66f4\u5927\u7684\u6570\u636e\u3002\n\n## \u8be6\u7ec6\u63ed\u79d8 Exact Division (by Min_25)\n\n\u611f\u8c22 @AThousandMoon \u7b49 UOJ \u4f17\u795e\u5bf9\u6211\u7684\u6307\u5bfc\u3002\n\n\u5bf9\u4e8e\u4efb\u610f $a,b \\in [0,2^k) \\cap \\mathbb N$\uff0c\u5176\u4e2d $b >1$ \u4e14 $b \\bmod 2=1$\uff0c$a \\bmod b=0$ \u6210\u7acb\u7684\u5145\u8981\u6761\u4ef6\u662f\n\n$$ab^{-1} \\bmod 2^k \\le \\left\\lfloor\\dfrac{2^k}{b}\\right\\rfloor$$\n\n\u8bc1\u660e\u53ef\u4ee5\u53c2\u89c1 [hly1204 \u5bf9 Min_25 \u539f\u4f5c\u7684\u4e2d\u6587\u8bd1\u7248](https://loj.ac/d/3068)~~\uff0c\u4e00\u822c\u6765\u8bf4\u6ca1\u6709\u5fc5\u8981\u638c\u63e1\uff0c\u53ea\u9700\u8981\u8bb0\u7b80\u5355\u7684\u7ed3\u8bba\u5c31\u884c\u4e86~~\u3002\n\n\u4e0d\u59a8\u53d6 $k=32$\uff0c\u90a3\u4e48\u901a\u8fc7 unsigned int \u7684\u81ea\u7136\u6ea2\u51fa\u53ef\u4ee5\u5927\u5927\u4f18\u5316\u5e38\u6570\u3002\n\n### \u5173\u4e8e\u5982\u4f55\u6c42 $\\bmod 2^{32}$ \u610f\u4e49\u4e0b $b$ \u7684\u4e58\u6cd5\u9006\u5143\n\n\u53ef\u4ee5\u901a\u8fc7\u725b\u987f\u8fed\u4ee3\u5b9e\u73b0\uff0c\u4e5f\u5373 [P4512](https://www.luogu.com.cn/problem/P4512) \u7684\u505a\u6cd5\uff1a\n\n$$G(x) \\equiv 2 G_*(x) - F(x)G_*(x)^2 \\pmod {x^n}$$\n\n\u5176\u4e2d $F(x)G_*(x) \\equiv 1 \\pmod {x^\\frac{n}{2}}$\uff0c$F(x)G(x) \\equiv 1 \\pmod {x^n}$\u3002\n\n\u4ee4 $x=2$ \u5c31\u884c\u4e86\u3002\n\n# Code\n\n\u5361\u5e38\u7559\u4f5c\u8bfb\u8005\u7ec3\u4e60\u3002\n\n```cpp\ntypedef unsigned int ui;\n\nconst int N=1e5+1,V=31623,P=3411,D=11,mod=19260817,M=3e6+1,K=V+N-1;\n\nint n,m,tot,Ret=1,p[P],ds[N][D],dv[N][D],inv[M],b[N],u[K],Ans[N];\nui pv[P],pm[P];\nbitset<V> vs;\nunordered_map<int,int> mp;\n\ninline char gc() {\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2 && (p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++; \n}\n\ninline int rd() {\n\tint x=0;\n\tchar ch=gc();\n\twhile (ch<'0' || ch>'9') ch=gc();\n\twhile (ch>='0' && ch<='9') {\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=gc();\n\t}\n\treturn x;\n}\n\ninline void wr(int x) {\n    static int s[20];\n\tint tot=0;\n    while (x) s[tot++]=x%10,x/=10;\n    while (tot) putchar(s[--tot]+48);\n}\n\nstruct Qst {\n\tint l,r,id;\n\tbool operator<(const Qst &x) const {\n\t\treturn (b[l]^b[x.l])?l<x.l:((b[l]&1)?r<x.r:r>x.r);\n\t}\n}q[N];\n\ninline ui inv32(ui n) {\n\tui x=1;\n\tfor (int i=0;i<5;i++) x*=2u-n*x;\n\treturn x;\n}\n\nvoid Init(int n) {\n\tvs[1]=1;\n\ttot=1,p[1]=2,vs[4]=1;\n\tfor (int i=3;i<=n;i++) {\n\t\tif (vs[i]==0)\n\t\t\tp[++tot]=i,pv[tot]=inv32(i),\n\t\t\tpm[tot]=ui(-1)/i;\n\t\tif (i*2<=n) vs[i*2]=1;\n\t\telse continue;\n\t\tif (!(i&1)) continue;\n\t\tfor (int j=2;j<=tot && i*p[j]<=n;j++) {\n\t\t\tvs[i*p[j]]=1;\n\t\t\tif (i*pv[j]<=pm[j]) break;\n\t\t}\n\t}\n}\n\nvoid Add(int x) {\n\tfor (int i=1;i<=ds[x][0];i++)\n\t\tRet=1ll*Ret*inv[u[dv[x][i]]+1]%mod,u[dv[x][i]]+=ds[x][i],\n\t\tRet=1ll*Ret*(u[dv[x][i]]+1)%mod;\n}\n\nvoid Del(int x) {\n\tfor (int i=1;i<=ds[x][0];i++)\n\t\tRet=1ll*Ret*inv[u[dv[x][i]]+1]%mod,u[dv[x][i]]-=ds[x][i],\n\t\tRet=1ll*Ret*(u[dv[x][i]]+1)%mod;\n}\n\nint main() {\n\tInit(V-5);\n\tn=rd(),m=rd();\n\tint idt=tot;\n\tui x;\n\tfor (int i=1;i<=n;i++) {\n\t\tx=rd();\n\t\tint k=0;\n\t\tif (!(x&1)) {\n\t\t\tk++,ds[i][k]++,dv[i][k]=1,x>>=1;\n\t\t\twhile (!(x&1)) ds[i][k]++,x>>=1;\n\t\t}\n\t\tfor (int j=2;j<=tot;j++)\n\t\t\tif (x*pv[j]<=pm[j]) {\n\t\t\t\tk++,ds[i][k]++,dv[i][k]=j,x*=pv[j];\n\t\t\t\twhile (x*pv[j]<=pm[j]) ds[i][k]++,x*=pv[j];\n\t\t\t\tif (x==1) break;\n\t\t\t}\n\t\tif (x>1) {\n\t\t\tk++,ds[i][k]++;\n\t\t\tif (!mp[x]) mp[x]=++idt;\n\t\t\tdv[i][k]=mp[x];\n\t\t}\n\t\tds[i][0]=k;\n\t}\n\tinv[1]=1;\n\tfor (int i=2;i<M;i++) inv[i]=1ll*(mod-mod/i)*inv[mod%i]%mod;\n\tint bk=sqrt(n);\n\tfor (int i=1;i<=n;i++) b[i]=(i-1)/bk+1;\n\tfor (int i=1;i<=m;i++)\n\t\tq[i].l=rd(),q[i].r=rd(),q[i].id=i;\n\tsort(q+1,q+m+1);\n\tint L=1,R=0;\n\tfor (int i=1;i<=m;i++) {\n\t\twhile (L>q[i].l) Add(--L);\n\t\twhile (R<q[i].r) Add(++R);\n\t\twhile (L<q[i].l) Del(L++);\n\t\twhile (R>q[i].r) Del(R--);\n\t\tAns[q[i].id]=Ret;\n\t}\n\tfor (int i=1;i<=m;i++) wr(Ans[i]),puts(\"\");\n\treturn 0;\n}\n```\n",
        "postTime": 1644460235,
        "uid": 283913,
        "name": "ZillionX",
        "ccfLevel": 6,
        "title": "\u300c\u9898\u89e3\u300dP5071 [Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89"
    },
    {
        "content": "\u6211\u6c38\u8fdc\u559c\u6b22\u73c2\u6735\u8389\u3002\n\n\u9996\u5148\u8003\u8651\u7ea6\u6570\u4e2a\u6570\u5b9a\u7406\uff0c\u5148\u628a\u6240\u6709\u6570\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u628a\u56e0\u6570\u79bb\u6563\u5316\u4e4b\u540e\u5f00\u4e2a\u6876\u8ba1\u7b97\u6bcf\u4e2a\u56e0\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u8fd9\u91cc\u5206\u89e3\u8d28\u56e0\u6570\u7528 PR \u6216\u8005\u9884\u5904\u7406\u5c0f\u4e8e $\\sqrt{10^9}$ \u7684\u8d28\u6570\u7136\u540e\u66b4\u529b\u5206\u89e3\u8d28\u56e0\u6570\u90fd\u53ef\u4ee5\uff0c\u66b4\u529b\u590d\u6742\u5ea6\u7ea6 $3401n$ \u8dd1\u7684\u4e5f\u5feb\u3002\n\n\u7136\u540e\u83ab\u961f\u5904\u7406\uff0c\u6bcf\u6b21\u589e\u51cf\u4e00\u4e2a\u6570\u4ea7\u751f\u7684\u8d21\u732e\u53ea\u9700\u679a\u4e3e\u5b83\u7684\u8d28\u56e0\u6570\u8ba1\u7b97\u53d8\u5316\u91cf\uff0c\u7531\u4e8e $10^9$ \u4ee5\u5185\u7684\u6570\u6700\u591a\u53ea\u6709 $9$ \u4e2a\u4e0d\u540c\u7684\u8d28\u56e0\u6570\uff0c\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\u662f $9m\\sqrt{n}$\u3002\n\n\u7406\u8bba\u4e0a\u6765\u8bf4\u8fd9\u4e2a\u662f\u8fc7\u4e0d\u53bb\u7684\uff0c\u53ef\u4ee5\u5bf9\u4e8e\u8f83\u5c0f\u7684\u8d28\u6570\u6bcf\u4e2a\u8d28\u6570\u5f00\u6876\u7528\u524d\u7f00\u548c\u6765\u7edf\u8ba1\u533a\u95f4\u4e58\u79ef\u4e2d\u8fd9\u4e2a\u8d28\u6570\u7684\u6b21\u6570\uff0c\u9608\u503c\u53ef\u4ee5\u5f00\u5230 $1000$ \u5de6\u53f3\uff0c\u4f46\u662f\u5b9e\u6d4b\u8dd1\u7684\u6bd4\u4e0d\u52a0\u4f18\u5316\u6162\u3002\n\n\u83ab\u961f\u6d89\u53ca\u5230\u9664\u6cd5\uff0c\u9884\u5904\u7406\u9006\u5143\u5373\u53ef\u3002\n\n\u5c0f\u5fc3\u7206 int\uff0c\u6211\u56e0\u4e3a\u5b83\u6302\u4e86\u4e00\u53d1\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define y1 fjodifjsdidi\nusing namespace std;\ntypedef long long ll;\nconst int maxn=100005,sz=338,maxb=400,sqa=31622,mod=19260817;\nconst int T=1;\nint n,m,a[maxn],bel[maxn];\ninline int read()\n{\n\tint x=0,f=1;char c=getchar();\n\twhile(!isdigit(c)) {if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)) {x=x*10+c-48;c=getchar();}\n\treturn x*f;\n}\nint pcnt,P[sqa+5];\nbool isp[sqa+5];\nvoid pre()\n{\n\tfor(int i=2;i<=sqa;i++)\n\t{\n\t\tif(!isp[i])\n\t\t{\n\t\t\tP[++pcnt]=i;\n\t\t}\n\t\tfor(int j=1;j<=pcnt&&i*P[j]<=sqa;j++)\n\t\t{\n\t\t\tisp[i*P[j]]=true;\n\t\t\tif(i%P[j]==0) break;\n\t\t}\n\t}\n}\nint d[1000005],c[1000005],ld[maxn],rd[maxn],inv[mod+5],p[1000005],cnt,t[1000005];\nint sum[170][maxn];\nint res=1;\nint ans[maxn];\nmap<int,int> mp;\nstruct opt\n{\n\tint l,r,id;\n}q[maxn];\nbool cmp(opt aa,opt bb)\n{\n\tif(bel[aa.l]!=bel[bb.l]) return aa.l<bb.l;\n\tif(bel[aa.l]%2==1) return aa.r<bb.r;\n\treturn aa.r>bb.r;\n}\nvoid add(int x)\n{\n\tif(!x) return;\n\tfor(int i=rd[x];i>=ld[x];i--)\n\t{\n\t\tif(p[d[i]]<=T) break;\n        \n\t\tres=1ll*res*inv[t[d[i]]]%mod*(t[d[i]]+c[i])%mod;\n\t\tt[d[i]]+=c[i];\n\t}\n}\nvoid del(int x)\n{\n\tif(!x) return;\n\tfor(int i=rd[x];i>=ld[x];i--)\n\t{\n\t\tif(p[d[i]]<=T) break;\n\t\tres=1ll*res*inv[t[d[i]]]%mod*1ll*(t[d[i]]-c[i])%mod;\n\t\tt[d[i]]-=c[i];\n\t}\n}\nint main()\n{\n\t//freopen(\"test.in\",\"r\",stdin);\n\t//freopen(\"test1.out\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&m);\n    pre();\n    inv[1]=1;for(int i=2;i<mod;i++)\n\t{\n\t\tinv[i]=1ll*inv[mod%i]*(mod-mod/i)%mod;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t\tint t=a[i];\n\t\tld[i]=rd[i-1]+1;\n\t\trd[i]=rd[i-1];\n\t\tfor(int j=1;j<=pcnt;j++)\n\t\t{\n\t\t\tif(t==1) break;\n\t\t\tif(t%P[j]==0)\n\t\t\t{\n\t\t\t\tp[++cnt]=P[j];\n\t\t\t\td[++rd[i]]=P[j];\n\t\t\t\twhile(t%P[j]==0)\n\t\t\t\t{\n\t\t\t\t\tt/=P[j];\n\t\t\t\t\tc[rd[i]]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(t>1)\n\t\t{\n\t\t\td[++rd[i]]=t;c[rd[i]]=1;\n\t\t\tp[++cnt]=t;\n\t\t}\n\t}\n\tsort(p+1,p+cnt+1);\n\tcnt=unique(p+1,p+cnt+1)-p-1;\n\tfor(int i=1;i<=cnt;i++) mp[p[i]]=i;\n\tfor(int i=1;i<=rd[n];i++) d[i]=mp[d[i]],t[i]=1;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tbel[i]=(i-1)/sz+1;\n\t\tq[i].id=i;scanf(\"%d%d\",&q[i].l,&q[i].r);\n\t\tans[i]=1;\n\t}\n\tfor(int i=1;P[i]<=T;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tsum[i][j]=sum[i][j-1];\n\t\t\tint t=a[j];\n\t\t\twhile(t%P[i]==0)\n\t\t\t{\n\t\t\t\tt/=P[i];\n\t\t\t\tsum[i][j]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tfor(int j=1;P[j]<=T;j++)\n\t\t{\n\t\t\tint t=sum[j][q[i].r]-sum[j][q[i].l-1]+1;\n\t\t\tif(t>=mod) t-=mod;\n\t\t\tans[i]=1ll*ans[i]*t%mod;\n\t\t}\n\t}\n\tsort(q+1,q+m+1,cmp);\n\tint l=1,r=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\twhile(l>q[i].l)\n\t\t{\n\t\t\tl--;add(l);\n\t\t}\n\t\twhile(r<q[i].r)\n\t\t{\n\t\t\tr++;add(r);\n\t\t}\n        //cout<<l<<\" \"<<r<<\" \"<<q[i].id<<\" \"<<res<<endl;\n\t\twhile(l<q[i].l)\n\t\t{\n\t\t\tdel(l);l++;\n\t\t}\n\t\twhile(r>q[i].r)\n\t\t{\n\t\t\tdel(r);r--;\n\t\t}\n\t\tans[q[i].id]=1ll*res*ans[q[i].id]%mod;\n\t}\n\tfor(int i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1630130514,
        "uid": 191868,
        "name": "monstersqwq",
        "ccfLevel": 8,
        "title": "P5071 [Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89 \u9898\u89e3"
    },
    {
        "content": "> \u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3002\u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\uff0c\u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4f17\u4eba\uff0c \u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\uff0c\u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\u3001\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\u3002\u6211\u56de\u6765\u4e86\uff0c\u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\uff0c\u76fc\u541b\u52ff\u5fd8\u3002  \n\u2014\u2014\u4e16\u754c\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69  \n\u2014\u2014\u672b\u65e5\u65f6\u5728\u505a\u4ec0\u4e48?\u6709\u6ca1\u6709\u7a7a?\u53ef\u4ee5\u6765\u62ef\u6551\u5417?\n\n\u770b\u5230\u4e86\u9898\u4e0b\u5927\u96e8\u3002\n\n---\n\n\u53c8\u662f\u4e00\u4e2a\u4e0d\u5361\u5e38\u7684Ynoi\u9898\u3002\n\n\u524d\u7f6e\u829d\u58eb\uff1aPR\uff0c\u83ab\u961f\n\n\u8bb0$d(n)$\u8868\u793a$n$\u7684\u56e0\u5b50\u4e2a\u6570\n\n\u9996\u5148\uff0c\u8bbe$a_i=\\prod_{j=1}^{k}p_{j}^{\\alpha_{i,j}}$\uff0c\u5219\u6709\n\n$$d(\\prod_{i=l}^{r}a_i)=\\prod_{i=1}^{k}(1+\\sum_{j=l}^{r}\\alpha_{j,i})$$\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5PR\u9884\u5904\u7406$\\alpha$\uff0c\u7136\u540e\u7b97\u5217\u524d\u7f00\u548c\uff0c\u590d\u6742\u5ea6$O(n\\sqrt[4]{10^9}+\\pi(10^9)m)$\uff0c\u5176\u4e2d$\\pi(n)$\u8868\u793a$\\le n$\u7684\u8d28\u6570\u4e2a\u6570\u3002\n\n\u6216\u8005\uff0c\u6211\u4eec\u6ce8\u610f\u5230$a_i$\u7684\u7d20\u56e0\u5b50\u4e2a\u6570\u5176\u5b9e\u4e0d\u8d85\u8fc710\u4e2a\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528PR\u5206\u89e3\uff0c\u7136\u540e\u83ab\u961f\u7ef4\u62a4\u533a\u95f4\u7684\u8d28\u56e0\u6570\uff0c\u8fd9\u6837\u603b\u590d\u6742\u5ea6$O(10n\\sqrt n+n\\sqrt[4]{10^9})$\uff0c\u867d\u7136\u770b\u8d77\u6765\u6ca1\u95ee\u9898\u5176\u5b9e\u4f1aT\u98de\u3002\n\n\u90a3\u6b63\u89e3\u662f\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u4e24\u79cd\u505a\u6cd5\u5404\u6709\u4f18\u52a3\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5c061000\u4ee5\u5185\u7684\u8d28\u6570\u53d6\u51fa\u6765\u7528\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u522b\u7684\u7528\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u3002\n\n\u7531\u4e8e\u5bf9\u6bcf\u4e2a$a_i$\uff0c\u5927\u4e8e1000\u7684\u8d28\u56e0\u6570\u81f3\u591a2\u4e2a\uff0c\u56e0\u6b64\u5e38\u6570\u4f1a\u5c0f\u4e0d\u5c11\u3002\n\n\u590d\u6742\u5ea6$O(1000+n\\sqrt[4]{10^9}+n\\pi(1000)+2n\\sqrt n)$\u3002\n\n\u7531\u4e8e\u4e00\u70b9\u4e5f\u4e0d\u5361\u5e38\uff0c\u6240\u4ee5\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86\u3002",
        "postTime": 1587567755,
        "uid": 121027,
        "name": "Spasmodic",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "Pollard-Rho \u7b80\u5355\u7ec3\u4e60\u9898\uff0c\u5199\u4e86\u677f\u5b50\u7528\u8fd9\u9053\u9898\u68c0\u9a8c\u4e00\u4e0b\u5c31\u6bd4\u8f83\u8212\u670d\u3002\n\n\u9996\u5148\u662f\u4f17\u6240\u5468\u77e5\u7684\u7ea6\u6570\u4e2a\u6570\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u4ee4 $c(x)$ \u4e3a $x$ \u7684\u7ea6\u6570\u4e2a\u6570\uff1a\n\n\u82e5 $x=\\prod_ip_i^{c_i}$\uff0c\u5219 $c(x)=\\prod_i(c_i+1)$\u3002\n\n\u90a3\u4e48\u76f4\u63a5\u4ece\u8d28\u56e0\u6570\u4e0b\u624b\uff0c\u8fd9\u73a9\u610f\u5c31\u4e00\u8138\u7684\u6839\u53f7\u5206\u6cbb\uff0c\u624b\u7b97\u4e00\u4e0b\u754c\uff0c\u628a $1000$ \u4ee5\u5185\u7684 $168$ \u4e2a\u8d28\u6570\u53d6\u51fa\u6765\u505a\u524d\u7f00\u548c\uff0c\u5269\u4e0b\u7684\u6bcf\u4e2a\u6570\u6700\u591a\u63d0\u4f9b\u4e24\u4e2a\u8d28\u56e0\u5b50\u3002\n\n\u8003\u8651\u8fd9\u81f3\u591a $2n$ \u4e2a\u8d28\u56e0\u6570\u7684\u8d21\u732e\uff0c\u770b\u8d77\u6765\u53c8\u662f\u4e00\u8138\u7684\u6839\u53f7\u5206\u6cbb\uff1f\n\n\u53d1\u73b0\u7ea6\u6570\u4e2a\u6570\u7684\u516c\u5f0f\u5f88\u9002\u5408 $O(1)$ \u589e\u51cf\uff0c\u7528\u83ab\u961f\u53ef\u4ee5\u51cf\u5c11\u5f88\u591a\u7684\u96be\u5ea6\u3002\uff08\u7b14\u8005\u611f\u89c9\u76f4\u63a5\u5bf9\u8fd9\u73a9\u610f\u4e0a\u6839\u53f7\u5206\u6cbb\u4e5f\u662f\u5f88\u53ef\u884c\u7684\uff0c\u4f46\u62b5\u4e0d\u4e0a\u6211\u592a\u61d2\u4e86\n\n\u4e8e\u662f\u5148\u4e0a Pollard-Rho \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u6839\u53f7\u5206\u6cbb\u5c0f\u7684\u66b4\u529b\uff0c\u5927\u7684\u76f4\u63a5\u62c9\u83ab\u961f\u8dd1\u4e00\u8dd1\u5c31\u5b8c\u4e86\u3002\n\n------------\n\n\u4ee5\u4e0b\u662f\u590d\u6742\u5ea6\u548c\u5361\u5e38\uff1a\n\n\u6839\u53f7\u5206\u6cbb\u5c0f\u7684\u90e8\u5206\u662f\u7528\u6570\u7ec4\u66b4\u529b\u505a\u524d\u7f00\u548c\uff0c\u590d\u6742\u5ea6\u4e3a $O(168(n+Q))$\uff0c\u8dd1\u7684\u4e0d\u6162\u3002\n\n\u6839\u53f7\u5206\u6cbb\u5927\u7684\u90e8\u5206\u5148\u6709\u4e2a Pollard-Rho\uff0c\u671f\u671b\u590d\u6742\u5ea6 $O(n10^{\\frac 94})$\uff0c\u4f17\u6240\u5468\u77e5 Pr \u590d\u6742\u5ea6\u548c\u5e38\u6570\u90fd\u633a\u7384\u5b66\u7684\u3002\n\n\u7136\u540e\u662f\u83ab\u961f\uff0c\u6211\u4eec\u624b\u5199\u4e00\u4e2a Hash \u8868\uff0c\u590d\u6742\u5ea6 $O(n\\sqrt Q)$\u3002\n\n\u597d\u50cf\u6709\u4e2a\u9006\u5143\u7684\u5904\u7406\u7ec6\u8282\u5e94\u8be5\u6ca1\u4eba\u4e0d\u4f1a\u5427\uff08\uff0c\u53cd\u6b63\u6211\u76f4\u63a5\u8dd1\u4e86 $10^6$ \u4ee5\u5185\u7684\u9006\u5143\u5b8c\u5168\u4e0d\u662f\u74f6\u9888\u3002\n\n\u7136\u540e\u662f\u5361\u5e38\uff0c\u9996\u5148\u4e00\u90e8\u5206\u4e00\u90e8\u5206\u7684\u6302\u4e0a\u53bb\u53d1\u73b0\u679c\u7136\u662f Pr \u7684\u5e38\u6570\u6700\u5927\uff0c\u4e8e\u662f\u53ea\u7528\u6307\u7740 Pr \u5361\u5c31\u80fd\u5361\u8fc7\u53bb\uff1a\n\n- \u628a `LL` \u6362\u6210 `int`\uff0c\u628a\u9f9f\u901f\u4e58/`__int128` \u76f4\u63a5\u6362\u6210 `LL` \u4ee5\u5185\u7684\u4e58\u6cd5\u3002\n- Miller-Rabin \u90a3\u91cc\u76f4\u63a5\u7528 3 \u6b21\u7684\u786e\u5b9a\u6027\u5224\u7d20\u6570\uff0c\u56e0\u4e3a $2^{32}$ \u4ee5\u5185\uff0c\u6216\u8005\u4f60\u968f 3 \u6b21\uff08\u4e0d\u4fdd\u8bc1\u80fd\u8fc7\uff09\n- \u6700\u597d\u6709\u624b\u5199\u968f\u673a\u6570\u7684\u4e60\u60ef\uff0c`rand` \u4e4b\u7c7b\u7684\u4e0d\u9760\u8c31\u3002\n\n\u7136\u540e\u518d\u7ed9\u5176\u4ed6\u90e8\u5206\u63d0\u63d0\u901f\uff0c\u53d1\u73b0\u6839\u53f7\u5206\u6cbb\u7684\u5927\u5c0f\u5b8c\u5168\u4e0d\u5f71\u54cd\u540e\u9762 Pr \u548c\u83ab\u961f\u7684\u901f\u5ea6\uff08\n\n\u4e8e\u662f\u628a\u6839\u53f7\u5206\u6cbb\u7684\u754c\u8df3\u5230 $500\\sim 700$ \u751a\u81f3\u53ef\u4ee5\u53d8\u5feb\uff0c\u83ab\u961f\u90e8\u5206\u90fd\u624b\u5199 Hash_table \u4e86\u4e5f\u6ca1\u5565\u5361\u5934\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u8fc7\u4e86\uff0c\u8fd9\u4e9b\u7ec6\u8282\u6ce8\u610f\u4e00\u4e0b\uff0c\u5176\u4ed6\uff08\u6307 Pr\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u6211\u5c31\u6162\u5728\u8fd9\u91cc\u8fd8\u4e0d\u4f1a\u5361\uff09\u5b9e\u73b0\u5dee\u70b9\u4e5f\u80fd\u8fc7\uff0c~~\u5c31\u7b97\u4f60\u7684 Pr \u5199\u7684\u548c\u6211\u7684\u4e00\u6837\u5dee\u90fd\u80fd\u5728 2~2.4s \u5185\u628a\u6700\u5361\u7684\u70b9\u8dd1\u8fc7\u53bb~~\u3002\n\n[\u51e0\u4e4e\u6ca1\u5361\u5e38\u7684\u4ee3\u7801](https://www.luogu.com.cn/paste/yfkbhgw8)",
        "postTime": 1647760856,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "P5071 [Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89"
    },
    {
        "content": "[\u9898\u4f20](https://www.luogu.com.cn/problem/P5071)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/o0yvqazc.png)\n\n\u505a\u5b8c [CF1422F](https://www.luogu.com.cn/problem/CF1422F) \u518d\u505a\u8fd9\u9053\u9898\u5c31\u80a5\u80a0\u6709\u611f\u89c9\u4e86\u3002\n\n~~\u5982\u679c\u4f60\u4e0d\u60f3\u518d\u770b\u4e00\u9898\u90a3\u4e48\u6211\u5c31\u65e0\u803b\u63a8\u9500\u4e00\u4e0b [\u6211\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/Tomori-Nao/CF1422F)\u3002~~\n\n\n\n$$\\text{\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u6211\u662f\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014}$$\n\n\n\u8bf7\u786e\u4fdd\u4f60\u5df2\u7ecf\u77e5\u9053\u4e86 CF1422F \u7684\u505a\u6cd5\u3002\n\n\u7b80\u5316\u9898\u610f\uff1a\u591a\u6b21\u8be2\u95ee\uff0c\u6c42 $\\sigma_0 (\\prod_{i=l}^r a_i)$\u3002\n\n~~\u6211\u4f1a\u79ef\u6027\u51fd\u6570\u7ebf\u6027\u7b5b~~\n\n\u8bbe\u7d20\u6570\u96c6 $P=\\{p_1, p_2, \\dots p_m \\}$\uff0c\u5219\u5e8f\u5217\u4e2d\u7684\u6570 $a_i$ \u53ef\u8868\u793a\u6210\uff1a\n\n$$\\prod_{j=1}^m p_j^{c_{i, j}}$$\n\n\u90a3\u4e48\u6839\u636e\u7ea6\u6570\u7684\u5b9a\u4e49\uff08\u9009\u51fa\u8d28\u56e0\u5b50\u7684\u7ec4\u5408\uff09\uff0c\u6709\uff1a\n\n$$\\sigma_0 (\\prod_{i=l}^r a_i)=\\prod_{j=1}^{m} (1+\\sum_{i=l}^{r} c_{i, j})$$\n\n\u73b0\u5728\u76ee\u6807\u975e\u5e38\u660e\u786e\uff1a\u7ef4\u62a4\u4e0a\u9762\u8fd9\u4e00\u5768\u4e1c\u897f\uff01\n\n\u7531\u4e8e\u589e\u51cf\u4e00\u4e2a\u6570\u4f1a\u5728\u5f88\u591a\u4e2a\u62ec\u53f7\u91cc\u4ea7\u751f\u6539\u52a8\uff0c\u6240\u4ee5\u663e\u7136\u4e0d\u80fd\u7528\u7ebf\u6bb5\u6811\u7b49\u5728\u7ebf\u6570\u636e\u7ed3\u6784\u4e71\u641e\u4e86\uff0c\u8003\u8651\u79bb\u7ebf\u4e0b\u6765\u83ab\u961f\u3002\n\n\u8bbe $cnt_j =\\sum_{i=l}^r c_{i, j}$\n\n\u663e\u7136\u4e0d\u80fd\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u6570\u4fee\u6539\u6240\u6709\u8d28\u56e0\u5b50\u7684 $cnt$\uff0c\u8fd9\u65f6\u5019\u4f60\u60f3\u5230\u4e86 CF1422F \u7684\u505a\u6cd5\uff0c\u6839\u53f7\u5206\u6cbb\uff0c$\\sqrt{Max_a}\\approx 31623=R$\u3002\n\n- \u5bf9\u4e8e $\\le R$ \u7684\u7d20\u6570\uff0c\u524d\u7f00\u548c\u8bb0\u4e0b $a_i$ \u7684 $c$\uff0c\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u66b4\u529b\u679a\u4e3e\u8fd9\u4e9b\u6570\uff0c\u628a\u8d21\u732e\u7b97\u4e0a\uff08\u6ce8\u610f\u8fd9\u91cc\u7684\u201c\u8be2\u95ee\u201d\u6307\u7684\u4e0d\u662f\u5728\u83ab\u961f\u91cc\u9762\u641e\uff0c\u800c\u662f\u76f4\u63a5\u505a\uff09\n\n- \u5bf9\u4e8e $\\ge R$ \u7684\u7d20\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u76f4\u63a5\u4e0a\u83ab\u961f\uff0c\u6bcf\u6b21\u76f4\u63a5\u5bf9\u5e94\u4fee\u6539\u8fd9\u4e2a\u6570\u3002\n\n\u7136\u540e\u6253\u4e2a\u8868\uff0c\u53d1\u73b0 $\\le R$ \u7684\u7d20\u6570\u6709 $3000$ \u591a\u4e2a\uff0c\u7a7a\u95f4\u98de\u5929\uff0c\u600e\u4e48\u529e\uff1f\n\n\u8003\u8651\u5230\u8fd9\u9898\u5bf9\u9608\u503c\u4e0a\u90e8\u5206\u7684\u8981\u6c42\u6ca1\u90a3\u4e48\u7d27\uff08\u4e0d\u50cf CF1422F \u90a3\u6837\u8981\u6c42\u533a\u95f4\u4e0d\u540c\u79cd\u7c7b\u6570\u4e14\u6307\u6570\u4e3a $1$\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u83ab\u961f\u7684\u65f6\u5019\u591a\u5904\u7406\u51e0\u4e2a\u7d20\u6570\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u73c2\u4ee5\u9002\u5f53\u5730\u8c03\u4f4e\u9608\u503c\uff0c\u8fd9\u91cc\u9009\u62e9 $R=p_{239}=1499$\uff0c\u7136\u540e\u5c31\u73c2\u4ee5\u6109\u5feb\u5730\u8dd1\u8fc7\u53bb\u4e86\u3002\n\n\u590d\u6742\u5ea6\u5927\u6982\u662f $O(239(n+q) + k n \\sqrt q)$\uff0c$k$ \u662f\u4e00\u4e2a\u5c0f\u5e38\u6570\uff0c\u4e0d\u8d85\u8fc7 $3$\uff08\u56e0\u4e3a $3$ \u4e2a $10^3$ \u4e58\u8d77\u6765\u5c31\u7206\u503c\u57df\u4e86\uff09\u3002\n\n\u6ce8\u610f\u5927\u8d28\u56e0\u5b50\u8981\u79bb\u6563\u5316\uff0c\u8fd9\u91cc\u4f7f\u7528 map\u3002\n\n```cpp\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <cctype>\n#include <cmath>\n#include <map>\n#include <vector>\nusing namespace std;\ntypedef long long ll;\ntypedef pair <int, int> PI;\ninline int read(){\n    char ch=getchar();int x=0, f=1;\n    while(!isdigit(ch)){if(ch=='-') f=-1; ch=getchar();}\n    while(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return x*f;\n}\nconst int mo=19260817;\ninline int ksm(int a, int b){\n    int ret=1;for(; b; b>>=1, a=1ll*a*a%mo)\n    if(b&1) ret=1ll*ret*a%mo;\n    return ret;\n}\nconst int N=1e5+1;\nconst int R=31623;//sqrt(1000000000)\nint tot, Su[3402], u[R];//prime=3401;\nint sum[N][240], a[N], n, m, Mx, up;\nint newcnt;\nmap <int, int> Mp;\nvector <PI> pri[N];\nint Getc(int &x, int p){\n    if(x%p) return 0;int res=0;\n    while(!(x%p)) res++, x/=p;\n    return res;\n}\nvoid Reverse(int id){//\u5206\u89e3 \n    int S=a[id];\n    for(int i=up+1; i<=tot; i++)\n        if(S%Su[i]==0){\n            int x=Getc(S, Su[i]);\n            pri[id].push_back(PI(i, x));\n        }\n    if(S>1){\n    \tif(!Mp[S]) ++newcnt, Mp[S]=newcnt+tot;\n        pri[id].push_back(PI(Mp[S], 1));\n    }\n}\nvoid pre(int E){\n    for(int i=2; i<=R; i++){\n        if(!u[i]) Su[++tot]=i;\n        for(int j=1; j<=tot&&i*Su[j]<=R; j++){\n            u[i*Su[j]]=1;if(!(i%Su[j])) break;\n        }\n        if(i<=E) up=tot;\n    }\n    up=min(239, up);\n    for(int i=1; i<=n; i++)\n        for(int j=1; j<=up; j++)\n            sum[i][j]=sum[i-1][j]+Getc(a[i], Su[j]);\n}\nint dis, ans[N];\nstruct Query{\n    int x, y, id;\n    bool operator < (const Query &S) const{\n        if(x/dis!=S.x/dis) return x/dis<S.x/dis;\n        return y<S.y;\n    }\n    void get(int s){x=read(), y=read(), id=s;}\n}Q[N];\nint inv[N], now=1, cnt[3402+N];\ninline void add(int x){//\u4e58\u4e0a a[x]\n    for(int i=0; i<pri[x].size(); i++){\n        PI tmp=pri[x][i];int las=cnt[tmp.first];\n        now=1ll*now*inv[las]%mo*(las+tmp.second)%mo;\n        cnt[tmp.first]+=tmp.second;\n    }\n}\ninline void del(int x){//\u9664\u6389 a[x]\n    for(int i=0; i<pri[x].size(); i++){\n        PI tmp=pri[x][i];int las=cnt[tmp.first];\n        now=1ll*now*inv[las]%mo*(las-tmp.second)%mo;\n        cnt[tmp.first]-=tmp.second;\n    }\n}\ninline void move(int &l, int &r, int x, int y){\n    while(l>x) add(--l);\n    while(r<y) add(++r);\n    while(r>y) del(r--);\n    while(l<x) del(l++);\n    return ;\n}\nsigned main(){\n    n=read(), m=read();if(!m) return 0;dis=n/sqrt(m);\n    for(int i=1; i<=n; i++) Mx=max(Mx, a[i]=read());\n    inv[0]=1;for(int i=1; i<N; i++) inv[i]=ksm(i, mo-2);//\u8ba1\u7b97\u9006\u5143 \n    pre(sqrt(Mx));\n    for(int i=1; i<=n; i++) Reverse(i);//\u5c06 a[i] \u4e2d\u5927\u4e8e su[239] \u7684\u5168\u90e8\u4e22\u5230\u4e00\u8d77\n    for(int i=1; i<=m; i++){\n        ans[i]=1;Q[i].get(i);\n        for(int j=1; j<=up; j++)\n            ans[i]=1ll*ans[i]*(sum[Q[i].y][j]-sum[Q[i].x-1][j]+1)%mo;//\u6839\u53f7\u5206\u6cbb\uff0c\u5148\u8ba1\u7b97\u5c0f\u7d20\u6570\u7684\u8d21\u732e \n    }\n    for(int i=1; i<=tot+newcnt; i++) cnt[i]=1;\n    sort(Q+1, Q+m+1);int L=1, R=0;\n    for(int i=1; i<=m; i++){\n        move(L, R, Q[i].x, Q[i].y);\n        ans[Q[i].id]=1ll*ans[Q[i].id]*now%mo;\n    }\n    for(int i=1; i<=m; i++) printf(\"%d\\n\", (ans[i]%mo+mo)%mo);\n    return 0;\n}\n```\n\n\n~~\u5e38\u6570\u80a5\u80a0\u5927.jpg~~\n\n\n\n\n\n\n\n",
        "postTime": 1635918506,
        "uid": 341102,
        "name": "ReKoJ",
        "ccfLevel": 0,
        "title": "P5071 [Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89"
    },
    {
        "content": "## \u524d\u8a00\n\n\u7b2c\u4e00\u6b21\u81ea\u5df1\u505a\u51fa Ynoi\uff01\uff08\u6ca1\u770b\u9898\u89e3\uff0c\u627e\u540c\u5b66\u8fc7\u4f46\u662f\u540c\u5b66\u6ca1\u6709\u7ed9\u6211\u4efb\u4f55\u5e2e\u52a9\uff0c\u53ea\u662f\u7cbe\u795e\u6fc0\u52b1\u2026\u2026\u2026\uff09\n\n\u7531\u4e8e 6.29 \u6211\u7ed9\u522b\u4eba\u5361\u5e38\uff0c\u7136\u540e\u5c31 A \u4e86\uff0c\u4e0d\u8fc7\u4e0d\u662f\u6211\u81ea\u5df1 A \u7684\uff0c\u6240\u4ee5\u6211\u9700\u8981\u81ea\u5df1 A \u4e00\u904d\u3002\n\n## \u601d\u8def\n\n\u6709\u8fd9\u6837\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n\u4e00\u4e2a\u6570\u7684\u56e0\u6570\u4e2a\u6570\u4e3a\u5b83\u6bcf\u4e2a\u8d28\u56e0\u6570\u7684\u6307\u6570\u52a0\u4e00\u5e76\u8fde\u4e58\u3002\n\n\u6bd4\u5982 $36=2^2 \\times 3^2$\uff0c\u5176\u56e0\u6570\u4e2a\u6570\u4e3a $(2+1) \\times (2+1)$\u3002\n\n\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u56e0\u6570\u7684\u8d28\u56e0\u6570\u7684\u6307\u6570\u90fd\u4e0d\u80fd\u8d85\u8fc7\u539f\u6570\u7684\u90a3\u4e2a\u8d28\u56e0\u6570\u7684\u6307\u6570\uff0c\u6240\u4ee5\u90a3\u4e2a\u8d28\u56e0\u6570\u90fd\u6709\u6307\u6570\u52a0\u4e00\u79cd\u9009\u62e9\uff0c\u901a\u8fc7\u4e58\u6cd5\u539f\u7406\u53ef\u5f97\u8fd9\u4e2a\u7ed3\u8bba\u3002\n\n\u90a3\u4e48\u8ba1\u7b97\u4e58\u79ef\u7684\u56e0\u6570\u4e2a\u6570\uff0c\u53ea\u9700\u8ba1\u7b97\u6bcf\u4e2a\u8d28\u56e0\u6570\u51fa\u73b0\u6b21\u6570\u3002\n\n\u8003\u8651\u6700\u66b4\u529b\u7684\uff0c\u7528 Pollard-Rho \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u66b4\u529b\u83ab\u961f\u3002\n\n\u83ab\u961f\u65f6\uff0c\u7528\u4e00\u4e2a `unordered_map` \u8868\u793a\u67d0\u4e2a\u8d28\u6570\u5728\u4e58\u79ef\u91cc\u7684\u51fa\u73b0\u4e2a\u6570\uff0c\u521d\u59cb\u503c\u4e3a $1$\uff08\u539f\u56e0\u89c1\u4e0a\uff09\u3002\u8bbe `now` \u4e3a\u5f53\u524d\u533a\u95f4\u4e58\u79ef\u7684\u56e0\u6570\u4e2a\u6570 $\\bmod$ \u6a21\u6570\u3002\u5f53\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u904d\u5386\u5176\u6240\u6709\u8d28\u56e0\u6570\u4ee5\u53ca\u5176\u6307\u6570\u3002\u5148\u5c06 `now` \u9664\u4ee5\u52a0\u4e0a\u8fd9\u4e2a\u8d28\u56e0\u6570\u4e4b\u524d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u8fd9\u4e2a\u8d28\u56e0\u6570\u7684\u51fa\u73b0\u6b21\u6570\u52a0\u4e0a\u8fd9\u4e2a\u8d28\u56e0\u6570\u7684\u6307\u6570\uff0c\u6700\u540e\u628a `now` \u518d\u4e58\u4e0a\u8fd9\u4e2a\u8d28\u56e0\u6570\u52a0\u4e4b\u540e\u7684\u51fa\u73b0\u6b21\u6570\u3002\n\n\u5220\u9664\u4e00\u4e2a\u6570\u540c\u7406\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u8981\u53d6\u6a21\uff0c\u6240\u4ee5\u9664\u6cd5\u9700\u8981\u9884\u5904\u7406\u9006\u5143\u3002\n\n\u56e0\u4e3a\u8d28\u56e0\u6570\u53ef\u80fd\u8fbe\u5230 $10^9$\uff0c\u6240\u4ee5\u7528\u4e00\u4e2a `unordered_map` \u8868\u793a\u5f53\u524d\u8d28\u56e0\u6570\u7684\u7f16\u53f7\u3002\u5bf9\u4e8e\u8d28\u56e0\u6570\u4e0d\u7528\u9884\u5904\u7406\uff0c\u5206\u89e3\u8d28\u56e0\u6570\u51fa\u6765\u7684\u8d28\u56e0\u6570\uff0c\u5982\u679c\u5df2\u7f16\u8fc7\u53f7\uff0c\u5c31\u4e0d\u653e\uff0c\u5426\u5219\u8fd9\u4e2a `unordered_map` \u7684\u8fd9\u4e2a\u8d28\u56e0\u6570\u7684\u7f16\u53f7\u4e3a\u5f53\u524d\u7f16\u53f7\u3002\n\n\u7f16\u53f7\u4e4b\u540e\uff0c\u4e0a\u6587\u8bf4\u7684 `unordered_map` \u7edf\u8ba1\u8d28\u6570\u5728\u4e58\u79ef\u91cc\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5c31\u4e0d\u9700\u8981 `unoedered_map` \u4e86\uff0c\u7edf\u8ba1\u65f6\u67e5\u627e\u7f16\u53f7\u5373\u53ef\u3002\n\n\u8fd9\u6837\u5199\u7684\u8bdd\u559c\u63d0 88 \u5206\u3002\n\n\u8003\u8651\u5728 [\u8fd9\u7bc7\u9898\u89e3](https://wa-derfulanswer.blog.luogu.org/P4305) \u63d0\u5230\u4e86\u4e00\u79cd\u548c `unordered_map` \u7c7b\u4f3c\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u76f4\u63a5\u5957\u5c31\u884c\u4e86\uff0c\u4f1a\u66f4\u5feb\u3002\n\n\u7136\u540e\u5c31 AC \u4e86~\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/hash_policy.hpp>\nusing namespace __gnu_pbds;\n#define mod 19260817\nusing namespace std;\n\nnamespace io... // \u5feb\u8bfb\u5feb\u5199\u9690\u85cf\u4e86\n\nint inv[4000010];\n\nint n,m;\n\nint a[100010];\n\nvector<pair<int,int> > ys[100010];\n\nint tot=0;\ngp_hash_table<int,int> zyzwz;\n\nint Count[60000010];\n\ninline int qmi(int a,int b,int c)\n{\n\tregister int ans=1,res=a;\n\twhile(b)\n\t{\n\t\tif(b&1) ans=1ll*ans*res%c;\n\t\tres=1ll*res*res%c,b>>=1;\n\t}\n\treturn ans;\n}\n\nint prime[]={2,23,61};\nbool mr(int x)\n{\n\tregister int s=0,t=x-1;\n\tif(x==2) return 1;\n\tif(x<2 || !(x&1)) return 0;\n\tfor(; !(t&1); ++s,t>>=1);\n\tfor(register int i=0; (i<3 && prime[i]<x); ++i)\n\t{\n\t\tint k,b=qmi(prime[i],t,x);\n\t\tfor(register int j=1; j<=s; ++j)\n\t\t{\n\t\t\tk=1ll*b*b%x;\n\t\t\tif(k==1 && b!=1 && b!=x-1) return 0;\n\t\t\tb=k;\n\t\t}\n\t\tif(b!=1) return 0;\n\t}\n\treturn 1;\n}\n\ninline int _gcd(int a,int b)\n{\n\tif(!a) return b;\n\tif(!b) return a;\n\tint t=__builtin_ctz(a|b),tmp;\n\ta>>=__builtin_ctz(a);\n\tdo\n\t{\n\t\tb>>=__builtin_ctz(b);\n\t\tif(a>b) { tmp=a,a=b,b=tmp; }\n\t\tb-=a;\n\t} while(b);\n\treturn a<<t;\n}\n\ninline int f(int x,int c,int n)\n{\n    return (1ll*x*x+c)%n;\n}\n\ninline int big_rand(int x)\n{\n    return 1ll*rand()*rand()%x;\n}\n\nvector<int> fzyz;\n\ngp_hash_table<int,int> times;\n\ninline void pr(int x)\n{\n\tif(x==1) return;\n\tif(mr(x))\n\t{\n        if(times[x]) ++times[x];\n        else\n        {\n            fzyz.push_back(x);\n            times[x]=1;\n        }\n\t\treturn;\n\t}\n\tint gcd,c=big_rand(x),t1=big_rand(x),t2=f(t1,c,x),d=(t1>t2?t1-t2:t2-t1);\n\tgcd=_gcd(x,d);\n\twhile(t1!=t2 && gcd==1)\n\t{\n\t\tt1=f(t1,c,x),t2=f(t2,c,x),t2=f(t2,c,x),d=(t1>t2?t1-t2:t2-t1),gcd=_gcd(x,d);\n\t}\n\tpr(gcd),pr(x/gcd);\n}\n\nvoid cf(int wz)\n{\n    int tmp=a[wz];\n    fzyz.clear();\n    pr(tmp);\n    int len=fzyz.size();\n    for(int i=0 ; i<len; ++i)\n    {\n        int tmp2=fzyz[i];\n        ys[wz].push_back(make_pair(tmp2,times[tmp2]));\n        if(!zyzwz[tmp2])\n        {\n            zyzwz[tmp2]=++tot;\n            Count[tot]=1;\n        }\n        times[tmp2]=0;\n    }\n}\n\nint block;\n\nstruct Query\n{\n    int l,r,lbl,id;\n} q[100010];\nbool cmp(Query x,Query y) { return x.lbl==y.lbl?(x.lbl&1?x.r<y.r:x.r>y.r):x.l<y.l; }\n\nint now=1;\n\ninline void add(int wz)\n{\n    int len=ys[wz].size(),yz;\n    for(int i=0; i<len; ++i)\n    {\n        yz=zyzwz[ys[wz][i].first],now=1ll*now*inv[Count[yz]]%mod,Count[yz]+=ys[wz][i].second,now=1ll*now*Count[yz]%mod;\n    }\n}\n\ninline void del(int wz)\n{\n    int len=ys[wz].size(),yz;\n    for(int i=0; i<len; ++i)\n    {\n        yz=zyzwz[ys[wz][i].first],now=1ll*now*inv[Count[yz]]%mod,Count[yz]-=ys[wz][i].second,now=1ll*now*Count[yz]%mod;\n    }\n}\n\nint ans[100010];\n\nint main()\n{\n    srand((unsigned)time(NULL));\n    inv[1]=1;\n    for(int i=2; i<=4e6; ++i) inv[i]=1ll*(mod-mod/i)*inv[mod%i]%mod;\n    n=read(),m=read();\n    block=(n<500?n:500);\n    for(int i=1; i<=n; ++i)\n    {\n        a[i]=read();\n        cf(i);\n    }\n    for(int i=1; i<=m; ++i)\n    {\n        q[i].l=read(),q[i].r=read();\n        q[i].id=i;\n        q[i].lbl=q[i].l/block;\n    }\n    sort(q+1,q+m+1,cmp);\n    register int curl=1,curr=0;\n    for(int i=1; i<=m; ++i)\n    {\n        while(curr<q[i].r) add(++curr);\n        while(curl>q[i].l) add(--curl);\n        while(curr>q[i].r) del(curr--);\n        while(curl<q[i].l) del(curl++);\n        ans[q[i].id]=now;\n    }\n    for(int i=1; i<=m; ++i) write(ans[i]),putchar('\\n');\n    flush();\n    return 0;\n}\n```",
        "postTime": 1634174875,
        "uid": 353688,
        "name": "\u738b\u7199\u6587",
        "ccfLevel": 0,
        "title": "[Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89 \u9898\u89e3"
    },
    {
        "content": ">   \u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c\n>   \u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3002\n>   \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\uff0c\n>   \u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4f17\u4eba\uff0c\n>   \u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\uff0c\n>   \u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\u3001\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\u3002\n>   \u6211\u56de\u6765\u4e86\uff0c\n>   \u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\n>   \u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c\n>   **\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89**\uff0c\n>   \u76fc\u541b\u52ff\u5fd8\u3002\n>   \u2014\u2014\u2014\u2014\u4e16\u754c\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\n\n_--\u300a \u672b\u65e5\u65f6\u5728\u505a\u4ec0\u4e48 ?\u6709\u6ca1\u6709\u7a7a ?\u53ef\u4ee5\u6765\u62ef\u6551\u5417 ?\u300b_\n\n\u6211\u6c38\u8fdc\u559c\u6b22\u73c2\u6735\u8389~\n\n## \u89e3\u6790\n\n\u7531\u4e8e\u7ea6\u6570\u4e2a\u6570\u51fd\u6570\u4e0d\u6ee1\u8db3\u79ef\u6027\uff0c\u60f3\u8981\u7ef4\u62a4\u533a\u95f4\u79ef\u7684\u7ea6\u6570\u4e2a\u6570\u5341\u5206\u56f0\u96be\n\n\u770b\u5230\u9898\u76ee\u4e0d\u8981\u6c42\u5728\u7ebf\uff0c\u53ef\u4ee5\u60f3\u5230\u79bb\u7ebf\u7528\u83ab\u961f\n\n\u800c\u5bf9\u4e8e\u7ef4\u62a4\u7b54\u6848\uff0c\u6709\u4e24\u79cd\u65b9\u6848\uff1a\n\n1.  \u7ef4\u62a4\u6bcf\u4e2a\u8d28\u6570\u7684\u4e2a\u6570\u524d\u7f00\u548c\uff0c\u5bf9\u6bcf\u6b21\u8be2\u95ee\u626b\u63cf\u6240\u6709\u4e0d\u540c\u7684\u8d28\u6570\u6876\u7edf\u8ba1\n2.  \u5728\u83ab\u961f\u6307\u9488\u79fb\u52a8\u65f6\u6839\u636e\u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\u7684\u8d28\u56e0\u5b50\u7ef4\u62a4\u7b54\u6848\uff08\u9700\u8981\u5206\u522b\u8bb0\u5f55\u4e0d\u540c\u7684\u8d28\u6570\u7684\u4e2a\u6570\u8f85\u52a9\u7ef4\u62a4\u7b54\u6848\uff09\n\n\u8fd9\u91cc\u5148\u8bb2\u4e0b\u5982\u4f55\u5206\u89e3\u8d28\u56e0\u6570\uff0c\n\n\u82e5\u66b4\u529b\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u8f83\u4f18\u79c0\u7684\u505a\u6cd5\u662f\u7b5b\u51fa $\\sqrt {10^9}$ \u5185\u7684\u8d28\u6570\u5e76\u8bd5\u9664\uff0c\u603b\u7684\u5206\u89e3\u590d\u6742\u5ea6\u662f\u5927\u7ea6 $O(n\\pi(n))$ \u7684\uff0c\u5176\u4e2d $\\pi(n)$ \u662f\u8d28\u6570\u4e2a\u6570\u51fd\u6570\u3002\u800c $\\sqrt {10^9}$ \u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570\u7ea6\u4e3a $3000$ \u4e2a\uff0c\u4ecd\u4f1a\u88ab\u672c\u9898\u5361\u6389\uff08\u4e0d\u8fc7\u52a0\u4e0a return \u7684\u4f18\u5316\u53ef\u4ee5\u8ba9\u8fd9\u79cd\u66b4\u529b\u5206\u89e3\u65b9\u6cd5\u5728\u968f\u673a\u6570\u636e\u8868\u73b0\u826f\u597d\uff1b\u4f46\u53ea\u8981\u6784\u9020\u4e00\u7ec4\u6bcf\u4e2a\u5143\u7d20\u4ec5\u6709\u4e24\u4e2a\u8d28\u56e0\u5b50\uff0c\u4e14\u4e24\u4e2a\u8d28\u56e0\u5b50\u90fd\u662f $\\sqrt {10^9}$ \u7ea7\u522b\u7684\u5e8f\u5217\u5c31\u53ef\u4ee5\u5361\u6389\u4e86\uff09\n\n\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u7528 Pollard-Rho \u7b97\u6cd5\u5206\u89e3\uff0c\u5206\u89e3\u603b\u590d\u6742\u5ea6\u671f\u671b $O(n^{\\frac 5 4})$\n\n\u63a5\u7740\u518d\u56de\u5230\u4e0a\u8ff0\u7684\u4e24\u79cd\u65b9\u6848\uff0c\n\n\u82e5\u8bbe\u5e8f\u5217\u6240\u6709\u6570\u5206\u89e3\u540e\u4e0d\u540c\u7684\u8d28\u56e0\u6570\u4e2a\u6570 $p$\uff0c\u5219\u7b2c\u4e00\u79cd\u65b9\u6848\u7684\u590d\u6742\u5ea6\u662f $O((n+m)\\sqrt n+pm)$ \u7684\u3002\u800c $p$ \u6700\u574f\u53ef\u80fd\u8fbe\u5230 $10^5$ \u7ea7\u522b\uff08\u751a\u81f3\u66f4\u9ad8\uff09\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u6848\u663e\u7136\u662f\u4e0d\u884c\u7684\uff1b\n\n\u82e5\u8bbe\u6bcf\u4e2a\u5143\u7d20\u81f3\u591a\u5206\u89e3\u51fa\u7684**\u4e0d\u540c**\u8d28\u56e0\u5b50\u4e2a\u6570\u4e3a $c$\uff0c\u5219\u7b2c\u4e8c\u79cd\u65b9\u6848\u7684\u590d\u6742\u5ea6\u662f $O(c(n+m)\\sqrt n)$ \u7684\u3002\u5bf9\u4e8e\u672c\u9898\u6570\u636e\u8303\u56f4\uff08$a_i\\leq 10^9$\uff09\uff0c\u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\u81f3\u591a\u6709\u4e0d\u5927\u4e8e $10$ \u4e2a\u4e0d\u540c\u7684\u8d28\u56e0\u5b50\uff08\u5176\u5b9e $c$ \u4e5f\u53ef\u4ee5\u770b\u505a $\\log n$...\uff09\u3002\u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u53ef\u884c\uff0c\u7136\u800c $10$ \u7684\u5927\u5e38\u6570~~\u52a0\u6bd2\u7624\u6570\u636e~~\u4f1a\u76f4\u63a5\u5361\u6389\u8fd9\u79cd\u7b97\u6cd5\uff08\u5982\u679c\u4f60\u7684 Pollard-Rho \u8fd8\u4e0d\u592a\u884c\uff0c\u751a\u81f3\u53ef\u80fd\u5728\u8dd1\u83ab\u961f\u524d\u5c31\u6302\u4e86\uff09\n\n\u4f46\u6211\u4eec\u53d1\u73b0 $p$ \u548c $c$ \u8fd9\u4e24\u4e2a\u53d8\u91cf\u662f**\u4e92\u76f8\u5236\u7ea6**\u7684\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u82e5\u6211\u4eec**\u5206\u5f00\u7ef4\u62a4**\u4e24\u90e8\u5206\u7684\u7b54\u6848\uff0c\u9884\u5148\u7b5b\u6389\u4e00\u5b9a\u6570\u91cf\uff08$p$\uff09\u7684\u8d28\u6570\uff0c\u5219 $c$ \u4e5f\u4f1a\u76f8\u5e94\u5730\u51cf\u5c0f\uff1b\u5e76\u4e14\u4ed6\u4eec\u95f4\u7684\u5173\u7cfb\u662f\u6210\u53cd\u6bd4\u7684\uff0c\u8fd9\u53ef\u4ee5\u8ba9\u6211\u4eec\u60f3\u5230 \"\u6839\u53f7\u5206\u6cbb\"\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u7b5b\u6389 $\\sqrt {10^9}$ \u4ee5\u5185\u7684\u8d28\u6570\uff0c\u5219 $c$ \u81f3\u591a\u4e3a $1$\uff0c\u4f46 $p$ \u7ea6\u4e3a $3\\cdot 10^3$\uff0c\u4f1a T \u6389\uff1b\u63a5\u7740\u60f3\u5230\u7b5b\u6389 $\\sqrt[3]{10^9}$ \u4ee5\u5185\u7684\u8d28\u6570\uff0c\u5219 $c$ \u81f3\u591a\u4e3a $2$\uff0c$p$ \u4e3a $168$\uff0c\u603b\u7684\u590d\u6742\u5ea6\u5c31\u662f $O(2(n+m)\\sqrt n+168m)$\uff0c\u80fd\u591f\u901a\u8fc7\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\n\n\u540c\u65f6\u56e0\u4e3a\u6700\u540e $c$ \u81f3\u591a\u4e3a $2$\uff0cPollard-Rho \u5206\u89e3\u8d28\u56e0\u6570\u7684\u901f\u5ea6\u4e5f\u4f1a\u53d8\u5feb\n\n## CODE\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <random>\nusing std::sort;\nusing std::min;\n\n/*------------------------------Base------------------------------*/\n\nconst int M =19260817;\nconst int MAXN =1e5+50;\n\nstatic std::mt19937 engine('O'+'D'+'T');\n\ninline int mul(int a, int b, int mo){ return 1ll*a*b%mo; }\n\ninline int Abs(int x){ return (x < 0) ? -x : x; }\n\nint Pow(int x, int k, int mo){\n\tint ret =1;\n\tfor(; k; x =mul(x, x, mo), k >>=1) if(k&1) ret =mul(ret, x, mo);\n\treturn ret;\n}\n\nint gcd(int a, int b){\n\twhile(b) b ^=a ^=b ^=a %=b;\n\treturn a;\n}\n\n/*------------------------------\u7b5b------------------------------*/\n\nconst int Sp =1000;/*\u7b5b\u8d28\u6570\u7684\u8303\u56f4*/\n\nint prim[200], totp;\nbool np[Sp+10];\n\ninline void preprim(){\n\tfor(int i =2; i <= Sp; ++i){\n\t\tif(!np[i]) prim[totp++] =i;\n\t\tfor(int j =0; j < totp && i*prim[j] <= Sp; ++j){\n\t\t\tnp[i*prim[j]] =1;\n\t\t\tif(i%prim[j] == 0)\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\n/*------------------------------\u9006\u5143------------------------------*/\n\nint inv[MAXN<<1];\n\ninline void preinv(int n){\n\tinv[1] =1;\n\tfor(int i =2; i <= (n<<1)+10; ++i)\n\t\tinv[i] =1ll*(M-M/i)*inv[M%i]%M;\n}\n\n/*------------------------------Miller Robin------------------------------*/\n\nbool mr(int p){\n\tif(p < 2) return 0;\n\tif(p == 2) return 1;\n\tif(p == 3) return 1;\n\tstd::uniform_int_distribution<int> Rand(2, p-2);\n\tint d =p-1, r =0;\n\twhile(!(d&1)) ++r, d >>=1;\n\tfor(int k =0; k < 10; ++k){\n\t\t/*[2, p-2]*/\n\t\tint a =Rand(engine);\n\t\tint x =Pow(a, d, p);\n\t\tif(x == 1 || x == p-1) continue;\n\t\tfor(int i =0; i < r-1; ++i){\n\t\t\tx =mul(x, x, p);\n\t\t\tif(x == p-1) break;\n\t\t}\n\t\tif(x != p-1) return 0;\n\t}\n\treturn 1;\n}\n\n/*------------------------------Pollard Rho------------------------------*/\n\ninline int getnext(int x, int c, int n){ return (mul(x, x, n)-c)%n; }\n\ninline int pr(int n){\n\t/*\u521d\u59cb\u8df3\u4e24\u6b65, \u6ca1\u6cd5\u5206\u89e3 4*/\n\tif(n == 4) return 2;\n\tstd::uniform_int_distribution<int> Rand(3, n-1);\n\tint x =Rand(engine), y =x;\n\tint c =Rand(engine);\n\tint d =1;\n\tx =getnext(x, c, n);\n\ty =getnext(y, c, n), y =getnext(y, c, n);\n\tfor(int lim =1; x != y; lim =min(128, lim<<1)){\n\t\tint cnt =1;\n\t\tfor(int i =0; i < lim; ++i){\n\t\t\tint tmp =mul(cnt, Abs(x-y), n);\n\t\t\tif(!tmp)\n\t\t\t\tbreak;\n\t\t\tcnt =tmp;\n\t\t\tx =getnext(x, c, n);\n\t\t\ty =getnext(y, c, n), y =getnext(y, c, n);\n\t\t}\n\t\td =gcd(cnt, n);\n\t\tif(d != 1)\n\t\t\treturn d;\n\t}\n\treturn n;\n}\n\ninline int getfact(int n){\n\tif(n == 1)\n\t\treturn 1;\n\tif(mr(n))\n\t\treturn n;\n\telse{\n\t\tint d =n;\n\t\twhile(d == n)\n\t\t\td =pr(n);\n\t\treturn d;\n\t}\n}\n\n/*------------------------------\u79bb\u6563\u5316------------------------------*/\n\nstruct qaq{\n\tint val, i, j;/*\u5e8f\u5217\u7b2c i \u9879\u7684\u7b2c j \u4e2a\u5927\u8d28\u6570*/\n\tbool operator < (const qaq &b) const { return val < b.val; }\n}qwq[MAXN<<1];\n\nint totw;\n\n/*------------------------------\u83ab\u961f------------------------------*/\n\nstruct query{\n\tint l, r, ord, cl/*chunk*/;\n\tbool operator < (const query &b) const {\n\t\tif(cl != b.cl) return cl < b.cl;\n\t\telse return ((cl&1) != 0) ? r > b.r : r < b.r;\n\t}\n}q[MAXN];\nint ai[MAXN];\nint sump[MAXN][200]/*\u6bcf\u4e2a Sp \u4ee5\u5185\u7684\u8d28\u6570\u7684\u524d\u7f00\u548c*/, prim2[MAXN][2]/*\u50a8\u5b58 ai \u7684\u5927\u8d28\u6570 (\u79bb\u6563\u5316)*/;\nint cntp[MAXN<<1]/*\u8bb0\u5f55\u5927\u8d28\u6570\u51fa\u73b0\u6b21\u6570*/, ansd =1/*\u5927\u8d28\u6570\u7684\u7ea6\u6570\u7b54\u6848*/;\nbool vis[MAXN];\n\ninline void mov(int pos){\n\tif(vis[pos] ^=1){\n\t\t++cntp[prim2[pos][0]];\n\t\tint p =prim2[pos][0], cnt =cntp[prim2[pos][0]];\n\t\tif(p != 1)\n\t\t\tansd =mul(mul(ansd, inv[(cnt-1)+1], M), cnt+1, M);\n\t\t++cntp[prim2[pos][1]];\n\t\tp =prim2[pos][1], cnt =cntp[prim2[pos][1]];\n\t\tif(p != 1)\n\t\t\tansd =mul(mul(ansd, inv[(cnt-1)+1], M), cnt+1, M);\n\t}\n\telse{\n\t\t--cntp[prim2[pos][0]];\n\t\tint p =prim2[pos][0], cnt =cntp[prim2[pos][0]];\n\t\tif(p != 1)\n\t\t\tansd =mul(mul(ansd, inv[(cnt+1)+1], M), cnt+1, M);\n\t\t--cntp[prim2[pos][1]];\n\t\tp =prim2[pos][1], cnt =cntp[prim2[pos][1]];\n\t\tif(p != 1)\n\t\t\tansd =mul(mul(ansd, inv[(cnt+1)+1], M), cnt+1, M);\n\t}\n}\n\ninline int calc(int l, int r){\n\tint ret =ansd;\n\tfor(int i =0; i < totp; ++i){\n\t\tint sumr =sump[r][i], suml =0;\n\t\tif(l != 0)/*\u4e3a\u4e86\u5904\u7406\u4e0b\u6807\u7684\u9505 (*/\n\t\t\tsuml =sump[l-1][i];\n\t\tret =mul(ret, sumr-suml+1, M);\n\t}\n\treturn ret;\n}\n\n/*------------------------------Main------------------------------*/\n\ninline int read(){\n\tint x =0; char c =getchar();\n\twhile(c < '0' || c > '9') c =getchar();\n\twhile(c >= '0' && c <= '9') x = (x<<3) + (x<<1) + (48^c), c =getchar();\n\treturn x;\n}\n\nint ans[MAXN];\n\nint main(){\n\tint n =read(), m =read();\n\tfor(int i =0; i < n; ++i)\n\t\tai[i] =read();\n\tfor(int i =0; i < m; ++i)\n\t\tq[i].l =read()-1, q[i].r =read()-1, q[i].ord =i;\n\t\n\t/*\u9884\u5904\u7406\u90e8\u5206*/\n\tpreprim();\n\tpreinv(n);\n\tfor(int i =0; i < n; ++i){\n\t\tfor(int j =0; j < totp; ++j){\n\t\t\twhile(ai[i]%prim[j] == 0)\n\t\t\t\tai[i] /=prim[j], ++sump[i][j];\n\t\t\tsump[i+1][j] =sump[i][j];\n\t\t}\n\t\tint fact =getfact(ai[i]);\n\t\tprim2[i][0] =fact, prim2[i][1] =ai[i]/fact;\n\t\tqwq[totw].i =i, qwq[totw].j =0;\n\t\tqwq[totw++].val =fact;\n\t\tqwq[totw].i =i, qwq[totw].j =1;\n\t\tqwq[totw++].val =ai[i]/fact;\n\t}\n\tsort(qwq, qwq+totw);\n\tfor(int i =0, rank =1, pre =1; i < totw; ++i){\n\t\tqaq nw =qwq[i];\n\t\tif(nw.val != pre){\n\t\t\t++rank;\n\t\t\tpre =nw.val;\n\t\t}\n\t\tif(nw.val != 1)/*\u5f85\u4f1a\u83ab\u961f\u7edf\u8ba1\u65f6\u4e0d\u4f1a\u7edf\u8ba1 1*/\n\t\t\tprim2[nw.i][nw.j] =rank;\n\t}\n\t\n\t/*\u83ab\u961f\u90e8\u5206*/\n\tint S =sqrt(n);\n\tfor(int i =0; i < m; ++i)\n\t\tq[i].cl =q[i].l/S;\n\tsort(q, q+m);\n\tint l =0, r =0;\n\tfor(int i =0; i < m; ++i){\n\t\tquery nq =q[i];\n\t\twhile(l < nq.l) mov(l++);\n\t\twhile(l > nq.l) mov(--l);\n\t\twhile(r < nq.r+1) mov(r++);\n\t\twhile(r > nq.r+1) mov(--r);\n\t\tans[nq.ord] =calc(nq.l, nq.r);\n\t}\n\tfor(int i =0; i < m; ++i)\n\t\tprintf(\"%d\\n\", ans[i]);\n}\n```\n",
        "postTime": 1595587788,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "### ~~\u4f17\u6240\u5468\u77e5lxl\u662f\u4e2a\u6bd2\u7624\uff0cYnoi\u9053\u9053\u90fd\u662f\u795e\u4ed9\u9898~~\uff0c\u9898\u9762\u597d\u8bc4\n\n### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10121907.html)\n\n#### memset0\u5927\u4f6c\u7684\u89e3\u6cd5\u949b\u6bd2\u7624\u4e86~\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5071)\n\n#### \u4e00\u770b\u8fd9\u9898\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\u5c31\u77e5\u9053\u8fd9\u662f\u83ab\u961f\u9898\uff08\u6211\u4e5f\u53ea\u4f1a\u83ab\u961f\uff09\n\n#### \u6211\u535a\u5ba2\u91cc\u5bf9[\u83ab\u961f](https://www.cnblogs.com/yzhang-rp-inf/p/9991671.html)\u7684\u7b80\u5355\u4ecb\u7ecd\n\n#### \u4e00\u4e2a\u6570N\u53ef\u4ee5\u5206\u89e3\u6210$p_1^{c_1}p_2^{c_2}\u2026p_m^{c_m}$\n\n#### \u5b83\u7684\u7ea6\u6570\u4e2a\u6570\u5c31\u662f$(c_1+1)(c_2+1)\u2026(c_m+1)$\n\n#### \u6211\u4eec\u8003\u8651\u5148\u628a\u6bcf\u4e00\u4e2a\u6570\u5206\u89e3\u8d28\u56e0\u6570\n\n#### \u7528\u8bd5\u9664\u6cd5\u4f1a\u4f7f\u4f60tle\u5230\u6ca1\u6551\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7528[pollard's Rho](https://www.cnblogs.com/yzhang-rp-inf/p/10029165.html)\n\n#### \uff08\u7528\u8d28\u56e0\u6570\u5206\u89e3\u662f\u56e0\u4e3a$10^9<2*3*5*7*11*13*17*19*23*29$\uff0c\u8d28\u56e0\u6570\u6570\u91cf\u8f83\u5c11\uff09\n\n#### \u5206\u89e3\u8d28\u56e0\u6570\u540e\u79bb\u6563\u5316\uff0c\u5426\u5219mle\u98de\u5929\n\n#### \u8fdb\u884c\u83ab\u961f\uff0c\u6b63\u5e38\u8ba1\u7b97\u8d21\u732e\uff0c\u4f60\u4ea4\u4e00\u53d1\uff0c\u4f1a\u53d1\u73b0\u53ea\u670982\uff0873\uff09\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u9700\u8981\u626b\u63cf\u6bcf\u4e2a\u6570\u7684\u6bcf\u4e2a\u8d28\u56e0\u5b50\n\n#### \u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u4e00\u767e\uff08\u4e94\u767e\uff09\u4ee5\u4e0b\u7684\u8d28\u6570\u5f88\u591a\uff0c\u800c\u4e14\u4ed6\u4eec\u4f5c\u4e3a\u8d28\u56e0\u5b50\u7684\u6b21\u6570\u4e5f\u5f88\u591a\uff0c\u6240\u8017\u65f6\u95f4\u5de8\u5927\n\n#### \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5c06\u4e00\u767e\uff08\u4e94\u767e\uff09\u4ee5\u4e0b\u7684\u8d28\u56e0\u6570\u5efa\u7acb\u524d\u7f00\u548c\n\n#### \u8fd9\u6837\u5c31\u73c2\u4ee5\u8fc7\u6b64\u9898\u4e86\uff08\u8bdd\u8bf4\u6211pollard's Rho\u5199\u5f97\u597d\u4e11\u554a\uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define N 100005\n#define mod 19260817\n#define ll long long\n#define getchar nc\nusing namespace std;\ninline char nc(){\n    static char buf[100000],*p1=buf,*p2=buf; \n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++; \n}\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(register int x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\ninline int Max(register int x,register int y)\n{\n    return x>y?x:y;\n}\nll Test[10]={5,61,24251,19260817};\ninline int mul(register int a,register int b,register int m)\n{\n    int d=((long double)a/m*b+1e-8);\n    int r=a*b-d*m;\n    return r<0?r+m:r;\n}\ninline int Pow(register int a,register int b,register int m)\n{\n    ll r=1;\n    for(;b;b>>=1,a=mul(a,a,m))\n        if(b&1)\n            r=mul(r,a,m);\n    return r;\n}\ninline bool Query(register int P)\n{\n    if(P==1)\n        return 0;\n    if(P==2||P==3||P==5||P==7) \n        return 1;\n    if(!(P&1)||(P%3==0)||(P%5==0)||(P%7==0)) \n        return 0;\n    int t=P-1;\n    int k=0;\n    while(!(t&1))\n        ++k,t>>=1;\n    for(register int i=0;i<3;++i)\n    {\n        if(P==Test[i])\n            return 1;\n        int a=Pow(Test[i],t,P),nxt=a;\n        for(register int j=1;j<=k;++j)\n        {\n            nxt=mul(nxt,nxt,P);\n            if(nxt==1&&a!=1&&a!=P-1)\n                return 0;\n            a=nxt;\n        }\n        if(a!=1)\n            return 0;\n    }\n    return 1;\n}\ninline int gcd(register int a,register int b)\n{\n    if(!a)\n        return b;\n    if(!b)\n        return a;\n    int t=__builtin_ctzll(a|b);\n    a>>=__builtin_ctzll(a);\n    do{\n        b>>=__builtin_ctzll(b);\n        if(a>b)\n            a^=b^=a^=b;\n        b-=a;\n    }while(b!=0);\n    return a<<t;\n}\ninline int g(register int x,register int n) \n{\n    int t=mul(x,x,n)+1;\n    return t<n?t:t-n;\n}\n#define M (1<<7)-1\ninline int pollardrho(register int n)\n{\n    ll x=(rand()%(n-1))+1,y=x,t=1,q=1;\n    for(register int k=2;;k<<=1,y=x,q=1)\n    {\n        for(register int i=1;i<=k;++i)\n        {\n            x=g(x,n);\n            q=mul(q,abs(x-y),n);\n            if(!(i&M))\n            {\n                t=gcd(q,n);\n                if(t>1)\n                    break;\n            }\n        }\n        if(t>1||(t=gcd(q,n))>1)\n            break;\n    } \n    if (t==n)\n    {\n        t=1;\n        while(t==1)\n            t=gcd(abs((x=g(x, n))-y),n);\n    }\n    return t;\n}\nint f[N][105],np[N];\nvector<int> v;\ninline void find(register int x,register int id)\n{\n    if(x==1)\n        return;\n    if(Query(x))\n    {\n        f[id][++np[id]]=x;\n        v.push_back(x);\n        return;\n    }\n    int p=x;\n    while(p==x)\n        p=pollardrho(x);\n    find(p,id);\n    find(x/p,id);\n}\nstruct query{\n    int l,r,id,bl;\n}q[N];\nint n,m,blocksize;\ninline bool cmp(register query a,register query b)\n{\n    return a.bl!=b.bl?a.l<b.l:((a.bl&1)?a.r<b.r:a.r>b.r);\n}\nint ans[N],qaq[N<<1],inv[N<<1];\nll num;\ninline void add(register int pos)\n{\n    for(register int i=1;i<=np[pos];++i)\n        num=(ll)num*inv[qaq[f[pos][i]]]%mod*(qaq[f[pos][i]]+1)%mod,++qaq[f[pos][i]];\n}\ninline void del(register int pos)\n{\n    for(register int i=1;i<=np[pos];++i)\n        num=(ll)num*inv[qaq[f[pos][i]]]%mod*(qaq[f[pos][i]]-1)%mod,--qaq[f[pos][i]];\n}\nint ispri[600],pri[600],cnt=0,sum[N][100];\ninline void init()\n{\n    for(register int i=2;i<=500;++i)\n        ispri[i]=1;\n    for(register int i=2;i<=500;++i)\n        if(ispri[i])\n        {\n            pri[ispri[i]=++cnt]=i;\n            for(register int j=i<<1;j<=500;j+=i)\n                ispri[j]=0;\n        }\n}\nint main()\n{\n    srand(19260817);\n    init();\n    n=read(),m=read();\n    blocksize=sqrt(n);\t\n    inv[1]=1;\n    for(register int i=2;i<=N;++i)\n        inv[i]=(ll)(mod-mod/i)*inv[mod%i]%mod;\n    for(register int i=1;i<=n;++i)\n    {\n        int x=read();\n        memcpy(sum[i],sum[i-1],sizeof(sum[i-1]));\n        for(register int j=1;j<=cnt&&pri[j]*pri[j]<=x;++j)\n            while(!(x%pri[j]))\n            {\n                ++sum[i][j];\n                x/=pri[j];\n            }\n        if(x>1)\n        {\n            if(x<=pri[cnt])\n            {\n                ++sum[i][ispri[x]];\n                continue;\n            }\n            find(x,i);\n        }\n    }\n    sort(v.begin(),v.end());\n    v.erase(unique(v.begin(),v.end()),v.end());\n    for(register int i=1;i<=n;++i)\n        for(register int j=1;j<=np[i];++j)\n            f[i][j]=lower_bound(v.begin(),v.end(),f[i][j])-v.begin();\n    for(register int i=1;i<=m;++i)\n        q[i].l=read(),q[i].r=read(),q[i].id=i,q[i].bl=(q[i].l-1)/blocksize+1;\n    sort(q+1,q+1+m,cmp);\n    for(register int i=0;i<n<<1;++i)\n        qaq[i]=1;\n    int l=1,r=0;\n    num=1;\n    for(register int i=1;i<=m;++i)\n    {\n        while(r<q[i].r)\n            add(++r);\n        while(l>q[i].l)\n            add(--l);\n        while(r>q[i].r)\n            del(r--);\n        while(l<q[i].l)\n            del(l++);\n        ans[q[i].id]=num;\n        for(register int j=1;j<=cnt;++j)\n            ans[q[i].id]=(ll)ans[q[i].id]*(sum[r][j]-sum[l-1][j]+1)%mod;\n    }\n    for(register int i=1;i<=m;++i)\n        write(ans[i]),puts(\"\");\n    return 0;\n} \n```",
        "postTime": 1544796707,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "> \u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3002\u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\uff0c\u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4f17\u4eba\uff0c \u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\uff0c\u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\u3001\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\u3002\u6211\u56de\u6765\u4e86\uff0c\u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\uff0c\u76fc\u541b\u52ff\u5fd8\u3002\u2014\u2014\u2014\u2014\u4e16\u754c\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69 \u73c2\u6735\u8389\n\n\u6211\u6c38\u8fdc\u559c\u6b22\u73c2\u6735\u8389\u3002\n\n------------\n\n[\u4e0d\u77e5\u9053\u66f4\u597d\u8fd8\u662f\u66f4\u574f\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Illusory-dimes/p/15698938.html)\n\n## Description\n\n\u7ed9\u5b9a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u5217 $a$ \uff0c\u548c $m$ \u4e2a\u8be2\u95ee $l, r$ \u3002\n\n\u6c42\u6bcf\u4e2a\u533a\u95f4\u5185\u6240\u6709\u6570\u76f8\u4e58\u7684\u56e0\u6570\u4e2a\u6570\u3002\n\n$1\\leq n,\\ m\\leq 10 ^ 5$\uff0c $1\\leq a\\leq 10 ^ 9$\n\n## Analysis\n\n\u5148\u60f3\u60f3\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u6570 $x$ \uff0c\u7ea6\u6570\u4e2a\u6570\u662f\u591a\u5c11\u4e2a\u3002\n\n\u9996\u5148\u5148\u5206\u89e3\uff0c\u5927\u6982\u5c31\u5148\u8868\u793a\u6210\uff1a\n\n$$\nx = \\prod p_i ^ {a_i}\n$$\n\n\u90a3\u4e48\u7ea6\u6570\u4e2a\u6570\u5c31\u662f\u6bcf\u79cd\u8d28\u6570\u7684\u9009\u62e9\u6570\u91cf\u662f $0 - a_i$ \uff0c\u6240\u4ee5\u5f0f\u5b50\u5199\u51fa\u6765\u5c31\u662f\uff1a\n\n$$\nnum = \\prod (a_i + 1)\n$$\n\n\u4e8e\u662f\u4e4e\u6709\u4e2a\u5f88\u663e\u7136\u7684\u60f3\u6cd5\uff0c\u4e0a\u83ab\u961f\u7ef4\u62a4\u533a\u95f4\u5185\u6bcf\u4e2a\u8d28\u6570\u7684\u6570\u91cf\u3002\n\n\u4e00\u770b\u503c\u57df\uff0c\u4e00\u5171\u4f1a\u6709 50847534 \u4e2a\u8d28\u6570\uff0c\u8fd9\u65f6\u95f4\u4e0d\u76f4\u63a5\u7206\u70b8\u3002\u3002\n\n## Solution\n\n\u8bdd\u662f\u8fd9\u4e48\u8bf4\uff0c\u4f46\u662f\u80af\u5b9a\u603b\u4f53\u7684\u89e3\u9898\u65b9\u5f0f\u5927\u5dee\u4e0d\u5dee\u4e86\u3002\n\n\u8003\u8651\u600e\u4e48\u53bb\u4f18\u5316\uff0c\u53ef\u4ee5\u5148\u60f3\u5230\u6839\u53f7\u5206\u6cbb\uff0c\u5bf9\u4e8e\u5c0f\u4e8e $\\sqrt{a}$ \u7684\u8d28\u56e0\u5b50\u9884\u5904\u7406\uff0c\u5927\u4e8e\u7684\u518d\u5728\u83ab\u961f\u91cc\u9762\u7ef4\u62a4\u3002\n\n\u8fd9\u4e48\u770b\u7684\u8bdd\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u503c\u57df $a$ \u4e3a $10 ^ 9$ \u7684\u6570\uff0c $\\sqrt{a}$ \u5185\u7684\u8d28\u6570\u6709 3400 \u5de6\u53f3\u4e2a\u3002\u5373\u4fbf\u4e0e\u5904\u7406\u5b8c\u6240\u6709\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u4f1a\u5269\u4e0b\u4e0d\u8d85\u8fc7 1 \u4e2a\u8d28\u56e0\u5b50\uff0c\u4f46\u663e\u7136\u4f53\u91cf\u4e0a\u4e0d\u80fd\u652f\u6301\u6211\u4eec\u7b5b\u8fd9\u4e48\u591a\u8d28\u6570\u3002\n\n\u4f46\u8fd8\u662f\u7ee7\u7eed\u501f\u52a9\u6839\u53f7\u5206\u6cbb\u7684\u601d\u8def\uff0c\u5e73\u8861\u4e0b\u8d28\u6570\u6570\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a $\\sqrt{a}$ \u6362\u6210 $\\sqrt[3]{a}$ \u3002\u8fd9\u6837\u7684\u8bdd\u8981\u9884\u5904\u7406\u7684\u8d28\u6570\u53d8\u6210\u4e86 168 \u4e2a\uff0c\u6bd4\u8f83\u80fd\u63a5\u53d7\uff0c\u540c\u65f6\u9884\u5904\u7406\u540e\u7684\u6570\u4e5f\u9876\u591a\u4f1a\u6709 2 \u4e2a\u8d28\u56e0\u5b50\u3002\n\n\u73b0\u5728\u5c31\u662f\u8981\u5feb\u901f\u628a\u9884\u5904\u7406\u540e\u7684\u6570\u5206\u89e3\u8d28\u56e0\u5b50\uff0c\u666e\u901a\u5206\u89e3\u4e0d\u592a\u884c\uff0c\u8003\u8651 PR \u7b97\u6cd5\u3002\u56e0\u4e3a\u53ea\u6709 2 \u4e2a\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5\u505a\u4e00\u6b21 PR \uff0c\u7136\u540e\u628a\u627e\u51fa\u6765\u7684\u8d28\u56e0\u5b50\u79bb\u6563\u5316\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\uff08PS\uff1a PR \u7b97\u6cd5\u7684\u8bdd\u4e0d\u592a\u786e\u5b9a $\\log ^ 2$ \u7684\u5199\u6cd5\u80fd\u4e0d\u80fd\u8fc7\uff0c\u8fd8\u662f\u63a8\u8350\u5199\u5355 $\\log$ \u7684\u5199\u6cd5\uff09\n\n\u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u628a\u539f\u6765\u7684 $O(\u8fc7\u4e0d\u4e86)$ \u7684\u7eaf\u83ab\u961f\u5206\u6210\u4e86\u4e00\u4e2a $O(168n)$ \u7684\u9884\u5904\u7406\u52a0\u8ba1\u7b97\u548c\u4e00\u4e2a $O(n\\sqrt{n})$ \u7684\u83ab\u961f\uff0c\u4e5f\u5c31\u80fd\u5b8c\u6210\u8fd9\u9053\u9898\u4e86\u3002\n\n## Code\n\n```cpp\n/*\n\n*/\n#include<bits/stdc++.h>\n#define ri register int\nusing namespace std;\nconst int mod = 19260817, N = 2e5 + 10;\nconst int pri[] = {2, 3, 5, 7, 11, 13, 17};\nint now;\nint n, m, boc, col[N], blo[N], lt[N], rt[N], id[N];\nint num[171][N], yz[N], tim, cnt[N], res = 1, ret, ans[N];\nint pr[171], tot, vis[1008], inv[N];\nstd::unordered_map<int, int> mp;\ninline int read() {\n\tchar ch = getchar();\n\tint s = 0, w = 1;\n\twhile (ch < '0' || ch > '9') {if (ch == '-') w = -1; ch = getchar();}\n\twhile (ch >= '0' && ch <= '9') {s = (s << 3) + (s << 1) + ch - '0'; ch = getchar();}\n\treturn s * w;\n}\ninline int mul(int a, int b, int p) {\n\treturn 1ll * a * b % p;\n}\ninline int gcd(int x, int y) {\n\tif (!x) return y;\n\tif (!y) return x;\n\tint t = __builtin_ctzll(x | y);\n\tx >>= __builtin_ctzll(x);\n\twhile (y) {\n\t\ty >>= __builtin_ctzll(y);\n\t\tif (x > y) swap(x, y);\n\t\ty -= x;\n\t}\n\treturn x << t;\n}\ninline int ksm(int a, int b, int p) {\n\tint tmp = 1;\n\twhile (b) {\n\t\tif (b & 1) tmp = mul(tmp, a, p);\n\t\ta = mul(a, a, p); b >>= 1;\n\t}\n\treturn tmp;\n}\ninline bool MR(int a, int p) {\n\tint tmp, B = p - 1, num = 0;\n\twhile ((B ^ 1) & 1) B >>= 1, ++num;\n\ttmp = ksm(a, B, p);\n\tif (!(tmp ^ 1)) return 0;\n\twhile (num--) {\n\t\tif (tmp ^ 1 && tmp ^ (p - 1)) {\n\t\t\ttmp = mul(tmp, tmp, p);\n\t\t\tif (!(tmp ^ 1)) return 1;\n\t\t}\n\t\telse tmp = mul(tmp, tmp, p);\n\t}\n\treturn (tmp ^ 1);\n}\ninline bool isprime(int p) {\n\tif (p == 2) return 1;\n\tif (p < 2 || !(p & 1)) return 0;\n\tfor (ri i = 0; i < 7; ++i) {\n\t\tif (!(pri[i] ^ p)) return 1;\n\t\tif (MR(pri[i], p)) return 0;\n\t}\n\treturn 1;\n}\ninline int F(int a, int c, int p) {\n\treturn (mul(a, a, p) + c) % p;\n}\nint t, a, b, c, d;\ninline int PR(int p) {\n\tif (!(p & 1)) return 2;\n\tif (isprime(p)) return p;\n\ta = b = 0; t = 1;\n\tc = rand() % (p + 1);\n\tfor (ri dep = 1; ; dep <<= 1) {\n\t\ta = b; t = 1;\n\t\tfor (ri i = 1; i <= dep; ++i) {\n\t\t\tb = F(b, c, p);\n\t\t\tt = mul(t, abs(a - b), p);\n\t\t\tif (!(i & 127)) {\n\t\t\t\td = gcd(t, p);\n\t\t\t\tif (d > 1) return d;\n\t\t\t}\n\t\t}\n\t\td = gcd(t, p);\n\t\tif (d > 1) return d;\n\t}\n}\ninline void mxprime(int p) {\n\tif (p <= now) return ;\n\tif (isprime(p)) {\n\t\tnow = max(now, p);\n\t\treturn ;\n\t}\n\tint q = PR(p);\n\twhile (q >= p) q = PR(p);\n\tmxprime(q); mxprime(p / q);\n}\ninline void init() {\n\tvis[1] = 1;\n\tfor (ri i = 2; i <= 1000; ++i) {\n\t\tif (!vis[i]) pr[++tot] = i;\n\t\tfor (ri j = 1; j <= tot && pr[j] * i <= 1000; ++j) {\n\t\t\tvis[i * pr[j]] = 1;\n\t\t\tif (i % pr[j] == 0) break;\n\t\t}\n\t}\n\tinv[1] = 1;\n\tfor (ri i = 2; i <= (n << 1); ++i) {\n\t\tinv[i] = mul(mod - mod / i, inv[mod % i], mod);\n\t}\n}\ninline bool cmp(int x, int y) {\n\treturn (blo[x] ^ blo[y]) ? (lt[x] < lt[y]) : (rt[x] < rt[y]);\n}\ninline void add(int x) {\n\tif (col[x]) {\n\t\t++cnt[col[x]];\n\t\tres = mul(res, mul(inv[cnt[col[x]] - 1], cnt[col[x]], mod), mod);\n\t\tif (yz[x]) {\n\t\t\t++cnt[yz[x]];\n\t\t\tres = mul(res, mul(inv[cnt[yz[x]] - 1], cnt[yz[x]], mod), mod);\n\t\t}\n\t}\n}\ninline void del(int x) {\n\tif (col[x]) {\n\t\t--cnt[col[x]];\n\t\tres = mul(res, mul(inv[cnt[col[x]] + 1], cnt[col[x]], mod), mod);\n\t\tif (yz[x]) {\n\t\t\t--cnt[yz[x]];\n\t\t\tres = mul(res, mul(inv[cnt[yz[x]] + 1], cnt[yz[x]], mod), mod);\n\t\t}\n\t}\n}\nint main() {\n\tsrand(19260817);\n\tn = read(); m = read(); boc = sqrt(n);\n\tinit();\n\tfor (ri i = 1; i <= n; ++i) {\n\t\tcol[i] = read();\n\t\tfor (ri j = 1; j <= tot; ++j) {\n\t\t\twhile (!(col[i] % pr[j])) {\n\t\t\t\tcol[i] /= pr[j]; ++num[j][i];\n\t\t\t}\n\t\t\tnum[j][i] += num[j][i - 1];\n\t\t}\n\t\tif (col[i] > 1 && !isprime(col[i])) {\n\t\t\tnow = 1; mxprime(col[i]);\n\t\t\tyz[i] = now; col[i] /= yz[i];\n\t\t}\n\t\tif (col[i] > 1) {\n\t\t\tif (yz[i]) {\n\t\t\t\tif (!mp.count(yz[i])) mp[yz[i]] = ++tim;\n\t\t\t\tyz[i] = mp[yz[i]];\n\t\t\t}\n\t\t\tif (!mp.count(col[i])) mp[col[i]] = ++tim;\n\t\t\tcol[i] = mp[col[i]];\n\t\t}\n\t\telse col[i] = 0;\n\t}\n\tfor (ri i = 1; i <= m; ++i) {\n\t\tlt[i] = read(); rt[i] = read();\n\t\tblo[i] = lt[i] / boc; id[i] = i;\n\t}\n\tsort(id + 1, id + 1 + m, cmp);\n\tfor (ri i = 1; i <= tim; ++i) cnt[i] = 1;\n\tint l = 1, r = 0;\n\tfor (ri i = 1; i <= m; ++i) {\n\t\tint ql = lt[id[i]], qr = rt[id[i]];\n\t\twhile (l > ql) add(--l);\n\t\twhile (r < qr) add(++r);\n\t\twhile (l < ql) del(l++);\n\t\twhile (r > qr) del(r--);\n\t\tret = res;\n\t\tfor (ri j = 1; j <= tot; ++j) {\n\t\t\tret = mul(ret, num[j][r] - num[j][l - 1] + 1, mod);\n\t\t}\n\t\tans[id[i]] = ret;\n\t}\n\tfor (ri i = 1; i <= m; ++i) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1639644554,
        "uid": 206024,
        "name": "Illusory_dimes",
        "ccfLevel": 7,
        "title": "P5071 [Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89 \u9898\u89e3"
    },
    {
        "content": "## [My Blog](https://yzxoi.top/archives/1732)\n\n## Description\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[P5071](https://www.luogu.com.cn/problem/P5071)\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u6709 $m$ \u6b21\u67e5\u8be2\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e00\u6bb5\u533a\u95f4\u7684\u4e58\u79ef\u7684\u7ea6\u6570\u4e2a\u6570 $\\bmod 19260817$ \u7684\u503c\u3002\n\n$1\\leq n,m \\leq 10^5,1\\leq a_i \\leq 10^9$\n\n## Solution\n\n\u4e4d\u770b\u9898\u76ee\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u79cd\u5f88\u66b4\u529b\u7684\u505a\u6cd5\uff1a\u5148\u5bf9\u6bcf\u4e2a\u6570\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u7136\u540e\u5229\u7528[\u7ea6\u6570\u548c\u5b9a\u7406](https://baike.baidu.com/item/%E7%BA%A6%E6%95%B0%E5%92%8C%E5%AE%9A%E7%90%86/3808428)\u76f4\u63a5\u83ab\u961f\u5373\u53ef\u3002\n\n\u4f46\u4e00\u70b9\u5f00\u9898\u89e3\u533a\u53d1\u73b0\u90fd\u8fc7\u4e0d\u4e86\uff0c\u8fd8\u8981\u7528pr&\u6839\u53f7\u5206\u6cbb\u3002\n\n\u4f46\u662f\u540e\u6765\u7ecf\u8fc7\u9648\u6307\u5bfc\u7684\u63d0\u9192\uff0c\u76f4\u63a5\u6572\u4e86\u4e2a\u66b4\u529b\u5c31\u8dd1\u8fc7\u53bb\u4e86\uff08\n\n\u8fd9\u91cc\u5217\u4e3e\u4e00\u4e9b\u4f18\u5316\uff1a\n\n1. \u9884\u5904\u7406\u7ebf\u6027\u6c42\u9006\u5143\u3002\n2. \u7b5b\u7d20\u6570\u4e0d\u4e00\u5b9a\u8981\u7b5b\u5230 $\\sqrt{10^9}$\uff0c\u53ef\u4ee5\u9002\u91cf\u8c03\u5927\u70b9\u3002\n3. ~~\u6709\u4fe1\u4ef0~~\n\n## Code\n\n```cpp\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define W while\n#define I inline\n#define RI register int\n#define LL long long\n#define Cn const\n#define CI Cn int&\n#define gc getchar\n#define D isdigit(c=gc())\n#define min(x,y) ((x)<(y)?(x):(y))\n#define max(x,y) ((x)>(y)?(x):(y))\nusing namespace std;\nnamespace Debug{\n\tTp I void _debug(Cn char* f,Ty t){cerr<<f<<'='<<t<<endl;}\n\tTs I void _debug(Cn char* f,Ty x,Ar... y){W(*f!=',') cerr<<*f++;cerr<<'='<<x<<\",\";_debug(f+1,y...);}\n\tTp ostream& operator<<(ostream& os,Cn vector<Ty>& V){os<<\"[\";for(Cn auto& vv:V) os<<vv<<\",\";os<<\"]\";return os;}\n\t#define gdb(...) _debug(#__VA_ARGS__,__VA_ARGS__)\n}using namespace Debug;\nnamespace FastIO{\n\t#define FS 100000\n\t#define tc() (FA==FB&&(FB=(FA=FI)+fread(FI,1,FS,stdin),FA==FB)?EOF:*FA++)\n\t#define pc(c) (FC==FE&&(clear(),0),*FC++=c)\n\tint OT;char oc,FI[FS],FO[FS],OS[FS],*FA=FI,*FB=FI,*FC=FO,*FE=FO+FS;\n\tI void clear(){fwrite(FO,1,FC-FO,stdout),FC=FO;}\n\tTp I void read(Ty& x){x=0;W(!isdigit(oc=tc()));W(x=(x<<3)+(x<<1)+(oc&15),isdigit(oc=tc()));}\n\tTs I void read(Ty& x,Ar&... y) {read(x),read(y...);}\n\tTp I void writeln(Ty x){W(OS[++OT]=x%10+48,x/=10);W(OT) pc(OS[OT--]);pc('\\n');}\n}using namespace FastIO;\nCn int N=1e5+10,S=650,M=N/S+10,P=19260817;\nint n,m,bl[N],X,p[71625],s[500000],c[N][12],tot,Inv[N*30+10],sz[N],g[N][12],Ans[N];\nstruct Que{int l,r,id;}q[N];\nI bool cmp(Cn Que& x,Cn Que& y){return bl[x.l]^bl[y.l]?x.l<y.l:x.r<y.r;}\nmap<int,int> mp;\nI void Get(){\n\tfor(RI j,t,i=2;i<=71622;i++) for(!p[i]&&(p[++tot]=i,mp[i]=tot),j=1;j<=tot&&(t=i*p[j])<=71622;j++)\n\tif(p[t]=1,!(i%p[j])) break ;//\u7ebf\u6027\u7b5b\u8d28\u6570\n}\nI void Init(CI x,RI v){\n\tfor(RI i=1;i<=tot&&1LL*p[i]*p[i]<=v;i++) if(!(v%p[i])){\n\t\tg[x][++sz[x]]=i;W(v/=p[i],c[x][sz[x]]++,!(v%p[i]));//\u9884\u5904\u7406\u6bcf\u4e2a\u6570\u5b57\u8d28\u56e0\u6570\u5206\u89e3\n\t}if(v>1) !mp[v]&&(mp[v]=++tot),g[x][++sz[x]]=mp[v],c[x][sz[x]]=1;//\u6ce8\u610f\u5927\u8d28\u6570\u60c5\u51b5\n}\nI void U(CI x,CI v){\n\tfor(RI i=1;i<=sz[x];i++) X=1LL*X*Inv[s[g[x][i]]+1]%P*((s[g[x][i]]+=v*c[x][i])+1)%P;\n}\nint main(){\n\tRI i,x,l,r;for(Get(),Inv[0]=Inv[1]=1,i=2;i<=30*N;i++) Inv[i]=P-1LL*P/i*Inv[P%i]%P;//\u7ebf\u6027\u6c42\u9006\u5143\n\tfor(read(n,m),i=1;i<=n;i++) read(x),Init(i,x),bl[i]=(i-1)/S+1;\n\tfor(i=1;i<=m;i++) read(q[i].l,q[i].r),q[i].id=i;for(sort(q+1,q+m+1,cmp),l=1,r=0,X=1,i=1;i<=m;i++){\n\t\tW(r<q[i].r) U(++r,1);W(r>q[i].r) U(r--,-1);W(l>q[i].l) U(--l,1);W(l<q[i].l) U(l++,-1);Ans[q[i].id]=X;//\u83ab\u961f\n\t}for(i=1;i<=m;i++) writeln(Ans[i]);return clear(),0;\n}\n```\n\n",
        "postTime": 1617495526,
        "uid": 37103,
        "name": "yzxoi",
        "ccfLevel": 7,
        "title": "LuoguP5071 [Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89"
    },
    {
        "content": "\u88ab\u4e00\u4e2a\u5c0f\u7ec6\u8282\u7ed9\u641e\u6302\u4e86\u51e0\u53d1\u3002            \n\n\u9996\u5148\u8fd9\u9053\u9898\u9898\u610f\u5f88\u663e\u5c31\u662f\u8be2\u95ee\u4e00\u6bb5\u533a\u95f4\u4e58\u7684\u7ea6\u6570\u4e2a\u6570\uff0c\u5bf9\u4e8e\u8fd9\u73a9\u610f\u513f\u6211\u4eec\u8003\u8651\u4e00\u6bb5\u533a\u95f4\u7684\u4e58\u79ef\u6700\u9ad8\u53ef\u4ee5\u8fbe\u5230 $1000000000 ^ {100000}$ \u6b21\u65b9\u6240\u4ee5\u6211\u4eec\u80af\u5b9a\u65e0\u6cd5\u76f4\u63a5\u62ff\u51fa\u6765\u73a9\uff0c\u6240\u4ee5\u8003\u8651\u7ea6\u6570\u4e2a\u6570\u5b9a\u7406\u6c42\u89e3\u3002         \n\n\u800c\u7ea6\u6570\u4e2a\u6570\u6c42\u89e3\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u5f97\u628a\u6240\u6709\u6570\u7684\u8d28\u56e0\u6570\u8fdb\u884c\u5206\u89e3\uff0c\u53ef\u662f\u8fd9 \u503c\u57df\u8303\u56f4 100000000 \u5b8c\u5168\u65e0\u6cd5\u505a\u554a\u2026\u2026          \n\n\u5176\u5b9e\u8fd9\u91cc\u6709\u4e00\u4e2a trick \uff0c\u5728 [CF1422F](https://www.luogu.com.cn/problem/CF1422F) \u91cc\u4e5f\u7528\u5230\u4e86\uff0c\u5373\u5229\u7528\u6839\u53f7\u5206\u6cbb\u89e3\u51b3\u5206\u89e3\u8d28\u56e0\u6570\u65f6\u503c\u57df\u8fc7\u5927\u7684\u95ee\u9898\uff0c\u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a $\\leq \\sqrt V$ \u7684\u8d28\u6570\u90fd\u5148\u62ff\u53bb\u7ed9\u4e00\u4e2a\u6570\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u63a5\u7740\u82e5\u8be5\u6570\u5b58\u5728\u4e00\u4e2a $\\geq \\sqrt V$ \u7684\u8d28\u56e0\u6570\u7684\u8bdd\u81f3\u591a\u53ea\u4f1a\u5b58\u5728\u4e00\u4e2a\uff0c\u6211\u4eec\u5355\u72ec\u62ff\u53bb\u5904\u7406\u5373\u53ef\u3002         \n\n\u5728\u6b64\u9898\u4e2d\uff0c\u5c3d\u7ba1 $\\sqrt {1000000000}$ \u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570\u63a7\u5236\u5728 3500 \u5de6\u53f3\uff0c~~\u5c3d\u7ba1\u76f4\u63a5\u8d28\u56e0\u6570\u5206\u89e3\u53ef\u4ee5\u8fc7\u4f46\u662f\u5176\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u4e00\u4e9b\u95ee\u9898~~\uff0c\u6240\u4ee5\u8fd8\u662f\u5efa\u8bae\u5b66\u4e60 Pollard-rho \u7b97\u6cd5\u540e\u518d\u6765\u505a\u6b64\u9898\u2026\u2026           \n\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u628a\u6bcf\u4e2a\u6570\u7684\u8d28\u56e0\u6570\u5206\u89e3\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u8003\u8651\u53ef\u4ee5\u79bb\u7ebf\u6240\u6709\u76f4\u63a5\u62ff\u53bb\u8dd1\u83ab\u961f\uff0c\u800c\u628a\u76f8\u540c\u7684\u8d28\u56e0\u6570\u62ff\u53bb\u5408\u5e76\u4e00\u4e0b\u4e00\u4e2a\u6570\u8d28\u56e0\u6570\u7684\u79cd\u7c7b\u5c31\u81f3\u591a\u53ea\u6709 14 \u4e2a\u5de6\u53f3\uff0c\u6211\u4eec\u5373\u53ef\u5728 $O(14 n \\sqrt n)$ \u5de6\u53f3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff0c\u53ef\u662f\u8fd9\u6837\u505a\u7684\u8bdd\u8fd8\u662f\u65e0\u6cd5\u5361\u6389\u8fd9\u9053\u9898\uff0c\u5176\u5b9e\u6211\u4e5f\u4e0d\u7406\u89e3\u4e3a\u4ec0\u4e48\u5206\u89e3\u8d28\u56e0\u6570\u90fd\u6ca1 T \u6389\u800c\u8fd9\u4e2a\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u5dee\u4e0d\u591a\u7684\u83ab\u961f\u5374\u8fc7\u4e0d\u6389\u2026\u2026                       \n\n\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u5feb\u7684\u7b97\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u6211\u4eec\u8981\u53bb\u6389 14 \u8fd9\u4e2a\u5e38\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u9608\u503c\u5206\u6cbb\u4e00\u4e0b\u3002        \n\n\u4ee4 $S$ \u4e3a\u6211\u4eec\u9608\u503c\u5206\u6cbb\u7684\u754c\u9650\uff0c $C(S)$ \u8868\u793a\u5c0f\u4e8e $S$ \u7684\u8d28\u56e0\u6570\u4e2a\u6570\uff1a               \n\n\u5c06 $\\leq S$ \u7684\u6240\u6709\u8d28\u56e0\u6570\u66b4\u529b\u62ff\u53bb\u6eda\u524d\u7f00\u548c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\times C(S))$     \n\n\u518d\u63a5\u7740\u6211\u4eec\u5229\u7528\u83ab\u961f\u53ef\u4ee5\u505a\u5230\u4e00\u6b21\u67e5\u8be2\u63a7\u5236\u5728 $O(\\sqrt n)$ \u5de6\u53f3\u7684\u7279\u6027\uff0c\u5c06 \u6bcf\u4e2a\u6570 $\\geq S$ \u7684\u8d28\u56e0\u5b50\u62ff\u53bb\u6eda\u83ab\u961f \uff0c\u5355\u6b21\u65f6\u95f4\u590d\u6742\u5ea6\u5728 $O(\\log_S V)$ \u51e0\u4e4e\u5c31\u662f $2 \\sim 5$ \u4e4b\u95f4\u6ce2\u52a8\uff0c\u800c\u5bf9\u4e8e $\\leq S$ \u7684\u8d28\u56e0\u5b50\u6211\u4eec\u76f4\u63a5\u5728\u67e5\u8be2\u7684\u65f6\u5019\u679a\u4e3e\u6bcf\u4e2a\u8d28\u56e0\u5b50\u505a\u524d\u7f00\u548c\u5373\u53ef\u66b4\u529b\u7edf\u8ba1\uff0c\u603b\u7684\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(3582n + n(\\log_S V \\sqrt n + C(S))))$ \uff0c\u6211\u4eec\u8fd9\u91cc\u5176\u5b9e\u53ea\u8981\u628a $S$ \u53d6\u6210 $\\sqrt[3]{1000000000}$ \u57fa\u672c\u4e0a\u5c31\u662f\u4e00\u4e2a\u6839\u53f7\u7ea7\u522b\u7b97\u6cd5\u4e86\uff0c\u5f53\u7136\u8fd9\u91cc\u5e76\u6ca1\u6709\u8ba8\u8bba $O(3582n)$ \u6bd5\u7adf\u8fd9\u79cd\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u70b9\u5361\u7684\u60c5\u51b5\u5728\u5176\u4ed6\u9898\u4e2d\u4e5f\u6709\u4f53\u73b0\uff0c\u6ca1\u5fc5\u8981\u53bb\u7ea0\u7ed3\u3002          \n\n\u6700\u540e\u8bb2\u4e00\u4e0b\u81ea\u5df1\u88ab\u4ec0\u4e48\u5751\u4e86\u5427\uff0c\u6211\u662f\u628a\u6240\u6709\u9700\u8981\u6eda\u83ab\u961f\u7684\u8d28\u56e0\u5b50\u62ff\u53bb\u79bb\u6563\u5316\u4e86\u7684\uff0c\u7ed3\u679c\u6211\u5728\u5224\u5f53\u524d\u6709\u6ca1\u6709\u5927\u4e8e $\\geq \\sqrt {1000000000}$ \u7684\u8d28\u56e0\u5b50\u65f6\u5fd8\u4e86\u6211\u5df2\u7ecf\u79bb\u6563\u5316\u4e86\u7ed3\u679c\u5c31\u5224\u9519\u4e86\u2026\u2026\u603b\u7684\u6765\u8bf4\u4e0d\u662f\u5361\u65f6\u95f4\u9898\u4e0d\u662f\u96be\u7801\u9898\uff0c\u5e94\u8be5\u53ea\u80fd\u7b97\u662f\u4e00\u9053\u591a trick \u7684\u9898\u3002           \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nconst int Len = 4e5 + 5;\nconst long long mod = 19260817;\nlong long inv[Len * 40],Print[Len],ans = 1;\nint prim[10005],cnt,a[Len];\nbool flag[Len];\nint t,m,n,sum[Len][205],tot,num[10005],lsh[Len << 2],Cnt[Len << 2],ttt,ElseMax[Len][3],block[Len];\nvector<int> v[Len];\nvoid Init()\n{\n\tfor(int i = 2 ; i <= 33000 ; i ++)\n\t{\n\t\tif(flag[i]) continue;\n\t\tprim[++ cnt] = i;\n\t\tif(i <= 1001) num[i] = ++ tot;\n\t\tfor(int j = 2 ; j * i <= 33000 ; j ++) flag[j * i] |= 1;\n\t}\n}\nstruct node\n{\n\tint l,r,idx;\n}Sec[Len];\nbool cmp(node x,node y)\n{\n\tif(block[x.l] ^ block[y.l]) return block[x.l] < block[y.l];\n\treturn x.r < y.r;\n}\ninline void Add(int x)\n{\n\tfor(int j = 1 ; j <= 2 ; j ++)\n\t\tif(ElseMax[x][j]) \n\t\t{\n\t\t\tans = ans * inv[Cnt[ElseMax[x][j]] + 1] % mod;\n\t\t\tCnt[ElseMax[x][j]] ++;\n\t\t\tans = ans * (Cnt[ElseMax[x][j]] + 1) % mod;\n\t\t}\n\tif(a[x] != 1)\n\t{\n\t\tans = ans * inv[Cnt[a[x]] + 1] % mod;\n\t\tCnt[a[x]] ++;\n\t\tans = ans * (Cnt[a[x]] + 1) % mod;\n\t}\n}\ninline void Sub(int x)\n{\n\tfor(int j = 1 ; j <= 2 ; j ++)\n\t\tif(ElseMax[x][j]) \n\t\t{\n\t\t\tans = ans * inv[Cnt[ElseMax[x][j]] + 1] % mod;\n\t\t\tCnt[ElseMax[x][j]] --;\n\t\t\tans = ans * (Cnt[ElseMax[x][j]] + 1) % mod;\n\t\t}\n\tif(a[x] != 1)\n\t{\n\t\tans = ans * inv[Cnt[a[x]] + 1] % mod;\n\t\tCnt[a[x]] --;\n\t\tans = ans * (Cnt[a[x]] + 1) % mod;\n\t}\n}\nsigned main()\n{\n\tinv[1] = 1;\n\tfor(int i = 2 ; i <= 4000000 ; i ++){inv[i] = (mod - mod / i) * inv[mod % i] % mod;}//printf(\"%lld\\n\",inv[i]);\n\tInit();\n\tscanf(\"%d %d\",&n,&m);\n\tt = sqrt(n);\n\tfor(int i = 1 ; i <= n ; i ++) {scanf(\"%d\",&a[i]);block[i] = (i - 1) / t + 1;}\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tfor(int j = 1 ; j <= cnt ; j ++) \n\t\t{\n\t\t\twhile(a[i] % prim[j] == 0) \n\t\t\t{\n\t\t\t\ta[i] /= prim[j];\n\t\t\t\tv[i].push_back(prim[j]);\n\t\t\t}\t\n\t\t}\n\t\tif(a[i] != 1) lsh[++ ttt] = a[i];\n\t}\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tint len = 0;\n\t\tfor(int j = 0 ; j < v[i].size() ; j ++)\n\t\t{\n\t\t\tif(v[i][j] <= 1001) sum[i][num[v[i][j]]] ++;\n\t\t\telse ElseMax[i][++ len] = v[i][j] , lsh[++ ttt] = v[i][j];\n\t\t}\n\t\tfor(int j = 1 ; j <= tot ; j ++) sum[i][j] += sum[i - 1][j];\n\t}\n\tlsh[++ ttt] = 0;\n\tsort(lsh + 1 , lsh + 1 + ttt);\n\tttt = unique(lsh + 1 , lsh + 1 + ttt) - lsh - 1;\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tif(a[i] != 1) a[i] = lower_bound(lsh + 1 , lsh + 1 + ttt , a[i]) - lsh;\n\t\tfor(int j = 1 ; j <= 2 ; j ++)\n\t\t\tif(ElseMax[i][j]) ElseMax[i][j] = lower_bound(lsh + 1 , lsh + 1 + ttt , ElseMax[i][j]) - lsh;\n\t}\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tscanf(\"%d %d\",&Sec[i].l,&Sec[i].r);\n\t\tSec[i].idx = i;\n\t}\n\tsort(Sec + 1 , Sec + 1 + m , cmp);\n\tint l = 1 , r = 0;\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\twhile(l > Sec[i].l) Add(-- l);\n\t\twhile(r < Sec[i].r) Add(++ r);\n\t\twhile(l < Sec[i].l) Sub(l ++);\n\t\twhile(r > Sec[i].r) Sub(r --);\n\t\tlong long res = ans;\n\t\tfor(int j = 1 ; j <= tot ; j ++) res = res * (sum[r][j] - sum[l - 1][j] + 1) % mod;\n\t\tPrint[Sec[i].idx] = res;\n\t}\n\tfor(int i = 1 ; i <= m ; i ++) printf(\"%lld\\n\",Print[i]);\n\treturn 0;\n}\n```",
        "postTime": 1616154056,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "[\u591a\u6b21\u9608\u503c\u5206\u6cbb]\u9898\u89e3 P5071 [Ynoi2015] \u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89"
    },
    {
        "content": "\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n\u82e5 $n=\\Pi_{i=1}^kp_i^{a_i}$\u3002\n\n\u5219 $n$ \u7684\u7ea6\u6570\u4e2a\u6570\u4e3a $\\Pi_{i=1}^k(a_i+1)$\u3002\n\n\u77e5\u9053\u8fd9\u4e2a\u7ed3\u8bba\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u6709\u4e00\u4e2a \u81ea \u7136 \u800c \u7136 \u7684\u60f3\u6cd5\uff1a\n\n\u7528\u83ab\u961f\u7ef4\u62a4\u6bcf\u4e2a\u8d28\u56e0\u6570\u7684\u51fa\u73b0\u6b21\u6570\u548c\u7b54\u6848\u3002\n\n\u6bcf\u52a0\u5165\u6216\u5220\u9664\u4e00\u4e2a\u8d28\u56e0\u6570\uff0c\u5c31\u5148\u4e58\u4e0a\u5b83\u4e4b\u524d\u51fa\u73b0\u7684\u6b21\u6570\u52a0\u4e00\u7684\u9006\u5143\uff0c\u7136\u540e\u628a\u51fa\u73b0\u6b21\u6570\u52a0\u4e0a\u6216\u51cf\u53bb\u4e00\u4e4b\u540e\u518d\u4e58\u3002\n\n\u4e00\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6bcf\u4e2a\u6570\u6700\u591a\u4f1a\u6709 $9$ \u4e2a\u8d28\u56e0\u6570\uff0c\u90a3\u4e48\u5e8f\u5217\u4e2d\u4f1a\u6709 $9\\times 10^5$ \u4e2a\u6570\u3002\u83ab\u961f\u8dd1\u4e0d\u8fc7\u53bb\u3002\n\n\u4f46\u6211\u4eec\u53d1\u73b0\uff1a\u5c0f\u7684\u8d28\u56e0\u6570\u5f88\u591a\u3002\u6211\u4eec\u53ef\u4ee5\u6293\u4f4f\u8fd9\u4e00\u70b9\u8fdb\u884c\u4f18\u5316\u3002\n\n\u7531\u4e8e\u53ea\u7528\u77e5\u9053\u6bcf\u4e2a\u8d28\u56e0\u6570\u51fa\u73b0\u7684\u6b21\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u5c0f\u7684\u8d28\u56e0\u6570\u90fd\u7b5b\u51fa\u6765\uff0c\u505a\u4e2a\u524d\u7f00\u548c\uff0c\u6bcf\u6b21\u8be2\u95ee\u90fd\u5355\u72ec\u7edf\u8ba1\u4e58\u4e0a\u53bb\u3002\n\n\u8fd9\u91cc\u6211\u662f\u628a $\\sqrt{10^9}$ \u4ee5\u5185\u7684\u8d28\u6570\u90fd\u7b5b\u51fa\u6765\u4e86\uff08\u7528\u6765\u7b5b\u5176\u4ed6\u7684\u5927\u7684\u8d28\u56e0\u6570\uff09\uff0c\u7136\u540e\u628a\u524d $200$ \u4e2a\u7684\u51fa\u73b0\u6b21\u6570\u62ff\u6765\u505a\u524d\u7f00\u548c\u3002\n\n~~\u4e4b\u524d\u4eba\u50bb\u4e86\u5199\u7ebf\u6bb5\u6811\u5361\u4e86\u534a\u5929\u5e38~~\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define lowbit(x) ((x)&(-(x)))\nvector<int> p;\nint prime[100010],cntot,tag[100010];\nvoid search(int x)//\u7ebf\u6027\u7b5b\u8d28\u6570 \n{\n\ttag[1]=1;\n\tfor(int i=2;i<=x;++i)\n\t{\n\t\tif(!tag[i])\tprime[++cntot]=i;\n\t\tfor(int j=1;j<=cntot&&prime[j]*i<=x;++j)\n\t\t{\n\t\t\ttag[i*prime[j]]=1;\n\t\t\tif(i%prime[j]==0)\tbreak;\n\t\t}\n\t}\n}\nstruct ask\n{\n\tint l,r,ID,lyc,wgy;//lyc\u548cwgy\u8868\u793a\u8fd9\u4e2a\u8be2\u95ee\u5728\u539f\u5e8f\u5217\u4e0a\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u7528\u6765\u4e4b\u540e\u67e5\u8be2\u5c0f\u7684\u8d28\u56e0\u6570\u7684\u51fa\u73b0\u4e2a\u6570 \n}as[100010];\nconst int each=700,mod=19260817;\nint n,m,a[100010],cnt[100010][201],nodes[100010][201],ton[201],pri[200010],belong[200010],ans[100010],in[100010],out[100010],inv[200010],tot,opl,opr,nowl,nowr,app[200010],cur=1;\nbool cmp(ask one,ask ano)\n{\n\tif(belong[one.l]^belong[ano.l])\treturn belong[one.l]<belong[ano.l];\n\tif(belong[one.l]&1)\treturn one.r<ano.r;//\u5947\u5076\u6392\u5e8f \n\telse\treturn one.r>ano.r;\n}\nvoid read(int &hhh)\n{\n\tint x=0;\n\tchar c=getchar();\n\twhile((c<'0')|(c>'9')&&c^'-')\tc=getchar();\n\tif(c^'-')\tx=c^'0';\n\tchar d=getchar();\n\twhile((d<='9')&(d>='0'))\n\t{\n\t\tx=(x<<1)+(x<<3)+(d^'0');\n\t\td=getchar();\n\t}\n\tif(c^'-')\thhh=x;\n\telse\thhh=-x;\n}\nvoid writing(int x)\n{\n\tif(!x)\treturn;\n\twriting(x/10);\n\tputchar((x%10)+'0');\n}\nvoid write(int x)\n{\n\tif(x<0)\n\t{\n\t\tputchar('-');\n\t\tx=-x;\n\t}\n\telse if(!x)\n\t{\n\t\tputchar('0');\n\t\tputchar('\\n');\n\t\treturn;\n\t}\n\twriting(x);\n\tputchar('\\n');\n}\nint main()\n{\n\tread(n);\n\tread(m);\n\tsearch(33000);\n\tfor(int i=1;i^201;++i)\tton[i]=prime[i];\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tread(a[i]);\n\t\tin[i]=tot+1;//in[],out[]\u8bb0\u5f55\u6bcf\u4e2a\u539f\u5e8f\u5217\u7684\u5143\u7d20\u8d28\u56e0\u6570\u5728\u65b0\u7684\u5e8f\u5217\u4e2d\u7684\u5f00\u5934\u7ed3\u5c3e \n\t\tfor(int j=1;j^201;++j)\n\t\t{\n\t\t\twhile(a[i]%ton[j]==0)\n\t\t\t{\n\t\t\t\ta[i]/=ton[j];\n\t\t\t\t++cnt[i][j];\n\t\t\t}\n\t\t}\n\t\tif(a[i]>1)\n\t\t{\n\t\t\tfor(int j=201;prime[j]*prime[j]<=a[i];++j)//\u628a\u5927\u7684\u8d28\u56e0\u6570\u62ff\u51fa\u6765\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217 \n\t\t\t{\n\t\t\t\twhile(a[i]%prime[j]==0)\n\t\t\t\t{\n\t\t\t\t\ta[i]/=prime[j];\n\t\t\t\t\tpri[++tot]=prime[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(a[i]>1)\tpri[++tot]=a[i];\n\t\t}\n\t\tout[i]=tot;\n\t}\n\tinv[1]=1;\n\tfor(int i=2;i<=tot;++i)\tinv[i]=(((-(long long)(mod/i)*inv[mod%i])%mod)+mod)%mod;//\u7ebf\u6027\u5904\u7406\u9006\u5143 \n\tfor(int i=1;i<=tot;++i)\n\t{\n\t\tp.push_back(pri[i]);\n\t\tbelong[i]=(i-1)/each+1;\n\t}\n\tsort(p.begin(),p.end());\n\tp.erase(unique(p.begin(),p.end()),p.end());\n\tfor(int i=1;i<=tot;++i)\tpri[i]=lower_bound(p.begin(),p.end(),pri[i])-p.begin()+1;\n\tfor(int i=1;i^201;++i)//\u5bf9\u5c0f\u7684\u8d28\u56e0\u6570\u505a\u524d\u7f00\u548c \n\t{\n\t\tfor(int j=1;j<=n;++j)\tnodes[j][i]=nodes[j-1][i]+cnt[j][i];\n\t}\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tread(opl);\n\t\tread(opr);\n\t\tas[i].l=in[opl];\n\t\tas[i].r=out[opr];//\u83ab\u961f\u7684\u8be2\u95ee\u5de6\u53f3\u7aef\u70b9\uff0c\u628a\u539f\u5e8f\u5217\u4e2d\u67e5\u8be2\u533a\u95f4\u7684\u8d28\u56e0\u6570\u5168\u90e8\u8986\u76d6\u6389\u3002 \n\t\tas[i].ID=i;\n\t\tas[i].lyc=opl;\n\t\tas[i].wgy=opr;\n\t}\n\tsort(as+1,as+1+m,cmp);\n\tnowl=1;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\twhile(nowl>as[i].l)\n\t\t{\n\t\t\t--nowl;\n\t\t\tcur=((long long)cur*inv[app[pri[nowl]]+1])%mod;//\u5148\u4e58\u4e0a\u4ee5\u524d\u7684\u9006\u5143\uff0c\u6d88\u9664\u4e4b\u524d\u7684\u7b54\u6848\u8d21\u732e \n\t\t\t++app[pri[nowl]];\n\t\t\tcur=((long long)cur*(app[pri[nowl]]+1))%mod;//\u4e58\u4e0a\u73b0\u5728\u7684\u7b54\u6848\u8d21\u732e \n\t\t}\n\t\twhile(nowr<as[i].r)\n\t\t{\n\t\t\t++nowr;\n\t\t\tcur=((long long)cur*inv[app[pri[nowr]]+1])%mod;\n\t\t\t++app[pri[nowr]];\n\t\t\tcur=((long long)cur*(app[pri[nowr]]+1))%mod;\n\t\t}\n\t\twhile(nowl<as[i].l)\n\t\t{\n\t\t\tcur=((long long)cur*inv[app[pri[nowl]]+1])%mod;\n\t\t\t--app[pri[nowl]];\n\t\t\tcur=((long long)cur*(app[pri[nowl]]+1))%mod;\n\t\t\t++nowl;\n\t\t}\n\t\twhile(nowr>as[i].r)\n\t\t{\n\t\t\tcur=((long long)cur*inv[app[pri[nowr]]+1])%mod;\n\t\t\t--app[pri[nowr]];\n\t\t\tcur=((long long)cur*(app[pri[nowr]]+1))%mod;\n\t\t\t--nowr;\n\t\t}\n\t\tint tmp=cur;\n\t\tfor(int j=1;j^201;++j)\ttmp=((long long)tmp*(nodes[as[i].wgy][j]-nodes[as[i].lyc-1][j]+1))%mod;//\u4e34\u65f6\u4e58\u4e0a\u5c0f\u7684\u8d28\u56e0\u6570\u5bf9\u7b54\u6848\u7684\u8d21\u732e \n\t\tans[as[i].ID]=tmp;\n\t}\n\tfor(int i=1;i<=m;++i)\twrite(ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1597566617,
        "uid": 174555,
        "name": "CyanSineSin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u6c42\u533a\u95f4\u7684\u4e58\u79ef\u7684\u7ea6\u6570\u4e2a\u6570$mod$ $19260817$ \u7684\u503c\n\n\u9996\u5148\u770b\u5230\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\u5c31\u4f1a\u60f3\u5230\u83ab\u961f\n\n\u5982\u679c$num= \\prod{p_i^{a_i}}$\uff0c\u90a3\u8be5\u6570\u7684\u8d28\u56e0\u5b50\u4e2a\u6570\u4e3a$\\prod(a_i+1)$\n\n\u6545\u53ea\u9700\u627e\u51fa\u4e00\u4e2a\u6570\u7684\u6240\u6709\u8d28\u56e0\u5b50\u5373\u53ef\n\n\u7528$PollardRho$\u73c2\u4ee5\u5feb\u901f\u5730\u6c42\u51fa\u4e00\u4e2a\u6570\u7684\u6240\u6709\u8d28\u56e0\u5b50\n\n\u9884\u5904\u7406\u51fa\u6240\u6709\u6570\u7684\u8d28\u56e0\u5b50\uff0c\u7136\u540e\u666e\u901a\u83ab\u961f\u6307\u9488\u79fb\u52a8\u8ba1\u7b97\u8d21\u732e\uff0c\u7531\u4e8e$10e9$\u5185\u7684\u6570\u7684\u6700\u591a\u6709$10$\u4e2a\u4e0d\u540c\u7684\u8d28\u56e0\u5b50($2-29$\u5185\u7684\u8d28\u6570\u4e58\u79ef\u5df2\u8d85\u8fc7$10^9$)\n\n\u5206\u89e3\u8d28\u56e0\u6570\u540e\u79bb\u6563\u5316\uff0c\u8981\u4e0d$500MB$\u7167\u6837$MLE$\n\n\u8fd8\u6709\u5c31\u662f\u8981\u9884\u5904\u7406\u9006\u5143\n\n\u590d\u6742\u5ea6$O(n sqrt(n))$\u52a0\u4e0a$PollardRho$ \u7684~~\u7384\u5b66~~\u590d\u6742\u5ea6\uff0c\u73c2\u4ee5\u83b7\u5f97$80pts$\u5de6\u53f3\n\n\u8003\u8651\u4f18\u5316\n\n\u7531\u4e8e\u6bcf\u4e2a\u6570\u8f83\u5c0f\u8d28\u56e0\u5b50\u5f88\u591a\n\n\u8003\u8651\u5c06$1000$\u4e4b\u524d\u7684\u8d28\u6570($168$\u4e2a)\u5efa\u7acb\u524d\u7f00\u548c\n\n\u6bcf\u4e2a\u6570\u6700\u591a\u5269\u4e0b$2$\u4e2a\u8d28\u56e0\u5b50\uff0c\u7528$PollardRho$\u5bfb\u627e\u5373\u53ef\n\n\u7136\u540e~~\u8c03\u8c03\u53c2\u5361\u5361\u5e38\u6570~~\u5373\u53ef\u901a\u8fc7\u672c\u9898\u3002\n\n\n```cpp\n#pragma GCC target(\"avx\")\n#pragma GCC optimize(\"O3\")\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\n#define rint register int\n#define rll register long long\n#define rc register char\n#define inf 0x7fffffff\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b):(a):(b))\n#define rep(i,j,k) for(rint i=j;i<=k;++i)\n#define dow(i,j,k) for(rint i=j;i>=k;--i)\n#define mod 19260817\n#define MAXN 100005\n#define MAXV 175\n#define MAXM 1005\ntypedef long long ll;\ntypedef long double ld; \ninline int read(){\n    rint x=0;\n\trc ch=getchar();\n\twhile(!isdigit(ch))\n\t ch=getchar();\n    while(isdigit(ch))\n     x=(x<<3)+(x<<1)+(ch^48),\n\t  ch=getchar();\n\treturn x;\n}\ninline void write(rint x){\n    if(x>9) \n     write(x/10);\n    putchar(x%10^48);\n}\nnamespace Pollard_Rho{\n\tstatic const ld eps=1e-8;\n    static const ll number[5]={0,5,61,24251};\n    inline int mul(rint a,rint b,rint m){\n        int tmp=(ld)a/m*b+eps;\n        int r=a*b-tmp*m;\n        return r<0?r+m:r;\n    }\n    inline int quick_pow(int a,int b,int m){\n        int i=a,s=1;\n        while(b){\n            if(b&1)\n             s=mul(s,i,m);\n            i=mul(i,i,m);\n            b>>=1;\n        }\n        return s%m;\n    }\n    inline bool miller_rabin(rint x){\n        if(x==2||x==3||x==5||x==7) \n         return true;\n        if(!(x&1)||(x%3==0)||(x%5==0)||(x%7==0)||(x==1)) \n         return false;\n        int t=x-1,res=0;\n        while(!(t&1))\n         ++res,t>>=1;\n        rep(i,1,3){\n            if(x==number[i])\n             return true;\n            rint num=quick_pow(number[i],t,x),next=num;\n            rep(j,1,res){\n                next=mul(next,next,x);\n                if(next==1&&(num^1)&&(num^x-1))\n                 return false;\n                num=next;\n            }\n            if(num^1)\n             return false;\n        }\n        return true;\n    }\n    inline int gcd(int a,int b){\n        if(!a) \n         return b;\n        if(!b) \n         return a;\n        if(!(a&1)&&!(b&1))\n         return gcd(a>>1,b>>1)<<1;\n        else \n         if(!(b&1))\n          return gcd(a,b>>1);\n        else \n         if(!(a&1))\n          return gcd(a>>1,b);\n        else\n         return gcd(abs(a-b),min(a,b));\n    }\n    inline int get(rint x,rint n){\n        int tmp=mul(x,x,n)+1;\n        return tmp<n?tmp:tmp-n;\n    }\n    inline int pollard_rho(rint n){\n        ll x=rand()%(n-1)+1,y=x,t=1,q=1,k=2;\n        while(k<<=1){\n        \ty=x,q=1;\n            rep(i,1,k){\n                x=get(x,n);\n                q=mul(q,abs(x-y),n);\n                if(!(i&127)){\n                    t=gcd(q,n);\n                    if(t>1)\n                     break;\n                }\n            }\n            if(t>1||(t=gcd(q,n))>1)\n             break;\n        } \n        if(!(t^n)){\n            t=1;\n            while(!(t^1))\n             t=gcd(abs((x=get(x, n))-y),n);\n        }\n        return t;\n    }\n}\nusing namespace Pollard_Rho;\nint x,n,m,block;\nstruct Query{\n\tint l,r;\n\tint index;\n}q[MAXN];\ninline bool cmp(Query a,Query b){\n    return a.l/block==b.l/block?a.r<b.r:a.l<b.l;\n}\nint prime[MAXV],prime_cnt=0,rank[MAXM];\nint inv[MAXN<<1],pre[MAXN][MAXV];\nint f[MAXN][MAXV],s[MAXN];\nint ans[MAXN],t[MAXN<<1],cnt=1;\nstd::vector<int> vec;\ninline void make_prime(){\n\trep(i,2,1000)\n\t rank[i]=true;\n\trep(i,2,1000){\n\t\tif(!rank[i])\n\t\t continue;\n\t\tprime[++prime_cnt]=i,\n\t\t rank[i]=prime_cnt;\n\t\tfor(rint j=(i<<1);j<=1000;j+=i)\n\t\t rank[j]=false;\n\t}\n\treturn;\n}\ninline void make_inv(){\n\tinv[1]=1;\n\trep(i,2,100000)\n\t inv[i]=(ll)(mod-mod/i)*inv[mod%i]%mod;\n\t return;\n}\ninline void search(rint x,rint index){\n\tif(x==1)\n\t return;\n\tif(miller_rabin(x))\n\t f[index][++s[index]]=x,\n      vec.push_back(x);\n    else{\n    \trint tmp=x;\n    \twhile(tmp==x)\n         tmp=pollard_rho(x);\n    \tsearch(tmp,index);\n    \tsearch(x/tmp,index);\n    }\n}\ninline void add(rint index){\n\trep(i,1,s[index])\n\t cnt=(ll)cnt*inv[t[f[index][i]]]%mod*(t[f[index][i]]+1)%mod,\n\t  ++t[f[index][i]];\n}\ninline void del(rint index){\n\trep(i,1,s[index])\n\t cnt=(ll)cnt*inv[t[f[index][i]]]%mod*(t[f[index][i]]-1)%mod,\n\t  --t[f[index][i]];\n}\ninline void calc(){\n\tstd::sort(vec.begin(),vec.end());\n\tvec.erase(unique(vec.begin(),vec.end()),vec.end());\n\trep(i,1,n)\n\t rep(j,1,s[i])\n\t  f[i][j]=lower_bound(vec.begin(),vec.end(),f[i][j])-vec.begin();\n\tstd::sort(q+1,q+m+1,cmp);\n\trep(i,0,n)\n\t t[i]=1;\n\trint curl=1,curr=0;\n\tcnt=1;\n\trep(i,1,m){\n\t\twhile(curr<q[i].r)\n\t\t add(++curr);\n\t\twhile(curl>q[i].l)\n\t\t add(--curl);\n\t\twhile(curr>q[i].r)\n\t\t del(curr--);\n\t\twhile(curl<q[i].l)\n\t\t del(curl++);\n\t\tans[q[i].index]=cnt; \n\t\trep(j,1,prime_cnt)\n\t\t ans[q[i].index]=(ll)ans[q[i].index]*(pre[curr][j]-pre[curl-1][j]+1)%mod;\n\t}\n\treturn;\n}\nint main(){\n\tsrand(26);\n\tmake_prime();\n\tmake_inv();\n\tn=read(),m=read();\n\tblock=n/sqrt((m<<1)/3);\n\trep(i,1,n){\n        rint x=read();\n        memcpy(pre[i],pre[i-1],sizeof(pre[i-1]));\n        for(rint j=1;j<=prime_cnt&&prime[j]*prime[j]<=x;++j)\n        while(!(x%prime[j])){\n            ++pre[i][j];\n            x/=prime[j];\n        }\n        if(x>1){\n            if(x<=prime[prime_cnt]){\n                ++pre[i][rank[x]];\n                continue;\n            }\n            search(x,i);\n        }\n    }\n\trep(i,1,m)\n\t q[i].l=read(),\n\t  q[i].r=read(),\n\t   q[i].index=i;\n\tcalc();\n\trep(i,1,m)\n\t writeln(ans[i]),\n\treturn 0;\n} \n```\n",
        "postTime": 1565525131,
        "uid": 157603,
        "name": "\u5343\u53cd\u7530",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5071 \u3010[Ynoi2015]\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\u3011"
    }
]