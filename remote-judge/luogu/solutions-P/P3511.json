[
    {
        "content": "2021.9.28\u4fee\u4e86\u6c42\u6b27\u62c9\u56de\u8def\u7684\u9505&\u7cbe\u7b80\u4e86\u5185\u5bb9\u3002\n\n## statement\n\n\u6709 $n(n \\leq 1000)$ \u4e2a\u70b9\u548c $m(m \\leq 20000)$ \u6761\u8fb9\uff0c\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u6743\u503c\uff0c\u5206\u522b\u8868\u793a\u4ece $u$ \u5230 $v$ \u548c\u4ece $v$ \u5230 $u$ \u7684\u8fb9\u6743\u3002\n\n\u6c42\u56fe\u4e2d\u7684\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\uff0c\u4f7f\u5f97\u56de\u8def\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u6700\u5c0f\uff0c\u5e76\u8f93\u51fa\u65b9\u6848\u3002\n\n\uff08\u4e0d\u77e5\u9053\u6b27\u62c9\u56de\u8def\u7684\u81ea\u884c\u767e\u5ea6\uff09\n\n## solution\n\n\u9996\u5148\uff0c\u9898\u76ee\u8981\u6c42\u6700\u5927\u8fb9\u6743\u6700\u5c0f\u7684\u6b27\u62c9\u56de\u8def\uff0c\u6211\u4eec\u60f3\u5230\u4e8c\u5206\u7b54\u6848\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $mid$ \u5efa\u51fa\u4e00\u4e2a\u56fe\u3002\n\n\u56fe\u4e2d\u6709\u6709\u5411\u8fb9\u548c\u65e0\u5411\u8fb9\u3002\n\n\u6b27\u62c9\u56de\u8def\u6709\u4e00\u4e2a\u6027\u8d28\uff1a**\u6bcf\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6=\u51fa\u5ea6**\u3002\n\n\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u70b9\u5206\u6210**\u5165\u5ea6>\u51fa\u5ea6**\u548c**\u5165\u5ea6<\u51fa\u5ea6**\u4e24\u7c7b\u3002\n\n\u5efa\u7acb\u865a\u62df\u6e90\u70b9 $S$ \u548c\u6c47\u70b9 $T$\u3002\n\n\u82e5\u5f53\u524d\u70b9\u7684\u5165\u5ea6>\u51fa\u5ea6\uff0c\u5219\u5b83\u9700\u8981\u591a\u6d41\u5165**\u5165\u5ea6-\u51fa\u5ea6**\u7684\u6d41\u91cf\u624d\u53ef\u80fd\u6ee1\u8db3**\u5165\u5ea6=\u51fa\u5ea6**\u3002\n\n\u82e5\u5f53\u524d\u70b9\u7684\u5165\u5ea6<\u51fa\u5ea6\uff0c\u5219\u5b83\u9700\u8981\u591a\u7559\u51fa**\u51fa\u5ea6-\u5165\u5ea6**\u7684\u6d41\u91cf\u624d\u53ef\u80fd\u6ee1\u8db3**\u5165\u5ea6=\u51fa\u5ea6**\u3002\n\n\u7b49\u7b49......\n\n\u8fd9\u9053\u9898\u8fd8\u6709\u65e0\u5411\u8fb9\uff0c\n\n\u90a3\u6211\u4eec\u5982\u4f55\u5904\u7406\u5462\uff1f\n\n\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5bf9\u4e8e $u \\ v$ \u4e4b\u95f4\u7684\u65e0\u5411\u8fb9\uff0c\u5148\u628a\u5b83\u5b9a\u4e00\u4e2a\u65b9\u5411\uff08\u4e0b\u6587\u5047\u8bbe\u521d\u59cb\u662f\u4ece $u$ \u5230 $v$ \u7684\uff09\uff0c\n\n\u518d\u8fde\u4e00\u6761\u4ece $v$ \u8fde $u$ \u4e4b\u95f4\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u76f8\u5f53\u4e8e\u6211\u53ef\u4ee5**\u53cd\u6094**\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u52a0\u4e00\u4e2a\u5224\u65ad\uff1a\n\n\u82e5\u6709\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6-\u51fa\u5ea6\u4e3a\u5947\u6570\uff0c\u5219\u4e00\u5b9a\u65e0\u89e3\u3002\n\n\u56e0\u4e3a\u6539\u53d8\u65e0\u5411\u8fb9\u7684\u65b9\u5411\uff0c\u8be5\u70b9\u7684\u5165\u5ea6-\u51fa\u5ea6\u7684\u503c\u4e00\u5b9a\u8fd8\u662f\u5947\u6570\uff0c\u5373\u4e0d\u53ef\u80fd\u4e3a0\uff0c\u4e00\u5b9a\u65e0\u89e3\u3002\n\n\u63a5\u4e0b\u6765\u8dd1\u6700\u5927\u6d41\uff0c\n\n\u82e5\u6e90\u70b9\u8fde\u5411**\u5165\u5ea6>\u51fa\u5ea6**\u7684\u70b9\u7684\u6d41\u91cf\u672a\u6ee1\uff0c\u5219\u8bf4\u660e\u4e0d\u5b58\u5728\u6b27\u62c9\u56de\u8def\uff0c\u56e0\u4e3a\u80af\u5b9a\u6709\u70b9\u7684\u5165\u5ea6\u2260\u51fa\u5ea6\u3002\n\n\u82e5\u6ee1\u8db3\u6b64\u6761\u4ef6\uff0c\u5219\u6b64 $mid$ \u53ef\u884c\u3002\n\n------------\n\n\u5f53\u4e8c\u5206\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u6700\u7ec8\u7b54\u6848 $ans$ \n\n\u5bf9\u4e8e $ans$ \u5efa\u51fa\u4e00\u4e2a\u6709\u5411\u56fe\n\n\u63a5\u4e0b\u6765\u53ea\u8981\u627e\u51fa\u8d70\u7684\u65b9\u6848\u5c31\u53ef\u4ee5\u4e86\n\n\u90a3\u5982\u4f55\u6c42\u5462\uff1f\n\n~~\u5176\u5b9e\u5c31\u662f\u6b27\u62c9\u56de\u8def\u7684\u677f\u5b50~~\n\n[P7771 \u6b27\u62c9\u8def\u5f84](https://www.luogu.com.cn/problem/P7771)\n\n\u8fd9\u91cc\u9762\u7684\u9898\u89e3\u8bb2\u7684\u5f88\u6e05\u695a\u3002\n\n------------\n\n\u4e00\u4e9b\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n\u9996\u5148\u8981\u5224\u65ad\u56fe\u7684\u8fde\u901a\u6027\uff08\u7528\u5e76\u67e5\u96c6\u5373\u53ef\uff09\uff0c\u4e0d\u7136\u4f1a\u88ab Hack \uff0c\u6bd4\u5982\n\n```\n6 6\n1 2 1 1\n2 3 1 1\n3 1 1 1\n4 5 1 1\n5 6 1 1\n6 4 1 1\n```\n\n\u4f46\u662f\uff0c\u5b64\u7acb\u70b9\u662f\u4e0d\u7528\u7ba1\u7684\uff0c\u56e0\u4e3a\u6b27\u62c9\u56de\u8def\u53ea\u8981\u6c42\u7ecf\u8fc7\u6240\u6709\u8fb9\u4e00\u6b21\uff0c\u6240\u4ee5\u8fd8\u8981\u5224\u65ad\u4e00\u4e0b\uff0c\u6bd4\u5982\n\n```\n5 4\n1 2 1 1\n2 3 1 1\n3 4 1 1\n4 1 1 1\n```\n\n\u8fd8\u8981\u5224\u65ad\u662f\u5426\u6709\u8fb9\u672a\u88ab\u52a0\u5165\uff0c\u4e0d\u7136\u4f1a\u88ab [\u8fd9\u4e2a\u5e16\u5b50](https://www.luogu.com.cn/discuss/show/189647) Hack \u3002\n\n------------\n\n$\\Large\\text{Code\\  time}$\n\n```cpp\n//\u7701\u7565\u4e86\u7f51\u7edc\u6d41\u677f\u5b50\u548c\u5e76\u67e5\u96c6\u677f\u5b50\u3002\n#define N 2050\n#define M 40050\nint deg[N],n,S,T,ALL,m,w1[M],w2[M],u[M],v[M],id[M];\n//\u5efa\u56fe \nbool build(int mid){\n    Flow.clear();\n    memset(deg,0,sizeof(deg));\n    Flow.n=n+2;\n    S=n+1;T=n+2;ALL=0;\n    for(int i=1;i<=m;++i){\n        if(w1[i]<=mid)deg[u[i]]--,deg[v[i]]++;\n        if(w2[i]<=mid){\n            id[i]=Flow.Top+1;\n            Flow.Add(v[i],u[i],1);\n        }\n    }\n    for(int i=1;i<=n;++i)\n        if(deg[i]&1)return false;\n    for(int i=1;i<=n;++i)//\u5206\u4e24\u7c7b \n        if(deg[i]>0)ALL+=deg[i]/2,Flow.Add(S,i,deg[i]/2);//\u5165\u5ea6>\u51fa\u5ea6 \n        else Flow.Add(i,T,-deg[i]/2);//\u51fa\u5ea6>=\u5165\u5ea6 \n    return true;\n}\nbool check(int mid){\n    if(!build(mid))return false;\n    return Flow.dinic(S,T)==ALL;\n}\nint top;\nbool vis[M];\nint res[M];\n//\u4e0b\u9762\u662f\u6b27\u62c9\u56de\u8def\nvoid dfs(int x){\n    for(int i=head[x];i;i=head[x]){//\u6ce8\u610f\u662fi=head[x]\uff0c\u4e0d\u7136\u53ef\u4ee5\u88ab\u5361\u6210O(m^2)\n        head[x]=i;\n        if(vis[e[i].id])continue;\n        vis[e[i].id]=1;\n        dfs(e[i].to);\n        res[++top]=e[i].id;\n    }\n}\nvoid output(int ans){\n    build(ans);\n    Flow.dinic(S,T);\n    for(int i=1;i<=m;++i){\n        if(w1[i]<=ans&&w2[i]<=ans){\n            if(Flow.e[id[i]].w==0)add(v[i],u[i],i);\n            else add(u[i],v[i],i);\n        }else\n        if(w1[i]<=ans)add(u[i],v[i],i);\n        else if(w2[i]<=ans)add(v[i],u[i],i);\n    }\n    dfs(1);\n    for(int i=top;i>=1;--i)\n        printf(\"%d \",res[i]);\n    puts(\"\");\n}\nbool ok[N],tot;\nint main(){\n    n=read();m=read();cnt=n;\n    int l=1001,r=0,mid,ans=1001;\n    for(int i=1;i<=n;++i)fa[i]=i;\n    for(int i=1;i<=m;++i){\n        u[i]=read(),v[i]=read(),w1[i]=read(),w2[i]=read();\n        ok[u[i]]=1;ok[v[i]]=1;\n        Merge(u[i],v[i]);\n        if(w1[i]>w2[i]){\n            swap(u[i],v[i]);\n            swap(w1[i],w2[i]);\n        }\n        l=min(w1[i],l);r=max(w2[i],r);//\u9632\u6b62\u6709\u8fb9\u672a\u88ab\u52a0\u5165 \n    }\n    for(int i=1;i<=n;++i)\n    \tif(!ok[i])++tot;\n    if(cnt!=1&&cnt-tot!=1){//\u4e0d\u8fde\u901a && \u6392\u9664\u5b64\u7acb\u70b9 \n        puts(\"NIE\");\n        return 0;\n    }\n    while(l<=r){//\u4e8c\u5206 \n        mid=l+r>>1;\n        if(check(mid))\n            r=mid-1,ans=mid;\n        else l=mid+1;\n    }\n    if(ans==1001){//\u65e0\u89e3 \n        puts(\"NIE\");\n        return 0;\n    }\n    printf(\"%d\\n\",ans);\n    output(ans);//\u8f93\u51fa\u65b9\u6848 \n    return 0;\n}\n```",
        "postTime": 1597747364,
        "uid": 42714,
        "name": "momentous",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3511 \u3010[POI2010]MOS-Bridges\u3011"
    },
    {
        "content": "## \\# \u89e3\u6790\n\u6700\u5c0f\u5316\u6700\u5927\u6743\uff0c\u53ef\u4ee5\u60f3\u5230\u4e8c\u5206\u3002\n\n\u4e8c\u5206\u5f97\u5230\u9650\u5236\u201c\u82b1\u8d39\u4e0d\u8d85\u8fc7 $c$\u201d\uff0c\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e9b\u8fb9\u7684\u67d0\u4e00\u4e2a\u65b9\u5411\u88ab\u7981\u4e86\uff0c\u53d8\u6210\u4e86**\u6709\u5411\u8fb9**\uff1b\u53e6\u4e00\u4e9b\u8fb9\u4e24\u4e2a\u65b9\u5411\u90fd\u53ef\u4ee5\u8d70\uff0c\u662f**\u65e0\u5411\u8fb9**\uff08\u4e24\u4e2a\u65b9\u5411\u90fd\u88ab\u7981\u4e86\u663e\u7136\u4e0d\u5408\u6cd5\uff09\u3002\n\n\u5224\u65ad\u4e8c\u5206\u51fa\u7684\u7b54\u6848\u662f\u5426\u53ef\u884c\uff0c\u5c31\u662f\u5224\u65ad\u8fd9\u4e2a\u65e2\u6709\u65e0\u5411\u8fb9\u53c8\u6709\u6709\u5411\u8fb9\u7684\u56fe\u6709\u6ca1\u6709\u6b27\u62c9\u56de\u8def\u3002\n\n\u65e0\u5411\u56fe\u7684\u6b27\u62c9\u56de\u8def\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6709\u5411\u56fe\u7684\u6b27\u62c9\u56de\u8def\uff0c\u5373\u7ed9\u6bcf\u6761\u8fb9\u6307\u5b9a\u4e00\u4e2a\u65b9\u5411\uff1b\u53ea\u8981**\u5b58\u5728\u4e00\u79cd\u6307\u5b9a\u65b9\u5411\u7684\u65b9\u6848**\uff0c\u4f7f\u5f97\u5f97\u5230\u7684\u6709\u5411\u56fe\u6709\u6b27\u62c9\u56de\u8def\uff0c\u5c31\u8bf4\u660e\u539f\u65e0\u5411\u56fe\u6709\u6b27\u62c9\u56de\u8def\u3002\n\n\u540c\u6837\u8fd9\u9053\u9898\uff0c\u53ef\u4ee5\u5224\u65ad\u201c\u662f\u5426\u5b58\u5728\u4e00\u79cd\u7ed9\u65e0\u5411\u8fb9\u6307\u5b9a\u65b9\u5411\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u65b0\u56fe\u6709\u6b27\u62c9\u56de\u8def\u201d\u3002\u6709\u5411\u56fe\u6709\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\uff1a\n\n- \u5f31\u8fde\u901a\uff1a\u53ea\u8981\u4fdd\u8bc1\u4e8c\u5206\u51fa\u7684\u503c\u4e0d\u4f1a\u4f7f\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u65b9\u5411\u90fd\u4e0d\u80fd\u901a\u884c\u5373\u53ef\uff1b\n- \u6bcf\u4e2a\u70b9\uff0c**\u5165\u5ea6\u7b49\u4e8e\u51fa\u5ea6\u7b49\u4e8e\u5ea6\u6570\u7684\u4e00\u534a**\u3002\n\n\u7531\u4e8e\u4e00\u4e2a\u70b9\u5165\u5ea6\u4e0e\u51fa\u5ea6\u7684\u548c\u4e00\u5b9a\uff0c\u53ea\u9700\u8981\u8003\u8651\u51fa\u5ea6\u4e3a\u5176\u5ea6\u6570\u7684\u4e00\u534a\u3002\n\n- \u6709\u5411\u8fb9 $u\\to v$ \u53ea\u80fd\u56fa\u5b9a\u7ed9 $u$ \u63d0\u4f9b\u4e00\u4e2a\u51fa\u5ea6\uff1b\n- \u65e0\u5411\u8fb9 $(u,v)$ \u8981\u4e48\u7ed9 $u$ \u63d0\u4f9b\u51fa\u5ea6\u8981\u4e48\u7ed9 $v$ \u63d0\u4f9b\u51fa\u5ea6\u3002\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u6765\u89e3\u51b3\uff0c\u5177\u4f53\u6765\u8bf4\uff1a\n\n- \u539f\u56fe\u7684\u8fb9 $i$ \u5efa\u70b9 $e_i$\uff0c\u539f\u56fe\u7684\u70b9 $u$ \u5efa\u70b9 $p_u$\uff1b\n- \u6e90\u70b9\u5411 $e_i$ \u8fde\u5bb9\u91cf $1$ \u7684\u8fb9\uff0c\u8868\u793a\u4e00\u6761\u8fb9\u53ea\u80fd\u63d0\u4f9b $1$ \u4e2a\u51fa\u5ea6\uff1b\n- $p_i$ \u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a $\\frac{degree(i)}{2}$ \u7684\u8fb9\uff0c\u8868\u793a\u8be5\u70b9\u9700\u8981\u8fd9\u4e48\u591a\u51fa\u5ea6\uff1b\n- \u82e5 $i$ \u8fb9\u6709\u5411\uff0c\u5219 $e_i$ \u5411\u5176\u8d77\u59cb\u7aef\u70b9 $j$ \u5bf9\u5e94\u7684 $p_j$ \u8fde\u5bb9\u91cf $1$ \u7684\u8fb9\uff1b\u82e5\u65e0\u5411\u5219\u5411\u5176\u4e24\u7aef\u70b9\u5206\u522b\u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff1b\u8868\u793a\u8fd9\u6761\u8fb9\u80fd\u7ed9\u54ea\u4e9b\u70b9\u63d0\u4f9b\u51fa\u5ea6\u3002\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u6bcf\u6761\u8fb9\u90fd\u8981\u63d0\u4f9b\u5ea6\u6570\u2014\u2014\u5224\u65ad\u6700\u5927\u6d41\u662f\u5426\u4e3a $m$\uff0c\u518d\u770b\u6b8b\u4f59\u7f51\u7edc\u4e0a\u54ea\u4e9b $e_i\\to p_j$ \u6d41\u8fc7\u4e86\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u8fb9 $i$ \u7684\u6307\u5411\u3002\u6700\u540e DFS \u6c42\u51fa\u6709\u5411\u56fe\u6b27\u62c9\u56de\u8def\u7684\u65b9\u6848\u5373\u53ef\u3002\n\n---\n## \\# \u6e90\u4ee3\u7801\n```cpp\n/*Lucky_Glass*/\n#include<queue>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\ntypedef pair<int,int> pii;\nconst int N=1e3+10,M=2e3+10,INF=0x3f3f3f3f;\nconst int NP=N+M,NE=3*M+N;\n#define ci const int &\ninline int Read(int &r){\n\tint b=1,c=getchar();r=0;\n\twhile(c<'0' || '9'<c) b=c=='-'? -1:b,c=getchar();\n\twhile('0'<=c && c<='9') r=(r<<1)+(r<<3)+(c^'0'),c=getchar();\n\treturn r*=b;\n}\n\nstruct EDGE{\n\tint u,v,tov,tou;\n\tvoid Input(){Read(u),Read(v),Read(tov),Read(tou);}\n}edg[M];\nstruct FLOWGRAPH{\n\tint head[NP],to[NE<<1],nxt[NE<<1],cap[NE<<1],ncnt;\n\tvoid Init(ci n){\n\t\tfor(int i=0;i<=n;i++) head[i]=0;\n\t\tncnt=1;\n\t}\n\tvoid AddEdge(ci u,ci v,ci ca){\n\t\tint p=++ncnt,q=++ncnt;\n\t\tto[p]=v,nxt[p]=head[u],head[u]=p,cap[p]=ca;\n\t\tto[q]=u,nxt[q]=head[v],head[v]=q,cap[q]=0;\n\t}\n\tinline int operator [](ci u){return head[u];}\n}Fl;\nstruct GRAPH{\n\tint head[N],to[M],nxt[M],id[M],ncnt;\n\tvoid AddEdge(ci u,ci v,ci i){\n\t\tint p=++ncnt;\n\t\tto[p]=v,nxt[p]=head[u],head[u]=p;\n\t\tid[p]=i;\n\t}\n\tinline int& operator [](ci u){return head[u];}\n}Gr;\nstruct QUEUE{\n\tint ary[NP],ql,qr;\n\tinline void clear(){ql=1,qr=0;}\n\tinline void push(ci x){ary[++qr]=x;}\n\tinline void pop(){ql++;}\n\tinline bool empty(){return ql>qr;}\n\tinline int front(){return ary[ql];}\n}que;\n\nint n,m,S,T,nans,deg[N],head[NP],dis[NP],tp[N],ans[M];\n\nint Aug(ci u,ci in){\n\tif(u==T) return in;\n\tint out=0;\n\tfor(int &it=head[u];it;it=Fl.nxt[it]){\n\t\tint v=Fl.to[it];\n\t\tif(Fl.cap[it]<=0 || dis[v]!=dis[u]+1) continue;\n\t\tint tov=Aug(v,min(in-out,Fl.cap[it]));\n\t\tFl.cap[it]-=tov,Fl.cap[it^1]+=tov;\n\t\tout+=tov;\n\t\tif(out==in) break;\n\t}\n\treturn out;\n}\nbool BFS(){\n\tfor(int i=1;i<=T;i++) head[i]=Fl[i],dis[i]=-1;\n\tque.clear();\n\tdis[S]=0,que.push(S);\n\twhile(!que.empty()){\n\t\tint u=que.front();que.pop();\n\t\tfor(int it=head[u];it;it=Fl.nxt[it]){\n\t\t\tint v=Fl.to[it];\n\t\t\tif((~dis[v]) || Fl.cap[it]<=0) continue;\n\t\t\tdis[v]=dis[u]+1;\n\t\t\tif(v==T) return true;\n\t\t\tque.push(v);\n\t\t}\n\t}\n\treturn false;\n}\nbool Check(ci mid){\n\tFl.Init(T);\n\tint ept=0;\n\tfor(int i=1;i<=n;i++)\n\t\tFl.AddEdge(i,T,deg[i]/2),ept+=deg[i]/2;\n\tfor(int i=1;i<=m;i++){\n\t\tFl.AddEdge(S,n+i,1);\n\t\tif(edg[i].tov<=mid) Fl.AddEdge(n+i,edg[i].v,1);\n\t\tif(edg[i].tou<=mid) Fl.AddEdge(n+i,edg[i].u,1);\n\t}\n\tint out=0;\n\twhile(BFS())\n\t\tout+=Aug(S,INF);\n\treturn out==ept;\n}\nvoid DFS(ci u,ci las){\n\twhile(Gr[u]){\n\t\tint it=Gr[u];Gr[u]=Gr.nxt[it];\n\t\tint v=Gr.to[it];\n\t\tDFS(v,Gr.id[it]);\n\t}\n\tif(las) ans[++nans]=las;\n}\nint main(){\n\t// freopen(\"input.in\",\"r\",stdin);\n\tint lef=0,rig=0;\n\tRead(n),Read(m),S=n+m+1,T=S+1;\n\tfor(int i=1;i<=m;i++){\n\t\tedg[i].Input();\n\t\trig=max(rig,max(edg[i].tou,edg[i].tov));\n\t\tlef=max(lef,min(edg[i].tou,edg[i].tov));\n\t\tdeg[edg[i].u]++,deg[edg[i].v]++;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(deg[i]&1){\n\t\t\tprintf(\"NIE\\n\");\n\t\t\treturn 0;\n\t\t}\n\twhile(lef+1<rig){\n\t\tint mid=(lef+rig)>>1;\n\t\tif(Check(mid)) rig=mid;\n\t\telse lef=mid;\n\t}\n\tint ans;\n\tif(!Check(lef)) ans=rig,Check(rig);\n\telse ans=lef;\n\tprintf(\"%d\\n\",ans);\n\tfor(int i=1;i<=m;i++)\n\t\tfor(int it=Fl[i+n];it;it=Fl.nxt[it]){\n\t\t\tif((it&1) || Fl.cap[it]>0) continue;\n\t\t\tint v=Fl.to[it];\n\t\t\tif(v==edg[i].v) Gr.AddEdge(edg[i].u,edg[i].v,i);\n\t\t\telse Gr.AddEdge(edg[i].v,edg[i].u,i);\n\t\t}\n\tDFS(1,0);\n\tfor(int i=m;i>=1;i--) printf(\"%d%c\",::ans[i],i==1? '\\n':' ');\n\treturn 0;\n}\n```\n\n---\n## THE END\n### Thanks for reading!\n",
        "postTime": 1606353740,
        "uid": 41243,
        "name": "Lucky_Glass",
        "ccfLevel": 9,
        "title": "MOS-Bridges\u89e3\u6790"
    },
    {
        "content": "## \u9898\u610f\u7ffb\u8bd1\n\n\u6709\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\u3002\n\n\u6bcf\u6761\u8fb9\u4ece\u4e24\u4e2a\u65b9\u5411\u8d70\u7684\u6743\u503c\u53ef\u80fd\u4e0d\u4e00\u6837\u3002\n\n\u5728\u8fd9\u5f20\u56fe\u4e0a\u627e\u5230\u4e00\u6761\u6700\u5927\u8fb9\u6743\u6700\u5c0f\u7684\u6b27\u62c9\u56de\u8def\u3002\n\n\u5982\u679c\u627e\u5230\u4e86\uff0c\u6309\u987a\u5e8f\u8f93\u51fa\u8fd9\u6761\u6b27\u62c9\u56de\u8def\u7684\u8fb9\u7684\u7f16\u53f7\uff0c\u4e0d\u7ba1\u65b9\u5411\u3002\n\n$n \\leq 1000; m \\leq 2000$\u3002\n\n## \u5982\u4f55\u89e3\u51b3\u5b83\uff1f\n\n### \u7b2c\u4e00\u90e8\u5206\n\n\u201c\u6700\u5927\u8fb9\u6743\u6700\u5c0f\u201d\uff0c\u5148\u5355\u8d70\u4e00\u4e2a\u4e8c\u5206\u3002\n\n\u7136\u540e\u2026\u2026\u600e\u4e48\u641e\u5462\uff1f\n\n\u8bbe\u5f53\u524d\u6211\u4eec\u53ea\u4fdd\u7559\u6743\u503c\u5c0f\u4e8e\u67d0\u4e2a\u6570\u7684\u8fb9\u3002\n\n\u5ffd\u7565\u4e0d\u5408\u6cd5\u7684\u8fb9\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u5728\u8fd9\u4e2a\u56fe\u91cc\u9762\uff0c\u6709\u4e00\u4e9b\u53cc\u5411\u8fb9\uff0c\u8fd8\u6709\u4e00\u4e9b\u5355\u5411\u8fb9\u3002\n\n\u8fd9\u5f20\u56fe\u5c31\u53d8\u6210\u4e86\u6df7\u5408\u56fe\u3002\n\n\u770b\u8d77\u6765\uff0c\u95ee\u9898\u53d8\u5f97\u66f4\u590d\u6742\u4e86\u2026\u2026\uff1f\n\n\u4e0d\u8fc7\uff0c\u6211\u4eec\u73b0\u5728\u53ea\u8981\u5224\u65ad\uff0c\u80fd\u5426\u5728\u628a\u53cc\u5411\u8fb9\u5b9a\u5411\u4e4b\u540e\uff0c\u56fe\u4e0a\u6709\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\u3002\n\n\u8fd8\u8bb0\u5f97\u600e\u4e48\u5224\u65ad\u6b27\u62c9\u56de\u8def\u5417\uff1f\n\n> \u8fd9\u5f20\u56fe\u8fde\u901a\uff0c\u5e76\u4e14\u6ca1\u6709\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u4e0d\u540c\u3002\n\n\u73b0\u5728\uff0c\u5b83\u662f\u6211\u4eec\u7684\u6709\u529b\u6b66\u5668\u3002\n\n\u73b0\u5728\u6211\u4eec\u5148\u628a\u56fe\u4e0a\u7684\u53cc\u5411\u8fb9\u968f\u4fbf\u94a6\u5b9a\u4e00\u4e2a\u65b9\u5411\u3002\n\n\u7136\u540e\uff0c\u8bbe\u70b9 $i$ \u7684\u5165\u5ea6\u4e3a $F_i$\uff0c\u51fa\u5ea6\u4e3a $L_i$\u3002\n\n\u6700\u7ec8\u6211\u4eec\u662f\u60f3\u628a\u67d0\u4e9b\u53cc\u5411\u8fb9\u7684\u65b9\u5411\u626d\u8f6c\u56de\u6765\uff0c\u8ba9\u6240\u6709\u70b9 $i$ \u6ee1\u8db3 $F_i = L_i$\u3002\n\n\u9996\u5148\u8981\u610f\u8bc6\u5230\u4e00\u70b9\u2014\u2014$F_i$ \u548c $L_i$ \u7684\u5947\u5076\u6027\u8981\u76f8\u540c\u3002\n\n\u6539\u53d8\u4e00\u6761\u8fb9\u7684\u65b9\u5411\uff0c\u65e0\u975e\u4f1a\u9020\u6210 2 \u79cd\u540e\u679c\uff1a$F_i \\leftarrow F_i + 1, L_i \\leftarrow L_i - 1$\uff0c\u6216\u8005\u662f $F_i \\leftarrow F_i - 1, L_i \\leftarrow L_i + 1$\u3002\n\n\u660e\u663e\u7684\uff0c\u5982\u679c $F_i$ \u548c $L_i$ \u7684\u5947\u5076\u6027\u4e0d\u76f8\u540c\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u518d\u4e5f\u6ca1\u6709\u673a\u4f1a\u76f8\u7b49\u4e86\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5728\u94a6\u5b9a\u4e00\u6761\u8fb9 $(a,b)$ \u7684\u65b9\u5411\u7684\u65f6\u5019\uff0c\u662f\u94a6\u5b9a\u4ece $a$ \u5230 $b$ \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u66f4\u6539\u5b83\u7684\u65b9\u5411\uff08\u53d8\u6210\u4ece $b$ \u5230 $a$ \u7684\uff09\uff0c\u4f1a\u9020\u6210\uff1a\n\n$$\nF_a \\leftarrow F_a + 1;\nL_a \\leftarrow L_a - 1;\nF_b \\leftarrow F_b - 1;\nL_b \\leftarrow L_b + 1\n$$\n\n\u6240\u4ee5\uff0c\u8fd9\u600e\u4e48\u641e\uff1f\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u95ee\u9898\u4ea4\u7ed9\u7f51\u7edc\u6d41\u5904\u7406\u3002\n\n\u8bbe $D_i = \\frac{F_i - L_i}{2}$\uff08$F_i - L_i$ \u4e00\u5b9a\u80fd\u88ab $2$ \u6574\u9664\uff09\u3002\n\n\u7136\u540e\u4e0a\u9762\u7684\u90a3\u4e00\u5768\u53ef\u4ee5\u91cd\u5199\u4e3a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u53cc\u5411\u8fb9 $(a,b)$\uff0c\u53cd\u8f6c\u5b83\u4e4b\u540e\u53ef\u4ee5\u9020\u6210\n\n$$\nD_a \\leftarrow D_a + 1;\nD_b \\leftarrow D_b - 1\n$$\n\n\u5e76\u4e14\u6211\u4eec\u5e0c\u671b\u4e00\u901a\u64cd\u4f5c\u540e\u6240\u6709\u7684 $D_i$ \u90fd\u4e3a $0$\u3002\n\n\u5f00\u59cb\u6109\u60a6\u5730\u5efa\u56fe\u3002\u6e90\u70b9\u662f $S$\uff0c\u6c47\u70b9\u662f $T$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u53cc\u5411\u8fb9 $(a,b)$\uff08\u521d\u59cb\u65b9\u5411\u4e3a\u4ece $a$ \u5230 $b$\uff09\uff0c\u8fde\u8fb9 $(b,a,\\mathrm{value} = 1)$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u5982\u679c $D_i > 0$\uff0c\u90a3\u4e48\u8fde\u8fb9 $(S,i,\\mathrm{value} = D_i)$\u3002\u5426\u5219\u5982\u679c $D_i < 0$\uff0c\u90a3\u4e48\u8fde\u8fb9 $(i,T,\\mathrm{value} = -D_i)$\u3002\n\n\u5355\u8d70\u4e00\u4e2a isap\uff0c\u7136\u540e\u6839\u636e\u6b8b\u4f59\u7f51\u7edc\u4e2d\u7684\u6d41\u91cf\u5c31\u53ef\u4ee5\u5224\u65ad\u67d0\u6761\u8fb9\u662f\u5426\u88ab\u53cd\u5411\u4e86\u3002\n\n### \u7b2c\u4e8c\u4e2a\u90e8\u5206\n\n\u8f93\u51fa\u65b9\u6848\u3002\n\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5f97\u5230\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5982\u4f55\u627e\u5230\u5b83\u7684\u6b27\u62c9\u56de\u8def\u5462\uff1f\n\n\u76f4\u63a5 DFS\uff0c\u4f1a\u8d85\u65f6\uff0c\u600e\u4e48\u529e\uff1f\n\n~~\u51fa\u9898\u4eba\u5e94\u8be5\u6ca1\u6709\u6bd2\u5230\u5361\u6b27\u62c9\u56de\u8def\u7684\u6c42\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u968f\u673a\u6253\u4e71\u8fb9\u518d DFS \u5c31\u5b8c\u4e8b\u4e86\uff01!1~~\n\n\u7528 [UOJ #117](http://uoj.ac/problem/117) \u91cc\u9762\u7684\u968f\u4fbf\u4e00\u79cd\u7b97\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long lint;\ntypedef long double louble;\n\ntemplate<typename T1, typename T2> inline T1 max(T1 a, T2 b)\n{\n\treturn a < b ? b : a;\n}\ntemplate<typename T1, typename T2> inline T1 min(T1 a, T2 b)\n{\n\treturn a < b ? a : b;\n}\n\nconst char lf = '\\n';\n\nnamespace ae86\n{\n\tconst int bufl = 1 << 15;\n\n\tchar buf[bufl], *s = buf, *t = buf;\n\n\tinline int fetch()\n\t{\n\t\tif (s == t)\n\t\t{\n\t\t\tt = (s = buf) + fread(buf, 1, bufl, stdin);\n\t\t\tif (s == t)return EOF;\n\t\t}\n\t\treturn *s++;\n\t}\n\n\tinline int ty()\n\t{\n\t\tint a = 0, b = 1, c = fetch();\n\t\twhile (!isdigit(c))b ^= c == '-', c = fetch();\n\t\twhile (isdigit(c))a = a * 10 + c - 48, c = fetch();\n\t\treturn b ? a : -a;\n\t}\n}\nusing ae86::ty;\n\nconst int _ = 1007, __ = 20007, inf = 0x3f3f3f3f;\n\nstruct cxk\n{\n\tint a, b, p, q;\n\tcxk(int _a = 0, int _b = 0, int _p = 0, int _q = 0)\n\t{\n\t\ta = _a, b = _b, p = _p, q = _q;\n\t}\n};\n\nstruct netflow\n{\n\tstatic const int _n = _ + _, _e = 9999999;\n\n\tint to[_e], ne[_e], ev[_e], he[_n], ecnt;\n\n\tinline void adde(int a, int b, int c)\n\t{\n\t\tto[++ecnt] = b, ev[ecnt] = c, ne[ecnt] = he[a], he[a] = ecnt;\n\t}\n\tinline void addde(int a, int b, int c)\n\t{\n\t\tadde(a, b, c), adde(b, a, 0);\n\t}\n\n\tint S, T, dis[_n], gap[_n], dcnt;\n\n\tint dfs(int x, int f)\n\t{\n\t\tif (x == T || !f)return f;\n\t\tint r = f, mid = dcnt - 1;\n\t\tfor (int i = he[x]; i; i = ne[i])\n\t\t{\n\t\t\tif (!ev[i])continue;\n\t\t\tint b = to[i];\n\t\t\tif (dis[b] == dis[x] - 1)\n\t\t\t{\n\t\t\t\tint g = dfs(b, min(r, ev[i]));\n\t\t\t\tr -= g, ev[i] -= g, ev[i ^ 1] += g;\n\t\t\t\tif (dis[S] >= dcnt)return f - r;\n\t\t\t\tif (!r)break;\n\t\t\t}\n\t\t\tmid = min(mid, dis[b]);\n\t\t}\n\t\tif (f == r)\n\t\t{\n\t\t\tif (--gap[dis[x]] == 0)dis[S] = dcnt;\n\t\t\tgap[dis[x] = mid + 1]++;\n\t\t}\n\t\treturn f - r;\n\t}\n\n\tint run(int s, int t)\n\t{\n\t\tS = s, T = t;\n\t\tint ans = 0;\n\t\tmemset(dis, 0, sizeof(dis)), memset(gap, 0, sizeof(gap)), gap[0] = dcnt;\n\t\twhile (dis[S] < dcnt)ans += dfs(S, inf);\n\t\treturn ans;\n\t}\n\n\tvoid cls()\n\t{\n\t\tmemset(he, 0, sizeof(he)), ecnt = 1;\n\t\tdcnt = 0;\n\t}\n\n} f;\n\nint n, m, din[_], dout[_];\ncxk dlq[__];\n\nint able(int lim)\n{\n\tf.cls(), memset(din, 0, sizeof(din)), memset(dout, 0, sizeof(dout));\n\tf.dcnt = n;\n\tint s = ++f.dcnt, t = ++f.dcnt;\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tint a = dlq[i].a, b = dlq[i].b, p = dlq[i].p, q = dlq[i].q;\n\t\tif (max(p, q) <= lim)dout[a]++, din[b]++, f.addde(b, a, 1);\n\t\telse if (p <= lim)dout[a]++, din[b]++;\n\t\telse if (q <= lim)dout[b]++, din[a]++;\n\t}\n\n\tint tar = 0;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tint dis = abs(din[i] - dout[i]);\n\t\tif (dis & 1)return 0;\n\t\tdis >>= 1;\n\t\tif (din[i] > dout[i])f.addde(s, i, dis), tar += dis;\n\t\tif (din[i] < dout[i])f.addde(i, t, dis);\n\t}\n\n\treturn f.run(s, t) == tar;\n}\n\nnamespace facker\n{\n\tvector<pair<int, int>> e[_];\n\tinline void adde(int a, int b, int c)\n\t{\n\t\te[a].emplace_back(b, c);\n\t}\n\n\tint ed[__] = {0}, stk[__] = {0}, top = 0;\n\n\tvoid dfs(int x)\n\t{\n\t\tfor (auto i : e[x])\n\t\t{\n\t\t\tint a = i.first, b = i.second;\n\t\t\tif (ed[b])continue;\n\t\t\ted[b] = 1, stk[++top] = b;\n\t\t\tif (a == 1 && top == m)\n\t\t\t{\n\t\t\t\tfor (int j = 1; j <= m; j++)cout << stk[j] << \" \\n\"[j == m];\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\tdfs(a), ed[b] = 0, top--;\n\t\t}\n\t}\n\n\tvoid facker(int ans)\n\t{\n\t\tassert(able(ans));\n\n\t\tfor (int i = 1, rk = 2; i <= m; i++)\n\t\t{\n\t\t\tint a = dlq[i].a, b = dlq[i].b, p = dlq[i].p, q = dlq[i].q;\n\t\t\tif (max(p, q) <= ans)\n\t\t\t{\n\t\t\t\tif (!f.ev[rk])adde(b, a, i);\n\t\t\t\telse adde(a, b, i);\n\t\t\t\trk += 2;\n\t\t\t}\n\t\t\telse if (p <= ans)adde(a, b, i);\n\t\t\telse if (q <= ans)adde(b, a, i);\n\t\t}\n\n\t\tfor (int i = 1; i <= n; i++)random_shuffle(e[i].begin(), e[i].end());\n\n\t\treturn dfs(1);\n\t}\n}\n\nint main()\n{\n\tios::sync_with_stdio(0), cout.tie(nullptr);\n\n\trandom_device rd;\n\tsrand(rd());\n\n\tfreopen(\"i.in\", \"r\", stdin);\n\n\tint l = 1000, r = 0;\n\n\tn = ty(), m = ty();\n\tfor (int i = 1, a, b, c, d; i <= m; i++)\n\t\ta = ty(), b = ty(), c = ty(), d = ty(), dlq[i] = cxk(a, b, c, d), l = min(l, min(c, d)), r = max(r, max(c, d));\n\n\tint ans = 1001;\n\twhile (r >= l)\n\t{\n\t\tint mid = (l + r) >> 1;\n\t\tif (able(mid))ans = mid, r = mid - 1;\n\t\telse l = mid + 1;\n\t}\n\tif (ans > 1000)cout << \"NIE\" << lf;\n\telse cout << ans << lf, facker::facker(ans);\n\n\treturn 0;\n}\n```\n\n\u4ee3\u7801\u91cc\u548c\u8c10\u4e86\u4e00\u4e9b\u4e0d\u597d\u7684\u8bcd\u8bed\u3002\n\n",
        "postTime": 1578838253,
        "uid": 44176,
        "name": "iotang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3511 \u3010[POI2010]MOS-Bridges\u3011"
    },
    {
        "content": "> \u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u8fb9\u6709\u6743\u503c\u4e14\u6b63\u7740\u8d70\u548c\u9006\u7740\u8d70\u6709\u4e0d\u540c\u6743\u503c\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u6c42\u4e00\u6761\u6700\u5927\u8fb9\u6743\u6700\u5c0f\u7684\u6b27\u62c9\u56de\u8def\uff0c\u4ece\u70b9 $1$ \u51fa\u53d1\uff0c\u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002$n\\le10^3,m\\le2\\times10^4$.\n\n\u4e00\u773c\u4e8c\u5206\u3002\u8003\u8651\u9650\u5b9a\u8fb9\u6743\u4e0d\u8d85\u8fc7 $mid$\uff0c\u5219\u539f\u56fe\u53d8\u4e3a\u542b\u6709\u6709\u5411\u8fb9\u548c\u65e0\u5411\u8fb9\u3002\u6ce8\u610f\u8fd9\u91cc\u4e8c\u5206\u7684\u4e0b\u754c\u663e\u7136\u4e3a $\\max_{i\\in E}\\{\\min(w_{i,0},w_{i,1})\\}$\uff0c\u4e5f\u5c31\u662f\u5fc5\u987b\u8ba9\u6bcf\u6761\u8fb9\u8d77\u7801\u6709\u4e00\u4e2a\u65b9\u5411\u53ef\u4ee5\u51fa\u73b0\u5728\u56fe\u4e2d\uff0c\u5426\u5219\u4e0d\u6ee1\u8db3\u6b27\u62c9\u56de\u8def\u7684\u5b9a\u4e49\u3002\n\n\u4f46\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\u65e0\u8bba\u65e0\u5411\u8fb9\u5982\u4f55\u8d70\uff0c\u4efb\u4f55\u70b9\u5165\u5ea6\u4e0e\u51fa\u5ea6\u7684\u548c\u4e0d\u53d8\uff0c\u8bb0\u4e3a $deg_i$\u3002\u5219 $mid$ \u53ef\u884c\u5f53\u4e14\u4ec5\u5f53 $\\forall i, in_i=out_i=\\dfrac{deg_i}{2}$\u3002\u82e5 $deg_i$ \u4e3a\u5947\u6570\uff0c\u663e\u7136\u4e0d\u5b58\u5728\u6b27\u62c9\u56de\u8def\u3002\n\n\u8003\u8651\u5efa\u7acb\u65b0\u56fe\uff1a\n\n1. \u989d\u5916\u5efa\u7acb\u6e90\u70b9\u3001\u6c47\u70b9 $S,T$\uff0c\u539f\u56fe\u7684\u8fb9 $i$ \u5bf9\u5e94\u65b0\u56fe\u7684\u70b9 $e_i$\uff0c\u539f\u56fe\u7684\u70b9\u5bf9\u5e94\u65b0\u56fe\u70b9 $p_i$\u3002\n\n1. \u5bf9\u6240\u6709\u539f\u56fe\u4e2d\u7684\u65e0\u5411\u8fb9 $e_i=(u,v)$\uff0c\u5728\u65b0\u56fe\u8fde\u6d41\u91cf\u4e3a $1$ \u7684\u4e09\u6761\u8fb9 $(S,e_i),(e_i,p_u),(e_i,p_v)$\u3002\n\n2. \u5bf9\u6240\u6709\u539f\u56fe\u4e2d\u7684\u6709\u5411\u8fb9 $(u,v)$\uff0c\u5728\u65b0\u56fe\u8fde\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9 $(T,e_i),(e_i,p_u)$\u3002\n\n3. \u5bf9\u6240\u6709\u539f\u56fe\u4e2d\u7684\u70b9 $u$\uff0c\u5728\u65b0\u56fe\u8fde\u6d41\u91cf\u4e3a $\\dfrac{deg_u}{2}$ \u7684\u8fb9 $(p_u,T)$\u3002\n\n\u8fd9\u76f8\u5f53\u4e8e\u7528\u5404\u8fb9\u53bb\u7ed9\u5404\u70b9**\u63d0\u4f9b\u51fa\u5ea6**\u3002\u90a3\u4e48\u663e\u7136\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53 4 \u4e2d\u6240\u6709\u8fb9\u5747\u6ee1\u6d41\uff0c\u5373\u53d6\u5230\u51fa\u5ea6\u7b49\u4e8e $\\dfrac{deg_u}{2}$\u3002\n\n\u8fd9\u6837\u5373\u53ef\u5224\u5b9a\u5165\u5ea6\u7b49\u4e8e\u51fa\u5ea6\u7684\u6761\u4ef6\u3002\u6839\u636e\u6bcf\u6761\u65e0\u5411\u8fb9\u5bf9\u5e94\u8fde\u5411\u4e24\u4e2a\u8282\u70b9\u7684\u54ea\u4e00\u6761\u6ee1\u6d41\uff0c\u5373\u53ef\u5f97\u77e5\u5176\u65b9\u5411\u5e76\u5efa\u51fa\u5bf9\u5e94\u7684\u6709\u5411\u56fe\u3002\u6839\u636e\u9898\u610f\uff0c\u8fd8\u9700\u68c0\u67e5 $1$ \u662f\u5426\u4f4d\u4e8e\u4e00\u4e2a\u5305\u542b\u56fe\u4e2d\u6240\u6709\u8fb9\u4e14\uff08\u5f31\uff09\u8fde\u901a\u7684\u8fde\u901a\u5757\u3002\n\n> \u7531\u4e8e\u6570\u636e\u7b49\u539f\u56e0\uff0c\u4e0a\u8ff0\u8fd9\u4e2a\u68c0\u67e5\u51e0\u4e4e\u6ca1\u6709\u5728\u9898\u89e3\u533a\u4e2d\u770b\u5230\uff0c\u7136\u800c\u8fd9\u662f\u5fc5\u8981\u7684\u3002\n\n\u6700\u540e\u5728\u6709\u5411\u56fe\u4e0a\u8dd1\u6b27\u62c9\u56de\u8def\u5373\u53ef\u3002\n\n\u601d\u8003\uff1a\u5047\u5982\u5c06\u9898\u4e2d\u201c\u6b27\u62c9\u56de\u8def\u201d\u6539\u4e3a\u201c\u6b27\u62c9\u8def\u5f84\u201d\uff0c\u5e94\u5982\u4f55\u89e3\u51b3\uff1f\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 2005, maxm = 80005;\nint s, t, n, m, tn, ans, hd[maxn], tot = 1;\nint deg[maxn], x[maxm], y[maxm], z[maxm], w[maxm], st[maxn], top;\nstruct Edg {\n\tint id, y, nxt;\n} e[maxm]; \ninline void add(int id, int x, int y) { e[++tot] = {id, y, hd[x]}, hd[x] = tot; }\nnamespace Flow {\nint hd[maxm], nxt[maxm], ver[maxm], val[maxm], d[maxm], tot = 1;\ninline void adf(int x, int y, int z) {\n    nxt[++tot] = hd[x], hd[x] = tot, ver[tot] = y, val[tot] = z;\n    nxt[++tot] = hd[y], hd[y] = tot, ver[tot] = x, val[tot] = 0;\n}\ninline void reset() {\n\ttot = 1;\n    memset(hd, 0, sizeof(hd));\n    memset(nxt, 0, sizeof(nxt));\n}\ninline bool bfs() {\n    queue<int> q;\n    memset(d, 0, sizeof(d));\n    q.push(s), d[s] = 1;\n    while (q.size()) {\n        int x = q.front();\n        q.pop();\n        for (int i = hd[x]; i; i = nxt[i]) {\n            if (val[i] && !d[ver[i]]) {\n                d[ver[i]] = d[x] + 1, q.push(ver[i]);\n                if (ver[i] == t) return 1;\n            }\n        }\n    }\n    return 0;\n}\nlong long dinic(int x, long long fl) {\n    if (x == t) return fl;\n    long long now = fl, k;\n    for (int i = hd[x]; i && now; i = nxt[i])\n        if (val[i] && d[ver[i]] == d[x] + 1) {\n            k = dinic(ver[i], min(now, 1ll * val[i]));\n            if (!k) d[ver[i]] = 0;\n            else val[i] -= k, val[i ^ 1] += k, now -= k;\n        }\n    return fl - now;\n}\ninline void init() {\n\tfor (int j = 1; j <= m; ++j) {\n\t\tint tmp = x[j] ^ y[j];\n    \tfor (int i = hd[n + j]; i; i = nxt[i])\n    \t\t// \u5224\u65ad\u8fb9\u7684\u65b9\u5411. \n    \t\tif (!val[i]) ::add(j, ver[i], tmp ^ ver[i]);\n\t}\n}\n};\n// \u6b27\u62c9\u56de\u8def \nbool b[maxm], c[maxn];\ninline void dfs(int x, int ed) {\n\tfor (int &i = hd[x]; i; i = e[i].nxt) {\n\t\tif (b[i]) continue;\n\t\tb[i] = 1, dfs(e[i].y, e[i].id);\n\t}\n\tif (ed) st[++top] = ed;\n}\nint l, r, mid;\nbool check(int mid) {\n\tusing namespace Flow;\n\treset();\n\ts = n + m + 1, t = s + 1, ans = 0;\n\tint ept = 0;\n\t// e_i = n + i\n\tfor (int i = 1; i <= n; ++i) adf(i, t, deg[i] / 2), ept += deg[i] / 2;\n\tfor (int i = 1; i <= m; ++i) {\n\t\tassert(z[i] <= mid);\n\t\tadf(s, n + i, 1), adf(n + i, x[i], 1);\n\t\tif (w[i] <= mid) adf(n + i, y[i], 1);\n\t}\n\tint tmp = 0;\n\twhile (bfs())\n\t\twhile (tmp = dinic(s, 0x3f3f3f3f)) ans += tmp;\n\tassert(ept == m);\n\treturn ans == m;\n}\nvoid get(int x) {\n\tc[x] = 1, --tn;\n\tfor (int i = hd[x]; i; i = e[i].nxt)\n\t\tif (!c[e[i].y]) get(e[i].y);\n}\nsigned main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d%d%d%d\", x + i, y + i, z + i, w + i);\n\t\tif (z[i] > w[i]) swap(x[i], y[i]), swap(z[i], w[i]);\n\t\tadd(i, x[i], y[i]), add(i, y[i], x[i]);\n\t\t++deg[x[i]], ++deg[y[i]], l = max(l, z[i]), r = max(r, w[i]);\n\t}\n\t// \u627e\u6709\u8fb9\u7684\u5b50\u56fe \n\ttn = 0;\n\tfor (int i = 1; i <= n; ++i) tn += !!deg[i];\n\t// 1. \u8be5\u5b50\u56fe\u5305\u542b 1 \u4e14\uff08\u5f31\uff09\u8fde\u901a \n\tget(1);\n\tif (tn) puts(\"NIE\"), exit(0);\n\t// 2. \u5ea6\u6570 \n\tfor (int i = 1; i <= n; ++i)\n\t\tif (deg[i] & 1) puts(\"NIE\"), exit(0);\n\t--l;\n\twhile (l + 1 < r) {\n\t\tmid = (l + r) >> 1;\n\t\tif (check(mid)) r = mid;\n\t\telse l = mid;\n\t}\n\tif (check(r)) printf(\"%d\\n\", r);\n\telse puts(\"NIE\"), exit(0);\n\ttot = 1, memset(hd, 0, sizeof(hd));\n\tFlow::init(), dfs(1, 0);\n\twhile (top) printf(\"%d \", st[top--]); \n\treturn 0;\n}\n```",
        "postTime": 1678363687,
        "uid": 62440,
        "name": "MuelsyseU",
        "ccfLevel": 0,
        "title": "P3511 [POI2010]MOS-Bridges \u9898\u89e3"
    },
    {
        "content": "- \u672c\u6765\u4ee5\u4e3a\u8f6c\u5316\u4e3a\u6b27\u62c9\u56de\u8def\u4e4b\u540e\u4f1a\u6709\u4e0d\u9519\u7684\u63a5\u8fd1\u7ebf\u6027\u7684\u505a\u6cd5\u7684\uff0c\u6ca1\u60f3\u5230\u6700\u540e\u5c45\u7136\u662f\u7f51\u7edc\u6d41\u3002\n- \u6b32\u54ed\u65e0\u6cea\uff0c~~\u6240\u4ee5\u662f\u4e0d\u662f\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u6c42\u89e3\u65e0\u5411\u56fe\u6b27\u62c9\u56de\u8def~~\u3002\n\n**[\u9898\u610f](https://www.luogu.com.cn/problem/P3511)**\n- \u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u8fb9\u6709\u6743\u503c\u4e14\u6b63\u7740\u8d70\u548c\u9006\u7740\u8d70\u6709\u4e0d\u540c\u6743\u503c\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u6c42\u4e00\u6761\u6700\u5927\u8fb9\u6743\u6700\u5c0f\u7684\u6b27\u62c9\u56de\u8def\uff0c\u4ece\u70b9 $1$ \u51fa\u53d1\uff0c\u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002\n\n**\u5206\u6790**\n- \u8003\u8651\u4e8c\u5206\u7b54\u6848\uff0c\u5c31\u53d8\u6210\u4e86\u6b27\u62c9\u56de\u8def\u95ee\u9898\uff0c\u4e0d\u8fc7\u6709\u7684\u8fb9\u662f\u6709\u5411\u8fb9\uff0c\u6709\u7684\u8fb9\u662f\u65e0\u5411\u8fb9\uff0c\u5f88\u5feb\u4f60\u5c31\u4f1a\u53d1\u73b0\uff0c\u9488\u5bf9\u5355\u72ec\u7684\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\u7684\u7b97\u6cd5\u5728\u8fd9\u91cc\u90fd\u65e0\u6cd5\u6d3e\u4e0a\u7528\u573a\u3002\n- \u6211\u4eec\u5c1d\u8bd5\u679a\u4e3e\u6bcf\u6761\u65e0\u5411\u8fb9\u7684\u65b9\u5411\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u662f\u6b27\u62c9\u56de\u8def\uff0c\u4f60\u53d1\u73b0\u6709\u5411\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5224\u5b9a\u5c45\u7136\u5341\u5206\u7b80\u6d01\uff1a\u5ffd\u7565\u8fb9\u65b9\u5411\u8fde\u901a\uff08\u5b8c\u5168\u53ef\u4ee5\u4e00\u5f00\u59cb\u5224\u5b9a\uff09\uff0c\u5165\u5ea6\u4e0e\u51fa\u5ea6\u76f8\u7b49\uff08\u8fd9\u592a\u6570\u503c\u5316\u4e86\uff09\u3002\n- \u7ecf\u8fc7\u4e00\u4e9b\u5947\u5999\u7684\u8111\u56de\u8def\u4e4b\u540e\u4f60\u5bb9\u6613\u60f3\u5230\u4e00\u4e2a\u7f51\u7edc\u6d41\u7684\u5224\u5b9a\u65b9\u6cd5\uff1a\u521d\u59cb\u65f6\u5148\u968f\u673a\u5b9a\u5411\uff0c\u5c06\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u4e0e\u51fa\u5ea6\u4e4b\u5dee\u8bbe\u4e3a\u70b9\u6743\uff08\u663e\u7136\uff0c\u70b9\u6743\u9996\u5148\u5fc5\u987b\u90fd\u662f\u5076\u6570\uff0c\u56e0\u4e3a\u5b9a\u5411\u4e0d\u4f1a\u6539\u53d8\u5947\u5076\u6027\uff0c\u8fd9\u70b9\u53ef\u4ee5\u5148\u7279\u5224\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c\u70b9\u6743\u7684\u610f\u4e49\u662f\u5408\u6cd5\u6d41\u6d41\u5165\u548c\u6d41\u51fa\u7684\u6d41\u91cf\u5dee\uff09\uff0c\u6b63\u6743\u70b9\u8fde\u8d85\u7ea7\u6e90\uff0c\u5bb9\u91cf\u4e3a\u6743\u503c\uff0c\u8d1f\u6743\u70b9\u8fde\u8d85\u7ea7\u6c47\uff0c\u5bb9\u91cf\u4e3a\u6743\u503c\u76f8\u53cd\u6570\uff0c\u7136\u540e\u6bcf\u6761\u65e0\u5411\u8fb9\u8fde\u5411\u539f\u65b9\u5411\u7684\u53cd\u65b9\u5411\uff0c\u6d41\u91cf\u4e3a $2$\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u3002\n- \u5982\u679c\u5b58\u5728\u5408\u6cd5\u65b9\u6848\u90a3\u4e48\u6700\u5927\u6d41\u4e00\u5b9a\u628a\u6e90\u70b9\u548c\u6c47\u70b9\u7684\u76f4\u8fde\u8fb9\u6ee1\u6d41\uff0c\u540c\u6837\uff0c\u7531\u4e8e\u589e\u5e7f\u8def\u7b49\u5e38\u89c1\u6700\u5927\u6d41\u7b97\u6cd5\u7684\u7279\u6027\uff0c\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u90fd\u662f\u5076\u6570\uff0c\u6545\u65b9\u6848\u4e00\u5b9a\u5408\u6cd5\uff0c[\u4ee3\u7801](https://www.luogu.com.cn/paste/dru08rou)\u3002",
        "postTime": 1663136525,
        "uid": 260884,
        "name": "WeLikeStudying",
        "ccfLevel": 0,
        "title": "\u3010\u7f51\u7edc\u6d41\u3011MOS-Bridges"
    },
    {
        "content": "> [P3511 [POI2010] MOS-Bridges](https://www.luogu.com.cn/problem/P3511)\n\n\u82e5\u5b58\u5728 $2\\nmid deg_i$ \u5219\u65e0\u89e3\u3002\n\n\u4e8c\u5206\u7b54\u6848\uff0c\u82e5\u5b58\u5728\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u65b9\u5411\u5747\u8d70\u4e0d\u4e86\uff0c\u5219\u5f53\u524d\u7b54\u6848\u65e0\u89e3\uff0c\u5426\u5219\u4e00\u4e9b\u8fb9\u7684\u65b9\u5411\u5df2\u7ecf\u786e\u5b9a\uff0c\u5176\u4f59\u8fb9\u6709\u4e24\u79cd\u65b9\u5411\u53ef\u9009\u62e9\u3002\n\n\u8003\u8651\u6709\u5411\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\uff0c\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u548c\u5165\u5ea6\u76f8\u7b49\uff0c\u636e\u6b64\u5df2\u7ecf\u53ef\u4ee5\u7b97\u51fa\u6bcf\u4e2a\u70b9\u6700\u7ec8\u7684\u51fa\u5ea6\u3002\u6ce8\u610f\u5230\u82e5 $(u, v)$ \u5b9a\u5411\u4e3a $u\\to v$ \u5219 $u$ \u7684\u51fa\u5ea6\u589e\u52a0 $1$\uff0c\u53cd\u4e4b $v$ \u7684\u51fa\u5ea6\u589e\u52a0 $1$\uff0c\u8fd9\u81ea\u7136\u5730\u7ed9\u4e88\u6211\u4eec\u7f51\u7edc\u6d41\u6a21\u578b\uff1a\u5c06\u6bcf\u6761\u8fb9\u62bd\u8c61\u6210\u70b9\uff0c$S\\to e$ \u5bb9\u91cf $1$\uff0c\u82e5 $l\\leq mid$ \u5219 $e\\to u$ \u5bb9\u91cf $1$\uff0c\u82e5 $p\\leq mid$ \u5219 $e\\to v$ \u5bb9\u91cf $1$\uff0c$i\\to T$ \u5bb9\u91cf $\\frac{deg_i} 2$\uff0c\u7528\u6700\u5927\u6d41\u68c0\u67e5\u662f\u5426\u5b58\u5728\u7ed9\u6240\u6709\u8fb9\u5b9a\u5411\u4e14\u6ee1\u8db3\u9650\u5236\u7684\u65b9\u6848\u3002\u82e5\u5b58\u5728\u5219\u5f53\u524d\u7b54\u6848\u6709\u89e3\uff0c\u5426\u5219\u65e0\u89e3\u3002\n\n\u6c42\u51fa\u6700\u7ec8\u7b54\u6848\u540e\u6839\u636e\u8fb9\u7684\u5b9a\u5411\u65b9\u6848\u8fd8\u539f\u6709\u5411\u56fe\uff0c\u8dd1\u6b27\u62c9\u56de\u8def\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(m\\sqrt m\\log V)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconstexpr int N = 2.1e4 + 5;\nconstexpr int M = 7e4 + 5;\nstruct flow {\n  int cnt = 1, hd[N], nxt[N << 1], to[N << 1], limit[N << 1];\n  void add(int u, int v, int w) {\n    nxt[++cnt] = hd[u], hd[u] = cnt, to[cnt] = v, limit[cnt] = w;\n    nxt[++cnt] = hd[v], hd[v] = cnt, to[cnt] = u, limit[cnt] = 0;\n  }\n  int T, cur[N], dis[N];\n  int dfs(int id, int res = 1e9) {\n    if(id == T) return res;\n    int flow = 0;\n    for(int i = cur[id]; i && res; i = nxt[i]) {\n      cur[id] = i;\n      int it = to[i], c = min(res, limit[i]);\n      if(dis[id] + 1 == dis[it] && c) {\n        int k = dfs(it, c);\n        flow += k, res -= k, limit[i] -= k, limit[i ^ 1] += k;\n      }\n    }\n    if(!flow) dis[id] = -1;\n    return flow;\n  }\n  int maxflow(int s, int t) {\n    int flow = 0;\n    T = t;\n    while(1) {\n      queue<int> q;\n      memset(dis, -1, sizeof(dis));\n      memcpy(cur, hd, sizeof(cur));\n      q.push(s), dis[s] = 0;\n      while(!q.empty()) {\n        int t = q.front();\n        q.pop();\n        for(int i = hd[t]; i; i = nxt[i])\n          if(dis[to[i]] == -1 && limit[i])\n            dis[to[i]] = dis[t] + 1, q.push(to[i]);\n      }\n      if(dis[t] == -1) return flow;\n      flow += dfs(s);\n    }\n  }\n} I, g;\nint n, m, t, top, stc[N], hd[N], deg[N];\nint x[N], y[N], c[N], d[N];\nvector<pair<int, int>> e[N];\nbool calc(int mid) {\n  g = I;\n  for(int i = 1; i <= m; i++)\n    if(c[i] > mid && d[i] > mid) return 0;\n    else {\n      if(c[i] <= mid) g.add(i + n, x[i], 1);\n      if(d[i] <= mid) g.add(i + n, y[i], 1);\n    }\n  return g.maxflow(0, t) == m;\n}\nvoid dfs(int id) {\n  for(int &i = hd[id]; i < e[id].size(); ) {\n    auto it = e[id][i++];\n    dfs(it.first), stc[++top] = it.second;\n  }\n}\nint main() {\n#ifdef ALEX_WEI\n  freopen(\"1.in\", \"r\", stdin);\n  freopen(\"1.out\", \"w\", stdout);\n#endif\n  cin >> n >> m, t = N - 1;\n  for(int i = 1; i <= m; i++) {\n    cin >> x[i] >> y[i] >> c[i] >> d[i];\n    deg[x[i]]++, deg[y[i]]++;\n    I.add(0, i + n, 1);\n  }\n  for(int i = 1; i <= n; i++)\n    if(deg[i] & 1) puts(\"NIE\"), exit(0);\n    else I.add(i, t, deg[i] >> 1);\n  int l = 1, r = 1e3;\n  while(l < r) {\n    int mid = l + r >> 1;\n    if(calc(mid)) r = mid;\n    else l = mid + 1;\n  }\n  cout << l << \"\\n\";\n  calc(l);\n  for(int i = 1; i <= m; i++)\n    for(int j = g.hd[i + n]; j; j = g.nxt[j]) {\n      int it = g.to[j];\n      if(it == x[i] && !g.limit[j]) e[x[i]].push_back({y[i], i});\n      if(it == y[i] && !g.limit[j]) e[y[i]].push_back({x[i], i});\n    }\n  dfs(1);\n  for(int i = top; i; i--) cout << stc[i] << \" \";\n  cout << \"\\n\";\n  return 0;\n}\n/*\n2022/6/16\nstart thinking at 19:50\n\u611f\u89c9\u50cf\u4e2a\u7f51\u7edc\u6d41\u554a\u8001\u54e5\u3002\n\u6ca1\u9519\uff0c\u5c31\u662f\u7f51\u7edc\u6d41\uff0c\u554a\u54c8\u54c8\u54c8\u3002\nstart coding at 20:08\nfinish debugging at 20:31\n*/\n```",
        "postTime": 1657671120,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P3511 [POI2010] MOS-Bridges"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3511)\u3002\n\n\u540c\u6b65\u53d1\u8868\u4e8e\u6211\u7684 [$\\texttt{cnblog}$](https://www.cnblogs.com/UperFicial/p/16175251.html)\u3002\n\n### $\\texttt{Description}$\n\n\u6bcf\u6761\u8fb9\u6b63\u5411\u548c\u53cd\u5411\u6709\u4e24\u4e2a\u6743\u503c\uff0c\u6c42\u6700\u5927\u8fb9\u6743\u5c3d\u91cf\u5c0f\u7684\u6b27\u62c9\u56de\u8def\u3002\n\n$1\\le n\\le 10^3$\uff0c$1\\le m\\le 2\\times 10^3$\u3002\n\n### $\\texttt{Solution}$\n\n[\u524d\u7f6e\u829d\u58eb](https://www.luogu.com.cn/problem/P7771)\u3002\n\n~~\u4e00\u9053\u9898\uff0c\u6ca1\u6709\u70df\uff0c\u4e00\u9053\u6bd2\u7624\u8c03\u4e00\u5929\u3002~~\n\n\u806a\u660e\u7684\u4f60\u5b66\u4f1a\u4e86\u524d\u7f6e\u829d\u58eb\uff0c\u77e5\u9053\u4e86\u65e0\u89e3\u7684\u4e00\u4e2a\u5145\u5206\u6761\u4ef6\u662f\uff0c\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u90fd\u4e3a\u5076\u6570\u3002\n\n\u770b\u5230\u6700\u5927\u8fb9\u6743\u5c3d\u91cf\u5c0f\uff0c\u6761\u4ef6\u53cd\u5c04\u51fa\u4e8c\u5206\u7b54\u6848\u3002\n\n\u6211\u4eec\u5c31\u4e0d\u59a8\u4e8c\u5206\u6700\u5927\u7684\u8fb9\u6743 $k$\uff0c\u90a3\u4e48\u539f\u56fe\u4e2d\u8fb9\u6743\u5927\u4e8e $k$ \u7684\u8fb9\u90fd\u4e0d\u7528\u7ba1\u3002\n\n\u770b\u5230 $n,m$ \u7a0d\u5927\uff0c\u8003\u8651\u6784\u5efa\u4e00\u4e2a\u4e8c\u5206\u56fe\uff1a\u5de6\u8fb9\u662f\u8fb9\uff0c\u53f3\u8fb9\u662f\u70b9\u3002\n\n\u6211\u4eec\u5bc4 $in_i$ \u8868\u793a $i$ \u70b9\u7684\u5165\u5ea6\uff0c\u663e\u7136 $in_i$ \u662f\u5076\u6570\u3002\n\n\u5219\u5230\u8fbe\u8fd9\u4e2a\u70b9\u8fb9\u7684\u6570\u91cf\u4e00\u5b9a\u7b49\u4e8e\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u7684\u8fb9\u7684\u6570\u91cf\u3002\n\n\u6240\u4ee5\u4ece $i$ \u70b9\u6d41\u51fa\u7684\u6d41\u91cf\uff0c\u5373\u6d41\u5411 $t$ \u7684\u6d41\u91cf\uff0c\u4e00\u5b9a\u662f $\\frac{in_i}{2}$\uff0c\u6709\u4e00\u534a\u662f\u6d41\u5165\u7684\u3002\n\n\u6839\u636e\u6b27\u62c9\u56de\u8def\u7684\u5b9a\u4e49\uff0c\u6bcf\u4e00\u6761\u8fb9\u53ea\u80fd\u5339\u914d\u4e00\u6b21\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a $s$ \u5411\u6bcf\u4e00\u6761\u8fb9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u3002\n\n\u8fb9\u548c\u70b9\u7684\u8fde\u8fb9\u4e5f\u5f88\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u5bf9\u4e8e\u539f\u56fe\u7684\u4e00\u6761\u8fb9 $(u,v,w_1,w_2)$\uff0c\u5982\u679c $w_1\\le k$\uff0c\u5219 $u$ \u53ef\u4ee5\u5230\u8fbe $v$\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u6761\u8fb9\u53ef\u4ee5\u6d41\u5230 $v$ \u8fd9\u91cc\u3002\u5219\u8fd9\u6761\u8fb9\u5411 $v$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u3002$w_2$ \u7684\u60c5\u51b5\u4e5f\u540c\u7406\u3002\n\n\u8dd1\u4e00\u904d\u6700\u5927\u6d41\uff0c\u53ea\u9700\u8981\u5224\u65ad\u6700\u5927\u6d41\u662f\u5426\u6ee1\u6d41\u5373\u53ef\u3002\u4e5f\u5c31\u662f $\\frac{1}{2}\\sum in_i$\u3002\n\n\u5bf9\u4e8e\u8f93\u51fa\u65b9\u6848\uff0c\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9 $i$\uff0c\u5982\u679c $i\\to v_i$ \u7684\u6b8b\u4f59\u6d41\u91cf\u4e3a $0$\uff0c\u8bf4\u660e\u8fd9\u6761\u8fb9\u662f\u9009\u62e9\u7684\uff0c\u4e5f\u5c31\u662f $u_i\\to v_i$ \u662f\u88ab\u9009\u62e9\u7684\uff0c\u76f4\u63a5\u5efa\u4e00\u5f20\u65b0\u56fe\uff0c\u628a\u8fd9\u6761\u8fb9\u52a0\u8fdb\u53bb\u5c31\u884c\u4e86\uff1b$i\\to u_i$ \u6b8b\u4f59\u6d41\u91cf\u4e3a $0$ \u7684\u60c5\u51b5\u4e5f\u4e00\u6837\u3002\n\n\u6700\u540e\u53ea\u9700\u8981\u5728\u65b0\u56fe\u4e2d\u627e\u4e00\u6761\u6b27\u62c9\u8def\u5f84\uff0c\u6a21\u677f\u9898\u4e86\u5427\u3002\u3002\u3002\u3002\u3002\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\ninline void remake()\n{\n\tClear(head),Clear(edge);\n\ttot=1;\n\treturn;\n}\nint in[MAXN];\ninline bool check(int k)\n{\n\tremake();\n\tint all(0);\n\trep(i,1,n) add_edge(i+m,t,in[i]>>1),all+=(in[i]>>1);\n\trep(i,1,m)\n\t{\n\t\tadd_edge(s,i,1);\n\t\tif(a[i].w1<=k) add_edge(i,a[i].y+m,1);\n\t\tif(a[i].w2<=k) add_edge(i,a[i].x+m,1);\n\t}\n\tint ans(0);\n\twhile(bfs()) ans+=dfs(s,INF);\n\treturn ans==all;\n}\nint out[MAXN],p;\nbool vis[MAXN];\ninline void Find(int u,int lst)\n{\n\twhile(head2[u])\n\t{\n\t\tE e=edge2[head2[u]];\n\t\thead2[u]=e.nxt;\n\t\tFind(e.to,e.flow);\n\t}\n\tif(lst) out[++p]=lst;\n}\nint main()\n{\n\tn=read(),m=read();\n\ts=0,t=n+m+1;\n\trep(i,1,m) \n\t{\n\t\ta[i].x=read(),a[i].y=read(),a[i].w1=read(),a[i].w2=read();\n\t\t++in[a[i].x],++in[a[i].y];\n\t}\n\trep(i,1,n) if(in[i]&1)\n\t{\n\t\tputs(\"NIE\");\n\t\treturn 0;\n\t}\n\tint l=1,r=1000,res(-1);\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)) r=mid-1,res=mid;\n\t\telse l=mid+1;\n\t}\n\tif(res==-1)\n\t{\n\t\tputs(\"NIE\");\n\t\treturn 0;\n\t}\n\tprintf(\"%d\\n\",res);\n\tcheck(res);\n\trep(i,1,m)\n\t\tgra(j,i)\n\t\t{\n\t\t\tE e=edge[j];\n\t\t\tif(e.to!=s&&(!e.flow))\n\t\t\t{\n\t\t\t\tif(e.to-m==a[i].y) add_edge2(a[i].x,a[i].y,i);\n\t\t\t\telse add_edge2(a[i].y,a[i].x,i);\n\t\t\t}\n\t\t}\n\tFind(1,0);\n\trep(i,1,p) printf(\"%d \",out[p-i+1]);\n\treturn 0;\n}\n```\n$$\\texttt{The End.by UF}$$",
        "postTime": 1650534080,
        "uid": 360511,
        "name": "UperFicial",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010[POI2010]MOS-Bridges\u3011"
    },
    {
        "content": "\u5178\u578b\u7684\u77e5\u9053\u6027\u8d28\u5c31\u4f1a\u505a\u9898\u3002            \n\n\u8003\u8651\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u4e8c\u5206\u7b54\u6848\u540e\u5224\u65ad\u80fd\u5426\u6784\u9020\u51fa\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\u5c31\u597d\u4e86\u3002                 \n\n\u539f\u56fe\u662f\u65e0\u5411\u56fe\u6b27\u62c9\u56de\u8def\uff0c\u5728\u4e8c\u5206\u4e4b\u540e\u56fe\u4e0a\u4ea7\u751f\u4e86\u4e00\u4e9b\u6709\u5411\u8fb9\uff0c\u4f46\u662f\u6bcf\u6761\u8fb9\u8fd8\u662f\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u628a\u95ee\u9898\u8f6c\u5316\u4e00\u4e0b\uff1a\u56fe\u4e0a\u6709\u4e00\u4e9b\u672a\u5b9a\u5411\u7684\u65e0\u5411\u8fb9\u548c\u4e00\u4e9b\u6709\u5411\u8fb9\uff0c\u8bf7\u5bf9\u6240\u6709\u65e0\u5411\u8fb9\u5b9a\u5411\u540e\u6c42\u51fa\u4e00\u7ec4\u6709\u5411\u56fe\u6b27\u62c9\u56de\u8def\u7684\u89e3\u3002            \n\n\u8003\u8651\u6709\u5411\u56fe\u6b27\u62c9\u56de\u8def\u6027\u8d28\uff1a\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u7b49\u4e8e\u51fa\u5ea6\u7b49\u4e8e\u603b\u5ea6\u6570\u7684\u4e00\u534a\u3002      \n\n\u7528\u7f51\u7edc\u6d41\u8fdb\u884c\u6784\u9020\u3002\u6bcf\u4e2a\u70b9 $i$ \u5411 $t$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $\\frac{deg(i)}{2}$ \u7684\u8fb9\u8868\u793a\u5b83\u9700\u8981\u7684\u51fa\u5ea6\uff0c\u8fd9\u6837\u53ea\u9700\u8981\u5230\u65f6\u8dd1\u5b8c\u6700\u5927\u6d41\u770b\u4e00\u4e0b\u7b54\u6848\u662f\u4e0d\u662f $\\sum_{i = 1} ^ n \\frac{deg(i)}{2}$ \u5373\u53ef\u3002             \n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u7684\u6ce8\u610f\u70b9\uff0c\u4f60\u5f97\u5148\u5224\u65ad\u539f\u65e0\u5411\u56fe\u6709\u6ca1\u6709\u89e3\uff0c\u4e0d\u7136\u5e94\u8be5\u4f1a\u88ab\u5361\u4e00\u4e24\u4e2a\u70b9\u3002              \n\n\u63a5\u7740\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u89c6\u4e3a\u4e00\u4e2a\u70b9 $ed_i$\uff0c\u4ece\u6e90\u70b9 $s$ \u5411 $ed_i$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u8868\u793a $ed_i$ \u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u51fa\u5ea6\u3002\n\n\u82e5\u8fb9 $(x,y)$ \u5b9a\u5411\u4e86\uff0c $ed_i$ \u5c31\u76f4\u63a5\u5bf9\u4ea7\u751f\u51fa\u5ea6\u7684\u90a3\u4e2a\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u5373\u53ef\u3002\n\n\u82e5\u8fb9 $(x,y)$ \u6ca1\u6709\u5b9a\u5411\uff0c\u5411\u4e24\u4e2a\u70b9\u90fd\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u3002          \n\n\u7136\u540e\u76f4\u63a5\u8dd1\u6700\u5927\u6d41\u5373\u53ef\uff0c\u5224\u5b8c\u7b54\u6848\u5408\u6cd5\u540e\u5c31\u770b\u4e00\u4e0b\u6bcf\u6761\u8fb9\u662f\u7559\u7ed9\u4e86\u90a3\u4e2a\u70b9\u540e\u91cd\u65b0\u5efa\u56fe\uff0c\u73b0\u5728\u5c31\u662f\u4e00\u4e2a\u6709\u5411\u56fe\u76f4\u63a5\u641c\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\u51fa\u6765\u5c31\u597d\u4e86\u3002\n\n\u8fd8\u9700\u8981\u7279\u5224\u4e00\u4e0b\u4e8c\u5206\u7b54\u6848\u540e\u6bcf\u6761\u8fb9\u662f\u4e0d\u662f\u4e24\u8fb9\u90fd\u4e0d\u80fd\u8d70\uff0c\u867d\u7136\u4e0d\u7279\u5224\u7f51\u7edc\u6d41\u6d41\u4e0d\u6ee1\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\uff0c\u4f46\u662f\u4fdd\u9669\u8d77\u89c1\u8fd8\u662f\u52a0\u4e0a\u4e3a\u597d\u3002\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 2e5 + 5 , Inf = 1e9;\nint n,m,head[Len],cnt,dep[Len],cur[Len],s,t,maxn,deg[Len],smrmm,IIn[Len],OOut[Len],st[Len];\nstruct nnode\n{\n\tint to,id,vis;\n\tnnode(){to = id = vis = 0;}\n\tnnode(int TO,int ID,int VIS){to = TO , id = ID , vis = VIS;}\n};\nbool cmp(nnode x,nnode y){return x.to < y.to;} \nvector<nnode> v[Len];\nvector<int> used,Print;\nstruct Node\n{\n\tint x,y,w,ww;\n\tNode(){x = y = w = ww = 0;}\n\tNode(int X,int Y,int W,int WW){x = X , y = Y , w = W , ww = WW;}\n}Edge[Len];\nstruct node\n{\n\tint next,to,w;\n}edge[Len << 1];\nvoid add(int from,int to,int w)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\tedge[cnt].w = w;\n\thead[from] = cnt;\n\tswap(to , from);\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\tedge[cnt].w = 0;\n\thead[from] = cnt;\n}\nbool BFS()\n{\n\tqueue<int> q;\n\tfor(int i = 1 ; i <= t ; i ++) dep[i] = 0;\n\tdep[s] = 1 , cur[s] = head[s];q.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint p = q.front();\n\t\tq.pop();\n\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t{\n\t\t\tint to = edge[e].to;\n\t\t\tif(!dep[to] && edge[e].w)\n\t\t\t{\n\t\t\t\tdep[to] = dep[p] + 1;\n\t\t\t\tcur[to] = head[to];\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t];\n}\nint dfs(int u,int In)\n{\n\tif(u == t) return In;\n\tint Out = 0;\n\tfor(int e = cur[u] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(edge[e].w && dep[to] == dep[u] + 1)\n\t\t{\n\t\t\tint res = dfs(to , min(In , edge[e].w));\n\t\t\tIn -= res;\n\t\t\tOut += res;\n\t\t\tedge[e].w -= res;\n\t\t\tedge[e ^ 1].w += res; \n\t\t}\n\t}\n\tif(!Out) return dep[u] = 0;\n\treturn Out;\n}\nvoid DFS(int x)\n{\n\tfor(int i = 0 ; i < v[x].size() ; i = max(i + 1 , st[x]))\n\t{\n\t\tint to = v[x][i].to;\n\t\tif(v[x][i].vis) continue;\n\t\tv[x][i].vis |= 1;\n\t\tst[x] = i + 1;\n\t\tDFS(to);\n\t\tused.push_back(v[x][i].id);\n\t}\n}\nbool check(int Val)\n{\n\tint Cnt = 0;maxn = n;used.clear();cnt = 1;memset(head , 0 , sizeof head);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tif(Edge[i].w > Val && Edge[i].ww > Val) return 0;\n\t\tif(Edge[i].w <= Val || Edge[i].ww <= Val) maxn ++;\n\t\tif(Edge[i].w <= Val) add(maxn , Edge[i].x , 1);\n\t\tif(Edge[i].ww <= Val) add(maxn , Edge[i].y , 1);\n\t}\n\ts = maxn + 1 , t = maxn + 2;\n\tfor(int i = n + 1 ; i <= maxn ; i ++) add(s , i , 1);\n\tfor(int i = 1 ; i <= n ; i ++) add(i , t , deg[i] / 2);\n\tint as = 0;\n\twhile(BFS()) as += dfs(s , Inf);\n\tif(as != smrmm) return 0;\n\tfor(int i = 1 ; i <= n ; i ++) OOut[i] = IIn[i] = 0 , v[i].clear();\n\tfor(int qs = head[s] ; qs ; qs = edge[qs].next)\n\t{\n\t\tint i = edge[qs].to;\n\t\tif(edge[qs].w == 0)\n\t\t{\n\t\t\tfor(int e = head[i] ; e ; e = edge[e].next)\n\t\t\t{\n\t\t\t\tint to = edge[e].to;\n\t\t\t\tif(!edge[e].w)\n\t\t\t\t{\n\t\t\t\t\tint sim = i - n;//edge's id\n\t\t\t\t\tif(Edge[sim].x == to) \n\t\t\t\t\t{\n\t\t\t\t\t\tv[Edge[sim].x].push_back(nnode(Edge[sim].y , sim , 0));\n\t\t\t\t\t\tOOut[Edge[sim].x] ++ , IIn[Edge[sim].y] ++;\n\t\t\t\t\t}\n\t\t\t\t\telse \n\t\t\t\t\t{\n\t\t\t\t\t\tv[Edge[sim].y].push_back(nnode(Edge[sim].x , sim , 0)); \n\t\t\t\t\t\tOOut[Edge[sim].y] ++ , IIn[Edge[sim].x] ++;\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t}\n\t//puts(\"\");\n\t//printf(\"???%d\\n\",Val);\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\t//printf(\"%d %d\\n\",OOut[i],IIn[i]);\n\t\tsort(v[i].begin() , v[i].end() , cmp);\n\t\t//for(int j = 0 ; j < v[i].size() ; j ++) printf(\"%d %d\\n\",i,v[i][j].to); \n\t\tst[i] = 0;\n\t}\n\t//puts(\"\");\n\tDFS(1);\n\tswap(used , Print); \n\treturn 1;\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i = 1 ; i <= m ; i ++) \n\t{\n\t\tscanf(\"%d %d %d %d\",&Edge[i].x,&Edge[i].y,&Edge[i].w,&Edge[i].ww);\n\t\tdeg[Edge[i].x] ++ , deg[Edge[i].y] ++;\n\t}\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tif(deg[i] % 2 == 1) return puts(\"NIE\") & 0;\n\t\tsmrmm += deg[i] / 2;\n\t}\n\tint l = 0 , r = 1001 , anss = 1001;\n\twhile(l <= r)\n\t{\n\t\tint mid = (l + r) >> 1;\n\t\tif(check(mid))\n\t\t{\n\t\t\tanss = mid;\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse l = mid + 1;\n\t}\n\tif(anss == 1001) return puts(\"NIE\") & 0;\n\tprintf(\"%d\\n\",anss);\n\tfor(int i = Print.size() - 1 ; i >= 0 ; i --) printf(\"%d \",Print[i]);\n\treturn 0;\n} \n```",
        "postTime": 1636873517,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3511 [POI2010]MOS-Bridges"
    },
    {
        "content": "\n[\u6233\u6211\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.cnblogs.com/hbxblog/p/11098058.html)\n\n### $Solution$\n\n\u8fd9\u9053\u9898\u56e0\u4e3a\u6ca1\u6709$spj$,\u6240\u4ee5\u5f88\u591a\u4eba\u90fd\u5e94\u8be5\u6ca1\u6709\u8fc7\n\n\u8fd9\u91cc\u53ea\u8bb2\u4e00\u8bb2\u7b2c\u4e00\u95ee\u7684\u505a\u6cd5\n\n\u770b\u5230\"\u6700\u5927\u503c\u6700\u5c0f\"\uff0c\u5c31\u77e5\u9053\u5e94\u8be5\u8981\u4e8c\u5206\n\n\u4e8c\u5206\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a$mid$,\u53ea\u8981\u8ba1\u7b97\u5c0f\u4e8e$mid$\u7684\u8fb9\uff0c\u7136\u540e\u5728\u5269\u4e0b\u7684\u56fe\u4e2d\u5224\u65ad\u6709\u65e0\u6b27\u62c9\u56de\u8def\n\n\u4f46\u8fd9\u4e2a\u56fe\u662f\u4e00\u4e2a\u6df7\u5408\u56fe.\n\n\u5148\u5bf9\u6bcf\u6761\u65e0\u5411\u8fb9\u968f\u610f\u7684\u5b9a\u5411\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u5165\u5ea6\u548c\u51fa\u5ea6\u7684\u5dee\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u7684\u5947\u5076\u6027\u4e0d\u540c\uff0c\u90a3\u4e48\u5c31\u80af\u5b9a\u65e0\u89e3\uff08\u800c\u6539\u53d8\u65e0\u5411\u8fb9\u65b9\u5411\u7684\u8bdd\uff0c\u4f1a\u8ba9\u5b83\u4eec\u7684\u5165\u8bfb$-$\u51fa\u5ea6\u53d8\u5316$2$\uff0c\u5219\u4ed6\u4eec\u7684\u5dee\u65e0\u6cd5\u53d8\u4e3a$0$,\u6240\u4ee5\u65e0\u6cd5\u76f8\u540c\uff09\n\n\u5982\u679c\u5165\u5ea6$-$\u51fa\u5ea6$=x$\uff0c\u82e5$x < 0$,\u5c31\u5411$t$\u8fde\u4e00\u6761$abs(x/2)$ \u7684\u8fb9\uff0c\u5426\u5219\u5c31\u4ece\u6e90\u70b9\u8fde\u4e00\u6761$abs(x/2)$\u7684\u8fb9\uff0c\u5bf9\u4e8e\u539f\u6765\u5b9a\u5411\u7684\u65e0\u5411\u8fb9$(a,b)$,\u5efa\u7acb\u4e00\u6761\u4ece$b$\u5230$a$\uff0c\u5bb9\u91cf\u4e3a$1$(\u8fd9\u4e2a\u8868\u793a\u7684\u610f\u4e49\u65f6\u5c06$a->b$\u8fd9\u4e00\u6761\u8fb9\u53d8\u6210\u4e86\u4ece$b->a$)\n\n\u6d41\u4e00\u6761\u6d41\u5c31\u4ee3\u8868\u5c06\u4e00\u6761\u65e0\u5411\u8fb9\u53cd\u5411\n\n\u5982\u679c\u6ee1\u6d41\u5219\u5b58\u5728\u6b27\u62c9\u56de\u8def\n\n### $Code$\n\n``` cpp\n#include<bits/stdc++.h>\n#define rg register\n#define file(x) freopen(x\".in\",\"r\",stdin);freopen(x\".out\",\"w\",stdout);\nusing namespace std;\nconst int inf=1e9;\nint read(){\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9') f=(c=='-')?-1:1,c=getchar();\n    while(c>='0'&&c<='9') x=x*10+c-48,c=getchar();\n    return f*x;\n}\nstruct node{\n    int to,next,v;\n}a[200001];\nint head[20001],cnt=1,n,m,s,t,x,y,z,minx,maxx,dep[20001];\nvoid add(int x,int y,int c){\n    a[++cnt].to=y,a[cnt].next=head[x],a[cnt].v=c,head[x]=cnt;\n    a[++cnt].to=x,a[cnt].next=head[y],a[cnt].v=0,head[y]=cnt;\n}\nqueue<int> q;\nint bfs(){\n    memset(dep,0,sizeof(dep));\n    q.push(s);\n    dep[s]=1;\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        for(int i=head[now];i;i=a[i].next){\n            int v=a[i].to;\n            if(!dep[v]&&a[i].v>0)\n                dep[v]=dep[now]+1,q.push(v);\n        }\n    }\n    if(dep[t])\n        return 1;\n    return 0;\n}\nint dfs(int k,int list){\n    if(k==t||!list)\n        return list;\n    for(int i=head[k];i;i=a[i].next){\n        int v=a[i].to;\n        if(dep[v]==dep[k]+1&&a[i].v>0){\n            int p=dfs(v,min(list,a[i].v));\n            if(p){\n                a[i].v-=p;\n        a[i^1].v+=p;\n                return p;\n            }\n        }\n    }\n    return dep[k]=0;\n}\nint Dinic(){\n    int ans=0,k;\n    while(bfs())\n        while((k=dfs(s,inf)))\n            ans+=k;\n    return ans;\n}\nint A[20001],B[20001],C[20001],D[20001],vis[10001],tot;\nbool build(int x){\n\tmemset(head,0,sizeof(head));\n\tmemset(vis,0,sizeof(vis));\n\ts=0,t=n+1,cnt=1,tot=0;\n\tfor(int i=1;i<=m;i++){\n\t\tif(C[i]<=x) vis[A[i]]--,vis[B[i]]++;\n\t\tif(D[i]<=x) add(B[i],A[i],1);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(vis[i]&1)\n\t\t\treturn 0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(vis[i]>0)\n\t\t\ttot+=vis[i]/2,add(s,i,vis[i]/2);\n\t\telse add(i,t,-vis[i]/2);\n\t}\n\treturn 1;\n}\nbool check(int x){\n\tbool res=build(x);\n\tif(!res) return 0;\n\treturn Dinic()==tot;\n}\nint main(){\n\tn=read(),m=read(),minx=2147483647,maxx=0;\n\tfor(int i=1;i<=m;i++){\n\t\tA[i]=read(),B[i]=read(),C[i]=read(),D[i]=read();\n\t\t\tif(C[i]>D[i])\n\t\tswap(A[i],B[i]),swap(C[i],D[i]);\n\t\tminx=min(C[i],minx),maxx=max(maxx,D[i]);\t\n\t}\n\tint l=minx,r=maxx,ans=0;\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid))\n\t\t\tr=mid-1,ans=mid;\n\t\telse l=mid+1;\n\t}\n\tif(!ans) puts(\"NIE\"),exit(0);\n\tprintf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1561626009,
        "uid": 19805,
        "name": "\u64a4\u4e91",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3511 \u3010[POI2010]MOS-Bridges\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9898\u6709\u4e24\u79cd\u5efa\u6a21\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u90fd\u5199\u4e86\uff0c\u6240\u4ee5\u4e24\u4e2a\u90fd\u8bb2\u597d\u4e86\u3002\n\n\u4e00\u773c\u4e8c\u5206\u7b54\u6848\uff0c\u8f6c\u4e3a\u5224\u5b9a\u6027\u95ee\u9898\uff1a\n\n> \u7ed9\u5b9a\u542b\u6709**\u65e0\u5411\u8fb9\u548c\u6709\u5411\u8fb9**\u7684\u56fe $G$\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u6b27\u62c9\u56de\u8def\u3002\n\n\u9996\u5148\u5148\u5224\u6389\u5b58\u5728 $u$\uff0c$2\\nmid \\text{deg}_u$ \u7684\u60c5\u51b5\u3002\n\n\u4e0d\u80fd\u7b80\u5355\u5730\u6839\u636e\u5ea6\u6570\u5224\u65ad\uff0c\u8003\u8651\u7f51\u7edc\u6d41\u5efa\u6a21\u3002\n\n- \u65b9\u6cd5 $1$\uff1a\n\n\u8003\u8651\u5230\u5bf9\u4e8e\u6bcf\u6761\u8fb9 $e_i$\uff0c\u6700\u591a\u7ed9\u4e00\u4e2a\u70b9\u4f1a\u63d0\u4f9b $1$ \u7684\u51fa\u5ea6\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $v_i$\uff0c\u6700\u540e\u5b83\u7684\u51fa\u5ea6\u4e00\u5b9a\u4e3a $\\frac{\\text{deg}_{v_i}}{2}$\u3002\n\n\u8fd9\u542f\u793a\u6211\u4eec\u5c06\u8fb9\u548c\u70b9\u4e24\u4e24\u5339\u914d\u3002\u90a3\u6211\u4eec\u5bf9\u4e8e $S\\to e_i$\uff0c\u8fde\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u8868\u793a\u8fd9\u6761\u8fb9\u6700\u591a\u5339\u914d $1$ \u4e2a\u70b9\u7ed9\u51fa\u5ea6\u3002\u5bf9\u4e8e $v_i\\to T$\uff0c\u8fde\u6d41\u91cf\u4e3a $\\frac{\\text{deg}_{v_i}}{2}$ \u7684\u8fb9\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u8981\u5339\u914d\u8fd9\u4e48\u591a\u6761\u8fb9\u7ed9\u5b83\u51fa\u5ea6\u3002\u5bf9\u4e8e\u4e00\u6761\u8fb9 $e_i=(u,v)$\uff0c\u5982\u679c\u5355\u5411\uff0c\u4e0d\u59a8\u8bbe $u\\to v$\uff0c\u90a3\u4e48\u76f4\u63a5 $e_i$ \u5411 $u$ \u6d41 $1$\u3002\u5426\u5219 $e_i$ \u5411 $u,v$ \u5206\u522b\u6d41 $1$\uff0c\u8868\u793a $e_i$ \u65e2\u53ef\u4ee5\u5339\u914d $u$\uff0c\u4e5f\u53ef\u4ee5\u5339\u914d $v$\u3002\n\n\u7136\u540e\u6211\u4eec\u8dd1\u6700\u5927\u6d41\uff0c\u5224\u65ad\u662f\u5426\u6ee1\u6d41\u5373\u53ef\u3002\u6700\u540e\u6784\u9020\u65b9\u6848\u53ef\u4ee5\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u6839\u636e\u662f\u5426\u6709 $e_i\\to u_i$ \u5efa\u56fe\u8dd1\u6b27\u62c9\u56de\u8def\u3002\n\n- \u65b9\u6cd5 $2$\uff1a\n\n\u5148\u7ed9\u6bcf\u6761\u65e0\u5411\u8fb9\u968f\u610f\u5b9a\u4e00\u4e2a\u65b9\u5411\uff0c\u5047\u5b9a\u662f $u\\to v$\uff0c\u8ba1\u7b97\u6b64\u65f6\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6 $\\text{in}_u$ \u548c\u51fa\u5ea6 $\\text{out}_u$\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e $\\text{in}_u>\\text{out}_u$ \u7684\u70b9\uff0c\u6211\u4eec\u5c06 $S$ \u5411 $u$ \u8fde\u6d41\u91cf $\\frac{\\text{in}_u-\\text{out}_u}{2}$ \u7684\u8fb9\u3002\u8868\u793a\u5b83\u9700\u8981\u6d41\u5165\u8fd9\u4e48\u591a\u6d41\u91cf\u624d\u80fd\u4f7f $\\text{in}_u=\\text{out}_u$\u3002\n\n\u540c\u7406\uff0c\u5bf9\u4e8e $\\text{in}_v<\\text{out}_v$ \u7684\u70b9\uff0c\u6211\u4eec\u5c06 $v$ \u5411 $T$ \u8fde\u6d41\u91cf $\\frac{\\text{out}_v-\\text{in}_v}{2}$ \u7684\u8fb9\u3002\u8868\u793a\u5b83\u9700\u8981\u6d41\u51fa\u8fd9\u4e48\u591a\u6d41\u91cf\u624d\u80fd\u4f7f $\\text{in}_v=\\text{out}_v$\u3002\n\n\u5bf9\u4e8e\u65e0\u5411\u8fb9 $(u,v)$\uff0c\u6211\u4eec\u5047\u5b9a\u4e86 $u\\to v$\u3002\u90a3\u4e48 $v\\to u$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u8868\u793a\u6211\u4eec\u53ef\u4ee5\u53cd\u6094\u3002\n\n\u7136\u540e\u540c\u6837\u8dd1\u6700\u5927\u6d41\uff0c\u5224\u65ad\u662f\u5426\u6ee1\u6d41\uff0c\u7136\u540e\u6784\u9020\u6709\u5411\u56fe\u8dd1\u6b27\u62c9\u56de\u8def\u5373\u53ef\u3002\n\n---\n\n\u65b9\u6cd5 $2$ \u7684\u4ee3\u7801\uff0c\u81ea\u4ee5\u4e3a\u5199\u5f97\u5341\u5206\u6e05\u65b0\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nnamespace vbzIO {\n    char ibuf[(1 << 20) + 1], *iS, *iT;\n    #if ONLINE_JUDGE\n    #define gh() (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20) + 1, stdin), (iS == iT ? EOF : *iS++) : *iS++)\n    #else\n    #define gh() getchar()\n    #endif\n    #define pc putchar\n    #define pi pair<int, int>\n    #define tu3 tuple<int, int, int>\n    #define tu4 tuple<int, int, int, int>\n    #define mp make_pair\n    #define mt make_tuple\n    #define fi first\n    #define se second\n    #define pb push_back\n    #define ins insert\n    #define era erase\n    inline int read () {\n        char ch = gh();\n        int x = 0;\n        bool t = 0;\n        while (ch < '0' || ch > '9') t |= ch == '-', ch = gh();\n        while (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gh();\n        return t ? ~(x - 1) : x;\n    }\n    inline void write(int x) {\n        if (x < 0) {\n            x = ~(x - 1);\n            putchar('-');\n        }\n        if (x > 9)\n            write(x / 10);\n        putchar(x % 10 + '0');\n    }\n}\nusing vbzIO::read;\nusing vbzIO::write;\n\nconst int maxn = 5e3 + 100;\nconst int maxm = 5e4 + 200;\nstruct edg { int u, v, w1, w2; } ed[maxn];\nstruct edge { int to, nxt, w; } e[maxn + maxm];\nstruct node { int to, nxt, w; } g[maxm];\nint n, m, s, t, tot = 1, l, r, ans = -1;\nint head[maxn], fa[maxn], sz[maxn], deg[maxn], id[maxm], dep[maxn], vis[maxm];\n\nvoid add_edge(int u, int v, int w) { e[++tot] = (edge) { v, head[u], w }, head[u] = tot; }\nvoid add_edg(int u, int v, int w) { g[++tot] = (node) { v, head[u], w }, head[u] = tot; }\nvoid add_flow(int u, int v, int w) { add_edge(u, v, w), add_edge(v, u, 0);  }\nint getf(int x) { return fa[x] == x ? x : fa[x] = getf(fa[x]); }\nvoid mrg(int x, int y) {\n\tx = getf(x), y = getf(y);\n\tif (x == y) return;\n\tfa[x] = y, sz[x] += sz[y];\n}\n\nbool bfs() {\n\tqueue<int> q;\n\tmemset(dep, 0, sizeof(dep));\n\tdep[s] = 1, q.push(s);\n\twhile (!q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tfor (int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif (e[i].w && !dep[v]) \n\t\t\t\tdep[v] = dep[u] + 1, q.push(v);\n\t\t}\n\t}\n\treturn dep[t];\n}\n\nint dfs(int u, int in) {\n\tif (u == t) return in;\n\tint out = 0;\n\tfor (int i = head[u]; i && in; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif (e[i].w && dep[v] == dep[u] + 1) {\n\t\t\tint res = dfs(v, min(in, e[i].w));\n\t\t\tin -= res, out += res;\n\t\t\te[i].w -= res, e[i ^ 1].w += res;\n\t\t}\n\t}\n\tif (!out) dep[u] = 0;\n\treturn out;\n}\n\nbool chk(int x) {\n\tfor (int i = 1; i <= n; i++) deg[i] = 0;\n    for (int i = 0; i <= t; i++) head[i] = 0;\n    tot = 1;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u = ed[i].u, v = ed[i].v;\n\t\tif (ed[i].w1 <= x) deg[u]--, deg[v]++;\n\t\tif (ed[i].w2 <= x) id[i] = tot + 1, add_flow(v, u, 1);\n\t}\n    for (int i = 1; i <= n; i++)\n    \tif (deg[i] & 1) return 0;\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n    \tif (deg[i] > 0) sum += deg[i] / 2, add_flow(s, i, deg[i] / 2);\n    \telse add_flow(i, t, -deg[i] / 2);\n\t}\n\twhile (bfs()) sum -= dfs(s, 1e9);\n\treturn sum == 0;\t\n}\n\nstack<int> tp;\nvoid eul(int u, int lst) {\n\tfor (int i = head[u]; i; i = head[u]) {\n\t\thead[u] = g[i].nxt;\n\t\teul(g[i].to, g[i].w);\n\t}\n\tif (lst) tp.push(lst);\n}\n\nint main() {\n\tn = read(), m = read(), t = n + 1;\n\tfor (int i = 1; i <= m; i++) {\n\t\ted[i] = (edg) { read(), read(), read(), read() };\n\t\tif (ed[i].w1 > ed[i].w2) swap(ed[i].u, ed[i].v), swap(ed[i].w1, ed[i].w2);\n\t\tl = max(l, ed[i].w1), r = max(r, ed[i].w2), mrg(ed[i].u, ed[i].v);\n\t}\n\tint c1 = 0, c2 = 0;\n\tfor (int i = 1; i <= n; i++)  \n\t\tif (getf(i) == i) c1++, c2 += (sz[i] == 1);\n\tif (c2 >= 1 && c2 != c1 - 1) return puts(\"NIE\"), 0;\n\twhile (l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (chk(mid)) r = mid - 1, ans = mid;\n\t\telse l = mid + 1;\n\t}\n\tif (ans == -1) return puts(\"NIE\"), 0;\n\twrite(ans), puts(\"\");\n\tchk(ans);\n\ttot = 0;\n\tfor (int i = 1; i <= n; i++) head[i] = 0;\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (ed[i].w2 > ans) add_edg(ed[i].u, ed[i].v, i);\n\t\telse {\n\t\t\tif (e[id[i]].w) add_edg(ed[i].u, ed[i].v, i);\n\t\t\telse add_edg(ed[i].v, ed[i].u, i);\n\t\t}\n\t}\n\teul(1, 0);\n\twhile (tp.size()) write(tp.top()), pc(' '), tp.pop();\n\treturn 0;\n}\n```",
        "postTime": 1678670684,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "P3511 [POI2010]MOS-Bridges"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](http://www.cmsblog.top/archives/poi2010mos-bridges)\n\n## \u9898\u76ee\u63cf\u8ff0\n\n[\u6d1b\u8c37\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3511)\n\n[LOJ \u4f20\u9001\u95e8](https://loj.ac/p/2460)\n\n## \u601d\u8def\n\n\u597d\u6076\u5fc3\u597d\u6076\u5fc3\u7684\u7f51\u7edc\u7624\u9898\uff0c\u5c5e\u4e8e\u662f\u77e5\u9053\u7ed3\u8bba\u5c31\u4f1a\u505a\u4f46\u662f\u4f1a\u5199\u6302\u7684\u9898\uff0c\u4f69\u670d\u51fa\u9898\u4eba\u8111\u6d1e\u3002\n\n**\u6027\u8d28\uff1a\u5bf9\u4e8e\u4e00\u6761\u6b27\u62c9\u56de\u8def\uff0c\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6 = \u51fa\u5ea6**\n\n\u9996\u5148\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u7b54\u6848\uff0c\u4e8c\u5206\u6700\u5c0f\u6743\u503c $x$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $x$\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u51fa\u4e00\u5f20\u56fe\u6765\uff0c\u5728\u8fd9\u5f20\u56fe\u4e2d\uff0c\u6211\u4eec\u628a\u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u8fb9\u780d\u6389\uff08\u53d8\u6210\u6709\u5411\u8fb9\uff0c**\u8bb0\u5f97\u5224\u65ad\u8054\u901a**\uff09\u3002\n\n\u8003\u8651\u5148\u5904\u7406\u6709\u5411\u8fb9\uff1a\n\n\u628a\u6240\u6709\u7684\u70b9\u5206\u7c7b\uff0c\u53ef\u4ee5\u5206\u4e3a**\u5165\u5ea6 > \u51fa\u5ea6** \u548c **\u5165\u5ea6 < \u51fa\u5ea6** \u4e24\u7c7b\uff0c\u7136\u540e\u5efa\u7acb\u6e90\u70b9\u548c\u6c47\u70b9\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5165\u5ea6 > \u51fa\u5ea6\u7684\u70b9\uff0c\u6e90\u70b9\u5411\u5b83\u8fde\u4e00\u6761 **\uff08\u5165\u5ea6 - \u51fa\u5ea6\uff09/ 2** \u7684\u8fb9\uff1b\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5165\u5ea6 < \u51fa\u5ea6\u7684\u70b9\uff0c\u5b83\u5411\u6c47\u70b9\u8fde\u4e00\u6761 **\uff08\u51fa\u5ea6 - \u5165\u5ea6\uff09/ 2** \u7684\u8fb9\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u65e0\u5411\u8fb9\uff1a\n\n\u5bf9\u4e8e\u65e0\u5411\u8fb9 $(u,v)$\uff0c\u6211\u4eec\u53ef\u4ee5\u94a6\u5b9a\u4e00\u4e2a\u65b9\u5411\uff08\u5047\u8bbe\u4e3a $u \\to v$\uff09\uff0c\u7136\u540e\u8fde\u4e00\u6761 $v \\to u$ \u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u5373\u53ef\u3002\n\n\u7136\u540e\u6ce8\u610f\u5224\u65ad\u5b58\u5728 \u5165\u5ea6-\u51fa\u5ea6 \u4e3a\u5947\u6570\u8fb9\u5219\u4e00\u5b9a\u65e0\u89e3\u3002\n\n\u63a5\u4e0b\u6765\u8dd1\u7f51\u7edc\u6d41\u3002\n\n\u7136\u540e\u626b\u63cf\u6b8b\u91cf\u7f51\u7edc\uff0c\u5982\u679c \u5165\u5ea6 > \u51fa\u5ea6\u7684\u70b9\u672a\u6ee1\u6d41\uff0c\u5219\u65e0\u89e3\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\uff0c\u6839\u636e\u8fd9\u4e2a\u7b54\u6848\u5efa\u56fe\u6c42\u6b27\u62c9\u56de\u8def\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e3 + 10;\nconst int MAXM = 40010;\nconst int INF = 0x3f3f3f3f;\n\nint N, M, L, R, Ans = 1001;\nint U[MAXM], V[MAXM], W1[MAXM], W2[MAXM];\n\nint Fa[MAXN];\nint Cnt, ToT;\n\nint Find(int u) {\n\treturn Fa[u] == u ? Fa[u] : Fa[u] = Find(Fa[u]);\n}\n\nvoid Merge(int x, int y) {\n\tx = Find(x);\n\ty = Find(y);\n\tif (x != y) {\n\t\tCnt--;\n\t\tFa[x] = y;\n\t}\n}\n\nbitset<1010> Used;\n\nclass MF {\npublic:\n\tint Head[MAXN << 1];\n\tstruct _ {\n\t\tint To , Next , Value;\n\t} G[MAXM << 1];\n\tint Cnt = 1;\n\t\n\tvoid _add(int u , int v , int w) {\n\t\tG[++Cnt].To = v;\n\t\tG[Cnt].Next = Head[u];\n\t\tG[Cnt].Value = w;\n\t\tHead[u] = Cnt;\n\t}\n\t\n\tint Depth[MAXN] , Hash[MAXN];\n\t\n\tvoid BFS() {\n\t\tmemset(Depth , -1 , sizeof Depth);\n\t\tmemset(Hash , 0 , sizeof Hash);\n\t\tDepth[T] = 0;\n\t\tHash[0]++;\n\t\tqueue<int> q;\n\t\tq.push(T);\n\t\t\n\t\twhile(q.size()) {\n\t\t\tint u = q.front();\n\t\t\tq.pop();\n\t\t\tfor(int i = Head[u]; i ; i = G[i].Next) {\n\t\t\t\tint v = G[i].To;\n\t\t\t\tif(Depth[v] != -1) continue;\n\t\t\t\tDepth[v] = Depth[u] + 1;\n\t\t\t\tHash[Depth[v]]++;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\t\n\tint Max_flow = 0;\n\t\n\tint DFS(int u , int flow) {\n\t\tif(u == T) {\n\t\t\tMax_flow += flow;\n\t\t\treturn flow;\n\t\t}\n\t\t\n\t\tint used = 0;\n\t\tfor(int i = Head[u]; i; i = G[i].Next) {\n\t\t\tint v = G[i].To;\n\t\t\tif(G[i].Value && Depth[v] == Depth[u] - 1) {\n\t\t\t\tint Min = DFS(v , min(G[i].Value , flow - used));\n\t\t\t\tif(Min) {\n\t\t\t\t\tG[i].Value -= Min;\n\t\t\t\t\tG[i ^ 1].Value += Min;\n\t\t\t\t\tused += Min;\n\t\t\t\t}\n\t\t\t\tif(used == flow) {\n\t\t\t\t\treturn used;\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t\t\n\t\tHash[Depth[u]]--;\n\t\tif(Hash[Depth[u]] == 0) Depth[S] = T + 1;\n\t\tDepth[u]++;\n\t\tHash[Depth[u]]++;\n\t\treturn used;\n\t}\n\n\tint S, T;\n\tvoid Add(int u , int v , int w) {\n\t\t_add(u , v , w);\n\t\t_add(v , u , 0);\n\t}\n\tvoid clear() {\n\t\tmemset(Head, 0, sizeof Head);\n\t\tCnt = 1;\n\t}\n\tint ISAP() {\n\t\tMax_flow = 0;\n\t\tBFS();\n\t\twhile(Depth[S] < T + 1) DFS(S , INF);\n\t\treturn Max_flow;\n\t}\n\tint GetSize() {\n\t\treturn Cnt;\n\t}\n} Flow;\n\nint Degree[MAXN], Id[MAXN];\n\nbool Build(int mid) {\n\tFlow.clear();\n\tmemset(Degree, 0, sizeof Degree);\n\tFlow.S = N + 1;\n\tFlow.T = N + 2;\n\tToT = 0;\n\tfor (int i = 1; i <= M; i++) {\n\t\tif (W1[i] <= mid) {\n\t\t\tDegree[U[i]]--;\n\t\t\tDegree[V[i]]++;\n\t\t}\n\t\tif (W2[i] <= mid) {\n\t\t\tId[i] = Flow.GetSize() + 1;\n\t\t\tFlow.Add(V[i], U[i], 1);\n\t\t}\n\t\tif (W1[i] > mid) return false;\n\t}\n\tfor (int i = 1; i <= N; i++) {\n\t\tif (Degree[i] & 1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (int i = 1; i <= N; i++) {\n\t\tif (Degree[i] > 0) {\n\t\t\tToT += Degree[i] / 2;\n\t\t\tFlow.Add(Flow.S, i, Degree[i] / 2);\n\t\t} else {\n\t\t\tFlow.Add(i, Flow.T, -Degree[i] / 2);\n\t\t}\n\t}\n\treturn true;\n}\n\nbool Check(int x) {\n\tbool res = Build(x);\n\tif (!res) return false;\n\treturn Flow.ISAP() == ToT;\n}\n\nstack<int> Stack[MAXN], res;\n\nvoid Euler(int u) {\n\twhile (!Stack[u].empty()) {\n\t\tint i = Stack[u].top();\n\t\tStack[u].pop();\n\t\tEuler(U[i] ^ V[i] ^ u);\n\t\tres.push(i);\n\t}\n}\n\nbool Vis[MAXN];\n\nvoid GetAns() {\n\tBuild(Ans);\n\tFlow.ISAP();\n\tfor (int i = 1, u, v; i <= M; i++) {\n\t\tu = U[i];\n\t\tv = V[i];\n\t\tif (W1[i] <= Ans && W2[i] <= Ans) {\n\t\t\tif (Flow.G[Id[i]].Value) Stack[u].push(i);\n\t\t\telse Stack[v].push(i);\n\t\t} else {\n\t\t\tif (W1[i] <= Ans) Stack[u].push(i);\n\t\t\telse if (W2[i] <= Ans) Stack[v].push(i);\n\t\t}\n\t}\n\tEuler(1);\n\twhile (res.size()) {\n\t\tcout << res.top() << \" \";\n\t\tres.pop();\n\t}\n\treturn;\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\t\n\tcin >> N >> M;\n\tL = 1001, R = 0, Cnt = N;\n\t\n\tfor (int i = 1; i <= N; i++) Fa[i] = i;\n\t\n\tfor (int i = 1; i <= M; i++) {\n\t\tcin >> U[i] >> V[i] >> W1[i] >> W2[i];\n\t\tUsed[U[i]] = 1;\n\t\tUsed[V[i]] = 1;\n\t\tif (W1[i] > W2[i]) {\n\t\t\tswap(U[i], V[i]);\n\t\t\tswap(W1[i], W2[i]);\n\t\t}\n\t\tMerge(U[i], V[i]);\n\t\tL = min(W1[i], L);\n\t\tR = max(W2[i], R);\n\t}\n\t\n\tfor (int i = 1; i <= N; i++) {\n\t\tif (!Used[i]) {\n\t\t\tToT++;\n\t\t}\n\t}\n\n\tif (Cnt - ToT != 1 && Cnt != 1) {\n\t\tcout << \"NIE\" << endl;\n\t\treturn 0;\n\t}\n\twhile (L <= R) {\n\t\tint mid = L + R >> 1;\n\t\tif (Check(mid)) {\n\t\t\tR = mid - 1;\n\t\t\tAns = mid;\n\t\t} else {\n\t\t\tL = mid + 1;\n\t\t}\n\t}\n\n\tif (Ans == 1001) {\n\t\tcout << \"NIE\" << endl;\n\t\treturn 0;\n\t}\n\t\n\tcout << Ans << endl;\n\tGetAns();\n\treturn 0;\n}\n```",
        "postTime": 1665105636,
        "uid": 461426,
        "name": "CmsMartin",
        "ccfLevel": 6,
        "title": "[POI2010]MOS-Bridges"
    }
]