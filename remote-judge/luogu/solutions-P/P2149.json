[
    {
        "content": "// \u611f\u8c22 djq \u5b8c\u5584\u672c\u7b97\u6cd5\n\n\u9700\u8981\u4e00\u5b9a\u601d\u7ef4\u7684\u4e00\u9053\u521d\u7b49\u56fe\u8bba\u9898\u3002\u3002\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u6240\u6c42\u6700\u957f\u516c\u5171\u8def\u5f84\u662f\u4e00\u6761\u94fe\uff0c\u4e0d\u7136\u7531\u4e8e\u6700\u77ed\u8def\u7684\u4e00\u90e8\u5206\u8fd8\u662f\u6700\u77ed\u8def\uff0c\u800c\u65e0\u5411\u56fe\u4e2d $S$ \u5230 $T$ \u4e0e $T$ \u5230 $S$ \u7684\u6700\u77ed\u8def\u76f8\u7b49\uff0c\u53ef\u4ee5\u50cf\u4e0b\u56fe\u4e00\u6837\u4f18\u5316\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/jpfy966o.png)\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u627e\u51fa Elaxia \u53bb\u5b9e\u9a8c\u5ba4\u7684\u6700\u77ed\u8def\u7ecf\u8fc7\u7684**\u6709\u5411\u8fb9**\u7ec4\u6210\u7684 DAG\uff0c\u6240\u6c42\u8def\u5f84\u4e00\u5b9a\u662f\u8be5 DAG \u4e0a\u7684\u4e00\u6761\u94fe\u3002\u6837\u4f8b\u5efa\u6210\u7684\u5982\u4e0b\u56fe\u6240\u793a\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/wbpb0hzk.png)\n\n\u540c\u65f6\uff0c\u6240\u6c42\u94fe\u4e5f\u5e94\u5728 W-- \u7684\u6700\u77ed\u8def DAG\uff08\u59d1\u4e14\u79f0\u4e3a DAGw\uff09\u4e0a\u3002\u5982\u4e0b\u56fe\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/pi75104w.png)\n\n\u9898\u76ee\u8bf4\u662f\u5e76\u884c\u548c\u76f8\u9047\u90fd\u7b97\u516c\u5171\uff0c\u4f46\u6240\u6c42\u94fe\u663e\u7136\u4e0d\u4f1a\u53c8\u5305\u62ec\u5e76\u884c\uff0c\u53c8\u5305\u542b\u76f8\u9047\uff0c\u5426\u5219\u56e0\u4e3a DAGw \u4e0d\u53ef\u80fd\u540c\u65f6\u6709 $u \\to v$ \u548c $v \\to u$ \u8fb9\uff0c\u5b83\u5728 DAGw \u4e0a\u4e0d\u662f\u94fe\u4e86\u3002\uff08**\u8ba8\u8bba\u91cc\u7684\u7b2c\u4e00\u7ec4hack\u6570\u636e\u5361\u4e86\u8fd9\u4e00\u70b9\u3002**\uff09\u6211\u4eec\u53ef\u4ee5\u6c42\u4e00\u4e0b**\u53ea\u4fdd\u7559**\u5728\u4e24 DAG \u4e2d\u540c\u5411\u51fa\u73b0\u7684\u8fb9\u65f6\u7684\u6700\u957f\u94fe\uff0c\u548c**\u53ea\u4fdd\u7559**\u5728\u4e24 DAG \u4e2d\u53cd\u5411\u51fa\u73b0\u7684\u8fb9\u65f6\u7684\u6700\u957f\u94fe\u3002\uff08**\u7b2c\u4e8c\u7ec4hack\u5361\u4e86\u201c\u53ea\u4fdd\u7559\u201d\u4e09\u4e2a\u5b57**\uff09\u3002\n\n---\n\n\u53c2\u8003\u5b9e\u73b0\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<utility>\n#include<iostream>\n#include<queue>\n#include<string>\n#define inf 0x3f3f3f3f\n#define mp make_pair\n#define maxn 1505\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\nstruct edge{\n    int to,cst;\n}el[maxn*maxn],el2[maxn*maxn];\nint E,n,m,head[maxn],nxt[maxn*maxn],x1,y1,x2,y2,d[5][maxn];\nint E2,head2[maxn],nxt2[maxn*maxn],len[maxn],deg[maxn],que[maxn],he,ta;\n//\u53d8\u91cf\u540d\u5e262\u7684\u90fd\u662f\u65b0\u5efa\u7684\u56fe\u7684\u4fe1\u606f\u3002\nbool vis[maxn];\ninline int getint(){\n    char c;\n    for(c=getchar();c<'0' || c>'9';c=getchar());\n    int res = c - '0';\n    for(c=getchar();c>='0'&&c<='9';c=getchar()) res = res * 10 + (c - '0');\n    return res;\n}\ninline void addedge2(int u,int v,int w){\n    E2++;\n    el2[E2] = (edge){v,w};\n    nxt2[E2] = head2[u];\n    head2[u] = E2;\n    deg[v]++;\n}\ninline void addedge(int u,int v,int w){\n    E++;\n    el[E] = (edge){v,w};\n    nxt[E] = head[u];\n    head[u] = E;\n}\ninline void dijkstra(int id,int S){\n    memset(d[id],0x3f,sizeof(d[id]));\n    memset(vis,0,sizeof(vis));\n    d[id][S] = 0;\n    for(int i=1;i<=n;i++){\n        int md = inf,u = -1;\n        for(int j=1;j<=n;j++){\n            if(!vis[j] && md > d[id][j]){\n                md = d[id][j];\n                u = j;\n            }\n        }\n        if(u == -1) break;\n        vis[u] = true;\n        for(int j=head[u];j!=-1;j=nxt[j]){\n            d[id][el[j].to] = min(d[id][el[j].to],d[id][u] + el[j].cst);\n        }\n    }\n}\ninline void quepush(int x){\n    que[ta] = x;\n    ta++;\n}\ninline int quepop(){\n    int ret = que[he];\n    he++;\n    return ret;\n}\ninline void topo(){\n        memset(vis,0,sizeof(vis));\n    he = ta = 1;\n    for(int i=1;i<=n;i++) if(!deg[i]) quepush(i);\n    while(he != ta){\n        int u = quepop();\n        for(int i=head2[u];i!=-1;i=nxt2[i]){\n            deg[el2[i].to]--;\n            len[el2[i].to] = max(len[el2[i].to],len[u] + el2[i].cst);\n            if(deg[el2[i].to] == 0) quepush(el2[i].to);\n        }\n    }\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    memset(head2,-1,sizeof(head2));\n    n = getint();\n    m = getint();\n    x1=getint(),y1=getint(),x2=getint(),y2=getint();\n    for(int i=1;i<=m;i++){\n        int u,v,w;\n        u=getint(),v=getint(),w=getint();\n        addedge(u,v,w);\n        addedge(v,u,w);\n    }\n    dijkstra(1,x1);\n    dijkstra(2,y1);\n    dijkstra(3,x2);\n    dijkstra(4,y2);\n    for(int i=1;i<=n;i++){\n        for(int j=head[i];j!=-1;j=nxt[j]){\n            if(d[1][i] + el[j].cst + d[2][el[j].to] == d[1][y1]){\n                if(d[3][i] + el[j].cst + d[4][el[j].to] == d[3][y2])\n                addedge2(i,el[j].to,el[j].cst);\n            }\n        }\n    }\n    topo();\n    int ans = 0;\n    for(int i=1;i<=n;i++) ans = max(ans,len[i]);\n    memset(head2,-1,sizeof(head2));\n    E2 = 0;\n    memset(deg,0,sizeof(deg));\n    memset(len,0,sizeof(len));\n    for(int i=1;i<=n;i++){\n        for(int j=head[i];j!=-1;j=nxt[j]){\n            if(d[1][i] + el[j].cst + d[2][el[j].to] == d[1][y1]){\n                if(d[4][i] + el[j].cst + d[3][el[j].to] == d[3][y2])\n                addedge2(i,el[j].to,el[j].cst);\n            }\n        }\n    }\n    topo();\n    for(int i=1;i<=n;i++) ans = max(ans,len[i]);\n    printf(\"%d\\n\",ans);\n  return 0;\n}\n```\n\n\u9644\u4e0a\u4e00\u7ec4\u849f\u84bb\u7684\u7b80\u5355\u6570\u636e\uff1a\n\ninput\uff1a\n\n```\n4 4\n1 4 2 3\n1 2 10\n1 3 1\n4 2 9\n4 3 2\n```\n\nOutput\uff1a\n\n```\n2\n```",
        "postTime": 1524647490,
        "uid": 53793,
        "name": "caeious",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "\u505a\u4e86\u4e00\u4e0b\u5348\uff0c\u597d\u4e0d\u5bb9\u6613AC\u4e86\u8fd9\u9053\u7d2b\u9898\u3002\n\n\u5b9e\u9645\u4e0a\u4e0b\u9762\u5927\u4f6c\u8bb2\u7684\u601d\u8def\u5df2\u7ecf\u5f88\u6e05\u6670\u4e86\uff0c\u53d1\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u662f\u63d0\u4f9b\u4e00\u4e9b\u66f4\u7b80\u6d01\u7684\u5199\u6cd5\u3002\n\n\u5176\u4e00\uff0c\u6ca1\u6709\u5fc5\u8981\u5efa\u4e24\u5f20\u56fe\uff0c\u53ea\u8981\u5728\u539f\u56fe\u7684\u57fa\u7840\u4e0a\u6807\u8bb0\u5c31\u884c\u4e86\u3002\n\n\u5176\u4e8c\uff0c\u62d3\u6251\u6ca1\u5fc5\u8981\u8dd1\u4e24\u904d\uff0c\u7528\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u8bb0\u5f55\u987a\u8d70\u548c\u53cd\u8d70\u6240\u80fd\u5f97\u5230\u7684\u6700\u957f\u516c\u5171\u90e8\u5206\u5373\u53ef\u3002\n\n\u5176\u4e09\uff0c\u961f\u5217\u7528\u6570\u7ec4\u5199\u53cd\u800c\u66f4\u8212\u670d\uff08\u4e2a\u4eba\u559c\u597d\uff09\n\n\u4e3b\u8981\u601d\u8def\u5c31\u662f4\u4e2a\u6700\u77ed\u8def\u7b5b\u51fa\u6709\u7528\u8fb9\uff0c\u7136\u540e\u8d77\u70b91\u5411\u7ec8\u70b91\u62d3\u6251\n\n\u4ee3\u7801\u6709\u4e9b\u538b\u884c\uff0c\u975e\u559c\u52ff\u55b7\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<set>\n#define N 5000\n#define M 2500250\n#define INF 1000010000\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define REP(u) for(int i=hd[u],v=e[i].v,w=e[i].w;i;i=e[i].n,v=e[i].v,w=e[i].w)\nusing namespace std;\nstruct edge{int n,v,w;}e[M];\nint n,m,u,v,w,hd[N],fl,dis[4][N],s1,t1,s2,t2,ans,f[N],g[N],ok[M],in[N],l,r,q[N];\nset< pair<int,int> >h;\nvoid add(int u,int v,int w){e[++fl].v=v,e[fl].w=w,e[fl].n=hd[u],hd[u]=fl;}\nvoid dijkstra(int s,int k){\n\tFOR(i,1,n) dis[k][i]=INF;\n\tdis[k][s]=0,h.insert(make_pair(0,s));\n\twhile(!h.empty()){\n\t\tu=h.begin()->second,h.erase(*h.begin());\n\t\tREP(u)if(dis[k][u]+w<dis[k][v]){\n\t\t\tif(dis[k][v]<=INF)  h.erase(make_pair(dis[k][v],v));\n\t\t\tdis[k][v]=dis[k][u]+w,h.insert(make_pair(dis[k][v],v));\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d%d%d%d\",&n,&m,&s1,&t1,&s2,&t2);\n\tFOR(i,1,m) scanf(\"%d%d%d\",&u,&v,&w),add(u,v,w),add(v,u,w);\n\tdijkstra(s1,0),dijkstra(t1,1);\n\tdijkstra(s2,2),dijkstra(t2,3);\n\tFOR(u,1,n)REP(u)\n\t\tif(dis[0][u]+w+dis[1][v]==dis[0][t1]) ok[i]=1,in[v]++;\n\tl=r=1,q[r++]=s1;\n\twhile(l<r){\n\t\tint u=q[l++];ans=max(ans,max(f[u],g[u]));\n\t\tREP(u)if(ok[i]){\n\t\t\tin[v]--;\n\t\t\tif(dis[2][u]+w+dis[3][v]==dis[2][t2]) f[v]=max(f[v],f[u]+w);//\u5e76\u884c\u8d70 \n\t\t\tif(dis[3][u]+w+dis[2][v]==dis[2][t2]) g[v]=max(g[v],g[u]+w);//\u53cd\u5411\u8d70 \n\t\t\tif(!in[v]) q[r++]=v;\n\t\t}\n\t}printf(\"%d\",ans);\n}\n```",
        "postTime": 1528543780,
        "uid": 62267,
        "name": "BJpers2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "\u5148\u4e0d\u8981\u8138\u7684\u5ba3\u4f20\u4e00\u6ce2[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/wyxwyx/p/sdoi2009ela.html)\n\n# Solution\n\n\u4e0d\u77e5\u9053\u4e3a\u5565\u6ce5\u840c\u8981\u8dd14\u904d\u6700\u77ed\u8def\uff0c\u6211\u597d\u50cf\u53ea\u8dd1\u4e86\u4e24\u904d\u3002\n\n\u8981\u6c42\u6700\u77ed\u8def\u5f84\u7684\u6700\u957f\u516c\u5171\u90e8\u5206\uff0c\u6211\u662f\u5148\u8dd1\u4e86\u4e00\u904d\u4ece$x_1$\u5230$y_1$\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u628a$x_1$\u5230$y_1$\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u6253\u4e2a\u6807\u8bb0\u3002\u518d\u8dd1\u4e00\u904d$x_2$\u5230$y_2$\u7684\u6700\u77ed\u8def\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u7684\"\u8fb9\u6743\"\u6539\u4e3a\u4e00\u5bf9\u6570\uff1a\u8fb9\u7684\u957f\u5ea6\u548c\u8fb9\u5728\u7b2c\u4e00\u6b21\u6700\u77ed\u8def\u4e2d\u7684\u957f\u5ea6\u3002\u7136\u540e\u8fea\u6770\u65af\u7279\u62c9\u8dd1\u7684\u65f6\u5019\u5806\u91cc\u5148\u6bd4\u8f83\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u77ed\u7684\u5148\u51fa\uff0c\u5982\u679c\u6700\u77ed\u8def\u957f\u5ea6\u4e00\u6837\uff0c\u5728\u6bd4\u8f83\u548c\u4e4b\u524d\u91cd\u53e0\u7684\u957f\u5ea6\uff0c\u957f\u7684\u5148\u51fa\u3002\n\n\u6682\u65f6\u901a\u8fc7\u4e86\u6240\u6709\u8ba8\u8bba\u4e2d\u7684hack\u6570\u636e\u3002\uff08\u5e94\u8be5\u662f\u5427\n\n\u4ee3\u7801\u4e5f\u5f88\u597d\u5199\u554a\uff0c\u5c31\u662f\u628a\u666e\u901a\u7684dij\u7684`dis`\u6362\u6210\u4e00\u4e2a\u81ea\u5df1\u5199\u7684\u7ed3\u6784\u4f53\u5c31\u884c\u4e86\u554a\u3002\n\n# Code \n\n```C++\n#include <cstdio>\n#include <cstring>\n#include <queue>\n\ntypedef long long ll;\n\nconst int N = 1510;\nconst int M = N * (N - 1);\n\nstruct state {\n    int x, y;\n    state(int x = 0, int y = 0) : x(x), y(y) {}\n    bool operator>(const state& a) const {\n        return x == a.x ? y < a.y : x > a.x;\n    }\n    state operator+(const state& a) const { return state(x + a.x, y + a.y); }\n    bool operator==(const state& a) const { return x == a.x && y == a.y; }\n    bool operator<(const state& a) const { return !(*this == a || *this > a); }\n} dis[N], w[M];\nint vis[N], hd[N], to[M], nxt[M], cnt = 1, n, m, fl[M];\n\ninline void adde(int x, int y, int z) {\n    to[++cnt] = y;\n    nxt[cnt] = hd[x];\n    w[cnt].x = z;\n    hd[x] = cnt;\n}\n\nstruct node {\n    int p;\n    state d;\n    node(int p = 0, state d = state(0, 0)) : p(p), d(d) {}\n    bool operator<(const node& x) const { return d > x.d; }\n};\nstd::priority_queue<node> q;\nvoid dij(int s) {\n    for (int i = 1; i <= n; ++i) dis[i] = state(0x3f3f3f3f, 0), vis[i] = 0;\n    q.push(node(s, dis[s] = state(0, 0)));\n    while (!q.empty()) {\n        node x = q.top();\n        q.pop();\n        if (vis[x.p]) continue;\n        vis[x.p] = 1;\n        for (int i = hd[x.p]; i; i = nxt[i])\n            if (!vis[to[i]]) {\n                if (dis[to[i]] > x.d + w[i])\n                    q.push(node(to[i], dis[to[i]] = x.d + w[i]));\n            }\n    }\n}\n\nvoid dfs(int x) {\n    // printf(\"%d\\n\", x);\n    for (int i = hd[x]; i; i = nxt[i]) {\n        if (dis[to[i]] + w[i] == dis[x]) {\n            w[i].y += w[i].x;\n            w[i ^ 1].y += w[i].x;\n            dfs(to[i]);\n        }\n    }\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    int x1, y1, x2, y2;\n    scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n    for (int i = 1, x, y, z; i <= m; ++i) {\n        scanf(\"%d%d%d\", &x, &y, &z);\n        adde(x, y, z);\n        adde(y, x, z);\n    }\n    dij(x1);\n    // printf(\"%d %d\\n\", dis[y1].x, dis[y1].y);\n    dfs(y1);\n    dij(x2);\n    printf(\"%d\\n\", dis[y2].y);\n    return 0;\n}\n```",
        "postTime": 1539737892,
        "uid": 60449,
        "name": "da_AA",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "#### \u770b\u7740\u5927\u4f6c\u7ea0\u7ed3\u4e8e\u9898\u76ee\u5b9e\u73b0\u7684\u5404\u79cd\u7ec6\u8282\uff0c\u672c\u849f\u84bb\u8fd8\u5728\u60f3\u8fd9\u9898\u5e94\u8be5\u600e\u4e48\u5b9e\u73b0...\n\n\u6709\u4e9b\u77e5\u8bc6\u6ca1\u6709\u505a\u8fc7\u7c7b\u4f3c\u7684\u9898\u76ee\uff0c\u4f60\u5c31\u662f\u771f\u7684\u4e0d\u77e5\u9053\uff0c\u9876\u7740\u5934\u76ae\u786c\u78d5\u771f\u4e0d\u4e00\u5b9a\u80fd\u5728\u4e00\u5b9a\u65f6\u95f4\u5f04\u51fa\u6765\u3002\u6211\u4f1a\u5c06\u6574\u4e2a\u9898\u76ee\u7684\u601d\u8def\u8be6\u7ec6\u5730\u5206\u6790\u4e00\u6ce2\uff0c\u628a\u4e00\u4e9b\u5173\u952e\u7684\u64cd\u4f5c\u4e3e\u51fa\u6765\u3002_(:\u0437\u300d\u2220)_\n\n---\n\n\u6574\u4e2a\u9898\u63cf\u8ff0\u5de8\u77ed\uff0c\u8bf4\u767d\u4e86\u5c31\u662f**\u8981\u6c42\u65e0\u5411\u56fe\u4e2d\uff0c\u4e24\u5bf9\u70b9\u95f4\u6700\u77ed\u8def\u7684\u6700\u957f\u516c\u5171\u8def\u5f84\u3002**\n\n\u9996\u5148\u8fde\u521d\u5b66\u56fe\u8bba\u7684\u840c\u65b0\u90fd\u77e5\u9053\uff0c\u4e00\u4e2a\u56fe\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u4e0d\u6b62\u4e00\u6761\u3002\n\n- ### \u6240\u4ee5\uff0c\u201c\u8981\u60f3\u627e\u51fa\u6240\u6709\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u201d\u4fbf\u6210\u4e3a\u9996\u8981\u7684\u95ee\u9898\u3002\n\n\u8fd9\u4e2a\u5176\u5b9e\u60f3\u4e00\u60f3\u8fd8\u662f\u53ef\u4ee5\u641e\u51fa\u6765\u7684\uff0c\u5047\u8bbe\u4e24\u4e2a\u8282\u70b9\u5206\u522b\u4e3a$u,v$\u4e14u\u9760\u8fd1s\uff0c\u5219\u4e00\u6761\u8fb9\u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u4e00\u5b9a\u6ee1\u8db3\u8d77\u59cb$s,t$\u70b9\u5206\u522b\u5230$u,v$\u7684\u8ddd\u79bb\u52a0\u4e0a\u8fd9\u6761\u8fb9\u6743\uff0c\u7b49\u4e8e\u6700\u5c0f\u8def\u5f84\u957f\u5ea6\u3002\u5373$$ds[u]+w+dt[v]=ds[t]$\n\u5176\u4e2d$ds[i]$\u6570\u7ec4\u548c$dt[i]$\u6570\u7ec4\u5206\u522b\u4e3a$s,t$\u5230\u5404\u4e2a\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u4e0d\u96be\u7406\u89e3~~\uff08\u4f46\u5c31\u662f\u60f3\u4e0d\u5230\uff09~~\u3002\n\n\u4e8e\u662f\u4e4e\u6211\u4eec\u53ef\u4ee5\u5148\u75284\u4e2a$SPFA$\uff08\u5f53\u71368012\u5e74\u4e86\u8fd8\u662f\u6253$dij$\u66f4\u597d\uff09\u7b97\u51fa4\u4e2a\u9876\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\u5373\u53ef\u3002\n\n- ### \u4f46\u662f\u6c42\u51fa\u6765\u6240\u6709\u8fb9\u53c8\u8981\u600e\u4e48\u5904\u7406\u5462\uff1f\uff1f\n\n\u65e2\u7136\u6211\u4eec\u8981\u6c42\u6700\u77ed\u8def\u7684\u6700\u957f\u516c\u5171\u8def\u5f84\uff0c\u90a3\u8fd9\u6761\u8def\u5f84\u7531\u4ee5\u4e0a\u6c42\u51fa\u7684\u8fb9\u7ec4\u6210\u7684\uff0c\u8ddf\u5176\u4ed6\u8fb9\u534a\u6bdb\u94b1\u5173\u7cfb\u6ca1\u6709\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u8fb9\u91cd\u65b0\u5efa\u4e2a\u56fe\uff0c\u6216\u8005\u901a\u8fc7\u6253\u6807\u8bb0\u7684\u65b9\u6cd5\u5c06\u8fd9\u4e9b\u8fb9\u72ec\u7acb\u51fa\u6765\uff0c\u8fd9\u6837\u5728\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u91cc\u5c31\u4f1a\u65b9\u4fbf\u8bb8\u591a\u3002\n\n\u6709\u4e9b\u7ec6\u8282\u653e\u5728\u4ee3\u7801\u91cc\u8bb2\uff1a\n```\n    for (int i=1;i<=n;i++)\n    for (int j=fir[i];j;j=e[j].next) //\u679a\u4e3e\u6bcf\u6761\u8fb9\n    {\n        int v=e[j].v,w=e[j].w;\n        if (d1[i]+w+d3[v]==d1[y1])  //\u5224\u65ad\u7b2c\u4e00\u5bf9\n        {\n       //\u5224\u65ad\u7b2c\u4e8c\u5bf9\u7684\u65f6\u5019\u7531\u4e8e\u679a\u4e3e\u7684\u662f\u5355\u5411\u8fb9\uff0c\u6240\u4ee5\u4f5c\u53cc\u5411\u5904\u7406\u3002 \n        \tif (d2[i]+w+d4[v]==d2[y2]) add2(i,v,w);\n        \tif (d2[v]+w+d4[i]==d2[y2]) add2(v,i,w);\n\t\t}\n\t}\n```\n\n- ## \u5efa\u5b8c\u56fe\u4e86\uff0c\u600e\u4e48\u6c42\u6700\u957f\u8def\u5f84\u5462\uff1f\n\n\u65e2\u7136\u6211\u4eec\u5efa\u4e86\u4e00\u4e2a\u662f\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u4e0d\u5177\u6709\u540e\u6548\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u8dd1\u6709\u5411\u56feDP\u4e86\uff01\n\n\u8bbe$dp[i]$\u662f\u7b2ci\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\uff0c\u6613\u5f97\u5230\u5f0f\u5b50$$dp[i]=dp[u]+w$\u5176\u4e2du\u662fi\u7684\u524d\u9a71\u8282\u70b9\uff0c\u5bf9\u4e8e\u5165\u5ea6\u4e3a0\u7684\u70b9\u7b54\u6848\u4e3a0\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u6211\u91c7\u7528**\u8bb0\u5fc6\u5316**\u7684\u65b9\u6cd5\u6c42\u89e3\u3002\n\n\u7531\u4e8e\u6240\u6709\u8fb9\u53ef\u80fd\u4e0d\u4f1a\u5168\u8fde\u901a\uff0c\u6240\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6ca1\u6709\u6807\u8bb0\u7684\u70b9\u5747\u8dd1\u4e00\u8fb9\uff0c\u6700\u540e\u6c42\u51fa\u6700\u5927\u7684$dp[i]$\u5373\u662f\u7b54\u6848\u3002\n\n```\nint dfs(int u)\n{\n    if (dp[u]) return dp[u];\n    for (int i=fir2[u];i;i=e2[i].next) \n    {\n        \n        int v=e2[i].v,w=e2[i].w;\n        dp[u]=max(dp[u],dfs(v)+w);  //\u6838\u5fc3\uff0c\u6df1\u641c\u7b97u\u524d\u9a71\u7684\u7b54\u6848\u3002\n    }\n    return dp[u];\n}\n```\n\n---\n\n\u4e8e\u662f\u4e09\u4e2a\u91cd\u8981\u64cd\u4f5c\u5c31\u6ca1\u4e86\uff0c\u5176\u4f59\u7684\u7ec6\u8282\u5176\u4ed6\u9898\u89e3\u4e5f\u6709\u5c31\u4e0d\u591a\u8d58\u8ff0\uff0c\u5177\u4f53\u53ef\u770b\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n```\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <climits>\nusing namespace std;\nstruct ed{\n    int v,next,w;\n}e[5000000],e2[5000000];\nint st,d1[50000],d2[5000],d3[5000],d4[5000];\nint fir[10000],fir1[10000],fir2[20000],dp[10000],maxx;\nint n,m,u,v,l,x1,x2,y1,y2,rd[10000];\nbool vis[40000]; queue<int> q;\n\nvoid add(int u,int v,int l)\n{\n    e[++st].v=v; e[st].next=fir[u]; e[st].w=l; fir[u]=st;\n}\n\nvoid add2(int u,int v,int l)\n{\n    e2[++st].v=v; e2[st].next=fir2[u];  e2[st].w=l; fir2[u]=st; rd[u]=rd[v]=1;\n}\n\nvoid spfa(int b,int *d)\n{\n    for (int i=1;i<=n;i++) d[i]=INT_MAX/2; d[b]=0;\n    while (!q.empty()) q.pop(); q.push(b);\n    memset(vis,0,sizeof(vis)); vis[b]=1;\n    while (!q.empty())\n    {\n        int k=q.front(); q.pop(); vis[k]=0;\n        for (int i=fir[k];i;i=e[i].next)\n        {\n            int v=e[i].v,w=e[i].w; \n            if (d[v]>d[k]+w) {\n                d[v]=d[k]+w; if (!vis[v]) vis[v]=1,q.push(v);\n            }\n        }\n    }\n}\n\nint dfs(int u)\n{\n    if (dp[u]) return dp[u];\n    for (int i=fir2[u];i;i=e2[i].next) \n    {\n        \n        int v=e2[i].v,w=e2[i].w;\n        dp[u]=max(dp[u],dfs(v)+w);\t\n    }\n    return dp[u];\n}\n\nint main()\n{\n    cin>>n>>m;\n    cin>>x1>>y1>>x2>>y2;\n    for (int i=1;i<=m;i++) cin>>u>>v>>l,add(u,v,l),add(v,u,l);\n    spfa(x1,d1); spfa(x2,d2); spfa(y1,d3); spfa(y2,d4); st=0;//\u6c424\u4e2a\u9876\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8def \n//~~~~~~~~ \n    for (int i=1;i<=n;i++)\n    for (int j=fir[i];j;j=e[j].next)\n    {\n        int v=e[j].v,w=e[j].w;\n        if (d1[i]+w+d3[v]==d1[y1])\n        {\n        \tif (d2[i]+w+d4[v]==d2[y2]) add2(i,v,w);\n        \tif (d2[v]+w+d4[i]==d2[y2]) add2(v,i,w);\n\t\t}\n\t\t\n        //\u6709\u5411\u56fe\u4f1a\u6f0f\u5224 \n    }\n    memset(dp,0,sizeof(dp)); \n    for (int i=1;i<=n;i++) if (rd[i]&&!dp[i]) dfs(i);//\u679a\u4e3e\u6bcf\u4e00\u4e2a\u8fb9\u8fdb\u884c\u8bb0\u5fc6\u5316 \n    for (int i=1;i<=n;i++) maxx=max(maxx,dp[i]); \n    cout<<maxx<<endl;\n}\n```\n\n\u51e0\u4e2ahack\u6570\u636e\u90fd\u80fd\u8fc7\uff0c\u8981\u662f\u6709\u9519\u8bf7\u6307\u51fa_(:\u0437\u300d\u2220)_",
        "postTime": 1546000277,
        "uid": 15984,
        "name": "\u5929\u6cfd\u9f9f",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "\n\u5148\u9644\u4e00\u5f20\u6837\u4f8b\uff1a\n\n![\u6837\u4f8b](https://cdn.luogu.com.cn/upload/pic/59536.png)\n\n\u601d\u8def\uff1a$dijkstra$+\u6709\u5411\u65e0\u73af\u56fe\u4e0a\u7684\u52a8\u6001\u89c4\u5212\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u660e\u786e\u4e00\u4e2a\u95ee\u9898\uff1a\n\n\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u8def\u5f84\u5f62\u6210\u7684\u56fe\u5fc5\u7136\u662f\u6709\u5411\u65e0\u73af\u56fe\uff0c\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u6700\u77ed\u8def\u5b58\u5728\uff0c\u5219\u5fc5\u7136\u6ca1\u6709\u8d1f\u73af\u3002\u56e0\u6b64\u8def\u5f84\u4e2d\u4e0d\u53ef\u80fd\u51fa\u73b0\u73af\u3002\n\n\u5982\u4e0b\u56fe\uff0c\u5373\u4e3a\u4ece$1$\u53f7\u70b9\u5f00\u59cb\u8dd1$dijkstra$\u7b97\u6cd5\u5f62\u6210\u7684\u6709\u5411\u65e0\u73af\u56fe\uff1a\n\n![dijkstra\u6700\u77ed\u8def\u7684\u7ed3\u679c](https://cdn.luogu.com.cn/upload/pic/59537.png)\n\n\u90a3\u4e48\uff0c\u8be5\u5982\u4f55\u4fdd\u5b58\u8fd9\u5f20\u56fe\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5728dijkstra\u7684\u677e\u5f1b\u64cd\u4f5c\u4e2d\u8fd9\u4e48\u505a\uff1a\n```cpp\nif (dis[e.to] >= e.w + dis[now.to])\n    {\n        if (dis[e.to] > e.w + dis[now.to])\n        {\n            pre[e.to].clear();\n            dis[e.to] = e.w + dis[now.to];\n            que.push({e.to, dis[e.to]});\n        }\n        pre[e.to].push_back({now.to, e.w});\n    }\n```\n\n\u6bcf\u5f53\u6211\u4eec\u6210\u529f\u677e\u5f1b\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5c31\u6e05\u9664\u8fd9\u4e2a\u70b9\u4e4b\u524d\u5b58\u5728\u7684\u8fb9\u3002\u628a\u521a\u624d\u677e\u5f1b\u5b83\u7684\u8fb9\u53cd\u5411\uff0c\u5e76\u5c06\u5176\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u56fepre\u4e2d\u3002\u5982\u679c\u4e0d\u80fd\u677e\u5f1b\uff0c\u4f46\u662f\u521a\u597d\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u5c06\u8fd9\u4e2a\u70b9\u52a0\u5165\u65b0\u7684\u56fepre\u4e2d\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6240\u6709\u8fb9\u521a\u597d\u4e0e\u4e0a\u56fe\u76f8\u53cd\uff0c\u4ece\u591a\u4e2a\u70b9\u6c47\u805a\u5230\u8d77\u70b9\u7684\u6709\u5411\u65e0\u73af\u56fe\u3002\n\n\u4f46\u662f\u6211\u4eec\u53ea\u8981\u4ece$1$\u53f7\u70b9\u5230$6$\u53f7\u70b9\u4e0a\u7684\u6700\u77ed\u8def\u5f84\u3002\u56e0\u6b64\u8fd9\u5f20\u56fe\u4e0a\u4ecd\u7136\u6709\u8bb8\u591a\u6ca1\u7528\u7684\u70b9\uff0c\u5982$9$\u53f7\u70b9\uff0c$8$\u53f7\u70b9\uff0c$7$\u53f7\u70b9\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\uff0c\u4ece\u7ec8\u70b9\u5f00\u59cb$dfs$\uff0c\u6807\u8bb0\u904d\u5386\u5230\u7684\u6240\u6709\u70b9\uff0c\u6ca1\u88ab\u6807\u8bb0\u7684\u70b9\u628a\u5b83\u53bb\u6389\u3002\u8fd9\u6837\uff0c\u56fe\u4e2d\u7684\u6240\u6709\u70b9\u548c\u8fb9\u90fd\u4f4d\u4e8e\u6700\u77ed\u8def\u5f84\u4e0a\u4e86\u3002\n\n![\u65b0\u7684pre\u56fe](https://cdn.luogu.com.cn/upload/pic/59538.png)\n\n\u73b0\u5728\u6211\u4eec\u6210\u529f\u7684\u628a\u6700\u77ed\u8def\u5f84\u8f6c\u6362\u6210\u4e86\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\n\n\u62d3\u6251\u6392\u5e8f\u53ef\u7528dfs\u5b9e\u73b0\uff0c\u56e0\u6b64\u5728\u4e4b\u524d\u7684dfs\u8fc7\u7a0b\u4e2d\u53ef\u987a\u4fbf\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u53ea\u8981\u6309\u62d3\u6251\u5e8f\uff0c\u4ece\u7ec8\u70b9\u5f00\u59cb\u5f80\u8d77\u70b9\u8fdb\u884cdag\u4e0a\u7684\u52a8\u6001\u89c4\u5212\u5373\u53ef\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u53ea\u5269\u4e0b\u5217\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e86\u3002\n\n![\u6837\u4f8b\u7684\u89e3\u91ca](https://cdn.luogu.com.cn/upload/pic/59539.png)\n\n\u5148\u89e3\u91ca\u4e00\u4e0b\u6837\u4f8b\uff0c\u5982\u56fe\u6240\u793a\uff0c\u9009\u62e9$1-2-3-4-6$\uff0c\u5219\u65e0\u516c\u5171\u8def\u5f84\uff0c\u9009\u62e9$1-2-5-4-6$\uff0c\u5219\u516c\u5171\u8def\u5f84\u957f\u5ea6\u4e3a$3$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c$4$\u548c$5$\u4e4b\u95f4\u7684\u8fb9\u6210\u4e3a\u4e86\u516c\u5171\u8def\u5f84\u3002\n\n\u6211\u4eec\u5148\u8bf4\u660e\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff0c\u6700\u957f\u516c\u5171\u8def\u5f84\u4e00\u5b9a\u662f\u4e00\u6761\u6700\u77ed\u8def\u8def\u5f84\u4e0a\u8fde\u7eed\u7684\u4e00\u6bb5\u3002\n\n\u8fd8\u662f\u62ff\u4e00\u5f20\u56fe\u6765\u4e3e\u4f8b\u5b50\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/59540.png)\n\n\u5047\u8bbe\u516c\u5171\u90e8\u5206\u53ef\u4ee5\u662f\u4e0d\u8fde\u7eed\u7684.\n\n\u56fe\u4e2d\uff0c$2$\u53f7\u70b9\u5230$8$\u53f7\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e3a$2-3-6-8$\n\n\u800c1\u53f7\u70b9\u52307\u53f7\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e3a$1-2-3-4-5-6-8-7$\n\n\u4ed6\u4eec\u7684\u516c\u5171\u8def\u5f84\u4e3a$2-3$\u548c$6-8$\n\n\u663e\u7136\u7684\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u53ef\u80fd\u6210\u7acb\uff0c\u56e0\u4e3a\u4e09\u53f7\u70b9\u5230\u516d\u53f7\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u4e00\u5b9a\u662f\u552f\u4e00\u7684\u3002\u6240\u4ee5$3-6$\u7684\u8def\u5f84\u548c$3-4-5-6$\u7684\u8def\u5f84\u957f\u5ea6\u5e94\u8be5\u76f8\u540c\u3002\u8fd9\u6837\uff0c1\u53f7\u70b9\u52307\u53f7\u70b9\u5fc5\u7136\u5b58\u5728\u53e6\u5916\u4e00\u6761\u6700\u77ed\u8def\u5f84\uff1a$1-2-3-6-8-7$\uff0c\u5176\u516c\u5171\u8def\u5f84\u4e3a$2-3-6-8$\u3002\n\n\u56e0\u6b64\uff0c\u7531\u5f52\u7eb3\u6cd5\u53ef\u8bc1\u660e\uff0c\u6240\u6709\u95f4\u65ad\u7684\u516c\u5171\u8def\u5f84\u4e00\u5b9a\u80fd\u88ab\u8fde\u6210\u8fde\u7eed\u7684\u4e00\u6bb5\u3002\n\n\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u67d0\u4e00\u6761\u6700\u77ed\u8def\u4e0a\uff0c\u53ef\u80fd\u6709\u591a\u6bb5\u516c\u5171\u8def\u5f84\uff0c\u6bcf\u6bb5\u516c\u5171\u8def\u5f84\u90fd\u662f\u53e6\u5916\u4e00\u5bf9\u70b9\u7684\u6700\u77ed\u8def\u65b9\u6848\u4e2d\u7684\u4e00\u79cd\u3002\uff08\u800c\u540c\u4e00\u79cd\u65b9\u6848\u7684\u516c\u5171\u8def\u5f84\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff09\n\n\u8fd9\u6837\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u4e0a\u6700\u957f\u7684\u516c\u5171\u8def\u5f84\u8fde\u7eed\u6bb5\u3002\n\n\n\u6211\u4eec\u5728\u5176\u4e2d\u4e00\u5bf9\u70b9\u7684\u6700\u77ed\u8def\u5f84\u56fe\u4e0a\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u3002\u8bbe\u6709$n$\u4e2a\u70b9$bi$\u8fde\u5411\u70b9$a$\u3002\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u4e3a$wi$\u3002\u6700\u77ed\u8def\u5f84\u56fe\u7684\u8d77\u70b9\u4e3a$s$\uff0c\u7ec8\u70b9\u4e3a$t$\n\n$dp[a][0]$\u8868\u793a\u5f53\u524d\u70b9a\u6240\u5728\u7684\u8fde\u7eed\u516c\u5171\u8def\u5f84\u7684\u957f\u5ea6\n\n$dp[a][1]$\u8868\u793a\u4ecet\u5230a\u7684\u6700\u957f\u516c\u5171\u8def\u5f84\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a\n\n\u5982\u679cbi\u5230a\u8fd9\u6761\u8fb9\u5728\u53e6\u5916\u4e00\u5f20\u6700\u77ed\u8def\u5f84\u56fe\u4e0a\u4e5f\u5b58\u5728\uff0c\u5219\u8fd9\u662f\u4e00\u6761\u516c\u5171\u8fb9\n\n$ dp[a][0] = max(dp[b_{i}][0]+wi),i\u2208[1,n]$\n\n$ dp[a][1] = max(dp[b_{i}][1],dp[a][0]),i\u2208[1,n]$\n\n\u5426\u5219\uff1a\n\n\n$ dp[a][1] = max(dp[b_{i}][1]),i\u2208[1,n]$\n\n$ dp[a][0] = 0$   //\u8fd9\u6761\u8fb9\u4e0d\u662f\u516c\u5171\u8fb9\uff0c\u5f53\u524d\u4e0d\u5b58\u5728\u8fde\u7eed\u6bb5\uff0c\u6240\u4ee5\u957f\u5ea6\u4e3a0\n\n\n\u6700\u540e$dp[s][1]$\u5373\u4e3a\u6211\u4eec\u9700\u8981\u6c42\u7684\uff0c\u4ece$t$\u5230$s$\u7684\u6700\u77ed\u8def\u4e0a\u7684\u6700\u957f\u516c\u5171\u8def\u5f84\u3002\n\n\u6700\u540e\uff0c\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u7684\u7b97\u6cd5\uff1a\n\n1.\u8dd1\u4e24\u6b21$djikstra$\uff0c\u5efa\u51fa\u4e24\u5f20\u6700\u77ed\u8def\u5f84\u56fe\n\n2.\u4ece\u7ec8\u70b9\u5f00\u59cb\u8dd1\u4e24\u6b21\u57fa\u4e8e$dfs$\u7684\u62d3\u6251\u6392\u5e8f\uff0c\u5e76\u6807\u8bb0\u4e0a\u80fd\u88ab\u904d\u5386\u5230\u7684\u70b9\u3002\n\n3.\u4efb\u9009\u4e00\u5f20\u56fe\uff0c\u6309\u7167\u62d3\u6251\u987a\u5e8f\uff0c\u6839\u636e\u904d\u5386\u7684\u8fb9\u5728\u53e6\u5916\u4e00\u5f20\u56fe\u4e0a\u662f\u5426\u5b58\u5728\u8dd1\u52a8\u6001\u89c4\u5212\u3002\n\u6ce8\u610f\uff0c\u9700\u8981\u628a\u53e6\u5916\u4e00\u5f20\u56fe\u6b63\u7684\u65b9\u5411\u548c\u5012\u8fc7\u6765\u7684\u65b9\u5411\u5404\u5224\u65ad\u4e00\u6b21\u53d6\u6700\u5927\u503c\uff08\u5728$2$\u4e2d\u672a\u88ab\u6807\u8bb0\u7684\u70b9\u4e0d\u5e94\u8003\u8651\uff09\n\n\u53ef\u4ee5\u770b\u51fa\uff0c$2$\u548c$3$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u57fa\u672c\u662f\u7ebf\u6027\u7684\uff0c\u56e0\u6b64\u7b97\u6cd5\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u548c$djikstra$\u76f8\u540c\u3002\n\n\u6700\u540e\uff0c\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 1505\n#define INF 0x3f\n#define max(a, b) (((a) > (b)) ? (a) : (b))\nusing std::priority_queue;\nusing std::vector;\nstruct Edge\n{\n    int to, w;\n    friend bool operator<(Edge a, Edge b)\n    {\n        return a.w > b.w;\n    }\n};\nvector<Edge> head[maxn], pre1[maxn], pre2[maxn];\nvector<int> poi1, poi2;\npriority_queue<Edge> que;\nint dis1[maxn], dis2[maxn], dp[maxn][2];\nbool ispass1[maxn], ispass2[maxn], tab[maxn][maxn];\nvoid dfs(int pos, bool *ispass, vector<Edge> *pre, vector<int> &poi);\nvoid dijk(int beg, int *dis, vector<Edge> *pre);\nint main(void)\n{\n    int n, m, x1, y1, x2, y2, u, v, l,ans=0;\n    scanf(\"%d%d%d%d%d%d\", &n, &m, &x1, &y1, &x2, &y2);\n    for (int i = 0; i < m; ++i)\n    {\n        scanf(\"%d%d%d\", &u, &v, &l);\n        head[u].push_back({v, l});\n        head[v].push_back({u, l});\n    }\n    dijk(x1, dis1, pre1),dijk(x2, dis2, pre2);\n    dfs(y1, ispass1, pre1, poi1),dfs(y2, ispass2, pre2, poi2);\n    for (int i = 1; i <= n; ++i)\n        for (auto &e : pre2[i])\n            tab[i][e.to]= 1;\n    for (int i = poi1.size() - 1; i >= 0; --i)\n        for (auto &e : pre1[poi1[i]])\n            if (ispass2[poi1[i]] && ispass2[e.to] && tab[poi1[i]][e.to])//\u8fd9\u4e24\u70b9\u9700\u5728\u53e6\u5916\u4e00\u5f20\u56fe\u4e2d\u5b58\u5728\u4e14\u88ab\u6807\u8bb0\n            {\n                dp[e.to][0] = max(dp[poi1[i]][0] + e.w, dp[e.to][0]);\n                dp[e.to][1] = max(max(dp[poi1[i]][1], dp[e.to][0]), dp[e.to][1]);\n            }\n            else\n                dp[e.to][1] = max(dp[poi1[i]][1], dp[e.to][1]);\n    ans=max(ans,dp[x1][1]),memset(dp,0,sizeof(dp));\n    for (int i = poi1.size() - 1; i >= 0; --i)\n        for (auto &e : pre1[poi1[i]])\n            if (ispass2[poi1[i]] && ispass2[e.to] && tab[e.to][poi1[i]])//\u518d\u8dd1\u4e00\u6b21\uff0c\u53e6\u5916\u4e00\u5f20\u56fe\u7684\u8fb9\u9700\u8981\u53cd\u8fc7\u6765\u770b\u3002\n            {\n                dp[e.to][0] = max(dp[poi1[i]][0] + e.w, dp[e.to][0]);\n                dp[e.to][1] = max(max(dp[poi1[i]][1], dp[e.to][0]), dp[e.to][1]);\n            }\n            else\n                dp[e.to][1] = max(dp[poi1[i]][1], dp[e.to][1]);\n    ans=max(ans,dp[x1][1]);\n    printf(\"%d\", ans);\n    return 0;\n}\nvoid dijk(int beg, int *dis, vector<Edge> *pre)\n{\n    memset(dis, INF, sizeof(dis1));\n    dis[beg] = 0;\n    que.push({beg, 0});\n    Edge now;\n    while (!que.empty())\n    {\n        now = que.top();\n        if (now.w == dis[now.to])\n            for (auto &e : head[now.to])\n                if (dis[e.to] >= e.w + dis[now.to])\n                {\n                    if (dis[e.to] > e.w + dis[now.to])\n                    {\n                        pre[e.to].clear();\n                        dis[e.to] = e.w + dis[now.to];\n                        que.push({e.to, dis[e.to]});\n                    }\n                    pre[e.to].push_back({now.to, e.w});\n                }\n        que.pop();\n    }\n    return;\n}\nvoid dfs(int pos, bool *ispass, vector<Edge> *pre, vector<int> &poi)\n{\n    ispass[pos] = 1;\n    for (auto &e : pre[pos])\n        if (ispass[e.to] == 0)\n            dfs(e.to, ispass, pre, poi);\n    poi.push_back(pos);\n    return;\n}\n\n```\n\n\n\n\n\n",
        "postTime": 1558896833,
        "uid": 128307,
        "name": "saipubw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u4e00\u4e2a\u7ed3\u8bba\uff0c\u4e24\u5bf9\u70b9\u6700\u77ed\u8def\u7684\u6700\u957f\u516c\u5171\u8def\u5f84\u4e00\u5b9a\u662f\u4e00\u6761\u8fde\u7eed\u7684\u94fe\uff1a\n\n\u56e0\u4e3a\u4e24\u4e2a\u70b9\u6700\u77ed\u8def\u4e0a\u7684\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u90fd\u662f\u5b83\u4eec\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u5982\u679c\u4e8c\u53f7\u6700\u77ed\u8def\u4e0e\u4e00\u53f7\u6700\u77ed\u8def\u5728\u67d0\u4e2a\u70b9\u4ea4\u53c9\uff0c\u53c8\u5728\u67d0\u4e2a\u70b9\u5206\u5f00\uff0c\u90a3\u4e48\u4e24\u6761\u8def\u5c31\u4e0d\u53ef\u80fd\u5728\u522b\u7684\u70b9\u518d\u4ea4\u53c9\u4e86\uff0c\u4e0d\u7136\u7684\u8bdd\u8fd8\u4e0d\u5982\u5728\u4e00\u53f7\u6700\u77ed\u8def\u7ee7\u7eed\u8d70\u6765\u7684\u8fd1\u3002\n\nOK,\u6211\u7684\u4ee3\u7801\u5f88\u5b8f\uff08rong\uff09\u4f1f\uff08chang\uff09\uff0c\u7b97\u6cd5\u662f\u8fd9\u6837\u7684\uff0c\u5148\u5bf9\u7b2c\u4e00\u5bf9\u70b9\u8fdb\u884cspfa\uff0c\u7136\u540e\u4ece\u7ec8\u70b9\u5f00\u59cb\u628a\u6240\u6709\u6700\u77ed\u8def\u7ecf\u8fc7\u7684\u8fb9\u90fd\u6807\u8bb0\u4e00\u4e0b\uff0c\u6807\u8bb0\u7684\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\u5982\u679c\u5f53\u524d\u70b9u\u79bb\u8d77\u70b9\u7684\u8ddd\u79bb\u662fdisu,\u5bf9\u4e8eu\u8fde\u51fa\u53bb\u7684\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fb9\u7684\u6743\u503c\u4e3aw\uff0c\u800c\u8fd9\u6761\u8fb9\u5bf9\u5e94\u7684\u90a3\u4e2a\u70b9v\u7684disv=disu-w,\u90a3\u4e48\u4ecev\u5230u\u7684\u8fd9\u6761\u8def\u5f84\u662f\u5f62\u6210\u6700\u77ed\u8def\u7684\u5408\u6cd5\u8def\u5f84\uff0c\u4e8e\u662f\u6211\u4eec\u7528\u7c7b\u4f3cBFS\u7684\u64cd\u4f5c\uff0c\u628a\u8fd9\u4e9b\u8fb9\u90fd\u6807\u8bb0\u4e86\u3002\n\n\u7136\u540e\u518d\u5bf9\u7b2c\u4e8c\u5bf9\u70b9\u7684\u8d77\u70b9\u7ec8\u70b9\u5404\u81ea\u505a\u4e00\u6b21spfa\uff0c\u50cf\u5bf9\u4e8e\u7b2c\u4e00\u5bf9\u70b9\u4e00\u6837\uff0c\u628a\u5b83\u4eec\u5b58\u5728\u4e8e\u6700\u77ed\u8def\u4e2d\u7684\u5408\u6cd5\u7684\u8fb9\u6807\u8bb0\u4e00\u4e0b\uff0c\u7136\u540e\u5982\u679c\u6709\u8fb9\u88ab\u91cd\u590d\u6807\u8bb0\uff0c\u5c31\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u56fe\uff0c\u6700\u540edp\u6c42\u51fa\u6700\u957f\u7684\u94fe\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u505a\u8fd9\u79cd\u6700\u77ed\u8def\u627e\u8def\u5f84\u7684\u9898\uff0c\u6ca1\u6709\u770b\u8fc7\u4efb\u4f55\u4e00\u7bc7\u9898\u89e3\uff0c\u4e8e\u662fYY\u51fa\u4e86\u8fd9\u4e2a\u795e\uff08shi\uff09\u4e00\u6837\u7684\u65b9\u6cd5\uff0c\u540e\u6765\u770b\u5230\u9898\u89e3\u91cc\u9762\u56db\u904dspfa\u7684\u65b9\u6cd5\u611f\u89c9\u6bd4\u6211\u7684\u597d\u5199\u591a\u4e86\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fdb\u884c\u7684\u90fd\u662f\u5dee\u4e0d\u591a\u7684\u64cd\u4f5c\uff0c\u53ea\u662f\u6211\u627e\u6700\u77ed\u8def\u5408\u6cd5\u8def\u5f84\u7684\u65b9\u6cd5\u975e\u5e38\u4f18\uff08ma\uff09\u96c5\uff08fan\uff09\uff0c\u800c\u4e14\u6211\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5f88\u4f18\uff08dan\uff09\u79c0\uff08teng\uff09\uff0c\u4f46\u662f\u522b\u5f00\u751f\u9762\u7684\u65b9\u6cd5\u624d\u80fd\u953b\u70bc\u81ea\u5df1\u7684\u8111\u6d1e\uff0c\u5e0c\u671b\u5927\u5bb6\u591a\u591a\u52a0\u6cb9\u3002\n\n\u4e0b\u9644~~\u4f18\u96c5\u7684~~\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int maxn=1500+10;\nint x1,x2,y1,y2;\nint a[maxn][maxn];\nint n,m;\nint dis[maxn],b[maxn][maxn];\nint dp[maxn];\nbool vis[maxn];\nint e,nex[maxn*maxn],beg[maxn],to[maxn*maxn],w[maxn*maxn];\nint E,Nex[maxn*maxn],Beg[maxn],To[maxn*maxn],W[maxn*maxn];\ninline void add(int u,int v,int ww)\n{\n    to[++e]=v;\n    nex[e]=beg[u];\n    beg[u]=e;\n    w[e]=ww;\n}\ninline void Add(int u,int v,int ww)\n{\n    To[++E]=v;\n    Nex[E]=Beg[u];\n    Beg[u]=E;\n    W[E]=ww;\n}\ninline void spfa(int sta)\n{\n    queue<int>q;\n    q.push(sta);\n    memset(vis,0,sizeof(vis));\n    memset(dis,127,sizeof(dis));\n    dis[sta]=0;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        vis[u]=0;\n        for(register int i=beg[u];i;i=nex[i])\n        {\n            int v=to[i];\n            if(dis[v]>dis[u]+w[i])\n            {\n                dis[v]=dis[u]+a[u][v];\n                if(!vis[v])\n                {\n                    vis[v]=1;\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\nvoid create()\n{\n    queue<int>q;\n    q.push(y1);\n    memset(vis,0,sizeof(vis));\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(register int i=beg[u];i;i=nex[i])\n        {\n            int v=to[i];\n        if(dis[u]-w[i]==dis[v])\n        {\n            b[u][v]=-1;\n            if(!vis[v])\n            {\n                vis[v]=1;\n                q.push(v);\n            }\n        }\n        }\n    }\n}\nvoid mark(int sta)\n{\n    queue<int>q;\n    q.push(sta);\n    memset(vis,0,sizeof(vis));\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(register int i=beg[u];i;i=nex[i])\n        {\n            int v=to[i];\n        if(dis[u]-w[i]==dis[v])\n        {\n            if(b[u][v]==-1)\n            {\n                b[u][v]=a[u][v];\n                Add(u,v,b[u][v]);\n            }\n            if(!vis[v])\n            {\n                vis[v]=1;\n                q.push(v);\n            }\n        }\n        }\n    }\n}\nvoid dfs(int u)\n{\n    for(register int i=Beg[u];i;i=Nex[i])\n    {\n        int v=To[i];\n        if(dp[v])\n        {\n            if(b[u][v]>0)dp[u]=max(dp[u],dp[v]+W[i]);\n        }\n        else\n        {\n            dfs(v);\n            if(b[u][v]>0)dp[u]=max(dp[u],dp[v]+W[i]);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n    for(register int i=1;i<=m;++i)\n    {\n        int u,v,ww;\n        scanf(\"%d%d%d\",&u,&v,&ww);\n        add(u,v,ww);\n        add(v,u,ww);\n        a[u][v]=a[v][u]=ww;\n    }\n    spfa(x1);\n    create();\n    spfa(x2);\t\n    mark(y2);\n    spfa(y2);\n    mark(x2);\n    for(register int i=1;i<=n;++i)\n        if(!dp[i])\n            dfs(i);\n    int ans=0;\n    for(register int i=1;i<=n;++i)\n        ans=max(ans,dp[i]);\n    printf(\"%d\\n\",ans);\n\n    return 0;\n}\n\n\n```",
        "postTime": 1523519185,
        "uid": 20822,
        "name": "cn_lemon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "\u8c03\u5f97\u8ba9\u4eba\u5fc3\u751f\u6028\u5ff5\u7684\u597d\u9898\uff01\n\n\u4e00\u4e2a\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u601d\u8def\u662f\uff1a\u770b\u770b\u54ea\u4e9b\u70b9\u5904\u4e8e\u516c\u5171\u6700\u77ed\u8def\u4e0a\u3002\u663e\u7136\uff0c\u5982\u679cdis(x1,i) + dis(i,y1) == dis(x1,y1) \u4e14 dis(x2,i) + dis(i,y2) == dis(x2,y2)\uff08dis\u8868\u793a\u4e24\u70b9\u95f4\u6700\u77ed\u8def\uff09\uff0c\u90a3\u4e48\u70b9i\u5728\u516c\u5171\u6700\u77ed\u8def\u4e0a\u3002\u4e3a\u4e86\u6c42\u51fa\u6240\u9700\u8981\u7684dis\u503c\uff0c\u6211\u4eec\u9700\u8981\u5206\u522b\u4ee5x1,y1,x2,y2\u4e3a\u8d77\u70b9\uff0c\u5404\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u3002\u63a5\u4e0b\u6765\u679a\u4e3e\u4e00\u5bf9\u4f4d\u4e8e\u516c\u5171\u6700\u77ed\u8def\u4e0a\u7684\u70b9i,j\uff0c\u6700\u5927\u7684abs( dis(x1,i) - dis(x1,j) )\uff08abs\u4e3a\u7edd\u5bf9\u503c\uff09\u5c31\u662f\u7b54\u6848\u3002\n\n\u8fd9\u4e2a\u601d\u8def\u770b\u8d77\u6765\u975e\u5e38\u5408\u7406\uff0c\u5b9e\u9645\u5f97\u5206\u4e5f\u5f88\u5212\u7b97\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u601d\u8def\u5b58\u5728\u7740\u6f0f\u6d1e\uff0c\u6bd4\u5982\u5bf9\u4e8e\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a\n\n ![](https://cdn.luogu.com.cn/upload/pic/1545.png) \n\n\uff08\u76ee\u6807\u662f\u4ece1\u8d70\u52305\uff0c2\u8d70\u52306\uff0c\u7eff\u8272\u4e3a\u70b9\u7f16\u53f7\uff0c\u7ea2\u8272\u4e3a\u8fb9\u6743\uff09\n\n\u5982\u679c\u7528\u4e0a\u9762\u7684\u601d\u8def\u53ef\u4ee5\u5f97\u5230\uff0c\u70b93,4\u5728\u516c\u5171\u6700\u77ed\u8def\u4e0a\uff0c\u7136\u800cabs( dis(1,3) - dis(1,4) ) = 1\uff0c\u53ef\u662f\u5f88\u663e\u7136\u8fd9\u5f20\u56fe\u7684\u7b54\u6848\u4e3a0.\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u9519\u5462\uff1f\n\n\u56e0\u4e3a\u867d\u7136\u70b93,4\u5904\u4e8e\u516c\u5171\u6700\u77ed\u8def\u4e0a\uff0c\u4f46\u662f\u70b93,4\u4e4b\u95f4\u7684\u8fb9\u5e76\u6ca1\u6709\u5904\u4e8e\u516c\u5171\u6700\u77ed\u8def\u4e0a\u3002\n\n\u6240\u4ee5\uff0c\u8003\u8651\u70b9\u662f\u5426\u5904\u4e8e\u516c\u5171\u6700\u77ed\u8def\u4e0a\u7684\u601d\u8def\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u5e94\u8be5\u8981\u8003\u8651\u67d0\u6761\u8fb9\u662f\u4e0d\u662f\u5904\u4e8e\u516c\u5171\u6700\u77ed\u8def\u4e0a\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53c8\u6709\u4e86\u53e6\u5916\u4e00\u79cd\u601d\u8def\uff1a\u5982\u679c\u4e00\u6761\u8fb9\u6240\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u90fd\u5728\u516c\u5171\u6700\u77ed\u8def\u4e0a\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u662f\u4e0d\u662f\u4e5f\u5728\u516c\u5171\u6700\u77ed\u8def\u4e0a\u5462\uff1f\u542c\u8d77\u6765\u5f88\u5408\u7406\uff0c\u4f46\u662f\u6211\u4eec\u518d\u6765\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a\n\n ![](https://cdn.luogu.com.cn/upload/pic/1546.png) \n\n\uff08\u76ee\u6807\u662f\u4ece1\u8d70\u52302\uff0c3\u8d70\u52304\uff0c\u7eff\u8272\u4e3a\u70b9\u7f16\u53f7\uff0c\u7ea2\u8272\u4e3a\u8fb9\u6743\uff09\n\n\u53ef\u4ee5\u53d1\u73b0\u70b91,2\u5728\u516c\u5171\u6700\u77ed\u8def\u4e0a\uff0c\u4f46\u662f\u8fb91-2\u5374\u4e0d\u5728\u516c\u5171\u6700\u77ed\u8def\u4e0a...\u53c8\u5931\u8d25\u4e86- -\n\n\u4e0d\u8fc7\u6ca1\u6709\u5173\u7cfb\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8fd9\u6837\u60f3\uff1a\u8bbe\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e3ai,j\uff0c\u5982\u679cdis(x1,i)+len+dis(j,y1) == dis(x1,y1) \u4e14 dis(x2,i)+len+dis(j,y2) == dis(x2,y2)\uff08len\u4e3a\u8fb9\u6743\uff09\uff0c\u90a3\u4e48\u8fb9i-j\u5c31\u5728\u516c\u5171\u6700\u77ed\u8def\u4e0a\u3002\n\n\u8fd9\u6837\uff0c\u627e\u51fa\u4e86\u6240\u6709\u4f4d\u4e8e\u516c\u5171\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8fd9\u4e9b\u8fb9\u4e2d\u6c42\u4e00\u6761\u6700\u957f\u94fe\u5c31\u53ef\u4ee5\u4e86\u3002\u6c42\u6700\u957f\u94fe\u7684\u65b9\u6cd5\u5c31\u76f8\u5bf9\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4f7f\u7528\u7684\u662f\u62d3\u6251\u6392\u5e8f\uff1a\u8bbe\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e3ai,j\uff0c\u5982\u679cdis(x1,i)<dis(x1,j)\uff0c\u90a3\u4e48\u5c06\u8fd9\u6761\u8fb9\u7684\u65b9\u5411\u6307\u5b9a\u4e3ai-->j\u3002\u7531\u4e8e\u6700\u77ed\u8def\u4e0a\u4e0d\u4f1a\u51fa\u73b0\u73af\uff0c\u6240\u4ee5\u6784\u9020\u51fa\u6765\u7684\u56fe\u662f\u6709\u5411\u65e0\u73af\u56fe\u3002\u5728\u8fd9\u5f20\u6709\u5411\u65e0\u73af\u56fe\u4e0a\u5229\u7528\u62d3\u6251\u6392\u5e8f\u8fdb\u884cdp\uff0c\u6c42\u51fa\u6700\u957f\u94fe\u5c31\u597d\u4e86\u3002\n\n\u4ee5\u4e0a\u662f\u6211\u5199\u8fd9\u9053\u9898\u65f6\u7684\u601d\u8def\u5386\u7a0b\uff0c\u4ece\u5f00\u59cb\u60f3\u5230\u5199\u51fa\u6b63\u89e3\u8c03\u4e86\u4e00\u4e0a\u5348\uff0c\u8fd9\u9178\u723d...\n",
        "postTime": 1438676883,
        "uid": 4341,
        "name": "TsReaper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "### 1 \u601d\u8def\n\n\u672c\u9898\u53ef\u4ee5\u7528 $4$ \u6b21\u6700\u77ed\u8def\u89e3\u51b3\uff0c\u4e0d\u9700\u8981\u62d3\u6251\u6216\u52a8\u89c4\u3002\u76ee\u524d\u9898\u89e3\u91cc\u5e94\u8be5\u6ca1\u6709\u91cd\u590d\u7684\u3002\n\n\u6211\u4eec\u8981\u5efa\u597d\u56fe\u3002\u6211\u4eec\u8981\u5c06\u4e00\u6761\u65e0\u5411\u8fb9\u770b\u6210\u4e24\u6761\u7aef\u70b9\u3001\u8017\u65f6\uff08\u5373\u8fb9\u6743\uff09\u76f8\u540c\uff0c\u65b9\u5411\u76f8\u53cd\u7684\u6709\u5411\u8fb9\u3002\n\n\u8bbe\u7b2c $i$ \u6761\u8fb9\u7684\u8d77\u70b9\u4e3a $e[i].u$\uff0c\u7ec8\u70b9\u4e3a $e[i].v$\uff0c\u8017\u65f6\u4e3a $e[i].w$\uff0c\u8d70\u8fd9\u6761\u8fb9\u80fd\u8ddf `Elaxia` \u5728\u4e00\u8d77\u7684\u65f6\u95f4\u4e3a $e[i].c$\uff08\u521d\u59cb\u4e3a $0$\uff09\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u8dd1 $2$ \u6b21\u6700\u77ed\u8def\u3002\u4e00\u6b21\u4ece `Elaxia` \u7684\u8d77\u70b9\u5f00\u59cb\uff0c\u4e00\u6b21\u4ece `Elaxia` \u7684\u7ec8\u70b9\u5f00\u59cb\u3002\u6b64\u65f6\uff0c\u65e0\u5411\u8fb9\u4e0e $2$ \u6761\u6709\u5411\u8fb9\u6ca1\u6709\u5dee\u522b\u3002\u4f46\u4ee5\u540e\u4f1a\u6709\u7684\u3002\n\n\u7136\u540e\uff0c\u5bf9\u4e8e\u7b2c $i$ \u6761\u6709\u5411\u8fb9\uff0c\u8bbe $u=e[i].u$\uff0c$v=e[i].v$\u3002\u5982\u679c\uff1a\n\n$$\u4ece\u8d77\u70b9\u5230 u \u7684\u8ddd\u79bb+u \u4e0e v \u7684\u8ddd\u79bb+\u7ec8\u70b9\u5230 v \u7684\u8ddd\u79bb=\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb$$\n\n\u90a3\u4e48\u5c06 $e[i].c$ \u8bbe\u4e3a $e[i].w$\u3002\u4f46\u4e0d\u8981\u5bf9\u53cd\u5411\u8fb9\u8fd9\u4e48\u6807\u8bb0\u3002\n\n\u5f88\u660e\u663e\uff0c\u5982\u679c\u4e24\u4eba\u5747\u8d70\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u516c\u5171\u8def\u5f84\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u5fc5\u5b9a\u662f\u4e00\u6761\u94fe\u3002\u800c\u4e14\uff0c\u4e24\u4eba\u5728\u516c\u5171\u8def\u5f84\u4e0a\u8981\u4e48\u4e00\u76f4\u540c\u5411\u884c\u8d70\uff0c\u8981\u4e48\u4e00\u76f4\u53cd\u5411\u884c\u8d70\uff08\u6ce8\u610f\uff0c\u53cd\u5411\u884c\u8d70\u4e5f\u7b97\u201c\u4e00\u8d77\u8d70\u201d\uff09\u3002\n\n\u4f46\u662f\uff0c\u6309\u7167\u4e0a\u9762\u7684\u6807\u8bb0\u6cd5\uff0c\u53cd\u5411\u884c\u8d70\u4e0d\u4f1a\u88ab\u8003\u8651\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u5c06\u540c\u5411\u884c\u8d70\u7b97\u201c\u4e00\u8d77\u8d70\u201d\uff0c\u4f46\u662f\u53cd\u5411\u884c\u8d70\u4e0d\u7b97\u3002\n\n\u7136\u540e\u518d\u8dd1\u4e24\u6b21\u201c\u6700\u4f18\u8def\u201d\uff0c\u4e00\u6b21\u4ece `w**` \u7684\u8d77\u70b9\u5f00\u59cb\uff0c\u4e00\u6b21\u4ece\u7ec8\u70b9\u5f00\u59cb\uff08\u4e5f\u5c31\u662f\u53cd\u7740\u8d70\uff09\u3002\n\n\u6700\u4f18\u8def\uff0c\u5c31\u662f\u5728\u6700\u77ed\u8def\u7684\u57fa\u7840\u4e0a\uff0c\u4e0e `Elaxia` \u4e00\u8d77\u8d70\u7684\u65f6\u95f4\u957f\u8005\u4f18\u5148\u3002\n\n\u6700\u540e\uff0c\u8f93\u51fa\u8fd9\u4e24\u6b21\u201c\u6700\u4f18\u8def\u201d\u4e2d\uff0c\u80fd\u8ddf `Elaxia` \u4e00\u8d77\u8d70\u7684\u65f6\u95f4\u6700\u957f\u7684\u3002\n\n### 2 \u4ee3\u7801\u4e0e\u8bb0\u5f55\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\nusing namespace std;\n#define max_n 1500//\u6700\u5927\u70b9\u6570\n#define inf 0x2f2f2f2f//\u4e00\u4e2a\u5f88\u5927\u7684\u6570\nint n;//\u70b9\u6570\nint m;//\u8fb9\u6570\nint sx1,ex1;//Elaxia\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\nint sx2,ex2;//w**\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\nstruct E{//\u8fb9\u7ed3\u6784\u4f53\n\tint u,v,w,c,nx;//\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u8017\u65f6\u3001\u80fd\u5426\u4e00\u8d77\u3001\u4e0b\u4e00\u6761\u8fb9\n}e[max_n*max_n*2+20];//\u8fb9\nint ei=0;//\u8fb9\u7684\u4e0b\u6807\nint fir[max_n+2];//\u6700\u521d\u7684\u8fb9\nstruct D{//\u8ddd\u79bb\u7ed3\u6784\u4f53\n\tint w,c;//\u8017\u65f6\uff0c\u4e00\u8d77\u65f6\u95f4\n}dis[4][max_n+2];\nbool operator<(D a,D b){//\u6bd4\u8f83\u54ea\u4e2a\u4f18\n\tif(a.w^b.w)return a.w<b.w;\n\treturn a.c>b.c;\n\t//\u8fd4\u56de1\u8bf4\u660ea\u6bd4b\u4f18\uff0c\u53cd\u4e4b\u4ea6\u7136\n}\nstruct W{//\u8def\u5f84\u7ed3\u6784\u4f53\n\tint u;\n\tD d;\n\tbool operator<(const W &a)const{\n\t\treturn a.d<d;\n\t}\n};\nW f;//\u961f\u9996\npriority_queue<W>q;//\u4f18\u5148\u961f\u5217\nvoid addedge(int u,int v,int w,int c){//\u8fde\u8fb9\n\te[++ei]=(E){u,v,w,c,fir[u]}; fir[u]=ei;\n}\nvoid work(const int fl,const int sx){//\u6c42\u6700\u77ed\u8def\n\tfor(int i=1;i<=n;++i)dis[fl][i]=(D){inf,-inf};\n\twhile(!q.empty())q.pop();\n\tdis[fl][sx]=(D){0,0};\n\tq.push((W){sx,dis[fl][sx]});\n\twhile(!q.empty()){\n\t\tf=q.top();\n\t\tq.pop();\n\t\tif(dis[fl][f.u]<f.d)continue;\n\t\tfor(int i=fir[f.u],v;i;i=e[i].nx){\n\t\t\tv=e[i].v;\n\t\t\tD d=(D){f.d.w+e[i].w,f.d.c+e[i].c};\n\t\t\tif(d<dis[fl][v]){\n\t\t\t\tdis[fl][v]=d;\n\t\t\t\tq.push((W){v,d});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\t#ifndef ONLINE_JUDGE\n\tfreopen(\"P2149_1.in\",\"r\",stdin);\n\tfreopen(\"P2149_1.out\",\"w\",stdout);\n\t#endif\n\tscanf(\"%d%d%d%d%d%d\",&n,&m,&sx1,&ex1,&sx2,&ex2);\n\tfor(int i=1,u,v,w;i<=m;++i){\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\taddedge(u,v,w,0);\n\t\taddedge(v,u,w,0);\n\t}\n\twork(0,sx1);//\u4eceElaxia\u8d77\u70b9\u5230\u5404\u70b9\u7684\u6700\u77ed\u8def\n\twork(1,ex1);//\u4eceElaxia\u7ec8\u70b9\u5230\u5404\u70b9\u7684\u6700\u77ed\u8def\n\tfor(int u=1;u<=n;++u){\n\t\tfor(int i=fir[u],v;i;i=e[i].nx){\n\t\t\tv=e[i].v;\n\t\t\tif(dis[0][u].w+e[i].w+dis[1][v].w==dis[0][ex1].w)e[i].c=e[i].w;\n\t\t}\n\t}\n\twork(2,sx2);//\u4ecew**\u8d77\u70b9\u5230\u5404\u70b9\u7684\u6700\u4f18\u8def\n\twork(3,ex2);//\u4ecew**\u7ec8\u70b9\u5230\u5404\u70b9\u7684\u6700\u4f18\u8def\n\tprintf(\"%d\\n\",max(dis[2][ex2].c,dis[3][sx2].c));\n\treturn 0;\n}\n```\n\n[\u8bb0\u5f55\u4f20\u9001\u95e8](https://www.luogu.com.cn/record/65245126)\n\n**By dengziyue**",
        "postTime": 1639813166,
        "uid": 387840,
        "name": "happy_dengziyue",
        "ccfLevel": 6,
        "title": "P2149\u9898\u89e3"
    },
    {
        "content": "\u524d\u8a00\uff1a\u5982\u679c\u6ca1\u6709\u8bf4 $m$ \u7684\u8303\u56f4\uff0c\u90a3\u662f\u771f\u7684\u6709\u70b9\u96be\u60f3\u2026\u2026\n\n### \u601d\u8def\n\n\u9996\u5148\u6211\u4eec\u6765\u601d\u8003\uff0c\u4e24\u6761\u6700\u77ed\u8def\u7684\u516c\u5171\u8def\u5f84\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u3002\u6211\u4eec\u5148\u6765\u753b\u4e2a\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/h2ze765d.png)\n\n\u73b0\u5728\u5047\u8bbe $x_1=1,y_1=10,x_2=5,y_2=10$\uff0c\u90a3\u4e48 $x_1$ \u5230 $y_1$ \u7684\u6700\u77ed\u8def\u4fbf\u662f\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4lxfvkla.png)\n\n\u800c $x_2$ \u548c $y_2$ \u7684\u6700\u77ed\u8def\u662f\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vnjclqpk.png)\n\n\u6240\u4ee5\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e24\u6761\u6700\u77ed\u8def\u7684\u516c\u5171\u8def\u5f84\uff0c\u5fc5\u5f62\u6210\u4e00\u4e2a\u8054\u901a\u5757\u3002\n\n\u73b0\u5728\u6765\u8bc1\u660e\u4e00\u4e0b\uff08\u8c8c\u4f3c\u5e76\u4e0d\u9700\u8981\u8fd9\u4e48\u9ebb\u70e6\uff09\uff1a\n\n\u5047\u8bbe\u73b0\u5728\u8fd9\u4e24\u6761\u6700\u77ed\u8def\u7684\u516c\u5171\u8def\u5f84\u5f62\u6210\u4e86\u4e24\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u8054\u901a\u5757\uff0c\u5219\u8bf4\u660e\u4e24\u6761\u8def\u5f84\u90fd\u53ef\u4ee5\u4ece\u4e00\u4e2a\u8054\u901a\u5757\u5230\u8fbe\u53e6\u4e00\u4e2a\u8054\u901a\u5757\u3002\n\n\u4e0d\u8fc7\u7531\u4e8e\u6700\u77ed\u8def\u7684\u6027\u8d28\uff0c\u4e24\u4e2a\u8054\u901a\u5757\u5fc5\u5b9a\u4f1a\u4ee5\u6700\u77ed\u8def\u7684\u65b9\u5f0f\u8fde\u63a5\uff0c\u6700\u7ec8\u5f62\u6210\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u4e0d\u53ef\u80fd\u5f62\u6210\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u4e2a\u8054\u901a\u5757\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u4e24\u6761\u6700\u77ed\u8def\u5f84\u7684\u516c\u5171\u8def\u5f84\u4f1a\u5f62\u6210\u4e00\u4e2a\u8054\u901a\u5757\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c\u53ea\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u8054\u901a\u5757\u7684\u6700\u957f\u8def\u5c31\u884c\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u9009\u62e9\u8dd1\u4e00\u6b21\u62d3\u6251\u3002\n\n\u4e0d\u8fc7\u73b0\u5728\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u5f20\u56fe\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u9700\u8981\u8dd1\u6b63\u53cd\u4e24\u6b21\u62d3\u6251\uff0c\u624d\u80fd\u5f97\u5230\u6700\u7ec8\u7684\u7b54\u6848\u3002\n\n### \u4e00\u4e9b\u7ec6\u8282\n\n1. \u5f62\u6210\u7684\u8054\u901a\u5757\u662f\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u9700\u8981\u8dd1\u6b63\u53cd\u4e24\u6b21\u62d3\u6251\u6c42\u6700\u957f\u8def\u3002\n\n2. \u9898\u76ee\u6ca1\u6709\u8bf4 $m$ \u7684\u8303\u56f4\uff0c\u6240\u4ee5\u8bf4\u6570\u7ec4\u5f97\u5f00\u5927\u4e00\u4e9b\u3002\n\nCode\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\ninline int read(){\n\tint sss=0;\n\tchar chh=getchar();\n\twhile(chh<'0'||chh>'9') chh=getchar();\n\twhile(chh>='0'&&chh<='9'){\n\t\tsss=sss*10+chh-'0';\n\t\tchh=getchar();\n\t}\n\treturn sss;\n}\nint n,m;\nint s1,t1,s2,t2;\nbool vis[1505];\nint in[1505],dis[1505];\nint head[1505],to[1000005],val[1000005],nxt[1000005],tot=0;\nvoid add(int u,int v,int w){\n\tto[++tot]=v;\n\tval[tot]=w;\n\tnxt[tot]=head[u];\n\thead[u]=tot;\n}\nint head2[1505],to2[1000005],val2[1000005],nxt2[1000005],tot2=0;\nvoid add2(int u,int v,int w){\n\tto2[++tot2]=v;\n\tval2[tot2]=w;\n\tnxt2[tot2]=head2[u];\n\thead2[u]=tot2;\n}\nint dist[1505][6];\nstruct node{\n\tint dis,pos;\n\tbool operator<(const node& x)const{\n\t\treturn x.dis<dis;\n\t}\n};\nvoid Dijkstra(int sta,int num){\n\tmemset(vis,false,sizeof vis);\n\tpriority_queue<node> q;\n\tq.push((node){0,sta}); dist[sta][num]=0;\n\twhile(!q.empty()){\n\t\tint x=q.top().pos; q.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=true;\n\t\tfor(register int i=head[x];i;i=nxt[i]){\n\t\t\tint u=to[i],v=val[i];\n\t\t\tif(dist[u][num]>dist[x][num]+v){\n\t\t\t\tdist[u][num]=dist[x][num]+v;\n\t\t\t\tif(!vis[u]) q.push((node){dist[u][num],u});\n\t\t\t}\n\t\t}\n\t}\n}\nvoid top_sort(){\n\tmemset(dis,0,sizeof dis);\n\tstack<int> q;\n\tfor(register int i=1;i<=n;i++){\n\t\tif(!in[i]) q.push(i);\n\t}\n\twhile(!q.empty()){\n\t\tint x=q.top(); q.pop();\n\t\tfor(register int i=head2[x];i;i=nxt2[i]){\n\t\t\tint u=to2[i],v=val2[i];\n\t\t\tdis[u]=max(dis[u],dis[x]+v);\n\t\t\tin[u]--; if(!in[u]) q.push(u);\n\t\t}\n\t}\n}\nsigned main(){\n\tn=read(),m=read(); int u,v,w;\n\ts1=read(),t1=read(),s2=read(),t2=read();\n\tfor(register int i=1;i<=m;i++){\n\t\tu=read(),v=read(),w=read();\n\t\tadd(u,v,w); add(v,u,w);\n\t}\n\tmemset(dist,0x3f,sizeof dist);\n\tDijkstra(s1,1);\n\tDijkstra(t1,2);\n\tDijkstra(s2,3);\n\tDijkstra(t2,4);\n\tfor(register int x=1;x<=n;x++){\n\t\tfor(register int i=head[x];i;i=nxt[i]){\n\t\t\tint u=to[i],v=val[i];\n\t\t\tif(dist[x][1]+v+dist[u][2]==dist[t1][1]&&dist[x][3]+v+dist[u][4]==dist[t2][3]){\n\t\t\t\tadd2(x,u,v); in[u]++;\n\t\t\t}\n\t\t}\n\t}\n\ttop_sort();\n\tint ans=0;\n\tfor(register int i=1;i<=n;i++){\n\t\tans=max(ans,dis[i]);\n\t}\n\tmemset(dis,0,sizeof dis); memset(in,0,sizeof in);\n\tmemset(head2,-1,sizeof head2); tot2=1;\n\tfor(register int x=1;x<=n;x++){\n\t\tfor(register int i=head[x];i;i=nxt[i]){\n\t\t\tint u=to[i],v=val[i];\n\t\t\tif(dist[x][1]+v+dist[u][2]==dist[t1][1]&&dist[x][4]+v+dist[u][3]==dist[t2][3]){\n\t\t\t\tadd2(x,u,v); in[u]++;\n\t\t\t}\n\t\t}\n\t}\n\ttop_sort();\n\tfor(register int i=1;i<=n;i++){\n\t\tans=max(ans,dis[i]);\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1647939799,
        "uid": 367316,
        "name": "Foreverxxx",
        "ccfLevel": 0,
        "title": "P2149 [SDOI2009]Elaxia \u7684\u8def\u7ebf \u9898\u89e3"
    },
    {
        "content": "~~\u73b0\u5728\u770b\u770b\u81ea\u5df1\u65e9\u671f\u7684\u9898\u89e3\u771f\u662f\u60e8\u4e0d\u5fcd\u7779...~~(upd in 2019.8.11)\n\n\u8fd9\u662f\u6211\u7b2c\u4e00\u4e2a\u81ea\u5df1\u5199\u7684\u7d2b\u9898\uff0c\u6240\u4ee5\u60f3\u5199\u4e00\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\n\n#~~\u8fc7\u4e86\u7684\u65f6\u5019\u81ea\u5df1\u90fd\u4e0d\u4fe1~~\n\n[\u535a\u5ba2\u4f20\u9001\u95e8qwq](https://www.cnblogs.com/LLTYYC/p/9506297.html )\n\n\n\n### \u7b97\u6cd5 \u6700\u77ed\u8def+DAG\u4e0a\u7684dp~~+\u5efa\u56fe~~\n\n## \u601d\u8def\n\n\u9996\u5148\u662f\u6c42\u6700\u77ed\u8def\uff0c\u4f46\u662f\u9898\u76ee\u6ca1\u7ed9\u51fa\u8fb9\u7684\u8303\u56f4\uff0c\u6240\u4ee5\u6211\u9009\u7528 $Dijkstra$ \u6c42\u6700\u77ed\u8def\uff0c~~SPFA\u53ef\u80fd\u4f1a\u7206\u70b8~~\n\n\u5148\u5206\u522b\u6c42\u51fa\u4ee5\u4e24\u4e2a\u4eba\u4e3a\u8d77\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u7136\u540e\u5224\u65ad\u4e00\u6761\u8fb9 $(a,b)$ \u662f\u5426\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u53ea\u8981\u5224\u65ad $dis[a]+map[a][b]$ \u662f\u5426\u7b49\u4e8e $dis[b]$\n\n\u5176\u4e2d $map[a][b]$ \u8868\u793a\u4ece\u70b9a\u5230\u70b9b\u7684 \u76f4\u63a5 \u8ddd\u79bb \n\n\u8c8c\u4f3c\u4e0d\u7528\u8d70\u56db\u904d\u6700\u77ed\u8def..\n\n\u627e\u51fa\u6700\u77ed\u8def\u5f84\uff08\u6ce8\u610f\u662f\u8def\u5f84\u4e0d\u662f\u8def\u7a0b\uff09\u540e\u7528\u5176\u4e2d\u4e00\u4e2a\u4eba\u7684\u8def\u5f84\u5efa\u4e00\u4e2a\u56fe\n\n\u5982\u679c\u8fd9\u4e2a\u4eba\u7684\u6700\u77ed\u8def\u5f84\u6709\u4e00\u79cd\u65b9\u6848\u4f7f\u5f97\u8def\u5f84\u7ecf\u8fc7 $(a,b)$ \u5c31\u4ece $a$ \u8fde\u4e00\u6761\u8fb9\u5230 $b$\uff0c\u663e\u7136\u8fd9\u4e2a\u56fe\u662f $DAG$\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8003\u8651\u5728 $DAG$ \u4e0a\u8dd1 $dp$ \u4e86\n\n\u5177\u4f53\u5c31\u662f\u5bf9\u4e8e\u65b0\u56fe\u7684\u4e00\u8fb9\u8fde\u63a5\u7684\u4e24\u70b9 $a,b$\uff0c\u5982\u679c\u8fb9 $(a,b)$ \u540c\u65f6\u5728\u53e6\u4e00\u4e2a\u4eba\u7684\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48 $f[b]=max(f[b],f[a]+map[a][b])$\n\n\u987a\u4fbf\u4ed8\u4e0a\u81ea\u5df1\u641e\u7684\u7684\u6837\u4f8b\u56fe\uff08luogu\u7684\u56fe\u7247\u6709\u70b9\u5927...\uff09\n![](https://cdn.luogu.com.cn/upload/pic/26486.png)\n\u5177\u4f53\u64cd\u4f5c\u4ee3\u7801\u91cc\u6ce8\u91ca\u8fd8\u662f\u633a\u7ec6\u7684\u5427\uff0c\u56e0\u4e3a\u53ea\u8981\u4e24\u904d\u6700\u77ed\u8def\u6240\u4ee5\u5e38\u6570\u6bd4\u8f83\u4f18\u79c0 ?\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\ninline int read() //\u987a\u624b\u6253\u4e00\u4e2a\u5feb\u8bfb \n{\n    int res=0;\n    char ch=getchar();\n    while(ch>'9'||ch<'0')\n        ch=getchar();\n    while(ch>='0'&&ch<='9')\n    {\n        res=res*10+ch-'0';\n        ch=getchar();\n    }\n    return res;\n}\nstruct node//\u4e3aDijkstra\u7684\u4f18\u5148\u961f\u5217\u5f00\u7684\u7ed3\u6784\u4f53 \n{\n\tint u,v;//v\u5b58\u50a8\u8282\u70b9\u7f16\u53f7\uff0cu\u5b58\u50a8\u5230\u5f53\u65f6\u70b9v\u7684\u6700\u77ed\u8def\u5f84 \n\tbool operator < (const node &b) const{\n\t\treturn u>b.u;\n\t}//\u91cd\u8f7d\u8fd0\u7b97\u7b26 \n};\npriority_queue <node> q;//Dijkstra\u7684\u4f18\u5148\u961f\u5217\nstruct edge\n{\n\tint from,to;\n}e[5000005];\nint fir[1505],cnt;//\u5b58\u8fb9\uff08\u8fb9\u6570\u53ef\u80fd\u8f83\u5927\uff0c\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\u4f1a\u6bd4vector\u5feb\u4e00\u4e9b\uff09 \nint map[1505][1505];//map[i][j]\u5b58\u4ece\u70b9i\u5230\u70b9j\u7684\u76f4\u63a5\u8ddd\u79bb \ninline void add(int a,int b,int c)\n{\n\te[++cnt].from=fir[a];\n\tfir[a]=cnt;\n\te[cnt].to=b;\n\tmap[a][b]=c;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9 \nint xa,ya,xb,yb,n,m;\nint dis[1505][2];\n//dis[i][0]\u5b58 Elaxia\u4ecexa\u5230\u5404\u70b9\u7684\u8ddd\u79bb\uff0cdis[i][1]\u5b58w**\u4ecexb\u5230\u5404\u70b9\u7684\u8ddd\u79bb\ninline void dijk(int sta,int k)//Dijkstra\u6c42\u6700\u77ed\u8def \n{\n\tdis[sta][k]=0;\n\tnode p;\n\tp.u=0; p.v=sta;\n\tq.push(p);\n\twhile(q.empty()==0)\n\t{\n\t\tint u=q.top().u,v=q.top().v;\n\t\tq.pop();//\u51fa\u961f \n\t\tif(u!=dis[v][k]) continue;//\u4f18\u5316 \n\t\tfor(int i=fir[v];i;i=e[i].from)\n\t\t{\n\t\t\tint to=e[i].to;\n\t\t\tif(dis[to][k]>dis[v][k]+map[v][to])//\u677e\u5f1b\u64cd\u4f5c \n\t\t\t{\n\t\t\t\tdis[to][k]=dis[v][k]+map[v][to];\n\t\t\t\tp.u=dis[to][k]; p.v=to;\n\t\t\t\tq.push(p);//\u5165\u961f \n\t\t\t}\n\t\t}\n\t}\n}\nvector <int> v[1505];//\u61d2\u5f97\u7528\u94fe\u5f0f\u524d\u5411\u661f\u4e86\uff0c\u76f4\u63a5\u7528vector\u5b58Elaxia\u7684\u6700\u77ed\u8def\u7ebf\u5c31\u597d\u4e86 \nint f[1505],du[1505],ans;\n//f[i]\u8868\u793a\u4ee5i\u4e3a\u7ec8\u70b9\u7684\u6700\u957f\u8fde\u7eed \u516c\u5171\u6700\u77ed\u8def\u957f\u5ea6\uff0cdu[i]\u5b58\u5165\u5ea6 \nqueue <int> qa;\nbool vis[1505],pd[1505][1505],p[1505];\n//vis\u5b58Elaxia\u6700\u77ed\u8def\u7ebf\u4e0a\u7684\u70b9\n//pd[i][j]=1\u8868\u793aw**\u7684\u6700\u77ed\u8def\u7ebf\u4e2d\u6709\u7ecf\u8fc7\u4ecei\u5230j\u7684\u8fb9,p\u662f\u7528\u6765\u5224\u65ad\u8282\u70b9\u662f\u5426\u5728\u961f\u5217qa\u4e2d \ninline void slove()\n{\n\tmemset(dis,0x7f,sizeof(dis));\n\tdijk(xa,0);\n\tdijk(xb,1);\n\tqa.push(ya);\n\t//\u53cd\u5411\u627e\u51fa\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u4fdd\u8bc1\u5148\u51fa\u961f\u7684\u8282\u70b9\u5728Elaxia\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u5904\u4e8e\u66f4\u540e\u7684\u4f4d\u7f6e\n\t//\u4ece\u7ec8\u70b9\u5f00\u59cb\u627e\uff0c\u4fdd\u8bc1\u627e\u5230\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u4e00\u5b9a\u5728Elaxia\u7684\u6700\u77ed\u8def\u4e0a\n\tvis[ya]=1;\n\twhile(qa.empty()==0)\n\t{\n\t\tint x=qa.front(); qa.pop();\n\t\tfor(int i=fir[x];i;i=e[i].from)\n\t\t{\n\t\t\tint u=e[i].to;\n\t\t\tif(dis[u][0]+map[u][x]==dis[x][0])\n\t\t\t//\u5982\u679c\u4e00\u4e2a\u8282\u70b9u\u6ee1\u8db3\u6761\u4ef6\uff0c\u8bf4\u660eu\u5728Elaxia\u7684\u6700\u77ed\u8def\u4e0a\n\t\t\t{\n\t\t\t\tv[u].push_back(x);//\u4eceu\u5230\u70b9x\u8fde\u4e00\u6761\u6709\u5411\u8fb9 \n\t\t\t\tdu[x]++;//\u70b9x\u7684\u5165\u5ea6\u52a0\u4e00 \n\t\t\t\tif(vis[u]==0)//\u5982\u679c\u6ca1\u6709\u52a0\u5165\u8fc7 \n\t\t\t\t{\n\t\t\t\t\tqa.push(u);//\u628au\u52a0\u5165\u961f\u5217\uff0c\u4ece\u800c\u627e\u5230\u66f4\"\u524d\u9762\"\u7684\u70b9 \n\t\t\t\t\tvis[u]=1;//\u73b0\u5728\u52a0\u5165\u8fc7\u4e86 \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//\u6b64\u65f6qa\u5df2\u7ecf\u7a7a\u4e86\uff0c\u53ef\u4ee5\u91cd\u590d\u5229\u7528 \n\tqa.push(yb); //\u5f00\u59cb\u627ew**\u7684\u6700\u77ed\u8def\u5f84 \n\tp[yb]=1;//vis\u6570\u7ec4\u8981\u7559\u7740\uff0c\u91cd\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4p \n\twhile(qa.empty()==0)//\u540c\u4e0a\n\t{\n\t\tint x=qa.front(); qa.pop();\n\t\tfor(int i=fir[x];i;i=e[i].from)\n\t\t{\n\t\t\tint u=e[i].to;\n\t\t\tif(dis[u][1]+map[u][x]==dis[x][1])//\u540c\u4e0a \n\t\t\t{\n\t\t\t\tpd[x][u]=pd[u][x]=1;//\u8fd9\u6b21\u4e0d\u7528\u8fde\u8fb9\u4e86\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u5224\u65ad \n\t\t\t\t//\u6b63\u53cd\u90fd\u8981\u5224\u65ad\uff0c\u53ef\u80fd\u662f\u53cd\u7740\u8d70 \n\t\t\t\tif(p[u]==0)\n\t\t\t\t{\n\t\t\t\t\tp[u]=1;\n\t\t\t\t\tqa.push(u);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//\u4ee5\u4e0b\u4e3aDAG\u4e0a\u7684dp \n\tfor(int i=1;i<=n;i++)\n\t\tif(du[i]==0&&vis[i])//\u5982\u679ci\u70b9\u5165\u5ea6\u4e3a\u96f6\u4e14 Elaxia\u7684\u6700\u77ed\u8def\u7ecf\u8fc7i\n\t\t\tqa.push(i);//\u628ai\u52a0\u5165qa\n\twhile(qa.empty()==0)\n\t{\n\t\tint x=qa.front(); qa.pop();\n\t\tint len=v[x].size();\n\t\tfor(int i=0;i<len;i++)\n\t\t{\n\t\t\tint u=v[x][i];//\u9996\u5148\u80fd\u591f\u4fdd\u8bc1 Elaxia\u7684\u6700\u77ed\u8def\u7ecf\u8fc7\u8fb9x->i \n\t\t\tdu[u]--;//\u5165\u5ea6\u51cf\u4e00 \n\t\t\tif(pd[x][u]) //\u5982\u679c\u8fb9x->i\u4e5f\u88abw**\u7684\u6700\u77ed\u8def\u7ecf\u8fc7 \n\t\t\t\tf[u]=max(f[u],f[x]+map[x][u]);//\u66f4\u65b0\u957f\u5ea6 \n\t\t\tif(du[u]==0)\n\t\t\t\tqa.push(u);//dp\u8981\u6309\u7167\u62d3\u6251\u5e8f\u6765\u4fdd\u8bc1\u8fd9\u4e2a\u70b9\u524d\u9762\u7684\u6240\u6709\u70b9\u90fd\u8bbf\u95ee\u8fc7\u4e86 \n\t\t}\n\t}\n\t//\u4ee5\u4e0a\u4e3aDAG\u4e0a\u7684dp \n\tfor(int i=1;i<=n;i++)\n\t\tans=max(ans,f[i]);//\u627e\u51fa\u7b54\u6848 \n}\nint main()\n{\n\tmemset(map,0x7f,sizeof(map));\n\tcin>>n>>m;\n\tcin>>xa>>ya>>xb>>yb;\n\tint a,b,c;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\ta=read(); b=read(); c=read(); \n\t\tadd(a,b,c);\n\t\tadd(b,a,c);\n\t}\n\tslove();\n\tcout<<ans;\n\treturn 0;//\u7b80\u5355\u6613\u61c2\u7684\u4e3b\u7a0b\u5e8f \n}\n```\n\u7136\u800c\u6d1b\u8c37\u7684\u6570\u636e\u771f\u7684\u6c34..\u5c31\u8fc7\u4e86\n\n#### \u5176\u5b9e\u8fd9\u662f\u6709\u95ee\u9898\u7684\uff08\u611f\u8c22[Brave_Cattle](https://www.luogu.org/space/show?uid=45661) \u5de8\u4f6c\u6307\u51fa\u9519\u8bef\uff09\n\n\u6709\u4e00\u79cd\u53ef\u80fd\u6570\u636e\uff1a\n\n4 4\n\n1 4 2 3\n\n1 2 10\n\n1 3 1\n\n4 2 9\n\n4 3 2\n\n![](https://cdn.luogu.com.cn/upload/pic/31762.png)\n\n\u663e\u7136\u7b54\u6848\u662f $2$\uff0c\u4f46\u662f\u6211\u7684\u7a0b\u5e8f\u8f93\u51fa\u662f$3$...\n\n\u56e0\u4e3a\u6211\u6ca1\u6709\u8003\u8651\u5230\u6700\u77ed\u8def\u5f84\u53ea\u80fd\u9009\u4e00\u79cd\u8d70...\n\n\u90a3\u8981\u600e\u4e48\u89e3\u51b3\u5462\n\n\u4e5f\u4e0d\u96be\uff0c\u867d\u7136\u8981\u8003\u8651\u6b63\u53cd\u65b9\u5411\uff0c\u4f46\u662f\u663e\u7136\u4e0d\u4f1a\u4e00\u4e0b\u6b63\u7740\u8d70\uff0c\u4e00\u4e0b\u53cd\u7740\u8d70\n\n\u6240\u4ee5\u5206\u5f00\u8ba8\u8bba\u4e00\u4e0b\u5c31\u597d\u4e86..\u7136\u540e\u4ee3\u7801\u5c31\u53d8\u5f97\u66f4\u957f\u4e86...\n\n\u61d2\u5f97\u91cd\u65b0\u5199\u4ee3\u7801\u4e86...\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\ninline int read() //\u987a\u624b\u6253\u4e00\u4e2a\u5feb\u8bfb \n{\n    int res=0;\n    char ch=getchar();\n    while(ch>'9'||ch<'0')\n        ch=getchar();\n    while(ch>='0'&&ch<='9')\n    {\n        res=res*10+ch-'0';\n        ch=getchar();\n    }\n    return res;\n}\nstruct node//\u4e3aDijkstra\u7684\u4f18\u5148\u961f\u5217\u5f00\u7684\u7ed3\u6784\u4f53 \n{\n    int u,v;//v\u5b58\u50a8\u8282\u70b9\u7f16\u53f7\uff0cu\u5b58\u50a8\u5230\u5f53\u65f6\u70b9v\u7684\u6700\u77ed\u8def\u5f84 \n    bool operator < (const node &b) const{\n        return u>b.u;\n    }//\u91cd\u8f7d\u8fd0\u7b97\u7b26 \n};\npriority_queue <node> q;//Dijkstra\u7684\u4f18\u5148\u961f\u5217\nstruct edge\n{\n    int from,to;\n}e[5000005];\nint fir[1505],cnt;//\u5b58\u8fb9\uff08\u8fb9\u6570\u53ef\u80fd\u8f83\u5927\uff0c\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\u4f1a\u6bd4vector\u5feb\u4e00\u4e9b\uff09 \nint map[1505][1505];//map[i][j]\u5b58\u4ece\u70b9i\u5230\u70b9j\u7684\u76f4\u63a5\u8ddd\u79bb \ninline void add(int a,int b,int c)\n{\n    e[++cnt].from=fir[a];\n    fir[a]=cnt;\n    e[cnt].to=b;\n    map[a][b]=c;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9 \nint xa,ya,xb,yb,n,m;\nint dis[1505][2];\n//dis[i][0]\u5b58 Elaxia\u4ecexa\u5230\u5404\u70b9\u7684\u8ddd\u79bb\uff0cdis[i][1]\u5b58w**\u4ecexb\u5230\u5404\u70b9\u7684\u8ddd\u79bb\ninline void dijk(int sta,int k)//Dijkstra\u6c42\u6700\u77ed\u8def \n{\n    dis[sta][k]=0;\n    node p;\n    p.u=0; p.v=sta;\n    q.push(p);\n    while(q.empty()==0)\n    {\n        int u=q.top().u,v=q.top().v;\n        q.pop();//\u51fa\u961f \n        if(u!=dis[v][k]) continue;//\u4f18\u5316 \n        for(int i=fir[v];i;i=e[i].from)\n        {\n            int to=e[i].to;\n            if(dis[to][k]>dis[v][k]+map[v][to])//\u677e\u5f1b\u64cd\u4f5c \n            {\n                dis[to][k]=dis[v][k]+map[v][to];\n                p.u=dis[to][k]; p.v=to;\n                q.push(p);//\u5165\u961f \n            }\n        }\n    }\n}\nvector <int> v[1505];//\u61d2\u5f97\u7528\u94fe\u5f0f\u524d\u5411\u661f\u4e86\uff0c\u76f4\u63a5\u7528vector\u5b58Elaxia\u7684\u6700\u77ed\u8def\u7ebf\u5c31\u597d\u4e86 \nint f[1505],du[1505],ans;\n//f[i]\u8868\u793a\u4ee5i\u4e3a\u7ec8\u70b9\u7684\u6700\u957f\u8fde\u7eed \u516c\u5171\u6700\u77ed\u8def\u957f\u5ea6\uff0cdu[i]\u5b58\u5165\u5ea6 \nqueue <int> qa;\nbool vis[1505],pd[1505][1505],p[1505];\n//vis\u5b58Elaxia\u6700\u77ed\u8def\u7ebf\u4e0a\u7684\u70b9\n//pd[i][j]=1\u8868\u793aw**\u7684\u6700\u77ed\u8def\u7ebf\u4e2d\u6709\u7ecf\u8fc7\u4ecei\u5230j\u7684\u8fb9,p\u662f\u7528\u6765\u5224\u65ad\u8282\u70b9\u662f\u5426\u5728\u961f\u5217qa\u4e2d \nint duu[1505];//du\u6570\u7ec4\u7684\u62f7\u8d1d\nint t[2265025][2],tot;\ninline void slove()\n{\n    memset(dis,0x7f,sizeof(dis));\n    dijk(xa,0);\n    dijk(xb,1);\n    qa.push(ya);\n    //\u53cd\u5411\u627e\u51fa\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u4fdd\u8bc1\u5148\u51fa\u961f\u7684\u8282\u70b9\u5728Elaxia\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u5904\u4e8e\u66f4\u540e\u7684\u4f4d\u7f6e\n    //\u4ece\u7ec8\u70b9\u5f00\u59cb\u627e\uff0c\u4fdd\u8bc1\u627e\u5230\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u4e00\u5b9a\u5728Elaxia\u7684\u6700\u77ed\u8def\u4e0a\n    vis[ya]=1;\n    while(qa.empty()==0)\n    {\n        int x=qa.front(); qa.pop();\n        for(int i=fir[x];i;i=e[i].from)\n        {\n            int u=e[i].to;\n            if(dis[u][0]+map[u][x]==dis[x][0])\n            //\u5982\u679c\u4e00\u4e2a\u8282\u70b9u\u6ee1\u8db3\u6761\u4ef6\uff0c\u8bf4\u660eu\u5728Elaxia\u7684\u6700\u77ed\u8def\u4e0a\n            {\n                v[u].push_back(x);//\u4eceu\u5230\u70b9x\u8fde\u4e00\u6761\u6709\u5411\u8fb9 \n                du[x]++;//\u70b9x\u7684\u5165\u5ea6\u52a0\u4e00 \n                if(vis[u]==0)//\u5982\u679c\u6ca1\u6709\u52a0\u5165\u8fc7 \n                {\n                    qa.push(u);//\u628au\u52a0\u5165\u961f\u5217\uff0c\u4ece\u800c\u627e\u5230\u66f4\"\u524d\u9762\"\u7684\u70b9 \n                    vis[u]=1;//\u73b0\u5728\u52a0\u5165\u8fc7\u4e86 \n                }\n            }\n        }\n    }\n    //\u6b64\u65f6qa\u5df2\u7ecf\u7a7a\u4e86\uff0c\u53ef\u4ee5\u91cd\u590d\u5229\u7528 \n    qa.push(yb); //\u5f00\u59cb\u627ew**\u7684\u6700\u77ed\u8def\u5f84 \n    p[yb]=1;//vis\u6570\u7ec4\u8981\u7559\u7740\uff0c\u91cd\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4p \n    while(qa.empty()==0)//\u540c\u4e0a\n    {\n        int x=qa.front(); qa.pop();\n        for(int i=fir[x];i;i=e[i].from)\n        {\n            int u=e[i].to;\n            if(dis[u][1]+map[u][x]==dis[x][1])//\u540c\u4e0a \n            {\n                pd[u][x]=1;//\u8fd9\u6b21\u4e0d\u7528\u8fde\u8fb9\u4e86\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u5224\u65ad \n                t[++tot][0]=u; t[tot][1]=x; //\u53ef\u80fd\u8def\u5f84\u65b9\u5411\u76f8\u53cd\uff0c\u5148\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u7740\n                if(p[u]==0)\n                {\n                    p[u]=1;\n                    qa.push(u);\n                }\n            }\n        }\n    }\n\n    //\u4ee5\u4e0b\u4e3aDAG\u4e0a\u7684dp \n    //\u7b2c\u4e00\u904d\u5148\u627e\u65b9\u5411\u76f8\u540c\u7684\u8def\u5f84\n    for(int i=1;i<=n;i++)\n    {\n        if(du[i]==0&&vis[i])//\u5982\u679ci\u70b9\u5165\u5ea6\u4e3a\u96f6\u4e14 Elaxia\u7684\u6700\u77ed\u8def\u7ecf\u8fc7i\n            qa.push(i);//\u628ai\u52a0\u5165qa\n        duu[i]=du[i];//\u62f7\u8d1d\u4e00\u4e0bdu,\u56e0\u4e3a\u8981\u7528\u4e24\u6b21\n    }\n    while(qa.empty()==0)\n    {\n        int x=qa.front(); qa.pop();\n        int len=v[x].size();\n        for(int i=0;i<len;i++)\n        {\n            int u=v[x][i];//\u9996\u5148\u80fd\u591f\u4fdd\u8bc1 Elaxia\u7684\u6700\u77ed\u8def\u7ecf\u8fc7\u8fb9x->v[x][i] \n            duu[u]--;//\u5165\u5ea6\u51cf\u4e00\n            if(pd[x][u]) //\u5982\u679c\u8fb9x->i\u4e5f\u88abw**\u7684\u6700\u77ed\u8def\u7ecf\u8fc7 \n                f[u]=max(f[u],f[x]+map[x][u]);//\u66f4\u65b0\u957f\u5ea6 \n            if(duu[u]==0)\n                qa.push(u);//dp\u8981\u6309\u7167\u62d3\u6251\u5e8f\u6765\u4fdd\u8bc1\u8fd9\u4e2a\u70b9\u524d\u9762\u7684\u6240\u6709\u70b9\u90fd\u8bbf\u95ee\u8fc7\u4e86 \n        }\n    }\n    for(int i=1;i<=n;i++)\n        ans=max(ans,f[i]);//\u66f4\u65b0\u7b54\u6848\n    \n    //\u7b2c\u4e8c\u904d\u627e\u65b9\u5411\u76f8\u53cd\u7684\u8def\u5f84\uff0c\u540c\u4e0a\n    memset(f,0,sizeof(f));\n    for(int i=1;i<=tot;i++)\n    {\n        pd[t[i][0]][t[i][1]]=0;\n        pd[t[i][1]][t[i][0]]=1; //\u628a\u8def\u5f84\u6362\u4e2a\u65b9\u5411\n    }\n    for(int i=1;i<=n;i++)\n        if(du[i]==0&&vis[i])\n            qa.push(i);//\u540c\u4e0a\n    while(qa.empty()==0)\n    {\n        int x=qa.front(); qa.pop();\n        int len=v[x].size();\n        for(int i=0;i<len;i++)\n        {\n            int u=v[x][i];\n            du[u]--;\n            if(pd[x][u])\n                f[u]=max(f[u],f[x]+map[x][u]);\n            if(du[u]==0)\n                qa.push(u);\n        }\n    }//\u540c\u4e0a\n\n    //\u4ee5\u4e0a\u4e3aDAG\u4e0a\u7684dp \n    for(int i=1;i<=n;i++)\n        ans=max(ans,f[i]);\n}\nint main()\n{\n    memset(map,0x7f,sizeof(map));\n    cin>>n>>m;\n    cin>>xa>>ya>>xb>>yb;\n    int a,b,c;\n    for(int i=1;i<=m;i++)\n    {\n        a=read(); b=read(); c=read(); \n        add(a,b,c);\n        add(b,a,c);\n    }\n    slove();\n    cout<<ans;\n    return 0;//\u7b80\u5355\u6613\u61c2\u7684\u4e3b\u7a0b\u5e8f \n}\n```\n#### P.S \u6211\u7684\u4e0a\u4e00\u7bc7\u9898\u89e3\u597d\u50cf\u662f\u5728\u51e0\u5e74\u524d\u4e86\uff0c\u8fd9\u662f\u6211\u7684\u7b2c\u4e8c\u7bc7\u9898\u89e3\uff0c\u5e0c\u671b\u5199\u5f97\u597d\u4e00\u70b9\uff0c\u6240\u4ee5\u6ce8\u91ca\u6bd4\u8f83\u7ec6",
        "postTime": 1533297381,
        "uid": 34274,
        "name": "javalyc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "\u5148\u4ee5\u7ed9\u51fa\u7684\u56db\u4e2a\u70b9\u4e3a\u8d77\u70b9\u7684SPFA\u904d\u5386\u4e00\u904d\n\n\u4ee5Elaxia\u7684\u6700\u77ed\u8def\u548cElaxia\u3001w\u7684\u516c\u5171\u6700\u77ed\u8def\u5efa\u7acb\u4e00\u4e2a\u65b0\u56fe\n\n\u600e\u4e48\u5224\u65ad\u67d0\u8fb9\u662f\u5426\u4e3a\u6700\u77ed\u8def\u5462\uff1f\n\n\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7\u5224\u65addis(u,i)+len(i,j)+dis(j,v) == /\uff01= dis(u,v)\n\n\u63a5\u4e0b\u6765\u7528\u62d3\u6251\u6392\u5e8f\u9012\u63a8\uff1af[b[i].v]=max(f[b[i].v],f[temp]+b[i].w\\*b[i].f)\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct node{\n    int u,v,w,nxt,f;\n}a[4000005],b[4000005];\nqueue<int>q;\nint n,m,cnt,ct2;\nint h[2005],p[5],d[5][2005],h2[2005],r[2005],f[2005];\nvoid add(int u,int v,int w)\n{\n    a[++cnt].u=u;\n    a[cnt].v=v;\n    a[cnt].w=w;\n    a[cnt].nxt=h[u]; \n    h[u]=cnt;\n}\nvoid SPFA(int x)\n{    \n    bool v[1505]={0};\n    for(int i=1;i<=n;++i) \n    if(i!=p[x]) d[x][i]=0x3f3f3f3f;\n    q.push(p[x]);\n    v[p[x]]=1;\n    while( !q.empty() )\n    {\n        int now=q.front();\n        q.pop(),v[now]=0;\n        for(int i=h[now];i;i=a[i].nxt)\n        {\n            int to=a[i].v;\n            if(d[x][to]>d[x][now]+a[i].w)\n            {\n                d[x][to]=d[x][now]+a[i].w;\n                if(!v[to]) v[to]=1,q.push(to);\n            } \n        }            \n    }\n}\nint main()\n{\n    int x,y,z;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=4;++i) scanf(\"%d\",&p[i]);\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z),add(y,x,z);\n    }\n    for(int i=1;i<=4;++i) SPFA(i);\n    \n\n    for(int i=1;i<=cnt;++i) //\u4ee5Elaxia\u4e3a\u4e3b\u91cd\u5efa\u56fe \n     if(d[1][a[i].u]+a[i].w+d[2][a[i].v]==d[1][p[2]])\n     {\n         b[++ct2].u==a[i].u; \n         b[ct2].v=a[i].v; \n         b[ct2].w=a[i].w; \n         b[ct2].nxt=h2[a[i].u]; \n         h2[a[i].u]=ct2;\n         if(d[3][a[i].u]+a[i].w+d[4][a[i].v]==d[3][p[4]]||d[4][a[i].u]+a[i].w+d[3][a[i].v]==d[3][p[4]]) b[ct2].f=1;\n         r[a[i].v]++;\n     }\n    \n    q.push(p[1]);\n    int now;\n    while(!q.empty())//\u62d3\u6251\u6392\u5e8f\u627e\u5173\u952e\u8def\u5f84 \n    {\n        now=q.front(); q.pop();\n        for(int i=h2[now];i;i=b[i].nxt)\n        {\n            --r[b[i].v];\n            if(!r[b[i].v])\n            {\n                q.push(b[i].v);\n                f[b[i].v]=max(f[b[i].v],f[now]+b[i].w*b[i].f);\n            }\n        }\n    }\n    printf(\"%d\",f[p[2]]);\n    return 0;\n}\n```",
        "postTime": 1507461355,
        "uid": 33963,
        "name": "\u6a80\u9ece\u6597\u00b7\u795e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2109 \u3010\u5728\u4e00\u8d77\u3011"
    },
    {
        "content": "\u849f\u84bb\u7684\u7b2c\u4e00\u9053\u7d2b\u9898\u9898\u89e3\u2026\u2026\u6700\u6162\u7684\u505a\u6cd5\uff08300+ms\uff09\n\n\u601d\u8def\uff1a\u9996\u5148\u8dd1\u56db\u904dDijkstra\uff0c\u9009\u51fa\u6240\u6709\u6ee1\u8db3`dists1[a]+distt1[a]==dists1[t1] && dists2[a]+distt2[a]==dists2[t2]`\u7684\u70b9\uff0c\u5373\u5728\u53cc\u65b9\u6700\u77ed\u8def\u4e0a\u90fd\u6709\u7684\u70b9\u3002\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e9b\u70b9\u6784\u6210\u4e86\u4e00\u4e9b\u5b50\u56fe\uff0c\u8fd9\u4e9b\u5b50\u56fe\u7684\u76f4\u5f84\u5c31\u662f\u6240\u6c42\u7684\u957f\u5ea6\u3002\u8bc1\u660e\u4e0d\u4f1a\u8bc1\u3002\n\n\u6c42\u76f4\u5f84\u7684\u65b9\u6cd5\u5c31\u662f\u968f\u4fbf\u9009\u4e00\u4e2a\u70b9\uff0c\u8dd1\u4e00\u904dDijkstra\uff0c\u627e\u5230\u6700\u8fdc\u7684\u90a3\u4e2a\u70b9\uff0c\u518d\u8dd1\u4e00\u904dDijkstra\uff0c\u627e\u5230\u6700\u8fdc\u7684\u8ddd\u79bb\uff0c\u5c31\u662f\u76f4\u5f84\u3002\uff08\u4e0d\u4f1a\u8bc1\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta((n+m)logm + n^2)$\uff0c\u5faa\u73af\u91cc\u7684Dijkstra\u53ef\u4ee5\u88ab\u5747\u644a\u6389\uff0c\u603b\u82b1\u8d39\u4e0d\u4f1a\u5927\u4e8e\u4e00\u6b21\u6574\u56fe\u7684Dijkstra\u3002\n\n\u4f18\u5316\u4e00\u4e0b\uff08\u5728Dijkstra\u91cc\u9762\u76f4\u63a5\u7528\u961f\u5217\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u70b9\uff09\u53ef\u4ee5\u505a\u5230$\\Theta((n+m)logm)$\uff0c\u4f46\u662f\u6211\u61d2\u2026\u2026\u518d\u8bf4\u5e38\u6570\u90a3\u4e48\u5927\uff0c\u5c31\u7b97\u4f18\u5316\u4e86\u4e5f\u4f18\u5316\u4e0d\u4e86\u51e0ms\u3002\n\n\u7528\u4e86\u4e00\u70b9\u51fd\u6570\u6307\u9488\u77e5\u8bc6\u4ee5\u7b80\u5316\u4ee3\u7801\u3002\n\n```cpp\n#include <queue>\n#include <cstdio>\nusing namespace std;\n\nvoid chkmax(int& a,int b)\n{\n\tif(b>a)\n\t{\n\t\ta = b;\n\t}\n}\n\nint beg[1505];\nint ed[450005];\nint nxt[450005];\nint len[450005];\nint top;\n\nvoid addedge(int a,int b,int l)\n{\n\t++top;\n\tlen[top] = l;\n\tnxt[top] = beg[a];\n\tbeg[a] = top;\n\ted[top] = b;\n}\n\nint n;\nint vis[1505];\n\nvoid fillter_dijkstra(int* dist,int s,bool (*fillter)(int)) //fillter\u662f\u4e2a\u51fd\u6570\u6307\u9488\n{\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tdist[i] = 0x7f7f7f7f;\n\t\tvis[i] = 0;\n\t}\n\tdist[s] = 0;\n\tpriority_queue<pair<int,int> > pq;\n\tpq.push(make_pair(0,s));\n\n\twhile(!pq.empty())\n\t{\n\t\tint th = pq.top().second;\n\t\tpq.pop();\n\t\twhile(vis[th])\n\t\t{\n\t\t\tif(pq.empty()) break;\n\t\t\tth = pq.top().second;\n\t\t\tpq.pop();\n\t\t}\n\n\t\tvis[th] = 1;\n\n\t\tfor(int p=beg[th]; p; p=nxt[p])\n\t\t{\n\t\t\tif(fillter(ed[p]) && dist[th]+len[p] < dist[ed[p]])\n\t\t\t{\n\t\t\t\tdist[ed[p]] = dist[th]+len[p];\n\t\t\t\tpq.push(make_pair(-dist[ed[p]],ed[p]));\n\t\t\t}\n\t\t}\n\t}\n}\n\nbool always(int x)\n{\n\treturn true;\n}\n\nvoid dijkstra(int* dist,int s)\n{\n\tfillter_dijkstra(dist,s,always);\n}\n\nint s1,t1,s2,t2;\nint dists1[1505];\nint dists2[1505];\nint distt1[1505];\nint distt2[1505];\n\nbool can(int a)\n{\n\treturn dists1[a]+distt1[a]==dists1[t1] && dists2[a]+distt2[a]==dists2[t2];\n}\n\nint caned[1505];\nint disttmp[1505];\n\nint main()\n{\n\tint m;\n\tscanf(\"%d%d%d%d%d%d\",&n,&m,&s1,&t1,&s2,&t2);\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tint a,b,l;\n\t\tscanf(\"%d%d%d\",&a,&b,&l);\n\t\taddedge(a,b,l);\n\t\taddedge(b,a,l);\n\t}\n\n\tdijkstra(dists1,s1);\n\tdijkstra(dists2,s2);\n\tdijkstra(distt1,t1);\n\tdijkstra(distt2,t2);\n\n\tint ans = 0;\n\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tif(!caned[i] && can(i))\n\t\t{\n\t\t\tfillter_dijkstra(disttmp,i,can);\n\n\t\t\tint maxpos = i;\n\t\t\tfor(int j=1; j<=n; ++j)\n\t\t\t{\n\t\t\t\tif(vis[j])\n\t\t\t\t{\n\t\t\t\t\tcaned[j] = 1;\n\t\t\t\t\tif(disttmp[j] > disttmp[maxpos])\n\t\t\t\t\t{\n\t\t\t\t\t\tmaxpos = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfillter_dijkstra(disttmp,maxpos,can);\n\n\t\t\tfor(int j=1; j<=n; ++j)\n\t\t\t{\n\t\t\t\tif(vis[j])\n\t\t\t\t{\n\t\t\t\t\tchkmax(ans,disttmp[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1558863505,
        "uid": 49458,
        "name": "\u6728\u6728\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "## **\u5206\u6790\uff1a**\n\n\u6211\u6700\u5f00\u59cb\u60f3\u7684\u662f\u8dd1\u4e24\u904d\u6700\u77ed\u8def\uff0c\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b\u6700\u77ed\u8def\u8d70\u4e86\u54ea\u4e9b\u8fb9\uff08\u5982\u679c\u6709\u4e24\u6761\u6700\u77ed\u8def\u5c31\u9009\u7ecf\u8fc7\u8fb9\u591a\u7684\uff09\uff0c\u6253\u4e0a\u6807\u8bb0\u3002\u4e24\u8fb9\u4e4b\u540e\u627e\u4e24\u6b21\u90fd\u6807\u8bb0\u7684\u8fb9\u6709\u591a\u5c11\u5c31\u884c\u4e86\u3002\n\n\u4f46\u3002\u3002\u3002\u6211\u5e76\u6ca1\u6709\u5b9e\u73b0\u51fa\u6765\u3002\n\n\u6700\u540e\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6b63\u89e3\uff1a\n\n## _**\u56db\u8fb9spfa+\u62d3\u6251\u6392\u5e8f\u6c42\u6700\u957f\u8fb9**_   \n\n\u5148\u8ba9\u6211\u4eec\u8003\u8651\u5982\u4f55\u6c42\u4e24\u5bf9\u70b9\u6700\u77ed\u8def\u7684\u6700\u957f\u516c\u5171\u8def\u5f84\uff1f\n\n1.\u5148\u660e\u767d\uff1a\u5982\u679c\u6709\u4e00\u6761\u8fb9\uff0c\u5b83\u7684\u8d77\u70b9\u5230\u6700\u77ed\u8def\u7684\u8d77\u70b9 + \u7ec8\u70b9\u5230\u6700\u77ed\u8def\u7684\u7ec8\u70b9 + \u8fb9\u6743 == \u6700\u77ed\u8def\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u4e00\u5b9a\u5728\u6700\u77ed\u8def\u4e0a\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6709\u4e00\u6761\u8fb9$i:from -> to$\u6743\u503c\u662fw\u5728\u6700\u77ed\u8def$x -> y$\u4e0a\uff0c\u90a3\u4e48\u6709$dis_{x->from} + dis_{to->y} + edge[i]._w == dis_{x->y}$\n\n\n2.\u6240\u4ee5\u5c31\u53ef\u4ee5\u628a\u4e24\u6761\u6700\u77ed\u8def\u5f84\u90fd\u7ecf\u8fc7\u7684\u8fb9\u91cd\u65b0\u5efa\u56fe\n\n3.\u6700\u540e\u5c31\u662f\u6c42\u6700\u957f\u8def\u5373\u53ef\uff08\u663e\u7136\u56fe\u662fDAG  \u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u6c42\uff09\u3002\n\n**\u6ce8\u610f\uff01\uff01\u6ce8\u610f\uff01\uff01\u6ce8\u610f\uff01\uff01**\n\n1.\u6700\u5f00\u59cb\u6211\u4eec\u5efa\u7684\u662f\u65e0\u5411\u56fe\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a$dis_{from->to} + w$ \u548c  $dis_{to->from} + w$\u662f\u4e00\u6837\u7684\u3002\n\n2.\u91cd\u65b0\u5efa\u56fe\u7684\u65f6\u5019\u6211\u4eec\u5efa\u7684\u662f\u6709\u5411\u56fe\u3002\n\n\u6700\u77ed\u8def\u548c\u666e\u901a\u7684$spfa$\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u7a0d\u5fae\u6539\u4e86\u4e00\u4e0bdis\u6570\u7ec4\uff0c\u90a3\u6837\u5c31\u4e0d\u7528\u5f004\u4e2adis\u4e86\u3002\n\n\u62d3\u6251\u5e8f\u4e5f\u5dee\u4e0d\u591a\uff0c$ind[i]$\u8868\u793a\u7b2c$i$\u70b9\u7684\u5165\u5ea6\u3002\n\n\n**\u603b\u4f53\u6765\u8bf4**\uff0c\u8fd9\u4e2a\u9898\u4e3b\u8981\u8fd8\u662f\u60f3\u6cd5\uff0c\u8fd8\u6709\u5bf9\u57fa\u7840\u7b97\u6cd5\u7684\u5e94\u7528\u3002\u633a\u597d\u4e00\u4e2a\u9898\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nconst int maxn = 1505;\n\ninline int read(){\n\tchar ch = getchar(); int f = 1 , x = 0;\n\twhile(ch > '9' || ch < '0'){if(ch == '-') f = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9'){x = (x << 3) + (x << 1) + ch - '0'; ch = getchar();}\n\treturn x * f;\n}\n\nint n,m,x,y,xx,yy,u,v,w;\nstruct Edge{\n\tint from,to,next,val;\n\tint tag;\n}edge[maxn * maxn] , e[maxn * maxn];\nint head1[maxn],tot1,head2[maxn],tot2;\nint dis[5][maxn],ind[maxn];\nbool vis[maxn];\nint f[maxn];\n\nvoid add(int u,int v,int w){\n\tedge[++tot1].to = v;\n\tedge[tot1].from = u;\n\tedge[tot1].next = head1[u];\n\tedge[tot1].val = w;\n\thead1[u] = tot1;\n}\n\nvoid addedge(int u,int v,int w){\n\te[++tot2].from = u;\n\te[tot2].to =\t v;\n\te[tot2].val = w;\n\te[tot2].next = head2[u];\n\thead2[u] = tot2;\n}\n\nvoid spfa(int s,int flag){\n\tqueue<int> q;\n\tfor(int i=1;i<=n;i++)  dis[flag][i] = 1e9;\n\tmemset(vis,false,sizeof(vis));\n\tq.push(s);\n\tdis[flag][s] = 0;  vis[s] = true;\n\twhile(!q.empty()){\n\t\tint cur = q.front();\n\t\tq.pop(); vis[cur] = false;\n\t\tfor(int i=head1[cur];i;i=edge[i].next){\n\t\t\tint v = edge[i].to;\n\t\t\tif(dis[flag][v] > dis[flag][cur] + edge[i].val){\n\t\t\t\tdis[flag][v] = dis[flag][cur] + edge[i].val;\n\t\t\t\tif(vis[v] == 0){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void topo(){\n\tqueue<int> que;\n\tque.push(x);\n\twhile(!que.empty()){\n\t\tint cur = que.front();\n\t\tque.pop();\n\t\tfor(int i=head2[cur];i;i=e[i].next){\n\t\t\tint v = e[i].to , w = e[i].val;\n\t\t\t--ind[v];\n\t\t\tif(!ind[v]) {\n\t\t\t\tque.push(v);\n\t\t\t\tf[v] = max(f[v] , f[cur] + e[i].tag * w);\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid rebuild(){\n\tfor(int i=1;i<=tot1;i++){\n\t\tint v = edge[i].to , u = edge[i].from , w = edge[i].val;\n\t\tif(dis[1][u] + w + dis[2][v] == dis[1][y]){\n\t\t\taddedge(u , v , w);\n\t\t\tif(dis[3][u] + w + dis[4][v] == dis[3][yy] || dis[3][v] + w + dis[4][u] == dis[3][yy])\n\t\t\t//\u4e3a\u4e86\u5904\u7406\u65e0\u5411\u56fe\u7684\u95ee\u9898 \n\t\t\te[tot2].tag = 1;\n\t\t\tind[v]++;\n\t\t}\n\t}\n}\n\nint main(){\n\tn = read(); m = read();\n\tx = read(); y = read(); xx = read(); yy = read();\n\tfor(int i=1;i<=m;i++){\n\t\tu = read(); v = read(); w = read();\n\t\tadd(u , v , w);\n\t\tadd(v , u , w);\n\t}\n\tspfa(x , 1);\n\tspfa(y , 2);\n\tspfa(xx , 3);\n\tspfa(yy , 4);\n\trebuild();\n\ttopo();\n\tprintf(\"%d\\n\",f[y]);\n\treturn 0;\n}\n```",
        "postTime": 1540376533,
        "uid": 54635,
        "name": "Kevin_F",
        "ccfLevel": 0,
        "title": "Elaxia\u7684\u8def\u7ebf"
    },
    {
        "content": "\u4eba\u751f\u4e2dA\u7684\u7b2c\u4e8c\u9053\u7701\u9009/NOI-\u2026\u2026\n\n\u8fd9\u9898\u597d\u50cf\u662f~~\u7528\u67d0F\u59d3\u5927\u4f6c\u88f8\u7684\u589e\u5e7f\u8def\u7b97\u6cd5\u505a\u7684~~\u6700\u957f\u516c\u5171\u6700\u77ed\u8def\u6a21\u677f\u3002\n\n\u5176\u5b9e\u7406\u89e3\u7b97\u6cd5\u5e76\u4e0d\u96be\uff0c\u5148\u628a\u4ee5\u56db\u4e2a\u70b9\u4e3a\u8d77\u70b9\u7684SPFA\u8dd1\u4e00\u904d\uff0c\u7136\u540e\u5efa\u65b0\u56fe\uff0c\u53ea\u4fdd\u7559Elaxia\u7684\u6700\u77ed\u8def\uff08\u8fb9\u6743\u4e3a0\uff09\u548cElaxia\u3001w\u7684\u516c\u5171\u6700\u77ed\u8def\u3002\u8fd9\u91cc\u600e\u4e48\u5224\u65ad\u67d0\u8fb9\u662f\u5426\u662f\u6700\u77ed\u8def\u5462\uff1f\u7b54\u6848\u662f\u7528\u8fd9\u4e2a\uff1a\n\n```cpp\ndis(s,i)+len(i,j)+dis(j,t)=dis(s,t)\n```\n\u4e0b\u4e00\u6b65\u53ef\u4ee5\u7528\u62d3\u6251\u6392\u5e8f\u9012\u63a8\uff1a\n\n```cpp\nf[b[i].t]=max(f[b[i].t],f[temp]+b[i].v*b[i].ok)\n```\n\u6700\u540e\u8f93\u51faElaxia\u7ec8\u70b9\u7684f\u503c\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nqueue <int> q;\nstruct node\n{\n    int f,t,nt,v,ok;\n}a[2000005],b[2000005];\nint n,m,head[1505],len,lt,s[6],ht[1505],visited[1505],dis[5][1505],f[1505],to[1505];\nvoid spfa(int p)\n{\n    visited[s[p]]=1;\n    q.push(s[p]);\n    for (int i=1;i<=n;i++)\n    if (i!=s[p])dis[p][i]=0x7fffffff/3;\n    int temp;\n    while (!q.empty())\n    {\n        temp=q.front();\n        q.pop();\n        visited[temp]=0;\n        for (int i=head[temp];i;i=a[i].nt)\n        {\n            if (dis[p][a[i].t]>dis[p][temp]+a[i].v)\n            {\n                dis[p][a[i].t]=dis[p][temp]+a[i].v;\n                if (visited[a[i].t]==0)visited[a[i].t]=1,q.push(a[i].t);\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for (int i=1;i<=4;i++)\n    scanf(\"%d\",&s[i]);\n    int u,v,w;\n    for (int i=1;i<=m;i++)//\u8f93\u5165\uff0c\u53cc\u5411\u5efa\u56fe\n    {\n        scanf(\"%d %d %d\",&u,&v,&w);\n        a[++len].t=v;\n        a[len].f=u;\n        a[len].v=w;\n        a[len].nt=head[u];\n        head[u]=len;\n        a[++len].t=u;\n        a[len].f=v;\n        a[len].v=w;\n        a[len].nt=head[v];\n        head[v]=len;\n    }\n    for (int i=1;i<=4;i++)//\u56db\u6b21SPFA\n    spfa(i);\n    for (int i=1;i<=len;i++)\n    if (dis[1][a[i].f]+a[i].v+dis[2][a[i].t]==dis[1][s[2]])//\u91cd\u5efa\u56fe\uff0c\u4ee5Elaxia\u4e3a\u4e3b\n    {\n        b[++lt].t=a[i].t;\n        if (dis[3][a[i].f]+a[i].v+dis[4][a[i].t]==dis[3][s[4]]||dis[4][a[i].f]+a[i].v+dis[3][a[i].t]==dis[3][s[4]])\n        b[lt].ok=1;\n        b[lt].f=a[i].f;\n        b[lt].v=a[i].v;\n        b[lt].nt=ht[a[i].f];\n        ht[a[i].f]=lt;\n        to[a[i].t]++;\n    }\n    q.push(s[1]);//\u62d3\u6251\u6392\u5e8f\n    int temp;\n    while (!q.empty())\n    {\n        temp=q.front();\n        q.pop();\n        for (int i=ht[temp];i;i=b[i].nt)\n        {\n            --to[b[i].t];\n            if (to[b[i].t]==0)\n            {\n                q.push(b[i].t);\n                f[b[i].t]=max(f[b[i].t],f[temp]+b[i].v*b[i].ok);\n            }\n        }\n    }\n    printf(\"%d\",f[s[2]]);\n}\n```",
        "postTime": 1507091402,
        "uid": 33930,
        "name": "vani_prcups",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "\uff08\u6ce8\uff1a\u672c\u9898\u89e3\u7684 std \u901a\u8fc7\u4e86\u9898\u76ee\u8ba8\u8bba\u533a\u4e2d\u7531 @[lemir3](https://www.luogu.com.cn/user/54986) \u7ed9\u51fa\u7684 [HACK \u6570\u636e](https://www.luogu.com.cn/discuss/261934)\uff09\n\n### 1.\u9898\u76ee\u7c7b\u578b\u5224\u65ad\n\n\u6d4f\u89c8\u9898\u76ee\uff0c\u7b80\u5316\u9898\u610f\uff1a\n\n>\u6c42\u4e00\u65e0\u5411\u56fe\u4e2d\uff0c\u4e24\u5bf9\u70b9\u95f4\u6700\u77ed\u8def\u7684\u6700\u957f\u516c\u5171\u8def\u5f84\u3002\uff08\u6700\u77ed\u8def\u53ef\u80fd\u6709\u591a\u6761\uff09\n\n\u663e\u7136\u662f\u6700\u77ed\u8def\u76f8\u5173\u7684\u56fe\u8bba\u9898\u3002\n\n\n\n\n### 2.\u57fa\u672c\u601d\u8def\n\n\u8003\u8651\u5efa\u7acb\u4e00\u4e2a\u201c\u6700\u77ed\u8def\u516c\u5171\u8def\u5f84\u56fe\u201d\uff0c\u91cc\u9762\u53ea\u5305\u542b\u4e24\u70b9\u5bf9\u7684\u6700\u77ed\u8def\u7684\u516c\u5171\u8def\u5f84\uff0c\u518d\u6c42\u51fa\u5176\u4e2d\u6700\u957f\u7684\u8def\u5f84\u5373\u53ef\u3002\n\n### \u9996\u5148\u626b\u6ce2\u96f7\uff01\n> $ 1. $ \u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5bf9\uff0c\u8003\u8651\u8d77\u8bab\u70b9\u5404\u641c\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u8bb0\u5f55\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u6570\u7ec4 $ dist[start][i],dist[end][i] $ \u3002\u800c\u5f53 $ dist[start][i]+dist[end][i] $ \u7b49\u4e8e\u8d77\u8bab\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u5728\u8d77\u8bab\u70b9\u7684\u67d0\u4e00\u6761\u6700\u77ed\u8def\u4e0a\uff0c\u7528\u5f97\u51fa\u7684\u8fd9\u4e9b\u70b9\u91cd\u65b0\u5efa\u56fe\u3002\n\n\u8fd9\u4e2a\u60f3\u6cd5\u662f\u9519\u8bef\u7684\uff01\u6211\u4eec\u8981\u6c42\u7684\u4e0d\u662f\u6700\u77ed\u8def\u5305\u542b\u516c\u5171\u70b9\u6570\u7684\u6700\u5927\u503c\uff0c\u800c\u6c42\u7684\u662f\u6700\u957f\u516c\u5171\u8def\u5f84\u3002\u6211\u4eec\u8981\u679a\u4e3e\u7684\u662f\u6700\u77ed\u8def\u5305\u542b\u8fb9\uff0c\u800c\u4e0d\u662f\u6700\u77ed\u8def\u5305\u542b\u70b9\u3002\u4e24\u4e2a\u5728**\u4e0d\u540c\u6700\u77ed\u8def**\u4e0a\u7684\u70b9\u53ef\u80fd\u8fde\u63a5\u6709\u65b0\u7684\u4e00\u6761\u8fb9\uff0c\u800c\u8fd9\u6761\u8fb9\u662f\u4e0d\u53ef\u4ee5\u52a0\u4e0a\u53bb\u7684\uff01\n\n\u867d\u7136\u4e0a\u9762\u60f3\u6cd5\u9519\u8bef\uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u53ef\u4ece\u4e2d\u83b7\u5f97\u4e00\u4e9b\u601d\u8def\u3002\u90a3\u5c31\u662f\u679a\u4e3e\u6bcf\u6761\u8fb9\u7684\u7aef\u70b9 $ x,y $ \uff0c\u82e5 $ dist[start][x]+dist[end][y]+d(x,y)=dist[start][end] $ \uff0c\u8bf4\u660e**\u8fd9\u6761\u8fb9**\u5b58\u5728\u4e8e\u8d77\u8bab\u70b9\u7684\u6700\u77ed\u8def\u4e0a\u3002\n\n\n### \u4e8c\u6b21\u626b\u96f7!\n\n> $ 2. $ \u7531\u8d77\u70b9\u5230\u7ec8\u70b9\u641c\u5f97\u7684\u8fb9\u5efa\u7acb\u65b0\u7684\u4e00\u4e2a\u7684 DAG \uff0c\u8dd1\u4e00\u8fb9\u62d3\u6251\u6392\u5e8f\u6c42\u5f97\u7b54\u6848\u3002\n\n\u6211\u4eec\u80af\u5b9a\u9700\u8981\u8fd9\u4e48\u5e72\uff0c**\u4f46\u4e0d\u4ec5\u4ec5\u662f\u8fd9\u4e48\u5e72\u3002** \u6211\u4eec\u4ecd\u7136\u9700\u8981\u7531\u7ec8\u70b9\u5230\u8d77\u70b9\u518d\u5efa\u7acb\u4e00\u4e2a DAG \uff0c\u518d\u8dd1\u4e00\u8fb9\u62d3\u6251\u6392\u5e8f\uff0c\u624d\u80fd\u6c42\u5f97\u6700\u7ec8\u7b54\u6848\u3002\n\n\u56e0\u4e3a\u9898\u76ee\u51c6\u786e\u63d0\u5230\u4e86\u662f\u5728 **\"\u65e0\u5411\u56fe\"** \u4e2d\u7684\u6700\u77ed\u8def\u6700\u957f\u516c\u5171\u8def\u5f84\u3002\u4e5f\u5c31\u662f\u4e0d\u8003\u8651\u4e24\u70b9\u5bf9\u7684\u6700\u77ed\u8def\u7684\u516c\u5171\u8def\u5f84\u4e0a\u72b6\u6001\u662f**\u76f8\u540c\u65b9\u5411**\u6216\u662f**\u76f8\u53cd\u65b9\u5411**\u3002\u6240\u4ee5\u5efa DAG \u8981\u5efa\u4e24\u6b21\uff01\n\n### 3.std\u4ee3\u7801 ~~\uff08\u4f60\u4eec\u6700\u559c\u6b22\u7684\uff09~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#define N 1000005\n#define INF 0x7fffffff/2\nusing namespace std;\nint MAX(int c,int d)\n{\n\treturn c>d?c:d;\n}\nint n,m;\nint s1,t1,s2,t2;\nstruct Edge\n{\n\tint next,to,v;\n};\nEdge e[N];\nint h[N],cnt;\nvoid AddEdge(int c,int d,int v)\n{\n\te[++cnt]=(Edge){h[c],d,v};\n\th[c]=cnt;\n}\nEdge e2[N];\nint h2[N],cnt2;\nvoid AddEdge2(int c,int d,int v)\n{\n\te2[++cnt2]=(Edge){h2[c],d,v};\n\th2[c]=cnt2;\n}\nqueue<int> q;\nint rd[N],dp[N];\nvoid tpsort()\n{\n\tfor(int i=1;i<=n;i++) if(!rd[i]) q.push(i);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front(); q.pop();\n\t\tfor(int i=h2[u];i;i=e2[i].next)\n\t\t{\n\t\t\tint y=e2[i].to,C=e2[i].v;\n\t\t\tdp[y]=max(dp[y],dp[u]+C);\n\t\t\tif(!--rd[y]) q.push(y);\n\t\t}\n\t}\n}\nint d[5][N];\nbool vst[5][N];\nvoid SPFA(int num,int r)\n{\n\tfor(int i=1;i<=n;i++) d[num][i]=INF;\n\td[num][r]=0;\n\tq.push(r);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front(); q.pop();\n\t\tvst[num][u]=false;\n\t\tfor(int i=h[u];i;i=e[i].next)\n\t\t{\n\t\t\tint y=e[i].to,C=e[i].v;\n\t\t\tif(d[num][y]>d[num][u]+C)\n\t\t\t{\n\t\t\t\td[num][y]=d[num][u]+C;\n\t\t\t\tif(!vst[num][y])\n\t\t\t\t{\n\t\t\t\t\tvst[num][y]=true;\n\t\t\t\t\tq.push(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tscanf(\"%d %d %d %d\",&s1,&t1,&s2,&t2);\n\tfor(int i=1,x,y,z;i<=m;i++)\n\t{\n\t\tscanf(\"%d %d %d\",&x,&y,&z);\n\t\tAddEdge(x,y,z);\n\t\tAddEdge(y,x,z);\n\t}\n\tSPFA(1,s1); SPFA(2,t1); SPFA(3,s2); SPFA(4,t2);\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=h[i];j;j=e[j].next)\n\t\t{\n\t\t\tint y=e[j].to,C=e[j].v;\n\t\t\tif(d[3][i]+d[4][y]+C==d[3][t2])\n\t\t\t{\n\t\t\t\tif(d[1][i]+d[2][y]+C==d[1][t1])\n\t\t\t\t{\n\t\t\t\t\tAddEdge2(i,y,C);\n\t\t\t\t\trd[y]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\ttpsort();\n\tfor(int i=1;i<=n;i++) ans=max(ans,dp[i]);\n\tmemset(dp,0,sizeof(dp));\n\tmemset(rd,0,sizeof(rd));\n\tmemset(e2,0,sizeof(e2));\n\tmemset(h2,0,sizeof(h2));\n\tcnt2=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=h[i];j;j=e[j].next)\n\t\t{\n\t\t\tint y=e[j].to,C=e[j].v;\n\t\t\tif(d[3][i]+d[4][y]+C==d[3][t2])\n\t\t\t{\n\t\t\t\tif(d[1][y]+d[2][i]+C==d[1][t1])\n\t\t\t\t{\n\t\t\t\t\tAddEdge2(y,i,C);\n\t\t\t\t\trd[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\ttpsort();\n\tfor(int i=1;i<=n;i++) ans=max(ans,dp[i]);\n\tprintf(\"%d\",ans);\n}\n```\n",
        "postTime": 1643384981,
        "uid": 432127,
        "name": "Avocadooo",
        "ccfLevel": 0,
        "title": "P2149-Elaxia\u7684\u8def\u7ebf-\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u660e\u767d\u540e\u601d\u8def\u5f88\u7b80\u5355\uff1a\u56db\u904dSPFA\uff0c\u7136\u540e\u5224\u65ad\u6bcf\u4e00\u6761\u8fb9\u662f\u5426\u53ef\u4ee5\u5728\u6700\u77ed\u8def\u4e2d\uff0c\u662f\u7684\u8bdd\u5c31\u65b0\u5f00\u4e00\u4e2a\u56fe\uff0c\u5728\u540c\u4e00\u4f4d\u7f6e\u52a0\u5165\u4e00\u6761\u5355\u5411\u8fb9\uff0c\u7136\u540e\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u7ef4\u62a4\u7b54\u6848\u6700\u5927\u503c\u5c31\u597d\u4e86\u3002\u7531\u4e8e\u539f\u9898\u4e2d\u4e24\u4eba\u9762\u5bf9\u9762\u7ecf\u8fc7\u4e5f\u540c\u6837\u7b97\u4f5c\u53ef\u884c\u65b9\u6848\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u9009\u62e9\u51fa\u5141\u8bb8\u4e24\u4eba\u9762\u5bf9\u9762\u7ecf\u8fc7\u7684\u53ef\u884c\u6700\u77ed\u8def\u65b9\u6848\uff0c\u518d\u91cd\u65b0\u5f00\u4e00\u4e2a\u56fe\u8dd1\u4e00\u904d\u62d3\u6251\u6392\u5e8f\uff0c\u7ef4\u62a4\u51fa\u7b54\u6848\u5c31\u597d\u4e86\u3002\n\n\u53e6\u5916\u6ce8\u610f\uff1a\u8fd9\u9053\u9898\u867d\u7136\u6709\u5f88\u591a\u4ebaAC\u4e86\uff0c\u4f46\u662f\u5728bzoj\u7684\u8ba8\u8bba\u4e2d\u6709\u4e24\u7ec4\u6570\u636e\uff0c\u5927\u90e8\u5206\u4eba\u7684\u4ee3\u7801\u662f\u65e0\u6cd5\u901a\u8fc7\u8fd9\u4e24\u4e2a\u6d4b\u8bd5\u6570\u636e\u7684\uff0c\u5305\u62ec\u697c\u4e0a\u4e24\u4f4d\u7684\u9898\u89e3\u3002\u7ecf\u6d4b\u8bd5\uff0cPoPoQQQ\u5927\u795e\u7684\u4ee3\u7801\u662f\u771f\u6b63\u6b63\u786e\u7684\uff0c\u4e8e\u662f\u672c\u849f\u84bb\u5c31\u53c2\u8003\u4e86Po\u59d0\u7684\u4ee3\u7801^\\_^\n\n\u4e0d\u8fc7Po\u59d0\u7684\u4ee3\u7801\u4e2d\u6700\u540e\u4e24\u904dSPFA\u662f\u5197\u4f59\u7684\uff0c\u53ea\u8981\u6539\u4e00\u4e0b\u5224\u65ad\u4e2d\u7684\u6570\u7ec4\u540d\u79f0\u5c31\u53ef\u4ee5\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\n\n[Po\u59d0\u4f20\u9001\u95e8](http://blog.csdn.net/popoqqq/article/details/44513281)\n\n\u9644\u4e0abzoj\u8ba8\u8bba\u4e2d\u7684\u4e24\u7ec4\u6570\u636e\uff1a\n\n8 8\n1 3 2 4\n\n1 6 1\n3 8 1\n2 5 1\n4 7 1\n5 6 1\n6 7 1\n7 8 1\n8 5 1\n\u6b63\u786e\u7b54\u6848\uff1a1\uff0c\u9519\u8bef\u7b54\u6848\uff1a2\n\n8 9\n1 6 7 8\n\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n7 3 5\n7 5 5\n2 8 4\n4 8 4\n\u6b63\u786e\u7b54\u6848\uff1a1\uff0c\u9519\u8bef\u7b54\u6848\uff1a3\n\n\u849f\u84bb\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```c++\n#include<queue>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nstruct edge\n{\n    int nxt,to,dis;\n}a[3000010];\nint head[10000];\nint Head[10000];\nint lv[10000];\nbool b[10000];\nint s1[10000],t1[10000],s2[10000],t2[10000];\nint n,m,x1,y1,x2,y2,x,y,z,num,ans;\nqueue<int>q;\ninline int max(int a,int b){return a>b?a:b;}\ninline void add(int head[],int x,int y,int z){a[++num].nxt=head[x],a[num].to=y,a[num].dis=z,head[x]=num;}\ninline void Add(int head[],int x,int y,int z){add(head,x,y,z);add(head,y,x,z);}\ninline void SPFA(int S,int dis[])\n{\n    memset(dis,0x3f,sizeof (int)*1510);\n    dis[S]=0;q.push(S);\n    while(!q.empty())\n    {\n        int tmp=q.front();q.pop();\n        b[tmp]=0;\n        for(int i=head[tmp];i;i=a[i].nxt)\n          if(dis[a[i].to]>dis[tmp]+a[i].dis)\n          {\n              dis[a[i].to]=dis[tmp]+a[i].dis;\n              if(!b[a[i].to]) b[a[i].to]=1,q.push(a[i].to);\n          }\n    }\n}\ninline void topologysort()\n{\n    int dis[10000];\n    memset(dis,0,sizeof(dis));\n    for(int i=1;i<=n;i++)\n      if(!lv[i]) q.push(i);\n    while(!q.empty())\n    {\n        int tmp=q.front();q.pop();\n        ans=max(ans,dis[tmp]);\n        for(int i=Head[tmp];i;i=a[i].nxt)\n        {\n            dis[a[i].to]=max(dis[a[i].to],dis[tmp]+a[i].dis);\n            if(!--lv[a[i].to]) q.push(a[i].to);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d%d%d%d\",&n,&m,&x1,&y1,&x2,&y2);\n    for(int i=1;i<=m;i++)\n      scanf(\"%d%d%d\",&x,&y,&z),Add(head,x,y,z);\n    SPFA(x1,s1);SPFA(y1,t1);\n    SPFA(x2,s2);SPFA(y2,t2);\n    for(int tmp=1;tmp<=n;tmp++)\n      for(int i=head[tmp];i;i=a[i].nxt)\n        if(s1[tmp]+a[i].dis+t1[a[i].to]==s1[y1]&&s2[tmp]+a[i].dis+t2[a[i].to]==s2[y2])\n          add(Head,tmp,a[i].to,a[i].dis),lv[a[i].to]++;\n    topologysort();\n    memset(Head,0,sizeof(Head));\n    for(int tmp=1;tmp<=n;tmp++)\n      for(int i=head[tmp];i;i=a[i].nxt)\n        if(s1[tmp]+a[i].dis+t1[a[i].to]==s1[y1]&&s2[a[i].to]+a[i].dis+t2[tmp]==s2[y2])\n          add(Head,tmp,a[i].to,a[i].dis),lv[a[i].to]++;\n    topologysort();\n    printf(\"%d\",ans);\n    return 0;\n}\n```c++\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nstruct edge\n{\n    int nxt,to,dis;\n}a[3000010];\nint head[10000];\nint Head[10000];\nint lv[10000];\nbool b[10000];\nint s1[10000],t1[10000],s2[10000],t2[10000];\nint n,m,x1,y1,x2,y2,x,y,z,num,ans;\nqueue<int>q;\ninline int max(int a,int b){return a>b?a:b;}\ninline void add(int head[],int x,int y,int z){a[++num].nxt=head[x],a[num].to=y,a[num].dis=z,head[x]=num;}\ninline void Add(int head[],int x,int y,int z){add(head,x,y,z);add(head,y,x,z);}\ninline void SPFA(int S,int dis[])\n{\n    memset(dis,0x3f,sizeof (int)*1510);\n    dis[S]=0;q.push(S);\n    while(!q.empty())\n    {\n        int tmp=q.front();q.pop();\n        b[tmp]=0;\n        for(int i=head[tmp];i;i=a[i].nxt)\n          if(dis[a[i].to]>dis[tmp]+a[i].dis)\n          {\n              dis[a[i].to]=dis[tmp]+a[i].dis;\n              if(!b[a[i].to]) b[a[i].to]=1,q.push(a[i].to);\n          }\n    }\n}\ninline void topologysort()\n{\n    int dis[10000];\n    memset(dis,0,sizeof(dis));\n    for(int i=1;i<=n;i++)\n      if(!lv[i]) q.push(i);\n    while(!q.empty())\n    {\n        int tmp=q.front();q.pop();\n        ans=max(ans,dis[tmp]);\n        for(int i=Head[tmp];i;i=a[i].nxt)\n        {\n            dis[a[i].to]=max(dis[a[i].to],dis[tmp]+a[i].dis);\n            if(!--lv[a[i].to]) q.push(a[i].to);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d%d%d%d\",&n,&m,&x1,&y1,&x2,&y2);\n    for(int i=1;i<=m;i++)\n      scanf(\"%d%d%d\",&x,&y,&z),Add(head,x,y,z);\n    SPFA(x1,s1);SPFA(y1,t1);\n    SPFA(x2,s2);SPFA(y2,t2);\n    for(int tmp=1;tmp<=n;tmp++)\n      for(int i=head[tmp];i;i=a[i].nxt)\n        if(s1[tmp]+a[i].dis+t1[a[i].to]==s1[y1]&&s2[tmp]+a[i].dis+t2[a[i].to]==s2[y2])\n          add(Head,tmp,a[i].to,a[i].dis),lv[a[i].to]++;\n    topologysort();\n    memset(Head,0,sizeof(Head));\n    for(int tmp=1;tmp<=n;tmp++)\n      for(int i=head[tmp];i;i=a[i].nxt)\n        if(s1[tmp]+a[i].dis+t1[a[i].to]==s1[y1]&&s2[a[i].to]+a[i].dis+t2[tmp]==s2[y2])\n          add(Head,tmp,a[i].to,a[i].dis),lv[a[i].to]++;\n    topologysort();\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n```cpp",
        "postTime": 1491434167,
        "uid": 17697,
        "name": "wumingshi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    },
    {
        "content": "\u5176\u5b9e\u697c\u4e0b\u51e0\u4f4d\u7ed9\u7684\u5224\u5b9a\u201c\u67d0\u4e00\u6761\u8fb9\u5728\u4e0d\u5728\u6700\u77ed\u8def\u4e2d\u7684\u65b9\u6cd5\u201d\u786e\u5b9e\u4e0d\u9519\n\n\u5373\u6839\u636e\u6700\u77ed\u8def\u7684\u6027\u8d28\uff0c\u82e5dis(s,i)+len(i,j)+dis(j,t)=dis(s,t)\uff0c\u5219\u8fb9(i,j)\u5728s->t\u7684\u6700\u77ed\u8def\u4e0a\n\n\u4f46\u662f\u6211\u5e38\u7528\u7684\u662f\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff0c\u6548\u7387\u4e5f\u4e0d\u9519\n\n\u8fd9\u79cd\u65b9\u6cd5\u7c7b\u4f3c\u4e8edp\u4e2d\uff0c\u8ba1\u7b97\u51fa\u6240\u6709\u72b6\u6001\uff0c\u6700\u540e\u8981\u6253\u5370\u89e3\u7684\u65f6\u5019\u7684\u201c\u987a\u7740\u6700\u7ec8\u72b6\u6001\u627e\u51b3\u7b56\u201d\n\n\u8fd9\u79cd\u65b9\u6cd5\u53ea\u7528spfa\u4e24\u904d\uff0c\u4e0d\u8fc7\u4ecd\u7136\u8981\u5012\u5e8f\u5bfb\u627e\u4e24\u904d\n\n\u5373\u4ecex1\u70b9spfa\u4e00\u904d\u4e4b\u540e\uff0c\u4ecey1\u70b9\u5012\u5e8f\u5bfb\u627e\uff0c\u5bf9\u4e8e\u6240\u6709\u7684y1\u7684\u76f8\u90bb\u8282\u70b9v\uff0c\u82e5dist[v] + len(v,y1) = dist[y1]\uff0c\u5219\u8fb9(v,y1)\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u70b9v\u5728\u6700\u77ed\u8def\u4e0a\n\n\u7136\u540e\u628av\u70b9\u63a8\u5165\u961f\u5217\uff0c\u7528bfs\u7684\u65b9\u5f0f\u5bf9\u4e8e\u6240\u6709\u7684\u201c\u5728\u6700\u77ed\u8def\u4e0a\u7684\u70b9\u201d\u90fd\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u8fd9\u6837\u5c31\u6c42\u51fa\u4e86\u6240\u6709\u5728x1->y1\u7684\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u53ef\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\u4fdd\u5b58\uff0c\u65b9\u4fbf\u67e5\u627e\n\n\u7136\u540e\u4ecex2\u70b9spfa\u4e4b\u540e\uff0c\u7528\u76f8\u540c\u7684\u65b9\u5f0f\u627ex2->y2\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\uff0c\u5982\u679c\u6709\u8fb9(u,v)\u540c\u65f6\u5728x1->y1\u548cx2->y2\u7684\u6700\u77ed\u8def\u4e0a\u51fa\u73b0\u4e86\n\n\u90a3\u4e48\u5728\u65b0\u7684\u201c\u6700\u77ed\u8def\u56fe\u201d\u4e2d\u6784\u9020\u4e00\u6761\u5f27<u,v>\uff0c\u5176\u4e2ddist[u] < dist[v]\uff0c\u8fd9\u91cc\u7684dist\u53ef\u4ee5\u53d6\u201c\u4ecex1\u5f00\u59cbspfa\u7684dist\u201d\u6216\u8005\u662f\u201c\u4ecex2\u5f00\u59cbspfa\u7684dist\u201d\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u4f46\u662f\u80af\u5b9a\u4e0d\u80fd\u4e24\u4e2a\u6df7\u7740\u7528\u5566\u3002\u3002\u3002\n\n\u8bf4\u7684\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u8be6\u89c1\u4ee3\u7801\uff0c\u91cd\u590d\u4ee3\u7801\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u770b\u8d77\u6765\u6bd4\u8f83\u957f\uff0c\u5b9e\u9645\u4e0a\u8fd8\u662f\u5f88\u597d\u7406\u89e3\u7684\u3002\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst int MAXN = 1502, MAXM = 1125000;\nconst int INF = 0x3f3f3f3f;\nint n,m,x1,my_y1,x2,y2;\nstruct Myque {\n    int arr[MAXN], head, tail;\n    Myque() { clear(); }\n    void clear() { head = tail = 0; }\n    void push_back( int num ) { arr[tail] = num; if( ++tail == MAXN ) tail = 0; }\n    void push_front( int num ) { if( --head == -1 ) head = MAXN-1; arr[head] = num; }\n    void pop() { if( ++head == MAXN ) head = 0; }\n    int front() { return arr[head]; }\n    bool empty() { return head == tail; }\n};\nstruct Graph {\n    int head[MAXN], to[MAXM<<1], nxt[MAXM<<1], w[MAXM<<1], idx;\n    Graph() { idx = 0; memset( head, -1, sizeof(head) ); }\n    void addedge( int u, int v, int l ) {\n        to[idx] = v; w[idx] = l; nxt[idx] = head[u]; head[u] = idx; ++idx;\n    }\n    bool inq[MAXN]; Myque q; int dist[MAXN];\n    void spfa( int s ) {\n        memset( dist, 0x3f, sizeof(dist) ); dist[s] = 0;\n        memset( inq, false, sizeof(inq) ); inq[s] = true; q.push_back(s);\n        while( !q.empty() ) {\n            int u = q.front(); q.pop(); inq[u] = false;\n            for( int e = head[u]; ~e; e = nxt[e] ) {\n                int v = to[e];\n                if( dist[v] > dist[u] + w[e] ) {\n                    dist[v] = dist[u] + w[e];\n                    if( !inq[v] ) { inq[v] = true;\n                        if( dist[v] <= q.front() ) q.push_front(v);\n                        else q.push_back(v);\n                    }\n                }\n            }\n        }\n    }\n}origin,sp;\nnamespace Toposort {\n    int in[MAXN]; Myque q; Myque rstq;\n    void init() { memset( in, 0, sizeof(in) ); }\n    void topo( const Graph &g ) {\n        for( int i = 1; i <= n; ++i ) if( !in[i] ) q.push_back(i);\n        while( !q.empty() ) {\n            int u = q.front(); q.pop(); rstq.push_back(u);\n            for( int e = g.head[u]; ~e; e = g.nxt[e] ) {\n                int v = g.to[e];\n                if( --in[v] == 0 ) q.push_back(v);\n            }\n        }\n    }\n    int dist[MAXN];\n    int dpf( const Graph &g ) {\n        memset( dist, 0, sizeof(dist) ); int ans = 0;\n        while( !rstq.empty() ) {\n            int u = rstq.front(); rstq.pop(); ans = max( ans, dist[u] );\n            for( int e = g.head[u]; ~e; e = g.nxt[e] ) {\n                int v = g.to[e], w = g.w[e];\n                dist[v] = max( dist[v], dist[u] + w );\n            }\n        }\n        return ans;\n    }\n}\nusing Toposort::in;\nusing Toposort::topo;\nusing Toposort::dpf;\nnamespace MarkPath {\n    int adj[MAXN][MAXN]; Myque q; bool vis[MAXN];\n    void mark_path( const Graph &g, int t ) {\n        memset( adj, 0, sizeof(adj) ); q.push_back(t);\n        memset( vis, false, sizeof(vis) ); vis[t] = true;\n        while( !q.empty() ) {\n            int u = q.front(); q.pop();\n            for( int e = g.head[u]; ~e; e = g.nxt[e] ) {\n                int v = g.to[e], w = g.w[e];\n                if( g.dist[v] == g.dist[u] - w ) {\n                    adj[u][v] = adj[v][u] = w;\n                    if( !vis[v] ) {\n                        vis[v] = true; q.push_back(v);\n                    }\n                }\n            }\n        }\n    }\n    void mark_path_2( const Graph &g, int t, Graph &obj ) {\n        memset( vis, false, sizeof(vis) ); vis[t] = true;\n        q.push_back(t); Toposort::init();\n        while( !q.empty() ) {\n            int u = q.front(); q.pop();\n            for( int e = g.head[u]; ~e; e = g.nxt[e] ) {\n                int v = g.to[e], w = g.w[e];\n                if( g.dist[v] == g.dist[u] - w ) {\n                    if( !vis[v] ) {\n                        vis[v] = true; q.push_back(v);\n                    }\n                    if( adj[v][u] ) {\n                        obj.addedge(v,u,w); in[u]++;\n                    }\n                }\n            }\n        }\n    }\n}\nusing MarkPath::mark_path;\nusing MarkPath::adj;\nusing MarkPath::mark_path_2;\nint main() {\n    scanf( \"%d%d%d%d%d%d\", &n, &m, &x1, &my_y1, &x2, &y2 );\n    for( int i = 0; i < m; ++i ) {\n        int u,v,l; scanf( \"%d%d%d\", &u, &v, &l );\n        origin.addedge(u,v,l); origin.addedge(v,u,l);\n    }\n    origin.spfa(x1); mark_path(origin,my_y1);\n    origin.spfa(x2); mark_path_2(origin,y2,sp);\n    topo(sp); printf( \"%d\\n\", dpf(sp) );\n    return 0;\n}\n\n```",
        "postTime": 1480321694,
        "uid": 8212,
        "name": "__stdcall",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2149 \u3010[SDOI2009]Elaxia\u7684\u8def\u7ebf\u3011"
    }
]