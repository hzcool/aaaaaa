[
    {
        "content": "## \u9898\u610f\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6811\uff0c$m$ \u6b21\u64cd\u4f5c\uff1a\n\n- \u6dfb\u52a0\u4e00\u6761\u8def\u5f84 $(u_i,v_i)$\uff0c\u6743\u503c\u4e3a $w_i$\n- \u64a4\u56de\u4e00\u6b21\u64cd\u4f5c\n\n\u6bcf\u4e00\u6b21\u64cd\u4f5c\u540e\u6c42\u51fa\u4e00\u6761\u8def\u5f84\u4f7f\u5f97\u4e0e\u8fd9\u6761\u8def\u5f84\u6709\u4ea4\u7684\u8def\u5f84\u7684\u6743\u503c\u548c\u6700\u5927\u3002\n\n## \u9898\u89e3\n\n100\u591a\u901a\u8fc7\u6ca1\u6709\u9898\u89e3\u975e\u5e38\u6050\u6016\u3002\u6765\u732e\u4e2a\u4e11\u3002\n\n\u4e0b\u9762\u53ea\u8003\u8651\u52a0\u8def\u5f84\u64cd\u4f5c\uff0c\u5220\u8def\u5f84\u589e\u52a0\u4e00\u6761\u76f8\u53cd\u6570\u5373\u53ef\u3002\n\n\u4e0b\u9762\u8bb0 $x\\in (u,v)$ \u8868\u793a $x$ \u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u3002\n\n\u9996\u5148\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84 $(u,v)$\uff0c\u6211\u4eec\u5982\u679c\u7b80\u6d01\u5730\u8868\u793a\u51fa\u6240\u6709\u4e0e\u5b83\u6709\u4ea4\u7684\u8def\u5f84\u634f\uff1f\u53d1\u73b0\u6709\u4e24\u79cd $(a,b)$ \u6ee1\u8db3\u6761\u4ef6\uff1a\n\n- $\\mathrm{LCA}(a,b)\\in (u,v)$ \u4e14 $\\mathrm{LCA}(a,b)\\ne\\mathrm{LCA}(u,v)$\n- $\\mathrm{LCA}(u,v)\\in (a,b)$\n\n\u53d1\u73b0\u6240\u6709\u6709\u4ea4\u7684 $(a,b)$ \u5728\u4e0a\u9762\u8fd9\u4e2a\u4e1c\u897f\u4e2d\u4e0d\u91cd\u4e0d\u6f0f\u5f97\u88ab\u6570\u5230\u4e86\u4e00\u6b21\u3002\u6362\u6210\u6743\u503c\u8fd9\u4e2a\u663e\u7136\u4e5f\u662f\u4e0d\u91cd\u4e0d\u6f0f\u7684\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8bb0 $val2_i$ \u8868\u793a\u6240\u6709 $\\mathrm{LCA}(u,v)=i$ \u7684\u6743\u503c\u548c\uff0c$val1_i$  \u8868\u793a\u6240\u6709 $i\\in(u,v)$ \u7684 $w$ \u7684\u6743\u503c\u548c\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u6761\u8def\u5f84\u6709\u4ea4\u7684\u6743\u503c\u548c\u5199\u6210\u975e\u5e38\u6f02\u4eae\u7684\u5f62\u5f0f\uff1a**\u8def\u5f84\u4e0a\u9664\u4e86 $\\rm LCA$ \u7684 $val_2$ \u7684\u548c\u52a0\u4e0a $val1_{\\mathrm{LCA}}$**\u3002\n\n\u7136\u540e\u8fd9\u4e2a\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\u4e86\u5427\u3002\u8bbe $f_u$ \u8868\u793a\u4ece $u$ \u5f00\u59cb\u5f80\u4e0b\u8d70\u6700\u5927\u7684 $val_2$ \u548c\uff0c\u7136\u540e\u8f6c\u79fb $u$ \u7684\u65f6\u5019\u5c31\u7b97\u4e00\u4e2a\u513f\u5b50\u7684 $f$ \u7684\u6700\u5927\u503c $mx$ \u548c\u6b21\u5927\u503c $cmx$\uff0c\u8f6c\u79fb\u5c31\u662f\uff1a\n\n$$\n\\begin{aligned}\n&f_u\\leftarrow val2_u+mx\\\\\n&ans\\leftarrow val1_u+mx+cmx\n\\end{aligned}\n$$\n\n\u8fd9\u4e2a\u76f4\u63a5\u505a\u5c31\u662f $\\mathcal O(nm)$ \u4e86\uff0c\u671f\u671b\u5f97\u5206 [30pts](https://uoj.ac/submission/558082)\u3002\n\n\u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5 $\\rm DDP$ \u5427\u3002\u6211\u4eec\u628a\u91cd\u94fe\u4e0a\u7684\u8f6c\u79fb\u5199\u6210\u77e9\u9635\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a `multiset` \u8bb0\u5f55\u4e0d\u662f\u91cd\u513f\u5b50\u7684 $f$ \u503c\uff0c\u8bb0 $mx$ \u4e3a\u4e0d\u662f\u91cd\u513f\u5b50\u4e0a\u7684\u6700\u5927\u7684 $f$\uff0c$cmx$ \u4e3a\u4e0d\u662f\u91cd\u513f\u5b50\u7684\u6b21\u5927\u503c\uff0c\u90a3\u4e48\uff1a\n\n$$\n\\begin{pmatrix}\nf_u\\\\\ng_u\\\\\n0\\end{pmatrix}\n=\\begin{pmatrix}\nval2_u&-\\infty& mx+val2_u\\\\\nmx+val1_i&0&mx+cmx+val1_u\\\\\n-\\infty&\\infty&0\n\\end{pmatrix}\n\\times\n\\begin{pmatrix}\nf_{heavy}\\\\\ng_{heavy}\\\\\n0\n\\end{pmatrix}\n$$\n\n\u8fd9\u91cc\u7684\u77e9\u9635\u4e58\u6cd5\u662f\u5bf9\u5e94\u52a0\u8d77\u6765\u7136\u540e\u53d6 $\\max$\u3002\n\n\u5176\u4e2d $f$ \u7684\u610f\u601d\u548c\u4e0a\u9762\u76f8\u540c\uff0c$g$ \u7684\u610f\u601d\u662f\u8fd9\u6761\u91cd\u94fe\u5230\u5f53\u524d\u4e3a\u6b62\u7684\u6700\u5927\u6743\u503c\u548c\u3002\u5168\u5c40\u5f00\u4e00\u4e2a `multiset` \u8bb0\u5f55\u6240\u6709\u91cd\u94fe\u7684\u6700\u5927\u503c\u3002\n\n\u7136\u540e\u5bf9\u8fd9\u4e2a\u77e9\u9635\u6211\u4eec\u8003\u8651 $val1$ \u548c $val2$ \u7684\u4fee\u6539\u3002\n\n$val2$ \u7684\u4fee\u6539\u5176\u5b9e\u662f\u7b80\u5355\u7684\u56e0\u4e3a\u53ea\u4f1a\u66f4\u6539\u4e00\u4e2a\u503c\uff0c\u4fee\u6539\u8fd9\u4e2a\u503c\u66b4\u529b\u66f4\u6539\u4e0a\u53bb\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $\\mathcal O(\\log^2n)$\u3002\n\n\u7136\u540e $val1$ \u7684\u4fee\u6539\u9700\u8981\u601d\u8003\u4e00\u4e0b\uff0c\u77e9\u9635\u4f1a\u533a\u95f4\u52a0\u4e00\u4e2a\u503c\u5c31\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002\u4f46\u662f\u601d\u8003\u4e00\u4e0b\u4e5f\u4e0d\u662f\u5f88\u9ebb\u70e6\uff0c\u56e0\u4e3a\uff1a\n\n$$\n\\begin{pmatrix}\na&-\\infty&b\\\\\nc&0&d\\\\\n-\\infty&\\infty&0\n\\end{pmatrix}\\times\n\\begin{pmatrix}\ne&-\\infty&f\\\\\ng&0&h\\\\\n-\\infty&-\\infty&0\n\\end{pmatrix}\n=\\begin{pmatrix}\na+e&-\\infty&\\max(a+f,b)\\\\\n\\max(e+c,g)&0&\\max(c+f,h,d)\\\\\n-\\infty&-\\infty&0\n\\end{pmatrix}\n$$\n\n\u53d1\u73b0\u533a\u95f4\u52a0\u5c31\u662f\u8ba9 $c,d,g,h$ \u5168\u90e8\u52a0\u4e00\u4e2a\u503c\uff0c\u53d1\u73b0\u4e58\u6cd5\u4e4b\u540e\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u4ecd\u7136\u662f\u52a0\u8fd9\u4e2a\u503c\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u6253\u61d2\u6807\u8bb0\u505a\u4e86\u3002\u590d\u6742\u5ea6 $\\mathcal O(\\log^2n)$\u3002\n\n\u5b9e\u73b0\u7684\u65f6\u5019\u4e3a\u4e86\u65b9\u4fbf\u53ef\u4ee5\u5dee\u5206\u6210 $4$ \u6b21\u505a\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define mp make_pair\n#define mt make_tuple\n#define eb emplace_back\n#define pb push_back\n#define pc putchar\n#define chkmx(a,b) (a)=max((a),(b))\n#define chkmn(a,b) (a)=min((a),(b))\n#define fi first\n#define se second\nusing namespace std;\ntemplate<class T>\nvoid read(T&x){x=0;char c=getchar();bool f=0;for(;!isdigit(c);c=getchar())f^=c=='-';for(;isdigit(c);c=getchar())x=x*10+(c-'0');if(f)x=-x;}\ntemplate<class T,class ...ARK>void read(T&x,ARK&...ark){read(x);read(ark...);}\ntemplate<class T>void write(T x){if(x<0)pc('-'),x=-x;if(x>=10)write(x/10);pc(x%10+'0');}\ntemplate<class T,class ...ARK>void write(T x,ARK...ark){write(x);pc(' ');write(ark...);}\ntemplate<class ...ARK>void writeln(ARK...ark){write(ark...);pc('\\n');}\ntypedef long long ll;\n#define lowbit(x) ((x)&-(x))\n#define mid ((l+r)>>1)\n#define lc (x<<1)\n#define rc (x<<1|1)\nconst int N=1e5+10;\nint n,m;\nvector<int>e[N];\nint fa[N],dep[N],dfn[N],sz[N],top[N],son[N],cnt,down[N];\nvoid dfs1(int u){\n\tdep[u]=dep[fa[u]]+1;\n\tsz[u]=1;\n\tfor(auto v:e[u])if(v!=fa[u]){\n\t\tfa[v]=u;dfs1(v);sz[u]+=sz[v];\n\t\tif(sz[v]>sz[son[u]])son[u]=v;\n\t}\n}\nvoid dfs2(int u){\n\tdfn[u]=++cnt;\n\tif(!top[u]){top[u]=down[u]=u;while(son[down[u]])down[u]=son[down[u]];}\n\tif(son[u])top[son[u]]=top[u],dfs2(son[u]);\n\tfor(auto v:e[u])if(v!=fa[u]&&v!=son[u])dfs2(v);\n}\nstruct mat{\n\t//  a -oo  b\n\t//  c   0  d\n\t//-oo -oo  0\n\tll a,b,c,d;\n\tmat(ll a=0,ll b=0,ll c=0,ll d=0):a(a),b(b),c(c),d(d){}\n\tfriend mat operator*(mat A,mat B){\n\t\treturn mat(\n\t\t\tA.a+B.a,\n\t\t\tmax(A.a+B.b,A.b),\n\t\t\tmax(A.c+B.a,B.c),\n\t\t\tmax({A.c+B.b,B.d,A.d})\n\t\t);\n\t}\n};\nstruct node{\n\tmat mt;ll tag;\n}t[N<<2];\nvoid pushtag(int x,ll v){\n\tt[x].tag+=v;\n\tt[x].mt.c+=v;\n\tt[x].mt.d+=v;\n}\nvoid pushdown(int x){\n\tif(t[x].tag)\n\t\tpushtag(lc,t[x].tag),\n\t\tpushtag(rc,t[x].tag),\n\t\tt[x].tag=0;\n}\nvoid pushup(int x){t[x].mt=t[lc].mt*t[rc].mt;}\nvoid add(int x,int l,int r,int ql,int qr,int v){\n\tif(ql<=l&&r<=qr)return pushtag(x,v);\n\tif(r<ql||qr<l)return;\n\tpushdown(x);\n\tadd(lc,l,mid,ql,qr,v);\n\tadd(rc,mid+1,r,ql,qr,v);\n\tpushup(x);\n}\nvoid mdf(int x,int l,int r,int p,mat v){\n\tif(l==r)return t[x].mt=v,void();\n\tpushdown(x);\n\tif(p<=mid)mdf(lc,l,mid,p,v);\n\telse mdf(rc,mid+1,r,p,v);\n\tpushup(x);\n}\nmat qry(int x,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr)return t[x].mt;\n\tpushdown(x);\n\tif(qr<=mid)return qry(lc,l,mid,ql,qr);\n\tif(mid<ql)return qry(rc,mid+1,r,ql,qr);\n\treturn qry(lc,l,mid,ql,qr)*qry(rc,mid+1,r,ql,qr);\n}\nll get(int x,int l,int r,int p){\n\tif(l==r)return t[x].tag;\n\tpushdown(x);\n\tif(p<=mid)return get(lc,l,mid,p);\n\telse return get(rc,mid+1,r,p);\n}\nll val2[N];\nmultiset<ll>fl[N],res;\nmat getmat(int u){\n\tll v1=get(1,1,n,dfn[u]);\n\tll v2=val2[u];\n\tll mx=*fl[u].rbegin(),cmx=*++fl[u].rbegin();\n\treturn mat(v2,mx+v2,mx+v1,mx+cmx+v1);\n}\nint lca(int u,int v){\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]>dep[v])return v;\n\treturn u;\n}\nvoid addv1(int u,int w){\n\t//\u4ece u \u5230 \u6839\u7684\u8def\u5f84 \u52a0 w\n\tint x=u;\n\twhile(x){\n\t\tmat ori=qry(1,1,n,dfn[top[x]],dfn[down[top[x]]]);\n\t\tll f=max(ori.a,ori.b),g=max(ori.c,ori.d);\n\t\tres.erase(res.find(g));\n\t\tif(fa[top[x]])fl[fa[top[x]]].erase(fl[fa[top[x]]].find(f));\n\t\tx=fa[top[x]];\n\t}\n\tx=u;\n\twhile(x){\n\t\tadd(1,1,n,dfn[top[x]],dfn[x],w);\n\t\tmat now=qry(1,1,n,dfn[top[x]],dfn[down[top[x]]]);\n\t\tll f=max(now.a,now.b),g=max(now.c,now.d);\n\t\tres.insert(g);\n\t\tif(fa[top[x]]){\n\t\t\tfl[fa[top[x]]].insert(f);\n\t\t\tmdf(1,1,n,dfn[fa[top[x]]],getmat(fa[top[x]]));\n\t\t}\n\t\tx=fa[top[x]];\n\t}\n}\nvoid addv2(int u,int w){\n\t//\u7ed9 u \u7684 v2 \u52a0\u4e0a w\n\tint x=u;\n\twhile(x){\n\t\tmat ori=qry(1,1,n,dfn[top[x]],dfn[down[top[x]]]);\n\t\tll f=max(ori.a,ori.b),g=max(ori.c,ori.d);\n\t\tres.erase(res.find(g));\n\t\tif(fa[top[x]])\n\t\t\tfl[fa[top[x]]].erase(fl[fa[top[x]]].find(f));\n\t\tx=fa[top[x]];\n\t}\n\tval2[u]+=w;\n\tmdf(1,1,n,dfn[u],getmat(u));\n\tx=u;\n\twhile(x){\n\t\tmat now=qry(1,1,n,dfn[top[x]],dfn[down[top[x]]]);\n\t\tll f=max(now.a,now.b),g=max(now.c,now.d);\n\t\tres.insert(g);\n\t\tif(fa[top[x]]){\n\t\t\tfl[fa[top[x]]].insert(f);\n\t\t\tmdf(1,1,n,dfn[fa[top[x]]],getmat(fa[top[x]]));\n\t\t}\n\t\tx=fa[top[x]];\n\t}\n}\nvoid add(int u,int v,int w){\n\tint l=lca(u,v);\n\taddv1(u,w);addv1(v,w);addv1(l,-w);addv1(fa[l],-w);\n\taddv2(l,w);\n}\nint x[N],y[N],w[N];\nsigned main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);\n\tread(n,m);\n\tfor(int i=1,u,v;i<n;i++)read(u,v),e[u].pb(v),e[v].pb(u);\n\tdfs1(1);dfs2(1);\n\tfor(int i=1;i<=n;i++)fl[i].insert(0),fl[i].insert(0);\n\tfor(int i=1;i<=n;i++)for(auto j:e[i])if(j!=son[i]&&j!=fa[i])fl[i].insert(0);\n\tfor(int i=1;i<=n;i++)if(i==top[i])res.insert(0);\n\tfor(int i=1;i<=m;i++){\n\t\tchar op=getchar();while(op!='+'&&op!='-')op=getchar();\n\t\tif(op=='+'){\n\t\t\tread(x[i],y[i],w[i]);\n\t\t\tadd(x[i],y[i],w[i]);\n\t\t}else{\n\t\t\tint t;read(t);\n\t\t\tadd(x[t],y[t],-w[t]);\n\t\t}\n\t\t//for(int i=1;i<=n;i++)write(get(1,1,n,dfn[i])),pc(' ');pc('\\n');\n\t\twriteln(*res.rbegin());\n\t}\n}\n```",
        "postTime": 1655041552,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6666 \u3010[\u6e05\u534e\u96c6\u8bad2016] \u6570\u636e\u4ea4\u4e92\u3011"
    },
    {
        "content": "# P6666 [\u6e05\u534e\u96c6\u8bad2016] \u6570\u636e\u4ea4\u4e92 \u984c\u89e3\n\n###### ~~wc\u9019\u9ebd\u6c34\u7684\u984c\u89e3\u6c92\u4eba\u6c34\uff1f~~\n\n\u6bd4\u8f83\u795e\u7684DDP\u3002\n\n\u9996\u5148\u5bf9\u4e8e\u7ed9\u51fa\u7684\u4e00\u6761\u94fe\u6211\u4eec\u5206\u4e24\u90e8\u5206\u7edf\u8ba1\uff1alca \u4ee5\u53ca\u5176\u4ed6\u90e8\u5206\u3002\n\n\u6211\u4eec\u8bbe\u4e24\u4e2a\u53d8\u91cf wi , gi \u3002\u4e00\u6761\u8def\u5f84\u7684\u6743\u503c\u5c31\u662f\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684 w \u4e4b\u548c $+glca$ \u3002\u6240\u4ee5\u6211\u4eec\u5c06\u4fee\u6539 wlca \u7684\u6743\u503c\uff0c\u4fee\u6539\u5176\u4ed6\u70b9\u7684 g \u503c\u3002\u5220\u9664\u7684\u65f6\u5019\u5c31\u52a0\u4e00\u6761\u76f8\u540c\u7684\uff0c\u6743\u503c\u76f8\u53cd\u7684\u8def\u5f84\u3002\n\n\u5177\u4f53\u7ec6\u8282\u5c31\u6709\u591a\u4e86\u3002\n\n\u9996\u5148\u6211\u4eec\u7ed9\u6bcf\u4e2a\u70b9 v \u5f00\u4e00\u4e2a\u53ef\u5220\u9664\u5806\u8868\u793av\u7684\u865a\u5b50\u6811\u4e2d\u5230 v \u7684\u6700\u957f\u94fe\u3002\u518d\u5f00\u4e00\u4e2a\u5168\u5c40\u7684\u53ef\u5220\u9664\u5806\u8bb0\u5f55\u6bcf\u6761\u94fe\u8d21\u732e\u7684\u7b54\u6848\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u770b\u6210\u662f\u91cd\u94fe\u4e0a\u7684 u,v \u4e24\u70b9\uff08\u5176\u4e2d u \u662f lca\uff09\uff0c\u4ee5\u53ca\u8fd9\u4e24\u70b9\u5206\u522b\u5411\u865a\u5b50\u6811\u4f38\u51fa\u53bb\u7684\u4e00\u6761\u6700\u957f\u94fe\uff08\u53ef\u4ee5\u4e3a\u7a7a\uff09\u3002\u5b83\u7684\u6743\u503c\u4e3a\u8fd9\u6761\u94fe\u7684g\u4e4b\u548c\u518d\u52a0\u4e0a wu \u3002\u5f53 u \u7b49\u4e8e v \u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u627e\u6700\u957f\u94fe\u548c\u6b21\u957f\u94fe\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u5c31\u662f\u4e00\u4e2a\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\u3002\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u8bb0\u5f55:\n\nmx \u8868\u793a\u7b54\u6848\u3002\n\nlmx \u8868\u793a\u4ece\u6700\u5de6\u8fb9\u4ee3\u8868\u7684\u8282\u70b9\uff08\u6df1\u5ea6\u6700\u5c0f\uff09\u5f00\u59cb\u7684\u6700\u957f\u94fe\u3002\n\nrmx \u8868\u793a\u4ece\u6700\u53f3\u8fb9\u4ee3\u8868\u7684\u8282\u70b9\uff08\u6df1\u5ea6\u6700\u5927\uff09\u5f00\u59cb\u7684\u6700\u957f\u94fe\u3002\n\n\n\u8fd8\u8981\u8bb0\u5f55 sum \u8868\u793a\u533a\u95f4\u5185\u6240\u6709\u8282\u70b9\u7684w\u53ea\u548c\u3002\n\n\u4e00\u6761\u91cd\u94fe\u7684\u94fe\u9876\u7684\u6700\u957f\u94fe\u5c31\u662f\u8fd9\u6761\u91cd\u94fe\u5bf9\u5e94\u7684 lmx\u3002\n\n\u4fee\u6539\u7684\u65f6\u5019\u66b4\u529b\u5c06 $lca$ \u4ee5\u4e0a $\\log$ \u6761\u91cd\u94fe\u539f\u6765\u5bf9\u5176\u7236\u4eb2\u8d21\u732e\u7684\u6700\u957f\u94fe\u5220\u9664\u6389\u3002\u66f4\u65b0\u8fc7\u540e\u5c06\u65b0\u7684\u6700\u957f\u94fe\u8d21\u732e\u4e0a\u53bb\u3002\n\n###### ~~\u8bf4\u597d\u7684\u975e\u516c\u5f0f\u4e0d\u7528LaTeX\u7684\u554a~~\n\n$CODE$\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define N 100005\n \nusing namespace std;\ninline int Get() {int x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=getchar();}while('0'<=ch&&ch<='9') {x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}return x*f;}\n \nint n,m;\nstruct road {int to,next;}s[N<<1];\nint h[N],cnt;\nvoid add(int i,int j) {s[++cnt]=(road) {j,h[i]};h[i]=cnt;}\n \nint fa[N],dep[N];\nint size[N],son[N];\n \nvoid dfs(int v) {\n    size[v]=1;\n    for(int i=h[v];i;i=s[i].next) {\n        int to=s[i].to;\n        if(to==fa[v]) continue ;\n        dep[to]=dep[v]+1;\n        fa[to]=v;\n        dfs(to);\n        if(size[son[v]]<size[to]) son[v]=to;\n        size[v]+=size[to];\n    }\n}\n \nint dfn[N],bot[N],top[N],id;\nint lst[N];\nvoid dfs2(int v,int tp) {\n    dfn[v]=++id;\n    lst[id]=v;\n    top[v]=tp;\n    bot[v]=v;\n    if(son[v]) {\n        dfs2(son[v],tp);\n        bot[v]=bot[son[v]];\n    }\n    for(int i=h[v];i;i=s[i].next) {\n        int to=s[i].to;\n        if(to==fa[v]||to==son[v]) continue ;\n        dfs2(to,to);\n    }\n}\n \nstruct tree {\n    int l,r;\n    ll lmx,rmx;\n    ll mx,tag;\n    ll sum;\n    tree() {l=r=lmx=rmx=mx=tag=sum=0;}\n}tr[N<<2];\n \nstruct Heap {\n    priority_queue<ll>add,del;\n    void Pop() {\n        while(del.size()&&add.top()==del.top()) {\n            add.pop();\n            del.pop();\n        }\n    }\n    void Push(ll x) {\n        Pop();\n        add.push(x);\n    }\n    void Del(ll x) {\n        del.push(x);\n    }\n    ll Top() {\n        Pop();\n        return add.top();\n    }\n    ll Sec() {\n        ll x=Top();\n        Del(x);\n        ll y=Top();\n        Push(x);\n        return y;\n    }\n}Ans,F[N];\n \ntree operator +(const tree &a,const tree &b) {\n    tree tem;\n    tem.l=a.l,tem.r=b.r;\n    tem.mx=max(a.rmx+b.lmx,max(a.mx,b.mx));\n    tem.lmx=max(a.lmx,a.sum+b.lmx);\n    tem.rmx=max(b.rmx,a.rmx+b.sum);\n    tem.sum=a.sum+b.sum;\n    return tem;\n}\n \n// sum \u5355\u70b9\n//tag \u94fe \nvoid Update(int v,int p) {\n    int u=lst[p];\n    ll fir=F[u].Top(),sec=F[u].Sec();\n    tr[v].lmx=tr[v].sum+fir;\n    tr[v].rmx=tr[v].tag+tr[v].sum+fir;\n    tr[v].mx=tr[v].tag+tr[v].sum+fir+sec;\n}\n \nvoid build(int v,int l,int r) {\n    tr[v].l=l,tr[v].r=r;\n    if(l==r) {\n        Update(v,l);\n        return ;\n    }\n    int mid=l+r>>1;\n    build(v<<1,l,mid),build(v<<1|1,mid+1,r);\n    tr[v]=tr[v<<1]+tr[v<<1|1];\n}\n \nvoid Set(int v,ll f) {\n    tr[v].mx+=f;\n    tr[v].tag+=f;\n//  tr[v].lmx+=f;\n    tr[v].rmx+=f;\n}\n \nvoid down(int v) {\n    if(tr[v].tag) {\n        Set(v<<1,tr[v].tag),Set(v<<1|1,tr[v].tag);\n        tr[v].tag=0;\n    }\n}\n \nvoid add_mx(int v,int l,int r,ll f) {//\u4fee\u6539\u7ed9\u51fa\u7684\u6574\u6761\u94fe \n    if(tr[v].l>r||tr[v].r<l) return ;\n    if(l<=tr[v].l&&tr[v].r<=r) {\n        Set(v,f);\n        return ;\n    }\n    down(v);\n    add_mx(v<<1,l,r,f),add_mx(v<<1|1,l,r,f);\n    tr[v]=tr[v<<1]+tr[v<<1|1];\n}\n \nvoid add_sum(int v,int p,int f) {//\u4fee\u6539lca \n    if(tr[v].l>p||tr[v].r<p) return ;\n    tr[v].sum+=f;\n    if(tr[v].l==tr[v].r) {\n        tr[v].lmx+=f;\n        tr[v].rmx+=f;\n        tr[v].mx+=f;\n        return ;\n    }\n    down(v);\n    add_sum(v<<1,p,f),add_sum(v<<1|1,p,f);\n    tr[v]=tr[v<<1]+tr[v<<1|1];\n}\n \nvoid update(int v,int p) {\n    if(tr[v].l>p||tr[v].r<p) return ;\n    if(tr[v].l==tr[v].r) {\n        Update(v,p);\n        return ;\n    }\n    down(v);\n    update(v<<1,p),update(v<<1|1,p);\n    tr[v]=tr[v<<1]+tr[v<<1|1];\n}\n \ntree query(int v,int l,int r) {\n    if(l<=tr[v].l&&tr[v].r<=r) return tr[v];\n    down(v);\n    int mid=tr[v].l+tr[v].r>>1;\n    if(r<=mid) return query(v<<1,l,r);\n    else if(l>mid) return query(v<<1|1,l,r);\n    else return query(v<<1,l,r)+query(v<<1|1,l,r);\n}\n \nint lca(int a,int b) {\n    while(top[a]!=top[b]) {\n        if(dep[top[a]]<dep[top[b]]) swap(a,b);\n        a=fa[top[a]];\n    }\n    return dep[a]<dep[b]?a:b;\n}\n \nvoid Modify_chain(int a,int b,int f) {\n    while(top[a]!=top[b]) {\n        if(dep[top[a]]<dep[top[b]]) swap(a,b);\n        add_mx(1,dfn[top[a]],dfn[a],f);\n        a=fa[top[a]];\n    }\n    if(dep[a]>dep[b]) swap(a,b);\n    add_mx(1,dfn[a],dfn[b],f);\n}\n \nvoid Del(int a,int b) {\n    static tree tem;\n    while(top[a]!=top[b]) {\n        if(dep[top[a]]<dep[top[b]]) swap(a,b);\n        tem=query(1,dfn[top[a]],dfn[bot[a]]);\n        Ans.Del(tem.mx);\n        a=fa[top[a]];\n    }\n    tem=query(1,dfn[top[a]],dfn[bot[a]]);\n    Ans.Del(tem.mx);    \n}\n \nvoid ADD(int a,int b) {\n    static tree tem;\n    while(top[a]!=top[b]) {\n        if(dep[top[a]]<dep[top[b]]) swap(a,b);\n        tem=query(1,dfn[top[a]],dfn[bot[a]]);\n        Ans.Push(tem.mx);\n        a=fa[top[a]];\n    }\n    tem=query(1,dfn[top[a]],dfn[bot[a]]);\n    Ans.Push(tem.mx);\n}\n \nvoid Modify(int a,int b,int w) {\n    int f=lca(a,b);\n    tree tem;\n    for(int i=top[f];i;i=top[fa[i]]) {\n        tem=query(1,dfn[i],dfn[bot[i]]);\n        if(fa[i]) F[fa[i]].Del(tem.lmx);\n        if(i!=top[f]) {\n            Ans.Del(tem.mx);\n        }\n    }\n    \n    Del(a,b);\n    add_sum(1,dfn[f],w);\n    Modify_chain(a,b,w);\n    Modify_chain(f,f,-w);\n    ADD(a,b);\n    for(int i=top[f];i;i=top[fa[i]]) {\n        tem=query(1,dfn[i],dfn[bot[i]]);\n        if(fa[i]) {\n            F[fa[i]].Push(tem.lmx);\n            update(1,dfn[fa[i]]);\n        }\n        if(i!=top[f]) Ans.Push(tem.mx);\n    }\n}\n \nstruct edge {int x,y,w;}e[N];\nvoid out(int v) {\n    int x=top[v];\n    for(int i=dfn[x];;i++) {\n        cout<<lst[i]<<\" \";\n        if(i==dfn[v]) return ;\n    }\n}\n \nint main() {\n    n=Get(),m=Get();\n    int a,b;\n    for(int i=1;i<n;i++) {\n        a=Get(),b=Get();\n        add(a,b),add(b,a);\n    }\n    dfs(1);\n    dfs2(1,1);\n    for(int i=1;i<=n;i++) F[i].Push(0),F[i].Push(0);\n    build(1,1,n);\n    for(int i=1;i<=n;i++) if(i==top[i]) Ans.Push(0);\n    char op;\n    for(int i=1;i<=m;i++) {\n        while(op=getchar(),op!='+'&&op!='-');\n        if(op=='+') {\n            e[i].x=Get(),e[i].y=Get(),e[i].w=Get();\n            Modify(e[i].x,e[i].y,e[i].w);\n        } else {\n            int id=Get();\n            Modify(e[id].x,e[id].y,-e[id].w);\n        }\n        cout<<Ans.Top()<<\"\\n\";\n    }\n    return 0;\n}\n```\n",
        "postTime": 1619695641,
        "uid": 408019,
        "name": "Shan_Creeper",
        "ccfLevel": 0,
        "title": "P6666 [\u6e05\u534e\u96c6\u8bad2016] \u6570\u636e\u4ea4\u4e92 \u984c\u89e3"
    },
    {
        "content": "\u601d\u8def\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u66b4\u529b\u5730\u6a21\u62df\u6bcf\u4e2a\u65f6\u523b\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u523b\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u66b4\u529b\u5730\u679a\u4e3e\u6240\u6709\u7684\u70b9\u5bf9\uff0c\u8ba1\u7b97\u51fa\u5b83\u4eec\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\uff0c\u7136\u540e\u627e\u5230\u6700\u5927\u7684\u90a3\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u662f\u5f53\u524d\u65f6\u523b\u4e0b\u7684\u7b54\u6848\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^3m)$ \u7684\uff0c\u663e\u7136\u4f1a\u8d85\u65f6\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u66b4\u529b\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u523b\uff0c\u6211\u4eec\u90fd\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u6240\u6709\u7684\u70b9\u5bf9\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\uff0c\u8fd9\u4e2a\u8ba1\u7b97\u662f\u5f88\u6d6a\u8d39\u65f6\u95f4\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u8fd9\u4e2a\u91cd\u8981\u5ea6\u4e4b\u548c\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u7ef4\u62a4\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u662f\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6240\u6709\u70b9\u5bf9\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u3002\u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u7684\u66f4\u65b0\u548c\u67e5\u8be2\u90fd\u662f $O(\\log n)$ \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728 $O(n\\log n)$ \u7684\u65f6\u95f4\u5185\u5efa\u7acb\u8fd9\u4e9b\u6811\u72b6\u6570\u7ec4\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u523b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u66f4\u65b0\u88ab\u52a0\u5165\u7684\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u7136\u540e\u67e5\u8be2\u6240\u6709\u8282\u70b9\u7684\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u6700\u5927\u503c\u5c31\u662f\u5f53\u524d\u65f6\u523b\u4e0b\u7684\u7b54\u6848\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u7684\u7b97\u6cd5\u8fd8\u662f\u4f1a\u8d85\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u4e00\u6b65\u4f18\u5316\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8fd9\u4e9b\u6811\u72b6\u6570\u7ec4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6240\u6709\u70b9\u5bf9\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u3002\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u7684\u66f4\u65b0\u548c\u67e5\u8be2\u90fd\u662f $O(\\log^2 n)$ \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728 $O(n\\log^2 n)$ \u7684\u65f6\u95f4\u5185\u5efa\u7acb\u8fd9\u4e9b\u7ebf\u6bb5\u6811\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u523b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u66f4\u65b0\u88ab\u52a0\u5165\u7684\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u67e5\u8be2\u6240\u6709\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u4e2d\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u6700\u5927\u503c\u5c31\u662f\u5f53\u524d\u65f6\u523b\u4e0b\u7684\u7b54\u6848\u3002\n\n\u8fd9\u6837\u7684\u7b97\u6cd5\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\n\n$O(n\\log^2 n+m\\log n)$",
        "postTime": 1684923869,
        "uid": 602624,
        "name": "liuhaodong2021",
        "ccfLevel": 0,
        "title": "6666"
    }
]