[
    {
        "content": "# \u6700\u5927\u6d41\u4f8b\u9898\u2014\u2014[USACO07OPEN]\u5403\u996dDining\n\n\u8fd9\u662f\u4e00\u9053\u6bd4\u8f83\u7ecf\u5178\u7684**\u7f51\u7edc\u6d41**\u7684\u5165\u95e8\u9898\u3002\n\n\u76f8\u4fe1\u548c\u6211\u4e00\u6837\u7684\u849f\u84bb\u4eec\u770b\u5230\u8fd9\u9898\u7684\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u90fd\u662f**\u8d85\u6e90\u8fde\u6bcf\u79cd\u98df\u54c1\uff0c\u98df\u54c1\u8fde\u559c\u6b22\u5403\u5b83\u7684\u5976\u725b\uff0c\u5976\u725b\u8fde\u4ed6\u559c\u6b22\u5403\u7684\u996e\u6599\uff0c\u6bcf\u79cd\u996e\u6599\u8fde\u8d85\u6c47\uff0c**\u7136\u540e\u5c31\u65e0\u8111\u7684\u5957\u4e00\u6ce2\u6a21\u677f\uff0c\u95ed\u7740\u773c\u775b\u5173\u4e0a\u8111\u5b50\u62b1\u7740\u4eba\u6709\u591a\u5927\u80c6\u5730\u6709\u591a\u5927\u4ea7\u7684\u5fc3\u6001\u76f4\u63a5\u8fde\u6837\u4f8b\u90fd\u4e0d\u8fc7\u5c31\u4ea4\u4e0a\u53bb\u5e7b\u60f3\u77400msAC\u5bf9\u4e0d\u5bf9\uff01\n\n### \u4f5c\u4e3a\u7ecf\u5178\u4f8b\u9898\u54ea\u6709\u90a3\u4e48\u7b80\uff08dou\uff09\u5355\uff08bi\uff09\uff1f\n#### ~~\u867d\u7136\u6211\u4e5f\u662f\u8fd9\u4e48\u60f3\u7684~~\n\n\u4f46\u4ed4\u7ec6\u60f3\u60f3\u5c31\u4f1a\u53d1\u73b0\u2014\u2014\u8111\u5b50\u600e\u4e48\u53ef\u80fd**\u5173\u4e0a**\u5462\uff1f\u5bf9\u4e0d\u5bf9\uff1f\n\n\u597d\u5427\uff0c\u4e0d\u5f00\u73a9\u7b11\u4e86\uff0c\u8fd9\u9898\u600e\u4e48\u53ef\u80fd\u90a3\u4e48\u7b80\u5355\u5c31\u80fd\u8fc7\uff0c\u56e0\u4e3a\u6587\u4e2d\u6709\u4e00\u4e2a\u8981\u6c42***\u201c\u6bcf\u79cd\u98df\u7269\u6216\u996e\u6599\u53ea\u80fd\u4f9b\u4e00\u5934\u725b\u4eab\u7528\uff0c\u4e14\u6bcf\u5934\u725b\u53ea\u4eab\u7528\u4e00\u79cd\u98df\u7269\u548c\u4e00\u79cd\u996e\u6599\u201d***\uff0c\u600e\u4e48\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u8fd9\u5c31\u9700\u8981\u4e00\u4e2a\u7f51\u7edc\u6d41\u4e2d\u7684\u5e38\u7528\u65b9\u6cd5\uff1a\u62c6\u70b9\u3002\n\n**\u4ec0\u4e48\u662f\u62c6\u70b9\u5462\uff1f\u5176\u5b9e\u5c31\u662f\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff08\u5165\u70b9\u548c\u51fa\u70b9\uff09\uff0c\u6240\u6709\u6307\u5411\u8fd9\u4e2a\u70b9\u7684\u8fb9\u90fd\u8fde\u5411\u5165\u70b9\uff0c\u800c\u4ece\u8fd9\u4e2a\u70b9\u8fde\u51fa\u53bb\u7684\u6240\u6709\u8fb9\u7684\u8d77\u70b9\u90fd\u5728\u8fd9\u4e2a\u70b9\u7684\u51fa\u70b9\u3002\u5c31\u50cf\u4e0b\u56fe\u4e00\u6837\uff1a**\n\n![](https://cdn.luogu.com.cn/upload/pic/27555.png)\n\n\u62c6\u70b9\u4e4b\u540e\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/27554.png)\n\n**\u7136\u540e\u901a\u8fc7\u5165\u70b9\u548c\u51fa\u70b9\u95f4\u7684\u5bb9\u91cf\uff08\u5982\u56fe\uff0c\u4e3a1\uff09\u6765\u9650\u5236\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\u6d41\u91cf\uff0c\u90a3\u4e48\u5c31\u53ea\u80fd\u6709\u4e00\u79cd\u98df\u7269\u548c\u4e00\u79cd\u996e\u6599\u88ab\u8fd9\u5934\u725b\u5403\u3002**\n\n\u8fd9\u65f6\uff0c*\u201c\u6bcf\u5934\u725b\u53ea\u4eab\u7528\u4e00\u79cd\u98df\u7269\u548c\u4e00\u79cd\u996e\u6599\u201d*\u7684\u95ee\u9898\u5df2\u89e3\u51b3\uff0c\u90a3\u4e48*\u201c\u6bcf\u79cd\u98df\u7269\u6216\u996e\u6599\u53ea\u80fd\u4f9b\u4e00\u5934\u725b\u4eab\u7528\u201d*\u600e\u4e48\u89e3\u51b3\u5462\uff1f\n\n**\u5176\u5b9e\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u628a\u8d85\u6e90\u8fde\u6bcf\u79cd\u98df\u7269\u7684\u6bcf\u6761\u8fb9\u548c\u6bcf\u79cd\u996e\u6599\u8fde\u8d85\u6c47\u7684\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a1\u5c31\u884c\uff0c\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u79cd\u98df\u7269\u3001\u996e\u6599\u53ea\u80fd\u627e\u5230\u4e00\u4e2a\u4e3b\u4eba\u3002**\n\n\u6700\u540e\u7684\u56fe\u7247\u5982\u4e0b\uff08\u6ca1\u628a\u6bcf\u4e2a\u70b9\u90fd\u753b\u51fa\u6765\uff0c\u56e0\u4e3a\u753b\u4e0d\u4e0b\u90a3\u4e48\u5927~~\u5176\u5b9e\u662f\u56e0\u4e3a\u6211\u61d2~~\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/27550.png)\n\n\u6700\u540e\u76f4\u63a5\u8dd1\u6700\u5927\u6d41\u5373\u53ef\uff1a\n\ndinic\u7b97\u6cd5\uff1a\n\n```cpp\n#include<cstdio>\n#include<queue>\n \n#define N 500\n#define M 200000\n#define INF 0x7fffffff\n \nusing namespace std;\n \nint n,f,d,head[N],to[M],c[M],nxt[M],num[N],minn,s,t,cnt,minflow,maxflow,tot;\n //\u7528\u90bb\u63a5\u8868\u5b58\u8fb9\nqueue<int>q;\n \nvoid adde(int u,int v,int a){//\u5efa\u8fb9\n    cnt++;\n    to[cnt]=v;\n    c[cnt]=a;\n    nxt[cnt]=head[u];\n    head[u]=cnt;\n     \n    cnt++;\n    to[cnt]=u;\n    c[cnt]=0;\n    nxt[cnt]=head[v];\n    head[v]=cnt;\n}\n \nbool add_num() {//\u7ed9\u6bcf\u4e2a\u70b9\u6807\u53f7\n    while(!q.empty()) {\n        q.pop();\n    }\n    for(int i=s;i<=t+n;i++) {\n        num[i]=-1;\n    }\n    num[s]=1;\n    q.push(s);\n    while(!q.empty()) {\n        int now=q.front();\n        q.pop();\n        for(int i=head[now];i;i=nxt[i]) {\n            if(c[i]&&num[to[i]]==-1) {\n                num[to[i]]=num[now]+1;\n                q.push(to[i]);\n            }\n        }\n    }\n    if(num[t]==-1) {//\u5982\u679cnum[t]==-1\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u5230\u4e0d\u4e86\u6c47\u70b9\uff0c\u4e0d\u80fd\u7ed9\u6c47\u70b9\u6807\u53f7\u3002\n        return false;\n    } else {\n        return true;\n    }\n}\n \nint dfs(int u,int s){\n    if(u==t){\n        return s;\n    }\n    for(int i=head[u];i;i=nxt[i]){\n        if(c[i]&&num[u]+1==num[to[i]]&&(minflow=dfs(to[i],min(s,c[i])))){\n            c[i]-=minflow;\n            c[i^1]+=minflow;\n            return minflow;\n        }\n    }\n    return 0;\n}\n \nvoid dinic(){//dinic\u6a21\u677f\n    while(add_num()){\n        while((minn=dfs(1,INF))){\n            maxflow+=minn;\n        }\n    }\n}\n \nint main(){\n    scanf(\"%d%d%d\",&n,&f,&d);\n    cnt=1;\n    s=1;\n    t=1+f+n+d+1;\n    for(int i=1;i<=f;i++){//\u8d85\u6e90\u8fde\u6bcf\u79cd\u98df\u54c1\n        adde(s,1+i,1);\n    }\n    for(int i=1;i<=d;i++){//\u6bcf\u79cd\u996e\u6599\u8fde\u8d85\u6c47\n        adde(1+f+n+i,t,1);\n    }\n    for(int i=1;i<=n;i++){//\u5165\u70b9\u8fde\u51fa\u70b9\n        adde(1+f+i,1+f+n+d+1+i,1);\n    }\n    for(int i=1;i<=n;i++){\n        int dn,fn;\n        scanf(\"%d%d\",&fn,&dn);\n        for(int q=1;q<=fn;q++){//\u98df\u54c1\u8fde\u559c\u6b22\u5403\u5b83\u7684\u5976\u725b\n            int fi;\n            scanf(\"%d\",&fi);\n            adde(1+fi,1+f+i,1);\n        }\n        for(int q=1;q<=dn;q++){//\u5976\u725b\u8fde\u4ed6\u559c\u6b22\u5403\u7684\u996e\u6599\n            int di;\n            scanf(\"%d\",&di);\n            adde(1+f+n+d+1+i,1+f+n+di,1);\n        }\n    }\n    dinic();\n    printf(\"%d\\n\",maxflow);//\u8f93\u51fa\n    return 0;\n}\n```\n\u6ce8\uff1aEK\u6734\u7d20\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u8fc7\u5f97\u53bb\u3002\n\u5982\u679c\u662f\u5165\u95e8\u6700\u5927\u6d41\u4e5f\u53ef\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u8fb9\u3002",
        "postTime": 1533805401,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2891 \u3010[USACO07OPEN]\u5403\u996dDining\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\u5982\u679c\u6709\u4eba\u4e0d\u4f1a\u7f51\u7edc\u6d41\uff0c\u90a3\u4e48\u5b89\u5229\u4e00\u4e0b\u6211[\u7f51\u7edc\u6700\u5927\u6d41Dinic\u7684\u535a\u5ba2](https://www.cnblogs.com/linzhengmin/p/9313216.html)  \n\u5173\u4e8e\u7f51\u7edc\u6d41\uff0c\u6211\u591a\u4e45\u6ca1\u6709\u78b0\u8fd9\u4e2a\u7b97\u6cd5\u4e86...  \n\u8fd9\u662f\u4e00\u9053\u7f51\u7edc\u6d41\u597d\u9898\u3002  \n### \u9898\u89e3\n\u8fd9\u9053\u9898\u76ee\u96be\u70b9\u4e3b\u8981\u662f\u6784\u56fe\u3002  \n\u8fd9\u9053\u9898\u7684\u6784\u56fe\u4e00\u5f00\u59cb\u5f88\u5bb9\u6613\u60f3\u5230\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u8fde\u98df\u7269\uff0c\u98df\u7269\u8fde\u725b\uff0c\u725b\u8fde\u996e\u6599\uff0c\u996e\u6599\u8fde\u4e00\u4e2a\u65b0\u5efa\u7684\u8d85\u7ea7\u6c47\u70b9\u3002  \n\u6700\u540e\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u6c42\u51fa\u7b54\u6848\u3002  \n\u4f46\u662f\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u7b97\u6cd5\u662f\u9519\u8bef\u7684  \n\u6bd4\u5982\u4e0b\u9762\u8fd9\u7ec4\u6570\u636e  \n```\n1 3 3\n3 3 1 2 3 1 2 3\n```\n\u7b54\u6848\u5e94\u8be5\u662f1\uff0c\u4f46\u5f53\u524d\u7684\u7b97\u6cd5\u8f93\u51fa\u662f3\uff0c\u7b97\u6cd5\u7684\u9519\u8bef\u662f\u4e2d\u95f4\u7684\u725b\u88ab\u91cd\u590d\u5229\u7528\u4e86\u3002  \n\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u4e86\u4e00\u4e2a\u6280\u5de7\uff0c**\u62c6\u70b9**\u3002  \n\u628a\u4e00\u4e2a\u725b**\u62c6\u6210\u4e24\u4e2a\u70b9**\uff0c\u4e2d\u95f4\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86\u4e00\u5934\u725b\u6700\u591a\u53ea\u4f1a\u88ab\u5229\u7528\u4e00\u6b21\u3002  \n\u4e8e\u662f\u91cd\u65b0\u6784\u56fe\uff1a  \n\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u8fde\u623f\u95f4\uff0c\u98df\u7269\u8fde\u725b1\uff0c\u725b1\u8fde\u725b2\uff0c\u725b2\u8fde\u996e\u6599\uff0c\u996e\u6599\u8fde\u4e00\u4e2a\u65b0\u5efa\u7684\u8d85\u7ea7\u6c47\u70b9\u3002  \n\u6ce8:\u5176\u4e2d\u725b1\u548c\u725b2\u5b9e\u9645\u4e0a\u662f\u6307\u540c\u4e00\u5934\u725b\u3002  \n\u7136\u540e\u63a5\u7740\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\u6c42\u51fa\u7b54\u6848\u5373\u53ef\u3002  \n### \u4ee3\u7801\n```cpp\n#include <cstdio> \n#include <cstring>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nconst long long MAX = (1ll << 62);\n\nint read(){\n    int x = 0; int zf = 1; char ch = ' ';\n    while (ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n    if (ch == '-') zf = -1, ch = getchar();\n    while (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar(); return x * zf;\n}\n\nstruct Edge{\n    int to, next;\n    long long dis;\n} edges[210000];\n\nint cur[10010], head[10010], edge_num = -1;\n\nvoid addEdge2(int from, int to, long long dis){\n    edges[++edge_num].to = to;\n    edges[edge_num].dis = dis;\n    edges[edge_num].next = head[from];\n    head[from] = edge_num;\n}\n\nvoid addEdge(int from, int to, long long dis){\n    addEdge2(from, to, dis), addEdge2(to, from, 0);\n}\n\nint d[10010];\nint s, t;\n\nlong long DFS(int u, long long flow){\n    if (u == t) return flow;\n    long long _flow = 0, __flow;\n    for (int& c_e = cur[u]; c_e != -1; c_e = edges[c_e].next){\n        int v = edges[c_e].to;\n        if (d[v] == d[u] + 1 && edges[c_e].dis > 0){\n            __flow = DFS(v, min(flow, edges[c_e].dis));\n            flow -= __flow;\n            edges[c_e].dis -= __flow;\n            _flow += __flow;\n            edges[c_e ^ 1].dis += __flow;\n            if (!flow)\n                break;\n        }\n    }\n    if (!_flow) d[u] = -1;\n    return _flow;\n}\n\nbool BFS(){\n    memset(d, -1, sizeof(d));\n    queue<int> que; que.push(s);\n    d[s] = 0; int u, _new;\n    while (!que.empty()){\n        u = que.front(), que.pop();\n        for (int c_e = head[u]; c_e != -1; c_e = edges[c_e].next){\n            _new = edges[c_e].to;\n            if (d[_new] == -1 && edges[c_e].dis > 0){\n                d[_new] = d[u] + 1;\n                que.push(_new);\n            }\n        }\n    }\n    return (d[t] != -1);\n}\n\nint n;\n\nvoid dinic(){\n    long long max_flow = 0;\n    while (BFS()){\n        for (int i = 0; i <= n; ++i) cur[i] = head[i];\n        max_flow += DFS(s, MAX);\n    }\n    printf(\"%lld\", max_flow);\n}\n\nint main(){\n    memset(head, -1, sizeof(head));\n    int N = read(), f = read(), d = read();\n    s = 0;\n    for (int j = 1; j <= f; ++j)\n        addEdge(s, j, 1);\n    for (int i = 1; i <= N; ++i){\n        int fi = read(), di = read();\n        for (int j = 1; j <= fi; ++j){\n            int ff = read();\n            addEdge(ff, f + d + i, 1);\n        }\n        addEdge(f + d + i, f + d + N + i, 1);\n        for (int j = 1; j <= di; ++j){\n            int dd = read();\n            addEdge(f + d + N + i, f + dd, 1);\n        }\n    }\n    n = t = f + d + N * 2 + 1;\n    for (int j = 1; j <= d; ++j)\n        addEdge(f + j, t, 1);\n    dinic();\n    return 0;\n}\n```",
        "postTime": 1561533043,
        "uid": 20462,
        "name": "lukelin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2891 \u3010[USACO07OPEN]\u5403\u996dDining\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u7f51\u7edc\u6d41\u5165\u95e8\u9898\u8fd8\u662f\u975e\u5e38\u4e0d\u9519\u7684\u4e00\u9053\u9898\n\n\u7f51\u7edc\u6d41\u4e2d\uff0c\u5efa\u56fe\u662f\u7b2c\u4e00\u91cd\u8981\u7684\n\n\u770b\u9898\uff0c\u5f88\u81ea\u7136\u4f1a\u60f3\u5230\u628a\u725b\uff0c\u98df\u7269\uff0c\u996e\u6599\u8fde\u5728\u4e00\u8d77\uff0c\u6709\u56e0\u4e3a\u98df\u7269\u548c\u996e\u6599\u6ca1\u6709\u76f4\u63a5\u53ef\u4ee5\u76f8\u8fde\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\uff0c\u975e\u5e38\u673a\u667a\u60f3\u5230\u4e86\u628a\u725b\u653e\u5728\u4e2d\u95f4\uff0c\u98df\u7269\u548c\u996e\u6599\u653e\u4e24\u8fb9\uff0c\u7136\u540e\u5c31\u662f\u4e00\u4e2a\u88f8\u7684\u7f51\u7edc\u6d41\uff0c\u7136\u540e\u778e\u5199\u5199\u5c31\u80fdAC\u4e86\u662f\u4e0d\u662f\uff01\u975e\u5e38\u6fc0\u52a8\u662f\u4e0d\u662f\uff01\n\nToo young too simple\n\n\u4e0d\u96be\u53d1\u73b0\u4ece\u539f\u70b9\u5230\u725b\u7684\u6d41\u91cf\u53ef\u80fd\u4e0d\u662f1\uff0c\u4ece\u725b\u5230\u6c47\u70b9\u4e5f\u53ef\u80fd\u4e0d\u662f1\n\n\u8fd9\u4ee3\u8868\u4ec0\u4e48\uff1f\n\n\u9898\u76ee\u4e2d\u8981\u6c42\u6bcf\u79cd\u98df\u7269\u6216\u996e\u6599\u53ea\u80fd\u4f9b\u4e00\u5934\u725b\u4eab\u7528\uff0c\u4e14\u6bcf\u5934\u725b\u53ea\u4eab\u7528\u4e00\u79cd\u98df\u7269\u548c\u4e00\u79cd\u996e\u6599\n\n\u8fd9\u4ee3\u8868\u4e00\u5934\u725b\u53ef\u80fd\u98df\u7528\u4e86\u6240\u6709\u5b83\u559c\u6b22\u5403\u7684\u548c\u559c\u6b22\u559d\u7684\n\n\u90a3\u600e\u4e48\u529e\uff1f\n\n\u628a\u4e00\u5934\u725b\u5206\u5f00\uff0c\u5206\u6210\u725bA\u548c\u725bB\n\n\u5728\u725bA\u4e0e\u725bB\u4e4b\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\n\n\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u5728\u6d41\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5230\u8fbe\u725bB\u7684\u6d41\u91cf\u6700\u591a\u4e3a1\uff0c\u4e5f\u610f\u5473\u7740\u53ea\u4eab\u7528\u4e861\u79cd\u98df\u7269\uff0c\u800c\u63a5\u4e0b\u6765\u4ece\u725bB\u5f00\u59cb\u4e5f\u53ea\u67091\u7684\u6d41\u91cf\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u628a\u725b\uff0c\u98df\u7269\uff0c\u996e\u6599\u8fde\u5728\u4e00\u8d77\u65f6\uff0c\u8fb9\u5bb9\u91cf\u4e3a1\uff0c\u6240\u4ee5\u4e5f\u4fdd\u8bc1\u4ece\u725bB\u63a5\u4e0b\u6765\u53ea\u4f1a\u4eab\u75281\u79cd\u996e\u6599\n\n\u5b8c\u7f8e\uff01\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n\tint v,w,next,other;\n}edge[100010];\n\nint from[100010],h[100010],q[100010];\nint n,m,num,f,d,st,ed;\n\nvoid addedge(int x,int y,int c)\n{\n\tint k1,k2;\n\tnum++;\n\tk1=num;\n\tedge[num].v=y;\n\tedge[num].w=c;\n\tedge[num].next=from[x];\n\tfrom[x]=num;\n\t\n\tnum++;\n\tk2=num;\n\tedge[num].v=x;\n\tedge[num].w=0;\n\tedge[num].next=from[y];\n\tfrom[y]=num;\n\t\n\tedge[k1].other=k2;\n\tedge[k2].other=k1;\n}\n\nint head,tail; \n\nbool bfs()\n{\n\tmemset(h,0,sizeof(h));\n\th[st]=1;\n\tq[1]=st;\n\thead=1;tail=2;\n\twhile(head!=tail)\n\t{\n\t\tint x=q[head];\n\t\tfor(int k=from[x];k;k=edge[k].next)\n\t\t{\n\t\t\tint y=edge[k].v;\n\t\t\tif((edge[k].w>0)&&(h[y]==0))\n\t\t\t{\n\t\t\t\th[y]=h[x]+1;\n\t\t\t\tq[tail]=y;\n\t\t\t\ttail++;\n\t\t\t}\n\t\t}\n\t\thead++;\n\t}\n\tif(h[ed]>0) return true;else return false;\n}\n\nint dfs(int x,int f)\n{\n\tif(x==ed) return f;\n\tint s=0,t;\n\tfor (int k=from[x];k;k=edge[k].next)\n\t{\n\t\tint y=edge[k].v;\n\t\tif((h[y]==(h[x]+1))&&(edge[k].w>0)&&(s<f))\n\t\t{\n\t\t\tt=dfs(y,min(f-s,edge[k].w));\n\t\t\ts+=t;\n\t\t\tedge[k].w-=t;\n\t\t\tedge[edge[k].other].w+=t;\n\t\t}\n\t}\n\tif (s==0) h[x]=0;\n\treturn s;\n}\n\nint main()\n{\n\tcin>>n>>f>>d;\n\tst=0;\n\ted=n*2+f+d+1;\n\tfor(int i=1;i<=f;i++) addedge(st,i,1);\n\tfor(int i=1;i<=n;i++) addedge(i+f,i+f+n,1);\n\tfor(int i=1;i<=d;i++) addedge(i+2*n+f,ed,1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint f1,d1;\n\t\tcin>>f1>>d1;\n\t\tfor(int j=1;j<=f1;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tcin>>x;\n\t\t\taddedge(x,i+f,1);\n\t\t}\n\t\tfor(int j=1;j<=d1;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tcin>>x;\n\t\t\taddedge(n+i+f,n+n+f+x,1);\n\t\t}\n\t}\n\tint ans;\n\twhile(bfs())\n\t{\n\t\tans+=dfs(st,19270817);\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1517981435,
        "uid": 51508,
        "name": "\u96c5\u513f\u8d1d\u5fb7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2891 \u3010[USACO07OPEN]\u5403\u996dDining\u3011"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\u6709$ n $\u53ea\u5976\u725b\uff0c$ q $\u79cd\u98df\u7269\u548c$ p $\u79cd\u996e\u6599\uff0c\u6bcf\u53ea\u5976\u725b\u559c\u6b22\u4e00\u4e9b\u996e\u6599\u548c\u98df\u7269\uff0c\u4f46\u53ea\u80fd\u90a3\u4e00\u79cd\uff0c\u6c42\u6700\u5c0f\u914d\u5bf9\u6570\u91cf\u3002\n\n\u9996\u5148\u6765\u770b\u4e00\u4e0b\u8fd9\u9053\u9898\u7684\u7b80\u5316\u7248\uff1a\u6ca1\u6709\u996e\u6599\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\n\u6211\u4f1a\uff01\u88f8\u7684\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff01\n\n\u4f46\u52a0\u4e86\u996e\u6599\uff0c\u5c31\u6709\u4e86\u4e24\u79cd\u9650\u5236\u6761\u4ef6\uff0c\u6211\u4eec\u81ea\u7136\u5730\u60f3\u5230\u76f4\u63a5\u996e\u6599\u3001\u98df\u7269\u548c\u5976\u725b\u90fd\u8fde\u8fb9\uff0c\u7528Dinic\u8dd1\u7f51\u7edc\u6700\u5927\u6d41\u3002\n\n\u4e8e\u662f\u4f60WA\u4e86\u3002\n\n\u95ee\u9898\u5904\u5728\u54ea\u513f\u5462\uff1f\n\n\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u7ec4\u6570\u636e\uff1a\n```\n1 2 2\n2 2 1 2 1 2\n```\n\u7528Dinic\u8dd1\u7f51\u7edc\u6700\u5927\u6d41\uff0c\u7b54\u6848\u662f2\uff0c\u4f46\u6b63\u786e\u7b54\u6848\u662f1\u3002\n\n\u95ee\u9898\u5728\u4e8e\uff1a\u540c\u4e00\u53ea\u5976\u725b\u9009\u4e86\u4e24\u6b21\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8fd0\u7528\u62c6\u70b9\u7684\u601d\u60f3\uff0c\u5c06\u4e00\u53ea\u5976\u725b\u62c6\u6210\u4e24\u4e2a\u70b9\uff1a\u51fa\u70b9\u548c\u5165\u70b9\uff0c\u98df\u7269\u8fde\u5165\u70b9\uff0c\u51fa\u70b9\u8fde\u996e\u6599\u3002\n\n\u7136\u540e\u4f60\u518d\u4ea4\u4e0a\u53bb\u5c31A\u4e86qwq\n\n\u7ed9\u4e00\u4e0b\u4ee3\u7801\u5427\uff1a\n```cpp\n#include<cstring>\n#include<cstdio>\n#include<queue>\nconst int M=405;\nstruct Edge{\n    int to,nx,flow;\n}e[M*200];\nint n,q,p,s,t,cnt=1,d[M],h[M],cur[M];\ninline int min(const int a,const int b){\n    return a>b?b:a;\n}\ninline void Add(int x,int y){\n    e[++cnt]=(Edge){y,h[x],1};h[x]=cnt;\n    e[++cnt]=(Edge){x,h[y],0};h[y]=cnt;\n}\ninline bool BFS(){\n    register int E,u,v;\n    std::queue<int>q;\n    memset(d,0,sizeof d);\n    q.push(s);d[s]=1;\n    while(!q.empty()){\n        u=q.front();q.pop();\n        for(E=cur[u]=h[u];E;E=e[E].nx)if(e[E].flow){\n            v=e[E].to;\n            if(!d[v]){\n                d[v]=d[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return d[t];\n}\nint DFS(register int u,register int flow){\n    if(u==t)return flow;\n    int used=flow;\n    for(register int&E=cur[u];E;E=e[E].nx)if(e[E].flow){\n        int v=e[E].to;\n        if(d[v]==d[u]+1){\n            int f=DFS(v,min(used,e[E].flow));\n            e[E].flow-=f;e[E^1].flow+=f;used-=f;\n            if(!f)d[v]=0;\n            if(!used)return flow;\n        }\n    }\n    return cur[u]=h[u],flow-used;\n}\ninline int Dinic(){\n    int ans=0;\n    while(BFS())while(int d=DFS(s,2e9))ans+=d;\n    return ans;\n}\nsigned main(){\n    int i,j,u,x,y;\n    scanf(\"%d%d%d\",&n,&q,&p);\n    s=0;t=q+n+n+p+1;\n    for(i=1;i<=q;++i)Add(s,i);\n    for(i=1;i<=n;++i)Add(q+i,q+n+i);\n    for(i=1;i<=p;++i)Add(q+n+n+i,t);\n    for(i=1;i<=n;++i){\n        scanf(\"%d%d\",&x,&y);\n        for(j=1;j<=x;++j){\n            scanf(\"%d\",&u);\n            Add(u,q+i);\n        }\n        for(j=1;j<=y;++j){\n            scanf(\"%d\",&u);\n            Add(q+n+i,q+n+n+u);\n        }\n    }\n    printf(\"%d\",Dinic());\n}\n```\nP.S.\uff1a\u8fd9\u79cd\u9898\u80fd\u5c11\u4e00\u70b9\u513f\u5417qwq\uff0c\u8fd9\u5df2\u7ecf\u662f\u6211\u9047\u5230\u7684\u7b2c\u4e09\u9053\u201c\u9152\u5e97\u4e4b\u738b\u201d\u4e86 qwq",
        "postTime": 1594219118,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u56fe\u8bba \u7f51\u7edc\u6d41 P2891\u9898\u89e3"
    },
    {
        "content": "~~\u770b\u4e86\u4e00\u4e0b\u9898\u89e3\uff0c\u91cc\u9762\u7684\u5927\u4f6c\u4e4b\u6c14\u6781\u4e3a\u5f3a\u70c8\u2026\u2026\u4e8e\u662f\u6211\u51b3\u5b9a\u4ece\u4e00\u4e2a\u840c\u65b0\u7684\u89d2\u5ea6\u6765\u89e3\u91ca\u8fd9\u9053\u9898~~\n\n\u6211\u662f\u521a\u5b66\u4f1a\u7528\u7f51\u7edc\u6700\u5927\u7624\u6765\u89e3\u51b3\u4e8c\u5206\u56fe\u5339\u914d\u540e\u5c31\u6765\u505a\u8fd9\u9898\u4e86\u3002\n\n\u7f51\u7edc\u6700\u5927\u7624\u89e3\u51b3\u4e8c\u5206\u56fe\u5339\u914d\u7684\u8fde\u8fb9\u601d\u8def\uff1a\n\n$s \\rightarrow left \\rightarrow right \\rightarrow t$\n\n\u8fd9\u9053\u9898\u8c8c\u4f3c\u662f\u4e2a\u201c\u4e09\u5206\u56fe\u201d\u6700\u5927\u201c\u5339\u914d\u201d\uff08\u6ce8\u610f\u8fd9\u91cc\u52a0\u4e86\u5f15\u53f7\uff09\u3002\n\n\u53ef\u4ee5\u5c06\u98df\u7269\u3001\u725b\u3001\u996e\u6599\u5206\u522b\u5b9a\u4e49\u4e3a\uff1a\u5de6\u90e8\u70b9\uff0c\u4e2d\u90e8\u70b9\uff0c\u53f3\u90e8\u70b9\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u7684\u201c\u5339\u914d\u201d\u5c31\u4e0d\u662f\u539f\u6765\u7684\u5339\u914d\u4e86\u3002\n\n\u5339\u914d\u672c\u6765\u7684\u610f\u601d\u662f\uff1a\u4efb\u610f**\u4e24\u8fb9**\u4e0d\u5171**\u7aef\u70b9**\u3002\n\n\u800c\u5728\u8fd9\u91cc\uff0c\u201c\u5339\u914d\u201d\u7684\u610f\u601d\u4efb\u610f\u4e24\u6761\u4ece\u5de6\u90e8\u5230\u53f3\u90e8\u7684**\u8def\u5f84**\u6ca1\u6709\u516c\u5171**\u70b9**\u3002\n\n\u4f46\u662f\u5efa\u56fe\u7684\u65b9\u5f0f\u8fd8\u662f\u53ef\u4ee5\u4eff\u7167\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u2014\u2014\n\n$s \\rightarrow left \\rightarrow mid \\rightarrow right \\rightarrow t$\n\n\u4f46\u662f\u8fd9\u6837\u4e00\u6765\uff0c\u5982\u679c\u60a8\u771f\u6b63\u7406\u89e3\u4e86\u7f51\u7edc\u6700\u5927\u7624\u505a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u539f\u7406\u65f6\uff0c\u4f60\u5c31\u4f1a\u53d1\u73b0\uff1a\n\n\u672c\u6765\u7ecf\u8fc7\u6240\u6709**\u70b9**\u7684\u6d41\u91cf\u90fd\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8e1\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u7ecf\u8fc7mid\u70b9\u7684\u6d41\u91cf\u53ef\u80fd\u4f1a\u5927\u4e8e1\uff01\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u6709\u4e24\u6761\u8def\u5f84\u5171mid\u70b9\uff0c\u4e0e\u6211\u4eec\u4e4b\u524d\u8c08\u5230\u7684\u201c\u4e09\u5206\u56fe\u201d\u6700\u5927\u201c\u5339\u914d\u201d\u7684\u5b9a\u4e49\u4e0d\u7b26\u3002\n\n\u8fd9\u8bf4\u660e\u6211\u4eec\u9700\u8981\u5bf9mid\u70b9\u8fdb\u884c**\u201c\u9650\u6d41\u201d**~~\uff08\u6ca1\u9519\uff0c\u4e00\u5f00\u59cb\u6211\u5c31\u662f\u628a\u8fd9\u4e2a\u4e1c\u897f\u79f0\u4e3a\u201c\u9650\u6d41\u201d\uff0c\u540e\u9762\u624d\u77e5\u9053\u53eb\u62c6\u70b9\uff09~~\n\n\u9650\u6d41\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff1a\u5728\u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u2014\u2014\u7b2c\u4e8c\u7248\u300b\u7684\u7b2c3\u7ae0\u7b2c5\u8282\uff0c214\u9875\u7b2c\u4e8c\u70b9\u6709\u63d0\u5230\uff1a\n\n\u5c06\u4e00\u4e2a\u70b9\u62c6\u505a**\u5165\u70b9**\u548c**\u51fa\u70b9**\uff0c\u8fde\u4e00\u6761\u6743\u503c\u4e3a\u9650\u5236\u6d41\u91cf\u7684\u8fb9\u3002\n\n\u6240\u4ee5\u5c31\u53ef\u4ee5\u8fd9\u6837\u5efa\u56fe\uff1a\n\n$s \\rightarrow left \\rightarrow mid \\rightarrow mid' \\rightarrow right \\rightarrow t$\n\n\u4e0b\u9762\u6211\u4eec\u8981\u7ed9\u8fd9\u4e9b\u70b9\u5206\u914d\u7a7a\u95f4\uff1a\n\n\u6211\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff08\u65b9\u4fbf\uff09\n\n```cpp\n#define s 1 //\u6e90\n#define food(x) (x + 1) //\u98df\u7269\n#define cow1(x) (f + x + 1) //\u5165\u70b9\n#define cow2(x) (f + n + x + 1) //\u51fa\u70b9\n#define drnk(x) (f + n + n + x + 1) //\u996e\u6599\n#define t (f + n + n + dr + 2) //\u6c47\n```\n\n\u7136\u540e\u8dd1Dinic\u5373\u53ef\uff08\u867d\u8bf4\u770b\u8d77\u6765EK\u53ef\u8fc7\uff09\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define s 1\n#define food(x) (x + 1)\n#define cow1(x) (f + x + 1)\n#define cow2(x) (f + n + x + 1)\n#define drnk(x) (f + n + n + x + 1)\n#define t (f + n + n + dr + 2)\n#define inf (0x7fffffff)\nusing namespace std;\n\nint get()\n{\n\tint x = 0, f = 1; char c = getchar();\n\twhile(!isdigit(c)) { if(c == '-') f = -1; c = getchar(); }\n\twhile(isdigit(c)) { x = x * 10 + c - '0'; c = getchar(); }\n\treturn x * f;\n}\n\nconst int N = 1005, E = 20005;\nint n, f, dr;\nstruct Edge {\n\tint nxt, v, w;\n} edge[E];\nint head[N], cnt = 1;\nint d[N];\nint max_flow;\n\nvoid addedge(int u, int v, int w)\n{\n\tedge[++cnt].v = v;\n\tedge[cnt].w = w;\n\tedge[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\n\nvoid insedge(int u, int v, int w)\n{\n\taddedge(u, v, w);\n\taddedge(v, u, 0);\n}\n\nbool bfs() \n{\n\tmemset(d, 0, sizeof(d));\n\tqueue<int>q;\n\tq.push(s);\n\td[s] = 1;\n\twhile(q.size()) {\n\t\tint u = q.front(); q.pop();\n\t\tfor(int i = head[u]; i; i = edge[i].nxt) {\n\t\t\tint v = edge[i].v, w = edge[i].w;\n\t\t\tif(d[v] || !w) continue;\n\t\t\tq.push(v);\n\t\t\td[v] = d[u] + 1;\n\t\t\tif(v == t) return 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint dfs(int u, int flow)\n{\n    if(u == t) return flow;\n    int rest = flow, tot = 0;\n    for(int i = head[u]; i; i = edge[i].nxt){\n        int v = edge[i].v, w = edge[i].w;\n        if((!w) || d[u] + 1 != d[v]) continue;\n        int k = dfs(v, min(w, rest)); \n\t\trest -= k; \n\t\ttot += k;\n        edge[i].w -= k;\n\t\tedge[i^1].w += k;\n    }\n    return tot;\n}\n\nvoid dinic() //Dinic\u677f\u5b50\n{\n\twhile(bfs())\n\t\tmax_flow += dfs(s, inf);\n}\n\nint main()\n{\n\tn = get(), f = get(), dr = get(); \n\tfor(int i = 1; i <= n; i++) {\n\t\tint fi = get(), di = get();\n\t\tfor(int j = 1; j <= fi; j++) { \n\t\t\tint k = get();\n\t\t\tinsedge(food(k), cow1(i), 1); //\u98df\u7269\u8fde\u5165\u70b9\n\t\t}\n\t\tfor(int j = 1; j <= di; j++) {\n\t\t\tint k = get();\n\t\t\tinsedge(cow2(i), drnk(k), 1); //\u51fa\u70b9\u8fde\u996e\u6599\n\t\t}\n\t\tinsedge(cow1(i), cow2(i), 1); //\u5165\u70b9\u8fde\u51fa\u70b9\n\t}\n\tfor(int i = 1; i <= f; i++) insedge(s, food(i), 1); //\u6e90\u8fde\u98df\u7269\n\tfor(int i = 1; i <= dr; i++) insedge(drnk(i), t, 1); //\u996e\u6599\u8fde\u6c47\n\tdinic();\n\tprintf(\"%d\", max_flow);\n\treturn 0;\n}\n\n```\n\n~~\u81ea\u53e42P\u6ca1\u4eba\u770b\uff1f~~\n\n\u5bf9\u8fd9\u7c7b\u95ee\u9898\u7684\u603b\u7ed3\uff1a\n\n\u65e2\u7136\u5df2\u7ecf\u51fa\u73b0\u4e86\u4e8c\u5206\u56fe\u5339\u914d\u3001\u4e09\u5206\u56fe\u201c\u5339\u914d\u201d\uff0c\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u6709\u201c\u56db\u5206\u56fe\u5339\u914d\u201d\u4e43\u81f3\u201cN\u5206\u56fe\u5339\u914d\u201d\u7684\u51fa\u73b0\u5462\uff1f\n\n\u5c31\u7b97\u6765\u4e86\u4e5f\u4e0d\u6015\u4e86\u3002\n\n\u6211\u4eec\u90fd\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u7684\u65b9\u5f0f\u8fde\u8fb9\uff1a\n\n$s \\rightarrow a_1 \\rightarrow a_2 \\rightarrow a_2' \\rightarrow ... \\rightarrow a_{n-1} \\rightarrow a_{n-1}' \\rightarrow a_n \\rightarrow t$\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\u5c31\u884c\u4e86\u3002",
        "postTime": 1563678119,
        "uid": 92254,
        "name": "Social_Zhao",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2891 \u3010[USACO07OPEN]\u5403\u996dDining\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u76ee\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u505a\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u53bb\u505a\uff1b\t\n\u6211\u7528\u7684\u5c31\u662f\u4e8c\u5206\u56fe\u5339\u914d~~\uff08\u53ef\u80fd\u662f\u6211\u592a\u7b28\uff0c\u5199\u4e0d\u6765\u7f51\u7edc\u6d41\uff09~~\t\n\u9996\u5148\u6839\u636e\u9898\u610f\uff0c\u5efa\u7acb\u5982\u4e0b\u7684\u4e00\u5f20\u4e09\u5206\u56fe\uff08\u6ca1\u9519\uff0c\u5c31\u662f\u4e09\u5206\uff0c\u4e0d\u8fc7\u5176\u5b9e\u5c31\u662f\u4e24\u5f20\u4e8c\u5206\u56fe\u62fc\u63a5\u5728\u4e00\u8d77\uff09\uff0c\u5de6\u8fb9\u8868\u793a\u98df\u7269\uff0c\u4e2d\u95f4\u8868\u793a\u725b\uff0c\u53f3\u8fb9\u8868\u793a\u996e\u6599\uff1b\t\n\u6309\u7167\u9898\u76ee\u8981\u6c42\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u53ea\u725b\uff0c\u540c\u65f6\u5411\u5de6\u53f3\u4e24\u8fb9\u589e\u5e7f\uff0c\u589e\u5e7f\u6210\u529f\u5219ans++\uff1b\n![](https://cdn.luogu.com.cn/upload/pic/49016.png )\t\t\t\t\u4f46\u53ea\u53bb\u589e\u5e7f\u5e76\u4e0d\u80fdAC\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5bf9\u589e\u5e7f\u7684\u725b\u7684\u7f16\u53f7\u8fdb\u884c\u6392\u5e8f\uff0c\u5373\u8ba9\u8fde\u63a5\u8fb9\u6700\u591a\u7684\u725b\u5148\u53bb\u8d60\u5e7f\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u53d1\u751f\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u51b2\u7a81\uff0c\u4f8b\u5982A\u98df\u7269\u53ef\u4ee5\u540c\u65f6\u7ed9\u725ba\u548c\u725bb,\u4f46\u662f\u725ba\u53ef\u4ee5\u5339\u914d\u66f4\u591a\u98df\u7269\uff0c\u6211\u4eec\u80af\u5b9a\u4f1a\u5c06\u98df\u7269\u7ed9\u725ba\uff0c\u8fd9\u6837\u518d\u540e\u7eed\u7684\u5339\u914d\u4e2d\uff0c\u7b54\u6848\u66f4\u4f18(\u4f46\u8fd8\u4e0d\u662f\u6700\u4f18\uff01\uff01)\uff1b\t\n\u4e3a\u4ec0\u4e48\u8bf4\u4e0d\u662f\u6700\u4f18\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u540c\u65f6\u589e\u5e7f\u4e24\u6761\u8fb9\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u6761\u6ca1\u6709\u5339\u914d\u4e0a\uff0c\u4f46\u662f\u53e6\u5916\u4e00\u8fb9\u5374\u5339\u914d\u4e86\uff0c\u90a3\u4e48\u5f53\u524d\u7684\u98df\u7269\u6216\u996e\u6599\u5c31\u6d6a\u8d39\u4e86\uff0c\u56e0\u4e3a\u73b0\u5728\u7684\u8fd9\u5934\u725b\u5e76\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\uff1b\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u5728\u6709\u4e14\u4e00\u8fb9\u5339\u914d\u6210\u529f\u7684\u65f6\u5019\uff0c\u5bf9\u8fd9\u6761\u8fb9\u8fdb\u884c\u201c\u56de\u6eaf\u201d\uff0c\u5373\u628a\u4ee5\u524d\u7684\u5339\u914d\u60c5\u51b5\u4fdd\u7559\u4e0b\u6765\uff0c\u5177\u4f53\u770b\u4ee3\u7801\uff1a\t\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#define Max 105\nusing namespace std;\nint n,f,d,ans;\nbool vis[3][Max*Max],bol[Max*Max],changed[Max*Max];\nint match[3][Max*Max],du[3][Max*Max],num[Max*Max],pre[3][Max*Max];\nint fir[3][Max*Max],next[3][Max*Max],to[3][Max*Max],tot[3];\n\nvoid Add(int u,int v,int type){next[type][++tot[type]]=fir[type][u];fir[type][u]=tot[type];to[type][tot[type]]=v;}\n\nbool cmp(int x,int y){return du[1][x]==du[1][y]?du[2][x]>du[2][y]:du[1][x]>du[1][y];}\n\nbool dfs(int now,int type){\n    for(register int i = fir[type][now] ; i ; i = next[type][i]){\n        int y = to[type][i];\n        if(!vis[type][y]){\n            vis[type][y]=1;\n            if(!match[type][y]||dfs(match[type][y],type)){\n                pre[type][y]=match[type][y];\n                changed[y]=1;\n                match[type][y]=now;\n                return 1;\n            }\n        }\n    }\n    return 0;\n}//\u5339\u914d\u8fb9\uff1b\n\nvoid back(){for(register int i = 1 ; i  <= f ; ++i){if(changed[i])match[1][i]=pre[1][i];}}//\u201c\u56de\u6eaf\u201d\uff1b\n\nint main(){\n    scanf(\"%d%d%d\",&n,&f,&d);\n    for(register int i = 1,fi,di ; i <= n ; ++i){\n        scanf(\"%d%d\",&fi,&di);num[i]=i;\n        for(register int j = 1,x ; j <= fi ; ++j){\n            scanf(\"%d\",&x);Add(i,x,1);du[1][i]++;\n        }//\u5efa\u7acb\u7b2c\u4e00\u5f20\u4e8c\u5206\u56fe\uff1b\n        for(register int j = 1,x ; j <= di ; ++j){\n            scanf(\"%d\",&x);Add(i,x,2);du[2][i]++;\n        }//\u7b2c\u4e8c\u5f20\u4e8c\u5206\u56fe\uff1b\n        if(!fi||!di)bol[i]=1;//\u6d3e\u51fa\u4e00\u5b9a\u4e0d\u4f1a\u6ee1\u8db3\u7684\u725b\uff1b\n    }\n    sort(num+1,num+1+n,cmp);//\u6392\u4e2a\u5e8f\uff1b\n    for(register int i = 1 ; i <= n ; ++i){\n        if(!bol[num[i]]){\n            memset(vis,0,sizeof(vis));memset(changed,0,sizeof(changed));\n            if(dfs(num[i],1)){\n                if(dfs(num[i],2))ans++;\n                else back();//\u8fd9\u91cc\u5bf9\u7b2c\u4e00\u5f20\u56fe\u8fdb\u884c\u201c\u56de\u6eaf\u201d\uff1b\n            }\n        }\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1547963843,
        "uid": 73132,
        "name": "TangLongbin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2891 \u3010[USACO07OPEN]\u5403\u996dDining\u3011"
    },
    {
        "content": "\u6c42\u6700\u5927\u6d41(\u6e90\u70b9(s):0,\u6c47\u70b9(t):n+f+dd+n+1,\u98df\u54c1\u7f16\u53f7:1--f,\u996e\u6599\u7f16\u53f7:f+1--f+dd,\u5976\u725b\u7f16\u53f7:f+dd+1--f+dd+n,\u5976\u725b\u2018\u7f16\u53f7:f+dd+n+1--f+dd+n+n\u3002\n\ns\u5411\u6240\u6709\u98df\u54c1\u8fde\u8fb9\uff0c\u6743\u4e3a1\n\n\u6240\u6709\u996e\u6599\u5411t\u8fde\u8fb9\uff0c\u6743\u4e3a1\n\n\u62c6\u70b9\uff0c\u628a\u5976\u725bi\u62c6\u6210i\u548ci+n\uff0ci\u5411i+1\u8fde\u8fb9\uff0c\u6743\u4e3a1\n\n\u5976\u725bi\u5bf9\u5e94\u7684\u98df\u54c1\u5411i\u8fde\u8fb9\uff0c\u6743\u4e3a1\uff0c\u5976\u725b\u2019i+n\u5411\u5bf9\u5e94\u7684\u996e\u6599\u8fde\u8fb9\uff0c\u6743\u4e3a1\n\n\u6700\u540e\u505a\u4e00\u8fb9\u6700\u5927\u6d41\n\n\n\n\n\n\n```cpp\nvar\n  s,t,tot,i,x,k,m,n,j,ans,f,dd,aa,bb,a1:longint;\n  deep,d,pre,now,son,h,opp:array[0..100000] of longint;\nprocedure insert(a,b,c,p:longint);\nbegin\n  inc(tot);\n  pre[tot]:=now[a]; now[a]:=tot; son[tot]:=b;\n  d[tot]:=c; opp[tot]:=p;\nend;\nprocedure doit(a,b,c:longint);\nbegin\n  insert(a,b,c,tot+2);\n  insert(b,a,0,tot);\nend;\nfunction bfs:boolean;\nvar\n  head,tail,p:longint;\nbegin\n  fillchar(deep,sizeof(deep),$ff);\n  deep[s]:=0;\n  head:=1; tail:=1;\n  h[1]:=s;\n  repeat\n    p:=now[h[head]];\n    while p>0 do\n    begin\n      if (d[p]>0) and (deep[son[p]]=-1) then\n      begin\n        deep[son[p]]:=deep[h[head]]+1;\n        if son[p]=t then exit(true);\n        inc(tail);\n        h[tail]:=son[p];\n      end;\n      p:=pre[p];\n    end;\n    inc(head);\n  until head>tail;\n  exit(false);\nend;\nfunction find(x,tmpflow:longint):longint;\nvar\n  temp,sum,p:longint;\nbegin\n  if x=t then exit(tmpflow);\n  sum:=0;\n  p:=now[x];\n  while p>0 do\n  begin\n    if (d[p]>0) and (deep[x]+1=deep[son[p]]) then\n    begin\n      if tmpflow<d[p] then temp:=find(son[p],tmpflow)\n      else temp:=find(son[p],d[p]);\n      dec(d[p],temp);\n      inc(d[opp[p]],temp);\n      inc(sum,temp);\n      dec(tmpflow,temp);\n      if tmpflow=0 then break;\n    end;\n    p:=pre[p];\n  end;\n  deep[x]:=-1;\n  exit(sum);\nend;\nbegin\n  readln(n,f,dd);\n  s:=0;\n  t:=n+f+dd+n+1;\n  for i:=1 to f do\n    doit(s,i,1);\n  for i:=f+1 to f+dd do\n    doit(i,t,1);\n  for i:=f+dd+n+1 to f+dd+n+n do\n    doit(i-n,i,1);\n  for i:=f+dd+1 to f+dd+n do\n  begin\n    read(aa,bb);\n    for j:=1 to aa do\n    begin\n      read(a1);\n      doit(a1,i,1);\n    end;\n    for j:=1 to bb do\n    begin\n      read(a1);\n      doit(i+n,a1+f,1);\n    end;\n  end;\n  ans:=0;\n  while bfs do\n    inc(ans,find(s,maxlongint));\n  writeln(ans);\nend.\n```",
        "postTime": 1485075355,
        "uid": 21636,
        "name": "3269224138\u5218",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2891 \u3010[USACO07OPEN]\u5403\u996dDining\u3011"
    },
    {
        "content": "### \u3010\u9898\u76ee\u5927\u610f\u3011\n\u6bcf\u53ea\u5976\u725b\u90fd\u6709\u559c\u6b22\u7684\u98df\u7269\u548c\u996e\u6599\uff0c\u6bcf\u79cd\u98df\u7269\u548c\u996e\u6599\u90fd\u53ea\u80fd\u88ab\u4e00\u5934\u5976\u725b\u4eab\u7528\n\u6c42\u6700\u591a\u80fd\u6ee1\u8db3\u591a\u5c11\u5934\u5976\u725b\n### \u3010\u5206\u6790\u3011\n\u6700\u5927\u5339\u914d\uff0cn\u2264100\n\n\u57fa\u672c\u5c31\u80fd\u786e\u5b9a\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u89e3\n\n\u7f51\u7edc\u6d41\u4e00\u822c\u6d41\u7a0b\n\n* \u8bfb\u6570\u636e\n* \u5efa\u8fb9\n* \u8dd1\u677f\u5b50\n\n\u5173\u952e\u5728\u4e8e\u5efa\u8fb9\n\n\n![\u5927\u6982\u6a21\u578b](https://cdn.luogu.com.cn/upload/image_hosting/rrkzly3x.png)\n\n1. \u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9S\uff0c\u8d85\u7ea7\u6c47\u70b9T\n2. S\u5411\u98df\u7269\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\n3. \u98df\u7269\u5411\u5976\u725b\u7684\u5165\u70b9\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u98df\u7269\u6700\u591a\u88ab\u9009\u4e00\u6b21\n4. \u5976\u725b\u7684\u5165\u70b9\u8fde\u5411\u5bf9\u5e94\u5976\u725b\u7684\u51fa\u70b9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5976\u725b\u81f3\u591a\u90091\u79cd\u98df\u7269\uff0c1\u79cd\u996e\u6599\n5. \u5976\u725b\u7684\u51fa\u70b9\u5411\u996e\u6599\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\n\n6. \u996e\u6599\u5411T\u8fde\u8fb9\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u996e\u6599\u6700\u591a\u88ab\u9009\u4e00\u6b21\n\n\u6839\u636e\u4ee5\u4e0a\u5efa\u8fb9\u65b9\u5f0f\uff0c\u5c31\u80fd\u4fdd\u8bc1\u5976\u725b\u3001\u98df\u7269\u4e0e\u996e\u6599\u4e00\u4e00\u5339\u914d\uff0c\u4e14\u6700\u540e\u6c47\u70b9\u63a5\u53d7\u7684\u6d41\u91cf\u5373\u4e3a\u7b54\u6848\n### \u3010\u7b97\u6cd5\u3011\n\u6700\u5927\u6d41\n### \u3010\u4ee3\u7801\u3011\n```cpp\n#include<bits/stdc++.h>\n#define RE register\n#define IN inline\nusing namespace std;\nconst int maxn=105,maxt=maxn*10,maxe=10*maxn*maxn,INF=1<<30;\nint n,p,q,S,T;\nint tot=1,lnk[maxt];\nint cur[maxt],dep[maxt],que[maxt];\nint ans;\nstruct edge{\n\tint to,nxt,f;\n}e[maxe];\nIN int read(){\n\tRE int ret=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\nIN void add_e(RE int x,RE int y,RE int f){\n\te[++tot]=(edge){y,lnk[x],f};\n\tlnk[x]=tot;\n}\nIN void ADD(RE int x,RE int y,RE int f){\n\tadd_e(x,y,f),add_e(y,x,0);\n}\nIN bool BFS(RE int s,RE int t){\n\tfor(RE int i=1;i<=T;i++) cur[i]=lnk[i],dep[i]=INF;\n\tRE int hed=0,til=1;\n\tque[1]=s,dep[s]=0;\n\twhile(hed!=til){\n\t\tRE int x=que[++hed];\n\t\tfor(RE int j=lnk[x];j;j=e[j].nxt){\n\t\t\tRE int y=e[j].to;\n\t\t\tif(dep[y]>dep[x]+1&&e[j].f){\n\t\t\t\tdep[y]=dep[x]+1;\n\t\t\t\tque[++til]=y;\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[T]<INF;\n}\nint DFS(RE int x,RE int limit){\n\tif(!limit||x==T) return limit;\n\tRE int flow=0,f;\n\tfor(RE int j=cur[x];j;j=e[j].nxt){\n\t\tcur[x]=j;\n\t\tRE int y=e[j].to;\n\t\tif(dep[y]==dep[x]+1&&(f=DFS(y,min(limit,e[j].f)))){\n\t\t\tflow+=f;\n\t\t\tlimit-=f;\n\t\t\te[j].f-=f;\n\t\t\te[j^1].f+=f;\n\t\t\tif(!limit) break;\n\t\t}\n\t}\n\treturn flow;\n}\nIN void Dinic(RE int s,RE int t){\n\twhile(BFS(s,t)){\n\t\tans+=DFS(s,INF);\n\t}\n}\nvoid make_e(){\n\tS=n*2+p+q+1,T=S+1;\n    //\u6b65\u9aa41\n\tfor(RE int i=1;i<=p;i++) ADD(S,i,1);\n    //2\u7c7b\u8fb9\n\tfor(RE int i=1;i<=q;i++) ADD(p+2*n+i,T,1);\n    //6\u7c7b\u8fb9\n\tfor(RE int i=1;i<=n;i++) ADD(p+i,p+i+n,1);\n    //4\u7c7b\u8fb9\n\tfor(RE int i=1;i<=n;i++){\n\t\tRE int f=read(),d=read();\n\t\tfor(RE int j=1;j<=f;j++){\n\t\t\tint x=read();\n\t\t\tADD(x,p+i,1);\n            //3\u7c7b\u8fb9\n\t\t}\n\t\tfor(RE int j=1;j<=d;j++){\n\t\t\tRE int x=read();\n\t\t\tADD(p+n+i,p+2*n+x,1);\n            //5\u7c7b\u8fb9\n\t\t}\n\t}\n}\nint main(){\n//  \tfreopen(\"P2891.in\",\"r\",stdin);\n//  \tfreopen(\"P2891.out\",\"w\",stdout);\n \tn=read(),p=read(),q=read();\n \tmake_e();//\u5efa\u8fb9\n\tDinic(S,T);//\u8dd1\u677f\u5b50\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1577096882,
        "uid": 116251,
        "name": "\u7834\u5fc6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2891 \u3010[USACO07OPEN]\u5403\u996dDining\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P2891)\u770b\u9898\u76ee\u3002\n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6709\u6ca1\u6709\u60f3\u8fc7\u76f4\u63a5\u6e90\u70b9\u8fde\u996e\u6599\uff0c\u996e\u6599\u8fde\u725b\uff0c\u725b\u8fde\u98df\u7269\uff0c\u98df\u7269\u8fde\u6c47\u70b9\uff0c\u7136\u540e\u66b4\u529b\u8dd1\u5339\u914d\uff1f  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4ea4\u4e0a\u53bb\u4f60\u4e0d$WA$\uff0c~~\u6211\u5f53\u573a\u5c31\u628a\u8fd9\u4e2a\u7535\u8111\u5c4f\u5e55\u5403\u4e0b\u53bb~~\u624d\u602a\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u9996\u5148\u8fd9\u4e2a\u95ee\u9898\u6709\u5f88\u660e\u663e\u7684\u9650\u5236\u2014\u2014\u6bcf\u5934\u725b\u53ea\u80fd\u4eab\u7528\u6700\u591a\u4e00\u79cd\u996e\u6599\u548c\u4e00\u79cd\u98df\u7269\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e2d\u95f4\u7684\u201c\u725b\u201d\u8282\u70b9\u662f\u6709\u6d41\u91cf\u4e0a\u9650\u7684\uff01  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5f88\u597d\u5904\u7406\uff0c\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5728\u4e4b\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7136\u540e\u518d\u8dd1\u666e\u901a\u7684\u7f51\u7edc\u6d41\u5c31\u53ef\u4ee5\u4e86\u3002$EK$\u6216\u8005$Dinic$\u90fd\u53ef\u4ee5\u3002\n# \u4ee3\u7801\n```cpp\n#include <queue>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n//#define PAGING\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXSIZ = 505, MAXM = 25005;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt, w;\n}Graph[MAXM];\n\nstruct pre\n{\n\tint v, e;\n}p[MAXSIZ];\n\nqueue<int> q;\n\nint head[MAXSIZ];\nint N, F, D, siz, cnt = 1;\nbool visited[MAXSIZ];\n\nvoid addEdge( const int from, const int to, const int W )\n{\n\tcnt ++;\n\tGraph[cnt].w = W;\n\tGraph[cnt].to = to;\n\tGraph[cnt].nxt = head[from];\n\thead[from] = cnt;\n\t#ifdef PAGING\n\tif( ! W ) return;\n\tif( W ^ INF ) printf( \"    %d -> %d[color = red];\\n\", from, to );\n\telse printf( \"    %d -> %d[color = blue];\\n\", from, to );\n\t#endif\n}\n\nvoid aE( const int from, const int to, const int W )\n{\n\taddEdge( from, to, W );\n\taddEdge( to, from, 0 );\n}\n\nbool BFS( const int S, const int T )\n{\n\twhile( ! q.empty() ) q.pop();\n\tmemset( visited, false, sizeof( visited ) );\n\tmemset( p, -1, sizeof( p ) );\n\tvisited[S] = true;\n\tq.push( S );\n\tint u, v;\n\twhile( ! q.empty() )\n\t{\n\t\tu = q.front();\n\t\tq.pop();\n\t\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t\t{\n\t\t\tv = Graph[i].to;\n\t\t\tif( ! visited[v] && Graph[i].w )\n\t\t\t{\n   \t\t\t\tvisited[v] = true;\n\t\t\t\tp[v].v = u, p[v].e = i;\n\t\t\t\tif( v == T ) return true;\n\t\t\t\tq.push( v );\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint EK( const int S, const int T )\n{\n\tint minVal, res = 0;\n\twhile( BFS( S, T ) )\n\t{\n\t\tminVal = INF;\n\t\tfor( int u = T ; u ^ S ; u = p[u].v ) minVal = MIN( minVal, Graph[p[u].e].w );\n\t\tfor( int u = T ; u ^ S ; u = p[u].v ) Graph[p[u].e].w -= minVal, Graph[p[u].e ^ 1].w += minVal;\n\t\tres += minVal;\n\t}\n\treturn res;\n}\n\nint main()\n{\n\t#ifdef PAGING\n\tfreopen( \"PAG.dot\", \"w\", stdout );\n\tputs( \"digraph PAG{\\n\" );\n\tputs( \"    rankdir = LR\" );\n\tputs( \"    node[shape = circle]\" );\n\t#endif\n\tint S = 0;\n\tread( N ), read( F ), read( D );\n\tS = 2 * N + F + D + 1;\n\tint f, d, to;\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tread( f ), read( d );\n\t\tfor( int j = 1 ; j <= f ; j ++ )\n\t\t{\n\t\t\tread( to );\n\t\t\taE( to, F + i, INF );\n\t\t}\n\t\tfor( int j = 1 ; j <= d ; j ++ )\n\t\t{\n\t\t\tread( to );\n\t\t\taE( N + F + i, 2 * N + F + to, INF );\n\t\t}\n\t\taE( F + i, F + N + i, 1 );\n\t}\n\tfor( int i = 1 ; i <= F ; i ++ )\n\t\taE( 0, i, 1 );\n\tfor( int i = 1 ; i <= D ; i ++ )\n\t\taE( 2 * N + F + i, S, 1 );\n\t#ifdef PAGING\n\tputs( \"}\" );\n\t#else\n\twrite( EK( 0, S ) ), putchar( '\\n' );\n\t#endif\n\treturn 0;\n    //\u4ee5\u4e0a\u5947\u602a\u7684\u9884\u7f16\u8bd1\u6307\u4ee4\u90fd\u662f\u7528\u6765\u7ed9\u6837\u4f8b\u753b\u56fe\u7684\n}\n```",
        "postTime": 1567166913,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[P2891][USACO07OPEN]\u5403\u996dDining"
    },
    {
        "content": "\u5f31\u5f31\u7684\u849f\u84bb\u6765\u53d1\u81ea\u5df1\u7684\u7b2c\u4e8c\u7bc7\u9898\u89e3\u4e86\uff08\u867d\u8bf4\u548c\u7b2c\u4e00\u7bc7\u7684\u9898\u76ee\u7c7b\u578b\u5176\u5b9e\u662f\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u849f\u84bb\u5927\u6982\u4e5f\u5c31\u53ea\u4f1a\u8fd9\u4e00\u79cd\u9898\u76ee\u4e86\uff09\n\n\u5176\u5b9e\u8fd9\u9898\u4e5f\u8fd8\u662f~~\u5f88\u6c34~~\u7684\n\n\u8fd9\u9898\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a\u57fa\u672c\u7684\u6700\u5927\u6d41\uff0cdinic\u65b9\u6cd5\u5c31\u4e0d\u591a\u8d58\u8ff0\n\n\u5f53\u7136\u8eab\u4e3a\u4e00\u9053\u84dd\u9898\uff0c\u80af\u5b9a\u4e0d\u53ea\u662f\u6700\u57fa\u672c\u7684\u7f51\u7edc\u6700\u5927\u6d41\u4e86\n\n\u7531\u4e8e\u6bcf\u79cd\u996e\u6599\u548c\u98df\u7269\u53ea\u53ef\u80fd\u7ed9\u4e00\u5934\u725b\u5403\uff0c\u5f53\u591a\u5934\u725b\u90fd\u60f3\u5403\u8fd9\u4e2a\u98df\u7269\u6216\u8005\u559d\u8fd9\u4e2a\u996e\u6599\u7684\u65f6\u5019\uff0c\u5982\u679c\u53ea\u7528\u666e\u901a\u7684\u6700\u5927\u6d41\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u4f1a\u88ab\u4f7f\u7528\u591a\u6b21\uff08\u5c31\u53d8\u6210\u4e86\u5f88\u591a\u725b\u5403\u4e00\u6837\u98df\u7269\u6216\u8005\u996e\u6599\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u62c6\u70b9\uff0c\u5373\u628a\u725b\u62c6\u6210\u4e00\u4e2a\u5b9e\u70b9\u548c\u4e00\u4e2a\u865a\u70b9\uff0c\u4e2d\u95f4\u7684\u6d41\u91cf\u4e3a1\u5373\u53ef\uff0c\u4ee5\u786e\u4fdd\u4e00\u6837\u98df\u54c1\u4e0d\u4f1a\u88ab\u591a\u6b21\u98df\u7528\u3002\n\n\u5927\u6982\u7684\u56fe\u5c31\u662f \u6e90\u70b9--\u98df\u7269--\u725b\uff08\u5b9e\u70b9\uff09--\u725b\uff08\u865a\u70b9\uff09--\u996e\u6599--\u6c47\u70b9\n\n\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u90fd\u662f1\n\n# \u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define FOR(i,l,r) for(register int i=l;i<=r;i++)\n#define INF 1<<30\n\nusing namespace std;\n\nconst int N=6000001;\nconst int M=1001;\nint to[N],nxt[N],head[N],cnt=1,w[N],s,t,d[N],q[N],cur[N],orz; \nint n,f,ans;\nvoid qxx(int x,int y,int dis)\n{\n    to[++cnt]=y;\n    w[cnt]=dis;\n    nxt[cnt]=head[x];\n    head[x]=cnt;\n}\nvoid add(int x,int y,int z)\n{\n\tqxx(x,y,z);\n\tqxx(y,x,0);\n}\nint bfs()\n{\n    memset(d,-1,sizeof(d));\n    int fr,tail;\n    fr=1,tail=0;\n    d[s]=0;\n    q[1]=s;\n    while(tail<fr)\n    {\n        int k=q[++tail];\n        for(register int i=head[k];i;i=nxt[i])\n        {\n            int kk=to[i];\n            if(d[kk]==-1&&w[i])\n            {\n                d[kk]=d[k]+1;\n                q[++fr]=kk;\n            }\n        }\n    }\n    if(d[t]==-1)\n        return 0;\n    else \n        return 1;\n}\nint dfs(int x,int minflow)\n{\n    int a=0;\n    if(x==t||!minflow)\n        return minflow;\n    for(register int i=cur[x];i;i=nxt[i])\n    {\n        int k=to[i];cur[x]=i;\n        if(d[k]==d[x]+1&&(a=dfs(k,min(w[i],minflow))))\n        {\n            w[i]-=a;\n            w[i^1]+=a;\n            return a;\n        }\n    }\n    return 0;\n} //\u6700\u5927\u6d41 \nint dinic()\n{\n    ans=0;\n    int STO;\n    while(bfs())\n    {\n        STO=0;\n        memcpy(cur,head,sizeof(head));\n        while(STO=dfs(s,INF))\n        {\n            ans+=STO;\n        }\n    }\n    return ans;\n}//dinic \u4e0d\u591a\u8bf4 \nint main()\n{\n\tint k;\n\tscanf(\"%d%d%d\",&n,&f,&k);// n  \u725b\u7684\u5934\u6570   f   \u98df\u7269\u79cd\u7c7b\u6570   k  \u996e\u6599\u79cd\u7c7b\u6570 \n\torz=2*n+f+k;//\u62c6\u70b9\u540e\u70b9\u7684\u6570\u91cf \n\ts=0,t=orz+1;//\u6e90\u70b9\u548c\u6c47\u70b9 \n\tFOR(i,1,f)\n\t{\n\t\tadd(s,i,1);\n\t} //\u8fde\u6e90\u70b9 \n\tFOR(i,1,k)\n\t{\n \t\tadd(2*n+f+i,t,1);\n\t} //\u8fde\u6c47\u70b9 \n\tFOR(i,1,n)\n\t{\n\t\tadd(f+i,n+f+i,1);\n\t} //\u62c6\u70b9 \n\tFOR(i,1,n)\n\t{ \n\t\tint l,r;\n\t\tscanf(\"%d%d\",&l,&r);\n\t\tFOR(j,1,l)\n\t\t{\n\t\t\tint a;\n\t\t\tscanf(\"%d\",&a);\n\t\t\tadd(a,f+i,1);\n\t\t}\n\t\tFOR(j,1,r)\n\t\t{\n\t\t\tint a;\n\t\t\tscanf(\"%d\",&a);\n\t\t\tadd(f+n+i,a+f+2*n,1);\n\t\t}\n\t}//\u5982\u679c\u559c\u6b22\u5c31\u5efa\u8fb9 \n\tprintf(\"%d\",dinic());\n    return 0;//\u7ed3\u675f \n}\n```\n\n\n### \u8fd9\u9898\u4e5f\u6709[\u4e09\u500d\u7ecf\u9a8c](https://www.luogu.org/discuss/show?postid=69873)\u7684 \n\n\n #### \u6700\u540e\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\uff0c\u5f53\u7136\u662f\u819c\u4e00\u4e0b[\u6700\u5f3a\u6700\u5f3a\u7684\u5927\u4f6c\u4e86](https://www.luogu.org/space/show?uid=122988)\u4e86\n\n",
        "postTime": 1544872266,
        "uid": 123318,
        "name": "ViXpop",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2891 \u3010[USACO07OPEN]\u5403\u996dDining\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d41\u91cd\u5728\u5efa\u56fe\u3002\n\n\u5176\u4e2d\u6bcf\u4e00\u5934\u725b\u5bf9\u5e94\u4e00\u79cd\u996e\u6599\u4e0e\u98df\u7269\u3002\n\n\u5c06\u996e\u6599\u4e0e\u98df\u7269\u653e\u5728\u4e24\u8fb9\uff0c\u725b\u653e\u5728\u4e2d\u95f4\uff0c\u5bf9\u5e94\u8fde\u63a5\u8fb9\uff0ccap\uff08\u5bb9\u91cf\uff09\u8bbe\u4e3a1\u3002\n\n\u5176\u4e2d\u8981\u6ce8\u610f\uff0c\u4e00\u5934\u725b\u53ea\u80fd\u5bf9\u5e94\u4e00\u79cd\u996e\u6599\u4e0e\u4e00\u79cd\u98df\u7269\uff0c\u53ef\u80fd\u6709\u591a\u79cd\u98df\u7269\u6307\u5411\u4e00\u5934\u725b\uff0c\u6240\u4ee5\u8981\u628a\u725b\u7684\u7ed3\u70b9\u5206\u88c2\u6210\u4e24\u4e2a\uff0c\u7528\u8fb9\u8fde\u63a5\uff0ccap\u4e3a1\u3002\n\n\u8282\u70b9\u5206\u914d\u5f04\u6e05\u695a\u3002\n\n\uff08\u90bb\u63a5\u8868\u52a0\u8fb9\u4e00\u5b9a\u8981\u5199\u51fd\u6570\u4e0d\u7136\u4ee3\u7801\u8fa3\u76ee0\u30020\uff09\n\n\u2018\u2019\u2018\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define INF 105\nusing namespace std;\nint n,m,p,S,T,u,cnt,l,r;\nstruct Edge{\n    int to,nex,cap;\n}e[50000];\nint fir[500],cur[500],q[500],d[500];\ninline int Min(int x,int y){return x<y?x:y;}\nbool bfs() {\n    memset(d,-1,sizeof d);\n    l=r=0; q[r++]=S; d[S]=0;\n    while(l<r){\n        int x=q[l++];\n        for(int i=fir[x];i!=-1;i=e[i].nex) {\n            if(e[i].cap<=0 || d[e[i].to]!=-1) continue;\n            q[r++]=e[i].to;\n            d[e[i].to]=d[x]+1;\n            if(e[i].to==T) return true;\n        }\n    }\n    return false;\n}\nint dfs(int x,int now) {\n    if(!now || x==T) return now;\n    int flow=0,f;\n    for(int& i=cur[x];i!=-1;i=e[i].nex) {\n        if(d[e[i].to]!=d[x]+1) continue;\n        f=dfs(e[i].to,Min(now,e[i].cap));\n        if(f<1) continue;\n        flow+=f; now-=f;\n        e[i].cap-=f; e[i^1].cap+=f;\n        if(!now) break;\n    }\n    return flow;\n}\nint Dinic() {\n    int ans=0;\n    while(bfs()){\n        for(int i=0;i<=T;i++) cur[i]=fir[i];\n        ans+=dfs(S,INF);\n    }\n    return ans;\n}\nvoid Add_Edge(int x,int y){\n    u++; e[u].to=y; e[u].cap=1; e[u].nex=fir[x]; fir[x]=u;\n    u^=1; e[u].to=x; e[u].cap=0; e[u].nex=fir[y]; fir[y]=u;\n    return ;\n}\nint main(){\n    memset(fir,-1,sizeof fir);\n    scanf(\"%d%d%d\",&n,&m,&p);\n    u=-1; T=n*2+m+p+2;\n    for(int i=1;i<=m;i++) Add_Edge(S,++cnt);\n    for(int i=1;i<=p;i++) Add_Edge(++cnt,T);\n    for(int i=1;i<=n;i++){\n        ++cnt;\n        int mi,pi,x;\n        scanf(\"%d%d\",&mi,&pi);\n        while(mi--) scanf(\"%d\",&x) , Add_Edge(x,cnt);\n        ++cnt; Add_Edge(cnt-1,cnt);\n        while(pi--) scanf(\"%d\",&x) , Add_Edge(cnt,x+m);\n    }\n    printf(\"%d\\n\",Dinic());\n    return 0;\n}\n\u2019\u2018\u2019\n```",
        "postTime": 1482325624,
        "uid": 20558,
        "name": "zyh2015",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2891 \u3010[USACO07OPEN]\u5403\u996dDining\u3011"
    }
]