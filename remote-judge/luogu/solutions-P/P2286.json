[
    {
        "content": "~~\u6211\u7684splay\u4e3a\u5565\u8dd1\u5f97\u8fd9\u4e48\u5feb\u3002\u3002\u3002\u3002~~\n\n\u5176\u5b9e\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2asplay\n\n\u5b58\u4e00\u4e0b\u5f53\u524d\u662f\u5ba0\u7269\u591a\u8fd8\u662f\u987e\u5ba2\u591a\uff0c\u968f\u65f6\u5728\u5ba0\u7269\u548c\u987e\u5ba2\u4e4b\u95f4\u8f6c\u6362\n\n\u6bcf\u4e00\u6b21\u52a0\u8fdb\u6765\u4e00\u4e2a\u5ba0\u7269\u65f6\n\n\u5982\u679c\u662f\u5ba0\u7269\u6811\u5c31\u76f4\u63a5\u63d2\u5165\n\n\u5426\u5219\u67e5\u627e\u5f53\u524d\u987e\u5ba2\u7684\u671f\u671b\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff08\u4e0d\u662f\u4e25\u683c\u7684\uff09\n\n\u62c9\u51fa\u6765\u5220\u9664\uff0c\u7edf\u8ba1\u7b54\u6848\n\n\u53cd\u4e4b\u5982\u679c\u662f\u987e\u5ba2\u6811\uff0c\u5c31\u53cd\u7740\u6765\u505a\u5c31\u884c\u4e86\n\n\u5f53\u7136\uff0c\u5982\u679c\u4f60\u4e50\u610f\u5199\u4e24\u4e2asplay\uff08\u4e5f\u5c31\u590d\u5236\u4e00\u4e0b\uff09\n\n\u90a3\u5c31\u624b\u52a8\u7ef4\u62a4\u987e\u5ba2\u6811\u548c\u5ba0\u7269\u6570\u5c31\u884c\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define MAX 200000\n#define MOD 1000000\nint tot;\ninline int read()\n{\n    register int x=0,t=1;\n    register char ch=getchar();\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n    if(ch=='-'){t=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-48;ch=getchar();}\n    return x*t;\n}\nstruct Node\n{\n    int ch[2];\n    int val;\n    int ff;\n}t[MAX];\nint root;\ninline void rotate(int x)\n{\n    int y=t[x].ff;\n    int z=t[y].ff;\n    int k=(x==t[y].ch[1]);\n    t[z].ch[y==t[z].ch[1]]=x;\n    t[x].ff=z;\n    t[y].ch[k]=t[x].ch[k^1];\n    t[t[x].ch[k^1]].ff=y;\n    t[x].ch[k^1]=y;\n    t[y].ff=x;\n}\ninline void splay(int x,int goal)\n{\n    //if(x==0)return;\n    while(t[x].ff!=goal)\n    {\n        int y=t[x].ff;\n        int z=t[y].ff;\n        if(z!=goal)\n            (t[z].ch[0]==y)^(t[y].ch[0]==x)?rotate(x):rotate(y);\n        rotate(x);\n    }\n    if(goal==0)root=x;\n}\ninline void insert(int x)\n{\n    int u=root,ff=0;\n    while(u&&t[u].val!=x)\n    {\n        ff=u;\n        u=t[u].ch[t[u].val<x];\n    }\n    if(u);\n    else\n    {\n        u=++tot;\n        if(ff)t[ff].ch[t[ff].val<x]=u;\n        t[u].ff=ff;\n        t[u].ch[0]=t[u].ch[1]=0;\n        t[u].val=x;\n    }\n    splay(u,0);\n}\ninline void find(int x)\n{\n    int u=root;\n    if(!u)return;\n    while(t[u].ch[x>t[u].val]&&x!=t[u].val)\n        u=t[u].ch[x>t[u].val];\n    splay(u,0);\n}\ninline int Next(int x,int f)\n{\n    find(x);\n    int u=root;\n    if(t[u].val>=x&&f)return u;\n    if(t[u].val<=x&&!f)return u;\n    u=t[u].ch[f];\n    while(t[u].ch[f^1])u=t[u].ch[f^1];\n    return u;\n}\ninline int Next_une(int x,int f)\n{\n    find(x);\n    int u=root;\n    if(t[u].val>x&&f)return u;\n    if(t[u].val<x&&!f)return u;\n    u=t[u].ch[f];\n    while(t[u].ch[f^1])u=t[u].ch[f^1];\n    return u;\n}\ninline void Delete(int x)\n{\n    int lt=Next_une(x,0);\n    int nt=Next_une(x,1);\n    splay(lt,0);splay(nt,lt);\n    t[nt].ch[0]=0;\n}\nint main()\n{\n    int n=read();\n    int cnt=0,ans=0;\n    insert(+214748364);\n    insert(-214748364);\n    while(n--)\n    {\n        int k=read(),x=read();\n        if(x==1)\n            x=1;\n        if(cnt==0)//\u7a7a\u6811\n            insert(x);\n        if(cnt>0)//\u5ba0\u7269\u6811\n        {\n            if(k==0)insert(x);\n            else//\u65b0\u6765\u987e\u5ba2\n            {\n                int a1=t[Next(x,0)].val;//\u524d\u9a71\n                int a2=t[Next(x,1)].val;//\u540e\u7ee7\n                if(abs(a1-x)<=abs(a2-x))\n                {\n                    ans+=abs(a1-x);\n                    Delete(a1);\n                }\n                else\n                {\n                    (ans+=abs(a2-x))%=MOD;\n                    Delete(a2);\n                }\n            }\n        }\n        if(cnt<0)//\u987e\u5ba2\u6811\n        {\n            if(k==1)insert(x);\n            else//\u65b0\u6765\u5ba0\u7269\n            {\n                int a1=t[Next(x,0)].val;\n                int a2=t[Next(x,1)].val;\n                if(abs(a1-x)<=abs(a2-x))\n                {\n                    (ans+=abs(a1-x))%=MOD;\n                    Delete(a1);\n                }\n                else\n                {\n                    (ans+=abs(a2-x))%=MOD;\n                    Delete(a2);\n                }\n            }\n        }\n        cnt=cnt+(k==0?1:-1);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1503475457,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u5f88\u88f8\u7684\u5e73\u8861\u6811\uff0c\u672c\u6765\u60f3\u65e0\u8111\u6253\u4e00\u4e2a Treap \u7684\u677f\u5b50\u8fc7\u7684\uff0c\u4f46\u662f\u7ecf\u540c\u5b66\u63d0\u9192\uff0c\u8bf4\u662f\u53ef\u4ee5\u76f4\u63a5\u7528 set \u505a\uff0c\u601d\u8003\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u7684\u786e\u5982\u6b64\u3002\u6bd5\u7adf\u5728\u5f88\u591a\u7684 g++ \u7248\u672c\u4e0a\uff0c set \u7684\u5b9e\u73b0\u662f\u4f7f\u7528\u4e86 RBT \u3002\u6240\u4ee5\u8bf4\uff0c\u80fd\u7528 set \u7684\u65f6\u5019\uff0c\u8fd8\u662f\u5c3d\u53ef\u80fd\u7528\u5427\uff0c\u6bd5\u7adf\u4ee3\u7801\u91cf\u5c0f\uff0c\u901f\u5ea6\u4e5f\u5f88\u5feb\u3002\n\n\n\u4e0b\u9762\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a\n\n\n    \n    \n    \n```cpp\n    #include <cstdio>\n    #include <set>\n    const int maxn = 1000000;\n    const int INF = 1e9;\n    int n, ans;\n    std::set<int> s;\n    void find(int x) {\n        std::set<int>::iterator left, right;\n        left = --s.lower_bound(x), right = s.lower_bound(x); //lower_boud \u5728\u5b9e\u73b0\u7684\u65f6\u5019\u4f7f\u7528\u4e86\u4e8c\u5206\n        if(x - *left <= *right - x && *left != -INF) {\n            ans += x - *left;\n            s.erase(left);\n        } else {\n            ans += *right - x;\n            s.erase(right);\n        }\n        ans %= 1000000;//\u4e0d\u8981\u5fd8\u8bb0\u53d6\u6a21\n    }\n    int main() {\n        scanf(\"%d\", &n);\n        int cur;\n        s.insert( -INF ), s.insert( INF ); //\u8fd9\u91cc\u4e3b\u8981\u662f\u9632\u6b62\u8d8a\u754c\u8fd9\u7c7b\u83ab\u540d\u7684\u9519\u8bef\uff0c\u6b64\u5904\u53c2\u8003\u4e86\u9ec4\u5b66\u957f\u7684\u535a\u5ba2\n        for(int i = 1; i <= n; i++) {\n            int a, b;\n            scanf(\"%d%d\", &a, &b);\n            if(s.size() == 2) {\n                cur = a; //\u7528 cur \u8bb0\u5f55\u5f53\u524d\u662f\u4eba\u8fd8\u662f\u72d7\n                s.insert(b);\n            } else if(a == cur) s.insert(b);\n            else find(b);\n        }\n        printf(\"%d\\n\", ans);\n        return 0;\n    }\n\n```",
        "postTime": 1513401358,
        "uid": 3398,
        "name": "DaCong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\u51fa\u4e00\u4e2a\u5e8f\u5217\u4e2d\u4e0ex\u5dee\u503c\u6700\u5c0f\u7684\u6570\uff0c\u800c\u4e14\u6570\u636e\u4fdd\u8bc1\u8bfb\u5165\u7684\u6570\u503c\u4e0d\u91cd\u590d\uff0c\u56e0\u6b64\u6211\u4eec\u7528$set$\u7ef4\u62a4\u3002\n\n\u540c\u4e00\u65f6\u95f4\u5446\u5728\u6536\u517b\u6240\u4e2d\u7684\uff0c\u8981\u4e48\u5168\u662f\u5ba0\u7269\uff0c\u8981\u4e48\u5168\u662f\u9886\u517b\u8005\u3002\u5982\u679c\u8bfb\u5165\u7684\u662f\u5ba0\u7269\uff0c\u6ca1\u6709\u9886\u517b\u8005\u76f4\u63a5$insert$\uff0c\u53cd\u4e4b\uff0c\u5219\u80af\u5b9a\u6709\u9886\u517b\u8005\u53ef\u4ee5\u548c\u5ba0\u7269\u914d\u5bf9\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u7528$lowerbound$\u627e\u51fa\u9886\u517b\u4eba\u7684$set$\u4e2d\u6700\u63a5\u8fd1x\u7684\u5143\u7d20\uff0c\u9009\u62e9 \u5927\u4e8e$x$\u7684\u6700\u5c0f\u503c \u548c \u5c0f\u4e8e$x$\u7684\u6700\u5927\u503c \u4e2d\u6700\u4f18\u7684\u60c5\u51b5\u914d\u5bf9\uff0c\u66f4\u65b0\u7b54\u6848\uff0c\u5e76\u5728\u9886\u517b\u8005\u7684$set$\u4e2d$erase$\u6389\u5df2\u7ecf\u914d\u5bf9\u7684\u6570\u503c\u3002\n\n\u9886\u517b\u8005\u7684\u60c5\u51b5\u548c\u5ba0\u7269\u5b8c\u5168\u76f8\u540c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u4f4d\u8fd0\u7b97\u53d6\u53cd\u6765\u8868\u793a\u5ba0\u7269\u548c\u9886\u517b\u8005\u3002\n\n\u6ce8\u610f\u7279\u5224$x$\u5728\u8fb9\u754c\u7684\u60c5\u51b5\uff0c\u9632\u6b62\u8fed\u4ee3\u5668\u8d8a\u754c\u3002\n\n\u7528\u4e86set\u7801\u91cf\u8fd8\u662f\u633a\u5c0f\u7684qwq\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int mod=1000000,INF=0x7fffffff;\nset<int>a[2];\nset<int>::iterator it;\nint n,ans=0;\nint main()\n{\n    int opt,x;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d\",&opt,&x);\n        if(a[opt^1].empty()){a[opt].insert(x);continue;}\n        \n        if(x>*(--a[opt^1].end()))\n        {\n            ans+=x-*(--a[opt^1].end());ans%=mod;\n            a[opt^1].erase(*(--a[opt^1].end()));\n        }\n        else if(x<*(a[opt^1].begin()))\n        {\n            ans+=*(a[opt^1].begin())-x;ans%=mod;\n            a[opt^1].erase(*(a[opt^1].begin()));\n        }\n        else\n        {\n            it=a[opt^1].lower_bound(x);\n            int nxt=*it,pre=*(--it);\n            if(x-pre<=nxt-x)a[opt^1].erase(pre),ans=(ans+x-pre)%mod;\n            else a[opt^1].erase(nxt),ans=(ans+nxt-x)%mod;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1552958862,
        "uid": 80299,
        "name": "crpboy",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "# \u611f\u8c22 @Cefola_Kiroxs\n\n[**\u9898\u76ee\u94fe\u63a5**](https://www.luogu.org/problem/P2286)\n\n# \u524d\u8a00\uff1a\n\n\u554a\u770b\u5230dalao\u90fd\u7528$\\texttt{Splay}$\u554a\u3001$\\texttt{fhq Treap}$\u554a\u3001$\\texttt{avl-Tree}$\u3002\u3002\u3002~~\u8fd9\u4e9b\u6211\u90fd\u4e0d\u4f1a~~\u3002\n\n\u6240\u4ee5\u6211\u5c31\u7528$\\texttt{\u65cb\u8f6c\u5f0fTreap}$\u4e86QAQ\n\n# \u601d\u8def\uff1a\n\n\u5982\u679c\u662f\u5b66\u8fc7\u5e73\u8861\u6811\u7684\uff0c\u90fd\u53ef\u4ee5\u770b\u51fa\u8fd9\u5c31\u662f\u4e00\u9053\u6c34\u6a21\u677f\uff0c\u4f46\u662f\u5751\u5f88\u5927\n\n\u8003\u8651\u9898\u76ee\u8981\u6c42\u6211\u4eec\u505a\u4ec0\u4e48 :\n\n1. \u5efa\u7acb\u4e00\u9897\u201c\u5ba0\u7269$\\texttt{Treap}$\u201d\n1. \u63d2\u5165\u64cd\u4f5c\u2014\u2014\u6765\u4e00\u4e2a\u5ba0\u7269\u5c31\u628a\u4ed6\u5b58\u5165$\\texttt{Treap}$\u91cc\u3002\n1. \u524d\u9a71\u3001\u540e\u7ee7\u2014\u2014\u5224\u65ad\u5f53\u524d\u987e\u5ba2\u6700\u60f3\u8981\u90a3\u4e2a\u5ba0\u7269\u3002\n1. \u5220\u9664\u64cd\u4f5c\u2014\u2014\u5ba0\u7269\u88ab\u987e\u5ba2\u5e26\u8d70\u3002\n\n\u6839\u636e\u4e0a\u8fb9\u7684\u8981\u6c42\u6211\u4eec\u8f7b\u677e\uff08~~\u60f3\u6b7b~~\uff09\u5730\u5199\u51fa\u4e86\u4e00\u4e2a~~100\u591a\u884c\u7684~~\u4ee3\u7801\uff01\n\n![](https://s2.ax1x.com/2019/08/11/ejkZ5D.png)\n\n\u5f53\u4f60\u628a\u8fd9\u6bb5\u4ee3\u7801\u63d0\u4ea4\u65f6\u4f60\u4f1a\u53d1\u73b0\u4f60\u53ea\u6709$\\color{#ff0000}\\texttt{20}$\u5206\n\nQ\uff1a$\\Large{WHY???}$\n\n\u56e0\u4e3a\u987e\u5ba2\u4f1a\u8d56\u7740\u76f4\u5230\u6709\u5ba0\u7269\u6216\u6570\u636e\u7ed3\u675f\u3002\u3002\u3002\n\n\u987e\u5ba2\uff1a~~\u6ca1\u6709\u5ba0\u7269\u6211\u5c31\u4e0d\u8d70\u5566\uff01\uff01\uff01~~\n\n---\n\n\u90a3\u6211\u4eec\u5e94\u8be5\u548b\u529e\u5462\uff1f\uff1f\uff1f\n\n\u5728\u5efa\u7acb\u4e00\u4e2a\u201c$\\texttt{\u987e\u5ba2Treap}$\u201d\uff0c\u548c$\\texttt{\u5ba0\u7269Treap}$\u662f\u540c\u4e00\u79cd\u64cd\u4f5c\u3002\n\n\u5982\u679c\u4f60\u806a\u660e\uff0c\u4f60\u53ea\u7528\u5927\u7ea6170\u884c\u5c31\u53ef\u4ee5\u5199\u5b8c\uff0c\n\n\u4f46\u5982\u679c\u4f60\u548c\u6211\u4e00\u6837\uff1f~~MDZZ270\u884c\uff08\u8fd8\u6709\u590d\u5236\u7c98\u8d34\u65f6\u4e00\u5b9a\u4e0d\u80fd\u9519\u554a\uff09~~\n\n[\u81ea\u5df1\u770b\u5427\uff0c\u6211\u6015\u4ee3\u7801\u957f\u5ea6\u5927\uff0c\u6d1b\u8c37\u90fd\u70b8\u4e86\u3002\u3002\u3002](https://www.luogu.org/paste/vfvcan9c)",
        "postTime": 1565488631,
        "uid": 80695,
        "name": "Jayun",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "## \u7b97\u6cd5\uff1a \u5e73\u8861\u6811\n\n------------\n\n\u4e0d\u96be\u53d1\u73b0\u9898\u76ee\u662f\u627e\u524d\u9a71\u548c\u540e\u7ee7\n\n\u5e73\u8861\u6811\u80fd\u5728\u5f88\u4f18\u79c0\u7684\u590d\u6742\u5ea6\u4e0b( O(logn) )\u627e\u5230\u524d\u9a71\u548c\u540e\u7ee7\n\n\u90a3\u76f4\u63a5\u7167\u9898\u610f\u5efa\u4e00\u68f5\u5ba0\u7269\u6811\u548c\u4e00\u68f5\u987e\u5ba2\u6811\n\n\u6765\u5ba0\u7269\u5c31\u5728\u987e\u5ba2\u6811\u627e\uff0c\u6765\u987e\u5ba2\u5c31\u5728\u5ba0\u7269\u6811\u627e\n\n\u4f46\u5176\u5b9e\u5ba0\u7269\u6811\u548c\u987e\u5ba2\u6811\u6bcf\u6b21\u53ea\u4f1a\u6709\u4e00\u68f5\u6811\u4e2d\u5b58\u5728\u8282\u70b9\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e00\u68f5\u6811\u5373\u53ef\uff0c\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u662f\u5ba0\u7269\u591a\u8fd8\u662f\u987e\u5ba2\u591a\n\n\u7ec6\u8282\u5c31\u662f\u524d\u9a71\u540e\u7ee7\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u662f\u9700\u8981\u5904\u7406\u7684\u8fb9\u754c\u6761\u4ef6\n\n\u6211\u7528\u7684\u662fFHQ-Treap \u7801\u91cf\u8f83\u5176\u4ed6\u5e73\u8861\u6811\u6765\u8bf4\u5c0f\u5f88\u591a\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define reg register\n#define ll long long\nconst int N = 80000 + 5;\nconst ll inf = 2ll*0x7fffffff;\n\nstruct node {\n    ll val;\n    int l, r, dat, size;\n}t[N];\nint tot, root, n;\n\ninline int crepoint(ll val) {\n    t[++tot]=(node){val, 0, 0, rand(), 1};\n    return tot;\n}\n\ninline void update(int p) {\n    t[p].size=t[t[p].l].size+t[t[p].r].size+1;\n}\n\ninline void split(int p, int &a, int &b, ll val) {\n    if (!p) { a=b=0; return; }\n    if (t[p].val<=val) a=p, split(t[p].r, t[a].r, b, val);\n    else b=p, split(t[p].l, a, t[b].l, val);\n    update(p); \n}\n\ninline void merge(int &p, int a, int b) {\n    if (!a || !b) { p=a+b; return; }\n    if (t[a].dat<t[b].dat) p=a, merge(t[p].r, t[a].r, b);\n    else p=b, merge(t[p].l, a, t[b].l);\n    update(p);\n}\n\ninline ll atrank(int p, int rank) {\n    while (t[t[p].l].size+1!=rank)\n          if (t[t[p].l].size>=rank) p=t[p].l;\n          else rank-=(t[t[p].l].size+1), p=t[p].r;\n    return t[p].val;\n}\n\ninline void insert(ll val) {\n    int x=0, y=0, z=crepoint(val);\n    split(root, x, y, val); merge(x, x, z); merge(root, x, y);\n}\n\ninline void del(ll val) {\n    int x=0, y=0, z=0;\n    split(root, x, y, val); split(x, x, z, val-1);\n    merge(z, t[z].l, t[z].r); merge(x, x, z); merge(root, x, y);\n}\n\ninline int rank(ll val) {\n    int x=0, y=0, res;\n    split(root, x, y, val-1); res=t[x].size+1; merge(root, x, y);\n    return res;\n}\n\ninline ll getpre(ll val) {\n    int x=0, y=0; ll res;\n    split(root, x, y, val); if (!x) return -inf; res=atrank(x, t[x].size); merge(root, x, y);\n    return res;\n}\n\ninline ll getnxt(ll val) {\n    int x=0, y=0; ll res;\n    split(root, x, y, val-1); if (!y) return inf; res=atrank(y, 1); merge(root, x, y);\n    return res;\n}\n\nint flag=0; ll ans;\n\nint main() {\n    scanf(\"%d\", &n);\n    for (reg int i=1; i<=n; ++i) {\n        int a; ll b; scanf(\"%d%lld\", &a, &b);\n        if (flag==0) insert(b);\n        else if (flag<0) {\n           if (!a) insert(b);\n           else {\n               ll pick1=getpre(b), pick2=getnxt(b);\n               if (pick2-b < b-pick1) del(pick2), (ans+=pick2-b)%=1000000;\n               else del(pick1), (ans+=b-pick1)%=1000000;\n           }\n       }\n       else if (flag>0) {\n           if (a) insert(b);\n           else {\n               ll pick1=getpre(b), pick2=getnxt(b);\n               if (pick2-b < b-pick1) del(pick2), (ans+=pick2-b)%=1000000;\n               else del(pick1), (ans+=b-pick1)%=1000000;\n           }\n       }\n       flag+=1*(a?1:-1);\n    }\n    printf(\"%lld\\n\", ans);\n    return 0; \n}\n\n```\n\n\n",
        "postTime": 1554727984,
        "uid": 26023,
        "name": "_Atyou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": ">\u5927\u5bb6\u597d\uff0c\u8fd9\u4e2a\u9898\u6211\u8c03\u4e86\u5f88\u4e45\u8fc7\u4e86\uff0c\u6240\u4ee5\u60f3\u5199\u9898\u89e3\n\n>\u6211\u7528\u7684\u5e73\u8861\u6811\u662fAVL\u6811\uff0c\u5e73\u8861\u6811\u754c\u7684\u8001\u7237\u7237\n\n>\u8fd9\u4e2a\u6811\u5e76\u4e0d\u4f1a\u5f88\u6162\uff0c\u4e3b\u8981\u662f\u6211\u521d\u5b66\uff0c\u5e38\u6570\u5de8\u5927\n\n>\u800c\u4e14\u9898\u76ee\u7684 $ n = 80000$\uff0c\u53ef\u4ee5\u63a5\u53d7\n\n**$solution$**:\n\n\u5f00\u4e24\u9897\u5e73\u8861\u6811\uff0c\u7ef4\u62a4\u5ba0\u7269\u548c\u4eba\uff0c\u8fc7\u591a\u5c31\u63d2\u5165\u81ea\u5df1\u7684\u5e73\u8861\u6811\uff0c\u8fc7\u5c11\u5c31\u5728\u5bf9\u7acb\u5e73\u8861\u6811\u4e2d\u5220\u9664\u4e0e $x$ \u76f8\u5dee\u6700\u5c0f\u7684\u3002\n\n\u4e5f\u5c31\u662f\u786e\u5b9a\u524d\u9a71\u540e\u7ee7\n\n\u4ee3\u7801\u5f88\u957f\uff0c\u4f46\u662f\u64cd\u4f5c\u662f\u76f8\u540c\u7684\uff0c\u4e00\u534a\u90fd\u662f\u5728\u590d\u5236\u7c98\u8d34\n\n\u5e0c\u671b\u6ce8\u610f\u4f20\u53c2\u5f15\u7528\uff0c\u5c11\u5199\u4e00\u4e2a\u8c03\u4e86\u5f88\u957f\u65f6\u95f4\n\n**$code:$**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int N = 80000+50;\nconst int mod = 1000000;\nint ans;\ninline void read(int &k) {\n\tk=0;char ch=getchar();\n\twhile(ch>'9'||ch<'0') ch=getchar();\n\twhile(ch<='9'&&ch>='0') k=k*10+ch-'0',ch=getchar();\n}\nnamespace pet{\n\tint root,cnt;\n\tstruct node{\n\t\tint l,r,val,height,size;\n\t}avl[N];\n\tinline void newnode(int &now,int val) {\n\t\tavl[now=++cnt].val=val,avl[now].size=1;\n\t}\n\tint factor(int now) {\n\t\treturn avl[avl[now].l].height-avl[avl[now].r].height;\n\t}\n\tvoid update(int now) {\n\t\tavl[now].size=avl[avl[now].l].size+avl[avl[now].r].size+1;\n\t\tavl[now].height=max(avl[avl[now].l].height,avl[avl[now].r].height)+1;\n\t}\n\tvoid zag(int &now) {\n\t\tint r=avl[now].r;\n\t\tavl[now].r=avl[r].l;\n\t\tavl[r].l=now;\n\t\tnow=r;\n\t\tupdate(avl[now].l),update(now);\n\t}\n\tvoid zig(int &now) {\n\t\tint l=avl[now].l;\n\t\tavl[now].l=avl[l].r;\n\t\tavl[l].r=now;\n\t\tnow=l;\n\t\tupdate(avl[now].r),update(now);\n\t}\n\tvoid check(int &now) {\n\t\tint bf=factor(now);\n\t\tif(bf>1) {\n\t\t\tint lf=factor(now);\n\t\t\tif(lf>0) zig(now);\n\t\t\telse zag(avl[now].l),zig(now);\n\t\t}else if(bf<-1) {\n\t\t\tint rf=factor(now);\n\t\t\tif(rf<0) zag(now);\n\t\t\telse zig(avl[now].r),zag(now);\n\t\t}else if(now) update(now);\n\t}\n\tvoid ins(int &now,int val) {\n\t\tif(!now) newnode(now,val);\n\t\telse if(avl[now].val>val) ins(avl[now].l,val);\n\t\telse ins(avl[now].r,val);\n\t\tcheck(now);\n\t}\n\tint find(int &now,int fa) {\n\t\tint tmp;\n\t\tif(!avl[now].l) tmp=now,avl[fa].l=avl[now].r;\n\t\telse tmp=find(avl[now].l,now),check(now);\n\t\treturn tmp;\n\t}\n\tvoid del(int &now,int val) {\n\t\tif(avl[now].val==val) {\n\t\t\tint l=avl[now].l,r=avl[now].r;\n\t\t\tif(!l||!r) now=l+r;\n\t\t\telse {\n\t\t\t\tnow=find(r,r);\n\t\t\t\tif(now!=r) avl[now].r=r;\n\t\t\t\tavl[now].l=l;\n\t\t\t}\n\t\t}else if(avl[now].val>val) del(avl[now].l,val);\n\t\telse del(avl[now].r,val);\n\t\tcheck(now);\n\t}\n\tint getrank(int val) {\n\t\tint now=root,rank=1;\n\t\twhile(now) {\n\t\t\tif(val<=avl[now].val) now=avl[now].l;\n\t\t\telse rank+=avl[avl[now].l].size+1,now=avl[now].r;\n\t\t}\n\t\treturn rank;\n\t}\n\tint getnum(int rank) {\n\t\tint now=root;\n\t\twhile(now) {\n\t\t\tif(rank==avl[avl[now].l].size+1) break;\n\t\t\telse if(rank<=avl[avl[now].l].size) now=avl[now].l;\n\t\t\telse rank-=avl[avl[now].l].size+1,now=avl[now].r;\n\t\t}\n\t\treturn avl[now].val;\n\t}\n\tint search(int now,int val) {\n\t\tif(!now) return false;\n\t\tif(val==avl[now].val) return true;\n\t\telse if(val<avl[now].val) return search(avl[now].l,val);\n\t\telse return search(avl[now].r,val);\n\t\treturn false;\n\t}\n}\nnamespace human{\n\tint root,cnt;\n\tstruct node{\n\t\tint l,r,val,height,size;\n\t}avl[N];\n\tinline void newnode(int &now,int val) {\n\t\tavl[now=++cnt].val=val,avl[now].size=1;\n\t}\n\tint factor(int now) {\n\t\treturn avl[avl[now].l].height-avl[avl[now].r].height;\n\t}\n\tvoid update(int now) {\n\t\tavl[now].size=avl[avl[now].l].size+avl[avl[now].r].size+1;\n\t\tavl[now].height=max(avl[avl[now].l].height,avl[avl[now].r].height)+1;\n\t}\n\tvoid zag(int &now) {\n\t\tint r=avl[now].r;\n\t\tavl[now].r=avl[r].l;\n\t\tavl[r].l=now;\n\t\tnow=r;\n\t\tupdate(avl[now].l),update(now);\n\t}\n\tvoid zig(int &now) {\n\t\tint l=avl[now].l;\n\t\tavl[now].l=avl[l].r;\n\t\tavl[l].r=now;\n\t\tnow=l;\n\t\tupdate(avl[now].r),update(now);\n\t}\n\tvoid check(int &now) {\n\t\tint bf=factor(now);\n\t\tif(bf>1) {\n\t\t\tint lf=factor(now);\n\t\t\tif(lf>0) zig(now);\n\t\t\telse zag(avl[now].l),zig(now);\n\t\t}else if(bf<-1) {\n\t\t\tint rf=factor(now);\n\t\t\tif(rf<0) zag(now);\n\t\t\telse zig(avl[now].r),zag(now);\n\t\t}else if(now) update(now);\n\t}\n\tvoid ins(int &now,int val) {\n\t\tif(!now) newnode(now,val);\n\t\telse if(avl[now].val>val) ins(avl[now].l,val);\n\t\telse ins(avl[now].r,val);\n\t\tcheck(now);\n\t}\n\tint find(int &now,int fa) {\n\t\tint tmp;\n\t\tif(!avl[now].l) tmp=now,avl[fa].l=avl[now].r;\n\t\telse tmp=find(avl[now].l,now),check(now);\n\t\treturn tmp;\n\t}\n\tvoid del(int &now,int val) {\n\t\tif(avl[now].val==val) {\n\t\t\tint l=avl[now].l,r=avl[now].r;\n\t\t\tif(!l||!r) now=l+r;\n\t\t\telse {\n\t\t\t\tnow=find(r,r);\n\t\t\t\tif(now!=r) avl[now].r=r;\n\t\t\t\tavl[now].l=l;\n\t\t\t}\n\t\t}else if(avl[now].val>val) del(avl[now].l,val);\n\t\telse del(avl[now].r,val);\n\t\tcheck(now);\n\t}\n\tint getrank(int val) {\n\t\tint now=root,rank=1;\n\t\twhile(now) {\n\t\t\tif(val<=avl[now].val) now=avl[now].l;\n\t\t\telse rank+=avl[avl[now].l].size+1,now=avl[now].r;\n\t\t}\n\t\treturn rank;\n\t}\n\tint getnum(int rank) {\n\t\tint now=root;\n\t\twhile(now) {\n\t\t\tif(rank==avl[avl[now].l].size+1) break;\n\t\t\telse if(rank<=avl[avl[now].l].size) now=avl[now].l;\n\t\t\telse rank-=avl[avl[now].l].size+1,now=avl[now].r;\n\t\t}\n\t\treturn avl[now].val;\n\t}\n\tint search(int now,int val) {\n\t\tif(!now) return false;\n\t\tif(val==avl[now].val) return true;\n\t\telse if(val<avl[now].val) return search(avl[now].l,val);\n\t\telse return search(avl[now].r,val);\n\t\treturn false;\n\t}\n}\nsigned main() {\n\tint n; cin>> n;\n\twhile(n--) {\n\t\tint opt, x;\n//\t\tscanf(\"%lld%lld\",&opt, &x);\n\t\tread(opt),read(x);\n\t\tif(!opt) {\n\t\t\tif(human::avl[human::root].size) {\n\t\t\t\tif(human::search(human::root,x)) human::del(human::root,x);\n\t\t\t\telse {\n\t\t\t\t\tint pre=human::getnum(human::getrank(x)-1);\n\t\t\t\t\tint nxt=human::getnum(human::getrank(x+1));\n\t\t\t\t\tif(pre==0) { ans+=nxt-x,ans%=mod,human::del(human::root,nxt);continue;}\n\t\t\t\t\tif(nxt==0) { ans+=x-pre,ans%=mod,human::del(human::root,pre);continue;}\t\t\t\t\t\n\t\t\t\t\tif(x-pre<=nxt-x) ans+=x-pre,ans%=mod,human::del(human::root,pre);\n\t\t\t\t\telse ans+=nxt-x,ans%=mod,human::del(human::root,nxt);\n\t\t\t\t}\n\t\t\t}else pet::ins(pet::root,x);\n\t\t}else {\n\t\t\tif(pet::avl[pet::root].size) {\n\t\t\t\tif(pet::search(pet::root,x)) pet::del(pet::root,x);\n\t\t\t\telse {\n\t\t\t\t\tint pre=pet::getnum(pet::getrank(x)-1);\n\t\t\t\t\tint nxt=pet::getnum(pet::getrank(x+1));\n\t\t\t\t\tif(pre==0) { ans+=nxt-x,ans%=mod,pet::del(pet::root,nxt);continue;}\n\t\t\t\t\tif(nxt==0) { ans+=x-pre,ans%=mod,pet::del(pet::root,pre);continue;}\n\t\t\t\t\tif(x-pre<=nxt-x) ans+=x-pre,ans%=mod,pet::del(pet::root,pre);\n\t\t\t\t\telse ans+=nxt-x,ans%=mod,pet::del(pet::root,nxt);\n\t\t\t\t}\n\t\t\t}else human::ins(human::root,x);\t\t\t\n\t\t}\n\t}\n\tcout<<ans;\t\n\treturn 0;\n}\n```",
        "postTime": 1576999167,
        "uid": 149769,
        "name": "Zkxxxv_h",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u7528set\u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\u7684\u5b9e\u73b0\u8fd9\u9053\u9898\u3002\n\n\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2aset\uff0c\u4e00\u4e2a\u4e3b\u4ebas2\u4e00\u4e2a\u5ba0\u7269s1\uff0c\u4e00\u5f00\u59cb\u5148\u5206\u522b\u63d2\u5165\u4e00\u4e2a\u6781\u5927\u503c\u4e00\u4e2a\u6781\u5c0f\u503c\uff0c\u5982\u679c\u8f93\u5165\u7684\u662f\u5ba0\u7269\uff0c\u4ef7\u503c\u4e3ab\uff0c\u5c31\u5728s2\u4e2d\u627e\u5230\u4e24\u4e2a\u6570t1,t2\uff0c\u5206\u522b\u662f\u6bd4\u5f53\u524db\u5c0f\u7684\u6570\u7684\u6700\u5927\u503c\uff0c\u6bd4\u5f53\u524db\u5927\u7684\u6700\u5c0f\u503c\u3002\u4ef7\u503c\u5dee\u5c31\u662f\n```cpp\nmax(b-t1,t2-b);\n```\n\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u6765\u52a0\u5165\u66f4\u5927\u4e00\u70b9\u7684\uff0c\u5982\u679c\u5df2\u7ecf\u6ca1\u6709\u53ef\u4ee5\u627e\u7684\u4e86\u5c31\u628a\u5f53\u524d\u8981\u627e\u7684\u5b58\u7740\u4ee5\u540e\u7528\u3002\n\n\u5bf9\u4e8e\u600e\u4e48\u627e\u4e24\u4e2a\u503c\uff0c\u6211\u4eec\u7528lower_bound\u6765\u89e3\u51b3\uff0cit\u662f\u7528Lower bound\u627e\u5927\u4e8e\u7b49\u4e8eb\u7684\u7b2c\u4e00\u4e2a\u6307\u9488\uff0c\u90a3\u4e48it\u7684\u524d\u4e00\u4e2a\n\u6570\u5c31\u662f\u5c0f\u4e8eb\u7684\u6700\u5927\u503c\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=80005;\nconst int INF=1e9+10;\nconst int mod=1000005;\nint n,ans;\nset<int> s1,s2;\nset<int>:: iterator it;\nint main()\n{\n\tscanf(\"%d\",&n);\n\ts1.insert(-INF); s1.insert(INF);\n\ts2.insert(-INF); s2.insert(INF);\n\tfor(int i=1,a,b;i<=n;i++)\n\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tif(a==0)\n\t\t{\n\t\t\tif(s2.size()==2)\n\t\t\t{\n\t\t\t\ts1.insert(b);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tit=s2.lower_bound(b);\n\t\t\tint t2=*it,t1=*(--it),x1,x2;\n\t\t\tx1=b-t1; x2=t2-b;\n\t\t\tif(x1<=x2)\n\t\t\t{\n\t\t\t\tans=(ans+x1)%mod;\n\t\t\t\ts2.erase(t1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tans=(ans+x2)%mod;\n\t\t\t\ts2.erase(t2);\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(s1.size()==2)\n\t\t\t{\n\t\t\t\ts2.insert(b);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tit=s1.lower_bound(b);\n\t\t\tint t2=*it,t1=*(--it),x1,x2;\n\t\t\tx1=b-t1; x2=t2-b;\n\t\t\tif(x1<=x2)\n\t\t\t{\n\t\t\t\tans=(ans+x1)%mod;\n\t\t\t\ts1.erase(t1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tans=(ans+x2)%mod;\n\t\t\t\ts1.erase(t2);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n\n\u7136\u800c\u8fd9\u6837\u4f1a\u5168WA\u3002\u3002\u3002\n\n\u56e0\u4e3a\u5f53\u6211\u4eec\u627e\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u65f6\uff0c\u5f53\u6709\u627e\u4e0d\u5230\u7684\u65f6\uff0c\u6211\u4eec\u8d4b\u7684\u6781\u503c\u5c31\u4f1a\u5f71\u54cd\u7b54\u6848\uff0c\u7136\u540e\u6211\u5c31\u6253\u4e86\u4e2a\u770b\u4e0a\u53bb\u4f3c\u4e4e\u633a\u5197\u6742\u7684\u7279\u5224\n```cpp\n\tif(t1==-INF)\n\t{\n\t\tans=(ans+x2)%mod;\n\t\ts2.erase(t2);\n\t}\n\telse if(t2==INF)\n\t{\n\t\tans=(ans+x1)%mod;\n\t\ts2.erase(t1);\n\t}\n\telse if(x1<=x2)\n\t{\n\t\tans=(ans+x1)%mod;\n\t\ts2.erase(t1);\n\t}\n\telse if(x1>x2)\n\t{\n\t\tans=(ans+x2)%mod;\n\t\ts2.erase(t2);\n\t}\t\n```\n\u8fd9\u6837\u5c31OK\u5566\n\n\u6700\u540e\u4e0a\u4e2a\u5b8c\u6574\u7684\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=80005;\nconst int INF=1e9+10;\nconst int mod=1000000;\nint n,ans;\nset<int> s1;\nset<int> s2;\nset<int>:: iterator it;\nint main()\n{\n\tscanf(\"%d\",&n);\n\ts1.insert(-INF); s1.insert(INF);\n\ts2.insert(-INF); s2.insert(INF);\n\tfor(int i=1,a,b;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tif(a==0)\n\t\t{\n\t\t\tif(s2.size()==2)\n\t\t\t{\n\t\t\t\ts1.insert(b);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tit=s2.lower_bound(b);\n\t\t\tint t2=*it,t1=*(--it),x1,x2;\n\t\t\tif(t1==-INF&&t2==INF) continue;\n\t\t\tx1=b-t1; x2=t2-b;\n\t\t\tif(t1==-INF)\n\t\t\t{\n\t\t\t\tans=(ans+x2)%mod;\n\t\t\t\ts2.erase(t2);\n\t\t\t}\n\t\t\telse if(t2==INF)\n\t\t\t{\n\t\t\t\tans=(ans+x1)%mod;\n\t\t\t\ts2.erase(t1);\n\t\t\t}\n\t\t\telse if(x1<=x2)\n\t\t\t{\n\t\t\t\tans=(ans+x1)%mod;\n\t\t\t\ts2.erase(t1);\n\t\t\t}\n\t\t\telse if(x1>x2)\n\t\t\t{\n\t\t\t\tans=(ans+x2)%mod;\n\t\t\t\ts2.erase(t2);\n\t\t\t}\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(s1.size()==2)\n\t\t\t{\n\t\t\t\ts2.insert(b);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tit=s1.lower_bound(b);\n\t\t\tint t2=*it,t1=*(--it),x1,x2;\n\t\t\tif(t1==-INF&&t2==INF) continue;\n\t\t\tx1=b-t1; x2=t2-b;\n\t\t\tif(t1==-INF)\n\t\t\t{\n\t\t\t\tans=(ans+x2)%mod;\n\t\t\t\ts1.erase(t2);\n\t\t\t}\n\t\t\telse if(t2==INF)\n\t\t\t{\n\t\t\t\tans=(ans+x1)%mod;\n\t\t\t\ts1.erase(t1);\n\t\t\t}\n\t\t\telse if(x1<=x2)\n\t\t\t{\n\t\t\t\tans=(ans+x1)%mod;\n\t\t\t\ts1.erase(t1);\n\t\t\t}\n\t\t\telse if(x1>x2)\n\t\t\t{\n\t\t\t\tans=(ans+x2)%mod;\n\t\t\t\ts1.erase(t2);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans%mod);\n\treturn 0;\n}\n```\n",
        "postTime": 1575521834,
        "uid": 117885,
        "name": "chen_vvv",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "[[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a](https://www.luogu.org/problemnew/show/P2286)\u8fd9\u9898\u5c31\u662f\u5e73\u8861\u6811\u7684\u677f\u5b50  \n\u4f46\u662f\u4ecd\u6709\u4e00\u4e9b\u5c0f\u5751  \n\u53d1\u51fa\u6765\u6765\u8ba9\u5927\u5bb6\u6ce8\u610f\u4e00\u4e0b  \n\n### \u9996\u5148\u662f\u9898\u610f(\u53ef\u80fd\u6211\u8bed\u6587\u4e0d\u597d,\u7406\u89e3\u9519\u4e86):\n  \n\u6211\u672c\u4ee5\u4e3a`\u5ba0\u7269\u548c\u4eba\u603b\u662f\u5728\u4e00\u4e2a\u65f6\u95f4\u6bb5`  \n\u6307\u4eba\u4e0e\u5ba0\u7269\u4e4b\u95f4\u8981\u627e\u5230\u6700\u4f18\u7684\u65b9\u6848\u4ee5\u51cf\u5c11\u6700\u7ec8\u7b54\u6848(\u90a3\u5c31\u5f88\u6076\u5fc3\u4e86)  \n\u4f46\u4e8b\u5b9e\u4e0a\u5c31\u662f\u5355\u7eaf\u7684\u6a21\u62df  \n\u5bf9\u4eba\u6765\u8bf4,\u5982\u679c\u8fd8\u5269\u5ba0\u7269\u5c31\u6309\u7167\u9898\u610f\u627e\u51fa\u6700\u4f73\u7684\u5ba0\u7269\u5e76\u5220\u9664,\u5426\u5219\u5c31\u5c06\u4eba\u585e\u5230\u53e6\u4e00\u9897\u6811\u4e2d\n\u5bf9\u5ba0\u7269\u6765\u8bf4\u4e5f\u662f\u5982\u6b64\n## \u4e5f\u5c31\u662f\u6211\u4eec\u8981\u6709\u4e24\u9897\u6811:\n\n```cpp\n    \u5f53\u6709\u4eba\u6765\u9886\u5ba0\u7269\u7684\u65f6\u5019\n        \u5982\u679c\u5ba0\u7269\u6ca1\u4e86\uff0c\u5c31\u628a\u4eba\u5b58\u8d77\u6765\uff1b \n        \u5426\u5219\u5c31\u53bb\u627e\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u5ba0\u7269\u8ba9\u4ed6\u9886\u56de\u53bb\u3002\n    \u5f53\u6709\u5ba0\u7269\u52a0\u5165\u7684\u65f6\u5019\uff0c\u540c\u7406\n```\n\u770b\u5230\u6709$Dalao$\u7528\u6280\u5de7\u7684,\u4e5f\u6709\u8bf4\u5199\u4e24\u9897\u6811\u7684,\u4f46\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5229\u7528$C++$\u5199\u4e2a\u7c7b\u5c01\u88c5\u8d77\u6765\n\n$Class$\u5982\u4e0b(\u8fd9\u53ea\u662f\u8981\u4e86\u89e3\u7c7b\u600e\u4e48\u5199\u5c31\u597d\u4e86,$Treap$\u8fd8\u662f$Splay$\u770b\u4e2a\u4eba\u559c\u597d,\u4e0d\u4f1a\u5e73\u8861\u6811\u6211\u4e5f\u5c31\u5f88\u65e0\u5948\u4e86,~~\u4e0d\u8981\u518d\u5410\u69fd\u6307\u9488\u548c\u7801\u98ce\u4e86~~)  \n\u6ce8\u91ca\u5e94\u8be5\u5f88\u6e05\u6670\u4e86\n```cpp\n#include<cstdlib>\n\nclass Treap {\n  private:\n  //private\u4fee\u9970\u7684\u8bdd,\u53ea\u80fd\u518d\u7ed3\u6784\u4f53\u5185\u90e8\u8bbf\u95ee\n  static const int maxn = 80000;\n  static const int INF = 1<<30;   //\u9759\u6001\u6210\u5458\u53d8\u91cf,\u4e00\u4e2a\u5c5e\u4e8e\u7ed3\u6784\u4f53\u7684\u53d8\u91cf\n  int size;\n  struct Node {\n    int v,r,s;\n    Node *ch[2];\n    inline int cmp(int x) {  //\u901a\u8fc7\u6bd4\u8f83\u51fd\u6570\u53ef\u4ee5\u5f88\u597d\u7684\u6539\u53d8\u6811\u7684\u4f18\u5148\u7ea7\n      if(x==v) return -1;\n      return x>v;\n    }\n    inline int ch_size(int d) {\n      return (ch[d]==NULL)?0:ch[d]->s;\n    }\n    inline void maintain() {\n      s=1+ch_size(0)+ch_size(1);\n    }\n  }node[maxn];\n  Node *root;\n  //\u6811\u6839,\u521d\u59cb\u8bdd\u65f6\u4e3a\u7a7a\n  inline void rotate(Node* &o,int d) {\n    Node *k=o->ch[d^1]; o->ch[d^1]=k->ch[d]; k->ch[d]=o;\n    o->maintain(); k->maintain(); o=k;\n   }\n\n  void insert_node(Node* &o,int x) {\n    if(o==NULL) {\n      o=&node[size++];\n      o->v=x; o->r=rand();\n      o->s=1;\n      o->ch[0]=o->ch[1]=NULL;\n    }\n    else {\n      int d=o->cmp(x);\n      insert_node(o->ch[d],x); o->maintain();\n      if(o->ch[d]->r > o->r) rotate(o,d^1);\n    }\n  }\n  \n  void remove_node(Node* &o,int x) {\n    if(o==NULL) return ;\n    int d=o->cmp(x);\n    if(d==-1) {\n      if(o->ch[0]==NULL) o=o->ch[1];\n      else if(o->ch[1]==NULL) o=o->ch[0];\n      else {\n    int d2=(o->ch[0]->r > o->ch[1]->r);\n    rotate(o,d2); remove_node(o->ch[d2],x);\n      }\n    }\n    else remove_node(o->ch[d],x);\n    if(o!=NULL) o->maintain();\n  }\n\n  int get_last(Node* o,int x) {\n    int last=-INF;     //\u6ca1\u6709\u524d\u9a71\u65f6\u8fd4\u56de\u4e00\u4e2a\u6781\u5c0f\u503c\n    while(o!=NULL) {\n      if(o->v < x) last=o->v,o=o->ch[1];  //\u9898\u9762\u6ca1\u8bf4\u4eba\u548c\u5ba0\u7269\u7684\u7279\u70b9\u503c\u4e0d\u4f1a\u76f8\u540c,\u5982\u679c\u5141\u8bb8\u76f8\u540c\u7684\u8bdd\u5e94\u6539\u6210 \"<=\",\u4f46\u7384\u5b66AC\n      else o=o->ch[0];\n    }\n    return last;\n  }\n\n  int get_next(Node* o,int x) {\n    int next=INF;\n    while(o!=NULL) {\n      if(o->v > x) next=o->v,o=o->ch[0];\n      else o=o->ch[1];\n    }\n    return next;\n  }\n\n  public:  //\u5141\u8bb8\u5728\u7ed3\u6784\u4f53\u5916\u8bbf\u95ee\n  Treap() { root=NULL; size=0; }\n  inline bool empty() { return root==NULL; }\n  //\u5305\u76ae\u5c01\u88c5\n  inline void insert(int x) {\n    insert_node(root,x);\n  }\n  inline void remove(int x) {\n    remove_node(root,x);\n  }\n  inline int last(int x) {\n    return get_last(root,x);\n  }\n  inline int next(int x) {\n    return get_next(root,x);\n  }\n}treap[2];\n```\n---\n## \u7136\u540e\u662f\u4e3b\u7a0b\u5e8f\n\n\u4e86\u89e3\u9898\u610f\u540e\u6211\u4eec\u53d1\u73b0\u4eba\u548c\u5ba0\u7269\u6ca1\u6709\u533a\u522b ~~(\u51fa\u9898\u4eba\u7684\u60f3\u6cd5?)~~  \n\u5c31\u53ef\u4ee5\u5229\u7528\u53d6\u53cd\u8fd0\u7b97\u4e00\u81f4\u5bf9\u5f85\u4e86\n```cpp\n#include<cstdio>\n#include<ctime>\nconst int mod = 1000000;\nlong long ans=0;\n\ninline void read(int &a) {\n    int c,f=1;  a=0;\n    while((c=getchar()))  {\n        if(c=='-') f=-1;\n        if(c>='0'&&c<='9') break;\n    }\n    do {\n        a=a*10+c-'0';\n        c=getchar();\n    }while(c>='0'&&c<='9');\n    a*=f;\n}\n\nint main() {\n  int n,p,x;\n  read(n);\n  while(n--) {\n    read(p); read(x);\n    if(treap[p^1].empty()) treap[p].insert(x);\u3001\n    //\u53e6\u4e00\u9897\u6811\u4e3a\u7a7a,\u5b58\u8d77\u6765\n    else {  //\u627e\u5230\u7b26\u5408\u9898\u610f\u7684\u4eba(\u6216\u5ba0\u7269)\u5e76\u5220\u53bb\n      int a=treap[p^1].last(x),b=treap[p^1].next(x);\n      if(x-a<=b-x) {\n        ans=(ans+x-a)%mod;\n        treap[p^1].remove(a);\n      }\n      else {\n        ans=(ans+b-x)%mod;\n        treap[p^1].remove(b);\n      }\n    }\n  }\n  printf(\"%lld\\n\",ans);\n  return 0;\n}\n```\n\n\u5199\u8d77\u6765\u771f\u7684\u5f88\u65b9\u4fbf,\u5927\u5bb6\u4e3a\u4ec0\u4e48\u4e0d\u559c\u6b22\u6307\u9488\u5462 $QAQ$",
        "postTime": 1553923234,
        "uid": 125925,
        "name": "zl_just",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "### \u770b\u5230\u90a3\u4e48\u591a\u5927\u4f6c\u7528\u5404\u79cd\u6570\u636e\u7ed3\u6784\n##### \u7136\u800c\u849f\u84bb\u7684\u6211\u53ea\u4f1a\u7528STL set\n\u5177\u4f53\u601d\u8def~~\u5f88\u7b80\u5355~~\n\n\u5bf9\u5ba0\u7269\u548c\u4eba\u5404\u5f00\u4e00\u4e2a\u96c6\u5408\n\n\u9047\u5230\u4eba\u5c31\u7528lower_bound\u67e5\u51fa\u5ba0\u7269\u4e2d\u5927\u4e8e\u7b49\u4e8e\u4ed6\u7684\u9884\u671f\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n\n\u8fd9\u4e2a\u5730\u5740\u518d-1\u5c31\u53ef\u4ee5\u5f97\u5230\u5c0f\u4e8e\u4ed6\u7684\u9884\u671f\u503c\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n\n\u8fd9\u4e24\u4e2a\u503c\u53d6\u548c\u9884\u671f\u503c\u6700\u63a5\u8fd1\u7684\u90a3\u4e00\u4e2a\u5c31\u597d\u4e86\n\n# sum\u4e00\u5b9a\u4e00\u5b9a\u8981\u7528long long\n# \u7528int\u53ea\u670940\u5206\n\n\u5177\u4f53\u7ec6\u8282\u770b\u4ee3\u7801\uff0c\u601d\u8def\u5df2\u7ecf\u8bb2\u8fc7\u6240\u4ee5\u5e94\u8be5\u5f88\u597d\u61c2\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nset<int>a;\nset<int>b;\nint n;\nlong long sum=0;\nint main()\n{\n\tcin>>n;\n\tfor(int i=1; i<=n; i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tif(i==1)\n\t\t{\n\t\t\tif(x==0)\n\t\t\t{\n\n\t\t\t\ta.insert(y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb.insert(y);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(x==0)\n\t\t\t{\n\t\t\t\ta.insert(y);\n\t\t\t\tif(!b.empty())\n\t\t\t\t{\n\t\t\t\t\tif(y>*(--b.end()))\n\t\t\t\t\t{\n\t\t\t\t\t\tsum+=abs(y-*(--b.end()));\n\t\t\t\t\t\ta.erase(y);\n\t\t\t\t\t\tb.erase(*(--b.end()));\n\t\t\t\t\t}\n\t\t\t\t\telse if(y<*b.begin())\n\t\t\t\t\t{\n\t\t\t\t\t\tsum+=abs(y-*(b.begin()));\n\t\t\t\t\t\ta.erase(y);\n\t\t\t\t\t\tb.erase(*(b.begin()));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tint k=*(b.lower_bound(y));\n\t\t\t\t\t\tint l=*(--b.lower_bound(y));\n\t\t\t\t\t\tif(abs(y-k)>=abs(y-l))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsum+=abs(y-l);\n\t\t\t\t\t\t\ta.erase(y);\n\t\t\t\t\t\t\tb.erase(l);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsum+=abs(y-k);\n\t\t\t\t\t\t\ta.erase(y);\n\t\t\t\t\t\t\tb.erase(k);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb.insert(y);\n\t\t\t\tif(!a.empty())\n\t\t\t\t{\n\t\t\t\t\tif(y>*(--a.end()))\n\t\t\t\t\t{\n\t\t\t\t\t\tsum+=abs(y-*(--a.end()));\n\t\t\t\t\t\tb.erase(y);\n\t\t\t\t\t\ta.erase(*(--a.end()));\n\t\t\t\t\t}\n\t\t\t\t\telse if(y<*a.begin())\n\t\t\t\t\t{\n\t\t\t\t\t\tsum+=abs(y-*(a.begin()));\n\t\t\t\t\t\tb.erase(y);\n\t\t\t\t\t\ta.erase(*(a.begin()));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tint k=*(a.lower_bound(y));\n\t\t\t\t\t\tint l=*(--a.lower_bound(y));\n\t\t\t\t\t\tif(abs(y-k)>=abs(y-l))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsum+=abs(y-l);\n\t\t\t\t\t\t\tb.erase(y);\n\t\t\t\t\t\t\ta.erase(l);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsum+=abs(y-k);\n\t\t\t\t\t\t\tb.erase(y);\n\t\t\t\t\t\t\ta.erase(k);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcout<<sum%1000000<<endl;\n}\n```\n",
        "postTime": 1532388184,
        "uid": 68207,
        "name": "CreeperLordVader",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\n\n# \u9898\u89e3-[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\n\n[$\\texttt{read this in blog}$](https://blog.csdn.net/KonnyWen/article/details/104556679)\n\n### $\\texttt{Introduction}$\n\u849f\u84bb\u521d\u5b66\u5e73\u8861\u6811\uff0c\u89c1\u6b64\u9898\u65e0\u5999\u89e3\uff0c\u4e43\u8bb0\u4e4b\u3002\n\n---\n### $\\texttt{Description}$\n> [\\[HNOI2004\\]\u5ba0\u7269\u6536\u517b\u573a](https://www.luogu.com.cn/problem/P2286)\n\n> \u6709 $n$ \u4e2a\u5ba0\u7269\u6216\u4e3b\u4eba\u4f1a\u6765\uff0c\u6bcf\u4e2a\u6765\u8005\u90fd\u6709\u6027\u683c $a$\u3002\u5982\u679c\u5f53\u524d\u4e3b\u4eba\u6709\u5269\u4f59\uff0c\u5ba0\u7269 $x$ \u5c31\u4f1a\u9886\u8d70\u4e00\u4e2a\u548c\u5b83\u6027\u683c\u6700\u76f8\u8fd1\u7684\u4e3b\u4eba $y$\uff0c\u5982\u679c\u53e6\u6709\u4e3b\u4eba $z$ \u4f7f $|a_x-a_y|==|a_x-a_z|$\uff0c\u90a3\u4e48\u5c31\u9009 $a$ \u5c0f\u4e00\u70b9\u7684\u4e3b\u4eba\u3002\u540c\u7406\uff0c\u5982\u679c\u5ba0\u7269\u6709\u5269\u4f59\uff0c\u4e3b\u4eba\u4f1a\u7528\u76f8\u540c\u65b9\u6cd5\u9886\u8d70\u5ba0\u7269\u3002\u6c42\u6700\u540e\u6bcf\u5bf9\u5ba0\u7269-\u4e3b\u4eba\u7684\u6027\u683c\u5dee\u7684\u548c $\\mod 1000000$\u3002\n\n> \u6570\u636e\u8303\u56f4\uff1a$1\\le n\\le 80000,1\\le a< 2^{31}$\u3002\n\n---\n### $\\texttt{Solution}$\n\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u201c\u6027\u683c\u6700\u63a5\u8fd1\u201d\u3002\n\n\u5982\u679c\u5f00\u4e24\u4e2a\u5e73\u8861\u6811\u5206\u522b\u4ee3\u8868\u4e3b\u4eba\u548c\u5ba0\u7269\uff0c\u56e0\u4e3a\u5982\u679c\u4e3b\u4eba\u6765\u65f6\u6709\u5ba0\u7269\u6216\u8005\u5ba0\u7269\u6765\u65f6\u6709\u4e3b\u4eba\uff0c\u5c31\u4f1a\u76f4\u63a5\u9886\u8d70\uff0c\u6240\u4ee5**\u81f3\u591a\u4e00\u4e2a\u5e73\u8861\u6811\u662f\u975e\u7a7a\u7684**\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u6807\u8bb0\u662f\u54ea\u4e2a\u5e73\u8861\u6811\u975e\u7a7a\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u5e73\u8861\u6811\u4ee3\u66ff\u975e\u7a7a\u5e73\u8861\u6811\u3002\n\n\u8bbe\u6807\u8bb0\u4e3a $winner$\uff0c\u5982\u679c $winner==2$\uff0c\u8868\u793a\u4e24\u4e2a\u5e73\u8861\u6811\u90fd\u662f\u7a7a\u7684\uff08\u5373\u6ca1\u6709\u4e3b\u4eba\uff0c\u6ca1\u6709\u5ba0\u7269\uff09\uff1b\u5982\u679c $winner=0$ \u8868\u793a\u6709\u5ba0\u7269\u6ca1\u6709\u4e3b\u4eba\uff0c\u5982\u679c $winner=1$ \u8868\u793a\u6709\u4e3b\u4eba\u6ca1\u6709\u5ba0\u7269\u3002\u6bcf\u6b21\u9886\u8d70\u4e3b\u4eba\u6216\u9886\u8d70\u5ba0\u7269\u4e4b\u540e\uff0c\u5982\u679c\u5e73\u8861\u6811\u7a7a\u4e86\uff0c\u5c31\u8bbe $winner=2$\u3002\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u4e00\u4e2a\u6807\u8bb0\u548c\u4e00\u68f5\u6811\u89e3\u51b3\u95ee\u9898\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n---\n### $\\texttt{Code}$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n//&Start\n#define lng long long\nconst int inf=0x3f3f3f3f;\nconst lng Inf=1e16;\n\n//&Start\nbool open(0);\n#define Debug if(open)\n\n//&Splay\ntemplate<int N,class T>struct Splaytree{//\u538b\u884cSplay\u5e73\u8861\u6811\u819c\u62dc\n\tint sz,rt,sm[N],re[N],fa[N],ch[N][2]; T key[N];\n\tvoid clear(int x){key[x]=sm[x]=re[x]=fa[x]=ch[x][0]=ch[x][1]=0;}\n\tbool dire(int x){return ch[fa[x]][1]==x;}\n\tvoid pushup(int x){sm[x]=re[x]+sm[ch[x][0]]+sm[ch[x][1]];}\n\tvoid connect(int x,int f,bool d){fa[x]=f,ch[f][d]=x;}\n\tint newnode(T v,int f){return clear(++sz),key[sz]=v,fa[sz]=f,sm[sz]=re[sz]=1,sz;}\n\tvoid rotate(int x){\n\t\tint f=fa[x],ff=fa[f],dx=dire(x),df=dire(f);\n\t\tconnect(ch[x][dx^1],f,dx),connect(f,x,dx^1),connect(x,ff,df),pushup(f),pushup(x);\n\t}\n\tvoid splay(int x){for(int f;(f=fa[x]);rotate(x))if(fa[f]) rotate(dire(x)==dire(f)?f:x); rt=x;}\n\tvoid insert(T v){\n\t\tif(!rt) return rt=newnode(v,0),void();\n\t\tfor(int x=rt,f=0;1;){\n\t\t\tif(key[x]==v) return re[x]++,pushup(x),pushup(f),splay(x),void();\n\t\t\tif(!(f=x,x=ch[f][v>key[x]])) return ch[f][v>key[f]]=newnode(v,f),pushup(f),splay(sz),void();\n\t\t}\n\t}\n\tint find(T v){\n\t\tfor(int x=rt,res=0;1;){\n\t\t\tif(v<key[x]){x=ch[x][0];continue;} res+=sm[ch[x][0]];\n\t\t\tif(v==key[x]) return splay(x),res+1; res+=re[x],x=ch[x][1];\n\t\t}\n\t}\n\tT kth(int k){\n\t\tfor(int x=rt;1;){\n\t\t\tif(k<=sm[ch[x][0]]){x=ch[x][0];continue;} k-=sm[ch[x][0]];\n\t\t\tif(k<=re[x]) return splay(x),key[x]; k-=re[x],x=ch[x][1];\n\t\t}\n\t}\n\tint pre(){int x=ch[rt][0],rs;while((rs=ch[x][1])) x=rs;return x;}\n\tint nex(){int x=ch[rt][1],ls;while((ls=ch[x][0])) x=ls;return x;}\n\tvoid dest(T v){\n\t\tint tmp=find(v);\n\t\tif(re[rt]>1) return re[rt]--,pushup(rt),void();\n\t\tif(!ch[rt][0]&&!ch[rt][1]) return clear(rt),rt=sz=0,void();\n\t\tif(!ch[rt][0]) return tmp=rt,fa[rt=ch[rt][1]]=0,clear(tmp),void();\n\t\tif(!ch[rt][1]) return tmp=rt,fa[rt=ch[rt][0]]=0,clear(tmp),void();\n\t\ttmp=rt,splay(pre()),connect(ch[tmp][1],rt,1),clear(tmp),pushup(rt);\n\t}\n\tint size(){return sm[rt];}\n};\n\n//&Main\nconst int N=8e4+10,mod=1e6;\nint n,ans,winner=2;//\u521a\u5f00\u59cb\u65f6\u6ca1\u6709\u5ba0\u7269\uff0c\u6ca1\u6709\u4e3b\u4eba\nSplaytree<80010,lng> F;\n//\u56e0\u4e3a\u6570\u636e\u8303\u56f4\u8fbe\u5230\u4e86int\u6781\u9650\uff0c\u6240\u4ee5\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5f00\u6210long long\u7684\u5e73\u8861\u6811\nint main(){\n\tscanf(\"%d\",&n);\n\tF.insert(-Inf),F.insert(Inf);\n\t//\u9632\u6b62\u6ca1\u6709\u524d\u9a71\u6216\u6ca1\u6709\u540e\u7ee7\u65f6\u5e73\u8861\u6811\u5361bug\n\tfor(int i=1;i<=n;i++){\n\t\tint o;lng x,l,r;\n\t\tscanf(\"%d%lld\",&o,&x);\n\t\tDebug printf(\"%d\\n\",winner);\n\t\tif(o==winner||winner==2) F.insert(x),winner=o;\n\t\t//\u5982\u679c\u53ea\u6709\u540c\u7c7b\u6216\u6ca1\u4e1c\u897f\uff0c\u4e4b\u95f4\u8fdb\u5165\u5e73\u8861\u6811\n\t\telse {//\u5982\u679c\u53ea\u6709\u5f02\u7c7b\uff08\u914d\u5076\uff09\n\t\t\tF.insert(x),l=F.key[F.pre()],r=F.key[F.nex()],F.dest(x);\n\t\t\t//\u5148\u628a\u81ea\u5df1\u653e\u5230\u5e73\u8861\u6811\u4e2d\uff0c\u627e\u4e2a\u524d\u9a71\u540e\u7ee7\uff08\u6027\u683c\u6700\u76f8\u8fd1\u7684\u914d\u5076\uff09\n\t\t\tDebug printf(\"%lld %lld\\n\",l,r);\n\t\t\tif(x-l<=r-x) (ans+=x-l)%=mod,F.dest(l);//\u5982\u9898\n\t\t\telse (ans+=r-x)%=mod,F.dest(r);\n\t\t\tif(F.size()<=2) winner=2;\n\t\t\t//\u5373\u5e73\u8861\u6811\u4e3a\u7a7a\uff0csize<=2\u662f\u56e0\u4e3a\u5e73\u8861\u6811\u4e2d\u6709-inf\u548cinf\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n**\u795d\u5927\u5bb6\u5b66\u4e60\u6109\u5feb\uff01**",
        "postTime": 1582876339,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u6b64\u9898\u601d\u8def\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff0c\u8003\u8651\u5230\u540c\u4e00\u65f6\u95f4\u5446\u5728\u6536\u517b\u6240\u4e2d\u7684\uff0c\u8981\u4e48\u5168\u662f\u5ba0\u7269\uff0c\u8981\u4e48\u5168\u662f\u9886\u517b\u8005\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u4e00\u4e0b\uff0c\u6c42\u4e00\u4e0b\u524d\u9a71\u548c\u540e\u7ee7\u5c31\u884c\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u7528treap\u6765\u5b9e\u73b0\uff0c\u56e0\u4e3a\u7801\u91cf\u5c0f~~\u800c\u4e14\u6211\u4e0d\u4f1asplay~~\u3002\n\n\u4f46\u662f\uff0c\u6211\u53d1\u73b0\u5176\u4ed6\u9898\u89e3\u5728\u5904\u7406\u6570\u636e\u65f6\u5199\u5f97\u90fd\u5f88\u957f\uff0c\u5927\u591a\u90fd\u5206\u4e864\u7c7b\u8ba8\u8bba\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u6808\u6765\u7ef4\u62a4\uff0c\u4ee3\u7801\u4f1a\u7b80\u77ed\u4e0d\u5c11\u3002\n\n\u521a\u5f00\u59cb\u58f0\u660e\u4e00\u4e2a\u6808\uff0c\u5982\u679c\u6808\u4e3a\u7a7a\u6216\u6808\u9876\u5143\u7d20\u8ddf\u5f53\u524d\u5143\u7d20\u79cd\u7c7b\u76f8\u540c\uff0c\u5c31\u76f4\u63a5\u628a\u5f53\u524d\u5143\u7d20\u5165\u6808\u5e76\u63d2\u5165\u5e73\u8861\u6811\u3002\n\n\u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\u4e14\u6808\u9876\u5143\u7d20\u8ddf\u5f53\u524d\u5143\u7d20\u79cd\u7c7b\u4e0d\u76f8\u540c\uff0c\u5c31\u5f39\u51fa\u6808\u9876\u5143\u7d20\u5e76\u627e\u5f53\u524d\u5143\u7d20\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u7d2f\u52a0\u7b54\u6848\u5e76\u5220\u9664\u524d\u9a71\u548c\u540e\u7ee7\u4e2d\u8f83\u4f18\u7684\u4e00\u4e2a\uff0c\u6ce8\u610f\u5230\u4f18\u5148\u8003\u8651\u524d\u9a71\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4efd~~\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u7684~~\u6700\u77ed\u4ee3\u7801\u3002\uff08129\u884c\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<stdlib.h>\n#include<ctime>\n#include<stack>\n#define maxn 500005\n#define up(i,a,b) for(int i=a;i<=b;i++)\n#define inf 0x3f3f3f3f\nusing namespace std;\n\ninline int read() {\n\tint f=1,x=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') f=-f;ch=getchar();}\n\twhile('0'<=ch&&ch<='9') x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x*f;\n}\n\nvoid write(int x) {\n\tif(x<0) x=-x,putchar('-');\n\tif(x>9) write(x/10);\n\tputchar(x%10+'0');\n}\n\nstruct node{\n\tint ls,rs,c,siz,pri,v;\n\t#define ls(x) nod[x].ls\n\t#define rs(x) nod[x].rs\n\t#define c(x) nod[x].c\n\t#define siz(x) nod[x].siz\n\t#define pri(x) nod[x].pri\n\t#define v(x) nod[x].v\n}nod[maxn];\nint n,cnt,rt,x[maxn],y[maxn],cnt1,ans,sig[maxn];\nstack<int> s;\n\nvoid update(int &k) {siz(k)=siz(ls(k))+siz(rs(k))+c(k);}\n\nvoid zig(int &k) {\n\tint ls=ls(k);\n\tls(k)=rs(ls);\n\trs(ls)=k;\n\tsiz(ls)=siz(k);\n\tupdate(k);\n\tk=ls;\n}\n\nvoid zag(int &k) {\n\tint rs=rs(k);\n\trs(k)=ls(rs);\n\tls(rs)=k;\n\tsiz(rs)=siz(k);\n\tupdate(k);\n\tk=rs;\n}\n\nvoid insert(int &k,int v) {\n\tif(!k) {\n\t\tk=++cnt;\n\t\tc(k)++,siz(k)++,v(k)=v,pri(k)=rand();\n\t\tv(k)=v,ls(k)=rs(k)=0;\n\t\treturn;\n\t} else siz(k)++;\n\tif(v(k)==v) c(k)++;\n\telse if(v<v(k)) {\n\t\tinsert(ls(k),v);\n\t\tif(pri(ls(k))<pri(k)) zig(k);\n\t} else {\n\t\tinsert(rs(k),v);\n\t\tif(pri(rs(k))<pri(k)) zag(k);\n\t}\n}\n\nvoid delet(int &k,int v) {\n\tif(!k) return;\n\tif(v(k)==v) {\n\t\tif(c(k)>1) c(k)--,siz(k)--;\n\t\telse if(!ls(k)||!rs(k)) {\n\t\t\tk=ls(k)+rs(k);\n\t\t} else if(pri(ls(k))<pri(rs(k))) zig(k),delet(k,v);\n\t\t\t\telse zag(k),delet(k,v);\n\t\treturn;\n\t}\n\tsiz(k)--;\n\tif(v<v(k)) delet(ls(k),v);\n\telse delet(rs(k),v);\n}\n\nint pre(int k,int v) {\n\tint res=-inf;\n\twhile(k) {\n\t\tif(v(k)<v) res=v(k),k=rs(k);\n\t\telse k=ls(k);\n\t}\n\treturn res;\n}\n\nint nex(int k,int v) {\n\tint res=inf;\n\twhile(k) {\n\t\tif(v(k)>v) res=v(k),k=ls(k);\n\t\telse k=rs(k);\n\t}\n\treturn res;\n}\n\nsigned main() {\n\tsrand(time(0));\n\tn=read();\n\tup(i,1,n) {\n\t\tint t=read(),tx=read();\n\t\tif(s.empty()) s.push(t),insert(rt,tx);\n\t\telse if(s.top()==t) s.push(t),insert(rt,tx);\n\t\telse {\n\t\t\tint a=pre(rt,tx),b=nex(rt,tx);\n\t\t\tif(abs(tx-a)<=abs(b-tx)) {\n\t\t\t\tans=abs(ans+tx-a)%1000000;\n\t\t\t\tdelet(rt,a);\n\t\t\t} else {\n\t\t\t\tans=abs(ans+b-tx)%1000000;\n\t\t\t\tdelet(rt,b);\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\twrite(ans%1000000);\n\treturn 0;\n} \n```\n",
        "postTime": 1576044671,
        "uid": 91736,
        "name": "RPChe_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "#### \u66f4\u65b0\u539f\u56e0\uff1a\u8d34\u9519\u4ee3\u7801\n\n#### \u4e3a\u4e86\u60a8\u73b0\u5728\u53ca\u4ee5\u540e\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c[~~\u5f3a\u884c\u5b89\u5229blog~~](https://ch66.cf/index.php/302)\n\n\u601d\u8def\u548cyybyyb\u5dee\u4e0d\u591a\uff0c\u4f46\u8fd8\u662f\u6709\u533a\u522b\u7684\uff0c~~\u6ca1\u6709\u601d\u8def\u96f7\u540c~~ \u5ba0\u7269\u548c\u4e3b\u4eba\u4e4b\u95f4\u8f6c\u6362\u5de7\u5999\u5229\u7528\u5f02\u6216\u539f\u7406\uff0c\u7f29\u77ed\u4ee3\u7801\u91cf\n\nyybyyb\u5927\u4f6c\u7ef4\u62a4\u4e00\u9897splay\uff0c\u53ef\u6211\u53ea\u4f1atreap\uff0c\u7cbe\u534e\u4e3b\u8981\u8fd8\u662f\u5728\u4e3b\u7a0b\u5e8f\u5566\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint read() {\n\tint x=1,ans=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') x*=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){ans=ans*10+ch-48;ch=getchar();}\n\treturn x*ans;\n}\n\nconst int N=80008;\n\nstruct Node {\n\tint l,r,val,pri,cnt;\n}t[N];\n\nint n,rt,top,ans;\n\ninline void zig(int& k) {int y=t[k].l;t[k].l=t[y].r;t[y].r=k;k=y;}//\u53f3\u65cb\ninline void zag(int& k) {int y=t[k].r;t[k].r=t[y].l;t[y].l=k;k=y;}//\u5de6\u65cb\n\nvoid add(int& k,int val) {//\u6dfb\u52a0\n\tif(!k) { k=++top; t[k].val=val; t[k].pri=rand(); t[k].l=t[k].r=0; t[k].cnt=1; return; }\n\tif(t[k].val==val) {t[k].cnt++; return; }\n\tif(val<t[k].val) {\n\t\tadd(t[k].l,val);\n\t\tif(t[t[k].l].pri<t[k].pri) zig(k);\n\t}\n\telse {\n\t\tadd(t[k].r,val);\n\t\tif(t[t[k].r].pri<t[k].pri) zag(k);\n\t}\n}\n\nvoid rem(int& k,const int& val) {//\u5220\u9664(remove)\n\tif(t[k].val==val) {\n\t\tif(t[k].cnt>1) t[k].cnt--;\n\t\telse if(!t[k].l||!t[k].r) k=t[k].l+t[k].r;\n\t\telse if(t[t[k].l].pri<t[t[k].r].pri) zig(k),rem(k,val);\n\t\telse zag(k),rem(k,val);\n\t\treturn;\n\t}\n\tif(val<t[k].val) rem(t[k].l,val);\n\telse rem(t[k].r,val);\n}\n\ninline int qpre(const int& val) {//\u5bfb\u627e\u6bd4\u5c0f\u4e8e\u7b49\u4e8eval\u4e2d\u6700\u5927\u7684\u6570\n\tint k=rt,res=0;\n\twhile(k) {\n\t\tif(t[k].val==val) return val;\n\t\tif(t[k].val<val) res=t[k].val,k=t[k].r;\n\t\telse k=t[k].l;\n\t}\n\treturn res;\n}\n\ninline int qnxt(const int& val) {//\u5bfb\u627e\u5927\u4e8e\u7b49\u4e8eval\u4e2d\u6700\u5c0f\u7684\u6570\n\tint k=rt,res=0;\n\twhile(k) {\n\t\tif(t[k].val==val) return val;\n\t\tif(t[k].val>val) res=t[k].val,k=t[k].l;\n\t\telse k=t[k].r;\n\t}\n\treturn res;\n}\n\ninline int ask(const int& val) {//\u5229\u7528\u4e0a\u9762\u4e24\u4e2a\u51fd\u6570\u7325\u7410\u5f97\u51fa\u7b54\u6848\n\tint l=qpre(val),r=qnxt(val);\n\tif(l==0) return r;\n\tif(r==0) return l;\n\tif(l==val||r==val) return val;\n\tif(val-l==r-val) return l;\n\tif(val-l<r-val) return l;\n\treturn r;\n}\n\nint main() {\n\tn=read();\n\tbool now=0;\n\twhile(n--) {\n\t\tbool x=read();int val=read(); \n\t\tif(x^now) add(rt,val);//if\u5224\u65ad\u5de7\u5999\u5f02\u6216\n\t\telse {\n\t\t\tif(!rt) { now^=1; add(rt,val); continue;}//\u5f02\u6216\u5077\u61d2\n\t\t\tint res=ask(val);\n\t\t\tans=(ans+abs(res-val))%1000000;//\u5343\u4e07\u4e0d\u8981\u5fd8\u8bb0\u53d6\u6a21\uff01\uff01\uff01\u6211\u7ecf\u5e38\u72af\u8fd9\u4e2a\u9519\u8bef\uff01\n\t\t\trem(rt,res);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\t//\u534e\u4e3doutput\n\treturn 0;\n}\n\n```",
        "postTime": 1555307876,
        "uid": 92288,
        "name": "ChenHacker",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "# \u5514\u59c6\n\uff08\u611f\u89c9treap\u515a\u4e0d\u591a\uff1f\uff1f\uff1f\n\n-----------\n\u770b\u5b8c\u9898\u76ee\uff0c\u53d1\u73b0\u8981\u627e\u5dee\u503c\u6700\u5c0f\u7684\uff0c\u8fd9\u4e0d\u5c31\u662f\u6bd4\u8f83\u5e73\u8861\u6811\u7684\u524d\u9a71\u548c\u540e\u7f00\u5417\uff08~~\u677f\u5b50\u9898\u554a~~\uff09\n\n\u5148\u5f00\u59cb\u6211\u662f\u76f4\u63a5\u4e24\u4e2atreap\u65e0\u8111\u83bd\u8fc7\u53bb\u7684\n\n- \u5982\u679c\u6765\u4e86\u4e00\u53ea\u5ba0\u7269\uff0c\u4e14\u6709\u987e\u5ba2\u7b49\u5f85\uff0c\u5c31\u5230\u987e\u5ba2\u7684\u6811\u91cc\u627e\u524d\u9a71\u540e\u7f00\u6bd4\u8f83\uff0c\u770b\u54ea\u4e2a\u66f4\u5c0f\uff0c\u5e76\u628a\u8fd9\u4e2a\u987e\u5ba2\u5220\u6389\u3002\u987e\u5ba2\u53cd\u4e4b\u3002\n- \u5982\u679c\u6765\u4e86\u4e00\u53ea\u5ba0\u7269\uff0c\u800c\u6b63\u5de7\u8fd9\u662f\u6ca1\u6709\u987e\u5ba2\u7b49\u5f85\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u8fd9\u53ea\u5ba0\u7269\u5b58\u5230\u5e73\u8861\u6811\u91cc\uff0c\u987e\u5ba2\u53cd\u4e4b\u3002\n\n\u4f46\u7b49\u6211ac\u4e4b\u540e\u7a81\u7136\u60f3\u5230\uff0c\u6839\u672c\u5c31\u4e0d\u7528\u4e24\u8bfetreap\uff0c\u56e0\u4e3a\u5982\u679c\u6709\u987e\u5ba2\u5728\u7b49\u7684\u8bdd\uff0c\u90a3\u4e48\u73b0\u5728\u80af\u5b9a\u6ca1\u6709\u5ba0\u7269\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u8981\u5f00\u4e00\u4e2atreap\u5c31\u884c\u4e86\u3002\n\n\u6700\u540e\uff0c\u8bb0\u5f97\u5f00longlong\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 101000\n#define INF 0x3f3f3f3f\nusing namespace std;\nint sum=1,R=0;\nint son[MAXN][2],num[MAXN],size[MAXN],tree[MAXN],rd[MAXN],n;\nvoid up(int now){\n     size[now]=size[son[now][0]]+size[son[now][1]]+num[now];\n}\nvoid rotate(int &now,int d){\n     int to=son[now][!d];\n     son[now][!d]=son[to][d];\n     son[to][d]=now;\n     up(now);\n     up(to);\n     now=to;\n}\nvoid change(int &now,int x){\n     if (!now){now=++sum;size[now]=num[now]=1;tree[now]=x;rd[now]=rand();return;}\n     else if(tree[now]==x){num[now]++;size[now]++;return;}; \n     int tmp=(x>tree[now]);\n     change(son[now][tmp],x);\n     if (rd[now]>rd[son[now][tmp]])rotate(now,!tmp);\n     up(now);\n}\nvoid del(int &now,int x){\n     if(!now)return;\n     if (x==tree[now]){\n                       if(!son[now][0]&&!son[now][1]){\n                                                      num[now]--;size[now]--;\n                                                      if(!num[now])now=0;\n                       }\n                       else if(son[now][0]&&!son[now][1]){\n                                                          rotate(now,1);\n                                                          del(son[now][1],x);\n                       }\n                       else if(!son[now][0]&&son[now][1]){\n                                                          rotate(now,0);\n                                                          del(son[now][0],x);\n                       }\n                       else {int tmp=(rd[son[now][0]]>rd[son[now][1]]);\n                            rotate(now,tmp);\n                            del(son[now][tmp],x);\n                       }\n     }\n     else{\n          int tmp=(x>tree[now]);\n          del(son[now][tmp],x);\n     }\n     up(now);\n}\nint pre(int now,int x){\n    if(!now)return -INF;\n    if (tree[now]>=x)return pre(son[now][0],x);\n    else return max(tree[now],pre(son[now][1],x));\n}\nint suc(int now,int x){\n    if(!now)return INF;\n    if (tree[now]<=x)return suc(son[now][1],x);\n    else return min(tree[now],suc(son[now][0],x));\n}\nint main(){\n    cin>>n;\n    memset(son,0,sizeof(son));\n    int cnt[]={0,0};\n    int ans=0;\n    for(int i=1;i<=n;i++){\n            int a,b;\n            scanf(\"%d%d\",&a,&b);\n            if (cnt[a^1]){\n                int x=pre(R,b),y=suc(R,b);\n                if (abs(b-x)<=abs(y-b)){\n                    ans=(ans+abs(b-x))%1000000;\n                    del(R,x);\n                    cnt[a^1]--;\n                }\n                else{\n                    ans=(ans+abs(b-y))%1000000;\n                    del(R,y);\n                    cnt[a^1]--;\n                }\n            }\n            else{\n                change(R,b);\n                cnt[a]++;\n            }\n    }\n    cout<<ans;\n    return 0;\n}\n\n```\n",
        "postTime": 1554642326,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u6765\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u505a\u6cd5\n\n\u4e8b\u5b9e\u4e0a\u8fd9\u9898\u5c31\u56db\u4e2a\u64cd\u4f5c\uff0c\u63d2\u5165\uff0c\u5220\u9664\uff0c\u627e\u524d\u9a71\uff0c\u627e\u540e\u7ee7\n\n\u524d\u4e24\u4e2a\u90fd\u5f88\u7b80\u5355\u5bf9\u5427\uff0c\u90a3\u4e48\u540e\u4e24\u4e2a\u7ebf\u6bb5\u6811\u80fd\u505a\u5417\uff1f\n\n\u5f53\u7136\u80fd\u505a\n\n\u9996\u5148\u6211\u4eec\u641e\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u8981\u67e5\u8be2 $x$ \u7684\u524d\u9a71\n\n\u9996\u5148\u6211\u4eec\u80af\u5b9a\u4e0d\u4f1a\u8be2\u95ee $l>x$ \u7684\u533a\u95f4\uff0c\u7136\u540e\u6211\u4eec\u4e0d\u4f1a\u8bbf\u95ee\u6ca1\u6709\u6570\u7684\u533a\u95f4\n\n\u5982\u679c\u4ed6\u7684\u4e24\u4e2a\u513f\u5b50\u7ed3\u70b9\u90fd\u6ee1\u8db3\u6761\u4ef6\u8be5\u600e\u4e48\u529e\u5462\n\n\u6211\u4eec\u5148\u8bbf\u95ee\u53f3\u513f\u5b50\uff0c\u5982\u679c\u53f3\u513f\u5b50\u53ef\u4ee5\uff0c\u90a3\u4e48\u8fd4\u56de\u503c\uff0c\u5426\u5219\u518d\u8bbf\u95ee\u5de6\u513f\u5b50\n\n\u56e0\u4e3a\u6211\u4eec\u8981\u627e\u7684\u662f\u524d\u9a71\uff0c\u53f3\u513f\u5b50\u80af\u5b9a\u6bd4\u5de6\u513f\u5b50\u8981\u4f18\n\n\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86\n\n\u67e5\u8be2\u540e\u7ee7\u540c\u7406\u53ef\u5f97\n\n\u6709\u4e86\u8fd9\u56db\u4e2a\u64cd\u4f5c\u540e\u9762\u5e94\u8be5\u90fd\u4f1a\u4e86\u5427\uff0c\u5bf9\u4e8e\u5ba0\u7269\u6811\uff08\u9886\u517b\u6811\uff09\u7ef4\u62a4\u4e00\u4e0b\u5c31\u597d\u4e86\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u628a\u8fd9\u9053\u5e73\u8861\u6811\u6c34\u8fc7\u53bb\u4e86\n\n\u7ebf\u6bb5\u6811\u90e8\u5206\u4ee3\u7801\u5728\u4e0b\u9762\n\n\n```cpp\nstruct node{\n\tint ls,rs;\n\tint l,r;\n\tint s;\n}t[40040400];\n\nint cnt=0,root;\n\nvoid insert(int &p,int l,int r,int x){//\u52a8\u6001\u5f00\u70b9\u63d2\u5165\n\tif(p==0){\n\t\tp=++cnt;\n\t}\n\tt[p].s++;\n\tt[p].l=l;t[p].r=r;\n\tif(l==r){\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(x<=mid) insert(t[p].ls,l,mid,x);\n\telse insert(t[p].rs,mid+1,r,x);\n}\n\nvoid del(int &p,int x){//\u5220\u9664\n\tif(p==0){\n\t\tp=++cnt;\n\t}\n\tt[p].s--;\n\tif(t[p].l==t[p].r){\n\t\treturn;\n\t}\n\tint mid=t[p].l+t[p].r>>1;\n\tif(x<=mid) del(t[p].ls,x);\n\telse del(t[p].rs,x);\n}\n\nint findl(int p,int x){//\u67e5\u8be2\u524d\u9a71\n\tif(t[p].l>x) return -1;//\u4e0d\u6ee1\u8db3\u6761\u4ef6\n\tif(t[p].s==0) return -1;//\u6ca1\u6709\u6570\n\tif(t[p].l==t[p].r){\n\t\treturn t[p].l;\n\t}\n\tint mid=t[p].l+t[p].r;\n\tint res=findl(t[p].rs,x);//\u5148\u8bbf\u95ee\u53f3\u8fb9\n\tif(res!=-1) return res;\n\telse return findl(t[p].ls,x);//\u4e0d\u884c\u7684\u8bdd\u518d\u5de6\u8fb9\n}\n\nint findr(int p,int x){//\u67e5\u8be2\u540e\u7ee7\uff0c\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\n\tif(t[p].r<x) return -1;\n\tif(t[p].s==0) return -1;\n\tif(t[p].l==t[p].r){\n\t\treturn t[p].l;\n\t}\n\tint mid=t[p].l+t[p].r;\n\tint res=findr(t[p].ls,x);\n\tif(res!=-1) return res;\n\telse return findr(t[p].rs,x);\n}\n\n```\n\n~~\u7ebf\u6bb5\u6811\u6572\u597d\u73a9~~",
        "postTime": 1545055006,
        "uid": 60136,
        "name": "chengni",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u6211\u662f\u7528splay\u505a\u7684\u8fd9\u9053\u9898\u2026\u2026\u3002\n\n\u56e0\u4e3a\u9898\u76ee\u91cc\u9762\u8bb2\u5230\u5728\u540c\u4e00\u65f6\u95f4\u6bb5\u53ea\u5b58\u5728\u72d7\u72d7\u6216\u4eba\u4e24\u79cd\u60c5\u51b5\uff0c\u6240\u4ee5splay\u91cc\u9762\u53ea\u9700\u8981\u6211\u4eec\u5176\u5b9e\u53ea\u7528\u4e00\u9897splay\u7ef4\u62a4\u72d7\u72d7\u548c\u4eba\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\n\n\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u6b21\u8f93\u5165\u8fdb\u53bb\u7684op\uff0c\u5b83\u53ea\u67090\u548c1\u4e24\u79cd\u72b6\u6001\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u7528\u4e00\u4e2a\u53d8\u91cfnow\uff0cnow\u7684\u53d6\u503c\u53ef\u4ee5\u662f0\u6216\u80051,0\u4ee3\u8868splay\u91cc\u9762\u5b58\u7684\u662f\u5ba0\u7269\uff0c1\u4ee3\u8868\u91cc\u9762\u5b58\u7684\u662f\u4eba\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8f93\u5165\u8fdb\u53bb\u7684op\uff0c\u5982\u679c\u201c(op^now)==0\u201d\uff0c\u90a3\u4e48\u8bf4\u660e\u73b0\u5728\u7684\u8f93\u5165\u7684\u4e1c\u897f\u548csplay\u91cc\u9762\u7684\u4e1c\u897f\u662f\u4e00\u81f4\u7684\uff0c\u76f4\u63a5\u52a0\u5165\u5c31\u53ef\u4ee5\u4e86\uff0c\u5426\u5219\u6211\u4eec\u9700\u8981\u4e3a\u4ed6\u914d\u5bf9\uff0c\u56e0\u4e3a\u9898\u76ee\u63d0\u5230\u5b58\u5728\u76f8\u540c\u7684\uff08a-b\uff09\u548c\uff08a+b\uff09\u7684\u65f6\u5019\u4f18\u5148\u8003\u8651\uff08a-b),\u6240\u4ee5\u5728\u914d\u5bf9\uff0c\u4e5f\u5c31\u662f\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u5019\u6211\u4eec\u4f18\u5148\u8003\u8651\u524d\u9a71\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u9700\u8981\u5728\u4e00\u5f00\u59cb\u52a0\u5165INF\u548c-INF\u5462\uff0c\u56e0\u4e3a\u5728\u5bfb\u627e\u524d\u9a71\u548c\u540e\u7ee7\u7684\u65f6\u5019\uff0c\u5982\u679c\u540e\u9762\uff08\u6216\u524d\u9762\uff09\u6ca1\u6709\u4e1c\u897f\u4e86\uff0c\u5b83\u597d\u50cf\u4f1a\u4e00\u76f4\u5728\u91cc\u9762\u627e\u554a\u627e\uff08\u6211\u731c\u7684\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u73b0\u5728\u91cc\u9762\u52a0\u5165\u4e24\u4e2a\u7aef\u70b9\uff08\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\u7684\uff09\n\n\u6700\u540e\u4e00\u5b9a\u8981\u8bb0\u5f97\u53d6mo\n\n\n\n```\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#define il inline\n#define rg register\n#define ll long long\n#define N 50010\n#define inf 2147483600\n#define MOD 1000000\nusing namespace std;\nint n,op,now,tot;//now\u4e3a\u5f53\u524dsplay\u91cc\u9762\u662f\u4eba\u8fd8\u662f\u52a8\u7269\uff0c0\u4e3a\u5ba0\u72691\u4e3a\u4eba\nint u,root,ans,cnt;\nstruct T{\n\tint ch[2];\n\tint fa,val,size;\n}te[N<<2];\nil int read()\n{\n\trg int data=0,w=1;rg char c=getchar();\n\twhile((c<'0'||c>'9')&&c!='-')c=getchar();\n\tif(c=='-')w=-1,c=getchar();\n\twhile(c>='0'&&c<='9')data=(data<<3)+(data<<1)+c-'0',c=getchar();\n\treturn w*data;\n}\nvoid rotate(rg int x){//splay\u7684\u65cb\u8f6c\u64cd\u4f5c\n\tint y=te[x].fa,z=te[y].fa;\n\tint k=(te[y].ch[1]==x);\n\tte[z].ch[te[z].ch[1]==y]=x;\n\tte[x].fa=z;\n\tte[y].ch[k]=(te[x].ch[k^1]);\n\tte[te[x].ch[k^1]].fa=y;\n\tte[x].ch[k^1]=y;\n\tte[y].fa=x;\n}\nvoid splay(rg int x,int goal){//\u5c06x\u8f6c\u5230goal\u7684\u513f\u5b50\u5904\n\twhile(te[x].fa!=goal){\n\t\tint y=te[x].fa,z=te[y].fa;\n\t\tif(z!=goal)\n\t\t\t(te[z].ch[0]==y)^(te[y].ch[0]==x)?rotate(x):rotate(y);\n\t\trotate(x);\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\t}\n\tif(!goal)root=x;\n}\nvoid find(rg int x){//\u5bfb\u627e\u503c\u4e3ax\u7684\u6570 \u8bb0\u5f97\u8f6c\u5230\u6839\u8282\u70b9\u5904\n\tint u=root;\n\tif(!u)return;\n\twhile(te[u].ch[x>te[u].val]&&x!=te[u].val)\n\t\tu=te[u].ch[x>te[u].val];\n\tsplay(u,0);\n}\nvoid Insert(rg int x)//\u63d2\u5165\u6570x\n{\n\tint u=root,fa=0;\n\twhile(u){\n\t\tfa=u;\n\t\tu=te[u].ch[x>te[u].val];\n\t}\n\tu=(++tot);\n\tif(fa)\n\t\tte[fa].ch[x>te[fa].val]=u;\n\tte[u].ch[0]=te[u].ch[1]=0;\n\tte[tot].fa=fa,te[tot].val=x;\n\tte[tot].size=1;\n\tsplay(u,0);\n}\nint Next(rg int x,rg int f){//\u5bfb\u627e\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u5bf9\u4e8ef\u800c\u8a00 0\u4ee3\u8868\u524d\u9a711\u4ee3\u8868\u540e\u7ee7\n\tfind(x);\n\tint u=root;\n\tif(te[u].val>x&&f)return u;\n\tif(te[u].val<x&&!f)return u;\n\tu=te[u].ch[f];\n\twhile(te[u].ch[f^1])\n\t\tu=te[u].ch[f^1];\n\treturn u;\n}\nvoid Delet(rg int x)//\u5220\u9664\u64cd\u4f5c\n{\n\tint last=Next(x,0),next=Next(x,1);\n\tsplay(last,0),splay(next,last);\n\tte[next].ch[0]=0;\n}\nint main()\n{\n\tn=read();\n\tInsert(-214748364),Insert(2147483607);\n    //\u8bb0\u5f97\u52a0\u5165inf\u548c-inf\n\tfor(rg int i=1;i<=n;++i)\n\t{\n\t\top=read(),u=read();\n\t\tif(cnt==0)\n\t\t\tnow=op,Insert(u),cnt++;\n            //\u5982\u679c\u73b0\u5728splay\u5185\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\uff0c\u53ef\u80fd\u662fi=1\u7684\u60c5\u51b5\u6216\u8005splay\u79bb\u5f97\u4e1c\u897f\u5168\u90e8\u88ab\u5339\u914d\u5b8c\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u66f4\u65b0now\u6765\u8868\u793a\u73b0\u5728splay\u7ef4\u62a4\u7684\u662f\u4eba\u8fd8\u662f\u72d7\uff0c\u76f4\u63a5\u5c06now=op\u5c31\u53ef\u4ee5\u4e86\n\t\telse if((op^now)==0)//\u5982\u679csplay\u91cc\u7684\u4e1c\u897f\u548c\u73b0\u5728\u52a0\u5165\u7684\u4e1c\u897f\u76f8\u540c\u7684\u65f6\u5019 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8003\u8651\u52a0\u5165\n\t\t\tInsert(u),cnt++;\n\t\telse{//\u5982\u679c\u4e0d\u540c\u5219\u9700\u8981\u914d\u5bf9\n\t\t\tint fir=Next(u,0),nex=Next(u,1);\n\t\t\tint q=abs(te[fir].val-u),h=abs(te[nex].val-u);\n\t\t\tif(q<=h)\n\t\t\t\tans+=q,Delet(te[fir].val);\n\t\t\telse ans+=h,Delet(te[nex].val);\n\t\t\tcnt--,ans%=MOD;\n\t\t}\n        //\u6bd4\u8f83\u524d\u9a71\u548c\u540e\u7ee7\u4e0e\u5f53\u524d\u7684\u5339\u914d\u503c\u5927\u5c0f\uff0c\u5220\u9664\u8003\u8651\u8f83\u5c0f\u503c\u5e76\u7edf\u8ba1\u7b54\u6848\uff0c\u5982\u679c\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u4f18\u5148\u8003\u8651\u524d\u9a71\u52a8\uff08\u9898\u76ee\u8981\u6c42\uff09\n\t}\n\tcout<<ans;\n    return 0;\n}\n\n```",
        "postTime": 1519630897,
        "uid": 66915,
        "name": "Tyher",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "```cpp\n/*\n\t\u8fd9\u4e2a\u9898\u4e00\u5f00\u59cb\u53ea\u5f00\u4e86\u4e00\u9897treap\uff0c\u4f46\u662fzbq\u544a\u8bc9\u6211\u8bf4\uff0c\n\t\u90a3\u4e9b\u6ca1\u9886\u7740\u5ba0\u7269\u7684\u4eba\u4e0d\u4f1a\u8d70\uff0c\n\t\u76f4\u5230\u6709\u5ba0\u7269\u53ef\u4ee5\u9886\u6216\u8005\u662f\u76f4\u5230\u8f93\u5165\u5b8c\u6570\u636e\u4e5f\u6ca1\u6709\u5ba0\u7269\u53ef\u4ee5\u9886\uff0c\u7136\u540e\u5931\u671b\u7684\u56de\u5bb6\u3002\n\t\uff08\u5176\u5b9e\u8fd9\u662f\u9898\u76ee\u91cc\u8bf4\u4e86\u7684   \u6ca1get\u5230\u9898\u76ee\u610f\u601d\uff09 \n\t\u6240\u4ee5\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u628a\u90a3\u4e9b\u6ca1\u6709\u9886\u732b\u7684\u4eba\u6254\u4e86\uff0c\u6211\u4eec\u8981\u628a\u4ed6\u4eec\u5b58\u8d77\u6765\uff0c\n\t\u6240\u4ee5\u6211\u4eec\u5f00\u4e24\u9897treap\uff0c\u4e00\u9897\u5b58\u5ba0\u7269\uff0c\u4e00\u9897\u5b58\u4eba\u3002\n\t\n\t\u5f53\u6709\u4eba\u6765\u9886\u5ba0\u7269\u7684\u65f6\u5019\uff0c\u5c31\u5224\u65ad\uff1a\n\t\t\u5982\u679c\u5f53\u524d\u6ca1\u6709\u5ba0\u7269\uff0c\u5c31\u628a\u4eba\u5b58\u8d77\u6765\uff1b \n\t\t\u5426\u5219\u5c31\u53bb\u5ba0\u7269\u6811\u91cc\u627e\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u5ba0\u7269\u8ba9\u4ed6\u9886\u56de\u53bb\u3002\n\t\u5f53\u6709\u5ba0\u7269\u52a0\u5165\u7684\u65f6\u5019\uff0c\u5c31\u5224\u65ad\uff1a\n\t\t\u5982\u679c\u5f53\u524d\u6ca1\u6709\u4eba\u6765\u9886\u517b\u5ba0\u7269\uff0c\u5c31\u628a\u5ba0\u7269\u5b58\u8d77\u6765\uff0c\n\t\t\u5426\u5219\u5c31\u53bb\u4eba\u6811\u91cc\u7ed9\u5b83\u627e\u4e2a\u6700\u5408\u9002\u7684\u4e3b\u9886\u56de\u53bb\u3002\n\t\n\t\u600e\u4e48\u627e\u5ba0\u7269\u548c\u4e3b\u4eba\uff1a\n\t\t\u56e0\u4e3a\u662f\u627e\u6700\u63a5\u8fd1\u8981\u6c42\u7684\u4eba\u548c\u5ba0\u7269\uff0c\n\t\t\u6240\u4ee5\u6211\u4eec\u6309\u5f53\u524d\u7684\u8981\u6c42x\u627e\u5bf9\u5e94\u7684pre\uff08\u524d\u9a71\uff09\u548cnxt\uff08\u540e\u7ee7\uff09\uff0c\u8868\u793a\u6bd4x\u5c0f\u7684\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u3001\u6bd4x\u5927\u7684\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a \n\t\t\u7136\u540e\u5224\u65ad\u54ea\u4e2a\u66f4\u4f18\uff0c\u8ba9\u7b54\u6848\u52a0\u4e0a\u8fd9\u4e2a\u6700\u4f18\u89e3\u7684\u8d21\u732e\uff0c\u6700\u540e\u628a\u8fd9\u4e2a\u6700\u4f18\u89e3\u7ed9erase\u6389\u3002\n\t\n\t\u56e0\u4e3a\u6211\u4f7f\u7528\u6307\u9488\u5199\u7684\uff0c\u81ea\u5b9a\u4e49\u7684null\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u6254\u5230\u7ed3\u6784\u4f53\u91cc\u9762\u5c01\u88c5\u8d77\u6765\u505a\uff0c\u4f46\u662f\u6709\u9ed1\u79d1\u6280\u53eb\u505anamespace\uff0c \u7528namespace\u5f00\u4e24\u4e2a\u7a7a\u95f4\uff0c\n\t\u4e00\u4e2a\u7a7a\u95f4\u4e00\u9897treap\uff0c\u7136\u540e\u505a\u5c31\u884c\u4e86\u3002\n\t\n\t\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u4f46\u662f\u5176\u5b9e\u6709\u4e00\u534a\u7684\u4e1c\u897f\u662f\u5b8c\u5168\u4e00\u6837\u7684 \u4e24\u9897namespace\u91cc\u7684\u4e1c\u897f\u662f\u5b8c\u5b8c\u5168\u5168\u4e00\u4e2a\u6837\u7684\u3002 \n*/ \n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<ctime>\nusing namespace std;\n\nconst long long N=8e4+5;\nconst long long mod=1000000;\nconst long long INF=2147483647;\n\nlong long n,opt,x;\n\nlong long read()\n{\n\tchar c=getchar();long long num=0,f=1;\n\tfor(;!isdigit(c);c=getchar())\n\t\tf=c=='-'?-1:f;\n\tfor(;isdigit(c);c=getchar())\n\t\tnum=num*10+c-'0';\n\treturn num*f;\n}\n\nnamespace Pet\t//\u5ba0\u7269\u6811 \n{\n\tstruct Node\n\t{\n\t\tNode *son[2];\n\t\tlong long key;\n\t\tlong long heap_key;\n\t\tlong long size;\n\t}node[N],_null;\n\t\n\ttypedef Node* Tree;\n\tTree null,root,now_node;\t//null\u662f\u81ea\u5b9a\u4e49\u7684\u7a7a\u8282\u70b9 \n\t\n\tvoid init()\t\t//\u521d\u59cb\u5316 \n\t{\n\t\tsrand(time(NULL));\n\t\tnow_node=node;\n\t\tnull=root=&_null;\n\t\tnull->son[0]=null->son[1]=null;\t\t//\u5de6\u53f3\u513f\u5b50\u7b49\u4e8e\u7a7a\u8282\u70b9\u672c\u8eab \n\t}\n\t\n\tTree newNode(long long key)\t\t//\u65b0\u5f00\u8282\u70b9 \n\t{\n\t\t++now_node;\n\t\tnow_node->key=key;\n\t\tnow_node->size=1;\n\t\tnow_node->heap_key=rand();\n\t\tnow_node->son[0]=now_node->son[1]=null;\t\t//\u5de6\u53f3\u513f\u5b50\u7b49\u4e8e\u7a7a\u8282\u70b9 \n\t\treturn now_node;\n\t}\n\t\n\tvoid rotate(Tree &root,bool flag)\t//\u65cb\u8f6c \n\t{\n\t\tTree tmp=root->son[!flag];\n\t\troot->son[!flag]=tmp->son[flag];\n\t\ttmp->son[flag]=root;\n\t\troot->size=root->son[0]->size+root->son[1]->size+1;\n\t\ttmp->size=tmp->son[0]->size+tmp->son[1]->size+1;\n\t\troot=tmp;\n\t}\n\t\n\tvoid insert(Tree &root,long long key)\t//\u63d2\u5165 \n\t{\n\t\tif(root==null)\n\t\t\troot=newNode(key);\n\t\telse\n\t\t{\n\t\t\tbool flag=key>root->key;\n\t\t\tinsert(root->son[flag],key);\n\t\t\t++root->size;\n\t\t\tif(root->heap_key<root->son[flag]->heap_key)\n\t\t\t\trotate(root,!flag);\n\t\t}\n\t}\n\t\n\tvoid erase(Tree &root,long long key)\t//delete \u7528erase\u662f\u56e0\u4e3a\u3001\u3001\u3001\u6211\u4e0e\u4f17\u4e0d\u540c \n\t{\n\t\tif(root==null)\n\t\t\treturn;\n\t\tif(key!=root->key)\n\t\t{\n\t\t\tbool flag=key>root->key;\n\t\t\terase(root->son[flag],key);\n\t\t\t--root->size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(root->son[0]==null)\n\t\t\t\troot=root->son[1];\n\t\t\telse if(root->son[1]==null)\n\t\t\t\troot=root->son[0];\n\t\t\telse\n\t\t\t{\n\t\t\t\tbool flag=root->son[0]->heap_key>root->son[1]->heap_key;\n\t\t\t\trotate(root,flag);\n\t\t\t\terase(root->son[flag],key);\n\t\t\t\t--root->size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong long query_pre(Tree root,long long x)\t\t//\u67e5\u524d\u9a71 \n\t{\n\t\tif(root==null)\n\t\t\treturn -INF;\n\t\tif(root->key==x)\n\t\t\treturn x;\n\t\tif(x>root->key)\n\t\t\treturn max(root->key,query_pre(root->son[1],x));\n\t\treturn query_pre(root->son[0],x);\n\t}\n\t\n\tlong long query_nxt(Tree root,long long x)\t\t//\u67e5\u540e\u7ee7 \n\t{\n\t\tif(root==null)\n\t\t\treturn INF;\n\t\tif(root->key==x)\n\t\t\treturn x;\n\t\tif(root->key<x)\n\t\t\treturn query_nxt(root->son[1],x);\n\t\treturn min(root->key,query_nxt(root->son[0],x));\n\t}\n}\n\nnamespace Peo\t//\u4eba\u6811 \uff0c\u91cc\u9762\u7684\u4e1c\u897f\u662f\u4ece\u5ba0\u7269\u6811\u91cc\u7c98\u7684\uff0c\u5185\u5bb9\u4e00\u6837 \n{\n\tstruct Node\n\t{\n\t\tNode *son[2];\n\t\tlong long key;\n\t\tlong long heap_key;\n\t\tlong long size;\n\t}node[N],_null;\n\t\n\ttypedef Node* Tree;\n\tTree null,root,now_node;\n\t\n\tvoid init()\n\t{\n\t\tsrand(time(NULL));\n\t\tnow_node=node;\n\t\tnull=root=&_null;\n\t\tnull->son[0]=null->son[1]=null;\n\t}\n\t\n\tTree newNode(long long key)\n\t{\n\t\t++now_node;\n\t\tnow_node->key=key;\n\t\tnow_node->size=1;\n\t\tnow_node->heap_key=rand();\n\t\tnow_node->son[0]=now_node->son[1]=null;\n\t\treturn now_node;\n\t}\n\t\n\tvoid rotate(Tree &root,bool flag)\n\t{\n\t\tTree tmp=root->son[!flag];\n\t\troot->son[!flag]=tmp->son[flag];\n\t\ttmp->son[flag]=root;\n\t\troot->size=root->son[0]->size+root->son[1]->size+1;\n\t\ttmp->size=tmp->son[0]->size+tmp->son[1]->size+1;\n\t\troot=tmp;\n\t}\n\t\n\tvoid insert(Tree &root,long long key)\n\t{\n\t\tif(root==null)\n\t\t\troot=newNode(key);\n\t\telse\n\t\t{\n\t\t\tbool flag=key>root->key;\n\t\t\tinsert(root->son[flag],key);\n\t\t\t++root->size;\n\t\t\tif(root->heap_key<root->son[flag]->heap_key)\n\t\t\t\trotate(root,!flag);\n\t\t}\n\t}\n\t\n\tvoid erase(Tree &root,long long key)\n\t{\n\t\tif(root==null)\n\t\t\treturn;\n\t\tif(key!=root->key)\n\t\t{\n\t\t\tbool flag=key>root->key;\n\t\t\terase(root->son[flag],key);\n\t\t\t--root->size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(root->son[0]==null)\n\t\t\t\troot=root->son[1];\n\t\t\telse if(root->son[1]==null)\n\t\t\t\troot=root->son[0];\n\t\t\telse\n\t\t\t{\n\t\t\t\tbool flag=root->son[0]->heap_key>root->son[1]->heap_key;\n\t\t\t\trotate(root,flag);\n\t\t\t\terase(root->son[flag],key);\n\t\t\t\t--root->size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong long query_pre(Tree root,long long x)\n\t{\n\t\tif(root==null)\n\t\t\treturn -INF;\n\t\tif(root->key==x)\n\t\t\treturn x;\n\t\tif(x>root->key)\n\t\t\treturn max(root->key,query_pre(root->son[1],x));\n\t\treturn query_pre(root->son[0],x);\n\t}\n\t\n\tlong long query_nxt(Tree root,long long x)\n\t{\n\t\tif(root==null)\n\t\t\treturn INF;\n\t\tif(root->key==x)\n\t\t\treturn x;\n\t\tif(root->key<x)\n\t\t\treturn query_nxt(root->son[1],x);\n\t\treturn min(root->key,query_nxt(root->son[0],x));\n\t}\n}\n\nint main()\n{\n\tPet::init();\t//\u521d\u59cb\u5316\u5ba0\u7269\u6811 \n\tPeo::init();\t//\u521d\u59cb\u5316\u4eba\u6811 \n\tlong long ans=0;\n\tn=read();\n\twhile(n--)\n\t{\n\t\topt=read(),x=read();\n\t\tif(opt==0)\t//\u6709\u65b0\u5ba0\u7269 \n\t\t{\n\t\t\tif(Peo::root==Peo::null)\t//\u5982\u679c\u6ca1\u4eba\u9886 \n\t\t\t{\n\t\t\t\tPet::insert(Pet::root,x);\t//\u628a\u5ba0\u7269\u6401\u7740 \n\t\t\t}\n\t\t\telse\t//\u627e\u4e2a\u6700\u5408\u9002\u7684\u4e3b\u9886\u56de\u53bb \n\t\t\t{\n\t\t\t\tlong long a=Peo::query_pre(Peo::root,x);\n\t\t\t\tlong long b=Peo::query_nxt(Peo::root,x);\n\t\t\t\tif(abs(x-a)<=abs(x-b))\t\t//\u770b\u770b\u54ea\u4e2a\u4e3b\u66f4\u5408\u9002 \n\t\t\t\t{\n\t\t\t\t\tans+=abs(x-a);\n\t\t\t\t\tPeo::erase(Peo::root,a);\t//\u628a\u8fd9\u4e2a\u4e3b\u5220\u4e86\uff0c\u8868\u793a\u4ed6\u5df2\u7ecf\u6709\u5ba0\u7269\u4e86 \n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tans+=abs(x-b);\n\t\t\t\t\tPeo::erase(Peo::root,b);\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\t//\u4eba\uff0c\u548c\u5ba0\u7269\u7684\u4e00\u6837 \n\t\t{\n\t\t\tif(Pet::root==Pet::null)\n\t\t\t{\n\t\t\t\tPeo::insert(Peo::root,x);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlong long a=Pet::query_pre(Pet::root,x);\n\t\t\t\tlong long b=Pet::query_nxt(Pet::root,x);\n\t\t\t\tif(abs(x-a)<=abs(x-b))\n\t\t\t\t{\n\t\t\t\t\tans+=abs(x-a);\n\t\t\t\t\tPet::erase(Pet::root,a);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tans+=abs(x-b);\n\t\t\t\t\tPet::erase(Pet::root,b);\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",ans%mod);\n\treturn 0;\n}\n```",
        "postTime": 1519221820,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "#### \u9898\u610f\u7b80\u5316\uff1a\n\n\u6bcf\u4e2a\u5ba0\u7269\u7684\u7279\u5f81\u503c $a$\uff0c\u6bcf\u4e2a\u6536\u517b\u8005\u5e0c\u671b\u6536\u517b\u7684\u5ba0\u7269\u7684\u7279\u5f81\u503c $b$\u3002\n\n\u6536\u517b\u8005\uff1a\u5728\u6240\u6709\u5ba0\u7269\u4e2d\u627e\u8ddd\u79bb $b$ \u6700\u8fd1\u7684 $a$\u3002\n\n\u5ba0\u7269\uff1a \u5728\u6240\u6709\u6536\u517b\u8005\u4e2d\u627e\u8ddd\u79bb $a$ \u6700\u8fd1\u7684 $b$\u3002\n\n\u4e0d\u6ee1\u610f\u5ea6\uff1a\u6536\u517b\u5230\u5ba0\u7269\u7684 $|a-b|$\u3002\n\n#### \u89e3\u9898\u601d\u8def\uff1a\n\n\u9700\u8981\u6807\u8bb0 $set$ \u4e2d\u7684\u662f\u5ba0\u7269\u8fd8\u662f\u6536\u517b\u8005\u3002\n\n\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6570\u636e\uff1a\n\n\u5982\u679c\u7c7b\u578b\u76f8\u540c\uff0c\u8fdb\u5165 $set$\uff1b\n\n\u5982\u679c\u7c7b\u578b\u4e0d\u540c\uff0c\u627e\u6536\u517b\u5173\u7cfb\uff0c\u51fa $set$\u3002\n\n#### \u8303\u4f8b\u4ee3\u7801\uff1a\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nint read()\n{\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile(c<'0' || c>'9'){if(c=='-')f=-1; c = getchar();}\n\twhile(c>='0'&&c<='9'){x = x*10+c-'0'; c = getchar();}\n\treturn x*f;\n}\nconst int MAXN = 800008, INF = 0x3f3f3f3f, MOD = 1000000;\nset<int> se; set<int>::iterator it;\nint ans, a, val, op,opin=-1, mina, n;\nint main()\n{\n\tn = read();\n\topin = -1;\n\tfor(int i = 1; i<=n; i++)\n\t{\n\t\top = read(); a = read();\n\t\tif(opin==-1 || op==opin)\n\t\t{\n\t\t    se.insert(a);\n\t\t\topin = op;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmina = INF;\n\t\t\t//lower\n\t\t\tit = se.lower_bound(a);\n\t\t\tif(it!=se.begin()) {it--; val = *it; mina = a-*it;}\n\t\t\t//upper\n\t\t\tit = se.upper_bound(a);\n\t\t\tif(it!=se.end())\n\t\t\t{\n\t\t\t\tif(mina > (*it-a))\n\t\t\t\t{\n\t\t\t\t\t  val = *it;\n\t\t\t\t\t  mina = *it-a;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += mina;\n\t\t\tans %= MOD;\n\t\t\tse.erase(val);\n\t\t\tif(se.empty()) opin = -1;\n\t\t}\n\t//\u6d4b\u8bd5\uff1acout << \"set: \"; for(it = se.begin(); it!=se.end(); it++) cout << *it << \" \" ; cout <<endl;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n\t\n}\n\n```",
        "postTime": 1596718559,
        "uid": 56822,
        "name": "__charlie520__",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "~~\u4e0d\u5bb9\u6613\u4e0d\u5bb9\u6613\uff0c\u672c\u849f\u84bb\u7ec8\u4e8e\u5b66\u4f1aSplay\u5566~~\n\n\u8bf4\u5b9e\u5728\u8bdd\uff0c\u5f88\u5c11\u89c1\u5230\u8fd9\u4e48\u6a21\u677f\u7684\u6a21\u677f\u9898\u4e86\uff0c\u4e5f\u53ea\u670910\u5e74\u524d\u7684\u9898\u76ee\u53ef\u80fd\u51fa\u73b0\u3002\n\n## \u6b63\u9898\uff1a\u5982\u4f55\u627e\u5230\u6570\u5217\u4e2d\u7684\u524d\u9a71\u540e\u7ee7\u5e76\u5220\u9664\uff1f\n\n### 1.set\nset\u662f\u7edd\u5bf9\u7684\u4e0d\u4e8c\u9009\u62e9\u3002\u6bd5\u7adf\u8fd9\u9898\u53ea\u9700\u8981\u5bfb\u627e\u524d\u9a71\u540e\u7ee7\u4e0e\u8fd9\u4e2a\u6570\u672c\u8eab\uff0c\u4e0d\u9700\u8981\u533a\u95f4\u7b2cK\u5927\u6570\uff0c\u6240\u4ee5\u62cd\u4e86\u5e73\u8861\u6811\u7684\u90fd\u662f\u2026\u2026\uff08pwq\uff09\n\n\u7136\u800c\uff0c\u4e3a\u4e86\uff0c\u8fbe\u5230\u7ec3\u4e60\uff08zuosi\uff09\u7684\u76ee\u7684\uff0c\u6211\u4eec\u4ecd\u7136\u9009\u62e92.\n\n### **2.splay\u5927\u6cd5\u597d**\n\u770b\u5230\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u6211\u4eec\u5c31\u9a6c\u4e0a\u660e\u767d\u4e86\uff1a\u8fd9\u9898\u53ef\u4ee5splay\uff08\u5f53\u7136treap\u548cSBT\u4e4b\u7c7b\u7684\u4e5f\u884c\uff09\u3002\n\nsplay\u5b66\u4e60\u94fe\u63a5\u6070\u4e00\u53d1\uff1a\n(https://baijiahao.baidu.com/s?id=1613228134219334653&wfr=spider&for=pc)\n\n\u90a3\u4e48\uff0c\u6bd4\u8d77\u6b63\u5e38\u7684splay\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u86512\u4e2a\u95ee\u9898\u3002\n\n<1>\u5982\u4f55\u5b9e\u73b0\u5206\u7ec4\uff1f<2>\u5982\u4f55\u5feb\u901f\u5e73\u8861\u6811\u4e2d\u5e76\u672a\u51fa\u73b0\u7684\u6570\u7684\u524d\u9a71\u540e\u7ee7\uff1f\n\n<1>\u5f88\u597d\u89e3\u51b3\uff0c\u6bcf\u6b21\u7eaa\u5f55\u4e00\u4e0b\u5f53\u524d\u7684opt\uff08\u64cd\u4f5c\u7c7b\u578b\uff09\uff0c\u5982\u679c\u5e73\u8861\u6811\u4e2d\u6ca1\u6709\u5143\u7d20\uff0c\u5c31\u628a\u6811\u7684\u7c7b\u578btyp\u6539\u6210opt\uff0c\u5e76\u63d2\u5165\u5143\u7d20\u3002\u5982\u679c\u6709\u5143\u7d20\u4e14typ==opt\uff0c\u5219\u63d2\u5165\u5143\u7d20\u3002\u5982\u679c**typ\uff01=opt**\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u72d7\u9047\u4e0a\u4e86\u4e3b\u4eba\uff0c\u8f6c\u5316\u4e3a<2>\u3002\n\n<2>\u5b9e\u9645\u4e0a\u4e5f\u5f88\u7b80\u5355\u3002\u6211\u521d\u5b66splay\u65f6\uff0c\u770b\u4e86\u4e00\u4e9b\u5927\u4f6c\u7684\u535a\u5ba2\u540e\uff0c\u53d1\u73b0\u6709\u4e00\u79cd\u7384\u5999\u65e0\u6bd4\u7684\u89e3\u6cd5\u3002\u90a3\u5c31\u662f\uff1a**\u628a\u8fd9\u4e2a\u6570\u5148\u63d2\u5165\u5e73\u8861\u6811\uff0c\u5bfb\u627e\u5b8c\u524d\u9a71\u540e\u7ee7\u4e4b\u540e\u518d\u5220\u9664**\u3002\n\n\u867d\u7136\u5e38\u6570\u53ef\u80fd\u4f1a\u4e58\u4e0a2\u751a\u81f33\uff0c\u4f46\u6211\u4eec\u7528\u7b80\u5355\u7684\u64cd\u4f5c\u7ef4\u62a4\u4e86\u6b63\u786e\u6027\uff0c\u771f\u662f\u806a\uff08yu\uff09\u660e\uff08chun\uff09\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\ninline void read(T &x) {\n\tx = 0;\n\tT f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n\tfor (; isdigit(c); c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n\tx *= f;\n}\n\ntemplate <typename T>\ninline void w(T x) {\n\tif (x > 9) w(x / 10);\n\tputchar(x % 10 + 48);\n}\ntemplate <typename T>\ninline void write(T x, char c) {\n\tif (x < 0){\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tw(x);\n\tputchar(c);\n}\nstruct info{\n\tint child[2], cnt, siz, val, fa;\n}a[800005];\nint rt, tot;\ninline void upd(int x) {\n\ta[x].siz = a[x].cnt + a[a[x].child[0]].siz + a[a[x].child[1]].siz;\n}\ninline bool ask(int x) {\n\treturn x == a[a[x].fa].child[1];\n}\ninline void rot(int x) {\n\tint f = a[x].fa, g = a[f].fa;\n\tint tmp = ask(x), tnp = ask(f);\n\tif (g) a[g].child[tnp] = x;\n\ta[x].fa = g;\n\ta[f].child[tmp] = a[x].child[tmp ^ 1];\n\ta[a[x].child[tmp ^ 1]].fa = f;\n\ta[f].fa = x;\n\ta[x].child[tmp ^ 1] = f;\n\tupd(f);\n\tupd(x);\n}\ninline void splay(int x) {\n\tint y, z;\n\twhile(a[x].fa) {\n\t\ty = a[x].fa; z = a[y].fa;\n\t\tif (z != 0) {\n\t\t\tif (ask(x) == ask(y)) rot(y);\n\t\t\telse rot(x);\n\t\t}\n\t\trot(x);\n\t}\n\trt = x;\n\tupd(rt);\n}\ninline void ins(int x) {\n\tint cur = rt, f = 0;\n\twhile(cur) {\n\t\tif (a[cur].val == x) break;\n\t\tf = cur;\n\t\tcur = a[cur].child[x > a[cur].val];\n\t}\n\tif (cur) {\n\t\ta[cur].cnt ++;\n\t\ta[cur].siz ++;\n\t}\n\telse {\n\t\tcur = ++ tot;\n\t\ta[cur].cnt = a[cur].siz = 1;\n\t\ta[cur].val = x;\n\t\ta[cur].fa = f;\n\t\tif (f) a[f].child[x > a[f].val] = cur;\n\t\ta[cur].child[1] = a[cur].child[0] = 0;\n\t}\n\tsplay(cur);\n\treturn;\n}\ninline void mov(int x) {\n\tint cur = rt;\n\twhile(cur) {\n\t\tif (a[cur].val == x) {\n\t\t\tsplay(cur);\n\t\t\treturn;\n\t\t}\n\t\tcur = a[cur].child[x > a[cur].val];\n\t}\n}\ninline int prei() {\n\tint cur = a[rt].child[0];\n\tif (!cur) return 0;\n\twhile(a[cur].child[1]) cur = a[cur].child[1];\n\treturn cur;\n}\ninline int sufi() {\n\tint cur = a[rt].child[1];\n\tif (!cur) return 0;\n\twhile(a[cur].child[0]) cur = a[cur].child[0];\n\treturn cur;\n}\ninline void del(int x) {\n\tmov(x);\n\tif (a[rt].cnt > 1) a[rt].cnt --;\n\telse if (a[rt].child[0] + a[rt].child[1] == 0) {\n\t\trt = 0;\n\t} \n\telse if (a[rt].child[0] == 0) {\n\t\trt = a[rt].child[1];\n\t\ta[rt].fa = 0;\n\t}\n\telse if (a[rt].child[1] == 0) {\n\t\trt = a[rt].child[0];\n\t\ta[rt].fa = 0;\n\t}\n\telse {\n\t\tsplay(prei());\n\t\ta[rt].child[1] = a[a[rt].child[1]].child[1];\n\t\ta[a[rt].child[1]].fa = rt;\n\t\tupd(rt);\n\t\treturn;\n\t}\n}\ninline int que(int x) {\n\tint cur = rt;\n\twhile(cur) {\n\t\tif (a[cur].val == x) break;\n\t\tcur = a[cur].child[x > a[cur].val];\n\t}\n\treturn cur;\n}\ninline int pre(int x) {\n\tins(x);\n\tint ans = a[prei()].val;\n\tdel(x);\n\treturn ans;\n}\ninline int suf(int x) {\n\tins(x);\n\tint ans = a[sufi()].val;\n\tdel(x);\n\treturn ans;\n}\nconst int mod = 1000000;\nint main(){\n\tint n;\n\tread(n);\n\tint opt, typ, sum;\n\tunsigned int ans = 0;\n\tfor (int i = 1; i <= n; i ++) {\n\t\tread(opt); read(sum);\n\t\tif (!rt) {\n\t\t\ttyp = opt;\n\t\t\tins(sum);\n\t\t}\n\t\telse if (opt == typ) ins(sum);\n\t\telse {\n\t\t\tint pos = que(sum);\n\t\t\tif (pos) {\n\t\t\t\tdel(pos);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint p = pre(sum), q = suf(sum);\n\t\t\tif (!p) {\n\t\t\t\tans = (ans + abs(q - sum)) % mod;\n\t\t\t\tdel(q);\t\t\t\t\t\n\t\t\t}\n\t\t\telse if (!q) {\n\t\t\t\tans = (ans + abs(p - sum)) % mod;\n\t\t\t\tdel(p);\t\t\n\t\t\t}\n\t\t\telse if (abs(p - sum) <= abs(q - sum)) {\n\t\t\t\tans = (ans + abs(p - sum)) % mod;\n\t\t\t\tdel(p);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans = (ans + abs(q - sum)) % mod;\n\t\t\t\tdel(q);\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\twrite(ans, '\\n');\n\treturn 0;\n}\n```\n",
        "postTime": 1591975403,
        "uid": 46820,
        "name": "Wall_breaker",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u770b\u8d77\u6765\u6ca1\u6709\u4e00\u4e2a\u53cb\u597d\u7684splay\u7684\u9898\u89e3\uff0c\u6240\u4ee5\u6765\u53d1\u4e00\u6ce2\n\n\u8fd9\u9053\u9898\u91cd\u8981\u7684\u5730\u65b9\u6709\u4e24\u4e2a\n\n\u4e00\u4e2a\u662f\u5982\u679c\u4e00\u4e2a\u9886\u517b\u5ba0\u7269\u7684\u6ca1\u6709\u9886\u517b\u5230\u5ba0\u7269\u4ed6\u4f1a\u7559\u4e0b\u6765\n\n\u53e6\u4e00\u4e2a\u662f\u5982\u679c\u6709\u4e24\u53ea\u6ee1\u8db3\u8981\u6c42\u7684\u5ba0\u7269\uff0c\u5373\u5b58\u5728\u4e24\u53ea\u5ba0\u7269\u4ed6\u4eec\u7684\u7279\u70b9\u503c\u5206\u522b\u4e3a$a-b$\u548c$a+b$\uff0c\u90a3\u4e48\u9886\u517b\u8005\u5c06\u4f1a\u9886\u517b\u7279\u70b9\u503c\u4e3a$a-b$\u7684\u90a3\u53ea\u5ba0\u7269\u3002\n\n\u4e5f\u5c31\u662f\u50cf\u6837\u4f8b\u90a3\u6837$3$\u8fdb\u53bb\u8981\u9886\u517b$2$,$2$\u8fdb\u53bb\u9886\u517b$4$\n\u4e0d\u8fc7\u597d\u50cf\u6ca1\u6709\u8fd9\u79cd\u6570\u636e\uff0c\u6240\u4ee5\u624d\u5bfc\u81f4\u6709\u4eba\u6837\u4f8b\u70b8\u63d0\u4ea4\u5374AC\n\n\u53e6\u5916\u8fd9\u79cd\u9891\u7e41\u5730\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\u7684\u8bdd\uff0c\u6700\u597d\u63d2\u5165\u4e00\u4e2a\u6781\u5c0f\u503c\u548c\u4e00\u4e2a\u6781\u5927\u503c\n\n\u81ea\u8ba4\u4e3a\u6211\u7684$splay$\u9a6c\u8702\u8fd8\u662f\u6bd4\u8f83\u597d\u7684(\n\n\u600e\u4e48\u5934\u6587\u4ef6\u53c8\u88ab\u8bf4\u592a\u957f\u4e86\n\n```cpp\n#include<touwenjian.h>\n\n#define ls(x) c[x][0]\n#define rs(x) c[x][1]\n\nusing namespace std;\n\nconst int maxn=500100;\nconst int modp=1000000;\nint f[maxn],sz[maxn],cnt[maxn],c[maxn][2],val[maxn];\nint rt,tot;\nint col=-1,n;\n\nstruct ssplay{\n\t\n\tinline void pushup(int x){sz[x]=sz[ls(x)]+sz[rs(x)]+cnt[x];}\n\tinline int pd(int x){return c[f[x]][1]==x;}\n\tinline void clear(int x){ls(x)=rs(x)=cnt[x]=sz[x]=val[x]=f[x]=0;}\n\t\n\tinline void rotate(int x)\n\t{\n\t\tint y=f[x],z=f[y],k=pd(x),m=c[x][!k];\n\t\tc[x][!k]=y; c[y][k]=m; f[m]=y; f[y]=x; f[x]=z;\n\t\tif(z) c[z][rs(z)==y]=x;\n\t\tpushup(y); pushup(x);\n\t}\n\t\n\tinline void splay(int x)\n\t{\n\t\tfor(int y=f[x];y=f[x];rotate(x))\n\t\t{\n\t\t\tif(f[y]) rotate(pd(x)^pd(y)?x:y);\n\t\t}\n\t\trt=x;\n\t}\n\t\n\tinline void ins(int target)\n\t{\n\t\tint nowp=rt,fat=0;\n\t\tif(!rt)\n\t\t{\n\t\t\tcnt[++tot]++;\n\t\t\tval[tot]=target;\n\t\t\trt=tot;\n\t\t\tpushup(rt);\n\t\t\treturn ;\n\t\t}\n\t\twhile(1)\n\t\t{\n\t\t\tif(val[nowp]==target)\n\t\t\t{\n\t\t\t\tcnt[nowp]++;\n\t\t\t\tpushup(nowp);\n\t\t\t\tpushup(fat);\n\t\t\t\tsplay(nowp);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tfat=nowp; nowp=c[nowp][val[nowp]<target];\n\t\t\tif(!nowp)\n\t\t\t{\n\t\t\t\tval[++tot]=target;\n\t\t\t\tcnt[tot]++;\n\t\t\t\tf[tot]=fat;\n\t\t\t\tc[fat][val[fat]<target]=tot;\n\t\t\t\tpushup(tot);\n\t\t\t\tpushup(fat);\n\t\t\t\tsplay(tot);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tinline int rk(int target)\n\t{\n\t\tint nowp=rt,ans=0;\n\t\twhile(1)\n\t\t{\n\t\t\tif(target==val[nowp]) { ans+=sz[ls(nowp)]; splay(nowp); return ans+1;}\n\t\t\tans+=val[nowp]<target?sz[ls(nowp)]+cnt[nowp]:0;\n\t\t\tnowp=c[nowp][val[nowp]<target];\n\t\t}\n\t}\n\t\n\tinline int kth(int k)\n\t{\n\t\tint nowp=rt;\n\t\twhile(1)\n\t\t{\n\t\t\tif(ls(nowp)&&k<=sz[ls(nowp)]) nowp=ls(nowp);\n\t\t\telse \n\t\t\t{\n\t\t\t\tk-=sz[ls(nowp)]+cnt[nowp];\n\t\t\t\tif(k<=0) \n\t\t\t\t{\n\t\t\t\t\tsplay(nowp);\n\t\t\t\t\treturn val[nowp];\n\t\t\t\t}\n\t\t\t\tnowp=rs(nowp);\n\t\t\t}\n\t\t}\n\t } \n\t\n\tinline int pre()\n\t{\n\t\tint nowp=ls(rt); \n\t\twhile(rs(nowp)) nowp=rs(nowp);\n\t\tsplay(nowp);\n\t\treturn nowp;\n\t}\n\t\n\tinline int nxt()\n\t{\n\t\tint nowp=rs(rt);\n\t\twhile(ls(nowp)) nowp=ls(nowp);\n\t\tsplay(nowp);\n\t\treturn nowp;\n\t}\n\t\n\tinline void del(int target)\n\t{\n\t\trk(target);\n\t\tint looker;\n\t\tint nowp=rt;\n\t\tif(cnt[rt]>1) \n\t\t{\n\t\t\tcnt[rt]--;\n\t\t\tpushup(rt);\n\t\t\treturn ;\n\t\t}\n\t\tif(!ls(rt)&&!rs(rt))\n\t\t{\n\t\t\tclear(rt);\n\t\t\trt=0;\n\t\t\treturn ;\n\t\t}\n\t\tif(!ls(rt))\n\t\t{\n\t\t\tlooker=rt;\n\t\t\trt=rs(rt);\n\t\t\tclear(looker);\n\t\t\tf[rt]=0;\n\t\t\tpushup(rt);\n\t\t\treturn ;\n\t\t}\n\t\tif(!rs(rt))\n\t\t{\n\t\t\tlooker=rt;\n\t\t\trt=ls(rt);\n\t\t\tclear(looker);\n\t\t\tf[rt]=0;\n\t\t\tpushup(rt);\n\t\t\treturn ;\n\t\t}\n\t\tlooker=rt;\n\t\tnowp=pre();\n\t\tsplay(nowp);\n\t\tf[rs(looker)]=nowp;\n\t\trs(nowp)=rs(looker);\n\t\tclear(looker);\n\t\tpushup(rt);\n\t\treturn ;\n\t}\n\t\n}spl;\n\nint ans;\nint cntt;\n\nint main()\n{\n\tios::sync_with_stdio(false);\n\tregister int i,j;\n\tcin>>n;\n\tint cc,x;\n\tspl.ins(0x3f3f3f3f);\n\tspl.ins(-0x3f3f3f3f); \n\tfor(i=1;i<=n;i++)\n\t{\n \t\tcin>>cc>>x;\n\t\tif(cntt==0) spl.ins(x);\n\t\telse\n\t\t{\n\t\t\tif(cc==(cntt<0)) spl.ins(x);\n\t\t\telse \n\t\t\t{\n\t\t\t\tint a,b;\n\t\t\t\tspl.ins(x);\n\t\t\t\ta=spl.pre();\n\t\t\t\tspl.del(x);\n\t\t\t\tspl.ins(x);\n\t\t\t\tb=spl.nxt();\n\t\t\t\tspl.del(x); \n\t\t\t\tif(abs(x-val[a])<=abs(val[b]-x)) ans+=abs(val[a]-x),spl.del(val[a]);\n\t\t\t\telse  ans+=abs(val[b]-x),spl.del(val[b]);\n\t\t\t}\n\t\t}\n\t\tcntt+=cc==0?1:-1;\n\t\tans%=modp;\n\t}\n\tcout<<ans%modp<<endl;\n}\n```\n\n",
        "postTime": 1589709454,
        "uid": 38636,
        "name": "\u5bd2\u51b0\u5927\u5927",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\u8fd9\u4e00\u7bc7\u9898\u89e3\u5e76\u4e0d\u662f\u4e3a\u4e86\u8bb2\u4ec0\u4e48\u7b97\u6cd5\uff0c\u53ea\u662f\u603b\u7ed3\u4e00\u4e0b\u5e73\u8861\u6811\u5728OI\u8003\u8bd5\u4e2d\u7684\u6ce8\u610f\u4e8b\u9879\u3002\n\u987a\u4fbf\u4f20\u9500\u4e00\u4e0b\u81ea\u5df1\u7684\u535a\u5ba2\uff1a[\u3010\u4f20\u9001\u95e8\u3011](https://www.cnblogs.com/chhokmah/p/10643211.html)\n# \u9898\u610f\u7b80\u5316\uff08\u7ed9\u4e0d\u60f3\u770b\u9898\u76ee\u7684\u5c0f\u4f19\u4f34\u4eec\u4e00\u70b9\u798f\u5229\uff09\n\u7ed9\u4f60\u4e24\u5806\u6570\uff0c\u6bcf\u4e00\u6b21\u7ed9\u4f60\u4e00\u4e2a\u6570\uff0c\u6bcf\u4e00\u6b21\u5728\u53e6\u5916\u4e00\u5806\u6570\u4e2d\u627e\u5230\u8fd9\u4e2a\u6570\u7684\u524d\u7f00\u540e\u7ee7\uff0c\u5220\u53bb\u524d\u9a71\u540e\u7ee7\u4e2d\u8f83\u9760\u8fd1\u7684\uff0c\u5f97\u5230\u4e86\u5206\u6570\u4e3a\u4e24\u4e2a\u6570\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u3002\u8bf7\u4f60\u8ba9\u8fd9\u4e2a\u5206\u6570\u6700\u5c0f\u3002\n\uff08\u9898\u610f\u7b80\u5316\u7684\u5e94\u8be5\u4e0d\u80fd\u5728\u7b80\u5316\u4e86\u5427qwq\uff09\n\n\n---\n# \u505a\u6cd51&&2&&3\uff08\u975e\u6b63\u5e38\u505a\u6cd5\uff09\n\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u6240\u6709\u7684\u5e73\u8861\u6811\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u7528\u4e0d\u5b9a\u957f\u6570\u7ec4`vector`\u548c\u4e0d\u5141\u8bb8\u91cd\u590d\u5143\u7d20\u7684`set`\u6216\u8005\u662f\u5141\u8bb8\u91cd\u590d\u5143\u7d20\u7684`muliset`\u6765\u5b9e\u73b0\u3002  \n\u8fd9\u4e2a\u4e1c\u897f\u5728\u8003\u573a\u4e0a\u662f\u6551\u547d\u7684\uff0c\u5982\u679c\u4f60\u5269\u4e0b\u7684\u65f6\u95f4\u4e0d\u591a\u4e86\uff0c\u90a3\u4e48\u662f\u5728\u4e0d\u884c\u5c31\u7528\u4ee5\u4e0a\u7684\u529e\u6cd5\u6765\u504f\u5206\u3002  \n\u5206\u6790\u4e00\u4e0b`vector`\u548c`set`\u548c`muliset`\u7684\u4f18\u7f3a\u70b9\u3002  \n\u4e0d\u5b9a\u957f\u6570\u7ec4`vector`\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u7684\u7b80\u5355\uff0c\u53ea\u8981\u4f60\u719f\u6089\u6307\u9488\u548c`vector`\u7684\u6b63\u5e38\u64cd\u4f5c\u3002  \n\u4f46\u662fvector\u5f88\u5bb9\u6613\u6ea2\u51fa\uff0c\u957f\u5ea6\u4e00\u5927\uff0c\u5f88\u6709\u53ef\u80fd\u5c31RE\uff0c\u90a3\u4e2a\u65f6\u5019\u60f3\u54ed\u90fd\u6ca1\u65f6\u95f4\u54ed\u4e86\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n;\nvector<int>v;\nint main() {\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) {\n        int op=0,x=0;\n        scanf(\"%d%d\",&op,&x);\n        if(op==1) v.insert(upper_bound(v.begin(),v.end(),x),x);\n        else if(op==2) v.erase(lower_bound(v.begin(),v.end(),x));\n        else if(op==3) printf(\"%d\\n\",lower_bound(v.begin(),v.end(),x)-v.begin()+1);\n        else if(op==4) printf(\"%d\\n\",v[x-1]);\n        else if(op==5) printf(\"%d\\n\",*--lower_bound(v.begin(),v.end(),x));\n        else if(op==6) printf(\"%d\\n\",*upper_bound(v.begin(),v.end(),x));\n    }\n    return 0;\n}\n```\n\u5b9e\u73b0\u975e\u5e38\u7684\u7b80\u5355\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u6307\u9488\u7684\u53d8\u6362\u3002  \n\u4f46\u662f\u8fd9\u4e00\u9053\u9898\u76ee\u6211\u4eec\u7528vector\uff0c\u849f\u84bb\u6211\u7528\u4e86\u5dee\u4e0d\u591a5s\u624d\u8dd1\u51fa\u5927\u7684\u6570\u636e\u3002\uff08\u6570\u636e\u4eceLOJ\u4e0a\u6765\u7684\uff09  \n\u6240\u4ee5`set`\u548c`muliset`\u53ef\u4ee5\u66f4\u52a0\u5feb\u901f\u7684\u5b8c\u6210\u6211\u4eec\u7684\u4efb\u52a1\u3002  \n`set`\u5dee\u522b\u5e76\u4e0d\u662f\u592a\u5927\uff0c\u4e00\u4e2a\u53ef\u4ee5\u5b9e\u73b0\u6ca1\u6709\u91cd\u590d\u7684\uff0c\u4e00\u4e2a\u5b9e\u73b0\u6709\u91cd\u590d\u7684\u3002  \n\u6765\u81eachhokmah\u7684\u5b9e\u6d4b\uff0cset\u6bd4muliset\u8981\u5feb\u3002  \n\u6240\u4ee5\u603b\u7ed3\u4e00\u4e0b\uff1a\n* vector\u597d\u5199\uff0c\u4f46\u662f\u5bb9\u6613\u9519\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u3002\n* set\u53ef\u4ee5\u5b9e\u73b0\u65e0\u91cd\u590d\uff0c\u63a8\u8350\u4f7f\u7528\u3002\n* muliset\u53ef\u4ee5\u5b9e\u73b0\u6709\u91cd\u590d\uff0c\u63a8\u8350\u4f7f\u7528\u3002\n\n-----\n# \u505a\u6cd54\u6b63\u5e38\u7684\u5e73\u8861\u6811\n\u8fd9\u91cc\u4ee5treap\u4e3a\u4f8b\u3002  \n\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0btreap\uff0ctreap\u662ftree\u548cheap\u7684\u7ed3\u5408\uff0c\u6bcf\u4e00\u6b21\u6211\u4eec\u9700\u8981\u7528\u81ea\u5df1\u7ed9\u8282\u70b9\u9644\u52a0\u7684`rd`\u503c\u6765\u7ef4\u62a4\u5e73\u8861\u6811\u7684\u5e73\u8861\u6027\u3002    \n\u4ee3\u7801\u5b9e\u73b0\u975e\u5e38\u7684\u7b80\u5355\uff0c\u4f46\u662f\u6211\u6253\u7684\u6bd4\u8f83\u5197\u957f\u3002  \n\u90a3\u4e48\u518d\u56de\u5230\u8fd9\u4e00\u9053\u9898\u76ee\uff0c\u5982\u679c\u6211\u4eec\u53ea\u9700\u8981\u5efa\u7acb\u4e24\u4e2a\u5e73\u8861\u6811\u3002\uff08\u5176\u5b9e\u4e00\u68f5\u5c31\u8db3\u591f\u4e86\uff0c\u56e0\u4e3a\u4e00\u68f5\u6709\u8282\u70b9\u7684\u65f6\u5019\u53e6\u5916\u4e00\u68f5\u4e00\u5b9a\u662f\u6ca1\u6709\u8282\u70b9\u7684\u3002\uff09  \n\u6bcf\u4e00\u6b21\u627e\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u5224\u65ad\u66f4\u52a0\u63a5\u8fd1\u7684\u90a3\u4e00\u4e2a\uff0c\u66f4\u65b0\u7b54\u6848\uff0c\u5e76\u5220\u9664\u524d\u9a71\u6216\u8005\u662f\u540e\u7ee7\u3002\n\u5982\u679c\u6811\u4e3a\u7a7a\u6216\u8005\u662f\u5df1\u65b9\u7684\u6811\u6709\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u63d2\u5165\u3002\n```cpp\n#include <bits/stdc++.h>\n#define N 80005\n#define mod 1000000\n#define ll long long \n#define inf 0x3f3f3f3f\nusing namespace std;\ntemplate <typename T>\ninline void read(T &x) {\n    x = 0; T fl = 1; char ch = 0;\n    for (; ch < '0' || ch > '9'; ch = getchar())\n        if (ch == '-') fl = -1;\n    for (; ch >= '0' && ch <= '9'; ch = getchar())\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n    x *= fl;\n}\nstruct Treap {\n    int tot, rt;\n    struct Node {\n        int cnt, sz, rd, ch[2], val;\n        void Init (int Val) { val = Val; ch[0] = ch[1] = 0; cnt = sz = 1; rd = rand() % 100; } \n    } tr[N];\n    Treap() { tot = 0; memset(tr, 0, sizeof(tr)); }\n    void pushup (int nod) { tr[nod].sz = tr[tr[nod].ch[0]].sz + tr[tr[nod].ch[1]].sz + tr[nod].cnt; }\n    void rotate(int &nod, int d) {\n        int k = tr[nod].ch[d ^ 1]; tr[nod].ch[d ^ 1] = tr[k].ch[d]; tr[k].ch[d] = nod;\n        pushup(nod); pushup(k); nod = k;\n    }\n    void ins(int &nod, int val) {\n        if (!nod) nod = ++ tot, tr[nod].Init(val);\n        else if (val == tr[nod].val) tr[nod].sz ++, tr[nod].cnt ++;\n        else {\n            int d = (val > tr[nod].val);\n            ins(tr[nod].ch[d], val); \n            if (tr[nod].rd < tr[tr[nod].ch[d]].rd) rotate(nod, d ^ 1);\n            pushup(nod);\n        }\n    }\n    void del(int &nod, int val) {\n        if (!nod) return;\n        if (val < tr[nod].val) del(tr[nod].ch[0], val);\n        else if (val > tr[nod].val) del(tr[nod].ch[1], val);\n        else {\n            if (!tr[nod].ch[0] && !tr[nod].ch[1]) {tr[nod].sz --, tr[nod].cnt --; if (tr[nod].cnt == 0) nod = 0;}\n            else if (tr[nod].ch[0] && !tr[nod].ch[1]) { rotate(nod, 1) ; del(tr[nod].ch[1], val);} \n            else if (!tr[nod].ch[0] && tr[nod].ch[1]) { rotate(nod, 0); del(tr[nod].ch[0], val); }\n            else {\n                int d = tr[tr[nod].ch[0]].rd > tr[tr[nod].ch[1]].rd;\n                rotate(nod, d); del(tr[nod].ch[d], val);\n            }\n        }\n    }\n    int pre(int nod, int val) {\n        if (!nod) return -inf;\n        if (tr[nod].val > val) return pre(tr[nod].ch[0], val);\n        else return max(tr[nod].val , pre(tr[nod].ch[1], val));\n    } \n    int suc(int nod, int val) {\n        if (!nod ) return inf;\n        if (tr[nod].val < val) return suc(tr[nod].ch[1], val);\n        else return min(tr[nod].val, suc(tr[nod].ch[0], val));\n    }\n}Pet, Cus;\nint n;\nll ans = 0ll;\nint main () {\n    srand(19260817);\n    read(n);\n    while (n --) {\n        int opt, x; read(opt); read(x);\n        if (opt == 0) { // Pet\n            if (Cus.rt == 0) Pet.ins(Pet.rt, x);\n            else {\n                int lst = Cus.pre(Cus.rt, x), nxt = Cus.suc(Cus.rt, x);\n                if (abs(x - lst) <= abs(nxt - x))  { Cus.del(Cus.rt, lst); ans = (ans + 1ll * abs(x - lst)) % mod; }\n                else { Cus.del(Cus.rt, nxt); ans = (ans + 1ll * abs(nxt - x)) % mod;}\n            }\n        }\n        else { // Customer\n            if (Pet.rt == 0) Cus.ins(Cus.rt, x);\n            else {\n                int lst = Pet.pre(Pet.rt, x), nxt = Pet.suc(Pet.rt, x);\n                if (abs(x - lst) <= abs(nxt - x))  { Pet.del(Pet.rt, lst); ans = (ans + 1ll * abs(x - lst)) % mod; }\n                else { Pet.del(Pet.rt, nxt); ans = (ans + 1ll * abs(nxt - x)) % mod;}\n            }\n        }\n    }\n    printf(\"%lld\\n\", ans % mod);\n    return 0;\n}\n```",
        "postTime": 1554192217,
        "uid": 35567,
        "name": "Ayers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u9898\u89e3\u90fd\u662fSTL\u548cSplay\u7684\u3002\n\n\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4e0d\u662f\u5f88\u5e38\u89c1\n\nAVL Tree\uff0c\u662f\u5e73\u8861\u6811\u7684\u4e00\u79cd\uff0c\u4e5f\u662f\u652f\u6301\u5de6\u65cb\u548c\u53f3\u65cb\u7684\u64cd\u4f5c\u3002\n\n\u6bcf\u4e2a\u8282\u70b9\u6709\u4e2a\u5e73\u8861\u56e0\u5b50`balance_factor` \u4ee3\u7801\u91cc\u5199\u7684\u662f`bf`\uff0c\n\n$$bf = depth_{lson} - depth_{rson}$$\n\n\u5f53`bf`\u7684\u7edd\u5bf9\u503c\u8d85\u8fc71\u7684\u65f6\u5019\u5c31\u5f00\u59cb\u65cb\u8f6c\u3002\u5927\u81f4\u662f\u8fd9\u4e2a\u601d\u8def\uff0c\u5404\u4e2a\u51fd\u6570\u770b\u540d\u5b57\u4e5f\u633a\u5bb9\u6613\u7406\u89e3\u7684\n\n\u5f53\u5e74\u81ea\u5df1\u6570\u636e\u7ed3\u6784\u8bfe\u4e0a\u5b8c\u95f2\u6765\u65e0\u4e8b\u6572\u4e86\u4e00\u53d1\uff0c\u987a\u624b\u4e00\u4ea4\n\n```c++\n//poj3481 cww97\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#define INF 0xfffffff\n#define BASE 1000000\nusing namespace std;\nint ans=0;\nstruct Node{\n    int x,bf,h;//bf=balance factor,h=height\n    Node *l,*r;\n};\n\nclass AVLTree{\npublic:\n    void Init() { rt = NULL; }\n    int H(Node *T){return (T==NULL)?0:T->h;}\n    int BF(Node *l,Node *r){//get balance factor\n        if (NULL==l && NULL==r) return 0;\n        else if (NULL == l) return -r->h;\n        else if (NULL == r) return  l->h;\n        return l->h - r->h;\n    }\n\n    Node *Lrorate(Node *a){//left rorate\n        Node *b;\n        b=a->r;\n        a->r=b->l;\n        b->l=a;\n        a->h=max(H(a->l),H(a->r)) + 1;\n        b->h=max(H(b->l),H(b->r)) + 1;\n        a->bf=BF(a->l,a->r);\n        b->bf=BF(b->l,b->r);\n        return b;\n    }\n    Node *Rrorate(Node *a){//right rorate\n        Node *b;\n        b=a->l;\n        a->l=b->r;\n        b->r=a;\n        a->h=max(H(a->l),H(a->r)) + 1;\n        b->h=max(H(b->l),H(b->r)) + 1;\n        a->bf=BF(a->l,a->r);\n        b->bf=BF(b->l,b->r);\n        return b;\n    }\n    Node *LRrorate(Node *a){//left then right\n        a->l = Lrorate(a->l);\n        Node *c;\n        c=Rrorate(a);\n        return c;\n    }\n    Node *RLrorate(Node *a){//right then left\n        a->r=Rrorate(a->r);\n        Node *c;\n        c=Lrorate(a);\n        return c;\n    }\n\n    void Insert(int x){_Insert(rt,x);}\n    void _Insert (Node *&T,int x){\n        if (NULL==T){\n            T=(Node*)malloc(sizeof(Node));\n            T->x=x;\n            T->bf=0;T->h=1;\n            T->l=T->r=NULL;\n            return ;\n        }\n        if      (x < T->x) _Insert(T->l,x);\n        else if (x > T->x) _Insert(T->r,x);\n        else return ; //error :the same y\n\n        T->h=max(H(T->l),H(T->r))+1;//maintain\n        T->bf=BF(T->l,T->r);\n\n        if (T->bf > 1 || T->bf < -1){//not balanced\n            if      (T->bf > 0 && T->l->bf > 0)T=Rrorate(T);\n            else if (T->bf < 0 && T->r->bf < 0)T=Lrorate(T);\n            else if (T->bf > 0 && T->l->bf < 0)T=LRrorate(T);\n            else if (T->bf < 0 && T->r->bf > 0)T=RLrorate(T);\n        }\n    }\n\n    void GetPet(int x){\n        if (NULL==rt){return ;}\n        int small=0,large=INF;\n        //printf(\"x=%d\\n\",x);\n        int flag;\n        if (Find(rt,x,small,large)){\n            printf(\"find %d\\n\",x);\n            _Delete(rt,x);\n        }else if (small==0)flag=1;\n        else if (large==INF)flag=0;\n        else if (large-x<x-small)flag=1;\n        else flag=0;\n\n        if (!flag){//choose large\n            //printf(\"!%d~%d\\n\",small,large);\n            _Delete(rt,small);\n            ans=(ans+x-small)%BASE;\n        }else {\n            //printf(\"%d~!%d\\n\",small,large);\n            _Delete(rt,large);\n            ans=(ans+large-x)%BASE;\n        }\n        //printf(\"ans=%d\\n\",ans);\n    }\n    bool Find(Node *T,int x,int &small,int &large){\n        if (NULL==T)return 0;\n        if (x==T->x)return 1;\n        if (x<T->x){\n            large=min(large,T->x);\n            return Find(T->l,x,small,large);\n        }else{\n            small=max(small,T->x);\n            return Find(T->r,x,small,large);\n        }\n    }\n    void _Delete(Node *&T,int x){\n        if (NULL==T)return ;\n        if       (x < T->x){//y at left\n            _Delete(T->l,x);\n            T->bf=BF(T->l,T->r);\n            if (T->bf<-1){\n                if (1==T->r->bf)T=RLrorate(T);\n                else T=Lrorate(T);//bf==0 or -1\n            }\n        }else if (x > T->x){//y at right\n            _Delete(T->r,x);\n            T->bf=BF(T->l,T->r);\n            if (T->bf>1){\n                if (-1==T->l->bf)T=LRrorate(T);\n                else T=Rrorate(T);//bf==0 or 1\n            }\n        }else {//here is x\n            if (T->l&&T->r){//left &&right\n                Node *t=T->l;\n                while (t->r)t=t->r;\n                T->x=t->x;\n                _Delete(T->l,t->x);\n                T->bf=BF(T->l,T->r);\n                if (T->bf<-1){\n                    if (1==T->r->bf)T=RLrorate(T);\n                    else T=Lrorate(T);//bf==0 or -1\n                }\n            }else {//left || right\n                Node *t=T;\n                if (T->l)T=T->l;\n                else if(T->r)T=T->r;\n                else {free(T);T=NULL;}\n                if (T)free(t);\n            }\n        }\n    }\n\n    //Debug,you will not need it at this problem\n    void show(){InOrder(rt);puts(\"EndShow\");}\n    void InOrder(Node *T){//print l rt r\n        if (NULL==T)return ;\n        InOrder(T->l);\n        printf(\"%d \",T->x);\n        InOrder(T->r);\n    }\n    void Free(){FreeTree(rt);}\n    void FreeTree(Node *T){\n        if (NULL==T)return ;\n        FreeTree(T->l);\n        FreeTree(T->r);\n        free(T);\n    }\n\nprivate:\n    Node *rt;//root\n};\n\nint main(){\n    int n,x,op,a=0,b=0;\n    scanf(\"%d\",&n);\n    AVLTree T; T.Init();\n    for (;n--;){\n        scanf(\"%d%d\",&op,&x);\n        if (op==0){\n            a++;\n            if (a>b)T.Insert(x);\n            else T.GetPet(x);\n        }else{\n            b++;\n            if (a<b)T.Insert(x);\n            else T.GetPet(x);\n        }\n    }\n    printf(\"%d\\n\",ans%BASE);\n    T.Free();\n    return 0;\n}\n```",
        "postTime": 1541264045,
        "uid": 4741,
        "name": "cww970329",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011AVL Tree"
    },
    {
        "content": "splay\u505a\u6cd5\uff0c\u5e26\u5783\u573e\u56de\u6536\uff0c\u4ee5\u53ca100\u884c\u4ee5\u5185\u7684\u4ee3\u7801\uff0c\n\n\u8bdd\u8bf4\u8fd9\u73a9\u610f\u771f\u7684\u96be\u641e\uff0c\u4f1a\u548c\u6b63\u5e38\u7684erase\u4ea7\u751f\u5947\u5999\u7684\u53cd\u5e94\uff0c\u5f15\u8d77\u6b7b\u5faa\u73af\u4e4b\u7c7b\u7684\u3002\u3002\u3002\n\n\u7b80\u5355\u8bf4\u4e00\u4e0b\u57fa\u672c\u64cd\u4f5c\uff0c\n\n\u65cb\u8f6c\uff0c\u5de6\u53f3\u9009\u4e8c\u5408\u4e00\uff0c\u66f4\u65393\u5bf9\u7236\u5b50\u5173\u7cfb\n\nsplay\uff0c\u53ea\u6709\u65cb\u8f6c\u5230\u6839\uff0c\n\ninsert\uff0cbst\u63d2\u5165+splay\n\nerase\uff0c\u627e\u524d\u9a71\u540e\u7ee7\u5e76\u540c\u65f6splay\uff0c\n\n\u7136\u540e\u88ab\u5220\u9664\u8282\u70b9\u4e0d\u4f1a\u51fa\u73b0\u53cc\u5b50\u975e\u7a7a\uff0c\u5c31\u53ef\u505a\u4e86\n\nrelease\u548creuse\uff0c\u7528\u4e00\u4e2a\u7c7b\u4f3c\u6808\u7684\u73a9\u610f\u6765\u7ef4\u62a4\u88ab\u5220\u9664\u8282\u70b9\u7684\u7f16\u53f7\n\n\u7136\u540erelease\u548cerase\u4f1a\u4ea7\u751f\u5947\u5999\u7684\u51b2\u7a81\uff0c\u6d17\u6389\u4e0d\u8be5\u6d17\u7684\u4e1c\u897f\uff0c\n\n\u5199\u7684\u65f6\u5019\u5c0f\u5fc3\u4e00\u70b9\n\n\u4e0a\u4ee3\u7801~\n\n\n```cpp\n#include<cstdio>\n#include<cmath>\nusing namespace std;\nint n;int nowtype[2];int res;//nowtype0\u603b\u5ba0\u7269\u4e2a\u6570\uff0cnowtype1\u603b\u4eba\u7c7b\u4e2a\u6570\nstruct splaytree\n{\n    int s[10010][2];int fa[10010];int val[10010];int mem[10010];\n    int root;int size;int head;\n    inline int get_child(int x)//\u8fd4\u56de\u8be5\u8282\u70b9\u7684\u7f16\u53f7\n    {\n        return s[fa[x]][1]==x;\n    }\n    inline void release(int p)//\u5783\u573e\u56de\u6536\uff0c\u4f46\u662f\u6ce8\u610f\u7b2c\u4e09\u53e5\u662f\u6709\u95ee\u9898\u7684\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u6709\u5b69\u5b50\uff0c\u5c31\u4f1a\u628a\u4ed6\u7236\u8282\u70b9\u7684\u5b69\u5b50\u6307\u9488\u65ad\u6389\n    {\n        mem[p]=head;head=p;\n        s[fa[p]][get_child(p)]=0;fa[p]=0;\n        s[p][0]=0;s[p][1]=0;return;\n    }\n    inline int reuse()//\u56de\u6536\n    {\n        if(head==0)return ++size;\n        else\n        {\n            int res=head;head=mem[head];return res;\n        }\n    }\n    inline int successor(int x)//\u4e00\u884c\u627e\u540e\u7ee7~\n    {\n        int q=0;for(int p=root;p;q=(x<val[p])?p:q,p=(x<val[p])?s[p][0]:s[p][1]);return q;\n    }\n    inline int predecessor(int x)//\u4e00\u884c\u627e\u524d\u9a71~\n    {\n        int q=0;for(int p=root;p;q=(x<=val[p])?q:p,p=(x<=val[p])?s[p][0]:s[p][1]);return q;\n    }\n    inline void rotate(int x)//\u4e8c\u5408\u4e00\u65cb\u8f6c\n    {\n        int d=fa[x];int p=get_child(x);\n        s[d][p]=s[x][p^1],fa[s[x][p^1]]=d,s[x][p^1]=d;\n        s[fa[d]][get_child(d)]=x,fa[x]=fa[d],fa[d]=x;\n        return;\n    }\n    inline void splay(int x)//splay\u5230\u6839\n    {\n        while(fa[x]!=0)\n        {\n            if(fa[fa[x]]!=0)\n            {    \n                if(get_child(fa[x])^get_child(x))rotate(x);//zig-zag\n                else rotate(fa[x]);//zig-zig\n            }rotate(x);\n        }return;\n    }\n    void insert(int x)\n    {\n        int q=0;for(int p=root;p;q=p,p=(x<val[p])?s[p][0]:s[p][1]);int p=reuse();//\u4e00\u884c\u67e5\u627e\n        val[p]=x;s[q][x>=val[q]]=p;fa[p]=q;splay(p);root=p;return;//\u4e00\u884c\u63d2\u5165\uff0c\u8bb0\u5f97\u66f4\u6539\u6839\n    }\n    inline void bst_del(int x)\n    {\n        if(s[x][0])s[fa[x]][get_child(x)]=s[x][0],fa[s[x][0]]=fa[x],fa[x]=0;//\u5220\u9664\u65f6\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u6700\u540e\u4e00\u53e5\uff0c\u5b83\u53ef\u4ee5\u4f7frelease\u7684\u7b2c\u4e00\u53e5\u65e0\u6548\n        if(s[x][1])s[fa[x]][get_child(x)]=s[x][1],fa[s[x][1]]=fa[x],fa[x]=0;//\u4ece\u800c\u4fdd\u8bc1\u5b83\u7956\u7236\u7684\u5b69\u5b50\u6307\u9488\u4e0d\u88ab\u6d17\u6389\n        release(x);return;//\u5982\u679c\u6ca1\u6709\u5b69\u5b50\u7684\u8bdd\u8ba9\u5c31\u5b83\u653e\u98de\u81ea\u6211\u597d\u4e86\n    }\n    void erase(int x)\n    {\n        int q1=successor(val[x]);int q2=predecessor(val[x]);\n        splay(q2);splay(q1);root=q1;bst_del(x);return;//\u627e\u524d\u9a71\uff0c\u627e\u540e\u7ee7\uff0csplay\uff0c\u641e\u5b9a~\uff0c\u540c\u6837\u4e0d\u8981\u5fd8\u8bb0\u66f4\u6539\u6839\n    }\n    splaytree(){this->insert(0x3f3f3f3f),this->insert(-0x3f3f3f3f);}//\u6784\u9020\u51fd\u6570\uff0c\u63d2\u5165\u54e8\u5175\n}spt;\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n    {\n        int type;int val;\n        scanf(\"%d%d\",&type,&val);\n        if(nowtype[type]>=nowtype[type^1])spt.insert(val);//\u5982\u679c\u8fd9\u4e2a\u4e1c\u897f\u591a\u5c31\u63d2\u5165\u8fd9\u4e2a\u4e1c\u897f\n        else \n        {\n            int q1=spt.successor(val);int q2=spt.predecessor(val);int p;\n            if(spt.val[q1]-val>=val-spt.val[q2])p=q2;//\u6709\u4e86\u524d\u9a71\u548c\u540e\u7ee7\u5c31\u4e0d\u7528\u653e\u7edd\u5bf9\u503c\u4e86\n            else p=q1;res+=abs(spt.val[p]-val);spt.erase(p);res%=1000000;\n        }nowtype[type]++;//\u8fd9\u4e2a\u4e1c\u897f\u4e2a\u6570++\n    }\n    printf(\"%d\",res);\n        return 0;//\u62dc\u62dc\u7a0b\u5e8f~\n}\n\n```",
        "postTime": 1511669937,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "### Treap\u505a\u6cd5\n\n\u8bbe\u7acb\u4e00\u4e2aflag\u4ee5\u8868\u793a\u5f53\u524d\u662f\u72d7\u7684treap\u8fd8\u662f\u4eba\u7684treap\uff0c\u5982\u679ctreap\u88ab\u6e05\u7a7a\u5c31\u66f4\u6539flag\u503c\n\n\u5176\u4f59\u7684\u5c31\u662f\u88f8\u7684treap\u64cd\u4f5c\uff0c\u8fd8\u6ca1\u6709\u7279\u503c\u70b9\u76f8\u540c\u7684\u70b9\uff0c\u66f4\u7b80\u5355\u3002\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\nint n, root, tot, pre, suc, flag = -1, ans;\nint son[100001][2], size[100001], rnd[100001], w[100001];\ninline void turn(int &k, int x)\n{\n    int t = son[k][x];\n    son[k][x] = son[t][x ^ 1];\n    son[t][x ^ 1] = k;\n    size[t] = size[k];\n    size[k] = size[son[k][0]] + size[son[k][1]] + 1;\n    k = t;\n}\ninline void insert(int &k, int x)\n{\n    if(!k)\n    {\n        k = ++tot;\n        w[k] = x;\n        rnd[k] = rand();\n        size[k] = 1;\n        return;\n    }\n    size[k]++;\n    if(w[k] < x)\n    {\n        insert(son[k][1], x);\n        if(rnd[k] > rnd[son[k][1]]) turn(k, 1);\n    }\n    else\n    {\n        insert(son[k][0], x);\n        if(rnd[k] > rnd[son[k][0]]) turn(k, 0);\n    }\n}\ninline void get_pre(int k, int x)\n{\n    if(!k) return;\n    if(w[k] > x) get_pre(son[k][0], x);\n    else pre = k, get_pre(son[k][1], x);\n}\ninline void get_suc(int k, int x)\n{\n    if(!k) return;\n    if(w[k] < x) get_suc(son[k][1], x);\n    else suc = k, get_suc(son[k][0], x);\n}\ninline void del(int &k, int x)\n{\n    if(!k) return;\n    if(w[k] == x)\n    {\n        if(son[k][0] * son[k][1] == 0) k = son[k][0] + son[k][1];\n        else if(rnd[son[k][0]] < rnd[son[k][1]]) turn(k, 0), del(k, x);\n        else turn(k, 1), del(k, x);\n    }\n    else\n    {\n        size[k]--;\n        if(w[k] > x) del(son[k][0], x);\n        else del(son[k][1], x);\n    }\n}\nint main()\n{\n    int i, a, b, x;\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++)\n    {\n        scanf(\"%d %d\", &a, &b);\n        if(flag == a) insert(root, b);\n        else\n        {\n            if(size[root])\n            {\n                pre = 0, get_pre(root, b);\n                suc = 0, get_suc(root, b);\n                if(!pre || !suc) x = pre + suc;\n                else if(b - w[pre] <= w[suc] - b) x = pre;\n                else x = suc;\n                ans = (ans + abs(w[x] - b)) % 1000000;\n                del(root, w[x]);\n            }\n            else flag = a, insert(root, b);\n        }\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n```",
        "postTime": 1492522364,
        "uid": 8220,
        "name": "zht467",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u770b\u5230\u524d\u9a71\u540e\u7ee7\uff0c\u6240\u4ee5\u7b2c\u4e00\uff0c\u5f88\u663e\u7136\u8fd9\u662f\u4e2a\u5e73\u8861\u6811\u88f8\u9898\u5bf9\u5427\u3002\u3002\u3002\n\u7136\u540e\u60f3\u5230fhqtreap\u4ee3\u7801\u91cf\u6bd4\u8f83\u5c0f\u5c31\u5f00\u5199\uff0c\u628a\u677f\u5b50\u6253\u597d\u4e4b\u540e\u7a81\u7136\u53d1\u73b0\u524d\u9a71\u540e\u7ee7\u4e0d\u4e00\u5b9a\u5b58\u5728\n~~\u7136\u540e\u91cd\u5199~~\n\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u53ea\u8981\u4e00\u5f00\u59cb\u52a0\u5165inf\u548c-inf\u5c31\u53ef\u4ee5\u5904\u7406\u8fb9\u754c\u95ee\u9898\u4e86\u3002\u7136\u540e...\u5c31\u662f\u677f\u5b50\u4e86....\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#define R register\n#define MAXN 80000+5\n#define inf 2147483647/2\n#define mod 1000000\n\nint n;\n\nstruct fhq_treap\n{\n\tstruct Node\n\t{\n\t\tint lson,rson,siz,dat,rnd;\n\t}t[MAXN];\n\tint root,tot;\n\t#define ls(x) t[x].lson\n\t#define rs(x) t[x].rson\n\t#define siz(x) t[x].siz\n\t#define v(x) t[x].dat\n\t#define rnd(x) t[x].rnd\n\t\n\tinline int New(int x)\n\t{\n\t\ttot++;\n\t\tv(tot)=x;\n\t\tsiz(tot)=1;\n\t\trnd(tot)=rand();\n\t\treturn tot;\n\t}\n\t\n\tinline void update(int x)\n\t{\n\t\tsiz(x)=siz(ls(x))+siz(rs(x))+1;\n\t}\n\t\n\tinline int merge(int x,int y)\n\t{\n\t\tif(!x||!y) return x|y;\n\t\tif(rnd(x)<rnd(y))\n\t\t{\n\t\t\trs(x)=merge(rs(x),y);\n\t\t\tupdate(x);return x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tls(y)=merge(x,ls(y));\n\t\t\tupdate(y);return y;\n\t\t}\n\t}\n\t\n\tinline void split(int now,int k,int &x,int &y)\n\t{\n\t\tif(!now)\n\t\t{\n\t\t\tx=y=0;\n\t\t\treturn;\n\t\t}\n\t\tif(v(now)<=k)\n\t\t{\n\t\t\tx=now;\n\t\t\tsplit(rs(now),k,rs(now),y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty=now;\n\t\t\tsplit(ls(now),k,x,ls(now));\n\t\t}\n\t\tupdate(now);\n\t\treturn;\n\t}\n\t\n\tinline int kth(int now,int k)\n\t{\n\t\twhile(1)\n\t\t{\n\t\t\tif(k<=siz(ls(now))) now=ls(now);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(k==siz(ls(now))+1) return now;\n\t\t\t\tk=k-(siz(ls(now))+1);\n\t\t\t\tnow=rs(now);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tinline void insert(int x)\n\t{\n\t\tint a,b;\n\t\tsplit(root,x,a,b);\n\t\troot=merge(merge(a,New(x)),b);\n\t}\n\t\n\tinline void del(int x)\n\t{\n\t\tint a,b,c;\n\t\tsplit(root,x,a,c);\n\t\tsplit(a,x-1,a,b);\n\t\tb=merge(ls(b),rs(b));\n\t\troot=merge(merge(a,b),c);\n\t}\n\t\n\tinline int pre(int x)\n\t{\n\t\tint a,b,res;\n\t\tsplit(root,x-1,a,b);\n\t\tres=v(kth(a,siz(a)));\n\t\troot=merge(a,b);\n\t\treturn res;\n\t}\n\t\n\tinline int suc(int x)\n\t{\n\t\tint a,b,res;\n\t\tsplit(root,x,a,b);\n\t\tres=v(kth(b,1));\n\t\troot=merge(a,b);\n\t\treturn res;\n\t}\n\t\n\tinline void build()\n\t{\n\t\tinsert(inf);insert(-inf);\n\t}\n\t\n\tinline int size()\n\t{\n\t\treturn siz(root)-2;\n\t}\n}T1,T2;\n\ninline int get()\n{\n\tchar a=getchar();\n\tint x=0,f=1;\n\tfor(;a>'9'||a<'0';a=getchar()) if(a=='-') f=-1;\n\tfor(;a>='0'&&a<='9';a=getchar()) x=x*10+a-'0';\n\treturn x*f;\n}\n\nint main()\n{\n\tn=get();\n\tT1.build();\n\tT2.build();\n\tR int res=0;\n\tR int a,b,l,r;\n\twhile(n--)\n\t{\n\t\ta=get();b=get();\n\t\tif(a==0)\n\t\t{\n\t\t\tif(T2.size()==0) T1.insert(b);\n\t\t\telse\n\t\t\t{\n\t\t\t\tl=T2.pre(b+1);\n\t\t\t\tr=T2.suc(b-1);\n\t\t\t\tif(b-l<=r-b) \n\t\t\t\t{\n\t\t\t\t\tres+=b-l;res%=mod;\n\t\t\t\t\tT2.del(l);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tres+=r-b;res%=mod;\n\t\t\t\t\tT2.del(r);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(T1.size()==0) T2.insert(b);\n\t\t\telse\n\t\t\t{\n\t\t\t\tl=T1.pre(b+1);\n\t\t\t\tr=T1.suc(b-1);\n\t\t\t\tif(b-l<=r-b) \n\t\t\t\t{\n\t\t\t\t\tres+=b-l;res%=mod;\n\t\t\t\t\tT1.del(l);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tres+=r-b;res%=mod;\n\t\t\t\t\tT1.del(r);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}\n```\n\n\n\u5176\u5b9e\u6211\u89c9\u5f97\u6211\u7801\u98ce\u6d77\u946b(\u273f\u25e1\u203f\u25e1)\n\u4e0d\u8fc7\u4e3a\u4ec0\u4e48\u6211\u7684treap\u8fd9\u4e48\u6162555",
        "postTime": 1578400925,
        "uid": 139012,
        "name": "______OvO______",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \u5e73\u8861\u6811\n## Splay\n\u8fd9\u4e2a\u9898\uff0c\u5f88\u663e\u7136\u662f\u8ba9\u6211\u4eec\u6c42\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u5f53\u7136\u662fSplay\u4e86\u554a\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u5148\u5f00\u4e00\u4e2a\u53d8\u91cf\u6765\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u662f\u5ba0\u7269\u591a\uff0c\u8fd8\u662f\u9886\u517b\u8005\u591a\u3002\n\n\u5ba0\u7269\u591a\u65f6\uff0c\u6765\u5ba0\u7269\u7684\u8bdd\uff0c\u76f4\u63a5\u63d2\u5165\uff1b\u6765\u9886\u517b\u8005\u7684\u8bdd\uff0c\u67e5\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u628a\u8fd1\u7684\u5220\u9664\u4e86\u3002\n\n\u9886\u517b\u8005\u591a\u65f6\u540c\u7406\u3002\n\nSplay\u4e00\u5b9a\u4e0d\u8981\u5199\u9519\u4e86\u554a\uff08\u8c03\u4e86\u4e24\u4e2a\u5c0f\u65f6\uff09\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int mod = 1000000 , inf = 2147483647;\ninline int read()\n{\n    int x = 0 , f = 1;  char ch = getchar();\n    while(ch < '0' || ch > '9') {if(ch == '-')  f = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n    return x * f;\n}\nstruct Splay\n{\n\tstruct node\n\t{\n\t\tnode *ch[2] , *fa;\n\t\tint val , size;\n\t\tnode(node *fa = NULL,int val = 0) : fa(fa) , val(val) {ch[0] = ch[1] = NULL;size = 1;}\n\t\tinline bool isr() {return this == fa -> ch[1];}\n\t\tinline int rk() {return 1 + (ch[0] ? ch[0] -> size : 0);}\n\t\tinline void up() {size = 1 + (ch[0] ? ch[0] -> size : 0) + (ch[1] ? ch[1] -> size : 0);}\n\t}*root;\n\tSplay() {root = NULL;}\n\tinline void rot(node *x)\n\t{\n\t\tbool k = x -> isr();\n\t\tnode *y = x -> fa , *z = y -> fa , *w = x -> ch[!k];\n\t\tif(root == y) root = x;\n\t\telse z -> ch[y -> isr()] = x;\n\t\tx -> fa = z; y -> fa = x;\n\t\tx -> ch[!k] = y; y -> ch[k] = w;\n\t\tif(w) w -> fa = y;\n\t\ty -> up(); x -> up();\n\t}\n\tinline void splay(node *x)\n\t{\n\t\twhile(x != root)\n\t\t{\n\t\t\tif(x -> fa != root) rot(x -> isr() ^ x -> fa -> isr() ? x : x -> fa);\n\t\t\trot(x);\n\t\t}\n\t}\n\tnode *merge(node *x,node *y,node *fa)\n\t{\n\t\tif(x) x -> fa = fa;\n\t\tif(y) y -> fa = fa;\n\t\tif(!x || !y) return x ? x : y;\n\t\treturn x -> ch[1] = merge(x -> ch[1],y,x) , x -> up() , x;\n\t}\n\tinline void insert(int val)\n\t{\n\t\tif(!root) return (void)(root = new node(NULL,val));\n\t\tnode *p = root , *fa = NULL;\n\t\twhile(p)\n\t\t{\n\t\t\tfa = p;\n\t\t\tp = p -> ch[val > p -> val];\n\t\t}\n\t\tp = new node(fa,val);\n\t\tfa -> ch[val > fa -> val] = p;\n\t\tsplay(p);\n\t}\n\tinline void del(int val)\n\t{\n\t\tnode *p = root;\n\t\twhile(p && val != p -> val) p = p -> ch[val > p -> val]; \n\t\tif(!p) return;\n\t\tsplay(p); root = merge(p -> ch[0],p -> ch[1],NULL);\n\t}\n\tinline int pre(int val)\n\t{\n\t\tnode *p = root , *lst = NULL;\n\t\twhile(p)\n\t\t{\n\t\t\tif(val > p -> val) lst = p , p = p -> ch[1];\n\t\t\telse p = p -> ch[0];\n\t\t}\n\t\tif(lst) return splay(lst) , lst -> val;\n\t\treturn -2147483647;\n\t}\n\tinline int nxt(int val)\n\t{\n\t\tnode *p = root , *lst = NULL;\n\t\twhile(p)\n\t\t{\n\t\t\tif(val < p -> val) lst = p , p = p -> ch[0];\n\t\t\telse p = p -> ch[1];\n\t\t}\n\t\tif(lst) return splay(lst) , lst -> val;\n\t\treturn 2147483647;\n\t}\n\tinline bool find(int val)\n\t{\n\t\tnode *p = root;\n\t\twhile(p && val != p -> val) p = p -> ch[val > p -> val];\n\t\tif(p) return 1; return 0;\n\t}\n\tinline void LOL()\n\t{\n\t\tint n = read() , sum = 0 , ans = 0;\n\t\tfor(int i = 1 , opt , x;i <= n;i ++)\n\t\t{\n\t\t\topt = read(); x = read();\n\t\t\tif(opt == 0)\n\t\t\t{\n\t\t\t\tif(sum >= 0) insert(x);\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tint res = pre(x); int tot = nxt(x);\n\t\t\t\t\tif((long long)x - res <= (long long)tot - x) del(res) , ans = (int)(((long long)ans + (long long)x - (long long)res) % (long long)mod);\n\t\t\t\t\telse del(tot) , ans = (int)(((long long)ans + (long long)(tot - x)) % (long long)mod);\n\t\t\t\t}\n\t\t\t\tsum ++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(sum <= 0) insert(x);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint res = pre(x); int tot = nxt(x);\n\t\t\t\t\tif((long long)x - res <= (long long)tot - x) del(res) , ans = (int)(((long long)ans + (long long)x - (long long)res) % (long long)mod);\n\t\t\t\t\telse del(tot) , ans = (int)(((long long)ans + (long long)(tot - x)) % (long long)mod);\n\t\t\t\t}\n\t\t\t\tsum --;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",ans % mod);\n\t}\n}DNF;\nint main()\n{\n\tDNF.LOL();\n\treturn 0;\n}\n```\n",
        "postTime": 1569375997,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u6211\u540c\u673a\u623f\u5927\u4f6c\u53eb\u6211\u5199\u7684\uff0c\u6211\u4e00\u770b\u8fd9\u9053\u9898\uff0c\u54a6\uff1f\u8fd9\u4e0d\u662f\u5e26\u65cbtreap\u7684\u6a21\u677f\u9898\u5417\uff1f\n\n\u7136\u540e\uff0c\u6211\u5c31\u5f00\u59cb\u4e86\u6211\u7684\u8868\u6f14\uff0c\u539f\u672c\u6211\u662f\u6253\u7b97\u5efa\u4e24\u68f5\u6811\u76f4\u63a5\u9876\u8fc7\u53bb\u7684\uff0c\u7ed3\u679c\u5199\u7740\u5199\u7740\u81ea\u5df1\u6655\u4e86\uff0c~~\u5927\u5bb6\u53ef\u4ee5\u8bd5\u8bd5\uff0c\u86ee\u723d\u7684~~\u5478\uff0c\u5927\u5bb6\u524d\u5f80\u522b\u5b66\u6211\uff1b\n\n\u597d\u4e86\uff0c\u4e0b\u9762\u8bb2\u6b63\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e\u540c\u4e00\u65f6\u523b\u53ea\u4f1a\u6709\u4eba\u6216\u8005\u72d7\u5355\u72ec\u5269\u4e0b\uff1b\u4e0d\u7136\u80af\u5b9a\u4f1a\u9886\u8d70\uff0c\u6709\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u9700\u8981\u5728\u6709\u4e1c\u897f\u6765\u7684\u65f6\u5019\uff0c\u5224\u5b9a\u4e00\u4e0b\u4ed6\u662f\u5426\u548c\u524d\u9762\u6765\u7684\u4e00\u6837\uff0c\u4e00\u6837\u5c31\u63d2\u5230\u6811\u91cc\u53bb\uff0c\u5426\u5219\u5c31\u53bb\u6811\u91cc\u627e\u524d\u9a71\u548c\u540e\u9a71\u7136\u540e\u6bd4\u8f83\u5373\u53ef\uff0c\u76f8\u4fe1\u5404\u4f4d\u5927\u4f6c\u90fd\u61c2\uff0c\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\uff1b\u5bf9\u4e86\uff0c\u8bb0\u5f97\u5220\u9664\uff0c\u6211\u7edd\u5bf9\u4e0d\u662f\u9519\u4e86\u624d\u53d1\u73b0\u7684\uff1b\n\n\u7136\u540e\uff0c\u63d2\u5165\uff0c\u65cb\u8f6c\uff0c\u5220\u9664\uff0c\u524d\u9a71\uff0c\u540e\u9a71\uff0cnice\uff1b\n\n\u6211\uff1a\u5927\u4f6c\uff0c\u6211\u8981A\u4e86\uff0chiahiahia\uff1b\n\n\u5927\u4f6c\uff1ainf\u5f00\u5927\u70b9\u5427\uff0c\u5c0f\u5fc3\u88ab\u5361\uff1b\n\n\u6211\uff1a\u4eca\u5929\uff0c\u6211XXX\u8981\u662f\u88ab\u5361inf\u5927\u5c0f\uff1b\u6211\u5f53\u573a\u628a\u8fd9\u4e2a\u5c4f\u5e55\u5403\u6389\uff01\uff01\uff01;\n\n70\u5206 WA\uff1b\n\n\u54b3\u54b3\uff1b\u9ed8\u9ed8\u52a0\u5927inf\uff1b\u7136\u540e\u6211\u4eec\u5c31\u5b8c\u7f8eA\u4e86\u6b64\u9898\uff1b\n## \u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=80005;\nconst int mod=1000000;\nconst int inf=1e9;\nint n,ans,a,b,R,sum,num[N];\nint ch[N][2],size[N],val[N],rd[N];\nvoid rotate(int &q,int d)\n{\n\tint k=ch[q][d];\n\tch[q][d]=ch[k][d^1];\n\tch[k][d^1]=q;\n\tsize[k]=size[q];\n\tsize[q]=size[ch[q][0]]+size[ch[q][1]]+1;\n\tq=k;\n}\nvoid ins(int &q,int x)\n{\n\tif(!q)\n\t{\n\t\tq=++sum;\n\t\tsize[q]=1;val[q]=x;\n\t\trd[q]=rand(); return;\n\t}\n\tsize[q]++;\n\tif(val[q]<x)\n\t{\n\t\tins(ch[q][1],x);\n\t\tif(rd[q]>rd[ch[q][1]]) rotate(q,1);\n\t}\n\telse\n\t{\n\t\tins(ch[q][0],x);\n\t\tif(rd[q]>rd[ch[q][0]]) rotate(q,0);\n    }\n}\nvoid del(int &q,int x)\n{\n\tif(!q) return;\n\tif(val[q]==x)\n\t{\n\t\tif(ch[q][0]==0||ch[q][1]==0) q=ch[q][0]+ch[q][1];\n\t\telse if(rd[ch[q][0]]<rd[ch[q][1]]) rotate(q,0),del(q,x);\n\t\telse rotate(q,1),del(q,x);\n\t}\n\telse\n\t{\n\t\tsize[q]--;\n\t\tif(val[q]>x) del(ch[q][0],x);\n\t\telse del(ch[q][1],x);\n\t}\n}\nint qq(int q,int x)\n{\n\tif(!q) return -inf;\n\tif(val[q]>x) return qq(ch[q][0],x);\n\telse return max(val[q],qq(ch[q][1],x));\n}\nint hq(int q,int x)\n{\n\tif(!q) return inf;\n\tif(val[q]<x) return hq(ch[q][1],x);\n\telse return min(val[q],hq(ch[q][0],x));\n}\nint main()\n{\n\tscanf(\"%d\",&n);int c=-1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tif(c==a) ins(R,b);\n\t\telse if(size[R]){\n\t\t\tint hhh=qq(R,b),ggg=hq(R,b);\n\t\t\tif(b-hhh<=ggg-b) ans=(ans+b-hhh)%mod,del(R,hhh);\n\t\t\telse ans=(ans+ggg-b)%mod,del(R,ggg);\n\t\t}\n\t\telse c=a,ins(R,b);\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\u4ee3\u7801\u8f83\u4e11\uff0c\u8bf7\u5404\u4f4d\u5927\u4f6c\u89c1\u8c05\uff1b\n\n\u5b8c\u7ed3\u6492\u82b1   \u03c6(>\u03c9<*) \n",
        "postTime": 1566192703,
        "uid": 203867,
        "name": "\u82cf\u5e55\u5bd2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "### \u770b\u89c1\u6ca1\u6709\u75282\u4e2aSPLAY\u7684\u9898\u89e3\uff0c\u4e8e\u662f\u6211\u53c8\u6765\u6c34\u4e00\u6ce2rp\n\n**\u6b63\u6587\uff1a**\n\n\u89e3\u9898\u601d\u8def\uff1a\uff08\u8001\u5b9e\u8bf4\u5b8c\u5168\u6ca1\u6709\u7d2b\u9898\u96be\u5ea6\u3002\u3002\u3002\uff09\n\n1. \u9898\u5e72\uff1a\n\t```\n\t\u76ee\u524d\u672a\u88ab\u9886\u517b\u7684\u5ba0\u7269\u4e2d\u7279\u70b9\u503c\u6700\u63a5\u8fd1a\u7684\u4e00\u53ea\u5ba0\u7269\n\t\u90a3\u4e2a\u5e0c\u671b\u88ab\u9886\u517b\u5ba0\u7269\u7684\u7279\u70b9\u503c\u6700\u63a5\u8fd1\u8be5\u5ba0\u7269\u7279\u70b9\u503c\u7684\u9886\u517b\u8005\n\t```\n\t\u660e\u663e\u7684\u63d0\u793a\u4e86\u8981\u627e\u524d\u9a71\u548c\u540e\u7ee7\u4e86qwq\n2. \u5206\u6790\uff1a\n\n    \u5408\u7406\u6027\uff1a\u6bcf\u6b21\u5ba0\u7269\u4e0e\u9886\u517b\u8005\u5339\u914d\u5747\u4e0e\u524d\u9762\u63d2\u5165\u6709\u5173\uff0c\u82e5\u4f7f\u5176\u6709\u5e8f\uff08\u5e73\u8861\u6811\uff09\uff0c\u5373\u53ef\u67e5\u627e\u3002\uff08\u6bd5\u7adf\u672a\u8bf4\u6700\u4f73\u5339\u914d\uff0c\u4e0d\u7136\u4f30\u8ba1\u8981dp\u5566\uff09\n    \n3. \u7b97\u6cd5\uff1a\u5e73\u8861\u6811\u6216STL\n\n4. PS\uff1a\u5751\u70b9\uff1a\u5f00long long\u3002\u3002\u3002\uff08\u539f\u56e0\uff08\u4e2a\u4eba\u63a8\u6d4b\uff09\uff1a\u4e2d\u95f4\u7384\u5b66\u51fa\u9519\uff0c\u5730\u5740\u4e71\u8df3\uff09\n\n\t\u4e5f\u80fd\u907f\u514d\uff0c\u6bd4\u5982\u5199\u6210\u8fd9\u6837\uff1a\n    a=(a%mod+abs()%mod+mod)%mod;\n    //\u4e25\u8c28\u4fdd\u8bc1\uff0c\u6ca1\u8bd5\uff0c\u4f46\u6211\u89c9\u5f97\u53ef\u4ee5\n\n**Code\uff08\u8be6\u7ec6\u8bb2\u89e3\u5728\u4ee3\u7801\u4e2d\uff09\uff1a**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define ll long long\nconst ll mod=1000000;\nconst ll maxn=8e4+5;//80000\u662f\u591f\u7684\uff0c\u5f53\u7136\u7a7a\u95f4\u9650\u5236\u5927\uff0c\u4e0d\u6015\u5c3120\u4e07\u8d77\u6b65\nll n,op,b,ans;\nll son0[maxn][2],f0[maxn],cnt0[maxn],sz0[maxn],val0[maxn],rt0,ncnt0,tot0;\nll son[maxn][2],f[maxn],cnt[maxn],sz[maxn],val[maxn],rt,ncnt,tot;\n\nil ll read(){\n\tll x=0,f=1;char a=getchar();\n\twhile(!isdigit(a)) {if(a=='-') f=-1;a=getchar();}\n\twhile(isdigit(a)) {x=x*10+a-'0';a=getchar();}\n\treturn x*f;\n}\n\n/*-------------------------*/\n//\u5ba0\u7269\u6811\uff1a\n\nil bool chk0(ll x){\n\treturn son0[f0[x]][1]==x;\n}\n\nil void pushup0(ll x){\n\tsz0[x]=sz0[son0[x][1]]+sz0[son0[x][0]]+cnt0[x];\n}\n\nil void rotate0(ll x){\n\tll y=f0[x],z=f0[y],k=chk0(x),w=son0[x][k^1];\n\tson0[y][k]=w;f0[w]=y;\n\tson0[z][chk0(y)]=x;f0[x]=z;\n\tson0[x][k^1]=y;f0[y]=x;\n\tpushup0(y);pushup0(x);\n}\n\nil void splay0(ll x,ll goal=0){\n\twhile(f0[x]!=goal){\n\t\tll y=f0[x],z=f0[y];\n\t\tif(z!=goal){\n\t\t\tif(chk0(x)==chk0(y)) rotate0(y);\n\t\t\telse rotate0(x);\n\t\t}\n\t\trotate0(x);\n\t}\n\tif(!goal) rt0=x;\n}\n\nil void find0(ll x){\n\tll cur=rt0;\n\twhile(son0[cur][x>val0[cur]]&&x!=val0[cur]) cur=son0[cur][x>val0[cur]];\n\tsplay0(cur);\n}\n\nil void insert0(ll x){\n\tll cur=rt0,p=0;\n\twhile(cur&&x!=val0[cur]){\n\t\tp=cur;\n\t\tcur=son0[cur][x>val0[cur]];\n\t}\n\tif(cur) cnt0[cur]++;\n\telse{\n\t\tcur=++ncnt0;\n\t\tif(p) son0[p][x>val0[p]]=cur;\n\t\tson0[cur][1]=son0[cur][0]=0;\n\t\tval0[cur]=x;f0[cur]=p;\n\t\tsz0[cur]=cnt0[cur]=1;\n\t}\n\tsplay0(cur);\n}\n\nil ll pre0(ll x){\n\tfind0(x);\n\tif(x>val0[rt0]) return rt0;\n\tll cur=son0[rt0][0];\n\twhile(son0[cur][1]) cur=son0[cur][1];\n\treturn cur;\n}\n\nil ll succ0(ll x){\n\tfind0(x);\n\tif(x<val0[rt0]) return rt0;\n\tll cur=son0[rt0][1];\n\twhile(son0[cur][0]) cur=son0[cur][0];\n\treturn cur;\n}\n\nil void remove0(ll x){\n\tll last=pre0(x),nxt=succ0(x);\n\tsplay0(last);splay0(nxt,last);\n\tll del=son0[nxt][0];\n\tif(cnt0[del]>1){\n\t\tcnt0[del]--;\n\t\tsplay0(del);\n\t}\n\telse son0[nxt][0]=0;\n}\n\n/*-------------------------------------*/\n//\u987e\u5ba2\u6811:\n\nil bool chk(ll x){\n\treturn son[f[x]][1]==x;\n}\n\nil void pushup(ll x){\n\tsz[x]=sz[son[x][1]]+sz[son[x][0]]+cnt[x];\n}\n\nil void rotate(ll x){\n\tll y=f[x],z=f[y],k=chk(x),w=son[x][k^1];\n\tson[y][k]=w;f[w]=y;\n\tson[z][chk(y)]=x;f[x]=z;\n\tson[x][k^1]=y;f[y]=x;\n\tpushup(y);pushup(x);\n}\n\nil void splay(ll x,ll goal=0){\n\twhile(f[x]!=goal){\n\t\tll y=f[x],z=f[y];\n\t\tif(z!=goal){\n\t\t\tif(chk(x)==chk(y)) rotate(y);\n\t\t\telse rotate(x);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(!goal) rt=x;\n}\n\nil void find(ll x){\n\tll cur=rt;\n\twhile(son[cur][x>val[cur]]&&x!=val[cur]) cur=son[cur][x>val[cur]];\n\tsplay(cur);\n}\n\nil void insert(ll x){\n\tll cur=rt,p=0;\n\twhile(cur&&x!=val[cur]){\n\t\tp=cur;\n\t\tcur=son[cur][x>val[cur]];\n\t}\n\tif(cur) cnt[cur]++;\n\telse{\n\t\tcur=++ncnt;\n\t\tif(p) son[p][x>val[p]]=cur;\n\t\tson[cur][1]=son[cur][0]=0;\n\t\tval[cur]=x;f[cur]=p;\n\t\tsz[cur]=cnt[cur]=1;\n\t}\n\tsplay(cur);\n}\n\nil ll pre(ll x){\n\tfind(x);\n\tif(x>val[rt]) return rt;\n\tll cur=son[rt][0];\n\twhile(son[cur][1]) cur=son[cur][1];\n\treturn cur;\n}\n\nil ll succ(ll x){\n\tfind(x);\n\tif(x<val[rt]) return rt;\n\tll cur=son[rt][1];\n\twhile(son[cur][0]) cur=son[cur][0];\n\treturn cur;\n}\n\nil void remove(ll x){\n\tll last=pre(x),nxt=succ(x);\n\tsplay(last);splay(nxt,last);\n\tll del=son[nxt][0];\n\tif(cnt[del]>1){\n\t\tcnt[del]--;\n\t\tsplay(del);\n\t}\n\telse son[nxt][0]=0;\n}\n\nint main(){\n\tn=read();\n\tinsert(INT_MAX);insert(-INT_MAX);//\u8fb9\u754c\n\tinsert0(INT_MAX);insert0(-INT_MAX);\n\tfor(ll i=1;i<=n;++i){\n\t\tll op,x,p,q;\n\t\top=read();x=read();\n\t\tif(op==0)\n\t\t{//\u5f53\u524d\u5ba0\u7269\u662f\u5426\u53ef\u4ee5\u4e0e\u539f\u5148\u5df2\u63d2\u5165\u987e\u5ba2\u5339\u914d.\n\t\t\tif(!tot) insert0(x),tot0++;//\u4e0d\u80fd\uff1a\u63d2\u5165\u5ba0\u7269\u6811\uff0c\u8ba1\u6570\u5668++\uff1b\n\t\t\telse\n\t\t\t{//\u80fd\uff1a\u6bd4\u8f83\u524d\u9a71\uff0c\u540e\u7ee7\uff0c\u9009\u62e9\u66f4\u4f18\uff0c\u5f53\u7136\u5339\u914d\u4e0a\u4e86\uff0c\u5220\u9664\u7528\u6389\u7684,\u8ba1\u6570\u5668--\uff1b\n\t\t\t\tp=val[pre(x)],q=val[succ(x)];\n\t\t\t\tif(abs(p-x)<=abs(q-x)) (ans+=abs(p-x))%=mod,remove(p),tot--;\n\t\t\t\telse (ans+=abs(q-x))%=mod,remove(q),tot--;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{//\u540c\u7406\n\t\t\tif(!tot0) insert(x),tot++;\n\t\t\telse{\n\t\t\t\tp=val0[pre0(x)],q=val0[succ0(x)];\n\t\t\t\tif(abs(p-x)<=abs(q-x)) (ans+=abs(p-x))%=mod,remove0(p),tot0--;\n\t\t\t\telse (ans+=abs(q-x))%=mod,remove0(q),tot0--;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\",(ans%mod+mod)%mod);//\u5047\u88c5\u4e25\u8c28\n}\n```\nrp++",
        "postTime": 1565669239,
        "uid": 109381,
        "name": "Mosher",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "### \u3010\u9898\u76ee\u3011\n![\u9898\u76ee](https://cdn.luogu.com.cn/upload/pic/70083.png)\n\n### \u3010\u89e3\u9898\u601d\u8def\u3011\n- \u8bb0\u5f55\u5f53\u524d\u4f9b\u5927\u4e8e\u6c42\u7684\u751f\u7269\u662f\u4eba\u8fd8\u662f\u5ba0\u7269\n\t- \u7136\u540e\u5982\u679c\u662f\u540c\u7c7b\u5c31\u628a\u8be5\u751f\u7269\u7684\u5c5e\u6027\u63d2\u5165Treap\uff0c\n    - \u5426\u5219\u5c31\u76f8\u5f53\u4e8e\u67e5\u627e\u5c5e\u6027\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u53d6\u8f83\u76f8\u8fd1\u503c\uff0c\u5e76\u5220\u9664\u8be5\u70b9\n- \u7531\u4e8e\u5982\u679c\u51fa\u73b0\u4f9b\u5927\u4e8e\u6c42\u7684\u751f\u7269\u8f6e\u6362\u7684\u60c5\u51b5\u65f6\uff0cTreap\u80af\u5b9a\u662f\u7a7a\u7684\uff0c\u56e0\u6b64\u53ea\u9700\u4e00\u68f5Treap\u5373\u53ef\n\n### \u3010\u65f6\u7a7a\u590d\u6742\u5ea6\u3011\n- $O(nlogn)$\n\n### \u3010\u53c2\u8003\u7a0b\u5e8f\u3011\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nint n,SUM,cnt,ans,root=-1;\nstruct TREAP{\n\tint ls,rs,x;\n\tunsigned long long fix;\n}treap[100005];\nint make_rand()\n{\n\treturn rand()*rand()*rand();\n}\nint Push(int x)\n{\n\tint p=++SUM;\n\ttreap[p].x=x;\n\ttreap[p].ls=treap[p].rs=-1;\n\ttreap[p].fix=make_rand();\n\treturn p;\n}\nvoid R_romote(int &p)\n{\n\tint lp=treap[p].ls;\n\ttreap[p].ls=treap[lp].rs;\n\ttreap[lp].rs=p;\n\tp=lp;\n}\nvoid L_romote(int &p)\n{\n\tint rp=treap[p].rs;\n\ttreap[p].rs=treap[rp].ls;\n\ttreap[rp].ls=p;\n\tp=rp;\n}\nvoid Ins(int &p,int x)\n{\n\tif (p==-1)\n\t{\n\t\tp=Push(x);\n\t\treturn;\n\t}\n\tint &lp=treap[p].ls,&rp=treap[p].rs;\n\tif (x<treap[p].x)\n\t{\n\t\tIns(lp,x);\n\t\tif (treap[lp].fix>treap[p].fix)\n\t\t\tR_romote(p);\n\t}\n\telse\n\t{\n\t\tIns(rp,x);\n\t\tif (treap[rp].fix>treap[p].fix)\n\t\t\tL_romote(p);\n\t}\n}\nvoid Del(int &p,int x)\n{\n\tif (treap[p].x==x)\n\t{\n\t\tif (treap[p].ls!=-1&&treap[p].rs!=-1)\n\t\t{\n\t\t\tif (treap[treap[p].ls].fix>treap[treap[p].rs].fix)\n\t\t\t{\n\t\t\t\tR_romote(p);\n\t\t\t\tDel(treap[p].rs,x);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tL_romote(p);\n\t\t\t\tDel(treap[p].ls,x);\n\t\t\t}\n\t\t}\n\t\telse\n\t\tif (treap[p].ls==-1&&treap[p].rs!=-1)\n\t\t\tp=treap[p].rs;\n\t\telse\n\t\tif (treap[p].ls!=-1&&treap[p].rs==-1)\n\t\t\tp=treap[p].ls;\n\t\telse\n\t\t\tp=-1;\n\t\treturn;\n\t}\n\telse\n\tif (x<treap[p].x)\n\t\tDel(treap[p].ls,x);\n\telse\n\t\tDel(treap[p].rs,x);\n}\n#define INF 2000000000\nint Nxt(int p,int x)\n{\n\tif (p==-1) return INF;\n\tif (treap[p].x<x)\n\t\treturn Nxt(treap[p].rs,x);\n\telse\n\t\treturn min(Nxt(treap[p].ls,x),treap[p].x);\n}\nint Pre(int p,int x)\n{\n\tif (p==-1) return -INF;\n\tif (treap[p].x>x)\n\t\treturn Pre(treap[p].ls,x);\n\telse\n\t\treturn max(Pre(treap[p].rs,x),treap[p].x);\n}\n\n#define Mod 1000000\nvoid mo(int &x)\n{\n\tx%=Mod;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tint type=0;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint cmd,x;\n\t\tscanf(\"%d%d\",&cmd,&x);\n\t\tif (!cnt)\n\t\t\ttype=cmd;\n\t\tif (cmd==type)\n\t\t{\n\t\t\tcnt++;\n\t\t\tIns(root,x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcnt--;\n\t\t\tint a=Pre(root,x),b=Nxt(root,x);\n\t\t\tif (abs(a-x)<=abs(b-x))\n\t\t\t{\n\t\t\t\tmo(ans+=abs(a-x));\n\t\t\t\tDel(root,a);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmo(ans+=abs(b-x));\n\t\t\t\tDel(root,b);\n\t\t\t}\n\t\t}\t\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1565183405,
        "uid": 12349,
        "name": "FREEH",
        "ccfLevel": 6,
        "title": "\u5e73\u8861\u6811\uff08Treap\uff09\u2014\u2014P2286\u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u4f38\u5c55\u6811Splay\n\u628a\u524d\u9a71\u548c\u540e\u7ee7\u6c42\u51fa\u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u7d2f\u52a0\u5230ans\u91cc\u540e\u5c31\u53ef\u4ee5\u518d\u5220\u53bb\n\n\u65f6\u95f4\u590d\u6742\u5ea6O\uff08nlogn\uff09\n```\n#include<bits/stdc++.h>\n#define mod 1000000\nusing namespace std;\nstruct Tree {\n\tint data,l,r,ln,rn,fa;\n} t[100005];\nint n,m,root,tot,ans;\nvoid zig(int x) {\n\tint y=t[x].fa;\n\tt[y].l=t[x].r;\n\tif(t[x].r)t[t[x].r].fa=y;\n\tt[x].fa=t[y].fa;\n\tif(t[y].fa) {\n\t\tif(y==t[t[y].fa].l)t[t[y].fa].l=x;\n\t\telse t[t[y].fa].r=x;\n\t}\n\tt[y].fa=x;\n\tt[x].r=y;\n\tt[y].ln=t[x].rn;\n\tt[x].rn=t[y].ln+t[y].rn+1;\n}\nvoid zag(int x) {\n\tint y=t[x].fa;\n\tt[y].r=t[x].l;\n\tif(t[x].l)t[t[x].l].fa=y;\n\tt[x].fa=t[y].fa;\n\tif(t[y].fa) {\n\t\tif(y==t[t[y].fa].l)t[t[y].fa].l=x;\n\t\telse t[t[y].fa].r=x;\n\t}\n\tt[y].fa=x;\n\tt[x].l=y;\n\tt[y].rn=t[x].ln;\n\tt[x].ln=t[y].ln+t[y].rn+1;\n}\nvoid Splay(int x) {\n\tint p;\n\twhile(t[x].fa) {\n\t\tp=t[x].fa;\n\t\tif(t[p].fa==0) {\n\t\t\tif(x==t[p].l)zig(x);\n\t\t\telse zag(x);\n\t\t\tbreak;\n\t\t}\n\t\tif(x==t[p].l) {\n\t\t\tif(p==t[t[p].fa].l)zig(p),zig(x);\n\t\t\telse zig(x),zag(x);\n\t\t} else {\n\t\t\tif(p==t[t[p].fa].r)zag(p),zag(x);\n\t\t\telse zag(x),zig(x);\n\t\t}\n\t}\n\troot=x;\n}\nint ahead(int x) {\n//\tfind(x);\n\t//cout<<\"---\"<<root<<\" \"<<t[root].data;\n\tint p=t[root].l;\n\twhile(t[p].r) {\n\t\tp=t[p].r;\n\t}\n\tif(p)return p;\n\treturn -1;\n}\nint last(int x) {\n//\tfind(x);\n\tint p=t[root].r;\n\twhile(t[p].l) {\n\t\tp=t[p].l;\n\t}\n\tif(p)return p;\n\treturn -1;\n}\nvoid erase(int x) {\n\tSplay(x);\n//\tcout<<root<<\" FS \"<<x<<\" S \";\n\tint p=root;\n\tint ls=t[p].l,rs=t[p].r;\n\tif(!ls&&!rs) {\n\t\troot=0;\n//\t\tcout<<root<<\" -A\"<<endl;\n\t\treturn;\n\t}\n\tif(!ls) {\n\t\troot=rs;\n//\t\tcout<<root<<\" -B\"<<endl;\n\t\tt[rs].fa=0;\n\t\treturn;\n\t}\n\tif(!rs) {\n\t\troot=ls;\n\t\tt[ls].fa=0;\n//\t\tcout<<root<<\" -C\"<<endl;\n\t\treturn;\n\t}\n\tp=ls;\n\tt[ls].fa=0;\n\twhile(t[p].r)p=t[p].r;\n\tSplay(p);\n\tt[p].r=rs;\n\tt[rs].fa=p;\n\tt[p].rn=t[rs].ln+t[rs].rn+1;\n//\tcout<<root<<\" -D\"<<endl;\n}\nvoid add(int x) {\n\tint p=root,f;\n\twhile(p) {\n\t\tf=p;\n\t\tif(x<=t[p].data) {\n\t\t\tt[p].ln++;\n\t\t\tp=t[p].l;\n\t\t} else {\n\t\t\tt[p].rn++;\n\t\t\tp=t[p].r;\n\t\t}\n\t}\n\ttot++;\n\tt[tot].data=x;\n\tt[tot].fa=t[tot].l=t[tot].ln=t[tot].r=t[tot].rn=0;\n\tif(root==0) {\n\t\troot=tot;\n\t\treturn;\n\t}\n\tt[tot].fa=f;\n\tif(x<=t[f].data)t[f].l=tot;\n\telse t[f].r=tot;\n\tSplay(tot);\n}\nint main() {\n\tint i,j,pet=0,cost=0;\n\tcin>>n;\n\tfor(i=1; i<=n; i++) {\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tif(x==1) cost++;\n\t\telse pet++;\n\t\tif(pet!=0&&cost!=0) {\n\t\t//\tcout<<root<<endl;\n\t\t\tadd(y);\n\t\t\tint QQ=ahead(y);\n\t\t\tint HJ=last(y);\n\t\t\t\n\t\t\tint Q,H;\n\t\t\tif(HJ!=-1)\n\t\t\t\tH=abs(t[HJ].data-y);\n\t\t\tif(QQ!=-1)\n\t\t\t\tQ=abs(t[QQ].data-y);\n\t\t\tif(QQ==-1) {\n\t\t\t\tans+=H;\n\t\t\t\tans%=mod;\n\t\t\t\terase(root);\n\t\t\t\terase(HJ);\n\t\t\t\tpet--;\n\t\t\t\tcost--;\n//\t\t\t\tcout<<QQ<<\" FUCK \"<<HJ<<\" -1- \"<<\" Q:\"<<Q<<\" t:\"<<y<<\" ans-\"<<ans<<endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(HJ==-1) {\n\t\t\t\tans+=Q;\n\t\t\t\tans%=mod;\n\t\t\t\terase(root);\n\t\t\t\terase(QQ);\n\t\t\t\tpet--;\n\t\t\t\tcost--;\n//\t\t\t\tcout<<QQ<<\" FUCK \"<<HJ<<\" -1- \"<<\" Q:\"<<Q<<\" t:\"<<y<<\" ans-\"<<ans<<endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(Q<=H) {\n\t\t\t\tans+=Q;\n\t\t\t\tans%=mod;\n\t\t\t\terase(root);\n\t\t\t\terase(QQ);\n\t\t\t\tpet--,cost--;\n//\t\t\t\tcout<<QQ<<\" - \"<<HJ<<\" - \"<<ans<<endl;\n\t\t\t} else if(Q>H) {\n\t\t\t\tans+=H;\n\t\t\t\tans%=mod;\n\t\t\t\terase(root);\n\t\t\t\terase(HJ);\n\t\t\t\tpet--,cost--;\n//\t\t\t\tcout<<QQ<<\" - \"<<HJ<<\" - \"<<ans<<endl;\n\t\t\t}\n\t\t} else add(y);\n\t}\n\tcout<<ans%mod;\n\treturn 0;\n}\n/*\n3\n1 5\n1 7\n0 6\n*/\n```",
        "postTime": 1550486381,
        "uid": 89490,
        "name": "AmadeusSG",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](http://abc233.site/archives/138)\n## \u601d\u8def\n\u6839\u636e\u9898\u610f\uff0c\u6bcf\u4e00\u4e2a\u4e3b\u4eba\u5230\u8fbe\u6536\u517b\u6240\u540e\uff0c\u5982\u679c\u6709\u5ba0\u7269\uff0c\u5c31\u4f1a\u9886\u517b\u3002\u540c\u6837\u5730\uff0c\u5ba0\u7269\u4e5f\u662f\u5982\u6b64\uff0c\u53ea\u8981\u6709\u4e3b\u4eba\u5c31\u4f1a\u88ab\u9886\u517b\u3002\u8fd9\u6837\u5c31\u80fd\u7406\u89e3\u9898\u76ee\u4e2d \"\u5ba0\u7269\u6536\u517b\u573a\u603b\u662f\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\u53d1\u751f\uff1a\u88ab\u9057\u5f03\u7684\u5ba0\u7269\u8fc7\u591a\u6216\u8005\u662f\u60f3\u8981\u6536\u517b\u5ba0\u7269\u7684\u4eba\u592a\u591a\uff0c\u800c\u5ba0\u7269\u592a\u5c11\"\u3002\n\n\u5982\u4f55\u627e\u5230\u7279\u70b9\u503c\u6700\u63a5\u8fd1\u7684\u4e3b\u4eba/\u5ba0\u7269\uff1f\u627e\u4e00\u4e2a\u96c6\u5408\u4e2d\u6700\u63a5\u8fd1 x \u7684\u5143\u7d20\uff0c\u81ea\u7136\u5c31\u60f3\u5230\u4e86\u5e73\u8861\u6811\u3002\u6211\u5728\u8fd9\u9053\u9898\u4e2d\u4f7f\u7528\u4e86 Treap\u3002\u6700\u63a5\u8fd1\u7684 x \u7279\u5f81\u503c\u5c31\u662f x \u524d\u9a71\u548c\u540e\u7ee7\u4e2d\u66f4\u63a5\u8fd1 x \u7684\u90a3\u4e00\u4e2a\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u4e24\u68f5 Treap\uff0c\u5206\u522b\u5b58\u50a8\u5ba0\u7269\u7684\u7279\u70b9\u503c\u548c\u4e3b\u4eba\u7684\u7279\u70b9\u503c\u3002\u518d\u8bb0\u5f55\u4e0b\u5f53\u524d\u4e24\u4e2a Treap \u4e2d\u5206\u522b\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u3002\n\n\u6bcf\u5f53\u4e00\u4e2a\u5ba0\u7269 x \u8fdb\u5165\uff0c\u5982\u679c\u4e3b\u4eba\u7684 Treap \u4e0d\u4e3a\u7a7a\uff0c\u5c31\u5728\u4e3b\u4eba Treap \u4e2d\u627e x \u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u9009\u62e9\u66f4\u63a5\u8fd1 x \u7684\u90a3\u4e2a\uff08\u6839\u636e\u9898\u610f\u5982\u679c\u5dee\u503c\u76f8\u540c\u5c31\u9009\u524d\u9a71\uff09\uff0c\u5e76\u7d2f\u8ba1\u4e0d\u6ee1\u610f\u5ea6\u603b\u503c\uff0c\u7136\u540e\u4ece\u4e3b\u4eba Treap \u4e2d\u5220\u9664\u8fd9\u4e2a\u5143\u7d20\u3002\u5426\u5219\u5982\u679c\u4e3b\u4eba\u7684 Treap \u4e3a\u7a7a\uff0c\u5c31\u5c06 x \u52a0\u5165\u5ba0\u7269\u7684 Treap \u4e2d\uff0c\u7b49\u5f85\u4e0b\u4e00\u4e2a\u4e3b\u4eba\u3002\n\n\u5bf9\u5e94\u5730\uff0c\u6bcf\u5f53\u4e00\u4e2a\u4e3b\u4eba y \u8fdb\u5165\uff0c\u5982\u679c\u5ba0\u7269\u7684 Treap \u4e0d\u4e3a\u7a7a\uff0c\u5c31\u5728\u5ba0\u7269 Treap \u4e2d\u627e y \u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u9009\u62e9\u66f4\u63a5\u8fd1 y \u7684\u90a3\u4e2a\uff0c\u7136\u540e\u5220\u9664\u5b83\uff08\u5df2\u7ecf\u88ab\u9886\u517b\u4e86\uff09\uff0c\u5e76\u7d2f\u8ba1\u4e0d\u6ee1\u610f\u5ea6\u603b\u503c\uff0c\u7136\u540e\u4ece\u5ba0\u7269 Treap \u4e2d\u5220\u9664\u8fd9\u4e2a\u5143\u7d20\u3002\u5426\u5219\u5982\u679c\u5ba0\u7269\u7684 Treap \u4e3a\u7a7a\uff0c\u5c31\u5c06 y \u52a0\u5165\u4e3b\u4eba\u7684 Treap \u4e2d\uff0c\u7b49\u5f85\u4e0b\u4e00\u4e2a\u5ba0\u7269\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint q;\nstruct treap{//\u5c01\u88c5 Treap\n\tstruct node{\n\t\tlong long x,y,l,r,size,cnt;\n\t};\n\tnode s[1000001];\n\tlong long top,root;\n\tvoid reset(){\n\t\ttop=0;\n\t\troot=0;\n\t}\n\tvoid update(long long x){\n\t\ts[x].size=s[s[x].l].size+s[s[x].r].size+s[x].cnt;\n\t}\n\tvoid rotr(long long &x){\n\t\tlong long l=s[x].l;\n\t\ts[x].l=s[l].r;\n\t\ts[l].r=x;\n\t\ts[l].size=s[x].size;\n\t\tupdate(x);\n\t\tx=l;\n\t}\n\tvoid rotl(long long &x){\n\t\tlong long r=s[x].r;\n\t\ts[x].r=s[r].l;\n\t\ts[r].l=x;\n\t\ts[r].size=s[x].size;\n\t\tupdate(x);\n\t\tx=r;\n\t}\n\tvoid add(long long &x,long long data){\n\t\tif (!x){\n\t\t\tx=++top;\n\t\t\ts[x].x=data;\n\t\t\ts[x].y=rand()%19260817;\n\t\t\ts[x].cnt=1;\n\t\t\ts[x].size=1;\n\t\t\ts[x].l=0;\n\t\t\ts[x].r=0;\n\t\t\treturn;\n\t\t}\n\t\ts[x].size++;\n\t\tif (s[x].x==data){\n\t\t\ts[x].cnt++;\n\t\t}else if (data<s[x].x){\n\t\t\tadd(s[x].l,data);\n\t\t\tif (s[x].y>s[s[x].l].y){\n\t\t\t\trotr(x);\n\t\t\t}\n\t\t}else{\n\t\t\tadd(s[x].r,data);\n\t\t\tif (s[x].y>s[s[x].r].y){\n\t\t\t\trotl(x);\n\t\t\t}\n\t\t}\n\t}\n\tvoid del(long long &x,long long data){\n\t\tif (s[x].x==data){\n\t\t\tif (s[x].cnt>1){\n\t\t\t\ts[x].cnt--;\n\t\t\t\ts[x].size--;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!s[x].l||!s[x].r){\n\t\t\t\tx=s[x].l+s[x].r;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (s[s[x].l].y<s[s[x].r].y){\n\t\t\t\trotr(x);\n\t\t\t\tdel(x,data);\n\t\t\t}else{\n\t\t\t\trotl(x);\n\t\t\t\tdel(x,data);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\ts[x].size--;\n\t\tif (data<s[x].x){\n\t\t\tdel(s[x].l,data);\n\t\t}else{\n\t\t\tdel(s[x].r,data);\n\t\t}\n\t}\n\tlong long pre(long long data){\n\t\tlong long now=root,res=-2147483647;\n\t\twhile (now){\n\t\t\tif (s[now].x<data){\n\t\t\t\tres=s[now].x;\n\t\t\t\tnow=s[now].r;\n\t\t\t}else{\n\t\t\t\tnow=s[now].l;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tlong long nxt(long long data){\n\t\tlong long now=root,res=2147483647;\n\t\twhile (now){\n\t\t\tif (s[now].x>data){\n\t\t\t\tres=s[now].x;\n\t\t\t\tnow=s[now].l;\n\t\t\t}else{\n\t\t\t\tnow=s[now].r;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tlong long querykth(long long k){\n\t\tlong long now=root;\n\t\twhile (now){\n\t\t\tif (s[s[now].l].size<k&&s[s[now].l].size+s[now].cnt>=k){\n\t\t\t\treturn s[now].x;\n\t\t\t}\n\t\t\tif (s[s[now].l].size>=k){\n\t\t\t\tnow=s[now].l;\n\t\t\t}else{\n\t\t\t\tk-=s[s[now].l].size+s[now].cnt;\n\t\t\t\tnow=s[now].r;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tlong long queryrank(long long data){\n\t\tlong long now=root,res=0;\n\t\twhile (now){\n\t\t\tif (data==s[now].x){\n\t\t\t\treturn res+s[s[now].l].size+1;\n\t\t\t}\n\t\t\tif (data<s[now].x){\n\t\t\t\tnow=s[now].l;\n\t\t\t}else{\n\t\t\t\tres+=s[s[now].l].size+s[now].cnt;\n\t\t\t\tnow=s[now].r;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\nlong long n,ans=0;//ans \u4e3a\u4e0d\u6ee1\u610f\u5ea6\u603b\u548c\ntreap a,b;//\u5b58\u50a8\u5ba0\u7269\u548c\u4e3b\u4eba\u7279\u5f81\u503c\nlong long A=0,B=0;//\u5206\u522b\u8868\u793a\u5ba0\u7269\u548c\u4e3b\u4eba Treap \u4e2d\u6709\u591a\u5c11\u4e2a\u5143\u7d20\nint main(){\n\tsrand(time(0));\n\ta.reset();\n\tb.reset();\n\tcin>>n;\n\tfor (int i=1;i<=n;i++){\n\t\tlong long x,y;\n\t\tcin>>x>>y;\n\t\tif (x==0){//\u5982\u679c\u662f\u5ba0\u7269\n\t\t\tif (B>0){//\u5982\u679c\u4e3b\u4eba Treap \u4e0d\u4e3a\u7a7a\uff08\u5f53\u524d\u6709\u6b63\u5728\u7b49\u5f85\u7684\u4e3b\u4eba\uff09\n\t\t\t\tlong long tar1=b.pre(y);//\u5728\u4e3b\u4eba\u4e2d\u627e\u524d\u9a71\n\t\t\t\tlong long tar2=b.nxt(y);//\u627e\u540e\u7ee7\n\t\t\t\tif (y-tar1>tar2-y){//\u9009\u53d6\u66f4\u63a5\u8fd1\u7684\u90a3\u4e2a\n\t\t\t\t\tans+=tar2-y;//\u66f4\u65b0\u4e0d\u6ee1\u610f\u5ea6\n\t\t\t\t\tb.del(b.root,tar2);//\u4ece\u4e3b\u4eba Treap \u4e2d\u5220\u9664\u5339\u914d\u5230\u7684\u4e3b\u4eba\n\t\t\t\t}else{\n\t\t\t\t\tans+=y-tar1;//\u540c\u4e0a\n\t\t\t\t\tb.del(b.root,tar1);\n\t\t\t\t}\n\t\t\t\tB--;//\u4e3b\u4eba Treap \u5143\u7d20\u603b\u548c\u51cf 1\n\t\t\t}else{//\u5982\u679c\u6ca1\u6709\u5728\u7b49\u5f85\u7684\u4e3b\u4eba\n\t\t\t\tA++;//\u5ba0\u7269 Treap \u5143\u7d20\u603b\u548c\u52a0 1\n\t\t\t\ta.add(a.root,y);//\u5ba0\u7269 Treap \u63d2\u5165\u5f53\u524d\u5ba0\u7269\u7684\u7279\u5f81\u503c\n\t\t\t}\n\t\t}else{\n\t\t\tif (A>0){//\u540c\u4e0a\uff0c\u53ea\u662f\u8fd9\u6b21\u662f\u4e3b\u4eba\u5339\u914d\u5ba0\u7269\n\t\t\t\tlong long tar1=a.pre(y);\n\t\t\t\tlong long tar2=a.nxt(y);\n\t\t\t\tif (y-tar1>tar2-y){\n\t\t\t\t\tans+=tar2-y;\n\t\t\t\t\ta.del(a.root,tar2);\n\t\t\t\t}else{\n\t\t\t\t\tans+=y-tar1;\n\t\t\t\t\ta.del(a.root,tar1);\n\t\t\t\t}\n\t\t\t\tA--;\n\t\t\t}else{\n\t\t\t\tB++;\n\t\t\t\tb.add(b.root,y);\n\t\t\t}\n\t\t}\n\t\tans%=1000000;//\u53d6\u6a21\n\t}\n\tcout<<ans%1000000;\n}\n```",
        "postTime": 1550372754,
        "uid": 10513,
        "name": "solstice23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u5c31\u662f\u7ef4\u62a4\u4e00\u9897\u5e73\u8861\u6811\u3002\n\n\u4f46\u662f\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u4ed6\u8fd9\u91cc\u8bf4\u5ba2\u4eba\u6ca1\u6709\u9886\u5230\u5ba0\u7269\u7684\u8bdd\u4e0d\u4f1a\u8d70\u6389\uff0c\u800c\u662f\u7b49\u7740\u5ba0\u7269\u518d\u6765\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f00\u4e24\u4e2a\u5e73\u8861\u6811\uff0c\u4e00\u4e2a\u7ef4\u62a4\u7b49\u5f85\u7740\u7684\u5ba0\u7269\uff0c\u4e00\u4e2a\u7ef4\u62a4\u7b49\u5f85\u7740\u7684\u4eba\u3002\n\n\u8fd9\u91cc\u7528Treap\u5b9e\u73b0\u5e73\u8861\u6811\u3002\n\ncode:\n\n```cpp\n#pragma G++ optimize (2)\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n#include <string>\n#include <queue>\n#define INF 0x3f3f3f3f\n#define NO 100005\n#define MO 100005\ntypedef long long ll;\n//by Oliver\nusing namespace std;\ninline ll read()\n{\n    char ch = ' ', last;\n    ll ans = 0;\n    while (ch < '0' || ch > '9')\n        last = ch, ch = getchar();\n    while (ch >= '0' && ch <= '9')\n        ans = ans * 10 + int(ch - '0'), ch = getchar();\n    if (last == '-')\n        return -ans;\n    return ans;\n}\nvoid write(ll x)\n{\n    if (x >= 10)\n        write(x / 10);\n    putchar(x % 10 + '0');\n}\n//head\n\nll n, cnt, ans;\nstruct node\n{\n    ll rnd, val, lson, rson, num, siz;\n\n};\nstruct TREAP\n{\n    node pt[NO];\n    ll rt, pre, suf;\n\n    void update(int now)\n    {\n        pt[now].siz = pt[pt[now].lson].siz + pt[pt[now].rson].siz + pt[now].num;\n    }\n    void lrot(ll &now)\n    {\n        int rson = pt[now].rson;\n        pt[now].rson = pt[rson].lson;\n        pt[rson].lson = now;\n        pt[rson].siz = pt[now].siz;\n        update(now);\n        now = rson;\n    }\n    void rrot(ll &now)\n    {\n        int lson = pt[now].lson;\n        pt[now].lson = pt[lson].rson;\n        pt[lson].rson = now;\n        pt[lson].siz = pt[now].siz;\n        update(now);\n        now = lson;\n    }\n    void insert(ll &now, int val)\n    {\n        if (!now)\n        {\n            now = ++cnt;\n            pt[now].siz = pt[now].num = 1, pt[now].val = val, pt[now].rnd = rand();\n            if (!rt)\n                rt = now;\n        }\n        else\n        {\n            pt[now].siz++;\n            if (pt[now].val == val)\n                pt[now].num++;\n            else if (val < pt[now].val)\n            {\n                insert(pt[now].lson, val);\n                if (pt[pt[now].lson].rnd > pt[now].rnd)\n                    rrot(now);\n            }\n            else\n            {\n                insert(pt[now].rson, val);\n                if (pt[pt[now].rson].rnd > pt[now].rnd)\n                    lrot(now);\n            }\n        }\n    }\n    void del(ll &now, int val)\n    {\n        if (pt[now].val > val)\n            pt[now].siz--, del(pt[now].lson, val);\n        else if (pt[now].val < val)\n            pt[now].siz--, del(pt[now].rson, val);\n        else\n        {\n            if (pt[now].num > 1)\n                pt[now].num--, pt[now].siz--;\n            else if (pt[now].lson * pt[now].rson == 0)\n                now = pt[now].lson + pt[now].rson;\n            else\n                if (pt[pt[now].lson].rnd > pt[pt[now].rson].rnd)\n                    rrot(now), del(now, val);\n                else\n                    lrot(now), del(now, val);\n        }\n    }\n    void query_suf(int now, int val)\n    {\n        if (!now)\n            return;\n        if (val == pt[now].val)\n        {\n            suf = now;\n            return;\n        }\n        if (val < pt[now].val)\n            pre = now, query_suf(pt[now].lson, val);\n        else\n            query_suf(pt[now].rson, val);\n    }\n    void query_pre(int now, int val)\n    {\n        if (!now)\n            return;\n        if (val == pt[now].val)\n        {\n            pre = now;\n            return;\n        }\n        if (val > pt[now].val)\n            suf = now, query_pre(pt[now].rson, val);\n        else\n            query_pre(pt[now].lson, val);\n    }\n}h, m;\n//variable\n\nvoid init()\n{\n    n = read();\n}\n//functions\n\nint main()\n{\n    init();\n    for (int i = 1; i <= n; i++)\n    {\n        int ty = read(), x = read();\n        if (ty == 1)\n            if (!h.rt)\n                m.insert(m.rt, x);\n            else\n            {\n                h.pre = h.suf = h.rt;\n                h.query_pre(h.rt, x), h.query_suf(h.rt, x);\n                ll vsu = h.pt[h.suf].val, vpr = h.pt[h.pre].val;\n                if (abs(x - vpr) > abs(x - vsu))\n                    ans += abs(x - vsu), h.del(h.rt, vsu);\n                else\n                    ans += abs(x - vpr), h.del(h.rt, vpr);\n            }\n        if (ty == 0)\n            if (!m.rt)\n                h.insert(h.rt, x);\n            else\n            {\n                m.pre = m.suf = m.rt;\n                m.query_pre(m.rt, x), m.query_suf(m.rt, x);\n                ll vsu = m.pt[m.suf].val, vpr = m.pt[m.pre].val;\n                if (abs(x - vpr) > abs(x - vsu))\n                    ans += abs(x - vsu), m.del(m.rt, vsu);\n                else\n                    ans += abs(x - vpr), m.del(m.rt, vpr);\n            }\n    }\n    cout << ans % 1000000 << endl;\n    return 0;\n}\n//main\n\n```\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u6709\u5f53\u6ca1\u6709\u5ba0\u7269\u7684\u65f6\u5019\uff0c\u6211\u4eec\u624d\u6709\u4eba\u7684\u6811\uff0c\u800c\u53ea\u6709\u5f53\u6ca1\u6709\u4eba\u7684\u65f6\u5019\uff0c\u6211\u4eec\u624d\u6709\u5ba0\u7269\u6811\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u628a\u4e24\u68f5\u6811\u5408\u5e76\u5462\uff1f\n\n\u80af\u5b9a\u53ef\u4ee5\uff01\n\n\u8fd9\u6837\u4e4b\u540e\u6211\u4eec\u5e76\u6ca1\u6709\u8282\u7701\u7a7a\u95f4\u3002\uff08\u5b9e\u9645\u4e0a\u66f4\u5927\u66f4\u6162\u3002\u3002\uff09\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u4ee3\u7801\uff01\uff0830~40\u884c\uff09\n\n\u4e5f\u4e0d\u7528\u628a\u51fd\u6570\u5957\u5728\u7ed3\u6784\u4f53\u91cc\u9762\u3002\uff08\u4ec0\u4e48m. h. \u591a\u9ebb\u70e6\uff09\n\n\u6240\u4ee5\u4ed6\u662f\u6709\u90a3\u4e48\u4e00\u70b9\u7528\u7684\u3002\u3002\n\ncode:\n```cpp\n#pragma G++ optimize (2)\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n#include <string>\n#include <queue>\n#define INF 0x3f3f3f3f\n#define NO 100005\n#define MO 100005\ntypedef long long ll;\n//by Oliver\nusing namespace std;\ninline ll read()\n{\n\tchar ch = ' ', last;\n\tll ans = 0;\n\twhile (ch < '0' || ch > '9')\n\t\tlast = ch, ch = getchar();\n\twhile (ch >= '0' && ch <= '9')\n\t\tans = ans * 10 + int(ch - '0'), ch = getchar();\n\tif (last == '-')\n\t\treturn -ans;\n\treturn ans;\n}\nvoid write(ll x)\n{\n\tif (x >= 10)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n//head\n\nint n, rt, cnt, pre, suf, ans;\nbool f;\nstruct node\n{\n\tint lson, rson, rnd, val, siz, num;\n}pt[NO];\n//variable\n\nvoid update(int now)\n{\n\tpt[now].siz = pt[pt[now].lson].siz + pt[pt[now].rson].siz + pt[now].num;\n}\nvoid lrot(int &now)\n{\n\tint rson = pt[now].rson;\n\tpt[now].rson = pt[rson].lson;\n\tpt[rson].lson = now;\n\tpt[rson].siz = pt[now].siz;\n\tupdate(now);\n\tnow = rson;\n}\nvoid rrot(int &now)\n{\n\tint lson = pt[now].lson;\n\tpt[now].lson = pt[lson].rson;\n\tpt[lson].rson = now;\n\tpt[lson].siz = pt[now].siz;\n\tupdate(now);\n\tnow = lson;\n}\nvoid insert(int &now, int val)\n{\n\tif (!now)\n\t{\n\t\tnow = ++cnt;\n\t\tpt[now].siz = pt[now].num = 1, pt[now].val = val, pt[now].rnd = rand();\n\t\tif (!rt)\n\t\t\trt = now;\n\t}\n\telse\n\t{\n\t\tpt[now].siz++;\n\t\tif (pt[now].val == val)\n\t\t\tpt[now].num++;\n\t\telse if (pt[now].val > val)\n\t\t{\n\t\t\tinsert(pt[now].lson, val);\n\t\t\tif (pt[pt[now].lson].rnd > pt[now].rnd)\n\t\t\t\trrot(now);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinsert(pt[now].rson, val);\n\t\t\tif (pt[pt[now].rson].rnd > pt[now].rnd)\n\t\t\t\tlrot(now);\n\t\t}\n\t}\n}\nvoid del(int &now, int val)\n{\n\tif (pt[now].val > val)\n\t\tpt[now].siz--, del(pt[now].lson, val);\n\telse if (pt[now].val < val)\n\t\tpt[now].siz--, del(pt[now].rson, val);\n\telse\n\t{\n\t\tif (pt[now].num > 1)\n\t\t\tpt[now].num--, pt[now].siz--;\n\t\telse if (pt[now].lson * pt[now].rson == 0)\n\t\t\tnow = pt[now].lson + pt[now].rson;\n\t\telse\n\t\t\tif (pt[pt[now].lson].rnd > pt[pt[now].rson].rnd)\n\t\t\t\trrot(now), del(now, val);\n\t\t\telse\n\t\t\t\tlrot(now), del(now, val);\n\t}\n}\nvoid getpre(int now, int val)\n{\n\tif (!now)\n\t\treturn;\n\tif (pt[now].val <= val)\n\t\tpre = now, getpre(pt[now].rson, val);\n\telse\n\t\tgetpre(pt[now].lson, val);\n}\nvoid getsuf(int now, int val)\n{\n\tif (!now)\n\t\treturn;\n\tif (pt[now].val >= val)\n\t\tsuf = now, getsuf(pt[now].lson, val);\n\n\telse\n\t\tgetsuf(pt[now].rson, val);\n}\nvoid init()\n{\n\tn = read();\n}\n//functions\n\nint main()\n{\n\tinit();\n\twhile (n--)\n\t{\n\t\t//cout << f << endl;\n\t\tint ty = read(), x = read();\n\t\tif (f != ty && rt)//\u8fd9\u91cc\u5c31\u662f\u6709\u4e00\u9897\u548c\u73b0\u5728\u4e0d\u4e00\u6837\u7684\u6811\u3002\u90a3\u4e48\u5c31\u53bb\u627e\u7b54\u6848\u5427\u3002\n\t\t{\n\t\t\tpre = suf = rt;\n\t\t\tgetpre(rt, x), getsuf(rt, x);\n\t\t\tll vsu = pt[suf].val, vpr = pt[pre].val;\n\t\t\tif (abs(x - vpr) > abs(x - vsu))\n\t\t\t\tans += abs(x - vsu), del(rt, vsu);\n\t\t\telse\n\t\t\t\tans += abs(x - vpr), del(rt, vpr);\n\t\t}\n\t\telse//\u8fd9\u91cc\u7f29\u4e86\u4e24\u79cd\u60c5\u51b5\u3002\u4e00\u79cd\u662f\u6ca1\u6709\u6839\uff0c\u4e00\u79cd\u662f\u6811\u548c\u73b0\u5728\u7684ty\u4e00\u6837\u3002\u6240\u4ee5\u90fd\u8981insert.\n\t\t\tinsert(rt, x), f = ty;\n\t\tans %= 1000000;\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n//main\n\n```\n\n\u9898\u76ee\uff1a[P2286 [HNOI2004]\u5ba0\u7269\u6536\u517b\u573a](https://www.luogu.org/problemnew/show/P2286)\n",
        "postTime": 1550041080,
        "uid": 78369,
        "name": "Harmony",
        "ccfLevel": 7,
        "title": "P2286 \u9898\u89e3\uff08\u5e73\u8861\u6811\uff09"
    },
    {
        "content": "~~\u54ce\u5440\u5440\uff0c\u8981\u9000\u5f79\u60f9~~\n\u5728\u505a\uff08mo\uff09\u4f60\u8d5b\u65f6\u78b0\u5230\u7684\u4e00\u9053\u9898\n\n\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u521a\u5f00\u59cb\u5165\u5e73\u8861\u6811\u65f6SBT\uff08\u96fe\u2014\u2014\n\n\u770b\u4e86\u773c\u9898\u89e3~~\u597d\u50cf\u65e2\u6ca1\u6709P\u4e5f\u6ca1\u6709SBT~~\n\n\u662f\u65f6\u5019\u5347\u534e\u4e00\u4e0b\u81ea\u5df1\u4e86\uff08\u987a\u4fbf\u5b58\u4ee3\u7801\n\n\u901a\u5e38 SBT \u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u5305\u542b key\uff0cleft\uff0cright \u548c size \u7b49\u57df\u3002size \u662f\u4e00\u4e2a\u989d\u5916\u4f46\u662f\u5341\u5206\u6709\u7528\u7684\u6570\u636e\u57df\uff0c\u5b83\u4e00\u76f4\u5728\u66f4\u65b0\uff0c\u5b83\u5728\u524d\u9762\u5df2\u7ecf\n\u5b9a\u4e49\u4e86\u3002\n\u6bcf\u4e00\u4e2a\u5728 SBT \u4e2d\u7684\u7ed3\u70b9 t\uff0c\u6211\u4eec\u4fdd\u8bc1\uff1a\n\n\u6027\u8d28 a\uff1a\ns[right [t ]]>s[left [left [t ]]], s[right [left [t ]]]\n\n\u6027\u8d28 b\uff1a\ns[left [t]]>s[right [right [t]]], s[left [right [t]]]\n\n\u53d1\u73b0\u4e0d\u4f1a\u653e\u56fe\uff0c\u5443\u5443\u5443\n\n           T\n         L   R\t\n        A B C D\n       \n~~\u5047\u88c5\u8fd9\u91cc\u6709\u56fe~~\uff1a\n\u4e0a\u8ff0\u6027\u8d28\u5728\u8fd9\u91cc\u8868\u793a\u4e3a\uff1a\n\ns[a],s[b]<s[r];\n\ns[c],s[d]<s[l];\n\n\u90a3\u4e48\u5728\u63d2\u5165\u5b8c\u4e4b\u540e\u8fd9\u4e9b\u6027\u8d28\u5c31\u53ef\u80fd\u65e0\u6cd5\u6ee1\u8db3\uff08\u4e5f\u5c314\u79cd\u60c5\u51b5\uff09\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u770b\u51fa\u4f2a\u4ee3\u7801~~(\u6bd5\u7adf\u65f6\u91cd\u590d\u7684\uff09~~\uff1a\n\nMaintain (t)\n\n1 If s[left[left[t]]>s[right[t]] then\n\n2 Right-Rotate(t)\n\n3 Maintain(right[t])\n\n4 Maintain(t)\n\n5 Exit\n\n6 If s[right[left[t]]>s[right[t]] then\n\n7 Left-Rotate(left[t])\n\n8 Right-Rotate(t)\n\n9 Maintain(left[t])\n\n10 Maintain(right[t])\n\n11 Maintain(t)\n\n12 Exit\n\n13 If s[right[right[t]]>s[left[t]] then\n\n14 Left-Rotate(t)\n\n15 Maintain(left[t])\n\n16 Maintain(t)\n\n17 Exit\n\n18 If s[left[right[t]]>s[left[t]] then\n\n19 Right-Rotate(right[t])\n\n20 Left-Rotate(t)\n\n21 Maintain(left[t])\n\n22 Maintain(right[t])\n\n23 Maintain(t)\n\n\u7136\u9e45\u8fd8\u6709\u7740\u66f4\u7b80\u5355\u7684maintain\uff08~~\u5220\u9664\u4e5f\u662f~~\uff09\uff08\u89c1\u7a0b\u5e8f\uff09\n\n```pascal\nlabel 10;\nconst inf=233333333;p=1000000;\ntype int=longint;bo=boolean;\ntype SBT=object\n         tot,root:int;\n         key:array[0..400000]of int64;\n         a,l,r:array[0..400000]of int;\n         procedure clean();\n         procedure lt(var x:int);\n         procedure rt(var x:int);\n         procedure maintain(var x:int;flag:bo);\n         procedure ins(var x:int;y:int64);\n         function find(x:int;y:int64):bo;\n         function delete(var x:int;y:int64):int64;\n         function getpre(x:int;y:int64):int64;\n         function getsuc(x:int;y:int64):int64;\n         end;\n         //\u8fd8\u5c11\u4e86rank\u548cselete\u7684\u64cd\u4f5c\uff0c\u8fd9\u9898\u4e0d\u9700\u8981\u5566\u5566\u5566\uff1b\nprocedure SBT.clean();\nbegin\n  tot:=0;root:=0;\n  fillchar(key,sizeof(key),0);\n  fillchar(a,sizeof(a),0);\n  fillchar(l,sizeof(l),0);\n  fillchar(r,sizeof(r),0);\nend;\nprocedure SBT.lt(var x:int);\nvar f:int;\nbegin\n  f:=r[x];\n  r[x]:=l[f];\n  l[f]:=x;\n  a[f]:=a[x];\n  a[x]:=a[l[x]]+a[r[x]]+1;\n  x:=f;\nend;\nprocedure SBT.rt(var x:int);\nvar f:int;\nbegin\n  f:=l[x];\n  l[x]:=r[f];\n  r[f]:=x;\n  a[f]:=a[x];\n  a[x]:=a[l[x]]+a[r[x]]+1;\n  x:=f;\nend;\nprocedure SBT.maintain(var x:int;flag:bo);\nbegin\n  if not flag then\n    begin\n      if a[l[l[x]]]>a[r[x]] then\n        rt(x)\n      else\n        if a[r[l[x]]]>a[r[x]] then\n          begin\n            lt(l[x]);\n            rt(x);\n          end\n        else\n          exit();\n    end\n  else\n    begin\n      if a[r[r[x]]]>a[l[x]] then\n        lt(x)\n      else\n        if a[l[r[x]]]>a[l[x]] then\n          begin\n            rt(r[x]);\n            lt(x);\n          end\n        else\n          exit();\n    end;\n  maintain(l[x],false);\n  maintain(r[x],true);\n  maintain(x,false);\n  maintain(x,true);\nend;\nprocedure SBT.ins(var x:int;y:int64);\nbegin\n  if x=0 then\n    begin\n      inc(tot);\n      x:=tot;\n      a[x]:=1;\n      l[x]:=0;\n      r[x]:=0;\n      key[x]:=y;\n    end\n  else\n    begin\n      inc(a[x]);\n      if y<key[x] then\n        ins(l[x],y)\n      else\n        ins(r[x],y);\n      maintain(x,y>=key[x]);\n    end;\nend;\nfunction SBT.find(x:int;y:int64):bo;\nbegin\n  if x=0 then\n    exit(false);\n  if y<key[x] then\n    exit(find(l[x],y))\n  else\n    exit((key[x]=y)or(find(r[x],y)));\nend;\nfunction SBT.delete(var x:int;y:int64):int64;\nbegin\n  dec(a[x]);\n  if(key[x]=y)or((y<key[x])and(l[x]=0))or((y>key[x])and(r[x]=0))then\n    begin\n      delete:=key[x];\n      if(l[x]=0)or(r[x]=0)then\n        x:=l[x]+r[x]\n      else\n        key[x]:=delete(l[x],key[x]+1);\n    end\n  else\n    if y<key[x] then\n      delete:=delete(l[x],y)\n    else\n      delete:=delete(r[x],y);\nend;\nfunction SBT.getpre(x:int;y:int64):int64;\nbegin\n  if x=0 then\n    exit(y);\n  if y<=key[x] then\n    exit(getpre(l[x],y))\n  else\n    begin\n      getpre:=getpre(r[x],y);\n      if getpre=y then\n        exit(key[x]);\n    end;\nend;\nfunction SBT.getsuc(x:int;y:int64):int64;\nbegin\n  if x=0 then\n    exit(y);\n  if y>=key[x] then\n    exit(getsuc(r[x],y))\n  else\n    begin\n      getsuc:=getsuc(l[x],y);\n      if getsuc=y then\n        exit(key[x]);\n    end;\nend;\nvar human,pet:SBT;\n    i,suc,pre,n,x,y,ans:int;\nbegin\n  human.clean();\n  pet.clean();\n  pet.clean();\n  human.ins(human.root,inf);\n  human.ins(human.root,-inf);\n  pet.ins(pet.root,inf);\n  pet.ins(pet.root,-inf);\n  readln(n);\n  ans:=0;\n  repeat\n    dec(N);\n    readln(x,y);\n    if x=0 then\n      begin\n        if human.a[human.root]=2 then//\u662f\u5426\u6709\u4eba\n          begin\n            pet.ins(pet.root,y);\n            goto 10;\n          end;\n        if human.find(human.root,y) then//\u662f\u5426\u6709\u7740\u7279\u70b9\u503c\u4e00\u6837\u7684\n          begin\n            human.delete(human.root,y);\n            goto 10;\n          end;\n        suc:=human.getsuc(human.root,y);//\u540e\u7ee7\n        pre:=human.getpre(human.root,y);//\u524d\u9a71\n        if(suc-y)<(y-pre)then\n          begin\n            ans:=(ans+suc-y)mod p;\n            human.delete(human.root,suc);\n          end\n        else\n          begin\n            ans:=(ans+y-pre)mod p;\n            human.delete(human.root,pre);\n          end;\n      end\n    else//\u4e0b\u540c\n      begin\n        if pet.a[pet.root]=2 then\n          begin\n            human.ins(human.root,y);\n            goto 10;\n          end;\n        if pet.find(pet.root,y) then\n          begin\n            pet.delete(pet.root,y);\n            goto 10;\n          end;\n        suc:=pet.getsuc(pet.root,y);\n        pre:=pet.getpre(pet.root,y);\n        if(suc-y)<(y-pre)then\n          begin\n            ans:=(ans+suc-y)mod p;\n            pet.delete(pet.root,suc);\n          end\n        else\n          begin\n            ans:=(ans+y-pre)mod p;\n            pet.delete(pet.root,pre);\n          end;\n      end;\n  10:until n=0;\n  writeln(ans);\nend.\n```\n\u4f3c\u4e4e\u6709\u70b9\u957f\u3002\u3002\u3002\u3002\n\u7528\u4e86\u795e\u5947\u7684object\u548clabel\uff1b\nso\u6211\u5f88\u60f3\u77e5\u9053public\u600e\u4e48\u7528\uff08\u4f1a\u7684\u79c1\u6211\uff09\uff01\uff01\u81f3\u4eca\u672a\u641e\u61c2QAQ\n\n~~\uff08\u53d1\u73b0\u7528\u4e86pascal\u603b\u662f\u6253\uff1b\uff09\uff1b~~",
        "postTime": 1541591763,
        "uid": 113976,
        "name": "\u83ab\u95ee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u4e00\u9053\u5e73\u8861\u6811\u88f8\u9898\uff0c\u6211\u4f7f\u7528\u7684\u662fSplay~~\u56e0\u4e3a\u592a\u5f31\u4e86\u4e0d\u4f1aTreap~~\u3002\n\n\u5173\u4e8eSplay->[Splay](https://www.luogu.org/blog/xryjr233/post-20181024splay-shen-zhan-shu-shuo-ju-jie-gou-post)\n\n\u76f8\u5f53\u4e8e\u5bf9\u4e8e\u4e00\u4e2a\u4e0d\u540c\u4e8e\u76ee\u524d\u591a\u4f59\u79cd\u7c7b(\u4eba\u6216\u72d7)\u7684\u4eba\u6216\u72d7\u6765\u5230,\u6211\u4eec\u8981\u67e5\u627e\u5269\u4f59\u7684\u4e0d\u540c\u7269\u79cd\u4e2d\u4e0eTa\u7684\u7279\u5f81\u503c\u6700\u76f8\u8fd1\u7684\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u4e0d\u540c\u7269\u79cd\u7684\u7279\u5f81\u503c\u6700\u4f18\u53ef\u4ee5\u4e0eTa\u7684\u7279\u5f81\u503c\u76f8\u540c\uff0c\u5426\u5219\u8981\u4e48\u662fTa\u7684\u7279\u5f81\u503c\u7684\u524d\u9a71,\u8981\u4e48\u662fTa\u7684\u7279\u5f81\u503c\u7684\u540e\u7ee7,\u5176\u4e2d\u4e0eTa\u7684\u5dee\u7edd\u5bf9\u503c\u5c0f\u7684\u5c06\u88ab\u9886\u517b\uff0c\u76f8\u7b49\u65f6\u9886\u517b\u524d\u9a71\u3002\n\n\u6211\u4eec\u91c7\u7528Splay\u6765\u7ef4\u62a4\u3002\n\n\u4e00\u4e2a\u6570$s$\u8bb0\u5f55\u76ee\u524d\u5269\u4f59\u7684\u79cd\u7c7b\u53ca\u6570\u91cf(\u591a\u4f59\u4eba\u4e3a\u6b63,\u591a\u4f59\u72d7\u4e3a\u8d1f)\uff0c\u5f53\u8bfb\u5165\u4e00\u4e2a\u4e0d\u540c\u79cd\u7c7b\u65f6\u8fdb\u884c\u4e0a\u8ff0\u67e5\u8be2\uff0c\u7d2f\u52a0\u7b54\u6848\u5e76\u5220\u9664\u9009\u4e2d\u7684\u70b9\u3002\u5f53\u8bfb\u5165\u540c\u79cd\u7c7b\u65f6\u5c06\u5b83\u7684\u7279\u5f81\u503c\u52a0\u5165Splay\u3002\n\ncode:\n\n\u5171194\u884c\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int mod=1e6;\nstruct node{//\u7531\u4e8e\u6ca1\u6709\u91cd\u590d\u6240\u4ee5\u4e0d\u7528\u7ef4\u62a4\u6570\u91cf\n    int f,c[2],v;\n}t[80010];\nint n,k,s,t1,t2,rt,cnt,a,ans;\nvoid Rotate(int x){//\u65cb\u8f6c\n    int y=t[x].f,z=t[y].f;\n    int c=t[y].c[1]==x,gc=t[z].c[1]==y;\n    t[z].c[gc]=x;\n    t[x].f=z;\n    t[y].c[c]=t[x].c[c^1];\n    t[t[x].c[c^1]].f=y;\n    t[x].c[c^1]=y;\n    t[y].f=x;\n}\nvoid Splay(int x,int f){//\u4f38\u5c55\n    while(t[x].f!=f){\n        int y=t[x].f,z=t[y].f;\n        if(z==f){\n            Rotate(x);\n        }else{\n            int c=t[y].c[1]==x,gc=t[z].c[1]==y;\n            if(c==gc){\n                Rotate(y);\n            }else{\n                Rotate(x);\n            }\n            Rotate(x);\n        }\n    }\n    if(f==0){\n        rt=x;\n    }\n}\nvoid Create(int &x,int f,int v){//\u65b0\u5efa\u8282\u70b9\n    x=++cnt;\n    t[x].f=f;\n    t[x].c[0]=0;\n    t[x].c[1]=0;\n    t[x].v=v;\n}\nvoid Insert(int x){//\u52a0\u5165\n    if(!rt){\n        Create(rt,0,x);\n    }else{\n        int nw=rt;\n        while(nw){\n            if(t[nw].v>x){\n                if(!t[nw].c[0]){\n                    Create(t[nw].c[0],nw,x);\n                    nw=t[nw].c[0];\n                    break;\n                }\n                nw=t[nw].c[0];\n            }else{\n                if(!t[nw].c[1]){\n                    Create(t[nw].c[1],nw,x);\n                \tnw=t[nw].c[1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnw=t[nw].c[1];\n\t\t\t}\n\t\t}\n\t\tSplay(nw,0);\n\t}\n}\nvoid Find(int x){//\u67e5\u627e\n\tint nw=rt;\n\twhile(nw){\n\t\tif(t[nw].v==x){\n\t\t\tbreak;\n\t\t}\n\t\tif(t[nw].v>x){\n\t\t\tif(!t[nw].c[0]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnw=t[nw].c[0];\n\t\t}else{\n\t\t\tif(!t[nw].c[1]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnw=t[nw].c[1];\n\t\t}\n\t}\n\tSplay(nw,0);\n}\nint Next(int x,int op){//\u524d\u9a71/\u540e\u7ee7\n\tFind(x);\n\tif(t[rt].v>x&&op==1){\n\t\treturn rt;\n\t}\n\tif(t[rt].v<x&&op==0){\n\t\treturn rt;\n\t}\n\tint nw=t[rt].c[op];\n\twhile(nw&&t[nw].c[op^1]){\n\t\tnw=t[nw].c[op^1];\n\t}\n\treturn nw;\n}\nvoid Delete(int x){//\u5220\u9664\n\tint lst=Next(t[x].v,0),nxt=Next(t[x].v,1);\n\tif(lst&&nxt){\n\t\tSplay(lst,0);\n\t\tSplay(nxt,lst);\n\t\tt[t[nxt].c[0]].f=0;\n\t\tt[nxt].c[0]=0;\n\t}else if(lst){\n\t\tSplay(lst,0);\n\t\tt[t[lst].c[1]].f=0;\n\t\tt[lst].c[1]=0;\n\t}else if(nxt){\n\t\tSplay(nxt,0);\n\t\tt[t[nxt].c[0]].f=0;\n\t\tt[nxt].c[0]=0;\n\t}else{\n\t\trt=0;\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d\",&k,&a);\n\t\tif(k==1){\n\t\t\ts++;\n\t\t\tif(s<=0){\n\t\t\t\tFind(a);\n\t\t\t\tif(t[rt].v==a){//\u5b58\u5728\u76f8\u7b49\u7279\u5f81\u503c\n\t\t\t\t\tDelete(rt);\n\t\t\t\t}else{\n\t\t\t\t\tt1=Next(a,0);\n\t\t\t\t\tt2=Next(a,1);\n\t\t\t\t\tif(t1&&t2){\n\t\t\t\t\t\tif(a-t[t1].v<=t[t2].v-a){//\u7531\u4e8e\u76f8\u7b49\u65f6\u4f18\u5148\u9886\u517b\u5c0f\u7684,\u6240\u4ee5\u662f<=\n\t\t\t\t\t\t\tans+=a-t[t1].v;\n\t\t\t\t\t\t\tDelete(t1);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tans+=t[t2].v-a;\n\t\t\t\t\t\t\tDelete(t2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(t1){\n\t\t\t\t\t\tans+=a-t[t1].v;\n\t\t\t\t\t\tDelete(t1);\n\t\t\t\t\t}else if(t2){\n\t\t\t\t\t\tans+=t[t2].v-a;\n\t\t\t\t\t\tDelete(t2);\n\t\t\t\t\t}else{//\u53ea\u6709\u4e00\u4e2a\u70b9\n\t\t\t\t\t\tans+=abs(t[rt].v-a);\n\t\t\t\t\t\tDelete(rt);\n\t\t\t\t\t}\n\t\t\t\t\tans%=mod;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tInsert(a);\n\t\t\t}\n\t\t}else{//\u8bfb\u5165\u72d7,\u7c7b\u4f3c\u4eba\n\t\t\ts--;\n\t\t\tif(s>=0){\n\t\t\t\tFind(a);\n\t\t\t\tif(t[rt].v==a){\n\t\t\t\t\tDelete(rt);\n\t\t\t\t}else{\n\t\t\t\t\tt1=Next(a,0);\n\t\t\t\t\tt2=Next(a,1);\n\t\t\t\t\tif(t1&&t2){\n\t\t\t\t\t\tif(a-t[t1].v<=t[t2].v-a){\n\t\t\t\t\t\t\tans+=a-t[t1].v;\n\t\t\t\t\t\t\tDelete(t1);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tans+=t[t2].v-a;\n\t\t\t\t\t\t\tDelete(t2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(t1){\n\t\t\t\t\t\tans+=a-t[t1].v;\n\t\t\t\t\t\tDelete(t1);\n\t\t\t\t\t}else if(t2){\n\t\t\t\t\t\tans+=t[t2].v-a;\n\t\t\t\t\t\tDelete(t2);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tans+=abs(t[rt].v-a);\n\t\t\t\t\t\tDelete(rt);\n\t\t\t\t\t}\n\t\t\t\t\tans%=mod;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tInsert(a);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1541130794,
        "uid": 26294,
        "name": "xryjr233",
        "ccfLevel": 9,
        "title": "[2018.11.2]\u9898\u89e3 LuoguP2286/BZOJ1208 [HNOI2004]\u5ba0\u7269\u6536\u517b\u6240(\u5e73\u8861\u6811/Splay)"
    },
    {
        "content": "\u6b64\u9898\u8fd8\u662f\u5f88\u88f8\u7684;\n\u4ec0\u4e48\u5e73\u8861\u6811\uff0csplay\u3002\u3002\u3002~~\u6211\u90fd\u4e0d\u4f1a~~\n\u849f\u84bb\u540c\u6837\u53ea\u4f1astl,\u770b\u4e86\u4e00\u4e0b\u9898\u89e3\uff0c\u4e5f\u6709\u5927\u4f6c\u7528stl\u89e3\n\u4f46\u662f\u849f\u84bb\u8868\u793a\u4e0d\u8981\u8fd9\u4e48\u957f\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u7cbe\u7b80\u4e00\u70b9\n\n**\n\u660e\u786e\u7528 \uff1a set**\n\n**\n\u53ef\u4ee5\u5b9a\u4e49\u4e24\u4e2a \u8fed\u4ee3\u5668\tit\uff0cit2**\n\n**\u518d\u7528\u5176\u8fdb\u884c\u64cd\u4f5c\u5c31\u7b80\u5355\u7684\u591a\u5e76\u4e14\u5bf9\u4e8e\u5ba0\u7269\u4e0e\u9886\u517b\u4eba\u6765\u8bf4\u64cd\u4f5c\u51e0\u4e4e\u662f\u76f8\u540c\u7684**\n\n\u62ff\u5ba0\u7269\u6765\u8bf4\u5427\uff1a\n\t\u5982\u679c\u6ca1\u6709\u9886\u517b\u4eba\uff0c\u5373 b \u4e3a\u7a7a\uff0c\u76f4\u63a5insert \n    \u5982\u679c\u6709\u9886\u517b\u4eba\uff0c\u5c31\u63d2\u5165\u5ba0\u7269\u7684\u503c\uff0c\u5e76\u67e5\u627e\u5b83\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u8981\u5224\u65ad y\u662f\u5426\u662f\u8fb9\u754c\uff0c\u5426\u5219\u4f1a\u51fa\u9519\uff09\uff0c\u8ba1\u7b97\u6700\u5c0f\u503c\uff0c\u5e76\u5220\u9664 \u5ba0\u7269\u7684\u503c\uff0c\u548c\u8fd9\u4e2a\u524d\u9a71\u6216\u540e\u7ee7\u518d\u7d2f\u52a0\u53d6\u6a21.\n ### \u8be6\u7ec6\u89c1\u4ee3\u7801:\n\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nset<int>a;set<int>b; \nset<int>:: iterator it,it2;\nint x,y,n;\nlong long ans,mod=1000000;\nint main(){\n    cin>>n>>x>>y; \n    if(x==0)a.insert(y);\t//\u7279\u6b8a\u5904\u7406\u7b2c\u4e00\u4e2a\n    else b.insert(y);\n    for(int i=2;i<=n;i++){\n        scanf(\"%d %d\",&x,&y);\n        if(x==0){//\u5ba0\u7269\n            if(b.empty()){\ta.insert(y);continue;\t}\n            b.insert(y);\tit=b.find(y);\tit2=it;\n            int minn1=1<<30,minn2=1<<30;\n            if(it!=b.begin()){\tit--;\t//\u662f\u5426\u4e3a\u7b2c\u4e00\u4e2a\uff0c\u6709\u6ca1\u6709\u524d\u9a71\tminn1=abs(y-*it);\t}\n            it2++;//\u662f\u5426\u4e3a\u6700\u540e\u4e00\u4e2a\uff0c\u6709\u6ca1\u6709\u540e\u7ee7\n            if(it2!=b.end())\tminn2=abs(y-*it2);\n            if(minn1<=minn2)//\u6c42\u5f97\u6700\u5c0f\u503c\uff0c\u5e76\u5220\u9664\n            \t b.erase(y),b.erase(*it),ans+=minn1;\n            else b.erase(y),b.erase(*it2),ans+=minn2;\n            ans%=mod;\n        }\n        else{//\u9886\u517b\u4eba\n            if(a.empty()){\tb.insert(y);continue;\t}\n            a.insert(y);\tit=a.find(y);\tit2=it;\n            int minn1=1<<30,minn2=1<<30;\n            if(it!=a.begin()){\tit--;\t\tminn1=abs(y-*it);\t}\n            it2++;\n            if(it2!=a.end())\tminn2=abs(y-*it2);\n            if(minn1<=minn2)\ta.erase(y),a.erase(*it),ans+=minn1;\n            else a.erase(y),a.erase(*it2),ans+=minn2;\n            ans%=mod;\n        }\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1539347367,
        "uid": 91499,
        "name": "linz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u81f4\u656c\u4e00\u4e0b\u697c\u4e0byyb\u5927\u4f6c\uff08\u6211\u7684splay\u57fa\u672c\u5c31\u662f\u4ed6\u6559\u7684\uff09\n\n\u5148\u8bb2\u4e00\u4e0b\u601d\u8def\uff1a\u7528\u4e00\u4e2a\u53d8\u91cfk\uff080\u62161\uff09\u6765\u8868\u793a\u5f53\u524d\u7684splay\u4e2d\u5230\u5e95\u5b58\u7684\u662f\u987e\u5ba2\u8fd8\u662f\u5ba0\u7269\u3002\u5982\u679c\u8bfb\u5165\u548ck\u4e00\u6837\uff0c\u76f4\u63a5push\uff0c\u5982\u679c\u4e0d\u4e00\u6837\uff0c\u627e\u5230\u4e4b\u540e\u5220\u9664\u5e76\u7d2f\u52a0\u7b54\u6848\n\n\u8bb2\u51e0\u4e2a\u6ce8\u610f\u70b9\n\n1.\u5982\u679csplay\u4e3a\u7a7a\u65f6\uff0c\u76f4\u63a5\u66f4\u6539k\n\n2.\u627e\u8bfb\u5165\u5ba0\u7269\uff08\u6216\u987e\u5ba2\uff09\u7684\u7279\u5f81\u503c\u7684\u524d\u7f00\u548c\u540e\u7f00\u65f6\uff0c\u8bb0\u5f97\u662f>=\u548c<=\uff0c\u5982\u679cpop\u7528\u4e86\u627e\u524d\u7f00\u548c\u540e\u7f00\u7684\u8bdd\uff08\u5982\u697c\u4e0byyb\u5927\u4f6c\uff09\uff0c\u8bb0\u5f97\u5199\u4e24\u4e2a\u627e\u524d\u7f00\u548c\u540e\u7f00\u7684\uff08\u56e0\u4e3a\u4e24\u4e2a\u4e0d\u4e00\u6837\uff09\n\n4.pop\u7684\u65f6\u5019pushup\u4e00\u4e0b\uff08\u9b3c\u77e5\u9053\u6211\u6ca1\u5199pushup\u7684\u4ee3\u7801\u600e\u4e48\u8fc7\u6a21\u677f\u7684\uff09\n\n3.\u53ca\u65f6\u6a21\uff0c\u53ca\u65f6\u6a21\uff0c\u53ca\u65f6\u819c\uff01\uff01\uff01\uff08\u56e0\u4e3a\u975e\u5e38\u91cd\u8981\u6240\u4ee5\u8bf4\u4e09\u904d\uff09\n\n\u4e0a\u4ee3\u7801\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cctype>\n#include<cmath>\nusing namespace std;\n#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<15,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<15],*p1=buf,*p2=buf;\nconst int inf=0x3f3f3f3f,N=100050;\ninline int read(){\n\t#define num ch-'0'\n\tchar ch;bool flag=0;int res;\n\twhile(!isdigit(ch=getc()))\n\t(ch=='-')&&(flag=true);\n\tfor(res=num;isdigit(ch=getc());res=res*10+num);\n\t(flag)&&(res=-res);\n\t#undef num\n\treturn res;\n}\nstruct Splay{\n    struct node{\n        int v,father,ch[2];\n        int sum,recy;\n    } e[N];\n    int n,root,ans,k=-1;\n    void update(int x){\n        e[x].sum=e[e[x].ch[0]].sum+e[e[x].ch[1]].sum+e[x].recy;\n    }\n    int identify(int x){\n        return e[e[x].father].ch[1]==x;\n    }\n    void connect(int x,int f,int son){\n        e[x].father=f,e[f].ch[son]=x;\n    }\n    void rotate(int x){\n        int y=e[x].father,z=e[y].father;\n        int yson=identify(x),zson=identify(y);\n        int b=e[x].ch[yson^1];\n        connect(b,y,yson),connect(y,x,(yson^1)),connect(x,z,zson);\n        update(y),update(x);\n    }\n    void splay(int x,int goal){\n        while(e[x].father!=goal){\n            int y=e[x].father,z=e[y].father;\n            if(z!=goal)\n            (identify(x)^identify(y))?rotate(x):rotate(y);\n            rotate(x);\n        }\n        if(goal==0) root=x;\n    }\n    void push(int v){\n        int now=root,f=0;\n        while(now&&e[now].v!=v){\n            f=now;\n            now=e[now].ch[v>e[now].v];\n        }\n        if(now) e[now].recy++;\n        else{\n            now=++n;\n            if(f) e[f].ch[v>e[f].v]=now;\n            e[n].ch[0]=e[n].ch[1]=0;\n            e[n].father=f,e[n].v=v;\n            e[n].recy=e[n].sum=1;\n        }\n        splay(now,0);\n    }\n    void find(int v){\n        int now=root;\n        if(!now) return;\n        while(e[now].ch[v>e[now].v]&&v!=e[now].v)\n        now=e[now].ch[v>e[now].v];\n        splay(now,0);\n    }\n    int Next(int v,int f){\n        find(v);\n        int now=root;\n        if((e[now].v>v&&f)||(e[now].v<v&&!f)) return now;\n        now=e[now].ch[f];\n        while(e[now].ch[f^1]) now=e[now].ch[f^1];\n        return now;\n    }\n    int Next2(int v,int f){\n        find(v);\n        int now=root;\n        if((e[now].v>=v&&f)||(e[now].v<=v&&!f)) return now;\n        now=e[now].ch[f];\n        while(e[now].ch[f^1]) now=e[now].ch[f^1];\n        return now;\n    }\n    void pop(int v){\n        int lower=Next(v,0);\n        int upper=Next(v,1);\n        splay(lower,0),splay(upper,lower);\n        int del=e[upper].ch[0];\n        if(e[del].recy>1){\n            e[del].recy--;\n            splay(del,0);\n        }\n        else e[upper].ch[0]=0;\n        update(upper),update(lower);\n    }\n    void insert(int v){\n        int lower=Next2(v,0);\n        int upper=Next2(v,1);\n        int a=abs(e[lower].v-v),b=abs(e[upper].v-v);\n        if(a==b)\n        ans=(ans+a)%1000000,pop(e[lower].v);\n        else\n        ans=(ans+min(a,b))%1000000,pop(e[a<b?lower:upper].v);\n\t}\n    void solve(){\n    \tint a,b;\n    \ta=read(),b=read();\n    \tif(e[root].sum==2){\n    \t\tk=a,push(b);return;\n\t\t}\n\t\tif(k==a){push(b);return;}\n\t\telse insert(b);\n\t}\n    void init(){n=root=0;push(inf),push(-inf);}\n}F;\nint n;\nint main(){\n\t//freopen(\"testdata.in\",\"r\",stdin);\n\tF.init();n=read();\n\tfor(int i=1;i<=n;i++) F.solve();\n\tprintf(\"%d\",F.ans);\n\treturn 0;\n}\n```",
        "postTime": 1531204346,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "~~\u54ce\u5440\u4e00\u4e0d\u5c0f\u5fc3\u62ff\u4e86\u4e2arank1\u8fd8\u6bd4\u7b2c\u4e8c\u5feb9\u500d\u54622333~~\n\n\u8fd9\u9053\u9898\u76ee\u6bd4\u8f83\u7b80\u5355\n\n\u8bf7\u9009\u62e9\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\n\n\u652f\u6301\u63d2\u5165\u3001\u5220\u9664\u3001\u6c42\u524d\u9a71\u540e\u7ee7\n\nsplay\u88f8\u9898\n\n\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff1a\n\n\u5728\u6c42\u524d\u9a71\u540e\u7ee7\u7684\u65f6\u5019\u589e\u52a0\u4e24\u4e2a\u54e8\u5175\u8282\u70b9\n\n\u8fd9\u6837\u5c31\u4e0d\u4f1a\u52a0\u7206\u4e86\n\n[\u4ee3\u7801\u5728\u8fd9\u91cc](http://www.cnblogs.com/zwfymqz/p/7895794.html)\n",
        "postTime": 1511601106,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u53c8\u662f\u4e00\u9053\u6ca1\u6709fhq Treap\u7684\u9898\u89e3\u7684\u9898\u3002\u3002\u3002\n\n\n\u6765\u6765\u6765\u8ba9\u6211\u8865\u4e0a\uff01\n\n\n#\u601d\u8def\n\n\n\u7528\u4e00\u9897fhq Treap\u7ef4\u62a4\u7279\u6b8a\u503c\uff0c\u518d\u7528\u4e00\u4e2afla\u8bb0\u5f55\u8fd9\u9897\u5e73\u8861\u6811\u4e2d\u5b58\u7684\u662f\u5ba0\u7269\u8fd8\u662f\u987e\u5ba2\n\n\n\u5f53\u6811\u88ab\u6e05\u7a7a\u65f6\uff0cfla^=1;\n\n\n\u5176\u4ed6\u5c31\u662ffhq Treap\u7684\u57fa\u672c\u64cd\u4f5c\u4e86\uff0c\u6c42\u524d\u9a71\u540e\u7ee7\u548c\u5220\u9664\u4ec0\u4e48\u7684\n\n\n\u5b89\u5229\u535a\u5ba2\uff1a[\u51cf\u7ef4](http://www.cnblogs.com/rir1715/)\n\n\n\u4ee3\u7801\u7565\u4e11\n\n\n\n\n\n\n\n\n\n```cpp\n//by \u51cf\u7ef4\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<cstdlib>\n#include<ctime>\n#include<cmath>\n#include<map>\n#include<bitset>\n#include<algorithm>\n#define ll long long\n#define maxn 80005\n#define mod 1000000\nusing namespace std;\nint n,m,sz,rt,fla=-1,ans,siz[maxn],pri[maxn],son[maxn][2],val[maxn];\nvoid upda(int x)\n{\n    siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n}\nint newnode(int x)\n{\n    siz[++sz]=1;\n    pri[sz]=rand();\n    val[sz]=x;\n    return sz;\n}\nvoid spli(int now,int k,int &x,int &y)\n{\n    if(!now)x=y=0;\n    else{\n        if(val[now]<=k)\n            x=now,spli(son[now][1],k,son[now][1],y);\n        else\n            y=now,spli(son[now][0],k,x,son[now][0]);\n        upda(now);\n    }\n}\nint merge(int x,int y)\n{\n    if(!x||!y)return x+y;\n    if(pri[x]<pri[y])\n    {\n        son[x][1]=merge(son[x][1],y);\n        upda(x);\n        return x;\n    }else{\n        son[y][0]=merge(x,son[y][0]);\n        upda(y);\n        return y;\n    }\n}\nint suc(int x)\n{\n    while(son[x][1])x=son[x][1];\n    return x;\n}\nint pre(int x)\n{\n    while(son[x][0])x=son[x][0];\n    return x;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    int x,y,z,h,a,b,fr,to,del,delt;\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d%d\",&a,&b);\n        if(fla==-1)fla=a;\n        if(a==0){\n            if(fla==0){\n                spli(rt,b,x,y);\n                rt=merge(merge(x,newnode(b)),y);\n            }else{\n                spli(rt,b,x,y);\n                fr=0,to=0;\n                if(x)fr=suc(x);\n                if(y)to=pre(y);\n                if(!x||!y)del=fr+to;\n                else if(b-val[fr]==val[to]-b)del=fr;\n                else if(b-val[fr]<val[to]-b)del=fr;\n                else if(b-val[fr]>val[to]-b)del=to;\n                delt=val[del];\n                rt=merge(x,y);\n                spli(rt,delt,x,y);\n                spli(x,delt-1,z,h);\n                h=merge(son[h][0],son[h][1]);\n                rt=merge(merge(z,h),y);\n                ans+=abs(delt-b);\n                ans%=mod;\n            }\n        }else{\n            if(fla==1){\n                spli(rt,b,x,y);\n                rt=merge(merge(x,newnode(b)),y);\n            }else{\n                spli(rt,b,x,y);\n                fr=0,to=0;\n                if(x)fr=suc(x);\n                if(y)to=pre(y);\n                if(!x||!y)del=fr+to;\n                else if(b-val[fr]==val[to]-b)del=fr;\n                else if(b-val[fr]<val[to]-b)del=fr;\n                else if(b-val[fr]>val[to]-b)del=to;\n                delt=val[del];\n                rt=merge(x,y);\n                spli(rt,delt,x,y);\n                spli(x,delt-1,z,h);\n                h=merge(son[h][0],son[h][1]);\n                rt=merge(merge(z,h),y);\n                ans+=abs(delt-b);\n                ans%=mod;\n            }\n        }\n        if(siz[rt]==0)fla^=1;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1511600605,
        "uid": 35870,
        "name": "\u51cf\u7ef4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "Splay\u88f8\u9898\uff0c\u5bf9\u4e8e\u627e\u6700\u8fd1\u7684\u6570\uff0c\u53ef\u5148\u5224\u65ad\u5728\u6811\u4e0a\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u5373t[...].n>1\uff0c\u90a3\u4e48\uff0c\u7edd\u5bf9\u503c\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\uff1b\u5426\u5219\uff0c\u627e\u524d\u9a71\u6216\u540e\u7ee7\uff0c\u5728\u5224\u65ad\u90a3\u4e2a\u7edd\u5bf9\u503c\u54ea\u4e2a\u6700\u5c0f\uff0c\u5c31\u5220\u9664\u90a3\u4e2a\u8282\u70b9\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u662fO(nlogn)\n\n        \n        \n      \n      \n      \n    \n      \n  \n  \n\n\n  \n```cpp\n#include<cstdio>\n#define mod(n) ((n)%1000000)\n    struct node{int d,f,c,n,son[2];} t[100000];\n    int bz,root=0,total=0;\n    long long ans=0;\nvoid ups(int x)   \n{   \n    t[x].c=t[t[x].son[0]].c+t[t[x].son[1]].c+t[x].n;\n}   \nvoid add(int d,int y)  \n{   \n    total++;   \n    t[total].d=d;  \n    t[total].f=y;   \n    t[total].n=t[total].c=1;   \n    t[total].son[0]=t[total].son[1]=0; \n}\nvoid rot(int x,int w)   \n{   \n    int y=t[x].f,yy=t[y].f;   \n    t[y].son[1-w]=t[x].son[w];  \n    if(t[x].son[w]!=0) t[t[x].son[w]].f=y;  \n    if(t[yy].son[0]==y) t[yy].son[0]=x;   \n    if(t[yy].son[1]==y) t[yy].son[1]=x;  \n    t[x].f=yy;   \n    t[x].son[w]=y;  \n    t[y].f=x;   \n    ups(y);  \n    ups(x);   \n}   \nvoid splay(int x,int rt)  \n{   \n    while(t[x].f!=rt)  \n    {   \n        int y=t[x].f,yy=t[y].f;  \n        if(yy==rt)  \n        {   \n            if(t[y].son[0]==x) rot(x,1); else rot(x,0);   \n        }   \n        else\n        {   \n            if(t[yy].son[0]==y)   \n            {   \n                if(t[y].son[0]==x) {rot(y,1);rot(x,1);}   \n                else {rot(x,0);rot(x,1);}   \n            }   \n            else\n            {   \n                if(t[y].son[1]==x) {rot(y,0);rot(x,0);}   \n                else {rot(x,1);rot(x,0);}   \n            }   \n        }   \n    }   \n    if(rt==0) root=x;   \n}  \nint findip(int d)  \n{   \n    int y=root;   \n    while(t[y].d!=d)   \n    {   \n        if(d<t[y].d)   \n        {   \n            if(t[y].son[0]==0) break;   \n            else y=t[y].son[0];   \n        }   \n        else\n        {   \n            if(t[y].son[1]==0) break;   \n            else y=t[y].son[1];   \n        }   \n    }   \n    return y;   \n}   \nvoid ins(int d)  \n{   \n    if(root==0)  \n    {  \n        add(d,0);  \n        root=total;  \n        return; \n    }   \n    int y=findip(d);   \n    if(t[y].d==d)  \n    {  \n        t[y].n++;  \n        ups(y);  \n        splay(y,0);  \n        return;  \n    }   \n    add(d,y);   \n    if(d<t[y].d) t[y].son[0]=total; else t[y].son[1]=total;   \n    ups(y);  \n    splay(total,0);   \n    return;   \n} \nint findqianqu(int d)  \n{   \n    int y=findip(d);   \n    splay(y,0);   \n    if(d<=t[y].d)\n    {\n        y=t[y].son[0];\n        while(t[y].son[1]!=0) y=t[y].son[1];   \n    }   \n    return y;   \n}   \nint findhouji(int d)  \n{   \n    int y=findip(d);   \n    splay(y,0);   \n    if(t[y].d<=d)   \n    {   \n        y=t[y].son[1];   \n        while(t[y].son[0]!=0) y=t[y].son[0];   \n    }   \n    return y;   \n} \nint min(int x,int y) \n{ \n    return x<y?x:y; \n} \nint abs(int x) \n{ \n    return x>=0?x:-x; \n}\nvoid del(int y) \n{\n    splay(y,0);  \n    if(t[y].n>1)  \n    { \n        t[y].n--;  \n        ups(y); \n        return; \n    } \n    if(t[y].son[0]== 0&& t[y].son[1]==0) \n    { \n        root=total=0; \n    } \n    else if(t[y].son[0]==0&&t[y].son[1]!=0) \n    { \n        root=t[y].son[1]; \n        t[t[y].son[1]].f=0; \n    }  \n    else if(t[y].son[0]!=0&&t[y].son[1]==0) \n    { \n        root=t[y].son[0]; \n        t[t[y].son[0]].f=0; \n    }  \n    else if(t[y].son[0]!=0&&t[y].son[1]!=0)  \n    {  \n        int p=t[y].son[0];  \n        while(t[p].son[1]!=0) p=t[p].son[1];  \n        splay(p,y);  \n        t[p].son[1]=t[y].son[1];  \n        t[t[p].son[1]].f= p;  \n        root=p; \n        t[p].f=0;  \n        ups(p);  \n    }  \n} \nvoid work(int d) \n{\n    int y=findip(d);\n    if(t[y].n>1)\n    {\n        t[y].n--;\n        return;\n    }\n    int t1=findqianqu(d),t2=findhouji(d);\n    if(t1==0&&t2!=0) ans=mod(ans+abs(t[t2].d-d)),del(t2); \n    if(t1!=0&&t2==0) ans=mod(ans+abs(d-t[t1].d)),del(t1);\n    if(t1!=0&&t2!=0)\n    {\n        if(abs(d-t[t1].d)<abs(t[t2].d-d)) ans=mod(ans+abs(d-t[t1].d)),del(t1);\n        else ans=mod(ans+abs(t[t2].d-d)),del(t2);\n    }\n} \nint main() \n{ \n    int n; \n    scanf(\"%d\",&n); \n    for(int i=1;i<=n;i++)   \n    {\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        if(root==0) bz=x;\n        if(bz==x) ins(y); else work(y);\n    }\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1494644448,
        "uid": 31955,
        "name": "Mark_ZZY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u6709\u7f29\u8fdb\u89c1[\u8fd9\u91cc](http://www.yhzq-blog.cc/bzoj-1208-hnoi2004\u5ba0\u7269\u6536\u517b\u6240/)\n\n\n\u9898\u89e3\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u67e5\u8be2\uff0c\u53ea\u6709\u53ef\u80fd\u4e00\u68f5splay\u4e2d\u5168\u662f\u5ba0\u7269\u6216\u4eba\uff0c\u7acb\u4e00\u4e2aflag\uff0c\u8868\u793a\u73b0\u5728\u6811\u91cc\u662f\u5ba0\u7269\u8fd8\u662f\u4eba\uff0c\u6bcf\u6b21\u67e5\u8be2\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u627e\u5230\u7edd\u5bf9\u503c\u5c0f\u7684\u3002\n\n\nflag\u66f4\u65b0\uff1aroot\u4e3a0\n\n\n\u6ce8\uff1a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0c\u975e\u5e38\u826f\u5fc3\u3002\u3002\u3002\n\n\n\u4ee3\u7801\u5199\u5f97\u53c8\u81ed\u53c8\u957f\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#define Maxn 500000\nusing namespace std;\nint root,sz,siz[Maxn],f[Maxn],ch[Maxn][2],key[Maxn];\nint get(int x)\n{\n    return ch[f[x]][1]==x;\n}\nvoid update(int x)\n{\n    siz[x]=siz[ch[x][0]]+siz[ch[x][1]];\n}\nvoid rotate(int x)\n{\n    int k=get(x),fa=f[x],fafa=f[fa];\n    ch[fa][k]=ch[x][!k];f[ch[x][!k]]=fa;\n    ch[x][!k]=fa;f[fa]=x;\n    f[x]=fafa;\n    if (fafa)\n        ch[fafa][ch[fafa][1]==fa]=x;\n    update(fa);update(x);\n}\nvoid Splay(int x)\n{\n    int now=x;\n    for (int fa;fa=f[now];rotate(now))\n        if (f[fa])\n            rotate(get(fa)==get(now)?fa:now);\n    root=now;\n}\nvoid create(int v)\n{\n    sz++;\n    ch[sz][0]=ch[sz][1]=f[sz]=0;\n    siz[sz]=1;\n    key[sz]=v;\n}\nvoid insert(int v)\n{\n    if (!root)\n    {\n        create(v);\n        root=sz;\n        return;\n    }\n    int now=root,fa=0;\n    while(1)\n    {\n        fa=now;\n        now=ch[fa][key[fa]<v];\n        if (!now)\n        {\n            create(v);\n            f[sz]=fa;\n            ch[fa][v>key[fa]]=sz;\n            update(fa);\n            Splay(sz);\n            break;\n        }\n    }\n}\nint tree_max(int x)\n{\n    while(ch[x][1])    x=ch[x][1];\n    return x;\n}\nint tree_min(int x)\n{\n    while(ch[x][0]) x=ch[x][0];\n    return x;\n}\nint pre(int x)\n{\n    return tree_max(ch[x][0]);\n}\nint nex(int x)\n{\n    return tree_min(ch[x][1]);\n}\nvoid Splayv(int v)\n{\n    int now=root,fa=0\uff1b\n    while(1)\n    {\n        if (key[now]==v)\n        {\n            Splay(now);\n            return;\n        }\n        now=ch[now][v>key[now]];\n    }\n}\nvoid clear(int x)\n{\n    ch[x][0]=ch[x][1]=f[x]=siz[x]=key[x]=0;\n}\nvoid del(int v)\n{\n    Splayv(v);\n    if (!ch[root][1] && !ch[root][0])\n    {\n        clear(root);\n        root=0;\n        return;\n    }\n//    if (!ch[root][1] || !ch[root][0])\n//    {\n//        int temp=root,root=!ch[root][1]?ch[root][0]:ch[root][1];\n//        f[root]=0;\n//        clear(temp);\n//        return;\n//    }\n    if (!ch[root][1])\n    {\n        int temp=root;\n        root=ch[root][0];\n        f[root]=0;\n        clear(temp);\n        return;\n    }\n    else\n    if (!ch[root][0])\n    {\n        int temp=root;\n        root=ch[root][1];\n        f[root]=0;\n        clear(temp);\n        return;\n    }\n    int pre1=pre(root),temp=root;\n    Splay(pre1);\n    ch[root][1]=ch[temp][1];\n    f[ch[temp][1]]=root;\n    clear(temp);\n    update(root);\n}\nint findpre(int v)\n{\n    insert(v);\n    int k=pre(root);\n    del(v);\n    return k;\n}\nint findnex(int v)\n{\n    insert(v);\n    int k=nex(root);\n    del(v);\n    return k;\n}\nmain()\n{\n    int n,fx,x,flag,ans=0;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d\",&fx,&x);\n        if (!root)\n            flag=fx;\n        if (fx==flag)\n            insert(x);\n        else\n        {\n            int p,p1=findpre(x);\n            int p2=findnex(x);\n            if (!p2||p1&&x-key[p1]<=key[p2]-x) p=p1;\n            else\n            p=p2;\n            ans=(ans+abs(key[p]-x))%1000000;\n            del(key[p]);\n        }\n    }\n    printf(\"%d\",ans);\n}\n\n```",
        "postTime": 1482148921,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5f88\u591a\u7528Treap\u505a\u7684\u9898\u7528STL\u91cc\u7684vector\u914d\u5408lower_bound\u4e5f\u80fd\u5f88\u597d\u89e3\u51b3\u3002\u8fd9\u4e2a\u9898\u76ee\u672c\u8eab\u7684\u601d\u8def\u5c31\u662f\u5f00\u4e24\u68f5\u5e73\u8861\u6811\uff0c\u4e00\u68f5\u5b58\u5ba0\u7269\uff0c\u4e00\u68f5\u5b58\u987e\u5ba2\u3002\u9898\u76ee\u91cc\u6709\u4e00\u53e5\u8bdd\uff0c\u201c\u540c\u4e00\u65f6\u95f4\u5446\u5728\u6536\u517b\u6240\u4e2d\u7684\uff0c\u8981\u4e48\u5168\u662f\u5ba0\u7269\uff0c\u8981\u4e48\u5168\u662f\u9886\u517b\u8005\u201d\u3002\u6240\u4ee5\u6211\u4eec\u5728\u6709\u65b0\u5ba0\u7269\u65f6\uff0c\u5728\u987e\u5ba2\u6811\u91cc\u627e\u4e00\u4e2a\u6700\u7b26\u5408\u8981\u6c42\u7684\u987e\u5ba2\u4e0e\u5ba0\u7269\u914d\u5bf9\uff0c\uff08\u5b9e\u9645\u4e0a\u662f\u7528\u5f53\u524d\u7684\u987e\u5ba2\u5728\u5ba0\u7269\u6811\u91cc\u627e\u4e00\u4e2a\u524d\u9a71\uff09\u5728\u6709\u65b0\u987e\u5ba2\u65f6\u505a\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u662f\u628a\u5ba0\u7269\u6311\u987e\u5ba2\u6362\u6210\u4e86\u987e\u5ba2\u6311\u5ba0\u7269\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int>a;\nvector<int>b;\nint n,t,tot;\ninline int read()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar())\n\t\tif(x=='-')\n\t\t\tf=-1;\n\tfor(;isdigit(ch);ch=getchar())\n\t\tx=x*10+ch-'0';\n\treturn x*f;\n}\nint main()\n{\n\tn=read();\n\ta.insert(lower_bound(a.begin(),a.end(),+214748364),+214748364);\n\ta.insert(lower_bound(a.begin(),a.end(),-214748364),-214748364);\n\tb.insert(lower_bound(b.begin(),b.end(),+214748364),+214748364);\n\tb.insert(lower_bound(b.begin(),b.end(),-214748364),-214748364);\n\tfor(int i=1; i<=n; i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tif(x==0)\n\t\t{\n\t\t\tif(b.size()<=2)\n\t\t\t\ta.insert(lower_bound(a.begin(),a.end(),y),y);\n\t\t\telse\n\t\t\t{\n\t\t\t\tint pre=b[lower_bound(b.begin(),b.end(),y)-b.begin()-1];\n\t\t\t\tint nxt=b[upper_bound(b.begin(),b.end(),y)-b.begin()];\n\t\t\t\tint xx=abs(pre-y),yy=abs(nxt-y);\n\t\t\t\tif(xx<=yy)\n\t\t\t\t{\n\t\t\t\t\ttot+=xx;\n\t\t\t\t\tif(tot>=1000000)\n\t\t\t\t\t\ttot%=1000000;\n\t\t\t\t\tb.erase(lower_bound(b.begin(),b.end(),pre));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttot+=yy;\n\t\t\t\t\tif(tot>=1000000)\n\t\t\t\t\t\ttot%=1000000;\n\t\t\t\t\tb.erase(lower_bound(b.begin(),b.end(),nxt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(x==1)\n\t\t{\n\t\t\tif(a.size()<=2)\n\t\t\t\tb.insert(lower_bound(b.begin(),b.end(),y),y);\n\t\t\telse\n\t\t\t{\n\t\t\t\tint pre=a[lower_bound(a.begin(),a.end(),y)-a.begin()-1];\n\t\t\t\tint nxt=a[upper_bound(a.begin(),a.end(),y)-a.begin()];\n\t\t\t\tint xx=abs(pre-y),yy=abs(nxt-y);\n\t\t\t\tif(xx<=yy)\n\t\t\t\t{\n\t\t\t\t\ttot+=xx;\n\t\t\t\t\tif(tot>=1000000)\n\t\t\t\t\t\ttot%=1000000;\n\t\t\t\t\ta.erase(lower_bound(a.begin(),a.end(),pre));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttot+=yy;\n\t\t\t\t\tif(tot>=1000000)\n\t\t\t\t\t\ttot%=1000000;\n\t\t\t\t\ta.erase(lower_bound(a.begin(),a.end(),nxt));\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t}\n\tcout<<tot%1000000;\n\treturn 0;\n}\n```\n\u66f4\u591avector\u64cd\u4f5c\u8bf7\u89c1[attack\u5927\u4f6c\u7684\u535a\u5ba2](http://www.cnblogs.com/zwfymqz/p/7788554.html)",
        "postTime": 1526776787,
        "uid": 39862,
        "name": "qwqqqq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2286 \u3010[HNOI2004]\u5ba0\u7269\u6536\u517b\u573a\u3011"
    },
    {
        "content": "\u4e00\u9053\u5e73\u8861\u6811\u9898\uff0csplay \u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4e1c\u4e1c\uff0c\u7136\u800c\u6211\u53d1\u73b0 Treap \u5199\u7684\u4eba\u5f88\u5c11\uff0c\u4e8e\u662f\u6765\u4e00\u53d1\u3002\u3002\u3002\n\n\u6ce8\uff1a\u4e00\u5b9a\u8981\u4ed4\u7ec6\u770b\u9898\uff0c\u5ba0\u7269\u53ef\u4ee5\u7b49\u5f85\uff0c\u4eba\u4e5f\u53ef\u4ee5\u7b49\u5f85\u3002\u3002\u3002\uff08\u5751\u4e86\u6211\u534a\u5c0f\u65f6\uff09\n\n\u5373\uff1a\u8981\u66f4\u6362\u6811\u4e2d\u5b58\u50a8\u7684\u662f \u5ba0\u7269 \u8fd8\u662f \u4eba\u3002\u3002\u3002\n\n\u5176\u4ed6\u7684\u5c31\u662f\u6253\u6a21\u677f\u4e86\uff08\u8bdd\u8bf4 \u7ed3\u6784\u4f53\u6307\u9488 \u600e\u4e48\u8fd9\u4e48\u5bb9\u6613 RE\u3002\u3002\u3002\uff09\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<ctime>\n#define MAX 999999999//\u6700\u5927\u503c\n#define MOD 1000000\nusing namespace std;\nint n,m=0,answer=0,pod=0;//pod\u8868\u793a\u5f53\u524d\u5b58 \u5ba0\u7269 \u8fd8\u662f \u4eba\nstruct node{\n    node* son[2];\n    int v,w,s,flag;\n    node(){\n        son[0]=son[1]=NULL;\n        w=rand();\n        v=0;\n        s=flag=1;\n    }\n};\nnode* rt;\ninline int read(){//\u8bfb\u4f18\u3002\u3002\u3002\n    int date=0,w=1;char c=0;\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n    return date*w;\n}\ninline int abs(int a){if(a<0)return -a;return a;}//\u89c9\u5f97STL\u6709\u70b9\u4e0d\u9760\u8c31\uff0c\u4e8e\u662f\u624b\u5199\u3002\u3002\u3002\nvoid maintain(node* &u){//\u4e0a\u4f20\n    u->s=u->flag;\n    if(u->son[0]!=NULL)u->s+=u->son[0]->s;\n    if(u->son[1]!=NULL)u->s+=u->son[1]->s;\n}\nvoid turn(node* &u,int f){/\u65cb\u8f6c\n    node* t=u->son[f^1];\n    u->son[f^1]=t->son[f];\n    t->son[f]=u;\n    maintain(u);\n    maintain(t);\n    u=t;\n}\nvoid insert(node* &u,int x){//\u63d2\u5165\n    if(u==NULL){\n        u=new node;\n        u->v=x;\n        return;\n    }\n    else if(u->v==x){\n        u->flag++;\n        maintain(u);\n        return;\n    }\n    int y=x>u->v?1:0;\n    insert(u->son[y],x);\n    if(u->son[y]->w>u->w)turn(u,y^1);\n    else maintain(u);\n}\nvoid remove(node* &u,int x){//\u5220\u9664\n    if(u==NULL)return;\n    if(u->v==x){\n        if(u->flag>1)u->flag--;\n        else{\n            if(u->son[0]==NULL&&u->son[1]==NULL)u=NULL;\n            else if(u->son[0]!=NULL&&u->son[1]!=NULL){\n                if(u->son[0]->w>u->son[1]->w){\n                    turn(u,1);\n                    remove(u->son[1],x);\n                }\n                else{\n                    turn(u,0);\n                    remove(u->son[0],x);\n                }\n            }\n            else{\n                if(u->son[0]==NULL)u=u->son[1];\n                else u=u->son[0];\n            }\n        }\n        if(u!=NULL)maintain(u);\n    }\n    else{\n        if(x<u->v)remove(u->son[0],x);\n        else if(x>u->v)remove(u->son[1],x);\n        if(u!=NULL)maintain(u);\n    }\n}\nvoid front(node* u,int k,int &ans){//\u6539\u8fdb\u7248\u524d\u9a71\n    if(u==NULL)return;\n    if(u->v<k){\n        if(u->v>ans)ans=u->v;\n        if(u->son[1]!=NULL)front(u->son[1],k,ans);\n    }\n    else if(u->v==k){//\u5c31\u662f\u8fd9\u91cc\u3002\u3002\u3002\n        if(u->flag>=1)ans=u->v;\n        else if(u->son[0]!=NULL)front(u->son[0],k,ans);\n    }\n    else if(u->v>k)\n    if(u->son[0]!=NULL)front(u->son[0],k,ans);\n}\nvoid next(node* u,int k,int &ans){//\u6539\u8fdb\u7248\u540e\u7ee7\n    if(u==NULL)return;\n    if(u->v>k){\n        if(u->v<ans)ans=u->v;\n        if(u->son[0]!=NULL)next(u->son[0],k,ans);\n    }\n    else if(u->v==k){//\u5c31\u662f\u8fd9\u91cc\u3002\u3002\u3002\n        if(u->flag>=1)ans=u->v;\n        else if(u->son[1]!=NULL)front(u->son[1],k,ans);\n    }\n    else if(u->v<k)\n    if(u->son[1]!=NULL)next(u->son[1],k,ans);\n}\nint main(){\n    int f,x;\n    srand(987);\n    n=read();\n    for(int cases=1;cases<=n;cases++){//\u6838\u5fc3\n        f=read();x=read();\n        if(f==pod){\n            insert(rt,x);\n            m++;\n        }\n        else if(m){\n            int s1=-MAX,s2=MAX;\n            front(rt,x,s1);next(rt,x,s2);\n            if(abs(s1-x)>abs(s2-x)){\n                answer+=abs(s2-x);\n                remove(rt,s2);\n                m--;\n            }\n            else{\n                answer+=abs(s1-x);\n                remove(rt,s1);\n                m--;\n            }\n        }\n        else{\n            pod^=1;\n            insert(rt,x);\n            m++;\n        }\n        answer%=MOD;\n    }\n    printf(\"%d\\n\",answer%MOD);//\u8f93\u51fa\n    return 0;\n}\n\n```",
        "postTime": 1512869796,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2286"
    }
]